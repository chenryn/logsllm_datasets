Variant
NDM-SMT
DM-SMT
ORAM-based
Hierarchical
Cost
Low
Medium
High
Low
Features
Simple and efficient
Applications
Fundraising
Hide proof access patterns combined with PIR
Negative reviews
Allow updates and hide patterns
Solvency
Distribute work to hierarchical institutions
COVID reports
similar application-specific registration process before P generates
the SMT, which won’t affect the security or privacy guarantees of
DAPOL+. In this case, 𝑢 keeps 𝑤𝑢 secret, and P doesn’t need to
include 𝑏𝑢 or 𝑠𝑢 in the inclusion proof for 𝑢 because they can be de-
terministically extracted. At the same time, users can figure out the
positions of their leaf nodes on their own and P cannot change the
mapping at his/her will. The determinism feature doesn’t provide
extra security, but minimizes the data base for P to reproduce the
SMT, unlike NDM-SMTs which require P to store the mapping. In
addition, when combined with private information retrieval, DM-
SMT may allow users to query inclusion proofs without leaking
their identities. This is a desired feature for periodical auditing of
PoL such as negative reviews. P proves the amount of negative
reviews he receives every month, e.g., and if it identifies which
users seldom query for proofs, there is a good chance to evade
detection when discarding the reviews from them. We discuss this
in detail in section 4.4.3.
4.3.1 Non-deterministically mapping SMT (NDM-SMT). NDM-SMTs
is a simplest type of SMT posing no constraints on the SMT other
than that 𝐻 ≥ ⌈log 𝑁⌉. For a population of 10B, e.g., an NDM-SMT
of height 33 is sufficient. Therefore, the proof size and the complex-
ity of proof generation and verification which take 𝐻 as a factor
could be rather small. This efficiency benefit makes NDM-SMT
suitable for applications where the prover entity varies from com-
panies to individuals with different business sizes and computation
resources, e.g., fundraising and syndicated loans.
𝑖=2𝐻−𝑛+1
generation (RNG) operations is 2𝐻 ·2𝐻
To implement this variant, however, we cannot simply select
a random bottom-layer node for each user due to non-negligible
probability of collisions. A rudimentary method is to retry when
collision occurs, of which the expected number of random number
1
𝑖 which approaches
to 𝐻 · 2𝐻 when 𝑛 is close to 2𝐻 . Thus this method is practical only
when 𝑛 << 2𝐻 , which does not apply to the use case of NDM-SMTs.
We need a scheme to map users to leaf nodes more efficiently. It
turns out Durstenfeld’s shuffle algorithm optimized by a HashMap
can achieve the goal. The HashMap originally is empty. We start
from the first user and repeat the following steps for 𝑛 times to
generate a random mapping. For the 𝑖-th user, randomly select a
number 𝑘 ∈ [𝑖, 2𝐻]. If 𝑘 exists as a key in the HashMap, the 𝑖-th user
is mapped to HashMap(𝑘). Otherwise the user is mapped to 𝑘. At
the end of each iteration, update the HashMap by HashMap(𝑘) = 𝑖.
In this algorithm, only 𝑛 RNG operations are performed, and both
computation and memory complexities are 𝑂(𝑛 log 𝑛) in the worst
case if the HashMap is optimized by some balanced search tree.
4.3.2 Deterministically mapping SMT (DM-SMT). In contrast to
NDM-SMTs, a DM-SMT maps users to leaf nodes deterministically,
e.g., the node index mapped to 𝑢 is determined by 𝐾𝐷𝐹(𝑤𝑢, 𝑠𝑎𝑙𝑡_𝑚),
where 𝑠𝑎𝑙𝑡_𝑚 is a public identifier. Note that since 𝑢 and P need to
agree on 𝑙𝑢 for PoL, P can in the meanwhile send each user 𝑤𝑢 in a
Figure 3: Probability of collision
To allow each user to have a deterministic position in the bottom
layer of the SMT, the tree height must be large enough to avoid
collisions, i.e., two users mapped to the same leaf node. The proba-
bility of collision with 𝑛 users in a 𝐻-height tree equals to that of
the birthday paradox and is plotted in fig. 3. Each two consecutive
curves differ by 13 bits. Assuming there are at most 10B clients, for
128-bit collision resistance we need at most a 193-height SMT. If
we tolerate collision probability of 2−64, we need a 130-height SMT.
4.3.3 ORAM-based SMT. Some applications such as proving sol-
vency allow P’s liabilities to users to be updated. If we allow updates
to an NDM-SMT directly, privacy leakage might occur because a
user observes the update history of his sibling node. Taking the
solvency case as an example, a user can link two transactions both
changing his sibling node to the same user. Although the values
are hidden, it is possible to link transactions and identities in prac-
tice. To guarantee complete privacy, P can run an independent
execution of PoL periodically, i.e., generate a new SMT with a new
pair of identifiers 𝑠𝑎𝑙𝑡_𝑠 and 𝑠𝑎𝑙𝑡_𝑏. Although this doesn’t leak any
information, the generation complexity might be high. We propose
ORAM-based SMT which combines NDM-SMTs with Oblivious
RAM (ORAM) to provide efficient privacy-preserving updates.
ORAM allows users to read and write data on a database without
leaking access patterns [37, 38]. A tree-based ORAM [63] is a full
binary tree and each block of data is uniformly randomly mapped
to a leaf node but may reside in any node along the path from the
root to the leaf. Each tree node is a bucket containing 𝐵 blocks of
data, and we call 𝐵 the bucket size. To read/write a block of data,
10701301902562−1922−1602−1282−962−642−321SMTheightHProbabilityofcollisionn=10Bn=100Mn=1Mn=10Kn=100Session 12D: Decentralized Cryptographic Protocols CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea3473𝑐 = 𝑐𝑙𝑐ℎ · 𝑐𝑟𝑐ℎ ·𝐵
the data owner remaps the block to a new random leaf node, reads
and rewrites (re-encrypts and shuffles) the whole path the block
previously resides on following certain rules. From the server’s
point of view, each access by a user is just rewriting a few random
paths, thus two access sequences are indistinguishable.
In our setting, colluding users trying to infer information from
their inclusion proofs can be viewed as the server in ORAM, and P
performing updates acts as a user aiming to conceal access patterns.
We adopt tree-based ORAM and modify it to support the functional-
ities of summation Merkle trees. Basically, we add a hash field ℎ and
a commitment field 𝑐 to each ORAM tree node. The merging func-
tion is ℎ = H(𝑐𝑙𝑐ℎ ||𝑐𝑟𝑐ℎ ||𝑐𝛽1|| · · · ||𝑐𝛽𝐵 ||ℎ𝑙𝑐ℎ ||ℎ𝑟𝑐ℎ ||ℎ𝛽1|| · · · ||ℎ𝛽𝐵),
, where 𝛽𝑖 is the 𝑖-th block in the tree node.
P updates the tree following ORAM rules and proves inclusion of
liabilities by a Merkle proof of size 𝑂(𝐵 · 𝐻). In the worst case, even
if all users are colluding and sharing all their proofs to reconstruct
the tree, they won’t be able to distinguish between two sequences
of updates. The only privacy leakage in this scheme is the number
of updates but P can always add dummy updates to make constant
number of updates periodically. Note that it is P that accesses the
database and performs ORAM operations, just like the institutional
prover in Solidus [16]. The complexity overhead on users’ side is
constant compared with other SMT variants. Tuning the bucket
size and the stash size (number of blocks in the root) to optimize
PoL proof size remains future work.
𝑖=1 𝑐𝛽𝑖
Another direction is to make updates privacy preserving and
publicly verifiable. Users only need to verify inclusions at the initi-
ation stage. PVORM [16] combines Circuit ORAM [69] with zero-
knowledge proofs to achieve this. We can modify it similarly to
support summation for PoL. With update proofs, a single audi-
tor/verifier can guarantee the validity of updates and liabilities.
However, the proofs need to be committed on a PBB, which is more
expensive compared with the distributed auditing manner.
4.3.4 Hierarchical SMTs. For some applications such as official
liability reports like COVID-19 cases, the amount of liabilities is
tracked by different institutions. We can construct hierarchical
SMTs, i.e., an SMT of the 𝑖-th level is an accumulator of tree roots of
(𝑖 − 1)-th level SMTs. In the COVID-19 tracking case, for example,
each hospital may generate a first-level SMT to prove the number
of confirmed cases in the hospital. Then a second-level SMT can be
generated for the total number in a city/state, and a federal insti-
tution may generate a third-level SMT for COVID-19 cases nation
wide. The prover’s work is therefore distributed and parallelized.
4.4 Additional Features
Although the fundamental security and privacy for PoL have been
formally defined in section 3, there remain other interesting prop-
erties desirable in certain applications. Since these features are
optional and application-specific, we informally discuss them in
this section, aiming to inspire future work for particular use cases.
4.4.1 Privacy of distinct PoLs. Privacy of distinct PoLs means for
two different PoL1, PoL2 involving provers P1, P2 and user sets
U1,U2 respectively, where P1 and P2 may or may not be the
same entity, and U1 may intersect with U2, for an adversary A
corrupting a set of users 𝑉 ⊆ U1U2, throughout the executions
of PoL1 and PoL2, A should not learn anything more than she
should, depending on the requirements of particular applications.
This indicates independence between two PoLs. In the solvency
case, e.g., this property prevents linking two accounts from two
banks to the same user. The way DAPOL+ generates leaf nodes and
padding nodes as indicated in fig. 2 prevents A from linking users
across PoLs. If PoLs are executed by the same prover, because 𝑏𝑢
and 𝑠𝑢 are extracted from 𝑤𝑢 and public unique PoL identifiers, 𝑢
only needs to register once and get 𝑤𝑢. Then 𝑢 can deterministically
compute 𝑏𝑢 and 𝑠𝑢 for all future PoLs and inclusion proofs don’t
need to contain 𝑏𝑢 and 𝑠𝑢. In addition, for rebuilding the SMTs,
P also only needs to store 𝑚𝑎𝑠𝑡𝑒𝑟_𝑠𝑒𝑐𝑟𝑒𝑡, 𝐷𝐵 and possibly the
mapping for each PoL depending on the SMT variants being used.
4.4.2 Privacy of sequential PoLs. Privacy of sequential PoLs means
for two sequential PoL1, PoL2 involving P and U, where PoL2 is
subsequent to PoL1 with updates of P’s liabilities to some users in
U, for any adversary A corrupting users 𝑉 ⊆ U, throughout the
executions of PoL1 and PoL2, A should not learn anything more
than they should, depending on the requirements of particular ap-
plications. For example, in the solvency case, banks need to process
transactions and prove solvency periodically while preserving pri-
vacy of trading patterns. This is exactly what ORAM-based SMTs
in section 4.3.3 are designed for. However, an inclusion proof needs
to contain 𝑏𝑢 and 𝑠𝑢 due to the re-encryption operations in ORAM,
which disallows users from determining these factors on their own.
4.4.3 Privacy of verifier identity. A desirable property for PoL to
enhance security is to hide from P the identities of users that query
and verify inclusion proofs. Knowing which users seldom verify,
P can simply discard the accounts to decrease the total liabilities
without being detected. Provisions can achieve this property with
the trick in DAPOL+ allowing users to deterministically extract
blinding factors thus no need to obtain any personal proof from
the prover. However, the commitment size on a PBB is large.
Our goal is similar to that of private information retrieval (PIR).
PIRs allow users storing their data on a database to retrieve data
without revealing which piece of data is accessed [23]. Viewing the
inclusion proof for each user as a block of data with a unique index,
users try to obtain inclusion proofs with block indexes, and the
prover acts as the untrusted server in PIR aiming to learn which
block of data is retrieved. This matches with the setting of PIR. Note
that the size of the database here should be at least 𝑁 instead of 𝑛
because we want to hide 𝑛 to users. So the interaction between the
user and the prover when 𝑛 = 1 should be indistinguishable with
that when 𝑛 = 𝑁 . Additionally, unless a user receives the index of
the leaf node he should be mapped to in the SMT at registration, to
allow users to deterministically know the correct indexes of leaf
nodes for their queries while avoiding collision, we need a DM-SMT
of which the tree is tall and the size of the database is 2𝐻 . Although
most blocks are dummy blocks and can be produced at accessing
so not costing much storage for the prover, the computation com-
plexity for both the prover and users is usually high [50, 59, 62]. A
potential direction to solving the practicality problem is to allow
each user to be mapped to one of a deterministic set of leaf nodes,
and this remains future work. A practical workaround, however, is
to use PIR protocols utilizing a trusted hardware [68].
Session 12D: Decentralized Cryptographic Protocols CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea3474We can also place some trust on a third party auditor. P can
outsource proofs to a semi-honest auditor that doesn’t leak verifier
identities to P. Users obtain proofs from the auditor directly and
individual verifiability is still guaranteed. Note that now the auditor
learns nothing except the number of users and verification patterns.
To preserve privacy of population against users, we can either
have P encrypt proofs so that each can only be decrypted by its
corresponding user, or require users to authenticate their identities
to the auditor in a zero-knowledge manner.
Node 2, 3 and 6 are padding nodes thus no leaf node exists between
Nodes 1 and 4. To prove padding nodes, the prover provides the
preimage of the node hash so the verifier can check. The number
of padding nodes in a neighboring proof is no more than 2𝐻, so
the sizes of a random sampling proof is linear in the tree height.
There could be privacy leakage to the auditor other than the
identities of sampled users, i.e., the population. This is because the
auditor sees the positions of neighboring leaf nodes and thus can
estimate a tighter upper bound on the population.