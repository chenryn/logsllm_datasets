sites, perform distributed denial of service attacks and
even perform automatic self-updates. In some cases, the
malware inserted tracking cookies and/or attempted to
gain more information about a system’s inner-workings
(e.g., by copying /etc/passwd and performing local
banner scans). To our surprise, only eight scripts con-
tained functionality to automatically obtain root.
In
these cases, they all used C-based kernel vulnerabili-
ties that write to the disk and compile upon exploita-
tion. Lastly, IRC was used almost exclusively as the
communication medium. As can be expected, we also
observed several instances of spamming malware us-
ing e-mail addresses pulled from the web-application’s
MySQL database backend.
In a system like phpBB,
this can be highly effective because most forum users
enter an e-mail address during the registration process.
Cross-checking the bot IPs with data from the Spamhaus
project [2] shows that roughly 36% of them currently ap-
pear in the spam black list.
One noteworthy functionality that seems to transcend
our categorizations among PHP scripts is the ability to
break out of PHP safe mode. PHP safe mode disables
functionality for, among others, executing system com-
mands, modifying the ﬁle system, etc. The malware we
observed that bypass safe mode tend to contain a hand-
ful of known exploits that either exploit functionality
in PHP, functionality in mysql, or functionality in web
server software. Lastly, we note that although we ob-
served what appeared to be over 5,648 unique injection
scripts from distinct botnets, nearly half of them point
to zombie botnets. These botnets no longer have a cen-
tralized control mechanism and the remotely included
scripts are no longer accessible. However, they are still
responsible for an overwhelming amount of our observed
HTTP trafﬁc.
6.3 Limitations
One might argue that a considerably less complex (but
more mundane) approach for eliciting search worm traf-
ﬁc may be to generate large static pages that con-
tain content representative of a variety of popular web-
applications. However, simply returning arbitrary or
static pages does not yield either the volume or diver-
sity of attacks we observed. For instance, one of our
departmental websites (with a much higher PageRank
than our deployment site) only witnessed 437 similar at-
tacks since August 2006. As we showed in Section 6,
we witnessed well over 368,000 attacks in just over two
months. Moreover, close inspection of the attacks on the
university website show that they are far less varied or
interesting. These attacks seem to originate from either
a few botnets that issue “loose” search queries (e.g., “in-
url:index.php”) and subsequently inject their attack, or
simply attack ubiquitous ﬁle names with common vari-
able names. Not surprisingly, these unsophisticated bot-
nets are less widespread, most likely because they fail
to infect many hosts. By contrast, the success of our
approach lead to more insightful observations about the
scope and diversity of attacks because we were able to
cast a far wider net.
That said, for real-world honeypot deployments, de-
tection and exploitation of the honeypot itself can be a
concern. Clearly, our system is not a true web-server
and like other honeypots [23], it too can be trivially de-
tected using various ﬁngerprinting techniques [14]. More
to the point, a well-crafted bot that knows that a partic-
ular string always appears in pages returned by a given
web-application could simply request the page from us
and check for the presence of that string. Since we will
likely fail to produce that string, our phony will be de-
tected9.
The fact that our web-honeypot can be detected is a
clear limitation of our approach, but in practice it has not
hindered our efforts to characterize current attack trends,
for several reasons. First, the search worms we witnessed
all seemed to use search engines to ﬁnd the identifying
information of a web-application, and attacked the vul-
nerability upon the ﬁrst visit to the site; presumably be-
cause verifying that the response contains the expected
string slows down infection. Moreover, it is often times
difﬁcult to discern the web-application of origin as many
web-applications do not necessarily contain strings that
uniquely identify the software. Indeed, in our own analy-
sis, we often had difﬁculty identifying the targeted web-
application by hand, and so automating this might not be
trivial.
Lastly, we argue that the limitations of the approach
proposed herein manifests themselves as trade-offs. Our
decision to design a stateless system results in a memory-
efﬁcient and lightweight deployment. However, this de-
sign choice also makes handling stateful protocols nearly
impossible.
It is conceivable that one can convert our
architecture to better interact with stateful protocols by
simply changing some aspects of the design. For in-
stance, this could be accomplished by incorporating ﬂow
sequence information into training and then recalling its
hierarchy during generation (e.g., by generating a re-
sponse from the set of appropriate ﬁrst round responses,
then second round responses, etc.). To capture multi-
stage attacks, however, ScriptGen [18, 17] may be a bet-
ter choice for emulating multi-stage protocol interaction,
and can be used in conjunction with our technique to cast
a wider net to initially entice such malware.
7 Conclusion
In this paper, we use a number of multi-disciplinary tech-
niques to generate dynamic responses to protocol in-
teractions. We demonstrate the utility of our approach
through the deployment of a dynamic content generation
system targeted at eliciting attacks against web-based
exploits. During a two month period we witnessed an
unrelenting barrage of attacks from attackers that scour
search engine results to ﬁnd victims (in this case, vulner-
able web applications). The attacks were targeted at a
diverse set of web applications, and employed a myriad
of injection techniques. We believe that the results herein
provide valuable insights on the nature and scope of this
increasing Internet threat.
8 Acknowledgments
We thank Ryan MacArthur for his assistance with the
forensic analysis presented in Section 6.2. We are grate-
ful to him for the time spent analyzing and cataloging
the captured payloads. We also thank David Dagon for
cross-referencing bot IP addresses with the Spamhaus
Project black lists [2]. We extend our gratitude to our
shepherd, George Danezis, and the anonymous review-
ers for their invaluable comments and suggestions. We
also thank Bryan Hoffman, Charles Wright, Greg Mac-
Manus, Moheeb Abu Rajab, Lucas Ballard, and Scott
Coull for many insightful discussions during the course
of this project. This work was funded in part by NFS
grants CT-0627476 and CNS-0546350.
Data Availability
To promote further research and awareness of the mal-
ware problem, the data gathered during our live deploy-
ment is available to the research community. For in-
formation on how to get access to this data, please see
http:/spar.isi.jhu.edu/botnet data/.
References
[1] Milw0rm. See http://www.milw0rm.com/.
[2] The Spamhaus Project.
spamhaus.org/.
See http://www.
[3] The Google Hack Honeypot, 2005. See http://
ghh.sourceforge.net/.
[4] ANDERSON, D. S., FLEIZACH, C., SAVAGE, S.,
AND VOELKER, G. M. Spamscatter: Character-
izing internet scam hosting infrastructure. In Pro-
ceedings of the 16th USENIX Security Symposium,
pp. 135–148.
[5] BARFORD, P., AND YEGNESWARAN, V. An inside
look at botnets. In Advances in Information Secu-
rity (2007), vol. 27, Springer Verlag, pp. 171–191.
[6] BEDDOE, M. The protocol informatics project,
2004.
[7] CHEUNG, A.
Secunia’s wordpress GBK/Big5
See
character set ”S” SQL injection advisory.
http://secunia.com/advisories/
28005/.
[8] CUI, W., KANNAN, J., AND WANG, H. J. Discov-
erer: Automatic protocol reverse engineering from
network traces. In Proceedings of the 16th USENIX
Security Symposium (Boston, MA, August 2007),
pp. 199–212.
[9] CUI, W., PAXSON, V., WEAVER, N., AND KATZ,
R. H. Protocol-independent adaptive replay of ap-
plication dialog. In Network and Distributed Sys-
tem Security Symposium 2006 (February 2006), In-
ternet Society.
[10] CUI, W., PAXSON, V., AND WEAVER, N. C. GQ:
Realizing a system to catch worms in a quarter mil-
lion places. Tech. Rep. TR-06-004, International
Computer Science Institute, 2006.
[11] DUNLAP, G. W., KING, S. T., CINAR, S., BAS-
RAI, M. A., AND CHEN, P. M. Revirt: enabling
intrusion analysis through virtual-machine logging
In Proceedings of the 5th symposium
and replay.
on Operating systems design and implementation
(New York, NY, USA, 2002), ACM Press, pp. 211–
224.
[12] FREILING, F. C., HOLZ, T., AND WICHERSKI, G.
Botnet tracking: Exploring a root-cause method-
ology to prevent distributed denial-of-service at-
tacks. In Proceedings of the 10th European Sympo-
sium on Research in Computer Security (ESORICS)
(September 2005), vol. 3679 of Lecture Notes in
Computer Science, pp. 319–335.
[13] GU, G., PORRAS, P., YEGNESWARAN, V., FONG,
M., AND LEE, W. BotHunter: Detecting malware
infection through IDS-driven dialog correlation. In
Proceedings of the 16th USENIX Security Sympo-
sium (August 2007), pp. 167–182.
[14] HOLZ, T., AND RAYNAL, F. Detecting honeypots
and other suspicious environments. In Proceedings
of the Workshop on Information Assurance and Se-
curity (June 2005).
[15] Know your enemy: Tracking botnets.
Tech.
rep., The Honeynet Project and Research Alliance,
March 2005.
Available from http://www.
honeynet.org/papers/bots/.
[16] KREIBICH, C., AND CROWCROFT, J. Honeycomb
- Creating Intrusion Detection Signatures Using
Honeypots. In Proceedings of the Second Workshop
on Hot Topics in Networks (Hotnets II) (Boston,
November 2003).
[17] LEITA, C., DACIER, M., AND MASSICOTTE, F.
Automatic handling of protocol dependencies and
reaction to 0-day attacks with ScriptGen based hon-
eypots. In RAID (2006), D. Zamboni and C. Kr¨ugel,
Eds., vol. 4219 of Lecture Notes in Computer Sci-
ence, Springer, pp. 185–205.
[18] LEITA, C., MERMOUD, K., AND DACIER, M.
ScriptGen: an automated script generation tool for
honeyd. In Proceedings of the 21st Annual Com-
puter Security Applications Conference (December
2005), pp. 203–214.
[19] NEEDLEMAN, S. B., AND WUNSCH, C. D. A gen-
eral method applicable to the search for similarities
in the amino acid sequence of two proteins. Journal
of Molecular Biology, 48 (1970), 443–453.
[20] NEWSOME, J., KARP, B., AND SONG, D. Poly-
graph: Automatically generating signatures for
In Proceedings of the 2005
polymorphic worms.
IEEE Symposium on Security and Privacy (Wash-
ington, DC, USA, 2005), IEEE Computer Society,
pp. 226–241.
[21] NEWSOME, J., AND SONG, D. Dynamic taint
analysis for automatic detection, analysis, and sig-
nature generation of exploits on commodity soft-
In Proceedings of the Network and Dis-
ware.
tributed System Security Symposium (2005).
[22] PANG, R., YEGNESWARAN, V., BARFORD, P.,
PAXSON, V., AND PETERSON, L. Characteristics
of Internet background radiation, October 2004.
[23] PROVOS, N. A virtual honeypot framework.
In
Proceedings of the 12th USENIX Security Sympo-
sium (August 2004), pp. 1–14.
[24] PROVOS, N., MCCLAIN, J., AND WANG, K.
In Proceedings of the 4th ACM
Search worms.
workshop on Recurring malcode (New York, NY,
USA, 2006), ACM, pp. 1–8.
[25] PROVOS, N., MCNAMEE, D., MAVROMMATIS,
P., WANG, K., AND MODADUGU, N. The ghost
in the browser: Analysis of web-based malware. In
Usenix Workshop on Hot Topics in Botnets (Hot-
Bots) (2007).
[26] RAJAB, M. A., ZARFOSS, J., MONROSE, F., AND
TERZIS, A. A multifaceted approach to under-
standing the botnet phenomenon. In Proceedings of
ACM SIGCOMM/USENIX Internet Measurement
Conference (October 2006), ACM, pp. 41–52.
[27] RAJAB, M. A., ZARFOSS, J., MONROSE, F., AND
TERZIS, A. My botnet is bigger than yours (maybe,
better than yours): Why size estimates remain chal-
lenging. In Proceedings of the ﬁrst USENIX work-
shop on hot topics in Botnets (HotBots ’07). (April
2007).
[28] RIDEN, J., MCGEEHAN, R., ENGERT, B., AND
MUETER, M. Know your enemy: Web application
threats, February 2007.
[29] TATA, S., AND PATEL, J. Estimating the selec-
tivity of TF-IDF based cosine similarity predicates.
SIGMOD Record 36, 2 (June 2007).
[30] WITTEN, I. H., AND BELL, T. C. The zero-
frequency problem: Estimating the probabilities of
IEEE
novel events in adaptive text compression.
Transactions on Information Theory 37, 4 (1991),
1085–1094.
[31] YEGNESWARAN, V., GIFFIN, J. T., BARFORD,
P., AND JHA, S. An Architecture for Generat-
ing Semantics-Aware Signatures. In Proceedings of
the 14th USENIX Security Symposium (Baltimore,
MD, USA, Aug. 2005), pp. 97–112.
Notes
1 The drawback, of course, is that high-interaction honeypots are
a heavy-weight solution, and risk creating their own security prob-
lems [23].
2Protocol messages are tokenized similarly in [18, 17] and [8].
3In practice, we use printable and non-printable.
4The results are virtually the same for nslookup, and hence, omit-
ted.
5These initial queries were provided by one of the authors, but simi-
lar results could easily be achieved by crawling the WebApp directories
in SourceForge and searching Google for identiﬁable strings (similar to
what we outline in Section 6.1.1).
6We placed links on 3 pages with Google PageRank ranking of 6, 2
pages with rank 5, 3 pages with rank 2, and 5 pages with rank 0.
7A preloaded library loads before all other libraries in order to hook
certain library functions
8Because none of the malware we obtained use direct system calls
to either connect() or send(), this setup sufﬁces for our needs.
9Notice however that if a botnet has n bots conducting an attack
against a particular web-application, we only need to probabilistically
return what the malware is seeking 1/nth of the time to capture the
malicious payload.