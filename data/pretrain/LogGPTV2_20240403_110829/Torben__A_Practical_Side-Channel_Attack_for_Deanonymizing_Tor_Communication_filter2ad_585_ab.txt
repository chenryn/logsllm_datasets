### 3.3.1 Resource URL Construction

The following URL is used to construct the resource:
```
http://server.com/res?str
```
Here, `res` represents a resource of size \( r_1 \), such as an image or a document, and `str` is a random string of length \( r_2 \) appended to the URL. The random string is included to minimize caching effects caused by some browsers. It is important to note that the contacted server can be any server that provides resources of the required sizes. To successfully execute the attack, it is sufficient to find a server that offers resources with four different sizes. The server does not need to be controlled by the attacker, thus providing no information about the attacker's origin.

### 3.3.2 Web Page Markers

We can now transmit short messages over the side channel to expose web pages visited using Tor. If the attacker only wants to monitor a single web page, a constant message is sufficient. However, to monitor multiple web pages or track how a user navigates from one page to another, the web page markers must be designed to have a large pairwise Hamming distance. We achieve this by using the 20-byte SHA-1 hash value of the monitored URL as a web page marker. This ensures a natural mapping between URLs and their markers.

### 3.4 Detection of Web Page Markers

The presented side channel allows web page markers to be transmitted and recognized by human observers. However, due to the vast amount of network traffic to analyze, our attack becomes practical only if the markers can be detected automatically.

To identify markers in a monitored data transfer sequence, we use a sliding window and classify the sequence under each window independently. This approach highlights an advantage of our attack over related traffic analysis attacks. Since the marker is transmitted in a small time frame, it is valid to limit the analysis to small sequences of the network trace, such as 100 symbols in our experiments. This significantly reduces the computational resources required for training a classifier and detecting web page markers.

To detect the markers, we train a multi-class Support Vector Machine (SVM) with probabilistic outputs on the sequences of individual web page markers. Given an unknown sequence, the SVM can then be used to identify the most likely web page marker present in this sequence. The probabilistic output allows us to quantify the confidence of this decision, enabling us to determine sequences that do not correspond to any known markers. A sequence is mapped into a high-dimensional vector space using positional n-grams, which we introduced for this purpose. More details on the embedding can be found in the technical report [1].

### 4. EVALUATION

We evaluate the Torben attack through a series of experiments that assess its effectiveness in different settings. After presenting our experimental setup (Sections 4.1 & 4.2), we first evaluate the attack in a closed-world setting (Section 4.3) where users can only visit web pages from a fixed set. We then consider an open-world setting where users can freely choose from a potentially infinite number of web pagesâ€”60,000 in our experiment (Section 4.4). The open-world setting allows us to approximate the false-positive rate of our attack. Finally, we perform a live experiment to evaluate the ability of Torben to identify web page markers in real-world traffic generated by multiple users (Section 4.5). A more detailed description of our evaluation can be found in [1].

### 4.1 Data Collection

To automatically visit a large number of web pages over the Tor network in a reasonable time, we use the Selenium WebDriver (version 2.38.3), a browsing automation plugin for Mozilla Firefox. The plugin is installed alongside the Tor browser bundle (version 3.5), the standard distribution of Tor. This ensures that the browser configuration used in our experiments closely matches the configuration employed by most Tor users.

For our experiments, we automatically visit different sets of the top one million web pages from the Alexa ranking (retrieved in February 2014). For the vast majority of web pages, the Selenium WebDriver can automatically determine when the page is fully loaded based on the loading of the page icon. In rare cases, successful page load is not detected within 3 minutes. In these cases, we discard the web page and use the next page in the Alexa ranking instead. Additionally, we remove variants of very similar pages. For example, we consider only google.com and not google.de or google.fr. This is necessary to obtain a better comparison with website fingerprinting approaches, as these approaches are known to fail if web pages are too similar.

### 4.2 Detection Setup

To implement the Torben attack in practice, we follow the preprocessing, transmission, and detection steps outlined in Section 3. For extracting positional n-grams from network traces, we use the tool Sally (version 0.8.3) and for learning the probabilistic classification, we use the library LibSVM.

For training the detection method described in Section 3.4, we generate 100 web page markers using the SHA-1 hashes of the top Alexa web pages and record 50 transmissions for each of these markers over Tor. Note that only the web page markers and not the actual web pages are recorded for training our detection method.

### 4.3 Closed-World Evaluation

In the first experiment, we consider a closed-world setting where we visit each of the top 100 Alexa web pages 50 times, first in February 2014 and again in April 2014, resulting in two datasets. To simulate the attack scenario of a remote marker, we use a reverse proxy and inject a small JavaScript snippet into each page that opens a separate browser window containing the marker, similar to an advertisement. The marker is transmitted after a delay of 30 seconds. For 10 of the 100 web pages that load very slowly over Tor and overlap with the marker, we increase the delay to 120 seconds.

The transmission time of the web page markers ranges from 12 to 20 seconds, with a mean of 18 seconds. As the transmission happens in the background, these slight differences to the original web page traffic are hardly noticeable, especially because communication over Tor often suffers from long loading times.

To enable a comparison with related website fingerprinting attacks, we implement the approaches by Herrmann et al. [4], Panchenko et al. [8], and Cai et al. [2], with the first slightly modified to use an SVM instead of an MNB classifier. For all approaches, we conduct the same experimental procedure as for the Torben attack, except that we do not implant markers into the web pages. Furthermore, our detection method is trained solely on web page markers, whereas the fingerprinting attacks are trained on a sample of the web pages visited in February 2014.

Figure 2a shows the performance of Torben and the website fingerprinting attacks on the web pages visited in February 2014. Our approach correctly deanonymizes 95% of the web page visits, whereas the performance of the other attacks ranges from 38.9% to 90.6%. However, all website fingerprinting attacks suffer from changes in web content. When applied to the same web pages visited in April 2014, none of the passive approaches can correctly identify more than a third of the web pages, as shown in Figure 2b. By contrast, the Torben attack maintains similar performance as in February 2014 and outperforms the website fingerprinting attacks, as the learned markers do not change over time.

Overall, this experiment demonstrates that the proposed side-channel attack can deanonymize web page visits with high accuracy in a closed-world setting.

### 4.4 Open-World Evaluation

In this experiment, we consider an open-world setting where the user can freely visit web pages from a large unknown set, and only a few of these pages are tagged with a web page marker. The adversary is interested in determining whether marked web pages have been visited by a particular user.

We extend the previous experiment by additionally choosing 60,000 web pages at random from the Alexa top one million ranking, none of which are part of the top 100 web pages. Each of these web pages is then visited once over Tor without sending a marker. This large set of web pages enables us to estimate the false-positive rate of the Torben attack. Due to the usage of an SVM with probabilistic output, we can simply identify data transfer sequences that do not contain a web page marker by setting a threshold on the determined probabilities.

Figure 2c shows a ROC curve for the detection performance of Torben in this experiment. The false-positive rate on the x-axis is given in the range 0 to 0.001, while the detection rate is shown on the y-axis between 0.6 and 1.0. The attack enables detecting more than 91% of the 100 web pages with no false positives in a set of 60,000 additional web pages.

The outcome of the open-world evaluation demonstrates the reliability of the web page markers, which are unlikely to be confused with regular web page traffic and enable detecting marked pages with a very low false-positive rate. This reliability is due to the design of the side channel, which uses atypical request-response pairs for transmitting information (Section 3.2).

### 4.5 Live Evaluation

The previous experiments already show the effectiveness of our approach on a large amount of data that has been recorded automatically. However, to fortify the obtained results, we conduct a further experiment in which we analyze web traffic of real users.

In this experiment, four different users surf the web for roughly two hours using Tor. Each user visits arbitrary web pages and, from time to time, randomly chosen marked web pages. We simulate the attack scenario of a remote marker as described in Section 4.3 and set the transmission delay for markers to 120 seconds.

Afterward, the recorded traffic of each user is split into chunks of three minutes that are separately analyzed using a sliding window as described in Section 3.4. The classifier outputs a label and a probability score for each chunk. If the probability score of a chunk is below a particular threshold, we conclude that the user did not visit any marked web pages during this time frame. We select this threshold to be \( t = 0.1 \) based on several test runs conducted in advance. From a total of 34 visited marked web pages, we are able to detect and classify 31 correctly. Furthermore, the classifier does not output any false positives.

### 5. LIMITATIONS AND DEFENSES

Our experiments show that Torben is a reliable deanonymization technique against Tor. However, its limitations could enable the development of effective defenses.

First, our attack makes no attempts to hide web page markers. Consequently, developing a detection mechanism that identifies and suppresses communication on our side channel may be an effective method to protect users. Such mechanisms could be implemented either on the client side directly in the form of a browser plugin or even by Tor nodes to protect all clients at once.

Second, our evaluation shows that web page markers may be corrupted if they largely overlap with the loading of a web page. This suggests that, although our classification model can compensate for some traffic interference using positional features, it fails if the interference becomes too severe. A second option would be to introduce chaff traffic to disturb the side-channel communication. However, this option may not be satisfactory in practice, as it introduces additional traffic and might lower Torâ€™s overall performance.

### 6. RELATED WORK

Attacks against anonymization techniques have been a vibrant area of research in recent years. Several researchers have recognized that, while it may not be possible to decipher encrypted messages, important characteristics of the data, such as its size and partitioning into data units, are often disclosed. For example, Liberatore et al. have shown that it is possible to identify web pages in encrypted HTTP traffic by observing characteristic packet lengths [7].

Based on this observation, website fingerprinting attacks try to deanonymize Tor users by identifying patterns in the encrypted traffic between the user and guard node, which are characteristic of particular monitored web pages [2, 4, 8]. All of these approaches, however, suffer from false-positive rates that are too high to enable practical application. Moreover, our experiments demonstrate that website fingerprinting suffers from changes in web content and degrades deanonymization performance over time.

While website fingerprinting attacks consider an attacker only between the client and its entry node, traffic confirmation attacks require an attacker who can correlate the traffic on both ends of a communication path. Several authors have demonstrated the effectiveness of such attacks [6, 9]. However, this scenario requires the attacker to have access to both ends of the connection over a long period of time.

Passive traffic analysis attacks require traffic to be observed for a longer period of time before users can be effectively deanonymized. Approaches where attackers actively attack the communication path to lower the required amount of time have therefore been proposed. Several watermarking schemes have been proposed for mixed networks, which use inter-packet delays to encode watermarking sequences [5, 10]. In contrast to Torben, these attacks do not take place at the application layer and are thus much more difficult to realize in practice. Furthermore, they consider a stronger attacker who is able to control the exit node or the link between the exit node and the server.

### 7. CONCLUSION

Tor is among the largest and best understood anonymization networks, protecting the privacy of over a million users worldwide. This paper presents a novel deanonymization attack on Tor that exploits a fundamental weakness of low-latency anonymization networks. Specifically, we show that an attacker capable of providing web content to users, e.g., through banner advertisements or cross-site scripting, can deanonymize users via a side-channel attack. By transmitting web page markers through this side channel, the attacker can expose the web pages a user visits within a couple of seconds. This attack is considerably more effective than known website fingerprinting attacks and far less intrusive than browser exploits used in the wild. Fortunately, the side-channel communication is clearly visible in network traces, making it possible to implement detection approaches as a first countermeasure against this attack.

**Acknowledgements.** The authors acknowledge funding from BMBF under the project INDI (FZK 16KIS0154K) and from DFG under the project DEVIL (RI 2469/1-1).

**References**

[1] D. Arp, F. Yamaguchi, and K. Rieck. Torben: Deanonymizing Tor communication using web page markers. Technical Report IFI-TB-2014-01, University of GÃ¶ttingen, 2014.

[2] X. Cai, X. C. Zhang, B. Joshi, and R. Johnson. Touching from a distance: Website fingerprinting attacks and defenses. In Proc. of ACM Conference on Computer and Communications Security (CCS), 2012.

[3] R. Dingledine, N. Mathewson, and P. Syverson. Tor: The second-generation onion router. 2004.

[4] D. Herrmann, R. Wendolsky, and H. Federrath. Website fingerprinting: Attacking popular privacy enhancing technologies with the multinomial naive-bayes classifier. In Proc. of ACM Workshop on Cloud Computing Security, 2009.

[5] A. Houmansadr and N. Borisov. Swirl: A scalable watermark to detect correlated network flows. In Proc. of Network and Distributed System Security Symposium (NDSS), 2011.

[6] B. N. Levine, M. K. Reiter, C. Wang, and M. K. Wright. Timing attacks in low-latency mix systems. In Financial Cryptography, 2004.

[7] M. Liberatore and B. N. Levine. Inferring the source of encrypted HTTP connections. In Proc. of ACM Conference on Computer and Communications Security (CCS), CCS â€™06, 2006.

[8] A. Panchenko, L. Niessen, A. Zinnen, and T. Engel. Website fingerprinting in onion routing based anonymization networks. In Proc. of ACM Workshop on Privacy in the Electronic Society, 2011.

[9] V. Shmatikov and M.-H. Wang. Timing analysis in low-latency mix networks: attacks and defenses. 2006.

[10] X. Wang, S. Chen, and S. Jajodia. Network flow watermarking attack on low-latency anonymous communication systems. In Proc. of IEEE Symposium on Security and Privacy (S&P), 2007.