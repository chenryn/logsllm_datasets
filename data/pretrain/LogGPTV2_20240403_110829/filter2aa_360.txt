# Gone in 60 Minutes: Stealing Sensitive Data from Thousands of Systems Simultaneously with OpenDLP

**Presenter:** Andrew Gavin  
**Affiliation:** Verizon Business  
**Twitter:** @OpenDLP, @andrewgavin

## Standard Disclaimer
- I am representing myself, not my employer, with OpenDLP and this talk.
- If you get into trouble for using OpenDLP, it is your responsibility, not mine.

## Presentation Outline
1. **What is OpenDLP?**
2. **Why Write It?**
3. **How Does OpenDLP's Agent Work?**
4. **Benchmarks: Agentless vs. Agent**
5. **Live Demo of Agent**
6. **Newly-Implemented Features**
7. **Future Plans**
8. **Q&A**

## What is OpenDLP?
- **Components:**
  - **Agent:** A Windows-based tool.
  - **Web Application:** A LAMP (Linux, Apache, MySQL, PHP) application.
- **License:** Free and open source (GPLv3).
- **Use Cases:**
  - Compliance personnel.
  - Network/System administrators.
  - Penetration testers.

## Why Write It?
- **Motivation:**
  - Prior to OpenDLP, there was no free, agent-based data discovery tool.
  - Other available FOSS tools were designed for manual use from a single workstation:
    - Cornell Spider (http://www2.cit.cornell.edu/security/tools)
    - FindSSN (Sourceforge)
    - `grep`
  - These tools could be adapted as agentless scanners but were impractical for large deployments.

## How Does OpenDLP's Agent Work?

### Create a Reusable Policy
- **Authentication:**
  - Administrator credentials.
  - Option to use pass-the-hash technique.
- **File and Directory Management:**
  - Whitelist and blacklist directories and file extensions.
- **Resource Allocation:**
  - Memory ceiling for the agent (as a percentage of physical RAM).
- **Search Criteria:**
  - Regular expressions (PCREs) to use.
- **Deployment:**
  - Number of concurrent agents to deploy.
- **Data Handling:**
  - Option to obfuscate sensitive information in the database.
  - Frequency of agent check-ins with results.

### Start a Scan
- **Deployment:**
  - Agents deployed over SMB.
  - Started with Samba's "winexe".
  - Web application can concurrently deploy up to 1,000 agents.
  - Up to 30 agents can be deployed simultaneously for faster scanning.
- **Execution:**
  - Runs as a low-priority service.
  - Limits memory usage to a specified percentage.
  - Scans files based on whitelist/blacklist and regular expressions.
  - Securely pushes findings to the web server at regular intervals.
  - Uninstalls itself upon completion.
  - Written in C, with no .NET dependencies.

### Monitor Agents in the Web Application
- **Real-time Monitoring:**
  - Securely receives results from agents.
  - Displays current status (e.g., directory listing, scanning).
  - Shows the number of processed files and bytes.
  - Provides estimated time to completion.
  - Uses a two-way-trusted SSL connection.
  - Allows pausing or uninstalling agents.
  - Automatically deletes and uninstalls agents when done.

### Review Results in the Web Application
- **High-Level Information:**
  - Overview of entire scans.
  - Number of findings per scanner.
  - Estimated time of completion.
- **Detailed Information:**
  - Specific scan details.
  - Filenames and byte offsets of findings.
  - Hyperlinks to download files with findings.

## So, You Invented Multiplayer Grep?
- **Concept:**
  - OpenDLP can be seen as a distributed version of `grep` for sensitive data discovery.

## Benchmarks: Agent vs. Agentless

### System Specifications
- **OpenDLP Agent:**
  - Core2duo P8600 (2.4 GHz).
  - 4 GB RAM.
  - 7200 RPM, 250 GB HDD.
  - 100 mbit network.

### Benchmark: OpenDLP Agent
- **Performance:**
  - 13 regexes scanned 2.05 GB in 01:07:39.
  - 04:15 to enumerate and blacklist files, read files into memory.
  - 01:03:24 to perform calculations.
  - 1 GB scanned every 32:57 with 13 regexes.
  - With one regex, 1 GB scanned every 04:45.

### Benchmark: Agentless
- **Performance:**
  - 13 regexes scanned 2.05 GB in 01:20:26.
  - 17:02 to download and read all files.
  - 01:03:24 to perform calculations.
  - 1 GB scanned every 39:10.
  - With one regex, 1 GB scanned every 10:40.

### Benchmark Comparison
- **One System:**
  - 13 regexes: Agentless is 19% slower.
  - One regex: Agentless is 130% slower.
  - For a single system, the performance hit might be worth not installing an agent.
- **Multiple Systems:**
  - Extrapolating to more systems, the performance difference becomes more significant.

### Bottlenecks in Agentless Scanning
- **Network:**
  - 17:02 wallclock (21.2%) for 13 regexes.
  - 16.5 mbit throughput over SMB.
  - On a 100 mbit network, can handle 6.06 systems concurrently without bottleneck.
- **CPU:**
  - 01:03:24 wallclock (78.8%).
  - On a single core, can handle 1.27 systems concurrently.
  - On a quad-core, can handle 5.08 systems concurrently.

### Time Comparison: 1 to 25 Systems
- **Graph:**
  - Hours vs. Number of Systems (1 to 25).
  - Agent, Agentless (1 core), Agentless (4 cores).

### Time Comparison: 100 to 2,000 Systems
- **Graph:**
  - Days vs. Number of Systems (100 to 2,000).
  - Agent, Agentless (1 core), Agentless (4 cores).

### Agent vs. Agentless Benchmark Results
- **Agent-Based Upsides:**
  - Distributed computations.
  - Minimal network traffic.
  - Small agent size (1.02 MB compressed).
  - Only logs and results uploaded to the web application.
- **Agentless Downsides:**
  - Centralized computations.
  - All files must be downloaded to the central system.

## Live Demo of Agent Scan

## Newly-Implemented Features
- **Agentless Database Scans:**
  - Create reusable policies.
  - Database authentication credentials.
  - Whitelist/blacklist DBs, tables, columns.
  - Number of rows to grab (or all rows).
  - PCREs to use.
  - Concurrently scan several databases.
  - Traverse DB structure like SQLi.
  - Can pause, resume, or kill scans.
  - Supports MSSQL and MySQL.
- **Agentless OS Filesystem Scans:**
  - Create reusable policies.
  - OS credentials (admin helpful, but not necessary).
  - Whitelist/blacklist directories and file extensions.
  - Memory ceiling.
  - PCREs to use.
  - Concurrently scan systems.
  - Theoretically unlimited.
  - More than the ~23 allowed through "net use" hacks.
  - Can pause, resume, or kill scans.
  - Supports MS Windows over SMB and UNIX over SSH (using sshfs).

## Live Demos
- **Agentless Database Scan**
- **OS Filesystem Scans (Windows and Linux)**

## Conclusion
- **OpenDLP:**
  - A free tool to rapidly discover sensitive data across an entire organization's network.
  - As a penetration tester, use OpenDLP to:
    - Add value to your pentest.
    - Provide undeniable proof to C-level executives about the dangers of data leakage due to lax security policies.
  - As a sysadmin/netadmin, proactively identify information before a bad actor finds it.

## Future Plans
- **Database Support:**
  - Expand to Oracle, DB2, etc.
- **Agents:**
  - Develop for Linux and macOS.
- **Output Formats:**
  - Word/Excel.
- **Trending Graphs:**
  - Excel/ImageMagick.
- **Portable Agent:**
  - Deploy on USB thumb drives for social engineering attacks.
- **Integration:**
  - Metasploit.
- **Monitoring:**
  - Network traffic and file copying.
  - See MyDLP project (www.mydlp.org).

## Availability, Contact Info, Q&A
- **Project URL:**
  - http://opendlp.googlecode.com
- **Downloads:**
  - 0.4 source code and binaries.
  - 0.4 Ubuntu-based VirtualBox VM.
- **Contact:**
  - Email: PI:EMAIL
  - Twitter: @OpenDLP, @andrewgavin
- **Q&A**