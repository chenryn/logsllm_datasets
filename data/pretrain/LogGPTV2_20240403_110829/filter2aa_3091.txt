# WMI 攻击手法研究系列（第三部分）：与 Windows 注册表的交互

本文翻译自 0xInfection's Blog 的《Offensive WMI - Interacting with Windows Registry (Part 3)》。在这一部分中，我们将重点介绍如何使用 WMI 与 Windows 注册表进行交互。

## 引言
在开始之前，请注意 MITRE ATT&CK 将“查询注册表”(Query Registry, T1012) 和“修改注册表”(Modify Registry, T1112) 归类为特定的技术类别。

## 一、Windows 注册表概述
注册表是一个数据库，用于存储操作系统的配置设置。内核、设备驱动程序、服务、SAM、用户界面和第三方应用程序都依赖于注册表，这使得它成为攻击者关注的重点目标。

注册表由称为 "hives" 的部分组成，例如 `HKEY_LOCAL_MACHINE` 和 `HKEY_CURRENT_USER`。通过 `regedit.exe` 可以看到这些 hives 的排列方式类似于文件系统结构，每个 hive 包含多个键，键可以有子键，键或子键用来存储值。注册表项由名称和值组成。

## 二、WMI 与注册表
WMI 提供了一个名为 `StdRegProv` 的类，用于与 Windows 注册表进行交互。通过这个类，我们可以执行多种操作，包括检索、创建、删除和修改键和值。需要注意的是，我们需要使用 `root\DEFAULT` 命名空间来处理注册表。

### 2.1 查询注册表
#### 2.1.1 枚举键
以下命令将枚举 `HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion` 下的所有子项：
```powershell
Invoke-WmiMethod -Namespace root\default -Class stdregprov -Name EnumKey @(2147483650, "software\microsoft\windows nt\currentversion") | select -ExpandProperty sNames
```

#### 2.1.2 枚举值
以下命令将枚举 `Drivers32` 键下的所有值：
```powershell
Invoke-WmiMethod -Namespace root\default -Class stdregprov -Name enumvalues @(2147483650, "software\microsoft\windows nt\currentversion\drivers32")
```

#### 2.1.3 读取值
以下命令将读取 `Drivers32` 项下 `aux` 和 `midi` 子项的值：
```powershell
Invoke-WmiMethod -Namespace root\default -Class stdregprov -Name GetStringValue @(2147483650, "software\microsoft\windows nt\currentversion\drivers32", "aux")
Invoke-WmiMethod -Namespace root\default -Class stdregprov -Name GetStringValue @(2147483650, "software\microsoft\windows nt\currentversion\drivers32", "midi") | select svalue
```

### 2.2 修改注册表
#### 2.2.1 检查键的权限
以下命令检查对 `HKEY_CURRENT_USER` 和 `HKEY_LOCAL_MACHINE` 下 `Run` 键的访问权限：
```powershell
Invoke-WmiMethod -Namespace root\default -Class stdregprov -Name CheckAccess @(2147483649, "software\microsoft\windows\currentversion\run", 32)
Invoke-WmiMethod -Namespace root\default -Class stdregprov -Name CheckAccess @(2147483650, "software\microsoft\windows\currentversion\run", 32)
```

#### 2.2.2 创建注册表项
以下命令将在 `HKEY_CURRENT_USER` 下创建一个新的 `Run` 项，以实现持久性：
```powershell
Invoke-WmiMethod -Namespace root\default -Class stdregprov -Name SetStringValue @(2147483649, "software\microsoft\windows\currentversion\run", "C:\Windows\System32\calc.exe", "Calculator")
```

#### 2.2.3 删除注册表项
以下命令将删除 `HKEY_CURRENT_USER` 下 `Run` 项中的 `Calculator` 子项：
```powershell
Invoke-WmiMethod -Namespace root\default -Class stdregprov -Name DeleteValue @(2147483649, "software\microsoft\windows\currentversion\run", "Calculator")
```

#### 2.2.4 创建键
以下命令将在 `HKEY_LOCAL_MACHINE\Software\OpenSSH` 下创建一个名为 `CustomAgent` 的新键：
```powershell
Invoke-WmiMethod -Namespace root\default -Class stdregprov -Name CreateKey @(2147483650, "software\openssh\CustomAgent")
```

#### 2.2.5 删除键
以下命令将删除 `HKEY_LOCAL_MACHINE\Software\OpenSSH` 下的 `CustomAgent` 键：
```powershell
Invoke-WmiMethod -Namespace root\default -Class stdregprov -Name DeleteKey @(2147483650, "software\openssh\CustomAgent")
```

## 三、工具
- **Registry.ps1**：提供易于使用的 PowerShell 函数，用于枚举、创建、删除、更新键等。
- **Get-Information.ps1**：Nishang 脚本，通过注册表收集系统的有趣信息。
- **Invoke-WmiCommand.ps1**：Powersploit 脚本，通过 WMI 作为 C2 通道将 Payload 存储在注册表中。
- **Invoke-SessionGopher.ps1**：PowerShell Empire 脚本，搜索和解密来自系统的 RDP、WinSCP、FileZilla、PuTTY 等会话信息。

## 四、结论
注册表是攻击者的宝库，不仅用于收集有用数据，还可以用于存储 Payload，作为无文件攻击和持久性机制的理想选择。在后续文章中，我们将进一步探讨如何仅使用 WMI 和注册表创建完整的 C2 基础设施。敬请期待！

希望这篇文章对你有所帮助！