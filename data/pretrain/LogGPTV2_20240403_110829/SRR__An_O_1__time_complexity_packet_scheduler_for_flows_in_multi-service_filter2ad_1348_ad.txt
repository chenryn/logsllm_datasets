−
)1
C
max
In the above 2 cases,  
2
max(
D
P
f
)
D
f
=
=
. 
f
,
8
1
'
'
4.3  Scalability of SRR 
The scalability of SRR is illustrated in the following aspects. 
1.  Different rate ranges can be accommodated with the WSS of 
the same order by adjusting the rate granularity. For example, 
maxK =16 (i.e., the 
when the granularity of rate is 1Kbps, and 
set  of 
order  of 
the 
is 
Mbps
1{
2,
}
.  When 
rate 
granularity  is  1Mbps,  the  corresponding  set  of  rate  is 
.  Thus,  similar  WSS 
1{
can be used in both core routers  (switches)  and  edge  routers 
(switches).  
the  WSS 
kbps
,
is  16), 
64,
rates 
the 
Mbps
Mbps
Mbps
kbps
kbps
Gbps
64,
L
3,
2,
L
3,
}
,
2.  SRR  can  be  used  in  output  links  with  variable  bandwidth 
capacity.  According  to  its  working  procedure,  SRR  can 
provide  fairness  among  competing  flows  even  when  the 
bandwidth of the output link varies from time to time. 
3.  SRR works well regardless of the number of flows. Since the 
time complexity of SRR is strictly O(1) (which will be proven 
in  the  next  subsection),  SRR  works  well  even  with  a  large 
number of flows. This makes SRR an attractive scheduler for 
high-speed  networks  where  time  complexity  is  the  most 
important factor. 
1 The inequality is Theorem 1.1 of reference [17] (in page 25). 
}1
th
,3,2,1{
k22  to 
k23×
.  
K max
th
max −
K max
 are  contained  in  the 
4.4  Complexity of  SRR 
From the first part of Proposition 1, we know that the WSSs with 
order 
 WSS. 
KL
,
Thus,  only  one 
 WSS  is  needed  in  SRR.  When 
maxK =16, the space needed to store the corresponding WSS is 
64k bytes (each term of WSS occupies one byte). However, since 
the length of the WSS increases  exponentially  with  the  order  of 
the  WSS,  it  becomes  impractical  to  store  the  whole  sequence 
maxK  becomes very large. This problem can  be 
statically when 
overcome by using the last part of Proposition 1. By constructing 
a (2k)th WSS from a kth and a (k+1)th WSS, the space needed can 
be reduced from 
We  believe  that  a  32th  WSS  is  enough  for  current  and  future 
packet networks (it can provide up to 4Tbps rate with granularity 
of  1kbps).  Thus,  under  this  condition,  the  space  complexity  of 
.  c 
SRR  is 
is  the  space  needed  to  store  a  16th  and  a  17th  WSS, 
maxKNO ×
(
 double 
links. 
We have the following theorem for the time complexity of SRR. 
Theorem  4:  The  SRR  packet  Scheduler  needs  O(1)  time  to 
choose  a  packet  for  transmission,  O(k)  time  to  add  or  delete  a 
flow, where k is the order of WSS currently used by SRR. 
Proof:  SRR  uses  the  schedule  action  in  Figure  2  to  choose  a 
packet for transmission. It takes the scheduler O(1) time to choose 
the flow f. Then since 
, schedule will transmit at least 
one  packet  for  flow  f.  After  serving  f,  the  schedule  will  update 
dlP . If the end of 
colDL  is not reached, one sentence is needed 
 is  the  space  needed  to  store  the 
+
maxKNOc
1623×=c
≥max
L
max ≤
maxK
32
 and 
×
)
, 
K
(
)
fL
1−k
dlP  and 
dlP . If the end of 
colDL  is met, schedule will update 
to update 
cP  to  get  the  new  column  number  of  M,  it  may  enter  the  loop 
column  of M will be 
code. However, according to the WSS, 
visited at least once in every 2 times. According to Proposition 5, 
1−kDL  is  not  empty.  Thus,  the  loop  code  can  be  executed  at 
cP  needs O(1) 
most 2 times. Thus, the code that updates 
time.  Thus,  SRR  needs  O(1)  time  to  choose  a  packet  for 
transmission. 
Since Add_flow and Del_flow need to update the k double links 
when flows come and leave SRR, their time complexities are O(k)  
□ 
It  should  be  noted  that  if  a  flow  is  always  not  backlogged,  the 
Add_flow and Del_flow will be invoked once per packet. Though 
in SRR (which uses a fixed number of weights, 
) the time 
complexities  of  Add_flow  and  Del_flow  are  constant  values  (at 
most O(Kmax)), it does introduce a burden that may be comparable 
to the O(logN) incremental step in the time-stamp based schemes. 
In  [5],  we  propose  to  use  a  timer  to  delay  the  deletion  of  an 
inactive flow. However, such a mechanism will make SRR not a 
strictly O(1) scheme to forward a packet. We also show in [5] that 
it  is  difficult  to  choose  the  time-out  value  of  the  timer.  It  is  a 
question needs further investigation. 
5.  SIMULATION 
In this paper, we use simulation to compare the end-to-end delay 
property of SRR with that of WFQ and DRR. For more simulation 
experiments (such as local delay bound, queue delay and fairness) 
please refer to [5]. 
5.1  Simulation Configuration 
The  tool  we  used  in  our  simulation  experiment  is  ns  [31],    to 
which we added WFQ, SRR scheduling  classes,  and  revised  the 
2K
max
N0 
N1 
N2 
N3 
N6 
N7 
R0 
R1
R2 
R3 
R4 
N4 
N5 
Figure 3. Network topology of the simulation experiment 
M0 
M1 
M2 
M3 
DRR2 scheduling class. 
As shown in Figure 3, the above network topology is designed to 
compare the end-to-end delay property of SRR with that of WFQ 
and DRR. There are 12 hosts (N0-N3, M0-M3, and N4-N7), and 
5  routers  (R0-R4).  The  transmission  delay  and  bandwidth 
capacities of the links are shown in the following table. 
Table 1 Transmission delay and bandwidth parameters of the 
links. 
Bandwidth 
(Mbps) 
10 
6 
15.5 
100 
10 
10 
10 
10 
Transmission  delay 
(ms) 
0.03 
0.1 
3 
3 
0.1 
0.03 
0.03 
0.03 
Links 
N[0-3] – R0 
R0-R1 
R1-R2 
R2-R3 
R3-R4 
R4-M[0-3] 
N[4,6]-R1 
N[5,7]-R3 
In  this  simulation,  R0,  R4  are  edge  routers,  R1-R3  are  core 
routers. A packet from N0 to M0 will traverse 6 links.  
The following traffic traces are used in this experiment, 
1.  There are 10 CBR flows numbered from 1 to 10 between N0 
and  M0.  The  rates  of  the  10  flows  are  10kbps,  10kbps, 
20kbps, 20kbps, 40kbps, 80kbps, 80kbps, 160kbps, 260kbps, 
320kbps  respectively.  The  CBR  flows  simulate  the  real-time 
audio service here. 
2.  There are 2 ftp flows between N1 and M1. The total rates of 
the  two  flows  are  2Mbps.  These  2  flows  are  best  effort 
streams. The best effort streams in this experiment are mapped 
to flow 0.  
 WFQ
 SRR
 DRR
0.25
0.20
0.15
0.10
0.05
)
s
(
y
a
e
d
l
0.00
0
50
100
150
200
rate(kbps)
250
300
350
Figure 4a. The average delay of the CBR flows 
2 In ns2.1.b5, the implementation of DRR does not interpret the 
algorithm in a right way. It deletes a flow when it deques its last 
packet. However, a flow should be  deleted  only  when  the  last 
bit of the last packet left the transmission interface. 
3.  There are 2 real-time video streams numbered as flow 11, 12 
between  N2  and  M2.  The  total  rates  of  the  2  streams  are 
1.1Mbps.  The  video  streams  are  gotten  from  [21],  one  is  a 
cartoon movie named simpsons (with average  rate  464kbps), 
the other is a movie named golden finger (with average rate 
608kbps).  The  videos  were  compressed  using  an  MPEG-1 
compliant encoder. The quantization values were: I=10, P=14, 
and B=18 using the pattern IBBPBBPBBPBB, which gives a 
group of picture (GOP) size of 12. 
4.  There  are  10  flows  numbered  from  13  to  22  with  Pareto 
distribution  between  N3  and  M3.  The  rate  of  each  flow  is 
200kbps.  These  flows  simulate  services  with  long-range 
dependency. 
5.  There is a ftp stream between N5 and N6, and a telnet stream 
between N4 and N7. These flows are best effort services used 
to consume the redundant bandwidth of the network. 
In this experiment, we measure the  end-to-end  delays  of  the  ten 
CBR flows under different scheduling schemes (i.e., WFQ, SRR, 
DRR). 
5.2  Simulation Results 
The average and maximum end-to-end delays of flows 1 to 10 are 
shown in Figure 4a and Figure 4b. 
0.40
0.35
0.30
0.25
0.20
0.15
0.10
0.05
0.00
)
s
(
y
a
e
d
l
 WFQ
 SRR
 DRR
0
50
100
150
200
rate(kbps)
250
300
350
Figure 4b. The maximum delay of the CBR flows 
This experiment shows that the end-to-end delay property of SRR 
is similar to that of WFQ. The worst-case and average end-to-end 
delays of SRR and WFQ decrease with the increasing of the flow 
rate.  This  experiment  also  shows  that  the  worst-case  end-to-end 
delay  property  of  SRR  is  worse  than  that  of  WFQ  (which 
conforms  with  Theorem  3  of  this  paper),  and  the  average  delay 
property of SRR is a little better than that of WFQ. For example, 
as  to  the  flow  6,  the  worst-case  end-to-end  delays  under  WFQ, 
SRR, and DRR are 36.16ms, 56.61ms and 168ms, and the average 
delays are 30.78ms, 25.93ms, and 70.20ms respectively. Thus,  as 
to flow 6, 
D
D
WFQ
max
WFQ
mean
:
:
D
D
SRR
max
SRR
mean
:
:
D
DRR
max
D
DRR
mean
=
65.4:57.1:1
=
28.2:84.0:1
implementing the SRR in the Linux kernel, J. Chen, and C. Lin 
for 
thank  both  the 
anonymous reviewers and Roch Guerin for their efforts. 
their  valuable  comments.  Finally,  we 
Therefore, the end-to-end delay of SRR is very similar to that of 
WFQ.  Both  WFQ  and  SRR  perform  much  better  than  DRR.  If 
flow 6 is a real-time IP telephony stream, it will work well under 
WFQ and SRR. However, it will not work well under DRR for the 
large worst-case end-to-end delay. 
The experiment also shows that the maximum and average end-to-
end  delays  of  DRR  change  little  with  different  flow  rates.  The 
average  delay  is  about  80ms,  and  the  maximum  delay  is  about 
170ms for DRR. This experiment shows that the worst-case delay 
of  DRR  makes  it  not  suitable  for  services  with  certain  delay 
bound requirements, such as IP telephony.  
Thus, SRR is a qualified scheduler for services that do not have 
strict  end-to-end  delay  requirements,  such  as  IP  telephony,  and 
adaptive real-time services.  
6.  CONCLUSION 
We have proposed SRR and examined its properties in this paper. 
A Weight Spread Sequence and a Weight Matrix are introduced 
as two main data structures of the SRR. With the use of the WSS 
and  the  Weight  Matrix,  the  output  of  SRR  is  distributed  more 
evenly than that of the ordinary round robin schedulers. SRR can 
provide  strictly  O(1)  time  complexity,  short-term  fairness,  and 
certain schedule delay bound at the same time.  
SRR  is  attractive  for  its  low  time  complexity  and  simplicity.  It 
maxK double links, 
only needs to store a static WSS, to maintain 
and  to  assign  a  deficit  counter  for  each  flow.  Thus  it  can  be 
implemented in high-speed links at low cost, where efficiency and 
time complexity are the most important factors. It should be noted 
that SRR fails to provide a strict local delay bound. Thus, it is not 
suitable  for  those  applications  where  strict  end-to-end  delay 
bound is needed (i.e., guaranteed services). However, simulations 
show that SRR can provide good average and certain worst-case 
end-to-end  delay  bounds,  thus  it  is  an  appropriate  scheduler  for 
services  where  strict  delay  bound  is  not  required  (such  as  IP 
telephony and adaptive real-time services). 
Though  it  is  still  elusive  that  whether  an  ideal  packet  scheduler 
with strict rate-proportional delay bound, short-term fairness, and 
O(1) time complexity exists, this paper introduces a new idea to 
avoid 
time-stamp  based 
schedulers while still maintaining short-term fairness and certain 
schedule delay bound. 
We  have  implemented  and  tested  the  SRR  in  the  Linux  Kernel 
2.2.5, the implementation indicates that SRR introduces little cost 
to  the  TCP/IP  stack,  and  the  experiment  results  are  consonant 
with  that  of  the  simulation  results.    Our  experiments  also  show 
that  SRR  is  a  suitable  scheduling  algorithm  for  the  AF  PHB  of 
DiffServ.  
7.  ACKNOWLEDGMENTS 
Prof. W. Qi gave the name of SRR and WSS. The author would 
like  to  thank  him  for  his  constructive  comments  and  generous 
help  for  improving  the  organization  and  presentation  of  this 
paper. The author also would like to thank J. Wang, Y. Sun for 
 limits  of  various 
the 
O
(log N
)
8.  REFERENCES 
[1] 
J. Bennet, and H. Zhang, “WF2Q: worst case fair weighted 
fair queueing,” in Proc. Infocom’96, 1996. 
[2] 
[3] 
[4] 
[5] 
[6] 
[7] 
[8] 
[9] 
J.  Bennett,  and  H.  Zhang,  “Hierarchical  Packet  Fair 
Queueing Algorithms,” in Proc. SIGCOMM’96, 1996. 
S.  Blake,  et.  al.  “An  Architecture  for  Differentiated 
Services,” RFC 2475, Dec. 1998. 
J.  Bolot,  and  T.  Turletti,  “Experience  with  Control 
Mechanisms  for  Packet  Video,”  in  Proc.  SIGCOMM’97, 
1997. 
Guo Chuanxiong, “A SRR packet scheduler for flows in 
multi-service packet networks,” Ph.D. thesis, Inst. of Comm. 
Eng. of China, April, 2000. 
D. Clark, and Wenjia Fang, “Explicit Allocation of Best-
IEEE/ACM  Trans. 
Effort  Packet  Delivery  Service,” 
Networking, vol. 6, Aug. 1998. 
D. Clark, “The Design Philosophy of the DARPA Internet 
Protocols,” in Proc. SIGCOMM’88, 1988. 
D.  Clark,  S.  Shenker,  and  L.  Zhang,  “Supporting  Real-
time Applications in an Integrated Services Packet Network: 
Architecture  and  Mechanism,”  in  Proc.  SIGCOMM’92, 
1992. 
J.  Cobb,  M.  Gouda,  and  A.  El-Nahas,  “Time-Shift 
Scheduling—Fair  Scheduling  of  Flows 
in  High-Speed 
Networks,”  IEEE/ACM  Trans.  Networking,  vol.  6,  June, 
1998. 
[10] 
[11] 
J.  A.  Cobb,  and  M.  G.  Gouda,  “Flow  Theory,” 
IEEE/ACM Trans. Networking, vol.5, Oct. 1997. 
A.  Demers,  S.  Keshav,  and  S.  Shenker,  “Analysis  and 
in  Proc. 
Simulation  of  a  Fair  Queueing  Algorithm,” 
SIGCOMM’89, 1989. 
[12] 
S.  Floyd,  and  V.  Jacobson,  “Random  Early  Detection 
Gateways  for  Congestion  Avoidance,”  IEEE/ACM  Trans. 
Networking, vol. 1, Aug. 1993. 
[13] 
S.  Floyd,  and  V.  Jacobson,  “Link-share  and  Resource 
Management  Models  for  Packet  Networks,”  IEEE/ACM 
Trans. Networking, vol. 3, Aug. 1995. 
[14] 
S. Floyd, and K. Fall, “Promoting the Use of End-to-End 
Congestion  Control  in  the  Internet,”  IEEE/ACM  Trans. 
Networking, vol. 7, Aug. 1999. 
[15] 
L.  Georgiadis,  R.  Guerin,  and  R.  Rajan,  “Efficient 
Support  of  Delay  and  Rate  Guarantees  in  an  Internet,”  in 
Proc. SIGCOMM’96, 1996. 
[16] 
P.  Goyal,  H.  M.  Vin,  and  H  Cheng,  “Start-Time  Fair 
Queueing:  A  Scheduling  Algorithm  for  Integrated  Services 
Packet Switching Networks,” IEEE/ACM Trans. Networking, 
vol. 5, 1997. 
[17] 
Pawn Goyal, and H. Vin, “Generalized Guaranteed Rate 
Scheduling  Algorithms:  A  Framework,”  IEEE/ACM  Trans. 
Networking, vol. 5, 1997. 
[18] 
[19] 
[20] 
S.  R.  McCanne, 
and 
Transmission of Internet Multicast Video,” Ph.D. thesis, UC. 
Berkeley, Dec. 1996. 
“Scalable  Compression 
A. Parekh, “A Generalized Processor Sharing Approach 
to  Flow  Control  in  Integrated  Services  Network,”  Ph.D. 
thesis,  Dept.  Elect.  Eng.  and  Comput.  Sci.,  M.I.T.,  Feb. 
1992. 
V. Paxson, and S. Floyd, “Why we don’t know how to 
from: 
Internet,” 
simulate 
ftp://ftp.ee.lbl.gov/papers/wsc97.ps. 
the 
[21] 
O. Rose, “Traffic Modeling of Variable Bit Rate MPEG 
Video  and  its  Impacts  on  ATM  Networks,”  Ph.D.  thesis, 
Wurezburger, Bericht, 02/97. 
[22] 
D.  Saha,  S.  Mukherjee,  and  S.  Tripathi,  “Carry-Over 
Round  Robin:  A  Simple  Cell  Scheduling  Mechanism  for 
ATM Networks,” IEEE/ACM Trans. Networking, vol.6, Dec. 
1998. 
[23]  M. Shreedhar and G. Varghese, “Efficient Fair Queuing 
using Deficit Round Robin,” in Proc. SIGCOMM’95, 1995. 
D. Stiliadis, and A. Varma, “Rate-Proportional Servers: 
A  Design  Methodology  for  Fair  Queueing  Algorithms,” 
IEEE/ACM Trans. Networking, vol. 6, Apr. 1998. 
[24] 
[25] 
D.  Stiliadis,  and  A.  Varma,  “Efficient  Fair  Queueing 
Algorithms  for  Packet-Switched  Networks,  ”  IEEE/ACM 
Trans. Networking, vol. 6, Apr. 1998. 
[26] 
A.  Varma,  and  D.  Stiliadis,  “Hardware  Implementation 
of  Fair  Queuing  Algorithms  for  Asynchronous  Transfer 
Mode Networks,” IEEE Com. Mag., vol. 35, Dec. 1997. 
[27]  W. Weiss, “QoS with differentiated services,” Bell-labs 
Technical Journal, oct-dec 1998. 
[28]  W.  Willingers,  and  V.  Paxson,  “Where  Mathematics 
meets  the  Internet,”  Notes  of  the  American  Mathematical 
Society, vol.45, Aug.1998. 
[29] 
L.  Zhang,  “A  New  Architecture  for  Packet  Switching 
Network  Protocols,”  Ph.D.  thesis,  Dept.  Elect.  Eng.  and 
Comput Sci., M.I.T., Aug. 1989. 
[30] 
L.  Zhang,  S.  Deering,  D.  Estrin,  S.  Shenker  and  D. 
Zappala,  “RSVP:  A  New  Resource  ReServation  Protocol,” 
IEEE Network, 1993. 
[31] 
The VINT Project, “ns Notes and Documentation”, from 
http://www-mash.cs.berkeley.edu/ns/nsDoc.ps.gz. 
APPENDIX 
A. Proof of Proposition 3 
Proof: 1, when 
i
Sk
,
1−= k
S
=
−
1
−
k
, the kth WSS 
−
−
=
−
1
k
k
k
2
,
S
S
Thus,  the  chains  between  two  adjacent  occurrences  of  element   
(k-1) are 
Sk
,
 or 
),1
),1
Sk
,
2,
S
S
S
(,
(,
S
S
k
k
. 
,
−
−
−
−
.
,
2
2
2
k
k
k
k
2
2
2
k
k
k
−
−
−
2. Suppose the Proposition is correct for two adjacent occurrences 
i
of  element 
,  this  means  the  WSS  can  be 
expressed as,  
−≤<
)1
1(
k
i
k
S
−
1
i
=
S
−
1
i
i
,,
K
−
i
(,
Si
,,
−
1
i
,
Sx
,
−
1
i
i
,,
Si
,,
−
1
i
K
−
i
2
),1