120.0 Flight 1 400.0 Flight 2 Average
250.0
100.0 350.0
300.0
80.0 250.0 )sdnoces(
60.0 200.0
40.0 150.0 200.0 emiT
100.0
20.0 50.0
0.0 0.0
T T(B) MV VP AI T T(B) MV VP AI
Q1.1 2.7 9.9 1.0 69.7 107.2 Q2.1 43.8 91.9 15.5 65.1 359.8 150.0 )sdnoces(
Q1.2 2.0 11.0 1.0 36.0 50.8 Q2.2 44.1 78.4 13.5 48.8 46.4
Q1.3 1.5 1.5 0.2 36.0 48.5 Q2.3 46.0 304.1 11.8 39.0 43.9
emiT
Flight 3 Flight 4
600.0 700.0
100.0
500.0 600.0
400.0 500.0 )sdnoces(
300.0 400.0
200.0 300.0 50.0 emiT
200.0
100.0
100.0
0.0
T T(B) MV VP AI 0.0
Q3.1 43.0 91.4 16.1 139.1 413.8 T T(B) MV VP AI
Q3.2 42.8 65.3 6.9 63.9 40.7 Q4.1 44.4 94.4 29.2 208.6 623.9 0.0
Q3.3 31.2 31.2 6.4 48.2 531.4 Q4.2 14.1 25.3 22.4 150.4 280.1 T T(B) MV VP AI
Q3.4 6.5 6.5 3.0 47.0 65.5 Q4.3 12.2 21.2 6.4 86.3 263.9 Average 25.7 64.0 10.2 79.9 221.2
(a) (b)
Figure6: (a)Performancenumbersfordifferentvariantsoftherow-storebyqueryflight. Here,Tistraditional,T(B)istraditional
(bitmap),MVismaterializedviews,VPisverticalpartitioning,andAIisallindexes.(b)Averageperformanceacrossallqueries.
6.2.1 DetailedRow-storePerformanceBreakdown suppkey column with the filtered supplier table, and then
Inthissection,welookattheperformanceoftherow-storeap- hash-joinsthesetworesultsets.Thisyieldstupleswiththerecord-
proaches,usingtheplansgeneratedbySystemXforquery2.1from id from the fact table and the p.brand1 attribute of the part
theSSBMasaguide(wechosethisquerybecauseitisoneofthe tablethatsatisfythequery. SystemXthenhashjoinsthiswiththe
few that does not benefit from orderdate partitioning, so pro- dwdatetabletopickupd.year,andfinallyusesanadditional
hashjointopickupthelo.revenuecolumnfromitscolumnta-
videsamoreequalcomparisonbetweenthetraditionalandvertical
ble.Thisapproachrequiresfourcolumnsofthelineordertable
partitioningapproach.) Thoughwedonotdissectplansforother
queriesascarefully,theirbasicstructureisthesame. TheSQLfor tobereadintheirentirety(sequentially),which,aswesaidabove,
thisqueryis: requiresaboutasmanybytestobereadfromdiskasthetraditional
approach, andthisscancostdominatestheruntimeofthisquery,
SELECT sum(lo.revenue), d.year, p.brand1 yielding comparable performance as compared to the traditional
FROM lineorder AS lo, dwdate AS d, approach.Hashjoinsinthiscaseslowdownperformancebyabout
part AS p, supplier AS s 25%; weexperimentedwitheliminatingthehashjoinsbyadding
WHERE lo.orderdate = d.datekey clusteredB+treesonthekeycolumnsineachverticalpartition,but
AND lo.partkey = p.partkey SystemXstillchosetousehashjoinsinthiscase.
AND lo.suppkey = s.suppkey Index-only plans: Index-only plans access all columns through
AND p.category = ’MFGR#12’ unclustered B+Tree indexes, joining columns from the same ta-
AND s.region = ’AMERICA’ ble on record-id (so they never follow pointers back to the base
GROUP BY d.year, p.brand1 relation). The plan for query 2.1 does a full index scan on the
ORDER BY d.year, p.brand1 suppkey, revenue, partkey, and orderdate columns of
Theselectivityofthisqueryis8.0×10−3.Here,theverticalparti- the fact table, joining them in that order with hash joins. In this
case,theindexscansarerelativelyfastsequentialscansoftheen-
tioningapproachperformsaboutaswellasthetraditionalapproach
tire index file, and do not require seeks between leaf pages. The
(65secondsversus43seconds),buttheindex-onlyapproachper-
hashjoins, however, arequiteslow, astheycombinetwo60mil-
forms substantially worse (360 seconds). We look at the reasons
liontuplecolumnseachofwhichoccupieshundredsofmegabytes
forthisbelow.
ofspace. Notethathashjoinisprobablythebestoptionforthese
Traditional: Forthisquery,thetraditionalapproachscanstheen-
joins,astheoutputoftheindexscansisnotsortedonrecord-id,and
tirelineordertable,usinghashjoinstojoinitwiththedwdate,
sortingrecord-idlistsorperformingindex-nestedloopsislikelyto
part,andsuppliertable(inthatorder).Itthenperformsasort-
bemuchslower. Aswediscussbelow, wecouldn’tfindawayto
basedaggregatetocomputethefinalanswer.Thecostisdominated
force System X to defer these joins until later in the plan, which
bythetimetoscanthelineordertable,whichinoursystemre-
wouldhavemadetheperformanceofthisapproachclosertoverti-
quiresabout40seconds. Materializedviewstakejust15seconds,
calpartitioning.
becausetheyhavetoreadabout1/3rdofthedataasthetraditional
Afterjoiningthecolumnsofthefacttable,theplanusesanindex
approach.
range scan to extract the filtered part.category column and
Vertical partitioning: The vertical partitioning approach hash-
hashjoinsitwiththepart.brand1columnandthepart.part-
joinsthepartkeycolumnwiththefilteredparttable, andthe
10
key column (both accessed via full index scans). It then hash the “CS Row-MV” case from Section 6.1, where the amount of
joinsthisresultwiththealreadyjoinedcolumnsofthefacttable. I/Oacrosssystemsissimilar,andtheothersystemsdoesnotneed
Next, it hash joins supplier.region (filtered through an in- jointogethercolumnsfromthesametable. Inordertounderstand
dexrangescan)andthesupplier.suppkeycolumns(accessed this latter performance difference, we perform additional experi-
via full index scan), and hash joins that with the fact table. Fi- mentsinthecolumn-storewherewesuccessivelyremovecolumn-
nally, it uses full index scans to access the dwdate.datekey orientedoptimizationsuntilthecolumn-storebeginstosimulatea
anddwdate.yearcolumns,joinsthemusinghashjoin,andhash row-store. In so doing, we learn the impact of these various op-
joinstheresultwiththefacttable. timizationsonqueryperformance. Theseresultsarepresentedin
Section6.3.2.
6.2.2 Discussion
6.3.1 TupleOverheadandJoinCosts
Thepreviousresultsshowthatnoneofourattemptstoemulatea
column-storeinarow-storeareparticularlyeffective. Thevertical Modern column-stores do not explicitly store the record-id (or
partitioningapproachcanprovideperformancethatiscompetitive primarykey)neededtojointogethercolumnsfromthesametable.
with or slightly better than a row-store when selecting just a few Rather,theyuseimplicitcolumnpositionstoreconstructcolumns
columns.Whenselectingmorethanabout1/4ofthecolumns,how- (theithvaluefromeachcolumnbelongstotheithtupleintheta-
ever,thewastedspaceduetotupleheadersandredundantcopiesof ble).Further,tupleheadersarestoredintheirownseparatecolumns
therecord-idyieldinferiorperformancetothetraditionalapproach. andsotheycanbeaccessedseparatelyfromtheactualcolumnval-
Thisapproachalsorequiresrelativelyexpensivehashjoinstocom- ues. Consequently,acolumninacolumn-storecontainsjustdata
binecolumnsfromthefacttabletogether.ItispossiblethatSystem fromthatcolumn,ratherthanatupleheader,arecord-id,andcol-
Xcouldbetrickedintostoringthecolumnsondiskinsortedorder umndatainaverticallypartitionedrow-store.
andthenusingamergejoin(withoutasort)tocombinecolumns In a column-store, heap files are stored in position order (the
fromthefacttablebutourDBAwasunabletocoaxthisbehavior ith value is always after the i−1st value), whereas the order of
fromthesystem. heapfilesinmanyrow-stores,evenonaclusteredattribute,isonly
Index-onlyplanshavealowerper-recordoverhead,butintroduce guaranteed through an index. This makes a merge join (without
anotherproblem–namely,thesystemisforcedtojoincolumnsof a sort) the obvious choice for tuple reconstruction in a column-
the fact table together using expensive hash joins before filtering store. Inarow-store,sinceiteratingthroughasortedfilemustbe
thefacttableusingdimensioncolumns.ItappearsthatSystemXis doneindirectlythroughtheindex,whichcanresultinextraseeks
unabletodeferthesejoinsuntillaterintheplan(astheverticalpar- betweenindexleaves,anindex-basedmergejoinisaslowwayto
titioning approach does) because it cannot retain record-ids from reconstructtuples.
the fact table after it has joined with another table. These giant Itshouldbenotedthatneitheroftheabovedifferencesbetween
hashjoinsleadtoextremelyslowperformance. column-store performance and row-store performance are funda-
Withrespecttothetraditionalplans, materializedviewsarean mental. There is no reason why a row-store cannot store tuple
obvious win as they allow System X to read just the subset of headers separately, use virtual record-ids to join data, and main-
the fact table that is relevant, without merging columns together. tainheapfilesinguaranteedpositionorder.Theaboveobservation
Bitmap indices sometimes help – especially when the selectivity simplyhighlightssomeimportantdesignconsiderationsthatwould
of queries is low – because they allow the system to skip over berelevantifonewantedtobuildarow-storethatcansuccessfully
somepagesofthefacttablewhenscanningit. Inothercases,they simulateacolumn-store.
slowthesystemdownasmergingbitmapsaddssomeoverheadto
planexecutionandbitmapscanscanbeslowerthanpuresequential 6.3.2 BreakdownofColumn-StoreAdvantages
scans. AsdescribedinSection5,threecolumn-orientedoptimizations,
Asafinalnote,weobservethatimplementingtheseplansinSys- presentedseparatelyintheliterature,allclaimtosignificantlyim-
tem X was quite painful. We were required to rewrite all of our provetheperformanceofcolumn-orienteddatabases. Theseopti-
queriestousetheverticalpartitioningapproaches,andhadtomake mizationsarecompression,latematerialization,andblock-iteration.
extensiveuseofoptimizerhintsandothertrickerytocoaxthesys- Further,weextendedC-Storewiththeinvisiblejointechniquewhich
temintodoingwhatwedesired. wealsoexpectwillimproveperformance. Presumably, theseop-
Inthenextsectionwestudyhowacolumn-storesystemdesigned timizationsarethereasonfortheperformancedifferencebetween
from the ground up is able to circumvent these limitations, and thecolumn-storeandtherow-orientedmaterializedviewcasesfrom
break down the performance advantages of the different features Figure5(bothinSystemXandinC-Store)thathavesimilarI/O
oftheC-StoresystemontheSSBMbenchmark. patternsasthecolumn-store. Inordertoverifythispresumption,
we successively removed these optimizations from C-Store and
6.3 Column-StorePerformance
measuredperformanceaftereachstep.
It is immediately apparent upon the inspection of the average RemovingcompressionfromC-StorewassimplesinceC-Store
querytimeinC-StoreontheSSBM(around4seconds)thatitis includesaruntimeflagfordoingso. Removingtheinvisiblejoin
faster than not only the simulated column-oriented stores in the was also simple since it was a new operator we added ourselves.
row-store (80 seconds to 220 seconds), but even faster than the Inordertoremovelatematerialization,wehadtohandcodequery
best-casescenariofortherow-storewherethequeriesareknownin planstoconstructtuplesatthebeginningofthequeryplan.Remov-
advanceandtherow-storehascreatedmaterializedviewstailored ingblock-iterationwassomewhatmoredifficultthantheotherthree
for the query plans (10.2 seconds). Part of this performance dif- optimizations. C-Store “blocks” of data can be accessed through
ferencecanbeimmediatelyexplainedwithoutfurtherexperiments twointerfaces: “getNext”and“asArray”. Theformermethodre-
– column-stores do not suffer from the tuple overhead and high quiresonefunctioncallpervalueiteratedthrough,whilethelatter
columnjoincoststhatrow-storesdo(thiswillbeexplainedinSec- methodreturnsapointertoanarraythancanbeiteratedthroughdi-
tion6.3.1). However,thisobservationdoesnotexplainthereason rectly. FortheoperatorsusedintheSSBMqueryplansthataccess
whythecolumn-storeisfasterthanthematerializedviewcaseor blocks through the “asArray” interface, we wrote alternative ver-
11
40.0 Flight 1 45.0 Flight 2 Average
45.0
35.0 40.0
30.0 35.0
25.0 30.0 40.0 )sdnoces(
25.0
20.0
20.0 emiT
15.0 15.0 35.0
10.0 10.0
5.0 5.0
30.0
0.0 tICL TICL tiCL TiCL ticL TicL Ticl 0.0 tICL TICL tiCL TiCL ticL TicL Ticl
1.1 0.4 0.4 0.3 0.4 3.8 7.1 33.4 2.1 5.7 7.4 13.6 14.8 15.0 16.1 40.5 )sdnoces(
1.2 0.1 0.1 0.1 0.1 2.1 6.1 28.2 2.2 4.2 6.7 12.6 13.8 13.9 14.9 36.0 25.0
1.3 0.1 0.1 0.1 0.1 2.1 6.0 27.4 2.3 3.9 6.5 12.2 13.4 13.6 14.7 35.0
60.0 Flight 3 70.0 Flight 4 20.0 emiT
50.0 60.0
15.0
40.0 50.0 )sdnoces(
30.0 40.0
10.0 20.0 30.0 emiT
20.0
10.0
10.0 5.0
0.0
tICL TICL tiCL TiCL ticL TicL Ticl 0.0
3.1 11.0 17.3 16.0 21.4 31.9 31.9 56.5 tICL TICL tiCL TiCL ticL TicL Ticl
3.2 4.4 11.2 9.0 14.1 15.5 15.5 34.0 4.1 8.2 10.7 15.8 17.0 30.1 30.0 66.3 0.0
3.3 7.6 12.6 7.5 12.6 13.5 13.6 30.3 4.2 3.7 5.5 5.5 6.9 20.4 21.4 60.8 tICL TICL tiCL TiCL ticL TicL Ticl
3.4 0.6 0.7 0.6 0.7 13.5 13.6 30.2 4.3 2.6 4.3 4.1 5.4 15.8 16.9 54.4 Average 4.0 6.4 7.5 9.3 14.7 16.0 41.0
(a) (b)