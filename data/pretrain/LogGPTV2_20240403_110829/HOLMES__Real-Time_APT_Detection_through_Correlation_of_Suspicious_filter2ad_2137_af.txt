Stream 3
Stream 4
Stream 5
Stream 6
Stream 7
 1
 4
 16
 64
 256
 1024
Number of Hosts
Fig. 16.
in respect to Memory consumption
(Left): Memory footprint (MB) vs. % of records consumed. (Right): Number of Days vs. extrapolated number of hosts that can be handled by HOLMES
with the critical severity level. The ﬁnal threat tuple for this
graph looks like (cid:5)C, M,−, H,−, H, M(cid:6) for all APT stages
(see Table 11). Consequently, the converted quantitative values
are (cid:5)10, 6, 1, 8, 1, 8, 6(cid:6), which results in a threat score equal to
1163881.
E. Finding the Optimal Threshold Value
To determine the optimal threshold value, we measured the
precision and recall by varying threshold values as shown in
Fig. 14. F-score, the harmonic mean of precision and recall,
is maximum at the interval [338.25, 608.26], which is the
range from the maximum score of benign subgraphs to the
minimum score of attack subgraphs. Therefore, by choosing
any threshold in this range, HOLMES makes a clear distinction
between attack and benign subgraphs in the tested datasets,
with accuracy and recall equal to 1.
(cid:3)7
To ﬁnd the optimal value, we ﬁrst transform the threat
scores to a linear scale by getting their nth root, where n
i=1 wi. The transformed value shows the average
equals to
contribution of each APT step to the overall threat score, and
it is a value in the range [1,10]. As all our tested datasets so
far belong to single hosts, we exclude the weight of lateral
movement step (w5), which leads to n = 8.3. After getting
the nth root, the interval of maximum F-score would change
to [2.01, 2.16]. Finally, we consider the middle of this range
(2.09) as the average severity that each APT step is allowed
to contribute to the overall threat score, in a benign setting.
F. Performance
Graph Size. Fig. 15 shows the comparison of the growth
trends for provenance graph in thousands of edges (left) and
the HSG in the number of edges (right). The graph size ratio
measured in edges is 1875:1, i.e., an 1875-fold reduction is
achieved in the process of mapping from the provenance graph
to the HSG.
Memory Use. HOLMES was tested on an 8 core CPU with
a 2.5GHz speed each and a 150GB of RAM. Fig. 16 (left)
shows the memory consumption of HOLMES with the number
of audit records. It shows a nearly linear growth in memory
consumption since our system operates on audit records in-
memory. Fig. 16 (right) shows extrapolation of how many hosts
HOLMES can support (regarding memory consumption) with
scalability to an enterprise of hundreds of hosts. It is evident
that as the number of hosts is increased, the duration that
we can keep the full provenance graph in memory decreases.
Notice that both x and y-axes are in log-2 scale.
Runtime. While HOLMES consumes and analyzes audit
records from a Kafka server as the records become available in
real-time, to stress-test its performance, we assumed that all the
audit records were available at once. Then, we measured the
CPU time for consuming the records, building the provenance
graph, constructing the HSG, and detecting APTs. We deﬁne
“CPU Utilization” as the ratio of required CPU time to
the total duration of a scenario. In Fig. 17, the bars show
CPU Utilization for each scenario, and the line shows an
extrapolation of how many hosts (of comparable audit trace
durations with the scenarios) HOLMES can support if CPU
was the limiting factor. This chart shows that our single CPU
can support an enterprise with hundreds of hosts.
G. Live Experiment
To explore how HOLMES would respond to attacks embed-
ded within a predominantly benign stream of events, we eval-
uated it as a live detection system. This experiment spanned 2
weeks, and during this period, audit logs of multiple systems,
running Windows, Linux, or BSD, were collected and analyzed
(cid:18)(cid:18)(cid:21)(cid:24)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:43:10 UTC from IEEE Xplore.  Restrictions apply. 
(cid:2)7
in real-time by HOLMES. In this experiment, an enterprise is
simulated with security-critical services such as a web server,
E-mail server, SSH server, and an SMB server for providing
shared access to ﬁles. Similar to the previous datasets, an
extensive set of normal activities are conducted during this
experiment, and red-team carried out a series of attacks. How-
ever, this time, we conﬁgured all the parameters beforehand
and had no prior knowledge of the attacks planned by the red-
team. Moreover, we had cross host internal connectivity, which
makes APT stage 5 (Move laterally) a possible move for
attackers. To this end, we set the detection threshold equal to
i=1 wi = 2.099.8 = 1378. Fig. 18 shows the cumulative
2.09
distribution function for attack and benign HSGs that HOLMES
constructs during this experiment. Note that there are some
points representing threat score of benign HSGs, that have
bypassed the threshold. We explain them as false positives in
the following and then discuss some potential false negative
scenarios.
False Positives. We noticed some false alarms because of SSH
connections made by system administrators. These connections
come from untrusted IP addresses, and subsequently, HOLMES
aggregates the severity scores of all the actions issued by the
system administrator via an SSH connection. In some cases,
the threat score bypasses our threshold. The solution is to
deﬁne a custom tagging policy for servers such as ssh that
perform authentication so that the children of such servers
aren’t marked as untrusted [22].
To further evaluate our system for false alarms, we also
evaluated it on another two weeks benign activity period.
During this time, a diverse set of normal activities were
conducted, (including software updates and upgrades through
package managers) and HOLMES generated no false alarms.
Based on our results, we claim that the false positive of
HOLMES is at an acceptable rate considering the beneﬁts it
adds to an enterprise. Security analysts can manually check the
raised alarms and neutralize HSGs that are falsely constructed.
False Negatives. Although we did not observe any false
negatives during our experiments, here we discuss potential
scenarios HOLMES might miss.
Implicit causality between TTPs: For information ﬂow that
avoids system calls, HOLMES have no direct visibility to the
causal relations between system entities. However, if the rest
of the attack unfolds with visibility through system calls,
HOLMES will still partially reconstruct the attack.
o
i
t
a
R
n
o
i
t
a
z
i
l
i
t
U
U
P
C
 0.0045
 0.004
 0.0035
 0.003
 0.0025
 0.002
 0.0015
 0.001
 0.0005
 0
 2000
 1500
 1000
 500
 0
s
t
s
o
H
f
o
r
e
b
m
u
N
d
e
t
a
o
p
a
r
t
x
E
l
S
S
S
S
S
S
S
tr
e
tr
e
tr
e
tr
e
tr
e
tr
e
tr
e
a
a
a
a
a
a
a
m
 1
m
 2
m
 3
m
 4
m
 5
m
 6
m
 7
Fig. 17. CPU Utilization and the extrapolated number of hosts that can be
handled by HOLMES in respect to CPU time.
F
D
C
 1
 0.8
 0.6
 0.4
 0.2
 0
100
Attack
Benign
Threshold
101
102
103
104
105
106
Threat Score
Fig. 18. Cumulative distribution function for attack vs. benign HSGs
Multiple entry points: As an active evasion technique,
attackers might exploit multiple entry points that result in
detached subgraphs. HOLMES follows every single entry point
until our detection threshold is satisﬁed and correlates TTPs
from disjoint subgraphs when there is information ﬂow be-
tween them. Nevertheless, some additional analyses might be
needed to completely correlate attack steps, which are coming
from different entry points and have no information ﬂow in
between.
VII. RELATED WORK
HOLMES makes contributions to the problems of real-time
alarm generation, alert correlation, and scenario reconstruction.
A central idea in HOLMES is the construction and use of a
high-level attack scenario graph as the underlying basis for all
the above problems. Below, we discuss related work in all of
the above areas.
Alarm Generation.
Host-based intrusion detection ap-
proaches fall under three classes: (1) misuse-based [32], [47],
which detect behavior associated with known attacks; (2)
anomaly-based [13], [16], [17], [31], [35], [40], [49], [51],
which learn a model of benign behavior and detect devia-
tions from it; and (3) speciﬁcation-based [29], [52], which
detect attacks based on policies speciﬁed by experts. While
the techniques of the ﬁrst class cannot deal with unknown
attacks, those of the second class can produce many false
positives. Speciﬁcation-based techniques can reduce false pos-
itives, but they require application-speciﬁc policies that are
time-consuming to develop and/or rely on expert knowledge.
At a superﬁcial level, the use of TTPs in HOLMES can be seen
as an instance of misuse detection. However, our approach
goes beyond classic misuse detection [32], [47] in the use
of prerequisite-consequence patterns that are matched when
there exist information ﬂow dependencies between the entities
involved in the matched TTP patterns.
Alarm Correlation. Historically, IDSs have tended to produce
alerts that are too numerous and low-level for human operators.
Techniques needed to be developed to summarize these low-
level alerts and greatly reduce their volume.
Several approaches use alarm correlation to perform de-
tection by clustering similar alarms and by identifying causal
relationships between alarms [15], [42], [43], [48], [54]. For
instance, BotHunter [21] employs an anomaly-based approach
to correlate dialog between internal and external hosts in a
network. HERCULE [45] uses community discovery techniques
to correlate attack steps that may be dispersed across multiple
(cid:18)(cid:18)(cid:21)(cid:25)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:43:10 UTC from IEEE Xplore.  Restrictions apply. 
logs. Moreover, industry uses similar approaches for building
SIEMs [6], [7], [10] for alert correlation and enforcement
based on logs from disparate data sources. These approaches
rely on logs generated by third-party applications running in
user-space. Moreover, alert correlation based on statistical fea-
tures like alert timestamps does not help in precise detection of
multi-stage APT attacks as they usually span a long duration.
In contrast to these approaches, HOLMES builds on information
ﬂows that exist between various attack steps for the purpose
of alert correlation. The use of kernel audit data in this context
was ﬁrst pursued in [55]. However, differently from HOLMES,
that work is purely misuse-based, and its focus is on using the
correlation between events to detect steps of an attack that are
missed by an IDS. HOLMES uses the same kernel audit data but
pursues a different approach based on building a main-memory
dependency graph with low memory footprint, followed by
the derivation of an HSG based on the high-level speciﬁcation
of TTPs to raise alerts, and ﬁnally correlate alerts based on
the information ﬂow between them. An additional
line of
work on alert correlation relies on the proximity of alerts in
time [30]. HOLMES, in contrast, relies on information ﬂow
and causality connections to correlate alerts and is therefore
capable of detecting even attacks where the steps are executed
very slowly.
Scenario Reconstruction. A large number of research efforts
have been focused on generation and use of system-call level
logs in forensic analysis, investigation and recovery [12], [18]–
[20], [27], [28], [34], [36]–[39], [46], [53]. Most forensic
analysis approaches trace back from a given compromise event
to determine the causes of that compromise. Among these,
BEEP [34], ProTracer [39], and MPI [38] use training and code
instrumentation and annotations to divide process executions
into smaller units, to address dependency explosion and pro-
vide better forensic analysis. PrioTracker [36] performs timely
causality analysis by quantifying the notion of event rareness
to prioritize the investigation of abnormal causal dependencies.
In contrast, HOLMES uses system event traces to perform real-
time detection, with integrated forensics capabilities in the
detection framework, in the form of high-level attack steps,
without requiring instrumentation.
Recent studies [22], [44], [50] have used system-call level
logs for real-time analytics. SLEUTH [22] presents tag-based
techniques for attack detection and in-situ forensics. HOLMES
makes several signiﬁcant advances over SLEUTH. First,
it
shows how to address the dependence explosion problem by
using the concept of minimum ancestral cover and developing
an efﬁcient algorithm for its incremental computation. Second,
SLEUTH’s scenario graphs are at the same level of abstraction
as the provenance graph, which can be too low-level for
many analysts, and moreover, lacks the kind of actionable
information in HSGs. Third, SLEUTH’s graphs can become
too large on long-running attacks, whereas HOLMES generates
compact HSGs by using noise reduction and prioritization
techniques.
Attack Granularity. Sometimes, the coarse granularity of
audit logs may limit reasoning about information ﬂows. For
example, if a process with a previously loaded sensitive ﬁle
is compromised, the attacker can search for sensitive content
inside its memory region without using system calls. However,
when such information is exﬁltrated, HOLMES correlates the
exﬁltration with the other actions of that process (i.e., the
sensitive ﬁle read) and eventually raises an exception. Further-
more, HOLMES can be adapted to take advantage of additional
works, which track information ﬂows at ﬁner granularities,
either by instrumenting additional instructions [11], [25] or
by decoupling taint tracking [14], [24], [33], [41]. Such ﬁne-
grained information ﬂow tracking can provide much more
precise provenance information at the cost of performance
overheads.
VIII. CONCLUSION
We present HOLMES, a real-time APT detection system
that correlates tactics, techniques, and procedures that might be