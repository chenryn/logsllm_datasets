**漏洞介绍**  
CVE-2021-31956是发生在NTFS.sys中一个提权漏洞，漏洞的成因是因为整形溢出导致绕过条件判断导致的。最后利用起来完成Windows提权  
**前置知识**  
在此之前可以大致了解一下关于NTFS  
NTFS是一个文件系统具备3个功能 错误预警功能，磁盘自我修复功能和日志功能
NTFS是一个日志文件系统，这意味着除了向磁盘中写入信息，该文件系统还会为所发生的所有改变保留一份日志
当用户将硬盘的一个分区格式化为NTFS分区时，就建立了一个NTFS文件系统。NTFS文件系统同FAT32文件系统一样，也是用簇为存储单位。
从微软的官方文档中可以搜索到关于NTFS volume每个属性的介绍。比如文件的数据是一个属性；数据属性：$Data , 类推关于此漏洞的关键扩展属性就是:
$EA  
EA(Extended the attribute index)  
漏洞点分析  
首先这个函数可以通过ntoskrnl
系统调用来访问，此外还可以控制输出缓冲区的大小，如果扩展属性的大小没有对齐，此函数将计算下一个填充，下一个扩展属性将存储为32位对齐。（每个Ea块都应该被填充为32位对齐）
关于对齐的介绍于计算  
    (padding = ((ea_block_size  + 3) & 0xFFFFFFFC) - ea_block_size )
涉及到一个4字节对齐的概念，这个在微软的官方文档也有提到的[官方文档](https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-fscc/79dc1ea1-158c-4b24-b0e1-8c16c7e2af6b
"官方文档")
然后开始代码分析  
恢复一下此函数卡巴斯基的文章也存在部分[参考](https://learn.microsoft.com/en-us/windows-hardware/drivers/ddi/wdm/ns-wdm-_file_full_ea_information "参考")
    后边用到的结构体
    typedef struct _FILE_FULL_EA_INFORMATION {
    ULONG  NextEntryOffset;//下一个同类型结构的偏移，若是左后一个为0
    UCHAR  Flags;
    UCHAR  EaNameLength;//eaname数组的长度
    USHORT EaValueLength;//数组中每个ea值的长度
    CHAR   EaName[1];
    } FILE_FULL_EA_INFORMATION, *PFILE_FULL_EA_INFORMATION;
    typedef struct _FILE_GET_EA_INFORMATION {
        ULONG NextEntryOffset;
        UCHAR EaNameLength;
        CHAR  EaName[1];
    } FILE_GET_EA_INFORMATION, * PFILE_GET_EA_INFORMATION;
进行函数的部分恢复，这样后续确认漏洞点的话就会比较明显
    _QWORD *__fastcall NtfsQueryEaUserEaList(
            _QWORD *a1,
            FILE_FULL_EA_INFORMATION *eas_blocks_for_file,
            __int64 a3,
            __int64 User_Buffer,
            unsigned int User_Buffer_Length,
            FILE_GET_EA_INFORMATION *UserEaList,
            char a7)
    {
      int v8; // edi
      unsigned int v9; // ebx
      unsigned int padding; // r15d
      FILE_GET_EA_INFORMATION *GetEaInfo; // r12
      ULONG NextEntryOffset; // r14d
      unsigned __int8 EaNameLength; // r13
      FILE_GET_EA_INFORMATION *i; // rbx
      unsigned int v15; // ebx
      _DWORD *out_buf_pos; // r13
      unsigned int ea_block_size; // r14d
      unsigned int v18; // ebx
      FILE_FULL_EA_INFORMATION *ea_block; // rdx
      char v21; // al
      ULONG v22; // [rsp+20h] [rbp-38h]
      unsigned int ea_block_pos; // [rsp+24h] [rbp-34h] BYREF
      _DWORD *v24; // [rsp+28h] [rbp-30h]
      struct _STRING DesEaName; // [rsp+30h] [rbp-28h] BYREF
      STRING SourceString; // [rsp+40h] [rbp-18h] BYREF
      unsigned int occupied_length; // [rsp+A0h] [rbp+48h]
      v8 = 0;
      *a1 = 0i64;
      v24 = 0i64;
      v9 = 0;
      occupied_length = 0;
      padding = 0;
      a1[1] = 0i64;
      while ( 1 )
      {                                             // 创建一个索引放入ealist成员,后续循环取值
        GetEaInfo = (FILE_GET_EA_INFORMATION *)((char *)UserEaList + v9);
        *(_QWORD *)&DesEaName.Length = 0i64;
        DesEaName.Buffer = 0i64;
        *(_QWORD *)&SourceString.Length = 0i64;
        SourceString.Buffer = 0i64;
        DesEaName.Length = GetEaInfo->EaNameLength;
        DesEaName.MaximumLength = DesEaName.Length;
        DesEaName.Buffer = GetEaInfo->EaName;
        RtlUpperString(&DesEaName, &DesEaName);
        if ( !(unsigned __int8)NtfsIsEaNameValid(&DesEaName) )
          break;
        NextEntryOffset = GetEaInfo->NextEntryOffset;
        EaNameLength = GetEaInfo->EaNameLength;
        v22 = GetEaInfo->NextEntryOffset + v9;
        for ( i = UserEaList; ; i = (FILE_GET_EA_INFORMATION *)((char *)i + i->NextEntryOffset) )
        {
          if ( i == GetEaInfo )
          {
            v15 = occupied_length;
            out_buf_pos = (_DWORD *)(User_Buffer + padding + occupied_length);//   // 分配的内核池
            if ( (unsigned __int8)NtfsLocateEaByName(// 通过名字查找EA信息
                                    eas_blocks_for_file,
                                    *(unsigned int *)(a3 + 4),
                                    &DesEaName,
                                    &ea_block_pos) )
            {
              ea_block = (FILE_FULL_EA_INFORMATION *)((char *)eas_blocks_for_file + ea_block_pos);
              ea_block_size = ea_block->EaValueLength + ea_block->EaNameLength + 9;
              if ( ea_block_size EaNameLength + 9;// 通过名字没查到EA信息走的分支
              if ( ea_block_size + padding EaNameLength;
                *((_WORD *)out_buf_pos + 3) = 0;
                memmove(out_buf_pos + 2, GetEaInfo->EaName, GetEaInfo->EaNameLength);
                SourceString.Length = DesEaName.Length;
                SourceString.MaximumLength = DesEaName.Length;
                SourceString.Buffer = (PCHAR)(out_buf_pos + 2);
                RtlUpperString(&SourceString, &SourceString);
                v15 = occupied_length;
                *((_BYTE *)out_buf_pos + GetEaInfo->EaNameLength + 8) = 0;
    LABEL_8:
                v18 = ea_block_size + padding + v15;
                occupied_length = v18;
                if ( !a7 )
                {
                  if ( v24 )
                    *v24 = (_DWORD)out_buf_pos - (_DWORD)v24;
                  if ( GetEaInfo->NextEntryOffset )