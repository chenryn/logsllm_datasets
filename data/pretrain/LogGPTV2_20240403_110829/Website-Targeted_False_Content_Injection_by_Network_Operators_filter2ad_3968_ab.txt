session, since we treated the packets sent after the idle
period as a new session and stored them in the cache. In
this case, however, the packets of the session prior to the
eviction would not be available for analysis.
3.2
Injection Detection
The detection logic of packet injection events is rela-
tively straightforward. Our goal was to detect packet
races within the session, namely, two packets that carry
different payloads, but correspond to the same TCP se-
quence numbers. Usually these packets will arrive in
quick succession. To make our code more efﬁcient we
checked for a race only between pairs of packets that
were received within a time interval that does not exceed
the parameter MaxIntervalTime. Throughout our data
collection process we set MaxIntervalTime = 200msec.
We believe that this value captures the vast majority of
injection events as almost all round trip times on the In-
ternet are below 400msec [18].
Indeed, nearly all of
the time differences we observed between raced pack-
ets were below 100msec (see Section 5). Algorithm 1 in
Appendix B details the procedure for race detection.
The procedure we used to identify packet races should,
in theory, ﬂag only events in which a third party injected
rogue packets into the TCP session. However, inter-
estingly, we observed numerous events which fulﬁll the
above conditions but are not the result of a packet injec-
tion. We detail such occurrences in Appendix C.
packets that are relevant to the analysis of the injection
events while minimizing the chance that user privacy will
be breached. Indeed, during our analysis no identiﬁable
personal information was found in the stored sessions.
Throughout our research we were supervised by the
networks’ administration teams, who reviewed and ap-
proved the code of the monitoring system and procedures
for the analysis of the stored sessions. During the anal-
ysis the location and identity of users associated with IP
addresses were never disclosed to us. Finally, we note
that our monitoring system passively collected informa-
tion; it never interfered or tampered in any way with the
trafﬁc.
3.4 Limitations
Our monitoring system cannot detect content alterations
in which there is no race between the legitimate packet
and the forged one. In particular, we cannot detect the
following cases:
1. In-band changes in which the legitimate packet is
changed in-place. In such cases the client only sees
a forged packet.
2. Additions to the response in which an extra forged
packet is sent such that it extends the HTTP re-
sponse, but does not replace any legitimate part.
3. Drops of packets that are part of a valid HTTP re-
sponse.
We monitored a large volume of trafﬁc originating
from diverse networks having tens of thousands of users
(see Section 4). Nonetheless, as in any other study that
involves uncontrolled trafﬁc, our ﬁndings are only as di-
verse as the trafﬁc we monitor. Namely, we cannot iden-
tify an injecting entity on the Internet if we do not mon-
itor trafﬁc that triggers an injection by that entity. Fur-
thermore, the types of injections we have observed are
dependent on the web trafﬁc originating from the net-
works we monitored.
4 Data Sources
3.3 Ethics and Privacy
As explained above, the monitoring system captures In-
ternet user trafﬁc. To minimize concerns about user pri-
vacy, the system stores only TCP sessions in which a
packet race was detected. All other sessions are only
cached brieﬂy in the workers’ caches, after which they
are permanently erased. Moreover, for each stored ses-
sion, only the last 30 packets (at most) are saved. Earlier
packets are dropped. This is in order to store only those
During our study we monitored the network trafﬁc of
four institutions. For each institution we monitored the
Internet trafﬁc (incoming and outgoing) of all its users.
In all cases the same monitoring mechanism was used:
trafﬁc was copied to the monitoring system using a SPAN
port out of a border switch. In all cases, we only moni-
tored HTTP trafﬁc, namely trafﬁc having source port or
destination port that equals 80.
Table 1 lists the characteristics of the monitored trafﬁc
sources. For each institution we list the number of users
USENIX Association  
25th USENIX Security Symposium  231
5
Institution
User base
University A
University B &
University C
Enterprise D
20,000
50,000
5,000
Monitoring
Trafﬁc
Number of sessions
period [week]
volume [Tb]
[Million]
2
16
3
80
1400
24
8
120
0.8
Table 1: Monitored trafﬁc sources
who may use Internet connectivity in that institution. For
a university this is the number of students and staff, and
for an enterprise this is the number of employees. In ad-
dition, we list the length of time we monitored the trafﬁc
as well as the total volume trafﬁc and number of sessions
the monitoring system processed. In aggregate, we mon-
itored the trafﬁc of more than 75,000 users, while pro-
cessing 1.4 petabits carried by 129 million HTTP ses-
sions contacting servers having more than 1.5 million
distinct IP addresses. The details of University B and
C are displayed together since we monitored their trafﬁc
jointly on the same border switch. Enterprise D repre-
sents the main branch of a large hi-tech company. The
monitored branch includes an extensive R&D division as
well as the headquarter ofﬁces and the international mar-
keting and sales divisions. All institutions wish to remain
anonymous.
little trafﬁc is destined from the networks we monitored.
Thus the relatively small number of injections. Nonethe-
less, these events were sufﬁcient to gain substantial in-
dications as to the different entities that practice forged
content injection (Section 5.5).
We grouped the injection events into 14 groups based
on the resource that was injected into the TCP session.
In other words, two injections that forged the same con-
tent are placed in the same group. Representative (and
anonymized) captures of the injected sessions can be
found in [4]. For each injection group we publish up to
4 captures of injected sessions that are representative of
their respective group. To preserve the anonymity of the
users, in each capture we zeroed the client’s IP address
as well as the IP and TCP checksum ﬁelds.
Table 2 lists the groups. For each group we list the
following details:
5
Injection Analysis
In this section we present an analysis of the injection
events. In Section 5.1 we present an overview of the in-
jections and highlight a few of them. Section 5.2 de-
scribes ways to automatically distinguish between the
valid and forged packets. In Section 5.3 we explore the
time differences between the raced packets. Section 5.4
characterizes the recurrence of injection events. Finally,
Section 5.5 presents an investigation aimed at unveiling
the entities behind the injection events.
1. Group name – an identiﬁer that was given by us to
that group. We selected the name either by the name
of the site whose content was forged or by the name
of a server the forged content directed us to.
2. Destination site(s) – the website(s) of the requested
resource that was forged. There may be several such
sites for a single group.
3. Site type – the category of the destination site(s)
4. Location – the country of the IP address of the des-
tination server3
5.1
Initial Investigation
5. Injected resource – the type of forged content that
In this section we refer to a TCP session into which a
forged packet was injected as an injected session. We
manually analyzed each injection event. We detected
around 400 injection events that aim to alter web con-
tent2. Although this is not a negligible number, it pales
in comparison to the total volume of trafﬁc we moni-
tored to extract these events. This is attributed to the
fact that most of the injected sessions were destined to
web servers in the Far East, a region to which relatively
2We have also found hundreds of additional events that do not aim
to alter web content; these events were related to caching and censor-
ship.
was injected
6. Purpose – the aim of the injection
It is evident from Table 2 that the majority of injected
sessions we observed were to web servers located in
China. We note that the networks we monitored are not
located in China or the Far East, but in a Western country.
The proportion of HTTP trafﬁc destined to China in the
monitored networks is only about 2%. This is a ﬁrst indi-
cation that the majority of entities that injected the forged
3Note that this country might be different than the nationality of the
entity that owns the destination site.
232  25th USENIX Security Symposium 
USENIX Association
6
Group name Destination site(s)
Site type
Location
Injected resource
A JavaScript that
Purpose
szzhengan
wa.kuwo.cn
Ad network
China
appends content to the
Malware
taobao
is.alicdn.com
Ad network
China
netsweeper
skyscnr.com
uyan
uyan.cc
icourses
icourses.cn
uvclick
cnzz.com
adcpc
cnzz.com
jiathis
jiathis.com
Travel search
engine
Social
network
Online
courses portal
Web users’
statistics
Web users’
statistics
Social
network
original site
A JavaScript that
generates a pop-up
frame
A 302 (Moved) HTTP
response
A redirection using
’meta-refresh’ tag
A redirection using
’meta-refresh’ tag
A JavaScript that
India
China
China
Malaysia/China
identiﬁes the client’s
Malaysia/China
China
device
A 302 redirection to a
JavaScript that opens a
new window
A redirection using
’meta-refresh’ tag
Same as legitimate
Advertise-
ment
Content
ﬁltering
Advertise-
ment
Advertise-
ment
Advertise-
ment
Advertise-
ment
Advertise-
ment
server erased
changsha.cn
Travel
China
response but the value of
HTTP header ’Server’ is
Content
ﬁltering
changed
A JavaScript that
gpwa
gpwa.org
Gambling
United States
redirects to a resource at
Malware
tupian
www.feiniu.com
www.j1.com
e-commerce
China
to a resource at
Malware
qpwa.org
A JavaScript the directs
mi-img
mi-img.com
Unknown
China
duba
unknown
Unknown
China
hao
02995.com
Adware-
related
China
www.tupian6688.com
A 302 redirection to a
different IP
A JavaScript that
prompts the user to
download an executable
A 302 (Moved) HTTP
response
Malware
Malware
Advertise-
ment
Table 2: Injection groups and their characteristics
USENIX Association  
25th USENIX Security Symposium  233
7
content we observed reside in China (we investigate the
injectors’ identity in Section 5.5).
Seven injection groups are aimed at injecting adver-
tisements to web pages. An analysis of the injected re-
sources shows similarities between the various groups.
These similarities might indicate that the injections are
done by the same entity or at least by different entities
that use the same injection mechanism or product. The
injection groups ’icourses’, ’uyan’, and ’jiathis’ all used
the HTML meta refresh tag to redirect the user to a dif-
ferent URL. In all cases, the redirection was to Baidu
(a Chinese search engine) using the URL www.baidu.
com/?tn=95112007_hao_pg. The URL includes a re-
ferral tag that identiﬁes hao123.com – a well-known
adware-related site – as the referring site. The referral
tag is possibly used by Baidu to pay hao123 for referring
trafﬁc to it.
In one case, the redirected URL included
a search keyword for a clothing chain store.
Interest-
ingly, another injection group, ’hao’, referred the user to
hao123.com itself, but using a different mechanism – an
HTTP 302 response.
Surprisingly, ﬁve injection groups showed strong indi-
cations that the aim of the injector was malicious. One
such group is ’gpwa’. The injections in this group tar-
get the trafﬁc to gpwa.org. The forged content here in-
cludes a JavaScript that refers to a resource having the
same name as the one originally requested by the user,
but the forged resource is located at qpwa.org, a domain
that is suspiciously similar to the legitimate domain. The
forged domain is registered to a Romanian citizen, who
appears to be unrelated to the organization that registered
the domain gpwa.org. These are strong indications of
malicious intent. As of May 2016 the web server of
qpwa.org is still active at a web hosting provider based
in the US, however we have not been able to retrieve from
it the malicious script.
The injections in the ’duba’ group add to the original
content of a website a colorful button that prompts the
user to download an executable from a URL at the do-
main duba.net. The executable is ﬂagged as malicious
by several anti-virus vendors.
Another malicious injection group is ’mi-img’.
In
these injected sessions the client, which appears to be
an Android device, tries to download an application.
The injected response is a 302 redirection to another IP
address (no domain name is speciﬁed). According to
BotScout [2] – an online bot database – this forged IP
address is known to be a bot. We retrieved the applica-
tion from this IP address. The downloaded apk ﬁle is
ﬂagged by Fortinet’s antivirus as a malware called ’An-
droid/Gepew.A!tr’.
Another injection group worth mentioning is ’server
erased’.
to
the legitimate response but instead of original value of
In this group injections were identical
the Server HTTP header, e.g., nginx/1.2.7, the string
’*******’ appeared. This is as if to prevent identiﬁca-
tion of the web server’s software. We assume that this
injection is due to a security measure at the network op-
erator. The HTTP speciﬁcation [14] indeed recommends
that Server header be conﬁgurable.
5.2 Distinguishing the Forged Response
from the Valid One
Identifying a race between two packets is a relatively
straightforward task. However, without a priori knowl-
edge of the legitimate content expected from the server,
automatically distinguishing the forged packet from the
legitimate one is not trivial. Nonetheless, in the follow-
ing we list a few rules that worked well for this difﬁcult
task.
IP identiﬁcation In many operating systems, such as
Windows and Linux [16],
the IP identiﬁcation value
equals a counter that is incremented sequentially with
each sent packet. Is some operating systems there is a
single global counter for all sessions. In others, there is a
separate counter for each destination. Indeed, our obser-
vations show that in most injected sessions the IP iden-