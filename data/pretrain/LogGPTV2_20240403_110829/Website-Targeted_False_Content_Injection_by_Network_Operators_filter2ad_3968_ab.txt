### Session Handling and Packet Caching

In our system, packets sent after an idle period are treated as a new session and stored in the cache. However, this approach means that packets from the previous session, prior to eviction, would not be available for analysis.

### 3.2 Injection Detection

The detection of packet injection events is relatively straightforward. Our goal was to identify packet races within a session, where two packets with different payloads but the same TCP sequence numbers arrive in quick succession. To enhance efficiency, we only checked for races between pairs of packets received within a time interval not exceeding `MaxIntervalTime`. Throughout our data collection, we set `MaxIntervalTime` to 200 milliseconds, which captures the vast majority of injection events, as almost all round-trip times on the Internet are below 400 milliseconds [18]. Indeed, nearly all observed time differences between raced packets were below 100 milliseconds (see Section 5). The detailed procedure for race detection is provided in Algorithm 1 in Appendix B.

Our method for identifying packet races should, in theory, flag only events where a third party injected rogue packets into the TCP session. However, we observed numerous events that met these conditions but were not the result of packet injection. These occurrences are detailed in Appendix C.

### 3.3 Ethics and Privacy

To minimize concerns about user privacy, our monitoring system stores only TCP sessions in which a packet race was detected. All other sessions are briefly cached and then permanently erased. Additionally, for each stored session, only the last 30 packets (at most) are saved, while earlier packets are discarded. This ensures that only relevant packets are retained for analysis, reducing the risk of breaching user privacy. During our analysis, no identifiable personal information was found in the stored sessions.

Throughout our research, we were supervised by the networks' administration teams, who reviewed and approved the code of the monitoring system and the procedures for analyzing the stored sessions. The location and identity of users associated with IP addresses were never disclosed to us. It is important to note that our monitoring system passively collected information and never interfered with or tampered with the traffic in any way.

### 3.4 Limitations

Our monitoring system cannot detect content alterations where there is no race between the legitimate packet and the forged one. Specifically, we cannot detect the following cases:
1. In-band changes where the legitimate packet is altered in place, and the client only sees the forged packet.
2. Additions to the response where an extra forged packet extends the HTTP response without replacing any legitimate part.
3. Drops of packets that are part of a valid HTTP response.

We monitored a large volume of traffic from diverse networks with tens of thousands of users (see Section 4). However, as with any study involving uncontrolled traffic, our findings are limited to the traffic we monitor. We cannot identify an injecting entity on the Internet if we do not monitor traffic that triggers an injection by that entity. Furthermore, the types of injections we observed are dependent on the web traffic originating from the networks we monitored.

### 4 Data Sources

During our study, we monitored the network traffic of four institutions, capturing both incoming and outgoing Internet traffic for all users. The same monitoring mechanism was used in all cases: traffic was copied to the monitoring system using a SPAN port out of a border switch. We only monitored HTTP traffic, specifically traffic with source or destination ports equal to 80.

Table 1 lists the characteristics of the monitored traffic sources, including the number of users, the monitoring period, the total traffic volume, and the number of sessions processed. In aggregate, we monitored the traffic of more than 75,000 users, processing 1.4 petabits carried by 129 million HTTP sessions contacting servers with more than 1.5 million distinct IP addresses. The details of University B and C are displayed together since their traffic was monitored jointly on the same border switch. Enterprise D represents the main branch of a large hi-tech company, including an extensive R&D division and headquarters.

| Institution | User base | Monitoring Period [week] | Traffic Volume [Tb] | Number of Sessions [Million] |
|-------------|-----------|--------------------------|---------------------|------------------------------|
| University A | 20,000    | 2                        | 16                  | 80                           |
| University B & C | 50,000   | 3                        | 1400                | 24                           |
| Enterprise D | 5,000     | 8                        | 120                 | 0.8                          |

### 5 Injection Analysis

#### 5.1 Initial Investigation

In this section, we refer to a TCP session into which a forged packet was injected as an "injected session." We manually analyzed each injection event and detected around 400 injection events aimed at altering web content. Although this is not a negligible number, it is small compared to the total volume of traffic we monitored. Most of the injected sessions were destined for web servers in the Far East, a region to which relatively little traffic is directed from the networks we monitored. This explains the relatively small number of injections, though they were sufficient to provide substantial indications of the entities practicing forged content injection (Section 5.5).

We grouped the injection events into 14 groups based on the resource that was injected into the TCP session. Representative (and anonymized) captures of the injected sessions can be found in [4]. For each injection group, we publish up to 4 captures of injected sessions that are representative of their respective group. To preserve the anonymity of the users, we zeroed the client's IP address and the IP and TCP checksum fields in each capture.

Table 2 lists the groups and their characteristics:

| Group Name | Destination Site(s) | Site Type | Location | Injected Resource | Purpose |
|------------|---------------------|-----------|----------|-------------------|---------|
| szzhengan  | wa.kuwo.cn          | Ad Network | China    | JavaScript         | Malware |
| taobao     | is.alicdn.com       | Ad Network | China    | JavaScript         | Malware |
| netsweeper | skyscnr.com         | Travel Search Engine | India/China | 302 Response | Content Filtering |
| uyan       | uyan.cc             | Social Network | Malaysia/China | Meta Refresh | Advertisement |
| icourses   | icourses.cn         | Online Courses Portal | China | Meta Refresh | Advertisement |
| uvclick    | cnzz.com            | Web Users' Statistics | China | Meta Refresh | Advertisement |
| adcpc      | cnzz.com            | Web Users' Statistics | China | Meta Refresh | Advertisement |
| jiathis    | jiathis.com         | Social Network | China | Meta Refresh | Advertisement |
| changsha.cn | changsha.cn | Travel | China | Server Header Erased | Content Filtering |
| gpwa       | gpwa.org            | Gambling | United States | JavaScript | Malware |
| tupian     | feiniu.com, j1.com   | E-commerce | China | JavaScript | Malware |
| mi-img     | mi-img.com          | Unknown | China | 302 Redirection | Malware |
| duba       | unknown             | Unknown | China | JavaScript | Malware |
| hao        | 02995.com, tupian6688.com | Adware-Related | China | 302 Redirection | Advertisement |

#### 5.2 Distinguishing the Forged Response from the Valid One

Identifying a race between two packets is a straightforward task. However, without a priori knowledge of the legitimate content expected from the server, automatically distinguishing the forged packet from the legitimate one is not trivial. Below are some rules that worked well for this task:

**IP Identification**: In many operating systems, such as Windows and Linux, the IP identification value is a counter that increments sequentially with each sent packet. Some systems have a single global counter for all sessions, while others have a separate counter for each destination. Our observations show that in most injected sessions, the IP identification values help in distinguishing the forged packet from the legitimate one.