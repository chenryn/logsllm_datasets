### Method Signatures and Their Usage in BLE Data Access

The `BluetoothGattCharacteristic` class within the `android.bluetooth` package provides several `setValue` methods for setting the locally-stored value of a characteristic, which is then written to the BLE peripheral. These methods include:
- `boolean setValue(byte[])`
- `boolean setValue(int, int, int)`
- `boolean setValue(String)`
- `boolean setValue(int, int, int, int)`

For data reads, the same class has `getValue` methods that return data read from the BLE device.

#### Distribution of Method Usage
The following table shows the number of APKs using each method and their percentage of total method calls:

| Method Signature                  | Number of APKs | % of Total Methods |
|-----------------------------------|----------------|--------------------|
| `boolean setValue(byte[])`         | 17,896         | 61.58%             |
| `boolean setValue(int, int, int)`   | 8,051          | 27.70%             |
| `boolean setValue(String)`          | 2,313          | 7.96%              |
| `boolean setValue(int, int, int, int)` | 800            | 2.75%              |
| `boolean getValue()`                | 16,198         | 70.49%             |
| `boolean getValue(int, int, int)`   | 5,542          | 24.11%             |
| `boolean getValue(String)`          | 627            | 2.73%              |
| `boolean getValue(int, int, int, int)` | 611            | 2.66%              |

**Note:**
- All methods are from the `android.bluetooth.BluetoothGattCharacteristic` class.
- "% of Total Methods" refers to the percentage of occurrences of a particular method for a specific data access type (read or write) with respect to all methods that enable the same type of data access.

In some APKs, BLE data access methods were also called from vendor-specific libraries, but these are not included in our analysis as they are now obsolete.

### Cryptography in Android

Android builds on the Java Cryptography Architecture [33] and provides APIs within the `java.security` and `javax.crypto` packages for integrating security into applications. While developers can implement their own algorithms, Android recommends against this [4]. Therefore, we consider only calls to these two packages as an indication of application-layer security.

### BLECryptracer

Identifying cryptographically-processed BLE data is essentially a taint-analysis problem. For instance, a call to an encryption method will taint the output variable, which may later be written to a BLE device. In our analysis, when analyzing data read from a BLE peripheral, we consider the `getValue` variants as sources and the cryptography API calls as sinks. For data written to the BLE device, we consider the cryptography API calls as sources and the `setValue` methods as sinks.

Several tools are available for taint analysis, such as Flowdroid [7] and Amandroid [40]. However, running a subset of our dataset through Amandroid (selected due to its advantages over other tools [34]) revealed that a single APK analysis sometimes utilized over 10GB of RAM and took several hours to complete. Additionally, many instances of cryptographically-processed data were not identified, especially when BLE functions were called from third-party libraries. Therefore, we developed a custom Python tool called BLECryptracer to analyze all calls to BLE `setValue` and `getValue` methods within an APK.

#### BLECryptracer Implementation

BLECryptracer is built on top of Androguard [16], an open-source reverse-engineering tool that decompiles Android APKs and enables component analysis. Our tool traces values to/from BLE data access functions and determines if the data has been cryptographically processed. It uses a technique for tracing register values, often referred to as "slicing," which has been used in several static code analyses [17, 24, 35]. It also traces fields, messages passed via Intents, and certain threading functions like AsyncTask. The tool returns `TRUE` at the first instance of cryptography it encounters and `FALSE` if no application-layer security with BLE data is identified.

#### Tracing Mechanisms

Our tool analyzes BLE reads and writes separately, as the direction of tracing differs in each case. It performs three main types of tracing in the following order:

1. **Direct Trace**: Attempt to identify a link between BLE and cryptography functions via direct register value transfers and immediate results of method invocations.
2. **Associated Entity Trace**: If the direct trace does not identify a link, analyze abstract/instance methods and other registers used in previously analyzed function calls.
3. **Lenient Trace**: If the above methods fail, perform a search through all previously encountered methods to determine if cryptography is used anywhere within them.

### Evaluation

We evaluated BLECryptracer in terms of accuracy and execution times, comparing it with Amandroid.

#### Accuracy Measures

There is currently no dataset of real-world APKs with known use of cryptographically-processed BLE data. To test our tool, we refactored the DroidBench benchmarking suite [21] for the BLE case. Each DroidBench test application was cloned and modified to emulate cryptographically-processed reads and writes. We created 184 APKs: 92 for reads and 92 for writes.

Table 3 presents the performance metrics for both tools. In the case of BLECryptracer, the metrics are with respect to the total analyzed APKs at each confidence level. Lower confidence levels analyze only those APKs that do not get detected at higher levels.

| Tool        | Access | Confidence Level | Detected | TP | FP | TN | FN | Precision | Recall | F-measure |
|-------------|--------|------------------|----------|----|----|----|----|-----------|--------|-----------|
| Amandroid   | Read   | N/A              | 49       | 44 | 5  | 4  | 7  | 75%       | 57%    | 64%       |
| BLECryptracer | Read   | High             | 62       | 58 | 4  | 6  | 4  | 83%       | 75%    | 79%       |
| Amandroid   | Write  | N/A              | 11       | 7  | 4  | 6  | 4  | 64%       | 67%    | 65%       |
| BLECryptracer | Write  | High             | 12       | 8  | 4  | 4  | 4  | 67%       | 60%    | 63%       |

**Note:**
- Metrics differ based on the type of access (reads vs. writes) due to differences in tracing mechanisms.
- The DroidBench test set is imbalanced, containing more samples with leaks (77) than without (15).

#### Execution Times

We compared BLECryptracer and Amandroid in terms of speed of execution by running both tools against a random subset of 2,000 APKs. We imposed a maximum runtime of 30 minutes per APK. Approximately 40% of the tested APKs timed out when analyzed by Amandroid, while fewer than 2% timed out with BLECryptracer.

Figure 4 shows the time taken to analyze BLE writes using BLECryptracer vs. Amandroid. BLECryptracer's analysis times were around 3-4 minutes per application, with no obvious correlation between the size of the application's dex file and execution time.

### Large-Scale APK Analysis Results

We executed BLECryptracer against a dataset of 18,929 APKs. 192 APKs timed out when analyzing reads, and 220 APKs timed out when analyzing writes, with a maximum runtime of 30 minutes. These APKs were re-tested with an increased runtime of 60 minutes, but 44 and 76 APKs still timed out for reads and writes, respectively, and were excluded from further analysis. Additionally, approximately 90 APKs could not be processed via Androguardâ€™s `AnalyzeAPK` method and were excluded.

#### Presence of Application-Layer Security with BLE Data

Approximately 95% of BLE-enabled APKs call the `javax.crypto` and `java.security` cryptography libraries somewhere in their code. However, only about 25% of APKs use cryptographically-processed data with BLE reads and writes (identified with high confidence). About 46% of APKs that perform BLE reads and 54% of those that perform BLE writes (corresponding to 2,379 million and 2,075 million cumulative installations, respectively) do not implement security for the BLE data.

Figure 5 depicts the presence of cryptographically-processed data with BLE writes and reads, broken down by confidence level.

| Confidence Level | Reads | Writes |
|------------------|-------|--------|
| High             | 4,526 | 4,080  |
| Medium           | 5,328 | 3,130  |
| Low              | 8,511 | 8,838  |
| None             | 333   | 0      |

**Note:**
- Of the 16,131 APKs that called both BLE read and write functions, about 36% (i.e., more than 5,800 APKs) did not implement any application-layer security for BLE data.