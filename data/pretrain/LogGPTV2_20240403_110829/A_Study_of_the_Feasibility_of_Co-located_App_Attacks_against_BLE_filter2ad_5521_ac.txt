boolean setValue (byte[] )
boolean setValue (int, int, int)
boolean setValue (String)
boolean setValue (int, int, int, int)
#APKs % of Total Methodsb
17896
8051
2313
800
16198
5542
627
611
61.58%
27.70%
7.96%
2.75%
70.49%
24.11%
2.73%
2.66%
a All methods are from the class android.bluetooth.BluetoothGattCharacteristic.
b “% of Total Methods” refers to the percentage of occurrences of a particular method for a particular data
access type (i.e., read or write), with respect to all methods that enable the same type of data access.
reads. Such methods have been listed in Table 2, and
function as the starting point for our analysis. For data
writes, the BluetoothGattCharacteristic class within the
android.bluetooth package has setValue methods that
set the locally-stored value of a characteristic. This is then
written out to the BLE peripheral. For data reads, the same
class has getValue methods, which return data that is read
from the BLE device. In a few APKs that we analyzed,
BLE data access methods were also called from within other,
vendor-speciﬁc libraries. However, we do not include these
in our analysis as they are now obsolete.
For cryptography, Android builds on the Java Cryptography
Architecture [33] and provides a number of APIs, contained
within the java.security and javax.crypto packages, for
integrating security into applications. While it is possible
for developers to implement their own algorithms, Android
recommends against this [4]. We therefore consider only calls
to these two packages as an indication of application-layer
security.
4.3 BLECryptracer
Identiﬁcation of cryptographically-processed BLE data is in
essence a taint-analysis problem. For instance, a call to an
encryption method will taint the output variable that may later
be written to a BLE device. For the purpose of this paper,
when analyzing data that is read from a BLE peripheral, we
consider the getValue variants in Table 2 as sources and the
cryptography API calls as sinks. For data that is written to
the BLE device, we consider the cryptography API calls as
sources and the setValue methods as sinks.
There are a number of tools available for performing taint-
analysis, such as Flowdroid [7] and Amandroid [40]. However,
running a subset of our dataset of APKs through Amandroid
(selected because of advantages over Flowdroid and other
taint-analysis tools [34]), we found that analysis of a single
APK sometimes utilized over 10GB of RAM and took several
hours to complete. We also found through manual analysis
that many instances of cryptographically-processed data were
not identiﬁed by Amandroid, especially when the BLE func-
tions were called from third-party libraries. We therefore
developed a custom Python analysis tool called BLECryp-
tracer, to analyze all calls to BLE setValue and getValue
methods within an APK.
BLECryptracer is developed on top of Androguard [16], an
open-source reverse-engineering tool that decompiles an An-
droid APK and enables analysis of its components. Our tool
traces values to/from BLE data access functions and deter-
mines whether the data has been cryptographically processed.
To achieve this, it employs a technique for tracing register
values which is sometimes referred to as “slicing” and which
has been utilized in several static code analyses [17, 24, 35].
It also traces ﬁelds, as well as messages passed via Intents2
and certain threading functions, e.g., AsyncTask. It returns
TRUE at the ﬁrst instance of cryptography that it encounters
and FALSE if it is unable to identify any application-layer
security with BLE data.
Our tool analyzes BLE reads and writes separately, as the
direction of tracing is different in the two cases. It performs
three main types of tracing, in the following order:
1. Direct trace - Attempt to identify link between BLE and
cryptography functions via direct register value transfers
and as immediate results of method invocations.
2. Associated entity trace - If the direct trace does not iden-
tify a link between source and sink, analyze abstract/in-
stance methods and other registers used in previously
analyzed function calls.
3. “Lenient” trace - If the above methods fail to return a
positive result, perform a search through all previously
encountered methods (which would have originated from
the BLE data access method), to determine if cryptogra-
phy is used anywhere within them.
2By matching the Extra identiﬁer within the calling method.
8    28th USENIX Security Symposium
USENIX Association
Table 3: Accuracy Statistics
Access Tool
Amandroid
Read
BLECryptracer
Amandroid
Write
BLECryptracer
Conﬁdence App Seta Detectedb
N/A
High
Medium
Low
N/A
High
Medium
Low
49
62
11
12
56
50
22
10
92
92
30
19
92
92
42
20
TP
44
58
7
8
49
46
19
5
FP TN FN Precision Recall
57%
5
4
75%
37%
4
67%
4
64%
7
4
60%
61%
3
5
42%
90%
94%
64%
67%
88%
92%
86%
50%
10
11
7
3
8
11
8
3
33
19
12
4
28
31
12
7
F-measure
70%
83%
47%
67%
74%
72%
72%
45%
a Number of APKs tested. Note that, for conﬁdence levels Medium and Low, we don’t consider the APKs detected at higher
conﬁdence levels.
b The number of APKs that were identiﬁed as having cryptographically protected BLE data.
The ﬁrst trace method will produce results that are most
likely to actually have cryptographically-processed BLE data,
as the coarse-grained analysis performed in the subsequent
methods adds increasing amounts of uncertainty. For this
reason, BLECryptracer assigns “conﬁdence levels” of High,
Medium and Low to its output, which correspond to the three
trace methods above, to indicate how certain it is of the result.
We evaluate these conﬁdence levels against a modiﬁed version
of the DroidBench benchmarking suite in Section 4.4.1. Note
that BLECryptracer only looks for application-layer security
in benign applications, and these conﬁdence levels apply only
when deliberate manipulations (i.e., malicious obfuscation
techniques) are not employed to hide the data ﬂow between
source and sink.
Appendix A describes the tracing mechanism in greater
detail, and also outlines how BLECryptracer combats the
effects of obfuscation in benign applications.
4.4 Evaluation
We evaluated BLECryptracer, in terms of both accuracy and
execution times. For comparison purposes, we have included
test results from Amandroid as well.
4.4.1 Accuracy Measures
At present, there is no dataset of real-world APKs with known
use of cryptographically-processed BLE data, i.e., ground
truth. Therefore, in order to test our tool against different
data transfer mechanisms, we re-factored the DroidBench
benchmarking suite [21] for the BLE case.
Each DroidBench test application was cloned twice and
modiﬁed so the data ﬂow between the sources and sinks would
be from getValue to a cryptography method invocation, and
from the cryptography method invocation to setValue, to
emulate cryptographically-processed reads and writes, respec-
tively. Some DroidBench test cases were excluded as they
were found to be irrelevant due to differences in the objectives
of DroidBench and our test set, e.g., applications that employ
emulator detection or which leak contextual information in
exceptions. Further, applications where BLE data is written
to or read from ﬁles, or which contain data leaks in inactive
code segments were not included (as our aim is to determine
whether or not BLE data is cryptographically-processed). In
total, we created 184 APKs: 92 for reads and 92 for writes.
We executed BLECryptracer against our benchmarking test
set, analyzed the results and obtained performance metrics in
terms of the three different conﬁdence levels. The statistics
differ based on the type of access that is analyzed (i.e., reads
vs. writes) due to differences in the tracing mechanisms. The
same test set was also used against Amandroid for comparison.
Table 3 presents the performance metrics for both tools.
In the case of BLECryptracer results, the metrics are with
respect to the total analyzed APKs at each conﬁdence level.
That is, because lower conﬁdence levels analyze only those
APKs that do not get detected at higher levels, accurate met-
rics can only be derived by considering the set of APKs that
were actually analyzed at each level. For example, when con-
sidering the analysis of BLE reads, while the entire dataset
of 92 APKs is relevant for conﬁdence level High, only the 30
APKs that do not result in a TRUE outcome at level High will
be analyzed for conﬁdence level Medium. This also means
that, when obtaining performance metrics for conﬁdence level
High, all TRUE results obtained at levels Medium and Low
are taken to be FALSE.
The DroidBench test set, and hence our benchmarking suite,
is an imbalanced dataset, containing far more samples with
leaks (77) than without (15). For this reason, metrics such as
accuracy are not suitable for analyzing the performance of
our tool when executed against this test set, as they are more
susceptible to skew [23,26]. For our analysis, we compare the
combined True Positive Rate (TPR) and False Positive Rate
(FPR), and the combined precision-recall instead, in-line with
USENIX Association
28th USENIX Security Symposium    9
taint-analysis evaluations [36].
Table 3 presents the precision and recall (i.e., TPR) for
both BLECryptracer and Amandroid. We further derive FPRs
for both tools. With BLECryptracer, when analyzing reads,
False Positive Rates steadily increase as the conﬁdence level
reduces, as expected, with values of 27% for conﬁdence level
High, 36% for Medium and 57% for Low. When analyzing
writes, the values are 27%, 27% and 63%, respectively. Re-
gardless of the data access mechanism being tested, BLE-
Cryptracer (considering only the results at High conﬁdence,
for a fairer comparison) performs better than Amandroid in
terms of FPR, with 27% vs. 33% for reads and 27% vs. 47%
for writes. Precision values are also better in the case of BLE-
Cryptracer for both reads and writes. In terms of the True
Positive Rate, BLECryptracer performs better than Aman-
droid for reads at 75% vs. 57%, and slightly worse for writes
at 60% vs. 64%. These results show that, overall, BLECryp-
tracer performs better than Amandroid for analyzing the use
of cryptography with BLE data.
It should be noted that three of the four False Positives
obtained by BLECryptracer at the High conﬁdence level were
due to the order in which variables are assigned values (i.e.,
lifecycle events), which is not tested for by BLECryptracer.
Other data transfer mechanisms not tested for are Looper
and Messenger functions, which generate False Negatives.
The remaining False Positive was due to the presence of
method aliasing and was also identiﬁed as a False Positive
by Amandroid. In addition, the unexpectedly low TPR (i.e.,
recall) at level Medium for reads is due to the relatively few
cases analyzed at that level when compared to High.
4.4.2 Execution Times
We also compared BLECryptracer and Amandroid in terms of
speed of execution. For this, we ran the two tools against a ran-
dom subset of 2,000 APKs and compared time-to-completion
in both cases. We imposed a maximum run-time of 30 minutes
per APK for both tools, and only compared execution times
for those cases where Amandroid did not time out (approxi-
mately 40% of the tested APKs timed out when analyzed by
Amandroid. In comparison, fewer than 2% of APKs timed
out when analyzed by BLECryptracer).
Figure 4 plots the time taken to analyze BLE writes using
BLECryptracer vs. Amandroid. The ﬁgure shows that analysis
times with BLECryptracer were, for the most part, around 3-4
minutes per application. We observed no obvious correlation
between the size of the application’s dex ﬁle and the execu-
tion time, for either tool. APKs that took longer to process
with BLECryptracer were predominantly of conﬁdence level
“Medium”, which indicates that the longer analysis times may
simply have been because of having to ﬁrst go through the
most stringent analysis (at the highest conﬁdence level). For
Amandroid, the execution times vary to a greater extent than
with BLECryptracer, due to the difference in the mechanisms
Figure 4: Comparison of time taken to execute BLECryptracer
vs. Amandroid, when analyzing BLE writes.
employed for performing the analysis.
4.5 Results from Large-Scale APK Analysis
We executed BLECryptracer against our dataset of 18,929
APKs. 192 APKs timed out when analyzing reads and 220
APKs timed out when analyzing writes, when a maximum
runtime of 30 minutes was imposed. These APKs were re-
tested with an increased runtime of 60 minutes. However,
even with the longer analysis time, 44 and 76 APKs timed out
for reads and writes, respectively, and had to be excluded from
further analysis. In addition, approximately 90 APKs could
not be processed via Androguard’s AnalyzeAPK method and
were excluded.
Due to the differences in performance metrics obtained
for the three conﬁdence levels during testing (as mentioned
in Section 4.4), we focus on only those results that either
identify cryptography at conﬁdence level High or those where
no cryptography was identiﬁed at all.
4.5.1 Presence of App-Layer Security with BLE Data
Our results show that approximately 95% of BLE-enabled
APKs call the javax.crypto and java.security cryptog-
raphy libraries somewhere within their code. While this is a
large proportion of APKs, the results also indicate that a much
smaller percentage of APKs use cryptographically processed
data with BLE reads and writes (approximately 25% for both,
identiﬁed with High conﬁdence). In fact, about 46% of APKs
that perform BLE reads and 54% of those that perform BLE
writes (corresponding to 2,379 million and 2,075 million cu-
mulative installations, respectively) do not implement security
for the BLE data. Interestingly, of the 16,131 APKs that called
10    28th USENIX Security Symposium
USENIX Association
05001,0001,50005001,0001,500AmandroidExecutionTime(s)BLECryptracerExecutionTime(s)100
Reads
4,526
5,328
8,511
333
Writes
4,080
3,130
8,838
0 %
20 %
40 %
60 %
80 % 100 %
High Medium Low None
Figure 5: Analysis results depicting the presence of
cryptographically-processed data with BLE writes and reads,
with breakdown according to Conﬁdence Level.
both BLE read and write functions, about 36% (i.e., more than