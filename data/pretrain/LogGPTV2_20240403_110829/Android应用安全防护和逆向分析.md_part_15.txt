::: bodypic-c
![](OEBPS/Images/139-2-i.jpg){.calibre175}
:::
发现程序根本运行不起来，一点击就闪退，这就说明做到了防止应用被二次签名打包。
但是这也不是最安全的，因为既然有签名比对方法的地方，那么只需要反编译apk之后，修改smali语法，把这个方法调用的地方注释即可，如下所示：
::: bodypic-c
![](OEBPS/Images/139-3-i.jpg){.calibre356}
:::
只需要使用#把这行代码注释，然后回编译重新打包安装即可。这里的难点是如何找到这个检测签名方法的地方，比如有的程序在native层做的，但是不管在哪里，只要是在代码中，就可以找出来的。
[]{#051.xhtml}
#### 8.3 手动注册native方法 {.bodycontent-title2}
这个方法其实不太常用，因为它的安全措施不是很强大，但是也是可以起到一定的作用，在说这个知识点的时候，先来了解一下so加载的流程。
在Android中，当程序在Java层运行System.loadLibrary（\"jnitest\"）；这行代码后，程序会去载入libjnitest.so文件。与此同时，产生一个Load事件，这个事件触发后，程序默认会在载入的.so文件的函数列表中查找JNI_OnLoad函数并执行。与Load事件相对，当载入的.so文件被卸载时，Unload事件被触发。此时，程序默认会去在载入的.so文件的函数列表中查找JNI_OnUnload函数并执行，然后卸载.so文件。需要注意的是，JNI_OnLoad与JNI_OnUnload这两个函数在.so组件中并不是强制要求的，用户也可以不去实现，Java代码一样可以调用到C组件中的函数，之所以在C组件中去实现这两个函数（特别是JNI_OnLoad函数），往往是做一个初始化工作或"善后"工作。可以这样认为，将JNI_ONLoad看成是.so组件的初始化函数，当其第一次被装载时被执行（Window下的dll文件也可类似的机制，在_DLL_Main（）函数中，通过一个swith
case语句来识别当前是载入还是卸载）。将JNI_OnUnload函数看成是析构函数，当其被卸载时被调用。由此看来，就不难明白为什么很多jni
C组件中会实现JNI_OnLoad这个函数了。一般情况下，在C组件中的JNI_OnLoad函数用来实现给VM注册接口，以方便VM可以快速地找到Java代码需要调用的C函数。（此外，JNI_OnLoad函数还有另外一个功能，那就是告诉VM此C组件使用那一个JNI版本，如果未实现JNI_OnLoad函数，则默认是JNI
1.1版本。）
应用层的Java类通过VM而调用到native函数。一般是通过VM去寻找\*.so里的native函数。如果需要连续调用很多次，每次都需要寻找一遍，会多花许多时间。此时，C组件开发者可以将本地函数向VM进行注册，以便能加快后续调用native函数的效率。可以这么想象一下，假设VM内部一个native函数链表，初始时是空的，在未显式注册之前，此native函数链表是空的，每次Java调用native函数之前会首先在此链表中查找需要调用的native函数，如果找到就直接使用，如果未找到，得再通过载入的.so文件中的函数列表中去查找，且每次Java调用native函数都是进行这样的流程。因此，效率就自然会下降。为了克服这个问题，我们可以通过在.so文件载入初始化时，即JNI_OnLoad函数中，先行将native函数注册到VM的native函数链表中去，这样一来，后续每次Java调用native函数时都会在VM中的native函数链表中找到对应的函数，从而加快速度。
通过上面的分析之后，so文件加载和卸载的时机，可以显示的手动注册自己的native方法，那么一般在定义native方法的时候，对应的native层的函数名是：Java_类名_方法名，样式如下：
::: bodypic-c
![](OEBPS/Images/140-i.jpg){.calibre357}
:::
所以就有两个问题：
·第一个问题是在IDA工具查看so文件的时候，去找到对应的native方法非常容易，因为知道了Java层的native方法名和类型，那么直接可以定位到这个native函数如图8-2所示。
·第二问题是恶意攻击者可以得到这个so文件之后，查看这个native方法的参数和返回类型，也就是方法签名，然后自己在Java层写一个demo程序，然后构造一个和so文件中对应的native方法，就可以执行这个native方法，如果有一个校验密码或者是获取密码的方法是个native的，那么这时候就会很容易被攻击者执行方法后获取结果。
::: bodypic-c
![](OEBPS/Images/8a2-i.jpg){.calibre358}
:::
图8-2 IDA查看so中的函数名\
说得简单点，比如上面的这个isEquals例子：现在有一个攻击者，想执行这个应用的isEquals方法，那么它只需要解压apk文件，得到so文件，查看so文件中的函数，或者查看上层的Java代码，得到这个方法的返回值和签名，然后他就可以编写一个简单的程序，构造一个类：
::: bodypic-c
![](OEBPS/Images/141-i.jpg){.calibre359}
:::
然后在它内部定义一个native方法：
::: bodypic-c
![](OEBPS/Images/141-2-i.jpg){.calibre360}
:::
再使用System.loadLibrary加载应用的so文件，然后在适当的地方执行isEquals方法，这样就等于调用了so文件中的isEquals方法了。
从上面的两个问题可以看到，如果native层的函数遵从这样的格式，无疑是给破解提供了简单的一种方式。可以这么做，显示地注册JNI方法，只需要在native层的代码中调用如下三个函数即可。
第一个函数是（\*env）-\>RegisterNatives（env，clazz，methods，methodsLenght）。这个函数就是手动注册一个native方法，属于JNIEnv\*的，参数也比较简单。clazz就是需要注册native方法的那个类，是jclass类型，这可以使用JNIEnv的FindClass方法，传递类的名称即可获取这个对象，如下所示：
::: bodypic-c
![](OEBPS/Images/141-3-i.jpg){.calibre361}
:::
methods是一个结构体，定义如下：
::: bodypic-c
![](OEBPS/Images/141-4-i.jpg){.calibre362}
:::
·name是Java中函数的名字。
·signature用字符串描述了函数的参数和返回值。
·fnPtr是函数指针，指向C函数。
类似于这样的结构如下所示：
::: bodypic-c
![](OEBPS/Images/142-i.jpg){.calibre363}
:::
第二个函数是jint
JNI_OnLoad（JavaVM\*vm，void\*reserved）。这个函数就是上面说到的，加载so的时候被调用到，同时可以在这里获取JVM参数的，一般在这个函数中主要就是执行上面的注册函数功能，这里还需要获取一个JNIEnv\*变量，如下所示：
::: bodypic-c
![](OEBPS/Images/142-2-i.jpg){.calibre364}
:::
这里通过JVM来获取JNIEnv变量，然后调用注册函数，如下所示：
::: bodypic-c
![](OEBPS/Images/142-3-i.jpg){.calibre256}
:::
第三个函数是void
JNI_OnUnload（JavaVM\*vm，void\*reserved）。这个函数和JNI_OnLoad是相对应的，是在so被卸载的时候调用。
通过上面的三个函数就可以手动显示地注册native方法了，那么就可以修改native层的函数名，不要按照之前的那种格式了，增加破解者寻找关键的native层函数的难度。
这里把isEquals函数名变成了jiangwei，如下所示：
::: bodypic-c
![](OEBPS/Images/142-4-i.jpg){.calibre365}
:::
然后再修改注册方法的结构体，如下所示：
::: bodypic-c
![](OEBPS/Images/142-5-i.jpg){.calibre366}
:::
编译运行，使用IDA查看，如图8-3所示。
::: bodypic-c
![](OEBPS/Images/8a3-i.jpg){.calibre367}
:::
图8-3 IDA工具查看函数名\
这时候破解者不能按照常规的套路找到native层的函数了，那么上面的两个问题就可以避免了，增加安全性。
但是问题来了，现在的破解者，一般打开so文件的时候，如果找不到对应的native方法之后，就会去找JNI_OnLoad函数，然后通过分析ARM汇编代码，找到register函数，分析注册方法结构体，找到对应的native方法。那么这种方式还是不靠谱，也是只能糊弄一下小白破解者。不过通过这个例子也可以得知，在JNI_OnLoad中可以做很多事，比如上面说的签名机制校验，也可以在JNI_OnLoad中做一次，增加安全性，如下所示：
::: bodypic-c
![](OEBPS/Images/143-i.jpg){.calibre368}
:::
看看equal_sign函数功能，如图8-4所示。
::: bodypic-c
![](OEBPS/Images/8aa4-i.jpg){.calibre369}
:::
图8-4 校验签名
在这个方法中，用JNIEnv变量调用了Java层的方法，来获取应用的签名，然后进行比对。
用这种签名校验方式来做安全性保证也是一个思路，至少native层的代码分析比smali代码分析难度大点，而且这种签名校验机制必须用静态方式去破解apk，也就是通过分析代码来破解，因为程序没有运行起来无法通过动态方式破解的。
[]{#052.xhtml}
#### 8.4 反调试检测 {.bodycontent-title2}
反调试检测是为了应对现在很多破解者使用IDA进行动态方式调试so文件，从而获取重要的信息，知道IDA进行so动态调试是基于进程的注入技术，然后使用Linux中的ptrace机制，进行调试目标进程的附加操作。ptrace机制有一个特点，如果一个进程被调试了，在它进程的status文件中有一个字段TracerPid会记录调试者的进程id值，如图8-5所示。
::: bodypic-c
![](OEBPS/Images/8a5-i.jpg){.calibre370}
:::
图8-5 TracerPid字段
查看文件：/proc/\[myPid\]/status，在第六行，有一个TracerPid字段，就是记录了调试者的进程id。那么就可以这么做来达到反调试的功效了：轮询遍历自己进程的status文件，然后读取TracerPid字段值，如果发现它大于0，就代表着自己的应用在被人调试，所以就立马退出程序。原理知道了，代码实现也很简单，这里用pthread创建一个线程，然后进行轮询操作：
使用pthread_create创建一个线程，线程启动之后执行thread_function函数：
::: bodypic-c
![](OEBPS/Images/144-i.jpg){.calibre371}
:::
看看thread_funcation函数：
::: bodypic-c
![](OEBPS/Images/145-i.jpg){.calibre372}
:::
开始轮询，读取TracerPid字段的值，发现大于0，就立马退出程序。运行结果看看，如下所示：
::: bodypic-c
![](OEBPS/Images/145-2-i.jpg){.calibre373}
:::
看到了，当使用IDA工具进行调试的时候，程序立马退出，IDA的调试页面也退出了。
但是还是有问题，因为现在破解者们已经免疫了，知道会有这种检测，所以就会用IDA工具给JNI_OnLoad函数下断点，然后进行调试，找到检测轮询代码，使用nop指令，替换检测指令，就相当于把检测代码给注释了。所以知道的人多了，方法就不好用了。
[]{#053.xhtml}
#### 8.5 本章小结 {.bodycontent-title2}
本章中主要介绍了在Android中开发应用的时候，可以从几个方面对应用的安全做一层防护，主要介绍了以下几种方式：
·使用Android中的混淆机制，包括代码混淆和资源混淆，这样能够增加反编译之后的内容阅读难度，同时可以减小应用包的大小。
·使用应用的签名保护机制，因为每个应用的签名都是唯一的，为了防止被破解，可以在核心的方法或者程序入口处添加签名校验功能，如果校验失败就可以直接退出程序，增加破解难度。
·手动注册native方法，这个方法也算是一种混淆机制，因为Android中native方法在native层对应的方法名都有固定的格式，为了防止被破解，可以去混淆这种方法的命名格式来增加破解难度。
·增加应用的反调试功能，这里借助一个知识点，如果一个进程被注入或者是调试了，那么在它的status文件中的TracerPid字段的值就不为0。可以借助这个知识点来增加反调试功能。
[]{#054.xhtml}
### 第9章 Android中常用权限分析 {.bodycontent-title4}
Android在开发过程中会申请一些权限，比如定位、网络等关系到用户隐私数据的都需要在AndroidManifest.xml中声明，而且现在移动设备生产商都添加了应用在使用这些隐私功能的时候给用户一个提示，让用户去决定是否允许本次操作。Android
6.0新增了这个功能，叫做运行时权限。本章不介绍在AndroidManifest.xml中申请基础权限，而是介绍在授权页面申请权限，现在开发者会利用这些权限去开发用户体验不错的产品，在这个过程中会产生一些隐私安全问题。
[]{#055.xhtml}
#### 9.1 辅助功能权限 {.bodycontent-title2}
许多Android使用者因为各种情况导致需要以特殊方式与手机交互。例如有些用户由于视力上、身体上、年龄上的问题致使他们不能看完整的屏幕、使用触屏，或者无法很好地接收到语音信息。
Android提供了辅助（Accessibility）功能和服务帮助这些用户更加简单地操作设备，包括文字转语音（不支持中文）、触觉反馈、手势操作、轨迹球和手柄操作。辅助功能实质上就是监听应用窗口变化和事件。在使用辅助功能的时候必须声明以下权限：
::: bodypic-c
![](OEBPS/Images/147-i.jpg){.calibre374}
:::
在代码中直接打开相应的Intent跳转到授权页面：
::: bodypic-c
![](OEBPS/Images/147-2-i.jpg){.calibre375}
:::
开发场景：实现静默安装/卸载、应用锁、通知栏管理、抢红包等功能。
辅助功能授权页面如图9-1所示。
::: bodypic-c
![](OEBPS/Images/9a1-i.jpg){.calibre376}
:::
图9-1 辅助功能授权页面\
[存在的风险：]{.yanse}可以监听设备当前的窗口变化，分析当前应用的View结构之后模拟点击。比如一个恶意的软件申请到了这个权限之后，就可以监听设备的应用启动情况：
·模拟一些社交App的登录窗口页面，其实是他们自己的钓鱼登录页，这样用户是无感知的，当用户输入用户名和密码时就很危险了。
·当监听到当前应用是社交App，而且是聊天记录页面时，就可以得知当前聊天记录。
·分析设备中的应用情况，在用户不知情的情况下，模拟点击任何一个应用进行操作，从而获取信息。
[]{#056.xhtml}
#### 9.2 设备管理权限 {.bodycontent-title2}
在开发的过程中，很多开发者没有注意到设备管理权限，它的作用类似于iPhone中的"查找我的手机"功能，当设备丢失的时候，可以快速定位以及擦除设备数据等，在使用这个功能时需要申请以下权限：
::: bodypic-c
![](OEBPS/Images/148-i.jpg){.calibre377}
:::
在代码中直接打开相应的Intent跳转到授权页面：
::: bodypic-c
![](OEBPS/Images/148-2-i.jpg){.calibre378}
:::
设备管理权限还有一个隐形的作用，就是可以防止被卸载。有的应用开发者想让自己的App无法被用户卸载，可以申请这个权限。其实想想也是合理的，因为它是设备丢失之后进行联系的唯一可靠功能了，肯定不能被卸载。
授权页面如图9-2所示。
::: bodypic-c
![](OEBPS/Images/9a2-i.jpg){.calibre379}
:::
图9-2 设备管理授权页面\
[存在的风险：]{.yanse}申请这个权限之后，有一个很大的弊端就是设备相当于给申请者管理了，他们可以修改设备的锁屏密码、擦除数据等，这对于用户来说是很危险的。
[]{#057.xhtml}
#### 9.3 通知栏管理权限 {.bodycontent-title2}
通知栏管理权限算是辅助功能的一个缩减版，因为辅助功能是可以监听设备的通知栏情况的，而这个功能专门用来监听设备的通知栏消息。在使用的过程中需要申请下面的权限：
::: bodypic-c
![](OEBPS/Images/149-i.jpg){.calibre380}
:::
在代码中直接打开相应的Intent跳转到授权页面：
::: bodypic-c
![](OEBPS/Images/149-2-i.jpg){.calibre381}
:::
开发场景：管理设备的通知信息，可以帮助用户管理杂乱的通知栏消息。
授权页面如图9-3所示。
::: bodypic-c
![](OEBPS/Images/9a3-i.jpg){.calibre382}
:::
图9-3 通知栏管理授权页面
[存在的风险：]{.yanse}与辅助功能一样，申请这个权限之后用户设备的通知栏消息就会被它接管，如果通知栏有敏感消息的话，对用户来说是很危险的。
[]{#058.xhtml}
#### 9.4 VPN开发权限 {.bodycontent-title2}