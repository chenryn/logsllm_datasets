title:A logic-based framework for attribute based access control
author:Lingyu Wang and
Duminda Wijesekera and
Sushil Jajodia
A Logic-based Framework for Attribute based Access
Control∗
Lingyu Wang, Duminda Wijesekera†, and Sushil Jajodia
Center for Secure Information Systems,
George Mason University, Fairfax VA 22030.
e-mail: {lwang3|dwijesek|jajodia}@gmu.edu
ABSTRACT
Attribute based access control (ABAC) grants accesses to
services based on the attributes possessed by the requester.
Thus, ABAC diﬀers from the traditional discretionary ac-
cess control model by replacing the subject by a set of at-
tributes and the object by a set of services in the access
control matrix. The former is appropriate in an identity-
less system like the Internet where subjects are identiﬁed by
their characteristics, such as those substantiated by certiﬁ-
cates. These can be modeled as attribute sets. The latter
is appropriate because most Internet users are not privy to
method names residing on remote servers. These can be
modeled as sets of service options. We present a frame-
work that models this aspect of access control using logic
programming with set constraints of a computable set the-
ory [DPPR00]. Our framework speciﬁes policies as stratiﬁed
constraint ﬂounder-free logic programs that admit primitive
recursion. The design of the policy speciﬁcation framework
ensures that they are consistent and complete. Our ABAC
policies can be transformed to ensure faster runtimes.
Categories and Subject Descriptors
D.4.6 [Security and Protection]: Access controls
General Terms
Security
Keywords
attribute based access control, constrained logic program-
ming with sets
∗
This work was partially supported by the National Science
Foundation under grant CCR-0113515.
†
Thanks to William H. Winsborough for valuable comments
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
FMSE'04, October 29, 2004, Washington, DC, USA.
Copyright 2004 ACM 1-58113-971-3/04/0010...$5.00.
1.
INTRODUCTION
Open environments such as the Internet where service re-
questers are not identiﬁed by unique names depend upon
their attributes (usually substantiated by certiﬁcates) to
gain accesses to resources.
In order to accommodate this
need, many important attribute based access control sys-
tems have been designed in the recent past [LMW02b, BS00,
BS02, YWS00, YWS01, YWS03]. Also role based [SCFY96,
BS04] and ﬂexible [JSSS01, BCFP03] access control systems
can be used to specify some aspects of attribute based access
policies by exploiting the indirection and the collectability of
permissions provided by roles. One of the important aspect
of attribute based access control policies is their ability to
specify accesses to a collection of services based upon a col-
lection of attributes processed by the requester. Thus the
nature of such collections and their properties determines
the expressibility of speciﬁable policies. Some systems such
as [LMW02b] model these collections as sets (but with lim-
ited structural properties) and others as ﬁnite vectors of at-
tributes [BS00, BS02]. Yet others use roles as their primary
vehicle of collecting attributes and services. To the best of
our knowledge, there is no single model that uses sets as
data structures with their algebraic operations (i.e. ∪,∩,\)
to specify attribute based policies. This paper does so by
using a version of computable set theory as a constraint sys-
tem in logic programming.
The version of set theory we use is CLP(SET ), the heredi-
tarily ﬁnite and computable set theory developed by Dovier
et al.
[DPPR00, DPR00, DPR98]. Hereditarily ﬁniteness
refers to the fact that sets are constructed out of a ﬁnite
universe by applying operators such as ∪,∩ etc. Because
our policies refer to attributes and services, we use a two
sorted ﬁrst order language with set variables. The chosen
constraint system ensures that set terms satisfy an equality
theory with algebraic identities such as the distributivity
of unions over intersections etc. As will be seen shortly,
because policies are written as stratiﬁed constraint logic
programs with recursion, they terminate as logic programs.
Also the speciﬁcation language follows the blueprint of the
ﬂexible access framework (FAF) [JSSS01], where conﬂict res-
olution and default policies are speciﬁable - thereby ensuring
the consistency and completeness of policies.
Fixed point semantics of constraint logic programs assigns
one of three truth values true, false and undetermined to ev-
ery predicate instance. This is unacceptable for an access
controller because every access request requires a unique yes
or no answer. But we show that the policies we allow are
always assigned either true or false. Additionally, constraint
45logic programs that we use as policies have a NP complete
run time, that invite concerns about their utility by access
controllers. As a remedy, we show that our policies can
be rewritten to yield faster runtimes by applying an appro-
priate set of unfolding transformations that have the same
semantics and runtime advantages as materialized views.
The rest of the paper is organized as follows. Section 2
describes related work. Sections 3 and 4 provides the syn-
tax and semantics of our language. Section 5 describes ma-
terialization and policy transformation for execution time
eﬃciency. Section 6 concludes the paper.
2. RELATED WORK
The RT framework of Li et al. [LMW02a] is a distributed,
identity-less access control speciﬁcation framework where
each role speciﬁes the roles that it contains and/or attributes
that are required for membership. They use the predicate
isMemeber(x,X) to model that x is a member of the role
X. Although the RT syntax does not explicitly support set
operations such as ∪,∩,⊂,\, they have a notion of inter-
section roles to specify those attributes that are contained
in other roles deﬁned using attribute sets. In contrast, hav-
ing set operations allows our policies to express set unions
and intersections in a more intuitive syntax satisfying struc-
tural identities expected of sets. Secondly, RT uses only
Horn clauses, thereby preventing the use of set diﬀerence
operator, consequently preventing from constructing diﬀer-
ence roles, whereas we admit limited forms of negations in
rule bodies and allow the set diﬀerence operator. Further-
more RT is based on a monotonicity assumption where any
superset of a set of attributes automatically satisfy the re-
quirements speciﬁed by the set, which we do not require.
Nevertheless, RT addresses trust propagation and distribut-
ing access speciﬁcations that we do not have.
The work of Bonatti et al. [BS00, BS02] is another identity-
less access control system where credentials and services are
modeled as vectors of attributes. They support credential
and services hierarchies. Although the framework uses vec-
tors, their policies do not seemed to exploit attribute or-
dering. Thus, to the best of our understanding, vectors in
[BS00, BS02] behave like collections, that we model as sets.
In addition, policies of [BS00, BS02] are arranged in a three
level hierarchy. Using recursion, our framework can have a
hierarchy with many levels.
Yu et al. [YWS00, YWS01, YWS03] developed a service
negotiation framework for requesters and providers to grad-
ually expose their attributes. Fully instantiated attribute
sets are traded in [YWS03], extending [YWS01] to support
credentials with internal structure, although the problem is
not completely cast and resolved in logic.
Although we use the design blueprints of FAF [JSSS01], it
does not have set variables. Thus, this work can be consid-
ered as an enhancement of FAF to the domain of attribute
based policies.
3. SYNTAX
As stated, we use two sorts of sets to model attributes
and services in CLP(SET ) [DPPR00, DPR00, DPR98]. The
constraint logic programming language we use to formalize
attribute based access control consists of terms constructed
the usual way from variables and functions. We also have
two kinds of predicates - those used to specify the compu-
tation domain and those used to specify its sub domain of
constraints. In addition to satisfying the usual boolean alge-
braic laws such as associativity, commutativity etc, one as-
pect of the hereditarily ﬁniteness of CLP(SET ) is that, these
sets satisfy the axiom of foundation in Zermelo-Fraenkel
(ZF) set theory [Kun80], which we exploit to ensure the
termination of all queries.
3.1 The Nature of Sets
Following Dovier et al. [DPPR00], our language consists
of four sorts, two for attributes and two for services. They
are given as Kera, Seta, Kers and Sets. Kera and Kers
are the basic sorts for attributes and services. Seta and
Sets are for hereditarily ﬁnite sets constructed over Kera
and Kers respectively. Each sort has its own constants and
function symbols. We assume that Kera and Kers has two
constant symbols ⊥a and ⊥s. These are useful in modelling
partial functions as our application domain requires them.
When clear from the context we drop the subscript and use
⊥ for brevity. We assume that Seta and Sets has constants
∅a and ∅s respectively to denote the null sets of their re-
spective sorts. For brevity we drop the subscripts and use
∅ for both. To create sets of attributes and services we
have two binary function symbols {− | −}a and {− | −}s.
Their sorts are ({Kera, Seta} (cid:14) {Kera}) (cid:15)→ {Seta} and
({Kers, Sets}(cid:14){Kers}) (cid:15)→ {Sets} respectively. For brevity
when the subscript is clear from the context, we drop it and
use {− | −} for {− | −}a and {− | −}s. Intuitively, {a|X}
represents the set {a} ∪ X. For brevity we also use {a} to
represent {a|∅}.
Example 1. Suppose a digital library provides services
for checking membership status, browsing and printing. Brows-
ing is specialized to the table of contents (ToC), abstracts
and ﬁle contents. Printing specializes to printing on letter
size and A4 paper. Thus the service hierarchy has digital
library service (dlS) as its root with three children br,
(for browse) ckStat and print. Furthermore, the print
service has two children letter and A4, and the browsing
service consists of brToC, brAbs and brCont as children.
Accordingly, in this example, the service hierarchy is repre-
sented as the set of path names as {{dlS},{dls,br},{dlS,ckStat},
{dls,print}, {dls,br,brToC}, {dls,br,brAbs},{dls,br,
brCount}}. If there is likely to be any confusion about hav-
ing the same name repeated in the hierarchy, then we can
avoid that by using representation such as {parent, {child1},
{child2}, . . ., {childn}}
Firstly, these sets of sets . . . sets of elements are the hered-
itarily ﬁnite. Furthermore non-set elements are chosen from
a countable alphabet, although any single set constructed will
have only ﬁnitely many of them. Thus, semantically our
language of sets in CLP (SET ) constructs hereditarily ﬁnite
sets over an uninterpreted Herbrand base.
Secondly, attributes of the requester (usually conveyed by
submitting credentials or certiﬁcates) can also be represented
as nested sets. We have two disjoint attribute hierarchies,
one for membership status and the other for payments. The
membership hierarchy is modeled by {patron, {patron,memb-
er},{patron,senior}, {patron, fellow}}. The payment hierar-
chy is modelled by {payment, {payment,dollar},{payment,eu-
ro}}
Thirdly, Seta or Sets, can be used to create sets using
∅, such as {∅,{∅}}. As will be seen shortly, we use such
nested sets to limit the recursive backtracking through rule
chains. We also use nested sets to code integers. For exam-
ple {{. . .{∅} . . .}} where the empty set ∅ is embedded in n
braces is used to represent the integer n.
Following Dovier et al.
[DPPR00], we take {=,(cid:17)=,∈,(cid:17)∈
,∪3,(cid:17) ∪3,(cid:19),(cid:17)(cid:19)} as our constraint predicates for each set sort -
namely Seta and Sets. In addition, ⊆,∩3,\ and their nega-
tions can be deﬁned using the former, making all of them
available as constraint predicates. Here ∪3 is the ternary
predicate X ∪3 Y = Z, An analogous explanation applies for
∩3. Similarly X (cid:19) Y holds iﬀ X ∩ Y = ∅. Our constraints
are conjunctions and disjunctions of constraint predicates.
In addition, we consider the following collection of (reserved)
predicate symbols that relate terms of Seta and Sets.
• cando(X,Y,±,Z) is a 4-ary predicate where X and Y
are attribute and service set terms. The third attribute
is either + or − (We can use ∅ and {∅} to encode +
and - as sets). The fourth variable Z is a set term used
to encode the recursive depth. The intuitive reading
of cando(X,Y,±,Z) is that a holder of the attribute
set X is authorized/prohibited in using to services Y
depending on the sign + or -. The nesting of the ∅ says
the recursive depth. That is cando({adult,liveInVA},
{PG13,X},+,{∅}) says that any holder of attributes
{adult,liveInVA} is entitled to the services {PG13,
X}, and this is stated as a fact derivable with one level
of backtracking.
• dercando(X,Y,±,Z) is a 4-ary predicate with the same
set of parameters as cando. The only diﬀernce between
candoand dercandois that the latter can be used in
recursive rules.
• do(X,Y,+,Z) is a 4-ary predicate with the same set of