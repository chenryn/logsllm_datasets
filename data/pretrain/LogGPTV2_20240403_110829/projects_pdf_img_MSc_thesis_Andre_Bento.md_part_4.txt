### 2.1.4 Service Dependency Graphs

**Figure 2.5: Service Dependency Graph**

In Figure 2.5, a service dependency graph is depicted. These graphs are of the type Multi-Directed-Graph, as they contain multiple edges with varying directions between pairs of services (nodes). Each service is represented within a box, and the edges between these boxes indicate the number of calls made between each pair of services. For example, the "Users API" called the "UsersDatabase" 240 times. Such dependency graphs provide a snapshot of the system's state at a specific time, which can be useful for studying changes in the system's structure, such as the disappearance of a service or the appearance of new ones. Additionally, they can help analyze variations in the call volume between services over time.

### 2.1.5 Time-Series Data

**Time-Series Data Representation**

Time-series data is a method of representing data as a sequence of values indexed by time. This type of data is commonly used in monitoring systems, industrial processes, corporate business metrics, and sensor measurements. Figure 2.6 provides a visual example of time-series data, showing the annual mean sunspot numbers from 1760 to 1965 [25].

**Figure 2.6: Annual Mean Sunspot Numbers for 1760-1965 [25]**

In Figure 2.6, David Brillinger [25] presents a time-series of sunspot means. While this example uses natural phenomena, time-series data can also be derived from various system metrics, such as CPU load, system uptime/downtime, and network latency. Since these processes are not random, autocorrelation can be used to extract insights, such as predicting patterns or detecting anomalies. Anomaly detection in time-series data is a data mining process that identifies unusual patterns or outliers. One common method is to look for outliers in a multidimensional feature set [26]. 

**Figure 2.7: Anomaly Detection in Time-Series [27]**

In Figure 2.7, an anomaly is detected as a significant spike in the time-series data. This value is considered an outlier because it deviates significantly from the expected range of measurements. While humans can easily identify such anomalies in simple cases, modern datasets often have a high degree of variability and complexity, making manual detection impractical. Therefore, automated anomaly detection using machine learning techniques is now widely used.

Anomaly detection in time-series data has numerous applications, including fraud detection, system health monitoring, fault detection, and event detection in sensor networks. Given the impracticality of manually tagging anomalous points, automated methods are essential.

### 2.2 Technologies

This section introduces technologies and tools capable of handling the types of information discussed in Section 2.1.

#### 2.2.1 Distributed Tracing Tools

Distributed tracing tools are designed to handle trace data from complex distributed systems, such as microservices-based applications. These tools collect, process, and present trace data in a user-friendly manner, often through charts and diagrams. They also allow users to perform queries on the trace data, such as by trace ID or time frame. Table 2.1 compares two popular open-source distributed tracing tools, Jaeger and Zipkin.

**Table 2.1: Comparison of Distributed Tracing Tools**

| **Feature** | **Jaeger [28]** | **Zipkin [29]** |
|-------------|-----------------|-----------------|
| **Brief Description** | Released as open source by Uber Technologies. Used for monitoring and troubleshooting microservices-based distributed systems. Inspired by Zipkin. | Helps gather timing data needed to troubleshoot latency problems in microservice applications. Manages both the collection and lookup of this data. Design based on the Google Dapper paper. |
| **Pros** | Open source; Docker-ready; Collector interface compatible with Zipkin protocol; Dynamic sampling rate; Browser user interface. | Open source; Docker-ready; Allows multiple span transport technologies (HTTP, Kafka, Scribe, AMQP); Browser user interface. |
| **Cons** | Only supports two span transport ways (Thrift and HTTP). | Fixed sampling rate. |
| **Analysis** | Dependency graph view; Trace comparison (End 2018). | Dependency graph view. |
| **Used By** | Red Hat; AirBnb; Symantec; IBM; Uber. | Lightstep. |

While these tools are useful for collecting and presenting trace data, they do not provide in-depth analysis. Users, particularly DevOps, must still perform the detailed investigation to identify and resolve issues. However, these tools are a good starting point for grouping and visualizing trace data.

#### 2.2.2 Graph Manipulation and Processing Tools

Distributed tracing data, composed of traces and spans, can be used to create service dependency graphs. These graphs are Multi-Directed-Graphs, as discussed in Section 2.1.4. To manipulate and process these graphs, specialized tools are required. Table 2.2 compares three popular graph manipulation and processing tools: Apache Giraph, Ligra, and NetworkX.

**Table 2.2: Comparison of Graph Manipulation and Processing Tools**

| **Tool** | **Apache Giraph [31]** | **Ligra [32]** | **NetworkX [33]** |
|----------|------------------------|----------------|--------------------|
| **Description** | An iterative graph processing system for high scalability. Used at Facebook to analyze the social graph. | A library for graph creation, analysis, and manipulation. | A Python package for creating, manipulating, and studying the structure, dynamics, and functions of complex networks. |
| **License** | Free Apache 2. | MIT. | BSD - New License. |
| **Supported Languages** | Java and Scala. | C and C++. | Python. |
| **Pros** | Distributed and highly scalable; Excellent performance – Processes one trillion edges using 200 modest machines in 4 minutes. | Handles very large graphs; Exploits large memory and multi-core CPU. | Good support and easy to install with Python; Lots of graph algorithms already implemented and tested. |
| **Cons** | Uses “Think-Like-a-Vertex” programming model, which can force suboptimal algorithms and sacrifice performance for scaling out. | Lack of documentation makes it hard to use; Limited community usage. | Not scalable (single-machine); High learning curve due to project maturity; Slows down with high data volumes (400,000+ nodes). |

**Figure 2.8: Scalability vs. Algorithm Implementation [35]**

In Figure 2.8, the tools are compared based on their scalability and the implementation of graph algorithms. Apache Giraph excels in scalability but has limited algorithm support, while NetworkX is less scalable but offers a wide range of graph algorithms. Ligra falls in between, with good vertical scalability but limited horizontal scalability and poor documentation.

#### 2.2.3 Graph Database Tools

Graph databases (GDBs) are used to persist graph information. After instantiating and processing a graph in volatile memory, it can be stored in persistent memory for later use. A GDB allows graph data storage and uses graph structures for semantic queries with nodes, edges, and properties. Table 2.3 compares three popular GDBs: ArangoDB, Facebook TAO, and Neo4J.

**Table 2.3: Comparison of Graph Databases**

| **Tool** | **ArangoDB [38]** | **Facebook TAO [39]** | **Neo4J [40]** |
|----------|--------------------|-----------------------|----------------|
| **Description** | A NoSQL database that uses a query language to access the database. | A proprietary graph database developed by Facebook for storing the social network. | The most popular open-source graph database, completely open to the community. |
| **License** | Free Apache 2. | Proprietary. | GPLv3 CE. |
| **Supported Languages** | C++; Go; Java; JavaScript; Python; Scala. | Go; Java; JavaScript. | Java; JavaScript; Python; Scala. |
| **Pros** | Multi-data-type support (key/value, documents, and graphs); Allows combination of different data access patterns in a single query; Supports cluster deployment. | Low latency (≈ 100ms); ACID transactions; Distributed database. | Most popular open-source graph database; ACID transactions. |
| **Cons** | High learning curve due to AQL (Arango Query Language). | Not accessible to the public. | Not able to scale horizontally. |

These tools are essential for storing and querying graph data, especially in the context of service dependency graphs and other complex data structures.