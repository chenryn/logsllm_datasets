0
1
1
1
1
η
1
1
η
0
i−2Y
Yi−1
Yi Yi+1
Yi+2
Yi+3
Yi+4 Yi+5 Yi+6 Yi+7
Fig. 3. A log scale graph tracing the value of Λ(Y) as it is updated for a series of
observations that includes ﬁrst-contact connection requests before (Yi−1 and Yi−2) and
after (Yi and beyond) the host was infected
The solution to this problem is to run a new sequential hypothesis test as each
connection outcome is observed, evaluating these outcomes in reverse chronolog-
ical order, as illustrated in Figure 4. To detect a host that was infected before it
←−−
issued ﬁrst-contact connection i (event Yi), but after it had issued ﬁrst-contact
connection i − 1, a reverse sequential hypothesis test (
HT ) would require the
same number of observations to detect the infection as would a forward sequen-
tial hypothesis that had started observing the sequence at observation i. Because
the most recent observations are processed ﬁrst, the reverse test will terminate
before reaching the observations that were collected before infection.
infection
0
0
1
1
1
0
1
1
η
1
1
η
0
i−2Y
Yi−1
Yi
Yi+1
Yi+2
Yi+3
Yi+4
Yi+5
Fig. 4. A log scale graph tracing the value of Λ(Yi+5, Yi+4, . . .), in which the observa-
tions in Y are processed in reverse sequential order. The most recent, or rightmost,
observation is the ﬁrst one processed
When we used sequential hypothesis testing in our prior work to detect scan-
ning of a local network by remote hosts, the intrusion detection system could
know a priori whether a connection would fail given its knowledge of the net-
work topology and services [7]. Thus, the outcome of a connection request from
host i could immediately be classiﬁed as a success or failure observation (Yi) and
Λ(Yn) could be evaluated without delay.
When a local host initiates ﬁrst-contact connection requests to remote hosts,
such as those shown in Figure 5, the worm detection system cannot immediately
66
Stuart E. Schechter, Jaeyeon Jung, and Arthur W. Berger
determine if the connection will succeed or fail. While some connection failures
will result in a TCP RST packet or an ICMP packet [1, 3], empirical evidence has
shown that most do not [2]. The remaining connection attempts can be classiﬁed
as failures only after a timeout expires.
local host
WDS
dst:
dst:
dst:
dst:
dst:
src:
r1
r2
r3
r4
r5
r2
t
i
m
e
o
u
t
Y2 = 0
Y1 = 1
Y3 = 1
Y4 = 1
Y5 = 1
time
time
Fig. 5. The success of ﬁrst-contact connection requests by a local host to remote hosts
cannot be established by the Worm Detection System (WDS) until a response is ob-
served or a timeout expires
While a sequential hypothesis test waits for unsuccessful connections to time
out, a worm may send thousands of additional connection requests with which
to infect other systems. To limit the number of outgoing ﬁrst-contact connec-
tions, a sequential hypothesis testing approach can be paired with a credit-based
connection rate limiter as described in Section 3.
2.3 Algorithmic Implementation
A na¨ıve implementation of repeated reverse sequential hypothesis testing re-
quires that we store an arbitrarily large sequence of ﬁrst-contact connection
observations. A na¨ıve implementation must also step through a portion of this
sequence each time a new observation is received in order to run a new test
starting at that observation.
Fortunately, there exists an iterative function:
¯Λ(Yn) = max
(cid:6)
(cid:7)
1, ¯Λ(Yn−1)φ(Yn)
with state variable ¯Λ(Yn), that can be calculated in the sequence in which events
are observed, and that has the property that its value will exceed η1 if and only
if a reverse sequential hypothesis test would conclude from this sequence that
the host was infected. This is proved in Appendix A.
Updating ¯Λ for each observation requires only a single multiplication and two
comparison operations2. Because ¯Λ is updated in sequence, observations can be
discarded immediately after they are used to update the value of ¯Λ.
2 In fact, addition and subtraction operations are adequate as the iterative function is
equivalent to Θ(Yn) = max (0, Θ(Yn−1) + ln φ(Yn)) where Θ(Yn) ≡ ln ¯Λ(Yn).
Fast Detection of Scanning Worm Infections
67
enum status {PENDING, SUCCESS, FAILURE};
struct FCC_Queue_Entry {
ip4_addr DestAddr;
time
status
WhenInitiated;
Status;
}
Fig. 6. The structure of entries in the First-Contact Connection (FCC) queue
When running this algorithm in a worm detection system, we must maintain
separate state information for each host being monitored. Thus, a state variable
¯Λl is maintained for each local host l.
It is also necessary to track which hosts have been previously contacted by l.
We track the set of Previously Contacted Hosts, or PCH set, for each local host.
Finally, each local host l has an associated queue of the ﬁrst-contact con-
nection attempts that l has issued but that have not yet been processed as
observations. The structure of the records that are pushed on this FCC queue are
shown in Figure 6. The choice of a queue for this data structure ensures that
ﬁrst-contact connection attempts are processed in the order in which they are
issued, not in the order in which their status is determined.
The algorithm itself is quite simple and is triggered upon one of three events.
1. When the worm detection system observes a packet (TCP SYN or UDP)
sent by local host l, it checks to see if the destination address d is in l’s
previously contacted host (PCH) set. If it isn’t, it adds d to the PCH set and
adds a new entry to the end of the FCC queue with d as the destination
address and status PENDING.
2. When an incoming packet arrives addressed to local host l and the source
address is also the destination address (DestAddr) of a record in l’s FCC
queue, the packet is interpreted as a response to the ﬁrst-contact connection
request and the status of the FCC record is updated. The status of the FCC
record is set to SUCCESS unless the packet is a TCP RST packet, which
indicates a rejected connection.
3. Whenever the entry on the front of the FCC queue has status PENDING and
has been in the queue longer than the connection timeout period, a timeout
occurs and the entry is assigned the status of FAILURE.
When any of the above events causes the entry at the front of the FCC queue to
have status other than PENDING, it is dequeued and ¯Λl is updated and compared
to η1. If ¯Λl ≥ η1, we halt testing for host l and immediately conclude that l
is infected. Dequeuing continues so long as ¯Λl  10
Cl ← 1 if Cl = 0 for 4 seconds
3
Fig. 7. The underlying equations behind credit-based connection rate limiting. Changes
to a host’s balance are triggered by the ﬁrst-contact connections (FCCs) it initiates
and by the passing of time
If a ﬁrst-contact connection succeeds with probability θ, its expected payoﬀ
from issuing that connection is its expected success credit minus its cost, or 2θ−1.
2 and negative otherwise. Hosts that scan with
This payoﬀ is positive for θ > 1
a low rate of successful connections will quickly consume their credits whereas
benign hosts that issue ﬁrst-contact connections with high rates of success will
nearly double their credits each time they invest them.
As described so far, the algorithm could result in two undesirable states.
First, a host could acquire a large number of credits while performing a benign
activity (e.g. Web crawling) which could be used later by a scanning worm.
Second, a network outage could cause a benign host to use all of its credits after
which it would starve for a lack of ﬁrst-contact connection successes.
These problems are addressed by providing each host with a small allowance
and by putting in place a high rate of inﬂation. If a host has been without credits
for four seconds, we issue the host a single credit (Cl ← 1 if Cl ≤ 0). This not
←−−
only ensures that the host does not starve, but enables us to collect another
observation to feed into our hypothesis test (
HT , as conﬁgured in
Section 4, observes all ﬁrst-contact connection requests as successes or failures
←−−
within three seconds, providing a starving process with a credit allowance only
←−−
HT will have been
after more than three seconds have passed ensures that
executed on all previously issued ﬁrst-contact connection requests. If
HT has
already concluded that the host is a worm, it is expected that the system will
be quarantined and so no requests will reach their destination regardless of the
credit balance.
←−−
HT ). Because
For each second that passes, a host that has acquired more than 10 credits
will be forced to surrender up to a third of them, but not so many as to take
its balance below 10 (Cl ← max(10, 2
Cl) if Cl > 10). A host that is subject to
the maximum inﬂation rate, with a ﬁrst-contact connection rate r, success rate
θ > 0, and credit balance Cl,t at time t, will see this balance reach an equilibrium
state ˆC when ˆC = Cl,t = Cl,t+1.
3
Cl,t+1 =
ˆC =
(Cl,t + r · (2θ − 1))
( ˆC + r · (2θ − 1))
2
3
2
3
70
Stuart E. Schechter, Jaeyeon Jung, and Arthur W. Berger
· r · (2θ − 1)
2
3
2
3
2
3
ˆC =
ˆC +
· r · (2θ − 1)
ˆC =
ˆC = 2 · r · (2θ − 1)
1
3
One can now see that we chose the inﬂation constant 2
3 to ensure that, in the
upcoming second, a host that has a perfect ﬁrst-contact connection success rate
(θ = 1) will have twice as many credits as it could have needed in the previous
second. Also note that the maximum inﬂation rate, which seems quite steep,
is only fully applied when ˆC ≥ 15, which in turn occurs only when the ﬁrst-
contact connection rate r is greater than 7.5 requests per second. Twycross and
Williamson’s virus throttle, on the other hand, can only assume that any host