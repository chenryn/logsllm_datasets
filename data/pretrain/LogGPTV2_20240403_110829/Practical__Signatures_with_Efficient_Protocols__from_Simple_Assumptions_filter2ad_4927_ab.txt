v
(cid:1) ∈ Gt × ˆGn+1.
j=1 M
−χj
i,j
Prove(crs, v, {ωi}t
··· (cid:126)M ωt
−χj
j=1 v
j
.
Verify(crs, v, π): Given π ∈ G and v = (v1, . . . , vn), re-
turn 1 if and only if (v1, . . . , vn) (cid:54)= (1G, . . . , 1G) and
π satisﬁes 1GT = e(π, ˆgz) ·(cid:81)n
j=1 e(vj, ˆgj).
The proof of the soundness of this QA-NIZK argument
system requires the matrix M to be witness-samplable.
This means that the reduction has to know the discrete
logarithms of the group elements of M. This requirement
is compatible with our security proofs.
i=1 zωi
i
.
e(Ω, ˆg2(cid:96)+4)
3. A RANDOMIZABLE SIGNATURE ON
MULTI-BLOCK MESSAGES
In [41], Libert et al. described an F-unforgeable sig-
nature based on the SXDH assumption. We show that
their scheme implies an eﬃcient ordinary digital signa-
ture which makes it possible to eﬃciently sign multi-
block messages in Z(cid:96)
p while keeping the scheme compat-
ible with eﬃcient protocols.
In order to keep the sig-
nature length independent of the number of blocks, we
exploit the property that the underlying QA-NIZK argu-
ment [38] has constant size, regardless of the dimensions
of the considered linear subspace. Moreover, we show
that their scheme remains unforgeable under the SXDH
assumption.
Keygen(λ, (cid:96)) : Choose bilinear groups cp = (G, ˆG, GT , p)
of prime order p > 2λ with g R← G, ˆg R← ˆG.
1. Choose ω, a R← Zp, and set h = ga, Ω = hω.
2. Choose (cid:126)v = (v1, . . . , v(cid:96), w) R← G(cid:96)+1.
3. Deﬁne a matrix M = (Mj,i)j,i ∈ G((cid:96)+2)×(2(cid:96)+4)
(cid:33)
M =
1(cid:96)+1 1(cid:96)+1
h
g
(cid:126)v(cid:62) gI(cid:96)+1 hI(cid:96)+1 1(cid:62)
(cid:96)+1
,
(1)
where 1(cid:96)+1 = (1G, . . . , 1G) ∈ G(cid:96)+1.
Section 2.2 to get crs = ({zi}(cid:96)+2
4. Run Keygen(cp, M ) of the QA-NIZK argument of
The private key is sk := ω and the public key is
pk =
cp, g, h, ˆg, (cid:126)v, Ω = hω, crs
.
i=1 , ˆgz, {ˆgj}2(cid:96)+4
j=1 ).
(cid:17)
(cid:32)
(cid:16)
Sign(sk, (cid:126)m = (m1, . . . , m(cid:96))) : given the private key sk =
p, choose s R← Zp to com-
ω and a message (cid:126)m ∈ Z(cid:96)
pute
σ1 = gω · (vm1
··· vm(cid:96)
1
(cid:96)
· w)s, σ2 = gs, σ3 = hs.
Then, run Prove of the QA-NIZK argument to
prove that the following vector of G2(cid:96)+4
(σ1, σm1
2
, . . . , σm(cid:96)
2 , σ2, σm1
3
, . . . , σm(cid:96)
3 , σ3, Ω)
(2)
is in the row space of M. This QA-NIZK proof
π ∈ G consists of π = zω
Return the signature σ =(cid:0)σ1, σ2, σ3, π(cid:1) ∈ G4.
(cid:96)+1 · z(cid:96)+2)s.
1 · (zm1
··· zm(cid:96)
2
Verify(pk, σ, (cid:126)m) : parse σ as above and (cid:126)m as a tuple
(m1, . . . , m(cid:96)) in Z(cid:96)
p and return 1 if and only if
−1 = e(π, ˆgz) · e(σ1, ˆg1)
··· ˆgm(cid:96)
(cid:96)+3 ··· ˆgm(cid:96)
· e(σ2, ˆgm1
· e(σ3, ˆgm1
2
(cid:96)+1 · ˆg(cid:96)+2)
2(cid:96)+2 · ˆg2(cid:96)+3).
(3)
The signature on (cid:96) scalars thus only consists of 4 ele-
ments in G while the veriﬁcation equation only involves
a computation of 5 pairings.
Theorem 1. The above signature scheme is existen-
tially unforgeable under chosen-message attacks (eu-cma)
if the SXDH assumption holds in (G, ˆG, GT ). (The proof
is available in Appendix A.)
4. COMPANION PROTOCOLS
In this section, we give Σ protocols for issuing a signa-
ture on a committed multi-block message and for proving
knowledge of a valid message-signature pair.
4.1 Σ-Protocols
As deﬁned by Cramer [23], Σ protocols are three-move
honest-veriﬁer zero-knowledge protocols where the ﬁrst
and last messages are sent by the prover.
Deﬁnition 3. [23] A Σ protocol for an NP language L :
{s | ∃w : L(s, w) = 1} is a pair of interactive algorithms
(P, V ) that work as follows. On input (s, w) for P and s
for V , the following interaction takes place:
1. P outputs a “commitment” com to the veriﬁer.
2. V selects a “challenge” chall uniformly at random
from a challenge space and sends it to the prover.
3. P sends a “response” resp and halts.
Eventually, V evaluates a predicate Verify on the state-
ment s and the transcript (com, chall, resp) and returns 0
or 1, then halts.
Beyond the completeness requirement (i.e., an honest
run between P (s, w) and V (s) always accepts if L(s, w) =
1), the following security properties should be satisﬁed:
Special soundness A matching
a
is
of
pair
s
statement
tran-
scripts w.r.t.
a pair
trans1 = (com1; chall1; resp1) and trans2 =
(com2; chall2; resp2) which are both accepting
conversations, com1 = com2 but chall1 (cid:54)= chall2.
A Σ protocol has special soundness if there is an
extractor Extract that takes as input a statement s
and a matching pair of transcripts (trans1; trans2)
and returns a witness w such that L(s; w) = 1.
Special honest veriﬁer ZK A Σ protocol has spe-
cial honest veriﬁer zero knowledge (SHVZK) if
there is a simulator Sim that takes as input a
statement s (that may or may not be valid)
and a challenge chall and outputs a transcript
(com; chall; resp) using the challenge provided such
that Verify(s; (com; chall; resp)) = 1. Furthermore,
transcripts produced by the simulator for correct
statements s are indistinguishable from transcripts
produced by P and V on input s, where P addi-
tionally has any witness w for s as input.
Several techniques [26, 30] are known to transform
Σ protocols (SHVZK) into interactive zero-knowledge
proofs which remain secure against malicious veriﬁers.
4.2 Proof of Knowledge of a Signature on a
Committed Message
e(Ω, ˆg2(cid:96)+4)
We give Σ protocols for proving the knowledge of a
signature-message pair (σ, (cid:126)m) satisfying the veriﬁcation
equation of the scheme of Section 3
−1 = e(σ1, ˆg1) · e(σ2, ˆgm1
(cid:96)+3 ··· ˆgm(cid:96)
(cid:96)+1 · ˆg(cid:96)+2) (4)
2(cid:96)+2 · ˆg2(cid:96)+3) · e(π, ˆgz),
where σ = (σ1, σ2, σ3, π) and (cid:126)m = (m1, . . . , m(cid:96)). We
note that, as shown in the proof of Theorem 1, a candi-
date signature (σ1, σ2, σ3, π) may satisfy the veriﬁcation
equation although logg(σ2) (cid:54)= logh(σ3). In applications
· e(σ3, ˆgm1
··· ˆgm(cid:96)
2
to anonymous credentials, a malicious credential issuer
could take advantage of this fact in attempts to break
the anonymity of the scheme (e.g., by linking two au-
thentications involving the same credential). For this
reason, we consider a protocol for proving possession of
a possibly maliciously generated signature.
We thus consider the case of arbitrary valid signatures
that may have been maliciously computed by a signer
who, e.g., aims at tracing provers across diﬀerent au-
thentications. In this setting, we can still obtain a per-
fect SHVZK Σ protocol to hedge against such attacks.
A ﬁrst attempt to eﬃciently build such a protocol
is to “linearize” the veriﬁcation equation (4) by mak-
ing sure that two witnesses are never paired together.
However, we will still have to deal with (paralleliz-
able) intermediate Σ protocols for quadratic scalar rela-
tions. Even though a quadratic pairing-product equation
e(x1, ˆa) · e(x2, ˆy) – for variables x1, x2, ˆy and constant ˆa
– can be linearized by partially randomizing the vari-
ables so as to get the equation e(x1 · xr
2, ˆa) · e(x2, ˆy · ˆa−r)
(which allows ˆy(cid:48) = ˆy · ˆa−r to appear in the clear), prov-
ing knowledge of a valid signature still requires proving
a statement about some representation of ˆy which now
appears in committed form. Somehow, going through
the randomizing factor ˆa−r involves a quadratic relation
between some known exponents to get special-soundness.
To ease the entire proof we rather directly commit to the
variables in G and ˆG using their available generator g and
ˆg which are not among the constants of the veriﬁcation
equation of the signature. We additionally need an extra
generator f of G whose discrete logarithm is unknown.
Commit Given (σ, (cid:126)m), conduct the following steps.
2
··· ˆgm(cid:96)
(cid:96)+3 ··· ˆgm(cid:96)
1. Commit to d1 := ˆgm1
(cid:96)+1 · ˆg(cid:96)+2 ∈ ˆG and
2(cid:96)+2 · ˆg2(cid:96)+3 ∈ ˆG. To this end,
R← Zp and compute ˆD1 = d1 · ˆgr1 and
d2 := ˆgm1
choose r1, r2
ˆD2 = d2 · ˆgr2 .
2. In order to prove knowledge of an opening of com-
mitments ˆD1, ˆD2 ∈ ˆG to the same message (cid:126)m =
(m1, . . . , m(cid:96)) ∈ Z(cid:96)
R← Zp
(cid:96)+1 · ˆgs1 and ˆE2 =
and compute ˆE1 = ˆgu1
(cid:96)+3 ··· ˆgu(cid:96)
2(cid:96)+2 · ˆgs2 .
ˆgu1
3. Using r1, r2 ∈ Zp from step 1, deﬁne σ0 = σr1
2 ·
3 and commit to (π, σ0, σ1, σ2, σ3) ∈ G5. For this
σr2
R← Zp at random and
purpose, choose tz, t0, t1, t2, t3
set Cz = π · gtz , Ci = σi · gti , for i ∈ {0, . . . , 3},
1 · ˆDt3
and ˆD0 = ˆgtz
p, choose s1, s2, u1, . . . , u(cid:96)
2 ··· ˆgu(cid:96)
2 · ˆg−t0 .
1 · ˆDt2
z · ˆgt1
4. In order to prove (partial) knowledge of an opening
z · ˆgv1
1 ·
to (Cz, C0, C1, C2, C3, ˆD0), compute ˆE0 = ˆgvz
R← Zp.
1 · ˆDv3
2 · ˆg−v0 for random vz, v0, v1, v2, v3
ˆDv2
5. Prove that C0 is well-formed relatively to the com-
mitted values in C1, C2 and the coins r1, r2 ∈ Zp
used in ˆD1, ˆD2. To this end, prove knowledge
· C r2
· gt4 , where
of the representation C0 = C r1
t4 = t0 − r1 · t2 − r2 · t3. To do this, compute
2
R← Zp and where
· gv4 , for v4
F0 = C s1
2
s1, s2 ∈ Zp are the random coins used in ˆE1, ˆE2.
6. To prove that t4 = t0 − r1 · t2 − r2 · t3, (re-)commit
to t0, t2, t3, t4 ∈ Zp by picking x2, x3, x4
R← Zp and
computing
· C s2
3
3
Ti = gti · f xi
∀i ∈ {0, 2, 3, 4},
where x0 = x2 · r1 + x3 · r2 + x4. Ensure that
committed variables coincide with those of previous
steps by computing
{Vi = gvi · f yi}i∈{0,2,3,4},
where y0, y2, y3, y4
T0 = T r1
2
and 5 to compute S0 = T s1
2
· T r2
3
· T s2
3 .
R← Zp. To prove the equality
· T4, re-use s1, s2 ∈ Zp from steps 2
Finally, keep Cz ∈ G and all the random coins in aux,
and output
(cid:16){Ci}3
com =
i=0, F0,{(Ti, Vi)}i=0,2,3,4,
(cid:17) ∈ G14 × ˆG6
S0,{( ˆDi, ˆEi)}2
i=0
(5)
Challenge Given com as per (5), pick ρ R← Zp uniformly
at random and return chall = ρ.
Response On inputs com, aux and chall = ρ, compute:
1. ¯mi = ρ· mi + ui, for i = 1 to (cid:96), ¯r1 = ρ· r1 + s1, and
¯r2 = ρ · r2 + s2;
2. wz = ρ · tz + vz and wi = ρ · ti + vi, for i = 0 to 3;
3. w4 = ρ · t4 + v4, where t4 := t0 − t1 · r1 − t2 · r2;
4. zi = ρ · xi + yi for each i ∈ {0, 2, 3, 4}.
Output resp ∈ G × Z(cid:96)+12
as
p
i=1, ¯r1, ¯r2, wz,{wi}4
i=0,{zi}i=0,2,3,4
(cid:0)Cz,{ ¯mi}(cid:96)
(cid:1).
Verify Given (com; chall; resp) return 0 if it does not
parse correctly or if the following relations do not
hold:
2
(cid:96)+1 · g ¯r1