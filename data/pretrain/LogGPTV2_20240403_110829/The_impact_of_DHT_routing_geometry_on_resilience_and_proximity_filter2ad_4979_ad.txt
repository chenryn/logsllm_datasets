30
20
10
0
Simulated PNS Tree
Computed PNS Tree
Simulated PRS Ring
Computed PRS Ring
0
1000 2000 3000 4000 5000 6000 7000 8000 9000
Latency
Figure 5: The CDF of path latency distributions
for PNS Tree and PRS Ring derived in two ways:
simulated using a GT-ITM topology and computed
only using its latency distribution.
Figure 5 compares the computed and simulated results
for two algorithms, PRS Ring and PNS Tree, on our GT-
ITM topology with 16,384 nodes. Links between two transit
nodes are assigned a latency of 100, while those between a
transit node and a stub node are assigned 20. The latencies
of links between two stub nodes are set to 5. Note that the
computations agree well with the simulations conﬁrming our
conjecture earlier that computations over the latency distri-
bution seen by a typical node provides a reasonable approx-
imation to the actual simulations. The results for PRS are
not as close as those of PNS, and this is likely due to the fact
that PRS algorithms typically lead to variations in the hop
count. However, the diﬀerences between simulated and com-
puted results are far less than the diﬀerences between the
GT-ITM and observed latency distributions. Thus, what-
ever precision we have lost by using computations rather
than simulations are more than made up for by the increase
in accuracy in modeling reality.
In what follows, we will consider only XOR, Ring, Hyper-
cube, and Tree. The Hybrid algorithm and the Tree algo-
rithm are essentially identical when there are no node fail-
ures.12 The Butterﬂy does not admit either PNS or PRS.
12One minor point: while the Tree does not admit PRS, the
F
D
C
100
90
80
70
60
50
40
30
20
10
0
Plain XOR
PNS XOR
PRS XOR
PNS+PRS XOR
Internet
0
400
800
Latency (msec)
1200
1600
2000
F
D
C
100
90
80
70
60
50
40
30
20
10
0
Plain Ring
PNS Ring
PRS Ring
PNS+PRS Ring
0
400
800
1200
1600
2000
Latency
Figure 6: The CDF of path latency distributions for the Plain, PNS, PRS and PNS+PRS versions of
XOR (left) and Ring (right) routing geometries. In addition, the CDF for the underlying Internet latency
distribution is plotted for comparison. On the right graph the PNS+PRS curve lies on top of the PNS curve,
so it isn’t directly visible. All algorithms used 1 sequential neighbor and are computed using a real-world
latency distribution (marked VA in Figure 4).
F
D
C
100
90
80
70
60
50
40
30
20
10
0
F
D
C
100
90
80
70
60
50
40
30
20
10
0
Plain Ring (1 seq. neighbor)
Plain Ring (16 seq. neighbor)
PRS Ring (1 seq. neighbor)
PRS Ring (16 seq. neighbor)
PNS Ring (1 seq. neighbor)
PNS Ring (16 seq. neighbor)
0
400
800
1200
1600
2000
Latency
Plain Ring
PNS(16) Ring
PRS Ring
PNS(16)+PRS Ring
0
400
800
Latency (msec)
1200
1600
2000
Figure 7: Left: The CDF of path latency distributions for the Plain, PNS(16), PRS and PNS(16)+PRS ver-
sions of Ring. These algorithms used 16 sequential neighbors. Right: The CDF of path latency distributions
for the Plain, PRS and PNS versions of the Ring using 1 or 16 sequential neighbors as marked in the titles
of the curves. These are computed using a real-world latency distribution (marked VA in Figure4).
Geometry No Proximity PNS PRS
11
9
9
9
10
N/A
N/A
9
XOR
Ring
Tree
Hypercube
9
9
10
9
Table 3: These 90th percentile hopcounts for the dif-
ferent DHTs show that the hopcounts do not change
signiﬁcantly when using various proximity methods.
The network used had 16384 nodes.
Our results below are obtained over a 16,384 node network.
The 90th percentile hopcounts for the diﬀerent geometries
when using various proximity methods are summarized in
Table 3 to conﬁrm that the gains in path latency reported
below do not come at a signiﬁcant cost for the path hop-
counts.
4.3 Performance Results
For the rest of this section, we address three questions.
Hybrid geometry could be extended to accommodate PRS.
We don’t pursue that extension here.
Question #1: Which is more eﬀective, PNS or PRS?
Both methods have been proposed in the literature, but their
eﬀectiveness has never been compared. To hold ﬁxed the
eﬀect of the underlying geometry, we compare the two ap-
proaches in the two geometries that can accommodate both:
XOR and Ring. Figure 6 shows results for the Plain, PNS,
PRS, and PNS+PRS versions of the XOR and Ring algo-
rithms. In both cases, the PRS version shows a signiﬁcant
improvement over the Plain version, but far more improve-
ment is realized by the PNS version.
In addition, adding
PRS to PNS gives only a small improvement over the PNS
alone.
To understand why PNS is better than PRS, consider a
node in a densely packed Ring geometry trying to route to
a identiﬁer that is at a distance between [2i, 2i+1] from it-
self. With PNS the node would deterministically pick its ith
neighbor, but that neighbor is selected from any of the 2i
nodes with identiﬁers between [2i, 2i+1]. In contrast, PRS
can choose from any of its ﬁrst i neighbors, but each such
neighbor is deterministically chosen. Thus, PNS chooses
among 2i options while PRS choses among i options, result-
ing in improved performance for PNS.
These results reported above are for “ideal” PNS. To see
whether the results change when only sampling a small sub-
set, we compare the various design options when K = 16,
where K is the sample size. The left graph of Figure 7 shows
that the results are similar in this case, with PNS(16) per-
forming signiﬁcantly better than PRS, although the perfor-
mance improvement of PNS(16)+PRS over PNS(16) alone
is somewhat more than the performance improvement of
PNS+PRS over PNS.
To see the impact of adding sequential neighbors on the
results, we compare the performance of the Plain, PNS and
PRS versions of the Ring after adding 16 sequential neigh-
bors in the right graph of Figure 7. While the improvements
are noticeable for the Plain and the PRS versions, they are
not large enough to aﬀect the comparative results in a sig-
niﬁcant way.
Until now our results used the latency distribution seen by
a node in Virginia, on the east coast of the USA (marked VA
in Figure 4). This distribution, while similar to those seen
from the west coast of the USA and Europe (marked CA
and NL), is considerably diﬀerent from that seen from the
Japan (marked JP). To test the consistency of our results
across two very diﬀerent latency distributions, we compute
the performance of the proximity methods over XOR geome-
try using the JP latency distribution and show the results in
Figure 8. Comparing this graph with the left graph of Figure
6, we notice that the relative performance of the proximity
methods are very similar, with PNS still outperforming PRS
by a wide margin, although the absolute performance diﬀers
markedly between the two latency distributions.13
F
D
C
100
80
60
40
20
0
0
Plain XOR (JP)
PNS XOR (JP)
PRS XOR (JP)
PNS+PRS XOR (JP)
Internet (JP)
800
1600
2400
3200
4000
Latency (msec)
Figure 8: The CDF of path latency distributions
for the Plain, PNS, PRS, PNS+PRS versions of the
XOR routing geometry. These algorithms used 1 se-
quential neighbor and are computed using the real-
world latency distribution marked JP in Figure 4.
To conclude, when considering path latency, it is impor-
tant that the geometry accommodate PNS; accommodating
PRS, at least for the sake of path latency, does not appear
to be important.
Question #2: Does the underlying geometry matter,
other than determining whether PNS and/or PRS can be
used? A geometry’s ﬂexibility determines whether it can
13Though for lack of space we don’t present performance re-
sults for GT-ITM latency distributions, we note here that
the results are somewhat diﬀerent than what we observed
for more realistic latency distributions. Speciﬁcally, the per-
formance gap between PRS and the Plain is much smaller
and the performance gap between PNS and PNS(16) is much
larger in the GT-ITM case than for the real-world latency
distributions. Thus, we urge caution when using GT-ITM
topologies to evaluate proximity methods.
F
D
C
100
90
80
70
60
50
40
30
20
10
0
PNS+PRS Ring
PNS+PRS XOR
PNS Ring
PNS Tree
PRS Ring
PRS Hypercube
0
400
800
1200
1600
2000
Latency
Figure 9: The CDF of path latency distributions
for PNS+PRS Ring, PNS+PRS XOR, PNS Ring,
PNS Tree, PRS Ring, PRS Hypercube. These are
computed using a real-world latency distribution
(marked VA in Figure4). The PNS+PRS Ring lies
on top of the PNS curve, so it is not directly visible.
These algorithms used 1 sequential neighbor.
Routing
Algorithm
Internet
XOR
PNS XOR
PRS XOR
PNS+PRS XOR
Median
VA Median
JP Median
Hopcount
Latency
Latency
1
7
7
8
7
102
1036
139
770
136
206
1725
385
1557
381
Table 4: Comparing the median latency and hop-
counts of XOR based overlay paths and the under-
lying IP paths for two extremely diﬀerent latency
distributions (marked VA and JP in Figure 4). The
latencies are in milliseconds.
accommodate PNS and/or PRS, but here we ask whether ge-
ometry aﬀects path latency beyond this distinction. Figure
9 compares the performance of three pairs: PNS+PRS Ring
versus PNS+PRS XOR, PNS Ring versus PNS Tree (which
cannot implement PRS), and PRS Ring versus PRS Hyper-
cube (which cannot implement PNS). The performance of
each pair of designs is very close, suggesting that what really
matters is the ability to implement PNS and PRS, not the
other factors in geometry.
Question #3: What is the absolute performance of these
proximity methods? The results so far compare the relative
performance of proximity methods, but do not address the
question of how well they do in an absolute sense. While
this question has been addressed in papers proposing indi-
vidual proximity designs, we revisit it here because our tests
use a more realistic latency distribution and therefore may
be more indicative of real-world performance. As the abso-
lute performance depends on the exact latency distribution
used, in Table 4 we show the median latencies of the various
designs for two very diﬀerent latency distributions. As can
be seen, the very best options (PNS and PNS+PRS) fare
quite well for either distribution. While plain XOR has a
ratio of roughly 10 between the latencies, PNS+PRS XOR
has a ratio less than 2. Thus, the available proximity meth-
ods can reduce the end-to-end latencies in the overlay to a
very small multiple of the underlying Internet path latencies
(which is consistent with the ﬁndings in [2, 8]).
To summarize our discussion in this section, we ﬁnd that
while both neighbor selection (PNS) and route selection
(PRS) can help in ﬁnding shorter paths, PNS yields sig-
niﬁcantly better paths than PRS. Further, the eﬀectiveness
of these proximity methods does not depend on the choice
of the routing geometry. Thus, geometries such as Tree,
XOR and Ring that support PNS perform considerably bet-
ter than geometries such as Hypercube that support only
PRS. While XOR and Ring can accommodate both PNS
and PRS (unlike Tree), the additional beneﬁt of supporting
PRS over PNS appears to be quite limited. However, the
ability to accommodate both may be an advantage while
using PNS(K), a limited but more practical version of PNS.
5. LOCAL CONVERGENCE
Local convergence is another issue that arises when con-
sidering the eﬀects of the underlying network latencies. Lo-
cal convergence, ﬁrst identiﬁed in [2], is the property that
two messages, sent from two nearby (in terms of latency)
nodes addressed to the same location, converge at a node
near the two sources. This property leads to low latencies
and/or bandwidth savings in several diﬀerent uses of DHTs,
including the following three:
Overlay multicast: When setting up a multicast tree [1,
20, 29], one cares about both the lengths of each in-
dividual path (considered in the previous section) and
the overall eﬃciency of the entire multicast tree. This
latter quantity is improved if DHT routing has the lo-
cal convergence property mentioned above.
Caching: One way to speed access is to cache pointers
along the retrieval path as described in [3, 4]. If the
DHT has good local convergence, then any nearby
node requesting the same content can make use of
these cached content.
Server selection: Similar to caching above, and as explained
in [16, 28], clients can more easily ﬁnd nearby servers
if pointers to them are stored along the path to the
“root.”
In this section we seek to understand the impact of ge-
ometry on local convergence. In general, local convergence