O−−−−−−→
−−−−−−−−−−−→
OUT([],z)
C([],[OUT1([],z)])
{InEnv((m, m))}
{OutEnv(true)} .
Note that the ﬁrst transition has a diﬀerent recipe as we also
must instantiate y, but the output replaces this recipe with a
new variable z, which is the same on both sides. This hides
from the environment how the term was constructed. How-
ever, in SB∪IF ∪Env we also have the following transitions:
∅ −−−−−−−−−−−→
B([{m/x,n/y}],[])
O−−−−−−→
OUT([],z)
{InEnv((m, n))} .
{OutSys((m, n))}
Note that the ﬁrst transition has a diﬀerent recipe as we
instantiate y diﬀerently, but again the output replaces this
recipe with a new variable z, which is the same on both sides.
3.1 Deﬁnition
We formalize observational equivalence in the context of
labeled transition systems (LTS) induced by two multiset
rewrite systems. Since the environment does not know with
which system it is interacting, each transition caused by an
environment rule must be matched by the same rule oper-
ating on facts with the same recipes, ensuring that the en-
vironment makes the same choices in both cases. Otherwise
the environment could trivially distinguish any two systems
by choosing transitions depending on which system it inter-
acts with. Similarly, all interface rules must be matched by
themselves, ensuring that an input can only be matched by
an input, and an output only by an output.
In contrast to the above, transitions inside one system can
be matched by any number of transitions in the other system
since the environment cannot observe these steps. This is
reﬂected by the OUT rule, where the recipe of a system
output is removed, ensuring that the environment does not
know how the term was constructed. Note that this still
allows the environment to distinguish both systems if their
behavior on a given input diﬀers, or if they output terms that
can be distinguished by the environment. An example of the
latter is when a transition in the environment requiring the
equality of two terms with the same recipes (i.e., deduced
using the same steps from the same outputs) is possible in
one system, but not in the other.
Definition 1
(Observational Equivalence ≈).
Two sets of multiset rewrite rules SA and SB are observa-
tional equivalent with respect to an environment given by
a set of multiset rewrite rules Env, written SA ≈Env SB,
if, given the LTS deﬁned by the rules SA ∪ IF ∪ Env and
SB ∪ IF ∪ Env, there is a relation R containing the initial
states, such that for all states (SA,SB) ∈ R we have:
1. If SA
r
r
l−→
l(cid:48)−→
A,S(cid:48)
B) ∈ R.
A and r is the recipe of a rule in Env ∪ IF,
S(cid:48)
B ∈ G(cid:93) such that
then there exists actions l(cid:48) ∈ F (cid:93) and S(cid:48)
SB
B, and (S(cid:48)
S(cid:48)
S(cid:48)
A and r is the recipe of a rule in SA, then
there exist recipes r1, . . . , rn ∈ ρ of rules in SB, actions
l1−→
l1, . . . , ln ∈ F (cid:93), n ≥ 0, and S(cid:48)
B) ∈ R.
B ∈ G(cid:93) such that SB
B, and (S(cid:48)
S(cid:48)
A,S(cid:48)
ln−→
l−→
. . .
r1
r
2. If SA
rn
Additionally, we have the same in the other direction:
3. If SB
r
r
l−→
l(cid:48)−→
A,S(cid:48)
B) ∈ R.
B and r is the recipe of a rule in Env ∪ IF,
S(cid:48)
A ∈ G(cid:93) such that
then there exists actions l(cid:48) ∈ F (cid:93) and S(cid:48)
SA
A, and (S(cid:48)
S(cid:48)
S(cid:48)
B and r is the recipe of a rule in SB, then
there exist recipes r1, . . . , rn ∈ ρ of rules in SA, actions
l1, . . . , ln ∈ F (cid:93), n ≥ 0, and S(cid:48)
l1−→
B) ∈ R.
A ∈ G(cid:93) such that SA
S(cid:48)
A, and (S(cid:48)
A,S(cid:48)
ln−→
l−→
. . .
r1
r
4. If SB
rn
3.2 Examples
We now illustrate this deﬁnition on several examples.
Example 5
environment from Example 4. In SB ∪ IF ∪ Env we have
(Pairs). Consider the two systems and the
∅ −−−−−−−−−−−→
B([{m/x,n/y}],[])
O−−−−−−→
OUT([],z)
{InEnv((m, n))} .
{OutSys((m, n))}
The only way for SA ∪ IF ∪ Env to simulate this would be
∅ −−−−−−−−→
A([{m/x}],[])
O−−−−−−→
OUT([],z)
{OutSys((m, m))}
{InEnv((m, m))} .
and potentially further transitions using rule A, adding more
OutSys((m, m)) facts to the state. Note that there can only
be one InEnv((m, m))-fact in the resulting state as the out-
put transition can only be used once. This implies that for
the resulting state S we have ({S},{InEnv((m, n))}) ∈ R.
However we have
S −−−−−−−−−−−→
{OutEnv(true)},
C([],[OUT1([],z)])
but in state {InEnv((m, n))} no transition with the same
recipe is possible, hence SA (cid:54)≈Env SB.
This simple example illustrates that if the environment can
do something on one side, but not on the other, then the two
sides are distinguishable and therefore not observationally
equivalent. The next example illustrates the importance of
recipes in our deﬁnition of observational equivalence.
Example 6. Consider the two systems from Example 4,
but a diﬀerent environment Env(cid:48):
Env(cid:48) = { Ef st : InEnv((x, y))−−[]→M(x),
Esnd : InEnv((x, y))−−[]→M(y),
Ecmp : M(x), M(x)−−[]→OutEnv(true) },
where M(·) is a persistent fact. Intuitively we would expect
that this environment can distinguish SA and SB, as it can
compare the ﬁrst and second value of the tuple. We now try
to apply the same reasoning as in Example 5. Consider
{OutSys((m, n))}
∅ −−−−−−−−−−−→
B([{m/x,n/y}],[])
O−−−−−−→
−−−−−−−−−−−−−→
−−−−−−−−−−−−−→
Ef st([],[OUT1([],z)])
{InEnv((m, n))}
{M(m)}
{M(m), M(n)} .
OUT([],z)
Esnd([],[OUT1([],z)])
In SA ∪ IF ∪ Env(cid:48) this can be simulated as follows:
{OutSys((m, m))}
∅ −−−−−−−−→
A([{m/x}],[])
O−−−−−−→
−−−−−−−−−−−−−→
−−−−−−−−−−−−−→
Ef st([],[OUT1([],z)])
{InEnv((m, m))}
{M(m)}
{M(m), M(m)} .
OUT([],z)
Esnd([],[OUT1([],z)])
Moreover, we can compare the ﬁrst and second value of the
tuple with
{M(m), M(m)} −→
r1
{M(m), M(m), OutEnv(true)} ,
where
r1 = Ecmp([], [Ef st,1([], [OUT1([], z)]),
Esnd,1([], [OUT1([], z)])]) .
This transition cannot be matched by SB ∪ IF ∪ Env(cid:48). Note
however that the following transition is possible for SB∪IF∪
Env(cid:48):
{M(m), M(n)} −→
r2
{M(m), M(n), OutEnv(true)} ,
where
r2 = Ecmp([], [Ef st,1([], [OUT1([], z)]),
Ef st,1([], [OUT1([], z)])]) .
The only diﬀerence between the two transition is the diﬀerent
recipe: instead of comparing the ﬁrst and the second value
of the tuple, we simply compared the ﬁrst value to itself, and
therefore they are not observational equivalent. This exam-
ple shows that with a diﬀerent environment the two systems
are still distinguishable.
The next example shows how two diﬀerent systems can be-
have in an equivalent way, and how equations can be used
to model the equivalence of terms.
Example 7
(Coins). Consider a vending machine, in
particular the part that returns coins as change when the
money inserted was not fully spent. For simplicity we con-
sider only 1 e and 2 e coins, represented by the functions
one and two, and a constant null representing no coins.
Now suppose we want to return 3 e. The preferred solution
would be to return two coins: 1 e and 2 e. Yet returning
three 1 e coins is also possible and, moreover, the order of
the coins could be permuted.
Consider again two systems. The ﬁrst system speciﬁes the
optimal behavior of returning just two coins:
SA = { A : −−[]→OutSys(two(one(null))) }.
The second system, representing the actual implementation,
may also return other combinations of coins. It is given by
SB = { B1 : −−[]→OutSys(two(one(null))),
B2 : −−[]→OutSys(one(one(one(null)))),
B3 : −−[]→OutSys(one(two(null)))
} .
We now deﬁne an environment that checks whether the im-
plementation is correct with respect to the speciﬁcation.
Namely, the vending machine returns the same amount of
money using the same coins returned in the same order:
Env = { Enull : −−[]→M(null),
Eone : M(x)−−[]→M(one(x)),
Etwo : M(x)−−[]→M(two(x)),
Echeck : M(x), InEnv(x)−−[]→OutEnv(true) } .
The environment’s test works as follows. Using the ﬁrst
three rules, the environment can build any amount of money
from the two kinds of coins. Then, using the Echeck rule,
this can be compared to the system’s output. Hence, for
SA ≈Env SB to hold, both systems must output the same
amount of money using the same coins in the same order,
otherwise Echeck is applicable only on one side. We have
SA (cid:54)≈Env SB as the amount of money returned is the same,
but the coins may diﬀer: SA can only return two coins,
while SB could also return three. More precisely, the en-
vironment could build the fact M(two(one(null))), and try
to apply the rule Echeck. This would work for the system
SA provided an output was made, but not necessarily for
the system SB as the output could, for example, have been
one(one(one(null))).
Suppose that we add the equation two(x) = one(one(x)),
stating that a 2 e coin is equivalent to two 1 e coins. Then
SA ≈Env SB as the amount of money output by both ma-
chines is the same and two(one(null)) = one(two(null)) =
one(one(one(null))). Hence the environment successfully
checks whether both systems output the same amount of mo-
ney, independent of the coins used.
Naturally we can also have other environments. Assuming
no equations, consider the environment
(cid:48)
= {Ecomp : InEnv(x), InEnv(x)−−[]→OutEnv(true)} .
Env
This environment compares whether two system outputs are
equal, which is not necessarily the case for SB, but holds for
SA.
These examples illustrate the generality of our deﬁnition of
observational equivalence: as it is parametrized by the en-
vironment, it can be instantiated in diﬀerent ways depend-
ing on the application context. In protocol veriﬁcation, this
could for example be used to model diﬀerent types of attack-
ers. Note also that in other process algebras used for proto-
col veriﬁcation, such as the applied π-calculus, the environ-
ment is typically implicitly deﬁned and cannot be changed.
4. PROVING OBSERVATIONAL
EQUIVALENCE
To automate proofs of observational equivalence we intro-
duce the notion of a bi-system.
4.1 Bi-Systems
A bi-system is a multiset rewrite system where terms may
be built using the special operator diﬀ[·,·], indicating two
possible instantiations corresponding to the left and right
subterm. This use of diﬀ operators was ﬁrst introduced in
ProVerif [7] where bi-processes are handled in a similar
fashion. Using diﬀ-terms, one can specify two systems (left
and right) with almost identical rules by one multiset rewrit-
ing system, where the only diﬀerence is how the diﬀ-terms
are instantiated. This simpliﬁes the search for the simulation
relation, as we can simply assume that each rule simulates
itself, modulo the diﬀ-terms. Nevertheless, this notion is
expressive enough to specify many relevant security proper-
ties. These include all the examples mentioned in the intro-
duction: our desired real–or–random test, privacy-related
properties of voting and auctions, indistinguishability prop-
erties such as ciphertext indistinguishability, and authenti-
cated key-exchange security. Moreover, as we show below,
all examples from Section 3 can also be expressed this way.
For S a bi-system, we can obtain its left instance L(S)
by replacing each term diﬀ[M, N ] in S with M . Similarly,
we can obtain S’s right instance R(S) by replacing each
term diﬀ[M, N ] with N . These are both standard multiset
rewrite systems. The goal of the algorithm we give is to
prove that given a bi-system S, L(S) and R(S) are observa-
tionally equivalent.
We now revisit the Examples 3 and 7, starting with the
tuple example.
Example 8
(Tuples with diff). Using diﬀ-terms we
can deﬁne a single bi-system S that combines SA and SB as
S = { AB : −−[]→OutSys((x, diﬀ[x, y])) },
where L(S) = SA and R(S) = SB, as in Example 3.
Example 9