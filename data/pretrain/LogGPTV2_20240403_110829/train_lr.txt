option to generate a flat profile with counts and ticks:
.pp
.in +4n
.ex
$ \fbsprof \-p libdemo.so.1 $ld_profile_output/libdemo.so.1.profile\fp
flat profile:
each sample counts as 0.01 seconds.
  %   cumulative   self              self     total
 time   seconds   seconds    calls  us/call  us/call  name
 60.00      0.06     0.06      100   600.00           consumecpu1
 40.00      0.10     0.04     1000    40.00           consumecpu2
  0.00      0.10     0.00        1     0.00           x1
  0.00      0.10     0.00        1     0.00           x2
.ee
.in
.pp
the
.b sprof \-q
option generates a call graph:
.pp
.in +4n
.ex
$ \fbsprof \-q libdemo.so.1 $ld_profile_output/libdemo.so.1.profile\fp
index % time    self  children    called     name
                0.00    0.00      100/100         x1 [1]
[0]    100.0    0.00    0.00      100         consumecpu1 [0]
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
                0.00    0.00        1/1           
[1]      0.0    0.00    0.00        1         x1 [1]
                0.00    0.00      100/100         consumecpu1 [0]
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
                0.00    0.00     1000/1000        x2 [3]
[2]      0.0    0.00    0.00     1000         consumecpu2 [2]
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
                0.00    0.00        1/1           
[3]      0.0    0.00    0.00        1         x2 [3]
                0.00    0.00     1000/1000        consumecpu2 [2]
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
.ee
.in
.pp
above and below, the "" strings represent identifiers that
are outside of the profiled object (in this example, these are instances of
.ir main() ).
.pp
the
.b sprof \-c
option generates a list of call pairs and the number of their occurrences:
.pp
.in +4n
.ex
$ \fbsprof \-c libdemo.so.1 $ld_profile_output/libdemo.so.1.profile\fp
                  x1                                 1
x1                         consumecpu1                      100
                  x2                                 1
x2                         consumecpu2                     1000
.ee
.in
.sh see also
.br gprof (1),
.br ldd (1),
.br ld.so (8)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.\" copyright (c) andreas gruenbacher, february 2001
.\" copyright (c) silicon graphics inc, september 2001
.\"
.\" %%%license_start(gplv2+_doc_full)
.\" this is free documentation; you can redistribute it and/or
.\" modify it under the terms of the gnu general public license as
.\" published by the free software foundation; either version 2 of
.\" the license, or (at your option) any later version.
.\"
.\" the gnu general public license's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" this manual is distributed in the hope that it will be useful,
.\" but without any warranty; without even the implied warranty of
.\" merchantability or fitness for a particular purpose.  see the
.\" gnu general public license for more details.
.\"
.\" you should have received a copy of the gnu general public
.\" license along with this manual; if not, see
.\" .
.\" %%%license_end
.\"
.th setxattr 2 2021-03-22 "linux" "linux programmer's manual"
.sh name
setxattr, lsetxattr, fsetxattr \- set an extended attribute value
.sh synopsis
.fam c
.nf
.b #include 
.pp
.bi "int setxattr(const char\ *" path ", const char\ *" name ,
.bi "              const void\ *" value ", size_t " size ", int " flags );
.bi "int lsetxattr(const char\ *" path ", const char\ *" name ,
.bi "              const void\ *" value ", size_t " size ", int " flags );
.bi "int fsetxattr(int " fd ", const char\ *" name ,
.bi "              const void\ *" value ", size_t " size ", int " flags );
.fi
.fam t
.sh description
extended attributes are
.ir name :\c
.i value
pairs associated with inodes (files, directories, symbolic links, etc.).
they are extensions to the normal attributes which are associated
with all inodes in the system (i.e., the
.br stat (2)
data).
a complete overview of extended attributes concepts can be found in
.br xattr (7).
.pp
.br setxattr ()
sets the
.i value
of the extended attribute identified by
.i name
and associated with the given
.i path
in the filesystem.
the
.i size
argument specifies the size (in bytes) of
.ir value ;
a zero-length value is permitted.
.pp
.br lsetxattr ()
is identical to
.br setxattr (),
except in the case of a symbolic link, where the extended attribute is
set on the link itself, not the file that it refers to.
.pp
.br fsetxattr ()
is identical to
.br setxattr (),
only the extended attribute is set on the open file referred to by
.i fd
(as returned by
.br open (2))
in place of
.ir path .
.pp
an extended attribute name is a null-terminated string.
the
.i name
includes a namespace prefix; there may be several, disjoint
namespaces associated with an individual inode.
the
.i value
of an extended attribute is a chunk of arbitrary textual or
binary data of specified length.
.pp
by default
(i.e.,
.ir flags
is zero),
the extended attribute will be created if it does not exist,
or the value will be replaced if the attribute already exists.
to modify these semantics, one of the following values can be specified in
.ir flags :
.tp
.b xattr_create
perform a pure create, which fails if the named attribute exists already.
.tp
.b xattr_replace
perform a pure replace operation,
which fails if the named attribute does not already exist.
.sh return value
on success, zero is returned.
on failure, \-1 is returned and
.i errno
is set to indicate the error.
.sh errors
.tp
.b edquot
disk quota limits meant that
there is insufficient space remaining to store the extended attribute.
.tp
.b eexist
.b xattr_create
was specified, and the attribute exists already.
.tp
.b enodata
.b xattr_replace
was specified, and the attribute does not exist.
.\" .rb ( enoattr
.\" is defined to be a synonym for
.\" .br enodata
.\" in
.\" .ir  .)
.tp
.b enospc
there is insufficient space remaining to store the extended attribute.
.tp
.b enotsup
the namespace prefix of
.i name
is not valid.
.tp
.b enotsup
extended attributes are not supported by the filesystem, or are disabled,
.tp
.b eperm
the file is marked immutable or append-only.
(see
.br ioctl_iflags (2).)
.pp
in addition, the errors documented in
.br stat (2)
can also occur.
.tp
.b erange
the size of
.i name
or
.i value
exceeds a filesystem-specific limit.
.sh versions
these system calls have been available on linux since kernel 2.4;
glibc support is provided since version 2.3.
.sh conforming to
these system calls are linux-specific.
.\" .sh authors
.\" andreas gruenbacher,
.\" .ri 
.\" and the sgi xfs development team,
.\" .ri .
.\" please send any bug reports or comments to these addresses.
.sh see also
.br getfattr (1),
.br setfattr (1),
.br getxattr (2),
.br listxattr (2),
.br open (2),
.br removexattr (2),
.br stat (2),
.br symlink (7),
.br xattr (7)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.so man3/makedev.3
.so man7/iso_8859-14.7
.so man2/poll.2
.\" copyright 2004 andries brouwer .
.\" and copyright 2008, linux foundation, written by michael kerrisk
.\"     
.\"
.\" %%%license_start(verbatim)
.\" permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" since the linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  the author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  the author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%license_end
.\"
.th scalbln 3 2021-03-22 "" "linux programmer's manual"
.sh name
scalbn, scalbnf, scalbnl, scalbln, scalblnf, scalblnl \-
multiply floating-point number by integral power of radix
.sh synopsis
.nf
.b #include 
.pp
.bi "double scalbln(double " x ", long " exp );
.bi "float scalblnf(float " x ", long " exp );
.bi "long double scalblnl(long double " x ", long " exp );
.pp
.bi "double scalbn(double " x ", int " exp );
.bi "float scalbnf(float " x ", int " exp );
.bi "long double scalbnl(long double " x ", int " exp );
.fi
.pp
link with \fi\-lm\fp.
.pp
.rs -4
feature test macro requirements for glibc (see
.br feature_test_macros (7)):
.re
.pp
.br scalbln (),
.br scalblnf (),
.br scalblnl ():
.nf
    _isoc99_source || _posix_c_source >= 200112l
        || /* since glibc 2.19: */ _default_source
.fi
.pp
.br scalbn (),
.br scalbnf (),
.br scalbnl ():
.nf
    _isoc99_source || _posix_c_source >= 200112l
        || /* since glibc 2.19: */ _default_source
        || /* glibc  .
.\" not in /usr/include but in a gcc lib
.sh return value
on success, these functions return
.ir x
*
.b flt_radix
**
.ir exp .
.pp
if
.i x
is a nan, a nan is returned.
.pp
if
.i x
is positive infinity (negative infinity),
positive infinity (negative infinity) is returned.
.pp
if
.i x
is +0 (\-0), +0 (\-0) is returned.
.pp
if the result overflows,
a range error occurs,
and the functions return
.br huge_val ,
.br huge_valf ,
or
.br huge_vall ,
respectively, with a sign the same as
.ir x .
.pp
if the result underflows,
a range error occurs,
and the functions return zero, with a sign the same as
.ir x .
.sh errors
see
.br math_error (7)
for information on how to determine whether an error has occurred
when calling these functions.
.pp
the following errors can occur:
.tp
range error, overflow
.\" .i errno
.\" is set to
.\" .br erange .
an overflow floating-point exception
.rb ( fe_overflow )
is raised.
.tp
range error, underflow
.i errno
is set to
.br erange .
an underflow floating-point exception
.rb ( fe_underflow )
is raised.
.sh versions
these functions first appeared in glibc in version 2.1.
.sh attributes
for an explanation of the terms used in this section, see
.br attributes (7).
.ad l
.nh
.ts
allbox;
lbx lb lb
l l l.
interface	attribute	value
t{
.br scalbn (),
.br scalbnf (),
.br scalbnl (),
.br scalbln (),
.br scalblnf (),
.br scalblnl ()
t}	thread safety	mt-safe
.te
.hy
.ad
.sp 1
.sh conforming to
c99, posix.1-2001, posix.1-2008.
.sh notes
these functions differ from the obsolete functions described in
.br scalb (3)
in the type of their second argument.
the functions described on this page have a second argument
of an integral type, while those in
.br scalb (3)
have a second argument of type
.ir double .
.pp
if
.b flt_radix
equals 2 (which is usual), then
.br scalbn ()
is equivalent to
.br ldexp (3).
.sh bugs
before glibc 2.20,
.\" http://sources.redhat.com/bugzilla/show_bug.cgi?id=6803
these functions did not set
.i errno
for range errors.
.sh see also
.br ldexp (3),
.br scalb (3)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.\" written by oron peled .
.\"
.\" %%%license_start(gpl_noversion_oneline)
.\" may be distributed subject to the gpl.
.\" %%%license_end
.\"
.\" i tried to be as much generic in the description as possible:
.\" - general boot sequence is applicable to almost any
.\" os/machine (dos/pc, linux/pc, solaris/sparc, cms/s390)
.\" - kernel and init(1) is applicable to almost any unix/linux
.\" - boot scripts are applicable to sysv-r4 based unix/linux
.\"
.\" modified 2004-11-03 patch from martin schulze 
.\"
.th boot 7 2015-03-11 "linux" "linux programmer's manual"
.sh name
boot \- system bootup process based on unix system v release 4
.sh description
the \fbbootup process\fr (or "\fbboot sequence\fr") varies in details
among systems, but can be roughly divided into phases controlled by
the following components:
.ip 1. 4
hardware
.ip 2. 4
operating system (os) loader
.ip 3. 4
kernel
.ip 4. 4
root user-space process (\fiinit\fr and \fiinittab\fr)
.ip 5. 4
boot scripts
.pp
each of these is described below in more detail.
.ss hardware
after power-on or hard reset, control is given
to a program stored in read-only memory (normally
prom); for historical reasons involving the personal
computer, this program is often called "the \fbbios\fr".
.pp
this program normally performs a basic self-test of the
machine and accesses nonvolatile memory to read
further parameters.
this memory in the pc is
battery-backed cmos memory, so most people
refer to it as "the \fbcmos\fr"; outside
of the pc world, it is usually called "the \fbnvram\fr"
(nonvolatile ram).
.pp
the parameters stored in the nvram vary among
systems, but as a minimum, they should specify
which device can supply an os loader, or at least which
devices may be probed for one; such a device is known as "the
\fbboot device\fr".
the hardware boot stage loads the os loader from a fixed position on
the boot device, and then transfers control to it.
.tp
note:
the device from which the os loader is read may be attached via a network, in which
case the details of booting are further specified by protocols such as
dhcp, tftp, pxe, etherboot, etc.
.ss os loader
the main job of the os loader is to locate the kernel
on some device, load it, and run it.
most os loaders allow
interactive use, in order to enable specification of an alternative
kernel (maybe a backup in case the one last compiled
isn't functioning) and to pass optional parameters
to the kernel.
.pp
in a traditional pc, the os loader is located in the initial 512-byte block
of the boot device; this block is known as "the \fbmbr\fr"
(master boot record).
.pp
in most systems, the os loader is very
limited due to various constraints.
even on non-pc systems,
there are some limitations on the size and complexity
of this loader, but the size limitation of the pc mbr
(512 bytes, including the partition table) makes it
almost impossible to squeeze much functionality into it.
.pp
therefore, most systems split the role of loading the os between