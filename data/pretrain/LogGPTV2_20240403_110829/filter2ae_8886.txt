# 【技术分享】绕过Windows 10的CFG机制（第二部分）

## 译文声明
本文为翻译文章，原文来源：[improsec.com](http://improsec.com)。译文仅供参考，具体内容及含义以原文为准。

**翻译者**: [myswsun](http://bobao.360.cn/member/contribute?uid=2775084127)  
**预估稿费**: 200 RMB  
**投稿方式**: 发送邮件至 [linwei#360.cn](mailto:linwei#360.cn) 或登录 [网页版](http://bobao.360.cn/contribute/index) 在线投稿

**相关链接**:
- [绕过Windows 10的CFG机制（第一部分）](http://bobao.360.cn/learning/detail/3425.html)

---

### 0x00 前言
本文是关于绕过Windows 10的CFG机制系列文章的第二篇。该研究是在2016年7月完成的，但直到现在才发布。这里讨论的技术基于Theori发布的IE漏洞PoC，并展示了一种新的绕过CFG的方法，该方法仅在IE中有效，在Edge中无效。假设读者已经阅读了前一篇文章，因此不再赘述CFG的具体细节，直接进入任意原始读写的部分。

---

### 0x01 寻找另一种绕过CFG的方法
在上一篇文章中，我泄露了一些寄存器值，包括一个栈指针，从而可以覆盖返回地址。另一种常见的绕过CFG的方法是使用ROP链，其中第一个配件来自未使用CFG编译的DLL模块。这种方法之所以有效，是因为CFG验证位图与模块相对应，而未使用CFG编译的模块允许执行任何地址。问题在于，所有加载到IE和Edge中的模块都使用了CFG编译。如果某些插件或第三方应用程序被安装，那么可能会有未使用CFG编译的模块加载到进程中，成为攻击者的目标。我想找到一种不依赖于第三方模块的方法。经过调查发现，并非所有位于`C:\Windows\System32`下的原生模块都使用了CFG编译。为了找出这些未使用CFG编译的模块，我编写了以下Python脚本：

```python
# 脚本内容略
```

在我的Windows 10 1511系统上运行后，找到了145个未使用CFG编译的DLL，可用于构建ROP链。最终选择了`mfc40.dll`作为目标模块。

---

### 0x02 加载DLL
找到一个包含有用配件且未使用CFG编译的原生DLL后，我们需要解决如何将其加载到浏览器进程中。可以通过调用`kernelbase!LoadLibraryA` API来实现，我们已确认这是CFG允许的操作。以下是验证位图：

通过跟踪`ntdll!LdrpValidateUserCallTarget`算法，可以看到偏移量4处的位为1，表示该API允许非直接调用。接下来需要定位这个API，这可能需要使用之前泄露的指向`kernelbase.dll`的指针，然后在DLL中找到该函数。具体步骤如下：
1. 扫描`jscript9`模块的虚表地址并计算哈希。
2. 使用原始读取功能找到正确的哈希值。
3. 定位`Segment::Initialize`函数，因为它调用了`kernel32!VirtualAllocStub`，进而调用`kernelbase!VirtualAlloc`。
4. 读取指针内容并找到跳转到`kernelbase!VirtualAlloc`的引用。
5. 通过另一个哈希值找到`LoadLibraryA`的地址。
6. 使用`jscript9`的`HasItem`函数调用`LoadLibraryA`，将字符串`C:\Windows\System32\mfc40.dll`写入`TypeArray`缓冲区。

这样就可以在进程中加载DLL了。

---

### 0x03 与DLL交互
确认未使用CFG编译的DLL已被加载到进程空间后，我们可以使用栈转向技术绕过CFG。但是，我们需要知道`mfc40.dll`的基址。由于`HasItem`函数只能返回布尔值，无法直接获取`LoadLibraryA`返回的模块地址，因此需要其他方法来泄漏模块地址。一种方法是通过PEB（Process Environment Block），因为它包含了一个指向所有已加载模块列表的指针。

问题转化为查找PEB地址。我选择通过`IsBadCodePtr` API来实现，该API接受一个内存地址作为参数，并返回布尔值以确定该地址是否已分配。通过搜索进程地址空间，测试每个内存页是否属于TEB（Thread Environment Block），进而找到PEB的地址。在Windows 10中，TEB的位置更加随机，可能在`0x100000`和`0x4000000`之间。首先需要找到`kernel32`中的`IsBadCodePtr`地址，然后调用该API进行搜索。

---

### 0x04 找到DLL
为了定位DLL的基址，我们将利用PEB_LDR_DATA结构，该结构位于PEB偏移量0xC处。PEB_LDR_DATA结构包含三个双向链表，分别指向所有已加载的DLL信息。我们使用偏移量0x1C处的链表。遍历链表，直到找到`mfc40.dll`。代码如下：

```c
// 代码内容略
```

通过这种方式，我们可以找到DLL的信息并用于构建ROP链。

---

### 0x05 控制EIP
最后一步是找到合适的ROP小配件，以便执行ROP链并绕过CFG。找到正确的小配件需要一定的技巧，依赖于对EIP的控制。我最终使用了Theori原始PoC中使用的Subarray调用。汇编代码如下：

在虚表偏移量0x188处，有一个或两个参数。如果只指定一个参数，则另一个具有默认值。通过覆盖`Subarray`的地址并设置断点，可以看到EBX和ECX寄存器都包含指向对象的指针。ESP+4和ESP+8位置有两个提供的参数。我找到了以下小配件：

因为栈上的第二个DWORD值受我们控制，我们可以放置栈转向小配件的地址。记住，CFG不保护栈上的地址，我们可以在所有已加载的DLL中找到栈转向小配件。使用`kernelbase`中的以下配件作为栈转向：

因为ECX也指向对象，偏移量0xD8处的值也受我们控制。如果我们放置ROP链，就可以调用`VirtualProtect`。首先需要动态找到这些小配件，可以通过搜索DLL实现。当所有配件找到后，将它们插入正确的偏移量中。运行后可以看到绕过CFG的小配件确实绕过了CFG，并且单步调试显示ROP配件缓冲区为空。

---

### 0x06 总结
很明显，未使用CFG编译的模块是一个威胁。未使用CFG编译的DLL加载到内存中可以用来绕过CFG。微软已经在Edge中注意到了`IsBadCodePtr`函数的问题，因此这种方法不能在Edge中使用。然而，它仍然可以在IE中使用。尽管微软可能会越来越多地重新编译DLL以启用CFG，但第三方DLL仍可能存在遗漏。浏览器插件或安全软件注入到被监控进程中的模块是否使用了CFG编译？

**相关链接**:
- [绕过Windows 10的CFG机制（第一部分）](http://bobao.360.cn/learning/detail/3425.html)