### Data Flow Analysis

The data flow consisted of the following components:

- **5,544 flows (65.6%)**: An image that appeared on most pages of a Java programming language tutorial.
- **2,148 flows (25.4%)**: The image of the research group logo, which was present on many local pages.
- **490 flows (5.8%)**: A single Microsoft PowerPoint presentation.
- **227 flows (2.7%)**: Multiple PowerPoint presentations containing common embedded images.

The remaining 43 flows, accounting for 0.5% of the total, consisted of external binary files accessed by local users. These files had fingerprints that, by random chance, collided with the 23 flagged fingerprints.

### Addressing False Positives

The issue of false positives caused by heavily accessed, locally hosted files can be mitigated by creating a whitelist of fingerprints. This whitelist can be compiled manually or through the use of an automated web crawler. For instance, if we had prepared a whitelist for the 23 fingerprints found in the small number of image files and the single PowerPoint presentation, no false positives would have been reported during the 9-day test period.

### Detection Capabilities

#### Polymorphic Worms

In this section, we analyze the system's ability to detect polymorphic worms. Polymorphism can take two forms:

1. **Encryption-Based Polymorphism**: The attacker uses encryption to generate multiple worm variations by encrypting the payload with different keys. The decryption routine, which is prepended to the payload, becomes the focus of defense systems trying to identify encrypted malware.
2. **Metamorphic Polymorphism**: Techniques that modify the malicious code itself, such as renaming registers, transposing code blocks, and substituting instructions. Both techniques can be combined to disguise the decryption routine of an encrypted worm using metamorphic techniques.

#### Experiment 1: ADMmutate

In our first experiment, we analyzed malicious code disguised by ADMmutate, a well-known polymorphic engine. ADMmutate first encrypts the malicious payload and then prepends a metamorphic decryption routine. We used ADMmutate to generate 100 encrypted instances of a worm, each with a different decryption routine.

Our system could not identify a single fingerprint common to all 100 instances. However, 66 instances shared one fingerprint, and 31 instances shared another. Only 3 instances did not share any common fingerprint. A closer analysis revealed that the structure of the generated encryption routines was identical across all instances. ADMmutate relies heavily on instruction substitution to change the appearance of the decryption routine, leading to different node colorings in the control flow graphs and thus different fingerprints. This experiment highlights the potential negative impact of colored nodes on detection but also demonstrates that the worm would have been detected quickly, as 97 out of 100 instances contained one of only two different fingerprints.

#### Experiment 2: Structural Similarities in Worm Families

Our second experiment aimed to analyze the structural similarities between different members of a worm family. Members of a worm family are not inherently polymorphic, but this experiment provides insight into the structural similarity retained between variations of a specific worm.

We ran the prototype against 342 samples of malware variants from 93 distinct families. Fingerprints were extracted and recorded for each variant, and a pairwise comparison was performed to find common fingerprints within each family. Table 5 summarizes the key results:

| Family     | Variant Tests | Matches | Match Rate |
|------------|---------------|---------|------------|
| FIZZER     | 1             | 1       | 100.00%    |
| FRETHEM    | 1             | 1       | 100.00%    |
| KLEZ       | 6             | 6       | 100.00%    |
| KORGO      | 136           | 9       | 0.07%      |
| LOVGATE    | 300           | 300     | 100.00%    |
| MYWIFE     | 3             | 1       | 0.33%      |
| NIMDA      | 1             | 1       | 100.00%    |
| OPASERV    | 171           | 11      | 0.064%     |
| All        | 1,991         | 338     | 16.97%     |

From these results, it is evident that certain malware variants retain significant structural similarity within their family. For example, all 25 LOVGATE variants share common structural characteristics. However, there are cases where the structural characteristics differ greatly, and manual inspection confirmed that our system correctly identified these differences. While this may seem disappointing, it is challenging for an attacker to implement a worm that substantially and repeatedly mutates its structure while retaining its intended functionality. Thus, the experiment demonstrates that the prototype can detect similarity between real-world examples of malware when it is present.

### Limitations

One limitation of the current prototype is that it operates offline. Our experiments were conducted on files captured from the network and later analyzed. Future work will include implementing the necessary infrastructure to operate the system online.

Additionally, our analysis is more complex and costly compared to substring-based approaches. It involves parsing the network stream into instructions, building the control flow graph, generating subgraphs, and performing canonical graph labeling. Performance improvements are necessary to deploy the system on fast network links. Currently, the system can analyze about 1 Megabyte of data per second, with most of the processing time spent on disassembling the byte stream and generating the CFG.

A key advantage of our approach over systems like Earlybird and Autograph is its robustness to polymorphic modifications of malicious executables. This is because we analyze the structure of the executable rather than its byte stream representation. However, an attacker could attempt to evade detection by modifying the structure of the malicious code. While one-time changes to the structure are possible, automatically generating semantically equivalent code pieces without common substructures is more challenging. Another evasion technique is to insert conditional branches that are never taken, which can be done at a low cost but may not be straightforward to generate. An attacker could also target the coloring scheme, finding instructions from different classes to create worm variations that appear different to our system. Despite these challenges, the experimental results with ADMmutate show that, despite appearing completely different on a byte string level, the total number of fingerprints is very low, delaying but not preventing detection.

Finally, our technique cannot detect malicious code consisting of fewer than \( k \) blocks. We chose \( k = 10 \) for our experiments, a value that seems reasonable given that the Slammer worm, which is only 376 bytes long, has a CFG with 16 nodes, and CodeRed, which is about 4 Kilobytes long, has a CFG with 127 nodes.

### Conclusions

Worms are automated threats that can compromise a large number of hosts in a short time, making human-based countermeasures ineffective. In recent years, worms have evolved into sophisticated malware with advanced attack techniques. Polymorphic worms represent the next step in this evolution, changing their binary representation to evade detection.

This paper presents a novel technique for reliably identifying polymorphic worms. The technique relies on structural analysis and graph coloring to characterize the high-level structure of a worm executable. By abstracting from the concrete implementation, our technique supports the identification of different mutations of a polymorphic worm.

Our approach has been implemented in a system resilient to various code transformation techniques. The system has been evaluated with a large number of benign files and network flows, demonstrating a low rate of false positives. We provide evidence that the system represents a promising step towards the reliable detection of previously unknown, polymorphic worms.

### References

1. L. Babai and E. Luks. Canonical Labeling of Graphs. In 15th ACM Symposium on Theory of Computing, 1983.
2. M. Bailey, E. Cooke, F. Jahanian, J. Nazario, and D. Watson. The Internet Motion Sensor: A Distributed Blackhole Monitoring System. In Network and Distributed Systems Symposium (NDSS), 2005.
3. V. Berk, R. Gray, and G. Bakos. Using Sensor Networks and Data Fusion for Early Detection. In SPIE Aerosense Conference, 2003.
4. D. Dagon, X. Qin, G. Gu, W. Lee, J. Grizzard, J. Levin, and Henry O. HoneyStat: Local Worm Detection Using Honeypots. In 7th International Symposium on Recent Advances in Intrusion Detection (RAID), 2004.
5. T. DeTristan, T. Ulenspiegel, Y. Malcom, and M. von Underduk. Polymorphic Shellcode Engine Using Spectrum Analysis. http://www.phrack.org/show.php?p=61&a=9.
6. H.-A. Kim and B. Karp. Autograph: Toward Automated, Distributed Worm Signature Detection. In 13th Usenix Security Symposium, 2004.
7. O. Kolesnikov and W. Lee. Advanced Polymorphic Worms: Evading IDS by Blending in with Normal Traffic. Technical report, Georgia Tech, 2004.
8. C. Kreibich and J. Crowcroft. Honeycomb - Creating Intrusion Detection Signatures Using Honeypots. In 2nd Workshop on Hot Topics in Networks, 2003.
9. C. Kruegel, F. Valeur, W. Robertson, and G. Vigna. Static Analysis of Obfuscated Binaries. In 13th Usenix Security Symposium, 2004.
10. C. Linn and S. Debray. Obfuscation of Executable Code to Improve Resistance to Static Disassembly. In ACM Conference on Computer and Communications Security (CCS), 2003.
11. S. Macaulay. ADMmutate: Polymorphic Shellcode Engine. http://www.ktwo.ca/ttsecurity.html.
12. B. McKay. Nauty: No AUTomorphisms, Yes? http://cs.anu.edu.auâˆ¼bdm/nauty/.
13. B. McKay. Practical graph isomorphism. Congressus Numerantium, 30, 1981.
14. D. Moore, C. Shannon, G. Voelker, and S. Savage. Internet Quarantine: Requirements for Containing Self-Propagating Code. In IEEE Infocom Conference, 2003.
15. J. Newsome, B. Karp, and D. Song. Polygraph: Automatically Generating Signatures for Polymorphic Worms. In IEEE Symposium on Security and Privacy, 2005.
16. V. Paxson. Bro: A System for Detecting Network Intruders in Real-Time. In 7th Usenix Security Symposium, 1998.
17. M. O. Rabin. Fingerprinting by Random Polynomials. Technical report, Center for Research in Computing Technology, Harvard University, 1981.
18. M. Roesch. Snort - Lightweight Intrusion Detection for Networks. In Usenix LISA Conference, 1999.
19. S. Singh, C. Estan, G. Varghese, and S. Savage. Automated Worm Fingerprinting. In 6th Symposium on Operating System Design and Implementation (OSDI), 2004.
20. S. Skiena. Implementing Discrete Mathematics: Combinatorics and Graph Theory, chapter Graph Isomorphism. Addison-Wesley, 1990.
21. Sophos. War of the Worms: Top 10 list of worst virus outbreaks in 2004. http://www.sophos.com/pressoffice/pressrel/uk/20041208yeartopten.html.
22. S. Staniford, D. Moore, V. Paxson, and N. Weaver. The Top Speed of Flash Worms. In 2nd ACM Workshop on Rapid Malcode (WORM), 2004.
23. S. Staniford, V. Paxson, and N. Weaver. How to 0wn the Internet in Your Spare Time. In 11th Usenix Security Symposium, 2002.
24. S. Venkataraman, D. Song, P. Gibbons, and A. Blum. New Streaming Algorithms for Fast Detection of Superspreaders. In Network and Distributed Systems Symposium (NDSS), 2005.
25. N. Weaver, V. Paxson, S. Staniford, and R. Cunningham. A Taxonomy of Computer Worms. In ACM Workshop on Rapid Malcode, October 2003.
26. N. Weaver, S. Staniford, and V. Paxson. Very Fast Containment of Scanning Worms. In 13th Usenix Security Symposium, 2004.
27. D. Whyte, E. Kranakis, and P. van Oorschot. DNS-based Detection of Scanning Worms in an Enterprise Network. In Network and Distributed Systems Symposium (NDSS), 2005.
28. M. Williamson. Throttling Viruses: Restricting Propagation to Defeat Malicious Mobile Code. In 18th Annual Computer Security Applications Conference (ACSAC), 2002.