add_header Access-Control-Allow-Origin \*;
add_header Access-Control-Allow-Headers \'Origin, X-Requested-With,
Content-Type, Accept, Token\';
add_header Access-Control-Allow-Methods GET,POST,OPTIONS,PUT,DELETE;
location / {
proxy_pass_header Server;
#proxy_set_header Host \$host:\$server_port;
proxy_set_header Host \$http_host;
proxy_set_header X-Real-IP \$remote_addr;
proxy_set_header X-Forwarded-For \$proxy_add_x\_forwarded_for;
proxy_set_header X-Forwarded-Proto \$scheme;
proxy_set_header X-Scheme \$scheme;
root shop-cloud/dist;
index index.html index.htm;
try_files \$uri \$uri/ /index.html;
#try_files \$uri \$uri/ \@req;
}
error_page 405 =200 \@405;
location \@405 {
root shop-cloud/dist;
proxy_method GET;
proxy_pass http://static_backend;
}
#以下解决了登陆报token错误
location /siy-admin {
proxy_set_header Host \$http_host;
#proxy_set_header Host \$host:\$server_port;
proxy_set_header X-Real-IP \$remote_addr;
proxy_set_header X-Forwarded-For \$proxy_add_x\_forwarded_for;
proxy_set_header X-Forworded-For \$http_x\_forwarded_for;
\# proxy_set_header X-Forwarded-Proto \$scheme;
proxy_set_header X-Scheme \$scheme;
proxy_pass http://192.168.10.242:8888;
}
# SSL证书
SSL协议SSL（Secure Sockets
Layer）中文名称安全套接字协议，是网络安全通信的重要基石。最初由网景公司（Netscape）设计，主要用来保证网络通信的机密性、认证性以及完整性，在网景公司它经历了SSL
1.0、SSL 2.0、SSL
3.0三个版本的变迁。后来由互联网工程任务组（IETF）接管，并更名为TLS（Transport
Layer Security），发展至今已有TLS 1.0、TLS1.1、TLS1.2这几个版本。
互联网上存在着许多权威性的数字证书颁发机构，简称CA机构，他们会根据申请人信息，验证域名的所有权以及公司企业的完整信息，经过复杂的检验手段，再进行发布。
**HTTP为什么不安全：**
那么HTTP协议为什么是不安全的呢？原因是HTTP协议采用的是数据明文传输方式。用户从客户端浏览器提交数据，而数据是以明文的方式通过网络传输到到网站服务器。假如在这个网络传输过程中，有第三者侵入网络，截取到这个数据包，那么用户所传输的数据内容将会被截获者完全得到。假如用户传输的是银行卡、密码等个人私密信息，那对于用户来说是非常不利的。而且网站服务器也无法得知在数据传输过程中，用户数据是否会被篡改，这对网站服务器来说也是一种极大的风险。
解决这个问题的方法是使用HTTPS协议为你的网站加密，以前我们也有说过什么是HTTPS加密。为你的网站服务器安装服务器证书网站即可使用HTTPS协议进行访问。使用HTTPS协议的网站，在数据传输的过程中会对用户数据进行HTTPS加密（即SSL加密），经过SSL加密的数据再进行网络传输，那么即使是被第三者截获也能保证用户数据的安全和数据的完整性。所以HTTPS协议才会被认为是安全的、可靠的。
**SSL为什么能保证安全：**
SSL加密是建立在非对称加密算法的基础上的。非对称加密算法会产生一对长字符串，称为密钥对（公钥、私钥）。数据使用公钥进行加密后，唯一只能使用私钥才能解开。安装了服务器证书的网站，其实是把私钥保存在服务器中，而把公钥连同网站相关信息（如：域名、所有者名称、有效期）制作成一张SSL证书，并把SSL证书公布到互联网上。
当用户访问网站的时候边能得到这张SSL证书，当用户提交数据时，客户端使用保护的公钥的SSL证书对数据进行加密。由于非对称加密必须使用私钥才能解密，那么在网络传输时，即使数据被截获，由于截获者无法得到私钥，那么截获者也就无法破解密文。因此建立在SSL加密的HTTPS协议才会被认为是安全的，HTTPS网站才会被Chrome等主流浏览器认为是安全的网站。
**SSL连接作用：**
1、数据传输的机密性：利用对称密钥算法对传输的数据进行加密。
2、身份验证机制：现在证书基本利用电子签名，对服务器和客户端进行身份验证，值得说明的是客户端的身份验证是可以选的。
## SSL证书类型：
一、域名型证书：简称DV
SSL，域名型SSL不会在证书中显示申请的公司单位的名称，只会显示申请的域名。对于DV
SSL的申请，只需要1-2个小时左右即可完成对域名的验证并颁发证书，不需要递交纸质验证文件，只需要验证域名的管理权。
一般这种SSL类型适用于中小型企业网站、个人网站等。
二、企业型证书：简称OV
SSL，企业型SSL包含了完整的公司信息，因此用户可以在证书中看到申请证书的公司名称。申请的时候不仅仅需要验证域名的管理权，还需要递交公司证明的材料以及纸质的验证文件。
这种SSL类型适用于企业网站、金融机构或是电子商务网站。
三、增强型证书：简称EV
SSL，增强型SSL的申请需要通过极其严格的审查来验证网站企业身份和域名管理权，来确保网站身份的真实性。同时具有超强的加密保护，在地址栏中便显示了公司的名称和证书颁发机构的全称。与前两种SSL证书类型相比，EV
SSL具有极高的可信度以及安全性。
这种SSL类型适用于大型的企业，证券、金融平台，政府机构的站点等。
四、代码签名证书：数字证书的其中一种，是提供给计算机软件开发者使用的，对开发的软件代码进行数字签名。签名后的软件，使用者在进行软件安装时，能够验证软件开发者的身份，并能保证软件代码不被篡改。从而保证了用户在软件安装使用的过程中，不会被病毒或恶意代码所侵害，保护了用户的利益的同时也帮助软件产品能在网络上快速发布。
使用代码签名证书可以对各种不同的软件代码文件进行数字签名，其中包括：.sys文件、ActiveX文件、.exe文件、.dll文件、.cab文件、.ocx文件、.xml文件等等。
对于不同企业要求有不同的SSL类型，因此用户不能认为部署了SSL证书的网站就是绝对安全的，他们仅仅对数据的传输进行了加密处理。还需要观察此网站部署了什么SSL证书类型，若只是部署了DV
SSL，那么此公司是否真实存在也是需要判断的。因此在这里推荐电子商务网站都部署EV
SSL证书 或者是OV SSL证书，绝对不能部署已经被欺诈网站滥用的DV SSL证书。
![](media/image19.png){width="5.877777777777778in"
height="2.4631944444444445in"}
![](media/image20.png){width="7.263888888888889in"
height="3.0006944444444446in"}
## 通配符SSL证书：
通配符SSL证书与普通SSL证书最大的不同就在于通配符证书能够保护主域名以及旗下不限数量的子域，这就意味着用户可通过申请单个通配符SSL证书来保护任意数量的子域。可以举个例子，假设用户为\*.example.com申请了通配符证书，那么此证书可以同时保护www.example.com、bolg.example.com等等站点，就不需要为另一个相关的网站申请多一份SSL证书。
尽管通配符证书对于拥有多个子域名的平台相当友好，但其实也有不方便的地方。首先，目前只有DV
（域名型）SSL证书以及OV（企业型）
SSL证书支持通配符证书的功能，而EV（增强型）
SSL证书的用户不能享有通配符SSL证书的功能。另一方面，就是通配符证书不支持多域名，在SSL证书的管理期间，用户可以将通配符SSL域名添加为多域，但是却不能将多域添加为通配符SSL域。
虽然不能排除通配符SSL证书的这些缺点，但通配符SSL证书的出现也极大方便了同时拥有多个子域名的用户。同时，通配符证书也由于可以保护多个子域名，这使得它具有很高的兼容性，能够兼容99%的浏览器。
（一）通配符SSL证书的优点 
如果你有多个子域要保护，那么购买通配符SSL证书是个非常好的选择：
1.保护无限子域需要为每个子域购买单个SSL证书，购买并使用一个证书就可以了。
2.便宜实惠。虽然通配符证书比一般的证书成本高很多，但如果使用在多个子域中，就会轻松节省几百甚至上万元。
3.更易于管理。即使使用PKI管理界面，部署30个不同的单独SSL证书也是一项艰巨的任务，更新时更麻烦。但是通配符SSL可以解决上述这些麻烦复杂的问题，而且操作简单方便。
（二）通配符SSL证书的缺点
1.安全性。如果在多个服务器上使用一个证书和私钥，那么当一个服务器受到攻击，其他所有的服务器也会受到攻击。例如，pay.baidu.com子域名遭到破坏，则mail和cloud子域名也会遭到破坏。这样就必须尽快重新替换所有服务器上的证书。
2.移动设备兼容性。某些流行的移动设备操作系统（5）无法识别通配符（\*），因此无法使用通配符证书。如果您需要支持这些设备，则需要使用单个证书。
## SSL证书文件有哪些
SSL是我们广大网友中最为常用的网络系统加密方式，它是由Secure Socket
Layer缩写而来。SSL加密认证是包括了使用一个公用密钥和一个私人密钥，我们用户都是使用公用密钥来加密数据的，解密信息就需要使用相对应的私人密钥。这都是相对应的，不仅是信息保密的需要。更是为了最大程度上保护互联网消费者的消费信息，个人信息，保密信息等等。
SSL证书文件一般是在信息终端设置配置的，通常主要有.key、.csr、.crt、.pem等几个不同的后缀，一般专业技术人员一眼就能判断出来，后缀一般是互联网系统用于判断ssl证书文件类型所使用的，Linux是不使用后缀名来判断ssl证书文件名称的，但是由于现在的互联网约定俗成，我们一般都会添加这些后缀。
以下为不同后缀的ssl证书文件的作用:
1、.key文件：属于密钥文件，SSL证书的私人密钥就包括在内。是信息内容的中枢；
2、.csr文件：文件里包括证书的公用密钥和一些公司内部重要秘密信息，要使用者通过请求签名之后才能够直接生出证书；
3、.crt文件：此文件也包含了ssl证书的公用密钥、签字讯息以及根据不同的类型伴随不同认证的信息，通常各类签名签字证书都会在这类文件中，如IP等；
4.  .pem文件：该文件较其他后缀文件来说比较少见，里面包含着证书的私人密钥以及其他一部分证书重要的信息。
## SSL证书和ca证书的区别
SSL证书和ca证书是从属关系，因为ssl是众多ca证书中的一种。CA是数字证书管理机构，SSL证书一种数字证书，SSL证书由CA机构签发的。不过CA机构签发的证书有很多种，都叫CA证书，所以SSL证书只是其中一种。
SSL证书就是传统意义的超文本传输协议的安全版本，在原有的基础上添加了https安全协议。浏览器和服务器之间的信息传输通道更加安全，能够保证传输的数据具有稳定性和完整性。而SSL证书是由专业的数字证书签发机构所签发的安全证书。
## 证书标准
X.509 -
这是一种证书标准,主要定义了证书中应该包含哪些内容.其详情可以参考RFC5280,SSL使用的就是这种证书标准.
## SSL中常用证书格式及其应用 \|
### 一、各种格式证书介绍：
PKCS 全称是 Public-Key Cryptography Standards ，是由 RSA
实验室与其它安全系统开发商为促进公钥密码的发展而制订的一系列标准，PKCS
目前共发布过 15 个标准。 常用的有：
PKCS#12 Personal Information Exchange: .pfx, .p12
PKCS#10 Certification Request: .p10
PKCS#7 cert request response: .p7r
PKCS#7 binary message: .p7b
PKCS#7 常用的后缀是： .P7B .P7C .SPC
PKCS#12 常用的后缀有： .P12 .PFX
X.509是常见通用的证书格式。所有的证书都符合为Public Key Infrastructure
(PKI) 制定的 ITU-T X509 国际标准。
X.509 DER 编码(ASCII)的后缀是： .DER .CER .CRT
X.509 PAM 编码(Base64)的后缀是： .PEM
cer/.crt是用于存放证书，它是2进制形式存放的，不含私钥。
.pem跟crt/cer的区别是它以Ascii来表示。
pfx/p12用于存放个人证书/私钥，他通常包含保护密码，2进制方式
p10是证书请求
p7r是CA对证书请求的回复，只用于导入
p7b以树状展示证书链(certificate chain)，同时也支持单个证书，不含私钥。
注意：其中若要使用浏览器进行双向认证的话，必须在浏览器安装p12格式的证书
，因为p12格式的数字证书包含私钥，只有包含私钥
才能使双方的加密通信正常进行。
###  二、各种格式证书转换与导入 
1、Der/Cer证书导入：
要从某个文件中导入某个证书，使用keytool工具的-import命令：
keytool -import -file mycert.der -keystore mykeystore.jks
如果在 -keystore
选项中指定了一个并不存在的密钥仓库，则该密钥仓库将被创建。
如果不指定 -keystore 选项，则缺省密钥仓库将是宿主目录中名为 .keystore
的文件。如果该文件并不存在，则它将被创建。
创建密钥仓库时会要求输入访问口令，以后需要使用此口令来访问。可使用-list命令来查看密钥仓库里的内容：
keytool -list -rfc -keystore mykeystore.jks
2、P12格式证书导入：
keytool无法直接导入PKCS12文件。
第一种方法是使用IE将pfx证书导入，再导出为cert格式文件。使用上面介绍的方法将其导入到密钥仓库中。这样的话仓库里面只包含了证书信息，没有私钥内容。
第二种方法是将pfx文件导入到IE浏览器中，再导出为pfx文件。
新生成的pfx不能被导入到keystore中，报错：keytool错误：
java.lang.Exception: 所输入的不是一个 X.509
认证。新生成的pfx文件可以被当作keystore使用。但会报个错误as unknown
attr1.3.6.1.4.1.311.17.1,查了下资料,说IE导出的就会这样,使用Netscape就不会有这个错误.
第三种方法是将pfx文件当作一个keystore使用。但是通过微软的证书管理控制台生成的pfx文件不能直接使用。keytool不认此格式，报keytool错误：
java.io.IOException: failed to decrypt safe contents
entry。需要通过OpenSSL转换一下：
1）openssl pkcs12 -in mycerts.pfx -out mycerts.pem
2）openssl pkcs12 -export -in mycerts.pem -out mykeystore.p12
通过keytool的-list命令可检查下密钥仓库中的内容：
keytool -rfc -list -keystore mykeystore.p12 -storetype pkcs12
这里需要指明仓库类型为pkcs12，因为缺省的类型为jks。这样此密钥仓库就即包含证书信息也包含私钥信息。
3、P7B格式证书导入：
keytool无法直接导入p7b文件。
需要将证书链RootServer.p7b（包含根证书）导出为根rootca.cer和子rootcaserver.cer
。
将这两个证书导入到可信任的密钥仓库中。
keytool -import -alias rootca -trustcacerts -file rootca.cer -keystore
testkeytrust.jks
遇到是否信任该证书提示时，输入y
keytool -import -alias rootcaserver -trustcacerts -file rootcaserver.cer
-keystore testkeytrust.jks
总结:
1)P12格式的证书是不能使用keytool工具导入到keystore中的
2)The Sun\'s PKCS12
Keystore对从IE和其他的windows程序生成的pfx格式的证书支持不太好.
3)P7B证书链不能直接导入到keystore，需要将里面的证书导出成cer格式，再分别导入到keystore。
三、各种证书相互转换
一 用openssl创建CA证书的RSA密钥(PEM格式)：
openssl genrsa -des3 -out ca.key 1024
二用openssl创建CA证书(PEM格式,假如有效期为一年)：
openssl req -new -x509 -days 365 -key ca.key -out ca.crt -config
openssl.cnf
openssl是可以生成DER格式的CA证书的，最好用IE将PEM格式的CA证书转换成DER格式的CA证书。
三 x509到pfx
pkcs12 -export --in keys/client1.crt -inkey keys/client1.key -out
keys/client1.pfx
四 PEM格式的ca.key转换为Microsoft可以识别的pvk格式。
pvk -in ca.key -out ca.pvk -nocrypt -topvk
五 PKCS#12 到 PEM 的转换
openssl pkcs12 -nocerts -nodes -in cert.p12 -out private.pem
验证 openssl pkcs12 -clcerts -nokeys -in cert.p12 -out cert.pem
六 从 PFX 格式文件中提取私钥格式文件 (.key)
openssl pkcs12 -in mycert.pfx -nocerts -nodes -out mycert.key
七 转换 pem 到到 spc
openssl crl2pkcs7 -nocrl -certfile venus.pem -outform DER -out venus.spc
用 -outform -inform 指定 DER 还是 PAM 格式。例如：
openssl x509 -in Cert.pem -inform PEM -out cert.der -outform DER
八 PEM 到 PKCS#12 的转换，
openssl pkcs12 -export -in Cert.pem -out Cert.p12 -inkey key.pem
九 PER到CER
openssl x509 -in mycerts.pem -out mycerts.cer
# nginx内置变量汇总：
嵌入式变量
该 ngx_http_core_module 模块支持名称与Apache
Server变量匹配的嵌入变量。首先，这些是代表客户端请求的报头字段的变量，例如
\$http_user_agent， \$http_cookie等。还有其他变量：
\$arg_name name 请求行中的参数
\$args 请求行中的参数，同\$query_string
\$binary_remote_addr
客户端地址采用二进制形式，IPv4地址的值长度始终为4个字节，IPv6地址的长度为16个字节
\$body_bytes_sent 发送到客户端的字节数，不包括响应头; 此变量与
Apache模块的" %B"参数 兼容mod_log_config
\$bytes_sent 发送到客户端的字节数（1.3.8,1.2.5）
\$connection 连接序列号（1.3.8,1.2.5）
\$connection_requests 当前通过连接发出的请求数（1.3.8,1.2.5）
\$content_length "Content-Length"请求标头字段
\$content_type "Content-Type"请求标头字段
\$cookie_name 该 name 饼干
\$document_root root 或 alias 指令当前请求的值
\$document_uri 与\...一样 \$uri， 与\$uri相同。
\$host
请求主机头字段，否则为服务器名称，按此优先顺序：第1是来自请求行的主机名，第2是
来自"主机"请求标头字段的主机名，第3是与请求匹配的服务器名称
\$hostname 主机名
\$http_name 任意请求头字段;
变量名称的最后一部分是字段名称转换为小写，短划线由下划线替换
\$https " on"如果连接在SSL模式下运行，或者否则为空字符串
\$http_user_agent 客户端agent信息
\$http_cookie 客户端cookie信息
\$is_args " ?"如果请求行有参数，否则为空字符串
\$limit_rate 设置此变量可启用响应速率限制; 见 limit_rate
\$msec 以毫秒为单位的当前时间（毫秒）（1.3.9,1.2.6）
\$nginx_version nginx版本
\$pid 工人流程的PID
\$pipe " p"如果请求是流水线的，" ."否则（1.3.12,1.2.7）
\$proxy_protocol_addr
来自PROXY协议头的客户端地址，否则为空字符串（1.5.12）
> 必须先通过proxy_protocol 在listen 指令中设置参数 来启用PROXY协议 。
\$proxy_protocol_port
来自PROXY协议头的客户端端口，否则为空字符串（1.11.0）
> 必须先通过proxy_protocol 在listen 指令中设置参数 来启用PROXY协议 。
\$query_string 与\...一样 \$args
\$realpath_root 与当前请求的根 或 别名指令值对应的绝对路径名
，所有符号链接都解析为实际路径
\$remote_addr 客户地址
\$remote_port 客户端口
\$remote_user 基本身份验证提供的用户名，已经经过Auth Basic
Module验证的用户名。
\$request 完整的原始请求行
\$request_body
请求机构当请求体被读取到内存缓冲区时，变量的值在proxy_pass，
fastcgi_pass，uwsgi_pass 和 scgi_pass 指令 处理的位置可用 。
\$request_body_file
请求正文的临时文件的名称,在处理结束时，需要删除该文件。要始终将请求主体写入文件，
需要启用client_body_in_file_only。当在代理请求或对FastCGI / uwsgi /
SCGI服务器的请求中传递
临时文件的名称时，应分别通过proxy_pass_request_body off，
fastcgi_pass_request_body off， uwsgi_pass_request_body off或