         readonly attribute DOMString referrer;
         [RaisesException, RuntimeCallStatsCounter=DocumentCookie] attribute DOMString cookie;
测试代码:
修改前:
修改后:
我之所以觉得伪造 location 这个特性很重要，是因为不仅仅在爬虫中需要到这个特性，在实现 DOM XSS 检测的时候这个特性也非常重要， 虽然说
Headless Chrome 官方文档上有提过将来可能会让用户可以自由 hook location 的特性 (官方文档上也是考虑到 DOM XSS
这块)， 但过了将近一年的时间，也没有和这个特性的相关消息，所以还是自己动手丰衣足食。
##### popups 窗口
我们再来看看这个例子
在 Headless Chrome 中会直接弹出一个 popups 窗口，CDP 只能禁止当前 page 跳转，但是没办法禁止新 page 创建， 在
QtWebkit 中并没有这样的烦恼，因为所有的跳转请求都由 `QWebPage::acceptNavigationRequest` 决定去留。
这个问题是 DM 同学提出来的，当时他和我讨论该问题。其实当时我也没有解决方法，于是我跑去 Headless Chrome 邮件组问了开发人员 [Is
there any way to block popups in headless
mode?](https://groups.google.com/a/chromium.org/forum/#!topic/headless-dev/gmZU6xBv3Jk "Is there any way to block popups in headless mode?")，
开发人员建议我先监听 `Page.windowOpen` 或 `Target.targetCreated` 事件，然后再使用
`Target.closeTarget` 关闭新建的 popups 窗口。
那么问题就来了，首先如果等待 page 新建之后再去关闭，不仅仅浪费资源去新建一个无意义的 page，而且 page
对应的网络请求已经发送出去了，如果该网络请求是一个用户退出的请求，那么事情就更严重了。 其次开发人员推荐的方法是没法区分新建的 page 是在某个 page
下新建的，还是通过 CDP 新建的。所以 Headless Chrome 开发人员的建议我并不是特别满意。
得，最好的办法还是继续修改代码，使其在 page 中无法新建 page：
    --- a/third_party/WebKit/Source/core/page/CreateWindow.cpp
    +++ b/third_party/WebKit/Source/core/page/CreateWindow.cpp
    @@ -282,6 +282,9 @@ static Frame* CreateNewWindow(LocalFrame& opener_frame,
                                   const WebWindowFeatures& features,
                                   NavigationPolicy policy,
                                   bool& created) {
    +  // add by fate0
    +  return nullptr;
    +  
       Page* old_page = opener_frame.GetPage();
       if (!old_page)
         return nullptr;
    --- a/third_party/WebKit/Source/core/page/CreateWindow.cpp
    +++ b/third_party/WebKit/Source/core/page/CreateWindow.cpp
    @@ -396,6 +396,10 @@ DOMWindow* CreateWindow(const String& url_string,
                             LocalFrame& first_frame,
                             LocalFrame& opener_frame,
                             ExceptionState& exception_state) {
    +
    +  // add by fate0
    +  return nullptr;
    +
       LocalFrame* active_frame = calling_window.GetFrame();
       DCHECK(active_frame);
##### 忽略 SSL 证书错误
在 Headless Chrome 对外公开之后很长一段时间内，是没法通过 devtools 控制忽略 SSL 证书错误的，也没办法去拦截 Chrome
的各种网络请求。
直到[2017-03](https://bugs.chromium.org/p/chromium/issues/detail?id=659662
"2017-03") 才实现了在 devtools 上控制忽略 SSL 证书错误的功能。
直到[2017-06](https://groups.google.com/a/chromium.org/forum/#!topic/headless-dev/uvms04dXTIM "2017-06") 才实现了在 devtools 可以拦截并修改 Chrome 网络请求的功能。
这两个特性对于扫描器爬虫来说非常重要，尤其是拦截网络请求的功能，可偏偏这两功能结合在一起使用的时候，就会出现 BUG， 在 puppeteer 上也有人提了
[ignoreHTTPSErrors is not working when request interception is
on](https://github.com/GoogleChrome/puppeteer/issues/1159 "ignoreHTTPSErrors
is not working when request interception is on")， 直至现在(2018-03-05)，Google
也并没有修复该 BUG，我还能说啥呢，还是自己动手，丰衣足食。
最简单的方法就是修改 Chromium 代码直接忽略所有的网站的 SSL 证书错误，这样也省了一个 CDP 的 callback，修改如下:
    --- a/net/http/http_network_session.cc
    +++ b/net/http/http_network_session.cc
    @@ -97,7 +97,7 @@ SettingsMap AddDefaultHttp2Settings(SettingsMap http2_settings) {
     HttpNetworkSession::Params::Params()
         : enable_server_push_cancellation(false),
    -      ignore_certificate_errors(false),
    +      ignore_certificate_errors(true),
           testing_fixed_http_port(0),
           testing_fixed_https_port(0),
           tcp_fast_open_mode(TcpFastOpenMode::DISABLED),
测试环境 [badssl.com](https://badssl.com/ "badssl.com")
在 Chromium 中还有一些其他可改可不改的地方，这里就不继续吐槽了。
#### 0x03 总结
OK，折腾了那么久，终于把一个类似 wget 的功能实现好了(笑， 相对于我之前基于 QtWebkit 从头实现一个类似 PhantomJS 的
CasterJS 来说， 目前使用 Headless Chrome 稳定、可靠、快速，简直是漏扫爬虫的不二选择。
这篇博客就简单讲了一下和漏扫爬虫相关的 Headless 浏览器的知识，接下来就到了漏扫爬虫中最为重要的一点，
这一点也就决定了漏扫爬虫链接抓取效果是否会比其他扫描器好，能好多少，这都会在扫描器的下一篇文章中继续介绍。
* * *