protection schemes.
It is quite interesting the lack of a clear evolution in the
packers characteristics and complexity over time. In the past
eight years, we did not observe any trend that shows that
malware writers are moving toward more complex techniques.
The fact that more sophisticated packing techniques are widely
available, but malware writers do not use them is not necessar-
ily a good sign. In fact, it may be the consequence of the fact
that an average Type-III packing routine is already complex
enough to protect against automated scanners.
In order to measure the run-time packer complexity, we
propose a taxonomy that combines several metrics to clas-
sify each packer in one of six categories with incremental
complexity. This taxonomy is focused on common run-time
packers, and does not cover virtualization-based protectors.
These sophisticated tools belong to a different family of
protectors that do not recover the original code by overwriting
a region of memory. We plan to extend our taxonomy in the
future in order to cover these tools.
The presented framework was developed over a whole-
emulation solution: TEMU. While it is true that some malware
samples may implement speciﬁc anti-QEMU techniques, other
approaches such as debugging or binary instrumentation are
also susceptible of being detected, and do not provide a
system-wide point of view of the execution. Although different
authors [5], [18], [19] have proposed virtualization based
approaches for binary tracing, we believe that the transparency
of the analysis environment is beyond the scope of this study.
Finally, the approach presented in this paper was designed
following an iterative process, by analyzing interesting packers
and manually verifying the validity of the results. On the one
hand, some of the properties considered in the taxonomy (e.g.,
number of layers, number of frames, repacking of memory, and
transition model) can be measured precisely by our model. On
the other hand, the distinction between Type-III and Type-
IV, and between Type-IV and Type-V/Type-VI require to
locate the memory regions where the original code resides.
In order to confront this problem we designed a heuristic
and manually veriﬁed its effectiveness in a number of real
examples. Unfortunately, due to the lack of labeled datasets,
and therefore of a ground truth, it is not possible to measure the
accuracy of this heuristic beyond the manual analysis already
conducted.
We believe that the lack of data-sets and ground truth in
this domain is caused by the lack of tools for packer behavior
Fig. 9. Average number of processes used by custom packers over time.
Fig. 10. Number of layers used by custom packers over time.
a signiﬁcantly more complex development and also impose a
run-time overhead that may not be desired by malware writers.
None of the generic unpackers proposed to date has dealt with
this kind of packers.
Based on our results, we can conclude that the average
packer has a Type-III complexity. While Type-I packers are
very common for off-the-shelf packers, in the case of custom
671
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:03:07 UTC from IEEE Xplore.  Restrictions apply. 
analysis. As a result, numerous authors [20]–[22] have built
custom data-sets in order to conduct experiments on packers.
However, in order to label these data-sets, the authors resorted
to signature based detection tools (known to raise too many
false negatives), dynamic generic unpackers – that do not
report information about the packer behavior, and even manual
analysis.
Tools like the framework proposed in this paper can help
the analyst in the reverse engineering process, allowing the
collection and labeling of run-time packer datasets.
VII. RELATED WORK
Run-time packers have been widely used by malware au-
thors for a long time. When these protection tools became
problematic for malware analysis, the community proposed
different solutions to generically recover the code of the binary.
Most of these approaches are based on the dynamic execution
of the sample in a controlled environment monitoring events
at different granularity levels. These solutions differ in the
heuristics and statistical methods employed to determine the
right moment to dump the unpacked memory content.
Polyunpack [2] is based on the comparison of the statically
observable disassembled code and the trace obtained after
the execution of the binary. Omniunpack [1] is a real-time
unpacker that monitors memory writes and execution at a
page-granularity level using memory protection mechanisms
provided by the operating system. Its focus is on efﬁciency
and resilience, and is intended to trigger the analysis of an
anti-virus scanner whenever new code is ready to be executed.
Renovo [4], in constrast, instruments the execution of the
binary in an emulated environment and traces the execution
at an instruction granularity level. This approach is capable
of dealing with several layers of unpacking code, providing
a memory snapshot for each new layer of code discovered.
Eureka [3] focuses on coarse-grained granularity analysis, but
instead of monitoring page-level protection mechanisms, it
intercepts system calls and decides the moment in which the
unpacked content has been revealed based on heuristics and
statistical analysis.
Other approaches have focused on different
techniques
for monitoring the execution of the binary. For instance,
Cesare and Xiang [6] proposed an application-level emulation
unpacker, providing a method to determine the appropriate
moment to dump the memory by analyzing the entropy of
the binary. Ether [5],
in contrast, proposes an unpacking
framework based on instrumentation techniques in a virtual-
machine environment making use of the Intel VT extensions.
All the publications mentioned above focus on dynamic
analysis techniques. Nevertheless, a few authors have studied
the use of static and hybrid analysis techniques in order solve
the problem. Coogan et al. [7] proposed a solution based on
control ﬂow and alias analysis to identify potential transition
points from the unpacking routine to the original code. From
that point, the authors applied backward slicing to extract
the packing routine and execute it as part of an unpacking
tool. Caballero et al. [23] proposed a mixed dynamic and
static approach consisting on hybrid disassembly and data-ﬂow
analysis to extract self-contained transformation functions,
identifying code and data dependencies, and extracting the
function interface (input and output parameters) in order
to reuse it for the unpacking of the sample. Finally, other
authors have focused on virtualization-based obfuscators [8],
[9], a very complex type of packer that represents a different
challenge.
While Bayer et al. [24] presented a short overview of off-
the-shelf packers used by malware in 2008, to the best of our
knowledge we are the ﬁrst ones to present a longitudinal study
of the packer prevalence and complexity.
As part of the malware-analysis process, run-time packers
represent a moving target that implement many different ob-
fuscation techniques to prevent generic unpackers from recov-
ering the code, avoid debuggers, emulators, disassemblers, or
memory dump tools. Some studies [25]–[27] have focused on
documenting or measuring the prevalence of these techniques
in malware or common packers. Other studies [28] highlight
the fact that, although current anti-virus systems implement
some of the generic unpacking techniques proposed to date,
these approaches can be evaded with sufﬁciently complex
packers.
Other approaches, in contrast, have focused on measuring
the complexity of the packer by considering the number
of phases, waves, or layers. First, Debray et al. [13], [29]
proposed a formalization of the semantics of self-unpacking
code, and modeled the concept of execution phases. In their
model, a phase involves all the executed instructions written
by any of the previous phases. This concept is related to
our deﬁnition of execution frames, with the difference that,
in our model, execution frames only occur in the context of
a single unpacking layer. Guizani et al. [14] proposed the
concept of waves. This ﬁrst deﬁnition of waves is equivalent
to our concept of execution layers. Later, Marion et al. [30]
proposed a different formalization in which they modiﬁed
the semantics of waves, proposing a model similar to the
phases proposed by Debray et al.. Some of these publications
have measured the number of layers present
in malware
samples. Nevertheless, they do not cover other complexity
aspects such as the transition model, execution frames, or
code visibility. Moreover, our model differentiates between the
concept of unpacking layers and unpacking frames, allowing
us to compute different properties that can be combined to
provide a complexity score based on the class of the packer.
VIII. CONCLUSIONS
In this paper we have presented a packer taxonomy capable
of measuring the structural complexity of run-time packers.
We also developed an analysis framework that we evaluated
on two different datasets: off-the-shelf packers and custom
packed binaries.
The lack of reference data-sets and the lack of tools for
the
the analysis of the behavior of packers suggests that
672
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:03:07 UTC from IEEE Xplore.  Restrictions apply. 
[15] L. Bilge, A. Lanzi, and D. Balzarotti, “Thwarting real-time dynamic
unpacking,” in Proceedings of the Fourth European Workshop on System
Security, p. 5, ACM, 2011.
[16] D. Song, D. Brumley, H. Yin, J. Caballero, I. Jager, M. G. Kang,
Z. Liang, J. Newsome, P. Poosankam, and P. Saxena, “BitBlaze: A
new approach to computer security via binary analysis,” in Proceedings
of the 4th International Conference on Information Systems Security,
(Hyderabad, India), 2008.
[17] D. A. Quist and L. M. Liebrock, “Visualizing compiled executables
for malware analysis,” in Visualization for Cyber Security, 2009. VizSec
2009. 6th International Workshop on, pp. 27–32, IEEE, 2009.
[18] L.-K. Yan, M. Jayachandra, M. Zhang, and H. Yin, “V2e: combining
hardware virtualization and softwareemulation for transparent and exten-
sible malware analysis,” ACM SIGPLAN Notices, vol. 47, no. 7, pp. 227–
238, 2012.
[19] Z. Deng, X. Zhang, and D. Xu, “Spider: Stealthy binary program instru-
mentation and debugging via hardware virtualization,” in Proceedings of
the 29th Annual Computer Security Applications Conference, pp. 289–
298, ACM, 2013.
[20] R. Perdisci, A. Lanzi, and W. Lee, “Mcboost: Boosting scalability in
malware collection and analysis using statistical classiﬁcation of exe-
cutables,” in Computer Security Applications Conference, 2008. ACSAC
2008. Annual, pp. 301–310, IEEE, 2008.
[21] M. Z. Shaﬁq, S. M. Tabish, F. Mirza, and M. Farooq, “Pe-miner: Mining
structural information to detect malicious executables in realtime,” in
Recent advances in intrusion detection, pp. 121–141, Springer, 2009.
[22] X. Ugarte-Pedrero, I. Santos, I. Garc´ıa-Ferreira, S. Huerta, B. Sanz,
and P. G. Bringas, “On the adoption of anomaly detection for packed
executable ﬁltering,” Computers & Security, vol. 43, pp. 126–144, 2014.
[23] J. Caballero, N. Johnson, S. McCamant, and D. Song, “Binary code
extraction and interface identiﬁcation for security applications,” in
Proceedings of the 17th Annual Network and Distributed System Security
Symposium, pp. 391–408, ISOC, 2009.
[24] U. Bayer, I. Habibi, D. Balzarotti, E. Kirda, and C. Kruegel, “A view
on current malware behaviors,” in USENIX workshop on large-scale
exploits and emergent threats (LEET), LEET 09, April 2009.
[25] P. Ferrie, “Anti-unpacker tricks–part one,” Virus Bulletin, p. 4, 2008.
[26] K. A. Roundy and B. P. Miller, “Binary-code obfuscations in prevalent
packer tools,” ACM Computing Surveys (CSUR), vol. 46, no. 1, p. 4,
2013.
[27] G.
and
Negreira
in modern malware.,” BlackHat USA,
on-line:
us-14-Branco-Prevalent-Characteristics-In-Modern-Malware.pdf.
characteristics
Available
https://www.blackhat.com/docs/us-14/materials/
“Prevalent
2014.
Rubira,
R.
[28] A. Swinnen and A. Mesbahi, “One packer to rule them all: Em-
identiﬁcation, comparison and circumvention of current an-
pirical
tivirus detection techniques.,” BlackHat USA, 2014.
Available
on-line: https://www.blackhat.com/docs/us-14/materials/us-14-Mesbahi-
One-Packer-To-Rule-Them-All-WP.pdf.
[29] S. Debray and J. Patel, “Reverse engineering self-modifying code: Un-
packer extraction,” in Reverse Engineering (WCRE), 2010 17th Working
Conference on, pp. 131–140, IEEE, 2010.
[30] J.-Y. Marion and D. Reynaud, “Wave analysis of advanced self-
modifying behaviors,” Groupement De Recherche CNRS du G´enie de
la Programmation et du Logiciel, pp. 137–152, 2013.
(un)packing problem has been put prematurely aside by the
research community.
The results of our experiments show that, while many run-
time packers present simple structures, there is a signiﬁcant
number of samples that present more complex topologies. We
believe that this study can help security researchers to under-
stand the complexity and structure of run-time protectors and
to develop effective heuristics to generically unpack binaries.
ACKNOWLEDGMENTS
We would like to thank the reviewers for their insightful
comments and our shepherd Michael Bailey for his assistance
to improve the quality of this paper. This research was partially
supported by the Basque Government under a pre-doctoral
grant given to Xabier Ugarte-Pedrero, and by the SysSec Re-
searcher Mobility Program for System Security, funded by the
European Union Seventh Framework Programme (FP7/2007-
2013) under grant agreement 257007.
REFERENCES
[1] L. Martignoni, M. Christodorescu, and S. Jha, “Omniunpack: Fast,
generic, and safe unpacking of malware,” in Computer Security Appli-
cations Conference, 2007. ACSAC 2007. Twenty-Third Annual, pp. 431–
441, IEEE, 2007.
[2] P. Royal, M. Halpin, D. Dagon, R. Edmonds, and W. Lee, “Polyunpack:
Automating the hidden-code extraction of unpack-executing malware,”
in Proceedings of the 22nd Annual Computer Security Applications
Conference (ACSAC), pp. 289–300, 2006.
[3] M. Sharif, V. Yegneswaran, H. Saidi, P. Porras, and W. Lee, “Eureka:
A Framework for Enabling Static Malware Analysis,” in Proceedings of
the European Symposium on Research in Computer Security (ESORICS),
pp. 481–500, 2008.
[4] M. Kang, P. Poosankam, and H. Yin, “Renovo: A hidden code extractor
for packed executables,” in Proceedings of the 2007 ACM workshop on
Recurring malcode, pp. 46–53, 2007.
[5] A. Dinaburg, P. Royal, M. Sharif, and W. Lee, “Ether: malware analysis
via hardware virtualization extensions,” in Proceedings of the 15th ACM
conference on Computer and communications security, pp. 51–62, ACM,
2008.
[6] S. Cesare and Y. Xiang, “Classiﬁcation of malware using structured
control ﬂow,” in Proceedings of the Eighth Australasian Symposium on
Parallel and Distributed Computing-Volume 107, pp. 61–70, Australian
Computer Society, Inc., 2010.
[7] K. Coogan, S. Debray, T. Kaochar, and G. Townsend, “Automatic
static unpacking of malware binaries,” in Reverse Engineering, 2009.
WCRE’09. 16th Working Conference on, pp. 167–176, IEEE, 2009.
[8] R. Rolles, “Unpacking virtualization obfuscators,” in 3rd USENIX Work-
shop on Offensive Technologies.(WOOT), 2009.
[9] K. Coogan, G. Lu, and S. Debray, “Deobfuscation of virtualization-
obfuscated software: a semantics-based approach,” in Proceedings of
the 18th ACM conference on Computer and communications security,
pp. 275–284, ACM, 2011.
“Mcafee
report: Fourth quarter 2013,”
2013. Available on-line: http://www.mcafee.com/sg/resources/reports/
rp-quarterly-threat-q4-2013.pdf.
[10] McAfee Labs,
threats
[11] M. Morgenstern and H. Pilz, “Useful and useless statistics about viruses
and anti-virus programs,” in Proceedings of the CARO Workshop, 2010.
[12] F. Guo, P. Ferrie, and T.-C. Chiueh, “A study of the packer problem
and its solutions,” in Proceedings of the 2008 Conference on Recent
Advances in Intrusion Detection (RAID), pp. 98–115, 2008.
[13] S. Debray, K. Coogan, and G. Townsend, “On the semantics of self-
unpacking malware code,” tech. rep., Dept. of Computer Science,
University of Arizona, Tucson, July 2008.
[14] W. Guizani, J.-Y. Marion, and D. Reynaud-Plantey, “Server-side dy-
namic code analysis,” in Malicious and unwanted software (MALWARE),
2009 4th international conference on, pp. 55–62, IEEE, 2009.
673
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:03:07 UTC from IEEE Xplore.  Restrictions apply.