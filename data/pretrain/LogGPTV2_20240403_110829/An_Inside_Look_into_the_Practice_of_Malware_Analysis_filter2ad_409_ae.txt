### 7.3 Usability Recommendations

From the participants' feedback on the limitations of current tools, we have identified two key areas that developers of malware analysis tools should address:

1. **Customization**: The primary disadvantage mentioned by participants is the lack of customization in existing tools. Many analysts emphasize the importance of being able to tailor the settings of dynamic analysis sandboxes, such as the installed programs, file paths, and their content. As discussed in Section 6.2, some analysts find that commercial dynamic analysis tools are missing critical features, such as support for different architectures (e.g., 32-bit vs. 64-bit) and platforms (e.g., JavaScript or Visual Basic). 

2. **Comprehensive Monitoring**: During the interviews, participants highlighted the need to use a wide range of tools to gather all the necessary information. For example, one analyst (P2) stated, "I use VMs, VPN to hide my network, Wireshark, Process Explorer to monitor processes, ProcMon to monitor what the process is doing... there is also ProcDOT and all sorts of other tools to analyze those dumps after you get them, so there are countless tools." A more effective dynamic analysis tool would integrate a comprehensive and flexible monitoring system, capable of collecting all Indicators of Compromise (IOCs) and presenting them in a standardized format, thus reducing the need for analysts to run multiple tools separately.

### 8. Related Work

#### User Studies
A significant body of prior research has examined the workflows of software engineers, including those writing security software [40, 49]. However, only a few studies have focused specifically on the work practices of security professionals. Votipka et al. [76] conducted an observational study of reverse engineers, developing a formalized workflow for understanding unfamiliar software. Our study confirms their finding that static analysis is often used in reverse engineering malware samples. Unlike Votipka et al., our participants are exclusively malware analysts, and we identify additional analysis tasks not present in the reverse engineer's workflow. We also provide insights into the dynamic analysis configuration process, which is not covered in previous work.

Another related study by Votipka et al. [75] compares the vulnerability discovery processes of software testers and white-hat hackers. Their methodology involves semi-structured interviews with both communities, and they recommend improvements for both. Our methodology is similar, but we focus on the practical aspects of malware analysis rather than vulnerability discovery.

#### Malware Analysis
One of the major challenges in dynamic malware analysis is configuring the analysis environment to reveal as much malicious behavior as possible. Kharaz et al. [50] developed a ransomware detection tool that automatically creates a realistic environment. They design scripts to generate files with believable content, real names, and reasonable metadata to make the environment attractive to ransomware.

As our interviews indicate, malware analysts sometimes turn to static analysis techniques when reverse engineering a sample or configuring their dynamic environments. Another approach to overcome evasion is to design transparent analysis systems [39, 52, 71, 83, 84], which remove artifacts that malware can use to detect the analysis environment. Other methods focus on detecting when malware stalls before performing malicious activities and force it to execute a path that avoids stalling [56].

Some analysis systems execute a single sample in multiple environments to capture a greater percentage of the malware's true behavior [26, 54, 63, 67]. Bare-metal environments, where malware runs outside of a virtual machine, are particularly effective because fingerprinting methods are less effective in a physical environment [53, 54, 84]. Multiple environment techniques have also been used to automatically detect various evasion techniques [26, 52, 58].

To help analysts determine if their analysis system is vulnerable to evasion, Jing [48] compares artifacts from an analysis environment with a standard environment to identify discrepancies. Researchers have also applied static analysis to determine the targeted environment of malware. Xu [79] uses parallel execution environments and adjusts the environment settings based on static analysis of environment query APIs. Brumley [30] proposes a hybrid approach that matches malware triggers to conditional checks in the binary and symbolically executes instructions involving these variables.

Other works leverage hybrid analysis in ways not discussed by our participants. Hybrid analysis has been used to find dormant malicious behaviors [36], discover vulnerabilities [23], and find software bugs [31]. Hybrid concolic testing [60] combines random testing with symbolic analysis to explore program paths deeply.

Finally, static analysis can be independently leveraged for malware analysis. Symbolic analysis, for example, explores many paths of a program symbolically and uses constraint solvers to determine feasible paths and inputs [25, 70]. Applying these techniques to obfuscated malware can be challenging, and researchers have explored methods to address this, including symbolic analysis of obfuscated code [80] and extraction of obfuscated code semantics [29].

### 9. Conclusion

In this user study, we interviewed 21 malware analysts to gain a deeper understanding of how malware analysis is performed in practice. These interviews revealed the diversity of malware analysis, reflected in the broad range of workflows and the effort put into configuring dynamic analysis systems. Our analysis highlights six key components of dynamic analysis systems and how their setup varies depending on the analyst's tier. Based on the user study, we identified challenging tasks faced by participants during their analysis process. We first discuss promising existing academic research that could be transitioned to practice and then propose future research directions to address the remaining challenges.

### References

[References remain the same as provided in the original text.]

This revised version aims to improve clarity, coherence, and professionalism, ensuring that the text is well-structured and easy to follow.