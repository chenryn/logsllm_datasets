λ2
b
λ2
w
=
(λsent)2 10 f (D1+D2)/10
(λsent)2 10( f (D1)+E))/10
= 10( f (D1+D2)−( f (D1)+E))/10
= ζ
(27)
(28)
it is imperative to calculate the probability, Pnoise, that noise
in the channel satisﬁes that check. Unlike the adversary’s
pulses targeted to alter the authentic code, such a candidate
trail of noise pulses does not get added to the sender’s code
because they are at different positions. Without loss of gener-
ality, we can separate the noise-intervals in low-energy and
high-energy, e.g., across the median of the distribution of N2.
We refer to the number of high-energy intervals as κ. The
probability that noise satisﬁes the Robust Code Veriﬁcation
check is the probability that x of κ pulses fell into Binα, by
the probability of satisfying the test in that event, p(cid:48)α,r(x):
where ζ, from (12), represents the room-per-pulse available
to the adversary to add energy into the channel.
We now calculate pα,β,r,k(x,Γ), similar to (20) as:
pα,β,r,k(x,Γ) =
x
g=0(cid:32)pα,β,r,k,x,Γ(g)·(cid:0)x
g(cid:1)2x (cid:33)
∑
(29)
such that
pα,β,r,k,x,Γ(g) =(cid:40)pα,β,r,k,x(g),
0,
k + 2x− 4d ≤ α(ζ− 1)
otherwise
(30)
Using (29), the ﬁnal adversarial success probability is:
Psa(α,β,r,Γ,k) =
α
∑
k (cid:1) (cid:33) (31)
x=0(cid:32)pα,β,r,k(x,Γ)·(cid:0)α
x(cid:1)(cid:0) β
k−x(cid:1)
(cid:0)α+β
Figures 13a and 13b plot Psa in (31). At ζ = 20, Γ is too
high to reduce Psa, but the Robust Code Veriﬁcation check
enables the receiver to limit it to Psa bα. Figure 15 shows the validation for
Pbβ>bα, at a simulated distance between both devices of
d = 10m. A boxplot is drawn at distinct k, where each sce-
nario is run 106 times. The results conﬁrm that abstracting
noise from the model does not largely affect its accuracy. Next
we show the effect of longer distances on the model.
Validating Psa. Figure 16 shows the validation for Psa, at
r = α and Pnoise = 0.8. Results are shown for different k, at
distances of 10m and 100m. Each scenario is run 106 times,
and Psa is calculated as the proportion of these where the
adversary succeeded to hide the authentic code. Again the
results show comparable patterns between the model and
simulations. There is a slight horizontal shift at k due to the
abstracted noise. In the simulator, Γ is set as in (9), which may
be a bit too high or low depending on actual noise patterns. In
Fig. 16a, Γ was relatively low, causing a drop in the simulated
Psa at smaller k compared to the model. In Fig. 16b, Γ was
relatively high, replicating Psa at higher k.
Another difference between simulations and the model
manifests with increasing the distance d between both de-
vices. In practice, in UWB, receivers increase their ability
to reconstruct the signals (hence, the SNR) by aggregating
over more pulses. We noticed that the model provides such
comparable probability patters when we decrease α and β
in the model proportionally with increasing d in simulations.
For example in Fig. 16b where d = 100m, α and β in the
simulator had to be increased from 15 and 158 to 50 and 500
respectively (∼ tripled) to account for the increased distance.
Validating the false positives. We also used simulations
to conﬁrm that noise would not be falsely mistaken for au-
thentic code upon proper selection of Pnoise and Γ. For various
distances between 10m and 100m, the probability of a false
positive was ∼ 1 × 10−6, conﬁrming the noise analysis in
84    28th USENIX Security Symposium
USENIX Association
1
α
b
>
β
b
P
1
α
b
>
β
b
P
Probabilistic Model
Simulation Results (box plots)
0.3
α
b
>
β
b
P
1
α
b
>
β
b
P