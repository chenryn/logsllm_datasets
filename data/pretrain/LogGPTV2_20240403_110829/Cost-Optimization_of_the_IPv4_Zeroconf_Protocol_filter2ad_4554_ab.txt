sent we charge a certain cost c. (ii) Since sending an ARP
probe also means to wait for a certain time r, we also charge
a cost of r to each ARP probe sent. Therefore, we attach the
cost n · (r + c) to the transition from start to ok. If, on
the other hand, the system moves to state 1st, then the host
will send an ARP probe, and listen for r seconds. To model
the costs incurred, we attach the cost r + c to the transition
from state start to state 1st. In this state, the host is ask-
ing to acquire an IP number which is already used by some
Proceedings of the 2003 International Conference on Dependable Systems and Networks (DSN’03) 
0-7695-1959-8/03 $17.00 (c) 2003 IEEE
other member of the network. But for different reasons, that
member may not reply within r time units: either the probe
got lost, or the host that ought to reply is busy, or the reply
packet gets lost. To account for this, we assume that with a
certain probability p1 there will be no reply in response to
the ﬁrst ARP probe, and the protocol moves to state 2nd, in
which a second ARP probe will be sent, which again costs
r + c. If, however, all goes well the protocol will receive an
ARP reply indicating that the selected IP address is already
in use.
In that case the model returns to the initial state
start and starts all over again. This happens with proba-
bility 1 − p1. The behavior in states 2nd, 3rd, . . . , nth is
very similar to that in state 1st, only the probabilities of not
receiving a reply to one of the previously sent out probes are
p2, p3, . . . , pn. If in state nth the nth and last ARP probe
still remains unanswered, the host will decide to start using
the new IP address even though there is an address collision.
In this case, the protocol has clearly reached an undesirable
state, because the maintenance mechanism will later have
to launch a costly protocol to re-establish the integrity of
the IP numbers. Therefore we attach some (high) cost E to
the transition from nth to error. This cost is an abstract
value for the average burden incurred by the user due to the
interrupt of the network service.
The above model abstracts away from a few details con-
sidered in [2]: (a) a host may decide not to retry IP addresses
that failed before; (b) if the number of collisions a host has
experienced so far exceeds 10 then it must limit the rate at
which it probes for new addresses to maximally one address
per minute.
3.2 No-answer probabilities
In the above description of the model the probabilities
p1, p2, . . . , pn were left unspeciﬁed. These probabilities,
representing the probability of not receiving an answer in
round 1, . . . , n of the protocol have a decisive inﬂuence on
the characteristics of the model, and we must provide rea-
sonable values for them. In this section we will consider
this problem.
There is certainly some interdependency between the
probabilities pi and r, the length of a listening period. For
example, p1 is the probability, that no reply to the ﬁrst ARP
probe sent arrives within the ﬁrst listening period.
Intu-
itively one would assume that, the shorter r is, the higher
p1, and the longer r, the lower p1. If we assume a certain
round-trip delay d for an underlying network, then we can
be quite sure that p1 = 1, if r  d, then p1 < 1
seems reasonable, but there might still be the possibility that
the reply packet does not arrive.
A similar reasoning applies to p2, i.e., there might be
a positive probability that the second ARP probe remains
unanswered in the second listening period. However, it
might be the case that the reply to the ﬁrst ARP probe ar-
rives in the second listening period, and this possibility must
also be taken into account. So p2 should be the probability
that neither the reply to the second nor the reply to the ﬁrst
ARP probe is received in the second listening period. Con-
sequently, p3 must be the probability that no reply for the
ﬁrst, the second, or the third ARP probe is received in the
third listening period, and so on for p4, p5, . . . , pn.
As a ﬁrst conclusion, it is reasonable to assume that pi is
actually a function in r, pi(r). How do we deﬁne the pi(r)?
Consider ﬁrst a random variable X which denotes the time
that a reply to an ARP probe is received, once this probe has
been sent. As usual, FX(t) = Pr{X ≤ t}. We also know
that Pr{t1 ≤ X ≤ t2} = FX(t2)− FX(t1). We deﬁne now
the function P : (IN × IR+) → [0, 1] as:
(cid:3)
(cid:2)
i(cid:1)
P (i, r) =
j=1
1 − FX(jr) − FX((j−1)r)
1 − FX((j−1)r)
,
(1)
and we set pi(r) = P (i, r). A few remarks about (1) are in
order. The expression FX(jr) − FX((j−1)r) denotes the
unconditional probability that a reply packet is received in
the interval [(j−1)r, jr). The quotient in the above equa-
tion is equal to the probability that a reply packet is received
in the interval [(j−1)r, jr), given that it has not yet ar-
rived in the interval [0, (j−1)r). We have to take this side-
condition into account, since in state ith we know that no
reply has arrived before. The complement (1−··· ) appear-
ing in the product in (1) is then the probability that the reply
on the (i − j + 1)-th ARP probe does not arrive in interval
[(j−1)r, jr), given that it has not arrived in [0, (j−1)r).
The product over j = 1, . . . , i is then the probability that
no reply to any of the i ARP probes sent out earlier arrives
in interval [(j−1)r, jr). Although it does not appear in the
model, we deﬁne p0(r) = P (0, r) = 1. Note that P is not
a distribution function or density in r. Note further that by
deﬁning P (i, r) as in (1), we silently assume that the ARP
probes and the respective replies behave stochastically inde-
pendent from each other. This is a simpliﬁcation—usually
this assumption is not justiﬁed, since error situations might
have some persistence. As a consequence, the probability
that a packet gets lost might increase in the case that the
previous packet was lost (error bursts). Our model does not
take this possibility into account.
Now, the question arises how FX should be chosen.
Preferably, it should be based on measurements. For now
we do not have measurements available. However, we will
later deﬁne distributions to demonstrate the concept. The
distributions are not accurate in the sense that they describe
the reality in detail, but they address an important issue,
which we will explain now. Normally, distribution func-
tions are monotonically increasing functions from 0 to 1,
i.e., if F is a distribution function, then 0 ≤ F (0) ≤ 1,
and limt→∞ F (t) = 1. However,
if we assume that
Proceedings of the 2003 International Conference on Dependable Systems and Networks (DSN’03) 
0-7695-1959-8/03 $17.00 (c) 2003 IEEE
limt→∞ FX = 1, we implicitly assume that a reply to
an ARP probe is only delayed (perhaps for a long time),
but will always arrive eventually. The real loss of pack-
ets (perhaps caused by electro-magnetic interference on a
radio based network) is not taken into account. A way to
incorporate the possibility of packets losses is to consider
defective distributions, i.e., non-negative, monotonously in-
creasing functions D(t) such that limt→∞ D(t) = l < 1.
Then 1−l is the probability that a reply is never received.
Apparently, F (t) = 1
l D(t) is a distribution function, and
D(t) = lF (t) is the probability that a reply arrives and that
it arrives in the interval [0, t). We will see an example of
such a distribution in Section 4.3.
3.3 Abstract costs
Our treatment of costs deserves some explicit discussion.
From a certain point of view, we are facing three types of
cost: time, network usage, and the cost for an error that is
charged when an IP address is erroneously accepted. How-
ever, we deliberately blur such a threefold distinction, in
order to provide a uniform way of modeling the customers
perspective on each of the above. For us, cost is a quantity
that weighs the inﬂuence of unwanted behavior on the user.
Technically, a cost ζ is incurred if a transition with cost ζ
is traversed. Each path through the DTMC has a so-called
total cost, which is the sum of the costs of all transitions on
the path.
The ﬁrst type of cost in our model is time, more par-
ticularly, the time to wait for a response to an ARP probe.
This is expressed by the cost parameter r in the model, and
we assume a one-to-one correspondence between time and
cost, i.e., if the waiting time is two seconds, then we set
r = 2.
As mentioned in Section 3.1, we must account for the
network usage of the protocol, since it is a limited resource.
We introduce therefore a second cost parameter c, which we
call the postage for an ARP probe. It is difﬁcult to quantify
the postage in advance, but in Section 4.5 we will estimate
a value for it.
The third type of cost is the cost E of erroneously accept-
ing an IP address, even if it is already in use. This happens
in case that all ARP probes remain unanswered. It is dif-
ﬁcult to assign values for E a priori, since many different
aspects play a role here. From a technical point of view, ac-
cepting an IP address that is in use requires eventually the
reconﬁguration and re-establishment of interfaces and con-
nections, respectively, not only of the wrongly conﬁgured
host, but perhaps even of the other host that got the IP num-
ber ﬁrst. Other aspects are the user dissatisfaction with the
product, when a reconﬁguration becomes necessary. De-
spite the problem to quantify all these different “sources”
of cost, we will estimate a value for E in Section 4.5.
4 The mean cost of a protocol run
Now that we have described our model of the zeroconf
protocol, we can turn our attention to its analysis. Our cen-
tral measure of interest is the mean total cost that is incurred
during initialization, i.e., on the way from state start to
one of the absorbing states, ok, or error. Once we have
a way to analyze this cost as a function C(n, r) in the pa-
rameters n and r, we are interested to determine values for
the integer number n and the listening time r such that the
mean total cost is minimal.
4.1 Cost function
Since the structure of the DRM family we consider pos-
sesses a simple repetitive structure, it is possible to derive
an analytic expression that describes the mean total cost as
a function C(n, r) in the parameters n and r and the co-
efﬁcients c, p1(r), . . . , pn(r), q, and E. This section dis-
cusses how we derive this cost function. We deﬁne the prob-
ability matrices Pn = (p(n)
ij )i,j=1,...,n+3 and cost matrices
Cn = (c(n)
ij )i,j=1,...,n+3, for n = 1, 2, . . ., where the matrix
entries are deﬁned as follows:
p(n)
1,2
p(n)
1,n+3
p(n)
i1
p(n)
i,i+1
p(n)
ii
c(n)
1,n+3
c(n)
i,i+1
c(n)
n+1,n+2 = E
= q
= 1 − q
= 1 − pi−1(r)
= pi−1(r)
= 1
= n · (r + c)
= r + c
for i = 2, . . . , n + 1
for i = 2, . . . , n + 1
for i = n + 2, n + 3
for i = 1, . . . , n
1
2
error
n+2
ok
n+3
···
···
start
1st
nth
n+1
All other entries of Pn and Cn are zero. Note that the en-
tries of both matrices depend on the length of the listening
period r (cf. Section 3.2). The relation between states of the
DRM and indices of the matrices is shown in the following
table:
State
row(·)
Matrix Pn takes only probabilities into account, while ma-
trix Cn describes the costs attached to transitions in the
model. Note that, if pij = 0, then also cij = 0. Fur-
thermore, we assure that cii = 0, for i = n + 2, n + 3.
Otherwise the mean total cost would not be ﬁnite, because
an absorbing state would allow to add costs unboundedly.
The mean total cost C(n, r) we are interested in is the
one obtained when initialising the protocol in state start.
In other words, it is the value of a(n,r)
, assuming a vector
a(cid:1) = (a(n,r)
n+3 )T denoting the mean total costs for
states j ∈ {1, . . . , n + 3}. The values of a(n,r)
can be
expressed as the solution to the following system of linear
, . . . , a(n,r)
1
1
i
Proceedings of the 2003 International Conference on Dependable Systems and Networks (DSN’03) 
0-7695-1959-8/03 $17.00 (c) 2003 IEEE
equations:
n+3(cid:4)
(cid:5)
p(n)
ij
a(n,r)
i
=
c(n)
ij + a(n,r)
j
(cid:6)
.
(2)
j=1
j
n+2 = a(n,r)
n+3 = 0.
The meaning of this system of equations is as follows:
is the cost of transition i → j plus the mean
c(n)
ij + a(n,r)
total cost of state j. So this is the total cost that incurs in
case the transition i → j is chosen. This cost is weighted
with the probability of actually taking this transition from
state i, i.e., p(n)
ij . To obtain the mean total cost of state i
we have to sum this quantity over all possible target states
j ∈ {1, . . . , n+3}. Apparently, a(n,r)
We can rewrite the equation system of the form (2) in a
single matrix-vector equation. Let P(cid:1)
ij )i,j=1,...,n+1
(cid:7)n+3
be the submatrix of Pn spanned by the non-absorbing states
1, . . . , n+1, and let w = (w1, . . . , wn+1)T be a vector
j=1 pijcij. Then the vector a(cid:1) =
satisfying wi =
(a(n,r)
, . . . , a(n,r)
n+1 )T of the mean accumulated costs for
non-absorbing states 1, . . . , n+1 is the solution to the ma-