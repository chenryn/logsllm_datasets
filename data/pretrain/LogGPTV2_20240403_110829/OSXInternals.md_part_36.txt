and then goes into an infinite loop, waiting for get-event to return. Note that this programand Open
Firmware programs in generalcan be interrupted by typing control-z.
Figure 410. Fabricating and using a mouse pointer in Open Firmware
\ Mouse Pointer Demo
\ Commentary required for "booting" this program.
decimal
\ Our mouse pointer's dimensions in pixels
8 value m-ptrwidth
8 value m-ptrheight
\ Colors
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh3C8.htm 20.08.2007
Chapter 4. The Firmware and the Bootloader Page 39 of 86
foreground-color value m-color-ptr
background-color value m-color-bg
\ Variables for saving pointer position
variable m-oldx 0 m-oldx !
variable m-oldy 0 m-oldy !
0 value myscreen
" screen" open-dev to myscreen
0 value mymouse
" mouse" open-dev to mymouse
: mouse-fillrect ( color x y w h -- )
" fill-rectangle" myscreen $call-method ;
: mouse-get-event ( ms -- pos.x pos.y buttons true|false )
" get-event" mymouse $call-method ;
: mouse-demo ( -- )
cr ." Press control-z to quit the mouse demo." cr
begin
0
mouse-get-event
if
\ Check for button presses
0 = ( pos.x pos.y buttons 0 = )
if
\ no buttons pressed
else
( pos.x pos.y )
2dup m-oldy @ + swap m-oldx @ +
." button pressed ( " . ." , " . ." )" cr
then
m-color-bg ( pos.x pos.y m-color-bg )
m-oldx @ ( pos.x pos.y m-color-bg m-oldx )
m-oldy @ ( pos.x pos.y m-color-bg m-oldx m-oldy )
m-ptrwidth ( pos.x pos.y m-color-bg m-oldx m-oldy )
m-ptrheight ( pos.x pos.y m-color-bg m-oldx m-oldy )
mouse-fillrect ( pos.x pos.y )
m-color-ptr ( pos.x pos.y m-color-ptr )
-rot ( m-color-ptr pos.x pos.y )
m-oldy @ ( m-color-ptr pos.x pos.y m-oldy )
+ ( m_color pos.x newy )
swap ( m-color-ptr newy pos.x )
m-oldx @ ( m-color-ptr newy pos.x m-oldx )
+ ( m-color-ptr newy newx )
swap ( m-color-ptr newx newy )
2dup ( m-color-ptr newx newy newx newy )
m-oldy ! ( m-color-ptr newx newy newx )
m-oldx ! ( m-color-ptr newx newy )
m-ptrwidth ( m-color-ptr newx newy m-ptrwidth )
m-ptrheight ( m-color-ptr newx newy m-ptrwidth )
mouse-fillrect
then
again
;
Because we are using a mouse, get-event will give us the new position relative to the old one. Therefore,
we need to remember the old coordinates. Once we get the new position, we will erase the old pointer and
draw one in the new position. For the sake of simplicity, we will not handle the case when the pointer is
moved "outside" one of the edges of the screen. Moreover, our mouse pointer is essentially an eraser in
the drawing sense too: Since we will not save the region under the pointer, anything that the pointer
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh3C8.htm 20.08.2007
Chapter 4. The Firmware and the Bootloader Page 40 of 86
moves over will be erased as we will simply redraw the newly uncovered region using the background
color.
We can also create an arbitrarily shaped mouse pointer, including a familiar arrow-shaped one that is
partially transparent, by using a well-known masking technique. Suppose we wish to create a 5x5 pointer
in the shape of an X. If C is the pointer's color and S is the screen background color, then the 5x5 square
containing the pointer would look like the following when displayed on the screen:
C S S S C
S C S C S
S S C S S
S C S C S
C S S S C
We can achieve this effect by having two masks: an AND mask and an XOR mask, as shown in Figure
411.
Figure 411. AND and XOR masks for an X-shaped pointer
0 1 1 1 0 C 0 0 0 C S S S S S
1 0 1 0 1 0 C 0 C 0 S S S S S
1 1 0 1 1 0 0 C 0 0 S S S S S
1 0 1 0 1 0 C 0 C 0 S S S S S
0 1 1 1 0 C 0 0 0 C S S S S S
AND mask (A) XOR mask (X) Screen (S)
While displaying the cursor on the screen, we use the following sequence of operations, which yields the
desired 5x5 square:
S = (S AND A) XOR X
new current
We now need to maintain in-memory bitmaps for the pointer and the region underneath it. Before drawing
the contents of the pointer's bitmap on the screen (using draw-rectangle instead of fill-rectangle),
we need to perform the masking operation, which will give us the desired partially transparent mouse
pointer.
4.8.7. Stealing a Font
Apple's Open Firmware includes the terminal-emulator support package, which presents a display
framebuffer device as a cursor-addressable text terminal. Another support package, fb8, provides generic
framebuffer routines that can be used by display device drivers to perform low-level operations. Thus,
there are several ways to display characters on the screen in Open Firmware. We shall devise yet
anotherrather contrivedway in this example.
We will create a function called font-print that takes an input ASCII string and draws it on the screen,
starting at a specified pixel location. To achieve this, we will use the display device's draw-rectangle
method, which requires a memory address containing data for the rectangle to be drawn. We can consider
each character in a font to be contained in an imaginary rectangle. Our program will perform the
following operations.
Create a font containing ASCII characters.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh3C8.htm 20.08.2007
Chapter 4. The Firmware and the Bootloader Page 41 of 86
Allocate a font buffer.
For each character in the font, store its font data in the font buffer at an offset that either is the same
as or is a function of the character's ASCII code.
For each character in the input string, calculate the address of its font data in the font buffer and call
draw-rectangle to draw the character at an appropriate position on the screen.
Although these steps appear straightforward, the first step of creating a font is rather arduousat least in our
context. We will bypass this step in our example by stealing Open Firmware's default font.
As our program is booted by Open Firmware, we will output on the screen a template string containing all
ASCII characters of interest. Open Firmware provides Forth words to determine the height and width of a
character: char-height and char-width, respectively. Since we have a priori knowledge that our string
will appear on the first line of the screen, we know the position and dimensions of the screen region
containing the template string that we print. We will simply copy this region using read-rectangle,
which will give us a ready-made font buffer. Figure 412 shows the implementation of the font-print
word.
Figure 412. Pixel-addressable printing in Open Firmware made possible by stealing a font
\ Font Demo
\ Commentary required for "booting" this program.
decimal
0 value myscreen
" screen" open-dev to myscreen
: font-drawrect ( adr x y w h -- ) " draw-rectangle" myscreen $call-method ;
: font-readrect ( adr x y w h -- ) " read-rectangle" myscreen $call-method ;
\ Starts from (x, y) = (4 * 6, 6 + 6 + 11) = (24, 23)
\ =
\ _ok
\ =
\ 0_>_0123...
\
\ ASCII 32 (space) to 126 (~) decimal
\
." ! #$%&'()*+,-./0123456789:;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmno
pqrstuvwxyz{|}~"
cr cr
32 value f-ascii-min
126 value f-ascii-max
f-ascii-max f-ascii-min - 1 +
value f-nchars
char-height char-width * value f-size
\ Steal the default font
variable f-buffer
f-nchars f-size * alloc-mem
f-buffer !
f-nchars
0
do
f-buffer @ f-size i * +
i char-width *
4
char-width
char-height
font-readrect
loop
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh3C8.htm 20.08.2007
Chapter 4. The Firmware and the Bootloader Page 42 of 86
erase-screen
variable f-string
variable f-x
variable f-y
\ If character is not within the supported range, replace it
: font-validate-char ( char -- char )
dup
f-ascii-min f-ascii-max between
if
\ ok
else
drop
f-ascii-min
then
;
\ Print a string starting at a specified position
: font-print ( string x y -- )
f-y !
f-x !
0
rot
f-string !
do
f-string @ i + c@
font-validate-char
f-ascii-min -
f-size *
f-buffer @ +
f-x @ i char-width * +
f-y @
char-width
char-height
font-drawrect
loop
;
4.8.8. Implementing a Clock
Given the functionality of font-print from Figure 412, we can make a clock appear, say, in a corner of
the screen. We will use two additional functions for this: one to retrieve the current time and another that
will allow us to update the clock every second.
Open Firmware provides the get-time function, which retrieves the current time. Calling the function
results in six items being pushed on the stack:
0 > decimal get-time .s -> 32 16 12 20 3 2004  : myhello ( -- ) ." Hello!" ; ok
0 > myhello Hello ok
0 > ['] myhello . ff9d0a30 ok
0 > ff9d0a30 execute Hello ok
Given an execution token of a function, the execute word can be used to execute the corresponding
function. Note that retrieving a function's execution token is context-specific: ['] is not a valid way to get
a method's execution token inside a word definition, for example.
The code shown in Figure 413 creates a clock that updates every second. It is displayed at the top-right
corner of the screen. Note that (u.) converts an unsigned number into a text string, which is what font-
print requires as one of the arguments.
Figure 413. A clock implemented in the Open Firmware environment
: mytime ( -- )
get-time ( seconds minutes hour day month year )
3drop ( seconds minutes hour )
swap ( seconds hour minutes )
rot ( hour minutes seconds )
(u.) screen-width 2 char-width * - 0 font-print
" :" screen-width 3 char-width * - 0 font-print
(u.) screen-width 5 char-width * - 0 font-print
" :" screen-width 6 char-width * - 0 font-print
(u.) screen-width 8 char-width * - 0 font-print
;
' mytime 1000 alarm
4.8.9. Drawing Images
In this example, let us examine how to draw images in Open Firmware. In fact, we have already
encountered all the functionality required to do so: The draw-rectangle function can draw a memory
buffer's contents to screen. The buffer requires the image data to be in an appropriate format. We can
make the task easier by choosing to draw the Apple logo drawn during booting, since we can find the
corresponding data in the correct format in the bootloader's source code.
Drawing the Apple logoor any image in generalwill require the logo data and the custom CLUT (if one is
needed) to be in memory. The Apple logo data can be found in a C header file called appleboot.h in
BootX's source (bootx.tproj/sl.subproj/appleboot.h). The custom CLUT can be found in another
header fileclut.hin the same directory as appleboot.h. Both files contain byte arrays that can be readily
used with Open Firmware. For example, the CLUT data can be simply passed to set-colors. Thus, we
can draw the Apple logo using the following steps.
 Open the screen device.
 Call set-colors to set up the custom CLUT.
Load the logo data in memory.
 Call draw-rectangle to draw the logo at the desired position.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh3C8.htm 20.08.2007
Chapter 4. The Firmware and the Bootloader Page 44 of 86
If you wish to draw an arbitrary image, you could do so by converting the image to a format that makes it
easy to view the RGB values for each pixel. The ASCII-based portable pixmap (PPM) is such a format.
Given a PPM file, we could write a script that reads the file and generates Forth versions of both the
CLUT and the image data. Consider the example of a 4x4-pixel image, whose PPM file looks like the one
in Figure 414.
Figure 414. PPM image data for a 4x4-pixel image
P3
4 4
15
0 0 0 0 0 0 0 0 0 15 0 15
0 0 0 0 15 7 0 0 0 0 0 0
0 0 0 0 0 0 0 15 7 0 0 0
15 0 15 0 0 0 0 0 0 0 0 0
The first line shown in Figure 414 is a magic number.[14] The second line contains the image's width and
height. The value 15 on the third line specifies the maximum decimal value that a color component has.
The last four lines contain RGB values for each of the 16 pixels of the image. Since this image has only
three distinct RGB triplets, our custom CLUT needs only three entries:
[14] A constant entity (often a number) used to identify some aspect of another entity. For
example, the byte sequence 0xcafebabe, which is used as the beginning of a Universal
Binary file, serves as a magic number identifying the file's type.
decimal
0 0 0 0 color! \ CLUT entry with index 0
15 0 15 1 color! \ CLUT entry with index 1
0 15 7 2 color! \ CLUT entry with index 2
Since Open Firmware's 8-bits-per-pixel model means a CLUT can have at most 256 entries, you may need
to reduce the number of colors in an image before you draw it using the approach described in this
example.
4.8.10. Creating Windows
Given the various examples discussed so far, we are now in a position to create a window that can be
dragged around using the mouse. Doing so may be a worth-while exercise for those interested in learning
how to create graphical environments from scratch. We could combine multiple techniques in the
following way.
Create a "true" mouse pointer using the AND/XOR mask technique.
Create a window with a title bar. This is tantamount to creating a related set of rectangles and lines,
along with some textual or perhaps graphical window content.