### 5.2 Implementation

Figure 2 graphically illustrates the constraints imposed by the various defenses, as detailed in Table 1. The x-axis represents the write constraints, while the y-axis represents the target constraints. Defenses that share the same write and target constraints are considered to impose equivalent security restrictions, forming equivalence classes at each (x, y) point in Figure 2.

It is noteworthy that even seemingly different defenses can offer comparable security guarantees. For example, the figure reveals the following equivalence classes: {XoM, CodeRR, ASLR+Guard}, {TASR, CCFI=CPS}, and {PtrRR, CPI}. These equivalences hold under the assumption of "perfect" implementations, without any implementation-specific vulnerabilities. Our constraint-based classification abstracts away implementation details, thus ignoring differences across defenses. For instance, the :Ptr constraint in RuntimeASLR protects all data pointers, making it stronger than the same constraint in CPI, which only protects data pointers that can be used to read code pointers. The key advantage of our approach is that it allows us to focus on the general constraints for gadget generation across many different defenses.

We now demonstrate how to concretely implement these constraints in Newton using the commands detailed in §4. The discussion is organized around the write constraints imposed by each defense.

#### Corrupting Code Pointers

Defenses that do not implement write constraints allow any memory, including code pointers, to be corrupted. These defenses are positioned on the left of the x-axis in Figure 2 (None).

To model these defenses, we use the Newton script shown in Figure 3a. All example scripts assume a low-effort attacker targeting a server application. After starting the server, the script informs Newton about any target constraints, guiding its static and dynamic analysis of callees and live code pointers. Newton internally supports each possible target constraint shown in Table 1 and Figure 2.

Next, the script taints all memory using the `taint-mem` command. We then send a normal request to the server, causing Newton to track any taint propagation during this request. As the request is processed, Newton logs tainted callsites, their arguments, dependencies, and potential targets. These gadgets can later be retrieved by the user using the `get-gadgets` command.

#### Corrupting Data Pointers

Defenses with the :CPtr write constraint prevent code pointers from being overwritten but do not protect other memory locations. This includes the CCFI/CPS and TASR subclasses. Under these defenses, it is still possible to corrupt data pointers and non-pointers.

We model these defenses in Newton using the script shown in Figure 3b. The script is similar to the one used for defenses without any write constraints, except that after tainting all memory, we use the `taint-wash` command to untaint code pointers. This simulates that code pointers are not overwritable by an attacker, modeling defenses in the :CPtr write constraint class.

#### Corrupting Non-Pointers

Under defenses that implement the :Ptr write constraint, neither code nor data pointers can be written, limiting the attacker to overwriting only non-pointers. We simulate this using the script shown in Figure 3c, where we clear the taint for both code and data pointers after tainting memory.

#### Corrupting Segregated State

As mentioned in §5.1, we model the CsCFI subclass using write constraints instead of target constraints, as this makes CsCFI easier to emulate in Newton. The write constraints impose a "segregated memory" defense model, where an attacker corrupts program state in such a way that this state is not modified by subsequent history-flushing requests. The attacker then uses an arbitrary number of these requests to flush the context of the CsCFI defense, after which it becomes possible to use the previously corrupted state to trigger an exploit.

We model this in Newton using the script shown in Figure 3d. The script starts by initiating the victim server and setting the target constraints. Next, we disable taint propagation, taint all memory, open an attack connection (c1), and flip the taint state of all memory. Opening the connection clears taint on the memory touched by the connection state. When we flip the taint state, the untainted memory (containing the connection state) becomes tainted, while all other memory becomes untainted. This models the initial segregated (connection) state, which serves as the attack surface in the final exploit. Note that the segregated state is not idle, as the attack connection remains open, and there may be multiple active connections in parallel.

We then send an arbitrary number of idempotent requests to the server over an independent history-flushing connection c2 to model flushing the CsCFI context and ensure no interference with the state of connection c2. Finally, we re-enable taint propagation, resume the attack connection c1, and send the final request. The result is a list of callsites (with possible targets and dependencies) tainted only by attacker-controlled connection-specific state, controllable by the attacker after the history-flushing attack is complete. This mitigates concerns about long-lived structures in the quiescent state being modified by parallel connections.

### 6. Evaluation

We evaluate Newton against three web servers (nginx, Apache, and lighttpd), a distributed memory cache system (memcached), an in-memory database (redis), and a domain name system (bind). We compile the servers as position-independent code using gcc. Using Newton scripts as presented in §5.2, we instruct our target constraint manager to apply each of the target-based policies from §5, in addition to the baseline described in §2. We divide the deployed defenses into those with static target constraints and dynamic ones.

Recall from §5.2 that our scripts instruct the write constraint manager to apply the following types of write constraints:
1. **None**: Baseline where an attacker can corrupt anything, including code pointers.
2. **:CPtr**: Policies that restrict the corruption of code pointers.
3. **:Ptr**: Policies that enforce pointer integrity.
4. **Segr**: Context-sensitive CFI.

We first perform a detailed evaluation for nginx, providing statistics on the controllability of each executed indirect callsite. Later, in §7, we show how to use this information to mount defense-aware attacks against nginx. In the second part of the evaluation, we provide summarized results for all tested servers to illustrate the wide applicability of our attack methodology.

Note that we do not evaluate the expressiveness of code-reuse attacks based on Newton, i.e., we do not study whether Newton can produce Turing-complete attacks. Turing-completeness neither guarantees nor is a prerequisite for successful exploitation and does not affect the applicability of Newton. An attacker is unlikely to care about finding all Turing-complete gadgets if one or two already provide enough means for arbitrary code execution. Evaluating existing defenses with respect to preventing Turing-complete ROP attacks is an interesting direction for future work.

Although our evaluation focuses on popular system services, the principles of Newton also apply to user applications like browsers, document readers, and word processors. The large memory footprint of such applications, however, means that our libdft-based DTA engine (which is 32-bit only) quickly runs out of memory. This limitation is not fundamental to Newton and can be addressed in future work with additional engineering effort (i.e., porting libdft to x86_64).

#### 6.1 In-Depth Analysis of nginx

We evaluate the controllability of each executed indirect callsite in nginx under all types of write and target constraints. We first examine the residual attack surface per target constraint and then do the same for each write constraint.

**Target Constraints**

Table 2 depicts the residual attack surface in nginx under different target constraints. We consider dynamic and static target constraints separately in Tables 2a and 2b, respectively. It should be noted that the numbers shown for dynamic constraints are susceptible to the coverage of our dynamic analysis. We assume a low-effort attacker, so the numbers in Table 2a cover the case where the attacker sends only a simple GET request to nginx. A more determined attacker could uncover more attack surface.

We show absolute numbers for dynamic constraints but median results for static constraints. This is because static target constraints limit the number of targets per callsite, while dynamic constraints limit the total number of legal pointers in memory.

To interpret the tables, consider an example row from each table. For Table 2a, consider the Computed target constraint, used by the HCFI defense subclass, implemented by Per-Input CFI [51]. Under this constraint, only code pointers computed during program execution can be used by an attacker. Table 2a shows that after server initialization and handling of the GET request, 786 such pointers reside in memory. Each indirect callsite may target each of these. Of the computed pointers, 1 was stored on the stack, and 64 on the heap. The remaining originate from the loaded modules: 270 from nginx's data sections (.data, .data.rel.ro, or .rodata), 32 from its global offset tables (.got, .got.plt), and 25 pointers were found in the remaining sections and other modules.

For Table 2b, consider the Safe src types constraint, imposed by the SafeIFCC/MCFI defense subclass, which provides type-based caller/callee matching. The median indirect callsite is allowed to target 176 libc functions and 376 functions in total. The most restricted callsite may call only 2 functions, while the least restricted is allowed to call 394 functions. Each callsite may target at least 2 functions in nginx, while 90% of the callsites may target 69 functions in modules other than nginx or libc.

Overall, the main takeaway from Table 2 is the ease with which our methodology allows us to compare the strength of even extremely different defense subclasses. For instance, it is clear from Table 2a that the strongest dynamic target constraint is Live :GOT, imposed by the XoM++ defense subclass. Comparing Tables 2a and 2b, it is also clear that static type-based constraints are generally stronger than dynamic ones, with the strongest target constraints being imposed by source-level type-based defenses. Even for the strongest target constraints, there is still a significant residual attack surface.

**Write Constraints**

We now consider the potential controllability of callsites in nginx given varying write constraints. Moreover, we show that for each executed callsite, a nontrivial attack surface remains even under the strongest combinations of write and target constraints.