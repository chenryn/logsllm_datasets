fect is achieved by isolating code pointers in a memory region not
accessible to an attacker.
Finally, CPI is equivalent to CPS, except that it isolates not only
code pointers, but also data pointers that point to structures con-
taining code pointers. Thus, CPI imposes a stronger write con-
straint than CPS, forbidding writes to memory locations contain-
ing either code or data pointers (:Ptr).
5.2 Implementation
Figure 2 graphically depicts the constraints imposed by the de-
fenses, as detailed in Table 1. The x-axis shows the write con-
straints imposed by each defense subclass, while the y-axis shows
the target constraints. Defenses that share both the same write and
target constraints impose equivalent security restrictions, so that
each (x; y) point in Figure 2 forms an equivalence class.
It is interesting to note that even defenses that seem quite dif-
ferent on the surface actually turn out to offer comparable guar-
antees. For instance, the figure reveals the following equivalence
classes containing multiple defenses each: fXoM; CodeRR; ASLR (cid:0)
Guardg, fT ASR; CCF I =CPSg, and fPtrRR; CPIg. Note that these
equivalences hold only when assuming "perfect" implementations
of each defense, without any implementation-specific vulnerabili-
ties. In addition, our constraint-based classification abstracts away
implementation details and hence ignores implementation-specific
differences across defenses. For instance, the :Ptr constraint in
RuntimeASLR protects all data pointers, and could thus be consid-
ered stronger than the same constraint in CPI, which protects only
data pointers that can be used to read code pointers. The key ad-
vantage of our approach is that it allows us to focus on the general
constraints for gadget generation across many different defenses.
We now demonstrate how to concretely implement constraints
for the mapped defenses in Newton, using the commands detailed
in §4. We organize the following discussion around the write con-
straints imposed by each defense.
Corrupting code pointers. All defense subclasses that do not
implement write constraints allow any memory to be corrupted,
including code pointers. These defenses are on the left of the x-
axis in Figure 2 (None).
To model these defenses, we use the Newton script shown in
Figure 3a. All our example scripts assume a low-effort attacker at-
tacking a server application. After starting the server, the script
first informs Newton about any target constraints; this guides
Newton’s static and dynamic analysis of callees and live code
pointers. Newton has internal support for each of the possible
target constraints shown in Table 1 and Figure 2.
NoneLive +pageBin typesComputedLiveLive ¬GOTSafe src typesSrc typesNone¬Cptr¬PtrSegrTarget ConstraintWrite ConstraintControl Flow Integrity (CFI)Information Hiding (IH)Re-Randomization (RR)Pointer Integrity (PI)TypeArmorSafeIFCC/MCFIIFCC/MCFIHCFICsCFIOxymoronXoMXoM++CodeRRTASRPtrRRASLR-GuardCCFI/CPSCPISession H2:  Code Reuse AttacksCCS’17, October 30-November 3, 2017, Dallas, TX, USA1681Next, the script taints all memory using the taint-mem com-
mand. We then send a normal request to the server, causing New-
ton to track any taint propagated during this request. As the re-
quest is processed, Newton logs tainted callsites, their arguments,
dependencies, and potential targets. These gadgets can then later
be retrieved by the user (get-gadgets command).
Corrupting data pointers. Defense subclasses with the :CPtr
write constraint prevent code pointers from being overwritten,
but do not protect other memory locations. This includes the
CCFI/CPS and TASR subclasses. As a result, under these defenses,
it is still possible to corrupt data pointers (as well as non-pointers).
We model these defenses in Newton using the script shown in
Figure 3b. The script is identical to the script we used to model de-
fenses without any write constraints, except that after tainting all
memory, we use the taint-wash command to untaint code point-
ers. This has the result of simulating that code pointers are not
overwritable by an attacker, thus modeling defenses in the :CPtr
write constraint class.
Corrupting non-pointers. Under defenses that implement
the :Ptr write constraint, neither code nor data pointers can be
written, limiting the attacker to overwriting only non-pointers. We
simulate this using the script shown in Figure 3c, in which we clear
the taint for both code and data pointers after tainting memory.
Corrupting segregated state. As mentioned in §5.1, we model
the CsCFI subclass using write constraints instead of target con-
straints, as this makes CsCFI easier to emulate in Newton. As de-
scribed earlier, the write constraints impose a “segregated mem-
ory” defense model, in which an attacker corrupts program state
in such a way that this state is not modified by subsequent history-
flushing requests. The attacker then uses an arbitrary number of
these requests to flush the context of the CsCFI defense, after
which it becomes possible to use the previously corrupted state
to trigger an exploit.
We model this in Newton using the script shown in Figure 3d.
The script begins by starting the victim server and setting the tar-
get constraints, as usual. Next, we disable taint propagation, after
which we taint all memory and open an attack connection (c1),
and finally flip the taint state of all memory. Opening the connec-
tion has the effect of clearing taint on the memory touched by the
connection state. Thus, when we flip the taint state, the untainted
memory (containing the connection state) becomes tainted, while
all other memory becomes untainted. This way, we model the ini-
tial segregated (connection) state, which will serve as the attack
surface in the final exploit. Note that the segregated state is not an
idle state as our attack connection is still open, and that there are
possibly many more active open connections in parallel.
We now send an arbitrary number of idempotent requests to the
server over an independent history-flushing connection c2. This is
to model flushing the CsCFI context and also ensure there is no
interference with the state of connection c2. Finally, we re-enable
taint propagation, resume the attack connection c1 (left open pre-
viously), and send the final request. The final result of the analysis
is a list of callsites (with possible targets and dependencies) which
are tainted only by attacker-controlled connection-specific state,
and are thus controllable by the attacker after the history-flushing
attack is complete. This voids the concern that some of the long-
lived structures in the quiescent state may be modified by parallel
connections.
6 EVALUATION
We evaluate Newton against three web servers (nginx, Apache,
and lighttpd), a general-purpose distributed memory cache sys-
tem (memcached), an in-memory database (redis), and a domain
name system (bind). As is common these days, we compile the
servers as position independent code, using gcc as our compiler.
Using Newton scripts as presented in §5.2, we instruct our tar-
get constraint manager to apply each of the target-based policies
from §5 (in addition to the baseline as described in §2). As described
there, we divide the deployed defenses into those with static target
constraints, and dynamic ones.
Also recall from §5.2 that our scripts instruct the write con-
straint manager to apply the following types of write constraints:
(1) None, this is our baseline where an attacker can corrupt any-
thing, including code pointers; (2) :CPtr, policies that restrict the
corruption of code pointers; (3) :Ptr, policies that enforce pointer
integrity; and (4) Segr, for context-sensitive CFI.
We first perform a detailed evaluation for nginx, in which we
provide statistics on the controllability of each executed indirect
callsite. Later, in §7, we show how to use this information to mount
defense-aware attacks against nginx. In the second part of this
evaluation, we provide summarized results for all tested servers,
to illustrate the wide applicability of our attack methodology.
Note that we do not evaluate the expressiveness of code-reuse
attacks based on Newton, i.e., we do not study whether Newton
can produce Turing-complete attacks. The motivation behind this
is that Turing-completeness neither guarantees nor is a prerequi-
site for successful exploitation and as such does not affect the ap-
plicability of Newton: an attacker is unlikely to care about finding
all Turing-complete gadgets if only one or two already provide him
with enough means to gain arbitrary code execution. We consider
a study in which existing defenses are evaluated with respect to
whether they prevent Turing-complete ROP attacks as an interest-
ing starting point for future work.
Although our evaluation focuses on popular system services,
the principles of Newton also apply to user applications like
browsers, document readers, and word processors. The large mem-
ory footprint of such applications, however, means that our libdft-
based DTA engine (which is 32-bit only) quickly runs out of mem-
ory. This limitation is not fundamental to Newton, and can be
addressed in future work with additional engineering effort (i.e.,
porting libdft to x86_64).
6.1 In-Depth Analysis of nginx
We now evaluate the controllability of each executed indirect call-
site in nginx, under all types of write and target constraints. We
first examine the residual attack surface per target constraint, and
then do the same for each write constraint.
Target constraints. Table 2 depicts the residual attack surface
in nginx under different target constraints. We consider dynamic
and static target constraints separately, in Tables 2a and 2b, respec-
tively. It should be noted that the numbers shown for dynamic
Session H2:  Code Reuse AttacksCCS’17, October 30-November 3, 2017, Dallas, TX, USA1682Table 2: Number of permissible targets in nginx under each target constraint policy.
(a) Results for dynamic target constraints. Targets: absolute number of legal function targets found in the main nginx module, libc, other modules, and in total,
respectively. Target location: locations of the code pointers to legal targets (stack, heap, or .data/.got/other segment in a particular module).
Dynamic
target constraint
None
Live +page
Computed
Live :GOT
Live
Targets
Target location
nginx
libc
other
total
stack
heap
1035
811
363
362
360
2763
1264
323
316
279
794
411
100
89
69
4592
2486
786
767
708
–
15
1
1
1
–
475
64
64
64
nginx
data GOT
–
399
32
31
0
–
261
270
269
269
other
–
81
25
25
25
libc
data GOT
–
26
2
2
0
–
666
240
237
237
other
–
67
42
41
41
other
data GOT
–
257
38
31
0
–
207
65
60
60
other
–
32
7
6
6
(b) Results for static target constraints. Targets: median (and minimum/maximum) number of legal function targets per callsite. Target distribution: minimum/90th
percentile/maximum number of targets pointing to each module, per callsite.
Static
target constraint
Bin types
Safe src types
Src types
Source
Targets (median)
Target distribution
nginx
libc
other
total min max
328
117
12
12
960
176
0
0
370
65
0
0
1665
376
19
19
953
2
1
1
2820
394
61
61
nginx
90p max min
549
758
0
135
0
58
57
0
758
153
61
61
min
201
2
1
1
libc
90p max min
203
1625
0
230
0
0
0
0
1625
230
20
20
other
90p max
437
437
72
69
28
0
0
28
target constraints are susceptible to the coverage of our dynamic
analysis. As mentioned, we assume a low-effort attacker; thus, the
numbers shown in Table 2a cover the case where the attacker sends
only a simple GET request to nginx. It is conceivable that a more
determined attacker could uncover even more attack surface than
shown in Table 2a.
Also note that we show absolute numbers for dynamic con-
straints, but median results for static constraints. This is because
static target constraints limit the number of targets per callsite,
while dynamic constraints limit the total number of legal pointers
in memory.
To interpret the tables, we look at one example row from each
table. We begin with an example from Table 2a. Consider the Com-
puted target constraint, which is used by the HCFI defense sub-
class, implemented by Per-Input CFI [51]. Under this constraint,
only code pointers which have been computed during program ex-
ecution can be used by an attacker. Table 2a shows that after server
initialization and handling of the GET request, 786 such pointers
reside in memory. Thus, each indirect callsite may target each of
these. Of the computed pointers, 1 was stored on the stack, and 64
on the heap. The remaining originate from the loaded modules: 270
from nginx’ data sections (.data, .data.rel.ro, or.rodata),
32 from its global offset tables (.got, .got.plt), and 25 pointers
were found in the remaining sections and other modules.
To explain Table 2b, we consider the Safe src types constraint,
imposed by the SafeIFCC/MCFI defense subclass, which provides
type-based caller/callee matching. In this, the median indirect call-
site is allowed to target 176 libc functions, and 376 functions in
total. The most restricted callsite may call only 2 functions, while
the least restricted is allowed to call 394 functions. Each callsite
may target at least 2 functions in nginx, while 90% of the callsites
may target 69 functions in modules other than nginx or libc.
Overall, the main takeaway from Table 2 is the ease with which
our methodology allows us to compare the strength of even ex-
tremely different defense subclasses. For instance, it is clear from
Table 2a that the strongest dynamic target constraint is Live :GOT,
imposed by the XoM++ defense subclass. Comparing Tables 2a
and 2b, it is also clear that static type-based constraints are in gen-
eral stronger than dynamic ones, with the strongest target con-
straints being imposed by source-level type-based defenses. It is
also worth noting that even for the strongest target constraints,
there is still a significant residual attack surface.
Write constraints. We now consider the potential controllabil-
ity of callsites in nginx given varying write constraints. Moreover,
we also show that for each executed callsite, a nontrivial attack
surface remains even under the strongest combinations of write