tions include at least one third-party JavaScript library [59],
such as jQuery [12], to beneﬁt from their powerful abstrac-
tions over the low-level browser APIs. Detection of client-
side CSRF requires the ability to determine when the program
performs HTTP requests, also when the program delegates
low-level network operations to libraries. Similarly, library
functions can be part of the data ﬂows of a program.
To date, existing approaches are highly inefﬁcient as they
include the source code of libraries in the analysis. We ob-
serve that external libraries account for 60.55% of the total
JavaScript lines of code of each web page2, thus requiring
existing techniques to re-process the same code even when
visiting a new page of the same web application. An alter-
native approach consists of creating hand-crafted models of
libraries (see, e.g., [48]). While such an approach is effective
when modeling low-level browser APIs, it does not scale well
to external libraries. First, external libraries are updated more
frequently than browser APIs and second, there are many
alternative libraries that a JavaScript program can use [31].
2.3 Overview of our Approach
To overcome our challenges, we propose hybrid property
graphs (hereafter HPGs), a canonical, graph-based model for
JavaScript programs. Also, we propose JAW, a framework
that constructs HPGs starting from a seed URL, and detects
client-side CSRF leveraging declarative graph traversals.
Addressing challenges. Our approach addresses our chal-
lenges as follows:
(C1) HPGs provide a uniform canonical representation for
JavaScript source code, similarly as code property graphs
for C/C++ [91] and PHP [33].
(C2) We deﬁne HPGs and develop JAW to enable us to per-
form a variety of security tasks, i.e., detection and ex-
ploratory analyses of the client-side CSRF vulnerability.
We believe that decoupling the code representation (the
graph) from the analysis (traversals) potentially renders
JAW more suitable for reuse (like other CPG-based ap-
proaches [33, 91]). In this paper, however, we do not
target nor claim the HPG reusability, as our objective is
to study client-side CSRF.
(C3) HPGs captures JavaScript nuances such as event-based
transfer of control by proposing the Event Registration,
Dispatch and Dependency Graph (ERDDG).
(C4) HPGs captures the dynamics of the web execution en-
vironment of client-side JavaScript programs via both
snapshots of the web environment (e.g., DOM trees) and
traces of JavaScript events.
2We calculated the fraction of library lines of code over the testbed web
applications of §5.1 using the crawler and the conﬁguration of the data
collection phase of §4.1.
(C5) JAW can generate reusable symbolic models of external
libraries, that will be used as proxy in our HPGs.
Overview. JAW takes in input a seed URL of the application
under test. Then, it uses a web crawler to visit the target. Dur-
ing the visit, JAW stores the JavaScript and HTML code, and
monitors the execution capturing snapshots of the DOM tree,
HTTP requests, registered handlers, and ﬁred events. By using
a database of known signatures for common libraries, JAW
identiﬁes external libraries and generates a symbolic model
for each of them. The symbolic model consists of a mapping
between elements of the library (e.g., function names) and
a set of semantic types characterizing their behaviors. Then,
JAW builds the HPG for each stored page, and link the HPG
with the pre-generated semantic models. Finally, JAW can
query the HPG for detection or interactive exploration of
client-side CSRF vulnerabilities.
3 Hybrid Property Graph
This section introduces hybrid property graphs (HPGs). A
HPG comprises of the code representation and state values.
The code representation uniﬁes multiple representations of
a JavaScript program whereas the state values are a collec-
tion of concrete values observed during the execution of the
program. We use a labeled property graph to model both, in
which nodes and edges can have labels and a set of key-value
properties. The example below shows a graph where li is the
node label and r j is the relationship label. Nodes and edges
can store data by using properties, a key-value map.
Figure 3: Example of labeled property graph
In the rest of this section, we present how we map the
code representation and state values into a graph (Sections 3.1
and 3.2), and show how we can instantiate and query such a
graph to study client-side CSRF vulnerabilities (§3.3).
3.1 Code Representation
The code representation models the JavaScript source code
and builds on the concept of code property graph (CPG) which
combines three representations for C programs, i.e., abstract
syntax tree, control ﬂow graph, and program dependence
graph [91]. Later, the same idea has been adapted to study
PHP programs [33], extending CPGs with call graphs. HPGs
further extend CPGs with the event registration, dispatch, and
dependency graph and the semantic types.
Abstract Syntax Tree (AST). An AST is an ordered tree
encoding the hierarchical decomposition of a program to
its syntactical constructs. In an AST, terminal nodes repre-
sent operands (e.g., identiﬁers), and non-terminal nodes corre-
spond to operators (e.g., assignments). In Figure 2, AST nodes
are represented with rounded boxes. Terminal nodes are in
bold-italic, whereas non-terminal nodes are all capitals. AST
2528    30th USENIX Security Symposium
USENIX Association
Figure 2: HPG for the running example in Listing 1. The top part depicts the code representation, including the AST (black edges), CFG (green edges), IPCG
(orange edges), PDG (blue edges), ERDDG (red edges), and the semantic types (blue and orange ﬁlled circles representing WIN.LOC and REQ types, respectively).
Note that not all nodes and edges are shown for brevity. Edges connected to dotted boxes reﬂect that the edge is connected to each node within the box. The
bottom part demonstrates the dynamic state values to augment the static model. Arrows between the two parts represent the link between the two models.
edges connect AST nodes to each other following the produc-
tion rules of the grammar of the language, e.g., in line 10 of
Listing 1, i.addEventListener(‘loadInvoice’, h) is a
call expression (CALL_EXP) with three children, the mem-
ber expression (MMBR_EXP) i.addEventListener, the
literal ‘loadInvoice’ and an identiﬁer h. AST nodes are
core nodes of the code representation, providing the building
blocks for the rest of the presented models.
Control Flow Graph (CFG). A CFG describes the order in
which program instructions are executed and the conditions
required to transfer the ﬂow of control to a particular path of
execution. In Figure 2, CFG is modeled with edges (in green)
between non-terminal AST nodes. There are two types of
CFG edges: conditional (from predicates and labeled with
true or false) and unconditional (labeled with ε). A CFG
of a function starts with a entry node and ends with a exit
node, marking the boundaries of the function scope. These
fragmented intra-procedural ﬂows are connected to each other
by inter-procedural call edges, as discussed next.
Inter-Procedural Call Graph (IPCG). An IPCG allows
inter-procedural static analysis of JavaScript programs. It
associates with each call site in a program the set of functions
that may be invoked from that site. For example, the expres-
sion showInvoicePrice(‘input’) of line 16 in Listing 1
calls for the execution of the function showInvoicePrice
of line 14. We integrate the IPCG in our code representation
with directed call edges, e.g., see the orange edge between the
C_EXP AST node and the F_DECL AST node in Figure 2.
Program Dependence Graph (PDG). The value of a vari-
able depends on a series of statements and predicates, and a
PDG [41] models these dependencies. The nodes of a PDG
are non-terminal AST nodes, and edges denote a data, or
control dependency. A data dependency edge speciﬁes that a
variable, say x, deﬁned at the source node is afterwards used
at the destination node, labeled with Dx. For example, in Fig-
ure 2, variable uri is declared in line 3 (by VAR_DECL), and
used in line 4 (in IF_STMT), and thus a PDG edge (in blue)
connects them together. A control dependency edge reﬂects
that the execution of the destination statement depends on a
predicate, and is labeled by Ct, or Cf corresponding to the
true, or false condition, e.g., the execution of the CALL_EXP
in line 7 depends on the IF_STMT predicate in line 4.
Event Registration, Dispatch and Dependency Graph
(ERDDG). The ERDDG intends to model the event-driven
execution paradigm of JavaScript programs and the subtle
dependencies between event handlers. In an ERDDG, nodes
are non-terminal AST nodes, and we model execution and
dependencies with three types of edges. The ﬁrst edge models
the registration of an event, e.g., line 10 in Listing 1 regis-
ters h as the handler for the custom event loadInvoice. We
represent the registration of an event with an edge of type
registration between the node C_EXP (i.e., the call site for
addEventListener) and the node F_DECL (i.e., the state-
ment where the function h is deﬁned). The second edge mod-
els the dispatch of events. For example, line 15 in Listing 1
calls the browser API dispatchEvent to schedule the execu-
tion of the handler of the loadInvoice event type. We model
the transfer of control with an edge of type dispatch. See, for
example, the edge (in red) between the C_EXP node of line
15 and the C_EXP registering the handler in Figure 2. The last
edge models dependencies between statements and events.
We implement the dependency with an edge between the AST
USENIX Association
30th USENIX Security Symposium    2529
node for the handler’s declaration and the AST nodes of the
handler’s statements. Figure 2 shows such an edge from the
F_DECL node of line 2 and the body of the function.
Semantic Types. The detection of client-side CSRF requires
identifying statements that send HTTP requests, and that con-
sume data values from pre-deﬁned sources. We model the
properties of statements via semantic types. A semantic type
is a pre-deﬁned string assigned to program elements. Then,
types are propagated throughout the code, following the calcu-
lation of a program, e.g., we can assign the type WIN.LOC to
window.location and propagate it to other nodes, following
PDG, CFG, IPCG, and ERDDG edges. In Figure 2, we use
a blue ﬁlled circle for the type WIN.LOC that is propagated
following the Duri PDG edge, i.e., the term uri of line 3, 4,
and 5. Semantic types can also be assigned to functions to
specify their behavior abstractly. For example, we can use the
string REQ for all browser APIs that allow JavaScript programs
to send HTTP requests, such as fetch, or XMLHttpRequest.
HPGs model semantic types as properties of the AST node.
Symbolic Modeling. When analyzing the source code of a
program, we need to take into account the behaviors of third-
party libraries. We extract a symbolic model from each library
and use it as a proxy for the analysis of the application code.
In this work, the symbolic model is an assignment of seman-
tic types to libraries’ functions and object properties. For
example, in Figure 2, we can use the semantic type REQ (rep-
resented with an orange ﬁlled circle) for the asyncRequest
term, and abstract away its actual code. Also, to reconstruct
the data ﬂow of programs that use library functions, we deﬁne
two semantic types modeling intra-procedural input-output
dependencies of library functions. We use the semantic type
o ← i for functions whose input data values ﬂow to the return
value and the type o ~ i for functions whose output is condi-
tioned on the input value (e.g., by an IF_STMT). As we will
show in §4, the symbolic modeling of libraries is performed
automatically by JAW, who creates a mapping between the
library elements and a list of semantic types.
3.2 State Values
JavaScript programs feature dynamic behaviors that are chal-
lenging to analyze via static analysis. As such, we augment
HPGs to include concrete data values collected at run-time,
and link them to the counterpart code representation.
Event Traces. To capture the possible set of ﬁred events
that are not modeled due to the limitations of the static analy-
sis [46], or auto-triggered events, we augment the static model
with dynamic traces of events. Event traces are a sequence
of concrete incidents observed during the execution of a web
page. For example, the load event or a network event for the
response of a HTTP request. We use the trace of events ﬁred
upon the page load to activate additional registration edges in
our ERDDG graph when possible. As shown in Figure 2, the
nodes of the graph for event traces represent concrete events
observed at run-time, and edges denote their ordering.
Figure 4: Examples of vulnerable code. Orange and blue boxes represent
REQ and WIN.LOC semantic types, respectively.
Environment Properties. Environment properties are at-
tributes of the global window and document objects. The
execution path of a JavaScript program and the values of
variables may differ based on the values of the environment
properties. We enrich HPGs by creating a graph of concrete
values for the properties observed dynamically. We also store
a snapshot of the HTML DOM tree [65]. If the value of a
variable is obtained from a DOM API, the actual value can
be resolved from the tree. We use the DOM tree to locate the
objects that a DOM API is referencing. For example, to deter-
mine if an event dispatch is targeting a handler, we can check
if the dispatch and registration is done on the same DOM
object. We create a node for each environment property, and
store concrete values as properties of the node. As depicted
in Figure 2, we connect these nodes by edges representing a
property ownership, or a parent-child relationship.
3.3 Analysis of Client-side CSRF with HPGs
Given a HPG as described in Sections 3.1 and 3.2, we now
use it to detect and study client-side CSRF. We say that a
JavaScript program is vulnerable to client-side CSRF when
(i) there is a data ﬂow from an attacker-controlled input to a
parameter of an outgoing HTTP request req, and (ii) req is
submitted on the page load.
We model both conditions using graph traversals, i.e.,
queries to retrieve information from HPGs. In our work, we
deﬁne graph traversals using the declarative Cypher query
language [3], but in this paper we exemplify Cypher syn-
tax with set notation and predicate logic while retaining the
declarative approach. A query Q contains all nodes n of HPG
for which a predicate p (i.e., a graph pattern) is true, i.e.,
Q = {n : p(n)}. We use predicates to deﬁne a property of a
node. For example, we use the predicate hasChild(n, c) to
say that a node n has an AST child c. Another example of
predicate is hasSemType(n, t), which denotes a node n with
a semantic type t. Predicates can be combined to deﬁne more
complex queries, e.g., via logical operators.
Detection of Client-side CSRF. The ﬁrst condition for
client-side CSRF vulnerability is the presence of attacker-
controlled input parameters for outgoing requests. Figure 4
shows different instances of vulnerable code taken from real
examples, where by construction, we assigned the WIN.LOC
and REQ semantic types to AST nodes, which are shown as
2530    30th USENIX Security Symposium
USENIX Association
blue and orange boxes, respectively. For all three cases of
Figure 4, the goal is to identify the lines of code having both
orange and blue labels (marked with a red arrow). At a high
level, a line of code is a non-terminal AST node for JavaScript
statements or declarations (e.g., EXP_STMT, VAR_DECL),
that we represent with the predicate isDeclOrStmt(n). Then,
once we identify such an AST node n, we need to explore
whether the node has two children c1 and c2 where one is
of type REQ and the other is of type WIN.LOC. Following our
notation for queries, we can write:
N1 ={n : isDeclOrStmt(n) ∧ ∃c1,c2, c1 (cid:54)= c2 ∧
hasChild(n, c1) ∧ hasSemType(c1, “REQ”), ∧
hasChild(n, c2) ∧ hasSemType(c2, “W IN.LOC”)}
(1)
Query 1 is not a sufﬁcient condition to determine the pres-
ence of a client-side CSRF vulnerability, as the returned nodes
may correspond to lines of code not executed at page load.
We reﬁne it with additional checks for reachability. In general,
starting from a node n such that isDeclOrStmt(n), we could
follow backward CFG edges (both ε, true, and f alse) to deter-
mine whether we reach the CFG entry node. Then, whenever
we reach a function deﬁnition (e.g., F_DECL), we jump to
all its call sites following the IPCG call edges. But this will
not be sufﬁcient because a function can be executed when a
speciﬁc event is ﬁred. Accordingly, we need to visit backward
the ERDDG edges i.e., the dependency edge, followed by
the registration and the dispatch edge. We handle separately
special cases where events are ﬁred by the browsers automati-
cally during loading a page. We keep on following backward
CFG, ERDDG, and IPCG edges until either we reach the CFG
entry node or when there are no longer nodes matching any
of the previous criteria. We say that a node n is reachable if
the CFG entry node is in the query result set.
Analysis of Vulnerable Behaviors. The previous queries
can identify the general vulnerable behavior of client-side
CSRF, i.e., a program that submits a HTTP request using
attacker-chosen data values. However, programs may imple-
ment a variety of checks on the inputs, which can eventually
inﬂuence the exploitation landscape. In Figure 4, for example,
Program 1 shows a vulnerable script whose domain validation
of line 1 restrains the attacker from manipulating the entire
request URL. Program 2, however, shows a case where the at-
tacker can chose the complete URL string, including the path
and query string. One aspect of client-side CSRF vulnerabili-
ties that we intend to study is to identify the extent to which
an attacker can manipulate the outgoing request. For instance,
if window.location properties ﬂow to a request parameter
without any sanitization. Query 2 captures this aspect:
N2 ={n1 : ∀n1 ∈ N1, ∃n2, hasPDGPath(n2, n1) ∧
isAssignment(n2) ∧ ∃c, hasChildOnRight(n2, c) ∧
isMemberExp(c) ∧ hasValue(c,“window.location”)}
(2)
Query 2 checks if the node n1 returned by Query 1 is con-
nected via PDG edges to an assignment statement whose right-
hand side child is a property of the window.location. The
predicate hasPDGPath(n2, n1) speciﬁes that there is a path
from n2 to n1 following PDG edges, and isAssignment(n2)