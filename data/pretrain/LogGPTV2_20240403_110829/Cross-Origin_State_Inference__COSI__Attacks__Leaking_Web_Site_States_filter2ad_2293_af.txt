### Independence from Crawler Coverage
Table VII details the distribution of attack vectors per XS-Leak for each attack type and browser pair. The prevalence of XS-Leaks varies significantly. Most attack vectors utilize EventsFired, Object Properties, and CSPViolation XS-Leaks. Our novel postMessage XS-Leak ranks sixth out of eight, generating attack vectors on 11 different sites, including blogger.com, ebay.com, reddit.com, and youtube.com. The least prevalent XS-Leak is CSSPropRead, for which Basta-COSI did not find any attack vectors, indicating that SD-URLs on CSS content that leak user state are uncommon. The comparison also reveals that Chrome has a larger attack surface, ranking first in the number of attack vectors across all eight XS-Leaks.

### Example Attacks
This section provides detailed examples of attacks found by Basta-COSI that involve more than two states. All attacks are effective on the three tested browsers unless otherwise specified.

#### HotCRP
Basta-COSI discovered an attack to determine if a victim is a reviewer of a specific paper, which we have used as a running example. The attack page (Listing 1) uses three attack vectors: one for login detection on all three browsers, and two others (one for Chrome and another for Firefox/Edge) to identify if the victim submitted a review for the target paper. To execute the attack, the attacker collects email addresses of the program committee members and sends them a spear-phishing email with a link to the attack page. Since the attack was initially found on a local HotCRP installation, we updated the SD-URLs with the proper domain and conference name to test it on conferences hosted at hotcrp.com. We verified the attack and reported it to the HotCRP developer, who confirmed the issue and released a patch [10].

#### GitLab and GitHub
Attacks were found in both GitLab and github.com that allow determining if the victim is the owner of a repository or a snippet. Both attacks start with a login detection attack. If the victim is logged in, the attack page uses an EventFire attack class with a SD-URL for editing the repository settings (or the snippet) to detect if the victim has administrative rights. For GitHub Enterprise installations, another attack distinguishes administrators from other users by including the URL for accessing staff tools.

#### LinkedIn
A CSPViolation attack allows distinguishing the account type (free or premium) using the SD-URL `https://www.linkedin.com/cap/`. This attack has been fixed following our disclosure. A second attack determines if the victim owns a specific LinkedIn profile using the OP-WindowProperties attack class. The underlying cause is that the number of frames in a LinkedIn profile page is 3 when visited by the owner and 4 otherwise.

#### Blogger
Multiple deanonymization attacks were found to determine if the victim is the owner of a specific blog. The attacker needs to know the blogID of the target, which can be found in the HTML source of the target blog. The attacks combine a CSPViolation login detection attack vector with another deanonymization attack vector from different attack classes (e.g., postMessage, EF-CtMismatchScript). This demonstrates how attacks can combine multiple attack vectors using different XS-Leaks, highlighting the value of our generic approach.

#### IMDB
A deanonymization attack allows determining if the victim owns a specific IMDB account using a SD-URL that contains the user identifier. This attack can identify if the visitor is a specific person from the film industry by including the user identifier obtained from the profile.

#### Amazon
CSPViolation attacks were found that leak whether the victim is using the Amazon Kindle Direct Publishing (KDP) service or has accepted the KDP terms and policies. This information could be used for targeted advertising, such as showing advertisements for Kindle books to the victim.

#### Pornhub
Attacks using OP-Window-Properties and OP-FrameCount determine if the victim is the owner of a specific username, enabling deanonymization in a closed-world setting. The underlying reason for the OP-FrameCount attack is similar to the LinkedIn attack but is mounted on Pornhub’s playlist URLs.

#### Pinterest
A CSPViolation attack can be launched with the Facebook SSO initiation URL to determine if the victim authenticated into Pinterest using their Facebook account. A similar attack was found for Google's SSO.

#### Imgur
An attack based on EF-StatusErrorScript can determine if the victim uploaded an image (e.g., copyrighted, taken without permission) to this image-sharing site. The vendor awarded us a bug bounty for this report [46].

### Defenses Against COSI Attacks
This section discusses existing and upcoming defenses against COSI attacks.

#### SameSite Cookies
COSI attacks leverage the automatic inclusion of HTTP cookies, client-side certificates, and HTTP Authentication credentials in requests sent by web browsers, known as the ambient authority problem. Web sites can use the SameSite attribute in a Cookie header to prevent the browser from sending that cookie in cross-site requests. This defense disables SD-URLs whose responses are based on states saved in cookies. However, it does not prevent leakage by HTTP Authentication credentials and client-side certificates, requires setting for each cookie, and may be challenging to deploy in web sites with legitimate cross-origin requests. When we disclosed our results to browser vendors, they indicated plans to mark all cookies by default as SameSite=Lax, unless the site specifically disables them with SameSite=None or makes it stricter with SameSite=Strict. This change is planned for Chrome [11] and Firefox [12], but will initially ship behind a configuration option due to potential functionality impacts.

#### Session-Specific URLs
Web sites can use URLs that include a session-specific, non-guessable token. The token must be cryptographically bound to the session identifier, and the web site must verify this relationship for all HTTP requests. Session-specific URLs prevent the attacker from identifying SD-URLs for the victim’s session, avoiding COSI attacks. This defense is independent of browser vendors and can be deployed immediately. However, it can be costly, increase complexity, impact performance, and require ensuring that tokens cannot be leaked or brute-forced.

#### Cross-Origin-Resource-Policy
An emerging HTTP response header that allows web sites to ask browsers to disallow cross-origin requests to specific resources. The request is not prevented, but the browser avoids leakage by stripping the response body. Currently supported by Chrome and Safari.

#### Fetch Metadata
An emerging set of HTTP request headers that send additional provenance data about a request, e.g., the HTML element triggering a cross-site request. Currently supported by Chrome. A web site can use this information to design policies that block potentially malicious requests, such as the inclusion of a non-image resource with an img tag.

#### Cross-Origin-Opener-Policy
There is ongoing discussion on a new HTTP response header to prevent malicious web sites from abusing other web sites by opening them in a window. This defense could protect against COSI attack classes that use the window.open inclusion method (e.g., OP-Window Properties, postMessage).

#### Tor Browser
The Tor Browser takes preventive measures against timing-based COSI attacks and isolates the browser’s state based on the URL in the address bar. Therefore, it does not attach cookies and Authorization header values to cross-origin HTTP requests generated by inclusions using HTML tags. However, state isolation is not enforced for the window.open method, so authentication headers are still attached to HTTP requests generated using this inclusion method. Thus, Tor Browser users are still vulnerable to OP-WindowProperties and the new postMessage attack class we discovered.

#### SD-URL Patching
When reporting our attacks, we suggested SameSite cookies as a good defense due to their effectiveness and cost. However, developers who patched our attacks did not follow this suggestion and instead applied fixes specific to the reported SD-URLs. For example, the HotCRP developer mentioned that SameSite cookies are not available in PHP until version 7.3 and modified the code to always return a 200 HTTP status code with JSON content. This fixes our attack but does not address future attacks on other status codes and content types. In another example, LinkedIn patched our reported user deanonymization OP-FrameCount attack by ensuring the reported SD-URL returned the same number of frames for all users. These examples show that developers currently consider URL-specific fixes a quick solution, despite their lack of generality.

### Discussion
This section discusses limitations of our approach and possible future improvements.

#### Preparation Overhead
To use Basta-COSI, the tester first needs to create accounts at the target site and provide state scripts that use those accounts. Similar overhead is required by other web security testing tools when examining logged-in parts of a web site. Basta-COSI is designed for web site administrators to test their own sites. We believe the cost of creating test accounts for your own site is a reasonable one-time effort, as these accounts can be reused for other tests. Many sites likely already have such test accounts in place for other types of testing.

#### Support for Other Browsers
Basta-COSI currently supports the three most popular browsers: Chrome, Firefox, and Edge. We did not include support for Safari because we run our experiments on Windows, and Apple stopped releasing Safari for Windows in 2012. Adding support for other browsers, especially mobile platform browsers, is a matter of additional engineering work. Given the popularity of mobile browsers and the limited exploration of COSI attacks on them, support for mobile browsers in Basta-COSI could be achieved by integrating a mobile testing platform, e.g., Appium [1].

#### Support for Other Crawlers
Basta-COSI uses ZAP’s Spider module [7] for crawling the target site. The coverage of this crawler may be limited on JavaScript-intensive web sites, potentially causing some SD-URLs to go undiscovered. Basta-COSI’s modular design should easily allow integration of other crawlers to increase coverage. Despite potentially limited crawling, Basta-COSI was able to find COSI attacks in all tested targets.

#### Dynamic Page Element Detection
To identify SD-URLs, Basta-COSI removes dynamic page elements from HTTP responses. Some dynamic page elements, e.g., CSRF tokens, are detected using heuristics that could introduce errors. However, even if a URL is wrongly identified as a SD-URL, Basta-COSI may later discard it as non-exploitable. Additionally, dynamic elements often do not impact the leak methods (e.g., events fired, properties read).

#### Timing
Basta-COSI supports the timing XS-Leak through the video parsing technique described in [64]. However, we did not use the timing XS-Leak in our experiments, which may have prevented Basta-COSI from finding further attacks. The main reason for disabling the timing XS-Leak is the need to send hundreds or even thousands of HTTP requests per SD-URL to achieve the same level of reliability as other attack classes. This increases the load at the target and causes some web sites to respond with defenses (e.g., CAPTCHAs, blocking) that hamper testing. We noticed this initially on linkedin.com. Additionally, timing information is harder to use as the number of states increases, and it is difficult to combine timing with non-timing XS-Leaks. Due to these challenges, Basta-COSI does not use the timing XS-Leak by default. We leave applying timing leaks to more than two states for future work.

#### Discovering New XS-Leaks
We have systematically explored existing COSI attacks and the XS-Leaks they use, generalizing them into COSI attack classes. In this process, we discovered a novel postMessage XS-Leak. However, it is very likely that there are more, currently unknown, XS-Leaks leveraging other browser APIs. Systematically exploring the browser API surface to identify all possible XS-Leaks remains an open challenge, which we plan to explore in future work.

### Related Work
Prior COSI attack instances. Table VIII summarizes the 23 prior works proposing COSI attack instances we have identified. The first instance of a COSI attack was proposed in 2006 by Grossman and Hansen [36], a login detection attack using the img tag and the EventsFired XS-Leak (EF-CtMismatchImg attack class). Since then, EventFired attacks have been shown to apply to other HTML tags and content types [22], [34], [35], [65]. Recently, Staicu and Pradel [61] showed that EventsFired attacks can be combined with shareable images to deanonymize users of image sharing services. In another blog post in 2006, Grossman [33] introduced the first instance of the JSError attack class, leveraging the type and line number of errors triggered when a JavaScript resource is included using the script tag. This attack was then demonstrated on popular sites like Amazon [59]. Inspired by Grossman’s attacks, Evans [26] presented the first instance of the CSSPropRead attack class, leveraging the presence of certain objects and variables from an included JS resource. In a 2012 post, Grossman presented multiple attack instances, including the first instances of the JSObjectRead attack class and the first attack using the readable object properties XS-Leak [35]. Lekies et al. [50] extended the JSObjectRead class with more techniques such as prototype tampering and showed that these attacks can be combined with other XS-Leaks.

| Reference | Year | Type | Attack Classes | Browsers |
| --- | --- | --- | --- | --- |
| Grossman & Hansen [36] | 2006 | Blog | EF-CtMismatchImg | - |
| Grossman [33] | 2006 | Blog | JSError | - |
| Shiﬂett [59] | 2006 | Blog | JSError | C, F, IE |
| Bortz et al. [21] | 2007 | Paper | Timing | F, S |
| Grossman [34] | 2008 | Blog | EF-CtMismatchScript, EF-CtMismatchImg | C, F, IE |
| Evans [26] | 2008 | Blog | CSSPropRead | - |
| Evans [27] | 2009 | Blog | Timing | C |
| Cardwell [22] | 2011 | Blog | EF-StatusErrorScript, EF-CtMismatchImg | C, F, E |
| Grossman [35] | 2012 | Blog | EF-StatusErrorIFrame, EF-CtMismatchScript, OP-LinkSheet, FrameCount, EF-CtMismatchImg, JSObjectRead | C, F, E |
| Homakov [40] | 2013 | Blog | CSPViolation | C, F, E |
| Gelernter & Herzberg [31] | 2015 | Blog | Timing, EF-CtMismatchVideo | C, F, E |
| Goethem et al. [64] | 2015 | Blog | JSObjectRead | C, F, E |