0x38
.text:00000008
1a
$gP,
(gnu_local_gp & 0xFFFr)
.text:0000000C
5W
$ra.
.text:00000010
$gp, 0x38+var_10 ($sp)
0x38+var_4 ($sp)
:pass 5th argunent in stack:
8W
.text:00000014
11
$v0, 4
,text:00000018
XS
$v0, 0x38+var_28 ($sp)
1 pass 6th argument in stack:
---
## Page 72
54
逆向工程权威指南（上册）
.text:0000001C
1i
S 0AS
.text:00000020
5V
$v0, 0x38+var_24 ($sp)
: pass 7th argu
inent in stack;
,text:00000024
11
$v0, 6
, text:00000028
SV
$v0, 0x38+var_20 ($sp)
nbze gig ssed :
sent in stack:
. text:0000002c
1.1
$v0,
.text:00000030
1v
*63$
7
(printf 4 0xFFrr) ($gp)
.text:00000034
3V
$v0, 0x38+var_1C($sp)
 prepare lst argune
ent in $a0:
80000000:1x94*
1u1
$a0, ($LC0 >> 16)  *a=1d; b=(d; c=d; d=id; e=fd; f=d; g=1*
 pass 9th argu
-text:0000003C
nent in stack:
11
8*0S
-text:00000040
SV
$v0, 0x38+var_18($sp)
: pass 1st argunent in Sa1:
.text:00000044
1a
$a0, ($LC0 s 0xFFrr)  *a=1d; b=Bd; c=id; d=fd; e=1id; f=1d; g1* -
 pass 2nd argu
.text:00000048
ment in $a1:
1i
$a1, 1
 pass 3rd argument in $a2:
-text:0000004C
11
$a2,2
-text:00000050
 call printf ():
1 pass 4th argument in $a3 (branch delay slot):
ja1r
$t9
function epilogue1
-text:00000054
1i
Sa3, 3
- text:00000058
1w
$ra, 0x38+var_4($sp)
 set return value to 0:
-text:0000005c
move
$v0,$zero
7return
-text: 00000060
jr
addiu
$sp, 0x38 ; branch delay sLot
$ra
. text:00000064
Non-optimizing GCC 4.4.5
关闭优化选项后，GCC会生成较为详细的指令。
指令清单6.16Non-optimizing GCC 4.4.5（汇编输出）
$LC0:
main1
asci1 *a=5d; b=ld; c=ld: d=1id; e=td; f=td; g=ld: h=1d\012\000*
： function prologue:
nTppe
$sp,$sp,-56
SV
SV
$fp, 48 ($8p)
nove
1ui
$28, thi (gnu_local_gp)
$fp,$sp
addiu
$28,$28,$1o(_gnu_1oca1_gp)
1u1
$2, thi ($LC0)
5th argur
add1u
$2, $2, 10 ($LC0)
: pa38
ent in stack:
11
$3, 4
$3, 16 ($sp)
#0x4
:pass 
6th
RE
1.1
argument in stack:
$3,5
 0x5
7th
8W
argument in stack:
$3, 20 ($sp)
11
(deg1*cs
9'$
0x6
pass
8th
argument in stack:
11
(dss18z*cs
$3,7
#0x7
9th
SW
pas8
11
argument in stack:
8*ES
0x8
: pass lst argunent in Sa0:
$4,$2
---
## Page 73
第6章
printf）函数与参数调用
55
J pass 2nd argunent in $a1:
: pass 3rd argunent in $a2:
1i
$5,1
0x1
11
$6, 2
 0x2
:pass 4th argument in Sa3:
11
$7, 3
0x3
 call printf ():
iv
$2,tca1116(printf) ($28)
nop
hove
jalr
$25, $2
nop
S2s
epilogue1
: set return value to 0:
1w
$28,40($fp)
move
$2,$0
move
(dss）2s*1cs
dgs*dss
1.w
1w
$fp,48 ($sp)
addiu
: return
$31
nop
指令清单6.17
Non-optimizing GCC 4.4.5 (IDA)
. text:00000000 main:
.text:00000000 var_28
-text:00000000
= -0x28
.text:00000000
var_24
= -0x24
.text:00000000 var_1c
.text:00000000
var_20
= -0x20
= -0x1C
.text:00000000
var_18
- -0x18
.text:00000000
 var_10
= -0x10
.text:00000000
var_8
= -8
.text:00000000
var_4
= -4
.text:00000000
:function prologue:
. text: 00000000
BEx0- *dsg nsppe
.text:00000004
dsg)xA+gx*s
.text:00000008
AS
sfp,
(dsg) 8"xeA+8cx0
.text:0000000c
move
des 'ds
.text:00000010
La
$gP,
gnu_1ocal_gp
.text:00000018
$v0, aADBDc000EDFDGD # *a=Id; b=td; c=id; d=1d; e=fd; f=Id; g=1* -
$gP,
，0x38+var_10 ($sp)
:pass 5th argunent in stack:
.text:0000001c
La
.text:00000024
11
Sv1, 4
.text:00000028
8V
$v1, 0x38+var_28($sp)
1 pass 6th argunent in stack:
.text:0000002C
11
$v1, 0x38+var_24 ($ap)
$v1, 5
:pass 7th argunent in stack:
.text:00000030
RS
.text:00000034
1.1
$v1, 0x38+var_20($sp)
$v1, 6
:pass 8th argunent in stack:
.text:00000038
.text: 0000003c
1.1
$v1, 0x38+var_1C($sp)
$v1, 7
-text:00000040
7 pass 9th argu
ament in stack:
RS
. text: 00000044
11
$v1,8
.text: 00000048
8
$v1, 0x38+var_18($sp)
pass 1st argument in Sa0:
-text:0000004C
 pass 2nd argument in $al:
nove $a0, $v0
-text:00000050
11
$a1, 1
 pass 3rd azgument in $a21
-text:00000054
1i
$a2, 2
---
## Page 74
56
逆向工程权威指南（上册）
 pass 4th argument in $a3:
.text:00000058
1.i
$a3, 3
 call printf():
- text:0000005c
1.v
$v0, (printf s OxFFrr) ($gp)
- text: 00000064
text:00000060
$t9,$v0
.text:00000068
move
-text:0000006C
jalr
6$
or
$at, $zero : NOP
: function epllogoe:
.text:00000070
1w
$gp。 0x38+var_10($fp)
: set return value to 0:
.text:00000074
move
$v0,$zero
- text:00000078
move $sp,$f
.text:0000007c
1w
$ra, 0x38+var_4($sp)
.text:00000080
sfp, 0x38+vax_B ($sp)
return
-text:00000084
addiu $sp, 0x38
.text:00000088
.text:0000008c
)r
$ra
$at, $zero : NOP
6.4
总结
调用函数的时候，程序的传递过程大体如下。
指令清单6.18x86
PUS8 3rd argunent
PUSH 2nd argument
PUS8 lst argument
CALL function
: nodify stack pointer (if needed)
指令清单6.19x64（MSVC)
MOV RCX, 1st argument
MOV R8, 3rd argunent
MOV RDK, 2nd argument
MOV R9, 4th argument
PUS8 5th, 6th argument, etc (if meeded)
modify stack pointer (if needed)
CALL function
指令清单6.20x64（GCC）
MOV RDI, 1st argusent
MOV RS1, 2nd argument
MOV RDX, 3rd argument
MOV RCX, 4th azgument
MOV R9, 6th argunent
MOV R8, 5th argument
PUS8 7th, 8th argument., etc (if needed)
 + +
:modify stack pointer (if needed)
CALL function
指令清单6.21ARM
MOV R1, 2nd argument
MOV R0, 1st argunent
MOV R2, 3rd argunent
MOV R3, 4th argument
: pass 5th, 6th argument, etc, in stack (if needed)
BL function
---
## Page 75
第6章printf）函数与参数调用
57
modify stack pointer (if needed)
指令清单6.22ARM64
MOV X0, 1st argunent
MOV X1, 2nd argunent
MOV K2, 3rd argument
MOV X3, 4th argunent
MOV X4, 5th argument
MOV X5, 6th argument
Mov x7, Bth argunent
MOV X6,
7th argument
_ pass 9th, 10th argument, etc, in stack (if needed)
BL CALL function
: modify atack pointer (if needed)
指令清单6.23MIPS（O32调用约定）
LI $4, 1st argument ; AKA SA0
LI $5, 2nd argument : AKA $A1
LI $6, 3rd argument : AKA SA2
LI $7, 4th argument : AKA SA3
 pass 5th, 6th argument, etc, in stack (if needed)
LX tenp_reg, address of funct.ion
JALR tenp_reg
6.5其他
在x86、x64、ARM和MIPS平台上，程序向函数传递参数的方法各不相同。这种差异性表明，函数
间传递参数的方法与CPU的关系并不是那么密切。如果付诸努力，人们甚至可以开发出一种不依赖数据栈
即可传递参数的超级编译器。
为了方便记忆，在采用O32调用约定时，MIPS平台的4号~7号寄存器也叫作SA0~SA7寄存器。实
际上，编程人员完全可以使用SZERO之外的其他寄存器传递数据，也可以采取其他的函数调用约定。
CPU完全不在乎程序使用何种调用约定。
汇编语言的编程新手可能采取五花八门的方法传递参数。虽然他们基本上都是利用寄存器传递参数，
但是传递参数的顺序往往不那么讲究，甚至可能通过全局变量传递参数。不过，这样的程序也能正常运行。
---
## Page 76
第7章scanf()
本章演示scanf）函数。
7.1演示案例
#include
Intsain ()
printf (*Enter X:\n*);
int x7
scanf (*id*, 6x);
printf (*You entered ld..,\n*, x);
return 0:
好吧，我承认时下的程序如果大量使用scanf就不会有什么前途。本文仅用这个函数演示整形数据的
指针的传递过程。
7.1.1指针简介
在计算机科学里，“指针”属于最基础的概念。如果直接问函数传递大型数组、结构体或数据对象，程
序的开销就会很大。毫无疑问，使用指针将会降低开销。不过指针的作用不只如此：如果不使用指针，面
是由调用方函数直接传递数组或结构体这种大型数据（同时还要返回这些数据），那么参数的传遥过程将会
复杂得出奇。所以，调用方函数只负责传递数组或结构体的地址，让被调用方函数处理地址里的数据，无
疑是最简单的做法。
在C/C++的概念中，指针就是描述某个内存地址的数据。
x86系统使用体系32位数字（4字节数据）描述指针：x64系统则使用64位数字（8字节数据）.从数
据空间来看，64位系统的指针比32位系统的指针大了一倍。当人们逐渐从x86平台开发过渡到x86-64平
台开发的时候，不少人因为难以适应而满腹牢骚。
程序人员确实可在所有的程序里仅仅使用无类型指针这一种指针。例如，在使用C语言memcpyO函
数、在内存中复制数据的时候，程序员完全不必知道操作数的数据类型，直接使用2个void*指针复制数
据。这种情况下，目标地址里数据的数据类型并不重要，重要的是存储数据的空间大小。
指针还广泛应用于多个返回值的传递处理。本书的第10章会详细介绍这部分内容。scanfO函数就可以
返回多个值。它不仅能够分析调用方法传递了多少个参数，面且还能读取各个参数的值。
在C/C+的编译过程里，编译器只会在类型检查的阶段才会检查指针的类型。在编译器生成的汇编程
序里，没有指针类型的任何信息。
7.1.2x86
MSVC
使用MSVC2010编译上述源代码，可得到下述汇编指令：
LSNCO
SEGMENT
---
## Page 77
第7章scanfO
59
$SG3831
DB
*Enter X:*, Oal, OOH