### 演示:名称空间
*   首先，我们检查哪些进程正在主机系统中运行(输出因系统而异)。注意 pid 1 的过程。
![Fig 1](img/6ff4277fe6d5b753d976799e12ac5c13.png)
*   让我们用 unshare 命令创建一个 PID 名称空间，并在名称空间中创建一个 bash 进程
![Fig 2](img/30218c491d684d55c5f67b520f148f71.png)
您可以看到`ps aux`(它本身是在如此创建的 PID 名称空间中启动的进程)只能看到它自己的名称空间中的进程。因此，输出显示**只有两个进程**在名称空间内运行。还要注意，名称空间中的根进程(pid 1)不是 init，而是我们在创建名称空间时指定的 bash shell。
*   让我们在相同的名称空间中创建另一个进程，它在后台休眠 1000 秒。在我的例子中，睡眠进程的 pid 是 PID 名称空间中的 44 **。**
![Fig 3](img/f1d97c0248159e803c5ac1b2ff4ffba1.png)
![Fig 4](img/e98de18b79a28876d2607ed2860a59bc.png)
*   在单独的终端上，检查从主机看到的睡眠进程的进程 id。
![Fig 5](img/0cf44949195ab67fbb18251bfa54e433.png)
请注意 pid 的差异(主机中为 23844，名称空间中为 44)，尽管两者都指同一进程(开始时间和所有其他属性都相同)。
也可以嵌套命名空间，即从另一个 pid 命名空间创建一个 pid 命名空间。尝试使用`sudo nsenter -t 23844 --pid -r bash`重新输入名称空间，并在其中创建另一个 pid 名称空间。做起来应该很好玩！
## Cgroups
可以将 cgroup 定义为一组进程，对这些进程的资源使用进行计量和监控。资源可以是内存页面、磁盘 i/o、CPU 等。事实上，cgroups 是根据对哪个资源施加限制以及违反限制时采取的操作的性质来分类的。
cgroup 中跟踪资源利用并控制 cgroup 中进程行为的组件称为资源子系统或资源控制器。
根据 RHEL 的[对 cgroups](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/6/html/resource_management_guide/ch01) 的介绍，下面是一组资源控制器及其功能:
*   *blkio* —该子系统对物理驱动器(磁盘、固态硬盘或 USB)等块设备的输入/输出访问进行限制。
*   *cpu* —该子系统使用调度程序为 cgroup 进程提供对 cpu 的访问。cpuacct —该子系统生成关于 cgroup 中进程使用的 CPU 资源的自动报告。
*   *cpuset* —该子系统将单个 CPU(在多核系统上)和内存节点分配给 cgroup 中的进程。
*   *设备* —该子系统允许或拒绝 cgroup 中的进程访问设备。
*   *冻结* —该子系统暂停或恢复 cgroup 中的进程。
*   *内存* —该子系统为 cgroup 中的进程设置内存使用限制，并自动报告这些进程使用的内存资源。
对于每个资源控制器，Cgroups 遵循一个分层的树状结构，即每个控制器都有一个 cgroup。层次结构中的每个 cgroup 从其父 cgroup 继承某些属性(如限制)。
让我们用 memory cgroups 来尝试一个快速演示，让我们的头脑理解上面的想法。您将需要一个基于 linux 的操作系统(这里是 RedHat ),并具有 sudo 权限。
### 演示:cgroups
*   让我们从检查您的机器上是否安装了 cgroup 工具开始。执行`mount | grep "^cgroup"`。如果您安装了这些工具，您将看到如下输出:
![Fig 1](img/a75b08d7751a5201cdaf8a16cdcb2dd6.png)
如果没有，用`sudo yum install libcgroup-tools -y`安装工具。
*   现在，我们创建一个名为 mem_group 的内存 cgroup，用“root”作为 cgroup 的所有者。执行的命令`sudo cgcreate -a root -g memory:mem_group`。验证是否创建了 cgroup。
![Fig 2](img/9b04a59269be31e56f5ac03c8168cdd4.png)
`/sys/fs/cgroup/`是伪文件系统，其中新创建的 cgroup 被添加为子组。
*   Memory cgroup 对 cgroup 中进程的内存使用进行限制。让我们看看 mem_group 的限制是什么。用于检查内存限制的文件是 memory.limit_in_bytes( [更多信息请点击这里](https://www.kernel.org/doc/Documentation/cgroup-v1/memory.txt)，如果你感兴趣的话)。
![Fig 3](img/79d5b702419370c1658b318fe3b5fa68.png)
*   请注意，mem_group 继承了其父 cgroup 的限制
![Fig 4](img/16734cfb4b69976762569601d2dc0230.png)
*   现在，为了演示的目的，让我们将内存使用限制减少到 20KB(实际限制四舍五入到最接近的 2 的幂)。
![Fig 5](img/7f2497e039990469b0155c5d16297961.png)
这个限制太低了，因此大多数附加到 mem_group 的进程应该被 OOM 杀死。
*   创建一个新的 shell 并将其附加到 cgroup。我们需要 sudo 权限。
![Fig 6](img/680bff086c6034d74b315b455ca31256.png)
进程如预期的那样被 OOM 杀死。您可以使用 dmesg 日志(mm_fault_error)来确认这一点。
如果你想在 cgroups 上尝试一个更深入的练习，可以看看 Geeks 为 Geeks 提供的教程。
让我们再次回到容器。容器与底层主机操作系统共享同一个内核，并为其中的应用提供一个隔离的环境。Cgroups 有助于管理容器内进程使用的资源，而 namespaces 有助于将一个容器中的网络堆栈、PID、用户、组 id 和挂载点与同一主机上运行的另一个容器隔离开来。
当然，容器还有更多真正使其功能完整的组件，但这些讨论超出了本模块的范围。
## 容器发动机
容器引擎简化了在主机上创建和管理容器的过程。怎么会？
*   容器创建工作流通常从容器图像开始。容器映像是目标应用的打包的、可移植的版本，捆绑了它运行所需的所有依赖项。
*   这些容器映像要么可以在主机(容器主机)上从以前的构建中获得，要么需要从远程映像存储库中获取。有时，容器引擎可能需要从一组指令中构建容器映像。
*   最后，一旦获取/构建了容器映像，容器引擎就会解包映像，并根据映像规范为应用创建一个隔离的环境。
*   容器映像中的文件随后被挂载到隔离环境中，以使应用在容器中启动并运行。
有几种容器引擎可用，如 LXC RKT 的 Docker(首批容器引擎之一)，它们需要不同的图像格式(LXD 的 Docker)。OCI (Open Container Initiative)是由 Docker 发起的一个合作项目，旨在跨供应商标准化容器运行时规范和图像格式。如果你对这个项目感兴趣，OCI 的 FAQ 部分是一个很好的起点。我们将在下一节的[中重点介绍 Docker。](https://linkedin.github.io/school-of-sre/level102/containerization_and_orchestration/containerization_with_docker/)