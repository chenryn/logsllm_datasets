title:Secure and customizable web development in the safe activation framework
author:Raphael M. Reischuk and
Florian Schr&quot;oder and
Johannes Gehrke
DEMO: Secure and Customizable Web
Development in the SAFE Activation Framework
Raphael M. Reischuk
Saarland University
Saarbrücken, Germany
Florian Schröder
Saarland University
Saarbrücken, Germany
Johannes Gehrke
Cornell University,
Ithaca, New York, USA
ABSTRACT
We propose a demonstration of SAFE with some of its newest
security features. SAFE is a framework for modern Web
application development with automated state consistency,
enforced security at various levels, and design for Web per-
sonalization and extensibility.
With the emerging complexity in (extensible) data-driven
Web application development, in particular in terms of con-
sistent data management with multiple clients (many Face-
book users), ownership preservation (various Facebook user
items with individual intellectual property), and data pri-
vacy (sensitive Facebook user data), we believe a demo of
a comprehensive data-centric and secure Web application
framework with declarative speciﬁcations for many modern
Web features will be of considerable interest to the security
community. In particular, we think it is interesting to see
a demonstration of how fast and how intuitive the secure
customization of a true multi-tier Web application can be.
Categories and Subject Descriptors
D.2.7 [Software Engineering]: Distribution, Maintenance
and Enhancement—Extensibility; K.6.5 [Management of
Computing and Information Systems]: Security and
Protection—Authentication
Keywords
extensibility; web security; access control
INTRODUCTION
1.
More and more software is delivered through the Web, fol-
lowing today’s cloud idea of delivering software as a service.
The code of such rich internet applications is split into client
and server code, where the server code is run at the service
provider and the client accesses the application through a
Web browser.
In data-driven Web applications, the state
of the application resides in a database system (or simply
in a key-value store), and users interact with this persistent
Permission to make digital or hard copies of part or all of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage, and that copies bear this notice and the full ci-
tation on the ﬁrst page. Copyrights for third-party components of this work must be
honored. For all other uses, contact the owner/author(s). Copyright is held by the
author/owner(s).
CCS’13, November 4–8, 2013, Berlin, Germany.
Copyright is held by the owner/author(s). Publication rights licensed to ACM.
ACM 978-1-4503-2477-9/13/11.
http://dx.doi.org/10.1145/2508859.2512495.
state through Web clients, each having an individual (possi-
bly shared) state. More and more users wish to personalize
such Web applications, that is, they wish to customize the
functionality of a Web application to ﬁt their individual ap-
plication needs.
In the development, and in particular, in the customiza-
tion of modern Web applications, it is more challenging than
ever before to cope with multiple tiers (various servers, mul-
tiple simultaneous clients, replicated databases, mobile de-
vices, etc.), the shared application state spread over multi-
ple devices, with complex security attack surfaces, and with
many subtle technical details. Moreover, huge amounts of
similar code are often rewritten from scratch. We believe
that high-level speciﬁcations in a declarative language and
compiler-generated application code can signiﬁcantly sim-
plify and secure the entire Web development process.
We demonstrate the SAFE activation framework with its
eﬃcient and elegant way of creating interactive and secure
Web applications composed of reusable software components.
One reason for the success of SAFE is its intuitive and still
expressive declarative modeling language SFW. The rough
idea behind speciﬁcations at a higher abstraction level in
SAFE and the production of computer-generated source code
thereof is motivated by the following facts.
First, Web applications often use common patterns which
are better taken from well-tested code libraries instead of be-
ing manually programmed every time from scratch. Typical
replication methods like copy & paste often introduce logical
or structural ﬂaws that are hard to detect later. Second,
human errors in the programming process should generally
be detected and avoided at the earliest possible point in
time. Such errors introduce not only bugs in the function-
ality, but might also impose severe security threats. Third,
a restricted set of allowed operations simpliﬁes the detec-
tion of malicious code or even prevents security holes which
might even be introduced on purpose. Assume for instance a
system-provided (and hence trusted) encryption function for
which all randomness is correctly chosen. A malicious pro-
grammer using the predeﬁned function cannot bring his own
“pseudo-randomness” into play, and hence cannot introduce
a backdoor to decrypt conﬁdential user data oﬄine.
The two latter aspects are particularly relevant for data-
driven Web applications with sensitive and privacy-critical
user data. Not only is the programming of such security
checks vulnerable to bugs and attacks, but also is it quite te-
dious to program all necessary checks, to add error handling
for the reactive multi-tier code, to chose encryption/signa-
ture keys correctly, to establish database connections, etc.
1341The automated compilation of higher-level languages hence
not only produces better program code, but also signiﬁcantly
reduces the workload of a programmer.
We demonstrate how SAFE addresses all the aforemen-
tioned aspects and thereby signiﬁcantly simpliﬁes the over-
all development process, abstracting from technical details,
and preventing malicious code from harming the system or
sensitive user data. Moreover, we demonstrate how SAFE
achieves several other useful and mandatory properties such
as guaranteed state consistency, sandboxes for both users
and software components. Furthermore, we show how SAFE
enables new ways in the direction of customization and user
personalization.
2. SAFE
This section recaps the main features of the SAFE frame-
work [1, 2] for the development of secure Web applications
with automatic state consistency and safe extensibility. SAFE
provides a hierarchical programming model which naturally
builds upon the hierarchical DOM structure of Web pages.
The most constitutive components in SAFE are its so-called
f-units which cluster all code fragments for a speciﬁc func-
tionality within a Web page, including the business logic, the
visual appearance, and the interaction with users or other
f-units. This clustering provides a clear level of abstrac-
tion through well-deﬁned interfaces for each f-unit. The
modularity of reusable f-units relieves the programmer from
struggling with variable scopes and their interference.
A Web page is modeled as an activation tree in which
f-units are organized hierarchically — resulting in a clean
abstraction and an elegant way of composing Web pages.
The integration of an f-unit F in the activation tree is re-
ferred to as activation of F . More precisely, an f-unit is
activated by its parent f-unit and thereby receives activa-
tion data through well-deﬁned interfaces. The f-unit can
use the activation data or other data obtained directly from
the database through queries to display parts of the Web
page. Every f-unit can also activate other f-units, its child
f-units. Whenever an instance of an f-unit is activated, the
corresponding compiled HTML / JS / CSS code is made
available in the activation tree. Eventually, the activation
tree is linearized to a single HTML document by transform-
ing subtrees to nested HTML elements. After the activation
tree has been constructed, the corresponding code for HTML
/ JS / CSS is sent to the client.
Activations are expressed through activation calls in the
declarative modeling language SFW, a straight-forward ex-
tension of HTML: all HTML elements and also PHP and
JavaScript can be used as in traditional Web application
development. Activation calls are at the core of SFW and
can as such be used in any HTML context.
2.1 Database updates
Since today’s Web applications are not static pages (instead,
they contain a lot of reactive code for event-driven modiﬁca-
tions of the shared application state), SAFE’s methodology
redeems the developer from all the technical inconveniences
of such updates and thereby automatically maintains state
consistency — even for concurrent updates. Assume the
client’s browser interacts with the delivered HTML page
and eventually sends some update request back to the server.
The corresponding f-unit in the activation tree processes this
” q u e r y : DELETE FROM groupmembers WHERE g i d = ’ $ $ g i d ’
The f o l l o w i n g g r o u p s e x i s t :
ismember FROM g r o u p s ”>
AND u i d = ’ $%me ’ ”>
$$name
 Groups 
2
3
4 < f o r q u e r y =”SELECT g i d , name , owner = ’ $%me ’ AS i s o w n e r ,
5
6
7
8
9
10
11
12