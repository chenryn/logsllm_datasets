title:Osiris: Automated Discovery of Microarchitectural Side Channels
author:Daniel Weber and
Ahmad Ibrahim and
Hamed Nemati and
Michael Schwarz and
Christian Rossow
Osiris: Automated Discovery of 
Microarchitectural Side Channels
Daniel Weber, Ahmad Ibrahim, Hamed Nemati, Michael Schwarz, and 
Christian Rossow, CISPA Helmholtz Center for Information Security
https://www.usenix.org/conference/usenixsecurity21/presentation/weber
This paper is included in the Proceedings of the 30th USENIX Security Symposium.August 11–13, 2021978-1-939133-24-3Open access to the Proceedings of the 30th USENIX Security Symposium is sponsored by USENIX.Osiris: Automated Discovery of
Microarchitectural Side Channels
Daniel Weber, Ahmad Ibrahim, Hamed Nemati, Michael Schwarz, Christian Rossow
CISPA Helmholtz Center for Information Security
Abstract
In the last years, a series of side channels have been dis-
covered on CPUs. These side channels have been used in
powerful attacks, e.g., on cryptographic implementations, or
as building blocks in transient-execution attacks such as Spec-
tre or Meltdown. However, in many cases, discovering side
channels is still a tedious manual process.
In this paper, we present Osiris, a fuzzing-based framework
to automatically discover microarchitectural side channels.
Based on a machine-readable speciﬁcation of a CPU’s ISA,
Osiris generates instruction-sequence triples and automati-
cally tests whether they form a timing-based side channel.
Furthermore, Osiris evaluates their usability as a side channel
in transient-execution attacks, i.e., as the microarchitectural
encoding for attacks like Spectre. In total, we discover four
novel timing-based side channels on Intel and AMD CPUs.
Based on these side channels, we demonstrate exploitation
in three case studies. We show that our microarchitectural
KASLR break using non-temporal loads, FlushConﬂict, even
works on the new Intel Ice Lake and Comet Lake microarchi-
tectures. We present a cross-core cross-VM covert channel
that is not relying on the memory subsystem and transmits up
to 1 kbit/s. We demonstrate this channel on the AWS cloud,
showing that it is stealthy and noise resistant. Finally, we
demonstrate Stream+Reload, a covert channel for transient-
execution attacks that, on average, allows leaking 7.83 bytes
within a transient window, improving state-of-the-art attacks
that only leak up to 3 bytes.
1 Introduction
Since ﬁrst described by Kocher [51] in 1996, side channels
have kept challenging the security guarantees of modern sys-
tems. Side channels targeted mostly cryptographic implemen-
tations in the beginning [5, 37, 51, 69]. By now, they have
also been shown to be powerful attacks to spy on user be-
havior [36, 67, 81]. Moreover, in transient-execution attacks,
such as Meltdown [57] or Spectre [50], side channels are vital.
Side channels often arise from abstraction and optimiza-
tion [79]. For example, due to the internal complexity of
modern CPUs, the actual implementation, i.e., the microarchi-
tecture, is abstracted into the documented architecture. This
abstraction also enables CPU vendors to introduce transpar-
ent optimizations in the microarchitecture without requiring
changes in the architecture. However, these optimizations
regularly introduce new side channels that attackers can ex-
ploit [3, 10, 56, 69, 74, 80, 86, 89].
Although new side channels are commonly found, discover-
ing a side channel typically requires manual effort and a deep
understanding of the underlying microarchitecture. Moreover,
with multiple thousand variants of instructions available on
the x86 architecture alone [1], the number of possible side ef-
fects that can occur when combining instructions is too large
to test manually. Hence, manually identiﬁed side channels
represent only a subset of the side channels of a CPU.
Indeed, automatically ﬁnding CPU-based side channels is
challenging. Side channels consist of a carefully-chosen inter-
play of multiple orthogonal instructions that are syntactically
far apart from each other. Typically, they require instructions
that change an inner CPU state and others reading (leaking)
this inner state. In addition, many side channels rely on spe-
ciﬁc instructions to reset the internal state to a known one.
For example, the popular Flush+Reload side channel [101]
ﬂushes cache lines to reset the state, ﬁlls a secret-dependent
cache line, and uses another cache access to leak the new
state. Identifying such an interplay automatically is notori-
ously hard, fueled by thousands of CPU instructions, their
possible combinations, and the lack of mechanisms to verify
the existence of potential side-channel candidates.
Automation attempts, therefore, have focused on particular
types of side channels so far. With Covert Shotgun and AB-
Synthe, Fogh [27] and Gras et al. [30], respectively, automated
the discovery of contention-based side channels. Their tools
identiﬁed several side effects of instructions when run simulta-
neously on the two logical cores, i.e., hyperthreads, of a phys-
ical CPU core. However, their approach does not generalize
beyond contention-based side channels. Moghimi et al. [65]
USENIX Association
30th USENIX Security Symposium    1415
considered the sub-ﬁeld of microarchitectural data-sampling
(MDS) attacks. Their tool, Transynther, combines and mutates
building blocks of existing MDS attacks to ﬁnd new attack
variants. However, they do not try to ﬁnd new classes of side
channels, and only focus on cache-based covert channels.
In this paper, we present a generic approach to automati-
cally detect timing-based side channels that do not rely on
contention. We introduce a notation for side channels that
allows representing side channels as triples of instruction se-
quences: one that resets the inner CPU state (reset sequence),
one that triggers a state change (trigger sequence), and one
that leaks the inner state (measurement sequence). Based
on this notation, we introduce Osiris, an automated tool to
identify such instruction-sequence triples. Osiris relies on
fuzzing-like techniques to combine instructions of the tar-
geted instruction-set architecture (ISA) and analyzes whether
the generated triple forms a side channel. Osiris supports an
efﬁcient search scheme which can cope with side effects be-
tween different fuzzing iterations, a challenging phenomenon
that is not present in most other fuzzing domains.
In contrast to CPU instruction fuzzing [20], Osiris does not
search for undocumented instructions but instead relies on
a machine-readable ISA speciﬁcation. Such a speciﬁcation
exists for x86 [1] and ARMv8 [8]. As these speciﬁcations
contain all ISA extensions as well, Osiris ﬁrst reduces the
candidate set to instructions that can be executed as an unpriv-
ileged user on the target CPU. From this candidate set, Osiris
combines instructions and tests whether they can be used as a
covert channel. In such a case, the found triple is reported as a
covert channel, and thus also as a potential side channel. The
current proof-of-concept implementation of Osiris is limited
to ﬁnding timing-based single-instruction side channels in
an unguided manner. However, even such a simple setup in-
volves many challenges that require a careful design to enable
ﬁnding interesting sequence triples.
We ran Osiris for over 500 hours on 5 different Intel and
AMD CPUs with microarchitectures from 2013 to 2019.
Osiris found both existing and novel side channels. The exist-
ing side channels include Flush+Reload [101], and the AVX2
side channel described by Schwarz et al. [84]. Moreover,
Osiris discovered four new side channels using the RDRAND
and MOVNT instructions, as well as in the x87 ﬂoating-point
and AVX vector extensions.
In three case studies, we demonstrate that these newly iden-
tiﬁed side channels enable powerful attacks. Based on the
ﬁndings of non-temporal moves (MOVNT), we show Flush-
Conﬂict, a microarchitectural kernel-level ASLR (KASLR)
break that is not mitigated by any of the hardware ﬁxes de-
ployed in recent microarchitectures. We successfully evaluate
FlushConﬂict on the new Intel Ice Lake and Comet Lake
microarchitectures, where the performance is on par with pre-
vious microarchitectural KASLR breaks from which almost
all stopped working on the newest microarchitectures. Fur-
thermore, with the detected side-channel leakage of RDRAND,
we show that we can build a fast and reliable cross-core covert
channel that is also applicable to the cloud. Our cross-core
covert channel can transmit 95.2 bit/s across virtual machines
on the AWS cloud. We use these side channels as a covert
channel in a Spectre and in a Meltdown attack to leak on
average 7.83 B in one transient window.
In addition to the practical evaluation of the side chan-
nels, we demonstrate that our new primitives can evade de-
tection via performance counters [19, 40, 48, 72], and even
undermine the security of state-of-the-art proposals for secure
caches [59, 76, 97]. Thus, this paper shows that side channels
are quite versatile, making it hard to build robust detection
methods that cover all possible side channels. We stress that
it is important to build automated tooling for analyzing the
attack surface to design more effective countermeasures in the
future. Osiris is a ﬁrst step, and even when limiting ourselves
to single-instruction sequences, we show that many unknown
side channels can be uncovered automatically.
To summarize, we make the following contributions:
1. We introduce an approach to automatically ﬁnd timing-
based microarchitectural side channels that follow a
generic instruction-sequence-triple notation and develop
a prototype implementation1 for it.
2. We discover 4 new side channels on Intel and AMD CPUs.
3. We present FlushConﬂict, a microarchitectural KASLR
break that works on the newest Intel microarchitectures,
and a noise-resistant cross-core cross-VM covert channel
that does not rely on the memory subsystem.
4. We analyze existing side-channel detection and prevention
methods and show that they are ﬂawed with respect to our
newly discovered side channels.
Responsible Disclosure. We disclosed our ﬁndings to Intel
on January 19, 2021, and they acknowledged our ﬁndings
on January 22, 2021. Moreover, we disclosed the cross-core
covert channel to AMD on February 5, 2021.
2 Background
In this section, we provide background for this work.
2.1 Microarchitecture
The microarchitecture refers to the actual implementation of
an ISA. Typically, the microarchitecture is not fully docu-
mented, as it is transparent to the programmer. Hence, per-
formance optimizations are often implemented transparently
in the microarchitecture. As a result of the optimizations and
the abstraction, there is often unintended leakage of metadata,
which can be exploited in so-called microarchitectural attacks.
The most prominent microarchitectural attacks are cache-
based side channels [31, 37, 101] and transient-execution
attacks [50, 57, 79].
1Osiris’s source is available at https://github.com/cispa/osiris
1416    30th USENIX Security Symposium
USENIX Association
2.2 Side- and Covert Channels
Information is transmitted through so-called channels. These
channels are often intended to exchange information between
two entities, e.g., network or inter-thread communication.
Nevertheless, some channels are unintended by the designers,
e.g., power consumption or response time. Attackers can use
unintended channels to transmit information between two
attacker-controlled entities. We refer to such a channel as a
covert channel. Moreover, attackers can abuse the channel to
infer inaccessible data if a victim unknowingly is the sending
end. In this case, the channel is called a side channel.
Both side and covert channels exist in modern microar-
chitectures [28]. CPU caches are probably the most popular
microarchitectural components that can be abused for side
or covert channels [35, 37, 69, 101]. As CPU caches are
shared among different threads and even across CPU cores,
adversaries can abuse them in a wide range of attack scenar-
ios [36, 53, 57, 60, 64, 68].
2.3 Transient Execution Attacks
As modern CPUs follow a pipeline approach, instructions
might be executed out of order and are only committed to the
architectural level in the correct order. To avoid stalling the
pipeline, the processor continues precomputing even when
a branch value or a jump target is unavailable, e.g., due to a
cache miss. This is enabled through several prediction mech-
anisms that allow speculatively executing instructions. When
the branch target is evaluated, speculatively executed instruc-
tions are allowed to retire only in the case of correct predic-
tion. Otherwise, the speculatively executed instructions are
squashed. Instructions that are not retired but leave microar-
chitectural traces are called transient instructions [17, 46, 57].
Spectre [50] is one class of transient-execution attacks
exploiting speculative execution. By mistraining a branch
predictor, an attacker can inﬂuence the transient control ﬂow
of a victim application. In the transient control ﬂow, an at-
tacker typically tries to encode application secrets into the
microarchitectural state. Using a side channel, this encoded
information is later transferred to the architectural state. Melt-
down [57] is another class of transient-execution attacks, ex-
ploiting the lazy handling of exceptions. On affected CPUs,
inaccessible data is forwarded transiently before the excep-
tion is handled. Transient execution attacks commonly use
the cache to encode leaked secrets [17, 50, 52, 57, 61] but can
also use other side channels [12, 56, 80, 84].
2.4 Fuzzing
Fuzzing is a software testing technique that aims at ﬁnding
bugs in software applications [9, 18, 73, 78, 88]. A fuzzer
typically generates a large number of test inputs and monitors
software execution over these inputs to detect faulty behav-
ior. Due to the huge input space, fuzzers typically search for
inputs with a high probability of triggering a bug while avoid-
ing uninteresting input. Fuzzers usually follow one of two
different approaches for generating input [9, 13]. Mutation-
based fuzzers usually start with an initial set of inputs (seeds),
then generate further test input by applying mutations, e.g.,
splicing or bit ﬂipping [9, 21, 41]. Grammar-based fuzzers
exploit existing input speciﬁcations to generate a model of
the expected input format. Based on this model, the fuzzer
efﬁciently generates accepted input [13, 38, 70]. Moreover,
fuzzing approaches can be clustered in two classes based on
how they generate new or mutated input. While blind fuzzing
randomly generates input based on a grammar of predeﬁned
mutations [21, 39], guided fuzzing uses the current execution
to guide the generation of new input. These techniques aim
to maximize a given metric [9, 18, 73, 103].
Most research efforts on fuzzing target software applica-
tions. Nonetheless, hardware fuzzing is becoming increas-
ingly popular [20, 30, 65]. Sandsifter [20] presents a search
algorithm that allows efﬁciently ﬁnding undocumented x86
instructions. It applies byte-code mutation to generate new
instructions and checks whether the processor can decode
the generated instructions. ABSynthe [30] allows automati-
cally synthesizing a contention-based side channel for a target
program. It uses fuzzing to ﬁnd instruction sequences that
generate distinguishable contention on secret-dependent code
execution. Mutation parameters in ABSynthe include instruc-
tion building blocks, repetition number, and use of memory
barrier. Hardware fuzzing has also been utilized to improve
existing Meltdown attacks [100] or ﬁnd new variants of these
attacks [65], automate the search for Spectre gadgets [90],
and identify cross-core transient-execution attacks [77].
3 High-level Overview of Osiris
In this section, we introduce a notation that captures timing-
based side channels based on instruction-sequence triples
(Section 3.1) before we describe the design of Osiris. Side
channels not exploitable via timing differences are out of
scope for Osiris. We discuss challenges when using this new
notation to ﬁnd side channels (Section 3.2). Finally, we show-
case the big picture of our fuzzing framework (Section 3.3).
3.1 Side-Channel Notation
For detecting side channels, we ﬁrst focus on detecting covert
channels, as every side channel can also be used as a covert
channel. Regardless whether timing-based covert channels
are used as side channels or as covert channels in transient-
execution attacks, they follow these three steps:
(1) In the ﬁrst step, the attacker brings a microarchitectural
component, abused by the attack, into a known state. For
example, the attacker might ﬂush or evict a cache line (e.g.,
Flush+Reload, Prime+Probe, Evict+Reload) or power down
the AVX2 unit. We call this known state the reset state (S0).
USENIX Association
30th USENIX Security Symposium    1417
Table 1: Existing timing-based side channels mapped to se-
quence triples and whether our approach can ﬁnd it (
) or
). Reasons for failure are that multiple in-
cannot ﬁnd it (
), side channel only works across
structions are required (
hardware threads (
).
), or speciﬁc operands are required (
Seqtrigger
AVX2 instr.
mem. access mem. access
mem. access
mem. access
cond. jump
Side channel
Seqreset
sleep
AVX [84]
Flush+Reload [101]
CLFLUSH
Flush+Flush [35]
CLFLUSH
CLFLUSH
Flush+Prefetch [33]
PREFETCH
CLFLUSH
cond. jump
cond. jump
BranchScope [25]
mem. accesses mem. access mem. access
Evict+Reload [74]
mem. accesses mem. access mem. access
Evict+Time [69]
Prime+Probe [74]
mem. accesses mem. access mem. accesses
Reload+Refresh [14] mem. accesses mem. access mem. accesses
Collide+Probe [56]
DRAMA [75]
Port contention [7]
mem. access
mem. access
sleep
mem. access mem. access
mem. access mem. access
execute