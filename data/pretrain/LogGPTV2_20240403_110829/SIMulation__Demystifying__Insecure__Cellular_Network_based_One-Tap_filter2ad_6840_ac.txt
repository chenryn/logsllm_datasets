### Figure 5: Two Attack Scenarios Against OTAuth Scheme

**Figure 5** illustrates two attack scenarios against the OTAuth scheme implemented in our research. The first scenario involves token stealing, while the second scenario involves connecting to the victim's hotspot.

#### Token Stealing Phase
1. **Victim's Smartphone**: The malicious app on the victim's smartphone initiates the attack.
2. **Malicious App**: Sends a request to the MNO Server for a masked phone number using `appId`, `appKey`, and `appPkgSig`.
3. **MNO Server**: Responds with a masked phone number.
4. **Malicious App**: Requests a token from the Victim App Server using the masked phone number.
5. **Victim App Server**: Responds with a token.
6. **Malicious App**: Sends the token to the Attacker's Smartphone.

#### Legitimate Initialization Phase
1. **Attacker's Smartphone**: The attacker's genuine app requests a masked phone number from the MNO Server.
2. **MNO Server**: Responds with a masked phone number.
3. **Attacker's Smartphone**: Asks for authorization.
4. **Victim's Smartphone**: Receives the authorization request and approves it.
5. **Attacker's Smartphone**: Receives the approval and proceeds with the login/signup process.

#### Token Replacement Phase
1. **Attacker's Smartphone**: Hooks and replaces the token sent by the genuine app.
2. **Attacker's Smartphone**: Completes the attack by tampering with the app.

**Note**: The entire token obtainment process does not require any interaction from the victim user and will not cause any detectable phenomena (e.g., permission requests or risk warnings). A demo video of this attack is available at [https://simulation.code-analysis.org](https://simulation.code-analysis.org).

#### Attack by Connecting to the Victimâ€™s Hotspot
The main process of attacking through a hotspot connection is similar to the previous attack. In this scenario, the attacker connects their smartphone to the mobile hotspot of the victim's mobile phone, allowing the attacker to send app-specific data to the MNO server through the victim's cellular network. The subsequent steps are the same as in the token stealing phase, and the attacker can successfully bypass the authentication scheme on the attacker's device.

**Note**: The OTAuth SDK checks the network status of the smartphone (e.g., Operator Type) and may expose that the attacker's device has a different cellular network status than the victim. However, this check can be easily bypassed since the attacker has full control over their device. Specifically, the attacker overloads the corresponding methods (e.g., `android.net.ConnectivityManager.getActiveNetworkInfo` and `android.telephony.TelephonyManager.getSimOperator`) to return true statements. A demo video of this type of attack against the Sina Weibo app (the most popular micro-blogging app in China, similar to Twitter) is also available online at [https://simulation.code-analysis.org](https://simulation.code-analysis.org).

### IV. Large-Scale Measurement Study

To better understand how real-world apps are affected by the issues identified above, we conducted a large-scale measurement study over a set of popular Android and iOS apps. Our results show that a significant portion of highly popular apps are vulnerable due to the integration of the OTAuth scheme.

#### A. Dataset
Our final dataset includes:
- **Android Apps**: 1,025 apps downloaded between July 19, 2021, and November 20, 2021.
- **iOS Apps**: 894 apps.

**Android App Set**:
- Identified an app list containing 15,668 apps based on 17 unique app categories provided by the Huawei App Store (top 1,000 apps per category).
- Selected apps with more than 100 million downloads, as users in mainland China rarely use Google Play and instead prefer the Huawei App Store.

**iOS App Set**:
- Collected iOS apps by referring to the Android app set, using Qimai Data to find the correspondence between Android and iOS versions.
- Used a jailbroken iPhone 7 Plus (with iOS 13.4.1) to manually install and dump binary executables using flexdecrypt.

#### B. Measurement Approach
**Table II: API Signatures Collected from the Three MNO OTAuth SDKs**

| MNO | API Signature |
|-----|---------------|
| CM  | `com.cmic.sso.sdk.auth.AuthnHelper` |
| CU  | `com.unicom.xiaowo.account.shield.UniAccountHelper` |
| CT  | `cn.com.chinatelecom.account.sdk.CtAuth` |

**Challenges in Automatic Detection**:
- **Static Analysis**: Checking for MNO SDK signatures in decompiled app code.
- **Dynamic Analysis**: For undetected apps, performing dynamic analysis to inspect runtime instances of OTAuth-related classes.

**For iOS Apps**:
- Static analysis to check for generic SDK signatures and URLs used by the OTAuth protocol.

**Dynamic Information Retrieving**:
- For Android apps, using Frida to load specific classes via ClassLoader.
- For iOS apps, no dynamic analysis is needed due to Apple's restrictions on packed or obfuscated code.

#### C. Results and Findings
**Table III: Overview of App Measurement Results**

| Platform | Total | Suspicious (S) | Unuspicious (U) | Suspicious (S&D) | Unuspicious (S&D) | TP | FP | TN | FN | Precision (P) | Recall (R) |
|----------|-------|----------------|-----------------|------------------|-------------------|----|----|----|----|---------------|------------|
| Android  | 1025  | 279            | 746             | 471              | 554               | 396 | 75 | 400 | 154 | 0.84          | 0.72       |
| iOS      | 894   | 496            | 398             | 398              | 496               | 398 | 98 | 287 | 111 | 0.80          | 0.78       |

**Top Vulnerable Apps** (Based on MAU):

**Table IV: Identified Top Apps in the Android and iOS Dataset**

| App                | Category           | MAU (in millions) |
|--------------------|--------------------|-------------------|
| TikTok             | Short Video        | 578.85            |
| Baidu Input        | Input Method       | 569.46            |
| Baidu              | Mobile Search      | 474.62            |
| TouTiao            | Comprehensive      | 465.27            |
| Sina Weibo         | Social Media       | 311.60            |
| Pinduoduo          | E-commerce         | 321.29            |
| Dianping           | Local Life         | 285.57            |
| DingTalk           | Office Software    | 265.21            |
| Kugou Music        | Music              | 237.26            |
| Gaode Map          | Map Navigation     | 156.63            |
| Iqiyi              | Video Streaming    | 143.57            |
| Meitu              | Picture Beautification | 139.47          |
| Moji Weather       | Weather            | 122.61            |

**Conclusion**:
Compared to the naive solution that only considers static retrieval of MNO SDK signatures, our mixed static and dynamic analysis mechanisms significantly improve the coverage, finding 73.8% more suspicious apps for the Android dataset. Additionally, our analysis pipeline achieves high precision and recall, with 84.08% and 80.24% of the identified Android and iOS apps being indeed vulnerable, respectively.