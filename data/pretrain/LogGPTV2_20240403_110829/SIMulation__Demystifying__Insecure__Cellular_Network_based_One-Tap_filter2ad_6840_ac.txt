Fig. 5: Two attack scenarios against OTAuth scheme implemented by our research.
539
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:28:34 UTC from IEEE Xplore.  Restrictions apply. 
Victim's SmartphoneMalicious AppVictim App ServerMNO ServerAttacker's SmartphoneVictim AppAttackerToken Stealing PhaseLegitimateInitializationPhaseTokenReplacementPhase1.2 Responsemasked phoneNumV1.4 ResponsetokenV1.5 Send TokentokenV2.2 Request Masked PhoneNumappId, appKey, appPkgSig1.3 Request TokenappId, appKey, appPkgSig2.3 ResponseInterface with masked phoneNumA2.6 Request TokenappId, appKey, appPkgSig2.4 Ask for authorization2.7 Response3.1 Ask for login/signup3.2 Ask for login/signuptokenV3.3 Ask for PhoneNum3.4 Response3.5 Responseapproval to login/signup with phoneNumV2.1 Request login/signup2.5 Give authorizationmasked phoneNumAtokenAtokenVphoneNumV1.1 Request Masked PhoneNumappId, appKey, appPkgSigtokenA1appId appKey appPkgSig2tokenV45367Login/Sign-upApprovalVictim's SmartphoneMalicious AppVictim AppAttacker's SmartphonetokenVtokenAappId appKey appPkgSigtokenVApp ServerMNO Server2appId appKey appPkgSig3tokenVMNO Server564Victim's Smartphone1App Server78Login/Sign-upApprovalVictim's hotspotAttacker's SmartphoneappId, appKey, appPkgSigtokenVtokenVappId appKey appPkgSigVictim ApptokenVMalicious Appalert by the system. The entire token obtainment process does
not require any interaction from the victim user, and will not
cause any detectable phenomena (e.g., popping up permission
requests or risk warnings). Lastly, we complete the attack by
hooking and replacing the token sent by a genuine app on the
attacker’s device (tampering with the app). The demo video of
this attack is presented in https://simulation.code-analysis.org.
Attack by connecting to the victim’s hotspot. The main pro-
cess of attacking through hotspot connection is very similar to
the previous attack we have presented, as shown in Figure 5(b).
In this scenario, we assume that the attacker can connect his
own smartphone to the mobile hotspot of the victim’s mobile
phone. Thus, the attacker can send app-specific data to the
MNO server through victim’s cellular network. The attacker
follows the same subsequent steps as the previous attack,
and can successfully bypass the authentication scheme on the
attack device side.
Note that
in this attack,
the OTAuth SDK checks the
network status of the smartphone (e.g., checks the Operator
Type of the device) and may expose that
the attacker’s
device has a different cellular network status as the victim.
However, this check can be easily bypassed since the attacker
has full control over the system of the attacker’s device.
More specifically, since this check is implemented by the
SDK through specific methods (e.g., android.net.Connectivity-
Manager.getActiveNetworkInfo, android.telephony.Telephony-
Manager.getSimOperator), we overloaded the corresponding
methods to explicitly return true statements every time the
check is performed. A demo video of this type of attack
against the Sina Weibo app [43] (the most popular micro-
blogging app in China, similar to Twitter) is also posted online
( https://simulation.code-analysis.org).
IV. LARGE-SCALE MEASUREMENT STUDY
To better understand how real-world apps are affected by the
issues identified above, we perform a large-scale measurement
over a set of popular Android and iOS apps. Our results
show a large portion of highly popular apps confirmed to be
vulnerable due to the integration of such OTAuth Scheme.
A. Dataset
Our final dataset includes a total number of 1,025 Android
apps and 894 iOS apps. These apps were downloaded be-
tween July 19, 2021 and November 20, 2021. As most app
stores explicitly prohibit any form of automated app info
collection [44] [45], we referred to Qimai Data [46], a third-
party mobile app data analysis platform to help label the most
popular apps.
Android app set. To build the Android app set, we first
identified an app list containing 15,668 apps based on the
17 unique app categories provided by Huawei App Store [47]
(i.e., top 1,000 apps for each category). Further, based on the
download statistics collected from Qimai Data, we selected
all those apps with more than 100 million downloads. Note
that users in mainland China rarely use Google Play as their
source for app downloading, and Huawei App Store is one of
the most popular markets instead. As a result, apps collected
from this source can represent well the prevalence of OTAuth
SDK usage in Chinese markets. We consider such a dataset can
sufficiently cover a wide range of highly popular app across
different categories.
iOS app set. Since Apple does not reveal the number of
downloads for each app in its App Store [48], we collected iOS
apps by referring to our Android app set. The correspondence
between the Android and iOS versions of an app is provided
by Qimai Data [46]. We used a jailbroken iPhone 7 plus (with
iOS 13.4.1) to manually install the corresponding apps and
dumped their binary executables using flexdecrypt [49]. In this
way, we finally collected 894 iOS apps corresponding to our
Android app set. Note that since not every Android app in our
data set has an iOS counterpart, the total number of apps in
this dataset is not identical to the Android app set.
B. Measurement Approach
TABLE II: API signatures collected from the three MNO
OTAuth SDKs
MNO
CM
CU
CT
CM
CU
CT
API signature
com.cmic.sso.sdk.auth.AuthnHelper
com.unicom.xiaowo.account.shield.UniAccountHelper
com.unicom.xiaowo.account.shieldjy.UniAccountHelper
cn.com.chinatelecom.account.sdk.CtAuth
cn.com.chinatelecom.account.api.CtAuth
cn.com.chinatelecom.gateway.lib.CtAuth
cn.com.chinatelecom.account.lib.auth.CtAuth
“https://wap.cmpassport.com/resources/html/contract.html”
“https://opencloud.wostore.cn/authz/resource/html
/disclaimer.html?fromsdk=true”
“https://e.189.cn/sdk/agreement/detail.do”
d
i
o
r
d
n
A
S
O
i
“CM”, “CU”, and “CT” refer to China Mobile, China Unicom, and China
Telecom respectively.
Challenges in automatic detection. To identify those vul-
nerable apps in our Android app set, a naive approach could
be statically checking whether there are certain MNO SDK
signatures in the decompiled app code. For example, such
signatures could be a unique string that contains the package
name and class name in the SDK. However, our preliminary
analysis showed this mechanism is far from satisfying. Specif-
ically, using the signatures collected from the three MNO
OTAuth SDKs (see the list presented in Table II), we only
located 271 out of 1,025 (around 26%) apps from our Android
app set, a much lower percentage than what we observed.
Our further manual inspection showed there are a number of
reasons causing such a low coverage rate.
• Code obfuscation and app packing. A large number
of apps integrate anti-reverse engineering techniques such
as code obfuscation (e.g., ProGuard [50]) and app pack-
ing [51], [52] for intellectual property protection. Both of
these mechanisms may cause false negatives during SDK
signature detection.
• Third-party SDKs without MNO SDK signatures.
It
is also possible that some third-party SDKs implement
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:28:34 UTC from IEEE Xplore.  Restrictions apply. 
540
Dynamic information retrieving. For the remaining apps
that were not detected by static analysis, we perform an
additional round of dynamic analysis and inspect whether the
instances of OTAuth related classes (based on the collected
SDK signatures) indeed exist at runtime. More specifically, for
each app, we automatically install and launch the app through
ADB [56]. Then, we use Frida [38] to load the specific classes
in the SDK signatures via ClassLoader. If relevant SDK is not
integrated into the app, then a ClassNotFoundException will be
caught; otherwise, the API class will be loaded successfully,
indicating that the corresponding SDK indeed exists in the
tested app. In this way, we can find more candidate apps that
are missed by the static analysis.
For iOS apps, we statically check whether the decompiled
code contains the previously obtained SDK signatures that are
generic to both Android and iOS. Particularly, here we inspect
the URLs used by the OTAuth protocol since the package
name and class name of the same SDK could be different in
the two platforms. Note that for iOS apps, we do not need
to perform the dynamic analysis since Apple does not allow
apps with packed or obfuscated code to be published in App
Store [48].
While such mechanisms cannot guarantee the reported sus-
picious apps to be indeed vulnerable, the results here provide
a significantly more accurate scope for identifying affected
apps.
C. Results and Findings
Affected Apps. The measurement results of apps are sum-
marized in Table III. In total, among the 1,025 Android apps,
we identified a total number of 396 apps that are affected by
the SIMULATION attack. For the iOS dataset, 398 out of 894
apps are affected.
TABLE III: Overview of app measurement results
Total
Detection
Result
S
S&D Verification
Result
P
R
Android
1025
iOS
894
suspicious
279
471
unsuspicious
746
554
suspicious
unsuspicious
496
398
\
\
TP
FP
TN
FN
TP
FP
TN
FN
396
75
400
154
398
98
287
111
0.84 0.72
0.80 0.78
S indicates the result of static retrieving, S&D indicates the result of static and
dynamic retrieving; P and R refer to the precision and the recall respectively.
In the following rows, TP, FP,TN, and FN refer to True Positive, False
Positive, True Negative, and False Negative respectively.
To detail, for Android apps, our static information retrieving
process enables us to locate 279 candidates. The dynamic
information retrieving process helps us to locate 192 additional
candidates. To this end, we have a total number of 471
candidates through the automated analysis process. Lastly, our
manual verification confirmed that 396 out of these 471 apps
are indeed vulnerable to the SIMULATION attack. For iOS
apps, our static analysis located 496 suspicious apps and we
finally confirmed 398 of them are indeed vulnerable. Table IV
Fig. 6: Overview of our analysis pipeline for identifying
potentially vulnerable apps.
their own app-level logic for service integration, instead
of directly including the MNO OTAuth SDKs. For exam-
ple, for third-party SDKs like U-Verify [53], while they
indeed integrate the MNO OTAuth services, we did not
find any relevant code of MNO OTAuth SDKs from their
decompiled code.
Given the challenges above, in our research, we employ a
mix of static and dynamic analysis mechanisms to more effec-
tively locate those apps that are vulnerable to SIMULATION
attack. Figure 6 shows the overall pipeline of our approach.
Static information retrieving. In the static analysis process,
we searched for SDK signatures from the decompiled app
code with the help of dexlib2 [54] library. If an app contains
a class that matches one of our signatures (e.g., class name
and package name), we consider that this app has integrated
OTAuth service. As mentioned earlier,
in addition to the
selected signatures from MNO SDKs, we employ a set of
heuristics to recover other OTAuth related signatures (i.e., the
signature of other third-party SDKs) and include them to the
SDK signature set.
The additional SDKs and signatures other than the MNO
SDKs are collected through the following mechanisms.
• Third-party SDKs’ official website. Some MNOs list
part of the third-party agents they have collaborated with
on their official website (e.g., China Telecom lists their
collaborators on [55]). In addition, we also collect other
third-party agents that are not listed by the MNOs by
active searching. Then, we collect their released SDKs
from their websites and select their signatures.
apps
highlighted
third-party
agents. While some third-party agents do not provide
their SDKs for public download, such SDKs would
typically list specific apps that integrate their services. To
this end, we find their corresponding apps and manually
identify their SDKs as well as the SDK signatures
through reverse engineering such apps.
• Individual
by
As a result, with the collected SDK signatures, we can effec-
tively capture more affected apps. Note that our investigation
showed code-obfuscation does not have significant impact on
our analysis. Specifically, both the documentation of MNO
SDKs and third-party SDKs explicitly asked the developers to
not obfuscate the SDK code to ensure its usability, meaning
that the SDK signatures can be preserved well in those apps.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:28:34 UTC from IEEE Xplore.  Restrictions apply. 
541
AppDatasetStaticInformation RetrievingMNO SDKsMNOSignaturesThird-partySignaturesThird-partySDKsDynamic Information Retrievingwithoutsignaturewithsignaturewith signatureSuspiciousAppslists the most popular vulnerable apps based on the number
of their MAU.
TABLE IV: Identified top apps in the Android and iOS dataset that
have more than 100 million monthly active users (MAU) in September
2021, according to the statistical results of IiMedia Polaris [11].
App
Category
MAU*
TikTok
short video
578.85
Baidu Input
input method
569.46 WiFi Master
Baidu
mobile search
474.62
TouTiao
App
Sina
Weibo
Key
Gaode Map
Kuaishou
Baidu Map
Youku
Iqiyi
map
navigation
short
video
map
video
video
music
navigation
comprehensive
comprehensive
465.27
Pinduoduo
436.50
Dianping
379.58
DingTalk
367.19
350.90
Meitu
Moji
Weather
Category
MAU*
community
311.60
Wi-Fi
comprehensive
information
integrated
platform
local life
office
software
picture
weather
calendar
beautification
285.57
265.21
237.26
156.63
143.57
139.47
122.61
Kugou
Music
* MAU refers to the amount of Monthly Active Users (in millions).
321.29
Compare to the naive solution that only considers statically
retrieving the signatures of MNO SDKs, our mixed static
and dynamic analysis mechanisms significantly improve the
coverage for this task by finding 73.8% (271 v.s. 471) more
suspicious apps for the Android dataset. In addition, our
analysis pipeline also achieves high precision and recall.
Particularly, 84.08% (396/471) and 80.24% (398/496) of the
identified Android and iOS apps are indeed vulnerable re-
spectively, while 72% (396/550) vulnerable Android apps and
78.19% (398/509) vulnerable iOS apps are pointed out by our
analysis pipeline.