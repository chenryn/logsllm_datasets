appearing in a whitelist may be re-registered, giving the new
owner the ability to serve malicious content through a source
that is already trusted by the victim site. To ﬁnd periods when
whitelisted domains were expired, we use public TLD zone
ﬁles which we have collected daily since 2016. We compute
6
Fig. 7: Average historic Alexa rank of whitelisted domains
the difference between zone ﬁles on consecutive days to ﬁnd
domains that are newly registered or expired. These differences
are indexed into a search engine allowing us to query for the
registration history of a domain name. Despite the lack of zone
ﬁles covering the full duration of our dataset, we were still
able to ﬁnd 9 cases of domains expiring after being added to a
whitelist and 7 domains which were not registered at all during
the periods they appeared in CSP whitelists.
2) Typos: CSP whitelists are also vulnerable to human
error in deﬁning trusted sources. A typo entered in the whitelist
permits the loading of content from an unintended domain. The
typo domain may not be registered, in which case it can be
bought and abused as above. If the typo domain is already
owned, there is still the potential for the current owner to
discover the issue and abuse the misplaced trust. Compared to
traditional typosquatting where each end-user needs to mistype
the domain, typos in CSPs involve a one-time mistake which
results in a persistent threat. To ﬁnd typos we use the fat-ﬁnger
typosquatting models of Wang et al. [48] to generate a list of
domains that may have been the intended ones. We compare
the Alexa ranks of these domains to the whitelisted domain
to ﬁnd cases where the ranks differ signiﬁcantly, implying the
site owner may have meant to type the more popular domain.
We manually inspected each of these cases taking into account
the length of the domain, whether the domains are whitelisted
by other sites, the type of content served on both domains, and
whether the domain is used elsewhere on the page. In doing
so, we found 11 domains which appear to be typos on the CSP
whitelists of 11 different Web sites in our dataset.
3) Local Addresses: Finally, even if the attacker cannot
gain control of the whitelisted domain, in some cases they
may still exploit the IP address it points to. If this address is
in a private IP range, an attacker can serve malicious content to
victims on the same LAN [28]. To ﬁnd such cases, we queried
Farsight’s DNSDB to determine what the whitelisted domains
resolved to in the past. We searched these records for private IP
addresses and checked that the observations occurred during a
period where the domain was present on a CSP whitelist. This
revealed 15 whitelisted domains trusted by 26 sites.
Table II summarizes our ﬁndings from each condition as
well as the overall impact on the sites using CSP. In addition, it
shows examples which were vulnerable to abuse and the sites
which could have been affected, notably including Dropbox,
a site with an otherwise exemplary CSP record. As the table
indicates, 50/373 (13%) sites using CSP whitelists trusted at
least one abusable domain. Unlike other more obvious CSP
mistakes, avoiding these requires carefully vetting the domains
and regularly updating the list. This is not an easy task, as a
surprising percentage of popular sites fail at some point and
the maintenance burden is even higher for sites that whitelist
hundreds of domains. Because of this non-obvious interaction
lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll05010015020020142015201620172018# of elements050 K100 K150 K200 K20142015201620172018rankCategory
Expired
Example
Typo
Example
Local address
Example
Total
Vulnerable domains
Duration
Impacted domains
16
sushissl.com
11
optmster.com
15
marketo.net
41
39 days
7 months
3 months
15
zomato.com
11
experian.com
26
dropbox.com
50
TABLE II: Vulnerable whitelisted domains and the number of sites that
allowed these domains in their whitelists. One example for each category
with a high-proﬁle site that included it and duration of attack opportunity.
between CSP and DNS, even a perfectly secure CSP could
become insecure without changes to the policy.
D. Longitudinal Case Studies
Contrary to other works which focused on analyzing CSP’s
adoption and security from a bird’s eye viewpoint and at most
over a period of a few months, our archival analysis enables
us to investigate how sites struggled in their deployment of
content-restricting CSPs over the years. In the following, we
present our insights into sites that exemplify general behavior
and issues we identiﬁed in our long-term study.
1) Curating Limited Whitelists: To understand how pop-
ular Web sites attempt
to curate their whitelists, we use
airbnb.com as a motivating example. The site ﬁrst de-
ployed a CSP report-only (CSP-RO) header on November 12,
2014. While initially 17 sites were whitelisted (and therefore
allowed) to serve script resources, by March 27, 2015, the
list of whitelisted sites had grown to 21. On the next day,
however, a new policy was deployed (still
in report-only
mode), whitelisting the full HTTPS scheme; thereby essentially
allowing any site to provide script content
to Airbnb. In
addition, we observed multiple changes to whitelisted hashes,
indicating that due to changes of inline scripts, these had to
be repeatedly modiﬁed. The policy was further modiﬁed until
May 1, 2015, when the curated policy was deployed as an
enforcement CSP. This policy was modiﬁed three more times
until May 9, 2015, when CSP was fully disabled.
The policy was re-enabled on May 22, 2015, and from
then up to December 8, 2017, we observed 222 changes to
the deployed CSP, merely adding and removing hashes of
whitelisted scripts, while still allowing any HTTPS host to
serve scripts (i.e., not actually mitigating the risk of content
injection at all). On December 8, 2017, airbnb.com started
experimenting with changing CSP-RO headers, limiting the
sites from which remote scripts could be loaded. The ﬁrst
variant of a blocking CSP with limited sites was deployed on
January 13, 2018. However, on January 16, 2018, the policy
regressed to trusting all HTTPS hosts for scripts. After another
29 modiﬁcations to CSP-RO headers, Airbnb on March 13,
2018, ﬁnally deployed a blocking CSP with limited hosts, and
a different report-only policy until the end of our analysis
timeframe. By then, while only two more sites were added
to the enforced list, we observed almost daily changes to the
policy, ensuring up-to-date hashes of the used inline scripts.
For both Airbnb and other domains exhibiting the same
struggle, we attempted to attribute changes in the CSP to
changes in the page itself, so as to understand if they had
been caused through the site itself adding new scripts, or
third-party code (such as ads) loading additional dependencies.
However, apart from obvious changes in hashes due to changed
inline scripts, we could only attribute a negligible fraction of
changes in the whitelisted sites to modiﬁed content of the start
page (10/106 for Airbnb). For Airbnb, we investigated further,
crawling one level of links for each of the changes we could
not attribute. Doing so, we were able to attribute an additional
15 changes, but at the cost of making 106,090 GET requests
to the Internet Archive. Given this small increase in coverage
and our goal of not ﬂooding the IA with requests, we decided
to not follow this path of attribution any further.
Even though Airbnb was an early adopter of CSP and
made signiﬁcant efforts to secure their site, they had to often
effectively disable their policies for long periods of time.
These gaps could have been abused by attackers to launch
attacks that would not normally be possible with Airbnb’s CSP.
Moreover, while they ﬁnally managed to curate a whitelist of
33 sites, it took them multiple years from when they started
experimenting with CSP to arrive at this ﬁnal policy.
2) Eventually Giving Up on CSP: Next to those sites which
deploy CSP in an insecure variant by allowing any origin to
provide script code, our dataset also contains numerous sites
which tried to deploy CSP but eventually gave up. Overall,
294 sites used CSP in either mode for at least one day but not
within the last month of our analysis. Of those sites that used
CSP for at least one month, we ﬁnd that 227 eventually gave
up. Lastly, considering only those sites that made a long-term
attempt at CSP (at least one year), we ﬁnd a total of 79 sites
which ended their deployment before December 1, 2018.
Researchgate.net was a prominent example of a Web
site which moved from CSP to CSP-RO on September 13,
2018, before completely abandoning it on November 27, 2018.
Before moving to report-only mode, we observed 29 different
attempts at enforcing a working policy. This indicates that
researchgate.net struggled to build a functional, yet
secure policy. In a similar case, zaycev.net had deployed
CSP since September 2015 and stopped deployment on April
11, 2018. Checking snapshots from March and April, the site
itself appeared to be unchanged. Notably though, in the week
before CSP was disabled, we observed 3 changes, seemingly to
get the non-functioning CSP to stop interfering with the Web
site. These examples make it clear that even though sites spend
signiﬁcant effort to deploy CSP, many of them eventually
yield to the complexity of keeping their policies secure and
functional, and proceed to entirely abandon the mechanism.
3) Failing Gracefully Through Report-Only: While prior
works have found evidence that CSP report-only is used to
test and then deploy policies, our longitudinal allows us to
investigate the usage of report-only in a more thorough fashion.
In particular, we can identify all those sites which attempted
report-only within the ﬁve year period for which have extracted
CSP data and understand how many of them actually made
use of CSP report-only to test and then roll out policies. Even
though report-only mode is meant to allow “developers to piece
together their security policy in an iterative fashion” [47], it
can also be used to determine that the deployment of CSP
would cause too much interference with the operation of the
application and should therefore not be rolled out; importantly
before breaking the application due to blocked resources.
7
CSP-RO for
Content
CSP for
Anything
CSP for
Content
CSP for
TLS
CSP for
Framing
449
216 (48%)
130 (29%)
78 (17%)
23 (5%)
TABLE III: From report-only to enforced policies
In total, our dataset shows that 449 sites experimented
with report-only aimed at restricting content at some point
throughout our analysis period. Of those, 233 never actually
enforced any type of CSP afterward. This already indicates
that CSP’s complexity in restricting content deters developers
to deploy it after seeing the results in report-only. Next, we
analyze to what extent the remaining 216 sites leveraged the
tested content-restricting policy in enforcement mode.
Table III shows the overview of our results. Of the 216 sites
that enforced any type of CSP after testing a policy aimed at
restricting content, only 130 end up deploying such a policy.
The remaining 86 decided to not use CSP for its original
purpose, but rather for TLS enforcement (78) and framing
control (23), whereas 15 used it for both. Of those 86 sites, 79
had also tested report-only for framing or TLS control before,
showing that they merely dropped the content restriction part.
Two of the most prominent examples are aliexpress.com
and aarp.org. AliExpress started experimenting with CSP
report-only in September 2015, eventually allowing up to 35
sites as well as the usage of inline scripts and eval. In June
2016, they moved to a report-only policy permitting any origin
to provide content, but later only enforced an upgrade-
insecure-requests policy. aarp.org went further than
this, trying to remove unsafe-inline and unsafe-eval
from their policy altogether. They experimented with this for a
month in November 2017 but re-enabled the insecure directives
in December 2017. While this policy was still active for report-
only in December 2018, the site instead adopted an enforced
CSP merely used for framing control.
Overall, our results indicate that more than half of the
sites which experiment with any sort of report-only policy
never actually deploy one in enforcement mode. This provides
clear evidence that the complexity of the mechanism is too
high for many site operators. Notably though, we ﬁnd that
even when sites ﬁrst deploy report-only to restrict content
and subsequently move to an enforced policy, only 60%
(130/216) keep their content restriction in place, whereas the
remaining policies use CSP for the additional use cases, i.e.,
TLS enforcement or framing control. This shows that such sites
could fail gracefully, in the sense of understanding that CSP
for content restriction would break their site without causing
any outages to an enforced policy. Overall, only 29% of all
sites that tried script content policies via report-only ended up
enforcing such a policy, again highlighting CSP’s complexity.
4) Lasting Success in CSP Deployment: We now turn to
sites with a long-standing track record of improving their CSP
deployment. Three prime examples are pinterest.com,
github.com, and flickr.com. Pinterest ﬁrst deployed a
CSP-RO in February 2014 and tested it with an increasing
number of whitelisted hosts until July 2014. At that point,
they deployed a policy with 15 whitelisted sites but still had
to resort to unsafe-inline. The number of whitelisted
sites went up to 23 sites until May 2017, at which point
they deployed nonces and strict-dynamic (making mod-
ern browsers ignore both unsafe-inline and whitelisted
Fig. 8: TLS Enforcement Strategies
hosts). Notably, even though nonces and strict-dynamic
remained in the policy until the end of our experiment, the
list of whitelisted hosts still grew over time. This, however, is
because legacy browsers would otherwise block content.
When Github ﬁrst deployed CSP in November 2013, their
whitelist contained 5 sites, including a CDN of their host-
ing provider Fastly and Google Analytics. In October 2014,
however, Github stopped using Google Analytics and moved
all their assets to two of their own subdomains. By October
2015, those two subdomains were explicitly whitelisted; but
since that time, Github consolidated all scripting resources
on assets-cdn.github.com, which has remained the
lone entry in script-src. Notably, Github has never used
unsafe-inline. This behavior is in line with Github’s
efforts for securing their service [14, 43].
Our last example, Flickr, ﬁrst used CSP in enforcement
mode in October 2015. While they had a limited host whitelist,
they also had to employ unsafe-inline. The initial pol-
icy’s whitelisted sites grew to 12 by May 2017 at which
point Flickr started experimenting with nonces (in report-
only mode). After enabling nonces in their enforcement policy
in July 2017, they had to go back and forth with nonces
three times until ﬁnally, since August 2017, they have always
deployed nonces. In March 2018, Flickr ﬁrst sent a report-only
policy with strict-dynamic. This feature, however, while
still active in CSP-RO had not been ported to their enforced
CSP by the end of our analysis timeframe.
All
three sites have shown a long-lasting commitment
to improving security with CSP. These sites, however, are
objectively major players on the Web with the ability to spend
considerable time and resources on deploying appropriate poli-
cies. Even then, while Github is an excellent example of how
to deploy CSP in a fully secure fashion, the other two generally
positive examples have shown how complicated a deployment
can be, especially with regard to removing the need for
unsafe-inline. What’s more, for legacy compatibility (as,
e.g., Safari and Edge don’t support strict-dynamic [27]),
even sites with modern features like strict-dynamic need
to constantly update their host-based whitelist, meaning CSP
remains a long-term maintenance burden.
VI. CSP FOR TLS ENFORCEMENT