### Vulnerabilities in CSP Whitelists

#### 1. Expired Domains
Domains appearing on a whitelist may be re-registered, allowing the new owner to serve malicious content through a source that is already trusted by the victim site. To identify periods when whitelisted domains were expired, we analyzed public TLD zone files collected daily since 2016. By comparing zone files from consecutive days, we identified newly registered or expired domains. These differences were indexed into a search engine, enabling us to query the registration history of a domain name. Despite some gaps in our dataset, we found 9 cases where domains expired after being added to a whitelist and 7 domains that were not registered at all during the periods they appeared in CSP whitelists.

#### 2. Typos
CSP whitelists are also vulnerable to human error, such as typos in defining trusted sources. A typo in the whitelist can permit the loading of content from an unintended domain. If the typo domain is unregistered, it can be bought and abused. Even if the typo domain is already owned, the current owner may discover the issue and exploit the misplaced trust. Unlike traditional typosquatting, which requires each end-user to mistype the domain, typos in CSPs involve a one-time mistake resulting in a persistent threat. We used the fat-finger typosquatting models of Wang et al. [48] to generate a list of potential intended domains. By comparing the Alexa ranks of these domains to the whitelisted domain, we identified cases where the ranks differed significantly, suggesting the site owner may have intended to type the more popular domain. After manual inspection, we found 11 domains that appear to be typos in the CSP whitelists of 11 different websites in our dataset.

#### 3. Local Addresses
Even if an attacker cannot gain control of the whitelisted domain, they may still exploit the IP address it points to. If this address is in a private IP range, an attacker can serve malicious content to victims on the same LAN [28]. To find such cases, we queried Farsightâ€™s DNSDB to determine the historical IP resolutions of whitelisted domains. We searched these records for private IP addresses and checked that the observations occurred during a period when the domain was present on a CSP whitelist. This revealed 15 whitelisted domains trusted by 26 sites.

### Summary of Findings
Table II summarizes our findings, including the overall impact on sites using CSP. Notably, 50 out of 373 (13%) sites with CSP whitelists trusted at least one abusable domain. Avoiding these vulnerabilities requires careful vetting of domains and regular updates to the whitelist, which is a challenging task even for popular sites. Table II provides examples of vulnerable domains and the sites affected, including Dropbox, which otherwise has an exemplary CSP record.

| Category | Example | Impacted Sites | Duration |
|----------|---------|----------------|----------|
| Expired  | sushissl.com | 15 | 39 days |
| Typo     | optmster.com | 11 | 7 months |
| Local Address | marketo.net | 26 | 3 months |

### Longitudinal Case Studies

#### 1. Curating Limited Whitelists
To understand how popular websites manage their whitelists, we use Airbnb as an example. Airbnb first deployed a CSP report-only (CSP-RO) header on November 12, 2014, initially whitelisting 17 sites. By March 27, 2015, the list grew to 21. The next day, a new policy was deployed, whitelisting the full HTTPS scheme, effectively allowing any site to provide script content. Multiple changes to whitelisted hashes were observed, indicating repeated modifications due to inline script changes. The policy was further modified until May 1, 2015, when the curated policy was deployed as an enforcement CSP. After several more modifications, CSP was fully disabled on May 9, 2015. It was re-enabled on May 22, 2015, and up to December 8, 2017, 222 changes were made, adding and removing hashes of whitelisted scripts while still allowing any HTTPS host to serve scripts. On December 8, 2017, Airbnb started experimenting with limiting remote script sources. The first blocking CSP with limited sites was deployed on January 13, 2018, but regressed to trusting all HTTPS hosts on January 16, 2018. After 29 more modifications, Airbnb finally deployed a blocking CSP with limited hosts on March 13, 2018. By the end of our analysis, only two more sites were added to the enforced list, with almost daily changes to ensure up-to-date hashes of inline scripts.

#### 2. Eventually Giving Up on CSP
Some sites tried to deploy CSP but eventually gave up. In total, 294 sites used CSP for at least one day but not within the last month of our analysis. Of those that used CSP for at least one month, 227 eventually gave up. For sites that made a long-term attempt (at least one year), 79 ended their deployment before December 1, 2018. Researchgate.net, for example, moved from CSP to CSP-RO on September 13, 2018, and completely abandoned it on November 27, 2018, after 29 attempts at enforcing a working policy. Zaycev.net, which had deployed CSP since September 2015, stopped on April 11, 2018, with no apparent changes to the site itself. These examples highlight the complexity of maintaining secure and functional CSP policies.

#### 3. Failing Gracefully Through Report-Only
While prior works suggest CSP-RO is used for testing and deploying policies, our longitudinal data allows a more thorough investigation. Our dataset shows that 449 sites experimented with CSP-RO aimed at restricting content. Of these, 233 never enforced any type of CSP afterward, indicating that the complexity deters many developers. Of the remaining 216 sites, only 130 deployed a content-restricting policy. The other 86 sites used CSP for TLS enforcement (78) and framing control (23). Prominent examples include AliExpress and AARP. AliExpress started with CSP-RO in September 2015, eventually allowing up to 35 sites and inline scripts. In June 2016, they moved to a policy permitting any origin to provide content but later enforced only an upgrade-insecure-requests policy. AARP experimented with removing unsafe-inline and unsafe-eval in November 2017 but re-enabled them in December 2017. While this policy was still active in CSP-RO in December 2018, the site adopted an enforced CSP for framing control.

#### 4. Lasting Success in CSP Deployment
Sites with a long-standing track record of improving CSP deployment include Pinterest, GitHub, and Flickr. Pinterest first deployed CSP-RO in February 2014, testing it with an increasing number of whitelisted hosts until July 2014. They then deployed a policy with 15 whitelisted sites but still used unsafe-inline. By May 2017, they deployed nonces and strict-dynamic, making modern browsers ignore both unsafe-inline and whitelisted hosts. GitHub first deployed CSP in November 2013, with a whitelist of 5 sites. By October 2015, they consolidated all scripting resources on assets-cdn.github.com, which remained the sole entry in script-src. Flickr first used CSP in enforcement mode in October 2015, with a limited host whitelist and unsafe-inline. By July 2017, they deployed nonces, and in March 2018, they sent a CSP-RO policy with strict-dynamic. These sites demonstrate a long-lasting commitment to improving security with CSP, though even they face challenges, especially with legacy compatibility.

### Conclusion
Our study highlights the complexities and challenges in deploying and maintaining CSP policies. Even major players like GitHub, Pinterest, and Flickr, with significant resources, face difficulties. The need for continuous updates and the risk of vulnerabilities, such as expired domains, typos, and local addresses, underscore the importance of careful management and regular audits of CSP whitelists.