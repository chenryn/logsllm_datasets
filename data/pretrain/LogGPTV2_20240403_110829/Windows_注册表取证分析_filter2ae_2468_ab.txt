另外，我们发现孤立的已分配cell也被认为是已删除的。尚不清楚为什么注册表hive文件中会存在未引用的已分配cell，因为所有引用的cell在删除的同时都应该被标记未分配的。可能是某些类型的故障导致已删除的cell没有被标记为未分配的。
通过实验，我们发现现有的注册表工具能够执行更好的验证，结果少了误报（false
positive）。但是，我们还发现在很多情况下，这些工具产生了不正确的删除值关联，并输出了无效数据。这种情况在多次重复使用cell时可能会出现，如果不仔细检查，这些引用可能看起来是有效的。
## 一种恢复已删除项的新方法
考虑到算法还能改进，我们进行了重新设计，以最大的准确性和效率恢复已删除的注册表元素。经过多次试验和改进，我们最终得到了一种新的算法，可以准确地恢复已删除的注册表元素，同时最大限度地提高性能。这是通过发现和跟踪注册表hive文件中的所有cell以执行更好的验证、处理cell闲置空间以及发现孤立的键和值来实现的。测试结果与现有的注册表取证工具非常匹配，但具有更好的验证和更少的误报。
以下是改进算法的总结：
  1. 对所有已分配和未分配的cell执行基本解析。尽可能确定cell类型和数据大小。
  2. 枚举所有已分配cell并执行以下操作： 
    * 对于已分配键，请查找引用的值列表、类名和安全记录。填充引用cell的数据大小。验证键的父级以确定键是否是孤立的。
    * 对于已分配值，查找引用的数据并填充数据大小。
  3. 将所有已分配cell闲置空间定义为未分配的cell。
  4. 枚举已分配键并尝试查找值列表中显示的已删除值。并尝试在值列表闲置空间中查找旧的已删除值引用。
  5. 枚举未分配cell并尝试查找已删除的键cell。
  6. 枚举未分配键，并尝试定义引用的类名、安全记录和值。
  7. 枚举未分配cell并尝试查找未引用的已删除值cell。
  8. 枚举未分配值并尝试查找引用的数据cell。
## 恢复删除元素的示例
下面的示例演示我们的恢复删除项的算法是如何执行更准确的数据恢复并避免误报的。图8展示了一个常用注册表取证工具未能正确恢复数据示例：
可以看到从这个键恢复的ProviderName是乱码，因为它引用了一个被覆盖的位置。当我们删除的注册表恢复工具运行在同一个hive文件上时，它会识别数据已被覆盖，并且不会输出乱码。图9中的`data_present`字段的值为0，表示无法从hive文件中恢复已删除的数据。
正确的注册表数据:
    Key: CMI-CreateHive{2A7FB991-7BBE-4F9D-B91E-7CB51D4737F5}
         ControlSet002ControlClass{4D36E972-E325-11CE-BFC1-08002BE10318}019
    Value: ProviderName  Type: REG_SZ  (value_offset=0x137FE40) (data_size=20)
         (data_present=0) (data_offset=0x10EAF68) (deleted_type=UNALLOCATED)
## 注册表备份
Windows有一个定期备份系统注册表hive文件的简单机制。hive文件由一个名为RegIdleBackup的计划任务备份，默认情况下，该任务每10天运行一次。备份的文件存储在`%SystemRoot%System32configRegBack`中。只有最近的备份存储在此位置。这对于调查系统上最近的活动很有用。
RegIdleBackup功能在Windows Vista中首次引入。从那时起，Windows的所有版本有这个功能，但它在Windows
10系统上默认不运行，即使手动运行也不会创建备份，原因尚不清楚。
除了RegBack之外，系统还原（System
Restore）也会备份注册表数据。默认情况下，每当软件安装或卸载(包括Windows更新)时，都会创建系统还原快照。所以，系统恢复快照通常至少每月创建一次。虽然已知一些APT组织可以操作系统还原快照，但如果在攻击者活动时拍摄快照，则通常可以找到攻击者历史活动的证据。系统还原快照包含所有注册表hive文件，包括系统和用户hive文件。
维基百科关于[系统还原（System Restore）](https://en.wikipedia.org/wiki/System_Restore)的介绍。
处理系统还原快照中的hive文件可能具有挑战性，因为系统上可能存在许多快照，因此需要处理大量数据，而且通常快照之间的cell只存在有微小的变化。处理大量快照的一种策略是构建一个表示注册表cell的结构，然后对每个快照重复处理。以前结构中不存在的任何内容都可以被适当地认为是已删除和已记录的。
## 结论
注册表可以为取证分析提供大量数据。有了大量的已删除数据和历史数据来源，就可以在调查期间收集到更完整的攻击者活动。随着攻击者不断提高技术水平并改进他们的行动，调查人员将不得不进行调整以便发现并防御他们。
## 附录 – 事务型注册表事务日志(.TxR)格式
包含以下格式的记录：
Offset（偏移值） | Field（字段） | Size（大小）  
---|---|---  
0 | Magic number(魔数) (0x280000) |  
… |  |  
12 | Record size | 4  
16 | Record type (1) | 4  
20 | Registry operation type(注册表操作类型) | 2  
… |  |  
40 | Key path size(键路径大小) | 2  
42 | Key path size repeated | 2  
魔数总是0x280000。
记录大小包括标头（header）。
记录类型总是1。
操作类型1是创建键。
操作类型2是删除键。
操作类型3-8为写入或删除值。尚不清楚不同的类型的含义。
键路径大小在偏移值40处，并在偏移量42处重复。所有注册表操作类型都是这样。
对于注册表项的写入和删除操作，键路径位于偏移值72处。
对于注册表值写入和删除操作，存在以下数据：
Offset（偏移值） | Field（字段） | Size（大小）  
---|---|---  
56 | Value name size | 2  
58 | Value name size repeated | 2  
… |  |  
72 | Data type | 4  
76 | Data size | 4  
值记录的数据在偏移值88处开始。它包含键路径，后面跟着值名或者数据。如果数据大小不为零，则记录为值写入操作；否则为值删除操作。