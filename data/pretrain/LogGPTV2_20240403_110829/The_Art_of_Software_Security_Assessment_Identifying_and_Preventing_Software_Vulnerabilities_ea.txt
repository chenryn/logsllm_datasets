    u_int16_t win_size;    /* window size */ 
    u_int32_t next_seq;    /* next sequence we expect 
                                to see  used on reassemble */ 
    ... more members here ... 
} Stream; 
The Stream structure has (among other things) a base_seq member to indicate the 
starting sequence number of the part of the TCP stream that is being analyzed, and a 
last_ack member to indicate the last acknowledgement number that the peer was 
seen to respond with. 
Now, for the vulnerability. The following code is used to copy data from a TCP packet 
that has been acknowledged by the peer. All variables are of the unsigned int type, 
with the exception of offset, which is an int. Incoming packets are represented by a 
StreamPacketData structure (pointed to by spd), and are associated with a Stream 
structure (pointed to by s). Coming into this code, the packet contents are being 
copied into a 64K reassembly buffer depending on certain conditions being true. Note 
that before this code is executed, the reassembly buffer is guaranteed to be at least 
as big as the block of data that needs to be analyzed, which is defined to be the size 
(s->last_ack s->base_seq). 
The following code has checks in place to make sure the incoming packet is within the 
reassembly windowthe sequence number must be in between s->base_seq and 
s->last_ack: 
   /* don't reassemble if we're before the start sequence 
    * number or after the last ack'd byte 
    */ 
   if(spd->seq_num base_seq || spd->seq_num > s->last_ack) { 
       DEBUG_WRAP(DebugMessage(DEBUG_STREAM, 
                "not reassembling because" 
                " we're (%u) before isn(%u) " 
                " or after last_ack(%u)\n", 
              spd->seq_num, s->base_seq, s->last_ack);); 
       return; 
} 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
897 
Next, a check is again performed to ensure the sequence number is past base_seq. It 
also makes sure the sequence number is greater than or equal to the next expected 
sequence number in the stream. One final check is done to verify that the sequence 
number plus the payload size is less than the last acknowledged sequence number. 
    /* if it's in bounds... */ 
    if(spd->seq_num >= s->base_seq && 
        spd->seq_num >= s->next_seq && 
       (spd->seq_num+spd->payload_size) last_ack) 
    { 
If all these checks pass, the data portion of the packet being inspected is added to the 
reassembly buffer for later analysis: 
    offset = spd->seq_num - s->base_seq; 
    s->next_seq = spd->seq_num + spd->payload_size; 
    memcpy(buf+offset, spd->payload, spd->payload_size); 
The vulnerability in this code results from the authors using unsigned ints to hold the 
sequence numbers. The attack CORE outlined in its advisory consisted of a sequence 
of packets that caused the code to run with the following values: 
s->base_seq = 0xffff0023 
s->next_seq = 0xffff0024 
s->last_ack = 0xffffffff 
spd->seq_num 0xffffffff 
spd->payload_size 0xf00 
If you trace the code with these values, you can see that the following check is 
compromised: 
    (spd->seq_num+spd->payload_size) last_ack) 
The seq_num is an unsigned int with the value 0xffffffff, and spd->payload_size is an 
unsigned int with the value 0xf00. Adding the two results in a value of 0xeff, which is 
considerably lower than last_ack's value of 0xffffffff. Therefore, memcpy() ends up 
copying data past the end of the reassembly buffer so that an attacker can remotely 
exploit the process. 
Sequence Number Boundary Condition 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
898 
A nuance of sequence number signed comparisons is worth pointing out. Assume you 
use the following macro to compare two sequence numbers: 
    #define    SEQ_LT(a,b)    ((int)((a)-(b)) < 0) 
Use of a macro such as this has some interesting behavior when dealing with cases 
near to integer boundary conditions, such as the sequence numbers 0 and 0x7fffffff. 
In this case, SEQ_LT(0, 0x7fffffff) evaluates to (0-0x7fffffff), or 0x80000001. This 
is less than 0, so the result you find is that the sequence number 0 is less than 
0x7fffffff. 
Now compare the sequence numbers 0 and 0x80000000. SEQ_LT(0,0x80000000) 
evaluates to (0-0x80000000), or 0x80000000. This is less than 0, so the result you 
find is that sequence number 0 is less than 0x80000000. 
Now compare 0 and 0x80000001. SEQ_LT(0,0x80000001) evaluates to 
(0-0x80000001), or 7fffffff. This is greater than 0, so you find that the sequence 
number 0 is greater than the sequence number 0x80000001. 
Basically, if two sequence numbers are 2GB away from each other, they lie on the 
boundary that tells the arithmetic which sequence number comes first in the stream. 
Keep this boundary in mind when auditing code that handles sequence numbers, as it 
may create the opportunity for TCP streams to be incorrectly evaluated. 
Window Scale Option 
The window scale TCP option allows a peer to specify a shift value to apply to the 
window size. This option can allow for very large TCP windows. The maximum window 
size is 0xFFFF, and the maximum window scale value is 14, which results in a possible 
window size of 0x3FFFC000, or roughly 1GB. 
As mentioned, the sequence number comparison boundary is located at the 2GB point 
of inflection. The maximum window scale value of 14 is carefully chosen to prevent 
windows from growing large enough that it's possible to cross the boundary when 
doing normal processing of data within the window. The bottom line is that if you 
encounter an implementation that honors a window scale of 15 or higher, chances are 
quite good the reassembly code can be exploited in the TCP stack. 
URG Pointer Processing 
TCP provides a mechanism to send some out-of-band (OOB) data at any point during 
a data exchange. ("Out of band" means ancillary data that isn't part of the regular 
data stream.) The idea is that an application can use this mechanism to signal some 
kind of exception with accompanying data the peer can receive and handle 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
899 
immediately without having to dig through the data stream and generally interrupt 
the traffic flow. RFC 793 (www.ietf.org/rfc/rfc0793.txt?number=) is quoted here: 
The objective of the TCP urgent mechanism is to allow the sending user to stimulate 
the receiving user to accept some urgent data and to permit the receiving TCP to 
indicate to the receiving user when all the currently known urgent data has been 
received by the user. 
The TCP header has a 16-bit urgent pointer, which is ignored unless the URG flag is 
set. When the flag is set, the urgent pointer is interpreted as a 16-bit offset from the 
sequence number in the TCP packet into the data stream where the urgent data stops. 
When auditing urgent pointer processing code, you should consider the potential 
mistakes covered in the following sections. 
Handling Pointers into Other Packets 
The urgent pointer points to an offset in the stream starting from the sequence 
number indicated in the packet header. It's perfectly legal for the urgent pointer to 
point to an offset that's not delivered in the packet where the URG flag is set. That is, 
the urgent pointer offset might hold the value 1,000, but the packet is only 500 bytes 
long. Code dealing with this situation can encounter two potential problem areas: 
Neglecting to check that the pointer is within the bounds of the current packet 
This behavior can cause a lot of trouble because the code reads out-of-bounds 
memory and attempts to deliver it to the application using this TCP connection. 
Worse still, after extracting urgent data from the stream, if the code copies 
over urgent data with trailing stream data (effectively removing urgent data 
from the buffer), integer underflow conditions and memory corruption are a 
likely result. 
Recognizing that the pointer is pointing beyond the end of the packet and 
trying to handle it This behavior is correct but is easy to get wrong. The 
problem with urgent pointers pointing to future packets is complicated by the 
fact that subsequent packets arriving could overlap where urgent data exists 
in the stream or subsequent packets arriving might also have the URG flag set, 
thus creating a series of urgent bytes within close proximity to each other. 
Handling 0-Offset Urgent Pointers 
The urgent pointer points to the first byte in the stream following the urgent data, so 
at least one byte must exist in the stream before the urgent pointer; otherwise, there 
would be no urgent data. Therefore, an urgent pointer of 0 is invalid. When reviewing 
code that deals with urgent pointers, take the time to check whether an urgent 
pointer of 0 is correctly flagged as an error. Many implementations fail to adequately 
validate this pointer, and as a result, might save a byte before the beginning of the 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
900 
urgent pointer or corrupt memory when trying to remove the urgent data from the 
stream. 
Simultaneous Open 
There is a lesser-known way of initiating a TCP connection. In a simultaneous open, 
both peers send a SYN packet at the same time with mirrored source and destination 
ports. Then they both send a SYN-ACK packet, and the connection is established. 
From the perspective of an endpoint, assume you send a SYN from port 12345 to port 
4242. Instead of receiving a SYN-ACK packet, you receive a SYN packet from port 
4242 to port 12345. Internally, you transfer from state SYN_SENT to SYN_RCVD and send 
a SYN-ACK packet. The peer sends a SYN-ACK packet to you acknowledging your SYN, 
at which point you can consider the connection to be established. Keep this initiation 
process in mind when auditing TCP code, as it's likely to be overlooked or omitted. 
8.1.5 Summary 
IP stacks are complex subsystems that are difficult to understand, let alone find 
vulnerabilities in. Reviewers need an in-depth understanding of the variety of 
protocols that make up the TCP/IP protocol suite and should be aware of corner cases 
in these protocols. This chapter has introduced the major players in packet-handling 
code for most regular Internet traffic. You have looked at typical problems you'll find 
in each protocol and seen examples from real-world IP-handling code. 
8.2 Chapter 15.  Firewalls 
Chapter 15. Firewalls 
"Firewalls are barriers between 'us' and 'them' for arbitrary values of 'them'." 
Steve Bellovin 
8.2.1 Introduction 
If you look hard enough, you can find firewalling technology in some surprising places. 
Firewalls have been on the market for a long time, and they have evolved to the point 
that you find them in myriad permutations. Most corporations and large organizations 
use expensive commercial firewalls that run on dedicated server software or network 
appliances. You can find firewall code in embedded devices, such as enterprise 
routers and inexpensive home networking devices. Several free firewalls are included 
in different operating systems, or you can buy them as part of desktop security suites. 
The most recent enterprise trend is that firewalls and network intrusion detection 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
901 
system (NIDS) technologies are being merged into unified network intrusion 
prevention system (NIPS) appliances. 
Note 
You might be thinking that tons of complex and subtle protocol parsing and modeling 
code are precisely the kind of things you don't want in a critical core security device. 
Rest assured that this is merely because you're a victim of the obsolete 
perimeter-centric vulnerability paradigm. As Obi-Wan Kenobi said, "These are not the 
droids you are looking for." 
This chapter focuses on the security review of IP firewall code, whether you encounter 
it in a Windows desktop application or the code for a Cisco PIX. Luckily, there are only 
a handful of basic design and implementation security issues every TCP/IP-cognizant 
firewall must tackle, regardless of its form factor. You can't become a firewall expert 
in just one chapter, but you can explore the problem domain enough that you'll have 
a good handle on how to approach a review. 
You start by examining the basic design and technology behind firewalls, and then 
focus on specific design and implementation vulnerabilities and problem areas in core 
networking protocols. Note that this discussion draws heavily on the material on IP, 
TCP, and UDP in Chapter 14(? [????.]), "Network Protocols." 
8.2.2 Overview of Firewalls 
The basic purpose of a firewall is to serve as a chokepoint between two sets of 
networked computers. Network administrators can define a firewall security policy 
that's enforced on all traffic trying to pass through that chokepoint. This security 
policy is typically composed of a set of rules specifying which traffic is allowed and 
which traffic is forbidden. For example, a network administrator might have a policy 
such as the following: 
1. Host 1.2.3.4 can talk to 5.5.5.5. 
2. The user Jim on the host 1.2.3.10 can talk to 5.5.5.6. 
3. Any host can connect to host 5.5.5.4 over TCP port 80. 
4. Hosts on the 5.5.5.0/24 network can talk to any host. 
5. UDP packets from host 1.2.3.15 source port 53 can go to host 5.5.5.5 port 53. 
6. All other traffic is denied. 
The firewall is responsible for enforcing that policy on traffic traversing it. Firewalls 
can be built on different core technologies, just as they can be integrated into 
computer networks in different ways. For example, a firewall can be a chunk of code 
in an Ethernet card, a chunk of code in a kernel module or a device driver on a desktop 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
902 
machine, a device that bridges Ethernet segments on a network, a device that routes 
between multiple IP subnets, or a multihomed device that connects networks with 
application proxies. 
Proxy Versus Packet Filters 
There are two basic technical approaches to firewall design, although the line 
between them has blurred over the years. A packet-filtering firewall operates on 
network data at a fairly low level, similar to how an IP router approaches network data. 
Each inbound IP packet is taken off the network and processed by the firewall, which 
uses a variety of algorithms to handle it and determine whether it's valid, invalid, or 
needs to be set aside for future processing. Packets permitted by the firewall can be 
routed to another interface or handed off to the IP stack of the firewall machine's OS 
(see Figure 15-1). 
Figure 15-1. Packet-filtering data flow 
[View full size image] 
A proxy firewall uses the full TCP/IP stack of the firewall machine as part of the 
processing chain. A TCP connection is actually made from a client to the firewall host, 
and a user land application program is responsible for accepting that connection, 
validating it against the security policy, and making an outgoing connection to the 
end host. This program then sits in a loop and relays data back and forth between the 
two connections, potentially validating or modifying attributes of that data as it goes 
(see Figure 15-2). 
Figure 15-2. Proxy firewall data flow 
[View full size image] 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
903 
Straw Men 
In the early days of firewalls, packet filtering and proxies were two 
fundamentally different approaches, and their respective practitioners often 
engaged in extended debate over which technique was best. Although this 
distinction is almost a false dichotomy these days, the trade-offs between 
the two approaches are summarized here. 
Proxy technology is generally considered more secure because it functions at 
the application layer as opposed to functioning more like a bridge or router. 
Proxy technology is singularly well positioned to do analysis, normalization, 
and intrusion detection on data as it traverses the firewall because it 
accesses data through a socket-style interface, a normalizing focal point 
that's easy to work with. Unfortunately, the application proxies available 
commercially never really capitalized on this architectural advantage by 
doing any extensive protocol-level analysis. 
Packet filters were considered less secure architecturally because their 
lower-level approach is theoretically prone to vulnerabilities stemming from 
a lack of contextual knowledge about network data. However, 
packet-filtering technology can scale extremely well and be installed in 
nonobtrusive ways because of its comparative transparency. Both 
advantages have been realized over time in the market. 
If you measure victory in terms of commercial success, packet-filtering 
firewalls won. However, the distinction between the two has grown more 
academic because both product lines evolved to meet each other in the 
middle. 
The market arguably chose the packet-filtering approach, so proxy-based 
firewalls haven't had the same resources put into their evolution. Proxy 
firewalls adopted several features of packet-based firewalls, however. 
Specifically, proxy firewalls, such as NAI's Gauntlet, can hand a connection 
over to a packet-filtering-style layer 3 packet-routing mechanism in the 
kernel. They can also use kernel extensions to make the proxy transparent 
so that it intercepts connections as they traverse the machine, silently brings 
them up through the network stack, and proxies them. 
In a complementary fashion, packet-filtering firewalls have adopted 
technologies typically associated with proxy-based firewalls. From the 
outset, many packet-filtering firewalls incorporated application proxies for a 
few key protocols. Many commercial enterprise firewalls now feature layer 7 
inspection, also known as "deep-inspection" or "application intelligence." 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
904 
To do this kind of inspection of application layer data, they have to 
implement enough of a TCP stack in the firewall kernel to be able to have a 
reasonable picture of the TCP stream's contents. In effect, they are 
simulating the parts of the host machine kernel that proxy-based firewalls 
made implicit use of; however, they probably take quite a few shortcuts in 
doing so (for better or worse). 
Attack Surface 
Firewall software has been evolving for more than a decade, and modern firewall 
systems can be large and complex distributed networked applications. As firewalls 
often represent the front line of an enterprise perimeter, ascertaining the attack 
surface of the firewall solution is important. Any code that handles data coming from 
potentially untrusted sources is worth review, and on a firewall solution, this code can 
range from normal networked socket-based applications to high-speed kernel-level 
networking code. 
A firewall solution for a local host machine might not have a large exposed attack 
surfaceperhaps just the code that handles network packets and evaluates them 
against the rule base. An enterprise solution, however, likely exposes services to 
external users and the outside world, including virtual private network (VPN) 
protocols, authentication servers, networking and encapsulation protocol services, 
and internal management interfaces. 
Some notable vulnerabilities have been found in the straightforward application-layer 
services that are part of enterprise firewall solutions. For example, the proxy-based 
firewall Gauntlet suffered from buffer overflows in at least two exposed services. Mark 
Dowd (one of this book's authors), along with Neel Mehta of the ISS X-Force, 
discovered multiple preauthentication vulnerabilities in Firewall-1's VPN functionality, 
and Thomas Lopatic, a world-class researcher, found multiple weaknesses in 
Firewall-1's intramodule authentication algorithms 
(www.monkey.org/~dugsong/talks/blackhat.pdf). Chances are quite good that more 
vulnerabilities are waiting to be discovered in the exposed auxiliary services of 
commercial firewall solutions. 
Proxy Firewalls 
Proxy firewalls tend to be composed of fairly straightforward networking code. You 
likely already have most of the skills you need to audit proxies, as they are simpler 
than a corresponding server or client for a protocol. 
There's a bit of overlap, in that packet-filtering firewalls commonly include proxies for 
some application protocols, such as FTP. Likewise, many proxy-based firewalls 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
905 
include lower-level components that have some of the desirable properties of 
packet-filtering firewalls, such as transparent bidirectional interception of traffic or 
fast path routing of approved connections. 
When auditing proxy firewalls you want to focus on the same kinds of issues you 
would encounter when auditing network servers. Specifically, numeric issues, buffer 
overflows, format strings, and similar implementation-level bugs are likely to show up 
in parsers for complex network protocols. In addition, you should focus on making 
sure the firewall makes a clear distinction between internal and external users or 
tracks authorized users. Any mechanism by which an external user can leverage a 
proxy to reach the internal network is obviously a major risk exposure. 