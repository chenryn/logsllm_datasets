cused on leveraging timing as a side-channel informa-
tion leak [19, 7, 14, 20, 60]. Because timing attacks
measure the time required to download or process a re-
source, which is often influenced by various factors such
as network irregularities or background noise, these at-
tacks have certain limitations with regards to the accu-
racy of the uncovered resource size.
In our research,
we presented novel techniques that leverage the browser-
imposed quota to reveal the exact size of any resource.
An interesting class of vulnerabilities where the size
of resources is exploited, are compression side-channel
attacks [31]. These attacks generally leverage the com-
pression rate that is achieved when compressing an un-
known value in a larger corpus of known values, allowing
an adversary to uncover information about the unknown
value from the resource size after compression. More re-
cently, researchers have shown how similar attacks can
be applied to various compression mechanisms used on
the web [49, 21].
In the context of privacy-violating cross-origin attacks,
Lee et al. have shown that the ApplicationCache mech-
anism can be used to uncover the status code that is
returned for cross-origin resources [34]. Their attack
exploits certain intricacies of ApplicationCache, which
exhibits a different behavior based on the returned sta-
tus code of referenced endpoints. The researchers did
not explore vulnerabilities originating from the imposed
quota and storage limits. Another type of attack that vio-
lates the principle of Same-Origin Policy is Cross-Site
Script Inclusion (XSSI), first introduced by Grossman
in 2006 [24], and recently analyzed on a wide scale by
Lekies et al. [35]. In XSSI attacks, a dynamically gen-
erated JavaScript (or CSV [58]) file from a vulnerable
website is included as a  element on the web
USENIX Association  
25th USENIX Security Symposium  459
page of the attacker. The often sensitive content that is
present in these files can then be obtained out by the ad-
versary as a result of the modifications the script makes
to the attacker-controlled DOM.
Compared to prior work on the analysis of web traf-
fic [57, 6, 12, 36, 11, 10, 17], our work is, to the best
of our knowledge, the first to combine traffic analysis
with the ability to execute code in the victim’s browser.
Similarly, traffic analysis works on Wi-Fi also assume a
passive, instead of an active, adversary [8, 23, 3, 75, 74].
That is, we believe our work is the first to actively block
specific Wi-Fi packets in order to measure the size of
HTTP messages.
7 Conclusion
The size of resources can be used to infer sensitive in-
formation from users at a large number of web services.
In our research, we performed an extensive analysis on
the various operations that are performed on resources.
As a result of this evaluation, we identified several new
techniques that can be used to uncover the size of any
resource. In particular, an attack that abuses the storage
quota imposed by browsers, as well as a novel technique
against Wi-Fi networks that can be used to disclose the
size of the response associated with an attacker-initiated
request. To provide more insight into how these attack
methods can be applied in real-world attack scenarios,
we elaborated on several use cases involving widely used
web services. Motivated by the severe consequences of
these size-exposing attacks, we proposed an enhanced
design for the browser storage, which is likely to be
adopted by browser vendors, and discussed a variety of
other options that could be employed to prevent adver-
saries from stealing sensitive information.
Acknowledgments
We thank the anonymous reviewers for their valuable
comments. This research is partially funded by the Re-
search Fund KU Leuven, and by the EU FP7 project
NESSoS. With the financial support from the Preven-
tion of and Fight against Crime Programme of the Eu-
ropean Union (B-CCENTRE). Mathy Vanhoef holds a
Ph. D. fellowship of the Research Foundation - Flan-
ders (FWO).
References
[1] AL FARDAN, N. J., AND PATERSON, K. G. Lucky thirteen:
Breaking the TLS and DTLS record protocols. In IEEE Sympo-
sium on Security and Privacy (2013).
15th ACM conference on Computer and communications secu-
rity (2008), ACM, pp. 75–88.
[3] BAUER, K., MCCOY, D., GREENSTEIN, B., GRUNWALD, D.,
AND SICKER, D. Physical layer attacks on unlinkability in wire-
less lans. In Privacy Enhancing Technologies (2009).
[4] BELSHE, M., PEON, R., AND THOMSON, M. Hypertext transfer
protocol version 2 (HTTP/2). RFC 7540, 2015.
[5] BHARGAVAN, K., LAVAUD, A. D., FOURNET, C., PIRONTI,
A., AND STRUB, P. Y. Triple handshakes and cookie cutters:
Breaking and fixing authentication over TLS. In IEEE Security
and Privacy (SP) (2014).
[6] BISSIAS, G. D., LIBERATORE, M., JENSEN, D., AND LEVINE,
B. N. Privacy vulnerabilities in encrypted HTTP streams. Lec-
ture notes in computer science 3856 (2006), 1.
[7] BORTZ, A., AND BONEH, D. Exposing private information by
timing web applications. In Proceedings of the 16th international
conference on World Wide Web (2007), ACM, pp. 621–628.
[8] BRIK, V., BANERJEE, S., GRUTESER, M., AND OH, S. Wire-
less device identification with radiometric signatures. In Mobile
computing and networking (2008).
[9] BUGZILLA. Bug 565965 - (doublekey) key cookies on setting
domain * toplevel load domain. https://bugzilla.mozilla.
org/show_bug.cgi?id=565965, May 2010.
[10] CAI, X., ZHANG, X. C., JOSHI, B., AND JOHNSON, R. Touch-
ing from a distance: Website fingerprinting attacks and defenses.
In Proceedings of the 2012 ACM conference on Computer and
communications security (2012), ACM, pp. 605–616.
[11] CHAPMAN, P., AND EVANS, D. Automated black-box detection
of side-channel vulnerabilities in web applications. In Proceed-
ings of the 18th ACM conference on Computer and communica-
tions security (2011), ACM, pp. 263–274.
[12] CHEN, S., WANG, R., WANG, X., AND ZHANG, K. Side-
channel leaks in web applications: A reality today, a challenge
tomorrow. In Security and Privacy (SP), 2010 IEEE Symposium
on (2010), IEEE, pp. 191–206.
[13] CHENG, H., AND AVNUR, R. Traffic analysis of SSL encrypted
web browsing. URL citeseer. ist. psu. edu/656522. html (1998).
[14] CROSBY, S. A., WALLACH, D. S., AND RIEDI, R. H. Opportu-
nities and limits of remote timing attacks. ACM Transactions on
Information and System Security (TISSEC) 12, 3 (2009), 17.
[15] DIERKS, T., AND RESCORLA, E. The transport layer security
(TLS) protocol version 1.2. RFC 5246, 2008.
[16] DUONG, T., AND RIZZO, J. Here come the xor ninjas.
Ekoparty Security Conference (2011).
In
[17] DYER, K. P., COULL, S. E., RISTENPART, T., AND SHRIMP-
TON, T. Peek-a-boo, I still see you: Why efficient traffic analysis
countermeasures fail. In IEEE Security and Privacy (SP) (2012).
[18] FAN, Y., LIN, B., JIANG, Y., AND SHEN, X. An efficient
privacy-preserving scheme for wireless link layer security.
In
Global Telecommunications Conference, 2008. IEEE GLOBE-
COM 2008. IEEE (2008).
[19] FELTEN, E. W., AND SCHNEIDER, M. A. Timing attacks on
web privacy. In Proceedings of the 7th ACM conference on Com-
puter and communications security (2000), ACM, pp. 25–32.
[20] GELERNTER, N., AND HERZBERG, A. Cross-site search attacks.
In Proceedings of the 22nd ACM SIGSAC Conference on Com-
puter and Communications Security (2015), ACM, pp. 1394–
1405.
[2] BARTH, A., JACKSON, C., AND MITCHELL, J. C. Robust
In Proceedings of the
defenses for cross-site request forgery.
[21] GLUCK, Y., HARRIS, N., AND PRADO, A. BREACH: reviving
the CRIME attack. In Black Hat Brieﬁngs (2013).
460  25th USENIX Security Symposium 
USENIX Association
[22] GOOGLE CHROME. Managing HTML5 offline storage. https:
//developer.chrome.com/apps/offline_storage,
February 2016.
[23] GREENSTEIN, B., MCCOY, D., PANG, J., KOHNO, T., SE-
SHAN, S., AND WETHERALL, D.
Improving wireless privacy
with an identifier-free link layer protocol. In Mobile systems, ap-
plications, and services (2008).
[24] GROSSMAN, J. Advanced web attack techniques using GMail.
http://jeremiahgrossman.blogspot.com/2006/01/
advanced-web-attack-techniques-using.html, 2006.
[25] HINTZ, A. Fingerprinting websites using traffic analysis.
In
Privacy Enhancing Technologies (2003), Springer, pp. 171–178.
Using Content-Security-Policy for evil.
[26] HOMAKOV, E.
http://homakov.blogspot.com/2014/01/using-
content-security-policy-for-evil.html,
2014.
January
[27] ICSI. The ICSI certificate notary. Retrieved 23 Jan. 2016, from
http://notary.icsi.berkeley.edu.
[28] IEEE STD 802.11-2012. Wireless LAN Medium Access Control
(MAC) and Physical Layer (PHY) Speciﬁcations, 2012.
[29] JAGATIC, T. N., JOHNSON, N. A., JAKOBSSON, M., AND
MENCZER, F. Social phishing. Communications of the ACM
50, 10 (2007), 94–100.
[30] JAKOBSEN, J. B., AND ORLANDI, C. A practical cryptanalysis
of the Telegram messaging protocol. PhD thesis, Master Thesis,
Aarhus University (Available on request), 2015.
[31] KELSEY, J. Compression and information leakage of plaintext.
In Fast Software Encryption (2002), Springer, pp. 263–276.
[32] KITAMURA, E. Working with quota on mobile browsers.
http://www.html5rocks.com/en/tutorials/offline/
quota-research/, January 2014.
[33] LANDAU, P. Deanonymizing Facebook users by CSP brute-
forcing. http://www.myseosolution.de/deanonymizing-
facebook-users-by-csp-bruteforcing/, August 2014.
[34] LEE, S., KIM, H., AND KIM, J.
Identifying cross-origin re-
source status using application cache. In NDSS (2015).
[35] LEKIES, S., STOCK, B., WENTZEL, M., AND JOHNS, M. The
unexpected dangers of dynamic JavaScript. In 24th USENIX Se-
curity Symposium (USENIX Security 15) (2015), pp. 723–735.
[36] LUO, X., ZHOU, P., CHAN, E. W., LEE, W., CHANG, R. K.,
AND PERDISCI, R. HTTPOS: Sealing information leaks with
browser-side obfuscation of encrypted flows. In NDSS (2011).
[37] MARLINSPIKE, M. New tricks for defeating SSL in practice.
BlackHat DC, February (2009).
[38] MATHER, L., AND OSWALD, E. Pinpointing side-channel in-
formation leaks in web applications. Journal of Cryptographic
Engineering 2, 3 (2012), 161–177.
[39] MICROSOFT. Platform status. https://dev.windows.com/
en-us/microsoft-edge/platform/status/fetchapi,
February 2016.
[40] MILLER, B., HUANG, L., JOSEPH, A. D., AND TYGAR, J. D.
I know why you went to the clinic: Risks and realization of
HTTPS traffic analysis.
In Privacy Enhancing Technologies
(2014), Springer, pp. 143–163.
[41] MOORE, T., AND EDELMAN, B. Measuring the perpetrators and
funders of typosquatting. In Financial Cryptography and Data
Security. Springer, 2010, pp. 175–191.
[42] MOZILLA DEVELOPER NETWORK. Browser storage limits and
https://developer.mozilla.org/en-
eviction criteria.
US/docs/Web/API/IndexedDB_API/Browser_storage_
limits_and_eviction_criteria, October 2015.
[43] NIKIFORAKIS, N.,
INVERNIZZI, L., KAPRAVELOS, A.,
VAN ACKER, S., JOOSEN, W., KRUEGEL, C., PIESSENS, F.,
AND VIGNA, G. You are what you include: Large-scale eval-
uation of remote JavaScript inclusions.
In Proceedings of the
2012 ACM conference on Computer and communications secu-
rity (2012), ACM, pp. 736–747.
[44] OREN, Y., KEMERLIS, V. P., SETHUMADHAVAN, S., AND
KEROMYTIS, A. D. The spy in the sandbox: Practical cache
attacks in JavaScript. arXiv preprint arXiv:1502.07373 (2015).
[45] PEON, R., AND RUELLAN, H. HPACK: Header compression for
HTTP/2. RFC 7541, 2015.
[46] RANGANATHAN, A., AND SICKING, J. File API. W3C Working
Draft (2012).
[47] RESCORLAN, E. HTTP over TLS. RFC 2818, 2000.
[48] RISTENPART, T., TROMER, E., SHACHAM, H., AND SAVAGE,
S. Hey, you, get off of my cloud: exploring information leakage
in third-party compute clouds. In Proceedings of the 16th ACM
conference on Computer and communications security (2009),
ACM, pp. 199–212.
[49] RIZZO, J., AND DUONG, T. The CRIME attack. In EKOparty
Security Conference (2012), vol. 2012.
[50] ROESNER, F., KOHNO, T., AND WETHERALL, D. Detect-
ing and defending against third-party tracking on the web.
In
Proceedings of the 9th USENIX conference on Networked Sys-
tems Design and Implementation (2012), USENIX Association,
pp. 12–12.
[51] RYDSTEDT, G., BURSZTEIN, E., BONEH, D., AND JACKSON,
C. Busting frame busting: a study of clickjacking vulnerabilities
at popular sites. IEEE Oakland Web 2 (2010), 6.
[52] SCHINZEL, S. An efficient mitigation method for timing side
channels on the web.
In 2nd International Workshop on Con-
structive Side-Channel Analysis and Secure Design (COSADE)
(2011).
[53] SEGALL, L. An app called Telegram is the ’hot new thing
http://money.cnn.com/2015/11/17/
among jihadists’.
technology/isis-telegram/, November 2015.
[54] SOOD, A. K., AND ENBODY, R. J. Malvertising: Exploiting web
advertising. Computer Fraud & Security 2011, 4 (2011), 11–16.
[55] SSL PULSE. Survey of the SSL implementation of the most pop-
ular web sites. https://www.trustworthyinternet.org/
ssl-pulse/, February 2016.
[56] STATCOUNTER. GlobalStats.
http://gs.statcounter.
com/#all-browser-ww-monthly-201501-201601, January
2016.
[57] SUN, Q., SIMON, D. R., WANG, Y.-M., RUSSELL, W., PAD-
MANABHAN, V. N., AND QIU, L. Statistical identification of
encrypted web browsing traffic. In Security and Privacy (2002).
Identifier based XSSI attacks. https://www.
[58] TERADA, T.
mbsd.jp/Whitepaper/xssi.pdf, March 2015.
[59] TOR. Isolate HTTP cookies according to first and third party do-
main contexts. https://trac.torproject.org/projects/
tor/ticket/3246, May 2011.
[60] VAN GOETHEM, T., JOOSEN, W., AND NIKIFORAKIS, N. The
clock is still ticking: Timing attacks in the modern web. In Pro-
ceedings of the 22nd ACM SIGSAC Conference on Computer and
Communications Security (2015), ACM, pp. 1382–1393.
[61] VANHOEF, M., AND PIESSENS, F. Advanced Wi-Fi attacks
using commodity hardware.
In Proceedings of the 30th An-
nual Computer Security Applications Conference (2014), ACM,
pp. 256–265.
USENIX Association  
25th USENIX Security Symposium  461
[62] VANHOEF, M., AND PIESSENS, F. All your biases belong to
us: Breaking RC4 in WPA-TKIP and TLS. In USENIX Security
Symposium (2015).
[63] W3C. Offline web applications. https://www.w3.org/TR/
offline-webapps/, May 2008.
[64] W3C. Same-origin policy. https://www.w3.org/Security/
wiki/Same_Origin_Policy, January 2010.
[65] W3C. Quota management API. https://www.w3.org/TR/
quota-api/, December 2015.
[66] W3C. Service Workers. https://www.w3.org/TR/service-
workers/, June 2015.
[72] YAROM, Y., AND FALKNER, K. FLUSH+RELOAD: A high
resolution, low noise, L3 cache side-channel attack: A high reso-
lution, low noise, L3 cache side-channel attack. In 23rd USENIX
Security Symposium (USENIX Security 14) (2014), pp. 719–732.
[73] ZALEWSKI, M. The tangled Web: A guide to securing modern
web applications. No Starch Press, 2012.
[74] ZHANG, F., HE, W., CHEN, Y., LI, Z., WANG, X., CHEN, S.,
AND LIU, X. Thwarting Wi-Fi side-channel analysis through
traffic demultiplexing. Wireless Communications, IEEE Transac-
tions on 13, 1 (2014), 86–98.
[67] WAGNER, D., SCHNEIER, B., ET AL. Analysis of the SSL 3.0
protocol. In The Second USENIX Workshop on Electronic Com-
merce Proceedings (1996), pp. 29–40.
[75] ZHANG, F., HE, W., AND LIU, X. Defending against traffic
analysis in wireless networks through traffic reshaping. In Dis-
tributed Computing Systems (ICDCS) (2011).
[68] WANG, T., AND GOLDBERG,
I.
Comparing web-
Tech.
2013.
CACR,
fingerprinting
Technical
site
rep.,
http://cacr.uwaterloo.ca/techreports/2013/cacr2013-30.pdf,
2014.
and
2013-30,
attacks
Report
defenses.
[69] WEBKIT. Implement fetch API. https://bugs.webkit.org/
show_bug.cgi?id=151937, December 2015.
[70] WHATWG.
Storage.
org/, August 2015.
https://storage.spec.whatwg.
[71] WIGLE. WiFi encryption over time. Retrieved 6 Feb. 2016 from
https://wigle.net/enc-large.html.
[76] ZHANG, Y., JUELS, A., REITER, M. K., AND RISTENPART, T.
Cross-tenant side-channel attacks in PaaS clouds. In Proceedings
of the 2014 ACM SIGSAC Conference on Computer and Commu-
nications Security (2014), ACM, pp. 990–1003.
[77] ZHOU, X., DEMETRIOU, S., HE, D., NAVEED, M., PAN, X.,
WANG, X., GUNTER, C. A., AND NAHRSTEDT, K.
Identity,
location, disease and more: Inferring your secrets from Android
public resources. In Proceedings of the 2013 ACM SIGSAC con-
ference on Computer & communications security (2013), ACM,
pp. 1017–1028
.
462  25th USENIX Security Symposium 
USENIX Association