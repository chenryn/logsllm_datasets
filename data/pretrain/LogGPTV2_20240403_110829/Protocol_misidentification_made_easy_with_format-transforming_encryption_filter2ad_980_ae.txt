Other recent work targets censorship circumvention via
so-called protocol mimicking [20, 30, 31, 45, 46, 52]. In these
systems, data is embedded within speciﬁc application-layer
headers and content so that it appears to be a speciﬁc un-
blocked target protocol. These systems target DPI misclas-
siﬁcation, but (to the best of our knowledge) their eﬃcacy
against production DPI systems has not been systematically
measured. FTE, when used as a circumvention mechanism,
can be thought of as new lightweight protocol mimicking
tool that targets a certain class of adversary, those being
the regex-based (or similarly powerful) DPI used in prac-
tice. We note that FTE is more eﬃcient than prior pro-
tocol mimicing systems, yet already forces misclassiﬁcation
against enterprise-grade DPI.
Tunneling traﬃc over another protocol (e.g., SSH) does
not usually lead to protocol misclassiﬁcation because the
protocol used for the tunnel will be correctly identiﬁed by
the DPI. Tunneling may suﬃce for DPI circumvention in
some settings, but is more expensive and less ﬂexible than
using an FTE record layer. For instance, tunneling can have
high overheads for certain source protocol/tunnel protocol
pairs (e.g., HTTP over DNS [27]) and FTE can easily switch
between target protocols in a ﬁne-grained manner.
The Dust [48] protocol and Tor’s recent obfsproxy [42]
systems strive to ensure that no application-layer bits are left
unencrypted in order to remove any identiﬁable ﬁngerprint.
FTE also encrypt all bits sent, but additionally allows one to
selectively add back into ciphertexts the formatting needed
to force protocol misclassiﬁcation.
DPI. Performance and scalability of regex-based traﬃc
classiﬁcation has been extensively studied [4, 18, 44]. Al-
ternative protocol identiﬁcation strategies that have been
explored include using packet sizes and timings [6, 51], the
types and number connections initiated by a host (its “so-
cial behavior”) [23, 26], and various machine learning tech-
niques [33,34,55]. However, the feasibility of deploying more
sophisticated classiﬁcation strategies for DPI at scale re-
mains unclear [11, 33, 40].
Recent work uses fast small-sample hypothesis tests to
identify and discard compressed or encrypted packets [47].
Such tests might ﬂag FTE packets from our simpler formats
as compressed/encrypted due to their use of unformatted
AE ciphertext bits, thereby preventing protocol misclassiﬁ-
cation. However, these tests are easy to defeat by simply
changing the format so that the hypothesis test fails on the
ﬁrst few packets in a ﬂow.
Acknowledgements
We thank the anonymous reviewers and Juniper Networks
for their constructive feedback on earlier versions of this pa-
per. Kevin Dyer and Thomas Shrimpton were supported
by NSF CAREER grant CNS-0845610. Thomas Ristenpart
was supported in part by generous gifts from Microsoft, as
well as NSF grant CNS-1065134.
8. REFERENCES
[1] M. R. Albrecht, K. G. Paterson, and G. J. Watson.
Plaintext recovery attacks against ssh. In Security and
Privacy, 2009 30th IEEE Symposium on, pages 16–26.
IEEE, 2009.
[2] J. Appelbaum and N. Mathewson. Pluggable
transports for circumvention. Available at:
https://gitweb.torproject.org/torspec.git/HEAD:
/proposals/180-pluggable-transport.txt, 2010.
[3] Arbor Networks, Inc. appid. Available at:
https://code.google.com/p/appid/.
[4] M. Becchi, M. Franklin, and P. Crowley. A workload
for evaluating deep packet inspection architectures. In
IEEE International Symposium on Workload
Characterization, 2008., pages 79–89, 2008.
[5] M. Bellare, T. Ristenpart, P. Rogaway, and T. Stegers.
Format-preserving encryption. In M. Jacobson,
V. Rijmen, and R. Safavi-Naini, editors, Selected
Areas in Cryptography, volume 5867 of Lecture Notes
in Computer Science. 2009.
[6] L. Bernaille and R. Teixeira. Early recognition of
encrypted applications. In S. Uhlig, K. Papagiannaki,
and O. Bonaventure, editors, Passive and Active
Network Measurement, volume 4427 of Lecture Notes
in Computer Science. 2007.
[7] D. Brumley, J. Newsome, D. Song, H. Wang, and
S. Jha. Towards automatic generation of
vulnerability-based signatures. In Security and
Privacy, 2006 IEEE Symposium on, pages 15–pp.
IEEE, 2006.
[8] D. Brumley, J. Newsome, D. Song, H. Wang, and
S. Jha. Theory and techniques for automatic
generation of vulnerability-based signatures.
Dependable and Secure Computing, IEEE
Transactions on, 5(4):224–241, 2008.
[9] S. Burnett, N. Feamster, and S. Vempala. Chipping
away at censorship ﬁrewalls with user-generated
content. In Proceedings of the 19th USENIX conference
on Security, USENIX Security’10, 2010.
[10] Clear Foundation. l7-ﬁlter. Available at:
http://l7-filter.clearfoundation.com/.
[11] A. Dainotti, A. Pescap`e, and K. C. Claﬀy. Issues and
future directions in traﬃc classiﬁcation. Network,
IEEE, 26(1):35–40, 2012.
[12] L. Deri. nprobe: an open source netﬂow probe for
gigabit networks. In In Proc. of Terena TNC 2003,
2003.
[13] T. Dierks and E. Rescorla. The Transport Layer
Security (TLS) Protocol Version 1.2. RFC 5246
(Proposed Standard), Aug. 2008.
[14] R. Dingledine, N. Mathewson, and P. Syverson. Tor:
The second-generation onion router. In In Proceedings
of the 13th USENIX Security Symposium, 2004.
[15] N. Feamster, M. Balazinska, G. Harfst,
H. Balakrishnan, and D. Karger. Infranet:
Circumventing Web Censorship and Surveillance. In
Proceedings of the 11th USENIX Security Symposium,
2002.
[16] R. Fielding, J. Gettys, J. Mogul, H. Frystyk,
L. Masinter, P. Leach, and T. Berners-Lee. Hypertext
Transfer Protocol – HTTP/1.1. RFC 2616 (Draft
Standard), June.
[17] A. Goldberg and M. Sipser. Compression and ranking.
In Proceedings of the 17th Annual ACM symposium on
Theory of computing, STOC ’85, 1985.
[18] D. Guo, G. Liao, L. N. Bhuyan, B. Liu, and J. J. Ding.
A scalable multithreaded l7-ﬁlter design for multi-core
servers. In Proceedings of the 4th ACM/IEEE
Symposium on Architectures for Networking and
Communications Systems, ANCS ’08, 2008.
[19] A. Houmansadr, C. Brubaker, and V. Shmatikov. The
Parrot is Dead: Observing Unobservable Network
Communications. In The 34th IEEE Symposium on
Security and Privacy (Oakland), 2013.
[20] A. Houmansadr, G. T. Nguyen, M. Caesar, and
N. Borisov. Cirripede: circumvention infrastructure
using router redirection with plausible deniability. In
Proceedings of the 18th ACM conference on Computer
and communications security, CCS ’11, 2011.
[21] A. Houmansadr, T. Riedl, N. Borisov, and A. Singer. I
Want my Voice to be Heard: IP over Voice-over-IP for
Unobservable Censorship Circumvention. In The 20th
Annual Network and Distributed System Security
Symposium (NDSS), 2013.
[22] M. Iliofotou, H.-c. Kim, M. Faloutsos,
M. Mitzenmacher, P. Pappu, and G. Varghese.
Graph-based p2p traﬃc classiﬁcation at the internet
backbone. In INFOCOM Workshops 2009, IEEE,
pages 1–6. IEEE, 2009.
Streaming Protocol (RTSP). RFC 2326 (Proposed
Standard), Apr. 1998.
[23] M. Iliofotou, P. Pappu, M. Faloutsos,
[39] R. Smits, D. Jain, S. Pidcock, I. Goldberg, and
M. Mitzenmacher, S. Singh, and G. Varghese. Network
monitoring using traﬃc dispersion graphs (tdgs). In
Proceedings of the 7th ACM SIGCOMM conference on
Internet measurement, IMC ’07, 2007.
U. Hengartner. Bridgespa: improving tor bridges with
single packet authorization. In Proceedings of the 10th
annual ACM workshop on Privacy in the electronic
society. ACM, 2011.
[24] C. M. Inacio and B. Trammell. Yaf: yet another
[40] R. Sommer and V. Paxson. Outside the closed world:
ﬂowmeter. In Proceedings of the 24th international
conference on Large installation system
administration, LISA’10, 2010.
On using machine learning for network intrusion
detection. In Security and Privacy (SP), 2010 IEEE
Symposium on, 2010.
[25] L. Invernizzi, C. Kruegel, and G. Vigna. Message In A
[41] G. Szab´o, Z. Tur´anyi, L. Toka, S. Moln´ar, and
Bottle: Sailing Past Censorship. In Hot Topics in
Privacy Enhancing Technologies – PETS, 2012.
[26] T. Karagiannis, K. Papagiannaki, and M. Faloutsos.
Blinc: Multilevel traﬃc classiﬁcation in the dark. In
In Proceedings of ACM SIGCOMM, 2005.
[27] Kryo. iodine DNS Tunnel. Available at:
http://code.kryo.se/iodine/, 2010.
[28] E. Menahem, G. Nakibly, and Y. Elovici.
Network-based intrusion detection systems go active!
In Proceedings of the 2012 ACM conference on
Computer and communications security, pages
1004–1006. ACM, 2012.
[29] Microsoft. [MS-SMB2]: Server Message Block (SMB)
Protocol Versions 2 and 3. Available at: http:
//msdn.microsoft.com/en-us/library/cc246482.aspx,
2013.
[30] H. Mohajeri Moghaddam, B. Li, M. Derakhshani, and
I. Goldberg. Skypemorph: protocol obfuscation for tor
bridges. In Proceedings of the 2012 ACM conference
on Computer and communications security, CCS ’12,
2012.
[31] S. J. Murdoch. Proof of concept transport plugin:
http headers. Available at: https:
//trac.torproject.org/projects/tor/ticket/2759,
2011.
[32] S. J. Murdoch and S. Lewis. Embedding covert
channels into TCP/IP. In Proceedings of the 7th
International Workshop on Information Hiding, 2005.
[33] T. T. Nguyen and G. Armitage. A survey of
techniques for internet traﬃc classiﬁcation using
machine learning. Communications Surveys &
Tutorials, IEEE, 10(4):56–76, 2008.
[34] T. T. T. Nguyen, G. Armitage, P. Branch, and
S. Zander. Timely and continuous
machine-learning-based classiﬁcation for interactive IP
traﬃc. IEEE/ACM Trans. Netw., 20(6), Dec. 2012.
[35] V. Paxson. Bro: a system for detecting network
intruders in real-time. In Proceedings of the 7th
conference on USENIX Security Symposium - Volume
7, SSYM’98, 1998.
[36] C. Rhoads and F. Fassihi. Iran vows to unplug
internet. Available at: http://online.wsj.com/article/
SB10001424052748704889404576277391449002016.html,
December 2011.
[37] J. Rosenberg, H. Schulzrinne, G. Camarillo,
A. Johnston, J. Peterson, R. Sparks, M. Handley, and
E. Schooler. SIP: Session Initiation Protocol. RFC
3261 (Proposed Standard), June 2002.
[38] H. Schulzrinne, A. Rao, and R. Lanphier. Real Time
A. Santos. Automatic protocol signature generation
framework for deep packet inspection. In Proceedings
of the 5th International ICST Conference on
Performance Evaluation Methodologies and Tools,
pages 291–299. ICST (Institute for Computer
Sciences, Social-Informatics and Telecommunications
Engineering), 2011.
[42] Tor Project. Obfsproxy. Available at: https:
//www.torproject.org/projects/obfsproxy.html.en,
2013.
[43] Tor Project. Obfsproxy3. Available at:
https://gitweb.torproject.org/pluggable-transports/
obfsproxy.git/blob/HEAD:
/doc/obfs3/obfs3-protocol-spec.txt, 2013.
[44] M. Vallentin, R. Sommer, J. Lee, C. Leres, V. Paxson,
and B. Tierney. The nids cluster: Scalable, stateful
network intrusion detection on commodity hardware.
In C. Kruegel, R. Lippmann, and A. Clark, editors,
Recent Advances in Intrusion Detection, volume 4637
of Lecture Notes in Computer Science. 2007.
[45] Q. Wang, X. Gong, G. Nguyen, A. Houmansadr, and
N. Borisov. CensorSpoofer: Asymmetric
Communication using IP Spooﬁng for
Censorship-Resistant Web Browsing. In The 19th
ACM Conference on Computer and Communications
Security (CCS), 2012.
[46] Z. Weinberg, J. Wang, V. Yegneswaran,
L. Briesemeister, S. Cheung, F. Wang, and D. Boneh.
Stegotorus: a camouﬂage proxy for the tor anonymity
system. In ACM Conference on Computer and
Communications Security, 2012.
[47] A. M. White, S. Krishnan, M. Bailey, F. Monrose, and
P. Porras. Clear and Present Data: Opaque Traﬃc and
its Security Implications for the Future. NDSS, 2013.
[48] B. Wiley. Dust: A blocking-resistant internet
transport protocol. Technical report, School of
Information, University of Texas at Austin, 2011.
[49] P. Winter and S. Lindskog. How the Great Firewall of
China is Blocking Tor. In Free and Open
Communications on the Internet, 2012.
[50] G. Wondracek, P. M. Comparetti, C. Kruegel,
E. Kirda, and S. S. S. Anna. Automatic network
protocol analysis. In 15th Symposium on Network and
Distributed System Security (NDSS), 2008.
[51] C. V. Wright, F. Monrose, and G. M. Masson. On
inferring application protocol behaviors in encrypted
network traﬃc. Journal on Machine Learning
Research, 7, Dec. 2006.
[52] E. Wustrow, S. Wolchok, I. Goldberg, and J. A.
Halderman. Telex: Anticensorship in the network
infrastructure. In Proceedings of the 20th USENIX
Security Symposium, Aug. 2011.
[53] A.-m. Yang, S.-y. Jiang, and H. Deng. A p2p network
traﬃc classiﬁcation method using svm. In Young
Computer Scientists, 2008. ICYCS 2008. The 9th
International Conference for, pages 398–403. IEEE,
2008.
[54] T. Ylonen and C. Lonvick. The Secure Shell (SSH)
Transport Layer Protocol. RFC 4253 (Proposed
Standard), Jan. 2006.
[55] S. Zander, T. Nguyen, and G. Armitage. Automated
traﬃc classiﬁcation and application identiﬁcation
using machine learning. In Local Computer Networks,
2005. 30th Anniversary. The IEEE Conference on,
pages 250–257. IEEE, 2005.
APPENDIX
A. ALGORITHMS FOR RANKING AND UN-
RANKING A REGULAR LANGUAGE
In Figure 7 we have the core algorithms BuildTable, rank,
and unrank, used in our FTE record layer. The ordinality of
symbol α ∈ Σ, written ord(α), is its position (starting from
1) in the lexicographical ordering of the elements of Σ. T [q, i]
is the number of strings of length i that end in an accepting
state when starting from state q; thus T [q0, i] is the number
of X ∈ L such that |X| = i. S[i] is the number of strings
in L of length at most i− 1. Unspeciﬁed algorithm FindSlice
ﬁnds the largest (cid:96) such that S[(cid:96)] < c, and returns n = (cid:96) + 1
and c(cid:48) = c − S[(cid:96)]. This can be done in O(log2(|S|)) time via
binary search.
alg. BuildTable(N ):
for q ∈ Q do
if q ∈ F then T [q, 0] ← 1
for i = 1 to N do
for q ∈ Q do
for a ∈ Σ do
T [q, i] +← T [δ(q, a), i − 1]
S[0] ← 0
for i = 1 to N do
S[i] ← S[i − 1] + T [q0, i − 1]
alg. rank(X):
n ← |X|; c ← S[n]
q ← q0
for i = 1 to n do
for j = 1 to ord(X[i]) − 1 do
c +← T [δ(q, aj), n − i]
q ← δ(q, X[i])
ret c
alg. unrank(c):
(n, c(cid:48)) ← FindSlice(c)
X ← ε; q ← q0; j ← 1
for i = 1 to n do
while c(cid:48) ≥ T [δ(q, aj), n − i] do
c(cid:48) −← T [δ(q, aj), n − i]; j +← 1
X[i] ← aj; q ← δ(q, X[i]); j ← 1
ret X
Figure 7: Algorithms for ranking and unranking
strings in the regular language L of a DFA M =
(Q, Σ, δ, q0, F ).