### Recent Work on Censorship Circumvention

Recent research has focused on censorship circumvention through a technique known as protocol mimicking [20, 30, 31, 45, 46, 52]. In these systems, data is embedded within specific application-layer headers and content to mimic an unblocked target protocol. These systems aim to exploit Deep Packet Inspection (DPI) misclassification, but, to the best of our knowledge, their effectiveness against production DPI systems has not been systematically measured.

Format-Transforming Encryption (FTE), when used as a circumvention mechanism, can be considered a lightweight protocol mimicking tool designed to target adversaries using regex-based or similarly powerful DPI. FTE is more efficient than previous protocol mimicking systems and already forces misclassification against enterprise-grade DPI.

### Tunneling vs. Protocol Mimicking

Tunneling traffic over another protocol, such as SSH, typically does not lead to protocol misclassification because the tunneling protocol is correctly identified by DPI. While tunneling may be sufficient for DPI circumvention in some settings, it is generally more resource-intensive and less flexible than using an FTE record layer. For example, tunneling can have high overheads for certain source protocol/tunnel protocol pairs (e.g., HTTP over DNS [27]), whereas FTE can easily switch between target protocols in a fine-grained manner.

### Other Protocols and Techniques

The Dust [48] protocol and Tor’s recent obfsproxy [42] systems aim to ensure that no application-layer bits are left unencrypted, thereby removing any identifiable fingerprint. FTE also encrypts all bits sent but additionally allows selective addition of formatting to force protocol misclassification.

### Deep Packet Inspection (DPI)

The performance and scalability of regex-based traffic classification have been extensively studied [4, 18, 44]. Alternative protocol identification strategies include using packet sizes and timings [6, 51], the types and number of connections initiated by a host (its "social behavior") [23, 26], and various machine learning techniques [33, 34, 55]. However, the feasibility of deploying more sophisticated classification strategies for DPI at scale remains unclear [11, 33, 40].

Recent work uses fast small-sample hypothesis tests to identify and discard compressed or encrypted packets [47]. Such tests might flag FTE packets from simpler formats as compressed/encrypted due to their use of unformatted AE ciphertext bits, thereby preventing protocol misclassification. However, these tests can be easily defeated by changing the format so that the hypothesis test fails on the first few packets in a flow.

### Acknowledgements

We thank the anonymous reviewers and Juniper Networks for their constructive feedback on earlier versions of this paper. Kevin Dyer and Thomas Shrimpton were supported by NSF CAREER grant CNS-0845610. Thomas Ristenpart was supported in part by generous gifts from Microsoft, as well as NSF grant CNS-1065134.

### References

[References section remains unchanged]

### Appendix: Algorithms for Ranking and Unranking a Regular Language

In Figure 7, we present the core algorithms BuildTable, rank, and unrank, used in our FTE record layer. The ordinality of symbol \(\alpha \in \Sigma\), written \(\text{ord}(\alpha)\), is its position (starting from 1) in the lexicographical ordering of the elements of \(\Sigma\). \(T[q, i]\) is the number of strings of length \(i\) that end in an accepting state when starting from state \(q\); thus \(T[q_0, i]\) is the number of \(X \in L\) such that \(|X| = i\). \(S[i]\) is the number of strings in \(L\) of length at most \(i-1\). The unspecified algorithm FindSlice finds the largest \(\ell\) such that \(S[\ell] < c\), and returns \(n = \ell + 1\) and \(c' = c - S[\ell]\). This can be done in \(O(\log^2(|S|))\) time via binary search.

```algorithm
BuildTable(N):
for q in Q:
    if q in F then T[q, 0] ← 1
for i = 1 to N:
    for q in Q:
        for a in Σ:
            T[q, i] +← T[δ(q, a), i − 1]
S[0] ← 0
for i = 1 to N:
    S[i] ← S[i − 1] + T[q0, i − 1]

rank(X):
n ← |X|; c ← S[n]
q ← q0
for i = 1 to n:
    for j = 1 to ord(X[i]) − 1:
        c +← T[δ(q, aj), n − i]
    q ← δ(q, X[i])
return c

unrank(c):
(n, c') ← FindSlice(c)
X ← ε; q ← q0; j ← 1
for i = 1 to n:
    while c' ≥ T[δ(q, aj), n − i]:
        c' −← T[δ(q, aj), n − i]; j +← 1
    X[i] ← aj; q ← δ(q, X[i]); j ← 1
return X
```

**Figure 7: Algorithms for ranking and unranking strings in the regular language \(L\) of a DFA \(M = (Q, \Sigma, \delta, q_0, F)\).**