title:Spector: Automatically Analyzing Shell Code
author:Kevin Borders and
Atul Prakash and
Mark Zielinski
23rd Annual Computer Security Applications Conference
23rd Annual Computer Security Applications Conference
Spector: Automatically Analyzing Shell Code 
Atul Prakash 
University of Michigan 
PI:EMAIL 
Mark Zielinski 
Arbor Networks 
PI:EMAIL 
Kevin Borders 
University of Michigan 
PI:EMAIL 
Abstract 
is 
Detecting the presence of buffer overflow attacks in 
network  messages  has  been  a  major  focus.  Only 
knowing  whether  a  message  contains  an  attack, 
however, is not always enough to mitigate the threat. It 
may  also  be  critical 
it  does. 
Unfortunately,  shell  code  is  written  in  low-level 
assembly  language,  and  can  be  obfuscated.  The 
current  method  of  analyzing  shell  code,  manual 
reverse  engineering, 
time-consuming,  requires 
significant  expertise,  and  would  be  nearly  impossible 
for a wide-scale polymorphic attack.  
to  know  what 
In  this  paper,  we  introduce  Spector,  a  symbolic 
execution  engine  that  extracts  meaningful  high-level 
actions  from  shell  code.  Spector’s  high-level  output 
helps  facilitate  attack  mitigation  and  classification  of 
different  payloads  that  have  the  same  behavior.  To 
evaluate Spector, we tested it with over 23,000 unique 
payloads. It identified eleven different classes of shell 
code, and processed all the payloads in just over three 
hours. Spector also successfully classified polymorphic 
instances of the same shell code.  
1. Introduction 
Over  the  years,  there  has  been  a  great  deal  of 
research on detecting the presence of network attacks, 
especially  those  that  exploit  buffer  overflows.  The 
ultimate  goal  in  signature-based  intrusion  detection  is 
to identify all possible attacks that exploit a particular 
vulnerability,  while  having  no  false  positives.  There 
has  been  significant  progress 
this  goal, 
particularly  in  work  by  Brumley  et  al.  [4].  Some 
systems  go  even  further  by  trying  to  identify  attacks 
without  knowing  the  vulnerability  that  they  aim  to 
exploit.  One  example  is  STRIDE,  which  detects  the 
presence of exploit shell code by looking for NOP (no-
operation – does not do anything significant) sleds [1]. 
However,  knowing  whether  or  not  a  particular 
network message contains a buffer overflow exploit is 
towards 
1063-9527/07 $25.00 © 2007 IEEE
1063-9527/07 $25.00 © 2007 IEEE
DOI 10.1109/ACSAC.2007.11
DOI 10.1109/ACSAC.2007.11
501
501
not always enough to fully mitigate the threat. It is also 
important to understand what the exploit payload does 
in order to take the appropriate action. For instance, if 
the exploit fetches a secondary malware payload from a 
specific website, then you may want to download and 
send  the  malware  to  your  anti-virus  vendor.  If  the 
exploit  creates  a  malicious  library  file  on  the  victim 
machine,  then  knowing  the  name  and  location  of  the 
library  will  aid  in  its  removal.  If  it  creates  a  remote 
shell,  then  you  might  be  able  to  cut  off  the  network 
connection using firewall rules. Unfortunately, current 
intrusion  detection  systems  are  rarely  able  to  provide 
this  type  of  information.  Getting  it  usually  requires 
manual  reverse  engineering,  which  is  an  arduous  task 
that takes a significant level of expertise. 
In  this  paper  we  introduce  Spector,  an  automated 
analysis engine for exploit payloads. Spector examines 
shell  code  that  has  already  been  identified  by  an 
intrusion  detection  system  (IDS)  as  malicious.  It  then 
uses  symbolic  emulation  to  extract  meaningful  high-
level application programming interface (API) calls, as 
well  as  their  parameters,  from  the  shell  code.  The 
resulting  output  lets  an  analyst  know  what the exploit 
does without having to go through the lengthy process 
of  reverse  engineering  the  shell  code.  Furthermore, 
Spector  is  resilient  to  obfuscation  from  encoders  and 
current  polymorphism  techniques,  which  enables  it  to 
classify  similar  polymorphic  instances  of  the  same 
payload. 
The idea of symbolic execution has been around for 
a  while,  but  has  previously  been  applied  to  other 
domains [5, 9, 28]. In contrast, Spector uses symbolic 
execution  to  extract  the  functionality  of  low-level 
assembly  instructions,  and  is  resistant  to  current 
automated  obfuscation 
techniques.  Analysis  of 
potentially  encoded  or  obfuscated  assembly  presents 
challenges above and beyond those addressed in other 
work  on  symbolic  execution,  such  as  self-modifying 
code  and  un-typed  memory.  Although  Spector  and 
other symbolic execution engines have similarities, the 
goal of Spector is much different and it must deal with 
OpenMutex(0x1F0001, 1, "u1") = 00000000 
VirtualAlloc(0, 0x50000, 0x1000, 4) = hHeapMemory0 
CreateFile(".\ftpupd.exe", 0x40000000, 0, 0, 2, 0, 0) = hFile 
InternetOpen("Mozilla/4.0", 1, NULL, NULL, 0) = hInternet 
InternetOpenUrl(hInternet, "http://127.0.0.1:31337/x.exe", NULL, 0, 0, 0) = hUrl 
InternetReadFile(hUrl, hHeapMemory0, 0x50000, SESP - 12) = 0, urlFileSize 
WriteFile(hFile, hHeapMemory0, urlFileSize, SESP - 12, 0) = 00000000 
CloseHandle(hFile) = 00000000 
WinExec(".\ftpupd.exe", 5) = 00000000 
ExitThread(0) = 00000000 
 Figure 1.  High-level Spector output for shell code that downloads a secondary payload to a local 
file and executes it. The shell code also prevents multiple infections by creating and checking for a 
unique mutex named “u1”. 
a  number  of  challenges 
meaningful operations from shell code. 
to  efficiently  extract 
the 
Spector  uses  a  custom  x86  processor  emulator  to 
analyze shell code. When it has finished, it generates a 
list of the API calls made by the shell code including 
their symbolic and concrete parameters. Figure 1 shows 
a  sample  call  trace  from  shell  code  collected  by  a 
lightweight  honeypot.  This  shell  code  downloads 
malware  from  a  web  server  to  a  local  file,  and  then 
executes 
file.  This  output  could  help  an 
administrator  determine  the  type  of  malware  installed 
by  the  exploit,  block  the  website  to  prevent  further 
downloads,  and  locate  the  malicious  file,  ftpupd.exe, 
on the target computer. Spector can also use this high-
level  output  to  classify  shell  code  with  the  same 
functionality,  which  can  be  helpful  when  examining a 
large  number  of  attacks,  as  would  be  the  case  with  a 
polymorphic  virus  outbreak.  Additionally,  Spector 
produces  a  fully  commented  disassembly  that  is 
comparable to the result of manual reverse engineering. 
This  low-level  output  can  be  referenced  by  security 
professionals  who  want  more  detailed  information, 
such as whether or not the shell code repairs the stack 
of the victim process.  
Spector  has  a  number  of  advantages  over  the 
alternative  method  of  simply  running  shell  code  in  a 
virtual  environment  and  logging  API  function  calls, 
similar  to  the  Norman  sandbox  [21],  or  trapping 
segmentation  faults  [17].  First, Spector provides extra 
information not available in a call trace. This includes 
low-level  output  with  detailed  information  about  the 
execution  of  each  instruction,  as  well  as  high-level 
output  with  symbolic  values  in  place  of  handles, 
pointers, and some return values. In Figure 1, a simple 
call  trace  would  have  random  integers  for  all  of  the 
handles  (hHeapMemory0,  hFile,  hUrl,  and  hInternet), 
which  may  impact  readability.  Furthermore,  if  the 
InternetReadFile 
(the 
maximum  buffer  size),  then  the  third  parameter  of 
WriteFile  would  also  be  0x50000  (320  KB).  In  this 
returned  0x50000 
function 
If 
case, it would be difficult to tell whether WriteFile uses 
the buffer size as a parameter and will always produce 
a  file  that  is  320  KB  (This  might  help  to  identify  the 
malware binary), or whether the amount of data written 
is dependent on the return value of InternetReadFile.  
functionality. 
Second,  the  virtual  environment  may  not  provide 
correct  API  call 
the  virtual 
environment  contains  real  API  functions,  then  shell 
code  that  tries  to  connect  back  to  a  host  that  is  no 
longer  available  or  listens  for  a  connection  on  a 
backdoor port will most likely fail and not exhibit the 
majority  of  its  intended  behavior.  The  method  of 
simply  resuming  execution  after  an  API  function  call 
[17]  would  most  likely  cause  shell  code  that  checked 
return values to exit prematurely. In addition, allowing 
malicious  code  to  have  access  to  the  internet  poses 
serious liability issues. To correct these problems, one 
would have to replace the API functions with call stubs 
that simulate the correct behavior, as is already done in 
Spector. This way, a function call to accept a network 
connection will always succeed as if the shell code was 
making  a  real  function  call,  even  though  it  is  not 
connected to the network.  
Finally, Spector guarantees deterministic execution. 
If  you  run  shell  code  directly  on  the  processor  in  a 
virtual  environment,  it  is  very  hard  to  tell  whether  it 
will  do  the  same  thing  if  you  run  it  again  under 
different  conditions,  such  as  another  operating  system 
or  application  version.  The  shell  code  may  make 
different function calls or use parameters derived from 
any  memory  it  has  touched  during  execution.  To  be 
sure  that  the  shell  code  has  done  everything  it  is 
supposed  to  do  inside  of  the virtual environment, one 
would have to do some manual reverse engineering or 
code coverage analysis. However, testing shell code on 
a  specific  process  may  sometimes  be  sufficient if you 
only care about its effect on homogeneous targets, but 
this  is  rarely  the  case  with  today’s  diverse  network 
environments.  In  contrast,  Spector  contains a minimal 
process  environment  and  represents  all  unknown  or 
502502
random  values  with  symbols.  This  ensures  that  its 
analysis  will  be  correct  for  any  standard  Windows 
process environment and system state. 
To evaluate Spector, we tested it with 23,169 unique 
payloads collected from lightweight honeypots running 
Nepenthes  [3]  and  honeyd  [25].  The  honeypots  were 
deployed over a /20 IP address space (4096 addresses) 
and  ran  for  a  period  of  two  months.  Therefore,  we 
consider  the  payloads  to  be  an  unbiased  sample  of 
random  attacks  from  the  internet.  Spector  identified 
eleven  different  classes  of  shell  code,  each  class 
sharing the same sequence of API function calls. These 
classes  included  shell  code  that  executes  a  shell 
command,  downloads  and  executes  a  file,  creates  a 
malicious  library,  or  opens  up  a  command  shell 
process, all using a variety of connection methods. For 
each payload, Spector was able to generate high-level 
output listing the API calls, as well as low-level output 
containing  the  disassembly  of  each  instruction  and  its 
operand/result values. With optimizations, Spector was 
able  to  process  all  23,000  payloads  in  185  minutes, 
with  a  maximum  processing  time  of  approximately 
seven  and  a  half  seconds.  These  results  demonstrate 
that Spector not only provides useful information about 
real-world exploits, but that it is able to handle a large 
volume of payloads in a reasonable amount of time. 
For the last part of our evaluation, we examined the 
limitations  of  Spector.  We  found  that  it  would  be 
possible for shell code to intentionally prevent Spector 
from  working  properly  by  inserting  non-deterministic 
branches that skip NOP code or tight loops that execute 
millions  of  meaningless  instructions.  We  plan  to  add 
support  for  non-deterministic  branching  to  Spector  in 
the  future,  which  would  eliminate  the  first  attack.  It 
may  also  be  possible  to  do  automatic  condition 
checking  in  order  to  speed  up  performance-intensive 
loops. In the future, polymorphism engines could insert 
meaningless  API  function  calls  to  disrupt  Spector’s 
classification  mechanism.  Spector  could  mitigate  this 
attack  by  doing  flow analysis on data within the shell 
code  to  determine  the  meaningful  API  calls.  Current 
polymorphism  tools,  however,  only  obfuscate  code 
with  the  goal  of  avoiding  detection  by  an  IDS,  not 
preventing classification. 
The  remainder  of  this  paper  is  laid  out  as follows: 
Section  2  covers  related  work.  Section  3  gives  an 
overview  of  how  Spector  fits  into  a  complete  system. 
Section  4  discusses  Spector’s  architecture.  Section  5 
describes our implementation, including optimizations. 
Section  6  presents  our  evaluation  results.  Finally, 
section  7  concludes  and  presents  future  work.  The 
appendix  contains  samples  of  Spector’s  high-level 
output for selected  classes of shell code. 
503503
2. Related Work 
Currently,  the  most popular way of analyzing shell 
code  is  to  use  a  combination  of  manual  static  and 
dynamic analysis. The most popular tool for static code 
analysis is the IDA Pro Disassembler from DataRescue 
[10]. Any standard debugger would work for dynamic 
analysis,  but  more  feature-rich  debuggers,  such  as 
OllyDbg  [32],  are  popular  for  analyzing  malicious 
code.  Spector  greatly  improves  upon  the  current 
method  of 
reverse  engineering  shell  code  by 
automating  code  analysis,  which  can  be  very  time-
consuming  and  requires  significant  domain  expertise. 
During its analysis, Spector will keep track of the entire 
process  state,  as  would  be  available  in  a  standard 
debugger,  but  has  the  extra  advantage  of  storing 
symbolic  instead  of  concrete  values.  When  it  is 
finished,  Spector  provides  very  detailed  low-level 
output, which is equivalent to that produced by manual 
reverse  engineering; 
single 
instruction with its result values, and API function calls 
with their parameters. 
it  annotates  every 
There  has  been  significant  research  in  the  area  of 
detecting  polymorphic  shell  code  variants.  Several 
systems  are  available  that  attempt  to  identify  the 
presence  of  an  exploit  or  shell  code  in  a  network 
message  [4,  7,  20,  23,  24].  One  even  uses  CPU 
emulation  to  detect  executable  code  sequences  [24]. 
These  systems,  in  general,  are  complimentary  to 
Spector.  Instead  of  trying  to  identify  the  presence  of 
polymorphic  shell  code,  Spector  aims  to  classify  and 
analyze  known 
its 
functionality,  facilitating  a  proper  response  to  the 
threat. Prior work in this area focuses only on detection 
and  does  not  present  a  solution  for  determining  any 
information about the content of polymorphic payloads 
beyond identifying invariant signatures associated with 
specific attacks. 
to  determine 
code 
shell 
identifies 
similarities 
Ma et al. present a method for classifying shell code 