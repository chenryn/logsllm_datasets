它被解析成以下的DOM树。  
注意：从现在开始，本博文中DOM树中的所有元素都将包含一个命名空间。所以html style意味着它是HTML命名空间的元素，而svg
style意味着它是SVG命名空间的元素。
由此产生的DOM树证明了我的观点：html style只有文本内容，而svg style则像普通元素一样被解析。
继续往下看，可能很想做某个观察。那就是：如果我们在或里面，那么所有的元素也都在非HTML命名空间。但事实并非如此。在HTML规范中，有一些元素叫做
**MathML文本集成点** 和 **HTML集成点** 。而这些元素的子元素都有HTML命名空间（下面我列举了某些例外）。  
请看下面的例子。
它被解析成以下DOM树。  
请注意，作为math直接子元素的style元素是在MathML命名空间，而mtext中的style元素是在HTML命名空间。而这是因为
**mtext是MathML文本集成点** ，并使解析器切换命名空间。
MathML文本集成点是。
  * math mi
  * math mo
  * math mn
  * math ms
HTML集成点是:
  * math annotation-xml 如果它有一个叫做编码的属性，其值等于text/html 或application/xhtml+xml
  * svg foreignObject
  * svg desc
  * svg title
我一直以为MathML文本集成点或HTML集成点的子元素都默认有HTML命名空间。我是真是大错特错!
HTML规范中说，MathML文本集成点的子节点默认为HTML命名空间，但有两个例外：mglyph和malignmark。而且只有当它们是MathML文本集成点的直接子元素时才会出现这种情况。
我们用下面的标签来检查一下。
请注意，作为mtext的直接子元素的mglyph是在MathML命名空间，而作为html a元素的子元素的mglyph是在HTML命名空间。
假设我们有一个 "当前元素"，我们想确定它的命名空间。我整理了一些经验法则。
  * 当前元素在其父元素的命名空间中，除非满足以下几点条件。
  * 如果当前元素是或，而父元素在HTML命名空间，那么当前元素分别在SVG或MathML命名空间。
  * 如果当前元素的父元素是HTML集成点，则当前元素在HTML命名空间，除非是或。
  * 如果当前元素的父元素是MathML集成点，那么当前元素在HTML命名空间，除非它是、、或。
  * 如果当前元素是、、、、、、、、、、、、、之一。, , , , , , , , , , , , , , , , , , , 。、、、、、、、、、或，并定义了颜色、面或大小属性，那么，堆栈上的所有元素都会被关闭，直到看到MathML文本整合点、HTML整合点或HTML命名空间中的元素。然后，当前元素也在HTML命名空间。
当我在HTML规范中找到这个关于mglyph的宝石时，我立刻知道这就是我一直在寻找的滥用html形式突变绕过sanitizer的方法。
## DOMPurify bypass
所以让我们回到绕过DOMPurify的Payload。
payload利用错误嵌套的html表单元素，并包含mglyph元素。它产生的DOM树如下。  
这个DOM树是无害的。所有元素都在DOMPurify的允许列表中。注意，mglyph是在HTML命名空间。而那个看起来像XSS
payload的片段只是html样式中的一个文本。因为有一个嵌套的html形式，我们可以很肯定这个DOM树在rearsing时是会被突变的。
所以DOMPurify在这里没有任何作用，而是返回一个序列化的HTML。
这个片段有嵌套的表单标签。所以当它被分配给innerHTML时，它被解析成以下DOM树。  
因此，现在第二个 html 表单没有创建，mglyph 现在是 mtext 的直接子元素，这意味着它在 MathML
命名空间中。正因为如此，style也在MathML命名空间中，因此它的内容不被视为文本。然后，关闭了元素，现在img是在HTML命名空间中创建的，从而导致XSS。
## 总结
综上所述，这个绕过之所以能够实现，是因为几个因素。
  * DOMPurify的典型用法使得HTML标记被解析两次。
  * HTML规范有一个怪癖，使得创建嵌套表单元素成为可能。但是，在重新解析的时候，第二个表单会消失。
  * mglyph和malignmark是HTML规范中的特殊元素，在某种程度上，如果它们是MathML文本集成点的直接子元素，那么它们就属于MathML命名空间，尽管其他标签默认都属于HTML命名空间。
  * 利用以上这些方法，我们可以创建一个标记，其中有两个表单元素和mglyph元素，这些元素最初是在HTML命名空间，但在重新解析时却在MathML命名空间，使得后续的样式标签要进行不同的解析，导致XSS。
Cure53对我的[Bypass](https://twitter.com/0xsapra?ref_src=twsrc%5Etfw%7Ctwcamp%5Etweetembed%7Ctwterm%5E1307929537749999616%7Ctwgr%5Eshare_3&amp;ref_url=https%3A%2F%2Fresearch.securitum.com%2Fmutation-xss-via-mathml-mutation-dompurify-2-0-17-bypass%2F)推送更新后，又发现了一个。
    ">
我把它留给读者，让读者自己去弄清楚为什么这个payload能用。提示：根本原因和我发现的bug一样。
这个bypass也让我意识到，以下形式
    div.innerHTML = DOMPurify.sanitize(html)
是容易发生突变XSS的设计，再找一个实例只是时间问题。我强烈建议给DOMPurify传递RETURN_DOM或RETURN_DOM_FRAGMENT选项，这样就不会执行序列化-解析的往返操作。
最后说明一下，我在为即将到来的 **XSS学院**
远程培训准备材料时发现了DOMPurify绕过。虽然还没有正式宣布，但细节（包括议程）将在两周内公布。我将讲授有趣的XSS技巧，重点是打破解析器和过滤器。如果你已经知道你有兴趣，请联系我们PI:EMAIL，我们将为你预定座位!
作者：Michał Bentkowski Michał Bentkowski  
原文地址：