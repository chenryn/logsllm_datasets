### Key Recovery Attack

Given \( k = T1(\alpha) \), we can exhaustively test all possible values of \(\delta \in \{0, 1, \ldots, 255\}\) and compute the output of the cipher. If for a particular value of \(\delta\), the output matches \( Z_{i+j} \), we retain \(\delta\) as a hypothesis for \( K_k \). This process can be repeated for several different values of \( i \) until a full key hypothesis is formed. The validity of the full key hypothesis depends solely on the correctness of \( K_0 \). Therefore, each key candidate must be verified by generating and comparing the keystream.

The overall complexity of this attack depends on the number of hypotheses for \( K_0 \) used to derive the remaining key. With 15-20 key-frames, the correct byte for \( K_0 \) is typically ranked as the best hypothesis. To derive the complete key, we need to test approximately \((7 \cdot 2^8)/2 \approx 2^{10}\) single-byte hypotheses for the missing bytes, on average.

A trade-off between keystream length and computational complexity is possible. The more key-frames available for testing hypotheses for \( K_0 \), the more the correct hypothesis stands out. In the most extreme case, we can try all \( 2^8 \) possible values for \( K_0 \) without ranking them, which reduces the required amount of known keystream to about 400-500 bits but increases the computational complexity to \((7 \cdot 2^8 \cdot 2^8)/2 \approx 2^{18}\) guesses on average.

### Conclusion and Implications

Despite extensive research on the security aspects of GSM and, to a lesser extent, UMTS systems, there has been no prior scientific or publicly available investigation into the security mechanisms of the two existing satellite phone standards, GMR-1 and GMR-2. Both standards rely on proprietary algorithms for (voice) encryption, which is contrary to modern security engineering practices. It is unclear whether this reliance is due to historical reasons or a belief that secret algorithms provide better security.

Our findings are not encouraging from a security perspective. GMR-1 uses a variant of the GSM cipher A5/2, which has been shown to have serious weaknesses for over a decade. The GMR-2 cipher, which appears to be an entirely new stream cipher, exhibits even more severe cryptographic vulnerabilities. For GMR-1, an attacker can mount a successful ciphertext-only attack. In the case of GMR-2, with approximately 50-65 bytes of known plaintext, it is possible to recover a session key with moderate computational complexity, making the attack feasible on a current PC. Both algorithms are significantly weaker than state-of-the-art ciphers like AES. Even if AES is considered too "heavy" for real-time encryption on mobile phones, other modern ciphers such as the Phase 2 eSTREAM finalists or lightweight block ciphers like PRESENT provide much better cryptographic protection.

The cipher code within the firmware was not specifically protected against reverse-engineering efforts. The difficulty in reconstructing both algorithms stems from the inherent complexity of analyzing large pieces of code. If software engineers had employed state-of-the-art obfuscation techniques, the analysis could have been significantly more challenging. Additionally, implementing the ciphers in hardware would also hinder reverse-engineering.

In this paper, we do not address the issue of obtaining ciphertext or plaintext data. However, follow-up work on GMR-1 has demonstrated the feasibility of the attack by revealing the session key with moderate effort. This clearly validates our analysis.

### Acknowledgment

We would like to thank Sylvain Munaut from the OsmocomGMR project for verifying the reconstructed A5-GMR-1 cipher with real-world data.

This work has been supported by the Ministry of Economic Affairs and Energy of the State of North Rhine-Westphalia (Grant IV.5-43-02/2-005-WFBO-009).

### References

[1] Z. Wang, X. Jiang, W. Cui, X. Wang, and M. Grace, “ReFormat: Automatic Reverse Engineering of Encrypted Messages,” in European Symposium on Research in Computer Security (ESORICS), 2009.

[2] J. Caballero, P. Poosankam, C. Kreibich, and D. Song, “Dispatcher: Enabling Active Botnet Infiltration using Automatic Protocol Reverse-Engineering,” in ACM Conference on Computer and Communications Security (CCS), 2009.

[3] F. Gröbert, C. Willems, and T. Holz, “Automated Identification of Cryptographic Primitives in Binary Programs,” in Symposium on Recent Advances in Intrusion Detection (RAID), 2011.

[4] D. Wright, “Reaching out to remote and rural areas: Mobile satellite services and the role of Inmarsat,” Telecommunications Policy, vol. 19, no. 2, pp. 105–116, 1995.

[5] D. Matolak, A. Noerpel, R. Goodings, D. Staay, and J. Balsasano, “Recent progress in deployment and standardization of geostationary mobile satellite systems,” in Military Communications Conference (MILCOM), 2002.

[6] ETSI, ETSI TS 101 376-3-2 V1.1.1 (2001-03); GEO-Mobile Radio Interface Specifications; Part 3: Network specifications; Sub-part 2: Network Architecture; GMR-1 03.002, Std., 2001.

[7] G. Maral and M. Bousquet, Satellite Communications Systems: Systems, Techniques and Technology, 5th ed. Wiley & Sons, 2009.

[8] Jim Geovedi and Raoul Chiesa, “Hacking a Bird in the Sky,” in HITBSecConf, Amsterdam, 2011.

[9] ETSI, ETSI TS 101 376-3-9 V1.1.1 (2001-03); GEO-Mobile Radio Interface Specifications; Part 3: Network specifications; Sub-part 9: Security related Network Functions; GMR-1 03.020, Std., 2001.

[10] H. Welte, “Anatomy of contemporary GSM cellphone hardware,” 2010. [Online]. Available: http://laforge.gnumonks.org/papers/gsm_phone-anatomy-latest.pdf

[11] M. Briceno, I. Goldberg, and D. Wagner, “A pedagogical implementation of the GSM A5/1 and A5/2 ‘voice privacy’ encryption algorithms,” 1999, originally published at http://www.scard.org, mirror at http://cryptome.org/gsm-a512.htm.

[12] J. D. Golic, “Cryptanalysis of alleged A5 stream cipher,” in Proceedings of the 16th annual international conference on Theory and application of cryptographic techniques, ser. EUROCRYPT’97. Springer-Verlag, 1997, pp. 239–255.

[13] S. Petrovic and A. Fuster-Sabater, “Cryptanalysis of the A5/2 Algorithm,” Cryptology ePrint Archive, Report 2000/052, Tech. Rep., 2000, http://eprint.iacr.org/.

[14] E. Biham and O. Dunkelman, “Cryptanalysis of the A5/1 GSM Stream Cipher,” in Indocrypt, 2000.

[15] A. Biryukov, A. Shamir, and D. Wagner, “Real Time Cryptanalysis of A5/1 on a PC,” in Fast Software Encryption (FSE), 2000.

[16] P. Ekdahl and T. Johansson, “Another Attack on A5/1,” IEEE Transactions on Information Theory, vol. 49, no. 1, 2003.

[17] A. Bogdanov, T. Eisenbarth, and A. Rupp, “A Hardware-Assisted Realtime Attack on A5/2 Without Precomputations,” in Cryptographic Hardware and Embedded Systems (CHES), 2007.

[18] E. Barkan, E. Biham, and N. Keller, “Instant Ciphertext-Only Cryptanalysis of GSM Encrypted Communication,” Journal of Cryptology, vol. 21, March 2008.

[19] K. Nohl and C. Paget, “GSM: SRSLY?” 2009, 26th Chaos Communication Congress.

[20] O. Dunkelman, N. Keller, and A. Shamir, “A Practical-Time Related-Key Attack on the KASUMI Cryptosystem Used in GSM and 3G Telephony,” in International Crytology Conference (CRYPTO), 2010.

[21] OsmocomGMR. Thuraya SO-2510. [Online]. Available: http://gmr.osmocom.org/trac/wiki/Thuraya_SO2510

[22] Texas Instruments. The OMAP 5910 Platform. [Online]. Available: http://www.ti.com/product/omap5910

[23] E. Barkan, E. Biham, and N. Keller, “Instant Ciphertext-Only Cryptanalysis of GSM encrypted communication,” in International Crytology Conference (CRYPTO), 2003, pp. 600–616.

[24] ETSI, ETSI TS 101 376-5-3 V1.2.1 (2002-04); GEO-Mobile Radio Interface Specifications; Part 5: Radio interface physical layer specifications; Sub-part 3: Channel Coding; GMR-1 05.003, Std., 2002.

[25] Jose Fridman, Analog Devices. How to optimize H.264 video decode on a digital baseband processor. [Online]. Available: http://www.eetimes.com/General/DisplayPrintViewContent?contentItemId=4016202

[26] ETSI, ETSI TS 101 377-5-3 V1.1.1 (2001-03); GEO-Mobile Radio Interface Specifications; Part 5: Radio interface physical layer specifications; Sub-part 3: Channel Coding; GMR-2 05.003, Std., 2001.

[27] ——, ETSI TS 101 377-3-10 V1.1.1 (2001-03); GEO-Mobile Radio Interface Specifications; Part 3: Network specifications; Sub-part 9: Security related Network Functions; GMR-2 03.020, Std., 2001.

[28] M. Robshaw and O. Billet, Eds., New Stream Cipher Designs: The eSTREAM Finalists, ser. LNCS, vol. 4986. Springer, 2008.

[29] A. Bogdanov, G. Leander, L. R. Knudsen, C. Paar, A. Poschmann, M. J. Robshaw, Y. Seurin, and C. Vikkelsoe, “PRESENT—An Ultra-Lightweight Block Cipher,” in CHES ’07: Proceedings of the 9th International Workshop on Cryptographic Hardware and Embedded Systems, ser. LNCS, no. 4727. Springer, 2007, pp. 450–466.

[30] B. Driessen, “Eavesdropping on Satellite Telecommunication Systems,” Cryptology ePrint Archive, Report 2012/051, 2012, http://eprint.iacr.org/2012/051.

[31] S. Munaut. (2012, Jan.) OsmocomGMR. [Online]. Available: http://gmr.osmocom.org/

### Appendix: Disassembly of Blackfin Code

Figure 11 shows an excerpt from the output of our Blackfin disassembler. Cross-references (i.e., who calls a function or where a jump originates) are annotated. Additionally, if a register is loaded with an address that points to a memory location within the firmware image, the disassembler reads and interprets the respective data.

```assembly
sub_20000000: x-refs 204fe02c
20000000 LINK 0x18;
20000004 [--SP] = (R7:6, P5:3);
20000006 P5 = R1;
20000008 P4 = R0;
2000000a P0.L = 0x2034;
2000000e P0.H = 0x2046;
20000012 R2.L = 0x7410;
20000016 R2.H = 0x2054;
2000001a SP += -0x24;
2000001c R0 = 0x4a8 (X);
20000020 R1 = B[P0] (Z);
20000022 [SP + 0xc] = P0;
20000024 P1.L = 0x6010;
20000028 P1.H = 0xc000;
2000002c CALL (P1);
2000002e P3 = R0;
20000030 CC = R0 == 0x0;
20000032 R0 = 0x1 (X);
20000034 IF CC JUMP 0x2000015c;
...
/* P0=0x00002034 */
/* @P0=hex:0x00000001 */
/* R2=0x00007410 */
/* @R2=str:'pDecTemp0' */
/* R0=0x000004a8 */
/* P1=0x00006010 */
/* P1=0xc0006010 */
```

### DSP Code of Feedback Register Shift Subroutine

Figure 12 depicts the TMS320C55x DSP code of one of the feedback register shift subroutines. Note that the subroutine and variable names were inserted by us and are not present in the binary.

```assembly
ROM:1D038 update_reg3:
ROM:1D038
ROM:1D03D
ROM:1D040
ROM:1D045
ROM:1D047
ROM:1D04B
ROM:1D04E
ROM:1D051
ROM:1D053
ROM:1D055
ROM:1D058
ROM:1D05A
ROM:1D05F
mov dbl(*abs16(#reg3)), AC1
sftl AC1, #-1, AC2
mov dbl(*abs16(#reg3)), AC1
xor AC2, AC1
bfxtr #0FFF0h, AC1, AR1
and #1, AR1, AC3
and #1, AC1, AC1
xor AC3, AC1
xor AC0, AC1
sftl AC1, #22, AC0
xor AC2, AC0
mov AC0, dbl(*abs16(#reg3))
ret
```

### Figure 12: DSP Code of a Feedback Register Shift Subroutine

This figure shows the TMS320C55x DSP code of one of the feedback register shift subroutines. The subroutine and variable names were added for clarity and are not present in the binary.