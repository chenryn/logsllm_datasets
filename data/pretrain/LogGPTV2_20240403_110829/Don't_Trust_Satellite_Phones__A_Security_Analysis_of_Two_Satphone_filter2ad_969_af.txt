with k = T1(α), we can simply try out all possible values
δ ∈ {0, 1, . . . , 255} and compute the output of the cipher.
If we ﬁnd for one value that the output equals Z (cid:2)
i+j we
keep δ as hypothesis for Kk. This can be repeated for a
few different i until a hypothesis for the full key has been
recovered. Since the validity of the full hypothesis solely
depends on the correctness of K0, we must verify each key
candidate by generating and comparing keystream.
The overall complexity of this attack depends on how
many hypotheses for K0 are used to derive the remaining
key. Given 15-20 key-frames, the correct byte for K0 is
usually ranked as best hypothesis so deriving the complete
key means testing
(7 · 28)/2 ≈ 210
single byte hypotheses for the missing bytes (on average).
Clearly, a keystream/time trade-off is possible: The more
key-frames are available to test hypotheses for K0, the more
the right hypothesis distinguishes itself from all others. As
a matter of fact, the most extreme trade-off is simply trying
all 28 possible values for K0 (without even ranking them),
which reduces the required amount of known keystream to
about 400–500 bits but increases the computational com-
plexity to
(7 · 28 · 28)/2 ≈ 218
guesses on average.
VI. CONCLUSION AND IMPLICATIONS
Despite a large body of work related to the security
aspects of the GSM, and to a lesser extend, the UMTS
system, there had been no scientiﬁc or other publicly avail-
able investigation of the security mechanisms employed by
the two existing satphone standards, GMR-1 and GMR-2.
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:50:23 UTC from IEEE Xplore.  Restrictions apply. 
Contrary to the practice recommended in modern security
engineering, both standards rely on proprietary algorithms
for (voice) encryption. Even though it is impossible for
outsiders (like us) to decide whether this is due to historic
developments or because secret algorithms were believed
to provide a higher level of “security”,
the ﬁndings of
our work are not encouraging from a security point of
view. GMR-1 relies on a variant of the GSM cipher A5/2,
for which serious weakness have been demonstrated for
more than a decade. The GMR-2 cipher, which appears
to be an entirely new stream cipher, shows even more
serious cryptographic weaknesses. In the case of GMR-1, an
attacker can mount a successful ciphertext-only attack. With
respect to the GMR-2 cipher, in a known-plaintext setting
where approximately 50–65 bytes plaintext are known to
the attacker, it is possible to recover a session key with
a moderate computational complexity, allowing the attack
to be easily performed with a current PC. Both algorithms
are cryptographically dramatically weaker than would be
possible with state-of-the-art ciphers, e.g., AES. Even if AES
is considered too “heavy” for realtime encryption on mobile
phones, the Phase 2 eSTREAM ﬁnalist stream ciphers [28]
or lightweight block ciphers such as PRESENT [29], provide
considerably better cryptographic protection.
The cipher code inside the ﬁrmware was not speciﬁcally
protected against reverse-engineering efforts. The difﬁculty
in reconstructing both algorithms thus stems from the in-
herent complexity in analyzing large pieces of code. If
software engineers had employed state-of-the art obfuscation
schemes, the analysis could have been at least complicated
signiﬁcantly. Furthermore, implementing the ciphers in hard-
ware would also hamper reverse-engineering.
In this paper, we do not address the issue of obtaining
ciphertext or plaintext data. However, follow-up work on
GMR-1 has done this, executing the attack on GMR-1 and
revealing the session key with moderate effort [30]. This
clearly demonstrates the impact and validity of our analysis.
ACKNOWLEDGMENT
We would like to thank Sylvain Munaut from the Osmo-
comGMR project [31] for verifying the reconstructed A5-
GMR-1 cipher with real-world data.
This work has been supported by the Ministry of Eco-
nomic Affairs and Energy of the State of North Rhine-
Westphalia (Grant IV.5-43-02/2-005-WFBO-009).
REFERENCES
[1] Z. Wang, X. Jiang, W. Cui, X. Wang, and M. Grace,
“ReFormat: Automatic Reverse Engineering of Encrypted
Messages,” in European Symposium on Research in Computer
Security (ESORICS), 2009.
[2] J. Caballero, P. Poosankam, C. Kreibich, and D. Song, “Dis-
patcher: Enabling Active Botnet Inﬁltration using Automatic
Protocol Reverse-Engineering,” in ACM Conference on Com-
puter and Communications Security (CCS), 2009.
[3] F. Gröbert, C. Willems, and T. Holz, “Automated Identi-
ﬁcation of Cryptographic Primitives in Binary Programs,”
in Symposium on Recent Advances in Intrusion Detection
(RAID), 2011.
[4] D. Wright, “Reaching out to remote and rural areas: Mobile
satellite services and the role of Inmarsat,” Telecommunica-
tions Policy, vol. 19, no. 2, pp. 105 – 116, 1995.
[5] D. Matolak, A. Noerpel, R. Goodings, D. Staay, and J. Bal-
dasano, “Recent progress in deployment and standardization
of geostationary mobile satellite systems,” in Military Com-
munications Conference (MILCOM), 2002.
[6] ETSI, ETSI TS 101 376-3-2 V1.1.1 (2001-03); GEO-Mobile
Radio Interface Speciﬁcations; Part 3: Network speciﬁca-
tions; Sub-part 2: Network Architecture; GMR-1 03.002, Std.,
2001.
[7] G. Maral and M. Bousquet, Satellite Communications Sys-
John
tems: Systems, Techniques and Technology, 5th ed.
Wiley & Sons, 2009.
[8] Jim Geovedi and Raoul Chiesa, “Hacking a Bird in the Sky,”
in HITBSecConf, Amsterdam, 2011.
[9] ETSI, ETSI TS 101 376-3-9 V1.1.1 (2001-03); GEO-Mobile
Radio Interface Speciﬁcations; Part 3: Network speciﬁca-
tions; Sub-part 9: Security related Network Functions; GMR-
1 03.020, Std., 2001.
[10] H. Welte, “Anatomy of contemporary GSM cellphone
http://laforge.
hardware,”
gnumonks.org/papers/gsm_phone-anatomy-latest.pdf
2010.
[Online]. Available:
[11] M. Briceno, I. Goldberg, and D. Wagner, “A pedagog-
ical
implementation of the GSM A5/1 and A5/2 “voice
privacy” encryption algorithms,” 1999, originally pub-
lished at http://www.scard.org, mirror at http://cryptome.org/
gsm-a512.htm.
[12] J. D. Golic, “Cryptanalysis of alleged A5 stream cipher,”
in Proceedings of the 16th annual international conference
on Theory and application of cryptographic techniques, ser.
EUROCRYPT’97. Springer-Verlag, 1997, pp. 239–255.
[13] S. Petrovic and A. Fuster-Sabater, “Cryptanalysis of the A5/2
Algorithm,” Cryptology ePrint Archive, Report 2000/052,
Tech. Rep., 2000, http://eprint.iacr.org/.
[14] E. Biham and O. Dunkelman, “Cryptanalysis of the A5/1
GSM Stream Cipher,” in Indocrypt, 2000.
[15] A. Biryukov, A. Shamir, and D. Wagner, “Real Time Crypt-
analysis of A5/1 on a PC,” in Fast Software Encryption (FSE),
2000.
[16] P. Ekdahl and T. Johansson, “Another Attack on A5/1,” IEEE
Transactions on Information Theory, vol. 49, no. 1, 2003.
[17] A. Bogdanov, T. Eisenbarth, and A. Rupp, “A Hardware-
Assisted Realtime Attack on A5/2 Without Precomputations,”
in Cryptographic Hardware and Embedded Systems (CHES),
2007.
[18] E. Barkan, E. Biham, and N. Keller, “Instant Ciphertext-Only
Cryptanalysis of GSM Encrypted Communication,” Journal
of Cryptology, vol. 21, March 2008.
141
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:50:23 UTC from IEEE Xplore.  Restrictions apply. 
[19] K. Nohl and C. Paget, “GSM: SRSLY?” 2009, 26th Chaos
Communication Congress.
[20] O. Dunkelman, N. Keller, and A. Shamir, “A Practical-
Time Related-Key Attack on the KASUMI Cryptosystem
Used in GSM and 3G Telephony,” in International Crytology
Conference (CRYPTO), 2010.
[21] OsmocomGMR. Thuraya SO-2510.
[Online]. Available:
http://gmr.osmocom.org/trac/wiki/Thuraya_SO2510
[22] Texas Instruments. The OMAP 5910 Platform. [Online].
Available: http://www.ti.com/product/omap5910
[23] E. Barkan, E. Biham, and N. Keller, “Instant Ciphertext-
Only Cryptanalysis of GSM encrypted communication,” in
International Crytology Conference (CRYPTO), 2003, pp.
600–616.
sub_20000000: x-refs 204fe02c
20000000 LINK 0x18;
20000004 [--SP] = (R7:6, P5:3);
20000006 P5 = R1;
20000008 P4 = R0;
2000000a P0.L = 0x2034;
2000000e P0.H = 0x2046;
20000012 R2.L = 0x7410;
20000016 R2.H = 0x2054;
2000001a SP += -0x24;
2000001c R0 = 0x4a8 (X);
20000020 R1 = B[P0] (Z);
20000022 [SP + 0xc] = P0;
20000024 P1.L = 0x6010;
20000028 P1.H = 0xc000;
2000002c CALL (P1);
2000002e P3 = R0;
20000030 CC = R0 == 0x0;
20000032 R0 = 0x1 (X);
20000034 IF CC JUMP 0x2000015c;
...
/* P0=0x00002034 */
/* @P0=hex:0x00000001 */
/* R2=0x00007410 */
/* @R2=str:’pDecTemp0’ */
/* R0=0x000004a8 */
/* P1=0x00006010 */
/* P1=0xc0006010 */
[24] ETSI, ETSI TS 101 376-5-3 V1.2.1 (2002-04); GEO-Mobile
Radio Interface Speciﬁcations; Part 5: Radio interface physi-
cal layer speciﬁcations; Sub-part 3: Channel Coding; GMR-1
05.003, Std., 2002.
loc_2000015c: x-refs 20000034
2000015c SP += 0x24;
2000015e (R7:6, P5:3) = [SP++];
20000160 UNLINK;
20000164 RTS;
Figure 11. Example for disassembly of Blackﬁn code
B. DSP Code of Feedback Register Shift Subroutine
ROM:1D038 update_reg3:
ROM:1D038
ROM:1D03D
ROM:1D040
ROM:1D045
ROM:1D047
ROM:1D04B
ROM:1D04E
ROM:1D051
ROM:1D053
ROM:1D055
ROM:1D058
ROM:1D05A
ROM:1D05F
mov
sftl
mov
xor
bfxtr
and
and
xor
xor
sftl
xor
mov
ret
dbl(*abs16(#reg3)), AC1
AC1, #-1, AC2
dbl(*abs16(#reg3)), AC1
AC2, AC1
#0FFF0h, AC1, AR1
#1, AR1, AC3
#1, AC1, AC1
AC3, AC1
AC0, AC1
AC1, #22, AC0
AC2, AC0
AC0, dbl(*abs16(#reg3))
Figure 12. DSP code of a feedback register shift subroutine
Figure 12 depicts the TMS320C55x DSP code of one of
the feedback register shift subroutines. Note that the subrou-
tine and variable names were inserted by us afterwards and
are not present in the binary.
[25] Jose
Fridman, Analog Devices. How to
optimize
H.264 video decode on a digital baseband proces-
sor.
[Online]. Available: http://www.eetimes.com/General/
DisplayPrintViewContent?contentItemId=4016202
[26] ETSI, ETSI TS 101 377-5-3 V1.1.1 (2001-03); GEO-Mobile
Radio Interface Speciﬁcations; Part 5: Radio interface physi-
cal layer speciﬁcations; Sub-part 3: Channel Coding; GMR-2
05.003, Std., 2001.
[27] ——, ETSI TS 101 377-3-10 V1.1.1 (2001-03); GEO-Mobile
Radio Interface Speciﬁcations; Part 3: Network speciﬁca-
tions; Sub-part 9: Security related Network Functions; GMR-
2 03.020, Std., 2001.
[28] M. Robshaw and O. Billet, Eds., New Stream Cipher Designs:
Springer, 2008, vol.
The eSTREAM Finalists, ser. LNCS.
4986.
[29] A. Bogdanov, G. Leander, L. R. Knudsen, C. Paar,
A. Poschmann, M. J. Robshaw, Y. Seurin, and C. Vikkelsoe,
“PRESENT—An Ultra-Lightweight Block Cipher,” in CHES
’07: Proceedings of the 9th International Workshop on Cryp-
tographic Hardware and Embedded Systems, ser. LNCS, no.
4727. Springer, 2007, pp. 450–466.
[30] B. Driessen, “Eavesdropping on Satellite Telecommunication
Systems,” Cryptology ePrint Archive, Report 2012/051, 2012,
http://eprint.iacr.org/2012/051.
[31] S. Munaut. (2012, Jan.) OsmocomGMR. [Online]. Available:
http://gmr.osmocom.org/
A. Disassembly of Blackﬁn Code
APPENDIX
Figure 11 shows an excerpt from the output of our
Blackﬁn disassembler. As can be seen, cross-references
(i.e., who calls a function or where a jump originates)
are annotated. Additionally,
if a register is loaded with
an address which points to a memory location which is
within the ﬁrmware image, the disassembler also reads and
interprets the respective data.
142
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:50:23 UTC from IEEE Xplore.  Restrictions apply.