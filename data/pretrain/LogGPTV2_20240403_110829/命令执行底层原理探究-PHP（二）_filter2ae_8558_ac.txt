初始任务模板内容：tasks.json
    {
        // See https://go.microsoft.com/fwlink/?LinkId=733558
        // for the documentation about the tasks.json format
        "version": "2.0.0",
        "tasks": [
            {
                "label": "echo",
                "type": "shell",
                "command": "echo Hello"
            }
        ]
    }
修改任务模板配置文件，配置PHP执行环境
    // tasks.json
    {
        "version": "2.0.0",
        "tasks": [
            {
                "label": "Windows php7.2.9.exe x.php",
                "type": "shell",
                "command": "D:/QSec/Code-Audit/PHP/PHP-Source-Code/php-7.2.9-windows-debug/Debug_TS/php.exe",
                "args": [
                    "${file}"
                ]
            }
        ]
    }
运行任务`Windows php7.2.9.exe x.php`来执行特定PHP程序文件
####  插件执行
除了上方创建任务执行程序外，还可以借助插件`code runner`更加方便的去执行程序。
`code runner`扩展自带的默认对PHP运行的配置规则如下
    "code-runner.executorMap": {
         "php": "php"
    }
默认配置使用的是环境变量中的php.exe去执行的，可以更改设置为自己的php.exe路径【避免与环境变量中其它的php.exe发生冲突】
点击`File->Preferences->settings->Extensions->Run Code configuration->Executor
Map->Edit in settings.json`进行设置
插件运行效果
###  疑难杂症
针对调试编译的源码所要注意的问题，由于在编译期间会对源代码的路径等信息进行配置，写入编译后的`Debug_TS\php.exe`以及`Debug_TS\resp\*`等文件中，使得其可以协助我们进行源代码的调试工作。但是，这里就会出现一个问题：如果以后对源码的路径进行了任何改动都会导致对源代码调试出错。
`Debug_TS\php.exe`中有关PHP源代码路径信息
`Debug_TS\resp\*`中有关PHP源代码路径信息
这里如果对路径稍作修改则会调试出错(找不到源码文件)：`php-7.2.9-windows-debug` ==> `php-7.2.9-windows-debugs`
## PHP for Linux
针对Linux平台下：环境准备、PHP内核源码的编译、运行、调试等。
###  环境准备
环境部署情况：
  * Linux (kali-linux-2020.4-amd64)
  * Visual Studio Code (code-stable-x64-1605051992)
  * PHP Source Code (PHP 7.2.9)
  * Make (GNU Make 4.3 Built for x86_64-pc-linux-gnu)
  * GDB (GNU gdb (Debian 10.1-1+b1) 10.1)
  * Source Insight (Windows Source Insight 4.0)
####  Visual Studio Code
`Visual Studio Code` 常用于不同语言的项目开发、源代码编辑调试等工作。
  * 官网：介绍、下载
    https://code.visualstudio.com/
下载deb免安装版本类别，之后解压并配置环境变量
    # 下载解压
    tar -zxvf code-stable-x64-1605051992.tar.gz
    # 配置环境变量
    vim ~/.bashrc
    export PATH="/mnt/hgfs/QSec/Pentest/Red-Team/神兵利器/Windows/VSCode/VSCode-linux-x64:$PATH"
    # 启动文件重命名
    cd VSCode-linux-x64
    mv code vscode
测试使用
  * 添加相应扩展：c/c++扩展、代码辅助运行扩展
    C/C++
    Code Runner
####  PHP Source Code
  * PHP官方各个版本源代码下载
    https://www.php.net/releases/
    or
    https://github.com/php/php-src/releases
这里下载的版本为：`PHP 7.2.9`
####  Make
代码变成可执行文件，叫做编译(compile)，同C编译型语言，由c代码编译生成可执行文件(PE、ELF)；先编译这个，还是先编译那个（即编译的安排），叫做[构建](http://en.wikipedia.org/wiki/Software_build)（build）。
[Make](http://en.wikipedia.org/wiki/Make_\(software))是最常用的构建工具，诞生于1977年，主要用于C语言的项目。但是实际上
，任何只要某个文件有变化，就要重新构建的项目，都可以用Make构建。
有关Make资料可参考：[《Makefile文件教程》](https://gist.github.com/isaacs/62a2d1825d04437c6f08)、[《GNU
Make手册》](https://www.gnu.org/software/make/manual/make.html)、[《Make
命令教程》](https://www.w3cschool.cn/mexvtg/)
    ┌──(root💀toor)-[~/桌面]
    └─# make -v 
    GNU Make 4.3
    为 x86_64-pc-linux-gnu 编译
    Copyright (C) 1988-2020 Free Software Foundation, Inc.
    许可证：GPLv3+：GNU 通用公共许可证第 3 版或更新版本。
    本软件是自由软件：您可以自由修改和重新发布它。
    在法律允许的范围内没有其他保证。
    ┌──(root💀toor)-[~/桌面]
    └─#
####  GDB
**基础介绍**
GDB是一个由GNU开源组织发布的、UNIX/LINUX操作系统下的、基于命令行的、功能强大的程序调试工具。
它使您可以查看一个程序正在执行时的状态或该程序崩溃时正在执行的操作。
官方：介绍、Wiki
  * [GDB: The GNU Project Debugger](http://www.gnu.org/software/gdb)
  * [Welcome to the GDB Wiki](https://sourceware.org/gdb/wiki/)
支持语言：
    Ada
    Assembly
    C
    C++
    D
    Fortran
    Go
    Objective-C
    OpenCL
    Modula-2
    Pascal
    Rust
查看GDB调试窗口布局
**命令列表**
  * Tab键两次补全显示所有指令
  * help all 显示所有指令（带注解）
**命令详解**
通过GDB帮助手册总结以下常用调试指令：
**《调试程序》**
  * gdb binary_file_path：使用gdb载入binary_file_path指定的程序进行调试。
  * gdb —pid PID：使用gdb attach到指定pid的进程进行调试。
  * gdb $ file binary_file_path：在gdb中载入binary_file_path指定的程序进行调试。
**《帮助指令》**
  * help command：查看gdb下command指令的帮助信息。
**《运行指令》**
  * start：运行被调试的程序，断在程序入口-main函数，可带参数。
  * run（简写 r）: 运行被调试的程序。 如果此前没有下过断点，则执行完整个程序；如果有断点，则程序暂停在第一个可用断点处，等待用户输入下一步命令。
  * continue（简写 c） : 继续执行，到下一个断点停止（或运行结束）
  * next（简写 n） : **C语言级的断点定位** 。相当于其它调试器中的“ **Step Over (单步跟踪)** ”。单步跟踪程序，当遇到函数调用时，也不进入此函数体；此命令同 step 的主要区别是，step 遇到用户自定义的函数，将步进到函数中去运行，而 next 则直接调用函数，不会进入到函数体内。
  * step （简写 s）： **C语言级的断点定位** 。相当于其它调试器中的“ **Step Into (单步跟踪进入)** ”。单步调试如果有函数调用，则进入函数；与命令n不同，n是不进入调用的函数体。【 **前提： s会进入C函数内部，但是不会进入没有定位信息的函数（比如没有加-g编译的代码，因为其没有C代码的行数标记，没办法定位）。（比如：调试编译PHP内核源码，然后调试php代码底层实现，跟踪到了libc函数后，由于libc没有标记信息，导致s或n之后直接打印输出完成程序的调试）** 】
  * nexti（简写 ni）：Next one instruction exactly。 **汇编级别的断点定位** 。作用和next指令相同，只是单步跟踪汇编代码，碰到call调用，不会进入汇编函数体。
  * stepi（简写 si）：Step one instruction exactly。 **汇编级别的断点定位** 。作用和step指令相同，只是单步跟踪汇编代码，碰到call调用，会进入汇编函数体。【 **前提：当要进入没有调试信息的库函数调试的时候，用si是唯一的方法。当进入有调试信息的函数，用si和s都可以进入函数体，但是他们不同，si是定位到汇编级别的第一个语句，但是s是进入到C级别的第一个语句。** 】
  * until（简写 u）： **跳出当前循环** 。当你厌倦了在一个循环体内单步跟踪时，这个命令可以运行程序直到退出循环体。
  * until n（简写 u n）：运行至第n行，不仅仅用来跳出循环。
  * finish： **跳出当前函数** 。运行程序，直到当前函数完成返回，并打印函数返回时的堆栈地址和返回值及参数值等信息。
  * return： **跳出当前函数** 。忽略之后的语句，强制函数返回。
  * call function(arg)：调用程序中可见的函数，并传递“参数”，如：call gdb_test(55)。
  * quit（简写 q）：退出GDB调试环境。
**《断点指令》**
  * break, brea, bre, br, b： **设置断点** 。break设置断点对象包括：行号、函数、地址等。 
    * break n（简写 b n）：在第n行处设置断点（可以带上代码路径和代码名称：b OAGUPDATE.cpp:578）
    * break function（简写 b function）：在函数function()的入口处设置断点，如：break cb_button。
    * break _function（简写 b_ function）：将断点设置在“由编译器生成的prolog代码处”。
    * break _address（简写 b_ address）：在指定地址下断点（地址必须是可执行代码段）
  * catch event： **设置捕捉点** 。捕捉点用来补捉程序运行时的一些事件。如：载入共享库（动态链接库）、C++的异常、新的进程、系统调用等。 
    * catch fork、vfork、exec：捕捉新创建的进程事件，对新进程继续调试。
    * catch syscall \：捕捉系统调用事件。（比如：创建新的进程事件，在libc中由execve()函数调用内核入口{系统调用号对应的系统内核调用函数}进行创建）（catch syscall execve）（捕捉execve()系统调用事件）（catch syscall 59）
  * info breakpoints（简写 info b、i b） ：查看当前程序设置的断点列表信息。
  * disable：对已设置的特定断点使其失效（可使用info b指令查看Enb列情况）。 
    * disable index：使第index个断点失效。
    * disable breakpoints：使所有断点失效。
  * enable：对已设置失效的特定断点使其生效（默认调试设置的断点是生效的）（可使用info b指令查看Enb列情况）。 
    * enable index：使第index个断点生效。
    * enable breakpoints：使所有断点生效。
  * watchpoint： **设置观察点** 。 
    * watch expression：当表达式被写入，并且值被改变时中断。
    * rwatch expression：当表达式被读时中断。
    * awatch expression：当表达式被读或写时中断。
  * delete：删除breakpoints、display等设置的信息。 
    * delete index（简写 d index）：删除指定断点（index可使用info b查看）。
    * delete breakpoints（简写 d breakpoints）：删除所有断点，包括 断点、捕捉点、观察点。
**《文件指令》**
  * list、l： **源代码显示** 。 
    * list（简写l）：列出当前程序执行处的源代码，默认每次显示10行。
  * list line（简写l line）：将显示当前文件以“行号 line”为中心的前后10行代码，如：list 12。 
    * list function（简写l function）：将显示当前文件“函数名”所在函数的源代码，如：list main。
  * list file_path:line_number：将显示指定file_path的文件，以line_number行为中心的前后10行源代码。 
    * list（简写l）：不带参数，将接着上一次 list 命令的，输出下边的内容。
  * disassemble： **汇编代码显示** 。列出当前程序执行处的汇编代码。
  * cd：切换工作目录。
  * file binary_file_path：在gdb中载入binary_file_path指定的程序进行调试。
  * pwd：查看工作目录。
  * edit：编辑当前程序所运行到的文件或源码。
  * dump filename addr1 addr2：dump指定内存到文件中，dump命令之后还会跟一些其他指令用于特定的操作，具体可到GDB中查看。
**《数据指令》**
  * print、inspect、p：打印表达式的值。 
    * print expression（简写 p expression）：其中“表达式”可以是任何当前正在被测试程序的有效表达式，比如当前正在调试C语言的程序，那么“表达式”可以是任何C语言的有效表达式，包括数字，变量甚至是函数调用。
  * print a（简写 p a）：将显示整数 a 的值。 
    * print ++a（简写 p ++a）：将把 a 中的值加1，并显示出来。
  * print name（简写 p name）：将显示字符串 name 的值。 
    * print gdb_test(22)（简写 p gdb_test(22)）：将以整数22作为参数调用 gdb_test() 函数。
  * print gdb_test(a)（简写 p gdb_test(a)）：将以变量 a 作为参数调用 gdb_test() 函数。 
    * print _argv[@70](https://github.com/70 "@70")（简写 p _argv[@70](https://github.com/70 "@70")）：打印指针argv的值以数组形式显示。
  * display：随程序的单步调试，在上下文中打印表达式的值。 
    * display expression：在单步运行时将非常有用，使用display命令设置一个表达式后，它将在每次单步进行指令后，紧接着输出被设置的表达式及值。如：display a。（ **在当前设置的文件或程序上下文中，相当于实时跟踪被设置的表达式的变化情况，每单步执行调试一次程序，都会执行显示一次display设置的表达式的结果** ）。
    * info display（简写 i display）：查看display设置要查询的表达式列表信息。
    * delete display n（简写 d diplay n）：删除display设置要查询的第n个表达式。
    * delete display（简写 d display）： 删除所有display设置要查询的表达式。
  * x/nf address|寄存器($esi $rsi等)：打印指定地址开始n个单元的的内存数据，f可表示单元大小（x为默认大小，b为一个字节，h为双字节，wx为四字节，gx为八字节，i表示查看指令(汇编)，c表示查看字符，s表示查看字符串） 
    * x/x 0x7fffffffdfc8：显示地址0x7fffffffdfc8（指针）指向的地址。
    * x/x $rsi：显示寄存器$rsi指向的地址。
    * x/74s 0x7fffffffe307：以字符串形式打印地址0x7fffffffe307所存储的74个数据(数组长度74)。
    * x/10i 0x7fffffffe307：打印地址0x7fffffffe307处的10条汇编指令。
  * find expr：在当前进程内存搜索expr的值，可以是整数或是字符串（在peda下使用，对应pwndbg的命令是search）。
  * set {type} $reg/mem=expr：设置对应寄存器或内存指向的值为expr，type可为int、long long等。
  * set $reg=expr：设置对应寄存器的值为expr。
**《状态指令》**
  * info program（简写 i program）：查看程序是否在运行，进程号，被暂停的原因等。
  * backtrace, where, bt, info stack, i stack, i s：显示当前上下文堆栈调用情况（常用于回溯跟踪，pwndbg可直接在工作窗口显示）