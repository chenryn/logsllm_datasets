Figure 2: Delayed seed-disclosure DSSS (DSD-DSSS)
t
h
g
i
r
p
h
c
1
i
analysis of the signal.
4. BASIC DSD-DSSS
The basic idea of DSD-DSSS is two-fold. First, the code se-
quence used to spread a broadcast message is randomly generated
based on a random seed only known to the sender. Thus, nobody
except for the sender knows the right spreading code sequence be-
fore the sender discloses it. Second, the sender discloses the ran-
dom seed at the end of the broadcast message, after the main mes-
sage body has been transmitted. A receiver buffers received sig-
nal (or more precisely, received chips); it can decode the random
seed and regenerate the spreading code sequence accordingly to
despread the buffered chips. A jammer may certainly attempt the
same thing. However, when the jammer recovers the seed and the
spreading code sequence, all reachable receivers have already re-
ceived the message. It is too late for the jammer to do any damage.
Figure 2 illustrates the sending and receiving processes in DSD-
DSSS. In the following, we describe this new scheme in detail.
4.1 Spreading Code Sets
Similar to traditional DSSS communication, DSD-DSSS uses
spreading codes with good auto-correlation and low cross-correlation
properties (e.g., PN codes).
DSD-DSSS keeps two sets of publicly known spreading codes:
Cp and Ce. Codes in Cp are used to spread the message body mi,
while codes in Ce are used to spread the random seed at the end
of each message. We require that Cp and Ce have no overlap (i.e.,
Cp ∩ Ce = ∅). For convenience, we give each code in Cp (or Ce) a
unique index. For a given index i for Cp (or Ce), we use Cp[i] (or
Ce[i]) to refer to the i-th code in Cp (or Ce).
We use individual bits in the message as the basic units of spread-
ing. That is, each bit is spread with a different spreading code. As
a result, even if an intelligent jammer can infer the spreading code
for the current bit through real-time analysis, she cannot use this
code to jam the following bit.
4.2 Sender
Given a lm-bit message mi, the sender encodes mi in two parts:
message body and random seed.
Spreading Message Body: The sender ﬁrst generates a random
seed si, and then uses a pseudo-random generator with seed si to
generate a sequence of lm random indexes mid1kmid2k...kmidlm ,
where 1 ≤ midi ≤ |Cp|. The sender then generates a sequence of
spreading codes csm for mi by drawing codes from Cp using these
indexes. That is, csm = Cp[mid1]kCp[mid2]k...kCp[midlm ].
The sender then uses csm to spread mi (i.e., each code Cp[midk]
is used to spread the k-th bit of mi). For convenience, we de-
note the spread message body (more precisely, the spread chips) as
S(csm, mi).
Spreading Seed: A naive method is to disclose the seed si right
after the spread message body S(csm, mi) so that receivers can re-
cover si from the end of the message, generate csm using si, and
despread the message. However, such a method is highly vulner-
able to jamming attacks. Indeed, a jammer can simply disrupt the
seed transmission to prevent the message from being received.
To prevent jamming attacks against the disclosed seed, the sender
spreads the seed si using codes randomly selected from Ce, one of
the public code sets. Assume the seed has ls bits. The sender ran-
domly draws ls codes independently from Ce to form a sequence of
ls spreading codes, denoted css = Ce[sid1]k...kCe[sidls ], where
sid1, ..., sidls are random integers between 1 and ls. The sender
then spreads the k-th bit in the seed si with the corresponding code
Ce[sidk], where 1 ≤ k ≤ ls. The spreading results are then modu-
lated, up-converted to the carrier frequency, and transmitted in the
communication channel.
4.3 Receiver
As shown in Figure 2, each receiver keeps sampling the chan-
nel through down-conversion and demodulation, and saves the re-
ceived chips in a cyclic buffer. Each receiver continuously pro-
cesses the buffered chips to recover possibly received messages. To
recover a meaningful message, a receiver has to ﬁrst synchronize
the buffered chips (i.e., align the buffered chips with appropriate
spreading code) and then despread them.
Synchronization and Recovery of Seed: The goal of synchro-
nization is to identify the positions of the chips of a complete mes-
sage in the buffer before despreading them. The key for synchro-
nization is to locate the seed, which occupies the last l × ls chips
in a message.
As shown in Figure 2, a receiver uses a sliding window with
window size ls × l to scan and locate the seed in the buffer, where
ls is the number of bits in a seed and l is the number of chips in
a spreading code. The sliding window is shifted to the right by 1
chip each time.
In each scan, the receiver ﬁrst uses the public code set Ce to
despread the chips in the sliding window to synchronize with the
sender. Conceptually, the receiver partitions the ls × l chips into
ls groups, and tries each code in Ce to despread each group in the
window. Note that using a set of codes with good auto-correlation
and low cross-correlation properties, we can get high correlation
and despread a bit successfully only when the same code (as the
one used for spreading) is used to despread the encoded chips in
the right position. If the despreading is successful for every group,
the content in the window is a seed, which has been successfully
recovered. At the same time, the position of the message body in
the buffer is determined, i.e., the lm × l chips to the left of the
window in the buffer belong to the message body. Otherwise, the
receiver shifts the window to the right by 1 chip and repeats the
same process. This process can be further optimized. We omit the
details, since it is not critical for the presentation of our approach.
Despreading Message Body: Once a receiver recovers a seed si
and determines the position of a received message in the buffer, it
follows the same procedure as the sender to generate the sequence
of spreading codes csm = Cp[mid1]kCp[mid2]k...kCp[midlm ].
The receiver then despreads the message body using csm. Specif-
ically, the receiver partitions the chips buffered for the message
body into lm groups, each of which has l chips, and uses code
Cp[midk] to despread the k-th group of chips (1 ≤ k ≤ lm).
At the end of this process, the receiver will recover the message
body mi and forward it to upper-layer protocols for further pro-
cessing (e.g., error detection, signature veriﬁcation).
4.4 Security Analysis
To show the effectiveness of DSD-DSSS against jamming at-
tacks, we analyze the jamming probability in DSD-DSSS under
different jamming attacks. Following the classiﬁcation in [13],
we consider two kinds of jamming attacks: non-reactive jamming
and reactive jamming attacks. A non-reactive jammer continuously
jams the communication channel without knowledge about actual
transmissions, while a reactive jammer detects the transmission be-
fore jamming the channel. The jammer can apply three strategies
to each attack: static, sweep, and random strategies. In the static
strategy, the jammer uses the same code to jam the channel all the
time. In the sweep strategy, the jammer periodically changes the
code for jamming and does not reuse a code until all other codes
have been used. In the random strategy, the jammer periodically
changes the jamming code to a random code.
We also consider Denial of Service (DoS) attacks targeting at
seed disclosure at receivers, in which the jammer attempts to force
receivers to deal with a large number of candidate seeds.
4.4.1
Jamming Attacks
DSD-DSSS provides strong resistance against jamming attacks.
Because each message is spread with a pseudo-random code se-
quence decided by a random seed, no one except for the sender can
predict the spreading code sequence and jam the communication.
The random seed is disclosed at the end of each message. Thus,
when a jammer learns the seed, it is already too late to jam the
transmitted message with it. A jammer may certainly try to jam
the transmission of the random seed. However, each bit of the seed
is spread with a code randomly selected from a code set (i.e., Ce),
making it hard for a jammer to predict.
In the following, we provide a quantitative analysis of the jam-
ming probabilities in various jamming scenarios. A jammer has
two targets in each message: message body and seed. The jammer
may jam the message body directly, or the seed so that receivers
cannot recover the seed and then the spreading code sequence for
the message body. To successfully jam even one bit of the message
body, the jammer has to know the spreading code for that bit and
synchronize her chips with those of the transmitted message.
Non-reactive Jamming Attacks: Non-reactive jammers do not
rely on any information about the transmitted messages. Thus, they
have to guess the spreading code and synchronization. We consider
all three jamming strategies (i.e., static, sweep, and random) [13]
and provide the jamming probabilities in the following two Theo-
rems. The proofs are trivial and omitted due to space limit.
THEOREM 1. When DSD-DSSS is used, the jamming proba-
bility of a non-reactive jammer with the static strategy is at most
l|Cp|(cid:17)lm
1 − (cid:16)1 − 1
at most 1 − (cid:16)1 − 1
if the jammer targets the message body, and is
l|Ce|(cid:17)ls
if the jammer targets the seed.
Ǉ
ƚ
ŝ
ů
ŝ

ď
Ă
ď
Ž
ƌ
W
Ő
Ŷ
ŵ
ŵ
Ă
:
ŝ
ϭ͘ϬϬϬϬϬ
Ϭ͘ϭϬϬϬϬ
Ϭ͘ϬϭϬϬϬ
Ϭ͘ϬϬϭϬϬ
Ϭ͘ϬϬϬϭϬ
Ϭ͘ϬϬϬϬϭ
ϭ͕ϬϬϬ
Ϯ͕ϬϬϬ
ϯ͕ϬϬϬ
ϰ͕ϬϬϬ
ϱ͕ϬϬϬ
ϲ͕ϬϬϬ
ϳ͕ϬϬϬ
ͮƉͮ
ƐƚĂƚŝĐ;ƉͿ͕ůсϭϬϬ
ƐƚĂƚŝĐ;ĞͿ͕ůсϭϬϬ
ƌĂŶĚŽŵͬƐǁĞĞƉ͕ůсϭϬϬ
ƐƚĂƚŝĐ;ƉͿ͕ůсϮϬϬ
ƐƚĂƚŝĐ;ĞͿ͕ůсϮϬϬ
ƌĂŶĚŽŵͬƐǁĞĞƉ͕ůсϮϬϬ
ƌĞĂĐƚŝǀĞ
ƌĞĂĐƚŝǀĞ͕
ƚŽůĞƌĂƚĞϭďŝƚĞƌƌŽƌ
1
.
l(|Cp|+|Ce|)(cid:17)lm+ls
Figure 3: Maximum jamming probability for non-reactive and
reactive jamming attacks (lm = 1024; ls = 64;|Ce| = |Cp|; l =
100 or 200)
THEOREM 2. When DSD-DSSS is used, the jamming probabil-
ity of a non-reactive jammer with the random (or sweep) strategy
is at most 1 − (cid:16)1 −
Reactive Jamming Attacks: A reactive jammer can detect the
sender’s transmission and perform real-time analysis of the trans-
mitted signal. It can further synchronize with the sender so that she
knows the precise chip layout of the transmitted message. How-
ever, as mentioned in Section 3, if a reactive jammer does not
know the spreading code for any given bit data, she cannot jam the
transmission based on real-time analysis. Nevertheless, the reactive
jammer only needs to guess the sender’s spreading code to jam the
communication. This increases the jamming probability compared
with simple non-reactive jamming attacks. Similar to non-reactive
jammer, the reactive jammer can also use static, random, or sweep
jamming strategies to jam the channel. We give the jamming prob-
ability for all three strategies in Theorem 3 below. (The proof is
omitted due to space limit.) Note that the jamming strategy no
longer has direct impact on the maximum jamming probability.
.
|Ce|(cid:17)ls
THEOREM 3. When DSD-DSSS is used, the jamming proba-
|Cp|(cid:17)lm
·
bility of reactive jamming attacks is at most 1 − (cid:16)1 − 1
(cid:16)1 − 1
Figure 3 shows the jamming probabilities of both non-reactive
and reactive jamming attacks, in which |Cp| = |Ce|, both ranging
from 1,000 to 7,000, the sizes of message body and random seed are
lm = 1, 024 bits and ls = 64 bits, respectively, and the length l of
each code is set to 100 or 200. Figure 3 shows that the reactive jam-
ming attacks have much more impact than non-reactive jamming
attacks due to the jammer’s ability to synchronize with the sender.
In all non-reactive jamming attacks, the jamming probabilities are
no more than 0.01. However, even when |Cp| = |Ce| = 7, 000,
the reactive jammer’s jamming probability is still 0.14. Figure 3
also shows that using Error Correction Code (ECC) can reduce the
jamming probability dramatically. Simply using an ECC that can
tolerate 1 bit error can lower the reactive jammer’s jamming prob-
ability from 0.14 to 0.009.
The above results demonstrate that DSD-DSSS is effective in de-
fending against jamming attacks, even when the jammer launches
sophisticated reactive jamming attacks.
4.4.2 DoS Attacks against Seed Disclosure
DSD-DSSS has good resistance against various jamming attacks.
However, an attacker may also inject bogus seeds or bogus mes-
sages, faking message transmissions from the sender. Indeed, this
is a problem common to all wireless communication systems. As
long as a communication channel is accessible to an attacker, she
can always inject fake messages. An authentication mechanism
(e.g., digital signature) is necessary to ﬁlter out such fake messages.
An attacker may go one step further to launch DoS attacks tar-
geting the seed disclosed at the end of each message. Speciﬁcally,
the attacker may inject bogus seeds by continuously drawing a code
from Ce, spreading a random bit, and transmitting it to receivers.
A receiver will see a continuous stream of possible seeds being
disclosed. Without any further protection, the receiver will have
to attempt the decoding of a message with all possible seeds. An
attacker may use multiple transmitters to inject multiple transmis-
sions of each bit in a seed. As a result, the receiver may have to
try the combinations of these options when decoding the messages.
In Section 5, we will present an enhanced scheme to better protect
seed disclosure against such DoS attacks in DSD-DSSS.
4.5 Performance Overheads
Computation Overhead and Delay: In terms of computation,
the sender needs to generate a random seed, generate a spreading
code sequence using a pseudo-random generator, and spread both
the seed and the message body. All these operations can be per-
formed efﬁciently and lead to negligible delay.
A receiver needs to synchronize with the sender’s chips, de-
spread and decode the seed, regenerate the spreading code sequence
for the message body, and despread the message body. With the ex-
ception of synchronization and recovery of the seed, all other oper-
ations can be efﬁciently performed. Synchronization and recovery
of seed are computationally expensive. A receiver should use all
codes in Ce to despread every l chips in the buffer. Compared with
traditional DSSS, this process is at least |Ce| times more expensive.
DSD-DSSS introduces more receiver side delay than traditional
DSSS, particularly because a receiver cannot start decoding a re-
ceived message until the seed is recovered. Assume a straightfor-
ward implementation on the receiver side. For a received message,
the time delay for the receiver to ﬁnd the seed is l(lm +1)|Ce|t, and
the time delay to further recover the seed is (ls − 1)|Ce|t, where
t is the time required to despread l chips. The sum of these two
delays constitute the majority of the receiver side delay. Note that
this process can be parallelized to reduce the receiver side delay.
Storage Overhead: DSD-DSSS requires a buffer to store the
chips of a potential incoming message. When a message is being
processed, a receiver has to buffer another message potentially be-
ing transmitted. Moreover, when there are multiple senders broad-
casting at the same time, a receiver needs to buffer for decoded
messages from all of them. Thus, in DSD-DSSS, a receiver needs
storage that is possibly tens of times of that required by traditional
DSSS. Nevertheless, considering the typical message size (e.g., a
few hundred bytes) and the low cost of memory today, such a stor-
age overhead is certainly affordable on a communication device.
Communication Overhead: DSD-DSSS adds a random seed at
the end of each broadcast message, resulting in more communica-
tion overhead than traditional DSSS. Nevertheless, compared with
the size of a typical message body (e.g., a few hundred bytes), the
size of a random seed (e.g., 8 bytes) is negligible. Thus, DSD-
DSSS introduces very light communication overhead.
5. EFFICIENT AND JAMMING-RESISTANT
SEED DISCLOSURE
In this section, we enhance the basic DSD-DSSS scheme by
developing a more effective protection of seed disclosure for the
DoS threat discussed in Section 4.4.2. This approach gives normal
receivers more advantages over jammers.