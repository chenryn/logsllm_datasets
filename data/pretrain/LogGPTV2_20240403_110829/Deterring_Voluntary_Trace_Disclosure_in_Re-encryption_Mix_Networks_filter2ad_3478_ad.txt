### A Trace-Deterring Mix Cascade

**Figure 2.** A Trace-Deterring Mix Cascade.

We describe a trace-deterring mix-cascade protocol built on Abe's scheme [1].

#### Initial Setup
In the initial setup, each mix server in the cascade commits to the bits of its collateral key. For every batch of input messages, the mix cascade operates in two stages: re-encryption and mixing, and decryption of the final outputs.

1. **Re-Encryption and Mixing:**
   - The mix cascade re-encrypts the ciphertext elements of the input batch.
   - It permutes them according to the TDM (Trace-Deterring Mix) protocol.
   - It proves the correct execution of the TDM protocol as discussed in Section 7.

2. **Decryption:**
   - All mix servers in the cascade collaborate to decrypt the output batch.
   - These decryptions are then forwarded to the receivers.

#### Formal Description of the Protocol

- Let \( m \) denote the number of servers in the cascade.
- Let \( y \) denote the public key of the mix network, used for encrypting and re-encrypting inputs.
- The corresponding decryption key \( x \) is shared among all mix servers, such that a quorum of servers can decrypt.
- Each mix server \( e \) has a secret collateral key \( s_e \), and \( y_e \) denotes the corresponding public key.
- The collateral key \( s_e \) can be the same as the server’s share of the key \( x \), but it need not be the same. Our scheme allows a mix server to use any secret key as a collateral key.

The use of collateral keys serves as a credible deterrent to individual mix servers' misbehavior.

#### Performance Enhancements

All the usual techniques commonly used to speed up the operation of re-encryption mix networks can also be applied to our trace-deterring mixnet. For example, mix servers may pre-compute the values \( (g^{\gamma_{i,j}}, y^{\gamma_{i,j}}) \) used to re-encrypt ciphertexts for all bits \( 0 \leq i < k \).

#### Protocol 4: TD Mix Cascade

1. **System Initialization:**
   - The mix servers jointly generate an ElGamal private/public key pair \( (x, y = g^x) \) using a threshold protocol [18].
   - The public key \( y \) is known to all servers.
   - The servers hold shares of the secret key \( x \), such that a quorum of servers can decrypt.
   - Each mix server \( e \) in the cascade generates a collateral public key \( y_e \) and commits to the corresponding secret key \( s_e \) of \( k \) bits with a sequence of commitments \( [a_i = g^{b_i h r_i}] \), where \( 1 \leq i \leq k \).

2. **Creation of an Input Batch:**
   - A user randomly draws a value \( \gamma_j \) from \( \mathbb{Z}_q \) and posts an encryption of her message \( M_j \) to the bulletin board:
     \[
     (G_{0,j}, M_{0,j}) = (g^{\gamma_j}, M_j y^{\gamma_j})
     \]
   - After collecting \( n \) messages on the bulletin board, the mix cascade starts to process the batch.

3. **Re-encryption and Mixing:**
   - In the \( l \)-th round of the cascade (for \( 0 \leq l < k \)), mix server \( e \) processes its inbound message batch \( [(G_{l m + e - 1, j}, M_{l m + e - 1, j})] \) by running:
     \[
     \text{TDM}(y, b_{l, e}, [(G_{l m + e - 1, j}, M_{l m + e - 1, j})])
     \]
     and proves correct execution of the TDM protocol as described in Section 7.
   - After the output batch \( [(G_{l m, j}, M_{l m, j})] \) is produced, mix server \( m \) sends the batch back to the head of the cascade if \( l < k \).

4. **Decryption:**
   - A quorum of mix servers jointly decrypt the final output batch and output the corresponding plaintexts.

#### Discussion of Threats

- We construct a mix cascade that interleaves mix servers from different organizations to prevent a dishonest mix server from unilaterally exposing the end-to-end correspondence of a message across all permutations without leaking any intermediate correspondences.
- A mix server cannot link an input message to its first permutation to its output from the server’s last permutation because the linkage of that message between any two permutations is interrupted by other mix servers’ permutations.
- However, if all mix servers in a cascade collude, they can provide this end-to-end correspondence to a third party.
- Our TD mix network deters global trace collusion because a conspiring mix server must reveal the output of the message under trace to its neighbor, which amounts to disclosing a secret bit. Therefore, the cost of such collusion is to reveal one’s secret collateral key to another party.

### Conclusion

We have presented a method to deter the voluntary selective disclosure of mix correspondences. This method improves upon previous efforts in three significant ways: trace disclosures become provable, the disclosure penalty is customizable, and the anonymity set is large. We introduce the notions of trace-deterring permutations, formalize the trace-deterring mixing protocol, and examine its deployment in a mix network.

### Acknowledgements

The authors would like to thank the anonymous reviewers for their comments. Dr. Wang is supported by the NSF grant IIS-0549313.

### References

[1] M. Abe. Universally verifiable MIX with verification work independent of the number of MIX servers. In Proceedings of EUROCRYPT 1998, pages 437–447. Springer-Verlag, LNCS 1403, 1998.

[2] M. Abe. Mix-networks on permutation networks. In Proceedings of ASIACRYPT 1999, pages 258–273. Springer-Verlag, LNCS 1716, 1999.

... (additional references follow)

Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19, 2021 at 02:52:05 UTC from IEEE Xplore. Restrictions apply.