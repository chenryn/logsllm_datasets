S
    ….        0
m
y
e
k
t
e
r
c
e
S
Figure 2. A Trace-Deterring mix cascade.
We describe a trace-deterring mix-cascade protocol built
on Abe’s scheme [1].
In an initial setup step, every mix
server on the cascade commits to the bits of its collateral
key. For every batch of input messages, the mix cascade
operates in two stages: 1) re-encryption and mixing; and 2)
decryption of the ﬁnal outputs. During the ﬁrst stage, the
mix cascade re-encrypts the ciphertext elements of the in-
put batch, permutes them according to the TDM protocol,
and proves correct execution of the TDM protocol as dis-
cussed in Section 7. In the decryption stage, all mixes in the
cascade collaborate to decrypt the output batch and forward
these decryptions to the receivers.
In the formal description of the protocol, given below,
we let m denote the number of servers in the cascade. Let
y denote the public key of the mix network (used to encrypt
and re-encrypt inputs). The corresponding decryption key
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:52:05 UTC from IEEE Xplore.  Restrictions apply. 
x is shared among all mix servers, such that a quorum of
servers can decrypt. In addition, we assume that each mix
server e has a secret collateral key se and we let ye denote
the corresponding public key. The collateral key se can be
the same as the server’s share of the key x, but it need not
be the same (recall that our scheme allows a mix server to
use any secret key as a collateral key).
to constitute a credible deterrent to individual mix servers’
misbehavior.
All the usual techniques commonly used to speed-up the
operation of re-encryption mix networks can also be used in
our trace-deterring mixnet. For example, mix servers may
pre-compute the values (gγi,j , yγi,j ) used to re-encrypt ci-
phertexts for all bits 0 ≤ i < k.
Protocol 4. TD mix cascade
System initialization. The mix servers jointly generate
an ElGamal private/public key pair (x, y = gx) using
a threshold protocol [18]. The public key y is known
to all servers. The servers also hold shares of the se-
cret key x, in such a way that a quorum of servers can
decrypt.
Every mix server e in the cascade then runs
KC (g, q, y) to generate a collateral public key ye and
commit to the corresponding secret key se of k bits
with a sequence of commitments [ai = gbihri], where
1 ≤ i ≤ k.
Creation of an input batch. A user randomly draws a
∗
q and posts an encryption of her message
R← Z
value γj
Mj to the bulletin board:
(G0,j, M0,j) = (gγj , Mjyγj )
After collecting n messages on the bulletin board, the
mix cascade starts to process the batch.
Re-encryption and mixing.
1. In the (cid:6)th round of the cascade (for 0 ≤ l < k),
mix server e processes its inbound message batch
[(G(cid:6)m+e−1,j, M(cid:6)m+e−1,j)] by running
TDM (y, b(cid:6),e, [(G(cid:6)m+e−1,j, M(cid:6)m+e−1,j)])
and proves correct execution of the protocol
TDM as described in Section 7.
2. After the output batch [(G(cid:6)m,j, M(cid:6)m,j)] is pro-
duced, mix server m sends the batch back to the
head of the cascade if (cid:6) < k.
Decryption. A quorum of mix servers jointly decrypt the
ﬁnal output batch and output the corresponding plain-
texts.
Discussion of threats. We construct a mix cascade in a
way which interleaves mix servers of different organiza-
tions. This prevents a dishonest mix server from unilater-
ally exposing the end-to-end correspondence of a message
across all the permutations it performed without leaking
out any correspondences in-between. Speciﬁcally, a mix
server cannot link an input message to its ﬁrst permutation
to its output from the server’s last permutation because the
linkage of that message between any of two permutations
it performs is interrupted by other mix servers’ permuta-
tions. However, if all mix servers of a cascade collude, they
can offer this end-to-end correspondence to a third party.
Our TD mix network deters global trace collusion because
a conspiring mix server has to reveal the output of the mes-
sage under trace to its neighbor, amounting to disclosure of
a secret bit. Therefore, the cost of such collusion is to reveal
one’s secret collateral key to another party.
9 Conclusion
We have presented a deterrent to the voluntary selective
disclosure of mix correspondences. This method improves
upon previous efforts in three signiﬁcant ways: trace disclo-
sures become provable, the disclosure penalty is customiz-
able, and the anonymity set is large. We introduce the no-
tions of trace-deterring permutations, formalize the trace-
deterring mixing protocol and examine its deployment in a
mix network.
Acknowledgements
The authors would like to thank the anonymous review-
ers for their comments. Dr. Wang is supported by the NSF
grant IIS-0549313.
References
Performance improvements. To lower the computational
cost, a TD-mix cascade need not necessarily mix its inputs
exactly as many times as there are bits in the collateral keys
of the mix servers. For every message batch, the cascade
may instead use only λ randomly chosen bits of the collat-
eral keys of mix servers. The value λ must be large enough
[1] M. Abe. Universally veriﬁable MIX with veriﬁcation work
independent of the number of MIX servers. In Proceedings
of EUROCRYPT 1998, pages 437–447. Springer-Verlag,
LNCS 1403, 1998.
[2] M. Abe. Mix-networks on permutation networks. In Pro-
ceedings of ASIACRYPT 1999, pages 258–273. Springer-
Verlag, LNCS 1716, 1999.
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:52:05 UTC from IEEE Xplore.  Restrictions apply. 
[20] J. Groth. A veriﬁable secret shufﬂe of homomorphic en-
cryptions. In Proceedings of the 6th International Workshop
on Theory and Practice in Public Key Cryptography, pages
145–160. Springer-Verlag, LNCS 2567, 2002.
[21] M. Jakobsson and A. Juels. An optimally robust hybrid mix
network. In Proceedings of Principles of Distributed Com-
puting 2001, pages 284–292. ACM Press, 2001.
[22] M. Jakobsson, A. Juels, and P. Q. Nguyen. Proprietary cer-
tiﬁcates. In Proceedings of the The Cryptographer’s Track
at the 2002 RSA Conference on Topics in Cryptology, pages
164–181. Springer-Verlag, LNCS 2271, 2002.
[23] M. Jakobsson, A. Juels, and R. Rivest. Making mix nets
robust for electronic voting by randomized partial checking.
In Proceedings of USENIX 2002, pages 339–353, 2002.
[24] D. Kesdogan, D. Agrawal, and S. Penz. Limits of anonymity
in open environments. In Proceedings of the 5th Informa-
tion Hiding Workshop, pages 53–69. Springer-Verlag, LNCS
2578, 2002.
[25] B. N. Levine, M. K. Reiter, C. Wang, and M. K. Wright.
Timing attacks in low-latency mix-based systems. In Pro-
ceedings of Financial Cryptography 2004, pages 251–265.
Springer-Verlag, LNCS 3110, 2004.
[26] A. Neff. A veriﬁable secret shufﬂe and its application to
e-voting.
In Proceedings of the 2002 ACM Conference
on Computer and Communication Security, pages 116–125.
ACM Press, 2001.
[27] A. Neff. Veriﬁable Mixing (Shufﬂing) of ElGamal Pairs.
Technical report, VOTEHERE, 2003.
[28] W. Ogata, K. Kurosawa, K. Sako, and K. Takatani. Fault
tolerant anonymous channel.
In Proceedings of Informa-
tion and Communications Security 1997, pages 440–444.
Springer-Verlag, LNCS 1334, 1997.
[29] C. Park, K. Itoh, and K. Kurosawa. All/nothing election
scheme and anonymous channel. In Proceedings of EURO-
CRYPT 1993, pages 248–259. Springer-Verlag, LNCS 765,
1993.
[30] T. P. Pedersen. Non-interactive and information-theoretic
secure veriﬁable secret sharing. In Proceedings of CRYPTO
’91, pages 129–140. Springer-Verlag, LNCS 576, 1992.
[31] M. Reiter and X. Wang. Fragile mixing.
In Proceedings
of the 11th ACM Conference on Computer and Communica-
tions Security, pages 227–235. ACM Press, 2004.
[32] K. Sako and J. Kilian. Receipt-free MIX-type voting scheme
- a practical solution to the implementation of a voting
booth. In Proceedings of EUROCRYPT 1995, pages 393–
403. Springer-Verlag, LNCS 921, 1995.
[33] A. D. Santis, G. D. Crescenzo, G. Persiano, and M. Yung.
In Proceedings of
On monotone formula closure of SZK.
the IEEE FOCS 1994, pages 454–465, 1994.
[3] A. Acquisti, R. Dingledine, and P. Syverson. On the eco-
nomics of anonymity. In Proceedings of Financial Cryptog-
raphy 2003, pages 84–102. Springer-Verlag, LNCS 2742,
2003.
[4] A. Boldyreva and M. Jakobsson. Theft-protected proprietary
certiﬁcates. In Proceedings of the 2002 Digital Rights Man-
agement Workshop, pages 208–220, 2002.
[5] J. Camenisch and M. Stadler. Proof systems for general
In Technical report
statements about discrete logarithms.
TR 260. Dept. of Computer Science, ETH Zurich, 1997.
[6] D. Chaum. Untraceable Electronic Mail, Return Addresses,
and Digital Pseudonyms. Communications of the ACM,
24(2):84–88, 1981.
[7] D. Chaum. E-voting: Secret-ballot receipts: True voter-
veriﬁable elections. 2(1):38–47, Jan./Feb. 2004.
[8] D. Chaum, J.-H. Evertse, J. van de Graaf, and R. Peralta.
Demonstrating possession of a discrete logarithm without
revealing it.
In Proceedings of CRYPTO ’86, pages 200–
212. Springer-Verlag, LNCS 263, 1987.
[9] D. Chaum and T. P. Pedersen. Wallet databases with ob-
In Proceedings of CRYPTO ’92, pages 89–105.
servers.
Springer-Verlag, LNCS 740, 1993.
[10] R. Cramer, I. Damg˚ard, and B. Schoenmakers. Proofs of
partial knowledge and simpliﬁed design of witness hiding
protocols. In Proceedings of CRYPTO 1994, pages 174–187.
Springer-Verlag, LNCS 893, 1994.
[11] G. Danezis and A. Serjantov. Statistical disclosure or in-
tersection attacks on anonymity systems.
In Proceedings
of the 6th Information Hiding Workshop, pages 293–308.
Springer-Verlag, LNCS 3200, 2004.
[12] Y. Desmedt and K. Kurosawa. How to break a practical
MIX and design a new one. In Proceedings of EUROCRYPT
2000, pages 557–572. Springer-Verlag, LNCS 1803, 2000.
[13] C. Dwork, J. Lotspiech, and M. Naor. Digital signets: self-
enforcing protection of digital information. In Proceedings
of the twenty-eighth annual ACM symposium on Theory of
computing, pages 489–498. ACM Press, 1996.
[14] E. W. Felten and M. A. Schneider. Timing attacks on web
privacy. In Proceedings of the 7th ACM Conference on Com-
puter and Communications Security, pages 25–32. ACM
Press, 2000.
[15] A. Fiat and A. Shamir. How to prove yourself: Practical so-
lutions to identiﬁcation and signature problems. In In Pro-
ceedings of CRYPTO ’86, pages 186–194. Springer-Verlag,
LNCS 263, 1987.
[16] A. Fujioka, T. Okamoto, and K. Ohta. A practical secret
voting scheme for large scale elections. In Proceedings of
AUSCRYPT 1992, pages 244–251. Springer-Verlag, LNCS
718, 1992.
[17] J. Furukawa and K. Sako. An efﬁcient scheme for proving a
shufﬂing. In Proceedings of CRYPTO 2001, pages 368–387.
Springer-Verlag, LNCS 2139, 2001.
[18] R. Gennaro, S. Jarecki, H. Krawczyk, and T. Rabin. Secure
distributed key generation for discrete-log based cryptosys-
tems.
In Proceedings of EUROCRYPT 1999, pages 295–
310. Springer-Verlag, LNCS 1592, 1999.
[19] P. Golle and M. Jakobsson. Reusable anonymous return
channels. In Proceedings of the ACM Workshop on Privacy
in the Electronic Society, pages 94–100. ACM Press, 2003.
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:52:05 UTC from IEEE Xplore.  Restrictions apply. 
A Circular Permutations
Proposition 4. Let (T0,T1,T∗) be a trace-deterring (TD)
partition as deﬁned in Section 5. If T0 = {Id}, then T1 ⊆ C,
where C denotes the subsets of permutations on n elements
that are circular.
Proof. Let π ∈ T1. We must show that π is a circular per-
mutation. The proof is by contradiction. Assume that π has
a cycle C of length α < n. Then Id(C) = π(C) = C and
therefore (T0,T1,T∗) cannot be a TD-partition.
Proposition 5. Let T denote the set of all permutations on
n elements and let C ⊂ T denote the subset of circular
permutations on n elements (see Deﬁnition 2). Let ν denote
−1 ◦
the shift permutation on n elements. We have C = {π
ν ◦ π | π ∈ T }.
The proof follows from the two following lemmas:
Lemma 6. For all π ∈ T , the permutation π ◦ ν ◦ π
circular permutation.
−1 is a
Proof. The proof is by contradiction. Let us assume that the
successive images of the input 1 by the permutation π ◦ ν ◦
−1 are not all different. Then there exist i, j ∈ {1, . . . , n}
π
such that i (cid:5)= j and
(π ◦ ν ◦ π
−1)(i)(1) = (π ◦ ν ◦ π
−1)(j)(1)
But (π◦ν◦π
−1)(i) = π◦(ν(i))◦π
−1 and so the equation
above can be rewritten as
−1.
−1.
−1(1).
−1(1)), which is
−1(1) = π ◦ (ν(j)) ◦ π
−1(1)) = (ν(j))(π
π ◦ (ν(i)) ◦ π
It follows that (ν(i))(π
a contradiction since ν is a circular permutation.
Lemma 7. Let σ ∈ C be a circular permutation. There
exists π ∈ T such that σ = π ◦ ν ◦ π
Proof. The proof is constructive. Let σ be a circular per-
mutation on n elements. For i ∈ {1, . . . , n}, let us deﬁne
π(i) = σ(i)(1). We must prove that π thus deﬁned is a
permutation and that σ = π ◦ ν ◦ π
We show ﬁrst that π is a permutation. Let i, j ∈
{1, . . . , n} such that i (cid:5)= j. Since σ is a circular permuta-
tion, we have σ(i)(1) (cid:5)= σ(j)(1), and therefore π(i) (cid:5)= π(j).
This shows that π is a bijection, and therefore a permutation
of the set {1, . . . , n}.
−1. Observe that for
i ∈ {1, . . . , n}, we have
σ ◦ π(i) = σ ◦ σ(i)(1) = σ(i+1)(1) = π(i + 1) = π ◦ ν(i)
and therefore σ ◦ π = π ◦ ν. It follows that σ = π ◦ ν ◦
−1.
π
Next, we show that σ = π ◦ ν ◦ π
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:52:05 UTC from IEEE Xplore.  Restrictions apply.