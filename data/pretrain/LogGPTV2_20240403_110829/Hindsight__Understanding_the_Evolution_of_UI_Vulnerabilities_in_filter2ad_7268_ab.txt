### 1. HTTPS Page Rendering and Mixed Content

When rendering an HTTPS page, the address bar's appearance in the presence of mixed content (e.g., images and JavaScript) can differ from its appearance when no mixed content is present. This section explores several scenarios related to this issue:

- **Mixed Content Image Resource**: Is a mixed-content image resource loaded?
- **Mixed Content JavaScript Script**: Is a mixed-content JavaScript script executed?
- **Self-Signed Certificate Warnings**: Is a webpage with a self-signed certificate rendered without warnings?
- **JavaScript Execution Before Warning Acceptance**: Is JavaScript code included in a self-signed website executed before the warning is accepted?

### 2. Potential Attacks

The presence of mixed content and self-signed certificates can lead to various security vulnerabilities, including:

- **Clickjacking and CSRF (Cross-Site Request Forgery)**
- **Phishing and Malware/Scam Delivery**
- **Man-in-the-Middle (MITM) Attacks**

### 3. Attack Building Blocks (ABBs)

In our work, we develop ABBs to identify and mitigate specific security issues:

- **Favicon Placement (ABB #20)**: Confusable placement of a favicon next to the SSL-lock.
- **Lack of Warnings for Mixed Content (ABBs #21–22)**: Absence of warnings for mixed content.
- **Lack of Warnings for Self-Signed Certificates (ABB #23)**: Absence of warnings for self-signed certificates.
- **iFrame Expansion (ABB #24)**: Whether an iFrame can expand its size past the dimensions defined by its parent frame.
- **Mixed-Content Rendering (ABBs #25–26)**: Whether a browser renders mixed-content images and JavaScript.
- **JavaScript Execution Before Warning (ABB #27)**: Whether JavaScript code on a self-signed page executes before the user accepts the certificate warning.

### 4. Automatic Vulnerabilities

During pilot experiments, we discovered that not all browsers behave as expected. Some browsers consistently hide their URL bars or prefer showing the page title over the URL. We developed additional tests to quantify whether a browser shows its URL and/or title bars by default and whether both are present or if one is given preference. These tests help us immediately identify browsers vulnerable to certain ABBs, such as those that hide the URL bar, which can be exploited to display a fake address bar with an arbitrary URL.

### 5. Data Collection

#### 5.1 Mobile Browsers Dataset

To obtain a comprehensive set of mobile browsers, we performed the following data collection and processing steps:

- **Collecting Browser Families**: Using Selenium, we searched for the keyword "browser" in the Google Play Store and recorded the results. We filtered out non-web browsers and categorized the remaining browsers into 13 ranks based on their number of installations.
- **Crawling Browser Versions**: To obtain older browser versions, we used third-party websites and alternative app markets, collecting a total of 4,612 individual APKs.
- **Filtering**: We removed duplicates, non-modern browsers, and APKs that failed installation or crashed on launch. We also filtered out APKs that Hindsight could not evaluate due to splash screen bypass issues or unrecognizable address bars.

#### 5.2 Metadata Extraction

To evaluate each mobile browser against our ABBs and study the evolution of vulnerabilities over time, we extracted the following metadata:

- **App Usage Metadata**: Properties such as native-code, sdkVersion, and targetSdkVersion to determine the appropriate device for running the APK.
- **App Release Date Metadata**: The modification time of the .RSA or .DSA file under META-INF/ to approximate the release date of each APK.

### 6. Testing Framework and Methodology

Manually testing ABBs on thousands of browsers is impractical. Therefore, we designed and implemented an automated vulnerability testing framework called Hindsight. The framework includes the following steps:

- **SDK Assignment**: Determine a suitable version of Android capable of running the browser.
- **Installation and Splash-Screen Bypassing**: Install the APK on an Android device and bypass the splash screen.
- **ABB Testing**: Load a webpage, mimic user interactions, and analyze the final rendered output to identify vulnerabilities.
- **Results Evaluation**: Evaluate the test results and identify any vulnerabilities.

### 7. Conclusion

Our work aims to identify and mitigate security vulnerabilities in mobile browsers through the development and testing of ABBs. By automating the testing process, we can efficiently evaluate a large number of browsers and track the evolution of vulnerabilities over time.