approximately 10 ms when starting with a compressed CRV.10
Bandwidth requirements were also simulated for our model
listing strategy, CRLite, and Let’s Revoke. These simulations
used the same parameters as those described in Section
III.B.4, namely a certiﬁcate space of 100 million certiﬁcates,
a 2% revocation rate, and a 1% daily expiration and issuance
rate. These values serve as a representative point since
numerous variables affect the ﬁnal bandwidth requirement.
For each strategy, update simulations depend on the initial and
ﬁnal revocation percentages as well as the total number of
revocations. CRLite’s updates also depend on changes to the
size of the entire certiﬁcate space and the usage of the total
space allotted for future growth. For CRLite, we used a ﬁxed
certiﬁcate space at 100 million certiﬁcates and a 90% storage
utilization rate.
Since Let’s Revoke and RN Listing both use RNs, and
the optimal update method for Let’s Revoke at these low
revocation percentages is a list of new revocations, their daily
update costs are identical at 114 KB per day. The low daily
bandwidth is particularly signiﬁcant since these systems provide
full revocation coverage and require less daily bandwidth than
even CRLSets. CRLite’s daily delta requirements are higher at
408 KB per day, primarily due to the additional instructions
required to remove expired certiﬁcates from the cascading
Bloom ﬁlter.
B. Timeliness
Most revocation strategies utilize either revocation status
caching or regularly scheduled updates to ensure time and
bandwidth efﬁciency. Pull-based strategies, such as CRLs and
OCSP, typically cache revocation status information and assume
it is valid for up to 7 days. A 7-day period leaves a large window
of time in which an adversary can exploit a compromised
certiﬁcate, even after correctly revoking that certiﬁcate.
Push-based strategies generally use periodic updates. CRLset,
OneCRL, and CRLite all push daily updates to clients, which
drastically reduces an adversary’s window of opportunity
when compared to traditional pull-based methods. If deemed
necessary, push-based strategies can elect to generate even
more frequent updates.
Let’s Revoke is intended to be used as a push-based
strategy. Regular updates can be pushed out daily as
necessary, or as frequently as a CA or client desires. This
provides clients with both consistently updated revocation
information and the freedom to choose which trade-offs to
make between bandwidth costs and more reliable security.
Providing revocation information on demand for clients instead
of at regular intervals comes at increased costs to a CA that
provides this service.
C. Failure Model
As stated previously, pull-based strategies suffer from soft
failing revocation checks. This issue directly affects both CRLs
and OCSP. CRLSets, though they are a push-based model,
10We conducted timing measurements on a Dell Laptop with an Intel 8th-gen
Core i7 processor and 16GB of RAM.
10
also must adopt a soft failing approach by assuming that any
certiﬁcate not in its limited coverage space is not revoked.
Since Let’s Revoke covers the global certiﬁcate space and
uses a push-based model, clients using Let’s Revoke can assume
a hard failure model for certiﬁcates with an RID. Since all the
certiﬁcates in the working set have the timestamp of the last
successful revocation status check, the client can set a limit
on how long they rely on that status check before hard-failing
if the check is not refreshed. CRLite is the only other strategy
in our comparison that can adopt this hard failure model.
D. Privacy
Since a CRL covers all the certiﬁcates issued by a CA and
is acquired only upon request, third parties or eavesdroppers
learn only extremely coarse access patterns. In contrast, OCSP
does not preserve user privacy. OCSP requests correspond to
the certiﬁcates in use, revealing the users’ browsing habits to
third parties and eavesdroppers.
Both CRLSets and CRLite provide the same revocation
information to every user. Since this coverage does not depend
on any user action, it maintains the privacy of its users.
Similar to CRLs, CRVs cover a range of certiﬁcates.
Downloading a given CRV does not reveal which particular
certiﬁcate’s revocation status a client needs. However, should
a client decide to only track the CRVs it uses, the client
becomes vulnerable to potential denial of service (DoS) and
privacy issues. First, since the client downloads only CRVs
for certiﬁcates that it encounters, if the CRV is unavailable
when needed for any reason, malicious or coincidental, the
hard-failure policy results in a DoS until the CRV becomes
available. This concern is partially mitigated by the use of
CDNs for distributing CRVs. Second, by only tracking selected
CRVs, a passive adversary may be able to derive client browsing
patterns by correlating the CRVs a particular client downloads.
Thus, it remains for the client to choose between privacy
concerns and the efﬁciency gains of selective CRV Tracking.
E. Deployability
CRLs, OCSP, and CRLSets are already deployed. However,
modern browsers do not use CRLs and OCSP due to reasons
discussed previously.
CRLite can be incrementally deployed today with software
updates to clients. It requires an agent to aggregate all available
revocation information regularly to provide updated ﬁlters. This
daily aggregation process imposes signiﬁcant computational
requirements11 on the CRLite agent and adds similar costs to
the CRL and OSCP endpoints. There is little incentive for an
agent to incur both the network and computational costs to
perform this daily aggregation.
Similarly, Let’s Revoke is incrementally deployable now;
however, Let’s Revoke also incentivizes both CAs and clients by
lowering computational and networking resource consumption
11Aggregating only the revocation statuses of the 231 Million Let’s Encrypt
certiﬁcates every 24 hours would require processing more than 2,500 OCSP
requests each second. Further computing resources would be necessary to
handle the remaining 203 Million revocation statuses.
while providing the desired security. More precisely, CAs must
begin issuing RNs and tracking CRVs. Any CA could begin
doing so without negatively impacting their certiﬁcates or other
revocation processes. Clients that then implement the local CRV
store can assume a hard-failure strategy for any certiﬁcate with
a RN and rely on current revocation strategies for all other
certiﬁcates.
F. Auditability
Auditability is an important feature of any revocation
scheme that desires to prevent malicious or faulty revocation
status distribution. Most schemes are auditable; however, due
to the nature of CRLSets and OneCRL, these revocation
strategies cannot be audited for completeness, modiﬁcation, or
equivocation.
It is easy to audit Let’s Revoke for errors of omission and
equivocation. To detect omissions, clients apply a bitwise-OR
between the most recent CRV with any previous CRV. The
resulting CRV matches the most recent CRV if there are no
omissions. To detect equivocation, apply a bitwise-XOR to
any two clients’ CRVs with matching version numbers. The
resulting CRV contains all zeros if there is no equivocation.
V. VIABILITY SIMULATIONS
To further validate the performance of CRVs, we ran some
revocation simulations to show that CRVs work well for
current everyday revocation checking and scale both for mass
revocation events and the larger certiﬁcate spaces of the future.
A. Methodology
1) Data Collection: To ensure the accuracy of our
simulations, we acquired the relevant revocation data for the
global certiﬁcate space as of March 21, 2018. Similar to
previous revocation measurement studies [10], we collected
all certiﬁcates seen in previous scans and then ﬁltered out
certiﬁcates that have expired or were no longer trusted by
any standard root store. We obtained our initial data from
Censys.io [34], a search engine created to allow researchers
to access data from daily Internet scans. On March 21, 2018,
the number of certiﬁcates tagged by Censys.io as “Currently
Trusted” (non-expired, trusted by Apple’s, Microsoft’s, or
Mozilla NSS’s root store) was 88.9M.
First, we ﬁltered this dataset by removing duplicate,
expired,12 private,13 and invalid certiﬁcates.14 After ﬁltering,
84.1M certiﬁcates remained.
Second, we separated the certiﬁcates with CRL endpoints
(26.8M, 33.6%) from those with only OCSP endpoints (55.3M,
66.3%) [10], [11]. We identiﬁed 475 unrevokable certiﬁcates
that did not have any revocation endpoint15 and removed them
from the dataset as well.
12Certiﬁcates that expired by March 21st.
13Private certiﬁcates are those using an LDAP endpoint or are otherwise
inaccessible. Most of these certiﬁcates returned an unauthorized status code
on request.
14Each invalid certiﬁcate had at least one Zlint error [35].
15Of the 475 unrevokable certiﬁcates, all but 2 certiﬁcates were a root
certiﬁcate, an intermediate certiﬁcate, or an OCSP signing certiﬁcate.
11
s
u
t
a
t
S
d
o
o
G
n
o
i
t
a
c
o
v
e
R
d
e
n
a
e
l
C
s
e
t
a
c
ﬁ
i
t
r
e
C
d
e
k
o
v
e
R
s
u
t
a
t
S
n
o
i
t
a
c
o
v
e
R
n
w
o
n
k
n
U
s
u
t
a
t
S
n
o
i
t
a
c
o
v
e
R
From CRL
(OCSP) Let’s Encrypt
(OCSP) Symantec
(OCSP) DigiCert
(OCSP) Other
Total
26,772,989
53,196,388
2,483,288
1,157,956
542,641
84,153,262
25,983,705
52,946,338
2,446,508
1,149,840
541,807
83.068,198
789,284 (2.90%)
250,050 (0.47%)
36,780 (1.48%)
8,116 (0.70%)
807 (0.15%)
1,085,037 (1.29%)
0
0
0
0
27
27
TABLE III: The reported revocation status of certiﬁcates in
our data set.
Third, we scanned the remaining certiﬁcates to determine
their revocation status. Before scanning, we obtained permission
from each CA who issued over 1 million OCSP-only certiﬁcates
for a speciﬁc scan rate that would not place an undue burden
on their OCSP server. We sent 50 OCSP requests per second
to Let’s Encrypt’s endpoints and 10 requests per second to
Symantec’s and DigiCert’s endpoints. For all other OCSP-only
certiﬁcate endpoints, we limited our request rate to 10 requests
per second. In addition to rate-limiting, our software also
implemented exponential back-off for any response errors.
Table III contains a summary of the results of our scan.
The revoked certiﬁcates comprise about 1.29% (1.08M) of
the total certiﬁcates, with an average daily revocation rate
of 0.007%. The 1.29% rate is very similar to the rate for
revoked certiﬁcates in 2014 [10] before the discovery of
the Heartbleed vulnerability. We believe that the 1-2% rate
for revoked certiﬁcates is typical in the absence of a mass
revocation event.
2) Simulator: We created a simulator with parameters
controlling the number of CAs, the number of expiration dates
recorded by the CA, the number of certiﬁcates issued per
day, the percentage of revoked certiﬁcates per CA, and the
percentage of new revocations on a given day per CA. For
each simulation, every CA was assigned RNs spread uniformly
across all their possible active CRVs (equal to the number
of days until their last certiﬁcate expires) corresponding to
its number of non-expired certiﬁcates. We then provided the
revocation percentage for each CA and revoked randomly
selected RNs from the CA’s CRVs. We generated the resulting
CRVs and measured their size. Using the percentage of new
revocations, we created an average update (revoking that many
more RNs) and built the most efﬁcient update for that day,