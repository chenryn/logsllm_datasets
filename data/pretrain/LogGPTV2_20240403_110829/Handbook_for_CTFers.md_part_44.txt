• co_name: Name of the Code Block, usually a function or class name.
PyCodeObject is the in-memory representation of the result of compilation of a
namespace in Python (namespaces are blocks of code defined with independent
---
## Page 400
386
5 Reverse Engineering
variables, such as functions, classes, modules, etc.). As you can see from the source
code, PyCodeObject contains some important fields. For a PYC file, except the first
8 bytes of data (version number and modification time), what remains is a large
PyCodeObject. Execute the following command in Python to deserialize the read
binary data into a PyCodeObject.
import marsha1
code = marshal . 1oads (data)
Here, the code is the PyCodeObject of the PYC file. Since PYC obfuscation is
often found in the co_code field of the PyCodeObject, the data in the co_code field
needs to be extracted and de-obfuscated. The obfuscation here is similar to the
obfuscation of traditional assembly instructions, so the method of de-obfuscation
is essentially the same as that of traditional assembly instructions, so I won’t repeat it
here. Note that obfuscated PyCodeObject may also appear in fields
PyCodeObject, so you need to iteratively search all the iterable fields of the
ot
PyCodeObject. After PYC obfuscation, we can try to decompile it using
uncompyle2.
If it is difficult to obfuscate and only virtual machine instructions can be analyzed,
you need to disassemble the bytecode by yourself according to the bytecode table of
the corresponding version of Python to analyze it.
5.6.3 C++MFC
MFC is a C++ clas library developed by Microsoft to support the operation of some
Windows GUI programs. MFC wraps up the cumbersome message loop and mes-
sage handling processes of the Windows GUI, encapsulates the messages in C++
classes, and then distributes them to bound objects, which makes it easy for
developers to write programs quickly. Due to the multi-layered encapsulation of
the MFC, the reversers willfind that a large number of message handling functions
are not directly code-referenced, but are called indirectly, which is a big problem for
the reversers.
The structure of the message mapping table stored inside the MFC is
AFX_MSGMAP and AFX_MSGMAP_ENTRY, which is as follows.
struct AFX_HSGHAP {
const AFX_MSGMAP* (PASCAL* pfnGetBaseMap) (1 ;
const AFX_MSGMAP_ENTRY* 1pEntries :
struct AFX_MSGMAP_ENTRY (
UINT nNessage;
UINT nCode;
UINT nID;
UINT nLastID;
---
## Page 401
5.7 Modern Reverse Engineering Techniques
387
AFX_PHSG pfn;
UINT_PTR nS1g;
Once you have found the MessageMap, you can find all the message processing
functions, and once you have found the message processing functions, you can use
general reverse analysis techniques to analyze them. Two solutions for finding the
MessageMap are described below.
1. Using CWnds class and instance methods, dynamically get the MessageMap
information of the target window.
Sur33ep Aq suoouny Supueq aessu a no sasred Aipeoeuone loo Adsx au
the cursor to the corresponding windows and buttons. Looking at the source code of
xspy, we can see that the intemal principle of xspy is to inject a DLL into the
program and then hook the WndProc of the window in the injected DLL to get the
execution privileges of the program's UI thread. In the MFC code, a hard-coded
existing pattern is used to search for the address of CWnd: FromHandlePermanent,
and when it is found, the function can be used to convert the retrieved hWnd into an
instance of the CWnd class. Once it is converted to an instance of CWnd, you can
call various methods of CWnd, such as GetMessageMap, and so on.
2. use cross-reference relationships in IDA to find
Search for the CDialog string and find its cross-reference, the AFX_MSGMAP will
be found around there in IDA. You can also use IDA's constant searching function to
find AFX_MSGMAP_ENTRY by searching for the resource id of the button, but
because MFC programs are generally large and take a long time to complete the
analysis, the xspy tool s the beter choice for quick and targeted targeting.
5.7Modern Reverse Engineering Techniques
With the development of high-level languages and development toolchains, software
development is becoming more efficient and binary programs are becoming more
complex. For modem reverse engineering, purely manual analysis is significantly
less efficient, so some automated analysis methods are needed to assist.
This section introduces two common modem reverse engineering techniques 
symbolic execution and binary instrumentation  and provides relevant examples to
help readers grasp some basic operations of modern reverse engineering.
---
## Page 402
388
5  Reverse Engineering
5.7.1SymbolicExecution
5.7.1.1 Overview of Symbolic Execution
Symbolic Execution is a program analysis technique that analyzes a program to get
input leading a specific area of code to be executed. When a program is analyzed
using Symbolic Execution, it uses symbolic values as input, rather than the concrete
values normally used in executing programs. When the target code is reached, the
analyzer gets the corresponding path constraint and then uses the constraint solver to
get the specific value that will trigger the target code. In a real-world environment,
symbolic execution is widely used to automate the process of vulnerability mining
testing. In CTF, symbolic execution is well suited for solving a variety of reverse
-eone auua uonoaxa ooqs o Sua Aq Kidus rsouaeup suuusua
cally analyze and find the correct location for the program to execute, and then
solving for the required input. Example.
int z = y * 2;
int y = read_int () ;
{ au6x) uxd
if (z == 12)
else
(6u0.x) a01d
ndhno m tuerlord a 9 s! 1upeau pe 1ndu au uaum peq szApeue o Asea s! 1
right, while the symbolic execution engine will take y as an unknown number and
record the operations performed on this unknown number while the symbolic engine
is running, and finally, the precondition for the program to reach the correct location
of output is y*2== 12, and the input that satisfies the condition will be solved by this
expression.??
5.7.1.2angr
Some off-the-shelf tools are already available for symbolic execution, see Table 5.7.
Among them, angr has the widest scope (most supported architectures) and is
very suitable for solving reverse challenges in CTFs with uncommon architectures
-dopaaap s,stue 'oofond aounos-uado ue sy 'sjoo1 sou Aq pouoddns Kpood aue peq
ment is also very efficient, and although it is slow, it can be used appropriately to
Table 5.7 Some tools for symbolic execution
Tooling
Scope of application
ang
x86, x86-64, ARM, AARCH64, MIPS, MIPS64, PPC, PPC64
S2E
x86, x86-64, user-state and kermel-state programs in ARM architecture.
BE-PUM
x86
Manticore
x86, x86-64, ARMv7, EVM
---
## Page 403
5.7 Modern Reverse Engineering Techniques
389
signed _int64 _fastca11 main(_int64 al, char
signed _int64 result; // rax
char s;//[rsp+en][rbp-110h]
unsigned __int64 v5; // [rsp+1e8h][rbp=Bh]
v5 =_readfsqword(@x28u);
printf("Enter the password:
if ( 1fgets(&s, 255, stdin) )
，a2， a3）;
1f ( (unsigned int)sub_4006FD((_int64)&s))
return BLL;
f(_ipuonssed yrauuosu)snd
else
puts("Nice!");
result = 0LL;
return result;
Fig, 5.90 call "sab_4006FD" code
assist players in solving some of the CTF reverse challenges more quickly and
easily.
Note that the angr project is stillactive, and its API has changed rapidly over the
past few years, and many of the previous scripts may no longer work, so there is no
guarantee that the sample code in this book will work on the latest version of angr.
The installation of angr is simple and supports all major platforms (Windows,
Mac, Linux) with the pip install angr command. However, because angr has made
some changes to z3, it is recommended to install it in a virtual environment.
At present, the latest version of angr is mainly divided into five modules: the main 
analyzer angr, the constraint solver claripy, the binary file loader cle, the assembly
translator pyvex (which is used to translate binary code into a unified intermediate
language), and the architecture information database archinfo (which stores a lot of
targeted way).
architecture-related information and is used to deal with different architectures in a
The angr API is complex, and this section explains it using a number of chal-
lenges as examples so that the reader can better understand how to use it.
1. defcamp_r100
t peau o1 s! ojgot ureu o adus Kpongeou s! Jos weoud oo1adueoyap su
string from the input, and then enter the sub_4006FD function for verification, see
Fig. 5.90. In the sub_4006FD function, the author implemented a simple check logic
as shown in Fig. 5.91.
---
## Page 404
390
5 Reverse Engineering
signed _int64 _fastcal1 sub_4006FD(char
signed int i; //[rsp+14h][rbp-24h]
_QWORDv3[4];//[rsp+18h][rbp-20h]
v3[1] -“pGimos";
f_jwqun-[o]eA
v3[2]-"ewug1pt";
for（1=0;1<=11;++1)
if（*（char*)（v3[ix3]+2*（1/3））-a1[i]1=1）
return 1LL;
return OLL;
Fig, 5.91 *sub_4006FD" code
First, let's look at the official sample code given.
def nain () :
Import angr
p = angx. Project (*r10o*)
singr = p. factory-simulation_manager (p.factory fu11_init_state () )
simgr .exp1ore (find=0x400844, avoid=0x400855)
return simgz. found [o] -posix.dumps (0) .strip (b′\o′n′)
def test () :
assert main () startsvith (b′ Code_Talkers ′)
if __name__ "-'_main__':
print (main (11
Firstly angr.Project loads the program to be analyzed, then the script creates a
simulation_manager using p.factory.simulation_manager, which passes in a SimState
as the initial state. The state contains information about the program's registers, memory,
execution paths, and so on. The following three are typically used when creating.
• blank_state(**kwargs): Returns an uninitialized state, in which case you need to
set the entry address manually, as well as custom parameters,
*entry_state(**kwargs): Returms a state at the entry address of the program, used
by default.
•ful1_init_state(**kwargs): Similar to entry_state(**kwargs), but the call should
call the initialization function for each library before execution reaches the entry
point.
After setting the state, we need to get angr to execute to the target location as we
 , s  ndno o d   o s a s o eo  m
Ox400844, so we need to fill in the find argument with this address, and the engine
will retum the result when it reaches the address. The output of “Incorrect
---
## Page 405
5.7 Moderm Reverse Engineering Techniques
391
password!" with the address 0x400855 is obviously to be circumvented, so you need
to indicate this address in the avoid argument so that the symbolic execution engine
will ignore this path and not calculate it when it reaches this address. This way, we
can use the explore method to find a path to the target location. (Note: Both find and
avoid parameters can be passed as arrays, e.g. find[Oxaaa,0xbbb], avoid[Oxccc,
Oxddd]).
When the explore method returms, you can get the path found by the symbolic
execution engine through the found property, which is a table that stores all the paths
found. Of course, the found table can also be empty, which means that angr could not
challenges.
find a path to the destination address, and the script should be checked for
In the example code, we get a path to the destination using simgr.found[O], which
returns data of type SimState, representing a state of the program at this point. You
can get all the context of the program from this variable at this point, including
registers (e.g.  simgr.found[o].regs.rax),  memory  (e.g. simgr.found[O].mem
[0x400610].byte), and so on. However, we are most concemed with getting the
input from the program when it executes to this location. As can be seen in Fig. 5.90,
the program gets its user input from standard input, so naturally, we should get our
sp eq rep a suasadau apegus u XISOd ouL tam se indu prepueis tuou ndu!
program gets from the interface in the POSIX (Portable Operating System Interface)
specification, including environment variables, command line parameters, standard
inputs, and output data. The data from the standard input (POSIX specifies that the
file descriptor of the standard input is O) can be retrieved easily by using the posix.
dumps(O) method. Similarly, using posix.dumps(1), you can see the contents of the
standard output (POSIX specifies that the file descriptor of the standard output is 1),
and the program’s output should be just the string “°Enter the password:".
Once we understand the basic usage, we can make some improvements to the
sample code.
First, you can prevent angr from automatically loading and analyzing the depen-
dent library functions by adding auto_load_libs during the loading of the application
to be analyzed.
p = angr Pro]ect ("r10o", auto_load_1ibs=False)
If auto_load_libs is set to True (the default is True), then angr will automatically
load the dependent library and analyze it until the library function is called, which
will increase the analysis effort. If False, then the program will retum an
unconstrained symbolic value when the function is called. In this case, since the
program uses exclusively functions from libc, angr has been specifically optimized
for this purpose and does not need to load the libc library.
It is then possible to specify that the program should start with the main function,
thus avoiding the need for angr to repeatedly perform initialization operations in the
program that are time-consuming and have no effect on the core verification
algorithm of the challenge. Instead of using entry_state, we can then use blank_state,
---
## Page 406
392
5  Reverse Engineering
which allows us to specify the start address manually, and specify the address of the
main function in the argument 0x4007E8.
state = p .factory blank_state (addr = ox4007E8)
But how to implement functions such as printf and scanf without libraries? Angr
corresponding functions.
The printf function does not affect the analysis of the program, so you can just let
no se rue u suosung req pauadu-aud [anas ae asu aoq uman 1
can
see in angr/procedures,we let the function return [stubs’]
[°RetumUnconstrained’].
p .hook_symbol (′pxintf′, angr . SIM_PROCEDUREs [′stubs°]
['RetuznUnconstrained′] (l , replace=True)
In which replace=True represents a replacement for the previous Hook, because
 pe s so o os s e sds se
will automatically hook some of the symbols into the already implemented function.
In this program, the fgets function takes the input from the standard input and
stores it in the memory address pointed to by the rdi register, so it can be used in the
derive a class from angr.SimProcedure and rewrite the run method. We can deter-
mine that the length of the flag is 12 by verifying the number of cycles of the
function, so in our implementation of the function we can just put 12 bytes of input
into the memory address pointed to by rdi (the first argument).
class ny_fgets (angr .SimProcedure) : 
def run (self, α, num, f) :
simfd = self.state.posix.get_fd(o)
data, rea1_size = simfd.read_data (12)
self.state.memory.store (s, data)
p . hook_symbol (* fgets′ ,ay_fgeta (1 , replace=True)
retuzn 12
Our fgets function takes the simulated standard output, then manually reads in
12 characters from the standard input, puts the read data into the memory address
pointed to by the first argument, and then returns 12 (the number of characters read)
directly.
After setting up the two functions, you can start symbolic execution.
simgz = p. factory simulation_manager (state)
f = simgr exp1ore (find=0x400844, avoid=0x400855)
On the same computer, the official script example runs in 5.274 s, while the
optimized script runs in 1.641 s. As you can see, simply specifying the entry address
---
## Page 407
5.7 Modern Reverse Engineering Techniques
393
isoc99_scanf（"%d"，&v4[9]）;
printf（"Var[10]:",&v4[9]);
fflush(_bss_start);
isoc99_scanf("%d"，&v4[10]);
printf("Var[11]:"，&v4[10]);
fflush(_bss_start);
isoc99_scanf("%d"，&v4[11]);
printf（"Var[12]:",&v4[11]);
fflush(_bss_start);
isoc99_scanf("%d",
&v4[12]);
if（(unsigned
int8)CheckSolution(v4))
printf(
"Theflagis：%c%cxcxcxc%cxcxcxcxcxcxcxc\n"，
v4[0],
v4[1],
v4[2],
v4[3],
v4[4],
v4[5],
v4[6],
v4[7],
v4[8],
v4[9],
v4[10],
v4[11],
v4[12]);
Fig, 5.92 The challenge code
and rewriting the two library functions makes the execution of angr much faster. In
actual problem solving, if we optimize the script in a targeted way, we can get good
results.
2. baby-re (DEFCON 2016 quals)
In this challenge, the scanf function is called 12 times in a row to retrieve numbers
a ieu pe eue  ue u n aos ndu ps o wo
CheckSolution to examine the data, see Fig. 5.92.
As you can see from the control flow graph shown in Fig. 5.93, this function is
very large and cannot be analyzed using IDA's *F5° function.
Let's load the program and set the start address to the address where the main
function starts.
---
## Page 408
394
5 Reverse Engineering
Fig, 5.93 CheckSolution
function control flow graph
p = angr . Project (* . /baby-re', auto_load_libs=False)
state = p .factory .blank_state (addr = 0x402587)
Likewise, we don’t want the engine to waste time with printf and fflush, two
functions that do not help analyze the program’s critical algorithms, so let them just
return.
p .hook_symbol (′printf', angr . SIM_PROCEDUREs [′stubs°]
p . hook_symbol (′ fflush* , angz , SIM_PROCEDUREs [′ stubs°]
[′RetuznUnconstrained'](l , replace=True)
['ReturnUnconstrained′] (1l , replace=True)
The function scanf gets an integer from the standard input each time it uses “"%d°,
so let the scanf function put 4 bytes of data at the address pointed to by the
corresponding argument.
class my_scanf (angr . SimProcedure) :
def run (self, fmt, des) :
simfd = self.state,posix.get_fd(0)
data, real_size = simfd.read_data (4)
---
## Page 409
5.7 Modern Reverse Engineering Techniques
395
self .state.memory -store (des, data)
p . hook_symbol (′__isoc99_scanf ° , ay_scanf () , replace=True)
retuzn 1
Then run.
 = p . factory.simulation_manager (state)
print (s . found [o] -posix.dumps (0))
s . exp1ore (find=0x4028E9, avo1d=0x4 02941)
After a while, the program does output flags smoothly, but it takes longer, so we
ndus o azudo o n oi nuuo ues
Many additional settings in angr are not described in detail in the official
documentation in the angr/sim_options.py file, where LAZY_SOLVES is described
as *stops SimRun for checking the satisfiability of successor states", which means
that the current condition is not checked in real-time at runtime to see if it is possible
to successfully reach the target location. This cannot prevent some unsatisfied