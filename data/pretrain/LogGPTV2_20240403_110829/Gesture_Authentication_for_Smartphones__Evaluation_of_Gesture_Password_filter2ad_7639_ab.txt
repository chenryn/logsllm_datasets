### Discretization and Symbolic Representation

The discretization process converts a gesture into a series of angle-region symbols, which are then used to build n-gram Markov models. The full symbolic representation is as follows:

- **L1A3**
- **L1A2**
- **L0A3**

**Figure 1.** Overview of the discretization process from a gesture (step 1) to angle-region symbols for building n-gram Markov models (step 5) and the gesture reconstitution process for evaluating them (steps 6 and 7). This illustration uses a simple model with 2 length and 4 angle discretization regions.

### Handling Classification Errors

To account for potential classification errors, especially near the boundaries of discretization regions, we introduce a probability distribution. Let \( i \) and \( j \) represent the probabilities of the actual and adjacent length or angle region, respectively, with the constraint that \( i + j = 1 \). For each selected n-gram Markov model, we perform a grid search over values of \( b \) in the range of 1% to 10% for both angle and length, setting \( i \) and \( j \) to 0.5. This generates an additional 100 n-gram models. The final model is selected based on balanced improvements to the defined metrics.

### Calculating Partial Guessing Entropy

Using the best-performing n-gram Markov model(s), we calculate partial guessing entropy to evaluate the security of gesture passwords. Partial guessing entropy estimates [25] are useful because real-world attackers might only be interested in cracking a fraction of the entire password set. This technique estimates the average number of trials needed to successfully crack a fraction \( \alpha \) of the entire password set. We report these data in terms of "bits of information."

### Clustering-based Dictionary Attack

To evaluate the security of gesture passwords against guessing attacks, we introduce a novel dictionary attack based on clustering. The goal is to group gestures according to the similarity of their shape and select the most representative gestures within each class to support guessing attacks. The process involves the following steps:

1. **Calculate Distances:**
   - Compute distances between all gestures in the training set using a gesture distance metric (e.g., Protractor or DTW). This data is identical to the FAR calculation described in Section III-C.

2. **Cluster Gestures and Select Representative Examples:**
   - Apply the affinity propagation clustering algorithm [26] to these distances. This algorithm identifies representative examples (in our case, typical gestures) within the dataset. The results are a set of clusters containing similar gestures, each with a specific gesture at its geometric center. We argue that this central gesture will be the optimal representative gesture for the cluster.

3. **Rank Gestures and Create Dictionary:**
   - Order the clusters by size and create a dictionary of center gestures from the largest \( k \) clusters. Evaluate the fit of the clustering model by examining the number of clusters generated and the mean inter-cluster distance, defined as the mean distance between all gestures in each cluster. A larger number of clusters likely reflects a more diverse gesture set, and clusters with more distant gestures may contain more diverse shapes.

4. **Perform Dictionary Attack:**
   - Match all test set gestures against the dictionary. The crack rate is the proportion of test set gestures that match at least one gesture in the dictionary. Report crack rates for a continuum of distance thresholds and/or corresponding FRRs. This serves as the primary metric for evaluating the security of a set of gesture passwords. If different conditions, models, algorithms, or policies are being compared, the crack rates may also be tested for significant differences using contingency tests. Testing or other comparisons should take place at standardized FRR levels such as 2.5%, 5%, or 10%.

### First Study: Gesture Password Security

We designed, implemented, and executed an online study to capture a large set of password gestures. The goals were to:
1. Move beyond small-scale security analyses and remove biases.
2. Measure the security of gesture passwords using the proposed framework.
3. Gauge the effectiveness of the framework.
4. Acquire a large set of gesture samples to build blacklist policies.

#### Gesture Recognizer

During data capture, we used Protractor, configured as described in Section III-C. Protractor’s similarity measure is the inverse cosine distance, with larger scores indicating greater similarity. We set Protractor’s matching threshold to 1.0 to capture a greater proportion of raw gestures, ensuring participants entered meaningful gestures while minimally constraining their form and type.

#### User Study Design

The study was implemented as a website, and participants were recruited via Amazon Mechanical Turk (MTurk). Participants were required to complete the study on a mobile device. They created a pass-gesture and an attack-gesture, with incentives to create secure and memorable gestures. The interface was modeled on the pattern lock setup process on Android mobile phones.

#### Measures

For each participant, we recorded the following measures:
- All entered gestures at all phases of the study.
- Setup time, cancels, and failures.
- Recall rate and attempts.
- Recall time for successful recall.

#### Participants

In total, 2594 unique MTurk workers completed the study. Participants completed the study in a median of 47 seconds, corresponding to a median hourly wage of $19 USD.

#### Usability Results

- **Demographics:** Most participants identified as white, Asian, Hispanic, or black/African-American, and fell into the age groups of 18-24, 25-34, or 35-44. They were educated at post-graduate, college, or high school levels and worked in various fields.
- **Setup Cancels, Failures, and Time:** The setup time was 24.38 seconds, substantially below figures in the literature. This suggests users engaged appropriately and created gestures at reasonable speeds.
- **Recall Success Rate and Time:** The overall recall rate was 92.1%. Recall times were quick (5.11 seconds) compared to prior studies, but recall rates were lower, likely due to the attack gesture distracter task.

#### Security Results: Preprocessing and EER

To evaluate the security of the collected gesture passwords, we applied methods from the initial stage of our framework. We categorized the gestures and measured FRRs and FARs. The EER for DTW was 3.59% (AUROC 0.984) and for Protractor 4.14% (AUROC 0.974).

#### Security Results: Entropy Analysis

We created 270 different 2-gram models and selected three models for optimization. The first model achieved the overall best crack rate but showed low similarity to the original gestures. Two additional models with higher discretization regions combined high crack rates with improvements in similarity and model completeness. Based on a review, the model based on discretization into three length and ten angle regions (3x10) provides a well-balanced combination of high crack rate, close accuracy to the original user-chosen gestures, and high proportion of model completeness.