A1
L1
L0
2
A
A
0
A3
Length Angle Symbol
L1
A3
L1A3
L1
A2
L1A2
L0
A3
L0A3
Full symbolic representation
L1A3
L1A2
L0A3
Fig. 1. Overview of discretization process from a gesture (step 1) to angle-region symbols for building n-gram Markov models (step 5) and the gesture
reconstitution process for evaluating them (steps 6 and 7). Illustration uses a simple model with 2 length and 4 angle discretization regions.
of both the actual and adjacent length or angle region by i
and j respectively, where the sum of these values is always 1.
This reﬂects the fact that strokes near the discretization region
boundaries may be erroneously (or noisily) classiﬁed. For each
selected n-gram Markov model, we perform a grid search over
values of b in the range 1% to 10% for angle and length with
both i and j set to 0.5, thus generating an additional 100 n-
gram models. The ﬁnal model is selected based on balanced
improvements to the metrics deﬁned above.
Calculating partial guessing entropy: With the best per-
forming n-gram Markov model(s), we calculate partial guess-
ing entropy to evaluate the security of the gesture passwords.
Partial guessing entropy estimates [25] are useful because
real-world attackers might only be interested in cracking
just a fraction of an entire password set. This is a popular
technique for estimating the average number of trials needed
to successfully crack a fraction (α) of an entire password set.
We report these data in terms of “bits of information.”
E. Clustering-based Dictionary Attack
To evaluate the security of gesture passwords against guess-
ing attacks, we introduce a novel dictionary attack based on
clustering to group gestures according to the similarity of their
shape. The goal is to identify common gesture classes and,
within each class, select the most representative gestures to
support guessing attacks. We use a 5-fold process as follows:
Calculate distances: We calculate distances between all
gestures in the training set using a gesture distance metric
(e.g., Protractor or DTW). This data is identical to the FAR
calculation described in Section III-C.
Cluster gestures and select representative examples: We
apply the afﬁnity propagation clustering algorithm [26] to
these distances. The key advantage of afﬁnity propagation
over alternative approaches is that it is an exemplar-based
clustering algorithm that identiﬁes representative examples (in
our case, typical gestures) within the data-set. We believe this
can be useful for creating a dictionary of gesture passwords.
The results of this algorithm are a set of clusters containing
similar gestures. Each cluster has a speciﬁc gesture at its
geometric center. We argue this central gesture will be the
optimal representative gesture for the cluster it is derived from.
Rank gestures and create dictionary: We order the clus-
ters by size and create a dictionary of center gestures of the
largest k clusters. We evaluate the ﬁt of clustering model by
examining the number of clusters generated and the mean
inter-cluster distance, deﬁned as the mean distance between
all gestures in each cluster. A larger number of clusters
likely reﬂects a more diverse gesture set. Similarly, clusters
containing gestures that are more distant from one another
can be assumed to contain gestures with more diverse shapes
– center gestures may therefore be less representative of the
full cluster contents.
Perform dictionary attack: With the dictionary of k center
gestures, we match all test set gestures against the dictionary.
The crack rate is the proportion of test set gestures that match
at least one gesture in the dictionary. We report crack rates
for a continuum of distance thresholds and/or corresponding
FRRs. This serves as the primary metric for evaluating the
security of a set of gesture passwords. If different conditions,
models, algorithms or policies are being compared, the crack
rates may also be tested for signiﬁcant differences using
contingency tests. Testing or other comparisons should take
place at standardized FRR levels such as 2.5%, 5% or 10%,
or those used in relevant prior literature.
IV. FIRST STUDY: GESTURE PASSWORD SECURITY
We designed, implemented and executed an on-line study
to capture the largest set of password gestures to date. The
gestures were captured in a homogeneous study protocol and
outside traditional lab or university environments. The goals of
capturing this data set were to (1) move beyond the small scale
security analyses enabled by prior research and remove biases,
such as the experimenter effect or a lab based population bias,
from the data, (2) measure the security of gesture passwords
using the proposed framework, (3) gauge the effectiveness of
the framework, and (4) acquire a large set of gesture samples
to build blacklist policies. The ethical aspects of the study
were approved by the host university IRB.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 22,2021 at 04:12:34 UTC from IEEE Xplore.  Restrictions apply. 
253
A. Gesture Recognizer
During data capture, we used Protractor, conﬁgured as
described in Section III-C, as it
is mature and has been
deployed in a number of closely related studies [3], [10].
Protractor’s similarity measure is the inverse cosine distance:
when two gestures are compared, larger scores indicate greater
similarity. While data about speciﬁc thresholds used in prior
gesture authentication systems is scarce, one prior study with
Protractor uses a threshold of 2.0 [10]. Considering our goals,
we opted to set Protractor’s matching threshold to be more
permissive: 1.0. We explicitly used this permissive threshold
in order to capture a greater proportion of the raw gestures
that participants produce; as our study protocol used gesture
matching to ensure validity of the input gestures (see next sec-
tion), stricter thresholds that increase the difﬁculty of matching
gestures might serve to ﬁlter or restrict
the gestures that
participants were able to create during the study. A permissive
threshold ensured participants entered meaningful gestures
that resembled each other while minimally constraining the
form and type of those gestures. This best met the goals
of our study. We also note this is a typical approach in
empirical work to capture gestures – rather than constrain
examples to ﬁt a given algorithm during collection, gathered
examples are considered as valid gestures that can be studied to
develop optimal recognition algorithms in subsequent ofﬂine
analysis. In this way, the use of a permissive threshold allows
capture of a valid but minimally restricted set of gestures
that can support the broadest possible set of future analyses
– by, for example, examining the impact of increasingly strict
thresholds or applying different comparison algorithms.
B. User Study Design
The study was implemented as a website and participants
were recruited via Amazon Mechanical Turk (MTurk). The
MTurk listing summarized study activities, requested partici-
pants to complete it on a mobile device and provided both a
link and a QR code to the study site. We screened participants
who arrived at the study site as to whether they were on
a mobile device or not – we checked for a touchscreen
device with a portrait orientation, common criteria for browser-
based mobile device detection. Participants not satisfying these
criteria were reminded to complete the study on a mobile
device and again provided with the study link and QR code.
Participants accessing the study site on a mobile device were
ﬁrst presented with instructions requesting they create a pass-
gesture they would use to secure access to their mobile device.
Two incentives were provided to encourage the creation of
secure, memorable gestures. Firstly, we informed participants
they would also create an attack-gesture that would be used
to guess the gestures of other study participants; similarly,
the attack-gestures of other study participants would be used
to guess their own pass-gesture [1]. If these guesses were
successful, they would not receive compensation. Secondly,
we told participants they would be asked to recall their pass-
gesture up to one day after creating it.
(a) Create
(b) Match
(c) No match
Fig. 2. The ﬁrst study running on a Samsung Galaxy 8 Android mobile phone
in Google Chrome. Figures show limited input region (following Android
pattern lock) and pass-gesture creation after an example gesture has been
drawn (a) and pass-gesture conﬁrmation screens for gestures that match (b)
and fail to match (c) the example gesture (a).
Participants then moved on to a screen that asked basic
demographics (handedness and categories for age, educational
level, occupation and ethnicity). They then progressed to a
screen where they ﬁrst created and, on a subsequent screen,
conﬁrmed their pass-gestures. Conﬁrmation pass-gestures were
required to match creation pass-gestures, using the Protractor
recognizer conﬁgured as described in Section IV-A. A failure
to match these gestures led to both being deleted and the pass-
gesture set up process starting again. Participants were also
able to cancel the set up process at any stage, resulting in
a similar deletion of the templates and restart of the process.
Once gestures had been matched successfully, and participants
were satisﬁed, they tapped on a button to ﬁnalize their gestures
and move on in the study. This interface was closely modeled
on the pattern lock set up process on Android mobile phones
and can be seen in the screen shots in Figure 2. We note
the input region used was limited, following typical phone
pattern lock and PIN implementations. This helped ensure the
input region was accessible to users regardless of their physical
size, handedness and phone grip – the area is reachable by
the thumb of most users in a single handed grip, a practical
constraint for any realistic phone unlock system.
The next stage of the study involved a similar process
of gesture creation and then conﬁrmation for the attack-
gesture. Additionally, attack-gestures were matched against
pass-gesture templates; if matched, participants were informed
attack-gestures needed to differ from pass-gestures and the
attack-gesture creation process was restarted. The attack ges-
ture served as a distracter task to clear each participants short-
term memory. Finally, participants completed a recall task for
their pass-gesture. They had a maximum of ﬁve attempts to
match either their creation or conﬁrmation pass-gesture. The
limit of ﬁve was derived from the Android security system –
after ﬁve incorrect entries, users need wait 30 seconds before
making further attempts. After either a successful match or
ﬁve failures, the study terminated with a screen informing
participants of their correctness in the recall task, by thanking
them for them time and with a numerical code that enabled
them to register the study as complete on MTurk.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 22,2021 at 04:12:34 UTC from IEEE Xplore.  Restrictions apply. 
254
C. Measures
For each participant we recorded the following measures.
All measures relating to gesture creation and conﬁrmation
were logged for both pass- and attack-gestures; measures for
recall only relate to pass-gestures.
All gestures. We logged all entered gestures at all phases
of the study. Gestures were tagged with the study stage and
participant ID and recorded at
the native resolution (both
temporal and spatial) of the participant’s device. Additionally,
we tagged all ﬁnal or correct creation, conﬁrmation and recall
gestures. If a user failed to recall their pass-gesture within ﬁve
attempts, no correct recall gesture was recorded.
Setup time. We measured the time to create and conﬁrm
gestures from ﬁrst presentation of the gesture creation screen
through to when the conﬁrmation gesture was accepted by the
user via a explicit button press to move on with the study.
Setup cancels. We logged the number of times the gesture
set up process was intentionally canceled by a user wishing
to revise or change their gesture.
Setup failures. We stored the number of times that conﬁr-
mation gestures failed to match creation gestures.
Recall rate. We logged the number of participants who
failed to recall their pass-gesture within ﬁve attempts.
Recall attempts. We logged the number of recall failures
regardless of ﬁnal success or failure in the overall recall task.
These failures were due to either matching one of the attack-
gestures or failing to match any gesture.
Recall time. For those participants who successfully re-
called their pass-gestures, we logged the recall time from
the ﬁrst presentation of the gesture entry screen through to
successful entry of the gesture.
D. Participants
In total, 2619 unique Amazon Mechanical Turk workers
completed the study, each rewarded with 0.25 USD. On
manual inspection, we removed 25 participants from the set, as
they created essentially identical (and highly unique) gestures
in close temporal proximity – we assumed they were created
by a single individual with access to a large number of separate
MTurk accounts. The ﬁnal gesture set
thus contains data
from 2594 separate MTurk workers. Participants completed
the study, from initial gesture creation through attack gesture
creation to ﬁnal recall entry, in a median of 47 seconds,
corresponding to a median hourly wage of 19 USD.
E. Usability Results
1) Demographics: The majority of participants identiﬁed as
white (56.32%), Asian (18.47%), Hispanic (9.48%) or black
/ African-American (7.94%) and fell in the 18-24 (31.8%),
25-34 (46.72%) or 35-44 (15.42%) age groups. Most were
educated post-graduate (13.61%), college (49.46%) or high
school level (33.73%) and they worked in a wide range of
ﬁelds; the largest group were students (15.38%).
2) Setup Cancels, Failures and Time: Data for setup of
pass- and attack-gestures is shown in Table I. Due to positive
skews in the majority of data we report means, SDs and
medians for all measures. We note the 24.38 seconds setup
time is substantially below ﬁgures in the literature of gesture
passwords – for example Yang et al. [10] report a setup time of
69 seconds for their multi-ﬁnger gesture passwords. The most
likely explanation for this variation lies in the different partic-
ipant populations (MTurk workers vs lab study participants)
and our focus on single ﬁnger, single stroke gestures over the
more complex multi-ﬁnger or multi-stroke gestures studied
by Yang et al. [10]. Although shorter than prior free-form
password systems, these setup times remain representative of
online studies of other graphical authentication schemes – in a
recent crowd sourced study of pattern locks, mean setup times
for a standard system are reported to be 22.05 seconds [14],
broadly similar to data reported here. We interpret this to mean
that users both appropriately engaged with the gesture creation
task, and were also able to create gestures at reasonable speeds.
3) Recall Success Rate and Time: The overall recall rate
in the study was 92.1% (95% conﬁdence interval: 91.05%-
93.13%). From the 2594 participants, 205 failed to enter their
pass-gestures within ﬁve attempts. We divided participants
into two groups depending on their success in the recall task
and present their data in Table II. Once again, due to the
the simpler format of our gestures, recall times are quick
(5.11 seconds) compared to those reported in prior studies
of gesture passwords (16.49 seconds) [10]. However, recall
rates are low – for short-term recall, ﬁgures of 98.9% have
been previously reported [10]. Examining the data in detail,
its clear that the attack gesture task strongly impacted recall
rates – for participants who recalled their pass-gestures, 68%
of errors involved entering a match for their attack-gesture;
for participants who failed recall this ﬁgure was 60%. We
also note that, from the set of 2389 participants who correctly
recalled their gesture, the number of attempts in which an
entered gesture failed to match either pass- or attack-gestures
was 0.11 – this ﬁgure corresponds closely to the number of
errors (12.1%) recorded in an in-the-wild study of Android
pattern locks [27]. We argue this suggests that the somewhat
reduced recall rates recorded in this study are due to the attack
gesture distracter task rather than a reﬂection of fundamental
user performance during gesture authentication recall.
F. Security Results: Preprocessing and EER
To evaluate the security of the collected gesture passwords,
we apply methods from the initial stage of our framework (see
SETUP CANCELS, FAILURES AND TIMES IN THE FIRST STUDY (μ: MEAN,
σ: STANDARD DEVIATION, ˜μ: MEDIAN)
TABLE I
Pass-Gesture
Attack-Gesture
Measure (units)
Setup Cancels (#)
Conﬁrm Failures (#)
Setup Time (s)
μ
0.6
0.14
24.38
σ
2.58
0.52
30.13
˜μ
0
0
15.52
μ
0.14
0.77
17.82
σ
0.64
1.88
22.08
˜μ
0
0
11.48
Authorized licensed use limited to: Tsinghua University. Downloaded on March 22,2021 at 04:12:34 UTC from IEEE Xplore.  Restrictions apply. 
255
Section III-C). We ﬁrst studied and described the gestures.
To gain an understanding of the types of gesture produced,
we adapted an existing categorization of gesture passwords
from prior work featuring seven categories: digits, geometric
shapes, letters, math functions, math symbols, music symbols,
and special characters [11]. Two independent raters manually
examined the same random 10% of the gestures, categorizing
each according to this prior scheme and extending it where
necessary. They then discussed their ratings, agreed on four
additional categories – compound, cursive, iconic and other
– and applied this new scheme to a second random 10% of
the gestures. More details on these categories and the results
from this process are shown in Appendix A. The results are
broadly similar to those in a prior study [11], suggesting that
the gestures captured in this work are reasonable. In addition,
Appendix B shows the distribution of all raw points input in
creation gestures, binned into three by three grids with start
and ﬁnal points separated out. The data suggests that, as with
other forms of graphical password such as patterns [14], users
tend to start strokes from the top left of the available drawing
area and, to a lesser extent, ﬁnish them in the bottom right.
In contrast, points entered during the course of an ongoing
gesture were more central – less prevalent around all edges
(and particularly corners) of the drawing area.
We measured FRRs from each user’s creation, conﬁrmation
and, if present, recall gestures. We generated FAR data from
the full set of all users’ creation gestures. For Protractor, EERs
improved consistently with increasing re-sampling sizes, so
we opted to set the re-sampling size to 96 (the default for
Protractor’s reference implementation). For DTW, minimum
EERs were observed when gestures were re-sampled to 24
points, slightly larger than the 16 point optimal value reported
in prior work [11]. At these values, the EER for DTW is 3.59%
(AUROC 0.984 and corresponding to a DTW distance of 18.4)
and for Protractor 4.14% (AUROC 0.974 and corresponding
to an inverse cosine distance of 1.25). Figure 3, shows the
ROC curves contrasting these algorithms. We note the EER
value for Protractor is somewhat lower than reported in the
literature – Sherman et al. [3], for example, report 7.07% and
15.97% with Protractor for two different data sets and when
matching against two templates. Examining their data in detail
suggests the reduction we observe is due to a lower FRR,
rather than any change in FAR. This suggests the difference is
predominantly due to our decision to conduct the study with
a permissive match threshold (1.0) to gather a greater range
of user inputs. While no speciﬁc match threshold is reported
TABLE II
RECALL FAILURES DUE TO MATCHING ATTACK GESTURES (ATTACK
ENTRIES) OR NO GESTURE (NO MATCH ENTRIES) AND RECALL TIMES IN
THE FIRST STUDY (μ: MEAN, σ: STANDARD DEVIATION, ˜μ: MEDIAN)
Measure (units)
Attack entries (#)
No match entries (#)
Recall Time (s)
Successful Recall
μ
˜μ
0
0.23
0.11
0
5.11
σ
0.66
0.39
5.52
3.12
Unsuccessful Recall
˜μ
μ
3
3
2
2
σ
1.81
1.81
N/A
N/A
N/A
Fig. 3. Receiver Operating Characteristic (ROC) curves contrasting relative
FRR and FAR performance for Protractor and DTW recognizers. The Pro-
tactor EER is 4.14% (AUROC: 0.974) at a threshold value of 1.25 and the
DTW EER is 3.59% (AUROC: 0.984) at a threshold value of 18.4.
in [3], if we assume use of a stricter value, such as the 2.0
used in related work [10], a greater number of false rejections,
and correspondingly, a higher EER would be expected.
G. Security Results: Entropy Analysis
We then followed the entropy analysis processes in our
framework. We created 270 different 2-gram models and
applied selection criteria to choose a subset of models for
optimization, as described in Section III-D. We used DTW
to calculate these metrics due to this algorithm’s improved
performance over Protractor in terms of EERs, and set the
threshold t to the value corresponding to 10% FRR, one of
the standardized FRR levels introduced in our assessment
framework (see Section III-E). Appendix C includes results
in terms of our selection criteria for all models achieving a
crack rate of greater than 10%. We choose three models for
optimization – see Table III. The ﬁrst achieves the overall best
crack rate and is based on discretization into two length and
ten angular regions (“2x10”). However, gestures reconstituted
from this model show a relatively low similarity to the original
user-chosen gestures, suggesting some information in complex
strokes may be lost. Accordingly, we selected two additional
models with increasing numbers of either length (“3x10”)
or both length and angle (“4x12”) discretization regions that
combine high crack rates with improvements in similarity
and small reductions in model completeness. The outcomes
from the optimization process are also depicted in Table III.
Appendix D shows the optimized boundary region sizes and
distribution of start, center and ﬁnal strokes in these three
models. These ﬁgures show that initial strokes tend to involve
vertical and/or right movement (matching the gesture start
locations shown in Appendix B), while central strokes are
short (likely due to users drawing curves) and ﬁnal strokes
have a relatively even distribution. Based on a review of this
material, we believe that the model based on discretization
into three length and ten angle regions (3x10) provides a
well balanced combination of high crack rate, close accuracy
to the original user-chosen gestures, and high proportion of
Authorized licensed use limited to: Tsinghua University. Downloaded on March 22,2021 at 04:12:34 UTC from IEEE Xplore.  Restrictions apply. 
256