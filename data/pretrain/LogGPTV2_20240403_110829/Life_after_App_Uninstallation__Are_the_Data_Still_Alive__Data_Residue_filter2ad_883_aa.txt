title:Life after App Uninstallation: Are the Data Still Alive? Data Residue
Attacks on Android
author:Xiao Zhang and
Kailiang Ying and
Yousra Aafer and
Zhenshen Qiu and
Wenliang Du
Life after App Uninstallation: Are the Data Still
Alive? Data Residue Attacks on Android
Xiao Zhang
Syracuse University
PI:EMAIL
Kailiang Ying
Yousra Aafer
Syracuse University
Syracuse University
PI:EMAIL
PI:EMAIL
Zhenshen Qiu
Syracuse University
PI:EMAIL
Wenliang Du
Syracuse University
PI:EMAIL
Abstract—Uninstalling apps from mobile devices is among
the most common user practices on smartphones. It may sound
trivial, but the entire process involves multiple system components
coordinating to remove the data belonging to the uninstalled
app. Despite its frequency and complexity, little has been done
to understand the security risks in the app’s uninstallation
process. In this project, we have conducted the ﬁrst systematic
analysis of Android’s data cleanup mechanism during the app’s
uninstallation process. Our analysis reveals that data residues
are pervasive in the system after apps are uninstalled. For each
identiﬁed data residue instance, we have formulated hypotheses
and designed experiments to see whether it can be exploited to
compromise the system security. The results are surprising: we
have found 12 instances of vulnerabilities caused by data residues.
By exploiting them, adversaries can steal user’s online-account
credentials, access other app’s private data, escalate privileges,
eavesdrop on user’s keystrokes, etc. We call these attacks the data
residue attacks.
To evaluate the real-world impact of the attacks, we have
conducted an analysis on the top 100 apps in each of the
27 categories from GooglePlay. The result shows that a large
portion of the apps can be the target of the data residue attacks.
We have further evaluated the effectiveness of popular app
markets (GooglePlay, Amazon appstore and Samsung appstore)
in preventing our attacking apps from reaching their markets.
Moreover, we have studied the data residue attacks on 10 devices
from different vendors to see how vendor customization can affect
our attacks. Google has acknowledged all our ﬁndings, and is
working with us to get the problems ﬁxed.
I.
INTRODUCTION
The popularity of Android continues, with more than one
billion accumulated device activations and 81.5% market share
as of 2014, according to the report from IDC [8]. In the
same year, GooglePlay, the ofﬁcial Android market, reached
1.3 million applications (apps, in short) and more than 50
billion downloads [6], [13]. However, the real app engagement
is surprisingly low. A recent study by Localytics in 2014
indicates that 20% of apps are used only once [10]. In addition,
a report from iResearch on China’s smartphone market shows
that 85% of users delete downloaded apps from their devices
Permission to freely reproduce all or part of this paper for noncommercial
purposes is granted provided that copies bear this notice and the full citation
on the ﬁrst page. Reproduction for commercial purposes is strictly prohibited
without the prior written consent of the Internet Society, the ﬁrst-named author
(for reproduction of an entire paper only), and the author’s employer if the
paper was prepared within the scope of employment.
NDSS ’16, 21-24 February 2016, San Diego, CA, USA
Copyright 2016 Internet Society, ISBN 1-891562-41-X
http://dx.doi.org/10.14722/ndss.2016.23061
within one month, and after 5 months, only 5% of apps
remain [9]. The short lifespan of apps is caused by many
reasons, such as annoying notiﬁcations, buggy UI, complex
registration processes, etc. Privacy is also a major cause. For
example, the stand-alone Facebook Messenger app requests
a scary long list of permissions, and according to a poll by
AndroidCentral, which was conducted on more than 7,700
people, nearly one third of users uninstalled the app because
of privacy concerns [4].
These reasons lead to frequent app uninstallation. An
important security question is what will happen if an app
is uninstalled, but its data are not completely cleaned from
the system. This question may not be a major concern on
the traditional computing platforms, because when an app is
uninstalled, its data still belong to the users, and the security
parameters of those data do not change. In Android, when
an app is installed, except in some special situations, a new
user is created. The app will be executed using this new user’s
privileges. When an app is uninstalled, the user will be deleted.
Any data left behind by this app now become “orphans”,
because their owner no longer exists. They may not do any
harm if they stay as “orphans”. However, if they are inherited
or possessed by another app, i.e., another user, there will be
potential security consequences if the “orphan” knows a lot
about its previous owner or still possesses some privileges
of the previous owner. We call the problem caused by these
“orphans” the data residue problem.
The Data Residue Problem The data residue vulnerability
is particularly complicated due to the fact that the residue
might take several forms. During runtime, the system may
store various types of data on behalf of apps, ranging from
app permissions, operation history, user conﬁguration choices,
etc. These data can be ﬁles, databases, and in-memory data
structures. They may not be simply data; they can represent
privileges (such as capabilities), i.e., whoever possesses them
can gain additional power. For example, the URI placed on
Android Clipboard by an app gives recipients the capability to
access that app’s private data.
Android has made reasonable efforts to clean up the data
owned by an app during the uninstallation process. However,
given the sheer complexity of the interaction between apps
and the system, which leads to the wide scattering of app
data inside the system, it is very challenging to do a complete
job. Due to these reasons, data residues become very common
in Android. However, having data residues does not neces-
sarily lead to security problems. It remains unclear whether
Android’s existing defense mechanisms and system design are
robust enough to mitigate the security breach caused by data
residues.
Based on the nature of data residues, we came up with
several interesting hypotheses and questions: (1) Most data in
Android are protected by user ID, so what will happen if the
user ID belonging to the uninstalled app is given to a new app?
(2) What if the system intentionally or unintentionally gives a
data residue to another app? (3) What are potential problems
if a data residue is a capability? (4) What are the conditions
that can make it possible for another app to gain the ownership
of a data residue? Intrigued by these questions and motivated
by some encouraging preliminary discoveries, we launched a
systematic study of the data residue problem in Android.
Our methodology and ﬁndings Data residue can happen
in several places, but the residue instances inside Android’s
system services have the highest risk, because developers and
users are hardly aware of their existence, and these services are
privileged. We have analyzed 122 system services in Android
Open Source Project (AOSP) codebase 5.0.1. The analysis is
difﬁcult to be fully automated because it depends on signiﬁcant
amount of domain knowledge about each speciﬁc system
service. Although data residues caused by the lack of data
removal logic are relatively easy to detect, several identiﬁed
cases are caused by ﬂawed code logic, the detection of which
requires system-level code understanding and/or sophisticated
experiment design for exploitation. Our ultimate goal would be
developing an automatic detection system to eliminate all data
residue instances from the Android system. In this project,
however, we take the ﬁrst step towards understanding the
severity of this issue. Therefore, we manually inspected the
source code of Android system services, formulated hypothet-
ical attacks, and then designed experiments to verify whether
the attacks would work or not. Upon failed attempts, we further
examined the reasons behind. This entire process took six
person months to ﬁnish.
Our investigation results indicate that
the data residue
problem in Android is truly worrisome. From the 122 system
services, we have found 12 data residue instances that can
lead to attacks. The data in each instance serves different yet
security-critical purposes, empowering adversaries to subvert
Android’s built-in protections. For example, we found that
if an app uses Android’s credential management services,
such as AccountManager or Keystore, the credentials
for the user’s online accounts can become data residues
after the app is uninstalled. We designed an experiment to
show that a malicious app can “inherit” these credentials and
therefore completely take over the user’s online accounts.
Many apps use AccountManager. For example, myMail
is a popular email client app, with one million downloads.
It uses AccountManager to store the credentials for all
the email accounts it manages, including Microsoft Exchange,
Gmail, and Yahoo Mail. After this app is uninstalled, our
malicious app can take over all its credentials stored inside
AccountManager, and can successfully log into the user’s
Yahoo Mail, Gmail, and Microsoft Exchange accounts.
Our research also reveals that data residues can lead
to privilege escalation. For example, an app can leave a
maliciously crafted reference (a form of granted privilege)
on Android Clipboard to allow others to access its internal
resource. When the app is uninstalled, the reference becomes
useless, because the targeted resource is not there anymore.
However, the reference is still kept on Clipboard, and hence
becomes a data residue. When a victim app is installed, if
its protected resource matches with the reference crafted by
the uninstalled malicious app, any app on the device can
now use the data residue to access the protected resource
inside the victim app. In our experiments, we have successfully
gained the access to the user’s mailbox in Yahoo Mail, ﬁles
stored in OneDrive, and bank statements inside the ofﬁcial
Chase app. The credential residues from AccountManager
and URI residues from Clipboard are only two cases in our
discoveries. In this paper, we will present the details of all the
vulnerabilities and attacks discovered in our research.
To further understand the feasibility of our attacks in
the real world, we tried to upload our attack apps (without
causing real damage) to different Android markets, including
GooglePlay, Amazon and Samsung appstore. We would like to
see whether these markets have adequate defense mechanisms
to make our attacks infeasible. Our results show that most
of our attack apps, with some exceptions, can actually be
published in those stores,
indicating that our data residue
attacks have real impact. Moreover, we tried all our attacks on
10 devices from different vendors running different versions
of Android. The high success rate of these attacks indicates
that the device customization made by vendors does not make
their devices more resilient against our data residue attacks.
Google Response As millions of users are at risk because of
the vulnerabilities discovered in our study, we tried our best
to keep the issue conﬁdential. For each identiﬁed data residue
attack, we have submitted a detailed report to Google, along
with illustrative videos to demonstrate the attacks and dam-
ages. Google has acknowledged all our ﬁndings and labeled 7
of them as medium-priority vulnerabilities. In the meantime,
we are working closely with Google to ﬁx all issues. The status
update for each vulnerability, as well as demonstration videos
and analysis results on real apps, are available at the following
anonymous website [7].
Contributions The contribution of our work is three-fold:
• We have discovered a class of vulnerability,
i.e.,
data residue vulnerability, in the Android system. We
have successfully developed attacks to exploit these
vulnerabilities.
• We have conducted a systematic investigation of the
data residue vulnerability on all system services in
Android. Our methodology can be adopted by the
developers of the Android OS to improve its resilience
against the data residue attacks.
• We have also performed a thorough evaluation on the
potential damages of the data residue problem in the
real world.
Roadmap
The rest of this paper is organized as follows:
Section II explains the necessary background knowledge and
then formulates the data residue problem on Android. Sec-
tion III describes the methodology used in our systematic
investigation. Section IV shows the discovered data residue
vulnerabilities and the actual attacks. Section V systematically
evaluates the damage scope from three different perspectives.
2
Section VI discusses the fundamental causes and potential
defense approaches. Finally, Section VII describes the related
work and Section VIII makes conclusions.
II. PROBLEM FORMULATION
A. Background
The lifecycle of an app on Android devices can be divided
into three stages: installation, interaction and uninstallation.
This section provides a further explanation on each stage.
Installation For security reasons, Android isolates apps from
one another and from the system by assigning them a distinct
Linux User ID (UID) during the installation process. The
UID does not change for the duration of the app’s lifetime
on the device. The system maintains a list of UIDs in use,
and assigns the next available one to the newly installed app.
Device rebooting will force the system to reconstruct the UID
list, so the UIDs of the uninstalled apps will be recycled and
be possibly assigned to the newly installed apps. Android also
creates a private folder for each app in the internal storage, and
since Android 4.4, each app also gets an app-speciﬁc region on
the external storage. Android does not require any permission
for an app to access its own directories, but it does require
permissions for sensitive resources. Framework level resources
are granted via ﬁlling in the UID to permission map for this
app, while hardware related resources, like Internet, Bluetooth
and SDCard, are guarded by validating app’s Group ID (GID).
Granted permissions enables apps to conduct out-of-sandbox
communication.
Interaction Apps frequently interact with the system and
other apps during the runtime. Such interactions fulﬁll the
necessity of resource sharing and functional cooperation. Most
of the interactions are managed by Android’s privileged ser-
vices, which expose the low-level functions of the system
(both Android framework and kernel) to the high-level apps.
It should be noted that, even though most of the privileged
services belong to the system_server process, some are
provided by the privileged apps pre-installed in the system
partition. In this paper, unless otherwise speciﬁed, we use
system services to refer to the services of both types.
Interactions with system services come with a side effect:
the Android framework actively stores app data inside the
system in a variety of forms with or without app’s awareness.
For instance, the Clipboard service stores apps’ clip data
in memory, while the AccountManager service uses a
database to save user credentials. In these cases, the data stored
by the system services are still owned by and accessible to
the requesting app, which is fully aware of the whereabout
of the data. However,
in many situations, apps’ data are
stored in system services without apps’ awareness; these are
mainly for caching and management purposes. For example,
PrintService stores the failed printing jobs in a database.
Although it does that for the beneﬁt of apps, most apps do not
know that their private data are stored somewhere else.
The extensive interaction with the system services results
in app’s data (private or public) being scattered throughout the
system. This makes data cleanup extremely difﬁcult when an
app is being uninstalled. These data are actually well protected
by Android’s access control system when the app is still on
the device, but after it is uninstalled, it is not well understood
what can happen to these data if they are left on the device.
As shown by our research, Android made many mistakes in
dealing with data residues.
Uninstallation
Uninstallation requests, which can only
be initiated by the user of the device, are handled by the
PackageManager Service (PMS). PMS ﬁrst tries to kill the
target app’s process and notiﬁes all the parties that are still
communicating with this app via Android Binder’s “link to
death” facility. PMS then deletes all the app’s private folders,
including the one on the external storage. Files placed inside
the shared folder on the external storage will not be removed
(we do not consider these data as residues, because they are
kept by design). Finally, PMS recycles the UID belonging to
the uninstalled app, but does not reuse it until device rebooting.
Android has two main mechanisms to inform all parties in
the system about the app uninstallation. The ﬁrst mechanism
is broadcast. After an app is uninstalled, PMS sends out a
broadcast notiﬁcation to the entire system; any entity can
register for such a broadcast, and take actions upon receiving it.
The second mechanism is called PackageMonitor, which
monitors the status of the packages in the system. System
services can use it to trigger their reactions when an app’s
installation status is changed. Both mechanisms can be used
by system services to clean up data residue, but they are not
widely used, causing many data residues in the system.
B. The Data Residue Problem
it
Given the fact that apps usually have sensitive data stored
in scattered places inside the system,