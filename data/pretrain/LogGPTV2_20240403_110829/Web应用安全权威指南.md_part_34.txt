#### **攻击手段与影响**
首先使用以下 URL 浏览本书提供的虚拟机。
``` 代码无行号
http://example.jp/4a/data/
```
如下图所示，页面上列出了目录内的所有文件。
![{%}](Image00145.jpg)
**图 4-95 目录内的文件一览**
像上面这样，使用 URL
指定目录名时，页面上会罗列出目录中的所有文件，这一功能就叫作目录列表（Directory
Listing）。
点击页面上的 user.txt 链接，此时页面显示如下。
![{%}](Image00146.jpg)
**图 4-96 文件内容被显示**
如文件名所示，页面上显示了用户信息文件 user.txt 的内容。
虽然这种攻击的手法很简单，但 2004 年以前发生的 Web
网站泄漏用户个人信息的事件多数都是起因于这种攻击模式。
#### **安全隐患的产生原因**
导致内部文件被公开的原因为，内部文件被放在了公开目录中。当应用满足以下条件时，放置在公开目录下的文件就能够被外界访问。
-   文件被放置在公开目录中
-   有方法得知访问文件的 URL
-   没有对文件设置访问权限
其中，得知访问文件的 URL 的手段有如下几种。
-   目录列表功能被设为有效
-   文件名为日期、用户名或连续数值等能够被推测的值
-   user.dat、data.txt 等常见文件名
-   通过错误消息或其他安全隐患而得知文件名
-   被外部网站链接进而被搜索引擎收录
Apache 中可以设置 httpd.conf 或 .htaccess
来限制对文件的访问，但仅仅依靠这些设置来禁止访问文件还是存在风险的。因为设置可能一不注意就会被更改。过去发生的信息泄漏事件中，虽然很多在一开始时也都通过设置限制了文件访问，但是在迁移服务器时限制就有可能会被去除，从而就会导致信息泄露的发生。
#### **对策**
防范内部文件被公开的根本性对策为，不将内部文件放置在公开目录下。为了做到这一点，可以采用以下方法。
-   设计应用程序时，决定存放文件的安全场所
-   租用服务器时确认能够使用非公开的目录
另外，保险起见还可以将目录列表功能设为无效。其中，Apache 中可以如下编辑
httpd.conf 文件来进行设置。
``` 代码无行号
  Options -Indexes 其他选项
  其他设置
```
如果租用服务器不允许更改 httpd.conf，可以在公开目录下放置名为 .htaccess
的文件，并进行如下设置。但是，鉴于有些租用服务器厂商可能不允许使用
.htaccess 来更改设置，因此事先一定要对此加以确认。
``` 代码无行号
Options -Indexes
```
#### **参考：Apache 中隐藏特定文件的方法**
如之前所述，为了防止内部文件被公开，原则上应当彻底贯彻不将非公开文件放置在公开目录下的方针。但是，在既有
Web
网站中存在此问题时，可能就无法通过简单的移动文件的方法来解决问题。这种情况下，可以通过设置禁止外界访问特定文件，来姑且进行暂时性的处理。Apache
中 .htaccess 的设置方法如下所示。该示例中设置了禁止外界浏览扩展名为 txt
的文件。详情请参考 Apache 的说明文档。
> **代码清单 .htaccess**
``` 代码无行号
   deny from all
```
## **4.11 调用 OS 命令引起的安全隐患** {#text00000.html#nav_point_47}
Web 开发所使用的编程语言中，大多数都能够通过 Shell 执行
OS（操作系统）命令。通过 Shell 执行 OS
命令时，或者开发中用到的某个方法其内部利用了 Shell 时，就有可能出现 OS
命令被任意执行的情况。这种现象被称为 OS 命令注入，接下来本节就将详解 OS
命令注入这一安全隐患。
### **4.11.1 OS 命令注入** {#text00000.html#nav_point_48}
#### **概要**
如上所述，Web 应用开发使用的编程语言中大多都提供了通过 Shell 调用 OS
命令的功能，而如果调用 Shell 功能的方法不当，就可能导致意料之外的 OS
命令被执行。这被称为 OS 命令注入漏洞。Shell
是用来启动程序的命令行界面，比如 Windows 的 cmd.exe 和 Unix 的 sh、bash
等。OS 命令注入漏洞就是对 Shell 功能的恶意利用。
一旦 Web 应用中存在 OS
命令注入漏洞，外界的攻击者就能够使用各种各样的方式来发动攻击，危险性极高。以下为典型的攻击流程。
> 1\. 从外部下载专门用来攻击的软件
>
> 2\. 对下载的软件授予执行权限
>
> 3\. 从内部攻击 OS 漏洞以取得管理员权限（Local Exploit）
>
> 4\. 攻击者在 Web 服务器上为所欲为
攻击者能够在 Web 服务器上进行的恶意行为有以下几种。
-   浏览、篡改或删除 Web 服务器内的文件
-   对外发送邮件
-   攻击其他服务器（称为垫脚石）
可见 OS 命令注入漏洞的危害极大，因此在开发过程中一定要避免该漏洞的产生。
**OS 命令注入漏洞总览**
![{%}](Image00147.jpg)
#### **攻击手段与影响**
首先让我们来看一下针对 OS 命令注入漏洞的典型的攻击模式及其影响。
-   **调用 sendmail 命令发送邮件**
    这里我们以如图 4-97 所示的填写反馈信息的表单为例来说明 OS
    命令注入漏洞。首先来看一下正常的运行情况。
    ![{%}](Image00148.jpg)
    **图 4-97 反馈表单的页面跳转**
    输入表单的 HTML 代码如下。
    > **代码清单 /4b/4b-001.html**
    ``` 代码无行号
    请输入您的问题 
    邮箱地址 
    提问 
    ```
    接收页面的脚本如下。通过在 `system` 函数中调用 sendmail
    命令，将邮件发送至表单中所填入的邮箱地址 [59]{.注释编号}
    。邮件的信息固定为 template.txt 文件的内容。
    > **代码清单 /4b/4b-002.php**
    ``` 代码无行号
    提问已受理
    ```
    下面为邮件模板 template.txt 的示例。此处的 Subject
    消息头已根据邮件的规则进行了 MIME 编码。
    > **代码清单 /4b/template.txt**
    From: PI:EMAIL
    ``` 代码无行号
    Subject: =?UTF-8?B?5M+X44GR5LuM44GR44G+44GX44Gf?=
    Content-Type: text/plain; charset="UTF-8"
    Content-Transfer-Encoding: 8bit
    提问已受理
    ```
    收到以上表单发送的邮件后，邮件客户端的显示如下。
    ![{%}](Image00149.jpg)
    **图 4-98 收到邮件**
-   **OS 命令注入攻击与影响**
    下面我们来对这段脚本实施 OS
    命令注入攻击。在表单的邮箱地址输入框中填入以下内容。
    ``` 代码无行号
    PI:EMAIL;cat /etc/passwd
    ```
    点击发送按钮后，如图 4-99 所示，页面上显示了 /etc/passwd
    文件的内容。
    ![{%}](Image00150.jpg)
    **图 4-99 攻击成功**
    虽然在上面的攻击示例中，攻击者只是查看了文件内容，但实际上，通过 OS
    命令注入攻击，攻击者能够执行 Web
    应用的用户权限所能够执行的所有命令。比如删除或更改文件、下载外部文件、使用下载的恶意软件等。
    针对 OS 命令注入漏洞的典型的攻击方法为，下载攻击 OS
    漏洞的恶意代码，并通过内部攻击取得管理员权限。这样，攻击者就能够完全支配
    Web 服务器。
    -   **通过添加命令选项进行攻击**
        根据应用中调用的 OS
        命令，有时也能通过添加命令选项的方法来发动攻击。比如 Unix 的
        find 命令。find
        命令是通过指定条件来查找文件的命令，但是，在指定了 -exec
        选项后，find
        就能够针对查找结果的文件名执行命令。由此可见，仅通过添加 OS
        命令的选项，也可能会造成意料之外的 OS 命令被执行。
[59]{.注释编号下} 收件人通过 sendmail 命令的选项来指定。-i
选项表示禁止通过行首的点号结束邮件。
#### **安全隐患的产生原因**
内部调用 OS 命令的函数以及系统调用（System Call）中，多数都通过 Shell
来启动命令。Shell 是用来操作 OS 的命令行界面，如 Windows 中的
cmd.exe、Unix 系的 OS 中的 sh、bash、csh 等。通过 Shell
来启动命令，能够使管道命令（Pipe）或重定向等功能的使用变得更加便捷。
![{%}](Image00151.jpg)
**图 4-100 通过 Shell 调用 OS 命令**
然而，Shell 提供的便利功能却会成为 OS 命令注入漏洞产生的根源。Shell
提供了一次启动多个命令的语法，因此外界就可以在参数中做手脚，使得在原来的命令的基础上又有其他的命令被启动。这就是
OS 命令注入。
还有一种情况是，虽然开发者并没有想要调用 OS
命令，但却在无意中使用了内部会启动 Shell 的函数。典型的例子为 Perl 的
`open` 函数，详情会在本节的最后讲述。