sequences to ISPs for participation would be depeering,
but depeering a large ISP would have a greater impact
on overall network performance than blocking a single
website.
Discovery of Telex stations is a third issue. With wide
enough deployment, clients could pick HTTPS servers
at random. However, this behavior might divulge clients’
usage of Telex, because real users don’t actually visit
HTTPS sites randomly. A better approach would be to
opportunistically discover Telex stations by tagging ﬂows
during the course of the user’s normal browsing. When a
station is eventually discovered, it could provide a more
3 Previous Work
There is a rich literature on anonymous and censorship-
resistant communication, going back three decades [7].
One of the ﬁrst systems explicitly proposed for combating
wide-scale censorship was Infranet [13], where participat-
ing websites would discreetly provide censored content in
response to steganographic requests. Infranet’s designers
dismissed the use of TLS because, at the time, it was not
widely deployed and would be easily blocked. We observe
that this aspect of Internet use has substantially changed
since 2002. Unlike Infranet, Telex does not require the
cooperation of unblocked websites—a signiﬁcant imped-
iment to deployment—which participate in our system
only as oblivious cover destinations.
A variety of systems provide low-latency censorship
resistance through VPNs or encrypted tunnels to proxies.
These systems rely on servers at the edge of the network,
which censors constantly try to ﬁnd and block (via IP). By
far, the best studied of these systems is Tor [10], which
also attempts to make strong anonymity guarantees by
establishing a multi-hop encrypted tunnel. Traditionally,
users connect to Tor via a limited set of “entry nodes,”
which provide an obvious target for censors. In response,
Tor has implemented bridges [27], which are a variation
on Feamster et al.’s keyspace hopping [14], in which each
client is told only a small subset of addresses of available
proxies. While bridges provide an extra layer of protec-
tion, the arms race remains: Chinese censors now learn
and block a large fraction of bridge nodes [9], possibly by
using a Sybil attack [11] against the bridge address distri-
bution system. Like Telex, Tor adopts a pragmatic threat
model that emphasizes performance; it wraps connections
using TLS and does not strongly protect against trafﬁc
analysis and end-to-end timing attacks [22]. Unlike Tor,
we separate the problem of censorship resistance from
that of anonymous communication and concentrate on re-
sisting blocking; users who require increased anonymity
can use Telex as a gateway to the Tor network.
The most widely-used anticensorship tools today are
also among those that make the fewest security promises.
Pragmatic systems such as Dynaweb [12] and Ultra-
surf [30] that employ simple encrypted tunnels with large
numbers of entry points are popular, and, so far, have man-
aged to stay one step ahead of many censors. However,
we worry that such systems will not be able to withstand
continued research and development on the part of cen-
sors (e.g., Sybil attacks for proxy IP discovery). We aim
Telex Client
Randomly pick s,b
b(cid:107)H1(αs
b(cid:107)χ)
Output gs
b(cid:107)χ)
key ← H2(αs
Public:
Context:
g0,α0 = gr
χ
0,g1,α1 = gr
1
Normal TLS Client
Output a uniformly
random string
Telex Station
Private: r
Input β(cid:107)h
= H1(β r(cid:107)χ):
If h ?
key ← H2(β r(cid:107)χ)
tagged
else:
not tagged
Figure 2: Tag creation and detection — Telex intercepts TLS connections that contain a steganographic tag in the
ClientHello message’s nonce ﬁeld (normally a uniformly random string). The Telex client generates the tag using public
parameters (shown above), but it can only be recognized by using the private key r embedded in the Telex station.
to provide similar or better performance by adopting a
single-hop tunnel and locating proxies in the middle of
the network, where they are not susceptible to IP-based
blocking.
4 Tagging
In this section, we describe how we implement the invis-
ible tag for TLS connections, which only Telex stations
can recognize. We present an overview here, while the
details and a security argument appear in Appendix A.
Figure 2 depicts the tagging scheme.
Our tags must have two properties: they must be short,
and they must be indistinguishable from a uniformly ran-
dom string to anyone without the private key. Someone
with the private key should be able to examine a random-
looking value and efﬁciently decide whether the tag is
present; if so, a shared secret key is derived for use later
in the protocol.
The structure of the Telex tagging system is based on
Difﬁe-Hellman: there is a generator g of a group of prime
order. Telex has a private key r and publishes a pub-
lic key α = gr. The system uses two cryptographically
secure hash functions H1 and H2, each salted by the cur-
rent context string χ (see Section 5). To construct a tag,
the client picks a random private key s, and computes
gs and αs = grs. If (cid:107) denotes concatenation, the tag is
then gs(cid:107)H1(grs(cid:107)χ), and the derived shared secret key is
H2(grs(cid:107)χ).
Difﬁe-Hellman can be implemented in many different
groups, but in order to keep the tags both short and secure,
we must use elliptic curve groups. Then we must ensure
that, in whatever bit representation we use to transmit
group elements gs, they are indistinguishable from uni-
formly random strings of the same size. This turns out to
be quite tricky, for three reasons:
• First, it is easy to tell whether a given (x,y) is a point
on a (public) elliptic curve. Most random strings will
not appear to be such a point. To work around this,
we only transmit the x-coordinates of the elliptic
curve points.
• Second, it is the case that these x-coordinates are
taken modulo a prime p. Valid tags will never con-
tain an x-coordinate larger than p, so we must ensure
that random strings of the same length as p are ex-
tremely unlikely to represent a value larger than p.
To accomplish this, we select a value of p that is
only slightly less than a power of 2.
• Finally,
it turns out that for any given elliptic
curve, only about half of the numbers mod p are
x-coordinates of points on the curve. This is unde-
sirable, as no purported tag with an x-coordinate not
corresponding to a curve point can possibly be valid.
(Conversely, if a given client is observed using only
x-coordinates corresponding to curve points, it is
very likely using Telex.) To solve this, we use two
elliptic curves: the original curve and a related one
called the “twist”. These curves have the property
that every number mod p is the x-coordinate of a
point on either the original curve or the twist. We
will now need two generators: g0 for the original
curve, and g1 for the twist, along with the corre-
sponding public keys α0 = gr
1. Clients
pick one pair (gb,αb) uniformly at random when
constructing tags.
0 and α1 = gr
When Telex receives a candidate tag, it divides it into
two parts as β(cid:107)h, according to the ﬁxed lengths of group
elements and hashes. It also determines the current con-
Figure 3 provides an outline of the TLS handshake. We
describe each of these messages in detail below:
ClientHello contains a 32-byte nonce, a session identiﬁer
(0 if a session is not being resumed), and a list of sup-
ported cipher suites. The nonce consists of a 4-byte Unix
timestamp, followed by a 28-byte random value.
ServerHello contains a 32-byte nonce formed identically
to that in the ClientHello as well as the server’s choice of
one of the client’s listed cipher suites.
Certiﬁcate contains the X.509 certiﬁcate chain of the
server, and authenticates the server to the client.
ServerKeyExchange provides the parameters for the
Difﬁe-Hellman key exchange. These parameters include
a generator g, a large prime modulus pDH, a server pub-
lic key, and a signature. As per the Difﬁe-Hellman key
exchange, the server public key is generated by comput-
ing gspriv mod pDH, where spriv is a large random number
generated by the server. The signature consists of the
RSA signature (using the server’s certiﬁcate private key)
over the MD5 and SHA-1 hashes of the client and server
nonces, and previous Difﬁe-Hellman parameters.
ServerHelloDone is an empty record, used to update the
TLS state on the receiving (i.e., client) end.
ClientKeyExchange contains the client’s Difﬁe-Hellman
parameter (the client public key generated by gcpriv mod
pDH).
ChangeCipherSpec alerts the server that the client’s
records will now be encrypted using the agreed upon
shared secret. The client ﬁnishes its half of the handshake
protocol with an encrypted Finished message, which veri-
ﬁes the cipher spec change worked by encrypting a hash
of all previous handshake messages.
5.2 Telex handshake
The Telex handshake has two main goals: ﬁrst, the censor
should not be able to distinguish it from a normal TLS
handshake; second, it should position the Telex station as
a man-in-the-middle on the secure channel. We now de-
scribe how the Telex handshake deviates from a standard
TLS handshake.
Client setup
The client selects an uncensored HTTPS
server located outside the censor’s network (canonically,
https://NotBlocked.com) and resolves its hostname to ﬁnd
server_ip. This server may be completely oblivious to
the anticensorship system. The client refers to its database
of Telex stations’ public keys to select the appropriate key
P = (α0,α1) for this session. We leave the details of
selecting the server and public key for future work.
ClientHello message
The client generates a fresh
tag τ by applying the algorithm speciﬁed in Section 4,
using public key P and a context string composed
server_ip(cid:107)UNIX_timestamp(cid:107)TLS_session_id.
of
Figure 3: TLS Handshake — The client and server ex-
change messages to establish a shared master_secret, from
which they derive cipher and MAC keys. The handshake
ends with each side sending a Finished message, en-
crypted with the negotiated keys, that includes an integrity
check on the entire handshake. The ServerKeyExchange
message may be omitted, depending on the key exchange
method in use.
text string χ. If this is a valid tag, β will be gs
b and h
b (cid:107)χ) for some s and b. If this is not a valid
will be H1(grs
tag, β and h will both be random. Thus, Telex simply
= H1(β r(cid:107)χ). This will always be true
checks whether h ?
for valid tags, and will be true only with probability 2−(cid:96)H1
for invalid tags, where (cid:96)H1 is the bit length of the outputs
of H1. If it is true, Telex computes the shared secret key
as H2(β r(cid:107)χ).
5 Protocol
In this section, we brieﬂy describe the Transport Layer
Security (TLS) protocol [8] and then we explain our mod-
iﬁcations to it.
5.1 Overview of TLS
TLS provides a secure channel between a client and a
server, and consists of two sub-protocols: the handshake
protocol and the record protocol. The handshake protocol
provides a mechanism for establishing a secure channel
and its parameters, including shared secret generation
and authentication. The record protocol provides a se-
cure channel based on parameters established from the
handshake protocol.
During the TLS handshake, the client and server agree
on a cipher suite they will use to communicate, the server
authenticates itself to the client using asymmetric certiﬁ-
cates (such as RSA), and cryptographic parameters are
shared between the server and client by means of a key
exchange algorithm. While TLS supports several key
exchange algorithms, in this paper, we will focus on the
Difﬁe-Hellman key exchange.
ClientKeyExchangeChangeCipherSpec[Finished]ClientServerClientHelloServerHelloCertificateServerKeyExchangeServerHelloDoneChangeCipherSpec[Finished]This yields a 224-bit tag τ and a 128-bit shared secret key
ksh. The client initiates a TCP connection to server_ip
and starts the TLS handshake. As in normal TLS, the
client sends a ClientHello message, but, in place of the
224-bit random value, it sends τ.
(Brieﬂy, the tag construction ensures that the Telex
station can use its private key to efﬁciently recognize τ
as a valid tag and derive the shared secret key ksh, and
that, without the private key, the distribution of τ values
is indistinguishable from uniform; see Section 4.)
If the path from the client to server_ip passes through
a link that a Telex station is monitoring, the station ob-
serves the TCP handshake and ClientHello message. It
extracts the nonce and applies the tag detection algorithm
speciﬁed in Section 4 using the same context string and
its private key. If the nonce is a genuine tag created with
the correct key and context string, the Telex station learns
ksh and continues to monitor the handshake. Otherwise,
with overwhelming probability, it rejects the tag and stops
observing the connection.
Certiﬁcate validation
The server responds by send-
ing its X.509 certiﬁcate and, if necessary, key exchange
values. The client veriﬁes the certiﬁcate using the CA
certiﬁcates trusted by the user’s browser.
It addition-
ally checks the CA at the root of the certiﬁcate chain
against a whitelist of CAs trusted by the anticensorship
service. If the certiﬁcate is invalid or the root CA is not on
the whitelist, the client proceeds with the handshake but
aborts its Telex invocation by strictly following the TLS
speciﬁcation and sending an innocuous application-layer
request (e.g., GET / HTTP/1.1 for HTTPS).2
Key exchange At this point in the handshake, the client
participates in the key exchange to compute a master se-
cret shared with the server. We modify the key exchange
in order to “leak” the negotiated key to the Telex station.
Several key exchange algorithms are available. For exam-
ple, in RSA key exchange, the client generates a random
46-byte master key and encrypts it using the server’s pub-
lic key. Alternatively, the client and server can participate
in a Difﬁe-Hellman key exchange to derive the master
secret.
The Telex client, rather than generating its key ex-