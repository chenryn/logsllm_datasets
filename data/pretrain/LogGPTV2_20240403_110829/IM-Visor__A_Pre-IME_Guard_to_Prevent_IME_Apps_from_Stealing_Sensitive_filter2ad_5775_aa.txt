title:IM-Visor: A Pre-IME Guard to Prevent IME Apps from Stealing Sensitive
Keystrokes Using TrustZone
author:Chen Tian and
Yazhe Wang and
Peng Liu and
Qihui Zhou and
Chengyi Zhang and
Zhen Xu
2017 47th Annual IEEE/IFIP International Conference on Dependable Systems and Networks
IM-Visor: A Pre-IME Guard to Prevent IME Apps
from Stealing Sensitive Keystrokes Using TrustZone
Chen Tian†, Yazhe Wang†‡∗, Peng Liu§, Qihui Zhou†, Chengyi Zhang†‡, Zhen Xu†‡
†State Key Laboratory of Information Security, Institute of Information Engineering, Chinese Academy of Sciences
‡School of Cyber Security, University of Chinese Academy of Sciences
{tianchen, wangyazhe, zhouqihui, zhangchengyi, xuzhen}@iie.ac.cn
§College of Information Sciences and Technology, Pennsylvania State University, University Park
PI:EMAIL
Abstract—Third-party IME (Input Method Editor) apps are
often the preference means of interaction for Android users’
input. In this paper, we ﬁrst discuss the insecurity of IME apps,
including the Potentially Harmful Apps (PHAs) and malicious
IME apps, which may leak users’ sensitive keystrokes. The
current defense system, such as I-BOX, is vulnerable to the preﬁx-
substitution attack and the colluding attack due to the post-IME
nature. We provide a deeper understanding that all the designs
with the post-IME nature are subject to the preﬁx-substitution
and colluding attacks. To remedy the above post-IME system’s
ﬂaws, we propose a new idea, pre-IME, which guarantees that “Is
this touch event a sensitive keystroke?” analysis will always access
user touch events prior to the execution of any IME app code.
We designed an innovative TrustZone-based framework named
IM-Visor which has the pre-IME nature. Speciﬁcally, IM-Visor
creates the isolation environment named STIE as soon as a user
intends to type on a soft keyboard, then the STIE intercepts,
translates and analyzes the user’s touch input. If the input is
sensitive, the translation of keystrokes will be delivered to user
apps through a trusted path. Otherwise, IM-Visor replays non-
sensitive keystroke touch events for IME apps or replays non-
keystroke touch events for other apps. A prototype of IM-Visor
has been implemented and tested with several most popular
IMEs. The experimental results show that IM-Visor has small
runtime overheads.
I.
INTRODUCTION
In modern mobile devices, there is usually no hard key-
board available, and users are used to type on a soft keyboard
which is provided by an Input Method Editor (IME) app.
Unlike the Linux machine, a soft keyboard in Android is
implemented in a special way. A keystroke on touch screen is
ﬁrstly handled by hardware drivers, then goes to the Android
Input Method Framework (IMF) consisting of some system
services. After the IMF’s preprocessing, the keystroke is dis-
patched to an IME app. Then the IME app translates users’
keystrokes on the soft keyboard to text. Finally the text is
committed to a user app. Due to two main reasons, in the real
world, user app developers got strong incentives to use the IMF
and IMEs. First, from the view of a user app developer, IME
apps are really nice services, and it is easy for developers to
program in the IMF. Second, an IME app provides value added
features to a user app, such as cloud-based auto correcting,
word association and clipboard. As a result, a user app often
uses IME apps to access a keyboard.
∗The corresponding author.
Besides the default IME app, users often download third
party IME apps from app markets to gain better experience,
and third party IME apps have drawn a large audience. Surveys
show that the number of monthly active users in China has
exceeded 600 million [1]. With such a massive user base,
the potential data leakage caused by third-party IMEs is
threatening hundreds of millions of smart phone users’ privacy.
During a variety of user activities such as logging in, sending
emails or messages, users’ keystrokes potentially could be
leaked out through these IME apps. So we must ensure that
IME apps don’t log or leak users’ sensitive input.
The threats from third party IME apps mainly include two
aspects. The ﬁrst threat comes from the fact that some IME
apps are Potentially Harmful Apps (PHAs). Without users’
consent, they collect sensitive keystrokes and send them to an
ad network doing targeted advertising based on the keywords
in user inputs. Besides PHAs, there are also malicious IME
apps [22] which will collect sensitive information including
the user name, password and bank card numbers. The sensitive
information collected by malicious IME apps is closely related
to the users’ interests. Once abused by attackers, the users’
interests could be greatly harmed. There are several ways to
construct malicious IME apps, and repackaging is a common
way which has been widely used by attackers [35].
To detect and prevent sensitive keystroke leakage through
IME apps, a well-known defense system namely I-Box is
proposed [12]. It disables the network and rollbacks the IME
app when ﬁnding a risk of sensitive data leakage. Speciﬁcally,
it checkpoints the state of an IME app and analyzes users’
input from an IME app’s committing. If sensitive data is
discovered, it rolls back the IME app’s state to the previous
saved checkpoint. We call the “checkpoint&rollback” as a post-
IME defense, because the I-Box always check if a rollback is
needed after the IME has already processed keystrokes. And
the salient feature of the post-IME nature is that sensitive
keystrokes appear in the dynamically allocated memory of an
IME app at least once.
Although I-Box can prevent the sensitive data leakage in
most common cases, it is vulnerable to two serious attacks
due to the post-IME nature: (1) preﬁx-substitution attack;
(2) colluding attack. The authors of I-Box noticed the above
attacks, but they did not put forward effective defenses. Now
we provide a deeper understanding that all the designs with
the post-IME nature are subject to the preﬁx-substitution and
colluding attacks. First, in order to distinguish which part of
2158-3927/17 $31.00 © 2017 IEEE
DOI 10.1109/DSN.2017.12
145
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:02:20 UTC from IEEE Xplore.  Restrictions apply. 
the general user input stream is sensitive, a post-IME design
analyzes data (normally user-typed string) from an untrusted
IME app, which implies that the trusted computing base of
I-Box involves the output string of an untrusted IME app. But
an IME app could fool I-Box by replacing sensitive substring
with non-sensitive one. As a result, I-Box fails to recognize
the sensitive input and the rollback won’t be triggered. This is
called the “preﬁx-substitution attack”. Second, in a post-IME
design, as sensitive keystrokes come from an IME app and go
to a user app, they must appear in the dynamically allocated
memory of an IME app at least once. Meanwhile, the timepoint
when a post-IME defense starts the analysis of a sensitive
input follows the timepoint when an IME app commits text.
Consequently, untrusted IME apps (i.e., malicious or PHAs)
don’t commit text until sensitive keystrokes had been leaked
out to a colluding app. This is called the “colluding attack”.
In this paper, we propose the ﬁrst design that has the pre-
IME nature, and the prominent feature of a pre-IME defense
is that we recognize and isolate sensitive keystrokes before
IME apps access them. It guarantees that “Is this touch event
a sensitive keystroke?” analysis will always access user touch
events prior to the execution of any IME app code. We ﬁnd
that designs with the pre-IME nature have a clear security
advantage over post-IME designs when addressing the above
two attacks. For the “preﬁx-substitution attack”, we don’t trust
any output of an IME app, and ensure no sensitive keystroke
ﬂows into an IME app. So there is no chance for an IME app to
replace the preﬁx of sensitive string with a non-sensitive preﬁx.
For the “colluding attack”, sensitive keystrokes never appear
in the dynamically allocated memory of an IME app. So it is
really hard for an IME app to leak out sensitive keystrokes
to colluding apps. The pre-IME nature helps us defeat the
two serious attacks. In other words, “recognizing and isolating
sensitive keystrokes before the IMEs access them” makes pre-
IME designs more secure than post-IME designs. This is a
key new insight on how to prevent the third party IMEs from
leaking out sensitive keystrokes.
It is however very challenging to create a system with the
pre-IME nature due to the complicated data-ﬂows in Android
IMF. To achieve a pre-IME design, we must guarantee that “Is
this touch event a sensitive keystroke?” analysis will always
access user touch events prior to the execution of any IME app
code. First, in the existing modern mobile devices, an IME
app is the ﬁrst service to receive (sensitive or non-sensitive)
keystrokes from Android event subsystem, and translates them
to text. Distinct from a post-IME design that does a rollback
after the IMEs have translated keystrokes, in a pre-IME design,
how can we intercept and isolate sensitive keystrokes ahead
of IME translation? This is called the “Isolation ahead of
IME translation issue”. Second, after we succeed in isolating
those sensitive keystrokes, how can we build a trusted path
for user apps to access these sensitive keystrokes? We call it
the “Trusted path issue”. Finally, recalling the reason why a
user app developers got incentives to use the IMF and IMEs
in the ﬁrst paragraph, an IME app does provide convenience
and extra beneﬁts. In a pre-IME design, how can we retain
the value added feature for user apps? We call it the “Beneﬁts
retaining issue”.
We propose IM-Visor, an innovative design with the pre-
IME nature which has resolved the above challenges. For
the “Isolation ahead of IME translation issue”, as noticing
that keystrokes will be preprocessed by the Android event
subsystem (of the System Server) before IME apps receive
them, we think the event subsystem is an ideal place to
check whether a keystroke is sensitive or not. So we put
some hooks in the Android event subsystem and leverage
TrustZone to receive and analyze user keystrokes in a Secure
Typing Isolation Environment (STIE). For the “Trusted path
issue”, through adding a newly system service, we build an
extra data path from the secure world to user apps instead of
IME-bounded ones. For the “Beneﬁts retaining issue”, after
analyzing, we replay non-sensitive keystrokes to an IME app.
From the view of an IME app, there is no difference between
a replayed keystroke and an original keystroke. It can translate
the replayed keystroke to text and provide value added features
to user apps as usual.
IM-Visor is implemented on Exynos 4412 development
board with TrustZone enabled. Experiments on some popular
IME apps, it shows that IM-Visor can provide a secure input
environment to prevent sensitive keystroke leakage and has
small runtime overheads.
Our main contributions are summarized as follows.
• We propose a new idea “pre-IME”, which guarantees
that “Is this touch event a sensitive keystroke?” anal-
ysis will always access user touch events prior to the
execution of any IME app code.
• We provide a deeper understanding that all the designs
with the post-IME nature are subject to the preﬁx-
substitution and colluding attacks. Addressing the two
attacks, designs with the pre-IME nature have a clear
security advantage over post-IME designs. This is a
key new insight of this work.
• We build a concrete pre-IME defense named IM-
Visor which leverages TrustZone to isolate sensitive
keystrokes before the IMEs could access them. IM-
Visor resolves three main challenges: the “Isolation
ahead of translation issue”, the “Trusted path issue”
and the “Beneﬁts retaining issue”.
By noticing that sensitive keystrokes can generally
ﬂow both way (i.e., from IME apps to user apps and
from user apps to IME apps), we discover a new
sandbox bypassing vulnerability of I-Box. (see Section
III-A)
• We perform a thorough evaluation of IM-Visor. We
test a set of popular IME apps and the related user
apps, no sensitive keystroke leakage caused by IME
apps is found. The experimental results show that IM-
Visor has small runtime overheads.
•
II. BACKGROUND
A. Android IME, Input Method Framework (IMF) and Event
Subsystem
Android IMF arbitrates interaction between application-
s and the current
input method [4]. A user app can use
the standard TextView or its subclass to interact with an
IME app. InputMethodManagerService (IMMS) in the IM-
F is a global system service that manages the interaction
146
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:02:20 UTC from IEEE Xplore.  Restrictions apply. 
across the above processes. When a user touches on the
TextView of a user app, IMMS will start an IME app. What’s
more, some functions in IMMS such as showSoftInput,
hideCurrentInputLocked can control when a soft key-
board will be shown up or hidden. If a user types on the
soft keyboard, TouchInputMapper in the Android event
subsystem is the ﬁrst entity to handle user touch events.
After the process of TouchInputMapper, an input dispatch
thread in WindowManagerService (WMS) [15] is responsible
to dispatch keystrokes to the active IME app. Then the IME
can translate keystrokes to text and commits them to a user app
by BaseInputConnection (BIC) [14]. BIC is the connection be-
tween a user app and an IME app. BIC provides some function-
s such as getTextBeforeCursor, getSelectedText
for IME apps to revisit the data buffer in a user app. The
reason why these functions exist is that an IME app may need
to change some character before ﬁnally committing or it just
wants to verify the committing. In this paper, we put hooks
in some functions in the IMF and event subsystem so that the
“Is this touch event a sensitive keystroke?” analysis can be
invoked before the IMEs access keystrokes.
B. TrustZone
Processor State Isolation. As hardware-level security
isolation, TrustZone provides Secure Monitor Call (SMC)
instruction for the processor to enter secure world from normal
world. The SMC instruction is a privileged instruction which
is invoked in normal world. Program in secure state can
access resources across the system including I/O, memory, etc.
Normal program has a lower execution privilege.
I/O Device and Memory Isolation. A major feature of
TrustZone is that it can ﬂexibly conﬁgure the secure state of
I/O devices using software. This function involves TrustZone
Protection Controller (TZPC) and TrustZone Address Space
Controller (TZASC). TZASC allows secure and non-secure
area partition for the mobile device DRAM memory. In ex-
isting mobile devices, touch screen and display controller are
usually conﬁgured as non-secure.
Trustlets. An application in secure world is known as a
trustlet. It can access the normal world memory but not vice-
versa. Considering the TCB size of secure world, a trustlet is
usually designed to provide some higher secure operation such
as displaying trusted UI or encryption.
III. THREAT MODEL AND ASSUMPTIONS
A. Threat Model
As mentioned, in the Android IMF, due to extra beneﬁts,
user apps got incentives to use an IME app to access a soft
keyboard. However, an IME app is capable of logging and
uploading whatever a user types on a soft keyboard. So there
is a risk of sensitive keystroke leakage through third patry