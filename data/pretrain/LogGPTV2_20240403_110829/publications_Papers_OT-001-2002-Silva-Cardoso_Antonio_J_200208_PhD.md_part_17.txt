168
| p(O)˙ p(I)| | p(O)˙ p(I)|
similarity'(O,I)= *
| p(O)¨ p(I)| | p(I)|
The similarity’(O,I) function computes the geometric distance between the similarity
of the domains of concept O and concept I and the ratio of matched input properties from
the concept I.
As an example, let us illustrate the use of function SemS’(O, I) for the four cases –
a), b), c) and d) – that can occur when connecting an output O to an input I (see Figure
4-6). In our example, both input and output are conceptualized with concepts from the
same ontology, i.e., W (O) = W (I) = Time ontology (an example using difference
ontologies is given in the next section). The time ontology is not fully represented in
Figure 4-6; only the concepts that are employed in our example are shown.
ST (output) SO (input)
1,2 1,2,3,4
Time ontology b) Time ontology
Temporal-Entity Temporal-Entity
Time Time Time-Point {absolute_time} a) Time Time 2 Time-Point {absolute_time}
Interval Domain Interval Domain
1 1
{year, month, day} Date Time {hour, minute, second} {year, month, day} Date Time {hour, minute, second}
2 3 4
Calendar-Date Event Calendar-Date Event
{dayOftheWeek, monthOftheYear} c) {dayOftheWeek, monthOftheYear}
Scientific-Event {millisecond} Scientific-Event {millisecond}
d)
Figure 4-6 – Comparing concepts from the same ontology
169
Table 4-5 – The four examples illustrated in Figure 4-6.
Service Output Service Input
Template
Object
a) ST Date (1) fi SO Date (1)
1 1
b) ST Date (1) fi SO Time-Point (2)
1 2
c) ST Date (1) fi SO Calendar-Date (3)
1 3
d) ST Calendar-Date (2) fi SO Event (4)
2 4
The four cases that may occur are listed in Table 4-5 and are evaluated as follows:
• In case a), both O and I are associated with the same concept (Date). This is the
simplest case. Since the output of the ST matches perfectly the input of the SO
1 1
the similarity is evaluated to 1.
• In case b), the output O is associated with the concept Date, and the input I is
associated with the concept Time-Point. Since the concept Time-Point subsumes
the concept Date, the properties of the concept Date (the set {absolute_time, year,
month, day}) is a superset of the properties of the concept Time-Point (the set
{absolute_time}). Therefore, the output O of the ST can be connected to the
1
input I of the SO without any property of I being left unfulfilled; there is a direct
2
semantic correspondence and value mapping. All the properties of I exist in O. As
a result, the similarity is evaluated to 1.
• In case c), the output O is associated with the concept Date and the input I is
associated with the concept Calendar-Date. Since the concept Date subsumes
concept Calendar-Date, the properties of the concept Date (the set
{absolute_time, year, month, day}) is a subset of the properties of the concept
170
Calendar-Date (the set {dayOftheWeek, monthOftheYear, absolute_time, year,
month, day}). In this case, when the output O is connected to the input I some
properties of I are left unfulfilled (the properties dayOftheWeek and
monthOftheYear). To indicate this mismatch the similarity is set to the ratio of the
number of properties of O and the number of properties of I, which in this case is
|p(O)|/|p(I)| = 4/6 » 0.67.
• In the last case (d), the output O of the ST is associated with the concept
2
Calendar-Date and the input I of the SO is associated with the concept Event.
4
The concept Event has the set of properties {absolute_time, year, month, day,
hour, minute, second} and the concept Calendar-Date has the set of properties
{dayOftheWeek, monthOftheYear, absolute_time, year, month, day}. Since the
concepts do not have a parent/children relationship, the function similarity’(O,I) is
used to compute the geometric distance between the similarity of the domains of
concept Calendar-Date and concept Event and the percentage of input properties
that are fulfilled with an output property from O. The similarity is evaluated as
follows:
s = p(CalendarDate) = {dayOftheWeek, monthOftheYear, absolute_time, year,
1
month, day}
s = p(Event)={absolute_time, year,month, day, hour,minute, second}
2
s = p(CalendarDate)˙ p(Event) ={absolute_time, year, month, day}
3
s = p(CalendarDate)¨ p(Event) = {dayOftheWeek, monthOftheYear,
4
absolute_time,year,month, day,
hour,minute, second}
|s | |s | 4 4
similarity'(CalendarDate,Event) = 3 * 3 = * » 0.504
|s | |s | 9 7
4 2
171
The result of evaluating the function similarity’(Calendar-Date, Event) indicates a
low degree of integration between the concepts Calendar-Date and Event. On one hand,
the concepts show a low similarity according to the feature-contrast model (4/9). On the
other hand, only four out of the seven input properties are connected to output properties.
4.6.3.4 COMPARING OUTPUTS AND INPUTS FROM DISTINCT ONTOLOGIES
The problem of determining the similarity of concepts defined in different ontologies is
related to the work on multi-ontology information system integration. When the input and
output concepts to compare are from distinct ontologies, the evaluation of their similarity
is more complex. First, our approach for this problem uses the same rationale that we
have exploited earlier to compare input and output concepts from the same ontology
without any parent/child relationship. Additionally, we also take into account syntactic
similarities among concepts.
Since we compare input and output concept classes based on their properties, the
first step is to find the best mapping between output and input concept properties. This
objective is achieved using the function SemS’’ (O, I), which is very similar to function
P (Os, Is) previously defined as being able to find the best mapping between a set of
outputs and a set of inputs.
 Max(SemS''(O- o,I - i)+S(o,i)), O „ ˘ ,I „ ˘ ,o˛ O,i˛ I
SemS''(O,I) = 
 0, O =˘  I =˘
Each property o of output O is mapped with a property i of input I. A property o is
associated with a property i that maximizes the semantic similarity computed, using the
function S(o, i).
172
The function S(o, i) calculates the similarity between a property o and a property i.
Three distinct cases are considered: (1) the ontological properties involved are associated
with a primitive data type (see section 4.4.2), (2) the properties are associated with
concept classes, and (3) one property is associated with a primitive data type, while the
other is associated with a concept class. The function S(o, i) is shown below.
S(o,i) =
3 SemDS(d(o),d(i))*SynS(n(o),n(i))*SemRS(r(o),r(i)), o and i are primitive types
 SemDS(o,i), o and i are concept classes
f(o,i), otherwise
In the first case, the similarity of the properties is computed based on the geometric
distance of (a) the semantic similarity of their domains i(.e., concept classes), (b) the
syntactic similarity of their names, and (c) the semantic similarity of ther iranges.
a). The semantic similarity of the domains of two properties, d(o) and d(i), is
evaluated using function SemDS(od, id), which is based on Tversky’s model.
| p(od)˙ p(id)|
SemDS(od,id)=
| p(od)¨ p(id)|
When calculating the intersection of sets p(od) and p(id), two elements intersect if
their syntactic similarity, using the q-grams methodology (see section 4.6.1), is greater
than a constant c (we are currently using c = 0.75).
b). The syntactic similarity of property names is calculated using the function
SynS(n , n ). This function uses q-grams to determine the similarity of two property
1 2
names.
173
c). The semantic similarity of the ranges of two properties, r(o) and r(i), is evaluated
using the function SemRS(r(o), r(i)) defined below.
 1, or =ir
1, or = integer,ir =string
 2/3, or = long,ir =integer
SemRS(or,ir) = 
 1/3, or = double,ir =integer
 1, or = integer,ir = long
 0, otherwise
The function SemRS(or, ir) indicates the validity and the integration degree that is
obtained when an output with a primitive data type dt is connected to a particular input
a
with a primitive data type dt . This function is automatically created based on the
b
capabilities of the WfMS where the e-workflow being constructed will be enacted. A
workflow system that has the competence of making data type conversions (i.e.,
converting one data type into another) on the data exchanged among tasks can formally
define and describe this ability with the customization of functionS emRS.
For example, if a WfMS can map an output property of task a, with range integer, to
an input property of task b, of range long, this can be indicated by adding the following
entry to function SemRS:
1, or=integer and ir=long
The similarity is maximal, and it is set to 1, since the WfMS can map anin teger data
type to a long. When an association between two data types is not valid, the function
SemRS returns 0. In other situations, it is possible to specify a fuzzy degree of integration
174
by setting the similarity to a value greater than zero and less than one. For example, let us
consider the following entry:
1/3, or=double and ir=integer
In this case, the WfMS is able to perform a specific data type conversion (double to
integer), but the conversion is not preferred or recommended since a loss of information
may occur.
In the second case (2) of function S(o, i), since o and i are concept classes, we use the
function SemDS(o, i) to compute their similarity. The function SemDS evaluates the
similarity of two concept classes only in a shallow fashion. An alternative is to use a
deep-based similarity function (i.e., recursively compare subclasses). This can be
achieved by substituting the function SemDS(o, i) present in function S(o, i) with the
function SemS’’ (od, id)/|p(id)|.
In the third case (3), function f(o, i) is used to calculate the similarity among a
property associated with a basic data type and a property associated with a data class. For
the definition of this function we rely on the concept of dynamic attributes that has been
proposed in (Litwin and Abdellatif 1986) to specify the mappings between different
attributes. The idea is to define a function or a set of functions that indiate the possible
mappings between a property and a concept class. Examples of such mappings can be
found in (Kashyap and Sheth 1993).
Let us illustrate the use of functions SemS’’ (O, I) and S(o, i) with the example shown
in Figure 4-7.
175
ST (output) SO (input)
1,2,3,4,5
DateTimeontology Time ontology
DateTime Temporal-Entity
e)
{TheDate, TheTime}
5
TheTime TheDate a) T Ini tm ere val T Di om me ain Time-Point {absolute_time}
{gHour, gMinute, gSecond} {gYear, gMonth, gDay} 1
b) {year, month, day} Date Time {hour, minute, second}
TTyyppee PPrrooppeerrttyy NNaammee
2 3
SShhoorrtt {{ggHHoouurr,, ggMMiinnuuttee,, ggSSeeccoonndd,, ggYYeeaarr,, ggMMoonntthh,, ggDDaayy}} Calendar-Date Event
IInntteeggeerr {{mmoonntthh,, ddaayy,, hhoouurr,, mmiinnuuttee,, sseeccoonndd}} c) {dayOftheWeek, monthOftheYear}
LLoonngg {{aabbssoolluuttee__ttiimmee,, yyeeaarr}} 4
Scientific-Event {millisecond}
SSttrriinngg {{ddaayyOOfftthheeWWeeeekk,, mmoonntthhOOfftthheeYYeeaarr}}
d)
Figure 4-7 – Comparing proprieties referencing primitive data types
To makes the example easier to understand, the ST employed to find a SO only
specifies a set of outputs, with no inputs. Furthermore, we carry out the computation of
function SemS’’ (O, I) for only one of the outputs of the ST (the TheDate parameter) and
for only one of the SO inputs (the inputs are represented with the indexes 1 through 5 in
Figure 4-7). We consider that five SOs (SO , , , , ) are present in the registry during
1 2 3 4 and 5
the discovery procedure. The five cases are shown in Table 4-6.
176
Table 4-6 – The five examples illustrated inF igure 4-7.
Service Output Object Input
Template Template
a) ST TheDate fi SO Date
1
b) ST TheDate fi SO Calendar-Date
2
c) ST TheDate fi SO Event
3
d) ST TheDate fi SO Scientific-Event
4
e) ST TheDate fi SO Time-Point
5
The SO input is associated with the class concept Date. The SO input is associated
1 2
with the class concept Calendar-Date. The SO input is associated with the class concept
3
Event. Finally, the SO and SO inputs are associated with the concept class Scientific-
4 5
Event and Time-Point, respectively.
During the discovery process, the ST is compared with each SO individually.
Therefore, the function SemS’’ (O, I) is applied five times. In Figure 4-7, the computation
of the function between the output of a ST and the input of a SO is represented with a
1..5
letter (a, b, c, d, or e).
Let us start with the computation of function SemS’’ (O, I) to evaluate the degree of
integration of the concept class TheDate (from the DateTime ontology, i.e., the concept
W (DateTime).TheDate) and the concept class Calendar-Date (from the Time ontology,
i.e., the concept W (Time).Calendar-Date). Figure 4-8 shows the mappings carried out by
function SemS’’ (TheDate, Calendar-Date).
177
W (DateTime) W (Time)
2
TheDate Calendar-Date
gYear: short absolute_time: long
gMonth: short year: long
gDay: short month: integer
day: integer
dayOftheWeek: string
monthOftheYear: string
Figure 4-8 – Evaluating the degree of integration
For each connection shown in Figure 4-8, function S(o, i) is called on to evaluate the
degree of integration among two properties. Since in our example the output and input
properties of the concept classes O and I reference primitive data types, function S will
uniquely use the case (1) described previously. This corresponds to the use of the
following function:
3 SemDS(d(o),d(i))*SynS(n(o),n(i))*SemRS(r(o),r(i))
Let us trace the computation of S(o, i) with o = ”gDay” and i = ”day”. The function