title:Prime+Count: Novel Cross-world Covert Channels on ARM TrustZone
author:Haehyun Cho and
Penghui Zhang and
Donguk Kim and
Jinbum Park and
Choong-Hoon Lee and
Ziming Zhao and
Adam Doup&apos;e and
Gail-Joon Ahn
P+C: Novel Cross-world Covert Channels on ARM
Haehyun Cho
Arizona State University
PI:EMAIL
Jinbum Park
Samsung Research
TrustZone
Penghui Zhang
Arizona State University
PI:EMAIL
Choong-Hoon Lee
Samsung Research
Donguk Kim
Samsung Research
PI:EMAIL
Ziming Zhao
Rochester Institute of Technology
PI:EMAIL
PI:EMAIL
PI:EMAIL
Adam Doupé
Arizona State University
PI:EMAIL
Gail-Joon Ahn
Arizona State University
Samsung Research
PI:EMAIL
PI:EMAIL
ABSTRACT
The security of ARM TrustZone relies on the idea of splitting
system-on-chip hardware and software into two worlds, namely
normal world and secure world. In this paper, we report cross-
world covert channels, which exploit the world-shared cache in
the TrustZone architecture. We design a P+C technique
that only cares about how many cache sets or lines have been occu-
pied. The coarser-grained approach signicantly reduces the noise
introduced by the pseudo-random replacement policy and world
switching. Using our P+C technique, we build covert
channels in single-core and cross-core scenarios in the TrustZone
architecture. Our results demonstrate that P+C is an ef-
fective technique for enabling cross-world covert channels on ARM
TrustZone.
CCS CONCEPTS
• Security and privacy → Side-channel analysis and counter-
measures; Mobile platform security; Trusted computing;
KEYWORDS
Cache side-channel, Covert channels, ARM TrustZone
ACM Reference Format:
Haehyun Cho, Penghui Zhang, Donguk Kim, Jinbum Park, Choong-Hoon
Lee, Ziming Zhao, Adam Doupé, and Gail-Joon Ahn. 2018. P+C:
Novel Cross-world Covert Channels on ARM TrustZone. In 2018 Annual
Computer Security Applications Conference (ACSAC ’18), December 3–7, 2018,
San Juan, PR, USA. ACM, San Juan, Puerto Rico, USA, 12 pages. https:
//doi.org/10.1145/3274694.3274704
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for prot or commercial advantage and that copies bear this notice and the full citation
on the rst page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specic permission
and/or a fee. Request permissions from permissions@acm.org.
ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
© 2018 Copyright held by the owner/author(s). Publication rights licensed to Associa-
tion for Computing Machinery.
ACM ISBN 978-1-4503-6569-7/18/12...$15.00
https://doi.org/10.1145/3274694.3274704
441
1 INTRODUCTION
ARM Security Extensions, marketed as TrustZone, have been intro-
duced in ARMv6 and later prole architectures, including Cortex-A
(mobile) and Cortex-M (IoT) [2–4]. The idea of TrustZone is to
split the system-on-chip hardware and software into two security
states or worlds, namely normal world and secure world. Hardware
barriers are established to prevent normal world components from
accessing secure world resources.
Two legitimate channels exist at the hardware level that a nor-
mal world component and a secure world component can use to
communicate with each other. The rst channel is that either world
can put messages in the general registers when a world switching
is performed. The second channel is the secure world can directly
read and write to a region of physical memory that normal world
can also access.
Previous studies have shown that these legitimate channels are
vulnerable to an attacker who has the normal world kernel privi-
leges and keeps sending crafted arguments to probe the vulnera-
bilities of the secure world [18, 19, 26, 33]. There are two ways to
protect these channels from being abused:
(1) Prior work, SeCReT [18], has aimed at restricting the access to
the communication channels and secure world resources to normal
world components on an access control list (ACL). SeCReT ensures
only predened and legitimate normal world components can com-
municate and access secure world resources. To this end, SeCReT
authenticates a normal world component by verifying its code
and control integrity when it initiates communication with secure
world. Consequently, unauthenticated normal world components
cannot access the cross-world communication channels.
(2) It is possible to deploy a strong monitor, similar to a network
intrusion detection or deep packet inspection system, in legitimate
communication channels, including parameters passed by registers
and shared memory, between the normal and secure world to in-
spect all transmitted data and block illegal communication when it
is detected. Even though how to design such strong monitors is a
research problem itself, and no practical solutions exist to the best
of our knowledge, we assume that they could exist in the future.
ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
H. Cho et al.
In this paper, we are interested in building cross-world covert
channels in the TrustZone architecture that (1) enable unauthenti-
cated normal world and secure world components to communicate
even when solutions like SeCReT are deployed; (2) enable normal
world and secure world components to communicate even when
strong monitors that can inspect all transmitted data in legitimate
channels are deployed in the future. As a result, a secure world
component can always smuggle sensitive information that is not
supposed to leave the secure world to the normal world, such as
private keys, user passwords, etc. And, a normal world component
can send secret messages (e.g., command and control messages) to
secure world.
The emergence of downloadable Trusted Applications (TAs)
gives such covert channels even more practical use-scenarios [39],
where a malicious TA can steal sensitive information that does not
belong to it in the secure world and send to its counterpart in the
normal world, hence circumventing SeCReT and strong monitor.
We propose to build covert channels using a trade-o between
performance and cost in the TrustZone hardware, which are not
governed by any software solution built on top of TrustZone, such
as SeCReT or strong monitors. We notice that even though many
system-on-chip resources are separated in the TrustZone architec-
ture, there is only one copy of cache in the system that is shared
between the two worlds.
Even though it is easy to assume covert channels must exist given
that cache is shared between worlds, there is no comprehensive
study on the practicality and bandwidth of cross-world covert chan-
nels in the TrustZone architecture. In this paper, we identify several
challenges in building such cross-world covert channels: (1) the
pseudo-random replacement policy on ARM makes P+P
less reliable [21]; (2) the cross-world context switching also in-
troduces much noise. Our work conrms that P+P is
not reliable in the cross-world scenario; (3) low noise and ne-
grained cache line-level attacks, such as F+R [43] and
F+F [12], require sharing memory objects between the
Sender and the Receiver, which does not t in a practical attack
model.
To cope with these challenges, we need a novel cache attack
approach that does not require memory sharing and introduces
less noise in the cross-world scenario. In this paper, we leverage an
overlooked ARM Performance Monitor Unit (PMU) feature named
“L1/L2 cache rell events” and design a P+C technique
that only cares about how many cache sets or lines have been occu-
pied instead of determining which cache sets have been occupied
as in P+P. The coarser-grained approach signicantly
reduces the noise introduced by the pseudo-random replacement
policy and world switching. Even though some performance coun-
ters in PMU, such as cycle counter, have been used to carry out
and detect cache-based side-channel attacks in the ARM and Intel
architecture [10, 42], to the best of our knowledge it is novel to use
“L1/L2 cache rell events” to perform attacks.
We leverage the P+C technique to build covert chan-
nels in single-core and cross-core scenarios in the TrustZone ar-
chitecture. To evaluate the ecacy of the covert channels, we test
our implementations on two devices, one of which is a Samsung
Tizen TV with ARMv7 CPU and the other is a Hikey board with
ARMv8 CPU. The evaluation results show that the bandwidth could
be as high as 27 KB/s in the single-core scenario and 95 B/s in the
cross-core scenario.
2 BACKGROUND
2.1 ARM Architecture and TrustZone
Processor Modes. An ARM processor has up to 9 dierent modes
depending on if some optional extensions have been implemented.
The user (usr) mode has a privilege level 0 and is where user space
programs run. The supervisor (svc) mode has a privilege level 1
and is where most parts of kernel execute.
TrustZone and Processor States. TrustZone is a hardware secu-
rity extension of the ARM processor architecture, which includes
bus fabric and system peripherals. When TrustZone is implemented,
a processor has two security states or worlds, namely the secure
world (s) and the normal world (ns). The distinction between the
two states is orthogonal to the processor modes. The partitioning
of all the System on Chip (SoC)’s hardware and software into two
worlds may be physical and/or virtual. For instance, a processor
core is shared by the normal and secure world in a time-sliced
fashion. World switching is done in the monitor mode after calling
the secure monitor call (SMC) instruction in either world. The SMC
instruction forces the running core to enter the monitor mode.
2.2 Legitimate Channels between the Normal
and Secure Worlds
At the hardware layer, there are two ways for a normal world and
a secure world component to communicate with each other. Firstly,
messages can be stored in the general registers when a world switch-
ing happens, which is triggered by the SMC instruction. For instance,
secure monitor call calling convention [5] denes how parameters
are passed through the general registers, and it is implemented in
rmware, such as ARM Trusted Firmware [6]. Previous projects,
such as SeCReT [18], attempted to add extra layers of authentica-
tion and verication to make sure only predened and legitimate
components can use this channel.
Secondly, the secure world kernel can directly map a memory
region that is accessible by the normal world. Hence, this shared
memory region can be used by the normal and secure world to
communicate. Secure world OSes, such as OP-TEE [28], have imple-
mented shared memory. Usually, a physical memory region is rst
allocated by the normal world kernel. The physical address, the size
of the shared memory, and other important information are then
transferred to the secure world OS through the SMC interface, so
the secure world can congure its MMU table entries to access the
region directly. Since important information is still passed through
the SMC interface, solutions such as SeCReT can also monitor this
channel. Besides SeCReT, we can assume strong monitors can be
implemented in the future to inspect all transmitted data in these
channels.
2.3 ARM Cache Architecture
A cache is a relatively small but fast array of memory, which is
usually placed between a CPU core and the main memory. In the
ARM architecture, each core has its own dedicated L1 cache, which
442
P+C: Novel Cross-world Covert Channels on ARM TrustZone
ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
is separated into instruction cache (I-cache) and data cache (D-
cache). The separation of instruction and data cache allows transfers
to be performed simultaneously on both instruction and data buses
and increases the overall performance of L1 caches. In the ARM
architecture, a unied L2-cache is shared among the cores in a core
cluster.
Inclusiveness. Depending on if a high-level cache holds the data
of a lower level cache, a cache architecture can be categorized into
the following three classes: (1) inclusive cache: a line in L2 cache
will be evicted when new data is fetched even even though the line
is in L1 cache; (2) strict inclusive cache: a cache line in L2 cache
cannot be evicted by new data if the data is stored in L1 cache,
which is known as AutoLock by a prior work [11]; (3) exclusive
cache: a cache line will only be stored in one of the cache levels.
Inclusiveness of a cache is important for cross-core cache attacks. In
the ARM architecture, cache is not exclusive mostly, which enables
cross-core cache-based attacks.
Set Associativity. For eciency reasons, multiple adjacent words
in memory are moved in or out from the cache in a single cache load
or eviction. And, the smallest unit in a cache is called a cache line.
In the modern cache architecture, a cache is organized in multiple
cache sets. And, adjacent memory data with the size of a cache line
can be stored into any cache line in the same set. If a cache set has
N cache lines, the cache is called an N-way associative cache.
Replacement Policies. In set-associative caches, to decide which
specic cache line to use in a particular set several policies can be