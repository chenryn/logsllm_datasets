title:Verme: Worm containment in overlay networks
author:Filipe Freitas and
Edgar Marques and
Rodrigo Rodrigues and
Carlos Ribeiro and
Paulo Ferreira and
Lu&apos;ıs E. T. Rodrigues
Verme: Worm Containment in Overlay Networks
Filipe Freitas1, Edgar Marques1, Rodrigo Rodrigues2, Carlos Ribeiro1, Paulo Ferreira1, and Lu´ıs Rodrigues1
1INESC-ID / Technical University of Lisbon
2Max Planck Institute for Software Systems (MPI-SWS)
Abstract
Topological worms, such as those that propagate by fol-
lowing links in an overlay network, have the potential to
spread faster than traditional random scanning worms be-
cause they have knowledge of a subset of the overlay nodes,
and choose these nodes to propagate themselves; and also
because they can avoid traditional detection mechanisms.
Furthermore, this worm propagation strategy is likely to be-
come prevalent as the deployment of networks with a sparse
address space, such as IPv6, makes the traditional random
scanning strategy futile.
We present a novel approach for containing topological
worms based on the fact that some overlay nodes may not
have common vulnerabilities, due to their platform diver-
sity. By properly reorganizing the overlay graph, this can
lead to the containment of topological worms in small is-
lands of nodes with common vulnerabilities that only have
knowledge of themselves or nodes running on distinct plat-
forms. We also present the design of Verme, a peer-to-peer
overlay based on Chord that follows this approach, and
VerDi, a DHT layer built on top of the Verme routing over-
lay.
Simulations show that Verme and VerDi have a low over-
head when compared to Chord’s corresponding layers, and
that our new overlay design helps containing, or at least
slowing down the propagation of topological worms.
1. Introduction
In recent years, we have witnessed the outbreak of sev-
eral Internet worms that have not only caused inconvenience
to many users, but also a large societal impact. Many of
these are instances of “random scanning worms”. This
means that once the worm has infected a host, it propagates
itself by probing random IP addresses for new nodes to in-
fect. In some cases this choice of IP addresses is biased by
some heuristic that increases the chances of ﬁnding an IP
address that is in use, like choosing other IP addresses in
the same network as the infected host [21].
An alternative strategy would be for the worm to dis-
cover and try to infect a set of nodes whose IP addresses
are obtained either before the deployment or dynamically as
the worm is propagated. An instance of the latter case are
topological worms. These worms choose their next target to
infect by following links in a certain graph, which can, for
instance, be formed by overlay links in an application-level
network (e.g., a multicast overlay).
We argue that topological worms are likely to become
more and more prevalent. With the deployment of IPv6,
and given its sparse address space, it would be futile for
a worm to propagate through blind IP scanning, as many
authors pointed out [28]. Thus worm writers will have to
devise more clever strategies to choose target nodes, and
following a network topology is a natural candidate.
Topological worms are also likely to propagate faster
than traditional worms, given that they do not have to probe
for random IP addresses, and therefore are more likely to
escape prevention mechanisms that are based on “immu-
nizing” nodes against a bad input by disseminating an alert
message [7], since the worm might reach other nodes faster
than the alert.
An important instance of a topological worm that we ad-
dress in this paper is a peer-to-peer (p2p) worm [27]. These
are topological worms that spread through a p2p overlay.
Given the size of p2p systems, they have the potential to tar-
get a large node population. Furthermore, p2p worms can
avoid traditional detection mechanisms, which are based on
anomalous IP trafﬁc patterns [16, 20] (as they do not gener-
ate many failed connections and can disguise as normal p2p
trafﬁc), and avoid being detected by current honeypots [16]
(surveillance machines for early warning and detection that
listen in unused IP addresses).
Even though we have not seen speciﬁc instances of fast-
spreading topological worms, there is some indication that
this is a pending problem. For instance, there have been re-
ports of vulnerabilities in p2p client applications like eDon-
key, KaZaA and BitComet that would allow for the execu-
tion of arbitrary code on the client [1, 2, 4]. Also, there have
been some instances of viruses that use ﬁle sharing overlays
to assist in their propagation by making themselves avail-
able for download [3].
In previous work, researchers have pointed out the ex-
istence of this problem [21, 27], and even quantiﬁed how
much faster p2p worms can propagate using simulations [5]
and analysis [25].
In this paper we take the next step of
proposing that overlays should be modiﬁed to incorporate
defenses that contain or at least slow down the propagation
of topological worms.
We begin by presenting a series of general principles that
should guide the design of overlays to achieve the goal of
containing topological worms. Then we apply these prin-
ciples to the design of a new p2p overlay called Verme.
Verme is an extension to Chord [23], designed to contain
p2p worms in small “islands” of nodes that may have com-
mon vulnerabilities (e.g., because all nodes in that island
have the same platform). We designed Verme such that
nodes inside each island do not have knowledge of other
nodes with common vulnerabilities. As a consequence, the
worm can be contained within the island. Furthermore,
Verme is designed to maintain the good properties of Chord,
namely its good lookup performance and low overhead. We
also built a distributed hash table (DHT) layer called VerDi
on top of the Verme routing overlay.
In the design of our systems a series of interesting prob-
lems have arisen, like how to address impersonation attacks
(where an attacker could join the overlay with identities of
the wrong platform type, and use them to obtain addresses
of nodes it should not have access to). In this paper we also
discuss possible ways to address such problems.
Performance simulations show that both Verme and its
DHT layer (VerDi) do not introduce a signiﬁcant over-
head when compared to Chord, and the corresponding DHT
(DHash). Our simulations also show that Verme can be ef-
fective in delaying the propagation speed when compared
to a p2p worm that spreads through a conventional over-
lay. While not claiming to have found a panacea, our new
overlay design contributes to containing, or at least slowing
down the propagation of topological worms, and raising the
difﬁculty level for writing them.
The remainder of the paper is organized as follows. Sec-
tion 2 presents related work. Section 3 presents an overview
of the problem being addressed and the general solution.
Section 4 presents our new p2p routing overlay, Verme, and
Section 5 presents the DHT built on top of it, VerDi. Sec-
tion 6 discusses some open issues in our design. Section 7
presents our experimental evaluation. We conclude in Sec-
tion 8.
2. Related work
The containment of p2p worms is a recent research area.
One of the ﬁrst papers to point out the existence of this
problem was the work of Zhou et al. [27].
In this work-
shop paper, the authors motivate the problem, and propose
as their main research direction populating p2p overlays
with guardian nodes. These are special nodes that are run-
ning worm-detection software (which was later proposed in
a separate paper [7]) that tracks how information from un-
trusted sources propagates itself in memory. These have to
be special purpose nodes, since this detection considerably
slows down the execution. This differs from our vision of
a true p2p system where all nodes have common respon-
sibilities, and where the overlay graph is modiﬁed to con-
tain the propagation of the worms. In this paper, Zhou et
al. also mention how the existence of immune nodes could
slow down the propagation, but do not propose any reorga-
nization of the overlay to achieve contention.
Previously, a number of other papers had identiﬁed the
existence of a critical number of infected hosts before which
a random scan worm spreads slowly [18], and showed the
effect that a hit list (collection of vulnerable hosts gathered
previously) may have in minimizing the time to achieve that
critical point [21]. P2p systems offer not only a very accu-
rate hit list collection ﬁeld, but also an almost optimal in-
fection strategy, because by following the overlay structure
the number of infection collisions (i.e.
two infected hosts
wasting time trying infect the same host) is kept to a mini-
mum.
Yu et al. [25] propose a model for p2p worms, and an-
alyze the propagation of these worms depending on the at-
tack model (e.g., whether the worm uses the overlay topol-
ogy or not), and on the structure of the overlay. They point
out that these worms propagate much faster than traditional
scanning worms, and that unstructured overlays can also
lead to faster propagation. They do not propose, but men-
tion as future work, the design of defense systems.
Ramachandran and Sikdar [19] have proposed an analyt-
ical model for the dissemination of worms in p2p overlays.
They conclude that an accurate model needs to take into ac-
count user characteristics and communication patterns.
Chen and Gray [5] have also studied the propagation of
worms in p2p overlays using simulations, but, unlike the
previous two papers, they have considered a dynamic peer
population instead of a static overlay graph. They also pro-
pose a detection mechanism based on the observation that
worms distort node popularity, reﬂected in changes in con-
nection rates.
We contrast with the previous papers in that they focus
on a better understanding of the problem using models and
simulations, whereas our proposal focuses on the defenses
required to contain p2p worms.
Phoenix [15] is a replication protocol that places data
inition of platform (which may include different concepts
like hardware, OS, or even services and applications that
are running), we will introduce the notion of type, where
we deﬁne that two nodes are of the same type if and only if
they may have common vulnerabilities.
Given the above observations, we propose that the struc-
ture of the overlay should be modiﬁed such that the overlay
graph forms small “islands” of the same type. The nodes in
each island may be adjacent to other nodes from the same
island, or to nodes from islands of distinct types, but may
not be adjacent to nodes from other islands of the same type.
Figure 1 gives an example of a system with two types
of nodes. The overlay graph forms small islands of nodes
of the same type (enclosed within the dashed circles). The
nodes within an island may have edges among themselves
(i.e., they may be present in each other’s routing tables)
which may lead to the propagation of a topological worm
within an island. Nodes may also have edges to nodes that
belong to distinct islands of other types, but never to nodes
of distinct islands of the same type. Therefore a topologi-
cal worm will be conﬁned to an island, assuming it is only
trying to follow overlay links.
Modifying the overlay graph is not enough to succeed
in preventing the propagation of topological worms. For
instance, a worm could use overlay maintenance messages
or perform lookups to discover the network addresses of
nodes of the same type from distinct islands.
4. Verme
In this section we present the design of Verme, an exten-
sion of Chord [23] that follows the design principles pre-
sented above.
4.1. Assumptions
In this presentation we rely on some assumptions that we
will revisit in subsequent sections to discuss how reasonable
they are or how they can be enforced.
First, we assume that each node is assigned a certiﬁcate
that binds its node identiﬁer to the public key that speaks
for its principal, and the platform type.
To simplify our presentation, we will assume that nodes
may be of two distinct types without common vulnerabili-
ties (generalizing our design to support more than two types
of nodes is discussed elsewhere [11]).
4.2. Chord overview
Chord [23] is a peer-to-peer routing overlay that provides
a scalable lookup primitive that allows applications to ﬁnd
data stored in a peer-to-peer system.
In Chord nodes have identiﬁers that are 160-bit integers
assigned in such a way that they are uniformly distributed
(e.g., as the output of a SHA-1 function applied to the net-
work address and port number of the node).
Figure 1. Generic structure of an overlay
graph designed for worm containment
on a set of servers running on different platforms to reduce
the probability of correlated failures and improve efﬁciency.
This is the same guiding principle that our proposal takes
advantage of, but it is used in our case for solving a different
problem, which is the containment of topological worms.
Our own workshop paper [12] presented an early version
of the design presented in this paper but had not shown any
implementation results yet.
3. Overview
In this section we formulate our problem statement and
give an overview of our general solution.
Our goal is to redesign overlay networks in such a way
that they contain or slow down the propagation of worms
that use the overlay topology to choose the next target node
to infect.
The simplest possibility for designing such a worm
would be to exploit a vulnerability in the overlay applica-
tion, and use the routing state maintained by the application
to choose the next target to infect. However, the overlay
application does not have to contain a vulnerability to write
such a worm. A worm that is not related to the overlay
can use knowledge from this application (e.g., by inspect-
ing open TCP connections) to choose where to propagate.
Our proposal takes advantage of the fact that overlays
contain many different types of nodes, running on differ-
ent platforms, or using different versions of overlay client
software. This diversity can be used to contain the propaga-
tion of p2p worms, since the vulnerabilities in one particular
implementation or platform may not affect the entire pop-
ulation. For instance, the SQLSlammer worm only affects
Windows machines running SQLServer 2000 applications.
In case the vulnerability is found in the overlay applications
it is also not likely to be present in different implementa-
tions (e.g., different BitTorrent clients).
In our presentation, instead of referring to a vague def-
Figure 2. Identiﬁer structure in Verme
Chord designates the node whose identiﬁer immediately
follows a key (called the successor node) as responsible for
that key. Lookups map a 160-bit key (the identiﬁer of the
data item) to the network address of the successor of that
key. In some cases where the layer above Chord requires
several replicas for each item stored in the system, lookups
will return a list of n successors of the key instead of only
the immediate successor.
Each Chord node maintains a small amount of routing
state (small enough to keep its maintenance overhead low).
This consists of a list of successors (i.e., the identiﬁers and
IP addresses of the nodes that follow it in the ring), the
node’s predecessor, and a ﬁnger table, consisting of the IP
addresses and identiﬁers of nodes that follow it at power-of-
two distances in the identiﬁer space. Chord’s maintenance
protocols work hard to keep the pointer to the next succes-
sor up-to-date, by running a stabilization routine that deter-
mines if there were any membership changes in the vicinity
of the node. On the other hand, the remaining routing state
(like ﬁnger table entries) can be refreshed in the background
by looking up the appropriate id infrequently.
Lookup requests travel through a sequence of nodes (ei-
ther recursively orn iteratively), where each node in this se-
quence forwards the request to (or answers the client with)
the node from its ﬁnger table with highest id still smaller
than the desired key. The lookup will conclude when the
successor of the id is reached, which happens with high
probability after O(log N) routing hops.