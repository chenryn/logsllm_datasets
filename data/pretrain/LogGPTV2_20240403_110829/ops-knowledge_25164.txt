User: 请解答这个和日志有关的问题Solution for password spraying on my app We have a web application where the input fields for login are: username and password. In order to prevent brute force attacks, we have implemented a lockout function for 5 invalid tries of valid username but the incorrect password. 

What the penetration testers did was use the same password but enumerated usernames until a valid one was found. No lockout can prevent that since the username field is always changed. They did enumeration at a rate just below the minimum threshold for the firewall to categorize this as an automated attack and block it. 

It seems the only way to handle this is programmatically. I have some solutions in mind but I don't want to reinvent the wheel. Are there are solutions on how to handle this programmatically?

Assistant: You need to correlate the failed logins on the server to some characteristic the attacker has. Typically, this can be the IP, but there may be other options depending on how your app is built and what data it collects. 

This means you need to keep track of failed logins across all users for some window of time. 

Once you identify an IP that is failing to log in across many accounts, you have some difficult options regarding how to respond. You could block the IP, which could lock out all legitimate users using that IP, or before lockout, check to see if the IP has been used by other legitimate users (i.e. determine if the IP is likely legitimate or not). 

IP blocking is crude and error-prone. It is just as easy for attackers to rotate through IPs as it is to rotate through usernames. You also risk the chance of locking out your legitimate users. 

You could also tackle the problem on a different layer altogether. You could implement 2FA, which protects the users and means that you don't need to protect user passwords through log analysis. Or you could make the decision that users who are vulnerable to password spraying need education or better password guidance rather than trying to protect them against themselves. 

The problem here isn't that your app is vulnerable to password spraying, it's that the passwords are easy to guess.