# OPUS: Online Patches and Updates for Security

**Authors:**  
Gautam Altekar, Ilya Bagrak, Paul Burstein, Andrew Schultz  
*University of California, Berkeley*  
{galtekar, ibagrak, burst, alschult}@cs.berkeley.edu

## Abstract
We introduce OPUS, a tool designed for dynamic software patching that can apply fixes to C programs at runtime. The primary objective of OPUS is to facilitate the application of security patches to interactive applications, which are frequent targets of security exploits. By limiting the types of patches accepted by our system, we minimize the additional burden on the programmer beyond what is typically required for developing and testing a conventional stop-and-restart patch. We manually tested 26 real CERT vulnerabilities, and 22 of them were successfully patched using our current OPUS prototype, with negligible runtime overhead and no prior knowledge of the tool by the patch developer.

## 1. Introduction
The discovery of security vulnerabilities has increased dramatically, with the CERT Coordination Center reporting a 2,099% rise in reported security vulnerabilities from 1998 to 2002 [27]. This trend is likely to continue as opportunistic hackers exploit known application vulnerabilities [3].

Traditionally, software patching is used to address these vulnerabilities. Vendors create and distribute patches after a vulnerability is disclosed, hoping that administrators will install them. However, experience shows that administrators often delay or avoid installing patches [23].

Administrators may forego patch installation for several reasons. At a minimum, applying a conventional patch requires an application or system restart, which can be disruptive. Additionally, patches have become unreliable due to shortened testing cycles and the bundling of security fixes with feature updates. These unreliable patches can severely impact a system, leaving administrators without a reliable method to reverse the damage [23]. Despite industry efforts to improve patch reliability and testing, the need for non-disruptive security patches remains unmet.

We believe that the disruption caused by conventional patching is a significant deterrent to the timely installation of security patches. While resource-rich organizations can mitigate this through redundant hardware, rolling upgrades, and application-specific schemes [6], home and small-business administrators lack such resources and must often choose between application workflow and system security. As the number of security patches increases, the lack of transparency in conventional patching further discourages users from patching.

To address this, we introduce OPUS, a system for constructing and applying dynamic security patches. Dynamic security patches are small, feature-less program fixes that can be applied at runtime. Many types of vulnerabilities, including buffer overflows, format string issues, memory leaks, input check failures, double frees, and even core application logic bugs (e.g., script interpreter bugs), can be addressed with dynamic patching. Our survey of CERT vulnerabilities over the past three years supports this.

Applying dynamic patches introduces complexity and fewer guarantees of correctness. In fact, determining the correctness of dynamic patches is undecidable in the general case [15]. OPUS addresses this by providing warnings about program modifications likely to result in unsafe patches, derived from static analysis of both patched and unpatched code. Once the programmer is confident in the patch's safety, OPUS generates a dynamic patch that can be distributed to end-users for immediate application.

Our preliminary experience with OPUS on dozens of real security patches and applications shows that the process is surprisingly safe and easy. This is primarily due to the small, isolated, and feature-less nature of security patches, and secondarily to OPUS's support for the C programming language and seamless integration with widely used development environments like GCC and Make. While we expected static analysis to significantly aid in constructing safer patches, security patches proved to be so simple in practice that programmer intuition was often sufficient.

The rest of the paper is organized as follows: Section 2 describes the design goals of OPUS, Section 3 outlines the abstract patch model, Section 4 details the major components of the OPUS architecture, Section 5 discusses implementation challenges, Section 6 covers experience and evaluation, Section 7 highlights related work, and Section 8 proposes future work. The paper concludes in Section 9.

## 2. Design Considerations
The key observation behind OPUS is that most security patches are small, isolated, and feature-less program fixes. This motivates our goal of building a widely applicable dynamic security patching system rather than a generic dynamic software upgrade mechanism. The following design decisions reflect the practical nature of our approach:

- **Support for C Programming Language:** Given the prevalence of type-unsafe languages, OPUS supports C, accommodating legacy code without requiring significant porting effort.
- **Integration with Existing Development Environment:** OPUS works seamlessly with standard Unix build tools (GCC and Make) and integrates smoothly with large-scale software projects.
- **Estimation of Dynamic Patch Safety:** It is generally impossible to guarantee identical behavior between dynamically and statically applied patches [15]. OPUS uses static analysis to warn about potentially dangerous changes, particularly those affecting non-local state.
- **No Code Annotations Required:** Unlike other dynamic update techniques, OPUS does not require programmer-generated annotations, simplifying its design and enforcing a policy of only admitting isolated and feature-less modifications.
- **Patch at Function Granularity:** The smallest possible patch replaces a whole function definition. This simplifies reasoning about patch safety and eases implementation.

## 3. Patch Model
In abstract terms, the patch model addresses two questions:
1. What kinds of patches are not supported by OPUS?
2. What kinds of patches may be unsafe when used with OPUS?

### 3.1 Inadmissible Patches
Inadmissible patches are classified into two types: those prohibited due to fundamental limitations and those excluded for ease of initial implementation.

#### 3.1.1 Fundamental Limitations
- **No Patching Top-Level Functions:** Patches to top-level functions like `main` or functions that run once before the patch is applied are ineffective.
- **No Changes to Initial Values of Globals:** Global variables are initialized before the patch is applied, so changes to their initial values are ineffective.

#### 3.1.2 Implementation Limitations
- **No Function Signature Changes:** OPUS does not support changes to function signatures, as they are rare in security patches.
- **No Patching Inlined Functions:** Inlining makes it difficult to determine if a function has been patched, so inlined functions are not supported.

### 3.2 Patch Safety
A dynamic patch is considered safe if its application results in identical program execution to a statically applied version. A patch is conservatively safe if it does not make additional writes to non-local state or alter the function's return value. Non-local state includes global and heap data, data in another function's stack frame, files, and sockets.

While conservative safety implies safety, it can also produce false positives. For example, a patch that changes a function's return value might be safe but not conservatively safe. OPUS informs the programmer about violations, allowing them to decide whether to accept or reject the patch based on their knowledge of the program.

## 4. Architecture
### 4.1 Overview
OPUS consists of three stages: patch analysis, patch generation, and patch application. These stages are interconnected via simple annotations, allowing for flexibility and modularity. The high-level architecture is shown in Figure 1.

The OPUS architecture aims to:
1. Provide a natural user interaction for programmers.
2. Integrate seamlessly with existing software build environments.

### 4.2 Annotations and Interface Languages
The patch analysis begins with a script that performs a diff of the changed and unchanged source trees and invokes the appropriate build target in the project's master Makefile. Using the diff information, OPUS generates `.opus` files, which notify the instrumented C compiler about the changed files requiring static analysis.

The instrumented C compiler parses `.opus` files and generates source annotations. These annotations include line ranges, function definitions, and hashes of function prototypes for cross-tree comparison. They also list globals to detect new global additions across the patched and unpatched source trees.

### 4.3 Static Analysis
Static analysis has two goals:
1. Determine if the patch is admissible.
2. Check if the patch satisfies the conservative safety model.

For the first goal, source annotations are fed into the annotation analysis, which alerts the programmer if the patch meets inadmissible criteria. For the second goal, static analysis checks for new writes to non-local state within the patched function and marks them as harmful. The current implementation focuses on identifying new writes to non-local state and does not check for altered return values.

### 4.3.1 Bootstrapping Static Analysis
The success of static analysis depends on overestimating the set of variables that can affect non-local state. This set, called the tainted set, includes pointer-type function arguments and any pointer variable assigned as a return value of a callee.

### 4.3.2 Taint Flow Propagation Rules
Figure 2 shows a subset of rules for computing the tainted set. The FUNCTION rule captures our assumption about pointer-type function arguments, and the IF rule specifies how taint flows through conditional statements.

---

This revised text provides a more structured and coherent presentation of the OPUS system, making it easier to understand and follow.