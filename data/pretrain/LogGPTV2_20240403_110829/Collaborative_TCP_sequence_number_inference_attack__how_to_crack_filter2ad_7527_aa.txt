title:Collaborative TCP sequence number inference attack: how to crack
sequence number under a second
author:Zhiyun Qian and
Zhuoqing Morley Mao and
Yinglian Xie
Collaborative TCP Sequence Number Inference Attack —
How to Crack Sequence Number Under A Second
Zhiyun Qian
Department of EECS
University of Michigan
2260 Hayward Street
Ann Arbor, MI, USA
PI:EMAIL
Z. Morley Mao
Department of EECS
University of Michigan
2260 Hayward Street
Ann Arbor, MI, USA
PI:EMAIL
Yinglian Xie
Microsoft Research
Silicon Valley
1288 Pear Avenue
Mountain View, CA, USA
PI:EMAIL
ABSTRACT
In this study, we discover a new class of unknown side chan-
nels — “sequence-number-dependent” host packet counters
— that exist in Linux/Android and BSD/Mac OS to enable
TCP sequence number inference attacks. It allows a piece
of unprivileged on-device malware to collaborate with an
oﬀ-path attacker to infer the TCP sequence numbers used
between a client and a server, leading to TCP injection and
hijacking attacks. We show that the inference takes, in com-
mon cases, under a second to complete and is quick enough
for attackers to inject malicious Javascripts into live Face-
book sessions and to perform malicious actions on behalf of a
victim user. Since supporting unprivileged access to global
packet counters is an intentional design choice, we believe
our ﬁndings provide important lessons and oﬀer insights on
future system and network design.
Categories and Subject Descriptors
D.4.6 [Operating Systems]:
Security and Protec-
tion—Information ﬂow controls; C.2.5
[Computer-
Communication Networks]: Local and Wide-Area Net-
works—Internet (e.g., TCP/IP)
General Terms
Security, Experimentation
Keywords
TCP hijacking, TCP sequence number, Network packet
counters
1.
INTRODUCTION
Since TCP was not originally designed for security, for
years it has been patched to address various security holes,
among which the randomization of TCP’s initial sequence
number (ISN), introduced in RFC1948 [7] in 1996 was an
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’12, October 16–18, 2012, Raleigh, North Carolina, USA.
Copyright 2012 ACM 978-1-4503-1651-4/12/10 ...$15.00.
important one. It was proposed to guard against oﬀ-path
spooﬁng attacks attempting to inject packets with forged
source addresses (for data injection or reset attacks) [7,
8]. ISN randomization prevents easy prediction of sequence
numbers; thus arbitrarily injected packets are likely to be
discarded at the receiver due to invalid sequence numbers.
The patch has largely rendered most sequence-number-
guessing-based attacks very hard to succeed. However, in
recent years, new attacks are reported.
In 2007, a study
reported in Phrack magazine [1] has revisited the problem
and claimed that TCP sequence number can still be inferred
based on how a host treats in-window and out-of-window in-
coming packets. However, the scope of this attack is rather
limited, primarily targeting long-lived connections with a
rather low success rate (as shown in §3.3).
In 2012, re-
searchers have discovered that the sequence number infer-
ence attack can be more generally applicable, impacting even
short-lived HTTP connections [26]. However, this attack
heavily relies on the presence of sequence-number-checking
ﬁrewall middleboxes deployed in the network. Speciﬁcally,
the idea is that if a packet has passed the sequence-number-
checking ﬁrewall, then it implies that the sequence number
of the packet is considered within a legitimate window.
Our work generalizes these attacks by eliminating the
strong requirements imposed on them to enable a broader
class of attacks. Speciﬁcally, we make the following key con-
tributions:
• Building on the threat model presented in the recent
work [26], we generalize the sequence number inference at-
tack by demonstrating that it can be reliably carried out
without the help of the ﬁrewall middleboxes. Our work pro-
vides further evidence that relying on TCP sequence number
for security is not an option.
• Distinct from the “error counters” (e.g., packets rejected
due to old timestamps) used in the previous study [26],
which serves only as an indication of whether a packet is
allowed to pass through the sequence-number-checking ﬁre-
wall, we discover a new class of packet counters — “sequence-
number-dependent” counters in Linux/Android (1 counter)
and BSD/Mac OS (8 counters) — that can directly leak se-
quence numbers without requiring the presence of ﬁrewall
middleboxes, thereby elevating the danger of TCP injection
and hijacking attacks.
• We are able to complete the sequence number inference
within 4–5 round trips, which is much faster than the one
previously proposed [26], due to both the property of newly
discovered “sequence-number-dependent” counters as well as
593a more eﬃcient probing scheme. For instance, we show that
it takes as little as 50ms to complete the inference, two or-
ders of magnitude faster than previous method. It can even
eliminate the need of conducting additional TCP hijacking
attacks required before, resulting in a much higher attack
success rate (See §5.1).
As a proof-of-concept demonstration, we show that our
attack allows a piece of unprivileged malware on Android
smartphones to hijack a Facebook connection, replacing the
login page, or injecting malicious Javascripts to post new
status on behalf of the victim user, or performing other ac-
tions. All these attacks (except the TCP hijacking attack)
work on the latest Linux kernel. TCP hijacking requires ker-
nel versions earlier than 3.0.2, which are still the case for the
majority of the Android phones. Besides Android/Linux, we
also demonstrate that the attack is applicable to the latest
BSD/Mac OS. We believe our work presents an important
message that today’s systems still expose too much shared
state with poor isolation.
The rest of the paper is organized as follows: §2 thor-
oughly describes the related work. §3 explains how to infer
TCP sequence number (including both previous study and
our discovery). §4 covers how we can leverage the sequence
number inference as a building block to conduct a number of
TCP attacks. §5 shows several cases studies demonstrating
the impact on speciﬁc applications. §6 discusses why the
problem occurred and concludes.
2. RELATED WORK
TCP sequence number inference attack. By far,
there are only a few reported TCP sequence number in-
ference attacks. The ﬁrst one goes back to 1999 where a
TCP stack bug causes the kernel to silently drop the third
packet during “three-way handshake” if the ACK number is
smaller than the expected ACK number, and sends a reset
otherwise [4]. This allows an attacker to send spoofed ACK
packets and infer the correct ACK number. This minor bug
was quickly ﬁxed. Besides it, there are three other closely
related studies. One of them is described in the Phrack
magazine [1] that uses the IPID side channel on Windows
to infer both the server-side and the client-side TCP se-
quence numbers. According to our empirical results, such
attack is theoretically possible but very hard to carry out.
It can succeed under rather limited conditions due to a large
number of packets required as well as the noisy side-channel
that is leveraged. Following the same direction, a more re-
cent work [20] improves the reliability of the attack by re-
quiring certain control on the client (e.g., javascript through
browser), yet it still relies on the noisy IPID side channel
available on Windows only.
A closely related recent work [26] discusses how sequence-
number-checking ﬁrewall middleboxes can leak the TCP se-
quence number state stored on the ﬁrewall. The idea is
that if a packet has passed the sequence-number-checking
ﬁrewall, it implies that the sequence number of the packet is
considered within a legitimate window. Otherwise, it implies
that the packet has an out-of-window sequence number. As
a result, if an attacker can observe whether a spoofed packet
has passed the ﬁrewall, he will be able to know if a guessed
sequence number is correct. To do so, an attacker can in-
tentionally craft a spoofed packet with certain errors (e.g.,
old timestamp) and then leverage the error packet coun-
ters on the host (e.g., packets rejected due to old times-
tamps) to tell if a spoofed packet has passed the ﬁrewall
and reached the end-host.
In our work, we make a ma-
jor improvement by eliminating the requirement of ﬁrewall
middleboxes altogether with the help of a class of “sequence-
number-dependent” packet counters that we discover.
In
addition to a more general attack model, we also show sig-
niﬁcant improvements on success rate and attack speed with
much lower network resource requirements.
Other TCP-sequence-number-related attacks. (1)
TCP sequence number prediction attack. Diﬀerent from
TCP sequence number inference attack, the prediction at-
tack relies on the non-randomness of TCP Initial Sequence
Numbers (ISN) [25, 2]. To defend the attack, RFC1948 [7]
standardizes the ISN randomization behavior such that dif-
ferent connections should generate random sequence num-
bers independently. (2) Blind TCP RST attack. Due to the
fact that a connection will be reset as long as the sequence
number of the reset (RST) packet falls in the current receive
window, in a long-lived connection (e.g., a BGP session), an
attacker can brute force all possible target connections and
sequence number ranges [8, 32] to cause denial of service.
Smartphone-based attacks. There have been a num-
ber of attacks against smartphones, many of which focus on
leaking sensitive information [15, 16, 28]. In addition, there
is a class of privilege escalation attacks on Android [17, 19,
14], but they are limited to gaining permissions that typi-
cally cannot aﬀect the behavior of other applications. For
instance, one application may gain the permission of reading
the contact list or GPS location through other colluding or
vulnerable apps, but it cannot tamper with the TCP connec-
tion of other applications given the OS’s sandboxing mecha-
nisms. Our study demonstrates that injection and hijacking
of TCP connections can be achieved without requiring any
special permission other than the permission to access the
Internet.
Side-channel information leakage. A wide range of
side channels have been investigated before: CPU, power,
shared memory/ﬁles, and even electromagnetic waves, etc.
Researchers have found that it is possible to construct vari-
ous attacks, e.g., to infer keystrokes through many side chan-
nels [30, 33, 29, 13, 18]. It is especially interesting to see how
smartphones can allow malware to infer sensitive informa-
tion through on-board sensors (which can also be considered
as side-channels). For instance, Soundcomber [28] uses the
audio sensor to record credit card numbers entered through
keypad. In our work, we also rely on side-channels on the
host, but the attacks infer information at the network-layer.
3. TCP SEQUENCE NUMBER INFER-
ENCE ATTACK
The ultimate goal of the attack is to inject malicious TCP
payload into apps running on a victim smartphone or client
device. It is achieved by a piece of unprivileged on-device
malware collaborating with an oﬀ-path attacker on the In-
ternet. The main implication of this attack is that websites
that do not use HTTPS will be vulnerable to various at-
tacks such as phishing and Javascript injection because the
HTTP response can be potentially replaced. Even if HTTPS
is used, they are still vulnerable to connection reset attacks
as we show that the sequence number can be quickly inferred
in under a second.
594how the TCP stack treats a spoofed probing packet with
a guessed sequence number. Diﬀerent from the recent
work [26] that uses certain “error counters” as an indica-
tion of whether a spoofed packet has passed the sequence-
number-checking ﬁrewall middlebox, our hypothesis is that
the TCP stack may increment certain counters when the
guessed sequence number is wrong and remain the same
when it is correct, or vice versa. Such counters can directly
leak sequence numbers without the help of the ﬁrewall mid-
dlebox and are thus named “sequence-number-dependent
counters” (details in §3.4 and §3.5). To investigate such a
possibility, we ﬁrst need to understand how TCP stack han-
dles an incoming TCP packet and how various counters are
incremented during the process.
3.3 TCP Incoming Packet Validation
In this section, we provide background on how a standard