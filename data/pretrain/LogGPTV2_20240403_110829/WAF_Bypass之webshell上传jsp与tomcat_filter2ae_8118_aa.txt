# WAF Bypass之webshell上传jsp与tomcat
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 1.开个头
事情是这样的，某一天，笔者闲着无聊，对着Tomcat的示例文件到处点点，希望寻找出点什么，意外发现Tomcat的示例文件中一些有趣的示例：
随后笔者翻开Tomcat的解析代码，对其进行了一番静态代码审阅，果然有蹊跷，后面又调试看了看。
## 2 代码要点简析
对于脚本jsp文件，会通过EncodingDetector进行字符集类型的探测，该处代码要点较多，也是主逻辑，所以整片代码放上来了。
apache-tomcat-9.0.35/lib/jasper.jar!/org/apache/jasper/compiler/ParserController.class：determineSyntaxAndEncoding
编码探测过程在该类初始化方法中进行，首先会使用processBom方法，根据文件的前4个字节探测字符集类型，这里的代码和xerces的Magic
Charset中的字符集类型探测代码有着异曲同工之妙…；之后会使用getPrologEncoding方法尝试获取文件的declare
charset，declare charset优先级高于magic charset。
apache-tomcat-9.0.35/lib/jasper.jar!/org/apache/jasper/compiler/EncodingDetector.class
processBom方法会调用parseBom方法根据文件头4个字节返回字符集类型：
getPrologEncoding将文件流传入xml解析，底层还是用的xerces，如果编码类型为xerces不支持的，这里会暂时忽略掉异常。
但并非processBom或getPrologEncoding得到的字符集就能被成功，后续创建字符流读取器会检查自身是否支持这些字符集。
这一步中也会做字符集别名的映射查找，一番操作过后，如果该字符集未读取器不支持的，最后会抛出异常。如UTF-32BE字符集，在getPrologEncoding方法中会抛出异常（不支持），在processBom中虽然不会抛出异常，但是其过程中得到的字符集名称为ISO-10646-UCS-4。而在InputStreamReader中不支持该字符集，也无别名映射（想想也是，ISO-10646-UCS-4这个名字根本也无法判断大端小端，而且代码流程中也没有传递大小端这一变量）。
jdk1.8.0_191/src.zip!/java/nio/charset/Charset.java
ParserController.class：determineSyntaxAndEncoding方法中，如果文件没有带BOM，会触发getPageEncodingForJspSyntax函数流程
apache-tomcat-9.0.30-src/java/org/apache/jasper/compiler/ParserController.java，getPageEncodingForJspSyntax
从代码来看，指令标签有好几种：
声明字符编码的方式至少有两种：
    pageEncoding="UTF-16be"
    contentType="charset=utf-16be"
## 2 实战讲解
###  2.1 charset
通过阅读代码流程，我们可以得到如下表格，该表格用于Magic Charset方法，而XML的Declare
Charset也可以使用，笔者在这里就不再描述了，参考笔者的关于xerces解析的文章即可 [WAF
Bypass之xerces解析](https://www.anquanke.com/post/id/209826)
有如下原始JSP文件，jsp_xml.jsp:
    out.write("I'm turn1tup!");
使用UTF-16BE字符集进行编码：