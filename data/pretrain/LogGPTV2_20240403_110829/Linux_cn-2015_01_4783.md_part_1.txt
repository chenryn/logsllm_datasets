---
author: Chris Swan
category: 观点
comments_data:
- date: '2015-01-30 11:27:42'
  message: 赞
  postip: 124.207.180.42
  username: 誓言
- date: '2015-01-30 19:33:02'
  message: 好产品往往是随着刚需浮出水面的，而不是凭空拍脑袋想出来的。
  postip: 66.249.79.118
  username: 微博评论
- date: '2015-01-30 19:33:02'
  message: 刚需 //@特价萝卜：好产品往往是随着刚需浮出水面的，而不是凭空拍脑袋想出来的。
  postip: 66.249.79.118
  username: 微博评论
- date: '2015-01-30 21:03:01'
  message: //@特价萝卜:好产品往往是随着刚需浮出水面的，而不是凭空拍脑袋想出来的。
  postip: 188.165.15.130
  username: 微博评论
- date: '2015-02-01 00:39:51'
  message: Docker 到底是用来干嘛呢，那玩意到底有什么用呢，最开始开发她是为了什么
  postip: 117.136.72.225
  username: 来自 -  的 Mozilla/Mac 用户
count:
  commentnum: 5
  favtimes: 1
  likes: 0
  sharetimes: 8
  viewnum: 19450
date: '2015-01-30 10:00:00'
editorchoice: true
excerpt: Docker - 迄今为止发生的那些事情 Docker 是一个专为 Linux 容器而设计的工具集，用于构建、交付和运行分布式应用。它最初是 DotCloud
  的一个开源项目，于2013年3月发布。这个项目越来越受欢迎，以至于 DotCloud 公司都更名为 Docker 公司（并最终出售了原有的 PaaS 业务)。Docker
  1.0是在2014年6月发布的，而且延续了之前每月更新一个版本的传统。 Docker 1.0版本的发布标志着 Docker 公司认为该平台已经充分成熟，足以用于生产环境中（由该公司与合作伙伴提供付费支持选择）。每个月发布的更新表明该项目正在迅速发展，比如增添一些新特
fromurl: http://www.infoq.com/articles/docker-future
id: 4783
islctt: true
largepic: /data/attachment/album/201501/30/020425uvryrgvkrvhnwlxg.png
permalink: /article-4783-1.html
pic: /data/attachment/album/201501/30/020425uvryrgvkrvhnwlxg.png.thumb.jpg
related: []
reviewer: ''
selector: ''
summary: Docker - 迄今为止发生的那些事情 Docker 是一个专为 Linux 容器而设计的工具集，用于构建、交付和运行分布式应用。它最初是 DotCloud
  的一个开源项目，于2013年3月发布。这个项目越来越受欢迎，以至于 DotCloud 公司都更名为 Docker 公司（并最终出售了原有的 PaaS 业务)。Docker
  1.0是在2014年6月发布的，而且延续了之前每月更新一个版本的传统。 Docker 1.0版本的发布标志着 Docker 公司认为该平台已经充分成熟，足以用于生产环境中（由该公司与合作伙伴提供付费支持选择）。每个月发布的更新表明该项目正在迅速发展，比如增添一些新特
tags:
- Docker
thumb: false
title: Docker 的现状与未来
titlepic: false
translator: disylee
updated: '2015-01-30 10:00:00'
---
### Docker - 迄今为止发生的那些事情
Docker 是一个专为 Linux 容器而设计的工具集，用于‘构建、交付和运行’分布式应用。它最初是 DotCloud 的一个开源项目，于2013年3月发布。这个项目越来越受欢迎，以至于 DotCloud 公司都更名为 Docker 公司（并最终[出售了原有的 PaaS 业务](http://blog.dotcloud.com/dotcloud-paas-joins-cloudcontrol))。[Docker 1.0](http://www.infoq.com/news/2014/06/docker_1.0)是在2014年6月发布的，而且延续了之前每月更新一个版本的传统。
Docker 1.0版本的发布标志着 Docker 公司认为该平台已经充分成熟，足以用于生产环境中（由该公司与合作伙伴提供付费支持选择）。每个月发布的更新表明该项目正在迅速发展，比如增添一些新特性、解决一些他们发现的问题。该项目已经成功地分离了‘运行’和‘交付’两件事，所以来自任何版本的 Docker 镜像源都可以与其它版本共同使用（具备向前和向后兼容的特性），这为 Docker 应对快速变化提供了稳定的保障。
Docker 之所以能够成为最受欢迎的开源项目之一可能会被很多人看做是炒作，但是也是由其坚实的基础所决定的。Docker 的影响力已经得到整个行业许多大企业的支持，包括亚马逊, Canonical 公司, CenturyLink, 谷歌, IBM, 微软, New Relic, Pivotal, 红帽和 VMware。这使得只要有 Linux 的地方，Docker 就可以无处不在。除了这些鼎鼎有名的大公司以外，许多初创公司也在围绕着 Docker 发展，或者改变他们的发展方向来与 Docker 更好地结合起来。这些合作伙伴们（无论大或小）都将帮助推动 Docker 核心项目及其周边生态环境的快速发展。
![](/data/attachment/album/201501/30/020425uvryrgvkrvhnwlxg.png)
### Docker 技术简要综述
Docker 利用 Linux 的一些内核机制例如 [cGroups](https://www.kernel.org/doc/Documentation/cgroups/cgroups.txt)、命名空间和 [SElinux](http://selinuxproject.org/page/Main_Page) 来实现容器之间的隔离。起初 Docker 只是 [LXC](https://linuxcontainers.org/) 容器管理器子系统的前端，但是在 0.9 版本中引入了 [libcontainer](http://blog.docker.com/2014/03/docker-0-9-introducing-execution-drivers-and-libcontainer/)，这是一个原生的 go 语言库，提供了用户空间和内核之间的接口。
容器是基于 [AUFS](http://aufs.sourceforge.net/aufs.html) 这样的联合文件系统的，它允许跨多个容器共享组件，如操作系统镜像和已安装的相关库。这种文件系统的分层方法也被 [Dockerfile](https://docs.docker.com/reference/builder/) 的 DevOps 工具所利用，这些工具能够缓存成功完成的操作。这就省下了安装操作系统和相关应用程序依赖包的时间，极大地加速测试周期。另外，在容器之间的共享库也能够减少内存的占用。
一个容器是从一个镜像开始运行的，它可以来自本地创建，本地缓存，或者从一个注册库（registry）下载。Docker 公司运营的 [Docker Hub 公有注册库](https://registry.hub.docker.com/)，为各种操作系统、中间件和数据库提供了官方仓库存储。各个组织和个人都可以在 docker Hub 上发布的镜像的公有库，也可以注册成私有仓库。由于上传的镜像可以包含几乎任何内容，所以 Docker 提供了一种自动构建工具（以往称为“可信构建”），镜像可以从一种称之为 Dockerfile 的镜像内容清单构建而成。
### 容器 vs. 虚拟机
容器会比虚拟机更高效，因为它们能够分享一个内核和分享应用程序库。相比虚拟机系统，这也将使得 Docker 使用的内存更小，即便虚拟机利用了内存超量使用的技术。部署容器时共享底层的镜像层也可以减少存储占用。IBM 的 Boden Russel 已经做了一些[基准测试](http://bodenr.blogspot.co.uk/2014/05/kvm-and-docker-lxc-benchmarking-with.html?m=1)来说明两者之间的不同。
相比虚拟机系统，容器具有较低系统开销的优势，所以在容器中，应用程序的运行效率将会等效于在同样的应用程序在虚拟机中运行，甚至效果更佳。IBM 的一个研究团队已经发表了一本名为[虚拟机与 Linux 容器的性能比较]的文章[11](http://domino.research.ibm.com/library/cyberdig.nsf/papers/0929052195DD819C85257D2300681E7B/$File/rc25482.pdf)。
容器只是在隔离特性上要比虚拟机逊色。虚拟机可以利用如 Intel 的 VT-d 和 VT-x 技术的 ring-1 [硬件隔离](https://en.wikipedia.org/wiki/X86_virtualization#Hardware-assisted_virtualization)技术。这种隔离可以防止虚拟机突破和彼此交互。而容器至今还没有任何形式的硬件隔离，这使它容易受到攻击。一个称为 [Shocker](http://stealth.openwall.net/xSports/shocker.c) 的概念攻击验证表明，在 Docker 1.0 之前的版本是存在这种脆弱性的。尽管 Docker 1.0 修复了许多由 Shocker 漏洞带来的较为严重的问题，Docker 的 CTO Solomon Hykes 仍然[说](https://news.ycombinator.com/item?id=7910117)，“当我们可以放心宣称 Docker 的开箱即用是安全的，即便是不可信的 uid0 程序（超级用户权限程序），我们将会很明确地告诉大家。”Hykes 的声明承认，其漏洞及相关的风险依旧存在，所以在容器成为受信任的工具之前将有更多的工作要做。
对于许多用户案例而言，在容器和虚拟机之间二者选择其一是种错误的二分法。Docker 同样可以在虚拟机中工作的很好，这让它可以用在现有的虚拟基础措施、私有云或者公有云中。同样也可以在容器里跑虚拟机，这也类似于谷歌在其云平台的使用方式。像 IaaS 服务这样普遍可用的基础设施，能够即时提供所需的虚拟机，可以预期容器与虚拟机一起使用的情景将会在数年后出现。容器管理和虚拟机技术也有可能被集成到一起提供一个两全其美的方案；这样，一个硬件信任锚微虚拟化所支撑的 libcontainer 容器，可与前端 Docker 工具链和生态系统整合，而使用提供更好隔离性的不同后端。微虚拟化（例如 Bromium 的 [vSentry](http://www.bromium.com/products/vsentry.html) 和 VMware 的 [Project Fargo](http://cto.vmware.com/vmware-docker-better-together/))已经用于在桌面环境中以提供基于硬件的应用程序隔离，所以类似的方法也可以用于 libcontainer，作为 Linux内核中的容器机制的替代技术。
### ‘容器化’ 的应用程序
几乎所有 Linux 应用程序都可以在 Docker 容器中运行，并没有编程语言或框架的限制。唯一的实际限制是以操作系统的角度来允许容器做什么。即使如此，也可以在特权模式下运行容器，从而大大减少了限制（与之对应的是容器中的应用程序的风险增加，可能导致损坏主机操作系统）。
容器都是从镜像开始运行的，而镜像也可以从运行中的容器获取。本质上说，有两种方法可以将应用程序放到容器中，分别是手动构建和 Dockerfile。
#### 手动构建
手动构建从启动一个基础的操作系统镜像开始，然后在交互式终端中用你所选的 Linux 提供的包管理器安装应用程序及其依赖项。Zef Hemel 在‘[使用 Linux 容器来支持便携式应用程序部署](http://www.infoq.com/articles/docker-containers)’的文章中讲述了他部署的过程。一旦应用程序被安装之后，容器就可以被推送至注册库（例如Docker Hub）或者导出为一个tar文件。