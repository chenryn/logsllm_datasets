specifications of message formats and protocols. The OWL-S Editor plug-in provides
an excellent overview of the relations between the different OWL-S ontologies which
5
Escórcio, L. and Cardoso, J. "Editing Tools for Ontology Construction", in "Semantic Web Services:
Theory, Tools and Applications", Idea Group. (scheduled for March 2007).
Copyright of authors until publication.
are shown in an intuitive way in the Graphic User Interface (GUI) and can also be
shown as a graph
OntoEdit
OntoEdit (Sure et al., 2002) was developed by the Knowledge Management Group of
the AIFB Institute at the University of Karlsruhe. It is an ontology engineering
environment which allows creating, browsing, maintaining and managing ontologies.
The environment supports the collaborative development of ontologies (Sure et al.
2002). This is archived through its client/server architecture where ontologies are
managed in a central server and various clients can access and modify these ontologies.
Currently, the successor of OntoEdit is OntoStudio (Figure 2) which is a commercial
product based on IBM’s development environment Eclipse. It can be downloaded for
three months free evaluation period.
Figure 2: OntoStudio editor
OntoEdit was developed having two major goals in mind. On the one hand, the editor
was designed to be as much as possible independent and neutral of a concrete
representation language. On the other hand, it was planned to provide a powerful
graphical user interface to represent concept hierarchies, relations, domains, ranges,
instances and axioms. OntoEdit supports F−Logic (Fuzzy Logic), RDF Schema and
OIL. The tool is multilingual. Each concept or relation name can be specified in several
languages. This is particularly useful for the collaborative development of ontologies by
teams of researchers spread across several countries and speaking different languages.
From the technical perspective, this feature is archived by using unique identifiers so
that each ontological statement remains clearly defined. The names selected by users
serve merely as an external representation.
OntoEdit is built on top of an internal data representation model. The data model of
OntoEdit is OXML 2.0 which is frame based. OXML is defined in XML using XML-
Schema. Besides concepts, relations and instances, the model can represent predicates,
predicate instances, and axioms. Predicates are n-ary associations and are very similar to
6
Escórcio, L. and Cardoso, J. "Editing Tools for Ontology Construction", in "Semantic Web Services:
Theory, Tools and Applications", Idea Group. (scheduled for March 2007).
Copyright of authors until publication.
predicates defined in first order logic (FOL). Several types of relationships can be
established between concepts, such as symmetric, reflexive,
transitive,antisymmetric,asymmetric, irreflexive, or intransitive.
The internal representation data model can be exported to DAML+OIL, F-Logic,
RDF(S), and OXML. Additionally, ontologies can be exported to relational databases
via JDBC. OntoEdit can import external data representation in DAML+OIL, Excel, F-
Logic, RDF(S), and OXML. OntoSudio can also import and export OWL files.
OntoEdit provides an API for accessing ontologies in an object-oriented fashion. The
default API implementation stores ontologies in main-memory, but an additional API
exists for persistent storage.
The inference engine that OntoEdit uses is OntoBroker [Decker, 1999]. Using this
engine, OntoEdit exploits the strength of F-Logic in that it can represent expressive
rules. OntoBroker is the result of several years of research and it is now a commercial
product. Like Protégé, OntoEdit is based on a plug-in architecture. The architecture
consists of three layers (Figure 3): GUI, OntoEdit core and Parser.
Figure 3: OntoEdit Architecture
Using a plug-in architecture enables users to extend OntoEdit with specific
functionalities. Since the plug-in interface is open to third parties, anyone with special
requirements can deploy a component to satisfy specific needs. Several plug-ins are
available. For example, the Sesame plug-in (Broekstra et al., 2002) is a generic
application for storing and querying RDF and RDF Schema. Sesame allows persistent
storage of RDF data and schema information. It supplies a useful query engine which
supports RQL, an OQL-style query language.
DOE
DOE (Differential Ontology Editor) is a simple ontology editor and was developed by
the INA (Institut National de l’Audiovisuel - France). DOE allows users to build
ontologies according to the methodology proposed by Bruno Bachimont (Isaac et al.,
2002).
DOE has a classical formal specification process. DOE only allows the specification
part of the process of structuring ontology. DOE is rather a complement of others
editors (DOE, 2006). It is not intended to be a direct competitor with other existing
environments (like Protégé, OilEd, OntoEdit or WebODE), instead it was developed to
coexist with other editors in a complementary way. This editor offers linguistics-
inspired techniques which attach a lexical definition to the concepts and relations used,
7
Escórcio, L. and Cardoso, J. "Editing Tools for Ontology Construction", in "Semantic Web Services:
Theory, Tools and Applications", Idea Group. (scheduled for March 2007).
Copyright of authors until publication.
and justify their hierarchies from a theoretical, human-understandable point of view
(DOE, 2006). Therefore, DOE should be used in combination with another editor. For
instance, an editor that has advanced formal specification, e.g. Protégé.
DOE is a simple prototype developed in Java that supports the three steps of the
Bruno Bachimont methodology (Isaac et al., 2002). The Bruno Bachimont methodology
can be described in the following three steps. In the first step, the user builds
taxonomies of concepts and relations. The user has to unambiguously justify the
position for each notion in the hierarchy. The user builds a definition, following four
principles which come from the Differential Semantics theory (Isaac et al, 2002), i.e., 1)
Similarity with Parent, 2) Similarity with Siblings, 3) Difference with Sibling and 4)
Difference with Parent. For each notion, a meaning and a description has to be given.
Consequently, the user has to explicit state why a notion is similar but more specific
than its parent (i.e., Similarity with Parent and Similarity with Siblings), and why this
notion is similar but different from its siblings (i.e., Difference with Sibling and
Difference with Parent). Hence, every concept is located in a justified and convinced
position. It is possible, for the user, to add synonyms and an encyclopedic definition in a
few languages for all notions in the Differential Ontology view. The main goal of this
step is to reach a semantic agreement about the meaning of the labels used for naming
concepts (Isaac et al., 2002).
Figure 4: The differential principles bound to the notion addressed in the DOE tool (differential
ontology view).
In the second step, the ontological tree obtained in the first step allows to
disambiguate the notions. Consequently, the meaning is clarified for a domain-specific
application. The notions become concepts behaving as formal primitives. In the
referential ontology each concept refers to a set of objects in the domain (its extension)
(Isaac et al., 2002). The taxonomies are considered from an extensional semantic point
of view. The user can expand them with new entities (defined) or add constraints onto
the domains of the relations. In this step, the user ought to do consistency checking in
order to look for propagation of the arity all along the hierarchy- if specified - and
8
Escórcio, L. and Cardoso, J. "Editing Tools for Ontology Construction", in "Semantic Web Services:
Theory, Tools and Applications", Idea Group. (scheduled for March 2007).
Copyright of authors until publication.
inheritance of domains. As we said before, DOE main goal is to guide the user during
the first steps of the process of building an ontology. It is not possible to write axioms in
DOE since there is not an axiom editor.
Finally, on the third step, the ontology can be translated into a knowledge
representation language. The referential concepts are compared with the possible
computational operations available in the application Knowledge Based Systems
(KBS). As a result, it is possible to use it in an appropriate ontology-based system or to
import it into another ontology-building tool to specify it further. An export mechanism
was implemented in order to translate the taxonomies into convenient exchange
languages (for example, OWL). This mechanism can also be used to complete the third
step
DOE allows building a differential ontology and a referential ontology, corresponding
to the first two steps of the methodology proposed by Bruno Bachimont. The
Differential Ontology view is divided in two frames. On the left side there is a tree
browser and on the right side there is an editor. The tree browser shows hierarchically
the concepts and the relations (there is a tab for concepts and a tab for relations too, like
in the Referential Ontology view). The editor has three tabs: a definition tab, a different
principles tab and an English tab (or other language that the user wishes to translate the
ontology to). If the definition tab is selected, it will show the “properties” of the items
illustrated in the tree browser. The different principles tab is used to justify the
taxonomy of notions that was build. In other words, the sense of a node is specified by
the gathering of all similarities and differences attached to the notions found on the way
from the root notion (the more generic) to the node that is selected on the tree browser
(on the left) (Isaac et al., 2002). In the Referential Ontology view, the tree browser has
the same features as in the Differential Ontology view (there are two tabs concept tab
and relation tab).
Figure 5: The Referential Ontology view with a concept tree of the Traveling Ontology.
9
Escórcio, L. and Cardoso, J. "Editing Tools for Ontology Construction", in "Semantic Web Services:
Theory, Tools and Applications", Idea Group. (scheduled for March 2007).
Copyright of authors until publication.
While DOE does not have a graph view of the ontology, it includes a tree view that
can show separately the concepts and the relations between the concepts. It is possible
to view an ontology in two different ways: a Differential Ontology view and Referential
Ontology view.
DOE can import RDFS and Ontology Web Language (OWL) formats. It is possible
to export to CGXML, DAML+OIL, OIL (Ontology Inference Language) Plain Text,
OIL XML, RDFS, RDF/XML, and OWL. The RDFS import/export feature is very
helpful when “exchanging” files between editors, for instance OilEd, Protégé and
OntoEdit and vice-versa.
DOE uses XSLT to promote interoperability (Isaac et al., 2003). XSLT is a language
for transforming XML documents into other XML documents. All the exchange
facilities are done with XSLT transformations. The DOE project does not have a
mailing list available to the users. The installation instructions are very simple. There
are no plug-ins for this editor and no user manual too.
In DOE Web page (http://opales.ina.fr/public/ ) there is a self-contained installer of
the complete product for Windows. The user has to fill out a form in order to access the
download page. The installation is fast. After downloading the product, the user has to
run the Setup-DOE-v1.51.exe file and follow the instructions. To run DOE in another
platform, it is required to have a Java 2 (TM) Platform, Standard Edition Version 1.3 or
later (recommended v1.4.1).
IsaViz
IsaViz is a visual environment for browsing and authoring RDF models as graphs. This
tool is offered by W3C Consortium. IsaViz
(http://www.w3.org/2001/11/IsaViz/Overview.html) was developed by Emmanuel
Pietriga. The first version was developed in collaboration with Xerox Research Centre
Europe which also contributed with XVTM, the ancestor of ZVTM (Zoomable Visual
Transformation Machine) upon which IsaViz is built. As of October 2004, further
developments are handled by INRIA Futurs project In Situ. IsaViz also includes
software developed by HP Labs (Jena 2 Semantic Web Toolkit), the Apache Software
Foundation (Xerces Java 2), and makes use of the GraphViz library developed by
AT&T Research (http://www.w3.org/2001/11/IsaViz/Overview.html).
IsaViz does not follow or include any methodology for building an ontology.
IsaViz imports RDF/XML and N-Triples, and exports RDF/XML, N-Triples,
Portable Network Graphics (PNG) and Scalable Vector Graphics (SVG). Therefore, it is
possible to import ontologies to other editors, for instance, Protégé or OilEd. The IsaViz
environment is composed of four main windows: the IsaViz RDF Editor window, the
Graph window, the Definition window and the Attribute window.
• The IsaViz RDF Editor window contains the main menus and a palette of tools.
The Graph window is a ZVTM view
(http://www.w3.org/2001/11/IsaViz/Overview.html ) in which is displayed the RDF
model represented as a 2D graph. ZVTM views display an area of an endless space as
seen through a camera. This camera can be moved in the virtual space and its altitude
can be changed, resulting in a 2.5D Graphical User Interface with smooth zooming
capabilities. IsaViz has a user friendly interface. IsaViz has three different ways of
viewing a graph. This can be a distinguishing feature when evaluating this tool with
others tools. There are 3 different ways of viewing a graph: Graph View; Radar View
10
Escórcio, L. and Cardoso, J. "Editing Tools for Ontology Construction", in "Semantic Web Services:
Theory, Tools and Applications", Idea Group. (scheduled for March 2007).
Copyright of authors until publication.
and Property Browser. IsaViz is also recognized by its Zoomable User interface (ZUI).
This interface allows rapid navigation of the graphs used to represent the RDF models.
The Definitions window is composed of five tabs:
a) The tab Namespaces is a table containing namespace definitions (with their
optional prefix bindings).
b) The tab Property Types is a table containing property type definitions.
c) The tab Property Browser is a text browser in which is exhibit all the properties
associated with the currently selected resource.
d) The tab Stylesheets (since version 2.0) is a table containing all Graph
Stylesheets (GSS) that should be applied to the model.
e) The tab Quick Input (since version 2.0) is a text area used for pasting statements
expressed in RDF/XML, N-Triples or Notation3.
The Attribute window shows the attributes of a selected item of the graph. All the
attributes shown in this window can be edited.
IsaViz can render RDF graphs using GSS, a stylesheet language derived from
Cascade Style Sheet (CSS) and Scalable Vector Graphics (SVG) for styling RDF
models represented as node-link diagrams. Resources and literals are the nodes of the
graph (ellipses and rectangles respectively), with properties represented as the edges
linking these nodes.
Figure 6: IsaViz window view with a node selected.
This editor has a user manual and a Web page with installation instructions. It also
has a mailing list and a list of the most common problems. For that reason, it is really
simple to start using this tool. The user can easily solve the problems that can emerge
during installation or usage, by using the mailing list of IsaViz.
The current stable version is 2.1 (October 2004) and it is being developed an alpha
version: 3.0 (December 2005). IsaViz is implemented in Java and requires a JVM 1.3.x