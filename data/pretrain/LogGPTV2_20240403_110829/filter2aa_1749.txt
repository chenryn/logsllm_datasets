1
tabby分析
tabby是做成⼀个springboot项⽬启动，为什么这么做，暂时不清楚（后⾯清楚了，⽅便数据库操作） 
App.class#run() 流程如下，判断是否是jdk8，然后加载settings配置，然后设置配置，解析配
置，最后基于配置运⾏分析 
2
配置⽂件如下 
配置分析 
3
简单解释下参数 
tabby.build.target: 要分析的⽬标，可以是⼀个⽬录，也可以是⼀个jar包。 
tabby.build.isJDKProcess: 将jre中的三个jar包也加⼊到target进⾏分析，  "lib/rt.jar","lib/jc
e.jar","lib/ext/nashorn.jar"  
tabby.build.withAllJDK: 在上述jre是三个jar包之外，还会增加jdk⾥的jar包分析，共19个jar包 
tabby.build.checkFatJar: 这个是因为像项⽬打包成⼀个fatjar时，内部可能还有jar包，需要进⼀步解析 
tabby.build.libraries: 依赖包⽬录， 这个是为了让target在解析到依赖包时，可以递归依赖解析，不会
全量解析，默认是只有jre的3个jar包做依赖。PS: 如果不设置，默认是libs⽬录。 
tabby.load.enable：开启后，会⾃动导⼊neo4j，如果没开启也不要紧，后续再看，因为之前jar包都分
析过了，就⾃动跳过到导⼊步骤。 
4
这⾥有两个配置可以注意下，  tabby.build.enable   和  tabby.load.enable     
如果先进⾏分析不导⼊neo4j，  tabby.load.enable 可先设置为false，分析完后再把  tabby.bui
ld.enable 设置为false，开启  tabby.load.enable ,只做导⼊，什么情况可能会使⽤，我已经⽣
成过多个graphdb，我需要根据需要导⼊，就可以关闭build，只load。 
这个⽐较简单，先过⼀下 
⼀共两步，reset和save 
reset就是将soot⾥的⼀些属性重置。G类是soot⾥的 
load分析 
tabby/core/Analyser.java#run
5
接着就是save，可以看到三步，保存到csv，然后再保存到neo4j，最后清除csv 
soot/G.java
6
save2CSV，将类、⽅法、关系都保存。 
关系类型分为以下5种，alias(别名)、has(类拥有的⽅法)、extend、call(⽅法调⽤)、interfaces(接⼝) 
tabby/core/Analyser.java#save()
tabby/core/container/DataContainer.java#save2CSV()
7
最终都是通过  @Qquery 注解使⽤默认的hibernate（  CrudRepository ）执⾏查询，这样就不依赖
第三⽅数据库来转换存储，这可能也是为啥使⽤springboot的理由之⼀吧。 
接着就是导⼊neo4j 
tabby/dal/caching/service/RelationshipsService.java#save2CSV()
tabby/dal/caching/repository/ClassRepository.java#save2CSV
8
⽐如⽅法导⼊使⽤的  methodService.importMethodRef() ,如下找到对应csv导⼊ 
src/main/java/tabby/dal/neo4j/repository/MethodRefRepository.java，对应如下，可以看到是继
承neo4j相关类（  Neo4jRepository ），然后也是  @Query 来执⾏，这样只要配置springboot的
application.yml，都不需要配置neo4j的连接、执⾏，⾮常⽅便的导⼊，估计也是因为这使⽤了
springboot。 
PS: 如果需要添加其他⽅法属性，就需要改动这块导⼊的语句了。 
tabby/core/container/DataContainer.java#save2Neo4j
9
最后的buildEdge也就是导⼊各种关系类型 
tabby/dal/neo4j/repository/MethodRefRepository.java#loadMethodRefFromCSV
10
最后clean就是删除csv 
tabby/dal/neo4j/service/ClassService.java
11
如果要做调试，查看中间⽂件csv，其实只需要保留csv的⽣成即可。 
这样你就能查看⼀些需要的信息，可以⽤来排查吧。 
先是获取jdk依赖，3个还是19个，然后收集⽬标jar、class等，这⾥判断是否是IS_JDK_ONLY，来判断
是收集jdk还是收集指定target⽬录，接着添加依赖包，。 
build分析 
Java
复制代码
        dataContainer.save2CSV();
//        dataContainer.save2Neo4j();
//        clean();
1
2
3
12
getTargetDirectoryJarFiles简单来说就是获取⽬标的所有jar包、war包和class，判断是⼀个jar包还是
⽬录来选择不同收集⽅式。这⾥只是做收集，⽐如jar包，除⾮是fatjar，都不会解压成class，只是将路
径存放到paths⾥。 
tabby/core/Analyser.java#run
13
cps和targets都是hashmap，key是md5，value是jar、class等路径。 
targets⽤于存储分析⽬标，cps⽤于存储依赖包，会把targets也存储进去 
14
解析过程⼤致如下 
15