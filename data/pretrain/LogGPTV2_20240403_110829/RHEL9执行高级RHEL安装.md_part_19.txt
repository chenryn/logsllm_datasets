    (["[;]{.quote}"]{.quote})分隔。如果某个选项本身包含一个逗号，请使用分号来分隔选项。例如：
    ``` screen
    network --bondopts=mode=active-backup,balance-rr;primary=eth1
    ```
    ::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 重要 {.title}
    `--bondopts=mode=`{.literal} 参数只支持完整的模式名称，如
    `balance-rr`{.literal} 或
    `broadcast`{.literal}，而不是其数字表示，如 `0`{.literal} 或
    `3`{.literal}。[有关可用模式和支持的模式列表，请参阅配置和管理网络指南](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/configuring_and_managing_networking/configuring-network-bonding_configuring-and-managing-networking#upstream-switch-configuration-depending-on-the-bonding-modes_configuring-network-bonding){.link}。
    :::
-   `--vlanid=`{.literal} - 指定使用 `--device=`{.literal}
    中指定的设备作为父级创建的设备的虚拟 LAN (VLAN) ID 号（802.1q
    标签）。例如，`network --device=em1 --vlanid=171`{.literal} 创建虚拟
    LAN 设备 `em1.171`{.literal}。
-   `--interfaceName=`{.literal} - 为虚拟 LAN 设备指定自定义接口名称。当
    `--vlanid=`{.literal}
    选项所生成的默认名称并不是您所需要的名称时，应使用此选项。此选项必须与
    `--vlanid=`{.literal} 一起使用。例如：
    ``` screen
    network --device=em1 --vlanid=171 --interfacename=vlan171
    ```
    以上命令在 `em1`{.literal} 设备上创建一个名为 `vlan171`{.literal}
    的虚拟 LAN 接口，其 ID 为 `171`{.literal}。
    接口名称可以是任意名称（如
    `my-vlan`{.literal}），但在某些情况下，必须遵循以下约定：
    ::: informalexample
    ::: itemizedlist
    -   如果名称包含句点(`.`{.literal})，则必须采用 `NAME.ID`{.literal}
        的形式。[*NAME*]{.emphasis} 是任意的，但 [*ID*]{.emphasis}
        必须是 VLAN ID。例如： `em1.171`{.literal} 或
        `my-vlan.171`{.literal}。
    -   以 `vlan`{.literal} 开头的名称必须使用 `vlanID`{.literal}
        的形式，如 `vlan171`{.literal}。
    :::
    :::
-   `--teamslaves=`{.literal} - 由 `--device=`{.literal}
    选项指定的团队设备将使用这个选项中指定的辅助设备创建。辅助设备用逗号分开。辅助设备可以跟随其配置，这是单引号括起的
    JSON 字符串，其中双引号用 `\`{.literal} 字符转义。例如：
    ``` screen
    network --teamslaves="p3p1'{\"prio\": -10, \"sticky\": true}',p3p2'{\"prio\": 100}'"
    ```
    另请参阅 `--teamconfig=`{.literal} 选项。
:::
::: informalexample
网络团队在 Red Hat Enterprise Linux 9
中已弃用。考虑使用网络绑定驱动程序作为替代方案。详情请参阅
[配置网络绑定](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/configuring_and_managing_networking/configuring-network-bonding_configuring-and-managing-networking){.link}。
:::
::: itemizedlist
-   `--teamconfig=`{.literal} - 由双引号括起的组设备配置，这是一个 JSON
    字符串，其中双引号由 `\`{.literal} 字符转义。设备名称由
    `--device=`{.literal} 选项指定，其辅助设备及其配置由
    `--teamslaves=`{.literal} 选项指定。例如：
    ``` screen
    network --device team0 --activate --bootproto static --ip=10.34.102.222 --netmask=255.255.255.0 --gateway=10.34.102.254 --nameserver=10.34.39.2 --teamslaves="p3p1'{\"prio\": -10, \"sticky\": true}',p3p2'{\"prio\": 100}'" --teamconfig="{\"runner\": {\"name\": \"activebackup\"}}"
    ```
:::
::: informalexample
网络团队在 Red Hat Enterprise Linux 9
中已弃用。考虑使用网络绑定驱动程序作为替代方案。详情请参阅
[配置网络绑定](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/configuring_and_managing_networking/configuring-network-bonding_configuring-and-managing-networking){.link}。
:::
::: itemizedlist
-   `--bridgeslaves=`{.literal} - 使用此选项时，将创建
    `--device=`{.literal} 选项指定的设备网桥，并将
    `--bridgeslaves=`{.literal} 选项中定义的设备添加到网桥中。例如：
    ``` screen
    network --device=bridge0 --bridgeslaves=em1
    ```
-   `--bridgeopts=`{.literal} - 一个可选的、由逗号分隔的
    桥接接口参数列表。可用值包括
    `stp`{.literal}、`priority`{.literal}、`forward-delay`{.literal}、`hello-time`{.literal}、`max-age`{.literal}
    和 `RunAsAny-time`{.literal}。有关这些参数的详情，请查看
    `nm-settings(5)`{.literal} man page 中的
    [*[网桥]{.citetitle}*]{.emphasis} 设置表，或者查看
    [网络配置设置规格](https://developer.gnome.org/NetworkManager/0.9/ref-settings.html){.link}。
    有关网络桥接的常规信息，请参阅[配置和管理网络](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html-single/configuring_and_managing_networking/){.link}文档。
-   `--bindto=mac`{.literal} -
    在安装的系统中将设备配置（`ifcfg`{.literal}）文件绑定到设备 MAC
    地址（`HWADDR`{.literal}）而不是默认绑定到接口名称（`DEVICE`{.literal}）。请注意，这个选项独立于
    `--device=`{.literal} 选项 - 即使相同的 `network`{.literal}
    命令也指定了设备名称、`link`{.literal} 或
    `bootif`{.literal}，也将应用 `--bindto=mac`{.literal}。
:::
::: itemizedlist
**备注**
-   由于命名方案的变化，`ethN`{.literal}
    格式的设备名称，如`eth0`{.literal} 在 Red Hat Enterprise Linux 9
    中不再可用。有关设备命名方案的更多信息，请参阅上游文档[可扩展网络接口名称](https://www.freedesktop.org/wiki/Software/systemd/PredictableNetworkInterfaceNames/){.link}。
-   如果您使用 Kickstart
    选项或者引导选项指定网络中的安装程序库，但安装过程开始时无法使用网络，安装程序会在显示
    [**[安装概述]{.GUI}**]{.strong}窗口前，显示[**[网络配置]{.GUI}**]{.strong}窗口以用于设置网络连接。如需了解更多详细信息，请参阅执行[*标准
    RHEL
    安装文档*]{.emphasis}中的[配置网络和主机名选项](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/performing_a_standard_rhel_installation/graphical-installation_graphical-installation#network-hostname_configuring-system-settings){.link}部分。
:::
:::
::: section
::: titlepage
## []{#kickstart-commands-and-options-reference_installing-rhel-as-an-experienced-user.html#realm_kickstart-commands-for-network-configuration}realm {.title}
:::
`realm`{.literal} Kickstart 命令是可选的。使用它加入 Active Directory 或
IPA 域。有关此命令的更多信息，请参阅 `realm(8)man`{.literal} page 的
`join`{.literal} 部分。
::: title
**Syntax**
:::
``` screen
realm join [OPTIONS] domain
```
::: itemizedlist
**必填选项**
-   `domain`{.literal} - 要加入的域。
:::
::: itemizedlist
**选项**
-   `--computer-ou=OU=`{.literal} -
    提供可分辨的机构单元名称以便创建计算机帐户。可识别名称的具体格式取决于客户端软件和成员软件。可省略可识别名称的根
    DSE 部分。
-   `--no-password`{.literal} - 无需密码自动加入.
-   `--one-time-password=`{.literal} -
    使用一次性密码加入。不是所有域都支持它。
-   `--client-software=`{.literal} -
    仅加入能够运行此客户端软件的域。有效值包括 `sssd`{.literal} 和
    `winbind`{.literal}。不是所有域都支持所有值。默认情况下自动选择客户端软件。
-   `--server-software=`{.literal} -
    仅加入能够运行此服务器软件的域。可能的值包括
    `active-directory`{.literal} 或 `freeipa`{.literal}。
-   `--membership-software=`{.literal} - 加入域时使用此软件。有效值包括
    `samba`{.literal} 和
    `adcli`{.literal}。不是所有域都支持所有值。默认情况下自动选择成员软件。
:::
:::
:::
::: section
::: titlepage
# []{#kickstart-commands-and-options-reference_installing-rhel-as-an-experienced-user.html#kickstart-commands-for-handling-storage_kickstart-commands-and-options-reference}用于处理存储的 Kickstart 命令 {.title}
:::
这部分中的 Kickstart 命令配置存储的各个方面，比如设备、磁盘、分区、LVM
和文件系统。
::: section
::: titlepage
## []{#kickstart-commands-and-options-reference_installing-rhel-as-an-experienced-user.html#autopart_kickstart-commands-for-handling-storage}autopart {.title}
:::
`autopart`{.literal} Kickstart 命令是可选的。它自动创建分区。
自动创建的分区是：根(`/`{.literal})分区（1 GiB
或更大）、`交换分区`{.literal}，以及适合该体系结构的 `/boot`{.literal}
分区。在足够大的驱动器（50 GiB 及更高版本）上，这还会创建一个
`/home`{.literal} 分区。
::: title
**Syntax**
:::
``` screen
autopart OPTIONS
```
::: itemizedlist
**选项**
-   `--type=`{.literal} -
    选择您要使用的预定义自动分区方案之一。可接受以下值：
    ::: informalexample
    ::: itemizedlist
    -   `lvm`{.literal}:LVM 分区方案。
    -   `plain`{.literal}:无 LVM 的常规分区。
    -   `thinp`{.literal}:LVM Thin Provisioning 分区方案。
    :::
    :::
-   `--fstype=`{.literal} - 选择其中一个可用文件系统类型。可用值包括
    `ext2`{.literal}、`ext3`{.literal}、`ext4`{.literal}、`xfs`{.literal}
    和 `vfat`{.literal}。默认的文件系统是 `xfs`{.literal}。
-   `--nohome`{.literal} - 禁用自动创建 `/home`{.literal} 分区。
-   `--nolvm`{.literal} - 不使用 LVM 进行自动分区。这个选项等同于
    `--type=plain`{.literal}。
-   `--noboot`{.literal} - 不创建 `/boot`{.literal} 分区。
-   `--noswap`{.literal} - 不创建交换分区。
-   `--encrypted`{.literal} - 使用 Linux 统一密钥设置 (LUKS)
    加密所有分区。这等同于在手动图形安装的初始分区界面中选择[**[加密分区]{.GUI}**]{.strong}选项。
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    在加密一个或多个分区时， Anaconda 会尝试收集 256
    字节熵，以保证安全加密分区。收集熵可能需要一些时间 -
    无论是否有收集到足够的熵，该过程将在最多 10 分钟后停止。
    与安装系统互动（通过键盘输入或移动鼠标）可加速此进程。如果要在虚拟机中安装，您还可以将
    `virtio-rng`{.literal} 设备（虚拟随机数生成器）附加到客户机。
    :::
-   `--LUKS-version=LUKS_VERSION`{.literal} - 指定应该使用哪个版本的
    LUKS 格式来加密文件系统。只有在指定了 `--encrypted`{.literal}
    时这个选项才有意义。
-   `--passphrase=`{.literal} -
    为所有加密设备提供默认的系统范围密码短语。
-   `--escrowcert=URL_of_X.509_certificate`{.literal} -
    将所有加密卷的数据加密密钥保存在 `/root`{.literal}
    的文件中，使用来自 [*URL_of_X.509_certificate*]{.emphasis} 指定的
    URL 的 X.509
    证书进行加密。每个加密卷的密钥都作为单独的文件保存。只有在指定了
    `--encrypted`{.literal} 时这个选项才有意义。
-   `--backuppassphrase`{.literal} -
    为每个加密卷添加随机生成的密码短语。将这些密码短语存储在
    `/root`{.literal} 中的单独文件中，使用通过 `--escrowcert`{.literal}
    指定的 X.509 证书进行加密。只有在指定了 `--escrowcert`{.literal}
    时这个选项才有意义。
-   `--cipher=`{.literal} - 指定在 Anaconda 默认
    `aes-xts-plain64`{.literal} 时要使用的加密类型。这个选项必须与
    `--encrypted`{.literal}
    选项一同使用；其本身无效。[安全强化](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html-single/security_hardening/){.link}
    文档中列出了可用的加密类型，但红帽强烈建议您使用
    `aes-xts-plain64`{.literal} 或 `aes-cbc-essiv:sha256`{.literal}。
-   `--pbkdf=PBKDF`{.literal} - 为 LUKS keylot 设置
    PBKDF（Password-Based Key Derivation Function）算法。另请参阅 man
    page [*cryptsetup(8)*]{.emphasis}。只有在指定了
    `--encrypted`{.literal} 时这个选项才有意义。
-   `--PBKDF-memory=PBKDF_MEMORY`{.literal} - 设置 PBKDF
    的内存成本。另请参阅 man page
    [*cryptsetup(8)*]{.emphasis}。只有在指定了 `--encrypted`{.literal}
    时这个选项才有意义。
-   `--PBKDF-time=PBKDF_TIME`{.literal} - 设置 PBKDF
    密码处理所花费的毫秒数。另请参阅 man page
    [*cryptsetup(8)*]{.emphasis} 中的
    `--iter-time`{.literal}。只有在指定了 `--encrypted`{.literal}
    时这个选项才有意义，并且与 `--pbkdf-iterations`{.literal} 相互排斥。
-   `--PBKDF-iterations=PBKDF_ITERATIONS`{.literal} -
    设定直接迭代数量并避免 PBKDF 基准测试。另请参阅 man page
    [*cryptsetup(8)*]{.emphasis} 中的
    `--pbkdf-force-iterations`{.literal}。只有在指定了
    `--encrypted`{.literal} 时这个选项才有意义，并且与
    `--pbkdf-time`{.literal} 相互排斥。
:::
::: itemizedlist
**备注**
-   `autopart`{.literal} 选项不能与同一 Kickstart 文件中的
    `part/partition`{.literal}、`raid`{.literal}、`logvol`{.literal} 或
    `volgroup`{.literal} 选项一同使用。
-   `autopart`{.literal} 命令不是强制的，但如果 Kickstart 脚本中没有
    `part`{.literal} 或 `mount`{.literal} 命令，则必须包含该命令。
-   在 CMS 类型的单个 FBA DASD 中安装时，建议使用
    `autopart --nohome`{.literal} Kickstart
    选项。这样可保证安装程序不会创建单独的 `/home`{.literal}
    分区。安装过程可以成功进行。
-   如果您丢失了 LUKS
    密码短语，那么就完全无法访问所有加密的分区及其数据。丢失的密码短语是无法找回的。但是，您可以使用
    `--escrowcert`{.literal} 保存加密密码短语，并使用
    `--backuppassphrase`{.literal} 选项创建加密密码短语备份。
-   在使用 `autopart`{.literal}, `autopart --type=lvm`{.literal}, 或
    `autopart=thinp`{.literal} 时，请确保磁盘扇区大小一致。
:::
:::
::: section
::: titlepage
## []{#kickstart-commands-and-options-reference_installing-rhel-as-an-experienced-user.html#bootloader-required_kickstart-commands-for-handling-storage}bootloader（必需） {.title}
:::
`bootloader`{.literal} Kickstart
命令是必需的。它指定引导装载程序的安装方式。
::: title
**Syntax**
:::
``` screen
bootloader [OPTIONS]
```
::: itemizedlist
**选项**
-   `--append=`{.literal} -
    指定附加内核参数。要指定多个参数，使用空格分隔它们。例如：
    ``` screen
    bootloader --location=mbr --append="hdd=ide-scsi ide=nodma"
    ```
    安装 `plymouth`{.literal} 软件包时会自动添加 `rhgb`{.literal} 和
    `quiet`{.literal} 参数，即使您在此未指定参数或根本不使用
    `--append=`{.literal} 命令。要禁用此行为，请明确禁止安装
    `plymouth`{.literal}：