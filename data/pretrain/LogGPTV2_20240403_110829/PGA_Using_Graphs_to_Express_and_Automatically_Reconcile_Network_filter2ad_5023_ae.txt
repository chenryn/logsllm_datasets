composed graph from D1 has 8 EPGs and 11 edges. For
D2, the composed graph has nearly 4K unique EPGs and
over 76× the number of edges as the input graphs; in this
case, high edge multiplication occurred in graph normaliza-
tion because some input graph EPGs were deﬁned by top-
level labels in the label hierarchy.
Runtime Overhead. Fig. 8 shows the additional runtime la-
tency incurred at the controller for the ﬁrst packet of a ﬂow
by relying on PGA for determining the policy from the com-
posed graphs of D1 (Small) D2 (Large). The input sam-
ples (pairs of EPGs) were randomly picked for D1. For D2,
we picked more samples that had a large number of edges
(10-30) between the EPG pair. This is because the proto-
type evaluates a packet linearly against each edge between
the EPG pair until it ﬁnds the matching ﬂow space and so
39composition time
Memory
 600
 500
 400
 300
 200
 100
)
s
(
e
m
i
t
n
o
i
t
i
s
o
p
m
o
C
 0
 0
 1
 2
 3
 4
 5
 1.2
 1.1
 1
 0.9
 0.8
 0.7
 0.6
)
B
G
(
y
r
o
m
e
M
composition time
Memory
 600
 500
 400
 300
 200
 100
)
s
(
e
m
i
t
n
o
i
t
i
s
o
p
m
o
C
composition time
Memory
 1.2
 1.1
 1
 0.9
 0.8
 0.7
)
B
G
(
y
r
o
m
e
M
 600
 500
 400
 300
 200
 100
)
s
(
e
m
i
t
n
o
i
t
i
s
o
p
m
o
C
 1.2
 1.1
 1
 0.9
 0.8
 0.7
)
B
G
(
y
r
o
m
e
M
 0
 0
 2
 4
 6
 8
 10
 0.6
 12
 0
 0
 200
 400
 600
 0.6
 800  1000
# of EPGs (x1000) in input graphs
# of edges (x1000) in input graphs
# of edges (x1000) in composed graph
Figure 10: Scalability of PGA with D2.
Small
Large
)
s
m
(
e
m
T
i
 0.7
 0.6
 0.5
 0.4
 0.3
 0.2
 0.1
 0
Figure 8: PGA induced
additional
la-
tency at the controller for
D1 (Small), D2 (Large).
runtime
F
D
C
 1
 0.8
 0.6
 0.4
 0.2
 0
 0  5  10  15  20  25
# of edges per EPG pair
Figure 9: CDF of #edges
per EPG pair in composed
graph of D2.
incurs additional overhead for every edge; by selecting sam-
ples with the highest number of edges, we evaluate the worst
case performance of PGA for this dataset.
Overall, the latencies are small for both cases. As ex-
pected, D2 results in a higher latency than D1 due to the
higher number of edges.1 Fig. 9 shows the CDF for number
of edges per EPG pair in the composed graph of D2. 95%
of EPG pairs have less than 4 edges between them and 99%
below 11. Even the worst case performance numbers (ob-
tained with >25 edges between EPG pair) have a sub-ms
average latency overhead which is still small and practical
for real time operation. We thus ﬁnd that due to eager com-
position, the runtime overhead of policy lookup is negligible
even for very large graphs. Additionally, the lookup time is
independent of the network size, number of endpoints or the
presence of service chains.
Scalability of PGA. Although PGA composes input graphs
eagerly, it still needs to be able to handle very large inputs in
a reasonable amount of time and with practical consumption
of resources. We exercised PGA by varying the input from
D2. We randomly selected different sets of compartments,
composed their input graphs and measured the composition
time as well as memory consumption. Fig. 10 shows the
measures plotted against number of EPGs in input graphs,
edges in input graphs, and edges in the composed graph.
We omit the measures against number of EPGs in composed
graph since it is similar to that for number of EPGs in input
graphs. The largest input (entire D2) which produced nearly
1M edges in the composed graph required less than 1.2 GB
of memory while completing in under 10 minutes.
If input graphs contain service chains, then the cost of
composition is increased because pairwise analysis of func-
1This may be reduced by using packet classiﬁcation algo-
rithms that run in logarithmic time [16].
tion box interactions is required to determine correct func-
tion box orderings in the composed graph. Since D2 only
contains ACL policies, we simulated a policy dataset with
function boxes (D3) by ﬁrst creating a pool of 16 synthetic
function boxes, each having a bounding behavior that com-
piles to two match-action rules. We then randomly picked
input edges from D2 to which we added a randomly cho-
sen function box from the pool; up to 3500 functions boxes
were added to D2, larger than 1900 middleboxes observed
from very large enterprises (>100K hosts) [37], to yield D3.
Fig. 11 shows the composition time and memory con-
sumption for D3. As expected, composition with service
chain analysis is more expensive than composing only ACL
policies (Fig. 10). Nevertheless, for most cases the com-
position time is <800 seconds and memory consumption is
<20 GB. These are practical numbers for an engine eagerly
composing such large number of policies. Note that the com-
posed graph from D3 can have millions of function boxes,
replicated from the 3500 functions boxes randomly placed
in the inputs graphs; we cached and reused the results of in-
termediate chain analysis to prevent redundant computations
and to save memory.
We also individually measured the time for each of the
two steps of our composition algorithm. The normalization
step is quite inexpensive and accounts for only around 1%
of the total composition time. Although the graph union op-
eration is expensive, we note that it is done in a progres-
sive manner. We ﬁrst compute unions for pairs of smaller
graphs to get larger graphs and then repeat the procedure on
the larger graphs; this algorithm is well suited for a multi-
threaded implementation (future work).
9. RELATED WORK
Abstractions. Providing powerful abstractions for program-
ming network policies has received considerable attention
recently [20, 34, 41, 35, 12, 21, 19, 38, 6, 23, 14, 28].
However, most of these frameworks ([20, 34, 41, 35, 12,
21, 19, 38]) tie policy expression to low-level speciﬁcs such
as device IP/MAC addresses or current locations of packets
within the network. This keeps their complexity as well as
the learning curve for users from lowering, especially when
they want to express pure end-to-end communication polices
without concerning the topology or other details of the net-
work. It also makes them non-intuitive to express dynamic
policies that change based on external events like EP status.
40composition time
Memory
 2000
 1600
 1200
 800
 400
)
s
(
e
m
i
t
n
o
i
t
i
s
o
p
m
o
C
 50
 40
 30
 20
 10
)
B
G
(
y
r
o
m
e
M
 2000
 1600