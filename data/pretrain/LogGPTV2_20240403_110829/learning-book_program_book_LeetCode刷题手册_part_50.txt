Find the k pairs (u1,v1),(u2,v2) ..(uk,vk) with the smallest sums.
Example 1:
Input: numsl = [1,7,11], nums2 = [2,4,6], k = 3
Output: [[1,2],[1,4], [1,6]]
Explanation: The first 3 pairs are returned from the sequence:
[1,2], [1,4], [1,6], [7,2], [7,4], [11,2],[7,6], [11,4], [11,6]
Example 2:
Input: numsl = [1,1,2], nums2 = [1,2,3], k = 2
output: [1,1], [1,1]
Explanation: The first 2 pairs are returned from the sequence:
[1,1], [1,1], [,2], [2,1], [1,2], [2,2], [1,3], [1,3], [2,3]
Example 3:
Input: numsl = [1,2], nums2 = [3], k = 3
output: [1,3], [2,3]
Explanation: All possible pairs are returned from the sequence: [1,3],[2,3]
题目大意
给定两个以升序排列的整形数组nums1和nums2，以及一个整数k。
---
## Page 465
定义一对值（u,v)，其中第一个元素来自nums1，第二个元素来自nums2。
找到和最小的k对数字（u1,v1),（u2,v2)..（uk,vk)。
解题思路
·给出2个数组，和数字k，要求找到k个数值对，数值对两个数的和最小。
·这一题咋一看可以用二分搜索，两个数组两个组合有mn个数值对。然后找到最小的和，最大
的和，在这个范围内进行二分搜索，每分出一个mid，再去找比mid小的数值对有多少个，如果
个数小于k个，那么在右区间上继续二分，如果个数大于k个，那么在左区间上继续二分。到目
前为止，这个思路看似可行。但是每次搜索的数值对是无序的。这会导致最终出现错误的结果。例
如mid=10的时候，小于10的和有22个，而k=25。这说明mid偏小，mid增大，mid
=11的时候，小于11的和有30个，而k=25。这时候应该从这30个和中取前25个。但是
我们遍历数值对的时候，和并不是从小到大排序的。这时候还需要额外对这30个候选值进行排
序。这样时间复杂度又增大了。
·可以先用暴力解法解答。将所有的和都遍历出来，排序以后，取前k个。这个暴力方法可以AC。
·本题最优解应该是优先队列。维护一个最小堆。把数值对的和放在这个最小堆中，不断的pop出
k个最小值到数组中，即为答案。
·在已排序的矩阵中寻找最K小的元素这一系列的题目有：第373题，第378题，第668题，第
719题，第786题。
代码
package leetcode
import（
"container/heap"
"sort"
//解法一优先队列
func kSmallestPairs(nums1 []int, nums2 []int, k int) [][]int {
resu]t, h := [][]int{}，&minHeap{}
if 1en(nums1) == 0 11 1en(nums2) == 0 11 k == 0 {
return result
if 1en(nums1)*1en(nums2) = k {
return res[:k]
return res
---
## Page 467
378.KthSmallestElementinaSortedMatrix
题目
Given a n x n matrix where each of the rows and columns are sorted in ascending order, find the
kth smallest element in the matrix.
Note that it is the kth smallest element in the sorted order, not the kth dlistinct element.
Example:
matrix = [
[1， 5， 9]，
[10, 11, 13],
[12, 13, 15]
]，
k = 8,
return 13
Note: You may assume k is always valid, 1 ≤ k ≤ n2
题目大意
给定一个nXn矩阵，其中每行和每列元素均按升序排序，找到矩阵中第k小的元素。请注意，它是排
序后的第k小元素，而不是第k个元素。
说明：
你可以假设k的值永远是有效的，1≤k≤n2。
解题思路
·给出一个行有序，列有序的矩阵（并非是按照下标有序的），要求找出这个矩阵中第K小的元素。注
意找的第K小元素指的不是k个不同的元素，可能存在相同的元素。
·最容易想到的就解法是优先队列。依次把矩阵中的元素推入到优先队列中。维护一个最小堆，一旦
优先队列里面的元素有k个了，就算找到结果了。
·这一题最优解法是二分搜索。那搜索的空间是什么呢？根据题意，可以知道，矩阵左上角的那个元
素是最小的，右下角的元素是最大的。即矩阵第一个元素确定了下界，矩阵的最后一个元素确定了
上界。在这个解空间里面二分搜索所有值，找到第K小的元素。判断是否找到的条件是，在矩阵
中比mid小的元素个数等于K。不断的逼近low，使得low==high的时候，就是找到了第K小的
元素了。（因为题目中说了，一定会存在第K小元素，所以二分搜索到一个元素的时候，一定会得
出结果)。
---
## Page 468
Step 1:
middle = (start + end) / 2
middle = (2 + 11) / 2 = 6
10
llest number greater than the middle(6): 7
Biggest number less than or equal to the middle(6): 6
iddle(6) = 4
Step 2:
middle = (7 + 11) /2 = 9
middle = (start + end) / 2
3
10
11
Smallest number greater than the middle(9): 10
Biggest number less than or equal to the middie(9): 8
Number of elements less than or equal to the middle(9) = 7
As mhere are 7 elements less than or equal to mhe mic
ng lor the Sth smallest number,
er less than or equal to the middle.
Step3:
middle = (start + end) / 2
middle = (7 + 8) / 2 = 7
Smallest number greater than the middle(7): 8
Biggest number less than or equal to the middle(7): 7
Number of elements less than or equal to the middle(7) = 5
nu peunbeuuno sl eppw eus ot enbe zo ueug ssal jeqwnu jse55q eg sj ypqm
As there are 5 elements less than or equal to the middle therefore 7,
代码
package leetcode
import （
"container/heap'
---
## Page 469
//解法一
二分搜索
func kthSmallest378(matrix [][]int, k int) int {
m, n,low := len(matrix), 1en(matrix[o]), matrix[o][0]
high := matrix[m-1][n-1] + 1
for low >1
//如果count比k小，在大值的那一半继续二分搜索
if counterkthsmal1(m,n,mid, matrix) >=k {
high = mid
}else{
1ow = mid + 1
return 1ow
}
func counterKthsmall(m,n,mid int, matrix [][]int) int {
count, j := 0, n-1
//每次循环统计比mid值小的元素个数
for i := 0; i = 0 && mid  p.data[b] . (int)
func (p *pq) Swap(a, b int) {
p.data[a], p.data[b] = p.data[b], p.data[a]
func （p *pq) Push(o interface{}){
p.data[p.1en] = 0
p.len++
func （p *pq) Head() interface{} {
return p.data[0]
func （p *pq) PopO interface{}{
p.1en--
return p.data[p.len]
385.MiniParser
题目
Given a nested list of integers represented as a string, implement a parser to dleserialize it.
Each element is either an integer, or a list -- whose elements may also be integers or other lists.
Note: You may assume that the string is well-formed:
●String is non-empty.
● String does not contain white spaces.
●String contains only digits 09, [,  G J-
Example 1:
---
## Page 471
Given s = "324",
You should return a NestedInteger object which contains a single integer 324.
Example 2:
Given s = “[123, [456, [789]]]",
Return a NestedInteger object containing a nested list with 2 elements:
1. An integer containing value 123.
2. A nested 1ist containing two elements:
i.An integer containing value 456.
ii. A nested list with one element:
a. An integer containing value 789.
题目大意
给定一个用字符串表示的整数的嵌套列表，实现一个解析它的语法分析器。列表中的每个元素只可能是
整数或整数嵌套列表
提示：你可以假定这些字符串都是格式良好的：
·字符串非空
·字符串不包含空格
·字符串只包含数字0-9.[-]
解题思路
·将一个嵌套的数据结构中的数字转换成Nestednteger数据结构。
·这一题用栈一层一层的处理就行。有一些比较坑的特殊的边界数据见测试文件。这一题正确率比很
多Hard题还要低的原因应该是没有理解好题目和边界测试数据没有考虑到。Nestedlnteger这个
数据结构笔者实现了一遍，见代码。
代码
package leetcode
import(
,4.
"strconv"
1
/★
* // This is the interface that allows for creating nested lists.
---
## Page 472
*// You should not implement it, or speculate about its implementation
type NestedInteger struct {
*// Return true if this NestedInteger holds a single integer,rather than a
nested list.
*func (n NestedInteger) IsIntegerO bool {}
*// Return the single integer that this NestedInteger holds,if it holds a
single integer
* // The result is undefined if this NestedInteger holds a nested list
* // So before calling this method, you should have a check
func (n NestedInteger) GetInteger() int {}
*// Set this NestedInteger to hold a single integer.
func (n *NestedInteger) SetInteger(value int) {}
to it.
func (n *NestedInteger) Add（elem NestedInteger) {}
*// Return the nested list that this NestedInteger holds, if it holds a
nested list
*// You can access NestedInteger's List element directly if you want to
modify it
func (n NestedInteger) GetList() []*NestedInteger {}
*/
// NestedInteger define
type NestedInteger struct {
Num int
List []*NestedInteger
}
// IsInteger define
func (n NestedInteger) IsInteger() bool{
if n.List == nil {
return true
return false
// GetInteger define
func (n NestedInteger) GetInteger() int {
return n.Num
// SetInteger define
---
## Page 473
func (n *NestedInteger) SetInteger(value int) {
n.Num = value
// Add define
func (n *NestedInteger) Add(elem NestedInteger) {
n.List = append(n.List, &elem)
}
// GetList define
func (n NestedInteger) GetList(） []*NestedInteger{
return n.List
// print define
func (n NestedInteger) Print(){
if len(n.List) != 0 {
for
-,V := range n.List {
if len(v.List) != 0 {
v.Print()
return
fmt.Printf("%v ", v.Num)
}else{
fmt. Printf("%v ", n.Num)
fmt. Printf("\n")
func deserialize(s string) *NestedInteger {
stack, cur := []*NestedInteger{}， &NestedInteger{}
for i:= 0;i0{
stack[len(stack) -1].List = append(stack[len(stack)-1] .GetList(), next)
}else{
cur = next
i =j
case s[i] == '[':
next := &NestedInteger{}
---
## Page 474
if len(stack) > 0{
stack[len(stack)-1].List = append(stack[1en(stack)-1] .GetList(), next)
上
stack = append(stack, next)
i++
case s[i] == *]′:
cur = stack[len(stack)-1]
stack = stack[:len(stack)-1]
i++
case s[i] == ',':
i++
return cur
386.LexicographicalNumbers
题目
Given an integer n, return 1 - n in lexicographical order.
For example, given 13, return: [1,10,11,12,13,2,3,4,5,6,7,8,9]
se auel se aq Aew azis ndu au1 aoeds pue awjq ssal asn o wpjuogle no azjwgdlo aseald
5,000,000.
题目大意
给定一个整数n,返回从1到n的字典顺序。例如，给定n=13，返回[1,10,11,12,13,2,3,4,5,6,7,8,9]。
请尽可能的优化算法的时间复杂度和空间复杂度。输入的数据n小于等于5.000.000。
解题思路
·给出一个数字n，要求按照字典序对1-n这n个数排序。
·DFS暴力求解即可。
代码
package leetcode
func lexicalorder(n int) []int {
res := make([]int, 0, n)
dfs386(1, n, &res)
return res