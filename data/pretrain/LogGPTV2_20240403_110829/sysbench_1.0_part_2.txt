end
print(c1:query_row("SHOW GLOBAL STATUS LIKE 'Handler_read_rnd_next'"))
$ sysbench test.lua
1 foo
2 bar
Handler_read_rnd_next 11718125
20.1
Latency histograms
ffi.cdef("int usleep(int microseconds);")
function event()
ffi.C.usleep(1000)
end
$ sysbench test.lua --events=100 --histogram run
Latency histogram (values are in milliseconds)
value ------------- distribution ------------- count
1.044 |** 2
1.063 |********************************** 28
1.082 |**************************************** 33
1.102 |*************************** 22
1.122 |**************** 13
1.142 |** 2
General statistics:
total time: 0.1119s
total number of events: 100
Latency (ms):
min: 1.06
avg: 1.09
max: 1.16
95th percentile: 1.10
sum: 109.23
21.1
Error hooks
problem: special handling for specific SQL errors
restart transactions on deadlocks
reconnect to out-of-sync cluster node
route queries to another node
solution in sysbench 0.5:
--mysql-ignore-errors=1213,1020
22.1
Error hooks
solution in sysbench 1.0:
reconnect to same node on
ER_UNKNOWN_COM_ERROR
function sysbench.hooks.sql_error_ignorable(err)
if err.sql_errno == 1047 then -- ER_UNKNOWN_COM_ERROR
print("Node is out of sync, waiting to reconnect...")
con:reconnect()
return true
end
end
CR_SERVER_LOST
reconnect to a new node on
function sysbench.hooks.sql_error_ignorable(err)
if err.sql_errno == 2013 then -- CR_SERVER_LOST
print("Node is down, reconnecting to a new one...")
con = drv:connect()
return true
end
end
23.1
Custom commands
sysbench 0.4 / 0.5:
prepare run cleanup help
predefined set: , , ,
sysbench 1.0:
scripts can define their own commands:
sysbench.cmdline.commands = {
prewarm = {cmd_prewarm}
}
function cmd_prewarm()
print("Loading sbtest1 into buffer pool...")
db_query("SELECT AVG(id) FROM sbtest1 FORCE KEY (PRIMARY)")
db_query("SELECT COUNT(*) FROM sbtest1 WHERE k LIKE '%0%'")
end
$ sysbench mybench.lua prewarm
Loading sbtest1 into buffer pool...
24.1
Parallel commands
run
sysbench 0.4 / 0.5: all commands except
executed in a single thread
sysbench 1.0:
can declare custom commands supporting
parallel execution:
sysbench.cmdline.commands = {
prepare = {parallel_prepare, sysbench.cmdline.PARALLEL_COMMAND}
}
function parallel_prepare()
db_query("CREATE TABLE sbtest" .. sysbench.tid .. "(a INT)");
db_query("INSERT INTO sbtest" .. sysbench.tid .." VALUES (...)")
end
25.1
Custom reports
standard human-readable reports in sysbench:
[ 8s ] thds: 32 tps: 11580.79 qps: 232597.61 (r/w/o: 162993.88/46390.16/23213.57) lat (ms,95%): 4.10 err/s: 52.99 reconn/
[ 9s ] thds: 32 tps: 11703.11 qps: 234551.37 (r/w/o: 164282.69/46826.45/23442.23) lat (ms,95%): 3.96 err/s: 35.01 reconn/
SQL statistics:
queries performed:
read: 1678180
write: 478000
other: 239239
total: 2395419
transactions: 119369 (11926.57 per sec.)
queries: 2395419 (239334.51 per sec.)
ignored errors: 501 (50.06 per sec.)
reconnects: 0 (0.00 per sec.)
General statistics:
total time: 10.0069s
total number of events: 119369
Latency (ms):
min: 1.42
avg: 2.68
max: 15.78
95th percentile: 4.10
sum: 319811.19
hard to parse into a machine-readable format
26.1
Long-requested feature
sysbench 1.0: hooks to print statistics in custom
formats
example: CSV
function sysbench.hooks.report_intermediate(stat)
local seconds = stat.time_interval
print(string.format("%.0f,%u,%4.2f,%4.2f,%4.2f,%4.2f,%4.2f,%4.2f,%4.2f,%4.2f",
stat.time_total, stat.threads_running,
stat.events / seconds, (stat.reads + stat.writes + stat.other) / seconds,
stat.reads / seconds, stat.writes / seconds, stat.other / seconds,
stat.latency_pct * 1000, stat.errors / seconds, stat.reconnects / seconds))
end
$ sysbench test.lua --threads=32 --report-interval=1 run
1,32,12227.49,245589.45,172087.82,48972.82,24528.81,3.89,43.90,0.00
2,32,12580.84,252341.05,176742.96,50390.39,25207.70,3.68,44.01,0.00
3,32,12594.35,252761.04,177069.93,50451.40,25239.70,3.55,54.00,0.00
4,32,12377.77,248495.40,174108.78,49571.08,24815.54,4.03,57.00,0.00
5,32,12495.12,250733.49,175668.75,50026.50,25038.25,3.75,48.00,0.00
6,32,12451.92,249896.37,175062.86,49875.67,24957.84,3.96,53.00,0.00
7,32,12208.90,244758.96,171428.57,48874.59,24455.80,4.25,40.00,0.00
8,32,12109.62,243071.29,170291.57,48508.48,24271.24,4.25,50.99,0.00
9,32,12335.24,247441.91,173355.47,49365.96,24720.49,4.10,50.01,0.00
27.1
Custom reports: JSON example
function sysbench.hooks.report_intermediate(stat)
local seconds = stat.time_interval
print(string.format([[
{
"time": %4.0f,
...
},]], stat.time_total, stat.threads_running, stat.events / seconds,
(stat.reads + stat.writes + stat.other) / seconds, stat.reads / seconds,
stat.writes / seconds, stat.other / seconds, stat.latency_pct * 1000,
stat.errors / seconds, stat.reconnects / seconds))
end
$ sysbench test.lua --threads=32 --report-interval=1 run
{
"time": 7,
"threads": 32,
"tps": 12003.44,
"qps": {
"total": 240990.88,
"reads": 168816.22,
"writes": 48114.77,
"other": 24059.89,
},
"latency": 4.33,
"errors": 52.00,
"reconnects": 0.00
},
28.1
Custom reports
store results in Prometheus/Graphite/etc.
get custom perf. metrics from OS or MySQL server:
sysbench.hooks.report_intermediate =
function (stat)
if con == nil then
con = assert(sysbench.sql.driver():connect())
end
sysbench.report_default(stat)
name, avglat = con:query_row([[
SELECT event_name AS event, avg_timer_wait as avg_latency
FROM performance_schema.events_waits_summary_global_by_event_name
WHERE event_name != 'idle'
AND sum_timer_wait > 0
ORDER BY sum_timer_wait DESC LIMIT 1;]])
print("top wait event: "..name.." avg_latency: "..avglat)
end
[ 1s ] thds: 1 tps: 492.84 qps: 9869.74 (r/w/o: 6911.71/1971.36/986.68) lat (ms,95%): 2.35 err/s 0.00 reconn/s: 0.00
top wait event: wait/io/file/innodb/innodb_data_file avg_latency: 176826163
29.1
Legacy Lua API
What about old scripts?
"old" sysbench has been around long enough
they will still work at least until the next major
release
there are regression tests to verify legacy API is
functional
30.1
Help wanted!
Unsupported drivers:
Oracle RDBMS
Drizzle
libattachsql
PostgreSQL driver:
supported, but needs more work
31.1
Windows support
Supporting Windows:
incomplete C99 support in MSVC
no support in ConcurrencyKit
but patches are welcome
32.1
The Future:
documentation
packaging
syslinkbench
MongoDB driver
MySQL X Protocol driver
33.1
Summing-up
sysbench 1.0 is the most significant milestone so far
hope it will be as useful for you as it is for me
https://github.com/akopytov/sysbench
these slides: http://kaamos.me/talks/fosdem17
Thank you! Questions?
34.1