in this way, its creator doesn’t need to give it a name.
To increase efficiency, the Object Manager doesn’t look up an object’s
name each time someone uses the object. Instead, it looks up a name under
only two circumstances. The first is when a process creates a named object:
the Object Manager looks up the name to verify that it doesn’t already exist
before storing the new name in the global namespace. The second is when a
process opens a handle to a named object: The Object Manager looks up the
name, finds the object, and then returns an object handle to the caller;
thereafter, the caller uses the handle to refer to the object. When looking up a
name, the Object Manager allows the caller to select either a case-sensitive or
case-insensitive search, a feature that supports Windows Subsystem for
Linux (WSL) and other environments that use case-sensitive file names.
Object directories
The object directory object is the Object Manager’s means for supporting this
hierarchical naming structure. This object is analogous to a file system
directory and contains the names of other objects, possibly even other object
directories. The object directory object maintains enough information to
translate these object names into pointers to the object headers of the objects
themselves. The Object Manager uses the pointers to construct the object
handles that it returns to user-mode callers. Both kernel-mode code
(including executive components and device drivers) and user-mode code
(such as subsystems) can create object directories in which to store objects.
Objects can be stored anywhere in the namespace, but certain object types
will always appear in certain directories due to the fact they are created by a
specialized component in a specific way. For example, the I/O manager
creates an object directory named \Driver, which contains the names of
objects representing loaded non-file-system kernel-mode drivers. Because the
I/O manager is the only component responsible for the creation of Driver
objects (through the IoCreateDriver API), only Driver objects should exist
there.
Table 8-25 lists the standard object directories found on all Windows
systems and what types of objects you can expect to see stored there. Of the
directories listed, only \AppContainerNamedObjects, \BaseNamedObjects,
and \Global?? are generically available for use by standard Win32 or UWP
applications that stick to documented APIs. (See the “Session namespace”
section later in this chapter for more information.)
Table 8-25 Standard object directories
D
ir
ec
to
ry
Types of Object Names Stored
\
A
p
p
C
o
nt
ai
ne
r
N
a
m
ed
O
Only present under the \Sessions object directory for non-Session 0 
interactive sessions; contains the named kernel objects created by 
Win32 or UWP APIs from within processes that are running in an 
App Container.
bj
ec
ts
\
A
rc
N
a
m
e
Symbolic links mapping ARC-style paths to NT-style paths.
\B
as
e
N
a
m
ed
O
bj
ec
ts
Global mutexes, events, semaphores, waitable timers, jobs, ALPC 
ports, symbolic links, and section objects.
\C
al
lb
ac
k
Callback objects (which only drivers can create).
\
D
ev
ic
e
Device objects owned by most drivers except file system and filter 
manager devices, plus the VolumesSafeForWriteAccess event, and 
certain symbolic links such as SystemPartition and BootPartition. 
Also contains the PhysicalMemory section object that allows direct 
access to RAM by kernel components. Finally, contains certain 
object directories, such as Http used by the Http.sys accelerator 
driver, and HarddiskN directories for each physical hard drive.
\
D
ri
ve
r
Driver objects whose type is not “File System Driver” or “File 
System Recognizer” (SERVICE_FILE_SYSTEM_DRIVER or 
SERVICE_RECOGNIZER_DRIVER).
\
D
ri
ve
rS
to
re
(s
)
Symbolic links for locations where OS drivers can be installed and 
managed from. Typically, at least SYSTEM which points to 
\SystemRoot, but can contain more entries on Windows 10X 
devices.
\F
il
e
S
ys
te
m
File-system driver objects (SERVICE_FILE_SYSTEM_DRIVER) 
and file-system recognizer (SERVICE_RECOGNIZER_DRIVER) 
driver and device objects. The Filter Manager also creates its own 
device objects under the Filters object directory.
\
G
L
O
B
A
L
??
Symbolic link objects that represent MS-DOS device names. (The 
\Sessions\0\DosDevices\\Global directories are symbolic 
links to this directory.)
\
Contains event objects that signal kernel pool resource conditions, 
K
er
ne
l
O
bj
ec
ts
the completion of certain operating system tasks, as well as Session 
objects (at least Session0) representing each interactive session, 
and Partition objects (at least MemoryPartition0) for each memory 
partition. Also contains the mutex used to synchronize access to the 
Boot Configuration Database (BC). Finally, contains dynamic 
symbolic links that use a custom callback to refer to the correct 
partition for physical memory and commit resource conditions, and 
for memory error detection.
\
K
n
o
w
n
D
lls
Section objects for the known DLLs mapped by SMSS at startup 
time, and a symbolic link containing the path for known DLLs.
\
K
n
o
w
n
D
lls
3
2
On a 64-bit Windows installation, \KnownDlls contains the native 
64-bit binaries, so this directory is used instead to store WoW64 
32-bit versions of those DLLs.
\
N
L
S
Section objects for mapped national language support (NLS) tables.
\
O
Object type objects for each object type created by 
ObCreateObjectTypeEx.
bj
ec
tT
y
pe
s
\R
P
C 
C
o
nt
ro
l
ALPC ports created to represent remote procedure call (RPC) 
endpoints when Local RPC (ncalrpc) is used. This includes 
explicitly named endpoints, as well as auto-generated COM 
(OLEXXXXX) port names and unnamed ports (LRPC-XXXX, 
where XXXX is a randomly generated hexadecimal value).
\S
ec
ur
it
y
ALPC ports and events used by objects specific to the security 
subsystem.
\S
es
si
o
ns
Per-session namespace directory. (See the next subsection.)
\S
il
o
If at least one Windows Server Container has been created, such as 
by using Docker for Windows with non-VM containers, contains 
object directories for each Silo ID (the Job ID of the root job for the 
container), which then contain the object namespace local to that 
Silo.
\
U
ALPC ports used by the User-Mode Driver Framework (UMDF).
M
D
F
C
o
m
m
u
ni
ca
ti
o
n
P
or
ts
\
V
m
S
ha
re
d
M
e
m
or
y
Section objects used by virtualized instances (VAIL) of 
Win32k.sys and other window manager components on Windows 
10X devices when launching legacy Win32 applications. Also 
contains the Host object directory to represent the other side of 
the connection.
\
W
in
d
o
w
s
Windows subsystem ALPC ports, shared section, and window 
stations in the WindowStations object directory. Desktop Window 
Manager (DWM) also stores its ALPC ports, events, and shared 
sections in this directory, for non-Session 0 sessions. Finally, stores 
the Themes service section object.
Object names are global to a single computer (or to all processors on a
multiprocessor computer), but they’re not visible across a network. However,
the Object Manager’s parse method makes it possible to access named
objects that exist on other computers. For example, the I/O manager, which
supplies file-object services, extends the functions of the Object Manager to
remote files. When asked to open a remote file object, the Object Manager
calls a parse method, which allows the I/O manager to intercept the request
and deliver it to a network redirector, a driver that accesses files across the
network. Server code on the remote Windows system calls the Object
Manager and the I/O manager on that system to find the file object and return
the information back across the network.
Because the kernel objects created by non-app-container processes,
through the Win32 and UWP API, such as mutexes, events, semaphores,
waitable timers, and sections, have their names stored in a single object
directory, no two of these objects can have the same name, even if they are of
a different type. This restriction emphasizes the need to choose names
carefully so that they don’t collide with other names. For example, you could
prefix names with a GUID and/or combine the name with the user’s security
identifier (SID)—but even that would only help with a single instance of an
application per user.
The issue with name collision may seem innocuous, but one security
consideration to keep in mind when dealing with named objects is the
possibility of malicious object name squatting. Although object names in
different sessions are protected from each other, there’s no standard
protection inside the current session namespace that can be set with the
standard Windows API. This makes it possible for an unprivileged
application running in the same session as a privileged application to access
its objects, as described earlier in the object security subsection.
Unfortunately, even if the object creator used a proper DACL to secure the
object, this doesn’t help against the squatting attack, in which the
unprivileged application creates the object before the privileged application,
thus denying access to the legitimate application.
Windows exposes the concept of a private namespace to alleviate this
issue. It allows user-mode applications to create object directories through
the CreatePrivateNamespace API and associate these directories with
boundary descriptors created by the CreateBoundaryDescriptor API, which
are special data structures protecting the directories. These descriptors
contain SIDs describing which security principals are allowed access to the
object directory. In this manner, a privileged application can be sure that
unprivileged applications will not be able to conduct a denial-of-service
attack against its objects. (This doesn’t stop a privileged application from
doing the same, however, but this point is moot.) Additionally, a boundary
descriptor can also contain an integrity level, protecting objects possibly
belonging to the same user account as the application based on the integrity
level of the process. (See Chapter 7 of Part 1 for more information on
integrity levels.)
One of the things that makes boundary descriptors effective mitigations
against squatting attacks is that unlike objects, the creator of a boundary
descriptor must have access (through the SID and integrity level) to the
boundary descriptor. Therefore, an unprivileged application can only create
an unprivileged boundary descriptor. Similarly, when an application wants to
open an object in a private namespace, it must open the namespace using the
same boundary descriptor that was used to create it. Therefore, a privileged
application or service would provide a privileged boundary descriptor, which
would not match the one created by the unprivileged application.
EXPERIMENT: Looking at the base named objects
and private objects
You can see the list of base objects that have names with the
WinObj tool from Sysinternals or with WinObjEx64. However, in
this experiment, we use WinObjEx64 because it supports additional
object types and because it can also show private namespaces. Run
Winobjex64.exe, and click the BaseNamedObjects node in the tree,
as shown here:
The named objects are listed on the right. The icons indicate the
object type:
■    Mutexes are indicated with a stop sign.
■    Sections (Windows file-mapping objects) are shown as
memory chips.
■    Events are shown as exclamation points.
■    Semaphores are indicated with an icon that resembles a
traffic signal.
■    Symbolic links have icons that are curved arrows.
■    Folders indicate object directories.
■    Power/network plugs represent ALPC ports.
■    Timers are shown as Clocks.
■    Other icons such as various types of gears, locks, and chips
are used for other object types.