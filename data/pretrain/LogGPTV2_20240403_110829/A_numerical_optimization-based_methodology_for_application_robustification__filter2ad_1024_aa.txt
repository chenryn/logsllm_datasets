# A Numerical Optimization-Based Methodology for Application Robustification: Transforming Applications for Error Tolerance

**Authors:** Joseph Sloan, David Kesler, Rakesh Kumar, and Ali Rahimi  
**Affiliations:** University of Illinois at Urbana-Champaign, Intel Labs Berkeley  
**Conference:** 2010 IEEE/IFIP International Conference on Dependable Systems & Networks (DSN)

## Abstract
In this paper, we present a numerical optimization-based methodology for transforming applications to be more robust against errors. This approach allows errors to occur freely but ensures that the application can still produce high-quality outputs. We explore the feasibility of converting applications into an error-tolerant form by recasting them as numerical optimization problems, which can then be solved reliably via stochastic optimization. We evaluate our approach using an FPGA-based framework that emulates the floating-point unit (FPU) of a Leon3 processor. Our results show that stochastic versions of applications have the potential to produce good quality outputs in the face of timing errors under certain assumptions. We also demonstrate the energy and performance benefits of this approach.

## 1. Introduction
Power consumption has become a primary design constraint for microprocessors. Modern processors are often designed conservatively to ensure correct operation under worst-case conditions, leading to significant power consumption. Voltage scaling is a common technique for reducing power, but its benefits are limited by the inherently conservative nature of current design practices. Recent proposals have advocated for reducing processor power by eliminating guardbands, but this can lead to unreliability due to timing errors induced by process and environmental variations.

Previous approaches to handle these errors rely on hardware-based mechanisms, which can be costly in terms of area and power. In this paper, we explore an alternative approach that allows errors to occur freely at the algorithmic level and handles them through numerical optimization. This method transforms applications into a form that can tolerate errors, potentially eliminating or minimizing the need for hardware-based error correction.

## 2. Related Work
Several recent works have addressed error tolerance at the algorithmic level. Techniques such as algorithm-based fault tolerance and error-resilient architectures aim to fundamentally re-think the hardware interface during nominal operation. However, these methods are often application-specific and limited in their applicability. Our proposed approach, in contrast, is generic and can potentially drive a wide range of important applications on stochastic processors.

## 3. Proposed Approach
Our goal is to recast a given problem into an equivalent numerical optimization problem that can tolerate errors. The solution to this new problem will correspond to the solution of the original non-robust application. To achieve this, we construct a cost function \( f \) whose minimum corresponds to the desired solution. Solving the problem then amounts to minimizing \( f \).

### 3.1 Stochastic Solvers for Constrained Optimization
Under mild conditions, gradient descent converges to a local optimum of the cost function even when the gradient is known only approximately. We rely on gradient descent as the primary optimization engine to construct algorithms that tolerate noise in the CPU's numerical units. To minimize a cost function \( f : \mathbb{R}^d \to \mathbb{R} \), gradient descent generates a sequence of steps \( x_1, x_2, \ldots \in \mathbb{R}^d \) via the iteration:
\[ x_i \leftarrow x_{i-1} + \lambda_i \nabla f(x_{i-1}), \]
where \( \nabla f(x_{i-1}) \) is a subgradient of \( f \) at \( x_{i-1} \), and \( \lambda_i \) is a step size that may vary from iteration to iteration. The bulk of the computation in gradient descent involves evaluating the gradient and updating the step size. There may be variation-induced errors in the gradient, which we denote as a random variable.

## 4. Evaluation
We evaluate our approach using an FPGA-based framework that emulates the FPU of a Leon3 processor. Our experiments show that stochastic versions of applications have the potential to produce good quality outputs in the face of timing errors under certain assumptions. We also demonstrate the energy and performance benefits of this approach.

## 5. Future Work
Future work will continue to evaluate and mitigate the costs of the proposed approach. We will also investigate the limitations of our methodology and explore the potential of developing code transformation methodologies that address the increasing variability in future CMOS and post-CMOS technologies.

## 6. Conclusion
In this paper, we presented a numerical optimization-based methodology for transforming applications to be more robust against errors. Our approach allows errors to occur freely but ensures that the application can still produce high-quality outputs. We demonstrated the potential of this approach through an FPGA-based framework and showed the benefits in terms of energy and performance.

---

This optimized version of your text is more coherent, concise, and professionally formatted. It clearly outlines the problem, the proposed solution, and the evaluation, while also providing a clear structure for the reader to follow.