4. In nano, press Ctrl+X, Y, and Enter to save your work and exit the editor. Now it’s time
to run the new script.
Note: The Most Common nano Keyboard Shortcuts
As you gain more experience with Linux and its myriad text editors, you may (like
myself) choose nano as your preferred tool. To that end, you should memorize the following
keyboard shortcuts: Ctrl+O (the letter, not zero) to save. Ctrl+V to jump to the next page.
Ctrl+Y to return to the previous page. Ctrl+W to perform a keyword search. Finally, there
is Ctrl+X to exit.
Running Python Scripts
In Raspbian, the path to the Python interpreter is included in the OS program search path. Therefore,
you can invoke Python 3 from wherever you are in the command-line environment. However, you do
need to be aware of where your target script is located.
Task: Running Python Scripts (command line)
When we’re experimenting with the Raspberry Pi in projects that are presented later in
the book, you’ll be running several scripts. Therefore, learning how to execute Python
scripts from the command line is a useful skill for any tech enthusiast, much less a student
of the Raspberry Pi. Let’s begin!
1. Issue pwd to check your present working directory. If you aren’t in your home folder,
issue cd ~.
2. To run a .py Python script that exists in the current directory (like your new script should
be), run the following command:
python3 firstscript.py
3. How did your program run—pretty well? Good. Let’s now change to a different
directory:
cd /tmp
4. Try running the command in step 2 again. Were you successful? No? Now try the
following:
Click here to view code image
python3 /home/pi/firstscript.py
Cool. At this point you should have a pretty good feel for how to run Python scripts from the
command line.
Task: Running Python Scripts (IDLE)
I know that I said earlier that we focus on the IDLE environment in the next chapter,
however, as long as I’m already on the subject it makes sense that I cover running scripts in
IDLE now.
1. From the Raspbian LXDE desktop, double-click IDLE3 to open the Python 3 editor.
Note: Version Control, Re-Revisited
Remember that I’m using Python 3 in this book, so make sure you open IDLE 3 and
not IDLE. You’ll immediately know you’ve invoked the incorrect Python version
because you’ll see errors related to the print function, which underwent a change from
a simple statement to a formal function between Python 2 and Python 3.
2. In the Python Shell window, click File, Open.
3. Use the controls in the Open dialog box to select the target .py script file. I show you this
interface, which should be immediately understandable to OS X and Windows users, in
Figure 10.4.
FIGURE 10.4 IDLE behaves like most GUI editor programs.
4. You’ll see your script show up in a separate IDLE editor window. To actually run the
script, simply click Run, Run Module or press F5.
Broadening Your Python Horizons
Many programmers, myself included, learn a great deal concerning best and worst practices by
studying the code of other developers. To that end, I want to share with you some rich sources of
example Python scripts you should download to your Pi, run, and analyze.
 For instance, here are links to some excellent Python sample code repositories that ought to give you
plenty of experience and fun:
 Code Like a Pythonista: http://is.gd/fE2Owx
 LearnPython.org: http://is.gd/BtqwhA
 Dive into Python 3: http://is.gd/3tP9ZL
 I want to give a shout-out to Professor Anne Dawson of Coquitlam College in Canada: She put
together an excellent list of Python 3 example programs at http://is.gd/Ipv80w. You’ll note that the
file is a plaintext text file, which means you can easily copy and paste her code snippets into your
own environment without carrying any extra HTML formatting baggage.
 There are, however, a number of Python community websites that are static, and every budding
Python programmer should have them bookmarked and review them frequently. Here are my own
hand-picked selections:
 http://is.gd/Pf9vb4: CPython is the standard Python distribution.
 http://is.gd/SGejBj: Python 3 official documentation.
 http://is.gd/EWR7d3: Python Enhancement Proposal (PEP) Index—PEPs are documents that
define the formal Python specifications and best practices.
 http://is.gd/sXV6IU: PEP 20 is called “The Zen of Python” and is required reading for any
aspiring Python programmer.
 http://is.gd/nCexcw: PEP 8 is titled “Style Guide for Python Code.” You’ll find this reference
to be increasingly useful as you gain experience with Python programming.
 http://is.gd/nNYCUy: Learning Python by Rick Lutz is, in my humble opinion, the best Python
beginner’s book on the market.
 So what do you think of Python as compared to Scratch? Are you able to see how Scratch projects are
directly analogous to Python programs, albeit with greater simplicity?
 At base, all computer programs behave the same way as computers: they accept instructions as input,
perform some processing on that data, and then produce output to the user.
 Moreover, all computer languages, no matter how rudimentary or cryptic their syntax rules, do the
same kinds of stuff: the concepts of variables, procedures, loops, debugging, interpretation,
compiling, and execution are the same no matter what specific language you feel most comfortable
with.
 In the next chapter, I help you broaden and deepen your understanding of Python even more. I know
I’ve repeated the point ad nauseam, but you’ll thank me for focusing on Python so much here once you
start building Raspberry Pi projects.
Chapter 11. Programming Raspberry Pi with Python—Next Steps
By the time you’ve had the chance to study the material in Chapter 10, “Programming Raspberry Pi
with Python—Beginnings,” you should have (at the least) the following Python skills under your belt:
 You understand a bit of the purpose behind the Python programming language and why the
Raspberry Pi Foundation wanted it to serve as the fundamental development environment on
the Pi.
 You know how to get in and out of the Python 3 interpreter and get online help for command
syntax.
 You know how to run .py Python script files.
 My learning goals for you in this chapter are as follows:
 To understand how to use the IDLE environment
 To have a basic understanding of Python command syntax
 To know where to go to learn Python formally, from “soup to nuts”
 To understand what modules are and how to import them into Python 3
 The skills you pick up in this chapter are especially important because when you start building
Raspberry Pi projects, you need to understand how to manage Python modules and scripts as well as
understand how the code flow works.
 I finish this chapter by giving you some pointers for additional resources you can turn to if you’re
inspired to deep-dive into Python. Let’s get to work!
Getting Comfortable with IDLE
Fire up Raspbian and double-click the IDLE3 icon on the LXDE desktop. You’ll see the Python Shell
open onscreen, as shown in Figure 11.1. The Python Shell is essentially the Python 3 interpreter with
a bunch of integrated development environment (IDE) stuff like debugging tools built-in. Interestingly,
IDLE is itself a Python application!
FIGURE 11.1 IDLE, also called the Python Shell. You can open the IDLE Preferences dialog by
clicking Options, Configure IDLE.
Note: Why Python 2?
You’ve doubtless noticed that Raspbian includes both Python 2 and Python 3 and that a
separate version of IDLE exists for each language version. In my opinion, Python 2 is
included in Raspbian primarily for backward compatibility with older Python scripts. In
fact, the sample games that are included in the Raspbian image are themselves Python 2
scripts.
Let me briefly explain the purpose of each menu in the IDLE Python Shell:
 File: Used to create and manage .py Python script files.
 Edit: Enables you perform typical word-processing functions (Python scripts are plain text
files, after all).
 Shell: Allows you to restart the Python Shell if something goes wrong (akin to rebooting a
frozen computer).
 Debug: Enables you access tools for troubleshooting your Python scripts.
 Options: Enables you customize the IDLE environment to suit your tastes.
 Windows: Lets you switch among several open script files and the Python Shell.
 Help: Gives you access to the IDLE and Python documentation.
 We’re going to get right into Python development, here. Try issuing the following statements directly
into IDLE at the chevron (>>>) prompt. Remember to press Enter after typing each statement:
25*5
The asterisk represents multiplication. Try division (/), addition (+), and subtraction (-) as well.
len("python")
The len function reports on how many characters a given string consists of.
Click here to view code image
x = input("What is your name? ")
You are storing user input in a new variable named x. I added a space intentionally after the question
mark to put some space between the prompt and the user response.
x
You can persist the value of a variable in the current Python Shell session. If you restart the shell, then
the variable is destroyed.
Click here to view code image
print("I’m gonna add a new line underneath this text. \n")
This command uses the newline escape character (\n) to add an extra line—this makes your programs
easier to read.
#This is a comment
Single-line comments are preceded with the octothorpe or pound sign (#) character.
Click here to view code image
mylist = ["item one" , 2, 3.14]
Lists are a great way to pack multiple pieces of data into a single variable.
print(mylist)
print(mylist)
You can retrieve individual items from a list as well.
type(x)
The type function tells you what data type is associated with a particular variable.
 In preparation for your second real Python script (you wrote your first one in Chapter 10), let’s create
a new file and save it to your home directory.
Task: Creating a New Python Script File
You already know that “the journey of a thousand miles starts with the first step.”
Likewise, before you can author the code in a Python script file, you need to create said
script file in the first place. Let’s get this party started!
1. In Python Shell, click File, New Window.
2. In the Untitled window that appears, click File, Save.
3. In the Save As dialog box, note that the default save location is your home directory.
Name the new file guessing_game and click Save.
4. As a test, click File, Open in the editor window. Verify that guessing_game.py exists in
your home directory.
You now know how to open script files in the Python Shell!
Writing a Simple Game
Next we are going to write a simple number-guessing game that gives you the opportunity to practice
with some common Python code constructions and perhaps have a bit of fun in the process.
 Start with the guessing_game.py file you created in the preceding section. Take a look at the
following code sample (don’t include the line numbers) and then follow that up by studying my
annotations for each line of code.
 For reference, check out Figure 11.2 to see what the completed script looks like on my Raspberry Pi.
Click here to view code image
1. /usr/bin/env python
2. #Number guessing game adapted from
   #inventwithpython.com
3. import random
4. guesscount = 0
5. number = random.randint(1, 10)
6. print("I thought of a number between 1 and 10. Can you guess it in three
tries?\n")
7. while guesscount  number:
          print("Too high.")
13    if guess == number:
          break
14. if guess == number:
15.     guesscount = str(guesscount)
16.     print("Congratulations! You guessed the correct number in " +
guesscount+ " guesses!")
17. if guess != number:
        number = str(number)
        print("Sorry. The number I thought of was " + number + ".")
FIGURE 11.2 The number guessing game source code
On to the purpose of each line in the program:
1. This is the “shebang” line that points Raspbian to the location of the Python interpreter.
2. These are two single-line comments that give credit to the developer on whose code this
example is based on. Incidentally, multiline comments in Python are done using the triple
quote (""") punctuation before and after the comment.
3. Use the import function to bring in external code modules into the Python environment.
Modules are discussed in greater detail later in the chapter. For now, understand that random
is a module that ships with Python and gives you access to functions related to (what else?)
random number generation.
4. Create a variable to store the running count of user guesses and initialize the value of the
variable to zero.
5. Define a variable to hold the randomly selected number. Specifically, you call the randint
function inside of the random module and ask the Python interpreter to generate an integer
(whole number) between 1 and 10, inclusive.
6. This print statement explains the game to the player and inserts a new line between this
prompt and the user’s first guess.
7. The while statement is an example of looping logic. It says “keep repeating whatever code is
indented underneath until the guesscount variable reaches 3.”
8. Populate the guess variable with the user’s typed response.
9. Use the int function to ensure that the user’s input is typed as an integer. This is an example of
type casting, in which you can convert data from one type to another.
10. Increment the guesscount variable by one each time you loop through the indented while
code.
11. The if statement is probably the most common looping function in Python. Here it tests the
guess variable against the computer’s generated number. If the user’s guess is below the
number, it tells the user.
12. This if block does the same thing as 11, but here it tests if the user’s guess is above the
correct value.
13. If the user’s guess matches the computer’s randomly selected number, then you break out of
the while loop and continue with whatever code comes next in the script.
14. This if statement (and the next one) are necessary because if you break out of the while loop
with a correct response, you want to end the game. This line of code also uses concatenation
to combine static text and variable data. More on that later.
15. Convert the guesscount variable, which was created as an integer, to a string value. It’s
common practice to cast numbers to strings when you want to print output for the user.
16. Concatenate, or combine, static text and variable data using the plus (+) operator. This can
get confusing because you can also use the plus sign to perform arithmetic addition.
17. The purpose of this block is to handle the situation in which you leave the while loop
because the user’s guess count exceeds three tries. Here you verify that the user’s guess does
not match the computer’s number (!= is the programmatic equivalent of “not equal to”),
convert the number to a string, and then inform the user.
Delving into a Bit More Detail
You can close your Python script file; let’s work directly in the Python Shell. First, I want to discuss
three Python programming features in a bit more detail:
 variables
 type casting
 concatenation
 I’m calling out these three programming tools because they are so fundamental not only to Python, but
to any programming language. For instance, most computer programs take data and perform some sort
of processing and evaluation on it. How and where do you store that data? What if you need to
convert data from one form to another—how is that done in Python? Finally, how do you combine
multiple pieces of dynamic data?
 Read on, friend...read on.
Variables
 As previously discussed, a variable is a named placeholder for data. Variable naming in Python 3 is
flexible, but there are a few rules that you need to keep in mind:
 Python key words cannot be used as a variable name (naming a variable print is not allowed,
for instance).
 Variable names cannot contain spaces (underscores are okay, though).
 Uppercase and lowercase characters are distinct (Var1 and var1 are considered two separate
variables).
 The first character of a variable name must be a letter a through z, A through Z, or an
underscore character (no numbers to start variable names because this confuses the Python
interpreter).
 After the first character, you can use the digits 0 through 9 and underscores in variable names.
 The equal sign (=) is used to assign value to a variable. This is in stark contrast to the double equals
(==) that are used to test equality between two values. For instance:
 var1 = 2 : This statement says, “The value of the variable named var2 is 2.”
 var1 == 2 : This asks the question, “Does the value of the variable named var1 equal 2?”
Type Casting
 In programming, a variable needs to be associated with a data type. The data type constrains, or
limits, the kind of data stored by the variable. For instance, does the variable x below store a number
or a string of characters? How about the variable y? How do you think Python computes the result of
the variable z in the third code example?
x = "234"
y = 432
z = x + y
In some programming languages, the variable x in the previous example would be assumed to be a
string because of the quotation marks. Therefore, the expression x+ y would fail because you can’t
add a string and a number together.
 Strictly typed programming languages like C require that you declare not only a variable’s name, but
also the type of data that it can hold. Python isn’t like that; it’s much more lax.
 Yes indeed—Python is pretty forgiving, data type-wise. You can use the type function to check the
data type that Python associated with a variable. Try the following:
type(x)
Python 3 supports the following native data types:
 Boolean: Possible values are True or False.