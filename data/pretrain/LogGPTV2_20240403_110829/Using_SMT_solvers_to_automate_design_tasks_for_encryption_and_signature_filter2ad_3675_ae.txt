one partition side and asks how many solutions there are
for the free variables on the other side. If 0 or 1 are found,
then the scheme meets the partitioned deﬁnition. If more
than 1 is found, then it is not partitioned.
If there is no
answer (program crash or times out), then we consider it
not partitioned. Thus, false negatives can occur, but not
false positives (in theory). Proving that there are no soft-
ware or hardware errors in AutoStrong, Z3, Mathematica or
the underlying software and hardware on which they run is
outside the scope of this work. We did experimentally verify
AutoStrong’s outputs and no errors were found.
4.4 Experimental Evaluation of AutoStrong
In 2008 [15], Bellare and Shoup remarked that “unfortu-
nately, there seem to be hardly any [partitioned signature]
schemes”. Interestingly, our experimental results show that
there are in fact many partitioned schemes, including a sub-
stantial number invented prior to 2008. We evaluated Au-
toStrong by testing it on a collection of signatures, including
Camenisch-Lysyanskaya [24], short Boneh-Boyen [17], Wa-
ters 2005 [56], Waters Dual-System (DSE) signature [57],
and a structure-preserving scheme of Abe et al. [1].
Of the above signatures, all but one – the Waters DSE
signature – were successfully partitioned. We do not know
whether the Waters DSE signature can be partitioned, al-
though we suspect that the “randomness freedom” in the
dual-system structure may inherently be at odds with the
uniqueness property of the partitioned test. Although the
Abe et al. scheme is partitioned, applying either the BSW or
BS transformations destroys its structure-preserving prop-
erty. An interesting open problem would be to reﬁne the
BSW or BS transformations to preserve the structured prop-
erty. Figure 6 shows the time that it took our tool to identify
the partitioning and output the revised signature equations.
Figure 5 illustrates the performance and size of the resulting
signatures, when evaluated on two diﬀerent types of curve
(using AutoGroup to calculate the group assignments).
5. CONCLUSION
We explored two new tasks in cryptographic automation.
First, we presented a tool, AutoGroup, for automatically
translating a symmetric pairing scheme into an asymmetric
pairing scheme. The tool allows the user to choose from a
variety of diﬀerent optimization options. Second, we pre-
sented a tool, AutoStrong, for automatically altering a digi-
tal signature scheme to achieve strong unforgeability [6]. The
tool automatically tests whether a scheme is “partitioned”
according to a notion of Boneh et al. [22] and then ap-
plies a highly-eﬃcient transformation if it is partitioned or
a more general transformation otherwise. To perform some
of these complex tasks, we integrated Microsoft’s Z3 SMT
Solver and Mathematica into our tools. Our performance
measurements indicated that these standard cryptographic
design tasks can be quickly, accurately and cost-eﬀectively
performed in an automated fashion. We leave open the ques-
408Process
AutoGroup
AutoStrong
BB-IBE Gentry Waters09-Enc BGW CL
0.34s
0.28s
0.55s
0.33s
4.30s
-
-
-
0.34s
-
BB Short Sig Waters05 Waters09-Sig ACDKNO
0.31s
0.27s
0.54s
0.37s
4.16s
3.99s
17.65s
1.23s
Figure 6: Running time required by the AutoGroup and AutoStrong routines to process the schemes discussed
in this work (averaged over 10 test runs). The running time for AutoGroup includes the execution time of
the Z3 SMT solver. The running time for AutoStrong also includes Z3 and Mathematica and the application
In all cases, the standard deviation in the results were within ±3% of the
of the BSW transformation.
average. For AutoGroup, running times are correlated with the number of unique solutions found and the
minimization of the weighted function using Z3. AutoStrong running times are highly correlated with the
complexity of the veriﬁcation equations.
tion of which other design tasks are well suited for SMT
solvers.
Acknowledgments
The authors thank Brent Waters for technical discussions
involving the BSW transformation and the Waters DSE sig-
natures. The authors are also grateful to Avi Rubin and
Matthew Pagano for helpful discussions.
6. REFERENCES
[1] Masayuki Abe, Melissa Chase, Bernardo David,
Markulf Kohlweiss, Ryo Nishimaki, and Miyako
Ohkubo. Constant-size structure-preserving
signatures: Generic constructions and simple
assumptions. Cryptology ePrint Archive, Report
2012/285, 2012. http://eprint.iacr.org/.
[2] Joseph A. Akinyele, Christina Garman, Ian Miers,
Matthew W. Pagano, Michael Rushanan, Matthew
Green, and Aviel D. Rubin. Charm: a framework for
rapidly prototyping cryptosystems. Journal of
Cryptographic Engineering, 3(2):111–128, 2013.
[3] Joseph A. Akinyele, Matthew Green, Susan
Hohenberger, and Matthew W. Pagano. AutoBatch
Toolkit. https://github.com/jhuisi/auto-tools.
[4] Joseph A. Akinyele, Matthew Green, Susan
Hohenberger, and Matthew W. Pagano.
Machine-generated algorithms, proofs and software for
the batch veriﬁcation of digital signature schemes. In
ACM CCS, pages 474–487, 2012.
[5] Jos´e Bacelar Almeida, Endre Bangerter, Manuel
Barbosa, Stephan Krenn, Ahmad-Reza Sadeghi, and
Thomas Schneider. A certifying compiler for
zero-knowledge proofs of knowledge based on
σ-protocols. In ESORICS’10, pages 151–167, 2010.
[6] Jee Hea An, Yevgeniy Dodis, and Tal Rabin. On the
security of joint signature and encryption. In
EUROCRYPT, volume 2332, pages 83–107, 2002.
[7] Giuseppe Ateniese, Jan Camenisch, Marc Joye, and
Gene Tsudik. A practical and provably secure
coalition-resistant group signature scheme. In
CRYPTO ’00, volume 1880, pages 255–270, 2000.
[8] Michael Backes, Matteo Maﬀei, and Dominique
Unruh. Zero-knowledge in the applied pi-calculus and
automated veriﬁcation of the direct anonymous
attestation protocol. In IEEE Symposium on Security
and Privacy, pages 202–215, 2008.
[9] Endre Bangerter, Thomas Briner, Wilko Henecka,
Stephan Krenn, Ahmad-Reza Sadeghi, and Thomas
Schneider. Automatic generation of sigma-protocols.
In EuroPKI’09, pages 67–82, 2009.
[10] M. Barbosa, A. Moss, and D. Page. Compiler assisted
elliptic curve cryptography. In OTM Conferences (2),
pages 1785–1802, 2007.
[11] Mike Barnett, K. Rustan M. Leino, and Wolfram
Schulte. The spec# programming system: An
overview. pages 49–69. Springer, 2004.
[12] Paulo S. L. M. Barreto and Michael Naehrig.
Pairing-friendly elliptic curves of prime order. In SAC,
volume 3897, pages 319–331, 2006.
http://cryptojedi.org/papers/\#pfcpo.
[13] Gilles Barthe, Benjamin Gr´egoire, Sylvain Heraud,
and Santiago Zanella B´eguelin. Computer-aided
security proofs for the working cryptographer. In
CRYPTO, pages 71–90, 2011.
[14] Mihir Bellare and Sarah Shoup. Two-tier signatures,
strongly unforgeable signatures, and ﬁat-shamir
without random oracles. In PKC, pages 201–216, 2007.
[15] Mihir Bellare and Sarah Shoup. Two-tier signatures
from the ﬁat-shamir transform, with applications to
strongly unforgeable and one-time signatures. IET
Information Security, 2(2):47–63, 2008.
[16] Dan Boneh and Xavier Boyen. Eﬃcient selective-id
secure identity-based encryption without random
oracles. In Christian Cachin and JanL. Camenisch,
editors, Advances in Cryptology - EUROCRYPT 2004,
volume 3027 of Lecture Notes in Computer Science,
pages 223–238. Springer Berlin Heidelberg, 2004.
[17] Dan Boneh and Xavier Boyen. Short signatures
without random oracles. In EUROCRYPT, volume
3027, pages 382–400, 2004.
[18] Dan Boneh, Xavier Boyen, and Hovav Shacham. Short
group signatures. In CRYPTO ’04, volume 3152 of
LNCS, pages 45–55, 2004.
[19] Dan Boneh and Matthew K. Franklin. Identity-based
encryption from the Weil pairing. In CRYPTO, pages
213–229, 2001.
[20] Dan Boneh, Craig Gentry, and Brent Waters.
Collusion resistant broadcast encryption with short
ciphertexts and private keys. In CRYPTO’05, pages
258–275, 2005.
[21] Dan Boneh, Ben Lynn, and Hovav Shacham. Short
signatures from the Weil pairing. In ASIACRYPT,
volume 2248 of LNCS, pages 514–532, 2001.
[22] Dan Boneh, Emily Shen, and Brent Waters. Strongly
unforgeable signatures based on computational
Diﬃe-Hellman. In PKC, pages 229–240, 2006.
[23] J. Camenisch, M. Rohe, and A.R. Sadeghi. Sokrates -
a compiler framework for zero- knowledge protocols.
In the Western European Workshop on Research in
Cryptology, WEWoRC, 2005.
409[24] Jan Camenisch and Anna Lysyanskaya. Signature
schemes and anonymous credentials from bilinear
maps. In CRYPTO, volume 3152, pages 56–72, 2004.
[25] Ran Canetti, Shai Halevi, and Jonathan Katz.
Chosen-ciphertext security from identity-based
encryption. In EUROCRYPT, pages 207–222, 2004.
language-based system for eﬃcient zero-knowledge
proofs and electronic cash. In USENIX Security’10,
pages 193–206, 2010.
[44] A. Menezes, S. Vanstone, and T. Okamoto. Reducing
elliptic curve logarithms to logarithms in a ﬁnite ﬁeld.
In STOC, pages 80–89, 1991.
[26] Leonardo De Moura and Nikolaj Bjørner. Z3: an
[45] Alfred Menezes, Paul C. van Oorschot, and Scott A.
eﬃcient smt solver. In Proceedings of the Theory and
practice of Software, TACAS’08/ETAPS’08, pages
337–340, 2008.
[27] Robert DeLine, K. Rustan, and M. Leino. Boogie pl:
A typed procedural language for checking
object-oriented programs. Technical Report
MSR-TR-2005-70.
[28] Danny Dolev, Cynthia Dwork, and Moni Naor.
Nonmalleable cryptography. SIAM J. Comput.,
30(2):391–437, 2000.
Vanstone. Handbook of Applied Cryptography. CRC
Press, 1996.
[46] Leonardo Moura and Grant Olney Passmore. The
strategy challenge in SMT solving. In Automated
Reasoning and Mathematics, volume 7788, pages
15–44. 2013.
[47] Dan Page, Nigel Smart, and Fre Vercauteren. A
comparison of MNT curves and supersingular curves.
Applicable Algebra in Eng,Com and Comp,
17(5):379–392, 2006.
[29] Anna Lisa Ferrara, Matthew Green, Susan
[48] Luis J. Dominguez Perez and Michael Scott. Designing
Hohenberger, and Michael Østergaard Pedersen.
Practical short signature batch veriﬁcation. In
CT-RSA, volume 5473 of LNCS, pages 309–324, 2009.
a code generator for pairing based cryptographic
functions. In Pairing’10, pages 207–224, 2010.
[49] Davide Pozza, Riccardo Sisto, and Luca Durante.
[30] Amos Fiat and Adi Shamir. How to prove yourself:
Practical solutions to identiﬁcation and signature
problems. In CRYPTO, pages 186–194, 1986.
[31] Steven D. Galbraith. Supersingular curves in
cryptography. In ASIACRYPT, pages 495–513, 2001.
[32] Steven D. Galbraith, Kenneth G. Paterson, and
Nigel P. Smart. Pairings for cryptographers, 2006.
Cryptology ePrint Archive: Report 2006/165.
[33] Craig Gentry. Practical identity-based encryption
without random oracles. In EUROCRYPT, pages
445–464, 2006.
[34] Oded Goldreich. The Foundations of Cryptography -
Volume 2, Basic Applications. Cambridge University
Press, 2004.
[35] S. Goldwasser, S. Micali, and R. Rivest. A digital
signature scheme secure against adaptive
chosen-message attacks. SIAM J. Comp., 17(2), 1988.
[36] Wilko Henecka, Stefan K¨ogl, Ahmad-Reza Sadeghi,
Thomas Schneider, and Immo Wehrenberg. Tasty:
tool for automating secure two-party computations. In
ACM CCS, pages 451–462, 2010.
[37] Qiong Huang, Duncan S. Wong, and Yiming Zhao.
Generic transformation to strongly unforgeable
signatures. In ACNS, pages 1–17, 2007.
[38] Shinsaku Kiyomoto, Haruki Ota, and Toshiaki
Tanaka. A security protocol compiler generating C
source codes. In ISA’08, pages 20–25, 2008.
[39] Hugo Krawczyk and Tal Rabin. Chameleon signatures.
In NDSS, 2000.
[40] Stefan Lucks, Nico Schmoigl, and Emin Islam Tatli.
Issues on designing a cryptographic compiler. In
WEWoRC, pages 109–122, 2005.
[41] Philip MacKenzie, Alina Oprea, and Michael K.
Reiter. Automatic generation of two-party
computations. In ACM CCS, pages 210–219, 2003.
[42] Dahlia Malkhi, Noam Nisan, Benny Pinkas, and Yaron
Sella. Fairplay – a secure two-party computation
system. In USENIX Security’04, pages 287–302, 2004.
[43] Sarah Meiklejohn, C. Chris Erway, Alptekin K¨up¸c¨u,
Theodora Hinkle, and Anna Lysyanskaya. ZKPDL: a
Spi2java: Automatic cryptographic protocol java code
generation from spi calculus. In Advanced Information
Networking and Applications, pages 400–, 2004.
[50] Somindu C. Ramanna, Sanjit Chatterjee, and Palash
Sarkar. Variants of Waters’ dual system primitives
using asymmetric pairings - (extended abstract). In
PKC ’12, pages 298–315, 2012.
[51] Claus-Peter Schnorr. Eﬃcient signature generation by
smart cards. J. Cryptology, 4(3):161–174, 1991.
[52] Dawn Xiaodong Song, Adrian Perrig, and Doantam
Phan. Agvi - automatic generation, veriﬁcation, and
implementation of security protocols. In Computer
Aided Veriﬁcation, pages 241–245, 2001.
[53] Ron Steinfeld, Josef Pieprzyk, and Huaxiong Wang.
How to strengthen any weakly unforgeable signature
into a strongly unforgeable signature. In CT-RSA,
pages 357–371, 2007.
[54] Isamu Teranishi, Takuro Oyama, and Wakaha Ogata.
General conversion for obtaining strongly existentially
unforgeable signatures. In INDOCRYPT, pages
191–205, 2006.
[55] Isamu Teranishi, Takuro Oyama, and Wakaha Ogata.
General conversion for obtaining strongly existentially
unforgeable signatures. IEICE Transactions,
91-A(1):94–106, 2008.
[56] Brent Waters. Eﬃcient identity-based encryption
without random oracles. In EUROCRYPT ’05, volume
3494 of LNCS, pages 320–329. Springer, 2005.
[57] Brent Waters. Dual system encryption: Realizing fully
secure ibe and hibe under simple assumptions. In
CRYPTO, pages 619–636, 2009.
[58] Brent Waters. Dual system encryption: Realizing fully
secure ibe and hibe under simple assumptions.
Cryptology ePrint Archive, Report 2009/385, 2009.
http://eprint.iacr.org/.
[59] Wolfram. Mathematica, version 9.
http://www.wolfram.com/mathematica/.
410