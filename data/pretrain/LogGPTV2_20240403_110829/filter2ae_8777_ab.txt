     *      * 执行原指令
     *      * 跳转到原始指令流程中，即原指令的下一条指令处
     *  出了上面两个功能我们还需要将shellcode中的原指令函数地址进行填充，承接上面的流程
     *
     *  @param  pstInlineHook hook点相关信息的结构体
     *  @return 原指令函数是否构造成功
     */
    bool BuildOldFunction(INLINE_HOOK_INFO* pstInlineHook)
    {
        bool bRet = false;
        while(1)
        {
            if(pstInlineHook == NULL)
            {
                LOGI("pstInlineHook is null");
                break;
            }
            //8字节原指令，8字节原指令的下一条指令
            void * pNewEntryForOldFunction = malloc(16);
            if(pNewEntryForOldFunction == NULL)
            {
                LOGI("new entry for old function malloc fail.");
                break;
            }
            if(ChangePageProperty(pNewEntryForOldFunction, 16) == false)
            {
                LOGI("change new entry page property fail.");
                break;    
            }
            //拷贝原指令到内存块中
            memcpy(pNewEntryForOldFunction, pstInlineHook->szbyBackupOpcodes, 8);
            //拷贝跳转指令到内存块中
            if(BuildArmJumpCode(pNewEntryForOldFunction + 8, pstInlineHook->pHookAddr + 8) == false)
            {
                LOGI("build jump opcodes for new entry fail.");
                break;
            }
            //填充shellcode里stub的回调地址
            *(pstInlineHook->ppOldFuncAddr) = pNewEntryForOldFunction;
            bRet = true;
            break;
        }
        return bRet;
    }
**hook.c**
:RebuildHookTarget函数。最后一步，覆盖原指令(8字节长度，2条指令)，使其跳转到我们构造好的桩函数(shellcode)中去
    /**
     * 3. 覆盖HOOK点的指令，跳转到桩函数的位置
     * @param  pstInlineHook inlinehook信息
     * @return 原地跳转指令是否构造成功
     */
    bool RebuildHookTarget(INLINE_HOOK_INFO* pstInlineHook)
    {
        bool bRet = false;
        while(1)
        {
            if(pstInlineHook == NULL)
            {
                LOGI("pstInlineHook is null");
                break;
            }
            //修改原位置的页属性，保证可写
            if(ChangePageProperty(pstInlineHook->pHookAddr, 8) == false)
            {
                LOGI("change page property error.");
                break;
            }
            //覆盖原指令为跳转指令
            if(BuildArmJumpCode(pstInlineHook->pHookAddr, pstInlineHook->pStubShellCodeAddr) == false)
            {
                LOGI("build jump opcodes for new entry fail.");
                break;
            }
            bRet = true;
            break;
        }
        return bRet;
    }
# 应用实例
这里我们利用一个测试App，他的Native层写了一个这样的功能，如果我们不对其进行修改，他将5分钟后才会返回一个"Enough. You
Win!"，现在我们的目的就是利用内联hook修改这个uiTimeCounter属性的值使其立刻输出"Enough. You Win!"
    static unsigned int uiTimeCounter = 0x1;
    //该函数，根据uiTimeCounter全局变量，返回两种结果字符串
    //大于30则返回成功提示，否则返回等待提示
    JNIEXPORT jstring JNICALL Java_com_example_gslab_ibored_MainActivity_UpdateResult
            (JNIEnv *pJniEnv, jclass Jclass)
    {
        unsigned  int uiLocalVar = 1;
        uiTimeCounter += uiLocalVar;
        if(uiTimeCounter > 300)
        {
            //win
            return pJniEnv->NewStringUTF("Enough. You Win!");
        }
        else
        {
            //wait
            return pJniEnv->NewStringUTF("Just Wait.");
        }
    }
## 实现过程
### 第一步
找到我们需要修改的点。这里我们用IDA进行寻找。从下面代码中可以看到这里我们使用的r0寄存器进行判断，如果小于等于300就输出"just
wait",所以我们需要Hook的点就是这个判断语句处，将r0改成大于300即可
计算出HOOK点相对模块的偏移地址。上图可以知道HOOK点的地址为AF86399A，基地址可以crtl+s，找到代码段的开始地址，在经过相减(AF88C49C-AF859000)得到偏移值为0x3349c
### 第二步
根据需要修改的点，利用我们最开始写的hook功能，来编写代码修改这个点
    #include 
    extern "C"
    {
        #include "Ihook.h"
    }
    //声明函数在加载库时被调用,也是hook的主函数
    void ModifyIBored() __attribute__((constructor));
    typedef std::vector InlineHookInfoPVec;
    static InlineHookInfoPVec gs_vecInlineHookInfo;     //管理HOOK点
    /**
     *  对外inline hook接口，负责管理inline hook信息
     *  @param  pHookAddr     要hook的地址
     *  @param  onCallBack    要插入的回调函数
     *  @return inlinehook是否设置成功（已经设置过，重复设置返回false）
     */
    bool InlineHook(void *pHookAddr, void (*onCallBack)(struct pt_regs *))
    {
        bool bRet = false;
        if(pHookAddr == NULL || onCallBack == NULL)
        {
            return bRet;
        }
        //填写hook点位置和用户自定义回调函数
        INLINE_HOOK_INFO* pstInlineHook = new INLINE_HOOK_INFO();
        pstInlineHook->pHookAddr = pHookAddr;
        pstInlineHook->onCallBack = onCallBack;
        if(HookArm(pstInlineHook) == false)
        {
            LOGI("HookArm fail.");
            delete pstInlineHook;
            return bRet;
        }
        gs_vecInlineHookInfo.push_back(pstInlineHook);
        return true;
    }
    /**
     *  用户自定义的回调函数，修改r0寄存器大于300
     */
    void EvilHookStubFunctionForIBored(pt_regs *regs)
    {
        LOGI("In Evil Hook Stub.");
        regs->uregs[0] = 0x333;
    }
    /**
     *  1.Hook入口
     */
    void ModifyIBored()
    {
        LOGI("In IHook's ModifyIBored.");
        void* pModuleBaseAddr = GetModuleBaseAddr(-1, "libnative-lib.so");
        if(pModuleBaseAddr == 0)
        {
            LOGI("get module base error.");
            return;
        }
        //模块基址加上HOOK点的偏移地址就是HOOK点在内存中的位置
        uint32_t uiHookAddr = (uint32_t)pModuleBaseAddr + 0x3349c;
        LOGI("uiHookAddr is %X", uiHookAddr);
        //HOOK函数
        InlineHook((void*)(uiHookAddr), EvilHookStubFunctionForIBored);
    }
上面的hook代码中用到了获取基地址的函数pModuleBaseAddr，所以我们需要在 **hook.c** 文件中补充这个函数
    /*
     * 通过/proc/$pid/maps，获取模块基址
     * @param   pid                 模块所在进程pid，如果访问自身进程，可填小余0的值，如-1
     * @param   pszModuleName       模块名字
     * @return  void*               模块基址，错误则返回0
     */
    void * GetModuleBaseAddr(pid_t pid, char* pszModuleName)
    {
            FILE *pFileMaps = NULL;
            unsigned long ulBaseValue = 0;
            char szMapFilePath[256] = {0};
            char szFileLineBuffer[1024] = {0};
            //pid判断，确定maps文件
            if (pid 
> 这里需要注意，我们上面写的hook模块是基于arm指令集的，所以我们测试用的项目也要声明使用arm指令集，如果是cmake，在app目录下的build.gradle文件中设置如下
>  
>  
>     defaultConfig {
>       ...
>        externalNativeBuild {
>                 cmake {
>                     ...
>                     arguments "-DANDROID_ARM_MODE=arm"
>                 }
>             }
>     }
### 第四步
hook之后，我们出了成功提早输出这句话后，我们这边的比较指令也被改成相应跳转指令
# 小结
【1】先构造好我们的装函数，再覆盖原指令进行跳转。防止我们先进行原指令覆盖后，程序执行到这里但是我们的桩函数还没构造好而引发的异常
【2】覆盖指令的是否为什幺覆盖2条，这是因为我们构造跳转指令的时候，需要两条指令的长度
【3】一定需要注意指令集的确定，不同指令集我们跳转函数LDR PC,[RC, #-4]的指令是不同的，需要覆盖的长度也是不同的
# 参考
【书籍】游戏安全-手游安全技术入门