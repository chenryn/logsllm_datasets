### Number of Apps Triggering Different Security Features

The following numbers represent the count of applications that trigger different numbers of security features:
- 8
- 0
- 9 (>= 10)
- 4
- 18
- 11

### Legitimate Uses of GUI Windows

Various legitimate purposes exist for the use of different types of GUI windows. For example:
- **Toast Messages:** Background app services use these to display warning messages.
- **Free Window:** This type of window is often used as a handy, always-visible controller for music player apps.
- **Ad Libraries:** These create free windows or new activities to display advertisements.
- **App Lockers:** These use free or activity windows to "lock" specific apps until the correct password is provided.

Although these windows serve legitimate purposes, they can interfere with the graphical user interface (GUI) of other apps, even without malicious intent. Therefore, it is beneficial to let users decide whether these windows are useful. For instance, a floating music player controller window may be useful, while an advertisement window might be annoying.

### Back Button Behavior

In our experiment, we found that a significant number of apps rewrite the back button behavior. Instead of returning to the previous screen, the back button is either disabled or redirects the user to another activity within the same app. While WindowGuard considers back button modifications less risky and does not raise alarms, such changes can still be confusing for users and require careful consideration in app design.

### Security Alerts

Among the apps that trigger security alerts, Table IV shows the number of apps that trigger a particular aggregate number of security alerts during the testing period. The majority of apps trigger fewer than three security alerts, even when the app runner is a pseudo-random event generator.

### Performance Evaluation of WindowGuard

To evaluate the performance overhead of WindowGuard, we used Monkey to generate a sequence of 5,000 user events on the same app, both with and without the WindowGuard module enabled. We collected the total time taken with and without WindowGuard, denoted as \( T_{\text{with}} \) and \( T_{\text{w/o}} \), respectively. The overhead was calculated as:

\[ \text{Overhead} = \left( \frac{T_{\text{with}} - T_{\text{w/o}}}{T_{\text{w/o}}} \right) \times 100\% \]

We manually selected 100 apps from various categories with complex activity/window hierarchies. The results showed that WindowGuard performs very efficiently, yielding an average performance overhead of only 0.45%.

### Related Work

#### GUI Security in Desktop Environments

GUI security has been extensively studied in traditional desktop environments [3, 8, 14, 32]. However, the unique challenges of mobile environments have raised new concerns.

#### GUI Confidentiality Attacks and Defenses

Previous research has shown that GUI confidentiality can be compromised through side channels such as shared-memory side channels [7], sensor information [21, 36], system or app flaws [17, 18, 29], and shoulder surfing [22]. Sensitive GUI information can also be disclosed via screen shots due to ADB flaws [17] or embedded malicious UIs [18, 29]. On the other hand, GUI information disclosure can be useful for forensics analysis [30, 31]. Several approaches have been proposed to protect GUI confidentiality [6, 24, 29], but comprehensive protection remains an open question. Our work focuses on the integrity and availability of Android GUI, which are seriously threatened by emerging GUI attacks.

#### GUI Integrity and Availability Attacks and Defenses

Previous research has demonstrated the possibility of launching phishing [2, 7, 13] or tapjacking attacks [19, 25] in Android by overlaying a window controlled by an attacker on top of the victim app's window. Manipulating the activity browsing history can lead to task hijacking attacks [28]. Denial of service attacks [5, 28] and adware [11, 27, 33] also pose increasing threats to GUI availability. Roesner et al. [29] systematically studied the design of secure embedded user interfaces. Bianchi et al. [2] proposed a two-layer defense against GUI confusion attacks. In comparison, we propose a new security model to systematically protect the integrity and availability of the GUI system while preserving the original user experience. The implementation, WindowGuard, can defeat a broader range of GUI attacks and is practical for distribution to a large number of Android devices.

#### Integrity of Program Execution

Control flow integrity [20] defends against subverted machine-code execution, such as return-oriented programming [10] and return-to-libc attacks [15]. One approach is to save the program state (e.g., the native return address) in a shadow stack [16, 29, 34]. When the program state is resumed, it is compared with the saved copy on the shadow stack. A similar idea is applied to the legitimacy check of activity sessions in our work. The previously visited GUI states (activities) are saved in an activity session. To defeat task hijacking attacks, the integrity of the foreground activity session is scrutinized whenever an activity obtains focus.

### Discussion

WindowGuard is not a malware detection system. Its goal is to accurately detect attacks that affect the GUI integrity and availability of other apps, rather than detecting malicious behavior within an app itself, such as a phishing activity. WindowGuard respects the user's choice. If a user intentionally launches a malware (e.g., due to social engineering tricks), WindowGuard does not override the user's decision. Defending against trojan horse malware is outside the scope of this defense mechanism. However, WindowGuard ensures that a malware cannot become the display owner if the user or the current display owner app does not explicitly launch it. Additionally, WindowGuard is not a vulnerability discovery system; it is not designed to discover or address GUI security issues within an app itself, although it can detect some design flaws and provide hints to the user, such as inconsistencies in back button behavior.

#### Limitations of WindowGuard

1. **False Positives:** Although WindowGuard can detect all known GUI attacks, it also introduces false positives. Legitimate app developers, unaware of the security implications, may perform operations that violate AWI principles. For example, a phone call recorder app, FonTel, displays a window (containing voice recording control buttons) on top of the system dialer app during a call. While this window is useful, it disrupts the GUI and user experience of another app. Determining the real intention of such behavior is fundamentally difficult for automatic systems. Users are better equipped to make decisions based on the runtime context. WindowGuard leverages user involvement to overcome this difficulty while maintaining the original user experience.

2. **False Negatives:** User involvement can introduce false negatives due to user mistakes. For example, a user might explicitly allow a login pop-up window that is actually a phishing window. Although a security warning is displayed, WindowGuard respects the user's decision. Improving the balance between security and usability requires comprehensive user studies, such as those conducted on the Android permission system [12].

3. **Implementation Limitation:** The implementation of WindowGuard is based on Xposed, which can only be used on rooted Android devices.

### Conclusion

In conclusion, we propose a new security model, Android Window Integrity (AWI), to systematically protect the Android GUI system from attacks that compromise GUI integrity and availability. We developed WindowGuard, an Xposed module that implements the AWI model while preserving the original Android user experience. Our evaluation shows that WindowGuard can successfully defeat all known GUI attacks and has a minimal impact on usability and performance.

### Acknowledgment

We would like to thank the anonymous reviewers whose comments helped improve the quality of this paper. This work was supported by ARO W911NF-13-1-0421 (MURI), NSF CCF-1320605, NSF SBE-1422215, and CNS-1618684.

### References

[References are listed as in the original text, with appropriate citations and URLs.]