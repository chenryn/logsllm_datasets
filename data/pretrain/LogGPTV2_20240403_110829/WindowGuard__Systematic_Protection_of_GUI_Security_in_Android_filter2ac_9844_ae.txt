8
0
9 >= 10
4
18
THE NUMBER OF APPS THAT TRIGGER DIFFERENT
NUMBERS OF SECURITY FEATURES.
11
legit purposes. For example,
toast messages are raised by
background app services to display warning messages; A free
window is decorated as a handy and always-visible controller
for a music player app; Certain ad libs create free window
or new activities to display advertisements; and app locker
apps use free window or activity window to “lock” particular
apps before the correct password is provided. Although these
windows are all for legitimate purposes, the windows they
launched have in fact interfered with the GUI of other apps,
even with no bad intention. It is therefore a good time to
let the user make the decision on if they are useful or not,
e.g., a ﬂoating music player controller window is useful but
an advertisement window might be annoying for the user. In
our experiment, we also ﬁnd that a signiﬁcant portion of apps
re-write the back button behavior. Instead of “going back”,
the back button is either disabled or re-directs the user to
another activity of the same app. As discussed in Section III-C,
WindowGuard considers back behavior modiﬁcation less risky
and does not raise alarm when the back behavior fails to
meet user expectation. Despite that, changing the behavior
outrageously can be confusing to users and requires careful
consideration in app design. Another ﬁnding is that, among the
apps that trigger security alerts, Table IV shows the number
of apps that trigger a particular aggregate number of security
alerts in the given testing period. As shown in the ﬁgure, a
majority of apps triggers less than 3 security alerts even if the
app runner is a pseudo-random event generator.
We now proceed to the performance evaluation of Win-
dowGuard. To evaluate the performance overhead, we use
Monkey to generate the same sequence of 5000 user events
to the same app running on the system with and without
WindowGuard module enabled. We collect the complete time
Twith and Tw/o, respectively, and the overhead is calculated as
(Twith − Tw/o)/Tw/o × 100%. We manually select 100 apps
that are in different categories and have complicated activ-
ity/window hierarchies. WindowGuard turns out to perform
very efﬁciently, yielding only 0.45% of performance overhead
on average.
VI. RELATED WORK
GUI security has been well studied in traditional desktop
environments [3], [8], [14], [32]. On the other hand, the unique
mobile environment has raised unique challenges.
GUI conﬁdentiality attacks and defenses. Previous research
proves that the conﬁdentiality of GUI can be broken through
side channels such as shared-memory side channel [7], peeking
sensor information [21], [36], via system or app ﬂaws [17],
[18], [29], or shoulder surﬁng [22]. Sensitive GUI information
can also be disclosed by taking screen shots because of adb
ﬂaws [17], or via embedded malicious UIs [18], [29]. One the
other hand, GUI information disclosure can also be put into
good use for forensics analysis [30], [31]. A few approaches
have been proposed to protect GUI conﬁdentiality [6], [24],
[29], which help limit the attack surfaces for conﬁdentiality
breaches. However, comprehensively protecting GUI conﬁ-
dentiality from all aspects of the system remains to be an
open question. Our work instead focuses on the integrity
and availability of Android GUI, properties that are seriously
threatened by emerging GUI attacks.
GUI integrity and availability attacks and defenses. Previ-
ous research shows the possibility to launch phishing [2], [7],
[13] or tapjacking attacks [19], [25] in Android by overlaying
a window of attacker’s control on top of the victim app’s
window. It is also viable to manipulate the activity browsing
history to launch a variety of task hijacking attack [28]. Denial
of service attacks [5], [28] and adware [11], [27], [33] are also
posing increasing threat to the GUI availability. Roesner et.
al. [29] systematically study the design of secure embedded
user interfaces. Bianchi et. al. [2] propose a novel
two-
layer defense towards defending against GUI confusion attack,
an important type of GUI attack. Compared with previous
work, we propose a new security model to systematically
protect the integrity and availability of the GUI system, while
preserving the original user experience. The implementation,
WindowGuard, can defeat broader GUI attacks and is practical
to be distributed to a large number of Android devices.
Integrity of program execution. Control ﬂow integrity [20]
defends against subverted machine-code execution such as
return-oriented programming [10] and return-to-libc [15] at-
tacks. One of the approaches is to save the state of the program
(e.g. the native return address) in a shadow stack [16], [29],
[34]. When the program state is resumed (e.g. function return),
the resumed program state is compared with the saved copy
on the shadow stack. Similar idea is applied to the legitimacy
check of activity session in our work. The previous-visited
GUI states, activities, are saved in a activity session. To defeat
task hijacking attacks, the integrity of the foreground activity
session is scrutinized whenever an activity obtains focus.
VII. DISCUSSION
WindowGuard is not a malware detection system. The
goal of WindowGuard is to accurately detect the attacks that
affect the GUI integrity and availability of other apps, instead
of detecting malicious behavior within an app itself, e.g., a
phishing activity within the malware’s context. WindowGuard
always respects the user’s choice. Therefore, if a malware is
intentionally launched by the user (e.g., the user is spoofed
by the social engineering tricks used by the malware) Win-
dowGuard does not disagree with user’s decision. Defending
against
trojan horse malware like this is out of scope of
this defense mechanism. On the other hand, WindowGuard
guarantees to prevent a malware from becoming the display
owner if the user or the current display owner app does
not explicitly launch the malware, as we have seen in our
evaluation. In addition, WindowGuard is not a vulnerability
discovery system. It is not designed to discover or address
the GUI security issues within an app itself, e.g. misleading
app navigation design, or vulnerable access control of an app
component, although WindowGuard does has the capability to
detect a subset of these design ﬂaws and give hints to the user,
such as inconsistency of back button behavior.
There are several limitations of WindowGuard. First, al-
though WindowGuard can successfully detect all known GUI
attacks, it also introduces false positives. As we have seen in
evaluation, legitimate app developers, without understanding
the security implications, may conduct operations that violate
AWI principles. For instance, a phone call recorder app namely
FonTel displays a window (which contains voice recording
control buttons) on top of the system dialer app whenever there
is a phone call. Although the window is useful for the apps
functionality, it has effectively disturbed another app’s GUI
and user experience. Determining the real intention of such
app behavior (e.g. an useful phone recorder control widget
or a phishing window) is fundamentally difﬁcult for automatic
systems. In contrast, users are more capable of making the best
decision based on the runtime context. WindowGuard adopts
the advantage of user to overcome this difﬁculty while still
retaining the original user experience. Second, user involve-
ment may adversely introduces false negative caused by user
mistakes, e.g., an user explicitly allows a login pop-up window,
which is in fact a phishing window. In this paper, although a
security warning is displayed (e.g., in Figure 6), we specify
WindowGuard to always respect user decision and report the
usibility ﬁndings in Section V-B. How to improve security-
and-usability balance and the efﬁcacy of defense requires
comprehensive user study (e.g., the user study of Android
permission system [12]) and is beyond the scope of this
paper. Lastly, the implementation of WindowGuard is based on
Xposed, which can only be used on rooted Android devices.
VIII. CONCLUSION
In conclusion, we propose a new security model - Android
Window Integrity - to systematically protect Android GUI
system from attacks that compromise GUI integrity and avail-
ability. We develop WindowGuard, an Xposed module that
implements AWI model while preserving the original Android
user experience. Our evaluation shows that WindowGuard can
successfully defeat all known GUI attacks and yields small
impact on usability and performance.
IX. ACKNOWLEDGMENT
We would like to thank anonymous reviewers whose comments
help us improve the quality of this paper. This work was supported by
ARO W911NF-13-1-0421 (MURI), NSF CCF-1320605, NSF SBE-
1422215 and CNS-1618684.
[1]
“Task
components/tasks-and-back-stack.html.
Back
and
http://developer.android.com/guide/
REFERENCES
Stack,”
[2] A. Bianchi and J. Corbetta and L. Invernizzi and Y. Fratantonio and
C. Kruegel and G. Viana, “What the App is That? Deception and
Countermeasures in the Android User Interface,” in Proceedings of
IEEE Symposium on Security and Privacy (S&P), 2015.
land on Android Devices,” 2014, http://malware.
[3] D. Akhawe, W. He, Z. Li, R. Moazzezi, and D. Song, “Clickjacking
Revisited: A Perceptual View of UI Security,” in Proceedings of the
USENIX Workshop on Offensive Technologies (WOOT), 2014.
“Police Locker
dontneedcoffee.com/2014/05/police-locker-available-for-your.html.
“Simplocker:
for
2014,
simplocker-ﬁrst-conﬁrmed.
J. Chen, H. Chen, E. Bauman, Z. Lin, B. Zang, and H. Guan,
“You Shouldn’t Collect My Secrets: Thwarting Sensitive Keystroke
Leakage in Mobile IME Apps,” in Proceedings of the USENIX Security
Symposium, 2015.
Ransomware
http://www.symantec.com/connect/blogs/
File-Encrypting
Conﬁrmed
Android,”
[4]
[5]
[6]
First
[7] Q. A. Chen, Z. Qian, and Z. M. Mao, “Peeking into Your App without
Actually Seeing It: UI State Inference and Novel Android Attacks,” in
Proceedings of the USENIX Security Symposium, 2014.
[8] S. Chen, J. Meseguer, R. Sasse, H. wang, and Y. Wang, “A Systematic
Approach to Uncover Security FLaws in GUI Logic,” in Proceedings
of IEEE Symposium on Security and Privacy (S&P), 2007.
12
[31] B. Saltaformaggio, R.Bhatia, Z. Gu, X. Zhang, and D. Xu, “VCR: App-
Agnostic Recovery of Photographic Evidence from Android Device
Memory Images,” in Proceedings of ACM Conference on Computer
and Communications Security (CCS), 2015.
J. Shapiro, J. Vanderburgh, E. Northup, and D. Chizmadia, “Design of
the EROS Trusted Window System,” in Proceedings of the USENIX
Security Symposium, 2004.
[32]
[34]
[33] S. Son, D. Kim, and V. Shatikov, “What Mobile Ads Know About
Mobile Users,” in Proceedings of Network and Distributed System
Security Symposium (NDSS), 2016.
“A Stack Smashing technique Protection Tool for Linux,” http://www.
angelﬁre.com/sk/stackshield/.
“The Android
Phishing,”
the-android-trojan-svpeng-now-capable-of-mobile-phishing/.
of Mobile
Svpeng Now Capable
https://securelist.com/blog/research/57301/
Trojan
2013,
[35]
[36] Z. Xu, K. Bai, and S. Zhu, “TapLogger: Inferring User Inputs on Smart-
phone Touchscreens Using On-board Motion Sensors,” in Proceedings
of the ACM Conference on Security and Privacy in Wireless and Mobile
Netowrks (WiSec), 2012.
[9] D. Dinkar, P. Greve, K. Landﬁeld, F. Raget, and E. Peterson, “McAfee
Labs Threats Report,” Intel Security, Tech. Rep., 2016.
[10] E. Buchanan and R. Roemer and H. Shacham and S. Savage, “When
Good Instructions Go Bad: Generalizing Return-oriented Programming
to RISC,” in Proceedings of ACM Conference on Computer and
Communications Security (CCS), 2008.
[11] E. Erturk, “A case study in open source software security and privacy:
Android adware,” in World Congress on Internet Security (WorldCIS),
2012.
[12] A. P. Felt, E. Ha, S. Egelman, A. Haney, E. Chin, and D. Wagner,
“AndroidPermissions: User Attention, Comprehension and Behavior,”
in Proceedings of Symposium on Usable Privacy and Security (SOUPS),
2012.
[13] A. P. Felt and D. Wagner, “Phishing on Mobile Devices,” in Web 2.0
Security and Privacy, 2011.
[14] N. Feske and C. Helmuth, “A Nitpickers Guide to a Minimal-complexity
Secure GUI,” in Proceedings of Annual Computer Security Applications
Conference (ACSAC), 2005.
[15] H. Shacham, “The Geometry of Innocent Flesh on the Boan: Return-
into-libc without function calls (on the x86),” in Proceedings of ACM
Conference on Computer and Communications Security (CCS), 2007.
[16] L. Davi and A. Sadeghi and M. Winandy, “ROPdefender: A Detec-
tion Tool to Defend Against Return-Oriented Programming Attacks,”
in Proceedings of ACM Symposium on Information, Computer and
Communications Security (AsiaCCS), 2011.
[17] C. Lin, H. Li, X. Zhou, and X. Wang, “Screenmilker: How to Milk Your
Android Screen for Secrets,” in Proceedings of Network and Distributed
System Security Symposium (NDSS), 2014.
[18] T. Luo, H. Hao, W. Du, Y. Wang, and H. Yin, “Attacks on WebView
in the Android System,” in Proceedings of Annual Computer Security
Applications Conference, 2011.
[19] T. Luo, X. Jin, and A. Ananthanarayanan, “Touchjacking Attacks on
Web in Android, iOS, and Windows Phone,” in Proceedings of the
5th international conference on Foundations and Practice of Security
(FPS), 2012.
[20] M. Abadi and M. Budiu and U. Erlingsson and J. Ligatti, “Control
Flow Integrity,” in Proceedings of ACM Conference on Computer and
Communications Security (CCS), 2005.
[21] E. Miluzzo, A. Varshavsky, and S. Balakrishnan, “TapPrints: Your
Finger Taps Have Fingerprints,” in Proceedings of the International
Conference on Mobile Systems, Applications, and Services (MobiSys),
2012.
[22] M. Mitchell, A. Wang, and P. Reiher, “Cashtags: Prevent Leaking
Sensitive Information through Screen Display,” in Proceedings of the
USENIX Security Symposium, 2015.
“Mobile Threats in October 2014,” 2014, https://news.drweb.com/show/
?i=7061&lng=en.
[23]
[24] N. Zhang and K. Yuan and M. Naveed and X. Zhou and X. Wang,
“Leave Me Alone: App-level Protection Against Runtime Information
Gathering on Android,” in Proceedings of IEEE Symposium on Security
and Privacy (S&P), 2015.
[25] M. Niemietz and J. Schwenk, “UI Redressing Attacks on Android
[26]
2015,
Devices,” in Blackhat, 2012.
“Aggressive
USA,”
aggressive-android-ransomware-spreading-in-the-usa/.
the
http://www.welivesecurity.com/2015/09/10/
ransomware
spreading
Android
in
[27] V. Rastogi, R. Shao, Y. Chen, X. Pan, S. Zou, and R. Riley, “Are
These Ads Safe: Detecting Hidden Attacks Through the Mobile App-
Web Interfaces,” in Proceedings of Network and Distributed System
Security Symposium (NDSS), 2016.
[28] C. Ren, Y. Zhang, H. Xue, T. Wei, and P. Liu, “Towards Discovering and
Understanding Task Hijacking in Android,” in Proceedings of USENIX
Security Symposium (USENIX Security), 2015.
[29] F. Roesner and T. Kohno, “Securing Embedded User Interfaces: Android
and Beyond,” in Proceedings of the USENIX Security Symposium, 2013.
[30] B. Saltaformaggio, R. Bhatia, Z. Gu, X. Zhang, and D. Xu, “GUI-
TAR: Piecing Together Android App GUIs from Memory Images,” in
Proceedings of ACM Conference on Computer and Communications
Security (CCS), 2015.
13