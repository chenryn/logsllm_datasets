# Evolution of iOS Data Protection and iPhone Forensics: from iPhone OS to iOS 5
## Andrey Belenko & Dmitry Sklyarov
### Elcomsoft Co. Ltd.

---

### Agenda
1. Basics
2. iOS Security before iOS 4
3. iOS 4 Data Protection
4. iOS 5 Data Protection Changes
5. Summary

---

### Forensics 101
**Acquisition ➜ Analysis ➜ Reporting**

**Goals:**
1. Extract as much information as possible, assuming physical access to the device.
2. Leave as few traces/artifacts as possible.

---

### iOS: Why Even Bother?
- Over 5 years on the market
- More than 360 million iOS devices sold worldwide
- 6 iPhones, 4 iPods, 3 iPads
- "Smart devices" carry a significant amount of sensitive data
- Increasing corporate deployments

There is, and will continue to be, a real need for iPhone forensics.

---

### iPhone Forensics 101
- **Passcode:**
  - Prevents unauthorized access to the device.
  - Bypassing the passcode is usually sufficient.
- **Keychain:**
  - System-wide storage for sensitive data.
  - Encrypted.
- **Storage Encryption:**
  - Logical: iPhone Backup
    - Ask the device to produce a backup.
    - The device must be unlocked.
    - The device may produce an encrypted backup.
    - Limited amount of information.
    - Get backup from iCloud.
  - Physical: Filesystem Acquisition
    - Boot-time exploit to run unsigned code.
    - Device lock state is irrelevant.
    - Can extract all information from the device.
  - Physical+: Flash Memory Acquisition
    - Same requirements as for physical acquisition.
    - Also allows recovery of deleted files.

---

### The Inception
- Runs iPhone OS (up to 3.1.3)
- Based on Mac OS X
- Has a crypto co-processor
- Released on June 29, 2007

---

### Hardware Keys
- Two embedded AES keys:
  - GID: Shared by all devices of the same family.
  - UID: Unique for each device.
- No known methods to extract GID/UID keys.

---

### Device Keys
- To avoid unnecessary exposure, the usage of UID/GID keys is limited.
- Device keys are computed from hardware keys during boot:
  - `0x835 = AES_Enc (UID, 01010101010101010101010101010101)`
  - `0x836 = AES_Enc (UID, 00E5A0E6526FAE66C5C1C6D4F16D6180)`
  - `0x837 = AES_Enc (GID, 345A2D6C5050D058780DA431F0710E15)`
  - `0x838 = AES_Enc (UID, 8C8318A27D7F030717D2B8FC5514F8E1)`

---

### iPhone OS Security
- Relies on a chain of trust:
  - BootROM loads trusted iBoot.
  - iBoot loads trusted kernel.
  - Kernel runs trusted apps.
- Apps must be signed.
- Developers can sign and run their apps on their devices ($99/year).
- Applications are sandboxed.

---

### Breaking Free
- **Jailbreak:** Circumventing iOS security to run custom code.
  - App-level: Exploits apps or services (e.g., Absinthe, JailbreakMe). Can be fixed by new firmware.
  - Boot-level: Loads custom kernel by breaking the chain of trust (e.g., limera1n). Cannot be fixed if it exploits a vulnerability in BootROM.

---

### Jailbreak + Forensics
- **Tethered Jailbreak:**
  - Requires host connection to boot into jailbroken state.
  - Exploits are sent by the host.
  - May leave minimal traces on the device.
- **Untethered Jailbreak:**
  - Device is modified to boot in jailbroken state by itself.
  - Leaves permanent traces.

---

### Passcode (Before iOS 4)
- Lockscreen (UI) is the only protection.
- Passcode is stored in the keychain (not its hash).
- Can be recovered or removed instantly:
  - Remove the record from the keychain.
  - Remove the setting telling the UI to ask for the passcode.

---

### Keychain (Before iOS 4)
- SQLite3 DB; only passwords are encrypted.
- All items are encrypted with the device key (0x835) and a random IV.
- Key can be extracted (computed) for offline use.
- All past and future keychain items from the device can be decrypted using that key.

---

### Storage Encryption (Before iOS 4)
- No encryption.

---

### iPhone 3G
- Hardware is very similar to the original iPhone.
- No real security improvements over the previous model.
- Released on July 11, 2008.

---

### iPhone 3GS
- New application processor.
- Hardware storage encryption.
- Released on June 19, 2009.

---

### iPhone 3GS Forensics
- **Passcode:** Same as before.
- **Keychain:** Same as before.
- **Storage Encryption:**
  - Only the user partition is encrypted.
  - Single key for all data (Full Disk Encryption, FDE).
  - Designed for fast wipe, not confidentiality.
  - Transparent for applications.
  - Does not affect physical acquisition.
- This is true only for iPhone 3GS running iPhone OS 3.x.

---

### iPhone 4
- No notable enhancements in security hardware over iPhone 3GS.
- Shipped with iOS 4, which includes major security improvements.
- Released on June 24, 2010.

---

### iOS 4 Data Protection
- **More robust passcode protection.**
- **Better storage encryption:**
  - Metadata is encrypted transparently (same as before).
  - Per-file encryption keys.
- **Better Keychain encryption.**
- **New backup format:**
  - Slower password recovery.
  - Keychain items can migrate to another device.

---

### Protection Classes
- Content grouped by accessibility requirements:
  - Available only when the device is unlocked.
  - Available after the first device unlock (and until power off).
  - Always available.
- Each protection class has a master key.
- Master keys are protected by the device key and passcode.
- Protected master keys form the system keybag.
- New keys are created during device restore.

---

### Effaceable Storage
- Special region of flash memory to store small data items with the ability to quickly erase them.
- Items within effaceable storage are called lockers.
- As of iOS 4: 960 bytes capacity, 3 lockers:
  - 'BAG1': System Keybag payload key and IV.
  - 'Dkey': NSProtectionNone class master key.
  - 'EMF!': Filesystem encryption key.

---

### System Keybag
- `/private/var/keybags/systembag.kb`
- Three layers of encryption:
  - System keybag file is encrypted by Data Protection.
  - Keybag payload is encrypted before writing to disk.
  - Master keys are encrypted with the device key and/or passcode key.

---

### Escrow Keybag
- "Usability feature" to allow iTunes to unlock the device.
- Contains the same master keys as the system keybag.
- Stored on the iTunes side.
- Protected by a 256-bit random "passcode" stored on the device.
- With iOS 4, the escrow keybag provides the same powers as knowing the passcode.

---

### Backup Keybag
- Included in iOS backups.
- Holds keys to decrypt files and keychain items included with the backup.
- New keys are generated for each backup.

---

### Unlocking Keybag
- **Protected Key**
  - WRAP = 1
  - Keybag (locked)
  - Device Key
  - Passcode Key
  - Protected Key
  - WRAP = 2
  - Protected Key
  - WRAP = 3
  - Protected Key
  - WRAP = 1
  - Protected Key
  - WRAP = 3
  - ...
  - Key
  - Keybag (unlocked)
  - Key
  - Key
  - Key
  - Key
  - ...
  - DECRYPT
  - UNWRAP
  - UNWRAP
  - UNWRAP
  - DECRYPT
  - DECRYPT
  - DECRYPT
  - if (WRAP & 0x2)
  - if (WRAP & 0x1)

---

### iOS 4 Passcode
- **Passcode** is used to compute the passcode key.
  - Computation tied to the hardware key.
  - The same passcode will yield different passcode keys on different devices.
- **Passcode key** is required to unlock most keys from the system keybag.
  - Most files are protected with NSProtectionNone and don't require a passcode.
  - Most keychain items are protected with ...WhenUnlocked or ...AfterFirstUnlock and require a passcode.
- **Passcode-to-Key transformation** is slow.
- **Offline bruteforce** is currently not possible (requires extracting the hardware key).
- **On-device bruteforce** is slow (2 p/s on iPhone 3G, 7 p/s on iPad).
- **System keybag** contains a hint on password complexity.

---

### iOS 4 Passcode Complexity
- 0: Digits only, length = 4 (simple passcode).
- 1: Digits only, length ≠ 4.
- 2: Contains non-digits, any length.
- Can identify weak passcodes.

---

### iOS 4 Keychain
- SQLite3 DB, only passwords are encrypted.
- Available protection classes:
  - kSecAttrAccessibleWhenUnlocked (+ ...ThisDeviceOnly)
  - kSecAttrAccessibleAfterFirstUnlock (+ ...ThisDeviceOnly)
  - kSecAttrAccessibleAlways (+ ...ThisDeviceOnly)
- Random key for each item, AES-CBC.
- Item key is protected with the corresponding protection class master key.

---

### iOS 4 Storage
- Only the User partition is encrypted.
- Available protection classes:
  - NSProtectionNone
  - NSProtectionComplete
- When no protection class is set, the EMF key is used.
  - Filesystem metadata and unprotected files.
  - Transparent encryption and decryption (same as pre-iOS 4).
- When a protection class is set, a per-file random key is used.
  - File key protected with the master key is stored in the extended attribute `com.apple.system.cprotect`.

---

### iPhone 4S
- No known security enhancements in hardware over iPhone 4.
- Shipped with iOS 5, which includes some security improvements.
- Released on October 12, 2011.

---

### iOS 5 Passcode
- Similar to iOS 4.
- iPad 3 utilizes a new hardware key UID+.
  - Algorithm is slightly different.
  - No significant changes from a practical point of view.

---

### iOS 5 Keychain
- All attributes are now encrypted (not only the password).
- AES-GCM is used instead of AES-CBC.
- Enables integrity verification.

---

### iOS 5 Storage
- **New partition scheme:**
  - "LwVM" – Lightweight Volume Manager.
- Any partition can be encrypted.
- New protection classes:
  - NSFileProtectionCompleteUntilFirstUserAuthentication
  - NSFileProtectionCompleteUnlessOpen
- IV for file encryption is computed differently.

---

### Creating the File (NSFileProtectionCompleteUnlessOpen)
- Generate a random file key (AES).
- Generate file public/private keys (ECC).
- Master key from the system keybag (ECC).
- Shared Secret.
- Encrypt `com.apple.system.cprotect`.

---

### Reading the File (NSFileProtectionCompleteUnlessOpen)
- File key (AES).
- File public/private keys (ECC).
- Master key from the system keybag (ECC).
- Decrypt `com.apple.system.cprotect`.
- Requires a passcode (if any).
- Looks pretty much like the BlackBerry way to receive emails while locked.

---

### iOS Forensics
- Acquiring a disk image is not enough for iOS 4+.
  - Content protection keys must also be extracted from the device during acquisition.
  - Effaceable Storage contents are needed to decrypt dd images.
- Passcode or escrow keybag is needed for a complete set of master keys.
- In real-world scenarios, it might be a good idea to extract source data and compute protection keys offline.

---

### Key Extraction Process
- **UID Key**
- **Key 835**
- **Key 89B**
- **Passcode**
- **Passcode Key**
- **systembag.kb**
- **Decrypt**
- **KDF**
- **'EMF!' / 'LwVM'**
- **'Dkey'**
- **'BAG1'**
- **Effaceable Storage**
- **Class A Key (#1)**
- **System Keybag (locked)**
- **Class B Key (#2)**
- **Class C Key (#3)**
- **Class D Key (#4)**
- **Class Key #5**
- **...**
- **Class Key #11**
- **Decrypt**
- **FS Key**
- **Unlock**
- **System Keybag (unlocked)**
- Must be done on the device.
- Required to decrypt files/keychain.
- Sufficient for offline key reconstruction.

---

### iOS Forensics Capabilities
| Device | iOS Version | Physical Acquisition | Passcode Recovery | Keychain Decryption | Disk Decryption |
|--------|-------------|----------------------|-------------------|---------------------|-----------------|
| iPhone | 3.1.3       | +                    | Instant           | +                   | Not encrypted   |
| iPod Touch 1 | 3.1.3 | +                    | Instant           | +                   | Not encrypted   |
| iPhone 3G | 4.2.1      | +                    | +                 | +                   | Not encrypted   |
| iPod Touch 2 | 3.1.3 | +                    | Instant           | +                   | Not encrypted   |
| iPhone 3GS | 5.1.1     | +                    | +                 | +                   | +               |
| iPod Touch 3 | 5.1.1     | +                    | +                 | +                   | +               |
| iPad 1 | 5.0.1, 5.1.1 | +                    | +                 | +                   | +               |
| iPhone 4 | 5.1.1      | +                    | +                 | +                   | +               |
| iPod Touch 4 | 5.1.1    | +                    | +                 | +                   | +               |
| iPhone 4S | 5.1.1      | +                    | +                 | +                   | +               |
| iPad 2, iPad 3 (JB) | 5.1.1 | +                    | +                 | +                   | +               |

---

### Conclusions
- iPhone physical analysis is possible.
- Physical acquisition requires a boot-time exploit.
- Passcode is usually not a problem:
  - Due to technology before iOS 4.
  - Due to human factors with iOS 4/5.
- Both proprietary and open-source tools for iOS 4/5 acquisition are available.

---

### Thank You!
Questions?

---

# Evolution of iOS Data Protection and 
## iPhone Forensics: from iPhone OS to iOS 5
### Andrey Belenko & Dmitry Sklyarov
#### Elcomsoft Co. Ltd.