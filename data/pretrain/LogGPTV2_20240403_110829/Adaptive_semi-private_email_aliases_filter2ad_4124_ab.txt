ing to a SEAL user addresses their mail to the user’s semi-private
alias, and the SEAL service performs any necessary restrictions,
after which the mail can be forwarded to the user at their normal
inbox. Users can also manage their aliases directly over a provided
web interface.
To become a user of SEAL, one creates an account with an email
provider and conﬁgures the account to relay emails through SEAL.
The system could also potentially play the role of an email provider.
However, segregating the roles has two practical advantages.
Reduced attack surface: Leveraging existing email providers al-
lows SEAL to obviate the need to provide message storage.
This reduces the attack surface of SEAL and also insulates
the user’s emails from theft or corruption in the event of an
attack.
User familiarity: Most users are already familiar with the user in-
terfaces of their current email providers. Many email providers
also provide other useful features. Using the services of ex-
isting email providers for SEAL eliminates the need for users
to learn a new interface and allows them to continue using
their favorite features.
To achieve this, we require the mail provider to support sending
mails over authenticated SMTP, which is supported by some email
providers, including Gmail, as well as most modern software-based
email clients such as Mozilla Thunderbird. This is necessary to
prevent masquerading attacks on SEAL.
In addition to normal emails, the user can also send command
emails to two Service Addresses that allow the user to provide in-
structions to SEAL. Users can also receive feedback on the com-
mands from these Service Addresses. Table 1 lists the commands
supported. When an email is received at a Service Address, only the
Subject line is parsed for commands. Table 2 summarizes whether
a sender is allowed to send email to a semi-private alias for each of
the different alias states. Figure 8 in the Appendix shows the state
transitions of an alias.
InternetEmailProviderEmailClientNormal email ﬂowCommand email ﬂowBob's ServerBrowserTimebob.rzkyt7y4bob.u1pvwf47bob.wa12tfcmunrestrictedpartlyrestrictedfullyrestricteddisabledtake the more conservative approach.
Between t2 and t3, SEAL checks that the senders of email ad-
dressed to the leaked bob.rzkyt7y4 are trusted before relay-
ing their mail to the user. This also indicates that the sender has
not updated his address book to send to the new unrestricted alias
bob.u1pvwf47 and so upon the user’s reply, SEAL sends the
original sender a reminder of the change. Email from untrusted
senders is dropped. If the sender is neither trusted nor untrusted,
we drop the mail and send a CAPTCHA to the sender. If the sender
solves the CAPTCHA, a command email is sent to the user seeking
permission to trust the sender. When the user agrees, the sender
is added to the group of trusted senders and notiﬁed. Requiring
the sender to solve a CAPTCHA ﬁrst prevents the user from being
overrun with requests, narrowing them down to requests only for
senders who are likely to be human. Requiring the user’s approval
to add the sender ensures that consent is explicitly given.
At t3, the ﬁrst alias, bob.rzkyt7y4 is changed to the fully re-
stricted state. In this state, only trusted senders can successfully
send emails to the user. No new sender can become trusted as
no CAPTCHA will be issued. At time t4, bob.u1pvwf47 is
found to be leaked. The new successor bob.wa12tfcm is cre-
ated. Trusted senders still sending to bob.rzkyt7y4 will receive
the notiﬁcation to update the address of the user to the newest suc-
cessor, which in this case is bob.wa12tfcm.
At time t5, the original alias is disabled and no emails will be
delivered through it to the user. However, we do not expect this to
be a common operation since aliases in fully restricted mode allow
the user to maintain communication with already trusted users, and
also due to the likely overhead of distributing a new email address
to a user’s correspondents. Hence, so long as the user does not wish
to notify anyone else of the locked-down alias it can continue to be
used without the generation of a replacement. More importantly, no
new senders sending through the alias would be marked as trusted,
thus essentially denying them from emailing the user.
3.2 Aliases as Proof of Afﬁliation
As mentioned in the introduction, semi-private aliases can also
be used as a means of offering an afﬁliation validation service,
which provides proof of a user’s afﬁliation with some organization
in order for them to gain access to certain services or discounts.
Trivially, our implementation could be extended further, with the
organization providing an additional service that allows its mem-
bers to attach a supplementary information proﬁle to each alias and
host that proﬁle on a directory service as more detailed proof of the
identity associated with a certain alias address. At this time, with
our current real-world deployment that gives students access to Pi-
azza.com forums, we have only needed to provide basic afﬁliation
validation.
3.3 Requesting an Alias
The user may need to distribute aliases under a multitude of sce-
narios. We broadly categorize them as online and ofﬂine. By on-
line, we mean that the user needs to distribute an alias while she has
network access to SEAL’s server. In contrast, in an ofﬂine scenario,
the user is not able to interact with SEAL over the network. How-
ever, we assume that there are opportunities for the user to access
SEAL at some point in time prior to needing an alias. We sub-
categorize online scenarios into alias requests and retrievals. An
alias request creates a new alias that the user can distribute to a new
contact. An alias retrieval refers to scenarios where the user wishes
to retrieve a previously requested alias associated with a website
URL. To minimize the learning curve, it is important that minimal
effort be required from the user when requesting new aliases under
the different scenarios. We now give an overview of the most likely
scenarios and describe brieﬂy four mechanisms provided by SEAL
to request aliases under different scenarios.
3.3.1 Request via Command Emails
In an online scenario, a user who has access to an email client can
send command emails to the service address getalias@seal-
server to request a new alias. This is the catchall mechanism
since we can assume that users will normally have access to some
email client. The server responds with an email containing an alias
that the user can distribute to contacts. SEAL’s response would
be stored in the user’s inbox. We also allow the user to specify a
hint as a reminder to the context under which the alias is generated.
Figure 9 in the Appendix shows a request example on the left and
the server’s response on the right.
3.3.2 Request via Browser Extensions
Another common online scenario requires the user to request
an alias which may be subsequently needed for identiﬁcation pur-
poses. Speciﬁc examples of such a scenario include accessing the
user’s account information for a website and posting on forums. To
cater to such situations, SEAL provides a browser extension that
uses magic sequences for alias request and retrieval.
To detect the magic sequences, we use the same approach as
PwdHash [25].
In that work, a browser extension transparently
generates a unique password for the user. The other functionali-
ties of the two extensions differ. We developed a Firefox exten-
sion that operates in two modes, request and retrieval, triggered
by two magic sequences. For each browser session, when a magic
sequence is detected, the extension authenticates the user with our
system via their credentials. Once authenticated, a session key is
generated and stored by the extension for the current session. Re-
quest mode automatically fetches a new alias from our server and is
triggered by typing the magic sequence “##[alias]#[hint]#”.
A salted hash of the site’s domain is stored. Retrieval mode is trig-
gered by the magic sequence “##$” and is used when the user logs
in to a previously registered site that requires an email address for
authentication. The salted hash of the domain is used for looking
up the previously created alias.
3.3.3 Request for Ofﬂine Distribution
The most challenging scenarios occur when a user is ofﬂine. For
example, the user could be ﬁlling out a paper form at some place
lacking an Internet connection. Though we have not implemented
this, we envisage an SMS service that replies with a new semi-
private alias whenever the user makes a request.
In addition, a
mobile application that caches several aliases while it has network
access and dispenses them as needed could be used.
An even more challenging scenario is posting email IDs on web
pages, printed documents, or on business cards. Since such IDs
are widely disseminated, they are likely to generate both spam and
legitimate use very quickly, even if the IDs are semi-private aliases.
We discuss a potential solution to the problem in Section 6.
4. ARCHITECTURE
SEAL’s architecture is illustrated in Figure 3. The three main
components in SEAL’s core architecture are the Dispatcher,
Email Processor, and Command Processor. The Dis-
patcher receives email over SMTP and passes them to the appro-
priate modules. If the email is a normal email, it is dispatched to the
Email Processor. Otherwise, a command email is sent to the
Command Processor. Other than using emails, it is also possi-
ble to interact with the Command Processor over HTTP/S. We
Figure 3: SEAL architecture.
discuss the components with reference to their functionalities.
Figure 4 shows a simpliﬁed version of our database. Each user
has a salt that is used for hashing sensitive information, such as the
sender’s email addresses. This is to limit potential information loss
in the event that SEAL is compromised.
4.1 Account Creation
The user creates a SEAL account by visiting SEAL’s signup
page and specifying the username, password, and relay address.
The Signup Manager records this information to the database.
The username and password are used for SMTP authentication by
the user’s mail provider when sending email through SEAL, with
the username being converted to a sender address taking the form
@sealserver. It is worth noting that this email
address constructed from the username could be revealed to arbi-
trary recipients via reply messages or other means, but such a leak
would not compromise the user’s account since email sent to that
address is simply dropped. All incoming messages to aliases and
replies to command emails are sent to the relay address. By storing
only the basic necessary information for SEAL’s proper function-
ing, we aim to minimize the risks of theft of sensitive user data
should our server ever become compromised. While our system
works with any existing email account whose provider supports
sending email as a user of another SMTP server, ideally, a new
account should be created so as to start from a clean slate since the
existing address might have already been leaked.
4.2 Alias Request
Requests for new aliases are sent to Alias Creator. This
could be done either using a command email or an HTTP GET Re-
quest. The Alias Creator takes an alias name and an optional
hint as inputs. If the alias name has not been taken by another user,
Alias Creator creates a randomization string of length eight.
We allow 32 possible alphanumeric case-insensitive characters (ex-
cluding ‘0’, ‘o’, ‘i’, and ‘l’ to avoid potential user confusion) in the
randomization string, providing a base entropy of 240 bits for each
alias address. This randomization helps to make it difﬁcult for a
spammer to correctly distinguish valid aliases from invalid ones.
Implicitly, since the maximum allowable length of an email ID is
64 characters and a delimiter is used, this restricts the alias name to
a maximum of 55 characters.
We note, however, that since the randomization string exists pri-
marily to help thwart guessing attacks, there is a tradeoff that can
be made by those deploying a SEAL server between the reduced
guessability provided by longer randomization strings and the im-
proved readability and greater potential length of alias names pro-
vided by short randomization strings. We chose a length of eight
characters as an heuristic compromise between the two, but the
length could easily be made shorter or the randomization even elim-
inated entirely if it is not felt to be of particular importance. One
possible design could be to allow the user the liberty to generate
her own random string. However, an adversary could then guess
existing aliases trivially.
The optional hint replaces the user’s name in the To header and
can be used to remind the user of the context for which the alias
is intended. Figure 10 shows an example of a hint “work”. To
prevent the original sender from observing the hint, it is removed
in the reply mail to the sender.
4.3 Managing the Alias Lifecycle
An alias’ lifecycle begins when the user makes a request. Alias
Creator then creates an entry in the database.
When a new email is received for an alias from a non-user, the
Dispatcher checks the state of the alias. If it is unrestricted,
Email Header Processor (EHP) replaces the To header with
the user’s relay address and appends the alias to the Reply-To
header before sending it out. This causes the user to send their re-
ply to the alias, which will result in SEAL processing the reply mail
to appear as if it had been sent by that alias.
On the other hand, if the alias is restricted, the email is dis-
patched to the Restriction Checker, which then checks if
the sender is trusted.
If it is, the email is relayed to the email
provider via EHP. If the sender has not yet been encountered by the
recipient alias, the Restriction Checker tells EHP to gener-
ate a CAPTCHA response for the sender. Otherwise, the sender is
untrusted and the email is dropped.
If an email arrives from a user, it is dispatched directly to EHP,
which will replace the From header with the alias speciﬁed in the
To header, so long as it is owned by that user.
If Dispatcher detects that the incoming email is a response
to a CAPTCHA challenge, it forwards the email to the CAPTCHA
Verifier, which will validate the response and send a system
message to the user to conﬁrm the sender as trusted. While waiting
for user validation, the sender will be treated as untrusted.
UserDispatcherSignup ManagerAlias CreatorAlias RestricterMail Provider(Private Address)BrowserUserWebsiteFigure 4: Simpliﬁed SEAL database. In table aliasrand, the states 0, 1, and 2 mean unrestricted, partly restricted and fully restricted
respectively.
The user may mark a particular alias as partly restricted or fully
restricted. The user does this by sending a command email to
service@sealserver, which will be dispatched to the Alias
Restricter. Similarly, the user may mark a sender as trusted
or untrusted. The command is dispatched to Sender Truster.
Note that the restriction level for an alias is monotonically increas-
ing. Once an alias is leaked, it cannot reach the unleaked state
again. On the other hand, the trust level for a sender is reversible.
One possible method to automate the process of restricting leaked
aliases is to leverage existing spam technologies. For example,
when an incoming mail to a particular alias is ﬂagged by a spam
ﬁlter, we automatically restrict the alias. However, given the con-
dition of current-state-of-the-art anti-spam technologies, false pos-
itives are still possible. Thus, to avoid erroneously marking an alias
as leaked, we let the user perform the marking.
5. EVALUATION
We implemented a proof-of-concept system using Postﬁx as the
mail transfer agent and Dovecot Simple Authentication and Se-
curity Layer (SASL) for user authentication [26, 27]. We imple-
mented the system core as Postﬁx advanced content ﬁlter using
Python scripts. This allows us to examine and modify email head-
ers. Frontend web scripts provide account management functions
for users. We also implemented a browser extension for Firefox by
modifying PwdHash [25] so that the user can request reproducible
email IDs for ﬁlling out web forms.
There are four main parts to our experiments. In the ﬁrst part,
we present a simple case study demonstrating how a semi-private
alias would be used to prevent unwanted emails from an example
advertising website. In the second part, we offered the system as
an option to a class that was asked to sign up with a discussion fo-
rum that requires their afﬁliation with the university to be validated
using email addresses. Thirdly, we registered with several websites
and studied potential address leakages. And lastly, we provide an
analysis of the processing overhead incurred by SEAL as it for-
wards email messages.
5.1 Case Study
As a case study for our system for semi-private aliases, we cre-
ated a new alias and registered it with the online travel website
tripadvisor.com. This particular website was chosen for the
case study because we had previously observed, while testing SEAL,
that they used multiple afﬁliated, but unique, domains for advertis-
ing different types of offers to registered users. Hence, the pat-
tern of emails we would anticipate receiving on an alias registered
with the site intuitively serves as a good simulation of address leak-
age, providing a simple test of SEAL’s effectiveness at providing
user control. Although we acknowledge that the choice of a single
website does not count as rigorous testing, we note that this case
study only attempts to demonstrate SEAL’s potential effectiveness
at reacting to an address leak. To provide a better demonstration
of SEAL’s effectiveness, attempts were made to ﬁnd websites or
newsletters that actually leaked addresses (See Section 5.3.1). But
the authors came to realize that most spam sites appear to be either
quickly taken down or not reliable enough for performing experi-
ments. Furthermore, it is unrealistic that people would actually go
out of their way to register with spam sites in reality, in turn making
such an experiment also somewhat unrealistic.
After registering our newly created alias with the travel web-
site, the emails received at the alias could be classiﬁed into two
broad types: those addressed from the tripadvisor.com do-
main and those addressed from some afﬁliate of tripadvisor
(e.g. cruisecritic.com). Otherwise, no serious address leak-
age was observed to have occurred in the case study. Treating this
as a simulated leakage — to the non-tripadvisor domains —
intuitively, SEAL’s ideal operation would be to allow the user to
block all of the messages received from the afﬁliate domains while
preserving the receipt of emails directly from tripadvisor.com.
All of the email received on our alias during the 40-day case
study from the tripadvisor.com domain was addressed from
either of two different email addresses, while the afﬁliate emails
were addressed from a variety of sources, none of which featured a
tripadvisor domain. Because of this, at any point after at least
one email from each of the tripadvisor sources has been re-
ceived by the alias, partly restricting the alias and marking any un-