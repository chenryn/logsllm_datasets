### Prisma by Palo Alto Networks | Kubernetes Privilege Escalation: Excessive Permissions in Popular Platforms | White Paper

#### Overview of DaemonSet Permissions

- **machine-config, sdn, multus-***: Create pods, update validatingwebhookconfigurations
- **Antrea (antrea-agent)**: Patch nodes, patch pods, update services, update services/status
- **Calico**: No significant permissions
- **Cilium (cilium)**: Update nodes, update pods, delete pods
- **Weave Net**: No significant permissions

#### Impact of Container Escape on Kubernetes Platforms

Based on the analysis of powerful DaemonSets, 50% of the reviewed Kubernetes platforms were found to be vulnerable to a single container escape that could compromise the entire cluster. In another 12.5%, a container escape was likely enough to take over some clusters. For an additional 12.5% of platforms, a container escape could compromise the entire cluster if a recommended feature was enabled.

**Figure 9: Impact of Container Escape in Analyzed Kubernetes Platforms**

- **Container Escape == Cluster Admin?**
  - **Yes (50%)**
  - **Likely in Some Clusters (25%)**
  - **No (12.5%)**
  - **With Certain Features (12.5%)**

**Table 4: Impact of Container Escape Across Analyzed Platforms**

| Platform   | Escape == Admin | Attack Prerequisite |
|------------|-----------------|---------------------|
| AKS        | Yes             | Acquire Token → Manipulate AuthN/Z |
| EKS        | Likely in some clusters | Steal Pods | A stealable powerful pod |
| GKE        | With Dataplane v2 | Steal Pod / RCE → Acquire token → Manipulate AuthN/Z | Dataplane v2 enabled |
| OCP        | Yes             | Acquire Token |
| Antrea     | Yes             | Steal Pods / RCE → Acquire token → Manipulate AuthN/Z |
| Calico     | No              | — |
| Cilium     | Yes             | Steal Pod / RCE → Acquire token → Manipulate AuthN/Z |
| Weave Net  | No              | — |

In some platforms, DaemonSets had admin-equivalent permissions, making it straightforward to acquire admin privileges. In other platforms, while DaemonSets weren't powerful enough to become full admins, they did have permissions allowing them to take over other pods. In most of these platforms, because admin-equivalent pods were installed by default, attackers could still abuse the platform's DaemonSets to acquire admin privileges.

For example, in Antrea, the `antrea-agent` DaemonSet wasn't powerful enough to acquire admin privileges by itself but had permissions allowing it to take over other pods. Since Antrea installs an admin-equivalent pod (`antrea-controller`) by default, the `antrea-agent`'s permissions could be exploited to compromise the `antrea-controller` pod and thus acquire admin privileges.

#### Recommendations for Mitigation

If your clusters rely on one of the impacted platforms, here are some steps to mitigate the risk:

1. **Prevent Container Compromise and Escape**: Best practices and active defenses can prevent attackers from compromising and escaping containers.
2. **Update to De-Privileged Versions**: Several platforms have released versions that de-privilege powerful DaemonSets.
3. **Implement Best Practice Hardening**: For example, an allow-list policy for container images can hinder lateral movement attacks that abuse the 'patch pods' permission to replace the image of an existing pod with an attacker-controlled one.
4. **Multitenant Clusters**: If you run multitenant clusters, you are at greater risk.

A "Likely in Some Clusters" in the "Escape == Admin" column indicates that there is a prerequisite for a container escape to compromise the entire cluster, which is likely to be met in some clusters. For example, an attacker abusing a powerful DaemonSet that can steal pods can only acquire cluster admin privileges if there is an admin-equivalent pod to steal in the cluster.

Some popular projects that install admin-equivalent pods by default include ingress-nginx, cert-manager, Kynvero, traefik, and aws-load-balancer.

**Note on Cilium Installation Methods**:
- The table above pertains to the default installation method using `cilium-cli`.
- The default Helm installation also deploys the same powerful DaemonSet but does not deploy an admin-equivalent pod. Therefore, when Cilium is installed via Helm, a container escape is only enough to compromise the entire cluster if the user installs an admin-equivalent pod.

#### Powerful Kubelets in Popular Platforms

While many Kubernetes distributions and managed services have adopted the NodeRestriction admission controller, some still run powerful Kubelets, introducing similar security risks as powerful DaemonSets.

**Table 5: Powerful Kubelets Across Analyzed Managed Services and Distributions**

| Platform | Type           | Powerful Kubelets |
|----------|----------------|-------------------|
| AKS      | Managed Service| Yes               |
| EKS      | Managed Service| No                |
| GKE      | Managed Service| No                |
| OCP      | Distribution   | No                |

#### Fixes and Mitigations by Affected Platforms

We reported the identified powerful DaemonSets and Kubelets to affected vendors and open source projects between December 2021 and February 2022. Most platforms pledged to strip powerful permissions from their DaemonSets, and some have already done so. From the original 62.5%, only 25% still run powerful DaemonSets.

**Table 6: Fixes and Mitigations by Affected Platforms**

| Platform | Had Powerful DaemonSets | Fixed | Had Powerful Kubelets | Fixed |
|----------|-------------------------|-------|-----------------------|-------|
| AKS      | Yes                     | No    | Yes                   | WIP   |
| EKS      | Yes                     | Yes, from Kubernetes v1.18 | No | — |
| GKE      | With Dataplane v2       | Yes, from v1.23.4-gke.900, $13022 Bounty | No | — |
| OCP      | Yes                     | WIP set for v4.11, possible backports | No | — |
| Antrea   | Yes                     | Yes, v1.6.1 alongside an admission policy | No | — |
| Calico   | No                      | —     | No                    | —     |
| Cilium   | Yes                     | Yes, v1.12.0-rc2, some fixes backported | No | — |
| Weave Net| No                      | —     | No                    | —     |

Platforms addressed powerful DaemonSets through various techniques:

1. **Remove**: Unnecessary or overly broad permissions were removed.
2. **Relocate**: Functionality requiring powerful permissions was moved from DaemonSets running on all nodes to deployments running on fewer nodes or to the control plane.
3. **Restrict**: Admission policies were released to limit powerful DaemonSets to safe and expected operations.

As a result, the number of platforms where a single container escape is enough to compromise the entire cluster dropped from 50% to 25%. This number pertains to Kubernetes-native attacks and does not cover possible platform-specific privilege escalations.

**Figure 10: Impact of Container Escape in Analyzed Kubernetes Platforms Following Fixes**

- **75% No**
- **25% Yes**

Stripping existing permissions can be challenging. We thank the vendors and open source projects mentioned in this report for their efforts to remove powerful DaemonSets and Kubelets from their platforms.

#### Toward Better Node Isolation

Kubernetes is moving toward stronger node isolation, starting with the NodeRestriction admission controller. Complete node isolation is unlikely in the near future, but better node isolation is certainly possible. At the very least, clusters should not host powerful credentials on every node. Removing Trampoline DaemonSets can ensure the majority of nodes are unprivileged.

Some powerful permissions will be harder to drop due to the lack of fine-grained access control for certain operations. Even when certain permissions cannot be easily stripped, it is still an improvement when a DaemonSet that could previously acquire admin tokens is now only able to launch man-in-the-middle attacks.

#### Identifying Powerful Permissions

Whether you use a mentioned platform or not, if you run Kubernetes, your clusters likely host powerful pods. The first step in addressing risky permissions is identifying them. The following tools can be used to identify powerful permissions in running clusters and in Kubernetes manifests.

**Figure 11: rbac-police Alerts on Excessive Permissions of Service Accounts, Pods, and Nodes**

- **rbac-police** comes equipped with more than 20 policies that each hunt for a different set of powerful permissions. It is also 100% customizable. You can write your own policies to search for any pattern in Kubernetes RBAC, including powerful permissions we may have missed, permissions specific to certain platforms, or those related to CRDs (Custom Resources Definitions). If you write a policy, please consider contributing it.

**Supported Commands for rbac-police:**

- **rbac-police eval**: Evaluates the RBAC permissions of service accounts, pods, and nodes through built-in or custom Rego policies.
- **rbac-police collect**: Retrieves the RBAC permissions of service accounts, pods, and nodes in a cluster. Useful for saving a RBAC snapshot of the cluster for multiple evaluations with different options.
- **rbac-police expand**: Presents the RBAC permissions of service accounts, pods, and nodes in a more human-friendly format. Useful for manual drilldown.

For fine-tuned evaluation, rbac-police provides a variety of options, including:

- **--only-sa-on-all-nodes**: Evaluate only service accounts that exist on all nodes. Useful for identifying powerful DaemonSets.
- **--namespace, --ignored-namespaces**: Scope evaluation to a single namespace; ignore certain namespaces.