(cid:4)(cid:13)(cid:12)(cid:17)(cid:6)(cid:19)(cid:17)
(cid:14)(cid:15)(cid:13)(cid:4)(cid:6)(cid:16)(cid:16)(cid:9)(cid:12)(cid:8)
(cid:4)
(cid:9)
(cid:6)
(cid:10)
(cid:2)(cid:18)(cid:5)(cid:9)(cid:17)
(cid:2)(cid:3)
(cid:3)
(cid:8)
(cid:22)(cid:34)(cid:34)(cid:1)(cid:32)(cid:22)(cid:31)(cid:25)
(cid:36)(cid:25)(cid:35)(cid:1)(cid:38)(cid:41)(cid:34)(cid:25)
(cid:34)(cid:22)(cid:36)(cid:22)(cid:31)(cid:37)
(cid:2)(cid:1)
(cid:15)
(cid:5)(cid:3)
(cid:7)(cid:6)
(cid:2)(cid:2)
(cid:7)(cid:7)
(cid:2)(cid:4)
(cid:16)(cid:26)(cid:7)(cid:4)(cid:1)(cid:26)(cid:8)(cid:4)(cid:5)(cid:5)(cid:4)(cid:26)(cid:32)(cid:17)
(cid:26)(cid:25)(cid:22)(cid:38)(cid:39)(cid:36)(cid:25)(cid:1)(cid:40)(cid:25)(cid:23)(cid:38)(cid:33)(cid:36)
(cid:12)
(cid:8)
(cid:24)(cid:25)(cid:23)(cid:29)(cid:37)(cid:29)(cid:33)(cid:32)
(cid:23)(cid:33)(cid:32)(cid:26)(cid:29)(cid:24)(cid:25)(cid:32)(cid:23)(cid:25)(cid:1)
(cid:23)(cid:39)(cid:36)(cid:36)(cid:25)(cid:32)(cid:38)(cid:1)(cid:21)(cid:18)(cid:19)
(cid:34)(cid:36)(cid:33)(cid:31)(cid:34)(cid:38)(cid:1)(cid:36)(cid:22)(cid:38)(cid:25)
(cid:34)(cid:36)(cid:25)(cid:40)(cid:29)(cid:33)(cid:39)(cid:37)(cid:1)(cid:24)(cid:25)(cid:23)(cid:29)(cid:37)(cid:29)(cid:33)(cid:32)(cid:37)
(cid:7)
(cid:11)
(cid:41)(cid:25)(cid:37)
(cid:21)(cid:20)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:21)(cid:22)(cid:23)(cid:28)(cid:29)(cid:32)(cid:25)(cid:1)(cid:20)(cid:25)(cid:22)(cid:36)(cid:32)(cid:29)(cid:32)(cid:27)
(cid:21)(cid:20)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1) (cid:21)(cid:22)(cid:23)(cid:28)(cid:29)(cid:32)(cid:25)(cid:1)(cid:20)(cid:25)(cid:22)(cid:36)(cid:32)(cid:29)(cid:32)(cid:27)
(cid:23)(cid:2)(cid:3)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:34)(cid:36)(cid:33)(cid:31)(cid:34)(cid:38)(cid:29)(cid:32)(cid:27)(cid:1)(cid:26)(cid:39)(cid:32)(cid:23)(cid:38)(cid:29)(cid:33)(cid:32)
(cid:23)(cid:2)(cid:3)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:34)(cid:36)(cid:33)(cid:31)(cid:34)(cid:38)(cid:29)(cid:32)(cid:27)(cid:1)(cid:26)(cid:39)(cid:32)(cid:23)(cid:38)(cid:29)(cid:33)(cid:32)
(cid:33)(cid:34)(cid:38)(cid:29)(cid:33)(cid:32)(cid:22)(cid:30)(cid:1)(cid:37)(cid:38)(cid:25)(cid:34)
(cid:33)(cid:34)(cid:38)(cid:29)(cid:33)(cid:32)(cid:22)(cid:30)(cid:1)(cid:37)(cid:38)(cid:25)(cid:34)
(cid:32)(cid:33)
(cid:1)(cid:2)(cid:3)
(cid:14)(cid:15)(cid:13)(cid:11)(cid:14)(cid:17)
(cid:18)(cid:16)(cid:6)(cid:15)
(cid:11)(cid:10)(cid:1)(cid:11)(cid:13)(cid:5)(cid:6)(cid:10)
(cid:18)(cid:14)(cid:5)(cid:2)(cid:17)(cid:6)
(cid:7)(cid:8)
(cid:2)(cid:5)
(cid:11)(cid:10)(cid:1)
(cid:11)(cid:13)(cid:5)(cid:6)(cid:10)
Fig. 1. SmarPer architecture. Intercepted apps’ requests together with contextual information are used as input to a machine learning model
that predicts a decision. After step 5, a function c() takes as input the decision and other parameters to decide if the decision should be made
automatically or if the user should be prompted. All decisions and contextual information are stored for continually training the model.
obfuscation, to reduce the sensitive information revealed to
apps while maintaining some level of utility.
We also consider the following deployability goals: Efﬁ-
ciency, to support SmarPer in hardware-constrained mobile
devices; Privacy, to guarantee that users’ decisions and contex-
tual information gathered will not compromise users’ privacy;
and Flexibility, to enable users to conﬁgure different obfusca-
tion techniques, privacy preferences, and learning rates, and
to correct possible prediction errors.
C. System Flow
Figure 1 shows the general architecture and data ﬂow of
SmarPer. As stated before, SmarPer follows a feedback loop
approach. First, SmarPer intercepts a privacy-sensitive app
request (1), e.g., Android API call for location. The app
name, request type, and parameters in the API call are sent
for processing (2). Information about the current context is
collected from the device (3). This includes information about
the app (e.g., whether it is in the foreground or background),
smartphone state (e.g., whether the screen is locked), and
smartphone’s sensor information (e.g., location provided by
the GPS). For more details, see Section IV-C. All of this
information is processed into a feature vector that is input to
the machine learning model for prediction (4). Given the user’s
past decision and contextual data, the model predicts whether
the user would allow, obfuscate, or deny the request; and it out-
puts the predicted decision, along with other parameters such
as the estimated conﬁdence (e.g., mean and variance) (5). A
function c() take as input the predicted decision and estimated
conﬁdence, as well as other parameters such as current MAE,
prompt rate, and previous decisions, and it determines if the
predicted decision should be used (i.e., automatic decision) or
if the user should be prompted (Figure 2). The function c()
can be adjusted by the user to regulate the number of prompts.
When SmarPer has a decision (manual or automatic), it pre-
pares to respond to the requesting app (6). If the decision calls
for obfuscation, obfuscation is performed on the requested data
before returning it to the app (7), e.g., reducing the precision
of the location. SmarPer then responds to the app with the
requested data (8). Finally, the decision, contextual informa-
tion, and whether the decision was manual or automatic are
recorded in the SmarPer database (9). Optionally, the user can
review recent automatic decisions and correct them if they
are wrong (10). This user feedback is also incorporated in
the model (11 and 12). More speciﬁcally, the corresponding
corrected decisions are added to the training set and the model
is updated, possibly with higher weights. The user can set a
parameter to determine the cost-sensitivity, i.e., the user can
express which type of error they are more willing to tolerate
(oversharing or undersharing).
IV. SMARPER IMPLEMENTATION
We implemented a partial version of SmarPer, compatible
with Android 4.0.3 to 5.1.1, to evaluate obfuscation techniques
and to collect permission decisions and their associated con-
textual information. During our ﬁeld experiment (Section V),
our SmarPer implementation operated in full manual mode:
There were no automatic decisions or learning from users’
behavior, users were always prompted at runtime for deci-
sions. The performance of our machine learning model was
evaluated ofﬂine using the data collected (Section VI). Such
an ofﬂine machine learning approach, used by other works in
this area [2], [8], [23], enables the use of a larger variety of
machine learning tools and analysis techniques to assess the
potential of SmarPer. We focused on a robust implementation
to avoid interfering with the OS and apps and it is available
as an open-source project under a GPLv3 license [11].
A. Request Interception
Android and other popular mobile platforms do not provide
a native API to mediate apps’ requests, as suggested by Heuser
et al. [17]. Therefore, we took a rooted-device approach to
dynamically intercept apps’ requests, without modifying the
OS; rooting a device is easier than ﬂashing a new ﬁrmware,
and there are millions of users with rooted devices [8].
To intercept privacy-sensitive API calls, our implementation
builds on the open-source permission tool XPrivacy v.3.6 [4].
XPrivacy is a module of the Xposed framework [31], a
general framework that lets users install modules to modify the
look and feel of their smartphone. It requires root privileges
1061
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:19:06 UTC from IEEE Xplore.  Restrictions apply. 
Allow
Obfuscate
Deny
Location
Contacts
Storage
Camera
EFFECT OF EACH DECISION TYPE (ALLOW, OBFUSCATE, DENY) ON DIFFERENT DATA TYPES IN SmarPer. WE IMPLEMENTED OBFUSCATION FOR
LOCATION, CONTACTS, STORAGE, AND CAMERA AND EVALUATED THEM IN A FIELD EXPERIMENT WITH REAL USERS.
TABLE I
in order to change the app process executable to add an
additional library (Xposed). This enables developers to hook
Android API calls and execute code before or after API
call execution, to modify OS or apps’ functionalities. All of
these modiﬁcations are done in memory [32]. Note that there
is a chance that this request-interception approach could be
bypassed by (malicious) apps to avoid SmarPer; however, such
threats are out of the scope of this work. The main methods
we propose in this work, essentially obfuscating sensitive
data and predicting users’ decisions, are independent from the
underlying request interception technique used.
B. Data Obfuscation
In SmarPer, users can allow, obfuscate, or deny access to
their private data. By using the Xposed framework, we were
able to modify the parameters and return values of sensitive
API calls before or after it executes. The “allow” case is
straightforward: We allow the API call to execute without
modiﬁcation. For “obfuscate”, we remove some level of detail
from the returned data. For “deny”, we return fake values.
We faced multiple challenges while implementing obfusca-
tion techniques. First, obfuscation is data dependent. Hence,
different techniques must be used for different data types; and
data types can have more than one obfuscation technique. For
instance, for the camera, we can reduce image resolution or
blur people faces. Hence, we envision a community of privacy-
conscious developers implementing obfuscation “plugins” for
SmarPer in the future. Second, the utility of each obfuscation
technique depends on the type of app and use case. For
example, to reduce the risk of unauthorized pictures, a QR
code scanner app can still work if obfuscation only blurs
people faces from images. Note that the privacy implications of
data obfuscation depend on the type of data, the data itself, and
on the background knowledge available to the adversary (e.g.,
a service provider or an ad network). Third, obfuscated data
could cause the app to crash or behave unexpectedly [24]: e.g.,
we noticed that the WhatsApp messenger app will not display
correctly the name of the user’s contacts if we obfuscate
access to the contacts database. Fourth, there is no native
support for obfuscation in mobile platforms. Therefore, to
implement obfuscation techniques, we need to understand the
low-level details of how the OS processes each data type.
We implemented obfuscation techniques for the following four
data types (Table I):
Location: We implemented location obfuscation by discretiz-
ing the Earth into 10km by 10km areas. Instead of returning
the user’s exact
location, SmarPer returns the coordinates
of the center of the current area the user is in, as shown
by the green icon in the ﬁrst row of Table I. The size of
these areas is easily conﬁgurable. A more privacy-consistent
solution would use a variable size based on the population
or point-of-interest density. More advanced location privacy-
protection mechanisms (LPPM) could also be considered such
as [33] (optimal grid-based obfuscation) or [34] (differential
privacy/geo-indistinguishability), as static obfuscation, based
on a ﬁxed grid, is known to be vulnerable to attacks [35].
Apps generally ask for the user’s location to tailor some
features to the user’s location, e.g., ads or the current weather.
With this approach, apps can provide the same level of utility
while the user’s privacy increases, as their exact location is
not revealed. For the deny decision, a ﬁxed set of coordinates
are returned. The level of privacy-protection provided by such
1062
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:19:06 UTC from IEEE Xplore.  Restrictions apply. 
data obfuscation techniques can be captured by the (difference
of) accuracy of known inference mechanisms on location data
(e.g., ﬁlling the gaps in an obfuscated location trace [36] and
inferring activity preferences [37] and interests [38]).
Contacts: Implementing obfuscation for contacts was particu-
larly difﬁcult. Android stores contact information in a SQLite
database. Apps can query this database to request any informa-
tion they need, as long as they have the READ CONTACTS
permission. With SmarPer, we have access to the actual
queries that apps make to the contacts database, as well as
a Cursor object with the returned data that we can modify
before it is returned to the app. To implement obfuscation, we
ﬁltered out rows from this Cursor that are not names, phone
numbers, postal addresses, or e-mail addresses. Yet, because
apps have great ﬂexibility to query this database, a column
identifying the type of the returned information is not always
present in the Cursor. This means that we might not know
what type of private data we are looking to ﬁlter out in the
result. If we have the type information, we ﬁlter out rows
that are not names, phone numbers, postal addresses, or e-
mail. Otherwise, we check all the columns containing data in
the returned Cursor with regular expressions for these four
allowed types. For phone number and e-mail we use the stan-
dard Android API calls PhoneNumberUtils.isReallyDialable()
and Patterns.EMAIL ADDRESS. Rows that do not match the
regular expression for name, phone number, postal address, or
e-mail are discarded from the result before it is returned to
the app. For the deny decision, SmarPer simulates an empty
address book by returning an empty Cursor.
Most apps request access to contacts to ﬁnd user’s friends
already registered in the service. For this purpose, name, phone
number, postal address, or e-mail address should sufﬁce. Users
can enter a variety of other (potentially sensitive) information
about their contacts into the contacts database, such as birth-
days, relationship to the user, and employer. Revealing this
information to an app does not have a clear use case. By
revealing only names, phone numbers, postal addresses, and
e-mail addresses, we maintain utility for the majority of apps
and reduce the amount of sensitive information revealed.
Storage: To implement obfuscation for storage, we restricted
access to the Android Public directories (accessible to all
apps with the READ EXTERNAL STORAGE permission) –
Pictures, Music, Movies, and DCIM (Camera pictures) that,
ironically, actually contain private data. For this purpose,
SmarPer returns a “FileNotFoundException”; this is an excep-
tion that an app should be prepared to handle: It can happen
that these ﬁles really do not exist. We also ﬁlter out these URIs
from queries made to MediaScanner, a service that keeps track
of all the user’s ﬁles on the device. For the deny case, SmarPer
simulates that the external storage is unmounted.
To create a cache on the external storage, some apps request
the WRITE EXTERNAL STORAGE permission (which im-
plicitly includes READ EXTERNAL STORAGE permis-
sion). This functionality is preserved with our obfuscation
technique. However, a curious app which wants to sift through
the user’s photos will not be able to do so. Some apps, how-
ever, need write access to the Public directories, to save new
data there, e.g., photos. If this is the case, the user will need
to allow access to storage to preserve functionality. Evaluating
the privacy protection of such an obfuscation technique, or
more generally the privacy risks of accessing data on users’
SD card, highly depends on the data.
Camera: We obfuscated two aspects of the camera: the camera
preview (i.e., when the user opens the camera but has not
taken a photo yet) and taken photos. For both of these, we
reduce the resolution of the returned image by scaling down
and then scaling back up to the original size. The scaling factor
is conﬁgurable. For the deny case, we return a black image.
Apps with access to the camera pose a considerable threat
to user’s privacy: They can take photos without notiﬁcation,
as long as the camera preview is open. Thus, we distort the
returned images. Yet, it is still possible to scan QR codes.
Therefore, QR code scanner apps maintain their utility and
the user maintains privacy. A more advanced alternative to
blurring the whole image would be to only blur or remove
detected faces or detected text [39] and/or window blind the
image [40]. A potential way to evaluate the privacy protection
of such obfuscation techniques is to evaluate the performance
of a standard library in inferring private attributes (e.g., gender
[41], age,5 ethnicity [42]) of the user, as well as the context
(e.g., emotions,5 activity) from the captured video/photo.
Future data types: In general, obfuscation techniques can be
implemented for most data types. As part of our future work,
we plan to implement obfuscation for other data types such as
microphone data (e.g., ﬁltering out frequencies corresponding
to the human voice) and calendar data (e.g., ﬁltering out
information from events such as location and invited guests).
Note that the implemented obfuscation techniques are some-
what simple and not optimal: They may offer only limited
protection for users’ privacy (depending on the data and on
the background knowledge available) and/or limit the utility
of the app. Yet, they offer more control to the user. They
also are a good starting point for evaluating users’ perception
of obfuscation in realistic and easy-to-understand scenarios.
We believe that obfuscation methods should be designed by
taking into account the speciﬁcs of the considered data, how
it is used by different (categories of) mobile apps, and the
privacy implications of the data disclosure, based on research
results in order to determine to which extent users can still be
tracked, identiﬁed, or proﬁled from the disclosed (obfuscated)
data. Designing such techniques is a research problem on its
own (for each type); we leave it to future work together with
the evaluation of the privacy implications of data obfuscation.
C. Contextual Information
For each permission decision, using standard Android API
calls, SmarPer collects the associated contextual information.
Using this information, we selected raw contextual features
that we estimated have an impact on users’ permission de-
cisions. This list
is not exhaustive: There could be other
5Microsoft’s Face
cognitive-services/. Last visited: Feb. 2017.
and Emotion APIs,
https://www.microsoft.com/
1063
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:19:06 UTC from IEEE Xplore.  Restrictions apply. 
not using with the app (i.e., background app), SmarPer only
permits one prompt every 10 to 20 minutes, sampled uniformly
from that interval. If the rate limit has been exceeded, SmarPer
takes the most recent decision for the same type of request. If
no previous decision exists, SmarPer prompts the user. Also,
SmarPer caches each decision for one hour to avoid prompting
repeatedly for the same type of request. If the user is not
using the smartphone, SmarPer applies the previous decision;
otherwise, SmarPer allows the request. Requests associated
with apps and data types not in our list are always accepted.
Non-interruption policy: For some activities (e.g., typing,
calling, taking a photo), it is better to not interrupt users
with prompts, as it can be problematic and lead to noisy
data. Hence, SmarPer does not interrupt the user in such
situations; instead, it uses the previous decision for the same
type of request. If there is no previous decision, the request
is allowed. SmarPer checks if the user is calling using the
TelephonyManager API or if the user is typing or taking a
picture by intercepting API calls such as InputMethodMan-
ager.showSoftInput(), Camera.open(), and Camera.release().
V. COLLECTING PERMISSION DECISIONS
To support automatic decisions in SmarPer, we need data
on how users make permission decisions at runtime and the
contextual information associated with such decisions. This
data is used to train a machine learning model that captures
the permission-decision patterns of each user (Section VI).
Unfortunately, data sets from previous works do not satisfy
our requirements. For example, they do not include runtime