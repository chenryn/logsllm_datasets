V. CODE CLASSIFICATION
In this section, we present our method for large-scale code
snippet classiﬁcation, which corresponds to (3) in the overall
processing pipeline (cf. Figure 1).
Manual snippet analysis allows profound insight into se-
curity problems speciﬁcally raised from crowd-sourced code
snippets. Further, it allows the creation of a rich data set that
annotates crowd-sourced code snippets from Stack Overﬂow.
This opens the doors for machine learning based classiﬁcation.
To the best of our knowledge, we are the ﬁrst to contribute
such a data set to the machine learning community.
The security scoring of code snippets can be seen as a
classiﬁcation problem, which we can effectively solve by
a variety of classiﬁers, e. g. feed-forward neural networks,
decision trees, support vector machines, and many more. By
manually labeling a subset of the collected snippets as secure
and insecure (cf. Section IV), we are able to produce a
training data set for binary classiﬁers. The trained model is
then applied to classify unknown code snippets. We apply the
binary classiﬁer on all security-related snippets extracted by
the oracle-based ﬁlter to provide an automatic procedure of
security assessment.
It is arguable that machine learning based methods deliver
more beneﬁts than rule-based methods on solving security
problems. Our binary classiﬁer can efﬁciently extract dis-
criminative information from the data set, which might be
overlooked by rule based methods.
A. Support Vector Machine
We employ the binary classiﬁer Support Vector Machine
(SVM) as our learning model. In our scenario, the labeled
training data set contains two classes, namely, insecure and
secure code snippets. The collected code snippets can be
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:23:20 UTC from IEEE Xplore.  Restrictions apply. 
+1
+
+
+
+
+
1(cid:2)w(cid:2)2
-
xi
-
-
-
−1
-
-
Fig. 2: Illustration of SVM binary classiﬁer. It maximizes a
1(cid:2)w(cid:2)2 to separate positive and negative samples in its
margin
correct side. Note that a small portion of data samples are
allowed within the margin, which can be controlled by a set
of slack variables ξ.
regarded as documents. We argue that discriminative patterns
can be discovered by examining the tokens in code snippets.
These can be any combination of alphabets and symbols, e.g.,
while, return. Therefore, in our setting the learning problem
is a document classiﬁcation problem with binary classes from
a set of tokens.
i=1, and
its corresponding labels {yi}n
i=1 ∈ [+1,−1], a SVM classiﬁer
learns a margin that maximally separates training samples into
two classes as illustrated in Figure 2. The objective function
can be formulated as follows,
Given a training dataset of n samples X = {xi}n
1
(cid:2)n
(1)
s.t.
2 wT w + C
i=1 ξi
minw,b,ξ
yi(wT φ(xi) + b) ≥ 1 − ξi
ξi ≥ 0, i = 1, . . . , n
In (1) we note that minimizing w equals maximizing a margin.
SVM introduces a set of slack variables {ξi} to soften the
margin, such that a small portion of training samples are
allowed to be misclassiﬁed. Importantly, we also note that
the feature mapping φ(xi) deﬁned over X can intrinsically
handle non-linear cases by the so called ’kernel trick’. For
more details, we refer to [32].
B. Feature Extraction
Since the learning problem of detecting the security level
of code snippets can be viewed as a document classiﬁcation
problem, we employ a common feature extraction method
named tf-idf vectorizer [33]. The tf-idf vectorizer transforms
the whole set of code snippets into a numeric matrix. Each
of the code snippets is considered as a document, namely an
input data sample. We compute term frequency (tf ) and inverse
document frequency (idf ) with respect to the total number of
snippets.
For each snippet,
the term frequency is computed by
counting each token within its document. For the inverse
document frequency, we compute the inverse of the number
of documents where each token appears in. Then the tf-idf
score is simply a multiplication of term frequency and inverse
document frequency. In the end, we maintain a vocabulary of
code tokens parsed from the snippets. This vocabulary will be
converted into a numeric vector of a ﬁxed length containing
all possible tokens’ frequency in this snippet. Normally, tf-idf
vectorizer will form a high dimensional sparse data set with
many entries being set to zero, if all the individual tokens
are taken into account. Some tokens, e.g., randomly generated
numbers, variable and class names, only appear in particular
documents and therefore their document frequency is quite
low. Document frequency can be very high for other tokens,
e.g., common language terms such as return, public. The tf-
idf scores for these tokens will be automatically justiﬁed by
the inverse document frequency, such that their contribution
to the discriminative function will also be reweighed. Finally,
the sparse data set is then fed to SVM as the training data set.
We expect the tokens found in each snippet to represent an
encoding of how secure the code snippet will be.
VI. PDG GENERATION AND CODE DETECTION
Our processing pipeline has now ﬁltered security-related
code snippets from Stack Overﬂow and classiﬁed them either
as secure or insecure (cf. Figure 1, (1) to (3)). Next, we aim to
detect these code snippets in compiled Android applications
from Google Play, (cf. Figure 1, (4) and (5)).
Snippets are given as source code and Android applications
are only available as high-level binaries (i. e. DEX ﬁles). To be
able to apply static code analysis, code snippets and Android
applications must be transformed into the same (intermediate)
representation (IR). In this section, we ﬁrst describe this
transformation step (4) and then give a detailed explanation
of the method we apply (5).
A. Code Snippet Compiling
Commonly, static code analysis techniques require complete
programs or source code [10]. Most code snippets from Stack
Overﬂow however are not complete programs. They mostly
do not compile without error since required method or class
information is missing [11]. A snippet may be a subset
of a larger program which is not accessible or additional
dependencies (e. g. external libraries) might me unknown [10].
For incomplete code snippets creating a typed and com-
plete IR is difﬁcult. To overcome this, we use Partial
Program Analysis (PPA) [10]. It was speciﬁcally designed
to create complete and typed abstract syntax trees (AST)
from source code of partial Java programs. PPA is able
to resolve syntactic ambiguities. For example, the statement
SSLSocketFactory.getDefault() does not allow to
decide if SSLSocketFactory is a class or ﬁeld name. In
this case, SSLSocketFactory is a missing class and there-
fore getDefault() should be resolved to a static method
call. PPA is also able to disambiguate possible typing problems
which arise in case not all declared types are available. This
is done by reconstructing data types from snippets without
126
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:23:20 UTC from IEEE Xplore.  Restrictions apply. 
having access to source ﬁles, binaries or libraries. For data
types that cannot be resolved applying PPA, a generic data type
UNKNOWNP.UNKNOWN is used. This ensures that the created
AST remains complete.
To transform snippets and applications into the same IR,
we use WALA2. Since WALA operates on JVM bytecode,
we transform Android applications to JVM bytecode using
enjarify [34]. To be able to operate on Stack Overﬂow code
snippets, we modiﬁed WALA by integrating PPA. This allows
us to transform incomplete code snippets into WALA’s IR.
Before transformation, we make sure code snippets represent
a complete Java class by adding missing class and method
headers. Based on these snippets, we create the complete
and typed AST using PPA. We were able to successfully
process 1,293 answer (85.2%) and 1,668 question snippets
(66.6%). Snippets which could not be compiled mostly had
a too erroneous syntax and were therefore rejected by WALA.
Furthermore, a lot of snippets contained a mixture of Java code
and non-commented text (e. g code blocks were replaced with
’(...)’). We ignored those snippets for further analyses [11].
B. Code Snippets in Apps
Code snippet containment is given if an application contains
code that is very similar to the code snippet. However, a full
match is not necessary. Instead we use a detection algorithm
which is robust to fractional and non-malicious modiﬁcations3.
We base code snippet detection on ﬁnding similar Program
Dependency Graphs (PDG) which store data dependencies by
applying a modiﬁed approach of Crussel et al. [35]. They
create PDGs for each method and deﬁne the independent sub-
graphs of a PDG as the basic code features that are considered
for reuse detection. A method’s PDG may contain several data
independent subgraphs which are called semantic blocks. Code
similarity is deﬁned on the amount of similar semantic blocks
that are shared among the compared code. Following this
approach provides robustness to high-level modiﬁcations and
trivial control-ﬂow alterations, as well as non-malicious code
insertions/deletion, code reordering, constants modiﬁcations
and method restructurings as described in [35].
Although,
this approach allows the detection of reused
code that has been subject to the deﬁned modiﬁcations, we
consider some of the given robustness features as inappropriate
for our use case. It has several drawbacks when applied on
detecting reuse of code snippets in large Android applications.
Many snippets are quite small in terms of lines of code and
therefore result
in small PDGs. In this scenario, different
code might result in identical PDGs. Therefore, we apply a
more strict approach which additionally compares constants
and method names that belong to a semantic block. This
is reasonable because constants are critical for initializing
Android security APIs. For instance cryptographic ciphers or
TLS sockets are selected by using a transformation String
(e. g. AES, TLS). Critical information like cryptographic keys,
2cf. http://wala.sourceforge.net
3Code obfuscation is not intended to be covered by our approach
Finding subgraph isomorphisms in PDGs is NP-hard [36].
Therefore, we follow the approach of embedding graphs in
vector spaces in order to reduce the problem of ﬁnding similar
graphs to the problem of ﬁnding similar vectors [37]. We apply
the embedding algorithm provided by Crussel et al. [36] which
assigns a semantic vector to each semantic block. The semantic
vector stores information about nodes and edges, i. e. the over-
all structure of a semantic block. Nodes represent instructions,
edges represent data dependencies between instructions.
Each instruction type as provided by WALA’s IR has two
corresponding ﬁelds in the vector. One ﬁeld stores node and
the other stores edge information. The count of nodes for each
instruction type (e. g. invokevirtual, getﬁeld, new or return) in
the semantic block is stored in the related nodes ﬁeld of the
instruction type in the vector. The maximum out node degree
for each instruction type is used to store information about
PDG edges. It holds the maximum count of outgoing edges
over all nodes in a semantic block for a given instruction type
and is stored in the related edges ﬁeld of an instruction type
in the vector.
key lengths, initialization vectors, passwords and salts can be
statically assigned in the code.
To be able to detect reused constants they must not have
been modiﬁed. Additionally, we compare method names that
are part of a semantic block and belong to APIs of our pre-
deﬁned set of security libraries. This allows us to distinguish
security-related parts of the code, in case of different code
with identical semantic blocks and empty or identical constant
sets. Finally, we disallow class and method restructuring. This
is necessary because we have have to ensure that detected
semantic blocks are contained in classes and methods that
have the same structure as the snippet. We compare semantic
blocks, constants and method names on a per method base and
ensure (nested) class membership by analyzing path names of
all detected methods.
To avoid computational overhead, we limit the number of
classes to search for code snippets to classes that contain
security-related API calls as deﬁned in Section III-B.
(cid:2)
(cid:2)
To decide if two semantic vectors are similar, we calculate
their Jaccard similarity [38], [39] which describes the simi-
larity ratio of two sets. Jaccard similarity for sets represented
i(Xi∧Yi)
as binary vectors X, Y is deﬁned as Js(X, Y ) =
i(Xi∨Yi).
However, since the semantic vector stores count information
of nodes and edges belonging to a semantic block, we deﬁne
i min(Xi,Yi)
Jaccard similarity as Js(X, Y ) =
i max(Xi,Yi). Hence, two
statements of the same instruction type in the semantic block
represent different elements in the set representation of the
semantic block. This is also true for outgoing edges which
belong to the maximum out node degree. Therefore,
two
outgoing edges of a single node are different elements in
the set representation. Furthermore, this deﬁnition ensures that
only elements of the same instruction type are compared.
(cid:2)
(cid:2)
PPA is able to create an IR of an incomplete code snippet
with an average correctness of 91% [10]. This gives us a
threshold for Jaccard similarity of 0.91. To decide if method
names and constants of a semantic block are contained in
127
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:23:20 UTC from IEEE Xplore.  Restrictions apply. 
another semantic block, we calculate their Jaccard contain-
ment. Jaccard containment depicts the containment ratio of an
arbitrary set X in another set Y and is deﬁned as Jc(X, Y ) =
|X∧Y |
. We calculate both Jaccard containment of two method
|X|
name and constant sets to evaluate whether all methods or
constants are contained. We rely on a Jaccard containment
value of 1.0 to satisfy the requirements of VI-B. We deﬁne
containment of a code snippet in an app iff the following holds
for each method in the snippet:
• For all given semantic blocks we ﬁnd semantic blocks
that satisfy Jaccard similarity and are contained in a single
method contained in the callgraph of a given application.
• The method name set is fully contained in the same
method.
• The constants set is fully contained in the same method.
• They belong to the same (nested) class.
C. Exotic Case
Empty TrustManager implementations require special treat-
ment. They exclusively consist of overwritten methods (e. g.
cf. Listing 4). These methods are mostly empty which
means their PDG and methods and constants sets are also
empty. Therefore, our approach cannot distinguish these meth-
ods. To avoid false positives, the TrustManager’s methods
checkClientTrusted, checkServerTrusted and
getAcceptedIssuers receive special treatment. In case
an empty method has been detected in the call graph of an ap-
plication, we compare the method’s fully qualiﬁed name with
the method names given above. This way, we can successfully
identify empty TrustManager implementations without false
positives.
VII. EVALUATION
In this section we present a detailed evaluation of our
approach. We discuss benchmarks and numbers for each step
of our processing pipeline (cf. Figure 1). Further, we compare
our results with feedback from the Stack Overﬂow community,
provided in the respective code threads of copied insecure
snippets.
A. Evaluation of Code Extraction and Filtering
To systematically investigate the occurrence and quality of
Android related code snippets on Stack Overﬂow, we down-
loaded4 a dataset of all Stack Overﬂow posts in March 2016,
which gave us a dataset of 29,499,660 posts. We extracted all
posts which were tagged with the android tag - this resulted
in 818,572 question threads with 1,165,350 answers. Questions
in our data set had 1.4 answers on average. The oldest post
in the dataset was from August, 2008. 559,933 (68.4%) of the
questions and 744,166 (63.9%) of the answers contained at
least one code snippet. Posts had 1,639.4 views on average.
The most popular post in our dataset had 794,592 visitors.
With the oracle-based parser (as described in Section III) we
ﬁltered the 818,572 questions and the 1,165,350 answer posts
4 archive.org offers the option to download an archive of all Stack Overﬂow
posts from their website, cf. https://archive.org/details/stackexchange
from Stack Overﬂow which revealed 2,504 (2,474 distinct)
security-related snippets from question posts and 1,517 (1,360
distinct) security-related code snippets from answer posts,
respectively. In summary, using the JavaBaker oracle, we
could successfully identify security-related snippets as shown
in Table VII.
The majority of snippets (2,841, i.e. 70.7%) were related
to the java.security API which implements access control,
generation/storage of public key pairs, message digest, sig-
nature and secure random number generation. Most snip-
pets were related to cryptographic key initialization, stor-
age (e. g.
java.security.KeyPairGenerator
or
java.security.KeyStore – 44.9%) and message digests
(java.security.MessageDigest – 30.4%). This attunes to our
intuition, as almost all cryptographic implementations require
key management and hash functions are cryptographic primi-