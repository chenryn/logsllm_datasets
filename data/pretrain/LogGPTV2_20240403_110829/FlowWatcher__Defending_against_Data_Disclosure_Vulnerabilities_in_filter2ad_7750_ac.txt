(cid:44)→ re"/?q=user/([0-9]+)";
token := res_hdr "Set-Cookie" re"SESS.*"; }
3
4 group+ "/?q=node/add/group"
5 { id := res_hdr "Location" re"/?q=node/([0-9]+)"; }
6 data+ Article re"/?q=node/add/article"
7 { id := res_hdr "Location" re"/?q=node/([0-9]+)";
item := formfield "title", formfield "body"; }
8
9 data+ PrivateGroupName "/?q=node/add/group" if
(cid:44)→ (formfield "og_private"="1")
10 { id := res_hdr "Location" re"/?q=node/([0-9]+)";
11
item := formfield "title"; }
/* Update rules */
12 data* Article re"/?q=node/[0-9]+/edit"
13 { id = url re"/([0-9]+)/edit";
item[0] = formfield "title";
14
item[1] = formfield "body"; }
15
16 user -> group re"/?q=og/users/[0-9]+/add_user"
17 { user.id = formfield "og_names";
18
group.id = url re"/([0-9]+)/add_user"; }
19 user -> data re"/?q=node/add/.*" if (formfield
(cid:44)→ "status"="0")
20 { user.id = authenticated_user;
data.id = res_hdr "Location"
21
(cid:44)→ re"/?q=node/([0-9]+)"; }
22 group -> data re"/?q=node/add/*" if (formfield
(cid:44)→ "status"="1")
data.id = res_hdr "Location"
23 { group.id = formfield "og_groups";
(cid:44)→ re"/?q=node/([0-9]+)"; }
24
(cid:44)→ (formfield "og_private"="1")
(cid:44)→ re"/?q=node/([0-9]+)";
26 { group.id = res_hdr "Location"
25 group -> PrivateGroupName "/?q=node/add/group" if
27
PrivateGroupName.id = res_hdr "Location"
(cid:44)→ re"/?q=node/([0-9]+)"; }
preamble of a deﬁnition rule starts with the name of the created en-
tity followed by a “+” character (e.g. group+); analogously, removal
rules include a “-” character. The rule body has a set of assignment
statements that record more information about the entity.
User deﬁnition. For each HTTP request and response, the proxy
must know the identity of the associated user. Therefore a user def-
inition rule describes the authentication process of the application:
it speciﬁes how to intercept an authentication request and obtain a
token for the user after the authentication has succeeded.
Listing 1 (line 1) shows the user deﬁnition rule for Drupal, with
the following rule preamble:
user+ "/*" if (res_hdr "Set-Cookie" re"SESS.*")
The rule is preﬁxed with type user+ to indicate that a new user
is added. Since a login can be attempted from any Drupal page,
the URL speciﬁcation contains a wildcard. The constraint stipu-
lates that, for successful authentication, the “Set-Cookie” header
in the HTTP response must contain an entry for a session cookie
beginning with “SESS.*”.
Its rule body then contains two assignment statements:
{ id := formfield "name", res_hdr "Location"
(cid:44)→ re"/?q=user/([0-9]+)";
token := res_hdr "Set-Cookie" re"SESS.*"; }
The ﬁrst assignment associates the authenticated user with two
unique application-speciﬁc identiﬁers: the user name, which is ex-
tracted from the request form ﬁeld “name”; and an internal identiﬁer
that Drupal assigns to the user, obtained from the redirect location
in the response header.3 The second assignment collects the au-
thentication token (in this case a session cookie), which is associ-
ated with the user for a given session. The proxy thus maintains
a mapping between the user.id and user.token variables, linking
subsequent HTTP requests to that user session.
Group deﬁnition. A group deﬁnition rule links the creation of a
new access control group to the policy maintained by the proxy.
As shown in Listing 1 (line 4), it starts with group+.
Its rule
body records the identiﬁer of the new group. In this example, it is
speciﬁed in the response header “Location” as a numeric value at
the end of the URI, captured by a regular expression:
where data+ PrivateGroupName is the rule type (explained below),
followed by a URL speciﬁcation. The URL speciﬁcation is ex-
pressed as a substring that is matched against the HTTP request
URL. If the string is preﬁxed by re, it is executed as a regular ex-
pression. The constraint states that the request must have a form
ﬁeld “og_private” with the value “1”.
In general, constraints (and assignments in the rule body) can use
the keyword formfield to refer to form ﬁelds in the HTTP request
body, url to refer to the request URL, and req_hdr and res_hdr
to refer to header ﬁelds in the HTTP request or response, respec-
tively. In each case, the data can be ﬁltered with the help of reg-
ular expressions. For example, the following constraint checks if
an HTTP response has a header ﬁeld “Set-Cookie” that contains a
session cookie:
if (res_hdr "Set-Cookie" re"SESS.*")
3.3 Deﬁnition and removal rules
Deﬁnition and removal rules intercept the introduction of new
users, groups and objects in the application, and their removal. The
2The policy assumes that the Organic Groups module [18] is en-
abled. It omits the removal and additional object deﬁnition rules—
the complete policy is in Appendix A.
{ id := res_hdr "Location"
(cid:44)→ re"/?q=node/([0-9]+)"; }
Data object deﬁnition. Object deﬁnition rules begin with data+
and, when triggered, add a new data object to the access control
policy. Each data object has a name for referral in update rules. For
example, the UDA policy for Drupal has an object deﬁnition rule
for articles called “Article” (Listing 1, line 6):
data+ Article re"/?q=node/add/article"
In its rule body, an object creation rule must specify the identity
assigned to that data object; and the data items of that object that
need to be tracked by the proxy.
For Drupal, the identity is assigned in the same way as for group
creation discussed earlier; the list of data items tracked by the proxy
are deﬁned as the values of the“title” and “body” ﬁelds in the re-
quest form:
3We conﬁgure Drupal to redirect users upon login to the user ac-
count page. Other applications may require a similar approach to
allow FlowWatcher to capture user-speciﬁc identiﬁers.
607{ id := res_hdr "Location"
(cid:44)→ re"/?q=node/([0-9]+)";
item := formfield "title", formfield "body"; }
This speciﬁcation of data items assumes that the combination of
the “title” and “body” form ﬁelds has a high likelihood of con-
taining unique data (when above a minimum length, see §4.3). If
the proxy observes the same data in another HTTP response, it can
thus assume that the user-generated data came from this original
request.
3.4 Update rules
Update rules describe updates to (i) the data items tracked for a
data object; (ii) the membership of groups by adding or removing
users; and (iii) the access control lists of data objects by adding or
removing access permissions of users or groups. Updates to data
objects use the unary operator “*”; updates to group membership
and access control lists use the binary operators “->” (for addition)
or “-/>” (for removal). For such rules, the rule body links the en-
tities in the access control policy to values derived from HTTP re-
quests and responses.
Data object updates. Updates to the data items of a data object are
tracked by a rule with type data*, as shown in Listing 1, line 12.
The rule body identiﬁes the data object using an identiﬁer. The
list of stored data items is updated with the values speciﬁed in the
named form ﬁelds. For example, the following replaces the ﬁrst
element of the data item list “item[0]” with the data in the form
ﬁeld “title”:
{ id = url re"/([0-9]+)/edit";
item[0] = formfield "title";
item[1] = formfield "body"; }
Group membership updates. Group memberships in the policy
are maintained dynamically using a rule that begins with user ->
group, as shown in Listing 1, line 16. Its rule body identiﬁes the
user and group in question:
{ user.id = formfield "og_names";
group.id = url re"/([0-9]+)/add_user"; }
The user is identiﬁed by the form ﬁeld “og_names”, and the group
is speciﬁed by a numeric identiﬁer from the request URL.
Access control updates. To limit the set of users that can access
a data object, each object maintains an access control list. Access
control list updates are preﬁxed with
{user | group} -> object_name
where object_name refers to a previously-deﬁned data object, spec-
iﬁed in one of the object deﬁnition rules. If the object_name is data,
the rule applies to all data objects without more speciﬁc rules.
For example, the following rule preamble (Listing 1, line 22) is
triggered to add a group to the access control lists of all published
data objects.
In Drupal, the form ﬁeld “status” is set to “1” to
denote published content:
group -> data re"/?q=node/add/*" if (formfield
(cid:44)→ "status"="1")
Drupal’s policy states that published content should be visible
to the groups speciﬁed in the value of the form ﬁeld “og_groups”,
and a numeric identiﬁer in the response header ﬁeld “Location”
determines the article identiﬁer:
{ group.id = formfield "og_groups";
(cid:44)→ re"/?q=node/([0-9]+)"; }
data.id = res_hdr "Location"
Unpublished content, with the form ﬁeld “status” set to “0”,
should not be visible to other users. In Listing 1, line 19, the UDA
policy therefore only gives access to the authenticated user, as pro-
vided by the built-in variable authenticated_user:
{ user.id = authenticated_user;
data.id = res_hdr "Location"
(cid:44)→ re"/?q=node/([0-9]+)"; }
Since these two rules refer to the data object as data, they apply
to any Drupal content type, which has the published/unpublished
status set during creation (i.e. article, basic page, book page, etc.).
This reduces the number of required update rules, making a sepa-
rate rule for each content type unnecessary.
If there are exceptions to default rules, a UDA policy can include
more speciﬁc rules. For example, for groups in Drupal, we only
want the subset of private groups to be subject to access control en-
forcement. The policy thus has a speciﬁc rule group -> PrivateGroup-
Name in line 25, which overrides the generic rule in line 22.
3.5 Discussion
The UDA policy language is designed to make it easy for ap-
plication developers to express the essence of their access control
model with a small set of rules. These rules then capture the be-
haviour of the access control checks that are potentially spread
throughout the code base of the application. Since UDA policies
are dynamic, i.e. they update access control lists based on changes
to the policy from within the application, the UDA policy for a
given application must only be written once and can then be reused
across application deployments with different users, groups, data
objects and access permissions. Finally, UDA policies can be en-
hanced over time, e.g. by adding new data objects supported by
an application to achieve a more comprehensive tracking of user-
generated content.
A drawback of UDA policies is that they rely on the speciﬁc for-
mat of URLs and HTTP requests and responses. This means that
UDA policies must be updated if an application changes URLs or
ﬁelds referred to in a policy. Since such changes are often accom-
panied by changes to the application functionality itself, we believe
that is reasonable. Note that rules do not get triggered or matched
if URLs or ﬁeld names have changed, which can only lead to false
negative detections until the policy is updated.
4. FLOWWATCHER DESIGN
FlowWatcher is designed as a reverse HTTP proxy that sits in
front of an unmodiﬁed web application and observes requests from
clients to the application and responses sent back to them (see
Figure 1). It consults with the UDA policy provided by the appli-
cation developer in order to update a shadow access control policy
(or shadow policy) that mimics the access control policy imple-
mented within the application. Since web application deployments
already use reverse proxies for caching, load-balancing and moni-
toring, and such a proxy can be conﬁgured to handle HTTPS traf-
ﬁc, it is a natural choice for incorporating a “safety net” layer for
black-box authorisation.
At a high-level, FlowWatcher works as shown in Figure 1. When
a client A sends an HTTP POST request (step 1A), FlowWatcher
intercepts the request. Based on the UDA policy rules matched
by the request parameters, FlowWatcher updates the shadow pol-
icy (step 2; described in §4.2). It then forwards the request to the
608Figure 1: Overview of the FlowWatcher operation
application (step 3) and waits for the response. FlowWatcher in-
tercepts the response (step 4) and consults the shadow policy to
determine if the response contains data that should not be seen by
the user who made the request (step 5; described in §4.1). If not, the
unmodiﬁed response is returned to the client (step 6A); otherwise,
if another client B sends a request that exposes a data disclosure
vulnerability (step 1B), the response is modiﬁed to remove these
data items (step 6B).
Next we describe how FlowWatcher performs the above two op-
erations, enforcing the shadow policy and updating the shadow pol-
icy, in more detail.
4.1 Policy enforcement
To enforce the shadow policy as described by the UDA policy,
FlowWatcher represents the current access control state using four
data structures (see Figure 2):
• user_auth maps users to their authentication tokens;
• group_members maps users to their groups;
• object_acl maps data objects to users/groups with access; and
• data_items maps data objects to the associated data items.
In addition, static_data contains a whitelist of data that is part
of the application and may be returned in HTTP responses to any
user. To eliminate false positive detection of data disclosure, this
data should never be tracked as unique user-generated data. The
whitelist is initialised with all localised strings, scripts and other
static content returned by the web application in HTTP responses.