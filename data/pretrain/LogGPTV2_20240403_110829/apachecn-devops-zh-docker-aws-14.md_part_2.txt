部署完成后，您可以登录到 ECR，然后用新 ECR 存储库的完全限定名标记并发布您之前创建的映像:
```
> eval $(aws ecr get-login --no-include-email)
Login Succeeded
> docker tag xray 385605022855.dkr.ecr.us-east-1.amazonaws.com/docker-in-aws/xray
> docker push 385605022855.dkr.ecr.us-east-1.amazonaws.com/docker-in-aws/xray
The push refers to repository [385605022855.dkr.ecr.us-east-1.amazonaws.com/docker-in-aws/xray]
c44926e8470e: Pushed
1c9da599a308: Pushed
9d486dac1b0b: Pushed
0c1715974ca1: Pushed
latest: digest: sha256:01d9b6982ce3443009c7f07babb89b134c9d32ea6f1fc380cb89ce5639c33938 size: 1163
```
# 配置 ECS 服务发现资源
ECS 服务发现是一项功能，它允许您的客户端应用在动态环境中发现 ECS 服务，在动态环境中，基于容器的端点来来去去。到目前为止，我们已经使用 AWS 应用负载平衡器来执行此功能，在此功能中，您可以配置一个稳定的服务端点，您的应用可以连接到该端点，然后连接在 ECS 管理的目标组中进行负载平衡，该目标组包括与您的 ECS 服务相关联的每个 ECS 任务。虽然这通常是我推荐的最佳实践方法，但是对于不支持负载平衡器的应用(例如，基于 UDP 的应用)，或者对于与给定的 ECS 任务直接通信更有效的超大型微服务体系结构，ECS 服务发现可能是比使用负载平衡器更好的方法。
ECS service discovery also supports AWS load balancers, where ECS will publish the IP address of the load balancer listener if a load balancer is associated with a given ECS service.
ECS 服务发现使用 DNS 作为其发现机制，这很有用，因为在其最基本的形式中，DNS 被任何应用客户端普遍支持。您的 ECS 服务注册的 DNS 命名空间被称为**服务发现命名空间**，它简单地对应于 Route 53 DNS 域或区域，您在命名空间中注册的每个服务被称为**服务发现**。例如，您可以将`services.dockerinaws.org`配置为服务发现命名空间，如果您有一个名为`todobackend`的 ECS 服务，那么您将使用域名`todobackend.services.dockerinaws.org`连接到该服务。ECS 将自动管理针对您的服务的 DNS 记录注册的地址(`A`)记录，动态添加与您的 ECS 服务的每个活动且健康的 ECS 任务相关联的 IP 地址，并删除任何退出或变得不健康的 ECS 任务。ECS 服务发现同时支持公共和私有命名空间，对于我们运行 X 射线守护程序的示例，私有命名空间是合适的，因为该服务只需要支持来自 todobackend 应用的内部应用跟踪通信。
ECS service discovery supports the provisioning of DNS service (SRV) records, which include both IP address and TCP/UDP port information about a given service endpoint. You typically use address (`A`) records when using static port mapping or **awsvpc** networking mode (as is the case with Fargate), and SRV records when using dynamic port mapping, given that SRV records can include the dynamic port information for the port mapping that is created. Note that application support for SRV records is somewhat limited, so I typically recommend using the tried and true approach of using `A` records for ECS service discovery.
# 配置服务发现命名空间
像大多数 AWS 资源一样，您可以使用 AWS 控制台、AWS 命令行界面、各种 AWS 软件开发工具包或云信息来配置服务发现资源。鉴于我们的基础设施是贯穿本书的代码方法，我们自然会在本章中采用 CloudFormation 因为 x 光守护程序是一个新的服务(通常被认为是一个共享服务，您的每个应用都向其发布跟踪信息)，所以我们将在名为`xray.yml`的文件中创建一个新的栈，位于`todobackend-aws`存储库的根。
以下示例演示了创建初始模板和创建服务发现命名空间资源:
```
AWSTemplateFormatVersion: "2010-09-09"
Description: X-Ray Daemon
Resources:
  ApplicationServiceDiscoveryNamespace:
    Type: AWS::ServiceDiscovery::PrivateDnsNamespace
    Properties:
      Name: services.dockerinaws.org.
      Description: services.dockerinaws.org namespace
      Vpc: vpc-f8233a80
```
在前面的示例*、*中，我们创建了一个私有服务发现命名空间，它只需要命名空间的域名、可选描述和关联的私有路由 53 区域将链接到的 VPC 标识。为了简单起见，我还为与我的 AWS 帐户相关的 VPC ID 硬编码了一个适当的值，您通常会通过栈参数注入该值。
Given that the intention of a service discovery namespace is to support multiple services, you would typically create the namespace in a separate CloudFormation stack, such as a dedicated network stack that creates shared network resources. However, in the interest of keeping things simple, we are creating the namespace in the X-Ray stack.
现在，您可以使用`aws cloudformation deploy`命令将初始栈部署到云信息，该命令应该创建一个服务发现命名空间和相关的 53 号路由私有区域:
```
> aws cloudformation deploy --template-file xray.yml --stack-name xray-daemon
Waiting for changeset to be created..
Waiting for stack create/update to complete
Successfully created/updated stack - xray-daemon
> aws servicediscovery list-namespaces
{
    "Namespaces": [
        {
            "Id": "ns-lgd774j6s2cmxwq3",
            "Arn": "arn:aws:servicediscovery:us-east-1:385605022855:namespace/ns-lgd774j6s2cmxwq3",
            "Name": "services.dockerinaws.org",
            "Type": "DNS_PRIVATE"
        }
    ]
}
> aws route53 list-hosted-zones --query HostedZones[].Name --output table
-------------------------------
| ListHostedZones             |
+-----------------------------+
| services.dockerinaws.org.   |
+-----------------------------+
```
在前面的示例中，一旦您的栈成功部署，您将使用`aws servicediscovery list-namespaces`命令来验证是否创建了私有命名空间，而`aws route53 list-hosted-zones`命令显示也创建了一个名为`services.dockerinaws.org`的 53 号路由区域。
# 配置服务发现服务
现在您已经有了服务发现命名空间，下一步是创建一个服务发现服务，它与每个 ECS 服务具有一对一的关系，这意味着您需要创建一个服务发现服务，它代表您将在本章后面创建的 X 射线 ECS 服务:
```
AWSTemplateFormatVersion: "2010-09-09"
Description: X-Ray Daemon
Resources:
  ApplicationServiceDiscoveryService:
 Type: AWS::ServiceDiscovery::Service
 Properties:
 Name: xray
 Description: xray service 
 DnsConfig: 
 NamespaceId: !Ref ApplicationServiceDiscoveryNamespace
 DnsRecords:
 - Type: A
 TTL: 60
 HealthCheckCustomConfig:
 FailureThreshold: 1
  ApplicationServiceDiscoveryNamespace:
    Type: AWS::ServiceDiscovery::PrivateDnsNamespace
    Properties:
      Name: services.dockerinaws.org.
      Description: services.dockerinaws.org namespace
      Vpc: vpc-f8233a80
```
在上例中，您添加了一个名为`ApplicationServiceDiscoveryService`的新资源，并配置了以下属性:
*   `Name`:定义服务的名称。该名称将用于在关联的命名空间中注册服务。
*   `DnsConfig`:指定服务关联的命名空间(由`NamespaceId`属性定义)，定义应该创建的 DNS 记录类型和生存时间(TTL)。在这里，您指定一个地址记录(键入`A`)和 60 秒的 TTL，这意味着客户端最多只能缓存该记录 60 秒。一般来说，您应该将 TTL 设置为较低的值，以确保当新的 ECS 任务注册到服务或现有的 ECS 任务从服务中删除时，您的客户端能够获取 DNS 更改。
*   `HealthCheckCustomConfig`:这将配置 ECS 来管理健康检查，以确定 ECS 任务是否可以注册。还可以配置 Route 53 健康检查(参见[https://docs . AWS . Amazon . com/Amazon ECS/latest/developer guide/service-discovery . html # service-discovery-concepts](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html#service-discovery-concepts))；但是，对于我们的用例，假设 X-Ray 是一个基于 UDP 的应用，Route 53 运行状况检查仅支持基于 TCP 的服务，则必须使用前面示例中显示的`HealthCheckCustomConfig`配置。`FailureThreshold`指定在接收到自定义运行状况检查更新后，服务发现等待更改给定服务实例运行状况的`30`秒间隔数(在这种情况下，ECS 提供自定义运行状况检查)。
现在，您可以使用`aws cloudformation deploy`命令将更新后的栈部署到云信息，这将创建一个服务发现服务:
```
> aws cloudformation deploy --template-file xray.yml --stack-name xray-daemon
Waiting for changeset to be created..
Waiting for stack create/update to complete
Successfully created/updated stack - xray-daemon
> aws servicediscovery list-services
{
    "Services": [
        {
            "Id": "srv-wkdxwh4pzo7ea7w3",
            "Arn": "arn:aws:servicediscovery:us-east-1:385605022855:service/srv-wkdxwh4pzo7ea7w3",
            "Name": "xray",
            "Description": "xray service"
        }
    ]
}
```
这将为`xray.services.dockerinaws.org`创建一个 DNS 记录集，在我们为我们将在本章后面创建的 X 射线 ECS 服务配置 ECS 服务发现支持之前，不会有任何地址(`A`)记录与之相关联。
# 为 Fargate 配置 ECS 任务定义
现在，您已经准备好开始定义您的 ECS 资源，您将配置这些资源来使用 AWS Fargate 服务，并利用您在上一节中创建的服务发现资源。
在配置 ECS 任务定义以支持 Fargate 时，您需要了解一些关键注意事项:
*   **发射类型:**一个 ECS 任务定义包括一个名为`RequiresCompatibilities`的参数，该参数定义了该定义的兼容发射类型。目前的发射类型包括 EC2，指在传统 ECS 集群上发射的 ECS 任务，以及 Fargate，指在 FARGATE 上发射的 ECS 任务。默认情况下，`RequiresCompatibilities`参数被配置为 EC2，这意味着如果您想使用 Fargate，您必须显式配置该参数。
*   **网络模式**:法盖特只支持`awsvpc`网络模式，我们在第 10 章- *隔离网络接入*中讨论过。
*   **执行角色** : Fargate 要求您配置一个**执行角色**，这是分配给 ECS 代理和 Fargate 运行时的 IAM 角色，它根据您的 Fargate 任务定义来管理 ECS 任务的生命周期。这是一个独立的角色，不同于您在第 9 章- *管理机密*中配置的任务 IAM 角色功能，您可以使用该功能向运行在 ECS 任务中的应用授予 IAM 权限。执行角色通常配置有与您为与传统 ECS 容器实例相关联的 EC2 IAM 实例角色配置的权限相似的权限，至少授予 ECS 代理和法盖特运行时从 ECR 提取映像并将日志写入 CloudWatch 日志的权限。
*   **CPU 和内存** : Fargate 要求您在任务定义级别定义 CPU 和内存需求，因为这决定了基于您的任务定义的 ECS 任务将在其上运行的底层目标实例。请注意，这与您在第 8 章- *使用 ECS* 部署应用中为 todobackend 应用在 ECS 任务定义中配置的每个容器定义 CPU 和内存设置是分开的；您仍然可以配置每个容器定义的 CPU 和内存设置，但是您需要确保分配给容器定义的总 CPU/内存不超过分配给 ECS 任务定义的总 CPU/内存。Fargate 目前只支持有限的一组 CPU/内存分配，您可以在*任务 CPU 和内存*部分的[https://docs . AWS . Amazon . com/AmazonECS/latest/developer guide/AWS _ fargate . html](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/AWS_Fargate.html)中了解更多。
*   **日志记录**:在写的时候，Fargate 只支持`awslogs`日志记录驱动，将你的容器日志转发到 CloudWatch 日志。
考虑到上述因素，现在让我们为 x 光守护程序服务定义一个任务定义:
```
...
...
Resources:
  ApplicationTaskDefinition:
 Type: AWS::ECS::TaskDefinition
 Properties:
 Family: !Sub ${AWS::StackName}-task-definition
 NetworkMode: awsvpc
 ExecutionRoleArn: !Sub ${ApplicationTaskExecutionRole.Arn}
 TaskRoleArn: !Sub ${ApplicationTaskRole.Arn}
 Cpu: 256
 Memory: 512
 RequiresCompatibilities:
 - FARGATE
 ContainerDefinitions:
 - Name: xray
 Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/docker-in-aws/xray
 Command:
 - -o
 LogConfiguration:
 LogDriver: awslogs
 Options:
 awslogs-group: !Sub /${AWS::StackName}/ecs/xray
 awslogs-region: !Ref AWS::Region
 awslogs-stream-prefix: docker
 PortMappings:
 - ContainerPort: 2000
 Protocol: udp
 Environment:
 - Name: AWS_REGION
 Value: !Ref AWS::Region
  ApplicationLogGroup:
 Type: AWS::Logs::LogGroup
 DeletionPolicy: Delete
 Properties:
 LogGroupName: !Sub /${AWS::StackName}/ecs/xray
 RetentionInDays: 7
  ApplicationServiceDiscoveryService:
    Type: AWS::ServiceDiscovery::Service
  ...