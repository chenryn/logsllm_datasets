# 九、管理机密
机密管理是现代应用和系统的关键安全和操作要求。用户名和密码等凭据通常用于验证对可能包含私有和敏感数据的资源的访问，非常重要的一点是，您可以实现一个机密管理解决方案，该解决方案能够以安全的方式向您的应用提供这些凭据，而不会将它们暴露给未经授权的一方。
基于容器的应用的机密管理具有挑战性，部分原因是容器的短暂性以及在一次性和可重复的基础架构上运行容器的基本要求。可以将机密存储在本地文件中的长寿命服务器的时代已经一去不复返了——现在您的服务器是可以来去的 ECS 容器实例，您需要有某种机制能够在运行时将机密动态地注入到您的应用中。我们在本书中使用的一个天真的解决方案是使用环境变量将您的机密直接注入到您的应用中；但是，这种方法被认为是不安全的，因为它经常通过各种操作数据源以纯文本形式暴露您的机密。一个更可靠的解决方案是实现安全的凭据存储，您的应用可以在其中以安全的方式动态检索其机密—但是，设置自己的凭据存储可能成本高、耗时，并且会带来巨大的运营开销。
在本章中，您将实现一个简单而有效的机密管理解决方案，该解决方案由两个关键的 AWS 服务提供支持，即 AWS 机密管理器和密钥管理服务或 KMS。这些服务将为您提供基于云的安全凭据存储，该存储易于管理、经济高效，并与标准 AWS 安全控制(如 IAM 策略和角色)完全集成。您将学习如何通过在 Docker 映像中创建一个入口点脚本来集成任何支持通过环境变量进行配置的应用和您的机密管理解决方案，该脚本使用 AWS CLI 动态检索机密并将其安全地注入到您的内部容器环境中，还将学习当您使用 cloud information 部署环境时，如何将机密公开给 cloud information 栈中的其他资源。
将涵盖以下主题:
*   创建 KMS 密钥
*   使用自动气象站机密管理器创建机密
*   在容器启动时注入机密
*   使用云信息提供机密
*   向 AWS 部署机密
# 技术要求
下面列出了完成本章的技术要求:
*   对 AWS 帐户的管理员访问权限
*   根据第 3 章中的说明配置本地 AWS 配置文件
*   AWS CLI 版本 1.15.71 或更高版本
*   第 8 章需要与成功部署到 AWS 的示例应用一起完成
以下 GitHub URL 包含本章使用的代码示例–[https://GitHub . com/docker-in-AWS/docker-in-AWS/tree/master/ch9](https://github.com/docker-in-aws/docker-in-aws/tree/master/ch9)。
查看以下视频，了解《行动守则》:
[http://bit.ly/2LzpEY2](http://bit.ly/2LzpEY2)
# 创建 KMS 密钥
任何机密管理解决方案的一个关键构造块是使用加密密钥加密您的凭据的能力，这确保了您的凭据的隐私性和机密性。AWS 密钥管理服务(KMS)是一项托管服务，允许您创建和控制加密密钥，并提供简单、低成本的解决方案，消除了管理加密密钥的许多操作挑战。KMS 的主要特点包括集中式密钥管理、符合多项行业标准、内置审计以及与其他 AWS 服务的集成。
在构建使用 AWS 机密管理器的机密管理解决方案时，您至少应该在本地 AWS 帐户和区域中创建一个 KMS 密钥，用于加密您的机密。AWS 确实提供了一个默认的 KMS 密钥，您可以与 AWS 机密管理器一起使用，因此这不是一个严格的要求，但是，一般来说，您应该可以根据您的安全要求创建自己的 KMS 密钥。
您可以使用 AWS 控制台和命令行界面轻松创建 KMS 密钥，但是为了与采用基础架构作为代码的一般主题保持一致，我们将使用云信息创建一个新的 KMS 密钥。
以下示例演示了在新的云信息模板文件中创建 KMS 密钥和 KMS 别名，您可以将其放在 todobackend-aws 存储库的根目录下，我们称之为`kms.yml`:
```
AWSTemplateFormatVersion: "2010-09-09"
Description: KMS Keys
Resources:
  KmsKey:
    Type: AWS::KMS::Key
    Properties:
      Description: Custom key for Secrets
      Enabled: true
      KeyPolicy:
        Version: "2012-10-17"
        Id: key-policy
        Statement: 
          - Sid: Allow root account access to key
            Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action:
              - kms:*
            Resource: "*"
  KmsKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: alias/secrets-key
      TargetKeyId: !Ref KmsKey
Outputs:
  KmsKey:
    Description: Secrets Key KMS Key ARN
    Value: !Sub ${KmsKey.Arn}
    Export:
      Name: secrets-key
```
Creating KMS resources using CloudFormation
在前面的示例中，您创建了两个资源—一个名为`KmsKey`的`AWS::KMS::Key`资源，用于创建新的 KMS 密钥；另一个名为`KmsKeyAlias`的`AWS::KMS::Alias`资源，用于为密钥创建别名或友好名称。
`KmsKey`资源包括一个`KeyPolicy`属性，该属性定义了一个授予根帐户访问密钥的资源策略。这是对您创建的任何 KMS 密钥的要求，以确保您始终至少有一些访问密钥的方法，您可能已经使用这些方法来加密有价值的数据，如果密钥不可访问，将会给企业带来相当大的成本。
If you create a KMS key via the AWS console or CLI, the root account access policy will be automatically created for you.
上例中 CloudFormation 模板的一个有趣特性是创建 CloudFormation 导出，每当您向 CloudFormation 输出添加`Export`属性时，都会创建该导出。在前面的示例中，`KmsKey`输出导出了由`Value`属性指定的`KmsKey`资源的 ARN，而`Export`属性创建了一个云信息导出，您可以在其他云信息栈中引用它来注入导出的值，而不必显式指定导出的值。您将在本章后面看到如何利用这个 CloudFormation 导出，所以不要担心这会不会有意义。
有了前面示例的配置，假设您已经将此模板放在名为`kms.yml`的文件中，现在您可以部署新的栈，这将导致创建新的 KMS 密钥和 KMS 资源:
```
> export AWS_PROFILE=docker-in-aws
> aws cloudformation deploy --template-file kms.yml --stack-name kms
Enter MFA code for arn:aws:iam::385605022855:mfa/justin.menga:
Waiting for changeset to be created..
Waiting for stack create/update to complete
Successfully created/updated stack - kms
> aws cloudformation list-exports
{
    "Exports": [
        {
            "ExportingStackId": "arn:aws:cloudformation:us-east-1:385605022855:stack/kms/be0a6d20-3bd4-11e8-bf63-50faeaabf0d1",
            "Name": "secrets-key",
            "Value": "arn:aws:kms:us-east-1:385605022855:key/ee08c380-153c-4f31-bf72-9133b41472ad"
        }
    ]
}
```
Deploying KMS Keys using CloudFormation
在前面的示例中，创建 CloudFormation 栈后，请注意`aws cloudformation list-exports`命令现在列出了一个名为`secrets-key`的导出。此导出的值是栈中 KMS 密钥资源的 ARN，现在您可以使用其他云信息栈中的`Fn::ImportValue`内部函数，通过简单地引用`secrets-key`的导出名称(例如，`Fn::ImportValue: secrets-key`)来导入此值。
Be careful with your use of CloudFormation exports. These exports are intended for referencing resources that are static in nature whose value that you are exporting will never change in the future. Once a CloudFormation export is referenced by another stack you cannot change the value of that export, nor delete the resource or stack that the export belongs to. CloudFormation exports are useful for resources such as IAM roles, KMS keys and network infrastructure (for example, VPCs and subnets), which often are very static in nature and do not change once implemented.
# 使用 KMS 加密和解密数据
现在您已经创建了一个 KMS 密钥，您可以使用这个密钥来加密和解密数据。
以下示例演示了如何使用 AWS 命令行界面加密简单的纯文本值:
```
> aws kms encrypt --key-id alias/secrets-key --plaintext "Hello World"
{
    "CiphertextBlob": "AQICAHifCoHWAYb859mOk+pmJ7WgRbhk58UL9mhuMIcVAKJ18gHN1/SRRhwQVoVJvDS6i7MoAAAAaTBnBgkqhkiG9w0BBwagWjBYAgEAMFMGCSqGSIb3DQEHATAeBglghkgBZQMEAS4wEQQMYm4au5zNZG9wa5ceAgEQgCZdADZyWKTcwDfTpw60kUI8aIAtrECRyW+/tu58bYrMaZFlwVYmdA==",
    "KeyId": "arn:aws:kms:us-east-1:385605022855:key/ee08c380-153c-4f31-bf72-9133b41472ad"
}
```
Encrypting Data Using a KMS Key
在前面的示例中，请注意，您必须使用`--key-id`标志指定 KMS 密钥 ID 或别名，并且每当您使用 KMS 密钥别名时，您总是在别名前面加上`alias/`。加密数据在`CiphertextBlob`属性中作为 Base64 编码的二进制 blob 返回，这也方便地将加密 KMS 密钥的密钥 ID 编码到加密数据中，这意味着 KMS 服务可以解密密文 blob，而无需您明确指定加密 KMS 密钥 ID:
```
> ciphertext=$(aws kms encrypt --key-id alias/secrets-key --plaintext "Hello World" --query CiphertextBlob --output text)
> aws kms decrypt --ciphertext-blob fileb:// aws kms decrypt --ciphertext-blob fileb:// aws secretsmanager create-secret --name test/credentials --kms-key-id alias/secrets-key \
 --secret-string '{"MYSQL_PASSWORD":"some-super-secret-password"}'
{
    "ARN": "arn:aws:secretsmanager:us-east-1:385605022855:secret:test/credentials-l3JdTI",
    "Name": "test/credentials",
    "VersionId": "beab75bd-e9bc-4ac8-913e-aca26f6e3940"
}
```
Creating a Secret Using the AWS CLI
在前面的示例中，请注意，您将机密字符串指定为 JSON 对象，它提供了您之前看到的键/值格式。
# 使用 AWS 命令行界面检索机密
您可以使用`aws secretsmanager get-secret-value`命令通过 AWS 命令行界面检索机密:
```
> aws secretsmanager get-secret-value --secret-id test/credentials
{
    "ARN": "arn:aws:secretsmanager:us-east-1:385605022855:secret:test/credentials-l3JdTI",
    "Name": "test/credentials",
    "VersionId": "beab75bd-e9bc-4ac8-913e-aca26f6e3940",
    "SecretString": "{\"MYSQL_PASSWORD\":\"some-super-password\"}",
    "VersionStages": [
        "AWSCURRENT"
    ],
    "CreatedDate": 1523605423.133
}
```
Obtain a Secret Value Using the AWS CLI