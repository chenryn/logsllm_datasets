I think my ideas here are so far out of the mainstream that they deserve to be
beaten up in their own thread.
  1. Parameterize the type "Function" by its input and output parameters. The following type hierarchy would apply:
        Function{In} " in the type parameter list of functions to differentiate between type parameters applying to the input and type parameters applying to the output:
        bar{T -> S}(x::T)::S = 2 * x
    baz{T -> S}(x::T) = (2 * x)::S
Also this should allow for tying the parameters:
        bac{T -> T}(x::T)::Vector{T} = x .* ones(T, x)
  2. The result for for closures is that the following syntax covers parameterization:
        g{T -> S, R}(y::T)::Function{S, R} = (x::S -> (x + y)::R)
    g{T -> S, R}(y::T) = {S -> R}(x::S -> (x + y)::R)
And for truly anonymous Lambdas
        h = {T -> S}(x::T -> (x + 1)::S)
  3. Finally I would like to see the syntax "x::{...}" used for exact pattern matching instead of the "::Val{...}" and "Val{...}()" constructs:
        fal(x::{0}) = 1
    fal(x::Int) = x * fal(x - sign(x))
Because types in some ways identify sets, in the mathematical sense, it might
be interesting to allow:
        fun(x::{0, 1, 2, 3}) = 4
Reflecting the interpretation that the "::" operator represents the idea of
"membership in".