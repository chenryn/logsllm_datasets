        # Default clusterid.  PF_RING will load balance packets based on flow.
        # All threads/processes that will participate need to have the same
        # clusterid.
        cluster-id: 99
        # Default PF_RING cluster type. PF_RING can load balance per flow.
        # Possible values are cluster_flow or cluster_round_robin.
        cluster-type: cluster_flow
        # bpf filter for this interface
        #bpf-filter: tcp
    libhtp:
             default-config:
               personality: IDS
               # Can be specified in kb, mb, gb.  Just a number indicates
               # it's in bytes.
               request-body-limit: 12mb
               response-body-limit: 12mb
               # inspection limits
               request-body-minimal-inspect-size: 32kb
               request-body-inspect-window: 4kb
               response-body-minimal-inspect-size: 40kb
               response-body-inspect-window: 16kb
suricata.yaml配置完成后，运行`suricata
-T`以测试模式运行suricata，看下suricata.yaml是否有报错，如果有报错，要仔细检查下。要特别注意回车符和空格。若无报错，运行结果如下所示：
#### 0x04 安装suricata-update管理规则
安装suricata-update的文章参见之前写的文章：
[Suricata规则介绍、以及使用suricata-update做规则管理](https://zhuanlan.zhihu.com/p/36340468)
suricata-update管理规则，会默认将多个规则集的每一条都写到`/var/lib/suricata/rules/suricata.rules`文件中。所以我们要在suricata的配置文件suricata.yaml中配置suricata的规则指定使用suricata.rules，其他的一些默认规则的配置都注释掉。suricata.yaml的配置如下图所示：
suricata-update其他的一些使用简单介绍如下：
    # 列出suricata-update支持的所有的规则源
    suricata-update list-sources
    # 启用一个规则集（我这边启用的是ET的规则集）
    suricata-update enable-source et/open
目前我把suricata-update这边能用的规则全部都enable了，后续根据误报情况再做优化。开启的规则集如下：
规则集开启完成后，使用如下命令进行规则下载和更新：
    # 规则下载和更新
    suricata-update
下载更新完，总共有3万+的规则：
规则下载和更新完后，使用`suricata -T`命令测试。若有相关规则报错，直接将该条报错的规则进行注释。suricata-update支持便捷的禁用规则的方法，在/etc/suricata目录下新建disable.conf。配置文件中写入规则特征，每次更新会禁用该规则。
参考Suricata-update的官方文档，disable.conf中支持三种规则特征：
支持三种方式进行规则禁用：规则的sid、正则表达式和规则组名。
报错的规则数量不多，我这边直接使用sid进行禁用，disable.conf中写入报错规则的sid后，使用如下命令进行规则更新：
    suricata-update --disable-conf /etc/suricata/disable.conf
更多suricata-update的使用，请参照suricata-update的官网文档：
> **TIPS：** 更新完规则后，suricata不需要重新启动来载入新的规则，使用命令 `ps -ef | grep
> suricata`查看suricata的pid，通过kill命令发送usr2信号来重新加载suricata规则 `kill -USR2 pid`
#### 0x05 Suricata的运行
待suricata的规则配置完成后，直接使用如下命令运行：
`suricata --pfring-int=eth0 --pfring-cluster-id=99 --pfring-cluster-type=cluster_flow -c /etc/suricata/suricata.yaml --init-errors-fatal -D -v`
若需要停止suricata，运行如下命令即可:
    ps -ef | grep suricata|grep -v grep
    kill -9 id
    rm -f /var/run/suricata.pid
#### 0x06 对接内网ES集群
公司内网ES集群目前的架构如下：
解释下Logstash的Shipper和Indexer：
  * Shipper:日志收集者。负责监控本地日志文件的变化，及时把日志文件的最新内容收集起来，输出到Redis暂存，其input为实际的日志源，output一般来说都是redis（做缓存不一定用redis，也可以用其他的）
  * Indexer:日志存储者。负责从Redis接收日志，写入到本地文件。其input是redis(shipper的output)，output则是elasticSearch搜索引擎。
本来之前打算的方案是，将日志直接发到redis(suraicata.yaml中可配置直接将日志发到redis)：
但是蛋疼的是，如果你的redis有加了密码，suricata没法将日志直接发到redis了，因为目前还不支持redis的认证。
所以我这边直接在机器上使用FileBeat，将日志发到ES集群的Logstash Shipper。
#####  filebeat的安装配置
安装filebeat:
    wget https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-6.7.0-linux-x86_64.tar.gz
    tar -zxvf filebeat-6.7.0-linux-x86_64.tar.gz
    cd filebeat-6.7.0-linux-x86_64/
    vim filebeat.yml
filebeat.yml的配置如下所示：
    #=========================== Filebeat inputs =============================
    filebeat.inputs:
    - type: log
      enabled: true
      paths:
      - /var/log/suricata/eve.json
      json.keys_under_root: true
      json.overwrite_keys: true
    ...
    ...
    ...
    #----------------------------- Logstash output --------------------------------    output.logstash:
      # The Logstash hosts
      #hosts: ["localhost:5044"]
      hosts: ["10.8.2.15:50007"]
其他配置的说明参考这篇文章：[Filebeat相关语法命令](https://www.cnblogs.com/blogjun/articles/bcb12b9fa928bfff58ed3743b2accb57.html)
配置文件配置完成后，可使用`./filebeat -configtest -e`命令进行测试。
启动filebeat：
    # -d "publish" 启用对指定选择器的调试，显示所有“publish”相关的消息
    ./filebeat -e -c filebeat.yml -d "publish"
后台方式启动filebeat：
    nohup ./filebeat -e -c filebeat.yml >/dev/null 2>&1 &
停止filebeat：
    ps -ef | grep filebeat
    kill -9  进程号
#####  Logstash的conf配置
数据存到redis后，在Logtash Indexer对日志进行切分。
    filter {
      if [type] == "suricata_log" {
        date {
        match => [ "timestamp", "ISO8601" ]
        }
        ruby {
          code => "
            if event.get('[event_type]') == 'fileinfo'
            event.set('[fileinfo][type]', event.get('[fileinfo][magic]').to_s.split(',')[0])
            end
            "
          }
        ruby {
          code => "
            if event.get('[event_type]') == 'alert'
            sp = event.get('[alert][signature]').to_s.split(' group ')
            if (sp.length == 2) and /\A\d+\z/.match(sp[1])
                event.set('[alert][signature]', sp[0])
            end
            end
            "
          }
      }
      if [src_ip]  {
        geoip {
          source => "src_ip"
          target => "geoip"
          #database => "/opt/logstash/vendor/geoip/GeoLiteCity.dat"
          add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
          add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
        }
        mutate {
          convert => [ "[geoip][coordinates]", "float" ]
        }
        if ![geoip.ip] {
          if [dest_ip]  {
            geoip {
            source => "dest_ip"
            target => "geoip"
            #database => "/opt/logstash/vendor/geoip/GeoLiteCity.dat"
            add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
            add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
            }
            mutate {
            convert => [ "[geoip][coordinates]", "float" ]
            }
          }
        }
      }
    }
    #添加ES的hosts
    output {
      elasticsearch {
        hosts => "localhost:9200"
      }
    }
#####  Kibana模板创建
在 Kibana 的“Management”（管理）选项卡下，导航到“Saved Objects”（已保存的对象）并导入所有三个文件。
然后，可从“仪表板”选项卡打开并加载示例仪表板。
#####  ES数据删除
suricata在内网跑起来后，短短时间就会有大量告警。所以我们得对规则进行优化，某些我们不关心的规则可以禁用掉。禁用掉相关规则后，不会再生成对应的告警。但是ES中已存在的该规则告警该怎么删除呢？我们可以在kibana中直接删除：使用kibana面板中的Dev
Tools。
若删除的告警数量不大，可在kibana的Dev Tools中运行如下语句：
    POST logstash-suricata_log-*/_delete_by_query
    {
      "query": {
        "match": {
          "alert.signature": "SURICATA STREAM 3way handshake wrong seq wrong ack"
        }
      }
    }
但是若删除的告警数量较多，使用如上的语句删除会报超时错误。这时要通过如下语句进行删除，加上 `wait_for_completion=false`参数：
    POST logstash-suricata_log-*/_delete_by_query?wait_for_completion=false
    {
      "query": {
        "match": {
          "alert.signature": "SURICATA STREAM bad window update"
        }
      }
    }
执行完毕后会返回个task，可根据这个task参数查询该删除任务的完成状态。
再运行如下语句查看该删除任务的状态，若还未删除完成，则会提示"completed": false，只需等待该删除任务执行完成。若删除完成，则会提示
"completed": true；
`GET _tasks/NQtjLxAaTiig6ZDZ3nK-cw:126846320`
#### 0x07 参考文章
  1. [PF_RING学习笔记](https://www.jianshu.com/p/6d3f3cdc2411?from=timeline)
  2. [centos6.5下PF_RING安装方法](https://www.cnblogs.com/etangyushan/p/3679662.html)
  3. [用PF_RING DNA加速Suricata](https://www.ntop.org/pf_ring/accelerating-suricata-with-pf_ring-dna/)
  4. [来自Intel的高性能的正则表达式匹配库——Hyperscan](https://www.jianshu.com/p/0ca3e14c20e8)
  5. [Suricata配置文件说明](https://www.cnblogs.com/UnGeek/p/5796934.html)
  6. [一种通过PF_RING提高Snort效率的方法](https://laucyun.com/f691f718a412daf7cd2418cfb5596d7d.html)
  7. [ES Document APIs : Delete By Query API](https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-delete-by-query.html#docs-delete-by-query)