重新读取块设备的分区表。fdisk程序会在重写分区表的时候调用这个iocl命令。Radimo
没有分区，因而不支持这个命令
这些函数的实现都比较直白，我们就不在这里把它们列出来了。块设备还有一些其他的标
准命令，如果读者有兴趣，可以到linux/fs.h文件里查看一下。Radimo没有实现任何设备专用的
命令，可要是真的需要，在那个switch开关语句里加上它们就行了。
21.7.4请求函数：request
request函数可以说是块设备的脊梁。字符设备接收的是一个数据流，而块设备处理的是数
据传输请求。这个请求要么是个读操作，要么是一个写操作，面request函数的对应工作要么
是根据发送来的数据在设备控制的介质上进行检索，要么是把发送来的数据保存到介质上。根
据外设的具体情况，request函数执行的动作会有很大的不同。
请求保存在结构列表里的，做为列表元素的结构其类型是“structrequest”。这个函数自已
是不会去遍历这个列表的，它通过CURRENT宏定义（千万不要把它和任务结构的current进程弄
混了）对各个请求进行访问和处理。
define CURRENr (b1k_dev[MAJOR_NR] .current_request.)
有关定义都在linux/blk.h头文件里。request结构的具体构成如表21-21所示，我们把与本节讨
论的块设备系统无关的部分都省略了一Radimo设备使用的各种数据结构将在我们下面学习它
的request函数时做进一步介绍。
加入jaVa编程群：524621833
---
## Page 764
第21章设备驱动程序
表21-21
CURRENT->
voatile int rq_status
请求本身的状态，它的取值是RQ_ACTIVE或RQ_INACTIVE二者之一
（SCS1子系统有更多的状态取值）。当内核在请求列表里查找一个不使用项目
时要用到这个状态信息
kdev_t rq_dev
请求针对的设备。如果驱动程序正管理增儿台设备（以它们的械编号区别）
可以从这里用MINOR宏命令提取出有关信息来
inbuffer—各个扇区都是这个存储区数组里的一个偏移量。request请求函数有一个
比较特殊的格式—
一我们先来看看它的Radimo版本，代码清单的后面有一些具体的说明。
‘void radimo_request (void)
unsigmed long offset., total:
radiso_begin:
INIT_REQUEST:
NSG(RADIMO_RBQUBST.*s sector u of1u\n”
CURRENT->cmd == READ ? *read*:*write*,
CURRENT->current_nr_sectors):
CURRENT->Sector,
offset = CURRENT->sector *radino_hard;
total = cuRReNr->current_nr_sectors * radimo_hard;
/*access beyond end of the device */
if （tota]+otfset>radino_size*10241{
/*error in request
end_request (0):
goto radimo_begin;
MSG(RADIMO_RECUEST,*offset =lu,total=#lu\n*,offset.total);
if(CURR&NT->Cmd = READ){
}else if (CURRENr->cmd == WRITE){
memcpy(cuRRENr->buffer,radimo_storage+offset,total):
memcpy(radino_storage+offset, CURREvT->buffer,total);
)else{
MSG{RADIMO_ERROR,*cmd = $d is invalid\n*. CURRENT->Cmd);
/*can't happen */
end_request (0) :
/*successful */
end_request (1) ;
/* let INIr_REQUEST return when we are done */
加入jaVa编程群：524621833
---
## Page 765
748Linux程序设计
宏定义INIT_REQUEST负责好儿个动作。它首先检查CURRENT是否包含着个请求，如果
没有就返回。接着它对请求进行合法性检验（请求是针对这个设备的吗？），再检查CURRENT
>bh（后处理队列）上的操作锁是否已经安排好了。就是因为要检查CURRENT里是否包含着一
个请求，我们才会反复跳转到INIT_REQUEST处开始循环——如果请求都处理完了，它就会让
我们返回到用户空间的调用者那里。存储区数组里的偏移量通过对给定的起始扇区CURRENT
>sector和我们的硬件扇区长度做乘法得到。需要传输的数据总量也采用类似的方法根据
CURRENT->current_nr_scctor给定的扇区总数计算出来。接下来，根据CURRENT->cmd指明的
方向用一个简单的memcpy命令完成对数据的拷贝。
voidend_request(intuptodate）结束CURRENT请求
如果uptodate的值是“1”，就表示成功地满足了这个请求。CURRENT将被设置为下一个请
求、如果下一个请求还是针对Radimo的，控制还将回到我们手中并由radimo_request继续进行处
理；如果不是针对Radimo的，就由其他request函数出场表演。
如果请求无法满足（比如出现给定扇区位置超出设备边界等情况时），uptodate的值将是“0"，
end_request将被调用。这将在系统日志里记下一个I/O错误，记载内容包括出错设备的名字和引
起错误的扇区。在我们的例子里，请求是通过阻塞方式的读写函数接收的，收到的请求都是经
检查没有越界的。如果把blk_size[RADIMO_MAJOR]设置为“NULL"，在创建请求时就会把这
个简单的检查绕过去，再出现设备访问越界时就会产生一个读操作错误。
end_request: 1/0 error, dev 2a:00 (radimo), sector 4096
radimo: cead sector 4096 of 2
错误信息里包括十六进制的设备主、辅编号和我们在DEVICE_NAME里定义的设备名：
21.7.5缓冲区缓存
从块设备上读写到的数据块会在缓冲区里得到缓存。这改善了系统的整体性能，如果一个
进程想读一个刚读过或刚写过的数据块，它就可以直接从缓冲区里被提取出来面不必再向介质
发出一新的读操作命令。从内部原理上看，整个缓冲区是由一系列缓冲区表头结构组成的双向
列表，这些表头的下标组成了一个哈希表。大家可能没注意我们已经在请求函数radimo_request
里与缓冲区表头结构擦肩而过，可CURRENT->buffer指针指向的确实是一个缓冲区表头里面的
数据区。
如果我们把RADIMO_REQUEST加到MSG宏定义里再运行Radimo，就可以清楚地看到请求
函数对请求进行处理的全过程。举个例子，即使我们发出一个读命令对相同的10个数据块进行
两次读操作，Radimo也只会读它们一次一一第二次请求的数据是从缓冲区里得到的。写操作力
面的情况也是如此一一你可以试着把同样的数据库写到设备上去，但它们并不是立刻得到处理的。
在真正被写到设备上去之前，数据块会在缓冲区里停留一段时间。即使Radimo不把发送给它的
数据拷贝到自己的内部存储区里去，只要被缓存的数据还停留在缓冲区域里，设备就能够正常
加入jaVa编程群：524621833
---
## Page 766
第21章设备驱动程序
749
工作。随内核而来的RAM盘模块rd（请参考/drivers/block/rd.c文件）使用的就是这个原理、rd模
块没有自己的内部存储区，它把自已用到的缓冲区标记为锁定状态，以此保证它们将停留在缓
冲区域里而不会被添加到空闲缓冲区表上去。如果我们定义了Radimo模块的
RADIMO_CHEAT_REQUEST标志，它也会模仿出这种行为。
缓冲区表头结构可以在linux/fs.h头文件里查到。对其细节的分析超出了本书的讨论范围，
这里只介绍它的几个状态标志一Radimo模块中有几个两数会间接地用到它们（见表21-22）
表21-22
B8_Uptodate
缓冲区里的数据与介质磁盘上的数据完全-改
BH_Dirty
缓冲区里的数据已经发生了变化、需要写到介质磁盘上
BH_Lock
缓冲区被锁定，不能添加到空闲缓冲区表里去
BH_Protected
BH_Req
如果缓冲区失效。就会情除这个标志位
Radimo模块会用到缓冲区城里的许多个缓冲区，而调用invalidate_buffers函数将解除这些缓
冲区与jRadimo之间的关联关系。它将对自己使用的所有没有设置上BH_Lock标志的缓冲区进行
清理，释放它们，使它们能够重新投人使用。
动手试试：Radimo设备
Radimo是Wrox站点源代码下载包里包括的最后一个模块。我们将把它顺理成章地放在
modules/radimo子目录里。和往常一样，在对这个设备进行测试之前需要先对源代码进行编译并
把模块插人到内核，还要创建一个与之对应的特殊文件。如下所示：
mknod/dev/zadimo b420
nake
$insmodradino.o
radino: loaded
radino: sector size of 512, block size of 1024. rota1 size = 2048xb
我们在书中给出的所有选项都可以在加载时进行指定，只要给insmod命令加上适当的参数
就行。这些选项可以在Radimo内容的开始部分查到，也可以通过modinfo命令把它们找出来。如
果只进行我们这里介绍的测试，使用这些选项的缺省值效果就不错。
加载上这个模块之后，我们就可以在设备上创建文件系统了。具体创建哪一种文件系统都
无所谓，我们使用的是ext2类型的文件系统。如下所示：
nke2ts/dev/radim
dmgtail -n1
radimo: ioctl: BLxGErSIZE
因为我们自己在Radimo里实现了ioctl文件操作的BLKGETSIZE调用，mke2fs命令用不着进
行猜测就能查出并利用上这个设备的全部容量。接下来，我们可以挂装上文件系统并对它来回
拷贝文件一就象你对普通硬盘进行操作那样。
mount-t ext2 /dev/xadino/mnt/zadimo
 cp /vmlinuz /mnt/zadiso
加入jaVa编程群：524621833
---
## Page 767
750Linux程序设计
这些命令都不是什么新概念了，我们也用不着多说。用umount命令卸下设备，等待60秒
（这个数字在radimo.h文件里被定义为常数RADIMO_TIMER_DELAY），测试它的介质更换机制。
然后，再挂装它：
umount/dev/zadimo;sleep 60
mount: wrong fs type, bad option, bad supexbiock on *Gev/radino,
mount -t ext2/dev/zadiao/mnt/radimo
1dnesg
or too many mounted Eile systens
radino
VFS:Diskchange
：media has changed
radimo:revalidate
 detected an dev1ce radimo (42.C)
我们的定时器已经在上一次挂装时运行过了，它把media_changed标志设置为“1”。这将使
radimo_media_change向VFS返回一个“1"，表示介质已经被更换了。VFS相应地输出一条信息
报告这一-情况，然后调用radimo_revalidate让设备完成它应该在磁盘更换时完成的必要处理。我
们没有专门编写这方面的代码，所以最终的结果是挂装操作失败了。
21.7.6小结
虽然我们讲了这么多内容，可这也就能算是对块设备的--个简单介绍面已，我们重点介绍
了request请求函数、与之相关的数据结构和块设备的ioctl文件操作调用。Radimo是一个非常简
单的驱动程序，无法全面体现块设备驱动程序与真实硬件外设之间的互动关系。典型的真实硬
件都会利用中断来控制数据的流动、在这种情况下，请求函数无法立刻判断出操作请求是否成
功地被完成了。这些问题一般都要由中断处理器来解决，设备发出操作结束的信号，中断处理
器判断操作是否成功完成。由中断来驱动的块设备在内核里有各种各样的实际例子；如有必要，
你可以自已挑一个来研究。
块设备经常用来存储文件系统，所以它们一般都支持基于分区的访问操作。Linux通过头文
件linux/genhd.h里定义的partition和gendisk结构提供了基础性的分区支持。它的具体实现可以在
子目录drivers/block里的gendisk.c文件里查到，这个子目录里还有各种辅助性驱动程序。给
Radimo加上分区支持并不困难，从进一步了解基本的磁盘子系统方面考虑，这将是一个很好的
练习。这就留给你们大家自已去完成吧！
内核里的块设备大都可以归人某个特定的类，一般被称为SCSI驱动程序、IDE驱动程序或者
CD-ROM驱动程序等。这些都可以被看做是普通的块设备，而Linux还为它们准备了一些特殊的
程序设计接口，大家可以在工作中加以利用。内核中现成的例子、可以在子目录Documentation/
里或者在LinuxDocumentationProject（Linux文档项目）站点上查到的文档都是我们研究这方面
课题的无价之宝。
21.8调试
漏润和程序错误—即我们常说的“bug”。
内核级的代码不存在普通意义上的内存段冲突错误，出现错误时也不会产生“良好的”核
加入jaVva编程群：524621833
---
## Page 768
第21章设备驱动程序
751
心映象（coredump—类UNIX操作系统下的应用程序在出现致命错误时会把当时的内存映象保
存到一个文件里，这个文件就叫做核心映象文件），所以设备驱动程序的调试工作与普通的调试
差别很人。有这么一种说法，即人脑是最好的调试器，说得实在是有道理。当设备驱动程序出
现问题的时候，我们能够采取的最佳措施就是回到源代码上逐字逐句地进行分析推敲。Linux的
源代码全部是公开的，这对我们来说是一个天大的好事一好好利用它吧。能够使用调试器当然
是好事情，但必须保证最后的结局是提住了真正的“虫子”而不是用创可贴之类的东西把真正
的问题掩盖起来。
21.8.1 Oops追查法
Oops追查法是我们必须掌握的一项基本调试技能。内核里的大多数bug大都以NULL退化指
针（即不再具有索引功能的NULL指针，也叫做失效指针）的面目出现。根据它们出现的位置，
内核往往还能够继续运行。这与应用程序里的内存段冲突错误极其相似，但此时不会生成一个
核心映象文件。Oops信息在不同的CPU处理器上有不同的格式，以下内容的讨论对象是x86体系
结构下的Oops追查法、但核心映象的解码过程对各种计算机平台来说基本上都是一致的，因此
本小节里的内容也同样适用于非Intel体系结构。我们来看看下面这条Oops信息：
Unable to handle kernel paging request at virtual address 01380083
current >ts8.cr3 ± 06704000.tcr3 = 06704000
pde=00000000
0op8:0000
CPU:
0010:[]
1
EFLAGS: 00010202
EIP:
eax: c0144000
esi: c64e9c20
ed1: c5f17f84
ecx:00005005
ebp: 00000000
edx: c64e8550
Process bash (pid:390. process nt:32. stackpagenc5f17000)
ds: 0018
es:0018
55:0018
Stack:c5f17f84 c64e859c c64e859c fffffffe c012dfaf c64e8550 c64e9c20
c5f17f84 00000000 c60dd004 00000001c012e17a c64e9620 c5f17f84
c60dd000 c60d6000 c5f16000 bttff6b0 c60d0002 00000002 000006b3
c012e26c c60dd000 c64e9620
Code: 66 83 3b 00 74 4e 31 c9 8b 74 24 20 66 8b 4b 02 3b 4e 44 75
011
{]{][][}[]
如果这是你第一次看到Oops信息，上面这-大堆东西看起来可够晓人的。它分为以下几个
部分：错误发生时各个CPU寄存器的映象、一个堆栈追、一个函数调用追溯以及一段引发这