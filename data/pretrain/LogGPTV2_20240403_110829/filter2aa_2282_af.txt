### 3D Scanning and Printing: Evolving Accessibility

In the past, taking precise measurements was a necessity. However, this is no longer the case, as the rapid evolution of moderately priced 3D printing has created a market for hobbyist-friendly 3D scanning solutions. Some software solutions, such as David 3D, process images of an object while a laser beam moves across it. This allows users to invest more or less depending on the required scan fidelity, as the software can achieve quality scans with relatively low-quality hardware.

The technology to map out a 3D space has also penetrated consumer devices, with the most notable example being the Xbox Kinect gaming controller. With the release of APIs for working with the Kinect, software packages like Skannect and ReconstructMe now allow it to be used as a general-purpose 3D scanner with impressive results. More recently, VERT has experimented with 3D scanning using the free 123D Catch app from Autodesk, which processes a series of smartphone photos to reconstruct an object.

### Using Proxmark3 Like a Boss

The Proxmark3 is only as powerful as the firmware it uses and the commands known to the operator. In the first half of 2015, several new features were implemented to make the system more powerful. This section of the white paper starts by giving an example of analyzing an unknown card and cloning it to a T55x7 using commands from pm3 developer Marshmellow42. Sometimes, however, a job may require digging into the Proxmark3 firmware and adding new features for specific tasks. This section provides an overview of how to use some of the newer advanced features and explains by example how to design and implement new commands using the AWID26 format.

### Using 'lf search'

This section focuses on a few of the changes in the low-frequency (LF) context of the device. New features introduced in March 2015 allow automatic identification of low-frequency tags and easy recovery of the demodulated tag data. This is particularly useful when the goal is to simulate or clone a tag after interrogating it. The first step in this process is 'lf search,' a command to sample data from the coil and test each implemented demodulation looking for a match.

**Figure 21: Identifying HID37 Tag via 'lf search'**

With the samples in the Proxmark3â€™s graph buffer, it is possible to use other commands to inspect the waveform. Simulation of the tag from this point is as simple as running 'lf simfsk' with no other arguments. Clock and logic settings are used from the identified waveform as well as the demodulated bit stream.

### Printing and Using the Demodulated Buffer

The hexadecimal representation of the demodulated buffer can be printed with the data command 'printdemodbuffer x' as shown in the following figure.

**Figure 22: Demodbuffer from HID37 Waveform**

With a little help from a forum post on the Proxmark developers community forum, it indicates the T55x7 block 0 configuration for different popular tag types. HID tags use FSK2a with an RF/50 data rate, where a logical 0 consists of six logic 0 FSK cycles and a logical 1 is signaled by five logic 1 FSK cycles. This corresponds to block 0 settings 0x00106070. The demodbuffer bytes can then be split up into blocks and programmed onto the T55x7 card.

**Figure 23: Writing Demodbuffer to T55xx**

### Developing New Features for the Proxmark3

Sometimes, a task requires going beyond existing features to get the job done. The open-source philosophy of tools like the Proxmark3 makes this possible, but it is not always intuitive where to begin. Designs for the hardware and software of the Proxmark3 are maintained in a GitHub repository along with a helpful wiki for getting started. This section is intended as a reference guide for getting started with Proxmark3 firmware development.

Before jumping into the code, it is helpful to introduce (or refresh) some key concepts related to how the pm3 operates. The Proxmark3 is a USB-powered device designed to either run independently with push-button input (stand-alone mode) or receive commands over a USB serial data link. In contrast to tools like RFIDler or the recently released ChameleonMini, serial commands are sent to the pm3 using a custom client rather than having a native text-driven command line interface. The Proxmark client issues commands to the hardware by sending an UsbCommand data structure containing a command number and arguments to be consumed and processed by the ARM CPU. This device/client model reduces communication on the serial bus and allows developers to offload some operations from the resource-constrained ARM. (Constraints must be considered in terms of both storage space and processing capability.)

The FPGA is a significant part of what makes the Proxmark3 stand out, but fortunately, knowledge of Verilog is not required for most development tasks. In fact, it should be possible to add support for any low-frequency tag format entirely within C code. In low-frequency mode, the FPGA reads raw A/D samples via SPI and passes them onto the ARM for processing using SSP. In high-frequency mode, the FPGA...