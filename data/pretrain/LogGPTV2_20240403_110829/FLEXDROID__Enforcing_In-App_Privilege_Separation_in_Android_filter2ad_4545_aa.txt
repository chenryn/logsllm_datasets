title:FLEXDROID: Enforcing In-App Privilege Separation in Android
author:Jaebaek Seo and
Daehyeok Kim and
Donghyun Cho and
Insik Shin and
Taesoo Kim
FLEXDROID: Enforcing In-App Privilege Separation in Android
Jaebaek Seo∗, Daehyeok Kim∗, Donghyun Cho∗, Taesoo Kim†, Insik Shin∗‡
∗School of Computing, KAIST
†College of Computing, Georgia Institute of Technology
{jaebaek, dhkim7, bigeyeguy, ishin}@kaist.ac.kr, PI:EMAIL
Abstract—Mobile applications are increasingly integrating
third-party libraries to provide various features, such as ad-
vertising, analytics, social networking, and more. Unfortunately,
such integration with third-party libraries comes with the cost
of potential privacy violations of users, because Android always
grants a full set of permissions to third-party libraries as
their host applications. Unintended accesses to users’ private
data are underestimated threats to users’ privacy, as complex
and often obfuscated third-party libraries make it hard for
application developers to estimate the correct behaviors of third-
party libraries. More critically, a wide adoption of native code
(JNI) and dynamic code executions such as Java reﬂection or
dynamic code reloading, makes it even harder to apply state-of-
the-art security analysis.
In this work, we propose FLEXDROID, a new Android
security model and isolation mechanism,
that provides dy-
namic, ﬁne-grained access control for third-party libraries. With
FLEXDROID, application developers not only can gain a full
control of third-party libraries (e.g., which permissions to grant
or not), but also can specify how to make them behave after
detecting a privacy violation (e.g., providing a mock user’s
information or kill). To achieve such goals, we deﬁne a new
notion of principals for third-party libraries, and develop a novel
security mechanism, called inter-process stack inspection that is
effective to JNI as well as dynamic code execution. Our usability
study shows that developers can easily adopt FLEXDROID’s policy
to their existing applications. Finally, our evaluation shows that
FLEXDROID can effectively restrict the permissions of third-party
libraries with negligible overheads.
I.
INTRODUCTION
Mobile application (or app for short) developers are becom-
ing increasingly dependent on third-party libraries. For exam-
ple, almost 50% of free apps embed advertisement libraries
(also known as ad libraries) provided by ad companies to
enable in-app advertising [32]. Many other third-party libraries
are also used by app developers to provide various features
at signiﬁcantly reduced development time and cost. To name
a few, such features include in-app purchases [14], UI [2],
client-side cloud computing interfaces [6], game engines [17],
analytics [8], and PDF view [3]. Unfortunately, third-party
libraries come at costs of potential privacy violation of users.
‡A corresponding author.
Permission to freely reproduce all or part of this paper for noncommercial
purposes is granted provided that copies bear this notice and the full citation
on the ﬁrst page. Reproduction for commercial purposes is strictly prohibited
without the prior written consent of the Internet Society, the ﬁrst-named author
(for reproduction of an entire paper only), and the author’s employer if the
paper was prepared within the scope of employment.
NDSS ’16, 21-24 February 2016, San Diego, CA, USA
Copyright 2016 Internet Society, ISBN 1-891562-41-X
http://dx.doi.org/10.14722/ndss.2016.23485
A great deal of previous works have increasingly called at-
tention to potential security and privacy risks posed by Android
advertising libraries [22, 32, 40]. Many ad libraries access
privacy-sensitive information even without notiﬁcation to users
or application developers. Our analysis of 100,000 Android
apps reveals that in addition to ad libraries, various other
third-party libraries (e.g., Facebook, Flurry, RevMob, Pay-
pal) covertly utilize Android APIs to access privacy-sensitive
resources such as GET_ACCOUNTS, READ_PHONE_STATE, or
READ_CALENDAR without mentioning them properly in their
Developer’s Guides. The current Android platform provides
coarse-grained controls for regulating whether third-party li-
braries access private information, allowing them to operate
with the same permissions as their host apps. For example, if
an app has the GET_ACCOUNT permission to access a user’s
online account information (e.g., Gmail and Facebook IDs),
app developers have no way of disallowing third-party libraries
to access such account information. As a result, they must
blindly trust that third-party libraries will properly respect
access to privacy-related information of app users.
This paper presents FLEXDROID, an extension to the An-
droid permission system that allows app developers to control
access to a user’s private information by third-party libraries.
Our primary goal
is to enable in-app privilege separation
among a host application and one or more third-party libraries,
while running all in the same process and so, the same UID
privilege. To this end, FLEXDROID provides an interface, as
a part of the app manifest, for app developers to specify a
set of different permissions granted to each third-party library.
Upon any request for a user’s information, FLEXDROID seeks
to identify the principal of the currently running code (either
an app or third-party libraries) via our new security mecha-
nism, called inter-process stack inspection. Depending on the
identiﬁed principal, FLEXDROID allows or denies the request
by dynamically adjusting the app’s permissions according to
the pre-speciﬁed permissions in the app’s manifest.
Since FLEXDROID assumes that third-party libraries are
potentially malicious, a key challenge is to draw clear and
trustworthy boundaries between the host app and their third-
party libraries at runtime. This becomes particularly chal-
lenging as many third-party libraries utilize various dynamic
features of the Java language including native methods (JNI),
Java reﬂection, and dynamic class loading. If such dynamic
code execution is not considered carefully, virtually all ad-
versarial third-party libraries can bypass the proposed security
mechanism. From our analysis of 100,000 Android apps, 72%
of 295 third-party libraries are found to rely on dynamic code
execution. Moreover, host apps and third-party libraries involve
complex control- and data-ﬂow dependencies through diverse
features, such as class inheritance and callback methods. Un-
like existing solutions that rely on static analysis [22, 32, 40] or
cross-app privilege separation [37, 39, 45], the proposed stack-
based inspection technique not only can faithfully identify the
module of third-party libraries but also can regulate them at
runtime without limiting the use of widely-adopted dynamic
code execution.
Experiments with our prototype on Android 4.4.4 show
that FLEXDROID has a high degree of usability and compati-
bility; app developers can easily apply FLEXDROID’s policy to
isolate existing third-party libraries. Our experimental results
also indicate that FLEXDROID incurs negligible overheads.
Experiments with an open-source K-9 email app show that
FLEXDROID adds 1.13-1.55 % overheads in launching the ap-
plication and sending an email, compared with stock Android.
We make three contributions as follows:
• We report several new ﬁndings from our analysis of
100,000 real-world Android apps and 20 popular third-
party libraries (see §III-B). For example, 72% of 295
third-party libraries employ the dynamic code execution
using various Java language features, and 17% of them
rely on JNI.
• FLEXDROID extends Android’s permission system by
providing in-app privilege separation for a wide range
of apps, while placing no limit on the use of native code
and reﬂection and requiring no modiﬁcation to the code
except the manifest.
• To the best of our knowledge, FLEXDROID is the ﬁrst
system that adopts a hardware-based fault isolation using
the ARM Domain to sandbox third-party libraries in
Android apps. We describe our engineering experience
in implementing the hardware-based fault isolation and
conduct experiments using real-world Android apps.
II. RELATED WORK
Detecting in-app security/privacy risks. Security and privacy
issues in in-app advertising have recently attracted consider-
able attention. Several studies [22, 32, 40] examine Android
advertising libraries through static analysis. Their ﬁndings
indicate that many in-app ad libraries collect privacy-sensitive
information [32] even without mentioning the use of privacy-
related permissions in their documentation [40], while such
negative behaviors may be growing over time [22]. Livshits et
al. [35] propose an automated approach to identify and place
missing permission prompts where third-party libraries may
potentially misuse permissions. A few studies employ dynamic
analysis to disclose potential risks [21, 25]. Brahmastra [21] is
an automation tool to test the potential vulnerability of third-
party libraries embedded into mobile apps, beyond the reach
of GUI-based testing tools. MAdFraud [25] adopts a dynamic
analysis to detect fake ad clicks by host applications. In our
work, we analyzed 20 popular third-party libraries in depth to
understand how they covertly request privacy-sensitive APIs
(e.g., SMS, calendar, location, etc) and how each of them rely
on dynamic features of the Java language (see Table I).
Protecting sensitive data against privacy-unaware third-
party libraries. Several works have introduced protection
mechanisms against permission-abusing third-party libraries.
All existing approaches, except one [43], share the principle
of separating the privilege of third-party libraries from the
host applications by running them in separate processes with
the goal of isolating a speciﬁc type of third-party libraries
unlike FLEXDROID. AdSplit [39] and AFrame [45] isolate ad
libraries by running them as separate applications with limited
permissions, and NativeGuard [41] takes a similar approach
for native third-party libraries (written in C/C++) such as
FFmpeg [7]. AdDroid [37] places advertising functionality
into a new Android system service to separate it from host
apps. LayerCake [38] isolates user interface (UI) libraries from
its host app to support secure third-party UI embedding on
Android. On the other hand, Compac [43] is the closest to our
work. Like us, it provides in-app privilege separation for host
app and third-party libraries while both running in the same
process. However, Compac’s approach is not applicable to
third-party libraries relying on JNI or dynamic code execution,
which almost all of the popular third-party libraries rely on
(see Table I). FLEXDROID not only enables isolation of any
third-party libraries but also allows app developers to choose
how each library behaves upon their privacy violation.
Cross-app privacy leaks. A great deal of previous studies aim
to mitigate the confused deputy problem, inter-application or
inter-component permission leaks by either checking IPC call
chains or by monitoring the run-time communication between
apps [23, 24, 26, 29, 30]. TaintDroid [27] and DroidScope [44]
employ efﬁcient taint tracking to monitor real-time data leak-
age.
III. MOTIVATION
Each Android app runs in its own sandbox, an isolated
process with an application-speciﬁc UID allocated at
the
installation time. In order to get access to sensitive resources
(i.e., contact, location, SMS, camera) outside the app sandbox,
an app must specify proper permissions in the manifest,
AndroidManifest.xml. The Android permission model only
offers an “all-or-nothing” installation option for users to accept
all the permissions requested for installation or simply refuse
to install to the app. More critically, the app is able to keep
accessing the granted resources all the time, no matter what
components or modules of the app are requesting access to.
An Android app often contains third-party libraries to offer
advanced functionality. In the Android security architecture,
all
the modules in the same app have exactly the same
permissions, resulting in overprivileged third-party libraries.
That is, some third-party libraries can have more privilege
than what they need, while being malicious (intentionally or
not). As a result, a malicious third-party library may exploit
the app’s SEND_SMS permission to send premium-rate SMS
messages at the users’ cost (i.e., £5 for each message [9]).
This could make app developers vulnerable to lawsuits since
they are considered liable for all the behaviors of their apps.
A. Potential Attack Scenarios
We consider three possible attack scenarios where overpriv-
ileged third-party libraries access privacy-sensitive resources
regardless of the app developers’ intention.
Libraries abusing undocumented permissions. App devel-
opers know what permissions a library will use based on its
documentation (i.e., Developer’s Guide), specifying its must-
have permissions and optionally required permissions. Due
2
n
o
i
t
a
m
r
o
f
n
i
e
n
o
h
P
s
t
n
u
o
c
c
r
a
d
n
e
l
a
C
r
a
d
n
e
l
a
C
s
g
n
i
t
t
e
S
S
M
S
S
M
S
e
t
i
r
e
t
i
r
d
a
e
R
t
e
n
r
e
t
n
I
d
a
e
R
k
r
a
m
k
o
o
B
d
a
e
R
o
i
d
u
A
d
r
o
c
e
R
s
k
s
a
T
t
e
G
g
n
i
d
a
o
L
s
s
a
l
C
n
o
i
t
a
c
o
L
n
o
i
t
c
e
ﬂ
e
R
k
c
a
b
l
l
a
C
e
c
n
a
t
i