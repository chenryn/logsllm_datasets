Haven. In USENIX Symposium on Operating Sys-
tems Design and Implementation (OSDI) (2014).
[9] BELL, R. M., AND KOREN, Y. Lessons from
the Netflix prize challenge. ACM SIGKDD Explo-
rations Newsletter 9, 2 (2007).
[10] BISHOP, C. M. Neural networks for pattern recog-
nition. Oxford university press, 1995.
[11] BLUM, A., DWORK, C., MCSHERRY, F., AND
NISSIM, K. Practical privacy: The SuLQ frame-
work.
In ACM SIGMOD-SIGACT-SIGART Sym-
posium on Principles of Database Systems (PODS)
(2005).
[12] BOSER, B. E., GUYON, I. M., AND VAPNIK,
V. N. A training algorithm for optimal margin clas-
sifiers. In Proceedings of the ﬁfth annual workshop
on Computational learning theory (1992).
[13] BOST, R., POPA, R. A., TU, S., AND GOLD-
WASSER, S. Machine learning classification over
encrypted data. In Symposium on Network and Dis-
tributed System Security (NDSS) (2015).
[14] BREIMAN, L. Random forests. Machine Learning
45, 1 (2001).
[15] BREIMAN, L., FRIEDMAN,
J. H., OLSHEN,
R. A., AND STONE, C. J. Classiﬁcation and Re-
gression Trees. Wadsworth, 1984.
[16] CRIMINISI,
J.,
A.,
SHOTTON,
AND
KONUKOGLU, E.
Decision forests: A uni-
fied framework for classification,
regression,
density estimation, manifold learning and semi-
supervised learning. Foundations and Trends in
Computer Graphics and Vision 7, 2-3 (2012).
USENIX Association  
25th USENIX Security Symposium  633
15
[17] C.YAO, A. Protocols for secure computations (ex-
tended abstract). In IEEE Symposium on Founda-
tions of Computer Science (FOCS) (1982).
[18] DE HOOGH, S., SCHOENMAKERS, B., CHEN, P.,
AND OP DEN AKKER, H. Practical secure de-
cision tree learning in a teletreatment application.
In Financial Cryptography and Data Security (FC)
(2014).
[19] DWORK, C., MCSHERRY, F., NISSIM, K., AND
SMITH, A. Calibrating noise to sensitivity in pri-
vate data analysis. In Theory of Cryptography Con-
ference (TCC) (2006).
[20] Fast CNN library. http://fastcnn.codeplex.
com/ (accessed 17/02/2016).
[21] FREDRIKSON, M., JHA, S., AND RISTENPART,
T. Model inversion attacks that exploit confidence
information and basic countermeasures.
In ACM
Conference on Computer and Communications Se-
curity (CCS) (2015).
[22] FREDRIKSON, M., LANTZ, E., JHA, S., LIN, S.,
PAGE, D., AND RISTENPART, T. Privacy in phar-
macogenetics: An end-to-end case study of person-
alized warfarin dosing. In USENIX Security Sym-
posium (2014).
[23] GENTRY, C. Fully homomorphic encryption us-
ing ideal lattices. In ACM Symposium on Theory of
Computing (STOC) (2009).
[24] GOLDREICH, O., MICALI, S., AND WIGDERSON,
A. How to play any mental game. In ACM Sympo-
sium on Theory of Computing (STOC) (1987).
[25] GOLDREICH, O., AND OSTROVSKY, R. Soft-
ware protection and simulation on oblivious RAMs.
Journal of the ACM (JACM) 43, 3 (1996).
[26] GOODFELLOW,
COURVILLE, A.
preparation for MIT Press, 2016.
Deep learning.
I.,
BENGIO,
Y.,
AND
Book in
[27] GRAEPEL, T., LAUTER, K., AND NAEHRIG, M.
ML confidential: Machine learning on encrypted
data. In International Conference on Information
Security and Cryptology (ICISC) (2013).
[28] HARPER, F. M., AND KONSTAN, J. A. The
MovieLens datasets: History and context.
In
ACM Transactions on Interactive Intelligent Sys-
tems (TiiS) (2015).
[29] HOEKSTRA, M., LAL, R., PAPPACHAN, P.,
ROZAS, C., PHEGADE, V., AND DEL CUVILLO,
J. Using innovative instructions to create trustwor-
thy software solutions. In Workshop on Hardware
and Architectural Support for Security and Privacy
(HASP) (2013).
[30] HYEONG HONG, J., AND FITZGIBBON, A. Se-
crets of matrix factorization: Approximations, nu-
merics, manifold optimization and random restarts.
In Proceedings of the IEEE International Confer-
ence on Computer Vision (2015).
[31] INTEL CORP. Intel 64 and IA-32 architectures soft-
ware developer’s manual—combined volumes: 1,
2a, 2b, 2c, 3a, 3b and 3c, 2013. No. 325462-048.
[32] KOREN, Y., BELL, R., AND VOLINSKY, C. Ma-
trix factorization techniques for recommender sys-
tems. Computer, 8 (2009).
[33] KUSHILEVITZ, E., LU, S., AND OSTROVSKY, R.
On the (in)security of hash-based oblivious RAM
and a new balancing scheme. In ACM-SIAM Sym-
posium on Discrete Algorithms (SODA) (2012).
[34] LAUR, S., LIPMAA, H., AND MIELIK ¨AINEN,
T. Cryptographically private support vector ma-
chines. In ACM SIGKDD International Conference
on Knowledge Discovery and Data Mining (2006).
[35] LINDELL, Y., AND PINKAS, B. Privacy preserving
data mining. Journal of Cryptology (2000).
[36] LINDELL, Y., AND PINKAS, B. Secure multi-
party computation for privacy-preserving data min-
ing. IACR Cryptology ePrint Archive (2008).
[37] LIU, C., HARRIS, A., MAAS, M., HICKS, M. W.,
TIWARI, M., AND SHI, E.
Ghostrider: A
hardware-software system for memory trace obliv-
ious computation. In International Conference on
Architectural Support for Programming Languages
and Operating Systems (ASPLOS) (2015).
[38] LIU, C., WANG, X. S., NAYAK, K., HUANG, Y.,
AND SHI, E. ObliVM: A programming framework
for secure computation. In IEEE Symposium on Se-
curity and Privacy (S&P) (2015).
[39] LIU, F., YAROM, Y., GE, Q., HEISER, G., AND
LEE, R. B. Last-level cache side-channel attacks
are practical. In IEEE Symposium on Security and
Privacy (S&P) (2015).
[40] LLOYD, S. P.
Least squares quantization in
PCM’S. Bell Telephone Labs Memo (1957).
[41] LLOYD, S. P. Least squares quantization in PCM.
IEEE Transactions on Information Theory 28, 2
(1982).
16
634  25th USENIX Security Symposium 
USENIX Association
[42] LUK, C.-K., COHN, R., MUTH, R., PATIL, H.,
KLAUSER, A., LOWNEY, G., WALLACE, S.,
REDDI, V. J., AND HAZELWOOD, K. Pin: Build-
ing customized program analysis tools with dy-
namic instrumentation. In ACM SIGPLAN Confer-
ence on Programming Language Design and Im-
plementation (PLDI) (2005).
[43] MACQUEEN, J.
Some methods for classifica-
tion and analysis of multivariate observations.
In
Berkeley Symposium on Mathematics, Statistics
and Probability, Vol. 1 (1967).
[44] MALKHI, D., NISAN, N., PINKAS, B., AND
SELLA, Y. Fairplay: a secure two party com-
putation system. In USENIX Security Symposium
(2004).
[45] MCKEEN, F., ALEXANDROVICH, I., BERENZON,
A., ROZAS, C., SHAFI, H., SHANBHOGUE, V.,
AND SAVAGAONKAR, U.
Innovative instructions
and software model for isolated execution. In Work-
shop on Hardware and Architectural Support for
Security and Privacy (HASP) (2013).
[46] NARAYANAN, A., AND SHMATIKOV, V. Robust
de-anonymization of large sparse datasets. In IEEE
Symposium on Security and Privacy (S&P) (2008).
[47] NAYAK, K., WANG, X. S.,
IOANNIDIS, S.,
WEINSBERG, U., TAFT, N., AND SHI, E.
GraphSC: Parallel secure computation made easy.
In IEEE Symposium on Security and Privacy (S&P)
(2015).
[48] NIKOLAENKO, V., IOANNIDIS, S., WEINSBERG,
U., JOYE, M., TAFT, N., AND BONEH, D.
Privacy-preserving matrix factorization.
In ACM
Conference on Computer and Communications Se-
curity (CCS) (2013).
[49] OHRIMENKO, O., COSTA, M., FOURNET, C.,
GKANTSIDIES, C., KOHLWEISS, M., AND
SHARMA, D. Observing and preventing leakage
in MapReduce. In ACM Conference on Computer
and Communications Security (CCS) (2015).
[50] OHRIMENKO, O., GOODRICH, M. T., TAMAS-
SIA, R., AND UPFAL, E. The Melbourne shuffle:
Improving oblivious storage in the cloud. In Inter-
national Colloquium on Automata, Languages and
Programming (ICALP), vol. 8573. Springer, 2014.
[51] QUINLAN, J. R. Induction of decision trees. Ma-
chine Learning 1, 1 (1986).
[52] QUINLAN, J. R. C4.5: Programs for Machine
Learning. Morgan Kaufmann, 1993.
[53] RANE, A., LIN, C., AND TIWARI, M. Raccoon:
Closing digital side-channels through obfuscated
execution. In USENIX Security Symposium (2015).
[54] RASTOGI, A., HAMMER, M. A., AND HICKS, M.
Wysteria: A programming language for generic,
mixed-mode multiparty computations.
In IEEE
Symposium on Security and Privacy (S&P) (2014).
[55] SARWAR, B., KARYPIS, G., KONSTAN, J., AND
RIEDL, J. Application of dimensionality reduction
in recommender system – A case study. Tech. rep.,
DTIC Document, 2000.
[56] SCH ¨OLKOPF, B., AND SMOLA, A. J. Learning
with kernels: support vector machines, regulariza-
tion, optimization, and beyond. MIT press, 2002.
[57] SCHUSTER, F., COSTA, M., FOURNET, C.,
GKANTSIDIS, C., PEINADO, M., MAINAR-RUIZ,
G., AND RUSSINOVICH, M. VC3: Trustworthy
data analytics in the cloud using sgx. In IEEE Sym-
posium on Security and Privacy (S&P) (2015).
[58] SHALEV-SHWARTZ, S., SINGER, Y., SREBRO,
N., AND COTTER, A. Pegasos: Primal estimated
sub-gradient solver for SVM. Mathematical pro-
gramming 127, 1 (2011).
[59] SHOKRI, R., AND SHMATIKOV, V.
Privacy-
In ACM Conference
preserving deep learning.
on Computer and Communications Security (CCS)
(2015).
[60] SINHA, R., COSTA, M., LAL, A., LOPES, N., SE-
SHIA, S., RAJAMANI, S., AND VASWANI, K. A
design and verification methodology for secure iso-
lated regions.
In ACM SIGPLAN Conference on
Programming Language Design and Implementa-
tion (PLDI) (2016).
[61] SMOLA, A. J., AND SCH ¨OLKOPF, B. A tutorial on
support vector regression. Statistics and computing
14, 3 (2004).
[62] STEFANOV, E., VAN DIJK, M., SHI, E.,
FLETCHER, C. W., REN, L., YU, X., AND DE-
VADAS, S.
Path ORAM: an extremely simple
oblivious RAM protocol.
In ACM Conference
on Computer and Communications Security (CCS)
(2013).
[63] TSOCHANTARIDIS,
JOACHIMS, T., HOF-
MANN, T., AND ALTUN, Y. Large margin methods
for structured and interdependent output variables.
In Journal of Machine Learning Research (2005).
I.,
USENIX Association  
25th USENIX Security Symposium  635
17
[64] TU, S., KAASHOEK, M. F., MADDEN, S., AND
ZELDOVICH, N. Processing analytical queries over
encrypted data.
In International Conference on
Very Large Data Bases (VLDB) (2013).
[65] VAPNIK, V. N., AND VAPNIK, V. Statistical learn-
ing theory, vol. 1. Wiley New York, 1998.
[66] WANG, X. S., NAYAK, K., LIU, C., CHAN, T.,
SHI, E., STEFANOV, E., AND HUANG, Y. Obliv-
ious data structures. In ACM Conference on Com-
puter and Communications Security (CCS) (2014).
[67] WESTON, J., AND WATKINS, C. Support vector
In
machines for multi-class pattern recognition.
ESANN (1999).
[68] WU, D. J., FENG, T., NAEHRIG, M., AND
LAUTER, K. Privately evaluating decision trees
and random forests.
IACR Cryptology ePrint
Archive (2015).
[69] XIE, P., BILENKO, M., FINLEY, T., GILAD-
BACHRACH, R., LAUTER, K. E., AND NAEHRIG,
M. Crypto-nets: Neural networks over encrypted
data. CoRR abs/1412.6181 (2014).
[70] XU, Y., CUI, W., AND PEINADO, M. Controlled-
channel attacks: Deterministic side channels for
untrusted operating systems. In IEEE Symposium
on Security and Privacy (S&P) (2015).
[71] YAO, A. C. How to generate and exchange secrets
(extended abstract). In IEEE Symposium on Foun-
dations of Computer Science (FOCS) (1986).
A Illustration of Oblivious Matrix Factor-
ization from Section 4.6
256-bit vector register with 32-bit components
( c0 c1 c2 c3 c4 c5 c6 c7 )
...
cache line
...
array in memory
Figure 4: Optimized array scanning using the 256-bit vector
instruction vpgatherdd
B Optimized Array Scanning
The oget() primitive can be further optimized using
vpgatherdd as follows. We make sure that a certain
number of components of the vector register load values
that span two cache lines. (This can be done by load-
ing two bytes from one cache line and two bytes from
the next one, recall that each component loads 4 bytes.)
Hence, up to 16 cache lines can potentially be touched
with a single instruction.
We assign components to cache lines in a careful man-
ner. The first few components request addresses within
dummy cache lines or cache lines that contain the values
of interest (whose addresses should be kept secret). The
values of interest are loaded into the remaining compo-
nents. The concept is depicted in Figure 4 where com-
ponents C0 and C2-C6 request dummy cache lines, C1
requests the cache lines that contain the desired value
which is loaded into C7.
In this configuration, four
bytes are read obliviously from a memory region of size
7 · 2 · 64 bytes = 896 bytes with a single vpgatherdd
instruction. The method easily generalizes when more
bytes (e.g., 8 bytes using C6 and C7) are to be read.
This technique can significantly increase throughput
(up to 2x in some micro-benchmarks outside enclaves on
recent Intel Skylake processors). However, it requires
that vpgatherdd appears as a truly atomic operation
or, at least, that the hardware loads dummy components
before secret ones (and those are then loaded from the
cache). Though this may be true in a software-only at-
tacker model, it is not the case in the powerful threat
model in Section 2. Hence, our implementation relies
on the conservative oget() from Section 3.
636  25th USENIX Security Symposium 
USENIX Association
18