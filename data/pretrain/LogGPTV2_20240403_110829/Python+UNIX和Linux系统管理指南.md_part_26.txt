客户端工厂来处理请求。接下来，通过调用factory.getRootobject（），我们获得了对
客户端Perspective Broker工厂，然后告诉reactor连接到localhost：9876，并使用PB
这个示例的主要部分展示了reactor如何知道什么时候调用callback函数。首先，创建一个
多小的部分。
架，所以才会有这样的情况产生。这一框架鼓励我们在写代码的时候，将工作分解为许
打印调用结果的函数，这似乎有点怪异。正是因为Twisted是一个异步的事件驱动网络框
print_1s（）会输出ls调用的结果。也就是说代码中有一个初始化远端调用的函数和一个
err（）将处理这一过程中出现的任何错误。cal1_1s（）会初始化调用远端的1s方法。
这个客户端示例定义了三个函数，handle_err（），call_1s（）和print_ls（）。handle
if
def print_ls(print_result):
def call_ls(def_call_obj):
from twisted.internet importreactor
from twisted.spread import pb
print print_result
return def_call_obj.callRemote('Is','/home/jmjones/logs')
reactor.run()
d.addErrback(handle_err)
reactor.stop()
.addcallback(print_1s)
main
：
www.TopSage.com
网络1175
---
## Page 190
#!/usr/bin/python
服务器上调用is，而是调用了ls_boom。下面会展示客户端与服务器如何处理异常。
例5-16是对之前展示的Perspective Broker客户端代码进行略微修改的版本。没有在远端
理非常复杂的任务时才能充分体现。
进行连接处理。但是这只是一个非常简单的示例。Twisted结构的真正闪光之处只有在处
亮。创建客户端的工作看起来就是一些将callbacks，deferreds，reactors和工厂通过管道
相对于这里列出的简单RPC示例，这一示例看起来有些复杂。
输出结果为指定目录的所有文件的列表，这与我们期望的结果一致。
def print_ls(print_result):
def call_ls(def _call_obj):
例5-16：Twisted 实现Perspective Broker 客户端一异常处理
在服务器端：
下面是代码运行后的结果：
from twisted.internet import reactor
176
return def_call_obj.callRemote('ls_boom', '/foo')
print print_result
reactor.stop()
factory=
: DHCP options
：BOOTP
:ARP
:cooked linux
DNS Resource Record
DNS Question Record
DNS
（M>**
www.TopSage.com
网络丨#77
PDG
---
## Page 192
接下来，执行一个traceroute：
亚理工学院的公共DNS服务器对www.oreilly.com进行查询：
由于输出比较长，这里只截取了一部分。现在，执行一个递归DNS查询，使用加利福尼
Scapy甚至可以实现纯粹的包复制，类似于tcpdump:
178
Finished to send 1 packets.
>>> sr1(IP(dst="131.215.9.49")/UDP()/DNS(rd=1,qd=DNSQR(qname="www.oreilly.com")
Dot11AssoResp : 802.11 Association Response
Dot11AssoReq : 802.11 Association Request
[snip]
Dot11Auth
Dot11ATIM
Dot11
>>> ans,unans=sr(IP(dst="oreilly.com",
[snip].
25 208.201.239.37True
23
[snip]
·
Begin emission:
an=DNSRR rrname='www.oreilly.com.'
：
208.201.239.37
208.201.239.37 True
第5章
208.201.239.37 True
208.201.239.37 True
208.201.239.37
src=00:16:cb:07:e4:58
###
>>> sniff(iface="eno", prn=lambda x: x.show())
ihl= 5L
version= 4L
:8o2.11 Authentication
:802.11 ATIM
：802.11
.*Finished to send 22 packets.
True
True
dport=domain len=203 chksum=0x843
*****
qtype=A qclass=IN |>
www.TopSage.com
:90:622'102'802,=91121 00912=11 N=s51121 v=d .
款乎
---
## Page 193
specific）的arping工具。
现在试着使用Scapy，模仿bat创建一个arping工具。首先看一下特定平台（platform-
使用Scapy创建脚本
节中，我们将进一步介绍Scapy的库。
在使用Scapy的过程中，真正有趣的是创建自定义的命令行工具和脚本。在接下来的一
如果已经安装了graphviz和imagemagic，网络可视化将会给你留下深刻印象。
现在，可以利用这些结果创建一幅有趣的图画：
来自Scapy官方文档：
如果安装了graphviz和imagemagic，还可以将网络路由的追踪过程可视化。下面的示例
(d I=aaiesd,=ad)ydexsa1 >>res.graph()
Received 195 packets, got 195 answers, remaining 5 packets
Begin emission:
Finished to send.5 packets.
*****************************
******************
Finished to send 200 packets.
72.9.236.58:tcp443 72.9.236.58:tcp80
[snip]
options=
dst= 10.0.1.255
srC= 10.0.1.3
chksum= 0xf668
proto=udp
id=27957
len= 78
tos=0x0
*Begin emission:
*
www.TopSage.com
网络丨179
PDG
---
## Page 194
现在，让我们看看如何以平台中立（platform-neutral）的方式使用Scapy完成同样的
工作。
180
#!/usr/bin/env python
import re
import subprocess
#1/usr/bin/env python
from scapy import srp,Ether,ARP,conf
import sys
if
import sys
return collection
ans,unanssrp(Ether(dst="ff:ff:ff:ff:ff:ff")/AR(pdstiprange),
conf.verb=o
else:
p= subprocess.Popen(
#Assuming use of arping on Red Hat Linux
else:
arping()
 print arping()
result = rcv.sprintf(r"%ARP.psrc% %Ether.src%").split()
if
 print item
arping(ip)
print
print arping(ip)
print
timeout=2)
in item:
www.TopSage.com
业
展
ODG
---
## Page 195
从这些示例中，你会对Scapy的简单和易用留下深刻印象。
可以看到，输出中所包含的信息相当清晰，是子网中所有的Mac地址和IP地址：
sudopythonscapy_arp.py
www.TopSage.com
['10.0.1.7'
,71:00:00:00:00:00,
网络|181
---
## Page 196
数据
系统管理员需要不断地将数据从一个地方迁移到另一个地方。数据的迁移对于系统管理
进行控制。什么样的系统管理员不需要对目录树中的文件进行处理，不需要对文本进行
IT组织需要系统管理员的原因之一，是需要有专门人员能够对数据、文件及目录的处理
引言
第6章
备份脚本和应用程序。需要注意的是，为备份代码编写额外的测试程序不仅明智，而
当然，我们也不应忘记备份。只需要编写少量Python代码，就可以实现大多数自定义的
地方执行数据移动脚本，
使用标准库，可以在shel1中完成许多不可思议的工作。
够完成一些不可思议的工作。
繁的命令是rsync，scp，cp和mv。将这些简单而功能强大的工具用在Python脚本中，能
数据牧马人需要不断地将数据从一个地方移动和整合到另一个地方。通常，使用最为频
RAIDO。在电影工业中，主要进行数据处理的系统管理员被称为“数据牧马人”
的、安全的存储设备，也有快速的、昂贵的存储设备，例如JBOD或者是高速磁盘阵列
之所以常常需要被移动，是因为动画的存储设备通常有两种。既有廉价的、大的、慢
预览房间进行数字化检测，则新被解压的或略微压缩的HD图像文件需要被移走。文件
需的不同分辨率和画面质量，不同数据有着不同的磁盘I/O。如果数据需要被迁移到HD
位置，因为数字电影产品需要数以千兆的存储空间。而且基于某一时刻观看图像时所
员来说是极为普通的工作。在动画业中，需要不断地将数据从一个位置迁移到另一个
文件和目录上。
者至少是一名真正好的系统管理员必须具备的能力。本章接下来的内容将集中在数据、
许在将来的某些时候还是需要这样做。这些能力是一名系统管理员应该具备的能力，或
解析和替换呢？如果不曾编写过一个对目录树中的所有文件进行重新命名的脚本，你或
而不需要依赖特定的平台。
www.TopSage.com
使用标准库的好处是可以在任何
---
## Page 197
In[1]:import os
In [11]: os.rmdir("/tmp/os_mod_explore/")
In [1o]: os.rmdir("/tmp/os_mod_explore/test_dir1_renamed")
In [9]: os.listdir("/tmp/os_mod_explore")
Out[6]: ['test_diri']
In [6]: os.listdir("/tmp/os_mod_explore")
In [5]: os.mkdir("/tmp/os_mod_explore/test_dir1")
In [3]: os.mkdir("/tmp/os_mod_explore")
例6-1：浏览普通OS模块数据的方法
习之旅。
具。因此这里从使用IPython来执行一系列非常普通的操作起步，开始我们的OS模块学
无论何时，如果发现自已需要去了解一个模块，IPython通常是完成这一工作的恰当工
时，系统管理员应该更多地关注这个模块。
些方法中的大部分都能够进行数据处理。本节会介绍该模块中的一些方法。在处理数据
系统服务应用程序接口（API）。在Python2.5中，OS模块包含超过200个方法，并且这
如果曾为编写跨平台的shell脚本而费尽心机，你会非常感谢OS模块，它是一个便携的
使用OS模块与Data进行交互
统管理员经常会遇到的数据流处理的示例。
非常有意义的。接下来我们会展示如何实现这一功能。此外，下面还将例举一个有关系
Python同样完全可以胜任这一工作。创建一个删除重复工具来查找并删除重复文件，是
此外，我们经常需要在一次移动之前，之后或移动过程中对数据进行处理。当然，
测试。
且必要。应该确保在需要执行自己编写的备份脚本时，已经对该脚本进行了单元及功能
1207014425,1207014398，1207014398)
Out[7]
In [7]: os.stat("/tmp/os_mod_explore")
(16877,
'/private/tmp'
6029306L
234881026L，3，501，0,102L,
www.TopSage.com
数据丨183
ODG
---
## Page 198
In [6]: shutil.copytree("test", "test-copy")