309,191
Lines of
All Codes NT
11
2,220,042
1
206,888
3
1,542,403
6
553,596
5
185,126
1
52,777
14
41
2,302,209
7,063,041
RIOT
Contiki
3.6.10
06ef4c2∗
201907
RIOT [28]
Contiki [14]
TS100 [31]
ArduPilot [11]
ChibiOS
RaceFlight [26] Bare-metal
42
17
33
5
8
5
4
114
∗ When there is no proper version (e.g., when the developers have updated the codes, but
have not tagged its version), we provide the commit number from the github repository.
FreeRTOS
Baremetal
ChibiOS
54
36
17
15
19
11
54
208
e33798c∗
4.4
2.05
0.8
rusEFI [29]
grbl [2]
Total
-
-
Table 3: The number of peripheral devices attached to respec-
tive MMIOs in each target ﬁrmware.
Platform
ArduPilot
RaceFlight
RIOT
Contiki
TS100
grbl
rusEFI
Total
SPI
11
2
5
0
0
0
0
18
I2C UART USB GPIO IRQ Flash ADC DMA
10
5
19
0
1
0
0
35
13
2
1
1
1
1
0
19
2
2
4
2
1
1
1
13
2
2
2
1
1
1
1
10
1
1
0
0
0
0
1
3
1
1
1
1
2
2
1
9
1
1
1
0
1
0
0
4
2
2
1
0
1
0
0
6
the identical lock objects. If this is not true, PASAN considers
this transaction pair can be executable concurrently, which
means they have concurrency bugs. Once Tcsi and Tcs j are
determined to have a concurrency bug, the result is updated
in the generated concurrency bug report (Line 5 and 15).
4
Implementation
PASAN mainly targets embedded systems and is designed
to use only static analysis. We use LLVM 7.0 [61] and
SVF 1.6 [76] as the base for our analysis. Peripheral device
address memory layout is extracted from the SVD [8] or
development tool libraries. Overall, our implementation is
composed of over 7K lines of C++ code and various miscella-
neous Python scripts for automation. After the evaluation of
seven target embedded platforms (introduced in Section 5),
we selected the parameters to extract lock spans for transac-
tions (Section 3.4) with the empirical values, T hri as 5,000
and T hrd as 2,000, yielding the highest lock span accuracy
on average as discussed in Section 5.2.
5 Evaluation
We ﬁrst introduce the target testing platforms (Section 5.1),
and focus our evaluation on answering the questions below:
• Q1: How accurate is the transaction span inference?
• Q2: How effective is PASAN’s concurrency bug detection?
• Q3: How effective is PASAN compared to the existing
approaches?
• Q4: What real-world concurrency bugs are detected?
USENIX Association
30th USENIX Security Symposium    257
Table 4: Summarized results of transaction span extraction.
Platform
ArduPilot
RaceFlight
RIOT
Contiki
TS100
grbl
rusEFI
Total
# of Transaction
Spans
Extracted Correct
Accuracy (%)
# of Incorrectly Inferred
Transaction Spans
Subset
Superset Mixed
60
30
41
9
12
13
18
183
41
26
34
8
11
8
13
141
68.33
86.67
82.93
88.89
91.67
61.54
72.22
77.05
5
2
2
0
0
4
0
13
6
2
5
1
1
0
5
20
8
0
0
0
0
1
0
9
5.1 Evaluation Targets
Table 2 summarizes the information about our evaluation
targets of 7 open-source embedded platforms. We selected
this set of platforms with the following criteria: (i) different
running environments (e.g., different RTOSes), and (ii) dif-
ferent peripheral devices (e.g., different sensors). The ﬁrst
two platforms (i.e., ArduPilot and RaceFlight) are for robotic
aerial vehicles (RAVs), and RIOT and Contiki are RTOSes.
We evaluated RIOT by putting all testing device drivers to-
gether to generate one bitcode ﬁle. We evaluated Contiki
with the blink-hello application running multiple threads with
MMIO accesses. TS100 is a soldering iron platform; grbl is
for computer numerical control (CNC) milling controllers;
and rusEFI is used for internal combustion engine control
units. Each platform has lines of compiled code ranging from
5,857 to 116,815, with total lines ranging from 52,777 to
2,302,209, the number of threads ranging from 1 to 11, the
number of interrupt handlers ranging from 11 to 54, and mul-
tiple peripherals ranging from 4 to 42. We note that most of
interrupt handlers execute the simple tasks such as inﬁnite
loop execution (without doing anything), immediate acknowl-
edgement of the interrupt, or a common interrupt handler call
(e.g., a kernel panic handler).
Table 3 shows the types of device drivers used in our evalu-
ation. We note that some device drivers can support different
buses (e.g., SPI and I2C). Furthermore, GPIO can sometimes
act as SPI or I2C according to the conﬁguration. In either
case, we count the number of device drivers individually.
5.2 Transaction Span Extraction Accuracy
As one of the critical steps in the concurrency bug detec-
tion, PASAN identiﬁes the possible transaction spans based
on the extraction approach (Section 3.4) focusing on the in-
structions of transactions which can be executed concurrently
(Section 3.3). The details of extraction accuracy are presented
in Table 4 showing the following information for each target
platform: (1) the number of the extracted transaction spans,
(2) the number of the correctly extracted transaction spans,
(3) the accuracy of the extracted transaction spans, and (4)
incorrectly inferred transactions (e.g., subset, superset and
mixed transaction spans).
To identify the ground truth, we manually inspected
source code for every transaction span. For example, we
look into the function(s) accessing a target device with
a sequence of instructions for a speciﬁc purpose (e.g.,
sdcard_spi_read_blocks to read data from an SD card).
Such functions can be called by the external non-driver func-
tions rather than device drivers. Overall the accuracy of
PASAN’s lock span extraction is 77.05% on average ranging
from 61.54% to 91.67%. Several target platforms, RaceFlight,
RIOT, Contiki, and TS100, achieve high accuracy, i.e., over
80%. Other platforms such as ArduPilot, grbl, and rusEFI
show a reasonable accuracy ranging from 60% to 80%.
In terms of incorrectly inferred transaction spans, there are
three categories of partial inferences, which might still be
useful for concurrency bug analysis.
1. Subset transaction span: A subset transaction span
may contain a subset of the complete device access in-
structions, which can cause false negatives and/or addi-
tional inaccurate transaction span generation. The num-
ber of this type of incorrectly inferred spans range from
0 to 5 in Table 4. However, PASAN can still utilize it
to detect concurrency bugs because MMIO access in-
structions in each subset transaction span should also be
executed atomically.
2. Superset transaction span: A superset transaction span
includes potential bug cases along with other instructions.
As PASAN detects concurrency bugs in device access
instructions for any bug case within the span, some of
the superset transaction spans may lead to false positives.
The number of this type of incorrectly inferred spans
range from 0 to 6 in Table 4.
3. Mixed transaction span: This involves both subset
and superset transaction spans. Therefore, it may lead
PASAN to detect concurrency bugs with false positives
and negatives. The number of this type of incorrectly
inferred spans is from 0 to 8 in Table 4.
There are a couple of reasons why we could not achieve
higher extraction accuracy according to our ground truth study.
In the case with the lowest accuracy, execution of the ap-
plication code (e.g., controller computation or sensor value
conversion code in robotic vehicles) and the peripheral de-
vice management code frequently interleave. This causes our
heuristic distances (discussed in Section 3.4 and 4) to be sub-
optimal because the different level of mixture with application
code varies the optimal distance thresholds leading to incor-
rect transaction span extraction. Another main reason is that
some platforms continue the device initialization steps whose
access patterns are intensive and complex, even after threads