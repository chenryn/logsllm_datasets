I/O intensive (i.e., more data need to be transferred per
request) and the number of requests arriving at the server
shrinks.
6. RELATED WORK
6.1 Software Self-healing
Software self-healing using RPs was ﬁrst proposed in AS-
SURE [30]. RPs are automatically identiﬁed and selected
by using kernel-level checkpoint-restart, powered by Zap [20]
and input fuzzing. RPs were deployed using a modiﬁed OS
386
featuring the Zap virtual execution environment.
In con-
trast to our approach, they require modiﬁcations to the OS
for deploying RPs and system calls are ignored. Nonethe-
less, the RP identiﬁcation component of ASSURE can be
used in combination with our work.
Selective transactional emulation (STEM) [31] is a spec-
ulative recovery technique that also identiﬁes the function
where an error occurs, and it could also be used to assist in
identifying RPs. STEM requires source code to analyze er-
rors, and does not support multithreaded applications. Sim-
ilarly, failure-oblivious computing [29] is another technique
that uses a modiﬁed compiler to inject code to detect invalid
memory writes and correct them by virtually extending the
target buﬀer. This approach is more robust against buﬀer
overﬂow errors, but comes at signiﬁcant performance over-
head, ranging from 80% up to 500% for a variety of diﬀerent
applications. Moreover, it requires recompilation of the tar-
get applications, and it does not handle failures due to other
bugs, such as null pointer dereferences.
Instead of attempting recovery, rebooting techniques [34,
13, 9] focus on restoring a system to a clean state. Program
restart is a signiﬁcantly lengthier process than recovery, re-
sulting in substantial application down-time, while data loss
is also more frequent. Micro-rebooting aims to accelerate re-
booting by only restarting parts of the system, but requires
a complete rewrite of applications to compartmentalize fail-
ures. These techniques cannot recover from deterministic
bugs, and restart all execution threads of a given applica-
tion. Checkpoint-restart techniques [6, 17] are used in a sim-
ilar way to rebooting, but restart from a checkpoint. While
down time is reduced, they still do not handle deterministic
bugs, or bugs maliciously triggered by an attacker (e.g., a
DoS attack).
Checkpoint-restart has been also combined with running
multiple versions of programs [6]. This approach is based
on the assumption that not all versions will be prone to
the same error, and it introduces prohibitive costs for most
applications, as multiple versions need to be maintained and
run concurrently.
Other works have focused on reducing the time from bug
discovery to patch generation by automatically generating
and applying patches [24, 19, 35]. Unfortunately, automati-
cally applying patches is not very practical, due to the possi-
bility that additional errors are introduced during the patch-
ing, or that the patch alters program behavior.
6.2 Coordinated Checkpointing
Our work is also loosely related with work in the area of co-
ordinated checkpointing for distributed systems. Bhargave
et al. [5] present a checkpoint algorithm for distributed sys-
tems, where each process takes checkpoints independently.
To recover, a two-phase rollback algorithm is invoked to de-
termine the processes that need to rollback, and the check-
point they need to rollback to. This is an optimistic algo-
rithm in the sense that it performs well, when errors are
infrequent.
Independent checkpoint algorithms have the
beneﬁt that no coordination between the members of a dis-
tributed system is required, but may suﬀer from the “domino
eﬀect’ [36]’. The “domino eﬀect” occurs when two or more
members of the system keep rolling back to previously taken
checkpoints in an attempt to reach a globally consistent
state, leading to unnecessary delays in the completion of
an action.
Sistla et al. [32] propose various algorithms based on the
asynchronous message logging of incoming messages from
individual members of a distributed system. Similarly to our
approach, they piggyback tags in the exchanged messages,
which are later used to determine the point to roll back and
the messages that need to be replayed. In our proposal, we
only interleave signaling data in the communications, while
we also utilize existing OOB signaling mechanisms provided
by TCP and the OS.
7. CONCLUSION
We introduced cascading rescue points, a new mechanism
for performing software self-healing on multitier architec-
tures. Our approach enables communicating applications to
checkpoint in a loosely coordinated way, so that recovery
does not lead to inconsistent states between applications.
We intercept existing connections and encapsulate applica-
tion data using our CRP protocol, which we use to notify
remote peers to rollback. We also exploit TCP’s OOB sig-
naling to quickly signal peers to stop checkpointing when no
faults occur. We implemented a prototype tool that can ap-
ply CRPs on binary-only software and evaluate it using the
Apache and MySQL servers. We show that it successfully
allows them to recover from otherwise fatal errors. In the
applications tested, the performance overhead introduced by
our approach ranges between 4.54% and 71.96%.
8. REFERENCES
[1] H. Agrawal, R. A. Demillo, and E. H. Spaﬀord.
Debugging with dynamic slicing and backtracking.
Software Practice and Experience, 23:589–616, 1993.
[2] P. Akritidis, C. Cadar, C. Raiciu, M. Costa, and
M. Castro. Preventing memory error exploits with
WIT. In Proc. of the Symposium on Security and
Privacy, pages 263–277, May 2008.
[3] A. Arora, R. Krishnan, R. Telang, and Y. Yang. An
empirical analysis of software vendors’ patch release
behavior: Impact of vulnerability disclosure.
Information Systems Research, 21(1):115–132, 2010.
[4] A. Bessey, K. Block, B. Chelf, A. Chou, B. Fulton,
S. Hallem, C. Henri-Gros, A. Kamsky, S. McPeak, and
D. Engler. A few billion lines of code later: using
static analysis to ﬁnd bugs in the real world.
Commun. ACM, 53:66–75, February 2010.
[5] B. Bhargava and S. Lian. Independent checkpointing
and concurrent rollback for recovery in distributed
systems-an optimistic approach. In Proc. of the 7th
Symposium on Reliable Distributed Systems, pages
3–12, October 1998.
[6] T. C. Bressoud and F. B. Schneider. Hypervisor-based
fault tolerance. In Proc. of the 15th ACM symposium
on Operating systems principles (SOSP), pages 1–11,
1995.
[7] B. Buck and J. K. Hollingsworth. An api for runtime
code patching. Int. J. High Perform. Comput. Appl.,
14:317–329, November 2000.
[8] C. Cadar, D. Dunbar, and D. Engler. KLEE:
unassisted and automatic generation of high-coverage
tests for complex systems programs. In Proc. of the
8th OSDI, pages 209–224, 2008.
[9] G. Candea and A. Fox. Crash-only software. In Proc.
of the 9th Workshop on Hot Topics in Operating
387
errors in deployed software. In Proc. of the ACM
SIGOPS 22nd symposium on Operating systems
principles, pages 87–102, 2009.
[25] J. S. Plank, M. Beck, G. Kingsley, and K. Li. Libckpt:
transparent checkpointing under unix. In Proceedings
of the USENIX 1995 Technical Conference
Proceedings, TCON’95, pages 18–18, Berkeley, CA,
USA, 1995. USENIX Association.
[26] P. Porras, H. Saidi, and V. Yegneswaran. Conﬁcker C
analysis. Technical report, SRI International, 2009.
[27] G. Portokalidis and A. D. Keromytis. Fast and
practical instruction-set randomization for commodity
systems. In Proc. of the 2010 Annual Computer
Security Applications Conference (ACSAC), December
2010.
[28] G. Portokalidis and A. D. Keromytis. REASSURE: A
self-contained mechanism for healing software using
rescue points. In Proc. of the 6th International
Workshop in Security (IWSEC), pages 16–32,
November 2011.
[29] M. Rinard, C. Cadar, D. Dumitran, D. Roy, T. Leu,
and J. W Beebee. Enhancing server availability and
security through failure-oblivious computing. In Proc.
of the 6th OSDI, December 2004.
[30] S. Sidiroglou, O. Laadan, C. Perez, N. Viennot,
J. Nieh, and A. D. Keromytis. ASSURE: automatic
software self-healing using rescue points. In Proc. of
the 14th ASPLOS, pages 37–48, 2009.
[31] S. Sidiroglou, M. E. Locasto, S. W. Boyd, and A. D.
Keromytis. Building a reactive immune system for
software services. In Proc. of the 2005 USENIX ATC,
April 2005.
[32] A. P. Sistla and J. L. Welch. Eﬃcient distributed
recovery using message logging. In Proc. of the 8th
annual ACM Symposium on Principles of distributed
computing (PODC), pages 223–238, 1989.
[33] W. R. Stevens, B. Fenner, and A. M. Rudoﬀ. Chapter
24. Out-of-Band Data. In UNIX Network
Programming Volume 1, Third Edition: The Sockets
Networking API. Addison Wesley, 2003.
[34] M. Sullivan and R. Chillarege. Software defects and
their impact on system availability - A study of ﬁeld
failures in operating systems. In Digest of Papers.,
21st International Symposium on Fault Tolerant
Computing (FTCS-21), pages 2–9, 1991.
[35] M. Susskraut and C. Fetzer. Automatically ﬁnding
and patching bad error handling. In Proc. of the Sixth
European Dependable Computing Conference, pages
13–22, 2006.
[36] K. Venkatesh, T. Radhakrishnan, and H. Li. Optimal
checkpointing and local recording for domino-free
rollback recovery. Inf. Process. Lett., 25:295–304, July
1987.
[37] C. Weiss, R. Premraj, T. Zimmermann, and A. Zeller.
How long will it take to ﬁx this bug? In Proc. of the
4th International Workshop on Mining Software
Repositories (MSR), 2007.
Systems (HotOS IX), May 2003.
[10] J. Etoh. GCC extension for protecting applications
from stack-smashing attacks.
http://www.trl.ibm.com/projects/security/ssp/.
[11] M. Hicks and S. Nettles. Dynamic software updating.
ACM Trans. Program. Lang. Syst., 27:1049–1096,
November 2005.
[12] M. Howard. A look inside the security development
lifecycle at microsoft. MSDN Magazine –
http://msdn.microsoft.com/en-us/magazine/
cc163705.aspx, November 2005.
[13] Y. Huang, C. Kintala, N. Kolettis, and N. Fulton.
Software rejuvenation: Analysis, module and
applications. In Proc. of the 25th International
Symposium on Fault-Tolerant Computing (FTCS),
page 381, 1995.
[14] InformationWeek. Windows home server bug could
lead to data loss.
http://informationweek.com/news/205205974,
December 2007.
[15] V. P. Kemerlis, G. Portokalidis, K. Jee, and A. D.
Keromytis. libdft: Practical dynamic data ﬂow
tracking for commodity systems. In Proc. of the 8th
ACM SIGPLAN/SIGOPS International Conference
on Virtual Execution Environments (VEE), March
2012.
[16] A. D. Keromytis. Characterizing self-healing software
systems. In Proc. of the 4th MMM-ACNS, September
2007.
[17] S. T. King, G. W. Dunlap, and P. M. Chen.
Debugging operating systems with time-traveling
virtual machines. In Proc. of the USENIX Annual
Technical Conference, 2005.
[18] C.-K. Luk, R. Cohn, R. Muth, H. Patil, A. Klauser,
G. Lowney, S. Wallace, V. J. Reddi, and
K. Hazelwood. Pin: Building customized program
analysis tools with dynamic instrumentation. In Proc.
of the 2005 PLDI, pages 190–200, June 2005.
[19] K. Makris and K. D. Ryu. Dynamic and adaptive
updates of non-quiescent subsystems in commodity
operating system kernels. In Proc. of the2 nd EuroSys,
pages 327–340, March 2007.
[20] S. Osman, D. Subhraveti, G. Su, and J. Nieh. The
design and implementation of Zap: a system for
migrating computing environments. In Proc. of the 5th
OSDI, pages 361–376, December 2002.
[21] V. Pappas, M. Polychronakis, and A. D. Keromytis.
Smashing the gadgets: Hindering return-oriented
programming using in-place code randomization. In
Proceedings of the 33rd IEEE Symposium on Security
& Privacy (S&P), 2012.
[22] PaX Project. Address space layout randomization,
Mar 2003.
http://pageexec.virtualave.net/docs/aslr.txt.
[23] PCWorld. Amazon EC2 outage shows risks of cloud.
http://www.pcworld.com/businesscenter/article/
226199/amazon_ec2_outage_shows_risks_of_cloud.
html, April 2011.
[24] J. H. Perkins, S. Kim, S. Larsen, S. Amarasinghe,
J. Bachrach, M. Carbin, C. Pacheco, F. Sherwood,
S. Sidiroglou, G. Sullivan, W.-F. Wong, Y. Zibin,
M. D. Ernst, and M. Rinard. Automatically patching
388