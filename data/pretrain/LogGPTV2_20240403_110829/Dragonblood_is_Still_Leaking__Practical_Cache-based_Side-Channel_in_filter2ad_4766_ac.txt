saves its content in cache for a faster access in the near future.
Finally, in modern Intel CPUs, the LLC has a significant property
of being inclusive, meaning that it behaves as a superset of all
higher caches. An important consequence of this feature, exploited
in some attacks, evicting a memory line from the LLC will also have
impacts on L1 and L2 caches.
2.3.2 Cache optimizations. In some cases, memory lines can be
brought to cache even though they are not accessed. This is due
to some cache optimization, that makes the exact cache behavior
difficult to predict. For instance, Intel‚Äôs prefetcher ([23], Chapter 7)
will pair consecutive memory lines and attempt to fetch the pair of
a missed line to avoid looking for it in the near future. It may also
detect memory access patterns and prefetch the lines to be loaded
next.
2.3.3 Micro-architectural leaks. The time taken to access some data
will significantly change whether the data is already in a CPU cache
(cache hit), or if the CPU needs to look for it in the RAM (cache
miss). This cache interaction can be triggered by two behaviors: (i)
the CPU needs to access some data; (ii) the CPU needs to access
some instruction.
AliceBobGenerate random rB, mBsB = (rB+mB) mod qQB = -mBPCheck sB and QBK = rA(sBP+QB)kck | mk = KDF(K | label2)tr = sA | QA | sB | QBcA = HMACkck(tr)Check sA and QAK = rB(sAP+QA)kck | mk = KDF(K | label2)tr = sB | QB | sA | QAcB = HMACkck(tr)Verify cBVerify cACommit(sA, QA)Commit(sB, QB)Generate random rA, mA sA = (rA+mA) mod qQA = -mAPConÔ¨Årm(cA)ConÔ¨Årm(cB)Dragonblood is Still Leaking:
Practical Cache-based Side-Channel in the Wild
In both cases, this can lead to a vulnerability if the element to
access is related to some secret information (e.g. the index of the
array or the instruction to access depends on a secret value). Given
this information, an attacker can use a spying process interacting
in a particular way with the cache to trigger different timing of
memory access. The nature of the interaction defines various types
of attacks, each having benefits and drawbacks. Most instruction-
driven attacks consist in probing the victim code, and inferring
some data from the instructions performed.
Depending on the threat model and the targeted architecture, an
attacker may or may not be able to access low level caches shared
between two threads. However, the LLC is shared between all cores.
From now on, cache will refer to the LLC unless specified otherwise.
2.4 Related Work
Micro-architectural attacks have long been used to gain information
about sensitive data. In 2014, Yarom and Falkner [38] presented a
ground breaking approach called Flush+Reload. Unlike previous
approaches, which infer victim memory line access based on the
cache set activity, the novel approach directly monitors memory
access in the inclusive L3 cache, yielding more interesting results.
Since then, this method has been exploited to recover sensitive
information in various contexts [3, 4, 6, 8, 9, 11, 14, 30, 32, 37, 39].
In 2016, Allan et al. enhanced the leakage by introducing the
Performance Degradation Attack [4]. The goal is to systematically
evict some well chosen memory line in order to make the leakage
easier and more reliable to exploit.
The Dragonfly handshake has already been reviewed in the past.
A first version was found vulnerable to offline dictionary attack [13].
In 2014, Clarke and Hao outlined a small subgroup attack due to a
lack of verification by the parties [10]. In 2019, Vahoef and Ronen
identified several flaws in different implementations of Dragonfly,
namely in WPA3 and EAP-pwd [35]. They outlined various vulner-
abilities at the protocol level as long as at the implementation level.
They demonstrated that some implementations of the hash-to-curve
method leak sensitive information through micro-architectural at-
tacks. Exploiting these leaks with a classic Flush+Reload attack,
they were able to learn the outcome of the first quadratic residue
computation, and therefore they could learn if the password was
successfully derived at the first iteration or not. We go one step
further and demonstrate that combining Flush+Reload and a well
chosen PDA, we are able to learn the exact iteration corresponding
to the successful derivation, which allows us to increase the proba-
bility of success, while significantly decreasing the complexity of
the attack with fewer traces and computations.
Tschacher Master thesis [26] offers valuable insight on how test
environment for WPA3 protocol fuzzing shall be implemented.
3 ATTACKING IWD IMPLEMENTATION
In this section, we extend the cache-based attack presented by Va-
hoef and Ronen in Dragonblood [35]. Indeed, the attack of [35]
(in Section 6) allows attackers to only learn the outcome of the
first derivation attempt, and needs a high number of traces with
different MAC addresses to be effective. Thus, various WPA3 im-
plementations have just decided to overlook such an attack, and
rather prioritize patching other vulnerabilities [2].
ACSAC 2020, December 7‚Äì11, 2020, Austin, USA
In our attack, we greatly reduce the required traces by exactly
estimating the number of iterations for a particular password with
high probability. Then, we show how our attack can be used to guess
the target password by tremendously cutting down the dictionary
size.
We demonstrated our attack on iNet Wireless Daemon6 (iwd)
version 1.8 (current version as of the time of writing), but we believe
that our work is applicable to any unpatched implementation that
is still vulnerable to the initial cache-attack (see Appendix C for
the case of the current version of FreeRADIUS).
3.1 Threat Model
Our attack targets Wi-Fi network, either a client or an Access Point
(AP). Thus, we assume that the attacker to be within range of the
physical target. To efficiently reduce the set of potential passwords,
attackers need to monitor multiple handshakes, involving the same
password and different MAC addresses. When the target is an AP,
this can easily be done either by waiting for a client to connect,
or by playing the role of a client. If attackers target clients, they
can setup multiple rogue clones of the legitimate AP, advertizing
stronger signal strength (thereby making the client automatically
choosing it) and different MAC addresses. If clients are already con-
nected to the legitimate AP, attackers can force a de-authentication
beforehand [7, 33]. Blocklist mechanisms are usually limited, since
implementations tend to apply them based on the MAC address of
the AP (that can easily be forged). We note that iwd might automat-
ically generate a new random MAC address every time the daemon
starts (or if an interface is detected, due to a hot-plug for instance).
However, the default configuration uses one permanent address.
We note that using different MAC addresses is not relevant to EAP-
pwd, that is the Dragonfly variant in FreeRADIUS (see Appendix C
for further details).
Due to the micro-architectural nature of the leak, attackers need
to be able to monitor the CPU cache, using a classical Flush+Reload
attack for instance. Since cache access and eviction do not rely on
particular permissions, the most common assumption is that attack-
ers can deploy an unprivileged user-mode program in the targeted
device. This spy process runs as a background task and records the
CPU cache access to some specific functions. Papers in the litera-
ture also suggest that such memory access can be granted remotely,
performing the attack through JavaScript code injection in web
browser [28]. However, we did not investigate the effectiveness of
our attack in such a context.
3.2 IWD Implementation
The Dragonfly exchange implemented in iwd follows the standard
SAE [1]. Only the ECP-groups variant is supported with the NIST‚Äôs
curves P256 and P384. The corresponding Hunting and Pecking is
implemented in the function sae_compute_pwe, as illustrated in
Listing 2.
6https://git.kernel.org/pub/scm/network/wireless/iwd.git/
ACSAC 2020, December 7‚Äì11, 2020, Austin, USA
Daniel De Almeida Braga, Pierre-Alain Fouque, and Mohamed Sabt
functions called at lines 17 to 19. Tests have shown that monitor-
ing inside l_getrandom yields the best results: other functions are
called too often, at various places, bringing noise to our traces.
However, random number generation is also part of the quadratic
residue verification (sae_is_quadratic_residue, line 15) in order
to blind the computation. Fortunately, these accesses can be distin-
guished given the number of cycles elapsed since the beginning of
the iteration.
Due to complex CPU optimization techniques (see Section 2.3.2)
and some system noise, the measurements are noisy and some
traces may yield incorrect results. Moreover, a call to l_getrandom
is usually performed in a few cycles, implying that we can miss this
call due to the temporal resolution of Flush+Reload.
In order to significantly improve the reliability of our results, we
combined the Flush+Reload attack with the Performance Degra-
dation attack (PDA), as presented in [4]. Since the first call to
l_getrandom occurs before the proper quadratic residue check,
we evict a memory line inside the code in charge of the Legendre
symbol computation. Hence, we significantly increase the delay
between our synchronization clock and the success-specific code,
while keeping a low delay to reach the first call to l_getrandom.
To sum up, by simply monitoring two addresses with a classic
Flush+Reload technique, and repeatedly evicting a single memory
address, we were able to collect traces that yield more relevant
results with only a few samples.
3.4 Miscellaneous Leak
As specified in the Dragonfly RFC [16] and in the SAE standard [1],
the number of iterations to perform during the password conver-
sion is not fixed. It can be defined as any non-negative integer,
providing it effectively guarantees a successful conversion with
high probability. RFC 7664 advises to set ùëò to at least 40 in order
to get roughly one password over one trillion that needs more
iterations.
As for iwd, the implementation sets ùëò = 20, making this prob-
ability significantly lower, with about one over 2 ¬∑ 106 passwords
requiring more than ùëò iterations. In practice, using only password
drawn from existing dictionaries [25, 31], we were able to find a
consistent list of password needing more than 20 iterations (see
Appendix A for a sample). Using these password related dictio-
naries, with random MAC addresses, we found an average of 33.6
passwords (9.5 ¬∑ 10‚àí5% of the dictionaries).
In this scenario, a client would be unable to authenticate to the
AP until the password or the MAC address of one party is changed.
From an attacker perspective, finding such a tuple provides a lot of
information on the password, without the aforementioned cache-
attack. Indeed, they can assume that the password needs at least 20
iterations, and perform an offline dictionary attack as described in
Section 3.5. However, due to the low probability of finding these
tuples, we did not take it into account in the rest of the paper.
3.5 Dictionary Partitioning
By exploiting the leakage presented above, attackers can signifi-
cantly reduce the set of potential passwords with an offline brute-
forcing program. Given a dictionary and some ùëö collected traces,
it iterates over the passwords and eliminates those that do not
Each type or function starting by l_* refers to a function in the
Embedded Linux Library7 (ell), a minimalist cryptographic library
developed by Intel. By default, this library is statically linked to
the binary at compilation time. Users can decide to use a dynamic
linking by specifying the correct option before compiling. We stress
that the linking strategy does not impact the result of our attack;
only some details in the addresses to monitor are concerned (see
Section 3.3).
It is easy to notice that explicit branching at lines 15 and 16
makes the control flow input-dependent. An attacker who is able to
tell at what iteration the code between line 17 and 22 is executed can
guess how many rounds are needed before successfully returning
from this function.
3.3 Cache-Attack Details
In order to efficiently determine at what iteration a password is
successfully converted, the attackers‚Äô needs are twofold. First, they
need to be able to distinguish each iteration. Second, they shall
guess when the success-specific code (lines 17-22) is executed.
To achieve the first goal, we create a synchronization clock by
monitoring some memory line accessed at the beginning of each
loop. The call to kdf_sha256, a function of libell called inside
sae_pwd_value, is a good candidate. More specifically, we monitor