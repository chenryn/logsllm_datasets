title:On the Difficulty of Hiding the Balance of Lightning Network Channels
author:Jordi Herrera-Joancomart&apos;ı and
Guillermo Navarro-Arribas and
Alejandro Ranchal Pedrosa and
Cristina P&apos;erez-Solà and
Joaqu&apos;ın Garc&apos;ıa-Alfaro
On the Difficulty of Hiding the Balance
of Lightning Network Channels
Jordi Herrera-Joancomartí
PI:EMAIL
Universitat Autònoma de Barcelona
Cybercat
Guillermo Navarro-Arribas
PI:EMAIL
Universitat Autònoma de Barcelona
Cybercat
Alejandro Ranchal-Pedrosa
PI:EMAIL
Institut Polytechnique de Paris, CNRS
SAMOVAR, Telecom SudParis, France
Cristina Pérez-Solà
PI:EMAIL
Universitat Oberta de Catalunya
Cybercat
ABSTRACT
The Lightning Network is a second layer technology running on top
of Bitcoin and other Blockchains. It is composed of a peer-to-peer
network, used to transfer raw information data. Some of the links in
the peer-to-peer network are identified as payment channels, used
to conduct payments between two Lightning Network clients (i.e.,
the two nodes of the channel). Payment channels are created with
a fixed credit amount, the channel capacity. The channel capacity,
together with the IP address of the nodes, is published to allow
a routing algorithm to find an existing path between two nodes
that do not have a direct payment channel. However, to preserve
users’ privacy, the precise balance of the pair of nodes of a given
channel (i.e. the bandwidth of the channel in each direction), is
kept secret. Since balances are not announced, second-layer nodes
probe routes iteratively, until they find a successful route to the
destination for the amount required, if any. This feature makes the
routing discovery protocol less efficient but preserves the privacy of
channel balances. In this paper, we present an attack to disclose the
balance of a channel in the Lightning Network. Our attack is based
on performing multiple payments ensuring that none of them is
finalized, minimizing the economical cost of the attack. We present
experimental results that validate our claims, and countermeasures
to handle the attack.
ACM Reference Format:
Jordi Herrera-Joancomartí, Guillermo Navarro-Arribas, Alejandro Ranchal-
Pedrosa, Cristina Pérez-Solà, and Joaquin Garcia-Alfaro. 2019. On the Diffi-
culty of Hiding the Balance of Lightning Network Channels. In ACM Asia
Conference on Computer and Communications Security (AsiaCCS ’19), July
9–12, 2019, Auckland, New Zealand. ACM, New York, NY, USA, 11 pages.
https://doi.org/10.1145/3321705.3329812
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
AsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand
© 2019 Association for Computing Machinery.
ACM ISBN 978-1-4503-6752-3/19/07.
https://doi.org/10.1145/3321705.3329812
Joaquin Garcia-Alfaro
PI:EMAIL
Institut Polytechnique de Paris, CNRS
SAMOVAR, Telecom SudParis, France
1 INTRODUCTION
The Lightning Network is a second layer running on top of Bitcoin
and other Blockchains. Its goal is to address scalability problems
with Bitcoin payment systems, and to lower transaction fees [17].
It uses a peer-to-peer network, to transfer raw information data.
Some of the links in the peer-to-peer network are identified as
payment channels. Payment channels allow payments to be routed
between Lightning Network clients.
The Lightning Network not only provides better scalability. It
also enables users to perform payments privately, and with low
or negligible fees. In its current specification [31], payments are
conducted with an onion-routing protocol [9], to provide each node
in the route with the minimum information required to relay and
retrieve payments. A node other than the origin and the destination
does not know who is the origin node or the destination node; it
only knows from whom and to whom forward the payment.
Channels are created with a fixed credit amount, the channel
capacity. Channels can be used to perform payments between the
two nodes of the channel. The channel capacity, together with the
IP address of the nodes, is published to allow a routing discovery
algorithm to find an existing path between two nodes that do not
have a direct payment channel. To preserve privacy properties,
and although the channel capacity can be known, the particular
balances of each of the nodes of the channel at a given time is set
confidential only to the two members of the channel. Given that
such balances (i.e., the bandwidth of the channel in each direction)
are not announced, routing nodes need to probe and monitor routes
iteratively, until they find a successful path to the destination for the
amount required, if any. This feature makes the routing discovery
protocol less efficient, but preserves the privacy of channel balances.
In this paper, we present an attack to disclose the balance of a
channel in the Lightning Network. Our attack is based on perform-
ing multiple payments, ensuring that none of them is finalized, and
minimizing the economical cost of the attack. Our attack exploits
the detailed information provided by the Lightning Network clients
on the occurred errors. The onion-routing nature of the Lightning
Network routing makes difficult for victims to detect the source of
the attack, i.e., the source of the payments.
Section 2 introduces the basic background to understand the
proposed attack and countermeasures. Section 3 describes the ad-
versarial model and provides a detailed description of the attack.
Session 8: Blockchain SecurityAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand602Section 4 provides experimental results. Section 5 provides the coun-
termeasures. Section 6 surveys related work. Section 7 concludes
the paper.
2 LIGHTNING NETWORK BACKGROUND
From an architectural point of view, the Lightning Network is
a separated peer-to-peer (P2P) network, connected to the main
Bitcoin P2P network [12]. More precisely, the Lightning Network is
formed from nodes that run a Lightning software client [14, 32]. The
client maintains a P2P network with other nodes of the Lightning
Network and also a connection with a node in the Bitcoin main
P2P network.
Once a node establishes a connection with a peer in the Light-
ning P2P Network, they can open a payment channel in which they
can exchange Bitcoin transactions without the need for such trans-
actions to be set down in the blockchain. This payment channel
is not a real network connection, but a state of the P2P network
connection that both nodes have in the Lightning P2P Network. For
that reason, a payment channel between two users A and B cannot
be created or used without the existence of a connection between
A and B in the Ligthning P2P Network. This online model of the
Lightning Network differs from the offline mechanism of standard
Bitcoin payments, in which A and B may perform payments be-
tween them without being connected, since payments pass through
the blockchain.
2.1 Payment Channels
The core element of the Lightning Network is the payment channel.
A payment channel can be seen as a smart contract between exactly
two parties, A and B, with a capacity amount of Bitcoins CAB = CBA
that is divided between the parties and can be exchanged. Such
division, represented as the balance of A and balance of B, can
be updated without having to send a transaction to the Bitcoin
blockchain.
To create a payment channel, A and B need to set a node in
the Lightning P2P Network and connect both nodes in that net-
work. Once the connection is established, they proceed to create
a payment channel. Channel creation is performed by sending a
special transaction to the Bitcoin blockchain. The open nature of
the Bitcoin blockchain allows any user to check when a channel
is created and some basic information for that channel, like the
capacity of the channel or the Bitcoin addresses that created the
channel1.
The Bitcoin transaction needed to create a channel is known
as the funding transaction, a transaction in which one of the users
deposits some bitcoins in a multisignature address controlled by
both A and B. The total amount included in the funding transaction
is the channel capacity, CAB = CBA.
Once a channel is open, the two users holding that channel can
perform payments in both directions, only restricted to the balance
that each of them has in the channel. The balance of each user
in a channel is a fraction of the capacity of that channel, and can
be indicated with balanceAB for the balance that user A has in
the channel and balanceBA for the balance of B. Obviously, the
1Although Bitcoin addresses are included, the identity of users A and B holding the
channel may be preserved.
following expression always holds: CAB = CBA = (balanceAB +
balanceBA). For instance, if the user A has deposited 0.1 Bitcoins
in the funding transaction of the channel, then the initial balances
of the channel will be balanceAB = 0.1 and balanceBA = 0. When
A performs a payment of 0.02 to B in that channel, the balances are
updated accordingly: balanceAB = 0.08 and balanceBA = 0.02.
Payments in a channel are performed through commitment trans-
actions. When A wants to perform a payment to B both users ex-
change a Bitcoin transaction with special features. In short, the
transaction takes as input the funding transaction output of the
channel and splits the input creating outputs in which every user
gets the new balance of the channel. Since such a transaction is
not published in the Bitcoin blockchain, but stored by each user of
the channel, when a new payment has to be performed, new com-
mitment transactions are created and exchanged. However, since
the new commitment transactions spend the same output from the
funding transaction as used in a previous committed transaction, a
mechanism should be added to invalidate a previous commitment
transaction once a new one has been exchanged. This mechanism is
performed by a set of transactions that are kept offline. The transac-
tions are only published if the counterpart intends to commit to an
invalid, old, commitment transaction. Users are discouraged to use
previous transactions since at every new commitment transaction,
(secret) information of the previous one is revealed, giving the op-
portunity to honest users to punish a dishonest one, by collecting
all the balance of the channel [26].
Notice that commitment transactions are valid formatted Bitcoin
transactions that, although they are not intended to, can be posted
in the Bitcoin blockchain at any time for any of the participants of
the channel.
At any moment, users of a channel can close the channel and
refund the balance each one has in the channel. This reset can be
performed unilaterally, by any of the users sending the last commit-
ment transaction to the Bitcoin blockchain or jointly, by creating a
closing transaction in which the funding transaction output of the
channel is spent in two outputs that equal the actual balances of
each user. More types of channels and similar constructions have
been proposed and generalized, identifying the same open-close
funds mechanism [28].
2.2 Multihop Payments
Channels described so far are of little use in real scenarios, since
they are based on a two party agreement, and often a stable payment
relation between only two users is not common. However, payment
channels can be concatenated allowing to route payments between
two users that do not hold a direct payment channel. When A wants
to perform a payment to C and there is no direct payment channel
between A and C, A tries to find a multihop path of direct channels.
In case the path exists (for instance, with two hops), a sequence
A ↔ B ↔ C is established where each arrow indicates a payment
channel. In such a case, if A wants to pay 0.01 Bitcoins to C, she can
pay 0.01 Bitcoins to B and B can perform the 0.01 payment to C.
The only condition that has to be set to perform the aforementioned
mechanism is that balanceAB ≥ 0.01 and balanceBC ≥ 0.01.
In the multihop approach, payments at each individual payment
channel cannot be performed exactly in the same way that with a
Session 8: Blockchain SecurityAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand603single hop because user B has to enforce that he would receive the
payment from A once he has performed the payment to C, otherwise
he would lose the amount of the payment. The enforcement of this
type of atomic exchange between all the nodes of the path (i.e., all
simple one-hop payments have to be completed or none can be
processed) is performed using Hashed Timelock Contracts (HTLCs)
[11]. In an HTLC between the sender A and the receiver B, A can
deposit Bitcoins that can be redeemed by B if B can perform a digital
signature and provide a preimage of a hash value. Furthermore, the
deposit performed by A has an expiration date after which A can
retrieve the deposit providing a digital signature. The idea is that
C generates a random value x and sends h(x ) to A. A performs the
single hop payment to B with an HTLC based on h(x ) and B also
performs the single hop payment to C with an HTLC based on the
same value h(x ). In that way, since C knows x, he can redeem the
transaction from B, but redeeming the transaction implies revealing
the value of x which, in turn, implies that B may also redeem the
payment from A.
Information in a Lightning multihop payment is routed through
an onion routing protocol where every node of the path is only
aware of his previous and next neighbor. For that reason, the payer
is the one that decides the route of the payment based on the path
availability.
To determine the path, the network topology of the payment
channels of the Lightning Network is published. For each payment
channel, the capacity of the channel and the fees of each node
are advertised. Based on this information, the payer determines
the path for the payment. However, for privacy reasons, the only
information available for a channel is its capacity, but not the exact
balance for each of the two users of the payment in which the
capacity is split. Hence, it is possible that, although the capacity of
the channel could allow to route a payment through that channel,
its exact balance for each part may not allow the payment to be
processed. In that case, the payer cannot be aware of that situation
until she tries to proceed with the payment and the protocol returns
an error indicating that a particular hop in the path has not enough
funds. Such an error indicates that the payer needs to find another
path which avoids that hop with insufficient balance in the right
direction.
2.3 Invoices in the Lightning Network
In contrast with regular Bitcoin payments, where a payment request
is based only on the Bitcoin address of the payee and the amount of
the payment, Lightning Network payments are requested through
invoices. When user A wants to make a payment to user D, the
payee creates an invoice. The invoice includes, among others, the
amount of the payment, p, the key of the destination node, the
value h(x ) described in the previous section (to redeem atomically
all the payments of the payment path) and an invoice signature
from the payee (see [31] for all the details). Once A receives the
invoice, she looks for a path in the Lightning Network to route the
payment. In case there is no direct payment channel with enough
capacity between A and D, then A should find a path, for instance
A ↔ B ↔ C ↔ D, in which CAB ≥ p, CBC ≥ p, CCD ≥ p. With this
information, using the public keys of each node, A creates an onion-
routing path in which every node can only decrypt information
with regard to the next hop payment, and the value h(x ) needed to
redeem all the conducted payments.
Every node of the network performs a commitment transaction
to the next hop of the path, by using the existing payment channel.
The commitment transaction includes the value h(x ) in an output
to be redeemed once the value x will be revealed. Upon reception
of the last payment, D looks for the value x that he previously