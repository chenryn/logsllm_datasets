# Title: A (Not) NICE Way to Verify the OpenFlow Switch Specification: Formal Modelling of the OpenFlow Switch Using Alloy

## Authors: Natali Ruchansky and Davide Proserpio
### Boston University
- **Emails**: {natalir, dproserp}@cs.bu.edu

## Categories and Subject Descriptors
- **C.2.2 [Network Protocols Subjects]**: Protocol Verification

## Keywords
- OpenFlow Switch, Alloy

---

## 1. Introduction

The advent of Software-Defined Networks (SDNs) is revolutionizing the way networks are built and managed. SDNs decouple the data plane from the control plane, simplifying the introduction of new network functionalities. The OpenFlow protocol embodies a move towards centralization, where a single controller manages the logic of multiple switches. While centralized systems can be easier to coordinate, they still have a high likelihood of bugs. Despite the existence of the OpenFlow Specification [3], unexpected behavior can occur due to underspecification or complex event sequences.

Formal modeling is an emerging technique for verifying standards and protocols. A formal model, created at a chosen level of abstraction, enables precise understanding, specification, and analysis of the system. The Alloy modeling language is particularly well-suited for modeling complex networks. It has been used in various applications, including the analysis of Chord [6, 7], which led to the discovery of a counterexample proving the protocol's incorrectness.

This paper applies formal modeling principles to OpenFlow using Alloy and the Alloy Analyzer [5]. Our primary contributions are:
1. To provide a proof of correctness (or lack thereof) for the OpenFlow Switch Specification Version 1.1.0.
2. To offer researchers a complete OpenFlow Switch module that can serve as a foundation for verifying various applications or types of networks (see Section 4 and our website [2]).

The rest of the paper is organized as follows. In Section 2, we introduce Alloy. In Section 3, we describe our model, including assumptions and abstractions. In Section 4, we summarize our results and discuss future work.

---

## 2. Alloy

Alloy models differ from implemented systems. An Alloy model is not a deployable software but a logical representation of the system's function. It is a model enumeration tool similar to model checking, using a mix of first-order predicate logic and relational algebra. A model specified in Alloy consists of boolean statements that together form a proof. The Alloy Analyzer [5] verifies consistency and desired properties.

To understand Alloy, imagine pausing a working network and taking a snapshot. The Alloy Analyzer evaluates possible next steps from this snapshot, assigning truth values to events and identifying logical inconsistencies using a SAT solver.

For example, the rule "No self-loops" can be enforced with the following Alloy code:
```alloy
fact noSelfLoops {no n:Node, p:n.ports | p.connection in n.ports}
```
This ensures that no node is connected to its own port. While Alloy simplifies the expression of complex requirements, it has limitations. Since it relies on user-specified model sizes, the Alloy Analyzer is sound but not complete. Checking a model for three nodes does not guarantee correctness for four. When the size is unspecified, the space of possible models explodes, a common issue in state-of-the-art model checkers and enumerators.

---

## 3. Model

It has been conjectured that the OpenFlow Specification is underspecified, leading to potential undesired behavior. For instance, certain message encapsulations might cause forwarding loops if packets are not recognized. These issues often arise from specific, rare event chains, making them difficult to reproduce but more easily detected by model-checking tools. Our construction and verification so far have not encountered inconsistencies, but many underspecification concerns focus on group tables and broadcast functionality, which are not yet included in our model.

### 3.1 Model Overview and Assumptions

Our model explores various configurations and behaviors of an OpenFlow Switch. We cover all parts of the Specification, including table management, entry-matching (Figure 1), messaging, and more. We also define a Network and its component Nodes (Controllers, Switches, and Endhosts), but only the functionalities needed for their interaction with the Switch. This allows users to input specific network topologies (discussed further in Section 4).

Although our network is generic, we incorporate intuitive properties. For example, we require that the network is connected, with each Node connected to at least one other Node and no Node connected to itself. We assume a secure and reliable channel between the Switch and Controller, focusing on 'OpenFlow-only' Switches (for more detail, see [3]).

### 3.2 Abstractions

Our focus is on the behavior of an OpenFlow Switch, abstracting out aspects like counters, field-wise entry matching, GoTo functionality, and fully formed messages. We do not concern ourselves with specific counter values or IP addresses; instead, we focus on abstract logical expressions. For example, whether an IP matches or a counter is updated, regardless of the precise value. Future models may make these abstractions explicit.

### 3.3 Properties

With our model assumptions and abstractions, we present some inherent properties:

- **NoForwardingLoops**: Ensures a packet entering a switch has not previously entered it. In Alloy:
  ```alloy
  pred noForwardingLoop [s:Switch, p:Packet] {no port:s.ports | port in (p.seen)}
  ```
  This predicate checks for a forwarding loop for a given Switch and Packet.

- **NoBlackHoles**: Ensures no packet disappears from the system. This property is implicitly defined since if a Switch receives a packet, appropriate actions are taken.

- **CorrectInstall**: Upon receiving a new flow rule, installation respects the rules for existing entries. This is enforced by requiring the Switch to check for overlapping and identical entries, as described in [3].

We have also implemented properties such as FIFO processing, Echo Awareness, Instant OF Response, and No Forgotten Packets (more details in [2]).

---

## 4. Conclusion

In this work, we begin to formally model the OpenFlow Switch using Alloy. Following the OpenFlow Specification 1.1.0, we have modeled several key properties. Although our model is in its early stages, it already covers a significant portion of the OpenFlow Switch's properties.

We are currently introducing the concept of time using a specific Ordering module, allowing us to express history-dependent properties. For example, we can rewrite the NoForwardingLoops property:
```alloy
fact NoForwardingLoops {all t:Tick, m:Msg | no (t.visible.m & t.read.m)}
```
This property must hold for any node at any point in time, ensuring no message is both read in the past and available to read.

Our ultimate goal is to create a complete model of the OpenFlow Switch, providing a useful tool for researchers to verify arbitrary protocols or applications. Our model can be imported as a black box into more complex models, and the ability to pass a specific network topology as input will allow researchers to verify particular network structures or applications.

---

## 5. References

[1] http://alloy.mit.edu/alloy/citations/case-studies.html.

[2] http://cs-people.bu.edu/natalir/ofswitch/.

[3] OpenFlow switch specification version 1.1.0, 2011.

[4] M. Canini, D. Venzano, P. Peresini, D. Kostic, and J. Rexford. A nice way to test OpenFlow applications. NSDI, Apr, 2012.

[5] D. Jackson. Software Abstractions: logic, language, and analysis. The MIT Press, 2006.

[6] I. Stoica, R. Morris, D. Karger, M. F. Kaashoek, and H. Balakrishnan. Chord: A scalable peer-to-peer lookup service for internet applications. ACM SIGCOMM 2001, 2001.

[7] P. Zave. Lightweight verification of network protocols: The case of Chord. Unpublished, http://www2.research.att.com/~pamela/chord.pdf, 158, 2009.