# FEAST'20: Fifth Workshop on Forming an Ecosystem Around Software Transformation

**Authors:**
- Kevin W. Hamlen, The University of Texas at Dallas, Richardson, Texas, USA
- Long Lu, Northeastern University, Boston, Massachusetts, USA

## Abstract

The Fifth Workshop on Forming an Ecosystem Around Software Transformation (FEAST) provides a forum for the presentation and discussion of new tools, methodologies, and techniques that facilitate the automated or semi-automated transformation and analysis of software executables. The goal is to improve their security and efficiency without access to the original source code. This late-stage software customization is particularly beneficial for security-conscious consumers who must use closed-source or source-free binary software components in mission-critical settings, or who need to harden software against newly emerging attacks not anticipated during the original design and development. However, code analysis and transformation become much more challenging without source-level information to provide context. This challenge motivates the FEAST Workshop’s goal of forming a robust ecosystem of strategies and tools for reliable and on-demand source-free binary code transformation.

**CCS Concepts:**
- Security and privacy → Software and application security
- Software and its engineering → Software post-development issues

**Keywords:**
- Binary software, software debloating, software de-layering, software security hardening, binary rewriting, software transformation

**ACM Reference Format:**
Kevin W. Hamlen and Long Lu. 2020. FEAST’20: Fifth Workshop on Forming an Ecosystem Around Software Transformation. In Proceedings of the 2020 Workshop on Forming an Ecosystem Around Software Transformation (FEAST '20), November 13, 2020, Virtual Event, USA. ACM, New York, NY, USA, 2 pages. https://doi.org/10.1145/3372297.3416251

## 1. Introduction

Over the past several decades, the complexity and size of software have increased exponentially. For example, the Linux kernel now consists of about 27.8 million lines of source code, an 85% increase since 2012, and Google's codebase is estimated to contain around 2 billion lines of source code. One of the primary drivers of this rapid growth is the market forces that favor feature addition over downsizing. Software with many features is more likely to appeal to a wider variety of consumers, making it easier to sell even if individual users do not utilize most of the available features. Additionally, software bloat tends to be synergistic; code designed to be compatible with other software or that incorporates third-party modules must grow with those products to accommodate all their new features.

Unfortunately, the growth in software features often has an inverse relationship with its security, reliability, and efficiency. Each new feature introduces a potential point of failure and a new target for adversaries. High-complexity software also tends to have more layers of abstraction and indirection to support feature interactions. These disadvantages can be unacceptable for software consumers, such as military, critical infrastructure, and healthcare organizations, for whom security, reliability, and efficiency are paramount. Such consumers often must deploy bloated, closed-source software for practical reasons, such as affordability, maintainability, compatibility, and availability, even if they only need a small subset of its functionalities.

Rather than fighting these market forces directly, which is unlikely to be effective, the FEAST Workshop focuses on improving the feasibility and effectiveness of late-stage software transformation. Late-stage transformations modify low-level (usually binary) software after it has been designed, developed, and compiled into a distributable product. These technologies offer consumers the ability to customize software to their specific requirements, such as removing unneeded features, stripping out unnecessary complexity, or adding hardened security defenses against dangerous attacks. Key challenges in source-free software transformation include:

- **Software Debloating:** Removing unnecessary behaviors, code, or data.
- **Software De-Layering:** Eliminating levels of indirection or abstraction layers that impede efficiency.
- **Software Security Hardening:** Adding extra security checks and defenses to thwart sophisticated attacks, such as control-flow hijacking and code-reuse attacks.
- **Post-Deployment Patching:** Allowing binary code to be modified to replace or remove functionalities.
- **Attack Surface Discovery and Reduction:** Identifying and mitigating potential opportunities for abuse and compromise.
- **Software Self-Healing:** Transforming software to detect and remediate faults unanticipated by its authors.
- **Transformation-Aware Reverse-Engineering:** Lifting low-level software to a higher-level form amenable to analysis, while allowing it to be lowered back to an executable form without sacrificing efficiency and compatibility.
- **Low-Level Formal Methods:** Extending automated theorem proving, model-checking, and type-based verification to executable binaries.

The goal of FEAST is to cultivate a robust ecosystem of these and other technologies relevant to practical, effective customization of binary software without the aid of source code or developer support.

## 2. Fifth Workshop Program

The fifth FEAST workshop includes three keynote addresses and six original research paper presentations. All submitted papers were independently reviewed by three members of the program committee, who scored each manuscript on a scale of 1 (reject) to 5 (strong accept). Papers were accepted if a majority of reviewers favored acceptance. Out of the eight submitted works, six were accepted, resulting in an overall acceptance rate of 75%.

### 2.1 Invited Keynote Speakers

The FEAST program features three invited keynote speakers, each having made significant contributions to military, industrial, or academic research on late-stage software customization.

- **Ryan Craven:** Program Manager for the Office of Naval Research (ONR), where he manages ONR’s Total Platform Cyber Protection (TPCP) program. TPCP supports late-stage software customization and complexity reduction projects that aim to enhance the security and efficiency of Navy and Marine Corps systems and software. Supported projects include research on functionality identification and reduction, de-bloating and de-layering, addition of security constructs, verification, and validation.

- **Alexey Loginov:** Vice President of Research at GrammaTech, a leading cybersecurity research company. At GrammaTech, he oversees both technical and business aspects of the Research Division. His research work has focused on binary analysis technologies, including formal and heuristic techniques. A key contribution of his early work was the addition of Binary-Analysis capabilities to the CodeSonar vulnerability-detection tool. Recently, his group has explored statistical, machine-learning, and evolutionary-computation techniques to address scalability and precision in program analysis and repair.

- **R. Sekar:** SUNY Empire Innovation Professor and Associate Chair of the Computer Science Department at Stony Brook University, where he directs the Secure Systems Lab. His research interests span software and systems security, and he is best known for his work on automated vulnerability mitigation, randomization and taint-based techniques, information-flow based malware containment, intrusion detection, and binary analysis. His research has been funded by grants from AFOSR, DARPA, NSF, and ONR, as well as the industry. He has supervised over 125 students and received numerous awards, including the SUNY Chancellor’s award for Excellence in Research and Best Paper awards at USENIX Security and Annual Computer Security Applications Conferences.

## 3. Workshop Organization

The 2020 FEAST Workshop’s technical program committee consists of 15 members:

- Michael Brown (Georgia Institute of Technology)
- Lorenzo De Carli (Worcester Polytechnic Institute)
- Michael Franz (University of California, Irvine)
- Vasileios Kemerlis (Brown University)
- Tian Lan (George Washington University)
- Byoungyoung Lee (Seoul National University)
- Zhiqiang Lin (Ohio State University)
- Jiang Ming (University of Texas at Arlington)
- Michalis Polychronakis (Stony Brook University)
- Eric Schulte (GrammaTech)
- Nik Sultana (University of Pennsylvania)
- Guru Venkataramani (George Washington University)
- Maverick Woo (Carnegie Mellon University)
- Dinghao Wu (The Pennsylvania State University)
- Wenfei Wu (Tsinghua University)

The workshop’s Web Chair is Ryan Williams.

## 4. Acknowledgments

The workshop chairs wish to thank all authors for submitting papers, as well as former chairs Adam Doupé, Taesoo Kim, Zhiqiang Lin, and Dinghao Wu for assistance with workshop preparation.

## References

[1] Swapnil Bhartiya. 2020. Linux in 2020: 27.8 Million Lines of Code in the Kernel, 1.3 Million in systemd. Linux.com (January 2020).

[2] Sukarno Mertoguno, Ryan Craven, Daniel Koller, and Matthew Mickelson. 2018. Reducing Attack Surface via Executable Transformation. In Proceedings of the IEEE Cybersecurity Development Conference (SecDev). 138.

[3] Rachel Potvin. 2015. Why Google Stores Billions of Lines of Code in a Single Repository. Systems @Scale, https://youtu.be/W71BTkUbdqE.

[4] Hovav Shacham. 2007. The Geometry of Innocent Flesh on the Bone: Return-into-libc Without Function Calls (on the x86). In Proceedings of the ACM Conference on Computer and Communications Security (CCS). 552–561.