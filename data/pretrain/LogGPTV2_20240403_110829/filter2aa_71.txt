# How the ELF Format Ruined Christmas: Exploitation and Countermeasures

**Alessandro Di Federico, UC Santa Barbara, July 18, 2015**

## Index
- The Exploit
- The Dynamic Loader
- The Attacks
- RELRO
- Implementation
- Recap & Countermeasures

## The Exploit

### The Exploitation Process
1. **Find a Useful Vulnerability**
2. **Obtain Code Execution**
3. **Perform the Desired Actions**

Our focus is on the last step: how to perform the attack in the presence of specific countermeasures. Simply having code execution is not enough; it's crucial to know where to direct the execution. Modern operating systems prevent the execution of data, so we need to reuse existing code.

### Code Reuse Attacks
- **Return-into-libc**: Use existing library functions.
- **Return-Oriented Programming (ROP)**: Chain together small sequences of instructions, called "gadgets," to achieve the desired effect.

### Address Space Layout Randomization (ASLR)
- The OS randomizes the position of libraries, making it difficult to predict the location of code.

### Typical Situation
- The main executable's position is usually known.
- It contains references to imported library functions like `printf` and `memcpy`.

### Memory Leak Necessity
- To use a function like `execve`, which is not imported, we need:
  1. The address of an imported function (e.g., `printf`).
  2. Compute the distance between `printf` and `execve`.
  3. Divert execution to `addressOf(printf) - distance(printf, execve)`.

### Challenges
- Requires a memory leak vulnerability.
- Requires knowledge of the library layout.
- Requires interaction between the victim and the attacker.

## The Dynamic Loader

### ELF (Executable and Linking Format)
- **.text**: Executable code.
- **.data**: Writeable global data.
- **.rodata**: Read-only global data.
- **.bss**: Uninitialized global data.

### Calling a Library Function
```c
int main() {
    printf("Hello world!\n");
    return 0;
}
```

### Procedure Linkage Table (PLT)
- An executable section (.plt) containing trampolines for each imported library function.
- **Lazy Loading Example (Pseudocode)**:
  ```c
  if (first_call) {
      // Find printf, cache its address and jump
      _dl_runtime_resolve(current_object_info, 123);
  } else {
      jmp *(cached_printf_address);
  }
  ```

### Resolver
- `_dl_runtime_resolve` finds the symbol associated with the relocation, writes the symbol value at the address in `r_offset`, and transfers execution to the target function.
- `r_offset` points to an entry in the Global Offset Table (GOT), stored in the `.got.plt` section.

### Sections Recap
- **.plt**: Contains trampolines for lazy loading.
- **.got.plt**: A table of cached addresses of imported functions.
- **.rel.plt**: A table of relocations, one for each imported function.
- **.dynsym**: A table of symbols used by relocations.
- **.dynstr**: A list of NULL-terminated strings representing symbol names.

## The Attacks

### Attack Scenario
- Suppose our exploit can run a ROP chain and has simple gadgets to write memory locations.
- **Naive Approach**: Modify `.dynstr` to change `printf` to `execve`. This is not possible as `.dynstr` is read-only.

### The .dynamic Section
- The dynamic loader uses the `.dynamic` section, which contains key-value pairs and is writable.
- **Example**:
  ```c
  d_tag: DT_STRTAB
  d_val: .dynstr
  ```

## RELRO (RELocation ReadOnly)

### Partial RELRO
- Some fields in `.dynamic` are initialized at runtime and then marked read-only.
- **Command**: `gcc -Wl,-z,relro`

### Full RELRO
- Lazy loading is disabled.
- The GOT is marked read-only after initialization.
- **Command**: `gcc -Wl,-z,relro,-z,now`

### DT_DEBUG to the Rescue
- The `DT_DEBUG` entry in `.dynamic` is used by gdb to track the loading of new libraries.
- It points to an `r_map` structure, which holds a pointer to `link_map`.

## Implementation

### leakless
- **Automatically detects the best approach**.
- **Outputs**:
  - Instructions on where to write what.
  - If provided with gadgets, the ROP chain for the attack.

### Gadgets
- **RELRO**: Handles different scenarios based on the type of RELRO.
- **Gadget Examples**:
  - `?(destination) = value`
  - `?(?(pointer)+offset) = value`
  - `?(destination) = ?(?(pointer)+offset)`
  - `?(stack_pointer + offset) = ?(source)`

### Vulnerable Loaders
- GNU C Standard Library (glibc)
- dietlibc, uClibc, and newlib
- OpenBSD’s and NetBSD’s loaders

### Not Vulnerable
- Bionic (PIE-only)
- musl (no lazy loading)
- FreeBSD’s loader

## Advantages of leakless
1. **Single Stage**: No memory leak vulnerability or interaction with the victim required.
2. **Reliable and Portable**: Deterministic and mostly relies on ELF features.
3. **Short**: Shorter ROP chains and lower complexity.
4. **Code Reuse and Stealthiness**: Uses syscalls, making it less invasive.
5. **Automated**: Automates most of the process, requiring only gadgets from the user.

## Countermeasures
- **Use PIE (Position Independent Executables)**
- **Disable DT_DEBUG if not necessary**
- **Make loader’s data structures read-only**
- **Validate input**

### Conclusion
Binary formats and core system components should be designed with security in mind.

## Acknowledgments
- Amat Cama
- Yan Shoshitaishvili
- Giovanni Vigna
- Christopher Kruegel

## License
This work is licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License. For more information, visit [Creative Commons](http://creativecommons.org/licenses/by-sa/3.0/) or send a letter to Creative Commons, 444 Castro Street, Suite 900, Mountain View, California, 94041, USA.