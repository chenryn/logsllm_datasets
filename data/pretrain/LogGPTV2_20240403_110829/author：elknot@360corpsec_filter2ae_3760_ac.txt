        if(nids_init())/*Libnids初始化*/
        {
            printf("%s\n",nids_errbuf);
            return -1;
        }
        nids_register_tcp(pop3_protocol_callback);/*注册分析Telnet协议的回调函数*/
        nids_run();/*进入循环捕获数据包的状态*/
    }
samplecode2:
    #include 
    #include
    #include"nids.h"
    #include"string.h"
    #include 
    #include
    char ascii_string[10000];
    char *char_to_ascii(char ch)
    {
        char *string;
        ascii_string[0] = 0;
        string = ascii_string;
        if (isgraph(ch))
            *string++ = ch;
        else if (ch == ' ')
            *string++ = ch;
        else if (ch == '\n' || ch == '\r')
            *string++ = ch;
        else
            *string++ = '.';
        *string = 0;
        return ascii_string;
    }
    /*
    =======================================================================================================================
    下面是分析SMTP协议的回调函数
    =======================================================================================================================
     */
    void smtp_protocol_callback(struct tcp_stream *smtp_connection, void **arg)
    {
        int i;
        char address_string[1024];
        char content[65535];
        char content_urgent[65535];
        struct tuple4 ip_and_port = smtp_connection->addr;
        strcpy(address_string, inet_ntoa(*((struct in_addr*) &(ip_and_port.saddr))));
        sprintf(address_string + strlen(address_string), " : %i", ip_and_port.source);
        strcat(address_string, "  ");
        strcat(address_string, inet_ntoa(*((struct in_addr*) &(ip_and_port.daddr))));
        sprintf(address_string + strlen(address_string), " : %i", ip_and_port.dest);
        strcat(address_string, "\n");
        switch (smtp_connection->nids_state)
        {
            case NIDS_JUST_EST:
                if (smtp_connection->addr.dest == 25)
                {
                    /* SMTP客户端和SMTP服务器端建立连接 */
                    smtp_connection->client.collect++;
                    /* SMTP客户端接收数据 */
                    smtp_connection->server.collect++;
                    /* SMTP服务器接收数据 */
                    smtp_connection->server.collect_urg++;
                    /* SMTP服务器接收紧急数据 */
                    smtp_connection->client.collect_urg++;
                    /* SMTP客户端接收紧急数据 */
                    printf("%sSMTP发送方与SMTP接收方建立连接\n", address_string);
                }
                return ;
            case NIDS_CLOSE:
                /* SMTP客户端与SMTP服务器连接正常关闭 */
                printf("--------------------------------\n");
                printf("%sSMTP发送方与SMTP接收方连接正常关闭\n", address_string);
                return ;
            case NIDS_RESET:
                /* SMTP客户端与SMTP服务器连接被RST关闭 */
                printf("--------------------------------\n");
                printf("%sSMTP发送方与SMTP接收方连接被REST关闭\n", address_string);
                return ;
            case NIDS_DATA:
                {
                    /* SMTP协议接收到新的数据 */
                    char status_code[4];
                    struct half_stream *hlf;
                    if (smtp_connection->server.count_new_urg)
                    {
                        /* SMTP服务器接收到新的紧急数据 */
                        printf("--------------------------------\n");
                        strcpy(address_string, inet_ntoa(*((struct in_addr*) &(ip_and_port.saddr))));
                        sprintf(address_string + strlen(address_string), " : %i", ip_and_port.source);
                        strcat(address_string, " urgent---> ");
                        strcat(address_string, inet_ntoa(*((struct in_addr*) &(ip_and_port.daddr))));
                        sprintf(address_string + strlen(address_string), " : %i", ip_and_port.dest);
                        strcat(address_string, "\n");
                        address_string[strlen(address_string) + 1] = 0;
                        address_string[strlen(address_string)] = smtp_connection->server.urgdata;
                        printf("%s", address_string);
                        return ;
                    }
                    if (smtp_connection->client.count_new_urg)
                    {
                        /* SMTP客户端接收到新的紧急数据 */
                        printf("--------------------------------\n");
                        strcpy(address_string, inet_ntoa(*((struct in_addr*) &(ip_and_port.saddr))));
                        sprintf(address_string + strlen(address_string), " : %i", ip_and_port.source);
                        strcat(address_string, " client.urgdata;
                        printf("%s", address_string);
                        return ;
                    }
                    if (smtp_connection->client.count_new)
                    {
                        /* SMTP客户端接收到新的数据 */
                        hlf = &smtp_connection->client;
                        strcpy(address_string, inet_ntoa(*((struct in_addr*) &(ip_and_port.saddr))));
                        sprintf(address_string + strlen(address_string), ":%i", ip_and_port.source);
                        strcat(address_string, " data, hlf->count_new);
                        content[hlf->count_new] = '\0';
                        if (strstr(strncpy(status_code, content, 3), "221"))
                            printf("连接中止\n");
                        if (strstr(strncpy(status_code, content, 3), "250"))
                            printf("操作成功\n");
                        if (strstr(strncpy(status_code, content, 3), "220"))
                            printf("表示服务就绪\n");
                        if (strstr(strncpy(status_code, content, 3), "354"))
                            printf("开始邮件输入，以\".\"结束\n");
                        if (strstr(strncpy(status_code, content, 3), "334"))
                            printf("服务器响应验证\n");
                        if (strstr(strncpy(status_code, content, 3), "235"))
                            printf("认证成功可以发送邮件了\n");
                        for (i = 0; i count_new; i++)
                        {
                            printf("%s", char_to_ascii(content[i]));
                        }
                        printf("\n");
                    }
                    else
                    {
                        /* SMTP服务器接收到新的数据 */
                        hlf = &smtp_connection->server;
                        strcpy(address_string, inet_ntoa(*((struct in_addr*) &(ip_and_port.saddr))));
                        sprintf(address_string + strlen(address_string), ":%i", ip_and_port.source);
                        strcat(address_string, " ---> ");
                        strcat(address_string, inet_ntoa(*((struct in_addr*) &(ip_and_port.daddr))));
                        sprintf(address_string + strlen(address_string), ":%i", ip_and_port.dest);
                        strcat(address_string, "\n");
                        printf("--------------------------------\n");
                        printf("%s", address_string);
                        memcpy(content, hlf->data, hlf->count_new);
                        content[hlf->count_new] = '\0';
                        if (strstr(content, "EHLO"))
                            printf("HELLO命令\n");
                        if (strstr(content, "QUIT"))
                            printf("退出连接\n");
                        if (strstr(content, "DATA"))
                            printf("开始传输数据\n");
                        if (strstr(content, "MAIL FROM"))
                            printf("发送方邮件地址为\n");
                        if (strstr(content, "RCPT TO"))
                            printf("接收方邮件地址为\n");
                        if (strstr(content, "AUTH"))
                            printf("请求认证\n");
                        if (strstr(content, "LOGIN"))
                            printf("认证机制为LOGIN\n");
                        for (i = 0; i count_new; i++)
                        {
                            printf("%s", char_to_ascii(content[i]));
                        }
                        printf("\n");
                        if (strstr(content, "\n."))
                            printf("数据传输结束\n");
                    }
                }
            default:
                break;
        }
        return ;
    }
    /*
    =======================================================================================================================
    主函数
    =======================================================================================================================
     */
    void main()
    {
        if (!nids_init())
         /* Libnids初始化 */
        {
            printf("%s\n", nids_errbuf);
            exit(1);
        }
        nids_register_tcp(smtp_protocol_callback);
        /* 注册分析TCP协议的回调函数 */
        nids_run();
        /* 进入循环捕获数据包状态 */
    }
到这里的话，基本上我们对协议分析就有了个了解。
* * *
## 0x03 数据DPI分析
DPI（Deep Packet
Inspection）是一种基于数据包的深度检测技术，针对不同的网络应用层载荷（例如HTTP、DNS等）进行深度检测，通过对报文的有效载荷检测决定其合法性。  
其实安全方面使用DPI主要还是为了做流量方面的分析与取证，从而发现攻击行为和异常行为。  
通常情况下，我们可以再出口流量抓一些流量样本过来使用wireshark分析就可以确定攻击与否，但是这个的话人力成本较大，如果我们有了DPI，就可以迅速的获得数据包内的信息，这样的话可以减少发现攻击的时间。  
因为这种所有周知的原因，规则什么的不太好说，可以私下交流。
## 0x04 总结
这可能是今年这个系列的最后一篇文章了，下一篇文章打算写一个基于中间件模板的蜜罐平台的设计，估计看时间得到明年了，到时候再说吧