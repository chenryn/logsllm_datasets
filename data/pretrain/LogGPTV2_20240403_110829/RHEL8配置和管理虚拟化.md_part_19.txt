::: orderedlist
**流程**
1.  使用 `virt-xml --edit`{.literal} 命令，包括设备的定义以及所需选项：
    例如，以下可清除关闭的 [*testguest*]{.emphasis} 虚拟机的
    [*\*]{.emphasis} 配置，并将其设置为
    [*host-model*]{.emphasis}：
    ``` literallayout
    # virt-xml testguest --edit --cpu host-model,clearxml=yes
    Domain 'testguest' defined successfully.
    ```
:::
::: title
**验证**
:::
要校验设备已被修改，请执行以下任一操作：
::: itemizedlist
-   运行虚拟机并测试该设备是否存在并反映了所做的修改。
-   使用 `virsh dumpxml`{.literal} 命令，并查看在虚拟机 XML
    配置中是否已修改设备的 XML 定义。
    例如,以下输出显示了 [*testguest*]{.emphasis} 虚拟机的 配置，并确认
    CPU 模式已被配置为 [*host-model*]{.emphasis}。
    ``` literallayout
    # virsh dumpxml testguest
    [...]
    [...]
    ```
:::
::: itemizedlist
**故障排除**
-   如果修改设备会导致虚拟机无法引导，请使用 `virsh 定义`{.literal}
    实用程序通过重新加载之前备份的 XML 配置文件来恢复 XML 配置。
    ``` literallayout
    # virsh define testguest.xml
    ```
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
对于对虚拟机 XML 配置的小更改，您可以使用 `virsh edit`{.literal} 命令 -
例如
`virsh edit testguest`{.literal}。但是，请勿将此方法用于更广泛的更改，因为它更有可能以可能阻止虚拟机引导的方式破坏配置。
:::
::: itemizedlist
**其它资源**
-   有关使用 `virt-xml`{.literal} 命令的详情，请使用
    `man virt-xml`{.literal}。
:::
:::
::: section
::: titlepage
# []{#managing-virtual-devices_configuring-and-managing-virtualization.html#removing-devices-from-virtual-machines_managing-virtual-devices}从虚拟机中删除设备 {.title}
:::
您可以通过删除虚拟设备来更改虚拟机(VM)的功能。例如，如果不再需要，您可以从其中一个虚拟机中删除虚拟磁盘设备。
以下流程演示了如何使用命令行界面(CLI)从虚拟机(VM)中删除虚拟设备。还可
[使用 RHEL 8 web
控制台](#managing-virtual-machines-in-the-web-console_configuring-and-managing-virtualization.html "第 5 章 在 web 控制台中管理虚拟机"){.link}从虚拟机中删除一些设备，如磁盘或
NIC。
::: itemizedlist
**先决条件**
-   [**可选：**]{.strong} 使用 `virsh dumpxml vm-name`{.literal}
    备份虚拟机的 XML 配置，并将输出发送到文件。例如，以下方法将
    [*Motoko*]{.emphasis} 虚拟机的配置备份为 `motoko.xml`{.literal}
    文件：
:::
``` literallayout
# virsh dumpxml Motoko > motoko.xml
# cat motoko.xml
  Motoko
  ede29304-fe0c-4ca4-abcd-d246481acd18
  [...]
```
::: orderedlist
**流程**
1.  使用 `virt-xml --remove-device`{.literal} 命令，包括设备定义。例如：
    ::: itemizedlist
    -   以下会在运行的 [*testguest*]{.emphasis}
        虚拟机关闭后，从其中删除标记为 [*vdb*]{.emphasis} 的存储设备：
        ``` literallayout
        # virt-xml testguest --remove-device --disk target=vdb
        Domain 'testguest' defined successfully.
        Changes will take effect after the domain is fully powered off.
        ```
    -   以下命令会立即从运行的 [*testguest2*]{.emphasis} 虚拟机中删除
        USB 闪存驱动器设备：
        ``` literallayout
        # virt-xml testguest2 --remove-device --update --hostdev type=usb
        Device hotunplug successful.
        Domain 'testguest2' defined successfully.
        ```
    :::
:::
::: itemizedlist
**故障排除**
-   如果删除设备会导致虚拟机无法引导，请使用 `virsh 定义`{.literal}
    实用程序通过重新加载之前备份的 XML 配置文件来恢复 XML 配置。
    ``` literallayout
    # virsh define testguest.xml
    ```
:::
::: itemizedlist
**其它资源**
-   有关使用 `virt-xml`{.literal} 命令的详情，请使用
    `man virt-xml`{.literal}。
:::
:::
::: section
::: titlepage
# []{#managing-virtual-devices_configuring-and-managing-virtualization.html#types-of-virtual-devices_managing-virtual-devices}虚拟设备类型 {.title}
:::
RHEL 8
中的虚拟化可以提供几种不同类型的虚拟设备，您可以附加到虚拟机(VM)：
::: variablelist
[模拟设备]{.term}
:   模拟设备是广泛使用的物理设备的软件实现。为物理设备设计的驱动程序还与模拟设备兼容。因此可非常灵活地使用模拟设备。
    但是，由于它们需要正常模拟特定类型的硬件，与相应的物理设备或更为优化的虚拟设备相比，仿真设备可能会受到重大性能损失。
    支持以下模拟设备类型：
    ::: itemizedlist
    -   虚拟 CPU(vCPU)，提供大量 CPU 型号.仿真的性能影响显著取决于主机
        CPU 和仿真 vCPU 之间的差异。
    -   模拟系统组件，如 PCI 总线控制器
    -   模拟存储控制器，如 SATA、SCSI 甚至 IDE
    -   模拟声音设备，比如 ICH9、ICH6 或 AC97
    -   模拟图形卡，如 VGA 或 QXL 卡
    -   模拟网络设备，如 rtl8139
    :::
[半虚拟设备]{.term}
:   半虚拟（Paravirtualization）提供了向虚拟机公开虚拟设备的速度。半虚拟设备公开专用于虚拟机使用的接口，因此可显著提高设备的性能。RHEL
    8 使用 [*virtio*]{.emphasis} API
    作为管理程序和虚拟机之间的层，为虚拟机提供半虚拟化设备。这个方法的缺陷在于它需要在客户端操作系统中使用特定的设备驱动程序。
    建议您尽可能为虚拟机使用半虚拟设备而不是模拟设备，特别是当它们运行大量
    I/O 的应用程序时。半虚拟设备减少 I/O 延迟并增加 I/O
    吞吐量，在某些情况下可使其非常接近裸机性能。其它半虚拟设备还会在不能使用的虚拟机中添加功能。
    支持以下半虚拟设备类型：
    ::: itemizedlist
    -   半虚拟化网络设备(virtio`-net`{.literal})。
    -   半虚拟化存储控制器：
        ::: itemizedlist
        -   `virtio-blk`{.literal} - 提供块设备模拟.
        -   `virtio-scsi`{.literal} - 提供更完整的 SCSI 模拟.
        :::
    -   半虚拟时钟。
    -   半虚拟化串行设备(`virtio-serial`{.literal})。
    -   Balloon
        设备(`virtio-balloon`{.literal})，用于与系统管理程序共享关于虚拟客户机内存使用情况的信息。
        但请注意，Bolloon 设备还需要安装 Balloon 服务。
    -   半虚拟化随机数字生成器(`virtio-rng`{.literal})。
    -   半虚拟化图形卡(`QXL`{.literal})。
    :::
[物理共享设备]{.term}
:   某些硬件平台可让虚拟机直接访问各种硬件设备和组件。这个过程被称为[*设备分配*]{.emphasis}或者[*透传（passthrough）*]{.emphasis}。
    以这种方式连接时，物理设备的某些方面可以直接供虚拟机使用，就像物理计算机一样。这为虚拟机中使用的设备提供了出众的性能。但是，物理连接到虚拟机的设备对主机不可用，也无法迁移。
    然而，某些设备可以在多个虚拟机
    [*之间共享*]{.emphasis}。例如，一个物理设备在某些情况下可以提供多个[*介质设备*]{.emphasis}，然后将其分配给不同的虚拟机。
    支持以下 passthrough 设备类型：
    ::: itemizedlist
    -   虚拟功能 I/O(VFIO)设备分配 - 使用硬件强制 DMA
        和中断隔离，安全地将设备公开给应用或虚拟机。
    -   USB、PCI 和 SCSI 直通 -
        直接向虚拟机公开通用行业标准总线，以便为虚拟客户机软件提供其特定功能。
    -   单根 I/O 虚拟化(SR-IOV)- 启用对 PCI Express
        资源的硬件强制隔离的规范。这使得将单个物理 PCI 资源划分为虚拟
        PCI 功能变得安全而高效。它通常用于网络接口卡(NIC)。
    -   N_Port ID 虚拟化(NPIV)-
        与多个虚拟端口共享单个物理主机总线适配器(HBA)的光纤通道技术。
    -   GPU 和 vGPU - 用于特定图形或计算工作负载的加速器.些 GPU
        可以直接连接到虚拟机，而某些类型也提供创建共享底层物理硬件的虚拟
        GPU(vGPU)的功能。
    :::
:::
:::
::: section
::: titlepage
# []{#managing-virtual-devices_configuring-and-managing-virtualization.html#managing-virtual-usb-devices_managing-virtual-devices}管理虚拟 USB 设备 {.title}
:::
使用虚拟机(VM)时，您可以访问和控制附加到主机系统的 USB
设备（如闪存驱动器或 Web
相机）。在这种情况下，主机系统会将设备的控制权传递给虚拟机。这也被称为
USB-passthrough。
以下部分提供有关使用命令行的信息：
::: itemizedlist
-   [将 USB
    设备](#managing-virtual-devices_configuring-and-managing-virtualization.html#attaching-usb-devices-to-virtual-machines_managing-virtual-usb-devices "将 USB 设备附加到虚拟机"){.link}附加到虚拟机
-   从虚拟机中[删除 USB
    设备](#managing-virtual-devices_configuring-and-managing-virtualization.html#removing-usb-devices-from-virtual-machines_managing-virtual-usb-devices "从虚拟机中删除 USB 设备"){.link}
:::
::: section
::: titlepage
## []{#managing-virtual-devices_configuring-and-managing-virtualization.html#attaching-usb-devices-to-virtual-machines_managing-virtual-usb-devices}将 USB 设备附加到虚拟机 {.title}
:::
要将 USB 设备附加到虚拟机，您可以在虚拟机 XML 配置文件中包含 USB
设备信息。
::: itemizedlist
**先决条件**
-   确定您要传递给虚拟机的设备已附加到主机。
:::
::: orderedlist
**流程**
1.  找到您要附加到虚拟机的 USB 总线和设备值。
    例如：以下命令显示附加到该主机的 USB
    设备列表。在这个示例中，使用的设备作为设备 005 总线附加到总线 001
    中。
    ``` literallayout
    # lsusb
    [...]
    Bus 001 Device 003: ID 2567:0a2b Intel Corp.
    Bus 001 Device 005: ID 0407:6252 Kingston River 2.0
    [...]
    ```
2.  使用 `virt-xml`{.literal} 实用程序和 `--add-device`{.literal} 参数。
    例如，以下命令将 USB 闪存驱动器附加到 `Library`{.literal} 虚拟机。
    ``` literallayout
    # virt-xml Library --add-device --hostdev 001.005
    Domain 'Library' defined successfully.
    ```
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
要将 USB 设备连接到正在运行的虚拟机，请将 `--update`{.literal}
参数添加到上一命令。
:::
::: itemizedlist
**验证**