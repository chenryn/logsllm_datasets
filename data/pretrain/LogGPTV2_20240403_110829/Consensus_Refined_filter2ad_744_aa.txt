title:Consensus Refined
author:Ognjen Maric and
Christoph Sprenger and
David A. Basin
2015 45th Annual IEEE/IFIP International Conference on Dependable Systems and Networks
2015 45th Annual IEEE/IFIP International Conference on Dependable Systems and Networks
Consensus Reﬁned
Ognjen Mari´c, Christoph Sprenger, and David Basin
Institute of Information Security, Department of Computer Science
ETH Zurich, Switzerland
Abstract—Algorithms for solving the consensus problem are
fundamental to distributed computing. Despite their brevity, their
ability to operate in concurrent, asynchronous, and failure-prone
environments comes at the cost of complex and subtle behaviors.
Accordingly, understanding how they work and proving their cor-
rectness is a non-trivial endeavor where abstraction is immensely
helpful. Moreover, research on consensus has yielded a large
number of algorithms, many of which appear to share common
algorithmic ideas. A natural question is whether and how these
similarities can be distilled and described in a precise, uniﬁed
way. In this work, we combine stepwise reﬁnement and lockstep
models to provide an abstract and uniﬁed view of a sizeable family
of consensus algorithms. Our models provide insights into the
design choices underlying the different algorithms, and classify
them based on those choices. All our results are formalized and
veriﬁed in the theorem prover Isabelle/HOL, yielding precision
and strong correctness guarantees.
I.
INTRODUCTION
Distributed consensus is a fundamental problem in dis-
tributed computing: a ﬁxed set of processes must agree on
a single value from a set of proposed ones. Algorithms that
solve this problem provide building blocks for many higher-
level
tasks, such as distributed leases, group membership,
atomic broadcast (also known as total-order broadcast or
multi-consensus), and so forth. These in turn provide building
blocks for yet higher-level tasks like system replication. In this
paper, however, our focus is on consensus algorithms proper,
rather than their applications (such as Multi-Paxos [23] or
Zab [21]). Namely, we consider consensus algorithms for the
asynchronous message-passing setting with benign link and
process failures.
Although the setting we consider explicitly excludes mali-
cious behavior, the interplay of concurrency, asynchrony, and
failures can still drive the execution of any proposed consensus
algorithm in many different ways. This makes the consensus
problem not only difﬁcult, but even impossible to solve deter-
ministically [15]. Partial synchrony [14] imposes just enough
constraints on the asynchrony to admit solutions, but still
retains the main features of the fully asynchronous model.
Hence the number of possible executions of an algorithm in
this setting is still immense, making the understanding of both
the algorithms and their correctness non-trivial. This under-
standing can be greatly aided by appropriate abstractions that
simplify the algorithms or the setting, making the development
of such abstractions an appealing research topic.
As examples of work on algorithm simpliﬁcation, [5],
[6], [9], [26], [32] all provide more abstract descriptions of
Lamport’s seminal Paxos algorithm [22], [23]. Another line of
work [12], [16] provides an abstraction of the asynchronous
(or partially synchronous) setting for the class of algorithms
operating in communication-closed rounds. For this class, the
asynchronous setting is replaced by what is essentially a syn-
chronous model weakened by message loss (dual to strength-
ening the asynchronous model by failure detectors [33]). As
the resulting models provide the illusion that all the processes
operate in lockstep, we refer to them as lockstep models.
More than 30 years of research on consensus has also
yielded a large collection of consensus algorithms. Many of
them appear to share similar underlying algorithmic ideas,
although their presentation, structure, and details differ. A
natural question is whether their similarities can be distilled
and captured in a uniform and generic way, and this has led to
another substantial body of work [17]–[19], [29], [30], [34],
[35]. In the same vein, one may ask whether the algorithms
can be classiﬁed by some natural criteria.
Approach Taken
Given the situation outlined above, we see a clear need
for (i) abstraction and simpliﬁcation and (ii) uniﬁcation and
classiﬁcation of consensus algorithms, in order to understand
their essence and relationships. Additionally, as the setting they
operate in is complex, it is necessary that both (i) and (ii) are
addressed in a precise and correct manner. We thus add to our
wish list (iii) precision and correctness guarantees.
We address these issues by combining three elements. First,
we describe consensus algorithms using stepwise reﬁnement.
In this method, we derive an algorithm through a sequence
of models. The initial models in the sequence can describe
the algorithm in arbitrarily abstract terms. In our abstractions,
we describe the system using non-local steps that depend
on the states of multiple processes, removing the need for
communication. These abstractions allow us to focus on the
main algorithmic ideas, without getting bogged down in de-
tails, thereby providing simplicity. We then gradually introduce
details in successive, more concrete models that reﬁne the
abstract ones. In order to be implementable in a distributed
setting, the ﬁnal models must use strictly local steps, and
communicate only by message passing. The link between the
abstract and concrete models is precisely described and proved
using reﬁnement relations. Furthermore,
the same abstract
model can be implemented by different algorithms. This results
in a reﬁnement tree of models, where branching corresponds
to different implementations as illustrated in Figure 1. This
tree captures the relationships between the different consensus
algorithms, found at its leaves, providing a natural classiﬁca-
tion of the algorithms. The use of reﬁnement thus addresses
the points (i) and (ii) raised above.
Second, since the distributed algorithms we derive operate
in communication-closed rounds, we employ lockstep models
to describe these algorithms in a synchronous fashion. This
not only simpliﬁes our models of concrete algorithms, it also
978-1-4799-8629-3/15 $31.00 © 2015 IEEE
978-1-4799-8629-3/15 $31.00 © 2015 IEEE
DOI 10.1109/DSN.2015.38
DOI 10.1109/DSN.2015.38
391
391
Voting
2
Same Vote
Observing Quorums
1
3
MRU Vote
OneThirdRule, AT,E
UniformVoting, Ben-Or New Algorithm, Paxos, Chandra-Toueg
Figure 1. The consensus family tree. Boxes contain models of concrete algorithms.
further increases the abstraction level in our initial models. It
allows our non-local steps to not only depend on, but also
change the state of multiple processes. Hence, this choice
further helps with point (i). Yet our results translate to the
asynchronous setting of the real world, thanks to the preser-
vation result established in [11].
Finally, we have formalized [28] all the models we present
in the theorem prover Isabelle/HOL [31], using the Isabelle
formalization of the Heard-Of model by Debrat and Merz [13].
We used Isabelle to prove the desired properties of our mod-
els and establish reﬁnement relations between them without
assuming any ﬁxed bounds on either the number of processes
or rounds. This provides us with strong guarantees about the
precision and correctness of our results, addressing point (iii).
Related Work
The technique of stepwise reﬁnement is well-known in
the distributed systems community, and has already been
successfully applied to consensus algorithms [8], [25], [26].
Lampson’s reﬁnement-based descriptions [26] of the Paxos
algorithm were even used as blueprints for the consensus
portion of Zab [21]. Somewhat surprisingly, the application of
reﬁnement has been limited to variants of single algorithms,
and there appears to be no work that derives entire families of
different algorithms, as we do here.1 Moreover, there is also
no prior work that combines reﬁnement with lockstep models.
The existing work on unifying consensus algorithms [17]–
[19], [29], [30], [34], [35] provides generic algorithms that
can be instantiated with different parameters and primitives.
However, with the exception of [18], these generic algorithms
do not abstract communication away, and thus are signiﬁcantly
more detailed and complicated than our abstract models.
Furthermore, their scope is limited. They each cover at most
one of our three classes of algorithms (i.e., the leaf nodes in
Figure 1) with the exception of [35] and [34], which, when
limited to benign failures, each cover algorithms from two
classes. Another limitation of these generic algorithms is that
they have limited power to explain the relationships between
the different algorithms. The only classiﬁcation of algorithms
is offered in [34]. However, it is more technical and less
focused on design choices than ours. Finally, none of these
works have been fully formalized, and they contain numerous
parts with missing proofs or just proof sketches.
Contributions
We see the contributions of our work as follows. First, in
contrast to previous work, our combined use of stepwise re-
ﬁnement, lockstep models, and formal modeling and reasoning
1Note that van Renesse et al. [36] derive families of replication algorithms
at a higher abstraction layer.
addresses all three of the above desiderata. The reﬁnement
approach provides a natural framework for the abstraction,
uniﬁcation, and classiﬁcation of a variety of algorithms, the
lockstep model additionally increases the abstraction level, and
the formality of our approach provides the desired precision
and correctness guarantees.
Second, our abstract models provide insight into different
classes of consensus algorithms by laying bare the underlying
mechanisms in a clear, simple, and concise way. These models
consist of a single non-deterministic event modeling a round of
the algorithm. The enabling predicates of this event precisely
capture the safety conditions needed to preserve agreement.
Third, the branching points in our reﬁnement tree directly
reﬂect the design choices behind the different types of al-
gorithms. We classify the algorithms (Figure 1) along three
main branches: (1) algorithms that allow multiple values per
round (OneThirdRule [12] and AT,E [4] are representatives),
(2) algorithms that allow only a single value per round and
depend on waiting and observations (Ben-Or’s algorithm [3]
and UniformVoting [12]) and (3) algorithms that allow only a
single value and require no additional information (Paxos [22]
and the ♦S-based algorithm of Chandra and Toueg [10]). For
the benign setting, this development includes more algorithms
and algorithm types than any other one presented in the
literature, testifying to the ﬂexibility of our approach.
Finally, while we focus on existing algorithms, we also
derive a new one. Our development provided insights that
allowed us to afﬁrmatively answer a question raised in [12],
asking whether there exists a leaderless consensus algorithm
that requires no waiting to provide safety, while tolerating up
to N
2 process failures.
Outline: In Section II, we provide background on our mod-
eling languages, reﬁnement, and assumptions about failures
and network behavior. We review the consensus problem in
Section III. Sections IV–VIII, which constitute the main part
of our paper, follow the path traced out by Figure 1; each
section covers a single abstract model, together with a sample
concrete algorithm, where applicable. We conclude in Section
IX, where we also discuss the limitations of our approach and
describe future work.
II. SYSTEM SPECIFICATIONS AND REFINEMENT
We introduce generic event-based system speciﬁcations and
a notion of reﬁnement akin to [1], [2]. We then show how
we specialize them to model distributed systems, and how we
model failures and network behavior.
A. Event-based Systems
All of our speciﬁcations have a semantics in terms of
unlabeled state transition systems T = (S, S0,→), henceforth
392392
simply called systems, where S is a (possibly inﬁnite) set
of states, S0 is a (non-empty) subset of initial states, and
→ ⊆ S × S is a transition relation. We write s → s
(cid:2) for
(cid:2)) ∈ →. For convenience, we specify system
transitions (s, s
states by a record containing the system’s variables and its
transitions by a set of parameterized events. An event
is
speciﬁed by a guard and an action. The guard is a predicate
deﬁning when the event is enabled in a state. The action
describes a relation between the source and the target state,
speciﬁed as a state update. Here is a prototypical event with
a vector of parameters a, a guard G, and an action that
simultaneously updates the state variables x using the update
functions g, one for each variable in x:
Event evt(a):
Guard
G(x, a)
Action
x := g(x, a)
An event evt(a) has a straightforward relational semantics,
denoted by →evt(a). The system’s transition relation → is the
union over all relations induced by the events.
The semantics of a system T is given by its set of traces.
A trace is any ﬁnite sequence of states from S. We sometimes
view traces as partial functions tr : N (cid:2) S, whose domain
dom(tr) is an initial segment of N. The traces of T , written
traces(T ), are those obtained by starting from an initial state
and taking a ﬁnite number of steps based on the enabled events.
B. Properties and Reﬁnement
(cid:2) under the relation R ⊆ S
A property is a set of traces. For example, the agreement
property speciﬁes the traces in which no two processes decide
on different values. A system T satisﬁes a given property φ if
all its traces are included in the property, i.e., traces(T ) ⊆ φ.
Due to their trace semantics, we can also view systems
as properties and relate two systems by relating their sets of
traces. If traces(T2) ⊆ traces(T1), we say that T2 reﬁnes T1
or conversely, that T1 abstracts T2. We call T2 the concrete
system and T1 the abstract system. So far, we assumed that
both the system and the property (or the abstract system)
use the same set of states. We can relax this assumption by
providing a relation between two different sets of states. A
system T with state set S satisﬁes a property φ over state
(cid:2) × S if each of its traces
set S
i.e.,
is an image of some trace in the property under R,
traces(T ) ⊆ R(φ), where R(φ) = {τ | ∃σ ∈ φ. dom(σ) =
dom(τ ) ∧ ∀i ∈ dom(σ). (σ(i), τ (i)) ∈ R}. The meaning of
property satisfaction (or reﬁnement) now also depends on the
relation R. It is easy to see that reﬁnement is transitive: if
T2 reﬁnes T1 under R1, and T3 reﬁnes T2 under R2, then T3
reﬁnes T1 under R2 ◦ R1. Furthermore, if T1 satisﬁes some
property φ, then so do T2 and T3 under the suitable relations.
This allows us to carry out stepwise reﬁnement, producing a
sequence (or a tree) of models. The concrete systems then
the properties of the systems they
immediately satisfy all
reﬁne, under suitable relations.
To prove that T2 reﬁnes T1 under a relation R ⊆ S1 × S2,
we employ the standard technique of forward simulation. This
obliges us to prove two things. First, every initial state t0 ∈ S0
2
393393
of the concrete system has a related abstract state s0 ∈ S0
1 such
that (s0, t0) ∈ R. Second, for every step of the concrete system
T2, that is, any of its events evt2(a), the abstract system can
(cid:2) ∈ S2 such that
take a related step, i.e., for all s ∈ S1 and t, t
(cid:2) ∈ S1 such
(s, t) ∈ R and t →evt2(a) t
that s →1 s
(cid:2)) ∈ R. Often, the concrete event will
, t
reﬁne a particular abstract one, and the second proof obligation
will decompose into two parts: (1) guard strengthening, i.e.,
the concrete guard implies the abstract one and (2) action
reﬁnement, i.e., the updated states are also related by R.
(cid:2), there exists a state s
(cid:2) and (s
(cid:2)
Liveness properties are often conditioned on fairness as-
sumptions, that is, they are not required to hold on all traces
but only on those satisfying the fairness assumptions. Such
conditional properties are not preserved by the notion of
reﬁnement introduced. However, we still need to handle them
in our development. For example, termination of consensus,
meaning that every process eventually decides on a value,