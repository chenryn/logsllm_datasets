### Bottom-Up Trust Establishment and MAC Policy Enforcement

Previous work on bottom-up trust establishment lacked a mechanism to prove trust to remote parties in distributed applications. In our approach, we focus on achieving security guarantees through MAC (Mandatory Access Control) policies, where Taos supported discretionary delegation.

We leverage remote attestation as the foundation for building trust in distributed enforcement. Although significant prior work has been done on remote attestation [26, 35], the complexity of software and policy has made attestations less meaningful than desired on existing systems. For instance, Terra [15] is a VMM-based architecture that provides isolation and includes attestation support. However, today, the Xen hypervisor system [5] with Trusted Platform Module (TPM) support [9] enables the solution we present here to enforce mandatory security policies between VMs and establish trust in the VM management environment, which are not addressed by Terra.

### Challenges

The primary challenges in this work are to determine how to establish trust in a set of machines participating in a coalition. Specifically, we must be able to attest to the enforcement mechanisms of each machine and the consistency of MAC policy enforcement throughout the coalition. This ensures that each system has a trusted mechanism to enforce MAC requirements, that these requirements are met at each site in the coalition, and that there is consistent labeling of objects across the coalition systems.

### System Architecture

In this section, we describe the system architecture for Shamon and examine its ability to achieve the guarantees of a host reference monitor across a distributed environment. We start with a high-level overview of our architecture (Section 3.1), followed by the process of extending Shamon to establish a bridge between two systems (Section 3.2).

#### 3.1. Architecture Overview

Our architecture aims to enable the creation of distributed coalitions of VMs, as shown in Figure 1. Sailer et al. define a coalition as a set of one or more user VMs that share a common policy and run on a single hypervisor system with MAC [30]. We extend this definition to include VMs on physically separate hypervisor systems that share a common MAC policy. The resulting distributed coalition has a MAC policy enforced by Shamon.

Shamon builds trust in layers, starting from trusted hardware like the Trusted Computing Group’s Trusted Platform Module (TPM). After the BIOS and boot firmware, the lowest software layer is a VMM capable of enforcing a coarse-grained (hence low complexity) MAC policy regarding information flows between isolated VMs. The VMM codebase is substantially smaller than that of a host OS (tens of thousands of lines of code, as opposed to millions, using Xen and Linux as examples), making it closer to practical formal verification for assurance. Note that while we have not formally verified the implementation described later in the paper, our architecture is designed to make the most security-critical components as small as possible, thereby alleviating security-relevant dependencies on complex components.

A MAC VM and MAC policy attestation complete the establishment of Shamon trust. The complexity required of these components can be significantly lower than that of host OS-only MAC. The resulting system is shown conceptually in Figure 2; the entire distributed system functions as if there is one reference monitor enforcing the necessary policy on all members of the distributed system. To build a reference monitor across machines, we must enable verification of its tamperproof protections and its mediation abilities, and ensure that the correctness of its implementation and MAC policies is practical.

Figure 3 summarizes the primary concepts in our architecture:
1. **Hypervisors** are VMMs that run on a single physical machine and enforce the common MAC policy for VM-to-VM communications on that machine.
2. **MAC VMs** enforce the common MAC policy on inter-VM communication across machines.
3. **Secure, MAC-labeled tunnels** provide integrity-protected communication that is also labeled for MAC policy enforcement.
4. **User VMs** implement application functionality.
5. **Coalitions** consist of a set of user VMs implementing a distributed application.
6. **Shamon** consists of the combination of reference monitors for all machines running user VMs in a single coalition.
7. **Common MAC policies** define MAC policies for a single Shamon.

#### Hypervisors and MAC VMs

The hypervisor and MAC VM comprise the reference monitoring components on a single physical machine. The hypervisor controls user VM communication local to that machine, and the MAC VM controls inter-machine communications.

#### MAC-labeled Tunnels

Inter-machine communication is implemented via secure, MAC-labeled communication tunnels. Shamon constructs secure communication tunnels between physical machines to protect the secrecy and integrity of communications over the untrusted network between them. The tunnel is labeled such that both endpoint reference monitors in Shamon can control which user VMs can use which tunnels.

#### User VMs and Coalitions

User VMs represent application processing units. Typically, a user VM will belong to one coalition and inherit its label from that coalition. For example, a set of user VMs that may communicate among themselves but are isolated from all other user VMs would form a coalition. Each user VM runs under the same MAC label, and all have read-write access to user VMs of that label. Other access control policies are possible within a coalition. For instance, the coalition user VMs can be labeled with secrecy access classes where interaction is controlled by the Bell-LaPadula policy [8].

Special user VMs may be trusted to belong to multiple coalitions, such as the MAC VM that is accessible to all coalitions. These have a distinct label that conveys rights in the common MAC policy to access multiple coalitions.

#### Shamon

A coalition’s reference monitor is a Shamon. It consists of the union of the reference monitors for the physical machines upon which the coalition’s user VMs run (see Figure 2).

#### Common MAC Policies

The common MAC policy of a coalition is the union of the MAC policies of the reference monitors in a coalition’s Shamon. The common MAC policy must ensure MAC properties (e.g., isolation) of its coalition in the context of other user VMs from other coalitions that may also be present on the Shamon’s physical machines.

The combination of the above concepts forms a shared reference monitor system. The architecture must enable composing and extending Shamons as new machines join, an act we call bridging. The key step is the establishment of trust in the resultant Shamon.

### 3.2. Setting up a Bridge

When a user VM of a system joins a coalition, its reference monitor (components of the VMM and MAC VM on the joining system) bridges with the coalition’s Shamon. In our implementation, a reference monitor that is already a coalition member serves as a representative for the coalition. The following steps are necessary to complete the bridging process:

1. **Establish common MAC policy**: The new reference monitor (JRM) needs to obtain the coalition’s configuration: its MAC, secure communication, and attestation policies. Using the attestation policies, the JRM and Shamon mutually verify that their policy-enforcement (tamper-responding and mediating) abilities are sufficient for the bridging.
2. **Confirm tamper-responding and mediating abilities**: An attestation policy is used to mutually verify the JRM and Shamon's tamper-responding and mediation abilities.
3. **Initialize user VM**: The code to be executed inside the user VM is assigned a MAC label based on attestation of the code (e.g., green).
4. **Secure, labeled communication**: A secure, MAC-labeled tunnel for the bridge is constructed in the MAC VM. The secure communication policy is selected when the user VM attempts to communicate with a coalition member and determines the secrecy and integrity requirements of the communication (e.g., AES encryption with keyed-hash message authentication code integrity protection) as well as the MAC label for the tunnel.

Each of the four stages of the bridging process is now described in detail.

#### Stage 1: Establish Common MAC Policy

A new reference monitor joining the coalition, the JRM, will affect MAC policy in two ways:
1. The JRM will add the coalition label and its rights to its local MAC policy.
2. The Shamon common MAC policy will become the union of the JRM’s and former Shamon’s MAC policies.

First, the JRM must verify that the resultant coalition policy is compatible with its current policy (e.g., does not violate isolation guarantees of its other local coalitions). Second, the resultant Shamon policy now includes that of the JRM to ensure that overall coalition security goals can be enforced.

We present two different ways that the JRM can obtain a coalition’s common MAC policy:
1. The JRM may have its own MAC policy and a means for translating coalition MAC policy to its labels. This is necessary because the semantics of a particular label (e.g., green) in the JRM’s existing configuration may map to those of another label (e.g., blue) in the distributed coalition. Using simple name translation, coalitions may easily interact, but effort is required to predefine a universal label semantics and syntax into which coalition labels of the local system can be translated.
2. The distributed reference monitor can push a configuration to the JRM and have the JRM enforce coalition-specific policies. In this case, the labels and flows implied by the MAC policy are defined by the coalition’s Shamon. A problem here is that two coalitions may use the same label (e.g., blue) to mean different things. The coalitions will have to determine which labels are internal to the coalition (i.e., isolated) and which may have information flows (i.e., the labels are global or known to other specific coalitions). Our prototype uses the first approach, so the MAC policy is fixed at the hypervisor level, and coalition policies are mapped to it.

Further, the coalitions must ensure that objects are labeled consistently across the coalition. If objects are labeled blue on one system but green on another system with the same security semantics, problems can ensue. At present, we download user VMs and objects for the coalition at join time, so labeling is determined consistently by the coalition.

#### Stage 2: Confirm Tamper-Responding and Mediating Abilities

An attestation policy is used to mutually verify the JRM and Shamon's tamper-responding and mediation abilities.

#### Stage 3: Initialize User VM

The code to be executed inside the user VM is assigned a MAC label based on attestation of the code (e.g., green). In the context of the BOINC example, the BOINC server may want an attestation that the BOINC client was started as expected. In that case, attestation may be applied at the user VM level to prove to the BOINC server which code was used. An additional optimization is to have the BOINC server provide the code for the entire user VM (i.e., the OS image as well as the BOINC client software).

#### Stage 4: Secure, Labeled Communication

We construct a secure, MAC-labeled tunnel for the bridge in the MAC VM. The secure communication policy is selected when the user VM attempts to communicate with a coalition member and determines the secrecy and integrity requirements of the communication (e.g., AES encryption with keyed-hash message authentication code integrity protection) as well as the MAC label for the tunnel. The MAC label determines which endpoint VMs have access to the tunnel. For example, a green user VM may have access to green tunnels and only to green tunnels, so an isolated coalition can be constructed. Our prototype uses the MAC-labeled Linux IPsec implementation in the MAC VM to construct and control access to tunnels for user VMs.

### 4. Implementation

We implemented a Shamon for volunteer distributed computation according to the design presented in the previous section. This section describes our implementation in detail. It starts with a description of the hardware and software configuration of our prototype. It continues with descriptions of how we implemented secure, MAC-labeled tunnels for network communication; type mapping and MAC enforcement for the reference monitor; and integrity measurement for attestation.

#### 4.1. Machine Configuration

We configured two hypervisor systems running Xen [5] with sHype [30], shype1 and shype2. shype1 runs one or more BOINC clients, each in its own user VM. shype2 runs a dedicated BOINC [2] server inside a non-privileged user VM. The supervisor domain in each Xen system runs Fedora Core 4 with SELinux [34] configured.