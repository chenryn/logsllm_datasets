bottom-up, but this work lacked a mechanism to prove trust
to remote parties in the distributed application. Further, we
also focus on achieving security guarantees via MAC poli-
cies, where Taos supported discretionary delegation.
We leverage remote attestation as a basis for building
trust in distributed enforcement. While much prior work
has been done on remote attestation [26, 35], complex-
ity of software and policy have rendered attestations less
meaningful than desired on existing systems. For exam-
ple, Terra [15] is a VMM-based architecture for provid-
ing isolation and includes attestation support. Today, the
Xen hypervisor system [5] with Trusted Platform Module
(TPM) support [9], enables the solution we present here to
enforce mandatory security policies between VMs and to
establish trust into the VM management environment, both
of which are not addressed by Terra.
The challenges in this work are to determine how to es-
tablish trust in a set of machines that participate in a coali-
tion. In particular, we must be able to attest to the enforce-
ment mechanisms of each machine and the consistency of
MAC policy enforcement throughout the coalition. This
will ensure that each system has a trusted mechanism to
enforce MAC requirements, that the MAC requirements
are met at each site in the coalition, and that there is a con-
sistent labeling of objects across the coalition systems.
3. System Architecture
In this section, we describe the system architecture for
a Shamon and examine its ability to achieve the guarantees
of a host reference monitor across a distributed environ-
ment. We begin by providing a high-level overview of our
architecture (Section 3.1). Then, the process of extending
the Shamon is presented, thereby establishing a bridge be-
tween two systems (Section 3.2).
3.1. Architecture Overview
The goal of our architecture is to enable the creation of
distributed coalitions of VMs, as shown earlier in Figure 1.
Sailer et al. deﬁne a coalition as a set of one or more user
VMs that share a common policy and are running on a sin-
gle hypervisor system with MAC [30]. We extend the deﬁ-
nition of a coalition to include VMs on physically separate
hypervisor systems which share a common MAC policy.
The resulting distributed coalition has a MAC policy en-
forced by a Shamon.
We have designed a Shamon that builds trust in layers,
bottom-up, starting from trusted hardware like the Trusted
Computing Group’s Trusted Platform Module (TPM). Af-
ter the BIOS and boot ﬁrmware, the bottom-most software
layer is a VMM which is capable of enforcing a coarse-
grained (hence low complexity) MAC policy regarding in-
formation ﬂows between isolated VMs. The VMM code-
base is substantially smaller than that of a host OS (tens of
thousands of lines of code, as opposed to millions, using
Xen and Linux as examples), bringing us closer to practi-
cal formal veriﬁcation for assurance. Note that we have not
formally veriﬁed the implementation that we describe later
in the paper, but that our architecture lends itself to making
the most security-critical components as small as possible,
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:30:16 UTC from IEEE Xplore.  Restrictions apply. 
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006MAC System
MAC System
...
VM
VM
VM
VM
Trusted(cid:13)(cid:13)
Computing(cid:13)(cid:13)
(cid:13)
Base(cid:13) (cid:13)
(cid:13)
Trusted(cid:13)
Ref
(cid:13)
(cid:13)
Shamon for all VMs
(cid:13)
Computing(cid:13)
(cid:13)
M o n(cid:13)
(cid:13)
(cid:13)
Base(cid:13)
Ref
(cid:13)
M o n(cid:13)
Figure 2. The Shamon approach results in a con-
ceptually singular reference monitor which is shared
across all machines in the distributed system. Indi-
vidual machines have assurance that other machines
are enforcing the desired MAC policy.
thereby helping to alleviate security-relevant dependencies
on components of excessive complexity. A MAC VM and
MAC policy attestation complete the establishment of Sha-
mon trust. The complexity required of these components
can be a signiﬁcant improvement over host OS-only MAC.
The resulting system is shown conceptually in Figure 2;
the entire distributed system functions as if there is one
reference monitor which enforces the necessary policy on
all members of the distributed system. In order to build
a reference monitor across machines, we must enable ver-
iﬁcation of its tamperproof protections and its mediation
abilities, and that veriﬁcation of the correctness of its im-
plementation and MAC policies is practical.
Figure 3 summarizes the primary concepts in our archi-
tecture: (1) hypervisors are VMMs that run on a single
physical machine and enforce the common MAC policy
for VM-to-VM communications on that machine; (2) MAC
VMs enforce the common MAC policy on inter-VM com-
munication across machines; and (3) secure, MAC-labeled
tunnels provide integrity protected communication which
is also labeled for MAC policy enforcement; (4) user VMs
implement application function; (5) coalitions consist of
a set of user VMs implementing a distributed application;
(6) a Shamon consisting of the combination of reference
monitors for all machines running user VMs in a single
coalition; and (7) common MAC policies deﬁne MAC poli-
cies for a single Shamon.
Hypervisors and MAC VMs. The hypervisor and MAC
VM comprise the reference monitoring components on a
single physical machine. The hypervisor controls user VM
communication local to that machine, and the MAC VM
controls inter-machine communications.
MAC-labeled tunnels.
Inter-machine communication is
implemented via secure, MAC-labeled communication
tunnels. The Shamon constructs secure communication
tunnels between physical machines to protect the secrecy
and integrity of communications over the untrusted net-
work between them. Further, the tunnel is labeled, such
that both endpoint reference monitors in the Shamon can
Shared Reference Monitor
MAC VM
USER(cid:3)
  VM
Common 
MAC 
Policy
Secure MAC-
Labeled Tunnel
MAC VM
USER(cid:3)
  VM
Hypervisor with MAC
Physical Machine
Hypervisor with MAC
Physical Machine
Figure 3. Example of a Shamon.
control which user VMs can use which tunnels.
User VMs and coalitions. User VMs represent applica-
tion processing units. Typically, a user VM will belong
to one coalition and inherit its label from that coalition.
For example, a set of user VMs that may communicate
among themselves, but are isolated from all other user
VMs, would form a coalition. Each user VM runs un-
der the same MAC label, and all have read-write access
to user VMs of that label. We note that other access con-
trol policies are possible within a coalition.
In another
case, the coalition user VMs can be labeled with secrecy
access classes where interaction is controlled by the Bell-
LaPadula policy [8].
Special user VMs may be trusted to belong to multiple
coalitions, such as the MAC VM that is accessible to all
coalitions. These have a distinct label that conveys rights
in the common MAC policy to access multiple coalitions.
Shamon. A coalition’s reference monitor is a Shamon.
It consists of the union of the reference monitors for the
physical machines upon which coalition’s user VMs run
(see Figure 2).
Common MAC policies. The common MAC policy of
a coalition is the union of the MAC policies of the refer-
ence monitors in a coalition’s Shamon. The common MAC
policy must ensure MAC properties (e.g., isolation) of its
coalition in the context of the other user VMs from other
coalitions that may also be present on the Shamon’s phys-
ical machines.
The combination of the above concepts forms a shared
reference monitor system. The architecture must enable
composing and extending Shamons as new machines join,
an act that we call bridging. The key step is the establish-
ment of trust in the resultant Shamon.
3.2. Setting up a Bridge
When a user VM of a system joins a coalition, its ref-
erence monitor (components of the VMM and MAC VM
on the joining system) bridges with the coalition’s Sha-
mon. In our implementation, a reference monitor that is
already a coalition member serves as a representative for
the coalition. The following steps are necessary to com-
plete the bridging process: (1) the new reference moni-
tor needs to obtain the coalition’s conﬁguration: its MAC,
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:30:16 UTC from IEEE Xplore.  Restrictions apply. 
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006secure communication, and attestation policies; (2) using
the attestation policies, the joining reference monitor and
the Shamon mutually verify that their policy-enforcement
(tamper-responding and mediating) abilities are sufﬁcient
for the bridging; (3) the new user VM is initialized; and
(4) the secure, MAC-labeled network communication of
the bridge is enabled. Each of the four stages of the bridg-
ing process are now described in detail.
ities. We require attestations of the hypervisor and MAC
VM code, as well as the MAC policy each system has used.
This identiﬁes the initial state of the system, its isolation
mechanism, its reference monitoring mechanism, and the
security goals that will be enforced via the MAC policy.
Our prototype, which we describe in Section 4, attests to
the Xen hypervisor code, MAC VM code, and the MAC
policy.
Stage 1: Establish common MAC policy. A new ref-
erence monitor joining the coalition, the joining reference
monitor (JRM), will affect MAC policy in two ways: (1)
the JRM will add the coalition label and its rights to its lo-
cal MAC policy, and (2) the Shamon common MAC policy
will become the union of the JRM’s and former Shamon’s
MAC policies. First, the JRM must verify that the resul-
tant coalition policy is compatible with its current policy
(e.g., does not violate isolation guarantees of its other lo-
cal coalitions). Second, the resultant Shamon policy now
includes that of the JRM to ensure that overall coalition
security goals can be enforced.
We present two different ways that the JRM can obtain a
coalition’s common MAC policy. First, the JRM may have
its own MAC policy and a means for translating coalition
MAC policy to its labels. This is necessary because the
semantics of a particular label (e.g., green) in the JRM’s
existing conﬁguration may map to those of another label
(e.g., blue) in the distributed coalition. In a coalition that
uses a single label, the label name may be translated to
one the JRM understands. Using simple name translation,
coalitions may easily interact, but effort is required to pre-
deﬁne a universal label semantics and syntax into which
coalition labels of the local system can be translated.
A second option is to have the distributed reference
monitor push a conﬁguration to the JRM and have the
JRM enforce coalition-speciﬁc policies. In this case, the
labels and ﬂows implied by the MAC policy are deﬁned by
the coalition’s Shamon. A problem here is that two coali-
tions may use the same label (e.g., blue) to mean different
things. The coalitions will have to determine which la-
bels are internal to the coalition (i.e., isolated) and which
may have information ﬂows (i.e., the labels are global or
known to other speciﬁc coalitions). Our prototype uses the
ﬁrst approach, so the MAC policy is ﬁxed at the hypervisor
level and coalition policies are mapped to it.
Further, the coalitions must ensure that objects are la-
beled consistently across the coalition. If objects are la-
beled blue on one system, but objects with same security
semantics are labeled green on another system, then prob-
lems can ensue. At present, we download user VMs and
objects for the coalition at join time, so labeling is deter-
mined consistently by the coalition.
Stage 2: Conﬁrm tamper-responding and mediating
abilities. An attestation policy is used to mutually verify
JRM and Shamon tamper-responding and mediation abil-
Stage 3: Initialize user VM. The code to be executed
inside the user VM is assigned a MAC label based on at-
testation of the code (e.g., green).
In the context of the
BOINC example, the BOINC server may want an attesta-
tion that the BOINC client was started as expected. In that
case, attestation may be applied at the user VM level to
prove to the BOINC server which code was used. An ad-
ditional optimization is to have the BOINC server provide
the code for the entire user VM (i.e., the OS image as well
as the BOINC client software).
Stage 4: Secure, labeled communication. We construct
a secure, MAC-labeled tunnel for the bridge in the MAC
VM. The secure communication policy is selected when
the user VM attempts to communicate with a coalition
member and determines the secrecy and integrity require-
ments of the communication (e.g., AES encryption with
keyed-hash message authentication code integrity protec-
tion) as well as the MAC label for the tunnel. The MAC
label determines which endpoint VMs have access to the
tunnel. For example, a green user VM may have access
to green tunnels and only to green tunnels, so an isolated
coalition can be constructed. Our prototype uses the MAC-
labeled Linux IPsec implementation in the MAC VM to
construct and control access to tunnels for user VMs.
4. Implementation
We implemented a Shamon for volunteer distributed
computation according to the design presented in the pre-
vious section. This section describes our implementation
in detail. It starts with a description of the hardware and
software conﬁguration of our prototype. It continues with
descriptions of how we implemented secure, MAC-labeled
tunnels for network communication; type mapping and
MAC enforcement for the reference monitor; and integrity
measurement for attestation.
4.1. Machine Conﬁguration
We conﬁgured two hypervisor systems running Xen [5]
with sHype [30], shype1 and shype2. shype1 runs
one or more BOINC clients, each in its own user VM.
shype2 runs a dedicated BOINC [2] server inside a non-
privileged user VM. The supervisor domain in each Xen
system runs Fedora Core 4 with SELinux [34] conﬁgured