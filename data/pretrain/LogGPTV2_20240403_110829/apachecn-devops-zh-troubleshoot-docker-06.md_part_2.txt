    $ apt-get install puppet-common
    Reading package lists... Done
    Building dependency tree
    Reading state information... Done
    ...
    The following extra packages will be installed:
    Unpacking puppet-common (3.4.3-1ubuntu1.1) ...
    Selecting previously unselected package ruby-rgen.
    Preparing to unpack .../ruby-rgen_0.6.6-1_all.deb ...
    ...
    ```
2.  安装 Puppet 模块后，`garethr-docker`模块可以安装，如图所示:
    ```
    $ puppet module install garethr-docker
    Notice: Preparing to install into /etc/puppet/modules ...
    Notice: Downloading from https://forge.puppetlabs.com ...
    Notice: Installing -- do not interrupt ...
    /etc/puppet/modules
            |__ garethr-docker (v5.3.0)
     |__ puppetlabs-apt (v2.2.2)
     |__ puppetlabs-stdlib (v4.12.0)
     |__ stahnma-epel (v1.2.2)
    ```
3.  我们将创建一个样例 hello world 应用，它将使用 Puppet:
    ```
     $ nano sample.pp 
            include 'docker' 
            docker::image { 'ubuntu': 
              image_tag => 'precise' 
            } 
            docker::run { 'helloworld': 
              image => 'ubuntu', 
              command => '/bin/sh -c "while true; do echo hello world; sleep 1; 
                         done"',  
            } 
    ```
    进行部署
4.  创建文件后，我们应用(运行)它:
    ```
     $ puppet apply sample.pp
     Warning: Config file /etc/puppet/hiera.yaml not found, using Hiera 
            defaults 
            Warning: Scope(Apt::Source[docker]): $include_src is deprecated and 
            will be removed in the next major release, please use $include => { 
            'src' => false } instead 
            ... 
            Notice: /Stage[main]/Main/Docker::Run[helloworld]/Service[docker-
            helloworld]/ensure: 
            ensure changed 'stopped' to 'running' 
            Notice: Finished catalog run in 0.80 seconds 
            Post installation it can be listed as running container: 
            $ docker ps 
            CONTAINER ID        IMAGE               COMMAND 
            CREATED             STATUS              PORTS               NAMES   
            bd73536c7f64        ubuntu:trusty       "/bin/sh -c 'while tr"   5 
            seconds ago       Up 5 seconds        helloworld
    ```
5.  我们可以将它附加到容器上，并看到输出:
    ```
    $ docker attach bd7
    hello world
    hello world
    hello world
    hello world
    ```
如前所述，容器可以跨多个主机部署，整个集群可以在单个 Puppet 配置文件的帮助下创建。
## 故障排除提示
如果即使在 Puppet `apply`命令成功运行后也无法列出 Docker 映像，请检查语法以及示例文件中是否有正确的映像名称。
# 可转换
Ansible 是一个工作流编排工具，在一个易于使用的平台的帮助下提供配置管理、资源调配和应用部署。Ansible 的一些强大功能如下:
*   **供应**:应用是在不同的环境中开发和部署的。它可以在本地或云上的裸机服务器、虚拟机或 Docker 容器上。借助 Ansible 塔式服务器和行动手册，Ansible 可以帮助简化资源调配步骤。
*   **配置管理**:保存通用的配置文件是 Ansible 的主要用例之一，有助于在所需的环境中进行管理和部署。
*   **应用部署** : Ansible 有助于管理应用从部署到生产的整个生命周期。
*   **持续交付**:管理持续交付管道需要各个团队的资源。这无法通过简单的平台来实现，因此，Ansible 行动手册在应用的整个生命周期中部署和管理应用方面发挥着至关重要的作用。
*   **安全性和合规性**:通过将各种安全策略集成为自动化流程的一部分，而不是事后才想到的流程或稍后将其合并，安全性可以成为部署阶段不可或缺的一部分。
*   **编排**:如前所述，Ansible 可以定义管理多个配置、与它们交互以及管理部署脚本的各个部分的方式。
## 用 Ansible 实现 Docker 自动化
Ansible 还提供了一种自动化 Docker 容器的方法；它使我们能够实现 Docker 容器构建的通道化和操作化，并自动完成目前大部分由人工处理的过程。Ansible 为编排 Docker 容器提供了以下模块:
*   **Docker_service**: The existing Docker compose files can be used to orchestrate containers on a single Docker daemon or swarm with the help of the Docker service part of Ansible. The Docker compose file has the same syntax as the Ansible playbook, as both of them are **Yaml** files and the syntax is almost the same. Ansible is also written in Python, and the Docker module uses the exact docker-py API client that docker compose uses internally.
    这里有一个简单的 Docker 组成文件:
    ```
            wordpress:
            image: wordpress
            links:
               - db:mysql
            ports:
               - 8080:80
            db:
            image: mariadb
            environment:
                  MYSQL_ROOT_PASSWORD: sample
    ```
    前面 Docker 编写文件的可翻译剧本看起来类似:
    ```
            # tasks file for ansible-dockerized-wordpress
            - name: "Launching DB container"
             docker:
               name: db
               image: mariadb
               env:
                 MYSQL_ROOT_PASSWORD: esample
            - name: "Launching wordpress container"
             docker:
               name: wordpress
               image: wordpress
               links:
               - db:mysql
               ports: 
               - 8081:80
    ```
*   **docker_container** :这通过提供启动、停止、创建和销毁 docker 容器的能力来管理 Docker 容器的生命周期。
*   **docker_image** :这为管理 docker 容器的映像提供了帮助，包括构建、推送、标记和移除 Docker 映像等命令。
*   **docker_login** :这将通过 docker 集线器或任何 Docker 注册表进行身份验证，并提供从注册表推送和拉出 Docker 映像的功能。
## 可运输容器
Ansible Container 是一个仅使用 Ansible 行动手册来编排和构建 Docker 映像的工具。通过使用 pip 安装创建`virtualenv`，可通过以下方式安装 Ansible Container:
```
$ virtualenv ansible-container
New python executable in /Users/vkohli/ansible-container/bin/python
Installing setuptools, pip, wheel...done.
vkohli-m01:~ vkohli$ source ansible-container/bin/activate
(ansible-container) vkohli-m01:~ vkohli$ pip install ansible-container
Collecting ansible-container
 Using cached ansible-container-0.1.0.tar.gz
Collecting docker-compose==1.7.0 (from ansible-container)
 Downloading docker-compose-1.7.0.tar.gz (141kB)
 100% |=============================| 143kB 1.1MB/s 
Collecting docker-py==1.8.0 (from ansible-container)
...
 Downloading docker_py-1.8.0-py2.py3-none-any.whl (41kB)
Collecting cached-property=1.2.0 (from docker-compose==1.7.0->ansible-
     container)
```
## 故障排除提示
如果您在安装如上所示的 Ansible Container 时遇到问题，可以通过从 GitHub 下载源代码来完成安装:
```
$ git clone https://github.com/ansible/ansible-container.git
Cloning into 'ansible-container'...
remote: Counting objects: 2032, done.
remote: Total 2032 (delta 0), reused 0 (delta 0), pack-reused 2032
Receiving objects: 100% (2032/2032), 725.29 KiB | 124.00 KiB/s, done.
Resolving deltas: 100% (1277/1277), done.
Checking connectivity... done.
$ cd ansible-container/
$ ls
AUTHORS      container        docs     EXAMPLES.md  LICENSE
README.md         setup.py  update-authors.py
codecov.yml  CONTRIBUTORS.md  example  INSTALL.md   MANIFEST.in
requirements.txt  test
$ sudo python setup.py install
running install
running bdist_egg
running egg_info
creating ansible_container.egg-info
writing requirements to ansible_container.egg-info/requires.txt
```
可移植容器有以下命令可以开始:
*   **ansible_container init** :这个命令为 ansible 文件创建一个目录来开始:
    ```
    $ ansible-container init
    Ansible Container initialized.
    $ cd ansible
    $ ls
    container.yml    main.yml    requirements.tx
    ```
*   **可移植容器构建**:这将从可移植目录中的可移植行动手册创建映像
*   **可转换容器运行**:这将启动`container.yml`文件中定义的容器
*   **可移植容器推送**:根据用户的选择，将项目的映像推送至私有或公共存储库
*   **可移植容器运送工具**:这将导出必要的行动手册和角色，以将容器部署到受支持的云提供商
如 GitHub 的例子所示，可以在`container.yml`文件中以如下方式定义 Django 服务:
```
    version: "1"
    services:
      django:
        image: centos:7
        expose:
          - "8080"
        working_dir: '/django'
```
# 厨师
厨师有一些重要的组成部分，如烹饪书和食谱。烹饪书定义了一个场景，包含了一切；第一个是菜谱，这是一个组织中的基本配置元素，它是用 Ruby 语言编写的。它主要是资源定义的使用模式的集合。烹饪书还包含属性值、文件分发和模板。Chef 允许以可版本化、可测试和可重复的方式管理 Docker 容器。它为您提供了为基于容器的开发构建高效工作流和管理发布管道的能力。厨师交付允许您自动化和使用可扩展的工作流来测试、开发和发布 Docker 容器。
Docker 食谱可在 GitHub([https://github.com/chef-cookbooks/docker](https://github.com/chef-cookbooks/docker))上获得，并提供在食谱中使用的定制资源。它提供了各种选项，例如:
*   `docker_service`:这些是`docker_installation`和`docker_service`经理使用的复合资源
*   `docker_image`:这涉及到从存储库中提取 Docker 映像
*   `docker_container`:这处理所有的 Docker 容器操作
*   `docker_registry`:处理所有 Docker 注册表操作
*   `docker_volume`:管理 Docker 容器的所有卷相关操作
以下是一个示例厨师 Docker 食谱，可用于参考使用厨师食谱部署容器:
```
    # Pull latest nginx image
    docker_image 'nginx' do
      tag 'latest'
      action :pull
      notifies :redeploy, 'docker_container[sample_nginx]'
    end
    # Run container by exposing the ports
    docker_container 'sample_nginx' do
      repo 'nginx'
      tag 'latest'
      port '80:80'
      host_name 'www'
      domain_name 'computers.biz'
      env 'FOO=bar'
      volumes [ '/some/local/files/:/etc/nginx/conf.d' ]
    end
```
# 总结
在本章中，我们首先深入探讨了特权容器，它可以访问所有主机设备以及超级特权容器，它展示了容器管理运行后台服务的能力，后台服务可以用来运行 Docker 容器中的服务来管理底层主机。然后，我们研究了关键的编排工具 Puppet，以及它如何在`garethr-docker` GitHub 项目的帮助下处理容器管理。我们还研究了 Ansible 和 Chef，它们为 Puppet 提供了类似的功能来大规模管理 Docker 容器。在下一章中，我们将探索 Docker 网络栈。