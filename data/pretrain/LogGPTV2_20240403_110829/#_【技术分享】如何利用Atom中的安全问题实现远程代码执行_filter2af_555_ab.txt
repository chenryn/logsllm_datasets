    ./Resources/app/apm/node_modules/mute-stream/coverage/lcov-report/index.html
    ./Resources/app/apm/node_modules/mute-stream/coverage/lcov-report/__root__/index.html
    ./Resources/app/apm/node_modules/mute-stream/coverage/lcov-report/__root__/mute.js.html
    ./Resources/app/apm/node_modules/clone/test-apart-ctx.html
    ./Resources/app/apm/node_modules/clone/test.html
    ./Resources/app/apm/node_modules/colors/example.html
    ./Resources/app/apm/node_modules/npm/node_modules/request/node_modules/http-signature/node_modules/sshpk/node_modules/jsbn/example.html
    ./Resources/app/apm/node_modules/jsbn/example.html
现在，你就可以使用[静态分析技术](https://statuscode.ch/2015/05/static-javascript-analysis-with-burp/)来分析这些HTML文件了，不过你也可以进行手动分析。由于工作量不大，所以我选择进行手动分析，而文件/Applications/Atom.app/Contents/Resources/app/apm/node_modules/clone/test-apart-ctx.html看起来似乎很有意思：
        Clone Test-Suite (Browser)
在document.location.search调用了eval()，而Atom的内容安全策略允许使用eval语句，因此我们只需要使用类似下面的这种语句就能够触发一个对话弹窗：
    file:///Applications/Atom.app/Contents/Resources/app/apm/node_modules/clone/test-apart-ctx.html?foo&alert(1)
实际上，我们只需要下面这种Markdown文档就能够执行任意JavaScript代码了：
**  
**
**执行任意本地代码**
正如我们之前所提到的，在一个Electron应用中执行恶意JavaScript代码也就意味着实现本地代码执行。在我们的分析场景中，最简单的实现方法就是访问window.top对象，然后使用NodeJS的require函数来访问child_process模块。下面给出的JavaScript代码将能够打开macOS的计算器程序：
刚才的漏洞利用代码经过URL编码后，形式如下：
打开恶意Markdown文档之后，Calculator.app将会运行：
**  
**
**远程实现所有操作**
虽然我们刚才介绍的方法可以让Atom中的这些安全问题更加容易被攻击者所利用，但是它仍然需要目标用户手动打开攻击者所提供的恶意Markdown文档。不过需要注意的是，Atom能够呈现Markdown文档内容的地方可不止这一个。
通过使用grep搜索了Atom的源代码之后，我们发现其实还有一个模块能够解析Markdown文件，即Atom设置：[atom/settings-view](https://github.com/atom/settings-view/)。实际上，这个模块所采用的数据清洗方法也同样存在[安全问题](https://github.com/atom/settings-view/blob/f0e5e1a23dc61b5bda1f40045c4b365e8a68142f/lib/package-readme-view.js)：
    const ATTRIBUTES_TO_REMOVE = [
      'onabort',
      'onblur',
      'onchange',
      'onclick',
      'ondbclick',
      'onerror',
      'onfocus',
      'onkeydown',
      'onkeypress',
      'onkeyup',
      'onload',
      'onmousedown',
      'onmousemove',
      'onmouseover',
      'onmouseout',
      'onmouseup',
      'onreset',
      'onresize',
      'onscroll',
      'onselect',
      'onsubmit',
      'onunload'
    ]
    function sanitize (html) {
      const temporaryContainer = document.createElement('div')
      temporaryContainer.innerHTML = html
      for (const script of temporaryContainer.querySelectorAll('script')) {
        script.remove()
      }
      for (const element of temporaryContainer.querySelectorAll('*')) {
        for (const attribute of ATTRIBUTES_TO_REMOVE) {
          element.removeAttribute(attribute)
        }
      }
      for (const checkbox of temporaryContainer.querySelectorAll('input[type="checkbox"]')) {
        checkbox.setAttribute('disabled', true)
      }
      return temporaryContainer.innerHTML
    }
实际上，Markdown的解析器同样会受到这些安全问题的影响，而且受影响程度也比较严重。
Atom还支持所谓的第三方“Packages”（包），这些代码包基本上都是社区提供的，可以从[atom.io/packages](https://atom.io/packages)获取。而这些包能够以Markdown格式定义README文档，而文档的内容将会在Atom设置窗口中呈现给用户。
因此，恶意攻击者只需要注册一大堆恶意包（包名可以跟现有的第三方包名类似），只要目标用户点击了这个包名（无需进行安装），那么嵌入在README文档中的恶意代码就能够被触发并执行。
**  
**
**GitHub如何修复这个问题？**
我们在跟GitHub的开发人员进行了一系列探讨之后，最终得出了以下的漏洞修复策略：
1\. 从bundle中删除一些不必要的HTML文件。
2\. 使用[DOMPurify](https://github.com/cure53/DOMPurify)来对Markdown文档的内容进行数据过滤。
虽然这种解决方案并不算十分完美，但是对于目前来讲也已经足够有效了。与此同时，GitHub也准备使用一种更加严格的Markdown解析器，但是这很有可能会影响很多[现存用户的工作流程](https://xkcd.com/1172/)。