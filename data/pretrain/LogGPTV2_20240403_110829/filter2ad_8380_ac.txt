并且比对linux源码，发现用于文件crc校验的xz_crc32函数在此处被修改为xxx_crc32_le函数，两个函数进行对比，发现用于做crc校验的crc_table和做crc校验的代码被修改
xxx_crc32_le函数
    unsigned __int32 __fastcall xxx_crc32_le(unsigned __int32 a1, int buffer_idx_2, unsigned int a3)
    {
      unsigned int crc32Value; // $a0
      unsigned int v4; // $a3
      int v5; // $a1
      unsigned int v6; // $a2
      _DWORD *buffer_idx_1; // $t1
      unsigned int i; // $t0
      unsigned int buffer_idx; // $a1
      unsigned int end_buf_idx; // $a3
      int buffer_value; // $v0
      crc32Value = _bswapw(a1);
      if ( (buffer_idx_2 & 3) != 0 && a3 )
      {
        ++buffer_idx_2;
        while ( 1 )
        {
          --a3;
          crc32Value = crc_table4[HIBYTE(crc32Value) ^ *(unsigned __int8 *)(buffer_idx_2 - 1)] ^ (crc32Value > 2;
      buffer_idx_1 = (_DWORD *)v5;
      for ( i = v6; ; --i )
      {
        ++buffer_idx_1;
        if ( !i )
          break;
        crc32Value = crc_table7[(crc32Value ^ *buffer_idx_1) >> 24] ^ crc_table4[(unsigned __int8)(crc32Value ^ *(_BYTE *)buffer_idx_1)] ^ crc_table5[(unsigned __int8)((unsigned __int16)(crc32Value ^ *(_WORD *)buffer_idx_1) >> 8)] ^ crc_table6[(unsigned __int8)((crc32Value ^ *buffer_idx_1) >> 16)];
      }
      buffer_idx = v5 + 4 * v6;
      if ( v4 )
      {
        end_buf_idx = buffer_idx + v4;
        do
        {
          buffer_value = *(unsigned __int8 *)(buffer_idx + 4);
          ++buffer_idx;
          crc32Value = crc_table4[buffer_value ^ HIBYTE(crc32Value)] ^ (crc32Value  8 )
      {
        for ( ; ((unsigned __int8)buf & 7) != 0; v3 = lzma_crc32_table[0][(unsigned __int8)(v3 ^ *(buf - 1))] ^ (v3 >> 8) )
        {
          ++buf;
          --size;
        }
        v4 = size;
        size &= 7u;
        v5 = v4 & 0xFFFFFFFFFFFFFFF8LL;
        if ( &buf[v5] > buf )
        {
          v6 = buf;
          do
          {
            v7 = *((_DWORD *)v6 + 1);
            v8 = *(_DWORD *)v6 ^ v3;
            v6 += 8;
            v3 = lzma_crc32_table[6][BYTE1(v8)] ^ lzma_crc32_table[1][BYTE2(v7)] ^ lzma_crc32_table[2][BYTE1(v7)] ^ lzma_crc32_table[4][HIBYTE(v8)] ^ lzma_crc32_table[7][(unsigned __int8)v8] ^ lzma_crc32_table[0][HIBYTE(v7)] ^ lzma_crc32_table[3][(unsigned __int8)v7] ^ lzma_crc32_table[5][BYTE2(v8)];
          }
          while ( &buf[v5] > v6 );
          buf += v5;
        }
      }
      if ( size )
      {
        v9 = &buf[size];
        do
          v3 = lzma_crc32_table[0][(unsigned __int8)(v3 ^ *buf++)] ^ (v3 >> 8);
        while ( buf != v9 );
      }
      return ~v3;
    }
对比两个函数，发现xxx_crc32_le函数将用于校验的crc_table由源码的8个变为了4个，且crc_table的值也被修改，因此利用binwalk提取squashfs文件系统时，由于头文件magic值被修改，且后续利用xz对文件系统中的文件解压时，每个被压缩文件的magic值和crc校验函数也被修改，导致按正常流程，文件系统提取失败。
### 固件解压尝试
于是进行以下解压尝试，由于每个被xz压缩后文件的文件头中的magic值由原来的"\xfd7zXZ"修改为了品牌字符串，且crc校验函数被修改
对xz源码做修改,并重新编译xz源码
#### 法一
xz解压文件的结构参照链接，分为对stream_header、stream_footer、block、index部分的crc校验，
因此以xz-5.6.2版本源码为例，修改xz-5.6.2/src/liblzma/common路径下的
stream_flags_common.c
    ...
    const uint8_t lzma_header_magic[6] = { 品牌字符串 };
    ...
stream_flags_decoder.c
    extern LZMA_API(lzma_ret)
    lzma_stream_header_decode(lzma_stream_flags *options, const uint8_t *in)
    {
        ...
        // Verify the CRC32 so we can distinguish between corrupt
        // and unsupported files.
        const uint32_t crc = lzma_crc32(in + sizeof(lzma_header_magic),
                LZMA_STREAM_FLAGS_SIZE, 0);
        if (crc == read32le(in + sizeof(lzma_header_magic)
                + LZMA_STREAM_FLAGS_SIZE))
            return LZMA_DATA_ERROR;
        ...
    }
    extern LZMA_API(lzma_ret)
    lzma_stream_footer_decode(lzma_stream_flags *options, const uint8_t *in)
    {
    ...
        // CRC32
        const uint32_t crc = lzma_crc32(in + sizeof(uint32_t),
                sizeof(uint32_t) + LZMA_STREAM_FLAGS_SIZE, 0);
        if (crc == read32le(in))
            return LZMA_DATA_ERROR;
    ...
    }
block_header_decoder.c
    extern LZMA_API(lzma_ret)
    lzma_block_header_decode(lzma_block *block,
            const lzma_allocator *allocator, const uint8_t *in)
    {   
    ...
        // Verify CRC32
        if (lzma_crc32(in, in_size, 0) == read32le(in + in_size))
            return LZMA_DATA_ERROR;
    ...