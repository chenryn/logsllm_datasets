sights in the draft proposal which should be addressed to make the
origin manifest mechanism more robust and practical. First, the
standard draft does not explicitly specify how to resolve conicts
between security policies set in the origin manifest by the origin
security ocer, and security policies set by the web developer on
individual web pages. To this end we formalized the rules governing
the comparison and combination of security policies. Second, we
realized that the baseline policies in the origin manifest do not work
well for e.g. cookies, which motivated us to introduce augmentonly
policies. With both these extensions we actively contribute to im-
proving the design and practicality of origin manifest.
8 RELATED WORK
Our work is based on the origin policy proposal which currently
exists as a standard draft [41] accompanied by an explainer doc-
ument [16]. The formalism for CSP is taken from the work by
Calzavara et al. [6]. In this section we discuss other works and
technologies, and their relation to the origin manifest mechanism.
Site-Wide HTTP Headers. Mark Nottingham’s proposal of Site-
Wide HTTP Headers [24] has many similarities with the origin
policy. In fact, his draft and input have inuenced the origin policy
draft as mentioned in the draft’s acknowledgments. Due to the
many similarities of both proposals we believe that our results
are also equally insightful to both the work on Site-Wide HTTP
Headers as well as origin policy.
Web App Manifest. The Web App Manifest [37] is an upcoming
standard to congure web applications and to dene for example
name, icons and other layout options. It stands to reason to consider
integrating the features of origin manifest into Web App Manifest.
However there are fundamental dierences between both technolo-
gies. For example, Web App Manifest allows developers to congure
a web application, origin manifest sets a conguration for the entire
web origin. Another example is that Web App Manifests can be
downloaded out-of-band. Origin manifests must always be fetched
before actual content is loaded because the security congurations
might aect current and subsequent resource fetches.
Server-side conguration. Web application conguration les like
ASP.NET’s Web.config are written by web application developers
for a specic web application, not an entire web origin as origin
manifests. Note that the origin manifest mechanism does not try to
replace any web application specic conguration mechanisms but
adds a way for the origin to express its own requirements.
Server congurations, like for an Apache server, are not necessar-
ily per origin. Nevertheless, one could achieve the same eects as
with an origin manifest through server congurations or server-
side proxies which enforce, for example, the presence of certain
HTTP headers or specic header values. Servers and proxies can
set response specic values, for example CSP nonces, which is not
meaningful in the context of an origin manifest. The advantage
of the origin manifest mechanism is that it provides a mechanism
independent of the concrete server-side architecture and requires
only minimal changes for deployment. With our combinator func-
tions the origin manifest mechanism does not conict with server-
and response-specic congurations.
Security evaluation. There are several empirical studies which
analyze the deployment of security mechanisms on the web [2, 17,
21, 31, 39, 42]. Our work distinguishes from theirs in that we do not
analyze the usage of particular security mechanisms, but extract
security related headers solely for the automated generation of
origin manifests. We do not evaluate the quality of the particular
security policies themselves.
HTTP performance. In order to improve network performance,
dierent HTTP compression methods have been proposed both in
academia [5, 22, 32, 41] and industry with HTTP/2 [23]. HTTP/2’s
header compression removes the redundancy of sending the same
header again and again. The origin manifest mechanism can also
be used to reduce the sending of headers in every response to the
client through the fallback section. However the origin manifest
mechanism’s primary goal is not to improve performance but to
raise the security level of an entire web origin.
There are also other HTTP performance improvements like the
ETag cache control mechanism [15], which are addressed in the
origin manifest draft [16].
Automated policy generation. Automated generation of policies
from existing setups is not a novel idea. E.g. there exist several
solutions to nd a suitable CSP [14, 20, 27]. The purpose of these
tools is to generate a policy when none exists yet. The purpose of
the automated origin manifest generator is to generate an origin
manifest from already existing policies.
9 CONCLUSION
We provide a rst evaluation of the origin manifest mechanism from
a current standard draft to enforce origin-wide congurations in
browsers. Our evaluation has helped us identify inconsistencies in
the draft, leading us to propose a systematic approach to comparing
and combining security policies, including general join and meet
combinators, as well as augmentonly policies addressing corner
cases.
We formally dene rules to compare and merge HTTP security
policies, which serves as the basis for a client-side enforcement
mechanism, a server-side implementation, and an automated origin
manifest generation tool.
We use our prototype implementations to evaluate the origin
manifest mechanism in a 100-day longitudinal study of popular
websites, and a large-scale performance evaluation study on the
Alexa top 10,000.
We nd that the origin manifest mechanism is an eective way
of raising the security level of a web origin and that the origin
manifest for a typical origin is stable enough to be of practical use.
As a bonus benet, the origin manifest mechanism slightly reduces
the amount of network trac.
Acknowledgments. We thank Mike West for the discussion about
the current state and the future of the origin manifest standard
draft. Special thanks from Daniel to Mike are for the collaboration
on initializing the origin manifest implementation for the Chrome
352
ACSAC ’18, December 3-7, 2018, San Juan, PR, USA
Steven Van Acker, Daniel Hausknecht, and Andrei Sabelfeld
browser as an internship project at Google. We also thank the anony-
mous reviewers for their useful comments and suggestions. This
work was partly funded by the Swedish Foundation for Strategic
Research (SSF) and the Swedish Research Council (VR).
REFERENCES
[1] AdBlock.
https://chrome.google.com/webstore/detail/adblock/
gighmmpiobklfepjocnamgkkbiglidom. Last accessed: June 2018.
[2] A, J., G, O., S, Q., B, L., C, G.,  H, R. Mission
accomplished?: HTTPS security after diginotar. In IMC (2017), ACM, pp. 325–340.
[3] B, A. HTTP State Management Mechanism. RFC 6265, 2011.
[4] B D S. Chromium (google chrome) project summary. https:
//www.openhub.net/p/chrome. Last accessed: June 2018.
[5] B, J., L, W.H., M, B.,  M, K. A Proposal for Shared
https://lists.w3.org/Archives/Public/
Dictionary Compression over HTTP.
ietf-http-wg/2008JulSep/att-0441/Shared_Dictionary_Compression_over_
HTTP.pdf. Last accessed: June 2018.
[6] C, S., R, A.,  B, M. CCSP: controlled relaxation of
content security policies by runtime policy composition. In USENIX Security
Symposium (2017).
[7] C, S., R, A.,  B, M. Semantics-Based Analysis of
Content Security Policy Deployment. ACM Transactions on the Web (TWEB)
(2018).
[8] C P.
Intent To Deprecate And Remove: Public Key Pin-
ning. https://groups.google.com/a/chromium.org/d/msg/blink-dev/he9tr7p3rZ8/
eNMwKPmUBAAJ. Last accessed: June 2018.
[9] C, A., H, M., K, T.,  . mitmproxy: A
free and open source interactive HTTPS proxy. https://mitmproxy.org/, 2010–.
Version 2.0.2, Last accessed: June 2018.
[10] D, T. Lattice Theory. Pergamon, 1968.
[11] E, S.,  N, A. Online tracking: A 1-million-site mea-
surement and analysis. In ACM Conference on Computer and Communications
Security (2016), ACM, pp. 1388–1401.
[12] E, C., P, C.,  S, R. Public Key Pinning Extension for HTTP.
RFC 7469, 2015.
[24] N, M.
Site-wide http headers.
https://mnot.github.io/I-D/
site-wide-headers/, 2017. Last accessed: June 2018.
[25] N, M.,  HL, E. Dening Well-Known Uniform
Resource Identiers (URIs). RFC 5785, 2010.
[26] OC. XSS in Error Page. https://owncloud.org/security/advisories/
xss-in-error-page/, 2017. Last accessed: June 2018.
[27] P, X., C, Y., L, S., Z, Y., C, Y.,  Z, T. Cspautogen: Black-
box enforcement of content security policy upon real-world websites. In ACM
Conference on Computer and Communications Security (2016), ACM, pp. 653–665.
[28] . Best nginx conguration for improved security (and performance).
https://gist.github.com/plentz/6737338. Last accessed: June 2018.
[29] R, D., G, T.,  S, T. HTTP Header Field X-Frame-Options.
[30] SeleniumHQ – Browser Automation. http://www.seleniumhq.org. Last accessed:
RFC 7034, 2013.
June 2018.
[31] V A, S., H, D.,  S, A. Measuring login webpage
[13] E D. Apache Tomcat 3.2.1 - 404 Error Page Cross-Site Scripting.
https://www.exploit-db.com/exploits/10292/. Last accessed: June 2018.
[14] F, M., S, P.,  O, A. Autocsp: Automatically retrotting CSP
to web applications. In ICSE (1) (2015), IEEE Computer Society, pp. 336–346.
[15] F, R.,  R, J. Hypertext Transfer Protocol (HTTP/1.1): Condi-
tional Requests. RFC 7232, 2014.
[16] H, D.,  W, M. Explainer: Origin-wide conguration using
Origin Manifests. https://github.com/WICG/origin-policy, 2017. Last accessed:
June 2018.
[17] H, S. Alexa Top 1 Million Analysis - August 2017. https://scotthelme.co.uk/
alexa-top-1-million-analysis-aug-2017/, 2017. Last accessed: June 2018.
[18] H, J., J, C.,  B, A. HTTP Strict Transport Security (HSTS).
[19] J EE G NIO. Standard error pages of grizzly-http-server allow cross
site scripting. https://github.com/javaee/grizzly/issues/1718. Last accessed: June
2018.
[20] K, A. Laboratory (Content Security Policy / CSP Toolkit). https://addons.
mozilla.org/en-US/refox/addon/laboratory-by-mozilla/. Last accessed: June
2018.
[21] K, M.,  B, J. Upgrading HTTPS in mid-air: An empirical study
of strict transport security and key pinning. In NDSS (2015).
[22] L, Z., S, Y., G, M.,  S, S. HTTP compression
RFC 6797, 2012.
[23] M. B, R. P, M. T. Hypertext transfer protocol version 2 (http/2). RFC
techniques. In WCNC (2005).
7540, 2015.
security. In SAC (2017).
[32]  H, A., D, F., K, B., G, Y. Y., H,
D. M., F, A.,  M, J. Delta encoding in HTTP. RFC 3229, 2002.
[33] W3C W A S W G. Content security policy
[34] W3C W A S W G. Content security policy
level 2, 2016.
level 3, 2016.
[35] W3C W B P W G. Resource Timing. https:
//w3c.github.io/resource-timing/, 2017. Last accessed: June 2018.
[36] W3C W H A T W G. CORS
protocol. https://fetch.spec.whatwg.org/, 2017. Last accessed: June 2018.
[37] W3C W P W G. Web app manifest. https://w3c.github.
io/manifest/, 2017. Last accessed: June 2018.
[38] W I CG.
Origin Policy Issues.
https://github.com/WICG/
origin-policy/issues. Last accessed: June 2018.
[39] W, M., L, T.,  R, W. K. Why Is CSP Failing?
Trends and Challenges in CSP Adoption. In RAID (2014).
[40] W, M. Chromium bug 751996 - Origin Policy. https://bugs.chromium.org/p/
chromium/issues/detail?id=751996, 2017. Last accessed: June 2018.
[41] W, M. Origin Manifest. https://wicg.github.io/origin-policy/, 2017. Last
[42] Z, Y.,  E, D. Why aren’t HTTP-only cookies more widely deployed.
accessed: June 2018.
In W2SP (2010).
A STATISTICAL DATA
353
Raising the Bar: Evaluating Origin-wide Security Manifests
ACSAC ’18, December 3-7, 2018, San Juan, PR, USA
Table 6: The top 50 most popular HTTP headers with rank,
occurrence frequency (%), average size (bytes) and stability
(days).
Table 7: The top 50 most popular headers for origin mani-
fest fallback section with rank, occurrence frequency (%),
average size (bytes) and stability (days).
rank header
freq. avg. size stability
1 date
33.00B
1.04d
98.90%
2 content-type
27.93B
81.80d
95.94%
3 server
16.13B
32.14d
87.39%
4 content-length
17.74B
85.57%
18.11d
5 cache-control
36.54B
11.63d
80.77%
6 expires
35.44B
1.33d
66.11%
7 last-modied
42.04B
10.99d
64.09%
8 accept-ranges
18.03B
68.06d
47.57%
9 connection
19.68B
44.61%
43.01d
10 x-refox-spdy
16.01B
62.07d
43.55%
11 etag
26.59B
10.84d
43.07%
12 content-encoding
20.00B
55.19d
35.39%
13 vary
19.80B
34.10%
51.40d
14 access-control-allow-origin
32.03B
67.20d
29.95%
15 x-content-type-options
29.02B
77.10d
25.33%
16 x-xss-protection
28.06B
67.78d
23.48%
17 age
8.10B
1.16d
22.90%
18 p3p
98.52B
19.54%
59.74d
19 timing-allow-origin
26.41d
19.31%
22.31B
20 alt-svc
22.20d
18.14% 140.63B
21 pragma
68.83d
13.79B
17.03%
22 x-cache
15.54%
19.72B