### Improvements to the Origin Manifest Mechanism

The draft proposal for the origin manifest mechanism contains several issues that need to be addressed to enhance its robustness and practicality. First, the standard draft does not explicitly define how to resolve conflicts between security policies set in the origin manifest by the origin security officer and those set by web developers on individual web pages. To address this, we have formalized the rules governing the comparison and combination of these security policies.

Second, we found that the baseline policies in the origin manifest do not work well for certain elements, such as cookies. This led us to introduce augment-only policies. With both these extensions, we actively contribute to improving the design and practicality of the origin manifest.

### Related Work

Our work is based on the origin policy proposal, which currently exists as a standard draft [41] accompanied by an explainer document [16]. The formalism for Content Security Policy (CSP) is derived from the work by Calzavara et al. [6]. In this section, we discuss other related works and technologies and their relation to the origin manifest mechanism.

#### Site-Wide HTTP Headers
Mark Nottingham's proposal for Site-Wide HTTP Headers [24] shares many similarities with the origin policy. In fact, his draft and input have influenced the origin policy draft, as mentioned in the acknowledgments. Due to the many similarities between both proposals, we believe that our results are equally insightful for both Site-Wide HTTP Headers and the origin policy.

#### Web App Manifest
The Web App Manifest [37] is an upcoming standard for configuring web applications, including defining names, icons, and other layout options. It is reasonable to consider integrating the features of the origin manifest into the Web App Manifest. However, there are fundamental differences between the two technologies. For example, the Web App Manifest allows developers to configure a specific web application, while the origin manifest sets a configuration for the entire web origin. Additionally, Web App Manifests can be downloaded out-of-band, whereas origin manifests must always be fetched before any content is loaded because the security configurations may affect current and subsequent resource fetches.

#### Server-Side Configuration
Web application configuration files, such as ASP.NET’s Web.config, are written by web application developers for a specific web application, not for an entire web origin like origin manifests. Note that the origin manifest mechanism does not aim to replace any web application-specific configuration mechanisms but adds a way for the origin to express its own requirements.

Server configurations, such as those for an Apache server, are not necessarily per origin. Nevertheless, one could achieve similar effects to an origin manifest through server configurations or server-side proxies, which enforce the presence of certain HTTP headers or specific header values. Servers and proxies can set response-specific values, such as CSP nonces, which are not meaningful in the context of an origin manifest. The advantage of the origin manifest mechanism is that it provides a mechanism independent of the concrete server-side architecture and requires only minimal changes for deployment. With our combinator functions, the origin manifest mechanism does not conflict with server- and response-specific configurations.

#### Security Evaluation
Several empirical studies analyze the deployment of security mechanisms on the web [2, 17, 21, 31, 39, 42]. Our work differs in that we do not analyze the usage of particular security mechanisms but extract security-related headers solely for the automated generation of origin manifests. We do not evaluate the quality of the specific security policies themselves.

#### HTTP Performance
To improve network performance, various HTTP compression methods have been proposed both in academia [5, 22, 32, 41] and industry, such as HTTP/2 [23]. HTTP/2’s header compression removes the redundancy of sending the same header repeatedly. The origin manifest mechanism can also reduce the sending of headers in every response to the client through the fallback section. However, the primary goal of the origin manifest mechanism is not to improve performance but to raise the security level of an entire web origin.

Other HTTP performance improvements, such as the ETag cache control mechanism [15], are also addressed in the origin manifest draft [16].

#### Automated Policy Generation
Automated generation of policies from existing setups is not a new concept. There are several solutions for generating suitable CSPs [14, 20, 27]. These tools aim to generate a policy when none exists. The purpose of the automated origin manifest generator is to generate an origin manifest from already existing policies.

### Conclusion

We provide an initial evaluation of the origin manifest mechanism from a current standard draft to enforce origin-wide configurations in browsers. Our evaluation has helped identify inconsistencies in the draft, leading us to propose a systematic approach to comparing and combining security policies, including general join and meet combinators, as well as augment-only policies addressing corner cases.

We formally define rules to compare and merge HTTP security policies, which serve as the basis for a client-side enforcement mechanism, a server-side implementation, and an automated origin manifest generation tool.

Using our prototype implementations, we evaluated the origin manifest mechanism in a 100-day longitudinal study of popular websites and a large-scale performance evaluation study on the Alexa top 10,000. We found that the origin manifest mechanism is an effective way to raise the security level of a web origin and that the origin manifest for a typical origin is stable enough to be of practical use. As an additional benefit, the origin manifest mechanism slightly reduces the amount of network traffic.

### Acknowledgments

We thank Mike West for the discussion about the current state and future of the origin manifest standard draft. Special thanks from Daniel to Mike for the collaboration on initializing the origin manifest implementation for the Chrome browser as an internship project at Google. We also thank the anonymous reviewers for their useful comments and suggestions. This work was partly funded by the Swedish Foundation for Strategic Research (SSF) and the Swedish Research Council (VR).

### References

[1] AdBlock. https://chrome.google.com/webstore/detail/adblock/gighmmpiobklfepjocnamgkkbiglidom. Last accessed: June 2018.

[2] A, J., G, O., S, Q., B, L., C, G., & H, R. Mission accomplished?: HTTPS security after DigiNotar. In IMC (2017), ACM, pp. 325–340.

[3] B, A. HTTP State Management Mechanism. RFC 6265, 2011.

[4] B D S. Chromium (Google Chrome) project summary. https://www.openhub.net/p/chrome. Last accessed: June 2018.

[5] B, J., L, W.H., M, B., & M, K. A Proposal for Shared Dictionary Compression over HTTP. https://lists.w3.org/Archives/Public/ietf-http-wg/2008JulSep/att-0441/Shared_Dictionary_Compression_over_HTTP.pdf. Last accessed: June 2018.

[6] C, S., R, A., & B, M. CCSP: controlled relaxation of content security policies by runtime policy composition. In USENIX Security Symposium (2017).

[7] C, S., R, A., & B, M. Semantics-Based Analysis of Content Security Policy Deployment. ACM Transactions on the Web (TWEB) (2018).

[8] C P. Intent To Deprecate And Remove: Public Key Pinning. https://groups.google.com/a/chromium.org/d/msg/blink-dev/he9tr7p3rZ8/eNMwKPmUBAAJ. Last accessed: June 2018.

[9] C, A., H, M., K, T., & . mitmproxy: A free and open source interactive HTTPS proxy. https://mitmproxy.org/, 2010–. Version 2.0.2, Last accessed: June 2018.

[10] D, T. Lattice Theory. Pergamon, 1968.

[11] E, S., & N, A. Online tracking: A 1-million-site measurement and analysis. In ACM Conference on Computer and Communications Security (2016), ACM, pp. 1388–1401.

[12] E, C., P, C., & S, R. Public Key Pinning Extension for HTTP. RFC 7469, 2015.

[24] N, M. Site-wide HTTP headers. https://mnot.github.io/I-D/site-wide-headers/, 2017. Last accessed: June 2018.

[25] N, M., & HL, E. Defining Well-Known Uniform Resource Identifiers (URIs). RFC 5785, 2010.

[26] OC. XSS in Error Page. https://owncloud.org/security/advisories/xss-in-error-page/, 2017. Last accessed: June 2018.

[27] P, X., C, Y., L, S., Z, Y., C, Y., & Z, T. CSPAutoGen: Black-box enforcement of content security policy upon real-world websites. In ACM Conference on Computer and Communications Security (2016), ACM, pp. 653–665.

[28] . Best Nginx configuration for improved security (and performance). https://gist.github.com/plentz/6737338. Last accessed: June 2018.

[29] R, D., G, T., & S, T. HTTP Header Field X-Frame-Options. RFC 7034, 2013.

[30] SeleniumHQ – Browser Automation. http://www.seleniumhq.org. Last accessed: June 2018.

[31] V A, S., H, D., & S, A. Measuring login webpage. [13] E D. Apache Tomcat 3.2.1 - 404 Error Page Cross-Site Scripting. https://www.exploit-db.com/exploits/10292/. Last accessed: June 2018.

[14] F, M., S, P., & O, A. AutoCSP: Automatically retrofitting CSP to web applications. In ICSE (1) (2015), IEEE Computer Society, pp. 336–346.

[15] F, R., & R, J. Hypertext Transfer Protocol (HTTP/1.1): Conditional Requests. RFC 7232, 2014.

[16] H, D., & W, M. Explainer: Origin-wide configuration using Origin Manifests. https://github.com/WICG/origin-policy, 2017. Last accessed: June 2018.

[17] H, S. Alexa Top 1 Million Analysis - August 2017. https://scotthelme.co.uk/alexa-top-1-million-analysis-aug-2017/, 2017. Last accessed: June 2018.

[18] H, J., J, C., & B, A. HTTP Strict Transport Security (HSTS).

[19] J EE G NIO. Standard error pages of Grizzly-HTTP-Server allow cross-site scripting. https://github.com/javaee/grizzly/issues/1718. Last accessed: June 2018.

[20] K, A. Laboratory (Content Security Policy / CSP Toolkit). https://addons.mozilla.org/en-US/refox/addon/laboratory-by-mozilla/. Last accessed: June 2018.

[21] K, M., & B, J. Upgrading HTTPS in mid-air: An empirical study of strict transport security and key pinning. In NDSS (2015).

[22] L, Z., S, Y., G, M., & S, S. HTTP compression techniques. In WCNC (2005).

[23] M. B, R. P, M. T. Hypertext Transfer Protocol Version 2 (HTTP/2). RFC 7540, 2015.

[32] H, A., D, F., K, B., G, Y. Y., H, D. M., F, A., & M, J. Delta encoding in HTTP. RFC 3229, 2002.

[33] W3C W A S W G. Content Security Policy. [34] W3C W A S W G. Content Security Policy Level 2, 2016.

[35] W3C W B P W G. Resource Timing. https://w3c.github.io/resource-timing/, 2017. Last accessed: June 2018.

[36] W3C W H A T W G. CORS protocol. https://fetch.spec.whatwg.org/, 2017. Last accessed: June 2018.

[37] W3C W P W G. Web App Manifest. https://w3c.github.io/manifest/, 2017. Last accessed: June 2018.

[38] W I CG. Origin Policy Issues. https://github.com/WICG/origin-policy/issues. Last accessed: June 2018.

[39] W, M., L, T., & R, W. K. Why Is CSP Failing? Trends and Challenges in CSP Adoption. In RAID (2014).

[40] W, M. Chromium bug 751996 - Origin Policy. https://bugs.chromium.org/p/chromium/issues/detail?id=751996, 2017. Last accessed: June 2018.

[41] W, M. Origin Manifest. https://wicg.github.io/origin-policy/, 2017. Last accessed: June 2018.

[42] Z, Y., & E, D. Why aren’t HTTP-only cookies more widely deployed? In W2SP (2010).

### Statistical Data

**Table 6: The top 50 most popular HTTP headers with rank, occurrence frequency (%), average size (bytes), and stability (days).**

| Rank | Header                | Frequency (%) | Average Size (bytes) | Stability (days) |
|------|-----------------------|---------------|----------------------|------------------|
| 1    | Date                  | 98.90%        | 33.00B               | 1.04d            |
| 2    | Content-Type          | 95.94%        | 27.93B               | 81.80d           |
| 3    | Server                | 87.39%        | 16.13B               | 32.14d           |
| 4    | Content-Length        | 85.57%        | 17.74B               | 18.11d           |
| 5    | Cache-Control         | 80.77%        | 36.54B               | 11.63d           |
| 6    | Expires               | 66.11%        | 35.44B               | 1.33d            |
| 7    | Last-Modified         | 64.09%        | 42.04B               | 10.99d           |
| 8    | Accept-Ranges         | 47.57%        | 18.03B               | 68.06d           |
| 9    | Connection            | 44.61%        | 19.68B               | 43.01d           |
| 10   | X-Refox-Spdy          | 43.55%        | 16.01B               | 62.07d           |
| 11   | ETag                  | 43.07%        | 26.59B               | 10.84d           |
| 12   | Content-Encoding      | 35.39%        | 20.00B               | 55.19d           |
| 13   | Vary                  | 34.10%        | 19.80B               | 51.40d           |
| 14   | Access-Control-Allow-Origin | 29.95% | 32.03B               | 67.20d           |
| 15   | X-Content-Type-Options | 25.33%        | 29.02B               | 77.10d           |
| 16   | X-XSS-Protection      | 23.48%        | 28.06B               | 67.78d           |
| 17   | Age                   | 22.90%        | 8.10B                | 1.16d            |
| 18   | P3P                   | 19.54%        | 98.52B               | 59.74d           |
| 19   | Timing-Allow-Origin   | 19.31%        | 22.31B               | 26.41d           |
| 20   | Alt-Svc               | 18.14%        | 140.63B              | 22.20d           |
| 21   | Pragma                | 17.03%        | 13.79B               | 68.83d           |
| 22   | X-Cache               | 15.54%        | 19.72B               | -                |

**Table 7: The top 50 most popular headers for origin manifest fallback section with rank, occurrence frequency (%), average size (bytes), and stability (days).**

| Rank | Header                | Frequency (%) | Average Size (bytes) | Stability (days) |
|------|-----------------------|---------------|----------------------|------------------|
| 1    | Date                  | 98.90%        | 33.00B               | 1.04d            |
| 2    | Content-Type          | 95.94%        | 27.93B               | 81.80d           |
| 3    | Server                | 87.39%        | 16.13B               | 32.14d           |
| 4    | Content-Length        | 85.57%        | 17.74B               | 18.11d           |
| 5    | Cache-Control         | 80.77%        | 36.54B               | 11.63d           |
| 6    | Expires               | 66.11%        | 35.44B               | 1.33d            |
| 7    | Last-Modified         | 64.09%        | 42.04B               | 10.99d           |
| 8    | Accept-Ranges         | 47.57%        | 18.03B               | 68.06d           |
| 9    | Connection            | 44.61%        | 19.68B               | 43.01d           |
| 10   | X-Refox-Spdy          | 43.55%        | 16.01B               | 62.07d           |
| 11   | ETag                  | 43.07%        | 26.59B               | 10.84d           |
| 12   | Content-Encoding      | 35.39%        | 20.00B               | 55.19d           |
| 13   | Vary                  | 34.10%        | 19.80B               | 51.40d           |
| 14   | Access-Control-Allow-Origin | 29.95% | 32.03B               | 67.20d           |
| 15   | X-Content-Type-Options | 25.33%        | 29.02B               | 77.10d           |
| 16   | X-XSS-Protection      | 23.48%        | 28.06B               | 67.78d           |
| 17   | Age                   | 22.90%        | 8.10B                | 1.16d            |
| 18   | P3P                   | 19.54%        | 98.52B               | 59.74d           |
| 19   | Timing-Allow-Origin   | 19.31%        | 22.31B               | 26.41d           |
| 20   | Alt-Svc               | 18.14%        | 140.63B              | 22.20d           |
| 21   | Pragma                | 17.03%        | 13.79B               | 68.83d           |
| 22   | X-Cache               | 15.54%        | 19.72B               | -                |

This revised version aims to provide a clearer, more coherent, and professional presentation of the content.