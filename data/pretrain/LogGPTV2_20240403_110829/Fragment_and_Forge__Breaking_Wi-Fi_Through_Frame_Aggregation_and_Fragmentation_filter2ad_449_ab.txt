thentication keys and as a result their encryption keys also stay
secret. To prevent users from attacking each other, hotspots
commonly use downstream group-addressed forwarding and
client isolation. With the former feature, each client is given
a random group key [6, §5.2], preventing attacks that abuse
the otherwise shared group key [2]. The latter feature, client
isolation, prevents users from communicating with each other,
which most notably blocks ARP-based MitM attacks.
3 Abusing Frame Aggregation
In this section, we present a design ﬂaw in 802.11’s frame
aggregation functionality that allows an adversary to inject
arbitrary packets by making a victim process normal Wi-Fi
frames as aggregated ones. We abuse this to perform a port
scan and to trick a victim into using a malicious DNS server.
This design ﬂaw has been assigned CVE-2020-24588.
3.1 Threat model
The attack works against all current data-conﬁdentiality proto-
cols of Wi-Fi, namely WEP, TKIP, CCMP, and GCMP, mean-
ing all protected Wi-Fi networks are affected. The adversary
must be within radio range of the victim such that a multi-
channel MitM can be obtained, and the victim must support
the reception of A-MSDU frames, which is a mandatory part
of 802.11n [33]. Additionally, the adversary must be able to
send IPv4 packets to the victim with some control over the
payload and with a predictable IP identiﬁcation (ID) ﬁeld. In
Section 6.3, 6.5, and 6.6 we abuse implementation ﬂaws to
perform the attack under alternative assumptions. This section
focuses on a general attack technique, where an adversary can
send such IPv4 packets to a client or AP as follows:
Attacking clients
If the IP address of the client is known,
and no ﬁrewall is blocking incoming packets, we can directly
send IPv4 packets to the victim. Otherwise, we assume that
the adversary is able to make the victim connect to a server
under the adversary’s control, allowing the adversary to inject
IPv4 packets over this connection. A wide-scale method to ac-
complish this is to register a misspelled domain name [43], or
to exploit third-party advertisements in popular websites [27].
A relaxed BEAST threat model can also be used, where the
victim is social engineered into visiting the attacker’s website.
Attacking APs To attack APs, the IP ID ﬁeld of at least
one connected client must be predictable. This can be the case
for older clients [37], and on some devices this ﬁeld always
equals zero [53]. We also rely on the BEAST threat model to
make this client send IPv4 packets with a given payload.
SNAP
IP hdr Len
ID
LLC
IP payload
AA AA 03 00 00 00 08 00 45 00 01 0C 00 22 ··· XX ··· XX
Subframe 2
Destination
Length
Source
Figure 3: Parsing an 802.11 payload containing an IPv4
packet (top) as an A-MSDU frame (bottom). Green under-
lined bytes can be controlled by the adversary, yellow ones
can be partially controlled, and red bytes have a ﬁxed value.
Injecting frames by spooﬁng A-MSDUs
3.2
By default the A-MSDU ﬂag, which informs a receiver how
to parse the encrypted payload of a frame, is not authenti-
cated (recall Section 2.1). Only when the sender and receiver
support Signaling and Payload Protected (SPP) A-MSDUs
is the A-MSDU ﬂag authenticated [33, §11.17]. However,
none of the devices we tested support this feature, meaning
in practice the A-MSDU ﬂag is never authenticated. This
is problematic because nearly all devices we tested do sup-
port receiving A-MSDUs, meaning they can be tricked into
processing normal frames as A-MSDUs, and vice versa.
We can exploit this design ﬂaw by manipulating a normal
802.11 frame such that, when it is processed as an A-MSDU
frame, one of the subframes will correspond to a packet that
we want to inject. This requires the frame’s payload to contain
a specially crafted packet, for instance, the IPv4 packet illus-
trated in Figure 3. Notice that this IPv4 packet is prepended
with an 8-byte LLC/SNAP header when encapsulated in an
802.11 frame (recall Section 2.1). When targeting a client in
our threat model, the adversary can control the IP ID ﬁeld
and the payload that follows the IPv4 header. When these
bytes are interpreted as A-MSDU subframes, the length ﬁeld
of the ﬁrst subframe corresponds to the IP ID ﬁeld (see Fig-
ure 3). This means the attacker can set the 2-byte IP ID ﬁeld
to, e. g., 34, meaning the next A-MSDU subframe starts after
the TCP or UDP header of the injected frame. This leaves
space to include a valid TCP or UDP header in the malicious
IPv4 packet, increasing the chance that the packet is correctly
routed to the victim. Finally, we remark that the IP ID ﬁeld is
not changed by NAT devices or other middleboxes [37], and
therefore such devices will not interfere with our attack.
To change the IPv4 packet into an A-MSDU frame, the ad-
versary establishes a multi-channel MitM between the client
and AP (recall Section 2.4). The encrypted 802.11 frame
containing the IPv4 packet is detected based on its length
and QoS priority. The adversary sets the A-MSDU ﬂag in
the unauthenticated QoS ﬁeld, causing the client to treat the
frame’s payload as A-MSDU subframes. The ﬁrst subframe
will have an unknown sender and destination MAC address
and will be ignored. The second subframe will contain the
packet that the adversary wants to inject, and the client will
parse and process this injected packet.
We can attack APs in a similar way if at least one client uses
164    30th USENIX Security Symposium
USENIX Association
predictable IP IDs, which is the case for certain older Operat-
ing Systems (OSs) [37, 49]. By relying on the BEAST threat
model, we make this client perform a POST request contain-
ing attacker-controlled binary data. This essentially causes the
transmission of IP packets with a partially attacker-controlled
payload. If the ID ﬁeld of this IPv4 packet is correctly pre-
dicted, the second A-MSDU subframe will correspond to
attacker-controlled data. As a result, the attacker can inject
arbitrary packets. The AP will forward this packet to its next
destination, which is the gateway or any client in the network.
Finally, if a client always uses an IP ID value of zero, it is
possible to use the injection technique in Appendix C.
3.3 Practical impact
The impact of injecting arbitrary packets depends on the ser-
vices running on the victim, whether it is regularly updated,
and so on. As a general example, we performed the following
two attacks against an IPv6 or IPv4 capable victim:
Portscan We performed a portscan against IPv4 and IPv6
hosts to demonstrate the injection of a large number of packets.
Open ports were detected based on the length of the encrypted
TCP SYN/ACK replies.
Malicious DNS server Against dual-stack IPv4/6 clients,
we can inject ICMPv6 router advertisements to trick the vic-
tim into using a DNS server under our control. More precisely,
we abuse IPv6 stateless address autoconﬁguration by inject-
ing an ICMPv6 router advertisement that includes a malicious
DNS server [34]. Against Linux, Windows 10, Android 8.1,
iOS 13.4.1, and macOS 10.15.4, we conﬁrmed that this suc-
cessfully poisoned the DNS server(s) used by the OS. Once
the victim is using the malicious DNS server, the adversary
can redirect all trafﬁc to their malicious server, effectively
intercepting all IP-based trafﬁc of the client. Note that the ma-
licious DNS server will be hosted on an IPv6 address, but can
still respond to DNS requests with IPv4 addresses if needed.
Against IPv4-only clients, a similar attack is possible if
we can obtain the 4-byte transaction identiﬁer that the client
includes in its DHCP discover and requests. This identiﬁer
is normally unpredictable [19]. However, we found that iOS
and macOS randomly generate an identiﬁer on boot, but then
increment it for each DHCP message. Similarly, Halvorsen
et al. found that Mac OS X used predictable identiﬁers [24].
Moreover, certain IoT devices such as our Xiaomi security
camera randomly generate a transaction identiﬁer on boot and
reuse this value in all DHCP messages. This means that if one
transaction identiﬁer can be leaked or brute-forced, it becomes
possible to spoof DHCPv4 messages and force the client into
using a malicious DNS server. Finally, our ESP-12F always
uses the same identiﬁer, even after reboots, meaning we can
trivially make it use a malicious DNS server if we can inject
packets towards it.
3.4 Applicability to short A-MSDUs
In Directional Multi-Gigabit (DMG) networks, deﬁned by
amendment 802.11ad, stations can also send short A-MSDUs
where each subframe only consists of a length ﬁeld and the
transported data. Short A-MSDUs can only be encapsulated
inside DMG frames because only these frames deﬁne the short
A-MSDU ﬂag in the QoS ﬁeld [31, §9.2.4.5]. This ﬂag is al-
ways authenticated in DMG networks [31, §12.5.3.3.3]. Since
DMG frames should only be sent in DMG networks, the short
A-MSDU ﬂag is always authenticated, and hence cannot be
manipulated by an attacker. Nevertheless, we recommend that
the standard more explicitly requires that the short A-MSDU
ﬂag should only be used when it is authenticated.
An implementation risk is that the hardware supports and
authenticates the short A-MSDU ﬂag, but that the software-
based network stack does not support short A-MSDUs. In that
case, short A-MSDUs may be treated as normal A-MSDUs.
Unfortunately, few devices currently support 802.11ad, mean-
ing we were unable to check whether any devices were af-
fected by such implementation-speciﬁc issues.
3.5 Spooﬁng A-MSDUs as normal frames
We can also trick a victim into processing A-MSDU frames as
normal frames. This causes the destination MAC address of
the ﬁrst A-MSDU subframe to be processed as the start of an
LLC/SNAP header. This means that the resulting LLC/SNAP
header is only valid when the target has the (locally admin-
istered) MAC address AA:AA:03:00:00:00. Because of this
limitation, it is unlikely that this can be abused in practice.
3.6 Experiments
All major operating systems are vulnerable to our attack, in-
cluding Windows, Linux, Android, macOS, and iOS. See Sec-
tion 6.1 for a detailed overview of the devices we tested. All
APs we tested were also vulnerable, including home routers
and professional APs. The only exception is NetBSD and
OpenBSD: they do not support the reception of A-MSDUs
and therefore are unaffected by the attack.
We tested end-to-end attacks against several clients. During
these tests, we used two TL-WN722N dongles for the multi-
channel MitM, and we reliably obtained this MitM position by
spooﬁng channel switch announcements [55]. We detected the
injected IPv4 packet based on its length, set the A-MSDU ﬂag
before forwarding it to the victim, and successfully injected
router advertisements to poison the victim’s DNS server.
When testing the attack against FreeBSD and Linux 4.9
and above, we noticed that we were unable to inject packets
as described in Section 3.2. Upon closer inspection we found
that these operating systems strip away the ﬁrst 8 bytes of an
A-MSDU frame if these bytes look like a valid LLC/SNAP
header, and then further process the frame. This behavior is
USENIX Association
30th USENIX Security Symposium    165
not compliant with the 802.11 standard. When the ﬁrst 8 bytes
are stripped, the length ﬁeld of the ﬁrst A-MSDU subframe
corresponds with the ﬁrst two bytes of the source IP address.
If the victim is not behind a ﬁrewall, we can spoof the source
address of our IPv4 packets such that the injected packet will
again be contained in the second A-MSDU subframe. If the
victim blocks spoofed IP addresses, we can rent a server on
Amazon AWS with an IP address in the subnet 3.5.0.0/16 [7].
The ﬁrst A-MSDU subframe then has a length of 773 bytes,
which leaves sufﬁcient space to inject malicious packets.
3.7 Discussion
To prevent aggregation attacks, stations must either not use
A-MSDUs, or always authenticate the A-MSDU ﬂag, i. e.,
only use SPP A-MSDUs. We elaborate on this in Section 7.2.
We conjecture that turning normal frames into A-MSDUs
can also be abused as an oracle to leak data. For instance, an
AP may act differently depending on the values that are lo-
cated at the A-MSDU header ﬁelds. We leave a more detailed
analysis on abusing A-MSDUs to leak data as future work.
4 Mixed Key Attack against Fragmentation
In this section, we ﬁrst discuss the shared root cause of the two
fragmentation-based design ﬂaws that we discovered. We then
focus on the ﬁrst design ﬂaw, namely how the 802.11 standard
allows an attacker to forge frames by mixing fragments that
are encrypted under different keys. This design ﬂaw has been
assigned CVE-2020-24587. We show how to abuse this ﬂaw
to exﬁltrate client data and, for instance, recover sensitive info
sent over plaintext HTTP connections.
4.1 Fragmentation design ﬂaws
At a high level, the discovered fragmentation ﬂaws are caused
by not properly separating different security contexts and their
associated memory, receive queues, or fragment caches:
Mixed key attack A ﬁrst problem is that the 802.11 stan-
dard does not require that each fragment was decrypted using
the same key. Therefore, an attacker can forge frames by mix-
ing fragments of frames that were encrypted under different
keys, i. e., by mixing fragments belonging to different secu-
rity contexts. This design ﬂaw will be further discussed and
abused in this section.
Fragment cache poisoning The 802.11 standard also
does not state when decrypted fragments should be removed
from memory, i. e., from the fragment cache. That is, de-
crypted fragments are not dropped when the security context
changes due to a (re)connect or (re)association. An attacker
can abuse this to inject fragments into a victim’s fragment
cache, and then combine this with legitimate fragments to in-
ject packets or exﬁltrate decrypted fragments (see Section 5).
4.2 Threat model
We ﬁrst focus on the mixed key attack, which works against
WEP, CCMP, and GCMP. The older TKIP protocol is only
affected when the receiver forgets to verify the authenticity
of reassembled frames (see Section 6.7).
The attack requires that one or more devices in the network
send fragmented frames. Although not all devices do this by
default, because their conﬁgured fragmentation threshold is
equal to or bigger than the MTU, it is recommended to use
fragmentation in noisy environments. Moreover, 802.11ax de-
vices are expected to support dynamic fragmentation, making
the usage of fragmentation more common in practice (recall
Section 2.2). For instance, our Cisco Catalyst 9130 has dy-
namic fragmentation enabled by default, and Aruba APs also
support it. With this in mind, our fragmentation-based attacks
are especially relevant against new devices.
To perform the attack, the network must also periodically
refresh the session key of connected devices, and we must be
able to trick the victim into sending a packet to an attacker-
controlled server. Although most networks by default do not
periodically refresh the session key, we do remark that this
assumption matches the requirement of certain key reinstalla-
tion attacks against WPA2 [57, §3.4]. To trick the victim into
sending a packet to a server under our control, we can rely on
the relaxed BEAST threat model. In Section 5 and 6.2, we ex-
ploit additional design and implementation ﬂaws to perform
mixed key attacks without these assumptions.
4.3 Exﬁltrating sensitive data
The adversary’s goal is to forge a packet by mixing fragments
of frames that were encrypted under different keys. These
fragments must have consecutive packet numbers since the
receiver will otherwise discard the fragments. Although many
implementations do not check whether fragments use con-
secutive packet numbers (see Section 6.2), our attack does
assume the victim checks this, and thereby illustrates that
even implementations that fully comply with the standard are
vulnerable.
Mixing fragments Figure 4 illustrates our attack, where
we exploit a vulnerable AP to exﬁltrate data sent by the client.
The attack starts with the generation of a packet towards the
adversary’s server (stage 1(cid:13)). This attacker-destined packet
can, for instance, be generated by social engineering the vic-
tim into loading an innocent resource on the adversary’s
server. By hosting this resource on a long URL, the resulting
packet will be large enough such that it is split in two frag-
ments before transmission. These two encrypted fragments
{Frag1(s)}.
are represented by Encn
The attacker then relies on a multi-channel MitM position
to intercept all fragmented frames, and detects the attacker-
destined packet based on its unique length. Note that the