title:MPInspector: A Systematic and Automatic Approach for Evaluating
the Security of IoT Messaging Protocols
author:Qinying Wang and
Shouling Ji and
Yuan Tian and
Xuhong Zhang and
Binbin Zhao and
Yuhong Kan and
Zhaowei Lin and
Changting Lin and
Shuiguang Deng and
Alex X. Liu and
Raheem Beyah
MPInspector: A Systematic and Automatic Approach 
for Evaluating the Security of IoT Messaging Protocols
Qinying Wang, Zhejiang University; Shouling Ji, Zhejiang University; 
Binjiang Institute of Zhejiang University; Yuan Tian, University of Virginia; 
Xuhong Zhang, Zhejiang University; Binjiang Institute of Zhejiang University; 
Binbin Zhao, Georgia Institute of Technology; Yuhong Kan and Zhaowei Lin, 
Zhejiang University; Changting Lin and Shuiguang Deng, Zhejiang University; 
Binjiang Institute of Zhejiang University; Alex X. Liu, Ant Group; Raheem Beyah, 
Georgia Institute of Technology
https://www.usenix.org/conference/usenixsecurity21/presentation/wang-qinying
This paper is included in the Proceedings of the 
30th USENIX Security Symposium.
August 11–13, 2021
978-1-939133-24-3
Open access to the Proceedings of the 
30th USENIX Security Symposium 
is sponsored by USENIX.
MPInspector: A Systematic and Automatic Approach
for Evaluating the Security of IoT Messaging Protocols
Qinying Wang†, Shouling Ji†,¶, Yuan Tian+, Xuhong Zhang†,¶, Binbin Zhao§, Yuhong Kan†, Zhaowei
Lin†, Changting Lin†,¶, Shuiguang Deng†,¶, Alex X. Liu ‡, and Raheem Beyah§
†Zhejiang University, ¶Binjiang Institute of Zhejiang University, +University of Virginia, §Georgia Institute of Technology, ‡Ant Group
E-mails: {wangqinying, sji}@zju.edu.cn, PI:EMAIL, PI:EMAIL, PI:EMAIL, {kan_yuhong,
leon.linzw}@zju.edu.cn,
PI:EMAIL, PI:EMAIL, PI:EMAIL,
rbeyah@gatech.edu.
Abstract
Facilitated by messaging protocols (MP), many home devices
are connected to the Internet, bringing convenience and ac-
cessibility to customers. However, most deployed MPs on
IoT platforms are fragmented, which are not implemented
carefully to support secure communication. To the best of
our knowledge, there is no systematic solution to perform
automatic security checks on MP implementations yet.
To bridge the gap, we present MPInspector, the ﬁrst au-
tomatic and systematic solution for vetting the security of
MP implementations. MPInspector combines model learn-
ing with formal analysis and operates in three stages: (a)
using parameter semantics extraction and interaction logic
extraction to automatically infer the state machine of an MP
implementation, (b) generating security properties based on
meta properties and the state machine, and (c) applying auto-
matic property based formal veriﬁcation to identify property
violations. We evaluate MPInspector on three popular MPs,
including MQTT, CoAP and AMQP, implemented on nine
leading IoT platforms. It identiﬁes 252 property violations,
leveraging which we further identify eleven types of attacks
under two realistic attack scenarios. In addition, we demon-
strate that MPInspector is lightweight (the average overhead
of end-to-end analysis is ~4.5 hours) and effective with a
precision of 100% in identifying property violations.
1 Introduction
Messaging protocol (MP) is critical for IoT platforms, as it
connects IoT devices to the Internet and enables the commu-
nication between IoT devices, users, manufactures, and IoT
app servers. IoT platforms offer customized MP implemen-
tations with different security schemes for IoT vendors. For
example, Google IoT Core adopts Json Web Token (JWT)
for authentication [14]. Unfortunately, MPs are hard to de-
sign correctly and several implementation ﬂaws have been
identiﬁed through ad-hoc manual analysis [45]. These ﬂaws
Shouling Ji and Xuhong Zhang are the co-corresponding authors.
lead to critical consequences, such as denial of service (DoS),
sensitive data theft and malicious message injection [37, 54].
So far, IoT platforms still have limited understanding about
the security of MPs, since neither industry nor academia has
good ways to systemically and effectively evaluate the secu-
rity of MP implementations. Considering the large amount of
diversiﬁed IoT platforms, manual analysis that requires signif-
icant expert efforts is infeasible. Consequently, the pressing
question is how to build an automatic tool to verify the se-
curity properties of MP implementations on different IoT
platforms effectively? To answer the question, there are two
main challenges.
Diverse and customized MP implementations. The MP
implementations are diverse. Speciﬁcally, there are multiple
types of MPs with different message formats and mechanisms,
such as MQTT (Message Queuing Telemetry Transport) [46],
CoAP (Constrained Application Protocol) [1] and AMQP
(Advanced Message Queuing Protocol) [4]. In addition, there
are various customized implementations on different IoT plat-
forms with different programming languages for each MP.
These diverse and customized MP implementations stress the
scalability of the analysis. Even worse, there are always gaps
between the customized MP implementations and the stan-
dard MP speciﬁcation, such as the differences on the conﬁgu-
ration, parameter semantics, and interaction logic. Therefore,
previous work on analyzing the high-level protocol speciﬁca-
tions [23, 27, 28, 34] is hardly applicable in the IoT context.
Complex and closed-source MP workﬂow. Checking the
MP implementation requires precisely modeling MP work-
ﬂow including the exchanged parameters and interaction logic.
However, the workﬂow of MP is complicated, as it connects
multiple devices and usually consists of multiple messages.
Even worse, MP implementations are closed-source. As an
example, the commercial platforms such as AWS IoT Core
[5] and Azure IoT Hub [6] do not open their source code
on the server side. The closed-source MP implementation
requires any testing approach to be black-box and system-
agnostic. Accordingly, previous research on program analysis
for protocols [25, 40, 41] cannot be used.
USENIX Association
30th USENIX Security Symposium    4205
To handle these challenges, previous research conducts
reverse engineering on the ﬁrmware and apps [36], which
requires large expert knowledge. Therefore, it is not scalable
and can be time-consuming. Fuzzing is an alternative solution
[38, 39, 43] to detect ﬂaws by monitoring the crashes of
the system under test. However, it can hardly cover the full
workﬂow of an MP implementation and cannot discover logic
ﬂaws that do not cause crashes.
Our solution. To address the above challenges, we propose
and implement MPInspector, the ﬁrst framework to system-
atically and automatically identify security ﬂaws in MP im-
plementations. We follow a property-driven and model-based
testing philosophy. First, we model an MP implementation
into a state machine. Second, we gather the security properties
that need to be veriﬁed from the standard MP speciﬁcation
and reﬁne them based on the learned state machine. Finally,
we detect property violations on the state machine by formal
veriﬁcation. Speciﬁcally, the extracted state machine includes
transition messages and transition logic. Transition messages
are the messages that trigger the transition from one state to
another, while transition logic is also referred to as interac-
tion logic. To support in-depth inspection of security ﬂaws
in MP implementations, MPInspector recovers the detailed
semantics of transition messages, which refer to as the cus-
tomized composition of each parameter in the messages. For
example, the ClientID parameter in MQTT [46] may consist
of ProjectId and DeviceId in a customized MP implemen-
tation. As for the interaction logic, we adopt active model
learning [21], a framework to construct the state machine
of a system by providing inputs and observing outputs. In
MPInspector, the inputs are messages sent to an MP imple-
mentation and the outputs are the relevant response messages
or the connection states. Then, MPInspector gathers security
properties that need to be veriﬁed, which include the meta
properties concluded from the standard MP speciﬁcation and
the extended properties inferred from the customized MP im-
plementation. After that, we convert the state machine and
security properties into Tamarin codes and perform formal
veriﬁcation with Tamarin Prover[17]. In the above procedures,
we meet several challenges as follows.
First, extracting message semantics is non-trivial, as some
parameters may be encrypted, making their semantics hidden.
To tackle this, we construct trafﬁc- and NLP-based methods
to identify the crypto function of each encrypted parameter.
Then, the semantics of a parameter can be recovered accord-
ing to the deﬁnition of the identiﬁed crypto function. Some
common crypto functions can be identiﬁed by pattern match-
ing on the real trafﬁc, while it is almost impossible to deﬁne
patterns for the unknown customized crypto functions. Since
the parameters with customized crypto functions are usually
speciﬁed in the IoT manufacturer documents offered by IoT
platforms, we further develop a novel NLP-based method to
directly extract the semantics of these parameters from the
IoT manufacturer documents.
Second, considering the IoT context that involves multiple
parties and multiple types of messages, active model learn-
ing cannot be directly applied to extract the interaction logic
of MP implementations, as it only supports two parties and
can be time-consuming when dealing with multiple types
of messages. Moreover, when applying model learning to
test MP implementations in the real world, they may pro-
duce uncertain responses due to uncontrolled factors, e.g.,
failing to receive an expected response due to timeout. In
such a case, model learning may be trapped into an endless
learning procedure, thereby failing to construct the state ma-
chine. To overcome these issues, we design an enhanced
active model learning framework to support observing out-
puts from multiple parties. Further, to speed up the learning
procedure, MPInspector cuts down unnecessary input tests.
To overcome the uncertainty issue, MPInspector stops the
learning procedure if the same state machine is constructed
more than once.
Third, when performing formal veriﬁcation, the traditional
Tamarin Prover may fail to prove some properties, as some
MP implementations have complex state transitions. In order
to solve this problem, we design a helping oracle to guide the
proof, which is a script that can help Tamarin Prover adjust
the order of solving goals during the proof.
Evaluation. We apply MPInspector on three popular MPs,
MQTT, CoAP and AMQP, implemented on nine leading IoT
platforms (e.g., Google IoT Core, Azure IoT Hub) [20]. It
successfully recovers the state machines of all the MP im-
plementations and formally veriﬁes their authentication and
secrecy properties. The average overhead of end-to-end anal-
ysis is 4.5 hours with a precision of 100% in identifying prop-
erty violations. Speciﬁcally, it checks 57 customized security
properties and detects 252 property violations, leveraging
which we further identify eleven types of attacks. These re-
sults and ﬁndings are alarming. Each platform at least violates
18 properties, which enables at least one attack. The resulting
attacks have serious consequences, e.g., privacy leakage and
malicious data injection. Our research further shows that the
main root causes of risky MP implementations are: (1) the
gap between ad-hoc MP implementations and the standard
speciﬁcation, (2) the undermined security mechanisms under
the resource constrained IoT context, and (3) the lack of care-
ful consideration about device sharing, multi-party involved
communication situations under the IoT context.
Summary and contributions. Our key contributions are:
• We propose MPInspector, the ﬁrst framework for
automatic security analysis of MP implementations.
MPInspector is precise on the detection of MP imple-
mentation ﬂaws and is extensible and conﬁgurable to dif-
ferent IoT platforms and different protocols. We release
MPInspector as an open-source tool for facilitating fur-
ther studies.
• With MPInspector, we evaluate three popular MPs on
nine leading IoT platforms and detect 252 property vi-
4206    30th USENIX Security Symposium
USENIX Association
olations. We also uncover eleven kinds of attacks that
exploit the combinations of property violations under
practical threat models. We have responsibly reported
these vulnerable implementations to the vendors and got
acknowledged from vendors such as Tuya Smart.
2 Background
2.1 Cloud based IoT Platforms
Today, most IoT platforms (e.g., AWS and Azure) offer MP
implementations, which serve as networking infrastructures
for IoT manufactures and also called SaaS (Software-as-a-
Service) applications. As shown in Figure 1, the service con-
tains the message broker (can be conﬁgured by IoT manu-
factures), device SDKs (e.g., cameras and lockers) and APP
SDKs (designed for terminal users). The device sends teleme-
try and event messages and receives command messages via
MPs, and the user application also sends control commands
to the devices remotely via MPs. We regard the device and the
application as clients. All the messages between the device
and the application are forwarded by the broker on the remote
IoT platform. We regard the broker as the server. IoT device
manufactures buy and deploy the SaaS application for MP to
enable users remotely control their devices.
Figure 1: A typical architecture of MP implementations.
Studying the SaaS appliactions for MPs can cover most de-
vices in the real world. A previous survey [19] shows that IoT
manufactures simply deploy the SaaS without customization.
As a result, security analysis of the SaaS appalications for MP
can reﬂect the real-world threats.
2.2 MP Types and Implementations
Various MPs with distinct message types and formats have
been implemented for IoT systems. For example, MQTT has
nine key types of messages running over TCP. Among them,
CONNECT is one type of MQTT messages, and it has ﬁve key
parameters including ClientID, Username, Password,
WillTopic and WillMessage. Meanwhile, CoAP has two
types of messages running over UDP. Among them, CON
is one type of CoAP messages, and it has six key pa-
rameters including Uri, MessageId, Request, Option,
Token and Payload. For existing MPs, MQTT, CoAP and
AMQP are the three most prominent MPs adopted by IoT
platforms [20]. For more details and distinctions about these
MPs, please refer to their standard speciﬁcations [1, 4, 46].
Based on the standard MP speciﬁcation, MP implementa-
tions can be customized by the IoT platforms, including the
conﬁguration, the parameters in the messages and the mes-
sage interaction logic. As for conﬁgurations, IoT platforms
such as Aliyun Cloud and Tuya Smart optionally adopt the
secure session protocol such as SSL/TLS. The conﬁguration
of secure session protocol may also be customized by IoT
platforms. For example, Google IoT Core and Azure IoT Hub
do not support authenticating a client by the certiﬁcation on
the server side. Instead, they adopt customized tokens for au-
thentication. As for parameters, the parameters in messages
can have customized semantics. For example, on AWS IoT
Core, the Username and Password are not adopted in the im-
plementation, while on Google IoT core, Username in a CON-
NECT message is composed of ProjectId and deviceId,
e.g., light123/dev1. Besides, Tuya Smart assigns a control
command and a timestamp to the payload in the PUBLISH
message and encrypts these values by a private key using
a customized crypto function. Moreover, the message inter-
action logic can be customized. As an example, Bosch IoT
platform allows two clients with the same ClientID to be
connected with the server at the same time, which is, however,
not allowed in the standard MQTT speciﬁcation.
3 Threat Model
We consider two practical attack scenarios as follows.
Neighbor scenario. In this scenario, the victim and attacker
are within the same local network, e.g., in rental homes, and
the attacker can perform network-based exploits. We apply the
standard Dolev-Yao threat model [31] on the communication
channel, under which the attacker can eavesdrop and modify
all messages transferred on this channel and can impersonate
a legitimate participator to inject messages.
Tenant scenario. Inspired by previous works [35, 36], the
tenant scenario characterizes the situations where a victim
uses some devices previously used by an attacker. Such cases
include second-hand devices [9] and devices in hotels, Airbnb
and rental homes [30]. In this scenario, when the attacker
owns the device, he/she can collect the device identity includ-
ing the password of the device or leave a backdoor on the
device. After that, when the device is delivered to the victim,
the attacker can use the collected identity or the injected back-
door to conduct attacks by sending some malicious command
or publishing fake state of the device.
In both scenarios, the goal of the attacker is to exploit the
ﬂaws in the client-server interaction to take control of the
victim device or monitor/manipulate the victim device data.
4 Design and Implementation
4.1 Overview
At a high level, MPInspector aims to automatically verify the
security properties of MP implementations on different IoT
platforms. Figure 2 provides an overview of MPInspector,
which includes ﬁve modules: message semantics extraction,
USENIX Association
30th USENIX Security Symposium    4207
Figure 2: Overview of MPInspector. MPInspector supports automatically testing of any customized implementation of MQTT,
CoAP, or AMQP out of the box. To support a new type of MP, the modules labeled with a star need to be extended.
interaction logic extraction, property generation, formal code
translation and formal veriﬁcation.
The workﬂow is as follows. First, the message semantics
extraction module accepts MP trafﬁc and IoT platform doc-
uments as inputs, and extracts the customized composition
semantics of each parameter speciﬁed in the standard MP
speciﬁcation. Second, the interaction logic extraction module
performs active model learning to infer the raw state machine
by sending messages to the involved parties in the MP im-
plementation and monitoring their responses. This module
requires users to specify the communication conﬁguration in
order to generate the messages in the learning process. After
these two stages, MPInspector adds the message semantics
extracted from the ﬁrst module to the transition messages
in the raw state machine inferred in the second module to
form a detailed state machine. Third, the property generation
module extends the meta properties from the standard MP
speciﬁcation with the extended properties inferred from the
detailed state machine to form the ﬁnal security properties
to be validated. Fourth, the formal code translation module
translates the detailed state machine and security properties
into Tamarin code. Finally, MPInspector applies Tamarin
Prover to perform formal veriﬁcation on the Tamarin code.
The ﬁnal outputs are the violated security properties. To make
a clearer clariﬁcation, we take the MQTT implementation on
the Bosch IoT platform as a running example to explain the
main process, which is shown in Appendix B.
4.2
Inputs
MPInspector takes three inputs: MP trafﬁc, IoT platform
documents and communication conﬁgurations.
MP trafﬁc. MPInspector accepts MP trafﬁc to extract mes-
sage semantics. The analyst can collect the trafﬁc using
his/her device and application to interact with the broker.
He/she can set an access point (AP), to which his/her de-
vice and application are connected. Then, he/she can apply
Wireshark or SSLSplit to record the trafﬁc produced during
the interaction. To collect as many different types of messages
as possible, the analyst can perform different actions on the
client, including sending commands and changing the state
of the client.
IoT platform documents. IoT platform documents are sup-
plements to identify the semantics of parameters that cannot
be identiﬁed from MP trafﬁc. IoT platforms generally offer
rich semantics of these parameters in their publicly available
documents for IoT manufacturers. However, the downside of
the semantics information in the documents is that it might
not match the real implementation. Therefore, we treat the
documents as a secondary input and only use it when the
parameter semantics cannot be extracted from the MP trafﬁc.
Communication conﬁgurations. These conﬁgurations are
required for MPInspector to generate real messages to com-
municate with the broker in the model learning process. They
include the MP type and key communication arguments of