      sys.exit()
    print hex(hHandle)
    if __name__ == '__main__':
            alloc_not_named_mutex()
    variable = raw_input('Press any key to exit...')
这段代码将为我们分配一个未命名的 mutex，打印出它的句柄并等待退出。我们需要等待着，所以我们可以在 WinDBG
中探索内核池，如果进程退出，则mutex 将被破坏。这里我得到了一个 0x70 的句柄，我们来看看怎样在 WinDBG 中找到它。首先我需要找到
Python 进程并切换上下文，可以这样做：
    lkd> !process 0 0 python.exe
    PROCESS 86e80930  SessionId: 1  Cid: 0240    Peb: 7ffd4000  ParentCid: 0f80
        DirBase: bf3fd2e0  ObjectTable: a8282b30  HandleCount:  41.
        Image: python.exe
    lkd> .process 86e80930  
    Implicit process is now 86e80930
第一条命令将为我们找到进程，第二条命令将切换上下文。然后我们查询句柄，就能得到内存中对象的地址：
    lkd> !handle 70
    PROCESS 86e80930  SessionId: 1  Cid: 0240    Peb: 7ffd4000  ParentCid: 0f80
        DirBase: bf3fd2e0  ObjectTable: a8282b30  HandleCount:  41.
        Image: python.exe
    Handle table at a8282b30 with 41 entries in use
    0070: Object: 86e031a8  GrantedAccess: 001f0001 Entry: 8c0d80e0
    Object: 86e031a8  Type: (8521a838) Mutant
        ObjectHeader: 86e03190 (new version)
            HandleCount: 1  PointerCount: 1
这样我们就可以找到池的位置，细节如下：
    lkd> !pool 86e031a8  
    Pool page 86e031a8 region is Nonpaged pool
     86e03000 size:   98 previous size:    0  (Allocated)  IoCo (Protected)
     86e03098 size:   90 previous size:   98  (Allocated)  MmCa
     86e03128 size:   40 previous size:   90  (Allocated)  Even (Protected)
     86e03168 size:   10 previous size:   40  (Free)       Icp 
    *86e03178 size:   50 previous size:   10  (Allocated) *Muta (Protected)
      Pooltag Muta : Mutant objects
     86e031c8 size:   40 previous size:   50  (Allocated)  Even (Protected)
     86e03208 size:   40 previous size:   40  (Allocated)  Even (Protected)
它显示在非分页池中需要 0x50 字节大小的位置。无论我们重复多少次，都是
0x50。看起来确实如此。如果我们将之前的代码放在一个循环中，我们可以看到它能够工作，并且可以进行很棒的堆喷射：
     851ef118 size:   50 previous size:   50  (Allocated)  Muta (Protected)
     851ef168 size:   50 previous size:   50  (Allocated)  Muta (Protected)
     851ef1b8 size:   50 previous size:   50  (Allocated)  Muta (Protected)
     851ef208 size:   50 previous size:   50  (Allocated)  Muta (Protected)
     851ef258 size:   50 previous size:   50  (Allocated)  Muta (Protected)
     851ef2a8 size:   50 previous size:   50  (Allocated)  Muta (Protected)
     851ef2f8 size:   50 previous size:   50  (Allocated)  Muta (Protected)
     851ef348 size:   50 previous size:   50  (Allocated)  Muta (Protected)
     851ef398 size:   50 previous size:   50  (Allocated)  Muta (Protected)
     851ef3e8 size:   50 previous size:   50  (Allocated)  Muta (Protected)
     851ef438 size:   50 previous size:   50  (Allocated)  Muta (Protected)
     851ef488 size:   50 previous size:   50  (Allocated)  Muta (Protected)
     851ef4d8 size:   50 previous size:   50  (Allocated)  Muta (Protected)
     851ef528 size:   50 previous size:   50  (Allocated)  Muta (Protected)
     851ef578 size:   50 previous size:   50  (Allocated)  Muta (Protected)
     851ef5c8 size:   50 previous size:   50  (Allocated)  Muta (Protected)
     851ef618 size:   50 previous size:   50  (Allocated)  Muta (Protected)
     851ef668 size:   50 previous size:   50  (Allocated)  Muta (Protected)
     851ef6b8 size:   50 previous size:   50  (Allocated)  Muta (Protected)
     851ef708 size:   50 previous size:   50  (Allocated)  Muta (Protected)
那么如果我们给 Mutex 取一个名字，会有什么样的变化？这是另一段 Python 代码：
    def alloc_named_mutex(i):
            hHandle = HANDLE(0)
    hHandle = kernel32.CreateMutexA(None, False, "Pool spraying is cool " + str(i))
    if hHandle == None:
                    print "[-] Error while creating mutex"
      sys.exit()
    print hex(hHandle)
我给它传递了一个参数，因为如果我们要使用它来进行喷射，这将是很重要的，因为我们不能创建两个具有相同命名的 mutex。
一旦我们创建了 mutex，并且我们遵循与之前一样的逻辑，就可以看到其中有点不同：
    *871d39e8 size:   60 previous size:   30  (Allocated) *Muta (Protected)
      Pooltag Muta : Mutant objects
这一次它需要 0x60 字节，这也是一致的。我们也可以做同样的喷射，但具有不同的大小。这里有一些重要的东西。如果我们看一看池分配，就可以看到这是一个从
pool chunk 的头位置偏移 0x20 的指针，指向 Mutex 的名字：  
    lkd> dd 871d39e8 
    871d39e8  040c0006 e174754d 00000000 00000050
    871d39f8  00000000 00000000 9a06fb38 002e002e
    871d3a08  aab50528 00000000 00000002 00000001
    871d3a18  00000000 000a000e 86e0bd80 99a4fc07
    871d3a28  0008bb02 00000001 871d3a30 871d3a30
    871d3a38  00000001 00000000 00000000 01d10000
    871d3a48  040b000c 6d4d6956 b299b8c8 9a087020
    871d3a58  a8246340 00000000 00000000 85d4f0b0
    lkd> dd aab50528
    aab50528  006f0050 006c006f 00730020 00720070
    aab50538  00790061 006e0069 00200067 00730069
    aab50548  00630020 006f006f 0020006c 006f0031
    lkd> dS aab50528
    006c006f  "????????????????????????????????"
    006c00af  "????????"
我的 WinDBG 看起来是不想打印出对象的名字，但是如果你以十六进制格式查看它的 UNICODE，它就是我们给 Mutex
的命名。如果我们检查这个字符串的存储位置：
    lkd> !pool aab50528
    Pool page aab50528 region is Paged pool
     aab50000 size:   a8 previous size:    0  (Allocated)  CMDa
     aab500a8 size:   28 previous size:   a8  (Free)       3.7.
     aab500d0 size:   28 previous size:   28  (Allocated)  NtFs
     aab500f8 size:   28 previous size:   28  (Allocated)  MmSm
     aab50120 size:   38 previous size:   28  (Allocated)  CMnb Process: 86ef6760
     aab50158 size:  100 previous size:   38  (Allocated)  IoNm
     aab50258 size:   38 previous size:  100  (Allocated)  CMDa
     aab50290 size:   38 previous size:   38  (Allocated)  CMNb (Protected)
     aab502c8 size:   28 previous size:   38  (Allocated)  MmSm
     aab502f0 size:   20 previous size:   28  (Allocated)  CMNb (Protected)
     aab50310 size:   60 previous size:   20  (Allocated)  Key  (Protected)
     aab50370 size:   20 previous size:   60  (Allocated)  SeAt
     aab50390 size:   d8 previous size:   20  (Allocated)  FMfn
     aab50468 size:   28 previous size:   d8  (Allocated)  CMVa
     aab50490 size:   30 previous size:   28  (Allocated)  CMVa
     aab504c0 size:   60 previous size:   30  (Allocated)  Key  (Protected)
    *aab50520 size:   38 previous size:   60  (Allocated) *ObNm
      Pooltag ObNm : object names, Binary : nt!ob
可以看到它在分页池中！之后我们还会回顾这里，但在这里先透露一些东西：我们可以使用命名的 Mutex 在分页池区域（paged pool
area）中创建自定义大小的分配，大小取决于我们给出的名称。这对于在分页池中进行喷射是非常有用的。
**第二部分——使用pykd编写脚本**
正如上一部分中讲到的，获得对象实际大小的过程是相当简单的，但是如果我们需要获得很多对象大小的时候，这将是一个繁重的手工作业，因此为了避免浪费太多时间，此过程应该被自动化执行。手动操作几次当然是有好处的，特别是对初学者而言，但是更多的重复就没有意义了。那么我们如何编写
WinDBG 脚本？用 pykd！pykd 是 WinDBG 的一个很棒的 Python 扩展，它甚至允许在没有手动启动 WinDBG 的情况下编写脚本。
第一件事就是安装 pykd，这有时很让人头疼。它并不总是像听起来那么简单。如果我们下载预编译的版本，并将 pykd.pyd 文件放在 WinDBG 的
winext 目录下，可能是最简单的方法。请让 WinDBG、Python、VCRedict 和 pykd 的架构相同（x86 或
x64），这一点很重要。你也可以通过 PIP 来安装 pykd，但是我在尝试导入它的时候并没有成功。另外一定要使用最新版本的 Python
（2.7.13），当启动 pykd 时，一些较旧的版本（如 2.7.9）会使 WinDBG 退出。至于那些更老版本的
Python（2.7.1），它曾经是可以工作的。但是你一旦这么做，它将成为一个非常强大的扩展。
于是我写了一个简单的函数来获取对象名称和句柄，并且会查找对象的大小。也许还有其他更优雅的解决方案，但下面的脚本已经可以满足我的需求：
    def find_object_size(handle,name):
    #find windbg.exe process
    wp = dbgCommand('!process 0 0 windbg.exe')
    #print wp
    #extract process "address"
    process_tuples = re.findall( r'(PROCESS )([0-9a-f]*)(  SessionId)', wp)
    if process_tuples:
      process = process_tuples[0][1]
      print "Process: " + process
      #switch to process context
      dbgCommand(".process " + process)
      #find object "address"
      object_ref = dbgCommand("!handle " + h)
      object_tuples = re.findall( r'(Object: )([0-9a-f]*)(  GrantedAccess)', object_ref)
      if object_tuples: