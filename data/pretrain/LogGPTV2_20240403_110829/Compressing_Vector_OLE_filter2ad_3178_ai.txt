Therefore,
R← NIZKSetup(1λ, F, C, T ), (x, π)
Pr[(pk, vk)
(∃w, C(x, w) = 1) ∧ NIZKVerify(vk, F, j, x, π) = acc]
= Pr[q
R← Setup(1λ, F, n, qi))i≤m,
R← A(pk, F, C, j) :
(x, π)
= Pr[q
(x, π)
= Pr[q
0, seedi
1)
R← Query(F, C), ((seedi
R← A((seedi
R← Query(F, C), q(cid:48) R← Query(F, C), ((seedi
R← A((seedi
R← Query(F, C), q(cid:48) R← Query(F, C), ((seedi
R← A((seedi
0, seedi
1)
R← Setup(1λ, F, n, q(cid:48)
i))i≤m,
0, seedi
1)
R← Setup(1λ, F, n, qi))i≤m,
0)i≤m, F, C, j) : (∃w, C(x, w) = 1) ∧ Verify(F, x, q, q · Π∗ + b∗) = acc]
0)i≤m, F, C, j) : (∃w, C(x, w) = 1) ∧ Verify(F, x, q(cid:48), q(cid:48) · Π∗ + b∗) = acc]
(x, π)
by the security of the VOLE generator (this requires m hybrids to replace each q(cid:48)
≤ε by the reusable ε-soundness of the HVZK-LIP.
0)i≤m, F, C, j) : (∃w, C(x, w) = 1) ∧ Verify(F, x, q(cid:48), q(cid:48) · Π∗ + b∗) = acc]
i by qi)
R← NIZKSetup(1λ, F, C, T ),
The same strategy can also be used to show that Pr[(pk, vk)
R← A(pk, F, C, j) : NIZKVerify(vk, F, j, x, π) = acc] is either 1 or bounded above by ε,
(x, π)
using the second part of the reusable ε-soundness property of the HVZK-LIP. Note that
q(cid:48) is chosen independently of everything else in the last probability of the above argument
(and in particular, independently of the inputs of A), hence the reusable soundness of the
HVZK-LIP applies even though the word x is adversarially chosen.
We now move to the general case, where A is given oracle access to Oj[vk]. We further
assume that |F| = 2ω(λ) and that the HVZK-LIP satisﬁes O(|C|/|F|)-reusable soundness;
note that |C|/|F| = negl(λ). We proceed through a sequence of j + 1 hybrids Ht for
t = 0 to j, where the oracle Oj[vk] is replaced by the following stateful oracle Ot
j[vk =
1)1≤m)]: it is initialized with k = 1 and, on input (xk, πk), it proceeds as follows
(q, (seedi
(wi = Expand(1, seedi
– If k ≤ t, it picks q(cid:48) R← Query(F, C), ((seed(cid:48)i
1), divides it into blocks w(cid:48)k
i ∈ Fd):
0, seed(cid:48)i
1)
Expand(1, seed(cid:48)i
returns Verify(F, xk, q(cid:48), ak), and sets k ← k + 1;
i ∈ Fd, sets ak =(cid:80)m
R← Setup(1λ, F, n, q(cid:48)
i=1(q(cid:48)
1) is divided into blocks wj
i))i≤m, sets w(cid:48)
i · ak
i + w(cid:48)k
i =
i ) − c,
– If k > t and k ≤ j, it sets ak =(cid:80)m
sets k ← k + 1;
i=1(qi · ak
i + wk
Compressing Vector OLE
33
i )− c, returns Verify(F, xk, q, ak), and
j [vk] ≡ Oj[vk]. The indistinguishability between Ht and Ht+1 follows from the
[vk] is their answer to the t-th query,
– If k > j, it ignores the query.
Note that O0
fact that the only diﬀerence between Ot
j[vk] and Ot+1
which are equal with overwhelming probability since
R← Query(F, C), q(cid:48) R← Query(F, C), ((seedi
R← A((seedi
(x, π)
Pr[q
j
0)i≤m, F, C, j) : ∧Verify(F, x, q(cid:48), q(cid:48) · Π∗ + b∗) = acc]
0, seedi
1)
R← Setup(1λ, F, n, qi))i≤m,
i=1 vk
1, . . . , ak
1, . . . , ak
1)i≤m), it computes (wi)i≤m
is either 1 or bounded above by ε = negl(λ). Furthermore, the answers of the oracle Oj
j[vk]
are entirely independent of vk, hence can be simulated without using it. Therefore, the
hybrid Hj corresponds exactly to the base case, where A is not given access to any oracle,
which concludes the proof.
m, c =(cid:80)m
m) uniformly at random, and sets c ←(cid:80)m
R← Expand(1, seedi
We now turn our attention to adaptive multi-theorem zero-knowledge. The simulator
NIZKSim, on input (vk, F, k, x), simulates πk = (ak
i ) as follows: from
1)i≤m. Then, it sets ak R←
vk = (q, (seedi
Sim(F, C, q, x), using the simulator of the honest-veriﬁer zero-knowledge property of the
i )−ak.
HVZK-LIP. It picks (ak
To show that NIZKSim produces proofs indistinguishable from honest proofs, we pro-
ceed through a sequence of hybrids. H0 corresponds to the initial game, where A is given
oracle access to O0[pk], and H1 to the game where A is given oracle access to O1[vk]. In the
hybrid H0.i, we modify O0[pk] as follows: instead of using the (ui, vi) given by extending
the seedi
0, the oracle has vk hardcoded, computes the wi and q from vk, and picks uni-
formly random vectors ui. Then, it sets vi ← wi − qiui. Note that distinguishing H0.i from
H0.i−1 corresponds exactly to breaking the security property of the VOLE generator (more
precisely, the second requirement of its security property) with respect to the i-th seed. In
hybrid H0.m, the oracle does not use pk anymore.
picks Π k R← Prove(F, C, x, w), and sets ak ← q · Π k. Then, it picks (ak
We deﬁne the hybrid H0.m+1 to be one in which the oracle computes ak as follows: it
m) uniformly
i ) − ak. Observe that H0.m+1 is distributed
identically to H0.m. Now, the only diﬀerence between H0.m+1 and H1 is that ak is computed
as q · Π k in H0.m+1, and as Sim(F, C, q, x) in H1. Therefore, H0.m+1 and H1 are perfectly
indistinguishable, since distinguishing them corresponds exactly to breaking the honest-
veriﬁer zero-knowledge property of the HVZK-LIP. This concludes the proof.
at random, and sets c ← (cid:80)m
i=1(qi · ak
1, . . . , ak
i=1(qi·ak
i +wk
i + wk
Instantiations. As shown in [BCI+13], any linear PCP with bounded veriﬁcation degree
can be compiled into an HVZK-LIP with a small overhead. In particular, the QAP-based
linear PCP of GGPR [GGPR13] implies an HVZK-LIP proving the satisﬁability of arith-
metic circuit C of size s over F with parameters m = O(s), d = 4, and  = O(s/|F|),
where the proof Π is generated from (x, w) in time quasi-linear in s. This results in NIZK
protocols in which O(s) instances of a VOLE generator can be used to non-interactively
prove any polynomial number of statements C(xj,·), and where each proof contains O(s)
ﬁeld elements. One can further improve the prover’s time complexity from quasi-linear to
linear by partitioning the circuit gates into constant-size blocks and applying an instance of
the GGPR-based LPCP (or even the simpler “Hadamard-based LPCP” [IKO07, BCI+13])
separately to each block. This optimization exploits the fact that we give up on succinct-
ness in our setting. We leave the reﬁned tuning of parameters and implementation of our
NIZK technique to future work.
34
Elette Boyle, Geoﬀroy Couteau, Niv Gilboa, and Yuval Ishai
Comparison with other NIZK ﬂavors. It is instructive to compare our NIZK protocols
to other ﬂavors of NIZK from the literature. First, whereas in standard multi-theorem NIZK
the computational cost of proving each theorem is independent of the number of theorems
being proved, we only achieve this in an amortized sense. This is due to the fact that our
dual construction does not provide a PRF-like “random access” to the VOLE entries, and
needs to generate all of them together. We stress, however, that the cost of implementing the
(reusable) correlated randomness setup is independent of the number of theorems that can
be proved based on this setup. Our setup is similar to the basic variant of the preprocessing
model used in the recent lattice-based NIZK protocols from [KW18]. It is strictly stronger
than the setup required by designated-veriﬁer NIZK protocols: see [CC18, CDI+18] and
references therein. Whereas in standard designated-veriﬁer NIZK a veriﬁer can post a public
key that can be used by many diﬀerent provers, our setup requires correlated randomness
or interaction between a designated veriﬁer and a designated prover. However, in cases
where the same prover proves many statements to the same veriﬁer, the amortized cost
of this setup is small. The main advantage of our protocol is that its online phase is very
lightweight and does not involve public key cryptography. In fact, if the Expand function
of the VOLE generator is invoked in the oﬄine phase (without any interaction), computing
and verifying each proof is less eﬃcient than evaluating C(x, w) in the clear by only a
small constant factor. Our protocols are the ﬁrst (reusable) NIZK protocols of any kind
to rely on (non-binary) LPN, or alternatively LPN and OT if the setup is generated by a
distributed protocol. Moreover, the ﬂavor of LPN on which we rely is not known to imply
public-key encryption.
Acknowledgements
We thank Kenny Paterson, Peter Scholl, and Gilles Zemor for helpful comments and point-
ers. We thank Peter for providing the actual running times from Table 4. Work supported
by ERC grant 742754 (project NTSC). E. Boyle additionally supported by ISF grant
1861/16 and AFOSR Award FA9550-17-1-0069. G. Couteau additionally supported by
ERC grant 724307 (project PREP-CRYPTO). N. Gilboa additionally supported by ISF
grant 1638/15, and a grant by the BGU Cyber Center. Y. Ishai additionally supported by
ISF grant 1709/14, NSF-BSF grant 2015782, and a grant from the Ministry of Science and
Technology, Israel and Department of Science and Technology, Government of India.
References
ADI+17.
ABD+16. C. Aguilar, O. Blazy, J.-C. Deneuville, P. Gaborit, and G. Zémor. Eﬃcient encryption from
random quasi-cyclic codes. Cryptology ePrint Archive, Report 2016/1194, 2016. http://
eprint.iacr.org/2016/1194.
B. Applebaum, I. Damgård, Y. Ishai, M. Nielsen, and L. Zichron. Secure arithmetic compu-
tation with constant computational overhead. LNCS, pages 223–254. Springer, Heidelberg,
2017.
D. Augot, M. Finiasz, and N. Sendrier. A fast provably secure cryptographic hash function.
Cryptology ePrint Archive, Report 2003/230, 2003. http://eprint.iacr.org/2003/230.
S. Arora and R. Ge. Learning parities with structured noise.
Computational Complexity (ECCC), page 66, 2010.
B. Applebaum, Y. Ishai, and E. Kushilevitz. How to garble arithmetic circuits. In 52nd FOCS,
pages 120–129. IEEE Computer Society Press, October 2011.
B. Applebaum and S. Lovett. Algebraic attacks against random local functions and their
countermeasures. In 48th ACM STOC, pages 1087–1100. ACM Press, June 2016.
M. Alekhnovich. More on average case vs approximation complexity. In 44th FOCS, pages
298–307. IEEE Computer Society Press, October 2003.
In Electronic Colloquium on
AL16.
Ale03.
AFS03.
AG10.
AIK11.
Compressing Vector OLE
35
ALSZ13. G. Asharov, Y. Lindell, T. Schneider, and M. Zohner. More eﬃcient oblivious transfer and ex-
tensions for faster secure computation. In ACM CCS 13, pages 535–548. ACM Press, November
2013.
B. Applebaum. Pseudorandom generators with long stretch and low locality from random local
one-way functions. In 44th ACM STOC, pages 805–816. ACM Press, May 2012.
App12.
ARS+15. M. R. Albrecht, C. Rechberger, T. Schneider, T. Tiessen, and M. Zohner. Ciphers for mpc
and fhe. In Annual International Conference on the Theory and Applications of Cryptographic
Techniques, pages 430–454. Springer, 2015.
BCG+17. E. Boyle, G. Couteau, N. Gilboa, Y. Ishai, and M. Orrù. Homomorphic secret sharing: Opti-
BCGI18.
BCI+13.
mizations and applications. In CCS 2017, pages 2105–2122, 2017.
E. Boyle, G. Couteau, N. Gilboa, and Y. Ishai. Compressing vector OLE. In Proceedings of
the 2018 ACM SIGSAC Conference on Computer and Communications Security, CCS 2018,
Toronto, ON, Canada, October 15-19, 2018, pages 896–912, 2018.
N. Bitansky, A. Chiesa, Y. Ishai, R. Ostrovsky, and O. Paneth. Succinct non-interactive argu-
ments via linear interactive proofs. In Theory of Cryptography - 10th Theory of Cryptography
Conference, TCC 2013, Tokyo, Japan, March 3-6, 2013. Proceedings, pages 315–333, 2013.
Bea96.
Bea95.
Bea92.
BDOZ11. R. Bendlin, I. Damgård, C. Orlandi, and S. Zakarias. Semi-homomorphic encryption and multi-
party computation. In EUROCRYPT 2011, LNCS 6632, pages 169–188. Springer, Heidelberg,
May 2011.
D. Beaver. Eﬃcient multiparty protocols using circuit randomization. In CRYPTO’91, LNCS
576, pages 420–432. Springer, Heidelberg, August 1992.