thwart these attacks, both effectively and efficiently.
2.1 Code Pointer Corruption Attack
Take an example of the vulnerable code on the left side of Figure 1.
The function handle_req(int, char*) is our point of interest. It
uses a local function pointer FP func as a local variable at Line 8
and uses another local buffer variable char buf[20] at Line 9. The
code assigns the variable func by selecting one of the predefined
function pointers (Line 11 and Line 13).
B (Lines 23–27). After freeing B, the heap will have a free memory
block between A and C. The free memory block starts with inline
metadata, which stores the size of the memory block and links to
the previous/next free memory blocks.
Then the program copies an input string to A (strcpy() at Line 30).
However, the strcpy code has a heap overflow vulnerability by
missing the length check of the input against the size of object A.
Thus, an attacker can trigger the heap overflow by supplying more
than 100 bytes to input and consequently will corrupt the heap
metadata right next to the object A. Corrupting heap metadata with
attacker-chosen data like this allows the attacker to mislead the
heap metadata management algorithm (Lines 33–37) [68]. As a re-
sult, future allocation will be located at an arbitrary location of the
attacker’s choice – e.g., a return address, function pointer, virtual
function pointer table pointer of a C++ object, and other security-
sensitive data, resulting in arbitrary memory write (Line 40), which
again can trigger arbitrary code execution if a code pointer is over-
written.
heap metadata
] [ C ]
Here, func can only point either X() (if uid == 0) or Y() (if
uid == 1). However, since the execution of strcpy(buf, input) at
Line 15 failed to check the length of input against the buffer size
(buf[20]), an attacker may trigger a stack buffer overflow vulnera-
bility by supplying more than 20 characters to the string variable
input. This allows the attacker to change func, for example, from
X() (suppose uid == 0) to an arbitrary function (e.g., system() to
execute an arbitrary command). Thereby, as a result of exploiting
the vulnerability at Line 17, the code may call an arbitrary function
of the attacker’s choice.
Implication. To launch a successful control-flow hijacking
attack, a popular avenue of attack is to overwrite a code/data
pointer to achieve arbitrary code execution.
2.2 Heap Metadata Corruption Attack
The code on the right side of Figure 1 is an example of a heap
metadata corruption attack. In particular, it demonstrates how heap
metadata corruption changes the behavior of a memory alloca-
tor and can be turned into an arbitrary memory write primitive,
which allows an attacker to alter arbitrary memory addresses with
attacker-assigned values. We assume the example program uses the
popular ptmalloc2 in glibc without loss of generality. The program
first allocates three heap objects A, B, and C in order and then frees
Implication. To launch a successful arbitrary memory write
attack via exploiting a heap overflow vulnerability, an attacker
must corrupt the heap metadata to mislead the heap management
algorithm.
2.3 Security-Sensitive Data
Based on the implications of our vulnerability analyses, we define
our notion of security-sensitive data to defend against these two
target attack classes. In a nutshell, we refer to security-sensitive
data as a variable/object in memory that is required to be corrupted
to complete a successful control-flow hijacking attack or a heap
metadata corruption attack.
From our stack overflow example, we have observed that attacks
require corrupting a code pointer (e.g., func) to achieve arbitrary
code execution. In addition, we extend our coverage to all sensitive
pointers [45], which include all code pointers and all data pointers
that can extend to a code pointer, to avoid indirect control-flow
hijacking leveraging sensitive data pointers. We follow the same
definition of sensitive pointers as Code Pointer Integrity (CPI) [45].
Likewise, in our heap overflow example, the attack requires cor-
rupting heap metadata (e.g., a free()-ed heap object, object B) to
Session 5D: Misc: Android and Vulnerabilities CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1614mislead the heap management algorithm to launch an arbitrary
memory write attack. We regard inline heap metadata as security-
sensitive data because corrupting such data is essential for launch-
ing a successful attack.
In the next section, we discuss how we can mitigate these attacks
by safeguarding our new security property, the Value Invariant
Property (VIP), on security-sensitive data.
3 Value Invariant Property (VIP)
We introduce the Value Invariant Property (VIP), which is a common
property of security-sensitive data in critical memory corruption
attacks. Our intuition behind VIP originates from a common pat-
tern in programs: security-sensitive data should never be changed
between two legitimate writes so there is a period such that security-
sensitive data is immutable. Moreover, in many programs, the value
of security-sensitive data does not frequently change. These ob-
servations form the basis of our value invariant property. More
specifically, during the life cycle of an object, we have observed
that the values of security-sensitive data do not change after their
legitimate assignments and before the object’s destruction or new
legitimate value assignments.
We now re-investigate the two code examples in Figure 1 with
respect to our value invariant property in the rest of this section.
3.1 Value Invariant Property of a Code Pointer
We analyze the life cycle of a security-sensitive code pointer func
with respect to its value invariant period as follows.
(1) Assignment: The first and only assignment to func is on Line 13.
(2) In-use (value invariant property holds): After the assignment and
before the destruction of the stack, func never changes. Thus,
its value invariant period starts right after the value assignment.
(3) Destruction: The stack variable func will become invalid when
the function unwinds its stack, i.e., at the function epilogue.
Thereby, the period ends when the variable is destructed.
Attack. Overwriting the value of func during the value invari-
ant period in any manner, e.g., via exploiting a buffer overflow
vulnerability on Line 15, may conclude in a successful attack,
such as arbitrary code execution.
3.2 Value Invariant Property of Heap Metadata
We also analyze the life cycle of security-sensitive heap metadata
with respect to its value invariant period. Unlike the previous exam-
ple, heap metadata is created internally when malloc() and free()
are called. For brevity, we illustrate the life cycle of heap metadata
for object B, which is first allocated at Line 24, as follows.
(1) Metadata allocation: Calling free() on Line 27 will change the
heap metadata for object B, which is between A and C, to a free
state.
(2) In-use (value invariant property holds): Before running additional
heap operations such as malloc() or free(), the heap metadata
of B should never change. Thus, its value invariant period starts
right after the free().
(3) Destruction: When subsequent malloc() is called at Line 33,
the memory allocator will allocate new memory on the old
object B’s location. Thus, the heap metadata of the old object
B is updated to the newly allocated state; the value invariant
period ends when the metadata is updated.
Attack. Overwriting the allocated heap metadata during the
value invariant period in any manner (e.g., via exploiting a heap
overflow vulnerability on Line 30) may mislead the heap manage-
ment algorithm in future malloc() and free() calls (Lines 33–37),
resulting in overlapping or arbitrary heap memory allocation.
Such a misled allocation allows arbitrary memory write when
code is written to the allocated memory (Line 40).
3.3 Utilizing VIP to Thwart the Attack
We can thwart memory corruption attacks on security-sensitive
data by disallowing any value update (i.e., protecting the integrity
of the value) during the value invariant period. In our examples, we
can identify that there is no legitimate value update when the value
invariant property holds (In-use phase) for both the func variable
and the heap metadata.
Hence safeguarding VIP requires a program to correctly keep
track of the value invariant period of security-sensitive data, regard-
ing their assignment/destruction life cycle. For our target security-
sensitive data (i.e., sensitive pointers and inline heap metadata), it
is possible to know the value invariant period precisely by analyz-
ing the load-store of sensitive pointers and malloc/free for the
construction/destruction of memory objects.
Asserting the value integrity defeats the attack because the at-
tacks in the examples require altering the value of security-sensitive
data during the value invariant period, which is blocked by the in-
tegrity protection. To protect VIP at runtime, one should be able to
confirm that the value has not been changed during the value in-
variant period. Before every use of VIP protected data (e.g., indirect
call/jump, malloc()/free() calls), the protection must assure that
the value has not been changed between the assignment/allocation
and the destruction time. Doing this cuts off the essential step of the
attack, protecting security-sensitive data from potential memory
corruption the attacks.
4 Threat Model and Assumptions
VIP and HyperSpace focus on thwarting two critical types of mem-
ory corruption attacks. Our assumption includes a program that
has one or more memory vulnerabilities (e.g., stack/heap buffer
overflow) that allow attackers to read from and write to arbitrary
memory. The attacker can use an arbitrary write capability to per-
form code/data pointer corruption attacks and/or heap metadata
corruption attacks. However, the attacker cannot modify or inject
code due to Data Execution Prevention (DEP) [40, 48]. We assume
that all hardware (e.g., Intel MPK) and the OS kernel are trusted
such that attacks exploiting those vulnerabilities are out of scope.
Regarding the use of Intel MPK for userspace protection keys, Con-
nor et al. discovered an attack that can bypass memory isolation
mechanisms based on MPK such as ERIM and Hodor. However, we
regard these attacks to be out of scope because HyperSpace does
not allow user programs to include or use any wrpkru instructions
for userspace protection.
5 HyperSpace Design
The main challenge to realizing VIP is how to efficiently and
securely keep track of the value invariant property for sensitive
Session 5D: Misc: Android and Vulnerabilities CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea16151 // Register a sensitive memory region
2 // starting at addr with size
3 void vip_register(void *addr, int size);
4 // Unregister a sensitive memory region
5 void vip_unregister(void *addr, int size);
6 // Write the current value in a sensitive memory
7 // region to the corresponding safe memory region
8 void vip_write(void *addr, int size);
9 // Same as vip_write() but do not allow further writes
10 void vip_write_final(void *addr, int size);
11 // Check if the sensitive memory value is the same
12 // as the safe memory value
13 void vip_assert(void *addr, int size);
Figure 2: VIP primitives (left) and the state transition diagram (right) for VIP protected memory. VIP primitives trigger state transitions for
a specified memory location. VIP manages the intended value of sensitive data for integrity checking (vip_assert). Mismatching values of
sensitive data or an illegal state transition indicates a value integrity violation.
data. As a prototype of VIP protection, we propose HyperSpace,
which provides a secure and efficient metadata store for checking
value integrity. In particular, the metadata storage cannot be vul-
nerable to tampering by attackers in addition to having minimal
access costs and memory overhead to be practical. We first dis-
cuss HyperSpace design details and then how HyperSpace can be
leveraged for various security applications in the following section.
Figure 3: HyperSpace memory layout. The safe memory region
is protected by Intel Memory Protection Keys (MPK) and it is effi-
ciently accessible using hardware segmentation (%gs) in x86 archi-
tecture.
5.1 HyperSpace Primitives
HyperSpace manages the state of a memory location as illustrated
in Figure 2. When a program starts, the entire memory space is
in a non-sensitive state, meaning that no memory location stores
security-sensitive data. To protect a memory location storing security-
sensitive data, HyperSpace first requires the location to be regis-
tered upon its allocation (vip_register). Then, the memory will be
in a sensitive, uninitialized state. Once the security-sensitive data
is written to the memory location, HyperSpace creates a copy of
its value in the safe memory region (vip_write) that HyperSpace
manages at runtime. vip_write is valid only if the target location
has already been registered via vip_register, and if it is, the mem-
ory will be in a sensitive, initialized state. Notably, if we know a
write should be the final one until the deallocation of the memory,
i.e., the data is in value invariant period, then we can annotate
this (vip_write_final). This will put the memory into a sensitive,
finalized state, and HyperSpace does not allow any further writes
to that memory location. VTable pointer in C++ is a use-case of
this state because it is written only once at the object construction
time and should not be updated until the object is being destructed.
Before loading any sensitive data, the program should check
whether its value is changed or not by comparing the value in the
regular memory region with the value in the safe memory region
(vip_assert). If two values do not match or a program attempts to
perform an illegal state transition, it alerts of the value integrity
violation and stops the program execution. Finally, when a sensitive
memory location is deallocated, it is unregistered (vip_unregister)
and reverts the memory locations to the default non-sensitive state,
allowing it to be reused again in the future.
5.2 Parallel Safe Memory Region Layout
To efficiently access the safe memory region, we bisect the virtual
address space of a process into a regular memory region and a safe
memory region as illustrated in Figure 3. When a process is created,
HyperSpace kernel reserves the upper half of the virtual address
space as the safe memory region.
Additionally, the %gs register is set to the starting address of the
safe memory region.1 With this parallel memory layout, accessing
a safe memory location from a regular memory location is merely
adding the original regular memory offset to the start address of the
safe memory region; this operation can be encoded with a single
instruction in x86 architecture using segmentation (see Figure 4).
We note that the safe memory region is an anonymous region,
managed by the kernel. That is, the OS kernel reserves half of the
virtual address space, however, a physical page is allocated only
on a process’s first access to a page in the safe region, minimizing
runtime memory overhead.
Even though we are reserving half of the virtual address space,
this should not be a problem, since we target the 64-bit x86 archi-
tecture. Moreover, note that the address space is reserved without
physical memory allocation. In the typical 4-level paging scheme,
reducing the user-space virtual address size by half still leaves 64 TB
of memory open for addressing. If a 5-level paging scheme is ap-
plied, the reduced user-space virtual address size still leaves 32 PB
free. These are both still large enough in practice.
5.3 Protecting Safe Memory Using MPK
The parallel memory layout enables efficient access to the safe
memory region. However, taking such a large virtual address space
makes it infeasible to hide the safe memory region from attackers.
Instead, we protect the safe memory region using Intel Memory
Protection Keys (MPK), which is an efficient per-thread memory
protection mechanism in the x86-64 architecture [39, 43, 60].
By default, the safe memory region is read-only. Only during VIP
operations that update the safe memory region (i.e., vip_register,
vip_unregister, vip_write, and vip_write_final), HyperSpace
temporarily grants read-writable permissions to only the thread
executing those VIP operations. Thus, any write attempt to safe
memory by an unauthorized thread at an unauthorized time will
cause a segmentation fault error.
1Note that dedicating %gs does not harm supporting of TLS in Linux because
Linux/glibc uses %fs for TLS. On Windows using %gs for TLS, %fs can be used for
HyperSpace.
Non-sensitiveSensitive,UninitializedSensitive,InitializedSensitive,Finalizedvip_unregister()vip_write_final()vip_write()vip_write_final()vip_assert()vip_assert()vip_write()vip_unregister()vip_unregister()vip_register()+Regular memory regionSafe memory regionaddr%gs%gs:(addr)dataDheapHstackSStatus bitmapDHSLow addressHigh addressSession 5D: Misc: Android and Vulnerabilities CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1616We use Intel MPK to efficiently change access permissions of the
safe memory region for each thread. With MPK, a virtual memory
region is assigned to one of the 16 domains under a protection
key, which is encoded in a page table entry. Memory access per-
missions of each domain are independently controlled through an
MPK register. Changing memory access permissions is fast as it
only takes around 23 CPU cycles on average using a non-privileged
instruction wrpkru [60]. Also, the impact of permission changes
is thread-local as the MPK register is per-CPU. The discussion
regarding the possible misuse of VIP primitives is addressed in §10.