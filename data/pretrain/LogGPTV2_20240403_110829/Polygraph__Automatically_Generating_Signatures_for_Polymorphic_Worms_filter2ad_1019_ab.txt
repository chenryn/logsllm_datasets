QTYPE QCLASS
NAME TYPE
[TSIG]
[0x00]
CLASS
DNS
Header
Record
Counts
Question 1
[Obfuscated
Shellcode]
Question 2
Additional
Record
Figure 2. BIND TSIG vulnerability, as ex-
ploited by the Lion worm. Shading as for
Apache vulnerability.
bytes near the end of the payload.
Slapper The Slapper worm [1] exploits a heap buffer over-
run vulnerability in Apache’s mod ssh module. Note that
the attack takes place during the initial handshake, mean-
ing that it is not encrypted.
It is a two-part attack; It
ﬁrst uses the overrun to overwrite a variable containing the
session-id length, causing the server to leak pointer val-
ues. This part must contain the normal protocol framing
of a client-hello message, as well as the value used to
overwrite the variable (0x70).
In the second part of the attack, another session is
opened, and the same buffer is overrun. This time, the
leaked data is patched in, allowing the exploit to perform
a longer buffer overrun while still not causing the server to
crash. The heap metadata is overwritten in such a way as to
later cause the GOT entry of free to be overwritten with
a pointer to the attacker’s code, placed previously on the
heap. Thus, there is an invariant overwrite value that points
to the attacker’s code, and another that points to the GOT
entry for free. An aggressively polymorphic worm may
try to target other GOT entries or function pointers as well.
However, there will still only be a relatively small number
of values that will work.
SQLSlammer The SQLSlammer [2] exploit must begin
with the invariant framing byte 0x04 in order to trigger the
vulnerable code path. It uses a buffer overrun to overwrite
a return address with a pointer to a call esp instruction
contained in a common Windows DLL. There are only a
small number of such values that work across multiple win-
dows versions.
CodeRed The CodeRed [6] exploit takes advantage of a
buffer overﬂow when converting ASCII to Unicode. The
exploit must be a GET request for a .ida ﬁle. The
value used to overwrite the return address must appear
later in the URL. CodeRed overwrites the return address
to point to call esp. There are only a small number of
such pointers that will work across multiple Windows ver-
sions. Hence, the exploit must contain the invariant proto-
col framing string “GET”, followed by “.ida?”, followed by
a pointer to call esp.
AdmWorm The AdmWorm [7] exploits BIND via a buffer
overrun. Unlike the other exploits described here, there are
no invariant protocol framing bytes in this exploit. How-
ever, there is still an invariant value used to overwrite a re-
turn address.
eb 2d 59 31
d2 b2 20 8b
19 c1 c3 0e
81 f3 81 68 44 b3 c1 c3 0a c1 c3 19 c1 c3
11 89 19 81 e9 ff ff ff ff 41 41 41 80 ea
02 4a 4a 74 07 eb
d8 e8 ce ff ff ff 0b
Figure 3. Output by Clet polymorphic engine
includes invariant substrings. Boxed bytes
are found in at least 20% of Clet’s outputs;
shaded bytes are found in all of Clet’s out-
puts.
Clet polymorphic engine Figure 3 shows a sample output
by the Clet polymorphic code engine [10].4 The output con-
sists of encrypted code, which is completely different each
time, and a decryption routine that is obfuscated differently
each time. In order to determine how effective the Clet ob-
fuscation is, we generated 100 Clet outputs for the same
input code, and counted substrings of all lengths in com-
mon among the decryption routines in these 100 outputs.
Strings that were present in all 100 outputs appear with
shaded backgrounds; those that were present in at least 20
outputs, but fewer than all 100, appear boxed. Clearly, Clet
produces substrings that are entirely invariant across pay-
loads, and other substrings that occur in a substantial frac-
tion of payloads. However, upon examining the Clet source
4We also evaluated the ADMmutate [3] polymorphic engine. We
present Clet as the more pessimal case, as it produced less invariant content
than the ADMmutate engine.
Proceedings of the 2005 IEEE Symposium on Security and Privacy (S&P’05) 
1081-6011/05 $ 20.00 IEEE
code, it seems likely that the obfuscation engine could be
improved signiﬁcantly, reducing the number of substrings
in common between Clet outputs.
2.4. Substring Signatures Insufﬁcient
As described previously,
the pattern-based signature
generation systems proposed to date [14, 13, 22] gener-
ate single substring signatures, found either in reassembled
ﬂow payloads, or individual packet payloads. These sys-
tems thus make two assumptions about worm trafﬁc:
• A single invariant substring exists across payload in-
stances for the same worm; that is, the substring is
sensitive, in that it will match all worm instances.5
• The invariant substring is sufﬁciently long to be spe-
ciﬁc; that is, the substring does not occur in any non-
worm payloads destined for the same IP protocol and
port.
Can a sensitive and speciﬁc single substring signature
be found in the example payloads in the Apache and DNS
exploits described in Section 2.3? Consider the Apache ex-
ploit. The unshaded bytes are wildcards, and cannot be re-
lied upon to provide invariant content; note that even the
NOP slide can contain signiﬁcantly varying bytes across
payloads, as many instruction sequences effectively may
serve as NOPs. If we assume a strong code obfuscator, we
cannot rely on there being an invariant substring longer than
two bytes long in the obfuscated decryption routine, shown
with light shading. The only invariant bytes are the heavily
shaded ones, which are pieces of HTTP protocol framing,
and a return address (or perhaps a two-byte preﬁx of the
return address, if the worm is free to position its code any-
where within a 64K memory region). Clearly, the HTTP
protocol framing substrings individually will not be spe-
ciﬁc, as they can occur in both innocuous and worm HTTP
ﬂows. By itself, even the two-to-four-byte return address
present in the payload is not sufﬁciently speciﬁc to avoid
false positives; consider that a single binary substring of
that length may trivially occur in an HTTP upload request.
As we show in our evaluation in Section 5, we have exper-
imentally veriﬁed exactly this phenomenon; we have found
return address bytes from real worm payloads in innocuous
ﬂows in HTTP request traces taken from the DMZ of Intel
Research Pittsburgh.
The Lion worm presents a similar story:
the heavily
shaded invariant bytes, the high-order bytes of the return
5It is possible that a worm’s content varies only very slightly across in-
stances, and that at least one of a small, constant-cardinality set of substring
signatures matches all worm instances. We view this case as qualitatively
the same as that where worm content is invariant, and focus our attention
herein on worms whose content varies to a much greater extent, such that
a small set of substring signatures does not sufﬁce to match all variants.
address, and TSIG identiﬁer, two and three bytes long, re-
spectively, are too short to be speciﬁc to the Lion worm.
As we show in our evaluation in Section 5, we found false
positives when searching for those substrings in DNS traf-
ﬁc traces from a busy DNS server that is a nameserver for
top-level country code domains.
We conclude that single substring signatures cannot
match polymorphic worms with low false positives and low
false negatives.
2.5. Signature Classes for Polymorphic Worms
Motivated by the insufﬁciency of single substring sig-
natures for matching polymorphic worms robustly, we now
propose other signature classes that hold promise for match-
ing the particular invariant exploit framing and payload
structures described in this section. All these signatures are
built from substrings, or tokens. The signature classes we
investigate in detail in Section 4 include:
Conjunction signatures A signature that consists of a set
of tokens, and matches a payload if all tokens in the set are
found in it, in any order. This signature type can match the
multiple invariant tokens present in a polymorphic worm’s
payload, and matching multiple tokens is more speciﬁc than
matching one of those tokens alone.
Token-subsequence signatures A signature that consists
of an ordered set of tokens. A ﬂow matches a token-
subsequence signature if and only if the ﬂow contains the
sequence of tokens in the signature with the same order-
ing. Signatures of this type can easily be expressed as
regular expressions, allowing them to be used in current
IDSes [20, 21]. For the same set of tokens, a token sub-
sequence signature will be more speciﬁc than a conjunc-
tion signature, as the former makes an ordering constraint,
while the latter makes none. Framing often exhibits order-
ing; e.g. the TSIG record in the Lion worm, which must
come last in the payload for the exploit to succeed, and the
return address, which must therefore come before it.
Bayes signatures A signature that consists of a set of to-
kens, each of which is associated with a score, and an over-
all threshold. In contrast with the exact matching offered by
conjunction signatures and token-subsequence signatures,
Bayes signatures provide probabilistic matching—given a
ﬂow, we compute the probability that the ﬂow is a worm us-
ing the scores of the tokens present in the ﬂow. If the result-
ing probability is over the threshold, we classify the ﬂow to
be a worm. Construction and matching of Bayes signatures
is less rigid than for conjunction or token-subsequence sig-
natures. This provides several advantages. It allows Bayes
signatures to be learned from suspicious ﬂow pools that
contain samples from unrelated worms, and even innocu-
ous network requests.
(We show that the other signature
Proceedings of the 2005 IEEE Symposium on Security and Privacy (S&P’05) 
1081-6011/05 $ 20.00 IEEE
Full
Packet
Flows
Network
Tap
Flow
Classifier
Labeled
Flows
Suspicious
Flow Pool
Innocuous
Flow Pool
Signature
Evaluator
Polygraph
Signature
Generator
signatures
Polygraph
Monitor
Figure 4. Architecture of a Polygraph monitor.
generation algorithms can be adapted to deal with these sit-
uations effectively, but at a higher computational cost). It
also helps to prevent false negatives in cases where a token
is observed in all samples in the suspicious ﬂow pool, but
does not actually appear in every sample of the worm. This
issue is further discussed in Section 6.
3. Problem Deﬁnition and Design Goals
We now consider the context in which we envision Poly-
graph will be used, both to scope the problem we consider in
this paper, and to reveal challenges inherent in the problem.
Having deﬁned the problem, we then offer design goals for
Polygraph.
3.1. Context and Architecture
Figure 4 depicts a typical deployment of a Polygraph
monitor, shown as the shaded region, which incorporates
the Polygraph signature generator. In this paper, we con-
cern ourselves with the detailed design of algorithms for
the Polygraph signature generator. We now give a brief
overview of the remaining pieces of a Polygraph monitor, to
provide context for understanding how the Polygraph signa-
ture generator ﬁts into an end-to-end system.
We envision that a Polygraph monitor observes all net-
work trafﬁc, either at a monitoring point such as between
an edge network and the Internet, or at an end host. In this
work, we consider only a single monitor instance at a single
site.6 Monitored network trafﬁc passes through a ﬂow clas-
siﬁer, which reassembles ﬂows into contiguous byte ﬂows,
and classiﬁes reassembled ﬂows destined for the same IP
protocol number and port into a suspicious ﬂow pool and
an innocuous ﬂow pool. Flow reassembly (including traf-
ﬁc normalization) at a monitor has been well studied in the
IDS research community [20]; we defer a discussion of the
liabilities of conducting ﬂow reassembly to Section 6.
There is a rich literature on methods for identifying
anomalous or suspicious trafﬁc. Previous signature gener-
ation systems have used inbound honeypot trafﬁc [14] or
port scan activity [13] to identify suspicious ﬂows. Far
more accurate techniques are also available, such as moni-
toring the execution of a server to detect exploits at run time,
and mapping exploit occurrences to the network payloads
that caused them, as is done in run-time-detection-based
methods [18]. These current techniques are not suitable for
blocking individual infection attempts, either because they
are too inaccurate or too slow, but they are suitable for use
in a ﬂow classiﬁer for Polygraph. The design of ﬂow clas-
siﬁers is outside the scope of this paper, but we assume as
we design and evaluate algorithms for the Polygraph signa-
ture generator that a ﬂow classiﬁer will be imperfect—that
it may misclassify innocuous ﬂows as suspicious, and vice-
versa. Such misclassiﬁed ﬂows increase the difﬁculty of
avoiding the generation of signatures that cause false pos-
itives; we refer to such innocuous ﬂows in the suspicious
ﬂow pool as noise.
Another challenge in generating high-quality signatures
is that we presume the ﬂow classiﬁer does not distinguish
between different worms (though some classiﬁers may be
able to help do so [18]); it simply recognizes all worms as
worms, and partitions trafﬁc by destination port. Thus, the
suspicious ﬂow pool for a particular destination port may
contain a mixture of different worms—that is, worms that
are not polymorphic variants based on the same exploit. For
example, a single edge network may include hosts running
different HTTP server implementations, each with different
vulnerabilities. In such a case, different worm payloads in
the suspicious ﬂow pool for port 80 observed at the DMZ
may contain different exploits. As we describe in our de-
sign goals, the signature generation algorithm should pro-
duce high-quality signatures, even when the suspicious ﬂow
pool contains a mixture of different worms.
In the simplest possible setting, signature generation
works as a single pass: the Polygraph signature generator
takes a suspicious ﬂow pool and an innocuous ﬂow pool as
input, and produces a set of signatures as output, chosen to
match the worms in the input suspicious ﬂow pool, and to
minimize false positives, based on the innocuous ﬂow pool.
However, we believe that incorporating feedback, whereby
the Polygraph signature generator is provided information
concerning the false positives and false negatives caused by
signatures it has previously generated, can signiﬁcantly im-
prove signature quality and allow Polygraph to adapt to at-
tacks that change over time.
3.2. Problem Deﬁnition for Polygraph Signature
Generator
6While we believe that extending Polygraph to work distributedly
holds promise for reasons explored in previous signature generation sys-
tems [13], we leave such extensions to future work.
In the remainder of this paper, we focus on the signature
generation algorithms in the Polygraph signature generator.
Proceedings of the 2005 IEEE Symposium on Security and Privacy (S&P’05) 
1081-6011/05 $ 20.00 IEEE
We now formally deﬁne the signature generation problem,
and introduce terminology and notation used in subsequent
exposition.
The signature generation algorithm is given a training
pool containing a suspicious ﬂow pool where each ﬂow is
labeled as a worm ﬂow, and an innocuous ﬂow pool where
each ﬂow is labeled as a non-worm. Note that these labels
are not necessarily accurate. In particular, the suspicious
pool may contain some innocuous ﬂows. We refer to in-
nocuous ﬂows in the suspicious ﬂow pool as noise.
The signature generation algorithm then produces a set
of signatures. We state that the signature set causes a false
positive for a ﬂow if it is not a worm, but one or more sig-
natures in the signature set matches it. If a network ﬂow is
a worm, but no signature in the signature set classiﬁes the