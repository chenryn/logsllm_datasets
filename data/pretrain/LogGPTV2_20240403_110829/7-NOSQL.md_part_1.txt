# NOSQL01\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--
# 一redis介绍
RDBMS关系数据库系统管理
-   Relational database management system
-   按照预先设置的组织结构.将数据存储在物理介质上
-   数据之间可以做关联操作
-   
主流的RDBMS服务软件
-   oracle
-   db2
-   ms sqlserver
-   Mysql mariadb
Nosql (not only sql)
-   意思是"不仅仅是sql"
-   泛指非关系型数据库
-   不需要预先定义数据存储结构
-   表的每条记录都可以有不同类型和结构
主流的Nosql服务软件
-   Redis
-   MongoDB
-   Memcached
-   CouchDB
-   Neo4j
-   FlockDB
Redis简介
-   Remote Dictionary Server(远程字典服务器)
-   是一款高性能的(Key/values)分布式内存数据库
-   支持数据持久化,可以把内存里的数据保存到硬盘中
-   也支持list hash set zset 数据类型
-   支持master-salve模式数据备份
-   中文网站www.redis.cn
Redis是一个开源的使用ANSI
C语言编写、支持网络、可基于内存亦可持久化的日志型、高性能的Key-Value数据库，并提供多种语言的API(应用程序接口)。
Redis支持主从同步。数据可以从主服务器向任意数量的从服务器上同步，从服务器可以是关联其他从服务器的主服务器。
# 二:搭建redis服务器
## 2.1装包
\[root@client-50 \~\]# rpm -q gcc \|\| yum -y install gcc
\[root@client-50 \~\]# cd redis-4.0.8/
\[root@client-50 redis-4.0.8\]# make
\[root@client-50 redis-4.0.8\]# make install
## 2.2初始化配置
\[root@client-50 redis-4.0.8\]# cd utils #提供了初始化脚本在此目录
\[root@client-50 utils\]# ./install_server.sh #运行初始化脚本
Welcome to the redis service installer
This script will help you easily set up a running redis server
Please select the redis port for this instance: \[6379\]
Selecting default: 6379
Please select the redis config file name \[/etc/redis/6379.conf\]
Selected default - /etc/redis/6379.conf
Please select the redis log file name \[/var/log/redis_6379.log\]
Selected default - /var/log/redis_6379.log
Please select the data directory for this instance
\[/var/lib/redis/6379\]
Selected default - /var/lib/redis/6379
Please select the redis executable path \[/usr/local/bin/redis-server\]
Selected config:
Port : 6379
Config file : /etc/redis/6379.conf #配置文件
Log file : /var/log/redis_6379.log
Data dir : /var/lib/redis/6379 #数据库目录
Executable : /usr/local/bin/redis-server
Cli Executable : /usr/local/bin/redis-cli #命令工具目录
Is this ok? Then press ENTER to go on or Ctrl-C to abort.
#使用以上配置回车确认, 不使用则ctrl+c结束
Copied /tmp/6379.conf =\> /etc/init.d/redis_6379
Installing service\...
Successfully added to chkconfig!
Successfully added to runlevels 345!
Starting Redis server\...
Installation successful!
## 2.3查看服务状态信息
\[root@client-50 utils\]# netstat -unltp \| grep :6379
tcp 0 0 127.0.0.1:6379 0.0.0.0:\* LISTEN 10041/redis-server
\[root@client-50 utils\]# ps -C redis-server
PID TTY TIME CMD
10041 ? 00:00:00 redis-server
## 2.4访问redis服务存取数据
\[root@client-50 utils\]# redis-cli
127.0.0.1:6379\> set name bob
OK
127.0.0.1:6379\> get name
\"bob\"
127.0.0.1:6379\> exit
## 2.5服务管理
### 停止服务 
使用提供的脚本
\[root@client-50 utils\]# /etc/init.d/redis_6379 stop
Stopping \...
Waiting for Redis to shutdown \...
Redis stopped
\[root@client-50 utils\]# netstat -unltp \| grep :6379
\[root@client-50 utils\]# redis-cli
Could not connect to Redis at 127.0.0.1:6379: Connection refused
Could not connect to Redis at 127.0.0.1:6379: Connection refused
not connected\> exit
### 启动服务 
使用脚本
\[root@client-50 utils\]# /etc/init.d/redis_6379 start
Starting Redis server\...
\[root@client-50 utils\]# netstat -unltp \| grep :6379
tcp 0 0 127.0.0.1:6379 0.0.0.0:\* LISTEN 10162/redis-server
\[root@client-50 utils\]# redis-cli
### 设置服务连接密码
(设置了密码后,停止服务是需要输入密码)
\[root@client-50 utils\]# /etc/init.d/redis_6379 stop
Stopping \...
Waiting for Redis to shutdown \...
Redis stopped
\[root@client-50 utils\]# vim /etc/redis/6379.conf
501 requirepass 123456 #修改密码为123456
\[root@client-50 utils\]# /etc/init.d/redis_6379 start
\[root@client-50 utils\]# redis-cli
127.0.0.1:6379\> set x 99 #设置密码后,登录不输入密码则无法做任务操作
(error) NOAUTH Authentication required.
127.0.0.1:6379\> auth 123456 #输入密码方式一:先登录再输入密码
OK
\[root@client-50 utils\]# redis-cli -a 123456
#输入密码方式二:登录时输入密码
127.0.0.1:6379\> set y 100
OK
127.0.0.1:6379\> get y
\"100\"
### 设置密码后停止服务
\[root@client-50 utils\]# /etc/init.d/redis_6379 stop
Stopping \...
(error) NOAUTH Authentication required. #报错
Waiting for Redis to shutdown \... #无法停止
#### 停止服务方法一:
使用命令停止有密码的redis服务
\[root@client-50 utils\]# redis-cli -a 123456 shutdown
\[root@client-50 utils\]# netstat -unltp \| grep :6379
\[root@client-50 utils\]#
#### 停止服务方法二:
修改脚本
\[root@client-50 utils\]# vim /etc/init.d/redis_6379
43 \$CLIEXEC -p \$REDISPORT -a 123456 shutdown
\[root@client-50 utils\]# /etc/init.d/redis_6379 stop
Stopping \...
Waiting for Redis to shutdown \...
Redis stopped
\[root@client-50 utils\]# netstat -unltp \| grep :6379
## 2.6数据管理
### 常用操作指令集合
Set keyname keyvalue 定义数据给变量
get keyname 输出获取变量数据
Select 数据库编号0-15 切换库
Keys \* 查看所有变量
exists keyname 检查变量是否存在,再次赋值会覆盖
ttl keyname 查看生存时间
type keyname 查看类型
move keyname dbname 移动变量
expire keyname 10 设置有效时间 \--(10s)
del keyname 删除变量
flushall 删除所有变量(慎用,内存内数据全部清除)
flushdb 仅清除当前库的数据
save 保存所有变量(正常默认是5分钟自动保存到硬盘,执行后立即保存)
Shutdown 关闭redis 服务 #停止服务时,自动将数据存入dump.rdb文件中
### 常用操作指令实操
**Set keyname keyvalue 定义数据给变量**
127.0.0.1:6379\> set y 100 #赋值给变量
OK
**get keyname 输出获取变量数据**
127.0.0.1:6379\> get y #输出变量
\"100\"
**切换库Select 数据库编号0-15**
127.0.0.1:6379\> select 1
OK
127.0.0.1:6379\[1\]\> select 2
OK
127.0.0.1:6379\[2\]\> select 0
OK
127.0.0.1:6379\>
**Keys \* 查看所有变量**
127.0.0.1:6379\> keys \*
1\) \"y\"
2\) \"name\"
127.0.0.1:6379\> select 1
OK
127.0.0.1:6379\[1\]\> keys \*
(empty list or set)
**Keys a? 查看已有变量名, ?代表任意一个字符**
127.0.0.1:6379\> set a1 200
OK
127.0.0.1:6379\> set a2 300
OK
127.0.0.1:6379\> keys a?
1\) \"a1\"
2\) \"a2\"
**exists keyname 检查变量是否存在,再次赋值会覆盖**
127.0.0.1:6379\> exists a1
(integer) 1
127.0.0.1:6379\> exists a2
(integer) 1
127.0.0.1:6379\> exists a3
(integer) 0
**ttl keyname 查看生存时间**
127.0.0.1:6379\> get name
\"bob\"
127.0.0.1:6379\> ttl name
(integer) -1 \# 为-1永不过期
**expire keyname 10 设置有效时间**
127.0.0.1:6379\> set a1 200
OK
127.0.0.1:6379\> get a1
\"200\"
127.0.0.1:6379\> expire a1 6
(integer) 1
127.0.0.1:6379\> get a1
\"200\"
127.0.0.1:6379\> get a1
(nil)
127.0.0.1:6379\> set a1 200
OK
127.0.0.1:6379\> expire a1 20
(integer) 1
127.0.0.1:6379\> ttl a1
(integer) 17
127.0.0.1:6379\> ttl a1
(integer) 7
127.0.0.1:6379\> ttl a1
(integer) 2
127.0.0.1:6379\> ttl a1
(integer) 1
127.0.0.1:6379\> ttl a1
(integer) 0
127.0.0.1:6379\> ttl a1
(integer) -2
127.0.0.1:6379\> get a1
(nil)
**type keyname 查看类型**
Set 定义的变量都是字符串类型
127.0.0.1:6379\> set a1 200
OK
127.0.0.1:6379\> type a1
string
**move keyname dbname 移动变量从一个库移动到另一个库**
127.0.0.1:6379\> keys \*
1\) \"a\"
2\) \"c\"
3\) \"b\"
127.0.0.1:6379\> move a 1
(integer) 1
127.0.0.1:6379\> keys \*
1\) \"c\"
2\) \"b\"
127.0.0.1:6379\> select 1
OK
127.0.0.1:6379\[1\]\> keys \*
1\) \"a\"
**del keyname 删除变量**
127.0.0.1:6379\> keys \*
1\) \"a1\"
2\) \"a2\"
3\) \"y\"
4\) \"name\"
127.0.0.1:6379\> del a1 a2 y
(integer) 3
127.0.0.1:6379\> keys \*
1\) \"name\"
**flushall 删除所有变量(慎用,内存内数据全部清除)**
127.0.0.1:6379\[1\]\> keys \*
1\) \"a\"
127.0.0.1:6379\[1\]\> flushall
OK
127.0.0.1:6379\[1\]\> keys \*
(empty list or set)
127.0.0.1:6379\[1\]\> select 0
OK
127.0.0.1:6379\> keys \*
(empty list or set)
**flushdb 仅清除当前库的数据**
127.0.0.1:6379\[1\]\> keys \*
1\) \"b\"
127.0.0.1:6379\[1\]\> flushdb
OK
127.0.0.1:6379\[1\]\> keys \*
(empty list or set)
127.0.0.1:6379\[1\]\> select 0
OK