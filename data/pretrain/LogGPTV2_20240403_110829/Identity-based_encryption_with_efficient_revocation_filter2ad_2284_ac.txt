$← Zp ; Dx ← gaxω+a
rx
dx ← grx .
2
Return skω = {(x, Dx, dx)}x ∈ Path(v), st.
Hg2,J,h1,h2,h3 (ω)rx ;
// We note that ax above ﬁxes ﬁrst-degree polynomial
qx(y) = axy + a corresponding to node x. The algo-
rithm computes the ω-components of the decryption
key using the polynomials of all the nodes on the path
from leaf node corresponding to ω to the root node.
• Key Update Generation KU (pk, mk, t, rl, st):
Parse pk as (g, g1, g2, h1, h2, h3), mk as a, st as T.
∀x ∈ KUNodes(T, rl, t)
$← Zp ; Ex ← gaxt+a
2
rx
ex ← grx .
Return kut = {(x, Ex, ex)}x ∈ KUNodes(T,rl,t).
Hg2,J,h1,h2,h3 (t)rx ;
// The algorithm ﬁrst ﬁnds a minimal set of nodes
which contains an ancestor (or, the node itself) of
all the non-revoked nodes. Then it computes the t-
component of the decryption key using the polynomi-
als of all the nodes in that set.
• Decryption Key Generation DK(skω, kut):
Parse skω as {(i, Di, di)}i ∈ I, kut as {(j, Ej, ej)}j ∈ J
for some set of nodes I, J.
∀(i, Di, di) ∈ skω, (j, Ej, ej) ∈ kut
If ∃(i, j) s.t. i = j then dkω,t ← (Di, Ej, di, ej)
Else (if skω and kut don’t have any node
in common) then dkω,t ← ⊥.
Return dkω,t.
7Every node x in T stores an element ax ∈ Zp and in addi-
tion, every leaf node stores an identity ω. If no such identity
is stored at a leaf node we say that the leaf node is unas-
signed.
// Above we can drop the subscripts i, j since they are
equal, i.e. dkω,t = (D, E, d, e). The algorithm ﬁnds
components of skω and kut which were computed on
the same polynomial.
• Encryption E (pk, ω, t, m):
Parse pk as (g, g1, g2, h1, h2, h3).
$← Zp ; c1 ← m · e(g1, g2)z ; c2 ← gz ;
z
cω ← Hg2,J,h1,h2,h3 (ω)z ; ct ← Hg2,J,h1,h2,h3 (t)z.
Return c = (ω, t, cω, ct, c1, c2).
// The Encryption algorithm is essentially the same as
that of Fuzzy IBE.
• Decryption D(dkω,t, c):
(cid:7)
(cid:8) t
(cid:7)
(cid:8) ω
t−ω
e(d,cω )
e(D,c2)
Parse dkω,t as (D, E, d, e), c as (ω, t, cω, ct, c1, c2).
m ← c1
Return m.
// The decryption algorithm is essentially the same as
that of Fuzzy IBE.
e(e,ct)
e(E,c2)
ω−t
.
• Revocation R(ω, t, rl, st):
For all nodes v associated with identity ω add (v, t) to
rl.
Return rl.
Consistency.
If identity ω was not revoked before or,
at time t, then we will show that D(dkω,t, c) = m where
dkω,t, m and c are computed as per the consistency require-
ment in Section 3.1.
From the deﬁnition of KUNodes we see that if ω was not
revoked before or, at t then the set of nodes output by
KUNodes has one ancestor (or, the node itself) of the leaf
node associated with ω which implies that there will be a
common node in skω and kut and hence DK will not out-
put ⊥. Now from the above construction we have that for
a, ax, z, rω, rt ∈ Zp:
2
2
Hg2,J,h1,h2,h3 (ω)rω ,
Hg2,J,h1,h2,h3 (t)rt , d = grω , e = grt ,
g, g2, h1, h2, h3 ∈ G , g1 = ga
dkω,t = (D, E, d, e) , where
D = gaxω+a
E = gaxt+a
c = (ω, t, cω, ct, c1, c2) , where cω = Hg2,J,h1,h2,h3 (ω)z ,
ct = Hg2,J,h1,h2,h3 (t)z , c1 = m · e(g1, g2)z , c2 = gz.
So, D(dkω,t, c)
(cid:5)
(cid:6) ω
(cid:6) t
(cid:5)
t−ω
ω−t
t−ω
(cid:6) t
(cid:6) ω
ω−t
e(e, ct)
e(E, c2)
e(d, cω)
= c1
e(D, c2)
= m · e(g1, g2)z
×
e(gaxω+a
(cid:5)
(cid:5)
e(grω , Hg2,J,h1,h2,h3 (ω)z)
Hg2,J,h1,h2,h3 (ω)rω , gz)
2
e(grt, Hg2,J,h1,h2,h3 (t)z)
e(gaxt+a
2
Hg2,J,h1,h2,h3 (t)rt , gz)
(cid:5)
(cid:6) t
t−ω
= m · e(g1, g2)z
(cid:5)
1
e(gaxt+a
2
, gz)
1
(cid:6) ω
e(gaxω+a
2
ω−t
, gz)
×
×
= m · e(g1, g2)z
×
⎛
⎝
(axω+a)(
2
e(g
⎞
⎠
1
)+(axt+a)( ω
ω−t
)
t
t−ω
, gz)
= m · e(g1, g2)z
1
e(ga
2 , gz)
= m · e(g1, g2)z
1
e(g2, g1)z
= m.
Remarks. The function KUNodes needs to be executed only
when rl has changed, so key authority can store the output of
KUNodes and use it until rl changes. If the number of users
exceeds n, the capacity of the current tree, it is possible to
extend the tree and permit n more users as follows. Take an
“empty” tree of the same size and connect the roots of the
current and new trees to the new parent root node. Now
the combined tree has 2n leaf nodes, and new users can be
accommodated. Each user will need an additional private
key component computed on the polynomial of the new root
node. This new private key component can be encrypted
(under the corresponding identity and time) and published.
Efficiency. We ﬁrst analyze communication and time com-
plexity of key authority in computing and publishing key up-
dates as a function of the number of users n and number
of revoked users r. We compare the worst case complexity
of our scheme with that of the general revocation solution
suggested by Boneh-Franklin [7] that we outlined in the In-
troduction. Table 1 summarizes the results. The complexity
analysis for our construction follows directly from Theorem 1
of [1], as the number of necessary key updates in our scheme
corresponds to the number of nodes returned by function
KUNodes, and a similar function on the binary tree was used
in [1].
As the table shows, our scheme represents a signiﬁcant im-
provement over the Boneh-Franklin solution for small values
of r. For larger values of r (especially as it reaches close to
n), this advantage is lost. We however note that as r be-
comes large, our scheme can be “reset” to keep key update
eﬃcient (by running the setup algorithm again which will
make the revocation list empty and releasing new private
keys for only non-revoked users).
In terms of encryption and decryption, our construct-
ion is slightly less eﬃcient than the existing IBE schemes.
E.g. the decryption algorithms of IBEs by Waters [26] and
Boneh-Boyen [4] require 2 pairing computations (the slowest
computation compared to group operations and exponentia-
tions), and our scheme requires 4. Encryption in the schemes
of [26, 4] is dominated by 3 and 4 exponentiations, while our
scheme uses 12. We chose Waters and Boneh-Boyen con-
structions for comparison because they are the most eﬃcient
IBE schemes secure in standard (RO devoid) model under
standard assumptions. This may be a reasonable price to
pay for the signiﬁcant improvement in key-update eﬃciency,
which may become a bottleneck for a large number of users.
We note that the size of secret keys is larger in our scheme,
a user needs to store up to 3h = 3 log n group elements.
We note that using the suggestion from [23], eﬃciency
of our scheme, and in particular, its encryption algorithm,
can be improved, if a hash function is used in place of the
function H. Security analysis in this case will need to rely
on the random oracle (RO) model [2]. This will improve
Table 1: Key update complexity comparison
1 < r ≤ n/2 n/2 < r ≤ n
O(n − r)
O(n − r)
O(n − r)
Revocable IBE O(1) O(r log ( n
r ))
r = 0
O(n)
BF [7]
the number of exponentiations in encryption to 4 while the
decryption algorithm will still be dominated by 4 paring op-
erations. In contrast, the cost of encryption and decryption
in the Boneh-Franklin scheme [7] is dominated by one pair-
ing each.
Security. Even though diﬀerent users have their private
keys computed on the same polynomial this does not intro-
duce insecurity in RIBE as opposed to Fuzzy IBE. In our
scheme collusion among diﬀerent users is possible, however
such collusion is not useful. No matter how many revoked
users try to collude, they will still be unable to decrypt a
ciphertext for a new time period, as they cannot obtain the
necessary decryption key component. Security of RIBE is
based on the hardness of decisional bilinear Diﬃe-Hellman
(DBDH) problem, which we now recall. problem.
Definition 4.2. [DBDH ] Let G be a prime order bilin-
ear group generator. The decisional bilinear Diﬃe-Hellman
(DBDH) problem is said to be hard for G if for every eﬃcient
adversary A its advantage AdvdbdhG,A (k) deﬁned as
(cid:3)
(cid:2)
(cid:3)
(cid:2)
Pr
Exp
dbdh-real
G,A
(1κ) = 1
− Pr
Exp
dbdh-rand
G,A
(1κ) = 1
is a negligible function in κ, and where the experiments
are as follows:
Experiment Expdbdh-real
G,A
(1κ)
$← G(1κ) ; x, y, z
$← Zp
( ˜G, p, g)
X ← gx ; Y ← gy ; Z ← gz ; W ← e(g, g)xyz
$← A(1κ, ˜G, p, g, X, Y, Z, W )
d
Return d
Experiment Expdbdh-rand
G,A
(1κ)
$← G(1κ) ; x, y, z, w
( ˜G, p, g)
X ← gx ; Y ← gy ; Z ← gz ; W ← e(g, g)w
$← A(1κ, ˜G, p, g, X, Y, Z, W )
d
Return d
$← Zp
We now state the security result.
Theorem 4.3. Let G be a prime order bilinear group gen-
erator and RIBE[G] = (S,SK,KU ,DK,E ,D, R) be the as-
sociated Revocable IBE scheme deﬁned by Construction 4.1.
Then RIBE [G] is sRID-CPA-secure if the DBDH problem
is hard for G.
The proof is in the full version [3]. It contains a concrete
security statement showing that the reduction is tight.
5. ADDRESSING CCA SECURITY
We suggest two ways to construct RIBE schemes that re-
sist chosen-ciphertext attacks. Our ﬁrst solution is a mod-
iﬁcation of our main construction. Our second solution is
generic in that it is based on any sRID-CPA secure scheme,
though CCA security relies on the RO model.
RIBECCA Construction. We combine the ideas of [8]
(used there for a diﬀerent problem of constructing an IND-
CCA public-key encryption scheme) with the error-tolerance
property of Fuzzy IBE to modify our Revocable IBE scheme.
Changes are mainly in the encryption and decryption algo-
rithms. We employ a strongly-unforgeable one-time signa-
ture scheme (cf.
[5] that recalls the primitive and its se-
curity deﬁnition). The setup algorithm of the new scheme
is very similar to the one in Fuzzy IBE where 2 out of 3
attributes of ciphertexts should match with those of the de-
cryption key. The private key generation and key update
generation algorithms are very similar to those of RIBE ex-
cept that we now use second-degree polynomials as opposed
to ﬁrst-degree polynomials in RIBE. The encryption algo-
rithm runs the key generation algorithm of OT S to obtain a
signing key and veriﬁcation key and then encrypts the mes-
sage with three attributes:
identity, time and veriﬁcation
key. Then it signs the resulting intermediate ciphertext us-
ing the signing key. The decryption algorithm veriﬁes the
signature and that ciphertext is properly formed (by using
a ciphertext sanity check due to [14]) before decrypting.
Let G be a bilinear group generator and OT S = (SGen,
Sign, Ver) be a one-time signature scheme. Let RIBE[G] =
(S, SK, KU ,DK, E ,D,R) be the scheme of Construction
4.1. We deﬁne RIBE CCA[G, OT S] = (S(cid:5)
,DK,
E(cid:5)
,D(cid:5)
,R) by specifying the diﬀerences from RIBE. Here we
require that identities, time periods and the veriﬁcation keys
for the one-time signature output by SGen are mapped to
∗
distinguished elements in Z
p (e.g. by pre-pending “00”, “01”
and “11” to strings of these types and then using a collision-
resistant hash function that maps {0, 1}∗
∗
p. Let J be
{1, 2, 3, 4}.
, SK(cid:5)
, KU(cid:5)
to Z
• Setup S(cid:5)
(κ, n):