    use E::{A,B};
    #[derive(Debug, Clone)]
    enum E {
        A(i64),
        B(Box),
    }
    fn f(a: &mut E) {
        *a = match *a {
            B(ref b) => *b.clone(),
            _ => a.clone(),
        }
    }
    fn main() {
        let mut a = B(Box::new(A(1)));
        f(&mut a);
    }
This code yields the following message during compilation:
    Instruction does not dominate all uses!
      %9 = load %enum.E** %2, !nonnull !0
      %17 = bitcast %enum.E* %9 to i8*
    Instruction does not dominate all uses!
      %9 = load %enum.E** %2, !nonnull !0
      %21 = bitcast %enum.E* %9 to i8*
    LLVM ERROR: Broken function found, compilation aborted!