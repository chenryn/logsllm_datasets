第 111 页 
OgnlValueStack 可以简单看做 List，里面还放了 Action 对象的引用，通过它可以得到该
Action 对象的引用。 
下图说明了几个对象的关系： 
1.  ActionContext、Action 本身和 HttpServletRequest 对象没有关系。但是为了能够使用 EL
表达式、JSTL 直接操作他们的属性。会有一个拦截器将 ActionContext、Action 中的属性通过
类似 request.setAttribute()方法置入 request 中(webwork2.1 之前的做法)。这样，我们也可以
通过：${requestScope.uname}即可访问到 ActionContext 和 Action 中的属性。 
注：struts2 后，使用装饰器模式来实现上述功能。 
Action 的实例，总是放到 value stack 中。因为 Action 放在 stack 中，而 stack 是 root(根
对象)，所以对 Action 中的属性的访问就可以省略#标记。 
第 112 页 
获取 Web 容器信息： 
在上面我 GETSHELL 或者是输出回显的时候就必须获取到容器中的请求和响应对象。而
在 Struts2 中通过 ActionContext 可以获得 session、request、application，但他们并不是真正
的 HttpServletRequest、HttpServletResponse、ServletContext 对象，而是将这三个对象里面的
值重新包装成了 map 对象。 Struts 框架通过他们来和真正的 web 容器对象交互。 
获得 session：ac.getSession().put("s", "ss"); 
获得 request：Map m = ac.get("request"); 
获得 application： ac.getApplication(); 
获取 HttpServletRequest、HttpServletResponse、ServletContext: 
有时，我们需要真正的 HttpServletRequest、HttpServletResponse、ServletContext 对象，
怎么办? 我们可以通过 ServletActionContext 类来得到相关对象，代码如下： 
HttpServletRequest req = ServletActionContext.getRequest(); 
ServletActionContext.getRequest().getSession(); 
ServletActionContext.getServletContext(); 
Struts2 OGNL: 
OGNL 全称是 Object-Graph  Navigation  Language(对象图形导航语言)，Ognl 同时也是
Struts2 默认的表达式语言。每一次 Struts2 的命令执行漏洞都是通过 OGNL 去执行的。在写
这文档之前，乌云的 drops 已有可够参考的 Ognl 文章了 http://drops.wooyun.org/papers/340。
这里只是简单提下。 
1、 能够访问对象的普通方法 
2、 能够访问类的静态属性和静态方法 
3、 强大的操作集合类对象的能力 
4、 支持赋值操作和表达式串联 
5、 访问 OGNL 上下文和 ActionContext 
Ognl 并不是 Struts 专用，我们一样可以在普通的类里面一样可以使用 Ognl，比如用 Ognl
去访问一个普通对象中的属性： 
第 113 页 
在上面已经列举出了Ognl可以调用静态方法，比如表达式使用表达式去调用runtime执
行命令执行：@java.lang.Runtime@getRuntime().exec('net user selina 123 /add')而在Java
当中静态调用命令行的方式：java.lang.Runtime.getRuntime().exec("net user 
selina 123 /add"); 
第 114 页 
4、Struts 漏洞 
Struts2 究竟是个什么玩意，漏洞爆得跟来大姨妈紊乱似的，连续不断。前面已经提到
了由于 Struts2 默认使用的是 OGNL 表达式，而 OGNL 表达式有着访问对象的普通方法和静
态方法的能力。开发者无视安全问题大量的使用 Ognl 表达式这正是导致 Struts2 漏洞源源不
断的根本原因。通过上面的 DEMO 应该差不多知道了 Ognl 执行方式，而 Struts2 的每一个命
令执行后面都坚挺着一个或多个可以绕过补丁或是直接构造了一个可执行的 Ognl 表达式语
句。 
Struts2 漏洞病例： 
Struts2 每次发版后都会 release 要么是安全问题，要么就是 BUG 修改。大的版本发布过
一下几个。 
 1.2.x/                  2013-02-02 17:49    -    
 1.3.x/                  2013-02-02 17:59    -    
 2.0.x/                  2013-02-02 11:22    -    
 2.1.x/                  2013-03-02 14:52    -    
 2.2.x/                  2013-02-02 16:00    -    
 2.3.x/                  2013-06-24 11:30    -    
小版本发布了不计其数，具体的小版本下载地址： 
http://archive.apache.org/dist/struts/binaries/ 
Struts 公开的安全问题： 
1、Remote code exploit on form validation error: 
http://struts.apache.org/release/2.3.x/docs/s2-001.html 
2、Cross site scripting (XSS) vulnerability on  and  tags： 
http://struts.apache.org/release/2.3.x/docs/s2-002.html 
3、XWork ParameterInterceptors bypass allows OGNL statement execution： 
http://struts.apache.org/release/2.3.x/docs/s2-003.html 
4、Directory traversal vulnerability while serving static content： 
http://struts.apache.org/release/2.3.x/docs/s2-004.html 
5、XWork ParameterInterceptors bypass allows remote command execution： 
第 115 页 
http://struts.apache.org/release/2.3.x/docs/s2-005.html 
6、Multiple Cross-Site Scripting (XSS) in XWork generated error pages： 
http://struts.apache.org/release/2.3.x/docs/s2-006.html 
7、User input is evaluated as an OGNL expression when there's a conversion error： 
http://struts.apache.org/release/2.3.x/docs/s2-007.html  
8、Multiple critical vulnerabilities in Struts2： 
http://struts.apache.org/release/2.3.x/docs/s2-008.html  
9、ParameterInterceptor vulnerability allows remote command execution 
http://struts.apache.org/release/2.3.x/docs/s2-009.html  
10、When using Struts 2 token mechanism for CSRF protection, token check may be bypassed 
by misusing known session attributes： 
http://struts.apache.org/release/2.3.x/docs/s2-010.html  
11、Long request parameter names might significantly promote the effectiveness of DOS 
attacks： 
http://struts.apache.org/release/2.3.x/docs/s2-011.html 
12、Showcase app vulnerability allows remote command execution： 
http://struts.apache.org/release/2.3.x/docs/s2-012.html 
13、A vulnerability, present in the includeParams attribute of the URL and Anchor Tag, allows 
remote command execution： 
http://struts.apache.org/release/2.3.x/docs/s2-013.html 
14、A vulnerability introduced by forcing parameter inclusion in the URL and Anchor Tag 
allows remote command execution, session access and manipulation and XSS attacks： 
http://struts.apache.org/release/2.3.x/docs/s2-014.html 
15、A vulnerability introduced by wildcard matching mechanism or double evaluation of OGNL 
Expression allows remote command execution.： 
http://struts.apache.org/release/2.3.x/docs/s2-015.html 
16 、
A 
vulnerability 
introduced 
by 
manipulating 
parameters 
prefixed 
with 
"action:"/"redirect:"/"redirectAction:" allows remote command execution： 
http://struts.apache.org/release/2.3.x/docs/s2-016.html 
18 ：
A 
vulnerability 
introduced 
by 
manipulating 
parameters 
prefixed 
with 
"redirect:"/"redirectAction:" allows for open redirects： 
http://struts.apache.org/release/2.3.x/docs/s2-017.html 
Struts2 漏洞利用详情：  
S2-001-S2-004：http://www.inbreak.net/archives/161  
S2-005：http://www.venustech.com.cn/NewsInfo/124/2802.Html 
S2-006：http://www.venustech.com.cn/NewsInfo/124/10155.Html 
S2-007：http://www.inbreak.net/archives/363  
S2-008：http://www.exploit-db.com/exploits/18329/ 
http://www.inbreak.net/archives/481 
S2-009：http://www.venustech.com.cn/NewsInfo/124/12466.Html 
S2-010：http://xforce.iss.net/xforce/xfdb/78182 
S2-011-S2-015:http://blog.csdn.net/wangyi_lin/article/details/9273903 
第 116 页 
http://www.inbreak.net/archives/487 http://www.inbreak.net/archives/507 
S2-016-S2-017：http://www.iteye.com/news/28053#comments  
吐槽一下： 
从来没有见过一个框架如此多的漏洞一个连官方修补没怎么用心的框架既有如此多的
拥护者。大学和很多的培训机构都把 SSH（Spring、Struts2、Hibernate）奉为 JavaEE 缺一不
可的神话。在政府和大型企业中使用 JavaWeb 的项目中 SSH 架构体现的更是无处不在。刚
开始找工作的出去面试基本上都问：SSH 会吗？我们只招本科毕业精通 SSH 框架的。“？什
么？Struts2 不会？啥？还不是本科学历？很遗憾，我们公司更希望跟研究过 SSH 代码精通
Struts MVC、Spring AOP DI OIC 和 Hibernate 的人合作，您先回去等通知吧…… ”。多么标准
的面试失败的结束语，我只想说：我去年买了个表！ 
在 Struts2 如此“权威”、“专制”统治下终于有一个比 Struts2 更轻盈、更精巧、更安全
的框架开始逐渐的威胁着 Struts 神一样的地位，It’s SpringMvc。 
Struts2 Debug： 
关于 Struts2 的漏洞分析网上已经铺天盖地了，因为一直做 SpringMvc 开发对 Struts2 并
是怎么关注。不过有了上面的铺垫，分析下 Struts2 的逻辑并不难。这次就简单的跟一下
S2-016 的命令执行吧。 
Debug Tips： 
F5：进入方法 
F6：单步执行 
F7：从当前方法中跳出，继续往下执行。 
F8：跳到下一个断点。 
其他：F3：进入方法内、Ctrl+alt+h 查看当前方法在哪些地方有调用到。 
这里还得从上面的 Struts2 的 Filter 说起,忘记了的回头看上面的：Struts2 请求处理流
程分析。  
在 Struts2 项目启动的时候就也会去调用 Ognl 做初始化，启动后一切的 Struts2 的请求
都会先经过 Struts2 的 StrutsPrepareAndExecuteFilter 过滤器（在早期的 Struts 里默认的是
FilterDispatcher）。并从其 doFilter 开始处理具体的请求，完成 Action 映射和请求分发。 
在 Debug 之前需要有 Struts2 的 OGNL、Xwork 还有 Struts 的代码。其中的 xwork 和 Struts2
的源代码可以在 Struts2\struts-2.3.14\src 下找到。 
第 117 页 
Ognl 的源码在 opensymphony 的官方网站可以直接下载到。需要安装 SVN 客户端
checkout 下源码。 
http://code.google.com/p/opensymphony-ognl-backup/source/checkout 
关联上源代码后可以在 web.xml 里面找到 StrutsPrepareAndExecuteFilter 哪行配置，直接
Ctrl+左键点进去（或者直接在 StrutsPrepareAndExecuteFilter 上按 F3 快速进入到这个类里面
去）。在 StrutsPrepareAndExecuteFilter 的 77 行行标处双击下就可以断点了。 
至于在 Eclipse 里面怎么去关联源代码就不多说了，按照 eclipse 提示找到源代码所在的
路径就行了，实在不懂就百度一下。一个正常的 Action 请求一般情况下是不会报错的。如：
http://localhost/StrutsDemo/test.action 请求处理成功。在这样正常的请求中 Ognl 表达式找
的是 location。而注入 Ognl 表达式之后： 
doFilter 的前面几行代码在做初始化，而第 84 行就开始映射 action 了。而最新的 S2-016
就是因为不当的处理 action 映射导致 OGNL 注入执行任意代码的。F5 进入 PrepareOperations
的 findActionMapping 方法。在 findActionMapping 里面会去调用先去获取一个容器然后再去
映射具体的 action。通过 Dispatcher 对象（org.apache.struts2.dispatcher）去获取 Container。
通过 ActionMapper 的实现类：org.apache.struts2.dispatcher.mapper.DefaultActionMapper 调用
getMapping 方法，获取 mapping。 
第 118 页 
在 311 行的 handleSpecialParameters(request, mapping);F5 进入方法执行内部，这个方法
在 DefaultActionMapper 类里边。 
从请求当中获取我们提交的恶意 Ognl 代码： 
第 119 页 
handleSpecialParameters 方法调用 parameterAction.execute(key, mapping);： 
F5 进入 parameterAction.execute： 
执行完成之后的 mapping 可以看到 lication 已经注入了我们的 Ognl 表达式了： 
第 120 页 
当 mapping 映射完成后，会回到 DefaultActionMapper 调用上面处理后的 mapping 解析
ActionName。return parseActionName(mapping)。这里拿到的 name 自然是 test
了。因为我们访问的只是 test.action。不过在 Struts2 里面还可以用 test!show.action 即
调用 test 内的 show 方法。 
        parseNameAndNamespace(uri, mapping, configManager); 
        handleSpecialParameters(request, mapping); 
    return parseActionName(mapping); 
parseActionName 执行完成后回到之前的 findActionMapping 方法。然后把我们的
mapping 放到请求作用域里边，而 mapping 对应的键是：struts.actionMapping。此便
完成了 ActionMapping。那么 StrutsPrepareAndExecuteFilter 类的 doFilter 过滤器中的 84 行的
ActionMapping 也就完成了。 
并 不 是 说
action
映 射 完 成 后 就 已 经 执 行 了
Ognl
表 达 式 了 ， 而 是 在
StrutsPrepareAndExecuteFilter 类第 91 行的 execute.executeAction(request, response, mapping);
执行完成后才会去执行我们的 Ognl。 
executeAction 在 org.apache.struts2.dispatcher.ng 的 ExecuteOperations 类。这个方法如