1.00 % ( 2.28)
12.54 % ( 6.54)
1.38 % (12.18)
3.04 % ( 2.32)
0.67 % ( 0.67)
1.77 % ( 2.58)
certain bits of the corresponding page table entries by invoking
IDCs. The test results also show that the performance impact
of TLB invalidations to be more signiﬁcant, even considering
its relatively long RTC. This is attributed to TLB invalidations
increasing the TLB miss rate. In summary, the prototype using
ASID and TLB invalidation introduce about 8.9 % and 29.5 %
performance overhead on average, respectively.
C. Macro Benchmarks
To evaluate the performance impact of the prototype on the
overall system, we experimented with six different synthetic
benchmark applications that can be publicly downloaded from
the Google Play Store: CF-Bench 1.3, GeekBench 3.4.1,
Quardrant 2.1.1, Smartbench 1.0.0, Vellamo 3.2 and Antutu
6.0.1. We repeated each benchmark 10 times, and the results
are reported in Table IV with a standard deviation. In conclu-
sion, the ﬁnal benchmark scores reﬂecting real-world scenarios
exhibit the feasibility of the prototype with 0.97 % (when using
ASID) and 2.42 % (when using TLB invalidation) performance
overhead on average.
D. Security Application Benchmark
If system software adopts our intra-level privilege sepa-
ration technique, developers can deploy various security ap-
plications to monitor the system. It is difﬁcult to determinis-
tically measure or estimate the amount of inﬂuence security
applications may have on performance. Therefore,
instead
of struggling to provide general information, we build, as
an example, a security application performing system call
examination and present its performance impact.
The example security application was created based on the
idea of Forrest [17]. It intercepts system calls and extracts
high-level information from them. This is relatively simple to
implement in our technique, but it provides a useful means for
monitoring the system behavior. For example, Aurasium [48]
shows that examining the system call data enables a more ﬁne-
grained policy enforcement than that of the default permission
system of Android. Therefore, our security application mimics
Aurasium to monitor the behavior of applications. Speciﬁcally,
we ﬁrst inserted IDCs in system call handlers to pass system
call numbers and arguments to the security application in
the inner domain. The transferred data are stored in a ring
buffer that are allocated in the inner domain for each core.
Then, the security application parses the data to understand
the corresponding behavior of applications. For example, by
monitoring a system call, sys_connect, and its argument,
the security application can identify the IP address and port
number of a network connection being established, thereby
denying applications access to banned websites. Moreover,
by monitoring another system call, sys_ioctl, and argu-
ments, we can track the binder, which provides an inter-
process communication capability to applications. In particular,
as applications use the binder to communicate with other
applications and service processes, by inspecting established
bind connections, the security application can monitor whether
applications comply with given access policies for services and
resources.
To measure the performance degradation when the security
application is installed, we experimented with the same micro
and macro benchmarks. The results of Table V show that this
security application incurs certain overhead in system calls
due to the number of intercepts and parsing operations, but
the overhead could be considered negligible in the case of
time-consuming system calls such as mmap. Table VI shows
that
the amount of performance overhead imposed by the
example security application is acceptable. In conclusion, the
performance overhead increases to 3.07 % (when using ASID)
and 4.77 % (when using TLB invalidation) on average.
VII. DISCUSSION
In this section, we discuss remaining issues and possible
future extensions for Hilps.
Porting Effort. In order to logically deprivilege the outer
domain, Hilps entrusts the inner domain with exclusive control
13
authorities for privileged registers and page tables. We achieve
this by adopting a code instrumentation technique that incurs
porting cost. For example, we modiﬁed about 1800 SLOC
of the AArch64 Linux kernel
to apply Hilps. According
to previous works using this technique [15], [4], [7], [19],
such a porting effort is commonly considered reasonable and
acceptable.
Vulnerable Security Applications. Attackers may tamper
with both the inner and outer domains by exploiting vulnera-
bilities of security applications. In Hilps, however, it would be
extremely difﬁcult to manipulate security applications in such
a fashion. One reason is that the outer domain communicates
with a security application in the inner domain through a
very narrow interface. Another is that only authorized security
applications are included in the binary of system software,
and they are loaded intact into the system alongside Hilps via
a pre-veriﬁed secure boot sequence.
On-demand Installation of Security Applications. To
cope with attacks which cannot be handled by the security
applications existing in the inner domain, installing a new
security application would be preferred. In Hilps, updating a
ﬁrmware image is the only available means for this purpose.
However, as it adversely affects the ﬂexibility, we consider
allowing security applications to be installed on demand. To
enable this, we plan to extend Hilps with two kinds of inter-
faces respectively supporting the development and installation
of security applications. In this case, however, Hilps itself
would be threatened if malicious security applications are
installed. To relieve this problem, we may need to strongly
isolate each security applications to inhibit their inﬂuence by
using sandbox solutions like NaCl [50].
VIII. CONCLUSION
Privilege separation has been a popular security principle
in the software design that can enhance the security level of
monolithic system software. This paper introduces our tech-
nique, Hilps, that has been developed to enforce this security
principle in system software running on ARM-based machines.
The major novelty of Hilps lies in its unique implementation
scheme for two underpinning mechanisms, domain switching
and intra-level isolation, based on the TxSZ hardware ﬁeld
for dynamically adjusting virtual address ranges of running
software. Thanks to ARM’s new salient hardware support,
Hilps has been used to securely incorporate various security
solutions for the ﬁrst time into all levels of privileged software
on AArch64, including a normal OS, a hypervisor and even
an ARM TrustZone secure OS. In addition, the paper argues
for practical use of our technique in real deployments by
presenting our experimental evidence that the extra runtime
overhead incurred by Hilps is acceptably small. Considering
that AArch64 is the standard architecture for ARM’s new gen-
eration 64-bit processors, we suggest that our technique would
be a viable tool to efﬁciently enforce privilege separation on
commodity mobile devices in the future as well as the present.
ACKNOWLEDGMENT
We thank anonymous reviewers for the support and in-
sightful remarks that
improved the paper. This work was
partly supported by Institute for Information & communica-
tions Technology Promotion(IITP) grant funded by the Korea
government(MSIP) (No. R0190-16-2010, Development on the
SW/HW modules of Processor Monitor for System Intrusion
Detection) and (No. R-20160222-002755, Cloud based Secu-
rity Intelligence Technology Development for the Customized
Security Service Provisioning), the National Research Foun-
dation of Korea(NRF) grant funded by the Korea government
(MSIP) (No. 2014R1A2A1A10051792), and the Brain Korea
21 Plus Project in 2017.
REFERENCES
[1]
[2]
“Linux kernel vulnerabilities,” http://www.cvedetails.com/product/47/
Linux-Linux-Kernel.html?vendor id=33.
“Xen: Vulnerability statistics,” http://www.cvedetails.com/vendor/6276/
XEN.html.
[3] D. Abramson, “Intel virtualization technology for directed i/o,” Intel
technology journal, 2006.
[4] R. B. J. M. W. S. R. W. Ahmed M. Azab, 1 Kirk Swidowski and
P. Ning, “Skee: A lightweight secure kernel-level execution environment
for arm,” in Proceedings of the Network and Distributed System Security
Symposium, 2016.
[5] ARM, “System memory management unit (smmu),” http://www.arm.
com/products/system-ip/controllers/system-mmu.php.
[6] ——, “Versatile express juno r1 development platform,” in ARM
100122 0100 00 en, 2015.
[7] A. M. Azab, P. Ning, J. Shah, Q. Chen, R. Bhutkar, G. Ganesh, J. Ma,
and W. Shen, “Hypervision across worlds: Real-time kernel protection
from the arm trustzone secure world,” in Proceedings of the 21st ACM
SIGSAC Conference on Computer and Communications Security, 2014.
[8] A. M. Azab, P. Ning, Z. Wang, X. Jiang, X. Zhang, and N. C. Skalsky,
“Hypersentry: enabling stealthy in-context measurement of hypervisor
integrity,” in Proceedings of the 17th ACM conference on Computer
and communications security, 2010.
[9] A. M. Azab, P. Ning, and X. Zhang, “Sice: a hardware-level strongly
isolated computing environment for x86 multi-core platforms,” in Pro-
ceedings of the 18th ACM Conference on Computer and Communica-
tions Security, 2011.
[10] V. R. Basili and B. T. Perricone, “Software errors and complexity: an
empirical investigation,” Communications of the ACM, 1984.
[11] M. Becher, M. Dornseif, and C. N. Klein, “Firewire: all your memory
[12]
are belong to us,” Proceedings of CanSecWest, 2005.
J. Bickford, R. O’Hare, A. Baliga, V. Ganapathy, and L. Iftode,
“Rootkits on smart phones: attacks, implications and opportunities,”
in Proceedings of the 11th workshop on mobile computing systems &
applications, 2010.
[13] M. Castro, M. Costa, J.-P. Martin, M. Peinado, P. Akritidis, A. Don-
nelly, P. Barham, and R. Black, “Fast byte-granularity software fault
isolation,” in Proceedings of the 22nd ACM SIGOPS symposium on
Operating systems principles, 2009.
J. Criswell, N. Dautenhahn, and V. Adve, “Virtual ghost: Protecting
applications from hostile operating systems,” Proceedings of the 19th
International Conference on Architectural Support for Programming
Languages and Operating Systems, 2014.
[14]
[15] N. Dautenhahn, T. Kasampalis, W. Dietz, J. Criswell, and V. Adve,
“Nested kernel: An operating system architecture for intra-kernel priv-
ilege separation,” in Proceedings of the 20th International Conference
on Architectural Support for Programming Languages and Operating
Systems, 2015.
[16] U. Erlingsson, M. Abadi, M. Vrable, M. Budiu, and G. C. Necula, “Xﬁ:
Software guards for system address spaces,” in Proceedings of the 7th
symposium on Operating systems design and implementation, 2006.
[17] S. Forrest, S. A. Hofmeyr, A. Somayaji, and T. A. Longstaff, “A sense
of self for unix processes,” in Proceedings of the 17th IEEE Symposium
on Security and Privacy, 1996.
[18] T. Garﬁnkel, M. Rosenblum et al., “A virtual machine introspection
based architecture for intrusion detection,” in Proceedings of the Net-
work and Distributed System Security Symposium, 2003.
[19] X. Ge, H. Vijayakumar, and T. Jaeger, “Sprobes: Enforcing kernel code
integrity on the trustzone architecture,” 2014.
14
[20]
Intel, “Trusted execution technology: Software development guide,”
2008.
[44] E. Uniﬁed, “Inc. uniﬁed extensible ﬁrmware interface speciﬁcation,”
2014.
[45] X. Wang, Y. Chen, Z. Wang, Y. Qi, and Y. Zhou, “Secpod: a framework
for virtualization-based security systems,” in USENIX Annual Technical
Conference, 2015.
[46] Z. Wang and X. Jiang, “Hypersafe: A lightweight approach to provide
lifetime hypervisor control-ﬂow integrity,” in Proceedings of the 31st
IEEE Symposium on Security and Privacy, 2010.
[47] C. Wu, Z. Wang, and X. Jiang, “Taming hosted hypervisors with
(mostly) deprivileged execution.” in Proceedings of the Network and
Distributed System Security Symposium, 2013.
[48] R. Xu, H. Sa¨ıdi, and R. Anderson, “Aurasium: Practical policy enforce-
ment for android applications,” in Proceedings of the 21st USENIX
Security Symposium, 2012.
[49] W. Xu, J. Li, J. Shu, W. Yang, T. Xie, Y. Zhang, and D. Gu, “From
collision to exploitation: Unleashing use-after-free vulnerabilities in
linux kernel,” in Proceedings of the 22nd ACM SIGSAC Conference
on Computer and Communications Security, 2015.
[50] B. Yee, D. Sehr, G. Dardyk, J. B. Chen, R. Muth, T. Ormandy,
S. Okasaka, N. Narula, and N. Fullagar, “Native client: A sandbox for
portable, untrusted x86 native code,” in Proceedings of the 30th IEEE
Symposium on Security and Privacy, 2009.
[51] F. Zhang, J. Wang, K. Sun, and A. Stavrou, “Hypercheck: A hardware-
assisted integrity monitor,” Dependable and Secure Computing, IEEE
Transactions on, 2014.
[21] V. P. Kemerlis, M. Polychronakis, and A. D. Keromytis, “ret2dir:
the 23rd USENIX
isolation,” in Proceedings of
Rethinking kernel
Security Symposium, 2014.
[22] Y. Kim, R. Daly, J. Kim, C. Fallin, J. H. Lee, D. Lee, C. Wilkerson,
K. Lai, and O. Mutlu, “Flipping bits in memory without accessing them:
An experimental study of dram disturbance errors,” in Proceeding of
the 41st Annual International Symposium on Computer Architecuture,
2014.
[23] S. T. King and P. M. Chen, “Subvirt: Implementing malware with virtual
machines,” in Proceedings of the 27th IEEE Symposium on Security and
Privacy, 2006.
[24] G. Klein, K. Elphinstone, G. Heiser, J. Andronick, D. Cock, P. Derrin,
D. Elkaduwe, K. Engelhardt, R. Kolanski, M. Norrish et al., “sel4:
Formal veriﬁcation of an os kernel,” in Proceedings of the 22nd ACM
SIGOPS symposium on Operating systems principles, 2009.
J. Liedtke, “On micro-kernel construction,” in Proceedings of the 15th
ACM Symposium on Operating Systems Principles, 1995.
[25]
[27]
[26] Y. Mao, H. Chen, D. Zhou, X. Wang, N. Zeldovich, and M. F. Kaashoek,
“Software fault isolation with api integrity and multi-principal mod-
ules,” in Proceedings of the 23rd ACM SIGOPS Symposium on Oper-
ating Systems Principles, 2011.
J. M. McCune, B. Parno, A. Perrig, M. K. Reiter, and H. Isozaki,
“Flicker: An execution infrastructure for TCB minimization,” in Pro-
ceedings of the ACM European Conference in Computer Systems, 2008.
[28] S. C. Misra and V. C. Bhavsar, “Relationships between selected software
measures and latent bug-density: Guidelines for improving quality,” in
Computational Science and Its ApplicationsICCSA, 2003.
[29] T. J. Ostrand and E. J. Weyuker, “The distribution of faults in a large
industrial software system,” in ACM SIGSOFT Software Engineering
Notes, 2002.
[30] D. R. Piegdon and L. Pimenidis, “hacking in physically address-
able memory,” in Seminar of Advanced Exploitation Techniques, WS
2006/2007, 2007.
[31] D. Rosenberg, “Qsee trustzone kernel integer overﬂow,” in Black Hat
USA, 2014.
[32] T. Roth, “Next generation mobile rootkits,” in Hack In Paris, 2013.
[33]
J. H. Saltzer, “Protection and the control of information sharing in
multics,” Communications of the ACM, 1974.
J. H. Saltzer and M. D. Schroeder, “The protection of information in
computer systems,” Proceedings of the IEEE, 1975.
[34]
[35] F. B. Schneider, G. Morrisett, and R. Harper, “A language-based
approach to security,” in Informatics, 2001.
[36] A. Seshadri, M. Luk, N. Qu, and A. Perrig, “Secvisor: A tiny hypervisor
to provide lifetime kernel code integrity for commodity oses,” in Pro-
ceedings of the 21st ACM SIGOPS Symposium on Operating Systems
Principles, 2007.
[37] M. I. Sharif, W. Lee, W. Cui, and A. Lanzi, “Secure in-vm monitor-
ing using hardware virtualization,” in Proceedings of the 16th ACM
conference on Computer and communications security, 2009.
[38] D. Shen, “Attacking your trusted core: Exploiting trustzone on android,”
in Black Hat USA, 2015.
[39] A. Srivastava and J. T. Gifﬁn, “Efﬁcient monitoring of untrusted kernel-
mode execution,” in Proceedings of the Network and Distributed System
Security Symposium, 2011.
[40] U. Steinberg and B. Kauer, “Nova: a microhypervisor-based secure vir-
tualization architecture,” in Proceedings of the 5th European conference
on Computer systems, 2010.
[41] G. E. Suh, D. Clarke, B. Gassend, M. Van Dijk, and S. Devadas,
“Aegis: architecture for tamper-evident and tamper-resistant process-
ing,” in Proceedings of the 17th annual international conference on
Supercomputing, 2003.
[42] M. M. Swift, B. N. Bershad, and H. M. Levy, “Improving the reliability
of commodity operating systems,” in Proceedings of the 19th ACM
Symposium on Operating Systems Principles, 2003.
J. Thomas and N. Keltner, “Here be dragons,” in RECON Canada, 2014.
[43]
15