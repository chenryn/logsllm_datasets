       keystream_block = AES(key = key, block = block)
       block[0:4] = little_endian_uint32(
           read_little_endian_uint32(block[0:4]) + 1)
       todo = min(bytelen(in), bytelen(keystream_block)
       for j = 0; j  2^36 {
       fail()
     }
     if bytelen(additional_data) > 2^36 {
       fail()
     }
     message_encryption_key, message_authentication_key =
         derive_keys(key_generating_key, nonce)
Gueron, et al.                Informational                     [Page 6]
RFC 8452                       AES-GCM-SIV                    April 2019
     length_block =
         little_endian_uint64(bytelen(additional_data) * 8) ++
         little_endian_uint64(bytelen(plaintext) * 8)
     padded_plaintext = right_pad_to_multiple_of_16_bytes(plaintext)
     padded_ad = right_pad_to_multiple_of_16_bytes(additional_data)
     S_s = POLYVAL(key = message_authentication_key,
                   input = padded_ad ++ padded_plaintext ++
                           length_block)
     for i = 0; i  2^36 + 16 {
       fail()
     }
     if bytelen(additional_data) > 2^36 {
       fail()
     }
     message_encryption_key, message_authentication_key =
         derive_keys(key_generating_key, nonce)
     tag = ciphertext[bytelen(ciphertext)-16:]
     counter_block = tag
     counter_block[15] |= 0x80
     plaintext = AES_CTR(key = message_encryption_key,
                         initial_counter_block = counter_block,
                         in = ciphertext[:bytelen(ciphertext)-16])
     length_block =
         little_endian_uint64(bytelen(additional_data) * 8) ++
         little_endian_uint64(bytelen(plaintext) * 8)
     padded_plaintext = right_pad_to_multiple_of_16_bytes(plaintext)
     padded_ad = right_pad_to_multiple_of_16_bytes(additional_data)
     S_s = POLYVAL(key = message_authentication_key,
                   input = padded_ad ++ padded_plaintext ++
                           length_block)
     for i = 0; i  310728d9911f1f38c40e952ca83d093e
   01000000752abad3e0afb5f434dc4310 -> 37b24316c3fab9a046ae90952daa0450
   02000000752abad3e0afb5f434dc4310 -> a4c5ae624996327947920b2d2412474b
   03000000752abad3e0afb5f434dc4310 -> c100be4d7e2c6edd1efef004305ab1e7
Gueron, et al.                Informational                    [Page 10]
RFC 8452                       AES-GCM-SIV                    April 2019
   The latter halves of the ciphertext blocks are discarded and the
   remaining bytes are concatenated to form the per-message keys.  Thus,
   the message-authentication key is 310728d9911f1f3837b24316c3fab9a0,
   and the message-encryption key is a4c5ae6249963279c100be4d7e2c6edd.
   The length block contains the encoding of the bit lengths of the
   additional data and plaintext, respectively.  The string "example" is
   seven characters, thus 56 bits (or 0x38 in hex).  The string "Hello
   world" is 11 characters, or 88 = 0x58 bits.  Thus, the length block
   is 38000000000000005800000000000000.
   The input to POLYVAL is the padded additional data, padded plaintext,
   and then the length block.  This is 6578616d706c650000000000000000004
   8656c6c6f20776f726c64000000000038000000000000005800000000000000,
   based on the ASCII encoding of "example" (6578616d706c65) and "Hello
   world" (48656c6c6f20776f726c64).
   Calling POLYVAL with the message-authentication key and the input
   above results in S_s = ad7fcf0b5169851662672f3c5f95138f.
   Before encrypting, the nonce is XORed in and the most significant bit
   of the last byte is cleared.  This gives
   d85575d8b1c630e256bb6c2c5f95130f, because that bit happened to be one
   previously.  Encrypting with the message-encryption key (using
   AES-128) gives the tag, which is 4fbcdeb7e4793f4a1d7e4faa70100af1.
   In order to form the initial counter block, the most significant bit
   of the last byte of the tag is set to one.  That doesn’t result in a
   change in this example.  Encrypting this with the message key (using
   AES-128) gives the first block of the keystream:
   1551f2c1787e81deac9a99f139540ab5.
   The final ciphertext is the result of XORing the plaintext with the
   keystream and appending the tag.  That gives
   5d349ead175ef6b1def6fd4fbcdeb7e4793f4a1d7e4faa70100af1.
9.  Security Considerations
   AES-GCM-SIV decryption involves first producing an unauthenticated
   plaintext.  This plaintext is vulnerable to manipulation by an
   attacker; thus, if an implementation released some or all of the
   plaintext before authenticating it, other parts of a system may
   process malicious data as if it were authentic.  AES-GCM might be
   less likely to lead implementations to do this because there the
   ciphertext is generally authenticated before, or concurrently with,
   the plaintext calculation.  Therefore, this text requires that
   implementations MUST NOT release unauthenticated plaintext.  Thus,
   system designers should consider memory limitations when picking the
Gueron, et al.                Informational                    [Page 11]
RFC 8452                       AES-GCM-SIV                    April 2019
   size of AES-GCM-SIV plaintexts: large plaintexts may not fit in the
   available memory of some machines, tempting implementations to
   release unverified plaintext.
   A detailed cryptographic analysis of AES-GCM-SIV appears in
   [AES-GCM-SIV], and the remainder of this section is a summary of that
   paper.
   The AEADs defined in this document calculate fresh AES keys for each
   nonce.  This allows a larger number of plaintexts to be encrypted
   under a given key.  Without this step, AES-GCM-SIV encryption would
   be limited by the birthday bound like other standard modes (e.g.,
   AES-GCM, AES-CCM [RFC3610], and AES-SIV [RFC5297]).  This means that
   when 2^64 blocks have been encrypted overall, a distinguishing
   adversary who is trying to break the confidentiality of the scheme
   has an advantage of 1/2.  Thus, in order to limit the adversary’s
   advantage to 2^-32, at most 2^48 blocks can be encrypted overall.  In
   contrast, by deriving fresh keys from each nonce, it is possible to
   encrypt a far larger number of messages and blocks with AES-GCM-SIV.
   We stress that nonce misuse-resistant schemes guarantee that if a