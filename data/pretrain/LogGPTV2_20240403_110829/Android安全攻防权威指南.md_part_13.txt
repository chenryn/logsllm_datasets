1q29 / 200
3003 / inet
3007 / net_bw_act
dbus-daenon
管理 D-Bus 特有的 IPC/消息传递（主要针对非 Android 特有的UID：1002/bluetooth
组件)
GID: 1002 / bluetooth
用户组：3001 / net_b_admin
---
## Page 52
36
第2章Android的安全设计与架构
（续）
福述
UID、GID和铺助用户组
insta11d
管理设备上的应用程序包安装（以程序包管理器的名义），包括
UID; 1012/install
（））
GID, 1002/install
化
4.2之前的版本：
UID; 0/root
GID; 0/root
keystore
负责对系统上键值对的安全存（通过用户定义的口令进行保护）UID：1017/keystore
GID, 1017/keystore
用户组：1026/dnmpc
drmserver
提供对数字版权保护的底层操作，应用通过与高层次上的DRM
p/6101n
程序包与这个服务进行交互
用户组; 1026/dm pc
GID: 1019/ drm
3003 / inet
serviceman-ager作为注册/注销应用服务的 Binder IPC端点的仲裁者
UID, 1000 / system
surface-flinger
GID: 1000/ system
在Android4.0以上版本中存在的显示合成器，负责创建进行演
mss /00011
示的图形帧，屏幕，并发送给显示卡驱动
GID, 1000/ system
Ueventd
在Andoid2.2以上版本中存在的用户空间守护程序，处理系统
UID: 0/root
和设备事件并采取相应动作，比如装载恰当的内核模块
GID, 0/roet
如前所述，这份清单并不详尽。对比定制设备与Nexus设备的进程列表、initrc文件以及文
件系统，通常会发现大量的非标准服务。这些服务非常能够引起人的兴趣，因为它们的代码质量
与Android设备中的核心服务无法相比。
2.3.5内核
尽管Android的根基—Linux内核文档相当完备而且已经被深人理解，但是Linux内核和
Android使用的内核还是有很多显著的差异。本节将介绍其中的一些变化，特别是那些和Android
安全相关的。
1.Android分支
在早期，谷歌创建了Linux内核的一个Android分支，因为许多修改和添加已经不再与Linux
内核主代码树相互兼容。总体面言，这其中包括了大约250个补丁，涉及文件系统支持、网络处
理调整，以及进程和内存管理功能等。根据一位内核工程师的说法，绝大部分的补丁“代表着
Android开发者在Linux内核中发现的一些局限性”。2012年3月，Linux内核维护者将Android
特有的内核修改合并到了主代码树。表2-3显示了一些对主代码树的添加与修改，本节将详细介
绍其中的一部分。
---
## Page 53
2.3深入理解各个层次
37
表2-3Android对Linux内核的主要修改
内核修改
Binder
IPC机制，提供额外的一些特性，比如对调用者和被调用者的安全验证，它已被大量的系统和
框架服务所使用
ashmem
医名共享内存，一种基于文件的共享内存分配器，使用Binder IPC来允许进程识别内存区域
文件指述符
pmem
进程内存分配器，用于管理大块，连续的其享内存区域
日志记录器
系统范围的日志功能
RAM_CONSOLE
在内核错误后，在RAM中存储内核日志消息，以便查看
OOM修改
“Out Of Memory”-kiler在内存空间低的时候杀掉进程，在Android分支中，OOM在内存即
将用尽时，较传统Limux内核能更快地杀掉进程
wakelocks
电源管理特性，使得设备进入低功率省电模式，同时保持可响应状志
Alarm Timers
Paranoid Networking
将网络操作和功能特性限制在特定的用户组ID
timed output/gpio
允许用户空间程序在一定时间后修改和重置GPIO寄存器
yaffs2
对yaffs2Flash文件系统的支持
2. Binder
对Android 的Linux 内核最为重要的一个添加也许是Binder 驱动。Binder是一个基于
OpenBinder修改版本的IPC机制，OpenBinder最初由Be公司开发，后来又由Palm公司开发和
维护。Android的Binder代码量相对较小（大约有4000行源码，存在于2个文件中），但是对于
大部分的Android功能都是非常关键的。
概括地说，Binder内核驱动是整个Binder架构的粘合剂。Binder作为一个架构，以客户端
节进行了抽象，使得这些方法调用看起来就像是本地函数调用。图2-3显示了Binder的通信流图。
Binder也使用进程ID（PID）和UID信息作为一种标识调用进程的手段，允许被调用方作出
访问控制的决策。通常会调用 Binder，getCallingUid和 Binder.getCal1ingPid等函数，
或者调用checkCallingPermission等高层次上的检查函数。
在实际情况中会遇到的一个例子是ACCESS_SURFACE_FLINGBR权限。这一权限通常只授予
图形系统用户，并允许访间Surface Flinger图形服务的BinderIPC接口。此外，调用者的用户组
成员关系（以及随后所需要的权限）会通过一系列对前述函数的调用进行检查，如以下代码片段
所示。
const int pid = ipe->getCallingPid();
const int uid = ipc->getCallingUid();
1f ((uid != AID_GRAPHICS) &&
!PermissionCache::checkPermission (sReadPramebuffer,
pid, uid))(
ALOGB(*Permission Denial: *
*can’t read framebuffer pid=sd, uid=%d*, pid, uid) :
return PERMISSION_DENIED;
---
## Page 54
80
第2章Android的安全设计与架构
进程A
代理
Binde驱动
带有线程的进程B
图2-3Binder 的通信流
在更高的层次上所暴露的IPC方法，如那些由绑定服务所提供的IPC方法，通常会通过
Android接口定义语言（AIDL）提炼成一个抽象接口。AIDL允许两个应用使用“协商确定”或
者标准化的接口，来发送和接收数据，使得接口独立于具体的实现。AIDL类似于其他的接口定
义语言文件，比如C/C++中的头文件。以下是一个AIDL代码片段的示例。
/ / IRemoteServlce .aid1
package com.exanple.android;
//在此声明任何非殿认类型哥入声明
interface IRemoteService (
/**范例联务接2 */
/**请求这一服务的进程ID，做点“有趣”的事情*/
int getPid():
/**显示一壶用作AIDL参数和适回健的基本类型*/
void basicTypes (int anInt, long along. boolean aBoolean,
double aDouble, String aString):
float aFloat,
这个AIDL的例子定义了一个简单的接口—IRemoteService，包含两个方法：getPid和
basicTypes。如果一个应用绑定到暴露此接口的服务，随之就可以在Binder支持下调用前面提
到的这两个方法。
3. ashmem
匿名共享内存服务，简称ashmem，是另一个在Linux内核Android分支中添加的代码模块。
ashmem驱动基本上提供了基于文件、通过引用计数的共享内存接口。它广泛应用于大多数
Android核心组件中，包括 Surface Flinger、Audio Flinger、系统服务器和 DalvikVM等。ashmem
能够自动收缩内存缓存，并在全局可用内存较低时回收内存区域，因面非常适用于低内存环境。
在底层使用 ashmem很简单，只需调用 ashmem_create_region并对返回的文件描述符使
---
## Page 55
2.3深入理解各个层次
39
用mmap函数：
f(fd == 0)(
Int fd = ashmem_create_region(*SoneAshmem*, size) :
data = mmap (NULL, sIze, PROT_READ I PROT_WRIT8, MAP_SHARED, fd, 0) :
在较高层次上，Android框架层中提供了MemoryFile类，作为ashmem驱动的封装器。此
外，进程可以使用Binder机制在以后共享这些内存对象，并利用Binder的安全特性来限制访问。
作为一起安全事件，在2011年年初，ashmem被证明存在一个非常严重的安全缺陷，允许通过
Android属性进行特权提升，关于这一点，我们将在第3章中进行详细介绍。
4. pmem
另一个Android特有的自定义驱动是pmem，用来管理1~16MB（或更多，取决于具体实现）
的大块物理上连续的内存区块。这些区块是特殊的，可以在用户空间进程和其他内核驱动（比如
GPU驱动）之间共享。与ashmem不同的是，pmem驱动需要一个分配进程，为pmem的内存堆
保留一个文件描述符，直到所有其他索引都关闭。
5.日志记录器
1
虽然Android内核仍然维护自已基于Linux内核的日志机制，但它也使用另一个日志记录子
系统，即俗称的“日志记录器”（logger）。作为1ogcat命令的支持，这个驱动用于查看日志缓
冲区。它根据信息的类型，提供了4个独立的日志缓冲区：main（主缓冲区）、radio（无线电
缓冲区）、event（事件缓冲区）与system（系统缓冲区）。图2-4显示了日志事件的流图以及
辅助日志记录器的组件。
Android日志记录系统概览
Jaa程序
目标
Sys
原生程序
主机
中的AD
tdou
liblog
db
用户
内核
图2-4Android日志记录系统架构
---
## Page 56
40
第2章Android的安全设计与架构
主缓冲区通常是日志数量最大的，并且是应用相关事件的日志源。应用通常从
android.uti1.Log类中调用一个方法，而调用的方法对应于不同的日志条目优先级别，例如，
日志（很像 syslog）。