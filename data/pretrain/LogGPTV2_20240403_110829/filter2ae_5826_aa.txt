作者：huahuaisadog@360VulpeckerTeam  
来源：[安全客](http://bobao.360.cn/learning/detail/4495.html?from=timeline&isappinstalled=0
"安全客")
#### 0x00
前些天，armis爆出了一系列蓝牙的漏洞， **无接触无感知接管系统**
的能力有点可怕，而且基本上影响所有的蓝牙设备，危害不可估量，可以看[这里](https://www.armis.com/blueborne/
"这里")来了解一下它的逆天能力：只要手机开启了蓝牙，就可能被远程控制。现在手机这么多，利用这个漏洞写出蠕虫化的工具，那么可能又是一个手机版的低配wannacry了。我们360Vulpecker
Team在了解到这些相关信息后，快速进行了跟进分析。
armis给出了他们的whitepaper，对蓝牙架构和这几个漏洞的分析可以说非常详尽了，先膜一发。不过他们没有给出这些漏洞的PoC或者是exp，只给了一个针对Android的“BlueBorne检测app"，但是逆向这个发现
**仅仅是检测了系统的补丁日期** 。于是我来拾一波牙慧，把这几个漏洞再分析一下，然后把poc编写出来：
  * CVE-2017-1000250 Linux bluetoothd进程信息泄露 
  * CVE-2017-1000251 Linux 内核栈溢出 
  * CVE-2017-0785 Android com.android.bluetooth进程信息泄露 
  * CVE-2017-0781 Android com.android.bluetooth进程堆溢出 
  * CVE-2017-0782 Android com.android.bluetooth进程堆溢出
以上PoC代码均在
由于也是因为这几个漏洞才从零开始搞蓝牙，所以应该有些分析不到位的地方，还请各路大牛斧正。
#### 0x01 蓝牙架构及代码分布
这里首先应该祭出armis的paper里的图：
图上把蓝牙的各个层次关系描述得很详尽，不过我们这里暂时只需要关心这么几层：HCI，L2CAP，BNEP，SDP。BNEP和SDP是比较上层的服务，HCI在最底层，直接和蓝牙设备打交道。而承载在蓝牙服务和底层设备之间的桥梁，也就是L2CAP层了。每一层都有它协议规定的数据组织结构，所有层的数据包组合在一起，就是一个完整的蓝牙包（一个SDP包为例）：
虽然协议规定的架构是图上说的那样，但是具体实现是有不同的，Linux用的BlueZ，而现在的Android用的BlueDroid，也就针对这两种架构说一说代码的具体分布。
##### BlueZ
在Linux里，用的是BlueZ架构，由bluetoothd来提供BNEP,SDP这些比较上层的服务，而L2CAP层则是放在内核里面。对于BlueZ我们对SDP和L2CAP挨个分析。
1， 实现SDP服务的代码在代码目录的/src/sdp，其中sdp-client.c是它的客户端，sdp-server.c是它的服务端。我们要分析的漏洞都是远程的漏洞，所以问题是出在服务端里面，我们重点关注服务端。而服务端最核心的代码，应该是它对接受到的数据包的处理的过程，这个过程由`sdp-request.c`来实现。当L2CAP层有SDP数据后，会触发`sdp-server.c`的`io_session_event`函数，来获取这个数据包，交由`sdp-request.c`的`handle_request`函数处理(怎么处理的，后续漏洞分析的时候再讲)：
    static gboolean io_session_event(GIOChannel *chan, GIOCondition cond, gpointer data)
    {
        ...
        len = recv(sk, &hdr, sizeof(sdp_pdu_hdr_t), MSG_PEEK); //获取SDP的头部数据，获得SDP数据大小
        if (len rx_q))) {
            /* Send copy to monitor */
            hci_send_to_monitor(hdev, skb);
            ...
            switch (bt_cb(skb)->pkt_type) {
            case HCI_EVENT_PKT:
                BT_DBG("%s Event packet", hdev->name);
                hci_event_packet(hdev, skb);
                break;
            case HCI_ACLDATA_PKT:
                BT_DBG("%s ACL data packet", hdev->name);
                hci_acldata_packet(hdev, skb);
                break;
            case HCI_SCODATA_PKT:
                BT_DBG("%s SCO data packet", hdev->name);
                hci_scodata_packet(hdev, skb);
                break;
            default:
                kfree_skb(skb);
                break;
            }
        }
    }
收到数据后，会判断pkt_type，符合L2CAP层的type是`HCI_ACLDATA_PKT`，函数会走到`hci_acldata_packet`，这个函数会把HCI的数据剥离之后，把L2CAP数据交给L2CAP层的`l2cap_recv_acldata`：
    static void hci_acldata_packet(struct hci_dev *hdev, struct sk_buff *skb)
    {
        ...
        skb_pull(skb, HCI_ACL_HDR_SIZE);
        ...
        if (conn) {
            hci_conn_enter_active_mode(conn, BT_POWER_FORCE_ACTIVE_OFF);
            /* Send to upper protocol */
            l2cap_recv_acldata(conn, skb, flags);
            return;
        } else {
            BT_ERR("%s ACL packet for unknown connection handle %d",
                   hdev->name, handle);
        }
        kfree_skb(skb);
    }
同样的，对于L2CAP层对数据的细致处理，我们还是等后续和漏洞来一块进行分析。
##### BlueDroid
在现在的Android里，用的是BlueDroid架构。这个和BlueZ架构有很大不同的一点是：BlueDroid将L2CAP层放在了userspace。SDP，BNEP，L2CAP统统都由`com.android.bluetooth`这个进程管理。而BlueDroid代码的核心目录在Android源码目录下的
/sytem/bt
，这个目录的核心产物是`bluetooth.default.so`，这个so集成所有Android蓝牙相关的服务，而且这个so没有导出任何相关接口函数，只导出了几个协议相关的全局变量供使用，所以想根据so来本地检测本机是否有BlueDrone漏洞，是一件比较困难的事情。对于BlueDroid，由于android的几个漏洞出在BNEP服务和SDP服务，所以也就主要就针对这两块。值得注意的是，在Android里，不论是64位还是32位的系统，这个`bluetooth.default.so`都是用的32位的。文章里这部分代码都基于Android7.1.2的源码。
1，BlueDroid的SDP服务的代码，在`/system/bt/stack/sdp` 文件夹里，其中sdp服务端对数据包的处理由sdp-server.c实现。SDP连接建立起来后，在收到SDP数据包之后呢，会触发回调函数sdpdataind，这个函数会把数据包交个`sdp-server.c`的`sdpserverhandleclientreq`函数进行处理:
    static void sdp_data_ind (UINT16 l2cap_cid, BT_HDR *p_msg)
    {
        tCONN_CB    *p_ccb;
        if ((p_ccb = sdpu_find_ccb_by_cid (l2cap_cid)) != NULL)
        {
            if (p_ccb->con_state == SDP_STATE_CONNECTED)
            {
                if (p_ccb->con_flags & SDP_FLAGS_IS_ORIG)
                    sdp_disc_server_rsp (p_ccb, p_msg);
                else
                    sdp_server_handle_client_req (p_ccb, p_msg);
            }
        ...
    }
2，BlueDroid的BNEP服务的代码主要在`/system/bt/stack/bnep/bnepmain.c`。BNEP连接建立起来后，再收到BNEP的包，和SDP类似，会触发回调函数`bnepdata_ind`，这个函数包含了所有对BNEP请求的处理，漏洞也是发生在这里，具体的代码我们后续会分析。
#### 0x02 漏洞分析以及PoC写法
蓝牙的预备知识差不多了，主要是找数据包的入口。我们再基于漏洞和PoC的编写过程来详细分析其中的处理过程，和相关蓝牙操作的代码该怎么写。
##### CVE-2017-1000251
这个是Linux
L2CAP层的漏洞，那么就是内核里面的。先不着急看漏洞，先看L2CAP层如何工作。在一个L2CAP连接的过程中，我们抓取了它的数据包来分析，L2CAP是怎么建立起连接的：
我们注意这么几个包： sentinfomationrequest , sendconnectionrequest,
sendconfigurerequest。抓包可以看到，在一次完整的L2CAP连接的建立过程中，发起连接的机器，会主动送出这么几个包。其中infomationrequest是为了得到对方机器的名称等信息，connectionrequest是为了建立L2CAP真正的连接，主要是为了确定双方的CHANNEL
ID，后续的数据包传输都要跟着这个channel id 走（图上的SCID,
DCID），这个channel也就是我们所说的连接。在connectionrequest处理完毕之后，连接状态将变成 BTCONNECT2
。随后机器会发起configure_request,这一步就到了armis的paper第十页所说的configuration process:
这个过程完成后，整个L2CAP层的连接也就建立完成。
从上述过程看，可以发现L2CAP层连接的建立，主要是对上述三个请求的发起和处理。而我们的漏洞，也其实就发生在configuration
process。我们先分析接收端收到这三个请求后，处理的逻辑在哪里，也就是我们前文提到的L2CAP对接受到的数据的处理过程：
1，在l2caprecvacldata接收到数据后，数据包会传给l2cap_recvframe
2，l2caprecvframe会取出检查L2CAP的头部数据，然后检查根据头部里的cid字段，来选择处理逻辑：
    static void l2cap_recv_frame(struct l2cap_conn *conn, struct sk_buff *skb)
    {
        ...
        skb_pull(skb, L2CAP_HDR_SIZE);
        cid = __le16_to_cpu(lh->cid);
        len = __le16_to_cpu(lh->len);
        switch (cid) {
        case L2CAP_CID_SIGNALING:
            l2cap_sig_channel(conn, skb);
            break;
        case L2CAP_CID_CONN_LESS:
            psm = get_unaligned((__le16 *) skb->data);
            skb_pull(skb, L2CAP_PSMLEN_SIZE);
            l2cap_conless_channel(conn, psm, skb);
            break;
        case L2CAP_CID_LE_SIGNALING:
            l2cap_le_sig_channel(conn, skb);
            break;
        default:
            l2cap_data_channel(conn, cid, skb);
            break;
        }
3，底层L2CAP的连接，cid固定是L2CAP_CID_SIGNALING，于是会走`l2cap_sig_channel`，`l2cap_sig_channel`得到的是剥离了头部的L2CAP的数据，这一部将把数据里的cmd头部解析并剥离，再传给`l2cap_bredr_sig_cmd`进行处理：
    static inline void l2cap_sig_channel(struct l2cap_conn *conn,
                         struct sk_buff *skb)
    {
        ...
        while (len >= L2CAP_CMD_HDR_SIZE) {
            u16 cmd_len;
            memcpy(&cmd, data, L2CAP_CMD_HDR_SIZE);  //取得cmd头部数据
            data += L2CAP_CMD_HDR_SIZE;
            len  -= L2CAP_CMD_HDR_SIZE;
            cmd_len = le16_to_cpu(cmd.len);  //取得cmd的大小
        ...
            err = l2cap_bredr_sig_cmd(conn, &cmd, cmd_len, data); //传给l2cap_bredr_sig_cmd处理
        ...
            data += cmd_len;
            len  -= cmd_len;
        }
    drop:
        kfree_skb(skb);
    }
到这里，我们应该能得出L2CAP协议的数据结构：
4， 随后数据进入到了l2cap_bredr_sig_cmd函数进行处理。这里也就是处理L2CAP各种请求的核心函数了：
    static inline int l2cap_bredr_sig_cmd(struct l2cap_conn *conn,
                          struct l2cap_cmd_hdr *cmd, u16 cmd_len,
                          u8 *data)
    {
        int err = 0;
        switch (cmd->code) {
        case L2CAP_CONN_REQ:
            err = l2cap_connect_req(conn, cmd, cmd_len, data);
            break;
        case L2CAP_CONN_RSP:
        case L2CAP_CREATE_CHAN_RSP:
            l2cap_connect_create_rsp(conn, cmd, cmd_len, data);
            break;
        case L2CAP_CONF_REQ:
            err = l2cap_config_req(conn, cmd, cmd_len, data);
            break;
        case L2CAP_CONF_RSP: 
            l2cap_config_rsp(conn, cmd, cmd_len, data);  //漏洞函数
            break;
        ...
        case L2CAP_INFO_REQ: