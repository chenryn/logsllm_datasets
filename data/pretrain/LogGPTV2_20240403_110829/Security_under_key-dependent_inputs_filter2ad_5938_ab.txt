the function Ψs(·) is injective. Consider now a set of func-
: 1 ≤ i ≤ n} with the property that for every i
tions {gi, g
1On the other hand, the “exact security” language may be
somewhat more natural when talking about block ciphers
and tweakable block ciphers.
(cid:2)
i
(cid:2)
and every s we have gi(s) = g
i(s) if and only if the i’th bit
of s is zero. (An example is a set of functions containing ad-
ditions of constants modulo 2n as well as xor with constants
from {0, 1}n. For example, for all i < n we set gi to be xor
with 0n−i10i−1 and g
(cid:2)
i to be addition of 2i modulo 2n.)
(cid:2)
(cid:2)
(g
(cid:2)
i(s)) = Ψ
(cid:2)
i for all i.
(cid:2)
(cid:2)
(cid:2)
i(s) and therefore Ψ
The attacker then simply queries its oracle Ψ
on the in-
puts gi and g
If the i’th bit of the secret key
is 0 then gi(s) = g
(g) = Ψ(gi(s)) =
Ψ(g
) (because Ψ is deterministic). On the
other hand, if the i’th bit of the secret key is 1 then gi(s) (cid:5)=
(cid:2)
(g) =
i(s) and since Ψ is injective it follows that also Ψ
g
Ψ(gi(s)) (cid:5)= Ψ(g
). The attacker can therefore
determine all the bits of the secret key s in violation of the
security of Ψ.
(cid:2)
i(s)) = Ψ
(g
(cid:2)
(cid:2)
(cid:2)
Parametrized deﬁnition.
(cid:2)
As a consequence of the above observations, and similar
to the case of key-related attacks [2], the deﬁnition of KDI-
security will be parametrized by a class of function descrip-
tions C, and all the queries to the O
oracle will be restricted
to functions from C. The question of whether KDI security
with respect to a certain class C provides a meaningful level
of security depends heavily on the application. In some cases
anything less than “all polynomial-size circuits” may be in-
suﬃcient while in others having C restricted to the identity
function only (i.e., one is allowed to query the primitive on
the key itself but not on other functions of the key) may
suﬃce.
In many cases, providing security assurance against one
function of the key, i.e., the case where |C| = 1, will be of
signiﬁcant value: we may at least hope that even an abusive
implementation that “encrypts its own key” will only do so
in one form, rather than encrypting many copies of the key
in many diﬀerent forms. Given the limitations discussed
above (and more to be shown in the sequel) we will judge
diﬀerent constructions under the “modest” requirement that
they resist singleton classes |C| = 1. We would like to get a
construction that is KDI secure against all singleton classes
(i.e., the attacker is allowed to choose a single function g(s)
to query but the function g could be any eﬃcient function
of s). Unfortunately, examples such as the one with the
−1
function g(s) = E
s (s) demonstrate that even this modest
goal cannot always be achieved. In such a case we will study
the “minimalist” requirement that a construction is KDI
secure against one speciﬁc function.
3. PSEUDO-RANDOM FUNCTIONS
Below we use the convention that for security parame-
ter n, the key for a pseudo-random function is a random
n-bit string, and that the function is from {0, 1}(cid:2)in(n) to
{0, 1}(cid:2)out (n) where (cid:2)in and (cid:2)out are eﬃciently computable and
polynomially bounded. Then a family of pseudo-random
functions is an ensemble
F =
fs : {0, 1}(cid:2)in(n) → {0, 1}(cid:2)out(n)
˛˛˛˛ s ∈ {0, 1}n
j
ﬀ
n∈N
and we require that there is an eﬃcient evaluation procedure
that given any s ∈ {0, 1}n and any x ∈ {0, 1}(cid:2)in(n) computes
y = fs(x).
The standard security deﬁnition for pseudo-random func-
tions as deﬁned in [7] asserts that no feasible attacker Aφ(1n)
(with oracle access to φ) can distinguish with non-negligible
advantage the case where φ = fs for a random s ∈R {0, 1}n
from the case where φ is chosen as a random function from
{0, 1}(cid:2)in(n) to {0, 1}(cid:2)out(n).
(cid:2)
In order to capture KDI security of pseudo-random func-
tions, we augment the standard deﬁnition of pseudo-random
functions by letting the adversary also access another ora-
that takes as input a description of a function g, and
cle φ
outputs φ(g(s)). (The output size of the functions g con-
sidered here is assumed to match the size of inputs to the
pseudorandom function f .)
(KDI-secure PRFs). A family F of pseudo-
Definition 1
random functions is KDI-secure with respect to a class C of
circuits if no feasible attacker Aφ,φ
(1n) (with oracle access
to φ, φ
) can distinguish with non-negligible advantage be-
tween the following two cases:
(cid:2)
(cid:2)
1. φ = fs for a random s ∈R {0, 1}n and for any g ∈ C
(cid:2)
φ
(g) = φ(g(s));
2. φ is chosen as a random function φ : {0, 1}(cid:2)in(n) →
{0, 1}(cid:2)out (n), s is chosen at random in {0, 1}n, and for
any g ∈ C, φ
(g) = φ(g(s)).
(cid:2)
Note: Many of our results apply to the case where C includes
(cid:2)
a single function g; in this case, one can dispense of the φ
oracle and simply assume that the attacker is given the value
of φ(g(s)).
On KDI-insecure PRFs.
We ﬁrst observe that secure PRFs (or block ciphers) are
not necessarily KDI-secure, not even with respect to the
identity function. Indeed, given any secure PRF family F =
{Fs}, one can trivially modify it as follows: F
(cid:2)
s(x) = s if
(cid:2)
s(x) = Fs(x) otherwise. Clearly, the family
x = s and F
s} is still a secure PRF, but it is not KDI-secure with
(cid:2)
(cid:2)
F
respect to the identity function. Similarly, if we start with a
secure cipher E (a strong pseudo-random permutation) we
can build another secure cipher E
that is not KDI-secure
with respect to the identity function:
= {F
(cid:2)
8<
: s
(cid:2)
s(x) =
E
if x = s
if x = E
Es(s)
Es(x) otherwise
−1
s (s)
Negative Example 1. There exist secure PRFs and se-
cure block ciphers that are KDI-insecure with respect to the
identity function.
3.1 Constructions in the “ideal-cipher model”
We saw above that the construction fs(x) = Es(x) where E
is a secure block cipher is not necessarily KDI-secure. Here
we show that this construction is at least KDI secure in the
“ideal-cipher model”. We begin by adapting our deﬁnition
of KDI security to Shannon’s “ideal cipher model”.
Recall that in the ideal-cipher model, all the parties (in-
cluding the attacker) are given black-box access to two ta-
−1(·,·). These tables are chosen at ran-
bles Π(·,·) and Π
dom subject to the condition that for every “key” s, Π(s,·)
−1(s,·) is its inverse (and all these
is a permutation and Π
permutations are over the same domain). For simplicity of
presentation we assume that on security parameter n, the
key that selects the permutation is of length n bits and the
permutations themselves are over {0, 1}n. Namely, for each
s ∈ {0, 1}n, Π(s,·) is a random permutation over {0, 1}n ,
and Π
−1(s,·) is the inverse permutation.
−1. Speciﬁcally,
We augment the deﬁnition of KDI-security to the ideal-
cipher model by providing the attacker with oracle-access
−1, and more importantly by potentially allowing
to Π, Π
the class of function-descriptions in C to depend on Π
in this case we allow the cir-
and/or Π
cuits in C to include also Π-gates that on input (s, x) return
−1-gates). When stating a re-
Π(s, x) (and similarly also Π
sult in this paper in the context of the ideal cipher model we
will specify whether we assume the functional queries g(s)
to depend or not in the oracles Π and Π
−1.
Note that when adapting Deﬁnition 1 to the “ideal ci-
pher model”, the attacker’s advantage is measured with re-
spect to the probability distribution where for each s ∈
{0, 1}n, Π(s,·) is a random permutation over {0, 1}n and
−1(s,·) is the inverse permutation (also, this advantage
Π
is parametrized in terms of the number of queries the at-
tacker performs to these oracles as well as the number of
such queries performed while computing the function g, if
the latter depends on Π, Π
Remark. The distinction between circuits that include Π
−1 gates and circuits that do not is one of the main
and Π
reasons for using the “ideal cipher model” in the KDI con-
text.
Indeed, in some cases we would like to argue that
a cipher is KDI-secure with respect to any function g that
“does not depend on the cipher itself”. This restriction is
generally not well deﬁned in the standard model but can be
captured in the “ideal cipher model” by specifying that the
function g is described by a circuit that does not include Π
or Π
−1 gates.
−1).
KDI-security of fs(x) = Πs(x).
It is easy to see that even in the “ideal cipher model”,
we can ﬁnd functions g that depend on Π such that the
construction fs(x) = Π(s, x) is not KDI-secure with re-
−1(s, s) then
spect to g. For example, if we set g(s) = Π
−1(s, s)) = s. However, we can show that
fs(g(s)) = Π(s, Π
this construction is KDI secure with respect to every func-
tion g that does not depend on Π, speciﬁcally:
Theorem 1. Let g be any Boolean circuit with no Π-
−1-gates. Then the construction fs(x) = Πs(x) is
gates or Π
a KDI-secure pseudo-random function in the “ideal cipher
model” with respect to the singleton class C = {g}.
Proof Sketch The attacker A has access to three oracles:
−1(·, ·) that represent the ideal cipher and f (·)
Π(·,·), and Π
which is either Π(s,·) for a random s (the “real case”), or
an independent random function (the “random case”). In
addition, the attacker is given the value f (g(s)), where s is
the key in the “real case” and just a random string in the
“random case”.
We consider a “hybrid case” which is just like the “ran-
dom case”, except that f is chosen as a random permuta-
tion rather than a random function. Clearly, the “hybrid”
and the “random” cases cannot be distinguished upto the
birthday bound. The heart of the proof is in showing that
the attacker cannot distinguish the “hybrid” from the “real”
case.
Next we argue that the attacker has only a negligible prob-
−1 oracles with the correct
−1 then all the values
ability to ever query its Π or Π
key s: since g is independent of Π, Π
−1(s, s) comes in, dependent on Π
−1 that by them-
that the attacker sees are entries of Π, Π
selves are independent of s. (This is where the counterex-
−1 allows
ample g(s) = Π
the attacker to ask for “the value in the entry in which s
is written”.) As long as the attacker still did not query Π
−1 with the right key s, then the answer that it got so
or Π
far can be completely simulated by the attacker itself, save
for cases where a query f (x) on some string x happened
to return the same value as f (g(s)). This last event either
happens with negligible probability (if the pre-image of g(s)
is smaller than 2n/2) or they still leave exponentially many
possibilities for s (if the pre-image of g(s) is larger). Hence