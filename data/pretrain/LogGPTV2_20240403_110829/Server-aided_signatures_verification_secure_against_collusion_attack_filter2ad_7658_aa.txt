**Title: Server-Aided Signatures Verification Secure Against Collusion Attacks**

**Authors:**
- Sherman S. M. Chow, University of Waterloo, Ontario, Canada
- Man Ho Au, University:// Wollongong, Australia
- Willy Susilo, University of Wollongong, Australia

**Abstract:**
Wireless handheld devices that support email and web browsing are becoming increasingly popular, particularly for business applications. Ensuring the authenticity of received information is crucial in such contexts.

In server-aided verification (SAV), a significant portion of the verification computation can be offloaded to a powerful but potentially untrusted server. This enables resource-constrained devices to benefit from the security provided by cryptographic schemes, such as pairing-based signatures, which might otherwise be too computationally intensive to verify.

An adversary may attempt to bribe the server to launch various attacks, such as convincing a client that an invalid signature is valid or claiming that a valid signature is invalid. However, these concerns are not adequately addressed by existing security models.

In this paper, we present a generic pairing-based SAV protocol. Compared to the protocol by Girault and Lefranc at Asiacrypt 2005, our protocol offers a higher level of security and is applicable to a broader class of pairing-based cryptosystems. Specifically, it provides SAV protocols for short signatures in the standard model and aggregate signatures, which have not been previously studied.

**Categories and Subject Descriptors:**
C.2.4 [Computer-Communication Networks]: Distributed Systems; K.6.5 [Management of Computing and Information Systems]: Security and Protection

**General Terms:**
Security

**Keywords:**
server-aided computation, collusion attack, authenticity, signatures, pairings, delegation, weak computational device

**Introduction:**

Server-aided computation protocols allow a client to offload computations to a server. These protocols are particularly useful for devices with limited computational power, such as smart cards and RFID tags, which need to perform complex cryptographic operations.

**1.1 Server-Aided Computation of Pairing:**

Bilinear pairings are a key technology for constructing next-generation cryptosystems. They enable the creation of novel cryptographic applications that would be difficult or impossible to build using other primitives. Additionally, they facilitate the construction of highly efficient cryptographic solutions, which are especially beneficial for computationally-limited devices. Pairings are typically instantiated on elliptic curves, leading to shorter representations of cryptographic group elements and making many pairing-based schemes space-efficient.

While these schemes offer high efficiency in terms of bandwidth and storage, they often require heavyweight cryptographic operations. To address this, one might use symmetric-key solutions or employ precomputation techniques. In this paper, we focus on the approach of server-aided computation, specifically for signature verification.

**1.2 Collusion Attack:**

Server-aided computation should not introduce new vulnerabilities. If the server is fully trusted and there is a secure channel between the server and the client, the client can safely offload the computation. However, this trust assumption is unrealistic. The client may face a malicious server or struggle to establish an authenticated connection with a trusted server. Moreover, confidentiality issues arise when the operation involves private information or when the result affects the client's decision-making.

For example, in business scenarios where wireless handheld devices are used for push email, text messaging, and web browsing, it is crucial to verify the authenticity of messages. A malicious server could falsely claim that a valid signature is invalid, effectively denying the client access to legitimate messages. This attack could be motivated by unfair profit, such as invalidating a competitor's bid.

**1.3 Existing Work:**

Girault and Lefranc [9] formalized some security requirements for server-aided verification and analyzed two existing protocols. They introduced a new protocol for a limited class of pairing-based signature schemes. Their model assumes that a malicious server does not collude with the signer and is not given any valid signature on the message. Wu et al. [13] proposed a SAV protocol for the Boneh-Lynn-Shacham signature scheme, noting that the security model of Girault and Lefranc does not account for an adversary interacting with the client via the aided verification protocol. Wu et al. also proposed a security model to capture the collusion of the signer with the server. However, recent work [12] criticized this model and proposed a new one. We find that these models do not adequately address situations where the attacker possesses the signer's private key.

**Preliminaries:**

For a finite set \( S \), \( x \in_R S \) denotes choosing an element \( x \) uniformly at random from \( S \). For algorithms \( A_1 \) and \( A_2 \), \( \text{out} \leftarrow A_1(\text{in}) \) means that \(\text{out}\) is the result of running \( A_1 \) on input \(\text{in}\), and \(\text{out}_1 \leftarrow A_1(\text{in}_1) \leftrightarrow A_2(\text{in}_2)\) means that \(\text{out}_1\) is the final output of \( A_1 \) with local input \(\text{in}_1\) after interacting with \( A_2 \) with local input \(\text{in}_2\).

**2.1 Framework for Server-Aided Verification:**

**Definition 1.** A signature scheme \((\text{Setup}, \text{KeyGen}, \text{Sign}, \text{Verify})\) with server-aided verification includes a \(\text{VStetup}\) algorithm and an \(\text{AidedVerify}\) protocol.
- \(\text{VStetup}\) is a probabilistic algorithm executed by a verifier, taking a security parameter \(1^\lambda\) and outputting some verification parameter \(VString\).
- \(\text{AidedVerify}\) is an interactive protocol between a verifier and a server. The verifier's input includes \(VString\), a message/signature pair \((m, \sigma)\) from a signer, and the public key \(pk\) of the signer. The verifier outputs \(\top\) if \(\sigma\) is a valid signature on \(m\) under \(pk\), and \(\bot\) otherwise. The server has no local output.

**Definition 2.** Our refined definition of algorithms for server-aided verification:
1. \(VString\) can be partitioned into private/public verification parameters \((\gamma, \theta)\), i.e., \((\gamma, \theta) \leftarrow \text{VStetup}(1^\lambda)\).
2. \(\text{AidedVerify}\) is split into a pair of interacting multi-stage algorithms \(\text{AidedVerify}_c\) and \(\text{AidedVerify}_s\), representing the parts of the \(\text{AidedVerify}\) protocol executed by the client and the server, respectively.

**Definition 3.** Correctness of a signature scheme with server-aided verification requires that for all \(\lambda \in \mathbb{N}\), all \(\text{Param}\) given by \(\text{Setup}(1^\lambda)\), all \((sk, pk)\) given by \(\text{KeyGen}(\text{Param})\), and all \(VString\) given by \(\text{VStetup}(1^\lambda)\), we have \(\text{Verify}(pk, \sigma, m) = \text{AidedVerify}_c(m, \sigma, pk, VString) \leftrightarrow \text{AidedVerify}_s(\theta)\) holds for all \(m\) in the message space and \(\sigma\) in the signature space.

**2.2 Existential Unforgeability:**

The work of Wu et al. [13] provides two security definitions. The first is an extension of existential unforgeability against adaptive chosen message attacks for standard signature schemes. Below is our definition of unforgeability, based on the definition by Wu et al. with necessary adjustments.

**Definition 4.** A server-aided verification of signatures protocol is \((t, q_s, q_v)\)-existentially unforgeable under adaptive chosen message and verification attacks (EUF-CMVA) if for all probabilistic polynomial-time adversaries \(A\) running within time \(t\), the following game is won with negligible probability in a security parameter \(\lambda\).

**Setup:** The challenger \(C\) runs the algorithms \(\text{Setup}\), \(\text{KeyGen}\), and \(\text{VStetup}\) to obtain the system parameter \(\text{Param}\), a key pair \((sk, pk)\), and the verification private/public parameter \(VString = (\gamma, \theta)\) respectively. The adversary \(A\) is given \(\text{Param}\), \(pk\), and \(\theta\), while \(\gamma\) and \(sk\) are withheld from \(A\).

**Query:** \(A\) can adaptively make at most \(q_s\) \(\text{OSign}\) queries and at most \(q_v\) \(\text{OAidedVer}\) queries.
- In an \(\text{OSign}\) query, \(A\) supplies a message \(m\). \(C\) adds \(m\) to a set \(M\) and responds with \(\text{Sign}(sk, m)\).
- In an \(\text{OAidedVer}\) query, \(A\) starts by supplying a message/signature pair \((m, \sigma)\).