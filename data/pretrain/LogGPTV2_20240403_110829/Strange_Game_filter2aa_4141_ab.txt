            r.recvuntil(b"Available moves: ")
            available_moves = r.recvlineS(keepends = False)
            if available_moves == "None":
                r.recvline()
                result = r.recvuntilS(b'\r\n\r\n')
                break
            if current_player == Players.OTHER_PLAYER:
                r.recvuntil(b"I choose to play")
                move = int(r.recvuntil(b".", drop = True))
                p.status(f"They chose {move}")
                ns.make_move(current_player, move)
                current_player = Players.MY_PLAYER
            elif current_player == Players.MY_PLAYER:
                p.status(f"Calculating best move")
                best_move = ns.get_best_move()
                p.status(f"I chose {best_move}")
                ns.make_move(current_player, best_move)
                r.sendafter(b"Choose your move: ", f"{best_move}\n".encode("ascii"))
                current_player = Players.OTHER_PLAYER
    log.info(f"Game over:\n{result}")
```
Nothing too fancy here, just read the state from the server, update the game representation with the state and query the suggested move, then update the server and repeat.
All that's left is to implement `get_best_move`. Now, one very interesting thing about [Number Scrabble](https://en.wikipedia.org/wiki/Number_Scrabble) is:
> Number Scrabble (also known as Pick15 or 3 to 15) is a mathematical game where players take turns to select numbers from 1 to 9 without repeating any numbers previously used, and the first player with a sum of exactly 15 using any three of their number selections wins the game. The game is isomorphic to tic-tac-toe, as can be seen if the game is mapped onto a magic square.
This game is just a fancy way to play tic-tac-toe:
> The game is identical to tic-tac-toe, as can be seen by reference to a 3x3 magic square: If a player has selected three numbers which can be found in a line on a magic square, they will add up to 15. If they have selected any other three numbers, they will not.
```
+---+---+---+
| 2 | 7 | 6 |
+---+---+---+
| 9 | 5 | 1 |
+---+---+---+
| 4 | 3 | 8 |
+---+---+---+
```
So, if we research [tic-tac-toe](https://en.wikipedia.org/wiki/Tic-tac-toe) a bit, we'll find that "it is a solved game with a forced draw assuming best play from both players", and that the best play can be calculated using an algorithm called [Minimax](https://en.wikipedia.org/wiki/Minimax):
> Minimax (sometimes MinMax, MM[1] or saddle point[2]) is a decision rule used in artificial intelligence, decision theory, game theory, statistics, and philosophy for minimizing the possible loss for a worst case (maximum loss) scenario. When dealing with gains, it is referred to as "maximin"—to maximize the minimum gain.
> 
> ...
> 
> A simple version of the minimax algorithm, deals with games such as tic-tac-toe, where each player can win, lose, or draw. If player A can win in one move, their best move is that winning move. If player B knows that one move will lead to the situation where player A can win in one move, while another move will lead to the situation where player A can, at best, draw, then player B's best move is the one leading to a draw. Late in the game, it's easy to see what the "best" move is. The Minimax algorithm helps find the best move, by working backwards from the end of the game. At each step it assumes that player A is trying to maximize the chances of A winning, while on the next turn player B is trying to minimize the chances of A winning (i.e., to maximize B's own chances of winning). 
The Minimax algorithm is pretty simple to implement:
```python
def _calc_score(state: NumberScrabble) -> int:
    if state.player_wins(Players.MY_PLAYER):
        return +1
    elif state.player_wins(Players.OTHER_PLAYER):
        return -1
    else:
        return 0
def _minimax(depth, state: NumberScrabble, player: Players) -> Tuple[int, int]:
    if state.game_over():
        score = _calc_score(state)
        return MiniMaxResult(None, score)
    if player == Players.MY_PLAYER:
        best_result = MiniMaxResult(None, -inf)
        next_player = Players.OTHER_PLAYER
    else:
        assert(player == Players.OTHER_PLAYER)
        best_result = MiniMaxResult(None, +inf)
        next_player = Players.MY_PLAYER
    for move in state.available_moves:
        state.make_move(player, move)
        result = _minimax(depth + 1, state, next_player)
        state.undo_move(player, move)
        if player == Players.MY_PLAYER:
            if result.score > best_result.score:
                best_result = MiniMaxResult(move, result.score)
        else:
            if result.score  int:
        return _minimax(0, self, Players.MY_PLAYER).move
```
As stated in the Wikipedia article, by playing an optimal strategy we can always at least force a draw. Let's see if it works:
```console
┌──(user@kali)-[/media/sf_CTFs/checkpoint/Strange_Game]
└─$ python3 solve.py
[+] Opening connection to strange-game.csa-challenge.com on port 4444: Done
[*] New game (round #1), first player: OTHER_PLAYER
[+] Playing...: Done
[*] Game over:
        Player One: 3 6 7 8 9
        Player Two: 1 2 4 5
    Game tied
[*] New game (round #2), first player: MY_PLAYER
[+] Playing...: Done
[*] Game over:
        Player One: 1 2 3 4 7
        Player Two: 8 9 5 6
    Game tied
[*] New game (round #3), first player: OTHER_PLAYER
[+] Playing...: Done
[*] Game over:
        Player One: 5 6 7 8 9
        Player Two: 1 2 3 4
    Game tied
[*] New game (round #4), first player: MY_PLAYER
[+] Playing...: Done
[*] Game over:
        Player One: 1 2 3 4 7
        Player Two: 8 9 5 6
    Game tied
[*] New game (round #5), first player: OTHER_PLAYER
[+] Playing...: Done
[*] Game over:
        Player One: 3 6 7 8 9
        Player Two: 1 2 4 5
    Game tied
[*] New game (round #6), first player: MY_PLAYER
[+] Playing...: Done
[*] Game over:
        Player One: 1 2 3 4 7
        Player Two: 8 9 5 6
    Game tied
[*] New game (round #7), first player: OTHER_PLAYER
[+] Playing...: Done
[*] Game over:
        Player One: 5 6 7 8 9
        Player Two: 1 2 3 4
    Game tied
[*] New game (round #8), first player: MY_PLAYER
[+] Playing...: Done
[*] Game over:
        Player One: 1 2 3 4 5
        Player Two: 8 9 6 7
    Game tied
[*] New game (round #9), first player: OTHER_PLAYER
[+] Playing...: Done
[*] Game over:
        Player One: 3 6 7 8 9
        Player Two: 1 2 4 5
    Game tied
[*] New game (round #10), first player: MY_PLAYER
[+] Playing...: Done
[*] Game over:
        Player One: 1 2 3 4 7
        Player Two: 8 9 5 6
    Game tied
[*] New game (round #11), first player: OTHER_PLAYER
[+] Playing...: Done
[*] Game over:
        Player One: 2 3 6 8 9
        Player Two: 1 4 5 7
    Game tied
[*] New game (round #12), first player: MY_PLAYER
[+] Playing...: Done
[*] Game over:
        Player One: 1 2 3 4 5
        Player Two: 8 9 6 7
    Game tied
[*] New game (round #13), first player: OTHER_PLAYER
[+] Playing...: Done
[*] Game over:
        Player One: 4 6 7 8 9
        Player Two: 1 2 3 5
    Game tied
[*] New game (round #14), first player: MY_PLAYER
[+] Playing...: Done
[*] Game over:
        Player One: 1 2 3 4 7
        Player Two: 8 9 5 6
    Game tied
[*] New game (round #15), first player: OTHER_PLAYER
[+] Playing...: Done
[*] Game over:
        Player One: 4 6 7 8 9
        Player Two: 1 2 3 5
    Game tied
    Congratulations!
    CSA{https://www.youtube.com/watch?v=NHWjlCaIrQo}
[*] Closed connection to strange-game.csa-challenge.com port 4444
```
Looks like "the only winning move is not to play".