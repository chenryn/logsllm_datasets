title:ZigZag: Automatically Hardening Web Applications Against Client-side
Validation Vulnerabilities
author:Michael Weissbacher and
William K. Robertson and
Engin Kirda and
Christopher Kruegel and
Giovanni Vigna
ZigZag: Automatically Hardening  
Web Applications Against Client-side 
Validation Vulnerabilities
Michael Weissbacher, William Robertson, and Engin Kirda, Northeastern University; 
Christopher Kruegel and Giovanni Vigna, University of California, Santa Barbara
https://www.usenix.org/conference/usenixsecurity15/technical-sessions/presentation/weissbacher
This paper is included in the Proceedings of the 
24th USENIX Security Symposium
August 12–14, 2015 • Washington, D.C.
ISBN  978-1-939133-11-3
Open access to the Proceedings of  the 24th USENIX Security Symposium is sponsored by USENIXZigZag: Automatically Hardening Web Applications Against Client-side
Validation Vulnerabilities
Michael Weissbacher
Northeastern University
PI:EMAIL
William Robertson
Northeastern University
PI:EMAIL
Engin Kirda
Northeastern University
PI:EMAIL
Christopher Kruegel
UC Santa Barbara
PI:EMAIL
Giovanni Vigna
UC Santa Barbara
PI:EMAIL
Abstract
Modern web applications are increasingly moving pro-
gram code to the client in the form of JavaScript. With the
growing adoption of HTML5 APIs such as postMessage,
client-side validation (CSV) vulnerabilities are conse-
quently becoming increasingly important to address as
well. However, while detecting and preventing attacks
against web applications is a well-studied topic on the
server, considerably less work has been performed for
the client. Exacerbating this issue is the problem that de-
fenses against CSVs must, in the general case, fundamen-
tally exist in the browser, rendering current server-side
defenses inadequate.
In this paper, we present ZigZag, a system for hard-
ening JavaScript-based web applications against client-
side validation attacks. ZigZag transparently instru-
ments client-side code to perform dynamic invariant de-
tection on security-sensitive code, generating models
that describe how – and with whom – client-side com-
ponents interact. ZigZag is capable of handling tem-
plated JavaScript, avoiding full re-instrumentation when
JavaScript programs are structurally similar. Learned in-
variants are then enforced through a subsequent instru-
mentation step. Our evaluation demonstrates that ZigZag
is capable of automatically hardening client-side code
against both known and previously-unknown vulnerabil-
ities. Finally, we show that ZigZag introduces acceptable
overhead in many cases, and is compatible with popular
websites drawn from the Alexa Top 20 without developer
or user intervention.
1 Introduction
Most of the over 2 billion Internet users [1] regularly ac-
cess the World Wide Web, performing a wide variety of
tasks that range from searching for information to the pur-
chase of goods and online banking transactions. Unfortu-
nately, the popularity of web-based services and the fact
that the web is used for business transactions has also at-
tracted a large number of malicious actors. These actors
compromise both web servers and end-user machines to
steal sensitive information, to violate user privacy by spy-
ing on browsing habits and accessing confidential data,
or simply to turn them into “zombie” hosts as part of a
botnet.
As a consequence, significant effort has been invested
to either produce more secure web applications, or to de-
fend existing web applications against attacks. Examples
of these approaches include applying static and dynamic
program analyses to discover vulnerabilities or prove
the absence of vulnerabilities in programs [2, 3, 4, 5],
language-based approaches to render the introduction of
certain classes of vulnerabilities impossible [6, 7, 8],
sandboxing of potentially vulnerable code, and signature-
and anomaly-based schemes to detect attacks against
legacy programs.
However, despite the large amount of research on pre-
venting attacks against web applications, vulnerabilities
persist. This is due to a combination of factors, including
the difficulty of training developers to make use of more
secure development frameworks or sandboxes, as well as
the continuing evolution of the web platform itself.
In particular, advances in browser JavaScript engines
and the adoption of HTML5 APIs has led to an explo-
sion of highly complex web applications where the ma-
jority of application code has been pushed to the client.
Client-side JavaScript components from different origins
often co-exist within the same browser, and make use of
HTML5 APIs such as postMessage to interact with each
other in highly dynamic ways.
postMessage enables applications to communicate
with each other purely within the browser, and are not
subject to the classical same origin policy (SOP) that de-
fines how code from mutually untrusted principals are
separated. While SOP automatically prevents client-side
code from distinct origins from interfering with each oth-
ers’ code and data, code that makes use of postMessage
USENIX Association  
24th USENIX Security Symposium  737
is expected to define and enforce their own security pol-
icy. While this provides much greater flexibility to appli-
cation developers, it also opens the door for vulnerabili-
ties to be introduced into web applications due to insuf-
ficient origin checks or other programming mistakes.
postMessage is but one potential vector for the more
general problem of insufficient client-side validation
(CSV) vulnerabilities. These vulnerabilities can be ex-
ploited by input from untrusted sources – e.g., the cross-
window communication interface, referrer data, and oth-
ers. An important property of these vulnerabilities is that
attacks cannot be detected on the server side, and there-
fore any framework for defending against them at run-
time must execute within the browser. Also, in contrast
to other popular web attack classes such as Cross-Site
Scripting (XSS), CSVs represent application logic flaws
that are closely tied to the intended behavior of the appli-
cation and, consequently, can be difficult to identify and
defend against in a generic, automated fashion.
In this paper, we propose ZigZag, a system for hard-
ening JavaScript-based web applications against client-
side validation attacks. ZigZag transparently instruments
client-side code to perform dynamic invariant detection
over live browser executions. From this, it derives mod-
els of the normal behavior of client-side code that capture
essential properties of how – and with whom – client-side
web application components interact, as well as proper-
ties related to control flows and data values within the
browser. Using these models, ZigZag can then automati-
cally detect deviations from these models that are highly
correlated with client-side validation attacks.
We describe an implementation of ZigZag as a proxy,
and demonstrate that it can effectively defend against vul-
nerabilities found in the wild against real web applica-
tions without modifications to the browser or application
itself aside from automated instrumentation. In addition,
we show that ZigZag is efficient, and can be deployed in
realistic environments without a significant impact on the
user experience.
In summary, this paper makes the following contribu-
tions:
• We present a novel in-browser anomaly detection
system based on dynamic invariant detection that
defends clients against previously unknown client-
side validation attacks.
• We present a new technique we term invariant
patching for extending dynamic invariant detection
to server-side JavaScript templates, a very common
technique for lightweight parameterization of client-
side code.
• We extensively evaluate both the performance and
security benefits of ZigZag, and show that it can
be effectively deployed in several real scenarios, in-
cluding as a transparent proxy or through direct ap-
plication integration by developers.
The rest of the paper is organized as follows. In Sec-
tion 2, we motivate the need for defending against client-
side validation vulnerabilities through the introduction of
a running example and define our threat model. In Sec-
tion 3, we present the high-level design of ZigZag. Sec-
tions 4 and 5 describe the details of ZigZag’s invariant
detection and enforcement. We then evaluate a proto-
type implementation of ZigZag in Section 6. Finally,
Sections 7 and 8 discuss related work and conclude the
paper.
2 Motivation and Threat Model
To contextualize ZigZag and motivate the problem of
client-slide validation vulnerabilities, we consider a hy-
pothetical webmail service. This application is composed
of code and resources belonging both to the application
itself as well as advertisements from multiple origins.
Since these origins are distinct, the same origin policy
applies, and code from each of these origins cannot inter-
fere with the others. This type of origin-based separation
is typical for modern web applications.
However,
in this example,
the webmail compo-
nent communicates with the advertising network via
postMessage to request targeted ads given a profile it
has generated for its users. The ad network can respond
that it has successfully placed ads, or else request fur-
ther information in the case that a suitable ad could not
be found. Figure 1 shows one side of this communica-
tion channel, where the advertising component both reg-
isters an onMessage event listener to receive messages
from the webmail component, as well as sends responses
using the postMessage method. In this case, because the
ad network does not verify the origin of the messages
it receives, it is vulnerable to a client-side validation at-
tack [9].
To tamper with the ad network, an attacker must be
able to invoke postMessage in the same context. This
can be achieved by exploiting XSS vulnerabilities from
user content, framing the webmail service, or exploiting
a logic vulnerability. Hence, the attacker has to send an
email to a victim user that contains XSS code, or lure the
victim to a site that will frame the webmail service.
Despite the fact that the ad network component is
vulnerable, ZigZag prevents successful exploitation of
the vulnerability. With ZigZag, the webmail service is
used through a transparent proxy that instruments the
JavaScript code, augmenting each component with mon-
itoring code. The webmail service then runs in a training
phase where execution traces of the JavaScript programs
are collected. Collected data points include function pa-
738  24th USENIX Security Symposium 
USENIX Association
1
2
3
4
5
6
7
8
9
10
11
12
// Handle a received message
var receiveMessage = function(e) {
// Missing check on e.origin!
}
var sendMessage = function(e) {
// Send data to window ‘w’
w.postMessage(data, ’*’);
}
// Register for messages
window.addEventListener(”message”, receiveMessage, false);
Figure 1: Insecure usage of the postMessage API in a
hypothetical webmail client-side component.
rameters, caller/callee pairs, and return values. Once
enough execution traces have been collected, ZigZag
uses invariant detection to establish a model of normal
behavior. Next, the original program is extended with
enforcement code that detects deviations from the base-
line established during training. Execution is compared
against this baseline, and violations are treated as attacks.
In this example, ZigZag would recognize that mes-
sages received by the ad network must originate from the
webmail component’s origin, and would terminate exe-
cution if a message is received from another origin – for
instance, from the user content origin. Due to the na-
ture of CSV vulnerabilities, this attack would go unno-
ticed for server-side invariant detection systems such as
Swaddler [10] as they focus on more traditional web at-
tacks against server-side code. These attacks can either
happen on the client alone, where such systems have no
visibility, or when server interaction is triggered through
exploitation of a CSV vulnerability. In addition, these
requests are indistinguishable from benign user interac-
tion. We stress that this protection requires no changes to
the browser or application on the server, and is therefore
transparent to both developers and users alike.
We expand upon this example service with more vul-
nerabilities and learned invariants in following sections.
2.1 Threat model
The threat model we assume for this work is as follows.
ZigZag aims to defend benign-but-buggy JavaScript ap-
plications against attacks targeting client-side validation
vulnerabilities, where CSV vulnerabilities represent bugs
in JavaScript programs that allow for unauthorized ac-
tions via untrusted input.
The attacker can provide input to JavaScript programs
through cross-window communication (e.g., postMes-
sage), or window/frame cross-domain properties. This
can be performed by operating in an otherwise iso-
lated JavaScript context within the same browser. How-
ever, the attacker cannot run arbitrary code in a ZigZag-
protected context without first bypassing ZigZag, an
eventuality we aim to prevent. In particular, we presume
the presence of complementary defenses against XSS-
based code injection attacks such as Content Security
Policy (CSP) [11] or rigorous template auto-sanitization.
Therefore, we assume that attackers cannot directly tam-
per with ZigZag invariant learning and enforcement by,
for instance, overwriting these functions in the JavaScript
context without first evading the system.
Because ZigZag depends on a training set to learn
dynamic invariants, we assume that the training data is
trusted and, in particular, attack-free. This is a general
limitation of anomaly-based detection schemes, though
one that also has partial solutions [12].
3 System Overview
ZigZag is an in-browser anomaly detection system that
defends against client-side validation (CSV) vulnerabil-
ities in JavaScript applications. ZigZag operates by in-
terposing between web servers and browsers in order to
transparently instrument JavaScript programs. This in-
strumentation process proceeds in two phases.
Learning phase. First, ZigZag rewrites programs
with monitoring code to collect execution traces of client-
side code. These traces are fed to a dynamic invariant de-
tector that extracts likely invariants, or models. The in-
variants that ZigZag extracts are learned over data such
as function parameters, variable types, and function caller
and callee pairs.
Enforcement phase. In the second phase, the invari-
ants that were learned in the initial phase are used to
harden the client-side components of the application. The
hardened version of the web application preserves the
semantics of the original, but also incorporates runtime
checks to enforce that execution does not deviate from
what was observed during the initial learning phase. If a
deviation is detected, the system assumes that an attack
has occurred and execution is either aborted or the viola-
tion is reported to the user.
An overview of this system architecture is shown in
Figure 2. We note that instrumentation for both the learn-
ing phase and enforcement phase is performed once, and
subsequent accesses of an already instrumented program
re-use a cached version of that program.
In the following sections, we describe in detail each
phase of ZigZag’s approach to defending against client-
side validation vulnerabilities in web applications.
4 Invariant Detection
In this section, we focus on describing the invariants
ZigZag learns, why we selected these invariants to en-
force, and how we extract these invariants from client-
side code.
USENIX Association  
24th USENIX Security Symposium  739
Web Server
Learning Phase
Instrumentation
Invariant
Detection
Execution
Traces
Invariants
Web Server
Enforcement Phase
Instrumentation
Invariant
Violations
Attacker
Alerts
Termination
Browser
Browser
(a) Learning phase. A JavaScript program is instrumented in