### Encrypted Password or Credit Card Number for User
The encrypted password or credit card number is retrieved from a secure source (S) and used to fill in a form on the website (W).

### Host-Proof Cloud Storage
Privacy-sensitive websites (W) often use client-side encryption libraries provided by a secure source (S). These libraries retrieve encrypted files from the cloud, decrypt them using a user-specified key (or passphrase), and then release the decrypted data to the website (W). Examples of such services include ConfiChair and Mega.

### Security Components and Threat Model
We hypothesize that other security components, such as payment processing APIs and social sharing widgets, share similar security goals and vulnerabilities. Our methodology for studying these components involves analyzing their source code and running them in various environments to identify the core protection mechanisms they rely on.

#### Protection Mechanisms
1. **Bookmarklets and Browser Extensions**: Some components, like LastPass and 1Password, require users to install bookmarklets or browser extensions to protect the integrity of their JavaScript code.
2. **Frames and Signed Code**: Other components, such as Facebook, use frames, while Wuala relies on signed Java applets, and Mega uses signed JavaScript.
3. **Cryptography**: Many components use cryptography, implemented either in Java or JavaScript, to protect data confidentiality. We expect that many will eventually adopt the native HTML Web Cryptography API as it becomes more widely available.

### Methodology
1. **Source Code Analysis**: We study the source code of each component and run it in different environments to discover its core protection mechanisms.
2. **Assumption Testing**: We investigate whether these protection mechanisms make assumptions about the browser or the security of the host website or component server that could be easily broken.
3. **Vulnerability Exploitation**: We convert identified bugs and vulnerabilities into concrete exploits, focusing on those that result in the complete circumvention of the component's security, such as the leakage of long-term secrets like encryption keys and user files.

### Survey: Representative Attacks on Security Components
| Product | Category | Protection Mechanism | Attack Vectors Found | Secrets Stolen |
|---------|----------|----------------------|----------------------|----------------|
| Facebook | Single Sign-On Provider | Frames | Helios, Yahoo, Bitly | Login Credential, API Access Token |
| WordPress, Dropbox | OAuth Login | Web Browser | Same-Origin Policy | Login Credential, API Access Token |
| Firefox | Single Sign-On Clients | 1Password, RoboForm | Password Manager | Browser Extension | Password |
| LastPass, PassPack | Verisign, SuperGenPass | Password Manager | Bookmarklet, Frames, JavaScript Crypto | Bookmarklet Secret, Encryption Key |
| SpiderOak | Encrypted Cloud Storage | Server-side Crypto | Origin Spoofing, URL Parsing Confusion | Files, Encryption Key |
| Wuala | Encrypted Cloud Storage | Java Applet, Crypto | Client-side Exposure | Files, Encryption Key |
| Mega, ConfiChair, Helios | Encrypted Cloud Storage | Crypto Web Applications | JavaScript Crypto, Java Applet, Crypto | XSS, Encryption Key |

### Detailed Example: Login with Facebook
When a website (W) wants to integrate single sign-on with Facebook (S), it includes the Facebook JavaScript SDK and calls `FB.login()`. This initiates an OAuth 2.0 authorization protocol where Facebook issues an access token to W if the user has authorized W. The process involves two iframes:
1. **OAuth IFrame**: Sourced from Facebook’s authorization server, it authenticates the user, verifies authorization, and issues a fresh access token (T).
2. **Proxy IFrame**: Loaded from a Facebook URL, it forwards the access token to the parent frame (W).

#### Protection Mechanisms
- **Same-Origin Policy (SOP)**: Both iframes are sourced from origins distinct from M, preventing scripts on M from interfering.
- **Redirection Transparency**: The redirection of the OAuth frame is transparent to M.
- **Cross-Origin Access Prevention**: Scripts on M cannot directly access Facebook.
- **postMessage Event**: Scripts on M cannot read the postMessage event, which is set to target origin W.

#### Vulnerabilities
- **Firefox Redirection Transparency Bugs**: Recent versions of Firefox had bugs that allowed scripts to read URIs in redirected iframes, enabling token theft.
- **Origin Authentication Bypass**: A malicious website (M) could open an OAuth iframe with W’s client id and a Proxy iframe with M’s origin, stealing the access token.
- **Sub-origin Attacks**: Websites like WordPress and Dropbox allow user content on subdomains, leading to token theft.

### Client-Side Decryption for Cloud Data
Web applications use cryptography to protect sensitive data stored in the cloud. For example, cloud-based file storage services store files encrypted, with decryption keys known only to the user or their browser. This architecture is also used by password managers and privacy-conscious applications like electronic voting and encrypted chats.

#### Challenges and Design Choices
- **Browser Extensions**: Password managers like 1Password and RoboForm use browser extensions to isolate themselves from web pages but can still be vulnerable to attacks exploiting URL parsing and metadata integrity issues.
- **Bookmarklets**: Some password managers offer login bookmarklets containing JavaScript code, which can be vulnerable to injection attacks.

By addressing these challenges and vulnerabilities, we can enhance the security of web applications and protect user data.