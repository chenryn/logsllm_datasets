no premises, then the rule is axiomatic. Inference rules not
only provide a formal compact notation for single-step in-
ference, but also implicitly specify an inference algorithm
by recursively applying rules on premises until an axiom is
reached.
Typing. Every term t, whether it be a variable, value, or ex-
pression, has a type T . The types of terms are speciﬁed via
inference rules, where the type of the term is the conclusion
given that the sub-terms type as speciﬁed by the premise. In
order to make sure variables are typed consistently, we also
include a context that maps variables to their types in rules,
denoted as Γ by tradition. The type of a term is denoted
Γ ‘ t : T , which can be read as “t has type T under context
Γ”.
For example, when a variable x is declared as an int, Γ
would be updated to include a new binding x : int. Later
on if we want to ﬁnd the type of x, we simply need to look
it up in Γ, denoted as:
x : int ∈ Γ
Γ ‘ x : int
The typing of expressions is performed by recursively typ-
ing each sub-expression. For example, the type of the ex-
pression x+y would be inferred as int when x : int ∈ Γ
and y : int ∈ Γ. In C, we would infer the same expression
has type float when x, y : float ∈ Γ since the plus
(“+”) function accepts both ﬂoats and ints as arguments.
Subtyping. A type T1 is a subtype of T2, written as T1  T1; the two
representations are interchangeable.
Subtyping and typing judgements are bridged by the sub-
sumption rule:
Γ ‘ t : S S  and ⊥, respectively. Lattices
deﬁne two operations: the least upper bound, denoted by
the “join” operator t, and the greatest lower bound, denoted
by the “meet” operator u.
3 TIE Overview
TIE is an end-to-end system for data abstraction reverse
engineering. The overall ﬂow and components in TIE are
shown in Figure 2. In this section we describe the overall
work-ﬂow of TIE, and then give an example of the steps on
our running example.
Lifting to BIL. TIE begins with the binary code we wish
to reverse engineer. TIE uses our binary analysis platform,
called BAP, to lift the binary code to a binary analysis lan-
guage called BIL. The BIL code provides low-level typing
for all registers and memory cells, e.g., a value loaded into
eax has type reg32 t since eax is a 32-bit long regis-
ter. BAP considers two possible analysis scenarios: a dy-
namic analysis scenario and a static analysis scenario. In
the static analysis scenario, we disassemble the binary and
identify functions using existing heuristics, e.g., [11].
In
the dynamic analysis scenario, we run the program within
a dynamic analysis infrastructure and output the list of in-
structions as they are executed. In both cases, the output
is an assembly program: for static we have the program,
Figure 2. TIE approach for type inference in binary code
and for dynamic analysis we have the single path actually
executed, which is then lifted to BIL via a syntax-directed
translation. Subsequent analysis is performed on BIL while
maintaining a mapping to the original assembly so that we
can report ﬁnal results in terms of the original assembly.
Variable Recovery. The variable recovery phase takes the
BIL code produced by the pre-processor as input. The
variable recovery step runs our DVSA algorithm to infer
high-level variable locations. DVSA infers variables by an-
alyzing access patterns in memory. For example, an ac-
cess to ebp+0xc is a passed parameter since ebp is the
base parameter and positive offsets are used for parameters.
Our algorithm for variable site recovery builds conceptually
upon value set analysis (VSA) which determines the possi-
ble range of values that may be held in a register [5]. We
also return a VSA context which is used during the ﬁnal
inference phase to determine aliasing and reuse stack slots
(§ 6.3.5).
Type Reconstruction. The variables recovered by DVSA
are passed to our type reconstruction algorithm, along with
the BIL code. Type reconstruction consists of three steps:
Step 1: Assign Type Variables. TIE assigns each variable
output from DVSA and all program terms a type vari-
able τt, representing an unknown type for term t.
Step 3: Constraint Solving. TIE solves the constraints on
each type variable τ to ﬁnd the most precise yet conser-
vative type. Conservative means we do not infer types
that cannot be supported by the code, e.g., an unref-
erenced variable loaded into eax but never used will
have type reg32 t since that is the most informative
type possible to infer from the code. Precision is a
metric for how close our inferred type is to the origi-
nal type, e.g., if the variable was originally a C int,
the most precise type we could infer would be an int,
Step 2: Constraint Generation. TIE
generates
con-
straints on the type variables based upon how the
variable is used, e.g., if a variable is used as part of
signed division /s, we add the constraint that τt must
be a signed type. One of our main contributions is
that the constraint system can be solved and lead to
accurate and conservative results.
a slightly less precise type would be “the variable is a
32-bit number”, and the least precise is we could infer
nothing at all.
The output of type reconstruction is a type in our type
system for each recovered variable. Our type system makes
heavy use of sub-typing to model the polymorphism in as-
sembly instructions. For example, the add instruction can
be used to add two numbers, but also to add a number and a
pointer. We use sub-typing to bound what we infer, e.g., for
add the arguments are either two numbers (either signed or
unsigned) or a pointer and a number.
The types we infer are within the TIE type system. In
order to output C types we translate TIE types into C. The
beneﬁts of this design are that TIE can be retargetted to out-
put types for other similar languages by only retargetting
the translator component, and that we are not restricted to
C’s informal and sometimes wacky type system during type
inference itself.
3.1 Example
Figure 3 shows the TIE analysis steps applied to the run-
ning example from Figure 1. The function foo in Figure 3
has two arguments and one local variables. We perform
static analysis in the example. Figure 3 (a) shows the BIL
raised from the binary for foo (BIL is explained in §4.2).
The bold texts consists of annotations indicating the assem-
bly addresses and instructions.
The next step is our DVSA to recover local variables.
Figure 3 (b) shows the result of the analysis. The output is
a list of identiﬁed variables along with the location of each
variable in memory (expressed as an SI range). Two vari-
ables that reference the same memory location (i.e., have
the same SI) are identical if they always operate on the
same SSA memory instance, else we consider them possi-
ble places for stack slot reuse of two different variables.
Type inference takes the variables and ﬁrst assigns a type
variable to every BIL program term. We denote by τv the
type variable for a variable v. Note that the type variable
for memory is a record, thus τM em1.[a] represents the type
variable at address a in memory M em1. We then analyze
Disassembly(Raise to BIL)Solution(Inferred type)Binary codeBILGeneratetype constraintsSolvetype constraintsTypeconstraintsAssigntypes totermsVariable analysisDynamic analysis engineStaticanalysisDynamicanalysisBIL, Variable ctxBIL,Value ctx,Function ctxFunction descriptionDBGeneratefunction contextVariable recoveryType inferenceBIL- addr 0x804841f @asm ”push %ebp”
1 t1 = esp0
2 esp1 = esp0 − 4
3 M em1 = store(M em0, t1, ebp0, 0, reg32 t)
- addr 0x8048420 @asm ”mov %esp,%ebp”
4 ebp1 = esp1
- addr 0x8048422 @asm ”sub $0x28,%esp”
5 esp2 = esp1 −32 40
- addr 0x8048425 @asm ”movl $0x0,-0xc(%ebp)”
6 t2 = ebp1 +32 (−12)
7 M em2 = store(M em1, t2, 0x0, 0, reg32 t)
- addr 0x804842c @asm ”cmpl $0x0,0x8(%ebp)”
8 t3 = ebp1 +32 8
9 t4 = load(M em2, t3, 0, reg32 t)
10 z1 = (t4 = 0)
- addr 0x8048430 @asm ”je 0x0000000008048442”
11 if z1 then goto 0x8048442 else goto 0x8048432
- addr 0x8048432 @asm ”mov 0x8(%ebp),%eax”
12 t5 = ebp1 +32 8
13 eax1 = load(M em2, t5, 0, reg32 t)
- addr 0x8048435 @asm ”mov %eax,(%esp)”
14 t6 = esp2
15 M em3 = store(M em2, t6, eax1, 0, reg32 t)
- addr 0x8048438 @asm ”call 0x000000000804831c”
16 call(0x804831c, M em3, Reg)
- addr 0x804843d @asm ”mov 0xc(%ebp),%edx”
17 t7 = ebp1 +32 12
18 edx1 = load(M em3, t7, 0, reg32 t)
- addr 0x8048440 @asm ”mov %eax,(%edx)”
19 t8 = edx1
20 M em4 = store(M em3, t8, eax1, 0, reg32 t)
- addr 0x8048442 @asm ”mov 0xc(%ebp),%eax”
21 M em5 = Φ(M em2, M em4)
22 t9 = ebp1 +32 12
23 eax3 = load(M em5, t9, 0, reg32 t)
- addr 0x8048435 @asm ”mov (%eax),%eax”
24 t10 = eax3
25 eax4 = load(M em5, t10, 0, reg32 t)
- addr 0x8048447 @asm ”test %eax,%eax”
26 z2 = (eax4 = 0)
- addr 0x8048449 @asm ”je 0x0000000008048456”
27 if z2 then goto 0x8048456 else goto 0x804844b
- addr 0x804844b @asm ”mov 0xc(%ebp),%eax”
28 t11 = ebp1 +32 12
29 eax5 = load(M em5, t11, 0, reg32 t)
- addr 0x804844e @asm ”mov (%eax),%eax”
30 t12 = eax5
31 eax6 = load(M em5, t12, 0, reg32 t)
- addr 0x8048450 @asm ”sub $0x1,%eax”
32 eax7 = eax6 −32 1
- addr 0x8048453 @asm ”mov %eax,-0xc(%ebp)”
33 t13 = ebp1 +32 (−12)
34 M em6 = store(M em5, t13, eax7, 0, reg32 t)
- addr 0x8048456 @asm ”mov -0xc(%ebp),%eax”
35 M em7 = Φ(M em5, M em6)
36 t14 = ebp1 +32 (−12)
37 eax8 = load(M em7, t14, 0, reg32 t)
(a) BIL (in the SSA form.)
Variable (address)
buf (+4)
*out (M8)
out (+8)
c (-16)
Related constraints
(1) τM em2 .[−44] = τM em2 .[4] = ptr(int8 t)
(2) τM em4 .[M8] = τeax3 = uint32 t
(3) τM em3 .[8] = ptr(τeax3 ) = ptr(uint32 t)
(4) τeax6 = τM em5 .[M8]  γ) ∧ (γ <: num32 t),
(6) τeax7 = τM em6 .[−16]
(c) Type constraints (related variables only)
Figure 3. An example of TIE
Variable
t1
t2
t5
t6
t7
t8
t9
t10
t11
t12
t13
t14
Variable
buf
out
c
Value for addressing
A + 0[−4, −4]
A + 0[−44, −44]
A + 0[4, 4]
A + 0[−44, −44]
A + 0[8, 8]
MA+0[8,8]
A + 0[8, 8]
MA+0[8,8]
A + 0[8, 8]
MA+0[−16,−16]
A + 0[−16, −16]
A + 0[−16, −16]
(b) Result of value analysis
Inferred type
Upper bound
ptr(int8 t)
ptr(uint32 t)
reg32 t
(d) Result
Lower bound
ptr(int8 t)
ptr(uint32 t)
uint32 t
BIL line
13, 14, 16
16, 20
18
31, 32, 34
the function and ﬁnd there is a call to a well known function
strlen. The function description that strlen has an
argument of type pointer to char (ptr(int8 t) in TIE) and
a return value of type unsigned integer (uint32 t in TIE)
is stored in the function context.
TIE then generates constraints for the statements. The
constraints are built upon how the variables are used, e.g., if
a variable is used in signed division it must be signed. Table
Figure 3 (c) shows a simpliﬁed excerpt of the constraints re-
lated to variables only (Detailed constraints generation rules
are explained in §6.2.). According to the constraints, buf
is of the same type as the variable at -44, which is used as
an argument in the call to strlen. Thus, from the func-
tion description of strlen, we infer the variable at 4 is
of ptr(int8 t), which is equivalent to char * in C. Like-
wise, *out is inferred as uint32 t. However, the address
*out is unknown because it is passed through the pointer
out, thus its address is M8, which means it is contents from
the address 8 (second argument). If a variable is used as a
pointer, we also provide the constraint to show the pointer-
value relation. Line 18 shows out is the pointer of *out,