slprev := sl
a second threshold Ltrust , also dynamic, is used for T-transitions and tracks the number of consecutive
queries during which the suspicion level does not increase.
Let us now sketch why the algorithm is correct (proofs in the appendix; Sect. A.1).
Increasing
the two thresholds SLsusp and Ltrust is the key to ensuring the correctness of the algorithm. On the
one hand, if p is correct, the algorithm ensures that SLsusp will grow beyond the bound SLmax for the
suspicion level (see Property 2) and thus S-transitions stop occurring. On the other hand, if p is faulty,
the threshold Ltrust will grow beyond the maximum number of queries Q during which the suspicion
level may stay constant (see Property 1) and thus T-transitions stop occurring. After, it is easy to show
that the last transition is a T-transition in the ﬁrst case and an S-transition in the second.
4.2 Transformation: binary to accrual
Algorithm 2 Transforming a binary failure detector of class ♦P into an accrual one of class ♦P ac.
1: Initialization:
slprev := 0
2:
3: when queried about process p
4:
5:
6:
7:
8:
query the binary failure detector
if p is suspected then
sl qp(t) := slprev := slprev + 
sl qp(t) := slprev := 0
else
{previous suspicion level}
Again, for simplicity, Algorithm 2 is expressed in terms of two processes p and q, where q moni-
tors p. Upon each query to the accrual failure detector, the algorithm queries the binary failure detector
and updates the suspicion level sl qp the following way: (1) if p is suspected, sl qp increases by the
resolution ; (2) if p is trusted, sl qp is reset to zero.
It is easy to see that the algorithm is correct (details in the appendix; Sect. A.2) by looking at what
happens after the binary failure detector stabilizes. If p is faulty, sl qp increases by  at each query and
thus Accruement (Prop. 1) holds. In contrast, if p is correct, sl qp remains zero and thus is bounded by
the maximal value it took before the binary failure detector stabilized. Thus, Property 2 also holds.
8
4.3 Other classes of accrual failure detectors
In Section 3, we deﬁned the properties of Accruement (Prop. 1) and Upper Bound (Prop. 2) and the
♦P ac class of accrual failure detectors:
In this
section, we brieﬂy introduce other classes of accrual failure detectors: Pac, ♦S ac and Sac. Each of
these failure detector classes is equivalent to the corresponding binary failure detector class P, ♦S and
S [7]. The formal deﬁnitions and the proofs (using slightly different properties) appear in [12].
the properties must hold for any pair of processes.
Pac The class Pac is based on a stronger Upper Bound property for each pair of processes. The
difference is that we require that a known bound holds for sl qp, whereas Property 2 requires that an
unknown bound holds.The transformation algorithm from Pac to P is simply based on Algorithm 1 by
initializing the suspicion threshold to the value of the known bound.
♦S ac We also deﬁne weaker failure detector classes. The class ♦S ac differs from the class ♦P ac
in that Upper Bound (Prop. 2) only needs to hold for all processes with respect to one single correct
process p (instead of all pairs). This is similar to the difference between the binary failure detector
classes ♦S and ♦P.
The simple implementation for ♦P ac (sketched in Section 5.1 and presented in Section A.4) im-
plements ♦S ac as well. The transformation algorithms (Algorithms 1 and 2) remain the same, and the
proofs need to be adapted only slightly.
Sac The class Sac is deﬁned similarly. The Upper Bound property must however come with a known
bound (see Pac above), but that property only has to hold for some correct process p (as for ♦S ac).
4.4 Multiple thresholds for differentiated QoS
The introduction stated that one accrual failure detector can serve multiple applications with different
quality of service requirements. This section explores that statement more concretely by expressing it in
terms of quality of service. We consider applications that interpret the suspicion level by comparing it
to a threshold. We show that using a lower threshold results in more aggressive failure detection, i.e., a
better quality of service regarding the detection of actual failures but a worse quality of service regarding
wrong suspicions. Conversely, a higher threshold results in more conservative failure detection, i.e., a
better quality of service regarding wrong suspicions at the expense of detecting actual failures.
Consider two processes p and q, with q monitoring p. Let applications (running on q) interpret the
suspicion level by comparing it to a given threshold (where the threshold is a function of time) and
suspect the monitored process p if and only if the suspicion level is beyond the threshold:
∀t∈T, (p is suspected at t) ⇔ sl qp(t) > T (t)
(2)
where T : T 7→ R+ is a threshold function. The equation effectively describes a binary failure detector
that we denote by DT .
Now, consider two applications that use two failure detectors DT1 and DT2 with different threshold
functions T1(t) and T2(t). Let T1(t) ≤ T2(t) for any time t. We can state a number of interesting
properties about the two failure detectors and their quality of service.
Theorem 1 At all times, failure detector DT2 suspects p only if failure detector DT1 suspects p.
Since the details of the proofs are not essential to convey the message, they are omitted here and pre-
sented in the appendix (Sect. A.3).
We can state the following simple corollaries in terms of quality of service metrics (see Section 2):
9
Corollary 2 DT1 detects failures at least as fast as DT2: TD(DT1) ≤ TD(DT2) where TD(D) is the
detection time of failure detector D.
Corollary 3 At some random time, DT2 is at least as likely to trust a process as DT1: PA(DT1) ≤
PA(DT2) where PA(D) is the query accuracy probability of failure detector D.
T1 and D0
There is no such simple relationship stated with the quality of service metrics TM , TMR, λM and
TG. However, such relationships exist if the failure detectors interpret the suspicion level in a slightly
different manner. Let D0
T2 use T1(t) and T2(t) to trigger an S-transition, just as before, but
let them use the same threshold function T0(t) to trigger T-transitions. T0(t)  EA where t is the current time, the suspicion level begins to increase
linearly over time: sl qp(t) = t−EA. Then, setting a constant suspicion threshold of α results in the
original binary failure detector.
5.3 The ϕ adaptive accrual failure detector
The ϕ failure detector [23] adapts to changing network condition just like Chen’s failure detector. How-
ever, whereas Chen et al. [8] only estimate the mean of the expected arrival time, ϕ estimates the full
distribution. It does so by estimating both the mean and the variance, and supposing a distribution of
a given shape [23] (e.g., a normal distribution for the inter-arrival time, or some Erlang distribution for
the transmission time).
Let tlast be the arrival time of the last heartbeat, t be the current time, and Plater (t) be the probability
that a heartbeat will arrive more than t time units after the previous one; the latter is computed from the
distribution estimated from past heartbeat arrivals. The suspicion level is computed as follows:
As 0 < Plater ≤ 1, sl qp
sl qp(t) = − log10(Plater (t − tlast))
takes the full range of non-negative values. Using a threshold of T
to suspect the monitored process p roughly means that the likelihood of a wrong suspicion is 10−T ,
supposing that the behavior of the network is probabilistically stable.
(3)
5.4 The κ accrual failure detection framework
Finally, we brieﬂy present the κ failure detector [22], which is a framework rather than a speciﬁc im-
plementation. The motivation is based on the following observation: the failure detectors that estimate
the arrival time of the next heartbeat do not cope well with lost heartbeats—good estimates for the
variability could not prevent wrong suspicions due to bursts of message losses. The reason is that, in
most systems, variability in arrival times and message losses are likely to have different reasons, hence
a single random distribution cannot model all cases well enough.
The κ failure detector solves this problem in a different way. By design, its behavior changes
from a ﬁne-grained estimation at low suspicion levels (aggressive range) to a coarse-grained estimation
based on counting missed heartbeats at high suspicion levels (conservative range). This change occurs
gradually as the suspicion level increases. Experimental results [21] conﬁrm that κ failure detectors
cope well with message losses while still coping with variability in arrival times.
The κ failure detector works as follows. Each heartbeat that was not received contributes partly to
the suspicion level of the failure detector. The contribution of a heartbeat H gradually increases from
0, meaning that H is not yet expected, to 1, meaning that H is considered lost. The suspicion level is
calculated as the sum of all contributions.
The characteristics of the κ failure detector vary with the choice for the contribution function; this
is why we consider κ to be a framework rather than a single implementation. A suitable contribution
function is for instance the probability Plater (t) of the ϕ failure detector, presented in the previous
section. Another, simpler contribution function sets a timeout for each heartbeat; the contribution is
simply 0 before the timeout and 1 after the timeout (i.e., a step function). Many other possibilities exist.
11
Finally, we present how the κ failure detector behaves under different conditions. When the net-
work is stable, i.e., few messages are lost, only one single heartbeat contributes to the suspicion level
signiﬁcantly, and thus the suspicion level reﬂects the contribution function. If the contribution function
adapts well to the variability in arrival times, so will the applications using the κ failure detector. On
the other hand, when the network is unstable with a lot of message losses, or if the monitored process
crashes, contributions for all missed heartbeats but one will likely be close to 1. In this case, the κ failure
detector will give a count of missed heartbeats, and the shape of the contribution function will be nearly
irrelevant.
6 Related work
We present existing work that, just like our approach, uses numeric and sometimes accruing values for
failure detection or similar purposes.
Sampaio et al. [28] deﬁne slowness oracles as an oracle that outputs a list of processes ordered
according to the perceived responsiveness of each process. Accrual failure detectors also quantify re-
sponsiveness, hence their output values could be used to establish (or estimate) this order.