![](OEBPS/Images/090-i.jpg){.calibre247}
:::
参数说明：
·header：Chunk的头部信息结构。
·id：标识资源的Type ID。
·res0：保留，始终为0。
·res1：保留，始终为0。
·entryCount：等于本类型的资源项个数，指名称相同的资源项的个数。
·entriesStart：等于资源项数据块相对头部的偏移值。
·resConfig：指向一个ResTable_config，用来描述配置信息、地区、语言、分辨率等。
ResTable_type后接着是一个大小为entryCount的uint32_t数组，每一个数组元素都用于描述一个资源类型项数据块的偏移位置。紧跟在这个偏移数组后面的是一个大小为entryCount的ResTable_entry数组，每一个数组元素都用来描述一个资源项的具体信息。ResTable_entry的结构如下：
::: bodypic-c
![](OEBPS/Images/090-2-i.jpg){.calibre248}
:::
::: bodypic-c
![](OEBPS/Images/091-i.jpg){.calibre249}
:::
ResTable_entry根据flags的不同，后面跟随的数据也不相同，如果flags为1，则ResTable_entry是ResTable_map_entry。ResTable_map_entry继承自ResTable_entry，其结构如下：
::: bodypic-c
![](OEBPS/Images/091-2-i.jpg){.calibre250}
:::
ResTable_map_entry其后跟随count个ResTable_map类型的数组，ResTable_map的结构如下：
::: bodypic-c
![](OEBPS/Images/091-3-i.jpg){.calibre251}
:::
::: bodypic-c
![](OEBPS/Images/092-i.jpg){.calibre252}
:::
如果flags为0，则ResTable_entry其后跟随的是一个Res_value，描述一个普通资源的值，Res_value结构如下：
::: bodypic-c
![](OEBPS/Images/092-2-i.jpg){.calibre253}
:::
::: bodypic-c
![](OEBPS/Images/093-i.jpg){.calibre254}
:::
参数说明：
·size：ResValue的头部大小。
·res0：保留，始终为0。
·dataType：数据的类型，可以从上面的枚举类型中获取。
·data：数据对应的索引。
这里看到了有一个转化的方法，在解析AndroidManifest文件的时候也用到了这个方法。
[]{#039.xhtml}
#### 6.3 解析代码 {.bodycontent-title2}
因为篇幅的原因，这里就不把所有的代码都粘贴出来了，后面会列出代码下载地址，首先读取resource.arsc文件到一个字节数组，然后开始解析。
##### 6.3.1 解析头部信息 {.bodycontent-title3}
头部信息代码如下：
::: bodypic-c
![](OEBPS/Images/093-2-i.jpg){.calibre210}
:::
解析结果如下：
::: bodypic-c
![](OEBPS/Images/094-i.jpg){.calibre255}
:::
##### 6.3.2 解析资源字符串内容 {.bodycontent-title3}
解析资源字符串代码如下：
::: bodypic-c
![](OEBPS/Images/094-2-i.jpg){.calibre256}
:::
这里有一个核心的方法parseStringPoolChunk：
::: bodypic-c
![](OEBPS/Images/094-3-i.jpg){.calibre257}
:::
::: bodypic-c
![](OEBPS/Images/095-i.jpg){.calibre258}
:::
::: bodypic-c
![](OEBPS/Images/096-i.jpg){.calibre153}
:::
这里在得到一个字符串的时候，需要得到字符串的开始位置和字符串的大小即可，这点和解析AndroidManifest.xml文件中的字符串原理是一样的。就是一个字符串的头两个字节中的最后一个字节是字符串的长度。这里在解析完字符串之后，需要用一个列表将其存储起来，后面要用到，需要通过索引来取字符串内容。
解析结果如下：
::: bodypic-c
![](OEBPS/Images/096-2-i.jpg){.calibre259}
:::
##### 6.3.3 解析包信息 {.bodycontent-title3}
解析包信息代码如下：
::: bodypic-c
![](OEBPS/Images/096-3-i.jpg){.calibre81}
:::
::: bodypic-c
![](OEBPS/Images/097-i.jpg){.calibre260}
:::
这里看到有一个特殊的地方，就是最后两行，这是后面需要重点解析的两个内容，一个是资源值字符串的偏移值，另一个是资源类型字符串的偏移值。
解析结果如下：
::: bodypic-c
![](OEBPS/Images/097-2-i.jpg){.calibre261}
:::
##### 6.3.4 解析资源类型的字符串内容 {.bodycontent-title3}
解析资源类型的字符串代码如下：
::: bodypic-c
![](OEBPS/Images/098-i.jpg){.calibre262}
:::
这里也是用parseStringPoolChunk方法进行解析的，同样也需要用一个字符串列表存储内容。
解析结果如下：
::: bodypic-c
![](OEBPS/Images/098-2-i.jpg){.calibre263}
:::
##### 6.3.5 解析资源值字符串内容 {.bodycontent-title3}
解析资源值字符串内容代码如下：
::: bodypic-c
![](OEBPS/Images/098-3-i.jpg){.calibre264}
:::
这里也是使用parseStringPoolChunk方法来解析，解析完之后需要用一个字符串列表保存，后面需要使用索引值来访问。
解析结果如下：
::: bodypic-c
![](OEBPS/Images/099-i.jpg){.calibre265}
:::
##### 6.3.6 解析正文内容 {.bodycontent-title3}
这里说到的正文内容就是ResValue值，是开始构建public.xml中的条目信息，和类型的分离不同的XML文件，所以这部分内容的解析工作有点复杂，如下所示：
::: bodypic-c
![](OEBPS/Images/099-2-i.jpg){.calibre266}
:::
这里有一个循环解析，有两个方法，一个是isEnd方法，另一个是isTypeSpec方法。
如果仔细看前面的图6-3，就可以看到后面的ResType和ResTypeSpec两个内容是交替出现的，直到文件结束。
所以isEnd方法就是判断是否到达文件结束位置：
::: bodypic-c
![](OEBPS/Images/100-i.jpg){.calibre267}
:::
还有一个方法就是判断是ResType还是ResTypeSpec，这可以通过Chunk中头部信息来区分的：
::: bodypic-c
![](OEBPS/Images/100-2-i.jpg){.calibre268}
:::
下面分别来解析ResTypeSpec和ResType这两个内容。
###### 1.解析ResTypeSpec {.section-subtitle}
主要得到Res的每个类型名：
::: bodypic-c
![](OEBPS/Images/100-3-i.jpg){.calibre210}
:::
::: bodypic-c
![](OEBPS/Images/101-i.jpg){.calibre130}
:::
解析结果如下：
::: bodypic-c
![](OEBPS/Images/101-2-i.jpg){.calibre269}
:::
###### 2.解析ResType {.section-subtitle}
主要得到每个res类型的所有条目内容：
::: bodypic-c
![](OEBPS/Images/101-3-i.jpg){.calibre270}
:::
::: bodypic-c
![](OEBPS/Images/102-i.jpg){.calibre271}
:::
::: bodypic-c
![](OEBPS/Images/103-i.jpg){.calibre272}
:::
看到这里，发现解析很复杂，和在讲解数据结构的时候一样，需要解析很多内容：ResValue、ResTableMap、ResTableMapEntry、ResTableEntry、ResConfig。关于每个数据结构如何解析这里就不多说了，就是读取字节即可。这里有一个核心的代码：
::: bodypic-c
![](OEBPS/Images/103-2-i.jpg){.calibre273}
:::
::: bodypic-c
![](OEBPS/Images/104-i.jpg){.calibre274}
:::
判断flag的值来进行不同的解析操作。需要注意这点。
解析结果如下：
::: bodypic-c
![](OEBPS/Images/104-2-i.jpg){.calibre275}
:::
看到解析结果还是挺欣慰的，因为最难的地方解析成功了，这就是想要的结果。这里需要解释的是，有了这些值构建public.xml内容和各个类型的XML内容就很简单了。
注意，这里ResId的构造方法是：
::: bodypic-c
![](OEBPS/Images/104-3-i.jpg){.calibre276}
:::
可以看到一个int类型的resId，它的最高两个字节表示packId，系统资源id是0x01，普通应用资源id是0x7F。它的中间的两个字节表示resTypeId，类型id，这个值从0开始，比如例子中第一个类型是attr，那么它的resTypeId就是00。它的最低四个字节表示这个资源的顺序id，从1开始，逐渐累加1。
[提示：]{.yanse}项目下载地址：[https://github.com/fourbrother/parse_androidarsc](https://github.com/fourbrother/parse_androidarsc){.calibre32
.pcalibre}
上面就解析完了所有的resource.arsc文件，解析resource.arsc文件格式的目的有两个：
·在使用apktool工具进行反编译的时候，经常出现一些莫名的异常信息，最多的就是NotFound
ResId
0x0000XXX这些内容。那么这时候就需要修复，当然可以得到apktool的源码来解决这个问题，还可以使用自己写的这套解析代码。
·解析resource.arsc文件之后，对resource.arsc文件格式如果有了解，可以对资源文件名进行混淆，从而减小apk包大小。因为META-INF文件夹下的三个文件体积很大，原因就是它们内部保存了每个资源名称，在项目中有时候为了不造成冲突，就把资源名起的很长，那么这样就会导致apk的包很大。同样resource.arsc文件也会很大，因为资源名都是需要保存的，但是Android中的混淆是不会对资源文件进行混淆的，所以这时候就可以通过这个思路来减小包apk的大小了。
在前面一章中已经介绍了关于aapt命令的用法了，这里依然可以利用aapt命令解析arsc文件，用aapt命令很简单：
::: bodypic-c
![](OEBPS/Images/105-i.jpg){.calibre277}
:::
将输入的结果定向到demo.txt中，如图6-7所示。
::: bodypic-c
![](OEBPS/Images/6a7-i.jpg){.calibre278}
:::
图6-7 用aapt命令输出结果
看到内容就是上面解析的AndroidManifest.xml内容，所以这也是一个解析方法。为何aapt命令最后说呢？因为了解AndroidManifest.xml格式能更好地掌握解析方法。以后记得有一个aapt命令就好了，它的用途很多，可以单独编译成一个resource.arsc文件来，后面会用到这个命令。
[]{#040.xhtml}
#### 6.4 本章小结 {.bodycontent-title2}
Android中的资源文件最后编译成resource.arsc文件，本章介绍了这个文件的格式，在后续的安全防护应用和逆向应用中都有很重要的作用。
[]{#041.xhtml}
### 第7章 dex文件格式解析 {.bodycontent-title4}
前几章介绍了so文件、AndroidManifest文件、resources文件，本章将介绍dex文件格式的解析。了解dex文件格式对后面的应用安全防护非常有用。