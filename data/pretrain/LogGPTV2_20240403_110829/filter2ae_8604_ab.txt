        if host[-1]=='/':
            host=host[:-1]
        print(host)
        data = {"user": "f26371c9-18c3-4c4e-979f-95d34ffdb911", "asset": "fac9cfc0-b8f1-4aa5-9893-b8f5cdc8de0f",
                "system_user": "a893cb8f-26f7-41a8-a983-1de24e7c3d73"}
        print("##################")
        print("get token url:%s" % (host + url,))
        print("##################")
        res = requests.post(host + url, json=data)
        token = res.json()["token"]
        print("token:%s", (token,))
        print("##################")
        target = "ws://" + host.replace("http://", '') + "/koko/ws/token/?target_id=" + token
        print("target ws:%s" % (target,))
        asyncio.get_event_loop().run_until_complete(main_logic(cmd)
成功执行 "cat /etc/passwd" 命令
## 利用条件
1. **web终端登录方式为免密自动连接。**
若配置为需要输入密码的手动登录，只有在攻击者已知目标资产登录密码（不现实），或此时系统用户与目标资产的会话连接未中断，从而让攻击者有机会复用SSH会话，漏洞利用成功，显然这种配置下漏洞利用大多失败。
当系统用户退出登录，由于没有可复用会话了，系统要求重新输入密码，否则无法建立连接。漏洞利用失败。
只有在系统用户登录模式配置为“自动登录”，即系统用户使用web终端操作时资产无须输入密码
，可直接建立连接（某些情况下需要“自动推送”系统用户至资产才能实现免密连接），这种配置下，该漏洞才可被攻击者 **稳定利用。**
开启自动登录和自动推送。
如果选择了自动推送， Jumpserver 会使用 Ansible 自动推送系统用户到资产中。
此时连接web终端不需要输入密码了，直接利用系统用户预存的密码建立连接。
这时我中断会话，再次测试，成功执行命令，此时不是复用SSH连接，而是直接连接，建立会话，从而执行命令。
jumpserver通常的配置都是自动登录的，这一条件容易满足。
2. **系统用户在web终端与目标资产建立过连接。**
只有系统用户在web终端访问过目标资产，才能在日志中留下访问记录，我们与目标建立连接的必要参数均在日志中获取。
3. **系统日志路径已知**
系统日志路径默认为`/opt/jumpserver/logs`，一些项目刻意修改日志路径会使得漏洞难以利用。
## 攻击流程回顾
1.未授权的情况下通过 /ws/ops/tasks/log/ 接口建立websocket连接，读取日志文件
2.在日志文件中获取到用户、资产字段值、系统用户（user_id、asset_id、system_user_id）
3.携带这三个字段对 /api/v1/authentication/connection-token/ 或/api/v1/users/connection-token/接口发起POST请求（同时借助user-only参数绕过认证），得到一个20S有效期的token
4.通过该token与/koko/ws/token/接口建立websocket连接，模拟Web终端通信，执行命令。
# 0x03漏洞分析
## 日志文件读取
读取日志文件的接口为ws/ops/tasks/log/
分析apps/ops/ws.py#CeleryLogWebsocket，connect()方法定义该接口直接连接，无认证
receive()方法要求请求data要携带task参数，随后会将“task”值传给handle_task()
self.handle_task(task_id)
\-->self.read_log_file(self,task_id)
\-->self.wait_util_log_path_exist(task_id)
\-->
get_celery_task_log_path(task_id)，获取目标文件路径的方法，系统自动为路径末尾添加.log后缀，也就是只能读取到日志文件。
这里也是“task”参数值中的文件路径无须携带.log后缀的原因。
当系统连接资产时，会调用 validatePermission()
方法检查用户是否有权限连接，通过三个参数进行校验，分别为用户ID、资产ID、系统用户ID，三个参数值长期有效，可被进一步利用。
对应的接口是/api/v1/perms/asset-permissions/user/validate，请求记录均可在日志文件中找到
## 绕过身份验证获取token
**apps/authentication/api/auth.py** ，请求url中存在'user-only'参数且有值，则其权限为AllowAny，即允许访问。
分析apps/authentication/api/auth.py#UserConnectionTokenApi类，可处理get、post请求。
get请求处理函数取URL中"token"和"user-only"参数，合法请求会根据token返回user信息。
post请求处理函数要求data数据中携带"user"、"asset"、"system_user"参数，同时系统自动生成一个20s有效期的token，合法请求会将这个token返回。
apps/authentication/api/auth.py#UserConnectionTokenApi类有哪些地方使用，共两处
刚好是官方公布的接口，这两个接口数据处理逻辑一致，所以利用的时候两者均可得到token。
    /api/v1/authentication/connection-token/
    /api/v1/users/connection-token/
Web Terminal 前端项目 luna/src/app/services/http.ts 中有对/api/v1/users/connection-token/接口的Get请求代码，这里携带不为空的user-only参数，是为了获取token对应的用户身份所有信息而不是单个字段。
## websocket建立TTY终端会话
这个漏洞是通过websocket通信建立TTY终端，从而执行命令。
JumpServer中KoKo项目提供 Web Terminal 服务，分析系统中可建立TTY会话的几种方式。
建立TTY会话主要通过koko/pkg/httpd/webserver.go中runTTY() 实现
只有两个接口可以进入runTTY()方法，分别是processTerminalWebsocket和processTokenWebsocket方法
对应API为/koko/ws/terminal/ 和 /koko/ws/token/
，接口handler位于koko/pkg/httpd/webserver.go#websocketHandlers()
### **/koko/ws/terminal/**
系统中通过“会话管理”下“web终端”功能连接资产时，使用的是 /koko/ws/terminal/ 接口
    ws://192.168.18.182:8080/koko/ws/terminal/?target_id=fac9cfc0-b8f1-4aa5-9893-b8f5cdc8de0f&type=asset&system_user_id=a893cb8f-26f7-41a8-a983-1de24e7c3d73
进行websocket通信
processTerminalWebsocket函数处理 /koko/ws/terminal/
接口，要通过这个接口成功登录控制台需要一些必备参数，包括type、target_id、system_user_id，其中target_id为目标资产ID，system_user_id表示系统用户id。
**注意：** /koko/ws/terminal/ 接口的target_id与/koko/ws/token/
接口的target_id虽然参数名一样，但却是两个完全不同的东西。
系统对 /koko/ws/terminal/ 接口通过?middleSessionAuth() 进行会话合法校验。
注意到 /koko/ws/token/ 接口却是无此类限制的。
### **/koko/ws/token/**
/koko/ws/token/
接口的处理函数位于koko/pkg/httpd/webserver.go#processTokenWebsocket，要求get请求携带“target_id”参数，系统会将该参数传递给
service.GetTokenAsset() 方法，获取token对应的user，从而建立TTY会话。
发现 GetTokenAsset() 是将“/api/v1/authentication/connection-token/?token=”与token值进行拼接，并发起Get请求，来获取用户身份的。
上文分析过 /api/v1/authentication/connection-token/
接口，Get请求处理函数中定义，若仅携带有效token，则返回该用户所有信息，若同时携带token和不为None的user-only，则返回用户信息中的'user'字段值。
本次通信则是仅携带有效token，从而获取该用户所有身份信息。
综上，一个有效的“target_id”即可调用/koko/ws/token/ 接口进行websoket通信，从而建立TTY会话。
    ws://192.168.18.182:8080/koko/ws/token/?target_id=845fad2b-6077-41cb-b4fd-1462cca1152d
    {"id":"8fd8b06e-dfd6-45b4-aeb7-9403d3a65cfa","type":"CONNECT","data":""}
    {"id":"8fd8b06e-dfd6-45b4-aeb7-9403d3a65cfa","type":"TERMINAL_INIT","data":"{\"cols\":140,\"rows\":6}"}
而这个有效的“target_id”则通过上一章节“身份验证绕过”中分析的 /api/v1/authentication/connection-token/
或 /api/v1/users/connection-token/接口来获得，需要在20s有效期内将token替换为target_id参数值来使用。
## 补丁分析
漏洞整体分析下来，最关键的几个点，身份验证绕过以及websocket通信接口无校验，官方发布的新版本对其进行修复。
# 0x04关于websocket
WebSocket 协议诞生于 2008 年，在 2011 年成为国际标准，WebSocket 同样是 HTML 5 规范的组成部分之一。
HTTP 协议是半双工协议，也就是说在同一时间点只能处理一个方向的数据传输，通信只能由客户端发起，属于单向传输，一般通过 Cookie
使客户端保持某种状态，以便服务器可以识别客户端。
WebSocket的出现，使得浏览器和服务器之间可以建立无限制的全双工通信。WebSocket
协议是全双工的，客户端会先发起请求建立连接，若服务器接受了此请求，则将建立双向通信，然后服务器和客户端就可以进行信息交互了，直到客户端或服务器发送消息将其关闭为止。
**WebSocket特点：**
1.默认端口是80和443，并且握手阶段采用 HTTP 协议，因此握手时不容易屏蔽，能通过各种 HTTP 代理服务器。
2.可以发送文本，也可以发送二进制数据。
3.没有同源限制，客户端可以与任意服务器通信。
4.协议标识符是ws（如果加密，则为wss）
## **WebSocket通信**
WebSocket并不是全新的协议，而是利用了HTTP协议来建立连接。
### 建立连接
**客户端请求报文：**
    GET / HTTP/1.1