AS4
AS5
AS6
bitcoin connection
hijacked connection by AS8
private pool traffic
J
I
Stratum
H
A
AS8
INV
GETDATA
20 min delay
B
AS2
BLOCK
INV
C
AS1
G
F
stealth 
connection
Fig. 2: Illustration of how an AS-level adversary (AS8) which
naturally intercepts a part of the trafﬁc can delay the delivery
of a block for 20 minutes to a victim node (C).
Fig. 1: Illustration of how an AS-level adversary (AS8) can
intercept Bitcoin trafﬁc by hijacking preﬁxes to isolate the set
of nodes P = (A, B, C, D, E, F ).
the Bitcoin network into two disjoint components. The actual
content of P depends on the attacker’s objectives and can
range from one or few merchant nodes, to a set of nodes
holding a considerable percentage of the total mining power.
Attack The attacker ﬁrst diverts the trafﬁc destined to nodes
in P by hijacking the most-speciﬁc preﬁxes hosting each
of the IP address. Once on-path, the attacker intercepts the
Bitcoin trafﬁc (e.g., based on the TCP ports) and identiﬁes
whether the corresponding connections cross the partition she
tries to create. If so, the attacker drops the packets. If not,
meaning the connections are contained within P , she monitors
the exchanged Bitcoin messages so as to detect “leakage
points”. Leakage points are nodes currently within P , which
maintain connections with nodes outside of P , that the attacker
cannot intercept, namely “stealth” connections. The attacker
can detect these nodes automatically and isolate them from
others in P (Section IV). Eventually, the attacker isolates the
maximal set of nodes in P that can be isolated.
Example We illustrate the partition attack on the simple
network in Fig. 1 that is composed of 8 ASes, some of which
host Bitcoin nodes. Two mining pools are depicted as a green
(left) and a red (right) region. Both pools are multi-homed and
have gateways in different ASes. For instance, the red (right)
pool has gateways hosted in AS4, AS5, and AS6. We denote
the initial Bitcoin connections with blue lines, and those that
have been diverted via hijacking with red lines. Dashed black
lines represent private connections within the pools. Any AS
on the path of a connection can intercept it.
Consider an attack by AS8 that is meant to isolate the set
of nodes P = (A, B, C, D, E, F ). First, it hijacks the preﬁxes
advertised by AS1, AS2 and AS6, as they host nodes within
P , effectively attracting the trafﬁc destined to them. Next, AS8
drops all connections crossing the partition: i.e., (A, J), (B, J)
and (F, G).
Observe that node F is within the isolated set P , but is
also a gateway of the red pool with which F most likely
communicates. This connection may not be based on the
Bitcoin protocol and thus it cannot be intercepted (at least,
not easily). As such, even if the attacker drops all the Bitcoin
connections she intercepts, node F may still learn about trans-
actions and blocks produced on the other side and might leak
this information within P . Isolating P as such is infeasible.
However, AS8 can identify that node F is the leakage point
during the attack and exclude it from P , essentially isolating
I(cid:3) = (A, B, C, D, E) instead. This I(cid:3) is actually the maximum
subset of P that can be isolated from the Bitcoin network.
Practicality We extensively evaluate the practicality of iso-
lating sets of nodes of various sizes (Section VII). We brieﬂy
summarize our ﬁndings. First, we performed a real BGP hijack
against our own Bitcoin nodes and show that it takes less than
2 minutes for an attacker to divert Bitcoin trafﬁc. Second, we
estimated the number of preﬁxes to hijack so as to isolate
nodes with a given amount of mining power. We found that
hijacking only 39 preﬁxes is enough to isolate a speciﬁc
set of nodes which accounts for almost 50% of the overall
mining power. Through a longitudinal analysis spanning over
6 months, we found that much larger hijacks happen regularly
and that some of them have already impacted Bitcoin trafﬁc.
Third, we show that, while effective, partitions do not last
long after the attack stops: the two components of the partition
quickly reconnect, owing to natural churn. Yet, it takes hours
for the two components to be densely connected again.
Impact The impact of a partitioning attack depends on the
number of isolated nodes and how much mining power they
have. Isolating a few nodes essentially constitutes a denial of
service attack and renders them vulnerable to 0-conﬁrmation
double spends. Disconnecting a considerable amount of min-
ing power can lead to the creation of two different versions
of the blockchain. All blocks mined on the side with the least
mining power will be discarded and all included transactions
are likely to be reversed. Such an attack would cause revenue
loss for the miners on the side with least mining power and
a prominent risk of double spends. The side with the most
mining power would also suffer from an increased risk of
selﬁsh mining attacks by adversaries with mining power.
378
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:19:24 UTC from IEEE Xplore.  Restrictions apply. 
B. Slowing down the Bitcoin network
In a delay attack, the attacker’s goal is to slow down the
propagation of new blocks sent to a set of Bitcoin nodes
without disrupting their connections. As with partitioning, the
attack can be targeted, aimed at selected nodes, or network-
wide, aimed at disrupting the ability of the entire network to
reach consensus [20]. Unlike partitioning attacks though, an
attacker can delay the overall propagation of blocks towards
a node even if she intercepts a subset of its connections.
Attack Delay attacks leverage three key aspects of the Bitcoin
protocol: (i) the asymmetry in the way Bitcoin nodes exchange
blocks using INV, GETDATA, and BLOCK messages (Sec-
tion II); (ii) the fact that these messages are not protected
against tampering (unencrypted, no secure integrity checks);
and (iii) the fact that a Bitcoin node waits for 20 minutes
after having requested a block from a peer before requesting
it again from another peer. These protocol features enable
an attacker intercepting even one direction of the victim’s
connection to delay the propagation of a block, as long as this
connection is traversed by either the actual BLOCK message
or the corresponding GETDATA.
Speciﬁcally, if the attacker intercepts the trafﬁc from the
victim, she can modify the content of the GETDATA message
the victim uses to ask for blocks. By preserving the message
length and structure and by updating the TCP and Bitcoin
checksums, the modiﬁed message is accepted by the receiver
and the connection stays alive.
If the attacker intercepts the
trafﬁc towards a node, she can instead corrupt the content of
the BLOCK message such that the victim considers it invalid.
In both cases, the recipient of the blocks remains uninformed
for 20 minutes.
Example As an illustration, consider Fig. 2, and assume that
AS8 is the attacker and C, the victim. Suppose that A and B
both advertise a block (say, block X) to C via an INV message
and that, without loss of generality, the message from A arrives
at C ﬁrst. C will then send a GETDATA message back to
A requesting block X and start a 20 minute timeout count.
By modifying the content of the GETDATA node A receives,
AS8 indirectly controls what node A will send to node C.
This way the attacker can delay the delivery of the block by
up to 20 minutes while avoiding detection and disconnection.
Alternatively, AS8 could modify the BLOCK message.
Practicality We veriﬁed the practicality of delay attacks by
implementing an interception software which we used against
our own Bitcoin nodes. We show that intercepting 50% of a
node connections is enough to keep the node uninformed for
63% of its uptime (Section VIII).
We also evaluated the impact that ASes, which are naturally
traversed by a lot of Bitcoin trafﬁc, could have on the network
using a scalable event-driven simulator. We found that due to
the relatively high degree of multi-homing that pools employ,
only very powerful coalitions of network attackers (e.g., all
ASes based in the US) could perform a network-wide delay
attack. Such an attack is thus unlikely to occur in practice.
Impact Similarly to partitioning attacks, the impact of a delay
attack depends on the number and type (e.g., pool gateway)
of impacted nodes. At the node-level, delay attacks can keep
the victim eclipsed, essentially performing a denial of service
attack or rendering it vulnerable to 0-conﬁrmation double
spends. If the node is a gateway of a pool, such attacks can
be used to engineer block races, and waste the mining power
of the pool. Network-wide attacks increase the fork rate and
render the network vulnerable to other exploits. If a sufﬁcient
number of blocks are discarded, miners revenue is decreased
and the network is more vulnerable to double spending. A
slowdown of block transmission can be used to launch selﬁsh
mining attacks by adversaries with mining power.
IV. PARTITIONING BITCOIN
In this section, we elaborate on partition attacks in which
an AS-level adversary seeks to isolate a set of nodes P . We
ﬁrst describe which partitions are feasible by deﬁning which
connections may cause information leakage (Section IV-A)
to the isolated set. We then discuss how an attacker may
better select a P that is feasible, if she has some view of the
Bitcoin topology (Section IV-B). Next, we walk through the
entire attack process, starting with the interception of Bitcoin
trafﬁc, the detection of leakage points and the adaptation of
P until the partition is successfully created (Section IV-C). In
particular, we present an algorithm which, given a set of nodes
P , leads the attacker to isolate the maximal feasible subset.
Finally, we prove that our algorithm is correct (Section IV-D).
A. Characterizing feasible partitions
An attacker can isolate a set of nodes P from the network
if and only if all connections (a, b) where a ∈ P and b (cid:3)∈ P
can be intercepted. We refer to such connections as vulnerable
and to connections that the attacker cannot intercept as stealth.
Vulnerable connections: A connection is vulnerable if: (i) an
attacker can divert it via a BGP hijack; and (ii) it uses the
Bitcoin protocol. The ﬁrst requirement enables the attacker to
intercept the corresponding packets, while the second enables
her to identify and then drop or monitor these packets.
As an illustration, consider Fig. 3a, and assume that the
attacker, AS8, wants to isolate P = {A, B, C}. By hijacking
the preﬁxes pertaining to these nodes the attacker receives all
trafﬁc from nodes A and B to node C, as well as the trafﬁc
from node D to node A. The path the hijacked trafﬁc follows is
depicted with red dashed lines and the original path with blue
lines. As all nodes communicate using the Bitcoin protocol,
their connections can easily be distinguished, as we explain in
Section IV-C. Here, AS8 can partition P from the rest of the
network by dropping the connection from node D to node A.
Stealth connections: A connection is stealth if the attacker
cannot
it. We distinguish three types of stealth
connections: (i) intra-AS; (ii) intra-pool; and (iii) pool-to-pool.
intercept
379
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:19:24 UTC from IEEE Xplore.  Restrictions apply. 
A
B
AS2
desired 
partition
D
E
AS4
AS8
stealth connection 
crossing the partition
A
X
B
AS2
desired 
partition
AS4
AS8
D
E
C
AS1
C
AS1
miners
B
B
A
A
C
E
Stratum
stealth 
connection
mining  
pool
F
desired 
partition
AS2
D
AS3
AS8
AS1
bitcoin connection
hijacked connection by AS8
(a) Feasible partition
bitcoin connection
hijacked connection by AS8
(b) Infeasible partition because
of intra-AS connections
bitcoin connection
hijacked connection by AS8
(c) Infeasible partition because of intra-
pool connections
Fig. 3: Not all Bitcoin connections can be diverted by an attacker implying that some partitions cannot be formed.
intra-AS: An attacker cannot intercept connections within the
same AS using BGP hijack. Indeed, internal trafﬁc does not get
routed by BGP, but by internal routing protocols (e.g., OSPF,
EIGRP). Thus, any intra-AS connection crossing the partition
border renders the partition infeasible. Such connections rep-
resent only 1.14% of all the possible connection nodes can
create (this percentage is calculated based on the topology we
inferred in Section VI).
As an illustration, consider Fig. 3b and assume that the
attacker, AS8, wants to isolate P = {A, B, C}. By hijacking
the corresponding BGP preﬁxes, AS8 can intercept the con-
nections running between nodes A and B to node C. However,
she does not intercept the intra-AS connection between A and
X. This means that node X will inform node A of the blocks
mined in the rest of the network, and node A will then relay
this information further within P . Thus, P = {A, B, C} is not
feasible. Yet, observe that isolating I = {B, C} is possible. In
the following, we explain how the attacker can detect that A
maintains a stealth connection leading outside of the partition
and dynamically adapt to isolate I instead.
intra-pool: Similarly to intra-AS connections, an attacker
might not be able to cut connections between gateways be-
longing to the same mining pool. This is because mining
pools might rely on proprietary or even encrypted protocols
for internal communication.
As an illustration, consider Fig. 3c and assume that the at-
tacker, AS8, wants to isolate P = {A, B, C, D}. By hijacking
the corresponding preﬁxes, she would intercept and cut all
Bitcoin connections between nodes A, B, C, D and nodes E,
F. However, nodes A and F would still be connected internally
as they belong to the same (green) pool. Again, observe that
while isolating P = {A, B, C, D} is not feasible, isolating
I = {B, C, D} from the rest of the network is possible.
pool-to-pool: Finally, an attacker cannot
intercept (possi-
bly encrypted) private connections, corresponding to peering
agreements between mining pools. From the attacker’s point
of view, these connections can be treated as intra-pool connec-
tions and the corresponding pair of pools can be considered as
one larger pool. Note that such connections are different than
public initiatives to interconnect all pools, such as the Bitcoin
relays [13]. Unlike private peering agreements, relays cannot
act as bridges to the partition (see Appendix E).
B. Preparing for the attack
In light of these limitations the attacker can apply two
techniques to avoid having stealth connections crossing the
partition she creates. First, she can include in P either all or
none of the nodes of an AS, to avoid intra-AS connections
crossing the partition. This can be easily done as the mapping
from IPs to ASNs is publicly available [11]. Second, she can
include in P either all or none of the gateways of a pool, to
avoid intra-pool connections crossing the partition. Doing so
requires the attacker to know all the gateways of the mining
pools she wants to include in P . Inferring the gateways is
outside the scope of this paper, yet the attacker could use
techniques described in [36] and leverage her ability to inspect
the trafﬁc of almost every node via hijacking (see Appendix
C). Even with the above measures, P may still contain leakage
points that
the attacker will need to identify and exclude
(see below). Yet, these considerations increase the chances of
establishing the desired partition as well as reducing the time
required to achieve it.
C. Performing the attack
We now describe how a network adversary can successfully
perform a partitioning attack. The attack is composed of two
main phases: (i) diverting relevant Bitcoin trafﬁc; and (ii)
enforcing the partition. In the former phase, the adversary
diverts relevant Bitcoin trafﬁc using BGP hijacking. In the