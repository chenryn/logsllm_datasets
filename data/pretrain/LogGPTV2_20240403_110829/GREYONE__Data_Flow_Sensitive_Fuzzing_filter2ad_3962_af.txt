# Unique Crashes

| ID | GREYONE-CE | Percentage Change | GREYONE-BP | Percentage Change |
|----|------------|-------------------|-------------|-------------------|
| 16 | 21 (-25%)   | 25 (-10.7%)       |
| 268 | 4 (-75%)   | 7 (-56.3%)        |
| 6 | 127 (-52.6%)| 225 (-16%)        |
| 83 | 0 (-100%)  | 0 (-100%)         |
| 21 | 28 (-66.3%)| 49 (-41%)         |
| 23 | 0 (-100%)  | 7 (-66%)          |
| 40 | 7 (-69.6%) | 9 (-60.9%)        |
| 157 | 24 (-40%)  | 33 (-17.5%)       |
| 28 | 28 (-82.2%)| 79 (-49.7%)       |
| -  | 22 (-21.4%)| 25 (-10.7%)       |
| Overall | -63.2%    | -42.9%           |

## Taint Inference in Fuzzing Applications

Existing taint inference solutions, such as REDQUEEN [4], Fairfuzz [24], and ProFuzzer [42], are primarily focused on information flow detection and control flow changes. These methods do not account for the value changes of variables after mutation, leading to inaccurate taint information.

In this paper, we introduce FTI, a fuzzing-driven taint inference solution. FTI performs systematic byte-level mutations and monitors variable value changes to infer taint attributes. This approach is automated, lightweight, and more accurate.

## 6.2 Seed Mutation

Many studies [10, 13, 30, 44] have highlighted seed mutation as a critical and challenging area for improving the efficiency and accuracy of fuzzing. Various approaches have been proposed to address where and how to mutate seeds:

### a) Static-Analysis-Based Optimization
- **Steelix [25]** and **Laf-intel-pass [1]** decompose long constant comparisons into shorter ones, making it easier for random fuzzers to satisfy path constraints. However, this method introduces many semantically equivalent paths and cannot handle non-constant comparisons.
- **SYMFUZZ [8]** uses static symbolic analysis to detect input bit dependencies and compute an optimal mutation ratio. Despite its potential, this process is slow and does not significantly improve mutation effectiveness.

### b) Learning-Based Models
- **Rajpal et al. [29]** use a Recurrent Neural Network (RNN) to predict the best locations for mutation based on historical mutations and code coverage feedback.
- **Konstantin et al. [7]** employ deep reinforcement learning to model the fuzzing loop and choose the best mutation actions.
- **NEUZZ [35]** leverages program smoothing and incremental learning to guide mutations, but these solutions are still in their early stages and have not yet shown significant improvements.

### c) Symbolic-Based Solutions
- **Driller [37]** periodically selects stuck paths from mutation-based fuzzing and uses symbolic execution to solve path constraints.
- **QSYM [43]** applies symbolic execution to native X86 instructions, relaxing path constraints to improve performance and reduce solving time.
- **DigFuzz [45]** prioritizes paths using a probabilistic model, but these symbolic-based solutions struggle with large applications due to the complexity of constraint solving.

### d) Taint-Based Mutation
- **Dowser [17]** and **BORG [27]** use taint to identify buffer boundary violations and over-read vulnerabilities, respectively.
- **BuzzFuzz [15]** tracks external seed inputs affecting sensitive library or system calls.
- **TaintScope [40]** uses fine-grained DTA to identify checksum branches.
- **VUzzer [30]** tracks branches comparing variables against constants and guides mutations accordingly.
- **Angora [10]** performs shape inference and gradient descent computation based on DTA. However, these solutions suffer from inaccurate taint, limiting their effectiveness in complex programs.

Our solution, GREYONE, utilizes the lightweight and sound taint inference provided by FTI to obtain more accurate taint attributes and precise relationships between input offsets and branches. This allows GREYONE to prioritize which branches to explore and which bytes to mutate, ensuring more precise mutations.

## 6.3 Seed Updating and Selection

Seed updating and selection are crucial for directing the evolution of fuzzing. Effective solutions can enhance the efficiency of fuzzers in discovering more code and bugs [28] and targeting potentially vulnerable code [5, 9, 39].

### Few Works on Seed Updating
- **AFL [44]** prioritizes seeds with smaller sizes and shorter execution times to generate more test cases.
- **AFLFAST [6]** emphasizes the importance of seed selection and prioritizes rarely picked seeds that explore cold paths.
- **Other Approaches** use various control flow characteristics to guide seed selection, such as prioritizing deeper paths [30] or untouched neighbor branches [14].

However, these solutions do not consider data flow features, making them inefficient at exploring paths with complex constraints. **Honggfuzz [38]** and **LibFuzzer [32]** incorporate weak data flow features to guide seed selection by evaluating the distance between branch operands.

**GREYONE** improves this strategy by evaluating constraint conformance on all tainted, untouched branches. It also employs a two-dimensional seed queue structure for efficient seed updating and selection, avoiding the local minimum problem faced by Angora [10]. Additionally, GREYONE uses on-the-fly mutation rebase to accelerate fuzzing evolution.

## 6.4 Performance Optimization

Performance is a key factor in efficient fuzzing. Several solutions aim to boost parallel execution [41] or instrumentation [18, 36]. For example, **Untracer [36]** removes unnecessary instrumentation in explored basic blocks, reducing overhead. **GREYONE** optimizes instrumentation by selecting lighter testing modes and switching between different fuzzing modes to improve speed.

## 7 Conclusion

In this paper, we present GREYONE, a novel data flow-sensitive fuzzing solution. GREYONE infers taint during fuzzing by monitoring variable value changes and guides seed mutation with the inferred taint. It also uses data flow feature conformance to direct the evolution of fuzzing, enabling the fuzzer to quickly reach unexplored branches and trigger potential vulnerabilities. GREYONE outperforms state-of-the-art fuzzers in terms of code coverage and vulnerability discovery, while providing more lightweight and accurate taint analysis.

## Acknowledgements

We thank the anonymous reviewers for their insightful and valuable comments. This research was supported in part by the National Nuclear High-Base Project (2018ZX01028102), the National Natural Science Foundation of China (Grants 61772308, 61972224, U1736209), and the BNRist Network and Software Security Research Program (Grants BNR2019TD01004 and BNR2019RC01009).

## References

[1] Circumventing Fuzzing Roadblocks with Compiler Transformations. https://lafintel.wordpress.com/2016/08/15/circumventing-fuzzing-roadblocks-with-compiler-transformations/

[2] DataFlowSanitizer. https://clang.llvm.org/docs/DataFlowSanitizerDesign.html

[3] Utilities for Automated Crash Sample Processing/Analysis. https://github.com/rc0r/afl-utils

[4] ASCHERMANN, C., SCHUMILO, S., BLAZYTKO, T., GAWLIK, R., AND HOLZ, T. Redqueen: Fuzzing with Input-to-State Correspondence. In NDSS (2019). To appear.

[5] BOHME, M., PHAM, V.-T., NGUYEN, M.-D., AND ROYCHOUDHURY, A. Directed Greybox Fuzzing. In CCS (2017).

[6] BÖHME, M., PHAM, V.-T., AND ROYCHOUDHURY, A. Coverage-Based Grey-Box Fuzzing as Markov Chain. In Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security (2016), ACM, pp. 1032–1043.

[7] BÖTTINGER, K., GODEFROID, P., AND SINGH, R. Deep Reinforcement Fuzzing. arXiv preprint arXiv:1801.04589 (2018).

[8] CHA, S. K., WOO, M., AND BRUMLEY, D. Program-Adaptive Mutational Fuzzing. In Security and Privacy (SP), 2015 IEEE Symposium on (2015), IEEE, pp. 725–741.

[9] CHEN, H., XUE, Y., LI, Y., CHEN, B., XIE, X., WU, X., AND LIU, Y. Hawkeye: Towards a Desired Directed Grey-Box Fuzzer. In Proceedings of the 2018 ACM SIGSAC Conference on Computer and Communications Security (2018), ACM, pp. 2095–2108.

[10] CHEN, P., AND CHEN, H. Angora: Efficient Fuzzing by Principled Search. arXiv preprint arXiv:1803.01307 (2018).

[11] CLAUSE, J., LI, W., AND ORSO, A. Dytan: A Generic Dynamic Taint Analysis Framework. In Proceedings of the 2007 International Symposium on Software Testing and Analysis (2007), ACM, pp. 196–206.

[12] DOLAN-GAVITT, B., HULIN, P., KIRDA, E., LEEK, T., MAMBRETTI, A., ROBERTSON, W., ULRICH, F., AND WHELAN, R. LAVA: Large-Scale Automated Vulnerability Addition. In Security and Privacy (SP), 2016 IEEE Symposium on (2016), IEEE, pp. 110–121.

[13] EDDINGTON, M. Peach Fuzzing Platform. Peach Fuzzer (2011), 34.

[14] GAN, S., ZHANG, C., QIN, X., TU, X., LI, K., PEI, Z., AND CHEN, Z. CollaFL: Path Sensitive Fuzzing. In 2018 IEEE Symposium on Security and Privacy (SP) (2018), IEEE, pp. 679–696.

[15] GANESH, V., LEEK, T., AND RINARD, M. Taint-Based Directed Whitebox Fuzzing. In Proceedings of the 31st International Conference on Software Engineering (2009), IEEE Computer Society, pp. 474–484.

[16] GOGUEN, J. A., AND MESEGUER, J. Security Policies and Security Models. In 1982 IEEE Symposium on Security and Privacy (1982), IEEE, pp. 11–11.

[17] HALLER, I., SLOWINSKA, A., NEUGSCHWANDTNER, M., AND BOS, H. Dowsing for Overflows: A Guided Fuzzer to Find Buffer Boundary Violations. In USENIX Security Symposium (2013), pp. 49–64.

[18] HSU, C.-C., WU, C.-Y., HSIAO, H.-C., AND HUANG, S.-K. Instrim: Lightweight Instrumentation for Coverage-Guided Fuzzing. In Symposium on Network and Distributed System Security (NDSS), Workshop on Binary Analysis Research (2018).

[19] KANG, M. G., MCCAMANT, S., POOSANKAM, P., AND SONG, D. DTA++: Dynamic Taint Analysis with Targeted Control-Flow Propagation. In NDSS (2011).

[20] KEMERLIS, V. P., PORTOKALIDIS, G., JEE, K., AND KEROMYTIS, A. D. Libdft: Practical Dynamic Data Flow Tracking for Commodity Systems. In ACM Sigplan Notices (2012), vol. 47, ACM, pp. 121–132.

[21] KLEES, G., RUEF, A., COOPER, B., WEI, S., AND HICKS, M. Evaluating Fuzz Testing. In Proceedings of the 2018 ACM SIGSAC Conference on Computer and Communications Security (2018), ACM, pp. 2123–2138.

[22] LATTNER, C. LLVM Related Publications. Official LLVM Web Site. Retrieved on 2010-12-04. http://llvm.org.

[23] LEE, B., SONG, C., KIM, T., AND LEE, W. Type Casting Verification: Stopping an Emerging Attack Vector. In USENIX Security Symposium (2015), pp. 81–96.

[24] LEMIEUX, C., AND SEN, K. Fairfuzz: A Targeted Mutation Strategy for Increasing Greybox Fuzz Testing Coverage. In Proceedings of the 33rd ACM/IEEE International Conference on Automated Software Engineering (2018), ACM, pp. 475–485.

[25] LI, Y., CHEN, B., CHANDRAMOHAN, M., LIN, S.-W., LIU, Y., AND TIU, A. Steelix: Program-State Based Binary Fuzzing. In Proceedings of the 2017 11th Joint Meeting on Foundations of Software Engineering (2017), ACM, pp. 627–637.

[26] MATHIS, B., AVDIIENKO, V., SOREMEKUN, E. O., BÖHME, M., AND ZELLER, A. Detecting Information Flow by Mutating Input Data. In Proceedings of the 32nd IEEE/ACM International Conference on Automated Software Engineering (2017), IEEE Press, pp. 263–273.

[27] NEUGSCHWANDTNER, M., MILANI COMPARETTI, P., HALLER, I., AND BOS, H. The Borg: Nanoprobing Binaries for Buffer Overreads. In Proceedings of the 5th ACM Conference on Data and Application Security and Privacy (2015), ACM, pp. 87–97.

[28] PETSIOS, T., ZHAO, J., KEROMYTIS, A. D., AND JANA, S. Slowfuzz: Automated Domain-Independent Detection of Algorithmic Complexity Vulnerabilities. In Conf. on Computer and Communication Security (2017).

[29] RAJPAL, M., BLUM, W., AND SINGH, R. Not All Bytes Are Equal: Neural Byte Sieve for Fuzzing. CoRR abs/1711.04596 (2017).

[30] RAWAT, S., JAIN, V., KUMAR, A., AND BOS, H. VUzzer: Application-Aware Evolutionary Fuzzing. In Network and Distributed System Security Symposium (2017).

[31] SEKAR, R. An Efficient Black-Box Technique for Defeating Web Application Attacks. In NDSS (2009).

[32] SEREBRYANY, K. Continuous Fuzzing with libfuzzer and AddressSanitizer. In Cybersecurity Development (SecDev), IEEE (2016), IEEE, pp. 157–157.

[33] SEREBRYANY, K. OSS-Fuzz - Google’s Continuous Fuzzing Service for Open Source Software.

[34] SEREBRYANY, K., BRUENING, D., POTAPENKO, A., AND VYUKOV, D. AddressSanitizer: A Fast Address Sanity Checker. In the 2012 USENIX Annual Technical Conference (2012), pp. 309–318.

[35] SHE, D., PEI, K., EPSTEIN, D., YANG, J., RAY, B., AND JANA, S. NEUZZ: Efficient Fuzzing with Neural Program Smoothing. In IEEESP (2019). To appear.

[36] STEFAN NAGY, M. H. Full-Speed Fuzzing: Reducing Fuzzing Overhead Through Coverage-Guided Tracing. In IEEESP (2019). To appear.

[37] STEPHENS, N., GROSEN, J., SALLS, C., DUTCHER, A., WANG, R., CORBETTA, J., SHOSHITAISHVILI, Y., KRUEGEL, C., AND VIGNA, G. Driller: Augmenting Fuzzing Through Selective Symbolic Execution. In NDSS (2016), vol. 16, pp. 1–16.

[38] SWIECKI, R. Honggfuzz. Available online at: http://code.google.com/p/honggfuzz (2016).

[39] WANG, S., CHANG NAM, J., AND TAN, L. Qtep: Quality-Aware Test Case Prioritization. In ESEC/FSE 2017 Proceedings of the 2017 11th Joint Meeting on Foundations of Software Engineering (2017).

[40] WANG, T., WEI, T., GU, G., AND ZOU, W. Taintscope: A Checksum-Aware Directed Fuzzing Tool for Automatic Software Vulnerability Detection. In IEEE Symposium on Security and Privacy (2010).

[41] XU, W., KASHYAP, S., MIN, C., AND KIM, T. Designing New Operating Primitives to Improve Fuzzing Performance. In Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security (New York, NY, USA, 2017), CCS ’17, ACM, pp. 2313–2328.

[42] YOU, W., WANG, X., MA, S., HUANG, J., ZHANG, X., WANG, X., AND LIANG, B. Profuzzer: On-the-Fly Input Type Probing for Better Zero-Day Vulnerability Discovery. In IEEE Security and Privacy (2019), IEEE.

[43] YUN, I., LEE, S., XU, M., JANG, Y., AND KIM, T. {QSYM}: A Practical Concolic Execution Engine Tailored for Hybrid Fuzzing. In 27th {USENIX} Security Symposium ({USENIX} Security 18) (2018), pp. 745–761.

[44] ZALEWSKI, M. American Fuzzy Lop. http://lcamtuf.coredump.cx/afl/.

[45] ZHAO, L., DUAN, Y., YIN, H., AND XUAN, J. Send Hardest Problems My Way: Probabilistic Path Prioritization for Hybrid Fuzzing. In NDSS (2019). To appear.

[46] ZHENG LEONG CHUA, Y. W. Inferring Taint Rules Without Architectural Semantics. In NDSS (2019). To appear.

## Appendix

### A.1 Growth Trend of Code Coverage

Figure 13 and Figure 16 show the average growth trend of paths and edges detected by each fuzzer over five runs. GREYONE demonstrates a stronger and more consistent growth trend in all applications compared to other fuzzers. While Angora achieves high initial code coverage in some applications like `readelf` and `nm`, it often falls into a local minimum, resulting in poor overall coverage. In contrast, GREYONE maintains a steady and strong growth trend, eventually surpassing Angora in most applications.

### A.2 Growth Trend of Unique Crashes

Figure 14 illustrates the growth trend of unique crashes detected by each fuzzer. GREYONE consistently finds more unique crashes in almost all applications and does so faster than other fuzzers, except in `readelf` where it initially lags behind Angora but catches up and surpasses it after 50 hours. The randomness in fuzzing does not significantly affect the overall trend, as even the worst run of GREYONE generally shows better results than the best run of other fuzzers.