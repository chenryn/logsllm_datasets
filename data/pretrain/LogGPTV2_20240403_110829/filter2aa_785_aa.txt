# DEFCON 2018 USA
## Alexandre Borges
### Ring 0/-2 Rootkits: Compromising Defenses

**DEFCON 2018 - USA**
**Alexandre Borges - Malware and Security Researcher**

---

### Profile and Table of Contents (TOC)

**Table of Contents:**
- Introduction
- Rootkits: Ring 0
- Advanced Malwares and Rootkits: Ring -2
- About the Speaker

**About the Speaker:**
- **Alexandre Borges** is a malware and security researcher with extensive experience in:
  - Malware Analysis
  - Memory Analysis
  - Digital Forensics
  - Rootkits
  - Software Exploitation
- Consultant, Instructor, and Speaker on various security topics.
- Member of the Digital Law and Compliance Committee (CDDC/SP).
- Reviewer for The Journal of Digital Forensics, Security, and Law.
- Referee for Digital Investigation: The International Journal of Digital Forensics & Incident Response.
- Former instructor at Oracle, (ISC)², and Symantec.

---

### Acknowledgments

**Special Thanks to:**
- Joanna Rutkowska
- John Loucaides
- Oleksandr Bazhaniuk
- Sergey Bratus
- Vicent Zimmer
- Yuriy Bulygin
- Xeno Kovah
- Alex Bazhaniuk
- Alex Matrosov
- Andrew Furtak
- Bruce Dang
- Corey Kallenberg
- Dmytro Oleksiuk
- Engene Rodionov

These professionals have provided invaluable insights and knowledge. I continue to learn from their work.

---

### Introduction

**Alexandre Borges - Malware and Security Researcher**
**DEFCON 2018 - USA**

---

### Ring 0/-2 Rootkits

**Advanced Malwares:**
- MBR/VBR/UEFI rootkits
- Techniques used by rootkits
- Kernel Code Signing Bypasses
- MBR + IPL infection
- BIOS, UEFI, and boot architecture
- Boot Guard
- Secure Boot attacks
- WSMT (Windows SMM Security Mitigation Table)
- BIOS Guard
- BIOS/UEFI Protections

**Ring 0:**
- Kernel Callback methods
- WinDbg structures
- Kernel Drivers Structures
- Malicious Drivers
- Modern C2 communication
- Kernel Pools and APCs

---

### Rootkits: Ring 0

**Kernel Callback Functions:**
- These are modern hooks often used by antivirus programs to monitor and alert kernel modules about specific events. Malwares (kernel drivers) also use them to evade defenses.
- Common callback methods include:
  - `PsSetLoadImageNotifyRoutine`: Provides notification when a process, library, or kernel memory is mapped into memory.
  - `IoRegisterFsRegistrationChange`: Provides notification when a filesystem becomes available.
  - `IoRegisterShutdownNotification`: The driver handler (`IRP_MJ_SHUTDOWN`) acts when the system is about to shut down.
  - `KeRegisterBugCheckCallback`: Helps drivers receive a notification (for cleaning tasks) before a system crash.
  - `PsSetCreateThreadNotifyRoutine`: Called every time a thread starts or ends.
  - `PsSetCreateProcessNotifyRoutine`: Invoked when a process starts or finishes (used by rootkits and AVs).
  - `DbgSetDebugPrintCallback`: Used for capturing debug messages.
  - `CmRegisterCallback()` or `CmRegisterCallbackEx()`: Registers a RegistryCallback routine, which is called every time a thread performs an operation on the registry.

**Malware Usage:**
- Malwares use these callbacks to check if their persistence entries are maintained and, if removed, to re-add them.

**Example:**
```plaintext
0: kd> dd nt!CmpCallBackCount L1
fffff801`aa733fcc  00000002
0: kd> dps nt!CallbackListHead L2
fffff801`aa769190  ffffc000`c8d62db0
fffff801`aa769198  ffffc000`c932c8b0
0: kd> dt nt!_LIST_ENTRY ffffc000`c8d62db0
[ 0xffffc000`c932c8b0 - 0xfffff801`aa769190 ]
+0x000 Flink            : 0xffffc000`c932c8b0 _LIST_ENTRY [ 0xfffff801`aa769190 - 0xffffc000`c8d62db0 ]
+0x008 Blink            : 0xfffff801`aa769190 _LIST_ENTRY [ 0xffffc000`c8d62db0 - 0xffffc000`c932c8b0 ]

0: kd> !list -t _LIST_ENTRY.Flink -x "dps" -a "L8" 0xffffc000`c932c8b0
ffffc000`c932c8b0  fffff801`aa769190 nt!CallbackListHead
…..
ffffc000`c932c8c8  01d3c3ba`27edfc12
ffffc000`c932c8d0  fffff801`6992a798 vsdatant+0x67798
ffffc000`c932c8d8  fffff801`69951a68 vsdatant+0x8ea68
ffffc000`c932c8e0  00000000`000a000a
.....
fffff801`aa7691c0  00000000`bee0bee0
fffff801`aa7691c8  fffff801`aa99b600 nt!HvpGetCellFlat
```

**Driver-Supplied Callbacks:**
- `PsSetCreateProcessNotifyRoutine( )` adds or removes a driver-supplied callback routine to a list of routines called whenever a process is created or deleted.
- Example:
  ```plaintext
  0: kd> dd nt!PspCreateProcessNotifyRoutineCount L1
  fffff801`aab3f668 00000009
  0: kd> .for (r $t0=0; $t0 < 9; $t0 = $t0 + 1) { dt _KTHREAD ffff801`aab3f668 + $t0 * 4 }
  ```

**Malware Techniques:**
- Malwares use the `KTHREAD.LegoData` field to register malicious routines that are called during thread termination.

**Driver Types:**
- Windows offers different types of drivers such as legacy drivers, filter drivers, and minifilter drivers, which can be developed using WDM or WDF frameworks (UMDF and KMDF).

**Analyzing Malicious Drivers:**
- Sequence of events:
  - The driver image is mapped into the kernel memory address space.
  - An associated driver object is created and registered with the Object Manager, which calls the entry point and fills the `DRIVER_OBJECT` structure’s fields.
  - The `AddDevice( )` routine creates an unnamed `DEVICE_OBJECT` and attaches it to a named `DEVICE_OBJECT` (e.g., `aborges`) from a layered driver (lower-level driver).

**Filter Drivers:**
- Most ring 0 malwares install filter drivers to:
  - Modify aspects and behavior of existing drivers
  - Filter results of operations (e.g., reading a file)
  - Add new malicious features to a driver/device (e.g., keyloggers)

**Dispatch Routines:**
- An appropriate dispatch routine is picked from the `MajorFunction` table and processes the IRP.
- Alternatively, this IRP could be passed down to the layered driver using functions like `IoCallDriver( )`.
- Rootkits use `IoCallDriver( )` to send requests directly to the filesystem driver, evading monitoring or hooking.

**Driver Stack:**
- The `IoCompleteRequest( )` function manages calling completion routines in the correct order (bottom-up).

**IRP Generation:**
- An IRP is usually generated by the I/O Manager in response to requests.
- Drivers can generate IRPs using `IoAllocateIrp( )`.
- Functions like `IoGetCurrentIrpStackLocation()`, `IoGetNextIrpStackLocation( )`, and `IoSkipCurrentIrpStackLocation( )` are commonly used in malware analysis.
- Each device is responsible for preparing the `IO_STACK_LOCATION` for the next level, and drivers can call `IoSetCompletionRoutine( )` to set up a completion routine.

**Parameters Field:**
- The parameters field depends on the major and minor function numbers, and the IRPs being used are related to the action.

---

**Alexandre Borges - Malware and Security Researcher**
**DEFCON 2018 - USA**