    ``` literallayout
    # systemctl restart example.service
    ```
4.  重启系统。
5.  （可选）检查更改是否生效：
    ``` literallayout
    # cat /sys/fs/cgroup/memory/system.slice/example.service/memory.limit_in_bytes
    1536000
    ```
    示例输出显示内存消耗限制在大约 1,500 KB。
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    `memory.limit_in_bytes`{.literal} 文件将内存限制存储为 4096
    字节的倍数 - 一个内核页面大小，专用于 AMD64 和 Intel
    64。实际的字节数量取决于 CPU 构架。
    :::
:::
::: itemizedlist
**其他资源**
-   [了解控制组群](#setting-limits-for-applications_managing-monitoring-and-updating-the-kernel.html#understanding-control-groups_setting-limits-for-applications "了解控制组群"){.link}
-   [内核资源控制器](#setting-limits-for-applications_managing-monitoring-and-updating-the-kernel.html#what-kernel-resource-controllers-are_setting-limits-for-applications "内核资源控制器"){.link}
-   `systemd.resource-control(5)`{.literal}, `cgroups(7)`{.literal}
    manual pages
-   在 RHEL
    中[*[[配置基本系统设置](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/configuring_basic_system_settings/managing-system-services-with-systemctl_configuring-basic-system-settings){.link}]{.citetitle}*]{.emphasis}
-   [控制组群中的 systemd
    角色](#using-control-groups-version-1-with-systemd_managing-monitoring-and-updating-the-kernel.html#role-of-systemd-in-control-groups-version-1_using-control-groups-version-1-with-systemd "控制组群版本 1 中的 systemd 角色"){.link}
:::
:::
::: section
::: titlepage
# []{#using-control-groups-version-1-with-systemd_managing-monitoring-and-updating-the-kernel.html#removing-transient-control-groups_using-control-groups-version-1-with-systemd}删除临时控制组群 {.title}
:::
如果您不再需要限制、确定或控制对进程组的硬件资源的访问，您可以使用
`systemd`{.literal} 系统和服务管理器删除临时控制组
(`cgroup`{.literal})。
一旦服务或范围单元所包含的所有进程完成后，临时 `cgroup`{.literal}
将自动释放。
::: itemizedlist
**步骤**
-   要使用所有进程停止服务单元，请执行：
    ``` literallayout
    # systemctl stop .service
    ```
-   要终止一个或多个单元进程，请执行：
    ``` literallayout
    # systemctl kill .service --kill-who=PID,…​ --signal=signal
    ```
    以上命令使用 `--kill-who`{.literal}
    选项从您要终止的控制组中选择进程。要同时终止多个进程，请传递以逗号分隔的
    PID 列表。`--signal`{.literal} 决定要发送到指定进程的 POSIX
    信号的类型。默认信号是 [*SIGTERM*]{.emphasis}。
:::
::: itemizedlist
**其他资源**
-   [了解控制组群](#setting-limits-for-applications_managing-monitoring-and-updating-the-kernel.html#understanding-control-groups_setting-limits-for-applications "了解控制组群"){.link}
-   [内核资源控制器](#setting-limits-for-applications_managing-monitoring-and-updating-the-kernel.html#what-kernel-resource-controllers-are_setting-limits-for-applications "内核资源控制器"){.link}
-   `systemd.resource-control(5)`{.literal}, `cgroups(7)`{.literal}
    manual pages
-   [控制组群中的 systemd
    角色](#using-control-groups-version-1-with-systemd_managing-monitoring-and-updating-the-kernel.html#role-of-systemd-in-control-groups-version-1_using-control-groups-version-1-with-systemd "控制组群版本 1 中的 systemd 角色"){.link}
-   在 RHEL
    中[*[[配置基本系统设置](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/configuring_basic_system_settings/managing-system-services-with-systemctl_configuring-basic-system-settings){.link}]{.citetitle}*]{.emphasis}
:::
:::
::: section
::: titlepage
# []{#using-control-groups-version-1-with-systemd_managing-monitoring-and-updating-the-kernel.html#removing-persistent-control-groups_using-control-groups-version-1-with-systemd}删除持久的控制组群 {.title}
:::
如果您不再需要限制、确定或控制对进程组的硬件资源的访问，您可以使用
`systemd`{.literal} 系统和服务管理器删除持久性控制组
(`cgroup`{.literal})。
当停止或禁用服务或范围单元并删除其配置文件时，永久 `cgroup`{.literal}
就会发布。
::: orderedlist
**步骤**
1.  停止服务单元：
    ``` literallayout
    # systemctl stop .service
    ```
2.  禁用服务单元：
    ``` literallayout
    # systemctl disable .service
    ```
3.  删除相关的单元配置文件：
    ``` literallayout
    # rm /usr/lib/systemd/system/.service
    ```
4.  重新载入所有单元配置文件以使更改生效：
    ``` literallayout
    # systemctl daemon-reload
    ```
:::
::: itemizedlist
**其他资源**
-   [了解控制组群](#setting-limits-for-applications_managing-monitoring-and-updating-the-kernel.html#understanding-control-groups_setting-limits-for-applications "了解控制组群"){.link}
-   [内核资源控制器](#setting-limits-for-applications_managing-monitoring-and-updating-the-kernel.html#what-kernel-resource-controllers-are_setting-limits-for-applications "内核资源控制器"){.link}
-   `systemd.resource-control(5)`{.literal}, `cgroups(7)`{.literal}, and
    `systemd.kill(5)`{.literal} manual pages
-   [控制组群中的 systemd
    角色](#using-control-groups-version-1-with-systemd_managing-monitoring-and-updating-the-kernel.html#role-of-systemd-in-control-groups-version-1_using-control-groups-version-1-with-systemd "控制组群版本 1 中的 systemd 角色"){.link}
-   在 RHEL
    中[*[[配置基本系统设置](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/configuring_basic_system_settings/managing-system-services-with-systemctl_configuring-basic-system-settings){.link}]{.citetitle}*]{.emphasis}
:::
:::
::: section
::: titlepage
# []{#using-control-groups-version-1-with-systemd_managing-monitoring-and-updating-the-kernel.html#listing-systemd_units_using-control-groups-version-1-with-systemd}列出 systemd 单元 {.title}
:::
以下流程描述了如何使用 `systemd`{.literal} 系统和服务管理器列出其单元。
::: itemizedlist
**步骤**
-   要列出系统中的所有活跃单元，执行 `# systemctl`{.literal}
    命令，终端将返回类似以下示例的输出：
    ``` literallayout
    # systemctl
    UNIT                                                LOAD   ACTIVE SUB       DESCRIPTION
    …​
    init.scope                                          loaded active running   System and Service Manager
    session-2.scope                                     loaded active running   Session 2 of user jdoe
    abrt-ccpp.service                                   loaded active exited    Install ABRT coredump hook
    abrt-oops.service                                   loaded active running   ABRT kernel log watcher
    abrt-vmcore.service                                 loaded active exited    Harvest vmcores for ABRT
    abrt-xorg.service                                   loaded active running   ABRT Xorg log watcher
    …​
    -.slice                                             loaded active active    Root Slice
    machine.slice                                       loaded active active    Virtual Machine and Container Slice system-getty.slice                                                                       loaded active active    system-getty.slice
    system-lvm2\x2dpvscan.slice                         loaded active active    system-lvm2\x2dpvscan.slice
    system-sshd\x2dkeygen.slice                         loaded active active    system-sshd\x2dkeygen.slice
    system-systemd\x2dhibernate\x2dresume.slice         loaded active active    system-systemd\x2dhibernate\x2dresume>
    system-user\x2druntime\x2ddir.slice                 loaded active active    system-user\x2druntime\x2ddir.slice
    system.slice                                        loaded active active    System Slice
    user-1000.slice                                     loaded active active    User Slice of UID 1000
    user-42.slice                                       loaded active active    User Slice of UID 42
    user.slice                                          loaded active active    User and Session Slice
    …​
    ```
    ::: itemizedlist
    -   `UNIT`{.literal} -
        反映控制组群层次结构中的单元位置的单元名称。与资源控制相关的单元是
        [*slice*]{.emphasis}、[*scope*]{.emphasis} 和
        [*service*]{.emphasis}
    -   `LOAD`{.literal} -
        指示单元配置文件是否已正确加载。如果单元文件加载失败，该字段包含状态
        [*error*]{.emphasis} 而不是
        [*loaded*]{.emphasis}。其他单元负载状态为： [*stub*]{.emphasis}
        、[*merge*]{.emphasis} 和 [*masked*]{.emphasis}。
    -   `ACTIVE`{.literal} - 高级单元激活状态，即 `SUB`{.literal}
        的一般化。
    -   `SUB`{.literal} -
        低级单元激活状态。可能的值的范围取决于单元类型。
    -   `DESCRIPTION`{.literal} - 单元内容和功能的描述。
    :::
-   要列出不活跃单元，请执行：
    ``` literallayout
    # systemctl --all
    ```
-   要限制输出中的信息量，请执行：
    ``` literallayout
    # systemctl --type service,masked
    ```
    `--type`{.literal} 选项需要一个以逗号分隔的单元类型列表，如
    [*service*]{.emphasis} 和 [*slice*]{.emphasis}，或者单元载入状态，如
    [*loaded*]{.emphasis} 和 [*masked*]{.emphasis}。
:::
::: itemizedlist
**其他资源**
-   在 RHEL
    中[*[[配置基本系统设置](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/configuring_basic_system_settings/managing-system-services-with-systemctl_configuring-basic-system-settings){.link}]{.citetitle}*]{.emphasis}
:::
:::
::: section
::: titlepage
# []{#using-control-groups-version-1-with-systemd_managing-monitoring-and-updating-the-kernel.html#viewing-a-control-group-version-1-hierarchy_using-control-groups-version-1-with-systemd}查看控制组群版本 1 层次结构 {.title}
:::
以下流程描述了如何显示控制组 (`cgroup`{.literal}) 层次结构和在特定
`cgroup`{.literal} 中运行的进程。
::: itemizedlist
**步骤**
-   要在系统中显示整个 `cgroups`{.literal} 层次结构，请执行
    `# systemd-cgls`{.literal} ：
    ``` literallayout
    # systemd-cgls
    Control group /:
    -.slice
    ├─user.slice
    │ ├─user-42.slice
    │ │ ├─session-c1.scope
    │ │ │ ├─ 965 gdm-session-worker [pam/gdm-launch-environment]
    │ │ │ ├─1040 /usr/libexec/gdm-x-session gnome-session --autostart /usr/share/gdm/greeter/autostart
    …​
    ├─init.scope
    │ └─1 /usr/lib/systemd/systemd --switched-root --system --deserialize 18
    └─system.slice
      …​
      ├─example.service
      │ ├─6882 /bin/bash /home/jdoe/example.sh
      │ └─6902 sleep 1
      ├─systemd-journald.service
        └─629 /usr/lib/systemd/systemd-journald
      …​
    ```
    示例输出返回整个 `cgroups`{.literal} 层次结构，其中最高级别由
    [*slices*]{.emphasis} 组成。
-   要显示根据资源控制器过滤的 `cgroups`{.literal} 层次结构，执行
    `# systemd-cgls `{.literal}：
    ``` literallayout
    # systemd-cgls memory
    Controller memory; Control group /:
    ├─1 /usr/lib/systemd/systemd --switched-root --system --deserialize 18
    ├─user.slice
    │ ├─user-42.slice
    │ │ ├─session-c1.scope
    │ │ │ ├─ 965 gdm-session-worker [pam/gdm-launch-environment]
    …​
    └─system.slice
      |
      …​
      ├─chronyd.service
      │ └─844 /usr/sbin/chronyd
      ├─example.service
      │ ├─8914 /bin/bash /home/jdoe/example.sh
      │ └─8916 sleep 1
      …​
    ```
    以上命令的输出示例列出了与所选控制器交互的服务。
-   要显示特定单元及其 `cgroups`{.literal}
    层次结构部分的详细信息，请执行
    `# systemctl status `{.literal}：
    ``` literallayout
    # systemctl status example.service
    ● example.service - My example service
       Loaded: loaded (/usr/lib/systemd/system/example.service; enabled; vendor preset: disabled)
       Active: active (running) since Tue 2019-04-16 12:12:39 CEST; 3s ago
     Main PID: 17737 (bash)
        Tasks: 2 (limit: 11522)
       Memory: 496.0K (limit: 1.5M)
       CGroup: /system.slice/example.service
               ├─17737 /bin/bash /home/jdoe/example.sh
               └─17743 sleep 1
    Apr 16 12:12:39 redhat systemd[1]: Started My example service.
    Apr 16 12:12:39 redhat bash[17737]: The current time is Tue Apr 16 12:12:39 CEST 2019
    Apr 16 12:12:40 redhat bash[17737]: The current time is Tue Apr 16 12:12:40 CEST 2019
    ```
:::
::: itemizedlist
**其他资源**
-   [内核资源控制器](#setting-limits-for-applications_managing-monitoring-and-updating-the-kernel.html#what-kernel-resource-controllers-are_setting-limits-for-applications "内核资源控制器"){.link}
-   `systemd.resource-control(5)`{.literal}, `cgroups(7)`{.literal}
    manual pages
:::
:::
::: section
::: titlepage
# []{#using-control-groups-version-1-with-systemd_managing-monitoring-and-updating-the-kernel.html#viewing-resource-controllers_using-control-groups-version-1-with-systemd}查看资源控制器 {.title}