### 身份验证与会话管理

当用户登录网站时，身份验证通常只需进行一次。成功验证后，将为用户建立一个网络会话（详见会话管理）。对于高风险操作，如银行转账，系统可能会要求进一步的身份验证，例如通过向用户的注册电话号码发送六位数验证码来确认身份。

认证不仅在公司外部重要，在内部也同样关键。即使攻击者突破了防火墙，也不应能够自由访问内部应用程序。此外，权限分离原则意味着拥有特定账户的人员不应能修改代码库或工资单等敏感信息。

### 审计要点

审查执行身份验证功能的代码模块时，需注意以下几点：

- **安全的登录页面**：确保登录页面仅在顶级域名上可用，并且表单提交必须通过 HTTPS 协议，以防止中间人攻击。
- **用户名不区分大小写**：使用电子邮件地址作为用户名时，确保其不区分大小写，避免因大小写不同而引起的混淆。
- **错误消息的安全性**：失败的登录尝试不应泄露过多信息，比如提示用户名有效但密码错误，这有助于攻击者猜测有效的用户名。
- **密码处理**：所有字符都应包含在密码中，且无效密码不应被记录，以免泄露给其他站点造成风险。
- **密码强度**：推荐使用至少10个字符以上的密码，并鼓励使用复杂字符组合，具体请参阅 OWASP 认证备忘单。
- **防止暴力破解**：通过实施临时帐户锁定或限速登录机制来抵御此类攻击。
- **定期更改密码**：对于内部系统，强制用户定期更新密码，并存储历史密码哈希值以防止重复使用旧密码。
- **密码重置功能**：确保此功能不会被滥用，如通过不断输入用户名触发垃圾邮件发送。
- **加密技术**：采用正确的加密方法存储密码至关重要，请参考密码存储备忘单获取更多细节。

### SSL/TLS 使用

审计 .NET MVC 应用程序时，确保所有网页而非仅是登录页面均使用 SSL 进行数据传输。同时保护会话 cookies，它们作为用户凭证非常重要。在 `global.asax` 文件中的 `RegisterGlobalFilters` 方法里添加 `RequireHttpsAttribute()` 属性可以保证应用程序运行于 SSL/TLS 环境下。

### 多因素身份验证 (MFA)

针对高风险操作建议启用 MFA，它结合了多个身份验证因素：
- 用户知道的信息（如密码）
- 用户拥有的物品（如手机）
- 用户的生物特征（如指纹）

如果客户端位于受控环境中，则可考虑采用双向 SSL 认证，增强安全性。

### 忘记密码流程

设计忘记密码功能时需谨慎，确保整个过程既方便又安全。一般做法包括通过电子邮件或短信发送链接让用户设置新密码，并要求用户先验证现有凭据。还需设定适当的超时限制，以防未授权更改。

### 验证码(CAPTCHA)

验证码是一种用来区分人类与机器的有效工具。审核验证码实现时应注意：
- 限制尝试次数
- 避免静态模式
- 利用 HMAC 提升安全性
- 文字验证码的设计要足够随机和难以预测

### 带外通信

带外通信是指应用通过非 HTTP 渠道（如短信、电话、电子邮件）与用户交互的过程。这种方法常用于提高安全性，特别是在执行敏感操作时。双因素身份验证即为此类实践之一。

综上所述，正确实施上述措施能够显著提升系统的整体安全性。