---
author: Julia Evans
category: 技术
comments_data: []
count:
  commentnum: 0
  favtimes: 0
  likes: 0
  sharetimes: 0
  viewnum: 3807
date: '2022-06-23 18:00:40'
editorchoice: false
excerpt: 我曾花了两天的时间，尝试使用其他的工具来尝试搭建一个开发环境，搭到后面，我实在是心累了。相比起来，Docker Compose 就简单易用多了，我非常满意。
fromurl: https://jvns.ca/blog/2021/01/04/docker-compose-is-nice/
id: 14747
islctt: true
largepic: /data/attachment/album/202206/23/180033lpg4v4bz0bbb1719.jpg
permalink: /article-14747-1.html
pic: /data/attachment/album/202206/23/180033lpg4v4bz0bbb1719.jpg.thumb.jpg
related: []
reviewer: turbokernel
selector: lujun9972
summary: 我曾花了两天的时间，尝试使用其他的工具来尝试搭建一个开发环境，搭到后面，我实在是心累了。相比起来，Docker Compose 就简单易用多了，我非常满意。
tags:
- Docker
- 开发环境
thumb: false
title: Docker Compose：搭建开发环境的好方式
titlepic: true
translator: lkxed
updated: '2022-06-23 18:00:40'
---
![](/data/attachment/album/202206/23/180033lpg4v4bz0bbb1719.jpg)
大家好！我又写了一篇关于 [我最喜欢的电脑工具](https://jvns.ca/#cool-computer-tools---features---ideas) 的文章。这一篇讲的是 Docker Compose！
本文主要就是讲一讲我对 Docker Compose 有多么满意啦（不讨论它的缺点）！咳咳，因为它总能够完成它该做的，并且似乎总能有效，更棒的是，它的使用还非常简单。另外，在本文中，我只讨论我是如何用 Docker Compose 来搭建开发环境的，而不涉及它在生产中的使用。
最近，我考虑了很多关于这种个人开发环境的搭建方式，原因是，我现在把所有的计算工作都搬到了一个私有云上，大概 20 美元/月的样子。这样一来，我就不用在工作的时候花时间去思考应该如何管理几千台 AWS 服务器了。
在此之前，我曾花了两天的时间，尝试使用其他的工具来尝试搭建一个开发环境，搭到后面，我实在是心累了。相比起来，Docker Compose 就简单易用多了，我非常满意。于是，我和妹妹分享了我的 `docker-compose` 使用经历，她略显惊讶：“是吧！你也觉得 Docker Compose 真棒对吧！” 嗯，我觉得我应该写一篇博文把过程记录下来，于是就有了你们看到的这篇文章。
### 我们的目标是：搭建一个开发环境
目前，我正在编写一个 Ruby on Rails 服务（它是一个计算机“调试”游戏的后端）。在我的生产服务器上，我安装了：
* 一个 Nginx 服务器
* 一个 Rails 服务
* 一个 Go 服务（使用了 [gotty](https://github.com/yudai/gotty/) 来代理一些 SSH 连接）
* 一个 Postgres 数据库
在本地搭建 Rails 服务非常简单，用不着容器（我只需要安装 Postgres 和 Ruby 就行了，小菜一碟）。但是，我还想要把匹配 `/proxy/*` 的请求的发送到 Go 服务，其他所有请求都发送到 Rails 服务，所以需要借助 Nginx。问题来了，在笔记本电脑上安装 Nginx 对我来说太麻烦了。
是时候使用 `docker-compose` 了！
### docker-compose 允许你运行一组 Docker 容器
基本上，Docker Compose 的作用就是允许你运行一组可以互相通信 Docker 容器。
你可以在一个叫做 `docker-compose.yml` 的文件中，配置你所有的容器。我在下方将贴上我为这个服务编写的 `docker-compose.yml` 文件（完整内容），因为我觉得它真的很简洁、直接！
```
version: "3.3"
services:
  db:
    image: postgres
    volumes:
      - ./tmp/db:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: password # yes I set the password to 'password'
  go_server:
    # todo: use a smaller image at some point, we don't need all of ubuntu to run a static go binary
    image: ubuntu
    command: /app/go_proxy/server
    volumes:
      - .:/app
  rails_server:
    build: docker/rails
    command: bash -c "rm -f tmp/pids/server.pid && source secrets.sh && bundle exec rails s -p 3000 -b '0.0.0.0'"
    volumes:
      - .:/app
  web:
    build: docker/nginx
    ports:
      - "8777:80" # this exposes port 8777 on my laptop
```
这个配置包含了两种容器。对于前面两个容器，我直接使用了现有的镜像（`image: postgres` 和 `image: ubuntu`）。对于后面两个容器，我不得不构建一个自定义容器镜像，其中， `build: docker/rails` 的作用就是告诉 Docker Compose，它应该使用 `docker/rails/Dockerfile` 来构建一个自定义容器。
我需要允许我的 Rails 服务访问一些 API 密钥和其他东西，因此，我使用了 `source secrets.sh`，它的作用就是在环境变量中预设一组密钥。
### 如何启动所有服务：先 “build” 后 “up”
我一直都是先运行 `docker-compose build` 来构建容器，然后再运行 `docker-compose up` 把所有服务启动起来。
你可以在 yaml 文件中设置 `depends_on`，从而进行更多启动容器的控制。不过，对于我的这些服务而言，启动顺序并不重要，所以我没有设置它。
### 网络互通也非常简单
容器之间的互通也是一件很重要的事情。Docker Compose 让这件事变得超级简单！假设我有一个 Rails 服务正在名为 `rails_server` 的容器中运行，端口是 3000，那么我就可以通过 `http://rails_server:3000` 来访问该服务。就是这么简单！
以下代码片段截取自我的 Nginx 配置文件，它是根据我的使用需求配置的（我删除了许多 `proxy_set_headers` 行，让它看起来更清楚）：
```
location ~ /proxy.* {
  proxy_pass http://go_server:8080;
}
location @app {
  proxy_pass http://rails_server:3000;
}
```
或者，你可以参考如下代码片段，它截取自我的 Rails 项目的数据库配置，我在其中使用了数据库容器的名称（`db`）：
```
development:
  <<: *default
  database: myproject_development
  host: db # <-------- 它会被“神奇地”解析为数据库容器的 IP 地址
  username: postgres
  password: password
```
至于 `rails_server` 究竟是如何被解析成一个 IP 地址的，我还真有点儿好奇。貌似是 Docker 在我的计算机上运行了一个 DNS 服务来解析这些名字。下面是一些 DNS 查询记录，我们可以看到，每个容器都有它自己的 IP 地址：
```
$ dig +short @127.0.0.11 rails_server
172.18.0.2
$ dig +short @127.0.0.11 db
172.18.0.3
$ dig +short @127.0.0.11 web
172.18.0.4
$ dig +short @127.0.0.11 go_server
172.18.0.5
```
### 是谁在运行这个 DNS 服务？