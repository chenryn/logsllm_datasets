---
author: Himanshu Arora
category: 软件开发
comments_data:
- date: '2016-05-19 10:10:16'
  message: 可以
  postip: 60.175.130.2
  username: hello_linux [Firefox 45.0|Windows 7]
count:
  commentnum: 1
  favtimes: 7
  likes: 0
  sharetimes: 0
  viewnum: 10048
date: '2016-05-19 09:36:00'
editorchoice: false
excerpt: 在这些工具集中，我评估了五款支持 Linux 的、流行的、自由开源的内存调试器： Dmalloc 、 Electric Fence 、 Memcheck
  、 Memwatch 以及 Mtrace 。
fromurl: http://www.computerworld.com/article/3003957/linux/review-5-memory-debuggers-for-linux-coding.html
id: 7354
islctt: true
largepic: /data/attachment/album/201605/18/094209j2djdcataqiri0cz.jpg
permalink: /article-7354-1.html
pic: /data/attachment/album/201605/18/094209j2djdcataqiri0cz.jpg.thumb.jpg
related: []
reviewer: ''
selector: ''
summary: 在这些工具集中，我评估了五款支持 Linux 的、流行的、自由开源的内存调试器： Dmalloc 、 Electric Fence 、 Memcheck
  、 Memwatch 以及 Mtrace 。
tags:
- 调试
- Mtrace
- Dmalloc
- Memwatch
- Electric Fence
- gdb
thumb: false
title: 点评五款用于 Linux 编程的内存调试器
titlepic: false
translator: soooogreen
updated: '2016-05-19 09:36:00'
---
![](/data/attachment/album/201605/18/094209j2djdcataqiri0cz.jpg)
> 
> Credit: [Moini](https://openclipart.org/detail/132427/penguin-admin)
> 
> 
> 
作为一个程序员，我知道我肯定会犯错误——怎么可能不犯错！程序员也是人啊。有的错误能在编码过程中及时发现，而有些却得等到软件测试了才能显露出来。然而，还有一类错误并不能在这两个阶段被解决，这就导致软件不能正常运行，甚至是提前终止。
如果你还没猜出是那种错误，我说的就是和内存相关的错误。手动调试这些错误不仅耗时，而且很难发现并纠正。值得一提的是，这种错误很常见，特别是在用 C/C++ 这类允许[手动管理内存](https://en.wikipedia.org/wiki/Manual_memory_management)的语言编写的软件里。
幸运的是，现在有一些编程工具能够帮你在软件程序中找到这些和内存相关的错误。在这些工具集中，我评估了五款支持 Linux 的、流行的、自由开源的内存调试器： Dmalloc 、 Electric Fence 、 Memcheck 、 Memwatch 以及 Mtrace 。在日常编码中，我已经用过这五个调试器了，所以这些评估是建立在我的实际体验之上的。
### [Dmalloc](http://dmalloc.com/)
**开发者**：Gray Watson
**评估版本**：5.5.2
**支持的 Linux 版本**：所有种类
**许可**： CC 3.0
Dmalloc 是 Gray Watson 开发的一款内存调试工具。它是作为库来实现的，封装了标准内存管理函数如`malloc()` , `calloc()` , `free()`等，使程序员得以检测出有问题的代码。
![cw dmalloc output](/data/attachment/album/201605/18/094214qz6e686z61u4689t.png)
*Dmalloc*
如同工具的网页所示，这个调试器提供的特性包括内存泄漏跟踪、   重复释放内存    （    double free    ） 错误跟踪、以及   越界写入    （    fence-post write    ） 检测。其它特性包括报告错误的文件/行号、通用的数据统计记录。
#### 更新内容
5.5.2 版本是一个 [bug 修正发行版](http://dmalloc.com/releases/notes/dmalloc-5.5.2.html)，修复了几个有关构建和安装的问题。
#### 有何优点
Dmalloc 最大的优点就是高度可配置性。比如说，你可以配置它以支持 C++ 程序和多线程应用。 Dmalloc 还提供一个有用的功能：运行时可配置，这表示在 Dmalloc 执行时，可以轻易地启用或者禁用它提供的一些特性。
你还可以配合 [GNU Project Debugger (GDB)](http://www.gnu.org/software/gdb/)来使用 Dmalloc ，只需要将`dmalloc.gdb`文件（位于 Dmalloc 源码包中的 contrib 子目录里）的内容添加到你的主目录中的`.gdbinit`文件里即可。
另外一个让我对 Dmalloc 爱不释手的优点是它有大量的资料文献。前往官网的 [Documentation 栏目](http://dmalloc.com/docs/)，可以获取所有关于如何下载、安装、运行、怎样使用库，和 Dmalloc 所提供特性的细节描述，及其生成的输出文件的解释。其中还有一个章节介绍了一般问题的解决方法。
#### 注意事项
跟 Mtrace 一样， Dmalloc 需要程序员改动他们的源代码。比如说你可以（也是必须的）添加头文件`dmalloc.h`，工具就能汇报产生问题的调用的文件或行号。这个功能非常有用，因为它节省了调试的时间。
除此之外，还需要在编译你的程序时，把 Dmalloc 库（编译 Dmalloc 源码包时产生的）链接进去。
然而，还有点更麻烦的事，需要设置一个环境变量，命名为`DMALLOC_OPTION`，以供工具在运行时配置内存调试特性，比如定义输出文件的路径。可以手动为该环境变量分配一个值，不过初学者可能会觉得这个过程有点困难，因为该值的一部分用来表示要启用的 Dmalloc 特性——以十六进制值的累加值表示。[这里](http://dmalloc.com/docs/latest/online/dmalloc_26.html#SEC32)有详细介绍。
一个比较简单方法设置这个环境变量是使用 [Dmalloc 实用指令](http://dmalloc.com/docs/latest/online/dmalloc_23.html#SEC29)，这是专为这个目的设计的方法。
#### 总结
Dmalloc 真正的优势在于它的可配置选项。而且高度可移植，曾经成功移植到多种操作系统如 AIX 、 BSD/OS 、 DG/UX 、 Free/Net/OpenBSD 、 GNU/Hurd 、 HPUX 、 Irix 、 Linux 、 MS-DOG 、 NeXT 、 OSF 、 SCO 、 Solaris 、 SunOS 、 Ultrix 、 Unixware 甚至 Unicos（运行在 Cray T3E 主机上）。虽然使用 Dmalloc 需要学习许多知识，但是它所提供的特性值得为之付出。
### [Electric Fence](https://launchpad.net/ubuntu/+source/electric-fence/2.2.3)
**开发者**：Bruce Perens
**评估版本**：2.2.3
**支持的 Linux 版本**：所有种类
**许可**：GPL v2
Electric Fence 是 Bruce Perens 开发的一款内存调试工具，它以库的形式实现，你的程序需要链接它。Electric Fence 能检测出[堆](https://en.wikipedia.org/wiki/Memory_management#Dynamic_memory_allocation)内存溢出和访问已经释放的内存。
![cw electric fence output](/data/attachment/album/201605/18/094218u1992euhe2wuwh8c.png)
*Electric Fence*
顾名思义， Electric Fence 在每个所申请的缓存边界建立了虚拟围栏，这样一来任何非法的内存访问都会导致[段错误](https://en.wikipedia.org/wiki/Segmentation_fault)。这个调试工具同时支持 C 和 C++ 程序。
#### 更新内容
2.2.3 版本修复了工具的构建系统，使得 `-fno-builtin-malloc` 选项能真正传给 [GNU Compiler Collection (GCC)](https://en.wikipedia.org/wiki/GNU_Compiler_Collection)。
#### 有何优点
我喜欢 Electric Fence 的首要一点是它不同于 Memwatch 、 Dmalloc 和 Mtrace ，不需要对你的源码做任何的改动，你只需要在编译的时候把它的库链接进你的程序即可。
其次， Electric Fence 的实现保证了产生越界访问的第一个指令就会引起段错误。这比在后面再发现问题要好多了。
不管是否有检测出错误， Electric Fence 都会在输出产生版权信息。这一点非常有用，由此可以确定你所运行的程序已经启用了 Electric Fence 。
#### 注意事项
另一方面，我对 Electric Fence 真正念念不忘的是它检测内存泄漏的能力。内存泄漏是 C/C++ 软件最常见也是最不容易发现的问题之一。不过， Electric Fence 不能检测出栈溢出，而且也不是线程安全的。
由于 Electric Fence 会在用户分配内存区的前后分配禁止访问的虚拟内存页，如果你过多的进行动态内存分配，将会导致你的程序消耗大量的额外内存。
Electric Fence 还有一个局限是不能明确指出错误代码所在的行号。它所能做只是在检测到内存相关错误时产生段错误。想要定位错误的行号，需要借助 [GDB](http://www.gnu.org/software/gdb/)这样的调试工具来调试启用了 Electric Fence 的程序。
最后一点，尽管 Electric Fence 能检测出大部分的缓冲区溢出，有一个例外是，如果所申请的缓冲区大小不是系统字长的倍数，这时候溢出（即使只有几个字节）就不能被检测出来。
#### 总结
尽管局限性较大， Electric Fence 的易用性仍然是加分项。只要链接一次程序， Electric Fence 就可以在监测出内存相关问题的时候报警。不过，如同前面所说， Electric Fence 需要配合像 GDB 这样的源码调试器使用。
### [Memcheck](http://valgrind.org/docs/manual/mc-manual.html)
**开发者**：[Valgrind 开发团队](http://valgrind.org/info/developers.html)
**评估版本**：3.10.1
**支持的 Linux 发行版**：所有种类
**许可**：GPL
[Valgrind](http://valgrind.org/) 是一个提供好几款调试和分析 Linux 程序性能的工具的套件。虽然 Valgrind 能和不同语言——Java 、 Perl 、 Python 、 Assembly code 、 ortran 、 Ada 等——编写的程序一起工作，但是它主要还是针对使用 C/C++ 所编写的程序。
Memcheck ，一款内存错误检测器，是其中最受欢迎的工具。它能够检测出如内存泄漏、无效的内存访问、未定义变量的使用以及堆内存分配和释放相关的问题等诸多问题。