(a) Bytes in/out per client
(b) Incoming bandwidth
(c) Outgoing bandwidth
Figure 7: Network activity on server; same legend on (b) and (c)
)
W
m
(
n
o
i
t
p
m
u
s
n
o
C
r
e
w
o
P
 700
 600
 500
 400
 300
 200
 100
 0
Popular Twitter Client
Twitsper
 0
 10
 20
 40
 30
Time(s)
 50
 60
 70
Figure 8: Comparison of power con-
sumption
Interface
Twitsper
LCD
CPU
3G
13325
755
4812
Other
10127
1281
8232
Figure 9: Total energy con-
sumption (mJ)
Twitsper (f=0.25)
TCM (f=0.25)
Twitsper (f=0.1)
TCM (f=0.1)
)
J
(
y
a
d
r
e
p
t
n
e
p
s
y
g
r
e
n
E
 2.06
 2.04
 2.02
 2
 1.98
 1.96
 1.94
 1.92
 1.9
 1
 2
 16
 32
 4
 8
Group Size
Figure 10: Client energy consump-
tion
data points to a disk write bottleneck where the client must wait
for an acknowledgment of the server database’s successful write.
We verify with iostat that our hard drive is used at 100% utilization
during these periods. We are currently investigating the effect of
adding more disks.
Network. Figure 7a shows the number of bytes in and out with
the TCM and Twitsper servers for a single client connection.
Each line in Figure 7a represents a single client sending one whis-
per message to a group size which is varied (x-axis). We see that
increasing the group size does not cause a large increase in the
received bytes as compared to the case with only 2 group mem-
bers. This illustrates that the overhead increase with recipient group
size (which causes either the receipt of more message IDs with the
Twitsper server or the receipt of more recipient user IDs with
the TCM server) is very minor when compared to the resources
consumed by the SSL connection between the client and the server.
The only additional overhead with the TCM server is the transfer of
the actual whisper messages from the client; this manifests as the
constant offset between these two curves. Since the Twitsper
server has to only send a conﬁrmation to the user that its whisper
meta data was received correctly, the bytes out is independent of
the recipient group size (all meta data corresponding to a whisper
is sent as a single atomic block). In contrast, the burden of having
to send whispers to each recipient (as a separate Direct Message)
is on the TCM server. Increasing group size (x-axis) increases the
number of Direct Messages sent to Twitter and this quickly results
in an overshoot of the single client SSL connection overhead.
Figures 7b and 7c show the bandwidth consumed at the server as
the number of bytes in and out per second. In Figure 7b, we see that
the Twitsper server does not experience a reduction in transmis-
sion rate until it hits 128 clients and a group size of 16. At this
point, we hit a disk bottleneck in writing client message metadata
to our database. For the TCM server, we see a rate reduction even
in the 16 clients case as we increase the group size; this is due to
the latency incurred in the message exchange with Twitter. We hit
a similar hard disk bottleneck at 128 concurrent client connections
with the TCM server, as similar metadata needs to be stored with
both server setups.
Comparing Twitsper and TCM clients: While Twitsper
offers higher CPU utilization as well as lower bandwidth require-
ments, the energy (power∗time) consumption at the client is a key
factor in ensuring adoption of the service. To evaluate its client side
energy performance, we measure the amount of energy needed to
make a single post with Twitsper to Twitter and to send a mes-
sage to our server. We also use the PowerTutor [12] application
to measure the power consumed at the client. We made 100 posts
back to back and measure the average energy consumed.
Figure 10 compares TCM and Twitsper based on the energy
consumed on a phone. The ﬁgure shows the energy consumption
per day on an Android phone, for an average Twitter user who sends
10 messages per day and has 200 followers [9]. Our experiments
suggest that the best implementation depends on the fraction of a
user’s messages that are private (denoted by f) and the typical size
of a list to which private messages are posted. The energy con-
sumption with Twitsper is signiﬁcantly greater than that with
the TCM client when f is large or the group sizes are big. How-
ever, since we expect private postings to constitute a small frac-
tion of all information sharing and that such communication will
typically be restricted to small groups, energy consumption over-
head with Twitsper is minimal. Even in the scenarios where
client-side energy consumption increases, the energy consumed is
still within reason, e.g., the energy consumed per client across var-
ious scenarios is within the range of 1.9 J to 2.5 J, which is less
than 0.005% of the energy capacity of typical batteries (10 KJ,
as shown in [12]). Further, as we show next, the majority of the
energy consumed in practice is by the user’s interaction with the
phone’s display, whereas the energy we consider here is only that
required to simply send messages, and does not include displaying
and drawing graphics on the screen.
Comparison with another popular Twitter client: We next
compare the power consumption of Twitsper with that of a pop-
ular Twitter client (TweetCaster[18]), which supports the default
privacy options on Twitter. We begin the test after both clients
had been initialized and had run for 15 seconds. We then send
a message from each of the clients and refresh the home screen;
there was at least one update to the home screen. As seen from
the traces of the power consumed in Figure 8, Twitsper’s power
consumption is comparable. This shows that Twitsper only im-
poses energy requirements on the mobile device that are compara-
ble to other Twitter clients. We observe that there is no noticeable
loss in performance since both clients were made to carry out the
same tasks functionally.
In the above test, even though the screen was kept on for as lit-
tle a time as possible (less than 10% of the total time) the LCD
accounted for close to 50% of the aggregate energy consumed, as
seen from Figure 9. Referring the reader back to Figure 10, we see
that as the group size increases there is only a marginal increase in
the energy consumption associated with the sending of messages.
Even if 25% of the messages are whispers and the average group
size is 32 (which we believe is quite large), the energy consumed
only increases from 1.92 J (for a single tweet) to 2.05 J—an in-
crease of less than 15%; given that the LCD power consumption
dominates, this is not a signiﬁcant energy cost.
417
9. CONCLUSIONS
Today, for users locked in to hugely popular OSNs, the primary
hope for improved privacy controls is to coerce OSN providers via
the media or via organizations such as EFF and FTC. In this paper,
to achieve privacy without explicit OSN support, we design and
implement Twitsper to enable ﬁne-grained private group mes-
saging on Twitter, while ensuring that Twitter’s commercial inter-
ests are preserved. By building Twitsper as a wrapper around
Twitter, we show that it is possible to offer better privacy controls
on existing OSNs without waiting for the OSN provider to do so.
Next, we plan to implement ﬁne-grained privacy controls on
other OSNs such as Facebook and Google+ as well, using a sim-
ilar approach of building on the API exported by the OSN. Given
the warm feedback received by Twitsper, we hope that the adop-
tion of Twitsper and its follow-ons for other OSNs will persuade
OSN providers themselves to offer ﬁne-grained privacy controls to
their users.
References
[1] Android operating system. http://www.android.com/.
[2] Comscore: Android is now highest-selling smartphone OS.
http://bit.ly/euR4Yb.
[3] DiSo project. http://diso-project.org/.
[4] Facebook trafﬁc reaches nearly 375 million monthly active
users worldwide, led by us. http://bit.ly/c0Z3UQ.
[5] Fips 197, adavanced encryption standard. 1.usa.gov/8Y4V6U.
[6] Ganglia. http://ganglia.sourceforge.net/.
[7] Google Plus numbers belie social struggles. http://bit.ly/pPIwDr.
[8] Grouptweet. http://www.grouptweet.com/.
[9] New data on Twitter’s users and engagement.
http://bit.ly/
cu8P2s.
[10] PKCS 5: Password-based cryptography speciﬁcation version
2.0. http://tools.ietf.org/html/rfc2898.
[11] Please rob me. http://www.pleaserobme.com/.
[12] Powertutor. http://bit.ly/hVaXh1.
[13] Priv(ate)ly. http://priv.ly/.
[14] Retweet this if you want non-followers replies ﬁxed.
//bit.ly/YwLYw.
http:
[15] Secure hash standard. 1.usa.gov/cISXx3.
[16] Social networks offer a way to narrow the ﬁeld of friends.
http://nyti.ms/j7dOsC.
[17] Tweet this milestone: Twitter passes MySpace. http://on.wsj.
com/dc25gK.
[18] Tweetcaster. http://tweetcaster.com/.
[19] Tweetworks. http://www.tweetworks.com.
[20] Twitter Groups! http://jazzychad.net/twgroups/.
[21] Twitter reveals it has 100m active users. bit.ly/nJoRuk.
[22] Twitter suspends twidroyd & UberTwitter over privacy
claims. http://bit.ly/hRcZ1w.
[23] R. Baden, A. Bender, N. Spring, B. Bhattacharjee, and
D. Starin. Persona: An online social network with user-
deﬁned privacy. In SIGCOMM, 2009.
[24] F. Beato, M. Kohlweiss, and K. Wouters. Scramble! Your
Social Network Data. 2011.
[25] D. Boneh and M. Hamburg. Generalized identity based and
broadcast encryption schemes. In ASIACRYPT, 2008.
[26] S. Buchegger and A. Datta. A case for P2P infrastructure
418
for social networks- opportunities and challenges. In WONS,
2009.
[27] Y. Dodis and N. Fazio. Public-key broadcast encryption
for stateless receivers. In ACM Digital Rights Management,
2002.
[28] G. T. Emiliano De Cristofaro, Claudio Soriente and
A. Williams. Hummingbird: Privacy at the time of twit-
ter. Cryptology ePrint Archive, Report 2011/640, 2011.
bit.ly/SYBEzK.
[29] W. Enck, P. Gilbert, B.-G. Chun, L. P. Cox, J. Jung, P. Mc-
Daniel, and A. N. Sheth. TaintDroid: An information-ﬂow
tracking system for realtime privacy monitoring on smart-
phones. In OSDI, 2010.
[30] D. A. Grier and M. Campbell. A social history of bitnet and
listserv, 1985-1991. IEEE Annals of the History of Comput-
ing, 2000.
[31] S. Guha, K. Tang, and P. Francis. NOYB: Privacy in online
social networks. In WOSN, 2008.
[32] J. Y. Hwang, D. H. Lee, and J. Lim. Generic transformation
for scalable broadcast encryption scheme. In CRYPTO, 2005.
[33] S. Jahid, S. Nilizadeh, P. Mittal, N. Borisov, and A. Kapadia.
DECENT: A decentralized architecture for enforcing privacy
in online social networks. In IEEE SESOC, 2012.
[34] B. Krishnamurthy and C. Willis. Characterizing privacy in
online social networks. In WOSN, 2008.
[35] B. Krishnamurthy and C. Willis. On the leakage of personally
identiﬁable information via online social networks. In WOSN,
2009.
[36] S. J. Liebowitz and S. E. Margolis. Network externality: An
uncommon tragedy. The Journal of Economic Perspectives,
1994.
[37] D. Liu, A. Shakimov, R. Caceres, A. Varshavsky, and L. P.
Cox. Conﬁdant: Protecting OSN Data without Locking it Up.
In Middleware, 2011.
[38] D. Lubicz and T. Sirvent. Attribute-based broadcast encryp-
tion scheme made efﬁcient. In AFRICACRYPT, 2008.
[39] A. Narayanan, N. Thiagarajan, M. Lakhani, M. Hamburg, and
D. Boneh. Location privacy via private proximity testing. In
NDSS, 2011.
[40] R. A. Popa, H. Balakrishnan, and A. J. Blumberg. VPriv:
In
Protecting privacy in location-based vehicular services.
USENIX Security Symposium, 2009.
[41] M. K. Reiter and A. D. Rubin. Crowds: Anonymity for Web
transactions. ACM TISSEC, 1998.
[42] A. Shakimov, H. Lim, R. CÃ ˛aceres, L. P. Cox, K. Li, D. Liu,
and A. Varshavsky. Vis-ã-Vis: Privacy-preserving online so-
cial networks via virtual individual servers. In COMSNETS,
2011.
[43] I. Singh, M. Butkiewicz, H. V. Madhyastha, S. V. Krishna-
murthy, and S. Addepalli. Building a wrapper for ﬁne-grained
private group messaging on Twitter. In HotPETS, 2012.
[44] A. Tootoonchian, S. Saroiu, Y. Ganjali, and A. Wolman.
Lockr: Better privacy for social networks. In CoNEXT, 2009.
[45] C. Wilson, T. Steinbauer, G. Wang, A. Sala, H. Zheng, and
B. Y. Zhao. Privacy, availability and economics in the Polaris
mobile social network. In HotMobile, 2011.
[46] N. Zeldovich, S. B. Wickizer, and D. MaziÃ´lres. Securing
distributed systems with information ﬂow control. In NSDI,
2008.