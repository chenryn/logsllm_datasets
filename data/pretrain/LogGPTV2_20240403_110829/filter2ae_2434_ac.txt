smallbin链，此时smallbin的链接情况是smallbin:victim->stack_buf1->stack_buf2。
由于smallbin的exact
fit和fifo策略，此时申请一个victim大小的堆会直接返回bin结点bk指向的victim（bin的结构体是mchunkptr*），然后断链并修改bin的bk指针指向victim的bk节点即stack_buf1。glibc取smallbin的chunk源码如下。
此时stack_buf1的结构如下(其中0x7fffffffdfb0=stack_buf1，0x7ffff7dd4b98=smallbin，0x7fffffffdf90=stack_buf2)，即此时smallbin:stack_buf1->stack_buf2
这样此时再申请一个victim大小的堆直接取smallbin的bk指向的stack_buf1即得到相应地址处的堆，达到了任意地址分配内存的效果。
#### 1.8 overlapping_chunks
通过修改一个位于空闲链表的堆的size域可以构成一次堆重叠
过程如上。修改位于bin的p2的size域，修改后p2结构如下（p2=0x405110，选中部分为p2 data部分）
此时申请一个修改后的p2 size的堆会得到从p2位置起始的fake size大小的堆p4，如下图
#### 1.9 overlapping_chunks_2
通过堆溢出修改下一个占用态堆的size域构成一次堆重叠
shellphish给出的示例中先free掉p4（我个人感觉这一步是没有必要的，shellphish可能是出于演示的目的考虑？因为稍后可以看到我们可以观察到p5的prevsize在free(p2)后会发生变化，如果有小伙伴看到这里可以一起交流，snip3r[at]163.com）。free
p4后p5的prevsize为3f0
然后修改p2的size域为p2+p3+标志位，释放掉。此时glibc会认为p2的size域的大小包围的堆是要被释放的，会错误的修改p5的prevsize值。free
p2后p5的prevsize为bd0
此时由于物理相邻的前向堆p4处于空闲态，fake
p2会和p4合并链入largebin。然后申请2000大小的largechunk会将上述合并后的堆切割后返回p2起始的堆，从而构成一次堆重叠。
#### 1.10 house_of_force
利用topchunk分配内存的特点可以通过一次溢出覆盖topchunk的size域得到一次任意地址分配内存的效果。
首先通过一次堆溢出覆盖topchunk的size域为一个超大的整数（如-1），避免申请内存时进入mmap流程。
然后申请一个evilsize大小的堆改变topchunk的位置。evilsize的计算如下，这么计算的原因是当bin都为空时会从topchunk处取堆
修改topchunk到目标地址后在申请一次堆即可对目标地址处的内存进行改写。
#### 1.11 unsorted_bin_into_stack
通过修改位于unsortedbin的堆的size域和bk指针指向目标fakechunk，在目标地址构造fakechunk（构造size和bk指针。我们也可以不修改victim的size，malloc两次得到目标地址的fakechunk；原理都是构造fake
unsortedbin链表）可以得到一次任意地址申请内存的机会。
其中如果要伪造victim的size的话要满足check 2*SIZE_SZ (> 16 on x64) && system_mem
通过溢出修改位于unsortedbin的victim的size和bk，并构造fakechunk，最终构造出如下fake smallbin链表
在下一次申请内存时glibc遍历unsortedbin找到exact fit的堆块并返回，最终可以得到目标地址处的伪造堆。
#### 1.12 unsorted_bin_attack
通过伪造unsortbin链表进行unsortedbin attack泄露信息（libc基址）的一种方法。
方法是构造如下fake unsortedbin链表，
这样在申请得到victim后会将victim断链，从而target_addr fake
chunk的fd会指向相应的bin，进而可以泄露libc基址。（当然也可以泄露bk之类位置的其他信息，如果有的话;p）
#### 1.13 large_bin_attack
利用malloc进行unsortedbin处理时插入largebin通过修改largebin链表上的堆的bk、bk_nextsize均可以得到任意地址写的机会。
首先要申请如上图3个堆和相应的为了避免合并到topchunk的barrier（只申请barrier3应该就够用了，shellphish这么写可能是在之后复杂的申请释放中不在考虑合并到topchunk的情况），其中p1要保证是smallbin且非fastbin范围（且保证在后续申请堆时堆大小够用），p2、p3要保证是largebin范围。
（1）然后依次释放p1、p2，由于非fastbin范围的堆在释放后会首先链入unsortedbin，此时unsortedbin的情况是。（简单说就是unsortedbin:p2->p1，其中各个指针的指向如图）
（2）此时申请一个0x90大小的堆，从glibc的源码中可以看到遍历unsortedbin的过程是从bin头结点的bk指针开始遍历。这样取到的第一个堆是0x320大小的p1，p1满足0x90的申请，glibc会从p1中分割出0x90的大小，然后继续遍历unsortedbin直至遍历结束；此时得到链表的第二个堆0x400大小的p2，p2非smallbin范围且largebin为空，被链入largebin
此时unsortbin：(p1-0x90)，largebin：p2.
（3）然后释放0x400大小的p3，p3非fastbin范围被链入unsortedbin头结点（fd指向p3）。
（4）此时利用溢出或其他手段修改largebin中的p2的bk、bk_nextsize（或、且）和size。可以看到p2修改前的size为0x411，shellphish把它修改成了0x3f1，这样做是因为largebin中链接的一定范围的堆是从大到小降序排列的，修改后0x400大小的p3被链入largebin时会被链入头结点。
在做好以上的准备工作后再次申请一个0x90大小的堆，同（2）过程依然由p2分割得到堆，由于p3>修改后的p2的size，p3被链入largebin头结点。链入的过程类似unlink，类似的我们得到了一次任意地址写的机会。
#### 1.14 house_of_einherjar
利用一次off by null修改下一个占用态chunk的prev_inuse位，同时修改下一个下一个占用态chunk的prev_size值，利用top
chunk和后向合并（物理低地址）机制得到一次任意地址分配内存的机会。这种off by
null利用的前提是可以在目标地址处（最终分配内存的地址处）构造fakechunk。
了绕过双向链表完整性的检测fd、和bk均可置为fakechunk。其中设置fakechunk的prev_size和size的值是可以但没必要的。
由于占用态的堆prev_size会用来存储前一个堆的数据，所以天然的prev_size域可以修改；当存在off by
null时可以将下一个占用态堆的prev
inuse置0。我们修改a的prev_size为fake_size，b的prev_inuse为0。这时我们释放掉b，由于b和topchunk紧邻，b会和topchunk合并；同时由于b的prev_inuse为0会触发后向合并（物理低地址），glibc寻找下一个空闲堆的方式是chunk_at_offset(p,
-((long)
prevsize))，即将当前位置偏移prev_size的位置视为nextchunk，这样（b+b.prev_size）得到下一个堆位于fakechunk，合并到topchunk并最终得到新的topchunk起点为fakechunk。此时再次申请堆从topchunk处取即可得到target处的fakechunk。
这样通过反推target=b_chunk_header-fake_size得到fake_size=b_chunk_header-target。
### 2.总结
本文到这里就结束了，linux
pwn基础知识的介绍到这里也就结束了，但是glibc还在不断更新，堆管理一些细节也在不断微调，一些新的提高性能的机制如tcache也开始应用于新版本的libc，关于不断更新的新版本libc的漏洞利用方式的探索还远远没有结束。
* * *