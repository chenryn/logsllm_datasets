# 可编写脚本的负载均衡器
作者：Emil Stolarsky，DigitalOcean（原Shopify）

在面对可扩展性问题时，往往没有时间去重构整个Web服务。负责的服务可能会因超载而中断。有时，我们希望遇到的是简单的数据库查询错误或通过增加服务进程数量就能解决的问题。然而，在时间、资金和人力资源有限的情况下，该如何应对这些挑战？

幸运的是，一种新的工具——*可编写脚本的负载均衡器*，正逐渐改变我们在处理可扩展性问题时的方法，并使SRE的工作变得更加得心应手。

## 什么是可编写脚本的负载均衡器？

可编写脚本的负载均衡器是一种可以通过脚本语言（如Lua）自定义其请求/响应处理流程的代理服务器。这为基础设施团队提供了分片应用、抵御分布式拒绝服务（DDoS）攻击以及管理高流量的新途径。即使是小团队也能以创新且优雅的方式解决复杂问题。虽然向负载均衡层添加高性能自定义逻辑并非新鲜事，但在各种规模组织中实现这一功能的能力却是前所未有的。因此，可编写脚本的负载均衡器被视为改变游戏规则的关键技术之一。

## 负载均衡器的角色演变

几乎所有Web服务架构中，负载均衡器都是用户请求到达的第一个组件。它们接收客户端发送的请求（无论是HTTP还是其他协议），并将这些请求转发给后端服务器池中的一个或多个实例。除了提高系统弹性和性能外，现代负载均衡器还承担着SSL卸载、缓存及跨多台上游服务器分配流量的任务。

尽管如此，当尝试在传统负载均衡器上实施更复杂的业务逻辑时，往往会受到其配置语言限制性的阻碍。尽管像Facebook这样的大型企业已经开发出了具备应用程序感知能力的高级负载均衡器（例如Proxygen），但对大多数缺乏专门研发资源的企业而言，这样的解决方案遥不可及。

## 可编写脚本的负载均衡器的优势

与定制化和标准负载均衡器相比，可编写脚本的负载均衡器具有多项优势：
- **成本效益**：不需要投入大量时间和人力从头构建全新的负载均衡器。
- **灵活性**：能够快速适应不断变化的需求和技术环境。
- **安全性**：使用如Lua等内存安全的脚本语言可以有效避免常见的C语言编程错误。
- **易于维护**：相对于C插件，脚本代码更便于理解和调试。

## 应用案例：简化复杂场景

由于每个请求都需要经过负载均衡器，这使得它成为执行某些原本难以在应用层面实现的功能的理想位置。比如，在部署期间暂停请求以防止返回错误信息给用户；或者根据地理位置将请求导向最近的数据中心等。下面我们将探讨几个具体的应用示例：

### 分片感知路由

随着数据量的增长，单一节点可能无法容纳所有信息。这时就需要将数据分割成多个部分（称为“分片”），并分散存储于不同节点之上。如何确保请求被正确地路由到包含所需数据的分片成为一个关键问题。以下是两种常见方法及其局限性分析：

#### DNS路由

对于能够基于域名进行划分的应用程序（例如多租户系统），可以通过DNS来引导请求至正确的分片。这种方法简单直接，但由于DNS更新过程可能存在延迟，因此并不总是最理想的解决方案。

#### 应用内路由

另一种策略是让应用服务器自身决定连接哪个分片。这样做的好处在于无需依赖外部机制，但同时也会增加应用逻辑的复杂度，并可能导致性能瓶颈。

综上所述，可编写脚本的负载均衡器不仅提供了一种灵活高效的手段来解决上述挑战，同时也开启了无限可能性，让我们能够以前所未有的方式优化Web服务架构。