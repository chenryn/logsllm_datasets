### Alternative Hardware-Software Co-Designs

Alternatively, less invasive hardware-software co-designs could be explored. These designs would allow "trusted" and "untrusted" code to run on cores within different clusters (refer to Table 1) and access only slices of their respective clusters. However, such approaches would require careful consideration to account for Last-Level Cache (LLC) misses, which may generate cross-cluster traffic.

### Software-Only Anomaly Detection Techniques

Since our attacks rely on a receiver constantly missing in its private caches and performing loads from a target LLC slice, it may be feasible to develop software-only anomaly detection techniques. These techniques would use hardware performance counters to monitor bursts of load requests traveling to a single LLC slice. However, these methods would only be effective if they had low false positive rates.

### Exploitation of Linux/Xen CPU Schedulers

These techniques exploit the designs of the Linux/Xen CPU schedulers. The attacker spawns multiple threads, some of which run on the same CPU as the victim. Most of the time, these threads are in a sleep state. However, at carefully chosen times, the attacker wakes them up, causing the scheduler to interrupt the victim's execution to run the attacker's code.

### Applicability to Other CPUs

It should be possible to adapt our attacks to other CPUs using a ring interconnect. For example, we were able to replicate our methodology on a server-class Xeon Broadwell CPU, finding that the distributed ("boxcar"-based) arbitration policy is the same as observed on client-class CPUs (more details in the extended version [81]). An open question is whether our attacks can be generalized to CPUs that do not use a ring interconnect. For instance, recent server-class Intel CPUs utilize mesh interconnects [55], which consist of a 2-dimensional array of half rings. Traffic on this grid-like structure is always routed vertically first and then horizontally. More wires may make it harder for an attacker to contend with a victim. At the same time, however, they may provide the attacker with more fine-grained visibility into the segments a victim is using, but this topic merits further investigation. Finally, AMD CPUs use proprietary technologies known as Infinity Fabric/Architecture for their on-chip interconnect [19, 93]. Investigating the feasibility of our attack on these platforms requires future work. However, the techniques we use to build our contention model can be applied to these platforms as well.

### Conclusion

In this paper, we introduced side-channel attacks on the ring interconnect. We reverse-engineered the ring interconnect's protocols to reveal the conditions for two processes to incur ring contention. Using these findings, we built a covert channel with a capacity of over 4 Mbps, the largest to date for cross-core channels not relying on shared memory. We also demonstrated that the temporal trends of ring contention can be used to leak key bits from vulnerable EdDSA/RSA implementations and the timing of keystrokes typed by a user. We have disclosed our results to Intel.

### Acknowledgments

This work was partially supported by NSF grants 1954521 and 1942888, as well as by an Intel ISRA center. We thank our shepherd Yossi Oren and the anonymous reviewers for their valuable feedback. We also thank Gang Wang for his valuable suggestions on early drafts of this paper, and Ben Gras for the helpful discussions on the first side-channel proof-of-concept.

### Availability

We have open-sourced the code of all the experiments of this paper at https://github.com/FPSG-UIUC/lotr.

### References

[References remain unchanged]

---

This revised version aims to improve clarity, coherence, and professionalism. Let me know if you need any further adjustments!