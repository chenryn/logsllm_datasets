ternatively, less invasive hardware-software co-designs could
be studied that allow “trusted” and “untrusted” code to only
run on cores of different clusters (cf. Table 1), and only access
slices of different clusters. However, such approaches would
require careful consideration to account for LLC misses,
which may create trafﬁc that crosses clusters.
Finally, since our attacks rely on a receiver constantly miss-
ing in its private caches and performing loads from a tar-
get LLC slice, it may be possible to develop software-only
anomaly detection techniques that use hardware performance
counters to monitor bursts of load requests traveling to a
single LLC slice. However, these techniques would only be
useful if they had small false positive rates.
12These techniques exploit the designs of the Linux/Xen CPU schedulers.
The attacker spawns multiple threads, some of which run on the same CPU
as the victim. The threads running on the victim’s CPU sleep most of the
time. However, at carefully chosen times the attacker wakes them up, causing
the scheduler to interrupt the victim to run the attacker.
USENIX Association
30th USENIX Security Symposium    657
Applicability to Other CPUs
It should be possible to port
our attacks on other CPUs using a ring interconnect. For
example, we were able to replicate our methodology on a
server-class Xeon Broadwell CPU, ﬁnding that the distributed
(“boxcar”-based) arbitration policy is the same that we ob-
served on our client-class CPUs (more details in the extended
version [81]). An open question is whether our attacks can be
generalized to CPUs that do not use a ring interconnect. For
example, recent server-class Intel CPUs utilize mesh intercon-
nects [55], which consist of a 2-dimensional array of half rings.
Trafﬁc on this grid-like structure is always routed vertically
ﬁrst and then horizontally. More wires may make it harder for
an attacker to contend with a victim. At the same time, how-
ever, they may provide the attacker with more ﬁne-grained
visibility onto what segments a victim is using, but this topic
merits further investigation. Finally, AMD CPUs utilize other
proprietary technologies known as Inﬁnity Fabric/Architec-
ture for their on-chip interconnect [19, 93]. Investigating the
feasibility of our attack on these platforms requires future
work. However, the techniques we use to build our contention
model can be applied on these platforms too.
7 Conclusion
In this paper, we introduced side channel attacks on the ring
interconnect. We reverse engineered the ring interconnect’s
protocols to reveal the conditions for two processes to incur
ring contention. We used these ﬁndings to build a covert chan-
nel with a capacity of over 4 Mbps, the largest to date for
cross-core channels not relying on shared memory. We also
showed that the temporal trends of ring contention can be
used to leak key bits from vulnerable EdDSA/RSA implemen-
tations as well as the timing of keystrokes typed by a user. We
have disclosed our results to Intel.
Acknowledgments
This work was partially supported by NSF grants 1954521
and 1942888 as well as by an Intel ISRA center. We thank our
shepherd Yossi Oren and the anonymous reviewers for their
valuable feedback. We also thank Gang Wang for his valuable
suggestions on early drafts of this paper, and Ben Gras for the
helpful discussions on the ﬁrst side channel POC.
Availability
We have open sourced the code of all the experiments of this
paper at https://github.com/FPSG-UIUC/lotr.
References
[1] DoD 5200.28-STD. Department of Defense Trusted Computer System
Evaluation Criteria, 1985.
[2] Onur Aciiçmez. Yet another microarchitectural attack: Exploiting
i-cache. In CSAW, 2007.
[3] Onur Acıiçmez, Çetin Kaya Koç, and Jean-Pierre Seifert. On the
power of simple branch prediction analysis. In CCS, 2007.
[4] Onur Acıiçmez, Çetin Kaya Koç, and Jean-Pierre Seifert. Predicting
secret keys via branch prediction. In CT-RSA, 2007.
[5] Onur Acıiçmez and Werner Schindler. A vulnerability in RSA imple-
mentations due to instruction cache analysis and its demonstration on
OpenSSL. In CT-RSA, 2008.
[6] Onur Acıiçmez and Jean-Pierre Seifert. Cheap hardware parallelism
implies cheap security. In FDTC, 2007.
[7] Alejandro Cabrera Aldaya, Billy Bob Brumley, Sohaib ul Hassan,
Cesar Pereida García, and Nicola Tuveri. Port contention for fun and
proﬁt. In S&P, 2019.
[8] Nicola Apicella. Linux terminals, tty, pty and shell. https://dev.
to/napicella/linux-terminals-tty-pty-and-shell-192e.
Accessed on 17.06.2020.
[9] Lucian Armasu. OpenBSD will disable Intel Hyper-Threading to
avoid spectre-like exploits (updated). https://www.tomshardware
.com/news/openbsd-disables-intel-hyper-threading-spe
ctre,37332.html. Accessed on 17.06.2020.
[10] C Ashokkumar, Ravi Prakash Giri, and Bernard Menezes. Highly
efﬁcient algorithms for AES key retrieval in cache access attacks. In
EuroS&P, 2016.
[11] Rachata Ausavarungnirun, Chris Fallin, Xiangyao Yu, Kevin Chang,
Greg Nazario, Reetuparna Das, Gabriel Loh, and Onur Mutlu. Design
and evaluation of hierarchical rings with deﬂection routing. In SBAC-
PAD, 2014.
[12] Daniel J Barrett, Richard E Silverman, and Robert G Byrnes. SSH,
The Secure Shell: The Deﬁnitive Guide. O’Reilly Media, Inc, 2005.
[13] Antoine Beauprè. A look at terminal emulators, part 2. https:
//lwn.net/Articles/751763/. Accessed on 17.06.2020.
[14] Naomi Benger, Joop Van de Pol, Nigel P Smart, and Yuval Yarom.
“Ooh aah... just a little bit”: A small amount of side channel can go a
long way. In CHES, 2014.
[15] Atri Bhattacharyya, Alexandra Sandulescu, Matthias Neugschwandt-
ner, Alessandro Sorniotti, Babak Falsaﬁ, Mathias Payer, and Anil
Kurmus. SMoTherSpectre: Exploiting speculative execution through
port contention. In CCS, 2019.
[16] Benjamin A Braun, Suman Jana, and Dan Boneh. Robust and ef-
ﬁcient elimination of cache and timing side channels. Preprint,
arXiv:1506.00189 [cs.CR], 2015.
[17] Leon Groot Bruinderink, Andreas Hülsing, Tanja Lange, and Yuval
Yarom. Flush, gauss, and reload – a cache attack on the BLISS lattice-
based signature scheme. In CHES, 2016.
[18] Thomas Claburn. RIP Hyper-Threading? ChromeOS axes key Intel
CPU feature over data-leak ﬂaws – Microsoft, Apple suggest snub.
https://www.theregister.co.uk/2019/05/14/intel_hyper
_threading_mitigations/. Accessed on 17.06.2020.
[19] Ian Cutress. AMD moves from inﬁnity fabric to inﬁnity architecture:
Connecting everything to everything. https://www.anandtech.co
m/show/15596/amd-moves-from-infinity-fabric-to-infin
ity-architecture-connecting-everything-to-everything.
Accessed on 17.06.2020.
[20] Craig Disselkoen, David Kohlbrenner, Leo Porter, and Dean Tullsen.
Prime+abort: A timer-free high-precision L3 cache attack using intel
TSX. In USENIX Security, 2017.
[21] Jack Doweck, Wen-Fu Kao, Allen Kuan yu Lu, Julius Mandelblat,
Anirudha Rahatekar, Lihu Rappoport, Efraim Rotem, Ahmad Yasin,
and Adi Yoaz. Inside 6th-generation Intel Core: New microarchitec-
ture code-named Skylake. IEEE Micro, 37(2), 2017.
658    30th USENIX Security Symposium
USENIX Association
[22] Travis Downs. Hardware store elimination. https://travisdown
s.github.io/blog/2020/05/13/intel-zero-opt.html, 2020.
Accessed on 17.06.2020.
[23] Dmitry Evtyushkin and Dmitry Ponomarev. Covert channels through
random number generator: Mechanisms, capacity estimation and miti-
gations. In CCS, 2016.
[24] Dmitry Evtyushkin, Dmitry Ponomarev, and Nael Abu-Ghazaleh.
Jump over ASLR: Attacking branch predictors to bypass ASLR. In
MICRO, 2016.
[25] Dmitry Evtyushkin, Dmitry Ponomarev, and Nael Abu-Ghazaleh. Un-
derstanding and mitigating covert channels through branch predictors.
TACO, 13(1), 2016.
[26] Dmitry Evtyushkin, Ryan Riley, Nael Abu-Ghazaleh, and Dmitry
Ponomarev. BranchScope: A new side-channel attack on directional
branch predictor. In ASPLOS, 2018.
[27] Chris Fallin, Xiangyao Yu, Gregory Nazario, and Onur Mutlu. A
high-performance hierarchical ring on-chip interconnect with low-
cost routers. Technical report, Carnegie Mellon University, 2011.
[28] Alireza Farshin, Amir Roozbeh, Gerald Q. Maguire Jr., and Dejan
Kosti´c. Make the most out of last level cache in Intel processors. In
EuroSys, 2019.
[29] Pavel Fatin. Typing with pleasure. https://pavelfatin.com/typ
ing-with-pleasure/. Accessed on 17.06.2020.
[30] Andrew Ferraiuolo, Mark Zhao, Andrew C Myers, and G Edward Suh.
HyperFlow: A processor architecture for nonmalleable, timing-safe
information ﬂow security. In CCS, 2018.
[31] Qian Ge, Yuval Yarom, David Cock, and Gernot Heiser. A survey of
microarchitectural timing attacks and countermeasures on contempo-
rary hardware. JCEN, 8(1), 2018.
[32] Qian Ge, Yuval Yarom, and Gernot Heiser. No security without time
protection: We need a new hardware-software contract. In APSys,
2018.
[33] Daniel Genkin, Luke Valenta, and Yuval Yarom. May the fourth be
with you: A microarchitectural side channel attack on several real-
world applications of Curve25519. In CCS, 2017.
[34] Michael Godfrey and Mohammad Zulkernine. A server-side solution
to cache-based side-channel attacks in the cloud. In CLOUD, 2013.
[35] Ben Gras, Cristiano Giuffrida, Michael Kurth, Herbert Bos, and Kaveh
Razavi. ABSynthe: Automatic blackbox side-channel synthesis on
commodity microarchitectures. In NDSS, 2020.
[36] Ben Gras, Kaveh Razavi, Herbert Bos, and Cristiano Giuffrida. Trans-
lation leak-aside buffer: Defeating cache side-channel protections
with TLB attacks. In USENIX Security, 2018.
[37] Ben Gras, Kaveh Razavi, Erik Bosman, Herbert Bos, and Cristiano
Giuffrida. ASLR on the line: Practical cache attacks on the MMU. In
NDSS, 2017.
[38] Daniel Gruss, Clémentine Maurice, Klaus Wagner, and Stefan Man-
gard. Flush+ﬂush: A fast and stealthy cache attack. In DIMVA, 2016.
[39] Daniel Gruss, Raphael Spreitzer, and Stefan Mangard. Cache template
attacks: Automating attacks on inclusive last-level caches. In USENIX
Security, 2015.
[40] Roberto Guanciale, Hamed Nemati, Christoph Baumann, and Mads
Dam. Cache storage channels: Alias-driven attacks and veriﬁed
countermeasures. In S&P, 2016.
[41] David Gullasch, Endre Bangerter, and Stephan Krenn. Cache games -
bringing access-based cache attacks on aes to practice. In S&P, 2011.
[42] Daniel E Holcomb and Sanjit A Seshia. Compositional performance
veriﬁcation of network-on-chip designs. IEEE TCAD, 33(9), 2014.
[43] Casen Hunger, Mikhail Kazdagli, Ankit Rawat, Alex Dimakis, Sri-
ram Vishwanath, and Mohit Tiwari. Understanding contention-based
channels and using them for defense. In HPCA, 2015.
[44] Intel. Guidelines for mitigating timing side channels against crypto-
graphic implementations. https://software.intel.com/secur
ity-software-guidance/insights/guidelines-mitigating
-timing-side-channels-against-cryptographic-implemen
tations. Accessed on 17.06.2020.
[45] Intel. Intel VTune proﬁler user guide–LLC hit. https://software
.intel.com/content/www/us/en/develop/documentation/v
tune-help/top/reference/cpu-metrics-reference/l3-bou
nd/llc-hit.html. Accessed on 17.06.2020.
[46] Intel. Intel Xeon processor E5 and E7 v4 families uncore performance
monitoring, April 2016.
[47] Intel. Intel 64 and IA-32 Architectures Optimization Reference Man-
ual, September 2019.
[48] Gorka Irazoqui, Thomas Eisenbarth, and Berk Sunar. S$A: A shared
cache attack that works across cores and deﬁes VM sandboxing – and
its application to AES. In S&P, 2015.
[49] Suman Jana and Vitaly Shmatikov. Memento: Learning secrets from
process footprints. In S&P, 2012.
[50] David Kanter. Intel’s Sandy Bridge microarchitecture. https://www.
realworldtech.com/sandy-bridge/8/. Accessed on 17.06.2020.
[51] Mehmet Kayaalp, Nael Abu-Ghazaleh, Dmitry Ponomarev, and Aamer
Jaleel. A high-resolution side-channel attack on the last level cache.
In DAC, 2016.
[52] Michael Kerrisk. The Linux Programming Interface: A Linux and
UNIX System Programming Handbook. No Starch Press, 2010.
[53] Taesoo Kim, Marcus Peinado, and Gloria Mainar-Ruiz. StealthMem:
System-level protection against cache-based side channel attacks in
the cloud. In USENIX Security, 2012.
[54] Sailesh Kottapalli and Jeff Baxter. Nahalem-EX CPU architecture. In
HCS, 2009.
[55] Akhilesh Kumar. New Intel mesh architecture: The “superhighway”
of the data center. Technical report, Intel, 2017.
[56] Michael Kurth, Ben Gras, Dennis Andriesse, Cristiano Giuffrida, Her-
bert Bos, and Kaveh Razavi. NetCAT: Practical cache attacks from
the network. In S&P, 2020.
[57] Oded Lempel. 2nd generation Intel Core processor family: Intel Core
i7, i5 and i3. In HCS, 2011.
[58] Moritz Lipp, Daniel Gruss, Michael Schwarz, David Bidner, Clémen-
tine Maurice, and Stefan Mangard. Practical keystroke timing attacks
in sandboxed JavaScript. In ESORICS, 2017.
[59] Moritz Lipp, Daniel Gruss, Raphael Spreitzer, Clémentine Maurice,
and Stefan Mangard. ARMageddon: Cache attacks on mobile devices.
In USENIX Security, 2016.
[60] Moritz Lipp, Vedad Hadži´c, Michael Schwarz, Arthur Perais, Clémen-
tine Maurice, and Daniel Gruss. Take a way: Exploring the security
implications of AMD’s cache way predictors. In ASIACCS, 2020.
[61] Fangfei Liu, Qian Ge, Yuval Yarom, Frank Mckeen, Carlos Rozas,
Gernot Heiser, and Ruby B Lee. CATalyst: Defeating last-level cache
side channel attacks in cloud computing. In HPCA, 2016.
[62] Fangfei Liu, Yuval Yarom, Qian Ge, Gernot Heiser, and Ruby B Lee.
Last-level cache side-channel attacks are practical. In S&P, 2015.