   int result = invoke_callbacks(HT_IDP, msgid, va);  
   if (result == 0) {  
      result = 1;             //default success  
      switch(msgid) {  
         case processor_t::init:  
            inf.mf = 0;       //ensure little endian!  
            break;  
         case processor_t::make_data: {  
            ea_t ea = va_arg(va, ea_t);  
            flags_t flags = va_arg(va, flags_t);  
            tid_t tid = va_arg(va, tid_t);  
            asize_t len = va_arg(va, asize_t);  
            if (len > 4) { //our d_out can only handle byte, word, dword  
               result = 0; //disallow big data  
            }  
            break;  
         }  
      }  
   }  
   va_end(va);  
   return result;  
}
notify
 函数仅处理两个通知代码：init
 和make_data
 。处理 init通知是为了迫使内核以小端方式处理数据。inf.mf
 标志（多数情况下为第一个标志）指出内核使用的字节顺序值（0 表示小端，1 表示大端）。任何时候如果要将字节转换成数据，则发送make_data
 通知。在上面的例子中，d_out
 函数只能处理字节、字和双字，因此，该函数测试所创建数据的大小，并驳回任何大于 4个字节的代码。
19.3.7 其他processor_t成员
在结束讨论处理器模块的创建时，我们至少需要提及LPH
 对象中的其他几个字段。如前所述，这个结构体中有大量函数指针。如果你仔细阅读 idp.hpp 文件中的processor_t
 结构体定义，你会发现，有时候你完全可以将一些函数指针设置为NULL，而且内核不会调用它们。有理由认为，你需要为processor_t
 所需的所有其他函数提供实现。总地来说，如果你不知道该如何做，可以用一个空白的存根函数蒙混过关。在 Python 处理器中，NULL 是否为有效值并不清楚，我们对函数指针进行的初始化如下所示（请参阅 idp.hpp了解每个函数的行为）。
header
 ，在示例中指向空函数。
footer
 ，在示例中指向空函数。
segstart
 ，在示例中指向空函数。
segend
 ，在示例中指向空函数。
is_far_jump
 ，在示例中设置为 NULL。
ranslate
 ，在示例中设置为 NULL。
realcvt
 ，指向ieee.h 中的ieee_realcvt
 。
is_switch
 ，在示例中设置为 NULL。
extract_address
 ，在示例中指向一个返回（BADADDR 1）的函数。
is_sp_based
 ，在示例中设置为 NULL。
create_func_frame
 ，在示例中设置为 NULL。
get_frame_retsize
 ，在示例中设置为 NULL。
u_outspec
 ，在示例中设置为 NULL。
set_idp_options
 ，在示例中设置为 NULL。
除这些函数指针以外，还有下面 3 个数据成员需要注意。
shnames
 ，一个以 NULL 结束的字符指针数组，这些指针指向与处理器有关的短名称（不超过9 个字符，如 python ）。用一个 NULL 指针结束该数组。
lnames
 ，一个以NULL 结束的字符指针数组，这些指针指向与处理器有关的长名称（如Python 2.4 byte code）。这个数组的元素数量应与 shnames
 数组的元素数量相同。
asms
 ，一个以NULL 结束的指针数据，这里的指针指向目标汇编器（asm_t
 ）结构体。
shnames
 和lnames
 数组指定可以被当前处理器模块处理的所有处理器类型的名称。用户可以在Options▶General对话框的Analysis选项卡中选择替代的处理器，如图 19-1 所示。
图19-1 选择替代的处理器和汇编器
支持多处理器的处理器模块应处理processor_t.newprc
 通知，以获知有关处理器变更的通知。
asm_t
 结构体用于描述汇编语言的一些语法要素，如十六进制数、字符串和字符分隔符的格式，以及汇编语言常用的各种关键字。asms
 字段允许某一个处理器模块生成各种不同风格的汇编语言。支持多个汇编器的处理器模块应处理 processor_t.newasm
 通知，以获知有关处理器变更的通知。
最终，我们的简单 Python 处理器的完整版本能够生成下面的代码：
ROM:00156                 LOAD_CONST 12  
ROM:00159                 COMPARE_OP ==  
ROM:00162                 JUMP_IF_FALSE loc_182  
ROM:00165                 POP_TOP  
ROM:00166                 LOAD_NAME 4  
ROM:00169                 LOAD_ATTR 10  
ROM:00172                 LOAD_NAME 5  
ROM:00175                 CALL_FUNCTION 1  
ROM:00178                 POP_TOP  
ROM:00179                 JUMP_FORWARD loc_183  
ROM:00182 # ----------------------------------------------------------  
ROM:00182 loc_182:                           # CODE XREF: ROM:00162j  
ROM:00182                 POP_TOP  
ROM:00183  
ROM:00183 loc_183:                           # CODE XREF: ROM:00179j  
ROM:00183                 LOAD_CONST 0  
ROM:00186                 RETURN_VALUE
虽然我们可以生成比上面的代码揭示更多信息的 Python 反汇编代码清单，但是我们需要了解更多与.pyc 文件格式有关的信息。读者可以在本书的网站上找到一个功能更加强大的Python处理器模块。
19.4 构建处理器模块
构建和安装 IDA 处理器模块的过程与构建和安装插件和加载器的过程非常类似，它们之间只存在一个主要的差异，如果不遵照这个差异，可能导致 IDA 无法使用你的处理器。构建过程中的一些细微差异包括以下几点。
Windows 、Linux 平台和OS X 平台处理器的文件扩展名分别为.w32/.w64 、.ilx/ilx64和.imc/.imc64 。
SDK 示例处理器（及我们自己的处理器）的构建脚本将新建的处理器二进制文件存储在/bin/procs 目录中。
要安装处理器模块，需要将已编译的处理器二进制文件复制到/procs目录中。
Windows 处理器模块需要使用 SDK 提供的一个自定义 MS-DOS 存根1
 。
1. MS-DOS头部存根包括一个MS-DOS 文件头，以及警告用户Windows 程序不能在MS-DOS 模式下运行的代码。
基于Windows 的处理器模块需要采用插件和加载器不需要的一个自定义后续处理步骤（post-processing step）。这个步骤用于在已编译处理器二进制文件中的特定位置插入一个处理器描述字符串。这个描述字符串在 IDA 的“加载文件”对话框的处理器下拉列表部分显示。
在构建一个基于 Windows 的处理器模块时，你需要使用SDK 提供的一个自定义 MS-DOS 存根（/module/stub）。要使用自定义 MS-DOS 存根，必须指示链接器使用你的存根，而不是以其他形式包含的默认存根。在使用特定于 Windows 的编译器时，有时候你可以通过使用模块定义（.def ）文件指定备用的存根。Borland构建工具（被 Hex-Rays 采用）支持使用.def 文件指定替代存根。如果你碰巧使用的是 Borland工具，SDK 包含的/module/idp.def文件可供你使用。GNU和微软链接器均支持.def 文件（只是使用的语法稍有不同）。但是，它们都不支持备用的 MS-DOS 存根的规范，因此，很明显，你使用这类编译器时可能会遇到问题。
假设在某个时候，你设法使用 SDK 提供的自定义 MS-DOS 存根构建了你的处理器模块，那么，你仍然必须在处理器二进制文件中插入处理器描述注释。/bin/mkidp.exe 实用工具即用于这一目的。你可以使用下面的语法调用 mkidp
 ，给一个处理器添加一段注释：
$ mkidp module description
这里，module
 是你的处理器模块的路径，而 description 是你的模块的文本描述，如下所示：
Long module name:short module name
要给我们的 Python 处理器模块添加一段描述，可以使用下面的命令行：
$ ./mkidp procs/python.w32 "Python Bytecode:python"
mkidp
 实用工具尝试在文件中偏移量为 128 字节的命名模块中插入所提供的描述，插入描述的空间位于MS-DOS 存根与 PE头部之间（假设这样的空间存在）。如果由于PE头部过于接近MS-DOS 存根的结尾部分，而没有足够的空间，你将收到以下错误消息：
mkidp: too long processor description
这时，操作是否成功更多地取决于你使用的工具，因为使用微软链接器构建的处理器有足够的空间可以插入描述，而使用 GNU链接器构建的处理器却没有足够的空间。
为了消除困惑，并使用微软工具或GNU工具，我们开发了一个叫做fix_proc
 的实用工具，读者可以在本书网站的第19章部分下载该工具。fix_proc
 实用工具使用和mkidp 相同的命令行语法，但是，它还提供了其他功能，可以在使用大多数编译器构建的处理器模块中插入一段处理器描述。执行fix_proc
 后，它用SDK提供的存根替换处理器现有的MS-DOS 存根（因而不需要在构建过程中使用.def 文件）。同时，fix_proc
 执行必要的操作，重新定位处理器的PE头部，创建足够的空间来保存处理器描述字符串，最后将描述字符串插入到处理器二进制文件中的正确位置。在对处理器模块执行所需的“后续处理步骤”时，我们用fix_proc
 代替mkidp
 。
说明
  严格来讲，你不需要为处理器模块使用SDK的MS-DOS 存根。只要 IDA 在处理器模块的128 字节处发现一个描述字符串，IDA 就不会出错。在fix_proc
 中，我们用SDK存根替代现有的MS-DOS 存根，只是为了避免任何与用于存储描述字符串的空间有关的冲突。
根据构建处理器所使用的工具，表 19-1 描述了各种处理器的特性。
表19-1 后处理的IDA 处理器模块（按编译器）
初步构建
使用mkidp 后
使用fix_proc后
工具