## PostgeSQL sql server兼容性with babelfish - babelfish部署on CentOS8 docker     
### 作者                                    
digoal                                    
### 日期                                    
2023-01-16                                   
### 标签                                    
PostgreSQL , PolarDB , babelfish , sql server 兼容                         
----                                    
## 背景   
好消息: PolarDB 新版本也会支持babelfish插件.   
本文测试使用了babelfish最新的stable分支, 如果又有了新的分支, 大家安装时请使用新分支.    
babelfish包含了几个部分:   
1、改版的postgresql, 主要增加协议层hook等, 如果postgresql 社区接收了这些改动, 以后就不需要用这个改版分支了.   
- https://github.com/babelfish-for-postgresql/postgresql_modified_for_babelfish/tree/BABEL_3_0_STABLE__PG_15_1  
2、babelfish插件, 其实是4个插件  
- https://github.com/babelfish-for-postgresql/babelfish_extensions/blob/BABEL_3_0_STABLE/contrib/README.md  
babelfishpg_tsql  
- Supports the tsql language.  
babelfishpg_tds  
- Supports the tds connection.  
babelfishpg_common  
- Supports the various datatypes in MSSQL.  
babelfishpg_money  
- supports the money type in MSSQL. This is a variation of the opensource fixeddecimal extension.  
3、兼容性评估工具, 类似阿里云的adam  
- https://github.com/babelfish-for-postgresql/babelfish_compass  
## 安装部署  
### 1、部署改版postgresql on centos docker, 增加协议层hook等  
macOS docker的使用可以参考:   
[《如何用 PolarDB 证明巴菲特的投资理念 - 包括PolarDB on Docker简单部署》](../202209/20220908_02.md)    
```  
docker pull centos:centos8.4.2105  
docker run -d -it --cap-add=SYS_PTRACE --privileged=true --name centos8 centos:centos8.4.2105  
```  
```  
docker exec -it centos8 /bin/bash  
sed -i 's/mirrorlist/#mirrorlist/g' /etc/yum.repos.d/CentOS-*  
sed -i 's|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g' /etc/yum.repos.d/CentOS-*  
dnf install 'dnf-command(config-manager)'  
dnf install epel-release epel-next-release  
dnf config-manager --set-enabled powertools  
yum install -y git gcc readline-devel zlib-devel make bison libxslt flex man wget docbook-style-xsl libicu-devel libxml2-devel openssl-devel uuid-devel libuuid-devel gcc-c++ java sudo unzip which   
useradd postgres  
su - postgres  
```  
下载安装 postgresql babelfish改版分支  
```  
cd ~  
git clone --depth 1 -b BABEL_3_X_DEV__PG_15_X https://github.com/babelfish-for-postgresql/postgresql_modified_for_babelfish.git  
cd postgresql_modified_for_babelfish  
./configure --prefix=/home/postgres/pg15.1 --with-icu --with-libxml --with-uuid=ossp  
make world -j 8  
make install-world  
```  
配置环境变量  
```  
cd ~  
vi .bash_profile  
# add  
alias ll='ls -larht'    
alias rm='rm -i'    
export LANG=en_US.UTF8
export PGHOME=/home/postgres/pg15.1  
export PATH="$PGHOME/bin:$PATH"    
export MANPATH="$PGHOME/share/man:$MANPATH"    
export PGLOCALEDIR=$PGHOME/share/locale    
export PGDATA=/home/postgres/pgdata    
export PGHOST=$PGDATA    
export PGPORT=1921    
export PGDATABASE=postgres    
export PGUSER=postgres    
export PGPASSWORD=pg123    
. ./.bash_profile   
```  
初始化数据库  
```  
initdb -D $PGDATA -U postgres -E UTF8 --lc-collate=C --lc-ctype=en_US.UTF8 --locale-provider=icu --icu-locale=C  
```  
配置数据库参数和数据库防火墙  
```  
cd $PGDATA  
vi postgresql.auto.conf  
listen_addresses = '0.0.0.0'		  
port = 1921				  
max_connections = 100			  
unix_socket_directories = '/tmp,.'	  
unix_socket_permissions = 0700		  
tcp_keepalives_idle = 60		  
tcp_keepalives_interval = 60		  
tcp_keepalives_count = 10		  
tcp_user_timeout = 60			  
client_connection_check_interval = 60	  
password_encryption = scram-sha-256	  
shared_buffers = 128MB			  
dynamic_shared_memory_type = posix	  
vacuum_cost_delay = 0			  
bgwriter_delay = 10ms			  
bgwriter_lru_maxpages = 1000		  
bgwriter_lru_multiplier = 5.0		  
effective_io_concurrency = 0		  
max_parallel_workers_per_gather = 0	  
wal_level = replica			  
synchronous_commit = off		  
full_page_writes = on			  
wal_writer_delay = 10ms		  
checkpoint_timeout = 15min		  
max_wal_size = 1GB  
min_wal_size = 80MB  
random_page_cost = 1.1			  
log_destination = 'csvlog'		  
logging_collector = on	  
log_truncate_on_rotation = on		  
log_timezone = 'UTC'  
autovacuum_vacuum_cost_delay = 0ms	  
vacuum_freeze_table_age = 1500000000  
vacuum_freeze_min_age = 500000000  
vacuum_multixact_freeze_table_age = 1500000000  
vacuum_multixact_freeze_min_age = 50000000  
datestyle = 'iso, mdy'  
timezone = 'UTC'  
lc_messages = 'C'			  
lc_monetary = 'C'			  
lc_numeric = 'C'			  
lc_time = 'C'				  
default_text_search_config = 'pg_catalog.english'  
```  
```  
vi pg_hba.conf   
# add  
host all all 0.0.0.0/0 md5  
```  
### 2、安装部署 babelfish 插件  
1、先安装依赖  
```  
su - root  
cd ~  
wget https://github.com/Kitware/CMake/releases/download/v3.20.6/cmake-3.20.6-linux-x86_64.sh  
sh cmake-3.20.6-linux-x86_64.sh  
-----------  
Do you accept the license? [yn]:   
      y  
By default the CMake will be installed in:  
  "/root/cmake-3.20.6-linux-x86_64"  
Do you want to include the subdirectory cmake-3.20.6-linux-x86_64?  
Saying no will install in: "/root" [Yn]:   
Y  
Using target directory: /root/cmake-3.20.6-linux-x86_64  
Extracting, please wait...  
Unpacking finished successfully  
-----------  
mkdir /usr/local/cmake  
mv cmake-3.20.6-linux-x86_64/* /usr/local/cmake/  
rm -rf cmake-3.20.6-linux-x86_64  
```  
2、配置环境变量  
```  
su - postgres  
cd ~  
vi .bash_profile  
# add  
export PATH=/usr/local/cmake/bin:$PATH  
[postgres@faf9358f0e61 ~]$ . ./.bash_profile   
[postgres@faf9358f0e61 ~]$ which cmake  
/usr/local/cmake/bin/cmake  
```  
3、安装babelfish插件  
下载插件  
```  
su - postgres  
cd ~  
git clone --depth 1 -b BABEL_3_X_DEV https://github.com/babelfish-for-postgresql/babelfish_extensions  
```  
安装antlr  
```  
su - root  
cp /home/postgres/babelfish_extensions/contrib/babelfishpg_tsql/antlr/thirdparty/antlr/antlr-4.9.3-complete.jar /usr/local/lib  
```  
```  
su - postgres  
cd ~  
wget --no-check-certificate http://www.antlr.org/download/antlr4-cpp-runtime-4.9.3-source.zip  
unzip -d antlr4 antlr4-cpp-runtime-4.9.3-source.zip  
cd antlr4  
mkdir build  
cd build  
cmake .. -DANTLR_JAR_LOCATION=/usr/local/lib/antlr-4.9.3-complete.jar -DCMAKE_INSTALL_PREFIX=/usr/local -DWITH_DEMO=True  
make -j 4  
```  
cmake 如遇到如下报错, 修改`antlr4/CMakeLists.txt`解决:   
```  
If you come across the error  
-- Checking for module 'uuid'  
--   No package 'uuid' found  
CMake Error at /usr/local/share/cmake-3.21/Modules/FindPkgConfig.cmake:554 (message):  
    A required package was not found  
Call Stack (most recent call first):  
    /usr/local/share/cmake-3.21/Modules/FindPkgConfig.cmake:776 (_pkg_check_modules_internal)  
    CMakeLists.txt:44 (pkg_check_modules)  
Check that you have uuid-devel installed. If so,   
go to antlr4/CMakeLists.txt and   
comment out the line pkg_check_modules(UUID REQUIRED uuid)   
by adding a # to the beginning of the line.  
```  
```  
su - root  
[root@1829117d0f28 ~]# cd /home/postgres/antlr4/build  
[root@1829117d0f28 build]# make install  
```  
```  
检查一下antlr4的include目录, 后面安装时要配置一致  
[root@1829117d0f28 ~]# find / -name antlr4-runtime  
/usr/local/include/antlr4-runtime  
```  
```  
su - postgres  
cp /usr/local/lib/libantlr4-runtime.so.4.9.3 ~/pg15.1/lib/  
```  
接下来部署babelfish的几个插件, 因为使用了`-Werror`, 所有报警都会视为错误, 然后代码里面又有点脏, 所以需要修改一下.  
先设置环境变量, 4个插件的安装都需要用到这些环境变量  
```  
export PG_CONFIG=~/pg15.1/bin/pg_config  
export PG_SRC=~/postgresql_modified_for_babelfish  
export cmake=/usr/local/cmake/bin/cmake  
```  
进入插件目录, 设置antlr4的include目录  
```  
cd ~/babelfish_extensions/  
vi contrib/babelfishpg_tsql/antlr/CMakeLists.txt  
设置:   