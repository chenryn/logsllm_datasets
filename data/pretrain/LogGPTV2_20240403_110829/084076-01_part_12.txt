spec:
rules:
- host: foo.bar.com
http:
paths:
- backend:
serviceName: service1
servicePort: 80
- host: bar.foo.com
http:
paths:
- backend:
serviceName: service2
servicePort: 80
此时，访问foo.bar.com到service1，访问bar.foo.com到service2。
（3）基于TLS的Ingress
首先创建证书，生产环境的证书为公司购买的证书：
kubectl -n default create secret tls nginx-test-tls --key=tls.key
--cert=tls.crt
定义Ingress（此示例为Traefik，nginx-ingress将traefik改为nginx即可）：
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
name: nginx-https-test
第2章 Docker及Kubernetes基础 | 127
namespace: default
annotations:
kubernetes.io/ingress.class: traefik
spec:
rules:
- host: traefix-test.com
http:
paths:
- backend:
serviceName: nginx-svc
servicePort: 80
tls:
- secretName: nginx-test-tls
4. 更新Ingress
更新 Ingress 可以直接使用 kubectl edit ingress INGRESS-NAME 进行更改，也可以通过
kubectlapply-f NEW-INGRESS-YAML.yaml进行更改。
更多Ingress配置请参考第5章Nginx Ingress的内容。
2.2.15 Taint 和 Toleration
Taint能够使节点排斥一类特定的Pod，Taint和Toleration相互配合可以用来避免Pod被分配
到不合适的节点，比如 Master 节点不允许部署系统组件之外的其他 Pod。每个节点上都可以应用
一个或多个 Taint，这表示对于那些不能容忍这些 Taint 的 Pod 是不会被该节点接受的。如果将
Toleration应用于Pod上，则表示这些Pod可以（但不要求）被调度到具有匹配Taint的节点上。
1. 概念
给节点增加一个Taint：
[root@K8S-master01 2.2.8]# kubectl taint nodes K8S-node01 key=value:NoSchedule
node/K8S-node01 tainted
上述命令给 K8S-node01 增加一个 Taint，它的 key 对应的就是键，value 对应就是值，effect
对应的就是 NoSchedule。这表明只有和这个 Taint 相匹配的 Toleration 的 Pod 才能够被分配到
K8S-node01节点上。按如下方式在PodSpec中定义Pod的Toleration，就可以将Pod部署到该节点
上。
方式一：
tolerations:
- key: "key"
operator: "Equal"
value: "value"
effect: "NoSchedule"
方式二：
tolerations:
- key: "key"
operator: "Exists"
128 | 再也不踩坑的Kubernetes实战指南
effect: "NoSchedule"
一个Toleration和一个Taint相匹配是指它们有一样的key和effect，并且如果operator是Exists
（此时toleration不指定value）或者operator是Equal，则它们的value应该相等。
注意两种情况：
 如果一个Toleration 的key为空且operator为Exists，表示这个Toleration 与任意的key、
value和effect都匹配，即这个Toleration能容忍任意的Taint：
tolerations:
- operator: "Exists"
 如果一个Toleration的effect为空，则key与之相同的相匹配的Taint的effect可以是任意
值：
tolerations:
- key: "key"
operator: "Exists"
上述例子使用到effect的一个值NoSchedule，也可以使用PreferNoSchedule，该值定义尽量避
免将 Pod 调度到存在其不能容忍的 Taint 的节点上，但并不是强制的。effect 的值还可以设置为
NoExecute。
一个节点可以设置多个 Taint，也可以给一个 Pod 添加多个 Toleration。Kubernetes 处理多个
Taint和Toleration的过程就像一个过滤器：从一个节点的所有Taint开始遍历，过滤掉那些Pod中
存在与之相匹配的Toleration的Taint。余下未被过滤的Taint的effect值决定了Pod是否会被分配
到该节点，特别是以下情况：
 如果未被过滤的Taint中存在一个以上effect值为NoSchedule的Taint，则Kubernetes不会
将Pod分配到该节点。
 如果未被过滤的 Taint 中不存在 effect 值为 NoExecute 的 Taint，但是存在 effect 值为
PreferNoSchedule的Taint，则Kubernetes会尝试将Pod分配到该节点。
 如果未被过滤的Taint中存在一个以上effect值为NoExecute的Taint，则Kubernetes不会
将 Pod 分配到该节点（如果 Pod 还未在节点上运行），或者将 Pod 从该节点驱逐（如果
Pod已经在节点上运行）。
例如，假设给一个节点添加了以下的Taint：
kubectl taint nodes K8S-node01 key1=value1:NoSchedule
kubectl taint nodes K8S-node01 key1=value1:NoExecute
kubectl taint nodes K8S-node01 key2=value2:NoSchedule
然后存在一个Pod，它有两个Toleration：
tolerations:
- key: "key1"
operator: "Equal"
value: "value1"
effect: "NoSchedule"
- key: "key1"
operator: "Equal"
第2章 Docker及Kubernetes基础 | 129
value: "value1"
effect: "NoExecute"
在上述例子中，该Pod不会被分配到上述节点，因为没有匹配第三个Taint。但是如果给节点
添加上述3个Taint之前，该Pod已经在上述节点中运行，那么它不会被驱逐，还会继续运行在这
个节点上，因为第3个Taint是唯一不能被这个Pod容忍的。
通常情况下，如果给一个节点添加了一个 effect 值为 NoExecute 的 Taint，则任何不能容忍这
个Taint的Pod都会马上被驱逐，任何可以容忍这个Taint的Pod都不会被驱逐。但是，如果Pod
存在一个 effect 值为 NoExecute 的 Toleration 指定了可选属性 tolerationSeconds 的值，则该值表示
是在给节点添加了上述Taint之后Pod还能继续在该节点上运行的时间，例如：
tolerations:
- key: "key1"
operator: "Equal"
value: "value1"
effect: "NoExecute"
tolerationSeconds: 3600
表示如果这个Pod正在运行，然后一个匹配的Taint被添加到其所在的节点，那么Pod还将继
续在节点上运行3600秒，然后被驱逐。如果在此之前上述Taint被删除了，则Pod不会被驱逐。
删除一个Taint：
kubectl taint nodes K8S-node01 key1:NoExecute-
查看Taint：
[root@K8S-master01 2.2.8]# kubectl describe node K8S-node01 | grep Taint
Taints: key=value:NoSchedule
2. 用例
通过Taint和Toleration可以灵活地让Pod避开某些节点或者将Pod从某些节点被驱逐。下面
是几种情况。
（1）专用节点
如果想将某些节点专门分配给特定的一组用户使用，可以给这些节点添加一个 Taint（kubectl
taint nodes nodename dedicated=groupName:NoSchedule），然后给这组用户的Pod添加一个相对应
的 Toleration。拥有上述 Toleration 的 Pod 就能够被分配到上述专用节点，同时也能够被分配到集
群中的其他节点。如果只希望这些 Pod 只能分配到上述专用节点中，那么还需要给这些专用节点
另外添加一个和上述 Taint 类似的 Label（例如：dedicated=groupName），然后给 Pod 增加节点
亲和性要求或者使用 NodeSelector，就能将 Pod 只分配到添加了 dedicated=groupName 标签的节
点上。
（2）特殊硬件的节点
在部分节点上配备了特殊硬件（比如GPU）的集群中，我们只允许特定的Pod才能部署在这
些节点上。这时可以使用 Taint 进行控制，添加 Taint 如 kubectl taint nodes nodename
special=true:NoSchedule或者kubectl taint nodes nodename special=true:PreferNoSchedule，然后给需
要部署在这些节点上的Pod添加相匹配的Toleration即可。
130 | 再也不踩坑的Kubernetes实战指南
（3）基于Taint的驱逐
属于alpha特性，在每个Pod中配置在节点出现问题时的驱逐行为。
3. 基于Taint的驱逐
之前提到过 Taint 的 effect 值 NoExecute，它会影响已经在节点上运行的 Pod。如果 Pod 不能
忍受effect值为NoExecute的Taint，那么Pod将会被马上驱逐。如果能够忍受effect值为NoExecute
的Taint，但是在Toleration定义中没有指定tolerationSeconds，则Pod还会一直在这个节点上运行。
在Kubernetes 1.6版以后已经支持（alpha）当某种条件为真时，Node Controller会自动给节点
添加一个Taint，用以表示节点的问题。当前内置的Taint包括：
 node.kubernetes.io/not-ready 节点未准备好，相当于节点状态Ready的值为False。
 node.kubernetes.io/unreachable Node Controller访问不到节点，相当于节点状态Ready的
值为Unknown。
 node.kubernetes.io/out-of-disk 节点磁盘耗尽。
 node.kubernetes.io/memory-pressure 节点存在内存压力。
 node.kubernetes.io/disk-pressure 节点存在磁盘压力。
 node.kubernetes.io/network-unavailable 节点网络不可达。
 node.kubernetes.io/unschedulable 节点不可调度。
 node.cloudprovider.kubernetes.io/uninitialized 如果 Kubelet 启动时指定了一个外部的
cloudprovider ， 它 将 给 当 前 节 点 添 加 一 个 Taint 将 其 标 记 为 不 可 用 。 在
cloud-controller-manager的一个controller初始化这个节点后，Kubelet将删除这个Taint。
使用这个alpha功能特性，结合tolerationSeconds，Pod就可以指定当节点出现一个或全部上述
问题时，Pod还能在这个节点上运行多长时间。
比如，一个使用了很多本地状态的应用程序在网络断开时，仍然希望停留在当前节点上运行
一段时间，愿意等待网络恢复以避免被驱逐。在这种情况下，Pod的Toleration可以这样配置：
tolerations:
- key: "node.alpha.kubernetes.io/unreachable"
operator: "Exists"
effect: "NoExecute"
tolerationSeconds: 6000
注 意
Kubernetes会自动给Pod添加一个key为node.kubernetes.io/not-ready的Toleration并配置
tolerationSeconds=300，同样也会给Pod添加一个key为node.kubernetes.io/unreachable的
Toleration并配置tolerationSeconds=300，除非用户自定义了上述key，否则会采用这个默
认设置。
这种自动添加Toleration的机制保证了在其中一种问题被检测到时，Pod默认能够继续停留在
当前节点运行5分钟。这两个默认Toleration是由DefaultTolerationSeconds admission controller添
加的。
DaemonSet中的Pod被创建时，针对以下Taint自动添加的NoExecute的Toleration将不会指
第2章 Docker及Kubernetes基础 | 131
定tolerationSeconds：
 node.alpha.kubernetes.io/unreachable
 node.kubernetes.io/not-ready
这保证了出现上述问题时DaemonSet中的Pod永远不会被驱逐。
2.2.16 RBAC
1. RBAC基本概念
RBAC（Role-Based Access Control，基于角色的访问控制）是一种基于企业内个人用户的角色
来管理对计算机或网络资源的访问方法，其在Kubernetes 1.5版本中引入，在1.6时升级为Beta版
本，并成为 Kubeadm 安装方式下的默认选项。启用 RBAC 需要在启动 APIServer 时指定
--authorization-mode=RBAC。
RBAC使用rbac.authorization.K8S.io API组来推动授权决策，允许管理员通过Kubernetes API
动态配置策略。
RBAC API声明了4种顶级资源对象，即Role、ClusterRole、RoleBinding、ClusterRoleBinding，
管理员可以像使用其他API资源一样使用kubectl API调用这些资源对象。例如：kubectl create -f
(resource).yml。
2. Role和ClusterRole
Role和ClusterRole的关键区别是，Role是作用于命名空间内的角色，ClusterRole作用于整个
集群的角色。
在RBAC API中，Role包含表示一组权限的规则。权限纯粹是附加允许的，没有拒绝规则。
Role只能授权对单个命名空间内的资源的访问权限，比如授权对default命名空间的读取权限：
kind: Role
apiVersion: rbac.authorization.K8S.io/v1
metadata:
namespace: default
name: pod-reader
rules:
- apiGroups: [""] # "" indicates the core API group
resources: ["pods"]
verbs: ["get", "watch", "list"]
ClusterRole 也可将上述权限授予作用于整个集群的 Role，主要区别是，ClusterRole 是集群范
围的，因此它们还可以授予对以下内容的访问权限：
 集群范围的资源（如Node）。
 非资源端点（如/healthz）。
 跨所有命名空间的命名空间资源（如Pod）。
比如，授予对任何特定命名空间或所有命名空间中的secret的读权限（取决于它的绑定方式）：
kind: ClusterRole
132 | 再也不踩坑的Kubernetes实战指南
apiVersion: rbac.authorization.K8S.io/v1
metadata:
# "namespace" omitted since ClusterRoles are not namespaced
name: secret-reader
rules:
- apiGroups: [""]
resources: ["secrets"]
verbs: ["get", "watch", "list"]
3. RoleBinding和ClusterRoleBinding
RoleBinding 将 Role 中定义的权限授予 User、Group 或 Service Account。RoleBinding 和
ClusterRoleBinding最大的区别与Role和ClusterRole的区别类似，即RoleBinding作用于命名空间，
ClusterRoleBinding作用于集群。
RoleBinding 可以引用同一命名空间的 Role 进行授权，比如将上述创建的 pod-reader 的 Role
授予default命名空间的用户jane，这将允许jane读取default命名空间中的Pod：
# This role binding allows "jane" to read pods in the "default" namespace.
kind: RoleBinding
apiVersion: rbac.authorization.K8S.io/v1
metadata:
name: read-pods
namespace: default
subjects:
- kind: User
name: jane # Name is case sensitive
apiGroup: rbac.authorization.K8S.io
roleRef:
kind: Role #this must be Role or ClusterRole
name: pod-reader # this must match the name of the Role or ClusterRole you
wish to bind to
apiGroup: rbac.authorization.K8S.io
说明
 roleRef：绑定的类别，可以是Role或ClusterRole。
RoleBinding也可以引用ClusterRole来授予对命名空间资源的某些权限。管理员可以为整个集
群定义一组公用的ClusterRole，然后在多个命名空间中重复使用。
比如，创建一个 RoleBinding 引用 ClusterRole，授予 dave 用户读取 development 命名空间的
Secret：
# This role binding allows "dave" to read secrets in the "development" namespace.
kind: RoleBinding
apiVersion: rbac.authorization.K8S.io/v1
metadata:
name: read-secrets
namespace: development # This only grants permissions within the "development"
namespace.
subjects:
- kind: User
name: dave # Name is case sensitive
apiGroup: rbac.authorization.K8S.io
第2章 Docker及Kubernetes基础 | 133
roleRef:
kind: ClusterRole
name: secret-reader
apiGroup: rbac.authorization.K8S.io
ClusterRoleBinding 可用于在集群级别和所有命名空间中授予权限，比如允许组 manager 中的
所有用户都能读取任何命名空间的Secret：
# This cluster role binding allows anyone in the "manager" group to read secrets
in any namespace.
kind: ClusterRoleBinding
apiVersion: rbac.authorization.K8S.io/v1
metadata:
name: read-secrets-global
subjects:
- kind: Group
name: manager # Name is case sensitive
apiGroup: rbac.authorization.K8S.io
roleRef:
kind: ClusterRole
name: secret-reader
apiGroup: rbac.authorization.K8S.io
4. 对集群资源的权限控制
在Kubernetes中，大多数资源都由其名称的字符串表示，例如pods。但是一些Kubernetes API
涉及的子资源（下级资源），例如Pod的日志，对应的Endpoint的URL是：
GET /api/v1/namespaces/{namespace}/pods/{name}/log
在这种情况下，pods是命名空间资源，log是Pod的下级资源，如果对其进行访问控制，要使
用斜杠来分隔资源和子资源，比如定义一个Role允许读取Pod和Pod日志：
kind: Role
apiVersion: rbac.authorization.K8S.io/v1
metadata:
namespace: default
name: pod-and-pod-logs-reader
rules:
- apiGroups: [""]