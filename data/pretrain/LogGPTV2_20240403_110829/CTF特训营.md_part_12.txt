continue;
$log=$data;
$log[wid]=$value[id];
$log[’status]= Svalue[ifcheck]?0:1;
$log[mid]=Smain_id;
foreach(Svalue[rule]as $k => $v){
if($ext && is_array（$ext）&&count（$ext）>0){
foreach($ext asSkk=>Sw){
$val = str_replace($kk, Svv,$val);
Sval = round(Sval, Svalue[dnum);
Slog[val]=Sval;
-s=
Sthis->save_log(Slog);
最后看看如何触发这个漏洞就可以了，发现在framework/api
register_control.php中存在调用，代码如下：
---
## Page 161
CTF特训营：技术详解、解题方法与
6.2代码审计的方法与技巧
161/1144
if($uid)
保存用户与用户的关系
if(S_SESSION[introducer])
$this->model(user)->save_relation($Suid,$_SESSION[introducer]);
Sthis->model(wealth')->wealth_autosave（$uid,P_Lang（会员注册）)）
即注册成功就能触发漏洞，如图6-7所示。
图6-7触发漏洞
3.审计工具
自前还没有比较完美的自动化代码审计工具，代码审计工具的结
果仍然需要人工处理。这里为大家推荐两款国内比较流行的代码审计
工具，分别是收费的“RIPS”和免费的“Seay源代码审计系统”。
RIPS是一款非常优秀的源码审计工具，现在已经是一款收费工
具了，并且报价不菲。虽然RIPS的免费版只是一个形，但依然可
以从中窥探其优秀的算法，并根据我们的需要对其进行修改。
---
## Page 162
CTF特训营：技术详解、解题方法与
6.2代码审计的方法与技巧
162/1144
RIPS的主要思路就是利用PHP的函数token_get_all来分析代码的
语法，通过一定的规则识别出每个漏洞，再通过回溯追踪输入点来查
看是否能够构成漏洞。
当然，开源版RIPS的缺点也很明显，一是漏洞规则不够准确
可能出现误报、漏报的情况；二是输入追踪比较潦草，尤其是包含文
件时几乎没有处理，所以导致了准确度较低的问题。
我们可以将它当作一个源码审计系统框架，基于其算法思路来编
写我们自己的系统，关键代码位于lib/scanner.php中。
它的使用方法很简单，直接在路径上填入待扫描的源码文件夹就
可以了，如图6-8所示。
RIPS..
and Per inciudas Ai ists av
tyle
图6-8RIPS设置界面
---
## Page 163
CTF特训营：技术详解、解题方法与
6.2代码审计的方法与技巧
163/1144
扫描完成后，结果将直接显示出来，并且指出你可以输入的地方，
这样你就可以有针对性地寻找漏洞了，如图6-9所示。
RIPS.
图6-9RIPS扫描结果
接下来介绍的是“Seay源代码审计系统”，该源码审计系统的设
计思路比较简单，自动审计的过程主要是根据各种正则表达式匹配的
结果来判断是否存在漏洞，主要还是简化了审计人员的一些重复工
作，是一款比较实用的工具。
下面列出其中几个比较常用的功能
（1）自动审计功能
这个功能就是与预先设置好的正则匹配表达式相匹配，如果匹配
成功则会打印出来，图6-10为一个检测一句话后门的结果
---
## Page 164
CTF特训营：技术详解、解题方法与
6.2代码审计的方法与技巧
164/1144
Seay源代码审计系统
@
新建项目关闭项目自动审计全局搜素审计插件·代码调试函数查询数据管理正则编码
文件结构
编码：UTF-8
调句：
翻证：
test
首页自动审计
evil.pb
开始停止生成报告
ID润描述
文件路径届两详细
1
可能存在代码执行显风，或者此处是后门/i1.pbp/>/S_GET[ME]α_POST[HTT?']）;？>
进度：
状态：扫描完成，发现1个可疑混网，花期时间0.02秒
图6-10检测结果
当然，你也可以选择使用自定义的规则，在系统配置的规则管理
选项中进行设置就可以了，如图6-11所示。
首页规则管理
规则信息
ID详细规则
规则描述
\b Ginelude|require) (_once) f0, 1] (s[1,
文件包含函数中存在变量，可能存在文件包含漏润
\bpreg_replace\(Is[0,5).*/[is】[0, 2]e[
prrplac的/模式，且有可控变量，可能存在代码执行漏洞
\bphpinfos[0, 5}\ (1s[0, 5]1)
phpinfoO函数，可能存在敏感信息泄露漏润
\bcall_user_fune _array) [0, 1]\(1s[0, 5...
call_user_fnc函数参数包含变量，可能存在代码执行显润
\b (file_get_contents |fopen|readfile|f..
读取文件函数中存在变量，可能存在任意文件读取漏润
1f..l..........1
规则：
口
描述：
规则式
这里填测式数据，为了提高审计效率，建议规则少用+和*这些，尽量用{1，5]这样指定字符数量
验证
修款
添加
图6-11规则管理
---
## Page 165
CTF特训营：技术详解、解题方法与
6.2代码审计的方法与技巧
165/1144
(2）全局搜索功能
通过这个功能，你可以在所选的自录下搜索你输入的字符串，通
常可以查找关键函数、变量或关键字符串，如图6-12所示。
首页全局搜索
内容（支持正则）：$_GET
查找停止
正则
ID
文件路径
内容详细
/evil.php
*/$_GET['HANE']($_POST[MTTP1):？>
状态：搜索完成，发现1处
图6-12全局搜索
除了上面介绍的两款代码审计工具之外，我们还可以借助安全
狗、D盾、护卫神等扫描Webshell的工具来扫描一下代码，检查是否
有被预留Webshell或是明显危险的函数调用，以防出现问题。
---
## Page 166
CTF特训营：技术详解、解题方法与
第7章条件竞争
166/114
第7章条件竞争
条件竞争（RaceCondition）在日常的Web应用开发中，通常不
如其他漏洞受到的关注度高。因为普遍的共识是，条件竞争是不可靠
的，大多数时候只能靠代码审计来识别发现，而依赖现有的工具或技
术很难在黑盒/灰盒中识别并进行攻击。即便该漏洞很难被发现，也
仍然有很多企业曾被曝出相关漏洞，例如星巴克咖啡、小密圈的App
产品等。本章所要讲解的条件竞争漏洞仅限于Web应用之中。
在CTF的比赛中，条件竞争是一个较为常见的考点之一。第一种
情况是出题入在题目中给出了一定提示，或者是设计了较为明显的逻
辑问题。第二种情况则是出题人通过本书前面章节讲解的一些手段将
题自源码泄露出来，从而使我们能够识别并进行测试
近年来，CTF比赛中条件竞争相关题目出现的频率有了明显提
升，例如，HCTF2016、0CTF2017中均有相关题目。
---
## Page 167
CTF特训营：技术详解、解题方法与
7.1概述
167/1144
7.1概述
在讲解之前，我们先来了解什么是条件竞争漏洞。条件竞争是指
对时间的情形。当多个线程或进程同时访问相同的共享代码、变量
文件等而没有锁或没有进行同步互厅管理时，则会触发条件竞争，导
致输出不一致的问题。
在编写代码时，由于大部分服务端语言编写的代码是以线性方式
一些问题。下面列举一个简单的例子。
有一个银行账户A和一个银行账户B里面各有1000元钱，现在有
两名用户同时登录到了账户A，并且两人都想完成同一个操作：从账
户A转100元到账户B，那幺正常的操作结果应该是两名用户转账结束
之后，账户A里面剩余800元，账户B里面剩余1200元。
但是，考虑下面这样一种情况，如果两名用户在同一个时刻发起
了转账请求，那么服务器的处理过程如下。
1）用户申发起转账请求，服务器验证账户A的余额为1000元
---
## Page 168
CTF特训营：技术详解、解题方法与.
7.1概述
168/1144
可以转账。
2）用户乙同时发起转账请求，服务器验证账户A的余额为1000
元，可以转账。
3）服务器处理用户申的请求，从账户A里面扣除100元（此时账
户A余额为900元），并将其存入账户B（此时账户B余额为1100元）。
4）服务器处理用户乙的请求，从账户A重面扣除100元（此时账
户A余额为900元），并将其存入账户B（此时账户B余额为1200元）。
5）处理结果：账户A余额为900元，账户B余额为1200元
出现上述情况的原因就是条件竞争，正常情况下，因为账户A作
为一个共享变量，在某一个时刻有且只有一个用户能够操作账户A的
余额，但是由于服务器没有进行适当的加锁或是同步互厅管理，使得
两个用户同时访问并修改账户A的余额，从而引发错误
注意，这里所说的同时并非真正意义上的同时，而是两个操作之
间时间间隔极小，对比服务端的延迟，可以近似于同时。当然上述示
例只是一个说明性的例子，因为仅仅只有两个用户时是很难做到同时
的，所以在真正实际操作的时候，往往会设置很大的进程数或线程数
---
## Page 169
CTF特训营：技术详解、解题方法与
7.1概述
169/1144
同时发起请求，从而使得某两个进程或线程能够幸运地做到同时。
---
## Page 170
CTF特训营：技术详解、解题方法与
7.2条件竞争问题分析及测试
170/1144
7.2条件竞争问题分析及测试
接下来将分别从因一般代码逻辑问题引发的条件竞争和因数据库
无锁引发的条件竞争来分析条件竞争问题及相关测试方法。
1.一般代码逻辑引发的条件竞争
对于不涉及数据库的这一类问题，其主要原因在于服务端的代码
对于共享资源的处理存在问题，首先来看一个较为简单的例子，示例
代码如下：
在这个例子中，我们想要实现的功能就是记录这个网站页面被访
问了多少次。假设每一次用户请求，服务端都应将count.txt中的数值
加1，用户得到的输出内容每次都应该与实际请求次数一致，但是这
段代码因为条件竞争的原因很可能没办法对访问次数进行准确记录
从而导致用户得到的输出内容与实际请求次数不一致。
---
## Page 171
CTF特训营：技术详解、解题方法与
7.2条件竞争问题分析及测试
171/1144
如果存在两个用户同时访问，就会造成counttxt里面的数值本应
该增加2，却只增加了1的情况，如图7-1所示。
到这里，大家已经不难窥见条件竞争漏洞的原理了，接下来以样
例代码为例，介绍一下常见的条件竞争漏洞的测试方法。
线程一
Scnt=file_get_contents("count.txt");
线程二
时
间
Scnt-file_get_contents(count.txt");
轴
线程一
Scnt+=1;
echo "This site was visited Scnt
times.";
fil_put_contents("count.txt",Scont);
线程二
Scnt+=l:
echo "This site was visited Scnt
times.";
file_put_contents("count.txt”,Scont);
线程一
线程二
线程结束后coumt.txt由0变成1
线程结束后count.txt由0变成1
---
## Page 172
CTF特训营：技术详解、解题方法与
7.2条件竞争问题分析及测试
172/1144
图7-1多用户同时访问形成的条件竞争
首先，我们利用前面介绍的Burp的Intruder模块进行测试，截取
数据包之后进行配置，在Payloads一栏配置访问总次数为1000，如图
7-2所示。
Target
Positions
Payloads
Options
?
PayloadSets
You can define one or more payload sets.The number of payload sets depends on tht
payload types are available for each payload set,and each payload type can be custon
Payloadset:
1
Payload count:1,000
Payload type:Null payloads
4
Request count:0
?
Payload Options[Null payloads]
This payload type generates payloads whose value is an empty string.With no payloac
baserequest unmodified.
Generate1000
payloads
OContinueindefinitely
图7-2设置访问数量为1000次
然后，在Options一栏配置并发线程数为80（如图7-3所示），当
然这个数目越大就越容易触发条件竞争，但是数目过大可能会对服务
器造成一定负担。
---
## Page 173
CTF特训营：技术详解、解题方法与
7.2条件竞争问题分析及测试
173/1144
Target
Positions
Payloads
Options
？
Request Headers
These settings control whether Intruder updates the configured request headers during attacks.
Update Content-Length header
SetConnection:close
Request Engine
G
These settings control the engine used formaking HTTPrequests when performing attacks
Number of threads:
80
图7-3设置线程数量为80
我们期望最后结果的值应该是1000次，但是从实验结果可以发
现，1000个访问请求最后只记录了786次，如图7-4所示。
---
## Page 174
CTF特训营：技术详解、解题方法与
7.2条件竞争问题分析及测试
174/1144
Intruder attack 2
Attack Save
Columns
Results
TargetPositions
Payloads
Options
Filter:Showing all items
？
Request
Payload
Status
Error
Timeout
Length
Comment
996
null
200
200
997
null
200
口
口
200
998