### 修改密码权限矩阵
- **修改自己密码**
  - 允许
- **修改他人密码**
  - 公司内部用户: 允许
  - 非公司用户: 禁止

通过在设计阶段创建这样的权限矩阵，可以确保后续开发和测试的正确性。

### 角色定义
在表5-5中，“系统管理员”、“企业管理者”和“普通用户”通常被称为角色（Role）。角色是指拥有一组特定权限，并用能够体现其职责的词汇命名的身份。角色与用户是不同的概念：用户以某一角色在系统中进行各种活动。

#### 不推荐的做法
笔者不建议在实践中仅使用如`admin`或`root`这样的管理员用户名，原因如下：
1. 如果存在多个管理员，事后调查会变得复杂。
2. 管理员密码被多人共用，容易引发安全事件。

正确的做法是为每个用户分配唯一的ID，并根据他们的职责分配相应的角色。

### 正确实现授权管理
当用户授权出现漏洞时，常见原因是只在页面显示上进行权限控制，这是不够的。正确的做法是在任何操作之前都应执行以下检查：
1. 用户是否有访问该页面（脚本）的权限。
2. 用户是否有对该资源进行操作（查看、修改、删除等）的权限。

为了防止篡改，用户信息应保存在会话变量中。这不仅是为了安全授权，也是为了保存用户认证信息的原则。根据会话中的用户ID检查权限，并确保权限信息不会保存在Cookie或隐藏参数中。

### 总结
本节介绍了授权管理系统中常见的安全问题及如何正确设计授权系统。一个常见的误区是认为URL、表单隐藏参数或Cookie中的内容不会被篡改。正确的实现方法是将这些关键信息保存在无法随意篡改的会话中，并在需要权限的操作前进行权限检查。

### 日志输出
应用程序的日志在安全方面具有重要意义。以下是日志输出的目的：
1. 通过日志发现攻击或事故的先兆，防患未然。
2. 用于遭受攻击或发生事故后的详细调查。
3. 用于应用程序的运维审查。

#### 日志种类
Web应用中涉及的日志类型包括：
1. **Web服务器日志**（如Apache、IIS）
2. **应用程序日志**
3. **数据库日志**

其中，应用程序日志可进一步分为：
- **错误日志**：记录应用程序中的各种错误信息。
- **访问日志**：记录用户的正常访问和异常访问。
- **调试日志**：用于输出调试信息，一般仅在开发或测试环境中启用。

#### 日志需求
在设计时要考虑的日志相关需求包括：
- 需要记录到日志中的所有事件
- 日志中应包含的信息和格式
- 日志文件保护
- 日志文件保存位置
- 日志文件保存期限
- 服务器时间同步

##### 需要记录到日志中的事件
- 登录/退出（成功和失败）
- 账号冻结
- 用户注册/删除
- 密码修改
- 查看重要信息
- 重要操作（如购买、转账支付、发送邮件等）

##### 日志格式
- 访问时间
- 远程IP地址
- 用户ID
- 访问资源对象（URL、页面编号、脚本ID等）
- 操作类型（查看、修改、删除等）
- 操作对象（资源ID等）
- 操作结果（成功或失败、处理记录数量等）

##### 日志文件保护
- 将日志文件保存在独立的服务器上，限制只有有权限的人才能查看。
- 使用NTP协议统一各服务器的时间。

### 实现日志输出
日志可以保存到文件或数据库中。使用第三方日志库（如log4j、log4php、log4net）的好处包括：
- 可以通过简单设置指定日志保存位置。
- 根据不同用途切换保存位置。
- 通过配置文件设置日志格式。
- 指定日志输出级别，无需修改代码即可调整。

### 字符编码和安全
Web应用程序中频繁涉及字符串处理。如果字符编码处理不当，除了会导致乱码问题外，还可能引发系统漏洞。

#### 字符集
- **字符集**：计算机中处理的所有字符的集合。
- **字符编码方式**：将字符集中的字符映射到二进制表示的方法。

常见的字符集包括：
- **ASCII**：7位，英语
- **ISO-8859-1**：8位，西欧语言

在接下来的部分中，我们将详细介绍字符集和字符编码的安全注意事项。