修改自己密码
○
○
○
修改别人密码
○
○（只限本公司用户）
×
如果我们在设计的时候创建了这样的权限矩阵，就能正确地进行后面的开发和测试。
专栏：什么是角色
表 5-5 里的“系统管理员”“企业管理者”“普通用户”一般我们管他们叫作角色（Role）。角色是指拥有一组权限，并用能表现其职责的词汇来命名的称呼。表 5-5 同时很好地解释了角色定义的问题。
角色和用户是不同的概念，用户以某一角色在系统中进行各种活动。
笔者不推荐在实践中不使用角色，而只使用类似 admin 或者 root 这样一看就是管理员用户的方法，原因有如下两点。
如果有多个管理员的话，事后调查会比较困难
管理员密码被多人公用，容易发生安全事故
所以，应该以一人一个 ID 的原则为每个用户创建 ID，并根据各人的职责不同分配不同的角色。
5.3.4 如何正确实现授权管理
用户授权出现漏洞的时候，很多原因都是只想在页面显示中进行权限控制，这是不充分的。正确的方法是在任何操作之前都应该进行如下检查。
用户是否可以访问该页面（脚本）
是否有操作（查看、修改、删除等）该资源的权限
用户信息应该保存在会话变量里，以防止被人篡改。这不光是安全授权的要求，也是保存用户认证信息的原则。
根据保存在会话里的用户 ID 检查权限
权限信息不能保存在 Cookie 或者 hidden 参数里
5.3.5 总结
在本节中我们介绍了在实现授权管理中容易发生的安全性问题，以及如何正确地去设计授权系统。
我们也介绍了，容易导致授权管理漏洞发生的原因，其一就是由于开发者认为存放在 URL 或者表单的 hidden 参数、Cookie 等内容不会被篡改。正确的实现方法是将这些关键信息都保存在不能被随意篡改的会话里，并在需要指定权限才能进行的操作之前进行权限检查。
5.4 日志输出
应用程序输出的日志在安全方面上也有很重要的意义，下面我们就看看应该如何去考虑日志的输出。
5.4.1 日志输出的目的
应用程序的日志之所以在安全方面有重要意义，原因有以下 3 点。
通过日志发现被攻击或者事故的先兆，可以防患未然
用于在遭受攻击或者发生事故后进行事后调查
用于进行应用程序的运维审查
在 5.1 节里我们已经对从日志里发现攻击预兆进行了说明。如果日志里记录的尝试登录或者登录失败的次数比平时多的话，则很可能是受到了外部攻击。如果想做类似的调查，那么日志里必须要记录尝试登录及登录结果的信息才行。
另一方面，如果 Web 应用受到攻击后发生损失，也需要对攻击的详细情况进行深入的调查，这时候日志文件也是不可或缺的。如果日志没保存下来，或者保存的信息不足，要想做更深入的调查就比较困难了。
5.4.2 日志种类
Web 应用里面涉及的日志大概有以下几种。
Web 服务器（Apache、IIS 等）的日志
应用程序的日志
数据库的日志
这三种日志都是必不可少的，我们这里仅对应用程序的日志做详细说明。应用程序的日志也可以细分为下面几类。
错误日志
访问（Access）日志
调试（DeBug）日志
下面分别说明这 3 种类型的日志。
错误日志
错误日志，顾名思义，就是记录应用程序里出现的各种错误信息的日志。当 Web 应用程序内部发生错误的时候，除了在页面内显示给用户诸如“服务器忙，请稍候再试”等信息外，还要将错误的详细情况及原因等记录到日志里。之所以这么做，是因为将错误的详细信息显示给用户，除了使用户困惑以外毫无用处，而且还可能会给攻击者提供攻击线索。而记录到日志里，能为调查或者发现问题提供方便。
错误日志也可以用来检测攻击。比如攻击者在尝试 SQL 注入或者目录遍历攻击的时候，日志中应该存在很多 SQL 错误或者文件打开错误。这些错误正常情况下应该是很少发生的，如果持续发生这样的错误的话，就要怀疑系统是否正在遭受攻击。即使这些错误日志不是由于攻击造成的，考虑到提高应用程序的稳定性，也应该对此类错误进行详细调查并进行修改。
访问日志
访问日志是 Web 应用程序里记录用户访问某资源或者使用某功能的日志。和错误日志不同的是，不管是正常还是异常的访问，都需要记录到访问日志里。
Web 应用程序刚出现的时候（大概在 2004 年之前），多数应用程序中只记录错误日志，也就是说很多异常情况虽然都在应用程序日志里记录下来，但是正常情况的日志还都基本依赖于 Web 服务器记录。不过之后为了应对个人信息泄漏事件等，人们也开始逐渐重视起正常的访问日志来了。
为了达到前面 5.4.1 节里说的日志的 3 个目标的要求，记录正常的访问日志也是很重要的。
另外，很多法律、规范等也要求应用保存访问日志。比如在日本至少就有《个人信息保护法》、《金融商品交易法》以及《Payment Card Industry（PCI）数据安全法规（PCI-DSS）》等法律、法规等对个人信息、访问日志等做出了明确的规定。
调试日志
调式日志，顾名思义，是用来输出调试信息的日志。调试日志输出量太大的话，可能会影对系统的性能造成影响。而且，如果调试日志输出的内容过于详细甚至包括敏感信息的话，还可能带来个人信息泄露问题。调试日志一般只在开发或者测试环境中输出，在生产环境下则不应该输出调试日志。
5.4.3 有关日志输出的需求
这一节我们将对在设计时要考虑的日志相关的需求加以说明。
需要记录到日志里的所有事件
日志里应包括的信息和格式
日志文件保护
日志文件保存位置
日志文件保存期限
服务器的时间调整
需要记录到日志里的所有事件
需要记录到日志里的事件类型，既不能过多也不能太少，要根据日志的使用目的来决定都需要记录哪些事件。一般来说涉及下面列举得用户认证、账号管理等重要信息及操作，需要记录到日志里。
登录、退出（包括成功和失败两种情况）
账号冻结
用户注册、删除
修改密码
查看重要信息
重要操作（购买、转账支付、发送邮件等）
日志里应包括的信息和格式
日志里面需要记载的信息，根据 4W1H（When、Who、Where、What、How）的原则，应该包括下面列出的一些内容。
访问时间
远程 IP 地址
用户 ID
访问资源对象（URL、页面编号、脚本 ID 等）
操作类型（查看、修改、删除等）
操作对象（资源 ID 等）
操作结果（成功或者失败、处理记录数量等）
另外，系统监查可能需要查询很多种类型的日志，所以日志的格式最好统一，以方便日后查看。
日志文件保护
如果日志文件被篡改或者删除的话，那么其存在的意义也就没有了，所以对日志文件自身的安全也必须给以足够的重视并加以保护。除了文件被破坏以外，由于日志中还可能包含个人信息或者其他敏感信息等，也应该限制只有有相关权限的人才能查看日志。
为了保护日志文件，尽可能将其保存在 Web 服务器或者数据库服务器以外的地方，并且分配日志管理者这一角色，并将此角色和网站管理者分离。
日志文件保存位置
日志可以选择保存到文件里，也可以保存到数据库中，但是出于上一小节提到的日志保护的目的，最好把日志保存到单独的服务器上。也许这会导致运营成本上升，所以需要在设计阶段即开始讨论此问题。
日志文件保存期限
在最初的设计阶段，还要根据网站性质，决定各种日志文件的保存期限策略。但是考虑到为了方便对安全事件进行调查，也许很难设置一个合理的日志保存期限，所以也有人采用无期限保存日志的方法。
但是同时日志文件里有可能包含机密信息，如果保存期限变长，那有可能提高信息泄漏的危险，这就和上面所说的矛盾了。我们可以将日志定时地复制到 DVD 光盘，然后将这些媒体保存在物理上安全的地方等，这样即能延长日志保存期限又能保护日志安全。
服务器的时间调整
单一日志文件有时候意义不是很大，更多时候是同时从 Web 服务器、应用程序、数据库、邮件等各种日志同时展开调查。在从众多的日志中寻找线索的时候，就需要统一各个服务器的时间。
为了达到各个服务器时间统一，可以通过使用 NTP（Network Time Protocol）协议来进行服务器间时间的同步设置。
5.4.4 实现日志输出
日志的保存方法主要有保存到文件或者保存到数据库两种，我们选择哪种实现都可以。我们也可以选择使用专门针对日志而开发的第三方库。比较有代表性的第三方日志库包括为 Java 准备的 log4j。log4j 现在是 apache 基金会的一个项目，现在不仅是 Java，还有专供 PHP 使用的 log4php，以及供微软 .NET 使用的 log4net 等衍生产品 22
 。
22
http://logging.apache.org/
使用 log4j 或者 log4php 的好处有如下几点。
可以通过简单设置来指定日志保存位置
根据日志使用目的不同，可以在不同的保存位置自由切换
可以通过配置文件配置日志格式（也称为 Layout）
可以指定输出日志的级别，并且可以不通过修改代码就能修改日志输出级别
log4j 自带的日志保存类型包括以下几种，我们甚至可以不修改代码就能实现按用途将日志分开保存到不同的地方。
文件
数据库
邮件
syslog
Windows 事件日志（NTEVENT）
log4j 提供的日志级别有以下几种，顺序为按严重程度从高到低。
fatal（致命错误）
error（错误）
warn（警告）
info（信息）
debug（调试）
trace（跟踪，输出比调试更详细的信息）
一般来说我们会在开发时将日志输出级别设置为 debug，然后在生产环境中指定为 info 级别，这样的话不用修改代码，也能获取重要程度在 info 以上的日志。
5.4.5 总结
在这一节我们主要针对日志的重要性及安全需求设计做了详细说明。
从系统安全的角度来看，日志不仅有助于在早期发现潜在的攻击事件，还能有助于发生安全事故后的详细调查。
要想记录有效的日志，我们应该遵循 4W1H（When、Who、Where、What、How）的原则采集日志，并且确保日志本身的安全。另外，为了同时能调查从多台服务器采集的日志，还需要通过 NTP 来统一服务器的时间设置。
第 6 章 字符编码和安全
本章将讲解在处理字符编码时容易产生的安全漏洞。Web 应用程序中涉及字符串的操作非常多，如果对字符编码的处理出现问题的话，除了会造成程序缺陷（即Bug）以外，还可能导致系统漏洞。
本章的前半部分作为入门将介绍一下字符集和字符编码，从后半部分开始讲解在处理字符集或字符编码时可能引起的安全隐患，最后将讨论一下如何正确处理字符编码。
6.1 字符编码和安全概要
Web 应用程序里频繁地出现字符串的处理，如果在字符串处理中有考虑不周的地方，除了会产生各种各样的 Bug（尤其是乱码问题）之外，还可能会产生系统漏洞。
在 Web 应用中涉及字符编码处理的地方主要存在于下图 6-1 里标记出来的地方。
图 6-1 Web 应用里涉及字符编码处理的地方
从上图可以看出，在很多处理环节我们都必须要意识到字符编码的存在。这些和字符编码有关的设置或者处理如果不正确的话，很有可能就导致系统安全漏洞的出现。
本章将会在学习字符编码安全知识之后，对字符编码安全相关的基础知识加以说明。现在广泛使用的“层字符编码”（Character Code）这个用语可能有点模棱两可，它实际上包含下面两层意思。
字符集（Character Set）
字符编码方式（Character Encoding Scheme）
从下一节开始我们将分别对这两个概念加以说明。
6.2 字符集
这一节中我们将讲述字符集的相关知识。字符集，即计算机中处理的所有字符的集合。在厘清字符集的概念之后，我们会对处理字符集时的注意事项进行简单说明。
什么是字符集
字符集，顾名思义，是一组字符的集合。大写英文字母（A、B、C、……Z）、数字（0、1、2、……9）等集合都是字符集。在计算机上处理字符集的时候，由于计算机中的信息都是以二进制方式存储的，如果直接处理字符的话会很不方便，所以给每个字符都分配一个编号（符号）来进行标识。严格来说，分配了编号（符号）的字符集叫作符号化字符集，不过本书的说明里都将统一使用字符集这一称呼。
表 6-1 是我们总结了比较常见的字符集列表。
表 6-1 常见字符集
字符集名称
位长
对应语言
说明
ASCII
7位
英语
最早的标准化字符集
ISO-8859-1
8位
西欧语言