FAILED (failures=1)
Ran 1 test in 0.001s
+['b']
-['a'，'b']
一
def test_range(self):
for x in range（5）:
ifx>4:
self.fail("Range returned a too big value:%d"%x)
本电子书仅限学习交流使用，请勿用于商业用途
6.1基础知识
67
---
## Page 75
熊猫爱中国www.xiongmaoi.com
熊猫爱中国
示例6.3忽略测试
而不是手工抛出这一异常，另外也可以使用unittest.skip 装饰器，如示例6.3所示。
它只是被简单地标注为已忽略。更便利的方法是使用unittest.TestCase.skipTest（)
否有条件地运行某个测试。为此，可以抛出 unitest.SkipTest 异常。当该测试被执行时，
68
OK(skipped=3)
Ran 3 tests in 0.000s
test_skip_at_runtime (test_skip.TestSkipped) ... skipped "Finally I don't
test_mylib (test_skip.TestSkipped) ... skipped 'mylib is not available
$ python -m unittest -v test_skip
执行后，该测试文件会输出下列内容：
class TestSkipped(unittest.TestCase) :
except ImportError:
try:
import unittest
第6章单元测试
want to run it"
def test_skip_at_runtime(self):
@unittest.skip("Do not run this")
mylib = None
 import mylib
def test_mylib(self):
@unittest.skipIf(mylib is None,
def test_fail(self):
if True:
self.assertEqual (mylib.foobar(), 42)
self.fail("This should not be run")
self.skipTest("Finally I don't want to run it")
本电子书仅限学习交流使用，请勿用于商业用途
"mylib is not available")
---
## Page 76
熊猫爱中国www.xiongmaoi.com
熊猫爱
（参见6.2节）。
之前，在干净的状态下被重建。这对于创建测试环境是非常有用的，经常被称为 fixture
来执行整个类，或者指定path.to.your.module来执行整个模块。
路径和类名之前有一个冒号。也可以指定path.to.your.module：ClassOfYourTest
使用nosetests时，经常会只想运行某个特定的测试。你可以选择要运行的测试作为参
它可以非常方便地创建在每个测试中要用到的对象，但你需要保证它们在运行每个测试
提示
示例6.4使用unittest的setUp方法
6.4所示。
特殊的方法setUp和tearDown，
行特定测试模块仍然是很有用的。
块的方式。它没有nosetests 那么方便，因为它不会发现自己的测试文件，但它对于运
在示例6.3中你可能已经注意到，unittest 模块提供了一种执行包含测试的 Python模
提示
在这个示例中，setUp 会在运行 test_length 和 test_has_one 之前被调用。
class TestMe(unittest.TestCase):
import unittest
在许多场景中，需要在运行某个测试前后执行一组通用的操作。unittest 提供了两个
def test_has_one(self):
def test_length(self) :
def setUp(self):
self.assertIn(l,self.list)
self.assertEqual(len(self.list), 3)
self.assertEqual(len(self.list), 4)
seif.list.append(4)
self.1ist=[1,2,3]
本电子书仅限学习交流使用，请勿用于商业用途
，它们会在类的每个测试方法调用前后执行一次，如示例
6.1基础知识
98
---
## Page 77
熊猫爱中国www.xiongmaoi.com
熊猫爱中国
示例6.5使用fixtures.EnvironmentVariable
对于在os.environ中添加或修改变量很有用，并且变量会在测试退出后重置，如示例6.5
标准库的一部分）提供了一种简单的创建fixture 类和对象的机制，如useFixture 方法。
所示。
试结束后被删除。
试结束后将其重置为默认值。对临时文件创建的依赖也需要该文件在测试开始前被创建，测
要一个对象来表示你的应用程序的配置状态，很可能你希望在每个测试前初始化它，并在测
方式是为它们构建一个特殊的组件，因为它们会在许多不同的地方被重用。例如，如果你需
2
提示
70
节中讨论）
通过同时运行多个测试可以加快速度。只需为 nosetests 调用加上--process=N 选项 
fixtures 模块提供了一些内置的fixture，如 fixtures.EnvironmentVariable,
当你发现类似的通用模式时，最好创建一个fixture，以便它可以被你的所有其他测试用
unittest 只为我们提供了已经提及的 setUp 和tearDown 函数。不过，是有机制可
class TestEnviron(fixtures.TestWithFixtures):
import os
import fixtures
在单元测试中，fixture 表示“测试前创建，测试后销毁”的（辅助性）组件。比较好的
第6章单元测试
def test_environ_no_fixture(self):
def test_environ(self) :
fixture
self.assertEqual(os.environ.get("FoOBAR"), None)
fixture = self.useFixture(
fixtures.EnvironmentVariable("FOOBAR","42"))
本电子书仅限学习交流使用，请勿用于商业用途
---
## Page 78
熊猫爱中国www.xiongmaoi.com
熊猫爱中Python 标准库中用来创建 mock 对象的库名为mock（https://pypi.python.org/pypi/mock/
示例6.6mock 的基本用法
用下面的代码片段：
1.0.1)。从 Python 3.3开始，它被命名为 unit.mock，合并到Python 标准库。因此可以使
有可能值，几乎是不可能的（至少会非常复杂)。此外，测试所有失败场景也是极其困难的。
在创建精确地描述测试代码的状态的环境时，它们非常有用。
6.3模拟（mocking)
为测试环境对代码进行测试。
 本节的示例代码之所以没有用 unittest.TestCase，是因为 fixtures.TestWith-
注意
例重用。这极大地简化了逻辑，并且能准确地体现你在测试什么以及以何种方式测试。
Fixtures 继承自 unittest.TestCase。
它使用起来也非常简单，如示例6.6所示。
要保持Python3.3和之前版本之间的向后兼容。
try:
一种更简单的方式是创建一组根据这些特定场景进行建模的 mock 对象，并利用它们作
如果正在开发一个HTTP客户端，要想部署HTTP服务器并测试所有场景，令其返回所
mock 对象即模拟对象，用来通过某种特殊和可控的方式模拟真实应用程序对象的行为。
>>> def print_hello():
42
>>>m.some_method()
>>>
>>>import mock
except ImportError:
import mock
from unittest import mock
m.some _method.return_value = 42
本电子书仅限学习交流使用，请勿用于商业用途
6.3模拟（mocking）
L
---
## Page 79
熊猫爱中国www.xiongmaoi.com
熊猫爱中国 如示例6.7 所示。
示例6.7确认方法调用
乙
Actual call: some_method('foo','bar')
AssertionError: Expected call: some_method('foo','baz')
>>> m.some_method.assert_called_once_with('foo', mock.ANY)
>>> import mock
模拟使用动作/断言模式，也就是说一旦测试运行，必须确保模拟的动作被正确地执行，
即使只使用这一组功能，也应该可以模拟许多内部对象以用于不同的数据场景中。
>>> m.some_method.assert_called_once_with('foo',
>>> m.some_method('foo','bar')
3
>>> m.some_method.call_count
>>> def print_hello():
>>> m.some_method.side_effect = print_hello
print("hello world!")
Traceback (most recent call last):
>>> m.some_method.assert_called_once_with('foo','bar')
>>>m=mock.Mock（)
hello world!
>>>m.some method()
... print("hello world!")
helloworld!
>>> m.some_method()
File "/usr/lib/python2.7/dist-packages/mock.py", 1ine 835, in
File "/usr/lib/python2.7/dist-packages/mock.py", 1ine 846, in
File"",line 1,in 
第6章单元测试
raise AssertionError(msg)
return self.assert_called_with(*args, **kwargs)
assert_called_with
assert_called_once_with
return 43
本电子书仅限学习交流使用，请勿用于商业用途
'baz')
---
## Page 80
熊猫爱中国www.xiongmaoi.com
熊猫爱
示例6.9使用mock.patch 测试一组行为
行各种条件下的测试，如示例6.9所示。
示例6.8使用mock.patch
将会匹配传递给mock方法的任何参数。
传入参数被调用。如果不知道该传入何种参数，可以使用 mock.ANY 作为参数值传入，它
电国IOError：Testing!
def is_python_still_a_programming_language() :
import unittest
import requests
通过mock.pach 方法，可以修改外部代码的任何部分，使其按照需要的方式对软件进
有时可能需要来自外部模块的函数、方法或对象。mock 库为此提供了一组补丁函数。
class WhereIsPythonError(Exception) :
import mock
>>> import mock
显然，很容易传一个 mock 对象到代码的任何部分，并在其后检查代码是否按其期望的
File "", line 2, in fake_os_unlink
Traceback (most recent call last):
>>> with mock.patch('os.unlink', fake_os_unlink) :
>>
>>> import os
File "", line 2, in 
else:
except IOError:
try:
pass
pass
r = requests.get("http://python.org")
def fake_os_unlink(path):
os.unlink('foobar')
if r.status_code == 200:
raise IOError("Testing!")
本电子书仅限学习交流使用，请勿用于商业用途
6.3模拟（mocking）
3
---
## Page 81
熊猫爱中国www.xiongmaoi.com
熊猫爱中国
测试函数的上下文内使用模拟时这会更方便。
4
示例6.9 使用了 mock.patch 的装饰器版本，这并不改变它的行为，但当需要在整个
class TestPython(unittest.TestCase):
def raise_get(url) :
 def get_fake_get(status_code, content) :
第6章
def test_ioerror(self):
@mock.patch('requests.get', raise_get)
def test_bad_status_code(self):
@mock.patch('requests.get', get _fake_get(
def test_python_is_not(self):
@mock.patch('requests.get', get_fake_ get(
def test_python_is(self):
@mock.patch('requests.get', get_fake_get(
raise IOError("Unable to fetch url %s" % url)
200, 'Python is a programming language for sure'))
return fake_get
def fake_get(url):
m.content = content
m.status_code = status_code
m=mock.Mock（)
self.assertRaises(WhereIsPythonError,
404，whatever'））
 200, 'Python is no more a programming language'))
self.assertRaises(WhereIsPythonError,
self.assertTrue(is_python_still_a programming_language ())
return m
单元测试
本电子书仅限学习交流使用，请勿用于商业用途
is_python_still_a_programming_language)
 is_python_still_a_programming_language)