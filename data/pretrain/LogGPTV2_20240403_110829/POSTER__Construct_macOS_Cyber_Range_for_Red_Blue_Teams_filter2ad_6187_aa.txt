title:POSTER: Construct macOS Cyber Range for Red/Blue Teams
author:Yi-Hsien Chen and
Yen-Da Lin and
Chung-Kuan Chen and
Chin-Laung Lei and
Chun-Ying Huang
POSTER: Construct macOS Cyber Range for Red/Blue Teams
Yi-Hsien Chen1,2, Yen-Da Lin2, Chung-Kuan Chen2, Chin-Laung Lei1, Chun-Ying Huang3
1Department of Electrical Engineering, National Taiwan University 2CyCraft Technology Corporation
3Department of Computer Science, National Chiao Tung University
Email:PI:EMAIL,PI:EMAIL,PI:EMAIL,PI:EMAIL,PI:EMAIL
ABSTRACT
More and more malicious apps and APT attacks now target macOS,
making it crucial for researchers to develop threat countermeasures
on macOS. In this paper, we attempt to construct a macOS cyber
range for the evaluation of red team and blue team performances.
Our proposed system is composed of three fundamental compo-
nents: an attack-defense association graph, a Go language-based
red team emulation tool, and a toolkit for blue team performance
evaluation. We demonstrate the effectiveness of our proposed cyber
range with real-world scenarios, and believe it will stimulate more
research innovations on threat analysis for macOS.
CCS CONCEPTS
• Security and privacy → Intrusion/anomaly detection and mal-
ware mitigation;
KEYWORDS
Forensic, Blue Team, Cyber Range, Red Team, Penetration Testing
1 INTRODUCTION
There is an increasing number of users using macOS and therefore
more and more threat actors target on attacking macOS. For in-
stance, state-sponsored APT28 utilized Trojan.MAC.APT2 to attack
military and government organizations [1]. Malware examples such
as OSX.AppleJeus [5] and OSX.NetWire.A [4] are widely used by
malicious actors to attack cryptocurrency exchanges. Although
macOS is popular, we observed that research works seldom discuss
attack and defense techniques on macOS. As a result, both blue
teams and red teams are not acquainted with macOS security tech-
niques which include attack methods, protection mechanisms and
tools for investigating. Thus, a systematic survey of macOS attack
and defense technique is necessary, and a modularized cyber range
for training red teams and blue teams would greatly improve the
skills and experiences of the teams.
In this paper, we attempt to resolve the aforementioned issues
by building a cyber range for macOS. Figure 1 shows the architec-
ture of our proposed cyber range. The cyber range is composed
of three components. First, we propose building an attack-defense
association graph, which systematically summarizes possible attack
and defense techniques in macOS. The purpose of this graph is to
describe full relationships between malware/APT events, attack
Permission to make digital or hard copies of part or all of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for third-party components of this work must be honored.
For all other uses, contact the owner/author(s).
ASIA CCS ’20, October 5–9, 2020, Taipei, Taiwan
© 2020 Copyright held by the owner/author(s).
ACM ISBN 978-1-4503-6750-9/20/10.
https://doi.org/10.1145/3320269.3405449
Figure 1: The architecture of our proposed cyber range.
techniques, detection data artifacts, and analysis tools. Second, we
develop a general remote administration tool (RAT) for red team
emulation. The red team players can launch attacks, log attacks,
and then map attacks to the MITRE ATT&CK matrix by using
this tool. Third, we develop a toolkit for blue team evaluation by
leveraging open-source tools. The blue team players can collect
artifacts, label artifacts with MITRE ATT&CK ID, and then evaluate
their detection tools by using the toolkit. By combining these three
components, we process red team logs and blue team reports, and
then generate a comprehensive attack-defense association graph
for users to easily identify the relationships between involved par-
ties. With our proposed cyber range, it would be easier for security
practitioners to evaluate the performance of red teams and blue
teams.
2 ATTACK-DEFENSE ASSOCIATION GRAPH
The core of the association graph is the MITRE ATT&CK matrix.
The MITRE ATT&CK matrix is a public adversary technique data-
base. Based on real-world observations in malware and APT reports,
the matrix systematic summarizes and enumerates adversary tac-
tics and techniques. Its techniques cover most of the adversary
techniques involved in the whole adversary life cycle. Since MITRE
ATT&CK has become the de facto standard for developing threat
models and methodologies in security community, we use it to
detect and label attacks.
We build an attack-defense association graph based on MITRE
ATT&CK matrix for evaluating red and blue teams. A sample graph
is depicted in Figure 2. The objective of this graph is to depict re-
lationships between attack and defense techniques. For the attack
side, we have to identify involved attack techniques based on the
MITRE ATT&CK matrix. For the defense side, we have to find use-
ful detection and forensic tools and sort out the artifacts supported
by them. A link for bridging the attack side and the defense side is
added between an attack technique and an artifact if the artifact
contains evidence for revealing the attack technique. For instance,
Poster Session ASIA CCS '20, October 5–9, 2020, Taipei, Taiwan934Figure 2: A sample attack-defense association graph.
an artifact file operation event could be used to detect the technique
T1105 remote file copy. Therefore, a link is added between the afore-
mentioned artifact and technique. There are lots of artifacts that can
be detected by forensic tools on macOS, including Apple system log,
key-chain, unified Log, and so on. We can identify these artifacts
and then track attacker activities.
There are several advantages in using our proposed association
graph. From the perspective of red team, the attack side summarizes
the techniques used by threat actors and malicious applications.
Security practitioners can then identify commonly used techniques
by observing the number of links connected from threat actors
and malicious applications to their corresponding techniques. From
the perspective of blue team, the relationships between detection
and forensic tools and their supported artifacts show the capabili-
ties of the tools. It provides an important information for security
practitioners to decide how to select and deploy these tools.
3 RED TEAM
In this section, we first use a macOS malware sample to illus-
trate how to construct the attack side of an attack-defense associ-
ation graph. We then develop our red team emulation tool based
on techniques identified in the graph. The sample we chosen is
OSX.NetWire.A discovered by Objective-See in 2019. It is a variant
of OSX.NetWire, which is known as the first Trojan on macOS. The
attacker used a phishing mail that contains a link to a malicious
site. Upon clicking, the attacker sends the malware to the user’s
machine through a 0-day of Firefox (CVE-2019-11707). After ex-
ploited, it registers as LaunchAgent and Login Item to maintain its
persistence. Finally, it provides several features for remote attackers
such as shell login, screen capture, and keyboard event capture.
In the development of our red team emulation tool, we keep
it modularized and compatible with the latest macOS. There are
several challenges after a macOS updates. For instance, the CVE
used in the initial access stage may be fixed, and a malicious process
may be forbidden to execute under a newer security mechanism.
Thus, every single step in our storyline must be replaceable. We
have to update it and look for possible solutions regularly. Our tool
is mainly developed in Go language, and some plugins for privilege
escalation and process injection are developed in C and Objective-C.
The advantages of developing in Go language is that its binary is
extremely complicated for analysis and there is a bunch of built-in
packages for network communications. These two features make
Go language better for developing malware.
The initial access of our tool is a CVE (CVE-2018-6574). It allows
attacker to execute commands during gathering packages. We use it
to download and execute the emulation tool. It is worth noting that
it can bypass GateKeeper, a macOS security mechanism, because
GateKeeper only sets the flag for files downloaded from normal
means, not including command-line tools. After exploited, we reg-
ister our tool as a user-level LaunchAgent. We do not register it
as a Login Item like OSX.NetWire.A did, since it may leave too
many footprints for blue teams. Our tool connects to the C2 server
through a socket. We provide an interactive shell on the server-side,
and the red team can use it to send shell commands, take screen-
shots, and perform specific attacks based on MITRE ATT&CK ID
to victims. Our emulation tool also attempts to spread itself by
scanning SSH configurations. Furthermore, it gains administrator
privileges by spoofing privileged helper. After privilege escalation,
it registers itself as a system-level LaunchDaemon and provides
persistent service for red team.
4 BLUE TEAM
We survey several famous forensic tools for blue team, and sum-
marize the artifacts supported by these tools. Then we integrate
these forensic tools into our blue team toolkit, which could assist
investigators in forensics. By the phase of investigation, our blue
team toolkit has two phases: 1) Information Collection phase and
2) Malicious Activity Detection phase. The former phase collects ei-
ther dynamic information during the attack or forensic-based static
information. The collected data then feed to the later phase, which
contains several patterns that could identify possible malicious
activities and label it with MITRE ATT&CK IDs.
During the Information Collection phase, our blue team toolkit
composed of two classes of tools - static forensic tools and dynamic
monitor tools. Static forensic tools can be further classified to two
kinds. The first kind collects forensic evidence by gathering infor-
mation from plists, SQLite databases and the local file system. The
second kind collects Apple’s new logging system introduced since
macOS 10.12. These tools complement each other and increase the
visibility for our forensics.
The first kind of static tools include AutoMacTC [2], osquery [6],
and osxcollector [7]. AutoMacTC is easy to use, is highly config-
urable, and uses modular framework to quickly add features and
adapt changings on macOS. AutoMacTC collects a wide range of
macOS information from browser information such as downloads,
history and browser profiles to system information such as lsof,
netstat, pslist. For instance, AutoMacTC’s autoruns module finds
the application information (.plist) in LaunchAgents, LaunchDae-
mons and Startup Items. While these locations can be abused by
adversaries to achieve persistence, this information is highly valu-
able for forensics. Osquery is another tool in this type. Osuery, a
tool developed by Facebook, treats an OS as a relational database.
Given a SQL-like query statement, osquery could retrieve system
information. Thus osquery is highly customizable, interactive and
possible to support different OSes. These tools help our blue team
toolkit collect static information.
The second kind of static tools include Consolation 3, log &
built-in Console.app, and UnifiedLogReader. Consolation 3, log
+ Console.app (built-in) are essentially the same, Consolation 3
has a GUI front-end which helps users easily use various filters