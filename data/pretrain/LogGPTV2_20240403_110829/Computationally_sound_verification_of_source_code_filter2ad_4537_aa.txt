title:Computationally sound verification of source code
author:Michael Backes and
Matteo Maffei and
Dominique Unruh
Computationally Sound Veriﬁcation of Source Code
Michael Backes
Saarland University and
MPI-SWS
PI:EMAIL
Matteo Maffei
Saarland University
Saarbrücken, Germany
PI:EMAIL
Dominique Unruh
Saarland University
Saarbrücken, Germany
unruh@mmci.uni-
saarland.de
ABSTRACT
Increasing attention has recently been given to the formal
veriﬁcation of the source code of cryptographic protocols.
The standard approach is to use symbolic abstractions of
cryptography that make the analysis amenable to automa-
tion. This leaves the possibility of attacks that exploit
the mathematical properties of the cryptographic algorithms
themselves. In this paper, we show how to conduct the pro-
tocol analysis on the source code level (F# in our case) in
a computationally sound way, i.e., taking into account cryp-
tographic security deﬁnitions.
We build upon the prominent F7 veriﬁcation framework
(Bengtson et al., CSF 2008) which comprises a security type-
checker for F# protocol implementations using symbolic ide-
alizations and the concurrent lambda calculus RCF to model
a core fragment of F#.
To leverage this prior work, we give conditions under
which symbolic security of RCF programs using crypto-
graphic idealizations implies computational security of the
same programs using cryptographic algorithms. Combined
with F7, this yields a computationally sound, automated ver-
iﬁcation of F# code containing public-key encryptions and
signatures.
For the actual computational soundness proof, we use the
CoSP framework (Backes, Hofheinz, and Unruh, CCS 2009).
We thus inherit the modularity of CoSP, which allows for eas-
ily extending our proof to other cryptographic primitives.
Categories and Subject Descriptors
C.2.2 [Computer-Communication Networks]: Network
Protocols—Protocol Veriﬁcation
General Terms
Security, theory, veriﬁcation
Keywords
Computational soundness, veriﬁcation, source code
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’10, October 4–8, 2010, Chicago, Illinois, USA.
Copyright 2010 ACM 978-1-4503-0244-9/10/10 ...$10.00.
1.
INTRODUCTION
Proofs of security protocols are known to be error-prone
and, owing to the distributed-system aspects of multiple
interleaved protocol runs, diﬃcult for humans to generate.
Hence, work towards the automation of such proofs started
soon after the ﬁrst protocols were developed. From the start,
the actual cryptographic operations in such proofs were ide-
alized into so-called symbolic or Dolev-Yao models, follow-
ing [25, 26, 37] (see, e.g., [33, 40, 3, 36, 39, 14]). This ideal-
ization simpliﬁes proofs by freeing them from cryptographic
details such as computational restrictions, probabilistic be-
havior, and error probabilities. Unfortunately, these idealiza-
tions also abstract away from the algebraic properties a cryp-
tographic algorithm may exhibit. Therefore a symbolic anal-
ysis may overlook attacks based on these properties. In other
words, symbolic security does not imply computational se-
curity. In order to remove this limitation, [5] introduced the
concept of computational soundness. We call a symbolic
abstraction computationally sound when symbolic security
implies computational security. A computational soundness
result allows us to get the best of two worlds: The analysis
can be performed (possibly automatically) using symbolic
abstractions, but the ﬁnal results hold with respect to the
realistic security models used by cryptographers.
A drawback common to the existing computational sound-
ness results, is, however, that they work on abstract proto-
col representations (e.g., the applied π-calculus [2]). That
is, although the analysis takes into account the actual cryp-
tographic algorithms, it still abstracts away from the actual
protocol implementation. Thus, even if we prove the pro-
tocol secure, the implementation that is later deployed may
contain implementation errors that introduce new vulnera-
bilities. To avoid this issue, recent work has tackled the
problem of verifying security directly on the source code,
e.g., [28, 17, 16]. Yet, this veriﬁcation is again based on
symbolic idealizations.
Thus, we are left with the choice between veriﬁcation
techniques that abstract away from the cryptographic al-
gorithms, and veriﬁcation techniques that abstract from the
protocol implementation. To close this gap, we need a com-
putational soundness result that applies directly to protocol
implementations.
Our result. We present a computational soundness re-
sult for F# code. For this, we use the RCF calculus pro-
posed by [16] as semantics for (a core fragment of) F#.
RCF allows for encoding implementation in F# by oﬀer-
ing a lambda-abstraction constructor that allows for rea-
soning about higher-order languages. Moreover, it supports
387concurrency primitives, inductive datastructures, recursion,
and an expressive treatment of symbolic cryptography us-
ing sealing mechanisms. Furthermore, RCF supports very
general trace-based security properties that are expressed in
ﬁrst-order logic, using assumptions and assertions. (Previ-
ous computational soundness results are restricted to calculi
like the applied π-calculus which lack these features.) We
specify a cryptographic library that internally uses symbolic
abstractions, and prove that if a protocol is symbolically se-
cure when linked to that library, it is computationally secure
when using actual cryptographic algorithms. Our approach
enables the use of existing symbolic veriﬁcation tools, such
as the type-checker F7 [16]. The requirement to use these
tools in particular ruled out potential changes to the RCF
semantics that would have simpliﬁed to establish a computa-
tional soundness result. We stress, however, that our result
does not depend on any particular symbolic veriﬁcation tech-
nique.
We have derived computational soundness for encryptions
and digital signatures. Our result is, however, extensible:
most of our theorems are parametric in the set of crypto-
graphic primitives and the remaining theorems can be eas-
ily extended. Furthermore, by basing on the so-called CoSP
framework [7], our proof solely concerns the semantics of
RCF programs and does not involve any cryptographic ar-
guments; thus extending our proofs to additional crypto-
graphic abstractions supported by CoSP does not require a
deep knowledge of cryptography, which makes such an ex-
tension accessible to a more general audience.
Due to space constraints, we omit many details and proofs.
These are given in the full version [9].
1.1 Our techniques
CoSP (Section 3). The main idea of our work is to reduce
computational soundness of RCF to computational sound-
ness in the CoSP framework [7]. Thus, we ﬁrst give an
overview of the ideas underlying CoSP. All deﬁnitions in
CoSP are relative to a symbolic model that speciﬁes a set
of constructors and destructors that symbolically represent
computational operations, and a computational implemen-
tation that speciﬁes cryptographic algorithms for these con-
structors and destructors. In CoSP, a protocol is represented
by an inﬁnite tree that describes the protocol as a labeled
transition system. Such a CoSP protocol contains actions
for performing abstract computations (applying construc-
tors and destructors to messages) and for communicating
with an adversary. A CoSP protocol is endowed with two
semantics, a symbolic execution and a computational execu-
tion. In the symbolic execution, messages are represented
by terms.
In the computational execution, messages are
bitstrings, and the computational implementation is used
instead of applying constructors and destructors. A com-
putational implementation is computationally sound if any
symbolically secure CoSP protocol is also computationally
secure. The advantage of expressing computational sound-
ness results in CoSP is that the protocol model in CoSP
is very general. Hence the semantics of other calculi can
be embedded therein, thus transferring the computational
soundness results from CoSP to these calculi.
DY library (Sections 4, 5). To apply CoSP to RCF,
we ﬁrst deﬁne a library σM
DY that encodes an arbitrary sym-
bolic model. This library internally represents all messages
as terms in some datatype. Manipulation of these terms
rob. →-σM
DY-safety
rob. computational safety
1.
3.
rob. ;-σM
DY-safety
2.
rob. SExec-safety
Figure 1: Main steps of the computational sound-
ness proof
is possible only through the library, neither the program
nor the adversary can directly manipulate messages. σM
DY
also provides functions for sending and receiving messages.
Given the library σM
DY, we can deﬁne a notion of symbolic
security. A program A contains certain events and security
policies speciﬁed in ﬁrst-order logic. We call A robustly →-
σM
DY-safe if the security policies are satisﬁed in every step
of the execution when A runs in parallel with an arbitrary
opponent and is linked to the library σM
DY.
Next, we specify a probabilistic computational semantics
for RCF programs A. In these semantics, we specify an algo-
rithm (the computational RCF-execution) that executes A.
In each step of the execution, the adversary is asked what re-
duction rule to apply to A. Letting the adversary make these
scheduling decisions resolves the non-determinism in the
RCF program and simultaneously makes our result stronger
by making the worst-case assumption that the adversary has
total control over the scheduling. All messages are repre-
sented as bitstrings, and any invocation of σM
DY is replaced
by the corresponding computation from the computational
implementation. Notice that in the computational RCF-
execution, the adversary is not limited to invoking library
routines; since messages are bitstrings, the adversary can
perform arbitrary polynomial-time operations on them. If
all security policies are satisﬁed in each step of the compu-
tational RCF-execution, we call A robustly computationally
safe.
Our goal is to show that, if an RCF program is robustly
DY-safe, then it is robustly computationally safe. To
→-σM
prove this, we introduce two intermediate semantics.
• The reduction relation ;: This semantics is very simi-
lar to the original semantics of RCF, except that all in-
vocations of σM
DY are internalized, i.e., symbolic crypto-
graphic operations are atomic operations with respect
to ;. This leads to the notion of robust ;-σM
DY-safety.
• The symbolic RCF-execution SExec: This semantics is
deﬁned by taking the deﬁnition of the computational
RCF-execution, and by replacing all computational
operations by the corresponding symbolic operations.
That is, the symbolic and the computational RCF-
execution are essentially the same algorithm, one oper-
ating on terms, the other doing the corresponding op-
erations from the computational implementation. This
leads to the notion of robust SExec-safety.
In the ﬁrst step (cf. Figure 1), we show that robust →-σM
DY-
safety implies robust ;-σM
DY-safety. This proof is fairly
straightforward, because ; just internalizes the deﬁnition
of σM
DY.
In the second step, we show that robust ;-σM
DY-safety im-
plies robust SExec-safety. The ﬁrst technical diﬃculty here
lies in the fact that robust ;-σM
DY-safety is deﬁned with re-
spect to adversaries that are expressed as RCF-programs
and that run interleaved with the program A, while ro-
bust SExec-safety models the adversary as an external non-
deterministic entity. Thus, for any possible behavior of the
SExec-adversary, we have to construct an RCF-program Q
388that performs the same actions when running in parallel with
A. The second diﬃculty lies in the fact that the logic for
describing security properties is quite general. In particular,
it allows for expressing facts about the actual code of σM
DY
(e.g., the code of one function is a subterm of the code of an-
other). Since the library σM
DY is not present in the symbolic
RCF-execution, we need to identify criteria that ensure that
the policies do not depend on the actual code of σM
DY.
In the third step, we use the fact that the symbolic and
the computational RCF-execution of A have essentially the
same deﬁnition, except that one performs symbolic and the
other computational operations. Thus, if we express these
executions by a labeled transition system that treats opera-
tions on messages as atomic steps, we get the same transition
system for both executions, only with a diﬀerent interpreta-
tion of these atomic steps. This transition system is a CoSP
protocol ΠA, and the symbolic and the computational exe-
cution of that protocol are equivalent to the symbolic and
the computational RCF-execution of A. Thus, assuming a
computational soundness result in CoSP, we get that robust
SExec-safety implies robust computational safety. Combin-
ing this with the previous steps, we have that robust →-σM
DY-
safety implies robust computational safety (Theorem 1).
DY-safety as well.
Note that this argumentation is fully generic, it does not
depend on any particular symbolic model. Once we have a
new computational soundness result in CoSP, this directly
translates into a result for RCF. Note further that no actual
cryptographic proofs need to be done; all cryptographic de-
tails are outsourced to CoSP. The library σM
DY is very sim-
ilar in spirit to the one used in [18], we believe that the
veriﬁcation techniques used there can be applied to robust
→-σM
Encryption and signatures (Section 5.4). Our results
so far are fully generic. In the CoSP framework, a computa-
tional soundness result exists for public-key encryption and
signatures. Combining this result with our generic result,
we get a self-contained computational soundness result for
encryptions and signatures in RCF (Theorem 2). The result
in the CoSP framework imposes certain restrictions on the
use of the cryptographic primitives (e.g., one is not allowed
to send secret keys around). To ensure that these restric-
tions are met, we introduce a wrapper-library σHighlevel for
σM
DY. A program that only invokes functions from σHighlevel
is guaranteed to satisfy these restrictions.
Sealing-based library. In the library σM
DY, we have inter-
nally represented symbolic cryptography as terms in some
datatype. An alternative approach is used in the F7 veriﬁ-
cation framework [16] for analyzing RCF/F#-code. In this
approach, a library based on seals is used. Roughly, a seal
consists of a mutable reference and accessor functions. An
encryption key pair, e.g., is modeled as a sealed map. The
encryption key is a function that inserts the plaintext into
that map and returns the index of the plaintext. The de-
cryption key is a function that retrieves the plaintext given
the index. Seals have proven well-suited for security analy-
sis by type-checking, since they allow for polymorphic types.
We present a sealing-based library σS modeling encryptions
and signatures. We show that robust safety with respect
to σS implies robust ;-σM
DY-safety by proving the existence
of a simulation between executions with respect to the two
libraries. Combined with Theorem 2, this immediately re-