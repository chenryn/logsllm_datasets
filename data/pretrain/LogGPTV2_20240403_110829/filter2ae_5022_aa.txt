**作者：J0o1ey@M78安全团队**  
**原文链接：**
## 0x01 PDO简介
PDO全名PHP Data Object
PDO扩展为PHP访问数据库定义了一个轻量级的一致接口。PDO提供了一个数据访问抽象层，这意味着，不管使用哪种数据库，都可以使用相同的函数（方法）来查询和获取数据。
PHP连接MySQL数据库有三种方式（MySQL、Mysqli、PDO），列表性比较如下：
| Mysqli | PDO | MySQL  
---|---|---|---  
引入的PHP版本 | 5.0 | 5.0 | 3.0之前  
PHP5.x是否包含 | 是 | 是 | 是  
服务端prepare语句的支持情况 | 是 | 是 | 否  
客户端prepare语句的支持情况 | 否 | 是 | 否  
存储过程支持情况 | 是 | 是 | 否  
多语句执行支持情况 | 是 | 大多数 | 否  
如需在php中使用pdo扩展，需要在php.ini文件中进行配置
## 0x02 PDO防范SQL注入
### ①调用方法转义特殊字符
**quote()方法(这种方法的原理跟addslashes差不多，都是转义)**
PDO类库的quate()方法会将输入字符串（如果需要）周围加上引号，并在输入字符串内转义特殊字符。
EG①:
    quote($string) . "n";
    ?>
输出
    Unquoted string: Naughty ' string
    Quoted string: 'Naughty '' string'
EG②
test.sql
    SET NAMES utf8mb4;
    SET FOREIGN_KEY_CHECKS = 0;
    -- ----------------------------    -- Table structure for user
    -- ----------------------------    DROP TABLE IF EXISTS `user`;
    CREATE TABLE `user`  (
      `id` int(10) NOT NULL,
      `username` varchar(255) CHARACTER SET utf8 COLLATE utf8_unicode_ci NULL DEFAULT NULL,
      `password` varchar(255) CHARACTER SET utf8 COLLATE utf8_unicode_ci NULL DEFAULT NULL
    ) ENGINE = MyISAM CHARACTER SET = utf8 COLLATE = utf8_unicode_ci ROW_FORMAT = Dynamic;
    -- ----------------------------    -- Records of user
    -- ----------------------------    INSERT INTO `user` VALUES (0, 'admin', 'admin');
    INSERT INTO `user` VALUES (1, 'user', 'user');
    SET FOREIGN_KEY_CHECKS = 1;
pdo.php
    quote($username);
         $password=$pdo->quote($password);
        $sql="select * from user where username={$username} and password={$password}";
        echo $sql."";
        $row=$pdo->query($sql);
        foreach ($row as $key => $value) {
            print_r($value);
        }
    }catch(POOException $e){
        echo $e->getMessage();
    }
访问http://localhost/pdo.php?username=admin&password=admin
当我们使用单引号探测注入时
如图，单引号已被反斜线转义
### ② **预编译语句**
**1、占位符-通过命名参数防止注入**
通过命名参数防止注入的方法会使得程序在执行SQL语句时，将会把参数值当成一个字符串整体来进行处理，即使参数值中包含单引号，也会把单引号当成单引号字符，而不是字符串的起止符。这样就在某种程度上消除了SQL注入攻击的条件。
将原来的SQL查询语句改为
    Select * from where name=:username and password=:password
prepare方法进行SQL语句预编译
最后通过调用rowCount()方法，查看返回受sql语句影响的行数
返回0语句执行失败，大于等于1，则表示语句执行成功。
All code
    prepare($sql);
        $stmt->execute(array(":username"=>$username,":password"=>$password));
        echo $stmt->rowCount();
    }catch(PDOException $e){
        echo $e->getMessage();
    }
    ?>
查询成功
注入失败
**2、占位符-通过问号占位符防止注入**
把SQL语句再进行修改
    select * from user where name=? and password=?
同上，prepare方法进行SQL语句预编译
最后调用rowCount()方法，查看返回受sql语句影响的行数
    prepare($sql);
        $stmt->execute(array($username,$password));
        echo $stmt->rowCount();
    }catch(PDOException $e){
        echo $e->getMessage();
    }
    ?>
效果同上
查询成功
注入失败
**3.通过bindParam()方法绑定参数防御SQL注入**
修改语句部分
    $sql='select * from user where name=:username and password=:password';
        $stmt=$pdo->prepare($sql);
        $stmt->bindParam(":username",$username,PDO::PARAM_STR);
        $stmt->bindParam(":password",$password,PDO::PARAM_STR);
**解释：** a)：:username 和 :password为命名参数 b)：password为获取的变量，即用户名和密码。
c)：PDO::PARAM_STR,表示参数变量的值一定要为字符串，即绑定参数类型为字符串。在bindparam()方法中，默认绑定的参数类型就是字符串。
? 当你要接受int型数据的时候可以绑定参数为PDO::PARAM_INT.
    prepare($sql);
        $stmt->bindParam(":username",$username,PDO::PARAM_STR);
        $stmt->bindParam(":password",$password,PDO::PARAM_STR);
        $stmt->execute();
        echo $stmt->rowCount();
    }catch(PDOException $e){
        echo $e->getMessage();
    }
    ?>
效果同上
查询成功
注入失败
这只是总结了一部分PDO防范SQL注入的方法，仍有方法请见下文
其他手法还有很多，大家感兴趣的话可以自行研究
## 0x03 PDO下的注入手法与思考
读完前文后，读者们可能不由感叹，真狠啊，什么都tmd转义，什么语句都预编译了，这我tmd注入个毛...
北宋宰相王安石有言“看似寻常最奇崛,成如容易却艰辛”
让我们抽丝剥茧来探寻PDO下的注入手法
目前在PDO下，比较通用的手法主要有如下两种
### **①宽字节注入**
注入的原理就不讲了，相信大家都知道
一张图，清晰明了
当Mysql数据库my.ini文件中设置编码为gbk时，
我们的PHP程序哪怕使用了addslashes()，PDO::quote，mysql_real_escape_string()、mysql_escape_string()等函数、方法，或配置了magic_quotes_gpc=on，依然可以通过构造%df'的方法绕过转义
### ②堆叠注入与报错注入
PDO分为 **模拟预处理** 和 **非模拟预处理** 。
**模拟预处理是防止某些数据库不支持预处理而设置的，也是众多注入的元凶**
在初始化PDO驱动时，可以设置一项参数，PDO::ATTR_EMULATE_PREPARES，作用是打开模拟预处理(true)或者关闭(false),默认为true。
PDO内部会模拟参数绑定的过程，SQL语句是在最后execute()的时候才发送给数据库执行。