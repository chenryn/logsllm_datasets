### 1. Introduction

Computational services, which represent a small but significant portion of the service economy, often ambiguously share their content semantics. Section 4 will demonstrate the application of Linked Data to specify SLA (Service Level Agreement) documents. However, many non-computational service activities, such as insurance and e-learning, remain poorly covered.

#### 1.1 Non-Computational Services Support

Real-world services are primarily business activities that may be provided automatically (e.g., cloud computing services) or manually (e.g., insurance, consultancy). In this broader context, it is crucial to capture, process, and reason about real-world (non-computational) service offerings, value chains, agreements, and guarantees. Our proposed agreement model accounts for both computational and non-computational services, enabling the automation of the SLA lifecycle using formal semantics.

### 2. Requirements and Use Cases

To develop an agreement module within the Linked USDL family, we first identified current challenges in the SLA research area, illustrated through two motivating scenarios from different domains: cloud computing and business process outsourcing (BPO) services. Analyzing these scenarios, we enumerated a list of competency questions that drive the design of our proposal.

#### 2.1 Challenges on Service Level Agreements

Since the introduction of SLA languages like WSLA and WS-Agreement, significant technological developments have occurred. The use of Linked Data principles ensures that new service descriptions, dedicated extensions, and valuable third-party general descriptions can be directly reused and integrated as needed. Section 5.3 compares our solution to other SLA approaches.

#### 2.2 Open, Web-based Solution

To effectively share and process SLA descriptions over the Web while promoting adoption, the technological approach should allow anyone to openly publish, search for, and exploit such descriptions. It should also support extensions to address unexpected needs and use cases. Our proposal embraces Web principles and technologies to address interoperability and scalability issues.

#### 2.3 SLA Lifecycle Automation

The SLA lifecycle includes not only the negotiation and creation of SLAs but also validity checking, conformance, and monitoring of contracts to detect conflicts and violations. These activities are usually carried out manually, leading to expenses and errors. Automated software tools for SLA documents are necessary to carry them out efficiently. Section 6 demonstrates how this automation can be achieved.

### 3. Use Cases

We have chosen two use cases from different domains to cover a broad spectrum of competency questions for SLAs: a cloud computing services use case and a business process outsourcing services use case.

#### 3.1 Cloud Computing Services Use Case

Cloud computing is a cost-effective and efficient paradigm for on-demand provisioning of computing services. Businesses can dynamically use external services, reducing maintenance and operating costs while obtaining a highly scalable infrastructure. Cloud computing solutions typically focus on four layers: hardware, infrastructure, platform, and application. For example, Table 1 shows a typical service commitment from the SLA of Amazon EC2, where each indicator is defined along with its target value and corresponding penalty percentage.

| **Monthly Uptime Percentage** | **Service Credit** |
|-------------------------------|--------------------|
| Less than 99.95% but equal to or greater than 99.0% | 10% |
| Less than 99.0% | 30% |

#### 3.2 Business Process Outsourcing Services Use Case

Business Process Outsourcing (BPO) services are non-computational services that allow the customer to partially or fully outsource a business process to the service provider. These processes typically include logistics, supply chain, or IT delivery processes. An example of a BPO service is the maintenance of the human-resources information systems and the web and intranet of the Andalusian Health System. Table 2 shows an excerpt from the SLA designed for this service, where each indicator is defined along with its target value and corresponding penalty percentage.

| **Indicator** | **Target** | **Penalty** |
|---------------|------------|-------------|
| Percentage of very high priority issues resolved in less than 2 hours since the issue was assigned | ≥90% | 90− 1IO 0 01×30×P max |
| Average resolution time of high-priority issues | ≤6h | IO 0 15−6×20×P max |
| Percentage of issues that are re-opened | ≤1% | IO 0 48−1×20×P max |

### 4. Semantic Modeling of Service Level Agreements

Driven by the identified challenges and the previously discussed competency questions, we devised an extension to the Linked USDL family of vocabularies called Linked USDL Agreement. This agreement module is publicly available on GitHub, including the representation of the discussed use cases.

#### 4.1 Design Decisions

To address the challenges enumerated in Section 3.1, our proposal uses formal ontology representation languages to deal with the structural and semantic heterogeneity affecting SLAs. We adopted Linked Data principles, so that our model can be used to share and interlink service agreements over the Web. The design of our model using Linked Data facilitates reusing related models, datasets, and existing tools.

#### 4.2 Linked USDL Agreement Module

Figure 1 presents the core concepts of our agreement model. An agreement comprises a set of terms stating the particular conditions that are guaranteed, and eventually the compensations that may be offered in case of an SLA violation. An AgreementTerm denotes each term contained in an SLA. A concrete ServiceOffering can be associated with several instances of AgreementTerms, representing the complete SLA offered along that offering. Our model differentiates two subtypes of terms that may appear in an SLA: guarantees and compensations.

- **Guarantee**: Captures an SLA term that guarantees the fulfillment of certain conditions over a service property. For example, a Guarantee could state, "Amazon guarantees that the monthly uptime of its EC2 service will be at least 99.95%."
- **Compensation**: Describes an alternative term that will be guaranteed in place of the original Guarantee term if it is violated. For example, "a service credit of 10% will be issued if the monthly uptime is less than 99.95% but equal to or greater than 99.0%."

Agreement conditions are further described in Figure 2. An AgreementCondition specifies a constraint or axiom that can be checked within the terms of an SLA. Conditions are used in our model to define the condition fulfilled by an agreement term and to state any precondition that must be met before guaranteeing the agreement term. Both types of conditions are usually applied to a concrete service property, constraining its valid values as defined by the condition.

### 5. Competency Questions

Analyzing the described use cases and usual contents of SLA documents, we have defined a series of competency questions that operationalize the requirements that a semantic vocabulary useful for SLA lifecycle management should have. The main ones are:

- Q1: Which functionality and quality of service levels does a service deliver?
- Q2: Which particular properties of a service are guaranteed to have certain values?
- Q3: Which compensations are offered if the guaranteed value of a property is not honored?
- Q4: Who is the responsible party for enforcing the guaranteed service level values?
- Q5: Who is the responsible party for monitoring and computing the guaranteed values?
- Q6: During which period of time is a guarantee offered?
- Q7: How are current values of a service property computed?

Effectively answering these competency questions is the main requirement we have taken into account when designing our model. Additionally, we impose requirements regarding scalability and its exploitation on the Web. Therefore, we reuse existing Web standards and technologies that facilitate the publication and management of SLA documents. Finally, our proposal is informed by major contributions on SLA specification like WS-Agreement.