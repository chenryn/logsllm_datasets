serve articles from different sources which do not necessarily
share the same coding pattern and content layout. This could
result in scripts from twitter.com injecting Twitter feeds
into containers with different attributes. Occasionally, the
violation is a result of apparently suspicious behavior or a
major script update, discussed in the next two sections.
8.3 Suspicious violations
In the robustness experiment, we found that on rare
occasions the Facebook scripts load other ad networks and
analytics scripts, which raised massive numbers of alerts.
In some sites such as staples.com and dailymotion.com,
Facebook scripts access the exact same information as
did krxd.net and enlighten.com, essentially reading the
entire page content. In other cases, Facebook scripts read
the action attribute of all forms on the host page (e.g.,
goodreads.com, hostgator.com). This behavior is only
visible during certain periods of time, and we observed this
access on multiple websites only at the start of the experi-
ment as well as 18 days after. In extremely rare occasions
(tutsplus.com and drupal.org), ScriptInspector caught that
Facebook scripts read the value of user’s user name and
password input on the host page, which is disturbing. We
are not sure if this is intended by the site owners, and suspect
they are unaware of this behavior.
We have also seen Google advertising scripts read the en-
tire page contents by calling documentElement.innerHTML.
This behavior was only observed once, and only on nﬂ.com.
This could be a bug in an advertising script, or it could
indicate that Google advertising is crawling the page content
and indexing it for future contextual targeting.
8.4 Impact of major updates
Throughout the course of our evaluation, we saw ma-
jor changes to three third-party scripts which resulted in
multiple duplicate alarms reported across most sites embed-
ding them. Particularly, facebook.net scripts began reading
properties (e.g. href, rel) of all link elements on the page
since 30 December 2014, and doubleverify.com scripts
showed similar behavior changes since 5 February 2015.
Additionally, krxd.net scripts began injecting an invisible
DIV element into all pages embedding it since 26 January
2015. We handled these violations by updating their base
policies since the new behaviors are not site-speciﬁc. These
cases show that while major third-party scripts changes may
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:03:40 UTC from IEEE Xplore.  Restrictions apply. 
Figure 5: Policy convergence vs. number of revisions
require updates to policy, they only occur rarely and trivial
changes to base policy are often enough to cover the new
behavior.
It is harder to determine whether a page went through
major changes over our experiment. However, we did see
this for two sites, theblaze.com, which added an advertising
slot on their frontpage, and inc.com, which redesigned its
general user interface. For both cases, we added an addi-
tional advertising container permission to their site-speciﬁc
policies. It can be annoying to the developers to approve new
permissions when a major site update happens, however,
we do not expect policy-breaking changes frequently for
most sites. Further, we argue that it may be useful to site
administrators to learn when a change impacts the behaviors
of scripts signiﬁcantly enough to require a policy change.
9 RELATED WORK
The risks of embedded web scripts have been clear for
some time, and many different solutions have been proposed.
We highlight the most relevant previous work here.
Client-side script protections. Many solutions have been
proposed that involve client-side protections that limit what
embedded scripts can do and change how they interact
with page resources. Browser-Enforced Embedded Policies
(BEEP) [15] and Content Security Policy (CSP 1.0, 1.1) [29]
use a whitelist approach to restrict the source of the dynam-
ically loaded scripts. Compared to these works, our work
supports ﬁne-grained access control policies at the level of
actions on individual DOM nodes.
MashupOS [27] proposed several new attributes and
tags for isolation. It offers more ﬂexible security policies
than the same-origin policy (SOP). OMash [7] introduces
private/public member functions for different scripts. ES-
CUDO [14] migrates the concept of OS protection rings
to limit scripts’ permissions, JCShadow [24] uses multiple
execution contexts to isolate JavaScript execution. Tree-
house [12] uses HTML5 web workers to isolate execution
context and virtualizes host DOM via a hypervisor-like
interface to enforce access control policy. JSand [4] isolates
Secure ECMAScript (SES) execution by wrapping resource
accesses using the new Harmony Proxy API. Adjail [19]
places advertising scripts in a shadow page, and forwards
the displaying content and user events back and forth to
the main page. Our work has a different goal: we focus on
understanding and monitoring of script behavior, rather than
on isolating and enforcing security policies in the browser.
Script transformations. Several previous works provide
mechanisms for incorporating policies into scripts. Con-
Script [21] uses aspect-oriented programming to weave
generic policy checking advice with API calls of interest.
Similar to ConScript, WebJail [3] also leverages aspect-
oriented programming methods to enforce access control
policy, but is designed speciﬁcally for mashup applications.
Phung et al. [25] wrap JavaScript built-in functions with
mediation code before executing third-party scripts. AD-
Safe [8] and Caja [22] mediate access by rewriting the
third-party scripts. The appeal of these solutions is that
no browser modiﬁcations are needed to enforce policies.
Rewriting-based solutions, however, may fail to preserve
the original program’s semantics. It
is also challenging
to implement JavaScript rewriters in a way that cannot
be circumvented [20]. We implemented ScriptInspector by
modifying a browser instead of using rewriting because
it provides higher conﬁdence of complete mediation and
makes it convenient
to attribute dynamically introduced
code. However, our policies are independent of our Script-
Inspector implementation and could be enforced client-side
using script rewriting.
Policy generation. Compared to access mediation and script
isolation mechanisms, automated policy generation has not
been deeply studied yet. ConScript [21] suggested auto-
generating policies, but did not evaluate policy generation.
Mash-IF [18] provides a GUI tool to let developers mark
863863
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:03:40 UTC from IEEE Xplore.  Restrictions apply. 
sensitive information on the page, and uses information
ﬂow tracking techniques to restrict data leakage. Compared
to Mash-IF, PolicyGenerator auto-suggests public elements
instead of sensitive information, and shows that
the in-
accuracies of performing taint tracking on JavaScript can
be avoided by using simple yet robust policies focused
on resource access. Zhou et al. developed a method for
automatically identifying nodes with sensitive content in
the DOM, but found it could not accurately distinguish
sensitive nodes for many sites [33]. This paper is the ﬁrst to
demonstrate that automated tools can help generate robust
policies for popular third-party scripts.
Script behavior visualization. Several tools present script
behaviors in a user-understandable way. Wang et al. [28] use
a browser-based interface to explore relationships between
requests and discover vulnerabilities. Popular browser exten-
sions like Ghostery [10] and Abine [1] help users and site
administrators understand what third-party services exist on
the current page. A recent Chrome developer tool [9] informs
a user what resource a Chrome extension is accessing on the
page, albeit at coarse granularity. The success of these tools
supports our hope that Visualizer and PolicyGenerator can
be of great value to web developers in understanding scripts
and developing policies.
10 DEPLOYMENT
In this section, we discuss some possible deployment
scenarios. So far, we have focused on the scenario where
a site administrator wants to understand the behaviors of
embedded scripts on a web site to protect clients from
privacy compromises by malicious or compromised scripts
and ensure the integrity of the site from unintended modi-
ﬁcations. The tools we developed could be used in several
other ways, discussed below.
Access visualization. Visualizer can be used by either
an interested web developer or sophisticated user. After
examining the accessed resources, a developer can make an
informed decision to choose the service provider that most
respects site integrity and user privacy. A sophisticated user
may use extensions like noscript [11] to block third-party
scripts with suspicious behaviors revealed by Visualizer.
Policy generation service. A third-party service provider or
dedicated security service could develop base policies for
commonly-used scripts. A cooperating third-party service
provider may make site-speciﬁc policy generation part of
the implementation process. For example, policies can be
inferred by analyzing the implementation code. In a less
ideal scenario, the policy generation service could provide
a description of how to generate a site-speciﬁc policy for
the script based on properties of the embedding site. Site
administrators would then use that description to manually
generate their own site-speciﬁc policies.
Access monitoring. After a policy has been generated, we
envision two ways a site administrator can monitor future
accesses. An easy-to-adopt approach is to continue running
ScriptInspector with the policies on simulated sessions. An
alternative approach is to sample real world trafﬁc using a
reverse proxy and forward sampled requests to run in Script-
Inspector with user credentials. The second approach gives
higher conﬁdence that the integrity and privacy properties
are not violated in real sessions, but risks interfering with the
normal behavior of the site if repeating requests alters server
state. For both cases, the site administrator would examine
alerts and respond by either changing policies or altering the
site to remove misbehaving scripts. More security-focused
sites could automate this process to automatically remove
scripts that generate alarms.
Policy enforcement. Our prototype ScriptInspector is not
intended to be used by end users to enforce the policies at
runtime mainly due to its high runtime overhead. The key
reason is that each DOM API access requires at least one
stack computation and node removal APIs require walking
the subtree and compute access violations. However, some
policies may be enforced by other browser security mech-
anisms, for example, scripts from a particular domain can
be blacklisted by content security policy, which is currently
supported by major browsers. We envision a future, though,
where a more expressive analog to CSP is adopted by popu-
lar browsers and servers can provide headers with restrictive
policies for embedded scripts that would be enforced by
browsers at runtime. This would offer the best protection,
ensuring that the actual behavior of the dynamically-loaded
script on client’s browser does not behave in ways that
violate the server’s script policy.
AVAILABILITY
ScriptInspector, Visualizer, and PolicyGenerator, as well
as all of the policies we developed, are available under an
open source license from http://ScriptInspector.org.
ACKNOWLEDGEMENTS
This work was partially supported by grants from the Na-
tional Science Foundation and Air Force Ofﬁce of Scientiﬁc
Research, and a gift from Google. The authors thank Ivan
Alagenchev, Longze Chen, Haina Li, and Weilin Xu for
valuable contributions to this work.
REFERENCES
[1] Abine, Inc. Protect your privacy with DoNotTrackMe from
Abine. https://www.abine.com/index.html.
[2] Gunes Acar, Marc Juarez, Nick Nikiforakis, Claudia Diaz,
Seda G¨urses, Frank Piessens, and Bart Preneel. FPDetective:
Dusting the Web for Fingerprinters. In 20th ACM Conference
on Computer and Communications Security, 2013.
864864
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:03:40 UTC from IEEE Xplore.  Restrictions apply. 
[21] Leo A. Meyerovich and Benjamin Livshits. ConScript:
Specifying and Enforcing Fine-Grained Security Policies for
JavaScript in the Browser.
In 31st IEEE Symposium on
Security and Privacy, 2010.
[22] Mark S. Miller, Mike Samuel, Ben Laurie, Ihab Awad,
in San-
google-caja.googlecode.com/ﬁles/
and Mike Stay.
itized Javascript.
caja-spec-2008-01-15.pdf, 2007.
Caja: Safe Active Content
[23] Nick Nikiforakis, Luca Invernizzi, Alexandros Kapravelos,
Steven Van Acker, Wouter Joosen, Christopher Kruegel,
Frank Piessens, and Giovanni Vigna. You Are What You
Include: Large-Scale Evaluation of Remote JavaScript Inclu-
sions. In 19th ACM Conference on Computer and Communi-
cations Security, 2012.
[24] Kailas Patil, Xinshu Dong, Xiaolei Li, Zhenkai Liang, and
in
In 2011 International Conference on
Xuxian Jiang.
JavaScript Contexts.
Distributed Computing Systems, 2011.
Towards Fine-Grained Access Control
[25] Phu H. Phung, Davis Sands,
and Andrey Chudnov.
Lightweight Self-Protecting JavaScript. In 4th International
Symposium on Information, Computer, and Communications
Security, 2009.
[26] Prateek Saxena, Devdatta Akhawe, Steve Hanna, Feng Mao,
Stephen McCamant, and Dawn Song. A Symbolic Execution
Framework for JavaScript.
In 31st IEEE Symposium on
Security and Privacy, 2010.
[27] Helen J. Wang, Xiaofeng Fan, Jon Howell, and Collin Jack-
son. Protection and Communication Abstractions for Web
Browsers in MashupOS. In 21st ACM SIGOPS Symposium
on Operating Systems Principles, 2007.
[28] Rui Wang, Shuo Chen, and XiaoFeng Wang. Signing Me
onto Your Accounts through Facebook and Google: A Trafﬁc-
Guided Security Study of Commercially Deployed Single-
Sign-On Web Services. In 33rd IEEE Symposium on Security
and Privacy, 2012.
[29] Wikipedia. Content Security Policy. http://en.wikipedia.org/
wiki/Content Security Policy.
[30] Wikipedia. Google Analytics Popularity. http://en.wikipedia.
org/wiki/Google Analytics#Popularity.
[31] Lenny Zeltser. Malvertising: The Use of Malicious Ads to
Install Malware. http://www.infosecisland.com/blogview/
14371.
[32] Yunhui Zheng, Xiangyu Zhang, and Vijay Ganesh. Z3-str:
A Z3-based String Solver for Web Application Analysis. In
9th Joint Meeting on Foundations of Software Engineering,
2013.
[33] Yuchen Zhou and David Evans. Protecting Private Web Con-
tent From Embedded Scripts. In 16th European Symposium
On Research In Computer Security, 2011.
[3] Steven Van Acker, Philippe De Ryck, Lieven Desmet, Frank
Piessens, and Wouter Joosen. WebJail: least-privilege inte-
gration of third-party components in web mashups. In Pro-
ceedings of the 27th Annual Computer Security Applications
Conference, 2011.
[4] Pieter Agten, Steven Van Acker, Yoran Brondsema, Phu H.
Phung, Lieven Desmet, and Frank Piessens. JSand: Complete
Client-Side Sandboxing of Third-party JavaScript without
Browser Modiﬁcations.
In 28th Annual Computer Security
Applications Conference, 2012.
[5] Sruthi Bandhakavi, Nandit Tiku, Wyatt Pittman, Samuel T.
King, P. Madhusudan, and Marianne Winslett.
Vetting
Browser Extensions for Security Vulnerabilities with VEX.
In 19th USENIX Security Symposium, 2010.
[6] Marco Cova, Christopher Kruegel, and Giovanni Vigna.
Detection and Analysis of Drive-by-Download Attacks and
Malicious JavaScript Code. In 19th International Conference
on World Wide Web, 2010.
[7] Steven Crites, Francis Hsu, and Hao Chen. OMash: Enabling
Secure Web Mashups via Object Abstractions.
In 15th
ACM Conference on Computer and Communications Security,
2008.
[8] Douglas Crockford. ADsafe: Making JavaScript Safe for
Advertising. www.adsafe.org, 2007.
[9] Adrienne Porter Felt. See What Your Apps and Extensions
http://blog.chromium.org/2014/06/
Have Been Up To.
see-what-your-apps-extensions-have-been.html.
[10] Ghostery, Inc. Ghostery. http://www.ghostery.com/.
[11] InformAction. NoScript - JavaScript/Java/Flash blocker for a
safer Firefox experience. http://noscript.net/.
[12] Lon Ingram and Michael Walﬁsh. TreeHouse: JavaScript
In the
sandboxes to help web developers help themselves.
USENIX Annual Technical Conference, 2012.
[13] Dongseok Jang, Ranjit Jhala, Sorin Lerner, and Hovav
Shacham. An Empirical Study of Privacy-Violating Infor-
mation Flows in JavaScript Web Applications.
In 17th
ACM Conference on Computer and Communications Security,
2010.
[14] Karthick Jayaraman, Wenliang Du, Balamurugan Ra-
jagopalan, and Steve J. Chapin. ESCUDO: A Fine-Grained
Protection Model for Web Browsers. In 30th IEEE Interna-
tional Conference on Distributed Computing Systems, 2010.
[15] Trevor Jim, Nikhil Swamy, and Michael Hicks. Defeating
Script Injection Attacks with Browser-Enforced Embedded
Policies.
In 16th International Conference on World Wide
Web, 2007.
[16] Eric Lawrence. Fiddler - The Free Web Debugging Proxy by
Telerik. http://www.telerik.com/ﬁddler.
[17] Zhou Li, Sumayah Alrwais, XiaoFeng Wang, and Eihal
Alowaisheq. Hunting the Red Fox Online: Understanding
and Detection of Mass Redirect-Script Injections.
In 35th
IEEE Symposium on Security and Privacy, 2014.
[18] Zhou Li, Kehuan Zhang, and XiaoFeng Wang. Mash-if: Prac-
tical Information-Flow Control within Client-Side Mashups.
In 2010 IEEE/IFIP International Conference on Dependable
Systems and Networks (DSN), 2010.
[19] Mike Ter Louw, Karthik Thotta Ganesh, and V. N. Venkatakr-
ishnan. AdJail: Practical Enforcement of Conﬁdentiality and
Integrity Policies on Web Advertisements. In 19th USENIX
Security Symposium, 2010.
[20] Jonas Magazinius, Phu H. Phung, and David Sands. Safe
Wrappers and Sane Policies for Self Protecting JavaScript.
In 15th Nordic Conference in Secure IT Systems, 2010.
865865
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:03:40 UTC from IEEE Xplore.  Restrictions apply.