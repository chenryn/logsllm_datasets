title:Fill in the Blanks: Empirical Analysis of the Privacy Threats of Browser
Form Autofill
author:Xu Lin and
Panagiotis Ilia and
Jason Polakis
Fill in the B l a n k s: Empirical Analysis of the Privacy Threats of
Browser Form Autofill
Xu Lin
PI:EMAIL
Panagiotis Ilia
PI:EMAIL
Jason Polakis
PI:EMAIL
University of Illinois at Chicago, USA
University of Illinois at Chicago, USA
University of Illinois at Chicago, USA
ABSTRACT
Providing functionality that streamlines the more tedious aspects
of website interaction is of paramount importance to browsers as
it can significantly improve the overall user experience. Browsers’
autofill functionality exemplifies this goal, as it alleviates the burden
of repetitively typing the same information across websites. At the
same time, however, it also presents a significant privacy risk due
to the inherent disparity between the browser’s interpretation of a
given web page and what users can visually perceive.
In this paper we present the first, to our knowledge, comprehen-
sive exploration of the privacy threats of autofill functionality. We
first develop a series of new techniques for concealing the presence
of form elements that allow us to obtain sensitive user information
while bypassing existing browser defenses. Alarmingly, our large-
scale study in the Alexa top 100K reveals the widespread use of
such deceptive techniques for stealthily obtaining user-identifying
information, as they are present in at least 5.8% of the forms that are
autofilled by Chrome. Subsequently, our in-depth investigation of
browsers’ autofill functionality reveals a series of flaws and idiosyn-
crasies, which we exploit through a series of novel attack vectors
that target specific aspects of browsers’ behavior. By chaining these
together we are able to demonstrate a novel invasive side-channel
attack that exploits browser’s autofill preview functionality for in-
ferring sensitive information even when users choose to not utilize
autofill. This attack affects all major Chromium-based browsers and
allows attackers to probe users’ autofill profiles for over a hundred
thousand candidate values (e.g., credit card and phone numbers).
Overall, while the preview mode is intended as a protective measure
for enabling more informed decisions, ultimately it creates a new
avenue of exposure that circumvents a user’s choice to not divulge
their information. In light of our findings, we have disclosed our
techniques to the affected vendors, and have also created a Chrome
extension that can prevent our attacks and mitigate this threat until
our countermeasures are incorporated into browsers.
CCS CONCEPTS
• Security and privacy → Browser security.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
CCS ’20, November 9–13, 2020, Virtual Event, USA
© 2020 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-7089-9/20/11...$15.00
https://doi.org/10.1145/3372297.3417271
KEYWORDS
Web Browsers; Autocomplete; Form Autofill; Data Exfiltration
ACM Reference Format:
Xu Lin, Panagiotis Ilia, and Jason Polakis. 2020. Fill in the B l a n k s: Empirical
Analysis of the Privacy Threats of Browser Form Autofill. In Proceedings of
the 2020 ACM SIGSAC Conference on Computer and Communications Security
(CCS ’20), November 9–13, 2020, Virtual Event, USA. ACM, New York, NY,
USA, 13 pages. https://doi.org/10.1145/3372297.3417271
1 INTRODUCTION
Browsers lie at the heart of the web ecosystem, as they are the
de-facto platform that mediates users’ access to most online ser-
vices. As websites continue to provide novel (and often complex)
functionality to attract and engage users, browsers provide the
necessary foundation by deploying new APIs and features that
enable these functionalities and minimize friction during user in-
teraction. A considerable pain point for users, which often leads
to frustration and higher drop-off rates, is the completion of web
forms [2]. This arduous task is particularly burdensome for users
on mobile devices, who are inhibited by the devices’ limited screen
real estate. To minimize the hassle of completing and submitting
web forms, major browsers have deployed form autofill capabilities.
These features provide tangible benefits to users as browsers can
automatically fill out the form input fields on behalf of the user and
significantly reduce the amount of effort required.
Even though the autofill functionality is undoubtedly useful for
users, it can be easily misused by malicious or invasive websites.
For instance, a shady website can have a form with only one visible
input field (e.g., email address for a newsletter subscription) while
also including input fields for other information that are visually
hidden from the user (e.g., their home address and phone number).
As browsers generally populate all input fields for which there is
a corresponding value in the user’s autofill profile, even if those
input fields are not visible, attackers can misuse autofill to exfiltrate
private and sensitive information without the user’s knowledge or
consent. While a series of blog posts have mentioned the exfiltration
of credentials and credit card numbers [24, 40], and news articles
have reported the risks of autofill [5], the flaws of browsers’ autofill
capabilities have not been investigated in depth, nor has the global
prevalence of such invasive practices been measured.
In this paper we present the first comprehensive analysis of major
browsers’ autofill functionality across multiple dimensions. Initially,
we devise numerous previously-unreported approaches for hid-
ing input fields in a page and “concealing” the actual information
that is obtained by the form. Our evaluation of major browsers
reveals a worrisome state of affairs, as most browsers do not have
any preventative countermeasures in place to prevent this form
of privacy-invasive deceptive practices, or are severely lacking as
they are ineffective against the majority of techniques that we de-
vise. Subsequently, we conduct a large-scale measurement study on
the Alexa top 100K websites for identifying pages exhibiting such
behavior through hidden form fields. As the heuristics employed
for detecting and parsing forms differ across browsers, we conduct
our study for both Firefox and Chrome. Alarmingly, we find that
5,295 (24.5%) and 1,843 (5.8%) of the websites with forms that are
autofilled by Firefox and Chrome, respectively, also include hidden
input elements. Moreover, fields that collect personally identifiable
information (PII), such as the user’s name, phone number and email
address, are among those that are commonly hidden.
However, one could argue that more privacy-cautious users may
avoid using autofill on less trusted sites. To that end, we demon-
strate an even more severe novel attack that infers the user’s infor-
mation without requiring the autofill functionality to actually be
triggered. This attack exploits autofill’s preview mode and works
against all Chromium-based browsers that we tested. In essence,
this inference attack is achieved by chaining together a series of
novel techniques that misuse flaws that we identified in multiple
aspects of Chromium’s autocomplete functionality and behavior.
First, we demonstrate that these browsers are susceptible to what
we refer to as a field-type mismatch attack; we find that they do not
match the type of a form field that is going to be autofilled to the
expected field type of that value in the user’s autocomplete profile.
For instance, while phone numbers are typically  tag ele-
ments (i.e., a textbox), the browser will actually match that value to
a  element (i.e., a drop-down menu) that has a matching
option. We also found that we can include multiple drop-down
menus of the same type (e.g., email) in a single form. Second, we
have identified a side-channel leak in the autofill preview feature,
which allows users to see what values will be autofilled if they
decide to do so. These preview values are in an overlay that is not
accessible by the page’s DOM. However, we found that numerous
style attributes of the drop-down menu change if the user’s profile
value matches a value included in that menu. Thus, we can identify
that a specific drop-down menu includes the user’s value, but can-
not directly infer which value it is. However, by combining these
two attacks and strategically replicating values across a unique
combination of elements, we can infer the user’s exact value. Last,
our attacks bypass specific type-based and size-limit safeguards, by
dynamically changing the type and characteristics of elements. This
allows us to probe a user’s autofill profile for sensitive information
(e.g., email, phone, credit card number) without any limits on the
number of candidate values that we can test. Our proof-of-concept
implementation can probe the user’s profile for 100K candidate
values in 4-5 seconds on desktops and 8-9 seconds on laptops.
Due to the severity of our attacks, we develop an appropriate
countermeasure in the form of a Chrome extension. Our extension
leverages the heuristics that we have devised for inferring whether
a page’s autofillable elements are hidden or masqueraded, to detect
and prevent the use of such deceptive techniques. We have also
disclosed our findings to the affected browser vendors, in hope that
they will incorporate our proposed techniques for better protecting
their users. Overall, we find that the inherent disconnect between
what is rendered by a browser and what is actually visible to the
user leaves ample room for misuse and deception. We believe that
our analysis of how users can be harmed and how to remediate
these attacks will facilitate tackling this significant yet understudied
privacy threat. In summary, our research contributions are:
• We explore how major browsers handle web forms and
present methods that allow adversaries to hide form ele-
ments and stealthily exfiltrate highly-sensitive user infor-
mation. We demonstrate techniques that bypass technical
countermeasures and also highlight the limitations of exist-
ing user-centric mitigation strategies.
• We conduct an in-depth analysis and present a series of new
attacks that exploit flaws and idiosyncrasies in browsers’
behavior. We combine all our techniques to demonstrate a
novel and severe side-channel attack that infers users’ PII
even when they are cautious and avoid using autofill.
• We develop a tool that detects the deployment of hidden
elements and conduct a large-scale study in the Alexa top
100K, revealing the prevalence of such practices in the wild.
Accordingly, we develop a browser extension that detects
deceptive forms and prevents the exfiltration of user data.
• To further facilitate research on this topic, we make our code
and data publicly available.
2 BACKGROUND AND THREAT MODEL
Browsers have long provided autocomplete suggestions to users,
where a website can specify the expected value type for each input
field (e.g., last name, address, email) and the browser will assist the
user typing by providing suggestions based on values previously en-
tered by the user in fields of this type. Nowadays, all major browsers
provide form autofill functionality that automatically populates the
input fields of a web form with values from the user’s autofill profile.
According to estimations by Google, this functionality can speedup
form completion times by 30% [3].
2.1 Browser Autofill
Here we present an overview of various aspects of browsers’ autofill
functionality and provide additional pertinent details.
Creating autofill profile. A profile is automatically created
when a user completes and submits a form for the first time. Multiple
autofill profiles can be stored in the user’s browser (e.g., a “personal”
one with values for home address and mobile phone number, and a
“professional” one with the respective work-based values). While
a second profile is typically created by the user manually, some
browsers (e.g., Chrome) generate it automatically when a submitted
form contains values that do not match those of an existing profile.
Triggering autofill. When the user clicks on a form’s input field
the browser dynamically generates an overlay window that shows
the stored autofill profiles, to facilitate selection when multiple
profiles exist. This autofill window appears whenever a user clicks
on a form field with an autofillable type and at least three fields
exist in that form (even if two of those are hidden). In Chrome,
in certain cases (e.g., autocomplete=‘‘first-name’’) the overlay
will appear even if the form only has one field. As the user moves
the mouse, if it passes (or hovers) over a profile entry in the overlay
window, the values that are stored in the profile will appear in the
corresponding input fields (we refer to this functionality as autofill
preview). At that point, the user can select (i.e., click on) an entry
from the overlay window to trigger the autofill functionality and
privacy implications, browsers display these values in overlay fields
that are not part of the DOM and are not accessible to the page.
Preview functionality is not currently available in mobile devices.
Handling credit card information. In all browsers, the aut-
ofill profile includes basic/contact information (e.g., name, organiza-
tion, address, email etc.). Payment information such as credit card
numbers, which is highly sensitive, is stored separately and stricter
mechanisms are employed for autofilling this type of information.
In Firefox, autofill for credit cards is currently disabled by default.
When a form includes input fields for both contact and payment
information, the autofill functionality that is triggered by a field
of one of those categories does not fill out the fields of the other
category. In other words, triggering autofill for contact information
(i.e., those stored in the autofill profile) only inputs contact informa-
tion but not payment information; for payment information to be
filled it needs to be triggered by another field from that category.
Apart from separating contact and payment information, there
are additional requirements for triggering the autofill functionality
for credit cards. First, credit cards’ autofill works only when the
page is loaded over HTTPS. Moreover, in addition to the credit card
number input field, the form also needs to include a field for the
card’s CVV code or a field for its expiration date (or month). If none
of these additional fields exist in the form, browsers do not autofill
the credit card number. Furthermore, unlike contact information
for which the page can use drop-down menus with multiple option
values instead of input fields, autofill for credit cards is restricted to
input fields. That is, browsers do not select the credit card’s number
from the available options if a drop-down menu is used.
As detailed in Section 4, we have devised an attack that bypasses
all of these restrictions and misuses the autofill preview functionality
to exfiltrate the user’s credit card number without triggering autofill
and without exposing any visual clues to the user.
Autocomplete Attribute. This attribute specifies the type of
information that is expected to be entered in a form element. Ac-
cording to the HTML standard [6], this attribute can also be set to
“off”, indicating that this element should not be autofilled by the
browser. We found, however, that all browsers apart from Firefox
deliberately ignore this directive and populate those elements.
2.2 Threat Model
In this paper we consider as the attacker any website that uses hid-
den form input elements, or employs other deceptive techniques,
that misuse browsers’ autocomplete and form autofill functionali-
ties for conducting privacy-invasive attacks (e.g., exfiltrating user
sensitive information in a stealthy manner). In practice, the forms
that include such hidden fields, and the JavaScript code needed for
carrying out the attacks, can be included due to various motivations;
e.g., they may be included in a form deliberately by the publisher
so as to avoid explicitly requesting users for personal information
(e.g., phone number or street address) since that pushes users away
and reduces form conversion rates [29]. The form may also be from
a third-party script (e.g., fetched from a marketing company [44])
for tracking users [17, 18, 23]), or even part of a form-skimming
campaign on a compromised website [21]. In the context of this
work, we do not consider websites that collect user information by
means other than exploiting the autofill functionalities.
Figure 1: Example of autofill preview functionality.
the browser will populate the form with values from the profile.
The user can also click somewhere outside of the overlay window
for it to “disappear”, and no autofill functionality will be triggered.
Value selection. Input fields can specify the type of the data
that they expect using the autocomplete attribute. Browsers use
this attribute as well as attributes such as the field’s name, id, place-
holder text etc., and employ heuristics to determine or predict the
field’s type. Apart from these heuristics, as mentioned in the Google
Chrome Privacy Whitepaper [1], Chrome also sends some informa-
tion about the website (i.e., hash of the page’s hostname) and the
names of the input fields to Google, so as to receive a more accurate
prediction of each field’s data type based on server-side analysis.
Autofilling hidden elements. Currently, browsers do not suf-
ficiently detect and prevent deceptive practices that use disguised
or hidden input fields to exfiltrate sensitive user information in a
stealthy way. In more detail, Chrome only avoids autofilling fields
that have their visibility attribute set to hidden or collapse, and those
that have the display attribute set to none. It does not, however,