        setTimeout("over_trigger();",1);
上述代码的功能还是很清晰的，最开始创建时span的属性值为6，而后通过js中的over_trigger()函数将其动态更新为666，当然，更新后的值可以是任意的，只要能保证溢出就可以了。另外，width的属性值和写入堆空间的内容有关，这个后面会再提。
将PoC保存为html文件并双击打开，会弹出阻止提示，此时用WinDbg附加IE进程，附加列表中会有两个IE进程，选择后一个，即当前选项卡对应的子进程。这里假设你的符号文件都已经配置好了，我们通过“.reload
/f”命令强制加载，“lm”命令可以查看加载的结果。首先我们设置好如下几个断点：
    0:011> bp mshtml!CTableLayout::CalculateMinMax
    0:011> bp mshtml!_HeapRealloc
    0:011> x mshtml!*get*span
    6c724645 mshtml!CTableCell::GetAArowSpan = 
    6c62373b mshtml!CTextDisplayBox::GetRectsForSpan = 
    6c623a79 mshtml!CLsClient::GetRectsForSpan = 
    6c724623 mshtml!CTableCell::GetAAcolSpan = 
    6c69a6cb mshtml!CTableCol::GetAAspan = 
    6ca3c470 mshtml!CTableCell::get_colSpan = 
    6c6d28a5 mshtml!CTextBlock::SBlockBuildingState::GetSpan = 
    6c69a66e mshtml!CTableColumnBlock::GetColSpan = 
    6ca3c587 mshtml!CTableCell::get_rowSpan = 
    6c69f824 mshtml!Ptls5::LsGetFirstActiveSpan = 
    6c69a66e mshtml!CTableColumnGroupBlock::GetColSpan = 
    6c69cb19 mshtml!Ptls5::LsGetNextActiveSpan = 
    0:011> bp mshtml!CTableCol::GetAAspan
    0:011> bd 1 2
    0:011> bl
     0 e 6c71a078     0001 (0001)  0:**** mshtml!CTableLayout::CalculateMinMax
     1 d 6c7cd7a5     0001 (0001)  0:**** mshtml!_HeapRealloc
     2 d 6c69a6cb     0001 (0001)  0:**** mshtml!CTableCol::GetAAspan
对于那些记不住的函数，我们可以通过“x”命令来查看一下，错误位置在CTableLayout::CalculateMinMax函数中，所以这个地方肯定要下个断点，又因为是堆溢出，所以_HeapRealloc函数也来个断点，最后的CTableCol::GetAAspan函数是用来获取span属性值的，1和2两个断点目前暂时禁用。“g”命令跑起来，在IE中允许阻止的内容，弹出警告直接确定，回到WinDbg可以看到程序第一次在CTableLayout::CalculateMinMax函数入口断下来了，这是处理最开始创建时span值为6的情况，查看调用栈：
    0:011> g
    ModLoad: 6d0a0000 6d152000   C:\Windows\System32\jscript.dll
    Breakpoint 0 hit
    eax=ffffffff ebx=0019fd70 ecx=00412802 edx=ffffffff esi=00000000 edi=0249c914
    eip=6c71a078 esp=0249c6b8 ebp=0249c8d0 iopl=0         nv up ei pl zr na pe nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246
    mshtml!CTableLayout::CalculateMinMax:
    6c71a078 8bff            mov     edi,edi
    0:004> kb
    ChildEBP RetAddr  Args to Child              
    0249c6b4 6c71a6b8 0019fd70 0249c948 00000000 mshtml!CTableLayout::CalculateMinMax
    0249c8d0 6c710879 0249c948 0249c914 00000001 mshtml!CTableLayout::CalculateLayout+0x276
    0249ca7c 6c81566c 0249d998 0249cca8 00000000 mshtml!CTableLayout::CalcSizeVirtual+0x720
    0249cbb4 6c8118f9 0019fd70 00000000 00000000 mshtml!CLayout::CalcSize+0x2b8
    ......
我们看下CTableLayout::CalculateMinMax函数的声明：
    void __thiscall CTableLayout::CalculateMinMax(CTableLayout *theTableLayoutObj, LPVOID lpUnknownStackBuffer);
上述是IDA给出的结果，我们主要关注CTableLayout*这个变量，它是一个指针，由上面的“kb”命令可知其值为0019fd70：
 图1
CTableLayout*变量的定义
    0:004> ln poi(0019fd70)
    (6c619960)   mshtml!CTableLayout::`vftable'   |  (6c619aa0)   mshtml!CTableLayoutBlock::`vftable'
    Exact matches:
        mshtml!CTableLayout::`vftable' = 
绿色标识的为vftable值，蓝色标识的为span属性值也就是6，黄色标识的为申请的堆空间起始地址，目前还没分配所以为NULL。我们继续：
    0:004> bl
     0 e 6c71a078     0001 (0001)  0:**** mshtml!CTableLayout::CalculateMinMax
     1 d 6c7cd7a5     0001 (0001)  0:**** mshtml!_HeapRealloc
     2 d 6c69a6cb     0001 (0001)  0:**** mshtml!CTableCol::GetAAspan
    0:004> be 1 2
    0:004> g
    Breakpoint 1 hit
    eax=00000000 ebx=00000000 ecx=000000a8 edx=00000000 esi=0019fe0c edi=0019fe00
    eip=6c7cd7a5 esp=0249c5ec ebp=0249c604 iopl=0         nv up ei pl zr na pe nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246
    mshtml!_HeapRealloc:
    6c7cd7a5 8bff            mov     edi,edi
    0:004> gu
    eax=00000000 ebx=00000000 ecx=77505dd3 edx=0019eb8f esi=0019fe0c edi=0019fe00
    eip=6c7e34e2 esp=0249c5f4 ebp=0249c604 iopl=0         nv up ei pl zr na pe nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246
    mshtml!CImplAry::EnsureSizeWorker+0xa1:
    6c7e34e2 8bd8            mov     ebx,eax
    0:004> dd 0019fd70 L30
    0019fd70  6c619960 00136dd0 00159800 6c7ce3b8
    0019fd80  00000001 00000000 0108080d ffffffff
    0019fd90  00000000 00000000 00000000 ffffffff
    0019fda0  0001cbc4 0000f424 00000000 00000000
    0019fdb0  00000000 00412802 00000000 00000000
    0019fdc0  00000000 00000006 00000000 ffffffff
    0019fdd0  00000000 ffffffff 6c61a594 00000004
    0019fde0  00000004 0018b830 6c61a594 00000018
    0019fdf0  00000006 00165700 00000000 00000000
    0019fe00  6c61a594 00000000 00000000 0019eb90
    0019fe10  00000000 00000000 00000000 00000000
    0019fe20  00000000 00000000 00000000 00000000
程序申请了堆空间用于保存column的样式信息，每个样式信息占0x1C字节，有多少个样式信息由span属性值来确定，因此这里申请的堆空间大小为0x1C*6=0xA8，即_HeapRealloc函数入口断下后ecx寄存器的值，函数调用时的入参如果用到寄存器的话一般都是ecx，返回参数一般保存在eax中，同时注意随后分配的初始地址会保存到esi寄存器对应的地址处，即前面的黄色标识处，可以看到此时的值由NULL变为0x0019eb90了。
继续运行程序会在CTableCol::GetAAspan处断下来，也就是获取span值作为写入样式信息时循环的控制次数，函数返回结果保存在eax中，此时的值为6：
    0:004> g
    Breakpoint 2 hit
    eax=00183570 ebx=0019fd70 ecx=00000033 edx=00000006 esi=0019ec38 edi=00183570
    eip=6c69a6cb esp=0249c60c ebp=0249c6b4 iopl=0         nv up ei pl zr na pe nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246
    mshtml!CTableCol::GetAAspan:
    6c69a6cb 8bff            mov     edi,edi
    0:004> gu
    eax=00000006 ebx=0019fd70 ecx=00000002 edx=00148528 esi=0019ec38 edi=00183570
    eip=6c8af31f esp=0249c610 ebp=0249c6b4 iopl=0         nv up ei pl nz na po nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202
    mshtml!CTableLayout::CalculateMinMax+0x3ac:
    6c8af31f 3de8030000      cmp     eax,3E8h
再来看下程序向申请的堆空间写入样式信息的过程，我们在起始地址处下个写入断点：
    0:004> ba w1 0019eb90
    0:004> bl
     0 e 6c71a078     0001 (0001)  0:**** mshtml!CTableLayout::CalculateMinMax
     1 d 6c7cd7a5     0001 (0001)  0:**** mshtml!_HeapRealloc
     2 d 6c69a6cb     0001 (0001)  0:**** mshtml!CTableCol::GetAAspan
     3 e 0019eb90 w 1 0001 (0001)  0:**** 
    0:004> g
    Breakpoint 3 hit
    eax=00010048 ebx=00001004 ecx=0019eba8 edx=00000010 esi=0019eb90 edi=0019eba8
    eip=6ca40a49 esp=0249c5f4 ebp=0249c5fc iopl=0         nv up ei pl nz na pe nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000206
    mshtml!CTableColCalc::AdjustForCol+0x2f:
    6ca40a49 eb2a            jmp     mshtml!CTableColCalc::AdjustForCol+0x5b (6ca40a75)
    0:004> ub
    mshtml!CTableColCalc::AdjustForCol+0x1c:
    6ca40a36 85c0            test    eax,eax
    6ca40a38 7411            je      mshtml!CTableColCalc::AdjustForCol+0x31 (6ca40a4b)
    6ca40a3a 6a08            push    8
    6ca40a3c 57              push    edi
    6ca40a3d 8bc3            mov     eax,ebx
    6ca40a3f e83dacbdff      call    mshtml!CUnitValue::SetValue (6c61b681)
    6ca40a44 895e04          mov     dword ptr [esi+4],ebx
    6ca40a47 891e            mov     dword ptr [esi],ebx
    0:004> dd 0019eb90 L30
    0019eb90  00001004 00001004 00001004 00000000
    0019eba0  0065006c 002f0000 00010048 00000000
    0019ebb0  00000000 00000000 00000000 007a002f
    0019ebc0  00630040 00000000 00000000 00000000
    0019ebd0  00000000 00000000 007a002f 00630040
    0019ebe0  00000000 00000000 00000000 00000000
    0019ebf0  00000000 0019006c ad860000 00000000
    0019ec00  00000000 00000000 00000000 00000000
    0019ec10  05000005 00009841 00000000 00000000
    0019ec20  00000000 00000000 00000000 00000000
    0019ec30  00000000 00000000 2773a3b8 0c009846
    0019ec40  00000000 001410a0 005c0044 00002001
从PoC中可以看到此时对应的width属性值为41，0x0019eb90处写入的内容就为width值41*100=0x00001004，事实上程序断下来的时候0x1C个字节的样式信息都已写入完成。我们再单步往下跟一下：
    0:004> p
    eax=00010048 ebx=00001004 ecx=0019eba8 edx=00000010 esi=0019eb90 edi=0019eba8
    eip=6ca40a75 esp=0249c5f4 ebp=0249c5fc iopl=0         nv up ei pl nz na pe nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000206
    mshtml!CTableColCalc::AdjustForCol+0x5b: