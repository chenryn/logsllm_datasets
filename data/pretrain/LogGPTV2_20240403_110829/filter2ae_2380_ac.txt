        frame #5: 0x00007fff6a500485 libsystem_info.dylib`_mbr_xpc_pipe + 261
        frame #6: 0x00007fff6a50033f libsystem_info.dylib`_mbr_od_available + 15
        frame #7: 0x00007fff6a4fffe5 libsystem_info.dylib`mbr_identifier_translate + 645
        frame #8: 0x00007fff6a4ffbf5 libsystem_info.dylib`mbr_identifier_to_uuid + 53
        frame #9: 0x00007fff6a4ffbba libsystem_info.dylib`mbr_uid_to_uuid + 42
        frame #10: 0x00007fff6a734db4 libsystem_secinit.dylib`_libsecinit_setup_secinitd_client + 728
        frame #11: 0x00007fff6a734a7b libsystem_secinit.dylib`_libsecinit_initialize_once + 13
        frame #12: 0x00007fff6a3d5db8 libdispatch.dylib`_dispatch_client_callout + 8
        frame #13: 0x00007fff6a3d5d6b libdispatch.dylib`dispatch_once_f + 41
        frame #14: 0x00007fff680aa9d2 libSystem.B.dylib`libSystem_initializer + 136
        ....
        frame #29: 0x000000010056d1d2 dyld`_dyld_start + 54
找到所需的`xpc_pipe_create`函数。可以使用`p (char *)
xpc_copy_description($rsi)`查看通过`XPC`管道发送的消息，这调试非常有用。使用`RSI`寄存器作为消息的第二个参数(第一个参数是管道)。
    (lldb) p (char *) xpc_copy_description($rsi)
    (char *) $0 = 0x0000000101101fa0 " { count = 9, transaction: 0, voucher = 0x0, contents =\n\t"subsystem" => : 5\n\t"handle" => : 0\n\t"instance" =>  00000000-0000-0000-0000-000000000000\n\t"routine" => : 207\n\t"flags" => : 8\n\t"name" =>  { length = 42, contents = "com.apple.system.opendirectoryd.membership" }\n\t"type" => : 7\n\t"targetpid" => : 0\n\t"domain-port" =>  { name = 1799, right = send, urefs = 5 }\n}"
这也不是所需要的。这只是一个握手信息，继续。
    (lldb) c
    Process 12594 resuming
    Process 12594 stopped
    * thread #1, queue = 'com.apple.main-thread', stop reason = breakpoint 1.1
        frame #0: 0x00007fff6a75ec40 libxpc.dylib`xpc_pipe_routine
    libxpc.dylib`xpc_pipe_routine:
    ->  0x7fff6a75ec40 : pushq  %rbp
        0x7fff6a75ec41 : movq   %rsp, %rbp
        0x7fff6a75ec44 : pushq  %r15
        0x7fff6a75ec46 : pushq  %r14
    Target 0: (iHex) stopped.
    ...
    (lldb) c
    Process 12594 resuming
    Process 12594 stopped
    * thread #1, queue = 'com.apple.main-thread', stop reason = breakpoint 1.1
        frame #0: 0x00007fff6a75ec40 libxpc.dylib`xpc_pipe_routine
    libxpc.dylib`xpc_pipe_routine:
    ->  0x7fff6a75ec40 : pushq  %rbp
        0x7fff6a75ec41 : movq   %rsp, %rbp
        0x7fff6a75ec44 : pushq  %r15
        0x7fff6a75ec46 : pushq  %r14
    Target 0: (iHex) stopped.
    (lldb) p (char *) xpc_copy_description($rsi)
    (char *) $5 = 0x0000000102821a00 " { count = 11, transaction: 0, voucher = 0x0, contents =\n\t"SECINITD_REGISTRATION_MESSAGE_SHORT_NAME_KEY" =>  { length = 4, contents = "iHex" }\n\t"SECINITD_REGISTRATION_MESSAGE_IS_SANDBOX_CANDIDATE_KEY" => : true\n\t"SECINITD_REGISTRATION_MESSAGE_ENTITLEMENTS_DICT_KEY" =>  { count = 6, transaction: 0, voucher = 0x0, contents =\n\t\t"com.apple.security.app-sandbox" => : true\n\t\t"com.apple.application-identifier" =>  { length = 30, contents = "A9TT2D59XS.com.hewbo.hexeditor" }\n\t\t"com.apple.security.print" => : true\n\t\t"com.apple.security.files.user-selected.read-write" => : true\n\t\t"com.apple.developer.team-identifier" =>  { length = 10, contents = "A9TT2D59XS" }\n\t\t"com.apple.security.network.client" => : true\n\t}\n\t"SECINITD_REGISTRATION_MESSAGE_LIBRARY_VALIDATION_KEY" => : false\n"
    (lldb)
包含程序的权限以及它是否是沙盒的候选项的宝贵信息。正如所见，`SECINITD_REGISTRATION_MESSAGE_IS_SANDBOX_CANDIDATE_KEY`设置为`bool
true`，并且确实拥有`com.apple.security.app-sandbox`权限。
可以看到了进程发送给`secinitd`的内容，看是否正在创建沙盒。使用设置的第二个断点，即`__sandbox_ms`上的断点，继续(c)直到找到它。
    (lldb) bt
    * thread #1, queue = 'com.apple.main-thread', stop reason = breakpoint 1.1
      * frame #0: 0x00007fff6a55f648 libsystem_kernel.dylib`__mac_syscall
        frame #1: 0x00007fff6a731bc9 libsystem_sandbox.dylib`sandbox_container_path_for_pid + 63
        frame #2: 0x00007fff6a4edd0c libsystem_coreservices.dylib`_dirhelper_init + 159
        frame #3: 0x00007fff6a71cf00 libsystem_platform.dylib`_os_once + 33
        frame #4: 0x00007fff6a4ee754 libsystem_coreservices.dylib`_dirhelper + 1873
        frame #5: 0x00007fff6a4604e9 libsystem_c.dylib`confstr + 525
        frame #6: 0x00007fff6a7354a5 libsystem_secinit.dylib`_libsecinit_setup_app_sandbox + 474 # As you can see, the Sandbox is set.
        frame #7: 0x00007fff6a734a82 libsystem_secinit.dylib`_libsecinit_initialize_once + 20
        frame #8: 0x00007fff6a3d5db8 libdispatch.dylib`_dispatch_client_callout + 8
        frame #9: 0x00007fff6a3d5d6b libdispatch.dylib`dispatch_once_f + 41
        frame #10: 0x00007fff680aa9d2 libSystem.B.dylib`libSystem_initializer + 136
        frame #11: 0x0000000100582ac6 dyld`ImageLoaderMachO::doModInitFunctions(ImageLoader::LinkContext const&) + 420
        frame #12: 0x0000000100582cf6 dyld`ImageLoaderMachO::doInitialization(ImageLoader::LinkContext const&) + 40
        frame #13: 0x000000010057e218 dyld`ImageLoader::recursiveInitialization(ImageLoader::LinkContext const&, unsigned int, char const*, ImageLoader::InitializerTimingList&, ImageLoader::UninitedUpwards&) + 330
        frame #14: 0x000000010057e1ab dyld`ImageLoader::recursiveInitialization(ImageLoader::LinkContext const&, unsigned int, char const*, ImageLoader::InitializerTimingList&, ImageLoader::UninitedUpwards&) + 221
        frame #15: 0x000000010057e1ab dyld`ImageLoader::recursiveInitialization(ImageLoader::LinkContext const&, unsigned int, char const*, ImageLoader::InitializerTimingList&, ImageLoader::UninitedUpwards&) + 221
        frame #16: 0x000000010057e1ab dyld`ImageLoader::recursiveInitialization(ImageLoader::LinkContext const&, unsigned int, char const*, ImageLoader::InitializerTimingList&, ImageLoader::UninitedUpwards&) + 221
        frame #17: 0x000000010057e1ab dyld`ImageLoader::recursiveInitialization(ImageLoader::LinkContext const&, unsigned int, char const*, ImageLoader::InitializerTimingList&, ImageLoader::UninitedUpwards&) + 221
        frame #18: 0x000000010057e1ab dyld`ImageLoader::recursiveInitialization(ImageLoader::LinkContext const&, unsigned int, char const*, ImageLoader::InitializerTimingList&, ImageLoader::UninitedUpwards&) + 221
        frame #19: 0x000000010057e1ab dyld`ImageLoader::recursiveInitialization(ImageLoader::LinkContext const&, unsigned int, char const*, ImageLoader::InitializerTimingList&, ImageLoader::UninitedUpwards&) + 221
        frame #20: 0x000000010057d34e dyld`ImageLoader::processInitializers(ImageLoader::LinkContext const&, unsigned int, ImageLoader::InitializerTimingList&, ImageLoader::UninitedUpwards&) + 134
        frame #21: 0x000000010057d3e2 dyld`ImageLoader::runInitializers(ImageLoader::LinkContext const&, ImageLoader::InitializerTimingList&) + 74
        frame #22: 0x000000010056e567 dyld`dyld::initializeMainExecutable() + 196
        frame #23: 0x0000000100573239 dyld`dyld::_main(macho_header const*, unsigned long, int, char const**, char const**, char const**, unsigned long*) + 7242
        frame #24: 0x000000010056d3d4 dyld`dyldbootstrap::start(macho_header const*, int, char const**, long, macho_header const*, unsigned long*) + 453
        frame #25: 0x000000010056d1d2 dyld`_dyld_start + 54
    (lldb)
接下来，调用`libsystem_secinit`的`_libsecinit_setup_app_sandbox`。这意味着沙盒已经创建好了，将在开始的时候把程序放入沙盒中。接下来的几个`continue`命令将最终落入`libsystem_sandbox.dylib`的`sandbox_check_common`中。最后进入`LaunchServices`，然后通过`AppKit
' -[NSApplication init]`启动应用程序。
    (lldb) c
    Process 13280 resuming
    Process 13280 stopped
    * thread #1, queue = 'com.apple.main-thread', stop reason = breakpoint 1.1
        frame #0: 0x00007fff6a55f648 libsystem_kernel.dylib`__mac_syscall
    libsystem_kernel.dylib`__mac_syscall:
    ->  0x7fff6a55f648 :  movl   $0x200017d, %eax          ; imm = 0x200017D 
        0x7fff6a55f64d :  movq   %rcx, %r10
        0x7fff6a55f650 :  syscall 
        0x7fff6a55f652 : jae    0x7fff6a55f65c            ; 
    Target 0: (iHex) stopped.
    (lldb) bt
    * thread #1, queue = 'com.apple.main-thread', stop reason = breakpoint 1.1
      * frame #0: 0x00007fff6a55f648 libsystem_kernel.dylib`__mac_syscall
        frame #1: 0x00007fff6a731646 libsystem_sandbox.dylib`sandbox_check_common + 322
        frame #2: 0x00007fff6a7318f9 libsystem_sandbox.dylib`sandbox_check_by_audit_token + 177
        frame #3: 0x00007fff43ae952e LaunchServices`_LSIsAuditTokenSandboxed + 149
        frame #4: 0x00007fff6a3d5db8 libdispatch.dylib`_dispatch_client_callout + 8
        frame #5: 0x00007fff6a3d5d6b libdispatch.dylib`dispatch_once_f + 41
        frame #6: 0x00007fff439c7ed1 LaunchServices`_LSIsCurrentProcessSandboxed + 178
        frame #7: 0x00007fff43ae92ec LaunchServices`_LSCheckMachPortAccessForAuditToken + 72
        frame #8: 0x00007fff43ae9448 LaunchServices`_LSCheckLSDServiceAccessForAuditToken + 153
        frame #9: 0x00007fff439c097a LaunchServices`_LSRegisterSelf + 64
        frame #10: 0x00007fff439b9a7c LaunchServices`_LSApplicationCheckIn + 5420
        frame #11: 0x00007fff40d7192c HIServices`_RegisterApplication + 4617
        frame #12: 0x00007fff40d7064c HIServices`GetCurrentProcess + 24
        frame #13: 0x00007fff417cf4ab HIToolbox`MenuBarInstance::GetAggregateUIMode(unsigned int*, unsigned int*) + 63
        frame #14: 0x00007fff417cf435 HIToolbox`MenuBarInstance::IsVisible() + 51
        frame #15: 0x00007fff3fa71197 AppKit`_NSInitializeAppContext + 35
        frame #16: 0x00007fff3fa70590 AppKit`-[NSApplication init] + 443
        frame #17: 0x00007fff3fa701e6 AppKit`+[NSApplication sharedApplication] + 138
        frame #18: 0x00007fff3fa718b2 AppKit`NSApplicationMain + 356
        frame #19: 0x0000000100001c04 iHex`___lldb_unnamed_symbol1$$iHex + 52
    (lldb)
至此，程序沙盒化完成！
###
原文：