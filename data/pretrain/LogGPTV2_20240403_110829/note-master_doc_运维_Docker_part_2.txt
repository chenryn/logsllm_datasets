    0.4.12
      my-pc:5000/${project.artifactId}:${project.version}
        java
        ["java", "-jar", "/${project.build.finalName}.jar"]
                  /
                  ${project.build.directory}
                  ${project.build.finalName}.jar
        http://my-pc:2375
```
- JDK8以上的版本需要添加如下依赖
```xml
        javax.activation
        activation
        1.1.1
```
- 构建并推送
```shell
mvn clean package docker:build -DpushImage
```
### 推送到仓库
```sh
docker images push
```
![202082316201](/assets/202082316201.png)
### 多阶段构建
```Dockerfile
FROM xxx AS T1
FROM xxx AS T2
COPY --from=T1 ...
```
### 最佳实践
利用构建缓存：
- 执行命令时，Docker会检查构建缓存中是否存在基于同一基础镜像，并且执行了相同指令的镜像层
合并镜像：
- 执行docker image build 命令时，可以通过增加--squash 参数来创建一个合并的镜像
![202082316289](/assets/202082316289.png)
no-install-recommends：
- 若使用的是APT包管理器，则应该在执行apt-get install 命令时增加no-install-recommends 参数。这能够确保APT仅安装核心依赖（Depends 中定义）包
不要安装MSI包（Windows）
## Compose
编写docker-compose.yml:
```yml
version: "3.5"
services:
  redis:
    image: "redis:alpine"
    networks:
      my-net:
  nginx:
    image: "nginx"
    networks:
      my-net:
networks:
  my-net:
volumes:
  my-net:
```
启动：
```sh
docker-compose up
```
## Docker 网络
CNM: 定了Docker网络架构的基础组成要素
![2020824154717](/assets/2020824154717.png)
![2020824154742](/assets/2020824154742.png)
Libnetwork是CNM标准的实现
![2020824155551](/assets/2020824155551.png)
```sh
docker network ls # 列出可用网络
docker run -d --network my-net # 指定容器网络
```
如果在相同网络中继续接入新的容器，那么在新接入容器中是可以通过的容器名称来进行网络通信的
### 容器网络
Flannel：主要功能是为容器提供跨主机的网络互连，使得不同主机上的容器可以直接通信，无论它们是否在同一物理网络中。它通过创建虚拟网络层来实现这一目标，并使用Overlay网络技术在物理网络之上构建虚拟网络，其有两种实现：
- UDP
- VXLAN
![使用 UDP 实现 Overlay 网络的方案](/assets/2023525163719.webp)
![VXLAN 实现方案](/assets/202352516382.webp)
```mermaid
sequenceDiagram
    participant Admin as 管理员
    participant FlannelAgent as Flannel代理
    participant Allocator as 分配器
    participant Container as 容器
    Admin->>FlannelAgent: 配置Flannel
    FlannelAgent->>FlannelAgent: 启动
    FlannelAgent->>Allocator: 请求子网分配
    loop 每个主机
        FlannelAgent->>FlannelAgent: 创建虚拟网络接口
        Container->>FlannelAgent: 发送网络流量
        FlannelAgent->>FlannelAgent: 封装数据包到Overlay网络
    end
    FlannelAgent->>FlannelAgent: 路由数据包到目标主机
    FlannelAgent->>Container: 解封装数据包
```
Calico：
![](/assets/2023526133149.webp)
### 网络类型
- Bridge：: 单机桥接网络 Docker设计的NAT网络模型（默认类型）
  -  只能在单个Docker主机上运行，并且只能与所在Docker主机上的容器进行连接
![2020824155816](/assets/2020824155816.png)
```sh
docker network create -d bridge localnet
```
- Host：与主机共享Network Namespace，--net=host
- overlay：多机覆盖网络
- 接入现有网络
- None：:不为容器配置任何网络功能，没有网络 --net=none
- Container：与另一个运行中的容器共享Network Namespace，--net=container:containerID
- 端口映射
```shell
# 将本机8080端口映射到容器80端口
docker run -p 8080:80 
# 将本机端口随机与容器端口映射
docker run -P 
```
## 持久化
每个Docker容器都有自己的非持久化存储。非持久化存储自动创建，从属于容器，生命周期与容器相同
持久化是将数据存储在卷上。卷与容器是解耦的
![2020825152949](/assets/2020825152949.png)
![2020825153020](/assets/2020825153020.png)
卷类型：
- 块存储
  - 适用于对小块数据的随机访问负载
- 文件存储
  - 包括NFS和SMB协议的系统
- 对象存储
  - 适用于较大且长期存储的、很少变更的二进制数据存储。通常对象存储是根据内容寻址
### 卷操作
```sh
docker volume create myv
docker volume inspect myv
docker run ... --mount source=bizvol,target=/vol # 指定容器存储卷
```
## 安全
![202082516037](/assets/202082516037.png)
Docker 平台安全技术：
- Swarm模式
  - 加密节点ID。
  - 基于TLS的认证机制。
  - 安全准入令牌。
  - 支持周期性证书自动更新的CA配置。
  - 加密集群存储（配置DB）。
  - 加密网络
- 内容信任
  - 通过 Docker Hub 信任内容
- 密钥
  - 使用`docker secret`管理密钥
### Namespace
Docker 提供的容器环境是和 Linux 内核隔离的。想要实现这种隔离，就需要用到 Namespace 机制 Namespace的隔离并不够彻底
### Capabilities
提供了更细粒度的授权机制，它定义了主体能够进行的某一类操作
- 拒绝所有的挂载操作；
- 拒绝部分文件的操作，比如修改文件所有者；
- 拒绝内核模块加载
### CGroups
利用 CGroups 机制来实现对容器中内存、CPU 和 IO 等的限制
### 守护进程安全性
守护进程，具备操控 Docker 容器的全部权限
如果守护进程提供的API接口没有认证，则很容易被入侵
### 镜像安全
- 最小精简镜像
- 使用User 指令指定运行用户
## 容器管理
### Rancher
可以对容器进行分类、分环境管理，以图形化界面操作docker
Rancher是一个开源的企业级全栈化容器部署及管理平台。Rancher为容器提供一揽 子基础架构服务：CNI兼容的网络服务、存储服务、主机管理、负载均衡、防护墙…… Rancher让上述服务跨越公有云、私有云、虚拟机、物理机环境运行，真正实现一键式应 用部署和管理
- 主机
- 应用
- 容器
- 服务
- 扩容缩容
### influxDB
>InfluxDB是一个由InfluxData开发的开源时序型数据库。它由Go写成，着力于高性能地查询与存储时序型数据。InfluxDB被广泛应用于存储系统的监控数据，IoT行业的实时数据等场景
### cAdvisor
>CAdvisor是Google开源的一款用于展示和分析容器运行状态的可视化工具。通过在主机上运行CAdvisor用户可以轻松的获取到当前主机上容器的运行统计信息，并以图表的形式向用户展示
### Grafana
>grafana 是一款采用 go 语言编写的开源应用，主要用于大规模指标数据的可视化展现，是网络架构和应用分析中最流行的时序数据展示工具，目前已经支持绝大部分常用的时序数据库