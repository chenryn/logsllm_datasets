(cid:12)rst checks if the response is fresh by checking the existence
of NC in the memory and then performs the reachability
test by recomputing Z and matching it with the received
one. Finally, the server checks if the last Q bits of H(M, X)
have integer value in [0, D].
Bitcoin. Our proposed client puzzle is similar to the math-
ematical problem used in the Bitcoin peer-to-peer cryptocur-
rency scheme [21]. The main unit of currency of this digital
currency system are called Bitcoins. These are not physical
objects but numbers produced by network nodes. A network
node generates a new coin whenever it (cid:12)nds a solution to a
certain mathematical problem. The mathematical problem
used in the Bitcoin system is similar to our proposed client
puzzle with SHA-256 as the hash function, and the hexadec-
imal value of D as 0000000000081CD2jj048, and Q = 256.
2.2 Security of Client Puzzles
Recently, Chen et al. described a security model for client
puzzles, by considering a game between a challenger and
an adversary [9]. They proposed formal de(cid:12)nition for client
puzzles and two properties: puzzle unforgeability and puzzle
di(cid:14)culty. We now give a brief overview of the client puzzle
and puzzle di(cid:14)culty de(cid:12)nitions of Chen et al.
De(cid:12)nition 1. A client puzzle CPuz consists of the follow-
ing algorithms [9]:
(cid:15) Setup: On input 1k for security parameter,
{ Establishes long term secret key space sSpace,
hardness space QSpace, string space strSpace, puz-
zle instance space puzSpace, and solution space
solnSpace
{ Selects the long term puzzle generation key s $ 
sSpace, and
{ Outputs s and public parameters params.
(cid:15) GenPuz: Generates a puzzle instance puz 2 puzSpace
based on inputs long-term secret s 2 sSpace, puzzle
di(cid:14)culty Q2 QSpace and string str 2 strSpace.
(cid:15) FindSoln: Finds a potential solution soln 2 solnSpace
for puzzle puz 2 puzSpace within running time t.
(cid:15) VerAuth: Checks the authenticity of puzzle
puz 2 puzSpace using long-term secret s2 sSpace.
(cid:15) VerSoln: Checks the correctness of a potential solution
soln 2 solnSpace for puzzle puz 2 puzSpace.
Client
Server
Setup phase
Puzzle phase
$  f0; 1gk and generate
Select a secret K
$  f0; 1gk, periodically.
a nonce NS
Pick the puzzle di(cid:14)culty level Q
and an Q-bit integer D, based on
the availability of system resources.
$  f0; 1gk
Generate a nonce NC
Set M   ZjjNSjjNCjjIDSjjIDC
Find X such that
H(M; X) mod 2Q (cid:20) D
Request
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)! Compute Z   H(K; Q; D; NS ; IDC )
 (cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
Q; D; NS ; Z
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)! Check if (NS ; Q; D) is recent and
Q; D; NS ; Z; NC ; X
NC is not used before.
Check if Z
Set M   ZjjNSjjNCjjIDSjjIDC
Check if H(M; X) mod 2Q (cid:20) D
?
= H(K; Q; D; NS ; IDC )
Figure 2: Our client puzzle, GPuz.
De(cid:12)nition 2. (Puzzle di(cid:14)culty) Let Q be a di(cid:14)culty pa-
rameter and let k be a security parameter. Let ϵk,Q((cid:1)) be
a family of monotonically increasing functions and A be a
probabilistic polynomial time algorithm.
For the puzzle di(cid:14)culty of CPuz, consider the game
A,CPuz(k), between a challenger C and an adversary A,
ExecQ,DIFF
de(cid:12)ned as follows:
(cid:15) The challenger C sets (params, s)   Setup(1k) and out-
put params is given to A.
(cid:15) The adversary A can ask any number of
CreatePuzSoln(str) queries. For each such query C gen-
erates a fresh puzzle puz   GenPuz(s, Q, str), (cid:12)nds a
solution soln for puz, and returns (puz, soln) to A.
(cid:15) At any point in time, A can make a single Test(str
†
)
query. For this query, C creates a challenge puzzle
puz   GenPuz(s, Q, str
) and returns it to A.
†
(cid:15) A outputs a potential solution soln
†
. C returns true if
VerSoln(puz
) = true, and false otherwise.
†
†
, soln
A client puzzle CPuz is said to be ϵk,Q((cid:1))(cid:0)DIFF if
SuccQ,DIFF
A,CPuz(k) = Pr[ExecQ,DIFF
A,CPuz(k) = 1] (cid:20) ϵk,Q(t)
for all probabilistic algorithms A running in time at most t.
Note that, instead of using the running time of the adversary,
puzzle di(cid:14)culty can also be de(cid:12)ned in terms of the number
of oracle queries made by an adversary in the random oracle
model. In the following sections, we consider each query to
the oracle as a step taken by the adversary to solve a puzzle.
2.3 Speciﬁcation and Security of GPuz
Let H : f0, 1g∗ ! f0, 1g2k be a random oracle and k 2 N.
GPuz is a client puzzle consisting of the following algorithms:
(cid:15) Setup: On input 1k for security parameter,
{ Establishes long term secret key space sSpace  
K, hardness space QSpace   f(Q, D) : Q 2
f0, . . . , 2kg, D 2 f0, . . . , 2Q (cid:0) 1gg, string space
strSpace   f0, 1g∗
puzSpace   f0, 1gk (cid:2) QSpace, and solution space
solnSpace   f0, 1g∗
, puzzle instance space
.
{ Sets K $  K.
(cid:15) GenPuz(K, (Q, D), str): Generates a puzzle instance
$  f0, 1gk and Z is
puz = ((Q, D), NS, Z) where NS
computed as Z   H(K, (Q, D), NS, str).
:
(cid:15) FindSoln(puz, t): For i from 0 to maxft, 2Qg. Set soln  
if the (cid:12)rst Q bits of H(puz : soln) have
X 2 f0, 1g∗
decimal value in [0, D], then output soln.
′
computes Z   H(K, (Q
this outputs true and otherwise outputs false.
′
): For a puzzle puz
= ((Q
′
S, str
).
), N
(cid:15) VerAuth(K, puz
′
′
S, Z
If Z = Z
), N
, D
, D
′
′
),
,
′
′
′
′
′
(cid:15) VerSoln(puz
bits of H(puz
true. Otherwise, return false.
′
, soln
′
, soln
′
): If the decimal value of the (cid:12)rst Q
) does not exceed D, then return
From the design principle of our client puzzle GPuz, the
unforgeability property of Chen et al. is easily achieved here.
Since a keyed hash function H is used for puzzle generation,
except for the key holder, the probability of generating a
valid looking puzzle is negligible in the security parameter,
the length of the key.Now we show that GPuz satis(cid:12)es the
di(cid:14)culty de(cid:12)nition of the Chen et al. model.
Theorem 1. Let ϵk,(Q,D)(q) = (D+1)(q+1)
and H be a
random oracle. Then GPuz is an ϵk,(Q,D)(q)-DIFF client
puzzle, where q is the number of distinct queries to H.
2Q
Proof: We prove the theorem using a counting argument.
Let A be a probabilistic algorithm. Now, (cid:12)x Q and D. Then,
to win the di(cid:14)culty game, an optimal strategy for A is to
make at most 2Q oracle calls to H. Let (cid:22)X1, (cid:22)X2, . . . (cid:22)Xq be the
q distinct queries made to H. Let (cid:22)X = f (cid:22)X1, (cid:22)X2, . . . (cid:22)Xqg (cid:18)
117
q∪
Ai) (cid:20) q∑
i=1
i=1
Pr(B) = Pr(
Pr(Ai) (cid:20) (D + 1)q
2Q
.
f0, 1g∗
and (cid:22)Yi be the random variable taking values in f0, 1g
such that (cid:22)Yi = 1 i(cid:11) H( (cid:22)Xi) mod 2Q (cid:20) D. Let Ai be the
event that (cid:22)Xi is a valid solution to GPuz. Then, Pr(Ai) =
Pr( (cid:22)Yi = 1) = (D + 1)/2Q.
Let B be the event that there exists at least one (cid:22)Xj 2 (cid:22)X
such that H( (cid:22)Xj) mod 2Q (cid:20) D. That is, B =
q
i=1 Ai.
Then,
∪
Note that for any adversary A making q queries to H, the
probability that A returns a value (cid:22)Xi with the left most Q
bits of H( (cid:22)Xi) being smaller than D is at most (D+1)q
and
if that fails, then he has to guess the solution at random.
Thus,
2Q
Succ(Q,D),DIFF
A,GPuz
(k) = Pr[Exec(Q,D),DIFF
(k) = 1]
= Pr[AwinsjB] Pr(B)
(cid:20) 1 (cid:2) (D+1)q
(cid:20) (D+1)(q+1)
A,GPuz
+ Pr[Awinsj (cid:22)B] Pr( (cid:22)B)
(cid:2) (1 (cid:0) q
2Q )
2Q + (D+1)
2Q
= ϵk,(Q,D)(q).
2Q
Strongly di(cid:14)cult puzzles of Stebila et al. [24]. Stebila et
al. extended the di(cid:14)culty notion of Chen et al.’s model by
showing that for a powerful adversary, solving n puzzles
should not be easier than solving one puzzle n times [24]. It
can be shown that GPuz is an ϵk,(Q,D),n(q)-strongly-di(cid:14)cult
interactive client puzzle with
(
)
ϵk,(Q,D),n(q) =
(D + 1)(q + n)
n2Q
n
.
3. A GRADUAL AUTHENTICATION PRO-
TOCOL
In this section, we propose an authentication scheme for
a defending server to authenticate its clients in a gradual
manner. The scheme combines client puzzles for achieving
weak authentication with a signature scheme proposed by
Bernstein [5] for achieving strong, fast authentication.
3.1 Bernstein’s Fast-Veriﬁcation Digital Sig-
natures
The Rabin-Williams signature system [28] is provably as
secure as factorization and had the most e(cid:14)cient veri(cid:12)cation
scheme known until 2000, when Bernstein proposed a Rabin-
Williams variant with the same security and signing speed
but much faster veri(cid:12)cation. We refer to this scheme as
FVDS (Fast-Veri(cid:12)cation Digital Signatures).
De(cid:12)nition 3. (FVDS Signature Scheme [5]) Let M be a
set of messages and let H : M (cid:2) fr 2 Z : 0 (cid:20) r < 2ℓg !
fh 2 Z : 0 < h < 2L, h mod 8 = 1g be a hash function.
The signature schemes consists of the following algorithms:
(cid:15) KeyGen: Generate an RSA private key sk = (p, q) and
corresponding public key pk = n = pq so that jnj = L.
(cid:15) Sign(sk = (p, q), m): Compute a signature (r, h, f, t, s)
such that 0 (cid:20) r < 2ℓ, h = H(m, r), f 2 f(cid:0)2,(cid:0)1, 1, 2g,
0 (cid:20) s < 2L, 0 (cid:20) t < 2L, and s2 = f (cid:1) h + t (cid:1) n.
(cid:15) Verify(pk = n, m, (r, h, f, t, s)): Check if h = H(m, r)
and s2 = f (cid:1) h + t (cid:1) n.
Security. FVDS is secure { existentially unforgeable a-
gainst adaptive chosen message attacks [13] { under the as-
sumption that factorization of an RSA modulus is harder.
Depending on the exact range of r and how f is computed,
the security reduction may be tight [6].
E(cid:14)ciency. Compared with other signatures schemes like
RSA and DSA, veri(cid:12)cation for FVDS needs only a few op-
erations: one hash function, one modular squaring, and two
modular multiplications.
Interestingly, the veri(cid:12)cation operation can be made to
work with even smaller integers. The core of the veri(cid:12)cation
operation is checking if s2 = f (cid:1) h + t (cid:1) n. As suggested by
Bernstein [5], a veri(cid:12)er could do this check modulo a smaller
secret random prime. For example, the veri(cid:12)er could pick
′
a small random prime c, compute s
= t
′
mod c, n
= h mod c, and then check if
)2 (cid:0) t
′(cid:1) n
′
mod c = 0. For an appropriately sized c
(s
(say 115 bits), the chance of fooling the modi(cid:12)ed veri(cid:12)cation
algorithm is negligible. Alternatively, one could perform this
check for several very small (say, 32-bit) primes, as long as
the product of these primes exceeded a certain value.
= n mod c, and h
′ (cid:0) f (cid:1) h
′
= s mod c, t
′
′
We implemented the FVDS scheme in the OpenSSL open
source cryptographic library [29], both as a standalone signa-
ture scheme and for use in the SSL protocol (we discuss the
latter issue in the next section). In particular, we modi(cid:12)ed
OpenSSL version 1.0.0 to support FVDS using the built-
in big-integer operations, and compared the performance of
this scheme with the built-in RSA implementation. We car-
ried out performance evaluations on one core of a machine
with an Intel Core 2 Duo 2.53GHz (T9400) processor.
Our results are reported in Table 1. FVDS veri(cid:12)cation
signi(cid:12)cantly outperforms RSA veri(cid:12)cation; for example, for
a 1024-bit modulus, a 64-bit computer can verify 6 times as
many FVDS signatures compared to RSA signatures. We