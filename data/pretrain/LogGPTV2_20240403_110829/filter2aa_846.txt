YOU’RE DOING IOT RNG
• Random numbers are very important to security
• Encryption keys
• Authentication tokens
• Business logic 
• Computers are notoriously bad at making random numbers
• They inherently only do deterministic functions
• Hardware RNG
• Makes entropy
• Solves the problem… right?
RANDOM NUMBERS
DOING RNG
2
Input
Computer 
Magic
Output
• PRNG (Pseudo RNG)
• Cryptographically Secure
• “Regular”
RANDOM NUMBERS
DOING RNG
3
• “True” RNG (TRNG)
• Terrible name
• Hardware RNG
• Black boxes
• Very little information
• Except the STM32, great info!
• Two common implementations:
• Analog circuit
• Clock timings
• Issues that come up
• Running too fast
• Accidental syncing
HARDWARE RNG DESIGN
DOING RNG
4
Analog 
Circuit
Method
Output
Clock A
Clock B
Clock Timings Method
Measured Delta
Normal
Distribution
• Most new IoT SoCs have a hardware RNG as of 2021
• An entire hardware peripheral devoted to doing just this one thing
• Surely it must be super secure
• No operating systems
• IoT devices run C/C++ on bare metal
• Call it like this:
• u8 hal_get_random_number(u32 *out_number);
• Two parts we care about here:
• Output variable (our random number)
• Return code
HOW IOT DOES RNG
DOING IOT RNG
5
FREERTOS
MEDIATEK 7697
NOBODY
6
CHECKS 
ERROR 
CODES
(Two Examples)
• What happens when the RNG call fails?
WHAT’S THE WORST THAT COULD HAPPEN?
PETRO’S LAW FORESHADOWING
7
Undefined
Behavior
• Typically one of:
• Partial entropy
• The number 0
WHAT’S THE WORST THAT COULD HAPPEN?
FORESHADOWING
8
u8 hal_get_random_number(u32 *out_number);
Call #1
Call #2
Call #3
Call #4
https://imgs.xkcd.com/comics/random_number.png
IT CAN ALWAYS BE WORSE
PETRO’S LAW:
• Uninitialized memory
WHAT’S THE WORST THAT COULD HAPPEN?
IT’S WORSE
10
u32 random_number;
hal_get_random_number(&random_number);
// Sends over the network
packet_send(random_number);
Arbitrary bytes from RAM!
• RSA Certificate Vulnerability Factoring RSA Keys in the IoT Era
• https://www.keyfactor.com/resources/factoring-rsa-keys-in-the-iot-era/
“435,000 weak certificates – 1 in 172 of the certificate we found on the Internet – are vulnerable to attack.”
• Rationale:
REAL WORLD INSTANCES?
THE IOT CRYPTO-POCALYPSE
11
RANDOM NUMBERS ARE CRITICAL
You can’t just “handle” the error and move forward without it
YOU’RE GIVEN TWO OPTIONS:
Spin-loop (using 100% CPU) indefinitely
Quit out and kill the entire process
BOTH ARE UNACCEPTABLE
Will lead to buggy, broken, and useless devices
DEVELOPERS GO FOR OPTION THREE:
YOLO
DON’T BLAME
THE USER
12
if(HAL_TRNG_STATUS_OK != 
hal_trng_get_generated_random_number(&random_number)) {
//error handle
}
RNG IN IOT IS FUNDAMENTALLY BROKEN
IT IS NOT THE FAULT OF THE USER
BISHOPFOX
PROPRIETARY | 2019
13
• Cryptographically Secure Pseudorandom Number Generator (CSPRNG)
• Never blocks execution
• API calls never fail
• Pools from many entropy sources
• Always returns crypto-quality results
• This is how every major operating system works
• Linux, MacOS, Windows, BSD, etc…
• This is how IoT should work too
THE RIGHT WAY TO RNG
DOING CSPRNG
14
HW RNG
Network
Int Timing
…
Entropy Pool
API
Apps
Entropy Sources
C
S
P
R
N
G
WHY YOU REALLY DO NEED A 
CSPRNG SUBSYSTEM
• Nobody codes from scratch
• In IoT, there’s lots of reference and example code
• When the reference code has vulnerabilities it propagates out
• Some IoT devices / Operating Systems use the hardware
• But only to seed the insecure libc PRNG
USING HARDWARE RNG TO SEED AN INSECURE PRNG
DOING IOT RNG WITHOUT KNOWING IT
16
Contiki-NG: The OS for Next 
Generation IoT Devices
https://github.com/MediaTek-Labs/Arduino-Add-On-for-LinkIt-
SDK/blob/53acd43fbee57b034141068969fa643465dfd743/project/linkit7697_hdk/apps/wifi_demo/src/sys_init.c#L198
Mediatek Linkit7697
https://contiki-ng.readthedocs.io/en/release-v4.6/_api/arch_2cpu_2nrf52840_2dev_2random_8c_source.html
• You’re not really using the hardware
• Even though you think you are
USING HARDWARE RNG TO SEED AN INSECURE PRNG
DOING IOT RNG WITHOUT KNOWING IT
17
Contiki-NG: The OS for Next 
Generation IoT Devices
https://github.com/MediaTek-Labs/Arduino-Add-On-for-LinkIt-
SDK/blob/53acd43fbee57b034141068969fa643465dfd743/project/linkit7697_hdk/apps/wifi_demo/src/sys_init.c#L198
Mediatek Linkit7697
https://contiki-ng.readthedocs.io/en/release-v4.6/_api/arch_2cpu_2nrf52840_2dev_2random_8c_source.html
HW RNG
Seed
libc rand()
Apps
DEMO
• Often very context-dependent
• Not a simple CVE with exploit to apply
• But still very exploitable
• Just not canned
• Look at crypto keys, especially asymmetric keys
• Very long (2048 bits or more)
• Sensitive to low entropy
• Check out “The Mechanics of Compromising Low Entropy RSA Keys”
• At this DEF CON
• (we did not plan this)
EXPLOITABILITY
SORRY, BUG BOUNTY HUNTERS
19
• Never write your own code that interfaces with a hardware RNG
• It’s no different than crypto code
• You WILL do it wrong
• Example: LPC 54628
• Warning on page 1,106 (of 1,152)
• Throw out 32 results, then use again
USAGE QUIRKS
EVEN WHEN IOT RNG FEELS RIGHT, YOU’RE STILL DOING IOT RNG
20
• Mediatek 7697
STATISTICAL ANALYSIS
THAT'S NOT SO RANDOM
21
Histogram of the frequency of each byte 0 to 255 
That’s not very random…
• Nordic nrf52840
STATISTICAL ANALYSIS
NULL HYPOTHESIS
22
Repeating 0x000 pattern
Every 0x50 bytes
• STM32-L432KC
STATISTICAL ANALYSIS
GB OF CONFIDENCE 
23
#=============================================================================#
#            dieharder version 3.31.1 Copyright 2003 Robert G. Brown          #
#=============================================================================#
rng_name|filename rands/second|file_input_raw|STM32L432randData.bin|1.72e+07  |
#=============================================================================#
test_name
|ntup| tsamples |psamples|  p-value |Assessment
#=============================================================================#
rgb_minimum_distance|   0|     10000|    1000|0.00000000|  FAILED
CONCLUSIONS
This affects the whole IoT industry
• Not a single vendor or device
The IoT needs a CSPRNG subsystem
• This can’t be fixed by changing documentation and blaming users
RNG code should be considered dangerous to write on your own
• Just like crypto code
Never use entropy directly from the hardware
• You don’t know how strong or weak it may be
CONCLUSIONS
YOU’RE DOING IOT RNG
25
Device Owners
• Keep an eye out for updates
IoT Device Developers
• Use one of the emerging IoT Operating Systems
IoT Device Manufacturers / IoT OS Developers
• Implement CSPRNG subsystems, deprecate / disallow users from reading directly from the hardware
Pen Testers
• This will probably be a perennial finding for years to come
CONCLUSIONS
WHAT YOU CAN DO ABOUT IT
26
THANK
YOU
• Dan “AltF4” Petro
• Allan Cecil (dwangoAC)