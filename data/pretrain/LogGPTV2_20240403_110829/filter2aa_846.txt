# Random Number Generation (RNG) in IoT

## Introduction
Random numbers are crucial for security, particularly in the context of:
- **Encryption keys**
- **Authentication tokens**
- **Business logic**

However, computers are inherently poor at generating true randomness due to their deterministic nature. This is where hardware-based random number generators (RNGs) come into play.

## Types of RNGs
### Pseudo-Random Number Generators (PRNGs)
- **Pseudorandom**: Generated using deterministic algorithms.
- **Cryptographically Secure PRNG (CSPRNG)**: Designed to produce numbers that are statistically random and unpredictable.
- **Regular PRNG**: Suitable for non-cryptographic purposes.

### True Random Number Generators (TRNGs)
- **Hardware RNG**: Utilizes physical processes to generate entropy.
- **Analog Circuits and Clock Timings**: Common methods for generating true randomness.
- **Issues**: Can include running too fast or accidental synchronization.

## Hardware RNG Design
- **Analog Circuit Method**: Uses noise from analog circuits.
- **Clock Timings Method**: Measures the time difference between two clocks.

As of 2021, most new IoT System-on-Chips (SoCs) include a dedicated hardware RNG peripheral. However, this does not guarantee security without proper implementation.

## Implementing RNG in IoT
### Function Call Example
```c
u8 hal_get_random_number(u32 *out_number);
```
- **Output Variable**: Stores the generated random number.
- **Return Code**: Indicates the success or failure of the operation.

### Error Handling
- **Undefined Behavior**: If the RNG call fails, it can result in partial entropy or returning zero.
- **Uninitialized Memory**: Can lead to arbitrary bytes from RAM being used, potentially compromising security.

### Real-World Implications
- **RSA Certificate Vulnerability**: Weak RSA keys due to low entropy can be factored, leading to significant security risks.
- **Example**: 435,000 weak certificates on the Internet are vulnerable to attack.

### Developer Practices
- **Spin-loop**: Consumes 100% CPU indefinitely.
- **Quit Process**: Kills the entire process.
- **YOLO Approach**: Ignoring errors and proceeding, which can lead to buggy and insecure devices.

### Correct Implementation
- **CSPRNG Subsystem**: 
  - Never blocks execution.
  - API calls never fail.
  - Pools from multiple entropy sources.
  - Always returns cryptographically secure results.
  - Used in major operating systems like Linux, macOS, Windows, and BSD.

### Current Issues
- **Insecure PRNG Seeding**: Some IoT devices use hardware RNG to seed an insecure libc PRNG, leading to vulnerabilities.
- **Example**: Mediatek Linkit7697 and Contiki-NG.

### Exploitability
- **Context-Dependent**: Not a simple CVE with a canned exploit.
- **Sensitive to Low Entropy**: Especially for long asymmetric keys (2048 bits or more).

### Best Practices
- **Avoid Writing Custom RNG Code**: Treat RNG code like cryptographic code; it is easy to get wrong.
- **Usage Quirks**: Follow vendor guidelines carefully. For example, the LPC 54628 requires discarding the first 32 results.

### Statistical Analysis
- **Mediatek 7697**: Histogram shows non-uniform distribution.
- **Nordic nrf52840**: Repeating patterns every 0x50 bytes.
- **STM32-L432KC**: Fails dieharder statistical tests.

### Conclusions
- **Industry-Wide Issue**: Affects the entire IoT industry.
- **Need for CSPRNG Subsystems**: Essential for secure random number generation.
- **User Responsibility**: Keep devices updated.
- **Developer Responsibility**: Use emerging IoT operating systems and implement CSPRNG subsystems.
- **Pen Testers**: Likely to find these issues frequently in the future.

## Acknowledgments
- **Dan “AltF4” Petro**
- **Allan Cecil (dwangoAC)**

Thank you for your attention.