### 7.2 设置负载均衡器——基于主/从的集群

实际上，设置一个基于负载均衡器的Warren非常简单，用到的都是你已经掌握的概念。首先，在你的开发系统上启动两个RabbitMQ节点，并将它们分别命名为`rabbit_a`和`rabbit_b`，以避免与已运行的本地集群节点冲突（从RabbitMQ安装目录运行）：

```bash
$ RABBITMQ_NODE_PORT=5675 RABBITMQ_NODENAME=rabbit_a ./sbin/rabbitmq-server -detached
Activating RabbitMQ plugins ...
$ RABBITMQ_NODE_PORT=5676 RABBITMQ_NODENAME=rabbit_b ./sbin/rabbitmq-server -detached
Activating RabbitMQ plugins...
```

在启动了主节点和备用节点之后，接下来需要配置一个新的HAProxy配置文件，将`rabbit_b`设置为备用服务器，仅在`rabbit_a`发生故障时才启动。以下是一个HAProxy配置示例：

```plaintext
# HAProxy Config for Local RabbitMQ SLB Warren
global
    log stdout format raw local0
defaults
    mode tcp
    option tcplog
    timeout connect 5000ms
    timeout client  50000ms
    timeout server  50000ms

frontend rabbitmq_front
    bind *:5680
    default_backend rabbitmq_back

backend rabbitmq_back
    balance roundrobin
    server rabbit_a 127.0.0.1:5675 check inter 5000 rise 2 fall 3
    server rabbit_b 127.0.0.1:5676 check inter 5000 rise 2 fall 3 backup
```

为了测试刚刚配置好的Warren，我们从集群部分启动消费者，运行以下命令：

```bash
$ python cluster_test_consumer.py localhost 5680
Ready for testing!
```

连接成功后，通过运行以下命令进行测试：

```bash
$ python cluster_test_producer.py localhost 5680
Sent cluster test message.
```

消费者输出：

```bash
Received: Cluster Test!/1301612486
```

现在来测试故障转移。停止`rabbit_a`上的Erlang应用程序，执行以下命令：

```bash
$ ./sbin/rabbitmqctl -n rabbit_a stop_app
```

由于HAProxy每隔5秒对后台服务器进行健康检查，并且需要失败三次才会认为其不可用，因此等待大约15秒后，消费者应重新连接到备用节点。此时，你应该看到类似以下的输出：

```bash
$ python cluster_test_consumer.py localhost 5680
Ready for testing!
Received: Cluster Test!/1301612545
```

如果查看HAProxy数据统计页面（http://localhost:8101/stats），应该会看到`rabbit_b`已经接管了服务。

### 7.3 远距离通信和复制

当只有一个数据中心时，RabbitMQ集群对于提升消息通信性能非常有效；但在不同城市的RabbitMQ服务器之间路由消息时，集群就显得力不从心了。尝试使用集群连接地理位置不同的数据中心会导致一些问题：首先，无法控制队列放置的具体位置；其次，Erlang的OTP通信框架难以承受网络延迟。在这种情况下，可以使用Shovel插件来实现远距离通信和复制。

#### 7.3.1 Shovel插件介绍

Shovel是RabbitMQ的一个插件，允许你在RabbitMQ上的队列和另一个RabbitMQ上的交换器之间定义复制关系。它最初由LShift设计，现在由RabbitMQ核心团队维护。Shovel插件可以在RabbitMQ启动时自动加载，并且你需要指定两台服务器的完整URL，包括用户名和密码。

例如，农夫Jacques运营着AvocadosSupremeLimited，该公司在加州南部有一个大型牛油果养殖场。多年来，公司在戈利塔市运营单一仓库，但最近该仓库负荷达到80%，有时库存不足导致订单延误。为了解决这个问题，Jacques在卡平特里亚开设了第二个仓库，专门用于承载额外库存并在戈利塔仓库不堪重负时处理订单。

整个AvocadosSupreme运作中最闪亮的一点是他们的订单处理系统，该系统使用RabbitMQ将网站和戈利塔仓库中的订单处理连接起来。现在，卡平特里亚仓库上线了，技术架构师Pierre面临如何连接新仓库以接收戈利塔无法满足的订单的问题。他发现使用Shovel可以在戈利塔创建一个新的队列，订阅到incoming_orders交换器上，然后让Shovel消费这些消息并通过WAN连接发布到卡平特里亚的RabbitMQ上的incoming_orders交换器。这样，网站无需放慢确认订单的速度，也不需要修改前端代码。

通过这种方式，Pierre成功解决了跨数据中心的消息复制问题，确保了系统的高可用性和低延迟。