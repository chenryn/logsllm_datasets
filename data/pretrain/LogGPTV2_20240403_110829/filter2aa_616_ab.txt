# WiFi Libraries and IoT Device Development

## Initial Challenges
- **WiFi Libraries:** Initially, there were no readily available libraries that met my specific requirements.
- **Spark IoT Device:** The Spark is an "Internet of Things" (IoT) device, and its WiFi service is designed to be used as a managed service, not for custom modifications.

## Adafruit CC3000 Breakout Board
- **Adafruit CC3000 Breakout Board:** This board provided the necessary WiFi functionality.
- **Libraries:** Adafruit's website offers downloadable libraries for this board.
- **Testing:** I had previously experimented with the board, and it worked well.

## Milestones Achieved
- **GPS Integration:** Successfully integrated GPS on the Spark.
- **SD Compilation:** Compiled SD card support on the Spark.
- **SSID Collection:** Implemented SSID collection on the Spark.
- **Next Steps:** Moving forward with working on tiny components.

## Soldering and Rules
- **Soldering:** Proceeded with soldering the components.
- **Rules:**
  - Rule 1
  - Rule 2
  - Rule 3

## Testing
- **Initial Testing:**
  - At home, everything worked perfectly.
  - Tested in the yard, and it performed well.
  - In the car, the device failed. The issue was investigated.

## Spark Concept
- **Spark Device:**
  - An IoT device designed to stay connected to the internet.
  - Encased in a "If status == WIFI_ON" clause, which requires a known wireless access point (WAP) to return true.

## Solution
- **SSID Scanning:** Discovered that I could scan SSIDs before associating with the access point.
- **Code Modification:** Removed the code from the "If status == WIFI_ON" clause, as it was unnecessary for my needs.

## Further Testing
- **Drive Test:**
  - Data was successfully collected during a drive.
  - GPS coordinates were off by about half a mile, indicating issues with the GPS libraries.

## TinyGPS++
- **TinyGPS++ Library:**
  - Preferred library for GPS functionality.
  - Did not work with the Spark initially.
  - **Porting Libraries:** Consulted with Bill on how to port the libraries.
  - **Rocket Science:** Replaced Arduino with Spark and fixed compatibility issues.

## Power Consumption
- **Power Management:**
  - Investigated power consumption.
  - Used Eflite 3.7v 500mAh batteries.
  - **Testing:**
    - Cycling components on and off did not work well.
    - Placed the main chip in deep sleep mode while keeping the GPS chip active.
    - Collections every 30 seconds lasted 4 hours.
    - Collections every 10 minutes lasted 8 hours.

## Collar Design
- **Collar Assembly:**
  - De-soldering was challenging.
  - Internet resources and YouTube tutorials were not very helpful.
- **NOVALabs Shout Out:**
  - Ted (Mad Scientist/Evil Genius) helped with learning EAGLE.
  - Brian (Soldering Tutor) provided guidance on the right iron and solder.
- **Cat Collar:**
  - Friend Joe suggested using ribbons sewn together.
  - Tested a no-tech collar on the cat to ensure comfort.

## Deployment and Results
- **New Plan:**
  - Integrated technology into the collar.
  - Placed the collar on the cat and let it roam.
  - Initial results showed no data, but after adjustments, the system worked.
- **Deployment Procedures:**
  - Let the collar sit outside for 5-10 minutes.
  - Brought the cat to the collar and put it on.
  - Allowed the cat to roam.
  - Collected successful data.

## Data Collection
- **Results:**
  - Collected data on date, time, latitude, longitude, SSID, signal strength, and encryption type.
  - Successful data collection on multiple dates and times.

## Conclusion
- **Success:** The project was a success, with the cat collar collecting and transmitting data effectively.

Â© 2013 tenacitysolutions.com  
1835 Alexander Bell Dr. Suite 100, Reston, VA 20191  
703-673-3100