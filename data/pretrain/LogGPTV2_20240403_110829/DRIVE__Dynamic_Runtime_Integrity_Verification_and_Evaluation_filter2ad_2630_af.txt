R_PPC_ADDR16_HI,
19c.f. http://lxr.free-electrons.com/source/arch/x86/kernel/
module.c#L173
20c.f.
kernel/module 32.c#L237
http://lxr.free-electrons.com/source/arch/powerpc/
740(1) Code/Library Segments
percent
System
hash/arch
none X86 64
sha1 X86 64
sha2 X86 64
none PPC32
sha1 PPC32
sha2 PPC32
time
0.0291s
0.3947s
0.6315s
1.0010s
7.6695s
7.7194s
percent
8.21%
54.44%
66.25%
64.77%
92.65%
92.51%
Table AT1: Metrics for Measurement Component
(2) TPM Extend Function
time
single
89.47% 10.96ms
43.98% 11.07ms
33.25% 10.93ms
29.71% 15.30ms
5.48% 15.26ms
5.59% 15.19ms
pagetime
1.71µs
17.30µs
27.77µs
14.90µs
109.75µs
109.19µs
0.3177s
0.3188s
0.3169s
0.4591s
0.4536s
0.4664s
size
97.06M B
96.41M B
97.06M B
279.33M B
277.88M B
281.42M B
(1 + 2) Cumulative
time
0.3468s
0.7135s
0.9484s
1.4601s
8.1232s
8.1854s
percent
overall
97.68% 0.3551s
98.42% 0.7249s
99.50% 0.9532s
94.48% 1.5454s
98.13% 8.2779s
98.10% 8.3442s
User Space Process Loader. After the OS kernel ﬁnishes
its loading process, the control of the OS is given to Userspace
executed processes. Every user-space process is organized in
the same way; it has the same view of the available sys-
tem resources, i.e. the VAS, as depicted in Figure AF1. The
layout and size of the VAS is identical for every process.
A typical size for the VAS is 4 GB with two segmenta-
tions: Userspace 3GB (0x00000000 - 0x7FFFFFFF) and Ker-
nelspace 1GB (0x80000000 - 0xFFFFFFFF).
The process-loader in Linux systems is implemented by
ld-linux.so (LD) [17]. Similar to the KML, LD loads the
executable object code into SM and executes the symbol res-
olution and relocation process [18], if necessary (cf. Section
4.2). Usually, object code depends on shared object code
provided by external libraries. Therefore, LD also loads all
referenced shared libraries into memory, before the symbol
resolution and relocation phase is performed. As expected,
the symbol resolution and relocation is also executed for ev-
ery shared library, as dependencies between diﬀerent shared
libraries occur very frequently. After the relocation phase of
LD completed successfully, the ﬁnal process image is in a
ready-to-run state. In a ﬁnal step, LD delegates the execu-
tion ﬂow to the relocated object code by calling its main()
function. From that point onward, the object code will be
available as a process in the system. The ﬁnal relocated
process image is also depicted in Figure AF1, including the
memory layout of a LD loaded library.
B.2 Memory Management: Access and Pro-
tection
MM is a core functionality, provided by the OS kernel.
As yet, we brieﬂy explained the organization of object code
in ELF sections and introduced the segmentation of object
code in the VAS. In the following, we will discuss MM in
more detail. Therefore, we will describe the paging mecha-
nism regarding segmentation in VAS, the memory protection
schemes used to protect the system memory in modern OS,
and the static and dynamic behavior of memory mapped
object code components.
B.2.1 Virtual Memory Management
As described, the object code is organized in diﬀerent sec-
tions within the ELF and during the loading process mul-
tiple related sections are joined to segments, representing
the organizational structure in the VAS. However, the in-
ternal structure inside the OS kernel, and, furthermore, at
the physical hardware layer, is organized in pages of a ﬁxed
size (usually 4096 Bytes). As a result, a VAS segment is an
ordered logical representation of the physical pages mapped
in memory. This additional abstraction layer between VAS
and physical memory enables diﬀerent process’ VAS to share
the same physical pages, eﬀectively reducing the amount of
required physical memory pages substantially.
In general, segments are shared between multiple processes
whenever possible. However, as soon as a process writes to a
shared segment, a copy-on-write mechanism in the page fault
handler is executed allocating a new physical memory page
for the process and copying the content of old page to the
newly allocated. After that, the write-operation is executed
and the newly allocated physical page is no longer shared.
Whether a VAS segment is expected to change or not, is
determined during the compilation and linking phase of the
ELF and depends on the individual section. In the following,
the access permissions are presented in more detail and how
the dynamic behavior of certain sections aﬀects DRIVE.
B.2.2 Access Permissions of Memory Mapped Seg-
ments
Access to memory mapped segments is deﬁned by access
permission ﬂags, controlled and enforced by the OS. Apart
from security related access control mechanisms, the access
permissions also determine whether a segment can be shared
or not. The understanding of the access permission of seg-
ments is crucial for the DRIVE concept.
Table 1 shows the access permissions of the .text, .data,
Heap and Stack VAS segments and lists their designated ELF
object code sections encapsulated inside the segment, along
with their individual access permissions, i.e. (r)ead, (w)rite
and e(x)ecute. In speciﬁc circumstances, mappings with rwx
permissions exist and are indeed necessary as, e.g., Virtual
Machine and interpreter based programming languages often
require access permissions considered as insecure.
DRIVE facilitates access permissions as an indicator for
potential threats and therefore measures them as meta-data.
The meta-data is analyzed during the veriﬁcation phase and
if unexpected changes to access permissions are detected the
system is considered as compromised and becomes untrusted.
C. CONSTRUCTION
OF MEASURE-
MENT, REPORTING AND VERIFI-
CATION ARTIFACTS
Following we describe the construction of the measured
and veriﬁed information, discussed in Section 4 in more detail.
Table AT2 depicts the used abbreviations in the constructed
data-structures.
A set (S) for a singular measured memory area, consists of
individual single measurements either based on the content
of the measured memory segment or section, or measured
meta-data. The major diﬀerence between predictable and
unpredictable S is that measured predictable segments or
section include mhd, representing a hash digest of the mea-
sured content.
741and used to create ESMAF, such that:
ESM AF0 = digest(EHM S0)
ESM AF1 = digest(ESM AF0|EHM S1)
ESM AFn = digest(ESM AFn−1|EHM Sn)
. . .
As discussed, the veriﬁcation process compares both values:
(1) the SMAF, reported and cryptographically signed by the
SM, and (2) the self calculated ESMAF. If both values are
equal SM AFsigned == ESM AF , it is evidently proven that
the DML was not altered and represents the measured run-
time system state as seen by the veriﬁcation process.
D. SYSTEM ANALYSIS FOR CODE VARI-
ANTS
We conducted a analysis of diﬀerent systems to determine
the distribution of PIC and RCC code in recent Linux Dis-
tributions for diﬀerent architectures. Table AT3 depicts the
whole analysis that was conducted, utilizing the RV genera-
tion tool.
Table AT3: System Analysis
System Executables
Fedora-21.i386
debian-wheezy amd64
debian-wheezy i386
vivid-server amd64
vivid-server arm64
vivid-server i386
System Libraries
Fedora-Cloud 21.i386
debian-wheezy amd64
debian-wheezyi386
vivid-server amd64
vivid-server arm64
vivid-server i386
all
687
650
676
808
777
807
all
921
701
705
892
883
891
RCClink
482 (70.2)
576 (88.6)
577 (85.4)
585 (72.4)
558 (71.8)
584 (72.4)
P IC
921 (100.0)
701 (100.0)
705 (100.0)
892 (100.0)
883 (100.0)
891 (100.0)
P IE
205 (29.8)
74 (11.4)
99 (14.6)
223 (27.6)
219 (28.2)
223 (27.6)
RCCload
0 (0.0)
0 (0.0)
0 (0.0)
0 (0.0)
0 (0.0)
0 (0.0)
As discussed in Section 5.1, executables show a distribution
between classic link time RCC (RCClink) and P IE code
variant. Depending on the analyzed distribution, this varies
between 11% to 30%. The trend, considering both Fedora
and Ubuntu distributions are more recent than Debian; thus,
we expect a shift toward PIE code in the future even more.
In general, traditional RCC does not provide a signiﬁcant
advantage regarding execution time; yet, it is faster because a
layer of indirection is not needed. Still, the security properties
that are provided through the possibility to utilize ASLR for
PIE, is s strong argument to shift into this direction.
Analyzed shared libraries are indeed all PIC, as discussed.
Apart from the possible utilization of ASLR, the physical
memory consumption is surely the most important argument
why libraries are compiled as PIC.
Table AT2: Abbreviations
Full Name
memory start address
memory size
memory access permissions
ﬁle or module name
memory hash digest
Abbreviation
msa
ms
map
mf
mhd
For this reason, MS for predictable segments and sections,
i.e. .text and .got, are constructed as follows:
Spredictable = {mf, msa, ms, map, mhd}
In contrast to that the MS for unpredictable segments and
sections do not include mhd:
Sunpredictable = {mf, msa, ms, map}
The described Measurement Sets (MS), comprise now multi-
ple sets and combine them to a single data-structure. A single
process consists of many diﬀerent measurements for all dif-
ferent memory mapped segments and section. For instance, a
/bin/bash process consists of over 50 memory mappings, in-
cluding all shared libraries, additional opened ﬁles and other
anonymous mappings. This would imply more than 50 oper-
ations for the anchoring of the measurements, which simply
would not scale for a measurement of multiple processes due
to the bare time consumption. Thus, a MS comprises all
individual memory measurements in a single data-structure,
that can be used to create a single to-be-anchored value.
M S = {S1, S2, . . . , Sn}
This to-be-anchored value is a hash of the MS (HM S), such
that:
HM S0 = digest(M S0)
HM S1 = digest(M S1)
. . .
HM Sn = digest(M Sn)
HM Sn now comprises the integrity of each individual M S0...n
and is extended into the SM in the same order. The extend-
function for the SM anchored ﬁngerprint (SM AF ) is deﬁned
as follows, whereas | denotes concatenation:
SM AF0 = digest(HM S0)
SM AF1 = digest(SM AF0|HM S1)
SM AFn = digest(SM AFn−1|HM Sn)
. . .
As described, SMAF is part of the SSR and used during veriﬁ-
cation to enable and integrity veriﬁcation of the transmitted
DML, whis is deﬁned as:
DM L = {M S0, . . . , M Sn}
Consequently, the veriﬁcation constructs an Expected SMAF
(ESMAF), based on the information present in the DML. The
only diﬀerence is that the MS come from the transmitted
DML. Accordingly the expected HMS are created:
EHM S0 = digest(M SDM L0 )
EHM S1 = digest(M SDM L1 )
. . .
EHM Sn = digest(M SDM Ln )
742