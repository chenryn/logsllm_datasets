title:A Method to Estimate the Timestamp Accuracy of Measurement Hardware
and Software Tools
author:Patrik Arlos and
Markus Fiedler
A Method to Estimate the Timestamp Accuracy
of Measurement Hardware and Software Tools
Patrik Arlos and Markus Fiedler
Blekinge Institute of Technology, School of Engineering,
Dept. of Telecommunication Systems, Karlskrona, Sweden
{patrik.arlos,markus.fiedler}@bth.se
Abstract. Due to the complex diversity of contemporary Internet
applications, computer network measurements have gained considerable
interest during the recent years. Since they supply network research,
development and operations with data important for network traﬃc
modelling, performance and trend analysis etc., the quality of these mea-
surements aﬀect the results of these activities and thus the perception of
the network and its services. One major source of error is the timestamp
accuracy obtained from measurement hardware and software. On this
background, we present a method that can estimate the timestamp ac-
curacy obtained from measurement hardware and software. The method
is used to evaluate the timestamp accuracy of some commonly used mea-
surement hardware and software. Results are presented for the Agilent
J6800/J6830A measurement system, the Endace DAG 3.5E card, the
Packet Capture Library (PCAP) either with PF RING or Memory Map-
ping, and a RAW socket using either the kernel PDU timestamp (ioctl)
or the CPU counter (TSC) to obtain timestamps.
1 Introduction
In recent years computer network measurements have gained much interest,
one reason is the growth, complexity and diversity of network based services.
Computer network measurements provide network operations, development and
research with information regarding network behaviour. The accuracy and relia-
bility of this information directly aﬀects the quality of these activities, and thus
the perception of the network and its services. References [1,2] provide some
examples on the eﬀect that accuracy has on bandwidth estimations.
One major source of error is the timestamp accuracy obtained from measure-
ment hardware and software. Therefore, in this paper we present a method that
estimates the timestamp accuracy obtained from measurement hardware and
software. The method has been used to evaluate the timestamp accuracy of some
commonly used hardware, Agilent J6800/J6830A and Endace DAG 3.5E [3,4],
and software, Packet Capture Library [5] and derivatives (PF RING [6] and
Memory Mapping [7]) as well as a raw socket using either ioctl or TSC [8] to
obtain PDU timestamps. The software was evaluated using diﬀerent hardware
platforms, operating systems as well as clock synchronisation methods. We have
S. Uhlig, K. Papagiannaki, and O. Bonaventure (Eds.): PAM 2007, LNCS 4427, pp. 197–206, 2007.
c(cid:2) Springer-Verlag Berlin Heidelberg 2007
198
P. Arlos and M. Fiedler
intentionally used oﬀ-the-shelf components, as there are many measurements
performed using such equipment and software. Furthermore, in [9] we evaluated
the accuracy of DAG [3], Tcpdump [5] and Windump [10] when the tools stored
the trace to disc, we found that Tcpdump reported PDUs with wrong times-
tamp, and that Windump lost PDUs without reporting the loss to the user,
the PDU inter-arrival times of both Tcpdump and Windump showed large tails,
which merrited further investigation. All in all, it was obvious that the accu-
racy of the tools was clearly aﬀected by the way the data was processed. Hence,
in this paper we’ve focused on the measurement system, not the system that
stores the data to disc, we do this by using a Distributed Passive Measurement
Infrastructure [11] which separates the measurement task from the analysis and
visualization tasks.
The outline for this paper is as follows. In Section 2 we will discuss timestamp
accuracy, this is followed by Section 3 where we describe the method. Section
4 describes the measurement setup and in Section 5 we evaluate the timestamp
accuracy for a few common measurement tools. Section 6 concludes the paper.
2 Timestamp Accuracy
We use the deﬁnition of accuracy found in [12], where accuracy is the comparison
of a measured value and the correct value. The closer the measured value is to the
correct the more accurate the measurement value is said to be. Each timestamp
associated with a PDU has an accuracy denoted by TΔ. A timestamp can either
be associated with the arrival of the ﬁrst bits or the last bits of the PDU, the
method only requires that this assoiciation does not change, i.e. the timestamp
cannot change association from the ﬁrst to the last bit of the PDU during an
evalution session. The timestamp accuracy is inﬂuenced by many sources, but
primarily how often and how accurate a counter is updated as well as how fast it
is possible to access this counter. In addition to these, the time- and frequency
synchronization of the clock used for timestamping has a signiﬁcant impact.
Consider Fig. 1 where a PDU arrives at TA, but due to the limited accuracy
of the timestamp it is not possible to specify exactly when the packet actually
arrived. The arrival can only be speciﬁed within an interval of with TΔ, if the
PDU arrived at TA, then the value reported will be tn+2. Please note that TΔ
contains all the error sources that can aﬀect the timestamp, and at this stage
there is no interest in diﬀerentiating them.
Now, depending on the measurement entity, the timestamp accuracy can vary
signiﬁcantly. For instance, in a time-shared environment (i. e., multi-tasking
operating systems), the accuracy is not only aﬀected by how often the counter is
updated, but also of how the measurement entity can access this counter. Since
the access usually involves a system call, there is an additional delay before the
entity can register the arrival time. This delay is linked to the fact that there are
multiple entities competing for the same resources (CPU, memory, etc.). From
the accuracy point this reduces the accuracy of the measurement entity, see
Fig. 2. When the GetTimestamp() call is made, there is a delay, trequest, before
A Method to Estimate the Timestamp Accuracy
199
TA
TΔ
PDU
GetTimestamp()
GetTimestamp()=2
t
tn
tn+1
tn+2
tn+3
tn+4
tn+5
tn+6
Counter
Value
0
1
2
3
4
5
6
7
trequest
treply
Fig. 1. Timestamp inaccuracy
Fig. 2. Obtaining a timestamp
the call reaches the counter. Once the execution reached the counter there is an
another delay, treply, before the value, 2, is returned to the caller. Now if trequest
and treply would be ﬁxed in length, it would be possible to adjust for these delays,
but in a multi-tasking environment they are usually not known. Thus, instead
of the correct timestamp value 0, the value 2 would be reported.
3 Method
The principle in this method is to generate a traﬃc stream with a known and
stable behaviour. As long as the stream is stable it can be generated at any
layer. However the simplest and cheapest way is to use the link layer to generate
identically sized PDUs that are sent back-to-back at the physical layer. The
traﬃc stream is then monitored by the measurement system and inter-arrival
times are calculated. By generating back-to-back PDUs at the physical layer,
the impact of hardware and software in the generating system will be minimised.
On the other hand, it relies on the correct implementation of the physical layer
protocol in the hardware.
ˆTI,i
TI
t2
1
t0
1
t1
T1
2
2
t3
t4
T2
Fig. 3. PDU arrival
Let ˆti be the reported arrival time of PDU i, Ti represent the true time and
i = Ti − ˆti, i.e., the error for PDU i. This will assume values between 0 and TΔ.
In Fig. 3, PDU 1 arrives at T1 and PDU 2 at T2, PDU 1 gets the timestamp
ˆt1 = t0 and PDU 2 the timestamp ˆt2 = t3. Based on this, we calculate an
estimate of the inter-arrival time ˆTI,i of PDU i and i + 1:
200
P. Arlos and M. Fiedler
ˆTI,i = ˆti+1 − ˆti = t3− t0 = (Ti+1 − i+1)− (Ti − i) = (Ti+1− Ti)− i+1 + i . (1)
For the example this will be TI,1 = (T2−T1)−2+1. The theoretical inter-arrival
time, TI, is calculated from the PDU length L at the physical layer (including
inter-frame gap) and the link capacity C as TI = L/C. If we subtract this from
the measured inter-arrival time an estimate of the error is obtained:
εi = ˆTI,i − TI = (T2 − T1) − TI + 1 − 2 = 1 − 2 .
(2)
This error will assume value between −TΔ and TΔ, and it describes the combined
error of two timestamps.
Let the theoretical inter-arrival time be written as:
TI = nTΔ + αTΔ n = 0, 1, 2, . . . α ∈ [0, 1[ .
(3)
Here two cases can be found, in the ﬁrst case α = 0 and in the second 0 < α < 1.
In the ﬁrst case, the theoretical and estimated inter-arrival times will almost
always be identical, and the calculated error will become:
εi = ˆTI,i − TI = nTΔ − nTΔ = 0 .
(4)
However, due to numerical inaccuracies some samples will become either −TΔ
or +TΔ. For this to happen, the inter-arrival times must be a multiple of TΔ.
In case two, this is excluded by deﬁnition. Here the estimated inter-arrival ˆTI,i
becomes:
nTΔ
nTΔ + TΔ Counter incremented
Counter not incremented (Case 2a)
(Case 2b)
(5)
(cid:2)
ˆTI,i =
(cid:2)
and εi becomes:
εi =
nTΔ − (nTΔ + αTΔ) = −αTΔ
(Case 2a)
nTΔ + TΔ − (nTΔ + αTΔ) = (1 − α)TΔ (Case 2b)
(6)
eﬀectively causing εi to alternate between −αTΔ and −αTΔ+TΔ. This behaviour
is easy to detect if a histogram of ε is plotted. The histograms can be classiﬁed
as type 1 (Case 1) or type 2 (Case 2). A type 1 histogram has either one, at 0,
or three peaks, at −TΔ, 0 and +TΔ. Fig. 4 shows a type 1 histogram, and a type
2 histogram is shown in Fig. 5. It will consist of only two peak values at −αTΔ
and −αTΔ +TΔ. Due to numerical reasons, a peak can cover two histogram bins.
By analysing ε an estimate of TΔ can be obtained from the extreme values:
(cid:3) | max(ε)|+| min(ε)|
| max(ε)| + | min(ε)|
2
TΔ =
(Case 1)
(Case 2)
(7)
One way to determine if a system shows a case 1 or 2 behaviour is to study
ε in detail and to build a histogram. This results however in a more complex
A Method to Estimate the Timestamp Accuracy
201
1
0.8
0.6
0.4
0.2
y
c
n
e
u
q
e
r
F
e
v
i
t
l
a
e
R
1
0.8
0.6
0.4
0.2
y
c
n
e
u
q
e
r
F
e
v
i
t
l
a
e
R
0
-1
-0.5
0
ε [s]
0.5
1
0
-1
-0.5
0
ε [s]
0.5
1
Fig. 4. Type 1 histogram of ε
Fig. 5. Type 2 histogram of ε
implementation of the method. On the other hand, if the method always assumes
that the histograms are of type 2, then the estimation simply becomes:
TΔ = | max(ε)| + | min(ε)| .
(8)
Using this approach, there is a chance that the accuracy might be underestimated
by a factor of two. However, this is preferred compared to overestimating the
accuracy.
There are also two practical problems associated with this method. If the
traﬃc generator and the measurement system clocks are or become synchronised
in such a way that i will always be the same, this will result in a zero error, i.e.
εi = 0. This has however never been detected in measurements as the crystal
inaccuracies obviously work in our favour. Another problem is related to the
quality of the traﬃc generator. At low speeds, smaller than 100 Mbps, it should
not be any problem to generate PDUs back-to-back in a standard PC with a
CPU of 2.0 GHz or more and Linux. However, at higher speeds this could be a
critical issue. In this case, an alternative is to use a reference system, that has
a known and high timestamp accuracy, to obtain an inter-arrival trace and use
this instead of the theoretical inter-arrival time TI, i.e., replace TI in Equation 4
with the inter-arrival times calculated by the reference system.
Source
DAG
MP
Wiretap
SUT
Sink
Fig. 6. Measurement setup
4 Setup
Using the method described in the previous section, we evaluated two hardware
based measurement systems, the DAG 3.5E card and the Agilent J6800/6830A.
Moreover, we evaluated the Packet Capture Library (PCAP) for three diﬀerent
202
P. Arlos and M. Fiedler
operating systems (Linux 2.4, Linux 2.6 and FreeBSD 5.3) using diﬀerent sets of
hardware. We also evaluated a raw socket system. A raw socket allows an applica-
tion to connect directly to a NIC. This allows the application to receive link layer
frames from the NIC. Two versions of the raw socket interface were evaluated. The
ﬁrst one uses ioctl(fd,SIOCGSTAMP,&tv), to read the kernel-associated times-
tamp with the PDU. This is the same method used by PCAP to obtain the PDU
timestamp. The other one uses an assembler call to read the processor counter,
known as the TSC method [8]. The diﬀerence consists in that ioctl should report
the time when the kernel sees the PDU, while the TSC reports when the PDU is
seen by the application, in this case the capture interface. The TSC method was
evaluated on a P4-2.0 GHz system with Linux 2.4 and also on a P4-2.8 GHz system
with Linux 2.6. To obtain the actual CPU speed an Acutime 2000 (Port B) was
connected to the serial port of the PCs, and the number of CPU cycles that passed
between the GPS pulses were counted, the result of which was then used to esti-
mate the inter-arrival time. During these tests the CPU speed was estimated to
1 992 643 954 Hz (std.dev 700 Hz) for the Linux 2.4 PC (P4”) and 2 800 232 626 Hz
(std.dev 2 500 000 Hz) for the Linux 2.6 PC (P4’).
All systems were evaluated on an 10 Mbps Ethernet and full size PDUs were
used, resulting in a theoretical inter-arrival time of 1230400 ns (approximately
812 frames/s). All test were executed using the distributed passive measurement
infrastructure presented in [11]. This consists out of measurement points (MP)
that perform the packet capturing and consumers that analyse the measurement
trace obtained from the MPs. The MPs use capture interfaces to attach to the
monitored network. These can be DAG cards or software. The setup is shown