○
We will illustrate the core idea here
#BHUSA   @BlackHatEvents 
Vulnerability Scenario
●
recvmsg with MSG_PEEK flag doesn’t synchronize with gc
○
Complex inconsistent GC state
○
Very subtle race condition -> Thread 1 receives a UAF skb
#BHUSA   @BlackHatEvents 
●
Patch
○
MSG_PEEK task now waits for the completion of the GC
●
The kernel bug was found in 2016, but the patch was not accepted
Patch
#BHUSA   @BlackHatEvents 
●
Thread interleaving: A lot of threads!
●
Prolong the GC process: generate as much garbage as possible
Exploit A
#BHUSA   @BlackHatEvents 
●
Spray UAF sk_buff(aka skb) is not easy
○
sk_buff object is allocated from a unique cache skbuff_head_cache
○
“Cross cache” impact: Freeing the object's page to the page allocator
Exploit A
#BHUSA   @BlackHatEvents 
●
Spray skb and control the value of the 
skb->data
○
recvmsg -> 
skb_copy_datagram_iter to copy 
skb->data into userspace
Exploit A - Semi Arbitrary Read
●
Semi arbitrary kernel read primitive
○
arb_read(0xFFFFFF8009364200LL, 
leak_page_data, …)
○
page_md5 = md5(leak_page_data)
●
Learn kernel base by comparing md5 
value with a md5 hash table contains 512 
values
#BHUSA   @BlackHatEvents 
●
Why read fixed kernel address 0xFFFFFF8009364200LL?
○
OEM X invented its own ARM64 kernel base randomization before the 
mainstream kernel
○
Based on the exploit, it only randomizes 9 bits at 4K alignment
■
An attacker is still able to access a valid kernel address locally
Exploit A - Semi Arbitrary Read
●
Semi Arbitrary Read
○
Iterate init_task and find the exact task_struct in terms of its child 
processes
■
Obtain the address of thread_info->addr_limit
#BHUSA   @BlackHatEvents 
●
“Kernel stack overflow primitive” - Weird 
primitive, but it’s the foundation of the semi 
arbitrary write primitive
Exploit A - Kernel Stack Overflow Primitive
●
If userspace initializes unix_address->name
○
Kernel: memcpy(msg->msg_name, 
addr->name, addr->len)
■
addr is from skb->sk->addr
●
Manipulate skb->sk to a controlled space (we 
will talk it later)
●
Stack overflow on msg->msg_name
○
Tamper msghdr msg_sys from 
__sys_recvmsg
#BHUSA   @BlackHatEvents 
#BHUSA   @BlackHatEvents 
●
To control skb->sk to a crafted memory space
○
mmap(..., 
MAP_ANONYMOUS|MAP_SHARED,...)
Exploit A - Bypass Privilege Access Never
●
Read memory will trigger the page fault in 
the first time
●
Read kernel stack by semi arbitrary read 
primitive
○
find struct page *pte
○
page_to_virt
#BHUSA   @BlackHatEvents 
●
Trigger stack overflow by mmap memory
Exploit A - Bypass Privilege Access Never
Dump kernel stack by semi-arb read
#BHUSA   @BlackHatEvents 
#BHUSA   @BlackHatEvents 
●
Crafted msghdr msg_sys 
with fake pipe structures
●
recvmsg syscall may use the 
fake pipe structures to 
perform arbitrary write 
(skb_copy_datagram_msg)
Exploit A - Semi Write Primitive
●
skb->data (-2) overwrites 
addr_limit => Arbitrary 
read / write primitive
#BHUSA   @BlackHatEvents 
Exploit B - Leak Slab Pages
●
Heap spray: occupy UAF skb->data to scm_fp_list
○
Transmit 2 pipe file descriptors + Spam ~80 file descriptors for opening /dev/null
○
Several file structures may occupy an entire slab page
Kernel file pointer leak
#BHUSA   @BlackHatEvents 
●
Close file descriptors + Heap spray by sending socket datagram
○
We control the slab page
●
When a victim task receives UAF skb: it may invoke skb_unlink(skb, 
&sk->sk_receive_queue):
Exploit B - Bypass KASLR by "Pipe Primitive"
●
Craft two fake pipe_buffer and pipe_inode_info structures
#BHUSA   @BlackHatEvents 
#BHUSA   @BlackHatEvents 
●
Reading the socket used to occupy the slab page
○
leak slab page
Exploit B - Bypass KASLR by "Pipe Primitive"
●
Initialize pipe_buffer->ops
○
Write one byte to the pipe, the kernel will 
initialize the ops for us
●
“Pipe” migration for bypassing PAN by 
pipe_inode_info->tmp_page
#BHUSA   @BlackHatEvents 
Exploit B - Arbitrary R/W by “Pipe primitive”
●
Manipulate pipe_buffer->page and pipe_buffer->offset
○
R/W anything including the controlled slab page itself
●
For more information, please stay tuned on the P0 guest blog :)
●
Arb R/W => Code execution / Recover /proc/kallsyms …
○
+1 method to bypass CONFIG_ARM64_UAO
■
“Pipe primitive” (in the wild at least since 2020)
#BHUSA   @BlackHatEvents 
Post Exploitation
●
Set SELinux permissive
●
Overwrite creds to UID 0
#BHUSA   @BlackHatEvents 
Post Exploitation
●
Set SELinux permissive
●
Overwrite creds to UID 0
●
Hypervisor protection
○
selinux_enforcing is read-only
○
Cred structure is monitored
○
No calling:
■
rkp_override_creds
■
poweroff_cmd
#BHUSA   @BlackHatEvents 
Post Exploitation
#BHUSA   @BlackHatEvents 
Post Exploitation
#BHUSA   @BlackHatEvents 
Post Exploitation
#BHUSA   @BlackHatEvents 
Post Exploitation
●
Upload messages, accounts
●
Disable system security
●
Uninstall 3rd party AV
/data/data/com.whatsapp/databases/msgstore.db
/data/data/com.whatsapp/databases/msgstore.db-wal
/data/data/jp.naver.line.android/databases/naver_line
/data/data/org.telegram.messenger/files/cache4.db
/data/data/org.telegram.messenger/files/cache4.db-wal
/data/data/org.telegram.messenger/files/tgnet.dat
/data/misc/wifi/WifiConfigSotreData.xml
/data/system/users/0/accounts.db
/data/system_ce/0/accounts_ce.db
/data/system_de/0/accounts_de.db
#BHUSA   @BlackHatEvents 
Post Exploitation
●
Upload messages, accounts
●
Disable system security
●
Uninstall 3rd party AV
pm disable com.policydm                (Security policy updates)
settings put secure package_verifier_user_consent -1
settings put global package_verifier_user_consent -1
settings put secure install_non_market_apps 1
settings put system send_security_reports 0
settings put global package_verifier_enable 0
settings put global upload_apk_enable 0
settings put global send_action_app_error 0
setprop persist.app.permission.monitor 0
#BHUSA   @BlackHatEvents 
Post Exploitation
●
Upload messages, accounts
●
Disable system security
●
Uninstall 3rd party AV
com.avast.android.mobilesecurity
com.antiy.avl
com.antiy.avlpro
com.sophos.smsec
com.antivirus
#BHUSA   @BlackHatEvents 
CVE-2019-2215 and Google Play
#BHUSA   @BlackHatEvents 
CVE-2019-2215 and Google Play
#BHUSA   @BlackHatEvents 
Payload Similarities
●
Self-loading ELFs
RAM:0000000000000000 01 00 00 10           ADR        X1, loc_0
RAM:0000000000000004 62 00 00 58           LDR        X2, =loc_7ED8
RAM:0000000000000008 42 00 01 8B           ADD        X2, X2, X1
RAM:000000000000000C 40 00 1F D6           BR         X2
-------------------------------------------------------------------
RAM:0000000000000010 D8 7E 00 00+off_10    DCQ        loc_7ED8
●
Injecting into privileged processes
#BHUSA   @BlackHatEvents 
Payload Similarities
●
Using Google Cloud as C2
●
Disable security settings
●
Files to copy
●
Apps to uninstall
●
Spelling mistakes
○
/data/misc/wifi/WifiConfigSotreData.xml
#BHUSA   @BlackHatEvents 
Defending Android
#BHUSA   @BlackHatEvents 
Defending Android
#BHUSA   @BlackHatEvents 
Defending Android
#BHUSA   @BlackHatEvents 
Defending Android
#BHUSA   @BlackHatEvents 
Final Thoughts
●
CVE-2021-0920
○
Complexity
○
Time
○
Resources
●
Time
○
To detect
○
To patch
○
To update
#BHUSA   @BlackHatEvents 
The End
Thanks for watching! Questions?
Xingyu - @1ce0ear
Richard - @ExploitDr0id 
Christian - @0xbadcafe1