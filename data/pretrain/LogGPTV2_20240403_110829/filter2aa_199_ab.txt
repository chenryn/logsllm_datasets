# Black Hat USA Presentation: Vulnerability and Exploitation Techniques

## Overview
We will illustrate the core idea of a vulnerability scenario and its exploitation, followed by the defensive measures that can be taken to protect against such attacks.

## Vulnerability Scenario
- **recvmsg with MSG_PEEK flag**: This does not synchronize with garbage collection (GC), leading to a complex and inconsistent GC state.
- **Subtle Race Condition**: A race condition allows Thread 1 to receive a Use-After-Free (UAF) `skb` (socket buffer).

### Patch
- **Fix**: The `MSG_PEEK` task now waits for the completion of the GC process.
- **History**: The kernel bug was discovered in 2016, but the patch was not accepted until later.

### Exploit A
- **Thread Interleaving**: Involves a large number of threads.
- **Prolonging the GC Process**: Generate as much garbage as possible to exploit the race condition.

#### Spray UAF sk_buff (skb)
- **Challenges**:
  - `sk_buff` objects are allocated from a unique cache (`skbuff_head_cache`).
  - Freeing the object's page to the page allocator can have a "cross-cache" impact.
- **Exploitation**:
  - Spray `skb` and control the value of `skb->data`.
  - Use `recvmsg` to copy `skb->data` into userspace via `skb_copy_datagram_iter`.

#### Semi-Arbitrary Kernel Read
- **Primitive**: Allows semi-arbitrary kernel reads.
- **Example**:
  - `arb_read(0xFFFFFF8009364200LL, leak_page_data, ...)`
  - Calculate `page_md5 = md5(leak_page_data)`
- **Kernel Base Learning**: Compare the MD5 value with a hash table containing 512 values to determine the kernel base.

#### Fixed Kernel Address
- **Reason**: OEM X implemented its own ARM64 kernel base randomization before mainstream adoption.
- **Limitation**: Only 9 bits are randomized at 4K alignment, allowing an attacker to access a valid kernel address locally.

#### Iterating init_task
- **Objective**: Find the exact `task_struct` in terms of its child processes.
- **Outcome**: Obtain the address of `thread_info->addr_limit`.

#### Kernel Stack Overflow Primitive
- **Foundation**: A weird but essential primitive for semi-arbitrary write.
- **Steps**:
  - Userspace initializes `unix_address->name`.
  - Kernel: `memcpy(msg->msg_name, addr->name, addr->len)` where `addr` is from `skb->sk->addr`.
  - Manipulate `skb->sk` to a controlled space.
  - Trigger stack overflow on `msg->msg_name` to tamper `msghdr msg_sys` from `__sys_recvmsg`.

#### Controlling skb->sk
- **Method**: Use `mmap(..., MAP_ANONYMOUS|MAP_SHARED,...)` to control `skb->sk` to a crafted memory space.

#### Bypassing Privilege Access Never
- **Trigger**: Reading memory triggers a page fault initially.
- **Read Kernel Stack**: Use the semi-arbitrary read primitive to find `struct page *pte` and convert it to a virtual address using `page_to_virt`.
- **Trigger Stack Overflow**: Use `mmap` memory to trigger the stack overflow.

#### Crafted msghdr msg_sys
- **Objective**: Create fake pipe structures.
- **Exploitation**: `recvmsg` syscall may use the fake pipe structures to perform arbitrary writes via `skb_copy_datagram_msg`.
- **Outcome**: Overwrite `addr_limit` to achieve arbitrary read/write primitives.

## Exploit B - Leak Slab Pages
- **Heap Spray**: Occupy UAF `skb->data` to `scm_fp_list`.
- **File Descriptors**: Transmit 2 pipe file descriptors and spam ~80 file descriptors for opening `/dev/null`.
- **Slab Page Occupation**: Several file structures may occupy an entire slab page.

#### Bypass KASLR by "Pipe Primitive"
- **Close File Descriptors**: Followed by heap spray using socket datagrams.
- **Victim Task**: When receiving UAF `skb`, it may invoke `skb_unlink(skb, &sk->sk_receive_queue)`.
- **Fake Structures**: Craft two fake `pipe_buffer` and `pipe_inode_info` structures.
- **Leak Slab Page**: Read the socket used to occupy the slab page.
- **Initialize pipe_buffer->ops**: Write one byte to the pipe to initialize the ops.
- **Bypass PAN**: Use `pipe_inode_info->tmp_page` for "pipe" migration.

#### Arbitrary R/W by "Pipe Primitive"
- **Manipulate pipe_buffer->page and pipe_buffer->offset**: To read/write anything, including the controlled slab page itself.
- **Further Information**: Stay tuned on the P0 guest blog for more details.
- **Arbitrary R/W**: Leads to code execution, recovery of `/proc/kallsyms`, and bypassing `CONFIG_ARM64_UAO`.

## Post-Exploitation
- **Set SELinux Permissive**
- **Overwrite Creds to UID 0**
- **Hypervisor Protection**:
  - `selinux_enforcing` is read-only.
  - `Cred` structure is monitored.
  - No calling `rkp_override_creds` or `poweroff_cmd`.

### Actions
- **Upload Messages and Accounts**:
  - `/data/data/com.whatsapp/databases/msgstore.db`
  - `/data/data/com.whatsapp/databases/msgstore.db-wal`
  - `/data/data/jp.naver.line.android/databases/naver_line`
  - `/data/data/org.telegram.messenger/files/cache4.db`
  - `/data/data/org.telegram.messenger/files/cache4.db-wal`
  - `/data/data/org.telegram.messenger/files/tgnet.dat`
  - `/data/misc/wifi/WifiConfigStoreData.xml`
  - `/data/system/users/0/accounts.db`
  - `/data/system_ce/0/accounts_ce.db`
  - `/data/system_de/0/accounts_de.db`

- **Disable System Security**:
  - `pm disable com.policydm` (Security policy updates)
  - `settings put secure package_verifier_user_consent -1`
  - `settings put global package_verifier_user_consent -1`
  - `settings put secure install_non_market_apps 1`
  - `settings put system send_security_reports 0`
  - `settings put global package_verifier_enable 0`
  - `settings put global upload_apk_enable 0`
  - `settings put global send_action_app_error 0`
  - `setprop persist.app.permission.monitor 0`

- **Uninstall 3rd Party AV**:
  - `com.avast.android.mobilesecurity`
  - `com.antiy.avl`
  - `com.antiy.avlpro`
  - `com.sophos.smsec`
  - `com.antivirus`

## CVE-2019-2215 and Google Play
- **Payload Similarities**:
  - Self-loading ELFs.
  - Injecting into privileged processes.
  - Using Google Cloud as Command and Control (C2).
  - Disabling security settings.
  - Files to copy.
  - Apps to uninstall.
  - Spelling mistakes (e.g., `/data/misc/wifi/WifiConfigSotreData.xml`).

## Defending Android
- **Complexity, Time, and Resources**:
  - Complexity of detection.
  - Time to patch.
  - Time to update.

## Final Thoughts
- **CVE-2021-0920**:
  - Complexity.
  - Time to detect.
  - Time to patch.
  - Time to update.

Thank you for watching! Questions?

- **Xingyu**: @1ce0ear
- **Richard**: @ExploitDr0id
- **Christian**: @0xbadcafe1