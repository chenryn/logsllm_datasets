p
i ∈ [0, X]m}i∈HS,b∈{0,1}
using the facts that A⊤a⊥ = 0 and u⊤a⊥ = 1. That is, OEnc(i, x0
all i ∈ HS. Moreover, for all i ∈ CS ∩ I, by deﬁnition of the security game, we have x0
Thus, OEnc(i, x0
i ) is independent of β, for
i = x1
i .
i , x1
i ) is independent of β, for all i ∈ [n].
i , x1
Note that, for all i ∈ HS, OKeygen(msk, y1k···kyn) computes
di := (Wi − xβ
i (a⊥)⊤ )⊤yi + V⊤
i r − a⊥(cid:18)ezi + hxβ
i , yii(cid:19) = W⊤
i yi + V⊤
i r − a⊥ezi,
100
Chapter 4. Multi-Input Inner-Product Functional Encryption from Pairings
which does not depend on β.
Finally, OKeygen also computes:
z := Xi∈CShzi, ri + Xi∈HSezi − Pi∈HShxβ
Finally, by deﬁnition of the security game, we have: Pi∈HShx0
i = 0 for all i ∈ CS in Condition 1 from Deﬁnition 23. Thus, G⋆
x0
i = x1
β.
i , yii .
i , yii =Pi∈HShx1
i , yii, by taking
3,β is independent of
Remark 12: On adaptive security
To achieve adaptive security, we split the selective, computational argument used for
the proof of Theorem 9, in two steps: ﬁrst, we use an adaptive, computational argument,
that does not involve the challenges {xb
i}i∈[n],b{0,1} (this corresponds to the transition from
game G0,β to G3,β). Then, we prove security of game G3,β, using a selective argument,
which involves the challenges {xb
i}i∈[n],b{0,1}, but relies on perfect indistinguishability.
That is, we prove that G3,β is perfectly secure, by ﬁrst proving the perfect security of its
selective variant, G⋆
3,β, and using a guessing argument to obtain security of the adaptive
game G3,β. Guessing incurs an exponential security loss, which we can aﬀord, since it is
multiplied by a zero term. The proof of Theorem 9 essentially does the two steps at once,
which prevents using the same guessing argument (since in that case, the exponential
term would be multiplied by the computational advantage).
Chapter 5
Multi-Input Inner-Product
Functional Encryption without
Pairings
Overview of our construction.
In this chapter we give a (private-key) MIFE scheme for inner products based on a variety of
assumptions, notably without the need of bilinear maps, and where decryption works eﬃciently,
even for messages of super-polynomial size. We achieve this result by proposing a generic
construction of MIFE from any single-input FE (for inner products) in which the encryption
algorithm is linearly-homomorphic. Our transformation is surprisingly simple, general and
eﬃcient. In particular, it does not require pairings (as in the case of the multi-input inner-
product FE from [AGRW17], presented in Chapter 4), and it can be instantiated with all
known single-input functional encryption schemes (e.g., [ABDP15, ABDP16, ALS16]). This
allows us to obtain new MIFE for inner products from plain DDH, composite residuosity,
and LWE. Beyond the obvious advantage of enlarging the set of assumptions on which MIFE
can be based, this result yields schemes that can be used with a much larger message space.
Indeed, dropping the bilinear groups requirement allows us to employ schemes where the
decryption time is polynomial, rather than exponential, in the message bit size. From a more
theoretical perspective, our results also show that, contrary to what was previously conjectured
[AGRW17], MIFE for inner product does not need any (qualitatively) stronger assumption than
their single-input counterpart.
This result has been published in [ACF+18]. The novelty in this thesis is that security is
guaranteed even when some encryption keys are corrupted. Namely, each user i ∈ [n] receives
a (private) encryption key eki. Even a collusion of eki for some malicious users i cannot break
security for the encryption of other slots. This property is obtained without modifying the
scheme from [ACF+18], but requires a novel security proof. It is desirable for practical use
case of MIFE to assume no particular trust between diﬀerent users, since the setting already
assumes these users do not cooperate or communicate while performing encryption (this would
corresponds to the single-input setting).
Informally, the scheme from the previous chapter builds
Our solution, in more detail.
upon a two-step decryption blueprint. The ciphertexts ct1 = Enc(x1), . . . , ctn = Enc(xn)
(corresponding to slots 1, . . . , n) are all created using diﬀerent instances of a single-input FE.
Decryption is performed in two stages. One ﬁrst decrypts each single cti separately using the
secret key dkyi of the underlying single-input FE, and then the outputs of these decryptions
are added up to get the ﬁnal result.
The main technical challenge of this approach is that the stage one of the above decryption
101
102
Chapter 5. Multi-Input Inner-Product Functional Encryption without Pairings
algorithm leaks information on each partial inner product hxi, yii. To avoid this leakage, their
idea is to let source i encrypt its plaintext vector xi augmented with some ﬁxed (random) value
ui, which is part of the secret key. Moreover, dkyi are built by running the single-input FE key
generation algorithm on input yi||r, i.e., the vector yi augmented with fresh randomness r.
By these modiﬁcations, and skipping many technical details, stage-one decryption then
consists of using pairings to compute, in GT , the values [hxi, yii + uir]T for every slot i. From
these quantities, the result [hx, yi]T is obtained as
[hxi, yii + uir]T − [
uir]T
nXi=1
i=1 uir]T is included in the secret key.
nYi=1
which can be easily computed if [Pn
Intuitively, the scheme is secure as the quantities [uir]T are all pseudo-random (under the
DDH assumption) and thus hide all the partial information [hxi, yii + uir]T may leak. Notice
that, in order for this argument to go through, it is crucial that the quantities [hxi, yii + uir]T
are all encoded in the exponent, and thus decoding is possible only for small norm exponents.
Furthermore, this technique seems to inherently require pairings, as both ui and r have to
remain hidden while allowing to compute an encoding of their product at decryption time.
This is why the possibility of a scheme without pairings was considered as “quite surprising”
in [AGRW17].
We overcome these diﬃculties via a new FE to MIFE transform, which manages to avoid
leakage in a much simpler and eﬃcient way. Our transformation works in two steps. First,
we consider a simpliﬁed scheme where only one ciphertext query is allowed and messages live
in the ring ZL, for some integer L. In this setting, we build the following multi-input scheme.
For each slot i the (master) secret key for slot i consists of one random vector ui ∈ Zm
L .
Encrypting xi merely consists in computing ci = xi + ui mod L. The secret key for function
y = (y1k . . .kyn), is just zy =Pn
i=1hui, yii mod L. To decrypt, one computes
hx, yi mod L = h(c1, . . . , cn), yi − zy mod L
Security comes from the fact that, if only one ciphertext query is allowed, the above can be
seen as the functional encryption equivalent of the one-time pad1.
Next, to guarantee security in the more challenging setting where many ciphertext queries
are allowed, we just add a layer of (functional) encryption on top of the above one-time
encryption. More speciﬁcally, we encrypt each ci using a FE (supporting inner products)
that is both linearly homomorphic and whose message space is compatible with L. So,
given ciphertexts {cti = Enc(ci)} and secret key dky = ({dkyi}i, zy), one can ﬁrst obtain
{hci, yii = Dec(cti, dkyi)}, and then extract the result as hx, yi =Pn
Our transformation actually comes in two ﬂavors: the ﬁrst one addresses the case where
the underlying FE computes inner products over some ﬁnite ring ZL; the second one instead
considers FE schemes that compute bounded-norm inner products over the integers. In both
cases the transformations are generic enough to be instantiated with known single-input FE
schemes for inner products. This gives us new MIFE relying on plain DDH [ABDP15], LWE
[ALS16] and Decisional Composite Residuosity [ALS16, ABDP16]. Moreover, the proposed
transform is security-preserving in the sense that, if the underlying FE achieves adaptive
security, so does our resulting MIFE.
i=1hci, yii − hu, yi.
From Single to Multi-Input FE for Inner Product
In this section, we give a generic construction of MIFE for inner product from any single-input
FE for the same functionality. More precisely, we show two transformations: the ﬁrst one
1We remark that a similar information theoretic construction was put forward by Wee in [Wee17], as a
warm-up scheme towards an FE for inner products achieving simulation security.
5.1 From Single to Multi-Input FE for Inner Product
103
n
):
Setupot(1λ, F m,L
For all i ∈ [n], ui ←R Zm
pk = L, msk := {ui}i∈[n]
Return (pk, msk, (eki)i∈[n]).
L , eki
:= ui,
Encot(pk, eki, xi):
Return xi + ui mod L.
KeyGenot(pk, msk, (y1k···kyn)):
z :=Pi∈[n]hui, yii mod L
Return dky1k···kyn := (y1k···kyn, z).
Decot(cid:0)pk, dky1k···kyn, ct1, . . . , ctn):
Parse dky1k···kyn := (y1k···kyn, z).
ReturnPn
i=1hcti, yii − z mod L
Figure 5.1: Private-key, information theoretically secure, multi-input FE scheme MIFE ot = (Setupot,
Encot, KeyGenot, Decot) for the class F m,L
.
n
addresses FE schemes that compute the inner product functionality over a ﬁnite ring ZL for
some integer L, while the second transformation addresses FE schemes for bounded-norm inner
product. The two transformations are almost the same, and the only diﬀerence is that in the
case of bounded-norm inner product, we require additional structural properties on the single-
input FE. Yet we stress that these properties are satisﬁed by all existing constructions. Both
our constructions rely on a simple MIFE scheme that is one-AD-IND secure unconditionally.
In particular, our constructions show how to use single-input FE in order to bootstrap the
information-theoretic MIFE from one-time to many-time security.
Information-Theoretic MIFE with One-Time Security
Here we present the multi-input scheme MIFE ot for inner product over ZL, that is, for the
set of functionalities {F m,L
: Kn × X1 × ··· × Xn → Z, with Kn := Znm,
for all i ∈ [n], Xi := Zm, Z := ZL, such that for any (y1k···kyn) ∈ Kn, xi ∈ Xi, we have:
}n∈N deﬁned as F m,L
n
n
F m,L
n
(cid:0)(y1k···kyn), x1, . . . , xn(cid:1) =
nXi=1hxi, yii mod L.
We prove its one-AD-IND security. The scheme is described in Figure 5.1.
Theorem 12: one-AD-IND security
The MIFE described in Figure 5.1 is one-AD-IND-weak secure. Namely, for any adversary
A, Advone-AD-IND-weak
(λ) = 0.
MIFE ot,A
Proof of Theorem 12. Let A be an adversary against the one-AD-IND security of the MIFE.
First, we use a guessing argument to build an adversary B such that:
Advone-AD-IND-weak
MIFE,A
(λ) ≤ 2−n · L−2mn · Advone-SEL-IND-weak-static
MIFE,B
(λ).
i , z0
i ) ←R Z2m
First, B samples CS ⊆ [n] uniformly at random among all subset of [n]. We denote
HS := [n] \ CS. Then, for all i ∈ HS, it samples (z1
L , which is a guess of
the challenge ciphertexts. Then, B sends (cid:16)CS,{zb
i}i∈HS,b∈{0,1}(cid:17) to its own experiment, upon
which it receives (pk,{eki}i∈CS{cti}i∈HS), where for all i ∈ HS, cti := Enc(pk, eki, zβ
i ), where
β ∈ {0, 1} corresponds to the experiment one-SEL-INDβ(1λ,A) the adversary B is interacting
with. It sends pk to A. For every query to OKeygen, B queries its own decryption key oracle
oracle on the same input, and returns the answer to A. For every query i ∈ [n] of A to
OCorrupt, B veriﬁes its guess was correct, namely, that i ∈ CS. If not, B ends the simulation
and returns α = 0 to its experiment. For every query (i, x0
i ) to OEnc, B veriﬁes its guess
is correct, namely, whether (i ∈ CS and x0
i , x1
i ). If it is not the case,
B ends the simulation, and returns α = 0 to its own experiment. If this is case, B does the
i , x1
i ) = (z0
i ), or (x0
i = x1
i , z1
104
Chapter 5. Multi-Input Inner-Product Functional Encryption without Pairings
following: if i ∈ CS, then it returns Enc(pk, eki, x0
i ) to A (note that it can do so since it knows
eki for all i ∈ CS); if i /∈ CS, it returns cti to A. Finally (if the simulation didn’t end before),
B forwards A’s output α to its experiment.
When B’s guess is correct, then it simulates A’s view perfectly. The guess is correct with
probability at least 2−n · L−2mn. When the guess is incorrect, then B returns α = 0 to its
experiment. Thus, we obtain Advone-AD-IND-weak
(λ).
It remains to prove that the MIFE presented in Figure 5.1 satisﬁes perfect one-SEL-IND
(λ) ≤ 2−n · L−2mn · Advone-SEL-IND-weak-static
MIFE,A
MIFE,B
security, under static corruptions. Namely, for any adversary B,
(λ) = 0.
Advone-SEL-IND-weak-static
MIFE,B
β
β
To do so, we introduce hybrid games Hβ(1λ,B) described in Figure 5.2. We prove that for
all β ∈ {0, 1}, Hβ(1λ,B) is identical to the experiment one-SEL-IND-weak-staticMIFE
(1λ,
B) (this game is deﬁned as many-AD-MIFE
(1λ,B) from Deﬁnition 23, with the one, SEL,
weak, and static restrictions). This can be seen using the fact that for all {xβ
i ∈ Zm}i∈HS,
where HS := [n] \ CS, the following distributions are identical: {ui mod L}i∈HS and {ui −
xβ
i mod L}i∈HS, with ui ←R Zm
from the ui is only
true in the selective security game. We denote by I ⊆ [n] the set of input slots that is queried
by the adversary. We use the fact that for all i ∈ I ∩ CS, it must be that x0
i . This is
implied by the deﬁnition of the security game, and the fact that HS ⊆ I, that is, every honest
slot is queried by the adversary, since we are only proving one-SEL-IND-weak-static security.
Finally, we show that B’s view in Hβ(1λ,B) is independent of β. Indeed, the only information
about β that leaks in this experiment isPi∈HShxβ
i , yii. Moreover, by deﬁnition of the security
game, we have Pi∈HShx0
i , yii = Pi∈HShx1
i = 0 for all
i ∈ CS in Condition 1 from Deﬁnition 23).
L . Note that the independence of the xβ
i , yii (this follows by taking x0
i = x1
i = x1
i
)
i}i∈I⊆[n],b∈{0,1}(cid:1) ← B(1λ, F m,L
Hβ(1λ,B):
(cid:0)CS,{xb
For all i ∈ [n]: ui ←R Zm
For all i ∈ CS, eki := ui.
For all i ∈ HS, cti := ui.
For all i ∈ I ∩ CS: cti := ui + x0
α ← BOKeygen(·),OCorrupt(·)(pk,{eki}i∈CS ,{cti}i∈I)
Output α
L
n
i
OKeygen(y):
ReturnPi∈[n]hui, yii −Pi∈HShxβ
i , yii mod L
Figure 5.2: Experiments for the proof of Theorem 12. Note that HS ⊆ I, where I denotes the
set of input slots that are queried by A.
Remark 13: Linear homomorphism
We use the fact that Encot is linearly homomorphic, that is, for all i ∈ [n], xi, x′