第16章X窗口系统的程序设计
537
法（classmethod）来实现的
tree::config --
Fuction to set tree widget configuration options.
Argunents:
args
any valid configuration option a canvas widget takes
Results:
Configures the underlying canvas widget with the options
proc tree::eonfig {wid args}{
variable tree
set newArgs (}
for (set  0j($i=0}(
return
lappend tree(Swid:Sparent:children) Sn
set tree(Swid:Sparent:chi1dren)[lsort Stree($wid:Sparent:chi1dren)]
tree::DfltConfig $wid Snode
foreach (op arg) Sargs {
dox-
image (set tree(Swid:$node:icon) $arg)
-tags (set tree(Swid:Snode:tags) Sarg)
加入iaVa编程群：524621833
---
## Page 556
538
Linux程序设计
tree::Bui1dWhenIdle Swid
删除一个项目正好与additem的功能相反，它的作用是从整个tree数据结构里和它的父结点项
的子结点名单里制除这个项目。它也要安排稍后重新绘制这棵树。
tree::delitem --
Deletes the specified iten from the widget
Arguments :
PTA
conplete path of the node
tree widget
node
Results:
If the node exists, it will be deleted.
proc trce::delites (wid node)(
{1(info exists tree(Swid:Snode:open)]} return
variable tree
if{[string compare Snode /1==0）{
catch (destroy $wid)
foreach t [array names tree Swid:*](
unset tree($t)
foreach c Stree(Swid:Snode:children)(
catch (tree::delitem $wid $node/$c)
unset tree($wid:Snode:open)
unset tree($wid:$node:chi1dren)
unset tree(Swid:Snode:icon)
set parent[Stree($wid:parenproc)$node]
seti[lsearch-exact Stree(Swid:Sparent:children) $n]
set n [eval $tree(Swid:tailproc) $node]
if (si>=0){
set tree(Swid:Sparent:children) [1replace $tree(Swid:Sparent:children) Si $i]
tree::Bui1dwhenIdle Swid
用户能够控制树素材里的哪个结点将被设置为一个选取项。sctselection和getselection例程就
是用来完成这一工作的。选取项对象将用高亮度背景色绘制出来。
tree::setselections
Kakes the given node as the currently selected node.
Arguments:
wid -tree widget
node - ccmplete path of the one of nodes
Results:
The given node wi11 be selected
proe tree::setselection (wid node){
variable tree
set tree(Swid:selection) Snode
tree::DrawSelection Swid
加入java编程群：524621833
---
## Page 557
第16章X窗口系统的程序设计
539
tree::getselection
Get the currently selected tree node
Arguments:
wid- tree vidget
Results:
If a node is currently selected it will be returned otherwise NULL
proc tree::getseleetion wid {
variable tree
return $tree($wid:seleetion)
下一个任务是建立/构造这个树。算法递归地调用每一个结点绘制出它自已的子结点。在绘
制出这个树之后，它将设立卷屏区。这样，当把这个树与卷屏条相关联的时候，它就能够正确
地动作。它还会绘制出当前的选取项。如下所示：
tree::Bui1d --
Internalfunction to rebuild the tree
Arguments:
wid -tree widgets
Results:
This routine has no complex logic in it. Deletes all the current items
on the canvas associated with the tree and re-builds the tree.
proc tree::Build wid {
variable tree
Swid delete al1
set tree(Swid:y) 30
catch (unset tree(Swid:buildpending)}
tree::BuildNode $wid/ 10
Swid config -scrollregion [Swid bbox al1]
tree::DrawSelection Swid
树素材绘制算法的精华是BuildNode。它是一个基本的树绘制算法，如果父结点的打开属性
被设置上了的话，这个父结点和它的子结点就都将被绘制出来。如果某个子结点的打开属性也
被设置上了，就将递归调用BuildNode把它的子结点也绘制出来。这个绘制算法本身就是对自己
功能的一个很好的说明。
tree::Bui1dNode *
Function called by tree::build to incrementally build each node
Arguments:
in-the starting x-cordinate
node -complete path of the node
Resuits:
The node gets drawm
proc tree::Bui1dNode (wid node in)(
加入jaVa编程群：524621833
---
## Page 558
540
Linux程序设计
if {$node==*/"){
variable tree
}else (
set vx (}
set vx Snode
foreach c $tree($wid:$node:chi1dren){
set. start. [expr $tree[$wid:y]-10]
set y Stree(Swid:y)
 - s s 1x]  t  
incr tree(Swid:y)17
set icon Stree(Swid:$vx/Se:icon)
foreach tag $tree($wid:$vx/Sc:tags}{
set taglist x
lappend taglist $tag
set x [expr $in+12]
if (istring length Sicon]>0）{
set k [Swid create image $x Sy -image Sicon -anchor w-tags Staglist]
set tree($wid:tag:Sk) Svx/$c
incr × 20
set j [Swid create text Sx Sy -text $c -font Stree(font)\
-anchor v -tags Staglist]
set tree($wid:tag:$j) $vx/$c
set tree(Swid:svx/Sc:tag)$j
if ([string length Stree($wid:Svx/$e:children)]}[
if{Stree($wid:Svx/$c:open)){
set §[Swid create image $in Sy -image Stree(openbm)]
tree::BuildLayer Swid Svx/$c [expr $in+18]
}else{
set j [Swid create image $in Sy -image Stree(closedibs)]
set j[5wid create line Sin Sstart $in [expr Sy+1]-fill gray50 ]
Swid lower Sj
现在，当这个树已经被显示在屏幕上之后，如果用户又点击了某个结点旁边的加号“+”图
案打开了这个树枝，下面给出的openbranch例程就会安排重新绘制这个树，把该结点的子结点也
显示出来。如下所示：
tree::openbranch --
A callback that gets called to open a node to show its children
Arguments:
node - the ncde whose children should be showm
wid - tree widget
#
Results:
The children of the node wil1 be drawn
proc tree::openbranch {wid node)(
variable tree
if {[info exists tzree($wid:5node:open)}&& Stree($wld:$node:open）==0
 [info exists tree(Swid:Snode:children)]
&&[string length Stree($wid:Snode:children)]>0}(
set tree($wid:$node:open)1
tree::Bui1d $wid
加入java编程群：524621833
---
## Page 559
第16章X富口系统的程序设计
541
类似地，当用户点击某个结点旁边的减号“.”图案时，closebranch例程将安排重新绘制这
个树，关闭那个结点，不再显示该结点的子结点，如下所示：
 tree::closebranch
The cpposite of open branch, see above
Arguments :
Results:
proc tree::closebranch {wid node) {
if ([info exists tree(Swid:$node:open)1 && Stree($wid:$node:open)==l){
variable tree
set tree($wid:Sncde:open]0
tree::Build Sid
DrawSelection例程将用高亮度背景色绘制出当前被选取的结点。
tree::DrawSelection --
Highlights the current selection
Arguments:
wid - tree widget
Results:
The current selection will be high-lighted with skyblue
proc tree::DrawSelection wid (
if {(string length $tree(Swid:selidx)]}（
variable tree
Swid delete Stree(Swid:selidx)
if ([atring length Snode]ss0）return
set node Stree(Swid:selection)
if {![info exists tree(Swid:Snode:tag)l}return
set bbox[Swid bbox Stree(Swid:Snode:tag1]
if（{1length Sbbox]=s4）（
set i [eval Swid create rectangle $bbox-fillskyblue -outline (())1
set tree(Swid:selidx) $i
Swid lower $i
}else {
sot tree(Swid:selidx) (1
有这么多的例程需要重新绘制这个树，但一一做来的效率是很低的。BuildWhenldl例程的
任务就是对这些重新绘制操作进行收集整理，然后安排一个事件处理器统一绘制出这个树来。
tree::BuildWhenIdle --
Function to reduce the munber redraws of the tree. When a redraw is not
inmediately warranted this function gets called
Arguments:
wid
tree wiget
Results:
Set the tree widget to be redrawn in future.
加入java编程群：524621833
---
## Page 560