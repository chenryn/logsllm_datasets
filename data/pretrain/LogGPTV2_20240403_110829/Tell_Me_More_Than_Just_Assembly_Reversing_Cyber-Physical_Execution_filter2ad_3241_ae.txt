### Table III: Comparison of Reverse Engineering Results between Snowman and MISMO

#### Snowman Reversed Result
```c
typedef struct {
    double windup_guard;
    double proportional_gain;
    double integral_gain;
    double derivative_gain;
    double prev_input;
    double control;
    double prev_steering_angle;
    int error;
} PID;

struct {
    signed int v6;
    double v19; // 
    double v20; // 
    int v21; // 
    [sp + 0x1Ch] //
    r3@2 [sp + 0x0h]
    [sp + 0x8h]
    [bp + 0x0h]@1
    [bp + 0x8h]@8
    [bp + 0x1Ch]@1
}
0x00: double SymVar;
0x08: double Kp;
0x10: double Ki;
0x18: double Kd;
0x20: double prev_measured_value;
0x28: double 
0x30: double output;
int integral;
R3 = v21;
asm {
    diff = ((input - pid->prev_input) / dt);
}
D7, D6, VLDR, VSUB.F64 D6, D6, D7, VLDR, VDIV.F64 D7, D6, D7, VSTR D7, [R3, #0x20], [R7, #0x4C + var44], [R7, #0x4C + var4C], D7, [R7, #0x4C + var24]
```

#### MISMO Reversed Result
```c
typedef struct {
    double SymVar;
    double Kp;
    double Ki;
    double Kd;
    double prev_measured_value;
    double output;
    double integral;
} PID;

// Assembly code
asm {
    reg D6 = measured_value - previous_measured_value;
    reg D7 = reg D6 / dt;
    VLDR, VSUB.F64 D6, D6, D7, VLDR, VDIV.F64 D7, D6, D7, VSTR D7, [R3, #0x20], [R7, #0x4C + var44], [R7, #0x4C + var4C], D7, [R7, #0x4C + var24]
}
```

### Semantic Information Recovery
MISMO recovers much more semantic information, making the reversed code very similar to the original source code. This detailed recovery simplifies the binary reversing process.

### Bug Discovery
The semantic information recovered by MISMO can be useful for finding bugs in closed-source binary files. We present an example where we found a bug in the PID algorithm implementation of the Linux kernel from version 3.13 to the present. Specifically, the bug lies in the computation of the `i_term` and `d_term` parameters in the PID control algorithm. MISMO reported a mismatch between the kernel’s PID implementation and the high-level PID algorithm. Upon investigation, we identified the incorrect implementation and buggy code statement within the Linux kernel.

**Example:**
- **Linux Kernel PID Implementation (Buggy):**
  ```c
  i_term += (Kp * (current_error - previous_error));
  d_term = (Kp * (current_error - 2 * previous_error + pre_previous_error)) / dt;
  ```

- **Correct Type-C PID Algorithm:**
  ```c
  i_term += (Ki * current_error);
  d_term = (Kd * (current_error - 2 * previous_error + pre_previous_error)) / dt;
  ```

**Figure 6: MISMO Detected a Bug in the Linux Kernel**

**Abstract Syntax Tree for the Symbolic Output Value (w/o Semantics):**
- **Figure 7:**
  ```
  Add
  Sym_8 Mul
  Mul
  Mul
  Add
  Not
  Sym_2
  Sym_4
  Sym_5
  Add
  Sym_6
  Pow
  Add
  Not
  Sym_0 Mul
  Sym_2
  Sym_1 Mul
  Sym_5
  -1
  Sym_0
  Sym_7 Mul
  Sym_2
  -1
  Sym_3
  -1
  Sym_0
  -2
  Sym_3
  ```

**Comparison with Known PID Algorithms:**
- **Figure 8:**
  - **PID Type A:**
    ```
    Add
    C Mul
    Mul
    Kp Add
    Kd
    Pow
    Add
    Mul
    Ki T
    Add
    setpoint Mul
    Mul
    T -1
    setpoint Mul
    Mul
    Mul
    setpoint
    Mul
    -1
    measured_value
    -1
    previous_error
    -1
    measured_value
    -1
    pre_previous_error
    -2
    previous_error
    -1
    measured_value
    ```

  - **PID Type B:**
    ```
    Add
    C Mul
    Mul
    Kp Add
    Ki T
    Add
    -1 Kd
    Pow
    Add
    setpoint Mul
    Mul
    setpoint Mul
    T -1
    measured_value
    Mul
    Mul
    -1
    measured_value
    -1
    previous_error
    -1
    measured_value
    -1
    pre_previous_measured_value
    -2
    previous_measured_value
    ```

  - **PID Type C:**
    ```
    Add
    C Mul
    Mul
    Mul
    -1 Kp Add
    Ki T
    Add
    -1 Kd
    Pow
    Add
    measured_value
    Mul
    setpoint Mul
    T -1
    measured_value
    Mul
    Mul
    -1
    previous_error
    -1
    measured_value
    -1
    pre_previous_measured_value
    -2
    previous_measured_value
    ```

**Inconsistency:**
- The inconsistency occurs in Figure 7, where there are three nodes with `Sym_2` label under the three subtrees each rooted at a `Mul` node. However, based on the algorithm graphs (Figure 8), there should be no same variable under the three `Mul` subtrees. As a result, MISMO’s constraint satisfaction returns no possible concretization of the symbolic values for a match between the graph in Figure 7 and any of the graphs in Figure 8.

**Figure 9: Comparing Controller Output Between Correct Implementation and Buggy Linux Kernel Implementation**

### Fine-Grained Sensitive Data Protection
The semantic information provided by MISMO can also be used for fine-grained sensitive data protection. The first step is to determine which data is sensitive enough to require extra security protection. Traditionally, sensitive data includes passwords, credit card numbers, and health records. MISMO can identify sensitive data in the controller’s live memory that is important for securing safety-critical cyber-physical systems.

**Example: Autonomous Car Steering**
- For an autonomous car steering, the integrity of the control gains (Kp for proportional, Ki for integration, and Kd for derivative) is crucial. These parameters are statically defined and do not change throughout the car’s operation.
- An attacker with access to the binary associated with the controller (e.g., firmware downloaded from an online repository) may modify these parameter values offline or during runtime (e.g., using a return-oriented programming exploit) to induce an unsafe state such as a car crash.
- The commercial autonomous controller example in our experiments limits the controller output (normalized steering wheel degree) to the range [-1, 1].

**Figure 10: Comparing Controller Output Between Correct Implementation and Buggy Linux Kernel Implementation**

This detailed analysis demonstrates the effectiveness of MISMO in recovering semantic information, identifying bugs, and protecting sensitive data in critical systems.