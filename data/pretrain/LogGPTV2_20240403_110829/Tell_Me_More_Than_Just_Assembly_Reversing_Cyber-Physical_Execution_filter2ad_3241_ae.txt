









TABLE III: Comparing the reverse engineering results between Snowman and MISMO.
Snowman Reversed Result
MISMO Reversed Result
Source Code
t y p e d e f
{
s t r u c t
d o u b l e w i n d u p g u a r d ;
d o u b l e p r o p o r t i o n a l g a i n ;
d o u b l e i n t e g r a l g a i n ;
d o u b l e d e r i v a t i v e g a i n ;
d o u b l e p r e v i n p u t ;
d o u b l e
d o u b l e c o n t r o l ;
d o u b l e p r e v s t e e r i n g a n g l e ;
i n t e r r o r ;
} PID ;
s t r u c t
{
s i g n e d i n t v6 ;
d o u b l e v19 ;
/ /
d o u b l e v20 ;
/ /
i n t v21 ;
/ /
[ s p +1Ch ]
/ /
r3@2
[ s p +0h ]
[ s p +8h ]
[ bp+0h ]@1
[ bp+8h ]@8
[ bp+1Ch ]@1
}
0 x00 : d o u b l e SymVar ;
0 x08 : d o u b l e Kp ;
0 x10 : d o u b l e Ki ;
0 x18 : d o u b l e Kd ;
0 x20 : d o u b l e p r e v m e a s u r e d v a l u e ;
0 x28 : d o u b l e
0 x30 : d o u b l e o u t p u t ;
i n t e g r a l ;
R3 = v21 ;
asm
{
d i f f = ( ( i n p u t − p i d−>
p r e v i n p u t ) / d t ) ;
}
D7 ,
D6 ,
VLDR
VLDR
VSUB . F64 D6 , D6 , D7
VLDR
VDIV . F64 D7 , D6 , D7
VSTR
D7 ,
[ R3 , # 0 x20 ]
[ R7 , # 0 x4C+ v a r 4 4 ]
[ R7 , # 0 x4C+ var 4C ]
D7 ,
[ R7 , # 0 x4C+ v a r 2 4 ]
provide much of useful semantic information that can simplify
the binary reversing process. MISMO recovers much more
semantic information very similar to the original source code.
2) Bug Discovery: The semantic information recovered by
MISMO can be useful for ﬁnding bugs in a closed-source
binary ﬁle. We present our exciting ﬁnding of a concrete case
in which we found a bug in the PID algorithm implementation
of the Linux kernel from version 3.13 to the present by
analyzing the semantic information recovered by MISMO.
We found a similar bug in the controller implementation of
the Android Things kernel for IoT devices by Google. The
bug lies in the computation of the values of i_term and
d_term parameters in the PID control algorithm. MISMO
reported a mismatch between the kernel’s PID implementation
and the high-level PID algorithm. Upon our investigation,
we identiﬁed the incorrect implementation and buggy code
statement within Linux kernel. Figure 6 shows the part of
program code5 of PID implementation and adopted algorithm
expression that is the PID Type-C algorithm. With source
code’s help, it will be easy to ﬁgure out the inconsistency
between algorithm and code implementation. However, for
MISMO’s context, we only have the stripped binary code and
PID algorithm candidates. MISMO was able to discover the
above-mentioned inconsistency.
Initially, MISMO located the control algorithm implemen-
tation function out of the 44 functions in the Linux kernel
tmon module, which implements different control algorithms.
MISMO reﬁned the control ﬂow graph by pruning the irrele-
5Our discussion is at the source code level for readability, whereas our
design and implementation assume only the binary.
reg D6 = m e a s u r e d v a l u e
− p r e v i o u s m e a s u r e d v a l u e ;
reg D7 = reg D6 / d t ;
(cid:9)(cid:15)(cid:20)(cid:9)(cid:15)(cid:12)(cid:10)(cid:19)(cid:5)(cid:16)(cid:4) (cid:8)(cid:15)(cid:1)(cid:19)(cid:8)(cid:15)(cid:12)(cid:10) (cid:18)(cid:5)(cid:14)(cid:4)(cid:6)(cid:17)(cid:4)(cid:7)(cid:15)(cid:1)
(cid:19)(cid:5)(cid:13)(cid:4)(cid:21)(cid:8)(cid:15)(cid:1)(cid:19)(cid:3)(cid:4)(cid:8)(cid:15)(cid:12)(cid:10)(cid:18)(cid:8)(cid:15)(cid:12)(cid:11)(cid:22)(cid:2)(cid:6)(cid:17)
(cid:2)(cid:11)(cid:8)(cid:13)(cid:14)(cid:10)(cid:15)(cid:9)(cid:12)
(cid:1)(cid:2)(cid:5)(cid:3)(cid:4)
(cid:4)(cid:14)(cid:13)(cid:8)(cid:14)(cid:5)(cid:12)(cid:1)(cid:3)(cid:13)(cid:6)(cid:7)
(cid:18)
(cid:19)(cid:20)(cid:1)(cid:6)(cid:12)(cid:10)(cid:13)(cid:17)(cid:16)(cid:8)(cid:1)(cid:9)(cid:11)(cid:16)(cid:8)(cid:14)(cid:10)(cid:8)(cid:7)(cid:9)(cid:5)(cid:16)(cid:8)(cid:1)(cid:4)(cid:3)(cid:2)(cid:1)(cid:16)(cid:8)(cid:14)(cid:10)(cid:15)(cid:1)(cid:20)(cid:19)
(cid:8)(cid:19)(cid:11)(cid:4)(cid:9)(cid:7) (cid:26)(cid:1)(cid:18)(cid:8)(cid:19)(cid:8)(cid:2)(cid:9)(cid:2)(cid:7)(cid:15)(cid:6)(cid:8) (cid:22)(cid:1)(cid:20)(cid:12)(cid:6) (cid:18) (cid:12)(cid:6)(cid:19)(cid:23)(cid:21)(cid:14)
(cid:5)(cid:19)(cid:11)(cid:4)(cid:9)(cid:7) (cid:26)(cid:1)(cid:8)(cid:19)(cid:8)(cid:2)(cid:9)(cid:2)(cid:7)(cid:15)(cid:6)(cid:8) (cid:22)(cid:1)(cid:8)(cid:19)(cid:8)(cid:2)(cid:9)(cid:2)(cid:7)(cid:15)(cid:6)(cid:5) (cid:22)(cid:1)(cid:8)(cid:19)(cid:8)(cid:2)(cid:9)(cid:2)(cid:7)(cid:15)(cid:11)(cid:10) (cid:22)(cid:1)(cid:4)(cid:6)(cid:14)
(cid:3)(cid:19)(cid:11)(cid:4)(cid:9)(cid:7) (cid:26)(cid:1)(cid:18)(cid:8)(cid:19)(cid:8)(cid:2)(cid:9)(cid:2)(cid:7)(cid:15)(cid:6)(cid:8) (cid:22)(cid:1)(cid:8)(cid:19)(cid:8)(cid:2)(cid:9)(cid:2)(cid:7)(cid:15)(cid:6)(cid:3) (cid:22)(cid:1)(cid:20)(cid:12)(cid:6) (cid:18) (cid:24)(cid:1)(cid:22)(cid:1)(cid:12)(cid:6)(cid:19)(cid:23)
(cid:25)(cid:12)(cid:6)(cid:19)(cid:24)(cid:21)(cid:1)(cid:17)(cid:1)(cid:8)(cid:19)(cid:8)(cid:2)(cid:9)(cid:2)(cid:7)(cid:15)(cid:11)(cid:10)(cid:14)
(cid:19)(cid:20)(cid:1)(cid:6)(cid:12)(cid:10)(cid:13)(cid:17)(cid:16)(cid:8)(cid:1)(cid:12)(cid:17)(cid:16)(cid:13)(cid:17)(cid:16)(cid:1) (cid:20)(cid:19)
(cid:22)(cid:13)(cid:6) (cid:25)(cid:26)(cid:1)(cid:8)(cid:19)(cid:11)(cid:4)(cid:9)(cid:7) (cid:25)(cid:1)(cid:5)(cid:19)(cid:11)(cid:4)(cid:9)(cid:7) (cid:25)(cid:1)(cid:3)(cid:19)(cid:11)(cid:4)(cid:9)(cid:7)(cid:14)
(cid:16)
Fig. 6: MISMO detected a bug in Linux Kernel.
Add
Sym_8 Mul
Mul
Mul
Add
Not
Sym_2
Sym_4
Sym_5
Add
Sym_6
Pow
Add
Not
Sym_0 Mul
Sym_2
Sym_1 Mul
Sym_5
-1
Sym_0
Sym_7 Mul
Sym_2
-1
Sym_3
-1
Sym_0
-2
Sym_3
Fig. 7: Abstract syntax tree for the symbolic output value of the Linux
kernel PID implementation (w/o semantics, e.g., parameter names).
vant basic blocks. MISMO symbolicly executed the remaining
execution path in the CFG and generated the corresponding
symbolic expression in the form of an abstract syntax tree (see
Figure 7). Finally, MISMO compared Figure 7 with abstract
syntax tree of different types of known PID algorithms (see
Figure 8). The inconsistency occurs in Figure 7, where there
are three nodes with Sym_2 label under the three subtrees each
rooted at a Mul node. However, based on the algorithm graphs
(Figure 8), there should be no same variable under the three
358
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:51:23 UTC from IEEE Xplore.  Restrictions apply. 
Mul subtrees. As the result MISMO’s constraint satisfaction
returns no possible concretization of the symbolic values for
a match between the graph in Figure 7 and any of the graphs
in Figure 8. Upon our manual inspection as the result, we
discovered the bug in the PID algorithm implementation of the
Linux kernel in Android Things framework for IoT devices.
The associated expression was found to have a different
expression than the actual Type-C control algorithm. The
i_term and d_term values were found to have an extra Kp
value. Figure 9 illustrates the difference between the correct
Type-C algorithm and the buggy implementation. This bug
could be crucial considering that the Linux kernel is widely
used in many real-time embedded cyber-physical systems.
Add
C Mul
Mul
Kp Add
Kd
Pow
Add
Mul
Ki T
Add
setpoint Mul
Mul
T -1
setpoint Mul
Mul
Mul
setpoint
Mul
-1
measured_value
-1
previous_error
-1
measured_value
-1
pre_previous_error
-2
previous_error
-1
measured_value
(a) Abstract syntax tree for the PID type A algorithm (w/ semantics)
Add
C Mul Mul
Mul
Kp Add
Ki T Add
-1 Kd
Pow
Add
setpoint Mul
Mul
setpoint Mul
T -1
measured_value
Mul
Mul
-1
measured_value
-1
previous_error
-1
measured_value
-1
pre_previous_measured_value
-2
previous_measured_value
(b) Abstract syntax tree for the PID type B algorithm (w/ semantics)
Add
C Mul
Mul
Mul
-1 Kp Add
Ki T Add
-1 Kd
Pow
Add
measured_value
Mul
setpoint Mul
T -1
measured_value
Mul
Mul
-1
previous_error
-1
measured_value
-1
pre_previous_measured_value
-2
previous_measured_value
(c) Abstract syntax tree for the PID type C algorithm (w/ semantics)
Fig. 8: Abstract syntax tree for PID algorithm
3) Fine-Grained Sensitive Data Protection: The semantic
information provided by MISMO can also be used for ﬁne-
grained sensitive data protection. The ﬁrst step is to determine
which data is sensitive enough to require extra security pro-
tection. Traditionally, sensitive data has referred to sensitive
information, e.g., passwords, credit card numbers, and health
records. MISMO can identify sensitive data in the controller’s
live memory that
is important for securing safety-critical
cyber-physical systems.
To demonstrate such ﬁne-grained data protection, we use
one example to show how MISMO can identify a control
algorithm’s sensitive data, and the implications of compro-
mising such sensitive data. For an autonomous car steering,
the parameters’ value integrity is crucial for operation of the
underlying control algorithm and stable control of the vehicle’s
actuators. As a case in point, the values of the different control
gains (Kp for proportional, Ki for integration, and Kd for
derivative) as well as the associated code are statically deﬁned
and do not change throughout the car’s operation.
Assume an attacker has access to the binary associated
with the controller (e.g., the ﬁrmware downloaded from an
online repository used for ﬁrmware updates). The attacker may
modify the parameter value ofﬂine or during its execution at
runtime (e.g., using a data corrupting return-oriented program-
ming exploit) in order to induce an unsafe state such as a car
crash. The commercial autonomous controller example in our
experiments limits the controller output (normalized steering
wheel degree) to the range [-1, 1]. One possible attack vector
(cid:25)
(cid:9)
(cid:6)
(cid:24)
(cid:1)
(cid:2)
(cid:3)
(cid:6)
(cid:28)(cid:32)
(cid:28)(cid:27)
(cid:32)
(cid:27)
(cid:2)(cid:5)(cid:1)
(cid:2)(cid:4)(cid:3)(cid:1)
(cid:6)(cid:3)(cid:2)
(cid:5)(cid:13)(cid:16)(cid:22)(cid:23)(cid:1)(cid:4)(cid:11)(cid:19)(cid:16)(cid:11)(cid:14)(cid:1)(cid:6)(cid:3)(cid:2)(cid:1)
(cid:24)(cid:10)(cid:22)(cid:12)(cid:25)
(cid:7)(cid:11)(cid:21)(cid:18)(cid:17)(cid:13)(cid:16)(cid:21)
(cid:28)
(cid:33)
(cid:28)(cid:28)
(cid:28)(cid:33)
(cid:29)(cid:28)
(cid:29)(cid:33)
(cid:30)(cid:28)
(cid:8)(cid:13)(cid:15)(cid:11)(cid:1)(cid:24)(cid:20)(cid:25)
(cid:30)(cid:33)
(cid:31)(cid:28)
(cid:31)(cid:33)
(cid:32)(cid:28)
(cid:32)(cid:33)
Fig. 9: Comparing controller output between correct implementation
and buggy Linux Kernel implementation.
(cid:33)(cid:37)
(cid:28)(cid:25)(cid:37)(cid:23)(cid:1)(cid:37)(cid:29)(cid:24)(cid:1)(cid:3)(cid:6)(cid:4) (cid:18)(cid:7)(cid:10)(cid:9)(cid:19)(cid:22)(cid:1)(cid:8)(cid:20)(cid:17)(cid:21)(cid:9)
(cid:2)(cid:19)(cid:19)(cid:7)(cid:8)(cid:12)(cid:1)(cid:5)(cid:16)(cid:11)(cid:15)(cid:19)
(cid:27)
(cid:9)
(cid:20)
(cid:7)
(cid:21)
(cid:13)
(cid:1)
(cid:17)
(cid:16)
(cid:17)
(cid:17)
(cid:9)
(cid:26)
(cid:1)
(cid:4)
(cid:6)
(cid:3)
(cid:33)(cid:32)
(cid:37)
(cid:32)
(cid:2)(cid:5)(cid:1)
(cid:2)(cid:4)(cid:3)(cid:1)
(cid:33) (cid:38)
(cid:33)
(cid:33)
(cid:38)
(cid:33)
(cid:33)
(cid:34)
(cid:38)
(cid:34)
(cid:33)