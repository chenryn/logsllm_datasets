清单16-7 处理数据断点事件的源代码
1    HRESULT CDataTracer::HandleEvent(_EXCEPTION_POINTERS *ExceptionInfo)
2    {
3        ULONG ulDR6;
4        TCHAR szMsg[MAX_PATH]=_T("CDataTracer::HandleEvent");
5    
6        // check Dr6 to see which break point was triggered.
7        ulDR6=ExceptionInfo->ContextRecord->Dr6;
8    
9        for(int i=0;iExceptionRecord->Exception
Address);
14       }
15       ShowString(szMsg);
16       CCallTracer ct;
17       ct.SetOptions(CALLTRACE_OPT_INFO_LEAN);
18       ct.WalkStack(ShowStackFrame, this, 1000, ExceptionInfo->ContextRe
cord);
19    
20       return S_OK;
21   }
清单16-7列出了用来处理数据断点事件的HandleEvent函数的源代
码。其中第7行先取出记录断点信息的DR6寄存器，因为单步执行和所
有数据断点触发的都是一个异常（1号），所以只有通过DR6寄存器才
能判断出到底是哪个断点（见第4章）。第9～14行的for循环依次判断
DR6的低4位，如果某一位为1，则说明对应的断点被触发了。第16～18
行使用上一节介绍的CCallTracer类来显示栈回溯信息，也就是访问被监
视变量的过程。
为了验证CDataTracer类的有效性，在D4dTest程序中用它来监视
CD4dTest Dlg类的m_nInteger成员。在OnInitDialog方法中，加入了如下
代码。
if(g_pDataTracer==NULL)
{
    g_pDataTracer=new CDataTracer();
    g_pDataTracer->SetListener(m_ListInfo.m_hWnd);
    g_pDataTracer->AddVar((ULONG)&m_nInteger, 0, TRUE);
    g_pDataTracer->StartTrace();
}
因为m_nInteger是使用MFC的DDX（Dialog Data Exchange）机制与
界面上的编辑框绑定的，所以当单击界面上的Assign按钮时（见图16-
1），便会触发监视机制，从而看到列表框中输出nInteger变量被访问的
经过。
图16-1 显示访问变量过程的D4dTest程序
列表框中的信息告诉我们，在单击界面上的Assign按钮后，访问了
m_nInteger变量两次（图中只显示出第一次），一次是被
_AfxSimpleScanf函数访问，另一次是被CD4dTestDlg::OnAssign函数访
问。输出的信息中包含了每次访问的详细过程，这证明了本方法的可行
性。在实际使用时，可以考虑使用类似CFastTrace类的方法只记录函数
的返回地址，这样可以大大提高速度。
需要说明的是，CDataTracer类只是为了满足演示目的而设计的，如
果要用到实际的软件项目中，还需要做一些增强和完善。比如，在每次
收到数据断点事件时，最好显示出变量的当前值，这需要暂时禁止数据
断点。否则，如果设置的访问方式是读写都触发，那么读取变量时又会
触发断点导致死循环。
使用数据断点方法的一个不足是可以监视的变量数量非常有限，这
是硬件平台所决定的。下面将介绍的基于对象封装技术的方法没有这个
限制。
16.4.2 使用对象封装技术来追踪数据变化
通过对象封装技术来追踪变量访问过程的基本思想是将要监视的数
据封装在一个类中，然后通过运算符重载截获对变量的访问，并进行记
录。可以使用环形缓冲区来循环记录变量的历史值，也可以维护一块专
门的内存区。每次变量被访问时的栈回溯信息可以记录在UST数据库
中。
为了演示这种方法，编写了一个用于追踪整型变量的CD4dInteger
类。清单16-8给出了这个类的定义，成员m_pTracker用来指向保存历史
值的环形缓冲区，m_nTrackDepth代表这个缓冲区的长度。
清单16-8 具有可追溯性的整数类型
class D4D_API CD4dInteger : public CD4dObject  
{
protected:
   long m_nTrackerIndex;      //追踪数组的可用位置
   long * m_pTracker;         //记录变量历史值的追踪数组
   long m_nTrackDepth;        //追踪数组的长度
   long m_nCurValue;          //变量的当前值
public:    
   long CurValue(){return m_nCurValue;};    
   long GetTrace(int nBackStep);             //读取历史值
   long GetTrackDepth(){return m_nTrackDepth;}    
   CD4dInteger& operator =(long nValue);     //重载赋值运算符
   CD4dInteger(int nTrackDepth=1024);    
   virtual ~CD4dInteger();    
   virtual DWORD UnitTest (DWORD dwParaFlags);     
   virtual DWORD Dump(HANDLE hFile);    
};
因为重载了赋值运算符，所以当为CD4dInteger的实例赋值时，就
会触发它的赋值运算符方法。
CD4dInteger& CD4dInteger::operator =(long nValue)
{
    int nIndex = InterlockedIncrement (&m_nTrackerIndex);
    nIndex %= m_nTrackDepth;
    this->m_nCurValue=nValue;
    this->m_pTracker[nIndex] = nValue;
    return *this;
}
除了更新当前值外，这个方法还在环形缓冲区找一个新的位置将当
前值保存起来。这样环形缓冲区便记录下了这个数据的变化过程。如果
要记录每次更新数据时的函数调用过程，那么只要在这个方法中加入记
录栈回溯信息的代码。
16.5 可观察性的实现
当我们在调试软件时，经常有这样的疑问：在某一时刻，比如当程
序发生错误或崩溃时，CPU在执行哪个函数或函数的哪一部分？此时循
环L已经执行了多少次？变量A的值是什么？这个时候进程中共有多少
个线程？有多少个模块？动态链接库M是否加载了？如果加载了，被加
载的版本是多少？如此等等[2]。
能否迅速找到这些问题的答案对调试效率有着直接的影响。很多时
候，就是因为无法回答上面的某一个问题，使调试工作陷入僵局。然
后，可能要花费数小时乃至数天的时间来修改软件，向软件中增加输出
状态信息的代码，然后重新编译、安装、执行，再寻找答案。这种方法
有时候被形象地称为“代码注入”，即向程序中注入用来显示软件状态或
者其他辅助观察的代码。
因为每次注入代码都需要重新编译程序，所以这种方法的效率是比
较低的。为了提高效率，在设计软件时就应该考虑如何使软件的各种特
征可以被调试人员简便地观察到，即提高软件的可观察性。
16.5.1 状态查询
为了便于观察软件的内部运行状态，设计软件时应该考虑如何查询
软件的内部状态，这对软件维护和调试乃至最终用户都是有帮助的。
提供状态查询的方式可以根据软件的具体特征而灵活设计，对于网
站或网络服务（Web Service），可以通过网页的形式来提供。如果是简
单的客户端软件，可以采用对话框的形式。
大多数设计完善的软件系统都会提供专门的工具供用户查询系统的
状态。以Windows操作系统为例，使用任务管理器可以查询系统中运行
的进程、线程和内存使用情况等信息；使用driverquery命令可以查询系
统中加载的驱动程序；使用netstat命令可以查询系统的网络连接情况；
使用设备管理器可以查询系统中各种硬件和设备驱动程序的工作情况，
等等。
对于越大型的软件系统，状态查询功能越显得重要，因此在架构设
计阶段就应该考虑如何支持状态查询功能，设计统一的接口和附属工
具。对于中小型的软件可以考虑配备简单的状态查询功能，比如一个对
话框里面包含了软件的重要运行指标。
如果从设计阶段就将状态查询功能考虑进来，那么所需花费的开发
投入通常并不大，但如果等到发生了问题再考虑如何增加这些功能，那
么不但要花费更多的精力，而且效果也很难做到“天衣无缝”。
除了设计专用的接口和查询方式外，也可以使用操作系统或者工业
标准定义的标准方式来支持状态查询，比如后面介绍的WMI方式和性能
计数器方式。使用标准方式的好处是可以被通用的工具所访问。
16.5.2 WMI
Windows是个庞大的系统，如何了解系统中各个部件的运行状况并
对它们进行管理和维护是个重要而复杂的问题。如果系统的每个部件都
提供一个管理程序，那么不但会导致很多重复的开发工作，而且会影响
系统的简洁性和性能。更好的做法是操控系统实现并提供一套统一的机
制和框架，其他部件只须按照一定的规范实现与自身逻辑密切相关的部
分，WMI（Windows Management Instrumentation）便是针对这一目标设
计的。
WMI提供了一套标准化的机制来管理本地及远程的Windows系统，
包括操作系统自身的各个部件及系统中运行的各种应用软件，只要它们
提供了WMI支持。WMI最早出现在NT4的SP4中，并成为其后所有
Windows操作系统必不可少的一部分。在今天的Windows系统中，很容
易就可以看到WMI的身影，比如计算机管理（Computer Management）
控制台、事件查看器、服务控制台（Services Console）等。事实上，这
些工具都使用MMC（Microsoft Management Console）程序来提供用户
接口。
从架构角度来看，整个WMI系统由以下几个部分组成。
托管对象（Managed Object）：即要管理的目标对象，WMI系统的
价值就是获得这些对象的信息或配置它们的行为。
WMI提供器（WMI Provider）：按照WMI标准编写的软件组件，它
代表托管对象与WMI管理器交互，向其提供数据或执行其下达的操
作。WMI提供器隐藏了不同托管对象的差异，使WMI管理器可以
以统一的方式查询和管理托管对象。
WMI基础设施（WMI Infrastructure）：包括存储对象信息的数据库
和实现WMI核心功能的对象管理器。因为WMI使用CIM（Common
Information Model）标准来描述和管理托管对象，所以WMI的数据
库和对象管理器分别命名为CIM数据仓库（CIM Repository）和
CIM对象管理器（CIM Object Manager，CIMOM）。
WMI应用编程接口（API）：WMI提供了几种形式的API，以方便
不同类型的WMI应用使用WMI功能，比如供C/C++程序调用的函数
形式（DLL、Lib和头文件），供Visual Basic和脚本语言调用
ActiveX控件的形式和通过ODBC适配器（ODBC adaptor）访问的数
据库形式。
WMI应用程序（WMI Application）：即通过WMI API使用WMI服
务的各种工具和应用程序。比如Windows中的MMC程序，以及各
种实用WMI的Windows脚本。因为从数据流向角度看，WMI应用程
序是消耗WMI提供器所提供的信息的，所以有时又称为WMI消耗
器（WMI Consumer）。
在对WMI有了基本认识后，下面介绍如何在驱动程序中通过WMI
机制提供状态信息。图16-2显示了WDM模型中用来支持WMI机制的主
要部件及它们在WMI架构中的位置。其中用户态的WDM提供器负责将
来自WMI应用程序的请求转发给WDM的内核函数，这些函数在DDK文
档中称为WDM的WMI扩展。
图16-2 WDM中支持WMI的软件架构
WMI扩展会将来自用户态的请求以IRP（I/O Request Packet）的形
式发给驱动程序。所有WMI请求的主IRP号都是
IRP_MJ_SYSTEM_CONTROL，子号码（minor code）可能为如下一些
值。
IRP_MN_REGINFO或IRP_MN_REGINFO_EX：查询或者更新驱动
程序的注册信息。在驱动程序调用IoWMIRegistrationControl函数
后，系统便会向其发送这个IRP，以查询注册信息，包括数据块格
式等（见下文）。
IRP_MN_QUERY_ALL_DATA和
IRP_MN_QUERY_SINGLE_INSTANCE：查询一个数据块的所有实
例或单个实例。
IRP_MN_CHANGE_SINGLE_ITEM和
IRP_MN_CHANGE_SINGLE_INSTANCE：让驱动程序修改数据块
的一个或多个条目（item）。
IRP_MN_ENABLE_COLLECTION和
IRP_MN_DISABLE_COLLECTION：通知驱动程序开始累积或停止