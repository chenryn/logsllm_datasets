``` screen
defaults {
        user_friendly_names     yes
        path_grouping_policy    multibus
}
```
::: para
[表 4.1
"多路径配置默认设置"](#mpio_configfile.html#tb-config_defaults){.xref}
描述了在 `multipath.conf`{.filename} 配置文件 `defaults`{.literal}
部分设置的属性。这些值会被 DM-Multipath 使用，除非用
`multipath.conf`{.filename} 配置文件的 `devices`{.literal} 和
`multipaths`{.literal} 部分指定的属性将其覆盖。
:::
::: {.note xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**注意**
:::
::: admonition
::: para
从红帽企业版 Linux 6.0 开始弃用 `mode`{.literal}、`uid`{.literal} 和
`gid`{.literal} 参数。device-mapper 设备的权限（包括 multipath 映射）由
`udev`{.literal}
规则设定。`/usr/share/doc/device-mapper-version`{.filename}
中有一个模板文件，名为
`12-dm-permissions.rules`{.filename}，您可以使用它并将其放在
`/etc/udev/rules.d`{.filename} 目录中使其生效。
:::
:::
:::
[]{#mpio_configfile.html#idm139642181088016
.indexterm}[]{#mpio_configfile.html#idm139642181086256
.indexterm}[]{#mpio_configfile.html#idm139642181084976
.indexterm}[]{#mpio_configfile.html#idm139642181083216
.indexterm}[]{#mpio_configfile.html#idm139642181081936
.indexterm}[]{#mpio_configfile.html#idm139642157698320
.indexterm}[]{#mpio_configfile.html#idm139642157697040
.indexterm}[]{#mpio_configfile.html#idm139642157695280
.indexterm}[]{#mpio_configfile.html#idm139642157694000
.indexterm}[]{#mpio_configfile.html#idm139642157692240
.indexterm}[]{#mpio_configfile.html#idm139642180152592
.indexterm}[]{#mpio_configfile.html#idm139642180150832
.indexterm}[]{#mpio_configfile.html#idm139642180149552
.indexterm}[]{#mpio_configfile.html#idm139642180147792
.indexterm}[]{#mpio_configfile.html#idm139642180146512
.indexterm}[]{#mpio_configfile.html#idm139642164907696
.indexterm}[]{#mpio_configfile.html#idm139642164906416
.indexterm}[]{#mpio_configfile.html#idm139642164904656
.indexterm}[]{#mpio_configfile.html#idm139642164903376
.indexterm}[]{#mpio_configfile.html#idm139642164901616
.indexterm}[]{#mpio_configfile.html#idm139642164900336
.indexterm}[]{#mpio_configfile.html#idm139642162928768
.indexterm}[]{#mpio_configfile.html#idm139642162927488
.indexterm}[]{#mpio_configfile.html#idm139642162925728
.indexterm}[]{#mpio_configfile.html#idm139642162924448
.indexterm}[]{#mpio_configfile.html#idm139642162922688
.indexterm}[]{#mpio_configfile.html#idm139642174370352
.indexterm}[]{#mpio_configfile.html#idm139642174368592
.indexterm}[]{#mpio_configfile.html#idm139642174367312
.indexterm}[]{#mpio_configfile.html#idm139642174365552
.indexterm}[]{#mpio_configfile.html#idm139642174364272
.indexterm}[]{#mpio_configfile.html#idm139642163594320
.indexterm}[]{#mpio_configfile.html#idm139642163593040
.indexterm}[]{#mpio_configfile.html#idm139642163591280
.indexterm}[]{#mpio_configfile.html#idm139642163590000
.indexterm}[]{#mpio_configfile.html#idm139642163588240
.indexterm}[]{#mpio_configfile.html#idm139642154808336
.indexterm}[]{#mpio_configfile.html#idm139642154806576
.indexterm}[]{#mpio_configfile.html#idm139642154805296
.indexterm}[]{#mpio_configfile.html#idm139642154803536
.indexterm}[]{#mpio_configfile.html#idm139642154802256
.indexterm}[]{#mpio_configfile.html#idm139642154800496
.indexterm}[]{#mpio_configfile.html#idm139642147750128
.indexterm}[]{#mpio_configfile.html#idm139642147748400
.indexterm}[]{#mpio_configfile.html#idm139642147747152
.indexterm}[]{#mpio_configfile.html#idm139642147745392 .indexterm}
::: table
[⁠]{#mpio_configfile.html#tb-config_defaults}
**表 4.1. 多路径配置默认设置**
::: table-contents
+----------------------+-----------------------------------------------+
| 属性                 | 描述                                          |
+======================+===============================================+
| ` polling_           | 以秒为单位指定两次路径检查之间的间隔。对      |
| interval `{.literal} | 正常工作的路径，两次检查间的间隔会逐渐增加到  |
|                      | `polling_interval`{.literal} 的四倍。默认值为 |
|                      | 5。                                           |
+----------------------+-----------------------------------------------+
| `                    | 生成 `udev`{.literal}                         |
| udev_dir `{.literal} | 设备节点的目录，默认值为 `/dev`{.literal}。   |
+----------------------+-----------------------------------------------+
| ` multi              | 保存                                          |
| path_dir `{.literal} | 动态共享对象的目录。默认值依系统而定，通常为  |
|                      | `/lib/multipath`{.filename}。                 |
+----------------------+-----------------------------------------------+
| ` find_mu            |   --------------------------                  |
| ltipaths `{.literal} | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      |   定义设定多路径设备的模式。如果将这个        |
|                      | 参数设定为 `yes`{.literal}，那么多路径将不会  |
|                      | 尝试为每个不在黑名单中的路径创建设备。反之，  |
|                      | 多路径将只在满足以下三给条件之一时创建设备：  |
|                      |   \-                                          |
|                      | 至少有两个没有列入黑名单的路径使用同一 WWID。 |
|                      |   \- 用户通过使用 `mult                       |
|                      | ipath`{.command} 命令指定设备强制创建该设备。 |
|                      |   \- 路径拥有与之前创建的多路                 |
|                      | 径设备相同的 WWID。无论何时使用 `find_multipa |
|                      | ths`{.literal} 组件创建多路径设备后，多路径都 |
|                      | 会记住该设备的 WWID 以便在再次看到使用那个 WW |
|                      | ID 的路径时自动创建设备。这可让您自动选择正确 |
|                      | 的所路径创建多路径设备而无需编辑多路径黑名单  |
|                      | 。如果之前您在没有设定 `find_multipaths`{.li  |
|                      | teral} 参数的情况下创建了多路径设备，有关步骤 |
|                      | 请查看 [第 4.2 节 "配置文件黑名单"](#mpio_co  |
|                      | nfigfile.html#config_file_blacklist){.xref}。 |
|                      |   默认值为 `no`{.literal}。                   |
|                      |   --------------------------                  |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
+----------------------+-----------------------------------------------+
| ` v                  | 默认详情。数值越高则详细程度越高。有效等级在  |
| erbosity `{.literal} | 0 - 6 之间。默认值为 `2`{.literal}。          |
+----------------------+-----------------------------------------------+
| ` path_              |   ----------------------------------------    |
| selector `{.literal} | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      |   指定用来决定下一个                          |
|                      |  I/O 操作所使用路径的默认算法。可能的值包括： |
|                      |   `round-robin 0`{.literal}：在路径组中       |
|                      | 循环每个路径，向每个路径发送同样数量的 I/O。  |
|                      |   `queue-length 0`{.literal}：将下一          |
|                      | 组 I/O 发送到具有最少未处理 I/O 请求的路径。  |
|                      |   `service-time 0`{.literal}：将下一组 I      |
|                      | /O 发送到具有最短预计服务时间的路径，这是由未 |
|                      | 处理 I/O 的总量除以每个路径的相对流量决定的。 |
|                      |   默认值为 `round-robin 0`{.literal}。        |
|                      |   ----------------------------------------    |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
+----------------------+-----------------------------------------------+
| ` path_groupin       |   -------                                     |
| g_policy `{.literal} | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      |   指定用于                                    |
|                      | 未指定路径的默认路径分组策略，可能的值包括：  |
|                      |   `                                           |
|                      | failover`{.literal}：每个优先组群有一个路径。 |
|                      |   `multib                                     |
|                      | us`{.literal}：所有有效路径在一个优先组群中。 |
|                      |   `group_by_serial`{                          |
|                      | .literal}：每个检测到的系列号有一个优先组群。 |
|                      |   `g                                          |
|                      | roup_by_prio`{.literal}：每个优先组群有一个路 |
|                      | 径优先值。优先权根据指定为 global、per-contr  |
|                      | oller 或者 per-multipath 选项的调用程序决定。 |
|                      |   `grou                                       |
|                      | p_by_node_name`{.literal}：每个目标节点名有一 |
|                      | 个优先组。目标节点名保存在 `/sys/class/fc_tra |
|                      | nsport/target*/node_name`{.filename} 文件中。 |
|                      |   默认值为 `failover`{.literal}。             |
|                      |   -------                                     |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
+----------------------+-----------------------------------------------+
| ` getuid             |   ----------------------------                |
| _callout `{.literal} | --------------------------------------------- |
|                      |   指定默认程序和参数                          |
|                      | 调用获得唯一路基功能识别程序。需要绝对路径。  |
|                      |   默认值为 `/lib/udev/scsi_i                  |
|                      | d --whitelisted --device=/dev/%n`{.literal}。 |
|                      |   ----------------------------                |
|                      | --------------------------------------------- |
+----------------------+-----------------------------------------------+
| ` prio `{.literal}   |   --------------------------------------      |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      |   指定要获得路径优先值所需调用的默认程序      |
|                      | 及参数。例如：SPC-3 中的 ALUA 字节提供了一个  |
|                      | 可改变的 `prio`{.literal} 值。可能的值包括：  |
|                      |   `const`{.literal}：为所有路径设定优先权 1。 |
|                      |                                               |
|                      |  `emc`{.literal}：为 EMC 阵列生成路径优先权。 |
|                      |   `alua`{.li                                  |
|                      | teral}：根据 SCSI-3 ALUA 设置生成路径优先权。 |
|                      |   `tpg_pref`{.literal}：根据 SCSI-            |
|                      | 3 ALUA 设置生成路径优先权，使用首选端口字节。 |
|                      |   `ont                                        |
|                      | ap`{.literal}：为 NetApp 阵列生成路径优先权。 |
|                      |   `rdac`{.literal}：                          |
|                      | 为 LSI/Engenio RDAC 控制程序生成路径优先权。  |
|                      |   `hp_sw`{.literal}：为 Compaq                |
|                      | /HP 控制程序在激活/等待模式中生成路径优先权。 |
|                      |   `hds`{.literal}：为                         |
|                      |  Hitachi HDS Modular 存储阵列生成路径优先权。 |
|                      |   默认值为 `const`{.literal}。                |
|                      |   --------------------------------------      |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
+----------------------+-----------------------------------------------+
| `                    | 多路径设备的默认额外功能。现有的唯一功能是    |
| features `{.literal} | `queue_if_no_path`{.literal}，其功能与将      |
|                      | `no_path_retry`{.literal} 设为                |
|                      | `queue`{.literal}                             |
|                      | 一致                                          |
|                      | 。有关使用这个功能可能出现问题的详情，请参考  |
|                      | [第 5.6 节 "有 queue_if_no_path               |
|                      | 功能的问题"](#MPIO_admin-tro                  |
|                      | ubleshoot.html#queueifnopath_issues){.xref}。 |
+----------------------+-----------------------------------------------+
| ` path               |   -----------------------------------         |
| _checker `{.literal} | --------------------------------------------- |
|                      |   指                                          |
|                      | 定用于决定路径状态的默认方法，可能的值包括：  |
|                      |   `r                                          |
|                      | eadsector0`{.literal}：读取该设备的第一扇区。 |
|                      |   `tur`{.literal}：                           |
|                      | 在该设备中执行 `TEST UNIT READY`{.command}。  |
|                      |   `emc_clariion`{.literal}：查询 EM           |
|                      | C Clariion 具体 EVPD 页面 0xCO 以便决定路径。 |
|                      |   `hp_sw`{.literal}：为使用 Ac                |
|                      | tive/Standby 固件的 HP 存储阵列检查路径状态。 |
|                      |   `rdac`{.literal}：                          |
|                      | 为 LSI/Engenio RDAC 存储控制器检查路径状态。  |
|                      |   `direc                                      |
|                      | tio`{.literal}：使用直接 I/O 读取第一个扇区。 |
|                      |   默认值为 `directio`{.literal}。             |
|                      |   -----------------------------------         |
|                      | --------------------------------------------- |
+----------------------+-----------------------------------------------+
| `                    |   -----------------------------------------   |
| failback `{.literal} | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      |   管理路径组群出错切换。                      |
|                      |   `immediate`{.literal} 值指                  |
|                      | 定立即恢复到包含活跃路径的最高级别路径组群。  |
|                      |   `manual`{.literal} 值指定不需要立           |
|                      | 即恢复，只有在操作者干预的情况下会发生恢复。  |
|                      |   `followover`{.literal} 值指定当路径组的第   |
|                      | 一个路径成为活跃路径时应执行自动恢复。这可让  |
|                      | 节点在另一个节点请求故障修复时不会自动恢复。  |
|                      |   大于 0 的数字值指定推迟出错切换，以秒表示。 |
|                      |   默认值为 `manual`{.literal}。               |
|                      |   -----------------------------------------   |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
+----------------------+-----------------------------------------------+
| ` r                  | 指定                                          |
| r_min_io `{.literal} | 切换到当前路径组的下一个路径前路由到该路径的  |
|                      | I/O 请求数。这个设置值用于运行内核为 2.6.31   |
|                      | 之前的系统。使用新版本的系统应使用            |
|                      | `rr_min_io_rq`{.literal}。默认值为 1000。     |
+----------------------+-----------------------------------------------+
| ` rr_m               | 使用 request-based device-mapper-multipath    |
| in_io_rq `{.literal} | 指定                                          |
|                      | 切换到当前路径组的下一个路径前路由到该路径的  |
|                      | I/O                                           |
|                      | 请求数。                                      |
|                      | 这个设置值用于运行当前内核的系统。在使用内核  |
|                      | 2.6.31 版本之前的系统应使用                   |
|                      | `rr_min_io`{.literal}。默认值为 1。           |
+----------------------+-----------------------------------------------+
| ` r                  | 如果将其设为                                  |
| r_weight `{.literal} | `priorities`{.literal}，就不会在调用          |
|                      | `selector`{.literal}                          |
|                      | 选择下一个路径前向路径发送                    |
|                      | `rr_min_io`{.literal} 请求，而是由            |
|                      | `rr_min_io`{.literal}                         |
|                      | 乘以路径优先权决定发送的请求数，即由          |
|                      | `prio`{.literal} 功能决定。如果将其设定为     |
|                      | `uniform`{                                    |
|                      | .literal}，则所有路径都有相同的加权。默认值为 |
|                      | `uniform`{.literal}。                         |
+----------------------+-----------------------------------------------+
| ` no_pa              |   -----------------------                     |
| th_retry `{.literal} | --------------------------------------------- |
|                      |   这个属性的数字值指定系                      |
|                      | 统在禁用队列前应该试图使用失败的路径的次数。  |
|                      |   `fail`{.literal} 值说明立即失败，无需排队。 |
|                      |   `                                           |
|                      | queue`{.literal} 表示固定路径前排队不会停止。 |
|                      |   默认值为 0。                                |
|                      |   -----------------------                     |
|                      | --------------------------------------------- |
+----------------------+-----------------------------------------------+
| ` user_friend        | 如果将其设为                                  |
| ly_names `{.literal} | `yes`{.literal}，即指定该系统应该使用文件     |
|                      | `/etc/multipath/bindings`{.filename}          |
|                      | 为该多路径分配一个持久且唯一的别名，格式为    |
|                      | `mpath`{.literal}*`n`*。如果设定为            |
|                      | `no`{.literal}，即指定该系统应使用 WWID       |
|                      | 作为该多路径的别名。在这两                    |
|                      | 种情况下，您在这里指定的数值将被您在配置文件  |
|                      | `multipaths`{.literal}                        |
|                      | 部分指定的具体设备别名覆盖。默认值为          |
|                      | `no`{.literal}。                              |
+----------------------+-----------------------------------------------+
| ` queue_withou       | 如果将其设定为                                |
| t_daemon `{.literal} | `no`{.literal}，`multipathd`{.command}        |
|                      | 守                                            |
|                      | 护进程将在其关闭时禁用所有设备排队。默认值为  |
|                      | `no`{.literal}。                              |
+----------------------+-----------------------------------------------+
| ` flush_on_          | 如果将其设定为                                |
| last_del `{.literal} | `yes`{.literal}，`multipathd`{.command}       |
|                      | 守护进程将在删除了                            |
|                      | 最后一个到某个设备的路径时禁用查询。默认值为  |
|                      | `no`{.literal}。                              |
+----------------------+-----------------------------------------------+
| `                    | 设定 multipath 可以打开的文件提示符以及       |
|  max_fds `{.literal} | `multipathd`{.literal} 守护进程的最大值。这与 |
|                      | `ulimit -n`{.command}                         |
|                      | 命令效果一致。从红帽企业版 Linux 6.3          |
|                      | 开始，默认值为                                |
|                      | `max`{.literal}，该值将该系统限制到           |
|                      | `/proc/sys/fs/nr_open`{.filena                |
|                      | me}。对其较早的版本，如果没有设定这个值，则使 |
|                      | 用调用进程作为打开文件提示符的最大值，通常为  |
|                      | 1024。安全起见，如果该数值大于                |
|                      | 1024，应将其设定为路径最大值+32。             |
+----------------------+-----------------------------------------------+
| ` checker            | 执行带明确超时设定的 SCSI                     |
| _timeout `{.literal} | 命令的路径检查程序的超时时间。默认值采用      |
|                      | `sys/block/sdx/device/timeout`{.filename}     |
|                      | 中指定的值。                                  |
+----------------------+-----------------------------------------------+
| ` fast_io_           | 在 FC                                         |
| fail_tmo `{.literal} | 远程                                          |
|                      | 端口发现问题后，无法在那个远程端口设备中执行  |
|                      | I/O 前 SCSI 层要等待的时间。默认值应小于      |
|                      | `dev_loss_tmo`{.literal} 值。将其设定为       |
|                      | `off`{.literal}                               |
|                      | 则会禁用超时。默认值由该操作系统决定。        |
+----------------------+-----------------------------------------------+
| ` dev_               | 在 FC                                         |
| loss_tmo `{.literal} | 远程端口发现问题后，到从该系统中删除它之前    |
|                      | SCSI                                          |
|                      | 层                                            |
|                      | 要等待的时间。将其设定为无限，则会将其设定为  |
|                      | 2147483647 秒，或者 68                        |
|                      | 年。默认值由该操作系统决定。                  |
+----------------------+-----------------------------------------------+
| ` hwtable_reg        |   -----------------------------------------   |
| ex_match `{.literal} | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      |   （红帽企业版 Linux 6.3 发行本及之后的版     |
|                      | 本）控制 multipath 如何使用内嵌设备配置整合该 |
|                      | 配置文件 `devices`{.literal} 部分的设备配置。 |
|                      |   `multipath.conf`{.filename} 文件 `devices`  |
|                      | {.literal} 部分中的每个设备配置都可以创建其自 |
|                      | 己的设备配置，也可以修改内嵌设备配置。在红帽  |
|                      | 企业版 Linux 6.3 之前，如果某用户设备配置中的 |
|                      | 销售商、产品以及修订字符串与内嵌设备配置完全  |
|                      | 匹配，则该用户配置中的选项就可以修改内嵌配置  |
|                      | 。否则该用户的设备配置就将被视为一个新配置。  |
|                      |   如                                          |
|                      | 果将 `hwtable_regex_match`{.literal} 设定为   |
|                      | `yes`{.literal}，则使用正则表达式匹配。销售商 |
|                      | 、产品以及修订字符串都是正则表达式。该用户的  |
|                      | 这些选项的设备配置值与内嵌设备配置值匹配。这  |
|                      | 个匹配还可以同样的方式用于实际设备的销售商、  |
|                      | 产品以及修订字符串是否与设备配置字符串匹配以  |
|                      | 便决定为该设备使用哪个配置。如果用户设备配置  |
|                      | 匹配，那么就使用该用配置中的选项修改内嵌配置  |
|                      | 。否则该用户的设备配置就将被视为一个新配置。  |
|                      |   -----------------------------------------   |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
+----------------------+-----------------------------------------------+
| ` retain_attached_hw | （红帽企业版 Linux 6.4                        |
| _handler `{.literal} | 及之后的版本）如果将这个参数设定为            |
|                      | `yes`{.literal}，且 scsi                      |
|                      | 层已为该路径设备附加可硬件句柄，multipath     |
|                      | 将不会强制该设备使用                          |
|                      | `mutipath.conf`{.filename} 文件指定的         |
|                      | `hardware_handler`{.literal}。如果该 scsi     |
|                      | 层没有附加硬件句柄，multipath                 |
|                      | 将继续使用其配置的硬件句柄。默认值为          |
|                      | `no`{.literal}。                              |
+----------------------+-----------------------------------------------+
| ` det                | （红帽企业版 Linux 6.4                        |
| ect_prio `{.literal} | 及之后的版本）如果将这个参数设定为            |
|                      | `yes`{.literal}，multipath                    |
|                      | 将首先检查该设备是否支持                      |
|                      | ALUA，如果支持，则自动为该设备分配            |
|                      | `alua`{.literal} 排序器。如果该设备不支持     |
|                      | ALUA，则按管用方法确定排序器。默认值为        |
|                      | `no`{.literal}。                              |
+----------------------+-----------------------------------------------+
:::
:::
:::