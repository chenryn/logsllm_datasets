### 2.1 Traceroute Measurements and ECN Bit Clearing

Our traceroute measurements indicate that some devices along the path are likely improperly clearing the Explicit Congestion Notification (ECN) bits. We will discuss potential causes for this misbehavior in later sections. It is generally believed that all major operating systems implement ECN functionality correctly.

### 2.2 HTTP Request Analysis

We set the Congestion Experienced (CE) bit on the client's packet containing the HTTP request and any subsequent retransmissions. Consequently, we expect to see an ECN-Echo (ECE) in all traces where the web server responds with an HTTP status message. The analysis of the Congestion Window Reduced (CWR) signal, however, depends on the number of data packets received from the server, as some packets may already be in flight when the server receives the first ECE message. To maximize the number of packets a server sends, we set the TCP Maximum Segment Size (MSS) option to 300 and disable all segmentation and receive offload features in Linux.

### 2.3 ECN Functionality Testing from Multiple Vantage Points

We conducted comprehensive ECN functionality tests from a single vantage point at MIT and performed limited testing from other locations, particularly from non-Internet2 connected networks. Below, we describe the ECN tests of paths from over 125 PlanetLab locations.

### 3.2 Mobile Infrastructure

ECN can be particularly beneficial in wireless environments, where packet loss does not necessarily indicate congestion. To characterize the ECN capabilities and behavior of web server-side wireless-specific infrastructure, we obtained a population of servers dedicated to hosting content for mobile devices, such as cellular smartphones. We note that content provided from a web server to a client is often tailored to the properties of the client device, especially for mobile devices. Additionally, mobile devices are frequently redirected to a different, dedicated server for mobile content. We leveraged this common practice to obtain a population of servers dedicated to serving mobile content for subsequent ECN analysis.

For all domains in the Alexa Top 1 Million list, we issued five different HTTP GET requests, each with a distinct "User-Agent" HTTP header string. The user agent strings mimicked a desktop and four different mobile phones. If the queried web server returned an HTTP 3xx redirect to a location different from the desktop query for any of the phone queries, we recorded the location. For example, a query from a desktop to `www.bloomberg.com` was not redirected, while a query from a phone user agent was redirected to `mobile.bloomberg.com`, which corresponds to a different IP address.

Using this technique, we found approximately 82,000 sites performing HTTP redirection based on the user agent. Of these, 7,422 redirected to distinct mobile infrastructure, i.e., to a URL that resolved to a different IP address. We used this population for the analysis of mobile websites.

### 3.3 Client-Side ECN Support

Understanding client-side ECN support is crucial, as clients represent "eyeballs" in the network, i.e., humans sensitive to congestion. However, prior work has primarily focused on server-side ECN, with little attention given to client-side support. Maier et al. observed a negligible number of hosts initiating ECN-capable TCP in a large residential broadband network [19]. This lack of ECN is unsurprising, as operating systems that support ECN, with typical default settings, did not and still do not negotiate ECN for outgoing connections. Since passive measurements provide only a limited view into client-side ECN capabilities, we developed a new hybrid passive/active method.

Our technique measures a large section of two peer-to-peer (P2P) networks, where nodes act as both clients and servers, to capture the ECN behavior of a population of Internet clients. We built BitTorrent and Gnutella crawlers on an ECN-enabled measurement host under our control. Our BitTorrent crawler discovers torrents via aggregated RSS feeds, connects to the torrent's tracker(s), and obtains a list of torrent peer IP addresses. The crawler then attempts a BitTorrent handshake with each peer, initiating ECN and sending data segments without transferring content. Simultaneously, we capture all packets for analysis. For Gnutella, we use an existing crawler [27].

Our crawlers negotiate ECN for all connections to remote nodes in the P2P network, the majority of which reside in residential networks. By observing the behavior of the negotiation and subsequent response to synthetic ECN signals introduced using the aforementioned iptables rules (§3.1), we gain insight into the prevalence of ECN on an end-to-end basis in the Internet.

### 3.4 End-to-End ECN Path Testing

If a router does not have any features turned on that leverage the ECN field, it should not modify the ECN field in any way. From conversations with network operators, none reported turning on ECN markings. However, we used traceroute to identify links where the ECN bits in the IP header are being modified. ICMP TTL-exceeded messages include the first 28 bytes of the expired packet, known as the ICMP "quotation." This quotation provides path-level visibility into the ECN field. We set the ECT code point in a series of tests from our PlanetLab nodes to the web server populations described above. While most ICMP quotations are reliable and accurate, we found some small evidence of quotation errors, similar to [20].

Filtering differences raise the question of which type of probe (ICMP, UDP, TCP-SYN, TCP-ACK) should test a path. We did not find any apparent differences in how routers responded to packets with the ECN field set in a comparison of probe types to a 10,000-node sample set. Therefore, we used Scamper's [18] ICMP-paris traceroute mode [3], even though ICMP packets would not normally be ECN marked, as it was likely to discover more hops.

### 4. Results

#### 4.1 Server Results

Table 1 provides our results of ECN testing to the web server populations in September 2011. Where applicable, we include results from previous studies in 2004 [21] and 2008 [17] for comparison purposes. The number of servers that negotiated ECN rose to between 14% and 17% in all web server populations. A possible ECN SYN blackhole existed in less than 0.6% of tests. However, this may overestimate the percentage due to false positives if a lossy link dropped the ECN-enabled SYN packets but not the subsequent SYNs without ECN. Definitively identifying ECN blackholes would require repeated probing of the same server with both ECN and non-ECN SYNs.

The rest of the table rows report various ways in which the ECN congestion feedback loop can be broken. We conservatively report on not receiving a CWR in response to ECE only if we receive more than 10 data packets from the server, i.e., a subsequent flight of packets after the server must have received ECE notifications. The variation across different populations is striking: the ECN field in the IP header on flows to and from university networks is being cleared 25.2% and 28.5% of the time, respectively. This is far higher than the comparable percentages of paths to Alexa web hosts—3.8% outbound and 11.3% inbound.

In limited testing from different vantage points, the percentages of ECN-capable servers across target populations remained consistent. The results characterizing the broken ECN feedback loop showed more variation, as expected, given that these results depend on the network path between our measurement vantage points and the target servers. Our traceroute measurements below shed additional light on these variations.

#### 4.2 Client-Side Results

Table 2 shows that fewer clients negotiated ECN on incoming connections, ranging from 4.2% to less than 0.1%, depending on the population. To better understand this discrepancy, we employed stack fingerprinting on the TCP SYN/ACK packets [5] to infer the operating system of the client. Table 3 shows a striking difference between the ECN-capable and non-ECN-capable populations: the vast majority of ECN-capable hosts are Linux (88.4%).

#### 4.3 End-to-End ECN Paths

We collected two sets of traces to determine where on the path the ECT codepoint was cleared and related aspects. The first trace set includes one randomly chosen destination from each of the globally routable BGP prefixes (approximately 367,000) to touch all origin ASs and be broadly representative of Internet paths. The second trace set represents "popular" destinations, using the 542,000 unique addresses from the Alexa Top 1 Million [1]. For the prefix-traces, we used 127 PlanetLab nodes from 29 countries and 5 continents to initiate the traces. For the website-traces, we used some additional nodes, totaling 140. Each PlanetLab node executed a trace to each of the destinations, resulting in 117 million traces collected.

**Percent of Traces Which Passed the ECT Codepoint**

The location of any devices that modify the ECT codepoint relative to our tracing vantage points is important. At one extreme, ECT is cleared on 100% of the traces originating from particular PlanetLab nodes due to all traces passing through a misbehaving device at the first or second hop. Traces from these nodes are not reflective of the whole Internet but are relevant for the clients at that location.

ICMP filtering behavior also impacts our macro analysis. For a few vantage points, the vast majority of their traces are blocked after a few hops, and for the hops that did respond, the ECT codepoint remained set; thus, these traces could be grouped with those that preserved the codepoint, though in reality, farther along the path, the codepoint might have been cleared.

Across all traces, the ECT codepoint is unmodified for 83% and 82% of the popular website and prefix traces, respectively. Restricting the analysis to those traces where all hops respond, including the destinations, does not qualitatively affect our results, yielding 84% and 80%, respectively. To remove the impact of nodes where the ECT codepoint is cleared on almost all of the traces, if we omit the 20% of nodes that had the fewest traces where the ECT remained set, then for each of the remaining nodes, the ECT codepoint remained set on 94% to 98% of the website-traces and 90% to 99% of the prefix-traces.

**Location on the Path Where the ECT Codepoint Is Cleared**

When the ECT codepoint is modified, we wish to attribute such misbehavior to an interface hop on the path. However, there is ambiguity in identifying the responsible device. For example, while sending probes with ECT set, suppose interface hops 1-4 respond with ICMP TTL exceeded quotations.