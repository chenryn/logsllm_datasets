next attack iteration. This will signiﬁcantly reduce the overall
byte rate of the attack.
Avoiding Deoptimization. To overcome this challenge, we
adapt the speculative hiding technique previously used in na-
tive code [9, 18, 36, 40], to the context of the browser, and use
branch misprediction to hide JavaScript type-mismatch events.
Speciﬁcally, we wrap the attack code in a conditional block
(Line 32 of Listing 2). The condition checks that the object
index is less than the value of the ﬁeld f0 of the malicious
object, which we have previously set to 1 (Line 12). Hence, the
attack code is only executed architecturally when the index is
zero and the refered object is Uint8Array. However, during
the attack stage, the branch predictor mispredicts the condition
as true, inducing a speculative execution of the entire type
confusion attack code, including the type check. Moreover,
because evaluating the condition depends on the value of
f0, which has been evicted from the cache (Line 25), the
processor cannot detect the misprediction until after the attack
completes. When the procesor detects the misprediction, it
reverts any changes to the architectural state resulting from
executing Lines 32–37, and proceeds to Line 38. In this case,
the type mismatch only happens transiently under speculation
and is never committed to the CPU’s architectural state.
Thus, Chrome is never alerted to the mismatch and does not
deoptimize the code in Listing 1 and Listing 2.
D. Overcoming [C4]: Obtaining Deep Speculation via L3
Evictions
The attack described in Listing 2 requires a malicious
object of type AttackerClass, where the attacker can
evict malObject’s type and f0 ﬁeld from the cache
while keeping ﬁelds f5–f9 inside the cache. The cache line
boundary lies anywhere between f0 and f5 (see Figure 3). We
now describe our technique for ﬁnding a malicious object at
the desired cache layout, as well as how to ﬂush its type from
the cache. We ﬁrst ﬁnd eviction sets for all of the LLC sets
and then use them to locate an appropriate malicious object
and evict its type (Line 1).
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
LLCEvictionSets = GenerateLLCEvictionSets();
for(let i=64; i<128; i++){
candidate = objectList[i];
for(evictionSet in LLCEvictionSets){
// cache f0
access(candidate.f0);
evictionSet.evict();
let m = isEvicted(candidate.f0);
access(candidate.f5);
evictionSet.evict();
let h = isEvicted(candidate.f5);
if(m && !h){
// cache f5
malIndex = i;
break;
} } }
Listing 3: Finding an AttackerClass whose memory
layout straddles two cache lines.
Use of Memory Compaction. We recall Lines 3–6 in
Listing 2, which trigger Chrome’s garbage collection after each
allocation of an AttackerClass object. As a side effect of
garbage collection, Chrome reallocates AttackerClass ob-
jects, compacting them to have a 4 B aligned contiguous mem-
ory layout. Next, as the size of each AttackerClass object
is 52 B, the continuous memory layout of AttackerClass
objects ensures that there exists an object whose f0 and f5
straddle two 64 B cache lines.
Finding a Split Object and a Corresponding Eviction
Set. Listing 3 shows the code for identifying an appropriate
malicious object and a matching eviction set that evicts the
object type. The code ﬁrst generates eviction sets for all of the
LLC’s sets, using the code of Vila et al. [73] (Line 1) with the
findall setting. Empirically, this results in obtaining 99%
of the eviction sets, which is sufﬁcient to run our attack.
Listing 3 then tests each of the AttackerClass objects
generated in Line 5 of Listing 2 to see if any has the desired
layout. For each candidate, the test iterates over all of the
eviction sets (Line 5), testing whether the eviction set evicts
the candidate’s f0 but not its f5 ﬁeld. When an appropriate
AttackerClass object is found, the code records its index
in malIndex (Line 13), to be used in the attack of Listing 2.
Eviction Test.
Testing whether a ﬁeld has been evicted is
done by measuring the time to access it. However, as part
of hardening the browser against microarchitectural attacks,
Chrome has reduced the resolution of its timer API [52].
Thus, instead of using performance.now(), we take the
approach of Schwarz et al. [60], and implement a counting
web worker thread using a SharedArrayBuffer. We note
that following the discovery of Spectre [4], Chrome disabled
the SharedArrayBuffer API [4], but ironically re-enabled
it after strict site isolation was deployed.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:21:13 UTC from IEEE Xplore.  Restrictions apply. 
8706
typef0f5f6f7f8f9propertiesint_propertiesThe Need For LLC Eviction. Rather than using LLC eviction
sets, leaky.page [20] (the Google PoC) uses L1 evictions.
While constructing L1 eviction sets is far simpler and is more
reliable than constructing LLC eviction sets, we have to resort
to using the LLC. Speciﬁcally, we observe that if we only evict
malObject.f0 from the L1 cache but not from the LLC,
our attack consistently fails. We believe that the reason is the
length of the speculation window (the number of instructions
executed before the processor detects mis-speculation). When
the ﬁeld malObject.f0 is only evicted from the L1 cache,
the processor retrieves it from the L2 cache within about 10
cycles. When the ﬁeld is evicted from the LLC, it is retrieved
from the main memory, taking over 100 cycles. We conjecture
that our attack needs to speculatively execute more instructions
than ﬁt within the speculation window provided by L1 misses,
requiring the longer, more complex, LLC misses.
E. End-to-End Attack Performance
So far, we have described a combination of techniques
that enable an attacker’s webpage to recover the contents of
any address in its rendering process. We now evaluate the
effectiveness of our techniques across several generations of
processors, including CPUs made by Intel, AMD, and Apple.
Attack Setup.
On Intel and Apple processors, we run
Spook.js on unmodiﬁed Chrome 89.0.4389.114. For our
benchmark, we initialize a 10 KB memory region with a
known (random) content and then use Spook.js to leak it.
Eviction Set Based Results.
Table I shows a summary
of our ﬁndings, averaging over 20 attack attempts. As can
be seen, Spook.js leaks 500 B/sec on Intel processors ranging
from the 6th to the 9th generation, while maintaining above
96% accuracy. On the Apple M1, Spook.js achieves a leakage
rate of 450 B/sec with 99% accuracy.
Processor
Architecture
Eviction Method
Leakage
Apple M1
Intel i7 6700K
Intel i7 7600U
Intel i5 8250U
Intel i7 8559U
Intel i9 9900K
M1
Skylake
Kaby Lake
Kaby Lake R
Coffee Lake
Coffee Lake R
AMD TR 1800X
AMD R5 4500U
AMD R7 5800X
Zen 1
Zen 2
Zen 3
Eviction Sets
Eviction Sets
Eviction Sets
Eviction Sets
Eviction Sets
Eviction Sets
clﬂush
clﬂush
clﬂush
451 B/s
533 B/s
504 B/s
386 B/s
579 B/s
488 B/s
591 B/s
590 B/s
604 B/s
Error
0.99%
0.32%
0.97%
3.93%
1.84%
3.76%
0.02%
0.06%
0.08%
Table I: Spook.js performance across different architectures.
Failing to Evict. Unfortunately, on AMD’s Zen architecture,
we could not construct LLC eviction sets. As Spook.js requires
the larger speculation window offered by LLC eviction, we
were unable to run end-to-end Spook.js experiments on AMD
systems. To evaluate the core speculative type confusion attack
without constructing eviction sets, we instrumented V8 to
expose the clflush instruction. As Table I shows, Spook.js
achieves a rate of around 500 B/sec, demonstrating that if an
efﬁcient LLC eviction mechanism is found, Spook.js will be
applicable to AMD. We leave the development of such eviction
techniques to future work.
Figure 4: (top) Example of a victim webpage. (bottom) Leak-
age of parts of the victim webpage’s text.
V. ATTACK SCENARIOS
In this section, we turn our attention to the implications
of Spook.js. We investigate multiple real-world scenarios in
which the attack retrieves secret or sensitive information.
Experimental Setup. We perform all of the experiments in
this section using a ThinkPad X1 laptop equipped with an Intel
i7-7600U CPU and running Ubuntu 18.04. Next, unless stated
otherwise, we use an unmodiﬁed Chrome version 89.0.4389.
Finally, we leave all of Chrome’s settings in their default
conﬁguration with all default countermeasures against side-
channel attacks enabled.
Obtaining Consolidation.
the results from
Section IV-A, where Chrome consolidates websites into the
same renderer process based on their eTLD+1 domains. More
speciﬁcally, as noted in Section IV-A, Chrome will consolidate
websites into the same renderer process either naturally due to
tab pressure (33 tabs for 16GB machine) or due to the attacker
opening the target page using the window.open API call.
We recall
A. Website Identiﬁcation
In our ﬁrst scenario, we assume the attacker created a
malicious page containing Spook.js code on a public hosting
service. The attacker further managed to convince the victim
to open an unknown page from the same hosting service, e.g.,
the victim opens their personal page. While the contents of
most of the pages on the public hosting service are publicly
accessible, the information about which pages the victim has
open is private and should not be accessible to the attacker.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:21:13 UTC from IEEE Xplore.  Restrictions apply. 
9707
Attack Setup.
To demonstrate how Spook.js violates the
victim’s privacy, we perform the attack on bitbucket.io, a
Git-based hosting service. To mount our attack, we hosted
an attacker webpage with the Spook.js code on bitbucket.io.
We also created three sample personal pages on bitbucket.io,
see Figure 4 (top). Following Bitbucket’s naming conven-
tion, the URLs of the four pages follow the pattern https:
//username.bitbucket.io/, making these eligible for consolida-
tion. The ground truth usernames for our three sample personal
pages were {spectrevictim, lessknownattacker,
knownattacker}.
Figure 6: (top) Contact information page displayed of the
university website, edited to show anonymized information.
(bottom) Leakage of contact information using Spook.js.
Figure 5: Leakage of currently open bitbucket.io subdomains.
The parts corresponding to the URLs are highlighted.
Experimental Results.
After opening the four websites
in four tabs, we consolidated all of the Bitbucket pages in
one renderer process using the tab-pressure technique from
Section IV-A. We then used Spook.js to leak the memory space
of the renderer process. Inspecting the result, we recovered a
list of the URLs for the tabs being rendered; see Figure 5.
While the contents of our sample victim pages are public, the
list of bitbucket.io websites simultaneously viewed by the user
is private and should not be accessible to a malicious page
hosted on bitbucket.io. Finally, we achieved similar results
using window.open instead of tab pressure.
B. Recovering Sensitive DOM Information
In the second scenario, we consider a protected subdomain,
which presents private data to an authenticated user. As an
example, we exploited the structure of the website of our
university, which at the time of writing hosts its main page,
single sign-on (SSO) page, and internal portal page on the
same eTLD+1 domain as personal webpages.
Attack Setup.
Coordinating with the University’s IT
department, we hosted code performing Spook.js on a personal
webpage (e.g., https://web.dpt.example.edu/∼user/).With the
author’s account
logged in, we visited three pages in the
internal human resources portal, https://portal.example.edu/,
on separate tabs. Each page contained the author’s contact
information and direct deposit account. See Figure 6 (top) and
Figure 7 (top). (To protect the author’s privacy, we edited the
local copy of the DOM before mounting the attack.)
Experimental Results. After opening the three tabs, we also
opened the page hosting Spook.js in the same window. Fol-
lowing its eTLD+1 consolidation policy, Chrome consolidated
all four tabs into the same address space, allowing us to read
Figure 7: (top) The direct deposit settings page of the univer-
sity website, edited to show anonymized information. (bottom)
Leakage of bank account and routing number.
sensitive values directly from the process’s address space. See
Figure 6 (bottom) and Figure 7 (bottom).
C. Attacking Credential Managers
We now demonstrate the security implications of Spook.js
on popular credential managers, which automatically populate
the login credentials associated with a website, often without
any user interaction. Moreover, we show that credentials
can be recovered even without the user submitting them by
pressing the login (or any other) button, as merely populating
the credentials into their corresponding ﬁelds brings them into
the address space of the rendering process.
Attacking Chrome. We use the previous two-tab setup
where the login page (https://weblogin.example.edu/), and the
internal attacker page (https://web.dpt.example.edu/∼user/) are
hosted by the university and rendered by the same process. We
assume that the credentials for https://weblogin.example.edu/
are already saved with Chrome’s password manager, and it
populates them as shown in Figure 8 (top). The bottom part
of the ﬁgure shows Spook.js recovering the auto-populated
credentials without requiring any user action.
Attacking LastPass. Next, we used a similar setup, but this
time with LastPass version 4.69.0 to autoﬁll the passwords
(instead of Chrome’s password manager). In addition to ob-
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:21:13 UTC from IEEE Xplore.  Restrictions apply. 
10708
Figure 8: (top) Credential autoﬁll by Chrome’s password
manager into the university’s login page. (bottom) Leaked
credentials using Spook.js.
Figure 9: (top) Multiple accounts managed by LastPass. (bot-
tom) Using Spook.js to leak the list of associated accounts.
taining similar password leaking results as in Figure 8, we
were also able to get multiple account usernames associated
with the website. More speciﬁcally, Figure 9 (top) shows
multiple credentials that we associated with university’s login
site. As the list of accounts resides in the address space of
the rendering process, it can be recovered using Spook.js. See
Figure 9 (bottom).
One-Click Credential Recovery. We take the previous attack
a step further, showing that credentials can sometimes be re-
covered as soon as the victim opened our malicious webpage,
without the need to assume any simultaneously opened tabs.
This was made possible by two observations; ﬁrstly, while the
pages of most of the university’s authenticated portals refused
to load inside an iframe (presumably due to security reasons),
this was not the case for the login page. Secondly, while
Chrome’s built-in password manager required the user to click
inside the iframe to ﬁll their credentials, LastPass autoﬁlled
Figure 10: Leaked credentials from an invisible iframe.