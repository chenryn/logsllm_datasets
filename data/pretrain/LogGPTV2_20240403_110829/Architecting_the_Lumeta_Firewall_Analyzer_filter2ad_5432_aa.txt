title:Architecting the Lumeta Firewall Analyzer
author:Avishai Wool
USENIX Association
Proceedings of the
10th USENIX Security
Symposium
Washington, D.C., USA
August 13–17, 2001
© 2001 by The USENIX Association
Phone: 1 510 528 8649
FAX: 1 510 548 5738
THE ADVANCED COMPUTING SYSTEMS ASSOCIATION
All Rights Reserved
Email: PI:EMAIL
For more information about the USENIX Association:
WWW: http://www.usenix.org
Rights to individual papers remain with the author or the author's employer.
 Permission is granted for noncommercial reproduction of the work for educational or research purposes.
This copyright notice must be included in the reproduced paper. USENIX acknowledges all trademarks herein.
Architecting the Lumeta Firewall Analyzer
Avishai Wool
Lumeta Corporation,
220 Davidson Ave, Somerset NJ 08873
E-mail: yash@acm.org.
Abstract
the protection that
Practically every corporation that is connected to the In-
ternet has at least one ﬁrewall, and often many more.
However,
these ﬁrewalls provide
is only as good as the policy they are conﬁgured to
implement. Therefore,
testing, auditing, or reverse-
engineering existing ﬁrewall conﬁgurations should be
important components of every corporation’s network
security practice. Unfortunately, this is easier said than
done. Firewall conﬁguration ﬁles are written in no-
toriously hard to read languages, using vendor-speciﬁc
GUIs. A tool that is sorely missing in the arsenal of ﬁre-
wall administrators and auditors is one that will allow
them to analyze the policy on a ﬁrewall.
The ﬁrst passive, analytical, ﬁrewall analysis system
was the Fang prototype system [MWZ00]. This was
the starting point for the new Lumeta Firewall Analyzer
(LFA) system. LFA improves upon Fang in many ways.
The most signiﬁcant improvements are that human in-
teraction is limited to providing the ﬁrewall conﬁgura-
tion, and that LFA automatically issues the “interesting”
queries and displays the outputs of all of them, in a way
that highlights the risks without cluttering the high-level
view. This solves a major usability problem we found
with Fang, namely, that users do not know which queries
to issue.
The input to the LFA consists of the ﬁrewall’s routing
table, and the ﬁrewall’s conﬁguration ﬁles. The LFA
parses these various low-level, vendor-speciﬁc, ﬁles, and
simulates the ﬁrewall’s behavior against all the packets
it could possibly receive. The simulation is done com-
pletely ofﬂine, without sending any packets. The admin-
istrator gets a comprehensive report showing which types
of trafﬁc the ﬁrewall allows to enter from the Internet into
the customer’s intranet and which types of trafﬁc are al-
lowed out of the intranet. The LFA’s report is presented
as a set of explicit web pages, which are rich with links
and cross references to further detail (allowing for easy
drill-down). This paper describes the design and archi-
tecture of the LFA.
1 Introduction
1.1 Background
Firewalls are the cornerstones of corporate intranet secu-
rity. Once a ﬁrewall is acquired, a security/systems ad-
ministrator has to conﬁgure and manage it to realize an
appropriate security policy for the particular needs of the
company. This is a crucial task; quoting [RGR97]: “The
single most important factor of your ﬁrewall’s security is
how you conﬁgure it”.
Even understanding the deployed ﬁrewall policy can be
a daunting task. Administrators today have no easy way
of answering questions such as “can I telnet from here
to there?”, or “from which machines can our DMZ be
reached, and with which services?”, or “what will be the
effect of adding this rule to the ﬁrewall?”. These are ba-
sic questions that administrators need to answer regularly
in order to perform their jobs, and sometimes more im-
portantly, in order to explain the policy and its conse-
quences to their management. There are several reasons
why this task is difﬁcult, for instance:
(i) Firewall conﬁguration languages tend to be arcane,
very low level, and highly vendor speciﬁc.
(ii) Vendor-supplied GUIs require their users to click
through several windows in order to fully understand
even a single rule: at a minimum, the user needs to check
the IP addresses of the source and destination ﬁelds, and
the protocols and ports underlying the service ﬁeld.
(iii) Firewall rule-bases are sensitive to rule order. Sev-
eral rules may match a particular packet, and usually the
ﬁrst matching rule is applied – so changing the rule order,
or inserting a correct rule in the wrong place, may lead
to unexpected behavior and possible security breaches.
(iv) Alternating PASS and DROP rules create rule-bases
that have complex interactions between different rules.
What policy such a rule-base is enforcing is hard for hu-
mans to comprehend when there are more than a handful
of rules.
A tool that is sorely missing in the arsenal of ﬁrewall ad-
ministrators and auditors is one that will allow them to
analyze, test, debug, or reverse-engineer the policy on a
ﬁrewall. Such a tool needs to be exhaustive in its cover-
age, be high level, and be convenient to use. This paper
describes the evolution and architecture of the Lumeta
Firewall Analyzer (LFA), a second generation system
that addresses the analysis needs of ﬁrewall administra-
tors, security consultants, and auditors.
1.2 The Fang System
The ﬁrst passive, analytical, ﬁrewall analysis system was
the Fang prototype system [MWZ00]. Fang read all
the vendor-speciﬁc conﬁguration ﬁles, and built an in-
ternal representation of the implied policy. It provided a
graphical user interface (GUI) for posing queries of the
form “does the policy allow service S from A to B?”.
Fang would then simulate the ﬁrewall’s policy against
the query, and display the results back onto the user’s
screen.
Before Fang could be used, it needed to have an instanti-
ated model of the ﬁrewall connectivity, which contained
details like how many interfaces the ﬁrewall has, which
subnets are connected to each interface, and where the
Internet is situated with respect to the ﬁrewall. Therefore,
before querying the ﬁrewall policy, a Fang user needed
to write a ﬁrewall connectivity description ﬁle. The lan-
guage used to describe the ﬁrewall connectivity was de-
rived from the Firmato MDL language [BMNW99].
The core of Fang’s query engine was a combination of
a graph algorithm and a rule-base simulator. It took as
input a user query consisting of source and destination
host-groups (arbitrary sets of IP addresses, up to a wild-
card “all possible IP addresses”), and a service group
(up to a wildcard “all possible services”). It would then
simulate the behavior of the ﬁrewall’s rule-base on all
the packets described by the query, and compute which
portions of the original query would manage to reach
from source to destination: Perhaps only a subset of the
queried services are allowed, and only between subsets
of the speciﬁed source and destination host-groups.
1.3 Contributions
To test Fang’s usability and the value it provided, we col-
lected feedback from beta testers. This feedback raised
issues we needed to address. The new LFA architecture
introduces several new features that address these issues:
(cid:15) The user does not need to write the ﬁrewall con-
nectivity ﬁle any more. LFA has a new front-end
module that takes a formatted routing table and au-
tomatically creates the ﬁrewall connectivity ﬁle.
(cid:15) Using a GUI as an input mechanism turned out to be
difﬁcult for users. Instead, LFA is now a batch pro-
cess, that simulates the ﬁrewall policy against prac-
tically every possible packet.
(cid:15) A crucial part of the batch processing is the auto-
matic selection of queries. Our choice of queries
needs to ensure comprehensive coverage, to high-
light any risks, and to make sense to users without
overwhelming them with minutiae.
(cid:15) The LFA output is now formatted as a collection of
web pages (HTML). This format gives us the ability
to present the output at many levels of abstraction
and from multiple viewpoints, allowing easy drill-
down to details without cluttering the high level
view.
(cid:15) We needed to support more ﬁrewall vendors. For
this purpose, LFA now uses an intermediate ﬁre-
wall conﬁguration language, to which we convert
the various vendors’ conﬁgurations.
Organization: In Section 2 we describe the components
of the LFA architecture and the design decisions that led
us to this architecture. In Section 3 we discuss some re-
lated work. In Section 4 we provide an annotated exam-
ple of how the LFA works. We conclude in Section 5.
2 The LFA Architecture
The main contribution of the Fang prototype was its core
query engine. The combination of its internal ﬁrewall
connectivity model, data structures, and efﬁcient algo-
rithms, demonstrated that it is feasible to analytically
simulate a ﬁrewall’s policy ofﬂine. However, from the
beta-testers’ feedback we got, it became apparent that
the software architecture needed to be revisited in order
to take the core technology from a prototype into a prod-
uct. In the next sections we describe the problems that
we identiﬁed in the Fang prototype, and their solutions
within the LFA.
2.1 Describing the Firewall Connectivity
As we mentioned above, before using Fang the user
needed to write a ﬁrewall connectivity description ﬁle,
using the Firmato MDL language [BMNW99]. For ev-
ery network interface card (NIC) on the ﬁrewall, the ﬁre-
wall connectivity description ﬁle contains a list of IP ad-
dress ranges that are located behind that NIC. These lists
are required to be disjoint: each IP address is allowed
to appear only once. This requirement is fundamental
to the simulation process: For every possible packet,
Fang needs to know which ﬁrewall interfaces the packet
would cross on its path from source to destination—and
thereby, which ﬁrewall rule-bases would be applied to it.
The need to write a ﬁrewall connectivity ﬁle caused two
problems. First, the user had to learn the syntax and se-
mantics of the MDL language, which takes time and ef-
fort. Second, and more important, the information that is
needed to describe the ﬁrewall connectivity is not readily
available to ﬁrewall administrators in a suitable format.
This information is typically only encoded in the ﬁre-
wall’s routing table. However, routing table entries are
usually not disjoint: It is common to have many overlap-
ping routing table entries that cover the same IP address.
The semantics of a routing table determine which route
entry is used for a given IP address: it is the most speciﬁc
one, i.e., the entry for the smallest subnet that contains
the given IP address is the one that determines the route
to that IP address. The task of accessing the routing ta-
ble, and manually converting it into lists of disjoint IP
address ranges, turned out to be difﬁcult and error prone.
To solve both problems,
the Lumeta Firewall Ana-
lyzer introduced a a new front-end module, called
route2hos, that mechanically converts a routing table
into a Firmato MDL ﬁrewall connectivity ﬁle. All that is
required of the user is to provide the ﬁrewall’s routing ta-
ble (in the form of the output of the netstat command
on Unix systems).
The route2hos module uses an engine that imple-
ments the routing table semantics. In other words, for
a given IP address, it is able to determine over which
NIC a packet with this address as its destination would
be routed. By judiciously using this engine against the
subnets listed in the routing table, route2hos is able
to create the disjoint lists of IP address ranges that the
Fang query engine requires. The output of route2hos
is the ﬁrewall connectivity description ﬁle, in the MDL
language.
As part of the processing done by route2hos, it pro-
duces deﬁnitions for two special host groups, called In-
side and Outside. The Outside host group consists of all
the IP addresses that get routed via the default interface,
according to the ﬁrewall’s routing table. This host group
typically includes the Internet, and any of the corpora-
tion’s subnets that are external to the ﬁrewall. The Inside
host group is everything else. These two host groups are
later used in the query processing (see below).
2.2 What to Query?
The Fang prototype had a graphical user interface which
allowed the user to enter queries of their choice. How-
ever, during beta testing we discovered that users do not
know which queries they need to try. They were not sure
which services are risky, nor which host groups needed
to be checked. Furthermore, on a reasonably conﬁgured
ﬁrewall, most queries return uninteresting results, e.g.:
“is telnet allowed into my network?”; “No”; etc. This
causes users to lose interest and leads to a partial simu-
lation of the policy. Most importantly, the queries that
are likely to ﬁnd the problems in the rule-base are often
precisely those queries that the user does not know to try.
To solve these problems, the Lumeta Firewall Analyzer
takes the burden of choosing the queries off the user’s
shoulders. It does this by querying everything. In fact,
we completely eliminated the GUI as an input mech-
anism in the LFA, and replaced it by a batch process,
which repeatedly calls Fang’s query engine.
Clearly, it is impossible to simulate all the packet com-
binations one by one. Enumerating all the possible com-
binations of source and destination IP addresses (32 bits
each), protocol (8 bits), and source and destination port
numbers (16 bits each), gives rise to an enumeration
space of  .
There are two facts that allow LFA to circumvent this
combinatorial explosion: (i) the Fang query engine pro-
cesses aggregated queries very efﬁciently, and (ii) after
the route2hos processing the LFA knows which IP
addresses are external to the ﬁrewall (this is the Outside
host group). Combining these two facts, LFA can issue
the query “list the types of trafﬁc that can enter from the
Outside to the Inside using any service”. We denote such
a query by
Outside ! Inside : (cid:3):
The result is a list of (src, dest, srv) tuples de-
scribing the allowed incoming trafﬁc, in which the IP ad-
dresses of src are contained in the Outside host group,
the IP addresses of dest are contained in Inside, and
the service is srv. Similarly, LFA can make the outgo-
ing query “Inside ! Outside : (cid:3)”, switching the roles
of Inside and Outside.
After experimenting with the approach we just outlined,
we discovered that users had difﬁculty in interpreting its
results. For instance, suppose the ﬁrewall has a rather
typical rule of the form “from anywhere, to my-server,
allow any service”. The query “Outside ! Inside : (cid:3)”
would produce the response “Outside ! my-server :
(cid:3)”. This response does not convey to the user that “(cid:3)”
(any service) includes quite a few high-risk services that
should probably not be allowed—if this fact was obvi-
ous to the user, he would not have written such a rule in
the ﬁrst place! Users found the results much easier to in-
terpret if instead of presenting a blanket response saying
“any service” is allowed, we presented them with a long
list of individual services that are allowed.
Therefore, the LFA in fact does not make the query
“Outside ! Inside : (cid:3)”. Instead it issues a set of fo-
cused queries: “Outside ! Inside : dns”; “Outside !
Inside : netbios”; etc., and similarly for outgoing traf-
ﬁc. The list of services that are queried in this way is
made of two parts: a list of well known services, plus a
list containing every speciﬁc service that appears in some
rule on the ﬁrewall. We have found that querying in-
dividual services this way makes the query results, and
the risks they entail, much more explicit. The user has
two possible cues indicating risk: (1) If a rule is wide
open, there will be a very long list of individual services
appearing in the query results (more services == more
risk); (2) The user will see services he may either recog-
nize as dangerous, or not recognize at all (making them
worrisome).
Note, however, that by querying individual services this