.i errno
set to
.b eagain
(and none of the operations in
.i sops
is performed).
otherwise,
.i semncnt
(the counter of threads waiting for this semaphore's value to increase)
is incremented by one and the thread sleeps until
one of the following occurs:
.ip \(bu 2
.i semval
becomes greater than or equal to the absolute value of
.ir sem_op :
the operation now proceeds, as described above.
.ip \(bu
the semaphore set is removed from the system:
.br semop ()
fails, with
.i errno
set to
.br eidrm .
.ip \(bu
the calling thread catches a signal:
the value of
.i semncnt
is decremented and
.br semop ()
fails, with
.i errno
set to
.br eintr .
.pp
on successful completion, the
.i sempid
value for each semaphore specified in the array pointed to by
.i sops
is set to the caller's process id.
in addition, the
.i sem_otime
.\" and
.\" .i sem_ctime
is set to the current time.
.ss semtimedop()
.br semtimedop ()
behaves identically to
.br semop ()
except that in those cases where the calling thread would sleep,
the duration of that sleep is limited by the amount of elapsed
time specified by the
.i timespec
structure whose address is passed in the
.i timeout
argument.
(this sleep interval will be rounded up to the system clock granularity,
and kernel scheduling delays mean that the interval
may overrun by a small amount.)
if the specified time limit has been reached,
.br semtimedop ()
fails with
.i errno
set to
.b eagain
(and none of the operations in
.i sops
is performed).
if the
.i timeout
argument is null,
then
.br semtimedop ()
behaves exactly like
.br semop ().
.pp
note that if
.br semtimedop ()
is interrupted by a signal, causing the call to fail with the error
.br eintr ,
the contents of
.ir timeout
are left unchanged.
.sh return value
on success,
.br semop ()
and
.br semtimedop ()
return 0.
on failure, they return \-1, and set
.i errno
to indicate the error.
.sh errors
.tp
.b e2big
the argument
.i nsops
is greater than
.br semopm ,
the maximum number of operations allowed per system
call.
.tp
.b eacces
the calling process does not have the permissions required
to perform the specified semaphore operations,
and does not have the
.b cap_ipc_owner
capability in the user namespace that governs its ipc namespace.
.tp
.b eagain
an operation could not proceed immediately and either
.b ipc_nowait
was specified in
.i sem_flg
or the time limit specified in
.i timeout
expired.
.tp
.b efault
an address specified in either the
.i sops
or the
.i timeout
argument isn't accessible.
.tp
.b efbig
for some operation the value of
.i sem_num
is less than 0 or greater than or equal to the number
of semaphores in the set.
.tp
.b eidrm
the semaphore set was removed.
.tp
.b eintr
while blocked in this system call, the thread caught a signal; see
.br signal (7).
.tp
.b einval
the semaphore set doesn't exist, or
.i semid
is less than zero, or
.i nsops
has a nonpositive value.
.tp
.b enomem
the
.i sem_flg
of some operation specified
.b sem_undo
and the system does not have enough memory to allocate the undo
structure.
.tp
.b erange
for some operation
.i sem_op+semval
is greater than
.br semvmx ,
the implementation dependent maximum value for
.ir semval .
.sh versions
.br semtimedop ()
first appeared in linux 2.5.52,
and was subsequently backported into kernel 2.4.22.
glibc support for
.br semtimedop ()
first appeared in version 2.3.3.
.sh conforming to
posix.1-2001, posix.1-2008, svr4.
.\" svr4 documents additional error conditions einval, efbig, enospc.
.sh notes
the
.i sem_undo
structures of a process aren't inherited by the child produced by
.br fork (2),
but they are inherited across an
.br execve (2)
system call.
.pp
.br semop ()
is never automatically restarted after being interrupted by a signal handler,
regardless of the setting of the
.b sa_restart
flag when establishing a signal handler.
.pp
a semaphore adjustment
.ri ( semadj )
value is a per-process, per-semaphore integer that is the negated sum
of all operations performed on a semaphore specifying the
.b sem_undo
flag.
each process has a list of
.i semadj
values\(emone value for each semaphore on which it has operated using
.br sem_undo .
when a process terminates, each of its per-semaphore
.i semadj
values is added to the corresponding semaphore,
thus undoing the effect of that process's operations on the semaphore
(but see bugs below).
when a semaphore's value is directly set using the
.b setval
or
.b setall
request to
.br semctl (2),
the corresponding
.i semadj
values in all processes are cleared.
the
.br clone (2)
.b clone_sysvsem
flag allows more than one process to share a
.i semadj
list; see
.br clone (2)
for details.
.pp
the \fisemval\fp, \fisempid\fp, \fisemzcnt\fp, and \fisemnct\fp values
for a semaphore can all be retrieved using appropriate
.br semctl (2)
calls.
.ss semaphore limits
the following limits on semaphore set resources affect the
.br semop ()
call:
.tp
.b semopm
maximum number of operations allowed for one
.br semop ()
call.
before linux 3.19,
.\" commit e843e7d2c88b7db107a86bd2c7145dc715c058f4
the default value for this limit was 32.
since linux 3.19, the default value is 500.
on linux, this limit can be read and modified via the third field of
.ir /proc/sys/kernel/sem .
.\" this /proc file is not available in linux 2.2 and earlier -- mtk
.ir note :
this limit should not be raised above 1000,
.\" see comment in linux 3.19 source file include/uapi/linux/sem.h
because of the risk of that
.br semop ()
fails due to kernel memory fragmentation when allocating memory to copy the
.ir sops
array.
.tp
.b semvmx
maximum allowable value for
.ir semval :
implementation dependent (32767).
.pp
the implementation has no intrinsic limits for
the adjust on exit maximum value
.rb ( semaem ),
the system wide maximum number of undo structures
.rb ( semmnu )
and the per-process maximum number of undo entries system parameters.
.sh bugs
when a process terminates, its set of associated
.i semadj
structures is used to undo the effect of all of the
semaphore operations it performed with the
.b sem_undo
flag.
this raises a difficulty: if one (or more) of these semaphore adjustments
would result in an attempt to decrease a semaphore's value below zero,
what should an implementation do?
one possible approach would be to block until all the semaphore
adjustments could be performed.
this is however undesirable since it could force process termination to
block for arbitrarily long periods.
another possibility is that such semaphore adjustments could be ignored
altogether (somewhat analogously to failing when
.b ipc_nowait
is specified for a semaphore operation).
linux adopts a third approach: decreasing the semaphore value
as far as possible (i.e., to zero) and allowing process
termination to proceed immediately.
.pp
in kernels 2.6.x, x 
.\"
.\" %%%license_start(verbatim)
.\" permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" since the linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  the author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  the author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%license_end
.\"
.\" references consulted:
.\"     linux libc source code
.\"     lewine's _posix programmer's guide_ (o'reilly & associates, 1991)
.\"     386bsd man pages
.\" modified sat jul 24 18:08:52 1993 by rik faith (PI:EMAIL)
.\" modified 2001-08-31, aeb
.\"
.th strcmp 3  2021-03-22 "" "linux programmer's manual"
.sh name
strcmp, strncmp \- compare two strings
.sh synopsis
.nf
.b #include 
.pp
.bi "int strcmp(const char *" s1 ", const char *" s2 );
.bi "int strncmp(const char *" s1 ", const char *" s2 ", size_t " n );
.fi
.sh description
the
.br strcmp ()
function compares the two strings
.i s1
and
.ir s2 .
the locale is not taken into account (for a locale-aware comparison, see
.br strcoll (3)).
the comparison is done using unsigned characters.
.pp
.br strcmp ()
returns an integer indicating the result of the comparison, as follows:
.ip \(bu 2
0, if the
.i s1
and
.i s2
are equal;
.ip \(bu
a negative value if
.i s1
is less than
.ir s2 ;
.ip \(bu
a positive value if
.i s1
is greater than
.ir s2 .
.pp
the
.br strncmp ()
function is similar, except it compares
only the first (at most)
.ir n
bytes of
.i s1
and
.ir s2 .
.sh return value
the
.br strcmp ()
and
.br strncmp ()
functions return an integer
less than, equal to, or greater than zero if
.i s1
(or the first
.i n
bytes thereof) is found, respectively, to be less than, to
match, or be greater than
.ir s2 .
.sh attributes
for an explanation of the terms used in this section, see
.br attributes (7).
.ad l
.nh
.ts
allbox;
lbx lb lb
l l l.
interface	attribute	value
t{
.br strcmp (),
.br strncmp ()
t}	thread safety	mt-safe
.te
.hy
.ad
.sp 1
.sh conforming to
posix.1-2001, posix.1-2008, c89, c99, svr4, 4.3bsd.
.sh notes
posix.1 specifies only that:
.rs
.pp
the sign of a nonzero return value shall be determined by the sign
of the difference between the values of the first pair of bytes
(both interpreted as type
.ir "unsigned char" )
that differ in the strings being compared.
.re
.pp
in glibc, as in most other implementations,
the return value is the arithmetic result of subtracting
the last compared byte in
.i s2
from the last compared byte in
.ir s1 .
(if the two characters are equal, this difference is 0.)
.sh examples
the program below can be used to demonstrate the operation of
.br strcmp ()
(when given two arguments) and
.br strncmp ()
(when given three arguments).
first, some examples using
.br strcmp ():
.pp
.in +4n
.ex
$ \fb./string_comp abc abc\fp
 and  are equal
$ \fb./string_comp abc ab\fp      # \(aqc\(aq is ascii 67; \(aqc\(aq \- \(aq\e0\(aq = 67
 is greater than  (67)
$ \fb./string_comp aba abz\fp     # \(aqa\(aq is ascii 65; \(aqz\(aq is ascii 90
 is less than  (\-25)
$ \fb./string_comp abj abc\fp
 is greater than  (7)
$ .\fb/string_comp $\(aq\e201\(aq a\fp   # 0201 \- 0101 = 0100 (or 64 decimal)
 is greater than  (64)
.ee
.in
.pp
the last example uses
.br bash (1)-specific
syntax to produce a string containing an 8-bit ascii code;
the result demonstrates that the string comparison uses unsigned
characters.
.pp
and then some examples using
.br strncmp ():
.pp
.in +4n
.ex
$ \fb./string_comp abc ab 3\fp
 is greater than  (67)
$ \fb./string_comp abc ab 2\fp
 and  are equal in the first 2 bytes
.ee
.in
.ss program source
\&
.ex
/* string_comp.c
   licensed under gnu general public license v2 or later.
*/
#include 
#include 
#include 
int
main(int argc, char *argv[])
{
    int res;
    if (argc   []\en", argv[0]);
        exit(exit_failure);
    }
    if (argc == 3)
        res = strcmp(argv[1], argv[2]);
    else
        res = strncmp(argv[1], argv[2], atoi(argv[3]));
    if (res == 0) {
        printf(" and  are equal");
        if (argc > 3)
            printf(" in the first %d bytes\en", atoi(argv[3]));
        printf("\en");
    } else if (res  is less than  (%d)\en", res);
    } else {