i=1 sli
coefﬁcient:
O BlindSign(ski, Λ, φ) → (˜σi): The authority i parses Λ =
(γ, cm, c, πs), ski = (xi, yi), and c = (a, b). Recompute
h = H(cm). Verify the proof πs using γ, cm and φ;
if the proof is valid, build ˜ci = (ay, hxibyi) and output
˜σi = (h, ˜ci); otherwise output ⊥ and stop the protocol.
O Unblind(˜σi, d) → (σi): The users parse ˜σi = (h, ˜c) and
˜c = (˜a, ˜b); compute σi = (h, ˜b(˜a)−d). Output σi.
O AggCred(σ1, . . . , σt) → (σ): Parse each σi as (h, si) for
i ∈ [1, . . . , t]. Output (h,(cid:81)t
i ), where l is the Lagrange
(0 − j)
li =
t(cid:89)j=1,j(cid:54)=i
O ProveCred(vk, m, σ, φ(cid:48)) → (Θ, φ(cid:48)): Parse σ = (h, s)
and vk = (g2, α, β). Pick at random r(cid:48), r ∈ F2
p; set
σ(cid:48) = (h(cid:48), s(cid:48)) = (hr
2 and ν = (h(cid:48))r.
Output (Θ = (κ, ν, σ(cid:48), πv), φ(cid:48)), where φ(cid:48) is an application-
speciﬁc predicate satisﬁed by m, and πv is:
(cid:48)
)r ∧ φ
πv = NIZK{(m, r) : κ = αβmgr
(m) = 1}
2 ∧ ν = (h
O VerifyCred(vk, Θ, φ(cid:48)) → (true/f alse): Parse
Θ = (κ, ν, σ(cid:48), πv) and σ(cid:48) = (h(cid:48), s(cid:48)); verify πv using
vk and φ(cid:48). Output true if the proof veriﬁes, h(cid:48)
(cid:54)= 1 and
e(h(cid:48), κ) = e(s(cid:48)ν, g2); otherwise output f alse.
(i − j)
t(cid:89)j=1,j(cid:54)=i
); build κ = αβmgr
mod p
, sr