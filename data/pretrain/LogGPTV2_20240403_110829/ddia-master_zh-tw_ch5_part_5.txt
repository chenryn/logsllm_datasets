#### 运维多个数据中心
假如你有一个数据库，副本分散在好几个不同的资料中心（可能会用来容忍单个数据中心的故障，或者为了在地理上更接近使用者）。如果使用常规的基于领导者的复制设定，主库必须位于其中一个数据中心，且所有写入都必须经过该资料中心。
多主配置中可以在每个资料中心都有主库。[图 5-6](../img/fig5-6.png) 展示了这个架构。在每个资料中心内使用常规的主从复制；在资料中心之间，每个资料中心的主库都会将其更改复制到其他资料中心的主库中。
![](../img/fig5-6.png)
**图 5-6 跨多个数据中心的多主复制**
我们来比较一下在运维多个数据中心时，单主和多主的适应情况：
* 效能
  在单主配置中，每个写入都必须穿过网际网路，进入主库所在的资料中心。这可能会增加写入时间，并可能违背了设定多个数据中心的初心。在多主配置中，每个写操作都可以在本地资料中心进行处理，并与其他资料中心非同步复制。因此，资料中心之间的网路延迟对使用者来说是透明的，这意味著感觉到的效能可能会更好。
* 容忍资料中心停机
  在单主配置中，如果主库所在的资料中心发生故障，故障切换必须使另一个数据中心里的从库成为主库。在多主配置中，每个资料中心可以独立于其他资料中心继续执行，并且当发生故障的资料中心归队时，复制会自动赶上。
* 容忍网路问题
  资料中心之间的通讯通常穿过公共网际网路，这可能不如资料中心内的本地网路可靠。单主配置对资料中心之间的连线问题非常敏感，因为透过这个连线进行的写操作是同步的。采用非同步复制功能的多主配置通常能更好地承受网路问题：临时的网路中断并不会妨碍正在处理的写入。
有些资料库预设情况下支援多主配置，但使用外部工具实现也很常见，例如用于 MySQL 的 Tungsten Replicator 【26】，用于 PostgreSQL 的 BDR【27】以及用于 Oracle 的 GoldenGate 【19】。
尽管多主复制有这些优势，但也有一个很大的缺点：两个不同的资料中心可能会同时修改相同的资料，写冲突是必须解决的（如 [图 5-6](../img/fig5-6.png) 中的 “冲突解决（conflict resolution）”）。本书将在 “[处理写入冲突](#处理写入冲突)” 中详细讨论这个问题。
由于多主复制在许多资料库中都属于改装的功能，所以常常存在微妙的配置缺陷，且经常与其他资料库功能之间出现意外的反应。比如自增主键、触发器、完整性约束等都可能会有麻烦。因此，多主复制往往被认为是危险的领域，应尽可能避免【28】。
#### 需要离线操作的客户端
多主复制的另一种适用场景是：应用程式在断网之后仍然需要继续工作。
例如，考虑手机，膝上型电脑和其他装置上的日历应用。无论装置目前是否有网际网路连线，你需要能随时检视你的会议（发出读取请求），输入新的会议（发出写入请求）。如果在离线状态下进行任何更改，则装置下次上线时，需要与伺服器和其他装置同步。
在这种情况下，每个装置都有一个充当主库的本地资料库（它接受写请求），并且在所有装置上的日历副本之间同步时，存在非同步的多主复制过程。复制延迟可能是几小时甚至几天，具体取决于何时可以访问网际网路。
从架构的角度来看，这种设定实际上与资料中心之间的多主复制类似，每个装置都是一个 “资料中心”，而它们之间的网路连线是极度不可靠的。从历史上各类日历同步功能的破烂实现可以看出，想把多主复制用好是多么困难的一件事。
有一些工具旨在使这种多主配置更容易。例如，CouchDB 就是为这种操作模式而设计的【29】。
#### 协同编辑
实时协作编辑应用程式允许多个人同时编辑文件。例如，Etherpad 【30】和 Google Docs 【31】允许多人同时编辑文字文件或电子表格（该演算法在 “[自动冲突解决](#自动冲突解决)” 中简要讨论）。我们通常不会将协作式编辑视为资料库复制问题，但它与前面提到的离线编辑用例有许多相似之处。当一个使用者编辑文件时，所做的更改将立即应用到其本地副本（Web 浏览器或客户端应用程式中的文件状态），并非同步复制到伺服器和编辑同一文件的任何其他使用者。
如果要保证不会发生编辑冲突，则应用程式必须先取得文件的锁定，然后使用者才能对其进行编辑。如果另一个使用者想要编辑同一个文件，他们首先必须等到第一个使用者提交修改并释放锁定。这种协作模式相当于主从复制模型下在主节点上执行事务操作。
但是，为了加速协作，你可能希望将更改的单位设定得非常小（例如单次按键），并避免锁定。这种方法允许多个使用者同时进行编辑，但同时也带来了多主复制的所有挑战，包括需要解决冲突【32】。
### 处理写入冲突
多主复制的最大问题是可能发生写冲突，这意味著需要解决冲突。
例如，考虑一个由两个使用者同时编辑的维基页面，如 [图 5-7](../img/fig5-7.png) 所示。使用者 1 将页面的标题从 A 更改为 B，并且使用者 2 同时将标题从 A 更改为 C。每个使用者的更改已成功应用到其本地主库。但当非同步复制时，会发现冲突【33】。单主资料库中不会出现此问题。
![](../img/fig5-7.png)
**图 5-7 两个主库同时更新同一记录引起的写入冲突**
#### 同步与非同步冲突检测
在单主资料库中，第二个写入将被阻塞并等待第一个写入完成，或者中止第二个写入事务并强制使用者重试。另一方面，在多主配置中，两个写入都是成功的，在稍后的某个时间点才能非同步地检测到冲突。那时再来要求使用者解决冲突可能为时已晚。
原则上，可以使冲突检测同步 - 即等待写入被复制到所有副本，然后再告诉使用者写入成功。但是，透过这样做，你将失去多主复制的主要优点：允许每个副本独立地接受写入。如果你想要同步冲突检测，那么你可能不如直接使用单主复制。
#### 避免冲突
处理冲突的最简单的策略就是避免它们：如果应用程式可以确保特定记录的所有写入都透过同一个主库，那么冲突就不会发生。由于许多的多主复制实现在处理冲突时处理得相当不好，避免冲突是一个经常被推荐的方法【34】。
例如，在一个使用者可以编辑自己资料的应用程式中，可以确保来自特定使用者的请求始终路由到同一资料中心，并使用该资料中心的主库进行读写。不同的使用者可能有不同的 “主” 资料中心（可能根据使用者的地理位置选择），但从任何一位使用者的角度来看，本质上就是单主配置了。
但是，有时你可能需要更改被指定的主库 —— 可能是因为某个资料中心出现故障，你需要将流量重新路由到另一个数据中心，或者可能是因为使用者已经迁移到另一个位置，现在更接近其它的资料中心。在这种情况下，冲突避免将失效，你必须处理不同主库同时写入的可能性。
#### 收敛至一致的状态