09 ) 
10 
11 // wg 用来等待程序完成 
12 var wg sync.WaitGroup 
13 
14 // main 是所有 Go 程序的入口 
15 func main() { 
16 
 // 分配一个逻辑处理器给调度器使用 
17 
 runtime.GOMAXPROCS(1) 
18 
19 
 // 计数加 2，表示要等待两个 goroutine 
20 
 wg.Add(2) 
21 
22 
 // 创建两个 goroutine 
23 
 fmt.Println("Create Goroutines") 
24 
 go printPrime("A") 
25 
 go printPrime("B") 
26 
27 
 // 等待 goroutine 结束 
28 
 fmt.Println("Waiting To Finish") 
29 
 wg.Wait() 
30 
31 
 fmt.Println("Terminating Program") 
32 } 
33 
34 // printPrime 显示 5000 以内的素数值 
35 func printPrime(prefix string) { 
36 
 // 在函数退出时调用 Done 来通知 main 函数工作已经完成 
37 
 defer wg.Done() 
38 
39 next: 
40 
 for outer := 2; outer < 5000; outer++ { 
41 
 for inner := 2; inner < outer; inner++ { 
42 
 if outer%inner == 0 { 
43 
    continue next 
44 
 } 
45 
 } 
46 
    fmt.Printf("%s:%d\n", prefix, outer) 
47 
 } 
48 
 fmt.Println("Completed", prefix) 
49 } 
代码清单 6-4 中的程序创建了两个 goroutine，分别打印 1~5000 内的素数。查找并显示素数
会消耗不少时间，这会让调度器有机会在第一个 goroutine 找到所有素数之前，切换该 goroutine
的时间片。 
在第 12 行中，程序启动的时候，声明了一个 WaitGroup 变量，并在第 20 行将其值设置为
2。之后在第 24 行和第 25 行，在关键字 go 后面指定 printPrime 函数并创建了两个 goroutine
来执行。第一个 goroutine 使用前缀 A，第二个 goroutine 使用前缀 B。和其他函数调用一样，创
建为 goroutine 的函数调用时可以传入参数。不过 goroutine 终止时无法获取函数的返回值。查看
代码清单 6-5 中给出的输出时，会看到调度器在切换第一个 goroutine。 
代码清单 6-5  listing04.go 的输出 
Create Goroutines 
Waiting To Finish 
B:2 
B:3 
... 
B:4583 
B:4591 
A:3 
 ** 切换 goroutine 
A:5 
... 
A:4561 
A:4567 
B:4603 
 ** 切换 goroutine 
B:4621 
... 
Completed B 
A:4457 
 ** 切换 goroutine 
A:4463 
... 
A:4993 
A:4999 
Completed A 
Terminating Program 
goroutine B 先显示素数。一旦 goroutine B 打印到素数 4591，调度器就会将正运行的 goroutine
切换为 goroutine A。之后 goroutine A 在线程上执行了一段时间，再次切换为 goroutine B。这次
goroutine B 完成了所有的工作。一旦 goroutine B 返回，就会看到线程再次切换到 goroutine A 并
完成所有的工作。每次运行这个程序，调度器切换的时间点都会稍微有些不同。 
代码清单 6-1 和代码清单 6-4 中的示例程序展示了调度器如何在一个逻辑处理器上并发运行
多个 goroutine。像之前提到的，Go 标准库的 runtime 包里有一个名为 GOMAXPROCS 的函数，
通过它可以指定调度器可用的逻辑处理器的数量。用这个函数，可以给每个可用的物理处理器在
运行的时候分配一个逻辑处理器。代码清单 6-6 展示了这种改动，让 goroutine 并行运行。 
代码清单 6-6  如何修改逻辑处理器的数量 
import "runtime" 
// 给每个可用的核心分配一个逻辑处理器 
runtime.GOMAXPROCS(runtime.NumCPU()) 
包 runtime 提供了修改 Go 语言运行时配置参数的能力。在代码清单 6-6 里，我们使用两
个 runtime 包的函数来修改调度器使用的逻辑处理器的数量。函数 NumCPU 返回可以使用的物
理处理器的数量。因此，调用 GOMAXPROCS 函数就为每个可用的物理处理器创建一个逻辑处理
器。需要强调的是，使用多个逻辑处理器并不意味着性能更好。在修改任何语言运行时配置参数
的时候，都需要配合基准测试来评估程序的运行效果。 
如果给调度器分配多个逻辑处理器，我们会看到之前的示例程序的输出行为会有些不同。让
我们把逻辑处理器的数量改为 2，并再次运行第一个打印英文字母表的示例程序，如代码清单 6-7
所示。 
代码清单 6-7  listing07.go 
01 // 这个示例程序展示如何创建 goroutine 
02 // 以及 goroutine 调度器的行为 
03 package main 
04 
05 import ( 
06 
 "fmt" 
07 
 "runtime" 
08 
 "sync" 
09 ) 
10 
11 // main 是所有 Go 程序的入口 
12 func main() { 
13 
 // 分配 2 个逻辑处理器给调度器使用 
14 
 runtime.GOMAXPROCS(2) 
15 
16 
 // wg 用来等待程序完成 
17 
 // 计数加 2，表示要等待两个 goroutine 
18 
 var wg sync.WaitGroup 
19 
 wg.Add(2) 
20 
21 
 fmt.Println("Start Goroutines") 
22 
23 
 // 声明一个匿名函数，并创建一个 goroutine 
24 
 go func() { 
25 
 // 在函数退出时调用 Done 来通知 main 函数工作已经完成 
26 
 defer wg.Done() 
27 
28 
 // 显示字母表 3 次 
29 
 for count := 0; count < 3; count++ { 
30 
 for char := 'a'; char < 'a'+26; char++ { 
31 
 fmt.Printf("%c ", char) 
32 
 } 
33 
 } 
34 
 }() 
35 
36 
 // 声明一个匿名函数，并创建一个 goroutine 
37 
 go func() { 
38 
 // 在函数退出时调用 Done 来通知 main 函数工作已经完成 
39 
 defer wg.Done() 
40 
41 
 // 显示字母表 3 次 
42 
 for count := 0; count < 3; count++ { 
43 
 for char := 'A'; char < 'A'+26; char++ { 
44 
 fmt.Printf("%c ", char) 
45 
 } 
46 
 } 
47 
 }() 
48 
49 
 // 等待 goroutine 结束 
50 
 fmt.Println("Waiting To Finish") 
51 
 wg.Wait() 
52 
53 
 fmt.Println("\nTerminating Program") 
54 } 
代码清单6-7 中给出的例子在第14 行中通过调用GOMAXPROCS 函数创建了两个逻辑处理器。
这会让 goroutine 并行运行，输出结果如代码清单 6-8 所示。 
代码清单 6-8  listing07.go 的输出 
Create Goroutines 
Waiting To Finish 
A B C a D E b F c G d H e I f J g K h L i M j N k O l P m Q n R o S p T 
q U r V s W t X u Y v Z w A x B y C z D a E b F c G d H e I f J g K h L 
i M j N k O l P m Q n R o S p T q U r V s W t X u Y v Z w A x B y C z D 
a E b F c G d H e I f J g K h L i M j N k O l P m Q n R o S p T q U r V 
s W t X u Y v Z w x y z 
Terminating Program 
如果仔细查看代码清单 6-8 中的输出，会看到 goroutine 是并行运行的。两个 goroutine 几乎
是同时开始运行的，大小写字母是混合在一起显示的。这是在一台 8 核的电脑上运行程序的输出，
所以每个 goroutine 独自运行在自己的核上。记住，只有在有多个逻辑处理器且可以同时让每个
goroutine 运行在一个可用的物理处理器上的时候，goroutine 才会并行运行。 
现在知道了如何创建 goroutine，并了解这背后发生的事情了。下面需要了解一下写并发程序
时的潜在危险，以及需要注意的事情。 
6.3  竞争状态 
如果两个或者多个 goroutine 在没有互相同步的情况下，访问某个共享的资源，并试图同时
读和写这个资源，就处于相互竞争的状态，这种情况被称作竞争状态（race candition）。竞争状态
的存在是让并发程序变得复杂的地方，十分容易引起潜在问题。对一个共享资源的读和写操作必
须是原子化的，换句话说，同一时刻只能有一个 goroutine 对共享资源进行读和写操作。代码清
单 6-9 中给出的是包含竞争状态的示例程序。 
代码清单 6-9  listing09.go 
01 // 这个示例程序展示如何在程序里造成竞争状态 
02 // 实际上不希望出现这种情况 
03 package main 
04 
05 import ( 
06 
 "fmt" 
07 
 "runtime" 
08 
 "sync" 
09 ) 
10 
11 var ( 
12 
 // counter 是所有 goroutine 都要增加其值的变量 
13 
 counter int 
14 
15 
 // wg 用来等待程序结束 
16 
 wg sync.WaitGroup 
17 ) 
18 
19 // main 是所有 Go 程序的入口 
20 func main() { 
21 
 // 计数加 2，表示要等待两个 goroutine 
22 
 wg.Add(2) 
23 
24 
 // 创建两个 goroutine 
25 
 go incCounter(1) 
26 
 go incCounter(2) 
27 
28 
 // 等待 goroutine 结束 
29 
 wg.Wait() 
30 
 fmt.Println("Final Counter:", counter) 
31 } 
32 
33 // incCounter 增加包里 counter 变量的值 
34 func incCounter(id int) { 
35 