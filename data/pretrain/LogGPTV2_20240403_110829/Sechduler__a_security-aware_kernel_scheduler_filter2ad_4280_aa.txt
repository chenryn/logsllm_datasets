title:Sechduler: a security-aware kernel scheduler
author:Parisa Haghani and
Saman A. Zonouz
POSTER – Sechduler: A Security-Aware Kernel Scheduler
Parisa Haghani
Electrical and Computer Engineering
University of Illinois at Urbana-Champaign
PI:EMAIL
Saman Zonouz
Electrical and Computer Engineering
University of Miami
PI:EMAIL
ABSTRACT
Trustworthy operation of safety-critical infrastructures necessitates
efﬁcient solutions that satisfy both realtimeness and security re-
quirements simultaneously. We present Sechduler, a formally ver-
iﬁable security-aware operating system scheduler that dynamically
makes sure that system computational resources are allocated to
individual waiting tasks in an optimal order such that, if feasible,
neither realtime nor security requirements of the system are vio-
lated. Additionally, if not both of the requirements can be satisﬁed
simultaneously, Sechduler makes use of easy-to-deﬁne linear tem-
poral logic-based policies as well as automatically generated Büchi
automaton-based monitors, compiled as loadable kernel modules,
to enforce which requirements should get the priority. Our ex-
perimental results show that Sechduler can adaptively enforce the
system-wide logic-based temporal policies within the kernel and
with minimal performance overhead of 3% on average to guarantee
high level of combined security and realtimeness simultaneously.
Categories and Subject Descriptors: D.4.6 [Operating Systems]:
Security and Protection
Keywords: Real-time security; formal temporal veriﬁcation; intru-
sion detection and prevention; operating system security.
Sechduler
Maintenance of the safety-critical infrastructures, e.g., nuclear power
plants and avionics systems, is extremely crucial because a fail-
ure to meet a single requirement may lead to a catastrophic conse-
quence such as an explosion or an accident leading to loss of life. In
particular, the realtime scheduling of tasks in those infrastructures
such that individual timing requirements are met reliably is often
a challenging endeavor. Furthermore, to guarantee core function-
alities, those systems need to be secure and intrusion resilient as
they operate in possibly adversarial environments. Currently many
commercial and open-source security solutions are available that
can monitor different security aspects of the systems. Clearly, the
most comprehensive security level will be achieved by running a
set of those security sensors in parallel; however, this would re-
sult in computationally intensive security analyses and hence over-
consumption of the system’s limited resources. Therefore, the sys-
Permission to make digital or hard copies of part or all of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage, and that copies bear this notice and the full ci-
tation on the ﬁrst page. Copyrights for third-party components of this work must be
honored. For all other uses, contact the owner/author(s). Copyright is held by the
author/owner(s).
CCS’13, November 4–8, 2013, Berlin, Germany.
ACM 978-1-4503-2477-9/13/11.
http://dx.doi.org/10.1145/2508859.2512527.
tem’s core realtime functionality requirements could be violated
as the system’s critical tasks are deprived of the resources. This
signiﬁes the fact that to ensure timely accomplishment of the core
system functionalities, the deployed security solutions need to be
resource aware and satisfy the system-wide realtime requirements,
i.e., realtime security. The same rationale justiﬁes an urgent need
for solutions to guarantee the secure realtimeness property pro-
vided by realtime solutions, e.g., realtime schedulers, that are aware
of the system security requirements according to the high-level or-
ganizational objectives.
Previous efforts in designing realtime and security solutions have
fallen short in several major aspects. There have been many theo-
retical as well as heuristic scheduling algorithms such as the Linux
kernel 3.X Completely-Fair Scheduler [4], RTLinux [6] attempt to
allocate the system CPU(s) to individual waiting tasks such that the
likelihood of task starvations and deadline misses are minimized.
Although the abovementioned solutions can be employed to en-
sure timely accomplishments of safety-critical and realtime appli-
cations, none of them take into account the existence possibility
of malicious activities, e.g., an adversarial unﬁnished task wait-
ing for execution. Security and privacy researchers have proposed
numerous host-based intrusion prevention and detection solutions,
e.g., Samhain [7], as well as forensics and root-cause analysis al-
gorithms and tools, such as Backtracker [3], and FloGuard [8], in
order to detect and terminate ongoing malicious misbehaviors with
minimum amount of performance overhead on the target system.
Even though the abovementioned security solutions attempt to min-
imize the overhead as a best effort to terminate attacks before it gets
too late, e.g., conﬁdential data is sent out to network, there is cur-
rently no generic and theoretically sound solution that considers
the system’s overall realtime requirements and guarantees timely
reaction against the ongoing intrusions.
We present Sechduler, a formally veriﬁable security-aware op-
erating system scheduler that guarantees simultaneous satisfaction
of the system-wide realtimeness as well as security requirements.
In particular, Sechduler accomplishes its objectives through three
major steps. First, during a one-time ofﬂine phase, system secu-
rity policies are deﬁned that determine how the security vs. real-
timeness tradeoffs should be resolved. These policies can be de-
signed following whitelisting (deny by default), blacklisting (allow
by default) or other more generalized paradigms. Second, during
an online phase while the system is operating, Sechduler selects
the appropriate subset of policies, given the current security state
of the system, and generates the corresponding single logic-based
conjunctive policy predicate. Sechduler then converts the policy to
an extended ﬁnite state machine-based monitor automatically. Fi-
nally, Sechduler enhances the kernel scheduler with the generated
monitor dynamically for runtime monitoring and veriﬁcation of the
system computational resource allocations. Consequently, Sechd-
1465uler modiﬁes the kernel’s resource allocation schedule actively if
it is about to violate any of the predeﬁned system-wide security
policies.
More speciﬁcally, Sechduler makes use of an easy to understand
formal language, namely three-valued linear temporal logic that
facilitates formulation of comprehensive temporal system-wide se-
curity policies for the system administrators. Needless to mention,
the designed policies can be reused across systems (analogous to
the SE-Linux access control policies). The employed three-value
logic, i.e., true:
policy-compliant, false: policy violation, and
inconclusive: insufﬁcient information, enables Sechduler to use
the designed policies for accurate veriﬁcation and reconﬁguration
of the kernel task scheduling dynamically based on the observed
scheduling trace. , i.e., the past and current (to be) scheduled tasks.
Sechduler considers the trace formally as a ﬁnite preﬁx of the (po-
tentially) inﬁnite task scheduling sequence in the future. For the
kernel to understand and enforce the policies, Sechduler converts
the logic-based policies automatically to an extended ﬁnite state
machine, so-called Büchi automaton, working with the three-value
logic. The Büchi automaton monitors the kernel scheduling trace
and determines whether the policy is about to be violated. If so, the
scheduler is reconﬁgured and the system CPU is allocated to the
next non-policy-violating waiting task with an urgent need for ex-
ecution. It is noteworthy that the automated conversion algorithm
in Sechduler results in an automaton with provably minimum num-
ber of states ensuring that the performance overhead of the runtime
monitoring and veriﬁcation is minimized. Consequently, using a
realtime and security-aware scheduling algorithm through continu-
ous optimization for timely resource allocations and discrete logic-
based monitoring for security veriﬁcations, Sechduler makes sure
to provide both realtimeness and security guarantees simultane-
ously if feasible depending on the available time and resources.
In summary, the contributions of our work are as follows: 1) We
propose an easy-to-understand logical formulation formalism to de-
clare the system security requirements for different system security
states; 2) We introduce a three-value logic-based automated algo-
rithm to construct security formal monitors dynamically for run-
time veriﬁcation and temporal policy enforcement; 3) We propose
a hybrid operating system task scheduling algorithm using continu-
ous task ranking optimization and discrete logic-based formal ver-
iﬁcation techniques; and 4) We validate the Sechduler framework
on a real-world host system through implementation and deploy-
ment of a working prototype of the proposed algorithms. It is also
important to mention what Sechduler does not contribute to. In par-
ticular, Sechduler does not present a new intrusion detection sensor
and automatic logic-based policy generation algorithm.
Instead,
Sechduler makes use of those solutions to provide the runtime ver-
iﬁcation capability to maintain the system security and realtime re-
quirements and avoid potential violations of the previously deﬁned
temporal policies.
Sechduler Overview. Initially, the security administrators write
system security temporal policies using the easy-to-understand for-
malism in Sechduler. This phase is very similar to writing ac-
cess control policies for ﬁrewalls or host-based SE-Linux systems;
however, in Sechduler, administrators concentrate on timing- and
scheduling-related security concerns instead. Brieﬂy, each policy
determines the scheduling constraints that need to be held at a sys-
tem security state by the operating system to guarantee that the
system-wide security is maintained. Although, we assume that the
policy writing is completed as a one-time manual effort, Sechduler
could be extended and make use of the recent (semi-)automated
policy writing algorithms and tools [5].
During the system’s operational mode, we assume that appro-
priate host-based intrusion detection systems are deployed and are
Figure 1: The Büchi Automaton for the Predicate
G ((receive_request ∧ ¬send_response ∧ F send_response) →
(sensitive_ﬁle_access → (¬send_response U (security_check ∧
¬send_response))) U send_response)
Figure 3: A Sample Temporal Security Policy
monitoring important aspects of the target system, such as the ﬁlesys-
tem integrity using, for instance, periodic hash function-based scans
[7]. In case a malicious activity is identiﬁed, Sechduler receives
the triggered intrusion detection system alerts that cooperatively
report the system’s current security state. Sechduler goes through
its policy repository dynamically and selects the relevant (possibly
empty) subset of policy rules that correspond to the system’s cur-
rent state. Sechduler then constructs a single system-wide temporal
logic-based predicate using the collected policy rules, and converts
the predicate into a Büchi automaton-based monitor automatically.
The automaton is compiled as a loadable kernel module and in-
serted into the running operating system kernel. The modiﬁed ker-
nel scheduler notices the inserted module, and from then on veriﬁes
its individual task scheduling decisions using the loaded monitor.
Additionally, if needed, it enforces the policies by reconﬁguring
the system’s resource allocations, i.e., scheduling decisions, adap-
tively.
Preliminary Results
We deployed Sechduler in a testbed environment and evaluated var-
ious aspects of its operation. Figure 1 shows the B(ϕ) automaton
in a never claim format in Promela [2].
As Sechduler veriﬁes whether each scheduled tasks should be
given CPU access, we collected statistics of the kernel-level sched-
uled tasks during a normal host computer usage session. Figure
2(b) shows the number of scheduled tasks for each second dur-
ing the session. In particular, the session included a Web browser
launch followed by an Ofﬁce document editor application spawn.