For T = sT1 we deﬁne the index of x ∈ AT as
ιT (x) = ιT1×T2 (x1, x2) :=
if ιT1(x1) + ιT2 (x2)  n
otherwise,
ιT (x) = ιsT1 (x) :=
(cid:100)ιT1 (x)/2(cid:101)
∞
if ιT1(x) (cid:54)= ∞
otherwise,
Recall that composition is not necessarily associative, i.e., there are composition trees T1, T2, T3 and
x1, x2, x3 such that
ι(T1×T2)×T3(x1, x2, x3) (cid:54)= ιT1×(T2×T3)(x1, x2, x3).
16
Soundness of diﬀerential privacy guarantees for privacy buckets We can now show the soundness
of the bounds on ADP we calculate using privacy buckets. We will show that if privacy buckets are (ε, δ)-
ADP, then the distributions from which they were created (either directly or via composition) are also
(ε, δ)-ADP. Simply put, the guarantees we calculate are sound.
We begin by showing a helpful lemma that directly follows our main strategy: all atomic events x that
are assigned an index ιT (x) = i (cid:54)= ∞ (according to a composition tree T ) satisfy PA(x) ≤ f iPB(x).
Lemma 6. Let T be a valid composition tree For all x ∈ UT with ιT (x) (cid:54)= ∞ and for f = fT , we have
PAT (x) ≤ f ιT (x)PBT (x), i.e., f ιT (x) ≤ eL(x)
Proof. We show the lemma by a structural induction over the composition tree T . Let x ∈ UT with
ιT (x) (cid:54)= ∞.
(AT ||BT ).
For leafs (i.e., T = l(A, B, f, n)), if ιl(A,B,f,n)(x) = −n, it follows that
Thus, for all ιl(A,B,f,n)(x) (cid:54)= ∞ we get from Deﬁnition 6 and Equation (1) that
PA(x) ≤ f−nPB(x)
⇔ PA(x) ≤ f ιl(A,B,f,n)(x)PB(x).
PA(x) ≤ f ιl(A,B,f,n)(x)PB(x).
For composition nodes (i.e., T = T1 × T2), where T1 and T2 are valid composition trees, let x = (x1, x2)
with x1 ∈ U1 and x2 ∈ U2, f := fT1 = fT2. We know from Deﬁnition 6 that ιT1×T2 (cid:54)= ∞ ⇒ ιT1 (cid:54)= ∞∧ιT2 (cid:54)= ∞.
Moreover,
(1)
PAT1×T2 (x) = PAT1 (x1) · PAT2 (x2)
f ιT1 (x1)PBT1 (x1)
(cid:16)
= f ιT1 (x1)+ιT2 (x2)(cid:0)PBT1 (x1)PBT1 (x2)(cid:1)
(cid:17)
(cid:16)
≤
IH
·
f ιT2 (x2)PBT2 (x2)
(cid:17)
≤ f ιT1×T2 (x)PBT1×T2 (x)
Note that f ιT1 (x1)+ιT2 (x2) ≤ f ιT1×T2 (x) holds by deﬁnition.
∞ ⇔ ιT1(x) (cid:54)= ∞. By deﬁnition, we have
For squaring nodes (i.e., T = sT1) with f := fT1 (and consequently fsT1 = f 2), we know that ιT (x) (cid:54)=
Lemma 7 (Bucket values are sums over atomic events). Let T be a valid composition tree. Then, for all
i ∈ {−nT , . . . , nT ,∞},
Proof. We show the lemma via structural induction over T . Let N := {−nT , . . . , nT}.
If T = l(A, B, f, n): Let i ∈ N ∪ {∞}. By Deﬁnitions 4 and 6 with Si as in Deﬁnition 4,
Otherwise, assume the lemma holds for composition trees T1 and T2.
If T = T1 × T2, we have for
IH
PAsT1
PAT (x).
BT (i) =
(x) = PAT1 (x)
x∈UT s.t. ιT (x)=i
≤ (f 2)(cid:100)ιT1 (x)/2(cid:101)PBT1 (x) = (fsT1)ιsT1 (x)PBsT1
≤ f ιT1 (x)PBT1 (x) = f 2ιT1 (x)/2PBT1 (x)
(x)
(cid:88)
Bl(A,B,f,n)(i) =(cid:80)
(cid:88)
(cid:88)
PA(x) =(cid:80)
BT1 (j) · BT2(k)
x,ι(x)=i PA(x).
(cid:88)
(cid:88)
x∈Si
j,k∈N.j+k=i
 ·
BT1(x1)
(cid:88)
BT1(x1) · BT2 (x2)
j,k∈N s.t. j+k=i
x1∈UT1 s.t. ιT1 (x1)=j
x2∈UT2 s.t. ιT2 (x2)=k
x=(x1,x2)∈UT1×UT2 s.t. ιT1 (x1)+ιT2 (x2)=i
17
i ∈ N \ {−nT},
BT1×T2(i) =
IH=
=
BT2(x2)
We know from Deﬁnition 6 that ιT (x) = ιT1 (x1) + ιT2(x2), since ιT (x) ∈ {−n + 1, . . . , n}.
(cid:88)
(cid:88)
=
Deﬁnition 6=
x=(x1,x2)∈UT1×UT2 s.t. ιT (x)=i
x=(x1,x2)∈U s.t. ιT (x)=i
BT1×T2 (x).
BT1(x1) · BT2(x2)
(cid:80)
For i ∈ {−nT ,∞} the proof follows analogously, where for −nT we have j + k ≤ −nT and we know from
Deﬁnition 6 that ιT (x) = −nT is equivalent to ιT1(x1) + ιT2(x2) ≤ −nT . For ∞ we have j + k > n and we
know from Deﬁnition 6 that ιT (x) = ∞ is equivalent to ιT1 (x1) + ιT2(x2) ≥ nT .
PA1 (x) =
If T = sT1, we have for i ∈ {−nT , . . . ,−nT /2 − 1, nT /2 + 1, . . . , nT}, BsT1(i) = 0 = (cid:80)
x∈U1,ιsT1 =i PAT1 (x).
For i = ∞, we have BsT1(∞) = BT1 (∞), so the statement follows from the IH. For i ∈ {−nT /2 + 1, . . . , nT /2}
x∈∅
we have
BsT1 (i) = BT1 (2i) + BT1(2i − 1)
IH=(cid:80)
x∈UT1 ,ιT1 (x)=2i PAT1 (x) +(cid:80)
=(cid:80)
x∈UsT1 ιT (x)=i PAsT1
(x).
x∈UT1 ,ιT1 (x)=2i−1 PAT1 (x)
The statement for BsT1(−nT /2) follows analogously.
We now state the ﬁrst theorem of our paper: the ADP bounds calculated based on privacy buckets are
sound.
Theorem 1 (Buckets are sound). Let X and Y be two distributions and let TX||Y and TY ||X be valid
composition trees with ATX||Y = BTY ||X = X and BTX||Y = ATY ||X = Y .
Then for every ε ≥ 0 and for any δ ≥ max(cid:0)δTX||Y (ε), δTY ||X (ε)(cid:1), X and Y are (ε, δ)-ADP.
The theorem follows quite trivially from the proof of Lemma 13 in the subsequent chapter. We still
present a self-contained proof as it could be helpful in understanding the soundness of our privacy buckets.
max(PX (x) − eεPY (x), 0) (one direction in
Proof. We show that δTX||Y (ε) ≤ δ implies δ ≥
Lemma 1); the proof for TY ||X and the other direction follows analogously. Let n = nTX||Y , N = {−n, . . . , n},
U = UTX||Y and f = fTX||Y . By deﬁnition,
x∈UTX||Y
(cid:80)
We ignore BTX||Y (∞) for now and apply Lemma 7 and get
(cid:0)max(cid:0)0,BTX||Y (i) · (1 − eε/f i)(cid:1)(cid:1) + BTX||Y (∞).
(cid:17)(cid:17)
(cid:16)
0,(cid:80)
(cid:16)(cid:80)
(cid:17)
(x)=i PX (x) · (1 − eε
f i )
(x)=i PX (x) · (1 − eε
f i )
x∈U .ιTX||Y
x∈U .ιTX||Y
i∈N
max
i∈N.f i>eε
i∈N
δTX||Y (ε) =(cid:80)
(cid:16)
(cid:80)
=(cid:80)
Using Lemma 6 we get (cid:80)
(cid:80)
+(cid:80)
(cid:80)
x∈U .ιT (x)∈N∧f
ιTX||Y
(x)
>eε
max (0, PX (x) − eεPY (x)) .
With BTX||Y (∞) (where we also apply Lemma 7) we yield
x∈U .ιTX||Y
(x)∈N.f
ιTX||Y
(x)
>eε
max (0, PX (x) − eεPY (x))
PX (x)
(x)=∞
x∈U .ιTX||Y
max (0, PX (x) − eεPY (x)) .
x∈U
≥
We repeat the calculation analogously for TY ||X and then we use Lemma 1 to see that X and Y are
indeed (ε, δ)-ADP.
18
4 Reducing and bounding the error
We have already presented a sound way of approximating a distribution pair by creating privacy buckets.
Our calculations from the previous section lead to sound and, in many cases, better results than generic
composition theorems from the literature. In this section we explore the precision of our results: we deﬁne
error (correction) terms that help us to both ﬁnd a lower bound on the diﬀerential privacy guarantee for
the considered distributions even under manifold composition, and to ﬁnd a tighter guarantee for diﬀerential
privacy.
f ι
We distinguish between two types of error correction (EC) terms: the real EC term (cid:96) that captures the
value we use to tighten our result in a sound way and the virtual EC term ˜(cid:96) that captures the maximal
inﬂuence an EC term can have. The virtual EC term accurately captures the diﬀerence between the prob-
ability an event x appears to have in the alternative distribution (using the bucket factor) PA(x)
and the
probability that it actually has in the alternative PB(x). In some cases, however, we misplace an event such
that it ends up in a bucket with an index that is too large: events x that should not be considered for the
overall guarantee, i.e., that have PA(x) − eεPB(x)) < 0 can appear in a bucket with index i s.t. eε < f i.
Thus, correctly calculating the EC term while possibly misplacing events can lead to wrong results.
There are two reasons for why events can be misplaced: First, when composing privacy buckets, events
can be misplaced by one bucket. We take care of this by not including the EC terms of a certain number
of buckets, depending on the number of compositions. Second, when events are put into the smallest bucket
(with index −n), they can be arbitrarily “misplaced”, particularly after a composition. To counter this
eﬀect, we introduce the real EC term, in which we do not include the error of the smallest bucket (with
index −n).
4.1 Buckets with error correction terms
Our strategy is as follows. Assume two distributions A and B: Whenever we add an event x to a bucket B(i),
we store the diﬀerence between the probability that the event occurs in A, adjusted by the bucket factor,
and the probability that the same event occurs in B: PB(x) − PA(x)
. Recall that the main purpose of the
buckets is to keep track of the ratio between those two probabilities. We sum up all these error correction
terms (or EC terms) per individual bucket B(i) and yield EC terms (cid:96)(i). We refer to Figure 4 (in Section 3.1)
for a graphical intuition of our error correction. As an example consider one bucket B(i), containing events
x ∈ Si for a set Si:
(cid:19)
f i
(cid:18)
(cid:88)
(cid:80)
(cid:88)
x∈Si
−
=
PB(x).
(cid:96)(i) − B(i)
f i =
PA(x)
f i
PB(x) −
PA(x)
x∈Si
f i
x∈Si
Thus, only considering one additional value per bucket, we can precisely remember the probability that the
events occurred in B and we can then use this probability to calculate a more precise diﬀerential privacy
guarantee. We omit the EC terms for the bucket B(∞), as there is no bucket factor attached to it (so there
is no value the error correction term could correct).
Although the error correction precisely captures the error per event x, we need to be careful which
events we consider for calculating δ. Consider the bucket B(j) with f j−1 < eε ≤ f j. If we were precise
in our calculations, we would only consider some of the events from the bucket, namely the ones with
PA(x) ≤ eεPB(x), but since we combined them all into one bucket, we cannot distinguish the individual
events anymore. To retain a sound guarantee, we don’t consider the EC term of this bucket when calculating
δ. Under composition this error slightly increases, as events can be misplaced by more than one bucket when
we compose the buckets and thus decrease PB(x)’s approximation. Consequently, every composition increases
the number of buckets for which we don’t consider an EC term. Whenever events land in the bucket with
index −n, an arbitrary misplacement can occur and our aforementioned strategy does not suﬃce. Thus,
we distinguish between the virtual EC term ˜(cid:96), which applies to index −n and the real EC term (cid:96), where
we always set (cid:96)(−n) = 0. For our sound upper bound on δ we will use the real EC term (cid:96) for all buckets
19
that are unaﬀected by potential misplacements, and we will use the slightly too large ˜(cid:96) and ignore potential
misplacements to derive a lower bound on δ.
For the composition, we want to calculate the error correction (EC) term for the combined events: given
events x1 and x2 with (individual) error terms PB1 (x1)− PA1 (x)
f ι2 we want (in the typical
case, ignoring corner cases) to have an EC term for the pair of the form PB1×B2 ((x1, x2)) − PA1×A2 ((x1,x2))
.
However, the buckets cannot keep track of the value for PB1×B2 ((x1, x2))– recall that this is precisely why
we have introduced the error terms. Fortunately, we can calculate the EC terms from the previous terms
(cid:96)T1, (cid:96)T2, the bucket values BT1 ,BT2 , and the bucket factor f as
(cid:96)T2(k) + BT2 (k)
and PB2(x2)− PA2 (x2)
(cid:96)T1 (j) + (cid:96)T1(j)(cid:96)T2 (k).
(cid:96)T1×T2(i) :=(cid:80)
BT1 (j)
f ι1+ι2
j+k=i
f ι1
f k
f j
Similarly, for the squaring, we quantify how the error terms change when we modify the buckets. Although