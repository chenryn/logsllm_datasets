must inherently be correct and atomic, the target impact can
be seen as the pendant to the criterion integrity.
Various approaches emphasized the beneﬁts of acquiring
volatile memory through on-the-ﬂy virtualization [29, 39, 65].
Most rely on a copy-on-write mechanism that provides both
full atomicity and correctness for the acquired image. How-
ever, full integrity cannot be achieved, as the installation of
these systems has a substantial impact on the particular target
state. Other approaches perform DMA to acquire memory
without having a signiﬁcant impact on the target state [7, 36].
However, as DMA does not interfere with a processor’s exe-
cution, atomicity cannot be guaranteed.
HyperLeech was speciﬁcally designed to minimize the tar-
get impact, and thus advances memory acquisition to achieve
much better integrity compared to existing approaches. The
previously mentioned copy-on-write mechanism could be in-
tegrated into our system. While it would also achieve full
atomicity and correctness, deploying our system to the target
USENIX Association
23rd International Symposium on Research in Attacks, Intrusions and Defenses    173
host would require severely less state modiﬁcations (see Sec-
tion 4.1). Section 6 discusses further enhancements that might
allow memory acquisition to even fully satisfy all three crite-
ria. Further conceivable use cases are outlined in Section 5.
4.4 Mitigation
As our system could also be misused as a malicious hypervisor
rootkit [42, 52, 69], we discuss approaches that either prevent
or at least detect its presence.
Prevention As HyperLeech relies on hardware support to
set up a VM, the virtualization of the target cores can be mit-
igated by disabling VT-x in the UEFI or BIOS respectively.
This, however, would also deprive the possibility to run legiti-
mate VMs, and is thus often not a valid option. Alternatively,
a target system might entirely prohibit the attachment of new
PCIe devices, preventing our agent from accessing the tar-
get memory. However, this would also hinder a user from
legitimately connecting additional PCIe hardware.
A better solution might be the restriction of DMA from
untrusted sources. Modern systems provide an Input/Output
Memory Management Unit (IOMMU) which functions sim-
ilar to a standard Memory Management Unit (MMU), as it
traverses certain mapping tables which specify memory ac-
cess permissions. In contrast to regular memory accesses, an
IOMMU controls DMA issued by devices, however. Hence,
the target could conﬁgure the IOMMU to protect its kernel
memory from illegitimate accesses. Despite an IOMMU be-
ing the best way to prevent DMA-based injections, most mod-
ern systems still do not enable it by default. This includes
not only recent Linux distributions, but also Microsoft’s lat-
est operating system Windows 10 [8]. Only Apple enforces
the activation and usage of an IOMMU since MacOS High
Sierra [16]. However, even in case an IOMMU is in use, it has
to be properly conﬁgured by the kernel and ﬁrmware respec-
tively. Recently, Markettos et al. [37] elaborated how PCIe
features like Address Translation Services (ATS) might en-
able a malicious device to act benignly, effectively bypassing
an even properly conﬁgured IOMMU. According to Morgan
et al. [40], a large part of today’s machines grants DMA to
all peripherals prior to the conﬁguration of the IOMMU dur-
ing the boot sequence for compatibility reasons. Furthermore,
Markuze et al. [38] discuss the possibility to exploit trusted de-
vices, as these are often not restricted by the IOMMU. These
publications show that even the usage of a correctly conﬁg-
ured IOMMU might not be able to prevent our approach.
As a target’s processor, chipset, and mainboard must sup-
port the IOMMU in the ﬁrst place, this might not even be a
possibility for older machines. Instead, a system might clear
the bus master enable ﬂag to disable DMA for speciﬁc de-
vices or upstream bridges. Nevertheless, Windows 10 seems
to be the only system which, by default, uses this mechanism
to prevent hot-pluggable devices from using DMA during
screen locks, as stated by Delaunay [8].
Detection Since the entire installation only requires a few
seconds (see Section 4.2), and no signiﬁcant target state is
altered, detecting our system during the injection phase seems
unlikely. As soon as the target has been fully virtualized,
meaningful changes made to the kernel are reverted (see Sec-
tion 4.1). Here on after, detecting HyperLeech is practically
limited to ﬁnding indications of the actual virtualization. Intel
[24, vol. 3C] designed its virtualization extensions to be trans-
parent to a guest system. Nevertheless, researchers suggested
different kinds of side channels to detect a VM. In addition,
several researchers discussed the possibility to exploit timing
discrepancies to ﬁnd out whether a system is running inside
a VM [19, 48, 54, 55]. As virtualization adds the additional
hypervisor layer beneath the already running system, certain
events must be intercepted to stay in control over the VM.
Both the context switches and the actual handling of these
events introduce a runtime overhead which can, theoretically
at least, be detected. As VMX provides the possibility to forge
internal clocks of the guest, this overhead can be concealed,
however. Moreover, George [19] mentioned that a guest could
rely on external timers, but these are often inaccurate and re-
quire the usage of additional protection to prevent them from
being forged. Since virtualization becomes more prevalent,
and HyperLeech could possibly attack already virtualized tar-
gets via nested virtualization (although currently not being
implemented), relying on the detection of virtualization might
not be sufﬁcient in the future anyway.
5 Related Work
Initially presented with Tribble [7] and Copilot [44], vari-
ous projects used DMA to access a system’s memory over
protocols like PCI, PCIe, or FireWire [67]. However, several
researchers showed that DMA-based approaches suffer from
concurrency issues and a lack of context information about
a target’s execution [21, 25]. This prohibits security related
tasks like tracing, debugging, and control ﬂow analysis. Frisk
[15] extends common approaches, injecting kernel implants
which execute custom code within a target’s kernel space.
Duﬂot et al. [11] exploited vulnerable ﬁrmware of a network
card, using its DMA capabilities to take over the target host.
Both, however, signiﬁcantly modify the state of the target
system. In contrast, HyperLeech is optimized to preserve a
system’s state and operate transparently with only a minimal
impact on the analyzed target.
King et al. [28] were the ﬁrst to use software emulation
to stealthily virtualize a victim system. However, with the
advent of hardware-supported virtualization, rootkits were
able to shift already running systems into VMs without re-
quiring a reboot. While Rutkowska [52] targeted Windows
174    23rd International Symposium on Research in Attacks, Intrusions and Defenses
USENIX Association
Vista kernels, Zovi [69] attacked MacOS systems. Recently,
Palutke and Freiling [42] adapted this approach attacking
Linux systems, and enhanced it by locating their rootkit in
hidden memory, certain address ranges that are not even vis-
ible to the operating system’s kernel. Hypervisors have not
only been used for offensive purposes, however. Approaches
like [29, 39, 49, 65] perform live forensics, atomically ex-
tracting information from a guest’s memory via VMI [18].
While some of these approaches require the target system
to be booted inside a VM, others virtualize a system at run-
time [46]. Further projects instrument a guest by injecting
breakpoints into its memory, and hide these modiﬁcations by
exploiting TLB incoherencies [9, 34, 47]. Fattori et al. [13]
introduced an on-the-ﬂy hypervisor that serves analysts as
debugger for guest operating systems. Moreover, several ap-
proaches perform stealthy system tracing [10, 45, 51, 57, 63].
Korkin and Tanda [30] present methods to transparently con-
trol memory accesses from a hypevisor. Nguyen et al. [41]
analyze malware, using a lightweight virtualized execution
environment, while Rhee et al. [50] rely on a hypervisor to pro-
tect kernel structures from rootkits. Sharif et al. [56] bridged
the semantic gap between the hypervisor and its guest by
transparently performing malware analysis from inside the
guest. In contrast, Jiang et al. [26] shift the analysis tech-
niques outside of the guest, overcoming the semantic gap by
systematically reconstructing internal semantic views. Yan
et al. [64] combined hardware virtualization and software
emulation to comprehend malware actions. To reveal mali-
cious processes hidden by rootkits, both Jones et al. [27] and
Litty et al. [35] suggested hypervisor-based methods to de-
tect hidden processes by reconstructing guest information.
While HyperLeech currently serves as a stealthy execution
layer only, all of the above mentioned approaches might be
adapted to our system. Existing approaches either need to be
deployed via kernel drivers, inferring signiﬁcant changes to
the target system, or require the target to be booted inside a
VM. While loading a kernel driver implies root privileges and
support from the target kernel, booting the target inside a VM
excludes systems that already run on bare metal. Besides, cus-
tom kernels might prohibit to load kernel drivers altogether.
HyperLeech stealthily injects a hypervisor through DMA, al-
lowing the virtualization of a target without the necessity to
deploy a driver or to posses root privileges. In addition, the in-
stallation of our system cannot be easily inhibited by malware
or intrusion prevention systems that monitor the loading of
new kernel components. This is especially useful for forensic
approaches, as these often need to be deployed after a system
has potentially been compromised.
6 Conclusion and Future Work
To counter sophisticated anti-forensic approaches, the trans-
parent analysis of a potentially compromised system became
increasingly important. With this paper, we presented a novel
method which uses DMA provided by a PCILeech device
to inject a hypervisor into a running system’s volatile mem-
ory without requiring access privileges. With negligible im-
pact on processor and memory state, HyperLeech is capa-
ble of transparently virtualizing modern multi-core Linux
hosts, serving analysts as a stealthy and privileged execution
layer. Compared to our approach, others rely either on virtu-
alization based on the loading of a kernel extension, causing
severely more state modiﬁcations, or suffer from a loss of
context information and atomicity, being restricted to DMA.
As most of today’s systems do not offer appropriate protection
against DMA from external devices, we expect HyperLeech
to be functional on a wide variety of machines. In conclusion,
our approach advances modern system analysis and memory
forensics, enabling investigators to achieve sound results even
in compromised environments. In the following, we point out
further research directions for enhancing our current system.
Due to the conﬁguration of EPTs, our hypervisor isolates
itself from the target guest. However, EPTs can only restrict
conventional memory accesses issued by the memory con-
troller, and can be bypassed via DMA. As our hypervisor is
placed within a memory region that was vicariously allocated
by the target kernel, the guest should never access this area by
accident. However, the target might intentionally issue DMA
operations to scan its own memory for conspicuous traces. To
protect the hypervisor from DMA, HyperLeech must properly
conﬁgure an IOMMU, using Intel’s Virtualization Technology
for Directed I/O (VT-d). This way, the hypervisor would be
fully protected from both conventional memory accesses (via
EPTs) and DMA (via the IOMMU).
Attaching the PCIe Screamer device to a target host intro-
duces a notable impact on the target state (see Section 4.1). To
avoid unintended modiﬁcations, already existing management
co-processors like Intel’s Management Engine (ME) [23] or
a Baseboard Management Controller (BMC) could be used
instead. These co-processors are typically used to execute
software that controls and monitors the actual host. Although
mostly being signed and protected, researchers showed var-
ious ways to deploy custom modiﬁed code to run on such
platforms [12, 43]. Furthermore, the open-source implemen-
tation OpenBMC could be adapted to run custom code on a
BMC without requiring to exploit a vulnerability [14]. Usu-
ally, these co-processors provide their own DMA engines en-
abling access to the host memory for efﬁcient data exchanges.
Recently, Latzo et al. [33] presented a patch for OpenBMC
running on ASPEED’s AST2500 System-on-Chip (SoC), us-
ing it as a PCILeech device. From the host’s perspective,
the SoC appears as an arbitrary graphics card that connects
over PCIe. This could allow the injection of the HyperLeech
system without the necessity to attach additional hardware.
Therefore, this would prevent the target system from detecting
modiﬁcations caused by the PCIe enumeration. As a result,
analysts could acquire data in a completely sound way while
seemingly having no impact on the target at all.
USENIX Association
23rd International Symposium on Research in Attacks, Intrusions and Defenses    175
Furthermore, virtualized targets should be able to launch
their own VMs. This requires our hypervisor to provide nested
virtualization, as VMX allows only one hypervisor to run in
VMX root mode. Even in case the target already runs a hyper-
visor, our injection could be adapted to take over by withdraw-
ing control from certain routines that are repeatedly executed
in VMX root mode. Consequently, even virtualization-based
rootkits could not prevent our system from being deployed
unless they correctly conﬁgure an IOMMU, which so far has
neither been seen in the wild nor in academia. Support for
additional target operating systems and other platforms like
AMD and ARM is considered hereafter.
Eventually, HyperLeech should undergo a deeper evalua-
tion against other approaches to make a measurable statement
of its advantages regarding the analysis of environment-aware
malware from a forensics perspective.
Acknowledgements
We would like to thank Ulf Frisk for his helpful comments
and detailed insights into the PCILeech project. Furthermore,
we thank Tobias Latzo for sharing his knowledge about co-
processor-based injections.
Availability
As part of this project, we make our prototype implementation
available upon request for research purposes.
References
[1] Ftdi drivers. http://www.ftdichip.com/Drivers/
D3XX/FTD3XXLibrary_v1.2.0.6.zip, 2018.
[2] Keith Adams and Ole Agesen. A comparison of soft-
ware and hardware techniques for x86 virtualization. In
Proceedings of the 12th International Conference on
Architectural Support for Programming Languages and
Operating Systems, ASPLOS 2006, San Jose, CA, USA,
October 21-25, 2006, pages 2–13. ACM, 2006.
[3] Ramtin Amin
and Ulf Frisk.
Pcileech.
https://github.com/ufrisk/pcileech-fpga/
tree/master/pciescreamer, 2019.
[4] Paul Barham, Boris Dragovic, Keir Fraser, Steven Hand,
Tim Harris, Alex Ho, Rolf Neugebauer, Ian Pratt, and
Andrew Warﬁeld. Xen and the art of virtualization.
ACM SIGOPS operating systems review, 37(5):164–177,
2003.
[5] Darren Bilby. Low down and dirty: anti-forensic rootk-
its. Proceedings of Ruxcon, 2006.
[6] Jamie Butler. Dkom (direct kernel object manipulation).
Black Hat Windows Security, 2004.
[7] Brian D Carrier and Joe Grand. A hardware-based mem-
ory acquisition procedure for digital investigations. Dig-
ital Investigation, 1(1):50–60, 2004.
[8] Jean-Christophe Delaunay. Practical dma attack on
windows 10. https://www.synacktiv.com/posts/
pentest/practical-dma-attack-on-windows-10.
html, 2018.
[9] Zhui Deng, Xiangyu Zhang, and Dongyan Xu. SPIDER:
stealthy binary program instrumentation and debugging