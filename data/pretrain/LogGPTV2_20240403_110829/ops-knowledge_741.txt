User: How to create a simple Python script to send the server's CPU, memory, and disk usage to a mailbox every morning?
Assistant: To create a simple Python script that sends the server's CPU, memory, and disk usage to a certain mailbox every morning, please follow the steps below: Step 1: Install the necessary Python libraries You need to install the psutil and smtplib libraries, which are Used to obtain system resource usage and send Email. It can be installed using pip in the terminal. pip install psutil pip install smtplib Step 2: Write a Python script Please write the following Python script. The script will use the psutil library to get system resource usage and use the smtplib library to send this information to the specified mailbox. ``` import smtplib import psutil import datetime from email.mime.text import MIMEText from email.header import Header # mail server configuration smtp_server = 'smtp.exmail.qq.com' # mail server smtp_port = 465 # port number smtp_user = ' your-email-address' # email account smtp_password = 'your-email-password' # email password # basic information for sending emails sender = 'your-email-address' # sender email receiver = 'recipient-email-address' #Recipient mailbox# Get CPU, memory, and disk usage cpu_percent = psutil.cpu_percent(interval=1) mem_info = psutil.virtual_memory() mem_percent = mem_info.percent disk_info = psutil.disk_usage('/') disk_percent = disk_info. percent # Construct the mail content now = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S') message = MIMEText('Server resource usage:\n' + 'CPU usage:' + str(cpu_percent) + '%\n' + 'memory usage:' + str(mem_percent) + '%\n' + 'disk usage:' + str(disk_percent) + '% \n' + 'Sent time:' + str(now), 'plain', 'utf-8') message['From'] = Header('Server Monitoring', 'utf-8') message['To' ] = Header('Admin', 'utf-8') message['Subject'] = Header('Server Usage Report', 'utf-8') # send mail try: smtpObj = smtplib.SMTP_SSL(smtp_server, smtp_port) smtpObj.login(smtp_user, smtp_password) smtpObj.sendmail(sender, receiver, message.as_string()) smtpObj.quit() print("Mail sent successfully") except smtplib.SMTPException as e: print("Error: Cannot send mail , error details: " + str(e)) ``` Step 3: Set up scheduled tasks In order to send emails regularly every morning, you need to use the scheduled task system to run Python scripts regularly. On Linux systems, you can use crontab to set up scheduled tasks. For example, we can run this script at 6am. You can enter the following command in the terminal to edit the cron table: crontab -e Then add a line at the end of the opened file as follows: 0 6 * * * python /path/to/your/script.py >/dev/null 2>&1 like this , the scheduled task will automatically run the Python script at 6:00 every morning and send the result to the specified mailbox. Hope this simple Python script can help you!