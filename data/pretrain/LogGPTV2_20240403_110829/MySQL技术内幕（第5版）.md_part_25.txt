NULL
，每个分区都分别对应于某些明确的列表
2.6表的创建、删除、索引和更改
---
## Page 104
适用于不同表类型的索引特性，以及创建和删除索引的语法。
以及“怎样才能最大限度地利用索引去优化查询”（参考第5章)。本节的主要内容是介绍各种
要的话题，我们在后面会用一整章的篇幅来讨论“为什么要使用索引”、
2.6.4索引表
删除。如果不存在，那么也不会有错误出现，并且脚本会继续执行。
没有创建出来。如果使用了IF EXISTS子句，则不会出问题。如果表已经存在，那么它们会被
下，你想要确保这个安装脚本在开始运行时有一个干净的环境。如果你在这个脚本的开头使用
例如，你有一个安装脚本，它会创建许多表，以便其他脚本可以做进一步的处理。在这种情形
误发生时，如果这个错误是在试图删除某个并不存在的表时发生的，那么 mysql会立即退出。
现
它们依次列在同一条语句里：
这个表的DROP权限，那么只要给出其名字即可：
2.6.3删除表
语句的描述。
INDEX_DIRECTORY。关于这两个以及其他分区选项的语法，请参考附录E中对CREATETABLE
他地方（如放置到不同的物理设备上），则需要用到分区选项DATA_DIRECTORY和
分到MAXVALUE区：
1
索引是加快访问表内容的基本手段，尤其是在涉及多个表的关联查询里。这是一个非常重
DROP TEMPORARY TABLE tbl_name;
如果只想删除临时表，则可以加上TEMPORARY关键字：
在MySQL里，DROPTABLE语句提供了几种有用的扩展。如果想要删除多个表，则可以把
DROP TABLE tbl_name;
删除表要比创建它容易很多，因为你不需要给出任何有关其内容格式的信息。如果你拥有
IF EXISTS子句非常适合于用在与mysql客户端一起使用的脚本里。默认情况下，当有错
如果语句产生了警告信息，那么可以使用 SHOWWARNINGS来查看它们。
在默认情况下，当你试图删除一个并不存在的表时，系统将会报错。为了不让这个错误出
DROP TABLE tbl_namel, tbl_name2,...;
默认情况下，MySQL会将分区存储在专属于分区表的数据库目录里。若想将存储分散到其
2014年及以后的行都将被分配到MAXVALUE区。当到了2014年时，可以再把这个分区进行
DROPTABLE IFEXISTStbl_name;
并在表不存在时只是生成一条警告信息，可以在语句里加上IFEXISTS子句：
：
INTO
ALTER TABLE log_partition REORGANIZE PARTITION pmax
PARTITION pmaX VALUES LESS THAN MAXVALUE
PARTITION
第2章使用SQL管理数据
（2013）
、“它们是如何工作的”，
---
## Page 105
2.6.4.2创建索引
储引擎才支持这种功能。可以使用下面的语句来转换这个表：
是需要使用FULLTEXT索引来完成搜索，应该如何做呢？在MySQL5.5里，只有MyISAM存
EXAMPLE引擎，它们要么根本不支持索引，要么支持得很有限。
建出来的，它们有相似的索引特性。这里也没有包括ARCHIVE、BLACKHOLE、CSV或
2.6.4.1存储引擎的索引特性
性，
表
性
，那么可以使用ALTERTABLE语句来实现。假设你有一个MySQL5.5版本的InnoDB表，但
ALTER TABLE tbl_name ENGINE =MyISAM;
如果想将某个已有表转换成使用另一种存储引擎的，这种存储引擎具有更为合适的索引特
口FULLTEXT 索引。它可用于完成全文检索。这种类型的索引只适用于MyISAM 表（在
口唯一索引。对于单列索引，不允许有重复值出现；对于多列（复合）索引，不允许出现
MySQL可以创建多种类型的索引。
如果想对某个TEXT列建立索引，
那么你可能无法使用特定类型的表。例如，想要使用HASH索引，则必须使用MEMORY
不同的存储引擎具有不同的索引特性，其隐含意思是：如果要求某个索引必须具备某种特
并非所有存储引擎都提供了所有的索引功能。表2-3对MySQL的几种存储引擎所具有的索
口可以对单个列或多个列建立索引。多列索引也被称作复合索引。
MySQL提供了多种灵活的索引创建办法。
口
口
MySQL5.6.4以上的版本，可用于InnoDB表）。更多相关信息请参考2.14节。
常规（非唯一性）索引。它可以让你获得索引的好处，但会出现重复值的情况。
重复的组合值。
是否允许使用NULL值
1对于除ENUM和 SET 以外的字符串类型，可以利用列的前缀创建索引。也就是说，
<
是否支持HASH索引
是否支持SPATIAL索引
是否支持FULLETXT索引
是否支持BLOB/TEXT索引
列前缀的最大长度 （字节)
是否支持列前缀索引
索引行的最大长度 (字节)
每个表的索引数
每个索引的列数
可以为同一个表创建多个索引，帮助优化对表的不同类型的查询。
索引可以只包含唯一值，也可以包含重复值。
引变得更小，访问速度更快。
并且还可能会得到改善，具体表现在：为列的前缀而不是整个列进行索引，可以让索
果
索引。（对于 BLOB 和 TEXT 列，只有在指定了前缀长度的情况下才能创建索引。
列名的最左边n个字符（对于非二进制串类型）或n个字节（对于二进制串类型）创建
在前缀长度范围内，大部分的列都具有唯一性，那么查询性能通常不会受到影响，
索引特性
表2-3存储引擎的索引特性
则必须使用MyISAM或InnoDB表。
否
5.6.4版本以上
是
70
是
3072
9
是
InnoDB
2.6表的创建、删除、索引和更改
否
是是
晋
是
1000
是
1000
MyISAM
是
否
否
否
3072
是
3072
9
是
MEMORY
）如
只对
---
## Page 106
语句所用语法很相似，只不过需要在定义各列的基础上再增加一些索引创建子句：
语句里创建多个索引。
与 ALTER TABLE 语句不同的是，
UNIQUE索引。这两种索引很相似，主要区别有以下两点。
因此，你可以同时创建多个索引，这会比使用多条ALTERTABLE语句逐个添加索引快很多。
他索引列允许包含NULL值。
MySQL会根据第一个索引列的名字选取一个名字。
果要索引多个列，则需要使用逗号隔开）。索引名index_name是可选的。如果没指定它，那么
的任何一种索引。例如：
内部把CREATE INDEX语句映射为 ALTERTABLE操作。）
如果想为已有表添加索引I，则可以使用语句ALTERTABLE或CREATEINDEX。（MySQL会在其
8
如果想在使用CREATE TABLE 语句创建新表时创建索引I，那么相应的语法与 ALTERTABLE
如果想要限制某个索引，让它只包含唯一值，那么可以把这个索引创建为PRIMARYKEY或
”如果某个索引列在索引时使用了 PRIMARY KEY 或 SPATIAL，则它必须为 NOT NULL 的。其
ALTER TABLE 语句比 CREATE INDEX 语句更灵活多变，因为它可用来创建MySQL所支持
其中，tbl_name、index_name和 index_columns 的含义与 ALTER TABLE 语句里的一样。
如果使用逗号把它们隔开，则可以在同一条ALTERTABLE 语句里包括多个对表的改动
CREATE TABLE tbl_name
CREATE SPATIAL INDEX index_name ON tbl_name (index_columns);
CREATE INDEX index_name ON tbl_name (index_columns);
除PRIMARYKEY以外，大部分索引类型都可以用CREATEINDEX语句来添加
口每个表只能包含一个PRIMARY KEY。因为 PRIMARYKEY的名字总是为 PRIMARY，而同
其中，tbl_name 是要添加索引的那个表的名字，index_columns 是要进行索引的列（如
ALTE
ALTER TABLE
你可以在使用CREATE TABLE 语句创建新表时，包含索引定义。相关示例请参考1.4.6节
HASH索引。这是 MEMORY表的默认索引类型，不过可以通过创建 BTREE索引来改写它。
：
ALT
口SPATIAL 索引。这种索引只适用于包含空间值的MyISAM表。更多关于空间值的信息
员
员
SPATIAL index_name(index_columns)
FULLTExT index_name(index_columns)
PRIMARY KEY (index_columns),
EATE
EATE
请参考3.1.4节。
第2章使用SQL管理数据
甚至与另一个NULL值也一样不相等。
了NULL值，那么它就可以包含多个NULL值。这是因为，NULL值不会与任何值相等，
一个表不允许有两个同名的索引。可以在一个表里放置多个UNIQUE索引。
TABLE
TABLE
TABLE
TABL
tbl_name
tbl_name
_nal
me
ADD
ADD
SPATIALindex_name
FULLTExT index_name（index_columns);
INDEx index_name (index_columns);
CREATEINDEX语句里的索引名不是可选的，并且不能在一条
PRIMARY KEY(index_columns);
UNIQuEindex_name（index_columns)
name
(index_columns);
(index_columns);
---
## Page 107
做的问题，而是必须那样做。
字节长度内尽可能多地把所有字符都存储进索引值。
但对于多字节字符集则影响较大。对于拥有多字节字符集的非二进制串，MySQL会在最大允许
索引项自身的最大长度单位是字节。这两种长度计量办法对单字节字符集来说没有什么区别；
的数据类型相同。也就是说，二进制串是以字节为单位，非二进制串是以字符为单位。不过，
列。它对CHAR 列的前10个字符和BINARY 列的前15个字节建立了索引：
或前n个字符(非二进制串类型)。例如，下面这条语句创建出来的表有一个CHAR 列和一个 BINARY
而非简单的col_name。前缀值n表示的是，索引应该包括列值的前n个字节（二进制串类型）
是在索引定义里增加USINGBTREE子句：
那么散列索引的效果就没那么理想了。此时，最好是创建一个BTREE 索引来代替它。实现方式
MEMORY表使用的典型方式。不过，
一个单列的 PRIMARY KEY 或UNIQUE 索引I。例如，下面两条 CREATE TABLE 语句是等价的：
从索引名里挑选一个。
与ALTER TABLE语句相类似，其中的index_name也是可选的。如果省略它，那么 MySQL会
在某些场合，你可能会发现对列前缀（而不是对整个列）进行索引，不仅仅是想不想那样
如果只想对字符串列的前缀建立索引,那么在索引定义里为该列命名的语法是col_name(n)
MEMORY表的默认索引类型是HASH。散列索引对于精确值的查询速度非常快，这也是
作为一个特殊情况，通过在某列的定义末尾加上PRIMARY KEY或UNIQUE子句，可以创建
口对于BLOB或TEXT列，
在对某个字符串列的前缀进行索引时，与列的长度一样，前缀长度的计量单位必须与该列
CREATE TABLE addresslist
CREATE TABLE namelist
口
CREATE TABLE mytbl
CREATE TABLE mytbl
索引行的长度等于构成该索引的各列的索引部分的长度总和。如果总长度超过了索引
INDEX (address(15))
addreSSBINARY(6O)NOT NULL,
ENGINE = MEMORY;
INDEX(id)USING BTREE
id
（其列名分别为c1到c4）。这时，每个满列值的索引值都会占用255字节，因此所有4
一个MyISAM表，它使用的是latin1单字节字符集，并且包含了4个CHAR（255)列
行所能容纳的最大字节数，那么可以通过索引列的前缀来“缩短”这个索引。假设有
INDEX
name
na
CHAR(10)NOT NULL UNIQUE
INT NOT NULL
CHAR(10)
INT NOT NULL,
(name(10))
NOT
NULL,
PRIMARY KEY
，只能创建前缀型索引。
，如果想要把MEMORY表用于范围比较（如id<100），
2.6表的创建、删除、索引和更改
8
---
## Page 108
和改善查询性能。下面列出的是一些能体现 ALTER TABLE 语句价值的情况。
最终证明当初定义的列宽过大，完全超出实际的需要，你想要把它们缩短一些，以便节省空间