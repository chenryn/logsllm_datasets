Fig. 1: DRAM architecture and relevant DRAM operations. (a) the
rank/bank hierarchy in a DRAM device, (b) row addressing after rank/bank
selection, (c) activating a row X+ 1 in a bank using ACT to bring its content
(e) activating another row X− 1. Repeated activation of rows X+ 1 and X− 1
to the row buffer, (d) deactivating the row in the row buffer using PRE,
can potentially trigger Rowhammer bit flips in row X.
II. BACKGROUND
We briefly discuss the architecture and operation of a DRAM
device (§II-A) before discussing the Rowhammer vulnerability
(§II-B). We then introduce the current proposals for mitigating
Rowhammer and discuss their limitations (§II-C). We kindly
refer the reader to Table IV (Appendix E) for a summary of
all symbols introduced in this and following sections.
A. DRAM architecture
The architecture of DRAM and its basic operation is depicted
in Figure 1. Like most memory devices, a principal abstraction
in DRAM is the association of data with its address. A DRAM
address traverses a hierarchy, starting with a channel and
continuing to a specific connected DRAM device. Once a
device is selected, the data address is further used to identify
a rank and then a specific bank within that rank (Figure 1-
a). Each bank is a matrix of cells that stores information
using a capacitor (Figure 1-b). When data has to be read
or written, its associated row has to be activated using the
DRAM ACTIVATE (ACT) command, which connects the row
to the row buffer (Figure 1-c), making the bank active. To
deactivate a bank, the DRAM PRECHARGE (PRE) command
is used. The memory controller can decide when to send the
PRE command based on a policy. With a closed-page policy,
the memory controller sends the PRE command right after or
with the DRAM access. In contrast, with an open-page policy,
the memory controller can delay the PRE command. Internally
and transparently to the outside world, banks can further be
divided into subarrays [32]. Each subarray has its own local row
buffer, which is connected to the bank’s row buffer. Subarrays
allow for parallelization of certain DRAM operations such
as the REFRESH (REF) command. Because of the physical
nature of capacitors, their charge constantly leaks. To preserve
their value, the CPU’s memory controller periodically sends
REF commands to DRAM, which triggers an internal refresh
mechanism. Each issued REF only covers a fraction of the
addresses. The JEDEC DRAM standard requires each row
to be refreshed at least once in a tREFW and the memory
controller to issue REFs at intervals defined by tREFI [29],
[30]. As an example, if tREFW equals 64 ms and tREFI
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:57:04 UTC from IEEE Xplore.  Restrictions apply. 
736
a)b)Rank1Bank1BankN......DRAMe)x+1x-1xDecoderAddressc)Bankactived)BankinprechargeBankactiveequals 7.8125 µs, the memory controller needs to send a total
of 8192 REF commands in a tREFW.
B. Rowhammer
Thanks to continuous improvements in process technology,
we observe an increased DRAM chip density each year.
Unfortunately, this comes at a reliability cost [33]. As DRAM
rows get closer to each other, their electrical isolation gets
compromised. Rowhammer is an attack based on repeated row
activations [15] that causes cells in nearby rows to leak charge
and eventually change their stored values (i.e., bits flip). The
row with repeated activations is commonly referred to as the
aggressor row. The repeated activations of an aggressor row
affect its neighboring rows, which are commonly referred to
as victim rows. A variant of this attack where a victim row
is sandwiched between two aggressor rows, known as double-
sided Rowhammer, is depicted in Figure 1 (c-e). Recently, it
has been shown that an aggressor row can influence victims
that are two rows apart from the aggressor [34]. This means
that in certain DRAM devices, an aggressor can have a blast
diameter (B) of 4, affecting up to four victim rows.
Seaborn [14] showed for the first time that Rowhammer
bit flips could severely compromise security by building a
native privilege-escalation exploit. Plenty of other attacks
followed [35]–[42], where researchers showed that it is possible
to use these bit flips to compromise browsers [5]–[7], cloud
virtual machines [10], [11], mobile phones [8], [9] and even
remote machines over the network [12], [13].
C. Rowhammer mitigations
In response to these attacks, many solutions have attempted
to mitigate Rowhammer in software or hardware. The ones
implemented in software, usually inside the operating system’s
kernel, try to detect aggressor accesses and refresh their
victims [22], isolating sensitive data from bit flips [9], [24],
[25], or using certain pages to store sensitive information [43].
Unfortunately, these solutions require adoption by operating
systems, which has not happened to date. They are also often
vulnerable to more advanced attacks [8], [26], [44].
At the hardware level, Rowhammer can be mitigated either
at the CPU’s memory controller or inside the DRAM itself.
Over the years, there have been many proposals by academia to
modify the memory controller to detect aggressor rows either
deterministically [16], [17], [19], [20], [45] or probabilisti-
cally [15], [17] and to refresh their victims under the Target
Row Refresh (TRR) scheme. Except for a low-cost solution
that was briefly adopted by Intel [1], [15], [46], the remaining
ones require extensive modifications to the CPU’s memory
controller with non-trivial area or performance overhead. As a
result, they have not seen any adoption [1]. It is unlikely that
all CPU vendors will deploy an expensive mitigation to fix a
problem that is in the products of DRAM vendors. Perhaps, the
only enabled mitigation in the CPU is the memory controller-
based Error-Correction Code (ECC) in server systems. This
covers only a fraction of existing computer systems that use
DRAM, and even then, ECC does not provide an adequate
level of protection against Rowhammer attacks [23], [47].
Rowhammer is a DRAM vulnerability, and arguably the best
place to address it is inside the DRAM itself. In fact, this is
exactly what DRAM vendors have done [27], [28]. Unfortu-
nately, these in-DRAM TRR mitigations are undocumented
and lack formal security guarantees. Recent work shows that
there are indeed gaps in currently deployed mitigations and
slight changes to existing Rowhammer patterns result in bit
flips to resurface [1]–[3]. The only existing academic work
on in-DRAM TRR [48] similarly suffers from slightly more
advanced patterns [19]. Hence, we urgently need an in-DRAM
TRR mechanism with formal security guarantees. In this paper,
we show not only that this is possible, but it can be done in a
way that is optimal in terms of the number of required counters
and the introduced refresh overhead.
III. THREAT MODEL
We consider a DRAM device that is affected by the Rowham-
mer vulnerability. At the time of this writing, Rowhammer
is present in all recent DRAM technologies [3], [21]. We
assume that bits start to flip after Rthresh cumulative accesses
to aggressor rows and that each aggressor row can influence up
to B victim rows. We assume an adversary that is capable of
sending requests to the DRAM device either through local code
execution [8]–[11], [14], [44], [47], from the Web [4]–[7], or
even over the network [12], [13] through a CPU that deploys
a memory controller that is compliant with the respective
DRAM standard [29], [30]. The aim of the adversary is to
craft an access pattern that triggers Rowhammer bit flips to
compromise the system by ensuring that a victim is hammered
at least Rthresh times. Our mitigation should provide a formal
guarantee that no row can be hammered Rthresh times before
it is protected by TRR.
IV. REFRESH MANAGEMENT IN DDR5
Recent (LP)DDR4 devices internally perform TRRs on po-
tential victim rows, whenever they receive REF commands [1].
In theory, it is possible to perform TRRs during the execution of
other DRAM commands such as ACT or read/write. However,
as these commands are latency-critical, it would adversely
affect the performance. As such, the REF is shared between
regular refreshes and TRRs. Consequently, TRRs are scarcely
performed and can only refresh a limited number of rows each
time. Performing multiple TRRs overloads the REF command,
and moving to smaller technology nodes with increasing
Rowhammer vulnerability [21] only exacerbates this problem.
As a remedy, the DDR5 standard [30] introduces a new DRAM
command called Refresh Management (RFM) that provides
additional time for TRRs.
RFM mechanisms. An RFM command either targets the
same bank address in each bankgroup (RFMsb) or all banks
(RFMab). Each bank has a counter called Rolling Accumulated
ACT (RAA) that tracks the number of received ACTs. Once
RAA reaches a maximum value defined as RAA Maximum
Management Threshold (RAAMMT), no more ACTs are accepted
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:57:04 UTC from IEEE Xplore.  Restrictions apply. 
737
Fig. 2: RFM example. Activations are sent to the same bank, increasing
RAA. At each REF, RAA is decremented by RAAIMT. Once the RAA reaches
RAAMMT, the bank does not accept any ACTs anymore. In this case, issuing
a RFM can reduce the counter by RAAIMT to unblock it before the next REF,
which will also reduce the RAA counter value.
by the bank until the RAA counter is decremented. There are
two possibilities to decrement this counter: RFM and REF
commands. Every time an RFM is received, the target banks’
RAA is reduced by the value set in the Initial Management
Threshold (RAAIMT). Instead, REF reduces RAA either by 0.5×
or 1× of the RAAIMT, depending on the value of the MR59
OP[7:6] DRAM register. Figure 2 summarizes these concepts
with an example. In the current DDR5 standard, valid values
for RAAIMT range from 32 to 80, in steps of 8. Since the
RFM command can be postponed by the memory controller,
in practice RAAIMT defines the average number of activations
received by a bank before an RFM is issued. Instead, RAAMMT
= m× RAAIMT defines the maximum number of activations
before an RFM or a REF must be issued, where m is an integer
between 3 and 6 set by the DRAM. This gives the memory
controller flexibility for scheduling RFM and REF commands
as long as a bank’s RAA count remains below RAAMMT.
V. FEINTING
As stated in § II, the design of a secure and working in-
DRAM TRR is still an open problem. The operations of such a
mitigation are fundamentally different from those implemented
inside the memory controller. In particular, (i) the points at
which TRRs can be performed in a tREFW are limited, and
(ii) only a small number of rows can be refreshed at each point.
In other words, performing in-DRAM TRR means occa-
sionally refreshing a bounded number of rows. Therefore, to
successfully protect against Rowhammer, the mitigation has to
use the available TRRs effectively. Given these conditions, the
only way to implement a secure mitigation is to proactively
refresh rows. To provide deterministic guarantees, a proactive
TRR scheme must keep track of row activations. This can be
achieved by storing a list of victims or aggressors. Additionally,
we define a Rowhammer mitigation to be proactive if (i) rows
are refreshed without using a fixed hammering threshold, and
(ii) the TRR mechanism is triggered periodically. In a proactive
mitigation, every time the mechanism is triggered (TRR event),
the most hammered V victim rows (TRR volume) are refreshed.
Because this happens periodically, we consider two consecutive
TRR events to be interleaved by T activations (interval).
In this section, we consider an ideal TRR scheme, TRRideal,
which has a hammer counter for each victim row. The victim
row’s counter increases every time one of its aggressor rows is
activated, TRRed or refreshed by the regular REF. The victim
row’s counter is reset to zero every time the victim row is
activated, TRRed, or refreshed by the regular REF. For clarity,
we define REFI as the refresh where a specific row is regularly
refreshed (i.e., not TRRed). In §VI, we show how we can relax
these requirements to build an in-DRAM TRR scheme that
is both counter- and TRR-optimal while providing the same
guarantees as TRRideal.
A. Security analysis of TRRideal
the hammer count of row ˜x after the α-th ACT of the attack.
Any proactive TRR mitigation can protect up to a specific
degree of Rowhammer vulnerability (Rthresh). In an ideal
proactive mitigation with unlimited counters, this limit depends
on V , T and B. Selecting V and T (B is technology-
dependent), there exists a maximum count (Hammer max) that
a victim row can reach before getting refreshed either by REFI
or TRR.
Definition 1 (Victim hammering). A victim row ˜x is hammered
each time one of its aggressor rows ˜r is activated (i.e., ˜x is
or an activation.
Definition 2 (Rowhammer attack). We define a Rowhammer
one of the B/2 rows on each side of ˜r). We denote by x(α)
x(α) becomes zero every time ˜x is subject to REFI, T RR,
attackA on a victim ˜x, as a finite sequence of Lattk activations
to a bank’s rows.A is successful against ˜x iff∃α≥ 1∣ x(α)≥
set of finite sequences over(cid:74)1, Nrows(cid:75), with Nrows being the
given (V, T, B, mitigation), we define Hammer max
=
maxA max1≤x≤Nrows maxα≥1[x(α)]. An attack A ∈ A is
optimal against a victim ˜x iffA reaches Hammer max.
number of rows in a bank.
Definition 3 (Optimal Rowhammer attack).
Rthresh. We denote by A the set of all attacks, which is the
For a
Following, we express the security requirement for TRRideal:
Requirement (Security of TRRideal). For a given DRAM
technology (B, Rthresh) and configuration (V , T ), TRRideal
is secure if Hammer max< Rthresh.
Identifying Hammer max corresponds to finding the optimal
Rowhammer attack against the mitigation. In what follows, we
present and prove the best attack against TRRideal.
Assumptions. In our analysis, (i) we consider a memory
controller with a closed-page policy (i.e., no bank collisions are
required to induce a PRECHARGE); (ii) if during a TRR event,
more than V rows have the same highest count, we consider an
attacker that is able to influence which are refreshed; (iii) we
assume an attacker that knows when the rows are refreshed
by the REFI — including the victim ˜x. These assumptions
constitute the worst possible conditions for the defender.
Without TRR, all the activations in a tREFW (LtREF W )
can be used against the victim. However, this approach would
quickly fail against a proactive mitigation: the mechanism
would refresh the victim at the first TRR event, as the victim
row would have the highest count. We will demonstrate that
by using a specific activation pattern, the TRR event will never
refresh the target victim before its REFI. Moreover, we will
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:57:04 UTC from IEEE Xplore.  Restrictions apply. 
738
TimeRAAIMTBank is blockedRAA(bank 1)REFREFRFMRAAMMTshow how this pattern can be used to build the best possible
attack against TRRideal, which we refer to as FEINTING1.
Decoy rows. Given a target victim row ˜x, the attacker aims
at activating the aggressor rows while protecting the victim
from refreshes. During a TRR event, the only case where ˜x is
not refreshed is if there are at least V different victim rows
(decoys) with a greater or equal hammer count. When this
happens, we say that the victim “survives” the TRR event.
Definition 4 (Conditions for victim survival). A victim row
˜x is not refreshed during a TRR event, after activation α, iff
there exist V distinct rows ˜d1... ˜dV , each different from ˜x, such
that minj[dj(α)] ≥ x(α). We refer to the rows ˜d1.. ˜dV as
“decoys”.
Every time a victim is hammered, its counter is incremented
by one. Given Definition 4, it follows that decoy rows must be