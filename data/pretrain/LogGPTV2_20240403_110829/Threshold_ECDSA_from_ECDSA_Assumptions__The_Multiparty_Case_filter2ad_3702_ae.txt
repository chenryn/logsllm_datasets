represent the same polynomial by homomorphically evaluating
the polynomial in the curve group. For degree-2 polynomials,
Doerner et al. required a number of evaluations quadratic in
n, whereas we require only a linear number regardless of the
polynomial degree. Since the homomorphic evaluation of the
polynomial is equal to pk, an adversary can learn nothing more
from the protocol than could be learned from any protocol that
realizes the same functionality.
Protocol 3. Setup
This protocol is parameterized by the Elliptic curve (G, G, q),
and invokes the F (cid:4)
Com-ZK functionalities.
It runs among a group of parties {Pi}i∈[1,n], taking no input,
and yielding to each party Pi a point p(i) on the polynomial
p, and the joint public key pk.
Public Key Generation:
1) Each party Pi samples a random degree polynomial pi
2) For all pairs of parties Pi and Pj, Pi sends pi(j) to Pj
(cid:2)
3) Each party Pi computes its point
πt,n
2PMul, F (cid:4),t,n
:
, and F RDL,n
and receives pj(i) in return.
of degree t − 1.
ECDSA-Setup
(cid:7)
(cid:8)
Mul
p(i) ..=
pj(i)
i
i
.
j∈[1,n]
4) Each party Pi computes Ti
, p(i), Ti) to F RDL,n
..= p(i) · G and sends
Com-ZK, using a
6) Each party Pi
(com-proof, idcom-zk
fresh, unique value for idcom-zk
5) Upon being notiﬁed of all other parties’ commit-
ments, each party Pi releases its proof by sending
(decom-proof, idcom-zk
, Tj) from
F RDL,n
Com-ZK for each j ∈ [1, n]\{i} if Pj’s proof of knowl-
edge is valid. Pi aborts if it receives (fail, idcom-zk
)
instead for any proof, or if there exists an index
x ∈ [1, n − t − 1] such that Jx = [x, x + t] and
Jx+1 = [x + 1, x + t + 1] and
i
receives (accept, idcom-zk
) to F RDL,n
Com-ZK.
j
j
(cid:2)
j∈Jx
λJx
j
· Tj (cid:10)=
λJx+1
j
· Tj
(cid:2)
j∈Jx+1
j
j
and λJx+1
are party Pj’s Lagrange coefﬁ-
where λJx
cients for Shamir reconstruction with the sets of parties
indexed by Jx and Jx+1 respectively.
subset J ⊆ [1, n] such that |J| = t
j · Tj
λJ
7) The parties compute the shared public key using any
(cid:2)
pk ..=
j∈J
Auxiliary Setup:
8) Every party sends the (init) message to the F (cid:4),t,n
9) Every pair of parties Pi and Pj such that i < j sends
functionality.
the (init) message to the F (cid:4)
2PMul functionality.
Mul
Round Count. The Public Key Generation portion of
πt,n
ECDSA-Setup requires three broadcast rounds in total, but
the initialization procedures in the Auxiliary Setup phase
require ﬁve, when F η
COTe instantiated with Keller et al.’s OT-
extension [29] and the VSOT protocol [1], as we intend. Since
Auxiliary Setup is independent of Key Generation, these phases
can be run concurrently, and the round count can be as low as
ﬁve, concretely. Our implementation, however, runs them in
sequence, yielding eight concrete rounds.
C. Threshold Signing
(cid:8)
(cid:7)
πt,n
ECDSA-Sign
Finally, we give our protocol for arbitrary-threshold ECDSA
signing. It follows the same general plan as that of Doerner
et al. [1], being broken down into four distinct stages. Note,
however, that unlike their protocol, the roles of all parties are
symmetric, and all parties receive the ﬁnal signature at the
end (subject to the adversary’s approval). The parties begin
by sampling multiplicative shares of the instance key k, from
which they can locally compute multiplicative sharings of 1/k
and ski/k for i ∈ P, where P is the set of signing parties
and ski is the ith party’s additive share of sk. The multipliers
discussed in prior sections are then used to convert these
multiplicative sharings into additive sharings, and a consistency
check ensures that they are all consistent with one another.
Finally, each party creates a linear share of the signature using
the information known to it, and the parties exchange shares.
Protocol 4. Signing
This protocol is parameterized by the Elliptic curve (G, G, q)
and the statistical security parameter s, and invokes the F (cid:4)
2PMul,
F (cid:4),t,n
Com-ZK functionalities. It runs among a group
of parties P ⊆ [1, n] such that |P| = t, taking as input the
public key pk, the message m, and the signature index idsig
(which is used to generate other unique indices as required)
from each party Pi, along with a point p(i) on the polynomial
that encodes the secret key, and yielding to each party a copy
of the signature σ.
Instance Key Multiplication:
1) Each party Pi for i ∈ P samples their multiplicative
share of the instance key ki ← Zq and a uniform pad
value φi ← Zq, and commits to the pad by sending
(commit, idcom
Com, using a fresh value for
i,1 . All other parties are notiﬁed of Pi’s commitment.
i,1
idcom
Mul with (cid:5) = 2, supplying
{ki, φi/ki} as its input along with a fresh, agreed-upon
multiplication index, and receiving as output {ui, vi}.
We elide the speciﬁc messages exchanged with the
, φi, P) to F n
2) Each party Pi invokes F (cid:4),t,n
, and F RDL,n
Mul
:
(cid:18)(cid:17)(cid:23)(cid:17)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:46:34 UTC from IEEE Xplore.  Restrictions apply. 
functionality in this process, but note that
ui =
ki = k
and
vi =
(cid:2)
i∈P
!
i∈P
(cid:2)
i∈P
!
i∈P
φi
ki
=
φ
k
Secret Key Multiplication:
3) Each party Pi computes λP
i , its Lagrange coefﬁcient
given that it is reconstructing sk with the parties in P.
Pi then computes ski, its additive share of the secret
key for this group of parties
ski ..= λP
i
· p(i)
4) Each pair of parties, Pi and Pj invoke F (cid:4)
2PMul with (cid:5) = 2.
The party with the lower index plays the role of Alice
and the other Bob, and they use a fresh, agreed-upon
multiplication index. The parties run the multiplication
preprocessing and input phases, with Pi supplying as
input {ski, vi} and Pj supplying {vj, skj}. As outputs
they receive {wj,1
j }, respectively.
We again elide the speciﬁc messages involved in this
process, but note that
j = ski· vj
wj,1
i + wi,1
5) Each party Pi sets
i } and {wi,1
wj,2
i + wi,2
j = skj · vi
$
, wj,2
, wi,2
#
and
(cid:2)
j
i
wi ..= ski · vi +
wj,1
i + wj,2
i
j∈P\{i}
i
Consistency Check:
6) Each party Pi computes Ri ..= ui · G and commits to a
proof of knowledge of discrete logarithm for this value
, ui, Ri, P) to F RDL,n
by sending (com-proof, idcom-zk
Com-ZK,
using a fresh value for idcom-zk
.
7) Upon being notiﬁed of all other parties’ commitments,
each party Pi releases the previous proof by sending
(decom-proof, idcom-zk
, Rj) from
F RDL,n
Com-ZK for each j ∈ P\{i} if Pj’s proof of knowledge
is valid. Once these messages are received, Pi computes
8) Each party Pi receives (accept, idcom-zk
) to F RDL,n
(cid:2)
Com-ZK
j
i
i
R ..=
Rj
j∈P
If Pi instead receives (fail, idcom-zk
then it aborts.
j
9) Each party Pi calculates
) for any proof,
Γ 1
i
Γ 2
i
Γ 3
i
..= vi · R
..= vi · pk − wi · G
..= wi · R
(cid:7)
(cid:8)
and commits to all three values simultaneously by send-
ing (commit, idcom
,
Com, using a
i,2
fresh value for idcom
i,2 .
Pi sends (decommit, idcom
10) Upon being notiﬁed of all other parties’ commitments,
i,2 ) to
i,1 ) and (decommit, idcom
, P) to F n
Γ 1
i , Γ 2
i , Γ 3
i
j , Γ 2
j , Γ 3
j )}j∈P\{i} as the
F n
Com and collects {(φj, Γ 1
other parties do the same.
!
11) Each party Pi computes
φ ..=
φj
j∈P
and aborts if(cid:2)
j∈P
∨
j (cid:10)= φ · G ∨ φ = 0
(cid:2)
(cid:2)
Γ 1
j (cid:10)= 0 ∨
Γ 2
j∈P
j∈P
j (cid:10)= φ · pk
Γ 3
Signing:
12) Each party Pi calculates
H(m) · vi + rx · wi
sigi
..=
φ
and broadcasts sigi.
13) Each party computes
(cid:2)
i∈P
sig ..=
sigi
and
σ ..= (sig, rx)
where (rx, ry) = R, and outputs σ if Verify(pk, σ) = 1.
ECDSA-Setup and πt,n
Theorem V.1. The protocols πt,n
UC-realize the functionality F t,n
ECDSA-Sign
ECDSA for the elliptic curve
group (G, G, q) in the (F (cid:4),t,n
,F (cid:4)
Com-ZK)-hybrid
2PMul
Random Oracle Model, in the presence of a malicious adversary
statically corrupting up to t − 1 parties, if the Computational
Difﬁe-Hellman problem is hard in G.
,F RDL,n
,F n
Com
Mul
Security. In the following paragraphs we informally discuss the
security properties of πt,n
ECDSA-Sign, in order to give the reader an
intuitive notion of the attacks that are possible when a malicious
adversary corrupts a majority of parties, and the way in which
the consistency check acts to prevent them. This section serves
only to develop an intuition; we provide a formal discussion
and a proof of Theorem V.1 in the full version of this paper.
We make the simplifying assumption that the adversary always
corrupts t − 1 parties (that is, all but one), which are indexed
∗ ⊂ P, but note that our discussion applies
by the vector P