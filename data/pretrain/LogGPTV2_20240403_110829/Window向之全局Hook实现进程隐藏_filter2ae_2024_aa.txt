# Window向之全局Hook实现进程隐藏
## 0x0 前言
网上有不少文章都讲解了通过注入进程管理器实现进程隐藏的思路，笔者在前人的基础上，以萌新的视角对于如何实现更高级的全局Hook进行了一番学习，通过本文，读者学习到window的相关机制和一些奇妙功能(键盘记录、鼠标监控)的实现原理，深入的话，还可以与目标进行有趣的对抗。
## 0x1 实现方式
介绍下笔者学习到的几种实现方式:  
1) 利用全局钩子SetWindowsHookEx  
2) AppInit_DLLs注册表键值实现globalAPIhook  
3) Hook系统进程从而监控进程创建(本文暂不介绍)
## 0x2 API Hook技术
本文倾向于面向萌新读者，主要介绍下如何快速实现API Hook技术。  
故这里可以选择性无视底层实现的原理(这个对实现本文的最终目标意义不大)
> 好奇的小伙伴，可以查阅部分原理的说明:  
>  1   
>  2  API-Hooking-Libra>
推荐一个可完美支持下x86 && x64架构的小型Hook库:
[minhook](https://github.com/TsudaKageyu/minhook)  
关于这个库还是蛮有意思的，作者是个很有趣的人，自食其力。  
### 0x2.1 Mhook安装
Window:
    git clone https://github.com/microsoft/vcpkg
    .\vcpkg\bootstrap-vcpkg.bat
    .\vcpkg\vcpkg integrate install
    .\vcpkg\vcpkg install minhook
虚拟机用win10，没有自带git的话,启动powershell,来下载
    1. Invoke-WebRequest -Uri 'https://github.com/microsoft/vcpkg/archive/refs/heads/master.zip'  -outFile vcpkg.zip
    2. Expand-Archive -Path '.\vcpkg.zip' -DestinationPath '.\vcpkg'
    3. cd .\vcpkg && bootstrap-vcpkg.bat
    4. vcpkg.exe integrate install
    5. vcpkg.exe instal minhook
    6. vcpkg.exe install minhook:window-x64
### 0x2.2 Mhook上手
有时候想要上手一门东西，其实看文档就可以。（文档的作用恰恰在此)  
那么还想要更快速上手呢? 看文档给出的Example  
通过阅读:
尝试Hook `MessageBoxW()`  
打开visual stdio 2019 新建个Console项目:
    #include 
    #include 
    #include "MinHook.h"
    #if defined _M_X64
    #pragma comment(lib, "minhook.x64.lib")
    #elif defined _M_IX86
    #pragma comment(lib, "minhook.x86.lib")
    #endif
    // 定义一个指针类型
    typedef int (WINAPI* MESSAGEBOXW)(HWND, LPCWSTR, LPCWSTR, UINT);
    // 先创建一个保存原先MessageBoxW函数的指针
    MESSAGEBOXW fpMessageBoxW = NULL;
    // 替代MessageBoxW的Detour 函数
    // 打的太累，直接复制:https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-messagebox
    int WINAPI DetourMessageBoxW(HWND hWnd, LPCWSTR lpText, LPCWSTR lpCaption, UINT uType)
    {
        return fpMessageBoxW(hWnd, L"Hooked!", lpCaption, uType);
    }
    int wmain() {
        // 初始化MinHook
        if (MH_Initialize() != MH_OK) {
            printf("%ws\n", L"初始化MinHook 失败!");
            return 1;
        }
        // 创建一个处于关闭状态的 hook
        if (MH_CreateHook(&MessageBoxW, &DetourMessageBoxW, reinterpret_cast(&fpMessageBoxW)) != MH_OK) {
            printf("%ws\n", L"创建Hook 失败!");
            return 1;
        }
        // 开启Hook的状态
        if (MH_EnableHook(&MessageBoxW) != MH_OK) {
            printf("%ws\n", L"开启Hook 失败!");
            return 1;
        }
        //  检验Hook效果，期待返回文本值"Hooked"!
        MessageBoxW(NULL, L"Not hooked ...", L"MinHook Sample", MB_OK);
        // 关闭Hook状态
        if (MH_DisableHook(&MessageBoxW) != MH_OK) {
            printf("%ws\n", L"关闭Hook 失败!");
        }
        // 检验关闭Hook后的效果，正常返回
        MessageBoxW(NULL, L"Not hooked...", L"MinHook Sample", MB_OK);
        // 关闭MinHook
        if (MH_Uninitialize() != MH_OK)
        {
            return 1;
        }
        return 0;
    }
Hook后:  
unHook 后  
短短几行直观简洁的代码实现的效果还是很棒的。  
代码还可以进行一层函数封装，这样可以避免每次都要添加`reinterpret_cast`进行类型转换。
    template 
    inline MH_STATUS MH_CreateHookEx(LPVOID pTarget, LPVOID pDetour, T** ppOriginal)
    {
        return MH_CreateHook(pTarget, pDetour, reinterpret_cast(ppOriginal));
    }
    template 
    inline MH_STATUS MH_CreateHookApiEx(
        LPCWSTR pszModule, LPCSTR pszProcName, LPVOID pDetour, T** ppOriginal)
    {
        return MH_CreateHookApi(
            pszModule, pszProcName, pDetour, reinterpret_cast(ppOriginal));
    }
调用的话就可以变成:
    if (MH_CreateHookApiEx(L"user32", "MessageBoxW", &DetourMessageBoxW, &fpMessageBoxW) != MH_OK) {
            printf("%ws\n", L"创建Hook失败!");
            return 1;
        }
        // or
        if (MH_CreateHookEx(&MessageBoxW, &DetourMessageBoxW, &fpMessageBoxW) != MH_OK) {
            printf("%ws\n", L"创建Hook失败!");
            return 1;
        }
## 0x3 隐藏进程
### 0x3.1 原理简析
系统位置:  
`C:\Windows\System32\tasklist.exe`  
`C:\Windows\System32\Taskmgr.exe`  
分别用IDA进行载入:
1) tasklist.exe  
先查看导出表，发现并没有进行系统查询的API。  
跟入口:`wmain`->`CTaskList::Show`(带参数)  
可以看到tasklist的流程是通过一个指针函数枚举出所有进程id。  
然后`SetStoreAppInfo`->`NtQueryInformationProcess`查询指定进程信息。  
关于这个枚举pid的进程函数的具体实现，因为涉及到一些笔者知识盲点，故在此作罢。
> 查看这个程序文档，还可以发现有趣的是，这个还支持远程枚举，挺好玩的一个原生域横向小技巧。  
>
> 
2) Taskmgr.exe  
导出表:  
查看相关引用，发现`WdcMemoryMonitor::Query`->`WdcNtQuerySystemSuperfetchInformation`->`NtQuerySystemInformation`
这里的话，tasklist.exe是否通过其他手段调用NTDLL，或者是做了一些保护，尚不得知，而且tasklist.exe一般是通过即时调用，整个过程来不及注入DLL，故这里笔者采用大部分通杀的方法直接Hook
`NtQuerySystemInformation`。
* * *
下面是调试得到的一些编程小技巧，下面代码实现会有使用到:
编码的时候有些未文档化的函数，可以通过查看结构来补全或者使用这个网站[结构体查询网站](http://terminus.rewolf.pl/terminus/)
windbg加载符号表:
    .sympath srv*c:\Symbols*https://msdl.microsoft.com/download/symbols
    加载完成之后重新载入
    .reload
查看结构
    dt _SYSTEM_PROCESS_INFORMATION
### 0x3.2 Hook实现
vcpkg下载编译的在DLL初始化中存在问题，这里笔者改为官方编译好的lib:  
启动PowerShell:
    Invoke-WebRequest  -uri https://github.com/TsudaKageyu/minhook/releases/download/v1.3.3/MinHook_133_lib.zip -outFile MinHook_all.zip
    Expand-Archive -Path  MinHook_all.zip -destinationPath ./MinHook_all
配置好依赖的路径和附加包含目录，记得选择所有平台，这样可全局覆盖。
C代码实现:
    // dllmain.cpp : 定义 DLL 应用程序的入口点。
    #include "pch.h"
    #include 
    #include 
    #if defined _M_X64
    #pragma comment(lib, "libMinHook-x64-v140-mt.lib")
    #elif defined _M_IX86
    #pragma comment(lib, "libMinHook-x86-v140-mt.lib")
    #endif
    // 摘取文档核心的几个偏移即可,新增个指针方便类型转换
    // 原类型不支持类型转换
    typedef struct _MY_SYSTEM_PROCESS_INFORMATION
    {
        ULONG NextEntryOffset;
        ULONG NumberOfThreads;
        BYTE Reserved1[48];
        UNICODE_STRING ImageName;
        KPRIORITY BasePriority;