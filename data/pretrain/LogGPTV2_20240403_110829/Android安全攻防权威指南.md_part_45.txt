## 7.6 调试原生代码

如注释所述，第一个命令用于告知GDB客户端在当前目录下查找符号文件。GDB服务器会指定需要加载的模块，而GDB客户端则根据这些指示来加载相应的模块。第二个命令大家应该比较熟悉，它指定了GDB客户端连接到GDB服务器的具体位置。

最后，可以通过运行程序来观察整个调试过程。以下片段展示了在最精简配置下的调试情况：

```shell
dev:gn-browser-dbg $ arm-eabi-gdb -q -x script.gdb app_process
Reading symbols from /android/source/gn-browser-dbg/app_process...done.
Warning: Could not load shared library symbols for some libraries, e.g., libm.
Use the "info sharedlibrary" command to see the complete listing.
Breakpoint address adjusted from 0x40079b79 to 0x40079b78.
epoll_wait () at bionic/libc/arch-arm/syscalls/epoll_wait.S:10
(gdb) back
#0 epoll_wait () at bionic/libc/arch-arm/syscalls/epoll_wait.S:10
#1 0x400d1fcc in android::Looper::pollInner (this=0x415874c8, timeoutMillis=optimized out)
    at frameworks/native/libs/utils/Looper.cpp:218
#2 0x400d21f0 in android::Looper::pollOnce (this=0x415874c8, timeoutMillis=-1, outFd=0x0, outEvents=0x0, outData=0x0)
    at frameworks/native/libs/utils/Looper.cpp:189
#3 0x40209c68 in pollOnce (timeoutMillis=, this=) at frameworks/native/include/utils/Looper.h:176
#4 0x401ee32a in android::AndroidRuntime::start (this=, options=) at frameworks/base/core/jni/AndroidRuntime.cpp:231
#5 0x4000d05e in main (argc=4, argv=0xbec94b38) at frameworks/base/cmds/app_process/app_main.cpp:231
```

从 `libwebcore.so` 中加载符号可能需要较长时间，因为该库体积庞大。使用SSD或RAM磁盘可以显著加快加载速度。从上面的片段可以看出，完全符号化的调试信息能够显示函数名、源代码文件、行号甚至函数参数。

### 3. 源代码级调试

交互式调试的最终目标是在源代码级别进行工作。幸运的是，通过AOSP中检出的代码和AOSP支持的Nexus设备，可以实现这一目标。如果按照前面小节中的步骤操作，并使用自编译的带符号的二进制文件，已经可以实现源代码级别的调试。以下片段展示了如何在GDB客户端中执行一些命令以查看调试过程：

```shell
(gdb) list
10      ENTRY(epoll_wait)
11      mov     r7, ip
12      ldr     r7, =_NR_epoll_wait
13      svc     #0
14      bxls    r7, ip
15      neg     r0, r0
16      b       _set_errno
17
18  int eventCount = epoll_wait(mEpollFd, eventItems, EPOLL_MAX_EVENTS, timeoutMillis);
19
20  int result = ALREADY_POLLED_WAKE;
21  mResponses.clear();
22  nResponseIndex = 0;
```

附加到目标进程后，可以看到调用栈中的汇编代码和C++源代码。GDB的 `list` 命令会显示当前代码位置附近的10行代码。`up` 命令在调用栈中向上移动（调用帧方向），`down` 命令向下移动。

如果符号是在其他机器上生成的，或者符号生成后源代码被移动，那么源代码将无法显示，并会出现错误信息。例如：

```shell
(gdb) up
#0 0x400d1fce in android::Looper::pollInner (this=0x415874c8, timeoutMillis=optimized out)
    at frameworks/native/libs/utils/Looper.cpp:218
218   frameworks/native/libs/utils/Looper.cpp: No such file or directory.
In frameworks/native/libs/utils/Looper.cpp
```

为了解决这个问题，需要创建符号链接，使其指向文件系统中源代码所在的位置。以下片段展示了所需的命令：

```shell
dev:gn-browser-dbg $ ln -s ~/android/source/dalvik
dev:gn-browser-dbg $ ln -s ~/android/source/external
```

完成以上操作后，就可以恢复源代码级别的调试了。此时可以在GDB中查看源代码，基于源代码位置设置断点，以漂亮的格式显示结构等。

```shell
(gdb) break RenderObject::paint
Breakpoint 1 at 0x5d3a3e44: file external/webkit/Source/WebCore/rendering/RenderObject.h, line 524.
Continuing.
(gdb) cont
```

只要浏览器打开一个页面，就会触发该断点。在其上下文中，可以查看 `RenderObject` 的状态并分析发生了什么。第8章将详细讨论这些对象。

### 7.6.6 调试非AOSP设备

有时候需要调试运行在非AOSP设备上的代码。可能有bug的代码并没有在AOSP支持的设备上出现，或者相应代码与AOSP中的不同。后者经常出现在原始设备制造商（OEM）直接出售的设备上，因为在OEM开发线中所做的修改可能会引入AOSP中不存在的问题。不幸的是，在这些设备上的调试更加麻烦。

在这些设备上调试会面临一些挑战，主要集中在两个问题上。首先，难以准确知道该设备系统是使用哪种工具链生成的。OEM可能选择商业工具链、老版本的公开工具，甚至是自定义修改后的工具链。即使成功确定了所使用的工具链，也可能无法获取到该工具链。使用正确的工具链很重要，因为一些工具链之间可能不兼容。例如，GDB支持的不同协议可能导致调试失败。