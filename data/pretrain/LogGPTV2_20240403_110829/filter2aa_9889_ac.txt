    return s
# round 4 (no MixColumn operation)
def finalRound(s, ks, r):
    s = SubBytes(s)
    s = Shiftrows(s)
    s = AddRoundKey(s,ks,r)
    return s
def finalRoundDecrypt(s, ks, r):
    s = AddRoundKey(s,ks,r)
    s = InvShiftrows(s)
    s = InvSubBytes(s)
    return s
# Put it all together
def encrypt4rounds(message, key):
    s = []
    #convert plaintext to state
    s.append(message[:4])
    s.append(message[4:8])
    s.append(message[8:12])
    s.append(message[12:16])
    #printState(s)
    #compute key schedule
    ks = KeyExpansion(key)
    #apply whitening key
    s = AddRoundKey(s,ks,0)
    #printState(s)
    c = oneRound(s, ks, 1)
    c = oneRound(c, ks, 2)
    c = oneRound(c, ks, 3)
    #printState(c)
    c = finalRound(c, ks, 4)
    #printState(c)
    #convert back to 1d list
    output = []
    for i in range(len(c)):
        for j in range(len(c[i])):
            output.append(c[i][j])
    return output
def swapRows(rows):
    result = []
    for i in range(4):
        for j in range(4):
            result.append(rows[j*4+i])
    return result
def decrypt4rounds(message, key):
    #message = swapRows(message)
    s = []
    #convert plaintext to state
    s.append(message[:4])
    s.append(message[4:8])
    s.append(message[8:12])
    s.append(message[12:16])
    #printState(s)
    #compute key schedule
    ks = KeyExpansion(key)
    #apply whitening key
    #printState(s)
    s = finalRoundDecrypt(s, ks, 4)
    c = oneRoundDecrypt(s, ks, 3)
    c = oneRoundDecrypt(c, ks, 2)
    c = oneRoundDecrypt(c, ks, 1)
    c = AddRoundKey(c,ks,0)
    #printState(c)
    #printState(c)
    #convert back to 1d list
    output = []
    for i in range(len(c)):
        for j in range(len(c[i])):
            output.append(c[i][j])
    return output
testCt = range(16)
testState = []
testState.append(testCt[:4])
testState.append(testCt[4:8])
testState.append(testCt[8:12])
testState.append(testCt[12:16])
key = [0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 
        0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c]
ks = KeyExpansion(key)
textData = [0]*16
assert AddRoundKey(AddRoundKey(testState, ks, 1), ks, 1) == testState
assert InvMixColumns(MixColumns(testState)) == testState
assert InvShiftrows(Shiftrows(testState)) == testState
assert InvSubBytes(SubBytes(testState)) == testState
assert oneRoundDecrypt(oneRound(testState, ks, 1), ks, 1) == testState
assert finalRoundDecrypt(finalRound(testState, ks, 1), ks, 1) == testState
assert decrypt4rounds(encrypt4rounds(textData, key), key) == textData
#########################
# Attack code goes here #
#########################
def backup(ct, byteGuess, byteIndex):
    # We just need to check sums
    # There is no mixColumns in the last round, so skip it.
    # shiftRows just changes the byte's position. We don't care, so skip it.
    # All we need is a single xor for the guessed byte, and InvSubBytes
    t = ct[byteIndex] ^ byteGuess
    return invsbox[t]
def integrate(index):
    if len(ciphertexts) != 256:
        print "ERROR"
    potential = []
    for candidateByte in range(256):
        sum = 0
        for ciph in ciphertexts:
            oneRoundDecr = backup(ciph, candidateByte, index)
            sum ^= oneRoundDecr
        if sum == 0:
            potential.append(candidateByte)
    return potential
from itertools import product
def integral():
    candidates = []
    for i in range(16):
        candidates.append(integrate(i))
    print 'candidates', candidates
    for roundKey in product(*candidates):
        masterKey = round2master(roundKey)
        plain = ''.join(chr(c) for c in decrypt4rounds(ciphertexts[1], masterKey))
        if '\0\0\0\0' in plain:
            print 'solved', masterKey
            return masterKey
# Calculate the master key candidate from the final round key candidate
def round2master(rk):
    Nr=4
    Nk=4
    Nb=4
    w = []
    for i in range(Nb*(Nr+1)):
        w.append([0,0,0,0])
    i=0
    while i<Nk:
        w[i] = [rk[4*i],rk[4*i+1], rk[4*i+2], rk[4*i+3]]
        #printWord(w[i])
        i = i+1
    j = Nk
    while j < Nb*(Nr+1):
        if (j%Nk) == 0:
            #print w[j-1],w[j-2]
            #tmp = SubWord(XorWords(w[j-1], w[j-2]))
            #w[j] = XorWords(XorWords(w[j-Nk], tmp), Rcon[Nr+1-j/Nk])
            #print "rcon: ", printWord(Rcon[Nr + 1 - j/Nk])
            w[j][0] = w[j-Nk][0] ^ sbox[w[j-1][1] ^ w[j-2][1]] ^ Rcon[Nr - j/Nk][0]
            for i in range(1,4):
                w[j][i] = w[j-Nk][i] ^ sbox[w[j-1][(i+1) % 4] ^ w[j-2][(i+1) % 4]]
        else:
            w[j] = XorWords(w[j-Nk], w[j-Nk-1])
        j = j+1
#    for i in range(20):
#        printWord(w[i])
    m = []
    for i in range(16,20):
        for j in range(4):
            m.append(w[i][j])
    return m
######################
# Printing functions #
######################
def printState(s):
    print "State:"
    for i in range(len(s)):
        row = s[i]
        rowstring = ""
        for j in range(len(row)):
            rowstring += "{0:02x} ".format(row[j])
        print rowstring
    print "\n"
def printKey(ks):
    for i in range(len(ks)):
        row = ks[i]
        rowstring = ""
        for j in range(len(row)):
            #rowstring += "{0:02x} ".format(row[j])
            rowstring += "{0:4} ".format(row[j])
        print rowstring
    print "\n"
###
# Main - attack code goes here
###    
key = integral()
flag1 = 'af93ceae1f1e7a1326d60551973c461b'.decode('hex')
flag2 = 'c9b1569c2cdfd55ac6ca334631fb1973'.decode('hex')
flag1 = [ord(c) for c in flag1]
flag2 = [ord(c) for c in flag2]
flag = decrypt4rounds(flag1, key) + decrypt4rounds(flag2, key)
print ''.join(chr(c) for c in flag)