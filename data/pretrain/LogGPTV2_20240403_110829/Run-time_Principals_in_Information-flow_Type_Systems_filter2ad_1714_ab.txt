### Data Permissions and Information-Flow Type System

Data must be accessible only to readers with the appropriate permissions. For example, if data is labeled with reader permissions `Alice:Bob, Charles` and `Bob:Charles, Eve`, it will be readable only by Charles and Bob. The information-flow type system ensures that data with a given confidentiality policy can only flow to destinations with labels that are at least as restrictive as the policy. This label model is decentralized, allowing each principal to specify reader sets independently.

The integrity part of a label consists of a set of principals that trust the data. The information-flow analysis ensures that less trusted data (trusted by fewer principals) is never used where more trusted data is necessary. For instance, data with an integrity label `{Alice, Bob}` is trusted by Alice and Bob but not by Charles.

Formally, we define:
- **Reader Policies (c)**: `c ::= p:s`
- **Confidentiality Policy Sets (d)**: `d ::= · | c;d`
- **Labels (l)**: `l ::= {d!s}`
  - The integrity part of a label is separated from the confidentiality part by `!`.

### Acts-for Hierarchy

The decentralized label model includes a delegation mechanism through a binary `acts-for` relation `(cid:22)` between principals. This relation is reflexive and transitive, forming a preorder on principals. The notation `p (cid:22) q` indicates that principal `q` acts for principal `p`, or that `p` delegates to `q`.

For example, consider the labels `{Alice:!Alice}` and `{Bob:!Bob}`. These labels describe data readable and trusted only by Alice and Bob, respectively. If `Alice (cid:22) Bob` is in the acts-for relation, then data with label `{Alice:!Alice}` will be readable by Bob because Bob acts for Alice. However, Bob does not trust the integrity of data with label `{Alice:!Alice}`, while Alice trusts data with label `{Bob:!Bob}` because Bob acts for Alice.

Formally, an acts-for hierarchy `∆` is a set of `p (cid:22) q` constraints. A closed hierarchy `A` contains no principal variables. We assume the existence of a unique most powerful principal `>` (called top). The notation `∆ ‘ p (cid:22) q` means that principal `q` acts for principal `p` according to hierarchy `∆`.

The `acts-for` relation extends to sets of principals: `∆ ‘ s1 (cid:22) s2` if for each principal `p ∈ s1`, there exists a principal `q ∈ s2` such that `∆ ‘ p (cid:22) q`. The meet of `s1` and `s2` is denoted by `∆ ‘ s1 u s2`, which is the largest `s3` such that `∆ ‘ s3 (cid:22) s1` and `∆ ‘ s3 (cid:22) s2`.

### Label Lattice

A label `l1` is less restrictive than a label `l2` according to an acts-for hierarchy `∆`, written `∆ ‘ l1 v l2`, when `l1` permits more readers and is at least as trusted. Formally, this relation is defined by:
- `∀c1 ∈ d1. ∃c2 ∈ d2. ∆ ‘ c1 v c2` and `∆ ‘ s2 (cid:22) s1` implies `∆ ‘ {d1!s1} v {d2!s2}`
- `∆ ‘ p1 (cid:22) p2` and `∆ ‘ s2 (cid:22) s1` implies `∆ ‘ p1:s1 v p2:s2`

We write `∆ ‘ l1 6v l2` if it is not the case that `∆ ‘ l1 v l2`. The problem of determining the `v` relation is efficiently decidable, reducing to a graph reachability problem over the finite acts-for hierarchy.

The labels form a distributive, join-semi lattice with the join operation:
- `∆ ‘ {d1!s1} t {d2!s2} def= {d1 ∪ d2!s3}` if `∆ ‘ s1 u s2 = s3`

The `v` relation describes legal information flows, and the `6v` relation describes illegal information flows. Example label inequalities include:
- `· ‘ {Alice:Bob!} v {Alice:!}`
- `· ‘ {Alice:!} 6v {Alice:Bob!}`
- `· ‘ {!Alice, Bob} v {!Alice}`
- `· ‘ {!Alice} 6v {!Alice, Bob}`
- `Alice (cid:22) Bob ‘ {Alice:!} v {Bob:!}`
- `Alice (cid:22) Bob ‘ {Bob:!} 6v {Alice:!}`
- `∆ ‘ {!>} v l` and `∆ ‘ l v {>:!}` for all `∆` and `l`

These inequalities show that the top-most label is `{>:!}` (owned by `>`, readable and trusted by no principals), and the bottom of the label lattice is `{!>}` (completely unconstrained readers, trusted by all principals).

### Run-Time Principals in Information-Flow Type Systems

This section describes the language `λRP`, a variant of the typed λ-calculus with information-flow policies. To focus on run-time principals, `λRP` does not address termination channels, state, or timing channels. The type system could be extended to remove these limitations using known techniques.

**Security Types (t)** and **Plain Types (u)** are defined as:
- `t ::= ul`
- `u ::= 1 | t + t | t → t | Pp | ∀α (cid:22) p. t | ∃α (cid:22) p. t`

**Program Terms (e)** and **Values (v)** are defined as:
- `e ::= v | x | inl e | inr e | case e v v | e e | if (e (cid:22) e) e e | e [p] | open (α, x) = e in e | * | inl v | inr v | λx: t. e | X | Λα (cid:22) p. e | pack (p (cid:22) p, v)`
- `v ::= * | inl v | inr v | λx: t. e | X | Λα (cid:22) p. e | pack (p (cid:22) p, v)`

**Evaluation Contexts (E)** are defined as:
- `E ::= inl E | inr E | case E v v | E e | v E | E [p] | if (E (cid:22) e) e e | if (v (cid:22) E) e e | open (α, x) = E in e`

**Principal Types (Pp)** are singleton types, and `∀α (cid:22) p. t` is a form of bounded quantification over principals. The type `∃α (cid:22) p. t` encapsulates the run-time identity of some principal.

For example, the Java API `Runtime.getUser` can be given the type `1 → ∃α (cid:22) >. Pα`, meaning the value is a package containing the identity of a principal, with its static type encapsulated and only its upper bound `>` revealed.

These existential types have been traditionally used for encoding modules or packages. An expression `pack (p1 (cid:22) p2, e)` hides the principal `p1` and provides a way to encapsulate the identity of a principal.