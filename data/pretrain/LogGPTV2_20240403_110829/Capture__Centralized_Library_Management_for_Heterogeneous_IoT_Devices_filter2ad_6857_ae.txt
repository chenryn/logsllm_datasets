average, 10% larger and uses 7% more on device memory.
We only measure the code increase for ESP-based devices
given they have limited ﬂash storage.
7.2 Overhead Perceived in the Real World
We implemented several IFTTT automation applets and mea-
sured Capture’s impact on latency (Table 5). We programmat-
ically trigger applets 30 times, reporting the average end-to-
end latency. These results show moderate variances, largely
due to the fact that these applets interact with remote cloud
services (IFTTT, Google Sheets, and email servers), which
is consistent with results from prior work [46]. Applets A1
and A2 show insigniﬁcant latency changes from Capture inte-
gration, indicating the communications to Internet services as
the performance bottleneck. Applet A3’s ESP32 integration
demonstrates a beneﬁt of Capture for low-budget devices. A3-
ESP32 baseline has high latency due to compute-intensive
tasks such as TLS encryption, while A3-Raspberry Pi and
Capture-integrated ones have comparable latency results.
7.3 Scalability
Since our Capture Hub executes all drivers on the hub, its
resources limit the number of devices it can support. Among
resources including memory, CPU, network interfaces, and
private IP addresses, we identify the memory capacity as the
key scaling bottleneck. The default driver for OS replacement
uses the least amount of memory (3.7 MB) while the Mag-
icMirror’s driver uses the most memory (42 MB) as reported
by smem’s Proportional Set Size [69]. Therefore, we emulated
a deployment of 40 devices using the default drivers and 10
devices with MagicMirror drivers on a single Raspberry Pi
3B unit (1 GB RAM, quad-core). This setup uses 664 MB
memory, but the CPU load average never exceeds 0.8 (max
4.0, due to four cores). Network virtual interfaces and subnets
do not impose any practical limits with ﬁne-grained assign-
ments [58]. While the RAM on the hub is a limiting factor,
several inexpensive platforms exist with more memory (e.g.,
Raspberry Pi 4 with 8 GB RAM for $75 [56]), which can
potentially support hundreds of devices.
7.4
Integration Efforts and Tradeoffs
Integrating apps by replacing OS libraries or framework SDKs
is straightforward, requiring modifying less than 10 lines of
code after importing the Capture device library. Developing
native drivers is more involved since it requires declaring a
custom message format for device-driver communications and
implementing the driver while delegating the network man-
agement to Capture’s library runtime. The most sophisticated
CAM driver we implemented was 817 lines of Python.
4198    30th USENIX Security Symposium
USENIX Association
d
e
z
i
l
a
m
r
o
N
1.5
1
0.88x
0.5
WEB
(OS)
-7ms
0.63x
SM
(OS)
-34ms
1x
0.92x
1.16x
1.57x
1.53x
1.35x
1.32x
1.55x
1.15x
CP
(OS)
±0ms
WS
(OS)
-7ms
TH
(ND)
+19ms
CAM-ST
CAM-P
(ND)
(ND)
+297ms
+160ms
ST-L
(SDK)
+23ms
ST-S
(SDK)
+4ms
MM
(ND)
+6ms
Geometric
Mean
1.04x
0.62x
0.58x
0.66x
d
e
z
i
l
a
m
r
o
N
1.2
1
0.8
0.6
0.4
CAM-ST
CAM-P
(ND)
(ND)
MM
(ND)
Geometric
Mean
(a) Normalized average latency and numerical differences. Red crosses show median latency changes.
(b) Normalized average throughput.
1.14x
1.11x
1.14x
1.11x
1.14x
1.11x
1.14x
1.11x
1.08x
1.08x
1.09x
1.08x
1.09x
1.08x
1.09x
1.07x
1x
1x
1x
0.96x
Code Size
Memory Usage
d
e
z
i
l
a
m
r
o
N
1.2
1.1
1
0.9
WEB (OS)
SM (OS)
CP (OS) WS (OS)
TH (ND) CAM (ND) ST-L (SDK) ST-S (SDK) MM (ND) Geometric
(c) Application code size and memory usage on-device.
Mean
Figure 8: Performance overhead for all prototype apps. Data are normalized to results from the orignal apps. CAM has two
modes: STreaming videos and taking Pictures. We denote integration approaches in parentheses: OS Replacement, Native Driver,
and Framework SDK Replacement. Based on geometric means, Figure (a) shows a 15% latency increase and Figure (b) shows a
34% throughput reduction. Figure (c) shows the Capture-enabled ﬁrmware incur around 10% more on-device resource utilization.
ID
Service Type
Trigger
Action
Device Web App
Device
Device
A1
A2 Web App
A3
Device
IFTTT Applet Rule
Turn on switch. ⇒ Add line to Google Sheet.
New email arrives inbox. ⇒ Turn on light bulb.
Turn on switch. ⇒ Turn on light bulb.
ESP32 (seconds)
Original
2.65 ± 0.42
2.93 ± 0.82
2.21 ± 0.43
Capture
2.00 ± 0.35
2.93 ± 0.90
0.81 ± 0.16
Raspberry Pi (seconds)
Original
Capture
2.04 ± 0.66
2.62 ± 0.62
0.94 ± 0.28
1.83 ± 0.75
2.83 ± 0.87
0.88 ± 0.35
Table 5: Average latency for automation apps with standard deviations (30 runs). Overall, Capture has insigniﬁcant impacts, with
noteworthy improvements on A1 and A3 (ESP) due to ofﬂoading TLS operations on the hub. See Section 7.2 for further analysis.
We demonstrate the tradeoff between ease of adoption and
performance impact by analyzing different integration ap-
proaches for the Web Server app. Although we spent consid-
erable effort optimizing the default OS-replacement driver,
it yielded a modest 12% average latency reduction over the
baseline ESP32 app. The integration only requires changing a
few lines of the original code. In comparison, implementing a
native driver for this app signiﬁcantly reduces latency by 36%
over the same baseline. However, to implement the driver, we
modiﬁed 264 lines of source code to process device-driver
communication and customize protocols.
8 Limitations and Future Work
Vendor Incentives and Adoption Challenges. Vendors
may be incentivized to use Capture because they can ofﬂoad
the security upkeep responsibility to a central trusted entity
(the Capture Hub). They no longer need to keep applying
security patches themselves, a task they often lag behind (Sec-
tion 3). Capture’s isolation design also helps protect vendors
from other compromised devices in the user’s local home.
There might be several hurdles for vendor’s adoption. We
have already proposed various integration approaches Sec-
tion 5 to reduce adoption costs for existing devices and hub’s
library management strategies Section 4.2 to alleviate ven-
dor’s loss of agency and to avoid breaking functions.
The need for ﬁrmware splitting may pose another major
roadblock for vendors. They have to bear the extra onus of
developing two separated pieces of the “device” and the addi-
tional overhead in signing and logistics involved in ﬁrmware
updates. Implementing Capture drivers and new ﬁrmware
would require vendors to change signiﬁcantly from the cur-
rent status quo and would induce extra engineering efforts.
Single Point of Failure. Capture’s centralized design
means that the Capture Hub is a potential single point of
failure; this is part of our threat model (Section 4.1), where
the hub is assumed to be trustworthy. If the hub is compro-
mised by vulnerabilities or privilege escalation bugs like those
on conventional systems [9, 13], the integrity and conﬁdential-
ity of the installed devices will be likewise compromised. By
centralizing the management of security-critical updates, and
providing additional isolation between devices, we hope to
contribute to improving the overall security posture of devices
deployed within the network (i.e., relative to the status quo).
However, this improvement is contingent on vendor adoption.
Centralization may lead to a less robust network even with-
out adversarial compromise. If the hub goes down, devices
would lose network connectivity and drivers become unre-
sponsive. Because most device ﬁrmware controls local actions
USENIX Association
30th USENIX Security Symposium    4199
(e.g., managing the on/off states for smart plugs), most devices
should still function (e.g., through physical buttons on the de-
vice). Capture Hub failures, in this case, largely resemble
network outages and router failures in current smart homes.
Protocol Compatibility. Since Capture isolates devices,
link layer discovery and local network scanning no longer
work. One such example is UPnP, an infamous protocol for
posing security threats in IoT devices [40, 42] and recent ex-
ploits like CallStranger [82]. A future direction for our work
is to provide a secure centralized discovery service on the
Capture Hub itself with co-located drivers and shared libraries,
substituting link layer discovery and mitigating fallout like
CallStranger. With that said, many smart devices have com-
panion smartphone apps that communicate with the device
via a cloud service to support access to the device behind a
home NAT. As communication through the cloud will not be
impeded by our approach, we believe that the practical impact
of Capture’s isolation on everyday use will be minimal.
There are other potential security improvements, which are
out of the scope of the current security goals for Capture and
threat model. We do not support alternative wireless protocols
such as BLE, Zigbee, and Z-Wave since Internet-based attacks
over WiFi, the focus of our work, impose signiﬁcant threats
already. As future work, we can look into incorporating re-
lated works in securing other wireless protocols [36, 85] into
Capture’s centralized hub design. In addition, Capture does
not address potential attacks due to weak security practices,
such as the use of default credentials. However, Capture’s
Virtual Device Entity isolation blocks compromised devices
from exploiting any other devices’ vulnerabilities.
Augmenting Device Resources. Another opportunity that
we have not explored is to use the hub’s computation re-
sources to augment the limited resources of local devices.
Speciﬁcally, by introducing additional Capture APIs, we can
extend the storage and processing capability of low-power
microprocessors on the device to the hub.
Firmware Splitting. Capture proposes splitting mono-
lithic ﬁrmware into remote and local components, an ap-
proach that could face practical challenges, such as data
serialization, consistency, and fault tolerance. These issues
are not uncommon to many distributed systems that make
use of RPC-like components and have been studied exten-
sively [7, 28, 29, 59, 67, 72–74, 77]. While our prototype im-
plementation does not make use of all of these advances,
Capture can beneﬁt from this work to enhance its robustness
and reliability. We view this as important future work.
9 Related Work
IoT Network Security. Several prior efforts have looked
at IoT security issues [80], and proposed augmenting current
network designs to address them. Dreamcatcher [22] uses
a network attribution method to prevent link-layer spooﬁng
attacks. Simpson et al. [66], DeadBolt [39], and SecWIR [43]
propose adding features and components on network routers
to secure unencrypted trafﬁc. HoMonit [85], Bark [36], and
HanGuard [15] propose ﬁner-grained network ﬁltering rules
and context-rich ﬁrewall designs.
Capture takes a similar network-based approach draw-
ing inspiration from isolation techniques used in prior
works [8, 22, 70]. However, we take a more direct and prin-
cipled approach to reduce the attack surface by centralizing
standard library management. Centralizing shared libraries
introduces additional challenges, which previous work does
not consider.
IoT Software Security. Several projects address vulnera-
bilities in various aspects of current IoT software develop-
ment. Vigilia [70] introduces capability-based network access
control to protect devices while supporting home automa-
tion applications. Each device has one driver program, which
provides public APIs accessible by home automation pro-
grams. In comparison, Capture focuses on security issues in
traditional smart device ﬁrmware; by decoupling networking
components in the original ﬁrmware into their drivers, Cap-
ture provides a centralized mechanism for updating shared
libraries across all devices. Other efforts [44, 50, 78] address
security challenges in the application-layer of devices, such
as operation logging, cloud backend services, and automation
apps, which are complementary to our work.
IoT Frameworks and OSes. Both academia and industry
have looked at the challenges of IoT software stacks for smart
homes with heterogeneous IoT devices. HomeOS [19] pro-
poses a uniﬁed PC-like platform to manage all local devices.
Commercial IoT frameworks emphasize their security offer-
ings and ease of management for third-party developers. Mi-
crosoft Azure Sphere [48], Particle OS [53], and AWS Green-
grass [4] all provide services to manage device library updates
on behalf of developers. These frameworks also include native
support for application-level over-the-air upgrades, reducing
the barrier for developers to patch bugs. Samsung Smart-
Things Device SDK [62] reduces the developer burden of
managing library updates by directly offering high-level APIs
in the SDK (e.g., MQTT services). Developers do not need
to worry about patching libraries, as long as they regularly
update the SDK runtime.
While these frameworks help alleviate some of the devel-
opers’ burden of library management, Capture offers several
additional beneﬁts. First, Capture has a secure isolation mech-
anism to protect against local malicious devices. Existing
4200    30th USENIX Security Symposium
USENIX Association
frameworks cannot offer isolation since they manage devices
from public cloud backends. Second, Capture devices can
install custom libraries on devices’ ﬁrmware based on their
requirements. Even if these libraries are vulnerable, attackers
cannot exploit these libraries due to the isolation we provide.
Third, as an open system, Capture’s integration approaches
are cross-platform and do not require device vendors to lock
in to speciﬁc embedded system OSes and chipsets. Finally,
IoT frameworks (Particle Device OS, Azure Sphere) focus
on higher-end micro-controllers with bundled costs of cloud
services, which is not the norm. Most IoT vendors opt for
inexpensive chips and platforms, with standalone ﬁrmware,
which especially beneﬁt from Capture’s design.
10 Conclusion
Similar to other complex software systems, modern IoT de-
vices suffer from the same security threats arising from poorly-
managed outdated third-party libraries. We show that even
the most popular smart device vendors fall behind the update
schedules of critical libraries by hundreds of days, exposing
users with even the latest device ﬁrmware to well-known vul-
nerabilities in the underlying libraries. These insights related
to the usage of common third-party libraries across devices
inspired the design of Capture, a software architecture for
IoT ﬁrmware development. Capture provides mechanisms for
centralized management of shared libraries by splitting func-
tionality into the ﬁrmware on the device and a corresponding