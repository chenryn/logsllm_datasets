# 优化后的文本

## 调试栈跟踪及WinDBG缓存机制
### 栈跟踪示例
- **ChildEBP** | **RetAddr** | **函数调用**
- 00d0e35c | 022a7782 | `dbgeng!KdComConnection::Read` // 从COM端口读取数据
- 00d0e37c | 022a93f8 | `dbgeng!KdConnection::ReadAll+0x22`
- 00d0e3a0 | 022a87ba | `dbgeng!KdComConnection::ReadPacketLeader+0x38` // 读取引导字节
- 00d0e3c8 | 020dd6a8 | `dbgeng!KdComConnection::ReadPacketContents+0x6a`
- 00d0e400 | 020ddff3 | `dbgeng!DbgKdTransport::ReadPacketContents+0x108`
- 00d0e474 | 020deb29 | `dbgeng!DbgKdTransport::WaitForPacket+0x133`
- 00d0e4a8 | 020debf2 | `dbgeng!DbgKdTransport::SendReceivePacket+0x59`
- 00d0e4d4 | 020d72df | `dbgeng!DbgKdTransport::SendReceiveManip+0x42`
- 00d0e548 | 020f058e | `dbgeng!ConnLiveKernelTargetInfo::ReadControl+0x7f`
- 00d0e574 | 0214e3d7 | `dbgeng!TargetInfo::GetTargetSpecialRegisters+0x3e`

### WinDBG缓存机制
由于与内核调试器（KD）的通信需要较长时间，WinDBG会将某些命令的结果缓存起来。例如，当多次执行`kv`或`r`命令时，后续命令的响应速度显著提高，因为它们使用了缓存的数据。为了确保数据一致性，每次退出命令状态时，WinDBG会清除缓存的数据。

## 将调试目标中断到调试器
如果目标系统处于运行状态，可以通过中断（Break）命令将其停止并进入调试器。具体过程如下：
1. 用户通过WinDBG界面发出中断命令（菜单或Ctrl+Break）。
2. UI线程调用`DebugClient`类的`SetInterrupt`方法，并设置第一个参数为`DEBUG_INTERRUPT_ACTIVE`（值为0）。
3. `SetInterrupt`方法通过全局变量`g_Target`调用调试目标对象的`RequestBreakIn`方法。对于内核调试，`g_Target`指向的是`ConnLiveKernelTargetInfo`类的实例。
4. `RequestBreakIn`方法简单地将对象的一个成员变量（偏移为0x1F7）设置为1。
5. 此时，调试会话线程通常在等待目标系统的调试事件，即执行`DbgKdTransport`类的`ReadPacketContents`方法。该方法在每次循环中检查目标对象的0x1F7成员变量，如果其值等于1，则调用`WriteBreakInPacket`方法向目标系统发送中断命令。

### 内核调试会话线程发送中断命令
- **ChildEBP** | **RetAddr** | **函数调用**
- 00d0fd78 | 020e04c3 | `dbgeng!KdComConnection::Write` // 写入COM端口
- 00d0fd98 | 020de3c2 | `dbgeng!DbgKdTransport::Write+0x33` // 写入中断命令
- 00d0fdbc | 020dd5ed | `dbgeng!DbgKdTransport::WriteBreakInPacket+0x32`
- 00d0fddc | 020ddff3 | `dbgeng!DbgKdTransport::ReadPacketContents+0x4d`
- 00d0fe50 | 02133f5b | `dbgeng!DbgKdTransport::WaitForPacket+0x133`
- 00d0feec | 02133e38 | `dbgeng!ConnLiveKernelTargetInfo::WaitStateChange+0x8b`
- 00d0ff10 | 020ceacf | `dbgeng!ConnLiveKernelTargetInfo::WaitForEvent+0x68`
- 00d0ff34 | 020cee9e | `dbgeng!WaitForAnyTarget+0x5f`
- 00d0ff80 | 020cf110 | `dbgeng!RawWaitForEvent+0x2ae` // 等待调试事件
- 00d0ff98 | 0102aadf | `dbgeng!DebugClient::WaitForEvent+0xb0`
- 00d0ffb4 | 7c80b6a3 | `WinDBG!EngineLoop+0x13f` // 调试会话循环
- 00d0ffec | 00000000 | `kernel32!BaseThreadStart+0x37`

如前所述，目标系统在每次更新系统时间（`KeUpdateSystemTime`）时会调用内核调试引擎的`KdPollBreakIn`函数，检查是否有中断命令，如果有，则准备中断到内核调试器。

## 本地内核调试
WinDBG将本地内核调试视为双机内核调试的特例。调试引擎中的`LocalLiveKernelTargetInfo`类用于描述本地内核目标。建立本地内核调试会话时，`LiveKernelInitialize`方法创建`LocalLiveKernelTargetInfo`类的实例。由于调试器和调试目标在同一系统中，本地内核调试的通信过程比双机调试简单得多，主要通过`NtSystemDebugControl`内核服务进行通信。

### 本地内核调试时执行内存显示命令的过程
- **ChildEBP** | **RetAddr** | **函数调用**
- 00e0e128 | 0222395f | `ntdll!ZwSystemDebugControl+0xa` // 调用内核服务
- 00e0e168 | 020d821f | `dbgeng!LocalLiveKernelTargetInfo::DebugControl+0xaf`
- 00e0e1a8 | 0217a9b2 | `dbgeng!LocalLiveKernelTargetInfo::ReadVirtual+0xbf`
- 00e0e470 | 0217ae72 | `dbgeng!DumpValues::Dump+0x552`
- 00e0e48c | 0217d26d | `dbgeng!DumpValues::ParseAndDump+0x72` // 解析命令
- 00e0e900 | 02187883 | `dbgeng!ParseDumpCommand+0xa0d` // 内存显示命令的入口
- 00e0e9d8 | 021889a9 | `dbgeng!ProcessCommands+0x7b3` // 分发命令
- 00e0ea1c | 020cbec9 | `dbgeng!ProcessCommandsAndCatch+0x49`
- 00e0eeb4 | 020cc12a | `dbgeng!Execute+0x2b9`
- 00e0eee4 | 01028553 | `dbgeng!DebugClient::ExecuteWide+0x6a` // 执行命令的接口函数
- 00e0ef8c | 01028a43 | `WinDBG!ProcessCommand+0x143`
- 00e0ffa0 | 0102ad06 | `WinDBG!ProcessEngineCommands+0xa3`
- 00e0ffb4 | 7c80b6a3 | `WinDBG!EngineLoop+0x366` // 调试会话循环
- 00e0ffec | 00000000 | `kernel32!BaseThreadStart+0x37`

可以看到，从栈帧03到0d与双机内核调试相同。栈帧02是`Dump`方法调用`LocalLiveKernelTargetInfo`类的`ReadVirtual`方法，后者再调用`DebugControl`方法。`DebugControl`方法是对系统服务`ZwSystemDebugControl`的封装，后者通过系统调用机制调用内核中的`NtSystemDebugControl`方法。

## 远程用户态调试
WinDBG工具包提供了多种方式进行远程调试，本节讨论通过进程服务器（Process Server）进行远程用户态调试的基本原理和实现方法。

### 基本模型
图29-20显示了通过进程服务器调试位于另一个系统中的用户态程序的基本模型。左侧为目标系统，右侧为客户系统。目标系统需要运行进程服务器程序`DbgSrv.exe`，位于WinDBG的程序目录中。目标系统与客户系统之间的通信方式包括命名管道（NPIPE）、TCP、COM端口、安全管道（SPIPE）和SSL。其中，SPIPE和SSL要求两个系统中的操作系统至少为Windows 2000。

### 启动进程服务器
在目标系统中，启动一个命令行窗口，切换到`DbgSrv.exe`文件所在的目录，然后键入如下命令：
```sh
C:\WinDBG>dbgsrv -t tcp:port=1022 -c notepad.exe
```
这条命令启动进程服务器，使用TCP协议监听1025号端口，并创建`notepad.exe`进程（要调试的程序）。

### 进程服务器内部工作
启动后，`DbgSrv`的主函数分析命令行参数并调用`DebugClient`类的`StartProcessServerWide`方法启动进程服务器。该方法的原型如下：
```cpp
HRESULT IDebugClient5::StartProcessServerWide(
    IN ULONG Flags,
    IN PCWSTR Options,
    IN PVOID Reserved
);
```
其中，`Flags`参数指定调试目标类型，必须为`DEBUG_CLASS_USER_WINDOWS(2)`，`Options`参数指定与调试器的连接字符串。`StartProcessServerWide`方法调用`DbgRpcCreateServer`，后者调用`DbgRpcInitializeTransport`创建传输层对象实例。对于TCP连接，创建的是`DbgRpcTcpTransport`类的实例。然后，`DbgRpcCreateServer`方法调用新创建的传输层对象的`CreateServer`方法，后者调用`CreateServerSocket`方法，通过操作系统的`WSASocket` API创建通信套接字。创建好通信套接字后，`DbgRpcCreateServer`方法调用`CreateThread` API创建一个新的线程，线程的函数为`dbgeng!DbgRpcServerThread`，用于监听来自客户机器的连接请求。

### 连接到进程服务器
在客户系统中，使用如下命令行启动WinDBG：
```sh
c:\WinDBG>WinDBG -premote tcp:server=,port=1022
```
选择“File”菜单的“Attach to a process…”命令，目标系统的`DbgSrv`会命中预先设置的`CreateThread`断点。这是因为WinDBG从命令行参数中知道是远程调试，因此开始与目标系统的进程服务器建立连接。在目标机器上，`DbgSrv`的监听线程接收到连接请求后，调用`CreateThread` API创建一个新的工作线程来与客户机上的WinDBG通信，称为服务线程。这个新线程的入口函数为`DBGENG`模块中的`DbgRpcClientThread`函数。处理完一个连接后，监听线程再次调用`AcceptConnection`方法等待新的连接请求。当再有新的连接请求时，`DbgSrv`的监听线程会再创建一个新的服务线程。因此，一个`DbgSrv`进程可以为多个WinDBG服务。

### 服务循环
WinDBG使用RPC机制调用服务器进程中的调试器引擎函数。服务线程启动后，进入一个工作循环等待来自客户端的数据。

### 服务线程等待客户数据
- **ChildEBP** | **RetAddr** | **函数调用**
- 00a7fdd8 | 7c90e9c0 | `ntdll!KiFastSystemCallRet` // 调用系统服务
- 00a7fddc | 7c8025cb | `ntdll!ZwWaitForSingleObject+0xc` // 残根函数
- 00a7fe40 | 7c802532 | `kernel32!WaitForSingleObjectEx+0xa8`
- 00a7fe54 | 7c831568 | `kernel32!WaitForSingleObject+0x12` // 等待同步对象
- 00a7fe68 | 71a6b083 | `kernel32!GetOverlappedResult+0x30`
- 00a7feac | 71ac0d59 | `mswsock!WSPGetOverlappedResult+0x62`
- 00a7fed8 | 0228ac57 | `WS2_32!WSAGetOverlappedResult+0x56`
- 00a7ff0c | 02286a65 | `dbgeng!DbgRpcTcpTransport::Read+0xa7` // 传输层的读数据方法
- 00a7ff60 | 022882d8 | `dbgeng!DbgRpcReceiveCalls+0x55` // 接收远程调用
- 00a7ffb4 | 7c80b6a3 | `dbgeng!DbgRpcClientThread+0xa8` // 服务线程
- 00a7ffec | 00000000 | `kernel32!BaseThreadStart+0x37` // 线程的启动函数

当服务线程收到一个完整的RPC数据包后，它先调用`DbgRpcGetStub`函数读取要调用的函数指针，通常是调试器引擎中的`SFN_IXXX`函数。确认读取到的函数指针不为空后，服务线程调用该函数，然后再把函数的执行结果发送给客户端的WinDBG。完成一次服务后，服务线程再调用`DbgRpcReceiveCalls`等待新的调用，如此循环直到结束。

### 建立调试会话
当我们在WinDBG中选择Notepad进程并按确定后，WinDBG会创建一个新的调试会话线程并调用`StartSession`函数。详细过程如下：

### 附加到远程的应用程序
- **ChildEBP** | **RetAddr** | **函数调用**
- 00f0fad8 | 7c90e9c0 | `ntdll!KiFastSystemCallRet` // 系统调用
- 00f0fadc | 7c8025cb | `ntdll!ZwWaitForSingleObject+0xc`
- 00f0fb40 | 7c802532 | `kernel32!WaitForSingleObjectEx+0xa8`
- 00f0fb54 | 7c831568 | `kernel32!WaitForSingleObject+0x12` // 等待同步对象
- 00f0fb68 | 71a6b083 | `kernel32!GetOverlappedResult+0x30`
- 00f0fbac | 71ac0d59 | `mswsock!WSPGetOverlappedResult+0x62`
- 00f0fbd8 | 0228ac57 | `WS2_32!WSAGetOverlappedResult+0x56`
- 00f0fc0c | 02286a65 | `dbgeng!DbgRpcTcpTransport::Read+0xa7` // 传输层的读数据方法
- 00f0fc60 | 02286f8e | `dbgeng!DbgRpcReceiveCalls+0x55`
- 00f0fc80 | 0229e83d | `dbgeng!DbgRpcConnection::SendReceive+0x10e` // 发送并接收应答
- 00f0fccc | 020f3a31 | `dbgeng!ProxyIUserDebugServicesN::AttachProcess+0x11d`
- 00f0fcfc | 020c1344 | `dbgeng!LiveUserTargetInfo::StartAttachProcess+0xd1`
- 00f0fd40 | 0102a385 | `dbgeng!DebugClient::CreateProcessAndAttach2Wide+0x104`
- 00f0ffa4 | 0102a9bb | `WinDBG!StartSession+0x445` // 开始调试会话
- 00f0ffb4 | 7c80b6a3 | `WinDBG!EngineLoop+0x1b` // 调试会话循环
- 00f0ffec | 00000000 | `kernel32!BaseThreadStart+0x37`

从栈帧#0b到#0f与调试本地应用程序完全一样。差异从栈帧#0a开始，在调试本地应用程序时，`LiveUserTargetInfo`使用的是`LiveUserDebugServices`类，而这里使用的是`ProxyIUserDebugServicesN`类。`ProxyIUserDebugServicesN`类与`LiveUserDebugServices`具有相同的接口，因此`LiveUserTargetInfo`类可以不关心二者的差异。

`ProxyIUserDebugServicesN`类将`AttachProcess`调用通过`DbgRpcConnection`发送给远程的进程服务器，然后等待它的回复（栈帧0～8）。

### 服务线程执行附加动作
- **ChildEBP** | **RetAddr** | **函数调用**
- 00a7fe9c | 0229a146 | `ntdll!NtDebugActiveProcess` // 系统调用
- 00a7feb8 | 0229a2b0 | `dbgeng!LiveUserDebugServices::CreateDebugActiveProcess…`
- 00a7fed4 | 022a47ee | `dbgeng!LiveUserDebugServices::AttachProcess+0xb0`
- 00a7ff04 | 02286c27 | `dbgeng!SFN_IUserDebugServicesN_AttachProcess+0xbe`
- 00a7ff60 | 022882d8 | `dbgeng!DbgRpcReceiveCalls+0x217` // 接收调用
- 00a7ffb4 | 7c80b6a3 | `dbgeng!DbgRpcClientThread+0xa8` // 服务线程
- 00a7ffec | 00000000 | `kernel32!BaseThreadStart+0x37`

以上是优化后的文本，使其更加清晰、连贯和专业。