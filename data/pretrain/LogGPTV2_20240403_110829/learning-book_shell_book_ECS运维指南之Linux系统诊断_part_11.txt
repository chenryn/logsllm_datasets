: 79
: Intel (R) Keon (R) CPU B5-2682 v4 @ 2.50GHz
stepping
:1
microcode
:0x1
cpu MHz
2500.036
: 40960 KB
physical id: 0
siblings
:2
core id
:0
gexoo ndo
:1
apicid
initial spieid
:1
:1
fpu_exception
fpu
8a :
1yes
cpuid level : 13
zat :
: fpu vme de pse tsc m8r pae mce cx8 spic sep mtrr pge mca cnov
---
## Page 84
84
>为什么明明内存很充足但是java程序仍申请不到内存
pat pse36 clflusb nmox fxsr sse sse2 ee ht syecall nx pdpe1gb rdtscp 1n
constant_tac rep_gcod nopl
eagerfpu pni pclmulgdg ssse3 fma cx16 pcid sse4_1 ssei_2 x2apic morbe
popcnt tsc_deadline_tiner aes8 x8ave avx f16c rdrand hypervisor lahf_ln abm
3dnowprefetch fagsbase tsc_adjust
bmi1 hle avx2 smep bmi2 erm8 invpcid rtm rdseed adx smsp xsaveopt
bogomipe
L0'000S1
clflush size
:64
cache_alignment : 64
address sizes
: 46 bit8 physical, 48 bit8 virtual
Memory: 4k page, physical 3881692k(2567600k free) , evsp 0k(0k free)
1quauabeueu raxod
vm_info: OpenJDK 64-Bit Server VM (25.242-b08) for linux-amd64 JRE
(1.8.0_242-b08) , built cn Jan 28 2020 14:28:22 by "nockbui1d* vith gcc
4.B.5 20150623 (Bed Hat 4.8.5-39)
time: Thu Feb 20 15:13:30 2020
timezone: CST
elapsed tine: 0 seconds (0d 0h 0n 08)
4.java测试证明正常申请内存不会有问题，超额的内存才会oom，那么为什么超
额呢，视线回归到 sysctl-p 有所发现。
vm. overoormit_menory=2
0一默认设置。：当应用进程尝试申请内存时，内核会做一个检测。内核将检查是否有足够的可用内
overconnit_menory
存供应用进程使用：如果有足够的可用内存，内存申请允许：否则，内存申请失败，并把误返回给应
用进程。
举个例子，比知1G的机器，A进程已经使用了 500M，当有另外进程尝试ma11cc500M的内存时，
内核就金进行check，
发现超出剩余可用内存，就会提示失败。
1一
对于内存的申请请求，内核不会做任何check，直到物理内存用完，触发0OM杀用户态进程。
同样是上面的例子，
1G的机器，A进程 50oM，B进程尝试 ma1loc 500M，会成功，但是一旦kermel发现内存使用率接
近1个G[内核有策略}，
就触发00H，杀掉一些用户态的进程（有荒略的杀}。
2 —
当请求申请的内存SKAP内存大小+物理内存·N，则拒绝此次内存申请。解释下这个
N: N是—个百分比，
根据overcommit_ratio/100未确定，比如overcomit_atio=5o（我的测试机默认 50），那
么就是50%。
vm.overoormit_ratio
只有当v.overcommit_memory-2的时候才会生效，内存可申请内存为
SMAP 内存大小▪物理内存·overcomit_ratio/100
看看上面日志的 overcommit信息
ComnitLimit :
4004708k3小于客户申请的4096M
CommitLimit：最大能分配的内存（测试下来在 vm.overcomit_memory=2时候生效），具体的值是
Committed_AS:
2061568 kB
SMAP内存大小丨ece均未开启）▪物理内存·overcomit_zatio/100
Committed_As：当前已经分配的内存大小
---
## Page 85
为什么明明内存很充足但是java 程序仍申请不到内存请不要忽略 min_free_kbytes 的设置
请不要忽略min_free_kbytes的设置
问题背景
服务器内主要运行程序：Jadeos。
问题描述：LINUXtmpfs空间使用未达到100%，内存也未占满。
执行任何命令提示 bash:fork:Cannot allocate memory 过几秒时间系统会自动重启。
但在客户本地环境是没有这种情况的，即使tmpfs使用达到100%系统未提示Cannot
allocate memory
3.7.1.1501
---
## Page 87
请不要忽略 min_free_kbytes 的设置请不要忽略 min_free_kbytes 的设置
a 1 grep min_free
AC
free
1h
total
used
free
shared
buffers
7.66
96'5
1.86
8.3R
18R
242R
5.66
2.8G
BB
解决方案
建议客户降低min_free_kbytes值。
更改减小min_free_kbytes后，再执行更多次的拷贝，最后一次free可用内存显示
解决到设置值是，才提示内存不足。
这个是符合linux系统对内存管理的预期的。
---
## Page 89
最后的彩蛋
某地区口罩项目架构演进及优化经验
简介：疫情初期某地政府决定发放一批免费口罩面向该市市民，该市市民均可免费预
约领取，预约时间为早上9点-12点，因此该场景为限时抢购类型场景，会面临非
常大的定时超大流量超大并发问题，在该项目的落地过程中，涉及的架构演变，做了
一些记录和思考。
项目背景
疫情初期某地政府决定发放一批免费口罩面向该市市民，该市市民均可免费预约领
取，预约时间为早上9点-12点，因此该场景为限时抢购类型场景，会面临非常大
的定时超大流量超大并发问题，在该项目的落地过程中，涉及的架构演变，做了一些
记录和思考。
1.原始架构图示&分析（2月2号晚上22点左右的原始架构）。
Hds
---
## Page 90
90
>某地区口罩项目架构演进及优化经验
1.1客户端走 https 协议直接访问ecS。
1.2ECS 上使用 nginx 自建 https 监听。
1.3 Nginx反代 tomcat，Nginx处理静态文件，tomcat 处理动态请求。
1.4程序先去redis查缓存，如未命中则去数据库查询数据，同时redis与
mysql之间的数据同步靠程序控制。
优点：易管理，易部署。
缺点：性能差，无扩展性，存在单点风险。
事实证明：该应用一经上线立刻被打挂了（未知原因预约页面泄露，导致还
未到预约时间即被打挂）。
2.我方介入后的二代架构（24点左右找的我们，早上9点要开服，时间太紧，任
务太重，程序不能动的情况下，几十万的并发架构如何做？2月3号早上9点
左右的架构，4号也恢复了这个架构）。
二代架构
---
## Page 91
某地区口罩项目架构演进及优化经验某地区口罩项目架构演进及优化经验
3.1接入CDN分流超大带宽。
3.2取消 nginx 的代理。
3.3做了新程序无法准时上线的灾备切换方案（没想到还真用到了）。
3.4使用虚拟服务器组做新老程序的切换，但是缺点是一个七层监听的sIb后
端只能挂200个机器，再多sb也扛不住了，导致老程序刚承接的时候再
度挂掉。
3.55号使用这个架构上线，7分钟库存售馨，且体验极度流程，丝般顺滑，健
康同学开发的新程序真是太爽的。
优点：CDN负担静态资源的流量降低了SLB的出带宽，压测的效果也非常
理想。
缺点：需要多一个独立的域名在页面里面，涉及跨域，4号临开服之际测试
发现入库&预约短信乱码返回，紧急切换回了老程序，即二代架构。
4.理想架构。
理想架构
---
## Page 93
某地区口罩项目架构演进及优化经验某地区口罩项目架构演进及优化经验
最后的成果统计（采样分析，实际数据比这个还大）：
一计UA开湿QPS用宽ECS集群数量享质本圣注
20200204
157830
一
123143
221947
14141
18534
2G
293
持续五小时，前爽维积
持续五小时，期费维积
20200205
14489363434
42481.3G150程序7分神库存售据，体验常流
最后上线的三代架构，为了保险起见上了150台机器，但是根据活动期间的观察，以
及对压测结果的评估，上50台机器应该就可以抗住了，从持续5小时一直崩溃被终
端用户骂街，到7分钟库存售馨的领导赞赏，虽然经历了3个通宵的战，依然可以
隐隐约约感觉到身心都得到了升华-
优化参数笔记：
1.参数优化
net.ipv4.tcp_nax_tv_bucketa = 50o0 --> 50000
net. ipv4 .tcp_nax_ayn_backlog = 1024
**> 4096
net.coxe.somaxconn = 128 -*> 4096
net.ipv4 .tcp_tv_reuse = 1
net.ipv4 .tcp_c.inestanpa-1(5 和6同时开启可能会导致nat上网环境建联概率失效)
net. ipv4.tcp_tu_recyele = 1
/etc/secuxity/1inits.conf
+ hard nofile 65535
+ soft nofile 65535
nginx参数优化
wozker_connect.ions1024-- >10240;
vozkez_pzccesses1-->16;|根据实际情况设置，可以设置成auto|
vozkez_r11nit_nofi1e 1024-->102400;
1iaten 80 back1og 511 >65533;
部分场景也可以考虑nginx开启长连接案优化短链接带来的开销
2.架构优化
扩容sLB后端BCs数量，ecs 配置统一
nginx 反代后端 upstrean 无效端口去除
云助手批量处理服务，参数忧化，添加实例标识
云监控大盘蓝控，ECS slb dcdn redis
调整SLB为7层监听模式，前7后4美团会话保排导致登录状态失效，
---
## Page 95
某地区口罩项目架构演进及优化经验20
accept.count 优化 ( 对标 somaxconn)
bug:
springbcot1.5 带的 jedis2.9 .1 的 xedis 连接泄漏的问题。导致 tomcat 800 进程用满后都无
限等特xedla连接。
后来进一步调研发现这个问题在2.10.2已经修复，而且2.10.2向后兼容2.9.1
4.数据库优化
redia 公网地址变更为内网地址
xedis seaian 超时设置缩短，用于释放xed1s 连接
server sexvlet .sesslon. tineout=300a
spring-sesalon.tineout=30s
慢 SQL 优化(BDSs 的 CLoudDBA 非常好用呦1
添加只读实例，自动读写分离
优化back1og
添加读写分离实例数量
---
## Page 96
阿里云开发者社区
口
云服务技术大学
云服务技术课量
阿里云开发者“经阁
云产品干货高频分享
和大牛零矩离沟通
海量免费电子书下载
---