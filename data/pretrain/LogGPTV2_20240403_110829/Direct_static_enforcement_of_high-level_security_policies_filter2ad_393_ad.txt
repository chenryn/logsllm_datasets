terms) these sub-terms are connected only by operators in
the set {(cid:116),(cid:117)}.
• A term is in level-3 syntactically restricted form (called a
3RF term) if it consists of one or more sub-terms that are 2RF
terms, and these sub-terms are connected only by operator (cid:175).
We say that a term is in syntactically restricted form if it is in level-3
syntactically restricted form. Observe that any term that is in level-
i syntactically restricted form is also in level-(i + 1) syntactically
restricted form for any i = 1 or 2.
Theorem 17. Given an access control state (cid:104)U, UR, UP(cid:105) and a
static safety policy sp(cid:104)P, φ(cid:105) where φ is in syntactically restricted
form, checking whether (cid:104)U, UR, UP(cid:105) satisﬁes φ can be done in
polynomial time.
PROOF. Let φ = (φ1 (cid:175) ··· (cid:175) φm) be a 3RF term, where
φi (1 ≤ i ≤ m) is a 2RF term. The following algorithm checks
whether a state (cid:104)U, UR, UP(cid:105) satisﬁes a policy sp(cid:104)P, φ(cid:105), where
P = {p1,··· , pn}.
isSafe(P , φ, UR, UP)
begin
· · · φm};
Γ = {φ1,
For every pi in {p1, · · · , pn} do
Gpi = ∅;
For every u ∈ U such that (u, pi) ∈ UP do
Gpi = Gpi ∪
{ φi ∈ φ | {u} does not satisfy φi};
EndFor;
Γ = Γ ∩ Gpi ;
EndFor;
if (Γ == ∅) return true;
else return false;
end
In the above algorithm, Gpi stores the set of 2RF sub-terms in φ
such that there exists a user u having pi but {u} does not satisfy
the sub-term. At the end of the algorithm, on the one hand, if Γ
contains a sub-term φi, it means that for every permissions pj in
{p1,··· , pn}, there exists a user upj such that upj has permission
pj but {upj} does not satisfy φi. Furthermore, from Property 3 of
Lemma 3, the fact that {upj} does not satisfy φi implies that any
superset of {upj} does not satisfy φi. (Note that 2RF terms use
only the operators ¬, +,(cid:116),(cid:117).) Therefore, users in {up1 ,··· , upn}
together have all permissions in {p1,··· , pn} but does not contain
a subset that satisﬁes φi, and hence does not contain a subset that
satisﬁes φ. The state is not safe. On the other hand, Γ = ∅ indicates
that if U covers permissions in {p1,··· , pn}, then for every sub-
term φi, there exists u ∈ U such that {u} satisﬁes φi. In other
words, there exists U(cid:48) ⊆ U such that U(cid:48) satisﬁes φ(cid:48). The state is
safe.
The worst-case time complexity of the above algorithm is
O(m × |U| × T ), where T is the time taken to check whether
a singleton satisﬁes a 1RF term, which is known to be in P [6].
Finally, we would like to show that level-3 syntactically re-
stricted form is the most general syntactic form of terms that keeps
SSC tractable. Fist of all, from Lemma 16, if ⊗ is allowed, SSC
becomes intractable. Furthermore, from the proof of Lemma 15, if
(cid:117) is allowed to connect sub-terms containing (cid:175), SSC becomes in-
tractable. Finally, in the proof of Lemma 14, the coNP-complete
validity problem is reduced to SSC(cid:104)(cid:116),(cid:175)(cid:105). Since checking valid-
ity for propositional logic formula in disjunct normal form (DNF)
remains coNP-complete, SSC is intractable when (cid:116) is allowed
to connect sub-terms containing (cid:175).
In summary, to make SSC
tractable, operator ⊗ cannot be used, and if (cid:175) is used, it must ap-
220
pear “outside of” (cid:116) and (cid:117). Such a restriction is precisely captured
by the level-3 syntactically restricted form.
5. AN ALGORITHM FOR SSC
Despite the fact that SSC is intractable in general, it is still possi-
ble that many instances encountered in practice are efﬁciently solv-
able. In order to study the efﬁciency of solving SSC, we have de-
signed and implemented an algorithm, which is described in detail
in this section.
5.1 Description of the Algorithm
To determine whether (cid:104)U, UR, UP(cid:105) is safe with respect to
sp(cid:104)P, φ(cid:105), a straightforward algorithm is to enumerate all usersets
that cover P and for every such userset, check whether it has a sub-
set that satisﬁes φ. If the answer is “no” for any such userset, then
we know that (cid:104)U, UR, UP(cid:105) is not safe with respect to sp(cid:104)P, φ(cid:105).
Otherwise, (cid:104)U, UR, UP(cid:105) is safe. Our algorithm is based on this
idea but has a number of improvements that greatly reduces the
running time. Here is a summary of the improvement techniques
in our algorithm on determining whether (cid:104)U, UR, UP(cid:105) is safe with
respect to sp(cid:104)P, φ(cid:105).
• We preprocess the input and eliminates information in
(cid:104)U, UR, UP(cid:105) that is irrelevant to the result of static safety
checking with respect to sp(cid:104)P, φ(cid:105).
• Only minimal usersets that cover P will be checked for
userset-term safety.
• We deﬁne a partial-order over sets of roles and perform static
pruning to reduce the number of users that need to be consid-
ered based on the partial-order over their role membership.
• We propose an abstract representation of sets which enables
us to design an efﬁcient bottom-up approach for determining
userset-term safety.
In the rest of this section, for simplicity of discussion, the key-
word All and user names in a term of the algebra are also treated as
roles. For instance, we may treat the atomic term Alice as a role
such that user Alice is the only member of the role, while All is
treated as a role such that everybody in the system is its member.
Preprocessing Given a state (cid:104)U, UR, UP(cid:105) and a policy sp(cid:104)P, φ(cid:105),
we ﬁrst remove all pairs (u, p) from UP if p (cid:54)∈ P , and all pairs
(u, r) from UR if r does not appear in φ. We also remove all users
u from U if u does not have any permission in P .
Furthermore, we rewrite the term φ into an equivalent term
where ¬ (if any) only applies to atomic term. Such a rewriting
is always possible, as the operators ¬,(cid:116) and (cid:117) satisfy the DeMor-
gan’s Law. (See [6] for algebraic properties of the operators.) This
will be useful in static pruning, which will be discussed later.
Minimal Usersets Only Given a policy sp(cid:104)P, φ(cid:105), let X be a user-
set that covers P . It is clear that a superset of X covers P as well.
If X is safe with respect to φ, then any superset of X is safe with
respect to φ, but not the other way around. Therefore, when con-
sidering whether the state satisﬁes sp(cid:104)P, φ(cid:105), we may consider X
without considering the supersets of X. In other words, we check
whether X satisﬁes φ if and only if X covers P and there does
not exist X(cid:48) ⊂ X such that X(cid:48) covers P , and such a userset X is
called a minimal userset that covers P .
Static Pruning The number of all usersets in U is 2n, where
|U| = n. But it is clear that not all these subsets need to be consid-
ered. In particular, we are only interested in those minimal usersets
that cover all permissions in the policy. In the following, we de-
scribe a static pruning technique that aims at reducing the number
of users that need to be taken into account. Intuitively, given a pol-
icy sp(cid:104)P, φ(cid:105), we try to ignore those users who have a relatively
small number of permissions in P but satisfy many atomic terms in
φ.
Deﬁnition 12 (Positive and Negative Dependance). We say that a
term φ positively (or negatively) depends on role r, if φ contains
r (or ¬r). Rpos and Rneg denote the set of roles that φ positively
and negatively depends on, respectively.
For instance, if φ = (Accountant (cid:175) Clerk) ∪ (¬Manager (cid:117)
¬Clerk),
then Rpos = {Accountant, Clerk} and Rneg =
{Manager, Clerk}. Note that Clerk appears in both Rpos and
Rneg. Deﬁnition 13 deﬁnes a partial relation between role sets
with respect to a term, and Lemma 18 states a condition on which a
user may be ignored without affecting the soundness of static safety
checking.
Deﬁnition 13 (Partial-Order (cid:185)φ). Given a term φ and two sets of
roles Ra and Rb, we have Ra (cid:185)φ Rb (or equivalently Rb (cid:186)φ Ra)
if and only if Ra∩Rpos ⊆ Rb∩Rpos and Ra∩Rneg ⊇ Rb∩Rneg.
if R1 (cid:185)φ R2 and
Note that the relation (cid:185)φ is transitive, i.e.
R2 (cid:185)φ R3, then R1 (cid:185)φ R3.
Lemma 18. Given a policy sp(cid:104)P, φ(cid:105), a state (cid:104)U, UR, UP(cid:105) and
two users u1, u2 (u1 (cid:54)= u2), let Pi and Ri be the set of permissions
and roles of ui (i = 1 or 2). If (P1 ∩ P ) ⊇ (P2 ∩ P ) and R1 (cid:185)φ
R2, then (cid:104)U, UR, UP(cid:105) is safe with respect to sp(cid:104)P, φ(cid:105) if and only
if (cid:104)U/{u2}, UR, UP(cid:105) is safe with respect to sp(cid:104)P, φ(cid:105).
In other
words, u2 may be ignored without affecting the soundness of static
safety checking.
PROOF. Let X be a userset covering P . In the following, we
prove that if u2 ∈ X, we can always ﬁnd another userset X(cid:48) (u2 (cid:54)∈
X(cid:48)) that covers P , and X is safe with respect to φ only if X(cid:48) is
safe with respect to φ. Hence, we may consider X(cid:48) and ignore
X, which indicates that u2 may be ignored without affecting the
soundness of static safety checking.
On the one hand, assume that both u1 and u2 are in X. Since
(P1 ∩ P ) ⊇ (P2 ∩ P ), X(cid:48) = X/{u2} still covers P and X(cid:48) ⊂ X.
Hence, if X(cid:48) is safe with respect to φ, so is X.
On the other hand, assume that u2 ∈ X but u1 (cid:54)∈ X. Let
X(cid:48) = (X/{u2})∪u1. X covering P and (P1∩P ) ⊇ (P2∩P ) im-
ply that X(cid:48) covers P . We would like to show that if X(cid:48) is safe with
respect to φ, then so is X. Assume that X(cid:48) contains a subset X(cid:48)
that satisﬁes φ. We are only interested in the case where u1 ∈ X(cid:48)
1
1.
By deﬁnition of term satisfaction, X(cid:48)
1 satisfying φ indicates that
{u1} is used to satisfy a set of atomic terms and/or negation of
atomic terms in φ. (Note that ¬ is only applied to atomic terms
in φ after preprocessing.) Let {γ1,··· , γm} (m ≥ 1) be a set of
atomic terms or negation of atomic terms in φ such that {u1} satis-
ﬁes γi (1 ≤ i ≤ m). If γi = r, then u1 must be a member of role
r, which means that r ∈ R1. R1 (cid:185)φ R2 indicates that r ∈ R2.
Otherwise, if γi = ¬r, then r (cid:54)∈ R1. R1 (cid:185)φ R2 indicates that
r (cid:54)∈ R2. In either case, {u2} satisﬁes γi. In general, {u2} satisﬁes
all elements in {γ1,··· , γm}. Therefore, X = (X(cid:48)/{u1})∪{u2}
satisﬁes φ. In generale, we may only consider X(cid:48) without consid-
ering X.
The above lemma may greatly reduce the number of users we
need to consider. In particular, if multiple users have the same set
of permissions in P and roles in φ, then at most one of these users
need to be taken into account.
The following example illustrates how static punning works.
221
Example 1. Given a policy sp(cid:104){p1, p2, p3}, (r1(cid:175)¬r2)(cid:105) and a state
(cid:104)U, UR, UP(cid:105), we have
U ={Alice, Bob, Carl , Doris, Elaine}
UP ={(Alice, p1), (Alice, p2), (Bob, p1), (Carl , p1),
(Carl , p2), (Doris, p3), (Elaine, p3), (Elaine, p4)}
UR ={(Alice, r1), (Bob, r1), (Bob, r3), (Carl , r1), (Carl , r2)}
There are ﬁve users in the system altogether. However, according
to Lemma 18, we only need to consider two users Carl and Doris.
First of all, Bob may be ignored as he has the same set of roles
in {r1, r2} as Alice, but his set of permissions is subsumed by
Alice’s. Secondly, Alice does not need to be considered as she has
the same set of permissions as Carl, but RCarl (cid:185)(r1(cid:175)¬r2) RAlice.
Finally, since Doris and Elaine have the same permissions and
roles with respect to the given policy, only one of them should be
taken into account.
Determining Term Safety In [6], Li and Wang described an al-
gorithm for the Userset-Term Satisfaction (UTS) problem. Their
algorithm employs both a top-down approach and a bottom-up ap-
proach based on the syntax tree of the term. In the top-down ap-
proach, one starts with the root of the syntax tree and the given
userset and tries to split the userset into subsets so as to satisfy
different sub-terms. The processing is then performed recursively
on those subsets and sub-terms. In the bottom-up processing, one
starts with unit terms. For each unit term, one calculates all subsets
of the given userset that satisfy the term. One then goes bottom-up
to calculate that for each node in the syntax tree. We call the set
of usersets that satisfy a term the satisfaction set of the term. An
example of bottom-up processing of a term in a given conﬁguration
is given in Figure 3.
As to SSC, instead of determining whether a userset satisﬁes
a term, we are only interested in whether there exists a subset of
userset X that satisﬁes the term. In this case, using a pure bottom-
up design should be more efﬁcient than a combination of top-down
and bottom-up processing.
A major challenge for bottom-up processing is that the number
of subsets that satisfy a sub-term may be very large, especially
when + is used. The algorithm for UTS in [6] stops performing
bottom-up processing when + is encountered, as the sub-term t+
can be satisﬁed by 2|Y | − 1 usersets, where t is a unit term and
Y = {u ∈ U | {u} satisﬁes t}.
In our algorithm for SSC, we introduce a novel abstract represen-
tation of sets, which greatly reduces the number of elements gen-
erated during the computation. Intuitively, an abstract set is a set
of sets and is represented as a pair of two disjoint sets, the explicit-
element set (EES) and the possible-element set (PES), where EES
contains elements that must appear and PES contains elements
that may or may not appear. For example, an abstract userset
(cid:104)ees{Alice} :: pes{Bob, Carl}(cid:105) indicates that Alice appears
in the set for sure, while Bob and Carl may be included in the set
as well. In other words, (cid:104)ees{Alice} :: pes{Bob, Carl}(cid:105) is a set
of four different usersets, {Alice }, {Alice,Bob }, {Alice,Carl }
and {Alice,Bob,Carl }.
Deﬁnition 14 (Abstract Set). An abstract set is given as a pair
Ψ = (cid:104)ees{a1,··· , am} :: pes{b1,··· , bn}(cid:105) (m ≥ 1, n ≥
0), which stands for a set of sets. Ψ.ees = {a1,··· , am}
is the explicit-element set of Ψ and Ψ.pes = {b1,··· , bn} is
the possible-element set of Ψ. A set S is in Ψ if and only if
{a1,··· , am} ⊆ S ⊆ {a1,··· , am} ∪ {b1,··· , bn}.
Abstract sets are especially useful in representing satisfaction
sets of terms containing sub-terms in the form of t+. For example,
222
assume that Alice, Bob and Carl are members of role r. The set
of usersets that satisfy r+ may be represented as {(cid:104)ees{Alice} ::
pes{Bob, Carl}(cid:105),(cid:104)ees{Bob} :: pes{Carl}(cid:105),(cid:104)ees{Carl} ::
pes{}(cid:105)}. In general, |Y | rather than 2|Y | − 1 usersets are stored
for t+, where t is a unit term and Y = {u ∈ U | {u} satisﬁes t}.
Our bottom-up approach employs abstract sets and involves per-
forming set operations over abstract sets. The description of our