## 聊一聊双十一背后的技术 - 分词和搜索
##### [TAG 15](../class/15.md)
### 作者                                             
digoal                                              
### 日期                                             
2016-11-14                                                     
### 标签                                            
PostgreSQL , 分词 , 全文索引 , rum , 搜索引擎 , 双十一 , tsvector , tsquery                                                                                      
----                                            
## 背景
2016双十一刚过，大伙还在忙着收快递，我也没有闲着，总结一些双十一背后的数据库技术。   
本文将要给大家分享的是 双十一背后的 搜索和分词 相关技术。   
我曾经写过一些类似的话题，可以参考如下，有幸帮助不少朋友解决了一些业务场景的问题。      
[《PostgreSQL 全文检索加速 填补搜索引擎无法满足的功能》](../201610/20161019_01.md)    
[《在PostgreSQL中实现按拼音、汉字、拼音首字母搜索的例子》](20161109_01.md)   
[《如何加快PostgreSQL词库装载速度》](https://yq.aliyun.com/articles/58007)  
[《PostgreSQL 文本数据分析实践之 - 相似度分析》](https://yq.aliyun.com/articles/59212)  
[《PostgreSQL 实现按 任意字段 检索》](https://yq.aliyun.com/articles/58006)  
[《PostgreSQL 行级 全文检索》](https://yq.aliyun.com/articles/30858)  
[《如何用PostgreSQL解决一个人工智能语义去重的小问题》](https://yq.aliyun.com/articles/25899)  
[《使用阿里云PostgreSQL zhparser时不可不知的几个参数》](https://yq.aliyun.com/articles/7730)  
[《PostgreSQL · 特性介绍 · 全文搜索介绍》](https://yq.aliyun.com/articles/189)  
[《PostgreSQL 百亿数据 秒级响应 正则及模糊查询》](https://yq.aliyun.com/articles/7444)  
[《中文模糊查询性能优化 by PostgreSQL trgm》](https://yq.aliyun.com/articles/39033)  
PostgreSQL数据库在搜索领域有着非常不错的口碑。就如它在GIS领域一样，已经耕耘了多年，处于行业领先的地位。      
9.6 ts search 加入了phrase功能（指包含了距离信息的lexemes），同时支持rank计算匹配系数，用PG社区核心Committer Oleg的话说，这次不小心打开了潘多拉魔盒，可想而知它的"牛逼"程度。     
## 全文检索类型
全文检索分为两个数据类型，一个是分词，一个是查询词组合。  
https://www.postgresql.org/docs/9.6/static/datatype-textsearch.html  
1\. 分词类型  
就是将字符串，根据选择的分词配置规则，转换为分词的类型，你可以理解为一堆被抽象出来的lexeme。  
例子  
```
postgres=> select * from pg_ts_config;
  cfgname   | cfgnamespace | cfgowner | cfgparser 
------------+--------------+----------+-----------
 simple     |           11 |       10 |      3722
 danish     |           11 |       10 |      3722
 dutch      |           11 |       10 |      3722
 english    |           11 |       10 |      3722
 finnish    |           11 |       10 |      3722
 french     |           11 |       10 |      3722
 german     |           11 |       10 |      3722
 hungarian  |           11 |       10 |      3722
 italian    |           11 |       10 |      3722
 norwegian  |           11 |       10 |      3722
 portuguese |           11 |       10 |      3722
 romanian   |           11 |       10 |      3722
 russian    |           11 |       10 |      3722
 spanish    |           11 |       10 |      3722
 swedish    |           11 |       10 |      3722
 turkish    |           11 |       10 |      3722
(16 rows)
分词转换  :后面是位置信息。  
postgres=> select to_tsvector('english', 'Hi i''m digoal, a pger, are you pger?');
            to_tsvector             
------------------------------------
 'digoal':4 'hi':1 'm':3 'pger':6,9
(1 row)
被过滤的都是stop words，即没有意义的词. 例如i, an , a ,am ,yes ,no等（可以自定义）。  
```
2\. 查询词组类型    
这个很好理解，就是你要查啥.  例如我要查postgresql，或者我要查postgresql 或 mysql。   
例子, 同样需要指定配置，对其进行lexeme判断，过滤。  可以组合任意你要查的词组。  
```
postgres=> select to_tsquery('a');
NOTICE:  text-search query contains only stop words or doesn't contain lexemes, ignored
 to_tsquery 
------------
(1 row)
postgres=> select to_tsquery('english', 'mysql|postgresql');
       to_tsquery       
------------------------
 'mysql' | 'postgresql'
(1 row)
postgres=> select to_tsquery('english', 'mysql&postgresql');
       to_tsquery       
------------------------
 'mysql' & 'postgresql'
(1 row)
postgres=> select to_tsquery('english', 'mysql&postgresql|abc');
           to_tsquery           
--------------------------------
 'mysql' & 'postgresql' | 'abc'
(1 row)
postgres=> select to_tsquery('english', '(mysql&postgresql)|abc');
           to_tsquery           
--------------------------------
 'mysql' & 'postgresql' | 'abc'
(1 row)
postgres=> select to_tsquery('english', 'mysql&(postgresql|abc)');
             to_tsquery             
------------------------------------
 'mysql' & ( 'postgresql' | 'abc' )
(1 row)
```
tsquery还支持前缀查询哦，例如    
```
postgres=> select to_tsquery('english', 'postgres:*' );
 to_tsquery 
------------
 'postgr':*
(1 row)
表示postgr开头的lexeme。  
```
对于tsvector，它还有段落或权重的概念例如正文，标题，副标题。一共分4级，A,B,C,D，可以标示对应的lexeme出现在哪个层面的哪个位置。  
Lexemes that have positions can further be labeled with a weight, which can be A, B, C, or D. D is the default and hence is not shown on output:  
```
SELECT 'a:1A fat:2B,4C cat:5D'::tsvector;
          tsvector          
----------------------------
 'a':1A 'cat':5 'fat':2B,4C
```
## 全文检索类型操作符
前面讲的是数据类型，接下来我们讲讲这个数据类型的操作符，就像数字有加减乘除一样，分词类型有匹配，包含，叠加，相邻等操作符。  
![pic](20161115_01_pic_001.png)  
例子  
```
分词字段是否包含了需要查找的词组
to_tsvector('fat cats ate rats') @@ to_tsquery('cat & rat')
 return 
true
将两个分词字段的内容合并
'a:1 b:2'::tsvector || 'c:1 d:2 b:3'::tsvector
  return
'a':1 'b':2,5 'c':3 'd':4
将两个查询词组的内容执行与操作
'fat | rat'::tsquery && 'cat'::tsquery
  return
( 'fat' | 'rat' ) & 'cat'
将两个查询词组的内容执行或操作
'fat | rat'::tsquery || 'cat'::tsquery
  return
( 'fat' | 'rat' ) | 'cat'
not 查询词组的内容
!! 'cat'::tsquery
  return
!'cat'
表示两个相邻的查询词组，这个很牛逼哦，是9.6新加的，例如hello world和hello digoal world，如果搜索hello  world时，前者能匹配，后者不行。 利用了位置信息。  
to_tsquery('fat')  to_tsquery('rat')
  return
'fat'  'rat'
postgres=> select to_tsvector('english', 'Hi i''m digoal, a pger, are you pger?') @@ to_tsquery($$'digoal'  'pger'$$);
 ?column? 
----------
 f
(1 row)
postgres=> select to_tsvector('english', 'Hi i''m digoal, a pger, are you pger?');
            to_tsvector             
------------------------------------
 'digoal':4 'hi':1 'm':3 'pger':6,9
(1 row)
postgres=> select to_tsvector('english', 'hello world');
     to_tsvector     
---------------------
 'hello':1 'world':2
(1 row)
postgres=> select to_tsvector('english', 'hello world') @@ to_tsquery($$'hello'  'world'$$);
 ?column? 
----------
 t
(1 row)
postgres=> select to_tsvector('english', 'hello world') @@ to_tsquery($$'world'  'hello'$$);
 ?column? 
----------
 f
(1 row)