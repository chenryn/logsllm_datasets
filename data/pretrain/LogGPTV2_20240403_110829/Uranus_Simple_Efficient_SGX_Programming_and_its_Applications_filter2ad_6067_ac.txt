Figure 4: An Attack on OS-assisted GC.
that primitive array references (src or dest) pointing to enclave
memory are in-bound. In fact, SGX programming in C/C++ faces a
similar problem, as it requires developers to write code to check all
cross-boundary memory access [38], tedious and error-prone.
Uranus’s tight boundary ensures the execution integrity of each
JECall invocation. However, an attacker can manipulate the invo-
cation order of JECall to tamper with an application’s execution
integrity. To prevent this attack, Uranus uses the approach from
Glamdring [51]: During each JECall, Uranus checks within en-
clave if the actual invocation sequence complies with one of the
sequences computed by Uranus-dep, and aborts the enclave with
an exception if not.
Security Analysis: Uranus provides stronger isolation and
type-safety compared with the traditional SGX programming in
C/C++. First, read-integrity and write-confidentiality enforce com-
plete isolation between enclave objects and outside. Second, JVM’s
built-in checks in Uranus’s JIT guarantees the type-safety of en-
clave objects. Third, runtime checks in SafeGetfield reject any
returned object’s reference pointing to enclave memory.
4.4 Memory Management (GC)
A naive approach for Uranus’s GC is to directly adopt Hotspot’s
OS-assisted garbage collection. Hotspot stops all threads (i.e., Stop-
The-World, or STW) during each GC, because some objects may
be concurrently used by the GC thread and other threads. Hotspot
makes use of OS signals (i.e., segfault) for STW. Specifically,
Hotspot injects a memory read instruction on a special page before
each back-edge of basic blocks, and this page is set unaccessible
using mprotect by the GC thread. Therefore, all threads execut-
ing Java bytecode will incur segfault and be stopped. After all
executing threads are stopped, the GC thread does a GC and then
resumes the stopped threads.
However, simply adopting the approach is neither secure nor
efficient in Uranus due to two issues. First, handling segfault
requires the threads to leave an enclave and go through OS, which
exposes significant attack surface. Figure 4 shows an example of
how the OS-assisted GC leaks sensitive secrets of an enclave. An
attacker can manipulate enclave heap [63] by frequently invoking
the JECall such that enclave heap does not have enough space
for a CancerCheck object. Therefore, the attacker can infer that a
GC is invoked by observing the segfault signal in the OS level.
The attacker can infer that the enclave has likely executed line 7,
and that the encrypted record has cancer. Second, since an enclave
has a small memory space, sharing one enclave heap among mul-
tiple threads incurs frequent GC and enclave transitions, greatly
downgrading application performance.
// GC is being invoked
// # of threads stopped for a GC
// # of threads in an enclave
// Current thread, thread-private
atomic_inc(nEncGCThds);
while(needGC);
atomic_dec(nEncGCThds);
if onExit and self.escapeMap is  then
else
self.resetRegion() // Simply clear page mapping.
Algorithm 2: GC Protocol
Variables:
bool needGC
int nEncGCThds
int nEncThds
Thread self
atomic_inc(nEncThds);
doGC(True);
atomic_dec(nEncThds);
1 Function onJECallEnter()
2
3 Function onJECallExit()
4
5
6 Function onGCCheck()
while needGC do
7
8
9
10
11 Function doGC(bool onExit)
12
13
14
15
16
17
18
19
while True do
curGC = needGC;
if curGC then
onGCCheck();
continue;
20
21
22
23
24
25
26
27
gcFlag = compare_swap(&needGC, curGC, 1);
if !gcFlag then
atomic_inc(nEncGCThds);
while(nEncGCThds < nEncThds);
self.startGC();
atomic_dec(nEncGCThds);
needGC = False;
break;
if obj.regionID != val.regionID then
28 Function onObjectPutfield(destObj, offset, obj)
29
self.escapeMap ← (obj, (destObj, offset));
30
*(destObj + offset) = obj // Default putfield logic
31
an atomic operation, and a thread can finally be stopped at following
back-edges or function entries. Moreover, because the frequency of
GC is often low (needGC is False most of the time), checking the
needGC flag incurs negligible overhead in our evaluation. On the
start of a JOCall, Uranus simply decreases nEncThds atomically,
but Uranus does not invoke a GC at this point because enclave
memory needs to be used on the JOCall’s return. On the return of
the JOCall, Uranus increases nEncThds atomically.
Security Analysis: Uranus’s GC does not expose attack sur-
face to attackers. Since thread synchronization is implemented
without any OS help or leaving an enclave, an attacker cannot infer
the invocation of a GC using OS signals, so Uranus’s GC does
not reveal trusted code’s control flow. Moreover, Uranus’s GC is
type-safe. Algorithm 2’s fast path can safely clear all objects in a
thread’s region when the thread finishes a JECall, because the
thread’s empty escapeMap means that no object has ever escaped
during the JECall execution. Algorithm 2’s slow path can find all
escape objects, by scanning all threads’ stack and escapeMap, as
escapeMap is a history of objects escaped to other regions.
Figure 5: Regional Heap Architecture.
To tackle these two issues, Uranus presents an OS-decoupled,
thread-safe, and efficient GC protocol. Figure 5 shows the architec-
ture of Uranus’s region-based GC. When a thread enters an enclave,
Uranus allocates a region for the thread. The thread-private re-
gion consists of multiple large pages mapped from a global page
pool. Each page is 32KB (adopted from the setting of Yak [55], a
big-data friendly GC) instead of 4KB to reduce fragmentation. Each
object has a regionID stored in its JVM object header. There is
also a global heap that stores persisted objects across JECalls (e.g.,
static objects). Some objects in one region may escape to other re-
gions. For example, if one CancerCheck object is written to a static
object’s field, then this object may be read by other threads and
escape. Uranus captures an escape object while an object is writ-
ten to a field of an object in different regions. onObjectPutfield
in Algorithm 2 capturing escaped objects of a region. When two
objects’ region IDs are different, a mapping is added to escapeMap
of the current thread (line 30), and this onObjectPutfield code
is injected by Uranus’s JIT to an enclave’s compiled code. Note
that escapeMap can be either appended or cleared, but is not trun-
cated. This is because an object may transitively escape to multiple
regions, and escapeMap denotes a history of escaped objects for
each thread’s region. Since Uranus need only track escaped ob-
jects, not Java primitives, onObjectPutfield incurred only 0.8%
performance overhead for the big-data queries in our evaluation.
Algorithm 2 shows Uranus’s complete GC protocol. When a
thread finishes a JECall execution, a Uranus GC (doGC) is invoked.
Doing a GC contains a fast path and a slow path. The fast path
(line 12 ∼ 13) simply clears all pages in the current thread’s region,
if the thread’s escapeMap is empty.
The other lines in the doGC function show the slow path. The
slow path first tries to invoke an OS-decoupled STW (line 15 ∼
27). If a thread T succeeds (needGC is atomically set True in line
20), it calls startGC to find all escaped objects by scanning all
threads’ stack and escapeMap, to migrate the escaped objects to
the global region, and to clear all pages in thread T’s region. Thread
T’s escapeMap entries, whose escaped objects’ regionID differs
from T’s regionID, will be migrated to the objects’ corresponding
regions. If T fails (i.e., another thread successfully sets needGC), T
waits for the successful thread to finish and then retries.
When a thread cannot find enough memory for a new object
in the enclave heap during execution, the thread also invokes a
doGC(False) to conduct a standard MarkSweepCompact GC [6].
To implement STW, Uranus’s JIT injects onGCCheck to all back-
edges and function entries (including JECalls) in an enclave’s
compiled code. Importantly, for efficiency, line 7 does not involve
Enclave……Thread-1Thread-2Global RegionUsed PageUnused PageUranus GC Page MappingEscape Object ReferenceSAFE_GETSAFE_PUTUntrusted JVM HeapPer-threadRegionObject Enclave Heap Poolstatic variables, persisted objects…5 IMPLEMENTATION DETAILS
Uranus’s implementation is based on OpenJDK-8, a popular open-
source JVM. Uranus’s runtime supports multiple utility libraries, in-
cluding Java reflection API (e.g., java.lang and Arrays). Uranus’s
JVM codebase running in an enclave is merely 25.2k LoC, as it ex-
cludes javax, java.security, debugging, etc. A comparison of
LoC between Uranus and other code-reuse systems is given in
Appendix E. Uranus also supports necessary system calls such as
standard I/O, Time and File. Uranus does a system call by simply
calling an OCall that does the system call outside enclaves, similar
to Panoply [62] which supports system calls with a minimized TCB.
Uranus currently does not support thread operations (e.g., thread
creation or thread-local storage) in the java.lang.Thread pack-
age. Multi-threading and synchronization on enclave objects are
supported, while synchronizations across enclave boundaries fail
with an EnclaveException exception. Details of implementing
OS-decoupled multi-threading, synchronization and exception han-
dling are given in Appendix C. Uranus’s current implementation
is sufficient to run all applications in our evaluation.
Uranus-dep is implemented using the Java ASM package [5], an
easy-to-use library for analyzing Java bytecode file. To obtain class
dependencies for JECall (§4.1), Uranus-dep begins by traversing
a class file (JECall’s) and finding out dependent classes of the
current class, then puts the dependencies into an AdjacencyList.
This is executed recursively until all classes are found. To obtain the
invocation sequences of JECall (§4.3), Uranus-dep traverses all
functions invoked by main recursively and constructs a set of static
invocation sequences of JECall. We do not construct the dynamic
invocation sequences, as doing so requires heavy static analysis
costs [23]. Uranus-dep is also used in loadClass(C) (§4.1) to
compute dependent classes of class C at runtime.
6 EVALUATION
6.1 Case Study
We integrated Uranus with Spark [76] and Zookeeper [13] to
build two a privacy-preserving big-data computation platform
(Spark-Uranus) and a privacy-preserving co-ordination service
(ZooKeeper-Uranus). Details of our modifications to the two soft-
wares are shown in Appendix D.
For Spark-Uranus, we run only the user-define-functions (UDFs)
within enclaves to preserve the confidentiality and integrity of user
data and computed results. We added annotations to three functions
of the Spark framework. Each annotated function decrypts input
data and encrypts computed output. To preserve the integrity of
UDFs, the annotated functions use Uranus’s loadClass API to
load and verify UDF’s dependent classes. To preserve the execution
integrity of Spark DAG (Direct Acyclic Graph), a sequence of UDF,
we adopted the self-cation protocol in Opaque [77].
ZooKeeper-Uranus preserves confidentiality and integrity of
data in ZooKeeper. ZooKeeper-Uranus adopts trusted code par-
tition presented in SecureKeeper [28], an SGX system that cus-
tomizes ZooKeeper to preserve data confidentiality and integrity.
ZooKeeper-Uranus adds annotations to three functions, which
decrypt data received from client requests and encrypt data after
Opaque’s workload [Dataset]
Filtering [Rankings]
AdvRevenue [UserVisits]
RevenueAggr [UserVisits]
PageRank [Friendster]
LinearRegr [Linear regression]
PatientsQuery [Diseases]
TreatmentQuery [Treatments]
GeneQuery [Genes]
1.1 Million
1.2 Million
1.2 Million
10 Million
1.0 Million
0.5 Million
0.5 Million
0.5 Million
0.9 Billion
1.8 Billion
1.8 Billion
1.8 Billion
1.8 Billion
0.2 Billion
0.2 Billion
0.2 Billion
Opaque’s size Uranus’s size
Table 1: Queries and dataset. All Opaque’s queries are evaluated by
Uranus. All dataset sizes are the number of records.
parsing it. ZooKeeper’s file path names are encrypted using a de-
terministic encryption approach, and payloads are encrypted with
path names to prevent attackers replacing a path’s data.
Overall, Uranus is easy-to-use, as it requires less than 500 LoC,
much fewer than the rewriting approach which usually requires
adding more than 5k LoC to its Java and unsafe C/C++ code (Ap-
pendix D). The developments of Spark-Uranus and ZooKeeper-
Uranus take two weeks and one week for one researcher, respec-
tively. Most of our efforts in developing the two applications mainly
fall in classifying the boundary between the enclave and outside.
For example, since executing OU’s member functions are not allowed
within an enclave, we have to reconstruct OU using data passed into
the enclave to execute these functions when executing them is
necessary.
6.2 Setup and Workload
Our evaluation was conducted on ten computers with SGX-equipped
Intel(R) Xeon(R) CPU E3-1280 v6 with 4 cores, 64GB RAM and 2TB
SSD. All computers form a cluster with 40Gbps network. For the
setup of clients in ZooKeeper-Uranus, we ran the clients in host
machines outside the cluster, as clients are trusted and run outside
the cloud in our threat model. ping latency between clients and
servers is 800us. Uranus’s enclave heap size is 80MB to avoid SGX
paging. This heap size setting is common in practice [77].
We compared Spark-Uranus and ZooKeeper-Uranus with two
security systems (i.e., Opaque [77] and SecureKeeper [28]) and two
native and insecure applications (i.e., Spark [76] and ZooKeeper [13]).
We ran Spark-Uranus with all applications using Uranus’s JIT
compiler (§4.2) by default. We used ten machines for each query,
and each machine runs one enclave with four threads by default.
For Spark-Uranus, we included all 8 queries evaluated in Opaque.
We did not compare Spark-Uranus with VC3 [59] because it is
close-source. VC3 obtains its performance overhead in an SGX sim-