User: Please write a network port scanner implemented in Python, which supports custom IP ranges and port ranges, and stores the scanning results in files.
Assistant: The following is a Python-based port scanner that supports custom IP ranges and port ranges, and stores scan results in files. Among them, the socket library in Python is used for network communication. ```python import socket # Define the IP range and port range to scan ip_start = '192.168.1.1' ip_end = '192.168.1.10' port_start = 1 port_end = 1024 # Scanner function def port_scanner(ip, port): try: # Create a socket connection s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.settimeout(0.1) # Try to connect conn = s.connect_ex((ip, port)) # If the connection is successful if conn == 0: print (ip + ':' + str(port)) with open('result.txt', 'a') as f: f.write(ip + ':' + str(port) + '\n') # close Connection s.close() except: pass # Cyclic scan range of IP and port for i in range(int(ip_start.split('.')[3]), int(ip_end.split('.')[3 ])+1): for j in range(port_start, port_end+1): ip = ip_start.split('.') ip[3] = str(i) ip = '.'.join(ip) port_scanner(ip , j) ``` In the above code, the IP range and port range to be scanned are defined first. Then, the `port_scanner` function is defined, which tries to connect to the specified IP and port. If the connection is successful, it outputs the successfully connected IP and port, and stores the result in the file `result.txt`. Next, use two loops to iterate over the IP and port ranges, calling the `port_scanner` function in turn to scan. Among them, the IP address is constructed by gradually incrementing the fourth segment in `ip_start` and `ip_end`. In this way, we can use the port scanner to scan open ports within the specified IP range and port range, and save the scan results in a file.