**作者：raycp**  
**原文链接：**
终于到了这里，把qwb2019的这两题qemu逃逸题复现之后，qemu
pwn的复现到这里就告一段落，接下来将会去分析几个qemu的cve。qwb初赛和决赛各有一道qemu逃逸题，初赛是`qwct`，决赛是`ExecChrome`。
因为通过前面的几题分析，对这类pwn题有了一定的掌握。部分分析过程可以省略，所以此次也是将两题写在了一起。
## qwct
### 描述
文件目录：
    $ ll
    -rwxrw-rw-  1 raycp raycp  179 Aug 26 06:01 launch.sh
    drwxr-xr-x  6 raycp raycp 4.0K Sep  6  2017 pc-bios
    -rwxr-xr-x  1 raycp raycp  53M May 25 18:07 QWCT_qemu-system-x86_64
    -rw-rw-r--  1 raycp raycp 3.1M Aug 28 04:42 rootfs.cpio
    -r-xr-xr-x  1 raycp raycp 8.2M Jun  3 23:37 vmlinuz-5.0.5-generic
launch.sh
    #!/bin/bash
    ./qemu-system-x86_64 -initrd ./rootfs.cpio -nographic -kernel ./vmlinuz-5.0.5-generic -L pc-bios/  -append "priority=low console=ttyS0" -device qwb -monitor /dev/null
漏洞应该会在`qwb`设备中。
### 分析
解压文件：
    mkdir cpio
    cd cpio
    mv ../rootfs.cpio ./
    cpio -idmv revision = 0x10;
      k->class_id = 0xFF;
      k->realize = (void (__cdecl *)(PCIDevice_0 *, Error_0 **))pci_qwb_realize;
      k->exit = (PCIUnregisterFunc *)pci_qwb_uninit;
      k->vendor_id = 0x1234;
      k->device_id = 0x8848u;
      v2->categories[0] |= 0x80uLL;
去看`pci_qwb_realize`函数，看到它只注册了一个大小为`0x100000`的mmio，结构体为`qwb_mmio_ops`，其对应的IO函数为`qwb_mmio_read`以及`qwb_mmio_write`。
在分析函数前，看下它的`QwbState`相关结构体，后续会分析会使用得到。
    00000000 crypto_status   struc ; (sizeof=0x1818, align=0x8, mappedto_4600)
    00000000                                         ; XREF: QwbState/r
    00000000 statu           dq ?
    00000008 crypt_key       db 2048 dup(?)
    00000808 input_buf       db 2048 dup(?)
    00001008 output_buf      db 2048 dup(?)
    00001808 encrypt_function dq ?                   ; offset
    00001810 decrypt_function dq ?                   ; offset
    00001818 crypto_status   ends
    00001818
    00000000 ; ---------------------------------------------------------------------------    00000000
    00000000 QwbState        struc ; (sizeof=0x2250, align=0x10, copyof_4601)
    00000000 pdev            PCIDevice_0 ?
    000008E0 mmio            MemoryRegion_0 ?
    000009D0 thread          QemuThread_0 ?
    000009D8 crypto_statu_mutex QemuMutex_0 ?
    00000A08 crypto_buf_mutex QemuMutex_0 ?
    00000A38 crypto          crypto_status ?
    00002250 QwbState        ends
先看`qwb_mmio_write`函数，该函数的主要功能为两个：
  * 当addr为0x1000至0x17ff时，且当`opaque->crypto.statu`为3时，设置`opaque->crypto.crypt_key[addr-0x1000]`的值为value。
  * 当addr为0x2000至0x27ff时，且当`opaque->crypto.statu`为1时，设置`opaque->crypto.input_buf[addr-0x2000]`的值为value。
可以看到`qwb_mmio_write`函数的主要功能就是设置`input_buf`以及`crypto_key`，且由于缓冲区空间大小都是0x800，输入刚好可以填满，不存在溢出。
接下来看`qwb_mmio_read`函数，该函数功能较复杂，包括：
  * 当addr为0时，且当`opaque->crypto.statu`不为5时，初始化所有的缓冲区空间，包括`input_buf`、`output_buf`以及`crypt_key`
  * 当addr为1时，且当`opaque->crypto.statu`为2或者0时，设置statu为3。
  * 当addr为2时，且当`opaque->crypto.statu`为4或者0时，设置statu为1。
  * 当addr为3时，且当`opaque->crypto.statu`为3时，设置statu为4。
  * 当addr为4时，且当`opaque->crypto.statu`为1时，设置statu为2。
  * 当addr为5时，且当`opaque->crypto.statu`为2或者4时，设置`opaque->crypto.encrypt_function`的值为`aes_encrypt_function`函数。
  * 当addr为6时，且当`opaque->crypto.statu`为2或者4时，设置`opaque->crypto.decrypt_function`的值为`aes_decrypto_function`函数。
  * 当addr为7时，且当`opaque->crypto.statu`为2或者4时，设置`opaque->crypto.encrypt_function`的值为`stream_encrypto_function`函数。
  * 当addr为8时，且当`opaque->crypto.statu`为2或者4时，设置`opaque->crypto.decrypt_function`的值为`stream_decrypto_function`函数。
  * 当addr为9时，且当`opaque->crypto.statu`为2或者4时，且当`opaque->crypto.encrypt_function`的值不为空时，创建线程`qwb_encrypt_processing_thread`，并设置statu为5。
  * 当addr为10时，且当`opaque->crypto.statu`为2或者4时，且当`opaque->crypto.decrypt_function`的值不为空时，创建线程`qwb_decrypt_processing_thread`，并设置statu为7。
  * 其余情况则可以根据addr的值读取`input_buff`、`crypto_key`以及`output_buff`。
`qwb_encrypt_processing_thread`线程以及`qwb_decrypt_processing_thread`，则是在线程中调用相应的`opaque->crypto.encrypt_function`函数以及`opaque->crypto.decrypt_function`去实现加解密。
`stream`相关的加解密函数则是实现了一个简单的异或，而`aes`相关的加解密函数则是对输入进行aes加解密，并在最后附上了一个校验值。
所以整个设备的功能主要是实现了一个加解密功能，算法可以选择是流算法或aes算法，主要基于`crypto_status`结构体来记录关键数据。
经过分析该设备中存在两个漏洞，一个是越界读，一个是越界写。
越界读是在`qwb_mmio_read`函数中，其对于`output_buff`读取的判断条件为：只要小于`strlen(output_buff)`，就可以读取相应数据。乍一看没有问题，可是当加解密的数据长度刚好填满了`output_buff`即长度为0x800时，调用`strlen(output_buff)`时会导致获得的长度大于`0x800`，因为拼接上了后面的`encrypt_function`指针的数据。使得越界读到`encrypt_function`指针的数据，实现程序地址的泄露。
越界写在存在于`aes_decrypto_function`以及`aes_encrypto_function`函数中，两个函数都在对输入数据进行aes加密后，在`output_buff`的末尾拼接了一个8字节的校验值，该校验值导致越界写，关键代码如下：
    len = strlen((const char *)input);
    ...
        *(_QWORD *)crc = 0LL;
        v19 = 0;
        c = 0;
        for ( i = 0LL; ; c = crc[i & 7] )
        {
          c ^= output[i];
          idx = i++;
          crc[idx & 7] = c;
          if ( len == i )
            break;
        }
      }
      else
      {
        *(_QWORD *)crc = 0LL;
      }
      *(_QWORD *)&output[len] = *(_QWORD *)crc;
如果`len`长度刚好为0x800，则会导致最后的校验值写入到output_buff[0x800]处，导致越界覆盖了`encrypt_function`指针。
### 利用
如何利用上述的两个漏洞拿到shell呢，大致也是分为四步。
第一步将`input_buff`以及`cyrpto_key`填满，然后调用`stream_encypt_function`将`output_buff`填满，再利用越界读，读出`stream_encypt_function`函数的地址，根据偏移计算出`system
plt`的地址。
第二步构造能够得到`system
plt`校验值的`input_buff`，因为是异或得到的校验值，所以比较容易构造。然后将输入以及key填进去，调用`aes_encypt_function`函数加密，将`output_buff`读出来保存。
第三步是将上一步保存的`output_buff`数据输入到`input_buff`中，再使用相同的key调用`aes_decypt_function`函数进行解密，这样解密出来的数据的校验值就刚好会是`system
plt`，且会覆盖至`encrypt_function`指针。
第四步是将参数赋值到`input_buff`中，最后调用`encrypt_function`，实现`system`函数的调用，拿到flag。
## ExecChrome
qwb 2019 final的题，主办方给了一个虚拟机，虚拟机的用户名是`qwb`，密码是`123456`。进去以后`sudo
./launch.sh`启动虚拟机，qemu虚拟机用户名是`ubuntu`，密码是`123456`，`launch.sh`内容如下：
    #!/bin/bash
    while true
        do ./qemu-system-x86_64 -m 1024 -smp 2 -boot c -cpu host -hda ubuntu_server.qcow2 --enable-kvm -drive file=./blknvme,if=none,id=D22 -device nvme,drive=D22,serial=1234 -net user,hostfwd=tcp::2222-:22 -net nic && sleep 5
    done
### 分析
根据参数`-device
nvme`，可以推断应该主要是这个设备的问题，搜相关函数，看到有很多的函数。经过一番搜索以后发现是根据已有的设备改的代码，目录是`hw/block/nvme.c`。
经过对比，发现主要是在`nvme_mmio_read`以及`nvme_mmio_write`里面修改了部分代码，研究相应代码。
先看`nvme_mmio_read`，原来的代码是：
    if (addr bar)) {
            memcpy(&val, ptr + addr, size);
        }
修改后的代码是：
    memcpy(&val, &ptr[addr], size);