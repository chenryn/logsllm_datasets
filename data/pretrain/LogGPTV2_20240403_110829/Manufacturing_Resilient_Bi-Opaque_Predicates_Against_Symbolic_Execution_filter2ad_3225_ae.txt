670
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:23:23 UTC from IEEE Xplore.  Restrictions apply. 
Algorithm 1: An LLVM template for creating symbolic opaque predicates based on the symbolic memory example in
Figure 4(b).
/* Input an icmp instruction; output 2 opaque
predicates
input : inst
output: type1Opq,type2Opq
/* Parse the icmp instruction
Value* left ← inst->getOperand(0) ;
Value* right ← inst->getOperand(1) ;
Value* symVar ;
ConstantInt* ciObj ;
if isa (*left) then
ciObj ← left ;
symVar ← right ;
end
else if isa (*right) then
symVar ← left ;
ciObj ← right ;
end
if !symVar->getType()->isIntegerTy() then
return;
end
/* Define the size of the two arrays.
ArrayType* ar1AT ← ArrayType::get(intType, 7) ;
ArrayType* ar2AT ← ArrayType::get(intType, 8) ;
/* Allocate storage for the arrays
AllocaInst* ar1AI ← new AllocaInst(ar1AT, '''', inst) ;
AllocaInst* ar2AI ← new AllocaInst(ar2AT, '''', inst) ;
/* ...
/* Here we omit several lines of codes that
initialize the elements of each array.
symV ar, and then load j.
/* ...
/* Create a new variable j that equals to
AllocaInst* jAI ← new AllocaInst(varType, '''', inst) ;
StoreInst* jSI ← new StoreInst(symVar, jAI, inst) ;
LoadInst* jLI ← new LoadInst(jAI, '''', inst) ;
*/
*/
*/
*/
*/
*/
*/
*/
/* Compute j%7.
BinaryOperator* remBO ← BinaryOperator::Create(SRem, jLI,
*/
cInt7, '''', inst);
/* Get an element from the array ar1AI with an
*/
index remBO; load its value to l1LI .
std::vector l1Vec, l2Vec;
l1Vec.push back(cInt0);
l1Vec.push back(remBO) ;
ArrayRef l1AR(l1Vec);
Instruction* l1EPI ← GetElementPtrInst::CreateInBounds(
LoadInst* l1LI ← new LoadInst(l1EPI,'''', false, inst);
/* Get an element from the array ar2AI with an
*/
index l1LI ; load its value to iLI .
ar1AI, l1AR,'''', inst);
l2Vec.push back(cInt0);
l2Vec.push back(l1LI);
ArrayRef l2AR(l2Vec);
Instruction* l2EPI ← GetElementPtrInst::CreateInBounds(
LoadInst* iLI ← new LoadInst(l2EPI, '''', false, inst);
/* Compose a type I opaque predicate, i == j.
ICmpInst* type1Opq ← new ICmpInst(inst, ICMP EQ, iLI,
ar2AI, l2AR,'''', inst);
*/
jLI, '''');
remBO, cInt1,'''', inst);
i == j%7 + 1&&inst .
/* Compose a type II opaque predicate,
BinaryOperator* addBO ← BinaryOperator::Create(ADD,
ICmpInst* leftOpq ← new ICmpInst(inst, ICMP EQ, iLI,
BinaryOperator* andBO ← BinaryOperator::Create(AND,
ICmpInst* type2Opq ← new ICmpInst(inst, ICMP EQ,
cInt1, '''');
leftOpq, inst,'''', inst);
cInt1,andBO,'''');
*/
and demonstrate how it works. This can shed light to more
types of symbolic opaque predicates.
IV. EVALUATION
A. Evaluation Criteria
According to Collberg et al. [22], the evaluation criteria
for assessing software obfuscation quality include potency,
resilience, stealth, and cost. However, not all of the criteria
are applicable to our work. We will evaluate symbolic opaque
predicates with resilience, stealth, and cost.
Resilience evaluates how the obfuscation technique can hold
up against automatic attacks. In this work, we assume the
attackers are symbolic execution-based adversaries, which are
automatic attacks. We should evaluate the security of symbolic
opaque predicates against symbolic execution.
Stealth assesses whether an obfuscation technique is suspi-
cious to human attackers. A stealthy opaque predicate should
not incur abnormal instruction patterns or obvious statistical
difference with normal predicates.
Cost measures the overhead incurred by obfuscation.
Opaque predicates may incur overhead in both program size
and execution time. We should evaluate such overhead when
(cid:22)(cid:145)(cid:151)(cid:148)(cid:133)(cid:135)(cid:3)
(cid:6)(cid:145)(cid:134)(cid:135)
(cid:12)(cid:144)(cid:146)(cid:151)(cid:150)
(cid:15)(cid:15)(cid:25)(cid:16)
(cid:9)(cid:148)(cid:145)(cid:144)(cid:150)(cid:135)(cid:144)(cid:134)
(cid:12)(cid:21)
(cid:6)(cid:145)(cid:134)(cid:135)
(cid:5)(cid:131)(cid:133)(cid:141)(cid:135)(cid:144)(cid:134)
(cid:18)(cid:151)(cid:150)(cid:146)(cid:151)(cid:150)
(cid:5)(cid:139)(cid:144)(cid:131)(cid:148)(cid:155)
(cid:6)(cid:145)(cid:134)(cid:135)
(cid:18)(cid:132)(cid:136)(cid:151)(cid:149)(cid:133)(cid:131)(cid:150)(cid:145)(cid:148)(cid:486)(cid:15)(cid:15)(cid:25)(cid:16)
(cid:6)(cid:145)(cid:144)(cid:150)(cid:148)(cid:145)(cid:142)(cid:486)(cid:136)(cid:142)(cid:145)(cid:153)(cid:3)
(cid:18)(cid:132)(cid:136)(cid:151)(cid:149)(cid:133)(cid:131)(cid:150)(cid:139)(cid:145)(cid:144)
(cid:18)(cid:146)(cid:131)(cid:147)(cid:151)(cid:135)(cid:3)(cid:19)(cid:148)(cid:135)(cid:134)(cid:139)(cid:133)(cid:131)(cid:150)(cid:135)(cid:3)
(cid:22)(cid:151)(cid:132)(cid:149)(cid:150)(cid:139)(cid:150)(cid:151)(cid:150)(cid:139)(cid:145)(cid:144)
Fig. 5: Prototype implementation based on Obfuscator-LLVM.
obfuscating real programs with symbolic opaque predicates
and compare the overhead with existing opaque predicates.
We will not evaluate potency because it is not applicable
to opaque predicates. Potency measures how much obscurity
can be added to the program. This is the major objective of
general obfuscation or control-ﬂow obfuscation, rather than
opaque predicates.
B. Prototype Implementation
We have implemented a prototype obfuscation tool based
on Obfuscator-LLVM [2]. Obfuscator-LLVM is an obfuscation
671
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:23:23 UTC from IEEE Xplore.  Restrictions apply. 
the resilience of our
TABLE I: Evaluation results about
predicate causes false negative issues to a symbolic execution
opaque predicates in Figure 4. Notation: ×f n: a type I opaque
engine; ×f p: a type II opaque predicate causes false positive
√
issues to a symbolic execution engine;
×: the predicate is
insecure, but we can ﬁnd corner cases to defeat the symbolic
execution engine.
Templates of
Symbolic Opaque Predicates
Symbolic Memory
Floating-point
Numbers
Covet Symbolic
Propagation
Parallel Programming
Symbolic Execution Tools
BAP
Type I ×f n
Type II ×f p
Type I ×f n
Type II ×f p
Type I ×f n
Type II ×f p
Type I ×f n
Type II ×f p
Triton
×f n
×f p
×f n
×f p
×f n
×f p
×f n
×f p
Angr
×f n
×f p
√
√
×f n
×f p
×f n
×f p
×