var2 = 'b'
var3 = 'c'
var4 = 'd'
var5 = 'e'
[ne@linuxbox -]$ read-nultiple
Enter one or more values > a
var1 = 'a'
var2 = 
var3 = *
402
---
## Page 404
var4 = '
var5 = 1
[neglinuzbox -]$ read-multiple
Enter one or more values > a b c d e f g
var1 = 'a'
var2 = 'b'
var3 = 'c'
var4 = 'd’
var5 = 'e f g
如果read命令接受到变量值数目少于期望的数字，那么额外的变量值为空，而多余的输入
数据则会被包含到最后一个变量中。如果recad命令之后没有列出变量名。则一个shell变量
REPLY，将会包含所有的输入：
#!/bin/bash
# read-single: read multiple values into default variable
read
echo *REPLY =‘$REPLY**
这个脚本的输出结果是：
[ne@linuxbox -]$ read-single
Enter one or more values > a b c
REPLY = 'a b c d′
29.1.1选项
read支持以下选项：
选项
说明
-a array
把输入赋值到数组array中，从索引号零开始。我们将在第
36章中讨论数组问题。
-d delimiter
用字符串delimiter中的第一个字符指示输入结束，而不是
一个换行符。
403
---
## Page 405
-e
使用Readline来处理输入。这使得与命令行相同的方式编
辑输入。
um U-
读取num个输入字符，而不是整行。
pdtuo1d d-
为输入显示提示信息，使用字符串prompt。
I-
Rawmode.不把反斜杠字符解释为转义字符。
-8
Silentmode.不会在屏幕上显示输入的字符。当输入密码和
其它确认信息的时候，这会很有帮助。
-t seconds
超时.几秒钟后终止输入。若输入超时，read会返回一个非
零退出状态。
-1u fd
使用文件描述符fd中的输入，而不是标准输入。
表 29-1:read 选项
使用各种各样的选项，我们能用read完成有趣的事情。例如，通过-p选项，我们能够提供
提示信息：
#!/bin/bash
# read-single: read multiple values into default variable
. b2
exit 1
fi
404
---
## Page 406
这个脚本提示用户输入一个密码，并等待输入10秒钟。如果在特定的时间内没有完成输入，
29.21FS
通常，shell对提供给read的输入按照单词进行分离。正如我们所见到的，这意味着多个由一
个或几个空格分离开的单词在输入行中变成独立的个体，并被read赋值给单独的变量。这种行
为由shell变量IFS（内部字符分隔符）配置。IFS的默认值包含一个空格，一个tab
和一个换行符，每一个都会把字段分割开。
我们可以调整IFS的值来控制输入字段的分离。例如，这个/etc/passwd文件包含的数据
行使用冒号作为字段分隔符。通过把IFS的值更改为单个管号，我们可以使用read读取/etc/
passwd中的内容，并成功地把字段分给不同的变量。这个就是做这样的事情：
#!/bin/bash
# read-ifs: read fields fron a file
FILE=/etc/passud
file_info=$(grep "^Suser_name:" SFILE)
if [ -n *$file_info* ]; then
IFS=*:" read user pv uid gid nane home shell  1 )) ak invalid_inpst
# is input a valid filenane?
407
---
## Page 409
if [[ $REPLY =- ~[[:alnun:]\-_]+$ J]; then
echo "'SREPLY′ is a valid filenane.*
if [[ -e $REPLY 1]; then
echo "And file '$REPLY′ exists.*
else
echo "However, file *$REPLY′ does not exist.*
fi
# is input a floating point nunber?
if [[ $REPLY =- ^=?[[:digit:]]+\ [[:digit:]]+$ ]]; then
echo "'$REPLY* is a floating point nunber."
else
echo "'gREPLY* is not a floating point nunber."
fi
#is input an integer?
if [[ $REPLY =- ^=?[[:digit:]+$ ]]; then
echo "'gREPLY′ is an integer."
else
echo "'SREPLY* is not an integer."
f1
else
f1
这个脚本提示用户输入一个数字。随后，分析这个数字来决定它的内容。正如我们所看到
的，这个脚本使用了许多我们已经讨论过的概念，包括shell函数，[[]]，（（）），控制操作符
，以及if和一些正则表达式。
29.4菜单
一种常见的交互类型称为菜单驱动。在菜单驱动程序中，呈现给用户一系列选择，并要求用户
选择一项。例如，我们可以想象一个展示以下信息的程序：
Please Select:
1.Display Systen Infornation
2.Display Disk Space
3.Display Hone Space Utilization
0.Quit
408
---
## Page 410
Enter selection [0-3] >
使用我们从编写sys_info_page程序中所学到的知识，我们能够构建一个菜单驱动程序来
执行上述菜单中的任务：
#!/bin/bash
 read-menu: a nenu driven systen infornatiom progran
clear
echo *
Please Select:
1. Display System Information
2. Display Disk Space
3. Display Hone Space Utilization
0.Quit
read -p *Enter selection [0-3] > “
if [[ $REPLY =- ^[0-3]$ ]]; then
if [[ $REPLY == 0 J]: then
echo "Program terninated."
exit
f1
if [[ $REPLY = 1 ]]; then
echo "Hostnase: $HOSTNAME"
uptine
exit
f1
if [[ $REPLY == 2 ]]; then
-FP
exit
fi
if [[ $REPLY = 3 ]]: then
if [[ $(id -u) -eq 0 ]]; then
du -sh /hone/*
else
409
---
## Page 411
du -sh $HOME
fi
exit
f1
else
echo "Invalid entry." >b2
exit 1
fi
saxem at) eap! peq e fIfeaouag sq tueulosd v u spupod x 、afdlrsqnu jo aouasand at,L
从逻辑上讲，这个脚本被分为两部分。第一部分显示菜单和用户输入。第二部分确认用户
反馈，并执行选择的行动。注意脚本中使用的exit命令。在这里，在一个行动执行之后，exit
被用来阻止脚本执行不必要的代码。通常在程序中出现多个exit代码不是一个好主意（它使程
序逻辑较难理解），但是它在这个脚本中可以使用。
29.5总结归纳
在这一章中，我们向着程序交互性迈出了第一步；允许用户通过键盘向程序输入数据。使用目
前已经学过的技巧，有可能编写许多有用的程序，比如说特定的计算程序和容易使用的命令行
工具前端。在下一章中，我们将继续建立菜单驱动程序概念，让它更完善。
29.5.1友情提示
仔细研究本章中的程序，并对程序的逻辑结构有一个完整的理解，这是非常重要的，因为即将
到来的程序会日益复杂。作为练习，用test命令而不是[[]]复合命令来重新编写本章中的
程序。提示：使用grep命令来计算正则表达式及其退出状态。这会是一个不错的练习。
29.6拓展阅读
·Bash参考手册有一章关于内部命令的内容，其包括了read命令：
http://www.gnu.org/software/bash/manual/bashref.html#Bash-Builtins
410
---
## Page 412