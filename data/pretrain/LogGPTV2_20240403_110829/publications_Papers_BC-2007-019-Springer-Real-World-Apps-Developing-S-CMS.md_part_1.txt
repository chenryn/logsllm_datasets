Chapter 10
DEVELOPING COURSE MANAGEMENT
SYSTEMS USING SEMANTIC WEB
TECHNOLOGIES
Jorge Cardoso
Department of Mathematics and Engineering, University of Madeira, 9000-390, Funchal,
Portugal, PI:EMAIL
Abstract. While semantic Web technologies have reached a certain
level of maturity, the industry is still skeptical about its potential and
applicability. Many vendors seem to be adopting a “wait-and-see”
approach while emerging standards and solutions become more fully
developed. The industry and its main players are waiting to see how
real-world applications can benefit from the use of semantic Web
technologies. The success of the Semantic Web vision is dependant on
the development of practical and useful semantic Web-based
applications. To demonstrate the applicability and the benefits of
using semantic Web technologies, we have developed a real-world
application, a Semantic Course Management System (S-CMS),
entirely based on the semantic Web that uses the latest technologies of
this field such as OWL, RQL, RDQL, and SWRL.
1. INTRODUCTION
Many researchers believe that a new Web will emerge in the next
few years based on the ongoing large-scale research and developments
on the semantic Web. Nevertheless, the industry and its main players
are adopting a “wait-and-see” approach to see how real-world
2 The Semantic Web and its Applications
applications can benefit from semantic Web technologies (Cardoso,
Miller et al. 2005). The success of the semantic Web vision (Berners-
Lee, Hendler et al. 2001) is dependant on the development of practical
and useful semantic Web-based applications.
While the semantic Web has reached considerable stability from
the technological point of view, with the development of languages to
represent knowledge (such as OWL (OWL 2004)), to query
knowledge bases (RQL (Karvounarakis, Alexaki et al. 2002) and
RDQL (RDQL 2005)), and to describe business rules (such as SWRL
(Ian Horrocks, Peter F. Patel-Schneider et al. 2003)), the industry is
still skeptical about its potential. For the semantic Web to gain
considerable acceptance from the industry it is indispensable to
develop real-world semantic Web-based applications to validate and
explore the full potential of the semantic Web (Lassila and
McGuinness 2001). The success of the semantic Web depends on its
capability to support applications in commercial settings (Cardoso,
Miller et al. 2005).
In several fields, the technologies associated with the semantic
Web have been implemented with a considerable degree of success.
Examples include semantic Web services (OWL-S 2004), tourism
information systems (Cardoso 2004), semantic digital libraries,
(Shum, Motta et al. 2000), semantic Grid (Roure, Jennings et al.
2001), semantic Web search (Swoogle 2005), and bioinformatics
(Kumar and Smith 2004).
To take the development and widespread character of semantic
Web applications a step further, we have developed a Course
Management System (CMS) (Mandal, Sinha et al. 2004) based on an
infrastructure entirely designed using the technologies made available
by the semantic Web, namely OWL, RQL, RDQL, SPARQL, Bossom
(Bossom 2005), and SWRL.
CMSs are becoming increasingly popular. Well-known CMSs
include Blackboard.com and WebCT.com whose focus has centered
on distance education opportunities. Typically, a CMS includes a
variety of functionalities, such as class project management,
registration tools for students, examinations, enrolment management,
test administration, assessment tools, and online discussion boards
(Meinel, Sack et al. 2002).
The system that we have developed is part of the Strawberry
project1 and explores the use of semantic Web technologies to develop
an innovative Semantic Course Management System (S-CMS). The S-
CMS provides a complete information and management solution for
Developing Course Management Systems Using Semantic Web 3
Technologies
students and faculty members. Our focus and main objective is to
automate the different procedures involved when students enroll or
register for class projects. Managing a large course and its class
projects is a complex undertaking. Many factors may contribute to this
complexity, such as a large number of students, the variety of rules
that allow students to register for a particular project, students’
background, and students’ grades.
2. S-CMS ARCHITECTURE
The architecture of our system is composed of seven distinct layers
(Figure 1): source layer, connection layer, instance layer, query layer,
inference layer, application layer, and presentation layer. The layers
are articulated in the following way. The source layer includes all the
data and information needed by our semantic course management
system. It typically includes data stored in relational databases (other
types of data source are also supported). At this level, we can find
information which describes which faculty members teach which
courses, which students are enrolled for a particular course, which
students are enrolled in a degree, personal information about students
and teachers, etc. The next layer, the connection layer, is responsible
for connecting to the data sources, using a variety of protocols.
The instance layer is the first layer that uses semantic Web
technologies. It is responsible for managing ontologies describing
university domain information such as courses, students, projects, and
teachers. It is also in charge of transforming the data and information
extracted from the data sources into a set of ontology instances.
Essentially, this layer creates a knowledge-base that will be used by
the upper layers. It gets the local schema of heterogeneous data
sources under consideration and creates a unique and virtual global
scheme (i.e., an ontology). Since all data sources refer to the same
ontology, theoretically there are not syntactic neither semantic
conflicts.
4 The Semantic Web and its Applications
Figure 10-1. S-CMS Architecture
The query layer supplies an interface that allows querying the
knowledge-base. The inference layer allows carrying out inference
using semantic rules on the knowledge-base. For example, it is
possible to inquire if all the students enrolled in a project have all
passed on the Knowledge Engineering course. The application layer
provides the Course Management System per se to teachers and
students. Teachers are able to create projects associated with courses
and define semantic enrolment rules. Students are able to specify that
they wish to enroll for a specific project. Additionally this layer
gathers the knowledge inferred from applying the semantic rules to the
semantic knowledge-base and formats it into a suitable presentation
medium (such as PDF or HTML). In the next section we will describe
each of the layers of our architecture in detail.
2.1 Source layer
Course management systems need to access a variety of data
sources to access data and information about students, teachers,
degrees, physical resources (such as class rooms and computing
facilities), courses, and grades. To develop robust course information
management applications it is important to develop an architecture
that can access and integrate unstructured, semi-structured, and
structured data. We will see that the use of an ontology will allow us
to integrate data with different structures, resolving the structural
heterogeneity of data sources.
Developing Course Management Systems Using Semantic Web 5
Technologies
Data sources are uniquely identifiable collections of stored data,
called data sets for which there exist programmatic access and for
which it is possible to retrieve or infer a description of the structure of
the data, i.e. its schema. We have recognized various data sources that
need to be considered when integrating university management
systems: flat files, HTML Web pages, XML, and relational databases.
At the University of Madeira we have identified two main types of
data sources that needed to be accessed in order to retrieve relevant
information about courses and projects: HTML and databases data
sources. Therefore, we have developed two Eclipse plug ins to access
these types of sources (see next section).
HTML. Most, if not all, the Universities have Web sites for
storing and advertising the description of their course, degrees, and
projects. Course management systems require integrating Web-based
data sources in an automated way for querying, in a uniform way,
across multiple heterogeneous Web sites, containing university related
information.
Databases. In universities, it is almost unavoidable to use
databases to produce, store, and search for critical data. Yet, it is only
by combining the information from various database systems that
course management systems can take a competitive advantage from
the value of data. Different university departments use distinct data
sources. To develop course management systems, the most common
form of data integration is achieved using special-purpose applications
that access data sources of interest directly and combine the data
retrieved with the application itself. While this approach always
works, it is expensive in terms of both time and skills, fragile due to
the changes to the underlying sources, and hard to extend since new
data sources require new fragments of code to be written. In our
architecture, the use of semantics and ontologies to construct a global
view makes the integration process automatic, and there is no need for
a human integrator. The University of Madeira database that we have
used had around 200 tables, 600 views, a diversity of data types and a
large dataset. The number of students is in the range of 13 000. One
main problem that we found is that there was no documentation
available describing the tables, attributes, and views.
6 The Semantic Web and its Applications
2.2 Connection layer
The connection layer maintains a pool of connections to several
data sources (in our implementation we use relational databases and
HTML online Web pages). We use a connection layer to achieve two
goals: abstraction and efficiency. On the one hand, the connection
layer adds a level of abstraction over the data sources and it is
responsible for presenting a single interface to the underlying data
sources. On the other hand, the connection layer provides connection
pooling to considerably increase application processing. When the
instance layer requires data from the connection layer, connections to
the data sources must be established, managed, and then freed when
the access is complete. These actions are time and resource
consuming. The use of a connection layer minimizes the opening and
closing time associated with making or breaking data source
connections. For the S-CMS application, we have developed three
Eclipse plug ins. Two of the plug ins are customized to access
MySQL and Microsoft SQLServer 2000 databases, while the third
plug in is dedicated to retrieve information from HTML Web pages.
At this state the major difficulty that we had was to obtain a copy
of the University database from the administrative department with
real data. The authorization to use the database has taken more than 3
months to arrive. Furthermore, the copy of the database that was given
to us had the data fields with sensitive information altered. Examples
these fields included students’ PIN and phone numbers.
2.3 Instance layer
Data integration is a challenge for course management systems
since they need to query across multiple heterogeneous, autonomous,
and distributed (HAD) university data sources produced
independently by multiple organizations units. Integrating HAD data
sources involves combining the concepts and knowledge in the
individual university data sources into an integrated view of the data.
The construction of an integrated view is complicated because
organizations store different types of data, in varying formats, with
different meanings, and referenced using different names (Lawrence
and Barker 2001).
We have identified four types of information heterogeneity (Sheth
1998; Ouskel and Sheth 1999) that may arise when we try to
integrated HAD university data sources:
Developing Course Management Systems Using Semantic Web 7
Technologies
1. System heterogeneity: Applications and data may reside in
different hardware platforms and operating systems.
2. Syntactic heterogeneity: Information sources may use different
representations and encodings for data. Syntactic interoperability
can be achieved when compatible forms of encoding and access
protocols are used to allow information systems to communicate.
3. Structural heterogeneity: Different information systems store
their data in different document layouts and formats, data models,
data structures and schemas.
4. Semantic heterogeneity: The meaning of the data can be expressed
in different ways leading to heterogeneity. Semantic heterogeneity
considers the content of an information item and its intended
meaning.
Approaches to the problems of semantic heterogeneity should
equip heterogeneous, autonomous, and distributed software systems
with the ability to share and exchange information in a semantically
consistent way (Sheth 1999).
To allow the seamless integration of HAD university data sources
rely on the use of semantics. Semantic integration requires knowledge
of the meaning of data within the university data sources, including
integrity rules and the relationships across sources. Semantic
technologies are designed to extend the capabilities of data sources
allowing to unbind the representation of data and the data itself and to
give context to data. The integration of university data sources
requires thinking not of the data itself but rather the structure of those
data: schemas, data types, relational database constructs, file formats,
etc.
As a solution to the problem of integrating heterogeneous data
sources we provide a uniform access to data. To resolve syntactic and
structural heterogeneity we map the local data sources schema into a
global conceptual schema. Since semantic problems can remain, we
use ontologies to overcome semantic heterogeneity. An ontology is an
agreed vocabulary that provides a set of well-founded constructs to
build meaningful higher level knowledge for specifying the semantics
of terminology systems in a well defined and unambiguous manner.
Ontologies can be used to increase communication either between
humans and computers. The three major uses of ontologies (Jasper
and Uschold 1999) are:
1. To assist in communication between humans.
8 The Semantic Web and its Applications
2. To achieve interoperability and communication among software
systems.
3. To improve the design and the quality of software systems.
The main component of the instance layer is the Instance
Generator. The data extracted by the connection layer is formatted and
represented using two different ontologies, the RUD (University
Resource Descriptor) and SUD (Student University Descriptor). In the
following sections we describe the two ontologies and their instances.
2.3.1 Ontology Creation
To deploy our ontologies we have adopted the most prominent
ontology language, OWL (OWL 2004). The development of an
ontology-driven application typically starts with the creation of an
ontology schema. Our ontology schemas contain the definition of the
various classes, attributes, and relationships that encapsulate the
business objects that model a university domain. After conducting an
analysis of ontology editors, we have selected Protégé (Knublauch,
Fergerson et al. 2004) to construct our ontologies.
Since the objective of S-CMS application was to develop a system
which provided the ability to a student enroll in a course projects, the
inference over OWL documents (RUD and SUD) needed to answer to
questions which included:
• Who are the teachers and students?
• What courses are offered by a department?
• Which courses are assigned for a specific teacher?
• For which courses a student is enrolled?
• Which projects are assigned to a course?
• What are the students’ grades of taken courses?
The RUD and SUD ontologies have the following characteristics.
RUD (University Resource Descriptor). A University Resource
Descriptor is a semantic knowledge-base that integrates information
coming from several external data sources spread throughout the
University of Madeira. As we have seen in section 2.1, data describing
important resources to our S-CMS application were stored in
relational databases or HTML Web pages. Our RUD integrated
information about the physical recourses of the university, classes,
courses and degrees offered, faculty members, students enrolled at the
Developing Course Management Systems Using Semantic Web 9
Technologies
university, etc. All the information is represented in OWL. The RUD
schema has much more information than the one that comes from the
various data sources since it establishes hundreds of relationships
between concepts. The relationships are fundamental and will be used
by the inference layer to infer new knowledge.
SUD (Student University Descriptor). A Student University
Descriptor is a resource that describes a university student. Each
student of the university has a SUD. A SUD includes information such
as the student’s name, ID, courses taken, courses enrolled, degree,
telephone number, age, etc. In our architecture, each SUD is
represented in OWL.
Students can make available their SUD using two alternatives.
They can simply put their SUD in their university home page or they
can rely on the SUD management system to manage and advertise
their SUD. The idea of SUDs was inspired by the concept of RSS
(RSS 2005) (Really Simple Syndication). The technology of RSS
allows Internet users to subscribe to websites that have provided RSS