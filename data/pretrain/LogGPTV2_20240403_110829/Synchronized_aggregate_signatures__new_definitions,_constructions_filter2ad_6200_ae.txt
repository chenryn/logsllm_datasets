### Efficient Hashing and Algorithmic Performance

In scenarios where efficient hashing algorithms into group \( G \) are either unknown or computationally expensive [15], our constructions (both within and outside the random oracle model) offer a broader range of implementation options. This flexibility can potentially lead to significantly faster verification times.

### Sensor Networks with a Single Collector

**Figure 2: Sensor networks with a single collector.**

- **(a)** A typical routing pattern in a distributed network, where message bandwidth is indicated by line shadings. By aggregating at each hop, synchronized aggregate signatures reduce the total signature bandwidth to approximately the size of a single signature.
- **(b)** A contrived routing structure necessary to achieve the same result with sequential aggregate signatures.

### Applications of Synchronized Aggregate Signatures

#### Reducing Bandwidth in Sensor and Ad-hoc Networks

Sensor networks [2, 22] consist of limited, often battery-powered devices that collect measurements over a wide area and route them to one or more central base stations for collection. In some applications, cryptographic authentication of these measurements is necessary to prevent false data injection. This is particularly important in settings such as hospital patient monitoring [21] or vehicular communication networks [12].

While various solutions for authenticating sensor messages have been proposed (e.g., [28, 27]), most authenticate only on a hop-by-hop basis or provide temporary security using MACs. However, these methods may not be sufficient to protect communications in sensor networks, where intermediate nodes are easily compromised.

Digital signatures offer better security but can add significant bandwidth overhead, which is problematic for battery-powered sensors. Intermediate routing nodes can perform signature aggregation at points where multiple signatures must be routed towards the collector. This reduces the bandwidth requirements, as shown in Figure 2(a).

In contrast, Figure 2(b) illustrates the impractical routing pattern required to achieve the same result with sequential aggregate signatures [23], which necessitate sequential aggregation along a path.

Unlike systems like TESLA [27], which also rely on synchronized clocks, loss of clock synchronization in our approach does not compromise security. Instead, it only reduces the efficiency of the aggregation process until synchronization is restored. System design must prevent individual signers from reusing state.

#### Software Authentication

Mobile and embedded operating systems increasingly use code signing to ensure that only legitimate binaries run on a device. In constrained systems, the additional storage cost of these signatures can be significant, especially for many small signed binaries, such as dynamic libraries.

For applications where signature verification can be performed all at once, such as at boot time, it might be feasible to sign all binaries under a single signature. However, this approach does not support periodic changes due to software patches and new installations. We propose reducing the signature overhead by aggregating signatures using a synchronized scheme. This allows for dynamic installation of new applications and libraries, with the aggregate periodically updated.

In a synchronized aggregate signature, all signatures under aggregation must share the same state value. While a synchronized clock is not suitable here, software version numbers can serve as an alternative source for signature state. Signatures on all binaries with the same revision number can be aggregated, resulting in meaningful savings if there is significant overlap.

### Conclusion

We presented the first aggregate signature construction in the standard model that does not require any form of interaction among signers to generate. It requires that signers have access to a synchronized clock, and only signatures from the same period can be aggregated. Our construction is practical and based on the Computational Diffie-Hellman assumption.

It is also the first (non-sequential) aggregate scheme where underlying signatures can be batch verified across different signers, messages, and time periods. This makes it a good candidate for various communication applications requiring routing flexibility, speed, and low bandwidth. We discussed the benefits of this approach over sequential aggregation or symmetric authentication in sensor network and software authentication applications.

Future work includes constructing a practical aggregation scheme in the standard model without timing or interactive restrictions and without requiring each user to prove knowledge of their secret key. It remains open whether the former is possible, and if not, proving its impossibility would be interesting. Exploring other relaxations of the full aggregation model is also an open area of research.

### Acknowledgments

The authors thank Brent Waters and the CCS 2010 anonymous reviewers for their helpful comments. The authors were supported by NSF Grant CNS-0716142 and Department of Homeland Security Grant 2006-CS-001-000001-02 (subaward 641). Matthew Green was supported by NSF Grant CNS-1010928, and Susan Hohenberger was supported by a Microsoft New Faculty Fellowship and a Google Research Award.

### References

[References listed as in the original text]

### Verification and Signature Aggregation Algorithms

#### Verification Algorithm

**AggVerify((pk_1, ..., pk_N), (M_1, ..., M_N), σ):**

1. Check that 0 < s < 2^λ.
2. Select a pairing e: G × G → G_T.
3. Let H: {0, 1}^* → Z_p be a hash function treated as a random oracle.
4. Choose random group elements g, u, v, w, z, h ∈ G.
5. Output the public parameters as pp = (G, G_T, H, g, u, v, w, z, h).
6. Assume all parties have access to a function `clock()` that returns the current time period as an element in Z.
7. Verify the signature by checking that:
   \[
   e(\sigma_1, g) = e(g^a, vuH(M)) \cdot e(\sigma_2, w^{\lceil \lg(s) \rceil} z^s h)
   \]

#### Key Generation Algorithm

**KeyGen(1^λ, pp):**

1. Take the parameters pp and select a random a ∈ Z_p.
2. Output the public key as PK = (pp, g^a) and the secret key as SK = (pp, a).
3. Initialize sprev to zero.

#### Signing Algorithm

**Sign(SK, M ∈ {0, 1}^*, s):**

1. Obtain s = `clock()`.
2. If s ≤ sprev or s ≥ 2^λ, abort.
3. Record the current time period as sprev := s.
4. Select a random t ∈ Z_p.
5. Output a signature on M under key SK and time period s as:
   \[
   \sigma_1 = (vuH(M))^a \cdot (w^{\lceil \lg(s) \rceil} z^s h)^t
   \]
   \[
   \sigma_2 = g^t
   \]
   \[
   s
   \]

#### Verification Algorithm

**Verify(PK, M, σ = (σ_1, σ_2, s)):**

1. Ensure that 0 < s < 2^λ. If false, reject.
2. Verify the signature by checking:
   \[
   e(\sigma_1, g) = e(g^a, vuH(M)) \cdot e(\sigma_2, w^{\lceil \lg(s) \rceil} z^s h)
   \]

#### Aggregation Algorithm

**Aggregate((pk_1, M_1, σ_1), ..., (pk_N, M_N, σ_N)):**

1. Parse σ_1 as (σ_1,1, σ_1,2, s).
2. Check that Verify(pk_i, M_i, σ_i) = 1 and that s is the third element of σ_i for i = 1 to N.
3. If any check fails, output ⊥.
4. Otherwise, parse σ_i as (σ_i,1, σ_i,2, s) and compute:
   \[
   \gamma_1 = \prod_{i=1}^N \sigma_{i,1}
   \]
   \[
   \gamma_2 = \prod_{i=1}^N \sigma_{i,2}
   \]
5. Output the aggregate signature as (γ_1, γ_2, s).