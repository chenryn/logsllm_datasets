where eﬃcient algorithms for hashing into G are unknown
or are rather costly [15], our constructions (both in and out
of the random oracle model) allow for a potentially wider set
of implementation options and possibly signiﬁcantly faster
veriﬁcation times.
481(a)
(b)
Figure 2: Sensor networks with a single collector.
Line shadings indicate the total message bandwidth
on each link. Figure (a) shows a typical routing pat-
tern that might be used in a distributed network; by
aggregating at each hop, synchronized aggregate sig-
natures ultimately reduce the total signature band-
width to approximately the size of a single signature.
Figure (b) illustrates a contrived routing structure
necessary to achieve the same result with a sequen-
tial aggregate signature.
6. APPLICATIONS
We now brieﬂy describe some of the applications for syn-
chronized aggregate signatures.
Reducing bandwidth in sensor and ad-hoc networks.
Sensor networks [2, 22] consist of limited, often battery-
powered devices that collect measurements over a wide area
and route them to one or more central base stations for col-
lection. In some applications, it may be necessary to cryp-
tographically authenticate these measurements in order to
mitigate the possibility of false data being injected. This
is particularly important when the authenticity of the data
being collected must be assured, e.g., patient vital signs in a
hospital setting [21] or status messages in a vehicular com-
munication network [12].
While various solutions to the problem of authenticating
sensor messages have been proposed (e.g., [28, 27]), most au-
thenticate only on a hop by hop basis or provide only tempo-
rary (non-repudiable) security (for example, using MACs).
Unfortunately, this may not be suﬃcient to protect commu-
nications in a sensor network, where it is relatively easy to
compromise intermediate nodes and inject false data.
Digital signatures oﬀer better security properties, but can
add signiﬁcant bandwidth overhead. This is problematic
given that sensors often run on battery power and must min-
imize radio communications. Furthermore, the extra trans-
mission requirements fall disproportionately on those nodes
closest to the base station. Figure 2 (a) shows a typical
routing conﬁguration for such a network.
Synchronized aggregate signatures may reduce the band-
width requirements that message signing imposes on a net-
work. Rather than carry all signature data, intermediate
routing nodes can perform signature aggregation at any point
where multiple signatures must be routed towards the col-
lector. Of course, for aggregation to work in our scheme we
require that many nodes sign their messages under the same
state. This can easily be achieved by deriving state from a
loosely synchronized clock. Indeed this requirement is not
unreasonable given that many networks already carry time
synchronization messages [22]. Since aggregate signatures
can themselves be aggregated in our scheme (Section 5), the
base station of Figure 2 only needs to store a single ﬁnal
aggregate.
In Figure 2 (b), we contrast this with the im-
practical routing pattern necessary to achieve the same re-
sult using sequential aggregate signatures [23], which require
that messages be aggregated in a sequential path.
We note that unlike systems such as TESLA [27], which
also relies on synchronized clocks for authentication, loss of
clock synchronization in our approach does not compromise
security. Should nodes become out-of-synch, this will only
reduce the eﬃciency of the aggregation process until such
time as synchronization can be achieved. Of course, it is
necessary to prevent individual signers from reusing state.
This is possible to avoid through correct system design.
Software authentication. Mobile and embedded operat-
ing systems are increasingly using code signing to ensure
that only legitimate binaries have privileges to run on a de-
vice. In constrained systems where storage is at a premium,
the additional storage cost of these signatures may be sig-
niﬁcant. This is particularly true in systems that contain
many small signed binaries, e.g., dynamic libraries.
For applications where signature veriﬁcation can be per-
formed all at once, for instance at boot time, it might be
feasible to sign all binaries under a single signature. How-
ever, the contents of a system may change periodically (due
to software patches and installation of new software), which
would not be supported by this approach. We propose to
instead reduce the signature overhead by aggregating sig-
natures using a synchronized scheme. Due to the dynamic
nature of the aggregation process, new applications and li-
braries can be dynamically installed on the system as nec-
essary, and the aggregate can be periodically updated.
In a synchronized aggregate signature it is necessary that
all signatures under aggregation share the same state value.
While a synchronized clock does not seem appropriate here,
software version numbers may oﬀer an alternative source
for signature state. Signatures on all binaries with revision
number 1 could be aggregated together, as could signatures
with software revision 2 and so on. If there is a signiﬁcant
degree of overlap, this could result in meaningful savings.
7. CONCLUSION
We presented the ﬁrst aggregate signature construction
in the standard model that does not require any form of
interaction among signers to generate. It requires that sign-
ers have access to a synchronized clock and only signatures
from the same period can be aggregated. Our construction
is practical and based on the Computational Diﬃe-Hellman
assumption.
It is also the ﬁrst (non-sequential) aggregate
scheme where the underlying signatures can be batch veriﬁed
across diﬀerent signers, messages and time periods. Thus,
it is a good candidate for a variety of communication appli-
cations where routing ﬂexibility, speed and low bandwidth
are needed. We discussed the beneﬁts of using this approach
over sequential aggregation or symmetric authentication in
sensor network and software authentication applications.
It remains open to construct a practical aggregation scheme
in the standard model without (1) timing or interactive re-
strictions or (2) requiring that each user be able to prove
knowledge of her secret key. We are not certain whether or
not the former, in particular, is possible. If it is not, it would
be interesting to prove this. It is also open to explore other
relaxations of the full aggregation model.
482Acknowledgments
The authors are grateful to Brent Waters and the CCS 2010
anonymous reviewers for their helpful comments. The au-
thors were supported by NSF Grant CNS-0716142 and De-
partment of Homeland Security Grant 2006-CS-001-000001-
02 (subaward 641). In addition, Matthew Green was sup-
ported by NSF Grant CNS-1010928 and Susan Hohenberger
was supported by a Microsoft New Faculty Fellowship and
a Google Research Award.
8. REFERENCES
[1] Jae Hyun Ahn, Matthew Green, and Susan
Hohenberger. Synchronized aggregate signatures: New
deﬁnitions, constructions and applications, 2010. Full
version available at http://eprint.iacr.org.
[2] I. F. Akyildiz, Weilian Su, Y. Sankarasubramaniam,
and E. Cayirci. A survey on sensor networks.
Communications Magazine, IEEE, 40(8):102–114,
2002.
[3] Ali Bagherzandi and Stanislaw Jarecki. Identity-Based
Multi-Signatures based on RSA. In PKC ’10, volume
6056 of LNCS, pages 480–498, 2010.
[4] Boaz Barak, Ran Canetti, Jesper Buus Nielsen, and
Rafael Pass. Universally composable protocols with
relaxed set-up assumptions. In FOCS ’04, pages
186–195, 2004.
[5] Mihir Bellare, Juan A. Garay, and Tal Rabin. Fast
batch veriﬁcation for modular exponentiation and
digital signatures. In Advances in Cryptology –
EUROCRYPT ’98, volume 1403 of LNCS, pages
236–250, 1998.
[6] Mihir Bellare, Chanathip Namprempre, and Gregory
Neven. Unrestricted aggregate signatures. In ICALP
’07, volume 4596 of LNCS, pages 411–422, 2007.
[7] Mihir Bellare and Gregory Neven. Identity-Based
Multi-signatures from RSA. In CT-RSA ’07, volume
4377 of LNCS, pages 145–162, 2007.
[8] Alexandra Boldyreva, Craig Gentry, Adam O’Neill,
and Dae Hyun Yum. Ordered multisignatures and
identity-based sequential aggregate signatures, with
applications to secure routing. In ACM Conference on
Computer and Communications Security (CCS), pages
276–285, 2007.
[9] Alexandra Boldyreva, Craig Gentry, Adam O’Neill,
and Dae Hyun Yum. Ordered multisignatures and
identity-based sequential aggregate signatures, with
applications to secure routing, 2010. Full version
available at
http://www.cc.gatech.edu/~amoneill/bgoy.html.
[10] Dan Boneh and Xavier Boyen. Eﬃcient selective-ID
secure identity-based encryption without random
oracles. In Advances in Cryptology – EUROCRYPT
’04, volume 3027, pages 223–238, 2004.
[11] Dan Boneh, Craig Gentry, Ben Lynn, and Hovav
Shacham. Aggregate and veriﬁably encrypted
signatures from bilinear maps. In EUROCRYPT ’03,
volume 2656 of LNCS, pages 416–432, 2003.
[12] Car 2 Car. Communication consortium.
http://car-to-car.org.
[13] Whitﬁeld Diﬃe and Martin Hellman. New directions
in cryptography. IEEE Transactions on Information
Theory, 22:644–654, 1976.
[14] David Freeman, Michael Scott, and Edlyn Teske. A
taxonomy of pairing-friendly elliptic curves. Journal of
Cryptology, 23:224–280, 2010.
[15] Steven D. Galbraith, Kenneth G. Paterson, and
Nigel P. Smart. Pairings for cryptographers. Discrete
Applied Mathematics, 156(16):3113–3121, 2008.
[16] Craig Gentry and Zulﬁkar Ramzan. Identity-based
aggregate signatures. In Public Key Cryptography ’06,
volume 3958 of LNCS, pages 257–273, 2006.
[17] Shaﬁ Goldwasser, Silvio Micali, and Ronald L. Rivest.
A digital signature scheme secure against adaptive
chosen-message attacks. SIAM Journal of Computing,
17(2):281–308, 1988.
[18] Susan Hohenberger and Brent Waters. Realizing
hash-and-sign signatures under standard assumptions.
In EUROCRYPT ’09, volume 5479 of LNCS, pages
333–350, 2009.
[19] Jung Yeon Hwang, Dong Hoon Lee, and Moti Yung.
Universal forgery of the identity-based sequential
aggregate signature scheme. In ASIACCS ’09, pages
157–160, 2009.
[20] Stephen Kent, Charles Lynn, and Karen Seo. Secure
Border Gateway Protocol (S-BGP). IEEE Journal on
Selected Areas in Communications, 18(4):582–592,
2000.
[21] JeongGil Ko, Tia Gao, Richard Rothman, and
Andreas Terzis. Wireless sensing systems in clinical
environments: Improving the eﬃciency of the patient
monitoring process. IEEE Engineering in Medicine
and Biology (EMB) Magazine, 29(2):103–109, 2010.
[22] Chieh-Jan Mike Liang, Jie Liu, Liqian Luo, Andreas
Terzis, and Feng Zhao. RACNet: A high-ﬁdelity data
center sensing network. In ACM Conference on
Embedded Networked Sensor Systems (SenSys) ’09,
pages 15–28, 2009.
[23] Steve Lu, Rafail Ostrovsky, Amit Sahai, Hovav
Shacham, and Brent Waters. Sequential aggregate
signatures and multisignatures without random
oracles. In EUROCRYPT ’06, volume 4004 of LNCS,
pages 465–85, 2006. Full version at
http://cseweb.ucsd.edu/~hovav/dist/agg-sig.pdf.
[24] Anna Lysyanskaya, Silvio Micali, Leonid Reyzin, and
Hovav Shacham. Sequential aggregate signatures from
trapdoor permutations. In EUROCRYPT ’04, volume
3027 of LNCS, pages 74–90, 2004.
[25] David Naccache. Secure and practical identity-based
encryption, 2005. Cryptology ePrint Archive: Report
2005/369.
[26] Gregory Neven. Eﬃcient sequential aggregate signed
data. In EUROCRYPT ’08, volume 4965 of LNCS,
pages 52–69, 2008.
[27] Adrian Perrig, Ran Canetti, Dawn Song, and J. D.
Tygar. Eﬃcient and secure source authentication for
multicast. In NDSS ’01, pages 35–46, February 2001.
[28] Harald Vogt. Exploring message authentication in
sensor networks. In Security in Ad-hoc and Sensor
Networks, volume 3313 of LNCS, pages 19–30.
Springer, 2005.
[29] Brent Waters. Eﬃcient identity-based encryption
without random oracles. In EUROCRYPT ’05, volume
3494, pages 320–329, 2005.
483AggVerify((pk 1, . . . , pk N ), (M1, . . . , MN ), σ).
The veriﬁcation algorithm checks that 0  2λ. Select a pairing e : G × G → GT . Let H :
{0, 1}∗ → Zp be a hash function treated as a random oracle.
It chooses random group elements g, u, v, w, z, h ∈ G. It out-
puts the public parameters as pp = (G, GT , H, g, u, v, w, z, h).
As before, we assume all parties have access to a function
clock() that on no input, returns the current time period as
an element in Z.
KeyGen(1λ, pp).
The key generation algorithm takes as input the parame-
ters pp and selects a random a ∈ Zp. It outputs the public
key as PK = (pp, ga) and the secret key as SK = (pp, a). It
also initializes sprev to be zero.
Sign(SK, M ∈ {0, 1}∗, s).
The signer obtains s = clock(). If s ≤ sprev or s ≥ 2λ,
then abort. Otherwise, record the current time period as
sprev := s. The signing algorithm selects a random t ∈ Zp
and then outputs a signature on M under key SK and time
period s as:
σ1 = (vuH (M ))a · (w⌈lg(s)⌉zsh)t,
σ2 = gt,
s.
Verify(PK, M, σ = (σ1, σ2, s)).
The veriﬁcation algorithm ﬁrst makes sure that 0 < s <
2λ. If this is false, then it rejects. It veriﬁes the signature
by checking that
e(σ1, g) = e(ga, vuH (M )) · e(σ2, w⌈lg(s)⌉zsh).
Aggregate((pk 1, M1, σ1), . . . , (pk N , MN , σN )).
Parse σ1 as (σ1,1, σ1,2, s). The aggregation algorithm checks
that Verify(pk i, Mi, σi) = 1 and that s is the third element of
σi for i = 1 to N . If any check fails, it outputs ⊥. Otherwise,
it parses σi as (σi,1, σi,2, s) and computes
γ1 =
N
Y
i=1
σi,1
, γ2 =
N
Y
i=1
σi,2
The aggregate signature is output as (γ1, γ2, s).
484