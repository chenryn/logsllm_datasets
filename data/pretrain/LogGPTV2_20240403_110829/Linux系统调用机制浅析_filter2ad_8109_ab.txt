             * of the args.
             */
            regs->ax = ia32_sys_call_table[nr](
                (unsigned int)regs->bx, (unsigned int)regs->cx,
                (unsigned int)regs->dx, (unsigned int)regs->si,
                (unsigned int)regs->di, (unsigned int)regs->bp);
        }
        syscall_return_slowpath(regs);
    }
上述函数调用关系为：
`ia32_sys_call_table`定义位于同目录的syscall_32.c文件中：
    extern asmlinkage long sys_ni_syscall(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long);
    __visible const sys_call_ptr_t ia32_sys_call_table[__NR_syscall_compat_max+1] = {
        /*
         * Smells like a compiler bug -- it doesn't work
         * when the & below is removed.
         */
        [0 ... __NR_syscall_compat_max] = &sys_ni_syscall,
    #include 
    };
`sys_ni_syscall`(kernel/sys_ni.c)定义如下，对应于未实现的系统调用：
    /*
     * Non-implemented system calls get redirected here.
     */
    asmlinkage long sys_ni_syscall(void)
    {
        return -ENOSYS;
    }
`asm/syscalls_32.h`文件内容由syscalltbl.sh脚本根据syscall_32.tbl生成，具体定义在arch/x86/entry/syscalls/Makefile中：
    syscall32 := $(srctree)/$(src)/syscall_32.tbl
    syscall64 := $(srctree)/$(src)/syscall_64.tbl
    syshdr := $(srctree)/$(src)/syscallhdr.sh
    systbl := $(srctree)/$(src)/syscalltbl.sh
    ......
    $(out)/syscalls_32.h: $(syscall32) $(systbl)
        $(call if_changed,systbl)
    $(out)/syscalls_64.h: $(syscall64) $(systbl)
        $(call if_changed,systbl)
`syscall_32.tbl`中存储了系统调用名称，调用号及入口等内容：
syscall_32.c文件中有如下宏定义：
    #define __SYSCALL_I386(nr, sym, qual) extern asmlinkage long sym(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long) ;
    #include 
    #undef __SYSCALL_I386
    #define __SYSCALL_I386(nr, sym, qual) [nr] = sym,
那么`ia32_sys_call_table`数组内容会成为如下形式：
    [0 ... __NR_syscall_compat_max] = &sys_ni_syscall,
    [0] = sys_restart_syscall,
    [1] = sys_exit,
    ......
`#define __SYSCALL_I386(nr, sym, qual) [nr] =
sym,`宏定义了`ia32_sys_call_table`数组项——以系统调用号为索引；`#define __SYSCALL_I386(nr, sym,
qual) extern asmlinkage long sym(unsigned long, unsigned long, unsigned long,
unsigned long, unsigned long, unsigned long);`定义了每项中系统调用函数Entry Point。
如此一来，`ia32_sys_call_table[nr]((unsigned int)regs->bx, (unsigned
int)regs->cx,(unsigned int)regs->dx, (unsigned int)regs->si,(unsigned
int)regs->di, (unsigned
int)regs->bp);`便会调用真正实现功能函数。以`sys_restart_syscall`为例，其定义位于kernel/signal.c中：
    /**
     *  sys_restart_syscall - restart a system call
     */
    SYSCALL_DEFINE0(restart_syscall)
    {
        struct restart_block *restart = &current->restart_block;
        return restart->fn(restart);
    }
`SYSCALL_DEFINE`相关宏定义位于include/linux/syscalls.h中：
    #define SYSCALL_METADATA(sname, nb, ...)
    static inline int is_syscall_trace_event(struct trace_event_call *tp_event)
    {
        return 0;
    }
    #endif
    #define SYSCALL_DEFINE0(sname)                    \
        SYSCALL_METADATA(_##sname, 0);                \
        asmlinkage long sys_##sname(void)
    #define SYSCALL_DEFINE1(name, ...) SYSCALL_DEFINEx(1, _##name, __VA_ARGS__)
    #define SYSCALL_DEFINE2(name, ...) SYSCALL_DEFINEx(2, _##name, __VA_ARGS__)
    #define SYSCALL_DEFINE3(name, ...) SYSCALL_DEFINEx(3, _##name, __VA_ARGS__)
    #define SYSCALL_DEFINE4(name, ...) SYSCALL_DEFINEx(4, _##name, __VA_ARGS__)
    #define SYSCALL_DEFINE5(name, ...) SYSCALL_DEFINEx(5, _##name, __VA_ARGS__)
    #define SYSCALL_DEFINE6(name, ...) SYSCALL_DEFINEx(6, _##name, __VA_ARGS__)
    #define SYSCALL_DEFINE_MAXARGS    6
    #define SYSCALL_DEFINEx(x, sname, ...)                \
        SYSCALL_METADATA(sname, x, __VA_ARGS__)            \
        __SYSCALL_DEFINEx(x, sname, __VA_ARGS__)
    #define __PROTECT(...) asmlinkage_protect(__VA_ARGS__)
    #define __SYSCALL_DEFINEx(x, name, ...)                    \
        asmlinkage long sys##name(__MAP(x,__SC_DECL,__VA_ARGS__))    \
            __attribute__((alias(__stringify(SyS##name))));        \
        static inline long SYSC##name(__MAP(x,__SC_DECL,__VA_ARGS__));    \
        asmlinkage long SyS##name(__MAP(x,__SC_LONG,__VA_ARGS__));    \
        asmlinkage long SyS##name(__MAP(x,__SC_LONG,__VA_ARGS__))    \
        {                                \
            long ret = SYSC##name(__MAP(x,__SC_CAST,__VA_ARGS__));    \
            __MAP(x,__SC_TEST,__VA_ARGS__);                \
            __PROTECT(x, ret,__MAP(x,__SC_ARGS,__VA_ARGS__));    \
            return ret;                        \
        }                                \
        static inline long SYSC##name(__MAP(x,__SC_DECL,__VA_ARGS__))
系统调用返回是通过IRET语句：
其弹出寄存器值在发生中断时已经保存在栈中：
###  b. 动态调试
下面通过动态调试(调试环境使用Qemu+GDB+Busybox搭建)来剖析传统系统调用过程。于entry_INT80_32设置断点后，键入`clear`命令，成功断下：
查看栈中各寄存器值：
确为INT $0x80传统系统调用：
保存系统调用号及相关寄存器值：
传递`regs`参数给`do_int80_syscall_32`及引用其成员值：
对应源码为：
    unsigned int nr = (unsigned int)regs->orig_ax;
    ......
    if (likely(nr ax = ia32_sys_call_table[nr](
                (unsigned int)regs->bx, (unsigned int)regs->cx,
                (unsigned int)regs->dx, (unsigned int)regs->si,
                (unsigned int)regs->di, (unsigned int)regs->bp);
        }
`pt_regs`结构定义如下：
    struct pt_regs {
        /*
         * NB: 32-bit x86 CPUs are inconsistent as what happens in the
         * following cases (where %seg represents a segment register):
         *
         * - pushl %seg: some do a 16-bit write and leave the high
         *   bits alone
         * - movl %seg, [mem]: some do a 16-bit write despite the movl
         * - IDT entry: some (e.g. 486) will leave the high bits of CS
         *   and (if applicable) SS undefined.
         *
         * Fortunately, x86-32 doesn't read the high bits on POP or IRET,
         * so we can just treat all of the segment registers as 16-bit
         * values.
         */
        unsigned long bx;
        unsigned long cx;
        unsigned long dx;
        unsigned long si;
        unsigned long di;
        unsigned long bp;
        unsigned long ax;
        unsigned short ds;
        unsigned short __dsh;
        unsigned short es;
        unsigned short __esh;
        unsigned short fs;
        unsigned short __fsh;
        unsigned short gs;
        unsigned short __gsh;
        unsigned long orig_ax;
        unsigned long ip;
        unsigned short cs;
        unsigned short __csh;
        unsigned long flags;
        unsigned long sp;
        unsigned short ss;
        unsigned short __ssh;
    };
之后便是根据系统调用号进入真正实现功能函数：
检查EFLAGS中VM位，SS中TI位是否设置为1以及CS中RPL：
若TI位未设置，则使用GDT进行索引。之后恢复`SAVE_ALL`所保存的寄存器值(出栈及入栈顺序与`pt_regs`中所定义顺序一致)并执行IRET指令返回调用程序：
返回值则在之前由`do_syscall_32_irqs_on`函数保存在了栈中：
故`RESTORE_REGS`恢复寄存器值时将其弹出到EAX以传递给调用程序。
## 0x02 SYSENTER
###  a. 源码分析
根据Intel SDM中描述，使用SYSENTER命令需要事先设置如下三个MSR寄存器值；
执行到SYSENTER命令时操作如下：
Linux源码中设置三个MSR寄存器值操作位于`syscall_init`函数(arch/x86/kernel/cpu/common.c)中：
    #ifdef CONFIG_IA32_EMULATION
        wrmsrl(MSR_CSTAR, (unsigned long)entry_SYSCALL_compat);
        /*
         * This only works on Intel CPUs.
         * On AMD CPUs these MSRs are 32-bit, CPU truncates MSR_IA32_SYSENTER_EIP.
         * This does not cause SYSENTER to jump to the wrong location, because
         * AMD doesn't allow SYSENTER in long mode (either 32- or 64-bit).
         */
        wrmsrl_safe(MSR_IA32_SYSENTER_CS, (u64)__KERNEL_CS);
        wrmsrl_safe(MSR_IA32_SYSENTER_ESP, (unsigned long)(cpu_entry_stack(cpu) + 1));
        wrmsrl_safe(MSR_IA32_SYSENTER_EIP, (u64)entry_SYSENTER_compat);
    #else
        wrmsrl(MSR_CSTAR, (unsigned long)ignore_sysret);
        wrmsrl_safe(MSR_IA32_SYSENTER_CS, (u64)GDT_ENTRY_INVALID_SEG);
        wrmsrl_safe(MSR_IA32_SYSENTER_ESP, 0ULL);
        wrmsrl_safe(MSR_IA32_SYSENTER_EIP, 0ULL);
    #endif
编译时需要启用`CONFIG_IA32_EMULATION`选项。`entry_SYSENTER_compat`定义位于arch/x86/entry/entry_64_compat.S中：
    /*
     * 32-bit SYSENTER entry.
     *
     * 32-bit system calls through the vDSO's __kernel_vsyscall enter here
     * on 64-bit kernels running on Intel CPUs.
     *
     * The SYSENTER instruction, in principle, should *only* occur in the
     * vDSO.  In practice, a small number of Android devices were shipped
     * with a copy of Bionic that inlined a SYSENTER instruction.  This
     * never happened in any of Google's Bionic versions -- it only happened
     * in a narrow range of Intel-provided versions.
     *
     * SYSENTER loads SS, RSP, CS, and RIP from previously programmed MSRs.
     * IF and VM in RFLAGS are cleared (IOW: interrupts are off).
     * SYSENTER does not save anything on the stack,
     * and does not save old RIP (!!!), RSP, or RFLAGS.
     *
     * Arguments:
     * eax  system call number
     * ebx  arg1
     * ecx  arg2
     * edx  arg3
     * esi  arg4
     * edi  arg5
     * ebp  user stack
     * 0(%ebp) arg6
     */
    ENTRY(entry_SYSENTER_compat)
        /* Interrupts are off on entry. */
        SWAPGS
        /* We are about to clobber %rsp anyway, clobbering here is OK */
        SWITCH_TO_KERNEL_CR3 scratch_reg=%rsp
        movq    PER_CPU_VAR(cpu_current_top_of_stack), %rsp
        /*
         * User tracing code (ptrace or signal handlers) might assume that
         * the saved RAX contains a 32-bit number when we're invoking a 32-bit
         * syscall.  Just in case the high bits are nonzero, zero-extend
         * the syscall number.  (This could almost certainly be deleted
         * with no ill effects.)
         */
        movl    %eax, %eax
        /* Construct struct pt_regs on stack */
        pushq    $__USER32_DS        /* pt_regs->ss */
        pushq    %rbp            /* pt_regs->sp (stashed in bp) */
        /*
         * Push flags.  This is nasty.  First, interrupts are currently
         * off, but we need pt_regs->flags to have IF set.  Second, even
         * if TF was set when SYSENTER started, it's clear by now.  We fix
         * that later using TIF_SINGLESTEP.
         */
        pushfq                /* pt_regs->flags (except IF = 0) */
        orl    $X86_EFLAGS_IF, (%rsp)    /* Fix saved flags */
        pushq    $__USER32_CS        /* pt_regs->cs */
        pushq    $0            /* pt_regs->ip = 0 (placeholder) */
        pushq    %rax            /* pt_regs->orig_ax */
        pushq    %rdi            /* pt_regs->di */
        pushq    %rsi            /* pt_regs->si */
        pushq    %rdx            /* pt_regs->dx */
        pushq    %rcx            /* pt_regs->cx */
        pushq    $-ENOSYS        /* pt_regs->ax */
        pushq   $0            /* pt_regs->r8  = 0 */
        pushq   $0            /* pt_regs->r9  = 0 */
        pushq   $0            /* pt_regs->r10 = 0 */
        pushq   $0            /* pt_regs->r11 = 0 */
        pushq   %rbx                    /* pt_regs->rbx */
        pushq   %rbp                    /* pt_regs->rbp (will be overwritten) */
        pushq   $0            /* pt_regs->r12 = 0 */
        pushq   $0            /* pt_regs->r13 = 0 */
        pushq   $0            /* pt_regs->r14 = 0 */
        pushq   $0            /* pt_regs->r15 = 0 */
        cld
        /*
         * SYSENTER doesn't filter flags, so we need to clear NT and AC
         * ourselves.  To save a few cycles, we can check whether
         * either was set instead of doing an unconditional popfq.
         * This needs to happen before enabling interrupts so that
         * we don't get preempted with NT set.
         *