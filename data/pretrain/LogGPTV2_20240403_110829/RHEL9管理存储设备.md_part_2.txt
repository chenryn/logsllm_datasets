Ceph 存储系统的最稳定版本与 Ceph
管理平台、部署实用程序和支持服务相结合。
Red Hat Ceph Storage 专为云基础架构和 Web 规模对象存储而设计。Red Hat
Ceph Storage 集群由以下类型的节点组成：
::: variablelist
[Red Hat Ceph Storage Ansible 管理节点]{.term}
:   此类节点充当之前版本的 Red Hat Ceph Storage 的传统 Ceph
    管理节点。这种类型的节点提供以下功能：
    ::: itemizedlist
    -   集中存储集群管理
    -   Ceph 配置文件和密钥
    -   （可选）用于在因安全原因无法访问互联网的节点上安装 Ceph
        的本地存储库。
    :::
[监控节点]{.term}
:   每个监控节点运行 monitor 守护进程(`ceph-mon`{.literal})，它将维护
    cluster map 的副本。集群映射包含集群拓扑。连接 Ceph 集群的客户端从
    monitor 中检索 cluster map
    的当前副本，使客户端能够从集群读取和写入数据。
    ::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 重要 {.title}
    Ceph
    可以使用一个监控器运行；但是，为了保证生产环境集群中的高可用性，红帽将仅支持具有至少三个
    monitor 节点的部署。红帽建议为超过 750 OSD 的存储集群部署总计 5 个
    Ceph Monitor。
    :::
[OSD 节点]{.term}
:   每个对象存储设备(OSD)节点运行 Ceph OSD
    守护进程(`ceph-osd`{.literal})，它与附加到节点的逻辑卷交互。Ceph
    在这些 OSD 节点上存储数据。
    Ceph 可在只有很少 OSD
    节点的环境中运行，默认为三个。但对于生产环境，自中等范围环境开始（例如，在一个存储集群中包括
    50 个 OSD）才可能看到其在性能方面的优势。理想情况下，Ceph
    集群具有多个 OSD 节点，通过创建 CRUSH map 来允许隔离的故障域。
[MDS 节点]{.term}
:   每个元数据服务器(MDS)节点运行 MDS
    守护进程(`ceph-mds`{.literal})，后者管理与 Ceph
    文件系统(CephFS)中存储的文件相关的元数据。MDS
    守护进程也协调对共享集群的访问。
[对象网关节点]{.term}
:   Ceph 对象网关节点运行 Ceph RADOS
    网关守护进程(`ceph-radosgw`{.literal})，它是构建于
    `librados`{.literal} 上的对象存储接口，为应用提供 Ceph 存储群集的
    RESTful 网关。Ceph 对象网关支持两个接口：
[S3]{.term}
:   通过与 Amazon S3 RESTful API 的大子集兼容的接口提供对象存储功能。
[Swift]{.term}
:   通过与 OpenStack Swift API 的大集兼容的接口提供对象存储功能。
:::
::: itemizedlist
**其他资源**
-   [Red Hat Ceph
    Storage](https://access.redhat.com/documentation/en-us/red_hat_ceph_storage/4/){.link}
:::
:::
:::
[]{#configuring-an-iscsi-target_managing-storage-devices.html}
::: chapter
::: titlepage
# []{#configuring-an-iscsi-target_managing-storage-devices.html#configuring-an-iscsi-target_managing-storage-devices}第 2 章 配置 iSCSI 目标 {.title}
:::
Red Hat Enterprise Linux 使用 `targetcli`{.literal} shell
作为命令行界面执行以下操作：
::: itemizedlist
-   添加、删除、查看和监控 iSCSI 存储间的连接来利用 iSCSI 硬件。
-   将由文件、卷、本地 SCSI 设备或者 RAM
    磁盘支持的本地存储资源导出到远程系统。
:::
`targetcli`{.literal} 工具带有一个基于树形的布局，包括内置的 tab 完成
、自动完成支持和在线文档。
::: section
::: titlepage
# []{#configuring-an-iscsi-target_managing-storage-devices.html#installing-targetcli_configuring-an-iscsi-target}安装 targetcli {.title}
:::
安装 `targetcli`{.literal} 工具来添加、监控和删除 iSCSI 存储间的连接。
::: orderedlist
**步骤**
1.  安装 `targetcli`{.literal} 工具：
    ``` screen
    # dnf install targetcli
    ```
2.  启动目标服务：
    ``` screen
    # systemctl start target
    ```
3.  将目标配置为在引导时启动：
    ``` screen
    # systemctl enable target
    ```
4.  在防火墙中打开端口 `3260`{.literal}，并重新载入防火墙配置：
    ``` screen
    # firewall-cmd --permanent --add-port=3260/tcp
    Success
    # firewall-cmd --reload
    Success
    ```
:::
::: itemizedlist
**验证**
-   查看 `targetcli`{.literal} 布局：
    ``` screen
    # targetcli
    /> ls
    o- /........................................[...]
      o- backstores.............................[...]
      | o- block.................[Storage Objects: 0]
      | o- fileio................[Storage Objects: 0]
      | o- pscsi.................[Storage Objects: 0]
      | o- ramdisk...............[Storage Objects: 0]
      o- iscsi...........................[Targets: 0]
      o- loopback........................[Targets: 0]
    ```
:::
::: itemizedlist
**其他资源**
-   `targetcli(8)`{.literal} 手册页
:::
:::
::: section
::: titlepage
# []{#configuring-an-iscsi-target_managing-storage-devices.html#creating-an-iscsi-target_configuring-an-iscsi-target}创建 iSCSI 目标 {.title}
:::
创建 iSCSI 目标可让客户端的 iSCSI
发起程序访问服务器中的存储设备。目标和发起方都有唯一的标识名称。
::: itemizedlist
**先决条件**
-   已安装并运行 `targetcli`{.literal}。如需更多信息，请参阅[安装
    targetcli](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/managing_storage_devices/configuring-an-iscsi-target_managing-storage-devices#installing-targetcli_configuring-an-iscsi-target){.link}。
:::
::: orderedlist
**步骤**
1.  进入 iSCSI 目录：
    ``` screen
    /> iscsi/
    ```
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    `cd`{.literal} 命令用于更改目录以及列出要移动到的路径。
    :::
2.  使用以下选项之一创建 iSCSI 对象：
    ::: orderedlist
    1.  使用默认目标名称创建 iSCSI 对象：
        ``` screen
        /iscsi> create
        Created target
        iqn.2003-01.org.linux-iscsi.hostname.x8664:sn.78b473f296ff
        Created TPG1
        ```
    2.  使用特定名称创建 iSCSI 对象：
        ``` screen
        /iscsi> create iqn.2006-04.com.example:444
        Created target iqn.2006-04.com.example:444
        Created TPG1
        Here iqn.2006-04.com.example:444 is target_iqn_name
        ```
        将 [*iqn.2006-04.com.example:444*]{.emphasis}
        替换为特定目标名称。
    :::
3.  验证新创建的目标：
    ``` screen
    /iscsi> ls
    o- iscsi.......................................[1 Target]
        o- iqn.2006-04.com.example:444................[1 TPG]
            o- tpg1...........................[enabled, auth]
               o- acls...............................[0 ACL]
                o- luns...............................[0 LUN]
               o- portals.........................[0 Portal]
    ```
:::
::: itemizedlist
**其他资源**
-   `targetcli(8)`{.literal} 手册页
:::
:::
::: section
::: titlepage
# []{#configuring-an-iscsi-target_managing-storage-devices.html#iscsi-backstore_configuring-an-iscsi-target}iSCSI Backstore {.title}
:::
iSCSI 后端存储支持支持在本地计算机上存储导出的 LUN
数据的不同方法。创建存储对象定义了后端存储使用的资源。
管理员可以选择 Linux-IO(LIO)支持的任何后端存储设备：
::: variablelist
[`fileio`{.literal} 后端存储]{.term}
:   如果您将本地文件系统中的常规文件用作磁盘镜像，请创建一个
    `fileio`{.literal} 存储对象。有关创建 `fileio`{.literal}
    后端存储的信息，请参阅[创建 fileio
    存储对象](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/managing_storage_devices/configuring-an-iscsi-target_managing-storage-devices#creating-a-fileio-storage-object_configuring-an-iscsi-target){.link}。
[`Block`{.literal} backstore]{.term}
:   如果您使用任何本地块设备和逻辑设备，请创建一个 `块存储`{.literal}
    对象。有关创建`块`{.literal}后备存储的信息，请参阅
    [创建块存储对象](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/managing_storage_devices/configuring-an-iscsi-target_managing-storage-devices#creating-a-block-storage-object_configuring-an-iscsi-target){.link}。
[`pscsi`{.literal} 后端存储]{.term}
:   如果您的存储对象支持直接通过 SCSI 命令，请创建一个 `pscsi`{.literal}
    存储对象。有关创建 `pscsi`{.literal} 后端存储的信息，请参阅[创建
    pscsi
    存储对象](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/managing_storage_devices/configuring-an-iscsi-target_managing-storage-devices#creating-a-pscsi-storage-object_configuring-an-iscsi-target){.link}。
[`ramdisk`{.literal} 后端存储]{.term}
:   如果要创建临时 RAM 支持的设备，请创建一个 `ramdisk`{.literal}
    存储对象。有关创建 `ramdisk`{.literal} 后端存储，请参阅[创建内存复制
    RAM
    磁盘存储对象](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/managing_storage_devices/configuring-an-iscsi-target_managing-storage-devices#creating-a-memory-copy-ram-disk-storage-object_configuring-an-iscsi-target){.link}。
:::
::: itemizedlist
**其他资源**
-   `targetcli(8)`{.literal} 手册页
:::
:::
::: section
::: titlepage
# []{#configuring-an-iscsi-target_managing-storage-devices.html#creating-a-fileio-storage-object_configuring-an-iscsi-target}创建 fileio 存储对象 {.title}
:::
`fileio`{.literal} 存储对象可以支持 `write_back`{.literal} 或
`write_thru`{.literal} 操作。`write_back`{.literal}
操作启用本地文件系统缓存。这提高了性能，但会增加数据丢失的风险。
建议使用 `write_back=false`{.literal} 禁用 `write_back`{.literal}
操作来使用 `write_thru`{.literal} 操作。
::: itemizedlist
**先决条件**
-   已安装并运行 `targetcli`{.literal}。如需更多信息，请参阅[安装
    targetcli](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/managing_storage_devices/configuring-an-iscsi-target_managing-storage-devices#installing-targetcli_configuring-an-iscsi-target){.link}。
:::
::: orderedlist
**步骤**
1.  从 `backstores/`{.literal} 目录中进入 `fileio/`{.literal}:
    ``` screen
    /> backstores/fileio
    ```
2.  创建 `fileio`{.literal} 存储对象：
    ``` screen
    /backstores/fileio> create file1 /tmp/disk1.img 200M write_back=false
    Created fileio file1 with size 209715200
    ```
:::
::: itemizedlist
**验证**
-   验证创建的 `fileio`{.literal} 存储对象：
    ``` screen
    /backstores/fileio> ls
    ```
:::
::: itemizedlist
**其他资源**
-   `targetcli(8)`{.literal} 手册页
:::
:::
::: section
::: titlepage
# []{#configuring-an-iscsi-target_managing-storage-devices.html#creating-a-block-storage-object_configuring-an-iscsi-target}创建块存储对象 {.title}
:::
块驱动程序允许使用 `/sys/block/`{.literal} 目录中出现的任何块设备来与
Linux-IO(LIO)一起使用。这包括物理设备，如 HDD、SSD、CD 和
DVD，以及逻辑设备，如软件或硬件 RAID 卷、LVM 卷。