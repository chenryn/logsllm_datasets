### Security Model for Secure Group Instant Messaging

To provide a precise security model for secure group instant messaging, we define a group instant messaging protocol as the tuple of algorithms \(\Pi = ((\text{snd}, \text{rcv}), (\text{SndM}, \text{Add}, \text{Leave}, \text{Rmv}, \text{DelivM}, \text{ModG}, \text{Ack}))\).

- **Network Interface Algorithms:**
  - \(\text{snd} \rightarrow \vec{c}\): Sends a vector of ciphertexts to the central server.
  - \(\text{rcv}(\text{snd}, \text{DelivM}, \text{ModG}, \text{Ack}(c))\): Receives ciphertext \(c\) from the central server and processes it by invoking one of the delivery algorithms and possibly the \(\text{snd}\) algorithm.

- **User Interface Algorithms:**
  - \(\text{SndM}(\text{gr}, m) \rightarrow \text{id}\): Processes the sending of content \(m\) to group \(\text{gr}\).
  - \(\text{Add}(\text{gr}, V) \rightarrow \text{id}\): Processes adding user \(V\) to group \(\text{gr}\).
  - \(\text{Leave}(\text{gr})\): Processes the leaving of user \(U\) from group \(\text{gr}\).
  - \(\text{Rmv}(\text{gr}, V)\): Processes the removal of user \(V\) from group \(\text{gr}\).
  - \(\text{DelivM} \rightarrow (\text{id}, \text{gr}, V, m)\): Stores message \(m\) with reference string \(\text{id}\) from sender \(V\) in group \(\text{gr}\) for displaying it to user \(U\).
  - \(\text{ModG} \rightarrow (\text{id}, \text{gr}')\): Updates the description of group \(\text{gr}\) with \(\text{ID}_{\text{gr}} = \text{ID}_{\text{gr}'}\) to \(\text{gr}'\) after the remote modification with reference string \(\text{id}\).
  - \(\text{Ack} \rightarrow \text{id}\): Acknowledges that action with \(\text{id}\) was delivered and processed by all its designated receivers.

Each algorithm has modifying access to the session state of the calling party \(U\) for the communication in group \(\text{gr}\).

### Group State

A group state \(\text{st}_\text{gr}\) consists of:
- The group \(\text{gr}\).
- The long-term public keys \(\text{PK}\) of all users in \(\text{gr}\).
- The long-term secret keys \(\text{SK}\) of all users in \(\text{gr}\).
- The session state \(\text{ss}_{U,\text{gr}}\) of each user \(U \in \text{gr}\).

A partial group state \(\text{st}_\text{gr}^\text{ps}\) consists only of \(\text{gr}\).

### Deniability and Instructions

For our formal notions of deniability, judges must decide whether a transcript is real or not. To allow them to choose interactions without full oracle access, we introduce the concept of an instruction:

An instruction \(i\) is a tuple that contains:
- A party \(P\),
- A user action \(\text{act} \in \{\text{SndM}, \text{Add}, \text{Leave}, \text{Rmv}, \text{rcv}\}\) (with respective arguments),
- A timepoint \(\text{time}\), and
- A type \(\in \{\text{exp}, \text{ch}, \text{ar}, \text{hid}\}\).

An instruction list \(\text{il}\) is an ordered list of instructions. For an instruction list \(\text{il}\) and \(X \in \{\text{ch}, \text{ar}\}\), \(\text{il}^X\) refers to the sublist of \(\text{il}\) containing all tuples whose type is in \(\{\text{exp}, \text{hid}, X\}\). These sublists are called executable sublists.

### Protocol Extensions

- All members of a group can perform \(\text{SndM}\) and \(\text{Leave}\), but only administrators can execute \(\text{Add}\) and \(\text{Rmv}\).
- For deniability, we extend the model. We denote the long-term secrets of a user \(U\) as \(\text{sk}_U\) (or just \(\text{sk}\), if unambiguous), and any publicly identifying information tied to \(\text{sk}_U\) as \(\text{pk}_U\). The tuple \((\text{pk}_U, \text{sk}_U)\) is \(U\)'s key pair, and her session state in a group \(\text{gr}\) is denoted as \(\text{ss}_{U,\text{gr}}\).

### State and Partial State

A state \(\text{st}\) of our protocol consists of:
- The set \(\text{U}\) of all users.
- The set \(\text{G}\) of all groups.
- The long-term public keys \(\text{PK}\) of all users in \(\text{U}\).
- The long-term secret keys \(\text{SK}\) of all users in \(\text{U}\).
- The session states \(\text{ss}_{U,\text{gr}}\) of all groups \(\text{gr} \in \text{G}\) and all users \(U \in \text{gr}\).

The tuple \((\text{U}, \text{G})\) forms the partial state \(\text{st}^\text{ps}\) of a state \(\text{st}\). Two states \(\text{st}_0\) and \(\text{st}_1\) are equivalent (\(\text{st}_0 \equiv \text{st}_1\)) if and only if their partial states are identical (\(\text{st}_0^\text{ps} = \text{st}_1^\text{ps}\)).

### Consistency and Transcripts

We introduce the notion of consistency for instruction lists:
- An instruction list \(\text{il}\) is consistent with a starting state \(\text{st}\) if executing either \(\text{il}^\text{ch}\) or \(\text{il}^\text{ar}\) with \(\text{st}\) as the starting state is compliant with the protocol, and all intermediate states that directly precede an \(\text{exp}\) action are equivalent between the executable sublists with respect to the target group of that action.

### Execution and Simulation

- Executing an instruction \(\text{inst}\) will cause messages to be sent over the network. The list of all these messages, each with their sender and receiver(s), and the resulting session state form an instruction transcript.
- The transcript of an execution of an executable sublist of an instruction list is the concatenation of the instruction transcripts of all its actions.

### Security Goals

- **Authenticity**: If a message \(m\) is delivered to \(V \in \text{G}_\text{gr}\) by \(\text{DelivM} \rightarrow (\text{id}, \text{gr}, U, m)\), then it was indeed sent by user \(U\) by calling \(\text{SndM}(\text{gr}, m)\).
- **Deniability**: Deniability is modeled as the property that everyone (able to record the transcript of a transaction) can forge transcripts indistinguishable from real protocol runs. This is formally defined in the simulation framework, asking that for every judge \(J\) (the adversary), there exists a simulator \(S\) such that \(J\) cannot distinguish transcripts generated by \(S\) from real transcripts.

### Naive Deniability

- **Naive Offline Deniability (N-OfD)**: A protocol \(\Pi\) offers N-OfD if there is an efficient simulator \(S \in \text{PPT}\) such that no judge \(J\) has a chance of winning \(\text{ExpN-OfD}_{\Pi, S, J}\) with a probability greater than \(1/2\).

### Experiment 1: ExpN-OfD

1. \(b \leftarrow \{0, 1\}\)
2. \(P, \text{il}, \text{PK}, \text{SK} := J()\)
3. \(\text{st} := (P, \emptyset, \text{PK}, \text{SK}, \emptyset)\)
4. Abort if \(\neg \text{is consistent}(\text{il}, \text{st})\)
5. Abort if \(\exists \text{inst} \in \text{il}: \text{inst.type} \in \{\text{hid}, \text{exp}\}\)
6. If \(b = 0\):
   - \(\text{ts} := \text{exec}(\text{il}^\text{ch}, \text{st})\)
7. Else:
   - \(\text{ts} := S(\text{PK}, \text{sim il, st})\)
8. \(b' := J(\text{ts})\)
9. Return \(b = b'\)

This model ensures that the judge cannot distinguish between real and simulated transcripts, even under full corruption.