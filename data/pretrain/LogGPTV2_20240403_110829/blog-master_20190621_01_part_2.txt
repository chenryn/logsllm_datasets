DELETE 999999  
postgres=# vacuum t2;  
VACUUM  
postgres=# \dt+ t2  
                   List of relations  
 Schema | Name | Type  |  Owner   | Size  | Description   
--------+------+-------+----------+-------+-------------  
 public | t2   | table | postgres | 40 kB |   
(1 row)  
postgres=# \di+ idx_t2  
                        List of relations  
 Schema |  Name  | Type  |  Owner   | Table | Size  | Description   
--------+--------+-------+----------+-------+-------+-------------  
 public | idx_t2 | index | postgres | t2    | 21 MB |   
(1 row)  
```  
## HEAP PAGE删除相关参数  
HEAP PAGE从磁盘删除，还取决于参数。例如删除大量数据后，还会写入大量数据，可以不删除数据库，避免重复EXTEND PAGE。(每次extend page都会改变文件大小，会修改文件系统的INODE元信息。有些系统这类操作会存在性能问题)  
[《PostgreSQL 12 preview - heap table末端垃圾page是否在vacuum时被回收可控 - vacuum_truncate》](../201904/20190409_05.md)    
## 为什么表会膨胀  
例如：  
1、长事务，长SQL，长2PC，长wal sender SLOT，standby feedback（并且STANDBY存在长的SQL等），无法回收OLDEST SNAPSHOT后产生的垃圾。  
2、关闭自动回收。导致不自动回收垃圾。  
3、vacuum worker delay，cost limit配置有问题，导致垃圾回收慢。  
4、最近大量删除了表的前段PAGE记录并且还没有完成垃圾回收。  
5、开启了延迟回收参数。  
6、autovacuum worker个数太少，而产生垃圾的表很多，并且产生很快。  
## 为什么索引会膨胀  
同上。  
## 如何处理表膨胀  
1、避免长事务，长SQL，长2PC，长wal sender SLOT，standby feedback（并且STANDBY存在长的SQL等）。  
2、开启snapshot too old  
3、开启自动垃圾回收  
4、设置合理的vacuum worker delay，cost limit配置。  
5、关闭延迟回收参数。  
6、设置合理的autovacuum worker memory  
7、设置合理的autovacuum worker个数  
如果已经膨胀：  
1、pg_repack  
2、vacuum full（锁全表，需要注意）  
## 如何处理索引膨胀  
重新创建索引，注意带CONCURRENTLY选项，否则会堵塞DML。  
## 存储引擎技术  
PG 12开始支持了AM扩展，可以有列存、UNDO存储等加入。  
[《PostgreSQL 12 AM 之 - blackhole 黑洞存储引擎》](../201906/20190607_01.md)    
[《PostgreSQL 基于access method api的列存zedstore》](../201905/20190531_03.md)    
[《PostgreSQL 12 preview - 意义重大改进：增加一层access manager API - 支持 TABLE、INDEX AM(access method) - 为storage  pluggable 开路》](../201903/20190331_03.md)    
[《PostgreSQL 12 preview - psql增强, \\dA 列出当前系统中的access method (table am, index am)》](../201903/20190330_01.md)    
[《PostgreSQL undo多版本存储引擎 zheap测试》](../201809/20180922_01.md)    
## 参考  
[《PostgreSQL 自动vacuum(垃圾回收)与手动vacuum的参数详解》](../201906/20190617_01.md)    
[《PostgreSQL 12 preview - vacuum 新增开关: index_cleanup , 是否同时回收索引》](../201905/20190503_01.md)    
[《PostgreSQL 12 preview - heap table末端垃圾page是否在vacuum时被回收可控 - vacuum_truncate》](../201904/20190409_05.md)    
[《PostgreSQL 12 preview - Add progress reporting for CLUSTER and VACUUM FULL》](../201904/20190405_07.md)    
[《PostgreSQL 12 preview - 调大默认autovacuum sleep间隔, 加速vacuum》](../201904/20190405_01.md)    
[《PostgreSQL 12 preview - vacuum analyze skip_locked》](../201903/20190331_10.md)    
[《PostgreSQL 12 preview - Delete empty pages during GiST VACUUM - 降低GiST索引膨胀概率》](../201903/20190330_08.md)    
[《PostgreSQL 12 preview - 支持列出 vacuum full, cluster 过程详情  pg_stat_progress_cluster》](../201903/20190330_06.md)    
[《PostgreSQL 10 CLogControlLock 等待事件分析与优化 - hint bit, freeze, autovacuum, 风暴》](../201903/20190319_02.md)    
[《PostgreSQL 垃圾回收参数优化之 - maintenance_work_mem , autovacuum_work_mem》](../201902/20190226_01.md)    
[《PostgreSQL 11 内核优化 - 降低vacuum cleanup阶段index scan概率 ( vacuum_cleanup_index_scale_factor , skip index vacuum cleanup stage)》](../201902/20190201_03.md)    
[《Greenplum 垃圾回收、收集统计信息调度 - vacuum analyze 所有表 - 注意锁问题》](../201811/20181112_01.md)    
[《PostgreSQL vacuum 的页内tuple move收缩空间》](../201806/20180629_01.md)    
[《PostgreSQL 并行vacuum patch - 暨为什么需要并行vacuum或分区表》](../201803/20180301_01.md)    
[《Greenplum vacuum ao表和heap表的区别》](../201709/20170913_03.md)    
[《影响或控制PostgreSQL垃圾回收的参数或因素》](../201707/20170709_03.md)    
[《PostgreSQL 10.0 preview 功能增强 - SQL执行剩余时间 - 垃圾回收过程可视pg_stat_progress_vacuum》](../201704/20170421_06.md)    
[《PostgreSQL物理"备库"的哪些操作或配置，可能影响"主库"的性能、垃圾回收、IO波动》](../201704/20170410_03.md)    
[《PostgreSQL 10.0 preview 性能增强 - GIN索引vacuum锁降低》](../201703/20170329_02.md)    
[《PostgreSQL 10.0 preview 多核并行增强 - 索引扫描、子查询、VACUUM、fdw/csp钩子》](../201703/20170313_08.md)    
[《PostgreSQL 9.6 vacuum freeze大幅性能提升 代码浅析》](../201610/20161002_03.md)    
[《PostgreSQL 老湿机图解平安科技遇到的垃圾回收"坑"》](../201607/20160715_01.md)    
[《PostgreSQL 垃圾回收代码分析 - why postgresql cann't reclaim tuple is HEAPTUPLE_RECENTLY_DEAD》](../201505/20150503_01.md)    
[《PostgreSQL 垃圾回收原理以及如何预防膨胀 - How to prevent object bloat in PostgreSQL》](../201504/20150429_02.md)    
[《PostgreSQL nagios monitor script (archive, vacuum, age, conn, rollback, standby, lock, xact, seq, index...)》](../201402/20140227_01.md)    
[《PostgreSQL Systemtap example : autovacuum_naptime & databases in cluster》](../201310/20131010_02.md)    
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")