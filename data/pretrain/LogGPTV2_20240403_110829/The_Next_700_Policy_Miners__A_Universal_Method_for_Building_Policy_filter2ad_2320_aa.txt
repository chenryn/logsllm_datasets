# The Next 700 Policy Miners: A Universal Method for Building Policy Miners

**Authors:**
- Carlos Cotrini
- Luca Corinzia
- Thilo Weghorn
- David A. Basin

**Affiliation:**
Department of Computer Science, ETH Zürich

**Contact:**
- PI: EMAIL (for all authors)

## Abstract
A wide array of access control policy languages has been proposed, and the design of policy miners for each language is a complex task that typically requires specialized machine learning and combinatorial algorithms. We present a novel method, called **Universal Access Control Policy Mining (Unicorn)**, which streamlines the design of policy miners for a variety of policy languages, including ABAC, RBAC, RBAC with user-attribute constraints, RBAC with spatio-temporal constraints, and an expressive fragment of XACML. For the latter two, no policy miners existed until now.

To build a policy miner using Unicorn, one needs to specify the policy language and a metric to quantify how well a policy fits a given permission assignment. From these, the policy miner is constructed as a search algorithm that computes the policy that best fits the given permission assignment. We experimentally evaluate the policy miners built with Unicorn using logs from Amazon and access control matrices from other companies. Despite its generic nature, our method produces policy miners that are competitive with, and sometimes even outperform, state-of-the-art specialized policy miners. Specifically, the true positive rates of policies mined by our method differ by only 5% from those mined by the state of the art, and the false positive rates are always below 5%. In the case of ABAC, our method even outperforms the state of the art.

**CCS Concepts:**
- Computing methodologies → Supervised learning by classification
- Security and privacy → Access control

**Keywords:**
- Access control
- Policy mining
- Security policies
- Machine learning

## 1. Introduction

### 1.1 Motivation and Research Problem
Over the past decades, numerous access control policy languages have been developed, such as Role-Based Access Control (RBAC), Attribute-Based Access Control (ABAC), and eXtended Access-Control Markup Language (XACML). To facilitate policy specification and maintenance, policy miners have been proposed. These algorithms receive an assignment of permissions to users and output a policy that closely matches the given assignment.

Designing a policy miner is challenging and requires sophisticated combinatorial or machine-learning techniques. Moreover, existing policy miners are tailored to specific policy languages and are inflexible, requiring redesign and reimplementation for any modifications. For example, miners for RBAC policies from access control matrices [31] are different from those for RBAC policies from access logs [56]. Despite extensive work in policy mining, no miner exists for XACML [34], a well-known standardized language.

Organizations face the challenge of designing a policy miner that fits their specific policy language and requirements. This problem, examined in Section 3, can be summarized by the question: Is there a more general and practical method to design policy miners?

### 1.2 Contribution
We propose a radical shift in the way policy miners are built. Instead of designing specialized mining algorithms for each policy language, we introduce **Unicorn**, a universal method for building policy miners. Using this method, designers no longer need to be experts in machine learning or combinatorial optimization to create effective policy miners. Our method provides a step-by-step procedure to build a policy miner from the policy language and an objective function that measures how well a policy fits a given permission assignment.

Let \( \Gamma \) be a policy language. The workflow for designing a policy miner for \( \Gamma \) using Unicorn involves the following steps:

1. **Policy Language and Objective Function (Sections 4 and 5):** The designer specifies a template formula for \( \Gamma \) in a fragment \( L \) of first-order logic and an objective function \( \mathcal{L} \) that measures how well a policy fits a permission assignment.
2. **Probability Distribution (Section 5):** From the template formula and \( \mathcal{L} \), we define a probability distribution \( P \) on policies, conditioned on permission assignments. The policy miner aims to compute the most likely policy conditioned on a given permission assignment.
3. **Approximation (Section 6):** Computing the maximum likelihood policy is computationally expensive and prone to local maxima. We use deterministic annealing and mean-field approximation to derive an iterative procedure that approximates \( P \).
4. **Implementation (Section 7):** The policy miner is implemented as a procedure that computes and maximizes the approximated distribution. We provide detailed rewriting rules and pseudocode to guide the implementation.

In summary, Unicorn reduces the complexity of designing a policy miner to specifying a template formula and implementing the maximization of the approximated distribution. We demonstrate that specifying template formulas requires only basic knowledge of first-order logic, which is simpler than designing a machine-learning or combinatorial algorithm.

### 1.3 Applications and Evaluation
Using Unicorn, we have built policy miners for various languages, including RBAC, ABAC, and RBAC with user attributes. Additionally, we have created policy miners for RBAC with spatio-temporal constraints and an expressive fragment of XACML, for which no miners previously existed. We present these in Sections 8 and 9 and in the appendix.

In Section 10, we conduct an extensive experimental evaluation using datasets from real-world case studies on policy mining. We compare our miners with state-of-the-art miners on both real-world and synthetic datasets. The true positive rates of policies mined by our method are within 5% of those mined by the state of the art. For languages like XACML or RBAC with spatio-temporal constraints, the true positive rates are above 75% in all cases and above 80% in most. The false positive rates are always below 5%. For ABAC policies, our method mines policies with lower complexity and higher precision than the state of the art. This demonstrates that Unicorn can build a wide variety of policy miners, including new ones, that are competitive with or even better than the state of the art.

The effectiveness of Unicorn stems from the broad applicability of deterministic annealing (DA), which has been used in various optimization problems. However, computing the required distribution \( P \) is intractable, so we use mean-field approximation (MFA) to compute a tractable distribution \( q \). This approach generalizes to a wide variety of policy languages.

We discuss related work and draw conclusions in Sections 11 and 12. For details on deterministic annealing and mean-field approximation, we refer to the literature [9, 11, 61, 62].

## 2. Preliminaries

### 2.1 Policy Mining
Organizations define policies that specify which permissions each user has. These policies are usually described in a high-level language and must be specified in a machine-readable format to be enforceable. The policy assigns permissions to users and is formalized in a policy language. Enforcement mechanisms intercept each request and check whether it is authorized.

Organizations are dynamic, with changes in users and organizational units leading to changes in access control policies. Manual updates can lead to convoluted policies and over-privileging, making the organization vulnerable to abuse. To address these issues, policy miners have been proposed to construct policies that are consistent with the current permission assignment and can be expressed in the organization's policy language.

A policy miner aims to solve these problems by mining succinct policies that grant necessary permissions and by identifying unused permissions. The problem of policy mining is defined as computing a policy that minimizes an objective function, which typically measures how well a policy fits a permission assignment and its complexity.

### 2.2 Quality Criteria for Policy Miners
Policy miners are evaluated based on the quality of the mined policies, using two criteria:

1. **Generalization:** A mined policy should not only authorize requests consistent with the given permission assignment but also correctly decide what other permissions should be granted to similar users. This is particularly important when mining from logs. Cross-validation is a popular method to evaluate generalization.
2. **Complexity:** A mined policy should not be unnecessarily complex, as policies are reviewed and audited by humans. There is no standard formalization of policy complexity, and each previous work has defined its own metrics. Unicorn can work with a variety of these metrics.

## 3. The Problem of Designing Policy Miners

### 3.1 Status Quo: Specialized Solutions
Numerous policy languages exist, and new ones are continually being proposed. Some languages introduce new concepts, such as extensions of RBAC with temporal and spatial constraints. Researchers have proposed policy miners for various policy languages, often optimizing different objectives. For example, initial RBAC miners focused on minimizing the number of roles, while subsequent miners aimed to be consistent with user-attribute information.

Developing policy miners is non-trivial and generally requires sophisticated combinatorial and machine-learning algorithms. Recent ABAC miners have used association rule mining and classification trees, while the most effective RBAC miners use deterministic annealing and latent Dirichlet allocation. These miners are highly specialized, making it unclear how to apply them to other policy languages or even to extensions of the languages they were designed for.

As a result, organizations that want to use a specialized policy language must develop their own policy miner, which is challenging and time-consuming.

### 3.2 Alternative: A Universal Method
To simplify the development of policy miners, we propose **Unicorn**, a universal method. With this method, organizations no longer need to design specialized policy miners. Instead, they perform the following tasks (see Figure 1):

1. Specify a template formula \( \phi_{\Gamma} \) for the policy language.
2. Define an objective function.
3. Implement the miner using the provided algorithm template.

We formalize these tasks in the following sections.

## 4. A Universal Policy Language

To achieve a universal method, we need a framework for specifying policy languages. We use many-sorted first-order logic, which has been used to model and reason about various policy languages.

Let \( \Gamma \) be a policy language for which we want to design a policy miner. The first task is to specify a template formula \( \phi_{\Gamma} \) for \( \Gamma \). This is a first-order formula that fulfills certain conditions. We show how \( \Gamma \) can be identified with \( \phi_{\Gamma} \in L \) and how policies in \( \Gamma \) can be identified with interpretation functions that interpret \( \phi_{\Gamma} \)'s symbols. This reduces the problem of designing a policy miner to designing an algorithm that searches for a particular interpretation function.

### 4.1 Background in First-Order Logic
We provide an overview of basic many-sorted first-order logic. A signature is a tuple \( (S, R, F, V) \), where \( S \) is a finite set of sorts, \( R \) is a set of relation symbols, \( F \) is a set of function symbols, and \( V \) is a countable set of variables. Each relation and function symbol has an associated type, and we assume the existence of sorts \( \text{USERS} \) and \( \text{PERMS} \) for users and permissions, respectively, and sorts \( \text{BOOL} \), \( \text{INTS} \), and \( \text{STRS} \) for Boolean values, integers, and strings.

We denote sorts with capital bold letters, relation symbols with capital italic letters, and function symbols and variables with small italic letters. We allow well-typed terms and formulas and consider only quantifier-free formulas.

### 4.2 Intuition on Template Formulas
We provide some intuition on template formulas using RBAC as an example. A template formula for RBAC would capture the essential structure of RBAC policies, allowing us to map RBAC policies to interpretations of the formula.

### 4.3 Fragment \( L \) of First-Order Logic
We propose a fragment \( L \) of first-order logic that is powerful enough to contain template formulas for a variety of policy languages, including RBAC, ABAC, and an expressive fragment of XACML.

### 4.4 Definition of Template Formulas
A template formula \( \phi_{\Gamma} \) for a policy language \( \Gamma \) is a first-order formula that captures the essential structure of policies in \( \Gamma \). We define template formulas and provide examples for different policy languages.

### 4.5 Example: Template Formula for RBAC
We provide an example of a template formula for RBAC, showing how it captures the essential structure of RBAC policies.

---

This optimized version of the text is more structured, clear, and professional, providing a comprehensive and coherent overview of the research and its contributions.