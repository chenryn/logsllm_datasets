sage’s landing page URL. We then use these features to calculate
the pairwise distance between WPN messages. Specifically, given
two messages, we compute the distance between their title and
body text, and separately the distance between their landing URL
paths. Then, we compute the total distance between two WPNs as
the average of these two distances. We explain the distance mea-
sures in more detail below. The remaining information contained
in the WPN metadata collected by our browser (e.g., domain names,
screenshots, etc.) that are not used as features will instead be used
later to help us validate the clustering results.
WPN Messages Distance: The text contained in the title and body
of a WPN message is typically short and includes specific keywords
that reflect the theme of the message. To measure the similarity be-
tween these short pieces of text (the concatenation of title and body),
we require a measure that gives importance to significant keywords
found in the content of WPNs. To this end, we use the soft cosine sim-
ilarity [54] measure, which considers the semantic relationship be-
tween words. To compute the similarity between words, we first use
Word2Vec [8] on all WPN messages to obtain a term-similarity ma-
trix. We then convert each WPN message into a bag-of-words repre-
sentation, and input both the term-similarity matrix and the bag-of-
word vectors for each pair of WPN messages into the cosine simi-
larity function (we use softcossim() implemented in gensim[31])
to obtain a pairwise similarity matrix for WPN messages. Since the
similarity value s ∈[0,1], we calculate the distance as d =(1−s).
URL Paths Distance: Given the landing page URL of a WPN
(which we collect along with other metadata, as explained earlier),
we extract the URL path by excluding the domain name and the
query string values, while retaining the relative path to the page and
query string parameter names. To calculate the distance between
two URL paths, we use the Jaccard distance between tokens ex-
tracted from the URL path, such as the components of the directory
path, the page name, and the name of the query string parameters.
WPN Clustering: Once the pairwise distances are computed, we
use agglomerative hierarchical clustering over the distance ma-
trix to form WPN clusters. To determine where to cut the resulting
dendogram, we compute the average silhouette score [52] for clus-
tering results obtained at different cuts, and choose the cut with
the highest score.
WPN Ad Campaigns: As per our definition of WPN ad campaigns,
to determine if a WPN cluster is formed by ads, we take into con-
sideration the source of the WPNs. Namely, we count the number
of effective second-level domain names associated with the web-
sites that sent the push notifications per each cluster. This number
tells us if the WPNs have been published on multiple sources. If a
cluster contains more than one distinct second-level source website
domain, we label the cluster as a WPN ad campaign.
5.2 Identifying Malicious WPN Clusters
To determine the maliciousness of a WPN cluster, we leverage
two well-known URL blocklisting services: Google Safe Browsing
(GSB)[11] and Virus Total[21] (VT). We submit the full URLs of all
the landing pages reached from all WPN messages in the cluster to
these services. Then, we label a particular WPN message as known
malicious if the landing page URL is blocklisted as malicious by any
of the blocklisting services. Next, we use a simple label propagation
policy to flag as malicious the WPN clusters that contain at least
one known malicious WPN.
It is worth noting that we submit full URLs to GSB and VT. If
a full URL, u, is blocklisted, it does not necessarily mean that all
URLs under the same domain name as u will also be blocklisted
(in fact, we found some cases that confirm this observation for
VT). In addition, similar malicious WPN messages often lead to
different domain names, mainly as an attempt to evade blocking
by URL blocklists. At the same time, because WPN messages in the
same cluster are very similar, thanks to our conservative clustering
approach, they share very similar title, body, and structure of the
landing page URL path. Intuitively, if one WPN message is known
to lead to a malicious landing page, it is highly likely that all other
WPN messages in the same cluster also lead to similar malicious
pages, as we will also discuss in our measurement results (see Sec-
tion 6). That is why we rely on the simple “guilty by association”
policy mentioned above for label propagation.
729
When Push Comes to Ads:
Measuring the Rise of (Malicious) Push Advertising
5.3 WPN Meta Clustering
Because URL blocklists have limited coverage, it is possible that
some malicious WPN clusters will not be immediately identified
using the labeling approach discussed above. Furthermore, because
our clustering approach is conservative, it is possible that separate
clusters of WPN messages may in fact be related to each other. To
compensate for this, we perform a meta-clustering step that aims
to group together WPN clusters that may belong to the same WPN
“operation” (e.g., the same advertiser), as explained below.
To this end, we generate a bipartite graph G =(W ,D,E). W is a set
of nodes in which each node represents a WPN cluster obtained as
described in Section 5.1.1. D is the set of all domains pointed to by
the WPN messages we collected (i.e., all domains related to any of
the landing page URLs found in the WPN messages), and E is a set
of edges in which each edge connects a node w ∈W to a node d ∈ D.
Specifically, we connect each WPN cluster to the domains related to
the landing page URLs linked by the WPN messages in the cluster.
Then, we find all isolated components, G1,G2,...,Gm ∈G, and con-
sider each isolated component as a meta cluster of WPN messages.
Notice that this leads us to groups of WPN clusters that are related to
each other because they collectively share common landing page do-
mains. Figure 5 visually shows two examples of such meta clusters.
5.4 Identifying Suspicious WPN Clusters
In this section, we provide a systematic way to identify “potentially
malicious” (also referred to as suspicious) WPN ads in addition to
the malicious WPN ads that were found in the previous section.
Further, this helps to drastically reduce the manual effort required
to analyze all WPNs.
First, we consider those WPNs as suspicious whose landing do-
main names are associated with full URLs that have been previously
labeled as malicious by GSB or VT. Let Gi ∈ G be a meta cluster
that includes one or more of such known malicious URLs. Then, we
label WPN clusters in Gi (and thus all WPN messages in those clus-
ters) as suspicious, unless they were previously labeled as malicious
according to the process described in Section 5.2.
In addition, given a meta cluster Gi, if it contains at least one
WPN cluster wj ∈ W that we previously identified as a WPN ad
campaign (see Section 5.1), we consider all WPN messages con-
tained in the WPN clusters within Gi as WPN ads. This is because
those WPN messages point to domain names related to WPN-based
advertising, since they are linked to one or more WPN ad clusters,
and thus are highly likely WPN-based ad messages themselves.
Apart from using their association with malicious URLs, to iden-
tify additional suspicious WPN ad campaigns that were not pre-
viously labeled based on the process described above and in Sec-
tion 5.2, we proceed as follows. We notice that ad networks such as
Google Ads and Bing Ads recommend advertisers not to promote
the same product, brand, or similar customer experience by redirect-
ing users to multiple destination websites. Violating this policy is
referred to as Abuse of Ad Network by Google Ads[9] and Duplicate
Ads by Bing Ads[3]. Besides the fact that these practices do not
conform to advertising policies, malicious advertisers often prefer
hosting similar malicious content on multiple domains to evade
detection and to continue the attack even if one of their domains
is blocklisted. We then identify such practices and label the related
IMC ’20, October 27–29, 2020, Virtual Event, USA
meta-clusters that lead to multiple different landing domains as
suspicious, to trigger further (manual) analysis to confirm if they
are malicious. We provide detailed measurements on the identified
suspicious WPN ads in Section 6.3.3.
Manual Verification: To validate the malicious URLs detected by
URL blocklists, and to measure the number of suspicious WPN clus-
ters that are in fact malicious, we manually analyze all malicious and
suspicious WPN clusters discovered by our data analysis module.
During manual analysis, we consider multiple factors to determine
if the WPNs are indeed malicious. Once we manually confirm that a
WPN cluster is malicious, we add it to a manual blocklist, which we
then use to inform the measurement results presented in Section 6.
Some of the factors considered during manual blocklisting are
as follows. We recognize a WPN message as malicious if it meets
a combination of the following conditions: (1) leads to a landing
page visually similar to a known malicious page (as determined
by GSB and VT); (2) contains the same WPN message as a known
malicious WPN message, but leads to a different product/site (i.e., a
different landing page); (3) includes message content that is highly
likely malicious or leads to a page with likely malicious content
such as rewards that clearly seem too good to be true, as is typical
of survey scams [37], false financial alerts, etc.; or (4) leads to a
landing page that shares several domain-related properties with
known malicious sites, such as IP address, registrant, similar do-
main name, etc. We further discuss our manual analysis process by
presenting some examples in Section 6.3.2.
6 MEASURING WPN ADS IN THE WILD
In this section, we report measurements on the usage of WPNs as
an ad delivery platform, and provide insights into the malicious
use of WPN ads.
6.1 Data Collection Setup
We first describe PushAdMiner’s setup for harvesting in-the-wild
WPN messages for both desktop and mobile environments. Because
our internal browser instrumentations are implemented by extend-
ing the browser code provided by [58], our data collection process
leverages Chroumium’s code base version 64.0.3282.204, which we
built for both Linux and Android environments.
Seeding the WPN Crawler. Our main goal is to setup the WPN
6.1.1
data collection system to maximize our chances of collecting WPN-
based ads, so that we can measure their properties and discover
abuse. To this end, we rely on the publicwww.com code search en-
gine. Compared to simply crawling popular websites, this allowed
us to more efficiently discover a diverse set of URLs (both popular
and unpopular) that use push notifications. We first identify a seed
set of popular advertisement networks that support push notifica-
tion advertisements. Specifically, by manually performing online
searches and reading articles and forums dedicated to advertising
online, we manually discovered 15 popular ad networks that pro-
vide push advertisement services. We registered an account with 9
of these ad networks to obtain the JavaScript code that needs to be
embedded in an ad-publishing websites to include the ad networks’
SWs that will control their push notifications requests. We then
used the publicwww.com code search engine to find websites (i.e.,
URLs) that likely embed the identified ad network’s code. The code
730
IMC ’20, October 27–29, 2020, Virtual Event, USA
K. Subramani, X. Yuan, O. Setayeshfar, P. Vadrevu, K. Lee and R. Perdisci
search engine (publicwww.com) itself provides a list of ad networks
to search keywords mappings [15], which we leveraged to obtain
URLs of websites that likely embedded ads from the remaining 6
seed ad networks of interest, without the need to register an ac-
count with those networks as well. The list of 15 seed ad networks
we discovered this way is shown in Table 1.
In addition to the search keywords related to the 15 ad networks
mentioned above, we further used generic keywords that poten-
tially indicate that a web page employs push notifications, such
as NotificationrequestPermission, pushmanagersubscribe, a
‘push’ parameter value for addEventListener, etc. Overall we ob-
tained a list of 19 code search keywords to be used for searches on
publicwww.com that are likely to lead to URLs that make use of
push notifications. These keywords allow us to explore a large set
of web pages that goes beyond websites where ads from the seed
ad networks are most likely hosted. Table 1 provides a count of the
HTTPS URLs found via publicwww.com for each ad network and
generic WPN-related keyword.
As a result of the above search, we were able to gather a total
of 87,622 HTTPS URLs that could potentially register service work-
ers and publish WPN ads (notice that SWs can only be registered
by HTTPS origins). These URLs were hosted on 82,566 distinct
second-level domain names. We use this set of URLs as seed for
PushAdMiner’s WPN message crawlers. Notice that there is no
guarantee that the sites we crawl will in fact lead us to registering
for and receiving WPN-based ads. Rather, only a subset of these
web pages will actually request notification permissions. Therefore,
we visited each URL and retained only those that actually make a re-
quest for a notification permission. Then, we used PushAdMiner to
automatically grant notification permission requests on those URLs.
As shown in the last column of Table 1, overall we identified 5,849
URLs hosted on 5,697 distinct second-level domains that issued a
notification permission request. Of these 5,697 domains, 2,040 (36%)
ranked within the Alexa.com top one million most popular web-
sites, and 1,383 of them actually sent us notifications during our
experiment period. Table 2 shows a detailed breakdown of how the
2,040 domains ranked among the Alexa.com most popular websites.
These results show that our process for collecting WPNs is not
limited to unpopular, “low-tier” websites. In addition, they show
that even highly ranked websites can push WPN ads, some of which
resulted to be malicious.
6.1.2 Collecting WPNs in a Desktop Environment. To automatically
harvest WPN advertisements at a large scale, we leverage Docker
containers [29] to launch several parallel instances of our instru-
mented browser-based crawlers. During our experiments, we used
four different Ubuntu 16.04 Linux machines having between 8 to 32
CPU cores and 64 to 128 GB of memory each, running a total of 20
to 50 Docker sessions in parallel at a time. For each seed URL that
issues a notification permission request, we start the monitoring
phase described below.
Every time we visit a URL, we wait 5 minutes to make sure the
website has sufficient time to present our browser with a notification
request. Once a permission request is received and automatically
granted by a browser instance, a SW is registered. If a SW was regis-
tered, we keep the related Docker container alive for an additional
15 minutes, to allow the browser to receive the first (or more than
731
one) WPN message from the visited URL. To select this 15 minutes
threshold, we first performed pilot experiments with much longer
waiting times (up to 96 hours) for a large subset of URLs (1,425 URLs,
to be precise), and observed that 98% of them sent their first notifi-
cation within 15 minutes of when the permission was first granted.
Given a container, and therefore a browser instance that granted
notification permissions to a specific URL, after the first 15 min-
utes of its life we suspend the container to free up resources for
instantiating a new container that will visit a new URL. However,
we periodically resume suspended containers to see if they will
receive additional notifications, which are queued in the FCM and
sent to the browser as it comes back online.
Table 1: URLs and Notification Permission Request counts
Ad Network
Ad-Maven
PushCrew
OneSignal
PopAds
PushEngage