function where Nt carries signiﬁcantly more weight than
Nm.
A possible optimisation model is to minimise some cost
function (e.g., Nd+0.5Nt+0.01Nm). Alternatively, we could
consider constrained optimisation that imposes a bound on
Nd, while minimising a cost function involving the other two
measurements (e.g., Nt + 0.02Nm). Since cost functions de-
pend on application scenarios, we do not attempt to tune
our algorithm to any particular cost function. Instead, we
design search strategies with a general objective of minimis-
ing Nd, followed by Nt and Nm.
2.5 Flipping Samples and Gap
Let us consider a typical path x = (cid:104)x0, x1, . . . , xL(cid:105) in
which x0 is malicious and rejected while xL is benign and
accepted. Somewhere along the path, the samples turn from
malicious to benign, and from rejected to accepted. Start-
ing from x0, let us call the ﬁrst sample that is benign the
malice-ﬂipping sample, and the ﬁrst accepted sample the
reject-ﬂipping sample (see Figure 1). Let mx and rx be the
respective number of morphing steps from x0 to reach the
malice-ﬂipping sample and reject-ﬂipping sample. That is,
mx = arg min
rx = arg min
{T (xi) = benign},
{D(xi) = accept}
i
i
We call mx the malice-ﬂipping distance, and rx the reject-
ﬂipping distance. We further deﬁne by gx the gap between
mx and rx:
gx = rx − mx.
The value of gx is of particular interest. If gx  rx, output the reject-ﬂipping
sample and halt (i.e., an evading sample is found).
(c) Let (cid:98)x be the sample along x at a distance of
ciate the sample(cid:98)x with the score s. Insert(cid:98)x into
(cid:98)∆mx(cid:99) morphing steps from the starting point.
Compute the score s = score(mx, rx), and asso-
S.
3. Keep q2 samples with the largest scores in S, and dis-
card the rest .
Scoring function..
Figure 2: Illustrating three iterations of Hill-Climbing. The
parameters (q1, q2, ∆) are (1, 2, 0.5). Hence, S only contain
one starting sample. The sample x0, x1 and x2 are the start-
ing sample chosen for the ﬁrst, second and third iteration
respectively. The sample e is evading.
A crucial component is the scoring function score. Two
possible choices of the scoring function are based on diﬀer-
ence or relative ratio of the two ﬂipping distances:
score1(mx, rx) = mx − rx,
Next, we present an improved version of EvadeHC0, called
EvadeHC, that employs a branch-and-bound technique to fur-
ther reduces the number of required detector queries.
3.4 Enhanced Evasion by Hill-Climbing
score2(mx, rx) = mx/rx.
EvadeHC
Recall that in EvadeHC0, a complete binary search is car-
ried out on each path (Step 2(b)) to ﬁnd a reject-ﬂipping
distance rx. Thus, it requires q1 binary searches with the
detector D to ﬁnd the best q2 candidates in each iteration.
EvadeHC, on the other hands, performs a single binary search
to ﬁnd a score ˆS such that exactly q2 candidates have scores
greater than ˆS.
Speciﬁcally, the binary search takes in a set of paths P as
input. We assume that the malice-ﬂipping distance of each
path in P is already determined. Let ˆS be the target score,
and ˆP be the target set of paths that attains scores greater
than ˆS. EvadeHC searches for ˆS and ˆP in a single binary
search, while maintaining a set of candidate paths C which
is initially set to be P .
We now describe a step in the binary search that deter-
mines whether the target ˆS is greater than a testing value
S0.
1. For each path x in C, carry out the following:
(a) Determine the smallest reject-ﬂipping distance rx
such that the score is greater than S0. This does
not require any query since the malice-ﬂipping
distance is known.
(b) Check whether this path attains a score larger
than S0. This is achieved by querying D, with the
sample at distance rx from the starting point. If
the sample is accepted, then the score is greater
than S0.
2. If the total number of paths attaining score greater
than S0 is more than q2, then ˆS must be larger than
x0x1x2benign malicious reject accept eS0. Discard all paths whose score is lower than S0,
and recursively search on the upper half of S0.
3. Otherwise, ˆS must be smaller than S0, and all paths
with score higher than S0 must be in ˆP . Remove them
from C and recursively search on the lower half of S0
for the remaining paths.
The applicability of this reduction depends on the choice
of scoring function. It is applicable as long as the scoring
function is decreasing with respect to the reject-ﬂipping dis-
tance rx, which is the case for our choices of scoring functions
score1 and score2.
Similar to BiRand, the binary search is designed to reduce
Nd. If queries to the tester are more expensive than the de-
tector’s queries, we can swap and apply the binary search on
the malice-ﬂipping distances, and thus reducing Nt instead.
Parameters q1, q2, ∆.
.
Figure 2 illustrates the searching process.
Intuitively, a
larger q1 would improve accuracy of going toward the right
direction while a larger q2 would increase the robustness by
recovering from local minimum, and a larger jump factor ∆
could reduce the number of iterations in good cases. Never-
theless, excessively large parameters might not increase the
eﬀectiveness of the search but rather incurs unnecessarily ex-
pensive performance cost. We examine in further details the
eﬀect of these parameters on the performance of EvadeHC in
our experiments (Section 5).
4. PROBABILISTIC MODELS
In this section, we explain the intuition behind the design
of the proposed EvadeHC. In general, for searching to make
sense, each sample should have a score-value for the under-
lying “state”. We ﬁrst give a way to assign a real-value state
(which is also the score) to a sample based on the binary
outcomes of T and D (“accept” versus “reject” and “mali-
cious” versus “benign”). Next, we propose a hidden state
model to capture the notion that the morphing process is
seemingly random.
4.1 States Representation
Given a sample x, we have 4 possible states from the bi-
nary outcomes of T and D. A searching strategy generally
needs to select the “best” candidate from a given set of sam-
ples, and this 4-state representation alone would not provide
meaningful information for selection.
Our main idea is to, ideally, assign the probability that
a random path (generated by the morpher) starting from x
has a reject-ﬂipping sample that is malicious2.
Evading Probability as the state..
Given a starting point x, let Mx be the random variable
of the malice-ﬂipping distance on random path. Recall that
the random paths arise from sequences of random seeds.
Likewise, let Rx and Gx be the random variable of the reject-
ﬂipping distance and the gap respectively. It is not necessary
that Mx and Rx are independent. Indeed, one would expect
that they are highly positively correlated, since the detector
2An alternative choice is to consider the probability that a
random path has an evading sample. However, this choice
is not suitable, since an arbitrary long path is likely to have
an evading sample.
attempts to detect malicious functionality. We shall revisit
this later in Section 5. At this points, readers can refer
to Figure 10 for an intuition. The ﬁgure depicts ﬂipping
distances of 500 morphed samples originating from the same
malware (Pearson correlation coeﬃcient is 0.34).
For a sample x, let us assign the probability Pr(Gx < 0) as
its state. Recall that a path with negative gap implies that
its reject-ﬂipping sample is malicious and thus is an evading
sample. In other words, the state of x is the probability that
a random path leads to an evading sample. Now, suppose
that the adversary has to pick one of two candidates x and
y to continue the search, then the candidate with the larger
state-value gives higher chance of ﬁnding an evading sample.
This comparison provides a way for a hill-climbing algorithm
to select candidates in each round.
Expected ﬂipping distances as the state. .
A main drawback of explicitly taking Pr(Gx < 0) as x’s
state is the high cost in determining the probabilities during
the search process. Although one may estimate the distribu-
tion of Gx by sampling multiple random paths, such accurate
estimation would require extremely high number of queries,
which in turn oﬀsets the gain oﬀered by eﬃcient searching
strategies. Alternatively, we can take the expected reject-
ﬂipping and malice-ﬂipping distances as the state. Compare
to the distribution Gx, the expected distances can be ac-
curately estimated by drawing fewer random paths. In the
proposed EvadeHC, the measured ﬂipping distances can be
viewed as the estimates of the expected distances. From
the expected distances, we can derive the expected gap. In-
tuitively, the smaller the expected gap is, the higher the
probability Pr(Gx < 0) would be. Although the expected
ﬂipping distances do not provide suﬃcient information for
us to estimate the probability, we can still employ the ex-
pected gap for comparison of probabilities. This motivates
the choices of the two scoring functions score1 and score2
proposed in Section 3.3.
4.2 Hidden-State Random Morpher
We consider an abstract model HsrMorpher for analysis.
Under HsrMorpher, the morpher operates in the same way
as the Random Oracle [17] employed in the studies of hash
functions does, producing truly random outcomes for unique
query, and being consistent with repeated queries. Based on