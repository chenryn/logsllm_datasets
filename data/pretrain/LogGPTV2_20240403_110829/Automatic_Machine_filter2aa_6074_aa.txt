# Automatic Machine
Category: Reversing, 50 Points
## Description
> You stand before a custom Virtual Machine.
> 
> Once you understand the code, the flag will be just there.
> 
> The machine is waiting for you at auto-machine.csa-challenge.com
> 
> Good Luck!
## Solution
We enter the website and are greeted with a fake SSH shell, implemented in Javascript:
```
ssh 192.12.23.934
Connecting...
ACCESS DENIED! I AM CALLING THE INTERNET POLICE!
Password:
$ test
UNAUTHORIZED LOGIN!
$
```
It looks like we'll have to reverse engineer the shell implementation:
```javascript
a = [3, 3, 71, 17251, 1, 581, 3, 17254, 17276, 17330, 34502, 17252, 18012, 17263, 18015, 18028, 18035, 35263, 18012, 20231, 18017, 17435, 17450, 17433, 34682, 17431, 19842, 17446, 17431, 17453, 17499, 34679, 17428, 17917, 17453, 17431, 17434, 17529, 34679, 17428, 18543, 17433, 16850, 16880, 16956, 34098, 16848, 17906, 16865, 16850, 16884, 16849, 34098, 16849, 16945, 16898, 16853, 16857, 16847, 34096, 16847, 16896, 16891, 17905, 17906, 17981, 35089, 17903, 16881, 17905, 35094, 35091, 35102, 50358, 35092, 33262, 35205, 50359, 50357, 50417, 69591, 50360, 50504, 50366, 50320, 50360, 50320, 69680, 50319, 50385, 50363, 50385, 50439, 50343, 69617, 50388, 52917, 50373, 50254, 50193, 50406, 69614, 50192, 53220, 50245, 53077, 53077, 53247, 68341, 53078, 53354, 53015, 53260, 53241, 53259, 68140, 53259, 52192, 53014, 53016, 53246, 53080, 68152, 53013, 52001, 53058, 52909, 
/* , */
-8885, -31718, -98167, -57138, -55337, -55760, -1170, -57171, -50005, 20016, -88196, -88319, -88232, 62300, -85014, -83314, 16504, -89403, -90024, -87915, 59621, -89762, -84051, -16256, -22899, -26468, -24993, -35667, -23500, 13690, -10735, -12571, -12626, -12813, -28347, -12570, 22384, 29007, -6485, -6576, -6635, -24117, -6486, -5901, -29023, 17964, 17967, 18016, 1292, 18122, 22694, 22177, -20769, -20966, -21001, 27391, -20776, -20434, 16445, 19592, 19575, 19638, 3304, 19634, 22019, 18495, 18810, 19099, 18768, 2650, 18803, 18803, 18803, -3591, -3580, -3490, -3514, -3514, -3493, -3514, 88, 22, 23, 118, 116, 116, 114, 100, 100, 23, 112, 101, 118, 121, 99, 114, 115, 5, 19, 98, 121, 118, 98, 99, 127, 120, 101, 126, 109, 114, 115, 23, 123, 120, 112, 126, 121, 22]
_g0 = 7
function _f4(_p2, _p1, _p3, _p0) {
    for (_g1 = _p1; _g1  setTimeout(resolve, time));
};
$(function () {
    var term = new window.Terminal.Terminal();
    term.open(document.getElementById('terminal'));
    term.setOption('theme', {
      background: '#222',
      foreground: '#22da26',
    });
    function runFakeTerminal() {
        if (term._initialized) {
            return;
        }
        term._initialized = true;
        term.input = "";
        term.prompt = () => {
            term.write('\r\n$ ');
        };
        term.write('\r\n\u001b[37m$\u001b[0m ');
        term.onKey(e => {
            const printable = !e.domEvent.altKey && !e.domEvent.altGraphKey && !e.domEvent.ctrlKey && !e.domEvent.metaKey;
            if (e.domEvent.keyCode === 13) {
                prompt(term);
            } else if (e.domEvent.keyCode === 8) {
                // Do not delete the prompt
                if (term._core.buffer.x > 2) {
                    prev_len = term.input.length
                    curr_x = term._core.buffer.x
                    term.input = term.input.substr(0, curr_x-3) + 
                    term.input.substr(curr_x-2);
                    for (forward=0;forward 2)
                    term.write(e.key);
            }
            else if (e.domEvent.keyCode == 39) {
                if (term._core.buffer.x x.charCodeAt(0))));
      term.input = "";
      term.write('\r\n\u001b[37m$\u001b[0m ');
    }
    sleep(3000).then(runFakeTerminal);
});
```
It looks like the entry point is `_f0(JSON.parse(JSON.stringify(a)),Array.from(term.input).map(x=>x.charCodeAt(0)))`, which takes our password and sends it to `_f0` together with a large number array. `_f0` implements a VM, taking numbers from the array and using them as instructions and data.
The first thing we should do is remove irrelevant code and rename some symbols for easier understanding:
```javascript
step_size = 7
function add_to_arr(vm_arr, from_index, to_index, value) {
    for (i = from_index; i < to_index; i++) {
        vm_arr[i] += value;
    }
}
function subtract_from_arr(vm_arr, from_index, to_index, value) {
    for (i = from_index; i < to_index; i++) {
        vm_arr[i] -= value;
    }
}
function xor_arr(vm_arr, from_index, to_index, value) {
    for (i = from_index; i < to_index; i++) {