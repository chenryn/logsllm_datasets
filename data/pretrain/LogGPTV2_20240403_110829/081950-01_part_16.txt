大量接口优化提升了模块的易用性，并进行丰富的功能扩展，这里我们使用wxpy，使用itchat
的读者可参考官方文档 http://itchat.readthedocs.io/zh/latest/。这些模块使用了 Web 微信的通信
协议，实现了微信登录、收发消息、搜索好友、数据统计等功能。
首先需要从官方源下载并安装wxpy。
pip install wxpy
或者从豆瓣源安装wxpy。
pip install -U wxpy -i “ttps://pypi.doubanio.com/simple”
安装完成后，我们试一下几个基本功能。
（1）查找好友、群、发送消息。
# encoding=utf-8
from wxpy import *
# cache_path = True 表示开启缓存功能，短时间不用重新扫码
bot = Bot(cache_path=True)
112
第2章 基础运维
# 机器人账号自身
myself = bot.self
# 在 Web 微信中把自己加为好友
bot.self.add()
bot.self.accept()
# 发送消息给自己
bot.self.send("能收到吗？")
# 向文件传输助手发送消息
bot.file_helper.send("你好文件助手")
# 启用 puid 属性，并指定 puid 所需的映射数据保存/载入路径， puid 可始终被获取到，且具有稳定
的唯一性
bot.enable_puid("wxpy_puid.pkl")
# 通过名称查找一个好友
my_friend = bot.friends().search("123")[0]
# 查看他的 puid
print(my_friend.puid)
# '26b1cc8a'
# 通过puid 来查找好友
my_friend = bot.friends().search(puid="26b1cc8a")[0]
# 向好友发送消息
my_friend.send("你好，朋友")
# 发送图片
my_friend.send_image("my_picture.png")
# 发送视频
my_friend.send_video("my_video.mov")
# 发送文件
my_friend.send_file("my_file.zip")
# 以动态的方式发送图片
my_friend.send("@PI:EMAIL")
# 查找一个群并发送消息
## 一些不活跃的群可能无法被获取到，可通过在群内发言，或者以修改群名称的方式来激活
my_group = bot.groups().search("三人行")[0]
my_group.send("大家好")
# 搜索名称包含 '三人行'，且成员中包含 `my_friend` 的群聊对象
my_groups = bot.groups().search("三人行", [my_friend])
运行上面的程序会弹出二维码，使用手机微信扫一扫即可实现登录。开启了cache_path =
True之后，会将登录信息保存下来，短时间内登录不需要重新扫码。
（2）接收消息、自动回复、转发消息。
#接收所有消息
@bot.register()
def save_msg(msg):
print(msg)
#接收好友消息，并让图灵机器人自动回复好友消息
@bot.register(Friend)
def save_msg(msg):
113
Python自动化运维快速入门
print(msg)
Tuling().do_reply(msg) #调用wxpy自带的图灵机器人，也可以使用自己的api
我们可以利用接收消息再转发消息这一功能来保存重要人物（如老板）所发的消息。转发
消息实例如下：
1 from wxpy import *
2
3 bot = Bot(cache_path=True)
4
5 #定位群
6 company_group = bot.groups().search('公司微信群')[0]
7
8 #定位老板
9 boss = company_group.search('老板大名')[0]
10
11 # 将老板的消息转发到文件传输助手
12 @bot.register(company_group)
13 def forward_boss_message(msg):
14 if msg.member == boss:
15 msg.forward(bot.file_helper, prefix='老板发言')
16
17 # 堵塞线程
18 embed()
（3）统计好友信息，如省份、城市、性别等。
1 from wxpy import *
2 bot = Bot(cache_path=True)
3 friends_stat = bot.friends().stats()
4
5 friend_loc = [] # 每一个元素是一个二元列表，分别存储地区和人数信息
6 for province, count in friends_stat["province"].items():
7 if province != "":
8 friend_loc.append([province, count])
9
10 # 对人数倒序排序
11 friend_loc.sort(key=lambda x: x[1], reverse=True)
12
13 # 打印前10
14 for item in friend_loc[:10]:
15 print(item[0], item[1])
运行结果如图2.32所示。
图2.32 运行结果
114
第2章 基础运维
可以将上述代码第6行中的"province"替换为"city"，"sex"用来统计城市和性别信息。利用
Python的图表模块可以轻松将统计数据生成漂亮的图表，在此不再详述。
【示例 2-33】我们还可以利用微信实现远程控制：定义一个管理员，当收到管理员的消
息命令时，执行相应的指令。
1 import subprocess
2 from wxpy import *
3
4 bot = Bot()
5 #指定管理员
6 admin = bot.friends().search("清如")[0]
7
8
9 def remote_shell(command):
10 r = subprocess.run(
11 command,
12 shell=True,
13 stdout=subprocess.PIPE,
14 stderr=subprocess.STDOUT,
15 universal_newlines=True,
16 )
17 if r.stdout:
18 yield r.stdout
19 else:
20 yield "[OK]"
21
22
23 def send_iter(receiver, iterable):
24 """
25 用迭代的方式发送多条消息
26
27 :param receiver: 接收者
28 :param iterable: 可迭代对象
29 """
30
31 if isinstance(iterable, str):
32 raise TypeError
33
34 for msg in iterable:
35 receiver.send(msg)
36
37
38 @bot.register()
39 def server_mgmt(msg):
40 """
41 若消息文本以 ! 开头，则作为 shell 命令执行
42 """
43 print(msg)
44 if msg.chat == admin:
45 if msg.text.startswith("!"):
46 command = msg.text[1:]
47 send_iter(msg.chat, remote_shell(command))
48
115
Python自动化运维快速入门
49 #进入阻塞，可以在命令行调试
50 embed()
运行上面的程序，使用管理员向登录号发送命令，结果如图2.33所示。
图2.33 实现微信远程控制
2.8.2 将警告信息发送至微信
通过利用微信强大的通知能力，我们可以把程序中的警告/日志发到自己的微信上。wxpy
提供了以下两种方式来实现该需求。
（1）获取专有的Logger。
wxpy.get_wechat_logger(receiver=None, name=None, level=30)
参数说明：
(cid:2) receiver：当为 None、True 或字符串时，将以该值作为 cache_path 参数启动一个新
的机器人，并发送到该机器人的“文件传输助手”；当为机器人时，将发送到该机器
人的“文件传输助手”；当为聊天对象时，将发送到该聊天对象。
(cid:2) name：Logger 名称。
(cid:2) level：Logger 等级，默认为 logging.WARNING。
实例代码如下：
from wxpy import get_wechat_logger
# 获得一个专用 Logger
# 当不设置'receiver' 时，会将日志发送到随后扫码登录的微信"文件传输助手"
logger = get_wechat_logger()
# 发送警告
logger.warning('这是一条 WARNING 等级的日志，你收到了吗？')
# 接收捕获的异常
116
第2章 基础运维
try:
1 / 0
except:
logger.exception('现在你又收到了什么？')
（2）加入现有的Logger。
class wxpy.WeChatLoggingHandler(receiver=None)
可以将日志发送至指定的聊天对象。
参数说明：
(cid:2) receiver：当为None、True或字符串时，将以该值作为cache_path参数启动一个新的
机器人，并发送到该机器人的“文件传输助手”；当为机器人时，将发送到该机器人
的“文件传输助手”；当为聊天对象时，将发送到该聊天对象。
实例代码如下：
import logging
from wxpy import WeChatLoggingHandler
# 这是你现有的 Logger
logger = logging.getLogger(__name__)
# 初始化一个微信 Handler
wechat_handler = WeChatLoggingH andler()
# 加入现有的 Logger
logger.addHandler(wechat_handler)
logger.warning('你有一条新的警告，请查收。')
当然，我们也可以使用其他聊天对象来接收日志。比如，先在微信中建立一个群聊，并在
里面加入需要关注这些日志的人员，然后将该群作为接收者。
from wxpy import *
# 初始化机器人
bot = Bot()
# 找到需要接收日志的群 -- 'ensure_one()' 用于确保找到的结果是唯一的，避免发错地方
group_receiver = ensure_one(bot.groups().search('XX业务-警告通知'))
# 指定这个群为接收者
logger = get_wechat_logger(group_receiver)
logger.error('打扰大家了，但这是一条重要的错误日志...')
上述两种方法都是wxpy官方提供监控程序的方法，该方法虽然简单，但每次添加一个程
序的微信监控都需要扫描二维码重新登录一次，这就显得非常麻烦，有没有一种方法能让微信
运行之后无论添加多少次程序都不需要重新扫描二维码呢？当然有，社区的程序员已经为用户
想到了——wechat_sener模块。
wechat_sender 是基于 wxpy 和 Tornado 实现的一个可以将网站、爬虫、脚本等其他应用
中各种消息（日志、报警、运行结果等）发送到微信的工具。
安装：
pip install wechat_sender
117
Python自动化运维快速入门
使用：
（1）只需要在原有的脚本中添加两行代码。
from wechat_sender import * #在脚本前加入模块
listen(bot) #在脚本末尾添加监听
（2）然后在其他脚本中添加以下代码即可实现消息发送至微信。
from wechat_sender import Sender
Sender().send('Hello From Wechat Sender')
# Hello From Wechat Sender 这条消息将通过（1）中登录微信的文件传输助手发送给你
例如我们已有的wxpy脚本如下 ：
# coding: utf-8
from wxpy import *
bot = Bot('bot.pkl')
my_friend = bot.friends().search('xxx')[0]
my_friend.send('Hello WeChat!')
@bot.register(Friend)
def reply_test(msg):
msg.reply('test')
bot.join()
使用 wechat_sender时只需要增加第3行和第10行代码即可。
1 # coding: utf-8
2 from wxpy import *
3 from wechat_sender import listen
4 bot = Bot('bot.pkl')
5 my_friend = bot.friends().search('xxx')[0]
6 my_friend.send('Hello WeChat!')
7 @bot.register(Friend)
8 def reply_test(msg):
9 msg.reply('test')
10 listen(bot) # 只需要改变最后一行代码
11 bot.join()
之后如果还想在其他程序或脚本中发送微信消息，只需要：
# coding: utf-8
from wechat_sender import Sender
Sender().send("test message") #发送至已登录微信的文件传输助手
Sender().send_to(“test_message”,”xxx”) #发送至xxx用户，也可以发送至群聊等聊天对象
后续若有程序需要发送报警信息至微信，则不需要重新扫描二维码，只要添加相应的发送
语句即可，非常简便。
以上就是本小节介绍的如何使用微信处理消息，以及如何将警告信息发送至微信，读者可
以依据具体需要定制自己的代码。
118
|----|--------------------|
|  0 |                    |
|  1 |                    |
|  2 |                    |
|  3 | 第 1 章            |
|  4 |                    |
|  5 |                    |
|  6 |                    |
|  7 |                    |
|  8 |                    |
|  9 |                    |
| 10 | 自动化运维与Python |