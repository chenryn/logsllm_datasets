2\. 调用VOPS提供的转换函数，将基础表的数据转移到VOPS表（即转换、规整为瓦片存储的过程）。  
3\. 使用正常的SQL，访问VOPS表即可，但是需要注意，使用VOPS提供的操作符哦。  
## PostgreSQL VOPS新增 瓦片类型  
VOPS 目前支持的数据类型如下  
SQL type|	C type|	VOPS tile type  
---|---|---  
bool|	bool|	vops_bool  
"char", char or char(1)|	char|	vops_char  
int2|	int16|	vops_int2  
int4|	int32|	vops_int4  
int8|	int64|	vops_int8  
float4|	float4|	vops_float4  
float8|	float8|	vops_float8  
date|	DateADT|	vops_date  
timestamp|	Timestamp|	vops_timestamp  
VOPS 目前不支持string，如果你使用了STRING字段，并且需要用来统计的话，建议可以使用INT8将其字典化，然后就可以利用VOPS特性了。  
## PostgreSQL VOPS新增 瓦片类型操作符  
前面说了，正规的VOPS使用方法，总共分三步，这第三步涉及的就是操作符，因为是瓦片类型，VOPS重写了对应的操作符来支持向量计算。  
1\. VOPS数值瓦片类型，支持的```+ - / *```保持原样不变。  
2\. 比较操作符```= <> > >= =a AND x= '2017-01-01'::date);  
不能写成  
select sum(price) from trades where filter(day >= '2017-01-01');  
而函数内，可以不使用显示转换  
select sum(price) from trades where filter(betwixt(day, '2017-01-01', '2017-02-01'));  
```  
7\. 对于char, int2, int4类型，VOPS提供了一个连接符```||```，用于如下合并  
```  
(char || char) -> int2, (int2 || int2) -> int4, (int4 || int4) -> int8.  
```  
这么做，目的是用于多个字段的GROUP BY，提高GROUP BY效率。  
8\. VOPS提供的操作符，整合如下  
Operator|	Description
---|---
+|	Addition
-|	Binary subtraction or unary negation
```*``` |	Multiplication
/|	Division
=|	Equals
<>|	Not equals
|	Greater than
>=|	Greater than or equals
&|	Boolean AND
```|``` |	Boolean OR
!|	Boolean NOT
betwixt(x,low,high)|	Analog of BETWEEN
is_null(x)|	Analog of IS NULL
is_not_null(x)|	Analog of IS NOT NULL
ifnull(x,subst)|	Analog of COALESCE
## PostgreSQL VOPS 聚合函数  
VOPS目前已经支持的聚合向量化计算，包括一些常用的聚合函数，如下  
```  
count, min, max, sum, avg  
```  
聚合分为两种，一种是非分组聚合，一种是分组聚合。  
1\. VOPS处理非分组聚合，和PostgreSQL原有用法一样，例如：  
```  
select sum(l_extendedpricel_discount) as revenue  
from vops_lineitem  
where filter(betwixt(l_shipdate, '1996-01-01', '1997-01-01')  
        & betwixt(l_discount, 0.08, 0.1)  
        & (l_quantity < 24));  
```  
2\. VOPS处理带有group by的分组聚合稍微复杂一些，需要用到map和reduce函数。  
map函数实现聚合操作，并且返回一个HASH TABLE(包含了所有GROUP的聚合后的信息)，reduce函数则将hash table的数据一条条解析并返回。  
所以可以看出MAP函数是运算，reduce函数是返回结果。  
map函数语法  
```  
map(group_by_expression, aggregate_list, expr {, expr })  
可见map是一个vardic参数函数,所以expr的数据类型必须一致。  
```  
reduce函数语法  
```  
reduce(map(...))  
```  
例子  
```  
select   
    sum(l_quantity),  
    sum(l_extendedprice),  
    sum(l_extendedprice(1-l_discount)),  
    sum(l_extendedprice(1-l_discount)(1+l_tax)),  
    avg(l_quantity),  
    avg(l_extendedprice),  
    avg(l_discount)  
  from vops_lineitem   
  where l_shipdate <= '1998-12-01'::date  
  group by l_returnflag, l_linestatus;  
改写为  
select reduce(map(l_returnflag||l_linestatus, 'sum,sum,sum,sum,avg,avg,avg',  
    l_quantity,  
    l_extendedprice,  
    l_extendedprice(1-l_discount),  
    l_extendedprice(1-l_discount)(1+l_tax),  
    l_quantity,  
    l_extendedprice,  
    l_discount))   
  from vops_lineitem   
  where filter(l_shipdate <= '1998-12-01'::date);  
```  
VOPS限制：  
1\. 目前VOPS只支持INT类型的聚合操作（int2, int4, int8）。  
2\. 由于map函数是vardic参数函数，所以末尾的所有expr类型必须一致（请参考PostgreSQL vardic函数的编写），所有的expr类型必须一致，即 sum(expr1),avg(expr2),...，这些expr类型必须一致。  
```  
map(group_by_expression, aggregate_list, expr {, expr })  
expr类型必须一致  
```  
map, reduce 函数详解 :   
1\. map函数的第二个参数是聚合函数，用逗号隔开，count(```*```)不需要写明，因为reduce函数默认就会返回每个分组的count(```*```)。  
count(字段)则需要写明。  
例如  
```  
map(c1||c2, 'count,max,avg,max', c3, c4, c5, c6)  
表示  
count(*),  
count(c3),  
max(c4).  
avg(c5),  
max(c6)  
group by  
c1, c2;  
```  
2\. reduce函数，返回的是vops_aggregate类型的多条记录集合，即returns setof vops_aggregate；  
vops_aggregate类型是复合类型，包括三个部分，  
分组字段的值，例如group by a，那么它表示每个A字段分组的值。  
分组的记录数，例如group by a，那么它表示每个A字符分组有多少条记录。  
聚合结果数组（因为可能有多个聚合表达式，所以返回的是数组），因为PG的数组必须是单一类型，所以VOPS的聚合结果必须返回统一类型，目前vops定义的所有vops聚合函数返回的都是float类型。  
定义如下  
```  
create type vops_aggregates as(group_by int8, count int8, aggs float8[]);  
create function reduce(bigint) returns setof vops_aggregates;  
```  
VOPS分组聚合最佳实践，  
将需要执行聚合操作的表，按分组字段分区，即选择分组字段，作为分区字段。(并非分区表的意思哦，而是对分区字段使用scalar类型，即非vops类型，后面将populate会讲)  
那么在VOPS执行分组聚合时，实际上PostgreSQL的优化器会让其在各自的分区执行表级聚合，而非分组聚合。  
所以分组聚合就变成了非分组聚合操作，也就不需要使用map, reduce的写法了。  
如下  
```  
select  
    l_returnflag,  
    l_linestatus,  
    sum(l_quantity) as sum_qty,  
    sum(l_extendedprice) as sum_base_price,  
    sum(l_extendedprice(1-l_discount)) as sum_disc_price,  
    sum(l_extendedprice(1-l_discount)(1+l_tax)) as sum_charge,  
    avg(l_quantity) as avg_qty,  
    avg(l_extendedprice) as avg_price,  
    avg(l_discount) as avg_disc,  
    countall(*) as count_order  
from  
    vops_lineitem_projection  
where  
    filter(l_shipdate <= '1998-12-01'::date)  
group by  
    l_returnflag,  
    l_linestatus  
order by  
    l_returnflag,  
    l_linestatus;  
```  
以上SQL例子，分组字段l_returnflag, l_linestatus字段为"char"类型，使用连接符||可以将其变成vops_int2类型。  
其他字段是vops_float4类型。  
以上SQL执行速度比reduce(map(...))快很多，问题是我们必须实现规划好分区，分区键与GROUP BY分组键一致。  
## VOPS 瓦片索引  
通常情况下，OLAP场景并不需要使用索引，因为数据分区，列存储，以及向量计算相比索引可以更为有效的解决OLAP的性能问题。  
但是索引作为数据过滤，也不失为一种好的选择。  