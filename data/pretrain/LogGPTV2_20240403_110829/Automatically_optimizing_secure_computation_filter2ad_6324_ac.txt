There are many such rules, one for each direction, condition
truth value, front or back position of the variable in the
proposition and integer variable that is not c.
Second, we implement mathematical axioms, such as nega-
tion and transitivity. Since all inputs are distinct, the lower-
than relation can be inverted for negation.
¬lt a b
lt b a
The lower-than relation is also transitive.
lt a b
lt b c
lt a c
Unfortunately, propositions in EML are simple, such that
when using symbolic computation on n variables the num-
ber of rules increases to O(n3) with only transitivity already.
Also, each conditional assignment introduces O(n) variable
renaming rules. We must therefore take care to restrict sym-
bolic computation to the minimum set of variables necessary.
We use symbolic computation only for variables appearing
as operands in comparison statements.
Nevertheless, in our running example of median compu-
tation symbolic computation is necessary. The agent Alice
needs to infer that in the world of the trace in Figure 2
the condition in.alice.x > in.bob.x in the ﬁrst comparison is
true, since in.alice.x > in.bob.y from the second comparison
and in.bob.y > in.bob.x in all of its inputs.
Assumptions.
Of course, we need to start out with the propositions that
input and output are known.
Kin.alice.x
Kin.alice.y
Kout.alice
But as seen in the previous example we need to also encode
the assumptions about the input. Following the assumption
of Aggarwal et al. we start out with the propositions
Klt in.alice.x in.alice.y
Klt in.bob.x in.bob.y
Note that these assumptions could also be encoded in the
program. If the program would start with a sorting routine
of the inputs, then the subsequent inference would remain.
The sorting routines would also be marked as local by our
optimization technique, since they operate on local input
only. They would then be executed at the local site’s before
the secure computation. This shows another advantage of
our technique1.
3.4.4 Deduction
We can now enter all possible worlds (traces) and rules
into a theorem prover.
If it can deduce knowledge about
the variables, we can assign the labels. Let φ be the propo-
sitions for all possible worlds and ψ all rules derived from
the program. We then enter the following theorem for each
variable, e.g. a
φ ∧ ψ ⇒ Ka
If the theorem can be proven, we assign the label {A} to the
variable a. We create one such theorem for each variable. If
the theorem cannot be proven, we do not assign a label.
We then repeat the process with Bob as the agent. The
derivation algorithm for the rules and traces remains un-
changed, but some propositions in the rules made in Sec-
tion 3.4.3 “Assumptions” change, since now Bob’s input and
output are known instead of Alice’s. Also, the propositions
in the traces change, since Bob can distinguish its integer
input variables, but not Alice’s. We also create one theorem
for each variable for Bob.
1We have omitted this option in order to stay truthful to
the example of Aggarwal et al.
7082
7
12
program Median {
f u n c t i o n Output o u t
( I n p u t
i n ) {
v a r B o o l e a n a A B , d A B ;
v a r Elem
b A , c B ;
a A B = i n . a l i c e . x A ;
typ e A l i c e I n p u t = B o o l e a n ;
typ e A l i c e O u t p u t = Elem ;
typ e B o b I n p u t
= s t r u c t { Elem x ,
Elem y } ;
typ e I n p u t = s t r u c t { A l i c e I n p u t
B o b I n p u t
a l i c e ,
bob } ;
typ e Output = s t r u c t { A l i c e O u t p u t a l i c e } ;
5
10
f u n c t i o n Output o u t
o u t . a l i c e = i n . a l i c e ? i n . bob . x :
}
}
( I n p u t
i n ) {
i n . bob . y ;
Listing 11: Assigned Labels
Listing 12: Oblivious Transfer
Finally, we assign the labels. The result of the median
example is depicted in Listing 11. As we have pointed out in
the beginning of the paper, the challenge is to infer the labels
on the variables a and d. We show a complete deduction of
Ka for Alice in Appendix A.
3.5 Segmentation
We can now segment the program of the median compu-
tation and perform selected computations at the local sites.
The ﬁrst statement in line 7 needs to be performed as a se-
cure computation, since the intersection of labels is empty.
Nevertheless, the result of the secure computation can be
made available to both, Alice and Bob. This computation
is an instance of Yao’s millionaires’ problem. Line 8 can be
performed solely by Alice and line 9 solely by Bob. Line 11
is a secure computation again.
For lines 12 and 13 we need to implement a special rou-
tine. Although the intersection of labels is empty, Alice (or
Bob) needs to learn the output of the computation. There-
fore for output variables assigned in conditional statements,
in case the operand is only known by the other party, we
need to implement a send and receive message operation.
Care must be taken and this routine only applies, if the
condition variable is public and known to both, Alice and
Bob, and not in our further example of oblivious transfer
where the condition is only known to Alice and which must
be implemented as a secure computation. The transmission
operations are also implemented locally at Alice’s and Bob’s
site, respectively.
If you compare this segmentation with the L1 program of
Listing 2 the program transform is completely successful (ex-
cept some syntactical constructs). We encode our segmented
program as a Java program that calls FairPlay as a subrou-
tine for its secure computation. We have transformed a (rel-
atively) ineﬃcient FairPlay program using program analysis
into an eﬃcient protocol similar to the hand-crafted one by
Aggarwal et al.
4. FURTHER EXAMPLES
In this section we consider further examples in order to
validate our optimization technique. First, we consider 1-
out-of-2 oblivious transfer [11] and show that our inference
is safe, i.e. the optimized protocol still implements secure
oblivious transfer. Second, we use our optimization to re-
duce joint lot size computation [3] to weighted average com-
putation.
4.1 Oblivious Transfer
Oblivious transfer (OT) can be implemented with the
SFDL program shown in Listing 12. Of course, it is not
best practice to implement OT using SFDL, since FairPlay
uses an optimized OT protocol to implement Yao’s protocol.
It is much more eﬃcient to use such an optimized protocol
directly. We can nevertheless test if our optimization tech-
nique is safe.
OT is implemented as a single conditional assignment
without intermediate variables. Therefore only traces and
the rules for conditional assignments apply. There are four
possible worlds – two for Alice and two for Bob – depending
on the condition in.alice.
First, in Alice’s case the backward rule for the operand
applies. In one world she learns in.bob.x and in the other
in.bob.y. Then also the forward rule applies, but she al-
ready knows out.alice. Alice cannot distinguish Bob’s in-
put, therefore the backward rule for the condition does not
apply. Since Alice only learns either of Bob’s inputs in a
single world, she does not gain knowledge in all worlds and
no new labels are created.
Second, in Bob’s case no rule applies. Neither backward
rule applies, since he does not know out.alice. The for-
ward rule also does not apply, since he does not know the
condition in.alice.
Therefore no optimization is possible using our inference
algorithm. This is good news, since OT is an elementary
cryptographic primitive and any “optimization” at the lan-
guage layer would show that our inference algorithm is un-
safe. We show next that a slight deviation in just one rule
could already lead to such unsafe inferences.
Assume we would change the forward rule by omitting the
proposition in.alice of the condition, as we have done in the
backward rule, resulting in the rules below
in.alice = true
in.bob.x
in.alice = f alse
in.bob.y
out.alice
out.alice
Then, Bob would learn out.alice in both worlds. Further-
more, the backward rule for the condition would apply and
Bob would also learn in.alice. A complete breakdown of
the safety of the optimization. It is therefore necessary to
include the condition in the forward rule, but not the back-
ward rule for the operand.
7091
6
11
16
21
26
31
program Median {
typ e Elem
typ e A l i c e I n p u t = s t r u c t { Elem d ,
= I n t ;
Elem fV ,
Elem hV ,
Elem c } ;
typ e A l i c e O u t p u t = Elem ;
typ e B o b I n p u t
= s t r u c t { Elem d ,
Elem fB ,
Elem hB } ;
typ e BobOutput
typ e I n p u t = s t r u c t { A l i c e I n p u t
= Elem ;
B o b I n p u t
a l i c e ,
bob } ;
typ e Output = s t r u c t { A l i c e O u t p u t a l i c e ,
BobOutput
bob } ;
f u n c t i o n Output o u t
( I n p u t
v a r Elem a , b , c , d , e ,
i n ) {
f , g , h ,
i ;
a = 2 ∗ i n . a l i c e . d ;
b = a ∗ i n . a l i c e . fV ;
c = i n . a l i c e . d / i n . a l i c e . c ;
d = c ∗ i n . a l i c e . hV ;
e = 2 ∗ i n . bob . d ;
f = e ∗ i n . bob . fB ;
g = f + b ;
h = i n . bob . hB + d ;
i = g / h ;
o u t . a l i c e = i ∗∗ 2 ;
o u t . bob
= i ∗∗ 2 ;
}
}
Listing 13: Joint Economic Lot Size
4.2 Weighted Average
We now consider an example from business administra-
tion. When placing an order buyer and vendor need to agree
on an order quantity or lot size. Both, buyer and vendor,
know the (yearly) demand d of the buyer as part of their
contract, but they also have private information. The buyer
has holding costs hB per item and ﬁxed ordering costs fB
per order. The vendor has holding costs hV per item, ﬁxed
setup costs fV per order and capacity c. They can jointly
compute the optimal lot size q using Banerjee’s formula [3]
below
q =s 2d(fB + fV )
hB + d
c hV
Since information such as costs and capacities is very sen-
sitive, it is sensible to implement the computation securely.
Buyer and vendor can do so using the (extended) SFDL pro-
gram in Listing 13 where Alice is the vendor and Bob the
buyer. We extend SFDL with multiplication (∗) and integer
division (/) which are parsed, but not implemented in Fair-
Play. This has been ﬁxed in FairPlayMP. Furthermore, we
introduce the operator (∗∗) for integer roots which cannot
be parsed by FairPlay. Therefore we need to execute the
resulting protocols using the L1 system.
The program is entirely constructed from assignment ex-
pressions. Therefore only its forward and backward rules
apply. Recall that constants are public and known to both,
Alice and Bob.
As a result of our analysis intermediate variables a, b, c,
d and i are known to Alice. Variables e, f and i are known
to Bob. Therefore the ﬁrst segment of the program (lines 20
- 23) can be executed locally at Alice’s site and the second
segment (lines 25 and 26) can be executed locally at Bob’s
site. Only the middle segment (lines 28 - 30) need to be
executed as a secure computation. The ﬁnal segments can
be executed locally again, at either party’s site.
Thus, we have optimized the protocol signiﬁcantly.
In-
stead of securely computing a square root – amongst other
arithmetic operations –, we have reduced the problem to
securely computing a weighted average. This signiﬁcantly
increases the eﬃciency of the protocol by locally comput-
ing several expensive operations and shows another success-
ful application of our optimization technique. All our op-
timizations (including segmentation) were performed auto-
matically.
We stress that we prepared the SFDL program, such that
the optimizer yields the best result. We structured the arith-
metic in order to form groups of operations that can be op-
timized into local computations. We nevertheless anticipate
that this optimization can also be performed automatically
in the future. Techniques, such as term rewriting, oﬀer ex-
cellent capabilities for such transforms.
5. RELATED WORK
There are several systems for implementing secure com-
putation. We classify them into systems specifying the ideal
functionality and systems specifying the protocol descrip-
tion. Furthermore, we look at the examples used in our
paper.
The positive eﬀect on performance of performing as many
computations as possible locally has been conﬁrmed by [18].
[26] also tries to deduct local computations, but only con-
siders the parties’ input and not also their output as we do.
5.1 Ideal Functionality Speciﬁcation
FairPlay [23] provides a generic system for secure two-
party computation. The FairPlay system comprises a proce-