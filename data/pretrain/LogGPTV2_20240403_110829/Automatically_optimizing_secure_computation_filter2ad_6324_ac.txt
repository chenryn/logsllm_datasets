### Optimized Text

#### 1. Introduction to Rules and Axioms
There are numerous rules, each corresponding to a specific direction, condition truth value, position of the variable in the proposition (front or back), and integer variables that are not `c`. Additionally, we implement mathematical axioms such as negation and transitivity. Since all inputs are distinct, the "less-than" relation can be inverted for negation.

- **Negation:**
  \[
  \neg \text{lt}(a, b) \implies \text{lt}(b, a)
  \]

- **Transitivity:**
  \[
  \text{lt}(a, b) \land \text{lt}(b, c) \implies \text{lt}(a, c)
  \]

#### 2. Complexity and Symbolic Computation
Unfortunately, propositions in EML are simple, leading to an increase in the number of rules to \(O(n^3)\) with only transitivity, when performing symbolic computation on \(n\) variables. Each conditional assignment introduces \(O(n)\) variable renaming rules. Therefore, it is essential to restrict symbolic computation to the minimum set of necessary variables. We use symbolic computation only for variables appearing as operands in comparison statements.

In our running example of median computation, symbolic computation is necessary. The agent Alice needs to infer that in the world of the trace in Figure 2, the condition `in.alice.x > in.bob.x` in the first comparison is true, given `in.alice.x > in.bob.y` from the second comparison and `in.bob.y > in.bob.x` in all its inputs.

#### 3. Assumptions
We start with the propositions that input and output are known:
- \(K_{\text{in.alice.x}}\)
- \(K_{\text{in.alice.y}}\)
- \(K_{\text{out.alice}}\)

Additionally, we encode assumptions about the input, following the approach of Aggarwal et al.:
- \(K_{\text{lt in.alice.x in.alice.y}}\)
- \(K_{\text{lt in.bob.x in.bob.y}}\)

These assumptions could also be encoded in the program. If the program starts with a sorting routine for the inputs, the subsequent inference would remain. The sorting routines would be marked as local by our optimization technique since they operate on local input only. They would then be executed at the local sites before the secure computation, demonstrating another advantage of our technique.

#### 4. Deduction
We can now enter all possible worlds (traces) and rules into a theorem prover. If the prover can deduce knowledge about the variables, we can assign the labels. Let \(\phi\) be the propositions for all possible worlds and \(\psi\) all rules derived from the program. For each variable, e.g., \(a\), we enter the following theorem:
\[
\phi \land \psi \implies K_a
\]
If the theorem can be proven, we assign the label \({A}\) to the variable \(a\). We create one such theorem for each variable. If the theorem cannot be proven, we do not assign a label.

We repeat the process for Bob as the agent. The derivation algorithm for the rules and traces remains unchanged, but some propositions in the rules change, as Bob’s input and output are now known instead of Alice’s. The propositions in the traces also change, as Bob can distinguish his integer input variables but not Alice’s. We create one theorem for each variable for Bob.

#### 5. Program Segmentation
We can now segment the program of the median computation and perform selected computations at the local sites. The first statement in line 7 needs to be performed as a secure computation since the intersection of labels is empty. However, the result of the secure computation can be made available to both Alice and Bob. This computation is an instance of Yao’s millionaires’ problem. Line 8 can be performed solely by Alice, and line 9 solely by Bob. Line 11 is a secure computation again.

For lines 12 and 13, we need to implement a special routine. Although the intersection of labels is empty, Alice (or Bob) needs to learn the output of the computation. Therefore, for output variables assigned in conditional statements, if the operand is only known by the other party, we need to implement a send and receive message operation. This routine only applies if the condition variable is public and known to both Alice and Bob, and not in our further example of oblivious transfer where the condition is only known to Alice and must be implemented as a secure computation. The transmission operations are implemented locally at Alice’s and Bob’s sites, respectively.

#### 6. Further Examples
In this section, we consider further examples to validate our optimization technique. First, we examine 1-out-of-2 oblivious transfer [11] and show that our inference is safe, i.e., the optimized protocol still implements secure oblivious transfer. Second, we use our optimization to reduce joint lot size computation [3] to weighted average computation.

##### 6.1 Oblivious Transfer
Oblivious transfer (OT) can be implemented with the SFDL program shown in Listing 12. While it is not best practice to implement OT using SFDL, as FairPlay uses an optimized OT protocol to implement Yao’s protocol, we can test if our optimization technique is safe.

OT is implemented as a single conditional assignment without intermediate variables. There are four possible worlds—two for Alice and two for Bob—depending on the condition `in.alice`.

- **Alice's Case:**
  - The backward rule for the operand applies. In one world, she learns `in.bob.x`, and in the other, `in.bob.y`.
  - The forward rule also applies, but she already knows `out.alice`.
  - Alice cannot distinguish Bob’s input, so the backward rule for the condition does not apply.
  - Since Alice only learns either of Bob’s inputs in a single world, she does not gain knowledge in all worlds, and no new labels are created.

- **Bob's Case:**
  - No rule applies. Neither backward rule applies since he does not know `out.alice`.
  - The forward rule also does not apply since he does not know the condition `in.alice`.

Therefore, no optimization is possible using our inference algorithm, which is good news as OT is an elementary cryptographic primitive. Any “optimization” at the language layer would indicate that our inference algorithm is unsafe.

##### 6.2 Weighted Average
We now consider an example from business administration. When placing an order, the buyer and vendor need to agree on an order quantity or lot size. Both parties know the yearly demand \(d\) of the buyer as part of their contract, but they also have private information. The buyer has holding costs \(h_B\) per item and fixed ordering costs \(f_B\) per order. The vendor has holding costs \(h_V\) per item, fixed setup costs \(f_V\) per order, and capacity \(c\). They can jointly compute the optimal lot size \(q\) using Banerjee’s formula [3]:
\[
q = \sqrt{\frac{2d(f_B + f_V)}{h_B + \frac{d}{c} h_V}}
\]

Since information such as costs and capacities is very sensitive, it is sensible to implement the computation securely. Buyer and vendor can do so using the (extended) SFDL program in Listing 13, where Alice is the vendor and Bob the buyer. We extend SFDL with multiplication (\(*\)) and integer division (\(/\)) which are parsed but not implemented in FairPlay. This has been fixed in FairPlayMP. Furthermore, we introduce the operator (\(\*\*)) for integer roots, which cannot be parsed by FairPlay. Therefore, we need to execute the resulting protocols using the L1 system.

The program is entirely constructed from assignment expressions. As a result of our analysis, intermediate variables \(a, b, c, d,\) and \(i\) are known to Alice, while variables \(e, f,\) and \(i\) are known to Bob. Therefore, the first segment of the program (lines 20-23) can be executed locally at Alice’s site, and the second segment (lines 25 and 26) can be executed locally at Bob’s site. Only the middle segment (lines 28-30) needs to be executed as a secure computation. The final segments can be executed locally again, at either party’s site.

Thus, we have significantly optimized the protocol. Instead of securely computing a square root, we have reduced the problem to securely computing a weighted average, increasing the efficiency of the protocol by locally computing several expensive operations. All our optimizations, including segmentation, were performed automatically.

We stress that we prepared the SFDL program to yield the best result from the optimizer. We structured the arithmetic to form groups of operations that can be optimized into local computations. We anticipate that this optimization can also be performed automatically in the future, using techniques such as term rewriting.

#### 7. Related Work
Several systems exist for implementing secure computation. We classify them into systems specifying the ideal functionality and systems specifying the protocol description. The positive effect on performance of performing as many computations as possible locally has been confirmed by [18]. [26] also tries to deduce local computations but only considers the parties’ input and not their output as we do.

##### 7.1 Ideal Functionality Specification
FairPlay [23] provides a generic system for secure two-party computation. The FairPlay system comprises a processor and a compiler for SFDL, a high-level language for specifying secure computations.