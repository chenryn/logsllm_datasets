low-level access patterns in a centralized way.
Using this functional test suite, we evaluate SPOKE by
asking three research questions:
R1: What domain knowledge is collected from the func-
tional tests to build the knowledge base? What is the
time and space cost of this process?
R2: How many justiﬁed and unjustiﬁed policy rules related
to the functionalities are revealed by the collected do-
main knowledge?
R3: What over-permissive access patterns allowed by risky
policy rules in real world are discovered by SPOKE’s
attack surface analysis?
5.2 Knowledge Base Construction
The knowledge base construction is divided into two phases:
1) Collecting non-functional activities for ﬁltering in func-
tional tests; 2) Running functional tests with multi-layer
logging to extract access patterns and functionality trace
with cross-layer correlation.
In the ﬁrst phase, we perform 10-round collection of non-
functional access patterns on the four devices in idle state.
In each round, each device is factory-resetted and rebooted.
After the device is booted into home screen, the logging
starts and lasts for an hour, during which the device is left
untouched on home screen. Similarly, we also run a dummy
test to get the non-functional access patterns triggered by
Figure 3: A bipartite graph illustrating two over-permissive access
patterns (red) by a policy rule allowing a vulnerable keyboard app to
read and write critical system ﬁles.
in the dimension of access rights. Access patterns deﬁned
by policy rules are the concrete representation of the access
rights between subjects and objects.
The attack surface analysis has two steps. First, it se-
lects the deﬁned access patterns with their rules that are
unjustiﬁed by current knowledge base. Second, it identiﬁes
over-permissive access patterns that allow potentially vul-
nerable subjects to access valuable or critical objects.
The ﬁrst step is achieved by a SQL query to subtract the
set of collected access patterns in the knowledge base from
the set of deﬁned access patterns by the rules:
U ← SELECT R.r,R.r.Ar.ar FROM R LEFT JOIN K
ON General(R.r.Ar.ar) = General(K.a)
WHERE K.a IS NULL
The query ﬁrst uses LEFT JOIN to attempt to match every
rule r ∈ R and its access pattern ar ∈ r.Ar with an access
pattern a in the knowledge base. Then it ﬁlters the join
result with the WHERE clause to only select the set of ar that
have no matched a (a IS NULL).
The second step is to identify over-permissive access pat-
terns from the result of the ﬁrst step. Based on Deﬁnition 7,
we start with identifying valuable or critical objects which
could be attackers’ potential targets. Fortunately, since we
collect domain knowledge from tests of critical functional-
ities, the knowledge base already captures the critical ob-
jects, which can be identiﬁed by the correlated critical func-
tionality trace. For example,
Firewall.addRule()/data/system/firewall.db
Then we search all unjustiﬁed access patterns that allow
to access these critical objects as the over-permissive access
patterns.
In practice, policy engineers can also input extra knowl-
edge to guide the above searching. For example, if a subject
has a new vulnerability, we can search all unjustiﬁed ac-
cess patterns related to the subject and check whether any
valuable objects are accessible by the subject. Starting from
Android 6.0, multi-level security (MLS) [31] is introduced to
SEAndroid. The new knowledge of diﬀerent privileged sub-
jects and objects can also be leveraged to guide the searching
in practice.
To present a more intuitive result of the identiﬁed over-
permissive access patterns for policy engineers, we model the
analysis as a bipartite graph shown in Figure 3, where the
vertices of all subjects are on one side shown as red and the
vertices of all objects are on the other side shown as blue.
Edges labeled with access permissions represent access pat-
terns between subject and object vertices. Justiﬁed access
patterns are grey lines. Over-permissive access patterns are
highlighted as red lines. Here, a vulnerable keyboard app is
8
system_serverinstalldkeyboard_input_app/data/system/*/data/dalvik-cache/*/data/data/keyboard_input_app/*read,writeread,write,executeread,write,executeFigure 4: The summary of access patterns, functionality trace and justiﬁed policy rules in the knowledge base using 665 functional tests
JUnit setUp and tearDown. In total, we collect 896 back-
ground and dummy test access patterns, which are ﬁltered
in the next phase. Several daemons and apps such as an-
droid.bg, dhcp periodically check status of device processes
and network. Binder IPC between system daemons and apps
are also common and expected. installd operations hap-
pen during test_app installation. The loading of logging
conﬁguration is also captured and ﬁltered.
In the second phase, we run the 665 functional tests in
28 categories on the four devices. In each running, all de-
vices are resetted and rebooted as the same above. In the
kernel-layer logging, two devices are conﬁgured to log access
events of various system daemons, while the other two are
conﬁgured to focus on access events of all Android applica-
tions. In the Dalvik-layer logging, all devices are conﬁgured
to focus on functional API classes and methods (e.g., an-
droid.app.*, android.bluetooth.*, android.app.ente-
rprise.*, etc.), which are selected from corresponding
rich-semantic documentations (Javadoc).
The total number of functional access patterns collected in
the knowledge base is 12,491, with a total of 1,492 API meth-
ods extracted as functionality trace. The 12,491 unique ac-
cess patterns are actually ﬁltered, derived and de-duplicated
from 481,216 raw access events. Given the test running
time, we found that the highest logging rate is 1,005 raw ac-
cess events per second (ApplicationPolicyTest produces
76,578 raw access events in 76.14 seconds). Thanks to the
logging work load is distributed to four devices, we are able
to scale up to this rate without hitting the logging buﬀer
limitation.
Figure 4 shows the overall summary of the knowledge base
by the 28 functionality categories. By checking the detailed
access patterns and their correlated functionality trace, we
found that some functionality categories have more opera-
tion steps and involve diﬀerent subjects, causing more access
patterns to be collected. In particular, ExchangeAccount-
PolicyTest has 1,020 access patterns since they involve mul-
tiple steps such as typing account information using UI inter-
action, creating and encrypting the account, which includes
multiple ﬁle operations. RestrictionPolicyTest has the
most number of access patterns. It actually tests a collec-
tion of various types of common operations under restriction
mode (e.g., for enterprise use) such as installing whitelisted
packages, conﬁguring limited network settings. Such re-
stricted operations involve permission checkings from device
admin subjects across multiple objects and functionalities,
thus causing more access patterns under the hood.
We also found that there are 142 access patterns and 32
functionality trace shared across all 28 functionality cate-
gories, showing that they are the core part in Android frame-
work. For instance, access patterns that system subject sys-
tem_server read & write two critical ﬁle objects (names are
anonymized for conﬁdentiality), are two core access patterns
captured in all functionality categories. They are corre-
lated with functionality traces EnterpriseManager and De-
viceAccountPolicy under android.app.enterprise. This
ﬁnding is conﬁrmed by functionality developers that the
above two ﬁle objects are the core system conﬁguration ﬁles.
5.3
Justifying Policy Rules w.r.t. K
With the above knowledge base, we match SEAndroid
policy rules with corresponding functionality trace to justify
the access patterns deﬁned in these rules.
We ﬁrst identify in total 1,356 relevant allow rules in the
policy of the Galaxy S6 device running Android 5.1.1. These
rules are identiﬁed because the access patterns deﬁned in
these rules have subjects or objects that are found in tested
functionalities.
Then SPOKE’s analysis engine uses the SQL queries and
access pattern generalization mentioned in Section 4.2 to
attempt to match these rules with the knowledge base. Ta-
ble 1 shows the summary and reasoning of the justiﬁcation
result. In all, 1,036 policy rules (Justiﬁed + Partially Jus-
tiﬁed) are matched with the total 12,491 access patterns in
the knowledge base. Figure 4 shows the number of policy
rules in each functionality category respectively. There are
also 320 rules that SPOKE cannot ﬁnd corresponding ac-
cess patterns in the knowledge base. We further take a deep
analysis of these rules and present our ﬁndings of the rules’
characteristics and potential problems for each category of
the result, as shown in the following.
Justiﬁed Rules There are 187 policy rules, in which ev-
ery deﬁned access pattern is matched with an access pat-
tern collected in the knowledge base, and thus justiﬁed by
corresponding functionality trace. These rules are typically
written with ﬁne-grained labels, which are one-to-one map-
9
75055940028870235136135126278843547910208702315153523942002167134762981530204809345830425319246172331213210213174364232262431271154267208212143139333283203562138337165376284881225055588073481023945106134758053101443911810637216529380236040080012001600Knowledge Base by 665 Functional Tests in 28 CategoriesNum of Access PatternNum of Justified Policy RulesNum of Key API Functionality Traces (e.g., android.app, android.bluetooth, android.app.enterprise, etc.)Table 1: Summary and reasoning of policy rule justiﬁcation
Matching
Result
Num
Rules
Matched
187
Partially
Matched
198
269
382
Unmatched
320
Rule Characteristics & Reasoning
Fine-grained labels of subjects
and objects with privileged
classes (e.g., chr ﬁle, netlink)
Rules deﬁned using
attribute group (e.g., domain,
system domain, appdomain)
Coarse-grained labels for
application subjects (e.g.,
platform app, system app)
Default labels for diﬀerent
ﬁle objects (e.g., system ﬁle,
system data ﬁle)
Irrelevant subjects accessing
functionality-related objects
ping to unique or privileged subjects and objects (e.g., in the
target policy, label tz_user_device maps to /dev/trust-
zone_node).
In addition, the object classes in these rules are mostly
privileged classes. The access patterns deﬁned in such rules
are very speciﬁc. As an example in the target policy rules,
allow tz_daemon tz_user_device:chr_file {ioctl read
write} only deﬁnes three access patterns between the Trust-
Zone daemon and /dev/trustzone_node with three permis-
sions, which are all found correlated with functionality trace
of android.app.enterprise.Certificate.
Partially Justiﬁed Rules The majority of the rules are
partially justiﬁed. Some access pattern deﬁned by these
rules are justiﬁed by the knowledge base but not all of them.
We further ﬁnd out three speciﬁc reasons.
Firstly, 198 rules are deﬁned using attributes. Attribute is
an SEAndroid policy language feature that deﬁnes a group of
labels [10]. Rules deﬁned using attributes can involve a wide
range of various subjects and objects. For example, domain
is an attribute grouping all subject labels in a policy. allow
domain logd:unix_stream_socket {connectto} allows any
subjects to connect to a log daemon via unix socket.
Secondly, 269 rules are deﬁned for Android applications
but with coarse-grained subject labels. We found such coarse-
grained labels are over-used to assign diﬀerent privileged ap-
plications. For example, system_app is assigned to all ap-
plications with system user id, while only three of them are
related to the tested functionalities. This causes the rules
to be partially justiﬁed.
Thirdly, 382 rules use default labels for diﬀerent ﬁle ob-
jects. Default ﬁle object labels (e.g., label system_file
maps to /system/bin/*) are assigned to all ﬁles under /sys-
tem/bin, while only a subset of ﬁles are related to the tested
functionalities. Some access patterns deﬁned by the rules of
accessing other ﬁles are not observed in the tests.
Unjustiﬁed Rules There are 320 unjustiﬁed rules. All
access patterns deﬁned by these rules are not justiﬁed in
the knowledge base. Due to the same reasons as above, the
rules use coarse-grained labels and thus deﬁne potentially
unnecessary and over-permissive access patterns related to
critical subjects/objects. Such rules are subject to attack
surface analysis.
It is worth noting that some unjustiﬁed and partially un-
justiﬁed policy rules and access patterns exposed by SPOKE
were analyzed by both policy engineers and functionality
developers. The analysis result has been integrated in the
following updated policies in new Android releases.
With the help of SPOKE, previously unclassiﬁed policy
rules can be diﬀerentiated into diﬀerent categories based on
their justiﬁcation results. This helps policy engineers ana-
lyze the rules with semantic contexts.
5.4 Analyzing attack surface of Policy Rules
For the partially justiﬁed and unjustiﬁed policy rules shown
above, we further analyze their attack surface, and present
our critical ﬁndings of over-permissive access patterns de-
ﬁned by these rules.
As a case study, we select 5 critical ﬁle objects in one
system directory3. These system ﬁle objects are identi-
ﬁed based on enterprise security-related functionality trace
of android.app.enterprise, as explained in Section 5.2.
These system ﬁle objects contain device conﬁguration, pass-
word and encryption keys.
Then we ﬁnd that there are 210 over-permissive access
patterns from 106 policy rules that allow 94 unjustiﬁed sub-
jects to read, write and even execute the 5 critical ﬁle ob-
jects. This is the ﬁrst time of ﬁnding such problems in a
real-world SEAndroid policy rules related to security func-
tionalities with concrete evidence. The result has been con-
ﬁrmed by the developers and policy engineers. The policy
rules have been revised to revoke these over-permissive ac-
cess patterns in the updated policy.
In Appendix, Figure 5 shows a detailed bipartite graph
illustrating the above attack surface analysis result. In the
bipartite graph, we pick 11 easy-to-understand subjects (out
of other vendor-speciﬁc and conﬁdential subjects) shown as
red nodes on the left, and 17 ﬁle objects shown as blue
nodes on the right, including the 5 critical system ﬁles (top
5 anonymized node on the right). The grey edges between
subjects and objects are the justiﬁed access patterns. The
red highlighted edges are the identiﬁed over-permissive ac-
cess patterns deﬁned by 10 rules related to the 10 subjects of
the red edges (except the top one, which is a high-privileged
system subjects).