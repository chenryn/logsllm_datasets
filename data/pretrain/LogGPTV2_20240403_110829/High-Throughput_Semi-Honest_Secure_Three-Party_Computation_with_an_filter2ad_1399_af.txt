975,237 ± 3049
1,242,310 ± 4154
1,324,117 ± 3721
Latency
128.5 ± 2.1
121.2 ± 1.7
131.9 ± 0.4
165.7 ± 0.4
194.2 ± 0.9
CPU % Network
73.3%
62.2%
54.0%
49.5%
49.6%
0.572
2.99
5.47
6.95
7.38
Table 2: Experiment results running AES-CTR. The CPU col-
umn shows the average CPU utilization per core, and the network
column is in Gbps per server. Latency is given in milliseconds.
Figure 4: Throughput per core (AES computations)
Figure 5: Latency versus throughput (AES)
Microbenchmarking. We measured the time spent on
each part of the protocol, with the following results.
Protocol part
Server bitslice and deslice
AND and XOR gate computation
Randomness generation
Comm. delays between MPC servers
Communication delays for input/output
Percentage
8.70%
49.82%
9.54%
27.87%
4.07%
We remark that the long communication delays are due
to the fact that the communication topology of our imple-
mentation is a ring. Thus, each party waits for two other
messages to be processed before it receives its next message.
In order to reduce this waste, the randomness generation
is run during this delay. Thus, if the randomness genera-
tion was “free”, the communication delay would increase to
37.41% and it would not be any faster. This demonstrates
that the eﬃciency improvements could be achieved by com-
municating in every step.
5.3 Kerberos KDC with Shared Passwords
In order to demonstrate the potential of our protocol,
we incorporate it into a real application. Kerberos is used
815for user authentication in many systems, most notably it is
used by all Windows systems since Windows 2000. Kerberos
uses the hashed user password as a key to encrypt a Ticket-
Granting-Ticket (TGT) which contains a high-entropy cryp-
tographic key which is used for all communications after the
user logs in.
In Kerberos, a server breach is particularly
devastating since the hashed password is all that is needed
for impersonating a user. This is because the TGT is en-
crypted with the hashed user password and sent to the user.
Thus, an attacker knowing the hashed password alone can
decrypt the TGT. Microsoft’s Active Directory has suﬀered
breaches in the past, and such a breach enables an attacker
to impersonate every user in the organization.
In order to mitigate this risk, we consider a system where
the hashed user passwords are XOR-shared between two
servers (with diﬀerent administrators), and secure multi-
party computation is used to carry out the login authen-
tication without ever reconstructing the hashed password.
This makes it harder for an attacker to steal hashed pass-
words (needing to breach both servers) and also mitigates
insider threats since no single administrator has access to the
hashed user passwords. Since the ticket-granting-server’s
long-term key is also very sensitive, this is also protected in
the same way. The architecture of the Kerberos solution is
depicted in Figure 6.
Figure 6: The Kerberos authentication using MPC
We took the Open Source MIT Kerberos and modiﬁed
the encryption mode used to encrypt the TGT to counter
mode. This is important since CBC mode does not enable
parallel encryption and this would slow the encryption down
signiﬁcantly. In more detail, the authentication process in
Kerberos has the following steps:
1. Pre-authentication: We use the pa-enc-timestamp
method, which means that the user encrypts the date
using his hashed password as the key. This is a single
AES block (and so ECB is used).
2. TGT encryption: A session key to be used by the user
and ticket-granting server (TGS) to communicate later is
generated. Then, the TGT (containing the client infor-
mation and the session key) is generated and encrypted
under the long-term key of the TGS. The TGT is 15
blocks of AES.
3. Session-key and TGT encryption: The session key and
TGS are AES-encrypted with the user’s hashed password.
Overall, the number of encryption blocks for a single user
authentication is 33: one block for pre-authentication, 15
blocks for TGT encryption under the long-term key of the
TGS, and 17 blocks for session-key and TGT encryption
under the user key (this last encryption is 17 blocks due to
the addition of the session key and header information).
In all of the above encryptions, when using the Kerberos
encryption type aes128-cts-hmac-sha1-96, all of the en-
cryption above is without HMAC authentication. (HMAC
is only used for communication following these initial steps.)
As we have mentioned, we implemented a Kerberos exten-
sion that uses counter mode instead of CBC (cts is CBC
mode with ciphertext stealing). This is important for two
reasons. First, CBC encryption cannot be parallelized and
so each block must be encrypted after the previous block has
been encrypted. In addition, the TGT cannot be encrypted
under the user key until it has been encrypted under the
long-term key of the TGS. However, when using counter
mode, all of the AES computations can be carried out in
parallel. Speciﬁcally, upon receiving a user authentication
request together with a pre-authentication ciphertext, the
following is carried out:
1. The servers running the secure computation protocol load
the shares of the long-term key of the TGS and the shares
of the user’s key i.e., hash of the user’s password).
2. Two random counters ctr1 and ctr2 are chosen.
3. 33 AES computations are run in parallel: a single AES
decryption of the pre-authentication ciphertext, 15 AES
encryptions of ctr1 + 1, . . . , ctr1 + 15, and 17 AES encryp-
tions of ctr2 + 1, . . . , ctr2 + 16.
4. The preauthentication value is veriﬁed; if it is valid, then
the server proceeds to the next step.
5. The output of the 15 AES encryptions using ctr1 is XORed
with the TGT.
6. The encrypted TGT from the previous step is concate-
nated with the session key and some header information.
This is treated as a plaintext and XORed with the result
of the 17 AES encryptions using ctr2.
7. The result of the previous step along with ctr1 and ctr2
is sent to the user.
This ﬂow enables all of the AES computations to be car-
ried out in parallel, yielding a latency of approximately 120
milliseconds. We remark that in order for the server to be
able to process requests in bulk, a new set of AES encryp-
tions is begun every 100 milliseconds. Thus, authentication
requests are queued for at most 100 milliseconds (and on
average 50ms) and then processed. This ensures that the
overall latency (of a client) of processing an authentication
request is approximately 200 milliseconds. This is a very
reasonable time for an application like Kerberos where a
user is involved in the authentication process.
Experimental results.
In order to test our implementa-
tion, we ran the complete Kerberos login using the aforemen-
tioned cluster of three servers computing AES. The number
of logins per second with a single core was 2,970, with 10
cores was 28,723 and with 16 cores was 36,521. Thus, our
Kerberos implementation (that incorporates the extension
816[13] S. Gueron, Y. Lindell, A. Nof and B. Pinkas. Fast
Garbling of Circuits Under Standard Assumptions.
In 22nd ACM CCS, pages 567–578, 2015.
[14] Y. Ishai and E. Kushilevitz. On the Hardness of
Information-Theoretic Multiparty Computation. In
EUROCRYPT 2004, Springer (LNCS 3027), pages
439–455, 2004.
[15] M. Keller, E. Orsini and P. Scholl. Actively Secure
OT Extension with Optimal Overhead. In
CRYPTO 2015, Springer (LNCS 9215), pages
724–741, 2015.
[16] L. Kerik, P. Laud and J. Randmets. Optimizing
MPC for robust and scalable integer and
ﬂoating-point arithmetic. In 4th WAHC, 2016.
[17] E. Kushilevitz, Y. Lindell and T. Rabin.
Information-Theoretically Secure Protocols and
Security Under Composition. In the SIAM Journal
on Computing, 39(5): 2090-2112, 2010.
[18] J. Launchbury, I.S. Diatchki, T. DuBuisson and
A. Adams-Moran. Eﬃcient lookup-table protocol in
secure multiparty computation. In ACM ICFP’12,
pages 189–200, 2012.
[19] S. Laur, R. Talviste and J. Willemson. From
Oblivious AES to Eﬃcient and Secure Database
Join in the Multiparty Setting. In ACNS’13,
Springer (LNCS 7954), pages 84–101, 2013.
[20] J. Perry, A. Ousterhout, H. Balakrishnan, D. Shah
and H Fugal. Fastpass: a centralized “zero-queue”
datacenter network. In SIGCOMM 2014, pages
307–318, 2014
[21] T. Rabin, M. Ben-Or. Veriﬁable Secret Sharing and
Multiparty Protocols with Honest Majority
(Extended Abstract). STOC 1989 : 73-85
[22] J. Randmets. Personal comm. – AES performance
on the new Sharemind cluster. May, 2016.
[23] R. Talviste. Applying Secure Multi-Party
Computation in Practice. Ph.D dissertation, Univ.
of Tartu, 2016.
[24] A. Shamir. How to Share a Secret. Communications
of the ACM, 22(11):612–613, 1979.
[25] A. Yao. How to Generate and Exchange Secrets. In
the 27th FOCS, pages 162–167, 1986.
[26] S. Zahur, M. Rosulek and D. Evans. Two Halves
Make a Whole - Reducing Data Transfer in Garbled
Circuits Using Half Gates. EUROCRYPT,
pages 220–250, 2015.
[27] Sharemind, Cybernetica.
https://sharemind.cyber.ee.
described above in MIT-Kerberos) is able to support a sig-
niﬁcant login storm of over 35,000 user logins per second.
This is suﬃcient even for very large organizations (if more
is needed, then this can be achieved by simply using two
clusters instead of one). Beyond the number of logins per
second, it is important to ensure that the latency is low;
otherwise, users will have to wait too long at login. This is
the reason that we designed the TGT-generation process in
a way that enables full parallelism of the AES operations.
Our results give an average latency of the AES encryption
via MPC at 110ms, and an average latency at the client
(over a LAN) of 232ms. The increased time in the client is
due to additional work carried out both by the client and
the KDC, and due to the fact that requests are processed
every 100ms.
Acknowledgements
We express our thank to Assi Barak and Felipe Zimmerle for
their crucial help and contribution to the implementation
and experimental results.
6. REFERENCES
[1] G. Asharov and Y. Lindell. A Full Proof of the
BGW Protocol for Perfectly-Secure Multiparty
Computation. To appear in J. of Cryptology.
[2] M. Ben-Or, S. Goldwasser, A. Wigderson.
Completeness Theorems for Non-Cryptographic
Fault-Tolerant Distributed Computation. STOC
1988 : 1-10
[3] D. Beaver, S. Micali, and P. Rogaway. The round
complexity of secure protocols. In the 22nd STOC,
pages 503–513, 1990.
[4] D. Bogdanov, S. Laur and J. Willemson.
Sharemind: A framework for fast privacy-preserving
computations. In ESORICS 2008, Springer (LNCS
5283), 192–206, 2008.
[5] D. Bogdanov, M. Niitsoo, T. Toft, J. Willemson.
High-performance secure multi-party computation
for data mining applications. Int. J. Inf. Sec. 11(6):
403-418, 2012.
[6] R. Canetti. Security and Composition of Multiparty
Cryptographic Protocols. In the Journal of
Cryptology, 13(1):143-202, 2000.
[7] R. Canetti. Universally Composable Security: A
New Paradigm for Cryptographic Protocols. In
42nd FOCS, pages 136–145, 2001.
[8] D. Chaum, C. Cr´epeau and I. Damg˚ard.
Multi-party Unconditionally Secure Protocols. In
20th STOC, pages 11–19, 1988.
[9] R. Cramer, I. Damg˚ard and Y. Ishai. Share
Conversion, Pseudorandom Secret-Sharing and
Applications to Secure Computation. In the 2nd
TCC, Springer (LNCS 3378), pages 342–362, 2005.
[10] I. Damg˚ard and M. Keller. Secure multiparty AES.
In Financial Cryptography, Springer (LNCS 6052),
pages 367–374, 2010.
[11] O. Goldreich: Foundations of Cryptography -
Volume 2, Basic Applications. Cambridge
University Press 2004
[12] O. Goldreich, S. Micali, and A. Wigderson. How to
play any mental game. 19th STOC, 218–229, 1987.
817