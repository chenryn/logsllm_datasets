to pkM is unknown to the provider as long as at least one
user is honest (and hence kept his key secret). In addition,
our construct easily allows a user to unsubscribe from M.
∗ again
To do so, a user with secret key skU executes Store
using the secret key −skU instead. This results into removing
(or cancelling) skU from skM .
Speciﬁcation of the POR Protocol
To conduct POR on M for a user U, a veriﬁer V (who could
be the user himself) downloads the current veriﬁcation key
∗
M from the provider and compares it with the locally
pk
stored key pkM .4 If these are not equal, this signals that a
new tenant has deduplicated the same content, and updated
the corresponding ﬁle tags. In this case, V checks that pk
∗
M
has been correctly updated and includes information from
his local key pkM .
, pop(cid:48)) ∈ pklog of
public keys and proof of possessions for currently registered
users that joined since the last time that V or U executed
a protocol with S with respect to M. Here, we assume
that the keys are sorted in the order of the executions of
∗ by the users so that these values can be easily
Store/Store
read out from pklog. We denote the set of these pairs by
(cid:92)pklog.
To this end, S sends to V all pairs (pk
(cid:48)
Clearly, this allows U to learn the number of users that
uploaded the same ﬁle. We point out, however, that this
information leakage can be prevented if, for example, S
inserts a number of “bogus” keys within pklog; in this case,
U can only learn an upper bound on the number of other
users that store the same ﬁle. Observe that the knowledge
Similar to the Store procedure, S does a batch cross-
veriﬁcation by sampling for each block index i a random
4. If the veriﬁer is not the user, we assume that he received all values
from the user before except of the secret key skU.
M ·(cid:81)
of the number of users deduplicating the same ﬁle can prove
to be useful in a number of use-cases; for example, a number
of studies show that such a level of transparency might
motivate new pricing models in the cloud by allowing users
to collaboratively share the costs of storing the same ﬁle [6].
Additionally, we point out that U might pseudorandomly
create different signature keys for each ﬁle in order to
prevent any entity to associate the user’s public key with
the stored ﬁles.
Starting from the locally stored veriﬁcation key pkM ,
the veriﬁer V veriﬁes pkM
(cid:48).
?= pk
(pk(cid:48),pop(cid:48))∈(cid:92)pklog pk
, pop(cid:48)) ∈ (cid:92)pklog, V checks the
(cid:48)
Furthermore, for each (pk
(cid:48) by verifying the proof of possession
validity of the key pk
pop(cid:48). If the veriﬁcation succeeds, V accepts the downloaded
∗
M as the veriﬁcation key for M, updates the veriﬁ-
key pk
∗
cation key pk
M locally to this value, and proceeds with the
actual POR protocol as follows.
Subsequently, V creates a random challenge C and sends
it to S. Here, C contains a random (cid:96)-element set of tuples
(i, νi) where i ∈ {1, . . . , n} denotes a block index, and
D← ZN is a randomly generated integer. These values
νi
will be used to verify the retrievability of the data. Upon
reception of C, S computes:
∗
(i,νi)∈Q
(i,νi)∈Q
σ ← (cid:89)
µj ← (cid:88)
 (cid:89)
(i,νi)∈C
i ∈ G,
σνi
νimij ∈ Zp,
(10)
(11)
1 ≤ j ≤ s.
Finally, these values are sent back to V who reconstructs ui
checks that:
h2(H(M )||i)νi · s(cid:89)
uµj
j , pkM
j=1
 .
e(σ, g) ?= e
(12)
If this veriﬁcation does not pass, V is certain that his
ﬁle has been modiﬁed, and takes actions, such as informing
the user (if different from V) or downloading and repairing
the ﬁle.
3.3. Correctness and Security
In this section, we show that MTPOR is correct accord-
ing to Deﬁnition 2 and secure according to the soundness
property of Deﬁnition 3.
3.3.1. Correctness. In the most simple case of exactly one
user (which needs to be honest then), correctness follows
directly from the correctness of the BLS-based POR of [32].
To address the multi-tenant case, we assume ﬁrst that
all
involved users are honest. We say that a tag σ is
correctly formed with respect to a key pair (sk, pk) if it
fulﬁlls Equation 5. Recall that correctly formed tags are
essentially signatures of values that depend on message
blocks, i.e., σ1 = wsk1, with respect to some veriﬁcation key
pk1 = gsk1. This signature scheme is key-homomorphic in
∗
−→
∗
, pk
(sk(cid:96),pk(cid:96),M )
−→ . . .
the following sense: given a second signature σ2 = wsk2
of the same value w with respect to pk2 = gsk2, then
σ1 · σ2 = wsk1+sk2 is a valid signature of w with re-
spect to gsk1+sk2 = pk1 · pk2. It follows by induction for
any ﬁle M and for any sequence of key pairs (ski, pki),
i = 1, . . . , (cid:96), that: ⊥ (sk1,pk1,M )
−→ Data implies
that ⊥ (sk1+...+sk(cid:96),pk1···pk(cid:96),M )
Data. Hence, according to
the correctness of BLS POR of [32], it follows that POR-
protocol accepts with vk = pk1 ··· pk(cid:96) if the tags are
correctly formed with respect to (sk
) := (sk1 + . . . +
sk(cid:96), pk1 ··· pk(cid:96)). This shows correctness for the case that
all users behaved honestly.
Next, assume that some of the users are malicious (i.e.,
they deviate from the protocols). Let (pki, popi, τi) denote
∗. Ob-
the values uploaded by the users during Store/Store
serve that G is a cyclic group and hence any value pki can
be expressed as gski for some value ski ∈ Zp. This shows
that pki represents a valid veriﬁcation key. Moreover, the
tag veriﬁcations executed by the provider (see Equations 7
and 9) ensure that the tags stored in Data are correctly
formed. To see why, assume that a user uploads malicious
(cid:54)= σi for i ∈ I ⊆ {1, . . . , n}. As the user does
tags σ∗
not know the values {ri}i∈I, Equations 7 and 9 would be
violated with high probability and hence not be accepted
by the honest provider. We now give an explanation for
Equation 7 (which also holds for Equation 9). Assume that
the following holds:
i
(cid:32)(cid:89)
i
e
(cid:89)
It follows that:
(σ∗
i )ri =
i
i
(σ∗
i )ri , g
wri
i , pkU
= e
(cid:33)
(cid:32)(cid:89)
= e
(cid:16)
wskU
i
(cid:89)
i
(cid:17)ri ⇔(cid:89)
i∈I
(cid:33)
σ∗
i ·(cid:16)
(cid:124)
(cid:32)(cid:89)
wskU
i
(cid:16)
ri
i
(cid:17)−1
(cid:125)
wskU
(cid:123)(cid:122)
i
(cid:54)=1
= 1.
(cid:17)ri
(cid:33)
, g
.
Since the values ri are sampled uniformly at random and
independently, the probability for this event is at most 1/|G|.
Finally, the correctness of the proofs of possession popi
are each individually tested according to the speciﬁcations.
This shows that all values uploaded by the users need to
be correctly built as they would be otherwise rejected with
high probability by the provider.
3.3.2. Security. We now prove that SPORT is ε-sound
(cf. Deﬁnition 3). Recall that this expresses security with
respect to a static attacker. This means that the attacker
may collude with corrupted parties which are corrupted right
from the start. That is, whenever an attacker creates a new
honest user by a Store-query during the challenge game (cf.
Section 2.4), it will not be corrupted later on.
Our proof follows in principle the line of arguments
given for the BLS POR in [33]. There,
the proof was
divided into three parts; the ﬁrst part shows that if a veriﬁer
accepts a response to a query, this response was constructed
correctly with overwhelming probability. The other two
parts prove that if correctly built responses are given, one
can reconstruct a constant fraction of the blocks of the ﬁle
(part two) and that with the help of erasure codes, one can
derive the full original ﬁle from these blocks (part three).
As the structure of the response in SPORT is exactly the
same as in BLS POR and as we likewise suggest the use of
an appropriate erasure code, the arguments given for parts
two and three in [33] apply directly to SPORT as well.
Consequently, it is sufﬁcient to show the ﬁrst part, i.e., that
if a veriﬁer V accepts a response, it has to be correctly built
with overwhelming probability.
Recall that the CDH refers to the problem of deriving
the value ha where a is unknown from a given triple
(g, ga, h) ∈ G3 and is usually assumed to be hard. We prove
the following theorem:
Theorem 1. If the computational Difﬁe-Hellman problem
(CDH) is hard in the bilinear group G, then an adversary
in the random oracle model can only cause a veriﬁer V
to accept a POR-instance by responding with correctly
computed values {µj} and σ—except with negligible
probability.
We conduct a sequence of four games adapted from [33].We
start with Game 0 which is simply the challenge game
deﬁned in Section 2.4. Game 1 is the same as Game 0 except
of the following difference. When the adversary eventually
outputs a prover P for a user U and a ﬁle M, he has to
hand to the environment a value ski such that gski = pki,
for each pair (pki, popi) communicated to V in the context
of M. Owing to the security of the proofs of possession,
the adversary has to know these values since, otherwise, the
veriﬁcation of popi would fail with high probability. As the
environment performs the POR-protocols honestly on behalf
of the user V (i.e., without using this additional knowledge),
this does not impact the probability that the veriﬁer accepts.
Hence, we assert that the success probability of the attacker
does not change.
adversary’s signature σ(cid:48) is not equal to σ =(cid:81)
Game 2 is the same as Game 1 with the difference that
the environment keeps a list of all messages communicated
within the challenge game. If the adversary is successful in
any of the POR instances (i.e., the veriﬁer accepts, but the
(i,νi)∈Q σνi
i ,
see Equation 10), the environment aborts the security game.
Let M denote the ﬁle considered within this POR-instance
and pkM the used public veriﬁcation key. As explained
above, it is ensured that pkM = ga+b for some secret value
a (which is the secret key of the user represented by V) and
a known value b (being the aggregation of all remaining
keys).
Similar to [33], one can now construct from the ad-
versary a simulator that simulates the honest users and the
random oracle for the adversary and that solves the CDH for
a given triplet (g, ga, h) ∈ G3 by using ga as the public key
of simulated honest users. However, since we have to cater
for multiple users, one cannot use the same value ga each
time as the public key. Here, we exploit the fact that the tags
are signatures and that these signatures are homomorphic.
More precisely, whenever a new honest user U needs to be
created (in terms of a Setup-query), the simulator chooses a
random value rU ∈ Zp and outputs pkU = ga · grU = ga+rU.
Next, the simulator has to compute the following signa-
tures:
(cid:33)a+rU
(cid:32)
h2(H(M )||i) · s(cid:89)
umij
j
.
(13)
j=1
(cid:16)
(cid:17)a
h2(H(M )||i) ·(cid:81)s
Since rU is known to the simulator and given that the sig-
natures can be homomorphically combined, this task boils
which
down to compute
needs to be performed only by the simulator. This is ac-
complished as follows. First, a random exponent ρi ∈ Z∗
p
is chosen. Since the values uj and mij are known and
assuming the random oracle model, the simulator programs
the random model such that:
j=1 umij