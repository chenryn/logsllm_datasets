## 导购系统 - 电商内容去重\内容筛选应用(实时识别转载\盗图\侵权?) - 文本、图片集、商品集、数组相似判定的优化和索引技术  
##### [TAG 15](../class/15.md)
### 作者                 
digoal     
### 日期                                                                                                       
2017-01-12                                                                                                             
### 标签                 
PostgreSQL , rum , tsvector , array , smlar , 相似度 , 内容去重 , 内容筛选 , 转载 , 盗图 , 侵权 , 内容过滤              
----     
## 背景    
同一个热点事件，可能有很多的媒体报道。  
同一篇好的文章，可能被多人转载。  
一个商品、或者同一堆商品，可能会被诸多广告平台、导购平台推送。  
导购网站、新闻媒体、技术论坛、搜索引擎，充斥着各种李逵、李鬼。相似甚至内容完全相同的文章或者图片集等。  
不涉及利益时，这些都不是大问题。一旦涉及利益，这些问题可能会困扰利益方。  
比如  
1\. 导购网站，接收来自社会各界的推荐文章，推荐文章中会有诸多的商品，以及商品的体验、介绍性的内容。  
为了避免内容相似或者相同的文章，通常需要请人审核推荐的内容，如果发现大部分商品与已发表的其他导购文章内容类似，可能被拒绝发表。  
不过人为审核存在严重瓶颈，如果是机器审核，目前比较多见的可能是异步的批量审核（因为每接收一篇新的文章，都要和所有历史文章进行比较）。  
2\. 新闻媒体，同一个事件，避免多次被报道或者爆料。  
还有好多类似的社会需求。  
前面提到，每接收一篇新的文章，都要和所有历史文章进行比较，那么有什么技术能做到实时的内容相似度审核呢？  
到PostgreSQL的剑冢挑一柄绝世好剑吧。  
![pic](20170112_02_pic_001.jpg)  
## 相关文章  
1\. 文本相似  
通常需要算出每篇文章的关键词（比如平均每篇文章20个关键词），然后算出新提交文章的关键词（假设有若干个）  
然后去根据比对新建文章关键词，与历史文章关键词，找到相似的文章。  
[《PostgreSQL结合余弦、线性相关算法 在文本、图片、数组相似 等领域的应用 - 1 文本(关键词)分析理论基础 - TF(Term Frequency 词频)/IDF(Inverse Document Frequency 逆向文本频率)》](../201701/20170116_02.md)  
[《PostgreSQL结合余弦、线性相关算法 在文本、图片、数组相似 等领域的应用 - 3 rum, smlar应用场景分析》](../201701/20170116_04.md)    
[《PostgreSQL结合余弦、线性相关算法 在文本、图片、数组相似 等领域的应用 - 2 smlar插件详解》](../201701/20170116_03.md)    
[《PostgreSQL 文本数据分析实践之 - 相似度分析》](../201608/20160817_01.md)  
优化的海量文本相似分析算法，例如  
将关键词哈希（生成一个64位BIT串），对BIT位置为1的，关键词都有一个tfidf数值，对BIT位为0的，设置为负tfidf, BIT位为1的设置为正tfidf。一个关键词会生成64个正负值。  
将所有关键词生成的64个正负值，每一个对应位置，例如，第一个BIT，对应所有关键词的64个正负值中的第一个正负tfidf值。以此类推，最后会生成64个新的正负值。  
对于新的64个正负值，大于0的改成1，小于等于0的改成0，那么就变成了64个0、1的BIT串。  
这个BIT串就是根据这篇文章关键词算出来的指纹。  
每篇文章都有这样的指纹，通过对比两篇文章的指纹（bit串），有多少个BIT位置是不一样的，来判断相似性。  
详见，海量数据相似度计算之simhash和海明距离  
http://www.lanceyan.com/tech/arch/simhash_hamming_distance_similarity.html   
2\. 对于图像去重，则可以利用这篇文章的技术  
[《PostgreSQL 在视频、图片去重，图像搜索业务中的应用》](../201611/20161126_01.md)  
[《从相似度算法谈起 - Effective similarity search in PostgreSQL》](../201612/20161222_02.md)    
[《弱水三千,只取一瓢,当图像搜索遇见PostgreSQL(Haar wavelet)》](../201607/20160726_01.md)  
3\. 对于模糊查询、正则匹配、全文检索等，则可以参考这几篇文档  
[《从难缠的模糊查询聊开 - PostgreSQL独门绝招之一 GIN , GiST , SP-GiST , RUM 索引原理与技术背景》](../201612/20161231_01.md)    
[《PostgreSQL 全文检索加速 快到没有朋友 - RUM索引接口(潘多拉魔盒)》](../201610/20161019_01.md)  
4\. 数组、图片集、关键词集合相似，可以参考这篇文档，也是本文要讲的重点  
[《从相似度算法谈起 - Effective similarity search in PostgreSQL》](../201612/20161222_02.md)    
http://railsware.com/blog/2012/05/10/effective-similarity-search-in-postgresql/  
下面来讲一个内容去重的案例。  
## 实时去重 案例  
某导购平台，平均每篇文章可能会有几十个被推荐的商品以及一些商品介绍内容。  
例如你可以打开一个导购平台体验一下，一篇推荐玩具的导购文章，里面可能涉及几十个玩具类的商品。  
http://post.smzdm.com/p/525280/  
在历史推荐中，可能会堆积几千万甚至上亿的导购文章。  
每篇文章可能有几十个被推荐的商品，整个被推荐的商品库可能有千万级。  
而且一定会存在被多篇文章推荐的热点商品。  
比如畅销品，或者某些商品的卖家通过推荐费来提高被推荐的频度等。我们假设在整个导购文章库中，存在1/5的热点商品。  
下面将使用PostgreSQL smlar插件，实现对导购文章的实时去重。  
smlar插件的介绍请参考  
[《PostgreSQL结合余弦、线性相关算法 在文本、图片、数组相似 等领域的应用 - 2 smlar插件详解》](../201701/20170116_03.md)    
http://www.pgcon.org/2012/schedule/attachments/252_smlar-2012.pdf  
根据以上模型，构建测试库，一共6000万导购文章，设计1000万个商品，每篇导购文章11 - 50个商品，其中商品ID 1-50万 的为热点商品被1000万篇文章推荐过。  
1\. 创建smlar插件，  
```  
create extension smlar;  
```  
2\. 创建测试表  
```  
create unlogged table test (  
  id serial,   -- 文章ID  
  arr int8[]   -- 商品ID组成的数组，假设商品ID为int8类型，那么数组就是int8[]  
);   
```  
3\. 插入5000万记录，要求如下  
int8 取值范围1~1000万 ， 即历史上被推荐的商品有1000万个。  
int8[] 数组长度 11 ~ 50 ， 即每篇导购文章，包含11到50个商品。  
均匀分布。  
插入测试数据的函数如下，调用一次插入40条记录。  
```  
create or replace function f() returns void as $$  
declare  
begin  
  for i in 11..50 loop  
    insert into test (arr) select array_agg((10000000*random())::int8) from generate_series(1,i);  
  end loop;  
end;  
$$ language plpgsql strict;  
```  
使用pgbench调用以上函数，将生成5000万测试数据  
```  
vi test.sql  
select f();  
pgbench -M prepared -n -r -P 1 -f ./test.sql -c 100 -j 100 -t 12500  
```  
4\. 生成1000万热点商品的推荐数据  
假设商品ID范围在 1 ~ 50万 的为热点商品，被1000万篇文章推荐过。  
修改以上函数  
```  
create or replace function f() returns void as $$  
declare  
begin  
  for i in 11..50 loop  
    insert into test (arr) select array_agg((500000*random())::int8) from generate_series(1,i);  
  end loop;  
end;  
$$ language plpgsql strict;  
```  
使用pgbench调用以上函数，生成1000万测试数据  
```  
pgbench -M prepared -n -r -P 1 -f ./test.sql -c 100 -j 100 -t 2500  
```  
总共生成了6000万推荐文章的数据。  
5\. 创建gin索引，使用smlar提供的OPS  
```  
set maintenance_work_mem='64GB';  
create index on test using gin ( arr _int8_sml_ops );  
虽然smlar插件还支持 gist 索引，但是本文的CASE不建议使用gist索引  
--  create index on test using gist ( arr _int8_sml_ops );  
```  
6\. 相似计算算法  
smlar插件支持几种默认算法，同时支持自定义公式。  
注意，全部指数组元素去重后的结果  
N.i : 相交的元素个数(被比较的两数组会先去重)  
N.a : 第一个数组的元素个数(去重后)  
N.b : 第二个数组的元素个数(去重后)  
默认算法如下  
6\.1 cosine  
N.i / sqrt(N.a * N.b)  
6\.2 overlap  
N.i  
6\.3 tfidf  
较复杂，参考  
[《PostgreSQL结合余弦、线性相关算法 在文本、图片、数组相似 等领域的应用 - 2 smlar插件详解》](../201701/20170116_03.md)  
设置方法  
```  
允许普通用户设置，会话级别，会话之间互不干扰。
set smlar.type='cosine';   
-- set smlar.type='overlap';   
-- set smlar.type='tfidf';   
```  
自定义公式以及用法  
```    
float4 smlar( anyarray a, anyarray b, text formula );    
        - computes similary of two arrays by given formula, arrays should     
        be the same type.     
        Predefined variables in formula:    
          N.i   - number of common elements in both array (intersection)    
          N.a   - number of uniqueelements in first array    
          N.b   - number of uniqueelements in second array    
        Example:    
        smlar('{1,4,6}'::int[], '{5,4,6}' )    
        smlar('{1,4,6}'::int[], '{5,4,6}', 'N.i / sqrt(N.a * N.b)' )  -- 第三个参数为自定义公式  
        That calls are equivalent.    