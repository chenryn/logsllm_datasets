## 前言
事情的起因还要从*ctf 2019说起，`heap_master`里能用`unsorted bin
attack`实现一次任意地址写，一开始想到的是写stdout来实现地址泄露 ，但是这样要写两次才能实现，花了很大的经历找另外一次写，仍然没有找到，很绝望。
事后看wp看到是用一次写实现对变量`global_max_fast`的覆盖，从而实现后续的利用，对`malloc`以及`free`中涉及`global_max_fast`进行了一定的分析，并结合在网上找到的相关的题目进行了相应的实践。
在开始之前向大家推荐下我写的一个框架[pwn_debug](https://github.com/ray-cp/pwn_debug)，写它的本意是方便大家的调试，主要的特点有：
  1. 支持带符号调试glibc，脚本中支持安装debug版的glibc（x64和x86都支持），以实现调试的时候可以看到glibc源码。
  2. 支持不同版本的glibc调试。如在ubuntu16上调试libc-2.29。
  3. 下断点方便，不管程序是否开启PIE。
  4. 使用方便，与pwntools兼容起来很简单（我觉得）。
## 源码分析
此次的源码是基于`libc-2.23`的，后续的版本加入了`tcache`，该机制相对来说比较简单与独立，所以还是基于2.23进行相应的分析，在64位系统上进行。  
`global_max_fast`这个全局变量的作用是用来标志`fastbin`的大小的阈值，小于这个值的堆块会被认为是fastbin，使用fastbin的相应机制进行管理。看下它的定义：
    #define set_max_fast(s) \
      global_max_fast = (((s) == 0)                           \
                         ? SMALLBIN_WIDTH : ((s + SIZE_SZ) & ~MALLOC_ALIGN_MASK))
    #define get_max_fast() global_max_fast
`set_max_fast`初始化函数开始是在`malloc_init_state`调用的，可以看到这个宏定义的作用是设置`global_max_fast`默认值，默认值是0x80。
然后看`malloc`中对于`fastbin`的处理，fastbin处理很简单，就是找到对应的fastbin的单链表，并从中取出堆块，如果size检查通过就将该堆块返回：
    if ((unsigned long) (nb) fd, victim))
                 != victim);
          if (victim != 0)
            {
              if (__builtin_expect (fastbin_index (chunksize (victim)) != idx, 0))  ## 检查size
                {
                  errstr = "malloc(): memory corruption (fast)";
                errout:
                  malloc_printerr (check_action, errstr, chunk2mem (victim), av);
                  return NULL;
                }
              check_remalloced_chunk (av, victim, nb);
              void *p = chunk2mem (victim);
              alloc_perturb (p, bytes);
              return p;  #返回
            }
        }
查看free中的fastbin相关的处理源码：
    if ((unsigned long)(size) size = av->system_mem, 0))
          {
        ...
        ## 对next chunk的size进行检查
        if (chunk_at_offset (p, size)->size = av->system_mem;
              }))
          {
            errstr = "free(): invalid next size (fast)";
            goto errout;
          }
        ...
        ## 获取对应的fastbin index
        unsigned int idx = fastbin_index(size);
        fb = &fastbin (av, idx);
        ...
        do
          {
        /* Check that the top of the bin is not the record we are going to add
           (i.e., double free).  */
        if (__builtin_expect (old == p, 0))
          {
            errstr = "double free or corruption (fasttop)";
            goto errout;
          }
          ...
        p->fd = old2 = old;
          }
对于fastbin的free过程主要包括如下：
  1. 对释放的堆块的size进行基本的检查。
  2. 对释放堆块的下一个堆块的size进行基本的检查。
  3. 获取释放堆块所对应的fastbin链表对应的索引。
  4. 检查是否是double free。
  5. 释放进单链表。
fastbin的单链表管理是比较简单的，与`global_max_fast`相关且需要注意的代码则是fastbin