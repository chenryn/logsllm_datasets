details, and so on. In this situation, an attack against the user’s session is often
unnecessary because the attacker can already view privileged information
and can log in using captured credentials to perform other malicious actions.
However, there may still be instances where the user’s session is the primary
target. For example, if the captured credentials are insuffi cient to perform a
second login (for example, in a banking application, they may include a number
displayed on a changing physical token, or specifi c digits from the user’s PIN),
the attacker may need to hijack the eavesdropped session to perform arbitrary
actions. Or if logins are audited closely, and the user is notifi ed of each suc-
cessful login, an attacker may want to avoid performing his own login to be as
stealthy as possible.
In other cases, an application may use HTTPS to protect key client-server
communications yet may still be vulnerable to interception of session tokens
on the network. This weakness may occur in various ways, many of which can
arise specifi cally when HTTP cookies are used as the transmission mechanism
for session tokens:
n Some applications elect to use HTTPS to protect the user’s credentials
during login but then revert to HTTP for the remainder of the user’s ses-
sion. Many web mail applications behave in this way. In this situation, an
eavesdropper cannot intercept the user’s credentials but may still capture
the session token. The Firesheep tool, released as a plug-in for Firefox,
makes this an easy process.
n Some applications use HTTP for preauthenticated areas of the site, such
as the site’s front page, but switch to HTTPS from the login page onward.
However, in many cases the user is issued a session token at the fi rst page
visited, and this token is not modifi ed when the user logs in. The user’s
session, which is originally unauthenticated, is upgraded to an authenti-
cated session after login. In this situation an eavesdropper can intercept a
user’s token before login, wait for the user’s communications to switch to
cc0077..iinndddd 223344 88//1199//22001111 1122::0077::4422 PPMM
Stuttard c07.indd V3 - 07/22/2011 Page 235
Chapter 7 n Attacking Session Management 235
HTTPS, indicating that the user is logging in, and then attempt to access
a protected page (such as My Account) using that token.
n Even if the application issues a fresh token following successful login,
and uses HTTPS from the login page onward, the token for the user’s
authenticated session may still be disclosed. This can happen if the user
revisits a preauthentication page (such as Help or About), either by fol-
lowing links within the authenticated area, by using the back button, or
by typing the URL directly.
n In a variation on the preceding case, the application may attempt to switch
to HTTPS when the user clicks the Login link. However, it may still accept
a login over HTTP if the user modifi es the URL accordingly. In this situa-
tion, a suitably positioned attacker can modify the pages returned in the
preauthenticated areas of the site so that the Login link points to an HTTP
page. Even if the application issues a fresh session token after success-
ful login, the attacker may still intercept this token if he has successfully
downgraded the user’s connection to HTTP.
n Some applications use HTTP for all static content within the application,
such as images, scripts, style sheets, and page templates. This behavior
is often indicated by a warning within the user’s browser, as shown in
Figure 7-9. When a browser shows this warning, it has already retrieved
the relevant item over HTTP, so the session token has already been trans-
mitted. The purpose of the browser’s warning is to let the user decline
to process response data that has been received over HTTP and so may
be tainted. As described previously, an attacker can intercept the user’s
session token when the user’s browser accesses a resource over HTTP and
use this token to access protected, nonstatic areas of the site over HTTPS.
Figure 7-9: Browsers present a warning when a
page accessed over HTTPS contains items accessed
over HTTP.
n Even if an application uses HTTPS for every page, including unauthenti-
cated areas of the site and static content, there may still be circumstances
in which users’ tokens are transmitted over HTTP. If an attacker can
somehow induce a user to make a request over HTTP (either to the HTTP
cc0077..iinndddd 223355 88//1199//22001111 1122::0077::4422 PPMM
Stuttard c07.indd V3 - 07/22/2011 Page 236
236 Chapter 7 n Attacking Session Management
service on the same server if one is running or to http://server:443/
otherwise), his token may be submitted. Means by which the attacker
may attempt this include sending the user a URL in an e-mail or instant
message, placing autoloading links into a website the attacker controls,
or using clickable banner ads. (See Chapters 12 and 13 for more details
about techniques of this kind for delivering attacks against other users.)
HACK STEPS
1. Walk through the application in the normal way from first access (the
“start” URL), through the login process, and then through all of the appli-
cation’s functionality. Keep a record of every URL visited, and note every
instance in which a new session token is received. Pay particular atten-
tion to login functions and transitions between HTTP and HTTPS com-
munications. This can be achieved manually using a network sniffer such
as Wireshark or partially automated using the logging functions of your
intercepting proxy, as shown in Figure 7-10.
Figure 7-10: Walking through an application to identify locations where new
session tokens are received.
2. If HTTP cookies are being used as the transmission mechanism for session
tokens, verify whether the secure flag is set, preventing them from ever
being transmitted over unencrypted connections.
3. Determine whether, in the normal use of the application, session tokens
are ever transmitted over an unencrypted connection. If so, they should be
regarded as vulnerable to interception.
4. Where the start page uses HTTP, and the application switches to HTTPS
for the login and authenticated areas of the site, verify whether a new
token is issued following login, or whether a token transmitted during the
HTTP stage is still being used to track the user’s authenticated session.
Also verify whether the application will accept login over HTTP if the login
URL is modified accordingly.
cc0077..iinndddd 223366 88//1199//22001111 1122::0077::4433 PPMM
Stuttard c07.indd V3 - 07/22/2011 Page 237
Chapter 7 n Attacking Session Management 237
5. Even if the application uses HTTPS for every page, verify whether the
server is also listening on port 80, running any service or content. If so,
visit any HTTP URL directly from within an authenticated session, and
verify whether the session token is transmitted.
6. In cases where a token for an authenticated session is transmitted to the
server over HTTP, verify whether that token continues to be valid or is
immediately terminated by the server.
TRY IT!
http://mdsec.net/auth/369/
http://mdsec.net/auth/372/
http://mdsec.net/auth/374/
Disclosure of Tokens in Logs
Aside from the clear-text transmission of session tokens in network communica-
tions, the most common place where tokens are simply disclosed to unauthorized
view is in system logs of various kinds. Although it is a rarer occurrence, the
consequences of this kind of disclosure are usually more serious. Those logs
may be viewed by a far wider range of potential attackers, not just by someone
who is suitably positioned to eavesdrop on the network.
Many applications provide functionality for administrators and other sup-
port personnel to monitor and control aspects of the application’s runtime state,
including user sessions. For example, a helpdesk worker assisting a user who is
having problems may ask for her username, locate her current session through
a list or search function, and view relevant details about the session. Or an
administrator may consult a log of recent sessions in the course of investigat-
ing a security breach. Often, this kind of monitoring and control functionality
discloses the actual session token associated with each session. And often, the
functionality is poorly protected, allowing unauthorized users to access the list
of current session tokens, and thereby hijack the sessions of all application users.
The other main cause of session tokens appearing in system logs is where an
application uses the URL query string as a mechanism for transmitting tokens,
as opposed to using HTTP cookies or the body of POST requests. For example,
Googling inurl:jsessionid identifi es thousands of applications that transmit
the Java platform session token (called jsessionid) within the URL:
http://www.webjunction.org/do/Navigation;jsessionid=
F27ED2A6AAE4C6DA409A3044E79B8B48?category=327
cc0077..iinndddd 223377 88//1199//22001111 1122::0077::4433 PPMM
Stuttard c07.indd V3 - 07/22/2011 Page 238
238 Chapter 7 n Attacking Session Management
When applications transmit their session tokens in this way, it is likely that
their session tokens will appear in various system logs to which unauthorized
parties may have access:
n Users’ browser logs
n Web server logs
n Logs of corporate or ISP proxy servers
n Logs of any reverse proxies employed within the application’s hosting
environment
n The Referer logs of any servers that application users visit by following
off-site links, as shown in Figure 7-11
Some of these vulnerabilities arise even if HTTPS is used throughout the
application.
Figure 7-11: When session tokens appear in URLs, these are transmitted in the
Referer header when users follow an off-site link or their browser loads an off-
site resource.
The fi nal case just described presents an attacker with a highly effective
means of capturing session tokens in some applications. For example, if a
web mail application transmits session tokens within the URL, an attacker
can send e-mails to users of the application containing a link to a web server
he controls. If any user accesses the link (because she clicks it, or because
her browser loads images contained within HTML-formatted e-mail), the
attacker receives, in real time, the user’s session token. The attacker can run
a simple script on his server to hijack the session of every token received and
cc0077..iinndddd 223388 88//1199//22001111 1122::0077::4433 PPMM
Stuttard c07.indd V3 - 07/22/2011 Page 239
Chapter 7 n Attacking Session Management 239
perform some malicious action, such as send spam e-mail, harvest personal
information, or change passwords.
NOTE Current versions of Internet Explorer do not include a Referer header
when following off-site links contained in a page that was accessed over
HTTPS. In this situation, Firefox includes the Referer header provided that the
off-site link is also being accessed over HTTPS, even if it belongs to a differ-
ent domain. Hence, sensitive data placed in URLs is vulnerable to leakage in
Referer logs even where SSL is being used.
HACK STEPS
1. Identify all the functionality within the application, and locate any log-
ging or monitoring functions where session tokens can be viewed. Verify
who can access this functionality–for example, administrators, any
authenticated user, or any anonymous user. See Chapter 4 for techniques
for discovering hidden content that is not directly linked from the main
application.
2. Identify any instances within the application where session tokens are
transmitted within the URL. It may be that tokens are generally transmit-
ted in a more secure manner but that developers have used the URL in
specific cases to work around particular difficulties. For example, this
behavior is often observed where a web application interfaces with an
external system.
3. If session tokens are being transmitted in URLs, attempt to find any appli-
cation functionality that enables you to inject arbitrary off-site links into
pages viewed by other users. Examples include functionality implement-
ing a message board, site feedback, question-and-answer, and so on. If
so, submit links to a web server you control and wait to see whether any
users’ session tokens are received in your Referer logs.
4. If any session tokens are captured, attempt to hijack user sessions by
using the application as normal but substituting a captured token for your
own. You can do this by intercepting the next response from the server
and adding a Set-Cookie header of your own with the captured cookie
value. In Burp, you can apply a single Suite-wide configuration that sets
a specific cookie in all requests to the target application to allow easy
switching between different session contexts during testing.
6. If a large number of tokens are captured, and session hijacking allows you
to access sensitive data such as personal details, payment information,
or user passwords, you can use the automated techniques described in
Chapter 14 to harvest all desired data belonging to other application users.
cc0077..iinndddd 223399 88//1199//22001111 1122::0077::4433 PPMM
Stuttard c07.indd V3 - 07/22/2011 Page 240
240 Chapter 7 n Attacking Session Management
TRY IT!
http://mdsec.net/auth/379/
Vulnerable Mapping of Tokens to Sessions
Various common vulnerabilities in session management mechanisms arise
because of weaknesses in how the application maps the creation and processing
of session tokens to individual users’ sessions themselves.
The simplest weakness is to allow multiple valid tokens to be concurrently
assigned to the same user account. In virtually every application, there is no
legitimate reason why any user should have more than one session active at
one time. Of course, it is fairly common for a user to abandon an active session
and start a new one — for example, because he closes a browser window or
moves to a different computer. But if a user appears to be using two different
sessions simultaneously, this usually indicates that a security compromise has
occurred: either the user has disclosed his credentials to another party, or an
attacker has obtained his credentials through some other means. In both cases,
permitting concurrent sessions is undesirable, because it allows users to persist
in undesirable practices without inconvenience and because it allows an attacker
to use captured credentials without risk of detection.
A related but distinct weakness is for applications to use “static” tokens.
These look like session tokens and may initially appear to function like them,
but in fact they are no such thing. In these applications, each user is assigned
a token, and this same token is reissued to the user every time he logs in. The
application always accepts the token as valid regardless of whether the user
has recently logged in and been issued with it. Applications like this really
involve a misunderstanding about the whole concept of what a session is, and
the benefi ts it provides for managing and controlling access to the application.
Sometimes, applications operate like this as a means of implementing poorly
designed “remember me” functionality, and the static token is accordingly
stored in a persistent cookie (see Chapter 6). Sometimes the tokens themselves
are vulnerable to prediction attacks, making the vulnerability far more serious.
Rather than compromising the sessions of currently logged-in users, a successful
attack compromises, for all time, the accounts of all registered users.
Other kinds of strange application behavior are also occasionally observed
that demonstrate a fundamental defect in the relationship between tokens and
sessions. One example is where a meaningful token is constructed based on a
username and a random component. For example, consider the token:
dXNlcj1kYWY7cjE9MTMwOTQxODEyMTM0NTkwMTI=
which Base64-decodes to:
user=daf;r1=13094181213459012
cc0077..iinndddd 224400 88//1199//22001111 1122::0077::4433 PPMM
Stuttard c07.indd V3 - 07/22/2011 Page 241
Chapter 7 n Attacking Session Management 241
After extensive analysis of the r1 component, we may conclude that this cannot
be predicted based on a sample of values. However, if the application’s session
processing logic is awry, it may be that an attacker simply needs to submit any
valid value as r1 and any valid value as user to access a session under the security
context of the specifi ed user. This is essentially an access control vulnerability,
because decisions about access are being made on the basis of user-supplied
data outside of the session (see Chapter 8). It arises because the application
effectively uses session tokens to signify that the requester has established some
kind of valid session with the application. However, the user context in which
that session is processed is not an integral property of the session itself but is
determined per-request through some other means. In this case, that means
can be directly controlled by the requester.
HACK STEPS
1. Log in to the application twice using the same user account, either from
different browser processes or from different computers. Determine
whether both sessions remain active concurrently. If so, the application
supports concurrent sessions, enabling an attacker who has compromised
another user’s credentials to make use of these without risk of detection.
2. Log in and log out several times using the same user account, either
from different browser processes or from different computers. Determine
whether a new session token is issued each time or whether the same
token is issued each time you log in. If the latter occurs, the application is
not really employing proper sessions.
3. If tokens appear to contain any structure and meaning, attempt to sepa-
rate out components that may identify the user from those that appear to
be inscrutable. Try to modify any user-related components of the token so
that they refer to other known users of the application, and verify whether
the resulting token is accepted by the application and enables you to
masquerade as that user.
TRY IT!
http://mdsec.net/auth/382/
http://mdsec.net/auth/385/
Vulnerable Session Termination
Proper termination of sessions is important for two reasons. First, keeping the
life span of a session as short as is necessary reduces the window of opportunity
within which an attacker may capture, guess, or misuse a valid session token.
cc0077..iinndddd 224411 88//1199//22001111 1122::0077::4444 PPMM
Stuttard c07.indd V3 - 07/22/2011 Page 242
242 Chapter 7 n Attacking Session Management
Second, it provides users with a means of invalidating an existing session when
they no longer require it. This enables them to reduce this window further and
to take some responsibility for securing their session in a shared computing
environment. The main weaknesses in session termination functions involve
failures to meet these two key objectives.
Some applications do not enforce effective session expiration. Once created, a
session may remain valid for many days after the last request is received, before
the server eventually expires the session. If tokens are vulnerable to some kind
of sequencing fl aw that is particularly diffi cult to exploit (for example, 100,000
guesses for each valid token identifi ed), an attacker may still be able to capture
the tokens of every user who has accessed the application in the recent past.