Component: main
Architecture: amd64
请注意，普通的档案库没有”NotAutomatic: yes”,默认的Pin-Priority值是500,而对于有”NotAutomatic: yes”
的特殊档案库,默认的Pin-Priority值是1(参见apt_preferences(5)和第 2.7.7 节).
2.5.4 获取用于软件包的元数据
当使用APT工具时，如aptitude,apt-get,synaptic,apt-file,auto-apt，我们需要更新包含Debian档案库
信息元数据的本地拷贝。这些本地拷贝的文件名称，和在源列表文件里面的distribution,area,architecture
相应名称一致。(参见第 2.1.5 节).
• ”/var/lib/apt/lists/deb.debian.org_debian_dists_distribution_Release”
• ”/var/lib/apt/lists/deb.debian.org_debian_dists_distribution_Release.gpg”
• ”/var/lib/apt/lists/deb.debian.org_debian_dists_distribution_area_binary-architecture_Packages”
• ”/var/lib/apt/lists/deb.debian.org_debian_dists_distribution_area_source_Sources”
• ”/var/cache/apt/apt-file/deb.debian.org_debian_dists_distribution_Contents-architecture.gz”
(apt-file)
前4种类型的文件是所有相关的APT命令共享的，并且可以通过“apt-get update”或“aptitude update”在
命令行中进行更新。如果在源列表中有相应的“deb”行，则“软件包”元数据会进行更新。如果在源列表中有相应
的“deb-src”行，则“源代码”元数据会进行更新。
”Packages”和”Sources”的元数据文件包含有“Filename:”字段，指向二进制和源代码包文件的位置。目前，这
些软件包都统一放在”pool/”目录树下，这样可以改善跨版本发布的传输。
“软件包”元数据的本地副本可以使用aptitude来进行交互式的搜索。专门的搜索命令grep-dctrl(1)可以搜索
“软件包”和“源代码”元数据的本地副本。
”Contents-architecture”元数据的本地拷贝，能够被”apt-file update”更新，它的位置和其它4个不同。参
见apt-file(1). (auto-apt的”Contents-architecture.gz”文件的本地拷贝默认也使用不同的位置。)
2.5.5 APT 的软件包状态
除了远程获取元数据，lenny之后的APT工具还会将它在本地产生的安装状态信息保存在“/var/lib/apt/extended_states”
中，APT会使用它们来追踪自动安装的所有软件包。
2.5.6 aptitude 的软件包状态
除了远程获取元数据，aptitude命令还会将它在本地产生的安装状态信息保存在“/var/lib/aptitude/pkgstates”
中，这些信息只能被aptitude使用。
Debian参考手册 61/233
2.5.7 获取的软件包的本地副本
所有通过APT机制远程获取的软件包都被保存在“/var/cache/apt/archives”中，直到它们被清除。
aptitude 的这个缓存文件清理策略，能够在”Options” → ”Preferences” 下设置，也可以通过它的菜单，
”Actions”下的”Clean package cache”或”Clean obsolete files”来执行强制清理。
2.5.8 Debian 软件包文件名称
Debian软件包文件有特定的名称结构。
软件包类型 名称结构
二进制软件包（亦称deb） package-name_upstream-version-debian.revision_architecture.deb
用于debian-installer的二进制软件包（亦称
package-name_upstream-version-debian.revision_architecture.udeb
udeb）
源代码软件包（上游源代码） package-name_upstream-version-debian.revision.orig.tar.gz
1.0源代码软件包(Debian改变) package-name_upstream-version-debian.revision.diff.gz
3.0 (quilt 补丁管理工具)源代码软件
package-name_upstream-version-debian.revision.debian.tar.gz
包(Debian改变)
源代码软件包（说明） package-name_upstream-version-debian.revision.dsc
Table2.15: Debian软件包的名称结构
提示
这里仅叙述了基本的源码包格式。更多内容请参考dpkg-source(1)。
名称组件 可用的字符（正则表达式） 存在状态
package-name [a-z0-9][-a-z0-9.+]+ 必需
epoch: [0-9]+: 可选
upstream-version [-a-zA-Z0-9.+:]+ 必需
debian.revision [a-zA-Z0-9.+~]+ 可选
Table2.16: Debian软件包名称中每一个组件可以使用的字符
注意
你可以用 dpkg(1) 提供的命令检查软件包版本, 例如., ”dpkg --compare-versions 7.0 gt 7.~pre1 ;
echo $?”.
注意
debian-installer (d-i) 使用 udeb 作为它的二进制软件包的文件扩展名，而非普通的 deb。一个 udeb 软件包是从
deb 软件包中剥离了一些不必要的内容（例如文档），从而节省空间同时也放宽软件包政策的要求。deb 和udeb
软件包会共享相同的软件包结构。“u”表示微小。
2.5.9 dpkg 命令
dpkg(1)是Debian软件包管理中最底层的工具。它非常强大，必须小心使用。
当安装名为“package_name”的软件包时，dpkg会按照下列的顺序处理它。
Debian参考手册 62/233
1. 解包deb文件（等同于“ar -x”）
2. 使用debconf(1)执行“package_name.preinst”
3. 将软件包安装到系统中（等同于“tar -x”）
4. 使用debconf(1)执行“package_name.postinst”
debconf系统提供带有I18N和L10N（第 8 章）支持的标准化用户交互。
文件 内容说明
/var/lib/dpkg/info/package_name.co列nf出fi配l置es文件。（使用者可修改的）
/var/lib/dpkg/info/package_name.li列st出软件包安装的所有文件和目录
/var/lib/dpkg/info/package_name.md列5s出um软s件包安装的文件的MD5哈希值
/var/lib/dpkg/info/package_name.pr软ei件ns包t安装之前运行的软件包脚本
/var/lib/dpkg/info/package_name.po软st件in包s安t装之后运行的软件包脚本
/var/lib/dpkg/info/package_name.pr软er件m包移除之前运行的软件包脚本
/var/lib/dpkg/info/package_name.po软st件rm包移除之后运行的软件包脚本
/var/lib/dpkg/info/package_name.co用nf于igdebconf系统的软件包脚本
/var/lib/dpkg/alternatives/packageu_pndaamtee-alternatives命令使用的替代信息
/var/lib/dpkg/available 所有软件包的可用性信息
/var/lib/dpkg/diversions dpkg(1)使用的文件移动信息，由dpkg-divert(8)设置
dpkg(1)使用的文件状态改变信息，由dpkg-statoverride(8)
/var/lib/dpkg/statoverride
设置
/var/lib/dpkg/status 所有软件包的状态信息
/var/lib/dpkg/status-old “var/lib/dpkg/status”文件的第一代备份
/var/backups/dpkg.status* 第二代备份，以及“var/lib/dpkg/status”文件更旧的备份
Table2.17: dpkg创建的重要文件
“status”文件也被例如dpkg(1)、“dselect update”和“apt-get -u dselect-upgrade”等工具使用。
专门的搜索命令grep-dctrl(1)可以搜索“status”和“available”元数据的本地副本。
提示
在debian安装器环境下,udpkg命令用于打开 udeb软件包，udpkg命令是dpkg命令的一个精简版本.
2.5.10 update-alternatives 命令
Debian系统使用update-alternatives(1)让用户可以不受干扰地安装多种重叠的程序。例如，如果同时安装了
vim和nvi软件包，你可以使vi命令选择运行vim。
$ ls -l $(type -p vi)
lrwxrwxrwx 1 root root 20 2007-03-24 19:05 /usr/bin/vi -> /etc/alternatives/vi
$ sudo update-alternatives --display vi
...
$ sudo update-alternatives --config vi
Selection Command
----------------------------------------------
1 /usr/bin/vim
*+ 2 /usr/bin/nvi
Enter to keep the default[*], or type selection number: 1
Debian选择系统在”/etc/alternatives/”目录里通过符号链接来维持它的选择。选择进程使用”/var/lib/dpkg/alternatives/”
目录里面的相应文件。
Debian参考手册 63/233
2.5.11 dpkg-statoverride 命令
当安装一个软件包时，由dpkg-statoverride(8)命令提供的状态修改，是告诉 dpkg(1)对文件使用不同的属主
或权限的一个方法。如果使用了”--update”选项，并且文件存在，则该文件会被立即设置为新的属主和模式。
小心
系统管理员使用chmod或chown命令直接修改某个软件包文件的属主或权限，在下次软件包升级时，将会
被重置。
注意
本人在此使用了文件一词，但事实上也可用于 dpkg所处理的任何文件系统对象，包括目录，设备等。
2.5.12 dpkg-divert 命令
dpkg-divert(8)命令提供的文件转移功能，是强制dpkg(1)不将文件安装到其默认位置，而是安装到被转移的位置。
dpkg-divert专用于软件包维护脚本。不建议系统管理员随意使用它。
2.6 从损坏的系统中恢复
当运行测试版或不稳定版系统，系统管理员会遇到从错误的软件包管理进行恢复的情形。
小心
下面的一些方法具有很高的风险。在此先对你进行警告！
2.6.1 缺少依赖导致的安装失败
如果你通过”sudo dpkg -i ...”强制安装一个软件包到系统，而不安装它所依赖的所有软件包，这个软件包将作
为“部分安装”而失败。
你应当安装所有依赖的软件包，使用APT系统或者”sudo dpkg -i ...”。
然后，使用下列命令来配置所有部分安装的软件包。
# dpkg --configure -a
2.6.2 软件包数据缓存错误
软件包数据缓存错误，能够造成奇怪的错误，比如APT的”GPGerror: ... invalid: BADSIG...”。
你应该通过”sudo rm -rf /var/lib/apt/* ”删除所有缓存的数据，然后重新尝试。（如果使用了apt-cacher-ng，
你还应运行”sudo rm -rf /var/cache/apt-cacher-ng/* ”。）
Debian参考手册 64/233
2.6.3 不兼容旧的用户配置
如果一个桌面GUI程序在重要的上游版本升级后变得不稳定，你应该怀疑这是旧的本地配置文件（由它创建的）所导
致的。如果它在新建的用户账号下运行稳定，那么这个假设就得到了证实。（这是一个打包的bug并且打包者通常会避
免它。）
为了恢复稳定，你应该移除相应的本地配置文件并重新启动GUI程序。你可能需要阅读旧的配置文件内容以便之后恢
复配置信息。（别将它们删得太快了。）
2.6.4 具有相同文件的不同软件包
文档级的软件包管理系统，比如说aptitude(8)或apt-get(1),使用软件包依赖，当出现相同文件时，不会尝试去安
装软件包。(参见第 2.1.7 节).
软件包维护者的错误，或者系统管理员配置了不一致的档案库混合源，(参见第 2.7.6 节)，都会出现不正确的软件包
依赖情况。如果在出现相同文件的情况下，你通过aptitude(8)或apt-get(1)安装软件包，dpkg(1)在对软件包解
包时，确定会给调用程序返回错误，并不会覆盖已经存在的文件。
小心
使用第三方软件包会导致重大的系统风险，因为其通过使用root权限运行维护者脚本能够对你的系统做任
何事。dpkg(1)命令只防止解包时的覆盖行为。
可以先通过删除旧的令人讨厌的软件包，old-package，来解决这类错误的安装问题。
$ sudo dpkg -P old-package
2.6.5 修复损坏的软件包脚本
当软件包脚本中的一个命令由于某些原因返回错误，脚本也将由于错误而退出，软件包管理系统忽略它们的行为，并
导致部分安装的软件包。当一个软件包在它的删除脚本中有错误时，该软件包将会成为不可能删除的软件包，处理这
些问题，都会变得相当棘手。
对于“package_name”的软件包脚本问题，你应该查看下列的软件包脚本。
• ”/var/lib/dpkg/info/package_name.preinst”
• ”/var/lib/dpkg/info/package_name.postinst”
• ”/var/lib/dpkg/info/package_name.prerm”
• ”/var/lib/dpkg/info/package_name.postrm”
使用下列的方法，以root编辑损坏的软件包脚本。
• 在行首添加“#”可以禁用出错的行
• 在出错行的行尾添加“|| true”可以强制返回成功
然后，按照第 2.6 节。
Debian参考手册 65/233
2.6.6 使用 dpkg 命令进行救援
因为dpkg是非常底层的软件包工具，它可以在很糟糕的情况下进行工作，例如无法启动系统且没有网络连接。让我
们假定foo软件包损坏了，并且需要更换。
你可以在软件包缓存目录：“/var/cache/apt/archives/”中找到旧的foo软件包的无bug版本。（如果找不到，
你可以从档案库https://snapshot.debian.org/中下载它，或从具有软件包缓存功能的机器中拷贝它。）