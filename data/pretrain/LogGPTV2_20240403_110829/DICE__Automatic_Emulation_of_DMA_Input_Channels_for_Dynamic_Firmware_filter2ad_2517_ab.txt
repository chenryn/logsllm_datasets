DMA-based peripherals and input in dynamic ﬁrmware
analysis; we identify the lack of DMA support as a
common limitation for all existing ﬁrmware analyzers.
• We present DICE, which enables dynamic ﬁrmware ana-
lyzers to support DMA-based peripherals, and recognize
and manipulate DMA inputs for testing otherwise skipped
or unreachable code/states in ﬁrmware.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:26:20 UTC from IEEE Xplore.  Restrictions apply. 
1939
MCU memorymapProcessorEmulatorDICECrashReportTesting inputPeripheralProcessor InterfaceDMATraces• When designing DICE, we overcome the challenges
posed by the dynamic nature of DMA,
the diverse
hardware and software of embedded devices, and the
unavailability of ﬁrmware source code.
• We implemented two prototypes of DICE based on P2IM
and a MIPS PIC32 emulator, respectively. Our evaluation
shows that DICE: (1) achieved highly accurate DMA
input channel identiﬁcation and emulation, (2) helped
P2IM signiﬁcantly improve its analysis coverage and
discover 5 new bugs in tested ﬁrmware.
• We analyzed all the bugs discovered by DICE and found
all of them are remotely exploitable. They have security
consequences such as information leakage, data corrup-
tion, and denial-of-service. These bugs cannot be found
by exiting ﬁrmware analyzers due to the lack of DMA
support or emulation.
II. MOTIVATION
MCU-based embedded devices (or MCUs in short) integrate
on a single chip a main processor, RAM, Flash, and diverse
peripherals. Their energy-efﬁciency and sufﬁcient computing
power make them the ideal building blocks of IoT devices and
cyber-physical systems. The entire software stack on MCUs,
referred to as ﬁrmware, contains OS/system libraries, drivers,
and application-level logic in a monolithic form.
Firmware, similar to other software, may contain program-
ming errors or bugs that can be exploited by attackers [32],
[33], [31]. These security bugs in ﬁrmware, although often
similar in nature, can cause severe and unique consequences
because MCUs are widely used in mission-critical settings
(e.g., industrial systems) and have direct physical outreach
(e.g., controlling vehicle movements).
Unfortunately, bugs in MCU ﬁrmware are more difﬁcult
to detect than bugs in conventional computer software, due
to existing analysis tools’ limited support for highly diverse
and heterogeneous MCU hardware. Specially, various kinds
of peripherals are used as the main communication channels
through which ﬁrmware communicates with other devices and
interacts with the physical environment. However, existing
ﬁrmware analysis methods cannot fully model or emulate
peripherals, and thus, fail to trigger or reach a large portion of
ﬁrmware code during analysis, missing opportunities to detect
bugs.
Take a MCU-based GPS device as an example (Figure 2).
It uses UART (universal asynchronous receiver-transmitter) to
receive NMEA [13] serialized messages from a GPS antenna.
These messages are copied to RAM via DMA. The ﬁrmware
then parses the messages and computes the location informa-
tion, which is later copied via DMA to an LCD (Liquid Crystal
Display) attached to the SPI (Serial Peripheral Interface).
This device also has other peripherals for receiving inputs or
delivering outputs.
Without peripheral awareness or support, dynamic analysis
of this GPS ﬁrmware cannot reach most of the code because
the ﬁrmware execution cannot receive any input or even boot
up the device. Some recent work [44], [6], [10] addressed
Fig. 2: A MCU-based GPS and its I/O ﬂows: 1(cid:13) DMA-based interfaces, 2(cid:13)
MMIO/interrupt-based interfaces.
the peripheral dependence issue using different approaches.
However, they mostly focused on the simple peripherals that
only use memory-mapped I/O (e.g., those inside the box 2(cid:13)
in Figure 2). [7] relies on manually identiﬁed DMA buffers to
partially support simple DMA-based I/O, and [2] completely
removes DMA through replacing HAL (hardware abstraction
layer) functions with manually-written hooks.
So far no existing work supports complex peripherals that
use DMA to communicate with ﬁrmware (e.g., those inside
box 1(cid:13) in Figure 2). Therefore, ﬁrmware using DMA still
cannot be fully analyzed and all
their bugs/vulnerabilities
detected. According to our survey (§IV), most nontrivial
ﬁrmware use DMA for both performance and energy-saving
reasons. In these ﬁrmware, the majority of code cannot run or
be tested without DMA support.
III. BACKGROUND
A. DMA on MCU Devices
Direct Memory Access (DMA) is a widely used architec-
tural feature that allows peripherals to access the main system
memory (RAM) without involving main processors. The goal
of DMA is to improve performance when transferring data
between RAM and peripherals. The introduction of DMA
dates back to the 1960s on the DEC PDP-8 minicomputer [3].
DMA is ubiquitously adopted by today’s computers.
DMA is also widely used in modern embedded devices
powered by microcontrollers (MCU). Similar to DMA on
conventional computers, DMA on MCU devices beneﬁt from
the performance improvement in data transfer between RAM
and peripherals. Unlike conventional computers, MCU devices
use DMA not just for performance reasons but also for saving
power or energy. DMA allows large or slow data transfers
to take place while the main processor (i.e., a major power
consumer on embedded devices) is asleep or stays in the low-
power mode.
From the programmers’ perspective, DMA provides a stan-
dard interface that abstracts away peripheral internals. Pro-
grammers can use the same interface exposed by DMA
controllers to exchange data with different peripherals. An
example of this abstraction is the HAL library of ChibiOS [9],
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:26:20 UTC from IEEE Xplore.  Restrictions apply. 
1940
SPIDMA CTRLRAMMainProcessorUARTBufferBufferGPIODACFLASHI2CLCDMCU-based GPS12GPSEEPROMA single MCU may have more than one DMA controllers,
each covering a set of connected peripherals. A DMA stream
in a DMA controller can only be used for supporting one DMA
transfer at any given time. High-speed on-chip peripherals,
such as Ethernet, USB, and CAN, may integrate a DMA
controller for higher throughput. Note that it is the DMA
controller, not the source peripheral, that directly writes the
data to memory. DMA controllers are the only peripherals
that can directly access RAM thanks to the special permission
they have to access the system bus as master devices.
C. Challenges of Supporting DMA in Firmware Analysis
Dynamic nature of DMA: The dynamic nature of DMA (e.g.,
conﬁgurations, streams, and transfers) makes it challenging
to detect DMA input channels or infer transfer pointers.
Some previous work relies on manual and static identiﬁcation
of DMA buffers [7]. This strategy requires source code or
reverse engineering of ﬁrmware. Despite the poor scalability,
it can neither be complete nor accurate because it may miss
dynamically created DMA buffers or mistakenly treat regular
memory regions as DMA buffers. A reliable and practical
approach should consider that DMA transfers are created
and performed dynamically on demand. It should not require
human efforts or rely purely on static inference.
MCU hardware and software diversity: The diversity of
MCU ﬁrmware prevents the application of DMA models
designed for desktop OS, where a generic hardware abstraction
layer (HAL) exists (e.g. for Linux [39]). For MCU ﬁrmware,
there is no standard DMA interface or a prevalent OS that
provides a generic abstraction for various hardware periph-
erals. Moreover, it is practically impossible to develop an
emulator for each DMA controller and peripheral due to the
high diversity of the hardware, as observed by [10], [44], [29],
[6]. Therefore, it is necessary yet challenging to design a single
DMA emulation method that can work with a wide range of
ﬁrmware, architectures and peripherals.
IV. SURVEY ON DMA AVAILABILITY AND USAGE ON
MCUS
We surveyed 1) the availability of DMA controllers for
MCUs on the complete product portfolio of a top MCU
vendor, and 2) DMA usage by ﬁrmware on a large collection
of open-source repositories from GitHub.
A. DMA Availability on MCUs
We analyzed on March 2019 the MCU product portfolio
(which documents all MCU models a vendor produced) of
Microchip Semiconductors [24], a top MCU vendor in terms
of market share [19]. Our analysis included 1,356 MCUs
from 32-bit (ARM Cortex-M, MIPS), 16-bit (PIC16), and 8-
bit (PIC8 and AVR) architectures. We excluded the legacy
architecture 8051. We grouped MCUs into families using
Microchip’s quick reference guides [27], [25], [26]. MCUs
within the same family, although different in memory size and
packaging, use the same architecture and have mostly the same
Fig. 3: DMA controller and detail of DMA transfer descriptors, each using 20
bytes of memory span in the MMIO region (some ﬁelds of transfer descriptors
are omitted for simplicity).
where the low-level drivers use DMA transparently through a
uniform interface to receive input from different peripheral.
We surveyed the availability of DMA on MCUs and the uses
of DMA in ﬁrmware. We analyzed 1,356 MCUs from a major
vendor and 1,000 repositories from Github targeting MCUs
exclusively. Our analysis showed that 94.1% of the modern
MCUs (32-bit architecture) are DMA capable, which demon-
strates the ubiquitous support for DMA on modern embedded
devices. As for the ﬁrmware, 25.1% of the compilable or pre-
compiled MCU repositories contain DMA related debugging
symbols, a strong indicator of ﬁrmware using DMA. The
results underline the importance and urgency of supporting
DMA-capable peripherals and DMA-based input in ﬁrmware
analysis. We present the details of our survey in §IV.
B. DMA Workﬂow on ARM Cortex-M
We choose ARM Cortex-M as the reference architecture for
designing DICE because it is the most common architecture
used in modern MCU devices and IoT. DMA works on this
architecture in a similar way as it does on others, such
as MIPS, which DICE also supports. Below we describe a
simpliﬁed DMA workﬂow and introduce the basic concepts,
which are necessary to understand the design of DICE.
A DMA controller plays the central role in the DMA
workﬂow. It is an on-chip peripheral that transfers data into
memory on behalf of peripherals. A DMA transfer is a
single movement of data to memory. It starts with ﬁrmware
creating a transfer descriptor, specifying the transfer’s source,
destination, size, etc., and writing this transfer descriptor to the
DMA controller, a step called DMA conﬁguration. In addition,
ﬁrmware also speciﬁes which DMA stream (a physical data
channel inside the DMA controller) should be used for the
transfer. Figure 3 shows a DMA controller with three DMA
streams conﬁgured for three different DMA transfers. After
the conﬁguration ﬁnishes and the data becomes ready at
the source, the DMA controller performs the transfer asyn-
chronously without involving the ﬁrmware or the processor.
The source and destination of a transfer are also referred to
as transfer pointers.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:26:20 UTC from IEEE Xplore.  Restrictions apply. 
1941
Transfer Descriptor 3:SourceDestinationSizeTransfer Descriptor 2:SourceDestinationSizeTransfer Descriptor 1:SourceDestinationSizeStream 3Stream 2Stream 1Peripheral BusSystem BusBase: 0x4002 0000Base+0x08Base+0x1CBase+0x30DMA ControllerBase+0x00CommonConﬁg& StatusMCU architecture
32-bit (ARM Cortex-M, MIPS)
16-bit (PIC16)
8-bit (PIC8, AVR)
DMA support
32 (94.1%)
2 (11.1%)
7 (11.3%)
No DMA support
2 (5.9%)
16 (89.9%)
55 (88.7%)
TABLE I: DMA availability on Microhip MCUs families (March 2019)
on-chip peripherals and DMA availability (as DMA controller
is also an on-chip peripheral). Therefore, grouping MCUs into
families allow us to better analyze and describe DMA avail-
ability on those MCU families. Our analysis demonstrated that
94.1% of modern 32-bit MCU families include one or multiple
DMA controllers, or include DMA capable peripherals (e.g.,
USB, CAN, Ethernet). On the other hand, only 11% of 16-bit
and 8-bit MCU families support DMA (Table I).
B. DMA Usage by Firmware
We collected 1,000 unique repositories from GitHub by
searching keywords and topics related to microcontrollers,
IoT, and DMA. Our dataset only included repositories for
ARM Cortex-M architecture, the most popular architecture
for IoT devices and cyber-physical systems. We found most
repositories cannot be compiled because of missing build-
ing scripts (e.g., makeﬁles) or libraries, or unavailability of
proprietary IDE (Integrated Development Environments) and
toolchains. We were able to compile or directly download 350
ELF binaries from our dataset. We performed a basic static
analysis on both source code and EFL ﬁles.
Our analysis shows that 920 out of 1,000 (92%) repositories
include DMA related header ﬁles or DMA driver source code.
However, only 88 out of 350 (25.1%) ELF ﬁles contain DMA
related debug symbols. This is because DMA header ﬁles and
driver code are always distributed as part of SDKs, regardless
of ﬁrmware usage. Therefore, we cannot use the inclusion
of DMA header ﬁles or driver code as an indicator of DMA
usage. Instead, we use the appearance of DMA debug symbols
in ELF ﬁles as the indicator for DMA usage by ﬁrmware, and
estimate 25.1% (88 out of 350) ﬁrmware use DMA.
We also observed that most ﬁrmware that use DMA are
for battery-powered devices (e.g., drones, handhelds, smart
watches), or require high data communication throughput
(e.g., DSPs and LCDs). We admit that usage of DMA is
an architectural and/or design decision made by ﬁrmware
developers for the speciﬁc application.
V. SYSTEM DESIGN
DICE provides dynamic ﬁrmware analyzers the ability to
recognize and handle DMA-based input from peripherals, thus
allowing ﬁrmware using DMA to be analyzed and ﬁrmware
code dependent on DMA input to be executed and tested,
which is previously impossible. DICE meets the following
design goals that we set:
• Hardware independence: DICE should not rely on ac-
tual hardware peripherals. It should be generic to support
a wide range of architectures, peripherals, and DMA
controllers used in embedded devices.
• Firmware compatibility: DICE should be compatible
with all possible ways that ﬁrmware may use DMA as
input channels, regardless of how DMA is conﬁgured or
data is consumed.
• Dynamic DMA: DICE should fully consider the dynamic
nature of DMA and be able to capture DMA input events
through dynamically allocated memory regions.
• No source code: DICE should not require source code
or debug symbols of ﬁrmware.
• Integration with analyzers: DICE should not need
hardware or software capabilities that common ﬁrmware
analyzers do not have. Integrating DICE should not
require major changes to existing analyzers.
DICE achieves the design goals thanks to a novel approach
to the ﬁrmware. The approach
to supplying DMA input
is inspired by our observation on the generic patterns that
ﬁrmware follows when performing DMA conﬁgurations and
data transfers. These patterns are observed across different
ﬁrmware on various embedded devices using distinct DMA
controllers and peripherals. In fact, these patterns reﬂect the
de facto protocol used by embedded ﬁrmware and peripherals
when exchanging data via DMA. By detecting these patterns
and intercepting the DMA conﬁguration and data transfer
events, DICE monitors DMA input channels as they are
created, used, and disposed. As a result, DICE can capture
(and respond to) all DMA input events, which inevitably go
through the monitored interfaces.
Next, we explain the abstract notion of DMA input channels
and discuss the DMA conﬁguration and data transfer patterns
that DICE uses to identify DMA input channels.
A. DMA Input Channels
DMA input channel is an abstract notion we formulated, on
which the core idea of DICE is derived. Such channels can
be viewed as the conceptual bridges through which ﬁrmware
and peripherals exchange data via DMA. They manifest as
dynamically allocated memory buffers that ﬁrmware and pe-
ripherals agree upon for transferring data. A DMA controller
serves as the proxy for a peripheral to write data in the DMA
memory buffers without involving the main processor. The
data is then read from the memory buffer by the ﬁrmware
as input from the peripheral. Therefore, if all DMA input
channels (or their manifestations, i.e., memory buffers used as
DMA data exchanges) can be recognized upon their creation,
access, and disposal, all DMA data transfers can be monitored
and interposed, which allows DICE to supply DMA input
to the ﬁrmware execution without using actual peripheral
hardware or understanding the inner workings of peripherals
or DMA controllers. DMA output channel follows the same
deﬁnition with DMA input channel, but with the opposite
transfer direction (i.e., data is transferred to peripherals via
DMA).
Table II shows all possible combinations of sources and