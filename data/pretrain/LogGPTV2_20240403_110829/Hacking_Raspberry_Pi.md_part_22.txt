### Script for Capturing Webcam Images and Scheduling with Cron

#### Script Explanation
```sh
#!/bin/sh
filename=$(date +”%m-%d-%y|||%H%M%S”)
fswebcam -r 356x292 -d /dev/video0 $filename.jpg
cp $filename.jpg /home/pi/webcam
```

1. **Shebang Line**:
   - `#!/bin/sh`: This line, known as a shebang, tells the system to use the `sh` (Bourne shell) interpreter to execute the script.

2. **Filename Variable**:
   - `filename=$(date +”%m-%d-%y|||%H%M%S”)`: This command creates a variable named `filename` that contains a timestamp in the format `MM-DD-YY|||HHMMSS`.

3. **Capture Image**:
   - `fswebcam -r 356x292 -d /dev/video0 $filename.jpg`: This command uses `fswebcam` to capture an image from the webcam connected to `/dev/video0` at a resolution of 356x292 pixels and saves it with the filename generated in the previous step.

4. **Copy Image**:
   - `cp $filename.jpg /home/pi/webcam`: This command copies the captured image to the `/home/pi/webcam` directory. Additional code can be added here to perform actions like uploading to Dropbox or FTP.

#### Making the Script Executable
```sh
sudo chmod +x camscript.sh
```
This command makes the `camscript.sh` script executable.

#### Scheduling with Cron
1. **Open Crontab Editor**:
   ```sh
   crontab -e
   ```
   This command opens the crontab editor for the `pi` user.

2. **Add Cron Job**:
   ```sh
   */1 * * * * /home/pi/camscript.sh
   ```
   This cron job runs the `camscript.sh` script every minute.

#### Understanding Cron Syntax
- `*/1 * * * *`: This syntax specifies that the command should run every minute.
  - `Minute (range 0-59)`
  - `Hour (range 0-23)`
  - `Day of the Month (range 1-31)`
  - `Month of the Year (range 1-12)`
  - `Day of the Week (range 1-7, with 1 signifying Monday)`
  - `Year (range 1900-3000)`

For more information on Cron format, you can refer to this article: [Cron Format](http://is.gd/bCCmOm).

### Adding a Rechargeable Battery Pack to Your Pi Camera

Attaching a rechargeable battery pack to your Raspberry Pi, especially when combined with a Wi-Fi dongle, provides flexibility. You can place your Pi webcam anywhere, indoors or outdoors, and capture images or videos. You can even program the Pi to send the files to a desktop computer via FTP.

#### Power Supply Options
- **Lithium-Ion (Li-ion) Battery Pack**: A Li-ion battery pack with a Micro-B USB plug and regulated 5V output is recommended. This allows you to charge the battery using a desktop computer or a powered USB hub and power the Pi by plugging the Micro-B plug into the Pi's power port.

- **Battery Capacity**: The standard power draw of the Model B board is 500mA. A 1,000mAh battery pack can provide 1000mA for one hour or 500mA for two hours.

- **Example Product**: Adafruit sells a Li-ion battery pack with 3300mAh, providing over six hours of continuous power to a normally operating Raspberry Pi. [Adafruit Li-ion Battery Pack](http://is.gd/7ID1JP)

- **Multiple USB Ports**: Some battery packs have two 5V USB ports with different current supplies (e.g., 1A and 2.1A). For the Pi, use the 2.1A port.

### Using Python and SimpleCV with Your Webcam

SimpleCV is a powerful vision library for Python that includes motion and face detection capabilities.

#### Setting Up SimpleCV
1. **Install SimpleCV Libraries**:
   ```sh
   sudo apt-get install python-opencv python-scipy python-numpy python-pip
   sudo pip install https://github.com/ingenuitas/SimpleCV/zipball/master
   ```

2. **Verify Installation**:
   ```sh
   python
   import SimpleCV
   print(dir(SimpleCV))
   ```

3. **Create a Simple Script**:
   ```sh
   cd
   sudo nano hellocamera.py
   ```

4. **Script Content**:
   ```python
   #!/usr/bin/env python
   from SimpleCV import Image, Display
   from time import sleep

   myWindow = Display()
   myImage = Image("webcam.jpg")
   myImage.save(myWindow)

   while not myWindow.isDone():
       sleep(0.1)
   ```

5. **Run the Script**:
   ```sh
   python hellocamera.py
   ```

### Chapter 17: Raspberry Pi Security and Privacy Device

#### Introduction
This chapter discusses using the Raspberry Pi to enhance security and privacy when online, particularly for securing personal and financial details.

#### Scenarios
1. **Netflix Access**: Unable to access Netflix services in other countries due to international licensing laws.
2. **Public Wi-Fi Security**: Compromised bank accounts due to unsecure public Wi-Fi.
3. **Hotel Web Restrictions**: Blocked web content in hotel rooms.

#### Virtual Private Network (VPN)
- **Definition**: A secure, point-to-point network connection tunneled through an unsecure medium.
- **Benefits**: Encrypts all traffic, providing security and privacy.
- **Drawbacks**: Slower network access due to encryption overhead.
- **Setup**: Hosted VPN services like LogMeIn Hamachi and OpenVPN are easy to set up.

#### Proxy Server
- **Definition**: A networking device that connects to Internet resources on behalf of another computer.
- **Benefits**: Masks your true web browsing targets from your ISP.
- **Use Case**: Bypassing geographical restrictions and filtering.

#### Building a Raspberry Pi VPN Gateway
1. **Register for Hamachi**: Create a free account at [LogMeIn Hamachi](http://is.gd/Njxokw).
2. **Install Hamachi Client**: Download and install the client on your desktop workstation from [LogMeIn](http://is.gd/ruIvfl).
3. **Create a Hamachi Network**:
   - Log in to the Hamachi web portal.
   - Add a new network and configure it.
   - Join the network from your desktop client.
4. **Install Hamachi on Raspberry Pi**:
   - Establish an SSH session to your Pi.
   - Install the required libraries and the Hamachi client.
   - Configure and join the Hamachi network.

#### Commands for Installing Hamachi on Raspberry Pi
```sh
sudo bash
apt-get install -y --fix-missing lsb-core
wget https://secure.logmein.com/labs/logmein-hamachi-2.1.0.101-armel.tgz
tar -zxvf logmein-hamachi-2.1.0.101-armel.tgz
```

By following these steps, you can set up a secure and private internet connection using your Raspberry Pi.