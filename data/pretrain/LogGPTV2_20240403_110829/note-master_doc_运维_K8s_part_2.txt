  name: cron-job
spec:
  schedule: "0,15,30,45 * * * *"
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app: batch-job
        spec:
          restartPolicy: OnFailure
          containers:
          - name: main
            image: luksa/batch-job
```
## 服务
是一种为一组功能相同的 pod 提供单一不变的接入点的资源
![屏幕截图 2020-09-10 190129](/assets/屏幕截图%202020-09-10%20190129.png)
- 创建
```yml
apiVersion: v1
kind: Service
metadata:
  name: kubia
spec:
  ports:
  - port: 80
    targetPort: 8080
  selector:
    app: kubia
```
### 服务间的发现
- 通过环境变量
```sh
kubectl exec kubia-9knkg -- env
```
- 通过DNS
域名：kubia.default.svc.cluster.local
如果在同一命名空间下 直接使用 kubia即可
### Endpoint
暴露一个服务的 IP 地址和端口的列表
```sh
kubectl get endpoints kubia
```
### 暴露服务给外部
- NodePort：每个集群节点都会在节点上打开一个端口 将在该端口上接收到的流量重定向到基础服务
```java
apiVersion: v1
kind: Service
metadata:
  name: kubia-nodeport
spec:
  type: NodePort
  ports:
  - port: 80
    targetPort: 8080
    nodePort: 30123
  selector:
    app: kubia
```
通过nodeip:30123 访问
- 负载均衡器将流量重定向到跨所有节点的节点端口。客户端通过负载均衡器的 IP 连接到服务
```yml
apiVersion: v1
kind: Service
metadata:
  name: kubia-loadbalancer
spec:
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 8080
  selector:
    app: kubia
```
通过externalip:一个随机端口访问
- Ingress 只需要 一 个公网 IP 就能为许多服务提供访问
启用：
```sh
minikube addons enable ingress
```
### 就绪探针
- 创建
```yaml
# kubia-rc.yaml
    spec:
      containers:
      - name: kubia
        image: luksa/kubia
        readinessProbe:
          exec:
            command:
            - ls
            - /var/ready # 该文件存在 容器才被认为就绪
```
### 服务故障排除
- 确保从集群内连接到服务的集群IP
- 服务的集群IP 是虚拟IP, 是无法ping通的
- 如果已经定义了就绪探针， 请确保 它返回成功；否则该pod不会成为服务的一部分
- 确认某个容器是服务的 一 部分
- 检查是否连接到服务公开的端口，而不是目标端口
- 尝试直接连接到podIP以确认pod正在接收正确端口上的 连接
- 法通过pod的IP 访问应用， 请确保应用不是仅绑定 到本地主机
## 卷
卷是 pod 的 一 个组成部分， 因此像容器 一 样在 pod 的规范中定义
![屏幕截图 2020-09-12 112125](/assets/屏幕截图%202020-09-12%20112125.png)
![屏幕截图 2020-09-12 112142](/assets/屏幕截图%202020-09-12%20112142.png)
### 在容器之间共享数据
emptyDir：pod被删除时 卷的内容就会丢失
- 创建
```yml
apiVersion: v1
kind: Pod
metadata:
  name: fortune
spec:
  containers:
  - image: luksa/fortune
    name: html-genrator
    volumeMounts:
    - name: html
      mountPath: /var/htdocs
  - image: nginx:alpine
    name: web-server
    volumeMounts:
    - name: html # 使用html卷
      mountPath: /usr/share/nginx/html # 挂载到容器的位置
      readOnly: true
    ports:
    - containerPort: 80
      protocol: TCP
  volumes: # 创建一个卷
  - name: html
    emptyDir: {}
```
gitRepo：以git仓库文件填充目录文件
```yml
apiVersion: v1
kind: Pod
metadata:
  name: gitrepo-volume-pod
spec:
  containers:
  - image: nginx:alpine
    name: web-server
    volumeMounts:
    - name: html
      mountPath: /usr/share/nginx/html
      readOnly: true
    ports:
    - containerPort: 80
      protocol: TCP
  volumes:
  - name: html
    gitRepo:
      repository: https://github.com/luksa/kubia-website-example.git
      revision: master
      directory: .
```
### 访问工作节点文件
hostPath 卷指向节点文件系统上的特定文件或目录
### 持久化存储
- gce持久盘
- aws弹性块存储
- nfs卷
### 持久卷
![屏幕截图 2020-09-12 140458](/assets/屏幕截图%202020-09-12%20140458.png)
![屏幕截图 2020-09-12 144057](/assets/屏幕截图%202020-09-12%20144057.png)
- 创建持久卷
```yml
apiVersion: v1
kind: PersistentVolume
metadata:
  name: mongodb-pv
spec:
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
    - ReadOnlyMany
  persistentVolumeReclaimPolicy: Retain
  hostPath:
    path: /tmp/mongodb
```
- 创建持久卷声明
```yml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongodb-pvc
spec:
  resources:
    requests:
      storage: 1Gi
  accessModes:
  - ReadWriteOnce
  storageClassName: "" # 动态持久卷
```
- 容器使用持久卷
```yml
# ...
  volumes:
  - name: mongodb-data
    persistentVolumeClaim:
      claimName: mongodb-pvc
```
### 动态持久卷
- 创建StorageClass
```yml
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: fast
provisioner: k8s.io/minikube-hostpath
parameters:
  type: pd-ssd
```
声明是通过名称引用它的 方便之处主要是在不同集群之间移植
![屏幕截图 2020-09-12 150052](/assets/屏幕截图%202020-09-12%20150052.png)
## 参数配置
通过定义传递参数：
```yml
  - image: luksa/fortune:args
    args: ["2"]
```
使用环境变量：
```yml
- image: luksa/fortune:env
  env:
  - name: INTERVAL
    value: "30"
```
### ConfigMap
类似于配置中心：
![屏幕截图 2020-09-13 142528](/assets/屏幕截图%202020-09-13%20142528.png)
- 创建
```sh
kubectl create configmap fortunes-config --from-literal=sleep-interval=25
```
- 单个环境变量使用
```yml
  - image: luksa/fortune:env
    env:
    - name: INTERVAL
      valueFrom:
        configMapKeyRef:
          name: fortunes-config
          key: sleep-interval
```
- 一次传递所有环境变量
```yml
  - image: luksa/fortune:env
    env:
    envFrom:
    - prefix: CONFIG_
    configMapRef:
      name: fortunes-config
    args: ["${CONFIG_xxx}"] # 传递到命令行
```
- 挂载到卷
```yml
volumes:
- name: config
  configMap:
    name: configmap
```
- 更新配置
```sh
kubectl edit configmap xxx
```
### Secret
存储与分发敏感信息
- 创建
```sh
 kubectl create secret generic fortune-https --from-file=https.key
```
- 挂载卷使用
```yml
- image: xxx
  volumeMounts:
  - name: keys
    mountPath: /etc/nginx/keys/
volumes:
- name: keys
  secret:
    secretName: fortune-https
```
- 环境变量使用
```yml
env:
- name: FOO_SECRET
  valueFrom:
    secretKeyRef:
      name: fortune-https
      key: name
```
## pod 元数据访问
### Downward API
![屏幕截图 2020-09-13 152325](/assets/屏幕截图%202020-09-13%20152325.png)
通过环境变量：
```yml
env:
- name: POD IP
  valueFrom:
    fieldRef:
      fieldPath: status.podIP
- name: CONTAINER CPU REQUEST MILLICORES
  valueFrom:
    resourceFieldRef:
      resource: requests.cpu
      divisor: lm
```
通过卷：
```yml
volumes:
- name: downward
  downwardAPI:
    items:
    - path: "podName"
      fieldRef:
        fieldPath: metadata.name
```
![屏幕截图 2020-09-13 153906](/assets/屏幕截图%202020-09-13%20153906.png)
### 使用 K8S API 服务器
REST API：
- 启动kubectl proxy
```sh
curl http://localhost:8001/apis/batch/v1/jobs
```
在 pod 内部使用
客户端API
## Deployment
更新应用：
- 删除旧版本pod 启动新版本pod
  - 会造成短暂的服务不可用