1080
1100
1100
Time
Time
DBL , speedup =1.1, bursty traffic, load=0.9, mean dwell time=10 
DBL , speedup =1.1, bursty traffic, load=0.9, mean dwell time=10 
6
6
5
5
4
4
3
3
2
2
1
1
l
l
e
e
v
v
e
e
L
L
e
e
u
u
e
e
u
u
Q
Q
n
n
o
o
i
i
t
t
c
c
a
a
r
r
F
F
s
s
s
s
i
i
M
M
0
0
1000
1000
0.8
0.8
0.6
0.6
0.4
0.4
0.2
0.2
0
0
1000
1000
1020
1020
1040
1040
1060
1060
1080
1080
1100
1100
Fig. 5. Time series showing performance of DBL for bursty traffic. 
Time
Time
after the departure phase. This is sufficient to establish that OLA 
is work-conserving when S  ≥ 2. 
Lemma 6. For any OLA scheduler with S  ≥ 2, if c is a cell at an 
input before the start of the departure phase, then slack(c) ≥ T. 
The proof of Lemma 6 is just like the proof of Lemma 4, ex-
cept that it uses Lemma 5, in place of Lemma 3. Lemma 6 leads 
immediately to the work-conservation theorem for OLA. 
Theorem 3. For S ≥2, any OLA scheduler is work-conserving. 
4.2 Implementing OLA 
An OLA scheduler can be implemented exactly either using linear 
programming or by solving a minimum cost, maximum flow prob-
lem with a convex cost function. We outline the latter approach, 
as it serves to motivate more practical, approximate variants. 
In the classical version of the minimum cost, maximum flow 
problem  [1,13],  each  edge  has  an  associated  cost  coefficient, 
n
o
i
t
c
a
r
F
s
s
i
M
1.E+00
1.E-01
1.E-02
1.E-03
1.E-04
1.E-05
DBL , bursty traffic, mean dwell time=0.1 
1.05
1.1
1.15
1.2
speedup =1.25
0.50
0.60
0.80
0.70
Link Load
0.90
1.00
Fig. 6.  Performance of DBL on bursty traffic with varying speed-
ups and subject, target dwell times 
which is multiplied by the flow on the edge to get the edge’s con-
tribution  to  the  overall  cost  of  the  flow.  There  are  several  well-
known  efficient  algorithms  for solving the minimum cost, maxi-
mum flow problem. Interestingly, these algorithms can be general-
ized to handle networks in which the cost is a convex function of 
the flow on the edge, rather than a linear function (x2 is an exam-
ple of a convex function). 
The  OLA  scheduling  algorithm  can  be  reduced  to  solving  a 
minimum cost, maximum flow problem with a convex edge cost 
function.  An  example  of  such  a  reduction  is  shown  in  Fig.  7, 
along  with  a  solution  and  the  corresponding schedule. The flow 
graph is constructed in the same way as was discussed in Section 
2. The only difference is the introduction of non-zero costs on the 
edges from the output vertices to the sink vertex t. The cost of an 
edge from output j to t carrying a flow of magnitude x is defined 
as  C(x)  =  (x  +  B(j))2.  A  minimum  cost,  maximum  flow  for  this 
network corresponds directly to an OLA schedule. The convexity 
of the cost function ensures that the flows on different output to 
sink  edges  result  in  costs that are as nearly equal as the various 
edge capacities allow (if a flow can be shifted from a higher cost 
edge to a lower cost edge, there is a net reduction in cost, because 
the  lower  cost  edge  has  lower  incremental  cost,  per  unit  flow). 
The use of the offset B(j) in the edge cost means that the costs of 
the  flows  on  two  output-to-sink  edges  are  equal  whenever  the 
corresponding  schedules  yield  equal  levels  at  the  output  queue. 
Reference [1] describes an algorithm that finds a minimum cost, 
maximum flow in O((m log K )(m + n log n)) time on an arbitrary 
network with n vertices, m edges and maximum edge capacity K. 
While  this  algorithm  is  not  useful  for  distributed  scheduling  in 
real systems, it can be used in performance studies to establish a 
benchmark for more practical algorithms that seek to approximate 
the behavior of OLA.  
Scheduling Problem 
Scheduling Problem 
Blocking Flow Problem with Min Cost Solution 
Blocking Flow Problem with Min Cost Solution 
capacity,flow,
capacity,flow,
ts
ts
ts
pu
pu
pu
in
in
in
VOQ 
VOQ 
VOQ 
levels
levels
levels
0
0
0
1
1
1
2
2
2
3
3
3
output
output
output
queue
queue
queue
levels
levels
levels
outputs
outputs
outputs
0    1     2     3
0    1     2     3
0    1     2     3
6 0 12 0
6 0 12 0
6 0 12 0
4 5 0 6
4 5 0 6
4 5 0 6
0 6 14 5
0 6 14 5
0 6 14 5
5 0 0 4
5 0 0 4
5 0 0 4
2 0
2 0
2 0
3 5
3 5
3 5
s
s
12,12
12,12
12,12
12,12
12,12
12,12
12,6
12,6
S= 1.5
S= 1.5
S= 1.5
T= 8 
T= 8 
T= 8 
a0
a0
6,6
6,6
12,6
12,6
4,4
4,4
5,5
5,5
6,6
6,6
5,2
5,2
a1
a1
a2
a2
a3
a3
5,2
5,2
4,4
4,4
14,4
14,4
6,3
6,3
b1
b1
b2
b2
b3
b3
b0
b0
cost 
cost 
12,12,
12,12,
196
196
12,11,
12,11,
121
121
12,10,
12,10,
169
169
12,9,
12,9,
196
196
t
t
Scheduling Solution 
Scheduling Solution 
outputs
outputs
outputs
0    1     2     3
0    1     2     3
0    1     2     3
6 0 6 0
6 0 6 0
6 0 6 0
4 5 0 3
4 5 0 3
4 5 0 3
0 6 4 2
0 6 4 2
0 6 4 2
2 0 0 4
2 0 0 4
2 0 0 4
ts
ts
ts
pu
pu
pu
in
in
in
0
0
0