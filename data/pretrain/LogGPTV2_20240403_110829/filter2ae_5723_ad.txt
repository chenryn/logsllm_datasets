        }
        /* Output Whitening */
        c2 = r0;
        c3 = r1;
        r0 = tf_twofish->k[0]^r2;
        r1 = tf_twofish->k[1]^r3;
        r2 = tf_twofish->k[2]^c2;
        r3 = tf_twofish->k[3]^c3;
        for (int i=0;ik[o+8]);
        *f1= (t0 + (2*t1) + tf_twofish->k[o+9]);
    }
    twofish_t* Twofish_generate_ext_k_keys(twofish_t* tf_twofish, subkey_t *tf_subkey,uint32_t p, uint8_t k)
    {
        uint32_t a, b;
        uint8_t x[4], y[4], z[4];
        for(int i=0;ime, k);
            Twofish_mds_mul(y,z);
            a = pack(z);                        /* Convert four bytes z[4] to a word (a). */
            u(x,b);                             /* Convert a word (b) to four bytes x[4]. */
            Twofish_h(x, y, tf_subkey->mo, k);
            Twofish_mds_mul(y,z);        
            b = pack(z);
            b = rol(b,8);
            tf_twofish->k[i] = ((a + b));
            tf_twofish->k[i+1] = rol(((a + (2*b))),9);
        }
        return tf_twofish;
    }
    twofish_t* Twofish_generate_ext_s_keys(twofish_t* tf_twofish, subkey_t *tf_subkey, uint8_t k)
    {
        uint8_t x[4], y[4];
        for(int i=0;is, k);
            /* Special MDS multiplication */
            tf_twofish->s[0][i] = (gf(y[0], mds[0][0],0x169) |(gf(y[1],mds[0][1],0x169)s[1][i] = (gf(y[0], mds[1][0],0x169) |(gf(y[1],mds[1][1],0x169)s[2][i] = (gf(y[0], mds[2][0],0x169) |(gf(y[1],mds[2][1],0x169)s[3][i] = (gf(y[0], mds[3][0],0x169) |(gf(y[1],mds[3][1],0x169)s[0][unpack(x,0)]^tf_twofish->s[1][unpack(x, 1)]^tf_twofish->s[2][unpack(x,2)]^tf_twofish->s[3][unpack(x,3)]);
    }
    void Twofish_h(uint8_t x[],  uint8_t out[], uint8_t s[][4], int stage)
    {
        uint8_t y[4];
        for (int j=0; j 2)
        {
            y[0] = q[1][y[0]] ^ (s[2][0]);
            y[1] = q[1][y[1]] ^ (s[2][1]);
            y[2] = q[0][y[2]] ^ (s[2][2]);
            y[3] = q[0][y[3]] ^ (s[2][3]);
        }
        out[0] = q[1][q[0][ q[0][y[0]] ^ (s[1][0])] ^ (s[0][0])];
        out[1] = q[0][q[0][ q[1][y[1]] ^ (s[1][1])] ^ (s[0][1])];
        out[2] = q[1][q[1][ q[0][y[2]] ^ (s[1][2])] ^ (s[0][2])];
        out[3] = q[0][q[1][ q[1][y[3]] ^ (s[1][3])] ^ (s[0][3])];
    }
    subkey_t* Twofish_generate_subkey(key_t* tf_key)
    {
        int k, r, g;
        subkey_t *tf_subkey = (subkey_t*)malloc(sizeof(subkey_t));
        k = tf_key->len/8;                                  /* k=N/64 */
        for(r=0; rme[r][0] = nxt(tf_key->k, r*8    );
            tf_subkey->me[r][1] = nxt(tf_key->k, r*8 + 1);
            tf_subkey->me[r][2] = nxt(tf_key->k, r*8 + 2);
            tf_subkey->me[r][3] = nxt(tf_key->k, r*8 + 3);
            tf_subkey->mo[r][0] = nxt(tf_key->k, r*8 + 4);
            tf_subkey->mo[r][1] = nxt(tf_key->k, r*8 + 5);
            tf_subkey->mo[r][2] = nxt(tf_key->k, r*8 + 6);
            tf_subkey->mo[r][3] = nxt(tf_key->k, r*8 + 7);
            g=k-r-1;                                        /* Reverse order */
            /* Generate subkeys S using RS matrix */
            tf_subkey->s[g][0] = rsm(r, 0x01, 0xa4, 0x55, 0x87, 0x5a, 0x58, 0xdb, 0x9e);
            tf_subkey->s[g][1] = rsm(r, 0xa4, 0x56, 0x82, 0xf3, 0x1e, 0xc6, 0x68, 0xe5);
            tf_subkey->s[g][2] = rsm(r, 0x02, 0xa1, 0xfc, 0xc1, 0x47, 0xae, 0x3d, 0x19);
            tf_subkey->s[g][3] = rsm(r, 0xa4, 0x55, 0x87, 0x5a, 0x58, 0xdb, 0x9e, 0x03);
        }
        return tf_subkey;
    }
    key_t* expand_key(uint8_t *s, uint32_t len)
    {
        int n;
        /* Pad factor */
        if (lenk = ss;
        tf_key->len=n;
        return tf_key;
    }
    uint8_t gf(uint8_t x, uint8_t y, uint16_t m)
    {
        uint8_t c, p = 0;
        for (int i=0; i>= 1;
        }
        return p;
    }
写一个main函数直接调用即可。
## CTF出题变化分析
TwoFish算法共有三处可发生变化以提高出题难度
  1. rsm函数，0x14d可替换为其他数字
  2. Twofish_generate_ext_s_keys函数中gf的参数0x166可替换
  3. Twofish_mds_mul函数中gf的参数0x166可替换
对于这类分组加密算法，即使插件没有识别，只要看出相关函数结构，就可以很快确定具体算法，找到可能变化的参数，相应修改解密函数即可
附件中附上了题目和idb文件供自行分析