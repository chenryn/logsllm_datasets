# 0x01 溢出攻击事件
2018年4月22日，黑客对BEC智能合约发起攻击，凭空取出
    57,896,044,618,658,100,000,000,000,000,000,000,000,000,000,000,000,000,000,000.792003956564819968
个BEC代币并在市场上进行抛售，BEC随即急剧贬值，价值几乎为0，该市场瞬间土崩瓦解。
2018年4月25日，SMT项目方发现其交易存在异常，黑客利用其函数漏洞创造了
    65,133,050,195,990,400,000,000,000,000,000,000,000,000,000,000,000,000,000,000 + 50,659,039,041,325,800,000,000,000,000,000,000,000,000,000,000,000,000,000,000
的SMT币，火币Pro随即暂停了所有币种的充值提取业务。
2018年12月27日，以太坊智能合约Fountain(FNT)出现整数溢出漏洞，黑客利用其函数漏洞创造了
    2 + 115792089237316195423570985008687907853269984665640564039457584007913129639935
的SMT币
# 0x02 漏洞简介
在编程语言里面，因为算术运算导致的整数溢出漏洞屡见不鲜
  * [C语言的整数溢出机制](https://zhuanlan.zhihu.com/p/28563004)
  * [CVE-2020-16040: Chromium V8引擎整数溢出漏洞分析](https://mp.weixin.qq.com/s/j-WbrCQVb4E2JfY-bDqzJw)
  * [http.sys整数溢出漏洞（MS15-034）验证方法](https://blog.csdn.net/Blue_Starry_sky/article/details/113035140)
在solidity语言中，变量支持的类型从uint8-uint256，int8-int256。每一个整型变量只能存储固定大小数值范围内的数。uint表示无符号数。比如uint8只能储存0->2^8-1范围内的数字。当一个uint8类型的变量值为255时，在进行加一，就会发生进位，导致整体翻转为零。
简单来说，就是Solidity整形变量被赋值高于或者低于可以表示的范围时 值会发生改变 一般会溢出为2的uint类型次方 -1 或者 0
  * 上溢：会溢出为0
  * 下溢：会溢出为2^n-1
根据运算形式又可以分为
  * 加法溢出
  * 乘法溢出
  * 减法溢出
# 0x03 简单演示
## 0x01加法溢出
在本地JavaScript VM 部署之后可以查看max与_overflow的值
如果uint8 类型的变量达到了它的最大值(2^8 - 1)，如果在加上一个大于0的值便会变成0
可以看到max+1=256.超出了uint8能表示的范围，导致发生了加法上溢。
## 0x02乘法溢出
在本地JavaScript VM 部署之后可以查看max与_overflow的值
如果uint8 类型的变量超过了它的最大值(2^8 - 1)，最后它的值就会回绕变成0
可以看到max*2=256.超出了uint8能表示的范围，导致发生了乘法上溢。
## 0x03减法溢出
在本地JavaScript VM 部署之后可以查看min与_overflow的值
如果uint8 类型的变量达到了它的最小值(0)，如果在减去一个大于0的值便会变成2^8-1(uin8类型的最大值)
可以看到min-1=-1.超出了uint8能表示的范围，导致发生了减法下溢。
# 0x04 案例分析
下面将分别从三个案例分别分析加法，乘法，减法的整数溢出
## 0x01 SMT
在etherscan上的地址为：
攻击记录：
存在溢出漏洞的合约代码如下：
    function transferProxy(address _from, address _to, uint256 _value, uint256 _feeSmt,
            uint8 _v,bytes32 _r, bytes32 _s) public transferAllowed(_from) returns (bool){
            if(balances[_from] 
攻击记录：
存在溢出漏洞的合约代码如下：
    function batchTransfer(address[] _receivers, uint256 _value) public whenNotPaused returns (bool) {
        uint cnt = _receivers.length;
        uint256 amount = uint256(cnt) * _value; //溢出点，这里存在整数乘法溢出
        require(cnt > 0 && cnt  0 && balances[msg.sender] >= amount);
        balances[msg.sender] = balances[msg.sender].sub(amount);
        for (uint i = 0; i  2^256 - 1使得 amount置零
  * 使用require语句对地址数组和账户余额进行判断
  * 通过上述判断之后，对地址数组里面的地址转账
分析交易详情
    Function: batchTransfer(address[] _receivers, uint256 _value)
    MethodID: 0x83f12fec
    [0]:  0000000000000000000000000000000000000000000000000000000000000040
    [1]:  8000000000000000000000000000000000000000000000000000000000000000
    [2]:  0000000000000000000000000000000000000000000000000000000000000002
    [3]:  000000000000000000000000b4d30cac5124b46c2df0cf3e3e1be05f42119033
    [4]:  0000000000000000000000000e823ffe018727585eaf5bc769fa80472f76c3d7
这里涉及到区块链的参数编码，可以参考PIKACHU师傅的[文章](https://hitcxy.com/2021/argument-encoding/)
可以看到此时的
    _receivers.length=2
    _value=8000000000000000000000000000000000000000000000000000000000000000
两者相乘得到2^256，超出uint256能储存的范围，产生了上溢，导致amount变成了零，从而绕过了第二个语句对账户余额的判断。
发生的转账
## 0x03 BTCR
在etherscan上的地址为：
存在溢出漏洞的合约代码如下：
    function distributeBTR(address[] addresses) onlyOwner {
        for (uint i = 0; i = a);
        return c;
      }
    }
再次演示，为了方便展示结果，使用uint8
    contract OverFlow {
        using SafeMath for uint8;
        //加法溢出
        function add_overflow() returns (uint8 _overflow) {
            uint8 max =2**8 - 1;
            return max.add(1);
        }
         //乘法溢出
        function mul_overflow() returns (uint8 _underflow) {
            uint8 mul = 2**7;
            return mul.mul(2);
        }
        //减法溢出
        function sub_underflow() returns (uint8 _underflow) {
            uint8 min = 0;
            return min.sub(1);
        }
    }
部署成功后，此时不论调用哪个函数都会报错。
# 0x06 总结
开发智能合约时，如果不严格检查用户的输入的话，会将用户的输入带入执行计算，这就有可能带来安全风险。同时在前面案例分析中，SMT和EBC合约源码中有使用SafeMth，但是在运算忘记添加，导致了漏洞的发生。由于区块链的不可篡改性质，一旦部署上链的合约无法进行漏洞修复。虽然可以通过拉黑ETH地址的方式阻止攻击者提现，但是是在攻击发现后，依旧无法阻止在未发现攻击行为之前攻击者短时间的大额提现。