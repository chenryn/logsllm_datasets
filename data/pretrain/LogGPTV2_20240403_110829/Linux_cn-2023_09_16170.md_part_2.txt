    return 0
}
```
这是一个验证用户输入的特殊函数，它只接受整数并拒绝其他所有类型的输入：
```
proc check_guess {guess num} {
    global STATUS LOW HIGH GUESS
    if { $guess  $HIGH } {
        set STATUS "Huh?"
    } elseif { $guess  $num } {
        set STATUS "Too high!"
        set HIGH $guess
    } else {
        set LOW $guess
        set HIGH $guess
        set STATUS "That's Right!"
        destroy .guess .entry
        bind all  {.quit invoke}
    }
    set GUESS ""
}
```
这是主要的猜数逻辑循环。`global` 语句让我们能够修改在文件开头创建的全局变量（关于此主题后面将会有更多解释）。这个条件判断寻找入力范围在 1 至 100 之外以及已经被用户猜过的值。有效的猜测和随机值进行比较。`LOW` 和 `HIGH` 的猜测会被追踪，作为 UI 中的全局变量进行报告。在每一步，全局 `STATUS` 变量都会被更新，这个状态信息会自动在 UI 中显示。
对于正确的猜测，`destroy` 语句会移除 “Guess” 按钮以及输入窗口，并重新绑定回车键，以激活 “Quit” 按钮。
最后的语句 `set GUESS ""` 用于在下一个猜测之前清空输入窗口。
```
label .inst -text "Enter a number between: "
label .low -textvariable LOW
label .dash -text "-"
label .high -textvariable HIGH
label .status -text "Status:"
label .result -textvariable STATUS
button .guess -text "Guess" -command { check_guess $GUESS $num }
entry .entry -width 3 -relief sunken -bd 2 -textvariable GUESS -validate all \
    -validatecommand { Validate %P }
focus .entry
button .quit -text "Quit" -command { exit }
bind all  {.guess invoke}
```
这是设置用户界面的部分。前六个标签语句在你的 UI 上创建了不同的文本展示元素，`-textvariable` 选项监控给定的变量，并自动更新标签的值，这展示了全局变量 `LOW`、`HIGH`、`STATUS` 的绑定。
`button` 行创建了 “Guess” 和 “Quit” 按钮， `-command` 选项设定了当按钮被按下时要执行的操作。按下 “Guess” 按钮执行了上面的 `check_guess` 函数以检查用户输入的值。
`entry` 部件更有趣。它创建了一个三字符宽的输入框，并将输入绑定到 `GUESS` 全局变量。它还通过 `-validatecommand` 选项设置了验证，阻止输入部件接收除数字以外的任何内容。
`focus` 命令是用户界面的一项改进，使程序启动时输入部件处于激活状态。没有此命令，你需要先点击输入部件才可以输入。
`bind` 命令允许你在按下回车键时自动点击 “Guess” 按钮。如果你记得 `check_guess` 中的内容，猜测正确之后会重新绑定回车键到 “Quit” 按钮。
最后，这部分设定了图形用户界面的布局：
```
grid .inst
grid .low .dash .high
grid .status .result
grid .guess .entry
grid .quit
```
`grid` 几何管理器被逐步调用，以逐渐构建出预期的用户体验。它主要设置了五行部件。前三行是显示不同值的标签，第四行是 “Guess” 按钮和 `entry` 部件，最后是 “Quit” 按钮。
程序到此已经初始化完毕，`wish` shell 进入事件循环，等待用户输入整数并按下按钮。基于其在被监视的全局变量中找到的变化，它会更新标签。
注意，输入光标开始就在输入框中，而且按下回车键将调用适当且可用的按钮。
这只是一个初级的例子，Tcl/Tk 有许多可以让间隔、字体、颜色和其他用户界面方面更具有吸引力的选项，这超出了本文中简单 UI 的示例。
运行这个应用，你可能会注意到这些部件看起来并不很精致或现代。这是因为我正在使用原始的经典部件集，它们让人回忆起 X Windows Motif 的时代。不过，还有一些默认的部件扩展，被称为主题部件，它们可以让你的应用程序有更现代、更精致的外观和感觉。
### 启动游戏！
保存文件之后，在终端中运行它：
```
$ ./numgame.wish
```
在这种情况下，我无法给出控制台的输出，因此这里有一个动画 GIF 来展示如何玩这个游戏：
![用 Wish 编写的猜数游戏](/data/attachment/album/202309/07/231746wrkksrz89c5kxxbg.gif)
### 进一步了解 Tcl
Tcl 支持命名空间的概念，所以在这里使用的变量并不必须是全局的。你可以把绑定的部件变量组织进不同的命名空间。对于像这样的简单程序，可能并不太需要这么做。但对于更大规模的项目，你可能会考虑这种方法。
`proc check_guess` 函数体内有一行 `global` 代码我之前没有解释。在 Tcl 中，所有变量都按值传递，函数体内引用的变量的范围是局部的。在这个情况下，我希望修改的是全局变量，而不是局部范围的版本。Tcl 提供了许多方法来引用变量，在执行堆栈的更高级别执行代码。在一些情况下，像这样的简单引用可能带来一些复杂性和错误，但是调用堆栈的操作非常有力，允许 Tcl 实现那些在其他语言中实现起来可能较为复杂的新的条件和循环结构。
最后，在这篇文章中，我没有提到几何管理器，它们用于以特定的顺序展示部件。只有被某种几何管理器管理的部件才能显示在屏幕上。grid 管理器相当简洁，它按照从左到右的方式放置部件。我使用了五个 grid 定义来创建了五行。另外还有两个几何管理器：place 和 pack。pack 管理器将部件围绕窗口边缘排列，而 place 管理器允许固定部件的位置。除这些几何管理器外，还有一些特殊的部件，如 `canvas` ，`text` 和 `panedwindow`，它们可以容纳并管理其他部件。你可以在经典的 Tcl/Tk 参考指南，以及 [Tk 命令](https://tcl.tk/man/tcl8.7/TkCmd/index.html) 文档页上找到这些部件的全面描述。
### 继续学习编程
Tcl 和 Tk 提供了一个简单有效的方法来构建图形用户界面和事件驱动应用程序。这个简单的猜数游戏只是你能用这些工具做到的事情的起点。通过继续学习和探索 Tcl 和 Tk，你可以打开构建强大且用户友好的应用程序的无数可能性。继续尝试，继续学习，看看你新习得的 Tcl 和 Tk 技能能带你到哪里。
*（题图：MJ/40621c50-6577-4033-9f3c-8013bd0286f1）*
---
via: 
作者：[James Farrell](https://opensource.com/users/jamesf) 选题：[lkxed](https://github.com/lkxed/) 译者：ChatGPT 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出