Web servers supporting export ciphersuites are vulnerable to the
FREAK [17] and Logjam [6] attacks (see §2). Looking at our passive
data, we can conclude that export ciphers are basically not negoti-
ated in the wild: only 677 connections were negotiated with these
ciphers in 2018. However, we cannot infer from this that FREAK
and Logjam attacks were not mounted in practice against clients.
This is because our data gathering is done close to the clients, and
at the clients, the TLS handshakes do not contain export cipher
suites even if they are undergoing a FREAK or Logjam attack.
A closer look at the connections supporting export cipher suites
reveals that the connections either terminated at servers of a uni-
versity using anonymous export cipher suites (the port number
suggests Nagios servers) or are associated with Interwise products
(according to the certificate served), a company providing voice &
videoconferencing services. For the university Nagios connections,
secure cipher suites were offered by the client; the server chose
export ciphersuites. In the case of Interwise, the clients offered a
non-export cipher suite (RC4_128_SHA) and the server chose an
export RC4 cipher suite (EXP_RC4_40_MD5). This deviates from
the TLS protocol specification. Our logs indicate that at least some
of the sessions were successfully established (both sides sent a
Change Cipher Spec). We are unsure about what exactly is behind
this unexpected behavior, but this again deviates from normal TLS
negotiation.
Figure 7 shows that client support for export ciphers has de-
creased significantly over the last few years. In 2012 (more than
10 years after the restrictions were lifted) it still was advertised in
28.19% of connections (2018: 1.03%). The steady downward trend
can be attributed to a growing awareness of the dangers of support-
ing weak cipher suites, as exemplified by FREAK and Logjam.
5.6 Sweet32, DES and 3DES
Sweet32 is a birthday attack against 64-bit block ciphers such as
DES and 3DES [18] (see §2). Looking at our passive data, in 2018
0.3% of connections negotiated a 3DES cipher suite. By comparison,
in 2012 (June-August) 1.4% of connections negotiated 3DES. Gener-
ally, usage always has been relatively low with the highest peaks
reaching 5%.
On the other hand, Figure 3 shows that almost all clients adver-
tised 3DES up to the end of 2016, a few months after the disclosure
of the attack. The figure today still stands at more than 69%. Fig-
ure 4 backs this up, showing that even today more than 70% of
fingerprinted clients offer 3DES. Table 5 shows how 3DES support
has changed in popular browsers; notably, all major browsers still
support 3DES. We find this set of findings remarkable given the
poor performance of the algorithm (OpenSSL’s inbuilt speed test
shows it to be 10 times slower than AES-128, even without hard-
ware support), its extreme age (it was developed in the 1970s), and
the wide availability of more secure, faster options. However, it
is perhaps justifiable to keep 3DES as a “cipher of last resort” for
clients connecting to out-dated servers. In connection with this,
active scan data from Censys indicates that the popularity of the
only 3DES cipher offered by the scan has reduced over time, with
the percentage of the servers choosing it (despite its placement at
the bottom of the list and much stronger cipher suites being offered)
dropping to 0.25% in May 2018 from 0.54% in August 2015. This
suggests a long tail on the server side, but one large enough for
clients to justify their continuing to offer 3DES. Censys scans do
not offer any DES cipher suites.
6 NOTABLE ECOSYSTEM FINDINGS
In this section we look at other characteristics of the TLS ecosystem
that do not directly have to do with attacks. We discuss the use of
weak as well as strong ciphers and examine how TLS 1.3 is already
being used.
6.1 NULL Cipher Suites
NULL ciphers provide integrity but no confidentiality—data is sent
in the clear and can be read by any observer. Figure 7 reveals that a
relatively large number of connections and software offer at least
one NULL cipher in the handshake. For most of these connections
and fingerprints we could not find any matching software: these
connections do not originate from any Browser known to us, nor
any known library in its default configuration. However, we do
identify two Android applications, Craftar Image Recognition, and
Lookout Personal that advertise support for them. The latter is an
identify theft protection application.
Our hypothesis concerning the source of these connections is
supported when we look in detail at connections that are actually
05101520253035402012−01−012012−04−012012−07−012012−10−012013−01−012013−04−012013−07−012013−10−012014−01−012014−04−012014−07−012014−10−012015−01−012015−04−012015−07−012015−10−012016−01−012016−04−012016−07−012016−10−012017−01−012017−04−012017−07−012017−10−012018−01−012018−04−01Percent monthly connectionsExportAnonymousNullComing of Age: A Longitudinal Study of TLS Deployment
IMC ’18, October 31-November 2, 2018, Boston, MA, USA
established using NULL ciphers. Examining our dataset reveals that
connections where the server chooses a NULL cipher are rare; over
all of our dataset 2.84% of connections were established using a
NULL cipher. We examined all connections using a NULL cipher in
2018 (42.3M connections or 0.42% of connections). Nearly all these
connections (99.99%) were identifiable as GRID traffic that is used
for data transfers between scientific institutions, where TLS is only
used for mutual authentication of client and server.
While using NULL ciphers in GRID computing environment
might make sense, it is alarming that a not insignificant number
of the client fingerprints we see (8% of fingerprints and 0.46% of
connections in 2018) offer a NULL cipher. If an attacker were able
to perform a downgrade attack they might be able to force an
unencrypted connection for such connections.
Figure 8: Negotiated RSA and forward secret connections.
Dotted line shows the date of first Snowden revelations.
server’s private key after observing the handshake. If an attacker
recorded complete TLS sessions, then a later compromise of the
server’s private key would compromise all sessions. Forward se-
crecy (FS) decouples the symmetric record protocol keys from the
long-lived server key. In TLS this is achieved by performing a DHE
or an ECDHE key exchange.
Figure 8 shows the number of connections that we see using
RSA, DHE and ECDHE key exchanges. It shows that there has been
a significant shift in the last few years away from RSA-based key
establishment; now the vast majority of connections use ECDHE;
meanwhile DHE never found much use.
This result is especially interesting when also examining client
support for FS cipher suites: even at the beginning of our measure-
ment period in 2012 more than 80% of clients supported FS cipher
suites, and this quickly increased to nearly 100%. Thus servers chose
to not negotiate FS cipher suites for a long time even when clients
supported them. We find this interesting because making the switch
does not require issuing new RSA keys and certificates to the server.
Moreover, ECDHE exchanges are in general faster to perform for
servers than RSA-based ones, so there is a performance incentive
to switch.
The Snowden revelations in June 2013 raised awareness of the
public of the importance of forward secrecy [15]. Figure 8 shows
that the Snowden revelations coincide with the start of a significant
shift to use of FS cipher suites. While it looks like there was already a
small shift towards FS cipher suites before, there was a tremendous
shift immediately after these revelations. This correlation in time
does not necessarily mean causality.
TLS also supports static DH and ECDH key exchanges that are
not forward secret. We also see some use of these: DH is used in
0.00% of connections (2018: 4 total), ECDH in 0.27% (2018: 20.2K
total). DH connections in 2018 terminate at two now unreachable
servers; ECDH nearly exclusively at Splunk servers on port 9997.
6.3.2 Authenticated Encryption with Associated Data. Authenti-
cated Encryption with Associated Data or AEAD provides mes-
sage integrity in addition to message confidentiality in a single
cryptographic transform. In TLS, AEAD is supported starting with
TLS 1.2, for example with AES in Galois Counter Mode (AES-GCM).
Happily, because of widespread support at the CPU instruction
There is also the NULL_WITH_NULL_NULL cipher suite offer-
ing neither integrity nor confidentiality. Since 2012 we have seen
a total of 198.3K connections using this cipher suite, with 198 in
2018. They terminate at the Nagios servers mentioned in §5.5.
6.2 Anonymous cipher suites
Anonymous cipher suites provide record layer protection (integrity
and confidentiality) but the key establishment process is not au-
thenticated. There are 19 such cipher suites, all identifiable by the
keyword “Anon” in their name. Typically, a Diffie-Hellman key
exchange is used to establish a symmetric cipher but the server
does not present a certificate. Figure 7 shows the percentage of
connections and unique TLS fingerprints that advertise anonymous
cipher suites. As in the case of NULL ciphers, while there is a signif-
icant number of fingerprints that include anonymous cipher suites,
as well as a few percent of connections that advertise them, we
could not determine the vast majority of applications responsible
for this. However, among those that we can identify we find a
security scanner (i.e., Shodan) and Android security applications
(i.e., Lookout Personal, Kaspersky). Once again we assume the main
reason might be poorly written client applications. We do not have
an explanation for the spike in clients offering such cipher suites in
mid-2015, where the figure jumped from 5.8% to 12.9% in the space
of two months. This spike correlates in time with a spike in NULL
cipher suites being offered.
Similarly to the case of NULL ciphers, only a minuscule number
of connections successfully negotiate the use of an anonymous
cipher suite: 0.17% of connections in the whole dataset and 0.60%
in 2018. Examining the successful connections reveals that nearly
all of them are caused by Nagios. Nagios uses anonymous cipher
suites in combination with its own authentication scheme that is
performed after the TLS connection is established.
The fact that so many clients offer anonymous cipher suites is
alarming. This is because client/server combinations offering/accepting
such cipher suites are trivially vulnerable to MITM attack, even if
the client also offers non-anonymous cipher suites in preference to
the anonymous ones in the Client Hello.
6.3 Strong Cipher Suites
Forward secrecy. In TLS handshakes that use RSA key trans-
6.3.1
port to establish keying material, the symmetric keys used in the
record protocol can be recovered by anyone in possession of the
01020304050607080902012−01−012012−04−012012−07−012012−10−012013−01−012013−04−012013−07−012013−10−012014−01−012014−04−012014−07−012014−10−012015−01−012015−04−012015−07−012015−10−012016−01−012016−04−012016−07−012016−10−012017−01−012017−04−012017−07−012017−10−012018−01−012018−04−01Percent monthly connectionsTypeDHEECDHERSAIMC ’18, October 31-November 2, 2018, Boston, MA, USA
Kotzias et al.
Figure 9 shows the number of connections negotiated with
AEAD and Figure 10 shows the percentage of connections that
advertise such ciphers. We see a sharp up-tick in the use of AEAD
from late 2013 onwards. This is time at which significant client
support for TLS 1.2 became available. Table 6 provides a timeline
of protocol support for the major browsers. While many clients
now offer ChaCha20-Poly1305, it is clear that the vast majority of
AEAD use today is of AES-GCM, with 128-bit keys dominating
256-bit keys. We saw ChaCha20-Poly1305 being used in 1.7% of
connections in March 2018, and we see little AES-CCM traffic—it
was offered in 0.3% connections across our dataset.
6.3.3 Elliptic Curve Cryptography. As shown in Figure 8, connec-
tions using Elliptic Curve Cryptography are becoming more and
more common. During the duration of our measurement, the top 5
used curves are secp256r1 (84.4%), secp384r1 (8.6%), curve 25519
(6.7%), sect571r1 (0.2%), and secp521r1 (0.1%). Curve 25519 is seen as
being independent of NSA influence and has become more popular
over time, especially since mid-2017. It is currently the second most
used curve and was used in 22.2% of connections in February 2018.
6.4 TLS 1.3
The standardization process for TLS 1.3 started in 2014 [39] and
reached its final stages in the IETF process. The latest, and possibly
final, draft is draft 28 [72].
TLS 1.3 represents the most radical change to the TLS ecosys-
tem since the switch from SSL 2 to SSL 3. It touches all parts of
the protocol. The TLS 1.3 handshake is quite distinct from earlier
releases, and much more of it is encrypted (including certificates).
TLS 1.3 significantly reduces the number of cipher suites from the
several hundred permitted in earlier releases to just 5. In particular,
CBC-mode and RC4 cipher suites from earlier TLS versions are no
longer permitted.
TLS 1.3 is of special interest to us since it shows how the ecosys-
tem has changed over the past years. While it took TLS 1.2 six years
after standardization to be used in more than 50% of connections,
we already see significant uptake of TLS 1.3 today, before the RFC
is completely ratified.
In April 2018, in 23.6% of the observed connections, the clients
indicated that they support TLS 1.3. This is a marked increase
from earlier months (9.8% in March and 0.5% in February). This
is probably caused by TLS 1.3 being enabled by new versions of
Chrome and Firefox for a subset of users [21]. In fact, TLS 1.3
support has been gradually rolled out by Firefox and Chrome. TLS
1.3 was added to Firefox 52.0 (released in March 2017) but it was
disabled by default [64]. It was not until version 60.0, recently
released in May 2018, when Firefox uses TLS 1.3 by default [65]. In
the case of Chrome, TLS 1.3 was temporally enabled by default in
2017 after the release of Chrome 56 but it was removed [25].
The number of negotiated sessions is still much lower—only
1.3% of observed connections successfully negotiated it in April
2018. This is not surprising since supporting TLS 1.3 at the moment
usually requires compiling new versions of libraries & custom setup
procedures.
The TLS 1.3 version negotiation mechanism is different from
earlier versions: the Client Hello still lists 1.2 as the offered version;
however, there is a new extension that contains a list of all TLS
Figure 9: Percentage of connections that use AES-
GCM(128/256), ChaCha20-Poly1305,
and number of
connections using any AEAD cipher.
Figure 10: Connections advertising AES-GCM ChaCha20-
Poly1305, and AES-CCM.
Browser
Firefox
Chrome
Internet Explorer
Opera
Safari
Ver.
27
37
60
22
29
39
11
16
27
7
9
Date
Protocol Support
04/02/2014 TLS 1.1/1.2 supported
31/03/2015