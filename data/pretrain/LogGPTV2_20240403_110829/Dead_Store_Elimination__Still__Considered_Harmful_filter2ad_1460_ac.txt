putation” performs several unnecessary obfuscating in-
structions in order to trick the compiler. Its poor per-
formance reﬂects the numerous developers reports com-
plaining about its slow speed, for example Tor Ticket
#7419 titled “Choose a faster memwipe implementa-
tion” [2].
Additionally, implementations which align the block
pointer see improved efﬁciency. Libc’s memset is able
to perform movdqa instructions after it dqword-aligns its
pointer. “custom assembly” improves from 23 to 24 byte
block sizes because above that threshold it qword-aligns
its pointer in order to perform movq instructions.
Furthermore, at some point (≥ 29 bytes for Clang; ≥
214 bytes for GCC) the built-in memset defers to using
libc’s memset, hence it is identical to “volatile function
pointer” given large block sizes.
Small block sizes. At small block sizes, performance is
dominated by whether or not loop unrolling occurred.
The scrubbing routine is given the block size at compile-
time, so it is able to optimize accordingly. Thus, for
“plain memset”, move instructions are unrolled for sizes
≤ 28 bytes on Clang and sizes ≤ 25 bytes on GCC. Ad-
ditionally, for the “volatile data pointer” technique, un-
rolling occurs for sizes ≤ 26 bytes on Clang and sizes
≤ 22 bytes on GCC. Note that the performance of imple-
mentations’ unrolled loops are different because differ-
ent types of move instructions may be unrolled (such as
a movb versus a movq).
The large magnitude of spikes in the graph can be at-
tributed to the superscalar nature of the CPU it is run on,
which essentially gives it those instructions for free for
small block sizes. Both Clang and GCC-compiled “plain
memset” code see a major performance drop between
32- and 64-byte block sizes. Although for GCC, this is
the point at which unrolling no longer occurs—it is not
so for Clang, whose dropoff is less severe. We suspect
this is due to L1 caching of smaller size blocks. (The L1
cache line size is 64 bytes on our architecture.)
GCC’s builtin. Upon ﬁrst examining our results, we
were surprised to ﬁnd that the GCC-compiled “plain
memset” with -fno-builtin-memset did as well as
“plain memset” with the built-in intrinsic memset.
After examining the produced assembly code, we
found that the scrubbing function was not calling the
libc memset function as expected (and the Clang-
compiled version was). As a result, we found that
string.h (where memset is declared) changes its be-
1032    26th USENIX Security Symposium
USENIX Association
plain memsetplain memset with -fno-builtin-memsetvolatile fxn ptrcustom assemblyvolatile data ptrcomplicated computation2223242526272829210211212213214Block size (bytes)2-22-120212223242526272829210Bytes written per cycleClang 3.92223242526272829210211212213214Block size (bytes)2-22-120212223242526272829210Bytes written per cycleGCC 6.2havior based on the value of the _FORTIFY_SOURCE
macro, as described in Section 3.2. Thus, even with
the -fno-builtin-memset option, GCC generated its
built-in memset. Under normal circumstances, such code
would be subject to dead-store elimination, causing the
scrubbing operation to be removed.
4.3 Discussion
Our performance measurements found that techniques
vary drastically in performance. This may make some
techniques preferable to others.
5 Case Studies
To understand the use of memory scrubbing in practice,
we examined the eleven popular security libraries and ap-
plications listed in Table 1. Our choices were guided by
whether or not the code handled sensitive data (e.g. se-
cret keys), availability of the source code and our own
judgement of the project’s relevance. For each project,
we set out to determine whether a memory scrubbing
function is available, effective, and used consistently by
the projects’ developers. We used the latest stable version
of each project as of October 9, 2016.
Availability. To determine whether a scrubbing function
is available, we manually examined the program source
code. All eleven projects used one or more of the tech-
niques described in Section 3 to clear sensitive data, and
seven of them relied on a combination of at least two
techniques.
If a project relied on more than one technique, it
automatically chose and used the ﬁrst technique avail-
able on the platform in order of preference speciﬁed
by the developer. Columns under the Preference head-
ing in Table 1 show the developer preference order
for each technique, with 1 being highest priority (ﬁrst
chosen if available). The scrubbing techniques listed
under the Preference heading are: Win is Windows’
SecureZeroMemory, BSD is BSD’s explicit_bzero,
C11 is C11’s memset_s, Asm. is a custom assembly im-
plementation, Barrier is the memory barrier technique,
VDP is the volatile data pointer technique, VFP is the
volatile function pointer technique, Comp. is the com-
plicated computation technique, WL is the weak linkage
technique, and memset is a call to plain memset. If a
project used a function that can be one of many tech-
niques depending on the version of that function—for ex-
ample, projects that use OpenSSL’s OPENSSL_cleanse,
which may either be VFP or Comp. depending on if
OpenSSL version ≥1.0.2 or <1.0.2 is used—the newer
version is given a higher preference. An ∗ indicates an
incorrectly implemented technique.
For example, Tor uses Windows’ SecureZeroMemory
if
for projects that
if
available, and so on. Generally,
explicit_bzero
then BSDs’
available,
used them, all chose a platform-supplied function
(SecureZeroMemory, explicit_bzero, or memset_s)
ﬁrst before falling back to other techniques. The most
popular of the do-it-yourself approaches are the volatile
data pointer (VDP) and volatile function pointer (VFP)
techniques, with the latter being more popular with
projects that attempt to use a platform-provided function
ﬁrst.
Effectiveness. To answer the second question—whether
the scrubbing function is effective—we relied on the
manual analysis in Section 3. If a project used an un-
reliable or ineffective scrubbing technique in at least one
possible conﬁguration, we considered its scrubbing func-
If it was effective but not used consistently, we scored it
Score column. If the scrubbing function was effective
tion ineffective, and scored it ﬂawed, denoted (cid:35) in the
and used consistently, we scored it effective, denoted (cid:32).
inconsistent, denoted(cid:71)(cid:35).
Consistency. To determine whether a function was used
consistently, we instrumented the Clang 3.9 compiler to
report instances of dead store elimination where a write
is eliminated because the memory location is not used
afterwards. We did not report writes that were eliminated
because they were followed by another write to the same
memory location, because in this case, the data would
be cleared by the second write. Additionally, if sensitive
data is small enough to be ﬁt into registers, it may be
promoted to a register, which will lead to the removal
of the scrubbing store 1. Since the scrubbing store is not
removed in the dead store elimination pass, our tool does
not report it. We would argue such removals have less
impact on security since the sensitive data is in a register.
However, if that register spilled when the sensitive data
in it, it may still leave some sensitive data in memory.
Appendix A.1 provides additional details of our tool. We
compiled each project using this compiler with the same
optimization options as in the default build of the project.
Then we examined the report generated by our tool and
manually identiﬁed cases of dead store elimination that
removed scrubbing operations.
Of the eleven projects we examined, all of them sup-
ported Clang. We note, however, that our goal in this part
of our analysis is to identify sites where a compiler could
eliminate a scrubbing operation, and thus identify sites
where sensitive variables were not being cleared as in-
tended by the developer. We then examined each case to
determine whether the memory contained sensitive data,
and whether dead store elimination took place because
a project’s own scrubbing function was not used or be-
cause the function was ineffective. If cases of the latter,
1For example, at the end of OpenSSH’s SHA1Transform function,
“a=b=c=d=e=0;” is used to scrub sensitive data. Because all the ﬁve
variables are in virtual registers in the IR form, no store is eliminated
in the DSE pass.
USENIX Association
26th USENIX Security Symposium    1033
Score
memset
Removed ops.
Sensitive
Heap
3
2
9
0
10
0
0
4
0
0
0
9
8
2
0
10
2
1
0
0
0
0
Stack
12
6
0
0
1
2
1
0
0
0
0
H/S
0
0
1
0
0
0
0
0
0
0
0
Total
Project
15
NSS
8
OpenVPN
Kerberos
10
Libsodium 0
Tarsnap
11
2
Libgcrypt
1
Crypto++
4
Tor
Bitcoin
0
0
OpenSSH
OpenSSL
0
Preference
Barrier
VDP
-
-
-
5
1
1
2
-
-
-
-
-
-
2*
-
-
-
-
-
-
-
-
Asm.
-
-
-
-
-
-
1
4
1
-
1
VFP
-
-
-
-
-
-
-
5
2
3
2
Comp.
-
-
-
-
-
-
-
6
3
-
3
W L
-
-
-
4
-
-
-
-
-
-
-
Win
-
-
1
1
-
-
-
1
-
-
-
BSD
-
-
-
3
-
-
-
2
-
1
-
C11
-
-
-
2
-
-
-
3
-
2
-
1
1
3
-
-
-
-
-
-
-
-
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:71)(cid:35)
(cid:71)(cid:35)
(cid:71)(cid:35)
(cid:71)(cid:35)
(cid:32)
(cid:32)
(cid:32)
Table 1: Summary of open source projects’ removed scrubbing operations and the scrubbing techniques they use.
Removed ops. columns show the total number of removed scrubs, the number of removed scrubs dealing with sensitive
data, and the locations of memory that failed to be scrubbed. Preference columns show the developer preference order
for each technique, with 1 being highest priority (ﬁrst chosen if available). The ∗ in the row for Kerberos indicates that
its barrier technique was not implemented correctly; see Section 3.4.3 for discussion. A project’s Score shows whether
its scrubbing implementation is ﬂawed ((cid:35)), inconsistent ((cid:71)(cid:35)), or effective ((cid:32)).
we determined why the function was not effective; these
ﬁndings are reﬂected in the results reported in Section 3.
Columns under the heading Removed ops. in Table 1
show the number of cases where a scrubbing operation
was removed. The Total column shows the total num-
ber of sites where an operation was removed. The Sensi-
tive column shows the number of such operations where
we considered the data to be indeed sensitive. (In some
cases, the scrubbing function was used to clear data that
we did not consider sensitive, such as pointer addresses.)
The Heap, Stack, and H/S columns indicate whether or
not the cleared memory was allocated on the heap, on
the stack stack, or potentially on either heap or stack.
Of the eleven projects examined, four had an effec-
tive scrubbing function but did not use it consistently,