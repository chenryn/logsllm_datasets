5.5.2 P6处理器的性能监视机制
与奔腾处理器的性能监视机制相比，P6 处理器的性能监视机制可
以大体概括如下。
第一，仍然实现了两个40位的性能计数器PerfCtl0和PerfCtl1。
第二，增加了RDPMC指令用于读取性能计数器的值。因为性能计
数器是MSR，所以可以通过RDMSR指令来读取，但是RDMSR指令只能
在内核模式（或实模式）下执行。而RDPMC指令可以在任何特权级别
下执行，因此有了RDPMC指令后就可以在用户模式下读取性能计数器
了。其使用方法是将计数器号（0和1）放入ECX寄存器中，然后执行
RDPMC指令，其结果会被放入EDX:EAX对（EAX中包含低32位，EDX
中包含高8位）中。
第三，使用两个32位的MSR（PerfEvtSel0和PerfEvtSel1），分别控
制计数器PerfCtl0和PerfCtl1。不再像奔腾处理器那样使用一个CESR寄
存器的高16位和低16位来分别控制两个计数器。可以用RDMSR和
WRMSR指令来访问PerfEvtSel0和PerfEvtSel1寄存器（在内核模式或实
模式下）。它们的地址分别是186H和187H。
PerfEvtSel寄存器的位布局如图5-11所示。
图5-11 P6处理器的PerfEvtSel寄存器
其各个位域的含义如下。
8位的事件选择域ES（Event Select）：用来选择要监视的事件类
型。具体类型定义参见IA手册中。
8位的单元掩码域UMASK（Unit Mask）：进一步定义ES域中指定
的要监视事件。可以理解为ES域中指定的要监视事件的更详细的条
件和参数。
1位的用户模式域USR（User Mode）：指定当处理器处于特权级
1、2或3（即用户模式下）时是否计数。
1位的系统模式域OS（Operating System Mode）：指定当处理器处
于特权级0（即内核模式下）时是否计数。
1位的边缘检测域E（Edge Detect）：用来记录被监视事件（其他域
指定）从deasserted到asserted的状态过渡次数。
1位的管脚控制域PC（Pin Control）：其含义与奔腾处理器相同，
参见上文。
1位的中断使能域INT（APIC Interrupt Enable）：用于控制当相应
计数器溢出时是否让本地的APIC（Advanced Programmable
Interrupt Controller，即集成在CPU内部的可编程中断控制期）产生
一个中断。事先应该设置好APIC的局部向量表（Local Vector
Table，LVT）、中断服务例程及IDT。
1位的计数器使能域EN（Enable Counters）：当设为1时，启动两个
计数器；当为0时，禁止两个计数器。该位仅在PerfEvtSel0中实
现。
8位的计数器掩码域CMASK（Counter Mask）：用作计数器的计数
条件阈值，当事件数与这个阈值比较满足条件时才改变计数器的
值。下面的INV位用来指定比较方法。
1位的取反域INV（Invert）：该位为1时，当事件数量少于CMASK
中的值时才将事件计入计数器中。如果该位为0，那么当事件数量
大于等于CMASK中的值时，才将事件计入计数器中。
5.5.3 P4处理器的性能监视
与P6系列和奔腾处理器相比，P4处理器对性能监视支持做了非常大
的改进和增强。尽管选择和过滤事件类型以及通过WRMSR、RDMSR
或RDPMC指令来访问有关寄存器的一般方法没有变，但是MSR寄存器
的布局和设置机制都有了很大的变化。具体变化如下。
第一，性能计数器的数量由2个增加至18个（每个仍然是40位
的），RDPMC指令也做了增强，可以以更快的速度读取这些寄存器；
CR4寄存器增加了PCE位，允许操作系统限制在用户模式下执行RDPMC
指令。
18个性能计数器被分为9对，又进一步划分为以下4组。
（1）BPU（Branch Prediction Unit）组包含2个计数器对。
MSR_BPU_COUNTER0（编号0）和MSR_BPU_COUNTER1（编号
1）。
MSR_BPU_COUNTER2（编号2）和MSR_BPU_COUNTER3（编号
3）。
（2）MS（Microcode Store）组包含2个计数器对。
MSR_MS_COUNTER0（编号4）和MSR_MS_COUNTER1（编号
5）。
MSR_MS_COUNTER2（编号6）和MSR_MS_COUNTER3（编号
7）。
（3）FLAME组包含2个计数器对。
MSR_FLAME_COUNTER0（编号8）和
MSR_FLAME_COUNTER1（编号9）。
MSR_FLAME_COUNTER2（编号10）和
MSR_FLAME_COUNTER3（编号11）。
（4）IQ（Instruction Queue）组包含3个计数器对。
MSR_IQ_COUNTER0（编号12）和MSR_IQ_COUNTER1（编号
13）。
MSR_IQ_COUNTER2（编号14）和MSR_IQ_COUNTER3（编号
15）。
MSR_IQ_COUNTER4（编号16）和MSR_IQ_COUNTER5（编号
17）。
如果希望记录更大的范围，那么可以将一个计数器与本组内不属于
同一对的其他计数器进行级联（counter cascading）。
第二，事件选择控制寄存器（ESCR）的数量也大幅增加，多达43
～45个（与处理器的详细型号有关），用于选择和过滤要监视的事件，
以及控制特定的计数器。一个计数器最多可以与8个ESCR之一相关联。
一个ESCR也可能被用于多个计数器。ESCR的布局如图5-12所示。
图5-12 P4处理器的ESCR
位25～30用来选择要监视的事件大类（event class）；位9～24用来
选择事件大类中的具体事件；位5～8可以指定一个与微指令相关联的标
记（tag）值，用来辅助对回收期事件计数；位4用于启用或禁止微指令
标记（tagging）功能；位3（OS）和位2（USR）与以前的含义相同。
第三，新增18个计数器配置控制寄存器（Counter Configuration
Control Register，CCCR），它们与18个计数器一一对应，用于设置计
数的方式和参数。CCCR的布局如图5-13所示。
位12（enable）用来启动对应的计数器。位13～15（选择ESCR）用
来指定与对应计数器相关联的ESCR，即间接选择要监视的事件。位
18（启用比较）用来启动位19～24所定义的事件过滤。位19（补码）为
1时，当事件数小于等于阈值时递增计数器；位19为0时，当事件数大于
阈值时递增计数器；位20～23指定用于比较的阈值，具体值与被监视的
事件类型有关。位24（沿检测）用于启用或禁止上升沿（false-to-true）
检测。位25（FORCE_OVF）为1时，计数器每次递增都会强制计数器
溢出，位25为0时且仅当计数器真正溢出时才发生溢出；位
26（OVF_PMI）为1时，每当计数器溢出都会产生PMI中断；位30（级
联标志）用于启用和禁止计数器级联；位31（OVF标志）为1时表示对
应计数器已经溢出，此标志位不会自动清除（必须由软件显式清除）。
图5-13 CCCR寄存器
第四，将事件分为如下两种类型：回收阶段事件（at-retirement
event）和非回收阶段事件（non-retirement event）。前者是指发生在指
令执行的回收阶段（retirement stage）的事件；后者是指发生在指令执
行过程中任何时间的事件，如总线事务等。针对回收期事件的计数仅记
录与分支预测正确的路径上的微操作有关的事件。针对非回收期事件的
计数会记录指定类型的所有事件，即使该事件属于预测错误的分支（不
会进入回收期）。
第五，将采样（sampling）计数器的方式（也就是使用计数器的模
式）归纳为如下3种。
定期读取（event counting）：在计数器计数期间，软件以一定的间
隔读取计数器的值。
计数器溢出时产生中断：当计数器溢出时，产生性能监视中断
（Performance Monitoring Interrupt，PMI）。中断处理程序记录下
返回指令指针（Return Instruction Pointer，RIP，也就是被中断程序
的指令地址），复位计数器，然后重新开始计数。IA手册将此方式
称为基于事件的非精确采样（non-precise event-based sampling）。
通过分析RIP的分布，可以分析代码的执行情况以供性能优化使
用。英特尔的VTune工具可以将RIP分布等信息以图形的方式显示
出来。
计数器溢出时自动保存状态：当计数器溢出时，自动将通用寄存
器、EFlags寄存器和EIP寄存器的值保存到调试存储区。此方式即
我们上一节介绍的基于事件的精确采样技术（Precise Event-Based
Sampling，PEBS）。该技术不仅对目标程序代码影响较小，保存
的状态信息也很丰富，因此对软件性能优化非常有用。但是该技术
仅适用于一部分回收期事件（Execution_event、Front_end_event和
Replay_event），不能用于非回收期事件。
第六，IA32_MISC_ENABLE寄存器中增加了两个位域用于检测处
理器对性能监视的支持能力（位7和位12）。
IA手册卷3第19章列出了奔腾4处理器支持的所有非回收期事件以及
每个事件的参数设置信息。下面简要介绍如何开始对非回收期事件进行
计数。具体步骤如下。
① 选择要监视的事件。
② 根据IA手册卷3第19章中的指导信息为每个要监视的事件选取一
个支持该事件的ESCR。
③ 选取一个与所选的ESCR相关联的CCCR和计数器（CCCR和计数
器是一一对应的），并从IA手册查找到选取的计数器、ESCR、CCCR
的地址。
④ 使用WRMSR指令设置ESCR，指定要监视的事件和要计数的特
权级别。
⑤ 使用WRMSR指令设置CCCR，指定ESCR和事件过滤选项。
⑥ [可选]设置计数器级联选项。
⑦ [可选]设置CCCR以便当计数器溢出时产生性能监控中断
（PMI）。如果启用PMI，那么必须设置本地APIC、IDT及相应的中断
处理例程。
⑧ 使用WRMSR指令置起CCCR的启用标志（Enable），开始事件
计数。如果要停止计数，则将该标志清零。
下面再来看看启动PEBS的过程。
① 建立DS内存区，详见上一节。
② 通过设置IA32_PEBS_ENABLE MSR的Enable PEBS（位24）启
用PEBS。
③ 设置中断和中断处理例程。PEBS可以与分支监视和
NPEBS（non-precise event-based sampling）共享一个中断和中断处理例
程。
④ 设置MSR_IQ_COUNTER4计数器和相关联的CCCR，以及一个
或多个ESCR（指定要监视的事件）。只能使用MSR_IQ_COUNTER4计
数器进行PEBS采样。
完成以上设置后，CPU便会使用MSR_IQ_COUNTER4计数器对
ESCR指定的事件进行计数，当计数器溢出时，CPU便会自动将当时的
寄存器内容以PEBS记录的形式写到DS内存区的PEBS缓冲区中。当
PEBS缓冲区已满（或满足DS管理区中定义的中断条件）时，CPU便会
产生性能监视中断（PMI），并转去执行对应的中断处理例程（称为DS
ISR）。DS ISR应该将DS内存区中的信息转存到文件中，并清空已满的
缓冲区、复位计数器值，然后返回。
5.5.4 架构性的性能监视机制
于2006年推出的Core Duo和Core Solo处理器将CPU内的性能监视设
施分为两类：一类是架构性的（architectural），另一类是非架构性的
（non-architectural）。所谓架构性的，就是说这部分机制会成为IA架构
中的标准部分，会被以后的IA处理器所兼容。非架构性的仍然与处理器
相关。
Core Duo和Core Solo中引入的架构性性能监视设施主要如下。
（1）有限数量的事件选择寄存器，名称为IA32_PERFEVTSELx，
第一个的地址为0x186，其他寄存器的地址是连续的。
（2）有限数量的事件计数寄存器，名称为IA32_PMCx，第一个的
地址为0xC1，其他寄存器的地址是连续的。
（3）用于检查性能监视机制支持情况的检测机制，即CPUID指令
的0xA号分支（leaf），简称CPUID.0AH。
执行本书示例代码中的CpuID小程序，便可以检测当前CPU的性能
监视机制支持情况。比如，以下是在作者写作本内容时使用的Kaby
Lake处理器上的执行结果：
Input=0xa:0x0, EAX=0x7300404, EBX=0x0, ECX=0x0, EDX=0x603
在返回的信息中，EAX的第一个字节04代表的是版本号（Version
ID），这与IA手册上所描述的Skylake和Kaby Lake微架构支持版本4刚
好一致（卷三18.2节）；第二个字节是每个逻辑CPU配备的通用性能监
视计数器的个数；第三个字节是通用性能监视计数器的位宽，0x30代表
48位。EDX寄存器的位0～4（3）代表固定功能的性能计数器的数量，
位5～12（0x30）代表固定功能性能计数器的位宽。更多详细描述请参
见IA手册卷2中关于CPUID指令的介绍。
IA32_PERFEVTSELx寄存器的位布局如图5-14所示。
图5-14 IA32_PERFEVTSELx寄存器
显而易见，其布局和位定义与P6处理器的PerfEvtSel寄存器（见图
5-11）是完全一样的，其含义也基本相同，在此不再赘述。
在写作本书第2版时，IA手册上共定义了4个版本的架构性的性能监
视机制。支持较高版本的处理器一定支持所有低版本的功能。
5.5.5 酷睿微架构处理器的性能监视机制
酷睿（Core）微架构的IA处理器（例如Core 2 Duo和Core 2 Quad