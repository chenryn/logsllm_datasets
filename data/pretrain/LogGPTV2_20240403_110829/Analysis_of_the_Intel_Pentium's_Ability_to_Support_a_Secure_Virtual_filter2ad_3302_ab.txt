sitive registers and/or memory locations such as a clock
register and interrupt registers.
Requirement 3C Instructions that reference the stor-
age protection system, memory system, or address re-
location system. This class includes instructions that
would allow the VM to access any location not in its
virtual memory.
Requirement 3D All I/O instructions.
2.4 Type II VMM
A Type II VMM runs as an application on a host oper-
ating system and relies on the host OS for memory man-
agement, processor scheduling, resource allocation, and
hardware drivers. It provides only virtualization support
services. To support a Type II virtual machine a pro-
cessor must meet all of the hardware requirements for
the Type I VMM listed above. In addition, the following
software requirements must be met by the host operating
system of the Type II VMM:
Weaker Requirement 3A The host OS cannot do any-
thing to invalidate the requirement that the method of
executing non-privileged instructions must be roughly
equivalent in both privileged and user mode.
Requirement 2 Primitives must be available in the
host OS to protect the VMM and other VMs from the
active virtual machine. Examples include a protection
primitive, address translation primitive, or a sub-process
primitive.
When the virtual machine traps because it has at-
tempted to execute a sensitive instruction, the host OS
must direct the signal to the VMM. Therefore, the host
OS needs a primitive to perform this action. The host
OS also needs a mechanism to allow a VMM to run the
virtual machine as a sub-process. The VMM must be
able to simulate sensitive instructions.
A highly secure Type II VMM will require a highly
secure host OS because it will depend upon the host OS.
Flaws in the host OS would undermine the security of
the Type II VMM.
2.5 Hybrid VMM
Often, if a processor does not meet the Type I or Type
II VMM requirements, it can still implement a hybrid
virtual machine monitor (HVM). A hybrid VMM has all
of the advantages of normal VMMs and avoids the per-
formance penalties of a CSIM. It is functionally equiva-
lent to the real machine. However, an HVM and a VMM
differ in that an HVM interprets every privileged instruc-
tion in software, whereas a VMM may directly execute
some privileged instructions. An HVM treats the privi-
leged mode of hardware as a pure software construct. In
both a VMM and an HVM, all non-privileged instruc-
tions execute directly on the processor.
An HVM has less strict hardware requirements than
a VMM in tow ways. First, the HVM does not have to
directly execute non-sensitive privileged instructions be-
cause they are all emulated in software. Second, because
of the emulation, the HVM need not provide additional
mapping of the the most privileged processor mode into
another processor privilege level. However, increased
interpretative execution usually lowers the performance
of an HVM relative to a VMM.
The hardware requirements for an HVM result in the
following changes to the original Type I VMM require-
ments. First, Requirement 1, which states that the
method of executing non-privileged instructions must be
roughly equivalent in both privileged and user mode,
is eliminated. Second, Requirement 3A, which states
that if an instruction attempts to change or reference the
mode of the VM or the state of the machine, there must
be a way to simulate the instruction, is weakened.
3 Pentium Architecture and VMMs
Goldberg [12] identiﬁed the key architectural features
of third generation hardware pertinent to virtual ma-
chines:
(cid:15) two processor modes of operation,
(cid:15) a method for non-privileged programs to call privi-
leged system routines,
(cid:15) a memory relocation or protection mechanism such
as segmentation or paging, and
(cid:15) asynchronous interrupts to allow the I/O system to
communicate with the CPU.
All of these still apply to the Intel Pentium architecture.
It has four modes of operation, known as rings, or cur-
rent privilege level (CPL), 0 through 3. Ring 0, the most
privileged, is occupied by operating systems. Applica-
tion programs execute in Ring 3, the least privileged.
The Pentium also has a method to control transfer of
program execution between privilege levels so that non-
privileged tasks can call privileged system routines: the
call gate. The Pentium also uses both paging and seg-
mentation to implement its protection mechanisms. Fi-
nally, the Pentium uses both interrupts and exceptions to
allow the I/O system to communicate with the CPU. The
architecture has 16 predeﬁned interrupts and exceptions
and 224 user-deﬁned, or maskable, interrupts.
Despite these features, the ability of the Pentium archi-
tecture to support virtualization is likely to be serendipi-
tous as the processor was not explicitly designed to sup-
port virtualization. This section reports an analysis of
the virtualizability of the Pentium against the hardware
requirements described in Section 2. Every documented
instruction for the Intel Pentium 2 was analyzed for its
ability to support virtualization [30].
Any instruction in the processor’s instruction set that
violates rule 1, 2, 3 (3A, 3B, 3C, or 3D) will preclude
the processor from running a Type I or Type II VMM.
Additionally, any instruction that violates rule 2, 3A in
its weaker form, 3B, 3C, or 3D prevents the processor
from running an HVM. By combining these two state-
ments, one can see that any instruction that violates rule
2, 3A in its weaker form, 3B, 3C, or 3D makes the pro-
cessor non-virtualizable.
With respect to the VMM hardware requirements listed
above, Intel meets all three of the main requirements for
virtualization.
Requirement 1:
The method of executing non-
privileged instructions must be roughly equivalent in
Intel meets this re-
both privileged and user mode.
quirement because the method for executing privileged
and non-privileged instructions is the same. The only
difference between the two types of instructions in the
Intel architecture is that privileged instructions cause a
general protection exception if the CPL is not equal to 0.
Requirement 2:There must be a method such as a pro-
tection system or an address translation system to pro-
tect the real system and any other VMs from the active
VM. Intel uses both segmentation and paging to imple-
ment its protection mechanism. Segmentation provides
a mechanism to divide the linear address space into indi-
vidually protected address spaces (segments). Segments
2The analysis was based on available documentation as of 22 June
1999 and involved approximately 250 instructions.
have a descriptor privilege level (DPL) ranging from
0 to 3 that speciﬁes the privilege level of the segment.
The DPL is used to control access to the segment. Us-
ing DPLs, the processor can enforce boundaries between
segments to control whether one program can read from
or write into another program’s segments.
Requirement 3:There must be a way to automatically
signal the VMM when a VM attempts to execute a sen-
sitive instruction. It must also be possible for the VMM
to simulate the effect of the instruction. The Intel ar-
chitecture uses interrupts and traps to redirect program
execution and allow interrupt and exception handlers to
execute when a privileged instruction is executed by an
unprivileged task. However, the Pentium instruction set
contains sensitive, unprivileged instructions. The pro-
cessor will execute unprivileged, sensitive instructions
without generating an interrupt or exception. Thus, a
VMM will never have the opportunity to simulate the
effect of the instruction.
After examining each member of the Pentium instruc-
tion set, it was found that seventeen instructions violate
Requirement 3. All seventeen instructions violate either
part B or part C of Requirement 3 and make the Intel
processor non-virtualizable. To construct a truly virtu-
alizable Pentium chip one must focus on these instruc-
tions. They are discussed in more detail below.
3.1 Sensitive Register Instructions
Several Intel instructions break hardware virtualization
Requirement 3B. The rule states that instructions are
sensitive if they read or change sensitive registers and/or
memory locations such as a clock register and interrupt
registers.
3.1.1 SGDT, SIDT, and SLDT Instructions
The SGDT, SIDT, and SLDT instructions violate this
rule in a similar way. In protected mode, all memory
accesses pass through either the global descriptor table
(GDT) or local descriptor table (LDT). The GDT and
LDT contain segment descriptors that provide the base
address, access rights, type, length, and usage informa-
tion for each segment. The interrupt descriptor table
(IDT) is similar to the GDT and LDT, but it holds gate
descriptors that provide access to interrupt and exception
handlers. The GDTR, LDTR, and IDTR all contain the
linear addresses and sizes of their respective tables.
All three of these instructions (SGDT, SIDT, SLDT)
store a special register value into some location. The
SGDT instruction stores the contents of the GDTR in a
6-byte memory location. The SLDT instruction stores
the segment selector from the LDTR in a 16 or 32-bit
general-purpose register or memory location. The SIDT
Table 1: Important CR0 Machine Status Word Bits
Flag Name
PE - Protection Enable
Bit
0
1 MP - Monitor Coprocessor Controls the interaction of the WAIT or FWAIT instruction with the TS
Description
Enable Protected Mode when set and real mode when clear
2
3
4
5
EM - Emulation
TS - Task Switched
ET - Extension Type
NE - Numeric Error
ﬂag.
If clear, processor has an internal or external ﬂoating point unit
Allows delayed saving of the ﬂoating point unit context on a task switch
until the unit is accessed by the new task.
For 386 and 468 processors, indicates whether an Intel 387 DX math co-
processor is present (hard-coded to 1 on >Pentium processors).
Enables internal or PC-style mechanism for FPU error reporting.
instruction stores the contents of the IDTR in a 6-byte
memory location. These instructions are normally only
used by operating systems but are not privileged in the
Intel architecture. Since the Intel processor only has one
LDTR, IDTR, and GDTR, a problem arises when multi-
ple operating systems try to use the same registers. Al-
though these instructions do not protect the sensitive reg-
isters from reading by unprivileged software, the proces-
sor allows partial protection for these registers by only
allowing tasks at CPL 0 to load the registers. This means
that if a VM tries to write to one of these registers, a trap
will be generated. The trap allows a VMM to produce
the expected result for the VM. However, if an OS in a
VM uses SGDT, SLDT, or SIDT to reference the con-
tents of the IDTR, LDTR, or GDTR, the register con-
tents that are applicable to the host OS or Type I VMM
will be given. This could cause a problem if an operating
system of a virtual machine (VMOS) tries to use these
values for its own operations: it might see the state of a
different VMOS executing within a VM running on the
same VMM. Therefore, a Type I VMM or Type II VMM
must provide each VM with its own virtual set of IDTR,
LDTR, and GDTR registers.
3.1.2 SMSW Instruction
The SMSW instruction stores the machine status word
(bits 0 through 15 of control register 0) into a general-
purpose register or memory location. Bits 6 through 15
of CR0 are reserved bits that are not supposed to be mod-
iﬁed. Bits 0 through 5, however, contain system ﬂags
that control the operating mode and state of the proces-
sor and are described in Table 1.
Although this instruction only stores the machine sta-
tus word, it is sensitive and unprivileged. Consider the
following scenario: A VMOS is running in real mode
within the virtual environment created by a VMM run-
ning in protected mode. If the VMOS checked the MSW
to see if it was in real mode, it would incorrectly see
that the PE bit is set. This means that the machine is in
protected mode. If the VMOS halts or shuts down if in
protected mode, it will not be able to run successfully.
This instruction is only provided for backwards com-
patibility with the Intel 286 processor [16]. Programs
written for the Intel 386 processor and later are sup-
posed to use the MOV instruction to load and store con-
trol registers, which are privileged instructions. There-
fore, SMSW could be removed and only systems requir-
ing backward compatibility with the Intel 286 processor
would be affected. Application software written for the
Intel 286 and 8086 processors should be unaffected be-
cause the SMSW instruction is a system instruction that
should not be used by application software.
3.1.3 PUSHF and POPF Instructions
The PUSHF and POPF instructions reverse each
other’s operation. The PUSHF instruction pushes the
lower 16 bits of the EFLAGS register onto the stack and
decrements the stack pointer by 2. The POPF instruction
pops a word from the top of the stack, increments the
stack pointer by 2, and stores the value in the lower 16
bits of the EFLAGS register. The PUSHFD and POPFD
instructions are the 32-bit counter-parts of the POPF and
PUSHF instructions. Pushing the EFLAGS register onto
the stack allows the contents of the EFLAGS register to
be examined. Much like the lower 16 bits of the CR0
register, the EFLAGS register contains ﬂags that control
the operating mode and state of the processor. There-
fore, the PUSHF/PUSHFD instructions prevent the Intel
processor from being virtualizable in the same way that
the SMSW instruction prevents virtualization. In virtual-
8086 mode, the IOPL must equal 3 to use the PUSHF
instructions. Of the 32 ﬂags in the EFLAGS register,
fourteen are reserved and six are arithmetic ﬂags. Table
2 describes the bits of concern.
The POPF instruction allows values in the EFLAGS
register to be changed. Its varies based on the proces-
sor’s current operating mode. In real-mode, or when op-
erating at CPL 0, all non-reserved ﬂags in the EFLAGS
Table 2: Important EFLAGS Register Bits
Bit
8
9
10
12-13
14
16
17
18
19
20
21
Flag Name
TF - Trap
IF - Interrupt Enable
DF - Direction
IOPL - I/O Privilege Level
NT - Nested Task
RF - Resume
VM - Virtual-8086 Mode
AC - Alignment Check
VIF - Virtual Interrupt
VIP - Virtual Interrupt Pending
ID - Identiﬁcation
Description
Set to enable single-step mode for debugging.
Controls processor response to maskable interrupt requests.
If set, string instructions process addresses from high to low.
I/O privilege level of the currently running task.
Set when the current task is linked to the previous task.
Controls processor response to debug exceptions.
Enables Virtual-8086 mode when set.
Enables alignment checking of memory references.
Virtual image of the IF ﬂag.
Indicates whether or not an interrupt is pending.
If a program can set or clear this instruction, the CPUID instruc-
tion is supported.
register can be modiﬁed except the VM, VIP, and VIF