21.3.1 启动任务
要启动任务，可以使用TaskFactory类或Task类的构造函数和Start（）方法。Task类的
构造函数在创建任务上提供的灵活性较大。
TaskSamples的示例代码使用如下依赖项和名称空间：
依赖项：
    NETStandard.Library
    System.Threading.Thread
名称空间：
    System.Threading
    System.Threading.Tasks
    static System.Console
在启动任务时，会创建Task类的一个实例，利用Action或Action委托（不带参
数或带一个object参数），可以指定将运行的代码。下面定义的方法TaskMethod带一个参
数。在实现代码中，调用Log方法，把任务的ID和线程的ID写入控制台中，并且如果线程
来自一个线程池，或者线程是一个后台线程，也要写入相关信息。把多条消息写入控制台
的操作是使用lock关键字和s_logLock同步对象进行同步的。这样，就可以并行调用Log，
而且多次写入控制台的操作也不会彼此交叉。否则，title可能由一个任务写入，而线程信
息由另一个任务写入（代码文件TaskSamples/Program.cs）：
    public static void TaskMethod(object o)
    {
      Log(o? .ToString());
    }
    private static object s_logLock = new object();
    public static void Log(string title)
    {
      lock (s_logLock)
      {
        WriteLine(title);
        WriteLine($"Task id: {Task.CurrentId? .ToString() ? ? "no task"}, " +
          $"thread: {Thread.CurrentThread.ManagedThreadId}");
    #if (! DNXCORE)
        WriteLine($"is pooled thread: {Thread.CurrentThread.IsThreadPoolThread}")
;
    #endif
        WriteLine($"is background thread: {Thread.CurrentThread.IsBackground}");
        WriteLine();
      }
    }
  注意： 线程API IsThreadPoolThread不可用于.NET Core 1.0运行库；这就是为
什么使用预处理器指令的原因。
接下来的几小节描述了启动新任务的不同方法。
1．使用线程池的任务
在本节中，可以看到启动使用了线程池中线程的任务的不同方式。线程池提供了一个
后台线程的池。现在，只需要知道线程池独自管理线程，根据需要增加或减少线程池中的
线程数。线程池中的线程用于实现一些操作，之后仍然返回线程池中。
创建任务的第一种方式是使用实例化的TaskFactory类，在其中把TaskMethod方法传
递给StartNew方法，就会立即启动任务。第二种方式是使用Task类的静态属性Factory来访
问TaskFactory，以及调用StartNew（）方法。它与第一种方式很类似，也使用了工厂，但
是对工厂创建的控制则没有那么全面。第三种方式是使用Task类的构造函数。实例化Task
对象时，任务不会立即运行，而是指定Created状态。接着调用Task类的Start（）方法，来
启动任务。第四种方式调用Task类的Run方法，立即启动任务。Run方法没有可以传递
Action委托的重载版本，但是通过传递Action类型的lambda表达式并在其实现中使
用参数，可以模拟这种行为（代码文件TaskSamples/Program.cs）。
    public void TasksUsingThreadPool()
    {
      var tf = new TaskFactory();
      Task t1 = tf.StartNew(TaskMethod, "using a task factory");
      Task t2 = Task.Factory.StartNew(TaskMethod, "factory via a task");
      var t3 = new Task(TaskMethod, "using a task constructor and Start");
      t3.Start();
      Task t4 = Task.Run(() => TaskMethod("using the Run method"));
    }
这些版本返回的输出如下所示。它们都创建一个新任务，并使用线程池中的一个线
程：
    factory via a task
    Task id: 5, thread: 6
    is pooled thread: True
    is background thread: True
    using the Run method
    Task id: 6, thread: 7
    is pooled thread: True
    is background thread: True
    using a task factory
    Task id: 7, thread: 5
    is pooled thread: True
    is background thread: True
    using a task constructor and Start
    Task id: 8, thread: 8
    is pooled thread: True
    is background thread: True
使用Task构造函数和TaskFactory的StartNew（）方法时，可以传递
TaskCreationOptions枚举中的值。利用这个创建选项，可以改变任务的行为，如接下来的
小节所示。
2．同步任务
任务不一定要使用线程池中的线程，也可以使用其他线程。任务也可以同步运行，以
相同的线程作为主调线程。下面的代码段使用了Task类的RunSynchronously（）方法（代
码文件TaskSamples/Program.cs）：
    private static void RunSynchronousTask()
    {
      TaskMethod("just the main thread");
      var t1 = new Task(TaskMethod, "run sync");
      t1.RunSynchronously();
    }
这里，TaskMethod（）方法首先在主线程上直接调用，然后在新创建的Task上调用。
从如下所示的控制台输出可以看到，主线程没有任务ID，也不是线程池中的线程。调用
RunSynchronously（）方法时，会使用相同的线程作为主调线程，但是如果以前没有创建
任务，就会创建一个任务：
    just the main thread
    Task id: no task, thread: 1
    is pooled thread: False
    is background thread: True
    run sync
    Task id: 5, thread: 1
    is pooled thread: False
    is background thread: True
 注意： 
如果不使用.NET 
Core运行库，线程就是一个前台线程。这是新
旧.NET运行库之间的一个有趣的差异。在旧的运行库中，主线程是前台线程；在新的
运行库中，它是一个后台线程。
3．使用单独线程的任务
如果任务的代码将长时间运行，就应该使用TaskCreationOptions.LongRunning告诉任
务调度器创建一个新线程，而不是使用线程池中的线程。此时，线程可以不由线程池管
理。当线程来自线程池时，任务调度器可以决定等待已经运行的任务完成，然后使用这个
线程，而不是在线程池中创建一个新线程。对于长时间运行的线程，任务调度器会立即知
道等待它们完成没有意义。下面的代码片段创建了一个长时间运行的任务（代码文件
TaskSamples/Program.cs）：
    private static void LongRunningTask()
    {
      var t1 = new Task(TaskMethod, "long running",
        TaskCreationOptions.LongRunning);
      t1.Start();
    }
实际上，使用TaskCreationOptions.LongRunning选项时，不会使用线程池中的线程，
而是会创建一个新线程：
    long running
    Task id: 5, thread: 7
    is pooled thread: False
    IS background thread: True
21.3.2 Future——任务的结果
当任务结束时，它可以把一些有用的状态信息写到共享对象中。这个共享对象必须是
线程安全的。另一个选项是使用返回某个结果的任务。这种任务也称为future，因为它在
将来返回一个结果。早期版本的Task Parallel Library（TPL）的类名也称为Future，现在它
是Task类的一个泛型版本。使用这个类时，可以定义任务返回的结果的类型。
由任务调用来返回结果的方法可以声明为任何返回类型。下面的示例方法
TaskWithResult（）利用一个元组返回两个int值。该方法的输入可以是void或object类型，
如下所示（代码文件TaskSamples/Program.cs）：
    public static Tuple TaskWithResult(object division)
    {
      Tuple div = (Tuple)division;
      int result = div.Item1 / div.Item2;
      int reminder = div.Item1 % div.Item2;
      WriteLine("task creates a result...");
      return Tuple.Create(result, reminder);
    }
  注意： 元组允许把多个值组合为一个，参见第7章。
当定义一个调用TaskWithResult（）方法的任务时，要使用泛型类Task。泛
型参数定义了返回类型。通过构造函数，把这个方法传递给Func委托，第二个参数定义了
输入值。因为这个任务在object参数中需要两个输入值，所以还创建了一个元组。接着启
动该任务。Task实例t1块的Result属性被禁用，并一直等到该任务完成。任务完成后，
Result属性包含任务的结果。
    public static void TaskWithResultDemo()
    {
      var t1 = new Task>(TaskWithResult, Tuple.Create(8, 3));
      t1.Start();
      WriteLine(t1.Result
);
      t1.Wait();
      WriteLine($"result from task: {t1.Result.Item1} {t1.Result.Item2}");
    }
21.3.3 连续的任务
通过任务，可以指定在任务完成后，应开始运行另一个特定任务，例如，一个使用前
一个任务的结果的新任务，如果前一个任务失败了，这个任务就应执行一些清理工作。
任务处理程序或者不带参数，或者带一个对象参数，而连续处理程序有一个Task类型
的参数，这里可以访问起始任务的相关信息（代码文件TaskSamples/Program.cs）：
    private static void DoOnFirst()
    {
      WriteLine($"doing some task {Task.CurrentId}");
      Task.Delay(3000).Wait();
    }
    private static void DoOnSecond(Task t)
    {
      WriteLine($"task {t.Id} finished");
      WriteLine($"this task id {Task.CurrentId}");
      WriteLine("do some cleanup");
      Task.Delay(3000).Wait();
    }
连续任务通过在任务上调用ContinueWith（）方法来定义。也可以使用TaskFactory类
来定义。tl.OnContinueWith（DoOnSecond）方法表示，调用DoOnSecond（）方法的新任
务应在任务t1结束时立即启动。在一个任务结束时，可以启动多个任务，连续任务也可以
有另一个连续任务，如下面的例子所示（代码文件TaskSamples/Program.cs）：
    public static void ContinuationTasks()
    {
      Task t1 = new Task(DoOnFirst);
      Task t2 = t1.ContinueWith(DoOnSecond);
      Task t3 = t1.ContinueWith(DoOnSecond);
      Task t4 = t2.ContinueWith(DoOnSecond);
      t1.Start();
    }
无论前一个任务是如何结束的，前面的连续任务总是在前一个任务结束时启动。使用
TaskContinuationOptions枚举中的值可以指定，连续任务只有在起始任务成功（或失败）
结束时启动。一些可能的值是OnlyOnFaulted、NotOnFaulted、OnlyOnCanceled、
NotOnCanceled以及OnlyOnRanToCompletion。
      Task t5 = t1.ContinueWith(DoOnError, TaskContinuationOptions.OnlyOnFaulted)
;
  注意： 使用第15章介绍过的await关键字时，编译器生成的代码会使用连续任
务。
21.3.4 任务层次结构
利用任务连续性，可以在一个任务结束后启动另一个任务。任务也可以构成一个层次
结构。一个任务启动一个新任务时，就启动了一个父/子层次结构。
下面的代码段在父任务内部新建一个任务对象并启动任务。创建子任务的代码与创建
父任务的代码相同，唯一的区别是这个任务从另一个任务内部创建。（代码文件
TaskSamples/Program.cs。）
    public static void ParentAndChild()
    {
      var parent = new Task(ParentTask);
      parent.Start();
      Task.Delay(2000).Wait();
      WriteLine(parent.Status);
      Task.Delay(4000).Wait();
      WriteLine(parent.Status);
    }
    private static void ParentTask()
    {
      WriteLine($"task id {Task.CurrentId}");
      var child = new Task(ChildTask);
      child.Start();
      Task.Delay(1000).Wait();
      WriteLine("parent started child");
    }
    private static void ChildTask()
    {
      WriteLine("child");
      Task.Delay(5000).Wait();
      WriteLine("child finished");
    }
如果父任务在子任务之前结束，父任务的状态就显示为
WaitingForChildrenToComplete。所有的子任务也结束时，父任务的状态就变成
RanToCompletion。当然，如果父任务用TaskCreationOption DetachedFromParent创建一个
任务时，这就无效。
取消父任务，也会取消子任务。接下来就讨论取消架构。
21.3.5 从方法中返回任务
返回任务和结果的方法声明为返回Task，例如，方法返回一个任务和字符串集
合：
    public Task> TaskMethodAsync()
    {
    }
创建访问网络或数据的方法通常是异步的，这样，就可以使用任务特性来处理结果
（例如使用async关键字，参见第15章）。如果有同步路径，或者需要实现一个用同步代
码定义的接口，就不需要为了结果的值创建一个任务。Task类使用方法FromResult（）提
供了创建一个结果与完成的任务，该任务用状态RanToCompletion表示完成：
    return Task.FromResult
>(
        new List() { "one", "two" });
21.3.6 等待任务
也许读者学习过Task类的WhenAll（）和WaitAll（）方法，想知道它们之间的区别。
这两个方法都等待传递给它们的所有任务的完成。WaitAll（）方法（自.NET 
4之后可
用）阻塞调用任务，直到等待的所有任务完成为止。WhenAll（）方法（自.NET 4.5之后
可用）返回一个任务，从而允许使用async关键字等待结果，它不会阻塞等待的任务。
在等待的所有任务都完成后，WhenAll（）和WaitAll（）方法才完成，而使用
WhenAny（）和WaitAny（）方法，可以等待任务列表中的一个任务完成。类似于
WhenAll（）和WaitAll（）方法，WaitAny（）方法会阻塞任务的调用，而WhenAny（）
返回可以等待的任务。
前面几个示例已经使用了Task.Delay（）方法。可以指定从这个方法返回的任务完成
前要等待的毫秒数。
如果将释放CPU，从而允许其他任务运行，就可以调用Task.Yield（）方法。该方法
释放CPU，让其他任务运行。如果没有其他的任务等待运行，调用Task.Yield的任务就立
即继续执行。否则，需要等到再次调度CPU，以调用任务。
21.4 取消架构
.NET 4.5包含一个取消架构，允许以标准方式取消长时间运行的任务。每个阻塞调用
都应支持这种机制。当然目前，并不是所有阻塞调用都实现了这个新技术，但越来越多的
阻塞调用都支持它。已经提供了这种机制的技术有任务、并发集合类、并行LINQ和几种
同步机制。
取消架构基于协作行为，它不是强制的。长时间运行的任务会检查它是否被取消，并
相应地返回控制权。
支持取消的方法接受一个CancellationToken参数。这个类定义了
IsCancellationRequested属性，其中长时间运行的操作可以检查它是否应终止。长时间运行
的操作检查取消的其他方式有：取消标记时，使用标记的WaitHandle属性，或者使用
Register（）方法。Register（）方法接受Action和ICancelableOperation类型的参数。Action
委托引用的方法在取消标记时调用。这类似于ICancelableOperation，其中实现这个接口的
对象的Cancel（）方法在执行取消操作时调用。
CancellationSamples的示例代码使用如下依赖项和名称空间：
依赖项：
    NETStandard.Library
    System.Threading.Tasks.Parallel
名称空间：
    System
    System.Threading
    System.Threading.Tasks
    static System.Console
21.4.1 Parallel.For（）方法的取消
本节以一个使用Parallel.For（）方法的简单例子开始。Parallel类提供了For（）方法
的重载版本，在重载版本中，可以传递ParallelOptions类型的参数。使用ParallelOptions类
型，可以传递一个CancellationToken参数。CancellationToken参数通过创建
CancellationTokenSource来生成。由于CancellationTokenSource实现了ICancelableOperation
接口，因此可以用CancellationToken注册，并允许使用Cancel（）方法取消操作。本例没