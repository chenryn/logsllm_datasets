the path in between the beacon initiator A(cid:96) and Ai. The hop
validation ﬁelds (HVFs) Vi are cryptographic tags that are
ﬁlled in by the source host and allow intermediate routers to
validate the packet. An additional destination validation ﬁeld
VSD allows the destination to validate the path of the packet.
The deﬁnitions of Si, Vi, and VSD will be presented in §4.
The term hop ﬁeld refers to a triple consisting of hop in-
formation HIi, segment identiﬁer Si, and HVF Vi. We deﬁne
the packet origin as the triple of source, path timestamp, and
Table 1: Summary of abbreviations and notation.
Ai AS corresponding to the ith hop on the path; HS
Ci
HS, HD
HIi
Ki
KS
i
KSD
and HD are located in A1 and A(cid:96), respectively
cryptographic result used for authenticating and
updating the ith hop ﬁelds
source and destination hosts of a packet
ith hop information consisting of tsexp, ingress in-
terface, and egress interface
secret symmetric key of Ai
host key shared between Ai, A1, and HS, which can
be efﬁciently calculated by Ai
key shared between A1, HS, A(cid:96), and HD
(cid:96) AS-level path length
length in bytes of Vi, Si
lval, lseg
block size in bytes of PRF(·) and MAC(·)
lPRF
MACK(·) message authentication code using key K
P, p = |P|
PRFK(·)
S(l)
i
packet payload and payload size
PO packet origin consisting of SRC, TSpath, and tspkt
pseudorandom function using key K
segment identiﬁer in protocol level l allowing ASes
to chain hops to paths
hop authenticator in level l authorizing the jth hop
as calculated by A j during path exploration
(A1 || HS); source AS and host address
path timestamp created during path exploration
expiration time of a hop ﬁeld relative to TSpath
packet creation time relative to TSpath
hop validation ﬁeld in protocol level l correspond-
ing to the ith hop after processing by A j; when its
value stays constant, we omit j.
destination validation ﬁeld
substring from byte i (incl.) to byte j (excl.) of X
concatenation of strings
σ(l)
j
SRC
TSpath
tsexp
tspkt
V (l)
i; j , HVF
X(cid:74)i: j(cid:75)
VSD
||
packet timestamp,
PO := (SRC,TSpath,tspkt).
(2)
As forwarding information is included in the packet header,
intermediate routers at the border of an AS can directly use
this (after cryptographically validating it) and do not need
to keep forwarding tables. In case of a link failure, an end
host can be notiﬁed and immediately switch to a backup path
without needing to wait for the network to reconverge.
3.3 Notation
We denote the application of a pseudorandom function (PRF)
and the computation of a message authentication code (MAC)
with key K as PRFK(·) and MACK(·), respectively. For
MACs, we assume that they also provide the properties of
a PRF. We write lval and lseg for the lengths in bytes of the
hop validation ﬁelds and the segment identiﬁers, respectively.
The block size of PRFs and MACs in bytes is denoted by
lPRF, where lPRF = 16 for AES. In some protocols, HVFs
are updated by intermediate routers; in this case, we write
Vi; j for the HVF corresponding to Ai after processing by A j
544    29th USENIX Security Symposium
USENIX Association
i
, . . .V (3)
and use Vi;0 for their initial values. We use superscripts to
distinguish the different EPIC protocols, named L0–L3, e.g.,
V (0)
. Concatenation of (binary) strings is denoted
i
by || , and X(cid:74)i: j(cid:75) is the substring from byte i (inclusive) to
byte j (exclusive) of X. Table 1 summarizes our notation.
3.4 Global Symmetric-Key Distribution
Some of the protocols that we propose require the source
host to create authenticators for each packet that either the
destination or intermediate routers verify. While asymmetric
cryptography scales well in the number of networking entities,
the computation overhead of a per-packet usage is prohibitive
as shown in §2.3. On the other hand, the standard use of
symmetric cryptography would require routers to store a key
for each packet source, which is infeasible on core routers in
the Internet. In order to be able to use symmetric cryptography
without per-host state on intermediate routers, we leverage the
dynamically-recreatable-key (DRKey) / PISKES system [28,
40], which we will summarize in this section.
With DRKey, one party, e.g., a router in an AS A, can derive
symmetric keys by simply applying PRFs to deterministic
inputs, while the other party has to fetch keys from a key
server (over a secure control-plane channel). DRKey deﬁnes
AS-level keys shared between ASes A and B:
KA→B := PRFKA(B) .
(3)
Here, KA is a secret key of the AS A, which is shared between
all its (border) routers and key servers but with no external
entities, and B is a unique and public identiﬁer of AS B. The
arrow in the derived key indicates the asymmetry between A
and B: AS A is able to quickly derive the keys on the ﬂy using
symmetric cryptography, while AS B needs to fetch the key
KA→B by an explicit request to A’s key server, protected by
asymmetric cryptography. DRKeys are valid for time periods
on the order of one day, such that these key requests happen
relatively infrequently.
Given an AS-level key, host-level keys can be derived by
another application of a PRF:
KA→B:HB := PRFKA→B (HB) ,
KA:HA→B:HB := PRFKA→B (HA || HB) .
(4a)
(4b)
An end host HB in AS B can query the key servers of B in
order to obtain the keys (4a) or (4b), which can be calcu-
lated by B from the AS-level key (3). These keys are shared
between all entities in the subscripts, e.g., KA(cid:96):HD→A1:HS is
shared among A(cid:96), HD, A1, and HS. Therefore, when authenti-
cating sources using DRKey, no end-host-to-end-host guar-
antees are obtained: A malicious AS A1 could claim that a
packet originating from HS came from a different host HS’
in A1. The destination host HD in AS A(cid:96) can only authenti-
cate the source host under the assumption that A(cid:96) is honest.
As discussed above, these are common restrictions in order
to accommodate the efﬁciency requirements of high-speed
routers. As we discuss in §6.4, using DRKeys introduces little
communication overhead and negligible additional latency.
Other AS-level key-establishment systems could be used
for exchanging AS-level symmetric keys. For example, Pass-
port establishes symmetric keys KA↔B between any pair of
ASes by means of a Difﬁe–Hellman key exchange on top of
BGP announcements [31]. These keys can be used in place of
KA→B in Eq. (4) but require also to input the AS identiﬁer in
order to distinguish KA:H↔B from KA↔B:H. Furthermore, as
they cannot be recreated on the ﬂy at border routers, a router
would need to cache a symmetric key to every other AS.
Irrespective of the system used to exchange AS-level keys,
the communication between end hosts and key servers relies
on secure control-plane channels in order to prevent malicious
entities impersonating key servers or discovering keys. As we
explained above, this is an orthogonal problem to securing
the data plane, and thus outside the scope of this work.
4 EPIC Protocols
In this section, we develop three protocol levels 1–3 of EPIC
with increasingly strong security properties. We present the
protocols in a step-by-step development, thus explaining for
each security property the mechanism and prerequisites to
achieve it. As a starting point, we begin by describing a
simple protocol (referred to as “EPIC L0”) that represents the
approach taken in the current SCION data plane (with minor
simpliﬁcations) [37]. Its primary security property is path
authorization, which protects ASes from malicious sources
using paths that violate their routing policies.
4.1 Level 0: Path Authorization
EPIC L0 achieves path authorization using static MACs that
are calculated during path exploration and directly serve as
HVFs for forwarding. During the path-exploration process,
an AS A calculates the hop authenticator σ(0) as a MAC over
the beacon’s timestamp, the hop information, and the previous
hop authenticator (σ(0)(cid:48)
TSpath || HIA || σ(0)(cid:48)(cid:17)(cid:74)0:lval(cid:75).
(cid:16)
), truncated to lval bytes:
σ(0)
A := MACKA
(5)
i
:= σ(0)
i
is not included.
For the AS initiating the beacon, there is no previous hop
authenticator, so σ(0)(cid:48)
This hop authenticator directly serves as the HVF in the
data plane, V (0)
; segment identiﬁers and additional
header ﬁelds tspkt and VSD as deﬁned in Eq. (1) are therefore
unused in EPIC L0. The procedure to create and forward
packets is the following:
Source HS obtains a path, including all hop authenticators,
from the path server in its AS. It constructs the packet
according to Eq. (1) by copying the path timestamp and
the hop information and hop authenticator for each hop.
Transit At every AS Ai, the border router ﬁrst checks that
the packet was received through the correct interface
according to HIi and that the hop ﬁeld is not expired.
USENIX Association
29th USENIX Security Symposium    545
i = σ(0)
i
Then the router recalculates V (0)
according to
Eq. (5) and checks that it coincides with the HVF in
the packet header.
If the packet passes both checks,
the router forwards it to the next hop speciﬁed in HIi,
otherwise it drops the packet. The only state required on
AS border routers is the AS’ secret key KA and intra-AS
forwarding information.
The construction presented here ensures that end hosts and
ASes can only send packets on paths that are authorized by
all on-path ASes. Chaining hops by including the hop authen-
ticator of the previous hop in the MAC calculation deﬁned
in Eq. (5) guarantees that complete paths are authorized and
hosts cannot combine individual hops arbitrarily.
4.2 Level 1: Improved Path Authorization
EPIC L0 suffers from a dilemma between secure hop ﬁelds
and acceptable communication overhead: Assuming short
hop authenticators with lval = 3 (the default length of hop
authenticators in SCION [37]), these ﬁelds are susceptible to
online brute-force attacks. An attacker has to send at most
224 ≈ 1.6· 107 probe packets to ﬁnd a correct MAC of an
unauthorized hop, which takes under 10 seconds on a gigabit
link. Afterwards, the attacker can use the unauthorized hop
ﬁeld to send arbitrary trafﬁc until the eventual expiration of
the path. MACs can be made longer and thus harder to forge,
but only at the expense of increased communication overhead,
see §6.3. The fundamental problem is that the static HVFs
can be directly reused to send additional packets.
With EPIC L1 we resolve this dilemma by replacing these
static hop authenticators by per-packet HVFs that cannot be
reused for additional packets. During path exploration, an AS
A calculates its hop authenticator σA as follows:
(cid:16)
TSpath || HIA || S(1)(cid:48)(cid:17)
.
(6)
σ(1)
A := MACKA
Here, S(1)(cid:48)
is the segment identiﬁer of the previous hop during
the path exploration, which is obtained by simply truncating
the hop authenticator:
S(1) := σ(1)(cid:113)0:lseg(cid:121).
(7)
The hop authenticator is then subsequently used by the source
host to calculate the per-packet HVFs:
V (1)
i
:= MAC
σ(1)
i
(tspkt || SRC)(cid:74)0:lval(cid:75).
As the hop authenticators are not part of the packet header
to limit communication overhead, the additional segment
identiﬁers are required for chaining hops as they allow ASes
to derive the hop authenticators on the ﬂy. The aim of EPIC L1
is improving path authorization; the ﬁeld VSD is thus not used.
An attacker trying to forge an unauthorized path needs to
ﬁnd at least one HVF that fulﬁlls Eq. (8) without access to
σi by sending a large number of probing packets. However,
in contrast to EPIC L0, this HVF cannot be used to send
additional packets, which carry different packet timestamps.
Even though each HVF is only valid for a speciﬁc packet
origin, an attacker could launch a DoS attack by replaying
packets for which he knows the HVFs or simply reusing the
packet timestamp. From L1 onwards, we employ a replay-
suppression system in border routers or inside an AS’ network
to prevent this [29]. This system tracks and uniquely identi-
ﬁes packets based on the packet origin PO, i.e., source, path
timestamp, and the packet timestamp, see Eq. (2). In order
for the packet origin to serve as a unique packet identiﬁer,
the packet timestamp must be sufﬁciently long, see §7 for a
more detailed discussion. The replay-suppression system uses
Bloom ﬁlters to identify duplicates but discards old packets in
order to make this process viable in high-bandwidth network-
ing applications, see §6.4. Note that packets are processed
by the replay-suppression system after being authenticated in
order to prevent an attacker from poisoning the system with
unauthentic packets.
The procedure to create and forward packets is slightly
more complicated than for EPIC L0:
Source HS obtains the desired path including all hop authen-
ticators from its path server. HS calculates the packet
timestamp tspkt and adds it to the header. The host then
calculates the segment identiﬁers according to Eq. (7)
and HVFs according to Eq. (8) and constructs all hop
ﬁelds consisting of HIi, S(1)
i
Transit An AS checks the interfaces and expiration in the
same way as in EPIC L0. It recalculates ﬁrst the hop
authenticator as in Eq. (6) using the previous hop’s seg-
ment identiﬁer (in construction direction) and then its
own segment identiﬁer according to Eq. (7) and the HVF
as in Eq. (8). If interfaces, segment identiﬁer, and HVF
are all correct, and the timestamp is current, the AS
forwards the packet, otherwise it drops it.
i
, and V (1)
.
4.3 Level 2: Authentication
We now extend the previous protocol by a mechanism to allow
intermediate routers to authenticate the source of a packet
and the destination to additionally authenticate its payload.
The hop authenticators σi, segment identiﬁers Si, and the
additional header ﬁeld tspkt are unchanged. We deﬁne the
host keys
(9a)
(9b)
(10)
(8)
KS
i
:= KAi→A1:HS
for every on-path AS Ai and an additional key
KSD := KA(cid:96):HD→A1:HS
shared between source and destination. These keys are based
on the derivation deﬁned in Eq. (4) and can be used to provide
path authorization and source authentication in a single HVF:
V (2)
i
:= MACKS
i
(tspkt || SRC || σi)(cid:74)0:lval(cid:75).
546    29th USENIX Security Symposium
USENIX Association
The destination host HD can authenticate the source of the
packet and verify that neither the path (as deﬁned in Eq. (1b))
nor the payload was modiﬁed through the additional destina-
tion validation ﬁeld
SD := MACKSD (tspkt || PATH || P) .
V (2)
(11)
The procedure to create and forward packets is as follows:
Source In addition to EPIC L1, the source HS fetches all
necessary host keys from the local key server and sub-
sequently calculates the HVFs according to Eq. (10) as
well as VSD according to Eq. (11).
Transit In addition to the checks in EPIC L1, every AS needs
to recalculate the host key KS
i according to Eqs. (3), (4a),
and (9a) and then check if the HVF in the packet header
satisﬁes Eq. (10). As all keys can be locally calculated,
no key fetching or per-host state is necessary.
Destination HD obtains the key KSD from its local key server
and validates V (2)