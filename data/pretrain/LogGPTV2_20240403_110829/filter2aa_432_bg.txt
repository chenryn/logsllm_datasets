char buff[100] ;
/* 这里就是我们一直强调的错误检查．如果调用 socket() 出错，则返回 */
if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) == -1)
{
- 194 -
Linux网络编程
/* 输出错误提示并退出 */
perror(“socket”);
exit(1);
}
/* 主机字节顺序 */
my_addr.sin_family = AF_INET;
/* 网络字节顺序，短整型 */
my_addr.sin_port = htons(MYPORT);
/* 将运行程序机器的 IP 填充入 s_addr */
my_addr.sin_addr.s_addr = INADDR_ANY;
/* 将此结构的其余空间清零 */
bzero(&(my_addr.sin_zero), 8);
/* 这里是我们一直强调的错误检查！！ */ if (bind(sockfd, (struct sockaddr *)&my_addr,
sizeof(struct sockaddr)) == -1)
{
/* 如果调用 bind()失败，则给出错误提示，退出 */
perror(“bind”);
exit(1);
}
/* 这里是我们一直强调的错误检查！！ */
if (listen(sockfd, BACKLOG) == -1)
{
/* 如果调用 listen 失败，则给出错误提示，退出 */
perror(“listen”);
exit(1);
}
/* 设置 SIGURG 的处理函数 sig_urg */
old_sig_urg_handle = signal（SIGURG, sig_urg）;
/* 更改 connfd 的属主 */
fcntl（sockfd, F_SETOWN, getpid()）;
while(1)
{  
第 6 章  berkeley 套接字
- 195 -
/* 这里是主 accept()循环 */
sin_size = sizeof(struct sockaddr_in);
/* 这里是我们一直强调的错误检查！！ */
if ((new_fd = accept(sockfd, (struct sockaddr *)&their_addr, &sin_size)) == -1)
{
/* 如果调用 accept()出现错误，则给出错误提示，进入下一个循环 */
perror(“accept”);
continue;
}
/* 服务器给出出现连接的信息 */
printf（“server: got connection from %s\n”, inet_ntoa(their_addr.sin_addr)）;
/* 这里将建立一个子进程来和刚刚建立的套接字进行通讯 */
if (!fork())
/* 这里是子进程 */
while（1）
{
if（(n = recv（new_fd, buff, sizeof（buff）–1）) == 0）
{
printf（“received EOF\n”）;
break ;
}
buff[n] = 0 ;
printf（“Recv %d bytes: %s\n”, n, buff）;
}
/* 关闭 new_fd 代表的这个套接字连接 */
close(new_fd);
}
}
/* 等待所有的子进程都退出 */
while(waitpid(-1,NULL,WNOHANG) > 0);
/* 恢复系统以前对 SIGURG 的处理器 */
signal（SIGURG, old_sig_urg_handle）;
}
void
sig_urg（int signo）
{
- 196 -
Linux网络编程
int n;
char buff[100] ;
printf（“SIGURG received\n”）;
n = recv（new_fd, buff, sizeof（buff）– 1, MSG_OOB）;
buff [ n ] = 0 ;
printf（“recv %d OOB byte: %s\n” , n, buff）;
}
6.11.3  OOB传输套接字例程（客户端代码 Cl i ent . c）
下面是客户端程序：
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#include 
/* 服务器程序监听的端口号 */
#define PORT 4000
/* 我们一次所能够接收的最大字节数 */
#define MAXDATASIZE 100
int
main(int argc, char *argv[])
{
/* 套接字描述符 */
int sockfd, numbytes;
char buf[MAXDATASIZE];
struct hostent *he;
/* 连接者的主机信息 */
struct sockaddr_in their_addr;
/* 检查参数信息 */
if (argc != 2)
{
第 6 章  berkeley 套接字
- 197 -
/* 如果没有参数，则给出使用方法后退出 */
fprintf(stderr,“usage: client hostname\n”);
exit(1);
}
/* 取得主机信息 */
if ((he=gethostbyname(argv[1])) == NULL)
/* 如果 gethostbyname()发生错误，则显示错误信息并退出 */
herror(“gethostbyname”);
exit(1);
}
if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) == -1) {
/* 如果 socket()调用出现错误则显示错误信息并退出 */
perror(“socket”);
exit(1);
}
/* 主机字节顺序 */
their_addr.sin_family = AF_INET;
/* 网络字节顺序，短整型 */
their_addr.sin_port = htons(PORT);
their_addr.sin_addr = *((struct in_addr *)he->h_addr);
/* 将结构剩下的部分清零*/
bzero(&(their_addr.sin_zero), 8);
if（connect(sockfd, (struct sockaddr *)&their_addr, sizeof(struct sockaddr)) == -1）
{
/* 如果 connect()建立连接错误，则显示出错误信息，退出 */
perror(“connect”);
exit(1);
}
/* 这里就是我们说的错误检查！ */
if (send(new_fd, “123”, 3, 0) == -1)
{
/* 如果错误，则给出错误提示，然后关闭这个新连接，退出 */
perror(“send”);
close(new_fd);
- 198 -
Linux网络编程
exit(0);
}
printf（“Send 3 byte of normal data\n”）;
/* 睡眠 1 秒 */
sleep（1）;
if (send(new_fd, “4”, 1, MSG_OOB）== -1)
{
perror(“send”);
close(new_fd);
exit(0);
}
printf（“Send 1 byte of OOB data\n”）;
sleep（1）;
if (send(new_fd, “56”, 2, 0) == -1)
{
perror(“send”);
close(new_fd);
exit(0);
}
printf（“Send 2 bytes of normal data\n”）;
sleep（1）;
if (send(new_fd, “7”, 1, MSG_OOB）== -1)
{
perror(“send”);
close(new_fd);
exit(0);
}
printf（“Send 1 byte of OOB data\n”）;
sleep（1）;
if (send(new_fd, “89”, 2, MSG_OOB）== -1)
{
perror(“send”);
close(new_fd);
exit(0);
}
printf（“Send 2 bytes of normal data\n”）;
sleep（1）;
第 6 章  berkeley 套接字
- 199 -
close(sockfd);
return 0;
}
6.11.4  编译例子
注意：你显然需要在运行 client 之前启动 server．否则client 会执行出错（显示“Connection
refused”）．
当只有一个连接的时候（因为这个服务器是多进程的，所以如果有多个连接同时存在
可能会导致屏幕输出混乱），可以得到下面的结果：（注意是使用我们下面的客户程序来连
接的，并且假设你运行我们的服务器程序是在本地机器上面）
root@bbs# gcc – o server server.c
root@bbs# gcc – o client client.c
root@bbs# ./server
root@bbs# ./client 127.0.0.1
Send 3 bytes of normal data
#include 
#include 
- 200 -
Linux网络编程
void main(void)
{  
/* 作为一般的程序，这个 printf 将输出到标准输出 */
printf（“Welcome!\n Hello! World! \n”）;
}
这个程序很简单，不是吗?
编译。
root@bbs$ gcc -o hello hello.c
好了，现在我们已经拥有这个程序的可执行版本了。如果你直接执行这个程序的话，