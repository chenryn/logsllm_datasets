company employees acknowledged this weakness, they
decided to submit this security issue to Wi-Fi Alliance,
hoping that this would be ﬁxed in the protocol standard.
In the reminder of this section, mitigations/patches at dif-
ferent layers are offered and thoroughly discussed.
Defenses in Wi-Fi technology. Unlike the previous
software-induced side channels, the timing channel in-
troduced by Wi-Fi is inherently difﬁcult to eliminate or
mitigate (just as the recent meltdown and spectre vulner-
ability in CPUs [35, 34]). One straightforward defense
would be to make the Wi-Fi channel full-duplex. For in-
stance, with frequency-division duplexing, different fre-
quency sub-bands can be used for uplink and downlink
trafﬁc. However, this can potentially introduce low band-
width utilization as separate dedicated sub-bands have to
be pre-allocated (and real-world Internet trafﬁc volume
is not symmetric). Even though IEEE 802.11ax work-
ing group has been considering the possibility of sup-
porting in-band full-duplex communication [2], research
still needs to be done to make sure the real-world chal-
lenges such as backward compatibility are carefully con-
sidered and addressed [12, 30]. At this point though, it is
unclear when the technology will be widely deployed in
practice, according to our conversation with the 802.11
working group.
Defenses in the TCP stacks. As described in §2.2,
the packet validation logic of the latest TCP speciﬁcation
inherently treats valid and invalid incoming packets dif-
ferently, in terms of whether a response should be gener-
ated. One solution is to revisit the speciﬁcation and look
for alternatives. A good hint is that all three modern op-
erating systems implement the ACK number validation
differently, yet they have co-existed without any major
issues for a long time now. This leaves some ﬂexibility
in the ACK number validation logic. Ideally, no matter
what ACK number an incoming packet has, it should ei-
ther consistently respond or never respond. Assuming an
incoming packet already has a valid sequence number,
the only constraints we have here are:
USENIX Association
27th USENIX Security Symposium    1595
(1) if it is a data packet and its ACK number is also in-
window, a correct TCP receiver should always respond
with an ACK (or delayed ACK); (2) when a pure ACK
with sequence number in-window and ACK number in-
window arrives, there should be no response (otherwise,
an ACK war [6] may be triggered).
In the remaining cases: (3) a data packet with out-
of-window ACK number; (4) a pure ACK with out-of-
window ACK number, their responses appear to be ﬂex-
ible in practice — see row no. 2, 3, 13, 16, and 18 in
Table 2) for the data packet case and row no. 2, 3, 12,
13, and 18 for the pure ACK case. Therefore, assum-
ing an incoming packet already has an in-window se-
quence number, we can always force a response for a
data packet, and no response for pure an ACK packet re-
gardless of their ACK numbers. We plan to validate this
idea by formally model checking the proposed changes
together with legacy behaviors for the absence of ACK
war.
With regards to sequence number validation, we hy-
pothesize that the responses of receiving packets with
valid and invalid sequence numbers can also be consis-
tent. However its implications must be evaluated more
carefully. A good strategy to consider is to rate limit
ACK responses generated for various types of incoming
packets. Even if inconsistent, this would allow the dif-
ferences in responses (e.g., one response vs. zero) to be
small enough and impossible to measure. The same rate
limiting idea applies to connection identiﬁcation, where
packets are likely dropped by NAT or ﬁrewall if no con-
nection is present and some response will be triggered if
there is an active connection.
Defenses in Application layer Clearly, HSTS and
HTTPS will help ward off most serious web attacks
such as the web cache poisoning attack. Other TCP-
level attacks (e.g., inferring presence of connection [18],
byte counting [20], connection reset [18]) could still
be mounted by exploiting the vulnerability. HSTS and
HTTPS can prevent only web cache poisoning attack
(application-layer attacks) but not the TCP-level attacks.
Some versions of our attack also exploit features of
browser implementations, and thus we believe some mit-
igations can be made in the browser (i.e., make parsing
of responses stricter) to complicate the ACK number in-
ference step. The idea is that whenever the browser ob-
serves anything abnormal regarding the responses, e.g.,
malformed or longer than expected, it should immedi-
ately drop the connection and restart. A small tradeoff
is that this may break some backward compatibility with
non-standard-conforming web servers. In terms of its ef-
fectiveness in stopping web cache poisoning attacks, it
really only helps Linux as the attack now needs to fall-
back to a much slower version of the ACK number infer-
ence (likely tripling the time for a complete attack). Re-
garding Windows, although it also defeats our ﬁrst strat-
egy to infer ACK number by creating a malformed re-
sponse, our alternative strategy is unaffected. MacOS’s
TCP stack implementation is so vulnerable that we will
always favor the binary search on the ACK number to
exploiting any browser-speciﬁc weakness. Finally, con-
nection inference (privacy breach) and sequence number
inference (byte counting and reset) attacks remain potent
as they only rely on the TCP stack.
For the purpose of supporting further research to re-
produce and mitigate the attack, we open sourced our
implementation of the attack against different OSes, now
publicly available at [5].
9 Related Work
We have described the most relevant work of various off-
path TCP attacks in §2.3. In this section, we discuss a
different set of related works.
Other off-path side channels. Besides the TCP se-
quence number, it has been shown that other types of in-
formation can be inferred by a blind off-path attacker.
[24, 33, 23, 48, 13, 49, 26, 41, 37]. Most of these
side channels do not in themselves allow serious attacks.
However, much of the research translates to measure-
ment tools that can be useful. For example, Knockel et
al. [33] demonstrate the use of a new per-destination
IPID side channel that can leak the number of packets
sent between two arbitrary hosts on several major operat-
ing systems. Alexander et al. [13] can infer the RTT be-
tween two arbitrary hosts through the shared SYN back-
log. Qian et al. [41] used global IPID side channel to
measure directional port blocking. More recently, the
Augur system [37] used the same IPID side channel to
measure Internet censorship and connectivity disruption.
The same side channel has also been used to count how
many hosts are behind a NAT [15] and other applica-
tions [21].
Side channel discovery and defenses. Typically,
when a speciﬁc type of vulnerability becomes known,
there are many strategies to discover more concrete in-
stances of them. For instance, static taint analysis has
been applied to look for TCP packet counter side chan-
nels [19]. The problem is modeled as an information
ﬂow problem where the secret is the current sequence
number, and the sink is the set of packet counters that re-
port aggregated statistics to user space programs. If the
secret sequence number can leak to the sink, then it is
ﬂagged as a potential side channel. There may be false
positives (due to the over-approximation of the static
analysis) but should not have false negatives by design.
In the case of CPU cache side channels, symbolic execu-
tion has been applied to track the precise cache state over
execution traces [47]. If the cache states can be different
1596    27th USENIX Security Symposium
USENIX Association
at any point in the trace with different secret inputs, the
program is ﬂagged to have leakage. Since the analysis is
applied over concrete execution traces, the approach has
no false positives (but may have false negatives). Unfor-
tunately, the Wi-Fi side channel is not a software artifact
and therefore cannot be discovered unless it is explicitly
modeled and analyzed.
In terms of side channel defenses, there are various
standard strategies such as perturbing the channel by in-
jecting noise [7, 22, 45], and isolating the resources al-
together [8, 32]. Unfortunately for Wi-Fi, these stan-
dard techniques would mean introducing wireless la-
tency (which hurts performance), or making the channel
full-duplex which we discussed earlier to be challenging
as well.
10 Conclusions
To conclude, we have discovered a subtle yet fundamen-
tal side channel inherent in all generations of Wi-Fi or
IEEE 802.11 technology because they are half-duplex.
Furthermore, we show the timing channel is reliable and
ampliﬁable, and also implement a real off-path TCP ex-
ploit in practice, allowing the attackers to inject data into
a TCP connection and force the browser to cache mali-
cious objects. Our study reveals that this novel attack
affects all three most popular operating systems: ma-
cOS, Windows, and Linux. We provide a thorough anal-
ysis and evaluation of the proposed attack under different
router/network/OS/browser combinations. Finally, we
propose possible defenses against this attack.
Acknowledgement
We wish to thank Zakir Durumeric (our shepherd) and
the anonymous reviewers for their valuable comments
and suggestions. Many thanks to Prof. Srikanth V. Kr-
ishnamurthy, Mart Molle, and Zhuo Lv who educated us
on the fundamentals of wireless networks. We are also
fortunate to work with the IEEE 802.11 working group,
speciﬁcally Dorothy Stanley, Daniel Harkins, Jouni Ma-
linen, to discuss the side channel and are grateful for their
insights. This work was supported by the National Sci-
ence Foundation under Grant No.1464410, 1652954, and
1646641.
References
[1] Blind TCP/IP Hijacking is Still Alive. http://phrack.org/i
ssues/64/13.html.
[2] In-band Full Duplex Radios and System Performance. https:
//mentor.ieee.org/802.11/dcn/15/11-15-0043-01-00a
x-in-band-full-duplex-radios-and-system-perform
ance.pdf.
[3] Off-path tcp exploit: Demos of web cache poisoning at-
tacks. https://sites.google.com/view/tcp-off-path-e
xploits/.
[4] RFC 793 - Transmission Control Protocol. http://tools.iet
f.org/html/rfc793.
[5] TCP Exploit. https://github.com/seclab-ucr/tcp explo
it.
[6] [tcpm] mitigating TCP ACK loop (“ACK storm”) DoS at-
https://www.ietf.org/mail-archive/web/tcpm/
tacks.
current/msg09450.html.
[7] [patch net] linux tcp ﬂaw lets ’anyone’ hijack internet trafﬁc,
2016.
[8] [patch net] tcp: enable per-socket rate limiting of all ’challenge
acks’, 2016.
[9] About the security content of macos high sierra 10.13, 2017.
[10] About the security content of macos high sierra 10.13.1, security
update 2017-001 sierra, and security update 2017-004 el capitan,
2017.
[11] The darwin kernel. https://github.com/apple/darwin-x
nu, 2017.
[12] AIJAZ, A., AND KULKARNI, P. Protocol design for enabling
full-duplex operation in next-generation ieee 802.11 wlans. IEEE
Systems Journal PP, 99 (2017), 1–12.
[13] ALEXANDER, G., AND CRANDALL, J. R. Off-Path Round Trip
In INFOCOM
Time Measurement via TCP/IP Side Channels.
(2015).
[14] ANTONAKAKIS, M., APRIL, T., BAILEY, M., BERNHARD, M.,
BURSZTEIN, E., COCHRAN, J., DURUMERIC, Z., HALDER-
MAN, J. A., INVERNIZZI, L., KALLITSIS, M., KUMAR, D.,
LEVER, C., MA, Z., MASON, J., MENSCHER, D., SEAMAN,
C., SULLIVAN, N., THOMAS, K., AND ZHOU, Y. Under-
standing the mirai botnet. In 26th USENIX Security Symposium
(USENIX Security 17) (Vancouver, BC, 2017), USENIX Associ-
ation, pp. 1093–1110.
[15] BELLOVIN, S. M. A Technique for Counting Natted Hosts. In
Proceedings of the 2Nd ACM SIGCOMM Workshop on Internet
Measurment (2002).
[16] BENSAOU, B., WANG, Y., AND KO, C. C. Fair medium access
in 802.11 based wireless ad-hoc networks. In Proceedings of the
1st ACM international symposium on Mobile ad hoc networking
& computing (2000), IEEE Press, pp. 99–106.
[17] CALI, F., CONTI, M., AND GREGORI, E. Ieee 802.11 protocol:
design and performance evaluation of an adaptive backoff mech-
anism. IEEE journal on selected areas in communications 18, 9
(2000), 1774–1786.
[18] CAO, Y., QIAN, Z., WANG, Z., DAO, T., KRISHNAMURTHY,
S. V., AND MARVEL, L. M. Off-path TCP exploits: Global rate
limit considered dangerous. In 25th USENIX Security Symposium
(USENIX Security 16) (2016).
[19] CHEN, Q. A., QIAN, Z., JIA, Y. J., SHAO, Y., AND MAO,
Z. M. Static detection of packet injection vulnerabilities: A case
for identifying attacker-controlled implicit information leaks. In
CCS (2015).
[20] CHEN, S., WANG, R., WANG, X., AND ZHANG, K. Side-
channel Leaks in Web Applications: A Reality Today, a Chal-
lenge Tomorrow. In IEEE Symposium on Security and Privacy
(2010).
[21] CHEN, W., HUANG, Y., RIBEIRO, B. F., SUH, K., ZHANG, H.,
DE SOUZA E SILVA, E., KUROSE, J., AND TOWSLEY, D. Ex-
ploiting the ipid ﬁeld to infer network path and end-system char-
acteristics. In Proceedings of the 6th International Conference on
Passive and Active Network Measurement (PAM) (2005).
USENIX Association
27th USENIX Security Symposium    1597
[41] QIAN, Z., MAO, Z. M., XIE, Y., AND YU, F. Investigation of
Triangular Spamming: A Stealthy and Efﬁcient Spamming Tech-
nique. In Proc. of IEEE Security and Privacy (2010).
[42] QUACH, A., WANG, Z., AND QIAN, Z. Investigation of the 2016
linux tcp stack vulnerability at scale. In Proc. ACM SIGMETRICS
(2017).
[43] R. BRADEN, ED. Requirements for Internet Hosts - Communi-
cation Layers. rfc 1122, 1989.
[44] RAMAIAH, ANANTHA AND STEWART, R AND DALAL,
MITESH. Improving TCP’s Robustness to Blind In-Window At-
tacks. rfc5961, 2010.
[45] SHAN, Z., NEAMTIU, I., QIAN, Z., AND TORRIERI, D. Proac-
tive restart as cyber maneuver for android. In MILCOM 2015 -
2015 IEEE Military Communications Conference (2015).
[46] TOBAGI, F., AND KLEINROCK, L. Packet switching in radio
channels: part ii–the hidden terminal problem in carrier sense
multiple-access and the busy-tone solution. IEEE Transactions
on communications 23, 12 (1975), 1417–1433.
[47] WANG, S., WANG, P., LIU, X., ZHANG, D., AND WU, D.
Cached: Identifying cache-based timing channels in production
software. In 26th USENIX Security Symposium (USENIX Secu-
rity 17) (Vancouver, BC, 2017), USENIX Association, pp. 235–
252.
[48] ZHANG, X., KNOCKEL, J., AND CRANDALL, J. R. Original
SYN: Finding Machines Hidden Behind Firewalls. In INFOCOM
(2015).
[49] ZHANG, X., KNOCKEL, J., AND CRANDALL, J. R. High ﬁ-
delity off-path round-trip time measurement via tcp/ip side chan-
nels with duplicate syns. In 2016 IEEE Global Communications
Conference (GLOBECOM) (Dec 2016), pp. 1–6.
[50] ZHOU, Z., QIAN, Z., REITER, M. K., AND ZHANG, Y. Static
evaluation of noninterference using approximate model counting.
In Proc. of IEEE Security and Privacy (2018).
[22] CRANE, S., HOMESCU, A., BRUNTHALER, S., LARSEN, P.,
AND FRANZ, M. Thwarting cache side-channel attacks through
dynamic software diversity. In Proceedings of the 15th Annual
Network and Distributed System Security Symposium (NDSS)
(2015).
[23] ENSAFI, R., KNOCKEL, J., ALEXANDER, G., AND CRAN-
DALL, J. R. Detecting Intentional Packet Drops on the Internet
via TCP/IP Side Channels. In PAM (2014).
[24] ENSAFI, R., PARK, J. C., KAPUR, D., AND CRANDALL, J. R.
Idle Port Scanning and Non-interference Analysis of Network
Protocol Stacks using Model Checking.
In USENIX Security
(2010).
[25] GILAD, Y., AND HERZBERG, A. Off-Path Attacking the Web.
In USENIX WOOT (2012).
[26] GILAD, Y., AND HERZBERG, A. Spying in the Dark: TCP and
Tor Trafﬁc Analysis. In PETS (2012).
[27] GILAD, Y., AND HERZBERG, A. When tolerance causes weak-
ness: the case of injection-friendly browsers. In WWW (2013).
[28] GILAD, Y., AND HERZBERG, A. Off-path tcp injection attacks.
ACM Transactions on Information and System Security (TISSEC)
16, 4 (2014), 13.
[29] GOGUEN, J. A., AND MESEGUER, J. Security Policies and
Security Models. In IEEE Symposium on Security and Privacy
(1982).
[30] IEEE 802.11-13/1421R1. STR radios and STR media access.
[31] IEEE 802.11 WORKING GROUP OF THE LAN/MAN STAN-
DARDS COMMITTEE OF THE IEEE COMPUTER SOCIETY.
802.11-2016 - IEEE Standard for Information technology–
Telecommunications and information exchange between systems
Local and metropolitan area networks–Speciﬁc requirements -
Part 11: Wireless LAN Medium Access Control (MAC) and
Physical Layer (PHY) Speciﬁcations.
[32] KIM, T., PEINADO, M., AND MAINAR-RUIZ, G. STEALTH-
MEM: System-level protection against cache-based side channel
attacks in the cloud.
In Presented as part of the 21st USENIX
Security Symposium (USENIX Security 12) (2012).
[33] KNOCKEL, J., AND CRANDALL, J. R. Counting Packets Sent
Between Arbitrary Internet Hosts. In FOCI (2014).
[34] KOCHER, P., GENKIN, D., GRUSS, D., HAAS, W., HAMBURG,
M., LIPP, M., MANGARD, S., PRESCHER, T., SCHWARZ, M.,
AND YAROM, Y. Spectre attacks: Exploiting speculative execu-
tion. ArXiv e-prints (January 2018).
[35] LIPP, M., SCHWARZ, M., GRUSS, D., PRESCHER, T., HAAS,
W., MANGARD, S., KOCHER, P., GENKIN, D., YAROM, Y.,
AND HAMBURG, M. Meltdown. ArXiv e-prints (January 2018).
[36] MILLER, B., HUANG, L., JOSEPH, A. D., AND TYGAR, J. D.
I know why you went to the clinic: Risks and realization of https
trafﬁc analysis. In Privacy Enhancing Technologies (2014).
[37] PEARCE, P., ENSAFI, R., LI, F., FEAMSTER, N., AND PAXSON,
V. Augur: Internet-wide detection of connectivity disruptions. In
2017 IEEE Symposium on Security and Privacy (SP) (May 2017),
pp. 427–443.
[38] PTACEK, T. H., AND NEWSHAM, T. N. Insertion, Envasion, and
Denial of Service: Eluding Network Intrusion Detection. Tech.
rep., 1998.
[39] QIAN, Z., AND MAO, Z. M. Off-Path TCP Sequence Number
Inference Attack – How Firewall Middleboxes Reduce Security.
In IEEE Symposium on Security and Privacy (2012).
[40] QIAN, Z., MAO, Z. M., AND XIE, Y. Collaborative TCP se-
quence number inference attack: how to crack sequence number
under a second. In CCS (2012).
1598    27th USENIX Security Symposium
USENIX Association