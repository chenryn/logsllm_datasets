### Figures and Data Presentation

**Figure 2: Number of Friend Invitations Sent and Accepted per Decoy Account**
- **Invitations Sent:**
  - 1100
  - 1000
  - 900
  - 800
  - 700
  - 600
  - 500
  - 400
  - 300
  - 200
  - 100
  - 0
- **Accepted Invitations:**
  - 1
  - 2
  - 3
  - 4
  - 5

**Figure 3: Number of Invitations Received and Accepted by Decoy Accounts After Being Advertised on MessengerFinder.com**
- **Added Contacts:**
  - 1
  - 2
  - 3
  - 4
  - 5
- **Decoy Accounts:**
  - 9
  - 10
  - 11
  - 12
  - 13
  - 14
  - 15
  - 16
  - 17
  - 18

### System Security and Containment

To prevent infections that could render our honeypot useless and turn it into a platform for further attacks, the honeypot messengers run inside Argos. Argos is a containment environment based on memory tainting techniques. It marks all bytes coming from the network as "dirty" and tracks their flow in the system memory. If a dirty byte is passed to the processor for execution, an exploitation attempt is detected. Since honeypots do not download software to execute, any such attempt indicates an exploit. When an exploit is detected, the application under attack is restarted, and all attack information is logged to an alert file. This ensures that our system remains immune to remote exploits.

A disadvantage of containment environments is that applications run 20 to 40 times slower than in a standard system. However, this is not a significant issue for HoneyBuddy, as IM clients are generally idle and wait for incoming messages, with a memory footprint of 50-80 MB and negligible CPU usage. 

During our experiments, we did not encounter any attempts to exploit the IM client software. While such attacks may not be common now, we believe that as IM attacks become more widespread, our implementation will provide valuable insights.

### Collected Data Analysis

This section provides an analysis of data collected by the HoneyBuddy infrastructure from February 27 to September 16, 2009. Despite the technical simplicity of our system, we were surprised to find that popular defense mechanisms had not detected the majority of our collected data. During the collection period, the HoneyBuddy infrastructure gathered 6,966 unique URLs belonging to 742 unique top-level domains.

Initially, we used the `wget` tool to fetch all URLs, but malicious sites adapted their behavior to avoid these fetches. They now serve obfuscated JavaScript code that changes the window location to a URL like `http://www.malicious.com/?key=`, which blocks subsequent requests if the key is missing. To overcome this, we used the Crowbar environment, which allows running JavaScript scrapers against a DOM to automate web scraping.

We classified the URLs into five major categories: phishing, porn, dating, adware, and malware. The results are summarized in Figure 4.

- **Phishing:** 1,933 URLs in 142 top-level domains.
- **Porn:** 1,240 URLs.
- **Dating:** 567 URLs.
- **Adware:** 251 URLs.
- **Malware:** 77 URLs redirected to executable files or pages containing direct links to `.exe` or `.scr` files.

Additionally, we identified several sites advertising subscription-based services for mobile phones. These sites claim to offer free mobile devices or promote quiz games, often in the local language of the user's geographic location. If the geolocation cannot be determined, the site redirects the user to an MSN phishing site.

### Uptime Analysis

The uptime graph (Figure 5) shows that, on average, a site is functional for approximately 240 hours (10 days). Phishing and porn sites have higher uptimes compared to adware and unclassified sites. Half of the MSN phishing sites were active for up to 250 hours (ten and a half days), while adware sites had a shorter lifetime of up to 80 hours (three and a half days).

### MSN Phishing

Attackers gather MSN credentials by tricking users into entering their MSN email and password on bogus sites. These sites falsely advertise a service that reveals which accounts from the user's contact list have blocked them. To validate this, we created several MSN accounts and entered them into the phishing sites. Each account had one of our decoy accounts as a friend. The decoy account received messages from the stolen MSN accounts promoting the phishing site. However, the attackers did not change the passwords of the compromised accounts. We submitted friend requests to these accounts, but none were accepted.

All phishing sites shared one of three different "looks." Analyzing the HTML code, we found no differences among pages with the same look, indicating that the different phishing campaigns might be deployed by collaborating attackers. We also detected a localized phishing site with translated content, likely using automatic translation. Simple pattern matching and querying URL blacklists can help detect these sites.

### Malware Sample Analysis

From March 1 to March 31, 2009, our infrastructure collected 19 unique malware samples, categorized into direct and indirect sets:

- **Direct Set:** Malware collected through direct file transfers or by visiting URLs redirected to executable files.
- **Indirect Set:** Malware presented as necessary downloads, such as the latest Adobe Flash plugin or a screensaver.

We manually checked these files using the Anubis analysis center, and all were characterized as dangerous. Some were bots connecting to an IRC C&C server. We submitted the samples to VirusTotal, a large malware collection center. Four samples (21%) were previously unseen. Figure 6 shows the detection delay compared to the date the samples entered the VirusTotal database.

### Conclusion

Our findings highlight the need for robust and adaptive security measures to combat evolving threats in instant messaging. HoneyBuddy provides valuable insights into the nature and prevalence of these threats, making it an attractive solution for detecting and mitigating MSN phishing and malware.