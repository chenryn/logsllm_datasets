the sender’s programming points.
It is important to discuss the parameter choice m (length of H
output), as it greatly affects performance (the number of retries in
step 2 of the protocol). We can calculate the probability that for a
Prunique =n−1
(cid:16)1 − i2m
(cid:17)
random v, the {H(si ∥v) | i ∈ [n]} values are distinct:
i =1
(1)
The expected number of restarts when sampling v is 1/Prunique.
Looking ahead to our PSI protocol, the OPPRF will be programmed
with n items, where n is the number of items hashed into a partic-
ular bin. Different bins will have a different number of items. We
must set m in terms of the worst case number of items per bin, so
that no bin exceeds 2m items with high probability. However, on
average, a bin will have very few items.
Concretely, for PSI of 220 items we choose hashing parameters
so that no bin exceeds 30 items with high probability. Hence we set
m = 5 (so T has 32 entries). Yet, the expected number of items in a
bin is roughly 3. For the vast majority of bins, the sender programs
the OPPRF on at most 7 points. In such a bin, only 2 trials are
expected before finding a suitable v.
Costs. This OPPRF construction has favorable communication
and computational cost. It requires communicating a single nonce v
along with a table whose length is that of 𝒪(n) items. The constant
in the big-O is at most 2 (the number of items is rounded up to
the nearest power of 2). The computational cost of the protocol is
to evaluate a random oracle H, nτ times, where τ is the number
of restarts in choosing v. While these computational costs can be
large in the worst case, the typical value of τ in our PSI protocol is
a small constant when averaged over all of the instances of OPPRF.
Our experiments confirm that this table-based OPPRF construction
is indeed fast in practice.
4 EXTENDING OPPRF TO MANY QUERIES
The OPPRF constructions in the previous section are efficient when
n (the number of programmed points) is small. When built from the
efficient OPRF protocol of [26], they allow the receiver to evaluate
the programmable PRF on only t = 1 point. We now show how to
use a hashing technique to overcome both of these limitations. We
show how to extend OPPRF constructions described in the previous
section to support both a large n and a large t.
At the high level, the idea is that each party hashes their items
into bins. Each bin contains a small number of inputs which allows
the two parties to evaluate OPPRF bin-by-bin efficiently. The partic-
ular hashing approach we have in mind is as follows. Suppose the
receiver has items (q1, . . . , qt) on which he wants to evaluate an
OPPRF. The sender has a set 𝒫 = {(x1, y1), . . . ,(xn, yn)} of points
to program.
Cuckoo hashing. The receiver uses Cuckoo hashing (Section 2.2)
to hash his items into bins. We will use a variant of Cuckoo hashing
with k hash functions h1, . . . , hk, and m bins denoted as B[1· · · m].
Each item q is placed in exactly one of {B[h1(q)], . . . , B[hk(q)]}.
Based on t and k, the parameter m is chosen so that every bin can
contain at most one item with probability 1 − 2−λ for a security
parameter λ. We note that previous applications of Cuckoo hash-
ing to PSI [38, 39] have used a variant of Cuckoo hashing that
involves an additional stash (a place to put items when insertion
fails). However, a stash renders our scheme much less efficient (ev-
ery item in one party’s stash must be compared to every item of
another party). Instead, we propose a variant of Cuckoo hashing
that avoids a stash by using 3 “primary” Cuckoo hash functions,
Session F1:  Private Set IntersectionCCS’17, October 30-November 3, 2017, Dallas, TX, USA1262Probability
Bin scale &
Max Bin Size
2−30
2−40
ζ1
ζ2
β1
β2
ζ1
ζ2
β1
β2
212
1.15
0.14
28
63
1.17
0.15
27
63
214
1.13
0.14
28
63
1.15
0.16
28
63
set size n
216
1.13
0.14
29
63
1.14
0.16
29
63
220
1.13
0.15
30
63
1.13
0.17
30
63
224
1.12
0.16
31
63
1.12
0.17
31
63
Table 2: Required number of bins m1 = nζ1, m2 = nζ2 to map-
ping n items using Cuckoo hashing, and required bin size
β1, β2 to mapping n items into m1 and m2 bins using Simple
hashing.
and then falling back to 2 “supplementary” Cuckoo hash functions
when the first 3 fail. We empirically determine the parameters used
in our hashing scheme to ensure that the hashing succeeds except
with the probability less than 2−λ. The details are in Appendix B.
Simple hashing. Using the same set of hash functions, the
sender then maps his points {x1, . . . , xn} into bins, with each item
being mapped under all of the Cuckoo hash functions (i.e., each of
the sender’s items appears k times in the hash table). Using standard
balls-and-bins calculations based on n, k, and m, one can deduce an
upper bound β such that no bin contains more than β items except
with probability 1/2λ.
Denote by m1, m2 the number of bins used in 3-way “primary”
Cuckoo hashing and 2-way “supplementary” Cuckoo hashing, re-
spectively. Let β1, β2 denote the maximum bin size when using
Simple hashing to map n items to m1 and m2 bins with no overflow,
respectively. The parameters m = m1 + m2 and β ∈ {β1, β2} pre-
sented in Table 2. The details of how we obtained these numbers
are given in Appendix B.
Now within each bin, the receiver has at most one item q and
the sender has at most β, call them {(x1, y1), . . . ,(xβ , yβ)}. They
can therefore run the basic OPPRF protocol on these inputs. Note
that each of the sender’s points (x, y) is mapped to several bins.
The OPPRF in each of those bins will be programmed with the
same (x, y). That way, if the receiver does have some qi = x, then
no matter which of the possible bins it is mapped to in Cuckoo
hashing, the receiver will receive the correct output y.
The formal description of this protocol is given in Figure 7. The
protocol requires m invocations of a single-query OPPRF, where
m = O(n) is the number of Cuckoo hash bins.
In sum, we are able to evaluate OPPRF for large number of
programmed points n and large number of queries simply by having
players hash their inputs into bins, and evaluate OPPRF per bin on
small-size instances.
Caveats. One subtlety in analyzing our construction has to do
with the security definition for a programmable PRF. Recall that in
that definition (Section 3.1), the programmed output (y values) are
chosen randomly. Yet in our protocol the sender programs different
bins with correlated outputs. In particular, when an xi is mapped
to several bins, the OPPRF in each bin is programmed with the
same (xi , yi) point. To deal with this, we must use the fact that
Input of 𝒮: n points 𝒫 = {(x1, y1), . . . ,(xn, yn)}, where xi ∈
{0, 1}∗, xi (cid:44) xj and yi ∈ {0, 1}r
Input of ℛ: Q = (q1, . . . , qt) ∈ ({0, 1}∗)t .
Parameters:
• Hash function h1, . . . , h5, number of bins m ∈ {m1, m2},
and max bin size β ∈ {β1, β2}, suitable for our hashing
scheme (Table 2)
Protocol:
(1) ℛ hashes items Q into m bins using the Cuckoo hashing
scheme defined in Section 4. Let Bℛ[b] denote the item
in the receiver’s bth bin (or a dummy item if this bin is
empty).
(2) 𝒮 hashes items {x1, . . . , xn} into m1 bins under 3 hash
functions h1, h2, h3, and hashes items {x1, . . . , xn} into
m2 bins under 2 hash functions h4, h5. Let B𝒮[b] denote
the set of items in the sender’s bth bin.
(3) For c ∈ [1, 2], for each bin b ∈ [mc]:
(a) 𝒮 computes 𝒫b = {(xi , yi) | (xi , yi) ∈ 𝒫 and xi ∈
B𝒮[b]}, then pads 𝒫b with dummy pairs to the maxi-
mum bin size βc
(b) Parties invoke an instance of ℱ F,1, βc
with inputs 𝒫b
opprf
for the sender and Bℛ[b] for the receiver.
(c) 𝒮 receives output (kb , hintb), and ℛ receives output
(hintb , F(kb , hintb , Bℛ[b])).
(4) For each item qi ∈ Q, let zi = F(kb , hintb , qi) where b is
the bin to which ℛ has hashed qi. The receiver outputs
(hint1, . . . , hintm),(z1, . . . , zt)
Figure 7: Hashing-based OPPRF protocol
the receiver is guaranteed to never query two bins on the same q
(corresponding to the fact that his Cuckoo hashing assigns each q
to a unique bin).
Pi. The goal is to securely compute the intersection
5 MULTI-PARTY PSI
We now present our main result, an application of OPPRF to multi-
party PSI. We use the following notation in this section. We denote
the n parties by P1, . . . , Pn, and use subscripts i and j to refer to
individual parties. Let Xi ⊆ {0, 1}∗ denote the input set of party
i Xi. For
sake of simplicity, we assume each set has m items and write Xi =
{xi1, . . . , xi
m}. We use subscript k to refer to a particular item xi
.
As discussed at the Introduction (cf. Section 1.3), our PSI protocol
proceeds in two consecutive phases, conditional zero-sharing
and conditional reconstruction of secrets. Importantly, OPPRF
is efficient even when run on large input sets, thanks to our use of
Cuckoo hash as discussed in Section 4.
k
5.1 Conditional Zero-Sharing
We will first describe the end goal of conditional zero-sharing and
then discuss how we use multi-query OPPRF of Section 4 to achieve
it. At the end of this phase, each party Pi will have a mapping
k ∈ Xi with
Si
k). We require the following property:
an additive secret share Si(xi
: Xi → {0, 1}∗ that associates each of its items xi
Session F1:  Private Set IntersectionCCS’17, October 30-November 3, 2017, Dallas, TX, USA1263if x ∈
1
1
1
1
1
1
k
k) = S2(x
i Xi (i.e., x is in the intersection), then the corresponding
shares {Si(x) | i ∈ [n]} will XOR to zero.
To achieve this, first consider the case of two parties P1 and P2.
k ∈ X1, party P1 will choose a random string sk
For each item x
k) = sk. Then the parties can use an
and record the mapping S1(x
instance of multi-query OPPRF as follows. P1 programs the OPPRF
using points {(x
k , sk) | k ∈ [m]}, and P2 acts as receiver with
k ∈ X2 a
2
input queries X2. As a result, P2 will obtain for every x
k). From
corresponding OPPRF output, which we will denote S2(x
2
the properties of an OPPRF, the mappings S1 and S2 have the
desired property. If the parties share an item x
then both will have
S1(x
k) = sk, corresponding to an XOR-additive sharing
of 0. The properties of the OPPRF ensure that P2 does not know
whether he is receiving real shares or random values for any item.
The case of n parties is similar. Each party Pi will act as dealer for
k ∈ Xi, generating a random additive sharing
each of their items xi
k ⊕ · · · ⊕ si,n
of zero: si,1
= 0. Then each pair of parties Pi and Pj use
an instance of OPPRF as follows. Pi programs the OPPRF using
points {(xi
k ) | k ∈ [m]}, and Pj acts as receiver with input
queries Xj. In other words, s
is the share that is conditionally
sent from party Pi to Pj pertaining to item xi
k
Now each Pj has acted as OPPRF receiver for all other parties.
k ∈ Xj, the party has an OPPRF output from every
For each item x
k) the
sender Pi, along with their own share s
XOR of all of these values. It is easy to see that these Sj mappings
satisfy the desired property. If some x is shared by all parties, then
all pairs of parties will exchange shares corresponding to that item.
All shares generated by a single party XOR to zero, so all of the
Sj(x) values XOR to zero as desired.
. Denote by Sj(x
k , s
j, j
k
i, j
k
i, j
k
.
j
j
5.2 Conditional Reconstruction
The second phase of the protocol is a conditional reconstruction
of secrets. In this phase party P1 acts as a centralized “dealer.” For
each item x ∈ X1 belonging to the dealer, he would like to determine
whether x is in the intersection. It suffices for him to obtain all Si(x)
values from all the parties. However, since some parties may not
hold item x, they may not have a well-defined Si(x) value.
This problem can again be solved with an OPPRF. Each party Pi
programs an OPPRF instance on points {(x, Si(x)) | x ∈ Xi}, and P1
acts as receiver with PRF queries X1. Hence, for each item x ∈ X1,
dealer P1 learns an associated value yi from the OPPRF with party
i(cid:44)1 yi = S1(x).
i. If x is indeed in the intersection, then we expect
Otherwise the left-hand-side will be a random value.
5.3 Details and Discussion
A formal description of the protocol is in Figure 8.
k) =
1
Correctness. From the preceding high-level description, it is
clear that the protocol is correct except in the event of a false posi-
tive — i.e., S1(x
k ∈ X1 not in the intersection.
1
for some x
1
Let Pi be a party who did not have x