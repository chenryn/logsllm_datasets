134
Chapter VII
Introduction to Web Services
Cary Pennington
University of Georgia, USA
Jorge Cardoso
University of Madeira, Portugal
John A. Miller
University of Georgia, USA
Richard Scott Patterson
University of Georgia, USA
Ivan Vasquez
University of Georgia, USA
AbstrAct
This chapter introduces the theory and design principles behind Web Service technology. It explains
the models, specifications, and uses of this technology as a means to allow heterogeneous systems to
work together to achieve a task. Furthermore, the authors hope that this chapter will provide sufficient
background information along with information about current areas of research in the area of Web Ser-
vices that readers will come away with an understanding of how this technology works and ways that
it could be implemented and used.
IntroductIon allow information sharing within internationally
dispersed working groups. The original WWW
As the World-Wide Web (WWW) exploded into consisted of documents (i.e., Web pages) and
the lives of the public in the 1990s, people sud- links between documents. The initial idea of the
denly had vast amounts of information placed WWW was to develop a universal information
at their fingertips. The system was developed to database to publish information that could be ac-
Copyright © 2007, IGI Global, distributing in print or electronic forms without written permission of IGI Group is prohibited.
Introduction to Web Services
cessed in a reliable and simple way by consumers. solutions. EAI platforms were used for integrat-
The information would not only be accessible to ing incompatible and distributed systems such
users around the world, but information would as ERP (enterprise resource planning), CRM
be linked so that it could be easily browsed and (customer relationship management), SCM (sup-
quickly found by users. Organizations soon real- ply chain management), databases, data sources,
ized the importance of this technology to manage, data warehouses, and other important internal
organize, and distribute their internal data and systems across the corporate enterprise. While
information to customers and partners. useful, most EAI frameworks required costly
As organizations started to implement busi- and proprietary protocols and formats, which
ness-to-customer and e-commerce solutions, they presented many technical difficulties when it was
realized that the initial technologies associated needed to integrate internal systems with external
with the WWW were not sufficient to sell products systems running on partners’ computers.
over the Internet. Additional functionality was The limitations of EAI solutions made most
required to guarantee that transactions were con- organizations realize that integrating internal
ducted in a secure way. To this end, SSL (Secure systems with external systems to business supply
Sockets Layer), a protocol defined by Netscape, chain members was a key to staying competitive,
was developed for transmitting private documents since the majority of business processes spanned
via the Internet. Using SSL, organizations were across several organizations. Internal and external
able to implement a solution to obtain confidential systems needed to communicate over networks to
user information, such as credit card numbers. allow businesses to complete a transaction or part
With globalization, organizations were pro- of a transaction. To achieve this level of integra-
gressively undertaking mergers and acquisitions. tion, business-to-business (B2B) solutions were
This has created organizations with an IT envi- developed. B2B infrastructures were directed to
ronment composed of disparate legacy systems, help organizations to streamline their processes
applications, processes, and data sources. In order so they could carry out business transactions more
to meet increasing customer and business partner efficiently with their business partners (such as
expectations for real-time information, organiza- resellers and suppliers). To reach a higher level
tions were required to link their heterogeneous, of integration, most B2B solutions have relied on
autonomous and distributed systems to improve the use of XML as the language to represent data.
productivity and efficiency. This important XML allows one to model data at any level of
requirement led to the development and deploy- complexity since it is extensible with the addition
ment of EAI (enterprise application integration) of new tags. Data can be published in multiple
Figure 1. The evolution of business usage on the WWW

Introduction to Web Services
formats. In contrast to the proprietary protocols development of today’s Web service technology.
used by EAI platforms, XML is vendor and plat- The guiding principle behind the development of
form independent allowing standard commercial Web service technology is SOA which is described
software to process any conforming document. in the third section. The fourth section gives an
Many organizations have already seen and overview of the role of Web services in the context
experience the advantages in using XML to rep- of SOA. This section gives a description of today’s
resent data for Web-based information exchanges standards and technologies for Web services. The
(such as B2B communications). Nevertheless, fifth section introduces the second-generation of
organizations realized that their B2B strategies Web Services Protocols. It looks in detail at the
have lead the development of architectural solu- threats and standards relevant to the Web Services
tions that often exhibited a tight-coupling among Security landscape and examines problems and
interacting software applications which limited solutions in reliability and transactions of Web
the flexibility and dynamic adaptation of IT sys- Services. Clearly, these areas must be addressed
tems. As a result and to overcome these limita- before Web service technology will be widely
tions, the concept of service-oriented architecture adopted. The sixth section explains how to develop
(SOA) was introduced and defined a method of Web services starting from the initial design and
designing, developing, deploying and managing continuing until deployment and publication. A
discrete pieces of computer logic (i.e., services) summary and conclusions can be found in the
within the WWW. The SOA goals are to achieve last section of this chapter.
structuring, loose coupling, and standardization
of business functionality among interacting
software applications. Applications invoke a a briEf history of
series of discrete services in order to perform a distributEd coMPutinG
certain task. A service is carried out by a service
provider in response to the request of a service Once networking became widespread across
consumer. The most prominent implementation academia and industry, it became necessary to
of the SOA principle uses XML and Web services share data and resources. In the early years of dis-
as its technological backbone. tributed computing, message passing (e.g., using
Web services are based on distributed com- for example sockets developed in the early 1980s)
puting technology and provide a standard means was the prevailing method for communication.
of interoperating between different software This involved encoding the data into a message
applications across, and within, organizational format (i.e., how a structured piece of information
boundaries, using XML protocols and formats. is encoded prior to transmission) and sending the
Web Services comply with several WWW stan- encoded data over the wire. The socket interface
dards, such as Web Services Definition Language allowed message passing using send and receive
(WSDL) and Simple Object Access Protocol primitives on transmission control protocol (TCP)
(SOAP). These standards enable interoperability or user datagram protocol (UDP) transport proto-
by using XML-based communications protocols cols for low-level messaging over Internet protocol
and service definitions. The use of standard XML (IP) networks. Applications communicated by
protocols makes Web services platform, language, sending and receiving text messages. In most
and vendor independent, and an ideal candidate cases, the messages exchanged conformed to an
for use in SOA implementations. application-level protocol defined by program-
This chapter will introduce SOA, Web service mers. This worked well but was cumbersome in
technology and its standards. It begins in the the fact that the data had to be coded and then
second section, with a brief history of distributed decoded. Using this approach, two programmers
computing, which serves as the backdrop for the developing a distributed application must have
6
Introduction to Web Services
knowledge of what the other is doing to the data. they are running on (for example, Linux, Solaris,
Programmers had to spend a significant amount Microsoft Windows, or MacOS). Another primary
of time specifying a messaging protocol and feature of CORBA is its interoperability between
mapping the various data structures to and from various programming languages. Distributed
the common transmission format. objects can be written in various languages (such
As the development of distributed comput- as Java, C++, C, Ada, etc.). The main component
ing applications increased, new mechanisms of CORBA is the ORB (object request broker).
and approaches became necessary to facilitate Objects residing in a client make remote requests
the construction of distributed applications. The using an interface to the ORB running on the lo-
first distributed computing technology to gain cal machine. The local ORB sends the request to
widespread use was remote procedure call (RPC). the remote ORB, which locates the appropriate
RPC technology was made popular in the 1980s object residing in a server and passes back an
by Sun Microsystems. RPC uses the client/server object reference to the requester. An object resid-
model and extends the capabilities of traditional ing in a client can then make the remote method
procedure calls across a network. Remote proce- invocation of a remote object. When this happens
dure calls are designed to be similar to making the ORB marshals the arguments and sends the
local procedure calls. While in a traditional local invocation over the network to the remote object’s
procedure call paradigm the code segments of ORB which invokes the method locally and sends
an application and the procedure it calls are in the results back to the client.
the same address space, in a remote procedure DCOM (Brown & Kindel, 1996) is a protocol,
call the called procedure runs in another process developed by Microsoft, which enables commu-
and address space across the network on another nication between two applications running on
processor. distributed computers in a reliable, secure, and
RPC (Birrell, 1995) proved to be an adequate efficient manner. DCOM is an extension of the
solution for the development of two-tier client/ Component Object Model (COM). COM is an
server architectures. As distributed computing object-based programming model and defines
became more widespread, the need to develop, for how components and their clients interact. COM
example, N-tier applications emerged and RPC allows the development of software components
could not provide the flexibility and functional- using a variety of languages and platforms to be
ity required. easily deployed and integrated. The distributed
With such applications, multiple machines may COM protocol extends the programming model
need to operate simultaneously on the same set of introduced by COM to work across the network
data. Therefore, the state of that data became of by using proxies and stubs. Proxies and stubs
great concern. Research in the area of distributed allow remote objects to appear to be in the same
objects allowed overcoming this problem with the address space as the requesting object. When a
specification of two competing technologies: com- client instantiates a component that resides out-
mon object request broker architecture (CORBA) side its address space, DCOM creates a proxy to
and distributed common object model (DCOM). marshal methods calls and route them across the
Later, Java remote method invocation (RMI) was network. On the server-side, DCOM creates a
developed and also became a competitor. stub, which unmarshals method calls and routes
The CORBA [4, 5] standard was developed by them to an instance of the component.
the Object Management Group (OMG) starting in Java RMI (Dwoning, 1998) is a package for
the 1990’s and defines an architecture that specifies writing and executing distributed Java programs
interoperability between distributed objects on a by facilitating object method calls between dif-
network. With CORBA, distributed objects can ferent Java Virtual Machines (JVM) across a
communicate regardless of the operating system network. Java RMI hides most of the aspects of the

Introduction to Web Services
distribution and provides a conceptually uniform ment for this technology. In the next sections, we
way by which local and distributed objects can will see that Web services are currently the most
be accessed. An RMI application consists of a natural solution to develop distributed systems
server interface, a server implementation, a server in the Web.
skeleton, a client stub, and a client implementa-
tion. The server implementation creates remote
objects that conform to the server interface. These sErvicE-oriEntEd
objects are available for method invocation to architEcturE
clients. When a client wishes to make a remote
method invocation it invokes a method on the As we have seen, in the 1980s distributed com-
local stub, which is responsible for carrying out puting was introduced. This research led to the
the method call on the remote object. The stub development of distributed objects architectures
acts as a local proxy. A server skeleton exists for through the 1990’s. The distributed platforms
each remote object and is responsible to handle developed, such as Java RMI and DCOM, had
incoming invocations from clients. several restrictions. For example, RMI was limited
CORBA, DCOM, and Java RMI enjoyed to Java, while DCOM was limited to Microsoft
considerable success, but they present a set of platforms. Moreover, distributed applications
shortcoming and limitations when used in Web developed using different platforms were difficult
environments. For example, they tend to create to integrate. Integration was and is still one of the
tightly-coupled distributed systems, some are major concerns for Chief Information Officers.
vendor and platform specific (e.g., COM/DCOM Figure 2 gives us a very good indication that ap-
only runs on Windows), the distributed systems plication integration tops the priority list of high
developed run on closely administered environ- ranking business people.
ment, some use complex and proprietary pro- To cope with the restrictions of more traditional
tocols, and specific message formats and data distributed objects architectures, in the early
representation. With the growth of the Web, the 2000’s, the concept of service-oriented architec-
search soon started for a Web compliant replace- ture (SOA) was introduced (or reintroduced, since
Figure 2. Priority list of CIOs (Channabasavaiah & Tuggle, 2003)
Top strategic software platform projects
Deregulation %
Other %
Manufacturing software %
Engineering software %
Building Internet Company %
Sys. Mgmt infrastructure %
e-procurement Web site %
Commerce Server %
Marketing apps on Web site %
Financial (Accounting) 6%
Intranet Improvements 9%
Database upgrade %
HR %
SCM/Logistics %
CRM 0%
e-business %
Application Integration %
0% % 0% % 0% % 0% % 0%
% of respondents

Introduction to Web Services
in reality, the concept SOA was defined by Sun on building services for business users rather
in the late 1990’s to describe Jini (Waldo, 1999)). than connecting systems and applications.
SOA describes an approach which facilitates the • Standards: Interaction protocols must be
development and composition of modular services standardized to ensure the widest interoper-
that can be easily integrated and reused to create
ability among unrelated institutions. Con-
distributed applications. It promises the develop-
tracts should also be standardized. Explicit
ment of truly flexible and adaptable IT infrastruc-
contracts define what may be changed in an
tures. According to the W3C, a Service-Oriented
application without breaking the interaction.
Architecture is a set of components which can be
Furthermore, standards are the basis of
invoked, and whose interface descriptions can
interoperable contract selection and execu-
be published and discovered. Components are
tion.
made available as independent services that are
accessed in a standardized way.
When comparing SOA with previous ap-
In order for SOA to enjoy greater success than
proaches we can find the following major differ-
it predecessors, it should consider the following
ences. Traditional Middleware, such as distributed
attributes:
object systems, are based on the client-server
paradigm, have heavily asymmetric interaction
• Scalable: The past solutions were not de-
model, are biased towards synchronous protocols,
signed with the scale of the Web in mind.
assign public interfaces to network accessible
SOA should work in a variety of settings,
objects, and support “name-oriented” object
such as within an organization, between
discovery. On the other hand, service-oriented
business partners and across the world.
Middleware are based on a peer-to-peer para-
• Loosely-coupled: SOA is an evolution from
digm, have symmetric interaction models, mixes
tightly coupled systems to loosely coupled synchronous and asynchronous protocols, assigns
ones. Senders and receivers of a SOA should public contracts to network accessible objects,
be independent of each other; the source can and supports capability based service discovery
send the message independently of the target. (Cardoso, Curbera, Sheth, 2004).
Tight coupling is not suitable for SOA since
it leads to monolithic and brittle distributed service oriented architecture and
applications. Even trivial changes in one Web services
component lead to catastrophic breaks in
function. Small changes in one application Most distributed computing technologies have the