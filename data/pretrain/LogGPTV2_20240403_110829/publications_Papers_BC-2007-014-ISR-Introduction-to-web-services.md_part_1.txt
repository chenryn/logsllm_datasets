### Chapter VII: Introduction to Web Services

**Authors:**
- Cary Pennington, University of Georgia, USA
- Jorge Cardoso, University of Madeira, Portugal
- John A. Miller, University of Georgia, USA
- Richard Scott Patterson, University of Georgia, USA
- Ivan Vasquez, University of Georgia, USA

**Abstract:**
This chapter provides an in-depth introduction to the theory and design principles underlying Web Service technology. It delves into the models, specifications, and applications of this technology, which enables heterogeneous systems to collaborate effectively to achieve a common goal. The authors aim to offer sufficient background information and insights into current research areas in Web Services, ensuring that readers gain a comprehensive understanding of how this technology operates and how it can be implemented and utilized.

**Introduction:**
As the World Wide Web (WWW) became a ubiquitous part of public life in the 1990s, it provided unprecedented access to vast amounts of information. The initial concept of the WWW was to create a universal information database, accessible in a reliable and straightforward manner. This system not only made information globally available but also facilitated easy browsing and quick discovery by users. Organizations soon recognized the potential of this technology for managing, organizing, and distributing internal data and information to customers and partners.

However, as organizations began to implement business-to-customer and e-commerce solutions, they realized that the initial technologies associated with the WWW were insufficient for secure online transactions. To address this, the Secure Sockets Layer (SSL) protocol, developed by Netscape, was introduced to ensure the secure transmission of private documents over the Internet. SSL enabled organizations to securely collect confidential user information, such as credit card numbers.

With globalization, organizations increasingly engaged in mergers and acquisitions, leading to IT environments composed of disparate legacy systems, applications, processes, and data sources. To meet the growing demand for real-time information from customers and business partners, organizations needed to integrate their heterogeneous, autonomous, and distributed systems to enhance productivity and efficiency. This requirement led to the development and deployment of Enterprise Application Integration (EAI) platforms, which, while useful, often required costly and proprietary protocols, making integration with external systems challenging.

To overcome these limitations, the concept of Service-Oriented Architecture (SOA) was introduced. SOA aims to achieve structuring, loose coupling, and standardization of business functionality among interacting software applications. Applications in an SOA environment invoke a series of discrete services to perform specific tasks. The most prominent implementation of SOA uses XML and Web services as its technological backbone.

Web services are based on distributed computing technology and provide a standard means of interoperating between different software applications across organizational boundaries using XML protocols and formats. They comply with several WWW standards, such as Web Services Definition Language (WSDL) and Simple Object Access Protocol (SOAP). These standards enable interoperability through XML-based communication protocols and service definitions, making Web services platform, language, and vendor independent, and ideal for SOA implementations.

**A Brief History of Distributed Computing:**
The advent of networking in academia and industry necessitated the sharing of data and resources. In the early days of distributed computing, message passing, often using sockets, was the primary method of communication. This involved encoding data into a message format and sending it over the network. While effective, this approach was cumbersome, requiring significant effort to specify messaging protocols and map data structures to a common transmission format.

As distributed computing evolved, new mechanisms and approaches emerged to facilitate the construction of distributed applications. Remote Procedure Call (RPC), popularized by Sun Microsystems in the 1980s, extended the capabilities of traditional procedure calls to operate across a network. However, RPC proved inadequate for more complex, multi-tier applications, leading to the development of other distributed computing technologies such as Common Object Request Broker Architecture (CORBA), Distributed Component Object Model (DCOM), and Java Remote Method Invocation (RMI).

**Service-Oriented Architecture (SOA):**
SOA is an architectural approach that facilitates the development and composition of modular services that can be easily integrated and reused to create distributed applications. It promises the development of flexible and adaptable IT infrastructures. According to the W3C, a Service-Oriented Architecture is a set of components that can be invoked, with interface descriptions that can be published and discovered. Components are made available as independent services accessed in a standardized way.

Compared to traditional middleware, such as distributed object systems, SOA is based on a peer-to-peer paradigm, supports both synchronous and asynchronous protocols, and assigns public contracts to network-accessible objects. SOA should be scalable, working in various settings, and loosely coupled, allowing senders and receivers to operate independently. This loose coupling is essential for the flexibility and adaptability of distributed applications.

**Web Services and SOA:**
Most distributed computing technologies have limitations when used in Web environments. They tend to create tightly-coupled systems, are often vendor-specific, and use complex, proprietary protocols. With the growth of the Web, there was a need for a Web-compliant replacement. Web services, based on XML and standardized protocols like WSDL and SOAP, emerged as the natural solution for developing distributed systems in the Web environment.

**Conclusion:**
This chapter has introduced the key concepts and principles of Web Services and SOA. It has provided a historical context for the evolution of distributed computing and highlighted the advantages of Web services in creating flexible, interoperable, and scalable distributed applications. Future sections will delve into the technical details of Web services, including standards, security, and development practices, providing a comprehensive guide for implementing and utilizing this technology.

---

**Figure 1.** The evolution of business usage on the WWW

**Figure 2.** Priority list of CIOs (Channabasavaiah & Tuggle, 2003)

**Top Strategic Software Platform Projects:**
- Deregulation: 5%
- Other: 5%
- Manufacturing Software: 5%
- Engineering Software: 5%
- Building Internet Company: 5%
- System Management Infrastructure: 15%
- E-procurement Website: 15%
- Commerce Server: 15%
- Marketing Apps on Website: 15%
- Financial (Accounting): 16%
- Intranet Improvements: 19%
- Database Upgrade: 20%
- HR: 20%
- SCM/Logistics: 20%
- CRM: 20%
- E-business: 25%
- Application Integration: 25%

**% of Respondents:**
- 0% - 5% - 10% - 15% - 20% - 25% - 30% - 35% - 40%

---

**Copyright Notice:**
Copyright Â© 2007, IGI Global. Distribution in print or electronic forms without written permission of IGI Group is prohibited.