### SQL Injection and Authentication Policies

To ensure the security of SQL queries, we utilize `mysql_real_escape_string()` to sanitize input. Any attempt to execute a SQL query with the unsafe SQL tag bit set is flagged as a potential SQL injection attack. This policy helps in confirming that DIFT (Dynamic Information Flow Tracking) can identify both false positives and real-world SQL injection vulnerabilities in web applications.

DIFT treats all user inputs as untrusted. However, some web applications allow privileged users, such as administrators, to submit full SQL queries. As discussed in Section 6, we address false positives by implementing authentication policies that restrict SQL injection protection to non-administrative users. Our findings confirm that these false positives are due to a lack of authentication information rather than any approximations in our SQL injection protection implementation.

### Experimental Results

To validate Nemesis, we used our prototype to protect a wide range of vulnerable real-world PHP applications from authentication and access control bypass attacks. Table 1 summarizes the applications, their vulnerabilities, and the lines of code added or modified for protection.

For each application, we specified where the application stores its username and password database or the function it uses for user authentication. This step is straightforward, and the "authentication inference" column in Table 1 indicates the amount of code added to specify the table for storing known-good passwords and tainting them with the "credential" taint bit.

We also defined ACLs (Access Control Lists) for files and database tables to prevent unauthorized access. The number of access control rules for each application is shown in Table 1. Currently, we enforce ACLs via explicitly inserted checks, which slightly increase the lines of code needed. As we develop a full MySQL parser and query rewriter, we expect this overhead to decrease.

We validated our rules by extensively using each web application to ensure there are no false positives and verifying that our rules prevent known real-world attacks. We also confirmed that our shadow authentication information prevents false positives in DIFT SQL injection analyses for both DeluxeBB and phpMyAdmin.

### Case Studies

#### 6.1 PHP iCalendar

PHP iCalendar is a PHP web application for presenting calendar information. The administrator is authenticated using a configuration file. Our ACL for PHP iCalendar allows read access to template files, language files, and calendars. Caches can be read or written by any user, while the admin can write, create, and delete calendar files and read uploaded calendars. We added 8 authorization checks to enforce the ACL.

A vulnerability in PHP iCalendar occurs because a script incorrectly validates a login cookie, allowing an attacker to forge a cookie and authenticate as the admin. Using Nemesis, the attacker's shadow authentication username remains unaffected, preventing administrative actions.

#### 6.2 Phpstat

Phpstat is an application for presenting IM statistics. It stores authentication credentials in a database table. The ACL allows users to read and write cache files and read statistics, but not to view passwords. The admin can create and update users and statistics. We added 10 authorization checks.

A vulnerability exists because an installation script resets the admin password without access control checks. Using Nemesis, the attacker cannot change the admin password due to ACL restrictions.

#### 6.3 Bilboblog

Bilboblog is a simple PHP blogging application. The ACL permits all users to read and write blog caching directories and read articles. Only the admin can modify or insert new entries. A vulnerability exists due to uninitialized variables in a script, allowing an attacker to supply admin credentials. Nemesis prevents this attack by ensuring only valid passwords are used for shadow authentication.

#### 6.4 phpFastNews

phpFastNews is a PHP news display application. The ACL allows users to read the news spool and restricts write access to the admin. An authentication bypass vulnerability exists due to insecure cookie validation. Nemesis prevents administrative actions by the attacker.

#### 6.5 Linpha

Linpha is a PHP web gallery application. The ACL allows users to read image files, write to temporary and cache directories, and insert thumbnails. The admin can update various tables. A SQL injection vulnerability in the login script allows an attacker to bypass authentication. Nemesis prevents administrative actions by the attacker.

#### 6.6 DeluxeBB

DeluxeBB is a PHP web forum application. The ACL is complex, allowing users to read and write to certain directories and tables. Unauthenticated users can register, and their credentials are shadow authenticated. A vulnerability in the private message script allows an attacker to forge a cookie and bypass authentication. Nemesis prevents administrative actions by the attacker.

### Summary

Our experiments with Nemesis demonstrate its effectiveness in protecting PHP applications from authentication and access control bypass attacks. By implementing robust ACLs and shadow authentication, we have successfully mitigated known vulnerabilities and prevented false positives in SQL injection detection.