as mysql real escape string(), clear this tag bit.
Any attempt to execute a SQL query with the unsafe SQL
tag bit set is reported as a SQL injection attack.
We use this SQL injection policy to conﬁrm that DIFT
SQL Injection has false positives and real-world web ap-
plications. This is because DIFT treats all user input as
untrusted, but some web applications allow privileged
users such as the admin to submit full SQL queries. As
discussed in Section 6, we eliminate all encountered false
positives using authentication policies which restrict SQL
injection protection to users that are not shadow authen-
ticated as the admin user. We have conﬁrmed that all of
these false positives are due to a lack of authentication
information, and not due to any approximations made in
our SQL injection protection implementation.
6 Experimental Results
To validate Nemesis, we used our prototype to protect
a wide range of vulnerable real-world PHP applications
from authentication and access control bypass attacks. A
summary of the applications and their vulnerabilities is
given in Table 1, along with the lines of code that were
added or modiﬁed in order to protect them.
For each application, we had to specify where the ap-
plication stores its username and password database, or
what function it invokes to authenticate users. This step is
quite simple for all applications, and the “authentication
inference” column indicates the amount of code we had to
add to each application to specify the table used to store
known-good passwords, and to taint the passwords with
the “credential” taint bit.
We also speciﬁed ACLs on ﬁles and database tables
to protect them from unauthorized accesses; the number
of access control rules for each application is shown in
the table. As explained in Section 5, we currently enforce
ACLs via explicitly inserted checks, which slightly in-
creases the lines of code needed to implement the check
(shown in the table as well). As we develop a full MySQL
parser and query rewriter, we expect the lines of code
needed for these checks to drop further.
We validated our rules by using each web application
extensively to ensure there are no false positives, and then
verifying that our rules prevented real-world attacks that
have been found in these applications in the past. We also
veriﬁed that our shadow authentication information is able
to prevent false positives in DIFT SQL injection analyses
for both the DeluxeBB and phpMyAdmin applications.
6.1 PHP iCalendar
PHP iCalendar is a PHP web application for presenting
calendar information to users. The webapp administra-
tor is authenticated using a conﬁguration ﬁle that stores
the admin username and password. Our ACL for PHP
iCalendar allows users read access to various template
ﬁles, language ﬁles, and all of the calendars. In addition,
caches containing parsed calendars can be read or written
by any user. The admin user is able to write, create, and
delete calendar ﬁles, as well as read any uploaded calen-
dars from the uploads directory. We added 8 authorization
checks to enforce our ACL for PHP iCalendar.
An authentication bypass vulnerability occurs in PHP
iCalendar because a script in the admin subdirectory in-
correctly validates a login cookie when resuming a ses-
sion [20]. This vulnerability allows a malicious user to
forge a cookie that will cause her to be authenticated as
the admin user.
Using Nemesis, when an attacker attempts to exploit
the authentication bypass attack, she will ﬁnd that her
shadow authentication username is not affected by the
attack. This is because shadow authentication uses its
own secure form of cookie authentication, and stores its
credentials separately from the rest of the web application.
When the attacker attempts to use the admin scripts to
perform any actions that require admin access, such as
deleting a calendar, a security violation is reported be-
cause the shadow authentication username will not be
’admin’, and the ACL will prevent that username from
performing administrative operations.
6.2 Phpstat
Phpstat is an application for presenting a database of IM
statistics to users, such as summaries and logs of their IM
11
Program
LoC
in program auth inference ACL checks ACL checks
LoC for
Number of
LoC for
PHP iCalendar
phpStat (IM Stats)
Bilboblog
phpFastNews
Linpha Image Gallery
DeluxeBB Web Forum
13500
12700
2000
500
50000
22000
3
3
3
5
15
6
8
10
4
2
17
82
22
17
11
17
49
143
Table 1: Applications used to evaluate Nemesis.
Vulnerability
prevented
Authentication bypass
Missing access check
Invalid access check
Authentication bypass
Authentication bypass
Missing access check
conversations. Phpstat stores its authentication credentials
in a database table.
The access control list for PhpStat allows users to read
and write various cache ﬁles, as well as read the statistics
database tables. Users may also read proﬁle information
about any other user, but the value of the password ﬁeld
may never be sent back to the Web client. The administra-
tive user is also allowed to create users by inserting into
or updating the users table, as well as all of the various
statistics tables. We added 10 authorization checks to
enforce our ACL for PhpStat.
A security vulnerability exists in PhpStat because an
installation script will reset the administrator password if
a particular URL parameter is given. This behavior occurs
without any access control checks, allowing any user to
reset the admin password to a user-speciﬁed value [21].
Successful exploitation grants the attacker full adminis-
trative privileges to the Phpstat. Using Nemesis, when
this attack occurs, the attacker will not be shadow au-
thenticated as the admin, and any attempts to execute
a SQL query that changes the password of the adminis-
trator are denied by our ACL rules. Only users shadow
authenticated as the admin may change passwords.
6.3 Bilboblog
Bilboblog is a simple PHP blogging application that au-
thenticates its administrator using a username and pass-
word from a conﬁguration ﬁle.
Our ACL for bilboblog permits all users to read and
write blog caching directories, and read any posted articles
from the article database table. Only the administrator is
allowed to modify or insert new entries into the articles
database table. Bilboblog has an invalid access control
check vulnerability because one of its scripts, if directly
accessed, uses uninitialized variables to authenticate the
admin user [3]. We added 4 access control checks to
enforce our ACL for bilboblog.
In PHP, if the register globals option is set, unini-
tialized variables may be initialized at startup by user-
supplied URL parameters [22]. This allows a malicious
user to supply the administrator username and password
that the login will be authenticated against. The attacker
may simply choose a username and password, access
the login script with these credentials encoded as URL
parameters, and then input the same username and pass-
word when prompted by the script. This attack grants the
attacker full administrative access to Bilboblog.
This kind of attack does not affect shadow authentica-
tion. A user is shadow authenticated only if their input
is compared against a valid password. This attack in-
stead compares user input against a URL parameter. URL
parameters do not have the password bit set – only pass-
words read from the conﬁguration do. Thus, no shadow
authentication occurs when this attack succeeds. If an
attacker exploits this vulnerability on a system protected
by our prototype, she will ﬁnd herself unable to perform
any privileged actions as the admin user. Any attempt
to update, delete, or modify an article will be prevented
by our prototype, as the current user will not be shadow
authenticated as the administrator.
6.4 phpFastNews
PhpFastNews is a PHP application for displaying news
stories. It performs authentication via a conﬁguration
ﬁle with username and password information. This web
application displays a news spool to users. Our ACL for
phpFastNews allows users to read the news spool, and
restricts write access to the administrator. We added 2 ac-
cess control checks to enforce our ACL for phpFastNews.
An authentication bypass vulnerability occurs in php-
FastNews due to insecure cookie validation [19], much
like in PHP iCalendar. If a particular cookie value is set,
the user is automatically authenticated as the administra-
tor without supplying the administrator’s password. All
the attacker must do is forge the appropriate cookie, and
full admin access is granted.
Using Nemesis, when the authentication bypass attack
occurs, our prototype will prevent any attempt to perform
administrator-restricted actions such as updating the news
spool because the current user is not shadow authenticated
as the admin.
12
6.5 Linpha
Linpha is a PHP web gallery application, used to display
directories of images to web users. It authenticates its
users via a database table.
Our ACL for Linpha allows users to read ﬁles from the
images directory, read and write ﬁles in the temporary and
cache directories, and insert entries into the thumbnails
table. Users may also read from the various settings,
group, and conﬁguration tables. The administrator may
update or insert into the users table, as well as the settings,
groups, and categories tables. Dealing with access by non-
admin users to the user table is the most complex part of
the Linpha ACL, and is our ﬁrst example of a database
row ACL. Any user may read from the user table, with
the usual restriction that passwords may never be output
to the Web client via echo, print, or related commands.
Users may also update entries in the user table. Up-
dating the password ﬁeld must be restricted so that a
malicious user cannot update the other passwords. This
safety restriction can be enforced by ensuring that only
user table rows that have a username ﬁeld equal to the
current shadow authenticated user can be modiﬁed. The
exception to this rule is when the new password is un-
tainted. This can occur only when the web application
has internally generated the new user password without
using user input. We allow these queries even when they
affect the password of a user that is not the current shadow
authenticated user because they are used for lost password
recovery.
In Linpha, users may lose their password, in which case
Linpha resets their password to an internally generated
value, and e-mails this password to the user. This causes
an arbitrary user’s password to be changed on the behalf
of a user who isn’t even authenticated. However, we
can distinguish this safe and reasonable behavior from an
attack by a user attempting to change another user’s pass-
word by examining the taint of the new password value
in the SQL query. Thus, we allow non-admin users to
update the password ﬁeld of the user table if the password
query is untainted, or if the username of the modiﬁed row
is equal to the current shadow authenticated user. Overall,
we added 17 authorization checks to enforce all of our
ACLs for Linpha.
Linpha also has an authentication bypass vulnerability
because one of its scripts has a SQL injection vulnerabil-
ity in the SQL query used to validate login information
from user cookies [13]. Successful exploitation of this
vulnerability grants the attacker full administrative access
to Linpha. For this experiment, we disabled SQL injection
protection provided by the tainting framework we used
to implement the Nemesis prototype [29], to allow the
user to submit a malicious SQL query in order to bypass
authentication entirely.
Using Nemesis, once a user has exploited this authen-
tication bypass vulnerability, she may access the various
administration scripts. However, any attempt to actually
use these scripts to perform activities that are reserved
for the admin user will fail, because the current shadow
authenticated user will not be set to admin, and our ACLs
will correspondingly deny any admin-restricted actions.
6.6 DeluxeBB
DeluxeBB is a PHP web forum application that supports a
wide range of features, such as an administration console,
multiple forums, and private message communication
between forum users. Authentication is performed using
a table from a MySQL database.
DeluxeBB has the most intricate ACL of any appli-
cation in our experiments. All users in DeluxeBB may
read and write ﬁles in the attachment directory, and the
admin user may also write to system log ﬁles. Non-admin
users in DeluxeBB may read the various conﬁguration
and settings tables. Admin users can also write these ta-
bles, as well as perform unrestricted modiﬁcations to the
user table. DeluxeBB treats user table updates and lost
password modiﬁcations in the same manner as Linpha,
and we use the equivalent ACL to protect the user table
from non-admin modiﬁcations and updates.
DeluxeBB allows unauthenticated users to register via
a form, and thus unauthenticated users are allowed to
perform inserts into the user table. As described in Sec-
tion 3.4, inserting a user into the user table results in
shadow authentication with the credentials of the inserted
user.
The novel and interesting part of the ACLs for
DeluxeBB are the treatment of posts, thread creation,
and private messages. All inserts into the post, thread
creation, or private message tables are rewritten to use the
shadow authenticated user as the value for the author ﬁeld
(or the sender ﬁeld, in the case of a private message). The
only exception is when a query is totally untainted. For
example, when a new user registers, a welcome message
is sent from a fake system mailer user. As this query is
totally untainted, we allow it to be inserted into the pri-
vate message table, despite the fact that the identity of the
sender is clearly forged. We added ﬁelds to the post and
thread tables to store the username of the current shadow
authenticated user, as these tables did not directly store
the author’s username. We then explicitly instrumented
all SQL INSERT statements into these tables to append
this information accordingly.
Any user may read from the thread or post databases.
However, our ACL rules further constrain reads from the
private message database. A row may only be read from
the private message database if the ’from’ or ’to’ ﬁelds of
the row are equal to the current shadow authenticated user.
13
We manually instrumented all SELECT queries from the
private message table to add this condition to the WHERE
clause of the query. In total, we modiﬁed 16 SQL queries
to enforce both our private message protection and our
INSERT rules to prevent spooﬁng messages, threads, and
posts. We also inserted 82 authorization checks to enforce
the rest of the ACL.
A vulnerability exists in the private message script
of this application [6]. This script incorrectly validates
cookies, missing a vital authentication check. This allows
an attacker to forge a cookie and be treated as an arbitrary