would be unsound if aliasing of a local variable is possi-
ble. For example, consider the following code snippet:
int x; int *y = &x;
x = u; *y = v;
If u is untainted and v is tainted, then the value stored in
x should be tainted at the end of the above code snippet.
However, if we introduced a local variable, say, tag x,
to store the taint value of x, then we cannot make sure
that it will get updated by the assignment to *y.
To ensure that taint information is tracked accurately,
our transformation uses local taint tag variables only
in those cases where no aliasing is possible, i.e., the
optimization is limited to simple variables (not arrays)
whose address is never taken. However, this alone is not
enough, as aliasing may still be possible due to memory
errors. For instance, a simple variable x may get updated
due to an out-of-bounds access on an adjacent array, say,
z. To eliminate this possibility, we split the runtime stack
into two stacks. The main stack stores only simple vari-
ables whose addresses are never taken. This stack is also
used for call-return. All other local variables are stored
in the second stack, also called shadow stack.
The last possibility for aliasing arises due to pointer-
forging.
In programs with possible memory errors, a
pointer to a local variable may be created. However, with
the above transformation, any access to the main stack
using a pointer indicates a memory error. We show how
to implement an efﬁcient mechanism to prevent access
to some sections of memory in the transformed program.
Using this technique, we prevent all accesses to the main
stack except using local variable names, thus ensuring
that taint information can be accurately tracked for the
variables on the main stack using local taint tag variables.
Intra-procedural dependency analysis
is performed
to determine whether a local variable can ever become
tainted, and to remove taint updates if it cannot. Note
that a local variable can become tainted only if it is in-
volved in an assignment with a global variable, a pro-
cedure parameter, or another local variable that can be-
come tainted. Due to aliasing issues, this optimization is
applied only to variables on the main stack.
3.4 Protecting Memory Regions
To ensure accurate taint-tracking, it is necessary to pre-
clude access to certain regions of memory. Speciﬁcally,
we need to ensure that the tagmap array itself cannot
be written by the program. Otherwise, tagmap may be
corrupted due to programming errors, or even worse, a
carefully crafted attack may be able to evade detection by
modifying the tagmap to hide the propagation of tainted
data. A second region that needs to be protected is the
main stack. Third, it would be desirable to protect mem-
ory that should not directly be accessed by a program,
e.g., the GOT. (Global Offset Table is used for dynamic
linking, but there should not be any reference to the GOT
in the C code. If the GOT is protected in this manner,
that would rule out attacks based on corrupting a func-
tion pointer in the GOT.)
The basic idea is as follows. Consider an assignment
to a memory location a. Our transformation ensures that
an access to tagmap[a] will be made before a is ac-
cessed. Thus, in order to protect a range of memory lo-
cations l—h, it is enough if we ensure that tagmap[l]
through tagmap[h] will be unmapped. This is easy
to do, given our incremental approach to allocation of
tagmap. Now, any access to addresses l through h will
result in a memory fault when the corresponding tagmap
location is accessed.
Note that l and h cannot be arbitrary: they should fall
on a 16K boundary, if the page size is 4KB and if 2 bit
tainting is used. This is because mmap allocates mem-
ory blocks whose sizes are a multiple of a page size.
This alignment requirement is not a problem for tagmap,
since we can align it on a 16K boundary. For the main
126
Security ’06: 15th USENIX Security Symposium
USENIX Association
Attack Type
Control-ﬂow
hijack
Format string
Directory
traversal
Cross-site
scripting
SQL injection
Shell command
injection
Policy
jmp(addr) |
addr matches (any+)t → term()
Format ="%[ˆ%]"
vfprintf(f mt) |f mt matches any∗ (Format)T any∗ → reject()
DirTraversalModiﬁer = ".."
ﬁle function(path) =
open(path, ) || unlink(path) || ...
ﬁle function(path) |
path matches any ∗ (DirTraversalModiﬁer)T any∗
&& escapeRootDir(path) → reject()
ScriptTag = " 0) →
if (isNetworkEndpoint(fd))
taint_buffer(buf, rv);
else untaint_buffer(buf, rv);
This rule states that when the read function returns, the
buf argument will be tainted, based on whether the read
was from a network or not, as determined by the exter-
nal function isNetworkEndpoint. The actual tainting
is done using two support functions taint buffer and
untaint buffer.
Note that every input action needs to have an associ-
ated marking rule. To reduce the burden of writing many
rules, we provide default rules for all system calls that
untaint the data returned by each system call. Speciﬁc
rules that override these default rules, such as the rule
given above, can then be supplied by a user.
4.2 Specifying Policies
Security policies are also written using BMSL, but these
rules are somewhat different from the marking rules. For
a policy rule involving a function f, its condition compo-
nent is examined immediately before any invocation of f.
To simplify the policy speciﬁcation, abstract events can
be deﬁned to represent a set of functions that share the
same security policy. (Abstract events can be thought of
as macros.)
The deﬁnition of condition is also extended to sup-
port regular-expression based pattern matching, using the
USENIX Association
Security ’06: 15th USENIX Security Symposium
127
keyword matches. We use taint-annotated regular ex-
pressions deﬁned as follows. A tainted regular expres-
sion is obtained for a normal regular expression by at-
taching a superscript t, T or u. A string s will match
a taint-annotated regular expression rt provided that s
matches r, and at least one of the characters in s is
tainted. Similarly, s will match rT provided all char-
acters in s are tainted. Finally, s will match ru provided
none of the characters in s are tainted.
The predeﬁned pattern any matches any single char-
acter. Parentheses and other standard regular expression
operators are used in the usual way. Moreover, taint-
annotated regular expressions can be named, and the
name can be reused subsequently, e.g., StrIdNum used
in many sample policy rules is deﬁned as:
StrIdNum = String | Id | Num
where String, Id and Num denote named regular ex-
pressions that correspond respectively to strings, identi-
ﬁers and numbers. Also, Delim denotes delimiters.
Figure 4 shows the examples of a few simple policies
to detect various attacks. The action component of these
policies make use of two support functions: term() ter-
minates the program execution, while reject() denies the
request and returns with an error.
For the control-ﬂow hijack policy, we use a special
keyword jmp as a function name, as we need some spe-
cial way to capture low-level control-ﬂow transfers that
are not exposed as a function call in the C language. The
policy states that if any of the bytes in the target address
are tainted, then the program should be terminated.
For format string attacks, we only deﬁne a policy for
vfprintf, because vfprintf is the common function
used internally to implement all other printf family of
functions. All format directives in a format string begin
with a “%”, and are followed by a character other than
“%”. (The sequence “%%” will simply print a “%”, and
hence can be permitted in the format string.)
Example policies to detect four other attacks, namely,
directory traversal, cross-site scripting, SQL injection
and shell command injection are also shown in Figure 4.
The comments associated with the policies provide an
intuitive description of the policy. These policies were
able to detect all of the attacks considered in our evalua-
tion, but we do not make any claim that the policies are
good enough to detect all possible attacks in these cate-
gories. A discussion of how skilled attackers may evade
some of these policies, and some directions for reﬁning
policies to stand up to such attacks, can be found in Sec-
tion 7.2. The main strength of the approach presented in
this paper is that the availability of ﬁne-grained taint in-
formation makes it possible for a knowledgeable system
administrator to develop such reﬁned policies.
5 Implementation
We have implemented the program transformation tech-
nique described in Section 3. The transformer consists
of about 3,600 lines of Objective Caml code and uses the
CIL [19] toolkit as the front end to manipulate C con-
structs. Our implementation currently handles glibc
(containing around 1 million LOC) and several other
medium to large applications. The complexity and size
of glibc demonstrated that our implementation can han-
dle “real-world” code. We summarize some of the key
issues involved in our implementation.
5.1 Coping with Untransformed Libraries
Ideally, all the libraries used by an application will be
transformed using our technique so as to enable accurate
taint tracking. In practice, however, source code may not
be available for some libraries, or in rare cases, some
functions in a library may be implemented in an assem-
bly language. One option with such libraries is to do
nothing at all. Our implementation is designed to work
in these cases, but clearly, the ability to track informa-
tion ﬂow via untransformed functions is lost. To over-
come this problem, our implementation offers two fea-
tures. First, it produces warnings when a certain func-
tion could not be transformed. This ensures that inaccu-
racies will not be introduced into taint tracking without
explicit knowledge of the user. When the user sees this
warning, she may decide that the function in question
performs largely “read” operations, or will never han-
dle tainted data, and hence the warning can safely be
ignored. If not, then our implementation supports sum-
marization functions that specify how taint information
is propagated by a function. For instance, we use the
following summarization function for the memcpy. Sum-
marization functions are also speciﬁed in BMSL, and use
support functions to copy taint information. A summa-
rization function for f would be invoked in the trans-
formed code when f returns.
memcpy(dest, src, n) →
copy_buffer_tagmap(dest, src, n);
So far, we had to write summarization functions for
two glibc functions that are written in assembly and
copy data, namely, memcpy and memset.
In addition,
gcc replaces calls to some functions such as strcpy and
strdup with its own code, necessitating an additional 13
summarization functions.
5.2
Injecting Marking, Checking and Summa-
rization Code into Transformed Programs
In our current implementation, the marking speciﬁca-
tions, security policies, and summarization code asso-
ciated with a function f are all injected into the trans-
formed program by simply inlining (or explicitly call-
128
Security ’06: 15th USENIX Security Symposium
USENIX Association
CVE#
CAN-2003-0201
Program