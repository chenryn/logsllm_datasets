up within an app’s manifest ﬁle but can also be programmatically
deﬁned during the app’s runtime. A problem for this Intent mech-
anism is that the sender app’s identity is not given to the recipient.
When it becomes necessary for an app to ﬁnd out where a message
comes from, a typical solution is using PendingIntent, a to-
ken that enables whoever receives it to perform a set of pre-deﬁned
operations with the sender’s identity and permission. Examples
of such operations include startActivity, startService,
etc. To ﬁnd out who sends an Intent, the recipient app can sim-
ply call getTargetPackage or getCreatorPackage with
the token to get the sender app’s package name from the operating
system. Prior research on four push-messaging services (GCM,
ADM, Urban Airship and a Chinese push cloud [28]) shows that
PendingIntent is often broadcasted and therefore can be inter-
cepted by a malicious app to invoke private functionalities within
the sender app. However, the study does not go beyond this on the
push client side. Little has been done to ﬁnd out whether any other
security weaknesses, particularly those related to the design of push
messaging, exist on the mobile device, not to mention any effort to
systematically detect them. This is the focus of our research.
Adversary model. We consider a malicious app running on the
victim’s device. The malware does not have a system privilege but
requires a set of dangerous permissions, such as READ_PHONE_ST
ATE and INTERNET, to exploit push-messaging services the vic-
tim’s apps use. These permissions are extensively utilized by le-
gitimate apps and therefore claiming them is not considered to be
suspicious. Further, we assume that the adversary is capable of
setting up an app server with the push clouds serving the victim,
opening an account with her application vendor and also having a
mobile device for the attack purpose.
3. SEMINAL
Security properties and challenges in automatic checks. The
security goals of a push-messaging service can be described as fol-
lows: (1) a message for a user from an app server should only be
pushed to that user and no one else; (2) a user only gets her own
message (not others) from the authorized app server (not from an
unauthorized party). To this end, a set of properties are expected
from the client-side integration. Speciﬁcally, the app integrating
the service should communicate with the service app (in the case of
the manufacturer service) or the SDK (in the case of third-party or
syndicated service) through an authenticated secure channel. Fur-
ther it should check whether an incoming message belongs to the
current user (according to the User ID in the message). Note that
this veriﬁcation can only happen within the app, as no other entities
in the service can differentiate two users sharing the same app on
the same device, which if not handled properly can lead to serious
security breaches (Section 4.1). Finally, the CID (the authentica-
tion token for the third-party or syndicated service) should always
be kept secret. These properties were identiﬁed from the way cur-
rent push-messaging services work, as elaborated in Appendix.
Automatic veriﬁcation of these properties within real-world apps
is by no means trivial. Speciﬁcally, given an app, it is less clear
what service has been integrated there, manufacturer-based, third
party, syndication or sometimes even a combination of multiple
services. Further, we need to identify the interface between the app
and the service SDK within the app’s APK automatically to under-
stand whether an incoming message has been sent by the SDK and
received by the app in a secure way. New techniques need to be
developed to carve out a small set of integration-related code from
an app for an automatic, efﬁcient property checking. Following we
Connection Servers (GCM, ADM )App ServerThird-Party ServersApp ServerConnection Servers(GCM, ADM )App ServerSydication ServerMobile Devices(Android, iPhone, Kindle )Manufacturer ServiceThird-Party ServiceSyndication ServiceService AppIPCMobile Device3. Messages3. MessagesTarget AppIPCSDKTarget AppMobile Device1262elaborate the design and implementation of Seminal that addresses
these challenges.
3.1 Overview
Figure 2: Seminal Design and Architecture
At a high level, Seminal performs a progressive three-stage anal-
ysis on the integration of a push-messaging service, with each stage
handling increasingly complicated code and providing supports for
the next stage, as illustrated in Figure 2. At the ﬁrst stage, only a
few hundred lines of sample code are inspected, together with its
manifest ﬁle. The purpose here is to collect a set of information for
the next-stage analysis on the service’s SDK. Most important here
is an interface for an app integrating the service to interact with the
SDK (e.g., receiving a push message from the SDK). Such an inter-
face is a program component within the app, called anchor, which
could be a broadcast receiver, service or a callback function. Other
information gathered at this stage is a ﬁngerprint for uniquely iden-
tifying the service (e.g., an action name for a speciﬁc third-party
service).
The follow-up step uses the anchor to inspect the way that mes-
saging related communication is authenticated within the SDK and
the protection of the CID. After all mainstream services go through
these two stages, what have been found are kept in a database, with
each service’s information indexed by their ﬁngerprints. Then, at
the third stage, Seminal scans a large number of apps, automati-
cally identifying the services they incorporate according to the ﬁn-
gerprints, and utilizing their anchors to guide the analysis of their
interactions with the SDKs and the security checks that happen to
User IDs within their integrations.
Architecture. The architecture of Seminal is described in Figure 2.
Our design includes a clue ﬁnder, an SDK inspector and an integra-
tion scanner. The clue ﬁnder automatically examines the sample
code and its manifest ﬁle, collecting information for the follow-up
analysis. Using the information, the SDK inspector further checks
the SDK for security properties (authentication and CID protec-
tion). The results are then stored in the database and used by the
integration scanner to detect security weaknesses within apps.
Example. Figure 3 presents a simpliﬁed version of the sample code
for PushIO [9], a popular syndication service. Given the code, the
clue ﬁnder ﬁrst inspects its manifest ﬁle. Under the deﬁnition of
the receiver PushIOBroadcastReceiver, the standard GCM
action c2dm.intent.RECEIVE, together with a different re-
ceiver speciﬁed in the code, indicates that the service is a syndicator
over GCM, and the service name PushIOGCMIntentService
is identiﬁed as a ﬁngerprint for the service (Section 3.2). Then,
through a quick analysis of the code, the clue ﬁnder discovers that
the PushIO SDK talks to its hosting app through a dynamic receiver
mBroadcastReceiver, which serves as an interface between
the hosting app and the SDK (i.e., the anchor). Based upon such
information, the SDK inspector checks the IPCs within the SDK,
between PushIOGCMIntentService and that for interacting
Figure 3: Simpliﬁed Sample Code and Manifest File
Inputs
Service Type
Fingerprint
Anchor
Manifest File, Sample Code, Manufacturer Actions
Syndication: service (not in sample code)+manufacturer action
Third-party: otherwise
Service name that is deﬁned in SDK (not in sample code)
Check sample code for: BroadcastReceiver,
registerReceiver, Serivce (onHandleIntent)
or Callback function
Table 1: Clue Finder Logic
with the anchor, to detect any improper setting of the communica-
tion (Section 3.2). Also, since the service involves a CID, its gener-
ation and use are then evaluated to detect leaks. All the information
collected here is further used to analyze an app integrating such a
service, which is identiﬁed with the ﬁngerprint. More speciﬁcally,
from onReceive of the anchor, the scanner runs an integration-
speciﬁc approach to ﬁnd out whether User ID has been checked in
the app (Section 3.3). It also inspects the app’s code and manifest to
ensure that all the receivers are conﬁgured properly. Any problem
discovered during this process is reported as an integration ﬂaw.
Implementation. We implemented Seminal over FlowDroid, a
static analysis tool [14]. Our current implementation is largely au-
tomatic, capable of analyzing tens of thousands of commercial apps
(Section 4.2). However, it still contains some manual steps, includ-
ing collection of the inputs to the system (sample code, SDKs and
apps), label of the CID within an SDK (Section 3.2) and validation
of the results reported by Seminal (Section 3.2). How to further
automate these steps is left for the future research.
3.2 Clue Finding and SDK Analysis
Clue ﬁnding. Seminal is designed to inspect the service’s sam-
ple code, ﬁnding “clues” for its operations. Almost every push-
messaging service provides a set of sample code (aka., demo code),
typically a few hundred lines with a manifest ﬁle, to demonstrate
the way the service should be used within an app (e.g., the example
in Figure 3). The speciﬁc clues we are looking for include the ser-
vice type and ﬁngerprint, and the anchor of its integration within
an app. Such semantic information can be recovered in a fully au-
tomatic way, as summarized in Table 1.
Speciﬁcally, the clue ﬁnder maintains a list of action names that
uniquely characterize the small set of manufacturer services (GCM,
ADM, Samsung and Nokia), e.g., c2dm.intent.RECEIVE. For
the sample code from other service providers (third party or syndi-
cation), it is ﬁngerprinted by the service name deﬁned in its mani-
fest ﬁles but does not show up in the sample code, e.g., PushIOGC
MIntentService in Figure 3. Such a service component is in-
Clue FinderSDK InspectorIntegration ScannerSample CodeManifest FileMobile AppSDKDatabaseService FingerprintApp-SDK interfaceIPC InfomationSDK VulnerabilitiesApplicationVulnerabilitiesSeminalStage 1Stage 2Stage 3Manifest File Snippets:...Sample Code Snippets:public class PushSettings extends Activity {     private BroadcastReceiver mBroadcastReceiver;           @Override     public void onResume() {          super.onResume();          mBroadcastReceiver = new BroadcastReceiver() {   @Override                 public void onReceive(Context context, Intent intent) { }                 registerReceiver(mBroadcastReceiver,                                                new IntentFilter("com.pushio.basic.PUSHIOPUSH")); }}   }1263cluded in the SDK and therefore cannot be changed by the app
developer. The type of the push-messaging service is also deter-
mined from the manifest: if it speciﬁes a manufacturer’s action and
a service component (not in the code), then sample code is for a
syndicator; otherwise, it belongs to a third-party service. This is
because a manufacturer service, like GCM and ADM, does not de-
ﬁne any service component in the manifest of its sample code, and
instead directly runs a separate service app to deliver messages.
Finding anchors and the way an app gets messages is equally
straightforward. An anchor gets messages from the SDK through
one of the following channels: Intent broadcast, service or call-
back. To determine which channel has been used, our approach
automatically generates an abstract syntax tree (AST) to search
for a receiver object within the sample code. At most one such
object is there for handling the message pushed from the SDK
or the service app.
It can be easily identiﬁed from the declara-
tion of a class extending BroadcastReceiver, together with
a speciﬁcation of its onReceive method. Also, the presence of
registerReceiver indicates that the receiver is dynamically
generated during an app’s runtime. If such elements (Broadcast
Receiver, onReceive) are missing in the code, the clue ﬁnder
then searches for the method for the service component (onHandl
eIntent) deﬁned there.
If they are also missing, the chance
is that the push-messaging service is integrated through a user-
deﬁned callback function invoked by the SDK. The function is dis-
covered when the name of a newly created object or a class name
(AtomPushNotifyCallback in Figure 4) also becomes a pa-
rameter of a function (setAtomPushNotifyCallback), as il-
lustrated in Figure 4. Once the IPC receiver, service or callback is
found, it is automatically labeled as the anchor of the integration.
Figure 4: Simpliﬁed User-deﬁned Callback Function
A problem here is that the name of the anchor could be changed
by the app developer. Identifying it across different apps relies on
some invariants that characterize the anchor. For the IPC, the action
it uses for Intent ﬁltering is such an invariant, which is either a con-
stant string (e.g., cn.jpush.android.intent.MESSAGE_R
ECEIVED) or constructed through concatenating the app’s package
name with a string, a convention for deﬁning an action that gets in-
puts from the SDK. The constant string here serves to identify the
action and then the anchor. In the absence of such an action, the
class the anchor extends is used as the invariant. For a callback
function, the name of the API for delivering the handler back to the
SDK is used to ﬁnd out the anchors employed by different app de-
velopers (e.g., AtomPush.setAtomPushNotifyCallback
in the example). After such inspections are done, all the ﬁndings
are saved to a record in a database, which can be located by the
ﬁngerprint of the service.
Authentication in SDK. Based upon the clues gathered, Seminal
continues to check the security properties within the SDK, particu-
larly the authentication on the IPC communication from where the
message gets in (from the service app) to where it is handed over to
the app (i.e., the anchor). Authentication here relies on Android’s
security settings: the receiver should be either private or protected
by permission, and all the IPC calls should target a speciﬁc pack-
age. Although veriﬁcation of such settings has also been done in
the prior research [15], Seminal is designed to check the calls re-
lated to push messaging, according to how the SDK works.
Speciﬁcally, our SDK analyzer (implemented in our research us-
ing Soot [10]) looks at the anchor and then goes backward along
the execution path through which a message is transmitted from
the entry point of the SDK to its exit (to the app), checking the
setting of each IPC (e.g., startService) and its handler (e.g.
onReceive) one by one. The analyzer ﬁrst ﬁnds the IPC call
ipc within the SDK that sends an Intent to the anchor. The re-
lation between the call and its handler is established using class
or action name, whose constant part can be directly found within
ipc or through a simple tracing of the deﬁne-use chain using Soot.
Then, the analyzer locates ipc on the control-ﬂow graph (CFG) of
a handler, which corresponds to another IPC ipc(cid:48). This indicates
that ipc(cid:48) happens within the SDK before ipc is later made to the
anchor. After that, the analyzer further goes through all the IPC
calls on the SDK’s AST to ﬁnd out ipc(cid:48), using the action of the
handler or its class name, which also shows up in the calls like
startService1. This backtracking process continues until the
current handler is found to use the standard manufacturer action
such as c2dm.intent.RECEIVE, indicating that it is the en-
try point for the SDK (that receiving messages from a system ser-
vice app like gms), or the IPC call discovered from the AST can-
not be located within any handler’s CFG, which only happens in a
third-party SDK, where messages directly come from the connec-
tion server through a socket connection.
All the IPCs found in this way are then inspected for their se-
curity settings, as discussed above. Particularly, when a receiver is
found to be protected by a permission, we further ﬁnd out which
party is given the permission:
it is supposed to be either a sys-
tem app or the hosting app2. Also Seminal checks whether there
is any attempt to broadcast PendingIntent, and if so, whether
any part of its content is left blank (so the adversary can ﬁll in his
operation [28]). An alarm is raised when such a problem is found.
CID secrecy. As mentioned earlier, the CID is an authentication to-
ken for a third-party or syndication service and it secrecy is there-
fore of critical importance. Since the token is generated by the
SDK and only used there, our SDK analyzer is also tasked to check
whether it is well protected. Speciﬁcally, the function that creates
the CID is always highlighted in the instructions for integrating the
service as the ﬁrst thing the app developer needs to know. What
we did in our research is to label this function within the SDK
and let our analyzer take care of the rest. The analyzer starts from
the output of the function, which is the newly created CID, to per-
form a backward slicing, following the deﬁne-use chain generated
by Soot, until this analysis ends at a set of APIs, like getIMEI
and Random. Android does provide an API, uuid, for creating
a secret token. The function returns an 128-bit string. However,
as discovered in our research, many SDKs just uses a set of pub-
lic information (e.g., DeviceID) collected by the APIs such as
getDeviceId, to produce the CID (Section 4.1). In this case,
the token is no longer a secret. Our analyzer just inspects all the
APIs it observes: if all of them can be invoked by other apps (with
a proper permission) to get the same resource and produce the same