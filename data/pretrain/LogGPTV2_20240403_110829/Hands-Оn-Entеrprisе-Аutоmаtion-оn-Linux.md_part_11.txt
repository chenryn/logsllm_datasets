book. For now, though, we will take a look at the importance of consistency in our build
processes.
Ensuring consistency across Linux images
In Chapter 1, Building a Standard Operating Environment on Linux, we discussed the
importance of commonality in SOE environments. Now that we are actually looking at the
build process itself, this comes back to the fore as we are, for the first time, looking at how
to actually implement commonality. Assuming Ansible is your tool of choice, consider the
following task. We are writing playbooks for our image build process and have decided
that our standard image is to synchronize its time with our local time server. Suppose that
our base operating system of choice is Ubuntu 16.04 LTS for historic reasons.
Let's create a simple role to ensure NTP is installed and to copy across our corporate
standard ntp.conf, which includes the addresses of our in-house time servers. Finally, we
need to restart NTP to pick up the changes.
The examples in this chapter are purely hypothetical and given to
demonstrate what Ansible code for a given purpose might look like. We
will expand on the tasks performed (such as deploying configuration files)
in detail in later chapters and provide hands-on examples for you to try
out.
This role could look like the following:
---
- name: Ensure ntpd and ntpdate is installed
apt:
name: "{{ item }}"
update_cache: yes
[ 103 ]
Deployment Methodologies Chapter 4
loop:
- ntp
- ntpdate
- name: Copy across enterprise ntpd configuration
copy:
src: files/ntp.conf
dest: /etc/ntp.conf
owner: root
group: root
mode: '0644'
- name: Restart the ntp service
service:
name: ntp
state: restarted
enabled: yes
This role is simple, concise, and to the point. It always ensures the ntp package is installed,
and also ensures we are copying across the same version of our configuration file, making
sure it is the same on every server. We could improve this further by checking this file out
of a version control system, but that is left as an exercise for you.
Instantly, you can see the power of writing an Ansible role for this one simple step—there
is great consistency to be achieved from including this role in a playbook, and if you scale
this approach up to your entire enterprise, then all configured services will be consistently
installed and configured.
However, it gets better. Let's say that the business decides to rebase the standard operating
system to Ubuntu 18.04 LTS to make use of newer technologies and increase the supported
lifespan of the environment. The ntp package is still available on Ubuntu 18.04, though by
default, the chrony package is now installed. To proceed with NTP, the role would need
only minor tweaks to simply ensure that chrony is removed first (or you could disable it if
you prefer)—after this, it is identical, for example, consider the following role code that
ensures the correct packages are absent and present:
---
- name: Remove chrony
apt:
name: chrony
state: absent
- name: Ensure ntpd and ntpdate is installed
apt:
name: "{{ item }}"
update_cache: yes
loop:
- ntp
- ntpdate
[ 104 ]
Deployment Methodologies Chapter 4
We would then continue this code by adding two further tasks that copy across the
configuration and restart the service to ensure it picks up the new configuration:
- name: Copy across enterprise ntpd configuration
copy:
src: files/ntp.conf
dest: /etc/ntp.conf
owner: root
group: root
mode: '0644'
- name: Restart the ntp service
service:
name: ntp
state: restarted
enabled: yes
Alternatively, we could decide to embrace this change and make use of chrony on the new
base image. Hence, we would simply need to create a new chrony.conf to ensure it talks
to our enterprise NTP servers, and then proceed exactly as before:
---
- name: Ensure chrony is installed
apt:
name: chrony
update_cache: yes
- name: Copy across enterprise chrony configuration
copy:
src: files/chrony.conf
dest: /etc/chrony.conf
owner: root
group: root
mode: '0644'
- name: Restart the chrony service
service:
name: chrony
state: restarted
enabled: yes
Notice how similar these roles all are? Only minor changes are required even when
supporting a change in the base operating system or even underlying service.
Although these three roles differ in places, they are all performing the same basic tasks,
which are as follows:
1. Ensure that the correct NTP service is installed.
2. Copy across the standard configuration.
3. Ensure the service is enabled at boot time and has started.
[ 105 ]
Deployment Methodologies Chapter 4
Hence, we can be sure that, using this approach, we have consistency.
Even when changing the platform entirely, the high-level approach can still be applied.
Let's say that the enterprise has now taken on an application that is only supported on
CentOS 7. This means an accepted deviation to our SOE, however, even our new CentOS 7
build will need to have the correct time, and as NTP is a standard, it will still use the same
time servers. Hence, we can write a role to support CentOS 7:
---
- name: Ensure chrony is installed
yum:
name: chrony
state: latest
- name: Copy across enterprise chrony configuration
copy:
src: files/chrony.conf
dest: /etc/chrony.conf
owner: root
group: root
mode: '0644'
- name: Restart the chrony service
service:
name: chronyd
state: restarted
enabled: yes
Again, the changes are incredibly subtle. This is a significant part of the reason for
embracing Ansible as our automation tool of choice for enterprise automation—we can
build and adhere to our standards with great ease, and our operating system builds are
consistent if we change the version or even the entire distribution of Linux we are using.
Summary
At this stage, we have defined our requirement for standardization, established which tools
to use in our journey toward automation, and now taken a practical look at the
fundamental types of environments into which enterprises can expect to deploy an
operating system. This has set the groundwork for our automation journey and has
provided us with the context for the rest of this book—a hands-on journey through the
process of building and maintaining a Linux environment in the enterprise.
[ 106 ]
Deployment Methodologies Chapter 4
In this chapter, we learned about the different types of environments into which Linux
might be deployed and the different build strategies available to each. We then looked at
some practical examples of ensuring that our builds are of a high standard and can be
completed efficiently and repeatably. Finally, we started to look at the benefits of
automation and how it can ensure consistency across builds, even when we change the
entire underlying Linux distribution.
In the next chapter, we will begin our hands-on journey into Enterprise Linux automation
and deployments, looking at how Ansible can be employed to build out virtual machine
templates, whether from cloud environment images or from scratch.
Questions
1. What are the similarities between building a Docker container and an SOE?
2. Why would you not include MariaDB in your base build if it is only required on
a handful of servers?
3. How would you ensure your base operating system image is as small as
possible?
4. Why should you be careful about embedding passwords in your base operating
system image?
5. How would you ensure all Linux images send their logs to your centralized
logging server?
6. When would you not use a base image provided by a cloud provider and build
your own instead?
7. How would you secure your SSH daemon configuration using Ansible?
Further reading
For an in-depth understanding of Ansible, please refer to Mastering Ansible, Third
Edition by James Freeman and Jesse Keating (https:/​/​www.​packtpub.​com/​gb/
virtualization-​and-​cloud/​mastering-​ansible-​third-​edition).
To gain an understanding of the Docker code and discussion in this chapter,
please refer to Mastering Docker, Third Edition by Russ McKendrick and Scott
Gallagher (https:/​/​www.​packtpub.​com/​gb/​virtualization-​and-​cloud/
mastering-​docker-​third-​edition).
[ 107 ]
5
Using Ansible to Build Virtual
Machine Templates for
Deployment
So far in this book, we have covered in detail the groundwork for the remainder—that is to
say, we have set the rationale for what we intend to do next and provided a crash course in
our automation tool of choice, Ansible. From the preceding chapter, we know that, in an
enterprise-scale environment, there are two fundamental methods for deploying Linux, and
which of these to use is determined by the technologies in use in your environment and
your intended goals.
In this chapter, we will cover in detail how to build virtual machine images that will serve
on most virtualization and cloud platforms. The differences between these two platforms
are subtle but distinct as we shall find out, and by the end of this chapter, you will know
how to handle both environments with ease. We will start with a discussion on the initial
build requirements, and then move on to configure and prepare the images for use in your
chosen environment.
The following topics will be covered in this chapter:
Performing the initial build
Using Ansible to build and standardize the template
Cleaning up the build with Ansible
Using Ansible to Build Virtual Machine Templates for Deployment Chapter 5
Technical requirements
This chapter assumes that you have access to a virtualization-capable environment running
Ubuntu 18.04 LTS. Some examples are also performed on CentOS 7. In either of these cases,
the examples can be run on either a physical machine (or laptop) running one of the
aforementioned operating systems, with a process that has virtualization extensions
enabled or a virtual machine with nested virtualization enabled.
Ansible 2.8 is also used later in this chapter and it is assumed you have this installed on the
Linux host you are using.
All example code discussed in this chapter is available from GitHub at: https:/​/​github.
com/​PacktPublishing/​Hands-​On-​Enterprise-​Automation-​on-​Linux/​tree/​master/
chapter05.
Performing the initial build
As discussed in Chapter 4, Deployment Methodologies, whether you are using a traditional
virtualization platform such as oVirt or VMware or a cloud-based one such as OpenStack or
Amazon's EC2, your starting point for any Linux deployments (and hence further
automation) will be a templated image.
In terms of the SOE we defined in Chapter 1, Building a Standard Operating Environment on
Linux, the templated image is the very real initial manifestation of this. It is usually a small
virtual machine image, with just enough software installed and configuration completed
that it is useful in almost all scenarios it might be deployed in for the enterprise. As long as
the image boots up cleanly with a unique hostname, SSH host keys, and such, then it can be
customized almost immediately using further automation as we shall discover from
Chapter 7, Configuration Management with Ansible, later in this book. Let's dive into the
build process by taking a ready-made template image (provided by a third party) as our
starting point.
[ 109 ]
Using Ansible to Build Virtual Machine Templates for Deployment Chapter 5
Using ready-made template images
For most platforms, there are a large number of readily available images for you to
download, and again, we discussed a few of these in the previous chapter. For many
enterprises, these images will be sufficient. However, what if you absolutely need full
control over your image definition? Perhaps you are adopting a new standard (at the time
of writing, Red Hat Enterprise Linux 8 has just been released, and CentOS 8 will surely
follow in due course), and you want to implement it early to gain experience and test
workloads. What if you operate in a secure environment (perhaps payment card industry-
compliant), and you absolutely have to have 100% confidence in how the image was built
and there can be no risk of compromise?
This, of course, is not to say that any publicly available images are compromised or even
likely to be, but historically there have been a handful of man-in-the-middle or supply chain
attacks where attackers have compromised services not directly, but rather indirectly by
attacking common components that are used as building blocks.
Most publicly available images come from trustworthy sources that have put in place a
variety of checks and controls to ensure their integrity. Provided you make use of these
checks, and perform due diligence on any images you download, most enterprises will find
little need to create their own images from scratch, as automation tools such as Ansible will
take care of all post-deployment configuration.
Let's take a practical example: suppose that, for a new set of deployments, we have decided
to create an SOE based upon the Fedora 30 server image, and we will be running this on an
OpenStack infrastructure:
1. We would download the cloud image from the official Fedora project web
site—details can be found here, though note that the version number will change
over time as new releases of Fedora arrive, at https:/​/​alt.​fedoraproject.​org/
cloud/​.
Upon establishing the correct Fedora cloud image for our environment, we can
download our required image with a command such as this:
$ wget
https://download.fedoraproject.org/pub/fedora/linux/releases/30/Clo
ud/x86_64/images/Fedora-Cloud-Base-30-1.2.x86_64.qcow2
2. Simple enough—now, let's verify it. Verification instructions are normally
provided with all major Linux releases, whether for ISOs or complete images,
and those for our Fedora image download can be found at https:/​/​alt.
fedoraproject.​org/​en/​verify.​html.
[ 110 ]
Using Ansible to Build Virtual Machine Templates for Deployment Chapter 5
Let's run through the process and validate our image. First of all, we will import
the official Fedora GPG key to validate the checksum file to make sure it hasn't
been tampered with:
$ curl https://getfedora.org/static/fedora.gpg | gpg --import
3. Now we will download the checksum file for the cloud base images and verify it:
$ wget
https://alt.fedoraproject.org/en/static/checksums/Fedora-Cloud-30-1
.2-x86_64-CHECKSUM
$ gpg --verify-files *-CHECKSUM
4. Although you may get a warning about the key not being certified by a trusted
signature (this is a facet of the way GPG key trust is established), the important
thing is that the signature of the file is validated as good—see the following
screenshot for an example of the output:
[ 111 ]
Using Ansible to Build Virtual Machine Templates for Deployment Chapter 5
5. As long as the signature verifies successfully, the last step is to validate the actual
image against the checksums themselves, with the following command:
$ sha256sum -c *-CHECKSUM
You will get errors for any files that are in the *-CHECKSUM file that you haven't
downloaded, but as you can see in the following screenshot, our downloaded
image matches the checksum in the file and so we can proceed to use it:
With these steps completed, we can proceed to use the downloaded image in our
OpenStack platform. You may, of course, want to customize this image after deployment,
and we will look at ways to do this later in this book. Just because you have chosen an off-
the-shelf image does not mean it has to remain that way. Note that these steps will vary
slightly for each Linux distribution, but the high-level procedure should be the same. The
important thing is to validate all downloaded images.
There is also an issue of trust surrounding the use of publicly available operating system
images. How do you know that the author removed all redundant services and sysprepped
the image correctly? How do you know that there are no back doors or other
vulnerabilities? Although there are many excellent publicly available images out there, you
should always perform due diligence on any that you download and ensure they are fit for
your environment.
What if you absolutely have to generate your own image, however? We will explore this in
the next part of this chapter.
Creating your own virtual machine images
The preceding process described will be fine for many enterprises, but sooner or later, the
requirement will come about to create your own completely customized virtual machine
image. Fortunately, modern Linux distributions make it easy to achieve this, and you don't
need to even be on the same platform as you are building.