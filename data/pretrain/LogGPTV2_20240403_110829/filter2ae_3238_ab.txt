---|---  
哥伦比亚民事登记处 | 哥伦比亚民事登记处  
哥伦比亚国家税务和海关总署 | 哥伦比亚国家税务和海关总署  
哥伦比亚国家司法部门 | 哥伦比亚国家总检察院  
哥伦比亚国家统计局 | 哥伦比亚移民局  
哥伦比亚国家网络警察局 | 哥伦比亚卫生部  
表3-1 来源信息
##### **3.2.2** **恶意附件文档**
该组织擅于使用携带恶意宏的MHTML格式的word文档作为攻击载荷。在此次攻击活动中，我们观察到攻击者更改了初期的攻击策略，其先将带有短链接内容的PDF或RTF格式的恶意附件作为第一阶段的诱饵文档，再通过诱导受害者点击链接后，跳转到指定的服务器上下载恶意文档，该恶意文档是包含宏代码的word文档。从这些PDF/RTF格式的恶意附件在VT上的扫描结果（如图3-6）可以看到，它们的查杀率普遍偏低甚至为0。攻击者将这类低查杀率的恶意文档作为邮件附件，能在一定程度上达到绕过邮件网关的目的。
图3-6 VT查杀结果
##### **3.2.3** **域名使用偏好**
我们将该组织在早期行动中使用的动态域名，与本次行动所使用的域名做对比分析，可以很清晰的看出，这些域名都是通过同一个动态域名商DNSEXIT注册的。此外，在本次事件中的域名“medicosta.linkpc.net”与2018年事件中的域名“medicosco.publicvm.com”相似度极高，由此猜测它们极有可能是由同一组织注册。
##### **3.2.4 IP地址关联**
根据我们在3.1小节中所分析的结果显示，攻击者所有关联域名的曾绑定和现绑定的IP地址，均由互联网运营商Unus.Ins公司提供，且大多数用作VPN服务。这与该组织在2018年的攻击事件中发送邮件时使用的VPN相关IP地址128.90.xxx.xxx网段完全相同，由此可以看出这极有可能是出自同一组织。
##### **3.2.5** **地理位置特性**
从攻击者所使用的C&C基础设施来看，其所使用的所有IP地址（包括128.90.xxx.xxx、191.95.xxx.xxx、190.253.xxx.xxx及179.33.xxx.xxx等网段）均归属于哥伦比亚的ISP（如图3-7）。而这些IP地理位置也与该组织早期活动涉及的地理位置相同。
图3-7 IP地址的地理位置
基于该组织从伪装来源信息、诱饵文档、域名使用偏好、IP地址关联以及地理位置特性等方面的对比分析，我们初步推断本次的攻击行动来自“APT-C-36盲眼鹰”组织。
## **四、攻击载荷分析**
图4-1显示了黑客组织在此次攻击活动中的整个流程。
图4-1 黑客攻击流程图
在初期阶段，该组织首先利用与其伪装来源有关的主题邮件，附加恶意文档一并发送给攻击目标。当受害者点击文档中的短链接时，其实际上是被重定向到下一阶段DOC文档的托管平台，从而执行下载流程。该DOC文档运行后会启动恶意宏代码，访问并解析执行指定的页面（html文件），随后从C&C服务器上下载payload文件，成功下载后立即执行。此payload会在内存中加载执行其解密后的DLL模块来实现第一阶段的功能，接着第二阶段的DLL模块再执行其解密后的EXE模块，为了隐藏恶意下发功能，第三阶段的EXE模块会将解密后的可执行PE文件（AsyncRAT远控木马）映射到傀儡进程中执行。最后，AsyncRAT木马程序与C&C服务器建立SSL通信，接收控制指令以实现其间谍活动。
攻击者为了隐藏其真实企图，采用多层模块嵌套和以不落地形式在内存中加载执行木马程序的手法，再结合该木马针对自身运行环境检测（如虚拟机、沙箱、反调试等）的功能，以避免其在自动化系统分析中暴露恶意行为。下文，我们从黑客组织近期攻击事件的案例中，选取一例进行详细的剖析。
### **4.1** **钓鱼邮件**
图4-2展示了攻击者仿冒来自哥伦比亚国家卫生部的钓鱼邮件，邮件标题为“Usted ha sido citado para una prueba
obligatoria de
(COVID-19)”（翻译后为：“您被要求参加强制性检测（COVID-19）”），正文内容是关于检测的相关问题（如图4-3），并声称邮件附件是检测时间和地点，以诱导受害者打开附件文档。
图4-2 仿冒来自哥伦比亚国家卫生部的钓鱼邮件内容
图4-3 邮件翻译后的内容
### **4.2** **恶意文档**
黑客组织所使用的恶意文档包括PDF、RTF以及MHTML格式的DOC文档。其并未使用漏洞，而是通过嵌入的恶意宏代码来触发后续恶意行为。与该组织以往攻击手法不同的是，本次并未直接通过邮件传播MHTML格式的恶意文档，而是将包含一个跳转链接（该链接指向MHTML格式的恶意文档）的正常文档作为邮件附件来进行投递，以绕过邮箱网关的安全检测。
图4-4是4.1小节中的邮件附件，该pdf文件包含哥伦比亚国家卫生部的标志、一行文本信息（标注文档密码，实则无用）和一个名为“Ver
comunicado”的跳转链接（如图）。
图4-4 PDF文档跳转链接内容
当用户点击文档链接时，实际上攻击者是利用Acortarurl短链接服务平台将受害者重定向到其指定的服务器上，下载MHTML格式的word文档。下图为访问Acortarurl的流量内容。
图4-5 Acortarurl的流量内容
虽然此案例中的恶意文档链接已失效，不过通过关联分析后，我们发现了其他相关的恶意文档。该文档同样是伪装成来自哥伦比亚国家卫生部，攻击者在文档正文利用西班牙语诱导用户点击“启用内容”按钮来查看检测时间和地点。具体内容如图4-6所示。
图4-6 内嵌VBA的DOC恶意文档内容
当我们查看该文档的VBA工程时，提示需要输入密码。解密后从宏代码的内容可以看到，当受害者启用宏功能后，恶意代码将自动执行Document_Open函数。具体内容如图4-7所示。
图4-7 恶意宏代码内容
该函数会利用Microsoft工具mshta.exe来解析“http://pastebin.com/raw/Xrp7W0V3”（放置在pastebin网址上的html恶意脚本文件）。具体内容如图4-8所示。
图4-8 加密的HTML脚本文件内容
解密后的恶意脚本文件主要功能是利用Windows内置程序certutil.exe远程下载指定的EXE文件，然后将其保存至“%appdata%msts.exe”并执行该程序。
图4-9 解密后的HTML脚本文件内容
### 4.3 Payload
如上文所示，通过html恶意脚本下载并执行的
“msts.exe”（C#编写并加入了大量的混淆）实际上是一个Dropper文件。“msts.exe”会从资源中解密出“DriverUpdate.dll”（C#编写）并在内存中反射加载该DLL模块来实现第一阶段的功能；接着第二阶段的“DriverUpdate.dll”再解密出其原始文件“msts.exe”中的另一个资源数据，然后执行解密后的“Cyrus.exe”模块；第三阶段的“Cyrus.exe”从自身资源中解密出Async
RAT远控木马，并将其整个文件覆盖映射到当前进程中执行。最后，Async
RAT木马程序与C&C服务器进行通信连接，连接成功则发送上线包请求上线，并等待接收控制指令。
#### 4.3.1 第一阶段模块
“msts.exe”主要用于解密并在内存中加载下一阶段的功能模块。其将自身伪装成Intel无线驱动应用程序，并附有详细的文件说明和版本号（如图4-10），以此迷惑攻击目标。
图4-10 “msts.exe”文件属性详细信息
该Dropper模块的入口点在WindowsFormsApplication1处（如图4-11），其首先通过调用SelectedCard类中的D_D_D_D函数对名为“xor4”的资源数据进行解密。
图4-11 Dropper模块的入口函数
解密算法是循环异或运算，其固定密钥为“RR5IRBNF5F4GN7997QFBYY”，解密代码如图4-12所示。
图4-12 解密代码具体内容
在解密出PE文件后，Dropper模块则附加三个启动参数（“AcBRmi、S8epuew和IntelWireless”）来加载执行第二阶段的功能模块。
图4-13 加载执行功能代码
#### 4.3.2 第二阶段模块
该阶段模块的文件名为“DriverUpdater.dll”，当此模块运行后，会提取和解密第一阶段Dropper模块中另一个资源文件“AcBRmi”，之后在内存中加载执行解密出的第三阶段的PE文件。
图4-14 解密和执行PE文件的功能代码
解密算法依然是循环异或运算，其密钥为“CZysHnTTIiop”，解密代码如图4-15所示。
图4-15 异或解密算法代码
#### 4.3.3 第三阶段模块
此功能模块的文件名称是“Cyrus.exe”，其主要任务为解密和执行最终的远控木马。
**初始化阶段**
1）
在执行入口函数之前，该模块会在初始化Class3的私有成员变量byte_Data时，先调用Class1类的方法解密自身资源文件Kdgv。具体如图4-16所示。
图4-16 解密资源文件
资源数据的首次解密采用简单的异或加密算法，固定密钥为"dXhhaxrqDcQ"，通过对资源数据的每个字节做简单的XOR运算完成第一次解密。解密函数的代码如图4-17所示。
图4-17 解密函数代码内容
第一次解密前和解密后的资源数据如图4-18所示。
图4-18 首次解密前后的数据内容
之后再对第一次解密后的数据进行二次解密，前16位为解密密钥“0x19 0xEF 0xB6 0xB6 0xE7 0x7E 0x92 0x92 0x0D
0xA0 0xE0 0x95 0xAD 0x8F 0x6B 0x14”，后面紧跟着的是待解密密文。 解密前后的数据内容如图4-19所示。
图4-19 二次解密前后的数据内容
函数以16字节为循环，将密钥同密文依次进行按位异或，最终解密得到“Stub.exe”文件。解密函数代码如图4-20所示。
图4-20 解密函数代码内容
除此之外，该模块还会将提取出的配置信息数据，分别赋值给它们所对应的私有成员变量，在我们分析的此案例中，其配置数据大部分的值都为0。具体内容如图4-21所示。
图4-21 配置信息数据内容
**执行主功能代码**
该模块首先使用Assembly.GetEntryAssembly().Location获取当前进程的全路径。接着通过判断上文提到的部分私有成员变量值来决定要执行的流程分支，其中包括互斥体的创建、虚拟机和沙箱的检测、文件下载、拷贝自身等。在本案例样本中，根据其配置信息来看，此模块仅执行最后一项流程，调用smethod_11函数。代码如图4-22所示。
图4-22 代码执行流程
进入到smethod_11函数后，该模块先调用Class3.
SelectPuppetProcess来选择后续执行的RAT载体。由于参数int_13的值为0，所以返回值为string_10（当前模块的全路径）。
图4-23 代码内容
在选择完RAT的傀儡进程后，该模块再调用smethod_9函数，其中参数1为自身进程的全路径，参数2为之前解密出的PE文件数据。首先，该模块重新创建一个自身新进程，然后卸载此进程映像，并把之前解密出的新PE头部，以及节数据依次写入到新进程模块中，最后修改OEP并启动运行（“Stub.exe”）。
图4-24 写入和执行新PE文件
#### 4.3.4 RAT模块
如上文所述，被执行的名为“Stub.exe”的PE文件则是最终的RAT模块。通过分析和溯源后发现，该PE文件是用C#语言编写的AsyncRAT远控木马。除了远程桌面监控、键盘记录、进程管理、远程WebCam、远程Shell等功能以外，其还包括加密、反沙盒、反虚拟机、反分析和反调试等对抗模块。下面我们会对RAT中的核心部分做深入的分析。
图4-25 远程程序AsyncRAT控制端
##### 1）初始化配置信息
木马程序通过调用Settings.InitializeSettings函数来初始化配置信息。从图4-26中的函数实现代码可以看到，其会提取出固定的密钥并使用AES256算法解密出所有的配置数据信息。包含端口号、Host信息、版本号、Pastebin信息、解密秘钥、SSL通信证书及证书签名等信息，之后调用Settings.VerifyHash函数对证书进行验证。
图4-26 初始化配置信息
解密之后的配置信息如图4-27所示。