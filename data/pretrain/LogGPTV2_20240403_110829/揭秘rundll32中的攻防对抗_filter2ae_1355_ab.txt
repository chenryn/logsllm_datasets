# 组件

建议您检查自家的SIEM系统，或许能够发现以下活动（至少根据相关数据，我确实狩猎到了一些有趣的活动）：

- `rundll32.exe –localserver`
- `rundll32.exe –sta`

对于不熟悉COM组件的读者，可能需要先了解一下相关的背景知识。例如，MITRE ATT&CK框架中在持久化阶段提到的 [T1546.015 - Component Object Model Hijacking](https://attack.mitre.org/techniques/T1546/015/)。

简而言之，当看到类似的命令行参数时，最好检查对应的注册表键值对是否包含恶意DLL文件或SCT脚本。这些通常位于：`HKEY_CLASSES_ROOT\CLSID\`。您可以参考下图以更好地理解其结构。

关于具体的利用原理和攻击细节，可以参阅以下资源：
- [Abusing COM Registry Structure: CLSID, LocalServer32, InprocServer32](https://bohops.com/2018/06/28/abusing-com-registry-structure-clsid-localserver32-inprocserver32/)
- [Run, Lola, Bin Run!](https://www.hexacorn.com/blog/2020/02/13/run-lola-bin-run/) 中提到的使用 `-localserver` 作为攻击变种的方法。

## 检测技巧

### 命令行检测

首先，回顾一下 `rundll32.exe` 的基本用法：
- `rundll32.exe , `

从 `rundll32.exe` 的文件位置开始，我们可以设定一条基础的检测规则，因为它通常只有以下两种路径：
    - `C:\Windows\System32\rundll32.exe`
    - `C:\Windows\SysWOW64\rundll32.exe` (64位系统上的32位版本)

尽管简单，但这种方法并非毫无价值。接下来，关注DLL文件和导出函数。

通过前文介绍，我们应达成共识：**在日常活动中，`rundll32.exe` 的出现频率并不低**。针对这种可能存在较多干扰信息的情况，建议使用 **漏斗模型** 来帮助缩小检测范围。具体来说，就是尽可能建立 **行为基线**，剔除正常活动，重点关注偏离动作。

例如，统计自己电脑上出现过的DLL文件和导出函数，采集足够多的良性样本，充实白名单或优化日志采集策略。经过筛选后，可以更加聚焦于异常行为，提高狩猎成功率。

在实际生产环境中，对于行为基线之外的活动，仍可能包含大量业务相关的正常行为。这时可以运用长尾分析法，关注特定阈值下的少数可疑行为。或者检查不规范的文件或函数名，比如设置条件为未包含关键字 “.dll”。

对于之前提到的 CobaltStrike 在后渗透阶段调用 `rundll32.exe` 的方式，可以通过这一技巧轻松检测出来。另外，我还曾发现过一起异常行为：`rundll32.exe uwcidcx.vb,capgj`。当时觉得可疑，直到后来在 Red Canary 的报告中发现了类似的攻击活动，并且上下文特征相同，才确认为某后门病毒。

当然，这种方法可能会存在漏报，因此需要结合其他检测点进行综合判断。

### 敏感函数监测

前面介绍了使用合法DLL文件及其函数完成的攻击活动。这类特定的白利用行为需要特别关注。例如 MiniDump 及其对应的函数编号 #24。更多提示可能需要请教红队成员，因为他们更专业。

此外，JavaScript 的用法在日常行为中非常罕见，因此也可以加入观察名单。有些特殊行为难以一眼定性，这时往往需要安全人员进行人工判定。为此，可以针对这些敏感的函数调用行为建设相应的仪表板。

例如上文提到的 `-sta` 关键字的用法，虽然不方便根据GUID自动研判，但可以通过一些技巧提高狩猎效率。

### 通信行为监测

根据我的观察经验，`rundll32`在网络通信行为上的花样并不多，这对我们建立异常检测模型非常有利。在我的主机上，只有实验中的beacon通信留下了 `rundll32` 的网络通信日志。

实验环境的数据没有说服力，而且我自己也维护了一份白名单，过滤后的数据量很少。这里只是演示统计方式，大家可以在自己的环境中试一试。

如果有EDR在进程通信时能采集到相应的命令行日志，还可以结合进程和网络行为一起分析。如果日志中缺少这些字段（例如sysmon），可以直接结合威胁情报查询 `rundll32.exe` 的目的地址是否可疑。

另外，如果 `rundll32.exe` 存在扫描行为或访问特殊端口（如445、数据库端口等），这种情况应该不用多说。如果还想进一步深入，可以结合通信频率学习检测beacon的方法，比如根据jitter特征检测C2通信。参考这篇[文章](https://posts.bluraven.io/enterprise-scale-threat-hunting-network-beacon-detection-with-unsupervised-ml-and-kql-part-2-bff46cfc1e7e)。

### 异常关系检测

这部分涉及的攻击手法多样，如钓鱼邮件、webshell、计划任务或WMI等持久化中都可能用到 `rundll32.exe`。因此，需要对相关进程间的父子关系列一份检测清单，例如以下进程应重点关注：
- `winword.exe`
- `excel.exe`
- `taskeng.exe`
- `winlogon.exe`
- `schtasks.exe`
- `regsvr32.exe`
- `wmiprvse.exe`
- `wsmprovhost.exe`

对于清单内的进程，可以借助图数据构建仪表板。如果有专门模块记录这些罕见的进程链，监测时将一目了然。此外，还应注意一些特殊的访问关系，如 `rundll32.exe` 对 `lsass.exe` 发起高权限的进程间访问。

## 小结

本文中贴的相关链接较多，大部分需要翻墙才能访问。有些地方的贴图不方便展示真实数据，只能贴网图或实验环境下截图，显示的数据样本较小，但文中的结论有大量样本支撑，基本可以放心参考。

如有纰漏之处或其他有意思的发现，欢迎私信交流。