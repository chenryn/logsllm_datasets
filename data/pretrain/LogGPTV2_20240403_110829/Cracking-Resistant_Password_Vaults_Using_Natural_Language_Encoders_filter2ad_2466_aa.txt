title:Cracking-Resistant Password Vaults Using Natural Language Encoders
author:Rahul Chatterjee and
Joseph Bonneau and
Ari Juels and
Thomas Ristenpart
2015 IEEE Symposium on Security and Privacy
2015 IEEE Symposium on Security and Privacy
Cracking-Resistant Password Vaults using Natural Language Encoders
Rahul Chatterjee∗, Joseph Bonneau†, Ari Juels‡, Thomas Ristenpart∗
University of Wisconsin–Madison, Email: {rchat,rist}@cs.wisc.edu
Stanford University & The Electronic Frontier Foundation, Email: PI:EMAIL
∗
†
‡
Cornell Tech, Email: PI:EMAIL
Abstract—Password vaults are increasingly popular applica-
tions that store multiple passwords encrypted under a single
master password that the user memorizes. A password vault
can greatly reduce the burden on a user of remembering
passwords, but introduces a single point of failure. An attacker
that obtains a user’s encrypted vault can mount ofﬂine brute-
force attacks and, if successful, compromise all of the passwords
in the vault. In this paper, we investigate the construction of
encrypted vaults that resist such ofﬂine cracking attacks and
force attackers instead to mount online attacks.
Our contributions are as follows. We present an attack
and supporting analysis showing that a previous design for
cracking-resistant vaults—the only one of which we are
aware—actually degrades security relative to conventional
password-based approaches. We then introduce a new type of
secure encoding scheme that we call a natural language encoder
(NLE). An NLE permits the construction of vaults which, when
decrypted with the wrong master password, produce plausible-
looking decoy passwords. We show how to build NLEs using
existing tools from natural language processing, such as n-gram
models and probabilistic context-free grammars, and evaluate
their ability to generate plausible decoys. Finally, we present,
implement, and evaluate a full, NLE-based cracking-resistant
vault system called NoCrack.
I. INTRODUCTION
To alleviate the burden of memorization, many security
experts recommend the use of password vaults, also known
as “wallets” or “managers” [6]. Password vaults are applica-
tions that store a user’s website passwords, along with the as-
sociated domains, in a small database that may be encrypted
under a single master password. Vaults enable users to select
stronger passwords for each website (since they need not
memorize them) or, better yet, use cryptographically strong,
randomly chosen keys as passwords. Many modern vault
applications also backup encrypted vaults with an online
storage service, ensuring that as long as users remember
their master passwords, they can always recover their stored
credentials.
These vault management services provide attackers with
a rich target for compromise. The popular password vault
service LastPass, for example, reported a suspected breach
in 2011 [38]. Security analyses of several popular web-
based password managers revealed critical vulnerabilities
in all of them, including bugs which allow a malicious
web site to exﬁltrate the encrypted password vault from the
browser [29].
An attacker that captures users’ encrypted vaults can
mount ofﬂine brute-force attacks against them, attempting
decryption using (what the attacker believes to be) the most
probable master password mpw1, the second most probable
mpw2, and so on. With standard password-based encryption
(PBE) algorithms (e.g., PKCS#5 [25]), only the correct
master password produces a valid decryption, so an attacker
knows when a vault has been successfully cracked. Such
attacks are ofﬂine in the sense that they can be conducted
without interaction with a server and hence are limited only
by the attacker’s computational capabilities, as measured by
the number of decryption attempts performed per second.
Available evidence (c.f., [4]) suggests that most master
passwords selected by users are weak in the sense that even
a modestly resourced attacker can feasibly crack them in a
matter of minutes or hours.
This state of affairs prompts the following core question
addressed by our work: Can password vaults be encrypted
under low-entropy passwords, yet resist ofﬂine attacks? We
call such vaults cracking-resistant. Cracking-resistant vaults
would have the beneﬁt that attackers, even after investing
signiﬁcant resources in ofﬂine cracking, would still need
to perform a large number of online login attempts. Such
online login attempts would signiﬁcantly impede attackers
and enable service providers to detect vault compromises
evidenced by failed login attempts.
Breaking Kamouﬂage. At ﬁrst glance, it may seem that
preventing ofﬂine cracking is impossible. After all,
the
attacker has access to the ciphertext and the key is likely
low-entropy and so easily guessable. But Bojinov, Bursztein,
Boyen, and Boneh, who ﬁrst investigated the question of
cracking-resistance for vaults, suggest a clever idea: include
decoy or honey vaults in an attempt to force ofﬂine attacks
to become online attacks [3]. Their system, called Kamou-
ﬂage, permits seemingly successful decryption under some
incorrect master passwords. Kamouﬂage stores not only an
encryption of the true vault (under the true master password)
but also a large number N − 1 of decoy vaults encrypted
under decoy master passwords. The security goal is for an
ofﬂine attack to reveal only a set of equally plausible vaults,
forcing an attacker to attempt a login with a password from
each of the decrypted vaults in order to ﬁnd the true one. The
quantitative security claimed in [3] is that an attacker must
© 2015, Rahul Chatterjee. Under license to IEEE.
© 2015, Rahul Chatterjee. Under license to IEEE.
DOI 10.1109/SP.2015.36
DOI 10.1109/SP.2015.36
481
481
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:07:53 UTC from IEEE Xplore.  Restrictions apply. 
ﬁrst perform ofﬂine work equivalent to that needed to crack
conventional PBE, but additionally perform an expected N/2
online queries.
Our ﬁrst contribution is discovery of a subtle vulnerability
in this approach; we show a cracking attack that exploits
it, and evaluate the attack’s efﬁcacy. To explain brieﬂy,
Kamouﬂage stores N − 1 decoy vaults encrypted under
decoy master passwords that are generated by parsing the
true master password and using its structure to help select
the decoys. Analysis of password leaks shows that learning
the true master password’s structure reduces the attacker’s
search space substantially more than one might expect.
Successfully cracking any of the N vaults (decoy or true),
therefore, reveals this structure and confers a big speed-up
on an attacker. We explain the issue in greater detail in the
body.
The upshot is that using Kamouﬂage actually degrades
overall security relative to traditional PBE: an attacker can
perform signiﬁcantly less computational work (on average
about 40% less for N = 1,000) and make just a handful of
online queries. In practice, an attack against Kamouﬂage
would therefore require less total computational resource
than one against traditional PBE, in almost all cases.
Unfortunately this ﬂaw is not easy to ﬁx, but rather seems
fundamental to the Kamouﬂage design. Thus our ﬁnding re-
opens the question of how to build cracking-resistant vaults.
Natural-language encoders. Our next contribution is a
new approach to cracking-resistant vault design. The vul-
nerability in Kamouﬂage is leakage of information by the
explicitly stored set of decoy ciphertexts about
the true
master password. So we seek a design that stores a single
explicit ciphertext and has the property that decryption with
the wrong key ends up generating on-the-ﬂy decoy vaults.
Here we are inspired by Hoover and Kausik’s cryptographic
camouﬂage system [20] and a generalization called honey
encryption (HE) [23]. These prior schemes, however, work
on plaintexts that are drawn from simple distributions, i.e.,
uniform over some set. They would work (with some adap-
tations) for computer-generated random passwords, but fail,
as we conﬁrm experimentally, to impart cracking-resistance
to password managers that may include human-selected
passwords.
To meet the challenge of good decoy vault generation, we
introduce the concept of natural language encoders (NLEs).
An NLE is an algorithm that encodes natural language texts
(in our case, lists of human-selected passwords) such that
decoding a uniformly selected bit string results in a fresh
sample of natural language text. Technically, NLEs are a
new class of the more general concept of a distribution-
transforming encoder [23], previous examples of which gen-
erated uniform prime numbers and uniform integers. NLEs
require different techniques given the (widely understood)
additional complexity of modeling natural languages, even
in the restricted domain of passwords [27], [35], [37].
Rather than design NLEs from scratch, we instead show
how to convert existing models from statistical natural lan-
guage processing into NLEs. Models are compact represen-
tations of the distribution of natural language texts; particular
choices might include n-gram Markov models, probabilistic
context-free grammars (PCFGs), etc. We focus on the ﬁrst
two because they have been used to build effective password
crackers [27], [30], [35], [37]. Our constructions of NLEs
from these model types therefore gives, in effect, a way
to retool password crackers to help us build cracking-
resistant vaults. This approach has signiﬁcant beneﬁts, as
it permits future improvements to natural language models
to be incorporated easily into password vault systems.
We build a number of NLEs based on existing models
trained from password leaks as well as one new PCFG-based
model. To evaluate security, we must determine whether
decoys generated via the decode function are distinguishable
from true passwords. More speciﬁcally, given a sample that
is either a decoy or a random sample from a password leak
(which acts as proxy for a real password), the adversary
must classify its input as a decoy or not. We experimentally
evaluate a number of machine learning classiﬁcation attacks
that allow the adversary to train on decoys as well as pass-
words from the true distribution. These analyses show that
basic machine-learning attacks do not break our schemes.
A human might be able to distinguish real from decoy, but
forcing attackers to rely on the manual effort of humans
(across thousands of decoys in a typical parametrization)
would also be a huge improvement in security over existing
solutions.
We also provide the ﬁrst model of the password sets
associated with password vaults which may include related
or repeated passwords. Unlike single-password models, for
which there is a large amount of public data available, there
is not yet much public data available to researchers on full
password vaults. (This dearth of data is also presumably
problematic for would-be attackers.) Again we perform a
preliminary analysis using a small number of leaked vaults.
This analysis suggests that an extension of our PCFG-
based NLEs generates password vaults resistant to simple
machine-learning attacks that attempt to distinguish fake
vaults from real ones. We caution that future work might ﬁnd
better attacks against our particular NLEs. By construction,
however, our approach never yields security worse than
conventional PBE, unlike the case with Kamouﬂage (as
shown by our attack). Our NLEs at least provide another
obstacle that crackers must ﬁnd ways to overcome, one that
may be bolstered by improvements in language models.
A full vault system. We incorporate NLEs into a full
encrypted vault service called NoCrack that resists ofﬂine
brute-force attacks better than alternative password vault
schemes. NoCrack addresses several previously unexplored
482482
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:07:53 UTC from IEEE Xplore.  Restrictions apply. 
challenges that arise in practical deployment of a honey vault
system: concealing website names associated with vault
passwords, incorporating computer-generated passwords in
addition to user-selected ones, and authenticating users to
the NoCrack service while ensuring service compromise
does not permit ofﬂine brute-force attacks. We report on
a prototype implementation of NoCrack that will be made
public and open-source.
Summary. In summary, our contributions include:
• Breaking Kamouﬂage: We show that Kamouﬂage pro-
vides less security than its original analysis suggested,
and in most realistic cases even less than traditional
PBE schemes.
• Natural-language encoders (NLEs) for vaults: We in-
troduce the concept of natural language encoders, and
show how to build them from typical password models.
This approach allows us to generate realistic decoys on
the ﬂy during brute-force attacks.
• Cracking-resistant password vaults: We use our new
NLEs as the basis for a password vault system called
NoCrack. It addresses a number of issues for the
ﬁrst time, including how to deal with authentication,
concealment of the websites for which a user stores
vault passwords, and more.
Due to space constraints, some of our results and analysis
are relegated to a full version of this paper [12].
II. BACKGROUND AND EXISTING APPROACHES
In practice, password vaults are encrypted under a user’s
master password using a password based encryption (PBE)
scheme. In more detail, a user’s set (cid:2)P of passwords is
encrypted under a master password mpw using authenticated
encryption. Encryption and decryption use a password-based
key-derivation function (KDF), meaning encryption is under
a key computed by applying a hash chain to a random salt
and mpw [25]. (The salt is stored with the ciphertext.) A
decryption operation under an incorrect master password
mpw(cid:2) will fail, as it will not authenticate correctly1. It is for
this reason that an adversary can mount an ofﬂine brute-force
attack against a vault. The adversary’s trial decryption will
fail until the correct master password mpw is discovered.
Currently in-use KDFs prevent precomputation at-
tacks [19] (such as rainbow tables [32]) by salting. They also
increase the cost of brute-force attacks by iterated hashing,
which slows down each decryption attempt. See [1] for a
formal analysis. But all this only slows down brute-force at-
tacks and does not prevent them; the protection conferred on
(cid:2)P by PBE is ultimately a function of the resistance of mpw
to guessing attacks. Numerous studies, e.g., [5], have shown
1Some systems may use unauthenticated encryption such as CBC mode.
Decryption under the wrong master password is still detectable with
overwhelming probability, c.f. [23].
# of accounts
# unique PWs
Min-entropy (bits)
Avg. PW length
Avg. letters/PW
Avg. digits/PW
Avg. symbols/PW
Letter-only PWs
PWs w/ digits
PWs w/ symbols
RY-tr
29.6M 2.98M
1.3M
13.0M
5.3
6.7
7.9
7.9
5.7
5.6
2.3
2.1
0.05
0.05
44.1% 43.8%
54.0% 54.3%
3.7%
3.7%
RY-ts Myspace
41,537
37,136
9.1
8.5
6.4
1.8
0.3
7.0%
84.8%
10.7%
Yahoo
442,846
342,517
8.1
8.3
6.2