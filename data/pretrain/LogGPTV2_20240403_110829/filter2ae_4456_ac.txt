            std::cout pWndProc, hwnd, uMsg, wParam, lParam);
    }
    void CHook::SetupWndProcHook()
    {
        this->pWndProc = (WNDPROC)SetWindowLongPtr(globals::hGame, GWLP_WNDPROC, (LONG_PTR)WndProc_Hooked);
    }
最后效果如下。
## DirectX9
前面已经提到DirectX11和DirectX9,是有些细微差别的，实际上其过程还相对于DirectX11减少了许多步骤，这里我同样编写了下DirectX9
Hook的代码，并找了一款游戏进行测验。
其代码过程也可参考imgui中的[example_win32_directx9](https://github.com/ocornut/imgui/tree/master/examples/example_win32_directx9)，同样我们需要hook一些函数。
### 实战某游戏
dllmain.cpp
    // dllmain.cpp : 定义 DLL 应用程序的入口点。
    #include "includes.h"
    namespace console
    {
        FILE* output_stream = nullptr;
        void attach(const char* name)
        {
            if (AllocConsole())
            {
                freopen_s(&output_stream, "conout$", "w", stdout);
            }
            SetConsoleTitle(name);
        }
        void detach()
        {
            if (output_stream)
            {
                fclose(output_stream);
            }
            FreeConsole();
        }
    }
    #define RAISE_ERROR(check_var, error_message, success_message) \
    if (!check_var) \
    { \
        MessageBoxA(NULL, error_message, "csgo hack", MB_OK | MB_ICONERROR); \
        FreeLibraryAndExitThread(globals::hmModule, 1); \
    } \
    else \
    { \
        std::cout SetupDX9Hook();
        RAISE_ERROR(m_pHook->pEndSceneAddress, "Error hook DX9", "EndScene");
        RAISE_ERROR(m_pHook->pResetAddress, "Error hook DX9", "Reset: ");
        //调用SetWindowLongPtr函数修改了游戏窗口的WndProc，也就是窗口的消息处理函数，具体的消息处理函数将在对应函数位置进行分析。
        m_pHook->SetupWndProcHook();
        RAISE_ERROR(m_pHook->pWndProc, "Error hook wndproc", "wndproc: ")
            while (true)
            {
                if (globals::unload_dll) break;
                Sleep(228);
            }
        Sleep(30);
        ImGui_ImplDX9_Shutdown();
        ImGui_ImplWin32_Shutdown();
        ImGui::DestroyContext();
        Sleep(100);
        MH_DisableHook(m_pHook->pEndSceneAddress);
        MH_RemoveHook(m_pHook->pEndSceneAddress);
        Sleep(100);
        MH_DisableHook(m_pHook->pResetAddress);
        MH_RemoveHook(m_pHook->pResetAddress);
        MH_Uninitialize();
        Sleep(100);
        SetWindowLongPtr(globals::hGame, GWLP_WNDPROC, (LONG_PTR)m_pHook->pWndProc);
        Sleep(100);
        //free library
        std::cout m_pHook;
    extern IDirect3D9* g_pD3D;
    extern IDirect3DDevice9* device;
hook.cpp
    #include "../includes.h"
    std::unique_ptrm_pHook = std::make_unique();
    using fEndscene = HRESULT(__stdcall*)(IDirect3DDevice9*);
    fEndscene pEndscene = NULL;
    using fReset = long(__stdcall*)(IDirect3DDevice9*, D3DPRESENT_PARAMETERS*);
    fReset pReset = NULL;
    IDirect3D9* g_pD3D= nullptr;
    IDirect3DDevice9* device = nullptr;
    ID3D11DeviceContext* context = nullptr;
    enum IDirect3DDevice9vTable //for dx9
    {
        RESET = 16,
        ENDSCENE=42
    };
    namespace vars
    {
        static bool bMenuOpen = true;
    }
    void InitImGui(IDirect3DDevice9* pd3dDevice)
    {
        IMGUI_CHECKVERSION();
        ImGui::CreateContext();
        ImGuiIO& io = ImGui::GetIO(); (void)io;
        ImGui_ImplWin32_Init(globals::hGame);
        ImGui_ImplDX9_Init(pd3dDevice);
    }
    void BeginScene()
    {
        // 界面开始绘制
        ImGui_ImplDX9_NewFrame();
        ImGui_ImplWin32_NewFrame();
        ImGui::NewFrame();
        bool show_demo_window = true;
        ImGui::ShowDemoWindow(&show_demo_window);
        ImGui::Begin("Another Window", &show_demo_window);   // Pass a pointer to our bool variable (the window will have a closing button that will clear the bool when clicked)
        ImGui::Text("Hello from another window!");
        static int counter = 0;
        if (ImGui::Button("Button"))                            // Buttons return true when clicked (most widgets return true when edited/activated)
            counter++;
        ImGui::Text("counter = %d", counter);
        ImGui::End();
        ImGui::Render();
        ImGui_ImplDX9_RenderDrawData(ImGui::GetDrawData());
    }
    HRESULT __stdcall EndScene_Hooked(IDirect3DDevice9* pd3dDevice)
    {
        static auto once = [pd3dDevice]()
        {
            std::cout  first called!"  first called!" CreateDevice(D3DADAPTER_DEFAULT, D3DDEVTYPE_HAL, globals::hGame, D3DCREATE_HARDWARE_VERTEXPROCESSING, &g_d3dpp, &device) (device);
        this->pEndSceneAddress = reinterpret_cast(pVTabledevice[IDirect3DDevice9vTable::ENDSCENE]);
        this->pResetAddress = reinterpret_cast(pVTabledevice[IDirect3DDevice9vTable::RESET]);
        if (MH_CreateHook(this->pEndSceneAddress, &EndScene_Hooked, (LPVOID*)&pEndscene) != MH_OK
            || MH_EnableHook(this->pEndSceneAddress) != MH_OK)
        {
            std::cout pResetAddress, &Reset_Hooked, (LPVOID*)&pReset) != MH_OK
            || MH_EnableHook(this->pResetAddress) != MH_OK)
        {
            std::cout pWndProc, hwnd, uMsg, wParam, lParam);
    }
    void CHook::SetupWndProcHook()
    {
        this->pWndProc = (WNDPROC)SetWindowLongPtr(globals::hGame, GWLP_WNDPROC, (LONG_PTR)WndProc_Hooked);
    }
最终效果如下。
## 结语
实际上关于DirectX
还有很多有意思的地方，比如说经典的WalkHack，通过钩取函数，实现获取人物模型编号，以及修改Z轴深度缓存来达到想要的目的。还有对于imgui，也是有很多可以学习的地方，对比古老的Mfc窗口，或者自定义窗口，imgui的窗口简单而美观，并且实现起来也很方便。
* * *