### Instruction Descriptions and Specifications

#### CBW - Convert Byte to Word
- **Usage:** `CBW`
- **Modifies Flags:** None
- **Description:** Converts the byte in AL to a word value in AX by extending the sign of AL throughout register AH.
- **Clocks and Size:**
  | Processor | Clocks | Size (Bytes) |
  |-----------|--------|--------------|
  | 808x      | 2      | 1            |
  | 286       | 2      | 1            |
  | 386       | 3      | 1            |
  | 486       | 3      | 1            |

#### CDQ - Convert Double to Quad (386+)
- **Usage:** `CDQ`
- **Modifies Flags:** None
- **Description:** Converts the signed doubleword in EAX to a signed quadword in EDX:EAX by extending the high-order bit of EAX throughout EDX.
- **Clocks and Size:**
  | Processor | Clocks | Size (Bytes) |
  |-----------|--------|--------------|
  | 808x      | -      | -            |
  | 286       | -      | -            |
  | 386       | 2      | 1            |
  | 486       | 3      | 1            |

#### CLC - Clear Carry
- **Usage:** `CLC`
- **Modifies Flags:** CF
- **Description:** Clears the Carry Flag.
- **Clocks and Size:**
  | Processor | Clocks | Size (Bytes) |
  |-----------|--------|--------------|
  | 808x      | 2      | 1            |
  | 286       | 2      | 1            |
  | 386       | 2      | 1            |
  | 486       | 2      | 1            |

#### CLD - Clear Direction Flag
- **Usage:** `CLD`
- **Modifies Flags:** DF
- **Description:** Clears the Direction Flag, causing string instructions to increment the SI and DI index registers.
- **Clocks and Size:**
  | Processor | Clocks | Size (Bytes) |
  |-----------|--------|--------------|
  | 808x      | 2      | 1            |
  | 286       | 2      | 1            |
  | 386       | 2      | 1            |
  | 486       | 2      | 1            |

#### CLI - Clear Interrupt Flag (disable)
- **Usage:** `CLI`
- **Modifies Flags:** IF
- **Description:** Disables maskable hardware interrupts by clearing the Interrupt Flag. NMI's and software interrupts are not inhibited.
- **Clocks and Size:**
  | Processor | Clocks | Size (Bytes) |
  |-----------|--------|--------------|
  | 808x      | 2      | 1            |
  | 286       | 2      | 1            |
  | 386       | 3      | 1            |
  | 486       | 5      | 1            |

#### CLTS - Clear Task Switched Flag (286+ privileged)
- **Usage:** `CLTS`
- **Modifies Flags:** None
- **Description:** Clears the Task Switched Flag in the Machine Status Register. This is a privileged operation and is generally used only by operating system code.
- **Clocks and Size:**
  | Processor | Clocks | Size (Bytes) |
  |-----------|--------|--------------|
  | 808x      | -      | -            |
  | 286       | 2      | 2            |
  | 386       | 5      | 2            |
  | 486       | 7      | 2            |

#### CMC - Complement Carry Flag
- **Usage:** `CMC`
- **Modifies Flags:** CF
- **Description:** Toggles (inverts) the Carry Flag.
- **Clocks and Size:**
  | Processor | Clocks | Size (Bytes) |
  |-----------|--------|--------------|
  | 808x      | 2      | 1            |
  | 286       | 2      | 1            |
  | 386       | 2      | 1            |
  | 486       | 2      | 1            |

#### CMP - Compare
- **Usage:** `CMP dest, src`
- **Modifies Flags:** AF, CF, OF, PF, SF, ZF
- **Description:** Subtracts the source from the destination and updates the flags but does not save the result. Flags can subsequently be checked for conditions.
- **Clocks and Size:**
  | Operands   | 808x  | 286  | 386  | 486  | Size (Bytes) |
  |------------|-------|------|------|------|--------------|
  | reg, reg   | 3     | 2    | 2    | 1    | 2            |
  | mem, reg   | 9+EA  | 7    | 5    | 2    | 2-4          |
  | reg, mem   | 9+EA  | 6    | 6    | 2    | 2-4          |
  | reg, immed | 4     | 3    | 2    | 1    | 3-4          |
  | mem, immed | 10+EA | 6    | 5    | 2    | 3-6          |
  | accum, immed | 4 | 3    | 2    | 1    | 2-3          |

#### CMPS - Compare String (Byte, Word or Doubleword)
- **Usage:** `CMPS dest, src`, `CMPSB`, `CMPSW`, `CMPSD` (386+)
- **Modifies Flags:** AF, CF, OF, PF, SF, ZF
- **Description:** Subtracts the destination value from the source without saving the results. Updates flags based on the subtraction. The index registers (E)SI and (E)DI are incremented or decremented depending on the state of the Direction Flag. CMPSB increments/decrements by 1, CMPSW by 2, and CMPSD by 4. The REP prefixes can be used to process entire data items.
- **Clocks and Size:**
  | Operands   | 808x  | 286  | 386  | 486  | Size (Bytes) |
  |------------|-------|------|------|------|--------------|
  | dest, src  | 22    | 8    | 10   | 8    | 1            |

#### CMPXCHG - Compare and Exchange (486+)
- **Usage:** `CMPXCHG dest, src`
- **Modifies Flags:** AF, CF, OF, PF, SF, ZF
- **Description:** Compares the accumulator (8-32 bits) with "dest". If equal, "dest" is loaded with "src"; otherwise, the accumulator is loaded with "dest".
- **Clocks and Size:**
  | Operands   | 808x  | 286  | 386  | 486  | Size (Bytes) |
  |------------|-------|------|------|------|--------------|
  | reg, reg   | -     | -    | -    | 6    | 2            |
  | mem, reg   | -     | -    | -    | 7    | 2            |
  | Note: Add 3 clocks if the "mem, reg" comparison fails. |

#### CWD - Convert Word to Doubleword
- **Usage:** `CWD`
- **Modifies Flags:** None
- **Description:** Extends the sign of the word in register AX throughout register DX, forming a doubleword quantity in DX:AX.
- **Clocks and Size:**
  | Processor | Clocks | Size (Bytes) |
  |-----------|--------|--------------|
  | 808x      | 5      | 1            |
  | 286       | 2      | 1            |
  | 386       | 2      | 1            |
  | 486       | 3      | 1            |

#### CWDE - Convert Word to Extended Doubleword (386+)
- **Usage:** `CWDE`
- **Modifies Flags:** None
- **Description:** Converts a signed word in AX to a signed doubleword in EAX by extending the sign bit of AX throughout EAX.
- **Clocks and Size:**
  | Processor | Clocks | Size (Bytes) |
  |-----------|--------|--------------|
  | 808x      | -      | -            |
  | 286       | -      | -            |
  | 386       | 3      | 1            |
  | 486       | 3      | 1            |

#### DAA - Decimal Adjust for Addition
- **Usage:** `DAA`
- **Modifies Flags:** AF, CF, PF, SF, ZF (OF undefined)
- **Description:** Corrects the result (in AL) of a previous BCD addition operation. Contents of AL are changed to a pair of packed decimal digits.
- **Clocks and Size:**
  | Processor | Clocks | Size (Bytes) |
  |-----------|--------|--------------|
  | 808x      | 4      | 1            |
  | 286       | 3      | 1            |
  | 386       | 4      | 1            |
  | 486       | 2      | 1            |

#### DAS - Decimal Adjust for Subtraction
- **Usage:** `DAS`
- **Modifies Flags:** AF, CF, PF, SF, ZF (OF undefined)
- **Description:** Corrects the result (in AL) of a previous BCD subtraction operation. Contents of AL are changed to a pair of packed decimal digits.
- **Clocks and Size:**
  | Processor | Clocks | Size (Bytes) |
  |-----------|--------|--------------|
  | 808x      | 4      | 1            |
  | 286       | 3      | 1            |
  | 386       | 4      | 1            |
  | 486       | 2      | 1            |

#### DEC - Decrement
- **Usage:** `DEC dest`
- **Modifies Flags:** AF, OF, PF, SF, ZF
- **Description:** Unsigned binary subtraction of one from the destination.
- **Clocks and Size:**
  | Operands   | 808x  | 286  | 386  | 486  | Size (Bytes) |
  |------------|-------|------|------|------|--------------|
  | reg8       | 3     | 2    | 2    | 1    | 2            |
  | mem        | 15+EA | 7    | 6    | 3    | 2-4          |
  | reg16/32   | 3     | 2    | 2    | 1    | 1            |

#### DIV - Divide
- **Usage:** `DIV src`
- **Modifies Flags:** (AF, CF, OF, PF, SF, ZF undefined)
- **Description:** Unsigned binary division of the accumulator by the source. If the source divisor is a byte value, AX is divided by "src", and the quotient is placed in AL and the remainder in AH. If the source operand is a word value, DX:AX is divided by "src", and the quotient is stored in AX and the remainder in DX.
- **Clocks and Size:**
  | Operands   | 808x  | 286  | 386  | 486  | Size (Bytes) |
  |------------|-------|------|------|------|--------------|
  | reg8       | 80-90 | 14   | 14   | 16   | 2            |
  | reg16      | 144-162 | 22 | 22 | 24   | 2            |
  | reg32      | -     | -    | 38   | 40   | 2            |
  | mem8       | (86-96)+EA | 17 | 17 | 16  | 2-4          |
  | mem16      | (150-168)+EA | 25 | 25 | 24  | 2-4          |
  | mem32      | -     | -    | 41   | 40   | 2-4          |

#### ENTER - Make Stack Frame (80188+)
- **Usage:** `ENTER locals, level`
- **Modifies Flags:** None
- **Description:** Modifies the stack for entry to a procedure in high-level language. The "locals" operand specifies the amount of storage to be allocated on the stack. The "level" operand specifies the nesting level of the routine. Paired with the LEAVE instruction, this is an efficient method of entry and exit to procedures.
- **Clocks and Size:**
  | Operands   | 808x  | 286  | 386  | 486  | Size (Bytes) |
  |------------|-------|------|------|------|--------------|
  | immed16,0  | -     | 11   | 10   | 14   | 4            |
  | immed16,1  | -     | 15   | 12   | 17   | 4            |
  | immed16,immed8 | - | 12+4(n-1) | 15+4(n-1) | 17+3n | 4 |

#### ESC - Escape
- **Usage:** `ESC immed, src`
- **Modifies Flags:** None
- **Description:** Provides access to the data bus for other resident processors. The CPU treats it as a NOP but places the memory operand on the bus.
- **Clocks and Size:**
  | Operands   | 808x  | 286  | 386  | 486  | Size (Bytes) |
  |------------|-------|------|------|------|--------------|
  | immed, reg | 2     | 9-20 | ?    | 2    | 2            |
  | immed, mem | 2     | 9-20 | ?    | 2-4  | 2-4          |

#### HLT - Halt CPU
- **Usage:** `HLT`
- **Modifies Flags:** None
- **Description:** Halts the CPU until the RESET line is activated, an NMI or a maskable interrupt is received. The CPU becomes dormant but retains the current CS:IP for later restart.
- **Clocks and Size:**
  | Processor | Clocks | Size (Bytes) |
  |-----------|--------|--------------|
  | 808x      | 2      | 1            |
  | 286       | 2      | 1            |
  | 386       | 5      | 1            |
  | 486       | 4      | 1            |

#### IDIV - Signed Integer Division
- **Usage:** `IDIV src`
- **Modifies Flags:** (AF, CF, OF, PF, SF, ZF undefined)
- **Description:** Signed binary division of the accumulator by the source. If the source is a byte value, AX is divided by "src", and the quotient is stored in AL and the remainder in AH. If the source is a word value, DX:AX is divided by "src", and the quotient is stored in AL and the remainder in DX.
- **Clocks and Size:**
  | Operands   | 808x  | 286  | 386  | 486  | Size (Bytes) |
  |------------|-------|------|------|------|--------------|
  | reg8       | 101-112 | 17 | 19 | 19  | 2            |
  | reg16      | 165-184 | 25 | 27 | 27  | 2            |
  | reg32      | -     | -    | 43   | 43   | 2            |
  | mem8       | (107-118)+EA | 20 | 22 | 20  | 2-4          |
  | mem16      | (171-190)+EA | 38 | 30 | 28  | 2-4          |
  | mem32      | -     | -    | 46   | 44   | 2-4          |

#### IMUL - Signed Multiply
- **Usage:** 
  - `IMUL src`
  - `IMUL src, immed` (286+)
  - `IMUL dest, src, immed8` (286+)
  - `IMUL dest, src` (386+)
- **Modifies Flags:** CF, OF (AF, PF, SF, ZF undefined)
- **Description:** Signed multiplication of the accumulator by "src" with the result placed in the accumulator. If the source operand is a byte value, it is multiplied by AL and the result is stored in AX. If the source operand is a word value, it is multiplied by AX and the result is stored in DX:AX. Other variations of this instruction allow specification of source and destination registers as well as a third immediate factor.
- **Clocks and Size:**
  | Operands   | 808x  | 286  | 386  | 486  | Size (Bytes) |
  |------------|-------|------|------|------|--------------|
  | reg8       | 80-98 | 13   | 9-14 | 13-18 | 2            |
  | reg16      | 128-154 | 21 | 9-22 | 13-26 | 2            |
  | reg32      | -     | -    | 9-38 | 12-42 | 2            |
  | mem8       | 86-104 | 16 | 12-17 | 13-18 | 2-4          |
  | mem16      | 134-160 | 24 | 12-25 | 13-26 | 2-4          |
  | mem32      | -     | -    | 12-41 | 13-42 | 2-4          |
  | reg16, reg16 | - | -    | 9-22 | 13-26 | 3-5          |
  | reg32, reg32 | - | -    | 9-38 | 13-42 | 3-5          |
  | reg16, mem16 | - | -    | 12-25 | 13-26 | 3-5          |
  | reg32, mem32 | - | -    | 12-41 | 13-42 | 3-5          |
  | reg16, immed | - | 21   | 9-22 | 13-26 | 3            |
  | reg32, immed | - | 21   | 9-38 | 13-42 | 3-6          |
  | reg16, reg16, immed | - | 2 | 9-22 | 13-26 | 3-6          |
  | reg32, reg32, immed | - | 21 | 9-38 | 13-42 | 3-6          |
  | reg16, mem16, immed | - | 24 | 12-25 | 13-26 | 3-6          |
  | reg32, mem32, immed | - | 24 | 12-41 | 13-42 | 3-6          |

#### IN - Input Byte or Word From Port
- **Usage:** `IN accum, port`
- **Modifies Flags:** None
- **Description:** Reads a byte, word, or dword from "port" and places it in AL, AX, or EAX, respectively. If the port number is in the range of 0-255, it can be specified as an immediate; otherwise, the port number must be specified in DX. Valid port ranges on the PC are 0-1024, though values through 65535 may be recognized by third-party vendors and PS/2's.
- **Clocks and Size:**
  | Operands   | 808x  | 286  | 386  | 486  | Size (Bytes) |
  |------------|-------|------|------|------|--------------|
  | accum, immed8 | 10/14 | 5 | 12 | 14  | 2            |
  | accum, immed8 (PM) | 6/26 | 8/28/27 | 2            |
  | accum, DX  | 8/12  | 5    | 13   | 14   | 1            |
  | accum, DX (PM) | 7/27 | 8/28/27 | 1            |
  | Note: 386+ protected mode timings depend on privilege levels. First number is the timing if CPL ≤ IOPL, second number is the timing if CPL > IOPL or in VM 86 mode (386), and third number is the timing if virtual mode on 486 processor. 486 virtual mode always requires 27 cycles. |

#### INC - Increment
- **Usage:** `INC dest`
- **Modifies Flags:** AF, OF, PF, SF, ZF
- **Description:** Increments the destination by one.
- **Clocks and Size:**
  | Operands   | 808x  | 286  | 386  | 486  | Size (Bytes) |
  |------------|-------|------|------|------|--------------|
  | reg8       | 3     | 2    | 2    | 1    | 2            |
  | mem        | 15+EA | 7    | 6    | 3    | 2-4          |
  | reg16/32   | 3     | 2    | 2    | 1    | 1            |