能兼得（但是针对一个电子表格文件，可以加载多个Workbook对象）。在交互式环
境中输入以下代码，看看有无data_only关键字参数时，加载工作簿的区别：
234 Python编程快速上手——让繁琐工作自动化
>>> import openpyxl
>>> wbFormulas = openpyxl.load_workbook('writeFormula.xlsx')
>>> sheet = wbFormulas.get_active_sheet()
>>> sheet['A3'].value
'=SUM(A1:A2)'
>>> wbDataOnly = openpyxl.load_workbook('writeFormula.xlsx', data_only=True)
>>> sheet = wbDataOnly.get_active_sheet()
>>> sheet['A3'].value
500
这里，如果调用 load_workbook()时带有 data_only=True，A3 单元格就显示为
500，即公式的结果，而不是公式的文本。
Excel 公式为电子表格提供了一定程度的编程能力，但对于复杂的任务，很快
就会失去控制。例如，即使你非常熟悉 Excel 的公式，要想弄清楚=IFERROR
(TRIM(IF(LEN(VLOOKUP(F7,Sheet2!$A$1:$B$10000,2,FALSE))>0,SUBSTITUTE
(VLOOKUP (F7, Sheet2!$A$1:$B$10000, 2, FALSE), " ", ""),"")), "")实际上做了什么，
也是一件非常头痛的事。Python代码的可读性要好得多。
12.10 调整行和列
在 Excel 中，调整行和列的大小非常容易，只要点击并拖动行的边缘，或列的
头部。但如果你需要根据单元格的内容来设置行或列的大小，或者希望设置大量电
子表格文件中的行列大小，编写Python程序来做就要快得多。
行和列也可以完全隐藏起来。或者它们可以“冻结”，这样就总是显示在屏幕
上，如果打印该电子表格，它们就出现在每一页上（这很适合做表头）。
12.10.1 设置行高和列宽
Worksheet对象有row_dimensions和column_dimensions属性，控制行高和列宽。
在交互式环境中输入以下代码：
>>> import openpyxl
>>> wb = openpyxl.Workbook()
>>> sheet = wb.get_active_sheet()
>>> sheet['A1'] = 'Tall row'
>>> sheet['B2'] = 'Wide column'
>>> sheet.row_dimensions[1].height = 70
>>> sheet.column_dimensions['B'].width = 20
>>> wb.save('dimensions.xlsx')
工作表的 row_dimensions 和 column_dimensions 是像字典一样的值，row_
dimensions包含RowDimension对象，column_dimensions包含ColumnDimension对象。
在row_dimensions中，可以用行的编号来访问一个对象（在这个例子中，是1或）。在
column_dimensions中，可以用列的字母来访问一个对象（在这个例子中，是A或B）。
第12章 处理Excel电子表格 235
dimensions.xlsx电子表格如图12-6所示。
图12-6 行1和列B设置了更大的高度和宽度
一旦有了RowDimension对象，就可以设置它的高度。一旦有了ColumnDimension对
象，就可以设置它的宽度。行的高度可以设置为0到409之间的整数或浮点值。这
个值表示高度的点数。一点等于 1/72 英寸。默认的行高是 12.75。列宽可以设置为 0
到255之间的整数或浮点数。这个值表示使用默认字体大小时（11点），单元格可以显
示的字符数。默认的列宽是8.43个字符。列宽为零或行高为零，将使单元格隐藏。
12.10.2 合并和拆分单元格
利用 merge_cells()工作表方法，可以将一个矩形区域中的单元格合并为一个单
元格。在交互式环境中输入以下代码：
>>> import openpyxl
>>> wb = openpyxl.Workbook()
>>> sheet = wb.get_active_sheet()
>>> sheet.merge_cells('A1:D3')
>>> sheet['A1'] = 'Twelve cells merged together.'
>>> sheet.merge_cells('C5:D5')
>>> sheet['C5'] = 'Two merged cells.'
>>> wb.save('merged.xlsx')
merge_cells()的参数是一个字符串，表示要合并的矩形区域左上角和右下角的
单元格：'A1:D3'将12个单元格合并为一个单元格。要设置这些合并后单元格的值，
只要设置这一组合并单元格左上角的单元格的值。
如果运行这段代码，merged.xlsx看起来如图12-7所示。
图12-7 在电子表格中合并单元格
236 Python编程快速上手——让繁琐工作自动化
要拆分单元格，就调用 unmerge_cells()工作表方法。在交互式环境中输入以下
代码：
>>> import openpyxl
>>> wb = openpyxl.load_workbook('merged.xlsx')
>>> sheet = wb.get_active_sheet()
>>> sheet.unmerge_cells('A1:D3')
>>> sheet.unmerge_cells('C5:D5')
>>> wb.save('merged.xlsx')
如果保存变更，然后查看这个电子表格，就会看到合并的单元格恢复成一些独
立的单元格。
12.10.3 冻结窗格
对于太大而不能一屏显示的电子表格，“冻结”顶部的几行或最左边的几列，是
很有帮助的。例如，冻结的列或行表头，就算用户滚动电子表格，也是始终可见的。
这称为“冻结窗格”。在 OpenPyXL 中，每个 Worksheet 对象都有一个 freeze_panes
属性，可以设置为一个Cell对象或一个单元格坐标的字符串。请注意，单元格上边的所
有行和左边的所有列都会冻结，但单元格所在的行和列不会冻结。
要解冻所有的单元格，就将 freeze_panes 设置为 None 或'A1'。表 12-3 展示了
freeze_panes设定的一些例子，以及哪些行或列会冻结。
表12-3 冻结窗格的例子
freeze_panes的设置 冻结的行和列
sheet.freeze_panes = 'A2' 行1
sheet.freeze_panes = 'B1' 列A
sheet.freeze_panes = 'C1' 列A和列B
sheet.freeze_panes = 'C2' 行1和列A和列B
sheet.freeze_panes = 'A1'或 没有冻结窗格
sheet.freeze_panes = None
确保你有来自http://nostarch.com/automatestuff/的产品销售电子表格。然后在交
互式环境中输入以下代码：
>>> import openpyxl
>>> wb = openpyxl.load_workbook('produceSales.xlsx')
>>> sheet = wb.get_active_sheet()
>>> sheet.freeze_panes = 'A2'
>>> wb.save('freezeExample.xlsx')
如果将freeze_panes属性设置为'A2'，行1将永远可见，无论用户将电子表格滚
动到何处，如图12-8所示。
第12章 处理Excel电子表格 237
图12-8 将reeze_panes设置为'A2'，行1将永远可见，无论用户如何向下滚动
12.10.4 图表
openpyxl支持利用工作表中单元格的数据，创建条形图、折线图、散点图和饼
图。要创建图表，需要做下列事情：
1．从一个矩形区域选择的单元格，创建一个Reference对象。
2．通过传入Reference对象，创建一个Series对象。
3．创建一个Chart对象。
4．将Series对象添加到Chart对象。
5．可选地设置Chart对象的drawing.top、drawing.left、drawing.width和drawing.height
变量。
6．将Chart对象添加到Worksheet对象。
Reference对象需要一些解释。Reference对象是通过调用openpyxl.charts. Reference()
函数并传入3个参数创建的：
1．包含图表数据的Worksheet对象。
2．两个整数的元组，代表矩形选择区域的左上角单元格，该区域包含图表数
据：元组中第一个整数是行，第二个整数是列。请注意第一行是1，不是0。
3．两个整数的元组，代表矩形选择区域的右下角单元格，该区域包含图表数
据：元组中第一个整数是行，第二个整数是列。
图12-9展示了坐标参数的一些例子。
图12-9 从左到右：(1, 1), (10, 1); (3, 2), (6, 4); (5, 3), (5, 3)
238 Python编程快速上手——让繁琐工作自动化
在交互式环境中输入以下代码，创建一个条形图，将它添加到电子表格中：
>>> import openpyxl
>>> wb = openpyxl.Workbook()
>>> sheet = wb.get_active_sheet()
>>> for i in range(1, 11): # create some data in column A
sheet['A' + str(i)] = i
>>> refObj = openpyxl.charts.Reference(sheet, (1, 1), (10, 1))
>>> seriesObj = openpyxl.charts.Series(refObj, title='First series')
>>> chartObj = openpyxl.charts.BarChart()
>>> chartObj.append(seriesObj)
>>> chartObj.drawing.top = 50 # set the position
>>> chartObj.drawing.left = 100
>>> chartObj.drawing.width = 300 # set the size
>>> chartObj.drawing.height = 200
>>> sheet.add_chart(chartObj)
>>> wb.save('sampleChart.xlsx')
得到的电子表格，如图12-10所示。
图12-10 添加了一个图表的电子表格
我们可以调用 openpyxl.charts.BarChart()，创建一个条形图。也可以调用
openpyxl.charts.LineChart()、openpyxl.charts.ScatterChart()和openpyxl.charts.PieChart()，创
建折线图、散点图和饼图。
遗憾的是，在OpenPyXL的当前版本中（2.1.4），load_workbook()不会加载Excel
文件中的图表。即使Excel文件包含图表，加载的Workbook对象也不会包含它们。
如果加载一个Workbook对象，然后马上保存到同样的.xlsx文件名中，实际上就会
删除其中的图表。
第12章 处理Excel电子表格 239
12.11 小结
处理信息是比较难的部分，通常不是处理本身难，而是为程序得到正确格式的
数据较难。一旦你将电子表格载入Python，就可以提取并操作它的数据，比手工操
作要快得多。
你也可以生成电子表格，作为程序的输出。所以如果同事需要将包含几千条销
售合同的文本文件或PDF转换成电子表格文件，你就不需要无聊地将它拷贝粘贴到
Excel中。
有了openpyxl模块和一些编程知识，你会发现处理很大的电子表格也是小事一桩。
12.12 习题
对于以下的问题，设想你有一个 Workbook 对象保存在变量 wb 中，一个
Worksheet对象保存在sheet中，一个Cell对象保存在cell中，一个Comment对象
保存在comm中，一个Image对象保存在img中。
1．openpyxl.load_workbook()函数返回什么？
2．get_sheet_names()工作簿方法返回什么？
3．如何取得名为'Sheet1'的工作表的Worksheet对象？
4．如何取得工作簿的活动工作表的Worksheet对象？
5．如何取得单元格C5中的值？
6．如何将单元格C5中的值设置为"Hello"？
7．如何取得表示单元格的行和列的整数？
8．工作表方法get_highest_column()和get_highest_row()返回什么？这些返回值
的类型是什么？
9．如果要取得列'M'的整数下标，需要调用什么函数？
10．如果要取得列14的字符串名称，需要调用什么函数？
11．如何取得从A1到F1的所有Cell对象的元组？
12．如何将工作簿保存到文件名example.xlsx？
13．如何在一个单元格中设置公式？
14．如果需要取得单元格中公式的结果，而不是公式本身，必须先做什么？
15．如何将第5行的高度设置为100？
16．如何设置列C的宽度？
17．列出一些openpyxl 2.1.4不会从电子表格文件中加载的功能。
18．什么是冻结窗格？
19．创建一个条形图，需要调用哪5个函数和方法？
240 Python编程快速上手——让繁琐工作自动化
12.13 实践项目
作为实践，编程执行以下任务。
12.13.1 乘法表
创建程序multiplicationTable.py，从命令行接受数字N，在一个Excel电子表格
中创建一个N×N的乘法表。例如，如果这样执行程序：
py multiplicationTable.py 6
它应该创建一个图12-11所示的电子表格。
图12-11 在电子表格中生成的乘法表
行1和列A应该用做标签，应该使用粗体。
12.13.2 空行插入程序
创建一个程序 blankRowInserter.py，它接受两个整数和一个文件名字符串作为
命令行参数。我们将第一个整数称为N，第二个整数称为M。程序应该从第N行开
始，在电子表格中插入M个空行。例如，如果这样执行程序：
python blankRowInserter.py 3 2 myProduce.xlsx
执行之前和之后的电子表格，应该如图12-12所示。
图12-12 之前（左边）和之后（右边）在第三行插入两个空行
程序可以这样写：读入电子表格的内容，然后在写入新的电子表格时，利用for
循环拷贝前面N行。对于剩下的行，行号加上M，写入输出的电子表格。
第12章 处理Excel电子表格 241
12.13.3 电子表格单元格翻转程序
编写一个程序，翻转电子表格中行和列的单元格。例如，第5行第3列的值将
出现在第3行第5列（反之亦然）。这应该针对电子表格中所有单元格进行。例如，
之前和之后的电子表格应该看起来如图12-13所示。
图12-13 翻转之前（上面）和之后（下面）的电子表格
程序可以这样写：利用嵌套的 for 循环，将电子表格中的数据读入一个列表的
列表。这个数据结构用 sheetData[x][y]表示列 x 和行 y 处的单元格。然后，在写入
新电子表格时，将sheetData[y][x]写入列x和行y处的单元格。
12.13.4 文本文件到电子表格