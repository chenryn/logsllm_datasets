int end = 0 ;
whi1e (isspace (*cd)) (
++cd;
whi1e (+cd && (paiz = getword (mbuff->input_encoding, scd, *;*111 {
char +key = NULL, *word = pair;
}((p>) aoedss) qμ
++cd;
if (strehr (pair, *=)) {
key = getvord [mbuff->input_encoding, &pair, =) ;
else if (1strcasecmp (key, filename") ) (
if (filename)(
efree (filename) :
filenane = getvord_conf (mbuff ->input_encoding, pair) ;
---
## Page 171
2.4 File Upload Vulnerability
155
if (mbuff ->input_encoding && internal_encoding) {
unsigned char *nev_filename ;
size_t new_filename_len;
if ( (size_t) -1 != zend_multibyte_encoding_converter
(snew_filenane,
Snew_filename_len, (unsigned char *)filename, strlen
(filename),
internal_encoding, mbuff ->input_encoding) ) {
filename = (char *) ne_filename ;
efree (filename) ;
The “filename” variable used to register "S_FILES['name'’]° is obtained from the
“header” structure, so the file name that is finally registered to "S_FILES['name’T' is
the truncated file name.
In Java, versions below *jdk7u40" have “00" truncation problems. The versions
after “jdk7u40", the “"isInvalidO" method of *File" will be called during operations
such as uploading and writing files to determine whether the file name is legal, that
is, the file name is not allowed to contain “0" char. If the file name is invalid, an
exception will be thrown to exit the process.
final boolean lsInvalid()
if (status == null) {
status = (this path.indexOf (′\uoooo') 
dtd-pdaaq-x/uopaeottdde xotpuegsog
$cur1 http://Locothost/book/x.php . Jpg
echo *Hel1o lorld*;
>
$ mv x.phe.jpg x.pho.xx
.iibo[
ctns[.]
Hello Ilor1d
Fig. 2.118 Result
---
## Page 181
2.4 File Upload Vulnerability
165
c?ohp
$content=s_POST['content'];
$ext=strtolower(substr(strrchr(sfilename，'.)，1));
if（sext!=php）
file_put_contents('upload/'.sfilenane,$content);
extt(ok）;
Jelset
exit(*Forbid!');
H
Fig, 2.119 PHP code
,dyd-ppodn/
Fig, 2.120 Result
sr
Fig, 2.121 Result
The original intention of the above Apache configuration is to only parse files
 o anp posred oq ose ueo udyd, pim Supua say 1nq *dyd, pim Supua
CVE-2017-15715 vulnerability, then you can upload *x.phpin files to bypass the
blacklist. However, in the process of uploading *PHP S_FILES", “S_FILES
[name'T’ will clear the "n" character and it cannot be exploited. The following
uses “file_put_contents” to implement the upload code. The test code is shown in
Fig. 2.119.
In the above code, uploading the PHP file fails, as shown in Fig. 2.120.
11'7  u umous se 'ssons g udqdx, o upeod
2.4.5File Access Forbidden Bypass
In the test, some features that allow arbitrary uploading are often encountered. It is
discovered that the uploaded script file cannot be parsed or accessed. Usually, the
script file in the upload directory is configured to prohibit access in the web server.
When the files in the upload directory cannot be accessed, the best way to bypass is
definitely to upload the file to the root directory, such as trying to upload similar files
such as "./x.php", etc. However, this method cannot be implemented for
---
## Page 182
166
2 Advanced Web
(is_are
tf(buf, Llen,
Fig, 2.122 The code of _basename()