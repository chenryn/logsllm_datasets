0.375
0.403
0.382
0.427
0.411
0.364
0.418
0.323
0.491
0.406
0.401
DEEPBINDIFF
0.667
0.600
0.692
0.604
0.753
0.509
0.824
0.675
0.587
0.631
0.636
0.266
0.275
0.282
0.221
0.393
0.334
0.256
0.331
0.258
0.252
0.296
DEEPBINDIFF
0.626
0.605
0.639
0.591
0.632
0.641
0.647
0.563
0.649
0.625
0.620
0.271
0.281
0.288
0.224
0.396
0.341
0.262
0.338
0.269
0.259
0.302
DEEPBINDIFF
0.631
0.652
0.701
0.605
0.663
0.641
0.643
0.594
0.679
0.632
0.645
TABLE IV: C++ Programs Testing
TABLE V: C++ Programs Testing Detailed Numbers
LSHBOX
v1.0 vs v3.0
LSHBOX
v2.0 vs v3.0
indicators
v1.2 vs v1.4
indicators
v1.3 vs v1.4
psdlsh
rbslsh
rhplsh
thlsh
Average
psdlsh
rbslsh
rhplsh
thlsh
Average
blockprogressbar
multithreadedbar
progressbarsetprogress
progressbartick
progressspinner
timemeter
Average
blockprogressbar
multithreadedbar
progressbarsetprogress
progressbartick
progressspinner
timemeter
Average
BinDiff
0.556
0.526
0.528
0.539
0.534
0.906
0.876
0.912
0.873
0.892
0.943
0.796
0.814
0.659
0.920
0.637
0.795
0.796
0.945
0.814
0.659
0.920
0.637
0.795
F1-score
DEEPBINDIFF
0.876
0.889
0.895
0.877
0.884
0.975
1
1
1
0.994
0.958
0.843
0.873
0.852
0.989
0.814
0.888
0.867
0.929
0.924
0.936
1
0.940
0.932
may expose additional challenges for generating complete
CFGs, and could have negative impact on the performance.
To this end, we leverage 2 popular open-source C++ projects
LSHBOX [8] and indicators [6] from GitHub, and select 3
major versions from each project to evaluate the effectiveness
of DEEPBINDIFF with respect to C++ programs.
We report the experimental results in Table IV. Among all
the 10 C++ binaries, we can clearly see that DEEPBINDIFF
outperforms BinDiff for 9 of them, and achieves a slightly
lower F1-score for only 1 binary (0.929 vs 0.945). When the
differences between the testing binaries are bigger, DEEPBIN-
DIFF performs much more stable than BinDiff. We further
present the detailed numbers for DEEPBINDIFF during the
difﬁng in Table V. Columns 3-6 represent the total number
of basic blocks for the diff’ed binary, the number of basic
blocks in our collected ground truth, the number of correctly
matched basic blocks, and the number of wrongly matched
basic blocks, both by DEEPBINDIFF.
H. Case Study
We further showcase the efﬁcacy of DEEPBINDIFF with
real-world vulnerability analysis. Two security vulnerabilities
12
LSHBOX
v1.0 vs v3.0
LSHBOX
v2.0 vs v3.0
indicators
v1.2 vs v1.4
indicators
v1.3 vs v1.4
psdlsh
rbslsh
rhplsh
thlsh
psdlsh
rbslsh
rhplsh
thlsh
blockprogressbar
multithreadedbar
progressbarsetprogress
progressbartick
progressspinner
timemeter
blockprogressbar
multithreadedbar
progressbarsetprogress
progressbartick
progressspinner
timemeter
Total
650
843
812
968
646
715
728
736
675
793
668
633
905
636
793
695
669
633
905
636
GT Mc Mw
11
89
12
108
11
107
11
90
240
6
0
252
0
269
0
249
3
82
83
13
10
79
8
70
1
93
13
70
11
83
85
6
6
79
11
79
0
107
70
2
78
9
96
79
234
252
269
249
79
70
69
62
92
57
72
79
73
68
107
67
in OpenSSL are used for an in-depth comparison between our
tool and the state-of-the-art commercial tool BinDiff.
DTLS Recursion Flaw. The ﬁrst vulnerability (CVE-2014-
0221) is in OpenSSL v1.0.1g and prior versions, and gets ﬁxed
in v1.0.1h. It is a Datagram Transport Layer Security (DTLS)
recursion ﬂaw vulnerability, which allows attackers to send an
invalid DTLS handshake to OpenSSL client to cause recursion
and eventually crash. Listing 1 shows the vulnerability along
with the patched code. As listed, patching is made to avoid
the recursive call by using a goto statement (Ln.9-10).
To analyze this vulnerability, we feed a vulnerable version
(1.01h) as well as a patched version (1.01g) of OpenSSL into
the difﬁng tools and see if the tools can generate correct
matching for all the basic blocks, including the ones that
contain the vulnerability and the patch.
The total number of basic blocks is 11734. And our
ground truth collection process is able to collect 9591 blocks,
achieving a coverage of 82%. Both BinDiff and DEEPBINDIFF
can achieve very high F1-scores of 0.947 and 0.962, because
of the high similarity between two adjacent versions. More
precisely, the two tools can correctly match 8659 and 9172
basic blocks respectively. Despite the high accuracy for both
tools, only DEEPBINDIFF is able to match the vulnerability
correctly due to the function inlining technique.
(a) Matching Result from BinDiff
(a) Matching Result from BinDiff
(b) Matching Result from DEEPBINDIFF
Fig. 10: DTLS Recursion Flaw
(b) Matching Result from DEEPBINDIFF
Listing 1: DTLS Recursion Flaw
long d t l s 1 g e t m e s s a g e f r a g m e n t ( ) {
s t a t i c
. . .
+ redo: ;
i f ( ( f r a g l e n = f r a g m e n t ( s , max , ok ) ) {
( s−>m s g c a l l b a c k ) {
s−>m s g c a l l b a c k ( 0 ,
- return dtls1 get message fragment();
+ goto redo;
s−>v e r s i o n )
. . . .
i f
}
1
2
3
4
5
6
7
8
9
10
Fig. 11: Memory Boundary Checking Failure
Listing 2: Memory Boundary Checking Failure
s t a t i c
i n t d t l s 1 p r e p r o c e s s
f r a g m e n t ( ) {
f r a g o f f ;
s i z e t
f r a g l e n = msg hdr−>f r a g l e n ;
i f
| |
( ( f r a g o f f + f r a g l e n ) > l e n )
+ len > max handshake message len(s)) {
SSLerr ( ) ;
return SSL AD ILLEGAL PARAMETER ;
}
/ / memory a l l o c a t i o n u s i n g l e n
1
2
3
4
5
6
7
8
9
The patched function dts1 get message f ragment() is
inlined into function dts1 get message() in v1.0.1h. As
shown in Figure 10a, BinDiff fails to handle this case and
incorrectly matches the vulnerable function in v1.0.1h with
its caller in v1.0.1g, leaving dts1 get message() in v1.0.1g
unmatched. Therefore,
it could not match the basic block
containing the recursive call to the basic block that has the
goto statement. Instead, it mistakenly matches the basic block
to another similar basic block but with completely different
context. Meanwhile, DEEPBINDIFF ﬁnds the correct matching
shown in Figure 10b by considering both the semantics and
the program-wide structural information.
This real-world case study shows that DEEPBINDIFF is
very useful even when BinDiff can also achieve a very high
accuracy. The unique design of our system makes it more
accurate in harder scenarios that include function inline.
Memory Boundary Checking Failure. The second vulner-
ability (CVE-2016-6308) exists in OpenSSL v1.1.0 and the
prior versions, and gets ﬁxed in v1.1.0a. The program fails to
check the length before memory allocation, allowing attackers
to allocate excessive amount of memory. As shown in List-
ing 2, the patch inserts a new condition check.
13
We then feed the vulnerable version (1.1.0) and a patched
version (1.1.0a) into the tools and observe the results. There
are a total of 10359 basic blocks for the version 1.1.0 binary,
and we collect a ground truth of 8622 basic blocks. BinDiff
and DEEPBINDIFF can correctly match 7204 and 7815 basic