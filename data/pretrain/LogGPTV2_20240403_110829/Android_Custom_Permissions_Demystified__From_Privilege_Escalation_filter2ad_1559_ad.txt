user consent. To the second rule (obtaining signature permis-
sions), through analyzing the source code of Android OS, we
ﬁnd there is a checking process before granting a signature
permission, which cannot be bypassed. This checking ensures
that the app requesting a signature permission is signed by
the same certiﬁcate as the app deﬁning this permission.
Also, CUPERFUZZER further extracted 30 critical paths
from these discovered effective cases, as listed in Table IV. In
this table, we can ﬁnd that, if the critical path is very simple,
many cases may contain this path. For example, up to 1,904
effective cases are derived from Path No.1, a two-operation
path (Installation → OS-update). Below we show some
interesting ﬁndings.
• As mentioned in Section III-A, the permission protection
level changing operation has been blocked by Google.
However, in Path No.3, 5-15, an additional OS update
operation reactivates such a privilege escalation attack.
• In Path No.16 and Path No.28, the UNDEFINED group is
an undocumented system permission group but can be
listed by adb shell pm. It triggers 30 dangerous system
permissions (in different groups) to be obtained.
No.
1
2
3
4
5-15‡
16
3
4
92
44
4
dual-app
single-app
dual-app
dual-app
single-app
dual-app
single-app
dual-app
17-27‡
304
dual-app
28
29
30
27
1
1
dual-app
dual-app
dual-app
TABLE IV: Discovered critical paths in our experiments.
Installation [ACTIVITY_RECOGNITION, normal, NULL] →
OS-update
Installation [com.test.cp, normal, NULL] →
Installation [NULL, NULL, NULL] →
Installation [com.test.cp, dangerous, NULL]
Installation [com.test.cp, normal, NULL] →
Installation [com.test.cp, dangerous, NULL] →
OS-update
Installation [com.test.cp, normal, NULL] →
Uninstallation →
Installation [com.test.cp, dangerous, NULL]
Installation [com.test.cp, normal, {Group}] →
Installation [com.test.cp, dangerous, {Group}] →
OS-update
Installation [com.test.cp, normal, UNDEFINED] →
Installation [com.test.cp, dangerous, UNDEFINED] →
OS-update
Installation [com.test.cp, normal, {Group}] →
Uninstallation →
Installation [com.test.cp, dangerous, {Group}]
Installation [com.test.cp, normal, UNDEFINED] →
Uninstallation →
Installation [com.test.cp, dangerous, UNDEFINED]
Installation [com.test.cp, normal, NULL] →
OS-update → Installation [NULL, NULL, NULL] →
Installation [com.test.cp, dangerous, NULL]
Installation [com.test.cp, normal, NULL] →
OS-update → Uninstallation →
Installation [com.test.cp, dangerous, NULL]
Privilege Escalation
(Granted Permissions)
ACTIVITY_RECOGNITION
com.test.cp
com.test.cp
com.test.cp
com.test.cp
system permissions in
{Group}
com.test.cp
READ_CONTACTS ...
(30 dangerous system
permissions in total)
com.test.cp
system permissions in
{Group}
com.test.cp
READ_CONTACTS ...
(30 dangerous system
permissions in total)
com.test.cp
com.test.cp
Flaw
DS#3
DS#1
DS#4
DS#1
DS#4
DS#2
DS#1
DS#2
DS#1
DS#1
Effective
Cases
1,904
Seed Mode Critical Path†
single-app
dual-app
†: In the app Installation operation, the custom permission deﬁned by the installed test app is put in the brackets ([]), which is represented as [permission
name, protection level, permission group]. NULL represents the corresponding attribute is not set.
‡: They are similar critical paths, and the only difference is the used system group.
We manually analyzed the extracted 30 critical paths and
reviewed the corresponding source code of Android OS.
Finally, we identiﬁed four fatal design shortcomings lying
in the Android permission framework, as labeled in the last
column of Table IV. In the following sections, we will discuss
these shortcomings and corresponding improvements with
more details.
VI. DESIGN SHORTCOMINGS AND ATTACKS
In this section, we analyze the discovered design shortcom-
ings in depth and demonstrate the corresponding exploit cases.
Following the responsible disclosure policy, we reported our
ﬁndings to the Android security team, and all of them have
been conﬁrmed. The corresponding ﬁxes will be released in the
upcoming Android Security Bulletins. Also, attack demos can
be found at https://sites.google.com/view/custom-permission.
A. DS#1: Dangling Custom Permission
As illustrated in Figure 4, when an app is uninstalled or up-
dated, PackageManagerService (PMS for short) will refresh
the registration and granting status of all permissions. During
if a dangerous (runtime) custom permission
this process,
deﬁnition is removed, the system will also revoke its grants
from apps. However, we ﬁnd that:
DS#1: If the removed custom permission is an install-time
permission, the corresponding permission granting status of
apps will be kept, causing dangling permission.
It means that, under this situation, an app has been granted
with a normal or signature custom permission, but there
is no deﬁnition of this permission in the system. Therefore, if
another app re-deﬁnes this permission with different attributes,
it may trigger privilege escalation.
Attack Case. The adversary creates and distributes two apps
to app markets, app-ds1-d and app-ds1-r (their signing cer-
tiﬁcates can be the same or not). app-ds1-d deﬁnes a normal
custom permission com.test.cp, and app-ds1-r requests
com.test.cp and the CALL_PHONE permission (dangerous
system permission). The adversary also prepares an updated
version of app-ds1-d which declares the following permis-
sion.
1 
Listing 2: Updated custom permission.
78
Fig. 4: Dangling custom permission.
The user
installs app-ds1-d and app-ds1-r on her
phone. At this moment, app-ds1-r has been granted normal
com.test.cp. Then, she is also induced to execute the
following operations: uninstall app-ds1-d and install
the
updated app-ds1-d. For example, a reasonable scenario is
that app-ds1-d frequently crashes deliberately. Then it re-
minds the user to delete the current version and install a
new version. Note that, when the user installs the updated
app-ds1-d, PMS scans the package and adds the updated
custom permission com.test.cp into the system. After that,
PMS iterates over the existing apps to adjust the granting
status of their requested permissions. Since com.test.cp
has become a runtime permission, com.test.cp will be re-
granted to app-ds1-r as a dangerous permission. Further,
the granting of dangerous permissions is group-based. Since
both CALL_PHONE and com.test.cp are in the PHONE group,
app-ds1-r obtains the CALL_PHONE permission without user
consent.
Discussion. Through changing the PHONE group to other
permission groups,
the malicious app can obtain arbitrary
dangerous system permissions.
The root cause of the attack case described in Section III-A
is also DS#1. It creates a dangling custom permission during
app updating. However, it cannot be extended to obtain system
permissions through the group-based permission granting.
The reason is that, when handling runtime permissions, their
association with the permission groups cannot be changed
(cannot remove a permission from a group and assign to
another group) [18].
Impact. DS#1 and its exploits (as two individual attack cases
in two reports) have been conﬁrmed by Google. Both reports
were rated as High severity (AndroidID-155648771 and
Fig. 5: Inconsistent permission-group mapping.
AndroidID-165615162), and a CVE ID has been assigned:
CVE-2021-0307.
B. DS#2: Inconsistent Permission-Group Mapping
In Android, the grant of dangerous permissions is group-
based. If an app has been granted a dangerous permission,
it can obtain all
the other permissions belonging to the
same group without user interactions. Therefore, the correct
 mapping relationship is quite critical in
this process.
As illustrated in Figure 5, when Android OS processes
a dangerous permission granting request, it will query the
group (members) information of the requested permission
through ArrayMap mPermissionNameToGroup [3]. Based on
the obtained  mapping information, the
system can determine whether this permission can be granted
to the app automatically, that is, whether one permission of
the group has been granted to the app previously.
To facilitate this operation, the system needs to construct
mPermissionNameToGroup in advance. To each requested
permission, if it can be found in mPermissionNameToGroup,
no operation is needed. Otherwise, mPermissionNameToGroup
will be updated with adding new data. However, we ﬁnd that:
DS#2: System and custom permissions rely on different
sources to obtain the  mapping rela-
tionship, which may exist inconsistent deﬁnitions.
The system tries to obtain the group information of the re-
quested permission through querying PLATFORM_PERMISSIONS
and PackageManager. Since PLATFORM_PERMISSIONS is a
79
Runtime permission?Keep the permission granting status for apps Yes No operation Permission definition will be removed? Permission definition will be removed? No No Yes Revoke the granted permission from appsApp uninstallation or updateRemove permission from the system Yes  Yes NoNo operationNoArraryMapmPermissionNameToGroupRequested PermissionGet Permission GroupGroup-based Permission GrantTo each requested permission: No Have obtained its group info? Find group info in PLATFORM_PERMISSIONS?Find group info by PackageManager? Yes system permissioncustom permissionhard-coded  mapping array
deﬁned in PermissionController [21], custom permissions
cannot be found in this mapping array. That is to say, if the re-
quested permission is a custom permission, the system will in-
voke PackageManager to get the group information. Note that,
PackageManager mainly relies on AndroidManifest.xml, the
core manifest ﬁle of the system [1], to construct such mapping
data. Therefore, once there exist inconsistent deﬁnitions be-
tween PLATFORM_PERMISSIONS and AndroidManifest.xml,
privilege escalation may occur.
We ﬁnd that, in Android 10, there indeed exist such incon-
sistent deﬁnitions. Speciﬁcally, in AndroidManifest.xml, all
dangerous system permissions are put into a special permis-
sion group, named android.permission-group.UNDEFINED.
The adversary can exploit such inconsistency and the group-
based permission granting to obtain all dangerous system
permissions.
Attack Case. The adversary creates an app app-ds2 which re-
quests the WRITE_EXTERNAL_STORAGE permission, a common
permission for saving app data. The user installs app-ds2 and
grants the WRITE_EXTERNAL_STORAGE permission to app-ds2.
Then, the adversary creates an updated version of app-ds2,
and it deﬁnes and requests a dangerous custom permission
com.test.cp. Also, app-ds2 requests all dangerous system
permissions, as shown below.
1 
5
6 
7 
8 
9 ... 
10 
11 
Listing 3: Updated version of app-ds2.
Next, the user installs this updated version of app-ds2, and
the system automatically grants it with all dangerous system
permissions without user permitting.
As mentioned before (see Figure 5), to each requested per-
mission, the system will add its group members information to
ArrayMap mPermissionNameToGroup. To system permissions
(Line 6-10), the  mapping looks like:
1 
2 
3 
4 ...
5 
Listing 4: Mapping mPermissionNameToGroup.
80
When reaching the custom permission (Line 11), since it
belongs to the UNDEFINED group, and this group contains all
dangerous system permissions. The mapping is refreshed as:
1 
2 
3 
4 ...
5 
Listing 5: Updated mapping mPermissionNameToGroup.
Therefore, under this situation, if one dangerous permis-