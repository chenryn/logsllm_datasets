# DirectX Header Files from the Delphi-Jedi Project

## 5.1. Capturing User Input
In our example, we check whether the user has pressed "y" for "yes" or "n" for "no" in a confirmation dialog.

### Steps:
- **SetCooperativeLevel to Foreground**: Ensure the input device is in the foreground.
- **Acquire the Input Device**: Gain control of the input device.
- **Poll for Input**: Continuously check for new input.
- **GetDeviceState**: Retrieve the current state of the input device.
- **Check for Key Pressed**: Determine if the desired key was pressed.

To prevent other (potentially malicious) programs from using `SendInput` to simulate user keystrokes, we inject a control DLL into running processes. This DLL is activated when `USER32.DLL` is loaded, ensuring that it intercepts all calls to `SendInput`. To achieve this, we add the path to our DLL in the Windows registry under `HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Windows\APPInit_DLLs`. Administrative privileges are required during installation.

The DLL modifies the Import Address Table (IAT) of the monitored program and redirects calls to `SendInput` to its own version. In our test version, these calls are always blocked. However, in a production environment, calls should be forwarded to the original `SendInput` function when blocking is not necessary. The source code for the control DLL is extensive and is not included here.

Alternatively, the same effect can be achieved using commercial off-the-shelf (COTS) sandboxing software that monitors and restricts certain API calls, including `SendInput`.

## 5.2. Drawing a Window
We use the DirectDraw API to display the content of an existing form on a secure surface that cannot be manipulated. We first acquire the display in exclusive full-screen mode and create the necessary surfaces. Then, we draw the window on the secure surface. When the secure display is no longer needed, such as after the user confirms a transaction, we stop using DirectDraw and return to the standard Windows GDI mode.

### Steps:
- **Create DirectDraw Object**: Initialize the DirectDraw object.
- **SetCooperativeLevel to Fullscreen+Exclusive**: Set the display mode to exclusive full-screen.
- **Create Primary Surface**: Create the primary surface.
- **Create Back Buffer (Secure Surface)**: Create a back buffer to serve as the secure surface.

In a commercial application, developers should consider adapting the code to the current screen resolution and color depth, and implement more comprehensive error handling. For example, the application may lose its surface if the user switches to a different program using Alt+Tab, necessitating re-acquisition of the surface.

### Drawing the Content
- **Get a Device Context for the Secure Surface**: Obtain a device context for the secure surface.
- **Draw Form to Secure Surface**: Draw the form's content to the secure surface.
- **Flip Surfaces**: Make the secure surface visible by flipping the surfaces.

### Restoring the GDI Surface
- **Flip to GDI Surface**: Restore the GDI surface.
- **SetCooperativeLevel to Normal**: Release the exclusive display mode.

## 6. Conclusion
Trojan horse programs, which have hidden, often malicious functions, are becoming increasingly common. Applications running in insecure environments should have control over their communication with the user. We have presented a method using existing gaming technology to directly access input and output devices, providing a cost-effective way to enhance security for desktop applications.

Our focus is on integrity and authenticity, while confidentiality of user input or program output remains to be addressed. We are developing components to help application developers easily migrate existing programs to this secure interface. Often, only small parts of an application need heightened security. Wrapping display integrity around a legacy application is also being explored, though incorporating input integrity may be challenging.

## 7. References
[1] Balfanz, D. (2001). Access Control for Ad-hoc Collaboration. PhD thesis, Princeton University.
[2] Bråthen, R. (1998). ‘Crash Course in X Windows Security’. GridLock 1(1998):1. http://www.hackphreak.org/gridlock/issues/issue.1/xwin.html
[3] CERT Coordination Center (1999). CERT Advisory CA-99-02-Trojan-Horses. http://www.cert.org/advisories/CA-1999-02.html
[4] Cult of the Dead Cow (2002). Back Orifice 2000. http://bo2k.sourceforge.net
[5] Dean, J.C., and Li, L. (2002). ‘Issues in Developing Security Wrapper Technology for COTS Software Products’. Proceedings of International Conference on COTS-based Software Systems 2002. LNCS 2255:76-85.
[6] Delphi-Jedi Project (2002). DirectX headers and samples. http://www.delphi-jedi.org
[7] Fisher, J. (1995). Securing X Windows. UCRL-MA-121788.
[8] Fraser, T., Badger, L., and Feldman, M. (1999). ‘Hardening COTS Software with Generic Software Wrappers’. 1999 IEEE Symposium on Security and Privacy.
[9] Janacek, J., and Ostertag, R. (2001). ‘Problems in Practical Use of Electronic Signatures’. Proceedings of IFIP Working Conference on Security and Control of IT in Society-II:63-74.
[10] Lacoste, G., Pfitzmann, B., Steiner, M., and Waidner, M., ed. (2000) SEMPER – Secure Electronic Marketplace for Europe. Berlin et al: Springer-Verlag.
[11] Microsoft (1998). Microsoft Windows Architecture for Developers Training Kit.
[12] Microsoft (2002). Microsoft Developer Network Library.
[13] Pfitzmann, B., Riordan, J., Stüble, C., Waidner, M., and Weber, A. (2001). The PERSEUS System Architecture. IBM Research Report RZ 3335 (#93381) 04/09/01, IBM Research Division, Zurich. http://www-krypt.cs.uni-sb.de/~perseus/
[14] Spalka, A., Cremers, A.B. and Langweg, H. (2001). ‘The Fairy Tale of »What You See Is What You Sign«. Trojan Horse Attacks on Software for Digital Signatures’. Proceedings of IFIP Working Conference on Security and Control of IT in Society-II:75-86.
[15] Tygar, J.D., and Whitten, A. (1996). ‘WWW Electronic Commerce and Java Trojan Horses’. Proceedings of the Second USENIX Workshop on Electronic Commerce.
[16] Weber, A. (1998). ‘See What You Sign: Secure Implementations of Digital Signatures’. 5th International Conference on Intelligence in Services and Networks, IS&N’98. LNCS 1430:509-520.

## 8. Appendix: Sample Code

### 8.1. DirectInput
This sample demonstrates how to check if the user has pressed "y" for "yes" or "n" for "no" in a confirmation dialog.

```delphi
procedure GetUserConfirmation;
var
  Data: TDIKeyboardState;
begin
  DIK8.SetCooperativeLevel(Handle, DISCL_NONEXCLUSIVE or DISCL_FOREGROUND);
  DIK8.Acquire;
  DIK8.Poll;
  FillChar(Data, SizeOf(Data), 0);
  DIK8.GetDeviceState(SizeOf(Data), @Data);

  if (Data[DIK_N] and $80) <> 0 then
    // User pressed "n"
  else if (Data[DIK_Y] and $80) <> 0 then
    // User pressed "y"
end;
```

### 8.2. DirectDraw
We use three global objects:

```delphi
// DirectDraw object
FDirectDraw: IDirectDraw;
// primary surface
FPrimSurface: IDirectDrawSurface;
// secure surface
FSecSurface: IDirectDrawSurface;
```

#### Initialize DirectDraw
```delphi
procedure InitializeDirectDraw;
var
  HRESULT: HResult;
  SurfDesc: TDDSURFACEDESC;
  DDSCaps: TDDSCAPS;
begin
  FDirectDraw := nil;
  HRESULT := DirectDrawCreate(nil, FDirectDraw, nil);

  if HRESULT = DD_OK then
  begin
    HRESULT := FDirectDraw.SetCooperativeLevel(Handle, DDSCL_EXCLUSIVE or DDSCL_FULLSCREEN);

    if HRESULT = DD_OK then
    begin
      HRESULT := FDirectDraw.SetDisplayMode(640, 480, 24);

      if HRESULT = DD_OK then
      begin
        SurfDesc.dwSize := SizeOf(SurfDesc);
        SurfDesc.dwFlags := DDSD_CAPS or DDSD_BACKBUFFERCOUNT;
        SurfDesc.ddsCaps.dwCaps := DDSCAPS_PRIMARYSURFACE or DDSCAPS_FLIP or DDSCAPS_COMPLEX;
        SurfDesc.dwBackBufferCount := 1;

        HRESULT := FDirectDraw.CreateSurface(SurfDesc, FPrimSurface, nil);

        if HRESULT = DD_OK then
        begin
          DDSCaps.dwCaps := DDSCAPS_BACKBUFFER;
          HRESULT := FPrimSurface.GetAttachedSurface(DDSCaps, FSecSurface);

          if HRESULT = DD_OK then
            // Creation of surfaces succeeded
        end;
      end;
    end;
  end;
end;
```

#### Draw Exclusively
```delphi
procedure DrawExclusively;
var
  DC: HDC;
  BkBrush: TBrush;
  bFlippingComplete: Boolean;
  HRESULT: HResult;
begin
  if FSecSurface.GetDC(DC) = DD_OK then
  begin
    BkBrush := TBrush.Create;
    BkBrush.Color := RGB($00, $00, $00);
    BkBrush.Style := bsSolid;

    // Create black background
    FillRect(DC, Rect(0, 0, 640, 480), BkBrush.Handle);
    BkBrush.Destroy;

    // Draw form to secure surface
    fmSecure.Visible := true;
    fmSecure.PaintTo(DC, (640 - fmSecure.Width) div 2, (480 - fmSecure.Height) div 2);
    FSecSurface.ReleaseDC(DC);
  end;

  // Flip and show secure surface
  bFlippingComplete := false;
  repeat
    HRESULT := FPrimSurface.Flip(nil, 0);

    if HRESULT = DD_OK then
      bFlippingComplete := true
    else if HRESULT = DDERR_SURFACELOST then
    begin
      HRESULT := FPrimSurface.Restore;
      if HRESULT <> DD_OK then
        bFlippingComplete := true;
    end
    else if HRESULT = DDERR_WASSTILLDRAWING then
      bFlippingComplete := true;
  until bFlippingComplete;
end;
```

#### Clean Up DirectDraw
```delphi
procedure CleanUpDirectDraw;
begin
  if FDirectDraw <> nil then
  begin
    FDirectDraw.FlipToGDISurface;
    FDirectDraw.SetCooperativeLevel(Handle, DDSCL_NORMAL);

    if FSecSurface <> nil then
      FSecSurface := nil;

    if FPrimSurface <> nil then
      FPrimSurface := nil;

    FDirectDraw := nil;
  end;
end;
```

Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC'02)  
1063-9527/02 $17.00 © 2002 IEEE  
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25, 2021 at 07:54:13 UTC from IEEE Xplore. Restrictions apply.