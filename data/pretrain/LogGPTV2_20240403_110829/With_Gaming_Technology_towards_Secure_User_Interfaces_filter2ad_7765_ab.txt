the DirectX header files from the Delphi-Jedi project.[7]
5.1. Capturing input from the user
In our sample we check whether the user pressed “y” to
select “yes” or “n” for “no” in a confirmation dialogue.
SetCooperativeLevel foreground
Acquire the input device
Poll for input
GetDeviceState
Check for key pressed
To prohibit other (possibly malicious) programs from
calling SendInput and synthesizing the user’s key strokes
we inject control code into running processes. This code
resides in a dynamic link library (DLL) which is activated
when USER32.DLL is loaded. Since SendInput is a
USER32 function, loading of our DLL is assured. It is nec-
e s s a r y
k e y
H K E Y _ L O C A L _ M A C H I N E \
S o f t w a r e \ M i -
crosoft\Windows NT\CurrentVersion\Win-
dows\APPInit_DLLs in the Windows registry.[8] This
requires administrative privileges during installation.
o u r D L L
t h e
t o
a d d
t o
The DLL modifies the Import Address Table of the su-
pervised program and redirects all calls to SendInput to its
own version of that function. In our test version, calls are
always blocked. However, calls should be forwarded to the
original SendInput function when blocking is not required.
Source code of the control DLL involves several hundred
lines of code and is therefore not included here.
The same effect could be achieved by employing a
COTS sandboxing software for programs running on the
computer that monitors and restricts the use of certain API
calls including SendInput.
5.2. Drawing a window
We use the DirectDraw API to show the content of an
existing form on a secure surface that cannot be manipulat-
ed. We first acquire the display in exclusive full screen
mode and create the needed surfaces. Then we draw the
window on the secure surface. When the secure display is
no longer needed, e.g. when the user has confirmed the
transaction, we stop using DirectDraw and return to stand-
ard Windows GDI mode.
The source code shows the general concept. In a com-
mercial application a developer should bear in mind that
the handling is a bit more complex. Usage would likely be
7. Delphi-Jedi Project (2002). DirectX headers and samples.
http://www.delphi-jedi.org.
8. Microsoft (2000) ‘Working with the APPInit_DLLs Registry
Value’. Microsoft Knowledge Base Q197571.
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:54:13 UTC from IEEE Xplore.  Restrictions apply. 
adaptable to the current screen resolution and colour depth.
Error handling would be more extensive. An application
can lose its surface when the user switches to a different
program using Alt+Tab; re-acquiring a surface is necessary
then.
In the first procedure we activate the usage of Direct-
Draw in our application and acquire the primary display in
exclusive full screen mode. Two surfaces are created, the
primary surface and a back surface which we use as our se-
cure surface to draw on.
Create DirectDraw object
SetCooperativeLevel
fullscreen+exclusive
Create primary surface
Create back buffer (secure surface)
tion need heightened security. To bypass modifying pro-
grams, wrapping display integrity around a legacy applica-
tion is also being examined. Incorporating input integrity
may prove difficult to implement as a wrapper. To assure
display authenticity we explore replacing the standard
Windows shell.
7. References
[1] Balfanz, D. (2001). Access Control for Ad-hoc Collabora-
tion. PhD thesis, Princeton University.
[2] Bråthen, R. (1998). ’Crash Course in X Windows Security’.
GridLock 1(1998):1.
http://www.hackphreak.org/gridlock/issues/issue.1/
xwin.html
[3] CERT Coordination Center (1999). CERT Advisory CA-99-
We will now draw the content of a form to the secure
surface and then flip surfaces to make the secure surface
visible. The form’s content is centred on the display and
shown with a black background.
02-Trojan-Horses.
http://www.cert.org/advisories/CA-1999-02.html
[4] Cult of the Dead Cow (2002). Back Orifice 2000.
http://bo2k.sourceforge.net
Get a device context for the
secure surface
Draw form to secure surface
Flip surfaces
[5] Dean, J.C., and Li, L. (2002). ‘Issues in Developing Security
Wrapper Technology for COTS Software Products’. Pro-
ceedings of International Conference on COTS-based Soft-
ware Systems 2002. LNCS 2255:76-85.
[6] Delphi-Jedi Project (2002). DirectX headers and samples.
http://www.delphi-jedi.org
In the end we restore the GDI surface and allow other
[7] Fisher, J. (1995). Securing X Windows. UCRL-MA-121788.
applications to use the computer’s display again.
Flip to GDI surface
SetCooperativeLevel to normal
6. Conclusion
Trojan horse programs, i.e. programs with additional
hidden, often malicious, functions, are more and more pop-
ular forms of attack. Applications that execute in an inse-
cure environment should have control over their communi-
cation with the user.
We have presented a creative way of exploiting existing
gaming technology to directly access input and output de-
vices. Compared with dedicated hardware or operating
system replacements our solution gives tractable and cost-
effective means to incorporate better protection into secu-
rity-sensitive programs on desktop computers.
Our work focuses on integrity and authenticity. Confi-
dentiality of user input or program output is not discussed
and remains to be scrutinized.
We are working on equipping the application developer
with components to easily migrate existing programs to
this secure interface. Often, only small parts of an applica-
CIAC-2316 R.0.
http://ciac.llnl.gov/ciac/documents/ciac2316.html
[8] Fraser, T., Badger, L., and Feldman, M. (1999). ‘Hardening
COTS Software with Generic Software Wrappers’. 1999
IEEE Symposium on Security and Privacy.
Janacek, J., and Ostertag, R. (2001). ‘Problems in Practical
Use of Electronic Signatures’. Proceedings of IFIP Working
Conference on Security and Control of IT in Society-II:63-
74.
[9]
[10] Lacoste, G., Pfitzmann, B., Steiner, M., and Waidner, M., ed.
(2000) SEMPER – Secure Electronic Marketplace for Eu-
rope. Berlin et al: Springer-Verlag.
[11] Microsoft (1998). Microsoft Windows Architecture for De-
velopers Training Kit.
[12] Microsoft (2002). Microsoft Developer Network Library.
[13] Pfitzmann, B., Riordan, J., Stüble, C., Waidner, M., and We-
ber, A. (2001). The PERSEUS System Architecture. IBM Re-
search Report RZ 3335 (#93381) 04/09/01, IBM Research
Division, Zurich.
http://www-krypt.cs.uni-sb.de/~perseus/
[14] Spalka, A., Cremers, A.B. and Langweg, H. (2001). ’The
Fairy Tale of »What You See Is What You Sign«. Trojan
Horse Attacks on Software for Digital Signatures’. Proceed-
ings of IFIP Working Conference on Security and Control of
IT in Society-II:75-86.
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:54:13 UTC from IEEE Xplore.  Restrictions apply. 
[15] Tygar, J.D., and Whitten, A. (1996). ‘WWW Electronic
Commerce and Java Trojan Horses’. Proceedings of the Sec-
ond USENIX Workshop on Electronic Commerce.
[16] Weber, A. (1998). ‘See What You Sign: Secure Implementa-
tions of Digital Signatures’. 5th International Conference on
Intelligence in Services and Networks, IS&N’98. LNCS
1430:509-520.
8. Appendix: Sample code
8.1. DirectInput
In our sample we show how to check whether the user
pressed “y” to select “yes” or “n” for “no” in a confirma-
tion dialogue.
DIK8 is the DirectInput object for the keyboard device.
Procedure GetUserConfirmation;
Var
Data: TDIKeyboardState;
Begin
DIK8.SetCooperativeLevel
(
Handle,
DISCL_NONEXCLUSIVE or
DISCL_FOREGROUND
);
DIK8.Acquire;
DIK8.Poll;
FillChar(Data,SizeOf(Data),0);
DIK8.GetDeviceState
(
SizeOf(Data),
@Data
);
If (Data[DIK_N] and $80) <> 0
Then // User pressed "n"
Else If (Data[DIK_Y] and $80) <> 0
Then // User pressed "y"
End;
8.2. DirectDraw
We employ three global objects:
// DirectDraw object
FDirectDraw: IDirectDraw;
// primary surface
FPrimSurface: IDirectDrawSurface;
// secure surface
FSecSurface: IDirectDrawSurface;
In the first procedure we activate the usage of Direct-
Draw in our application and acquire the primary display in
exclusive full screen mode. Two surfaces are created, the
primary surface and a back surface which we use as our se-
cure surface to draw on.
We tacitly assume in the sample code that a screen res-
olution of 640x480 suffices to display the contents of
which we want to preserve integrity.
Procedure InitializeDirectDraw;
Var
HRESULT;
HR:
SurfDesc: TDDSURFACEDESC;
DDSCaps:
TDDSCAPS;
Begin
FDirectDraw:=NIL;
HR := DirectDrawCreate
(
);
NIL,
FDirectDraw,
NIL
If (HR = DD_OK)
Then Begin
// Get full screen exclusive mode
HR := FDirectDraw.
SetCooperativeLevel
(
);
Handle,
DDSCL_EXCLUSIVE or
DDSCL_FULLSCREEN
If (HR = DD_OK)
Then Begin
HR := FDirectDraw.
SetDisplayMode
(640,480,24);
If (HR = DD_OK)
Then Begin
// Create primary surface
// and one back buffer
// (secure surface)
SurfDesc.dwSize:=
SizeOf(SurfDesc);
SurfDesc.dwFlags:=
DDSD_CAPS or
DDSD_BACKBUFFERCOUNT;
SurfDesc.ddsCaps.dwCaps:=
DDSCAPS_PRIMARYSURFACE or
DDSCAPS_FLIP or
DDSCAPS_COMPLEX;
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:54:13 UTC from IEEE Xplore.  Restrictions apply. 
SurfDesc.
dwBackBufferCount:=1;
HR := FDirectDraw.
CreateSurface
(
);
SurfDesc,
FPrimSurface,
NIL
If (HR = DD_OK)
Then Begin
DDSCaps.dwCaps:=
DDSCAPS_BACKBUFFER;
HR := FPrimSurface.
GetAttachedSurface
(
);
DDSCaps,
FSecSurface
If (HR = DD_OK)
Then // Creation of
// surfaces
// succeeded
End;
End;
End;
End;
End;
We will now draw the content of a form to the secure
surface and then flip surfaces to make the secure surface
visible. The form’s content is centred on the display and
shown with a black background.
Procedure DrawExclusively;
Var
DC:
BkBrush:
bFlippingComplete: Boolean;
HR:
HRESULT;
Begin
HDC;
TBrush;
If (FSecSurface.GetDC(DC) = DD_OK)
Then Begin
BkBrush:=TBrush.Create;
BkBrush.Color:=RGB($00,$00,$00);
BkBrush.Style:=bsSolid;
// Create black background
FillRect
(
DC,
Rect(0,0,640,480),
BkBrush.Handle
);
BkBrush.Destroy;
// Draw form to secure surface
fmSecure.Visible:=true;
fmSecure.PaintTo(
DC,
(640-fmSecure.Width) div 2,
(480-fmSecure.Height) div 2);
FSecSurface.ReleaseDC(DC);
End;
// Flip and show secure surface
bFlippingComplete:=false;
Repeat
HR:=FPrimSurface.Flip(NIL,0);
If HR = DD_OK
Then bFlippingComplete:=true
Else If HR = DDERR_SURFACELOST
Then Begin
HR:=FPrimSurface.
_Restore;
If HR <> DD_OK
Then bFlippingComplete:=
true;
End
Else If HR =
DDERR_WASSTILLDRAWING
Then bFlippingComplete:=
true;
Until bFlippingComplete;
End;
In the end we restore the GDI surface and allow other
applications to use the computer’s display again.
Procedure CleanUpDirectDraw;
Begin
If FDirectDraw <> NIL
Then Begin
FDirectDraw.FlipToGDISurface;
FDirectDraw.SetCooperativeLevel
(
Handle,
DDSCL_NORMAL
);
If FSecSurface <> NIL
Then FSecSurface:=NIL;
If FPrimSurface <> NIL
Then FPrimSurface:=NIL;
FDirectDraw:=NIL;
End;
End;
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:54:13 UTC from IEEE Xplore.  Restrictions apply.