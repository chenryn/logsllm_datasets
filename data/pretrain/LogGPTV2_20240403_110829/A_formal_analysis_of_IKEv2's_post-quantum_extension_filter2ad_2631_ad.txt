以下是优化后的文本，使其更加清晰、连贯和专业：

---

### IKE_SA_INIT 交换

**消息元数据:**
- 消息类型: `IKE_SA_INIT`
- 消息编号: `1`
- 方向: `发起者 -> 响应者`

**步骤 1: 发起者的初始消息 (msg1)**
1. **生成 DH 公钥**: `~eI`
2. **生成随机数**: `~nI`
3. **构造消息**: `msg1 = [Fr(~nI), Fr(~spiI)]`
4. **注册内部状态**: `StateInitI($I, $R, ~spiI, ~eI, ~nI, msg1)`
5. **记录 DH 公钥**: `!DHtoReveal($I, ~eI)`

**步骤 2: 响应者的初始消息 (msg2)**
1. **生成 DH 公钥**: `~eR`
2. **生成随机数**: `~nR`
3. **构造消息**: `msg2 = [keymat]`（使用 `~eI` 和 `~eR` 计算出的共享密钥）
4. **注册内部状态**: `StateInitR($I, $R, spiI, ~spiR, nI, ~nR, keymat, msg1, msg2, epI, epR)`
5. **记录 DH 公钥**: `!DHtoReveal($R, ~eR)`

**步骤 3: 发起者的认证消息 (msg3)**
1. **生成签名数据**: `signed_octets`
2. **签名数据**: `auth_pl = sign(signed_octets, skI)`
3. **加密负载**: `encr_pl = senc{auth_pl} keymat`
4. **计算完整性校验码**: `integ_I = hmac(encr_pl, keymat)`
5. **构造消息**: `msg3 = [encr_pl, integ_I]`
6. **注册内部状态**: `StateAuthI($I, $R, ~idI, spiI, spiR, nI, nR, keymat, msg1, msg2, 'g'^eI, epR)`
7. **发送消息**: `Out(msg3)`

**步骤 4: 响应者的认证消息 (msg4)**
1. **生成签名数据**: `signed_octets_R`
2. **签名数据**: `auth_pl_R = sign(signed_octets_R, skR)`
3. **加密负载**: `encr_pl_R = senc{auth_pl_R, pkR} keymat`
4. **计算完整性校验码**: `integ_R = hmac(encr_pl_R, keymat)`
5. **构造消息**: `msg4 = [encr_pl_R, integ_R]`
6. **发送消息**: `Out(msg4)`

**步骤 5: 完成协议运行**
1. **接收响应者的认证消息**: `In(msg3)`
2. **验证响应者的签名**: `!PubKey($R, pkR)`（如果这是响应者的公钥）
3. **注册完成状态**: 
   - `Completed($I, 'initiator', $R, keymat)`
   - `IdentityLearnt(idI)`
   - `IKeys($I, $R, spiC, ck)`

**步骤 6: 确认消息**
1. **发送测试消息**: `Out(mTest)`
2. **确认会话**: `RConfirm($I, $R, spiC, ck)`

---

通过以上步骤，双方完成了 IKE 协议的初始化和认证过程，并建立了安全的通信通道。