Verifying the Logical Termination of Workflows
Jorge Cardoso Glória Cravo
∗ †‡
January 9, 2006
Abstract
Systems and infrastructures are currently being developed to sup-
port e-commerceactivities. Workflow management systems and work-
flowsareoneofthestrongtechnologicalcandidatestodeployandsup-
porte-commerceapplications. E-commerceworkflowsrequireaprecise
modeling to ensure that they perform according to initial specifica-
tions. Important advancements have been accomplished in the devel-
opment of theoretical foundations for workflow modeling, verification,
and analysis. Nevertheless, more research is required. It is essential
to explore the use of formal methods for the modeling and verification
of workflow’s properties. In this paper we present a formal frame-
work, based on control flow graphs theory, to verify the correctness
of workflows. In our approach, workflows are modeled with tri-logic
acyclic directed graphs. The formalism developed allows to verify one
important property, the logical termination of workflows.
Keywords: Workflows, Process Modeling, Business Processes, Graphs.
1 Introduction
Organizations operating in modern markets, such as e-commerce, require a
systematicdesign, planning, control, andmanagementofbusinessprocesses.
These requirements can be achieved with the use of Workflow Management
DepartamentodeMatemática,UniversidadedaMadeira,9000-390Funchal,Portugal.
∗
(PI:EMAIL)
DepartamentodeMatemática,UniversidadedaMadeira,9000-390Funchal,Portugal.
†
(PI:EMAIL)
Work partially supported by theproject POSI/EIA/61214/2004and donewithin the
‡
activities of the LabMAG laboratory.
1
Systems (WfMSs). WfMSs allow organizations to streamline and automate
business processes, reengineer their structure, as well as, increase efficiency
and reduce costs.
Workflows have been successfully deployed to various domains, such as
bio-informatics[17], healthcare[4], thetelecommunicationindustry[24], the
military [20], and school administration [6]. Other areas, such as mobile
computing, systems management, multi-databases, the Internet, applica-
tion development, object technology, operating systems, and transaction
management have also beneficed from the use of workflow technology [23].
The complexity, configuration, and structure of workflows depend on
the underlying business processes they model. Workflows may involve many
distinct, heterogeneous, autonomous, and distributed tasks that are interre-
lated in complex ways. The complexity of large workflows requires a precise
modelingtoensurethattheyperformaccordingtoinitialspecifications. The
development of frameworks and theories to achieve a precise modeling is a
difficult undertaking.
In the last decade, important advancements have been accomplished in
the implementation of workflow systems (commercial and research systems)
and in the development of theoretical foundations to allow workflow model-
ing, verification, and analysis. Nevertheless, the solutions proposed are still
insufficient and more research is required [16].
Anumberofformalframeworkshavebeenproposedforworkflowmodel-
ingandincludeStateandActivityCharts[27],Graphs[22],Event-Condition-
Action rules [13, 14], Petri Nets [1, 2], Temporal Logic [5], Markov chains
[21], and Process and Event Algebras [18, 29]. The use of directed graphs
to model the control flow of workflows has been the main formalism used in
workflow systems implementation (e.g. METEOR-S [25], TIBCO Workflow
[31], and Staffware Process Suite [30]).
Workflowmodeling,verification,andanalysistakearenewedimportance
with the development and maturity of infrastructures and solutions that
support e-commerce applications, Web services, and Web processes [11, 23].
This is because while in some cases Web services may be utilized in an
isolated form, it is natural to expect that Web services will be integrated as
part of workflows [15].
In this paper we present a formal framework, based on control flow
graphs theory, to check workflow specifications for correctness. In our ap-
proach we model workflows with tri-logic acyclic directed graphs [22] and
develop a formalism to verify the logical termination of workflows.
This paper is structured as follows. Section 2 briefly discusses business
processes and workflows. Section 3 introduces formally the structure of tri-
2
•• ••
•• ••
PPaayymmeenntt:: VVIISSAA
•• •• CCoonnGG ffeeee rreett nnccee •• •• •• ⊕⊕ •• •• ⊕⊕ ••
IInnffoorrmmaattiioonn
GGeett TTrraavveell HHootteell PPaayymmeenntt:: CChheecckk SSeenndd RReecceeiipptt
CCoonnffeerreennccee RReesseerrvvaattiioonn RReesseerrvvaattiioonn
NNaammee •• ••
•• ••
GGeett UUsseerr
PPaayymmeenntt:: CCaasshh
IInnffoorrmmaattiioonn
Figure 1: A very simple workflow
logic acyclic directed graphs and presents our approach for checking their
logical termination. Section 4 describes two important areas where the the-
orem for verifying the logical termination of workflows, presented in section
3, can be used. Finally, section 5 contains our conclusions.
2 Business Processes and Workflows
A workflow is an abstraction of a business process that consists of one or
moretaskstobeexecutedtoperformthebusinessprocess. Ataskrepresents
a unit of work to be executed, which will be processed by a combination
of resources. A resource may be a simple fragment of code, a computer
program, an external system, or a human activity.
Workflows can be modeled using graphs as shown in Figure 1. Graphs
are a formal notation for representing business processes. Tasks are repre-
sented with vertices and the partial ordering of tasks is modeled with arcs,
known as transitions. For example, the task Get Conference Information is
associated with a computer program that checks the information of a con-
ference automatically. A task may also be associated with a human activity,
requiring a specific person, or a person with a particular role, to carry out
the execution of the task manually. For example, the task Get Conference
Name is executed manually and consists in entering a conference’s name
into a workflow application form.
The workflow illustrated in Figure 1 is formally described using a tri-
logic acyclic directed graph. This is the formal method that we will use to
modelworkflows. Thisformalmethodhasthedesireddegreeofintuitiveness
3
and simplicity, which is appropriate to be used by business process analysts.
These workflows are called tri-logic because a logic operator, an and ( ),
•
an or ( ), or an exclusive-or ( ), can be associated with input/output
⊗ ⊕
transitions of each task (vertex). For example, the task Get Conference
Name has associated with its output transitions an and. The task Travel
Reservation has also associated with its input transitions an and. The task
Hotel Reservation has associated with its input transition an and, and has
associated with its output transitions an exclusive-or.
3 Workflow Termination
In our approach we model workflows with tri-logic acyclic directed graphs.
Thistypeof graphshasan input/outputlogicoperator associatedwitheach
vertex of the graph. We start by giving a formal definition of a workflow
structure. The semantics of these vertices are well-known and have been
widely used [25][31][30].
Definition 1 Aworkflowisatri-logicacyclicdirectgraphWG=(T,A),
where T = t ,t ,...,t is a finite nonempty set of vertices represent-
1 2 n
{ }
ing workflow tasks. Each task t (i.e., a vertex) has an input logic op-
i
erator (represented by t ) and an output logic operator (represented by
i
Â
t ). An input/output logic operator can be the logical and ( ), the or
i
≺ •
( ), or the exclusive-or ( ). The set A= a ,a ,a ,a ,...,a is a finite
1 2 m
⊗ ⊕ { t u }
nonempty set of arcs representing workflow transitions. Each transition a ,
i
i 1,...,m , is a tuple (t ,t ) where t , t T. The transition a is a
k l k l
∈ { } ∈ t
tuple of the form ( ,t ) and transition a is a tuple of the form (t , ). The
1 n
t u u
symbols and represent abstract tasks which indicate the entry and end-
t u
ing point of the workflow, respectively. We use the symbol 0 to reference the
label of a transition, i.e. a references transition a , a A. The elements
0i i i
∈
a are called Boolean terms and form the set A.
0i 0
Example 1 Figure2showsaworkflowWG =(T,A), whereT = t ,t ,
1 2
{
t ,t ,t ,t ,t ,A= a ,a ,a ,a ,a ,a ,a ,a ,a ,a andA = a ,a ,a ,
3 4 5 6 7 1 2 3 4 5 6 7 8 0 0 0 01
a ,a ,a , a ,} a ,a ,a{ t . Tu he tuple a = (t ,t ) is an} example o{ f at traunsi-
02 03 04 05 06 07 08 2 1 3
}
tion. In task t , is the input logic operator ( t ) and is the output logic
3 3
⊕ Â •
operator (t ).
3
≺
Definition 2 The incoming transitions for task t T are the tuples of
i
∈
the form a =(x,t ), x T,a A, and the outgoing transitions for task t
j i j i
∈ ∈
are the tuples of the form a =(t ,y), y T,a A.
l i l
∈ ∈
4
a
3
tt tt
a • 22 • • 55 • a
1 a 7
4•
•
a
tt
tt 11 ⊕ a 5 • tt 44 66 a
⊕ 8
a 2 ⊕ • a
tt • tt
33 a 77
6
Figure 2: Example of a tri-logic acyclic direct graph
Example 2 In figure 2, the incoming transition for task t is a =
2 1
(t ,t ) and the outgoing transitions are a =(t ,t ) and a =(t ,t ).
1 2 4 2 4 3 2 5
When a transition is enabled its Boolean term is true and when a tran-
sition is disabled its Boolean term is false.
Example 3 Letusconsideragainfigure2. Iftransitiona isenable/disable
1
then a is true/false, respectively.
01
Definition 3 The incoming condition for task t T is a Boolean ex-
i
∈
pression with terms a A, where a is an incoming transition of task t .
0 0 i
∈
The terms a are connected with the logic operator t .
0 i
Â
Example 4 In figure 2, the incoming condition for task t is a a .
3 02 05
⊕
Definition 4 The outgoing condition for task t T is a Boolean ex-
i
∈
pression with terms a A, where a is an outgoing transition of task t .
0 0 i
∈
The terms a are connected with the logic operator t .
0 i
≺
Example 5 In figure 2, the outgoing condition for task t is a a .
2 03 04
•
Inorder to verify thelogical terminationof a workflow, weneedtointro-
duce the concept of Event-Action (EA) model. EA models describe which
conditionsneedtobeverifiedforatasktobeexecutedandtheconsequences
of the execution of a task.
Definition 5 Given a workflow WG = (T,A), an Event-Action (EA)
model for a task t i T is an implication of the form t i : f E Ã f C, where
∈
5
aa aa
33 55
⊕⊕ aa
66
•• tt
44
aa aa
44 77
Figure 3: An Event-Action model for task t
4
Table 1: EA model behavior
f f f Ãf
E C E C
0 0 0
1 0 0