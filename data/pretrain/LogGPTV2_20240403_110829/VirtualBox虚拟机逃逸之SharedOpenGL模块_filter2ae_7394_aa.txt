# VirtualBox虚拟机逃逸之SharedOpenGL模块
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 0x00 前言
最近研究VirtualBox虚拟机逃逸，前面分析了VirtualBox的HGCM通信协议，本文我们基于HGCM协议与SharedOpenGL模块进行通信，并分析`SharedOpenGL`中使用的`chromium协议`，复现SharedOpenGL中出现的历史漏洞从而进行虚拟机逃逸。
## 0x01 前置知识
###  chromium协议
####  引言
我们使用HGCM通信协议，可以在Guest中与主机的一些服务进行通信，其中有一个服务名为`SharedOpenGL`，这是一个用于3D加速的服务，首先主机中的VirtualBox需要开启3D加速才能在Guest中进行调用
在`src\VBox\GuestHost\OpenGL`目录下，是位于Guest中的组件源码，该组件在Guest中通过HGCM协议与Host中的`SharedOpenGL`进行连接，然后使用了他们之间的一套新的协议（称之为“`chromium协议`”）来进行数据交换，对于`src\VBox\GuestHost\OpenGL`，我们不用去分析其实现，因为它就是一个相当于客户端一样的东西，我们重点分析Host中的`SharedOpenGL`。
首先看到`src\VBox\HostServices\SharedOpenGL\crserver\crservice.cpp`源文件中的`svcCall`函数，前面介绍过，这是HGCM对`SharedOpenGL`模块的函数调用入口。
####  svcCall
    static DECLCALLBACK(void) svcCall (void *, VBOXHGCMCALLHANDLE callHandle, uint32_t u32ClientID, void *pvClient,
                                       uint32_t u32Function, uint32_t cParms, VBOXHGCMSVCPARM paParms[], uint64_t tsArrival)
    {
    ..................................................
        switch (u32Function)
        {
            case SHCRGL_GUEST_FN_WRITE:
            {
    ..................................
                    /* Fetch parameters. */
                    uint8_t *pBuffer  = (uint8_t *)paParms[0].u.pointer.addr;
                    uint32_t cbBuffer = paParms[0].u.pointer.size;
                    /* Execute the function. */
                    rc = crVBoxServerClientWrite(u32ClientID, pBuffer, cbBuffer);
    ...................................
                break;
            }
            case SHCRGL_GUEST_FN_INJECT:
            {
    .......................................
                    /* Fetch parameters. */
                    uint32_t u32InjectClientID = paParms[0].u.uint32;
                    uint8_t *pBuffer  = (uint8_t *)paParms[1].u.pointer.addr;
                    uint32_t cbBuffer = paParms[1].u.pointer.size;
                    /* Execute the function. */
                    rc = crVBoxServerClientWrite(u32InjectClientID, pBuffer, cbBuffer);
    .................................
                break;
            }
            case SHCRGL_GUEST_FN_READ:
            {
    ...........................................
                /* Fetch parameters. */
                uint8_t *pBuffer  = (uint8_t *)paParms[0].u.pointer.addr;
                uint32_t cbBuffer = paParms[0].u.pointer.size;
                /* Execute the function. */
                rc = crVBoxServerClientRead(u32ClientID, pBuffer, &cbBuffer);
    .....................................................
                break;
            }
            case SHCRGL_GUEST_FN_WRITE_READ:
            {
    ..................................................
                    /* Fetch parameters. */
                    uint8_t *pBuffer     = (uint8_t *)paParms[0].u.pointer.addr;
                    uint32_t cbBuffer    = paParms[0].u.pointer.size;
                    uint8_t *pWriteback  = (uint8_t *)paParms[1].u.pointer.addr;
                    uint32_t cbWriteback = paParms[1].u.pointer.size;
                    /* Execute the function. */
                    rc = crVBoxServerClientWrite(u32ClientID, pBuffer, cbBuffer);
                    if (!RT_SUCCESS(rc))
                    {
                        Assert(VERR_NOT_SUPPORTED==rc);
                        svcClientVersionUnsupported(0, 0);
                    }
                    rc = crVBoxServerClientRead(u32ClientID, pWriteback, &cbWriteback);
    ...........................................
                break;
            }
            case SHCRGL_GUEST_FN_SET_VERSION:
            {
    .........................................
                    /* Fetch parameters. */
                    uint32_t vMajor    = paParms[0].u.uint32;
                    uint32_t vMinor    = paParms[1].u.uint32;
                    /* Execute the function. */
                    rc = crVBoxServerClientSetVersion(u32ClientID, vMajor, vMinor);
    ................................
                break;
            }
            case SHCRGL_GUEST_FN_SET_PID:
            {
      ................................
                    /* Fetch parameters. */
                    uint64_t pid    = paParms[0].u.uint64;
                    /* Execute the function. */
                    rc = crVBoxServerClientSetPID(u32ClientID, pid);
    .........................
                break;
            }
            case SHCRGL_GUEST_FN_WRITE_BUFFER:
            {
    ..................................
                    /* Fetch parameters. */
                    uint32_t iBuffer      = paParms[0].u.uint32;
                    uint32_t cbBufferSize = paParms[1].u.uint32;
                    uint32_t ui32Offset   = paParms[2].u.uint32;
                    uint8_t *pBuffer      = (uint8_t *)paParms[3].u.pointer.addr;
                    uint32_t cbBuffer     = paParms[3].u.pointer.size;
                    /* Execute the function. */
                    CRVBOXSVCBUFFER_t *pSvcBuffer = svcGetBuffer(iBuffer, cbBufferSize);
                    if (!pSvcBuffer || ((uint64_t)ui32Offset+cbBuffer)>cbBufferSize)
                    {
                        rc = VERR_INVALID_PARAMETER;
                    }
                    else
                    {
                        memcpy((void*)((uintptr_t)pSvcBuffer->pData+ui32Offset), pBuffer, cbBuffer);
                        /* Return the buffer id */
                        paParms[0].u.uint32 = pSvcBuffer->uiId;
    ......................
                break;
            }
            case SHCRGL_GUEST_FN_WRITE_READ_BUFFERED:
            {
     .................................
                    /* Fetch parameters. */
                    uint32_t iBuffer = paParms[0].u.uint32;
                    uint8_t *pWriteback  = (uint8_t *)paParms[1].u.pointer.addr;
                    uint32_t cbWriteback = paParms[1].u.pointer.size;
                    CRVBOXSVCBUFFER_t *pSvcBuffer = svcGetBuffer(iBuffer, 0);
                    if (!pSvcBuffer)
                    {
                        LogRel(("OpenGL: svcCall(WRITE_READ_BUFFERED): Invalid buffer (%d)\n", iBuffer));
                        rc = VERR_INVALID_PARAMETER;
                        break;
                    }
                    uint8_t *pBuffer     = (uint8_t *)pSvcBuffer->pData;
                    uint32_t cbBuffer    = pSvcBuffer->uiSize;
                    /* Execute the function. */
                    rc = crVBoxServerClientWrite(u32ClientID, pBuffer, cbBuffer);
                    if (!RT_SUCCESS(rc))
                    {
                        Assert(VERR_NOT_SUPPORTED==rc);
                        svcClientVersionUnsupported(0, 0);
                    }
                    rc = crVBoxServerClientRead(u32ClientID, pWriteback, &cbWriteback);
                    if (RT_SUCCESS(rc))
                    {
                        /* Update parameters.*/
                        paParms[1].u.pointer.size = cbWriteback;
                    }
                    /* Return the required buffer size always */
                    paParms[2].u.uint32 = cbWriteback;
                    svcFreeBuffer(pSvcBuffer);
                }
                break;
            }
从上面的源码我们可以知道
> That sequence can be performed by the Chromium client in  
>  different ways:
>
>   1. Single-step: send the rendering commands and receive the  
>  resulting frame buffer with one single message.
>   2. Two-step: send a message with the rendering commands  
>  and let the server interpret them, then send another  
>  message requesting the resulting frame buffer.
>   3. Buffered: send the rendering commands and let the server  
>  store them in a buffer without interpreting it, then send a  
>  second message to make the server interpret the buffered  
>  commands and return the resulting frame buffer.
>
Guest中的客户端会通过HGCM发送一连串的命令到`SharedOpenGL`服务中被解析并返回图形渲染的结果给Guest。其中我们注意到`SHCRGL_GUEST_FN_WRITE_BUFFER`分支
####  SHCRGL_GUEST_FN_WRITE_BUFFER
                    /* Execute the function. */
                    CRVBOXSVCBUFFER_t *pSvcBuffer = svcGetBuffer(iBuffer, cbBufferSize);
进入`svcGetBuffer`函数
    static CRVBOXSVCBUFFER_t* svcGetBuffer(uint32_t iBuffer, uint32_t cbBufferSize)
    {
        CRVBOXSVCBUFFER_t* pBuffer;
        if (iBuffer)
        {
    ...........................
        }
        else /*allocate new buffer*/
        {
            pBuffer = (CRVBOXSVCBUFFER_t*) RTMemAlloc(sizeof(CRVBOXSVCBUFFER_t));
            if (pBuffer)
            {
                pBuffer->pData = RTMemAlloc(cbBufferSize);
    .........................
其中我们注意到当参数`iBuffer`为0时，会申请两个堆`RTMemAlloc(sizeof(CRVBOXSVCBUFFER_t))`和`RTMemAlloc(cbBufferSize)`，由于参数是可以自由控制的，因此通过该功能，我们可以自由的申请堆块，在`Heap
Spray`中，这个非常有用。通过分析，`SHCRGL_GUEST_FN_WRITE_BUFFER`命令的功能就是`从Guset中接收一串数据，并存入Buffer中，如果Buffer不存在则创建一个新的`  
我们将这个过程封装为函数用于使用
    int alloc_buf(int client,int size,const char *msg,int msg_len) {
       int rc = hgcm_call(client,SHCRGL_GUEST_FN_WRITE_BUFFER,"%u%u%u%b",0,size,0,"in",msg,msg_len);
       if (rc) {
          die("[-] alloc_buf error");
       }
       return ans_buf[0];
    }
####  SHCRGL_GUEST_FN_WRITE_READ_BUFFERED
接下来我们看到`SHCRGL_GUEST_FN_WRITE_READ_BUFFERED`命令,首先是该命令需要3个参数
                /* Verify parameter count and types. */
                if (cParms != SHCRGL_CPARMS_WRITE_READ_BUFFERED)
                {
                    rc = VERR_INVALID_PARAMETER;
                }
                else
                if (    paParms[0].type != VBOX_HGCM_SVC_PARM_32BIT   /* iBufferID */
                     || paParms[1].type != VBOX_HGCM_SVC_PARM_PTR     /* pWriteback */
                     || paParms[2].type != VBOX_HGCM_SVC_PARM_32BIT   /* cbWriteback */
                     || !paParms[0].u.uint32 /*iBufferID can't be 0 here*/
                   )
                {
                    rc = VERR_INVALID_PARAMETER;
                }
第一个为`iBufferID`，也就是通过`SHCRGL_GUEST_FN_WRITE_BUFFER`命令创建的buffer对应的ID；第二个参数为`pWriteback`，是一个指针，用于在Guest中接收处理后的数据；第三个参数为`cbWriteback`表示数据长度。  
我们将调用封装为函数用于使用
    char crmsg_buf[0x1000];
    int crmsg(int client,const char *msg,int msg_len) {
       int buf_id = alloc_buf(client,0x1000,msg,msg_len);
       int rc = hgcm_call(client,SHCRGL_GUEST_FN_WRITE_READ_BUFFERED,"%u%b%u",buf_id,"out",crmsg_buf,0x1000,0x1000);
       if (rc) {
          die("[-] crmsg error");
       }
    }
为了便于分析，我们写了一个测试程序
    int main() {
       int idClient = hgcm_connect("VBoxSharedCrOpenGL");
       printf("idClient=%d\n",idClient);
       set_version(idClient);
       crmsg(idClient,"hello",0x6);
    }
这里我们简单的发送`hello`到host中，看看会发生什么。  
继续向下看
                    CRVBOXSVCBUFFER_t *pSvcBuffer = svcGetBuffer(iBuffer, 0);