5 PUBLISHING DYNAMICS
In this section, we investigate the publishing dynamics of app de-
velopers. We focus on analyzing the publishing distribution for
each developer and app across each store10. We define “single-
store” released apps as those available only in a single market of
our dataset; otherwise, we label them as “multi-store” apps. Note
that it is possible that the “single-store” app would appear in other
markets that are not covered in this paper. This, however, does not
affect our comparative study.
5.1 App Developers
Android mobile apps must be signed with a developer key before
being released. We used the tool ApkSigner [9] to extract the app
developer signature present on each APK. This metadata, embedded
10We identify unique apps across markets based on their package names (or app ID).
00.10.20.30.40.50.60.70.80.9100.511.522.533.544.5525PPOPPOTencentAnzhiHiApkXiaomiMeizuGoogle PlayPc OnlineHuawei360BaiduLenovoSougouApp RatingCDF of Apps1 2  3 4  5  6 7  8 9 10  11  12  13  14  15  16 17Number of published markets0.40.50.60.70.80.91.0CDF of App DevelopersIMC ’18, October 31-November 2, 2018, Boston, MA, USA
Haoyu Wang et al.
(a) CDF of Apps VS. Number of App Versions
(b) CDF of Apps VS. Cluster Size
(c) CDF of Apps VS. Number of Developers
Figure 8: CDF of apps vs. (a) number of different versions (b) cluster size, and (c) number of developers.
on each executable, cannot be spoofed or modified by malicious
actors11. We identified slightly over 1 million app developers – all
of them with different signatures – in our dataset, as summarized
in Table 1.
Our analysis reveals that app developers follow different pub-
lishing strategies by targeting app stores and users in different
ways. More than half of the developers release their apps in Google
Play, and around 48% of them focus solely on Chinese alternative
markets. Out of these developers found on Google Play, 57% of
them do not release their apps in Chinese markets, possibly due
to language barriers or a lack of understanding of the fragmented
Chinese ecosystem.
Figure 7 shows the CDF of the number of app markets targeted
by each app developer. Around 20% of the app developers publish
their apps in more than 3 app stores simultaneously, but only a few
of them (just 696) roll out their apps in the 17 markets simultane-
ously. It is interesting to note that over 10% of the developers target
exclusively one single Chinese store. This trend is more prevalent
for those markets with a larger app catalog (e.g., Tencent and 25PP),
which also offer incentives to app developers for the exclusive
publishing rights of their software.
5.2 Single- and Multi-store Apps
Single-store Apps. More than 77% of the apps published in Google
Play are single-store ones. This result is expected, as Google Play
has a global presence and its catalog has far more apps than any
other market individually. On average, 11% of the apps published in
alternative Chinese app stores are single-store, though this figure
varies across stores. For example, while AnZhi, OPPO and 25PP
have over 20% of single-store apps, both Wandoujia and Meizu
markets have less than 1% of single-released apps. A manual inspec-
tion of the apps exclusively published in Meizu reveals that they
are popular apps explicitly developed for Meizu-branded handsets
(e.g.,com.meizu.flyme.wallet and com.meizu.media.reader).
Multi-store Apps. Between 20% and 30% of the apps published
in Chinese alternative markets are also present in Google Play.
The analysis also indicates that many Chinese markets share a
significant fraction of their app catalogs: for instance, 80% of the
apps published in 25PP are also released in Huawei, Wandoujia,
11We found that one developer (with the same signature) may correspond to multiple
names across markets with slight variations, e.g., Chinese name vs. English name.
Meizu and Lenovo markets. This trend is also present among the
top 1% most popular apps (by downloads) for each market: over
80% of the top 1% most popular apps are shared across all Chinese
markets. Catalog similarities between top apps in Chinese stores
and Google Play are, instead, low. This finding confirms that many
developers target exclusively Chinese app stores.
5.3 IDE and App Store Introduced Biases
The previous method offers an upper-bound estimation of catalog
overlaps between stores. However, an important remaining ques-
tion is: are two apps with the same package name and app version
identical? An alternative and stricter method to identify whether
two apps are identical is comparing the hash (e.g., MD5) of their APK
contents. This method allowed us to find a total number of 546,703
apps in our dataset with identical package names, version code
and developer but different MD5. For instance, we have 14 differ-
ent hashes for the app com.kugou.android v8.7.0. After manually
inspecting their DEX files (i.e., main function code), we conclude
that those apps are identical: the only difference between them
is their META-INF/kgchannel file12. This confirms that relying on
the package name, version number and developer signature are
sufficient to accurately identify similar apps despite these subtle dif-
ferences. Finally, we also identify instances of app store-introduced
differences resulting from stores forcing app developers to follow
certain requirements prior to publication. A notable case is 360
market, which requires developers to obfuscate their apps with 360
Jiagubao before uploading it to the app store [34].
5.4 Outdated Apps
Another reason potentially preventing us from identifying multi-
store released apps are unsynchronized roll-outs of new app ver-
sions across stores. We now relax the condition to identify two
identical apps: we only consider the app package name and devel-
oper signature, excluding the app version13. As shown in Figure 8(a),
roughly 14% of apps have simultaneously published multiple ver-
sions in different stores, up to 14 different versions in extreme cases.
12The META-INF/kgchannel files/directories are created, recognized and interpreted
by the Java 2 Platform to configure apps, extensions, class loaders and services. The
main purpose of them is to differentiate the source of app users (i.e., from which market
the app is installed).
13We assume that app version numbers are assigned incrementally regardless of app
stores.
1 2 3 4 5 6 7 8 9 10 11 12 13 14Number of Versions for Each Cluster (grouped by package names)0.8250.8500.8750.9000.9250.9500.9751.000CDF of Clusters1 10 19 28 37 46 55 64 73 82 91  100  109 118Cluster Size (Apps with Identical Names)0.700.750.800.850.900.951.00CDF of Apps1234567891011Number of Developers for Each Cluster (grouped by package names)0.860.880.900.920.940.960.981.00CDF of AppsA Large-Scale Comparative Study of Chinese Android App Markets
IMC ’18, October 31-November 2, 2018, Boston, MA, USA
Table 3: Fake and cloned apps across stores. SB and CB stand
for Signature-Based and Code-Based clones, respectively.
Market
Google Play
Tencent Myapp
Baidu Market
360 Market
Huawei Market
Xiaomi Market
Wandoujia
HiApk
AnZhi Market
OPPO Market
25PP
Sougou
MeiZu Market
LIQU
App China
Lenovo MM
PC Online
Average
Fake (%)
0.03
0.53
0.48
0.50
0.33
0.0
0.39
0.64
0.57
0.38
0.35
1.83
1.14
0.40
0.0
0.67
1.89
0.60
Clones
SB (%) CB (%)
17.82
22.73
17.38
23.26
18.76
20.11
21.23
20.08
20.71
20.94
24.08
18.28
18.42
16.68
13.23
16.37
23.34
19.61
4.01
8.24
10.98
5.43
11.54
8.00
5.98
7.51
4.92
5.85
7.16
4.86
6.65
5.32
10.17
7.81
8.60
7.24
and 2) apps released by the same developer with different package
names for different platforms14.
To this end, we applied a heuristic rule to remove legitimate
clusters. Generally, the apps in a cluster include different developer
signatures. By manually analyzing 100 randomly selected clusters
of different size, we found out that 83% of fake apps form small
clusters (size < 5 with uncommon names) of unpopular ones (i.e.,
downloads ≤ 1, 000) and a popular one with more than 1 million
installs (the official app). Table 3 summarizes the percentage of
fake apps identified in each market using this heuristic. The result
suggests that fake apps are present in all app stores, including
Google Play. Nevertheless, Meizu, PC Online and Sougou stores
have a percentage of fake apps above the average. Note that our
heuristic is straightforward yet very effective in identifying apps
that use similar names to camouflage as the official apps.
The largest number of fake apps in absolute terms correspond to
25PP and Tencent Myapp, with 3,591 and 3,347 apps, respectively.
Relative to the market size, PC Online (with 1.89%) and SouGou
(1.83%) lead the ranking of markets with higher presence of fake
apps. Overall, our results suggest that many app markets do not
take enough efforts to identify and remove fake apps, despite all
of them–but PC Online and HiApk– requesting copyright checks
and performing app auditing before publication (Section 2). While
we did not identify any fake app in Xiaomi and App China, Google
Play presents a marginal number of fake apps (572 in total).
6.2 Cloned Apps
Cloned apps often share a large portion of the metadata with the
original app, but they are obviously signed by different developers.
We explored the prevalence of cloned apps using two separate strate-
gies: a signature-based approach (which aims at identifying apps
with the same package name but different developer signatures)
and a code-based approach (i.e., apps with high code similarity
14e.g., com.sogou.map.android.maps and com.sogou.map.android.maps.pad are
two different versions of Sogou Map.
Figure 9: A comparison of app updates across markets.
Because we use a “parallel search” strategy in our crawler (Sec-
tion 3), the elapsed time between all crawls for a given app across
markets is in the order of a few minutes, so those are intentional
actions or poor software maintenance practices of the developers.
This behavior is not limited to poorly maintained unpopular apps.
Figure 9 details the overall distribution of outdated apps across
app stores. Note that for this analysis we exclude single-store apps
which are always updated by definition. Besides unfixed bugs and
potential vulnerabilities, publicly available outdated apps also hin-
der users from enjoying newly added features. This can decrease
the perceived quality of the apps, and overall hurts the brand equity
of the market. This observation suggests that developers may pri-
oritize roll-outs in specific app stores. Google Play has the highest
version number across all app stores: 95.4% of the apps published
there have the highest app version number. This is not the case for
stores like Lenovo MM and Baidu markets, where more than 39%
of their apps might be outdated according to their version number.
6 DEVELOPER MISBEHAVIORS
In this section, we study the prevalence of various types of malicious
behaviors across markets. Specifically, we study the presence of fake
apps, cloned apps, over-privileged apps, and malware. The differences
between fake and cloned apps are subtle but substantial. Malicious
developers can release fake apps that masquerade as the legitimate
one but stealthily perform malicious actions on the user’s device.
We define those as “fake apps” [103]. We consider “cloned apps” as
those that are the results of repackaging legitimate ones [89].
6.1 Fake Apps
We exploit the fact that fake apps usually try to emulate the app
name of a legitimate one, but are published with different package
names [38, 63]. We applied a clustering-based method to efficiently
identify fake apps at scale. First, we build a cluster enforcing a strict
matching of app names. As shown in Figure 8(b), around 22% of the
apps in our dataset share the same name with at least another app,
all of them with different package names, either in the same or in a
different store. Not all the identified apps are necessarily fake, as
developers may have legitimate reasons for releasing different apps
(package names) with the same app name. This is the case of: 1) apps
sharing common names like Flashlight, Calculator, or Wallpaper;
0.00.20.40.60.81.0Google Play 25PPOPPO Market Wandoujia Tencent Myapp PC Online 360 Market LIQUApp China Anzhi Market Huawei Market Sougou Meizu Market HiApkXiaomi Market Lenovo MM Baidu Market52.9%60.4%63.9%66.6%69.1%69.3%72.7%75.9%77.2%79.7%82.5%84.1%89.4%90.0%90.2%91.8%95.4%IMC ’18, October 31-November 2, 2018, Boston, MA, USA
Haoyu Wang et al.
but different package names). However, we are also interested in
identifying the source market in which the original app has been
published. As it is non-trivial to identify the original app given a
pair of cloned apps [56, 101], we resort to a heuristic approach to
solve this: the app with more downloads is regarded as the original
one. Unfortunately, this may generate false positives as it may be
possible for the cloned app to have more installs than its original
version. Unfortunately, to the best of our knowledge the research
community has not developed a more accurate method to solve this
problem [51, 89, 101].
Signature-based clones. As in the previous section, we first clus-
ter all the apps by their package name and then compare the app
developer signatures for each cluster. We consider that two apps
are clones if they share the same package name but do not have a
common developer signature. Since package names are supposed
to distinctively identify an Android app, it is expected that they
should be unique across different Android markets and that they
are signed with the same developer key.
Figure 8(c) shows the distribution of apps with respect to the
number of developer signatures obtained in a cluster. Overall, 12%
of apps have at least 2 clones released by different developers. For
example, the app com.dino.dinosuperapp has been published in
15 different markets by 11 different developers. To better under-
stand the nature of these clones, we manually examined 100 ran-
domly selected pairs of signature-based clones. In all cases, we
observed that clones are actually repackaged apps, i.e., apps cre-
ated by disassembling the original app, making modifications, and
finally reassembling the resulting code into a different app. Even
if we cannot cover all cases manually, our analysis suggests that
there are no legitimate reasons behind these identified clones.
Code-based clones. Since cloned apps can also modify the pack-
age name, we implemented a different approach based on analyzing
code similarity to identify cloned apps. Previous work has pro-
posed different approaches for app repackaging detection [51, 52,
58, 99, 101, 102]. In this paper, our implementation is based on
WuKong [89], which proved to be an accurate and scalable two-
phase approach for app clone detection. We first extracted Android
API calls, Intents, and Content Providers for each app and created
a feature vector per app with more than 45K dimensions. We then
used a variant of the Manhattan distance to measure the similarity
between each pair of vectors. Specifically, for n-dimensional feature
vectors A and B, their distance is given by
distance(A, B) =
n
n
i =0 |Ai − Bi|
i =0 (Ai + Bi) .
If the resulting distance between the computed vectors for a pair of
apps exceeds a certain threshold – we experimentally selected a con-
servative threshold of 0.05, which corresponds to a 95% similarity
– and they are signed with different signatures, we consider these
two apps as potential clones. For those apps flagged as potential app
clones, we performed a second code-level comparison to refine the
results as introduced by WuKong. In this second step, we consider
two apps to be clones when they share more than 85% of the code
segments. Due to space limitations, we omit the implementation
details here.
Previous work has suggested that, on average, more than 60%
of an app’s code come from third-party libraries [89]. This figure
Figure 10: Intra- and inter-market app clones.
is relevant for our analysis since libraries may cause both false
positives and false negatives when detecting code clones [65]. To
overcome this limitation, we leveraged LibRadar [70, 74] to identify
and eliminate the impact of third-party libraries on our code-based
app clone study.
Results. Table 3 summarizes the distribution of signature- and
code-based clones for each market. Code-based clones (roughly 20%)
are generally more common than signature-based clones (roughly
10%). This result is in line with figures reported in previous work [89,
102] and suggests that attackers are more interested in advanced
cloning methods that go beyond changing app package names and
manipulating the code. We further illustrate the source market
of cloned cases in the heatmap rendered in Figure 10. Both intra-
market and inter-market clones are considered 15. For each cell
(row X, column Y), the color represents the number of cloned apps
in market Y that were originally published in market X. Google
Play is the premier source for cloning apps: it presents the large
number of apps being cloned into Chinese markets. We can also
detect interesting trends when looking at the destination of these
apps. Market 25PP has the largest number of cloned apps, which
are mainly copied from Google Play, followed by Tencent Myapp
and Wandoujia. Surprisingly, intra-market clones are also quite
common in addition to inter-market clones. As shown in Figure 10,
more than 181,677 apps in 25PP market have similar apps to those
originally from the same market.
6.3 Over-privileged Apps
Previous studies [41, 54] have analyzed the gap between requested
permissions and those actually used by Android apps. An app is
said to be “over-privileged” when it requests more permissions
15Only code-based clones are presented as signature-based clones do not involve any
intra-market clones.
Google PlayTencent MyappBaidu Market360 MarketHuawei MarketXiaomi MarketWandoujiaHiApkAnzhi MarketOPPO Market25PPSougouMeiZu MarketLIQUApp ChinaLenovo MMPC OnlineGoogle Play Tencent Myapp Baidu Market360 MarketHuawei MarketXiaomi MarketWandoujia HiApkAnzhi MarketOPPO Market25PP Sougou MeiZu MarketLIQUApp China Lenovo MM PC Online 0-10K10-50K50-100K100-150K150-200KA Large-Scale Comparative Study of Chinese Android App Markets
IMC ’18, October 31-November 2, 2018, Boston, MA, USA
Table 4: Percentage of apps labeled as malware in each mar-