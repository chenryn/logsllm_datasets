title:Extending equation-based congestion control to multicast applications
author:J&quot;org Widmer and
Mark Handley
Extending Equation-based Congestion Control
to Multicast Applications
J¨org Widmer
University of Mannheim
Mannheim, Germany
AT&T Center for Internet Research at ICSI
Mark Handley
(ACIRI)
PI:EMAIL
PI:EMAIL
ABSTRACT
In this paper we introduce TFMCC, an equation-based multicast
congestion control mechanism that extends the TCP-friendly TFRC
protocol from the unicast to the multicast domain. The key chal-
lenges in the design of TFMCC lie in scalable round-trip time mea-
surements, appropriate feedback suppression, and in ensuring that
feedback delays in the control loop do not adversely affect fairness
towards competing ﬂows. A major contribution is the feedback
mechanism, the key component of end-to-end multicast congestion
control schemes. We improve upon the well-known approach of us-
ing exponentially weighted random timers by biasing feedback in
favor of low-rate receivers while still preventing a response implo-
sion. We evaluate the design using simulation, and demonstrate that
TFMCC is both TCP-friendly and scales well to multicast groups
with thousands of receivers. We also investigate TFMCC’s weak-
nesses and scaling limits to provide guidance as to application do-
mains for which it is well suited.
Keywords
congestion control, multicast, single-rate, TCP-friendliness, feed-
back suppression
INTRODUCTION
1.
It is widely accepted that one of several factors inhibiting the usage
of IP multicast is the lack of good, deployable, well-tested multicast
congestion control mechanisms. To quote [10]:
The success of the Internet relies on the fact that best-effort
trafﬁc responds to congestion on a link by reducing the load
presented to the network. Congestion collapse in today’s In-
ternet is prevented only by the congestion control mechanisms
in TCP.
We believe that for multicast to be successful, it is crucial that mul-
ticast congestion control mechanisms be deployed that can co-exist
with TCP in the FIFO queues of the current Internet.
The precise requirements for multicast congestion control are per-
haps open to discussion given the efﬁciency savings of multicast,
but we take the conservative position that a multicast ﬂow is ac-
ceptable if it achieves no greater medium-term throughput to any
receiver in the multicast group than would be achieved by a TCP
ﬂow between the multicast sender and that receiver.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
SIGCOMM’01, August 27-31, 2001, San Diego, California, USA.
Copyright 2001 ACM 1-58113-411-8/01/0008 ...$5.00.
Such a requirement can be satisﬁed either by a single multicast
group if the sender transmits at a rate dictated by the slowest re-
ceiver in the group, or by a layered multicast scheme that allows
different receivers to receive different numbers of layers at differ-
ent rates. Much work has been done on the latter class [12, 18, 4],
but the jury is still out on whether any of these mechanisms can be
made safe to deploy.
This paper describes TCP-Friendly Multicast Congestion Control
(TFMCC), which belongs to the class of single rate congestion con-
trol schemes. Such schemes inevitably do not scale as well as lay-
ered schemes. However, they are much simpler, match the require-
ments of some applications well, and we will demonstrate that they
can scale to applications with many thousands of receivers. These
schemes also suffer from degradation in the face of badly broken
links to a few receivers – how to deal with such situations is a pol-
icy decision, but we expect that most applications using a single-
rate scheme will have application-speciﬁc thresholds below which
a receiver is compelled to leave the multicast group.
TFMCC is not the only single-rate multicast congestion control
scheme available. In particular, Pragmatic General Multicast Con-
gestion Control (PGMCC) [17] is also a viable solution with some
nice properties and a certain elegant simplicity. However, TFMCC
and PGMCC differ considerably in the smoothness and predictabil-
ity of their transmission. We will argue that both are appropriate
solutions, and that some applications are better suited to one than
the other.
1.1 TFMCC and TFRC
The TCP-friendly Rate Control protocol (TFRC) [5] is a unicast
congestion control mechanism intended for applications that re-
quire a smoother, more predictable transmission rate than TCP can
achieve. TFMCC extends the basic mechanisms of TFRC into the
multicast domain.
TFRC is an equation-based congestion control scheme. It uses a
control equation derived from a model of TCP’s long-term through-
put to directly control the sender’s transmission rate. Basically
TFRC functions as follows:
1. The receiver measures the packet loss rate and feeds this in-
formation back to the sender.
2. The sender uses the feedback messages to measure the round-
trip time to the receiver.
3. The sender uses the control equation to derive an acceptable
transmission rate from the measured loss rate and round-trip
time (RTT).
4. The sender’s transmission rate is then adjusted directly to
match the calculated transmission rate.
For full details of TFRC, we refer the reader to [5].
TFMCC follows a very similar design for multicast congestion con-
trol. The primary differences are that it is the receivers that mea-
sure their RTT to the sender and perform the calculation of the
acceptable rate. This rate is then fed back to the sender, the chal-
lenge being to do this in a manner which ensures that feedback
from the receiver with the lowest calculated rate reaches the sender
whilst avoiding feedback implosions. Moreover, we need to make
sure than any additional delay imposed to avoid feedback implosion
does not adversely affect the fairness towards competing protocols.
2. THE TFMCC PROTOCOL
Building an equation-based multicast congestion control mecha-
nism requires that the following problems be solved:
(cid:15) A control equation must be chosen that deﬁnes the target
throughput in terms of measurable parameters, in this case
loss event rate and RTT.
(cid:15) Each receiver must measure the loss event rate. Thus a ﬁl-
ter for the packet loss history needs to be chosen that is a
good stable measure of the current network conditions, but is
sufﬁciently responsive when those conditions change.
(cid:15) Each receiver must measure or estimate the RTT to the sender.
Devising a way to do this without causing excessive network
trafﬁc is a key challenge.
ceptable sending rate from the sender to itself.
(cid:15) Each receiver uses the control equation to calculate an ac-
(cid:15) A feedback scheme must be so devised that feedback from
the receiver calculating the slowest transmission rate always
reaches the sender, but feedback implosions do not occur
when network conditions change.
(cid:15) A ﬁltering algorithm needs to be devised for the sender to
determine which feedback it should take into account as it
adjusts the transmission rate.
Clearly, all these parts are closely coupled. For example, altering
the feedback suppression mechanisms will impact how the sender
deals with this feedback. Many of our design choices are heavily
inﬂuenced by TFRC, as these mechanisms are fairly well under-
stood and tested. In this paper we will expend most of our efforts
focusing on those parts of TFMCC that differ from TFRC.
2.1 Determining an Acceptable Sending Rate
The control equation used by TFRC and TFMCC is derived from a
model for long-term TCP throughput in bytes/sec [15]:
TT C =

RT T (cid:18) 2
3 (cid:18)12 3
8 (cid:19)  1  322(cid:19)
(1)
The expected throughput TT C of a TCP ﬂow is calculated as a
function of the steady-state loss event rate , the round-trip time
RT T , and the packet size . Each TFMCC receiver measures its
own loss event rate and estimates its RTT to the sender.
It then
uses Equation (1) to calculate TT C , which is an estimate of the
throughput a TCP ﬂow would achieve on the network path to that
receiver under the same network conditions. If the sender does not
exceed this rate for any receiver then it should be TCP-friendly,
in that it does not affect a TCP ﬂow through the same bottlenecks
more than another TCP ﬂow would do.
In the following section we will elaborate on how the necessary
parameters for the model are computed and how to deal with po-
tentially large receiver sets.
2.2 Adjusting the Sending Rate
The sender will continuously receive feedback from the receivers.
If a receiver sends feedback that indicates a rate that is lower than
the sender’s current rate, the sender will immediately reduce its rate
to that in the feedback message.
In order to eliminate a large number of unnecessary messages, re-
ceivers will not send feedback unless their calculated rate is less
than the current sending rate. However, this leaves us with a prob-
lem – how do we increase the transmission rate? We cannot afford
to increase the transmission rate in the absence of feedback, as the
feedback path from the slowest receiver may be congested or lossy.
As a solution we introduce the concept of the current limiting re-
ceiver (CLR). The CLR is the receiver that the sender believes cur-
rently has the lowest expected throughput of the group.1 The CLR
is permitted to send immediate feedback without any form of sup-
pression, so the sender can use the CLR’s feedback to increase the
transmission rate.
The CLR will change if another receiver sends feedback indicating
that a lower transmission rate is required. It will also change if the
CLR leaves the multicast group – this is normally signaled by the
CLR, but an additional timeout mechanism serves as a backup in
case the CLR crashes or becomes unreachable.
Normally the way loss measurement is performed limits the possi-
ble rate increase to roughly 0.3 packets per RT T , as shown in [5].
However, if the CLR leaves the group, the new CLR may have a
signiﬁcantly higher calculated rate. We cannot afford to increase
directly to this rate, as the loss rate currently measured may not be
a predictor of the loss rate at the new transmission rate. Instead we
then impose a rate increase limit of one packet per RT T , which
is the same as TCP’s additive increase constant, so that the rate
gradually increases to the new CLR’s rate.
2.3 Measuring the Loss Event Rate
The loss event rate can only be scalably measured at the receivers.
The measurement mechanism closely matches that used for TFRC.
A receiver aggregates the packet losses into loss events, deﬁned as
one or more packets lost during a round-trip time. The number of
packets between consecutive loss events is called a loss interval.
The average loss interval size can be computed as the weighted
average of the  most recent loss intervals  k; : : : ;  k 1:
i=0 wi k i
 avgk =  1
 1
i=0 wi
The weights wi are chosen so that very recent loss intervals receive
the same high weights, while the weights gradually decrease to 0
for older loss intervals. For example, with eight weights we might
use f5, 5, 5, 5, 4, 3, 2, 1g. This allows for smooth changes in  avg as
loss events age. While large values for  improve the smoothness
of the estimate, a very long loss history also reduces the respon-
siveness and thus the fairness of the protocol. Values around 8 to
32 appear to be a good compromise.
The loss event rate  used as an input for the TCP model is deﬁned
as the inverse of  avg. The interval since the most recent loss event
does not end with a loss event and thus may not reﬂect the loss
event rate. This interval is included in the calculation of the loss
event rate if doing so reduces :
 =
1
ax  avgk;  avgk   1
For a more thorough discussion of this loss measurement mecha-
nism see [5].
2.4 Round-trip Time Measurements
A key challenge of TFMCC is for each receiver to be able to mea-
sure its RTT to the sender without causing excessive trafﬁc at the
1In this respect, the CLR is comparable to the representative used
in congestion control schemes such as PGMCC.
sender. In practice the problem is primarily one of getting an ini-
tial RTT measurement as, with the use of timestamps in the data
packets, a receiver can see changes in the delay of the forward path
simply from the packet’s arrival time. We will discuss this further
in Section 2.4.3.
2.4.1 RTT Estimate Initialization
Ideally we would like a receiver to be able to initialize its RTT mea-
surement without having to exchange any feedback packets with
the sender. This is possible if the sender and receiver have syn-
chronized clocks, which might be achieved using GPS receivers.
Less accurately, it can also be done using clocks synchronized with
NTP [13].
In either case, the data packets are timestamped by the sender, and
the receiver can then compute the one-way delay. The RTT is esti-
mated to be twice the one-way delay dS!R. In the case of NTP, the
errors that accumulate between the stratum-1 server and the local
host must be taken into account. An NTP server knows the RTT
and dispersion to the stratum-1 server to which it is synchronized.
The sum of these gives the worst-case error (cid:15) in synchronization.
To be conservative:
RT T = 2dS!R  (cid:15)ede  (cid:15)eceive
In practice NTP provides an average timer accuracy of 20-30 ms
[13], and in most cases this gives us an estimate of RTT that is
accurate at least to the nearest 100 ms. Although not perfect, this is
still useful as a ﬁrst estimate.
In many cases though, no reliable form of clock synchronization
is available. Each receiver must then initialize its RTT estimate to
a value that should be larger than the highest RTT of any of the
receivers. We assume that for most networks a value of 500 ms is
appropriate [1]. This initial value is used until a real measurement
can be made. In Appendix A we reason why it is safe to also use
this value to aggregate losses to loss events, where a low RTT value
would be the conservative option.
2.4.2 RTT Measurement
A receiver gets to measure the instantaneous RTT i
RT T by sending
timestamped feedback to the sender, which then echoes the time-
stamp and receiver ID in the header of a data packet. If more feed-
back messages arrive than data packets are sent, we prioritize the
sender’s report echoes in the following order:
1. a receiver whose report causes it to be selected as the new
CLR
2. receivers that have not yet measured their RTT
3. non-CLR receivers with previous RTT measurements
4. the existing CLR.
Ties are broken in favor of the receiver with the lowest reported
rate. Normally the number of data packets is larger than the num-
ber of feedback packets, so the CLR’s last report is echoed in any
remaining data packets.2
To prevent a single spurious RTT value from having an excessive
effect on the sending rate we smooth the values using an exponen-
tially weighted moving average (EWMA)
RT T = (cid:12)  i
RT T  1   (cid:12)  RT T
For the CLR we set (cid:12)CR = 0:05. Given that other receivers will
not get very frequent RTT measurements and thus old measure-
ments are likely to be outdated, a higher value of (cid:12) CR = 0:5
is used for them.
2To be able to infer an accurate RTT from the timestamps it is nec-
essary to also take into account the offset between receipt of a time-
stamp and echoing it back.
2.4.3 One-way Delay RTT Adjustments
Due to the infrequent RTT measurements, it would also be possi-
ble for large increases in RTT to go unnoticed if the receiver is not
the CLR. To avoid this we adjust the RTT estimate between actual
measurements. Since data packets carry a send timestamp daa, a
receiver that gets a RTT measurement at time w can also com-
pute the one-way delay from sender to receiver (including clock
skew) as
dS!R = w   daa
and the one-way from receiver to sender as
dR!S = i
RT T   dS!R
Due to clock skew, these values are not directly meaningful, but
dR!S can be used to modify the RTT estimate between real RTT
measurements. When in a later data packet the one-way delay from
sender to receiver is determined as d 0
S!R, it is possible to compute
an up-to-date RTT estimate
i
RT T
0 = dR!S  d 0
S!R
Clock skew between sender and receiver cancels out, provided that
clock drift between real RTT measurements is negligible. The mod-
iﬁed RTT estimates are smoothed with an EWMA just like nor-
mal RTT measurements, albeit with a smaller decay factor for the
EWMA since the one-way delay adjustments are possible with each
new data packet. One-way delay adjustments are used as an indi-
cator that the RTT may have changed signiﬁcantly and thus a real
RTT measurement is necessary. If the receiver is then selected as
CLR, it measures its RTT with the next packet and all interim one-
way delay adjustments are discarded. For this reason it proved to