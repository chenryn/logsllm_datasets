hardware extension to enforce Control Flow Integrity (CFI)
at runtime. Similarly, kAFL [71] is a kernel fuzzing engine
that uses Intel PT to obtain code coverage information.
Speciﬁcally for our use cases, we assume an application may
suffer from a security vulnerability such as buffer overﬂow
and an attack can leverage that to gain the control of program’s
stack. Also, motivated by our information leakage prevention
use case, we assume that sensitive memory contents can be
leaked to unauthorized entities.
Since PHMon relies on OS support, we assume that the
OS kernel is trusted. However, in principle, PHMon can be
extended to protect (part of) the OS kernel. Section 7.2 pro-
vides a more detailed discussion about PHMon’s capabilities
and limitations in protecting the OS kernel. Also, we assume
all hardware components are trusted and bug free. Hence,
hardware-based attacks such as row hammer [41] and cache-
based side-channel attacks are out-of-scope of this work.
As mentioned before, for security enforcement use cases,
we can consider PHMon as a reference monitor [4, 70]. A
reference monitor should satisfy three principles: complete
mediation, tamperproofness, and veriﬁability. PHMon satis-
ﬁes the complete mediation principle. Whenever a context
switch into a monitored process occurs, PHMon continues
monitoring. Additionally, PHMon monitors the execution of
the forked processes of a parent process. Regarding tamper-
proofness, as we will discuss in Section 4.2, PHMon provides
the option of “sealing” conﬁgurations to prevent further modi-
ﬁcations. With respect to veriﬁability, PHMon is small enough
to be subject to veriﬁcation (13.5% area overhead compared
to an in-order processor).
4 PHMon
3 Threat Model and Assumptions
In this work, we focus on detecting software security vul-
nerabilities and preventing attackers from leveraging these
vulnerabilities. We follow the common threat model among
the related works. We assume software may include one or
more security bugs and vulnerabilities that attackers can lever-
age to perform an attack. We do not assume any restrictions
about what an attacker would do after a successful attack.
We propose a minimally-invasive programmable hardware
monitor (for a general-purpose processor) to enforce an event-
action monitoring model. Figure 1 presents a high-level
overview of PHMon that implements such an event-action
monitoring model. To enable per process monitoring, soft-
ware API (to conﬁgure/program the hardware monitor) and
OS support are mandatory. A user/admin can conﬁgure the
hardware to monitor the execution of one or more processes.
Then, the hardware monitor collects the runtime execution
USENIX Association
29th USENIX Security Symposium    811
PHMon: Monitor Events/Take ActionsUser/AdminEvent/Action SpecificationUsing PHMon APIProgramPHMonPHMonMonitor the ProcessExecution & Take ActionsProcess IsTerminated?PHMon IsDisabled?PHMonStop MonitoringPHMon: Match UnitsA Match to an EventIs Found?PHMon: QueueEnqueue the MatchPacket to Take ActionsYNYMonitor EventsTake ActionsYYActions Are Done?PHMon: Action UnitTake an ActionInterruptALU OperationMemory OperationSkip ActionsPHMon: QueueDequeue aMatch PacketRISC-V RocketMicroprocessorPipelinedProcessor CoreL1Data CachePC_GEN/FetchDecExeMemWBTUPHMonCommit Log- inst (32 bits)- pc_src (64 bits)- pc_dst (64 bits)- addr (64 bits)- data (64 bits)CoreInterruptMemory RequestCommand  - inst   - [Rs1]  - [Rs2]Response  - Rd  - [Rd]CoprocessorInterruptMachineStatusBusyPageTableWalkerMemory ResponseRoCC Interfaceinformation of the processor, checks for the speciﬁed events,
and performs follow-up actions. Once the process terminates
or the user/admin disables the monitoring, the hardware mon-
itor stops monitoring. In the rest of this section, we discuss
the challenges associated with designing PHMon and our de-
sign decisions to address these challenges. In the next three
subsections, we explain the hardware design for PHMon, its
software interface, and the OS support for PHMon.
4.1 PHMon: Architecture
In this subsection, we present the hardware design of PHMon.
Our main design goal for our hardware monitor is to pro-
vide an efﬁcient and minimally invasive design. According
to the event-action monitoring model, our hardware monitor
should perform three main tasks: collect the instruction ex-
ecution trace of a processor, examine the execution trace to
ﬁnd matches with programmed events, and take follow-up ac-
tions. To perform these tasks, PHMon consists of three main
architectural units: a Trace Unit (TU), Match Units (MUs),
and an Action Unit (AU).
4.1.1 Trace Unit (TU)
The TU is responsible for performing the ﬁrst task, i.e., col-
lecting the instruction execution trace. To design our TU, we
need to answer the following questions: what information
should the TU collect, from where should it collect this infor-
mation, and how to transfer the collected information to the
hardware monitor?
In this work, we only collect information about the architec-
tural state of the processor (not the micro-architectural state).
To this end, the TU collects the entire architectural state of the
processor using ﬁve separate entries, i.e., the undecoded in-
struction (inst), the current Program Counter (PC) (pc_src),
the next PC (pc_dst), the memory/register address used in the
current instruction (addr), and the data accessed by the cur-
rent instruction (data). The inst entry contains the opcode
as well as the input and output operand identifiers. In
principle, we can collect this information from different stages
of a processor’s pipeline (i.e., decode, execute, memory, and
write-back stages). We can take advantage of the FIRRTL [45]
compiler1 (via annotations) to extract speciﬁc signals with
low effort and transfer them to PHMon. To ensure that we
monitor the instructions that are actually executed and in the
order they are committed, we collect the above-mentioned
information from the commit stage of the pipeline. Hence, we
call the collected information a commit log.
During each execution cycle, the TU collects a commit log
and transfers it to our hardware monitor. To prevent stalling
the processor’s pipeline while PHMon processes each commit
log, we design PHMon as a parallel decoupled monitor. Such
1FIRRTL is an Intermediate Representation (IR) for digital circuits. The
FIRRTL compiler is analogous to the LLVM compiler.
Figure 3: PHMon’s microarchitecture.
a decoupled monitor requires an interface to receive the com-
mit log from the processor. In this work, we design PHMon
as an extension to the open-source RISC-V Rocket proces-
sor [5] via its Rocket Custom Coprocessor (RoCC) interface.
RISC-V [83] is an open standard Instruction Set Architecture
(ISA). We choose the Rocket processor due to the availability
of its RISC-V open ISA and the capability of running the
Linux OS on the processor. However, our PHMon design is
independent of the transport interface and ISA.
Figure 2 depicts the extended RoCC interface used in our
design to communicate with the Rocket processor. The RoCC
interface provides transmitting/receiving register data for com-
munication, status/exception bits, and direct communication
with the memory hierarchy (L1 data cache in our design). We
have extended the RoCC interface to carry the commit log
trace (shown in red in Figure 2). Since Rocket is an in-order
processor, we minimally modify the write-back stage of the
Rocket processor’s pipeline to collect the commit log trace.
PHMon receives the commit log, collected by the TU, from
the RoCC interface. Then, as shown in Figure 3, PHMon
applies the conﬁgured monitoring rules to the commit log
to detect events (handled by MUs) and performs follow-up
actions (managed by the AU). As mentioned before, PHMon
is decoupled from the processor and it processes the incoming
commit logs one by one. Hence, we need a queuing mech-
anism to record incoming commit log traces. Rather than
placing a queue between the RoCC interface and PHMon, we
ﬁlter the incoming packets using MUs and only record the
matched events in a queue prior to taking actions.
4.1.2 Match Units (MUs)
MUs are responsible for monitoring an incoming commit log
and ﬁnding matches with programmed events. Each MU is in
charge of detecting a distinct event using a set of monitoring
rules. An event is speciﬁed at bit-granularity by a match
entry and its corresponding care/don’t care mask entry,
which are applied on each commit log entry. An MU matches
the care bits of each match entry with the corresponding
bits in the commit log entry. As an example, consider a sce-
nario where a user wants to monitor any of the four branch
instructions including BLT, BGE, BLTU, and BGEU. The user
812    29th USENIX Security Symposium
USENIX Association
PHMonALULocalRegisterFileControl Unit (CU)Match QueueMU_dataMU_addrMU_id...Match Packetconf_ptrConfig Unit-0 (CFU-0)...Type2bIn13bIn23bFn4bOut3bData64bAction Config Tableconf_ctrAction Unit (AU)Commit Log- inst- pc_src- pc_dst- addr- dataCmd/RespInterruptMemoryMatch Unit-0 (MU-0)Predicate:- inst   = *8067- pc_src = *- pc_dst = *- addr   = *- data   = *CounterThreshold=?Comparatorcan conﬁgure an MU to monitor these four instructions using
the following matching condition:
BLT, BGE, BLTU, BGEU: inst = 0x00004063; mask bit = 0xffffbf80
The matching condition for inst evaluates to true when the
current instruction is a match with one of the BLT, BGE, BLTU,
or BGEU instructions. Note that each of these instructions is
identiﬁed based on the opcode and func3 bits (refer to [83]).
For each of the remaining entries of the commit log (i.e.,
pc_src, pc_dst, addr, and data), we set the masking bits
to 0xffffffffffffffff, indicating these ﬁelds are don’t
cares. In Section 4.2, we will present our software interface
for programming MUs to monitor the target events. Whenever
the predicate (the logical conjunction of the matches on all
the commit log entries) evaluates to true, a counter in the
corresponding MU increases. Once the counter reaches a
programmed threshold value, the MU triggers an activation
signal and sends a match packet to the AU. The AU queues
the incoming match packets, while it performs actions for
the packets arrived earlier. To reduce the queuing trafﬁc, an
MU ﬁlters commit log traces based on the monitoring rules
before queuing them.
An MU may be programmed by a user process to mon-
itor only its own execution or by an admin to monitor pro-
cesses with lower permissions. In both cases, MU conﬁgu-
ration becomes part of a process’ context and is preserved
across context switches by the OS. In Section 6.2, we evalu-
ate the performance overhead caused by preserving PHMon’s
conﬁguration across context switches.
Although each MU monitors a separate event, PHMon is
capable of monitoring a sequence of events using multiple
MUs communicating through a shared memory space set up
by either the OS or the monitored process itself. For exam-
ple, multiple MUs may all write to or read from the shared
memory.
4.1.3 Action Unit (AU)
The AU is responsible for performing the follow-up actions.
Our main goal in designing the AU is to provide a minimal
design that supports a variety of actions including arithmetic
and logical operations, memory operations, and interrupts. To
this end, we effectively design our AU as a small microcon-
troller with restricted I/O consisting of four microarchitectural
components: Conﬁg Units (CFUs), an Arithmetic and Logical
Unit (ALU), a Local Register File, and a Control Unit (CU).
In addition to these four components, the Match Queue that
records the match packets (generated by MUs) is placed in
the AU (see Figure 3).
Each MU is paired with a CFU, where the CFU stores the
sequence of actions to be executed once the MU detects a
match. These programmable actions are in fact the instruc-
tions of a small program that executes in the AU. The CU
performs the sequence of actions via hardware operations
(i.e., ALU operations and memory requests) or an interrupt
(handled by software). The CU uses the registers in the Local
Register File (6 registers in total) to perform the hardware
operations. Our AU implementation enforces the atomic ex-
ecution of actions. To this end, the CU executes all of the
follow-up actions of one match packet before switching to
the actions of the next match packet.
As part of the actions, the AU can access memory by
sending requests to the L1 data cache, a virtually-indexed
physically-tagged cache, through the RoCC interface. Hence,
all memory accesses are to virtual addresses. The L1 data
cache of Rocket processor has an arbiter to handle incom-
ing requests from several agents including the Rocket core
and the RoCC interface. Note that the memory hierarchy of
Rocket core manages the memory consistency.
In Appendix A, we provide a detailed description about
each of the AU’s microarchitectural components.
4.2 PHMon: Software Interface
We use RISC-V’s standard ISA extensions [83], called
custom RISC-V instructions, to conﬁgure PHMon’s MUs
and CFUs, as well as to communicate with PHMon. We pro-
vide a list of functions that one can use to communicate with
PHMon, where each function is accessible by a user-space
process, a supervisor, or both. Note that when a user process
programs PHMon, then PHMon only monitors that process’
execution. When an admin programs PHMon, it can be con-
ﬁgured to monitor a speciﬁc user process or monitor all user
processes. To prevent an unauthorized process from recon-
ﬁguring PHMon (after an MU and its paired CFU are con-
ﬁgured), we provide an optional feature to stop any further
conﬁguration. To this end, we leverage the Rocket’s privilege
level (MStatus.priv) provided to PHMon through the RoCC
interface. According to the privilege level, PHMon permits or
blocks incoming conﬁguration requests.
4.3 PHMon: OS Support
In this section, we discuss the necessary modiﬁcations to
the Linux OS kernel to support PHMon. We categorize our
modiﬁcations into two classes: per process modiﬁcations and
interrupt handling modiﬁcations.
4.3.1 Per Process OS Support
We extend Linux to support PHMon and provide a complete
computing stack including the hardware, the OS, and soft-
ware applications. We provide the OS support for PHMon
at the process level. To this end, we alter the task_struct
in the Linux Kernel to maintain PHMon’s state for each pro-
cess. We store the MUs’ counters, MUs’ thresholds, the value
of local registers, and CFUs’ conﬁgurations as part of the
task_struct (using the custom instructions for reading PH-
Mon register values).
We modify the Linux kernel to initialize the PHMon infor-
mation before the process starts its execution. Once PHMon is
USENIX Association
29th USENIX Security Symposium    813
conﬁgured to monitor a process, we enable a ﬂag (part of the
task_struct) for that process. Our modiﬁed OS allocates
a shared memory space for communication between MUs.
After allocation, the OS maintains the base address and the
size of the shared memory as part of the PHMon information
for the process in the task_struct. Additionally, the OS
sends the base and size values to PHMon. PHMon can sim-
ply protect the shared memory from unauthorized accesses,
where only the AU and the OS are authorized to access the
shared memory. To provide this protection, one of the MUs
can monitor any user-space load or store accesses to this
range of memory and trigger an interrupt in case of memory
access violation.
During a context switch, the OS reads the MU information
(counter and threshold values) as well as the Local Register
File information from PHMon and stores them as the PHMon
information of the previous process in the task_struct.
Before the OS context switches to a monitored process, it
reads the MU information of the next process and writes
it to PHMon registers using the functions provided in the
PHMon API. Note that to retain the atomicity of the pro-
grammed actions, our modiﬁcations to the OS delay a context
switch until the execution of the current set of actions and
the corresponding actions of all the match packets stored
in the Match Queue are completed. It is worth mentioning
that our current implementation of PHMon is not designed
for real-time systems. Hence, we currently do not provide any
guarantees for meeting stringent real-time deadlines.
4.3.2 Interrupt Handling OS Support
The OS is responsible for handling an incoming interrupt
triggered by the CU. We conﬁgure our RISC-V processor
to delegate the interrupt to the OS. Additionally, we modify
the Linux kernel to handle the incoming interrupts from the
RoCC interface. In our security-oriented use case, the OS
terminates the process that caused the interrupt based on the
assumption that an anomaly or violation has triggered the
interrupt. Note that the OS can handle the interrupt in various
ways according to the user’s requirements (e.g., trapping into
GDB for the debugging use case in Section 5.4).
5 Use Cases
PHMon distinguishes itself from related work by its ﬂexibility,
versatile application domains, and its ease of adoption. To
demonstrate the versatility of PHMon, we present four use
cases: a shadow stack, a hardware-accelerated fuzzing engine,
an information leakage prevention mechanism, and hardware-
accelerated debugging.
5.1 Shadow Stack