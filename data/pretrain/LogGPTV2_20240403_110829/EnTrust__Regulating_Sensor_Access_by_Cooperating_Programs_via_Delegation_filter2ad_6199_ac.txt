Figure 6: Authorization requests prompted to users by
EnTrust upon delegation paths creation. Screenshots show-
ing benign (left) and attack (right) scenarios by the Basic
Camera app.
are evicted. We discuss utilizing such logs for revoking
mistaken authorizations and denials in Section 8.
5 Implementation
We implemented a prototype of the EnTrust authoriza-
tion system by modifying a recent release of the An-
droid OS (Android-7.1.1_r3) available via the Android
Open Source Project (AOSP).4 The choice of imple-
menting the EnTrust prototype for the Android OS was
guided by its open-source nature and its wide adoption.
EnTrust’s footprint is 170 SLOC in C for the Linux
kernel (bullhead 3.10), plus 380 SLOC in C, 830 SLOC
in C++, and 770 SLOC in Java for components in the
Android OS.
In this section, we provide the implementation details
for event scheduling and authorization management. In
Appendices C-F, we provide further implementation de-
tails regarding event authentication and mediation.
In Android, the Event Hub (part of the Input Man-
ager server) reads raw input events from the input de-
vice driver files (/dev/input/*) and delivers them to
the Input Reader. The Input Reader then formats the
raw data and creates input event data that is delivered
to the Input Dispatcher. The Input Dispatcher then
consults the Window Manager to identify the target
program based on the activity window currently dis-
played on the screen. Hence, we enhanced the Input
Dispatcher to hold - for the duration of a time window
- incoming input events for a target program should
there be already a delivered input event for such a pro-
gram that has not been processed, yet. For handoff
events, instead, the Binder is the single point of media-
tion for inter-process communication (IPC) between iso-
lated programs. It has the knowledge of all the pending
messages exchanged as well as knowledge of the identity
USENIX Association
28th USENIX Security Symposium    573
of the two communicating parties. Hence, we also en-
hanced the Binder to hold - for the duration of a time
window - incoming handoff events for a target program
should the program be already involved in another com-
munication with a third program.
EnTrust prompts users with authorization messages
for explicit authorizations of delegation paths, as shown
in Figure 6. Users are made aware of all the programs
cooperating in serving their requests as well as of the
entire delegation path. Also, users are prompted with
programs’ names and identity marks to ease their iden-
tification. EnTrust crosschecks developers’ signatures
and apps’ identity (i.e., names and logos) by pulling in-
formation from the official Google Play Store to prevent
identity spoofing. Also, EnTrust prevents programs
from creating windows that overlap the authorization
messages by leveraging the Android screen overlay pro-
tection mechanism. Finally, EnTrust prevents unautho-
rized modification of authorization messages by other
programs by using isolated per-window processes forked
from the Window Manager to implement a Compart-
mented Mode Workstation model [48].
6 EnTrust Evaluation
We investigated the following research questions:
(cid:73) To what degree is the EnTrust authorization assist-
ing users in avoiding confused deputy, Trojan horse, and
man-in-the-middle attacks? We performed a laboratory
study and found that EnTrust significantly increased
(from 47-67% improvement) the ability of participants
in avoiding attacks.
(cid:73) What is the decision overhead imposed by EnTrust
on users due to explicit authorization of constructed
delegation graphs? We performed a field study and
found that the number of decisions imposed on users
by EnTrust remained confined - in worst case scenarios
- to no more than 4 explicit authorizations per program.
(cid:73) Is EnTrust backward compatible with existing pro-
grams? How many operations from legitimate programs
are incorrectly blocked by EnTrust? We used a well-
known compatibility test suite to evaluate the compat-
ibility of EnTrust with 1,000 apps (selected among the
most popular apps on Google Play Store) and found
that EnTrust does not cause the failure of any program.
(cid:73) What is the performance overhead imposed by
EnTrust for delegation graph construction and enforce-
ment? We used a well-known software exerciser to mea-
sure the performance overhead imposed by EnTrust.
We found that EnTrust introduced a negligible overhead
(order of milliseconds) unlikely noticeable to users.
6.1 Study Preliminaries
We designed our user studies following suggested prac-
tices for human subject studies in security to avoid com-
mon pitfalls in conducting and writing about security
and privacy human subject research [49]. An Institu-
tional Review Board (IRB) approval was obtained from
our institution. The data collected did not contain Per-
sonally Identifiable Information (PII) and was securely
stored and accessible only to authorized researchers.
We recruited study participants via local mailing lists,
Craigslist, Twitter, and local groups on Facebook. We
compensated them with a $5 gift card. We excluded
acquaintances from participating in the studies to avoid
acquiescence bias. Before starting the study, partici-
pants had to sign our consent form and complete an en-
try survey containing demographic questions. We made
sure to get a wide diversity of subjects, both in terms
of age and experience with technology (details available
in Appendix A). For all the experiments, we configured
the test environment on LG Google Nexus 5X phones
running the Android 7.1 Nougat OS. We used a back-
ground service, automatically relaunched at boot time,
to log participants’ responses to system messages and
alerts, input events generated by participants while in-
teracting with the testing programs, as well as system
events and inter-process communications between pro-
grams. Furthermore, during the experiments, the re-
searchers took note of comments made by participants
to ease the analysis of user decision making.
6.2 Laboratory Study
We performed a laboratory study to evaluate the ef-
fectiveness of EnTrust in supporting users in avoid-
ing all the three attack vectors previously identified
in Section 2. We compared EnTrust with the first-
use authorization used in commercial systems. We
could not compare mechanisms proposed in related
work [9, 10], because they are unable to handle handoff
events. We divided participants into four groups, partic-
ipants in Group-FR-U and Group-FR-P interacted with
a stock Android OS implementing the first-use autho-
rization mechanism. Participants in Group-EN-U and
Group-EN-P interacted with a modified version of the
Android OS integrating the EnTrust authorization sys-
tem. To account for the priming effect, we avoided in-
fluencing subjects in Group-FR-U and Group-EN-U and
advertised the test as a generic “voice assistants testing”
study without mentioning security implications. On the
other hand, to assess the impact of priming, subjects
in Group-FR-P and Group-EN-P were informed that at-
tacks targeting sensors (e.g., camera, microphone, and
GPS receiver) were possible during the interaction with
programs involved in the experimental tasks, but with-
out specifying what program performed the attacks or
what attacks were performed.
Experimental Procedures: For our experiment, we
used a test assistant developed in our research lab called
Smart Assistant, which provides basic virtual assistant
functionality, such as voice search, message composi-
tion, and note keeping. However, Smart Assistant is
also designed to perform confused deputy attacks on
574    28th USENIX Security Symposium
USENIX Association
T
A
S
K
A
Directive
Ask Smart
Assistant
to “create a
note.”
Dictate a
voice note
to Notes.
For
example,
“remind me
to buy milk
on the way
home.”
Attack Scenario
Confused Deputy: Smart
Assistant opens the Notes
app and adds the specified
note, however, it also
requests the Screen
Capture service to capture
the content on the screen.
Credit card information and
passwords, visible in the
notes summary, are
captured and sent to a
remote server controlled by
the adversary.
T
A
S
K
B
Ask
Google
Assistant
to “take a
selfie.”
Trojan Horse: Google
Assistant activates the
Basic Camera app, which
is a Trojan app that takes a
selfie but also records a
short audio and the user’s
location. The collected data
is then sent to a remote
server controlled by the
adversary.
T
A
S
K
C
Ask
Google
Assistant
to “deposit
bank check.”
After
logging into
Mobile
Banking
with the
provided
credentials,
deposit the
provided
check.
Man-In-The-Middle:
Google Assistant launches
Basic Camera registered
for the voice intent “deposit
bank check”. The Basic
Camera runs in the
background, captures a
picture of the check and -
via a spoofed intent -
launches the Mobile
Banking app registered for
the voice intent “deposit
check.” The collected data
is sent to a remote server
controlled by the adversary.
First-Use (FR)
EnTrust (EN)
Group-FR-U
87% Attack Success
40% Prompted
27% Explicit Allows
Group-FR-P
53% Attack Success
47% Prompted
0% Explicit Allows
Group-EN-U
20% Attack Success
100% Prompted
20% Explicit Allows
Group-EN-P
0% Attack Success
100% Prompted
0% Explicit Allows
Group-FR-U
80% Attack Success
40% Prompted
20% Explicit Allows
Group-FR-P
47% Attack Success
53% Prompted
0% Explicit Allows
Group-EN-U
13% Attack Success
100% Prompted
13% Explicit Allows
Group-EN-P
0% Attack Success
100% Prompted
0% Explicit Allows
Group-FR-U
67% Attack Success
47% Prompted
13% Explicit Allows
Group-FR-P
53% Attack Success
47% Prompted
0% Explicit Allows
Group-EN-U
7% Attack Success
100% Prompted
7% Explicit Allows
Group-EN-P
0% Attack Success
100% Prompted
0% Explicit Allows
Table 1: Experimental tasks for the laboratory study, derived from the attack vectors described in Section 2. We report the
authorization messages shown to subjects in the four groups as well as the delegation graphs used by EnTrust to construct such
authorization messages. In the group names, the suffix U indicates unprimed subjects, whereas P indicates primed subjects.
Notice that, authorization requests prompted by EnTrust include programs’ identity marks (i.e., apps’ icon and unique id).
system services, such as the Screen Capture service.
We also used a test app, Basic Camera, developed in
our research lab. It provides basic camera functionality,
such as capturing pictures or videos and applying photo-
graphic filters. However, Basic Camera is also designed
to perform man-in-the-middle and Trojan horse attacks
for requests to capture photographic frames. Lastly, we
used a legitimate Mobile Banking app, from a major in-
ternational bank, available on Google Play Store. Apart
from the testing apps and voice assistant, the smart-
phone provided to participants had pre-installed both
the Google Assistant and the Android Camera app.
Our laboratory study was divided into two phases.
A preliminary phase during which no attacks were per-
formed. This phase enabled participants to familiar-
ize themselves with the provided smartphone, the pre-
installed apps and the voice assistants. This phase
avoided a “cold start” and approximated a more real-
istic scenario in which users have some experience us-
ing relevant apps and voice assistants. Furthermore,
this preliminary phase enabled capturing how malicious
programs may leverage pre-authorized operations in the
first-use approach to then perform operations not ex-
pected by the users; a malicious behavior that is in-
stead prevented by EnTrust via the construction of per-
delegation authorizations. The preliminary phase was
then followed by an attack phase, during which par-
ticipants interacted with programs performing attacks.
Participants were not made aware of the existence of the
two experimental phases nor of the difference between
the two phases.
All instructions regarding experimental tasks to be
performed were provided to participants in writing via
a handout at the beginning of each experimental task.
During the preliminary phase the participants per-
formed the following three tasks: (1) asked a voice as-
sistant to “take a screenshot;” (2) asked a voice assis-
tant to “record a memo;” and (3) used a camera app
to “record a video.” During the attack phase, instead,
the participants performed the three tasks described in
Table 1. In each phase, each participant was presented
with a different randomized order of the above tasks.
USENIX Association
28th USENIX Security Symposium    575
Experimental Results:
In total, 60 subjects partici-
pated in and completed our laboratory study. We ran-
domly assigned 15 participants to each group. In this
study, we did not observe denials of legitimate operations
for sensitive sensors for non-attack tasks performed dur-
ing the preliminary phase, but we discuss the need for
more study on preventing and resolving mistaken de-
nials in Section 8. Table 1 summarizes the results of the
three experimental tasks for the attack phase. Our focus
was to study the effectiveness of EnTrust in reducing the
success rate of attacks when compared to the first-use
approach. During the preliminary phase and the exper-
imental tasks, all the participants were prompted with
the corresponding authorization messages depending on
the group to which they were assigned,5 as reported in
Table 1. Prompted authorizations included legitimate
operations, see left side of Figure 6 for an example of
what a prompt for a legitimate operation looked like.