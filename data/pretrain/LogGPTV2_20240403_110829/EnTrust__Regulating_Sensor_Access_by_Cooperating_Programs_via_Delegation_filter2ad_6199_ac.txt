### Figure 6: Authorization Requests Prompted to Users by EnTrust upon Delegation Path Creation
Screenshots showing benign (left) and attack (right) scenarios by the Basic Camera app.

### Revocation of Mistaken Authorizations and Denials
We discuss utilizing system logs for revoking mistaken authorizations and denials in Section 8.

## 5. Implementation
We implemented a prototype of the EnTrust authorization system by modifying a recent release of the Android OS (Android-7.1.1_r3) available via the Android Open Source Project (AOSP). The choice to implement EnTrust on the Android OS was driven by its open-source nature and widespread adoption. The EnTrust implementation consists of:
- 170 SLOC in C for the Linux kernel (bullhead 3.10)
- 380 SLOC in C, 830 SLOC in C++, and 770 SLOC in Java for components within the Android OS.

In this section, we provide detailed information on event scheduling and authorization management. Further implementation details regarding event authentication and mediation are provided in Appendices C-F.

### Event Handling in Android
In Android, the Event Hub (part of the Input Manager server) reads raw input events from the input device driver files (`/dev/input/*`) and delivers them to the Input Reader. The Input Reader formats the raw data and creates input event data, which is then delivered to the Input Dispatcher. The Input Dispatcher consults the Window Manager to identify the target program based on the activity window currently displayed on the screen.

To enhance security, we modified the Input Dispatcher to hold incoming input events for a target program during a time window if there is already an unprocessed input event for that program. For inter-process communication (IPC) handoff events, the Binder acts as the single point of mediation. It has knowledge of all pending messages and the identities of the communicating parties. We also enhanced the Binder to hold incoming handoff events for a target program if it is already involved in another communication with a third program.

### User Authorization Messages
EnTrust prompts users with authorization messages for explicit authorizations of delegation paths, as shown in Figure 6. These messages make users aware of all programs involved in serving their requests and the entire delegation path. Additionally, EnTrust crosschecks developers' signatures and apps' identities (i.e., names and logos) by pulling information from the official Google Play Store to prevent identity spoofing. EnTrust leverages the Android screen overlay protection mechanism to prevent programs from creating windows that overlap the authorization messages. Finally, EnTrust uses isolated per-window processes forked from the Window Manager to implement a Compartmented Mode Workstation model, preventing unauthorized modification of authorization messages by other programs.

## 6. EnTrust Evaluation
We investigated the following research questions:

1. **Effectiveness in Avoiding Attacks**: To what degree does the EnTrust authorization assist users in avoiding confused deputy, Trojan horse, and man-in-the-middle attacks? Our laboratory study found that EnTrust significantly increased (by 47-67%) the ability of participants to avoid such attacks.
2. **Decision Overhead**: What is the decision overhead imposed by EnTrust on users due to explicit authorization of constructed delegation graphs? Our field study found that the number of decisions imposed on users by EnTrust remained limited, with no more than four explicit authorizations per program in worst-case scenarios.
3. **Backward Compatibility**: Is EnTrust backward compatible with existing programs? How many operations from legitimate programs are incorrectly blocked by EnTrust? Using a well-known compatibility test suite, we evaluated EnTrust with 1,000 popular apps from the Google Play Store and found that EnTrust did not cause any program failures.
4. **Performance Overhead**: What is the performance overhead imposed by EnTrust for delegation graph construction and enforcement? Using a well-known software exerciser, we measured the performance overhead and found that EnTrust introduced a negligible overhead (on the order of milliseconds), unlikely to be noticeable to users.

### 6.1 Study Preliminaries
Our user studies were designed following best practices for human subject studies in security to avoid common pitfalls. An Institutional Review Board (IRB) approval was obtained, and the collected data did not contain Personally Identifiable Information (PII). Data was securely stored and accessible only to authorized researchers.

Participants were recruited via local mailing lists, Craigslist, Twitter, and Facebook groups, and compensated with a $5 gift card. Acquaintances were excluded to avoid acquiescence bias. Before starting the study, participants signed a consent form and completed a demographic survey. We ensured a diverse group of subjects in terms of age and technology experience (details in Appendix A). The test environment was configured on LG Google Nexus 5X phones running Android 7.1 Nougat. A background service, automatically relaunched at boot time, logged participants' responses, input events, and system events. Researchers also took notes on participants' comments to aid in the analysis of user decision-making.

### 6.2 Laboratory Study
We conducted a laboratory study to evaluate EnTrust's effectiveness in helping users avoid the three attack vectors identified in Section 2. We compared EnTrust with the first-use authorization used in commercial systems. Participants were divided into four groups:
- **Group-FR-U** and **Group-FR-P**: Interacted with a stock Android OS implementing the first-use authorization mechanism.
- **Group-EN-U** and **Group-EN-P**: Interacted with a modified version of the Android OS integrating the EnTrust authorization system.

To account for the priming effect, Group-FR-U and Group-EN-U were not informed about security implications, while Group-FR-P and Group-EN-P were made aware of potential sensor attacks.

#### Experimental Procedures
We used a test assistant called Smart Assistant, which provides basic virtual assistant functionality but can also perform confused deputy attacks. We also used a test app, Basic Camera, which provides camera functionality but can perform man-in-the-middle and Trojan horse attacks. Lastly, we used a legitimate Mobile Banking app from a major international bank.

The laboratory study was divided into two phases:
1. **Preliminary Phase**: No attacks were performed to familiarize participants with the smartphone, pre-installed apps, and voice assistants.
2. **Attack Phase**: Participants interacted with programs performing attacks.

Participants were not informed about the two phases or their differences. Instructions for each task were provided in writing. During the preliminary phase, participants performed tasks such as taking a screenshot, recording a memo, and using a camera app to record a video. During the attack phase, participants performed the tasks described in Table 1.

#### Experimental Results
Sixty subjects participated in and completed our laboratory study, with 15 participants randomly assigned to each group. Table 1 summarizes the results of the three experimental tasks for the attack phase. Our focus was to study EnTrust's effectiveness in reducing the success rate of attacks compared to the first-use approach. All participants were prompted with corresponding authorization messages depending on their group, as reported in Table 1. Prompted authorizations included legitimate operations, as shown in the left side of Figure 6.