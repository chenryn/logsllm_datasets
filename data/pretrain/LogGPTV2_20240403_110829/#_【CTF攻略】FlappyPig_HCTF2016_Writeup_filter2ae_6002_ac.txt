    from Crypto.Cipher import DES
    key = "abcdefg1"
    def pi_b(x, m):
       '''
       m:
          1: encrypt
          0: decrypt
       '''
       enc = DES.new(key)
       if m:
          method = enc.encrypt
       else:
          method = enc.decrypt
       s = long_to_bytes(x)
       sp = [s[a:a+8] for a in xrange(0, len(s), 8)]
       r = ""
       for a in sp:
          r += method(a)
       return bytes_to_long(r)
    def num2str(num):
        tmp=hex(num)[2:].replace("L","")
        if len(tmp) % 2 == 0:
            return tmp.decode("hex")
        else:
            return ("0"+tmp).decode("hex")
    n=0xa3f7fc8a9cdbf7029c529178d96cbf2228e36fbd704a7d383695f6e8eb54cfd58f2c13c55a5d0dae2be170865f92624c183e20d31e2d8c5a9b1481d32fd19f4e4f90fc4cea43238cd8c613bda744812361d5f4fdee12721a7e464fad69bdb5a8c5b687e2ae2f203cc620a096ad11ecf2bf155bf4f1c10dff7384a4a566965d6257a6dd588d223985c042947ee5ea5ff003283cb6bf89771901b2f1b1c890895861a1461b22639c1635abc50779fe5163eec1ffff9733bca4c33f593d4dfecfdca03d4cc2e220b2f323d1c3eec12889a23d1b0d5c00ae8070cb2d09a972ab23d0b4d70824335569eaa51539c3557b14972bcc1dd794e0ff997bb032acce40e567L
    e=0x10001
    e2=0x76b3
    c=0x48c22e2c71354fc7b6b9237e1e14563c9144243ffbef424c39fd1ee293fcf6569d0edc0ad807deaf1d47b34bcad0e7aeff5cf6efa39445773c1743b31ee4c70cff62f5906a14efdc74304258950f1dddb09ffac8d683d7d9ab436430bd4ff643bb51767632c002c97d75559b5ac4dda6cc1c1426b0d992b0783f6b7f521a1fb96ccd41078fde1d76e0509d7828fc50673a668e99889ef729d68260b2c458356fcbcdb0af21da831eeb06c98a48dc235b1d46e6451b4d22a2668e5b429534cfedbd1dbdb8ace6323844c9a52eb9dc8dfe9d26268f180d8e5f27d5fc7ee7e0022a4879cc68a0c9a46129bd25eac5758088a6cdc33d9458f72b381d931c212be51L
    u=int(bin(n)[2:-1][128:128+640],2)
    p4=pi_b(u,0)
    print bin(p4)
    temp
    temp2="1"*384
    print len(temp+temp2)
    qbar =int(temp+temp2,2)
    cha=15483423385776591648944200564143931994102240603631297038751816607837858072316729972685015604287550574333116738645234
    q=qbar-cha
    p=n / q
    import primefac
    d1=primefac.modinv(e,(p-1)*(q-1)) % ((p-1)*(q-1))
    d2=primefac.modinv(e2,(p-1)*(q-1)) % ((p-1)*(q-1))
    print d1
    print d2
    t1=pow(c,d1,n)
    t2=pow(c,d2,n)
    print num2str(t2)
**Crypto So Amazing**
首先t是n的前1024bit，yu是t的前半部分，yl是t的后半部分，通过如下方法可以计算出spub和spriv：
    t=int(bin(n)[2:][0:1024],2)
    yu=int(bin(t)[2:][0:512],2)
    yl=int(bin(t)[2:][512:],2)
    xu=F_hash(yl)^yu
    xl=H_hash(xu)^yl
    spub=int(bin(xl)[len(bin(xl))-256:len(bin(xl))],2)
    spriv=pow(spub,b,P)
    print spriv
spriv作为种子进行了若干次随机生成了p，不知道随机的次数，后面本以为和2差不多，但是第一次是被sage和python的random的序列不一样坑了。解决了这个问题后，发现还是解不出来。后爆出一个hint，给了一个不够2/3bit的泄露也可以解的脚本，而后跑出。
    from rrr import get_p4
    n = 0xf7a8a487bc5c8127ac30cfbfc08e042580f359edce3db416b8a9abcb0e8dcac5404bb0eea3076966a78bb8e726e6fea79d305cc7c2cddb3dd2578a64b5591df1c9716878f35f1967398861cb368886b60c6d0c2984be3ead8dcdd80d68bb094805068b5d157c16d2b56cf0c3f06797b07bf3a7ab2a5099762958feaf72a212a63c74a4fb7da4092e6a91e72bf74ee961b995545891290c50cb28151b540efdedef9d4cc1c104758050c21dda8be8310fc7e005a08cedbcc8500fe0f9fdaa044e7cb07387060358add1d82521b5f8697b6a8ca2bd19a363bae7558e94404a1c4b82ee98878f9dff0e21030e020c698778aa645001f4c7726d3ac04720295975c9L
    pbits = 1024
    g_p = get_p4()
    while True:
        p4 = g_p.next()
           #p4 = 0x81a722c9fc2b2ed061fdab737e3893506eae71ca6415fce14c0f9a45f8e2300711119fa0a5135a053e654fead010b96e987841e47db586a55e3d4494613aa0cc4e4ab59fc6a958b5
        kbits = pbits - 576
        p4 = p4  = PolynomialRing(Zmod(n))
        f = x + p4
        x0 = f.small_roots(X=2^kbits, beta=0.4)
        if len(x0) == 0:
            continue
        print "x: %s" %hex(int(x0[0]))
        p = p4+x0[0]
        print "p: ", hex(int(p))
        assert n % p == 0
        q = n/int(p)
        print "q: ", hex(int(q))
        print "p4: ", hex(p4)
        break
生成p直接计算：
    from Crypto.Util.number import size, getPrime, long_to_bytes, bytes_to_long, isPrime, getRandomNBitInteger
    from hashlib import sha512
    def int_add(x1, x2):
       return bytes_to_long(long_to_bytes(x1) + long_to_bytes(x2))
    def H_hash(x):
       h = sha512(long_to_bytes(x)).hexdigest()
       return int(h, 16)
    def F_hash(x):
       h = sha512(long_to_bytes(x/4)).hexdigest()
       return int(h, 16)
    P=0xab72f3a7d42573afe7a71c23dbe3cf8feb7d8b9026a9b1c6174a0c598ceb88a1L
    b=9718272430951996082
    n= 0xf7a8a487bc5c8127ac30cfbfc08e042580f359edce3db416b8a9abcb0e8dcac5404bb0eea3076966a78bb8e726e6fea79d305cc7c2cddb3dd2578a64b5591df1c9716878f35f1967398861cb368886b60c6d0c2984be3ead8dcdd80d68bb094805068b5d157c16d2b56cf0c3f06797b07bf3a7ab2a5099762958feaf72a212a63c74a4fb7da4092e6a91e72bf74ee961b995545891290c50cb28151b540efdedef9d4cc1c104758050c21dda8be8310fc7e005a08cedbcc8500fe0f9fdaa044e7cb07387060358add1d82521b5f8697b6a8ca2bd19a363bae7558e94404a1c4b82ee98878f9dff0e21030e020c698778aa645001f4c7726d3ac04720295975c9L
    spriv=76515803399948578070392316249460231617205640228540294074078216016927174232385
    t = bytes_to_long(long_to_bytes(n)[:128])
    yu = bytes_to_long(long_to_bytes(t)[:64])
    yl = bytes_to_long(long_to_bytes(t)[64:])
    xu = F_hash(yl)^yu
    xl = H_hash(xu)^yl
    s = int_add(xu, xl)
    print hex(s)
    spub = s&(2**256-1)
    print hex(spub)
    spriv = pow(spub, b, P)
    print spriv
    p=0x81a722c9fc2b2ed061fdab737e3893506eae71ca6415fce14c0f9a45f8e2300711119fa0a5135a053e654fead010b96e987841e47db586a55e3d4494613aa0cc4e4ab59fc6a958b59b825931b9b5cab0bfa07c6b0c4ac673060530d5ad8fa04f63c9f026f32c243c9a67a0fd223783dce9ad2e6a0524d559ed0c905c00323db5L
    q=n/p
    import primefac
    e=0x4177
    d=primefac.modinv(e,(p-1)*(q-1)) % ((p-1)*(q-1))
    c=0xae580a97fec8c445276f6eeb54f4a8d0cab61eaa78a9d5824e61c13898e2a7f78bda4432e863b0b38b84564b62b0c557822c1b997a8a11c85ecd19b9a378e285c270af791750feb2b1954b5254d4521aaf98094e28f61ece61059802162f3af63c9ea9caa02710b4cb00ad074a4029537699dde481a8055f33a17c7055f02334b977b7db508f96c483a8a5dcd424d5cb6b583c6772ae45c99c9779cddd8bd9480f2aa50661c8fdf1b4f96d09e4ad058faeb354a522be5fc8a7014f149c8382e30ff5e844f958ed9b91292cedd5f82a375788c87d363517c1db11735a5d13bfea18890e9cd289880a659d70bee79525e0a368abf2cf9fdc9d3a692098d09b7a96L
    m=pow(c,d,n)
    def num2str(num):
        tmp=hex(num)[2:].replace("L","")
        if len(tmp) % 2 == 0:
            return tmp.decode("hex")
        else:
            return ("0"+tmp).decode("hex")
    print num2str(m)
**最正常的逆向**
一道很直接的逆向题，按照程序的逻辑一步一步来：
1.首先限制输入的长度为26，然后用这个长度去解码了一个函数。
2.用一个简单的xor判断前四位：得到hctf。之后再次解码函数，进行验证。
3.之后进行下一次验证，首先获得大括号内的前四个字符，将其按照aci分割成两个部分
3.1然后会根据之前的hctf初始化一个table。
3.2用该表参与运算后，将结果和xor_result =
0x8A012F269090095DLL;比较。最后可以确定结果为The_。然后继续解码函数进入下一个验证。
4.接下来是一个逻辑推到的过程，循环两次每一次将三个字节的key分解成四个字节，最后和八个字节比较，正确的结果是result_ =
5709797187881621056LL;可以推出这个六个字节为
Basic_，然后进入下一层验证
5.下一个判断很简单，分割重组异或和结果比较，可以推到出六字节0f_RE_，然后继续下一个判断函数。
6.最后一步是明码比较。
7.得到最后的key为：hctf{The_Basic_0f_RE_0A1e}
**48小时学会CPP**
CPP混淆加密
    templateA
    {
    c = enum{c=???};
    }
然后调用A::c这种模式可以改成
    X A(int x,int y)
    {
    return c=???;
    }
这种函数，方便逆向；
逆向后发现；
V0和V1必须返回为1，接下来的校验才会进行，否则直接就是错误；
Cfun10c函数是检测FLAG长度的，要使其返回1，必须是FLAG长度为27；
Cfun21函数用来校验FLAG[0]~FLAG[4]以及FLAG[25]
    FLAG[a]^48==cArr1c[a];
逆向得到hctf{********************
这个过程逆向后得到}
hctf{********************
cfun20c(a,b)的意思就是
如果a==0
这个可以得到FLAG[5]=S
接下来的FLAG[6]到FLAG[24]的规则一样(i>=1)
    If(i%2==1)
    {
    X=(FLAG[i+5]-((i-1)*i/2)^106)
    X高低4位互换
    X=X^cArr2c[i-1]按位异或
    Return X== cArr2c[i]
    }
    If(i%2==0)
    {
    X=(FLAG[i+5]+((i-1)*i/2)^106)
    X高低4位互换
    X=X^cArr2c[i-1]按位异或
    Return X== cArr2c[i]
    }
PAYLOAD如下
FLAG是
hctf{S0_Ea5y_Cpp_T3mp1at3}
    #include 
    #include 
    using namespace std;
    vector FLAG(27,27);  //input the flag !!!
    int cFun1c(int a, int b)
    {
    return (a == b);
    };
    int cfun2c(int a, int b)
    {
    return (a ^ b);
    };
    int cfun3c(int b)
    {
    return  FLAG[b];