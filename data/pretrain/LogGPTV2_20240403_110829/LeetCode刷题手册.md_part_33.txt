if nums == nil Il len(nums) = hi { 
for (m / exp) > O { // Go through all digits from LSB to MSB
R := 10 // 10 digits 
for i := l; i  res {
return 
a[j], a[i] = a[i], a[j]
i++ 
res = nums[i+l] - nums[i] 
---
## Page 304
Example:
Note:
target, where index1 must be less than index2.
The function twoSum should return indices of the two numbers such that they add up to the
they add up to a specific target number.
Given an array of integers that is already sorted in ascending order, find two numbers such that 
题目
167. Two Sum Il - Input array is sorted
● Your returned answers (both index1 and index2) are not zero-based. 
same element twice.
return maxvalue
for i := l; i = O; i-- 
for i := l; i  AA
26 -> Z
3->C
2 -> B
1 -> A
-> AB
---
## Page 307
Example 1: 
:Kee aun u! asixa shemie quawala Aogew aun pue Adwa-uou s! Kee aun eun aunsse Kew no
 appears more than I n/2 I times. 
Given an array of size n, find the majority element. The majority element is the element that
题目
169. Majority Element
代码
解题思路
Output: 3 
Input: [3,2,3]
·简单题。这一题就类似短除法的计算过程。以26 进制的字母编码。按照短除法先除，然后余数逆
func convertToTitle(n int) string 
package leetcode
·给定一个正整数，返回它在Excel表中的对应的列名称
3 ->C
2->
20
P
for n > O{ 
result := []byte{}
return string(result)
序输出即可。
->AA
->
result[i], result[j] = result[j], result[i] 
-> AB
n = (n - 1) / 26 
result = append(result, 
A
'A'+byte((n-1)%26))
---
## Page 308
代码
解题思路
假设数组是非空的，并且给定的数组总是存在众数。
给定一个大小为 n的数组，找到其中的众数。众数是指在数组中出现次数大于n/2”的元素。你可以
题目大意
 Example 2:
·这一题利用的算法是Boyer-Moore Majority Vote
·题目要求找出数组中出现次数大于I n/2”次的数。要求空间复杂度为 O(1)。简单题。
//解法二时间复杂度0(n）空间复杂度0(n)
//解法－时间复杂度0(n）空间复杂度0(1)
Output:2
Input: [2,2,1,1,1,2,2]
func majorityElementl(nums []int) int
func majorityElement(nums []int) int 
package leetcode 
m := make(map[int]int) 
return res
for i := O; i len(nums)/2 {
m[v]++ 
if count == O { 
} else { 
return v 
} else{
if nums[i] == res {
count--
 count++
0
---
## Page 309
代码
解题思路
给定一个 Excel表格中的列名称，返回其相应的列序号。
题目大意
 Example 3:
 Example 2: 
Example 1: 
Forexample:
Given a column title as appear in an Excel sheet, return its corresponding column number.
题目
171. Excel Sheet Column Number
·简单题。这一题是第168题的逆序题。按照 26 进制还原成十进制即可。
·给出Excel中列的名称，输出其对应的列序号。
Output: 701
Input: "zY"
output: 28
Input: "AB"
Output: 1
Input: "A"
AB -> 28
AA -> 27
Z -> 26
C -> 3
---
## Page 310
解题思路
给定一个整数 n，返回 n! 结果尾数中零的数量。说明:你算法的时间复杂度应为 O(log n)。
题目大意
Note: Your solution should be in logarithmic time complexity.
 Example 2: 
Example 1: 
 Given an integer n, return the number of trailing zeroes in n!.
题目
172. Factorial Trailing Zeroes
●
·给出一个数n，要求n！末尾O的个数。
Explanation: 5! = 120, one trailing zero.
Output: 1 
Input: 5
Explanation: 3! = 6, no trailing zero.
Output:0
Input: 3
func titleToNumber(s string) int {
package leetcode
质因数 5，5~9 的阶乘里有1个质因数5，10~14的阶乘里有 2个质因数 5，依此类推。所以 0 的
少个2和5（分解质因数），最后结果即2的个数和5的个数取较小值。每两个数字就会多一个
这是一道数学题。计算N的阶乘有多少个后缀0，即计算N!里有多少个10，也是计算N!里有多
return res
for i := O; i < len(s); i++ {
val, res := O, 0 
个数即为min（阶乘中 5 的个数和 2 的个数）。
质因数2，而每五个数字才多一个质因数5。每5个数字就会多一个质因数5。0~4 的阶乘里没有
res = res*26 + val 
val = int(s[i] - 'A'+ 1)
---
## Page 311
Example:
 Calling nextO will return the next smallest number in the BST.
root node of a BST.
Implement an iterator over a binary search tree (BST). Your iterator will be initialized with the 
题目
173. Binary Search Tree Iterator
代码
func trailingzeroes(n int) int {
package leetcode 
·N!有多少个后缀O，即N!有多少个质因数5。N!有多少个质因数5，即N 可以划分成多少组 5个
return n/5 + trailingzeroes(n/5)
O(logN)。
数字一组，加上划分成多少组25个数字一组，加上划分多少组成125个数字一组，等等。即res
 return o 
C
5
---
## Page 312
代码
解题思路
树中的下一个最小的数。
实现一个二叉搜索树迭代器。你将使用二叉搜索树的根节点初始化迭代器。调用 next() 将返回二叉搜索
题目大意
Note:
·用优先队列解决即可
import "container/heap"
●next() and hasNext() should run in average O(1) time and uses O(h) memory, where h is 
type BSTIterator struct {
// BSTIterator define
package leetcode
iterator.hasNext(); // return false
iterator.next();
iterator.hasNext();/
iterator.next();
iterator.hasNext(); 
iterator.next(); 
iterator.hasNext(); /
iterator.next();
iterator.next();
BSTIterator iterator = new BSTIterator(root);
count int 
pq  
 smallest number in the BST when next() is called.
 You may assume that next() call will always be valid, that is, there will be at least a next 
 type TreeNode struct { 
 Definition for a binary tree node.
the height of the tree.
PriorityQueueofInt
Right *TreeNode
Val int
Left *TreeNode
// return
//
二
//return
// return 3
return
return
 return true
 return
return true
20
true
15 
9
7
---
## Page 313
func (pq *PriorityQueueofInt) Push(x interface{}) {
func (pq PriorityQueueofInt) Swap(i,j int) {
func (pq PriorityQueueofInt) Less(i, j int) bool &
func (pq PriorityQueueofInt) Len() int {
type PriorityQueueofInt []int 
func (this *BSTIterator) HasNext(） bool { 
func (this *BSTIterator) Next() int {
/** @return the next smallest number */
func Constructor173(root 
// Constructor173 define
 pq[i]， pq[j] = pq[j]， pq[i] 
 return pq[i]< pq[j] 
return len(pq)
 return this.count != 0
*pq = append(*pq, item)
item := x.(int) 
return heap.Pop(&this.pq).(int)
this.count--
 param_2 := obj.HasNext();
return bs 
bs := BSTIterator[pq: pq, count: len(result)}
postorder(root, &result)
result, pq := []int{}, PriorityQueueofInt{} 
param_l := obj.Next();
obj := Constructor(root);
heap.Push(&pq, v)
*TreeNode） BSTIterator {
---
## Page 314
Note:
For example, given the dungeon below, the initial health of the knight must be at least 7 if he
rescue the princess.
Write a function to determine the knight's minimum initial health so that he is able to
downward in each step.
In order to reach the princess as quickly as possible, the knight decides to move only rightward or
knight's health (positive integers).
entering these rooms; other rooms are either empty (0's) or contain magic orbs that increase the
Some of the rooms are guarded by demons,
point drops to O or below, he dies immediately.
The knight has an initial health point represented by a positive integer. If at any point his health 
initially positioned in the top-left room and must fight his way through the dungeon to rescue the 
sem (y) suajuy que!en ano pa az e u! ano piel swoou N x W jo sis!suos uoasunp aui uoaunp
The demons had captured the princess (P) and imprisoned her in the bottom-right corner of a
174. Dungeon Game
orincess.
题
 The knight's health has no upper bound.
目
 Any room can contain threats or power-ups, even the first room the knight enters and the
*pq =(*pq)[:n-1]
item := (*pq)[n-1]
n := len(*pq) 
bottom-right room where the princess is imprisoned.
return item
-2 (K)
0
SO
-10
the
knight 
-5 (P)
loses
3
 health (negative integers) upon 
---
## Page 315
解题思路
说明：
主所需的最低初始健康点数。