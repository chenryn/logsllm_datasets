4.1Inter-Thread Communication 
Inter-thread communication and coordination is accomplished with various mechanisms. Four 
methods could be identified: 
Event-driven thread/process-synchronization 
Message-driven thread communication 
I/O completion port for dispatching of TCP/UDP messages 
Critical sections for management of concurrency 
Events in Windows are a synchronization mechanism that works on both levels, process- and thread-
level. They can take two states, signaled and non-signaled. When an event is set its state is raised 
into signaled state. A process or thread that is waiting for this exact object will recognize and start 
execution. The event will then be reset, automatically or manually.  
Windows events, as mentioned in the last chapter, are mainly used for control of the application as a 
whole. Besides, thread 1, later called fileinfector, is also triggered by an event.  
Windows Messages are usually the standard mechanism for controlling Windows desktop 
applications and windows. Communication is handled in message queues, one thread posts a 
message to another ones message queue, the other thread fetches the message from its queue and 
starts execution. The analyzed sample uses Windows messages for communication of its working 
threads, which handle the communication with the C&C.   
I/O Completion Port (IOCP) is an API for handling multiple asynchronous input/output operations. 
This is necessary when multiple threads handle the input or output of one object, like in this case a 
socket. In fact, the analyzed bot seems to handle the incoming messages from the C&C server using 
I/O completion port. The intention behind this is perhaps to handle more than one server command 
at a time. With IOCP the operations of receiving commands and execution of according actions can 
be separated. It would even possible for the malware to operate multiple sockets and process input 
of various control servers. 
18 | P a g e  
For protection of memory that is eventually accessed by more than one thread the mechanism of 
critical sections is implemented. This is the most important mechanism for interchanging data 
between the malware’s threads, as possibilities to pass data by Windows messages is limited. Critical 
sections are initialized to protect access around I/O completion data structures, time event data 
structures and the C&C domain character string. 
4.2 Details about Started Threads 
When the malware startup was successful it runs on 9 threads in total, of which one is thread0, one 
the file infecting thread, two seem to control reception of data from the C&C using I/O completion 
port mechanism and the remaining four implement functionality for windows message passing. 
Thereof three are created with an attached time callback thread each. The fourth is actually one of 
the time callback functions, which runs in its own thread.  
The applications threads, in order of their startup (not creation), naming intends to sum up the main 
purpose of the thread: 
0. thread0 
initial application code 
1. timecallback_ptmessage  
offset 422426 
2. fileinfector 
offset 411AA0 
3. get_queued_compstatus 
offset 42B43A 
4. getmessage_loop 
offset 42248B 
5. getmessage_loop 
offset 42248B 
6. recv_post_queued_compstatus 
offset 42B0C5 
7. cnc_cmd_switching 
offset 4211E7 
8. getmessage_loop 
offset 42248B 
Furthermore, the malware is capable of starting several more threads, which are able to receive 
either TCP or UDP data or handle GDI functionality (MS Graphics Device Interface). 
0 – thread0 
The initial thread hangs mostly at a WaitFormultipleObjects instruction, waiting for one of four 
events to be set. These are two named events, event2 and event3 as mentioned before, and two 
nameless events. Setting of event2 or one of the unnamed events will cause the application to 
terminate. Setting of event3 tells the application to recreate its fingerprint file, and when setting the 
second unnamed event an unspecified event will be reset and thread0 continues to wait.  
Thread0 is in charge of controlling the entire process, and terminating it if told so. 
1 – timecallback_ptmessage  
Timed callbacks are implemented using the WinMM library (Windows Multimedia Library) for 
creating timers, which call a specified callback function. The timing event is configured with either 10, 
1000 or 5000 milliseconds. In the analyzed code time callbacks are always generated along with an 
associated thread for getmessage_loop.  
19 | P a g e  
The malware uses for every time callback the same function. This function implements a loop for 
posting messages to thread message queues, actually with message identifier 401. 401 is an ID for 
user defined messages. It is assumed that the purpose of this constellation is to post timed 
notifications to a queue, which are dispatched by an associated instance of getmessage_loop. 
2 – fileinfector 
The fileinfector thread is the one which is granted most CPU time, when the other threads are 
sleeping. It is driven by a Windows event and its purpose is to replace the images of executables on 
disk with its own malicious code. Details about this thread are to be found in section 5. 
3 – get_queued_compstatus 
This thread waits for a queued completion status message to be posted to the I/O completion ports 
queue. At thread creation the thread is passed the only I/O completion object created by the 
application. It is the same object thread 6, recv_post_queued_compstatus is feeding. 
The received data is processed, maybe even deobfuscated/decrypted and stored in an object that is 
protected via a critical section. Eventually some networking routines are called that send a message 
back to the C&C. 
4, 5 & 8 – getmessage_loop  
The malware starts three threads with the same entry point to getmessage_loop function. These are 
always created and associated with a timing event callback, which posts thread messages. The 
getmessage_loop function just executes its body when the received message is 401, just as the time 
callback function would send it.  
The functions body is basically a call to a single, virtual function. This virtual function is a perfect 
example for difficulties of reversing polymorphic functions. The same function call can invoke two 
different functions, because of being referenced indirectly via vftable of an object.  
The first virtual function to be called is a routine to resolve the hardcoded domain  
ns.dns3-domain.com to a valid network address via DNS and to send an initial message to the C&C. 
This message contains a GUID for identification purposes, requested from the system. 
The second function can either also send a message over the network, or post another thread 
message. Recipient is thread 7, named cnc_cmd_switching, as this is the only other thread waiting for 
thread messages, besides the getmessage_loop threads. 
At the time this report was written it is not perfectly clear what the purpose of multiple 
getmessage_loop threads is. Possibilities are either load balancing or confusion of the analyst. 
Starting multiple threads with the same functionality would only make sense, if one single thread 
would be overburdened with the work to process. It is assumed that the multi-threaded design is laid 
out for load balanced processing of C&C instructions, so multiple threads with the same purpose 
could make sense.  
20 | P a g e  
6 - recv_post_queued_compstatus 
This thread is settled on the input side of the I/O completion port, defined before along with the 
get_queued_compstatus thread. The threads function itself is a loop for receiving incoming UDP 
datagrams and passing them via PostQueuedCompletionStatus to the I/O completion object. From 
there they will be fetched by the get_queued_compstatus thread.  
7 – cnc_cmd_switching 
The command getmessage() is only called twice in all the code, the getmessage_loop routine and in 
the cnc_cmd_switching routine. It will also just process a received message if it is of type 401. Main 
purpose of this thread is to instantiate an object for C&C command processing and to call the 
according method. The C&C command is presumably passed via a critical section data structure, and 
not via thread messages.  
4.3 Thread Workflow Diagram 
The following diagram is just a simplified sketch on how the workflow in between the multiple 
threads is most likely designed; it does not lay claim to be complete. There definitely exist more 
threads the malware can possibly start, like two threads for recv/recvfrom functionality, but these 
are not counted in to the core model. 
Illustration 8 – Thread Workflow Diagram 
21 | P a g e  
5. File Infection 
The first thread the malware creates is the file infection routine. Basic 
functionality of this routine is to enumerate running processes and 
entries in SOFTWARE\Microsoft\Windows\CurrentVersion\Run to 
select a set of executables and replace their image on disk with the 
malware itself. It does this by setting the hidden attribute on the 
original file and removing the extension, while creating a copy of itself 
with minor modifications and writing it under the filename of the 
“infected” file back to disk. It also steals the icon of the former original 
to look non-suspicious. As mentioned before when describing the 
malware startup, if the copied malware ever gets loaded, it first starts 
the original executable before it eventually reaches the START_MW 
function.  
The IDA Pro Graph can actually be used for explaining the different 
steps of the file infection procedure. The three marking colors indicate 
what regions are considered to be initial setup (yellow), infection 
routine (blue) and re-infection loop (green). 
5.1 Initial Infection 
5.1.1 Check for Chinese AV-Products 
When entering the main function of the file infection routine a method is called to check if one or 
both of two processes is found within a snapshot of all running processes: ZhuDongFangYu.exe from 
Qihoo360 and RavMond.exe from Rising Antivirus, which are both processes of Chinese anti-malware 
products. If detected, the whole thread terminates immediately.  
As mentioned in the next section these are probably applications that the malware developer ran on 
his own system and therefore does not want to infect files on systems running Qihoo360 or Rising. 
5.1.2 Module Name Filtering 
As a setup for file infection the malware first has to select suitable executables. To achieve this it 
creates a list of two sorts; first all executables that have an entry in 
SOFTWARE\Microsoft\Windows\CurrentVersion\Run, second all executables which are present in a 
snapshot of currently running processes.  
The applications from the startup registry key are only added if they have the “.exe”-ending.  
The modules listed in the process snapshot are filtered by a list of application and folder names, 
which are apparently excluded from infection. For filtering a number of strings is generated at 
22 | P a g e  
runtime and matched against either the folder name or are searched for in the whole path. Some of 
the filter strings are quite interesting as they seem to give some insight on what applications the 
malware author is using on this own system. Most likely these applications are filtered to avoid 
infection on his own system. The most interesting ones are listed below: 
Directory should not be desktop or temp 
Pathname should not contain either of the following strings 
:\windows 
netthief 
exebinder 
\qq 
visual studio 
microsoft office\ 
\thunder\ 
\360 
\aliwangwang\ 
\win zip\ 
\winrar\ 
\globallink\game\ 
\qqdoctor\ 
\rising\ 
\aliim.exe 
\avira\ 
\world of warcraft\ 
Actually the term netthief can be connected to another piece of malware, written by a Chinese 
author. It is called Netthief RAT (Remote Access Trojan) Some research also revealed that the domain 
used by the analyzed sample is connected to Netthief.  
Further reasons for exclusion of a process from the final list are: 
The filename (without the path) of the running process is equal to the malwares filename 
The paths second and third letter are not equal to “:\”, as it is for example with the paths of 
Windows system services like smss.exe or csrss.exe, starting with \systemroot- or ??\-prefix 
The last four characters of the image name do not equal “.exe” 
The running executable in question is smaller than 10KB 
If the module name passes all filtering measures it is added to a list of executables that will be 
infected by the malware. 
5.1.3 The Infection Routine 
For actual infection of an executable a copy of the image saved at initialization phase is prepared and 
modified. 
23 | P a g e  
1. Some modifications are made to the image at offset 117A, which are unique to every copy of 
the malware. Likely, to give the copy a unique identifier or some seed values for obfuscation 
algorithms embedded in the malicious code.  
2. The executable to infect is searched for a resource section, based on the string “.rsrc”. If .rsrc 
is found it is searched for an icon in the right size and shape, which can be copied to the 
malware image. By copying the icon of the file to the malicious image in memory will make 
the malware copy look like the genuine file. The changed file size and creation time stamp 
though could tell there is something wrong with that file.   
3. Only if copying the icon was successful and the original executable has not yet been replaced 
by a malware copy, the actual replacement routine is initiated. Therefore the original is 
renamed to remove the .exe-extension and its file attributes are altered to set the hidden 
flag. Then, finally, a file is created with path and filename of the file to infect and the 
customized malware copy is written to this file handle. 
5.2 The Re-Infection Loop  
After initial infection the thread enters its final loop, where it periodically checks if the list of infected 
images has grown, specifically if new processes have started which follow the described 
preconditions. The routine maintains a list of infected modules. When a new process appears that’s 
not yet on the list it is added and  execution switches to a loop, identical to the initial infection loop. 
There, if not already infected, the image of the started process, respectively images if there was 
more than one candidate started, is eventually replaced with a malware copy.  
After calling the infect method on every recently listed module the routine switches back into looping 
process snapshot after snapshot, until another candidate appears. 
24 | P a g e  
6. Network Communication 