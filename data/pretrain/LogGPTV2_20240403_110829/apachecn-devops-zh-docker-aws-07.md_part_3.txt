              --resource ApplicationAutoscaling \
              --region ${AWS::Region}
  ...
  ...
```
Configuring CloudFormation Init Metadata
在前面的示例中，您可以看到 CloudFormation Init 元数据定义了一个配置集，该配置集包含一个`commands`指令，该指令定义了几个命令对象:
*   `05_public_volume` -在`/data`挂载下创建一个名为`public`的文件夹，该文件夹在我们的自定义 ECS AMI 中配置。我们需要此路径，因为我们的应用需要一个公共卷，静态文件将位于该卷中，并且我们的应用以非根用户身份运行。稍后，我们将创建一个引用此路径的 Docker 卷，请注意，由于 ECS 目前仅支持绑定装载，因此需要这种在底层 Docker 主机上预创建文件夹的方法(更多详细信息，请参见[https://github . com/AWS/Amazon-ECS-agent/issues/1123 # issuecomment-405063273](https://github.com/aws/amazon-ecs-agent/issues/1123#issuecomment-405063273))。
*   `06_public_volume_permissions` -这将在上一个命令中创建的`/data/public`文件夹的所有权更改为由 ID 为 1000 的用户和组拥有。这是 todobackend 应用运行时使用的同一用户标识/组标识，因此将允许应用读写`/data/public`文件夹。
*   `10_first_run` -在`/home/ec2-user`的工作目录中运行`sh firstrun.sh`命令，从上一章回忆，该命令引用您在自定义机器映像中包含的第一个运行脚本，以在实例创建时执行自定义初始化任务。这个第一次运行脚本包括对许多环境变量的引用，这些变量在`env`属性下的云信息初始化元数据中定义，并为第一次运行脚本提供适当的值。
为了进一步说明`10_first_run`脚本如何工作，以下代码片段配置了 ECS 容器实例，以加入由`ECS_CLUSTER`环境变量定义的 ECS 集群:
```
#!/usr/bin/env bash
set -e
# Configure ECS Agent
echo "ECS_CLUSTER=${ECS_CLUSTER}" > /etc/ecs/ecs.config
...
...
```
First run script snippet
类似地，`STACK_NAME`、`AUTOSCALING_GROUP`和`AWS_DEFAULT_REGION`变量都用于配置 CloudWatch 日志代理:
```
...
...
# Write AWS Logs region
sudo tee /etc/awslogs/awscli.conf  /dev/null
[plugins]
cwlogs = cwlogs
[default]
region = ${AWS_DEFAULT_REGION}
EOF
# Write AWS Logs config
sudo tee /etc/awslogs/awslogs.conf  /dev/null
[general]
state_file = /var/lib/awslogs/agent-state 
[/var/log/dmesg]
file = /var/log/dmesg
log_group_name = /${STACK_NAME}/ec2/${AUTOSCALING_GROUP}/var/log/dmesg
log_stream_name = {instance_id}
...
...
```
First run script snippet
# 配置自动缩放组创建策略
在上一节中，您配置了用户数据脚本和 CloudFormation Init 元数据，以便您的 ECS 容器实例可以执行适合给定目标环境的首次初始化和配置。尽管每个实例都将发出 cloud information 成功或 CloudFormation Init 过程失败的信号，但您需要显式配置 cloud information，以等待自动扩展组中的每个实例发出成功信号，如果您希望确保在 ECS 服务注册到 ECS 群集之前，或者如果它们由于某种原因失败，您不会尝试将 ECS 服务部署到您的 ECS 群集，这一点非常重要。
CloudFormation 包括一个称为创建策略的功能，允许您在创建 EC2 自动缩放组和 EC2 实例时指定可选的创建成功标准。当创建策略附加到 EC2 自动扩展组时，在继续创建云信息栈中的其他资源之前，云信息将等待自动扩展组中可配置数量的实例发出成功信号，这为我们提供了强大的功能来确保您的 ECS 自动扩展组和相应的 ECS 集群处于健康状态。回想一下上一章，您的自定义机器映像中的第一个运行脚本的最后一步是查询本地 ECS 代理元数据，以验证实例是否已加入已配置的 ECS 集群，因此，如果第一个运行脚本成功完成，并且 cfn-signal 向 CloudFormation 发送成功信号，我们就知道该实例已成功注册到 ECS 集群。
以下示例演示了在现有的 EC2 自动缩放组资源上配置创建策略:
```
Resources:
  ...
  ...
  ApplicationAutoscaling:
    Type: AWS::AutoScaling::AutoScalingGroup
    CreationPolicy:
 ResourceSignal:
 Count: !Ref ApplicationDesiredCount
 Timeout: PT15M
    Properties:
      LaunchConfigurationName: !Ref ApplicationAutoscalingLaunchConfiguration
      MinSize: 0
      MaxSize: 4
      DesiredCapacity: !Ref ApplicationDesiredCount
      VPCZoneIdentifier: !Split [",", !Ref ApplicationSubnets]
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-ApplicationAutoscaling-instance
          PropagateAtLaunch: "true"
```
Configuring a Creation Policy in CloudFormation
如您在前面的示例中所见，创建策略是使用`CreationPolicy`属性配置的，在编写本文时，这些策略只能为 EC2 自动扩展组资源、EC2 实例资源和另一种特殊类型的 CloudFormation 资源调用等待条件配置。
`ResourceSignal`对象包含一个`Count`属性，该属性定义了确定自动缩放组是否已成功创建所需的最小成功信号数，并且您引用了`ApplicationDesiredCount`参数，这意味着您期望自动缩放组中的所有实例都已成功创建。`Timeout`属性定义等待所有成功信号的最长时间-如果在此时间范围内未达到配置的计数，则自动缩放组将被视为未成功创建，栈部署将失败并回滚。该属性使用一种称为 **ISO8601 持续时间格式**的特殊格式进行配置，`PT15M`的值意味着 CloudFormation 将等待 15 分钟以获得所有成功信号。
# 配置 EC2 实例配置文件
在前面示例中定义的 EC2 自动缩放启动配置中，您引用了一个 IAM 实例配置文件，我们需要在栈中将它创建为单独的资源。EC2 实例配置文件允许您附加一个 IAM 角色，您的 EC2 实例可以使用它来访问 AWS 资源和服务，并且在 ECS 容器实例用例中。回想一下第 4 章，当您创建第一个 ECS 集群时，授予各种 ECS 权限的 IAM 实例配置文件和关联的 IAM 角色会自动附加到您的 ECS 容器实例。
因为我们从头开始配置 ECS 集群和自动扩展组，所以我们需要显式定义适当的 IAM 实例配置文件和链接的 IAM 角色，如下例所示:
```
Resources:
  ...
  ...
  ApplicationAutoscalingInstanceProfile:
 Type: AWS::IAM::InstanceProfile
 Properties:
 Roles:
 - Ref: ApplicationAutoscalingInstanceRole
 ApplicationAutoscalingInstanceRole:
 Type: AWS::IAM::Role
 Properties:
 AssumeRolePolicyDocument:
 Version: "2012-10-17"
 Statement:
 - Effect: Allow
 Principal:
 Service:
 - ec2.amazonaws.com
 Action:
 - sts:AssumeRole
 Policies:
 - PolicyName: ECSContainerInstancePermissions
 PolicyDocument: 
 Version: "2012-10-17"
 Statement:
 - Effect: Allow
 Action:
 - ecs:RegisterContainerInstance
 - ecs:DeregisterContainerInstance
                  - ecs:UpdateContainerInstancesState
 Resource: !Sub ${ApplicationCluster.Arn}
 - Effect: Allow
 Action:
 - ecs:DiscoverPollEndpoint
 - ecs:Submit*
 - ecs:Poll
 - ecs:StartTelemetrySession
 Resource: "*"
 - Effect: Allow
 Action: 
 - ecr:BatchCheckLayerAvailability
 - ecr:BatchGetImage
 - ecr:GetDownloadUrlForLayer
 - ecr:GetAuthorizationToken
 Resource: "*"
 - Effect: Allow
 Action:
 - logs:CreateLogGroup
 - logs:CreateLogStream
 - logs:PutLogEvents
 - logs:DescribeLogStreams
 Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/${AWS::StackName}*
...
...
```
Defining an IAM instance profile and IAM role
在前面的示例中，您没有附加`AmazonEC2ContainerServiceforEC2Role`托管策略，而是附加了一个自定义策略，该策略定义了一组类似的权限，注意到以下不同之处:
*   没有授予创建集群的权限，因为您已经在栈中创建了 ECS 集群。
*   注册、取消注册和更新容器实例状态的权限仅限于您的栈中定义的 ECS 集群。相比之下，`AmazonEC2ContainerServiceforEC2Role`角色将此权限授予您帐户中的所有集群，因此您的自定义配置被认为更加安全。
*   自定义策略授予`logs:CreateLogGroup`权限-这是必需的，因为 CloudWatch 日志代理需要此权限，即使日志组已经创建。在前面的示例中，我们将此权限限制在以当前栈名称为前缀的日志组中，从而限制了这些权限的范围。
# 配置 EC2 安全组
您几乎已经完成了部署 ECS 集群和 EC2 自动扩展组所需的配置，但是我们需要创建的最后一个资源是`ApplicationAutoscalingSecurityGroup`资源，您之前在`ApplicationAutoscalingLaunchConfiguration`资源配置中提到过:
```
Parameters:
  ApplicationDesiredCount:
    Type: Number
    Description: Desired EC2 instance count
  ApplicationImageId:
    Type: String