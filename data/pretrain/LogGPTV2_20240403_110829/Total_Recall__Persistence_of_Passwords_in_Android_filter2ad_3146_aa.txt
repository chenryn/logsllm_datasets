title:Total Recall: Persistence of Passwords in Android
author:Jaeho Lee and
Ang Chen and
Dan S. Wallach
Total Recall: Persistence of Passwords in Android
Jaeho Lee
{jaeho.lee, angchen, dwallach}@rice.edu
Ang Chen
Rice University
Dan S. Wallach
Abstract—A good security practice for handling sensitive data,
such as passwords, is to overwrite the data buffers with zeros once
the data is no longer in use. This protects against attackers who
gain a snapshot of a device’s physical memory, whether by in-
person physical attacks, or by remote attacks like Meltdown and
Spectre. This paper looks at unnecessary password retention in
Android phones by popular apps, secure password management
apps, and even the lockscreen system process. We have performed
a comprehensive analysis of the Android framework and a variety
of apps, and discovered that passwords can survive in a variety of
locations, including UI widgets where users enter their passwords,
apps that retain passwords rather than exchange them for tokens,
old copies not yet reused by garbage collectors, and buffers in
keyboard apps. We have developed solutions that successfully ﬁx
these problems with modest code changes.
I.
INTRODUCTION
In memory disclosure attacks, an unprivileged attacker
can steal sensitive data from device memory. These attacks
frequently make the headlines: recent vulnerabilities that could
lead to such attacks include HeartBleed [5], Meltdown [38],
and Spectre [33]. If adversaries can gain physical access to a
device, they may also be able to dump its memory directly, e.g.,
via a “cold boot” attack [28], [41], or even through its USB
connection [29]. Memory disclosure attacks pose a serious
threat, as sensitive data (such as cryptographic private keys
and passwords) is easily reused if stolen (see, e.g., [30]).
Therefore, we should delete sensitive data from memory
as soon as it is no longer in use. Cryptographic libraries
have long recognized the importance of this security practice.
Some software, such as OpenSSL [44] and GnuTLS [39],
explicitly zero out key material after a session ends. In a
garbage-collected system, these issues are even more serious,
as old copies might be left behind in memory. Aware of this
issue, the Java Cryptography Architecture (JCA) [45], in 2003,
was engineered to use mutable character arrays rather than
String objects, which are immutable, for the explicit purpose
of making its keys easier to overwrite.
Of course, sensitive data exists beyond cryptographic key
material, and applications that handle secret data also go
beyond cryptographic libraries. In this study, we particularly
focus on one type of sensitive data—user passwords—and how
they are used in practice by real Android apps. Although
other authentication mechanisms have been proposed (see,
e.g., [9]), password-based authentication is still the de facto
Network  and  Distributed  Systems  Security  (NDSS)  Symposium  2019 
24-27  February  2019,  San  Diego,  CA,  USA
ISBN  1-891562-55-X
https://dx.doi.org/10.14722/ndss.2019.23180
www.ndss-symposium.org
practice for many applications. In addition to the direct use and
transmission of plaintext passwords, applications will also use
passwords for “key stretching” [32] (see, e.g., PBKDF2 [31],
bcrypt [50], and scrypt [46]), ensuring that a captured password
does not also allow for the decryption of prior recorded
sessions.
Cryptographic
libraries have
integrated many well-
understood security practices (e.g., constant-time cryptogra-
phy [48]), and developers tend to stick to relatively mature
libraries (e.g., OpenSSL). When it comes to password-based
authentication, developers may be tempted to follow idiosyn-
cratic security practices, unaware of the dangers of keeping
passwords live in memory. Given that app developers have
different levels of experience, and that there is a large number
of apps in the market, security of authentication features can
be expected to vary considerably across applications. Indeed,
recent studies have repeatedly found that developers imple-
ment security features poorly. For example, apps have been
reported to misuse TLS libraries [21], [22], [25], cryptographic
APIs [19], OAuth protocols [11], and ﬁngerprint APIs [8]. A
recent study has also revealed that some developers simply
store passwords in plaintext on disk [43]. In this paper, we
ask a question: How well does Android manage passwords?
We perform a systematic study on how the Android plat-
form and popular Android apps handle user passwords. The
Android platform has many complex layers that interact (e.g.,
the Dalvik/ART runtime system, the operating system kernel,
and the applications), so poor practices in any of these layers
could lead to security issues. Furthermore, Android apps have
a complex lifecycle; an app might be put into “background” or
even “stopped” without necessarily being given an opportunity
to clean up sensitive values in its memory prior to the lifecycle
change. Additionally, user passwords go through a long chain
of custody before authentication takes place, sometimes even
passing from one app to another via IPC / Binder calls. Each
of the steps in this chain may inadvertently retain passwords
for longer than necessary. Last but not least, previous studies
have found that Android apps fall short in performing secure
deallocation [57], and that they may retain TLS key materials
in memory [34].
Using system memory dumping and code analysis, we
have found that many popular apps,
including a banking
app, password managers, and even the Android lockscreen
process, retain user passwords in memory long after they
are not needed. The passwords can be easily extracted from
memory dumps using simple scripts. This is a serious prob-
lem, because users often use similar or identical passwords
across applications [16], [24], [54], so a stolen password
would cause widespread damage. We have also identiﬁed
the common root causes, such as the insufﬁcient security
support in Android widgets and the widespread use of String
objects to store passwords. We propose solutions that ﬁx the
Android framework and the studied apps with modest code
changes. We also present a design that we call KeyExporter,
which manages passwords securely and can be integrated with
vulnerable apps to eliminate password retention. KeyExporter
integrates cryptographic primitives with the password widget
and exports key materials using password-based key derivation
functions (e.g., PBKDF2, scrypt) and password-authenticated
key agreement (e.g., SRP [61]). Our evaluation shows that our
solution eliminates password retention in all of the apps that
we tested, hardening the system against memory disclosure
attacks.
Concretely, we make the following contributions in this
paper, after describing more background in Section II.
•
•
•
•
A demonstration of password retention problem by
analyzing the memory dumps of 11 popular apps
(Section III);
A comprehensive analysis of the Android framework
and a variety of Android apps; the identiﬁcation of
common root causes (Sections IV+V);
Our solutions: SecureTextView, a secure version of
Android widgets that can eliminate password reten-
tion, and KeyExporter, which can remove passwords
in Android apps (Section VI);
Implementation and evaluation of our solutions, which
successfully achieves the goal of timely password
deletion in all tested apps (Section VII);
We then provide a discussion in Section VIII and describe
related work in Section IX, before concluding in Section X.
II. BACKGROUND AND MOTIVATION
In this section, we present more background on Android
authentication, and discuss how passwords may be retained by
each stage of the Android app lifecycle.
A. Authentication in Android
Recent Android versions have started the use of ﬁnger-
prints, face recognition, and voice recognition as means of au-
thentication. However, to date, passwords are still the mainstay
for Android authentication, thus our main focus in this paper.
Broadly, Android authentication apps fall into two categories:
remote authentication, where an app needs to send some secret
to a remote server (e.g., social networking apps), and local
authentication, where authentication is handled entirely on the
local device (e.g., password managers or the lockscreen app).
Remote authentication. Figure 1 shows a typical workﬂow of
remote authentication, which has three main stages. 1 The app
prompts the user to enter their password, and then contacts the
remote server with the user credential. The server validates the
credential and returns a cookie or authentication token upon
success. 2 The app receives the cookie or token, which will
be stored in a secure location (e.g., private ﬁles of the app) and
used for further requests to the server. 3 Whenever the app
needs to contact the server again, it looks up the token from
the secure storage, and resumes the session without prompting
for the user password again. The user will not need to enter
their password again until the shared temporary key expires.
Fig. 1: Authentication steps in client applications.
Notice that, in the workﬂow above, only the ﬁrst stage
involves user passwords. Such a design helps security, as it
minimizes the exposure of passwords. This also means that
there is no need for an app to retain passwords once it reaches
the end of the ﬁrst stage. However, in practice, the ﬁrst stage
also tends to be quite complicated. Some apps may use one
of many forms of two-factor authentication. Others will con-
struct ad-hoc challenge/response protocols with hashes or other
cryptographic primitives. Better apps will use a password-
authenticated key exchange (PAKE) protocol to generate a
zero-knowledge proof of knowledge of the password. Or, if
an app uses OAuth, this would further involve a relying party,
which wants to verify a user’s identity, as well as an identity
provider party, who has a record of the user’s identity (e.g.,
Facebook or Google). Regardless of these details, any app
needs to ensure that user passwords are deleted properly and
promptly, despite all of these complexities.
involving a remote server (e.g.,
Local authentication. Sometimes, apps only require local
authentication without
the
lockscreen app, or password managers). Such apps obtain user
passwords and use them to encrypt or decrypt local data as
well as to authenticate users. Password managers, for example,
store sensitive information, such as bank account passwords
and passport numbers, in a local encrypted database. Users
interact with the password manager via a “master” password,
and the app then derives a strong cryptographic master key,
e.g., using key stretching [32]. Such apps can also help users
generate random passwords to mitigate password reuse [16].
As concrete examples,
two popular apps in this category
are 1Password1 and LastPass2, which use PBKDF2-HMAC-
SHA256 for key derivation. Needless to say, the security of
these applications hinges critically on the protection of the
master passwords. If they are retained in memory after use,
the entire password database would become vulnerable.
1See https://support.1password.com/pbkdf2/
2See https://lastpass.com/support.php?cmd=showfaq&id=6926
2
CLIENTRequest loginSERVERValidate the clientReturn the tokenStore the tokenEnter ID/PWRelaunch app. . .Look up the tokenValidate the clientRequest loginReturn the resultGenerate a token1Login with passwordsRemember the userLogin automatically. . .23B. Risks of Password Retention
Unfortunately, there are many opportunities for passwords
to be retained by Android for longer than necessary.
Background applications. The activity lifecycle of Android
apps is different from that of traditional desktop programs.
Android apps can be “paused” and then “stopped” when they
are switched to the background, and they can be “resumed”
and “restarted” when switched back. When an app goes to the
background, its GUI is hidden and it stops running, but the
underlying process and its memory are still present. When it
is resumed, it again has the chance to run, draw to the screen,
and so forth. If an app is still holding user passwords when
it is “paused”, the passwords may remain live in memory for
an extended period of time. Although Android may destroy
it
certain background processes,
typically does so only if
system resources are running low.
Lack of special support for password protection. Over
the years, Android has been integrated with many security
features, such as the ARM TrustZone platform. A program that
runs in the “secure world” inside TrustZone will be protected
from attackers in the normal world, so secret data will not
be visible to external programs. Android uses this feature for
many security applications, such as its Keystore service and
ﬁngerprint authentication. Key materials and ﬁngerprint data
are stored inside TrustZone. As such, the data is protected from
memory disclosure attacks that exploit software vulnerabilities,
or even from attackers with root privilege. However, regular
Android apps do not use TrustZone to manage their passwords.
Delayed garbage collection. Most Android apps are written
in Java, so their memory is managed by a garbage collector
(GC). Therefore, even when an app deletes its last reference
to a password, the memory will remain uncleared until the
GC reuses it. This delay can last for minutes or even hours,
depending on the memory pressure of the GC system. Further-
more, in the (seemingly intuitive) case of using Java’s String
class to hold passwords, developers cannot manually overwrite
them, because String objects are immutable. Thus, the Java
Cryptographic Architecture [45] recommends that passwords
should be stored in char arrays instead of String objects.
However, the ubiquitous use of Java strings in libraries of all
kinds (e.g., JSON data import and export) means that even if an
app author wishes to use char arrays rather than strings, they
will ﬁnd less support for this style of coding from standard
libraries.
Java vs. native code. Although Android apps are commonly
written in Java, they may make native calls to underlying
C libraries included by the app or installed natively on the
system. For example, the Android TLS implementation wraps
a Java layer (Conscrypt) atop the BoringSSL cryptographic
library written in C. If passwords are copied from the Java
layer to the C layer, there is also a possibility for the data to
be retained in the C layer [34].
Long chain of custody. User inputs may also be unintention-
ally buffered by various processes and retained in memory. For
instance, when a user inputs their password, the keystrokes tra-
verse multiple processes: ﬁrst the input device driver, then the
keyboard app, and ﬁnally the user application that prompted for
the password. By the time the password reaches the intended
app, it has been touched and possibly copied by multiple
processes. If any of the processes in this chain of custody
accidentally retains the password, it may persist in memory.
III. PASSWORD RETENTION ON ANDROID
Next, we describe our threat model, and demonstrate that
password retention is a widespread problem in Android.
A. Threat model
We assume that an adversary can perform memory disclo-
sure attacks on an Android device, e.g., by exploiting software
vulnerabilities [5], launching side-channel attacks [33], [38],
or after the physical capture of a device [28], [41]. Plenty of
evidence suggests that such attacks are feasible on Android.
For instance, the recent memory dumping vulnerability in the
Nexus 5X phone [29] allows an attacker to obtain the full
memory dump of the device even if the phone is locked. As
another example, vulnerability in WiFi chipsets [5] can allow
attackers to obtain a memory snapshot of a victim device
remotely. An attacker can then analyze the memory snapshot
and obtain any sensitive data left uncleaned, such as user
passwords.
B. Initial Memory Dump Analysis
We selected 11 Android apps for a preliminary study of
password retention problem. Six of the apps are very popular—
having more than 10 million installations each—and other four
apps are password managers that store highly sensitive user
data. In addition to these apps, we tested the system processes
that are in charge of unlocking the phone after receiving the
correct password, which are critical to the overall security of
the device. In order to achieve a thorough understanding across
Android versions, we used three different environments: two
different versions of emulators running Android 7 and 8, and
a Nexus 5 device running Android 6.
We installed and launched each app, and manually en-
tered passwords for authentication. After this, we performed
a full physical memory dump [56] as well as a per-process
dump [34]. Our simple “black-box” approach does not make
any assumption about the apps. If the passwords are anywhere
in memory, we will ﬁnd them. We looked for password
encodings in two-byte characters (UTF16, as used by the Java
String object), as well as one-byte characters (as used by
ASCII). We performed such a dump several times for each
app: a) right after authentication (“login”), b) after moving the
app to the background (“BG”), c) after additionally playing
videos from the YouTube application (“YouTube”), and d) after
locking the phone (“lock”).
C. Results and Observations
Table I shows the worrisome results obtained by analyzing
the memory dumps. We note four high-level observations.
Observation #1: All tested apps are vulnerable. With the
simple technique, we successfully retrieved the cleartext pass-
words for all the apps. Very popular apps, such as Facebook,
Chrome, and Gmail, which have been installed more than
one billion times, retain login passwords in memory. Secure
password managers expose master passwords which are typi-
cally used to decrypt their internal password databases, so an
3
attacker would be able to capture the master password and gain