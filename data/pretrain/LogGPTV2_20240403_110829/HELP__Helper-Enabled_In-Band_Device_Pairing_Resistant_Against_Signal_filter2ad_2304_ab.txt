signal cancellation is 100% effective. This is achieved
through the introduction of a helper device which is al-
ready securely paired with the hub in an ofﬂine fashion
(e.g., using conventional pairing methods). With the aid
of the helper, trust can be established securely for newly
introduced devices without signiﬁcant human effort or
any advanced hardware. Our protocol only uses in-band
wireless communication, and thus, it is interoperable.
3 Problem Statement
3.1 System Model
We consider a star network topology, where a wire-
less base station (BS) services multiple personal devices,
which is similar to an Internet-of-things (IoTs) scenario.
For example, the network can reside inside a home or an
ofﬁce space. Our goal is to securely pair an unauthenti-
cated device with the base station in the presence of an
adversary and establish a common key between the de-
vice and the BS. The adversary can either try to hijack
the uplink communication to pair with the BS, or spoof a
rogue BS to pair with a legitimate device. The device and
the BS do not pre-share any common secrets (e.g. secret
cryptographic keys). We assume that a user initiates the
pairing process by powering the device and setting it to
pairing mode. Figure 1 describes the system model. For-
mally, the following entities are part of the system model.
Base Station (BS): The BS serves all the legitimate de-
vices and needs to establish a secure communication link
with each of them. The BS connects with the legitimate
devices through a wireless channel. The BS veriﬁes and
pairs with any legitimate device requesting to join the
network.
Helper Device (H): The helper is an auxiliary device
such as a smartphone, that assists the BS in the pair-
ing process. The helper has already established a secure
authenticated channel with the BS, either by establish-
ing a common key, using a public/private key pair, or
through some OOB channel [1, 37]. Using this secure
Figure 1: Entities of the system model and basic setup.
channel, H can apply an authenticated encryption func-
tion AE(·) on a message mH to guarantee the conﬁden-
tiality and integrity of mH, and the authenticity of the
source. Any such AE(·) can be utilized with the pro-
posed protocol. For example, if H and the BS share a
public/private key pair, H can encrypt/sign/encrypt (or
sign/encrypt/sign) its message to guarantee the necessary
security properties. If H and BS share a common master
symmetric key, an encrypt-then-MAC operation can be
followed to implement AE(·), after separate symmetric
keys are generated from the master key for the encryption
and MAC operations. One of the examples is to use en-
cryption then message authentication code hashing with
the shared key. We refer the reader to [2] for more details
on authenticated encryption. We leave the exact speciﬁ-
cation of AE(·) open to allow for both symmetric and/or
asymmetric methods.
Note that pairing H to the BS is a one-time effort and
need not be repeated with every device join. Moreover,
only the helper is required to have an advanced interface
to pair with the BS.
Legitimate Device (D): A legitimate device is a typical
APD which does not share any secrets with the BS or H.
The device is usually small and has simple user interfaces
(such as a power button) and hardware capabilities. The
legitimate device, H, and the BS are assumed to be co-
present during the pairing process. H and D are placed
in close proximity such that they have a highly correlated
wireless channel.
3.2 Threat Model
Adversary: We consider the typical Dolev-Yao model
[15]. The adversary (A), can fully control the wireless
channels of the network. For example, it can eaves-
drop, modify, remove, replay or inject messages (frames)
transmitted on the wireless channel. The adversary is
also powerful enough to annihilate signals transmitted
436    26th USENIX Security Symposium
USENIX Association
from D and H over the wireless channel, such that they
do not reach the BS (and vice versa). This can be ac-
complished by techniques proposed by P¨opper et al. [47].
The pairing protocol itself is known to A, but the adver-
sary does not have physical access to any of the devices.
The helper device is assumed to be trusted and its secret
key with the BS is kept away from adversaries.
Note that we do not impose any location restriction for
the attacker. Although the devices are typically located
in a physically bounded area such as a home, we do not
assume that this is a secure region. Instead, the attacker
can be located inside the physical space, as long as the
attacker cannot physically control the device and the BS
to be paired. That is, the attacker does not control the
helper so that it cannot initiate the pairing with the BS
when no legitimate device is present. The user is aware
of the presence of both the BS and of the legitimate de-
vice (which are powered on) when the pairing is initiated.
This is the minimal assumption adopted by the majority
of the previous works in device pairing.
The goal of an attacker is to pair successfully with the
BS and/or D. Therefore, we mainly consider a MitM at-
tacker in our security analysis. However, in this paper,
we do not focus on preventing denial-of-service (DoS)
attacks such as jamming, which is orthogonal to our stud-
ies. Similarly with all relevant literature, we assume that
the adversary is incapable of physically blocking signals
(e.g., by adding a Faraday cage) to the device, the helper,
or the base station.
In addition, at any point in time, the attacker may try
to ﬁnd out who is transmitting on the wireless chan-
nel. There could be several cases: device only, helper
only, BS only, or device plus helper together.
For
example, the attacker can do so via energy detection
or use physical layer identiﬁcation/ﬁngerprinting tech-
niques [7,19,28,39,55,59]. Since we assume that D and
H have a highly correlated channel due to their proxim-
ity, it is generally difﬁcult for the attacker to differen-
tiate between the cases of device only and helper only.
Thus, the attacker can differentiate between the number
of transmitters (i.e., D+H or D/H alone), but the attacker
cannot perfectly distinguish D and H (i.e., the probability
of successful detection is less than 100%). We propose
speciﬁc power and slot synchronization randomization
methods to ensure that D and H are not easily distin-
guishable. Note that any device distinction method has
to operate only to correspond to the online nature of a
MitM attack.
4 HELP: Helper-Enabled Pairing
In this section, we present HELP, an in-band Helper-
enabled pairing protocol that does not require secret
preloading. HELP makes use of a new PHY-layer mes-
sage integrity protection primitive to detect signal can-
cellation attacks that are launched to perform a MitM
attack against a key agreement protocol. We ﬁrst de-
scribe the PHY-layer protection primitive and then use
this primitive to construct HELP.
4.1 Message Integrity Protection Against
Signal Cancellation
To
combat
Consider the simple scenario depicted in Figure 1. A new
legitimate device D wants to pair with the BS by transmit-
ting a message mD over a wireless channel. Message mD
is not protected by any cryptographic message integrity
mechanism such as a MAC because D and the BS do not
share any prior security association. Let xD denote the
corresponding signal transmitted from D carrying mD.
Let also an adversary A perform a signal cancellation at-
tack on the received signal yD = hD,BSxD at the BS, where
hD,BS denotes the channel between D and the BS. Simul-
taneously, A injects his own signal xA carrying message
mA. The main challenge in providing message integrity
is to detect that a cancellation/injection has taken place.
employ
Manchester-coded (MC) ON-OFF keying modula-
tion to transmit mD from D to the BS similar to [10, 17].
In ON-OFF keying, a zero bit is mapped to (OFF, ON)
slots pair, whereas a one bit is mapped to (ON, OFF)
slots pair. The receiver demodulates the ON-OFF keying
sequence by applying energy detection on every slot.
The advantage of ON-OFF keying is that it hardens
signal cancellations, as the adversarial device, A has to
“erase” the received signal yD at the BS by synchronizing
its own signal transmission xA and taking into account
the channels hD,BS and hA,BS. Different from previous
approaches [10, 17, 24], we consider the worst case
scenario where signal cancellation is possible due to the
stability and predictability of the respective channels, as
it was demonstrated in [47].
cancellations, we
signal
The MC facilitates several functions. First, the alter-
ation between ON and OFF slots prevents the zero wan-
dering problem, allowing the receiver to keep a power
reference for differentiating between ON and OFF slots,
irrespective of the data sequence. More importantly, an
MC message contains an equal number of zeros and
ones. Our integrity protection mechanism relies on the
detection of canceled ON slots and therefore, the guar-
antee of ON slots irrespective of the data sequence is
critical to the protocol security. Finally, the use of MC
allows for the recovery of the device’s message when the
latter has been corrupted from the intentional transmis-
sions of the helper. Revealing the “time locations” of the
helper’s ON slots enables the message recovery.
In the proposed integrity primitive, the helper is placed
in close proximity to the unauthenticated device D and
USENIX Association
26th USENIX Security Symposium    437
synchronously transmits a message mH while mD is be-
ing transmitted. A signal cancellation targeted at the BS
is bound to also cancel the signal from H. With the com-
pletion of the mD transmission, the helper reveals mH to
the BS, who veriﬁes if any part of mH has been canceled.
If the message integrity veriﬁcation test is passed, the
BS exploits the knowledge of mH to recover mD. A key
requirement for the successful detection of signal can-
cellations is that the adversary A cannot swiftly identify
the ON slots of the helper. We achieve this requirement
by placing the helper in close proximity to D and by ran-
domizing the transmit power and the starting time of each
ON-OFF slot at D and H. Placing H close to D makes
it difﬁcult to differentiate the two devices using trans-
mission directionality or the uniqueness of the wireless
channel. Note that the ON-OFF transmissions contain
no preambles, so channel estimation becomes difﬁcult.
The randomization of the power and ON slot ﬁring times
aim at preventing the device distinction using RSS mea-
surements or the possible time misalignment between the
two devices due to inaccurate synchronization or differ-
ent paths to the adversary. We emphasize that any device
distinction mechanism must operate online—the adver-
sary has to decide to cancel an ON slot within the ﬁrst
few samples—which renders existing sophisticated radio
ﬁngerprinting techniques inadequate [7,19,28,39,55,59].
We now describe the PHY-layer message integrity veriﬁ-
cation primitive in detail.
4.2 HELP Integrity Veriﬁcation
We propose a message integrity veriﬁcation method
called HELP that operates with the assistance of a helper
device H. The integrity of a message mD transmitted
from D to the BS is veriﬁed via the following steps.
1. Device Placement: The helper H is placed in close
proximity to the unauthenticated device D.
2. Initialization: The user presses a button on D or
simply switches D on to set it to pairing mode. The
user then presses a button on H to initiate the pro-
tocol. The helper sends an authenticated request-
to-communicate message to the BS using the AE(·)
function. This message attests that the legitimate
device D is present and H is placed near D.
3. Device Synchronization: The BS sends a publicly
known synchronization frame SYNC to synchro-
nize the clocks of D, H and itself1. The SYNC
frame is similar in function to the known preamble
1The SYNC message doesn’t need to be secured since if it is can-
celed at both device and helper, it becomes a DoS attack. If the device
and helper are forced to be out of sync by an attacker, BS will fail to
decode which is again a DoS.
that is attached to wireless transmissions for syn-
chronizing the receiver to the transmitter.
In our
protocol, all three entities synchronize to the same
time reference, using the known SYNC message.
4. Transmission of mD: D transmits mD in the form
[h(mD)],mD, where [·] denotes an MC ON-OFF
keyed message and h is a cryptographically-secure
hash function. Note that no key input is used with
h, as D and the BS do not share a common key.
5. Helper Signal Superposition: Synchronously with
the transmission of [h(mD)], the helper transmits a
signal mH with ON slots in a random number of slot
locations determined by vector s. The ON slots in
s are time-aligned with the slots (ON or OFF) of
[h(mD)]. Only one slot of mH can be ON per MC
ON-OFF bit of [h(mD)]. Sequence mH is not nec-
essarily a proper MC sequence (and hence, is not
marked by [·]).
6. Reception at the BS: The BS receives ([h(mD)] +
mH )(cid:48) and m(cid:48)
D.
7. Revealing mH: The helper reveals AE(s,K) to the
BS.
8. Integrity Veriﬁcation of s: The BS decrypts s and
veriﬁes its integrity using function VD(·), which is
the corresponding decryption/veriﬁcation function
to AE(·). If veriﬁcation fails, the BS aborts m(cid:48)
D.
9. Integrity Veriﬁcation of mD: The BS veriﬁes that
all slot locations indicated by s are ON on the re-
ceived ([h(mD)] + mH )(cid:48). If not, a signal cancella-
tion attack is detected and m(cid:48)
D is rejected. Other-
wise, the BS recovers h(mD)(cid:48), by removing mH from
([h(mD)] + mH )(cid:48) using the knowledge of s. For bits
where s was OFF in both corresponding slots, the
MC sequence is decoded using typical decoding.
For an ON slot in s, a bit bD is decoded using the
truth table in Figure 2(a). Upon recovery of h(mD)(cid:48),
= h(mD)(cid:48). If the integrity
the BS checks if h(m(cid:48)
D)
veriﬁcation fails at the BS, either the BS or H dis-
play a FAILURE message, and all entities abort the
protocol. The user has to restart the pairing process
from the initialization step. If the integrity veriﬁ-
cation passes, then BS or H display a SUCCESS
message.
?
The steps for extracting [h(mD)(cid:48)] from ([h(mD)] +
mH )(cid:48) at the BS are shown in Figure 2(b). After syn-
chronization, D transmits h(mD) = 0110110101 in the
form of [h(mD)] (for illustration purposes, we have re-
stricted the length of the hash function to 10 bits).
The helper synchronously transmits during slots s =
438    26th USENIX Security Symposium
USENIX Association
bD + bH
bH
bD
(a)
(b)
Figure 2: (a) Truth table for recovering [h(mD)(cid:48)] from ([h(mD)] + mH )(cid:48), using s, and (b) an example of recovering [h(mD)(cid:48)] from ([h(mD)] + mH )(cid:48).
{4,10,13,15,18}. The BS receives the superimposed
signal ([h(mD)] + mH )(cid:48). Using the truth table in Fig-
ure 2(a), the original MC sequence corresponding to
h(mD) is recovered.
BS
D
4.3 Device Pairing with HELP
In this section, we describe how the BS and D can estab-
lish a secret key in the presence of a MitM adversary.
We complement the DH key agreement protocol with
the HELP integrity veriﬁcation primitive. The latter is
used to detect the cancellation portion of a MitM attack.
Moreover, the helper provides the necessary authentica-
tion for the DH message exchange. The HELP-enabled
DH message exchange is shown in Figure 3.
To ﬁx the ideas, the BS (or D) publishes parameters
(G,q,g) of the DH scheme, where (G is a cyclic group of
order q and g is a generator of G). If (G,q,g) are already
publicly known, they need not be sent by either party.
Device D computes zD = gXD, where XD is chosen from
Zq uniformly at random. After the initialization and syn-