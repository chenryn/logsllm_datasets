title:Control Plane Reflection Attacks in SDNs: New Attacks and Countermeasures
author:Menghao Zhang and
Guanyu Li and
Lei Xu and
Jun Bi and
Guofei Gu and
Jiasong Bai
Control Plane Reﬂection Attacks in
SDNs: New Attacks and Countermeasures
Menghao Zhang1,2,3, Guanyu Li1,2,3, Lei Xu4, Jun Bi1,2,3(B), Guofei Gu4,
and Jiasong Bai1,2,3
1 Institute for Network Sciences and Cyberspace, Tsinghua University,
{zhangmh16,bjs17}@mails.tsinghua.edu.cn, PI:EMAIL,
Beijing, China
2 Department of Computer Science and Technology, Tsinghua University,
PI:EMAIL
3 Beijing National Research Center for Information Science and Technology
Beijing, China
4 SUCCESS LAB, Texas A&M University, College Station, USA
(BNRist), Beijing, China
PI:EMAIL, PI:EMAIL
continues
Abstract. Software-Deﬁned Networking (SDN)
to be
deployed spanning from enterprise data centers to cloud computing with
emerging of various SDN-enabled hardware switches. In this paper, we
present Control Plane Reﬂection Attacks to exploit the limited process-
ing capability of SDN-enabled hardware switches. The reﬂection attacks
adopt direct and indirect data plane events to force the control plane to
issue massive expensive control messages towards SDN switches. More-
over, we propose a two-phase probing-triggering attack strategy to make
the reﬂection attacks much more eﬃcient, stealthy and powerful. Exper-
iments on a testbed with physical OpenFlow switches demonstrate that
the attacks can lead to catastrophic results such as hurting establish-
ment of new ﬂows and even disruption of connections between SDN con-
troller and switches. To mitigate such attacks, we propose a novel defense
framework called SWGuard. In particular, SWGuard detects anomalies
of downlink messages and prioritizes these messages based on a novel
monitoring granularity, i.e., host-application pair (HAP). Implementa-
tions and evaluations demonstrate that SWGuard can eﬀectively reduce
the latency for legitimate hosts and applications under Control Plane
Reﬂection Attacks with only minor overheads.
Keywords: Software-Deﬁned Networking
Timing-based side channel attacks · Denial of service attacks
1 Introduction
Software-Deﬁned Networking (SDN) has enabled ﬂexible and dynamic network
functionalities with a novel programming paradigm. By separating the control
c(cid:2) Springer Nature Switzerland AG 2018
M. Bailey et al. (Eds.): RAID 2018, LNCS 11050, pp. 161–183, 2018.
https://doi.org/10.1007/978-3-030-00470-5_8
162
M. Zhang et al.
plane from the data plane, control logics of diﬀerent network functionalities are
implemented on top of the logically centralized controller as applications. Typ-
ical SDN applications are implemented as event-driven programs which receive
information directly or indirectly from switches and distribute the processing
decisions of packets to switches accordingly. These applications enable SDN to
adapt to data plane dynamics quickly and make responses to the application
policies timely. A wide range of network functionalities are implemented in this
way, allowing SDN-enabled switches to behave as ﬁrewall, load balancing, net-
work address translation, L2/L3 routing and so on.
Despite the substantial beneﬁts, the deployment of SDN has encountered sev-
eral problems. In particular, a major limitation is the control message process-
ing capability on SDN-enabled hardware switches of various brands (e.g., IBM
RackSwitch, Juniper Junos MX-Series, Brocade NetIron CES 2000 Series, Pica8
Series, Hewlett-Packard Series), constrained by multiple factors. First, CPUs
of hardware switches are usually relatively wimpy [8,31] for ﬁnancial reasons,
which restricts the message parsing and processing capability of software proto-
col agents in switches. Second and more importantly, ﬂow tables in most com-
modity hardware OpenFlow switches use Ternary Content Addressable Mem-
ory (TCAM) to achieve wire-speed packet processing, which only allows limited
ﬂow table update rate (only supporting 100–200 ﬂow rule updates per second
[5,12,13,16,29,31,33]) and small ﬂow table space (ranging from hundreds to
a few thousand [8,16,18]) due to manufacturing cost and power consumption.
These limitations have slowed down network updates and hurt network visibil-
ity, which further constrain the control plane applications with dynamic policies
signiﬁcantly [15].
In this paper, we systematically study the event processing logic of the SDN
control plane and locate two types of data plane events which could reﬂect expen-
sive control messages towards the data plane, i.e., direct data plane events (e.g.,
Packet-In messages) and indirect data plane events (e.g., Statistics Query/Reply
messages). By manipulating those data plane events, we present two novel
Control Plane Reﬂection Attacks in SDN, i.e., Table-miss Striking Attack and
Counter Manipulation Attack, which can exploit the limited processing capabil-
ity for control messages of SDN-enabled hardware switches. Moreover, in order to
improve accuracy and eﬃciency of Control Plane Reﬂection Attacks, we propose
a two-phase attack strategy, i.e., probing phase and triggering phase, inspired
by timing-based side channel attacks. Control Plane Reﬂection Attacks are able
to adjust attack stream patterns adaptively and cleverly, thus could gain a great
increment of downlink messages1. Extensive experiments with a physical testbed
demonstrate that the attack vectors are highly eﬀective and the attack eﬀects
are pretty obvious.
In order to mitigate Control Plane Reﬂection Attacks, we present a novel
and eﬀective defense framework, namely SWGuard. SWGuard proposes a new
monitoring granularity, host-application pair (HAP) to detect downlink message
1 For brevity, we denote the messages from the data plane to the control plane as
uplink messages, and the messages vice versa as downlink messages.
Control Plane Reﬂection Attacks
163
anomalies, and prioritizes downlink messages when downlink channel congests.
In this way, SWGuard is able to satisfy the latency requirements of diﬀerent
hosts and applications under the reﬂection attacks.
To summarize, our main contributions in this paper include:
– We systematically study the event processing logic of SDN applications and
further locate two types of data plane events, i.e., direct/indirect events,
which could be manipulated to reﬂect expensive control messages towards
SDN switches.
– We present two novel Control Plane Reﬂection Attacks, Table-miss Strik-
ing Attack and Counter Manipulation Attack, to exploit limited processing
capability of hardware switches. Moreover, we develop a two-phase attack
strategy to launch such attacks in an eﬃcient, stealthy and powerful way.
The experiments with a physical SDN testbed exhibit their harmful eﬀects.
– We present a defense solution, called SWGuard, with an eﬃcient priority
assignment and scheduling algorithm based on the novel abstraction of host-
application pair (HAP). Implementations and evaluations demonstrate that
SWGuard provides eﬀective protection for legitimate hosts and applications
with only minor overheads.
The remainder of this paper is structured as follows. Section 2 introduces the
background that motivates this work. Section 3 illustrates the details of Control
Plane Reﬂection Attacks and Sect. 4 proves the harmful eﬀects with a physical
testbed. We present our SWGuard defense framework in Sect. 5 and make some
discussions in Sect. 6. Related works are illustrated in Sect. 7, and the paper is
concluded in Sect. 8.
2 Background
Processing Logic of Data Plane Events. SDN introduces the open net-
work programming interface and accelerates the growth of network applications,
which enable network to dynamically adjust network conﬁgurations based on
certain data plane events. These events could be categorized into the following
two types: direct data plane events such as Packet-In messages, where the event
variations are reported to the controller from the data plane directly, and indi-
rect data plane events such as Statistics Query/Reply messages, where the event
variations are obtained through a query and reply procedure at the controller. In
the ﬁrst case, the controller installs a default table-miss ﬂow rule on the switch.
When a packet arrives at the switch and does not match any other ﬂow rule, the
switch will forward the packet to the control plane for further processing. Then
the controller makes decisions for the packet based on the logics of the appli-
cations, and assigns new ﬂow rules to the switch to handle subsequent packets
with the same match ﬁelds. In the second case, the controller ﬁrst installs a
counting ﬂow rule reactively or proactively on the switch for a measurement
purpose. When a packet matches the counting ﬂow rule in the ﬂow table, the
speciﬁc counter increments with packet number and packet bytes. To obtain the
164
M. Zhang et al.
status of the data plane, the controller polls the ﬂow counter values for statis-
tics periodically and performs diﬀerent operations according to the analysis of
statistics. A large number of control plane applications combine these two kinds
of data plane events to compose complicated network functions, which further
achieve advanced packet processing.
Usage Study of Data Plane Events. Based on the event-driven program-
ming paradigm, a large number of control plane applications emerge in both
academia and industry. In academia, since the publication of OpenFlow [23],
many research ideas have been proposed to fully leverage the beneﬁts of direct
and indirect data plane events. While the direct data plane events are needed by
almost all applications, the indirect data plane events are also widely included.
In particular, we have categorized these indirect event-driven applications into
three types, applications which help improve optimization, monitoring and secu-
rity of network. Please see our technical report [36] for details. Although each
of them has diﬀerent purposes, all of these works are deeply involved in the
utilization of the indirect data plane events, obtaining a large number of traﬃc
features and switch attributes. Meanwhile, these indirect data plane events con-
tribute a large part of communication between applications and switches. SDN
applications have also experienced great development in industry recently. The
mainstream SDN platforms (e.g. Open Daylight, ONOS, Floodlight) foster open
and prosperous markets for control plane softwares, which provide a great range
of applications with a composition of the direct and indirect data plane events.
Meanwhile, since these applications are obtained from a great variety of sources,
their quality could not be guaranteed and their logics may contain various ﬂaws
or vulnerabilities. In particular, we have investigated all mainstream SDN con-
trollers, and discovered that indirect event-driven applications occupy a large
part of application markets in these open source controller platforms. Due to
the page limit, please see the application summary in our technique report [36].
Limitations of SDN-enabled Hardware Switches. Compared with the
rapid growth of packet processing capability in logically centralized and phys-
ically distributed network operating systems (e.g., Onix [17], Hyperﬂow [30],
Kandoo [11]) and controller frameworks (e.g., Open Daylight, ONOS), the down-
link message processing capability of SDN-enabled hardware switches evolves
much slower. State-of-the-art SDN-enabled hardware switches [24] only sup-
port 8192 ﬂow entries. To make matters worse, the capability to update the
entries in TCAM is pretty limited, usually less than 200 updates per second
[5,12,13,15,16,29,31,33]. According to our experiment on Pica8 P-3922, the
maximum update rate is about 150 entries per second. We observe that the
downlink channel in switches is the dominant resource in SDN architecture that
must be carefully managed to fully leverage the beneﬁts of SDN applications.
However, existing SDN architecture does not provide such a mechanism to pro-
tect the downlink channel in the switches that it is vulnerable to Control Plane
Reﬂection Attacks.
Control Plane Reﬂection Attacks
165
3 Control Plane Reﬂection Attacks
In this section, we ﬁrst provide our threat model and then describe the details of
two Control Plane Reﬂection Attacks including Table-miss Striking Attack and
Counter Manipulation Attack.
3.1 Threat Model
We assume an adversary could possess one or more hosts or virtual machines
(e.g., via malware infection) in the SDN-based network. The adversary can utilize
his/her controlled hosts or virtual machines to initiate probe packets, monitor
their responses, and generate attack traﬃc. However, we do not assume the
adversary can compromise the controller, applications or switches. In addition,
we assume the connections between the controller and switches are well protected
by TLS/SSL.
3.2 Control Plane Reﬂection Attacks
Control Plane Reﬂection Attacks are much more stealthy and sophisticated than
previous straightforward DoS attacks against SDN infrastructure, and generally
consist of two phases, i.e., probing phase and triggering phase. During the prob-
ing phase, the attacker uses timing probing packets, test packets and data plane
stream to learn the conﬁgurations of control plane applications and their involve-
ments in direct/indirect data plane events. With several trials, the attacker is
able to determine the conditions that the control plane application adopts to
issue new ﬂow rule update messages. Upon the information obtained from prob-
ing phase, the attacker can carefully craft the patterns of attack packet stream
(e.g., header space, packet interval) to deliberately trigger the control plane to
issue numerous ﬂow rule update messages in a short interval to paralyze the
hardware switches. We detail two vectors of Control Plane Reﬂection Attacks as
follows.
Table-miss Striking Attack. Table-miss Striking Attack is an enhanced attack
vector from previous Data-to-control Plane Saturation Attack [9,27,28,32].
Instead of leveraging a random packet generation method to carry out the attack,
Table-miss Striking Attack adopts a more accurate and cost-eﬃcient manner by
utilizing probing and triggering phases.
The probing phase is to learn conﬁdential information of the SDN control
plane to guide the patterns of attack packet stream. The attacker could ﬁrst
probe the usage of the direct data plane events (e.g., Packet-In, Packet-Out,
Flow-Mod) by using various low-rate probing packets whose packet headers are
ﬁlled with deliberately faked values. The attacker can send these probing packets
to the SDN-based network and observe the responses accordingly, thus the round
trip time (RTT) for each probing packet could be obtained. If several packets
with the same packet header get diﬀerent RTT values, especially, the ﬁrst packet
goes through a long delay while the other packets get relatively quick responses,
166
M. Zhang et al.
we can conclude that the ﬁrst packet is directed to the controller and the other
packets are forwarded directly in the data plane, which indicates that the speciﬁc
packet header matches no ﬂow rules in the switch and invokes Packet-In and
Flow-Mod messages. Then the attacker could change one of the header ﬁelds with
the variable-controlling approach. With no more than 42 trials2, the attacker is
able to determine which header ﬁelds are sensitive to the controller, i.e., the
grain for routing. Then the attacker could carefully craft attack packet stream
based on probed grains to deliberately trigger the expensive downlink messages.
Counter Manipulation Attack. Compared with Table-miss Striking Attack,
Counter Manipulation Attack is much more sophisticated, which is based on
the indirect data plane events (e.g., Statistics Query/Reply messages). In order