 webhooks
control mutating web-
hooks
modify pods/status
create services
—
control mutating 
 webhooks
—
modify pods
control mutating 
 webhooks
Scope is key when it comes to powerful permissions. A permission can be admin-equivalent when 
granted over the entire cluster, but harmless when scoped to a namespace or to specific resource 
names. In order to include all possible powerful permissions, the table above assumes permissions are 
granted cluster-wide.
Certain powerful permissions enable a number of attacks and are thus mapped to multiple attack 
classes. On the other hand, some of the more complicated attacks require a combination of their listed 
permissions to carry out. Permissions that aren’t powerful enough to carry the attack on their own are 
marked in yellow.
To avoid disproportionate inflation, Table 1 aggregates similar verbs and resources. The update and 
patch verbs were aggregated to a virtual “modify” verb, while modify and create were combined to 
“control”. DaemonSets, Deployments, CronJobs and other pod controllers were counted as “pod con-
trollers”. Therefore, write privileges over pod controllers are represented as one virtual “control pod 
controllers” permission rather than the actual 21 related permissions (e.g., create Deployments, update 
Deployments, patch Deployments, create CronJobs, etc.).
Figure 4: Powerful RBAC permissions by attack class
Manipulate AuthN/Z
Acquire Tokens
RCE
Steal Pods
Meddler-in-the-Middle
1
6
0
2
4
6
8
7
6
# of powerful permissions
7
7
Classifying Powerful Kubernetes  Permissions 
Attackers may abuse certain Kubernetes permissions to escalate privileges, move laterally or obtain 
broader control over a cluster. From here on, those will be referred to as ‘powerful permissions.’
Some powerful permissions are near-equivalent to cluster admin, while others can only be abused in 
specific scenarios for limited attacks. To establish a common framework when discussing powerful 
permissions, we classified them based on the attacks they enable into five attack types.
8
Prisma by Palo Alto Networks | Kubernetes Privilege Escalation: Excessive Permissions in Popular Platforms | White Paper
It’s unlikely that Table 1 contains every powerful permission in Kubernetes, but it’s the most complete 
list we’re aware of. It’s also worth noting that there are other “weaker” attack classes that we haven’t 
looked into, such as Denial-of-Service (DoS). 
Below is a breakdown of each attack class.
Acquire Tokens
This group contains permissions that allow, either directly or indirectly, to retrieve or issue service 
 account tokens. The main factor that dictates the impact of these permissions is their scope— whether 
or not they’re granted over a privileged namespace that hosts powerful service accounts. The only 
namespace that’s privileged by default is kube-system, but some platforms may install additional 
 privileged namespaces.
Permissions include: create pods, create secrets, list secrets, update Deployments, create 
 serviceaccounts/token
Attack Example
An attacker armed with the create serviceaccounts/token permission in the kube-system namespace 
can issue new tokens for pre-installed powerful service accounts through TokenRequests.
Remote Code Execution
Permissions in this group allow executing code on pods, and possibly on nodes. Attackers won’t neces-
sarily escalate privileges by abusing these permissions—it depends on the permissions of the attacked 
pod or node. Still, these permissions increase the compute resources and possibly the business logic 
that is under the attacker’s control.
Permissions include: create pods/exec, create nodes/proxy, patch DaemonSets, create pods
Attack Example
An attacker armed with the create pods/exec permission can execute code on other pods, for example 
via the interface provided by kubectl exec.
Manipulate Authentication/Authorization (AuthN/AuthZ)
Permissions in this group permit manipulation of authentication and authorization. They often enable 
privilege escalation by design for use cases like granting permissions or impersonating other identities. 
They’re extremely powerful, and users should be extra careful when granting them.
Permissions include: bind clusterrolebidings, impersonate serviceaccounts, escalate roles
Attack Example
An attacker that can bind clusterrolebindings can grant the pre-installed cluster-admin clusterrole to 
his compromised identity.
Steal Pods
Certain permissions or permission combinations may allow attackers to steal pods from one node to 
another. For this attack to be impactful, the attacker must first compromise a node where he intends to 
place the stolen pod. Stealing a pod consists of two steps: evicting a pod, and then ensuring it lands on 
your node. To maximize impact, attackers would target pods with powerful service account tokens.
A similar attack—affecting the scheduling of future pods—isn’t covered as part of this report.
Permissions include: update nodes, create pods/eviction, delete pods, update nodes/status
Attack Example
An attacker that compromised a node and has the update nodes permission can steal pods from other 
nodes onto his compromised node. By adding a taint with the NoExecute effect to the target node, the 
attacker can force Kubernetes to evict and reschedule the target node’s pods. By adding a taint with the 
NoSchedule effect to all other nodes, the attacker can ensure the evicted pods are rescheduled onto his 
compromised node.
It’s worth noting that pods that tolerate NoExecute taints cannot be stolen through this technique. 
These pods aren’t very common, but one popular example would be the admin-equivalent “tigera- 
operator” pod installed by Calico.
 To the best of our knowledge, stealing pods with NoExecute taints is a novel attack technique.
9
Prisma by Palo Alto Networks | Kubernetes Privilege Escalation: Excessive Permissions in Popular Platforms | White Paper
Meddler-in-the-Middle
Permissions in this group may allow attackers to launch meddler (man)-in-the-middle attacks against 
pods, nodes, or services in the cluster. Exploiting permissions in this group often requires a number of 
prerequisites for relatively weak impact. Additionally, securing communication with TLS can nullify 
most MitM attacks.
Permissions include: update services/status, control endpointslices, patch pods/status
Attack Example
An attacker armed with the update services/status permission can exploit CVE-2020-8554 via Load 
Balancer IPs to redirect traffic sent by pods and nodes from its intended target to an existing endpoint. 
The attacker must control an existing endpoint for this to be a meaningful attack.
Container Escapes and Powerful DaemonSets: A Toxic 
Combination
When powerful permissions are loosely granted, they’re more likely to fall into the wrong hands. In Ku-
bernetes, that could occur in a number of ways, but it's most easily visible with powerful DaemonSets 
and container escapes.
The blast radius of container escapes drastically increases when powerful DaemonSets distribute 
powerful tokens across every node in the cluster. With powerful DaemonSets installed, attackers 
that managed to escape a container are guaranteed to hit the jackpot—powerful credentials on their 
 compromised node.
Figure 5: Powerful DaemonSets drastically increase the impact of container escape
api-server
Pod
Trampoline
Node
Pod
Trampoline
Node
Pod
Trampoline
Node
We use “Trampoline pods” as a synonym for powerful pods. The name denotes their impact: attack-
ers that manage to compromise a Trampoline pod or its node can abuse its token to jump around the 
cluster, compromise other nodes and gain higher privileges. Not all Trampolines offer the same bounce. 
Depending on their permissions, some may allow an attacker to compromise the entire cluster, while 
others may only be abused in certain scenarios.
It’s reasonable to run some powerful pods. Powerful permissions exist for a reason: they’re sometimes 
needed. Powerful pods that don’t run as parts of DaemonSets can be isolated from untrusted and pub-
licly exposed ones through several methods (described in “Recommendations”). Even without actively 
taking measures to isolate them, non-DaemonSet Trampolines are simply less likely to be present on a 
particular compromised node.
10
Prisma by Palo Alto Networks | Kubernetes Privilege Escalation: Excessive Permissions in Popular Platforms | White Paper
Figure 6: Non-DaemonSet trampolines can be isolated from  
untrusted pods, either actively or by chance
Pod
Node
Pod
Node
Pod
Trampoline
Node
Pod
Pod
What primarily makes Trampoline DaemonSets a security concern is the distribution of powerful creden-
tials. With powerful DaemonSets, every node in the cluster hosts powerful credentials, meaning attackers 
that managed to escape a container are guaranteed to find a powerful token on the compromised node.
Figure 7: With Powerful DaemonSets, attackers are guaranteed  
to find powerful credentials on a compromised node
Pod
Trampoline
Node
Pod
Trampoline
Node
Pod
Trampoline
Node
Aren’t Nodes Powerful by Default?
Without powerful DaemonSets, the only cluster credentials available on a node belong to the node 
agent—the Kubelet. In 2017, Kubernetes addressed privilege escalation attacks rooted in the Kubelet 
permissions by releasing the NodeRestriction admission controller. NodeRestriction limits the 
 permissions of the Kubelet to resources that are already bound to its node, like the pods running on 
top of it. As a result, nodes cannot escalate privileges or become cluster admins, and thus without 
 Trampoline Pods, a container escape isn't enough to take over the entire cluster. 
It's worth noting that NodeRestiction isn't perfect - Kubelets can still read most cluster objects, bypass 
egress network policies, initiate certain Denial-of-Service (DoS) attacks, and even launch Meddler-
in-the-Middle attacks against pod-backed services. While these are all possible, it's important to 
 differentiate from permissions that enable low severity attacks against certain configurations, from 
ones that can be reliably abused to escalate privileges and compromise clusters. 
The next section goes over Trampoline DaemonSets in popular Kubernetes platforms. We didn't consider 
DaemonSets to be powerful if they only enabled low severity or unreliable attacks, including those that 
Kubelets can carry out independently. Daemonsets were only considered powerful if their permissions 
could realistically lead to a full cluster compromise.
Powerful DaemonSets in Popular Kubernetes Platforms
To understand the prevalence and real-world impact of powerful permissions, Prisma Cloud 
 researchers analyzed eight popular Kubernetes platforms and looked for DaemonSets running with 
powerful permissions.
11
Prisma by Palo Alto Networks | Kubernetes Privilege Escalation: Excessive Permissions in Popular Platforms | White Paper
Table 2: Analyzed Kubernetes Platforms
Platform
Type
Vendor
Analyzed Kubernetes Platforms
Managed Service
Microsoft Azure
Elastic Kubernetes Service (EKS)
Managed Service
Amazon Web Services
Google Kubernetes Engine (GKE)
Managed Service
Google Cloud Platform
Openshift Container Platform (OCP)
Distribution
Red Hat
Antrea
CNI
Open Source
Calico
CNI
Open Source
Cilium
CNI
Open Source
Weave Net
CNI
Open Source
Out of the Kubernetes platforms examined, 62.5% installed powerful DaemonSets by default, while 
another 12.5% did so as well with a recommended feature enabled.
Figure 8: Popular DaemonSets in the analyzed Kubernetes platforms
Yes
62.5%
25%
No
12.5%
Certain Features
Table 3: Powerful DaemonSet in the Analyzed Kubernetes Platforms
Platform
Powerful DaemonSets
DaemonSet
Most Powerful Permissions
AKS
Yes
cloud-node-manager, csi-azurefile-*
list secrets, update nodes
EKS
Yes
aws-node
update nodes
GKE
Only with Dataplane v2
anetd
update nodes, update pods
OCP