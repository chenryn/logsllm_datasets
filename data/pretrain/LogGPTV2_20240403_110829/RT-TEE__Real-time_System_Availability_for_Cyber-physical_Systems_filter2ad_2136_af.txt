ecution environment that aims to address one of the most
fundamental needs of safety-critical cyber-physical systems:
system availability. RT-TEE builds on top of a minimized
abstraction of hardware primitives that enables bootstrapping
of availability. It leverages a newly designed two-layer policy-
based event-driven hierarchical scheduler to provide real-time
scheduling while minimizing the impact on TCB. To enable
I/O availability, we proposed and designed an I/O reference
monitor that enforces both temporal (real-time) and spatial
(security) policies on the hardware/software interactions. To
minimize the TCB impact due to I/O drivers, we proposed a
combination of sandboxed feature-rich untrusted drivers and
minimized functionality trusted debloated drivers. We built
prototypes for both ARMv8-A and ARMv8-M platforms and
validated the system on a real drone.
ACKNOWLEDGMENT
We thank the anonymous reviewers for their constructive
feedback, Yujie Wang and Ruide Zhang for their help in
the implementation. This work is supported in part by US
National Science Foundation under grants ECCS-1646579,
CNS-1837519, CNS-1916926 and CNS-2038995, and by the
Fullgraf Foundation.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:11:09 UTC from IEEE Xplore.  Restrictions apply. 
13364
REFERENCES
[1] “How many millions of lines of code does it take?.” https://xenproject
.org/developers/teams/xen-hypervisor/. Accessed: 2019-09-01.
[2] G. Doll, “A smart way to drive ecu consolidation,” WindRiver, Tech.
Rep., 2015.
[3] Intel, “Ecu consolidation reduces vehicle costs, weight, and testing.”
[4] I. Astaburuaga et al., “Vulnerability analysis of ar. drone 2.0, an
embedded linux system,” in CCWC, IEEE, 2019.
[5] “Mavlink vulnerability.” https://diydrones.com/profiles/blogs/hijacking
-quadcopters-with-a-mavlink-exploit. Accessed: 2021-08-07.
[6] “Hackers remotely kill a jeep on the highwaywith me in it.” https://ww
w.wired.com/2015/07/hackers-remotely-kill-jeep-highway/.
[7] E. Deligne, “Ardrone corruption,” Journal in Computer Virology, 2012.
[8] “Ftp system ﬁle access fulnerability on drone.” https://nvd.nist.gov/vul
n/detail/CVE-2017-3209/. Accessed: 2021-08-07.
[9] “Busybox cve-2017-16544.” https://nvd.nist.gov/vuln/detail/CVE-201
7-16544. Accessed: 2021-08-07.
[10] Y. D. et al., “Holistic Control-Flow protection on Real-Time embedded
systems with kage,” in Security, USENIX, 2022.
[11] A. A. Clements et al., “ACES: Automatic compartments for embedded
systems,” in Security, USENIX, 2018.
[12] C. H. Kim et al., “Securing real-time microcontroller systems through
customized memory view switching.,” in NDSS, ISOC, 2018.
[13] A. Khan et al., “M2MON: Building an mmio-based security reference
monitor for unmanned vehicles,” in Security, USENIX, 2021.
[14] A. Abbasi et al., “Challenges in designing exploit mitigations for deeply
embedded systems,” in EuroS&P, IEEE, 2019.
[15] “ARM Security Technology, Building a Secure System using TrustZone
Technology,” apr 2009.
[16] F. McKeen et al., “Innovative instructions and software model for
isolated execution.,” in ISCA, ACM/IEEE, 2013.
[17] V. Costan et al., “Sanctum: Minimal hardware extensions for strong
software isolation,” in Security, USENIX, 2016.
[18] F. Brasser et al., “Tytan: tiny trust anchor for tiny devices,” in DAC,
ACM, 2015.
[19] A. Baumann et al., “Shielding applications from an untrusted cloud with
haven,” in OSDI, USENIX, 2014.
[20] A. M. Azab et al., “Hypervision across worlds: Real-time kernel
protection from the arm trustzone secure world,” in CCS, ACM, 2014.
[21] “Open portable trusted execution environment.” https://www.op-tee.org/.
[22] “Trustonic tee.” https://www.trustonic.com/technical-articles/what-is-a-t
rusted-execution-environment-tee/.
[23] “Huawei
tee.” https://www.commoncriteriaportal.org/files/epfiles/anssi
-cible-cc-2020 67en.pdf.
[24] “Nvidia TEE.” https://nv-tegra.nvidia.com/gitweb/?p=3rdparty/ote par
tner/tlk.git;a=blob plain;f=documentation/Tegra BSP for Android T
LK FOSS Reference.pdf;hb=HEAD.
[25] “Android trusty.” https://source.android.com/security/trusty.
[26] “Qualcomm tee.” https://www.qualcomm.com/media/documents/files/g
uard-your-data-with-the-qualcomm-snapdragon-mobile-platform.pdf.
[27] M. Xu et al., “Dominance as a new trusted computing primitive for the
internet of things,” in S&P, IEEE, 2019.
[28] F. Alder et al., “Aion: Enabling open systems through strong availability
guarantees for enclaves,” in CCS, ACM, 2021.
[29] A. Thomas, S. Kaminsky, D. Lee, D. Song, and K. Asanovic, “Ertos:
Enclaves in real-time operating systems,” Woodstock, 2018.
[30] R. J. Masti et al., “Enabling trusted scheduling in embedded systems,”
in ACSAC, IEEE, 2012.
[31] R. Mahfouzi et al., “Butterﬂy attack: Adversarial manipulation of
temporal properties of cyber-physical systems,” in RTSS, IEEE, 2019.
[32] A. Li et al., “Chronos: Timing interference as a new attack vector on
autonomous cyber-physical systems,” in CCS, ACM, 2021.
2017.
in RTSS, IEEE, 2005.
ziuav.org/wiki/Bebop.
RTAS, IEEE, 2020.
[37] C. L. Liu et al., “Scheduling algorithms for multiprogramming in a
hard-real-time environment,” Journal of the ACM, 1973.
[38] T. Qin, P. Li, and S. Shen, “Vins-mono: A robust and versatile monocular
visual-inertial state estimator,” IEEE Transactions on Robotics.
[39] D. Kaplan et al., “Amd memory encryption,” White paper, 2016.
[40] E. Owusu et al., “OASIS: On achieving a sanctuary for integrity and
secrecy on untrusted platforms,” in CCS, ACM, 2013.
[41] G. Dessouky et al., “CHASE: A conﬁgurable hardware-assisted security
extension for real-time systems,” in ICCAD, IEEE/ACM, 2019.
[42] J. Noorman et al., “Sancus 2.0: A low-cost security architecture for iot
devices,” in TOPS, ACM, 2017.
[43] L. T. Phan et al., “CARTS: a tool for compositional analysis of real-time
systems,” in SIGBED Review, ACM, 2011.
[44] R. Pan et al., “Predictable virtualization on memory protection unit-
based microcontrollers,” in RTAS, IEEE, 2018.
[45] S. Pinto et al., “LTZVisor: Trustzone is the key,” in ECRTS, LIPIcs,
[46] R. I. Davis et al., “Hierarchical ﬁxed priority pre-emptive scheduling,”
[47] “Trustzone implmentation in parrot bebop drone..” https://wiki.paparaz
[48] “Navio2.” https://navio2.emlid.com/.
[49] A. Golchin et al., “Boomerang: Real-time i/o meets legacy systems,” in
[50] C. Li et al., “Prioritizing soft real-time network trafﬁc in virtualized
hosts based on xen,” in RTAS, IEEE, 2015.
[51] “ardupilot.” https://ardupilot.org.
[52] N. Zhang et al., “Case: Cache-assisted secure execution on arm proces-
[53] F. Brasser et al., “Sanctuary: Arming trustzone with user-space en-
sors,” in SP, IEEE, 2016.
claves.,” in NDSS, 2019.
[54] “Arm cca.” https://developer.arm.com/architectures/architecture-securit
y-features/confidential-computing.
[55] J. Noorman et al., “Sancus: Low-cost trustworthy extensible networked
devices with a zero-software trusted computing base,” in Security,
USENIX, 2013.
[56] S. Wan et al., “RusTEE: Developing memory-safe arm trustzone appli-
cations,” in ACSAC, IEEE, 2020.
[57] Z. Hua et al., “vtz: Virtualizing ARM trustzone,” in Security, USENIX,
2017.
[58] R. Bahmani et al., “CURE: A security architecture with customizable
and resilient enclaves,” in Security, USENIX, 2021.
[59] L. Guo and F. X. Lin, “Minimal viable io drivers for trustzone,” in
[60] A. Dhar et al., “Protection: Root-of-trust for io in compromised plat-
[61] Z. Zhou et al., “Building veriﬁable trusted path on commodity x86
EuroSys, ACM, 2022.
forms,” in NDSS, ISOC, 2020.
computers,” in S&P, IEEE, 2012.
[62] M. Lentz et al., “Secloak: Arm trustzone-based mobile peripheral
control,” in Mobisys, Applications, and Services, ACM, 2018.
[63] A. M. Azab et al., “SKEE: A lightweight secure kernel-level execution
environment for arm.,” in NDSS, ISOC, 2016.
[64] J. Zhou et al., “Silhouette: Efﬁcient protected shadow stacks for embed-
ded systems,” in Security, USENIX, 2020.
[65] D. Kwon et al., “uXOM: Efﬁcient execute-only memory on ARM
cortex-m,” in Security, USENIX, 2019.
[66] Z. Sun et al., “OAT: Attesting operation integrity of embedded devices,”
in S&P, IEEE, 2020.
[67] S. Zhao et al., “Sectee: A software-based approach to secure enclave
architecture using tee,” in CCS, ACM, 2019.
[68] S. Xi et al., “RT-Xen: Towards real-time hypervisor scheduling in xen,”
[69] S. Pinto et al., “Virtualization on trustzone-enabled microcontrollers?
in EMSOFT, ACM, 2011.
voil`a!,” in RTAS, IEEE, 2019.
RTCSA, IEEE, 2019.
[33] S. Baruah et al., “Towards the design of certiﬁable mixed-criticality
[70] D. de Niz et al., “Mixed-trust computing for real-time systems,” in
systems,” in RTAS, IEEE, 2010.
[34] A. Lyons et al., “Scheduling-context capabilities: A principled, light-
weight operating-system mechanism for managing time,” in EuroSys,
ACM, 2018.
[35] D. Lee, D. Kohlbrenner, S. Shinde, K. Asanovi´c, and D. Song, “Key-
stone: An open framework for architecting trusted execution environ-
ments,” in EuroSys, ACM, 2020.
[36] P. Koeberl et al., “Trustlite: A security architecture for tiny embedded
devices,” in EuroSys, ACM, 2014.
[71] R. Quinonez et al., “SAVIOR: Securing autonomous vehicles with robust
physical invariants,” in Security, USENIX, 2020.
[72] T. Abera et al., “C-FLAT: control-ﬂow attestation for embedded systems
software,” in CCS, ACM, 2016.
[73] N. S. Almakhdhub et al., “µRAI: Securing embedded systems with
return address integrity,” in NDSS, ISOC, 2020.
[74] A. A. Clements et al., “Protecting bare-metal embedded systems with
privilege overlays,” in S&P, IEEE, 2017.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:11:09 UTC from IEEE Xplore.  Restrictions apply. 
14365
[75] R. J. Walls et al., “Control-ﬂow integrity for real-time embedded
systems,” in ECRTS, LIPIcs, 2019.
[76] T. Kim et al., “PASAN: Detecting peripheral access concurrency bugs
within bare-metal embedded applications,” in Security, USENIX, 2021.
[77] “Arm cpu.” https://www.arm.com/products/silicon-ip-cpu.
[78] “Secureshield.” https://www.synopsys.com/designware-ip/processor-sol
utions/arc-secureshield-tech.html.
[79] “Arc-sem.” https://www.synopsys.com/dw/doc.php/ds/cc/ARC SEM 1
10 120D.pdf.
[80] C.-Y. Chen et al., “Indistinguishability prevents scheduler side channels
in real-time systems,” in CCS, ACM, 2021.
[81] “Bcm2835-arm-peripherals.” https://www.raspberrypi.org/app/uploads/
2012/02/BCM2835-ARM-Peripherals.pdf.
[82] A. Vasudevan et al., “Design, implementation and veriﬁcation of an
extensible and modular hypervisor framework,” in S&P, IEEE, 2013.
[83] A. Tang et al., “CLKSCREW: exposing the perils of security-oblivious
energy management,” in Security, USENIX, 2017.
APPENDIX A
SECURE TIMER POPULARITY
To understand the popularity of hardware secure timer,
we surveyed the support of secure timer on two of the
most popular embedded processor manufacturers, ARM and
Synopsys, who occupy the majority of the embedded processor
market shares [77], [78].
TrustZone is the TEE technology by ARM. ARM Cortex-A
supports physical secure timer inside the CPU. We surveyed
all ARM Cortex-A processes on the ARM product list [77],
including A5, A7, A32, A34, A35, A53, A55, A65, A65AE,
A72, A73, A75, A76, A76AE, A77, A78, A78AE, A78C,
A710, and A510 by crosschecking with CPU reference man-
uals. All the ARM Cortex-A processors clearly state secure
physical timer support in their manuals with a few exceptions.
The A710 and A510 are the ARMv9 CPUs with incomplete
documentation, and we were not able to conﬁrm support. The
earlier generation A32 and A5 CPUs also do not provide
any concrete statement about support. We also surveyed the
Cortex-M series, M23, M33, M55, listed on the ARM ofﬁcial
website[77]. They all have support for secure timer. Further-
more, out of the nine SoCs recommended by ARM, six of
them additionally support secure timer peripherals.
For Synopsys, there are two processor series that provide
the SecureShield[78] TEE technology, i.e., EM and SEM. All
EM processors, including EM4, EM6, EM5D, EM7D, EM9D,
EM11D, and EM22FS, have secure timer according to their
manuals. Meanwhile, the SEM processors have watch dog
timer which can be used to reset the processor or for other
functionalities if desired when it expires [79].
APPENDIX B
REALIZING THE AVAILABILITY HARDWARE ABSTRACT
LAYER ON ARM PLATFORMS
To take control of the platform, two key ARM features are
used, secure timer and fast interrupt request (FIQ). To regain
control at a speciﬁc time, we rely on secure timer. Within
the set of core-speciﬁc timers, the majority of the TrustZone-
aware SoCs offer a secure timer that can only be set and
conﬁgured by the secure world. For RPI3 of ARMv8-A, we
make use of the EL1 Secure Physical Timer. For LPC55S69
of ARMv8-M, we make use of the CTimer, which offers
Fig. 12: Flight Controller Protection (left) and Fail Safe Protection (right)
different conﬁguration registers for normal world and secure
world. To prevent the normal world from interrupting, the
secure timer interrupts are routed to FIQ, which has higher
priority than regular IRQ. A TrustZone-enabled GIC permits
all implemented interrupts to be individually deﬁned as Secure
or Non-secure, through the Interrupt Security Registers set
(ICDISRn)[45]. On the I/O front, peripherals are assigned to
the secure world. On ARMv8-M platforms, the assignment
of peripheral devices can be conﬁgured using SoC-speciﬁc
controllers such as the Central Security Unit (CSU) in i.MX6
or TrustZone Protection Controller (TZPC) in Xilinx Zynq-
7100 among others [62]. While we were able to use the
TrustZone features on NXP development board to protect the
peripherals, Raspberry Pi 3 is an evaluation hardware platform
that doesn’t include secure boot or TZASC. Therefore, the I/O
address conﬁguration code is not active in our prototype for
this platform. For physical passage of time, both the banked
systick timer and the system counter in the generic timer
system provide a non-mutable clock. Besides ARM TrustZone,
many recently proposed TEE platforms [17], [28], [30], [18],
[35] also provide the necessary hardware security primitives
for RT-TEE.
APPENDIX C
CASE STUDY ON AUTONOMOUS DRONE
RT-TEE is designed to support different types of safety-
critical real-time task deployments based on security and real-
time policies. In the following, we will show how it can be
used to protect ArduPilot, an autonomous drone controller.
Case 1 – Flight Controller Protection: As shown in Fig-
ure 12, RT-TEE is used to protect the ﬂight controller. Current
commercial drones often install various kinds of third-party
libraries to support different functionalities, such as video
streaming and cartography, which may contain different soft-
ware vulnerabilities. In systems that can tolerate a large TCB,
the whole ﬂight controller can be put into the secure world,
protecting the safety-critical components from the rest of the
system. From the I/O perspective, the peripherals used by
a ﬂight controller have to be assigned to the secure world.
Furthermore, each driver needs to be analyzed and transformed
before deploying in the secure world.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:11:09 UTC from IEEE Xplore.  Restrictions apply. 
15366
Video StreamingFlightControllerI/O ReferenceMonitorSandboxed/DebloatedDriverCritical I/OUncritical I/ONSSFlightControllerI/O ReferenceMonitorSandboxed/DebloatedDriverCritical I/OUncritical I/ONSSI/ODriversI/ODriversFail-safeControllerCase 2 – Fail Safe Protection: As shown in Figure 12,
in the second case, the objective is to ensure fail-safe op-
erations, therefore only the fail-safe controller is protected.
Fail-safe checkers periodically check system status to make
sure the system is in healthy condition. When the system state
falls into a danger zone, a simple fail-safe default will be
triggered to bring the system into safety. In this case study,
we implemented the fail-safe checker along with a default
fail-safe recovery landing procedure. All of the sensors and
corresponding drivers used by fail-safe controller are assigned
and migrated to the secure world. Upon detection of a failure,
the self-contained lander will take over the drone and land it.
EVALUATION ON DIFFERENT PHYSICAL CONDITIONS
APPENDIX D
(a) Different wind speed
(b) Position difference
(a) Roll command of Plane
(b) Pitch command of Plane
(c) Steering command of Rover
(d) Throttle command of Rover
Fig. 14: Additional Control Performance with RT-TEE and Baseline w/o TEE
APPENDIX E
ADDITIONAL EVALUATION ON CONTROL PERFORMANCE
To understand the potential impact of RT-TEE on different
system controls across different CPS platforms. For plane, the
roll command and pitch command are used to measure the
control deviation. From Fig. 14a and Fig. 14b, we can observe
that the performance with RT-TEE and baseline without TEE
is almost identical. The similarity in performance with RT-TEE
and baseline without TEE can also be observed in the rover
experiment shown in Fig. 14c and Fig. 14d, where steering
and throttle are used as the metric.