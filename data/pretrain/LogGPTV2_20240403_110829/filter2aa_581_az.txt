code interception attack (more details in Chapter 14) in a mobile environment. As we 
discussed in the previous section, when you use a custom URL scheme to retrieve the 
authorization code from the OAuth authorization server, there can be a case where it 
goes to a different app, which is also registered with the mobile device for the same 
custom URL scheme as the original app. An attacker can possibly do this with the 
intention of stealing the code.
When the authorization code gets to the wrong app, it can exchange it to an access 
token and then gets access to the corresponding APIs. Since we use authorization code 
with no client secret in mobile environments, and the client id of the original app is 
public, the attacker has no issue in exchanging the code to an access token by talking to 
the token endpoint of the authorization server.
Figure 10-4. A typical login flow for a native mobile app with OAuth 2.0 and PKCE
Chapter 10  aCCessing apis via native Mobile apps
236
Let’s see how PKCE solves the code interception attack (see Figure 10-4):
 1. The native mobile app, before redirecting the user to the 
authorization server, generates a random value, which is called 
the code_verifier. The value of the code_verifier must have 
a minimum length of 43 characters and a maximum of 128 
characters.
 2. Next the app has to calculate the SHA256 of the code_verifier and 
find its base64-url- encoded (see Appendix E) representation, 
with no padding. Since SHA256 hashing algorithm always results 
in a hash of 256 bits, when you base64-url-encode it, there will 
be a padding all the time, which is represented by the = sign. 
According to the PKCE RFC, we need to remove that padding—
and that value, which is the SHA256-hashed, base64-url-encoded, 
unpadded code_verifier, is known as the code_challenge.
 3. Now, when the native app initiates the authorization code 
request and redirects the user to the authorization server, it has 
to construct the request URL in the following manner, along 
with the code_challenge and the code_challenge_method query 
parameters. The code_challenge_method carries the name of the 
hashing algorithm.
https://idp.foo.com/authorization?client_id=FFGFGOIPI7898778&s
copeopenid&redirect_uri=com.foo.app:/oauth2/redirect&response_
type=code&code_challenge=YzfcdAoRg7rAfj9_Fllh7XZ6BBl4PIHC-
xoMrfqvWUc&code_challenge_method=S256"
 4. At the time of issuing the authorization code, the authorization 
server must record the provided code_challenge against the 
issued authorization code. Some authorization servers may 
embed the code_challenge into the code itself.
 5. Once the native app gets the authorization code, it can exchange 
the code to an access token by talking to the authorization server’s 
token endpoint. But, when you follow PKCE, you must send the 
code_verifier (which is corresponding to the code_challenge) 
along with the token request.
Chapter 10  aCCessing apis via native Mobile apps
237
curl -k --user "XDFHKKJURJSHJD" -d "code=XDFHKKJURJSHJD&grant_
type=authorization_code&client_id=FFGFGOIPI7898778  
&redirect_uri=com.foo.app:/oauth2/redirect&code_ 
verifier=ewewewoiuojslkdjsd9sadoidjalskdjsdsdewewewoiuojslkd 
jsd9sadoidjalskdjsdsd" https://idp.foo.com/token
 6. If the attacker’s app gets the authorization code, it still cannot 
exchange it to an access token, because only the original app 
knows the code_verifier.
 7. Once the authorization server receives the code_verifier along with the 
token request, it will find the SHA256-hashed, base64-url-encoded, 
unpadded value of it and compare it with the recorded code_challenge. If 
those two match, then it will issue the access token.
 Browser-less Apps
So far in this chapter, we only discussed about mobile devices, which are capable of 
spinning up a web browser. There is another growing requirement to use OAuth secured 
APIs from applications running on devices with input constraints and no web browser, 
such as smart TVs, smart speakers, printers, and so on. In this section, we discuss how 
to access OAuth 2.0 protected APIs from browser-less apps using the OAuth 2.0 device 
authorization grant. In any case, the device authorization grant does not replace any 
of the approaches we discussed earlier with respect to native apps running on capable 
mobile devices.
 OAuth 2.0 Device Authorization Grant
The OAuth 2.0 device authorization grant2 is the RFC 8628, which is published by 
the IETF OAuth working group. According to this RFC, a device to use the device 
authorization grant type must satisfy the following requirements:
• 
The device is already connected to the Internet or to the network, 
which has access to the authorization server.
• 
The device is able to make outbound HTTPS requests.
2 https://tools.ietf.org/html/rfc8628
Chapter 10  aCCessing apis via native Mobile apps
238
• 
The device is able to display or otherwise communicate a URI and 
code sequence to the user.
• 
The user has a secondary device (e.g., personal computer or 
smartphone) from which they can process a request.
Let’s see how device authorization grant works, with an example. Say we have a 
YouTube app running on a smart TV, and we need the smart TV to access our YouTube 
account on behalf of us. In this case, YouTube acts as both the OAuth authorization 
server and the resource server, and the YouTube app running on the smart TV is the 
OAuth client application.
 1. The user takes the TV remote and clicks the YouTube app to 
associate his/her YouTube account with the app.
 2. The YouTube app running on the smart TV has an embedded 
client ID and sends a direct HTTP request over HTTPS to the 
authorization server.
POST /device_authorization HTTP/1.1
Host: idp.youtube.com
Content-Type: application/x-www-form-urlencoded
client_id=XDFHKKJURJSHJD
Figure 10-5. A typical login flow for a browser-less app with OAuth 2.0
Chapter 10  aCCessing apis via native Mobile apps
239
 3. In response to the preceding request, the authorization server 
returns back a device_code, a user_code, and a verification 
URI. Both the device_code and the user_code have an expiration 
time associated with them, which is communicated to the client 
app via expires_in parameter (in seconds).
HTTP/1.1 200 OK
Content-Type: application/json
Cache-Control: no-store
{
  "device_code": "GmRhmhcxhwAzkoEqiMEg_DnyEysNkuNhszIySk9eS",
  "user_code": "WDJB-MJHT",
  "verification_uri": "https://youtube.com/device",
  "verification_uri_complete":
            "https://youtube.com/device?user_code=WDJB-MJHT",
  "expires_in": 1800,
  "interval": 5
}
 4. The YouTube client app instructs the user to visit the provided 
verification URI (from the preceding response) and confirm the 
authorization request with the provided user code (from the 
preceding response).
 5. Now the user has to use a secondary device (a laptop or mobile 
phone) to visit the verification URI. While that action is in 
progress, the YouTube app will keep polling the authorization 
server to see whether the user has confirmed the authorization 
request. The minimum amount of time the client should wait 
before polling or the time between polling is specified by the 
authorization server in the preceding response under the 
interval parameter. The poll request to the token endpoint of the 
authorization server includes three parameters. The grant_type 
parameter must carry the value urn:ietf:params:oauth:grant-
type:device_code, so the authorization server knows how to 
Chapter 10  aCCessing apis via native Mobile apps
240
process this request. The device_code parameter carries the 
device code issued by the authorization server in its first response, 
and the client_id parameter carries the client identifier of the 
YouTube app.
POST /token HTTP/1.1
Host: idp.youtube.com
Content-Type: application/x-www-form-urlencoded
grant_type=urn%3Aietf%3Aparams%3Aoauth%3Agrant-type%3Adevice_code
&device_code=GmRhmhcxhwAzkoEqiMEg_DnyEysNkuNhszIySk9eS
&client_id=459691054427
 6. The user visits the provided verification URI, enters the user code, 
and confirms the authorization request.
 7. Once the user confirms the authorization request, the 
authorization server issues the following response to the request 
in step 5. This is the standard response from an OAuth 2.0 
authorization server token endpoint.
HTTP/1.1 200 OK
Content-Type: application/json;charset=UTF-8
Cache-Control: no-store
Pragma: no-cache
{
       "access_token":"2YotnFZFEjr1zCsicMWpAA",
       "token_type":"Bearer",
       "expires_in":3600,
       "refresh_token":"tGzv3JOkF0XG5Qx2TlKWIA",
 }
 8. Now the YouTube app can use this access token to access the 
YouTube API on behalf of the user.
Chapter 10  aCCessing apis via native Mobile apps
241
 Summary
• 
There are multiple grant types in OAuth 2.0; however, while 
using OAuth 2.0 to access APIs from a native mobile app, it is 
recommended to use authorization code grant type, along with Proof 
Key for Code Exchange (PKCE).
• 
PKCE protects the native apps from code interception attack.
• 
The use of browser-less devices such as smart TVs, smart speakers, 
printers, and so on is gaining popularity.
• 
The OAuth 2.0 device authorization grant defines a standard flow to 
use OAuth 2.0 from a browser-less device and gain access to APIs.
Chapter 10  aCCessing apis via native Mobile apps
243
© Prabath Siriwardena 2020 
P. Siriwardena, Advanced API Security, https://doi.org/10.1007/978-1-4842-2050-4_11
CHAPTER 11
OAuth 2.0 Token Binding
Most of the OAuth 2.0 deployments do rely upon bearer tokens. A bearer token is like 
“cash.” If I steal 10 bucks from you, I can use it at a Starbucks to buy a cup of coffee—no 
questions asked. I do not need to prove that I own the ten-dollar note. Unlike cash, if 
I use my credit card, I need to prove the possession. I need to prove I own it. I need to 
sign to authorize the transaction, and it’s validated against the signature on the card. 
The bearer tokens are like cash—once stolen, an attacker can use it to impersonate the 
original owner. Credit cards are like proof of possession (PoP) tokens.
OAuth 2.0 recommends using Transport Layer Security (TLS) for all the interactions 
between the client, authorization server, and resource server. This makes the OAuth 2.0 
model quite simple with no complex cryptography involved—but at the same time, it 
carries all the risks associated with a bearer token. There is no second level of defense. 
Also not everyone is fully bought into the idea of using OAuth 2.0 bearer tokens—just 
trusting the underlying TLS communication. I’ve met several people—mostly from the 
financial domain—who are reluctant to use OAuth 2.0, just because of the bearer tokens.
An attacker may attempt to eavesdrop authorization code/access token/refresh 
token (see Chapter 4 for details) in transit from the authorization server to the client, 
using any of the following means:
• 
Malware installed in the browser (public clients).
• 
Browser history (public clients/URI fragments).
• 
Intercept the TLS communication between the client and the 
authorization server or the resource server (exploiting the 
vulnerabilities in the TLS layer like Heartbleed and Logjam).
244
• 
TLS is point to point (not end to end)—an attacker having access to a 
proxy server could simply log all the tokens. Also, in many production 
deployments, the TLS connection is terminated at the edge, and 
from there onward, it’s either a new TLS connection or a plain HTTP 
connection. In either case, as soon as a token leaves the channel, it’s 
no more secure.
 Understanding Token Binding
OAuth 2.0 token binding proposal cryptographically binds security tokens to the TLS 
layer, preventing token export and replay attacks. It relies on TLS—and since it binds 
the tokens to the TLS connection itself, anyone who steals a token cannot use it over a 
different channel.
We can break down the token binding protocol into three main phases (see 
Figure 11-1).
Figure 11-1. Three main phases in the token binding protocol
 Token Binding Negotiation
During the negotiation phase, the client and the server negotiate a set of parameters 
to use for token binding between them. This is independent of the application layer 
protocols—as it happens during the TLS handshake (see Appendix C). We discuss more 
about this in the next section. The token binding negotiation is defined in the RFC 8472. 
Keep in mind we do not negotiate any keys in this phase, only the metadata.
Chapter 11  Oauth 2.0 tOken Binding
245
 Key Generation
During the key generation phase, the client generates a key pair according to the 
parameters negotiated in the negotiation phase. The client will have a key pair for each 
host it talks to (in most of the cases).
 Proof of Possession
During the proof of possession phase, the client uses the keys generated in the key 
generation phase to prove the possession. Once the keys are agreed upon, in the key 
generation phase, the client proves the possession of the key by signing the exported 
keying material (EKM) from the TLS connection. The RFC 5705 allows an application to 
get additional application-specific keying material derived from the TLS master secret 
(see Appendix C). The RFC 8471 defines the structure of the token binding message, 
which includes the signature and other key materials, but it does not define how to 
carry the token binding message from the client to the server. It’s up to the higher-level 
protocols to define it. The RFC 8473 defines how to carry the token binding message over 
an HTTP connection (see Figure 11-2).
Figure 11-2. The responsibilities of each layer in a token binding flow
Chapter 11  Oauth 2.0 tOken Binding
246
 TLS Extension for Token Binding Protocol 
Negotiation
To bind security tokens to the TLS connection, the client and the server need to first 
agree upon the token binding protocol (we’ll discuss about this later) version and 
the parameters (signature algorithm, length) related to the token binding key. This 
is accomplished by a new TLS extension without introducing additional network 
roundtrips in TLS 1.2 and earlier versions.
The token binding protocol version reflects the protocol version defined by the 
Token Binding Protocol  (RFC 8471)—and the key parameters are defined by the same 
specification itself.
The client uses the Token Binding TLS extension to indicate the highest supported 
token binding protocol version and key parameters. This happens with the Client Hello 
message in the TLS handshake. To support the token binding specification, both the 
client and the server should support the token binding protocol negotiation extension.
The server uses the Token Binding TLS extension to indicate the support for the 
token binding protocol and to select the protocol version and key parameters. The server 
that supports token binding and receives a Client Hello message containing the Token 
Binding extension will include the Token Binding extension in the Server Hello if the 
required conditions are satisfied.
If the Token Binding extension is included in the Server Hello and the client supports 
the token binding protocol version selected by the server, it means that the version 
and key parameters have been negotiated between the client and the server and shall 
be definitive for the TLS connection. If the client does not support the token binding 
protocol version selected by the server, then the connection proceeds without token 
binding.
Every time a new TLS connection is negotiated (TLS handshake) between the client 
and the server, a token binding negotiation happens too. Even though the negotiation 
happens repeatedly by the TLS connection, the token bindings (you will learn more 
about this later) are long-lived; they encompass multiple TLS connections and TLS 
sessions between a given client and server.
In practice, Nginx (https://github.com/google/ngx_token_binding) and Apache 
(https://github.com/zmartzone/mod_token_binding) have support for token binding. 
An implementation of Token Binding Protocol Negotiation TLS Extension in Java is 
available here: https://github.com/pingidentity/java10-token-binding- negotiation.
Chapter 11  Oauth 2.0 tOken Binding
247
 Key Generation
The Token Binding Protocol specification (RFC 8471) defines the parameters related to 
key generation. These are the ones agreed upon during the negotiation phase.
• 
If rsa2048_pkcs1.5 key parameter is used during the negotiation 
phase, then the signature is generated using the RSASSA-PKCS1-v1_5 
signature scheme as defined in RFC 3447 with SHA256 as the hash 
function.
• 
If rsa2048_pss key parameter is used during the negotiation phase, 