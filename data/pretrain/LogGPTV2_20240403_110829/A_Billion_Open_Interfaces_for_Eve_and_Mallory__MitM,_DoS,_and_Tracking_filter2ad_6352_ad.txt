(cid:107)
1024
and compute iφ, tφ
For the second target, the attacker will calculate t as tφ =
AW analogously to Eqs. (16)
and (17). We verify the correctness of these calculations ex-
perimentally and show the resulting phase offset between two
targets for a target phase φ = τ/4 in Fig. 10.
(cid:106) TTx−Ts
(cid:107)(cid:19)
(cid:106) t
1024
64
(cid:18)(cid:22)t mod 64
(cid:23)
i =
16
tAW = 64−t mod 64
+ 4
.
USENIX Association
28th USENIX Security Symposium    45
s2s1444444440444444440000644440440000004400004400006440044000ττs2s1440000444444440000644440440000004400004400006440044000ττφ = τ/4051015202530Time[s]024PhaseOﬀset[π/16]John–JaneAttackStartgets. A more sophisticated attacker could employ attacks on
the PHY layer (e. g., using directional antennæ) to achieve a
similar effect as that of unicasting. However, such attacks are
difﬁcult to carry out in practice.
6.4 Related Work: Reactive Jamming
At ﬁrst glance, our desynchronization attack achieves a simi-
lar effect as a reactive jammer [37, 52, 70, 91]. However, the
desynchronization attack can be more attractive for two rea-
sons: ﬁrst, desynchronization in principle needs less energy
than a jamming attack. The desynchronization attacker only
needs to emit one frame every 1.5 s to maintain their position
as a master node because AWDL nodes elect a new master if
they have not received an AF for more than 1.5 s from their
current one. In contrast, a reactive jammer needs to emit a
jamming signal for every packet that the target sends. Second,
it allows intercepting frames from its targets which enables
to mount more sophisticated MitM attacks as presented in
Section 7. In contrast, a normal jammer kills the frame in
transit disallowing anyone (even the attacker themselves) to
decode the frame [70]. There exist more sophisticated receiver
designs that cancel out the jammer’s own signal, but this typi-
cally requires special hardware [37]. Our desynchronization
attack only requires a system with an off-the-shelf Wi-Fi chip
and, thus, could even be implemented in a smartphone [71].
7 MitM: Planting Malware via AirDrop
This section describes a MitM attack on the popular AirDrop
service which allows iOS and macOS devices to exchange
ﬁles directly via AWDL. First, we assess the security of Air-
Drop and ﬁnd that poor UI design choices enable an attacker
to masquerade as a valid receiver. Then, we describe a com-
plete MitM attack on AirDrop which prevents any sender to
discover a valid receiver using a DoS attack and subsequently
can intercept and modify any AirDrop ﬁle transmission. Fi-
nally, we discuss possible mitigations for the attack.
7.1 Ambiguous Receiver Authentication State
We have observed that AirDrop employs two different kinds
of connections which we term authenticated and unauthenti-
cated (see Section 3). Further, the user can set its device to be
discoverable by contacts only or everyone. Counter-intuitively,
the discoverability setting only applies to the receiver side. In
particular, while a receiver in contacts-only mode will only
accept ﬁles from authenticated senders, a sender will see all
discoverable receivers irrespective of whether they are au-
thentic or not. This ambiguity has profound implications for
security because it is up to the user of the sending device to
decide whether a connection is authenticated or not which can
be non-trivial. The only visual cue to differentiate between
an authenticated and unauthenticated connection is that an
authenticated connection will show the receiver’s name and
photo from the sender’s address book. Neither provides sufﬁ-
cient evidence to unambiguously decide whether a receiver
Figure 11: Packet loss for different phase shifts.
6.2 Evaluating Packet Loss
We evaluate the impact of our desynchronization attack by
measuring the packet loss via the ping program. In particu-
lar, we use an APU board [66] equipped with a Qualcomm
Atheros AR928X Wi-Fi card to act as an attacker which can
inject AWDL AFs. The ICMP echo requests are sent from
a MacBook Pro (Late 2015, macOS 10.13) to an iPhone 8
(iOS 12). The attacker induces different phase shifts spanning
one period. The sender emits 100 ICMP echo requests per
experiment which we repeat 10 times and plot the resulting
packet loss in Fig. 11. The error bars indicate the standard
deviation. In addition, we include the inverse channel overlap
(see Section 2) which is calculated for two identical sequences
which we have observed were the most common ones during
our experiment: 44,44,44,0,0,0,0,0,6,44,44,0,0,0,0,0.
At φ = 0, there is no attack, while at φ = 16, the targets are
desynchronized by a full period which unsurprisingly does
impair communication reliability. The other results indicate
that the desynchronization attack signiﬁcantly degrades com-
munication between the targets, peaking at phase shifts where
the targets are off by a quarter (φ = 4) and three-quarter period
(φ = 12) which is where the channel overlap has its minima
(and the inverse overlap its maxima). At these settings, the
packet loss is almost 100 %. Surprisingly, some phase shifts
(e. g., φ = 6,7,9,10,15) result in less packet loss than the
overlap predicts. We suspect the reason to be retransmissions
on the MAC layer (up to 7 times in Wi-Fi [73]) which, at the
cost of longer latency, increase the chance that a frame will
be received in a subsequent AW.
6.3 Mitigating Desynchronization
Devices can mitigate our desynchronization attack by discard-
ing unicast AFs. Not accepting unicast frames is an extremely
effective and practical countermeasure because it will cause
all nodes in range to process the same information exclu-
sively. While this does not prevent an attacker from winning
the master election and, thus, sending invalid synchronization
parameters, as all nodes process the same frames, it becomes
much harder to create a deterministic offset between two tar-
46    28th USENIX Security Symposium
USENIX Association
012345678910111213141516PhaseShiftφ[π/16]0.000.250.500.751.00Overlap(inverse)PacketLossauthentic
authentic
(a) Sender has
John’s contact
photo
(b) Sender does
not have John’s
contact photo
unauthentic
(c) Sender does
not have John
as a contact
unauthentic
(d)
Attacker
spoofs
John’s
identity
Figure 12: UI representation of a receiver.
is authentic. First, if no contact photo is available (users aug-
ment only 27 % of their contacts with a photo according to
our survey), the icon contains the receiver’s initials in a grey
circle which is similar to that of an unauthenticated receiver
(a grey circle with a head’s silhouette). Second, the name
that is displayed underneath unauthenticated receivers is the
receiver’s device name. Based on our results in Section 5, a
device name contains the user’s given name in the majority of
the cases (more than 70 % according to our experimental eval-
uation in Section 5), which the attacker can exploit to create
a trustworthy-looking device name. Unless users are sensi-
tive to such subtle UI changes, an attacker can easily trick
them into sending ﬁles via an unauthenticated connection.
Figure 12 compares the different receiver icons including a
spoofed identity by the attacker. We want to highlight the
similarity between an authenticated identity (Fig. 12b) and a
spoofed identity (Fig. 12d).
7.2 The Complete AirDrop MitM Attack
Our MitM attack on AirDrop is carried out in three phases.
First, we break the discovery process to put ourselves in a
privileged position. Second, we wait until the target receiver
becomes discoverable by everyone, effectively forcing the
user to downgrade the connection. Third, we relay and ma-
nipulate the actual data transfer to plant arbitrary ﬁles at the
receiver. We illustrate the attack in Fig. 13 and explain each
phase in more detail below. Also, we provide a video PoC of
the attack [77].
(1) Breaking Discovery via DoS. The most crucial part of the
attack is preventing the sender to discover the receiver such
that it appears as an icon in the sharing pane. In particular,
we need to prevent that the Discovery handshake via HTTPS
completes successfully. In principle, such a DoS attack could
be carried out via our desynchronization attack (Section 6).
However, we found that it could not reliably prevent the short
Discovery request and responses from being received. This
is due to the fact that AirDrop senders increase the channel
allocation when starting the discovery process, thus, increas-
ing the overlap with the receiver even when desynchronized.
As an alternative, we used the well-known TCP reset attack
which sends TCP segments including an RST ﬂag to the tar-
gets which, in turn, immediately drops the connection. For
this attack, the attacker sends out an RST reply for every TCP
segment that is not addressed to itself and effectively prevents
any reconnection attempts from the sender to the receiver.
(2) Downgrading an Authenticated Connection. For a com-
plete MitM attack, we need to authenticate to the receiver.
Otherwise, it will deny any Ask or Upload requests. If the
receiver is discoverable by everyone, this is trivial, since it
accepts all authentication attempts, even those with a self-
signed certiﬁcate which the attacker can easily generate (see
Section 3.3). The receiver indicates a successful authentica-
tion attempt from a non-contact by including its device name
in the Discover response. However, we have found that in
most cases (59.4 % in our survey), users set their device to
contacts only. In such cases, we leverage the ongoing DoS
attack to force the receiver to try the everyone setting.
(3) Relaying and Modifying Data Transfer. Once the re-
ceiver becomes discoverable (we can check when a receiver is
discoverable by everyone by periodically sending Discovery
requests), we advertise our own AirDrop identity via mDNS
and wait until the sender tries to perform the authentication
handshake via HTTPS for discovery which we let succeed.
We relay the sender’s Ask request to the receiver including
the original ﬁle thumbnail to make the request appear valid.
After the receiver accepts the transmission request, we relay
the answer back to the sender which—in turn—starts to send
the actual ﬁle. We can now decide whether to relay a modi-
ﬁed version of the ﬁle or send an entirely new one possibly
containing malware to the receiver.
7.3
Our PoC of the MitM attack consists of two components.
First, we re-implement AWDL such that we were able to
overhear and parse data frames not addressed to us which is
required to mount a TCP reset attack. Second, we implement
an AirDrop-compatible client and server which we use to
probe the discoverability status of the receiver target and
ﬁnally implement the MitM attack as depicted in Fig. 13. We
make both projects available as open source software [76, 78].
AWDL. Our AWDL implementation [76] is written in C and
runs on Linux as well as on macOS. On macOS, the imple-
mentation can be used as a drop-in replacement for Apple’s
own AWDL interface. We use the monitor mode and frame
injection of the system’s Wi-Fi card to receive and inject raw
IEEE 802.11 frames. In addition, we provide a virtual network
interface (via tuntap) to the system such that any IPv6-capable
application can use AWDL. Internally, our implementation
takes care of frame parsing, synchronization, election, and
scheduling data frames in the correct AWs.
AirDrop. Our AirDrop implementation [78] is written in
Python and implements an unauthenticated AirDrop sender
Implementation
USENIX Association
28th USENIX Security Symposium    47
Figure 13: Protocol ﬂow and user interaction of our MitM attack on AirDrop.
and receiver. The code exposes a command line interface
which allows to ﬁnd discoverable receivers, send ﬁles to them,
and receive ﬁles from any sender.
7.4 Mitigation
We discuss possible mitigation strategies. We examine them
according to complexity to implement, starting with the miti-
gation requiring the least number of changes to existing Air-
Drop implementations.
Provide Stronger Visual Cues for Authenticated Re-
ceivers. One of the core problems of the current design of
AirDrop is that a user might have a hard time to differenti-
ate between authenticated and unauthenticated receivers (see
Section 7.1 and Fig. 12). Currently, the only cues to decide
whether a receiver is authenticated are the display of a contact
photo and contact name. We have shown that the former is not
commonly available (users augment 27.4 % of their contacts
with photos) and the latter can be spoofed. Therefore, we pro-
pose to provide stronger visual cues that unambiguously tell
the user if a receiver is authenticated or not. This is already
customary in web browsers where HTTPS-protected websites
are augmented with a green (lock) symbol telling the user that
the website they are visiting is authentic.
Reset Everyone to Contacts Only After a Timeout. Users
might set the discoverability setting of their device to every-
one for convenience or if they used it for one occasion and
then forgot to reset it. In either case, we believe that the ev-
eryone setting should only be used except when it is required,
48    28th USENIX Security Symposium
USENIX Association
Sender “Jane”Receiver “John”AttackerHTTPS POST /DiscoverJane selects “John” as the receiver.Attacker forwards request with original thumbnail and device name “Jane”; forwards response as is.(2) AUTHENTICATION(1) DISCOVERY (as in Figure 2)TCP RSTTCP RSTDoS. Attacker disrupts all overheard connections by mounting a TCP reset attack, thereby preventing Jane from discovering John.Only while John is not discoverable by everyone, the attacker periodically tries to authenticate to John.HTTPS POST /DiscoverHTTPS OK 200without device nameWhen John already is or becomes discoverable by everyone, the attacker successfully authenticates to John.HTTPS POST /DiscoverHTTPS OK 200with device name “John’s iPhone”Attacker advertisesAirDrop service as in (1)HTTPS POST /DiscoverHTTPS OK 200with device name “John”The attacker immediately starts advertising a service using “John” as its computer name.Jane authenticates and displays the attacker’s identity “John” in the sharing pane.(3) DATA TRANSFERHTTPS POST /Askwith device name “Jane’s iPhone”HTTPS OK 200HTTPS POST /Askwith device name “Jane”HTTPS OK 200HTTPS POST /UploadHTTPS POST /UploadHTTPS OK 200HTTPS OK 200Attacker receives original file and forwards a modified copy to Johni. e., if one wants to receive a ﬁle from a non-contact. To pro-
tect negligent users, we propose to use a timeout after which
the discoverability setting is reset to contacts only. Alterna-
tively, one could reset the setting the next time the device
is locked. This would also prevent past cases where people
would receive inappropriate photographs from strangers in
public places [13, 41] because, in contacts-only mode, de-
vices will transparently reject all request from unauthenticated
senders.
Introduce Secure AirDrop Mode for Non-Contacts. Our
last proposal involves deprecating unauthenticated connec-
tions and instead establish authentication with a non-contact
via an out-of-band (OOB) channel. AirDrop could transmit
one-time cookies with similar functionality as the record
data (see Section 3.3) during the initial HTTPS authentication
handshake (see Section 3.2). The one-time cookies could be
validated via an OOB channel such as NFC or via QR codes.
After one transfer (or after a speciﬁc timeout), each device
deletes its one-time cookie. By committing to the one-time
cookie in the TLS handshake, a MitM attack on the OOB
channel would be fruitless because the attacker could not es-
tablish a TLS connection with the same key. Unfortunately,
such a mode would require one more manual step by both
parties and, therefore, would impair usability.
7.5 Related Work: Attacks on AirDrop
Other attacks on AirDrop have been presented before. An im-
personation attack [10] exploits mDNS/DNS-SD to redirect
ﬁle transmissions to an attacker for unauthenticated connec-
tions. In particular, the attack uses forged SRV and AAAA
responses to redirect an AirDrop ID to the attacker. In contrast
to our work, [10] does not differentiate between authenticated
and unauthenticated connections and claims that the UUID
certiﬁcate (see Section 3.3) could not be bound to any con-
tact identiﬁers, which we have found to be untrue. Also, the
attack only works on unauthenticated connections, while our
attack also targets authenticated connections via a downgrade
attack and we present a complete MitM attack which allows
an attacker to send malicious ﬁles to the receiver stealthily.
Finally, [10] proposes a conﬂict detection mechanism for Mul-