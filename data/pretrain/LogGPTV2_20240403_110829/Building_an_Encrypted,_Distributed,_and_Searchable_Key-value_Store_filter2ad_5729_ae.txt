formance over encrypted local indexes. Speciﬁcally, we also
compare our results with an encrypted global index, which
is implemented from the encrypted dictionary design in [5].
We conduct a query for a given attribute with up to 10, 000
data values. In Figure 6, we can see that the time cost in-
creases linearly from 2, 000 to 10, 000 data values for the
same number of nodes. But the query on the global index
(b) Secure query on 6 nodes
Figure 6: Query performance over encrypted local indexes
is more than 3× slower than the local indexes. The reason
is that the global index does not consider the data locality.
To process a secure query, the node ﬁrst locates where the
matched data is stored, and it will establish another connec-
tion to the target node if the data is not at the current node.
In that case, the target node will also establish a connection
to the client to return the data. We note that even the num-
ber of tokens scales linearly with the number of the nodes
in our design, while the global index design only requires
the client to generate one token, the overhead introduced by
the token transmission is much smaller than the overhead
introduced by extra interactions across diﬀerent nodes.
From the results in Figure 6, the secure query can be
eﬀectively handled in parallel, the time cost with 6 nodes is
roughly half of the time cost with 3 nodes when querying
the same number of encrypted data. That is because the
data in a column are fully scrambled via PRF, they are
evenly distributed across diﬀerent nodes, and each node will
process roughly the same number of entries in their local
index. When more nodes are used, the time of retrieving the
same number of data will be reduced. As being illustrated,
it takes around 2s and 4s to retrieve 10, 000 encrypted data
values from 6 nodes and 3 nodes respectively. We believe
that this advantages will be more apparently for other secure
rich queries like counting, range, and aggregation.
On the contrary, the encrypted global index does not en-
joy the beneﬁts of the scalability. The query time does not
decrease linearly when the number of nodes increases. As
seen in Figure 6, it takes 13s and 17s to retrieve 10, 000 en-
crypted data values from 6 nodes and 3 nodes respectively.
For one reason, the encrypted global index needs to be pro-
cessed in a serial way. For the other reason, the costs intro-
duced by inter-node connections dominate the cost of secure
query processing. In summary, the proposed encrypted lo-
Number of data records (log scale)102103104105Time cost (s)090180270360450Data relocationIndex relocationNumber of retrieved values over 3 nodes2K4K6K8K10KQuery time (s)048121620Local encrypted indexGlobal encrypted indexNumber of retrieved values over 6 nodes2K4K6K8K10KQuery time (s)048121620Local encrypted indexGlobal encrypted index556cal indexes can support very eﬃcient search queries over
encrypted data, and outperform the encrypted global index
if prior encrypted index designs are directly applied.
6. RELATED WORKS
Private DBMS systems: Practical encrypted DBMS sys-
tems recently are proposed and implemented to support
rich queries without compromising the data conﬁdentiality.
Among which, one well-known system is CryptDB designed
by Popa et al. [32].
It proposes to use onion encryption
that encrypts the data in one or more layers for queries with
diﬀerent functionalities. Meanwhile, the underlying struc-
ture of DBMS keeps unchanged so as to support most of
SQL queries. After that, Tu et al. develop MONOMI to
improve the performance of CryptDB and allow analytical
queries over encrypted data [37]. It is essentially built on
CryptDB but includes a dedicated query planner to decide
the optimized partitions of complex analytic queries, i.e.,
part of sub-queries or computation are conducted at the
server, while the rest are done at the client.
Very recently, Pappas et al.
present BlindSeer to
achieve better query privacy and support arbitrary boolean
queries [29]. It utilizes an encrypted Bloom ﬁlter tree as the
back end storage, and the query is embedded into a Bloom
ﬁlter. For each query, BlindSeer performs secure function
evaluation via garbled circuits and oblivious transfer for the
tree traversal. We note that all the above encrypted DMBSs
focus on executing rich queries over encrypted data in the
centralized DBMS systems, which are not designed for the
scale and performance needs for modern data-intensive ap-
plications. They are a diﬀerent line of work compared to
our system.
Another kind of mechanism for protecting data and
query privacy is to apply fragmentation and encryption in
databases [1, 8]. Aggarwal et al. suppose data to be stored
at two non-collude servers. By fragmenting the data, the
sensitive associations are protected [1]. Under the same as-
sumption, Ciriani et al. model the privacy constraints to
represent the sensitivity of attributes and the associations,
and improve the performance by minimizing the number of
fragmentations [8]. On the other hand, Chow et al. pro-
pose a two-party computation model for privacy-preserving
query on distributed databases [7]. In short, the above de-
signs make a weak assumption such that the involved servers
should not collude. While in our design, even if all the nodes
collude, the data conﬁdentiality will be still guaranteed.
Search over encrypted data: Our system design is also
related to another line of works [5, 6, 10, 19] (to list a few)
called searchable symmetric encryption (SSE), i.e., secure
and eﬃcient search schemes over encrypted data. Curtmola
et al. improve the security deﬁnitions of SSE, and introduce
new constructions with sublinear search time [10]. Then Ka-
mara et al. propose a dynamic SSE scheme that supports
adding and deleting ﬁles, and precisely capture the leakage
of dynamic operations [19]. On the other hand, several at-
tacks on SSE are proposed [4, 18], which exploit the search
pattern and the access pattern to recover the queries and
the document set. Yet, those attacks are all based on the
assumption that the adversary knows partial information
about the document and the queries.
We note that Chase et al. design a SSE scheme for arbi-
trarily structured data [6]. They introduce the notion struc-
tured encryption, and propose a construction that enables
lookup queries on encrypted matrix-structured data with
controlled disclosure.
In particular, the data in a matrix
(i.e., table) is encrypted and permuted in a pseudo-random
fashion. But this construction is hardly updated and not
scalable. Very recently, Cash et al. design and implement
an eﬃcient dynamic SSE to handle huge amount of data [5].
When a huge index stores in an external memory, the pro-
posed hybrid packing approach addresses the locality of doc-
uments with same keywords, and improves I/O parallelism.
Kuzu et al. propose an encrypted and distributed index
for secure keyword search [22]. They build an encrypted
inverted index, and then partition it into diﬀerent regions.
Unfortunately, all the above designs cannot incrementally
be scaled; that is, the rebuilding of the entire index is re-
quired when new nodes are added. Besides, even if they can
be applied by treating the non-encrypted key-value store as
the black box, a large number of connections and interac-
tions would be introduced between the data node and the
index node, because those designs do not consider the data
and index locality speciﬁcally.
7. CONCLUSION
This paper presents a scalable, private, and searchable
key-value store, which allows a client application to out-
source a growing amount of data to public clouds with strong
privacy assurance. The proposed underlying storage is an
encrypted key-value store. It is secure and highly scalable.
Data values are distributed evenly through a standard con-
sistent hashing algorithm. Two basic APIs are accordingly
provided for secure and fast data retrieval and update on sin-
gle encrypted data value. To support search query over en-
crypted and distributed data, we then design the encrypted
local indexes with the consideration on data and index local-
ity, and give rigorous security analysis. We implement the
system prototype, and deploy it to Microsoft Azure, and
evaluate it comprehensively according to the performance
metrics for distributed database systems. The results show
that our system is practical, which introduces little security
overhead compared to plaintext systems.
Acknowledgment
This work was supported in part by the Research Grants
Council of Hong Kong (Project No. CityU 138513), Na-
tional Natural Science Foundation of China (Project No.
61572412), US National Science Foundation under grant
CNS-1464335, and a Microsoft Azure grant for research.
8. REFERENCES
[1] G. Aggarwal, M. Bawa, P. Ganesan, H. Garcia-molina,
K. Kenthapadi, R. Motwani, U. Srivastava,
D. Thomas, and Y. Xu. Two can keep a secret: A
distributed architecture for secure database services.
In Proc. of CIDR, 2005.
[2] A. Bessani, M. Correia, B. Quaresma, F. Andr´e, and
P. Sousa. Depsky: dependable and secure storage in a
cloud-of-clouds. ACM TOS, 9(4):12, 2013.
[3] A. Boldyreva, N. Chenette, and A. O’Neill.
Order-preserving encryption revisited: Improved
security analysis and alternative solutions. In Proc. of
CRYPTO. Springer, 2011.
557[4] D. Cash, P. Grubbs, J. Perry, and T. Ristenpart.
Leakage-abuse attacks against searchable encryption.
In Proc. of ACM CCS, 2015.
challenges, techniques, and systems. In Proc. of the
ACM workshop on Storage security and survivability,
2005.
[5] D. Cash, J. Jaeger, S. Jarecki, C. Jutla, H. Krawczyk,
[22] M. Kuzu, M. S. Islam, and M. Kantarcioglu.
M.-C. Rosu, and M. Steiner. Dynamic searchable
encryption in very large databases: Data structures
and implementation. In Proc. of NDSS, 2014.
[6] M. Chase and S. Kamara. Structured encryption and
controlled disclosure. In Proc. of ASIACRYPT, 2010.
[7] S. Chow, J.-H. Lee, and L. Subramanian. Two-party
computation model for privacy-preserving queries over
distributed databases. In Proce. of NDSS, 2009.
Distributed search over encrypted big data. In Proc. of
ACM CODASPY, 2015.
[23] A. Lakshman and P. Malik. Cassandra: a
decentralized structured storage system. Operating
Systems Review, 44(2):35–40, 2010.
[24] M. Li, C. Qin, and P. P. Lee. Cdstore: Toward
reliable, secure, and cost-eﬃcient cloud storage via
convergent dispersal. In Proc. of USENIX ATC, 2015.
[8] V. Ciriani, S. D. C. D. Vimercati, S. Foresti,
[25] MongoDB. A cross-platform document-oriented
S. Jajodia, S. Paraboschi, and P. Samarati. Combining
fragmentation and encryption to protect privacy in
data storage. ACM TISSEC, 13(3):22, 2010.
[9] B. F. Cooper, A. Silberstein, E. Tam,
R. Ramakrishnan, and R. Sears. Benchmarking cloud
serving systems with YCSB. In Proc. of the 1st ACM
symposium on Cloud computing, 2010.
[10] R. Curtmola, J. A. Garay, S. Kamara, and
R. Ostrovsky. Searchable symmetric encryption:
Improved deﬁnitions and eﬃcient constructions.
Journal of Computer Security, 19(5):895–934, 2011.
[11] G. DeCandia, D. Hastorun, M. Jampani,
G. Kakulapati, A. Lakshman, A. Pilchin,
S. Sivasubramanian, P. Vosshall, and W. Vogels.
Dynamo: amazon’s highly available key-value store. In
Proc. of ACM SOSP, 2007.
[12] R. Escriva, B. Wong, and E. G. Sirer. Hyperdex: A
distributed, searchable key-value store. In Proc. of
ACM SIGCOMM, 2012.
[13] FoundationDB. Foundationdb: Data modeling. Online
at http://www.odbms.org/wp-content/uploads/2013/
11/data-modeling.pdf, 2013.
[14] FoundationDB. A rock-solid, high performance
database that provides nosql and sql access. Online at
https://foundationdb.com/, 2015.
[15] F. Hahn and F. Kerschbaum. Searchable encryption
with secure and eﬃcient updates. In Proc. of ACM
CCS, 2014.
[16] HBase. The hadoop database, a distributed, scalable,
big data store. Online at http://hbase.apache.org,
2010.
database. Online at https://www.mongodb.com/,
2015.
[26] M. Naveed, S. Kamara, and C. V. Wright. Inference
attacks on property-preserving encrypted databases.
In Proc. of ACM CCS, 2015.
[27] J. Ousterhout, A. Gopalan, A. Gupta, A. Kejriwal,
C. Lee, B. Montazeri, D. Ongaro, S. J. Park, H. Qin,
M. Rosenblum, et al. The ramcloud storage system.
ACM TOCS, 33(3):7, 2015.
[28] P. Paillier. Public-key cryptosystems based on
composite degree residuosity classes. In Proc. of
EUROCRYPT, 1999.
[29] V. Pappas, B. Vo, F. Krell, S. Choi, V. Kolesnikov,
A. Keromytis, and T. Malkin. Blind Seer: A Scalable
Private DBMS. In Proc. of IEEE S&P, 2014.
[30] E. Pattuk, M. Kantarcioglu, V. Khadilkar, H. Ulusoy,
and S. Mehrotra. BigSecret: A secure data
management framework for key-value stores. In Proc.
of IEEE Int’l Conference on Cloud Computing, 2013.
[31] R. A. Popa, F. H. Li, and N. Zeldovich. An
ideal-security protocol for order-preserving encoding.
In Proc. of IEEE S& P, 2013.
[32] R. A. Popa, C. Redﬁeld, N. Zeldovich, and
H. Balakrishnan. CryptDB: protecting conﬁdentiality
with encrypted query processing. In Proc. of ACM
SOSP. ACM, 2011.
[33] Redis. An advanced key-value cache and store. Online
at http://redis.io/, 2015.
[34] K. Ren, C. Wang, Q. Wang, et al. Security challenges
for the public cloud. IEEE Internet Computing,
16(1):69–73, 2012.
[17] InfoWorld. The rise of the multimodel database.
[35] R. Schumacher. Datastax, graph, and the move to a
Online at http://www.infoworld.com/article/2861579/
database/the-rise-of-the-multimodel-database.html,
2015.
[18] M. Islam, M. Kuzu, and M. Kantarcioglu. Access
pattern disclosure on searchable encryption:
Ramiﬁcation, attack and mitigation. In Proc. of
NDSS, 2012.
[19] S. Kamara, C. Papamanthou, and T. Roeder.
Dynamic searchable symmetric encryption. In Proc. of
ACM CCS, 2012.
[20] D. Karger, E. Lehman, T. Leighton, R. Panigrahy,
M. Levine, and D. Lewin. Consistent hashing and
random trees: Distributed caching protocols for
relieving hot spots on the world wide web. In Proc. of
ACM STOC, 1997.
[21] V. Kher and Y. Kim. Securing distributed storage:
multi-model database platform. Online at
http://www.datastax.com/2015/02/
datastax-graph-and-the-move-to-a-multi-model-database-platform,
2015.
[36] D. Thain, T. Tannenbaum, and M. Livny. Distributed
computing in practice: The Condor experience.
Concurrency and Computation: Practice and
Experience, 17(2-4):323–356, 2005.
[37] S. Tu, M. F. Kaashoek, S. Madden, and N. Zeldovich.
Processing analytical queries over encrypted data. In
Proc. of the VLDB Endowment, volume 6, pages
289–300, 2013.
558