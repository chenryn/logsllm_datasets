title:Building a better NetFlow
author:Cristian Estan and
Ken Keys and
David Moore and
George Varghese
Building a Better NetFlow
∗
Cristian Estan
PI:EMAIL
†
Ken Keys
PI:EMAIL
∗,†
David Moore
PI:EMAIL
∗
George Varghese
PI:EMAIL
ABSTRACT
Network operators need to determine the composition of the
traﬃc mix on links when looking for dominant applications,
users, or estimating traﬃc matrices. Cisco’s NetFlow has
evolved into a solution that satisﬁes this need by reporting
ﬂow records that summarize a sample of the traﬃc travers-
ing the link. But sampled NetFlow has shortcomings that
hinder the collection and analysis of traﬃc data. First, dur-
ing ﬂooding attacks router memory and network bandwidth
consumed by ﬂow records can increase beyond what is avail-
able; second, selecting the right static sampling rate is diﬃ-
cult because no single rate gives the right tradeoﬀ of memory
use versus accuracy for all traﬃc mixes; third, the heuris-
tics routers use to decide when a ﬂow is reported are a poor
match to most applications that work with time bins; ﬁ-
nally, it is impossible to estimate without bias the number
of active ﬂows for aggregates with non-TCP traﬃc.
In this paper we propose Adaptive NetFlow, deployable
through an update to router software, which addresses many
shortcomings of NetFlow by dynamically adapting the sam-
pling rate to achieve robustness without sacriﬁcing accuracy.
To enable counting of non-TCP ﬂows, we propose an op-
tional Flow Counting Extension that requires augmenting
existing hardware at routers. Both our proposed solutions
readily provide descriptions of the traﬃc of progressively
smaller sizes. Transmitting these at progressively higher lev-
els of reliability allows graceful degradation of the accuracy
of traﬃc reports in response to network congestion on the
reporting path.
Categories and Subject Descriptors: C.2.3 [Computer-
Communication Networks]: Network Operations – Network
monitoring
General Terms: Algorithms, Measurement.
Keywords: Traﬃc measurement, Network monitoring, Data
summarization.
∗
CSE Dept., University of California, San Diego
†
CAIDA, University of California, San Diego
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
SIGCOMM’04, Aug. 30–Sept. 3, 2004, Portland, Oregon, USA.
Copyright 2004 ACM 1-58113-862-8/04/0008 ...$5.00.
1.
INTRODUCTION
Traﬃc measurement is crucial to operating all IP networks
because networks must be provisioned based on the traﬃc
they carry. Flow level measurements are also widely used for
security reasons or to provide insight into the traﬃc cross-
ing a network. Many existing systems that examine ﬁner
details of traﬃc to reveal malicious activities [25, 28], moni-
tor complex performance metrics [10] or capture unsampled
traces of traﬃc. However, these systems based on unsam-
pled traces have inherent scalability problems that restrict
their deployment to lower speed links. SNMP counters [21]
are a simpler solution more widely deployed than ﬂow level
measurement, but they fail to give details about the compo-
sition of the traﬃc mix as they report only the total amount
of traﬃc transmitted on the measured link.
Sampled ﬂow level measurement provides a balance be-
tween scalability and detail because performance limits can
be addressed by reducing the sampling rate. Thus it is no
surprise that Cisco’s NetFlow [24] (and other compatible
ﬂow measurement solutions implemented by major router
manufacturers, some under standardization by IETF [5, 6,
4]) are widely deployed and constitute the most popular way
of measuring the composition of network traﬃc. Most ma-
jor ISPs rely on NetFlow data to provide input to traﬃc
analysis tools that are widely used by network operators.
NetFlow data is also used in computer networking research.
While the wide deployment and use of NetFlow is proof of
its ability to satisfy important needs of network operators, it
is not an indication that it cannot be improved. In this paper
we identify several shortcomings of NetFlow, and propose
evolutionary solutions to these problems that are backwards
compatible and support incremental deployment.
The main contributions of this paper are as follows.
• 1. Sampling Rate Adaptation: NetFlow uses a
static sampling rate which is either suboptimal at low
traﬃc volumes or can cause resource consumption (mem-
ory, bandwidth) diﬃculties at high traﬃc volumes.
Our adaptive algorithm, by contrast, provably stays
within ﬁxed resource consumption limits while using
the optimal sampling rate for all traﬃc mixes.
• 2. Renormalization of ﬂow entries: We intro-
duce a new idea in traﬃc measurement called renor-
malization which allows us to reduce the number of
NetFlow entries after a decrease in sampling rate. We
introduce eﬃcient algorithms for renormalization that
make adapting the sampling rate feasible. Renormal-
ization also enables a layered transmission of NetFlow
Session 7: Router Designdata that gracefully degrades the accuracy of traﬃc
reports in response to network congestion on the re-
porting path.
• 3. Time bins: Most traﬃc analysis tools divide
the traﬃc stream into ﬁxed intervals of time that we
call bins. Unfortunately, NetFlow records can span
bins, causing unnecessary complexity and inaccuracy
for traﬃc analysis. Our Adaptive NetFlow, by con-
trast, ensures that ﬂow records do not span bins. This
simple idea is essential in order to provide statistical
guarantees of accuracy after operations such as renor-
malization and sampling rate adaptation.
• 4. Accurate ﬂow counting: It is well known that
Sampled NetFlow cannot give accurate counts of non-
TCP ﬂows. Such counts are important for detecting
attacks (e.g., Slammer worm) and scans. While our
previous contributions require only software changes,
we show how a modest and easily implementable hard-
ware addition (which we call the Flow Counting Ex-
tension) can give accurate ﬂow counts even for non-
TCP ﬂows. Our extension conﬁgured to report just
8000 entries provides better results even for TCP ﬂow
counts than SYN counting estimators based on Net-
Flow reports of 64K entries.
The organization of this paper is as follows. We provide
an introduction to NetFlow in Section 1.1 and describe some
major problems of NetFlow in Section 1.2. We survey re-
lated work in Section 1.3. Next, in Section 2 we present our
Adaptive NetFlow (ANF) proposal, which solves many of
NetFlow’s problems (using adaptation, renormalization and
time bins) and is deployable through a simple update to the
router software. In Section 3 we propose an optional Flow
Counting Extension (FCE) which solves the problem of get-
ting accurate ﬂow counts for non-TCP ﬂows, but changes to
the router hardware are required. Finally, in Section 4 we
present our experimental evaluation of ANF and FCE.
1.1 NetFlow
NetFlow [24], ﬁrst implemented in Cisco routers, is the
most widely used ﬂow measurement solution today. It started
as a cache for improving the performance of IP lookups and
was later adapted to ﬂow measurement. Routers running
NetFlow maintain a “ﬂow cache” containing ﬂow records
that describe the traﬃc forwarded by the router. These
ﬂow records are then exported using unreliable UDP to a
computer that collects, analyzes and archives them.
For each router interface, ﬂows are identiﬁed by impor-
tant ﬁelds in the packet header: source and destination IP
address, protocol, source and destination port, and type of
service byte. The router inserts a new ﬂow record into the
ﬂow cache if a packet does not belong to an existing ﬂow.
NetFlow uses four rules to decide when a ﬂow has ended
which then allows the corresponding record to be exported:
1) when indicated by TCP ﬂags (FIN or RST), 2) 15 seconds
(conﬁgurable) after seeing the last packet with a matching
ﬂow ID, 3) 30 minutes (conﬁgurable) after the record was
created (to avoid staleness) and 4) when the ﬂow cache is
full. Besides the ﬁelds identifying the ﬂow, each ﬂow record
also keeps other data such as the number of packets and
bytes in the ﬂow and the timestamps of the ﬁrst and last
packet. These records allow many kinds of analyses. For ex-
ample, using the port numbers present in the exported ﬂow
Large numbers of flow
records generated by DoS
attacks can overwhelm the
NetFlow cache and the
network path used to
collect NetFlow data
Data
collection
and
analysis
server
Router line card
DRAM
Software
NetFlow
flow cache
Processor
Bus
updates
Small buffer
terminated
flow records
1 in N
packet headers
Forwarding
hardware
Sampling rate set
statically but optimal
sampling rate depends
on traffic mix
Figure 1: Problems: number of records strongly de-
pends on traﬃc mix and network operator must set
sampling rate. With unfriendly traﬃc mixes, the
number of ﬂow records generated by NetFlow in-
creases signiﬁcantly and this can exhaust the mem-
ory at the router and the bandwidth available for
reporting the records to the collection station. Set-
ting NetFlow’s sampling rate is hard because the
optimal sampling rate depends on the traﬃc mix.
records, an analyst can produce a breakdown of the traﬃc by
application; using the IP addresses, one can produce a traf-
ﬁc breakdown by source or destination [27]. By combining
data from multiple routers one can obtain a network-wide
view of the traﬃc demands of the ISP’s customers [16].
To update the NetFlow cache when a packet is seen, Net-
Flow must look up the corresponding entry in the ﬂow cache
(creating a new entry if necessary) and update that entry’s
counters and timestamps. Since for high speed interfaces,
the processor and the memory holding the ﬂow cache can-
not keep up with the packet rate, Cisco introduced sampled
NetFlow [29] which updates the ﬂow cache only for sampled
packets. For a conﬁgurable value of a parameter N , one of
every N packets is sampled. When using sampled NetFlow
records analysts compensate for the sampling by multiplying
recorded values by N , the inverse of the sampling rate.
1.2 Problems with NetFlow
Even though it is widely used, NetFlow has problems. In
this paper we identify and address four of them.
• Number of records strongly depends on traf-
ﬁc mix. A larger than expected number of records
can overwhelm the router and the network path to the
collection station, as illustrated by Figure 1. Today’s
traﬃc mixes often include massive ﬂooding denial of
service attacks or aggressive port and IP scans that
generate a large number of “ﬂows” consisting of a sin-
gle small packet. The number of entries exported un-
der these circumstances is very large, and the traﬃc
they generate can cause the network to drop pack-
ets. Duﬃeld and Lund show [11] that the errors in-
Problem
Solution
Number of records strongly depends on traﬃc mix (Figure 1)
Network operator must set sampling rate (Figure 1)
Adapting sampling rate
to traﬃc (Section 2.2)
Requirement
software update
Mismatch between ﬂow termination heuristics and analysis (Figure 2) Measurement bins (Section 2.1)
software update
Cannot estimate the number of ﬂows (Figure 3)
Sampling ﬂows (Section 3)
hardware addition
Table 1: Summary of NetFlow problems and proposed solutions.
Sampled packets
T
T
N
C
F
C
T
T F H F F P H
L
P L H
K P
K
H R K
flowID=N,Pkts=3
flowID=F,Pkts=4
L,2
flowID=K,Pkts=3
NetFlow records
T,2
T,2
flowID=H,Pkts=4
C,2
flowID=P,Pkts=3
R,2
Traffic mix 1
2 packet flows
Traffic mix 2
1 packet flows
Analysis bins
time (min)
5
6
7
8
Analysis question: How many flows are there?
Answer must be wrong for one of the two traffic mixes.
Sampling decisions
Sampling probability 1/6
N
N
C
C
F
F
T T H H J J P P
L
L A A
N M C D F E T U H G J I P R
L
K A B
Flow cache 2
Flow cache 1
C 1
J 1
P 1
C 1
I
1
R 1
Figure 2: Problem: mismatch between ﬂow termi-
nation heuristics and analysis. The heuristics used
by NetFlow to terminate ﬂow records do not match
the time bin model used by traﬃc analysis. For ﬂow
records that span multiple bins, the analysis app-
lication has to estimate how many of the packets
reported belong to each bin. While assuming the
packets were uniformly distributed can give good
results as for ﬂow record H it often produces inac-
curate ones as for ﬂow F.
Figure 3: Problem:
cannot estimate the number
of ﬂows Assume we want to estimate the number
of ﬂows in these two traﬃc mixes with the same
number of packets and identical sampling decisions.
Note that the ﬁrst mix contains 2 packet ﬂows and
the second one twice as many 1 packet ﬂows. Both
ﬂow caches contain three ﬂow records and each has
a packet count of 1, so whatever estimator we use we
will get the same answer for both cases. It will be
signiﬁcantly oﬀ for at least one of the traﬃc mixes.
troduced by lost NetFlow packets are worse than the
errors introduced by various types of intentional sam-
pling within the measurement infrastructure. To solve
this problem we propose in Section 2.2 adapting the
sampling rate to the traﬃc mix.
• Network operator must set sampling rate. Set-
ting the sampling rate involves tradeoﬀs. The lower
the sampling rate, the fewer the packets that are sam-
pled. This reduces the load of the processor running
NetFlow and the strain on router memory and on the
network used to export the ﬂow records. But a lower
sampling rate also means larger errors in traﬃc mea-
surement and analysis. The sampling rate constituting
the best compromise between these two opposing con-
siderations depends on the traﬃc mix: when the traﬃc
is low we want a higher sampling rate to obtain better
accuracy, while when the volume of the traﬃc is high
and when massive attacks are in progress we need a
lower sampling rate to protect the measurement in-
frastructure. Setting the static sampling rate is a hard
decision for the network operator. To spare operators
this dilemma we propose adapting the sampling rate
to the traﬃc mix in Section 2.2.
• Mismatch between ﬂow termination heuristics
and analysis. Traﬃc analysis and visualization [16,
27, 3, 1, 19] groups traﬃc into time intervals usually re-
ferred to as “bins”. The size of these bins ranges from
minutes to days and most often one analyzes many
consecutive bins of the same size. If the timestamps
indicating the start and the end of the NetFlow record
are within a single bin, all the packets of the ﬂow are
counted against that bin and processing is simple. On
the other hand if the ﬂow starts in one bin and ﬁn-
ishes in another, one needs to estimate how much of
the traﬃc belonging to the ﬂow went to each bin. This
complicates processing and introduces inaccuracies, as
shown in Figure 2. Furthermore, interactions between
sampling and the ﬂow termination heuristics can lead
to ﬂow splitting such as for ﬂow T in Figure 2 which in-
creases the number of times the ﬂow is reported [11]:
because NetFlow only sees the sampled packets, the
time between consecutive packets can increase to more
than the “inactive timer” (15 seconds by default) and
NetFlow terminates the record prematurely and re-
ports fragments of the ﬂow separately. To solve this
problem we propose in Section 2.1 adopting a binned
model for NetFlow.
• Cannot estimate the number of ﬂows. Large in-
creases in the number of ﬂows are telltale signs of de-
nial of service attacks, scans, and worms which are
much easier to notice when the traﬃc is measured in
ﬂows as opposed to bytes or packets [27]. Without
help from the underlying protocols, it is impossible to
recover the number of ﬂows in the original traﬃc from
the collected data [8]. Figure 3 illustrates the inher-
ent error when trying to estimate the number of ﬂows.
Both traﬃc mixes have the same number of packets
and go through the same sampling process. They pro-
duce similar ﬂow caches: both have three entries, each
with a packet counter of one. Any estimator work-
ing with these ﬂow caches would give the same esti-
mate for both traﬃc mixes, but in at least one of the
cases the result will be signiﬁcantly oﬀ since the sec-
ond mix contains twice as many ﬂows as the ﬁrst one.
We note here that the actual problem we want to solve
is not counting the total number of ﬂows but the re-
lated problem of counting the number of ﬂows within
speciﬁc aggregates (e.g., the number of SMTP ﬂows,
the number of ﬂows coming from an IP address sus-
pected of being a spam relay, etc.) There are good
solutions for counting TCP ﬂows since the ﬁrst packet
of each ﬂow has the SYN ﬂag set, which is recorded
when present in the packets sampled by NetFlow [12]
and our Adaptive NetFlow. Counting UDP and ICMP
ﬂows is equally important as these protocols are used
for scanning, probing and spreading by worms such as
Slammer [23] and Blaster and by malicious hackers.
To solve this problem we propose in Section 3 the op-
tional addition of new hardware that implements our
Flow Counting Extension.
1.3 Related work
While sampling can be compensated for in reports that
measure the traﬃc in packets or bytes it has been proven [8]
that it is impossible to measure traﬃc in ﬂows without bias.
Duﬃeld et al. [12] elegantly sidestep this impossibility re-
sult by using protocol level information present in the Net-
Flow records: they use the number of ﬂow records with the
TCP SYN ﬂag set to accurately estimate TCP ﬂows. We
propose an optional ﬂow counting extension which works
for non-TCP traﬃc as well. In [13], Duﬃeld et al develop
estimators for ﬂow length distributions and techniques for
scaling measurements of sampled ﬂow data. All of these
techniques continue to be valuable and perform similarly
under our Adaptive NetFlow.