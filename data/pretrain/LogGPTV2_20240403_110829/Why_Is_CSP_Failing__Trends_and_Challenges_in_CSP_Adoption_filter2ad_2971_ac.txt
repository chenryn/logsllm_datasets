### Why Is CSP Failing? Trends and Challenges in CSP Adoption

#### Introduction
Content Security Policy (CSP) is a critical security feature that helps mitigate cross-site scripting (XSS) and other code injection attacks. However, the adoption and effective implementation of CSP are often hindered by various challenges. This section discusses the trends and challenges in CSP adoption, focusing on the impact of browser extensions and in-flight modifications on CSP violation reports.

#### Impact of Browser Extensions and In-Flight Modifications

**Browser Extensions**
We observed a variety of browser extensions, including those for blocking advertisements, injecting advertisements, price comparison toolbars, anti-virus scanners, notetaking plugins, and even a BitTorrent browser extension. These extensions can inject scripts or images into web pages, leading to CSP violations.

**Identification of Extensions**
We could automatically identify some browser extensions based on violation reports because they attempted to load resource URIs with unique identifiers, such as `chrome-extension` or `safari-extension`. For example, AdBlock and AdBlock Plus were the most frequent Chrome extensions, while Evernote was the most frequent Safari extension (Table 6).

| **Name** | **# Reports** |
|----------|---------------|
| AdBlock | 38 K |
| AdBlock Plus | 29 K |
| Grooveshark Downloader | 9.5 K |
| ScriptSafe | 8.8 K |
| DoNotTrackMe | 8.2 K |

**Impact on CSP Policies**
Automatically removing reports from these extensions accounted for fewer than 5% of all incorrect policy entries (Table 5). The remaining browser extensions often injected libraries used both in extensions and on many websites, such as Ajax tools, Google Analytics, and resources from large content distribution networks.

**CSP Header Interception**
Some browser extensions intercept and modify CSP headers to whitelist their own resources or disable CSP. We observed reports caused by such an extension, which resulted in semantic errors. Quantifying the success rate of these modifications is challenging due to the nature of our methodology.

**In-Flight Modifications**
In addition to browser extensions, in-flight modifications by ISPs or web applications, such as anonymity proxies, can also cause CSP violation reports. For instance, an image loaded from an IP address (e.g., 1.2.3.11) appeared to be injected by a mobile Internet provider. These examples illustrate that even after filtering out violations due to browser extensions, other non-attack scenarios can still generate spurious reports.

#### Time Delay in Policy Generation

**Observation Period**
On site B, it took approximately two weeks to receive at least one report for each valid policy entry. The last resource discovered was an embedded YouTube video, and another relatively late discovery was an image loaded over HTTPS instead of HTTP. For other sites, the durations were similar. Website operators need prior knowledge about the resources used on their site to decide when to switch from report-only to enforcement mode without causing disruptions.

**Report Frequency Analysis**
Only about 4% of all reports received on site D during our measurement resulted in an invalid policy entry. Using report frequency as an indicator of validity is problematic because attackers can forge reports, and popular injected resources can be reported more frequently than legitimate but infrequently accessed resources.

**Visualization of Report Frequencies**
Figure 3 illustrates this phenomenon. The most frequently injected resource (a script from superfish.com for price comparison) was reported over 22,000 times, while a legitimate resource (connect-src 'self') was reported only 9,000 times.

#### Conclusions

**Challenges in Policy Generation**
Websites, regardless of size, observe CSP violation reports for injected resources. Even in the absence of malicious activity, the high number of injected resources complicates the process of generating a viable policy. This task is currently a tedious and error-prone manual process.

**Semi-Automated Approach**
A semi-automated approach to filtering reports could involve generating signatures for common browser extensions, either manually or by leveraging co-occurring violations. These signatures could be shared with the community to reduce the number of reports that need to be verified manually.

### Semi-Automated Policy Generation

#### Methodology

**Web Crawler Development**
To explore a semi-automated approach, we developed a proof-of-concept web crawler implemented as a Chromium browser extension. The crawler follows up to 500 internal links in a non-randomized breadth-first search, pausing for 2.5 seconds to load all resources. It uses a Squid web proxy with an ICAP module to insert CSP report-only headers and collect reports.

**Limitations**
The crawler cannot detect violations that conditionally occur after load-time, such as JavaScript events. Future work will focus on increasing the crawler's coverage.

**Manual Browsing**
As an alternative, we manually browsed websites in a fresh browser instance using the proxy to collect reports. The goal was to cover all areas of the site and trigger different violations by exercising JavaScript and browser plugin functionality.

#### Evaluation

**Policy Generation Goals**
Effective policy generation must discover all resources included by a site without breaking it and should be as narrow as possible to provide maximum safety. We compared methods of collecting reports for policy generation on sites where a sound policy exists.

**Crawling and Manual Browsing Results**
Both crawling and manual browsing generated overlapping sets of policy entries, with a few unique entries found by each method. The crawler discovered hidden resources on site B, while manual browsing uncovered a resource inclusion on site D. Combining both techniques could increase coverage.

| **Site** | **Crawler Only** | **Both** | **Manual Only** |
|----------|------------------|----------|-----------------|
| A        | 8 (8)            | 12 (9)   | 0 (0)           |
| B        | 0 (0)            | 12 (10)  | 3 (3)           |

**Conclusion**
Neither method was fully reliable, and combining them could be useful to increase coverage. Further refinement is needed before they can fully replace user-submitted reports.