)
(2)
j
(cid:169)(cid:173)(cid:173)(cid:173)(cid:173)(cid:173)(cid:171)s∗
= FA
1 − s∗
The final argument to FA is a value that can be computed from
known values, and it is a preimage of y∗.
□
Proof of Theorem 4.1. Given an adversary A breaking EU-
CMA security as stated, we first construct the reduction algo-
rithm/game B (Algorithm 4). From Claim 1, the game produces a
forgery with probability (ignoring negligible terms related to the
PRF):
Pr[FORGERY] ≥ ϵA − qH qS + q
2l1
2
H
We then apply the forking lemma (Lemma 2.1) to BA. The result is
an algorithm ForkB that generates two forgeries with probability
at least:
(cid:18) Pr[FORGERY]
(cid:19)
Pr[FORGERY]
− 1
2l2
qH
In the event that ForkB outputs two forgeries, define I1 to be the
value of H2(M∗∥h∗) in the first “fork” and I2 to be its value in
the second “fork.” Looking ahead, we would like to bound the
probability that I1 and I2 are compatible. However, we run into
a problem because I2 is not distributed independently of ForkB’s
success. Intuitively, the adversary gets to “choose” whether the
second fork succeeds after seeing I2.
On the other hand, let H′ be the set of oracle responses that are
re-sampled uniformly during the second “fork.” Importantly, H′ is
distributed independently of I1, so we can bound the probability
that I1 is compatible with all elements of H′. Since I2 (if it exists) is
guaranteed to be an element of H′, this allows us to reason about
the compatibility of I1 and I2.
From these observations, we obtain:
Pr[preimage of y∗ is found]
= Pr[ForkB outputs 2 forgeries and I1, I2 are compatible wrt j∗]
Pr[ForkB outputs 2 forgeries and I1, I2 are compatible]
=
1
t
t
t
≥ 1
≥ 1
≥ 1
t
1
t
=
Pr[ForkB outputs 2 forgeries and I1,H′ are compatible]
(cid:16) Pr[ForkB outputs 2 forgeries] − Pr[Compat(qH , k, l2)](cid:17)
(cid:20)
(cid:18) Pr[FORGERY]
(cid:21)
(cid:19)(cid:18) ϵA
(cid:20)(cid:18)
Pr[FORGERY]
ϵA − qH(qS + qH)
(cid:21)
− qH k!
− 1
2l2
2l2
− 1
− qS + qH
2l2
− qH k!
2l2
(cid:19)
(cid:19)
2l1
2l1
qH
qH
Note that the third line follows from the fact that the adversary’s
view in BA is independent of j∗.
The running time of B is that of A to output two forgery sig-
natures with an overwhelming probability plus the time it takes
for the simulation processes. For the sake of convenience, we do
not consider the negligible processes. The setup process takes
t · (tRN G + tFA), where t is the HORS parameter, for generating
private keys and the corresponding public keys. Each signing pro-
cess would require 2tRN G to generate r′ and I = (i1, . . . , ik) one
and k · tAdd. Each hash query would require a tRN G. Therefore,
tFA
the total running time of B is upper-bounded by
O(cid:0)2tA + t(tRNG + tFA) + qS(2tRNG + tFA
+ ktAdd) + qH tRNG
(cid:1)
This completes the proof.
□
4.1 Parameters
In this section, we discuss parameter choices for our construction
as shown in Table 1.
4.1.1 Collision-freeness of GCK function. For TACHYON, N and µ
are 256 and 8, respectively. As it has been shown in [40, 48], for
the family of GCK functions to admit a strong security reduction,
1.5|N | for domain
one needs to ensure that µ >
D = {g ∈ R : ∥g∥∞ ≤ d} for some value d. Specifically, based on
the analysis in [40, 45, 48], with these parameters, finding collision
on average (when ai, j ∈ Zq) with any non-negligible probability is
at least as hard as solving the underlying problem (i.e., SPPγ (I) [40])
on certain kinds of point lattices, in the worst-case. We note that
our concrete parameter selection, as provided in the following,
|q|
2|d | , q > 4dµN
meets the requirements stated above to allow for a strong security
reduction.
4.1.2 Lattice Attacks. Given a uniformly random vector
a = (a1, . . . , aµ) ∈ Rµ, the SIS problem over a ring asks to find
a non-zero vector x = (x1, . . . , xµ) ∈ Z[x]/(x N +1) such that
ai xi ≡ 0 mod q, where ∥x∥ ≤ β
m
i =1
An approach to estimate the hardness of this problem is by
measuring the run-time of lattice basis reduction algorithms. These
reduction algorithms aim to find the nice bases which consist of rea-
sonably short and (nearly) orthogonal vectors. Gama and Nguyen
[24] show that such reduction algorithms for a lattice L with di-
mension N can find vectors of length ≤ δ N · det(L) 1
N where δ
is the Hermite delta. The BKZ algorithm [52] is the best known
algorithm for finding short (non-zero) vectors in lattices. The BKZ
algorithm starts by reducing a lattice basis using a Shortest Vector
Problem (SVP) oracle in a smaller dimension. As shown in [28], the
number of calls to the SVP oracle remains polynomial, however,
precisely computing the number of calls is an arduous task and
therefore, subject to heuristic approaches (e.g., BKZ 2.0 [17]). BKZ
2.0 requires solving the SVP problem in lattices with dimension at
most b < N , where b is called the block size. Therefore, BKZ 2.0
runs for multiple rounds to find the final output. Given the norm
bound β of an SIS instance, the corresponding δ can be computed
as β = δ det(L)1/N , then an estimate of the run time of BKZ 2.0 to
attain δ is computed. Following [2, 25, 57], we use the following
relation to determine the smallest block size b to achieve δ.
(cid:18) b · (πb) 1
b
(cid:19)
2πe
1
2(b−1)
δ =
The most recent classical solver for SVP [6] runs in time ≈ 20.292b
and the best known quantum solver for SVP [34] runs in time
≈ 20.265b.
In the following we discuss our estimation based on the works
in [2, 3, 20, 25].
We consider two types of adversary powers, namely, the classical
and post-quantum. For TACHYON, we proffer three parameter sets
(for three security levels) and analyze the security level of each for
the adversarial types mentioned above. In the classical model, for
our medium security instantiation, we set q = 227 − 211 + 1 and
β = 216 to achieve δ ≈ 1.00339 with b = 502. We set q = 230−218 +1
and β = 217 for recommended instantiation which achieves δ ≈
1.00271 with b = 682. We set q = 231 − 29 + 1 and β = 217 for
the high security instantiation with δ ≈ 1.00203 with b = 1007.
Therefore, based on the analysis in [3, 20], we achieve 146, 199 and
294 classical bit security for the medium, recommended and high
security instantiations of TACHYON against lattice attacks, respec-
tively. For post-quantum security against lattice attacks, we achieve
133, 180 and 266 bit security for the medium, recommended and
high security instantiations, respectively. Similar to Dilithium [20],
our parameter choices are conservative.
k-Element Combinatorial Problem. As captured in our secu-
4.1.3
rity proof, k, t parameters must be selected such that the probability
qH ·k!
is negligible. Considering that l2 = k|t| (since k indexes that
2l2
8
Table 1: Parameter Selection of TACHYON
TACHYON-128
TACHYON-192
TACHYON-256
134215681
1073479681
2147483137
Parameter
N
µ
q
t
k
l1
l2
RS Rate†
256
8
1024
18
256 bits
180 bits
3.08
256
8
2048
25
384 bits
275 bits
2.18
256
8
3072
32
512 bits
384 bits
2.72
† RS Rate denotes Rejection Sampling Rate.
are |t|-bit long are selected with the hash output), this gives us
qH ·k!
. We further elaborate on some choices of (k, t) along with
2k|t|
their security/performance implications in Section 5.
4.1.4 Quantum Random Oracle Model (QROM). QROM considers
the scenario where the adversary has classical access to the signing
oracle and quantum access to the hash function oracle. TACHYON is
proven to be secure in the random oracle model and we do not
provide the proof for the security of TACHYON in QROM. This trend
is true for a wide range of "efficient" schemes (e.g., [20]), which
are mostly based on Fiat-Shamir framework, since their ROM is
not "history free" due to the forking lemma in the reduction step.
Initial approaches (e.g., [55]) to obtain QROM security for schemes
based on Fiat-Shamir transformation resulted in considerably less
efficient signatures since they needed multiple execution of the
underlying identification scheme. However, recently, in line of pro-
viding QROM security for Dilithium [20], Kiltz et al. [33] provide a
tight reduction in the QROM which incurs less performance/stor-
age penalty as compared to directly applying the method in [55].
This generic framework [33] can be applied to the identification
schemes that admit lossy public keys. We believe it is possible to
prove the security of TACHYON in QROM and therefore, in the line
of Dilithium [20] and its QROM secure instantiation [33], we will
investigate the QROM security of TACHYON in our future work.
5 PERFORMANCE EVALUATION
We first present analytical performance analysis and some of the
potential performance/speed trade-offs for TACHYON. We then pro-
vide our evaluation metrics and experimental setup followed by
a detailed experimental comparison of TACHYON with the state-of-
the-art PQ-secure digital signature schemes.
5.1 Analytical Performance Analysis
We now describe the analytical performance of our scheme based on
the parameters. In the computational overhead analysis, we present
our runtime in terms of the total number of PRF, GCK function,
and vector addition calls. We omit the overhead of small-constant
number of hash calls.
• Signer Computation and Storage Overhead: TACHYON only requires
storing a κ-bit random seed number as the private key, which is
9
used to deterministically generate the required xi components via
PRF calls, where each xi is µ · N bits.
The signature generation cost is significantly affected by the
derivation and summation of k number of xi. This requires k · PRF
calls, extracting the binary vectors from the PRF outputs and vector
additions (whose computational overhead is negligible). For each
PRF call, a κ-bit input is extended to a µ · N bit output. In addition, a
Samp(ξ − 1) function is required. Samp(ξ − 1) generates a vector of
length µ·N with components of length |ξ| bits. Therefore, Samp(ξ −
1) can be implemented with a PRF that extends a κ-bit input to a
|ξ| · µ · N bit output. In total, these correspond to the generation of
(|ξ| + k) · µ · N pseudorandom bits via a PRF. Another significant
cost for signature generation is the GCK function call that is made
to compute the image of the randomness r′. A GCK call is basically
composed of two operations: Number Theoretic Transform (NTT)
calculation and a linear combination. In order to compute a GCK call,
µ number of NTT calls and a single linear combination is necessary,
where both of these operations are based on simple multiplications
and additions under mod q. Therefore, in total, TACHYON signature
generation requires storing κ-bit of private key, k PRF invocations,
k vector additions, a single Samp(ξ − 1) and a GCK function call to
compute a signature.
• Signature Size: The signature σ is comprised of the vector s and
a hash output h, where |h| = l1. Rejection sampling enforces s to
satisfy ∥s∥∞ < ξ − ρ. Since s consists of µ · N components, this
vector can be represented with |ξ − ρ| · µ · N bits. The total size of
a signature is |ξ − ρ| · µ · N + l1 bits.
• Verifier Computation and Storage Overhead: The signature verifi-
cation requires only a single GCK call and k vector additions, which
makes it the most verifier computationally efficient scheme among
its current counterparts. On the other hand, the size of public key
is |q| · µ · N · t bits (i.e., t vectors of length µ · N ), which is relatively
larger than its counterparts.
• Improved Side-Channel Resiliency: TACHYON only requires a uni-
form sampling Samp(ξ −1) in its signature generation. Since it does
not require Gaussian sampling, it has an improved side-channel
resiliency as compared to some of its lattice-based counterparts
(e.g., BLISS [19]). Moreover, the rejection sampling in BLISS is based
on iterated Bernoulli trials, that is prone to some attacks. As it is
shown in [22], this efficient rejection sampling technique has been
exposed to some side channel attacks. Although, TACHYON requires
rejection sampling to make sure the statistical distribution of the
signatures does not leak information about the private key compo-
nents, similar to [20], since our rejection sampling does not require
any Bernoulli trials, the attack does not apply to our rejection sam-