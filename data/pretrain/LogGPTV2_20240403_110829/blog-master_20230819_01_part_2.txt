下图所示即为调用加载函数加载新的 Wasm 文件时的流程示意图。  
![pic](20230819_01_pic_002.jpeg)  
## 实操演示  
下面我们实际操作下，如何通过 WasmExecutor 引擎来加载执行 Wasm 格式的 UDF 函数。为了方便伙伴们快速体验，我们提供了支持 WasmExecutor 引擎的容器镜像，发布于 opengaussofficial 组织下，大家可以通过以下方式获取和运行该容器镜像  
```  
docker pull opengaussofficial/opengauss-wasmtime:0.1.0  
docker run -it opengaussofficial/opengauss-wasmtime:0.1.0  
```  
容器启动成功后，登录 openGauss 数据库，创建 WasmExecutor 引擎，如下：  
![pic](20230819_01_pic_003.jpeg)  
在容器镜像中，我们默认内置了一些 Wasm 和 Wat 格式的示例文件，供伙伴们快速上手体验，这些文件放置于 `/home/opengauss` 路径下，如下所示  
![pic](20230819_01_pic_004.jpeg)  
如下，我们使用 `wasm_new_instance` 和 `wasm_new_instance_wat` 来分别加载 sum.wasm 和 fib.wat 中的函数，在加载函数文件时，提供函数放置的名称空间 namespace，方便进行函数管理，最终注册到 openGauss 系统表中的函数名称将会是 namespace_funcname 的新名称。  
![pic](20230819_01_pic_005.jpeg)  
查询 WasmExecutor 引擎提供的元信息表，可以直观地看到当前系统中存在的 Wasm 实例信息和导出的 Wasm 函数信息：  
![pic](20230819_01_pic_006.jpeg)  
可以看到，通过 `wasm.exported_functions` 元信息表，可以方便地查询导出的函数签名，方便函数调用者使用，导出的函数和 openGauss 内置的函数一样，支持使用原生 SQL 来调用，如下所示：  
![pic](20230819_01_pic_007.jpeg)  
## 性能测试对比  
为了对 Wasm 的执行性能做一个直观的展示，我们在一台 4U 8G 的云虚拟机上进行了简单的性能测试。我们使用 Wasm 和 pl/pgsql 分别进行斐波那契数列的计算，测得的结果如下所示。  
![pic](20230819_01_pic_008.jpeg)  
可以看出，即便在计算量比较小的场景下，Wasm 的执行性能也明显优于 pl/pgsql，随着计算量的增长，Wasm 的执行性能已经远远高于 pl/pgsql。由此可以看出，Wasm 在计算密集型的数据库应用场景下具有非常吸引人的应用潜力。  
## 未来展望  
Wasm 技术正在如火如荼的发展着，随着 WASI 接口的不断丰富和完善，其在服务端的应用能力也将越来越成熟。openGauss 作为领先的企业级数据库，未来也将持续不断的跟进和融合 Wasm 的发展成果，提升 openGauss 数据库的安全性和性能。  
目前提供的 openGauss+Wasm 的能力版本还只是个原型版本，项目还在努力开发中，后续将会支持更多的数据类型和数据库操作能力，希望更多感兴趣的小伙伴能够加入我们，与我们一起打造领先的数据库引擎。  
## 参考链接  
- https://webassembly.org/  
- https://bytecodealliance.org/  
- https://www.crunchydata.com/blog/crazy-idea-to-postgres-in-the-web-browser  
- https://www.crunchydata.com/developers/playground  
- https://github.com/snaplet/postgres-wasm  
- https://github.com/libsql/libsql  
- https://gitee.com/opengauss/openGauss-wasm  
#### [期望 PostgreSQL|开源PolarDB 增加什么功能?](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
#### [PolarDB 云原生分布式开源数据库](https://github.com/ApsaraDB "57258f76c37864c6e6d23383d05714ea")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、内核开发公开课、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [PostgreSQL 解决方案集合](../201706/20170601_02.md "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")