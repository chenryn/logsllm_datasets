            balances[_from] -= _value + _feeSmt;
            nonces[_from] = nonce + 1;
            return true;
        }
这里我们简单的介绍一下这个函数的内容。
这里我们要介绍一下代理的概念。这个转账函数需要一个中间代理来帮助用户A与用户B进行转账操作。也许这个代理就类似于代理矿工机制，挖矿成功的人才能够进行tx的打包操作（这是个人想法）。
首先这个函数会传入几个关键的参数：`address _from, address _to, uint256 _value, uint256
_feeSmt`。这里分别代表了用户A的地址（转账人）、用户B的地址（收款人的地址）、转账金额、手续费。
之后我们进入第一层判断：`balances[_from]  0 && cnt  0 && balances[msg.sender] >= amount);
    ​
        balances[msg.sender] = balances[msg.sender].sub(amount);
        for (uint i = 0; i  0 && balances[msg.sender] >=
amount)​`。从而使系统向所有的_receivers[]转账。具体的代码大家可以参考：  
### 四、竞赛题目
我们可以查看题目
题目代码：
    pragma solidity ^0.4.18;
    contract Token {
      mapping(address => uint) balances;
      uint public totalSupply;
      function Token(uint _initialSupply) public {
        balances[msg.sender] = totalSupply = _initialSupply;
      }
      function transfer(address _to, uint _value) public returns (bool) {
        require(balances[msg.sender] - _value >= 0);
        balances[msg.sender] -= _value;
        balances[_to] += _value;
        return true;
      }
      function balanceOf(address _owner) public view returns (uint balance) {
        return balances[_owner];
      }
    }
这个题目是十分简单的。根据我们上面的分析，这个题目存在整数溢出。题目要求我们获得额外的大量token。
我们根据代码知道合约起始会给用户20个token，所以我们起始是拥有20金币的。我们再看内部的转账函数是在`transfer
()`中。在这里我们需要`balances[msg.sender] - _value >= 0`。且为 20 - value >=0所以我们可以传入21
。根据溢出使`balances[msg.sender] -= _value`=>‘20 - 21’ ---->上溢。
所以我们将合约部署。
之后我们调用函数：
我们可以查看我们player的账户金额。
之后提交合约。
### 五、参考资料
  * 
  * 
  * 
  * 
  * 
**本稿为原创稿件，转载请标明出处。谢谢。**