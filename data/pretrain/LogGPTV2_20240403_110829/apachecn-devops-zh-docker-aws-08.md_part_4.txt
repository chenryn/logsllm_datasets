version: '2.3'
volumes:
  public:
    driver: local
services:
  ...
  ...
  app:
    image: 385605022855.dkr.ecr.us-east-1.amazonaws.com/docker-in-aws/todobackend:${APP_VERSION}
    extends:
      service: release
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - public:/public
    healthcheck:
      test: curl -fs localhost:8000
    ports:
      - 8000
    command:
      - uwsgi
      - --http=0.0.0.0:8000
      - --module=todobackend.wsgi
      - --master
      - --die-on-term
      - --processes=4
      - --threads=2
      - --check-static=/public
  acceptance:
    extends:
      service: release
    depends_on:
      app:
        condition: service_healthy
    environment:
      APP_URL: http://app:8000
    command:
      - bats 
      - acceptance.bats
  migrate:
    extends:
      service: release
    depends_on:
      db:
        condition: service_healthy
    command:
      - python3
      - manage.py
      - migrate
      - --no-input
  ...
  ...
```
Todobackend application Docker Compose configuration
如果您比较前面两个示例的配置，可以看到您可以使用本地 Docker Compose 配置来确定 ECS 任务定义所需的配置。
现在让我们更详细地检查各种 ECS 任务定义配置属性。
# 配置 ECS 任务定义系列
您在任务定义中定义的第一个属性是**族**属性，它建立了 ECS 任务定义族名称，并影响每当您更改任务定义时 CloudFormation 将创建任务定义资源的新实例的方式。
回想一下第 4 章，ECS 任务定义支持修订的概念，您可以将其视为 ECS 任务定义的特定版本或配置，并且每当您需要修改任务定义(例如，修改映像标签)时，您可以创建 ECS 任务定义的新修订。
因此，如果您的 ECS 任务定义系列名称为**todo back and**，则您的任务定义的第一个修订版将为**todo back and:1**，并且对任务定义的任何后续更改都将导致创建新的修订版—例如，**todo back and:2**、**todo back and:3**等等。在您的 ECS 任务定义资源中配置**系列**属性可确保每当您的 ECS 任务定义资源被修改时，云信息将采用创建新版本的行为。
请注意，如果您没有按照前面的示例配置**族**属性，CloudFormation 将为该族生成一个修订版为 1 的随机名称，并且对任务定义的任何后续更改都将导致使用一个修订版为 1 的随机名称创建一个*新的*族。
# 配置 ECS 任务定义卷
回到前面例子中的`ApplicationTaskDefinition`资源，`Volumes`属性定义了本地 Docker 卷，每当 ECS 任务定义的实例被部署到 ECS 容器实例时，就会创建本地 Docker 卷。参考上例中的本地 Docker Compose 配置，可以看到配置了一个名为 **public** 的卷，然后在 **app** 服务定义中将其作为挂载点引用。
此卷用于存储静态 web 文件，这些文件是通过在本地 Makefile 工作流中运行`python3 manage.py collectstatic --no-input`命令生成的，并且必须可供主应用容器使用，因此需要一个卷来确保运行此命令生成的文件可供应用容器使用:
```
...
...
release:
  docker-compose up --abort-on-container-exit migrate
 docker-compose run app python3 manage.py collectstatic --no-input
  docker-compose up --abort-on-container-exit acceptance
  @ echo App running at http://$$(docker-compose port app 8000 | sed s/0.0.0.0/localhost/g)
...
...
```
Todobackend Makefile
请注意，在我们的 ECS 任务定义中，我们还需要指定`/data/public`的主机源路径，这是我们在上一章中作为 ECS 集群自动扩展组 CloudFormation init 配置的一部分创建的。该文件夹在底层 ECS 容器实例上具有正确的权限，这确保了我们的应用能够读写公共卷。
# 配置 ECS 任务定义容器
先前配置的 ECS 任务定义包括`ContainerDefinitions`属性，该属性定义了与任务定义相关联的一个或多个容器的列表。您可以看到定义了两个容器:
*   `todobackend`容器:这是主要的应用容器定义。
*   `collectstatic`容器:这个容器是一个短命的容器，运行`python3 manage.py collectstatic`命令生成本地静态 web 文件。与该容器相关联的一个重要配置参数是`Essential`属性，该属性定义了如果容器失败或退出，ECS 是否应该尝试重新启动该容器(事实上，ECS 将尝试重新启动任务定义中的所有容器，导致主应用容器不必要地停止和重新启动)。鉴于`collectstatic`容器仅打算作为短期任务运行，您必须将此属性设置为 false，以确保 ECS 不会尝试重新启动您的 ECS 任务定义容器。
There are many ways you could tackle the requirement to run the collect static process to generate static web files. For example, you could define a startup script that first runs collect static and then starts the application container, or you may wish to publish your static files to an S3 bucket, meaning you would run the collect static process quite differently.
除了本质属性之外，`todobackend`和`collectstatic`容器定义的配置属性非常相似，因此我们将在此讨论主`todobackend`容器定义的属性，并在适当的地方讨论与`collectstatic`容器定义的任何差异:
*   `Image`:该属性定义容器所基于的 Docker 映像的 URI。请注意，我们发布了您在第 5 章中为 todobackend 应用创建的 ECR 存储库的 URI，并引用了一个名为`ApplicationImageTag`的栈参数，该参数允许您在部署栈时提供适当版本的 Docker 映像。
*   `Cpu`和`MemoryReservation`:这些属性为您的容器分配 CPU 和内存资源。我们将在接下来的章节中更详细地讨论这些资源，但是现在要理解，这些值保留了配置的 CPU 份额和内存量，但是如果可用的话，允许您的容器使用更多的 CPU 和内存(即“突发”)。请注意，您为`collectstatic`容器分配了最少量的 CPU 和内存，因为它只需要运行很短的时间，并且很可能 ECS 容器实例将有空闲的 CPU 和内存容量来满足容器的实际资源需求。这避免了为只在一小部分时间处于活动状态的容器保留大量的 CPU 和内存。
*   `MountPoints`:定义将要装载到容器的 Docker 卷。每个容器都有一个挂载点，将**公共**卷挂载到`/public`容器路径，用于托管静态 web 文件。
*   `Environment`:定义容器可用的环境变量。参考前面示例中的本地 Docker Compose 配置，您可以看到发布服务是应用服务继承的基础服务定义，它指示容器需要将`DJANGO_SETTINGS_MODULE`变量设置为`todobackend.settings_release`，并且需要定义许多与数据库相关的环境变量来定义与应用数据库的连接。另一个需要的环境变量是`SECRET_KEY`变量，它用于 Django 框架中的各种加密函数，为 todobackend 应用提供动力，并且应该用一个机密的随机值进行配置。如您所见，目前我们已经设置了一个非随机的明文值，在下一章中，您将了解如何将该值作为加密的机密注入
*   `Command`:定义启动容器时应该执行的命令。您可以看到`todobackend`容器定义使用本地 Docker Compose 工作流用来启动`uwsgi`应用服务器的相同`uwsgi`命令，而 collectstatic 容器使用`python3 manage.py collectstatic`命令来生成要从主应用提供的静态 web 文件。
*   `PortMappings`:指定应该从容器公开的端口映射。todobackend 容器定义有一个单一的端口映射，它为容器端口指定了`8000`的默认应用端口，并指定了`0`的主机端口值，这意味着将使用动态端口映射(注意，在使用动态端口映射时，您也可以省略 host port 参数)。
*   `LogConfiguration`:配置容器的日志配置。在前面的示例中，您通过使用 awslogs 驱动程序将 CloudWatch 日志配置为日志驱动程序，然后配置特定于该驱动程序的选项。awslogs-group 选项指定日志将输出到的日志组，它引用了在`ApplicationLogGroup`资源中定义的日志组的名称，就在`ApplicationTaskDefinition`资源下面。awslogs-stream-prefix 非常重要，因为它将容器标识的默认日志流命名约定修改为`//`格式，这里的关键信息是 ECS 任务标识，这是使用 ECS 而不是容器标识时使用的主要任务标识符。
In Chapter 7, you granted your ECS container instances the ability to publish to any log group prefixed with the name of your CloudFormation stack. As long as your ECS task definitions and associated log groups follow this naming convention, the Docker Engine will be able to publish logs for your ECS tasks and containers to CloudWatch logs.
# 使用云信息部署 ECS 任务定义
现在您已经定义了 ECS 任务定义，您可以使用现在熟悉的`aws cloudformation deploy`命令来部署它。更新栈后，应创建一个新的任务定义，其系列名称为 todobackend，您可以使用 AWS CLI 查看该定义，如下例所示:
```
> aws ecs describe-task-definition --task-definition todobackend
{
    "taskDefinition": {
        "taskDefinitionArn": "arn:aws:ecs:us-east-1:385605022855:task-definition/todobackend:1",
        "family": "todobackend",
        "revision": 1,
        "volumes": [
            {
                "name": "public",
                "host": {
                    "sourcePath": "/data/public"
                }
            }
        ],
        "containerDefinitions": [
            {
                "name": "todobackend",
                "image": "385605022855.dkr.ecr.us-east-1.amazonaws.com/docker-in-aws/todobackend:latest",
                "cpu": 245,
                "memoryReservation": 395,
...
...
```
Verifying the todobackend task definition
# 部署 ECS 服务
有了您的 ECS 集群、ECS 任务定义和各种支持资源，您现在可以定义一个 ECS 服务，该服务将按照 ECS 任务定义中的定义将您的容器应用部署到您的 ECS 集群。
以下示例演示了向您的云信息模板添加一个 ECS 服务资源，该模板的资源类型为`AWS::ECS::Service`:
```
...
...
Resources:
  ApplicationService:
 Type: AWS::ECS::Service
 DependsOn:
      - ApplicationAutoscaling
      - ApplicationLogGroup
      - ApplicationLoadBalancerHttpListener
    Properties:
      TaskDefinition: !Ref ApplicationTaskDefinition
      Cluster: !Ref ApplicationCluster
      DesiredCount: !Ref ApplicationDesiredCount
      LoadBalancers:
        - ContainerName: todobackend
          ContainerPort: 8000
          TargetGroupArn: !Ref ApplicationServiceTargetGroup
      Role: !Sub arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.amazonaws.com/AWSServiceRoleForECS 
 DeploymentConfiguration:
 MaximumPercent: 200
 MinimumHealthyPercent: 100
  ApplicationTaskDefinition:
    Type: AWS::ECS::TaskDefinition
...
...
```
Creating an ECS service
前面示例中配置的一个有趣方面是`DependsOn`参数，它定义了在创建或更新 ECS 服务资源之前必须创建或更新的栈中的其他资源。尽管当一个资源直接引用另一个资源时，CloudFormation 会自动创建依赖关系，但是一个资源可能依赖于与该资源没有直接关系的其他资源。ECS 服务资源就是一个很好的例子——如果没有一个正常运行的 ECS 集群和相关的 ECS 容器实例(这由`ApplicationAutoscaling`资源表示)，服务就不能运行，如果没有`ApplicationLogGroup`资源，服务就不能写日志。一个更微妙的依赖关系是`ApplicationLoadBalancerHttpListener`资源，在与 ECS 服务相关联的目标组注册目标之前，该资源必须起作用。
这里描述了为 ECS 服务配置的各种属性:
*   `TaskDefinition`、`DesiredCount`和`Cluster`:定义 ECS 任务定义、ECS 任务数量以及服务将部署到的目标 ECS 集群。
*   `LoadBalancers`:配置 ECS 服务应该集成的负载平衡器资源。您必须指定将向 ECS 服务注册的容器名称、容器端口和目标组 ARN。请注意，您引用了本章前面创建的`ApplicationServiceTargetGroup`资源。
*   `Role`:仅当您将 ECS 服务与负载平衡器集成时，此属性才是必需的，并且指定了一个 IAM 角色，该角色授予 ECS 服务管理已配置负载平衡器的权限。在前面的示例中，您引用了一个特殊 IAM 角色的 ARN，该角色被称为服务角色([https://docs . aws . Amazon . com/IAM/latest/user guide/use-service-link-roles . html](https://docs.aws.amazon.com/IAM/latest/UserGuide/using-service-linked-roles.html)，每当您创建 ECS 资源时，它都会由 AWS 自动创建。`AWSServiceRoleForECS`服务角色授予 ECS 通常需要的许多权限，包括管理和集成应用负载平衡器。
*   `DeploymentConfiguration`:配置与新版本 ECS 任务定义滚动部署相关的设置。在部署过程中，ECS 将根据新版本的 ECS 任务定义停止现有容器并部署新容器，并且`MinimumHealthyPercent`设置定义了与部署期间必须使用的`DesiredCount`属性相关的容器的最小允许百分比。类似地，`MaximumPercent`设置定义了在部署期间相对于`DesiredCount`属性可以部署的容器的最大允许百分比。
# 使用云信息部署 ECS 服务
在您的 ECS 服务配置就绪后，是时候使用`aws cloudformation deploy`命令将更改部署到您的栈中了。部署完成后，您的 ECS 服务应该向您在本章前面创建的目标组注册，如果您浏览到应用负载平衡器的 URL，您应该会看到示例应用的根 URL 正在正确加载:
![](img/68a5cac1-2c9c-4711-bb88-70eb0ee1e14e.png)
Testing the todobackend application
但是，如果您点击前面截图中显示的**转到**链接，您将会收到一个错误，如下图所示:
![](img/b1ba0115-82ab-40ff-9473-2f5887ed15b7.png)
todobackend application error
前面截图中的问题是应用数据库中预期的数据库表尚未创建，因为我们还没有对应用数据库运行数据库迁移。我们将很快了解如何解决这个问题，但在此之前，我们还有一个与部署 ECS 服务相关的主题需要讨论:滚动部署。
# ECS 滚动部署
ECS 的一个关键特性是滚动部署，其中 ECS 将以滚动方式自动部署应用的新版本，结合您配置的负载平衡器协调各种操作，以确保您的应用成功部署，而不会出现停机时间，也不会对最终用户造成影响。ECS 如何管理滚动部署的过程实际上非常详细，下图试图在单个图表中从较高的层次描述该过程: