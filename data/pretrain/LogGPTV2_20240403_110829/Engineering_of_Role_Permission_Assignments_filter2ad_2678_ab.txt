additional challenge has been resolved by using 
the concept of “bucketing.” 
4.3  Focus Concept  
Within  each  layer  there  can  be  more  than  one 
approach  (i.e.,  engineering  based  on  a  design 
criterion).  We 
following 
approaches: 1) Role -focus, 2) Application-focus, 
and 3) Permission-focus.  
consider 
Permission-focus requires decomposing 
the permissions based on attributes of the target 
permissions;  application-focus  uses  the  target 
application’s  attributes;  and  role-focus uses the 
attributes  of  the  source  roles.    From  these 
approaches, we use the attributes as the criteria 
to  decide  how  to  decompose  or  aggregate  the 
current values to the next layer. 
approach 
to  permission  assignments. 
The focus challenge is to determine the 
decomposing 
role-focus, 
application-focus,  or  permission-focus) and the 
subsequent criterion that will be used to engineer 
the  role 
  The 
following  concept  can  be  used  to  engineer 
decomposition  as  well  as  aggregation.    For 
simplicity,  we  do  not 
consider  hybrid 
approaches. 
For each approach, we need to list the 
criterion.  These criteria are used to assist in the 
engineering  of  the  layers.    For  example,  we can 
use: 
§  Role  Attributes  based  on: 
  Skill  sets, 
(e.g., 
Educational Level, Location, Experience; 
§  Application Attributes based on: 
Functionality, Manageability, 
Interoperability; and 
§  Permission  Attributes  based  on:  Platform, 
Access type, Type of target Application, and 
Capability. 
4.4 Defining Role’s Responsibilities  
Next, we identify the role’s responsibilities.  For 
our  research,  we  categorize  the  roles  into  the 
following groups:  
1.  The  role  responsibilities  that  have  been 
documented,  
2.  The  role  responsibilities that have not been 
documented  but  where  the  role  has  been 
defined, and, 
3.  Neither the role nor the responsibilities have 
been defined.  
the 
role’s 
responsibilities 
By  using  our  knowledge  of  the  chosen 
approach and its attributes for the first group, we 
will  divide 
into 
categories.    Related  responsibilities  that  can  be 
part of the same job set will be merged into “like 
job”  categories,  J1,  …  Jn.  For  simplicity,  jobs 
will  be  reused  and  each  Ji  will  be  unique.  For 
example,  the  duties  of  the  Office  Administrator 
are:  1)  Maintain  the  records  for  all  Ph.D. 
students, 2) Maintain the Calendar for the Dean, 
and 3) Schedule meetings with the professor. 
the 
the 
then  by  documenting 
In the second group, each role exists but 
has  not  been  documented.  An  extra  step  is 
required  to  glean  the  responsibilities  from  the 
undocumented  roles.    This  is  accomplished  by 
monitoring  and 
the 
activities  performed  when  a  user  has  activated 
the  role.  From  the  documentation  and  our 
knowledge  of  the  chosen  approach  and  its 
attributes,  we  analyze 
responsibilities 
required to perform the role’s activities. Similar 
to the earlier option, related responsibilities that 
can  be  part  of  the  same  job  set  will  be  merged 
into like job categories, J1, … Jn.  
follow 
For  example, 
role-engineer  can 
application-focused 
role  may  be  a 
professor.    The  Computer Administrator has not 
had  time  to  create  her  list  of  responsibilities; 
however,  a 
the 
administrator  while  she  performs  her  role.  The 
approach 
the 
attributes  are  functionality  and  manageability. 
We know that the jobs are based on the attributes 
of  application  functionality  and  manageability.   
Through  observation,  we  determine  that  the 
administrator  performs 
software 
maintenance,  and  password  access  control  of 
application  servers.    Subsequently,  we  map  the 
Computer  Administrator  role  to  the  jobs  of: 
Application  Server  Archiving,  Application 
Server  Software  Maintenance,  and  Application 
Server  Password  Access  Control.    (Note:  A  job 
that already exists does not have to be redefined 
but can be reused.) 
archiving, 
and 
The  final  group  is  for  a  role  that  has 
been identified, but has not yet been defined nor 
documented.    The  responsibility  of  the  role  is 
only  conceptual  and  cannot  be  verified  against 
is 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:10:54 UTC from IEEE Xplore.  Restrictions apply. 
if 
existing activities.  We need to deduce the role’s 
expected  responsibilities  by  interviewing  the 
designer of the organization.  We then document 
each  role’s  responsibility  within  the  framework 
of  the  approach  and  it’s  associated  values. 
Related  responsibilities  that  can  be  part  of  the 
same  job  set  will  be  merged  into  like  job 
categories,  J1,  …  Jn.  For  example, 
the 
government  agency  ABC.com  has  a  new 
position of Chief Information Officer (CIO) that 
is required by a new government law, we need to 
provide  the  role  with  the  needed  access  to 
perform  the  work  of  the  role.  Although the role 
exists  in  industry,  it  is  a  new  role  for  this 
government agency.  Thus, we need to determine 
from  management  what  the  responsibilities  of 
the  role  are.    The  approach  is  role-focused and 
the attributes are skill sets and experience.  After 
talking with the Chief Financial Officer, Chief of 
the  Agency,  and  the  Chief  of  Operations,  we 
determine  that  the  job  skill  sets  are  Program 
Oversight,  Technical  Management,  and  Budget 
Reviewer.  Although the role has the skill set to 
understand technological information, it does not 
have 
in-depth 
technical reviews.  Fortunately, the CIO can hire 
a person to perform the role that contains the job 
of in-depth technical reviewer. 
4.5  Workpattern Order  
We  need  to  identify  all  of  the  steps  that  the 
workpattern requires to perform the work of each 
job.    These  steps  do  not  have  to  be  followed 
sequentially, but each step is required to define 
the work of the job. Ambiguity of jobs increases 
the  difficulty  of  defining  all  of  the  steps; 
however,  if  we  can  identify  the  steps  logical 
ordering  as  a  process,  we  will  have  an 
engineering aid to reduce the complexity of step 
definition.  We begin by categorizing the job in 
one of three groups: 
1.  The steps are part of a single process that is 
the  experience 
to  perform 
entirely  defined  within  one  workpattern.    
All  of  the  steps  can  finish  without  waiting 
for another step outside of the workpattern 
to finish.  
2.  The steps are part of at least one process that 
is outside of the workpattern.  At least one 
step  must  wait  for  another  step  that  is 
outside of the workpattern to finish. 
3.  The steps cannot be defined as a process. 
Group 1 is a set of steps that must be 
derived from the job.  We know that the steps are 
formulated  as  a  process,  so  that  there  will  be 
some semblance of order.  The order need not be 
sequential; but there is a series of steps that need 
to be performed to satisfy the work of the role. 
We define the process within the criteria of the 
focus approaches.  For example if there is a role-
focus  approach  for  the  role  of Professor for the 
job of Teaching within the criteria of Educational 
Level  and  Skill  Sets,  we  determine  the  process 
steps that are required to satisfy the work of the 
role are: 
§  Investigate Information, 
§  Prepare Lectures, 
§  Lecture, 
§  Prepare Exam, 
§  Administer Exam, 
§  Grade Exam, and 
§  Record Exam. 
All  of  these  steps  are  defined  and 
controlled within a workpattern.  For each step 
Sij,  where  i  is  the  process  and  j  is  the  step 
number, a workpattern W in group 1 will contain 
a set of Sij, where all i’s are equal, and for all j’s, 
Sij is contained in W. 
Within  the  second  group,  we  need  to 
identify the steps within the external process that 
the workpattern will satisfy.  Ideally, the master 
process has been created and the steps have been 
defined. 
  Thus,  we  determine  the  job  that 
performs the work, and then include the steps as 
part of the workpattern.  If the steps of the master 
process are not known, but we are aware that a 
job is part of the external process, then we need 
to define the steps.  As with group 1, we know 
that  the  steps  are  formulated  as  a  process,  so 
there  will  be  some  semblance  of  order,  but  it 
does not have to be sequential, although there is 
a series of steps that will be done to satisfy the 
work of the role. We define the process within 
the  guides  of  the  focus  approaches  discussed 
earlier.  
For example, if the job is for a mortgage 
collection-clearing house, we need to understand 
that  the  role  is  part  of  a  larger  process  that 
includes other roles such as: the mortgagee (the 
person paying the mortgage) and the mortgagor 
(the  company  receiving 
  We 
determine from the information that we obtained 
when we defined the role that the steps are: Send 
out  list  of  mortgagee  (mortgagor),  send  out 
notice  (clearing  house),  send  out  payment 
(mortgagee), post payment (clearing house), pay 
bank  (clearing  house),  and  send  out  notice  of 
payment receipt (mortgagor). 
the  money). 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:10:54 UTC from IEEE Xplore.  Restrictions apply. 
All  of  these  steps  are  defined  and 
controlled within a workpattern.  Thus, for each 
step  Sij, where i is the process and j is the step 
number, a workpattern W in group 1 will contain 
a set of Sij, where all i’s are not equal and for at 
least one j, Sij is not contained in W. 
The last suggested method is an ad-hoc 
set of steps that may not be related. We cannot 
use  the  aid  of  a  process  to  logically  define the 
steps.  All that is known is that there is a job that 
has  been  created  as  part  of  the  approaches 
defined earlier. We must deduce from the present 
information  what  steps  are  required  by  the 
workpattern.    For  example,  we  may  glean  from 
the  documented  role  of  an  administrator  that  a 
set of responsibilities did not fit into another job.  
They  were  combined  into  a  job  of  an  office 
manager  and  require 
the  steps:  1)  update 
employee  payroll,  2)  add  employees  to  the 
company gym, and 3) obtain parking permits.   
to 
into 
into  a  bucket  according 
Thus,  for  each  step  Sij,  where  i  is  the 
process and j is the step number, a workpattern 
W in group 1 will contain a set of Sij, where all 
i’s  may  be  equal,  and  for  some  j’s,  Sij  is 
contained in W. 
4.6  Concept of Buckets 
When  we  aggregate  from  one  layer to the next, 
we need the ability to combine like elements into 
the same group.  A bucket is a grouping of like 
elements 
the  same  group.  We  group 
elements 
like 
capabilities that are based on the focus attributes. 
To  ensure  completeness  (see  properties),  each 
permission  has  to  be  a  member  of  at  least  one 
bucket;  however,  each  permission  can  be  a 
member of more than one bucket.  Large groups 
may  need  to  be  further  categorized  into  smaller 
groups.  A  large  bucket  that  will  represent 
multiple  groups  must  be  subdivided 
into 
additional buckets.  For example, all the data file 
updates are defined into one group.  The group 
contains  over  200  permissions.    We  further 
categorize the group by data type (e.g., database 
files,  network  configurations,  word  files,...).  
Now  we  have  a  more  definitive  set  of  buckets 
that group more specific-like elements. 
4.7 Defining Properties 
As  part  of  the  role-permission extension, there 
are properties that can be applied to the layer and 
the  mapping  between 
  These 
properties 
are:  Uniqueness,  Equivalence, 
Minimization,  Reuse,  and  Completeness.  The 
layers. 
the 
to 
formal definitions follow and use the following 
symbols, along with the previous definitions of 
permissions.  
that  maps 
We  strive  to  minimize  the  number  of 
elements  that  will  be  used  to  perform  the 
role/permissions  assignments. 
  Ideally,  each 
element is unique and therefore, each set will not 
contain  duplicate  entries.    We  can  determine  if 
an  element  is  unique  if  there  is  not  another 
element that is  equivalent to that element.  Our 
real  interest  in  equivalence  is  that,  when  we 
finish  mapping  the  layers  to  permissions,  we 
want to know if the layered elements map to the 
same  set  of  permissions.    If  the  elements  are 
equivalent, then the element will grant the same 
accesses to the functions of the application and 
there may be no benefit to have more than one 
element 
the  same  set  of 
permissions.  To  continue  with  this  line  of 
thought,  we  may  not  need  to  define  another 
element if we can reuse an existing element that 
can provide the same set of accesses.  Once we 
finish  with  the  approach,  we  verify  that  all  the 
pre-defined elements (i.e., roles and permissions) 
have been mapped.  We check the completeness 
of  the  assignments  by  mapping  each  role  to  at 
least  one  permission  and  each  permission  to  at 
least one role. As we stated earlier, we strive to 
minimize  the  number  of  elements;  however, 
there may be a benefit not to eliminate duplicate 
unique elements.  We will discuss these potential 
benefits later in this  dissertation. 
One of the goals of this dissertation is to 
detail  an  optimized  approach 
increase 
efficiency when performing the Role/Permission 
assignments.    The  key  phrase  is  “an  optimized 
approach.” This means the optimization of each 
phase  of  the  approach.    Each  phase  has  two 
major  portions:  the  definitions  of  the  elements 
within a layer, and the mapping of the elements 
from  one  layer  to  the  next.    Hence,  we  can 
increase  efficiency  by  either 
the 
number  of  elements  within  a  layer,  or  reducing 
the  number  of  mappings  from  one  layer  to  the 
next.    
We can reduce the number of elements 
by  either  eliminating  duplicate  elements  or  not 
defining  new  elements  by  reusing  existing 
elements.    To  work  towards  these  goals,  we 
introduce  properties  that  can  be  applied  to  the 
layer  and  the  mapping  between  layers.    These 
properties 
are:  Uniqueness,  Equivalence, 
Minimization,  Reuse,  and  Completeness.    They 
will be defined in greater detail below. 
reducing 
Uniqueness  ensures  that  there  are  no 
two elements that contain the exact same values 
to 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:10:54 UTC from IEEE Xplore.  Restrictions apply. 
if 
that 
rather 
is  needed 
registration 
they  contain 
completeness. 
within  a  layer.  For  example,  the  Information 
Technology 
and  Psychology  Departments 
require the same set of accesses to logon into the 
University 
applications.  Both 
departments  do  not  need  to  create  their  own 
version  of  a  logon task; one unique task can be 
used  for  both  departments.      We  work  towards 
uniqueness  when  we:  1)  eliminate  or  merge 
duplicates by minimizing elements or 2) reuse a 
unique  element 
than  define  another 
element.  We need to be careful that we do not 
eliminate  an  element 
for 
permission 
Permission 
completeness will be defined later in this paper. 
Two  sets,  within  the  same  layer,  are 
equivalent 
the  exact  same 
elements.    Permission  equivalence  is  a  special 
case  of  equivalence  and  is  defined  as  two  sets 
that  permit  access  to  the  same  applications  but 
may not contain the same elements. Permission 
equivalent  sets  need  not  be 
identical,  but 
equivalent sets are permission equivalent.   For 
example, workpattern A may require three tasks: 
a task to logon to the computer, another to make 
a  phone  call,  and  a  third  to  check  e-mail. 
Workpattern  B  will  perform  the  same  tasks  as 