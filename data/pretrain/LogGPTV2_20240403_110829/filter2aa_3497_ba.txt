One of the best tools to add this improved functionality when rebuilding is Address
Sanitizer (ASan), an extension for the CLANG C compiler that detects memory
corruption bugs. If you specify the -fsanitize=address option when running the compiler (you
can usually specify this option using the CFLAGS environment variable), the rebuilt
Technet24
||||||||||||||||||||
||||||||||||||||||||
application will have additional instrumentation to detect common memory errors, such as
memory corruption, out-of-bounds writes, use-after-free, and double-free.
The main advantage of ASan is that it stops the application as soon as possible after the
vulnerable condition has occurred. If a heap allocation overflows, ASan stops the program
and prints the details of the vulnerability to the shell console. For example, Listing 10-5
shows a part of the output from a simple heap overflow.
==3998==ERROR: AddressSanitizer: heap-buffer-overflow➊ on address
0xb6102bf4➋ at pc 0x081087ae➌ bp 0xbf9c64d8 sp 0xbf9c64d0
WRITE of size 1➍ at 0xb6102bf4 thread T0
    #0 0x81087ad (/home/user/triage/heap_overflow+0x81087ad)
    #1 0xb74cba62 (/lib/i386-linux-gnu/i686/cmov/libc.so.6+0x19a62)
    #2 0x8108430 (/home/user/triage/heap_overflow +0x8108430)
Listing 10-5: Output from ASan for a heap buffer overflow
Notice that the output contains the type of bug encountered ➊ (in this case a heap
overflow), the memory address of the overflow write ➋, the location in the application that
caused the overflow ➌, and the size of the overflow ➍. By using the provided information
with a debugger, as shown in the previous section, you should be able to track down the
root cause of the vulnerability.
However, notice that the locations inside the application are just memory addresses.
Source code files and line numbers would be more useful. To retrieve them in the stack
trace, we need to specify some environment variables to enable symbolization, as shown in
Listing 10-6. The application will also need to be built with debugging information, which
we can do by passing by the compiler flag –g to CLANG.
$ export ASAN_OPTIONS=symbolize=1
$ export ASAN_SYMBOLIZER_PATH=/usr/bin/llvm-symbolizer-3.5
$ ./heap_overflow
=================================================================
==4035==ERROR: AddressSanitizer: heap-buffer-overflow on address 0xb6202bf4 at pc 0x081087ae bp
0xbf97a418 sp 0xbf97a410
WRITE of size 1 at 0xb6202bf4 thread T0
    #0 0x81087ad in main /home/user/triage/heap_overflow.c:8:3➊
    #1 0xb75a4a62 in __libc_start_main /build/libc-start.c:287
    #2 0x8108430 in _start (/home/user/triage/heap_overflow+0x8108430)
Listing 10-6: Output from ASan for a heap buffer overflow with symbol information
The majority of Listing 10-6 is the same as Listing 10-5. The big difference is that the
crash’s location ➊ now reflects the location inside the original source code (in this case,
starting at line 8, character 3 inside the file heap_overflow.c) instead of a memory location
inside the program. Narrowing down the location of the crash to a specific line in the
program makes it much easier to inspect the vulnerable code and determine the reason for
the crash.
Windows Debug and Page Heap
||||||||||||||||||||
||||||||||||||||||||
On Windows, access to the source code of the application you’re testing is probably more
restricted. Therefore, you’ll need to improve your chances for existing binaries. Windows
comes with the Page Heap, which you can enable to improve your chances of tracking
down a memory corruption.
You need to manually enable the Page Heap for the process you want to debug by
running the following command as an administrator:
C:\> gflags.exe -i appname.exe +hpa
The gflags application comes installed with the CDB debugger. The –i parameter allows
you to specify the image filename to enable the Page Heap on. Replace appname.exe with the
name of the application you’re testing. The +hpa parameter is what actually enables the
Page Heap when the application next executes.
The Page Heap works by allocating special, OS-defined memory pages (called guard
pages) after every heap allocation. If an application tries to read or write these special guard
pages, an error will be raised and the debugger will be notified immediately, which is
useful for detecting a heap buffer overflow. If the overflow writes immediately at the end
of the buffer, the guard page will be touched by the application and an error will be raised
instantly. Figure 10-1 shows how this process works in practice.
Figure 10-1: The Page Heap detecting an overflow
You might assume that using the Page Heap would be a good way of stopping heap
memory corruptions from occurring, but the Page Heap wastes a huge amount of memory
because each allocation needs a separate guard page. Setting up the guard pages requires
calling a system call, which reduces allocation performance. On the whole, enabling the
Page Heap for anything other than debugging sessions would not be a great idea.
Technet24
||||||||||||||||||||
||||||||||||||||||||
Exploiting Common Vulnerabilities
After researching and analyzing a network protocol, you’ve fuzzed it and found some
vulnerabilities you want to exploit. Chapter 9 describes many types of security
vulnerabilities but not how to exploit those vulnerabilities, which is what I’ll discuss here.
I’ll start with how you can exploit memory corruptions and then discuss some of the more
unusual vulnerability types.
The aims of vulnerability exploitation depend on the purpose of your protocol analysis.
If the analysis is on a commercial product, you might be looking for a proof of concept
that clearly demonstrates the issue so the vendor can fix it: in that case, reliability isn’t as
important as a clear demonstration of what the vulnerability is. On the other hand, if
you’re developing an exploit for use in a Red Team exercise and are tasked with
compromising some infrastructure, you might need an exploit that is reliable, works on
many different product versions, and executes the next stage of your attack.
Working out ahead of time what your exploitation objectives are ensures you don’t
waste time on irrelevant tasks. Whatever your goals, this section provides you with a good
overview of the topic and more in-depth references for your specific needs. Let’s begin
with exploiting memory corruptions.
Exploiting Memory Corruption Vulnerabilities
Memory corruptions, such as stack and heap overflows, are very common in applications
written in memory-unsafe languages, such as C/C++. It’s difficult to write a complex
application in such programming languages without introducing at least one memory
corruption vulnerability. These vulnerabilities are so common that it’s relatively easy to
find information about how to exploit them.
An exploit needs to trigger the memory corruption vulnerability in such a way that the
state of the program changes to execute arbitrary code. This might involve hijacking the
executing state of the processor and redirecting it to some executable code provided in the
exploit. It might also mean modifying the running state of the application in such a way
that previously inaccessible functionality becomes available.
The development of the exploit depends on the corruption type and what parts of the
running application the corruption affects, as well as the kind of anti-exploit mitigations
the application uses to make exploitation of a vulnerability more difficult to succeed. First,
I’ll talk about the general principles of exploitation, and then I’ll consider more complex
scenarios.
Stack Buffer Overflows
Recall that a stack buffer overflow occurs when code underestimates the length of a buffer
to copy into a location on the stack, causing overflow that corrupts other data on the stack.
Most serious of all, on many architectures the return address for a function is stored on the
||||||||||||||||||||
||||||||||||||||||||
stack, and corruption of this return address gives the user direct control of execution,
which you can use to execute any code you like. One of the most common techniques to
exploit a stack buffer overflow is to corrupt the return address on the stack to point to a
buffer containing shell code with instructions you want to execute when you achieve
control. Successfully corrupting the stack in this way results in the application executing
code it was not expecting.
In an ideal stack overflow, you have full control over the contents and length of the
overflow, ensuring that you have full control over the values you overwrite on the stack.
Figure 10-2 shows an ideal stack overflow vulnerability in operation.
Figure 10-2: A simple stack overflow exploit
The stack buffer we’ll overflow is below the return address for the function ➊. When
the overflow occurs, the vulnerable code fills up the buffer and then overwrites the return
address with the value 0x12345678 ➋. The vulnerable function completes its work and
tries to return to its caller, but the calling address has been replaced with an arbitrary value
pointing to the memory location of some shell code placed there by the exploit ➌. The
return instruction executes, and the exploit gains control over code execution.
Writing an exploit for a stack buffer overflow is simple enough in the ideal situation:
you just need to craft your data into the overflowed buffer to ensure the return address
points to a memory region you control. In some cases, you can even add the shell code to
the end of the overflow and set the return address to jump to the stack. Of course, to jump
into the stack, you’ll need to find the memory address of the stack, which might be
possible because the stack won’t move very frequently.
Technet24
||||||||||||||||||||
||||||||||||||||||||
However, the properties of the vulnerability you discovered can create issues. For
example, if the vulnerability is caused by a C-style string copy, you won’t be able to use
multiple 0 bytes in the overflow because C uses a 0 byte as the terminating character for
the string: the overflow will stop immediately once a 0 byte is encountered in the input
data. An alternative is to direct the shell code to an address value with no 0 bytes, for
example, shell code that forces the application to do allocation requests.
Heap Buffer Overflows
Exploiting heap buffer overflows can be more involved than exploiting an overflow on the
stack because heap buffers are often in a less predictable memory address. This means
there is no guarantee you’ll find something as easily corruptible as the function return
address in a known location. Therefore, exploiting a heap overflow requires different
techniques, such as control of heap allocations and accurate placement of useful,
corruptible objects.
The most common technique for gaining control of code execution for a heap overflow
is to exploit the structure of C++ objects, specifically their use of VTables. A VTable is a
list of pointers to functions that the object implements. The use of virtual functions allows
a developer to make new classes derived from existing base classes and override some of
the functionality, as illustrated in Figure 10-3.
Figure 10-3: VTable implementation
To support virtual functions, each allocated instance of a class must contain a pointer to
the memory location of the function table ➊. When a virtual function is called on an
object, the compiler generates code that looks up the address of the virtual function table,
then looks up the virtual function inside the table, and finally calls that address ➋.
Typically, we can’t corrupt the pointers in the table because it’s likely the table is stored in
||||||||||||||||||||
||||||||||||||||||||
a read-only part of memory. But we can corrupt the pointer to the VTable and use that to
gain code execution, as shown in Figure 10-4.
Figure 10-4: Gaining code execution through VTable address corruption
Use-After-Free Vulnerability
A use-after-free vulnerability is not so much a corruption of memory but a corruption of
the state of the program. The vulnerability occurs when a memory block is freed but a
pointer to that block is still stored by some part of the application. Later in the
application’s execution, the pointer to the freed block is reused, possibly because the
application code assumes the pointer is still valid. Between the time that the memory block
is freed and the block pointer is reused, there’s opportunity to replace the contents of the
memory block with arbitrary values and use that to gain code execution.
When a memory block is freed, it will typically be given back to the heap to be reused
for another memory allocation; therefore, as long as you can issue an allocation request of
the same size as the original allocation, there’s a strong possibility that the freed memory
block would be reused with your crafted contents. We can exploit use-after-free
vulnerabilities using a technique similar to abusing VTables in heap overflows, as
illustrated in Figure 10-5.
The application first allocates an object p on the heap ➊, which contains a VTable
pointer we want to gain control of. Next, the application calls delete on the pointer to free
the associated memory ➋. However, the application doesn’t reset the value of p, so this
object is free to be reused in the future.
Technet24
||||||||||||||||||||
||||||||||||||||||||
Figure 10-5: An example of a use-after-free vulnerability
Although it’s shown in the figure as being free memory, the original values from the
first allocation may not actually have been removed. This makes it difficult to track down
the root cause of a use-after-free vulnerability. The reason is that the program might
continue to work fine even if the memory is no longer allocated, because the contents
haven’t changed.
Finally, the exploit allocates memory that is an appropriate size and has control over the
contents of memory that p points to, which the heap allocator reuses as the allocation for p
➌. If the application reuses p to call a virtual function, we can control the lookup and gain
direct code execution.
Manipulating the Heap Layout
Most of the time, the key to successfully exploiting a heap-based vulnerability is in forcing
a suitable allocation to occur at a reliable location, so it’s important to manipulate the
layout of the heap. Because there is such a large number of different heap implementations
on various platforms, I’m only able to provide general rules for heap manipulation.
The heap implementation for an application may be based on the virtual memory
management features of the platform the application is executing on. For example,
Windows has the API function VirtualAlloc, which allocates a block of virtual memory for
the current process. However, using the OS virtual memory allocator introduces a couple
of problems:
Poor performance Each allocation and free-up requires the OS to switch to kernel
mode and back again.
Wasted memory At a minimum, virtual memory allocations are done at page level,
which is usually at least 4096 bytes. If you allocate memory smaller than the page size,
the rest of the page is wasted.
||||||||||||||||||||
||||||||||||||||||||
Due to these problems, most heap implementations call on the OS services only when
absolutely necessary. Instead, they allocate a large memory region in one go and then
implement user-level code to apportion that larger allocation into small blocks to service
allocation requests.
Efficiently dealing with memory freeing is a further challenge. A naive implementation
might just allocate a large memory region and then increment a pointer in that region for
every allocation, returning the next available memory location when requested. This will
work, but it’s virtually impossible to then free that memory: the larger allocation could
only be freed once all suballocations had been freed. This might never happen in a long-
running application.
An alternative to the simplistic sequential allocation is to use a free-list. A free-list
maintains a list of freed allocations inside a larger allocation. When a new heap is created,
the OS creates a large allocation in which the free-list would consist of a single freed block
the size of the allocated memory. When an allocation request is made, the heap’s
implementation scans the list of free blocks looking for a free block of sufficient size to
contain the allocation. The implementation would then use that free block, allocate the
request block at the start, and update the free-list to reflect the new free size.
When a block is freed, the implementation can add that block to the free-list. It could
also check whether the memory before and after the newly freed block is also free and
attempt to coalesce those free blocks to deal with memory fragmentation, which occurs
when many small allocated blocks are freed, returning the blocks to available memory for
reuse. However, free-list entries only record their individual sizes, so if an allocation larger
than any of the free-list entries is requested, the implementation might need to further
expand the OS allocated region to satisfy the request. An example of a free-list is shown in
Figure 10-6.
Technet24
||||||||||||||||||||
||||||||||||||||||||
Figure 10-6: An example of a simple free-list implementation
Using this heap implementation, you should be able to see how you would obtain a
heap layout appropriate to exploiting a heap-based vulnerability. Say, for example, you
know that the heap block you’ll overflow is 128 bytes; you can find a C++ object with a
VTable pointer that’s at least the same size as the overflowable buffer. If you force the
application to allocate a large number of these objects, they’ll end up being allocated
sequentially in the heap. You can selectively free one of these objects (it doesn’t matter
which one), and there’s a good chance that when you allocate the vulnerable buffer, it will
reuse the freed block. Then you can execute your heap buffer overflow and corrupt the
allocated object’s VTable to get code execution, as illustrated in Figure 10-7.
||||||||||||||||||||
||||||||||||||||||||
Figure 10-7: Allocating memory buffers to ensure correct layout
When manipulating heaps, the biggest challenge in a network attack is the limited
control over memory allocations. If you’re exploiting a web browser, you can use
JavaScript to trivially set up the heap layout, but for a network application, it’s more
difficult. A good place to look for object allocations is in the creation of a connection. If
each connection is backed by a C++ object, you can control allocation by just opening and
closing connections. If that method isn’t suitable, you’ll almost certainly have to exploit the
commands in the network protocol for appropriate allocations.
Defined Memory Pool Allocations
As an alternative to using an arbitrary free-list, you might use defined memory pools for
different allocation sizes to group smaller allocations appropriately. For example, you
might specify pools for allocations of 16, 64, 256, and 1024 bytes. When the request is
made, the implementation will allocate the buffer based on the pool that most closely
matches the size requested and is large enough to fit the allocation. For example, if you
wanted a 50-byte allocation, it would go into the 64-byte pool, whereas a 512-byte
allocation would go into the 1024-byte pool. Anything larger than 1024 bytes would be
allocated using an alternative approach for large allocations. The use of sized memory
pools reduces fragmentation caused by small allocations. As long as there’s a free entry for
the requested memory in the sized pool, it will be satisfied, and larger allocations will not
be blocked as much.
Heap Memory Storage
The final topic to discuss in relation to heap implementations is how information like the
free-list is stored in memory. There are two methods. In one method, metadata, such as
Technet24
||||||||||||||||||||
||||||||||||||||||||
block size and whether the state is free or allocated, is stored alongside the allocated
memory, which is known as in-band. In the other, known as out-of-band, metadata is stored
elsewhere in memory. The out-of-band method is in many ways easier to exploit because
you don’t have to worry about restoring important metadata when corrupting contiguous
memory blocks, and it’s especially useful when you don’t know what values to restore for
the metadata to be valid.
Arbitrary Memory Write Vulnerability
Memory corruption vulnerabilities are often the easiest vulnerabilities to find through
fuzzing, but they’re not the only kind, as mentioned in Chapter 9. The most interesting is
an arbitrary file write resulting from incorrect resource handling. This incorrect handling
of resources might be due to a command that allows you to directly specify the location of
a file write or due to a command that has a path canonicalization vulnerability, allowing
you to specify the location relative to the current directory. However the vulnerability
manifests, it’s useful to know what you would need to write to the filesystem to get code
execution.
The arbitrary writing of memory, although it might be a direct consequence of a
mistake in the application’s implementation, could also occur as a by-product of another
vulnerability, such as a heap buffer overflow. Many old heap memory allocators would use
a linked list structure to store the list of free blocks; if this linked list data were corrupted,
any modification of the free-list could result in an arbitrary write of a value into an
attacker-supplied location.
To exploit an arbitrary memory write vulnerability, you need to modify a location that
can directly control execution. For example, you could target the VTable pointer of an
object in memory and overwrite it to gain control over execution, as in the methods for
other corruption vulnerabilities.
One advantage of an arbitrary write is that it can lead to subverting the logic of an
application. As an example, consider the networked application shown in Listing 107. Its
logic creates a memory structure to store important information about a connection, such
as the network socket used and whether the user was authenticated as an administrator,
when the connection is created.
struct Session {
    int socket;
    int is_admin;
};
Session* session = WaitForConnection();
Listing 10-7: A simple connection session structure
For this example, we’ll assume that some code checks, whether or not the session is an
administrator session, will allow only certain tasks to be done, such as changing the
||||||||||||||||||||
||||||||||||||||||||
system’s configuration. There is a direct command to execute a local shell command if
you’re authenticated as an administrator in the session, as shown in Listing 10-8.
Command c = ReadCommand(session->socket);
if (c.command == CMD_RUN_COMMAND