6
1
4
2
2
3
0
4
6
1
4
2
2
3
0
4
Fig. 4. Overall CPU cost of a RandHound protocol run
Fig. 6. Total CPU usage of RandHerd setup
Fig. 5 shows the wall clock time of a complete RandHound
run for different conﬁgurations. This test measures total time
elapsed from when the client initiates RandHound until the
client has computed and veriﬁed the random output. Our mea-
surements show that the wall clock time used by the servers to
process client messages is negligible in comparison, and hence
not depicted in Fig. 5. In the 1024-node conﬁguration with
groups of 32 nodes, randomness generation and veriﬁcation
take roughly 290 and 160 seconds, respectively.
After this setup, RandHerd produces random numbers much
more efﬁciently. Fig. 7 illustrates measured wall clock time for
a single RandHerd round to generate a 32-byte random value.
With 1024 nodes in groups of 32, RandHerd takes about 6
seconds per round. The corresponding CPU usage across the
entire system, not shown in the graphs, amounts to roughly
30 seconds total (or about 29 CPU-milliseconds per node).
A clear sign of the server-oversubscription with regard to
the network-trafﬁc can be seen in Fig. 7, where the wall clock
456
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:21:04 UTC from IEEE Xplore.  Restrictions apply. 
time for 1024 nodes and a group size of 32 is lower than the
one for a group size of 24. This is due to the fact that nodes
running on the same server do not have any network-delay. We
did a veriﬁcation run without server oversubscription for up to
512 nodes and could verify that the wall clock time increases
with higher group-size.
)
c
e
s
(
e
m
T
i
k
c
o
C
l
l
l
a
W
10
8
6
4
2
0
128
256
512
768
1024
Number of Nodes
6
1
4
2
2
3
0
4
6
1
4
2
2
3
0
4
2
3
4
2
6
0
1
4
Group Size
6
1
4
2
2
3
0
4
6
1
4
2
2
3
0
4
Fig. 7. Wall clock time per randomness creation round in RandHerd
Fig. 8 compares communication bandwidth costs for CoSi,
RandHound, and RandHerd, with varying number of partici-
pants and a ﬁxed group size of 32 nodes. The straight lines
depict total costs, while the dashed lines depict average cost
per participating server. For the case of 1024 nodes, CoSi and
RandHound require about 15 and 25 MB, respectively. After
the initial setup, one round of RandHerd among 1024 nodes
requires about 400 MB (excluding any setup costs) due to
the higher in-group communication. These values correspond
to the sum of the communication costs of the entire system
and, considering the number of servers involved, are still fairly
moderate. This can be also seen as the average per server cost
is less than 300 KB for RandHerd and around 20 KB for CoSi
and RandHound.
Finally, Fig. 9 compares RandHerd, conﬁgured to use only
one group, against a non-scalable baseline protocol similar to
RandShare. Because RandShare performs PVSS secret sharing
among all n nodes, it has computation and communication
complexity of O(n3) per node. In comparison, RandHerd has
sublinear per-round complexity of O(log n) when group size
is constant.
C. Availability Failure Analysis
An adversary who controls too many nodes in any group
can compromise the availability of both RandHound and
RandHerd. We can analyze the probability of availability
failure assuming that nodes are assigned randomly to groups,
which is the case in RandHound when the client assigns groups
honestly, and is always the case in RandHerd. As discussed
in Section III-C, dishonest grouping in RandHound amounts
to self-DoS by the client and is thus outside the threat model.
RandHerd all Servers
RandHerd per Server
RandHound all Servers
RandHound per Server
CoSi all Servers
CoSi per Server
104
103
102
101
100
10-1
)
e
t
y
B
M
(
t
s
o
C
n
o
i
t
a
c
i
n
u
m
m
o
C
10-2
128
256
512
768
1024
Number of Nodes
Fig. 8. Comparison of communication bandwidth costs between RandHerd,
RandHound, and CoSi for ﬁxed group size c = 32
RandShare
RandHerd
103
)
c
e
s
(
e
m
T
i
k
c
o
C
l
l
l
a
W
102
101
100
128
256
512
768
1024
Number of Nodes
Fig. 9. Comparison of randomness generation times for RandShare and
RandHerd (group size c = 32 for RandHerd and c = n for RandShare)
To get an upper bound for the failure probability of the
entire system, we ﬁrst bound the failure probability of a
single group, that can be modeled as a random variable X
that follows the hypergeometric distribution, followed by the
application of Boole’s inequality, also known as the union
bound. For a single group we start with Chv´atal’s formula [55]
P [X ≥ E[X] + cd] ≤ e−2cd2
where d ≥ 0 is a constant and c is the number of draws or in
our case the group size. The event of having a disproportionate
number of malicious nodes in a given group is modeled by
X ≥ c − t + 1, where t is the secret sharing threshold. In our
case we use t = cp + 1 since E[X] = cp, where p ≤ 0.33
is the adversaries’ power. Plugging everything into Chv´atal’s
formula and doing some simpliﬁcations, we obtain
P [X ≥ c(1 − p)] ≤ e−2c(1−2p)2
Applying the union bound on this result, we obtain Figs. 10
and 11, which show average system failure probabilities q for
457
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:21:04 UTC from IEEE Xplore.  Restrictions apply. 
]
)
q
(
2
g
o
l
-
[
y
t
i
l
i
b
a
b
o
r
P
e
r
u
l
i
a
F
m
e
t
s
y
S
]
)
q
(
2
g
o
l
-
[
y
t
i
l
i
b
a
b
o
r
P
e
r
u
l
i
a
F
m
e
t
s
y
S
60
50
40
30
20
10
0
10
Percentage p of Compromised Nodes
0.33
0.32
0.28
0.23
20
30
40
50
60
70
Group Size c
Fig. 10. System failure probability for varying group sizes
120
100
80
60
40
20
0
0.00
0.05