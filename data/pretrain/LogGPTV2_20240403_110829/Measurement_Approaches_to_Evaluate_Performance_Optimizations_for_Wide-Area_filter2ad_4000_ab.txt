Website WWAN-Real WWAN-Virtual Dom. Count Sum Avg. Max. T’put(Kb/s)
43.3 (5.5)
mail
38.8 (4.1)
yahoo
amazon 102.3 (9.8)
204.0 (17.6)
cnn
34.5 (3.4)
35.0 (3.1)
76.4 (7.7)
196.3 (12.4)
8.5
13.8
9.6
7.6
4
6
3
6
11
16
42
67
36.7 3.3
60.3 3.8
91.9 2.2
186.8 2.8
11.0
36.0
46.8
22.3
hly similar. Our results show that the default conﬁguration parameters of most
browsers (typically chosen to work well in wired networks or wireless LANs)
perform poorly in WWAN environments. This is surprising in the context of
prior work [4], which showed that TCP, the underlying transport protocol used
by HTTP, makes eﬃcient use of the WWAN wireless link. Our results also show
that individual TCP connections are relatively eﬃcient over these wireless links.
However, the HTTP protocol needs to be suitably adapted to improve its per-
formance over WWAN environments.
In order to precisely benchmark web performance, we have used the Mozilla
browser version 1.4. In its default setting Mozilla opens upto 8 simultaneous TCP
connections per web-server using HTTP 1.0 and upto 2 TCP connections using
HTTP/1.1, Mozilla also supports proposed experimental features in HTTP/1.1,
e.g. pipelining.
262
R. Chakravorty et al.
Table 2. Data throughputs achieved for ftp-downloads over WWAN wireless links
using a single TCP connection. TCP achieves good throughput for larger ﬁles.
File Size (KB) FTP-throughput (Kbps)
1
5
10
50
100
13.2 (1.5)
18.1 (0.9)
18.8 (2.1)
29.7 (3.3)
30.5 (3.2)
3.1 Performance Benchmarks
We conducted experiments for a number of diﬀerent websites and we brieﬂy
summarize four of them in Table 1. These four websites were chosen based on
the diversity of their characteristics, content types, content volumes, and number
of servers used. The download latencies of the diﬀerent websites have signiﬁcant
variability due to the diversity in content and the multiplicity of servers. The
table also indicates the overall data throughput achieved in downloading these
websites. We can observe that the overall throughput is signiﬁcantly low. It
varies between only 7.5 Kbps to 17 Kbps for diﬀerent websites, even though the
ideal downlink data-rate is 39.6 Kbps. We can contrast the performance of this
web download to ftp-like data transfers presented in Table 2. In this table we
present the throughput achieved when we downloaded a single ﬁle (of diﬀerent
sizes) over the same WWAN wireless link.
The throughput achieved in such ﬁle transfer experiments were signiﬁcantly
higher than the web downloads. For example the web download throughput
for amazon.com with a total content size of 91.9 KB was 9.6 Kbps, while the
download of a single 50 or 100 KB ﬁle was around 30 Kbps! The high ﬁle transfer
data throughput conﬁrms prior observations made by Ludwig et. al. [4] that TCP
performs quite well over GSM-based wireless links. This implies that there are
signiﬁcant ineﬃciencies in the web download mechanisms and carefully applied
optimizations can signiﬁcantly improve the performance.
3.2 Performance Optimizations
We have examined the performance of a wide-selection of optimization tech-
niques that have been proposed at the diﬀerent layers of the protocol stack
— application, session, transport, and link. As discussed in Section 2 some of
these optimization techniques relied on a transparent or explicit proxy that was
located in our laboratory. In this section we will discuss the beneﬁts observed
by each of these techniques, except for the explicit dual-proxy techniques in
most cases. The dual-proxy techniques works with very diﬀerent assumptions
of deployment and hence it is not possible to make a fair comparison of these
techniques with the no-proxy or single-proxy techniques. Therefore, we will
only comment on the beneﬁts of the schemes individually and their combined
Measurement Approaches to Evaluate Performance Optimizations
263
eﬀects in the summary of results (Section 4). We now discuss performance
optimizations.
Application layer Optimizations. For application layer optimizations, we
quantiﬁed the beneﬁts of schemes like HTTP pipelining, extended caching, delta
encoding, and dynamic content compression.
Dynamic Data Compression. We implemented dynamic content compression
using an application-level proxy operating in the transparent as well as the expli-
cit dual-proxy mode. From our experiments, we have observed that the content
in the diﬀerent websites are very compressible. However, the beneﬁts of com-
pression on application performance may not be as substantial (except for the
case of Yahoo). This apparent anomalous behavior is due to the typical object
size distribution of some webpages. Here we observe that most of the objects in
the webpages can be small, e.g. nearly 60% of the objects in a CNN snapshot
were less than 1 KB (typically 1 TCP segment, assuming 1460 byte payloads of
IP packets). Any amount of compression would clearly not change the number
of segments below one. Therefore the overheads of issuing individual GET re-
quests for these objects sequentially over the two TCP connections dominates
the transfer time of these objects and hence the improvement in data transfer
latency due to compression will be minimal in these cases. In contrast, for web
sites where the distribution of object sizes is skewed towards larger values (e.g.
Yahoo) the impact on download latencies is higher.
HTTP Pipelining. We evaluated performance of the HTTP 1.1 protocol. The
default persistent HTTP/1.1 protocol gets each of these small objects sequen-
tially over its two TCP connections, and waits numerous times between the
completion of each GET request and the beginning of the next. In contrast,
HTTP pipelining allows many GET requests to be issued simultaneously by the
mobile client and hence the objects are fetched without any intervening gaps.
From our experiments, we see that HTTP pipelining provides between 35% to
56% beneﬁts for the diﬀerent websites. HTTP pipelining is an an experimental
technique in the HTTP/1.1 standard and we found that, unfortunately, most
browsers do not enable this feature by default.
CHK-based Caching/Delta Compression. We also investigated performance
of extended CHK-based caching and delta coding for diﬀerent web-sites. Our
experiments show that such techniques on average improves real web-browsing
experience by about 3-6% for fast-changing web-sites.
Session level Optimizations. We performed a detailed study of performance
enhancement schemes like (1) the impact of multiple simultaneous transport
connections as typical in standard web browsers, (2) impact of DNS look-ups on
web downloads [2], and, (3) parse-and-push technique.
Varying TCP Connections. We investigated an alternative session layer tech-
nique to optimally choose the number of simultaneous TCP connections opened
by the client to the server. We found that for a base capacity of the GPRS hand-
set (39.6 Kbps in our case) increasing the number of TCP connections (from 2
264
R. Chakravorty et al.
to 6) leads to signiﬁcant improvement in the user experience (i.e. for CNN the
download latency reduces from 196.3 seconds to 123.0 seconds).
DNS Boosting. DNS-boosting achieves the same eﬀect as URL re-writing (as
in Content Distribution Networks) by intelligently manipulating DNS queries
from the client. Speciﬁc details of this scheme is available in [2]. Note that this
can signiﬁcantly beneﬁt performance in two ways: (1) by avoiding extra DNS
Lookups and (2) by reducing the number of TCP connections opened by a web
browser. We implemented this technique as a proxy and performed download
experiments for the diﬀerent websites. By eliminating the DNS lookups for the
transparent proxy, we achieve another 5-9% improvement in the download la-
tency. The net improvements due to the session and application techniques are
between 53-65%.
Parse-n-Push. Parse-and-push is a session-level, explicit, dual-proxy scheme
that emulates deterministic content pushing towards the mobile client, when
the wireless downlink would have been otherwise left idle. While supporting
parse-and-push mechanism requires explicit client-side software update, the
scheme helps to improve overall utilization of the link. Our experiments have
shown that Parse-and-push provides an additional 5%-12% improvement in the
web download latency for the popular websites.
Transport layer Optimizations. We evaluated the performance of standard
TCP, a recently proposed link-adapted variant suited for WWAN environments
(TCP-WWAN), and a customized UDP based transport (UDP-GPRS) solution.
Using two diﬀerent proxies, we quantiﬁed the additional beneﬁts of using
link-adapted TCP and custom UDP based solution. In these experiments, we
apply the application-level optimizations (full compression) and session-level
optimizations. We have observed that using TCP-WWAN (transparently
deployed) achieves between 5-13% additional beneﬁts for the diﬀerent websites.
UDP-GPRS custom protocol (dual-proxy approach) leverages its speciﬁc know-
ledge of the wireless link characteristics to improve the download performance
further (between 7-14% for the diﬀerent websites).
Link layer Optimizations. Using trace-based simulations, we have studied the
interaction between link-layer retransmissions (ARQ) and forward error correc-
tion (FEC) schemes in WWAN environments. We have investigated mechanisms
that allow the RLC to dynamically choose the encoding schemes in conjunction
with the ability to enable or disable ARQ, and the impact of such mechanisms
on applications. Performing actual experimentation for this study was diﬃcult
since we had no control on the encoding schemes used by the Base Station to
transmit data the mobile client. At the mobile client we only had the ﬂexibi-
lity to enable or disable ARQ, and the ability to disable FECs. Therefore, we
performed trace-based simulations to study the data performance for various
applications over a wide range of channel conditions and encoding choices.
Our study conﬁrms that for each diﬀerent channel condition there is an op-
timal value of FEC that leads to the least download latency. For example a
Measurement Approaches to Evaluate Performance Optimizations
265
n
o
i
t
u
b
i
r
t
n
o
C
e
v
i
t
a
e
R
l
 0.45
 0.4
 0.35
 0.3
 0.25
 0.2
 0.15
 0.1
 0.05
 0
Relative contribution of optimization techniques
App
Session
Transport
Link
mail
yahoo
amazon
cnn
Websites
Fig. 3. Relative contribution of optimizations for 4 popular web-sites.
moderately poor channel, with an error rate of 0.9% on the GPRS channel,
5-6% FEC is the optimal choice to minimize download times. The amount of
required FEC for such optimal performance increases with increase in channel
error rates. This suggests that the RLC should continuously monitor the channel
conditions and dynamically choose the amount of FEC to be applied on reliable
data transfers across the wireless links.
4 Summary of Results
From the experiments conducted, we classiﬁed the performance optimizations
into two classes — those that require re-conﬁguration or software update in
the mobile client, i.e. uses an explicit proxy and those that have no such re-
quirements. Here we assumed a reasonably good wireless link (error less than
0.2%) where dynamic (adaptive) FECs provide a latency improvement of about
5%. This value is derived from our link-layer trace-based simulations to improve
performance.
In Figure 3, we only plot the relative contribution of the schemes that require
no client-side reconﬁguration when all optimizations are applied simultaneously.
For example, in Amazon application, session, transport, and link layer opti-
mization techniques contribute 17.9%, 37.8%, 5.1%, and 2.2% respectively. The
improvement provided by all the techniques applied simultaneously were the sum
of these values, 63.0%, which brought the download latency for Amazon from
76.4 seconds to 29.3 seconds. In general, we can observe that application
and session layer techniques have a dominating eﬀect in improving
the web performance. They lead to 48-61% web performance improvements
for our example websites. Thus our work demonstrates that the application and
session-level mechanisms currently deployed for web browsing applications make
poor use of the relatively eﬃcient lower layers. Employing appropriate optimiza-
tions at these layers (as described in this paper) can help bridging this perfor-
mance gap observed between the upper and lower layers. Our results show the
266
R. Chakravorty et al.
beneﬁts to be somewhat higher when client-side reconﬁguration/software update
is applied.
Note that transport, and link layers optimizations typically provide an addi-
tional 5-10% performance improvement (considering reasonably good link con-
ditions), which is still signiﬁcant for web downloads over WWAN links.
5 Conclusions and Ongoing Work
Preliminary results from our comparative performance study of diﬀerent opti-
mization techniques reveals the following: (1) There is a signiﬁcant mismatch in
the performance of default HTTP protocols and its underlying transport mecha-
nism, TCP. Unlike wireline networks, standard web browsers are unable to ex-
ploit even the meagre resources of the WWAN links. (2) Signiﬁcant performance
beneﬁts can be realized by suitable optimizations implemented at the application
and session layers. Commercial web servers and browsers should implement the
HTTP-pipelining scheme, which provides noticeable beneﬁts to end-user perfor-
mance. (3) Inspite of signiﬁcant compressibility of web content, dynamic data
compression techniques do not provide commensurate performance beneﬁts. (4)
Custom protocols, explicitly designed for WWAN environments, present signi-
ﬁcant performance beneﬁts at the transport layer. However, in many cases the
deployment of such schemes can be expensive for the service providers.
In our ongoing work, we are conducting more thorough experiments including
range of other popular web-sites to obtain even more accurate web browsing
benchmarks. We are also investigating other novel approaches for benchmarking
application performance across realistic web server workloads and in presence
of dynamically changing web content. We plan to extend this study for other
WWANs e.g. UMTS, CDMA 2000.
References
1. R. Chakravorty and I. Pratt.: “Performance Issues with General Packet Radio Ser-
vice”, Journal of Communications and Networks (JCN), Vol. 4, No. 2, December
2002.
2. P. Rodriguez and S. Mukherjee and S. Rangarajan.: “Session-level techniques to
Improve Web Browsing Performance over Wide-Area Wireless Links”, Proc. of the
World Wide Web (WWW) Conference, 2004 (to appear).
3. M. Meyer.: “TCP Performance over GPRS”, Proc. of IEEE WCNC 1999.
4. R. Ludwig, et al.: “Multi-Layer Tracing of TCP over a Reliable Wireless Link”,
Proc. of ACM SIGMETRICS 1999.
5. P. Benko, et al.: “A Large-scale, Passive Analysis of End-to-End TCP Performance
over GPRS”, Proc. of the IEEE INFOCOM 2004 (to appear).