# Website Performance and Optimization in WWAN Environments

## 1. Introduction
Our study evaluates the performance of web downloads over Wide Area Wireless Networks (WWAN) and proposes several optimization techniques to improve this performance. We found that the default configuration parameters of most browsers, which are typically optimized for wired networks or wireless LANs, perform poorly in WWAN environments. This is surprising given that previous work [4] showed that TCP, the underlying transport protocol used by HTTP, makes efficient use of the WWAN wireless link. Our results also indicate that while individual TCP connections are relatively efficient over these links, the HTTP protocol needs to be adapted to improve its performance in WWAN environments.

## 2. Experimental Setup
To benchmark web performance, we used Mozilla browser version 1.4, which in its default setting opens up to 8 simultaneous TCP connections per web server using HTTP 1.0 and up to 2 TCP connections using HTTP/1.1. Mozilla also supports experimental features in HTTP/1.1, such as pipelining.

### Table 1: Data Throughputs Achieved for Web Downloads Over WWAN Links
| Website | Total Content (KB) | Avg. Throughput (Kbps) | Max. Throughput (Kbps) |
|---------|-------------------|------------------------|------------------------|
| mail    | 38.8              | 5.5                    | 38.8                   |
| yahoo   | 102.3             | 9.8                    | 102.3                  |
| amazon  | 91.9              | 9.6                    | 196.3                  |
| cnn     | 76.4              | 7.7                    | 76.4                   |

### Table 2: Data Throughputs Achieved for FTP-Downloads Over WWAN Links
| File Size (KB) | FTP-throughput (Kbps) |
|----------------|-----------------------|
| 1              | 13.2 (1.5)            |
| 5              | 18.1 (0.9)            |
| 10             | 18.8 (2.1)            |
| 50             | 29.7 (3.3)            |
| 100            | 30.5 (3.2)            |

## 3. Performance Benchmarks
We conducted experiments on various websites, summarizing four in Table 1. These websites were chosen based on their diverse characteristics, content types, and server usage. The download latencies varied significantly due to differences in content and the number of servers. The overall data throughput was notably low, ranging from 7.5 Kbps to 17 Kbps, even though the ideal downlink data rate is 39.6 Kbps. In contrast, FTP-like data transfers achieved higher throughputs, confirming that TCP performs well over GSM-based wireless links. This suggests significant inefficiencies in web download mechanisms.

## 4. Performance Optimizations
We examined a wide range of optimization techniques at different layers of the protocol stack—application, session, transport, and link. Below are the key findings:

### 4.1 Application Layer Optimizations
- **HTTP Pipelining**: Allows multiple GET requests to be issued simultaneously, reducing download latency by 35-56%.
- **Dynamic Data Compression**: Compressing content can reduce download times, especially for sites with larger objects like Yahoo.
- **Extended Caching/Delta Encoding**: Improves real web-browsing experience by 3-6% for fast-changing websites.

### 4.2 Session Level Optimizations
- **Varying TCP Connections**: Increasing the number of simultaneous TCP connections (from 2 to 6) significantly improves user experience.
- **DNS Boosting**: Reduces download latency by 5-9% by eliminating extra DNS lookups.
- **Parse-and-Push**: Emulates deterministic content pushing, improving download latency by 5-12%.

### 4.3 Transport Layer Optimizations
- **TCP-WWAN**: A link-adapted variant of TCP that provides an additional 5-13% improvement.
- **UDP-GPRS Custom Protocol**: Further improves download performance by 7-14%.

### 4.4 Link Layer Optimizations
- **ARQ and FEC Schemes**: Trace-based simulations show that optimal FEC values minimize download times. For example, 5-6% FEC is optimal for a GPRS channel with a 0.9% error rate.

## 5. Summary of Results
Figure 3 shows the relative contribution of optimizations for popular websites. For Amazon, application, session, transport, and link layer optimizations contribute 17.9%, 37.8%, 5.1%, and 2.2%, respectively. Combined, these optimizations reduce download latency from 76.4 seconds to 29.3 seconds. Application and session layer techniques have a dominant effect, leading to 48-61% improvements in web performance.

## 6. Conclusions and Ongoing Work
Our study highlights the need for optimizing web browsing in WWAN environments. Key takeaways include:
- Significant mismatch between HTTP and TCP performance in WWAN.
- Notable benefits from application and session layer optimizations, particularly HTTP pipelining.
- Limited benefits from dynamic data compression.
- Custom protocols designed for WWAN provide significant performance benefits but may be expensive to deploy.

In ongoing work, we plan to conduct more thorough experiments and extend our study to other WWANs like UMTS and CDMA 2000.

## References
1. R. Chakravorty and I. Pratt.: “Performance Issues with General Packet Radio Service”, Journal of Communications and Networks (JCN), Vol. 4, No. 2, December 2002.
2. P. Rodriguez and S. Mukherjee and S. Rangarajan.: “Session-level techniques to Improve Web Browsing Performance over Wide-Area Wireless Links”, Proc. of the World Wide Web (WWW) Conference, 2004 (to appear).
3. M. Meyer.: “TCP Performance over GPRS”, Proc. of IEEE WCNC 1999.
4. R. Ludwig, et al.: “Multi-Layer Tracing of TCP over a Reliable Wireless Link”, Proc. of ACM SIGMETRICS 1999.
5. P. Benko, et al.: “A Large-scale, Passive Analysis of End-to-End TCP Performance over GPRS”, Proc. of the IEEE INFOCOM 2004 (to appear).