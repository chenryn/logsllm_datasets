participants  received  different  challenges  even  for  the  same 
index  of  challenge  since  each  challenge  in  the  usability 
experiments  was  randomly  selected  from  the  350  generated 
challenges.  We  can  see  from  the  figure  that  the  participants 
improved  the  solving  time  significantly  as  their  experiences 
built  up.  They  spent  25.6s  on  average  to  solve  the  first 
challenge, and the solving time dropped quickly to 20s or below 
after  the  first  two  challenges.  This  indicates  that  Cortcha  is 
fairly easy and quick to learn. 
27
25
23
21
19
17
15
)
s
(
e
m
i
t
g
n
i
v
l
o
s
.
e
v
A
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
Cortcha test index
Figure 9.  Average solving time vs. the challenge index. 
2.  Errors  and  efficiency.  The  overall  accuracy  rate  was  86.2%, 
and the average solving time among all the 84 participants and 
20  challenge  indexes  was  18.3s.  As  compared  in  Table  1, 
Cortcha  has  a  human  accuracy  rate  that  is  slightly  higher  than 
Asirra,  Orientation  and  IMAGINATION,  significantly  higher 
than  CT_L,  but  lower  than  ARTiFACIAL,  Video  and  CT_A. 
On  average,  Cortcha  takes  slightly  more  time  to  solve  than 
Asirra  and  ARTiFACIAL,  but  less  than  other  IRCs  with  a 
solving time reported.  
We  have  also  conducted  a  usability  study  of  Google’s  text 
CAPTCHA with the same group of people. The text challenges 
from  Google’s  Gmail  site  were  used  in  the  experiments.  Each 
participant  was  asked  to  solve  20  text  challenges  sequentially. 
105 volunteers participated and completed the test. The average 
accuracy rate was 82.8% and the average solving time was 7.9s. 
Compared  with  Google’s  text  CAPTCHA,  Cortcha  has  a 
slightly higher human accuracy rate but takes more than double 
the time to solve a challenge.  
It  is  worth  mentioning  that  in  the  Cortcha’s  usability  study, 
more  than  half  (43  out  of  84)  of  the  participants  had  an 
accuracy  rate  higher  than  90%,  and  the  participants  with  a 
higher accuracy rate (>80%) spent a significantly more time (3s 
more  on  average)  than  those  who  performed  poorly  (with  an 
accuracy  rate  lower  than  80%).  Since  the  challenges  were 
randomly selected in the experiment, this may indicate that the 
participants  with  a  lower  accuracy  rate  might  not  have  paid 
sufficient attention.  
We  observed  that  51%  of  the  tested  challenges  were  solved  in 
less  than  15  seconds,  but  we  also  got  a  long  tail  for  the 
distribution of the solving time, up to 40 seconds or even more. 
In Cortcha, some challenges are easier to solve than others. For 
example,  if  a  detached  object  is  semantically  meaningful  and 
197 
the  unnaturalness  of  the  inpainted  region is  apparent  to  human 
eyes, this challenge will be easy to solve. Otherwise it can take 
a longer time to solve, or lead to more erroneous responses.  
3.  Satisfaction. We collected 72 valid responses in the exit survey. 
About  78%  (≈56/72)  of  the  responses  indicated  a  difficulty 
level of either medium/acceptable or easy for them to learn how 
to solve Cortcha. About 1/3 of the responses preferred Cortcha 
to  traditional  text-based  CAPTCHAs.  Many  of  them  liked 
Cortcha  because  it  was  interesting,  secure,  and  keyboard-free. 
Complaints  were  mainly  on  the  difficulty  of  some  Cortcha 
challenges.  Specifically,  for  some  challenges,  it  was  hard  to 
either determine where the inpainted region was or differentiate 
between candidate objects with similar color patterns. 
6.3.3  Discussions 
After  examining  each  challenge  and  its  responses,  we  concluded 
that  most  of  the  “difficult”  images  had  the  following  common 
characteristics: the detached object lay inside a repeated texture. An 
almost seamless inpainting result was produced: although different 
from the original image, the inpainted image looked natural. There 
was  no  unnaturalness  in  the  inpainted  region  that  the  participants 
could leverage to locate the original position of the detached object. 
The  surrounding  context  was  mainly  textures,  almost  irrelevant 
semantically  to  the  detached  object.  This  inspires  us  to  add  a 
posteriori check: if the inpainted region has a similar pattern as its 
neighborhood, the challenge might be hard to solve and should not 
be used. We will implement this posteriori check to further improve 
Cortcha’s usability. 
Another inspiring finding is: easy challenges were dominant in our 
randomly generated challenges. 294 out of the 350 challenges have 
been  tested  more  than  three  times.  173  out  of  the  294  challenges 
(58.8%)  were  found  to  be  very  easy  to  solve,  and  the  participants 
did not make any mistake on them. Less than 10% (24) of the 294 
challenges  were  found  difficult.  Their  accuracy  rates  were  below 
50%.  This  observation  inspires  us  to  explore  a  heuristic  approach 
towards  image  filtering  to  remove  difficult  images.  This  approach 
can improve the human accuracy rate and reduce the solving time. 
6.4  Robustness 
6.4.1  Random Guess Attacks 
When  8  candidate  objects  are  used  in  a  Cortcha  challenge,  a 
random  selection  has  a  chance  of  1/8  or  12.5%  to  be  correct.  A 
random  search  for  the  correct  alignment  position  results  in  a 
probability of 10%*10% or 1.0% to be correct. Therefore a random 
guess attack could have a success rate of 0.125%, which is however 
much  smaller  than  the  design  criterion  (0.6%  success  for  bots,  see 
Section 2.2).  
A random  guess attack can be  made even harder by using a larger 
number of candidate objects. For example when L=12, the success 
rate  of  a  random  guess  attack  will  be  0.083%.  This  rate  can  be 
further  reduced.  For  example,  when  a  larger  inpainted  image  is 
used,  the  tolerance  of  alignment  position  variations  can  be 
tightened from the current 10% to, say 5%, reducing the success of 
a random guess attack to 0.021%.  
6.4.2  Other Possible Attacks 
Using  machine  learning  to  classify  or  recognize  objects  was  an 
effective  attack  on  Asirra  and  ARTiFACIAL,  but  it  will  not  work 
on  Cortcha  since  the  objects  used  in  a  current  challenge  are 
uncorrelated  with  those  used  in  other  challenges.  However,  object 
segmentation  and  image  inpainting  used  in  generating  Cortcha 
challenges  may  leave  traces  or  characteristics,  which  can  be 
exploited  to  tell  the  detached  object  or  its  position  in  the  image. 
Possible attacks that we can think of are as follows.  
An image may show a specific noise or quantization pattern such as 
an  imaging  sensor  noise  pattern  or  a  JPEG  quantization  pattern. 
These  patterns  have  been  used  in  image  forensics  to  detect  image 
forgery  and  identify  image  source  [32].  A  correlation  of  such  a 
pattern in the detached object and in the remaining image may help 
identify  the  detached  object.  The  inpainted  region  may  show  a 
distinct  pattern  that  helps  locate  the  inpainted  region.  However, 
these  patterns  can  be  destroyed  by  scaling  the  image’s  size  with  a 
nonlinear bicubic interpolation and by adding noise to the image. In 
Cortcha, both inpainted images and candidate objects are scaled in 
size using a bicubic interpolation, and then random noise is added, 
as  described  in  Section  6.1.4.  Therefore  noise  or  quantization 
patterns  cannot  be  exploited  to  attack  Cortcha.  More  sophisticated 
measures  such  as  those  in  [33]  can  also  be  adopted  by  Cortcha  to 
thwart attacks based on other image forensic technologies.   
There  might  exist  some  local  similarity  between  an  object  and  its 
surrounding  region  due  to  light  reflection,  shadowing,  inaccurate 
segmentation, or other issues. Such local similarity, calculated with 
computable  features  such  as  color  or  texture  patterns,  can  be 
exploited to solve a challenge. This issue is addressed in Cortcha by 
aligning  an object’s  boundary  with  its  gradient  edges,  cropping  an 
object which contains little or no local similarities (currently based 
on color and texture) with its surrounding region, and using a buffer 
region to separate a detached object and the remaining image. From 
our observation on the 350 Cortcha challenges used in our study, a 
buffer  region  with  a  width  of  n=3  pixels  can  effectively  remove 
color-based  local  similarity  between  a  detached  object  and  the 
remaining  image.  Such  a  buffer  region  does  not  have  a  significant 
perceptual  impact  on  the  composite  image  when  a  human  user  is 
solving a challenge.   
Low-level  features  might  be  used  to  detect  possible  correlations 
between  a  detached  object  and  the  remaining  image.  Such  a 
correlation  would  increase  the  chance  to  identify  the  detached 
object. To address this threat, we make sure that all the candidates 
have  a  similar  correlation  with  the  inpainted  image.  For  example, 
readily  computable  low-level  features  such  as  color  histogram  and 
complexity  are  used  to  find  decoy  objects.  When  the  image 
database  is  sufficiently  large,  decoy  objects  are  all  similar  to  the 
detached  object  in  terms  of  the  applied  low-level  features.  In 
addition, SIFT [30] is used in Cortcha to prevent the existence of a 
similar  object  in  the  remaining  image.  It  is  possible  that  attackers 
apply  other  low-level  features  or  better  algorithms  to  calculate 
correlations  or  detect  similar  objects.  However,  these  low-level 
features or algorithms can also be adopted by Cortcha to thwart this 
type of attack. 
A possible brute force attack is to use the same object segmentation 
method as used in Cortcha to solve a challenge. In such an attack, 
each candidate object is tested at all the possible positions. At each 
trial,  the  same  object  segmentation  procedure  is  applied  to  the 
composite image. If the segmentation result agrees  with the object 
under test and the trial location, the detached object and its location 
are deduced. However, this brute force attack will not be effective. 
At a trial position, the object under test is unlikely to have a smooth 
transition  with  the  image  at  its  boundary,  thus  leading  to  an 
agreeing  segmentation  result.  Therefore  this  attack  will  produce 
many  false  alarms,  as  confirmed  by  our  preliminary  experimental 
results.  
Artifacts  produced  by  the  image  inpainting  might  be  exploited  to 
deduce an inpainted region. Wu et al. proposed an attack to identify 
an inpainted region [34]. Their attack compares different parts of an 
image to detect abnormal similarity between destination blocks and 
their source blocks in the inpainting process, and then deduces the 
inpainted  region.  In  Cortcha’s  inpainting,  the  source  blocks  are 
mainly  from  the  primary  source,  a  secret  image  in  the  database. 
When  the  database  is  large  and  contains  a  large  variation  of 
different images, the cropped image is unlikely to contribute many 
blocks  during  inpainting.  In  addition,  when  filling  a  block,  our 
method  applies  a  smoothing  operation  to  smooth  the  pixels  from 
the  source  block  and  those  in  the  destination  blocks.  Such  a 
smoothing  operation  removes  most  of  the  similarity  between  a 
destination  block  and  its  source  block.  Therefore  the  attack 
proposed in [34] is ineffective on Cortcha.  
A  lousy  inpainting  method  may  leave  some  artifacts  to  indicate 
where inpainting starts. This location information can be correlated 
with the contour of the detached object, leading to a possible attack. 
It  is  also  possible  that  an  inpainting  method  produces  a  smoothed 
region that lacks of structures as compared to the remaining image. 
Therefore,  detecting  structureless  regions  may  help  locate  the 
inpainted  region.  Our  inpainting  method  applies  different  schemes 
to  decide  which  block  is  filled  next.  It  ensures  that  an  inpainted 
region is still rich in structures. It also prevents inpainting artifacts 
from  forming  a  long  edge  in  parallel  with  the  detached  object’s 
contour. We have conducted an experiment to find all the edges in 
an  inpainted  image  that  are  in  parallel  with  some  portions  of  the 
detached object’s contour. The preliminary result showed that most 
of the found edges were irrelevant to the detached object’s contour. 
Therefore  correlating  inpainting  artifacts  with  a  candidate  object’s 
contour does not lead to locating the inpainted region. 
Another possible brute force attack is the following. Each candidate 
object is tested at all the possible locations. At each trial, the region 
covered by the candidate is taken as an object and cropped from the 
image.  The  same  inpainting  procedure  as  that  used  in  generating 
Cortcha  challenges  is  then  applied  to  fill  the  cropped  region.  The 
inpainted  result  is  then  compared  with  the  region  covered  by  the 
candidate.  If  they  are  similar,  the  candidate  is  presumed  to  be 
cropped  from  that  position.  The  original  inpainting  algorithm 
proposed in [27] would suffer from this attack, since the inpainting 
procedure  is  deterministic  and  all  the  source  blocks  used  in 
inpainting are publically available. Our inpainting algorithm selects 
source  blocks  from  a  secret  image  whenever  possible,  and 
introduces  randomness 
the  public 
remaining  image.  These  measures  prevent  the  above  attack  from 
producing  an  inpainting  result  similar  to  ours.  On  the  other  hand, 
this brutal force attack in general would hardly be practical, since it 
requires applying the inpainting process, which is slow, many times. 
in  selecting  blocks  from 
6.5  Legal Issues for Deployment 
Copyrights of images used by Cortcha might cause legal issues that 
prevent  Cortcha  from  being  deployed  in  the  real  world.  This  is  a 
common issue for all the IRCs that use crawled images, such as the 
CAPTCHAs proposed by Chew and Tygar [11] and the orientation 
CAPTCHA  [16]  introduced  by  Google.  Cortcha  likely  faces  even 
more  copyright  issues  since  it  modifies  images  to  generate 
challenges,  and  some  of 
images  may  appear 
unpleasantly. We leave these issues for lawyers to deal with in near 
term, and for future technology innovations in the longer term. 