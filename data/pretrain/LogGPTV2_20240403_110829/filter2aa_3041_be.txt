12 
13 func main() { 
14 
 // Println 写到标准日志记录器 
15 
 log.Println("message") 
16 
17 
 // Fatalln 在调用 Println()之后会接着调用 os.Exit(1) 
18 
 log.Fatalln("fatal message") 
19 
20 
 // Panicln 在调用 Println()之后会接着调用 panic() 
21 
 log.Panicln("panic message") 
22 } 
如果执行代码清单 8-3 中的程序，输出的结果会和代码清单 8-2 所示的输出类似。让我们分
析一下代码清单 8-4 中的代码，看看它是如何工作的。 
代码清单 8-4  listing03.go：第 08 行到第 11 行 
08 func init() { 
09 
 log.SetPrefix("TRACE: ") 
10 
 log.SetFlags(log.Ldate | log.Lmicroseconds | log.Llongfile) 
11 } 
在第 08 行到第 11 行，定义的函数名为 init()。这个函数会在运行 main()之前作为程序
初始化的一部分执行。通常程序会在这个 init()函数里配置日志参数，这样程序一开始就能使
用 log 包进行正确的输出。在这段程序的第 9 行，设置了一个字符串，作为每个日志项的前缀。
这个字符串应该是能让用户从一般的程序输出中分辨出日志的字符串。传统上这个字符串的字
符会全部大写。 
有几个和 log 包相关联的标志，这些标志用来控制可以写到每个日志项的其他信息。代码
清单 8-5 展示了目前包含的所有标志。 
代码清单 8-5  golang.org/src/log/log.go 
const ( 
 // 将下面的位使用或运算符连接在一起，可以控制要输出的信息。没有 
 // 办法控制这些信息出现的顺序（下面会给出顺序）或者打印的格式 
 // （格式在注释里描述）。这些项后面会有一个冒号： 
 //    2009/01/23 01:23:23.123123 /a/b/c/d.go:23: message 
 // 日期: 2009/01/23 
 Ldate = 1 << iota 
 // 时间: 01:23:23 
 Ltime 
 // 毫秒级时间: 01:23:23.123123。该设置会覆盖 Ltime 标志 
 Lmicroseconds 
 // 完整路径的文件名和行号: /a/b/c/d.go:23 
 Llongfile 
 // 最终的文件名元素和行号: d.go:23 
 // 覆盖 Llongfile 
 Lshortfile 
 // 标准日志记录器的初始值 
 LstdFlags = Ldate | Ltime 
) 
代码清单 8-5 是从 log 包里直接摘抄的源代码。这些标志被声明为常量，这个代码块中的第
一个常量叫作 Ldate，使用了特殊的语法来声明，如代码清单 8-6 所示。
代码清单 8-6  声明 Ldate 常量
// 日期: 2009/01/23 
Ldate = 1 << iota 
关键字 iota 在常量声明区里有特殊的作用。这个关键字让编译器为每个常量复制相同的表
达式，直到声明区结束，或者遇到一个新的赋值语句。关键字 iota 的另一个功能是，iota 的
初始值为 0，之后 iota 的值在每次处理为常量后，都会自增 1。让我们更仔细地看一下这个关
键字，如代码清单 8-7 所示。 
代码清单 8-7  使用关键字 iota
const ( 
 Ldate = 1 << iota  // 1 << 0 = 000000001 = 1 
 Ltime    
 // 1 << 1 = 000000010 = 2 
 Lmicroseconds 
 // 1 << 2 = 000000100 = 4 
 Llongfile    
 // 1 << 3 = 000001000 = 8 
 Lshortfile    
 // 1 << 4 = 000010000 = 16 
 ... 
) 
代码清单 8-7 展示了常量声明背后的处理方法。操作符<<对左边的操作数执行按位左移操
作。在每个常量声明时，都将 1 按位左移 iota 个位置。最终的效果使为每个常量赋予一个独立
位置的位，这正好是标志希望的工作方式。 
常量 LstdFlags 展示了如何使用这些标志，如代码清单 8-8 所示。
代码清单 8-8  声明 LstdFlags 常量
const ( 
 ... 
 LstdFlags = Ldate(1) | Ltime(2) = 00000011 = 3 
) 
在代码清单 8-8 中看到，因为使用了复制操作符，LstdFlags 打破了 iota 常数链。由于
有|运算符用于执行或操作，常量 LstdFlags 被赋值为 3。对位进行或操作等同于将每个位置
的位组合在一起，作为最终的值。如果对位 1 和 2 进行或操作，最终的结果就是 3。 
让我们看一下我们要如何设置日志标志，如代码清单 8-9 所示。 
代码清单 8-9  listing03.go：第 08 行到第 11 行 
08 func init() { 
09 
 ... 
10 
 log.SetFlags(log.Ldate | log.Lmicroseconds | log.Llongfile) 
11 } 
这里我们将 Ldate、Lmicroseconds 和 Llongfile 标志组合在一起，将该操作的值传入
SetFlags 函数。这些标志值组合在一起后，最终的值是 13，代表第 1、3 和 4 位为 1（00001101）。
由于每个常量表示单独一个位，这些标志经过或操作组合后的值，可以表示每个需要的日志参数。
之后 log 包会按位检查这个传入的整数值，按照需求设置日志项记录的信息。
初始完 log 包后，可以看一下 main()函数，看它是是如何写消息的，如代码清单 8-10 所示。 
代码清单 8-10  listing03.go：第 13 行到第 22 行 
13 func main() { 
14 
 // Println 写到标准日志记录器 
15 
 log.Println("message") 
16 
17 
 // Fatalln 在调用 Println()之后会接着调用 os.Exit(1) 
18 
 log.Fatalln("fatal message") 
19 
20 
 // Panicln 在调用 Println()之后会接着调用 panic() 
21 
 log.Panicln("panic message") 
22 } 
代码清单 8-10 展示了如何使用 3 个函数 Println、Fatalln 和 Panicln 来写日志消息。
这些函数也有可以格式化消息的版本，只需要用 f 替换结尾的 ln。Fatal 系列函数用来写日志
消息，然后使用 os.Exit(1)终止程序。Panic 系列函数用来写日志消息，然后触发一个 panic。
除非程序执行 recover 函数，否则会导致程序打印调用栈后终止。Print 系列函数是写日志消
息的标准方法。 
log 包有一个很方便的地方就是，这些日志记录器是多 goroutine 安全的。这意味着在多个
goroutine 可以同时调用来自同一个日志记录器的这些函数，而不 会有彼此间的写冲突。标准日志
记录器具有这一性质，用户定制的日志记录器也应该满足这一性质。 
现在知道了如何使用和配置 log 包，让我们看一下如何创建一个定制的日志记录器，以便
可以让不同等级的日志写到不同的目的地。 
8.2.2  定制的日志记录器 
要想创建一个定制的日志记录器，需要创建一个 Logger 类型值。可以给每个日志记录器配
置一个单独的目的地，并独立设置其前缀和标志。让我们来看一个示例程序，这个示例程序展示
了如何创建不同的 Logger 类型的指针变量来支持不同的日志等级，如代码清单 8-11 所示。
代码清单 8-11  listing11.go 
01 // 这个示例程序展示如何创建定制的日志记录器 
02 package main 
03 
04 import ( 
05 
 "io" 
06 
 "io/ioutil" 
07 
 "log" 
08 
 "os" 
09 ) 
10 
11 var ( 
12 
 Trace   *log.Logger // 记录所有日志 
13 
 Info    *log.Logger // 重要的信息 
14 
 Warning *log.Logger // 需要注意的信息 
15 
 Error   *log.Logger // 非常严重的问题 
16 ) 
17 
18 func init() { 
19 
 file, err := os.OpenFile("errors.txt", 
20 
    os.O_CREATE|os.O_WRONLY|os.O_APPEND, 0666) 
21 
 if err != nil { 
22 
 log.Fatalln("Failed to open error log file:", err) 
23 
 } 
24 
25 
 Trace = log.New(ioutil.Discard, 
26 
 "TRACE: ", 
27 
 log.Ldate|log.Ltime|log.Lshortfile) 
28 
29 
 Info = log.New(os.Stdout, 
30 
 "INFO: ", 
31 
 log.Ldate|log.Ltime|log.Lshortfile) 
32 
33 
 Warning = log.New(os.Stdout, 
34 
 "WARNING: ", 
35 
 log.Ldate|log.Ltime|log.Lshortfile) 
36 
37 
 Error = log.New(io.MultiWriter(file, os.Stderr), 
38 
 "ERROR: ", 
39 
 log.Ldate|log.Ltime|log.Lshortfile) 
40 } 
41 
42 func main() { 
43 
 Trace.Println("I have something standard to say") 
44 
 Info.Println("Special Information") 
45 
 Warning.Println("There is something you need to know about") 
46 
 Error.Println("Something has failed") 
47 } 
代码清单 8-11 展示了一段完整的程序，这段程序创建了 4 种不同的 Logger 类型的指针变
量，分别命名为 Trace、Info、Warning 和 Error。每个变量使用不同的配置，用来表示不
同的重要程度。让我们来分析一下这段代码是如何工作的。 
在第 11 行到第 16 行，我们为 4 个日志等级声明了 4 个 Logger 类型的指针变量，如代码清
单 8-12 所示。 
代码清单 8-12  listing11.go：第 11 行到第 16 行 
11 var ( 
12 
 Trace   *log.Logger // 记录所有日志 
13 
 Info    *log.Logger // 重要的信息 
14 
 Warning *log.Logger // 需要注意的信息 
15 
 Error   *log.Logger // 非常严重的问题 
16 ) 
在代码清单 8-12 中可以看到对 Logger 类型的指针变量的声明。我们使用的变量名很简短，
但是含义明确。接下来，让我们看一下 init()函数的代码是如何创建每个 Logger 类型的值并
将其地址赋给每个变量的，如代码清单 8-13 所示。 
代码清单 8-13  listing11.go：第 25 行到第 39 行 
25 
 Trace = log.New(ioutil.Discard, 
26 
 "TRACE: ", 
27 
 log.Ldate|log.Ltime|log.Lshortfile) 
28 
29 
 Info = log.New(os.Stdout, 
30 
 "INFO: ", 
31 
 log.Ldate|log.Ltime|log.Lshortfile) 
32 
33 
 Warning = log.New(os.Stdout, 
34 
 "WARNING: ", 
35 
 log.Ldate|log.Ltime|log.Lshortfile) 
36 
37 
 Error = log.New(io.MultiWriter(file, os.Stderr), 
38 
 "ERROR: ", 
39 
 log.Ldate|log.Ltime|log.Lshortfile) 
为了创建每个日志记录器，我们使用了 log 包的 New 函数，它创建并正确初始化一个
Logger 类型的值。函数 New 会返回新创建的值的地址。在 New 函数创建对应值的时候，我们
需要给它传入一些参数，如代码清单 8-14 所示。 
代码清单 8-14  golang.org/src/log/log.go 
// New 创建一个新的 Logger。out 参数设置日志数据将被写入的目的地 
// 参数 prefix 会在生成的每行日志的最开始出现 
// 参数 flag 定义日志记录包含哪些属性 
func New(out io.Writer, prefix string, flag int) *Logger { 
 return &Logger{out: out, prefix: prefix, flag: flag} 
} 
代码清单 8-14 展示了来自 log 包的源代码里的 New 函数的声明。第一个参数 out 指定了
日志要写到的目的地。这个参数传入的值必须实现了 io.Writer 接口。第二个参数 prefix 是
之前看到的前缀，而日志的标志则是最后一个参数。 
在这个程序里，Trace 日志记录器使用了 ioutil 包里的 Discard 变量作为写到的目的地，
如代码清单 8-15 所示。 
代码清单 8-15  listing11.go：第 25 行到第 27 行 
25 
 Trace = log.New(ioutil.Discard, 
26 
 "TRACE: ", 
27 
 log.Ldate|log.Ltime|log.Lshortfile) 
变量 Discard 有一些有意思的属性，如代码清单 8-16 所示。
代码清单 8-16  golang.org/src/io/ioutil/ioutil.go 
// devNull 是一个用 int 作为基础类型的类型 
type devNull int 
// Discard 是一个 io.Writer，所有的 Write 调用都不会有动作，但是会成功返回 
var Discard io.Writer = devNull(0) 
// io.Writer 接口的实现 