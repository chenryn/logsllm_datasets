title:Improvement of an Anagram Based NIDS by Reducing the Storage Space
of Bloom Filters (Poster Abstract)
author:Hugo Villan&apos;ua Vega and
Jorge Maestre Vidal and
Jaime Daniel Mej&apos;ıa Castro and
Luis Javier Garc&apos;ıa-Villalba
Improvement of an Anagram Based NIDS
by Reducing the Storage Space
of Bloom Filters (Poster Abstract)
Hugo Villan´ua Vega, Jorge Maestre Vidal,
Jaime Daniel Mej´ıa Castro, and Luis Javier Garc´ıa Villalba
Group of Analysis, Security and Systems (GASS)
Department of Software Engineering and Artiﬁcial Intelligence (DISIA)
School of Computer Science, Universidad Complutense de Madrid (UCM)
Calle Profesor Jos´e Garc´ıa Santesmases s/n
Ciudad Universitaria, 28040 Madrid, Spain
{hvillanua,jmaestre}@estumail.ucm.es, {j.mejia,javiergv}@fdi.ucm.es
1 Extended Abstract
When optimizing our NIDS APAP [1] we started focusing our eﬀorts on ensuring
that it would work on real-time network traﬃc. This eﬀort, was penalized by
the excessive cost of storage of various data structures needed to meet its goals
satisfactorily.
APAP is based on Anagram [2] and initially worked with small size N-gram.
This allowed us to detect more attacks at the expense of a higher rate of false
positives. But when we wanted to test the results obtained with larger N-gram
sizes, we found that the cost of storage of the Bloom ﬁlter structures that we
generated to analyze the payload of the traﬃc was too large.
A Bloom ﬁlter [3] is a probabilistic data structure used to determine if a
data belongs to a dataset. In our NIDS the Bloom ﬁlter is intended to store
information of the appearance of N-grams in the package. When representing
the Bloom ﬁlter, we considered it in theory as an array of bits on which a value
of 0 indicates the non-appearance of that N-gram on normal network traﬃc and
a value of 1 indicates its presence.
In practice, we used the Bloom ﬁlter as an array of bits on which a value of 0
indicates the non-appearance of that N-gram on normal network traﬃc and an
n indicates its number of appearances. By using bits to represent n-grams less
memory is required to store information of legitimate traﬃc.
Each N-gram found during training will have a diﬀerent position in the Bloom
ﬁlter, establishing a direct correspondence between each N-gram and the struc-
ture.
To get an idea of the cost to implement this type of structure, we will assume
the hypothetical implementation of the Bloom ﬁlter as an array of integers in
C. In the Table 1 we can see their progression.
To reduce this cost, we designed a simple data compression algorithm that
can reconstruct the original structure from the ﬁle without penalizing the per-
formance of the computer.
D. Balzarotti, S. Stolfo, and M. Cova (Eds.): RAID 2012, LNCS 7462, pp. 393–394, 2012.
c(cid:2) Springer-Verlag Berlin Heidelberg 2012
394
H.V. Vega et al.
Table 1. Chart:Increased storage space
N-gram Size (bytes)
1-GRAM 1024 bytes
2-GRAM 262144 bytes
3-GRAM 64 Mbytes
4-GRAM 16 Gbytes
The idea is based on the high number of occurrences of most elements in
heterogeneous networks. To reduce the amount of used memory to store this
data, we could generate a ﬁle where the data did not have a regular structure
such as 32-bit integer, but instead to use only the amount of bits required for
each number, and saving that amount in a new ﬁle which would be read in
parallel when we loading the structure.
As a ﬁrst step we optimize the quantities by calculating the distance between
adjacent positions of the array of appearances. This is accomplished by holding
the ﬁrst position of the array intact, and subtracting from every position value
the previous position value, beginning from the end, to ﬁll the resulting structure.
In addition, an auxiliary array with the same size will indicate the number of
bytes required to read these values of the resulting ﬁle.
To load the structure is only necessary to read the number of bits required to
read each original number, read that amount in the ﬁle and calculate the new
positions as the sum of the content of the previous position plus the content of
the new read value. We are currently working on the implementation of that
structure.
Acknowledgments. This work was supported by the Ministerio de Industria,
Turismo y Comercio (MITyC, Spain) through the Project Avanza Competitividad
I+D+I TSI-020100-2011-165 and the Agencia Espa˜nola de Cooperaci´on Interna-
cional para el Desarrollo (AECID, Spain)
through Acci´on Integrada
MAEC-AECID MEDITERR ´ANEO A1/037528/11.
References
1. Garc´ıa-Villalba, L.J., Mej´ıa-Castro, J.D., Sandoval-Orozco, A.L., Mart´ınez-Puentes,
J.: Malware Detection System by Payload Analysis of Network Traﬃc. In: Proceed-
ings of the 15th International Symposium on Research in Attacks, Intrusions and
Defenses (September 2012)
2. Wang, K., Parekh, J.J., Stolfo, S.J.: Anagram: A Content Anomaly Detector Re-
sistant to Mimicry Attack. In: Zamboni, D., Kruegel, C. (eds.) RAID 2006. LNCS,
vol. 4219, pp. 226–248. Springer, Heidelberg (2006)
3. Broder, A., Mitzenmacher, M.: Network applications of bloom ﬁlters: A survey. In:
Internet Mathematics, pp. 636–646 (2002)