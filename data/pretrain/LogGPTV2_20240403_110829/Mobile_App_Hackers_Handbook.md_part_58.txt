This app is a basic web server that runs on the device and provides an interface for browsing the device’s
filesystem and registry.
There are two releases of this app; one with all capabilities enabled in its manifest, and one with a certain
subset. If your device is running Windows Phone 8 (as opposed to 8.1), you will have to install an older version
of the app, since later versions request capabilities that do not exist in Windows Phone 8. You can deploy the
app using the Application Deployment tool, which is packaged with the SDKs.
The server listens on TCP port 9999 by default. Once the server is running, you can navigate to it either via your
desktop or laptop browser (or indeed your device’s browser, if you wish).
You can obtain the app from its codeplex site: http://wp8webserver .codeplex.com/.
Useful Hacking Tools
At this stage, it is assumed that you now have a hacked test device and a suitable test environment with the SDK
(i.e., Visual Studio and its accompanying tools, including the emulators).
Several tools that are likely to prove useful in Windows Phone hacking repertoire (and in penetration testing in
general) are listed here, along with their use cases:
IDA Pro, for reverse engineering and patching native binaries that have been extracted from a device’s
filesystem (https://www.hex-rays.com)
The IDA Pro HexRays plug-in, for C/C++ pseudo-code approximations of recovered assembly code
(https://www.hex-rays.com)
.NET reflector and ILSpy for reverse engineering and .NET assemblies (http://www.red-
gate.com/products/dotnet-development/reflector/, http://ilspy.net)
Reflexil for patching .NET assemblies (http://reflexil.net)
Native Access Webserver, which provides a convenient web interface for browsing the device’s filesystem
and registry (http://wp8webserver .codeplex.com/)
WP8 File Explorer, for browsing the full filesystem (http://wp8fileexplorer .codeplex.com/)
Burp Suite Pro for intercepting and manipulating HTTP/HTTPS traffic originating from applications
(http://www.portswigger.net)
Analyzing Application Binaries
Once you’ve gained filesystem access to your test device, application binaries and .NET assemblies can be
extracted, analyzed and reverse engineered. In cases where source code for an app is unavailable, the best
method for carrying out a thorough security assessment is via reverse engineering; the app’s .NET assemblies
and binaries can be extracted from your device, at which point you will reverse engineer them and begin your
security review in an effort to uncover its internals and security aspects on the code level. When an app is
comprised of .NET assemblies, it’s possible to recover an app’s code, allowing a relatively straightforward code
review of the app. Accessing the device’s filesystem, extracting assets, and then reverse engineering or otherwise
analyzing them will form one of the cornerstones of your security review methodology for Windows Phone
apps.
Reverse Engineering
The Windows Phone 8.x OSes store application binaries, .NET assemblies and other assets (including the
manifest) in the app’s respective Install directory C:\Data\Programs\ on the filesystem. Each application
installed on the device has its own directory there, where its name is a GUID; for example, C:\Data\programs\
{XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX}.
Inside each app’s directory is an Install directory. Among other things, this folder houses the application’s native
binaries and .NET assemblies. If you have gained filesystem access to your device, you can extract these binaries
and begin reverse engineering them. Figure 10.16 shows a .NET assembly in the Install directory of a Samsung
OEM app about to be disassembled with .NET reflector.
Figure 10.17 Opening a .NET assembly from a device’s filesystem
After binaries have been extracted from the device, they can be disassembled/decompiled and analyzed. Reverse
engineering, coupled with manual testing, can represent a strong approach to security reviews, especially when
source code is not available for review.
Managed .NET assemblies (DLLs) can be reversed back to accurate C# source code representations using tools
like .NET reflector, and the resulting code can be analyzed using standard manual code review techniques.
When you encounter and extract native code components from a device, you can disassemble their code using
high-quality tools like IDA Pro. Application internals can be studied by reviewing the outputted assembly code,
optionally using the Hex-Rays plug-in for generation of C/C++ pseudo-code approximations, which may allow
for more efficient code reviewing for some readers.
Any HTML and JavaScript files stored locally for use by an app can also be extracted from the device, and
subsequently analyzed.
Chapter 11 discusses further activities involving reverse engineering and application patching.
Analyzing Exploit Mitigation Features
When reviewing a Windows Phone native binary, whether it was extracted from the device via the methods
discussed so far, or obtained from a client’s non-Store XAP/APPX file, checking for the presence of exploit
mitigation features on the binary is a vigilant practice from a security perspective.
Exploit mitigation features were discussed earlier, see the “Exploring Exploit Mitigation Features” section for
more information.
Microsoft released a useful tool named BinScope, available at http://www .microsoft.com/en-
gb/download/details.aspx?id=11910, the sole purpose of which is to analyze a native binary for use of
recommended (or compulsory for some Stores) exploit protection features.
Among other problems, BinScope has the ability to test for
/GS protections (stack cookies and other stack overflow protections such as variable reordering)
NXCOMPAT (DEP)
SafeSEH
/DYNAMICBASE (ASLR)
When run against a binary, the BinScope tool generates an informative report that lists the results of the anti-
exploit features.
BinScope tests are included in Microsoft’s Windows Phone 8.1 certification requirement tests to ensure that
native 8.1 Phone binaries have all the flags that Microsoft demands, which in particular are
/SafeSEH exception handling protection
Data execution prevention
Address Space Layout Randomization
Read/Write shared PE section
AppContainerCheck
ExecutableImportsCheck
WXCheck
In addition, non-native .NET assemblies are scanned for presence of the
AllowPartiallyTrustedCallersAttribute attribute, which is disallowed.
For further information on BinScope’s catalog of tests, see http://msdn.microsoft.com/en-
us/library/windowsphone/develop/dn629257 .aspx#binscope.
Summary
This chapter introduced Windows Phone applications in general. You’ll have gleaned an appreciation of the
sandboxing model, the various security features that the Windows phone operating systems have, as well as
some app fundamentals.
Following the advice in this chapter, you’ll also hopefully have a test environment setup, which will allow you to
begin security reviewing Windows Phone apps.
CHAPTER 11
Attacking Windows Phone Applications
This chapter follows the previous chapter’s introduction to Windows Phone applications by exploring the
various ways in which apps can be vulnerable, and how an attacker can exploit identified weaknesses.
Akin to applications that run on popular desktop and mobile platforms, Windows Phone 8.x apps may also be
vulnerable. This chapter focuses on testing for, finding, and exploiting vulnerabilities around issues such as
transport security weaknesses, injection vectors, Interprocess Communications (IPC) mechanisms, and native
code, among others. Many of the vulnerability classes that we discuss and explore are common to software that
runs on other mobile operating systems (OSes), as well as to vulnerability classes encountered in application
security generally.
This chapter also covers enumeration and identification of data entry points into applications, because they are
critical to understanding an app’s threat landscape and pinpointing areas of an app that are potentially
vulnerable to security weaknesses.
Analyzing for Data Entry Points
Before moving on to testing for, identifying, and exploiting security vulnerabilities in Windows Phone (WP)
applications, we explore a very important initial step common to all application security reviews: locating and
analyzing data entry points into the app. Doing this allows a would-be attacker insight into the attack surface of
the app in question.
The phrase data entry point, or simply entry point, refers to any channel or interface presented by an app that
allows the input of user-controllable or user-influenced data into the application for processing, parsing, or
consideration.
Given that users can use entry points to introduce data into a system or application for parsing and processing,
identifying such entry points is useful from attackers’ perspectives so that they know in which ways it is
possible to input potentially malicious data into the app, and from where to follow code paths in code review
and reverse-engineering exercises.
We’ll now briefly discuss the various entry points commonly found in WP8.x applications, and how to identify
what entry points an app in question is exposing or using. Being aware of these common entry points makes the
job of any security reviewer much easier and makes his or her security reviewing efforts more meaningful.
WebBrowser and WebView Controls
The Windows Phone 8.x OSes provide the WebBrowser control for embedding a browser-like interface into
applications. WebBrowser controls are based on Internet Explorer and are instances of the WebBrowser class.
They can be considered analogous to iOS UIWebView objects and Android’s WebView objects. WebBrowser
controls are available in both WP8 and 8.1 applications.
Windows Phone 8.1 also includes the WebView class for creating WebView controls. This class is similar to
WebBrowser, but is missing some of the features provided by the WebBrowser class.
WebBrowser and WebView controls are used frequently in WP8.x apps for a number of purposes, some of which
can be summarized as follows:
Rendering static web content—Application developers can include content locally within their app
package to be later displayed using a WebBrowser control.
Rendering web content from the network—An application can point a WebBrowser or WebView
control at a remote URL so that the remote website is displayed within the embedded WebBrowser control.
Displaying dynamically generated web content—Applications may feed dynamically generated HTML,
JavaScript, and CSS content to a WebBrowser or WebView control. Dynamically generated content may be
created based on decisions made by conditional logic.
Each of these purposes presents a user with an interface written in HTML/CSS/JavaScript. In fact, some
applications consist almost entirely of a WebBrowser or WebView control that displays a mobile-friendly web
application, with very little (if any) of the application’s logic implemented by the on-device app itself. Such apps
were described broadly as hybrid apps in the “Programming Languages and Types of Applications” section in
Chapter 10.
WebBrowser controls, depending on how an application uses them, can be considered data entry points in two
main ways:
Applications that load remote HTTP URLs into WebBrowser or WebView controls may be prone to several
types of cross-site scripting style attacks due to the use of http:// in the URL rather than https://.
Apps using WebBrowser or WebView controls may present interfaces or call JavaScript code that act as entry
points and parse potentially untrusted data. The JavaScript may even pass such data back into C# code.
Identifying WebBrowser and WebBrowser control use gives the hacker or security reviewer a lead on
relevant JavaScript to review for possible vulnerabilities.
As mentioned in “Programming Languages and Types of Applications” in Chapter 10, XAML files hold
definitions and declarations for interface and GUI elements. It is, therefore, no surprise that an app’s XAML
files also hold declarations for WebBrowser controls that appear in an application.
When you’re conducting a code review, an app’s XAML files are likely to be readily available. If an app uses
WebBrowser controls, the app’s XAML files contain markup similar to the following:
This results in a WebBrowser control being generated, with its object bearing the name myWebBrowser. The
object can then be used by the application’s C# code to access the WebBrowser API. For example, the following
code would attempt to render a remote URL into the WebBrowser control:
myWebBrowser.Source = new Uri("http://www.google.co.uk",
UriKind.Absolute);
or:
myWebBrowser.Navigate(new Uri("http://www.google.co.uk",
UriKind.Absolute));
Alternatively, you can declare a WebBrowser control’s loading source directly in an XAML file:
Analysis for markup and C# code like the preceding is likely to quickly reveal an application’s use of WebBrowser
controls.
Similarly, you can create WebView controls via a  tag in a page’s XAML file. For example, the following
markup creates a WebView control on the associated page:
In many instances source code is not available to a security reviewer or would-be attacker. You can still easily
determine use of WebBrowser and WebView controls by extracting XAML files from an application’s Install
directory.
Assuming you have installed the app to a device on which you have full filesystem access (see “Building a Test
Environment” in Chapter 10), you can extract the app’s DLL file(s) from the app’s Install directory, and view
XAML resources and reflected code recovered by .NET reflector, assuming the relevant part of the app consists
of .NET assemblies.
As mentioned in the “Filesystem Access” and “Reverse Engineering” section (see Chapter 10), each app’s
binaries are located in its Install directory; that is, C:\Data\Programs\{GUID}\Install, where {GUID} is the app’s
unique identifier. Upon browsing to the Install directory of the app you’re interested in, in your favorite file
manager, the app’s files and assets can be copied from the device’s filesystem onto your test machine.
When you open them in a suitable tool, you can analyze XAML files as normal for declaration of WebBrowser
and WebView controls. Analysis of recovered C# code can also indicate how the WebBrowser or WebView
control is used by the app, as in the previous C# snippets. Figure 11.1 demonstrates analysis of the XAML files
recovered by .NET reflector.
Figure 11.1 Viewing XAML files in .NET reflector
Use of WebBrowser and WebView controls is indicated in XAP packages by the presence of the
ID_CAP_WEBBROWSERCOMPONENT capability in the app’s manifest file (that is WMAppManifest.xml), which again you
can read in review or via extraction from the app’s C:\Data\Programs\{GUID}\Install directory on your device.
For 8.1-only apps, the more general capability internetClientServer is required in the Package.appxmanifest
file, instead.
We cover potential vulnerabilities that can arise due to the use of WebBrowser and WebView controls and how
to exploit these issues in “Attacking WebBrowser and WebView Controls,” later in this chapter.
Bluetooth
A Bluetooth API accessible to third-party developers was introduced with Windows Phone 8. The API offers two
core modes: app-to-app and app-to-device.
You can identify applications that use Bluetooth by the presence of the ID_CAP_PROXIMITY capability in their
WMAppManifest.xml file in the case of XAP packages, or the proximity capability in Package.appxmanifest for
APPX apps (8.1 apps), such as this:
In both app-to-app and app-to-device modes, the Bluetooth API can be used to locate nearby peers, and upon
finding one, used to connect to the peer. If both ends accept the connection, a socket can be created and
associated with the connection for the two hosts to communicate across.
When you’re reviewing an app’s code in a code review, or reviewing code recovered via reverse
engineering/reflection (see “Reverse Engineering” in Chapter 10), you’ll see that apps using Bluetooth will make
use of the PeerFinder and PeerInformation classes, which form part of the Proximity API (Windows
.Networking.Proximity). To find more information on Bluetooth-relevant classes go to their respective MSDN
pages at http://msdn.microsoft.com/en-us/library/windows.networking.proximity.peerfinder.aspx and
http://msdn.microsoft .com/en-us/library/windows.networking.proximity.peerinformation.aspx.
For example, a code fragment similar to the following would indicate that the application makes a connection to
a Bluetooth peer it finds, attempts to initiate a connection, and upon succeeding, associates a socket with the
connection for further communications with the ‘peer’ app or device.
var peers = await PeerFinder.FindAllPeersAsync();
[ ERROR CHECKING OMITTED]
// select the first peer we found
PeerInformation selectedPeer = peers[0];
var streamSocket = await PeerFinder.ConnectAsync(selectedPeer);
// Attempt a connection
DoSomethingUseful(streamSocket);
Because the Bluetooth API allows Windows Phone applications to communicate with nearby devices and apps,
its viability as an entry point for potentially malicious data is obvious. Depending on the nature of the app in
question, an app may receive binary data that can be parsed unsafely, may receive data that is stored to a file, or
receive data that is otherwise processed in a way that could potentially be exploited by an attacker.
The takeaway point here is that any data received over Bluetooth is potentially malicious and is subject to the
same untrusted data-handling problems that all applications can suffer from. Of course, how received data is
used is central in a security review; hence the usefulness in identifying this entry point, after which you can
follow the data along all code paths it is used in.
HTTP Sessions
As with applications for other smartphone platforms, many network-connected Windows Phone applications
make web requests, such as to REST, SOAP, or JSON APIs, to retrieve information and to fulfill other pieces of
functionality and behavior.
Data received in HTTP sessions may be parsed or processed in unsafe ways by an application, meaning the use
of HTTP APIs represent viable data entry points, especially considering that data returned by web APIs is often
untrusted and supplied or influenced by other users of a service.
In Windows Phone 8.x, at the time of writing, several popularly used HTTP APIs are available. Windows Phone
8 has System.Net.Http.HttpClient (http://msdn.microsoft .com/en-
us/library/system.net.http.httpclient(v=vs.118).aspx), and Windows Phone 8.1 has
System.Net.Http.HttpClient and also Windows.Web.Http .HttpClient (http://msdn.microsoft.com/en-
US/library/windows/apps/windows .web.http.httpclient ). Both WP8 and 8.1 also have the HttpWebRequest
(http://msdn.microsoft.com/en-us/library/system.net.httpwebrequest(v=vs.110) .aspx) class, which also
allows web requests to be made easily.
The following code sample demonstrates a GET request being issued on the example.com URL using
System.Net.Http.HttpClient, and the response is displayed in a message box:
var httpClient = new HttpClient();
var response = await httpClient.GetAsync(new Uri(
"http://www.example.com/api/getInfo",
UriKind.RelativeOrAbsolute));
response.EnsureSuccessStatusCode();
var txt = response.Content.ReadAsStringAsync();
MessageBox.Show(txt.Result);
You can find additional information on the common HTTP APIs on their respective MSDN pages, referenced
previously.
Network Sockets
Although more network-connected Windows Phone applications tend to use HTTP client APIs to simply talk to