## 转载 - Linux 环境变量之 LD_PRELOAD & LD_LIBRARY_PATH & LD_DEBUG & rpath  
### 作者              
digoal              
### 日期              
2023-12-07         
### 标签              
PostgreSQL , PolarDB , DuckDB , Linux , 链接库 , 调试 , LD_PRELOAD , LD_LIBRARY_PATH , LD_DEBUG , rpath       
----              
## 背景   
# 原文链接  
https://blog.csdn.net/llm_hao/article/details/115493516  
## 目录  
### 环境变量  
#### 1、LD_LIBRARY_PATH  
#### 2、LD_PRELOAD  
#### 3、LD_DEBUG  
#### 4、rpath 路径  
#### 5、小结  
### 文中源码  
#### Linux环境  
#### showBytes.h  
#### showBytes.c  
#### envTest.c  
#### GCC命令  
### 参考  
## 环境变量  
Linux 系统提供了多种方法来改变动态库连接器装载共享库路径的方法。通过使用此类方法，我们可以实现一些特殊的需求，如：动态库的调试、改变应用程序的行为方式等。  
Linux 查看环境变量的 2 种方式：  
```  
$ env               #environment的简写  
$ export  
```  
下面主要描述 4 种常用的修改程序运行时环境变量的方式：  
### 1、LD_LIBRARY_PATH  
LD_LIBRARY_PATH 可以临时改变应用程序的共享库（如：动态库）查找路径，而不会影响到系统中的其他程序。  
```  
$ echo ${LD_LIBRARY_PATH}  
```  
在 Linux 系统中，LD_LIBRARY_PATH 是一个由若干个路径组成的环境变量，每个路径之间由冒号隔开。默认情况下 LD_LIBRARY_PATH 为空。如果我们为某个进程设置了 LD_LIBRARY_PATH，那么进程启动时，动态链接器会优先查找 LD_LIBRARY_PATH 指定的目录。  
动态链接器转载或是查找共享库（如：动态库、静态库）的顺序为：  
- 环境变量 LD_LIBRARY_PATH 指定的路径；  
- 路径缓存文件 /etc/ld.so.cache 指定的路径；  
- 默认共享库目录，先 /usr/lib ，然后 /lib 。  
举例：  
```  
$ gcc -I/home/myTest/envTest -o envTest envTest.c -L/home/myTest/envTest -lshowBytes  
$ export LD_LIBRARY_PATH=/home/myTest/envTest  
$ ./envTest  
```  
此时，我们检查下 envTest 的动态库依赖关系如下：  
```  
ldd envTest  
        linux-vdso.so.1 (0x00007ffef30dd000)  
        libshowBytes.so => /home/myTest/envTest/libshowBytes.so (0x00007f977735a000)  
        libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007f9777161000)  
        /lib64/ld-linux-x86-64.so.2 (0x00007f9777366000)  
```  
Linux 中还有另外一种方法可以实现与 LD_LIBRARY_PATH 类似的功能，即直接运行动态链接器来启动程序，如：  
```  
# 示例中是 x86_64 环境  
$ /lib64/ld-linux-x86-64.so.2 --library-path /home/myTest/envTest/ /home/myTest/envTest/envTest  
```  
或者编译的时候，采用下面的命令  
```  
gcc -I/home/myTest/envTest -o envTest envTest.c ./libshowBytes.so  
```  
这样运行也是没有问题的。同时，我们重新检查下 envTest 的动态库依赖关系如下：  
```  
ldd envTest  
        linux-vdso.so.1 (0x00007fff299ba000)  
        ./libshowBytes.so (0x00007f08e37e0000)  
        libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007f08e35e7000)  
        /lib64/ld-linux-x86-64.so.2 (0x00007f08e37ec000)  
```  
注意：  
- 尽管 LD_LIBRARY_PATH 对于共享库的开发和测试来说十分方便，但是不应该被滥用。随意修改 LD_LIBRARY_PATH 并且将其导出至全局范围，将可能引起其他应用程序运行出现问题。  
- 此外， LD_LIBRARY_PATH 也会影响GCC 编译时查找库的路径，它里面包含的路径相当于链接时GCC的 "-L" 参数。  
同样，为了避免对其他运行程序和后续测试产生影响，需要及时取消该环境变量设置：  
```  
unset LD_LIBRARY_PATH  
```  
### 2、LD_PRELOAD  
在 LD_PRELOAD 中指定的文件会在动态链接器按照固定规则搜索共享库之前装载，他比 LD_LIBRARY_PATH 所指定的目录中的共享库还要优先。无论时否依赖它们，LD_PRELOAD 中指定的共享库或目标文件都会被装载。  
此外，由于全局符号介入机制的存在，LD_PRELOAD 中指定的共享库或目标文件中的全局符号就会覆盖后面加载的同名全局符号，这使得我们可以很方便的做到改写标准 C 库中的某个或某几个函数而不影响其他函数，对于程序的调试或测试非常有用。  
用来做测试非常方便、简单：  
```  
export LD_PRELOAD=./libshowBytes.so  
./envTest  
```  
此时，检查下动态了依赖关系如下：  
```  
ldd envTest  
        linux-vdso.so.1 (0x00007ffc6efad000)  
        ./libshowBytes.so (0x00007fcee5ab8000)  
        libshowBytes.so => not found  
        libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007fcee58bf000)  
        /lib64/ld-linux-x86-64.so.2 (0x00007fcee5ac4000)  
```  
其中 `./libshowBytes.so (0x00007fcee5ab8000)` 就是刚刚添加的共享库。  
但是另外我们也发现了，尽快我们已经添加了一个`./libshowBytes.so` 共享库（其位置是位于`libshowBytes.so` 之前），但是另外的一个 `libshowBytes.so` 还是显示的 `=> not found`。  
请仔细观察，并比较 LD_PRELOAD 环境变量与 LD_LIBRARY_PATH 的不同。  
注意：  
- 使用 LD_PRELOAD 环境变量最好仅仅只是用于测试，因为会影响到全局符号；  
- LD_PRELOAD 环境变量优先级要比 LD_LIBRARY_PATH 更高；  
- LD_PRELOAD 环境变量与LD_LIBRARY_PATH 环境变量的使用是不同的。  
- 正常程序的使用，应该尽量避免使用 LD_PRELOAD ，特别是发布版本的程序运行不应该依赖 LD_PRELOAD  
同样，为了避免对其他运行程序和后续测试产生影响，需要及时取消该环境变量设置：  
```  
unset LD_PREALOD  
```  
### 3、LD_DEBUG  
该环境变量可以打开动态链接器的调试功能，当我们设置该变量时，动态链接器会在运行时打印出各种有用的信息，对于我们开发和调试共享库有很大的帮助。  
LD_DEBUG 可以设置的值有：  
- “files”，显示整个装载过程；  
- “libs”，显示共享库查找过程；  
- “symbols”，显示符号的查找过程；  
- “bindings”，显示动态链接的符号绑定过程；  
- “versions”，显示符号的版本依赖关系；  
- “reloc”，显示重定位信息；  
例如，查看整个装载过程：  
```  
LD_DEBUG=files ./envTest  
     18721:  
     18721:     file=./libshowBytes.so [0];  needed by ./envTest [0]  
     18721:     file=./libshowBytes.so [0];  generating link map  
     18721:       dynamic: 0x00007f6e2c8ede20  base: 0x00007f6e2c8ea000   size: 0x0000000000004040  
     18721:         entry: 0x00007f6e2c8eb0a0  phdr: 0x00007f6e2c8ea040  phnum:                 11  
     18721:  
     18721:  
     18721:     file=libc.so.6 [0];  needed by ./envTest [0]  
     18721:     file=libc.so.6 [0];  generating link map  
     18721:       dynamic: 0x00007f6e2c8dcb80  base: 0x00007f6e2c6f1000   size: 0x00000000001f1660  
     18721:         entry: 0x00007f6e2c7151f0  phdr: 0x00007f6e2c6f1040  phnum:                 14  
     18721:  
     18721:  
     18721:     calling init: /lib/x86_64-linux-gnu/libc.so.6  
     18721:  
     18721:  
     18721:     calling init: ./libshowBytes.so  
     18721:  
     18721:  
     18721:     initialize program: ./envTest  
     18721:  
     18721:  
     18721:     transferring control: ./envTest  
     18721:  
calling show_twocomp  
 39 30  
 c7 cf  
     18721:  
     18721:     calling fini: ./envTest [0]  
     18721:  
     18721:  
     18721:     calling fini: ./libshowBytes.so [0]  
     18721:  
```  
或者查看依赖共享库的查找过程：  
```  
 LD_DEBUG=libs ./envTest  
     18493:     find library=libc.so.6 [0]; searching  
     18493:      search path=/home/myTest/envTest/tls/haswell/x86_64:/home/myTest/envTest/tls/haswell:/home/myTest/envTest/tls/x86_64:/home/myTest/envTest/tls:/home/myTest/envTest/haswell/x86_64:/home/myTest/envTest/haswell:/home/myTest/envTest/x86_64:/home/myTest/envTest            (LD_LIBRARY_PATH)  
     18493:       trying file=/home/myTest/envTest/tls/haswell/x86_64/libc.so.6  
     18493:       trying file=/home/myTest/envTest/tls/haswell/libc.so.6  
     18493:       trying file=/home/myTest/envTest/tls/x86_64/libc.so.6  
     18493:       trying file=/home/myTest/envTest/tls/libc.so.6  
     18493:       trying file=/home/myTest/envTest/haswell/x86_64/libc.so.6  
     18493:       trying file=/home/myTest/envTest/haswell/libc.so.6  
     18493:       trying file=/home/myTest/envTest/x86_64/libc.so.6  
     18493:       trying file=/home/myTest/envTest/libc.so.6  
     18493:      search cache=/etc/ld.so.cache  
     18493:       trying file=/lib/x86_64-linux-gnu/libc.so.6  
     18493:  
     18493:  
     18493:     calling init: /lib/x86_64-linux-gnu/libc.so.6  
     18493:  
     18493:  
     18493:     calling init: ./libshowBytes.so  
     18493:  
     18493:  
     18493:     initialize program: ./envTest  
     18493:  
     18493:  
     18493:     transferring control: ./envTest  
     18493:  
calling show_twocomp  
 39 30  
 c7 cf  
     18493:  
     18493:     calling fini: ./envTest [0]  
     18493:  
     18493:  
     18493:     calling fini: ./libshowBytes.so [0]  
     18493:  
```  
另外还可以显示符号的查找过程：  
```  
LD_DEBUG=symbols ./envTest  
     18868:     symbol=__vdso_clock_gettime;  lookup in file=linux-vdso.so.1 [0]  
     18868:     symbol=__vdso_gettimeofday;  lookup in file=linux-vdso.so.1 [0]  
     18868:     symbol=__vdso_time;  lookup in file=linux-vdso.so.1 [0]  
     18868:     symbol=__vdso_getcpu;  lookup in file=linux-vdso.so.1 [0]  
     18868:     symbol=__vdso_clock_getres;  lookup in file=linux-vdso.so.1 [0]  
     18868:     symbol=_res;  lookup in file=./envTest [0]  
     18868:     symbol=_res;  lookup in file=./libshowBytes.so [0]  