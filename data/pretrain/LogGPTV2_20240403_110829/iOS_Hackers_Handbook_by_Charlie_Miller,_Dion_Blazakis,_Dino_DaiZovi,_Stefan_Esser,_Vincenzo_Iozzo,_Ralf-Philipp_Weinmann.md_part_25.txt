pdu = create_test_pdu(randnum)
send_pdu(pdu)
time.sleep(1)
command = ’ssh root@’+ip+’ ”sqlite3 -line
/private/var/mobile/Library/SMS/sms.db \’select text from message
where ROWID = (select MAX(ROWID) from message);\’”’
c = os.popen(command)
last_msg = c.read()
last_msg = last_msg[last_msg.fi nd(’=’)+2:len(last_msg)-1]
return last_msg
def check_for_crash(test_number, ip):
time.sleep(3)
commcenter =
’/private/var/logs/CrashReporter/LatestCrash.plist’
springboard =
’/private/var/mobile/Library/Logs/CrashReporter/LatestCrash.plist’
command = ’ssh root@’+ip+’ ”cat %s 2>/dev/null; cat %s
2>/dev/null”’ % (commcenter, springboard)
c = os.popen(command)
crash = c.read()
if crash:
clean_logs(ip)
print ”CRASH with %d” % test_number
print crash
print ”\n\n\n”
time.sleep(60)
else:
print ’ . ’,
cc0066..iinndddd 118800 44//1166//22001122 55::4455::2255 PPMM
Chapter 6 n Fuzzing iOS Applications 181
c.close()
def send_pdu(line, ip):
leng = (len(line) / 2) - 8
buffer = ”\n+CMT: ,%d\n%s\n” % (leng, line)
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((ip, 4223))
s.send(buffer)
s.close()
# test either sends the pdu on the line
# or checks for crash/service if test case is complete
# as indicated by the [end case] in fi le
def test(i, ip):
global lines
line = lines[i].rstrip()
print ”%d,” % i,
if line.fi nd(’end case’) >= 0:
check_for_crash(i, ip)
check_for_service(i, ip)
else:
send_pdu(line, ip)
time.sleep(1)
def read_testcases(fi lename):
global lines
f = open(fi lename, ’r’)
lines = f.readlines()
f.close()
def testall(ip, fi lename):
global lines
read_testcases(fi lename)
for i in range(len(lines)):
test(i, ip)
if __name__ == ’__main__’:
testall(sys.argv[1], sys.argv[2])
Given an IP address of an iPhone with the injector installed and a properly
formatted fi le of test PDUs, this script will send each test case, and at the
end, check for crashes and whether the program is still functioning. The
advantage of having such a powerful fuzzing test harness is that you can
begin fuzzing, leave it completely unmonitored, and feel confi dent that
each test case will be executed and any crashes will be recorded along with
the troublesome test case in question. Furthermore, any of this testing can
be easily replicated by calling test(i) for some values of i. This is really
the ultimate for SMS fuzzing in iOS. In the next section, you see some of the
payoff for this attention to detail.
cc0066..iinndddd 118811 44//1166//22001122 55::4455::2255 PPMM
182 Chapter 6 n Fuzzing iOS Applications
SMS Bugs
In smsfuzzing (http://www.blackhat.com/presentations/bh-usa-09/MILLER/
BHUSA09-Miller-FuzzingPhone-PAPER.pdf), Miller and Mulliner found a variety
of SMS vulnerabilities in iOS using the fuzzing methodology outlined in the
preceding sections of this chapter. Some were in SpringBoard when it tried to
display the invalid alert raised by the text message. This would either lock the
screen if the process crashed, or possibly provide code execution in the context
of SpringBoard, that is, as user mobile. Another vulnerability was found in
CommCenter itself. This allowed crashing CommCenter, which knocked the
phone off the network for a bit, or in some special cases, remote code execution.
Back when they found their results, CommCenter used to run as root, so this
allowed remote, server-side root access to any iPhone. To demonstrate what
an SMS vulnerability looks like, this section briefl y looks at the CommCenter
vulnerability found by Miller and Mulliner.
You already saw decompilation of the code responsible for processing UDH
in iOS 5. Back in iOS 3, it was slightly different (see Figure 6-9).
Figure 6.9: UDH parsing seen in IDA Pro
cc0066..iinndddd 118822 44//1166//22001122 55::4455::2255 PPMM
Chapter 6 n Fuzzing iOS Applications 183
In the fi gure, you can see the code loop for as long as specifi ed in the UDHL.
Each time it reads an IEI and IEDL and processes the corresponding data. Later, it
acts on this information. The problem comes when the UDHL is specifi ed as longer
than the actual data available. When this occurs, the read_next_byte function
returns the value of -1. By itself, this is okay, but later code assumes this value
will be positive and make sense. For example, you can make CommCenter call
abort() and exit if you make the total message count be -1, as shown in Figure 6-10.
Figure 6.10: Code that is responsible for aborting CommCenter
If such a malformed SMS is sent and CommCenter exits with the call to abort, it
will restart, but when it crashes it knocks the phone off the carrier network. This
prevents incoming calls for a few seconds and also terminates any existing calls.
However, this bug is not limited only to denial of service. It can end up cor-
rupting memory and leading to code execution. If the message is arranged such
that the current message counter is -1, an array is accessed with this index. The
value -1 reads a value from before the allocated buffer. This pointer is assumed
to be a pointer to a C++ string, and then various methods of this pointer are
called. See Figure 6-11.
Figure 6.11: Memory corruption in the iOS SMS stack
cc0066..iinndddd 118833 44//1166//22001122 55::4455::2255 PPMM
184 Chapter 6 n Fuzzing iOS Applications
This probably isn’t the only SMS bug, so please look for more. These types of
vulnerabilities are especially important because they require no user interaction
and cannot be blocked. They are reminiscent of computer network security 10
years ago before fi rewalls became prevalent.
Summary
Finding vulnerabilities in any system is hard but important work. Vulnerabilities
are the foundation of all computer exploitation. Without vulnerabilities, there
are no exploits or payloads or rootkits. Fuzzing is one of the easiest and most
effective ways to fi nd vulnerabilities. This chapter introduced fuzzing and
showed examples of how to perform tasks such as fuzzing PDFs on Mac OS X,
PPTs on the iPhone, and the SMS interface of the iPhone. It also demonstrated
the power of this technique by illustrating several bugs identifi ed.
cc0066..iinndddd 118844 44//1166//22001122 55::4455::2266 PPMM
CHAPTER
7
Exploitation
The attack surface on iOS is similar to the one available on Mac OS X. Therefore,
as far as userland exploitation is concerned, your focus should be tailored to
client-side heap exploitation.
NOTE We decided not to cover stack-related bugs because, albeit still
present in some software, they are in general less likely to be exploitable and
less frequent than heap-related issues.
This chapter starts by covering the common bug classes present in most
client-side applications, and then digs into the notions you need to write a
successful attack against them.
In modern application exploitation, it is vital to fully understand how the
allocator used by the application works and how to control it as precisely as pos-
sible. In this chapter you learn about the iOS system allocator and the techniques
you can use to control its layout.
One of the most frequently hit targets is the web browser. MobileSafari uses
TCMalloc instead of the system allocator, so this chapter also dissects how it
works and how to leverage its internals to improve an exploit’s reliability.
Finally, an example of a client-side exploit, Pwn2own 2010 MobileSafari,
is analyzed to demonstrate how the techniques described in this chapter are
applied in real life.
185
cc0077..iinndddd 118855 44//1166//22001122 55::4466::0099 PPMM
186 Chapter 7 n Exploitation
Exploiting Bug Classes
Depending on the targeted software, the types of vulnerabilities present in it vary
wildly. For instance, when it comes to browsers it is very likely that the bug classes
you will be dealing with are object lifetime issues, including use-after-free and
double-free bugs, among others. If, instead, the target is a binary format parser
(such as a PDF reader), the bug classes are most likely arithmetic issues or overfl ows.
This section briefl y describes the strategies applied most frequently to exploit
bugs belonging to the bug classes discussed earlier, so that you will be able to
grasp which details of the allocator’s behavior are relevant for each bug class.
Object Lifetime Vulnerabilities
Object lifetime issues, such as use-after-free and double-free bugs, are often
present in software when an attacker has a lot of control (for example, through
JavaScript) of the behavior of the application.
Use-after-free bugs usually exist when an object is deallocated but then used
again in a code path. Such bugs tend to be present when the management of
an object life span is far from obvious, which is one of the reasons why brows-
ers are the perfect playground for them. Figure 7.1 shows the characteristics of
these types of bugs.
The application frees the object.
Vulnerable object Application
The attacker replaces the object. Attacker
Vulnerable object controlled
object
The application tries to use the object.
Vulnerable object Application
The attacker controlled object is used instead.
Attacker
controlled
object
F igure 7.1: Typical of use-after-free scenario
cc0077..iinndddd 118866 44//1166//22001122 55::4466::1100 PPMM
Chapter 7 n Exploitation 187
In general, the strategy for exploiting these vulnerabilities is pretty
straightforward:
1. Forcefully free the vulnerable object.
2. Replace the object with one whose content you control.
3. Trigger the usage of the object to gain code execution.
Often the easiest way for an attacker to execute code is to replace the virtual
table pointer of the object with an address under his control; this way, whenever
an indirect call is made, the execution can be hijacked.
Double-frees are vulnerabilities that happen when an object is deallocated
more than once during its life span. The exploitation of double-free can come
in different shapes and fl avors, but most of the time it can be considered a
subcase of a use-after-free bug. The fi rst strategy for turning a double-free into
a use-after-free is the following:
1. After the vulnerable object is deallocated once, replace the object with a
legitimate one.
The newly created object is freed again as part of the double-free
vulnerability.
2. Replace the newly created object with one whose content you control.
3. Trigger the usage of the object to gain code execution.
The second strategy is to inspect all the code paths taken when the vulnerable
object is freed, and determine whether it is possible to hijack the execution by
controlling its content with specifi cally crafted data. For instance, if an indirect
call (either of the object itself or of a member of the object) is triggered in the
object destructor, an attacker can take over the application in pretty much the
same fashion used for use-after-free bugs.
It should be clear by now that you have a lot of allocation-deallocation gimmicks
to learn in order to exploit these vulnerabilities. In fact, the focus with these
kinds of vulnerabilities is more on the functioning of an allocator than possible
weaknesses in handling memory blocks.
In the next section you see some bug classes that require more focus on the
latter than the former.
Arithmetic and Overfl ow Vulnerabilities These vulnerabilities usually allow
an attacker to overwrite four or more bytes at more or less arbitrary locations.
Whether an integer overfl ow occurs and allows an attacker to write past the
size of a buffer, or allows the attacker to allocate a smaller-than-needed buffer,
or the attacker ends up having the chance to write to a buffer that is smaller
than intended, what she needs is a reliable way to control the heap layout to be
able to overwrite interesting data.
cc0077..iinndddd 118877 44//1166//22001122 55::4466::1100 PPMM
188 Chapter 7 n Exploitation
Especially in the past, the strategy was usually to overwrite heap metadata
so that when an element of a linked list was unlinked, an attacker could over-
write an arbitrary memory location. Nowadays, it is more common to overwrite
application-specifi c data, because the heap normally checks the consistency of
its data structures. Overwriting application-specifi c data often requires making
sure that the buffer you are overfl owing sits close to the one that needs to be
overwritten. Later in this chapter you learn to perform all those operations with
some simple techniques that can work in most scenarios.
Understanding the iOS System Allocator
The iOS system allocator is called magazine malloc. To study the allocator
implementation, refer to the Mac OS X allocator (whose implementation is
located in magazine_malloc.c in the Libc source code for Mac OS X).
Although some research has been done on the previous version of the Mac OS
X allocator, there is a general lack of information on magazine malloc exploita-
tion. The best available research on the topic was covered by Dino Dai Zovi and
Charlie Miller in The Mac Hackers Handbook (Wiley Publishing: 978-0-470-39536-3)
and in a few other white papers.
This section covers the notions you need to create an exploit for the iOS allocator.
Regions
Magazine malloc uses the concept of regions to perform allocations. Specifi cally,
the heap is divided into three regions:
n Tiny (less than 496 bytes)
n Small (more than 496 but less than 15360 bytes)
n Large (anything else above 15360 bytes)
Each region consists of an array of memory blocks (known as quanta) and meta-
data to determine which quanta are used and which ones are free. Each region
differs slightly from the others based on two factors — region and quantum size:
n Tiny is 1MB large and uses 16 bytes quanta.
n Small is 8MB and uses 512 bytes quanta.
n Large varies in size and has no quanta.
The allocator maintains 32 freelists for tiny and small regions. The freelists
from 1 to 31 are used for allocations, and the last freelist is used for blocks that
are coalesced after two or more objects close to each other are freed.
The main difference between magazine malloc and the previous allocator on
iOS is that magazine malloc maintains separate regions for each CPU present
on the system. This allows the allocator to scale much better than the previous
cc0077..iinndddd 118888 44//1166//22001122 55::4466::1100 PPMM
Chapter 7 n Exploitation 189
one. This chapter does not take this difference into account because only the
new iPhone 4S and iPad 2 are dual-core; the other Apple products running iOS
have only one CPU.
Allocation
When an allocation is required, magazine malloc fi rst decides which region is
the appropriate one based on the requested size. The behavior for tiny and small
regions is identical, whereas for large allocations the process is slightly different.
This section walks through the process for tiny and large regions, which gives
a complete overview of how the allocation process works.
Every time a memory block is deallocated, magazine malloc keeps a reference
to it in a dedicated structure member called mag_last_free. If a new allocation
has a requested size that is the same as the one in the mag_last_free memory
block, this is returned to the caller and the pointer is set to NULL.
If the size differs, magazine malloc starts looking in the freelists for the specifi c
region for an exact size match. If this attempt is unsuccessful, the last freelist
is examined; this freelist, as mentioned before, is used to store larger memory
blocks that were coalesced.
If the last freelist is not empty, a memory block from there is split into two
parts: one to be returned to the caller and one to be put back on the freelist itself.
If all the preceding attempts failed and no suitable memory regions are allo-
cated, magazine malloc allocates a new memory block using mmap() and assigns
it to the appropriate region type. This process is carried out by the thread whose
request for allocation could not be satisfi ed.
For large objects the process is more straightforward. Instead of maintain-
ing 32 freelists, large objects have a cache that contains all the available entries.