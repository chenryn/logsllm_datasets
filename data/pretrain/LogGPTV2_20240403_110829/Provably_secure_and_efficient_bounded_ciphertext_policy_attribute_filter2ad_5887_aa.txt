title:Provably secure and efficient bounded ciphertext policy attribute
based encryption
author:Xiaohui Liang and
Zhenfu Cao and
Huang Lin and
Dongsheng Xing
Provably Secure and Efﬁcient Bounded Ciphertext Policy
Attribute Based Encryption
Xiaohui Liang
Department of Computer
Science & Engineering
Shanghai Jiao Tong University
PI:EMAIL
Zhenfu Cao
Department of Computer
Science & Engineering
Shanghai Jiao Tong University
PI:EMAIL
Huang Lin
Department of Computer
Science & Engineering
Shanghai Jiao Tong University
PI:EMAIL
Dongsheng Xing
Department of Computer
Science & Engineering
Shanghai Jiao Tong University
PI:EMAIL
ABSTRACT
Ciphertext policy attribute based encryption (CPABE) al-
lows a sender to distribute messages based on an access pol-
icy which can be expressed as a boolean function consisting
of (OR, AND) gates between attributes. A receiver whose
secret key is associated with those attributes could only de-
crypt a ciphertext successfully if and only if his attributes
satisfy the ciphertext’s access policy. Fine-grained access
control, a new concept mentioned by GPSW in CCS’06 can
realize a more delicate access policy which could be rep-
resented as an access tree with threshold gates connecting
attributes.
In ICALP’08, Goyal et al. design a bounded CPABE (de-
noted as GJPS) with ﬁne-grained access policy which can
be proven secure under a number-theoretic assumption. In
this paper, we improve their scheme by providing faster
encryption/decryption algorithm and shortened ciphertext
size. Moreover, we use one-time signature technique to ob-
tain a chosen ciphertext secure extension and give its com-
plete security proof in the standard model under traditional
Decisional Bilinear Diﬃe-Hellman (DBDH) assumption and
strong existential unforgeability of one-time signature scheme.
Categories and Subject Descriptors
K.6.5 [Management of Computing and Information
Systems]: Security and Protection
General Terms
Security, Theory
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ASIACCS ’09, March 10-12, 2009, Sydney, NSW, Australia.
Copyright 2009 ACM 978-1-60558-394-5/09/03 ...$5.00.
Keywords
Access Control, Attribute Based Encryption, Public Key
Cryptography
INTRODUCTION
1.
To distribute a message to a speciﬁc set of users, a triv-
ial method is to encrypt it under each user’s public key or
identity in traditional cryptosystem [2, 3, 4, 7, 8, 9]. As
expected, ciphertext size and computational cost of encryp-
tion/decryption algorithms are linearly with the number of
receivers. Therefore, it is less attractive or even intolerable
when the number of receivers is large. Indeed, in most cases,
the qualiﬁed receivers share some common attributes, such
as working location, gender or age range. Due to this rea-
son, recently, ciphertext policy attribute based encryption
(CPABE) scheme was introduced as an eﬃcient method to
solve the above problem.
In a CPABE scheme, each user is identiﬁed by an at-
tribute set γ and receives the secret keys corresponding to
those attributes from the authority. The sender who aims
to distribute a message will construct an access policy by
connecting the attributes with OR, AND, threshold gates.
For example, ”(AGE>25) AND (CS)” represents the restric-
tions that a qualiﬁed users should at least obtain the secret
keys representing age more than 25 and the ownership of a
computer science degree; three attributes (DB,OS,DM) con-
necting by a ”two out of three threshold gate” restricts the
decryption only to be successful when a user at least reg-
isters two courses from the list (Database, Operating Sys-
tem, Discrete Mathematics). As in Figure 1, a sender would
save the ciphertext encrypted under the access policy in the
server S1. The users U2 and U3 have the access right to
the message since they both have two attributes from the
attribute set, while U1 can not since he(she) only has one
attribute. This is an eﬃcient and convenient approach for
a user to broadcast his message to the others in practice.
Therefore, we mainly focus on developing a more eﬃcient
CPABE scheme.
Considering the security proof of ABE scheme, more ﬂex-
ible access policy adopted on the sender’s side makes the
simulation more diﬃcult. Thus, restricting the size of access
policy is necessary for designing a CPABE which reduces the
343Figure 1: A sample for CPABE system
Figure 2: A conversion from (d, c)-bounded access
tree T to its (d, c)-normal form Tn
security to a number theoretic assumption. Goyal et al. in-
troduced a new bounded CPABE (BCPABE), in which the
encryption access tree must be limited in two conditions: the
maximum height and maximum cardinality of each non-leaf
node. For example, the access tree (to the left of Figure 2)
with height 2 has the maximum cardinality 3.
In GJPS, a bounded ciphertext policy attribute based en-
cryption scheme secure in the standard model was proposed
to support a bounded size access tree with threshold gates
as its non-leaf nodes. At the beginning, the system man-
ager pre-sets two bounds (d, c) and a unique (d, c)-universal
access tree Tu (Figure 3). After that, the system manager
will publish the public parameter and generate users’ se-
cret keys according to this universal access tree. If a sender
wants to distribute his message, it requires him to ﬁrst con-
vert a (d, c)-bounded access tree T (to the left in Figure 2)
into its (d, c)-normal form1 Tn (to the right in Figure 2) and
then to complete encryption procedure according to a map
constructed from a (d, c)-normal form access tree Tn to the
(d, c)-universal access tree Tu.
In the (d, c)-universal access tree Tu, only leaf nodes of
depth d is associated with real attributes. This setting leads
to the fact that users have to construct a map from Tn to
Tu in order to ensure that the leaf nodes in Tn share same
real attributes with their corresponding leaf nodes in Tu.
However, this conversion of normal form actually expands
the original tree T with a great many non-leaf nodes which
lead a boost on computational cost. We conclude that the
expanded size is mainly due to two factors called exterior
height factor and interior depth factor (refer to Figure 2).
Exterior height factor correlates with the height h of a (d, c)-
bounded access tree T . d − h nodes must be added in order
to expand the height of its normal form to d. Goyal et
al. provide a method to eliminate this factor by construct-
ing multiple parallel schemes with diﬀerent-sized universal
access trees, though it is very ineﬃcient. Interior depth fac-
tor is the relative depth between leaf nodes in T . Non-leaf
nodes must be added in order to make the leaf nodes all
at the same depth (which is the deepest level).
In order
to eliminate both factors, we neglect the interim step, i.e.,
1the deﬁnition of normal form can be looked up in Section
2.4
converting the access tree to norm form, and directly map
the (d, c)-bounded access tree selected by the sender to the
(d, c)-universal tree.
In other words, the redundant steps
which pull all the leaf nodes to the deepest level by adding
non-leaf nodes are eliminated and thus the computation cost
is reduced.
Figure 3: A (d, c)-universal access tree Tu in GJPS
As mentioned in GJPS, to construct a more eﬃcient BC-
PABE scheme based on number-theoretic assumptions is an
important open problem and we consider this paper as an
aﬃrmative answer to this problem.
This paper presents a bounded ciphertext policy attribute
encryption scheme BCP1 which is more eﬃcient than the pre-
vious works in GJPS. The security of BCP1 can be reduced to
Decisional Bilinear Diﬃe-Hellman assumption in the stan-
dard model. Diﬀerent from GJPS, the computational costs
of encryption and decryption in our scheme are largely re-
duced since we eliminate redundant steps, meanwhile the
ciphertext size is shorter. Nevertheless, as a tradeoﬀ, we
demonstrate that the spacial cost such as the size of pub-
lic parameter and secret keys, increase but remain to be
less than twice of the counterpart of GJPS. Furthermore,
U1U2SenderS1(DM)(DB,OS)(cid:258)(cid:258)Message2 of (DB,OS,DM)not accessaccessmessage sendU3(DM,OS)accessstoreSn12CDABC1234ABD5d+2Exterior Height factorInterior Depth factorABCDAB......dumdumdumdumdumdumRABCDdumdumdumdum...........................dc-1c-1c-1c-1c-1344we propose a provably secure BCPABE scheme BCP2 in the
standard model under chosen ciphertext secure notion by
adopting one-time signature technique. There are two ap-
proaches which could be used for extending BCP1 to BCP2.
These two methods make a tradeoﬀ between ciphertext size
and the size of public/secret parameters.
To better understand our techniques, we illustrate a con-
crete example to explain the primitive idea we use to re-
duce the computational cost in encryption/decryption algo-
rithms.
Consider a BCPABE scheme setup with bounds (d, c)2
and an encryption under a (d, c)-bounded access tree T
shown to the left of Figure 2. The threshold values of Node
1 and Node 2 are both set to be 2, and Nodes A, B, C, D
represent four diﬀerent real attributes. Now, we will show
how the encryption algorithm of GJPS diﬀers from that of
ours.
In GJPS, to encrypt under T , a user would ﬁrst convert
T to its normal form access tree Tn (shown to the right
Figure 2). The threshold values of Node 3, Node 4, Node
5, ··· , Node d + 2 in Tn are all set to be 1. Assume the
computational cost of one node is T , the total cost reaches
(4 + c− 2 + c− 2 + d× (c− 1))· T where exterior factor takes
(d−2)·(c−1)·T and interior factor takes 2·(c−1)·T . Likewise,
if a user has a secret key associated with attributes (C, D),
he will at least expend (1 + 2 + d − 2) × c = (d + 1) × c
paring computation. It is obvious that the larger the two
initial parameters (d, c) are set to be, the more cost a user
will spend on encryption and decryption.
In contrast, our scheme deﬁnes a map from T to Tu and
the total cost on encryption takes (4 + c − 2 + c − 2) · T .
The user with attributes (C, D) will expend only c paring
computation. Therefore, ours saves d× (c− 1)· T on encryp-
tion and at least dc times paring computation on decryption.
The cost is even irrelevant with the initial parameter d. The
comparison of general case can be found in Table 1 in Sec-
tion 6.
Related Works. The concept of attribute based encryp-
tion (ABE) was introduced by Sahai and Waters [13].
In
their scheme, the secret key is associated with an attribute
set, and the ciphertext is also associated with another set of
attributes. The decryption is only successful while these two
sets overlap more than a preset threshold. Later, Goyal et
al. [11] further separated ABE into two categories: cipher-
text policy (CP) ABE and key policy (KP) ABE. While key
policy ABE (the user’s secret key represents an access policy
of attributes) is well developed by the subsequent research
[11, 12], how to design an eﬃcient and secure ciphertext pol-
icy (the ciphertext represents an access policy chosen by the
sender) ABE remains an open problem [1, 6, 10].
The ﬁrst ciphertext policy attribute based encryption scheme
was proposed by Bethencourt et al [1].
It allows users to
encrypt a message under an expression consisting of thresh-
old gates between attributes (called a ﬁne-grained access
structure). However, it only has a security argument in the
generic group model and the random oracle model. After
then, Cheung and Newport [6] gave a provably secure ci-
phertext policy ABE in the standard model. Their scheme
supports an access policy with ”AND” gate on positive and
negative attributes but can not resist collusion attack while
2d ≥ 2, c ≥ 3
extending to threshold gate. Recently, a bounded cipher-
text policy attribute based encryption scheme, supporting
ﬁne-grained access policy, was proposed in GJPS.
Waters[14] presented several CPABE schemes. The con-
struction of the ﬁrst scheme is very elegant, and the secu-
rity can be reduced to decisional q-Bilinear-Diﬃe-Hellman-
Exponent(BDHE) problem. The ciphertext size only lin-
early increases with the attributes presented in the access
structure. Another scheme, based on DBDH assumption,
is less eﬃcient, due to the ciphertext size restricted by the
length and width of matrix which is dependent on the size
of the access structure.
Road map. The rest of this paper is organized as follows.
In the next section, some preliminaries including bilinear
map, complexity assumption, one-time signature technique
and deﬁnitions of access tree are introduced.
In Section
3, the deﬁnition of BCPABE and the security model for
BCPABE are described. We propose our schemes in Sec-
tion 4&5, and formally prove their security in the standard
model, respectively. The comparisons between ours and oth-
ers are summarized and given in Section 6. Finally, we con-
clude the paper with some interesting problems in Section
7.
2. PRELIMINARIES
2.1 Bilinear Pairing
We brieﬂy review some notions about bilinear pairing [1, 4,
6, 13].
Consider two ﬁnite cyclic groups G and GT having the
same prime order p.
It is clear that the respective group
operation is eﬃciently computable. Assume that there exists
an eﬃciently computable mapping e : G × G → GT , called
a bilinear map or pairing, with the following properties.
• Bilinear: For any g, h ∈ G, and a, b ∈ Zp, we have
e(ga, hb) = e(g, h)ab.
• Non-degeneracy: e(g, g) (cid:54)= 1
Note that, e(∗,∗) is symmetric since e(ga, gb) = e(g, g)ab =
e(gb, ga).
2.2 Complexity Assumption
The security of identity based encryption and attribute based
encryption schemes employing bilinear pairings is based on
the assumption that some problems are hard to solve. In the
following, we introduce Decisional Bilinear Diﬃe-Hellman
(DBDH) problem and its corresponding assumption.
Decisional Bilinear Diﬃe-Hellman Problem. We say
that an algorithm S is a ε(cid:48)-solver of the DBDH problem if it
distinguishes with probability at least 1/2 + ε(cid:48) between the
two following probability distributions:
Dbdh = (g, ga, gb, gc, e(g, g)abc), where a, b, c are chosen
Drand = (g, ga, gb, gc, Z), where a, b, c are chosen ran-
randomly in Zp,
domly in Zp and Z is chosen randomly in GT .
Definition 1. We say that the DBDH assumption holds
in G and GT if no any probabilistic polynomial-time ε(cid:48)-solver
of the DBDH problem for non-negligible value ε(cid:48).
3452.3 One-Time Signature
A one-time signature scheme ots [5, 6] consists of three algo-
rithms (ots.KGen, ots.Sig, ots.Ver). ots. KGen(1k) →
(sk, vk) is the key generation algorithm, which outputs a se-
cret key sk and a public veriﬁcation key vk. ots.Sig(sk, m) →
σ is the sign algorithm which takes the secret key sk and a
message m as its input, and outputs a signature σ. Finally,
the veriﬁcation algorithm ots.Ver(σ, m, vk) → 0 or 1 takes
the signature σ, a message m and a public veriﬁcation key
vk as its input, and outputs 1 if the signature is valid; 0
otherwise.
Concerning the security issue, an adversary ﬁrst receives
a public veriﬁcation key vk generated from ots.KGen(1k).
He then makes at most one signature query for message m
of his choice, and obtains as an answer the valid signature
ots.Sig(sk, m) → σ. Finally, he outputs a pair (m(cid:48), σ(cid:48)).
We say that the adversary succeeds if (m(cid:48), σ(cid:48)) (cid:54)= (m, σ) and
ots.Ver(σ(cid:48), m(cid:48), vk) → 1.
A one-time signature scheme ots is εots-secure if any
polynomial-time adversary against ots has a success proba-
bility bounded by εots.
2.4 Access Tree
In this section, several deﬁnitions and notions which are nec-
essary for understanding the rest of this paper are given.
Attribute Set. n real attributes, indexed from 1 to n.
Any attribute set γ ⊆ {1,··· , n}. c − 1 dummy attributes,
indexed from n + 1 to n + c − 1.
Access Tree. Let T represent an access tree with its
root r. Each non-leaf node x can be seen as a threshold gate
with threshold value kx. If x has cx child nodes, we certainly
demand 0 < kx ≤ cx. If x is a leaf node of the access tree,
it is associated with one single attribute, denoted as att(x).
We ﬁx the root of an access tree to be at depth 0. Let ΣT
denote the set of all the non-leaf nodes, and ΘT denote all
the leaf nodes. Let p(x) denote the parent of node x. For
each non-leaf node x, we deﬁne an order among x’s child
nodes, that is, every child node z is numbered from 1 to cx.
index(z) returns such number associated with node z. For