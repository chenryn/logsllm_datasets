that it is requested by the partner UA.
INVITE Request Flooding Attack: IP phones have the ca-
pability of generating multiple calls at the same time but can
only support a few. A number of IP phones together may
launch an INVITE ﬂooding attack to overwhelm a single
telephone terminal within a short duration of time. Proxy
servers are also susceptible to INVITE ﬂooding attacks.
There are various other attacks, which can also exploit
the SIP signaling messages. For example, in a call hijack-
ing attack, a new INVITE request could be send within a
pre-existing dialog. Billing and toll fraud can be realized if
one end sends a BYE message to stop billing but continues
sending RTP packets. Distributed Reﬂection DoS (DRDoS)
attack on a victim is also possible. If spoofed requests are
sent to a large number of SIP proxy servers (i.e. reﬂectors)
on the Internet with the victim’s IP address as the source of
the requester, the victim will be swamped with the subse-
quent response messages, thereby causing a DRDoS attack.
3.2 RTP-based attacks
The threats resulting from the vulnerabilities of the me-
dia path are described as follows:
Media spamming: A SDP description conveys media at-
Figure 1. Enterprise IP Telephony Network
network. The enterprise network consists of an internal
network and a de-militarized zone (DMZ). DMZ contains
many servers, including the SIP proxy server that is ac-
cessed by the internal network and the public Internet. Un-
der the assumption that most VoIP related security threats
are from the outside of the enterprise network, the online
vIDS is located strategically between the edge router and
the ﬁrewall, monitoring all trafﬁc traveling to and from both
DMZ and the internal network to the Internet. Note that SIP
proxy server has no media capability and only facilitates the
two end points (i.e. IP telephones) to discover and contact
each other through SIP signaling. After the end points have
been located, the media is directly delivered from end-to-
end, without going through the proxy. Thus, it is necessary
for vIDS to see the signaling messages and the media ﬂows
for all SIP clients. In Figure 1, the ﬁrewall and vIDS devices
are shown as separate components. In practical deployment,
vIDS can be installed at the ﬁrewall, and is capable of ana-
lyzing trafﬁc streams at the application layer.
3 The Threat Model
In this section, we describe various malicious attacks tar-
geting at different protocol layers of IP telephony services.
Our focus is mainly in detecting SIP and RTP based attacks.
3.1 SIP-based attacks
SIP stacks can be found on desktops,
laptops, VoIP
phones, mobile phones, and wireless devices. SIP is a sim-
ple but efﬁcient call control protocol involving many inter-
mediaries and multi-faceted trust relationships among them.
Some devices trust each other, whereas others do not. At-
tackers have a range of target devices, starting from end
devices to Routers, Switches, Signaling Gateways, Media
Gateway Controllers, and SIP Proxies. Any device in the
path from caller to callee can be an attacker’s target. Sev-
eral DoS and fraud attacks against SIP-based VoIP systems
have been described in [1, 8, 13]. A great deal of the dis-
cussion of possible attacks centers around an assumption of
lack of proper authentication. However, many attacks are
Proceedings of the 2006 International Conference on Dependable Systems and Networks (DSN’06) 
0-7695-2607-1/06 $20.00 © 2006 IEEE 
Internet(cid:13)Softphone(cid:13)SIP Proxy(cid:13)Web Server(cid:13)Mail Server(cid:13)DNS(cid:13)1(cid:13)2(cid:13)3(cid:13)4(cid:13)5(cid:13)6(cid:13)7(cid:13)8(cid:13)9(cid:13)*(cid:13)8(cid:13)#(cid:13)1(cid:13)2(cid:13)3(cid:13)4(cid:13)5(cid:13)6(cid:13)7(cid:13)8(cid:13)9(cid:13)*(cid:13)8(cid:13)#(cid:13)IP Phones(cid:13)Internal Network(cid:13)DMZ(cid:13)vIDS(cid:13)Router(cid:13)Firewall(cid:13)tributes preferred by the caller for call setup. The caller
lists the preferred media capabilities in SDP and sends in
either INVITE or ACK messages. In response to INVITE,
the called party lists its own media capability in the 200
OK message. A third party knowing the SDP information
(i.e. IP address, port number, media type and its encoding
scheme etc.) and the RTP synchronization source (SSRC)
identiﬁer could fabricate RTP packets. The SSRC identi-
ﬁer is used to identify the corresponding participant within
an RTP session. By having the same SSRC identiﬁer with
higher sequence number or timestamp in the spoofed RTP
packets, the third party can play unauthorized media.
RTP packets ﬂooding: During the setup of a media ses-
sion, information such as media transport protocol, media
encoding, sampling rate, and port number are exchanged.
The calling party should transmit the media stream accord-
ing to the negotiated media encoding scheme. Changing
the encoding scheme or ﬂooding with RTP packets not only
deteriorates the perceived quality of service (QoS) but also
may cause phones dysfunctional and reboot operations.
4 A Formal Model
A state machine provides a low level abstraction of a pro-
tocol. It can express the protocol design in terms of desir-
able or undesirable protocol states and state transitions. The
formal model of a communicating ﬁnite state machine plays
an important role in the formal validation of protocol, pro-
tocol synthesis, and its conformance testing [4]. In this sec-
tion, we present a formal deﬁnition of extended ﬁnite state
machine and its application for intrusion detection in VoIP
systems. We construct communicating ﬁnite state machines
by connecting the output of one machine to the input of an-
other machine. This presents a powerful representation for
describing various interacting protocols involved in IP tele-
phony services.
4.1 Extended Finite State Machine
A Mealy (ﬁnite state) machine extended with input and
output parameters, context variables, operations and pred-
icates1,
is referred as an extended ﬁnite state machine
(EFSM) [10]. EFSMs are often used to model communi-
cation system behaviors. Parameters, variables, predicates
and operations are used to describe the data ﬂow and the
context of the communication. The underlying FSM de-
scribes the control ﬂow of the system. For detailed descrip-
tion of EFSM, see [7, 10, 15].
Deﬁnition 1. An extended ﬁnite state machine
1The predicates are deﬁned over context variables and input parame-
ters.
(EFSM) M is a quintuple M = (Σ, S,−→v , D, T ),
where:
• Σ is an event alphabet of the EFSM, each
event does have name and its argument.
• S is a ﬁnite set of states, including start state
and ﬁnal state.
• −→v is a vector of ﬁnite set of state variables,
−→v = (v1, v2, ..., vi, .., vk).
• D is a set of domain values for state vari-
ables, D = (d1, d2, ..., di, ..dk), where di
denotes the domain value for the variable vi.
• T is a transition relation: S × D × Σ −→
(S, D).
Each transition t in the transition relation set T (i.e. t ∈ T ) is
a tuple , where st, qt ∈ S are the
beginning and ending states of the transition respectively,
event ∈ Σ is an event identiﬁer (i.e. name) for the tran-
sition with input vector −→x (i.e. arguments), Pt(−→x × −→v )
is a predicate on the valuation of input vector and current
state variables, and At(−→v ) deﬁnes an action on state vari-
ables. Predicate P on the values of state variables −→v and
input parameter values −→x , should return either F ALSE or
T RU E, i.e. P (−→x × −→v ) → {T RU E, F ALSE}. A con-
text update function A(−→v ) is an assignment: −→v := A(−→v ),
which changes the current state variable values of vector −→v
before moving to a new state.
To distinguish between the input and output events of
the transitions, we use CSP notations [3]. For example,
c?event(−→x ) denotes an input event with an identiﬁer event
and −→x = (x1, x2, ..., xn) as event parameters. Simi-
larly, an output event is denoted by c!event(−→x ). Here c
is a particular type of channel through which data values
are passed along. It may represent SIP or RTP channels,
where packet events are received and an internal buffer be-
tween protocol state machines (see Figure 2(b)), where syn-
chronization message events are queued. The transition
edges between the nodes of the EFSM directed graph can
be represented as  or . Now suppose that all the tran-
sitions , where 1 ≤ t ≤ r,
begin with the same start state and event, then nondetermin-
ism may arise. However, if we assume that the predicates
are mutually disjoint, i.e. Pi(−→x × −→v ) ∩ Pj(−→x × −→v ) = ∅,
1 ≤ i (cid:54)= j ≤ r, then it will be a deterministic EFSM. In a
deterministic EFSM, there is at most one transition to fol-
low at any moment.
4.2 VoIP IDS Speciﬁcation
Protocol processes can often be modeled as a collection
of communicating ﬁnite state machines. In order to main-
tain the temporal order of the events, the protocol entities
Proceedings of the 2006 International Conference on Dependable Systems and Networks (DSN’06) 
0-7695-2607-1/06 $20.00 © 2006 IEEE 
(a) Interaction between SIP and RTP (Call setup request)
(b) Communicating EFSM (per call basis)
Figure 2. VoIP IDS Speciﬁcation
must exchange some data values and synchronization mes-
sages [21]. To model security violations, out of all available
attributes, only a fraction of attributes are needed to repre-
sent state transitions. The selection of attributes not only de-
pends upon the protocol entities but also the security viola-
tion we want to capture. In this paper, the selected attributes
are represented as a vector −→v . For an EFSM M, a state si
and a valuation of the state variable vector −→v constitute a
so called conﬁguration of the EFSM. Assume that the corre-
sponding vector values are implicitly deﬁned, without loss
of generality, the conﬁgurations can be viewed as states. We
are interested in the conﬁgurations that are reachable from
the initial or intermediate conﬁguration to the attack conﬁg-
uration through zero or more intermediate states. The paths
along the transitions from si to sattack constitute attack pat-
terns. The memory cost of characterizing an instance of a
protocol state machine for a particular call depends upon
conﬁguration (i.e. (si,−→v )). In the following, we describe
the relevant features of EFSM and its application to vIDS.
A transition relation t (i.e t ∈ T ) between states si and
sj is annotated as an attack signature, if sj corresponds to
sattack. The predicate Pt operates over current state vari-
ables and input parameters, which are carried in the mes-
sage header or body, and consequently returns a boolean
value. In vIDS, Pt describes some security aspects of a call,
e.g. the identiﬁcation of communicating users (To:, From:),
their locations (source IP, destination IP), and the trafﬁc
characteristics (encoding scheme, call ID, sequence num-
bers). Pt captures the security aspects by putting constraints
on the allowed event parameter values (−→x ) and comparing
them with corresponding state variable values (−→v ). The
event is either an arrival of a data packet or a synchroniza-
tion message from co-operating protocol entities. Update
function At modiﬁes the current values of state variables
before moving to the next state sj.
Each protocol entity maintains a vector −→v of locally and
globally accessible variables. Local variables are related to
one particular protocol state machine, whereas global vari-
ables contain the values that are relevant to other protocol
machines as well. For example, Figure 2(a) shows how SIP
and RTP protocol state machines undergo through normal
transitions, after receiving an INVITE request for the call
setup from a remote end. At the (INIT) state, the arrival
of an INVITE message brings input vector −→x , composed
of relevant header ﬁelds and message body values. The
SIP protocol state machine, after receiving the INVITE re-
quest, parses the SIP header and SDP message body. The
header ﬁeld values, such as Call-ID and branch parame-
ters in the Via header ﬁeld and tag parameter values in the
From and To ﬁelds are stored in the local state variables
indicated by v.l variable name. The media information
contained in the SDP message body, such as IP address,
port number of the source, and offered media encoding