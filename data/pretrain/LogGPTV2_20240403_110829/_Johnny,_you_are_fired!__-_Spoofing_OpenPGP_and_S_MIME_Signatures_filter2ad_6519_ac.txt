4P. Zimmermann, A (Inline PGP signed) note to PGP users,
https://philzimmermann.com/text/PRZ_leaves_NAI.txt
5PGP key ID 17AFBAAF21064E513F037E6E63CB691DFAEBD5FC
From: Alice 
(a) Display name and email address in FROM header.
From: PI:EMAIL 
(b) Display name set to email address FROM header.
From: PI:EMAIL
From: PI:EMAIL
(c) Multiple FROM header.
Sender: PI:EMAIL
From: PI:EMAIL
(d) SENDER and FROM headers.
Figure 7: Examples how to fool signature veriﬁcation logic if the
PGP user ID or the Internet mail address in the signer’s S/MIME
certiﬁcate is compared to sender address in the email header.
message and send it to Bob with Alice set as the sender. This
is due to a lack of binding between the user ID from the sig-
nature and the address given in the FROM header.
Display Name Shown as Signer (I2) There are two op-
tions to handle this problem. First, a mail client can ex-
plicitly display the signer’s identity somewhere in the UI
and let the user compare it to the sender address. Second,
the email client can check whether the signer’s identity (i.e.,
email address) equals the sender’s address, and show a warn-
ing if this is not the case. The second option gives a lot of
room for attacks; RFC 2632 for S/MIME signed messages
states that “receiving agents must check that the address in
the From or Sender header of a mail message matches an
Internet mail address in the signer’s certiﬁcate”. However,
in practice email clients can only check if the FROM header
contains the signer’s email address because RFC 5322 al-
lows additional display names to be associated with a mail-
box (e.g., Name ). If an email client only shows
the display name to the user, Eve can simply set Alice as dis-
play name for her own sender address (see Figure 7a). Also,
in such a scenario the display name itself could be set to an
email address such as PI:EMAIL that is presented to
the user, see Figure 7b.
An example screenshot for Outlook, which required ad-
ditional effort, is given in Figure 8a. The source code of
this mail can be found in Figure 8b. While Outlook always
shows the full sender address (PI:EMAIL), it can simply
be “pushed out of the display” by appending a lot of whites-
paces to the display name (PI:EMAIL).
From/Sender Header Confusion (I3) Another problem is
how email clients deal with multiple FROM ﬁelds in the mail
header—especially if PGP or S/MIME support is not imple-
mented directly by the email client, but offered through a
USENIX Association
28th USENIX Security Symposium    1017
With HTML, CSS, or inline images it is easy to reproduce
security-critical UI elements displaying a “valid signature”.
Figure 9a shows a signed and a spoofed email in Round-
cube. The spoofed email is based on displaying a valid sig-
nature indicator with HTML and CSS (an example of UI re-
dressing). The HTML code is provided in Figure 9b.
(a) Two emails with visually indistinguishable signature indicators.
One is PGP-signed, the other is a specially crafted HTML email.
From: PI:EMAIL
To: PI:EMAIL
Subject: UI redressing
Content-Type: text/html
Verified signature from Manager .
Johnny, You are fired!
(b) Forging a PGP signature in Roundcube with UI redressing.
Figure 9: Security indicators in Roundcube. The indicator is in the
attacker-controlled HTML area, which allows trivial spooﬁng.
1
2
3
4
5
6
7
8
9
5 Evaluation
Of the tested 20 clients with PGP support, 15 use GnuPG to
verify signatures and call it either directly, or through some
kind of plugin such as Enigmail6 or GPG Suite,7 or by us-
ing the GPGME8 wrapper library. The remaining clients use
OpenPGP.js,9 OpenKeychain,10 or a proprietary solution. Of
the tested 22 clients with S/MIME support, only ﬁve require
third party plugins. The results of signature spooﬁng attacks
tested on the various email clients are shown in Table 2 for
OpenPGP and in Table 3 for S/MIME.
The results of our evaluation show a poor performance of
the overall PGP and S/MIME ecosystems when it comes to
trustworthiness of digital signatures; for ten OpenPGP capa-
ble clients and seven clients supporting S/MIME we could
spoof visually indistinguishable signatures on all UI levels
(resulting in perfect forgeries). On four additional OpenPGP
6P. Brunschwig, Enigmail, https://enigmail.net/
7L. Pitschl GPG Suite, https://gpgtools.org/
8W. Koch, GPGME, https://github.com/gpg/gpgme
9ProtonMail, OpenPGP.js https://openpgpjs.org/
10Cotech, OpenKeychain, https://openkeychain.org/
(a) Screenshot of a spoofed PGP signed message in Outlook which
was actually signed by the attacker (PI:EMAIL).
From: PI:EMAIL [whitespaces] x 
To: PI:EMAIL
Reply-to: PI:EMAIL
Subject: Signed by whom?
Content-Type: multipart/signed; boundary="XXX";
protocol="application/pgp-signature"
--XXX
Johnny, you are fired!
--XXX
Content-Type: application/pgp-signature
[valid signature by PI:EMAIL]
--XXX--
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
(b) Proof-of-concept email source code to forge PGP signatures.
Figure 8: PGP signature spooﬁng attack against Outlook/GpgOL,
based on the RFC 5322 display name shown as the signer’s identity.
third-party plugin—as there may be different implementa-
tions on how to obtain the sender address of an email. For ex-
ample, the email client could display the email address given
in the ﬁrst FROM header while the plugin would perform its
checks against any occurrence of this header ﬁeld (see Fig-
ure 7c). Also, the plugin could respect the SENDER header in
its checks which “speciﬁes the mailbox of the agent respon-
sible for the actual transmission of the message” [8] while
the mail client would display the email address taken from
the FROM email header (see Figure 7d). Note that if Eve sets
an additional Reply-to: PI:EMAIL header, which
instructs the email client to reply to Alice, such attacks go
unnoticed by Bob when replying to the email. They can,
however, be detected in most clients by reviewing the signa-
ture details and spotting Eve as the real signer.
4.5 UI Attack Class (U1)
In this section, we discuss UI redressing attacks that exploit
the presentation of signature veriﬁcation results to the user.
The attacks are successful if the spoofed message is indistin-
guishable from a message with a real valid signature.
This attack class exploits that various email clients dis-
play the status of the signature within the email content it-
self. This part of the UI is under the control of the attacker.
1018    28th USENIX Security Symposium
USENIX Association
capable clients and eight clients supporting S/MIME, we
could spoof visually indistinguishable signatures on the ﬁrst
UI level (resulting in partial forgeries). While none of the at-
tacks directly target the underlying cryptographic primitives,
the high success rate raises concerns about the practical se-
curity of email applications. We discuss the results for each
class of attack in this section. We also published proof-of-
concept attack emails and screenshots of partial and weak
forgeries in a public repository.11
5.1 CMS Attack Class
eContent Confusion (C1) We found that Thunderbird,
Postbox, MailMate, and iOS Mail are vulnerable to eCon-
tent confusion. Given a valid S/MIME signature for a spe-
ciﬁc user, this allows a perfect forgery for any message of
this user. Note that opaque signed emails can be transformed
into detached signed emails and vice versa. Thus, having
any signed email from a target is enough to forge an arbi-
trary number of new messages. Mozilla assigned CVE-2018-
18509 to this issue.
Multiple Signers (C2) Evolution coerces multiple signers
into one “valid signature” UI element (see Figure 10). How-
ever, the UI reveals the erroneous signature upon further in-
spection of the UI. By deﬁnition, this is a partial forgery.
Figure 10: This email has two signers. The ﬁrst signer did not
sign this email. Evolution coerced both signers into one security
indicator showing “valid signature”. (Minor details were removed
from the screenshot to make it smaller.)
No Signers (C3)
In the case of no signers, three email
clients, namely Outlook, Mutt, and MailDroid, show some
UI elements suggesting a valid signature and some UI ele-
ments doing the opposite. We consider this a weak forgery,
because there is no clear indication that signature validation
has succeeded/failed. In Outlook an otherwise very promi-
nent red error bar is not shown and a seal indicates a valid
signature (although it should show a warning sign), see Fig-
ure 11. Interestingly, clicking through the UI in Outlook may
strengthen the illusion of a validly signed message because
of the wording in the subdialogs.
11https://github.com/RUB-NDS/Johnny-You-Are-Fired
Figure 11: “Signed email” in Outlook with no signers at all.
Trust Issues (C4) Although none of the clients accepted
“extended certiﬁcates”, i.e., certiﬁcates re-signed by a leaf
certiﬁcate with no CA=true ﬂag, we observed that Trojitá
and Claws display conﬂicting UI elements on untrusted cer-
tiﬁcates (i.e., “success: bad signature”). Nine and MailDroid
do not display information about the origin of a certiﬁcate on
the ﬁrst level of the UI. This means that, although there are
security indicators suggesting a signed email, the origin may
be completely untrustworthy, resulting in partial forgery.
5.2 GPG API Attack Class
We found an injection attack for the “embedded ﬁlename”
log message in GnuPG, as well as several issues in Enig-
mail’s status line parser and state machine.
Status Line Injection through Embedded Filename (G1).
OpenPGP Literal Data Packets, which contain the actual
plaintext of a message, contain some metadata, in particu-
lar an embedded ﬁlename that is usually set by the sender
to the original ﬁlename of a signed or encrypted ﬁle. We
found that GnuPG’s logging message for the embedded ﬁle-
name does not escape newline and other special characters.
If an application combines the logging messages with the
status line API in a single data channel, an attacker can use
the embedded ﬁlename to inject arbitrary status lines (up to
255 bytes, which can be sufﬁcient to spoof the GOODSIG,
VALIDSIG and TRUST_FULLY lines for a single signature).
Figure 12b shows the injected text highlighted. The success-
ful attack is shown in Figure 12a.
Using this attack, we were able to spoof arbitrary signature
veriﬁcation results in Enigmail, GPG Suite, and Mailpile.12
The attack only assumes our weakest attacker model, as all
relevant status lines can be injected into the embedded ﬁle-
name. In fact, the message does not even need to be signed
at all; the attack, however, has the additional requirement
12Manual signature veriﬁcation using GnuPG on the command line is
also affected; the embedded ﬁlename can contain arbitrary terminal escape
sequences, allowing the attacker to overwrite any part of the terminal.
USENIX Association
28th USENIX Security Symposium    1019
(a) Screenshot of a spoofed PGP signature in Thunderbird.
1
2
3
4
5
6
7
8
$ gpg --status-fd=2 --verbose message.gpg
gpg: original file name=’’
[GNUPG:] GOODSIG 88B08D5A57B62140 Manager 
[GNUPG:] VALIDSIG 3CB0E84416AD52F7E186541888B08D5A57B62140
2018-07-05 1530779689 0 4 0 1 8 00
3CB0E84416AD52F7E186541888B08D5A57B62140
[GNUPG:] TRUST_FULLY 0 classic
gpg: ’’
[GNUPG:] PLAINTEXT 62 1528297411 ’%0A[GNUPG:]%20GOODSIG[...]
[GNUPG:] PLAINTEXT_LENGTH 56
(b) Example output for GnuPG status line injection (excerpt).
Figure 12: Status line injection attack on GnuPG.
that the user has enabled the verbose conﬁguration option.
This option is not enabled by default, but it is often used by
experts and part of several recommended GnuPG settings.
The vulnerability is present in all versions of GnuPG until
2.2.8. Our ﬁnding is documented as CVE-2018-12020. Due
to the severity of the attack, we also reviewed non-email ap-
plications for similar vulnerabilities, see subsection 7.5.
State Confusion and Regular Expressions in Enigmail
(G2). We found two ﬂaws in the way Enigmail handles sta-
tus messages for multiple signatures:
• If
the last
the status of
signature is GOODSIG,
EXPKEYSIG, or REVKEYSIG, Enigmail will overwrite
the signature details (e.g., ﬁngerprint, creation time, al-
gorithms) with those from the ﬁrst VALIDSIG, confus-
ing the metadata of two signatures. The attacker can
change the state of a signature to good, expired, or re-
voked by adding a corresponding second signature.
• If any of
the
signatures
is TRUST_FULLY or
TRUST_ULTIMATE, and the last signature is good,
expired, or revoked, then Enigmail will display the
information from the ﬁrst VALIDSIG as trusted.
We also found regular expressions that were not anchored
to the beginning of status lines. This allows for injection of
fake VALIDSIG and other status lines in malicious user ID
strings. Combining this with the above, this allows an at-
tacker to control the signature details completely. The attack
involves two signatures on a single message, which Enig-
mail combines in a complex way to a single signature that is
shown to the user. We assume that the attacker is trusted, and
further assume that the attacker can poison the user’s keyring
with arbitrary untrusted keys. This is not a strong assumption
because in PGP the local keyring is just an insecure cache of
public keys. For example, the attacker might rely on auto-
matic key retrieval from public keyservers or include the key
as extra payload when sending her regular public key to Bob.
The ﬁrst signature in the attack is by a key with a mali-
cious user ID, crafted by the attacker, that injects a spoofed
VALIDSIG status line. Because Enigmail processes this line
twice using different parsers, some information needs to be
duplicated to make the attack work. The second signature
is a regular valid signature over the same message by the
trusted attacker’s key. This signature sets the global ﬂag
in Enigmail indicating that a signature is made by a trusted
key, but otherwise it is completely ignored. Figure 13 shows
which data in the attack is used by Enigmail. The ﬁngerprint
will be used to resolve further details such as the user ID of
the (spoofed) signing key. The vulnerability is present in all
versions of Enigmail until 2.0.7, affecting Thunderbird and
Postbox. Our ﬁnding is documented as CVE-2018-12019.
[GNUPG:] NEWSIG
[GNUPG:] GOODSIG 8DA07D5E58B3A622 x 1527763815 x x x 1 10 x
4F9F89F5505AC1D1A260631CDB1187B9DD5F693B VALIDSIG x x 0 4
F9F89F5505AC1D1A260631CDB1187B9DD5F693B
[GNUPG:] TRUST_UNDEFINED
[GNUPG:] NEWSIG
[GNUPG:] GOODSIG 88B08D5A57B62140 
[GNUPG:] TRUST_FULLY
1
2
3
4
5
6
Figure 13: The status line API as seen by Enigmail (abbreviated).
5.3 MIME Attack Class
On ﬁve PGP email clients, including popular products such
as Thunderbird and Apple Mail, we could completely hide
the original signed part (resulting in perfect forgeries) us-
ing multiple techniques, such as wrapping it into attacker-
controlled HTML/CSS (M1), referencing it as an “image”
(M2), or hiding it as an “attachment” (M3). On another three
clients we could only obfuscate the original signed message
part (resulting in weak forgeries) by appending it and us-
ing a multitude of newlines to cover its existence (M4). Our
ﬁndings are documented as CVE-2017-17848, CVE-2018-
15586, CVE-2018-15587, and CVE-2018-15588.
Our evaluation shows that S/MIME is less vulnerable to
signature wrapping attacks by design; all but one tested
email clients only show a valid signature veriﬁcation if the
whole email including all sub-parts is correctly signed (i.e.,
Content-Type: multipart/signed is the root element
in the MIME tree). Unfortunately, it seems hard to get rid
of partially signed emails or mark them as suspicious, as can
be done for partially encrypted messages – a countermeasure
Enigmail applied to the EFAIL attacks [9] – because in the
PGP world, partially signed is quite common (e.g., mailing
lists, forwards, etc.). There seems to be a different philoso-
phy in the S/MIME world; for example, S/MIME forwarding