title:Distributed algorithms for stable and secure network coordinates
author:Guohui Wang and
T. S. Eugene Ng
Distributed Algorithms for Stable and Secure Network
Coordinates∗
Guohui Wang T. S. Eugene Ng
Dept. of Computer Science, Rice University
Houston, TX 77005, USA
ABSTRACT
Since its inception, the concept of network coordinates has been
proposed to solve a wide variety of problems such as overlay opti-
mization, network routing, network localization, and network mod-
eling. However, two practical problems signiﬁcantly limit the ap-
plications of network coordinates today. First, how can network co-
ordinates be stabilized without losing accuracy so that they can be
cached by applications? Second, how can network coordinates be
secured such that legitimate nodes’ coordinates are not impacted by
misbehaving nodes? Although these problems have been discussed
extensively, solving them in decentralized network coordinates sys-
tems remains an open problem.
This paper presents new distributed algorithms to solve the coor-
dinates stability and security problems. For the stability problem,
we propose an error elimination model that can achieve stability
without hurting accuracy. A novel algorithm based on this model
is presented. For the security problem, we show that recently pro-
posed statistical detection mechanisms cannot achieve an accept-
able level of security against even simple attacks. We propose to
address the security problem in two parts. First, we show how
the computation of coordinates can be protected by a customized
Byzantine fault detection algorithm. Second, we adopt a triangle
inequality violation detection algorithm to protect delay measure-
ments. These algorithms can be integrated together to provide sta-
ble and secure network coordinates.
Categories and Subject Descriptors
C.2.m [Computer-Communication Networks]: Miscellaneous
General Terms
Algorithms, Security, Performance
∗
sponsored by the NSF under CNS-
This
0721990, CNS-0520280, CNS-0435425 and CAREER Award
CNS-0448546. Views and conclusions contained in this document
are those of the authors and should not be interpreted as represent-
ing the ofﬁcial policies, either expressed or implied, of NSF or the
U.S. government.
research was
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
IMC’08, October 20–22, 2008, Vouliagmeni, Greece.
Copyright 2008 ACM 978-1-60558-334-1/08/10 ...$5.00.
Keywords
Network coordinates, security, stability, distributed algorithms
1.
INTRODUCTION
Network coordinates provide a lightweight approximation of In-
ternet delays. Since its inception, it has attracted much attention
from the networking research and industrial communities. Szyma-
niak et al.
[31] report the deployment of a large scale network
coordinates system for delay estimation in the Google content de-
livery network and forecasts that Google may offer a public inter-
face to the coordinates system. In addition to the delay estimation,
researchers have explored the applications of network coordinates
in many other areas. To name only a few examples, in [8], [1] and
[13], the authors discuss the application of network coordinates in
[20] use network coordi-
compact Internet routing. Nandi et al.
nates for overlay construction. Lumezanu et al.
[18] propose to
use network coordinates to discover fast overlay paths. Zhang et al.
[36] demonstrate the application of network coordinates in mod-
eling and synthesizing Internet delays at large scales. Bazzi et al.
[2] use network coordinates to defend against the Sybil attack in
overlay networks.
However, the applications of network coordinates are still sig-
niﬁcantly limited by two important problems. The ﬁrst problem is
coordinates stability. Many previous studies, such as [6],
[24],
[14] and [33], have reported the coordinates instability problem in
Vivaldi [5], which is the state of the art decentralized network co-
ordinates system. Their results show that even when the network
delays do not change, network coordinates in the Vivaldi system
are drifting rapidly. The coordinates instability problem makes it
hard for applications to use network coordinates. This is because
applications cannot cache changing coordinates. When an applica-
tion process wants to use the network coordinates of other nodes, it
has to query their coordinates very frequently. Although previous
studies [14, 12] have attempted to reduce the impact of coordinates
instability on applications, achieving coordinates stability without
losing accuracy in a decentralized system is still an unsolved prob-
lem.
The second problem is coordinates security. Previous studies [11,
35] have explored the performance of network coordinates systems
in adversarial environments. The results show that, a small frac-
tion of malicious nodes in the system can dramatically degrade
the accuracy of network coordinates. This problem becomes espe-
cially important when network coordinates are applied in an open
network environment, such as peer-to-peer networks, where there
may be no global access control in the system. Recent studies [10,
35] have proposed to use statistical detection mechanisms to dif-
ferentiate good nodes and malicious nodes. However, all statisti-
cal detection mechanisms inevitably suffer from false positive and
false negative cases. Facing a large number of potential attacks,
it remains unclear how well these statistical detection mechanisms
could contain malicious nodes.
This paper presents new distributed algorithms to solve the sta-
bility and security problems in decentralized network coordinates
systems. For coordinates stability, we discuss two abstract mod-
els for stabilizing coordinates in decentralized network coordinates
systems: stopping coordinates and error elimination. The analyt-
ical framework leads to two insights. First, the intuitive model
of stabilizing coordinates by stopping coordinates movement has
a fundamental problem that hurts coordinates accuracy. Second,
the alternative model of stabilizing coordinates by eliminating em-
bedding error can potentially achieve stability while preserving ac-
curacy. We propose a distributed algorithm to closely approximate
the error elimination model for stability in the Vivaldi system. The
evaluation results demonstrate that, this method can achieve coor-
dinates stability without sacriﬁcing accuracy in decentralized net-
work coordinates systems.
For coordinates security, we empirically study the behavior of
existing statistical detection mechanisms. The results show that
none of the existing mechanisms can provide satisfactory protec-
tion against even simple attacks. We propose to address the coordi-
nates security problem in two parts: securing coordinates compu-
tation and securing delay measurement. We show that coordinates
computation can be completely protected by a customized Byzan-
tine fault detection technique. We propose a triangle inequality vi-
olation (TIV) detection technique that can effectively protect delay
measurement. We demonstrate that the distributed algorithms pro-
posed in this paper can be integrated to provide stable and secure
network coordinates.
The rest of this paper is organized as follows. Section 2 intro-
duces the experimental methodology we use to study the key ques-
tions in this paper. Section 3 addresses the coordinates stability
problem and Section 4 addresses the coordinates security problem.
Section 5 illustrates a way to integrate the stability and security
algorithms. Section 6 provides an overview of the related work.
Finally, we conclude in Section 7.
2. EXPERIMENTAL METHODOLOGY
In this section, we introduce the experimental methodology we
use in addressing the questions in this paper.
2.1 Experimental Platform
There are many proposals to build network coordinates systems
with different architectures, computation methods and performance
optimization techniques. We have implemented a conﬁgurable net-
work coordinates platform. In this platform, we can choose differ-
ent components to realize a speciﬁc network coordinates system.
By changing the conﬁguration, we are able to evaluate the perfor-
mance of many existing proposals. The platform has the following
conﬁgurable features:
Algorithm conﬁguration - The platform can be conﬁgured to
use different algorithms to compute network coordinates.
It can
also be conﬁgured with different mechanisms to optimize system
performance.
Environment conﬁguration - The platform can be conﬁgured
to run in a simulated environment for controlled experimentation,
or in a real network environment such as PlanetLab for realism.
In the simulated environment, the delay measurements are loaded
from a delay matrix. In the real network environment, the delay
measurements are performed by actual network probing. To ﬁlter
out the impact of queuing delay, the delay measurement takes the
minimum delay from multiple probes.
2.2 Experimental Setup
Using the conﬁgurable platform, we can set up both PlanetLab
experiments and simulation experiments. The PlanetLab experi-
ments are used to evaluate the real deployment performance of the
system and the simulation experiments are used to set up well con-
trolled scenarios to analyze the system properties in detail. The
PlanetLab experiments are deployed on 306 hosts which are all
the reachable PlanetLab nodes during our experiment period. The
simulation experiments are based on the p2psim data [5] which is
the delay matrix among 1740 DNS servers measured by the King
tool [7].
2.3 Performance Metrics
We use the following metrics to evaluate the coordinates’ accu-
racy and stability properties.
Relative Error - The relative error metric is used to evaluate
coordinates’ accuracy. The deﬁnition of relative error is:
|measured_delay − predicted_delay|
measured_delay
Some other metrics, such as relative rank loss and closest neighbors
loss [17], have been proposed to evaluate the accuracy of network
coordinates for server selection application. We do not use these
metrics in this paper because we are not focused on the coordinates’
accuracy for a particular application. We evaluate coordinates’ ac-
curacy generally in term of delay prediction.
Average Coordinates Movement - We use an average coordi-
nates movement metric to evaluate the stability of network coordi-
nates. The average coordinates movement is deﬁned in the follow-
ing way. In a network coordinates system with N nodes, node i
moves its coordinates at time t with the distance of di(t). During a
time period T , the average coordinates movement in the system is
PN
P
i=1
t∈T di(t)
N
This metric takes into account all the coordinates movements in the
system. We normalize the overall coordinates movement by the
number of nodes so that the metric is not impacted by the system
scale. In our experiments, we monitor average coordinates move-
ment in 10 second periods.
3. COORDINATES STABILITY IN
DECENTRALIZED NETWORK
COORDINATES SYSTEMS
3.1 Coordinates Stability Problem
We ﬁrst deﬁne the coordinates stability problem. Two points
need to be clariﬁed to understand this problem. First, the coordi-
nates stability problem must be considered together with the accu-
racy of coordinates. If we only consider the stability of network
coordinates, we can simply force all the nodes to stop their coor-
dinates computation at random moments to achieve stable coordi-
nates. But the randomly stopped network coordinates are meaning-
less because they can have very bad accuracy in predicting network
delays. Therefore, when we study coordinates stability, we must
consider the accuracy of the stabilized network coordinates. Sec-
ond, we need to deﬁne the best accuracy that can be achieved by
stabilized network coordinates. The most accurate coordinates we
can get from an unstable network coordinates system are the co-
ordinates from a global snapshot after the coordinates computation
has converged. Thus, the problem is, can network coordinates be
stabilized while preserving this highest level of accuracy in decen-
tralized network coordinates systems?
The coordinates stability problem is investigated with the follow-
ing assumptions:
(1) The problem is considered in a fully decentralized system.
There is no global coordination and no landmarks in the system.
(2) There is no malicious churn in the system. Here malicious
churn means that the nodes join and leave the system so frequently
that a node will lose most of its neighbors before its coordinates
computation converges. We do not study the coordinates stability
problem in this environment because there is no way to stabilize
network coordinates while preserving good accuracy.
(3) There is no frequent network routing changes. In network
coordinates systems, a node collects multiple delay measurement
samples and keeps the minimum value to obtain the stable propa-
gation delay. Network coordinates systems use these propagation
delays to compute coordinates. If the underlying network routing
is not stable and the propagation delays change frequently, it is not
possible to stabilize network coordinates.
3.2 The Difﬁculties of Stabilizing Coordinates
In this section, we discuss the challenges of the coordinates sta-
bility problem. Note that coordinates stability is trivial to achieve
in a centralized network coordinates system like GNP. In GNP, a
central node collects all the delay measurements among landmarks
and computes the coordinates of landmarks by an optimization al-
gorithm. The central node can end the coordinates computation at
the coordinates that minimize the prediction error. The landmarks
can thus easily get stable and accurate coordinates by this central-
ized computation. Because all the ordinary nodes compute their
own coordinates based on landmarks’ stable coordinates, they can
also achieve coordinates stability easily.
However, in decentralized network coordinates systems, achiev-
ing coordinates stability remains an open problem. Many previous
studies [6], [24], [14], [12], [33] have discussed the serious co-
ordinates instability problem in the Vivaldi system. Their results
show that even when there are no delay changes at all, Vivaldi co-
ordinates are still drifting rapidly. In [6], [14], [12], the authors
have proposed techniques to alleviate this problem in the Vivaldi
system. Ultimately, the key difﬁculty in solving the stability prob-
lem lies in the fact that there is no global coordination in decentral-
ized systems. Each node only knows the local information, such as
its own coordinates and error and its direct neighbors’ coordinates
and errors. Based on this incomplete information, it is hard for a
node to decide when and how to stabilize its coordinates without
hurting the overall prediction accuracy.
In [6], the authors propose to add a loss factor to stabilize the
coordinates in the Vivaldi system. loss is a value in [0, 1]. The co-
ordinates movements in the Vivaldi system are always multiplied
by the factor (1− loss). loss is set to 0 at the beginning. While the
system is converging, loss is gradually increased to 1 by the func-
tion loss = cl + (1 − cl) × loss, where cl is a constant factor em-
pirically set to 0.02. Finally, when loss reaches 1 on all the nodes,
all the coordinates will be stabilized. Although this technique can
stabilize the coordinates in the Vivaldi system, the problem is, be-
cause nodes stabilize their coordinates independently without con-
sidering the overall prediction error, the stabilized coordinates can
have very bad accuracy.
In [14], the authors propose to add update ﬁlters to the Vivaldi
system to reduce the impact of coordinates instability on applica-
tions. The idea of the update ﬁlter is to have two sets of coordinates
on each node, a system level coordinates (cid:2)cs and an application-level
coordinates (cid:2)ca. The system level coordinates (cid:2)cs keep drifting as the
original Vivaldi coordinates. The application level coordinates (cid:2)ca
is updated only after the update ﬁlter detect a signiﬁcant change
in (cid:2)cs. The update ﬁlters detect coordinates changes by a statisti-
cal heuristic. Although these update ﬁlters can reduce the impact
of coordinates drift on applications, they are not meant to stabilize
network coordinates.
In [12], the authors propose to add a gravity force in the Vi-
valdi system to limit coordinates drifting. The idea is to apply a
polynomially increasing gravity to coordinates as they become far-
ther away from the origin coordinates. Gravity (cid:2)G is a force vec-
“
tor applied to a node’s coordinates (cid:2)xi after each update: (cid:2)G =
”2 × u( (cid:2)xi), where u( (cid:2)xi) is the unit vector in the opposite
(cid:4) (cid:2)xi(cid:4)
ρ
direction of (cid:2)xi, ρ is a gravity factor, which is empirically set to 256.
It is shown in [12] that the gravity technique can reduce the drift-
ing of the coordinates’ centroid. However, the problem is that, the
gravity technique only prevents the coordinates space from drifting
away from the origin, the coordinates of each node are still moving
in a chaotic way as the original Vivaldi.
To quantify the performance of the loss factor technique and the
gravity technique, we compare these systems to the original Vivaldi
system by conducting 5,000 second long PlanetLab experiments.
Figure 1 shows the coordinates stability and accuracy of these dif-
ferent techniques. We can see that, although the loss factor tech-
nique can stabilize coordinates, it hurts the coordinates’ accuracy
signiﬁcantly. On the other hand, the gravity technique does not hurt
coordinates’ accuracy, but the coordinates’ instability is essentially
the same as the original Vivaldi system. That is although the gravity
technique reduces the drifting of the coordinates’ centroid, it does
not achieve coordinates stability.
3.3 Analytical Framework for Coordinates
Stability
In this section, we discuss two different abstract models for think-
ing about and understanding coordinates stability.
Stabilizing coordinates by stopping movement - Since the ba-
sic goal is to reach a state where the coordinates of all the nodes do
not change, the most intuitive model is to stabilize coordinates by
stopping movement. The loss factor technique proposed in [6] is
an example of this model. Of course, a node should not freeze its
coordinates at a random moment. It must do so only when the coor-
dinates’ accuracy is high. So, let us for the moment assume an ide-
alized system in which each node has the ability to independently
discover that the overall distributed coordinates computation has
converged. A node can then choose to freeze its coordinates after
it has discovered convergence. Even under this idealized system,
the stopping movement model can achieve good accuracy only if
all nodes simultaneously freeze their coordinates, which is not pos-
sible in decentralized network coordinates systems.
In practice, different nodes’ coordinates converge at very differ-
ent time. All the nodes have to freeze their coordinates based on
local information. No matter whether a node freezes its coordi-
nates suddenly or gradually, the problem with the stopping move-
ment model is that a node can only make the decision to freeze its
coordinates based on past history. As soon as a node freezes its
coordinates, it loses the ability to adapt to future events. Since it is
fundamentally not possible for all nodes to simultaneously freeze
their coordinates, after a node freezes its coordinates, its prediction
errors may be increased because other nodes’ coordinates are still
moving. For example, consider a node A whose coordinates has
been frozen, and one of A’s neighbor B is still updating its coordi-
nates to reduce its local error. After some time, B may have drifted
away. The prediction error of A’s coordinates is thus increased.
i
)
s
m
(
s
n
b
s
0
1
n
i
t
n
e
m
e
v
o
m
e
t
a
n
d
r
o
o
c
e
g
a
r
e
v
A
i
70
60
50
40
30
20
10
0
1000
Vivaldi
Vivaldi+gravity
Vivaldi+loss
1
0.8
0.6
0.4
0.2
n
o
i
t
u
b
i
r
t
s
i
d
e
v
i
t
a
l
u
m
u
C
2000
3000
Execution time(s)
4000
5000
0
0
1
Vivaldi
Vivaldi+gravity
Vivaldi+loss
4
5
2
3
Relative error
Figure 1: Coordinates stability and accuracy of Vivaldi with gravity and loss factor (a) Stability (b) Accuracy
(a)
(b)
However, A has stopped updating its coordinates and can no longer
react to reduce the error. In summary, stabilizing coordinates by
stopping coordinates movement takes away the critical coordinates
adaptivity necessary to maintain high accuracy and thus this model
cannot solve the stability problem.
Stabilizing coordinates by eliminating error - The coordinates
stability problem can be considered from another perspective. All
network coordinates systems use some optimization algorithms to
compute coordinates that minimize error. An interesting observa-
tion is, if the system reaches the state where all prediction errors is
0, the network coordinates will naturally be stabilized. If we think
about the coordinates stability problem in this way, to achieve sta-
ble coordinates, the target is to reach the state where the predic-
tion error is 0. However, because of triangle inequality violations
among Internet delays, it is not possible to have network coordi-
nates that can predict Internet delays perfectly.
These observations motivate our second model for achieving sta-
bility, that is to stabilize coordinates by artiﬁcially eliminating the
remaining errors on all the neighbor edges. Let us again assume
an idealized system in which each node has the ability to indepen-
dently discover that the overall distributed coordinates computation
has converged. In addition, assume that each node can indepen-
dently determine the set of coordinates distances D to all its neigh-
bors in a speciﬁc snapshot S of the converged coordinates system.
In this idealized system, a node can then choose to eliminate the
errors on neighbor edges by substituting the set of coordinates dis-
tances D for the set of measured delays.
Note that although nodes may not choose to eliminate errors si-
multaneously, this idealized system will naturally stabilize because
the artiﬁcial distances D are perfectly embeddable. The resulting
stable coordinates will have the same accuracy as the speciﬁc snap-
shot S.
The key difference between this model and the previous stopping
movement model is that while a node is eliminating its remaining