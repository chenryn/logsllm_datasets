338
11,067,605,244
1,005,337,180
7,697
15,575
64,517
425,361
99,674
203
4,457,696,135
374,455,910
4,287
Tailored
Reduction
NFS LAMP NFS
56% 52%
97% 96%
71% 68%
99% 98%
87% 84%
85% 80%
87% 83%
85% 82%
84% 79%
60% 49%
81% 80%
63% 62%
62% 52%
83% 78%
85% 81%
82% 78%
80% 76%
57% 47%
72% 70%
59% 57%
57% 51%
4,792,508
2,648,034
492
63
1,423
47,130
178,523
1,122,545
260,189
429
11,578,373,245
1,036,833,959
9,512
21,561
89,175
550,669
126,710
276
4,770,441,587
391,855,241
5,489
Table 1. Summary of kernel tailoring and attack surface measurements.
To measure the performance of the different kernel ver-
sions, we use the BONNIE++ [10] benchmark, which covers
reading and writing to this directory over the network. To
achieve results that are meaningful, we disable caching on
both server and client.
4.3.2 Results
The trace ﬁle of the conﬁguration selected for further testing
consists of 13,841 lines that reference a total of 3,477 ad-
dresses in modules. This resolves to 13,000 distinct source
lines in 735 ﬁles. Building the formula and therefore the
conﬁguration takes 219 seconds, compiling the kernel an-
other 99 seconds on the same machine as described above.
We observe a reduction of KCONFIG features that are stat-
ically compiled into the kernel by 68%, 98% for features
compiled into LKMs, and about 90% less code in the text
segment.
Performance and Stability We did not ﬁnd any impact
on the regular functionality of the workstation, i.e., all hard-
ware attached, such as input devices, Ethernet or sound, re-
mained fully operable with the tailored kernel booted. Us-
ing the tailored kernel, we run BONNIE++ again with the
same parameters, and compare the results with those of the
distribution kernel. Figure 8 shows that also in this use case
the kernel compiled with our tailored conﬁguration achieves
a very similar performance.
Security Attack surface reduction results are similar to
the LAMP use case. The numbers in Table 1 show that
the AS1SLOC, AS1cycl and AS2SLOC attack surface reduction
is around 80% in the GENSEC model, and around 75% in
the ISOLSEC model. In both models, there are also 50%
fewer functions that were affected by patches due to CVEs
in the past. We also observe that AS2cycl is slightly lower
as well, with attack surface reduction around 60%. Over-
all, our measurements suggest the attack surface reduction
is between 50% and 80%.
5 Discussion
5.1 Attack surface measurements
This section discusses the results of our attack surface
measurements.
Figure 8. Comparison of the test results from
the BONNIE++ benchmark, showing no signif-
icant difference between the tailored and the
baseline kernel.
Use cases Figure 9 shows that the tailored kernel conﬁg-
urations are largely similar for both cases. We observe a
number of features that differentiate the use cases, both in
terms of hardware and workload. The workstation/NFS use
case requires the highest number of differentiating features
(87 enabled KCONFIG options for NFS compared to 27 for
LAMP). This can be explained by the setup (the desktop
version of Ubuntu has the X11 window system installed
and running, whereas the server version has not) and by
the workload: as NFS also runs in kernel mode, additional
kernel features are required. This point is useful for under-
standing attack surface reduction results. Although both use
cases show similar AS1SLOC reductions (around 80%), there
is a slight difference for both GENSEC and ISOLSEC and
the various AS metrics in the reduction achieved in favor of
the LAMP use case (see Table 1). This is simply because
the workstation/NFS use case requires a larger kernel than
the LAMP one.
The case of CVE-2010-3904 Out of the 422 CVEs we
have inspected, we detail the case of one highly publi-
cized vulnerability for illustration purposes. CVE-2010-
3904 documents a vulnerability that is due to a lack of ver-
iﬁcation of user-provided pointer values, in RDS, a rarely
used socket type. An exploit for obtaining local privilege
escalation was released in 2010 [42]. We veriﬁed that in
the case of the workstation/NFS use case, both tailored ker-
nel conﬁgurations have the functionality removed in the
GENSEC and ISOLSEC models, and thus would have pre-
vented the security issue. In contrast, the baseline kernel
contains the previously-vulnerable feature in the GENSEC
and ISOLSEC models.
Figure 9. Comparison of the two generated
conﬁgurations from the use cases in terms of
KCONFIG features leading to built-in code and
code being compiled as LKM. Below, the total
number of compiled source ﬁles is compared
between the two resulting kernels.
CVE sampling bias The results in Table 1 show slightly
lower CVE reduction numbers than for all other metrics, es-
pecially in the case of AS1. We hypothesize that this small
difference is due to a sampling bias: code that is used more
often is also audited more often, more bug reports concern-
ing it are submitted, and better care is taken in document-
ing the vulnerabilities of such functions. We also observe
the average number of CVEs per function is lower in the
functions that are in the tailored kernel, when compared to
those functions that are not. Previous studies [9, 39] have
shown that code in the drivers/ sub-directory of the ker-
nel, which is known to contain a signiﬁcant amount of rarely
used code, on average contains signiﬁcantly more bugs than
any other part of the kernel tree. Consequently, it is likely
that unused features provided by the kernel still contain a
signiﬁcant amount of relatively easy-to-ﬁnd vulnerabilities.
This further conﬁrms the importance of attack surface re-
duction as presented in this paper.
Nevertheless, we still take the CVE reduction numbers
into account, because they reﬂect a posteriori knowledge
about vulnerability occurrences. All our measurements in-
dicate attack surface reduction lies approximately within
50% and 85% across all parameters (use cases, security
models, metrics), which is a very positive result for kernel
tailoring.
Attack surface metric comparison The AS1 and AS2 re-
sults are quite close, which, considering how different their
formulations are, shows the robustness of the simple attack
surface deﬁnition introduced in Section 2. AS2 is also of in-
terest because it introduces the use of the Laplacian, which
is instrumental in many applications of graph theory (e.g.,
for data mining [2]), for the purpose of attack surface mea-
surements.
blockwriteblockrewriteblockread020406080100120tailoredkernelbaselinekernelthroughputinMB/s142311214191004117source filesWorkstation/NFSLAMP4926343loadable kernel modules452built-in37–26–175044210––––totalNFS only – shared – LAMP only totalKConfig features  configured asFigure 10. AS1SLOC attack surface measurements per kernel subsystem in both security models and
use cases.
Comparison to kernel extension isolation Approaches
such as [31, 50] provide a way, through impressive technical
feats, of isolating LKMs from the kernel, i.e., running them
with lesser privileges. This means, ideally, the compromise
of an LKM by an attacker cannot lead to kernel compro-
mise. To evaluate how such solutions compare to kernel
tailoring, we again make use of the attack surface formal-
ism introduced in Section 2. Assuming that these isolation
solutions are ideal (i.e., that their own implementation does
not increase the kernel’s attack surface and the attackers are
not able to bypass the isolation), we remove all LKMs from
the baseline kernel’s attack surface in the ISOLSEC model,
hence obtaining a lower bound of the real attack surface of
such LKM-isolated kernels. Our results in Table 2 show
that kernel tailoring is superior to LKM isolation: for in-
stance, the AS1SLOC measurement of the ideal LKM isola-
tion is four times higher. We also evaluate whether combin-
ing both approaches could be beneﬁcial, i.e., ﬁrst generat-
ing a tailored kernel and then applying an ideal LKM iso-
lation. The results show that the resulting attack surface is
not signiﬁcantly lower than that obtained by kernel tailoring
alone, which further conﬁrms the improvements of our ap-
proach, even when compared to an ideal LKM isolation so-
lution. Additionally, we remark that this lower bound is also
applicable to approaches that prevent automatic-loading of
LKMs, such as the well-known grsecurity kernel patch with
the MODHARDEN option [48].
Security models The attack surface reduction is impor-
tant in both security models, but more so in the GENSEC
model. This can be attributed to the fact that the GENSEC
model includes a large number of drivers, whereas the
ISOLSEC model does less. As can be seen from Figure 10,
the attack surface reduction is particularly high for drivers.
In other words, tailoring appears to be slightly more effec-
tive in the GENSEC model than in the ISOLSEC model. This
is to be expected, since our approach reduces the kernel’s at-
tack surface system-wide (and not per-process). Figure 10
also shows that, both in the baseline and tailored kernels
and independently of the use case, the ISOLSEC attack sur-
face is about half of the GENSEC attack surface. In other
words, the attack surface of a local attacker (as deﬁned in
the ISOLSEC model) is about half of what is generally con-
sidered as the TCB of the kernel.
Importance of kernel conﬁguration When quoting
SLOC measurements of the Linux kernel as a simple way
of quantifying TCB size, we advocate specifying the kernel
conﬁguration the measurement corresponds to. Indeed, our
results show that, depending on the kernel conﬁguration, the
total number of lines of code can vary by up to an order of
magnitude. An other important factor is the kernel version,
since the Linux kernel increased signiﬁcantly in size over
the past years.
5.2 Kernel tailoring
We will discuss now the key strengths and weaknesses of
the kernel-tailoring tool with respect to various properties.
Effectiveness Although in absolute terms the attack sur-
face of the tailored Linux kernel remains high (for AS1,
baseline0234567driversfsnetsoundkernelotherstailoredbaselinetailoredGenSecIsolSecattack surface in million lines of code1LAMPbaseline0234567driversfsnetsoundkernelotherstailoredbaselinetailoredGenSecIsolSecattack surface in million lines of code1NFSIdeal LKM isolation
AS1SLOC
AS1cycl
AS1CV E
AS2SLOC
AS2cycl
AS2CV E
2,064,526
444,775
390
11,826,476,219
851,676,457
7,725
Kernel Tailoring
LAMP Workstation/NFS
550,669
425,361
126,710
99,674
203
276
4,770,441,587
4,457,696,135
391,855,241
374,455,910
4,287
5,489
Both combined
LAMP Workstation/NFS
489,732
420,373
113,735
98,534
203
240
4,663,745,009
4,452,329,879
386,472,434
374,214,950
4,287
4,849
Table 2. Comparison of ISOLSEC attack surface measurements between an ideal LKM isolation ap-
proach (a lower bound of the attack surface of kernel extension fault isolation approaches) and our
approach, when applied to the current Ubuntu 12.04 Kernel. The third column represents attack
surface measurements that would result if both approaches were combined.
about 500K SLOC in the ISOLSEC model, and 1000K
SLOC in the GENSEC model), Table 1 shows that for both
use cases and across all meaningful metrics, the attack sur-
face is reduced by almost an order of magnitude. As such,
vulnerabilities existing in the Linux kernel sources are sig-
niﬁcantly less likely to impact users of a tailored kernel.
This makes the approach presented an effective means for