97.0%
96.4%
95.6%
Nature
72.1%
55.1%
52.2%
50.4%
Reversed
27.9%
44.9%
47.8%
49.6%
rate of ptmalloc and dlmalloc are both more than 94% in
all the nonlinear additivity situations. The biggest impact of
nonlinear additivity is the time cost. Because MAZE can not
derive the heap interaction sequence by solving equations, so
it will spend more time for half Diophantine equations. Even
so, the average time interval is still lower than 10 minutes.
More detail of this experiment can be found in Appendix E.
6.5.3 Evaluation of Multi-object Position Constraint
Table 8 shows the evaluation result of multi-object layout
constraint solving. We set the noise to 3 and (de)allocation
primitive number to 3(4) respectively, and generate 100 ran-
dom heap layouts for each multi-object constraint. We eval-
uated 2 to 5 object constraints, and the result shows that the
success rate is more than 95% for all of them.
The success rate decreased and the time interval increased,
while the number of objects increases. The root cause is sim-
ple. With more object layout constraints, MAZE has to gener-
ate more Diophantine Equations to solve.
SHRIKE demonstrated that the order of allocation relative
to memory corruption direction also inﬂuenced the success
rate. We also evaluated this factor. In the last two columns,
the column Nature shows the ratio of cases, in which an
earlier allocation takes the lower memory address but a later
allocation takes the higher address, and the column Reversed
shows the contrary. Because the heap layout is randomly
generated, the Nature ratio drops when more objects layout
constraints are enforced. For 5 object constraints, the Nature
ratio is even 50%, but the success rate can still be 95.6%. So
this factor has few inﬂuences on the success rate.
7 Discussion of Scalability
Dig & Fill algorithm First of all, regardless of what the
applications are, Dig & Fill algorithm’s scalability is only
related to the adopted heap allocators. We have evaluated
the scalability of Dig & Fill in Section 6.5 with test cases
which are much more complicated than real world situation.
And the result shows that MAZE can solve more than 90% of
scenarios in minutes.
Some heap allocators (e.g. allocators in V8) utilize lots
of security mechanisms to increase the difﬁculty of mem-
ory layout manipulation. For example, the OldSpace and the
NewSpace mechanism makes it impossible to dig memory
holes and place noise objects, causing troubles even for hu-
man analysts. Moreover, these allocators also violate the four
rules deﬁned in Section 2.3.2. So they are out of the scope
of MAZE. We will try to address these advanced security
mechanisms in the future.
Figure 7: Inﬂuences of different number of primitives.
to 7. To exclude the inﬂuence of other factors, the number
of (de)allocation and deallocation primitives is ﬁxed to 3(4),
the length of the heap operation size list is 1, and the mix
of allocation and deallocation is None. For each setting, we
generated 200 random test case.
The result is shown in Figure 6, solid lines are the success
rates for different number of noises, while dotted lines rep-
resent the time cost. We can see that, the success rate keeps
between 98% and 100%, showing that the number of noises
does not inﬂuence the success rate of Dig & Fill. Further-
more, the time cost increases along with the number of noises,
since noises will make the heap layout more complicated and
cost more time to solve them.
Inﬂuence of primitive count. Then, we evaluated the suc-
cess rate using a different number of primitives. In this evalu-
ation, the allocation primitives count ranges from 2 to 7, and
the number of deallocation primitives is set to 1, and the noise
number is 5. Other conﬁgurations are the same as above.
The result is shown in Figure 7, the solid lines are the suc-
cess rate for different number of allocation primitives, while
the dotted lines represents the time interval spent to solve
the problem. We can see that, as the number of primitives
increases, the success rate also increases. This proves that
the diversity of primitives inﬂuences the success rate. But
even with only two primitives, the success rate can still reach
87.7%. Further, the time spent by MAZE to solve the problem
does not grow along with the number of primitives.
Table 7: The success rate and time interval in different non-
linear additivity situations.
Target
pt_malloc
dl_malloc
Mix
94.7% in 256s
97.8% in 327s
Size Diversity
98.9% in 384s
100% in 433s
Mix + Diversity
99.1% in 357s
100% in 446s
Inﬂuence of Nonlinear Additivity. As discussed in Sec-
tion 5.4.2, to handle the nonlinear additive factors, MAZE
utilizes grouping, correcting and shifting techniques. For com-
plicated heap layouts, MAZE can only generate two-variable
or half Diophantine equations.
Table 7 shows the success rate and average time interval
spent for primitives without linear additivity. Although MAZE
can only generate half Diophantine equations, but the success
USENIX Association
30th USENIX Security Symposium    1659
234567Allocation primitives number0.850.900.951.00success ratedl_malloc_succ_ratept_malloc_succ_ratedl_malloc_timept_malloc_time5080110140170Time interval(s)Heap layout primitive analysis Like many other solutions,
MAZE can also handle interpreters, such as PHP, Python
and Perl. It’s very challenging to handle programs whose
inputs can not be freely assembled, such as network programs.
MAZE utilizes symbolic execution to extract and analyze heap
primitives for such programs. But due to the well-known bot-
tleneck of symbolic execution, the current prototype of MAZE
is not evaluated on complicated network services. Instead, we
evaluated MAZE on CTF applications, which have similar pro-
cess logic, complicated allocators, and compact input format
requirements as network services.
Even for complicated network services, if its heap layout
primitives are provided to MAZE (e.g., by human), MAZE
can still generate the expected memory layout using its Dig
& Fill algorithm.
8 Conclusion
Few AEG solutions are able to manipulate heap layouts into
an expected state. We proposed a solution MAZE to transform
POC samples’ heap layouts into expected layouts and auto-
matically generate working exploits when possible. MAZE
extends heap layout primitives to reentrant code snippets in
event loop driven applications, and could efﬁciently recog-
nize and analyze them. MAZE further adopts a novel Dig &
Fill algorithm to assemble primitives to generate expected
layout, by deterministically solving a Linear Diophantine
Equation. It is very efﬁcient and effective, comparing to ex-
isting solutions, and even supports multi-object constraints
and many heap allocators. Beyond heap layout manipulation,
AEG has a lot of other challenges to address.
Acknowledgement
This work was supported in part by Beijing Municipal
Science and Technology Project (No.Z181100002718002),
National Natural Science Foundation of China under Grant
61772308, 61972224 and U1736209, and BNRist Network
and Software Security Research Program under Grant
BNR2019TD01004 and BNR2019RC01009.
References
[1] S. Heelan, “Automatic generation of control ﬂow hijacking
exploits for software vulnerabilities,” Ph.D. dissertation, Uni-
versity of Oxford, 2009.
[2] T. Avgerinos, S. K. Cha, B. Lim, T. Hao, and D. Brumley, “Aeg:
Automatic exploit generation,” in Network and Distributed
System Security Symposium, 2011.
[3] S. K. Cha, T. Avgerinos, A. Rebert, and D. Brumley, “Unleash-
ing mayhem on binary code,” in Security and Privacy (SP),
2012 IEEE Symposium on.
IEEE, 2012, pp. 380–394.
[4] E. J. Schwartz, T. Avgerinos, and D. Brumley, “Q: Exploit
hardening made easy.” in USENIX Security Symposium, 2011,
pp. 25–41.
[5] S.-K. Huang, M.-H. Huang, P.-Y. Huang, C.-W. Lai, H.-L. Lu,
and W.-M. Leong, “Crax: Software crash analysis for automatic
exploit generation by modeling attacks as symbolic continua-
tions,” in Software Security and Reliability (SERE), 2012 IEEE
Sixth International Conference on.
IEEE, 2012, pp. 78–87.
[6] “Cve details,” 2019, online: accessed 26-Feb-2019. [Online].
Available: https://www.cvedetails.com/
[7] A. Sotirov, “Heap feng shui in javascript,” Black Hat Europe,
2007.
[8] S. Heelan, T. Melham, and D. Kroening, “Automatic heap lay-
out manipulation for exploitation,” in 27th {USENIX} Security
Symposium ({USENIX} Security 18), 2018, pp. 763–779.
[9] ——, “Gollum: Modular and greybox exploit generation for
heap overﬂows in interpreters,” in Proceedings of the 2019
ACM SIGSAC Conference on Computer and Communications
Security, 2019, pp. 1689–1706.
[10] Y. Chen and X. Xing, “Slake: Facilitating slab manipulation
for exploiting vulnerabilities in the linux kernel,” in Proceed-
ings of the 2019 ACM SIGSAC Conference on Computer and
Communications Security, 2019, pp. 1707–1722.
[11] “Unlink Exploit ,” https://heap-exploitation.dhavalkapil.com/
attacks/unlink_exploit.html, 2018, online: accessed 01-May-
2018.
equation,”
[12] “Diophantine
https://en.wikipedia.org/wiki/
Diophantine_equation, 2019, online: accessed 01-May-2019.
[13] V. Chipounov, V. Kuznetsov, and G. Candea, “S2E: A platform
for in-vivo multi-path analysis of software systems,” in Intl.
Conf. on Architectural Support for Programming Languages
and Operating Systems, 2011.
[14] D. Repel, J. Kinder, and L. Cavallaro, “Modular synthesis of
heap exploits,” in Proceedings of the 2017 Workshop on Pro-
gramming Languages and Analysis for Security, 2017, pp. 25–
35.
[15] Y. Wang, C. Zhang, X. Xiang, Z. Zhao, W. Li, X. Gong, B. Liu,
K. Chen, and W. Zou, “Revery: From proof-of-concept to ex-
ploitable,” in Proceedings of the 2018 ACM SIGSAC Confer-
ence on Computer and Communications Security. ACM,
2018, pp. 1914–1927.
[16] M. Eckert, A. Bianchi, R. Wang, Y. Shoshitaishvili, C. Kruegel,
and G. Vigna, “Heaphopper: Bringing bounded model check-
ing to heap implementation security,” in 27th {USENIX} Secu-
rity Symposium ({USENIX} Security 18), 2018, pp. 99–116.
[17] B. Garmany, M. Stoffel, R. Gawlik, P. Koppe, T. Blazytko,
and T. Holz, “Towards automated generation of exploitation
primitives for web browsers,” in Proceedings of the 34th An-
nual Computer Security Applications Conference, 2018, pp.
300–312.
[18] W. Wu, Y. Chen, J. Xu, X. Xing, X. Gong, and W. Zou, “Fuze:
Towards facilitating exploit generation for kernel use-after-
free vulnerabilities,” in 27th USENIX Security Symposium
(USENIX Security 18). USENIX Association, 2018.
[19] W. Wu, Y. Chen, X. Xing, and W. Zou, “{KEPLER}: Facil-
itating control-ﬂow hijacking primitive evaluation for linux
kernel vulnerabilities,” in 28th {USENIX} Security Symposium
({USENIX} Security 19), 2019, pp. 1187–1204.
[20] J. Krupp and C. Rossow, “teether: Gnawing at ethereum to auto-
1660    30th USENIX Security Symposium
USENIX Association
matically exploit smart contracts,” in 27th {USENIX} Security
Symposium ({USENIX} Security 18), 2018, pp. 1317–1333.
[21] H. Hu, Z. L. Chua, S. Adrian, P. Saxena, and Z. Liang, “Auto-
matic generation of data-oriented exploits.” in USENIX Secu-
rity Symposium, 2015, pp. 177–192.
[22] K. Ispoglou, B. Albassam, T. Jaeger, and M. Payer, “Block
oriented programming: Automating data-only attacks,” 2018.
[23] J. Vanegue, “The automated exploitation grand challenge,” in
presented at H2HC Conference, 2013.
[24] ——, “The automated exploitation grand challenge, a ﬁve-year
retrospective,” in IEEE Security & Privacy Langsec Workshop,
2018.
[25] “The gnu c library (glibc),” 2019, online: accessed 26-Feb-
2019. [Online]. Available: https://www.gnu.org/software/libc/
[26] “A memory allocator by doug lea,” 2019, online: accessed
26-Feb-2019. [Online]. Available: http://gee.cs.oswego.edu/dl/
html/malloc.html
[27] P. Argyroudis and C. Karamitas, “Exploiting the jemalloc mem-
ory allocator: Owning ﬁrefox?s heap,” Blackhat USA, 2012.
[28] M. Daniel, J. Honoroff, and C. Miller, “Engineering heap over-
ﬂow exploits with JavaScript,” in Workshop on Offensive Tech-
nologies (WOOT), 2008.
[29] K. Serebryany, D. Bruening, A. Potapenko, and D. Vyukov,
“Addresssanitizer: A fast address sanity checker,” in the 2012
USENIX Annual Technical Conference, 2012, pp. 309–318.
[30] E. Stepanov and K. Serebryany, “Memorysanitizer: fast detec-
tor of uninitialized memory use in c++,” in Code Generation
and Optimization (CGO), 2015 IEEE/ACM International Sym-
posium on.
IEEE, 2015, pp. 46–55.
[31] A. Samsonov and K. Serebryany, “New features in addresssan-
itizer,” 2013.
[32] “Dataﬂowsanitizer,”
DataFlowSanitizerDesign.html, 2018, online:
01-May-2018.
https://clang.llvm.org/docs/
accessed
[33] L. M. de Moura and N. Bjørner, “Z3: An efﬁcient SMT solver,”
in Intl. Conf. on Tools and Algorithms for the Construction
and Analysis of Systems, 2008.
[34] T. Wei, J. Mao, W. Zou, and Y. Chen, “A new algorithm for
identifying loops in decompilation,” in International Static
Analysis Symposium. Springer, 2007, pp. 170–183.
[35] L. Cojocar, T. Kroes, and H. Bos, “Jtr: A binary solution for
switch-case recovery,” in International Symposium on Engi-
neering Secure Software and Systems.
Springer, 2017, pp.
177–195.
[36] C. Cifuentes and M. Van Emmerik, “Recovery of jump ta-
ble case statements from binary code,” Science of Computer
Programming, vol. 40, no. 2-3, pp. 171–188, 2001.
[37] S. Andersen and V. Abella, “Data Execution Prevention:
Changes to Functionality in Microsoft Windows XP Ser-
vice Pack 2, Part 3: Memory Protection Technologies,” http:
//technet.microsoft.com/en-us/library/bb457155.aspx, 2004.
[38] PaX-Team, “PaX ASLR (Address Space Layout Randomiza-
tion),” http://pax.grsecurity.net/docs/aslr.txt, 2003.
[39] “Ctf time,” https://ctftime.org, 2018, online: accessed 01-May-
2018.
[40] “Obfuscator-llvm,” 2019, online: accessed 26-Feb-2019. [On-
line]. Available: https://github.com/obfuscator-llvm/obfuscator
A Proof of Theorem 1
Bezout’s Lemma. A Linear Diophantine Equation:
a1x1 + a2x2 + a3x3 + ... + anxn = d
has an integer solution (x1, x2, . . . , xn), if and only if d is
a multiple of the greatest common divisor gcd(a1, a2, . . . , an).
If there are at least one dig and one ﬁll primitive, the
Linear Diophantine Equation has positive and negative
integers, and it’s as below:
∆d f 1x1 + ...∆d f nxn − ∆dd1y1 − ...∆ddmym + d = 0
where ∆d f 1...∆d f n > 0 and +∆d f i(i = 1,2..n) is the Delta
Distance of each ﬁll primitive, ∆dd1...∆ddm > 0 and -∆ddi is
the Delta Distance of each dig primitive.
(1)
According to the lemma, if gcd(d f 1, d f 2, . . . , d f n,dd1, dd2,
. . . , ddm,) divides d, the Linear Diophantine Equation 1
1 . . . y∗
have an integer solution, let the solution be x∗
m.
1 . . . x∗