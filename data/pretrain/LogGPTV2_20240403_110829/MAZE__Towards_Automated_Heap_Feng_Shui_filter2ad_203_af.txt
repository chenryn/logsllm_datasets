### 97.0% to 50.4%: Impact of Nonlinear Additivity on Success Rates

- **Nature**:
  - 72.1%
  - 55.1%
  - 52.2%
  - 50.4%

- **Reversed**:
  - 27.9%
  - 44.9%
  - 47.8%
  - 49.6%

The success rates for both `ptmalloc` and `dlmalloc` are consistently above 94% across all nonlinear additivity scenarios. The most significant impact of nonlinear additivity is the increase in time cost. Since MAZE cannot derive the heap interaction sequence by solving equations, it must spend more time on half Diophantine equations. Despite this, the average time interval remains below 10 minutes. For more detailed information, please refer to Appendix E.

### 6.5.3 Evaluation of Multi-Object Position Constraint

Table 8 presents the results of the evaluation of multi-object layout constraint solving. We set the noise level to 3 and the (de)allocation primitive number to 3(4), respectively, and generated 100 random heap layouts for each multi-object constraint. We evaluated constraints involving 2 to 5 objects, and the results show that the success rate exceeds 95% for all configurations.

As the number of objects increases, the success rate decreases, and the time interval increases. This is because MAZE has to generate more Diophantine equations to solve the problem. SHRIKE demonstrated that the order of allocation relative to memory corruption direction also affects the success rate. We evaluated this factor as well. The "Nature" column shows the ratio of cases where an earlier allocation takes a lower memory address and a later allocation takes a higher address, while the "Reversed" column shows the opposite. As more object layout constraints are enforced, the "Nature" ratio drops. For 5 object constraints, the "Nature" ratio is 50%, but the success rate remains at 95.6%. Therefore, this factor has a minimal impact on the success rate.

### 7. Discussion of Scalability

#### Dig & Fill Algorithm

Firstly, the scalability of the Dig & Fill algorithm is solely dependent on the adopted heap allocators, regardless of the application. We have evaluated the scalability of Dig & Fill in Section 6.5 with test cases that are more complex than real-world scenarios. The results show that MAZE can solve more than 90% of scenarios within minutes.

Some heap allocators, such as those in V8, use various security mechanisms to complicate memory layout manipulation. For example, the OldSpace and NewSpace mechanisms make it impossible to create memory holes and place noise objects, even for human analysts. These allocators also violate the four rules defined in Section 2.3.2, thus falling outside the scope of MAZE. We plan to address these advanced security mechanisms in future work.

### Figure 7: Influence of Different Numbers of Primitives

To exclude the influence of other factors, we fixed the number of (de)allocation and deallocation primitives to 3(4), the length of the heap operation size list to 1, and the mix of allocation and deallocation to None. For each setting, we generated 200 random test cases.

The results, shown in Figure 6, indicate that the success rate remains between 98% and 100%, indicating that the number of noises does not affect the success rate of Dig & Fill. However, the time cost increases with the number of noises, as they make the heap layout more complex and require more time to solve.

### Influence of Primitive Count

We then evaluated the success rate using different numbers of primitives. In this evaluation, the allocation primitive count ranged from 2 to 7, with the number of deallocation primitives set to 1 and the noise number set to 5. Other configurations remained the same as above.

The results, shown in Figure 7, reveal that the success rate increases with the number of primitives, demonstrating that the diversity of primitives influences the success rate. Even with only two primitives, the success rate reaches 87.7%. Additionally, the time spent by MAZE to solve the problem does not grow with the number of primitives.

### Table 7: Success Rate and Time Interval in Different Nonlinear Additivity Situations

| Target       | pt_malloc         | dl_malloc         |
|--------------|-------------------|-------------------|
| Mix          | 94.7% in 256s     | 97.8% in 327s     |
| Size Diversity | 98.9% in 384s    | 100% in 433s      |
| Mix + Diversity | 99.1% in 357s   | 100% in 446s      |

#### Influence of Nonlinear Additivity

As discussed in Section 5.4.2, to handle nonlinear additive factors, MAZE uses grouping, correcting, and shifting techniques. For complex heap layouts, MAZE can only generate two-variable or half Diophantine equations.

Table 7 shows the success rate and average time interval for primitives without linear additivity. Although MAZE can only generate half Diophantine equations, the success rate remains high.

### Heap Layout Primitive Analysis

Like many other solutions, MAZE can handle interpreters such as PHP, Python, and Perl. Handling programs with inputs that cannot be freely assembled, such as network programs, is challenging. MAZE uses symbolic execution to extract and analyze heap primitives for such programs. However, due to the known limitations of symbolic execution, the current prototype of MAZE has not been evaluated on complex network services. Instead, we evaluated MAZE on CTF applications, which have similar process logic, complex allocators, and compact input format requirements as network services.

Even for complex network services, if their heap layout primitives are provided to MAZE (e.g., by a human), MAZE can still generate the expected memory layout using its Dig & Fill algorithm.

### 8. Conclusion

Few AEG solutions can manipulate heap layouts into an expected state. We proposed MAZE to transform POC samples' heap layouts into expected layouts and automatically generate working exploits when possible. MAZE extends heap layout primitives to reentrant code snippets in event loop-driven applications and efficiently recognizes and analyzes them. It adopts a novel Dig & Fill algorithm to assemble primitives and generate the expected layout by deterministically solving a Linear Diophantine Equation. MAZE is highly efficient and effective compared to existing solutions and supports multi-object constraints and various heap allocators. Beyond heap layout manipulation, AEG faces many other challenges.

### Acknowledgement

This work was supported in part by the Beijing Municipal Science and Technology Project (No. Z181100002718002), the National Natural Science Foundation of China under Grants 61772308, 61972224, and U1736209, and the BNRist Network and Software Security Research Program under Grants BNR2019TD01004 and BNR2019RC01009.

### References

[References listed as in the original text]

### A. Proof of Theorem 1

**Bezoutâ€™s Lemma**: A Linear Diophantine Equation:
\[ a_1x_1 + a_2x_2 + a_3x_3 + \ldots + a_nx_n = d \]
has an integer solution \((x_1, x_2, \ldots, x_n)\) if and only if \(d\) is a multiple of the greatest common divisor \(\gcd(a_1, a_2, \ldots, a_n)\).

If there is at least one dig and one fill primitive, the Linear Diophantine Equation includes positive and negative integers, as follows:
\[ \Delta_{df1}x_1 + \ldots + \Delta_{dfn}x_n - \Delta_{dd1}y_1 - \ldots - \Delta_{ddm}y_m + d = 0 \]
where \(\Delta_{df1}, \ldots, \Delta_{dfn} > 0\) and \(\Delta_{dfi}\) (for \(i = 1, 2, \ldots, n\)) is the Delta Distance of each fill primitive, and \(\Delta_{dd1}, \ldots, \Delta_{ddm} > 0\) and \(-\Delta_{ddi}\) is the Delta Distance of each dig primitive.

According to the lemma, if \(\gcd(\Delta_{df1}, \Delta_{df2}, \ldots, \Delta_{dfn}, \Delta_{dd1}, \Delta_{dd2}, \ldots, \Delta_{ddm})\) divides \(d\), the Linear Diophantine Equation has an integer solution. Let the solution be \(x^*_{1}, \ldots, x^*_{n}, y^*_{1}, \ldots, y^*_{m}\).