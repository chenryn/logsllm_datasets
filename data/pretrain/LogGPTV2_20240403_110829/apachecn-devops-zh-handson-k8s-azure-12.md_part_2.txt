    kube CTL apply-f[https://github . com/jet stack/cert-manager/releases/download/v 1 . 1 . 0/cert-manager . YAML](https://github.com/jetstack/cert-manager/releases/download/v1.1.0/cert-manager.yaml )
3.  Track the deployment status of cert-manager using the following command:
    立方“状态”卷展栏\
    -n 证书管理器部署证书管理器 webhook
    等到铺展显示成功铺开，如图*图 12.16* :
    ![Output verifying the roll-out status of cert-manager](img/B17338_12_16.jpg)
    图 12.16:检查证书管理器的部署状态
4.  Once cert-manager has fully rolled out, you can start the ASO installation. Start by adding the Helm repo for ASO using the following command:
    helm repo add azure serviceoperator \
    [https://raw . githubuser content . com/Azure/Azure-service-operator/master/charts](https://raw.githubusercontent.com/Azure/azure-service-operator/master/charts )
5.  Next, you need to provide configuration values for your ASO installation. Open the **values.yaml** file that is part of the code sample that comes with this chapter using the following command:
    code values.yaml
    在该文件中填写所有必需的值，如下所示:
    1 抗忧郁剂:“
    2 azerublicid:“”
    3 AzureOperatorkeyVault:“”
    4 蓝线:
    5 云环境:AzurePublicCloud
    6 蓝宝石:真
    7 映像:
    8 存放处:mcr.microsoft.com/k8s/azureserviceoperator:0.1.16800
    9 installAadPodIdentity: true
    10 aad-pod-标识:
    11 azureIdentityBinding:
    12 名称:aso-身份绑定
    13 选择器:aso_manager_binding
    14 azureIdentity:
    15 启用:真
    16 姓名:aso-身份
    17 类型:0
    18 resource id:“”
    19 client id:“”
    如前面的代码示例所示，您需要提供租户标识、订阅标识、密钥库名称、托管身份的客户端标识(两次)和托管身份的资源标识。您可以使用以下命令找到租户标识和订阅标识:
    az 帐户显示
    这将返回类似于图 12.17 的输出，其中突出显示了租户标识和订阅标识:
    ![Getting the subscription ID and tenant ID from the output](img/B17338_12_17.jpg)
    图 12.17:获取订阅标识和租户标识
6.  Once you have the values filled in, you can install ASO using the following command:
    helm 升级-安装 aso \
    azureserviceoperator/azure-service-operator \
    -n azure operator-system-create-namespace \
    -f 值. yaml
7.  The installation process takes a couple of minutes. Wait until the following command returns a successful rollout:
    kubectl 部署状态部署\
    -n azure operator-system azure operator-controller-manager
    输出应该类似于*图 12.18* :
    ![Output verifying the status of the deployments for ASO](img/B17338_12_18.jpg)
    图 12.18:检查 ASO 的部署状态
8.  At the time of writing, there was an issue with the **aadpodidbinding** label on the deployment of **azureoperator-controller-manager**. This can, however, be fixed by applying a patch, to apply a new label to that deployment. The patch has been provided in the files for the chapter, specifically in the **patch.yaml** file:
    规格:
    模板:
    元数据:
    标签:
    aadpodidbinding:aso-身份绑定
    如您所见，补丁本身为部署中的 pods 应用了一个新标签。您可以使用以下命令应用修补程序:
    kubectl 补丁部署\
    azure operator-控制器-管理器\
    -n azureoperator-system \
    - patch "$(cat patch.yaml)"
    这将确保您可以在下一节中使用 ASO。
现在 ASO 已经部署在您的集群上，您可以开始使用 Kubernetes 和 ASO 部署 Azure 资源了。您将在下一节中这样做。
## 使用 ASO 为 MySQL 部署 Azure 数据库
在前一节中，您在 Kubernetes 集群上部署了 ASO。这意味着现在您可以使用 Kubernetes API 来部署 Azure 资源。在本节中，您将使用 YAML 文件创建一个在 MySQL 服务的 Azure 数据库上运行的 MySQL 数据库，您将使用**Kubernetes**提交这些文件。让我们开始吧:
1.  First, you need to create a resource group. The code for the resource group definition is also available in the code samples with this chapter. Create this file and save it as **rg.yaml**:
    apiVersion:蓝色。microsoft.com/v1alpha1
    种类:资源组
    元数据:
    名称:aso-resources
    规格:
    地点:
    从资源的代码中可以看到， **apiVersion** 指的是**azure.microsoft.com**而 **kind** 是 **ResourceGroup** 。此外，您还提供了资源组的详细信息，包括名称和位置。确保将**位置**更改为集群的位置。
    您可以使用以下命令创建此资源组:
    库布特雷 create -f rg.yaml
    要监视资源组的创建过程，可以使用以下命令:
    kubectl get resourcegroup -w
    这将返回类似于图 12.19 的输出:
    ![Output confirming the successful creation of a new resource group](img/B17338_12_19.jpg)
    图 12.19:监控新资源组的创建
2.  Let's also verify that the resource group was created in Azure. To do so, look for the resource group name (**aso-resources**, in this example) in the Azure search bar, as shown in *Figure 12.20*:
    ![Searching for the resource group in the Azure search bar](img/B17338_12_20.jpg)
    图 12.20:在 Azure 门户中搜索资源组
    如您所见，资源组在搜索结果中返回，这意味着资源组已成功创建。
3.  Now you can create the MySQL server. You won't create a virtual machine to run MySQL, but rather create a managed MySQL server on Azure. To create this, you can use the **mysql-server.yaml** file that is provided for you:
    1 apiVersion:蓝色。microsoft.com/v1alpha1
    2 类:MySQLServer
    3 元数据:
    4 名称:
    5 规格:
    6 位置:
    7 资源组:aso-资源
    8 服务器版本:“8.0”
    9 安全强制:禁用
    10 创建模式:默认
    11 个 sku:
    12 名称:B_Gen5_1
    13 层:基本
    14 家族:第 5 代
    15 尺寸:“5120”
    16 容量:1
    该文件包含 MySQL 服务器的特定配置。一些因素值得指出:
    *   **第 2 行**:这里定义创建一个 **MySQLServer** 实例。
    *   **第 4 行**:这里给服务器一个名字。该名称必须是全局唯一的，因此请考虑将您的首字母附加到服务器名称上。
    *   **第 6 行**:你将要创建的 MySQL 服务器的位置。确保将**位置**更改为集群的位置。
    *   **第 9 行** : **强制**在本演示中被禁用。这样做是为了让演示更容易理解。如果创建生产集群，强烈建议启用**安全强制**。
    *   **第 11-16 行**:这里定义一下 MySQL 服务器的大小。在这种情况下，您正在创建一台容量为 5 GB 的基本服务器。如果您计划将此用于生产用例，您可能需要更大的服务器。
    您可以使用以下命令创建 MySQL 服务器:
    kubi KL create-f MySQL 伺服器. yaml
    这将需要几分钟来完成。您可以使用以下命令跟踪进度:
    忽必烈得到 mysqlserver -w
    这将返回类似于图 12.21 的输出:
    ![Output confirming the successful creation of a new MySQL server](img/B17338_12_21.jpg)
    图 12.21:监控 MySQL 服务器的创建
    如果您在创建 MySQL 服务器时遇到错误，请参考位于[https://github . com/Azure/Azure-service-operator/blob/master/docs/疑难解答. md](https://github.com/Azure/azure-service-operator/blob/master/docs/troubleshooting.md) 的 ASO 文档。