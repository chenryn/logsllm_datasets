### Error Rates Analysis

The error rates for our selection algorithm are illustrated in Figure 14. Our algorithm demonstrates a high level of accuracy, with the majority of errors being "off by one." Specifically, instead of finding the k-th largest number, the algorithm may return the (k-1)-th or (k+1)-th largest number. The rate of such errors is very low, less than 0.014%. Errors that deviate by more than one position are even rarer.

**Figure 14: Error Rate of the Fast Selection Algorithm**

| Error Distance | Error Rate |
|----------------|------------|
| 1              | 1.4 × 10⁻⁴ |
| 2              |            |
| 3              |            |

**Input Size:**
- 128
- 256
- 512
- 1024
- 2048
- 4096
- 8192
- 16384

### Related Work

Bureaucratic computing highlights the inherent relationship between secure two-party computation and oblivious algorithms. We provide a brief overview of these fields in this section.

#### Secure Two-Party Computation (S2P)

Applications of S2P can be categorized into two main directions:
1. **Generic Solutions Using Yao’s Garbled Circuit:**
   - This approach, popularized by Fairplay [25], allows for the easy construction of Yao’s circuit for specific problems.
   - However, this method is not scalable, as it generates circuits with O(n²) compare-swap gates, each requiring an expensive oblivious-transfer protocol.
   - Examples include compiling the bubblesort algorithm into Yao’s circuit, which results in a large and costly generic circuit for large n.

2. **Specialized S2P Schemes:**
   - These schemes aim to design efficient S2P solutions for specific functions or algorithms [1, 3, 6, 8, 11, 24].
   - They reduce the complexity by invoking simpler secure functions with fewer inputs or by sacrificing partial secret information for efficiency.
   - The concept of "data obliviousness of an algorithm" has not been extensively studied in these works.

Our goal is to determine the fastest algorithm for specific S2P computation problems, such as sorting. The bureaucratic framework ensures that the costly effort of applying the generic garbled circuit is only spent on atomic two-input functions.

#### Data Oblivious Algorithms

The concept of data oblivious algorithms is rooted in Knuth’s book [21]. In [12, 27], authors propose "cache-oblivious" algorithms, which are independent of hardware parameters like cache size and cache-line length. While this work is related, our focus is on data obliviousness.

#### Sorting Networks

Sorting networks are a significant research topic in hardware and parallelization [4]. We examine two popular methods: odd-even merge and bitonic sort. Studies based on [4] have improved the efficiency and simplicity of selection and sorting [7, 22]. Sorting networks are suitable for bureaucratic computing due to their data-oblivious nature.

#### Shellsort and Variants

Shellsort and its variants are widely studied techniques [19, 28]. These variants primarily aim to improve performance. The best-known time complexity for a Shellsort variant is beyond O(n log n) [28]. To our knowledge, our Randomized Shellsort is the first variant to achieve O(n log n) with a provably high probability. It is also designed to be data-oblivious and appropriate for bureaucratic computing.

This paper is arguably the first to propose efficient S2P sorting, selection, and permutation algorithms. Although there is a secure kth-ranked computation method in [1], their setting allows for partial information disclosure, whereas our solution ensures zero-knowledge disclosure.

### Conclusion

We introduce a bureaucratic computing framework for algorithm design in S2P computation and demonstrate its efficiency in S2P sorting, selection, and permutation problems. Our system is reasonably fast and will be open source. Given increasing privacy concerns, we believe that developing efficient algorithms for bureaucratic computing is crucial. This paper makes an important initial step in this direction, and we anticipate the emergence of more efficient algorithms for other S2P problems.

### References

[1] G. Aggarwal, N. Mishra, and B. Pinkas. Secure computation of the kth-ranked element. In Advances in Cryptology-Proc. of Eurocrypt’04, pages 40–55, 2004.

[2] M. Ajtai, J. Komlos, and E. Szemeredi. Sorting in c log n parallel steps. Combinatorica, 3:1–19, 1983.

[3] M. J. Atallah and W. Du. Secure multi-party computational geometry. In WADS2001: 7th International Workshop on Algorithms and Data Structures, pages 165–179, Providence, Rhode Island, USA, August 8-10 2001.

[4] K. E. Batcher. Sorting networks and their applications. In Proceedings of the AFIPS Spring Joint Computer Conference 32, pages 307–314, 1968.

[5] M. Blum, R. W. Floyd, V. Pratt, R. Rivest, and R. Tarjan. Time bounds for selection, 1973.

[6] R. Canetti, Y. Ishai, R. Kumar, M. K. Reiter, R. Rubinfeld, and R. N. Wright. Selective private function evaluation with applications to private statistics (extended abstract). In Proceedings of Twentieth ACM Symposium on Principles of Distributed Computing (PODC), 2001.

[7] G. Chen and H. Shen. A bitonic selection algorithm on multiprocessor system. J. of Comput. Sci. Technol., 4:315–322, 1989.

[8] B. Chor, O. Goldreich, E. Kushilevitz, and M. Sudan. Private information retrieval. In Proceedings of IEEE Symposium on Foundations of Computer Science, Milwaukee, WI USA, October 23-25 1995.

[9] M. Ciura. Best increments for the average case of shellsort. In International Symposium on Fundamentals of Computation Theory, Riga, Latvia, 2001.

[10] T. H. Cormen, C. E. Leiserson, R. L. Rivest, and C. Stein. Introduction to Algorithms, Second Edition. The MIT Press, 2001.

[11] J. Feigenbaum, Y. Ishai, T. Malkin, K. Nissim, M. Strauss, and R. Wright. Secure multiparty computation of approximations. In Twenty Eighth International Colloquium on Automata, Language and Programming, 2001.

[12] M. Frigo, C. E. Leiserson, H. Prokop, and S. Ramachandran. Cache-oblivious algorithms (extended abstract). In In Proc. 40th Annual Symposium on Foundations of Computer Science, pages 285–397. IEEE Computer Society Press, 1999.

[14] O. Goldreich, S. Micali, and A. Wigderson. How to play any mental game. In Proceedings of the 19th Annual ACM Symposium on Theory of Computing, pages 218–229, 1987.

[15] L. J. Goldstein and S. W. Leibholz. On the synthesis of signal switching networks with transient blocking, 1967.

[16] M. T. Goodrich and R. Tamassia. Algorithm Design: Foundations, Analysis, and Internet Examples. Wiley, 2001.

[17] Michael T. Goodrich. Randomized Shellsort: A simple oblivious sorting algorithm. In Proceedings of the ACM-SIAM Symposium on Discrete Algorithms (SODA), pages 1–16. SIAM, 2010.

[18] J. Incerpi. A study of the worst case of shellsort. Ph.D. thesis, Brown University, Dept. of Computer Science, 1994.

[19] J. Incerpi and R. Sedgewick. Practical variations of shellsort. Information Processing Letters, 79:223–227, 2001.

[20] D. E. Knuth. Seminumerical algorithms. The Art of Computer Programming, 2.

[21] D. E. Knuth. Sorting and searching. The Art of Computer Programming, 3.

[22] T. Leighton, Y. Ma, and T. Suel. On probabilistic networks for selection, merging, and sorting. In SPAA’95, pages 106–118, Santa Barbara, CA, USA, 1995.

[23] P. Lemke. The performance of randomized shellsort-like network sorting algorithms. In SCAMP working paper, Institute for Defense Analysis, Princeton, NJ, USA, 1994.

[24] Y. Lindell and B. Pinkas. Privacy preserving data mining. In Advances in Cryptology - Crypto2000, Lecture Notes in Computer Science, volume 1880, 2000.

[25] D. Malkhi, N. Nisan, B. Pinkas, and Y. Sella. Fairplay – a secure two-party computation system. In In USENIX Security Symposium, pages 287–302, 2004.

[26] M. S. Paterson. Improved sorting networks with o(log n) depth. Algorithmica, 5:75–92, 2005.

[27] H. Prokop. Cache-oblivious algorithms. Technical report, M.I.T, 1999.

[28] R. Sedgewick. Analysis of shellsort and related algorithms. In ESA 96: Fourth Annual European Symposium on Algorithms, pages 25–27, 1996.

[29] D. L. Shell. A high-speed sorting procedure. Commun. ACM, 2(7):30–32, 1959.

[30] A. C. Yao. How to generate and exchange secrets. In Proceedings 27th IEEE Symposium on Foundations of Computer Science, pages 162–167, 1986.

### Appendix

#### Proof of Theorem 2

Here is the proof for Theorem 2, the time complexity of Randomized Shellsort.

**Proof:**

In every round, we have six passes. When the offset equals f, the number of compare-swap operations each pass takes is given by:

- \((\frac{n}{f} - 1)f\)
- \((\frac{n}{f} - 3)f\)
- \((\frac{n}{f} - 2)f\)
- \((\frac{n}{2f} - 1)f\)

Note that the third, fourth, and sixth inner loops do not run in the first round. The total number of compare-swaps is:

\[ T(n) = \sum_{i=1}^{\log n} \left( (\frac{n}{f_i} - 1)f_i + (\frac{n}{f_i} - 3)f_i + (\frac{n}{f_i} - 2)f_i + (\frac{n}{2f_i} - 1)f_i \right) \]

Since we use a geometric sequence for the offset, \( f_i = \frac{n}{2^i} \), we have:

\[ T(n) = 5n \log n - \frac{15}{2}n + 8 \]

This concludes the proof.

#### Proof of Theorem 3

We now prove the time complexity of the Fast selection algorithm.

**Proof:**

Similar to the proof above, we list the number of compare-swaps each inner loop takes. When the offset is f, they are:

- \(\lfloor \frac{k}{f} \rfloor f\)
- \(\lceil \frac{n-k-f}{f} \rceil f\)
- \(\lfloor \frac{n-k}{f} \rfloor f\)
- \(f\)

The summation of them gives the expression of \( T_{n,k} \):

\[ T_{n,k} = \sum_{i=0}^{\lfloor \log k \rfloor} \left( \lfloor \frac{k}{f_i} \rfloor f_i + \lceil \frac{n-k}{f_i} \rceil f_i + \lfloor \frac{n-k-f_i}{f_i} \rfloor f_i + f_i \right) + n \]

Since \( f_i = \frac{k}{2^i} \), we have:

\[ T_{n,k} \leq \sum_{i=0}^{\lfloor \log k \rfloor} \left( \frac{k}{f_i} f_i + \left( \frac{n-k}{f_i} + 1 \right) f_i + \frac{n-k-f_i}{f_i} f_i + f_i \right) + n \]
\[ = \sum_{i=0}^{\lfloor \log k \rfloor} \left( 2n - k + f_i \right) + n \]
\[ \leq (2n - k) \log k + 3n + k - 2 \]

We can derive the lower bound in a similar manner.

#### Related Algorithms

##### Odd-Even Mergesort

**Input:** An n-element array A to be sorted  
**Output:** The sorted array A

```plaintext
if n > 1 then
    Odd-Even Mergesort(A[0:n/2])
    Odd-Even Mergesort(A[n/2:n])
    Odd-Even Merge(A)
end
```

**Procedure Odd-Even Merge(a):**

```plaintext
if n > 2 then
    Odd-Even Merge(a[0, 2, ..., n-2])
    Odd-Even Merge(a[1, 3, ..., n-1])
    CompareSwap(a, i, i+1) for all i in {1, 3, 5, ..., n-3}
else
    CompareSwap(a, 0, 1)
```

##### Bitonic Sort

**Input:** An n-element array A to be sorted, start, end, direction  
**Output:** The sorted array A[start...end]

```plaintext
n = end - start
if n > 1 then
    m = n / 2
    Bitonic Sort(A[start:start+m], ASCENDING)
    Bitonic Sort(A[start+m:end], DESCENDING)
    Bitonic Merge(A[start:end], direction)
end
```

**Procedure Bitonic Merge(a, low, a.length, direction):**

```plaintext
n = a.length
if n > 1 then
    m = n / 2
    for i from low to low + m - 1
        CompareSwap(a, i, i + m, direction)
    Bitonic Merge(a, low, m, direction)
    Bitonic Merge(a, low + m, m, direction)
end
```

**Figures:**

- **Figure 15:** Odd-Even Mergesort Algorithm
- **Figure 16:** Bitonic Sort Algorithm