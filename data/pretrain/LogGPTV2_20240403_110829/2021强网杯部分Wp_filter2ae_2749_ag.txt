        ia()
        c()
    #--------------------------main-----------------------------    if __name__ == '__main__':
        if LOCAL:
            elf = ELF(elf_path)
            if LIBC:
                libc = ELF(libc_path)
            #io = elf.process()
            io = process(elf_path, env = {'LD_PREALOAD': libc_path})
        else:
            elf = ELF(elf_path)
            io = remote(host.split(':')[0], int(host.split(':')[1]))
            if LIBC:
                libc = ELF(libc_path)
        exploit()
        finish()
## Misc
###  BlueTeaming
看文件头是7z,解压后得到memory,看题目要找关于powershell的脚本的注册表key,windows下应该是HKEY
如下图:
尝试用HxD搜索关键词powershell,HKEY,发现还真有….
尝试一下确实是这个….但真的吐槽一下,没有格式确实难找…..上午就看到了,晚上才想起来试
###  CipherMan
取证题,一个secret,用diskgenius挂载了一下发现有密码
用打蓝帽申请的取证大师看了一下memory:
(由于没有有效文件名,这时候我们可以规定为raw,这样就能用取证大师打开)
搜索bek文件,并没有
在desktop中发现:
和这个对比了一下,应该是密钥,但是打开是乱码,到现在我也不知道怎么解决这个问题….这条路没走通,于是想着猜一下不太合理的字符串,比如bitlocker对应的序列号.
将文件按照访问时间排序,一个一个看:
    Wow, you have a great ability. How did you solve this? Are you a hacker? Please give me a lesson later.
算是非预期把….试出来的…..flag长这样我也没想到…
###  ExtremelySlow
由pcapng可以导出一个pyc:
尝试在线反编译,发现有部分不能显示,让re手看了一下,
得到:
    Instruction context:
     L.  56       262  LOAD_NAME                print
                     264  LOAD_NAME                e
                     266  LOAD_METHOD              decode
                     268  CALL_METHOD_0         0  ''
                     270  CALL_FUNCTION_1       1  ''
                     272  POP_TOP          
    ->               274  LOAD_CONST               None
    # file latest.pyc
    # --- This code section failed: ---    
     L.   3         0  LOAD_CONST               0
                    2  LOAD_CONST               None
                    4  IMPORT_NAME              sys
                    6  STORE_NAME               sys
     L.   4         8  LOAD_CONST               0
                   10  LOAD_CONST               ('sha256',)
                   12  IMPORT_NAME              hashlib
                   14  IMPORT_FROM              sha256
                   16  STORE_NAME               sha256
                   18  POP_TOP          
     L.   6        20  LOAD_CODE                
                   22  LOAD_STR                 'KSA'
                   24  MAKE_FUNCTION_0          'Neither defaults, keyword-only args, annotations, nor closures'
                   26  STORE_NAME               KSA
     L.  16        28  LOAD_CODE                
                   30  LOAD_STR                 'PRGA'
                   32  MAKE_FUNCTION_0          'Neither defaults, keyword-only args, annotations, nor closures'
                   34  STORE_NAME               PRGA
     L.  26        36  LOAD_CODE                
                   38  LOAD_STR                 'RC4'
                   40  MAKE_FUNCTION_0          'Neither defaults, keyword-only args, annotations, nor closures'
                   42  STORE_NAME               RC4
     L.  30        44  LOAD_CODE                
                   46  LOAD_STR                 'xor'
                   48  MAKE_FUNCTION_0          'Neither defaults, keyword-only args, annotations, nor closures'
                   50  STORE_NAME               xor
     L.  33        52  LOAD_NAME                __name__
                   54  LOAD_STR                 '__main__'
                   56  COMPARE_OP               ==
                   58  POP_JUMP_IF_FALSE   139  'to 139'
     L.  34        60  LOAD_CONST               b'\xf6\xef\x10H\xa9\x0f\x9f\xb5\x80\xc1xd\xae\xd3\x03\xb2\x84\xc2\xb4\x0e\xc8\xf3>'
                  112  LOAD_STR                 ''
                  114  MAKE_FUNCTION_0          'Neither defaults, keyword-only args, annotations, nor closures'
                  116  LOAD_NAME                n
                  118  GET_ITER         
                  120  CALL_FUNCTION_1       1  ''
                  122  INPLACE_OR       
                  124  STORE_NAME               m
     L.  45       126  LOAD_NAME                m
                  128  LOAD_GENEXPR             '>'
                  130  LOAD_STR                 ''
                  132  MAKE_FUNCTION_0          'Neither defaults, keyword-only args, annotations, nor closures'
                  134  LOAD_NAME                b
                  136  GET_ITER         
                  138  CALL_FUNCTION_1       1  ''
                  140  INPLACE_OR       
                  142  STORE_NAME               m
     L.  47       144  LOAD_NAME                RC4
                  146  LOAD_NAME                list
                  148  LOAD_NAME                map
                  150  LOAD_LAMBDA              '>'
                  152  LOAD_STR                 ''
                  154  MAKE_FUNCTION_0          'Neither defaults, keyword-only args, annotations, nor closures'
                  156  LOAD_NAME                sorted
                  158  LOAD_NAME                m
                  160  LOAD_METHOD              items
                  162  CALL_METHOD_0         0  ''
                  164  CALL_FUNCTION_1       1  ''
                  166  CALL_FUNCTION_2       2  ''
                  168  CALL_FUNCTION_1       1  ''
                  170  CALL_FUNCTION_1       1  ''
                  172  STORE_NAME               stream
     L.  48       174  LOAD_NAME                print
                  176  LOAD_NAME                xor
                  178  LOAD_NAME                w
                  180  LOAD_NAME                stream
                  182  CALL_FUNCTION_2       2  ''
                  184  LOAD_METHOD              decode
                  186  CALL_METHOD_0         0  ''
                  188  CALL_FUNCTION_1       1  ''
                  190  POP_TOP          
     L.  49       192  LOAD_NAME                sys
                  194  LOAD_ATTR                stdin
                  196  LOAD_ATTR                buffer
                  198  LOAD_METHOD              read
                  200  CALL_METHOD_0         0  ''
                  202  STORE_NAME               p
     L.  50       204  LOAD_NAME                xor
                  206  LOAD_NAME                e
                  208  LOAD_NAME                stream
                  210  CALL_FUNCTION_2       2  ''
                  212  STORE_NAME               e
     L.  52       214  LOAD_NAME                xor
                  216  LOAD_NAME                p
                  218  LOAD_NAME                stream
                  220  CALL_FUNCTION_2       2  ''
                  222  STORE_NAME               c
     L.  53       224  LOAD_NAME                sha256
                  226  LOAD_NAME                c
                  228  CALL_FUNCTION_1       1  ''
                  230  LOAD_METHOD              digest
                  232  CALL_METHOD_0         0  ''
                  234  LOAD_NAME                s
                  236  COMPARE_OP               ==
                  238  POP_JUMP_IF_FALSE   131  'to 131'
     L.  54       240  LOAD_NAME                print
                  242  LOAD_NAME                xor
                  244  LOAD_NAME                t
                  246  LOAD_NAME                stream
                  248  CALL_FUNCTION_2       2  ''
                  250  LOAD_METHOD              decode
                  252  CALL_METHOD_0         0  ''
                  254  CALL_FUNCTION_1       1  ''
                  256  POP_TOP          
                  258  LOAD_CONST               None
                  260  RETURN_VALUE     
     L.  56       262  LOAD_NAME                print
                  264  LOAD_NAME                e
                  266  LOAD_METHOD              decode
                  268  CALL_METHOD_0         0  ''
                  270  CALL_FUNCTION_1       1  ''
                  272  POP_TOP          
                  274  LOAD_CONST               None
                  276  RETURN_VALUE
应该是和RC4相关
根据这个写出脚本:
    from hashlib import sha256
    def KSA(key):
        keylength = len(key)
        S = list(range(256))
        j = 0
        for i in range(256):
            j = (j+S[i]+key[i%keylength])%256
            S[i], S[j] = S[j], S[i]
        return S
    def PRGA(S):
        i = j = 0
        while True:
            i = (i + 1) % 256
            j = (j + S[i]) % 256
            S[i], S[j] = S[j], S[i]
            K = S[(S[i]+S[j])%256]
            yield K
    def RC4(key):
        S = KSA(key)
        return PRGA(S)
    def xor(p, stream):
        return bytes(map((lambda x : x ^ stream.__next__()), p))
    if __name__ == '__main__':
        w = b'\xf6\xef\x10H\xa9\x0f\x9f\xb5\x80\xc1xd\xae\xd3\x03\xb2\x84\xc2\xb4\x0e\xc8\xf3H',i[4:])[0]
        offset = begin+n*0x800
        print(bin[offset:offset+1].decode('UTF-8'),end='')
    #!Sdk*t eiW!BJ9$QpR. pIk{V#t:NE;J8M{Qi>W%|1vw5rGyMWX_mY,htG1KLE`pNNMYd?U\SF'Vxo {1)xT_'3FoRIP~O`&!K'ZAKM8G%UT{oN41|4P42S~6*g2KJ}o,8j/]&FimP0V2c::+{#;Bj@Cd\w9ioA&is#g#6!_9SI4Xx6rKoN ZhzD##,4!/bbB(v/Q(6ez{bKoH'-B'*hg5xq$n0xz 0v9wfbGs|[K-ana]D!+*\+`abDa7w16BySRx-#D/-a1O55Q`Fbgn`n;YI9[M't@v%}Iz0fmVl#ls+aI\: 6?|VvGHD~Q0O4{-.siztGve HL7,*oJ&wL*}.7pRx"t1vzM):FL3r@:-C1
输出复制搜索找到flag