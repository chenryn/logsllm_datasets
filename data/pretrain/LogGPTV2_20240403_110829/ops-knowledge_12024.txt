User: As I understand it (please do correct misunderstandings, obviously), the mentioned projects/technologies are as follows:-
Crossover.io - A router for WAMP. Cross-language.
WAMP - An async message passing protocol, supporting (among other things) Pub/Sub and RPC. Cross-language.
twisted - An asynchronous loop, primarily used for networking (low-level). Python specific. As far as I can tell, current crossover.io implementation in python is built on top of twisted.
klein - Built on top of twisted, emulating flask but asynchronously (and without the plugins which make flask easier to use). Python specific.
django/flask/bottle - Various stacks/solutions for serving web content. All are synchronous because they implement the WSGI. Python specific.
How do they interact? I can see, for example, how twisted could be used for network connections between various python apps, and WAMP between apps of any language (crossover.io being an option for routing).
For networking though, some form of HTTP/browser based connection is normally needed, and that's where in Python django and alternatives have historically been used. Yet I can't seem to find much in terms of interaction between them and crossover/twisted.
To be clear, there's things like crochet (and klein), but none of these seem to solve what I would assume to be a basic problem, that of saying 'I'd like to have a reactive user interface to some underlying python code'. Or another basic problem of 'I'd like to have my python code update a webpage as it's currently being viewed'.
Traditionally I guess its handled with AJAX and similar on the webpage served by django et. al., but that seems much less scalable on limited hardware than an asynchronous approach (which is totally doable in python because of twisted and tornado et. al.).
Summary
Is there a 'natural' interaction between underlying components like WAMP/twisted and django/flask/bottle? If so, how does it work.
Assistant: With a Web app using WAMP, you have two separate mechanisms: Serving the Web assets and the Web app then communicating with the backend (or other WAMP components). 
You can use Django, Flask or any other web framework for serving the assets - or the static Web server integrated into Crossbar.io.
The JavaScript you deliver as part of the assets then connects to Crossbar.io (or another WAMP router), as do the backend or other components. This is then used to e.g. send data to display to the Web frontend or to transmit user input.