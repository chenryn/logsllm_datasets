### 1. Introduction

Initially, the dataset contains 45 network attributes as features. Since the deployment of intrusion detection at the network layer requires less space, it is necessary to implement a feature reduction technique. Using a correlation-based attribute evaluator along with a greedy hill-climbing search method, the number of attributes was reduced from 45 to 6. The reduced features are:
- `pkseqid` (Row identifier)
- `stime` (Record Start Time)
- `dport` (Destination port number)
- `state_number` (Numerical representation of feature state)
- `ltime` (Record last time)
- `TnP_PerProto` (Total number of packets per protocol)

Among these, `stime`, `state_number`, and `ltime` are common features, while the remaining three are new and not part of the previously extracted 10 features.

### 2. Data Preprocessing

After reducing the feature set, the instances of network traffic were normalized using the Min-Max normalization technique to facilitate the classification process. The Min-Max normalization formula is given by:

\[
N' = \frac{N - \text{min}}{\text{max} - \text{min}} \times (\text{max}' - \text{min}') + \text{min}'
\]

where `max` and `min` are the initial maximum and minimum values, and `max'` and `min'` are the newly calculated instance values. This transformation scales all values in the dataset to the range [0, 1].

### 3. Classification Phase

In this phase, three well-known machine learning classifiers (Support Vector Machine, Decision Tree (J48), and Naive Bayes) and one deep learning model (Deep Neural Network) were used for intrusion detection. The efficiency of these algorithms was tested in three different ways:
1. **Binary Classification**: Classifying all instances into normal or attack.
2. **Multiclass Classification (Category-wise)**: Classifying all instances into DDoS, DoS, Theft, Reconnaissance, and Normal.
3. **Multiclass Classification (Subcategory-wise)**: Classifying all instances into DDoS TCP, DDoS UDP, DDoS HTTP, DoS HTTP, DoS UDP, DoS TCP, OS Fingerprint, Service Scan, Data Exfiltration, Keylogging, and Normal.

The best classifier was chosen based on its performance on the IoT network data.

### 4. Results and Discussion

The proposed model was implemented on a Core i3 laptop with a 2.30 GHz CPU and 4 GB RAM using RStudio version 3.5.1. The original dataset, containing 2 million records, was split into five bins for easy accessibility. The combined dataset was then balanced using the ROSE (Random Over-Sampling Examples) package in R, which performs both under-sampling and over-sampling simultaneously. After sampling, six features were extracted from the balanced dataset for classification.

#### 4.1 Evaluation Metrics

The performance of the classifiers was evaluated using the following metrics:
- **True Positive (TP)**: Correctly predicted attack instances.
- **True Negative (TN)**: Correctly predicted normal instances.
- **False Positive (FP)**: Normal behavior incorrectly detected as an attack.
- **False Negative (FN)**: Attack behavior incorrectly detected as normal.

**Accuracy**:
\[
\text{Accuracy} = \frac{TP + TN}{TP + TN + FP + FN}
\]

**Precision**:
\[
\text{Precision} = \frac{TP}{TP + FP}
\]

**Recall (Detection Rate)**:
\[
\text{Recall} = \frac{TP}{TP + FN}
\]

**F-Measure**:
\[
\text{F-Measure} = 2 \times \frac{\text{Precision} \times \text{Recall}}{\text{Precision} + \text{Recall}}
\]

**Response Time**: Total time taken by the classifier to build the model accurately.

**Error Rate**:
\[
\text{Error Rate} = \frac{FP + FN}{TP + TN + FP + FN}
\]

**False Alarm Rate**:
\[
\text{False Alarm Rate} = \frac{FP}{TN + FP}
\]

Table 3 illustrates the quality metrics of the classifiers for the three types of classification. The analysis shows that the Decision Tree (J48) outperforms SVM and Naive Bayes in terms of accuracy, response time, and false alarm rate. Naive Bayes and SVM performed similarly. While using full features, high accuracy was achieved, but the false alarm rate and response time were higher, indicating that the minority class (normal) was not well-detected due to class imbalance. With 10 features, only the Decision Tree performed well, but with 6 reduced features, all three classifiers performed well. The response time for SVM was significantly higher than for the other two classifiers. The false alarm rate for 10 features ranged from 0 to 0.006, while the reduced features produced a false alarm rate from 0 to 0.001. Thus, 6 effective features can achieve low false alarm rates for the three classifiers.

The error rate, calculated from Fig. 2, was lower compared to previous work [13], achieved by using sampling techniques to overcome class imbalance. This enhanced the detection rate of the minority class (normal traffic) in the BoTIoT dataset. The class imbalance problem, which often misclassifies normal traffic as malicious, was effectively addressed using sampling techniques. Feature extraction was performed after sampling, resulting in a minimal number of features.

### 5. Comparative Analysis

Table 4 describes the performance of the deep neural network in terms of accuracy, precision, recall, and F1-measure. The results show that traditional machine learning techniques become overfit models due to sampling, but this issue is mitigated by using deep learning. Table 5 provides additional metrics for evaluating multiclass classification.

### 6. Conclusion

In this work, the class imbalance problem in the real-time IoT device dataset (BoTIoT) was identified and rectified using sampling techniques. The effectiveness of the balanced dataset was tested using three major machine learning classifiers and a deep neural network. The results demonstrate that the proposed solution achieves high accuracy and low error rates, making it reliable for the IoT environment.