**作者：Muoziiy@天玄安全实验室**  
**原文链接：**
## 前言
在野利用的CVE-2021-31956样本，利用过程中使用了WNF来获取任意地址读写原语，但由于我对WNF不熟悉，所以暂时没有看WNF这块的内容。那么最终我是通过Scoop
the Windows 10
pool这篇文章中的思路实现了CVE-2021-31956的利用，利用过程基本和这篇文章一致，区别可能就是申请漏洞块并实现溢出那里需要自行研究一下。由于众所周知的原因，这里不对CVE-2021-31956进行分析，而是对这篇文章进行翻译并对其中的demo进行了分析和复现。
由于本人对内核这块的研究时间不长，对Windows内部机制的理解也不够深入，且英文水平有限，所以翻译和复现的过程中，难免会出现一些错误和理解不到位的地方，如果你发现了任何问题，请与作者联系。
原文及DEMO地址：
## 摘要
堆溢出是应用程序中相当常见的漏洞。利用这些漏洞通常需要对堆的底层管理机制非常了解。Windows10最近改变了内核中堆的管理方式，本文旨在介绍Windows
NT内核堆管理机制的最新发展，同时介绍对内核池的新的利用技术。
## 1 介绍
池是Windows系统为内核层保留的堆空间。多年来，池内存的分配一直非常具体，且与用户层的分配是不同的。自2019年3月，Windows
10更新了19H1以来，这一切都改变了。在用户层众所周知，且已经文档化的段堆被引入内核。
但是，内核层实现的分配器和用户层实现的分配器仍然存在一些不同，因为内核层仍然需要一些特定的材料。本文从利用的角度出发，重点讨论内核段堆自定义内部结构。
文章中介绍的研究内容是针对x64架构的，对于不同的架构需要进行哪些调整尚未研究。
在简单的介绍了池内部结构的历史之后，本文将说明段堆在内核中是如何实现的，以及对内核池特定材料有什么影响。然后，本文将介绍一种利用内核池中堆溢出漏洞对池内部进行攻击的新技术。最后，将介绍一种通用的利用手法，它使用了最小的受控堆溢出，并允许本地特权从低完整性级别升级到SYSTEM。
### 1.1 池内部
本文不会深入讨论池分配器的内部结构，因为这个主题已经被广泛地讨论过了 [5]，但是为了全面理解这篇文章，还是需要快速地回顾一下一些内部结构。
本节将介绍 Windows 7
中的一些池内部结构，以及过去几年中对池进行的各种缓解和更改。这里说明的内部结构将聚焦在适合单个页面的块上，这是内核中最常见的分配。大于0xFE0的分配行为不在今天的讨论范围内。
**在池中分配内存**
Windows内核中，分配和释放池内存的主要函数分别是ExAllocatePoolWithTag和ExFreePoolWithTag。
    void * ExAllocatePoolWithTag (
        POOL_TYPE PoolType ,
        size_t NumberOfBytes ,
        unsigned int Tag
    );
    void ExFreePoolWithTag (
        void * P, 
        unsigned int Tag
    );
PoolType是一个位域，与下面列举的值关联
    NonPagedPool = 0
    PagedPool = 1
    NonPagedPoolMustSucceed = 2
    DontUseThisType = 3
    NonPagedPoolCacheAligned = 4
    PagedPoolCacheAligned = 5
    NonPagedPoolCacheAlignedMustSucceed = 6
    MaxPoolType = 7
    PoolQuota = 8
    NonPagedPoolSession = 20h
    PagedPoolSession = 21h
    NonPagedPoolMustSucceedSession = 22h
    DontUseThisTypeSession = 23h
    NonPagedPoolCacheAlignedSession = 24h
    PagedPoolCacheAlignedSession = 25h
    NonPagedPoolCacheAlignedMustSSession = 26h
    NonPagedPoolNx = 200h
    NonPagedPoolNxCacheAligned = 204h
    NonPagedPoolSessionNx = 220h
PoolType中可以存储若干信息：
  * 使用的内存类型，可以是NonPagedPool、PagedPool、SessionPool或NonPagedPoolNx；
  * 如果分配是关键的（bit 1）并且必须成功。那么当分配失败，就会触发BugCheck；
  * 如果分配与缓存大小对齐（bit 2）
  * 如果分配使用了PoolQuota机制(bit 3)
  * 其他未文档化的机制
使用的内存类型很重要，因为它隔离了不同内存范围中的分配。使用的两种主要内存类型是PagedPool和NonPagedPool。MSDN文档将其描述如下：
`非分页池（NonpagedPool）是不可分页的系统内存，它可以从任何IRQL访问，但非分页内存是一种稀缺资源，驱动程序应当在必须使用时才去分配非分页内存。分页池（Paged）是可分页的系统内存，只能在IRQLprocess_billed );
    if ( process_ptr )
    {
        if (process_ptr Header.Type & 0x7F) != 3 )
        KeBugCheckEx ([...])
        [...]
    }
在不知道块的地址和ExpPoolQuotaCookie的情况下，不可能提供一个有效的指针，也就无法实现任意指针解引用。但是，仍然可以通过重写一个正确的POOL_HEADER，且不在PoolType设置PoolQuota标志来实现完整数据攻击。更多关于Quota
Process Pointer Overwrite Attack（配额进程指针覆盖攻击）的信息，已经在Nuit du Hack XV会议上进行了讨论[1]。
**NonPagedPoolNx** 在Windows
8中，引入了一种新的池内存类型NonPagedPoolNx。它的工作原理与NonPagedPool完全相同，只是内存页不在是可执行的，从而缓解了所有利用这种内存来存储shellcode的攻击。
以前使用NonPagedPool完成的分配，现在改用NonPagedPoolNx来实现，但出于与第三方驱动兼容的目的，保留了NonPagedPool类型。即使在今天的Windows
10中，仍然有大量的第三方驱动在使用可执行的NonPagedPool。
随着时间的推移，各种缓解措施的引入使得利用堆溢出攻击POOL_HEADER不再有趣。现如今，写一个正确的POOL_HEADER并攻击下一个块的数据实现起来更加简单。然而，池中段堆（Segment
Heap）的引入改变了POOL_HEADER的使用方式，本文展示了如何在内核池中再次利用堆溢出实现攻击。
## 2 带有段堆（Segment Heap）的池分配器
### 2.1 段堆内部
自Windows 10
19H1开始，段堆被用于内核层，与用户层使用的段堆非常相似。本节旨在介绍段堆的主要功能并关注与用户层使用的不同之处。用户层段堆内部结构的详细说明在[7]中提供。
就像在用户层使用的一样，段堆旨在根据分配大小的不同提供不同的功能。为此，定义了4个所谓的后端。
    Low Fragmentation Heap(abbr LFH):RtlHpLfhContextAllocate
    Variable Size(abbr VS):RtlHpVsContextAllocateInternal
    Segment Alloc(abbr Seg):RtlHpSegAlloc
    Large Alloc: RtlHpLargeAlloc
请求分配的大小和选择的后端之间的映射如图2所示
图2. 分配大小和后端之间的映射
前三个后端，Seg，VS，LFH，分别与上下文相关联：_HEAP_SEG_CONTEXT， _HEAP_VS_CONTEXT
和_HEAP_LFH_CONTEXT。后端上下文存储在_SEGMENT_HEAP结构中。
    1: kd > dt nt!_SEGMENT_HEAP
    +0 x000 EnvHandle : RTL_HP_ENV_HANDLE
    +0 x010 Signature : Uint4B
    +0 x014 GlobalFlags : Uint4B
    +0 x018 Interceptor : Uint4B
    +0 x01c ProcessHeapListIndex : Uint2B
    +0 x01e AllocatedFromMetadata : Pos 0, 1 Bit
    +0 x020 CommitLimitData : _RTL_HEAP_MEMORY_LIMIT_DATA
    +0 x020 ReservedMustBeZero1 : Uint8B
    +0 x028 UserContext : Ptr64 Void
    +0 x030 ReservedMustBeZero2 : Uint8B
    +0 x038 Spare : Ptr64 Void
    +0 x040 LargeMetadataLock : Uint8B
    +0 x048 LargeAllocMetadata : _RTL_RB_TREE
    +0 x058 LargeReservedPages : Uint8B
    +0 x060 LargeCommittedPages : Uint8B
    +0 x068 StackTraceInitVar : _RTL_RUN_ONCE
    +0 x080 MemStats : _HEAP_RUNTIME_MEMORY_STATS
    +0 x0d8 GlobalLockCount : Uint2B
    +0 x0dc GlobalLockOwner : Uint4B
    +0 x0e0 ContextExtendLock : Uint8B
    +0 x0e8 AllocatedBase : Ptr64 UChar
    +0 x0f0 UncommittedBase : Ptr64 UChar
    +0 x0f8 ReservedLimit : Ptr64 UChar
    +0 x100 SegContexts : [2] _HEAP_SEG_CONTEXT
    +0 x280 VsContext : _HEAP_VS_CONTEXT
    +0 x340 LfhContext : _HEAP_LFH_CONTEXT
存在5个_SEGMENT_HEAP结构，对应不同的_POOL_TYPE值。
    NonPaged pools（bit 0 unset）
    NonPagedNx pool（bit 0 unset and bit 9 set）