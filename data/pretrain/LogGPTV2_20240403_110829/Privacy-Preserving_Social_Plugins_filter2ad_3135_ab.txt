anonymous communication network [38], and ensuring
that their browser has a non-unique ﬁngerprint [39].
When viewed in conjunction, the two requirements
seem contradicting. Content personalization presumes
knowledge of the person for whom the content will be
personalized. Nevertheless, the approach we propose
satisﬁes both requirements, and enables a social plugin
instance to render personalized content without reveal-
ing any user-identifying information to the SNS.
3.2 Overall Approach
Social plugins present the user with two different types
of content: private information, such as the names and
pictures of friends who like a page, and public informa-
tion, such as the total number of “likes.” The main idea
behind our approach is to maintain a local copy of all
private information that can possibly be needed for ren-
dering any personalized content for a particular user, and
query the social networking service only for public infor-
mation that can be requested anonymously.
This approach satisﬁes our ﬁrst requirement, since all
the required private information for synthesizing and pre-
senting personalized content is still available to the social
plugin locally, while any missing public information can
be fetched on demand. User interaction is not hindered
in any way, as user actions are handled in the same way
as in existing social plugins. Our second requirement
is also accomplished, because all communication of a
privacy-preserving social plugin with the SNS for load-
ing its content does not include any user-identifying in-
formation. Only public information about the page might
be requested, which can be retrieved anonymously.
The whole process is coordinated by the Social Plugin
Agent, which runs in the context of the browser and has
three main tasks: i) upon ﬁrst run, gathers all private data
that might be needed through the user’s proﬁle and social
circle, and stores it in a local DataStore, ii) periodically,
synchronizes the DataStore with the information avail-
able online by adding or deleting any new or stale entries,
and iii) whenever a social plugin is encountered, synthe-
sizes and presents the appropriate content by combining
private, personalized information from the local Data-
Store and public, non-personalized information through
the SNS. Maintaining a local copy of the user’s social in-
formation is a continuous process, and takes place trans-
parently in the background. Once all necessary informa-
tion has been mirrored during the bootstrapping phase,
the DataStore is kept up to date periodically.
Going back to the example of the Like button, the
private information that must be stored locally for its
privacy-preserving version should sufﬁce for properly
rendering any possible instance of its personalized con-
tent for any third-party page the user might encounter. This
can be achieved by storing locally all the “likes” that all
of the user’s friends have ever made, as well as the names
and thumbnail pictures of the user’s friends. Note that
all the above information is available through the proﬁle
history of the user’s friends, which is always accessible
while the user is logged in.
Although keeping all this state locally might seem
daunting at ﬁrst, as we demonstrate in Sec. 5.2, the re-
quired space for storing all the necessary private infor-
mation for privacy-preserving versions of all Facebook’s
existing social plugins is just 5.4MB for the typical case
of a user with 190 friends, and 145MB for an extreme
case of a user with 5,000 friends. No information that is
not accessible under the user’s credentials is ever needed,
and daily synchronization typically requires the trans-
mission of a few kilobytes of data.
Continuing with the Like button as an example, Fig. 3
illustrates the process of rendering its privacy-preserving
version. Upon visiting a third-party page, the Social Plu-
gin Agent requests from the SNS the total number of
“likes” for that particular page, without providing any
user-identifying information (step 3). In parallel, it looks
up the URL of the page in the DataStore and retrieves the
names and pictures of the friends that have liked the page
(if any). Once the total number of “likes” arrives (step 4),
it is combined with the local information and the uniﬁed
personalized content is presented to the user (5).
Figure 3: The loading phase of privacy-preserving so-
cial plugins. When a social plugin is encountered (1), the
Social Plugin Agent intervenes between the plugin and
the SNS (2). The agent requests (3) and receives (4) only
publicly accessible content, e.g., the page’s total number
of “likes,” without revealing any user-identifying infor-
mation to the SNS. The agent then combines this data
with personalized information that is maintained locally,
and presents the uniﬁed content to the user (5).
Further optimizations are possible for avoiding query-
ing for non-personalized content at load time. Depend-
ing on the plugin and the kind of information it pro-
vides, public information for frequently visited pages can
be cached, while public information for highly popu-
lar pages can be prefetched. For example, information
such as the total number of “likes” for a page that a user
visits several times a day can be updated only once per
day without introducing a signiﬁcant inconsistency, al-
lowing the Social Plugin Agent to occasionally serve the
Like button using solely local information. Similarly, the
SNS can regularly push to the agent the total number of
“likes” for the top 10K most “liked” pages. In both cases,
the elimination of any network communication on every
cache hit not only reduces the rendering time, but also
protects the user’s browsing pattern even further.
4 Implementation
To explore the feasibility of our approach we have imple-
mented SafeButton, an add-on for Firefox (version 7.0.1)
that provides privacy-preserving versions of existing so-
cial plugins. SafeButton is written in JavaScript and
XUL [23], and relies on the XPCOM interfaces of Fire-
fox to interact with the internals of the browser. Figure 4
Figure 4: Overall architecture of SafeButton. A Request Handler (1) intercepts the HTTP requests of social plugins.
Privacy-preserving implementations of the supported plugins (2) combine public remote data (3b), which can be
cached in the X-Cache for improving network performance (3a), and private data from the user’s social circle, which
are maintained locally in the DataStore (4), and deliver the same personalized content (5) as the original plugins.
provides an overview of SafeButton’s main components,
which are described below. A detailed description of how
the components are put together to handle a Like button
is provided at the end of this section.
Request Handler The main task of the Request Han-
dler is to intercept the HTTP requests of a social plugin at
load time, and hand off the event to an appropriate call-
back handler function. The requests are intercepted using
a set of ﬁlters based on signatures that capture the target
URL of each plugin. These signatures are received from
the Social Plugin Provider Interface, along with the call-
back handlers that should be invoked whenever a ﬁlter is
triggered. The Request Handler provides as an argument
to these callbacks a reference to the DOM of the page
that contains the social plugin that triggered the ﬁlter.
notiﬁcation)
We have implemented the Request Handler by
for HTTP requests (http-
registering an observer
using XPCOM’s
on-modify-request
nsIObserverService. This allows the inspection code
to lie inline in the HTTP request creation process, and
either intercept and modify requests (e.g., by stripping
HTTP cookies or other sensitive headers), or drop them
entirely when necessary.
Social Plugin Provider Interface The Social Plugin
Provider Interface serves as an abstraction between the
Request Handler and different Provider Modules that sup-
port the social plugins offered by different social net-
working services. This extensible design enables more
networks and plugins to be supported in the future. In
the current version of SafeButton, we have implemented
a Provider Module for the social plugins offered by Face-
book. We take advantage of the Graph API [10] to down-
load the user’s private social information that needs to be
stored locally, and access any other public content on de-
mand. We should stress that, although an option, we do
not employ any kind of web scraping to acquire informa-
tion from pages accessible through the user’s proﬁle.
A Provider Module for a SNS consists of: i) the signa-
tures that will be used by the Request Handler for inter-
cepting the HTTP requests of the platform’s social plu-
gins, ii) the callback handler functions that implement
the core functionality of each social plugin based on lo-
cal and remote social information, and iii) the necessary
logic for initializing the DataStore and keeping it up to
date with the information that is available online.
Each callback function implements the core function-
ality for rendering a particular social plugin.
Its main
task is to retrieve the appropriate private social data from
the DataStore, request any missing public data from the
SNS (without revealing any user-identifying informa-
tion), and compile the two into the personalized content
that will be displayed. The function then updates the
DOM of the web page through the page reference that
was passed by the Request Handler.
DataStore The DataStore keeps locally all the private
social data that might be required for rendering person-
alized versions of any of the supported social plugins.
All information is organized in a SQLite database that
is stored in the browser’s proﬁle folder for the user that
has installed SafeButton. Upon ﬁrst invocation, SafeBut-
ton begins the process of prefetching the necessary data.
This process takes place in the background, and relies on
the detection of browser idle time and event scheduling
to operate opportunistically without interfering with the
user’s browsing activity.
In our implementation for Facebook, data retrieval be-
gins with information about the user’s friends, including
each friend’s name, thumbnail picture, and unique iden-
tiﬁer in Facebook’s social graph. Then, for each friend,
SafeButton retrieves events of social activity such as the
pages that a friend has liked or shared, starting with the
oldest available event and moving onward. In case the
download process is interrupted, e.g., if the users turns
off the computer, it continues from where it left off the
next time the browser is started.
Updating the DataStore is an incremental process that
takes place periodically. Fortunately, the current version
of the Graph API offers support for incremental updates.
As we need to query for any new activity using a separate
request for each friend (a Graph API function for multi-
ple user updates would be welcome), we do so gracefully
for each friend every two hours, or, if the browser is not
idle, in the next idle period. We have empirically found
the above interval to strike a good balance between the
timeliness of the locally stored information and the in-
curred network overhead. In our future work, we plan to
employ a more elaborate approach based on an exponen-
tial backoff algorithm, so that a separate adaptive update
interval can be maintained for different friend groups ac-
cording to their “chattiness.”
Note that we also need to address the consistency of
the locally stored data with the corresponding data that
is available online. For instance, friends may “like” a
page and later on “unlike” it, thereby deleting this activ-
ity from their proﬁle. Unfortunately, the Graph API cur-
rently does not offer support for retrieving any kind of
removal events. Nevertheless, SafeButton periodically
fetches the entire set of activities for each friend (at a
much slower pace than the incremental updates), and re-
moves any stale entries from the DataStore.
X-Cache The X-Cache holds frequently used public in-
formation and meta-information, such as the total num-
ber of “likes” for a page or the mapping between page
URLs and objects in the Facebook graph. A hit in the
X-Cache means that no request towards the social net-
working service is necessary for rendering a social plu-
gin. This improves signiﬁcantly the time it takes for the
rendering process to complete, and at the same time does
not reveal the IP address of the user to the SNS.
Use Case: Facebook Like Button Here we enrich the
running case of the Facebook Like button from Sec. 3
with the technical details of the behavior of SafeButton’s
components, as shown by the relevant steps in Fig. 4.
issue an HTTP request
Upon visiting a web page with an embedded Like
the browser
button in the form of an IFRAME,
towards Facebook to
will
that
load and subsequently render the contents of
intercepts this re-
IFRAME. The Request Handler
the
quest and attempts to match its URL against
the supported social plugins,
set of signatures of
trigger a match for the regular expres-
which will
sion
http[s]?:\/\/www\.facebook\.com\/plugins\/
like\.php.
the handler invokes the
callback associated with this signature and pass as an
Subsequently,
argument the plugin’s URL and a reference to the DOM
of the page that contains the social plugin (step 1).
The ﬁrst action of the callback function is to query
X-Cache for any cached non-personalized information
about the button and the page it is referring to. This in-
cludes the mapping between the page’s URL and its ID in
the Facebook graph, along with the global count of users
who have “liked” the page (step 3a). In case of a miss,
a request made through the Graph API retrieves that in-
formation (step 3b). The request is stripped from any
Facebook cookies that the browser unavoidably appends
to it. The response is then added to X-Cache for future
reference. After retrieving the global count of users, the
names (and if the developer has chosen so, the thumbnail
pictures) of the user’s friends that have liked the page are
retrieved from the LocalStore (step 4).
Finally, the reference to the DOM of the embedding
page (passed by the handler in step 1), is used to update
the IFRAME where the original Like button would have
been with exactly the same content (step 5).
5 Experimental Evaluation
5.1 Supported Facebook Plugins
In this section we discuss the social plugins offered by
Facebook and evaluate the extend to which SafeButton
can support them in respect to two requirements: i) user
privacy, and ii) support for personalized content. Table 1
lists the nine social plugins currently offered by Face-
book. For each plugin, we provide a brief categorization
of its “view” functionality, i.e., the content presented to
the user according to whether it is based on public (non-
personalized) or private (personalized) information, as
well as its “on-click” functionality, i.e., the type of ac-
tion that a user can take.
Although SafeButton interferes with the “view” func-
tionality of existing social plugins, it does not affect their
“on-click” functionality, allowing users to interact nor-
mally as with the original plugins. As shown in Ta-
ble 2, SafeButton currently provides complete support
for seven out of the nine social plugins currently offered
by Facebook.
The Like button and its variation, the Like Box, are
fully functional; the count, names, and pictures of the
user’s friends are retrieved from the DataStore, while
the total number “likes” is requested on demand anony-
mously. The Recommendations plugin presents a list
of recommendations for pages from the same site, with
those made by friends appearing ﬁrst. Recommendations
from the user’s friends are stored locally, so SafeBut-
ton can render those that are relevant to the visited site
on top. The list is then completed with public recom-
mendations by others, which are retrieved on demand.
Facebook
Social Plugin
Like Button
Send Button
Public
Content
Personalized
Content
Total number of people that have liked the
page
-
Names and pictures of friends that have
liked the page
-
User
Action
Like page
Send content/page URL
Comments
List of user comments
Friends’ comments appear on top
Post comment
Activity Feed
Recommendations
List of user activities (likes, comments,
shared pages)
List of user recommendations (likes)
Friends’ activities appear on top
Friends’ recommendations appear on top
-
-
Like Box
Registration
Total number of people that have liked the
Facebook Page, names and pictures of some
of them, list of recent posts from the Page
-