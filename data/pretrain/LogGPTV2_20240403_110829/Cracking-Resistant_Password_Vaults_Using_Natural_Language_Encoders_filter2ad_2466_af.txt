There we use a set of leaked password vault contents that
we obtained from an anonymous public post to Pastebin. We
refer to this data set as Pastebin. Pastebin appears to have
been gathered via malware running on a number of clients,
and is thus suggestive of the kind of data an adversary might
exploit. Our analysis shows that MPW does not stand up in
the face of simple ML-based attacks when challenge vaults
are drawn from Pastebin, but that SG does.
VII. HONEY ENCRYPTION FOR VAULTS
Given the NLEs from Section V, we can now build an
encryption service for vaults. Our construction uses a similar
design as Juels and Ristenpart’s [23] honey encryption (HE)
construction, which composed a DTE with a conventional
password-based encryption scheme. But ours will necessar-
ily be more complicated. We will combine multiple different
493493
DTEs (an NLE for human-generated and a regular DTE for
computer-generated passwords) and handle side information
such as domains in a privacy-preserving manner. We will
also need to handle adding new entries to an existing vault
and removing entries.
Abstractly, vault encryption takes as input a set of domains
(cid:2)D = (D1, . . . , D(cid:3)), associated passwords (cid:2)P = (P1, . . . , P(cid:3)),
and a vector of bits (cid:2)h = (h1, . . . , h(cid:3)) for which a 1 signiﬁes
that the password was input by a user and a 0 signiﬁes that
the password was randomly generated. The client selects
randomly-generated passwords by selecting uniformly from
a large set (of size about 290) that
includes passwords
accepted by all the website policies that we tested.
We now present a basic HE scheme. This scheme hides
passwords, but takes the simple approach of storing domains
in the clear with the ciphertext.
Basic HE scheme. Upon input (cid:2)D, (cid:2)P , (cid:2)h, this scheme pro-
ceeds as follows. We ﬁrst apply the sub-grammar NLE SG
to the subset of passwords in (cid:2)P for which hi = 1. To
each of the remaining passwords with hi = 0 we apply
the DTE UNIF. The result from both steps is a bit string
S = S0 (cid:5) S1 (cid:5) ··· (cid:5) S(cid:3) with S0 the output from encoding the
sub-grammar and each Si either an encoding under PCFG
using the sub-grammar (hi = 1) or an encoding under UNIF
(hi = 0).
The string S is then encrypted as follows. First, derive a
key K = KDF(mpw, sa) for a freshly generated uniform
salt sa and where mpw is the user’s master password.
Here KDF is a password based key derivation function
(PBKDF) that is strengthened to be as slow as tolerable
during normal usage [25]. Then, encrypt each Si (for i = 0
to (cid:4)) independently using AES in counter mode with key K
and a fresh random IV. This produces a sequence of (cid:4) + 1
CTR-mode ciphertexts (cid:2)C = (C0, . . . , C(cid:3)). The ﬁnal vault
ciphertext includes a (conventional) encoding of (cid:2)D, (cid:2)h, sa, (cid:2)C.
Decryption works in a straightforward way.
This HE scheme is relatively simple (once the NLE and
DTE are ﬁxed) and space efﬁcient. However, (cid:2)D and (cid:2)h are
stored in the clear and this means that attackers obtaining
access to the ciphertext learn the domains for which the user
has an account as well as which passwords were randomly
generated. One approach to rectify this would be to specify
a DTE for encoding (cid:2)D. One could use popularity statistics
for domains, for example based on Alexa rankings. However
note that this may sacriﬁce security against ofﬂine brute-
force attacks in the case that an attacker knows with high
certainty the set of domains associated with a user’s vault.
This highlights a delicate challenge in the use of HE:
if an attacker can easily obtain knowledge about a portion
of the plaintext, it may be better to not apply HE to that
portion of the plaintext. We may view domain information
as such easily-obtainable side information that it is not worth
encrypting. To provide domain privacy, though, we must
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:07:53 UTC from IEEE Xplore.  Restrictions apply. 
do more. We now describe two approaches: HE-DH1 and
HE-DH2.
HE-DH1.
In this scheme, we hide an individual user’s
domains in the set of all domains used by users and
include in each user’s vault “dummy” entries for unused
domains. To achieve privacy of domains the goal will be
that an attacker cannot distinguish between a dummy and
real entry. In the following, we ﬁx a set of popular domains
(cid:2)D∗
s1 ). We require that (cid:2)D∗ be a superset of
all the domains used by users. We discuss how to achieve
this momentarily.
1, . . . , D∗
= (D∗
To encrypt an input (cid:2)D, (cid:2)h, (cid:2)P we ﬁrst encode the passwords
as described above for the basic scheme: apply SG to the
set of human-generated passwords and UNIF to each of the
computer-generated passwords. For any domain in (cid:2)D∗ but
not in (cid:2)D, we generate a dummy encoding as follows. First
we choose a bit h to select whether this domain should have
a human-generated dummy entry or a computer-generated
one. We discuss how to bias this bit selection below. Then
we generate a random bit string of length equal to the length
of outputs of PCFG (if h = 1) or UNIF (if h = 0). We
then generate the full encoding S = S0 (cid:5) S1 (cid:5) ··· (cid:5) Ss1 by
inserting the per-password encodings or dummy encodings
to match the order from (cid:2)D∗. We then encrypt S as in the
basic scheme.
The distribution alluded to above for dummy encodings
does not affect conﬁdentiality of mpw or (cid:2)P , but rather
conﬁdentiality of the domains associated to a user and
whether the user has human or generated passwords for each
such domain. One can, for example, set this distribution to
be biased towards human-generated passwords.
Note that decryption with either the correct mpw or an
incorrect one produces s1 passwords. The s1 − (cid:4) honey
passwords corresponding to the dummy entries obscure from
an attacker which sites are in use by the user (even in the
extreme case that the attacker has guessed mpw somehow).
When mounting brute-force attacks,
the dummy entries
might hinder attempts to perform online checks of recovered
passwords. In particular,
if a domain’s login web page
follows best practices and does not leak whether a user has
an account there (regardless of correctness of the provided
password), then the attacker may not be able to distinguish
between the situation in which a certain domain is not used
by a user and the situation in which the decryption attempt
resulted in a honey password.
The downside of the above approach is that s1 may
need to be very large and for each user the storage service
(described below in Section VIII) must store O(s1) bits of
data. We can grow s1 over time by having clients inform the
service of when a new domain should be added to D∗ and
the server can insert dummy entries in previous vaults by
just inserting random bit strings in the appropriate location
for each vault ciphertext. (this is possible because a separate
494494
CTR-mode encryption is used for each vault entry.) When
the system is ﬁrst setup, an initial relatively small popular
domains list can be seeded with highly popular domains.
Another approach to reducing overheads is to bucket users
into separate groups, each group having their own popular
domains list. This enables tuning the size of vaults relative
to per-group domain conﬁdentiality.
HE-DH2. In this scheme, we adopt an alternative approach
to dealing with the long tail of domains, and use a honey-
encrypted overﬂow table. Fix some number s2 > 0. For each
of the domains not in the current popular domain set, we
use the following procedure. First apply the PCFG (using
the sub-grammar or UNIF appropriately to the password to
get a bit string S(cid:2). Then hash the domain name and take
the result modulo s2 to yield an index j ∈ [0..s2 − 1]. Set
s1+j+1 to S(cid:2). Some indices in [0..s2 − 1] will be unused
S∗
after handling all domains outside the popular domain set;
we ﬁll these with dummy encodings. The additional s2 seeds
are each encrypted with CTR mode, making the ﬁnal, full
ciphertext (cid:2)D∗, (cid:2)h∗, sa, (cid:2)C. Note that now, (cid:2)C contains s1 +s2 +
1 individual CTR-mode encryption ciphertexts for the sub-
grammar and s1+s2 individual, possibly dummy, passwords.
By setting s2 large enough relative to the expected num-
ber of domains not in D∗ we can ensure that with high
probability no two domains hash to the same location. Note
that the domains associated with the overﬂow table are not
stored with the ciphertext. To decrypt, the requested domain
is checked to see if it is in D∗ and if not it is hashed to ﬁnd
the appropriate entry in the last s2 HE ciphertexts.
Updating a vault. To update a password for a particular
domain in the basic scheme or HE-DH1, one ﬁrst decrypts
the entire vault, changes the appropriate entry, and then en-
crypts the modiﬁed vault with fresh randomness (including
the salt). needed to ensure the sub-grammar is consistent
with the encoded content. For HE-DH2, one proceeds much
the same, also decrypting each of the s2 entries in the
overﬂow table. The appropriate domain’s entry is updated
(found either by looking in the popular domains list or,
failing that, hashing the domain to be updated to ﬁnd it in
the overﬂow table). Finally, the modiﬁed vault is encrypted
(with fresh randomness).
Deletion of a password can be performed by converting
the appropriate entry into a dummy entry while also updating
the sub-grammar by removing any now unnecessary rules.
Security discussion. Our primary goal is conﬁdentiality
of the plaintext passwords. All passwords are ﬁrst encoded
using an appropriate DTE and then encrypted using a PBE
scheme. Should the user’s master password be strong, even
an ofﬂine brute-force attack is infeasible and, in particular, it
will require as much work to break any of the schemes above
as would be to break a conventional PBE encryption. Should
the user’s master password be weak, then by construction de-
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:07:53 UTC from IEEE Xplore.  Restrictions apply. 
crypting the ciphertext under any incorrect master password
gives back a sample from the DTE distribution. In particular,
we believe there to be no speed-up attacks that allow the
attacker to rule out a particular incorrect master password
without having to determine if the recovered plaintext is
decoy or not. As we showed in the previous section, our
NLE is good enough that distinguishing human-generated
passwords is challenging even for sophisticated adversaries.
The above is admittedly informal reasoning, and does
not rule out improved attacks. We would prefer a formal
analysis of plaintext vault recovery security akin to those
given for simpler honey encryption schemes in [23], which
would reduce security to solely depend on DTE quality.
Those techniques rely on a closed-form description of the
distribution of password vaults as produced by decoding
uniform strings. Unfortunately we do not know how to
determine one; even estimating the distribution of single
passwords is impractical with sampled data [4]. Formal
analysis remains an interesting open question.
If an attacker obtains the encryptions of a vault before
and after an update,
then security falls back to that of
conventional PBE. One simply decrypts both vaults under
each guessed master password, and with high probability
the contents of the two plaintext vaults will match (except
where updates occurred) with high probability only with the
correct master password. This is a limitation of all decoy-
based approaches we are aware of and ﬁnding a solution for
update security is an interesting open question.
Another security goal is domain hiding. As discussed
earlier, adding dummy ciphertexts (random bit strings) for
the latter two schemes for unused domains means that an
ofﬂine attacker will recover passwords for these domains as
well. The same reasoning extends to the use of the overﬂow
table. The complexity of the sub-grammar may leak some
information about the overall number of human-generated
passwords in-use, but not which of the domains marked as
having human-generated passwords are dummy encodings.
VIII. THE NOCRACK SYSTEM
We now turn to the design of the full honey-vault service
that we call NoCrack. Our architecture closely follows
deployed commercial systems, such as LastPass6. A web-
storage service exposes a RESTful web API over HTTPS
for backing up user vaults and synchronizing vaults across
devices. To achieve the security beneﬁts of HE, however, we
must design this service carefully.
The challenge of password-based logins. One encounters
an interesting challenge when attempting to build a decoy-
based system which supports backup of user vaults: how
to authenticate users to the service that is responsible for
backing up their vaults. In particular,
the status quo in
industry is for users to choose a username and service
6http://www.lastpass.com
495495
One might attempt
password. The password would be sent over HTTPS to the
server, hashed, and stored to authenticate future requests.
But customers are likely to choose this service password to
be the same as their vault’s master password. If an attacker
compromises the storage service and obtains both a user’s
encrypted vault and the service password hash, they can
mount a brute-force attack against
the service password
hash, learn the service password, and then decrypt the vault.
to mitigate with this by securing
the password hash separately from vaults. Or one could
avoid backup of encrypted vaults entirely, but this would
leave users responsible and violate our goal of matching
features of existing services. We therefore go a different
route, and forego password-based login to the storage service
completely.
Device enrollment. A new user registers with the service
by providing an email address (also used as an identiﬁer),
to which a standard proof-of-ownership challenge is sent.
To hinder abuse of the registration functionality, the service
can rate limit such requests and require solution of an
appropriate CAPTCHA [36]. The proof-of-ownership is an
email including a randomly generated 128-bit temporary
token (encoded in Base64 format, 22 characters long). The
user copies this temporary token into the client program
which submits the token over an enroll API call. The
server veriﬁes the temporary token, and returns to the client
program a (long term) bearer token (also 128 bits) that can
be used as a key to authenticate subsequent requests using
HMAC. At this stage the client device is enrolled. Note that
all communication is performed over TLS.
Additional devices can be enrolled in a similar manner
by having an already-enrolled client device to generate a
token for the new device or sending a new temporary token
via email. Should a user lose all access to a device with a
current bearer token, they can easily obtain a new token via
the same enrollment process.
We note that two-factor authentication would be straight-
forward to support by requiring a proof-of-ownership of a
phone number or a correct hardware token-generated one-
time password to obtain a device bearer token.
Synchronizing with the server. An enrolled client device
can compare their local information with that stored under
their account on the server. This involves ensuring the client
and storage service have the same version of the vault,
which, in normal usage, is cached on the client device. To
save bandwidth, downloads and uploads can be done in an
efﬁcient manner via any standard “diff” mechanism — in
particular our HE schemes support sending only portions of
the ciphertext at a time.
The client. We currently have only a command line client
supported, but future versions could easily integrate with
popular browsers via an extension. The client caches the
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:07:53 UTC from IEEE Xplore.  Restrictions apply. 
vault locally, but never stores it in the clear on persistent
storage. The client queries the service when run to determine
if it needs to synchronize the vault. At the beginning of
a browsing session, the user is prompted for the master
password and the vault is decrypted. To check for typos,
we can use dynamic security skins [15] (as suggested also
for use with Kamouﬂage), which show a color or picture
that is computed as a hash of the master password (but
never stored). The output of the KDF can be cached in
memory in order to decrypt individual domains as needed,
while the master password itself is expunged from memory
immediately.
Note that the HE scheme does not handle login names;
we assume that browser caching mechanisms can handle this
for a user if they desire. Should a login detectably fail for
the user due to master password typo and the user does not
observe the incorrect security skin, the client can prompt the
user to reenter their master password. By construction, there
might be dummy password entries in NoCrack for some
domains where the user does not have an account. The user
and/or the browser is responsible to distinguish the domains
where the user has an account.