Jorge Cardoso and Carlos Pedrinaci, Evolution and Overview of Linked USDL. 6th International
Conference Exploring Services Science, IESS 2015, Porto, Portugal, February 4-6, 2015, LNBIP, Vol.
201, Novoa, Henriqueta, Dragoicea, Monica (Eds.), 2015.
Evolution and Overview of Linked USDL
Jorge Cardoso1,2 and Carlos Pedrinaci3
1 Technical University of Dresden, Dresden, Germany
2 CISUC, Department of Informatics Engineering
University of Coimbra, Coimbra, Portugal
PI:EMAIL
3 Knowledge Media Institute, The Open University,
Milton Keynes, UK
PI:EMAIL
Abstract. For more than 10 years, research on service descriptions has
mainly studied software-based services and provided languages such as
WSDL, OWL-S, WSMO for SOAP, and hREST for REST. Nonetheless,
recent developments from service management (e.g., ITIL and COBIT)
and cloud computing (e.g. Software-as-a-Service) have brought new re-
quirements to service descriptions languages: the need to also model
business services and account for the multi-faceted nature of services.
Business-orientation, co-creation, pricing, legal aspects, and security is-
sues are all elements which must also be part of service descriptions.
While ontologies such as e3service and e3value provided a first modeling
attempt to capture a business perspective, concerns on how to contract
services and the agreements entailed by a contract also need to be taken
into account. This has for the most part been disregarded by the e3
family of ontologies. In this paper, we review the evolution and provide
anoverviewofLinkedUSDL,acomprehensivelanguagewhichprovidesa
(multi-faceted) description to enable the commercialization of (business
and technical) services over the web.
Key words: Linked USDL, service description, service management.
1 USDL overview
Linked USDL (Unified Service Description Language)[15] was developed for
describing business and software services using computer-readable and computer-
understandable specifications to make them tradable on the web/Internet [6].
Linked USDL takes the form of a reference vocabulary which is an approach
used in many fields to facilitate the exchange of data and integration of infor-
mation systems. For example, online social networks rely on FOAF1 to describe
people and relationships; computer systems use WSDL2 to describe distributed
software-based services; GoodRelations3 is used to mainly describe products; and
1 http://www.foaf-project.org/
2 http://www.w3.org/TR/wsdl
3 http://purl.org/goodrelations/v1
2 Jorge Cardoso and Carlos Pedrinaci
business-to-business systems use ebXML4 to describe transactions, orders, and
invoices. Adding to these existing standards, Linked USDL describes services in
a comprehensive way by providing a business or commercial description around
services. Therefore, Linked USDL is seen has one of the foundational technolo-
gies for setting up emerging infrastructures for the Future Internet, web service
ecosystems, and the Internet of Services.
Theobjectiveofthispaperistoprovidearetrospectiveonthedevelopmentof
theservicedescriptionlanguageLinkedUSDL;thevarioustechnologiesthathave
beenusedtosupporttheevolvingmodels;thecurrentmodelsanddocumentation
available; and the projects that are using and evaluating Linked USDL. This
will enable to ease future developments on the field of the web of services by
providing an important overview to reduce ramp-up time.
This paper is organized as follows. Section 2 describes the evolution of USDL
which started in 2007. Section 3 discusses our findings and the experience gained
from modeling services over the years. Section 4 describes the various modules
that have already been developed (e.g., core and pricing) and the ones that
are in development. It also discusses the benefits of Linked USDL and the
standardization efforts that were carried out in the past. Section 5 provides an
example of how to describe a service using Linked USDL. We have chosen to
model last.fm since it is a good example of an emerging type of services which
are part of the so-called Web API economy. ProgrammableWeb, the world’s
leading directory of Internet-based APIs, shows a dramatic growth of APIs since
2005 and has as of July 2014 more than 11.500 entries. Section 6 describes the
related work and the alternatives to using Linked USDL. Finally, in Section 7
the conclusions are presented and discussed.
2 Evolution of USDL
The initial main driving organization behind the first two versions of USDL was
SAP Research. Developments were carried in conjunction with other research
partners such as Siemens, Forschungszentrum Informatik (FZI), and Fraunhofer
Institut fu¨r Arbeitswirtschaft und Organisation (IAO). Funding for the research
was part of the Theseus project and supported by the German Federal Ministry
of Education and Research (BMBF).
ThetwoinitialversionsofUSDL(versions1.0and2.0)startedtobedeveloped
in 2007 and were ready in 2009. They were built using XML Schema. Later,
in 2011, based on the experience gained from the first developments, a W3C
Incubatorgroup5wascreatedandUSDLwasextendedleadingtoversion3.0.This
versionwasbuiltusingtheEcoremetamodelandtheEclipseModelingFramework
(EMF) to define UML modules for capturing the “master data” of a service. It
included extensions for pricing, legal, functional, participants, interactions, and
SLA aspects. The extensions resulted from the use of USDL in several European
academic and industrial projects (e.g., RESERVOIR, SLA@SOI, and SOA4ALL).
4 http://www.ebxml.org/
5 http://www.w3.org/2005/Incubator/usdl/
Evolution and Overview of Linked USDL 3
Fig. 1. The evolution of USDL and Linked USDL (2007-2013)
In 2012, version 4.0 was created and renamed to Linked USDL since its
development followed Linked Data principles [4] due to the rather inflexible and
close nature of previous technologies (e.g., XML, Ecore, and UML). Currently,
Linked USDL is the version most often used to develop infrastructures and
applications to manage services. The objective is to shift from a closed solution
to a language which enabled the large scale, open, adaptable, and extensible
description of services using a decentralized management. The use of Linked
Data enabled USDL to inherit many distinctive aspects such as unique service
addresses on the web via the use of URIs and the description data about services
is published in a computer-readable and -understandable format.
The rationale behind the use of Linked Data is the requirement that USDL
descriptions should be shared between interested parties and linked to other
descriptions, standards, and vocabularies. Linked Data technologies are particu-
larly suitable for supporting and promoting this level of web-scale interlinking.
Globalization truly happens only when people, devices, processes, and services
are all connected into a global network. As with its predecessors, Linked USDL
was also conceived, explored, and evaluated in several research projects including
FI-Ware (smart applications), FInest (logistics), and Value4Cloud (value-added
cloud services).
Figure 1 provides an overview of the evolution of Linked USDL and Table 1
describesthevariousversionsoftheUSDLlanguageandtheirmaincharacteristics.
Versions 1.0, 2.0, and 3.0 of USDL have been discontinued and are no longer
supported. Linked USDL introduces many changes and follows a different phi-
losophy when compared to its predecessors. While the core and pricing models
for Linked USDL are finalized, work on developing and aligning several modules
of the specification (e.g. legal, security, and service level) with various use cases
(e.g., higher education, cloud computing, and human-based services) is still in
progress. The modular approach followed, separating the different service aspects
into independent vocabularies, has proved to be efficient, flexible, and easy to
be processed by service delivery platforms. The following sections cover USDL
version 4.0, i.e., Linked USDL, since it offers a larger spectrum of advantages to
build a large-scale web of services.
3 Lessons Learned
The development of four versions of USDL to model human-driven and software-
basedservicestaughtusmanylessonsaboutservicemodeling.Table2summarizes
4 Jorge Cardoso and Carlos Pedrinaci
Table 1. The main characteristics of USDL languages
Name Ver. Year Characteristics
USDL 1.0 2008 Introduces the notions of business, operational, and
[7] technical perspectives. The model is serialized with
anXMLSchema(inthispaperitwillbealsoreferred
to as USDL/XML).
USDL 2.0 2009 The model is extended. It addresses the first set
[6] of concrete requirements for service description lan-
guages (e.g., extensibility, multiple views, and vari-
ability).
USDL 3.0 2011 Themodelisdividedintovariousmodules,andEcore
[3] and the Eclipse Modeling Framework (EMF) are
used for modeling (also referred as USDL/ECore).
Linked USDL 4.0 2013 The model is represented using Linked Data princi-
[15] plesandRDFS.Thecoremodelisrebuilttoprovide
a simpler view on services and better coverage (also
referred as Linked USDL/RDFS.)
our findings over the years and provides conclusions, which can be useful for
future developments indispensable to create a web of services’ infrastructure. We
discuss the four most relevant findings: model extensibility, data interoperability,
and instance identification.
Model extensibility [2] refers to the capability to create new service models as
extensions/derivations from a base model. Data interoperability [8] is the ability
oftwoormoresystemstoexchangeserviceinformationandtousetheinformation
thathasbeenexchanged.Dataintegration[12]referstothecapabilitytocombine
service data coming from different sources to provide a unified view of these
data. Instance identification [14] is related to the creation of unique identifiers to
identify service instances.
3.1 Model Extensibility
A web of services requires more than a one-size-fits-all model and, thus, the
extensibility of service models was important. USDL/XML and USDL/Ecore
provided a schema for service descriptions with a rather fixed structure. XML
Schema does not provide an elegant mechanism to enable providers to add new
elements to a data schema to better describe their services. In USDL/XML, the
solutionimplementedconsistedinusingaplaceholderthatcapturedalistofpairs
attribute-value. Both attribute and value where elements of type string, which
enabled providers to add new descriptive attributes to their services. Clearly, this
type of approach is not practical either from a syntax or semantic perspective.
An attribute-value approach can support extensibility (since any attribute
can be added) but it is not suitable for interpretation (and integration) since
attributes are just “strings” with no meaning attached. RDFS allows the same
Evolution and Overview of Linked USDL 5
Table 2. The main lessons learned
Lesson Learned Description
Model Linked USDL/RDFS has the highest extensibility capabilities.
Extensibility USDL/Ecore and USDL/XML only provided extensibility via
the creation of new attribute-value pairs.
Data DuetotheadoptionofXMLbybusinesses,USDL/XMLhasthe
Interoperability highest degree of data interoperability. Ecore, despite its XMI
serialization,doesnotenjoythispopularity.RDFShasagrowing
base of adopters, which makes Linked USDL/RDFS part of a
new generation of web specification languages. This movement
corresponds to an interoperability through adoption.
Data USDL/XML and USDL/Ecore generate self-contained instances.
Integration In other words, the meaning or semantics of instance data is not
sharedacrossstakeholdersviathemodelspecification.Itisgiven
by the entity (e.g., provider) creating a service description in-
stance.Ontheotherhand,LinkedUSDL/RDFSenablestocreate
instances which are integrated with external data managed and
sharedbylinkeddataregistries(e.g.,dbpedia).Anyonecanreuse
preexisting instances/data defined by 3rd parties which enables
data reuse (saving effort) but also enhances interoperability.
Instance WhileLinkedUSDL/RDFSreliesonURIstoprovideasimpleway
Identification to create unique global identifiers for services, USDL/XML and
USDL/Ecore did not provide such a decentralized and scalable
mechanism.
kind of extensibility but every new attribute added comes with its own semantics
ready to be interpreted by software.
3.2 Data Interoperability
While USDL/XML enables to archive a high degree of data interoperability,
since XML has been adopted and used for many years by businesses and many
tools exist, Ecore does not enjoy this popularity. While a serialization to XMI
exists, the objective of Ecore is not to foster the exchange of data but to provide
a metamodel to implement object-oriented programs. It can be used to model
packages,classes,attributes,references,etc.tofacilitatedynamiccodegeneration.
In other words, Ecore is suitable for the automated generation of code to develop
applications thatuse the model (e.g.,editors, service marketplaces,matchmakers,
etc.). With respect to data interoperability, XML was more adequate than Ecore