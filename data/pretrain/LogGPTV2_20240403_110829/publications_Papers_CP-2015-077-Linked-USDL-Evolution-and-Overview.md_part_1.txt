### Evolution and Overview of Linked USDL

**Authors:**
- Jorge Cardoso
  - Technical University of Dresden, Dresden, Germany
  - CISUC, Department of Informatics Engineering, University of Coimbra, Coimbra, Portugal
  - Email: [PI:EMAIL]
- Carlos Pedrinaci
  - Knowledge Media Institute, The Open University, Milton Keynes, UK
  - Email: [PI:EMAIL]

**Conference:**
6th International Conference on Exploring Services Science (IESS 2015), Porto, Portugal, February 4-6, 2015. Published in LNBIP, Vol. 201, edited by Henriqueta Novoa and Monica Dragoicea.

### Abstract

For over a decade, research on service descriptions has primarily focused on software-based services, leading to the development of languages such as WSDL, OWL-S, WSMO for SOAP, and hREST for REST. However, recent advancements in service management (e.g., ITIL and COBIT) and cloud computing (e.g., Software-as-a-Service) have introduced new requirements for service description languages. These include the need to model business services and account for the multifaceted nature of services, encompassing business orientation, co-creation, pricing, legal aspects, and security issues.

While ontologies like e3service and e3value provided initial attempts to capture a business perspective, they largely overlooked the contractual aspects of services. This paper reviews the evolution and provides an overview of Linked USDL, a comprehensive language that offers a multifaceted description to facilitate the commercialization of both business and technical services over the web.

**Keywords:** Linked USDL, service description, service management.

### 1. USDL Overview

Linked USDL (Unified Service Description Language) [15] was developed to describe business and software services using computer-readable and understandable specifications, making them tradable on the web/Internet [6]. It takes the form of a reference vocabulary, a common approach in various fields to facilitate data exchange and information system integration. For example, online social networks use FOAF [1], distributed software-based services use WSDL [2], GoodRelations [3] is used for product descriptions, and B2B systems use ebXML [4] for transactions, orders, and invoices. 

Linked USDL complements these standards by providing a comprehensive, business-oriented description of services. As a foundational technology, it supports emerging infrastructures for the Future Internet, web service ecosystems, and the Internet of Services.

### 2. Objective of the Paper

This paper aims to provide a retrospective on the development of Linked USDL, including the technologies used, current models and documentation, and the projects that are using and evaluating it. This overview will help reduce ramp-up time for future developments in the field of the web of services.

### 3. Paper Structure

- **Section 2:** Describes the evolution of USDL, starting from 2007.
- **Section 3:** Discusses the lessons learned and experiences gained from modeling services.
- **Section 4:** Details the various modules of Linked USDL, their benefits, and standardization efforts.
- **Section 5:** Provides an example of how to describe a service using Linked USDL, focusing on last.fm as a case study.
- **Section 6:** Reviews related work and alternatives to Linked USDL.
- **Section 7:** Presents and discusses the conclusions.

### 4. Evolution of USDL

The initial driving force behind the first two versions of USDL (versions 1.0 and 2.0) was SAP Research, in collaboration with partners like Siemens, FZI, and Fraunhofer IAO. These versions, developed between 2007 and 2009, were built using XML Schema. In 2011, a W3C Incubator Group [5] extended USDL, leading to version 3.0, which used the Ecore metamodel and the Eclipse Modeling Framework (EMF) to define UML modules for capturing service "master data." This version included extensions for pricing, legal, functional, participants, interactions, and SLA aspects, resulting from its use in European academic and industrial projects (e.g., RESERVOIR, SLA@SOI, and SOA4ALL).

In 2012, version 4.0 was created and renamed to Linked USDL, following Linked Data principles [4] due to the inflexibility of previous technologies. Currently, Linked USDL is the most widely used version for developing infrastructures and applications to manage services. Its objective is to shift from a closed solution to a language that enables large-scale, open, adaptable, and extensible service descriptions using decentralized management. The use of Linked Data allows USDL to inherit distinctive features such as unique service addresses via URIs and publish service data in a computer-readable and understandable format.

### 5. Lessons Learned

The development of four versions of USDL taught us several lessons about service modeling. Table 1 summarizes the main characteristics of each version, and Table 2 highlights the key lessons learned:

- **Model Extensibility:** Linked USDL/RDFS offers the highest extensibility capabilities, allowing for the creation of new service models as extensions or derivations from a base model.
- **Data Interoperability:** While USDL/XML achieved high interoperability due to the widespread adoption of XML, RDFS is gaining popularity, making Linked USDL part of a new generation of web specification languages.
- **Data Integration:** Linked USDL/RDFS enables the integration of service data from different sources, providing a unified view, whereas USDL/XML and USDL/Ecore generate self-contained instances.
- **Instance Identification:** Linked USDL/RDFS uses URIs to create unique global identifiers for services, a more scalable and decentralized mechanism compared to USDL/XML and USDL/Ecore.

### 6. Conclusion

Linked USDL represents a significant step forward in the description and management of services, offering a comprehensive and flexible framework. Its evolution and the lessons learned from previous versions provide a solid foundation for future developments in the web of services. By leveraging Linked Data principles, Linked USDL enables large-scale, open, and extensible service descriptions, supporting a wide range of use cases and applications.

---

**References:**
1. FOAF Project: <http://www.foaf-project.org/>
2. WSDL: <http://www.w3.org/TR/wsdl>
3. GoodRelations: <http://purl.org/goodrelations/v1>
4. ebXML: <http://www.ebxml.org/>
5. W3C Incubator Group: <http://www.w3.org/2005/Incubator/usdl/>

**Tables:**
- Table 1: Main Characteristics of USDL Languages
- Table 2: Main Lessons Learned