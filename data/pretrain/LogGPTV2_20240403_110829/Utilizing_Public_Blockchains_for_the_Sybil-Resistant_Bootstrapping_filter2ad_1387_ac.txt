privacy peer supports as well as service-specific capabilities. This
design supports the integration of a diverse landscape of anonymity
services (cf. Section 2) as well as future services into AnonBoot and
thus respects our requirement for broad applicability (G3). These
service-specific capabilities help users request services or locally
select privacy peers that suit their individual needs. While smart
contract-based host blockchains can process arbitrary messages
and thereby enable the fine-grained expression of privacy peers’
capabilities, the space limitations of Bitcoin’s OP_RETURN payloads
restrict this expressiveness. For instance, creating Tor circuits relies
on potentially complex relay descriptors [43] that easily exceed
available space and otherwise would impose a large overhead on
the host blockchain. We make AnonBoot operable even in such
restricted environments by allowing privacy peers to advertise
coarse-grained capabilities as a browsing aid that is subsequently
verified and refined via the participants’ connectors.
Finally, privacy peers need to include a small PoW in their peer
advertisements to thwart Sybil attacks. To be effective, the PoW
must be cryptographically tied to the peer’s identity as well as a
recent point in the host blockchain to prevent an adversary from
pre-computing or reusing peer advertisements. Only then, the PoW
puzzle ensures that no peer can create disproportional numbers of
peer advertisements compared to its hardware resources.
Service Requests. Users issue service requests to express that they
want AnonBoot to bootstrap a new anonymity service correspond-
ing to their requirements. Service requests closely resemble peer
advertisements in their structure (cf. Figure 4), but they do not
contain contact information. Further, the remaining fields are inter-
preted slightly differently. Through the capabilities, users express
what service they intend to use as well as minimum requirements
for the service to be bootstrapped. AnonBoot only allows users to re-
quest distinct classes of services through the capabilities to prevent
a highly fragmented service list. In contrast to privacy peers, users
do not solve a PoW puzzle in their service requests. Instead, users
choose a random nonce, which AnonBoot will incorporate into its
peer election to subsequently bootstrap the requested services. This
way, users can further thwart attempts by adversaries to interfere
with the peer election. A single service request will cause AnonBoot
to instantiate the requested service to be used by an arbitrary num-
ber of users. Hence, AnonBoot easily scales to large user bases (G4).
However, users questioning the existing requests’ randomness can
issue redundant service requests and thus contribute to the entropy
used for the peer election. AnonBoot aggregates redundant requests
or similar requests superseded by service requests with stronger
requirements, i.e., all requests’ nonces influence the peer election,
Figure 5: Peer advertisements are written to the host blockchain and must be renewed by the AnonBoot peers after each pulse,
incorporating PoW over the most recent pulse block to ensure freshness. Only peer advertisements published during the
negotiation phase are considered valid, where miners are advised to optionally not exceed the desired capacity of AnonBoot
messages per block. New anonymity services are bootstrapped after the negotiation phase based on the next spawn block.
but only one service with the most restrictive capabilities of all
aggregated service requests will be bootstrapped. At this point,
we leave defining strategies to simultaneously instantiate multiple
similar services as future work.
Pulse-based Message Release. In Figure 5, we illustrate Anon-
Boot’s soft-state approach, which defines a pulse of length Lp in
terms of block height on the host blockchain that triggers refresh-
ing peer advertisements and accepts new service requests. Every p
blocks, a new pulse starts and the most recent block on the block-
chain serves as the new pulse block. Now all peers start to create
their PoWs incorporating (a) their connector’s public key, (b) a ref-
erence to the pulse block to ensure the freshness of advertisements,
and (c) a nonce solving the PoW. To extract the maximum entropy
from the pulse block, AnonBoot can apply extraction techniques,
e.g., as proposed by Bonneau et al. [10].
For ideal fairness, all peers would have the same time window
for providing a valid PoW. However, AnonBoot must be able to cope
with a potential backlog of valid peer advertisements since we have
no means to reliably enforce prioritized consideration of AnonBoot
messages after a pulse block was being mined. Thus, we tolerate
peer advertisements to be delayed throughout a negotiation phase of
length LN after each pulse. This length should be chosen as short as
possible to prevent a devaluation of PoWs provided by honest peers,
but it simultaneously should allow for including all anticipated peer
advertisements in time even if single miners deliberately ignore
AnonBoot messages. Furthermore, the negotiation phase provides
some tolerance against accidental blockchain forks. While peers
must recompute their PoW if the host blockchain discards the pulse
block, a fork does not require AnonBoot to skip an entire pulse.
The tunable duration of each pulse with its associated negotia-
tion phase also allows to adjust the burden put on its participants as
well as its host blockchain in a fine-grained manner and thus allows
keeping the service discovery lightweight (G2). First, AnonBoot
disincentivizes excessive creation of messages as honest peers will
ignore all messages outside of a pulse’s negotiation phase. Second,
increasing Lp without changing LN reduces the number of mes-
sages required to maintain the peer repository, i.e., costs for all
peers are reduced, without weakening AnonBoot’s Sybil resistance
and only at the cost of the peer repository becoming less flexible.
However, AnonBoot still releases messages in bursts at the start
of each pulse. If these occasional message bursts prove to be bur-
dening the host blockchain, AnonBoot-aware miners can follow
an optional guideline to accept messages only up to a per-block
capacity c ∈ (0, 1] without impacting AnonBoot negatively. Further-
more, more awareness from miners on the host blockchain has the
potential to further reduce costs of AnonBoot peers and thereby
lower the bar for altruistic peer operators. Either through updated
consensus rules or novel, AnonBoot-tailored blockchain designs,
miners can be incentivized to reserve up to c·100% of their blocks
during each negotiation phase for including AnonBoot messages
at no costs. For instance, full nodes may then reject blocks that ig-
nore a current backlog of pending AnonBoot messages. We further
quantify how the host blockchain can steer the impact of Anon-
Boot in Section 7.2. While this approach requires that miners are
not entirely oblivious of AnonBoot, it ensures that AnonBoot can
operate at minimal costs without burdening the host blockchain.
4.3 Bootstrapping Secure Anonymity Services
All privacy peers that regularly refresh their peer advertisements
are eligible for providing anonymity services. In this section, we de-
scribe how AnonBoot facilitates bootstrapping anonymity services
based on the current pulse and its resulting peer repository. After
briefly describing how control is handed over from AnonBoot to
its bootstrapped services, we consider users locally picking privacy
peers directly from the peer repository and then provide details on
how AnonBoot elects privacy peers to bootstrap publicly available,
distributed anonymity services.
Bootstrapping Users and Privacy Peers. AnonBoot provides
only a medium for establishing and finding trustworthy distributed
anonymity services. Its responsibility thus also involves enabling
users to contact privacy peers that provide the requested anonymity
service. In most cases, peer advertisements will announce the con-
tact information of the involved privacy peers’ AnonBoot connector.
During the handover of control via her own connector, the user ver-
ifies the correctness of each peer’s contact information, especially
whether it possesses the private key corresponding to its adver-
tisement. If successful, the connectors perform a service-specific
handover so that further interaction is now performed entirely
according to the anonymity service protocol. In cases where indi-
rection through the connector is undesired, privacy peers may use
the D-flag (cf. Section 4.2) to signal that the contact information
directly corresponds to the endpoint of its offered service. However,
a Bitcoin-backed AnonBoot only supports OP_RETURN-based direct
advertisements if they can hold all required contact information.
NegotiationPhase LNPulse Duration LpGenesis BlockPulse BlockP0Pulse BlockP1SpawnBlockS0SpawnBlockS1Userecentpulse forfreshPoWpuzzlesCapacityc ∈(0,1]NegotiationPhase LNOngoingPulseUserecentpulse forfreshPoWpuzzlescompatible capabilities. This approach allows a bootstrapping of
anonymity services with a single service request for efficiency while
it also offers privacy-aware users the chance to directly influence the
peer election’s randomness without spawning concurrent services
that are potentially under-utilized. On the other hand, we consider
the spawn block of each pulse, i.e., the first block after the pulse’s
negotiation phase has concluded. Thus, an adversary cannot craft
nonces to bias the peer election without mining the spawn block.
We incorporate entropy from this block into the seed for the PRNG
to ensure its freshness. All participants locally use the PRNG with
this seed to elect peers for each service request and select a pseudo-
random sample of privacy peers from the peer repository that is
compatible with the service request. A common ordering of the
peer advertisements ensures that all participants select the same
samples. The peer election allows all participants to compute the
same service list and thus synchronize in a decentralized manner.
Hence, AnonBoot helps users find the required entry points for
using anonymity services, and the privacy peers learn whom to
connect to when being elected to join a specific anonymity service.
Conclusion of Design. Our design of AnonBoot enables trust-
worthy bootstrapping (G1) since (a) it operates on top of a public
host blockchain in a decentralized manner, (b) it mitigates Sybil
attacks through periodically refreshed and PoW-based peer adver-
tisements, and (c) it realizes a secure bootstrapping process using
entropy from users as well as the host blockchain’s mining process.
By exchanging messages through the host blockchain, our design
facilitates secure service discovery with only a low impact on the
host blockchain due to AnonBoot’s parametrizable pulse length and
per-block capacity (G2). Our protocol-agnostic message structure
and handover of control moreover ensure a broad applicability of
AnonBoot (G3). Finally, AnonBoot scales to large user bases as sin-
gle service requests suffice to bootstrap anonymity services usable
by arbitrarily many users (G4). In the following, we outline how to
integrate different anonymity services into our medium and how
AnonBoot can incentivize honest participation of privacy peers to
satisfy the remaining design goal (G5).
5 REALIZING USE CASES IN ANONBOOT
After presenting the general medium provided by AnonBoot, we
now discuss how the established anonymity services, which we
presented in Section 2, can operate on top of this medium regarding
the achievable benefits, the technical integration, and how to finan-
cially incentivize honest privacy peers’ participation (G5). First, we
discuss how AnonBoot’s peer repository can realize a distributed
directory service for anonymity networks. Subsequently, we dis-
cuss the bootstrapping of shuffling networks and cryptotumblers,
as both behave similarly in AnonBoot.
5.1 Decentralized Onion Routing via AnonBoot
AnonBoot’s Sybil-resistant peer repository constitutes a crypto-
graphically controlled replacement for otherwise logically central-
ized directory services. Hence, our approach is beneficial if users
expect operators to be corruptible or malicious. Nevertheless, Anon-
Boot must allow users to still make informed choices about the
establishment of circuits, and we must account for the infeasibility
and insecurity of users directly contacting all peers of a circuit.
Figure 6: A pseudo-random peer election based on block-
chain entropy enables all participants to locally compute
the same service lists from the peer repository.
Depending on the particular anonymity service (cf. Section 2),
users either contact (a) only one privacy peer, (b) all privacy peers
of one anonymity service, or (c) may only indirectly contact subse-
quent privacy peers for security reasons, e.g., when establishing Tor
circuits. In cases where a direct connection to peers is prohibited,
users can interleave bootstrapping with the anonymity service and
incrementally contacting the new peers’ connectors. For instance,
Tor builds circuits hop by hop [46], and thus users can contact
the connectors of subsequent Tor nodes via partially established
circuits, which aligns well with Tor’s design [46].
Local Selection of Peers. The peer repository’s Sybil resistance
(cf. Section 4.2) makes it a suitable replacement for centrally main-
tained directories. Privacy-aware users individually monitor peer
advertisements, which enable them to instantly select privacy peers
based on their local view on the peer repository, i.e., this peer selec-
tion is independent of AnonBoot’s pulses. Furthermore, users may
base their decisions on individual security and privacy preferences,
e.g., they only select privacy peers who recently advertised them-
selves, or they may locally keep track of peer statistics, such as
their first occurrence or how regularly they refresh advertisements.
When selecting privacy peers, the user verifies the correctness
of those peers’ advertisements and contacts their connectors. To
this end, users only have to passively monitor the host blockchain
for valid peer advertisements from the current pulse. Each peer that
(a) performed a valid and fresh PoW, (b) is reachable via its connec-
tor’s contact information, and (c) advertised a valid corresponding
public key is eligible to be selected by the user. Ultimately, the user
randomly selects a sample of peers she considers eligible replacing
any inaccessible peers until the service can be provided correctly.
Service Requests For Peer Election. AnonBoot derives the de-
mand for anonymity services from users’ service requests dur-
ing the negotiation phase (cf. Section 4.2). Based on these service
requests, we must ensure that peers are chosen randomly in a
transparent manner to provide a secure bootstrapping process. We
achieve this requirement through a locally replicable peer election
process that relies on a pseudo-random number generator (PRNG)
and seeds derived from random values on the host blockchain. This
way, all participants obtain the same list of elected peers for each
distinct service request for subsequent coordination.
In Figure 6, we present AnonBoot’s peer election in more detail.
To derive the seed, we rely on two sources of entropy. On the one
hand, users submit 8 B-long nonces with their service requests.
We aggregate the nonces of all matching service requests during
one pulse, i.e., requests for the same anonymity service with the
LocalElectionProcessBootstrappedServicesBlockchainEntropySpawnBlockBlockEntropyServiceRequestNonceServiceRequestNonceServiceRequestNonceServiceRequestNonceServiceRequestNonceRandomSeedRandomSeed1.A2.B3.C4.D5.E6.F7.G8.H9.I10.J11.K12.LPeerRepositoryPRNGPRNGHCAG1423ILE123Benefits. In currently deployed anonymity networks, the directory
service is essentially centralized. For example, Tor is pre-shipped
with a hard-coded list of currently ten directory authorities [44],
which jointly maintain its directory [43]. This approach leaves
current anonymity networks vulnerable to viable attacks on the
directory service [16]. Contrarily, AnonBoot allows creating a fully
decentralized directory that is implicitly maintained through the
host blockchain and locally verifiable by all AnonBoot participants.
Based on this directory, users can locally select privacy peers for
their circuits as they currently do through Tor’s directory service.
Peer Advertisements. Privacy peers can advertise themselves as
onion routers. However, Tor’s directory service maintains extensive
meta information about available peers [43], which in most cases
cannot be encoded in a single OP_RETURN-based peer advertisement
as required when AnonBoot shall operate on top of Bitcoin. Among
this meta information is the peer’s contact information, crypto-
graphic identity, available bandwidth, supported features, and exit
policies, i.e., access control list for connections to hosts on the pub-
lic Internet [43]. We thus make use of the peer advertisements’
capabilities (cf. Section 4.2) to encode an overview of the peers’ full
meta information. This overview is a coarse summary of a privacy
peer’s advertised capabilities and should be indicative of its actual
capabilities. Users can then browse available privacy peers based
on these advertised capabilities without additional delays. When
establishing a new circuit, the user should then request the chosen
privacy peers’ full server descriptors, verify that this descriptor
matches the previously advertised capabilities, and check that the
full descriptor is also compatible with the user’s requirements.
Bootstrapping Phase. The circuits users establish within ano-
nymity networks are intended to provide sender-receiver anonym-
ity. Hence, a critical constraint is that users only communicate di-
rectly with the first peer of a circuit. AnonBoot naturally integrates
with the resulting incremental circuit establishment of Tor [46]: The