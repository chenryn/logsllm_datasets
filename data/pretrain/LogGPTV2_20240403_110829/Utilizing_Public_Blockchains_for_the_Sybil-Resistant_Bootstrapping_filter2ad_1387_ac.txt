### Privacy Peer Support and Service-Specific Capabilities

AnonBoot supports the integration of a diverse range of anonymity services (as detailed in Section 2) and future services, ensuring broad applicability (G3). Service-specific capabilities enable users to request services or locally select privacy peers that meet their individual needs. Smart contract-based host blockchains can process arbitrary messages, allowing for the fine-grained expression of privacy peers' capabilities. However, Bitcoin’s OP_RETURN payloads have space limitations, which restrict this expressiveness. For example, creating Tor circuits relies on potentially complex relay descriptors [43] that can easily exceed the available space and impose significant overhead on the host blockchain.

To address these limitations, AnonBoot allows privacy peers to advertise coarse-grained capabilities as a browsing aid, which is subsequently verified and refined via the participants’ connectors. This approach ensures that AnonBoot remains operable even in restricted environments.

### Sybil Attack Prevention

Privacy peers must include a small Proof of Work (PoW) in their peer advertisements to prevent Sybil attacks. The PoW must be cryptographically tied to the peer’s identity and a recent point in the host blockchain to prevent adversaries from pre-computing or reusing peer advertisements. This ensures that no peer can create a disproportionate number of peer advertisements compared to its hardware resources.

### Service Requests

Users issue service requests to indicate their need for AnonBoot to bootstrap a new anonymity service according to their requirements. Service requests are structurally similar to peer advertisements (see Figure 4), but they do not contain contact information. Users express their intended service and minimum requirements through the capabilities field. AnonBoot limits the distinct classes of services that can be requested to prevent a highly fragmented service list. Unlike privacy peers, users do not solve a PoW puzzle in their service requests. Instead, they choose a random nonce, which AnonBoot incorporates into the peer election process to bootstrap the requested services. This helps thwart attempts by adversaries to interfere with the peer election.

A single service request will cause AnonBoot to instantiate the requested service, which can be used by an arbitrary number of users, thus enabling easy scaling to large user bases (G4). Users who question the randomness of existing requests can issue redundant service requests, contributing to the entropy used for the peer election. AnonBoot aggregates redundant or similar requests, but only one service with the most restrictive capabilities will be bootstrapped. Strategies for simultaneously instantiating multiple similar services are left for future work.

### Pulse-Based Message Release

Figure 5 illustrates AnonBoot’s soft-state approach, which defines a pulse of length \( L_p \) in terms of block height on the host blockchain. This pulse triggers the refreshing of peer advertisements and the acceptance of new service requests. Every \( p \) blocks, a new pulse starts, and the most recent block serves as the new pulse block. Peers then create their PoWs, incorporating (a) their connector’s public key, (b) a reference to the pulse block to ensure freshness, and (c) a nonce solving the PoW.

For ideal fairness, all peers should have the same time window to provide a valid PoW. However, AnonBoot must handle potential backlogs of valid peer advertisements. Therefore, it tolerates delays in peer advertisements throughout a negotiation phase of length \( L_N \) after each pulse. This phase should be as short as possible to prevent devaluation of PoWs provided by honest peers, while still allowing for the inclusion of anticipated peer advertisements, even if some miners ignore AnonBoot messages. The negotiation phase also provides tolerance against accidental blockchain forks.

The tunable duration of each pulse and its associated negotiation phase allows for fine-grained adjustment of the burden on participants and the host blockchain, keeping service discovery lightweight (G2). First, AnonBoot disincentivizes excessive message creation by ignoring messages outside the negotiation phase. Second, increasing \( L_p \) without changing \( L_N \) reduces the number of messages required to maintain the peer repository, reducing costs for all peers without weakening Sybil resistance, though at the cost of reduced flexibility. AnonBoot-aware miners can follow optional guidelines to accept messages up to a per-block capacity \( c \in (0, 1] \) without negatively impacting AnonBoot. Increased miner awareness can further reduce costs for AnonBoot peers, lowering the bar for altruistic peer operators.

### Bootstrapping Secure Anonymity Services

All privacy peers that regularly refresh their peer advertisements are eligible to provide anonymity services. AnonBoot facilitates the bootstrapping of these services based on the current pulse and the resulting peer repository. After briefly describing how control is handed over from AnonBoot to the bootstrapped services, we consider users locally picking privacy peers directly from the peer repository and detail how AnonBoot elects privacy peers to bootstrap publicly available, distributed anonymity services.

#### Handover of Control

AnonBoot provides a medium for establishing and finding trustworthy distributed anonymity services. It enables users to contact privacy peers that provide the requested anonymity service. Peer advertisements typically announce the contact information of the involved privacy peers’ AnonBoot connectors. During the handover, the user verifies the correctness of each peer’s contact information, especially whether it possesses the private key corresponding to its advertisement. If successful, the connectors perform a service-specific handover, and further interaction follows the anonymity service protocol. In cases where indirection through the connector is undesired, privacy peers may use the D-flag (cf. Section 4.2) to signal that the contact information directly corresponds to the endpoint of the offered service. However, a Bitcoin-backed AnonBoot only supports OP_RETURN-based direct advertisements if they can hold all required contact information.

#### Peer Election

AnonBoot’s approach allows for the bootstrapping of anonymity services with a single service request, offering efficiency and the chance for privacy-aware users to influence the peer election’s randomness without spawning under-utilized concurrent services. The spawn block of each pulse, i.e., the first block after the negotiation phase, ensures that an adversary cannot craft nonces to bias the peer election without mining the spawn block. Entropy from this block is incorporated into the seed for the PRNG to ensure its freshness. All participants use the PRNG with this seed to elect peers for each service request and select a pseudo-random sample of privacy peers from the peer repository that are compatible with the service request. A common ordering of peer advertisements ensures that all participants select the same samples, allowing them to compute the same service list and synchronize in a decentralized manner.

### Conclusion of Design

AnonBoot enables trustworthy bootstrapping (G1) by operating on a public host blockchain in a decentralized manner, mitigating Sybil attacks through periodically refreshed and PoW-based peer advertisements, and realizing a secure bootstrapping process using entropy from users and the host blockchain’s mining process. By exchanging messages through the host blockchain, AnonBoot facilitates secure service discovery with minimal impact on the host blockchain due to parametrizable pulse length and per-block capacity (G2). Its protocol-agnostic message structure and handover of control ensure broad applicability (G3). Finally, AnonBoot scales to large user bases as single service requests suffice to bootstrap anonymity services usable by many users (G4).

### Realizing Use Cases in AnonBoot

After presenting the general medium provided by AnonBoot, we now discuss how established anonymity services (presented in Section 2) can operate on top of this medium, focusing on benefits, technical integration, and financial incentives for honest privacy peers (G5).

#### Decentralized Onion Routing via AnonBoot

AnonBoot’s Sybil-resistant peer repository provides a cryptographically controlled replacement for logically centralized directory services. This approach is beneficial when users expect operators to be corruptible or malicious. AnonBoot must allow users to make informed choices about circuit establishment and account for the infeasibility and insecurity of users directly contacting all peers of a circuit.

Depending on the specific anonymity service, users either contact (a) only one privacy peer, (b) all privacy peers of one anonymity service, or (c) indirectly contact subsequent privacy peers for security reasons, e.g., when establishing Tor circuits. In cases where direct connections are prohibited, users can interleave bootstrapping with the anonymity service and incrementally contact new peers’ connectors. For instance, Tor builds circuits hop by hop [46], and users can contact the connectors of subsequent Tor nodes via partially established circuits, aligning well with Tor’s design [46].

#### Local Selection of Peers

The peer repository’s Sybil resistance makes it a suitable replacement for centrally maintained directories. Privacy-aware users monitor peer advertisements, enabling them to instantly select privacy peers based on their local view of the peer repository, independent of AnonBoot’s pulses. Users base their decisions on individual security and privacy preferences, such as selecting recently advertised peers or tracking peer statistics like first occurrence and regular advertisement refreshes.

When selecting privacy peers, the user verifies the correctness of those peers’ advertisements and contacts their connectors. Users only need to passively monitor the host blockchain for valid peer advertisements from the current pulse. Each peer that (a) performed a valid and fresh PoW, (b) is reachable via its connector’s contact information, and (c) advertised a valid corresponding public key is eligible for selection. The user randomly selects a sample of eligible peers, replacing any inaccessible peers until the service can be provided correctly.

#### Service Requests for Peer Election

AnonBoot derives the demand for anonymity services from users’ service requests during the negotiation phase. Based on these requests, peers are chosen randomly in a transparent manner to provide a secure bootstrapping process. This is achieved through a locally replicable peer election process that relies on a PRNG and seeds derived from random values on the host blockchain, ensuring all participants obtain the same list of elected peers for each distinct service request.

In Figure 6, AnonBoot’s peer election is detailed. The seed is derived from two sources of entropy: (a) 8-byte nonces submitted by users with their service requests, and (b) block entropy. Nonces from all matching service requests during one pulse are aggregated, and the block entropy from the spawn block is incorporated to ensure freshness.

### Benefits

Currently deployed anonymity networks, such as Tor, rely on a centralized directory service. For example, Tor is pre-shipped with a hard-coded list of ten directory authorities [44], which jointly maintain its directory [43]. This centralization leaves the network vulnerable to attacks on the directory service [16]. AnonBoot, in contrast, allows for a fully decentralized directory implicitly maintained through the host blockchain and locally verifiable by all participants. Users can locally select privacy peers for their circuits, similar to how they currently use Tor’s directory service.

#### Peer Advertisements

Privacy peers can advertise themselves as onion routers. However, Tor’s directory service maintains extensive meta information about available peers [43], which often cannot be encoded in a single OP_RETURN-based peer advertisement. This meta information includes the peer’s contact information, cryptographic identity, available bandwidth, supported features, and exit policies. AnonBoot uses the peer advertisements’ capabilities to encode a coarse summary of the peers’ full meta information, allowing users to browse available privacy peers without additional delays. When establishing a new circuit, the user should request the chosen privacy peers’ full server descriptors, verify that they match the previously advertised capabilities, and check compatibility with the user’s requirements.

#### Bootstrapping Phase

Circuits in anonymity networks are designed to provide sender-receiver anonymity. AnonBoot naturally integrates with the incremental circuit establishment of Tor [46]: users communicate directly with the first peer of a circuit, and the remaining peers are contacted incrementally.