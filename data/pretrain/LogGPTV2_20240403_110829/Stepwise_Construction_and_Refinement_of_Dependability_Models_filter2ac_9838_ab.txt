### 4. Refinement of the Structural Model

#### 4.1. Component Decomposition

We assume that the structural model is organized in a modular manner, consisting of sub-models representing the behavior of the system's components and their interactions. The initial model, derived from the functional-level model, may not be very detailed due to various reasons such as lack of information in the early stages of system selection and development, or the complexity of the system. To manage this complexity, a high-level model is initially constructed and then progressively refined.

As more detailed information becomes available about the system's composition and the events governing component evolution, the structural model can be refined. Another refinement may be necessary regarding event distributions. Initially, it is assumed that all events governing the system's behavior are exponentially distributed, which may not always be accurate. For example, the failure rates of some components may increase over time.

Model refinement allows for more detailed behavior to be considered, leading to more precise results compared to those obtained from a high-level model. These detailed results can help in selecting alternative solutions for a given structure. We consider three types of refinement: component, state/event, and distribution. Given the modular nature of the system's model, the refinement of a component's behavior is carried out within its sub-model, with special attention paid to its interactions with other sub-models. However, due to space constraints, we will focus on the new dependencies created by the refinement without discussing existing ones.

**Component Refinement:**
- **Definition:** Replacing a component with two or more components.
- **Transformation:** This leads to the transformation of the component's sub-model into another sub-model.
- **Approach:** The same transformation rules used for the interface model in Section 3 are applied.

**State/Event Fine-Tuning:**
- **Definition:** Replacing a place/transition corresponding to a state/event with a subnet.
- **Basic Cases:** We define basic refinement cases whose combinations cover most common possibilities of state/event refinement.

**Distribution Adjustment:**
- **Method:** Using the method of stages to transform non-exponential distributions into Markovian ones.
- **Application:** An extended transition is replaced by a subnet to model the stages.

#### 4.1.1. Parallel Decomposition

Consider the decomposition of software \( S \) into two redundant components \( S_1 \) and \( S_2 \). The up state of \( S \) is the result of either \( S_1 \) or \( S_2 \) being in an up state, and the failure state of \( S \) is the combined result of \( S_1 \) and \( S_2 \) being in failure states.

\[
\begin{aligned}
& t_{S1} \quad (S_1 \text{ ok}) \\
& T_{12} \quad (S_1 \text{ ko}) \\
& t'_{S1} \quad (S_1 \text{ ok}) \\
& T_{11} \quad (S_1 \text{ ko}) \\
& T_{22} \quad (S_2 \text{ ok}) \\
& t_S \quad (S \text{ ok}) \\
& T_{21} \quad (S_2 \text{ ko}) \\
& t'_{S2} \quad (S_2 \text{ ok})
\end{aligned}
\]

- **Immediate Transition:** \( t_{S1}, t'_{S1}, t_S, t'_{S2} \)
- **Timed Transition:** \( T_{11}, T_{12}, T_{21}, T_{22} \)
- **Failure Rates:** \( \lambda_{S1}, \lambda_{S2} \)
- **Restoration Rates:** \( \mu_{S1}, \mu_{S2} \)

**Figure 8.** Parallel decomposition

The generalization to \( N \) components is straightforward. The interface model between the system and its components is built in the same manner as the interface model between a function and its associated components.

#### 4.1.2. Series Decomposition

Consider the decomposition of software \( S \) into two series components \( S_1 \) and \( S_2 \). This case is identical to the one presented in Figure 5 when replacing \( F \) by \( S \), \( H \) by \( S_1 \), and \( S \) by \( S_2 \).

#### 4.1.3. Mixed Decomposition

Suppose \( S \) is composed of three components: \( S_1 \), \( S_2 \), and \( S_3 \), where \( S_3 \) is in series with \( S_1 \) and \( S_2 \), which are redundant. This case is identical to the example presented in Figure 6 when replacing \( F \) by \( S \) and \( H \) by \( S_3 \).

#### 4.1.4. Conclusion

In all the illustrated cases, we have considered only one token in each initial place. \( K \) identical components can be modeled by a simple model with \( K \) tokens in each initial place. When refining the behavior of such components, a dissymmetry in their behavior may appear. If this is the case, the model at the current abstraction level must be modified before refinement. This may lead to changes in the interface model either between the functional-level and the structural model or between two successive structural models. This is the only case where refinement leads to changing the model at the higher level.

#### 4.2. State/Event Fine-Tuning

In GSPNs, places correspond to system states, and timed transitions represent events that guide state changes. Fine-tuning of places/transitions allows for more detailed behavior modeling. Our goal is to detail the system's behavior by refining the underlying GSPN while ensuring that the net's dynamic properties (aliveness, boundedness, and safeness) are preserved at each refinement step.

**Table 1. State/Event Refinement**

| Initial Model | Transformation | Resulting Model |
|---------------|----------------|-----------------|
| \( T \)       | TR1: Separation into two competing events | \( T_1, T_2 \) |
| \( T \)       | TR2: Sequential refinement of events | Sequence of events |
| \( T \)       | TR3: State refinement | Multiple states |

**Example:**

Consider the hardware model given in Figure 9(a). Several successive refinement steps are depicted in Figures 9(b), (c), and (d).

- **Step 1:** After fault activation (\( T_1 \)), two types of faults are distinguished: temporary and permanent, with probabilities \( \alpha \) and \( 1 - \alpha \) respectively. Using TR3, we obtain the model in Figure 9(b).
- **Step 2:** To account for error detection latency (\( 1/\varepsilon \)) for hardware components, we apply TR2 to transition \( T_{21} \) of Figure 9(b). The resulting model is in Figure 9(c).
- **Step 3:** Finally, we model the error detection efficiency by applying TR3. Detected errors allow immediate system repair, and we add a perception latency (transition \( T_{2121} \)), as shown in Figure 9(d).

**Figure 9.** State/Event refinement

#### 4.3. Distribution Adjustment

It is well known that the exponential distribution assumption is not appropriate for all event rates. For example, the failure rate of a software component might increase due to error conditions accumulating over time and use.

**Method of Stages:**

- **Definition:** Transforms a non-Markovian process into a Markovian one by decomposing a state with a non-exponential firing time distribution into a series of \( k \) successive states.
- **Application:** Each of these \( k \) states will have a negative exponential firing time distribution to simulate an increasing rate. In GSPNs, a transition (referred to as an extended transition) is replaced by a subnet to model the \( k \) stages.

**Previous Work:**

- **Memory Policies:** Three memory policies have been identified and studied: resampling, age memory, and enabling memory. The enabling memory policy is well-suited for modeling the kind of dependency created when modeling system dependability.
- **Enabling Memory Policy:** At each transition firing, the timers of all the timed transitions that are disabled by this transition are restarted, whereas the timers of all the timed transitions that are not disabled hold their present values.

**Figure 10.** Initial model

**Figure 11.** Enabling memory with structural conflict

After the removal of the token from \( S \) by the firing of transition \( T_{res} \), the clearing of places \( P_1, P_2, \) and \( P_3 \) is accomplished.