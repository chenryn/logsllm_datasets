assume that parties have access to perfect randomness. If a user has access to a truly random
bit-string, he can use a deterministic algorithm to expand into a longer sequence. The output
of the algorithm cannot be perfectly random, as there are fewer seeds than possible outputs, so
one can deﬁne a security objective for this algorithm as follows: no computationally-bounded
adversary, which does not know the seed, can distinguish an output from the uniform.
The above algorithm can be deﬁned precisely with a formal security game and is referred to in
this thesis as a standard pseudo-random number generator. In this situation, the seed of the
generator is the most critical part of it as an adversary that has access to it can predict the
future output of the generator.
Stateful Pseudo-Random Number Generators
The generation of a random seed can be amortized allowing the computation of several outputs
with the same seed. As the algorithm is deterministic, this implies that the algorithm also
modiﬁes the seed for each output. This class of algorithm can also deﬁned precisely with
a formal security game and is referred to in this thesis as a stateful pseudo-random number
generator. The generator is modelled here as a stateful algorithm and its security is formalized
by the indistinguishability of all the outputs generated from a secret seed. In this situation,
as the seed is reused, the generator needs to store it between the generation of two outputs.
This design have been implemented in a large amount of systems, including hardware security
modules. As a drawback, several attacks have been mounted against some generators, that rely
on the predictability of the seed or on the potential leakage of the memory of the generator.
The memory of the generator is then its most critical part, as an adversary that has access to it
can predict the future output of the generator. In this thesis, we refer to the internal state for
the memory of the stateful pseudo-random number generator.
— 1 —
Chapter 1. Introduction
Pseudo-Random Number Generators with Input
A second solution to amortize the use of a random seed is to allow the algorithm to continuously
collect new inputs in addition to the seed and produce outputs that depend on the previous
inputs. This class of algorithm is referred to in this thesis as a pseudo-random number generator
with input.
In this situation, the idea is to use the largest amount of possible events from the environment
of the generator, gather them together in the internal state S of the generator and produce
outputs that are indistinguishable from random. An expected property of the generator is that
it accumulates the successive inputs properly, so that each new input is actually taken into
account. The compromise of the internal state is still critical in this situation, however, as new
inputs are collected continuously, the generator may recover from a compromise if enough inputs
are collected. Moreover, as inputs may be adversarially inﬂuenced, a second expected property
is that the generator preserves its state against such inputs.
The formalization of the expected security properties of a pseudo-random number generator
with input has been a challenging task and is the main objective of this thesis. We present in
Chapter 3 the successive models for pseudo-random number generators with inputs that have
been proposed, and we present our new security model in Chapter 4. A major contribution of
our new security model is the formalization of both these recovering and preserving properties.
1.2 Randomness Extractors
A randomness extractor takes as input a source of possibly correlated bits, and produces an
output which is close to the uniform distribution.
We present in Chapter 2 a survey of the diﬀerent notions of extractors that we will use for this
thesis. In this survey, we show that there is an impossibility result as no deterministic extractor
can extract randomness from all sources and therefore we need to consider a family of extractors
named seeded extractors, that uses a second random parameter seed for extraction. We recall
that the existence of seeded extractor is guaranteed (by the probabilistic method), and we present
the famous Leftover Hash Lemma that constructively builds randomness extractors from hash
function families. As we show, an application of the Leftover Hash Lemma is the contruction
of strong extractors from universal hash functions families (and similarly the construction of
resilient extractors from ﬁnite pairwise independent hash functions families).
As we explain in Chapter 2, if one wants to build a secure scheme upon seeded extractors,
the parameter seed will preferably be made public and a tradeoﬀ shall be made between the
independence of seed and the randomness source, the size of the randomness source and the
adversary’s capabilities:
1. We assume that independence between the seed and the randomness source can not be
ensured. One solution is to restrict the randomness sources to use a resilient extractor:
this is the solution proposed in [BST03, BH05]. One second solution would be to restrict
the adversary’s computational capabilities.
2. We assume that independence between the seed and the randomness source can be ensured.
As we also want that seed is public, one solution is to use strong extractors.
The security model that we propose for pseudo-random number generators with input relies
on this second assumption. We therefore exhibit some impossibility results that show that a
scheme, secure when independence between the seed and the randomness source is ensured, can
— 2 —
1.3. Security Models
be broken if there is a correlation between them. In particular, we point an explicit impossibility
result for the pseudo-random number generator named CTR_DRBG, proposed as a standard by
the NIST.
1.3 Security Models
Security Against Source and State Compromise Attacks
Several desirable security properties for stateful pseudo-random number generators and pseudo-
random number generators with inputs have been identiﬁed in various standards [ISO11,Kil11,
ESC05,BK12]. These standards consider adversaries with various means: those who have access
to the output of the generator; those who can control (partially or totally) the source of the
generator and those who can control (partially or totally) the internal state of the generator (and
combination of them). Several security notions have been deﬁned: (a) Resilience: an adversary
must not be able to predict future outputs even if he can inﬂuence the input used to initialize
or used to refresh the internal state of the generator and Forward security (resp. backward
security): an adversary must not be able to predict past (resp. future) outputs even if he can
compromise the internal state of the generator. Note that backward security implies that the
generator is refreshed with new inputs after compromise.
In 1998, Gutmann [Gut98], and Kelsey, Schneier, Wagner and Hall [KSWH98] gave useful guide-
lines for the design of secure pseudo-random number generators with input. In these guidelines,
they all considered a generator as a couple of algorithms, one to collect inputs and one second
to generate outputs. In 2001, Bellare and Yee [BY03] proposed a dedicated security model to
assess Forward Security, for which a stateful pseudo-random number generator shall be designed
so that it is infeasible to recover any information on previous states or previous output blocks
from the compromise of the current state. In 2002, Desai, Hevia and Yin [DHY02], modelled
secure pseudo-random number generators with input as a pair of algorithms: the Seed Gen-
eration algorithm and the Output Generation algorithm. This model assumes the existence of
an entropy pool, diﬀerent from the internal state, in which randomness is accumulated, that is
used to refresh the internal state of the generator. In 2003, Barak, Shaltiel and Tromer [BST03]
proposed a security model where an adversary can have some control on the randomness source.
This model explicitly explains the importance of a randomness extractor as a core component
of a generator and proposes an analysis of the settlement of the public parameter seed which is
inherent to this component. An elegant and remarkable work by Barak and Halevi [BH05] mod-
elled pseudo-random number generators with input as a pair of algorithms (refresh, next) and
deﬁned a new security property called robustness based on the design guidelines of [KSWH98]:
this property assesses the behavior of a generator after the compromise of its internal state, but
fails to capture the small and gradual entropy accumulation present in most real-life implemen-
tations.
Security Against Side-Channel Attacks
Under the robustness security notion, an adversary can observe the inputs and outputs of a
generator, manipulate its entropy source, and compromise its internal state. While this notion
seems reasonably strong for practical purposes, it still does not fully consider the reality of em-
bedded devices, which may be subject to side-channel attacks. In these attacks, an adversary can
exploit the physical leakage of a device by several means such as power consumption, execution
time or electromagnetic radiation. While many countermeasures have been proposed to thwart
speciﬁc attacks, it was only recently that signiﬁcant eﬀorts have been made to deﬁne generic
— 3 —
Chapter 1. Introduction
security models. Among these, the bounded retrieval model [DLW06,Dzi06], for instance, cap-
tures attacks where the adversary is limited to a bounded amount of leakage over the entire
lifetime of a cryptosystem. The leakage-resilient model [DP08], on the other hand, encompasses
many more attacks with only a limitation in the amount of leakage per execution. The global
amount of leakage is not limited as in the bounded retrieval model. Since the leakage-resilient
model captures most of the known side-channel attacks, it has led to the design of several secure
primitives [Pie09,DP10,FPS12,YS13,ABF13]. Note that another model proposed by Prouﬀ and
Rivain [PR13] ﬁts well with the reality of embedded security by assuming that every elementary
computation in the implementation leaks a noisy function of its input. In that case, the security
of the system directly depends on the level of noise.
In the speciﬁc context of pseudo-random number generators, several leakage-resilient models
and constructions have been proposed so far (e,g., [YSPY10,SPY13,YS13]). The work of Yu et
al. [YSPY10], for instance, proposes a very eﬃcient construction of a leakage-resilient pseudo-
random number generators. Likewise, the work of Standaert et al. [SPY13] shows how to obtain
very eﬃcient constructions of leakage-resilient pseudo-random number generators by relying on
empirically veriﬁable assumptions. None of these works, however, consider potentially biased
random sources.
Security Against Memory Attacks
Designers of pseudo-random number generators with input assume that the internal state S
remains secret to the adversary. However, for software implementations this may be unrealistic
as the internal state can be partially compromised through memory corruption attacks such as
buﬀer overﬂows or side-channel attacks. Diﬀerent memory corruption attacks were presented
by Erlingsson et al. in [EYP10] and by van der Veen et al. in [vdVdSCB12] and faults attacks
against cryptographic schemes were presented by Biham and Shamir in [BS97] and by Boneh
et al. in [BDL01]. For example, recently, the Heartbleed Bug [Hea] aﬀected the OpenSSL
cryptographic library. This bug allows an adversary to get the content of the memory of the
OpenSSL process run by a server (or a client). Although the adversary can control the size of
the compromised memory, the location cannot be controlled. The adversary can get total or
partial access to sensitive information as the internal state of the generator.
We present in Chapter 3 a complete description of the security models for source and state
compromise attacks and we propose a comparison between these models. We also present in
Chapter 3 three proposals of constructions of stateful pseudo-random number generators that
are secure against side-channel attacks.
1.4 Potential Weaknesses
Currently there are numerous implementations of pseudo-random number generators with input
from diﬀerent providers, and most of them rely on internal directives and parameters that are
poorly documented or even undocumented. In most implementations, a generator contains a
dedicated internal state S which is refreshed periodically with inputs collected from its envi-
ronment (such as network input/output, keyboard presses, processor clock cycles) and secondly
used to compute pseudo-random strings. The randomness collection task is harder and takes
much more time than the output generation task; this is the reason why implementations typi-
cally maintains a dedicated memory as the internal state, which, as we mentioned previously, is
the most critical part of the generator and therefore needs to be kept secure during its update.
The lack of insurance about the generated random numbers can cause serious damages in crypto-
graphic protocols, and vulnerabilities can be exploited by adversaries to mount concrete attacks.
— 4 —
1.5. Contributions of this Thesis
In 1996, Goldberg and Wagner [Net96] completed an analysis of Netscape pseudo-random num-
ber generator used in Version 1.1 of the international version of Netscape’s Solaris 2.4 browser.
Their analysis showed that the creation of the internal state of the generator only depended
on three values: the PID, the PPID and a call to time, mixed together using a linear function
and MD5 hash function. Their analysis also showed that any generated cryptographic key only
relied on these four values, which could easily be guessed by an adversary.
One other striking example is the failure in the Debian Linux distribution [CVE08], where a
commented code in the OpenSSL pseudo-random number generator with input led to insuﬃ-
cient entropy gathering and allowed an adversary to conduct brute force guessing attacks against
cryptographic keys.
Moreover, in addition to these concrete attacks, cryptographic algorithms are highly vulnerable
to weaknesses in the underlying random number generation process. For instance, several works
demonstrated that if nonces for the Digital Signature Algorithm are generated with a weak
pseudo-random number generator then the secret key can be quickly recovered after seeing a
few signatures (see [NS02] and references therein). This illustrates the need for precise evalua-
tion of pseudo-random number generators with input based on clear security requirements.
Despite this, only few implementations of pseudo-random number generators have been analyzed
since [Gut98,KSWH98].
Concerning system pseudo-random number generators with input, an analysis of Linux pseudo-
random number generators with input dev/random and dev/urandom was done in 2006 by Gut-
terman, Pinkas and Reinman in [GPR06], where they presented an attack for which a ﬁx has
been published. The Windows pseudo-random number generator with input CryptGenRandom
was analyzed in 2006 by Dorrendorf, Gutterman and Pinkas in [DGP07]; the authors showed
an attack on the forward security of the generator implemented in Windows 2000, for which a
ﬁx has been published.
Lenstra, Hughes, Augier, Bos, Kleinjung and Wachter [LHA+12] showed that a non-negligible
percentage of RSA keys share prime factors. Heninger, Durumeric, Wustrow and Halderman
[HDWH12] presented an analysis of the behavior of Linux generators that explains the genera-
tion of low entropy keys when these keys are generated at boot time and the ﬁndings of Lenstra
et al.
Concerning application pseudo-random number generators, Argyros and Kiayias [AK12] showed
practical attacks on web applications exploiting randomness vulnerabilities in PHP applications.
Michaelis et al. [MMS13] described and analyzed several Java implementations; they have also
identiﬁed some weaknesses. More recently, a ﬂaw in the Android pseudo-random number gener-
ator with input, identiﬁed by Kim, Han and Lee in [KHL13], has been actively exploited against
Android-based Bitcoin wallets [SEC13].
1.5 Contributions of this Thesis
New Security Models
In 2013, in [DPR+13], in a common work with Dodis, Pointcheval, Vergnaud
Robustness.
and Wichs, we proposed the ﬁrst contribution of this thesis. We extended the previous work
of [BH05] and we formalized the accumulation process of a pseudo-random number generator
— 5 —
Chapter 1. Introduction
with input.
We introduced the notion of adversarially controlled Distribution Sampler, that allows an ad-
versary to control the distribution of the inputs that are collected by a generator and a new
property of entropy accumulation. We proposed two simpler notions of security, the recovering
security that models how a generator should recover from a compromise of its internal state
by entropy accumulating, and the preserving security, that models how a generator with a non
compromised internal state should behave in presence of adversarial inputs. We complemented
the robustness security model with these stronger adversaries and we proved that taken together,
recovering and preserving security imply the full notion of robustness. We proposed a simple
and very eﬃcient construction that is provably provably secure (i.e. robust) in our new and
stronger adversarial model, based on simple operations in a ﬁnite ﬁeld and a standard secure
pseudo-random number generator G. We also analyzed the pseudo-random number genera-
tor with input proposed by Barak and Halevi. This scheme was proven robust in [BH05] but
we proved that it does not generically satisfy our new property of entropy accumulation. We
presented benchmarks between this construction and the Linux generators that show that our
construction is on average more eﬃcient when recovering from a compromised internal state and
when generating cryptographic keys.
This work is presented in Chapter 4.
Robustness Against Memory Attacks. In 2014, in [CR14], in a common work with Cornejo,
we extended the previous works of [BH05] and [DPR+13] to model the expected security of
pseudo-random number generators with input against Memory Attacks. These attacks captures
real-life situations and refers to situations in which an adversary can recover or modify a sig-
niﬁcant fraction of the secret stored in memory, even if those secrets have never been involved
in any computation, contrary to the class of attacks that rely on computation. Formalization
of security against these attacks is fully described by Akavia, Goldwasser and Vaikuntanathan
in [AGV09]. In our work we focused on a class of memory attacks where the adversary directly
gets access to some fraction of the internal state of the generator or sets this fraction to a chosen
value, we formally extended the security model of [DPR+13] with this new adversary proﬁle and
we proved that the original construction of [DPR+13] can be extended in this model.
This work is presented in Chapter 5.
Robustness Against Side-Channel Attacks. In 2015, in [ABP+15], in a common work with
Abdalla, Belaid, Pointcheval and Vergnaud, we built a practical and robust pseudo-random num-
ber generator with input that can resist side-channel attacks. Since the construction of [DPR+13]
seemed to be a good candidate, we used it as the basis of our work. In doing so, we extended
its security model to integer the leakage-resilient security and we deﬁned stronger properties for
the underlying standard pseudo-random generator for them to resist side-channel attacks. We
analyzed the robust construction based on polynomial hash functions given in [DPR+13] show-
ing why its instantiation may be vulnerable to side-channel attacks. We also proposed three
concrete instantiations with a small overhead. While two of them are adaptation of existing
constructions, the third one is a new proposal which provides a better security at the expense
of a larger internal state. We proved that the whole construction and its instantiations are
leakage-resilient robust and we provided features on the performances for several security levels.
Finally, we gave instantiations of this construction based on AES in counter mode that are only
slightly less eﬃcient than the original instantiation proposed in [DPR+13]. Our instantiations
only require that the implementation of AES in counter mode is secure against Simple Power
Analysis attacks since very few calls are made with the same secret key.
This work is presented in Chapter 6.
— 6 —
1.5. Contributions of this Thesis
Security Analysis of Concrete Pseudo-Random Number Generators
We propose a new analysis of concrete pseudo-random number generators with input that are
used in practice in real-life security products.
Security Analysis of the Linux generators /dev/random and /dev/urandom. In [DPR+13],
we gave a precise assessment of the security of the two Linux pseudo-random number generators