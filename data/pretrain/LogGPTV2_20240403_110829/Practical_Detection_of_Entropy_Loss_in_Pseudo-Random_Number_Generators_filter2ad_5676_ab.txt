### 1. Introduction

#### 1.1 Pseudo-Random Number Generators (PRNGs)

Assume that parties have access to perfect randomness. If a user has access to a truly random bit-string, they can use a deterministic algorithm to expand it into a longer sequence. The output of the algorithm cannot be perfectly random, as there are fewer seeds than possible outputs. Therefore, a security objective for this algorithm can be defined as follows: no computationally-bounded adversary, which does not know the seed, should be able to distinguish the output from a uniformly random sequence.

This algorithm can be precisely defined using a formal security game and is referred to in this thesis as a standard pseudo-random number generator (PRNG). In this context, the seed of the generator is the most critical part, as an adversary with access to it can predict the future output of the generator.

##### Stateful Pseudo-Random Number Generators

The generation of a random seed can be amortized, allowing the computation of several outputs with the same seed. Since the algorithm is deterministic, it must modify the seed for each output. This class of algorithm can also be precisely defined using a formal security game and is referred to in this thesis as a stateful PRNG. The generator is modeled as a stateful algorithm, and its security is formalized by the indistinguishability of all outputs generated from a secret seed. As the seed is reused, the generator needs to store it between the generation of two outputs.

This design has been implemented in many systems, including hardware security modules. However, several attacks have been mounted against some generators, exploiting the predictability of the seed or potential leakage from the generator's memory. The memory of the generator is thus its most critical part, as an adversary with access to it can predict the future output of the generator. In this thesis, we refer to the internal state for the memory of the stateful PRNG.

##### Pseudo-Random Number Generators with Input

A second solution to amortize the use of a random seed is to allow the algorithm to continuously collect new inputs in addition to the seed and produce outputs that depend on these previous inputs. This class of algorithm is referred to in this thesis as a PRNG with input.

In this scenario, the idea is to use as many environmental events as possible, gather them in the internal state \( S \) of the generator, and produce outputs that are indistinguishable from random. An expected property of the generator is that it accumulates successive inputs properly, so that each new input is actually taken into account. The compromise of the internal state remains critical, but since new inputs are collected continuously, the generator may recover from a compromise if enough inputs are collected. Additionally, as inputs may be adversarially influenced, another expected property is that the generator preserves its state against such inputs.

Formalizing the expected security properties of a PRNG with input has been a challenging task and is the main objective of this thesis. In Chapter 3, we present the successive models for PRNGs with inputs that have been proposed, and in Chapter 4, we present our new security model. A major contribution of our new security model is the formalization of both the recovery and preservation properties.

### 1.2 Randomness Extractors

A randomness extractor takes as input a source of possibly correlated bits and produces an output that is close to the uniform distribution.

In Chapter 2, we provide a survey of different notions of extractors used in this thesis. We show that no deterministic extractor can extract randomness from all sources, leading to the need for seeded extractors, which use a second random parameter seed for extraction. We recall that the existence of seeded extractors is guaranteed by the probabilistic method, and we present the famous Leftover Hash Lemma, which constructively builds randomness extractors from hash function families. We also show how the Leftover Hash Lemma can be used to construct strong extractors from universal hash functions and resilient extractors from finite pairwise independent hash functions.

If one wants to build a secure scheme based on seeded extractors, the seed parameter will preferably be made public, and a tradeoff must be made between the independence of the seed and the randomness source, the size of the randomness source, and the adversary’s capabilities:

1. **Independence Assumption**: 
   - **Not Ensured**: One solution is to restrict the randomness sources to use a resilient extractor, as proposed in [BST03, BH05]. Another solution is to restrict the adversary’s computational capabilities.
   - **Ensured**: If independence can be ensured, one can use strong extractors.

The security model we propose for PRNGs with input relies on the second assumption. We exhibit some impossibility results showing that a scheme secure when independence is ensured can be broken if there is a correlation between the seed and the randomness source. Specifically, we point out an explicit impossibility result for the CTR_DRBG, a standard proposed by the NIST.

### 1.3 Security Models

#### Security Against Source and State Compromise Attacks

Several desirable security properties for stateful PRNGs and PRNGs with inputs have been identified in various standards [ISO11, Kil11, ESC05, BK12]. These standards consider adversaries with various means, including those who have access to the output of the generator, those who can control the source of the generator, and those who can control the internal state of the generator. Several security notions have been defined:

- **Resilience**: An adversary must not be able to predict future outputs even if they can influence the input used to initialize or refresh the internal state of the generator.
- **Forward Security (Backward Security)**: An adversary must not be able to predict past (future) outputs even if they can compromise the internal state of the generator. Backward security implies that the generator is refreshed with new inputs after a compromise.

In 1998, Gutmann [Gut98] and Kelsey, Schneier, Wagner, and Hall [KSWH98] provided useful guidelines for designing secure PRNGs with input. They considered a generator as a pair of algorithms: one to collect inputs and one to generate outputs. In 2001, Bellare and Yee [BY03] proposed a dedicated security model for forward security. In 2002, Desai, Hevia, and Yin [DHY02] modeled secure PRNGs with input as a pair of algorithms: the Seed Generation algorithm and the Output Generation algorithm. This model assumes the existence of an entropy pool, distinct from the internal state, where randomness is accumulated and used to refresh the internal state of the generator. In 2003, Barak, Shaltiel, and Tromer [BST03] proposed a security model where an adversary can control the randomness source, emphasizing the importance of a randomness extractor as a core component of the generator. In 2005, Barak and Halevi [BH05] modeled PRNGs with input as a pair of algorithms (refresh, next) and defined a new security property called robustness, which assesses the behavior of a generator after the compromise of its internal state but fails to capture the small and gradual entropy accumulation present in most real-life implementations.

#### Security Against Side-Channel Attacks

Under the robustness security notion, an adversary can observe the inputs and outputs of a generator, manipulate its entropy source, and compromise its internal state. While this notion seems reasonably strong for practical purposes, it does not fully consider the reality of embedded devices, which may be subject to side-channel attacks. In these attacks, an adversary can exploit physical leakage through power consumption, execution time, or electromagnetic radiation.

Many countermeasures have been proposed to thwart specific attacks, but only recently have significant efforts been made to define generic security models. For example, the bounded retrieval model [DLW06, Dzi06] captures attacks where the adversary is limited to a bounded amount of leakage over the entire lifetime of a cryptosystem. The leakage-resilient model [DP08], on the other hand, encompasses many more attacks with only a limitation in the amount of leakage per execution. Since the leakage-resilient model captures most known side-channel attacks, it has led to the design of several secure primitives [Pie09, DP10, FPS12, YS13, ABF13]. Another model proposed by Prouff and Rivain [PR13] fits well with the reality of embedded security by assuming that every elementary computation in the implementation leaks a noisy function of its input, making the security of the system dependent on the level of noise.

In the specific context of PRNGs, several leakage-resilient models and constructions have been proposed (e.g., [YSPY10, SPY13, YS13]). The work of Yu et al. [YSPY10] proposes a very efficient construction of a leakage-resilient PRNG, and the work of Standaert et al. [SPY13] shows how to obtain efficient constructions of leakage-resilient PRNGs by relying on empirically verifiable assumptions. None of these works, however, consider potentially biased random sources.

#### Security Against Memory Attacks

Designers of PRNGs with input assume that the internal state \( S \) remains secret to the adversary. However, for software implementations, this may be unrealistic as the internal state can be partially compromised through memory corruption attacks such as buffer overflows or side-channel attacks. Different memory corruption attacks were presented by Erlingsson et al. [EYP10] and van der Veen et al. [vdVdSCB12], and fault attacks against cryptographic schemes were presented by Biham and Shamir [BS97] and Boneh et al. [BDL01]. For example, the Heartbleed Bug [Hea] affected the OpenSSL cryptographic library, allowing an adversary to access the content of the memory of the OpenSSL process run by a server or client. Although the adversary can control the size of the compromised memory, the location cannot be controlled, leading to total or partial access to sensitive information, such as the internal state of the generator.

In Chapter 3, we provide a complete description of the security models for source and state compromise attacks and propose a comparison between these models. We also present three proposals for constructing stateful PRNGs that are secure against side-channel attacks.

### 1.4 Potential Weaknesses

Currently, numerous implementations of PRNGs with input from different providers rely on internal directives and parameters that are poorly documented or undocumented. In most implementations, a generator contains a dedicated internal state \( S \), which is periodically refreshed with inputs collected from its environment (such as network I/O, keyboard presses, processor clock cycles) and used to compute pseudo-random strings. The randomness collection task is harder and takes much more time than the output generation task, which is why implementations typically maintain a dedicated memory as the internal state. This internal state is the most critical part of the generator and must be kept secure during its update.

The lack of assurance about the generated random numbers can cause serious damages in cryptographic protocols, and vulnerabilities can be exploited by adversaries to mount concrete attacks. For example, in 1996, Goldberg and Wagner [Net96] analyzed the Netscape PRNG used in Version 1.1 of the international version of Netscape’s Solaris 2.4 browser. Their analysis showed that the creation of the internal state of the generator only depended on three values: the PID, the PPID, and a call to `time`, mixed together using a linear function and MD5 hash function. Any generated cryptographic key only relied on these four values, which could easily be guessed by an adversary.

Another striking example is the failure in the Debian Linux distribution [CVE08], where commented code in the OpenSSL PRNG led to insufficient entropy gathering, allowing an adversary to conduct brute force guessing attacks against cryptographic keys.

Moreover, cryptographic algorithms are highly vulnerable to weaknesses in the underlying random number generation process. For instance, several works have demonstrated that if nonces for the Digital Signature Algorithm are generated with a weak PRNG, the secret key can be quickly recovered after seeing a few signatures [NS02]. This illustrates the need for precise evaluation of PRNGs with input based on clear security requirements.

Despite this, only a few implementations of PRNGs have been analyzed since [Gut98, KSWH98]. Concerning system PRNGs with input, an analysis of Linux PRNGs `/dev/random` and `/dev/urandom` was done in 2006 by Gutterman, Pinkas, and Reinman [GPR06], where they presented an attack for which a fix has been published. The Windows PRNG `CryptGenRandom` was analyzed in 2006 by Dorrendorf, Gutterman, and Pinkas [DGP07]; the authors showed an attack on the forward security of the generator implemented in Windows 2000, for which a fix has been published.

Lenstra, Hughes, Augier, Bos, Kleinjung, and Wachter [LHA+12] showed that a non-negligible percentage of RSA keys share prime factors. Heninger, Durumeric, Wustrow, and Halderman [HDWH12] presented an analysis of the behavior of Linux generators, explaining the generation of low-entropy keys at boot time and the findings of Lenstra et al.

Concerning application PRNGs, Argyros and Kiayias [AK12] showed practical attacks on web applications exploiting randomness vulnerabilities in PHP applications. Michaelis et al. [MMS13] described and analyzed several Java implementations, identifying some weaknesses. More recently, a flaw in the Android PRNG, identified by Kim, Han, and Lee [KHL13], has been actively exploited against Android-based Bitcoin wallets [SEC13].

### 1.5 Contributions of this Thesis

#### New Security Models

In 2013, in [DPR+13], in a common work with Dodis, Pointcheval, Vergnaud, and Wichs, we proposed the first contribution of this thesis. We extended the previous work of [BH05] and formalized the accumulation process of a PRNG with input. We introduced the notion of an adversarially controlled Distribution Sampler, allowing an adversary to control the distribution of the inputs collected by a generator, and a new property of entropy accumulation. We proposed two simpler notions of security: recovering security, which models how a generator should recover from a compromise of its internal state by accumulating entropy, and preserving security, which models how a generator with a non-compromised internal state should behave in the presence of adversarial inputs. We complemented the robustness security model with these stronger adversaries and proved that, taken together, recovering and preserving security imply the full notion of robustness. We proposed a simple and very efficient construction that is provably secure (i.e., robust) in our new and stronger adversarial model, based on simple operations in a finite field and a standard secure PRNG \( G \). We also analyzed the PRNG with input proposed by Barak and Halevi, proving that it does not generically satisfy our new property of entropy accumulation. Benchmarks between this construction and the Linux generators show that our construction is, on average, more efficient when recovering from a compromised internal state and when generating cryptographic keys.

This work is presented in Chapter 4.

#### Robustness Against Memory Attacks

In 2014, in [CR14], in a common work with Cornejo, we extended the previous works of [BH05] and [DPR+13] to model the expected security of PRNGs with input against memory attacks. These attacks capture real-life situations where an adversary can recover or modify a significant fraction of the secret stored in memory, even if those secrets have never been involved in any computation. The formalization of security against these attacks is fully described by Akavia, Goldwasser, and Vaikuntanathan [AGV09]. In our work, we focused on a class of memory attacks where the adversary directly gets access to some fraction of the internal state of the generator or sets this fraction to a chosen value. We formally extended the security model of [DPR+13] with this new adversary profile and proved that the original construction of [DPR+13] can be extended in this model.

This work is presented in Chapter 5.

#### Robustness Against Side-Channel Attacks

In 2015, in [ABP+15], in a common work with Abdalla, Belaid, Pointcheval, and Vergnaud, we built a practical and robust PRNG with input that can resist side-channel attacks. Since the construction of [DPR+13] seemed to be a good candidate, we used it as the basis of our work. We extended its security model to include leakage-resilient security and defined stronger properties for the underlying standard PRNG to resist side-channel attacks. We analyzed the robust construction based on polynomial hash functions given in [DPR+13], showing why its instantiation may be vulnerable to side-channel attacks. We also proposed three concrete instantiations with a small overhead. While two of them are adaptations of existing constructions, the third one is a new proposal providing better security at the expense of a larger internal state. We proved that the whole construction and its instantiations are leakage-resilient and robust and provided performance features for several security levels. Finally, we gave instantiations of this construction based on AES in counter mode, which are only slightly less efficient than the original instantiation proposed in [DPR+13]. Our instantiations require that the implementation of AES in counter mode is secure against Simple Power Analysis attacks, as very few calls are made with the same secret key.

This work is presented in Chapter 6.

#### Security Analysis of Concrete Pseudo-Random Number Generators

We propose a new analysis of concrete PRNGs with input that are used in practice in real-life security products. In [DPR+13], we provided a precise assessment of the security of the two Linux PRNGs, `/dev/random` and `/dev/urandom`.