:::
::: orderedlist
**流程**
1.  要创建卷组，请使用以下命令：
    ``` screen
    # vgcreate myvg /dev/vdb1 /dev/vdb2
    ```
    这将创建一个名为 [*myvg*]{.emphasis} 的 VG。PV
    [*/dev/vdb1*]{.emphasis} 和 [*/dev/vdb2*]{.emphasis} 是 VG
    [*myvg*]{.emphasis} 的基本存储级别。
    详情请查看 `vgcreate`{.literal} man page。
:::
之后可以使用 PV 扩展上述 VG。要扩展 VG，请使用以下命令：
``` screen
# vgextend myvg /dev/vdb3
```
:::
::: section
::: titlepage
# []{#deploying-lvm_configuring-and-managing-logical-volumes.html#creating-lvm-logical-volume_deploying-lvm}创建 LVM 逻辑卷 {.title}
:::
这个步骤描述了如何创建 LVM 逻辑卷（LV）。
::: itemizedlist
**先决条件**
-   已安装 `lvm2`{.literal} 软件包。
-   已创建卷组。请参阅 ["创建 LVM
    卷组"一节](#deploying-lvm_configuring-and-managing-logical-volumes.html#creating-lvm-volume-group_deploying-lvm "创建 LVM 卷组"){.xref}
    中的说明如何进行操作。
:::
::: orderedlist
**流程**
1.  要创建逻辑卷，请使用以下命令：
    ``` screen
    # lvcreate -n lv01 -L 500M myvg
    ```
    `-n`{.literal} 选项允许用户将 LV 名称设置为
    [*lv01*]{.emphasis}。`-L`{.literal} 选项允许用户在本示例中以 Mb
    单位设定 LV 的大小，但可以使用其它单元。默认情况下 LV
    类型是线性的，但用户可使用 `--type`{.literal} 选项指定所需类型。
    ::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 重要 {.title}
    如果 VG
    没有足够数量的可用物理扩展用于请求的大小和类型，该命令将失败。
    :::
    详情请查看 `lvcreate`{.literal} man page。
:::
:::
:::
[]{#assembly_configuring-lvm-volumes-configuring-and-managing-logical-volumes.html}
::: chapter
::: titlepage
# []{#assembly_configuring-lvm-volumes-configuring-and-managing-logical-volumes.html#assembly_configuring-lvm-volumes-configuring-and-managing-logical-volumes}第 4 章 配置 LVM 逻辑卷 {.title}
:::
以下步骤提供基本 LVM 管理任务示例。
::: section
::: titlepage
# []{#assembly_configuring-lvm-volumes-configuring-and-managing-logical-volumes.html#ref_using_cli_commands-configuring-lvm-volumes}使用 CLI 命令 {.title}
:::
以下小节描述了 LVM CLI 命令的一些一般操作功能。
### []{#assembly_configuring-lvm-volumes-configuring-and-managing-logical-volumes.html#_specifying_units_in_a_command_line_argument}在命令行参数中指定单元
当在命令行参数中需要大小时，可以明确指定其单位。如果您没有指定单位，那么就使用默认单位，通常为
KB 或者 MB。LVM CLI 命令不接受分数。
当在命令行参数中指定单位时，LVM 是不区分大小写的， M 和 m
是相同的，例如，都代表单位是 1024。但是，当在命令中指定
`--units`{.literal} 参数时，小写表示该单位是 1024，而大写表示该单位是
1000。
### []{#assembly_configuring-lvm-volumes-configuring-and-managing-logical-volumes.html#_specifying_volume_groups_and_logical_volumes}指定卷组和逻辑卷
在 LVM CLI 命令中指定卷组或者逻辑卷时请注意以下几点。
::: itemizedlist
-   如果命令使用卷组或者逻辑卷名称作为参数，则完整路径名称是可选的。在名为
    `vg0`{.literal} 卷组中的一个名为 `lvol0`{.literal}
    的逻辑卷可以被指定为 `vg0/lvol0`{.literal}。
-   当需要卷组列表但为空时，则使用所有卷组的列表替代。
-   当需要列出逻辑卷但提供了一个卷组，则使用在那个卷组中的所有逻辑卷列表替代。例如：
    `lvdisplay vg0`{.literal} 命令将显示卷组 `vg0`{.literal}
    中的所有逻辑卷。
:::
### []{#assembly_configuring-lvm-volumes-configuring-and-managing-logical-volumes.html#_increasing_output_verbosity}增加输出详细程度
所有 LVM 命令都接受 `-v`{.literal}
参数，该参数可多次输入来提高输出的详细程度。以下示例显示了
`lvcreate`{.literal} 命令的默认输出。
``` literallayout
# lvcreate -L 50MB new_vg
  Rounding up size to full physical extent 52.00 MB
  Logical volume "lvol0" created
```
以下命令显示带有 `-v`{.literal} 参数的 `lvcreate`{.literal}
命令的输出结果。
``` literallayout
# lvcreate -v -L 50MB new_vg
  Rounding up size to full physical extent 52.00 MB
    Archiving volume group "new_vg" metadata (seqno 1).
    Creating logical volume lvol0
    Creating volume group backup "/etc/lvm/backup/new_vg" (seqno 2).
    Activating logical volume new_vg/lvol0.
    activation/volume_list configuration setting not defined: Checking only host tags for new_vg/lvol0.
    Creating new_vg-lvol0
    Loading table for new_vg-lvol0 (253:0).
    Resuming new_vg-lvol0 (253:0).
    Wiping known signatures on logical volume "new_vg/lvol0"
    Initializing 4.00 KiB of logical volume "new_vg/lvol0" with value 0.
  Logical volume "lvol0" created
```
`-vv`{.literal}、`-vvv`{.literal} 和 `-vvvv`{.literal}
参数显示命令执行的详情。`-vvvv`{.literal}
参数提供最大的信息量。以下示例显示了 `lvcreate`{.literal}
命令的输出行前几行（指定了 `-vvvv`{.literal} 参数）。
``` literallayout
# lvcreate -vvvv -L 50MB new_vg
#lvmcmdline.c:913         Processing: lvcreate -vvvv -L 50MB new_vg
#lvmcmdline.c:916         O_DIRECT will be used
#config/config.c:864       Setting global/locking_type to 1
#locking/locking.c:138       File-based locking selected.
#config/config.c:841       Setting global/locking_dir to /var/lock/lvm
#activate/activate.c:358       Getting target version for linear
#ioctl/libdm-iface.c:1569         dm version   OF   [16384]
#ioctl/libdm-iface.c:1569         dm versions   OF   [16384]
#activate/activate.c:358       Getting target version for striped
#ioctl/libdm-iface.c:1569         dm versions   OF   [16384]
#config/config.c:864       Setting activation/mirror_region_size to 512
...
```
### []{#assembly_configuring-lvm-volumes-configuring-and-managing-logical-volumes.html#_displaying_help_for_lvm_cli_commands}显示 LVM CLI 命令的帮助信息
您可以使用命令的 `--help`{.literal} 参数显示任意 LVM CLI
命令的帮助信息。
``` literallayout
# commandname --help
```
要显示某个命令的 man page，请执行 `man`{.literal} 命令：
``` literallayout
# man commandname
```
`man lvm`{.literal} 命令提供有关 LVM 的常规在线信息。
:::
::: section
::: titlepage
# []{#assembly_configuring-lvm-volumes-configuring-and-managing-logical-volumes.html#proc_creating-an-LVM-volume-configuring-lvm-volumes}在三个磁盘中创建 LVM 逻辑卷 {.title}
:::
这个示例步骤创建一个名为 `mylv`{.literal} 的 LVM 逻辑卷，它由磁盘
`/dev/sda1`{.literal}、`/dev/sdb1`{.literal} 和 `/dev/sdc1`{.literal}
组成。
::: orderedlist
1.  要在卷组中使用磁盘，请使用 `pvcreate`{.literal} 命令将其标记为 LVM
    物理卷。
    ::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 警告 {.title}
    这个命令会破坏 `/dev/sda1`{.literal}、`/dev/sdb1`{.literal} 和
    `/dev/sdc1`{.literal} 中的所有数据。
    :::
    ``` literallayout
    # pvcreate /dev/sda1 /dev/sdb1 /dev/sdc1
      Physical volume "/dev/sda1" successfully created
      Physical volume "/dev/sdb1" successfully created
      Physical volume "/dev/sdc1" successfully created
    ```
2.  创建由您创建的 LVM 物理卷组成的卷组。下面的命令创建了卷组
    `myvg`{.literal}。
    ``` literallayout
    # vgcreate myvg /dev/sda1 /dev/sdb1 /dev/sdc1
      Volume group "myvg" successfully created
    ```
    您可以使用 `vgs`{.literal} 命令显示新卷组的属性。
    ``` literallayout
    # vgs
      VG   #PV #LV #SN Attr   VSize  VFree
      myvg   3   0   0 wz--n- 51.45G 51.45G
    ```
3.  从您创建的卷组中创建逻辑卷。下面的命令在卷组 `mylv`{.literal}
    中创建逻辑卷 `myvg`{.literal}。这个示例创建的逻辑卷，它使用了卷组的
    2GB。
    ``` literallayout
    # lvcreate -L 2G -n mylv myvg
      Logical volume "mylv" created
    ```
4.  在逻辑卷中创建文件系统。下面的命令在逻辑卷中创建了一个
    `ext4`{.literal} 文件系统。
    ``` literallayout
    # mkfs.ext4 /dev/myvg/mylv
    mke2fs 1.44.3 (10-July-2018)
    Creating filesystem with 524288 4k blocks and 131072 inodes
    Filesystem UUID: 616da032-8a48-4cd7-8705-bd94b7a1c8c4
    Superblock backups stored on blocks:
            32768, 98304, 163840, 229376, 294912
    Allocating group tables: done
    Writing inode tables: done
    Creating journal (16384 blocks): done
    Writing superblocks and filesystem accounting information: done
    ```
    下面的命令挂载逻辑卷并报告文件系统磁盘空间用量。
    ``` literallayout
    # mount /dev/myvg/mylv /mnt
    # df
    Filesystem             1K-blocks     Used  Available Use% Mounted on
    /dev/mapper/myvg-mylv    1998672     6144    1871288   1% /mnt
    ```
:::
:::
::: section
::: titlepage
# []{#assembly_configuring-lvm-volumes-configuring-and-managing-logical-volumes.html#proc_creating-a-striped-logical-volume_configuring-lvm-volumes}创建 RAID0（条状）逻辑卷 {.title}
:::
RAID0 逻辑卷以条的大小为单位，将逻辑卷数据分散到多个数据子卷中。
创建 RAID0 卷的命令格式如下。
``` literallayout
lvcreate --type raid0[_meta] --stripes Stripes --stripesize StripeSize VolumeGroup [PhysicalVolumePath ...]
```
::: table
[]{#assembly_configuring-lvm-volumes-configuring-and-managing-logical-volumes.html#idm140471699255408}
**表 4.1. RAID0 命令创建参数**
::: table-contents
  参数                                  描述
  ------------------------------------- --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  `--type raid0[_meta]`{.literal}       指定 `raid0`{.literal} 创建一个没有元数据卷的 RAID0 卷。指定 `raid0_meta`{.literal} 创建一个带有元数据卷的 RAID0 卷。因为 RAID0 是不弹性的，所以不需要保存任何已镜像的数据块（如 RAID1/10），或者计算并保存任何奇偶校验块（如 RAID4/5/6）。因此，它不需要元数据卷来保持有关镜像或奇偶校验块重新同步进程的状态。然而，在从 RAID0 转换到 RAID4/5/6/10 时元数据卷是强制的，并且指定 `raid0_meta`{.literal} 会预先分配元数据卷以避免分配失败。
  `--stripes Stripes`{.literal}         指定在其中分割逻辑卷的设备数。
  `--stripesize StripeSize`{.literal}   以 KB 为单位指定每个条的大小。这是在移动到下一个设备前写入一个设备的数据量。
  `VolumeGroup`{.literal}               指定要使用的卷组。
  `PhysicalVolumePath`{.literal} ...​    指定要使用的设备。如果没有指定，LVM 会选择 [*Stripes*]{.emphasis} 选项指定的设备数，每个条带一个。
:::
:::
这个示例步骤创建名为 `mylv`{.literal} 的 LVM RAID0 逻辑卷，可在磁盘
`/dev/sda1`{.literal}、`/dev/sdb1`{.literal} 和 `/dev/sdc1`{.literal}
跨磁盘条状分布数据。
::: orderedlist
1.  使用 `pvcreate`{.literal} 命令将卷组中您要使用的磁盘标记为 LVM
    物理卷。
    ::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 警告 {.title}
    这个命令会破坏 `/dev/sda1`{.literal}、`/dev/sdb1`{.literal} 和
    `/dev/sdc1`{.literal} 中的所有数据。
    :::
    ``` literallayout
    # pvcreate /dev/sda1 /dev/sdb1 /dev/sdc1
      Physical volume "/dev/sda1" successfully created
      Physical volume "/dev/sdb1" successfully created
      Physical volume "/dev/sdc1" successfully created
    ```
2.  创建卷组 `myvg`{.literal}。下面的命令创建了卷组 `myvg`{.literal}。