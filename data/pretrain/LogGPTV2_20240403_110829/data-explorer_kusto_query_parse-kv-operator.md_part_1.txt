---
title:  parse-kv operator
description: Learn how to use the parse-kv operator to represent structured information extracted from a string expression in a key/value form.
ms.reviewer: alexans
ms.topic: reference
ms.date: 03/12/2023
---
# parse-kv operator
Extracts structured information from a string expression and represents the information in a key/value form.
The following extraction modes are supported:
* [**Specified delimeter**](#specified-delimeter): Extraction based on specified delimiters that dictate how keys/values and pairs are separated from each other.
* [**Non-specified delimeter**](#nonspecified-delimiter): Extraction with no need to specify delimiters. Any nonalphanumeric character is considered a delimiter.
* [**Regex**](#regex): Extraction based on [regular expressions](re2.md).
## Syntax
### Specified delimeter
*T* `|` `parse-kv` *Expression* `as` `(` *KeysList* `)` `with` `(` `pair_delimiter` `=` *PairDelimiter* `,` `kv_delimiter` `=` *KvDelimiter*  [`,` `quote` `=` *QuoteChars* ... [`,` `escape` `=` *EscapeChar* ...]] [`,` `greedy` `=` `true`] `)`
### Nonspecified delimiter
*T* `|` `parse-kv` *Expression* `as` `(` *KeysList* `)` `with` `(` [`quote` `=` *QuoteChars* ... [`,` `escape` `=` *EscapeChar* ...]] `)`
### Regex
*T* `|` `parse-kv` *Expression* `as` `(` *KeysList* `)` `with` `(` `regex` `=` *RegexPattern*`)` `)`
[!INCLUDE [syntax-conventions-note](../../includes/syntax-conventions-note.md)]
## Parameters
|Name|Type|Required|Description|
|--|--|--|--|
|*Expression*| `string` | :heavy_check_mark:|The expression from which to extract key values.|
|*KeysList*| `string` | :heavy_check_mark:|A comma-separated list of key names and their value data types. The order of the keys doesn't have to match the order in which they appear in the text.|
|*PairDelimiter*| `string` ||A delimiter that separates key value pairs from each other.|
|*KvDelimiter*| `string` ||A delimiter that separates keys from values.|
|*QuoteChars*| `string` ||A one- or two-character string literal representing opening and closing quotes that key name or the extracted value may be wrapped with. The parameter can be repeated to specify a separate set of opening/closing quotes.|
|*EscapeChar*| `string` ||A one-character string literal describing a character that may be used for escaping special characters in a quoted value. The parameter can be repeated if multiple escape characters are used.|
|*RegexPattern*| `string` ||A [regular expression](re2.md) containing two capturing groups exactly. The first group represents the key name, and the second group represents the key value.|
## Returns
The original input tabular expression *T*, extended with columns per specified keys to extract.
> [!NOTE]
>
> * If a key doesn't appear in a record, the corresponding column value will either be `null` or an empty string, depending on the column type.
> * Only keys that are listed in the operator are extracted.
> * The first appearance of a key is extracted, and subsequent values are ignored.
> * When extracting keys and values, leading and trailing white spaces are ignored.
## Examples
### Extraction with well-defined delimiters
In the following example, keys and values are separated by well defined delimiters. These delimeters are comma and colon characters.
> [!div class="nextstepaction"]
> Run the query
```kusto
print str="ThreadId:458745723, Machine:Node001, Text: The service is up, Level: Info"
| parse-kv str as (Text: string, ThreadId:long, Machine: string) with (pair_delimiter=',', kv_delimiter=':')
| project-away str
```
**Output**
|Text| ThreadId| Machine|
|--|--|--|
|The service is up| 458745723| Node001
### Extraction with value quoting
Sometimes key names or values are wrapped in quotes, which allow the values themselves to contain delimiter characters. The following examples show how a `quote` argument is used for extracting such values.
> [!div class="nextstepaction"]
> Run the query
```kusto
print str='src=10.1.1.123 dst=10.1.1.124 bytes=125 failure="connection aborted" "event time"=2021-01-01T10:00:54'
| parse-kv str as (['event time']:datetime, src:string, dst:string, bytes:long, failure:string) with (pair_delimiter=' ', kv_delimiter='=', quote='"')
| project-away str
```
**Output**
|event time| src| dst| bytes| failure|
|--|--|--|--|--|
|2021-01-01 10:00:54.0000000| 10.1.1.123| 10.1.1.124| 125| connection aborted|
The following example uses different opening and closing quotes:
> [!div class="nextstepaction"]
> Run the query
```kusto
print str='src=10.1.1.123 dst=10.1.1.124 bytes=125 failure=(connection aborted) (event time)=(2021-01-01 10:00:54)'
| parse-kv str as (['event time']:datetime, src:string, dst:string, bytes:long, failure:string) with (pair_delimiter=' ', kv_delimiter='=', quote='()')
| project-away str
```
**Output**
|event time| src| dst| bytes| failure|