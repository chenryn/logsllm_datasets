    ### 注意 {.title}
    在下表中，值已转换为 MiB 或 GiB。`vdostats`{.literal} 输出中的大小为
    4,096 B。
    :::
    :::
    :::
:::
::: itemizedlist
**清理步骤**
-   删除 VDO 测试卷，如 ["清理 VDO
    测试卷"一节](#testing-vdo-space-savings_deduplicating-and-compressing-storage.html#cleaning-up-the-vdo-test-volume_testing-vdo-space-savings "清理 VDO 测试卷"){.xref}
    所述。
:::
:::
::: section
::: titlepage
# []{#testing-vdo-space-savings_deduplicating-and-compressing-storage.html#measuring-vdo-compression_testing-vdo-space-savings}测量 VDO 压缩 {.title}
:::
此流程在 VDO 测试卷中测试 VDO 数据压缩的效率。
::: itemizedlist
**先决条件**
-   挂载新创建的 VDO 测试卷。详情请查看 ["创建 VDO
    测试卷"一节](#testing-vdo-space-savings_deduplicating-and-compressing-storage.html#creating-a-vdo-test-volume_testing-vdo-space-savings "创建 VDO 测试卷"){.xref}。
:::
::: orderedlist
**流程**
1.  禁用 deduplication 并在 VDO 测试卷中启用压缩：
    ``` screen
    # vdo disableDeduplication --name=vdo-test
    # vdo enableCompression --name=vdo-test
    ```
2.  同步 VDO 卷以完成所有未完成压缩：
    ``` screen
    # sync && dmsetup message vdo-test 0 sync-dedupe
    ```
3.  在传输前检查 VDO 统计：
    ``` screen
    # vdostats --verbose | grep "blocks used"
    ```
    记录 `已使用的数据块`{.literal} 和 `逻辑块使用`{.literal} 的值。
4.  VDO 优化文件系统开销以及实际的用户数据。计算
    `使用减去 数据块的逻辑块`{.literal} 压缩，通过压缩来保存 4 KiB
    块的数量。``{=html}
5.  将 `/lib`{.literal} 目录的内容复制到 VDO 卷中：
    ``` screen
    # cp --verbose --recursive /lib /mnt/vdo-test
    ...
    sent 152508960 bytes  received 60448 bytes  61027763.20 bytes/sec
    total size is 152293104  speedup is 1.00
    ```
    记录复制数据的总大小。
6.  同步 Linux 缓存和 VDO 卷：
    ``` screen
    # sync && dmsetup message vdo-test 0 sync-dedupe
    ```
7.  再次检查 VDO 统计：
    ``` screen
    # vdostats --verbose | grep "blocks used"
    ```
    观察 `所用的逻辑块`{.literal} `和数据块使用`{.literal} 的值。
8.  使用以下公式计算压缩保存的字节数：
    ``` screen
    saved_bytes = (logical_blocks_used - data_blocks_used) * 4096
    ```
:::
::: itemizedlist
**清理步骤**
-   删除 VDO 测试卷，如 ["清理 VDO
    测试卷"一节](#testing-vdo-space-savings_deduplicating-and-compressing-storage.html#cleaning-up-the-vdo-test-volume_testing-vdo-space-savings "清理 VDO 测试卷"){.xref}
    所述。
:::
:::
::: section
::: titlepage
# []{#testing-vdo-space-savings_deduplicating-and-compressing-storage.html#measuring-total-vdo-space-savings_testing-vdo-space-savings}测量 VDO 空间总耗 {.title}
:::
此流程测试 VDO 数据变异以及在 VDO 测试卷中压缩的效率。
::: orderedlist
**流程**
1.  按照 ["创建 VDO
    测试卷"一节](#testing-vdo-space-savings_deduplicating-and-compressing-storage.html#creating-a-vdo-test-volume_testing-vdo-space-savings "创建 VDO 测试卷"){.xref}
    所述创建并挂载 VDO 卷。
2.  [执行测量 VDO 重复数据删除和在同一卷中 测量 VDO
    压缩中的测试](#testing-vdo-space-savings_deduplicating-and-compressing-storage.html#measuring-vdo-deduplication_testing-vdo-space-savings "测量 VDO 复制"){.link}，而不删除它。观察
    `vdostats`{.literal} 输出中空间节省的变化。
3.  使用您自己的数据集进行测试。
:::
:::
::: section
::: titlepage
# []{#testing-vdo-space-savings_deduplicating-and-compressing-storage.html#testing-the-effect-of-trim-and-discard-on-vdo_testing-vdo-space-savings}测试 TRIM 和 DISCARD 对 VDO 的影响 {.title}
:::
此流程测试 `TRIM`{.literal} 和 `DISCARD`{.literal} 命令是否正确释放 VDO
测试卷中已删除文件的块。它演示了，丢弃告知 VDO 不再使用空间。
::: itemizedlist
**先决条件**
-   挂载新创建的 VDO 测试卷。详情请查看 ["创建 VDO
    测试卷"一节](#testing-vdo-space-savings_deduplicating-and-compressing-storage.html#creating-a-vdo-test-volume_testing-vdo-space-savings "创建 VDO 测试卷"){.xref}。
:::
::: orderedlist
**流程**
1.  准备可记录测试结果的表：
    ::: informaltable
      步骤                      已使用文件空间(MB)   已使用的数据块   使用的逻辑块
      ------------------------- -------------------- ---------------- --------------
      Initial                                                          
      添加 1 GiB 文件                                                  
      运行 `fstrim`{.literal}                                          
      删除 1 GiB 文件                                                  
      运行 `fstrim`{.literal}                                          
    :::
2.  清理文件系统来删除不需要的块：
    ``` screen
    # fstrim /mnt/vdo-test
    ```
    该命令可能需要很长时间。
3.  记录文件系统中的初始空间使用情况：
    ``` screen
    $ df -m /mnt/vdo-test
    ```
4.  请查看 VDO 卷使用的物理和逻辑数据块数：
    ``` screen
    # vdostats --verbose | grep "blocks used"
    ```
5.  使用 VDO 卷上的非重复数据创建一个 1 GiB 文件：
    ``` screen
    $ dd if=/dev/urandom of=/mnt/vdo-test/file bs=1M count=1K
    ```
6.  再次记录空间使用量：
    ``` screen
    $ df -m /mnt/vdo-test
    # vdostats --verbose | grep "blocks used"
    ```
    文件系统应使用额外的 1 GiB。`使用的数据块`{.literal} 和
    `逻辑块使用`{.literal} 的值应该类似增加。
7.  再次执行文件系统：
    ``` screen
    # fstrim /mnt/vdo-test
    ```
8.  再次检查空间用量，确认清除操作不会影响物理卷的使用：
    ``` screen
    $ df -m /mnt/vdo-test
    # vdostats --verbose | grep "blocks used"
    ```
9.  删除 1 GiB 文件：
    ``` screen
    $ rm /mnt/vdo-test/file
    ```
10. 检查并记录空间使用情况：
    ``` screen
    $ df -m /mnt/vdo-test
    # vdostats --verbose | grep "blocks used"
    ```
    文件系统知道已删除了某个文件，但是由于没有指向底层存储，物理或逻辑块的数量不会改变。
11. 再次执行文件系统：
    ``` screen
    # fstrim /mnt/vdo-test
    ```
12. 检查并记录空间使用情况：
    ``` screen
    $ df -m /mnt/vdo-test
    # vdostats --verbose | grep "blocks used"
    ```
    `fstrim`{.literal}
    实用程序在文件系统中查找可用块，并为未使用的地址发送
    `TRIM`{.literal} 命令到 VDO 卷，该地址会释放相关的逻辑块。VDO 处理
    `TRIM`{.literal} 命令以释放底层物理块。
:::
::: itemizedlist
**其它资源**
-   有关 `TRIM`{.literal} 和 `DISCARD`{.literal}
    命令、`fstrim`{.literal} 实用程序以及 `discard`{.literal}
    挂载选项的详情，请参考 [第 5 章
    *丢弃未使用块*](#discarding-unused-blocks_deduplicating-and-compressing-storage.html "第 5 章 丢弃未使用块"){.xref}
:::
:::
:::
[]{#testing-vdo-performance_deduplicating-and-compressing-storage.html}
::: chapter
::: titlepage
# []{#testing-vdo-performance_deduplicating-and-compressing-storage.html#testing-vdo-performance_deduplicating-and-compressing-storage}第 4 章 测试 VDO 性能 {.title}
:::
您可以执行一系列测试来测量 VDO 性能，使用 VDO
获取系统性能配置集，并确定哪些应用程序在 VDO 中表现良好。
::: itemizedlist
**先决条件**
-   一个或多个 Linux 物理块设备可用。
-   目标块设备（如 `/dev/sdb`{.literal}）大于 512 GiB。
-   安装了灵活的 I/O 测试器(`fio`{.literal})。
-   已安装 VDO。
:::
::: section
::: titlepage
# []{#testing-vdo-performance_deduplicating-and-compressing-storage.html#preparing-an-environment-for-vdo-performance-testing_testing-vdo-performance}为 VDO 性能测试准备环境 {.title}
:::
在测试 VDO 性能前，您必须考虑主机系统配置、VDO
配置以及测试过程中使用的工作负载。这些选择会影响空间效率、带宽和延迟程度基准测试。
要防止一个测试影响另一个测试的结果，您必须为每个测试的迭代创建一个新的
VDO 卷。
::: section
::: titlepage
## []{#testing-vdo-performance_deduplicating-and-compressing-storage.html#considerations-before-testing-vdo-performance_preparing-an-environment-for-vdo-performance-testing}测试 VDO 性能前的注意事项 {.title}
:::
以下条件和配置会影响 VDO 测试结果：
::: itemizedlist
**系统配置**
-   可用 CPU 内核数和类型。您可以使用 `taskset`{.literal}
    实用程序列出此信息。
-   可用内存和总安装内存
-   存储设备配置
-   活跃磁盘调度程序
-   Linux 内核版本
-   安装的软件包
:::
::: itemizedlist
**VDO 配置**
-   分区方案
-   VDO 卷中使用的文件系统
-   分配给 VDO 卷的物理存储大小
-   创建的逻辑卷的大小
-   稀疏或密度 UDS 索引
-   内存大小的 UDS Index
-   VDO 线程配置
:::
::: itemizedlist
**工作负载**
-   生成测试数据的工具类型
-   并发客户端数
-   写入数据中重复的 4 KiB 块的数量
-   读和写的特征
-   工作集大小
:::
:::
::: section
::: titlepage
## []{#testing-vdo-performance_deduplicating-and-compressing-storage.html#special-considerations-for-testing-vdo-read-performance_preparing-an-environment-for-vdo-performance-testing}测试 VDO 读取性能的特殊考虑 {.title}
:::
在测试 VDO 读取性能前，您必须考虑这些额外因素：
::: itemizedlist
-   如果从没有写入 4 KiB 块，VDO
    不会从存储中读取，而是立即使用零块进行响应。
-   如果写入了 4 KiB 块但包含所有零，VDO
    不会从存储中读取，并立即响应零块。
:::
当没有可读取数据时，读取性能会非常快。这是为什么读测试必须在卷前使用实际数据。
:::
::: section
::: titlepage
## []{#testing-vdo-performance_deduplicating-and-compressing-storage.html#preparing-the-system-for-testing-vdo-performance_preparing-an-environment-for-vdo-performance-testing}准备系统测试 VDO 性能 {.title}