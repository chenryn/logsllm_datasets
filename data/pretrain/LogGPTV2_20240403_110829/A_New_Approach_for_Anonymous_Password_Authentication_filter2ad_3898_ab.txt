where p = 2q + 1 (both p, q are primes), g is a generator of
group Z
• Commit: the prover chooses a random number t ∈ Zq,
and gives a commitment r = gt (mod p) to the veriﬁer.
• Challenge: the veriﬁer sends back a challenge c to the
∗
p:
prover.
• Response: the prover computes and returns a response
s = t− cx (mod q) to the veriﬁer. The veriﬁer accepts
as long as gsyc = r (mod p) holds.
For simplicity, we denote the procedure by P oK{(χ) :
y = gχ}, which stands for “zero-knowledge Proof of
Knowledge of a value χ such that y = gχ”. The convention
here is that Greek letters denote the items to be proved,
while all other parameters are known to the veriﬁer. Gener-
alizing this basic protocol, more complex relations among
elements within a group or across multiple groups can be
proved, e.g., P oK{(χ1, χ2, ..., χl) : y = gχ1
}, and
P oK{(χ) : y1 = gχ
∧ y2 = gχ
2 ...gχl
1 gχ2
}.
l
1
2
201
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:07:53 UTC from IEEE Xplore.  Restrictions apply. 
A zero-knowledge proof protocol can be made non-
interactive by applying the Fiat-Shamir heuristic, where
the prover himself generates the challenge by applying a
collision-free hash function to the commitment. We denote
N P oK{.} the non-interactive version of P oK{.}. Further-
more, N P oK{.} is a signature on a message m if the
challenge is generated from the commitment together with
m, which is denoted N P oK{.}[m].
Pederson Commitment. A data commitment scheme allows
a prover to submit a commitment to a veriﬁer, and prove
certain algebraic properties of the data committed by the
commitment. A commitment scheme has two properties:
hiding and binding. The hiding property refers to the ability
of a commitment concealing the committed value from the
veriﬁer, and the binding property is the ability to prevent
the prover from changing the committed value, once the
commitment is released. The Pederson commitment [16] (on
a message m) takes the form of Cm = gm
2 (mod p),
where p = 2q + 1 is deﬁned as above, g1, g2 ∈ QRp with
QRp denoting the subgroup of quadratic residues modulo
p, and r ∈ Zq is a random number. The Pederson commit-
ment scheme is unconditionally hiding but computationally
binding.
CL Signature [12]. Camenisch and Lysyanskaya [12] pro-
posed an interesting signature scheme, which allows a signer
to sign a message, while without necessarily seeing the
actual message; and allows a prover to prove the possession
of a signature on a message to the veriﬁer who again
does not know the message. For simplicity, we call it CL
signature. Speciﬁcally, the CL signature works as follows.
Let n = pq be a RSA-type modulus, and a, b, c ∈ QRn be
random elements. The public key is then pk = (n, a, b, c)
and the private key is sk = (p, q). Both Signing and
Signature Veriﬁcation can be interactive:
1 gr
• Signing: to get a signature on a message m, the user
sends Cm, a Pederson commitment on m, to the signer.
The signer returns a signature (v, k, s) satisfying vk =
ambsc (mod n).
• Signature Veriﬁcation: the user who has (v, k, s) proves
the possession of the signature as follows: the user ﬁrst
′
sends to the veriﬁer C
m, another Pederson commitment
on m. Then the user, by a set of zero-knowledge proofs,
proves to the veriﬁer that he knows (v, k, s), such that
′
vk = ambsc and C
m is a commitment to m. To avoid
delving into the details, we use P oK{(υ, κ, ς, ϖ) :
υκ = aϖbς c)} to denote the set of zero-knowledge
proofs proving the possession of the signature.
IV. WEAKNESSES OF ANONYMOUS PASSWORD
AUTHENTICATION
Recall that in the standard setting of password authenti-
cation, the server holds all users’ password information in a
password ﬁle, and uses the corresponding user’s information
to authenticate the user. In this section, we analyze the
limitations of anonymous password authentication in the
standard setting. To make our analysis concrete, we present a
generic construction. We also show that existing anonymous
password authentication schemes [30], [32], [33], [2] may
be subject to undetectable on-line guessing attacks.
The tools we use in this generic construction are homo-
morphic encryption and PIR (Private Information Retrieval).
PIR is a cryptographic primitive allowing a user to retrieve a
string from a N-string database, without disclosing anything
on the index of the retrieved string to the server(s) holding
the database [10], [23]. A single-server PIR protocol (where
the database is held by a single server) is aimed to achieve
better communication performance than O(N ), which oc-
curs in the trivial PIR solution where the server passes the
entire database to the user. For computation performance, in
the single-server PIR the server has to “touch” every string
so as to answer a request; thus the computation overhead
upon the server is at least O(N ).
A. Generic Construction
Let p, q be large primes and p = 2q + 1, g ∈ QRp, and
h(.) be a cryptographic hash function. Suppose the password
information contained in the password ﬁle is a list of user
passwords, i.e., pw1, pw2, . . . , pwN , corresponding to users
U1,U2,··· ,UN , respectively. The generic protocol between
user Ui and Server S works as follows.
Step 1. Ui generates a public/private key pair for a ho-
momorphic encryption scheme; picks a random x ∈ Zq
and computes X = gx (mod p); computes Hom_Enc(pwi).
Finally Ui sends Hom_Enc(pwi) and X to S.
the login request, S ﬁrst
Step 2. Upon reception of
picks a random y ∈ Zq and computes Y = gy
(mod p), AuthS
1..N,
S
=
a
ej
(Hom_Enc(pwi).Hom_Enc(−pwj))rj .Hom_Enc(Y )
=
Hom_Enc((pwi − pwj)rj + Y ). Finally, S constructs a
temporary N-entry database D = {Dj}j=1..N , where
Dj = ⟨ej, AuthS⟩.
Step 3. Ui engages in a PIR protocol with S to get
Di = ⟨ei, AuthS⟩. Then Ui computes Hom_Dec(ei) = Y ,
and tests whether h(Y, X) = AuthS. If the test passes, Ui
computes a session key sk = h(X, Y, Y x). Otherwise, Ui
aborts.
Step 4. Ui computes and sends AuthU = h(X, Y ) to S, who
then tests whether AuthU = h(X, Y ). If the test passes,
S accepts and computes sk = h(X, Y, X y); otherwise, S
aborts.
=
random rj,
h(Y, X);
j
=
computes
chooses
for
and
It
is not hard to understand the correctness and the
security of the protocol. Note that all the existing anonymous
password authentication schemes [2], [30], [32], [33] can be
viewed as special cases of this generic construction.
202
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:07:53 UTC from IEEE Xplore.  Restrictions apply. 
B. Undetectable On-Line Guessing Attacks
We ﬁrst show that existing anonymous password au-
thentication schemes [2], [30], [32], [33] may suffer from
undetectable on-line guessing attacks [17], where the server
is not aware of the presence of on-line guessing attacks.
We notice that all
the existing anonymous password
authentication schemes [2], [30], [32], [33] stop at Step 3,
without Step 4 (which enables the explicit authentication
of the user to the server). To be fair, this is not an issue
from the key establishment point of view, because of the
implicit authentication that the user is not able to compute
the shared key unless he uses a valid password. However,
without Step 4, they may succumb to undetectable on-line
guessing attacks. To see this, there are two cases to be
considered, depending on the usage of the shared session
key in the subsequent communication between the user and
the server:
• In many applications, the server simply needs to “push”
data to the user, e.g., a user downloads data from a
FTP server. In such a case, the session key is only
needed to protect the channel from the server to the
user. Undetectable on-line guessing attacks work in
these applications.
• In some other applications,
the shared key will be
used by the user to interact with the server. In this
case, undetectable on-line guessing attacks are avoided,
because the server can learn in retrospection whether
the user has established the correct key.
The advantage of our generic construction is that it elim-
inates undetectable on-line guessing attacks at the authenti-
cation stage, independent of the underlying applications.
C. Weaknesses
We now analyze the limitations of the generic con-
struction. These weaknesses are inherent to conventional
anonymous password authentication, making it questionable
whether conventional anonymous password authentication is
practically useful.
Weakness 1. Server Computation O(N ): It is clear that the
computation overhead upon the server is O(N ), linear with
the total number of users. This in principle causes the
scalability problem in large systems having a large number
of users. In fact,
in the standard (single-server) setting,
O(N ) is the lower bound of server computation for anony-
mous password authentication that achieves unlinkability.
The reason is that the server’s computation has to involve
all user passwords; otherwise, those “un-touched” entries by
the server must not be the requesting user.
We can also show that anonymous password authenti-
cation has to implements PIR. In particular, PIR can be
constructed from anonymous password authentication as
follows. Associate a password with each string in the N-
string database. To retrieve a string, the requesting user uses
the corresponding password (note that the passwords are
not necessarily secret) to engage in anonymous password
authentication with the server. The server sends back to
the user every string, whose associated password has been
”touched” during anonymous password authentication. It is
clear that if the user succeeds in password authentication,
then he clearly already gets the requested string. This
corroborates the fact that server computation in anonymous
password authentication is no better than O(N ), which is
the lower bound for (single-server) PIR.
Weakness 2. Passive Server: Anonymous password authenti-
cation must be secure against undetectable on-line guessing
attacks, and it should assume that the server is passive2;
otherwise, unlinkability cannot be achieved. To see this, if
the server is malicious: in Step 2 of the generic construction,
for different passwords the server picks different y’s in
computing Y, AuthS, and ej. Then in Step 4, from AuthU
the server can determine which password the user uses,
thereby breaking unlinkability. In turns out that this attack
applies to any anonymous password authentication scheme,
because for each password, the server can always use a
distinct data in negotiating the shared key with the user (of
course, there may exist countermeasures allowing the user
to detect). Passive server is a quite strong assumption, and
it may not be easy to ﬁnd such a server in practice.
V. A NEW AND EFFICIENT APPROACH
We next present a new and efﬁcient approach, solving
the above weaknesses in conventional anonymous password
authentication. Our approach assumes a different setting
where users do not register their passwords to the server,
who thus does not hold any password ﬁle. In particular,
each user is issued a credential to be used for anonymous
authentication, and the user protects his credential using
password; each time to login to the server, the user ﬁrst
recovers his credential with password, and then uses the
credential for authentication with the server. Figure 1 shows
the conceptual difference between our approach and conven-
tional anonymous password authentication.
A crucial feature of the password-protected credentials is
that they can be made public, requiring no further protection.
A user can store his password-protected credential in any
portable devices, e.g., handphone, PDA, USB ﬂash memory,
or even in a public directory. With such portability of
password-protected credentials, what a user essentially needs
at the point of login is indeed his password (this is the reason
why our approach still belongs to password authentication).
However,
to construct password-protect
credentials preserving user privacy and secure against off-
line guessing attacks. To show the challenges, we ﬁrst brieﬂy
introduce the intuitions underlying our construction.
is not
it
trivial
2A passive entity is honest, but tries to ﬁnd out more useful information
from the data it is supposed to get. In contrast, a malicious entity can
behave arbitrarily in order to achieve its objective.
203
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:07:53 UTC from IEEE Xplore.  Restrictions apply. 
Figure 1. Conceptual Comparison Between Conventional Approach and Ours
A. Overview
login. Since the server cannot
First Try. Since the credentials must protect user pri-
vacy, a natural choice is using blind signatures (e.g., [9])
as credentials. In particular, we adopt a “use-then-issue”
strategy, i.e., the user uses a credential (a blind signature)
for authentication, and at the end of each login, the server
issues to the user a new blind signature to be used for
next
link different blind
signatures, it is expected that this can achieve unlinkability.
Unfortunately, this is not true. To see this, not only the
server but any outsiders can recover the password from a
password-protected credential by off-line guessing attacks:
anyone can use different passwords to “undo” a password-
protected blind signature, and clearly only the right password
generates a valid blind signature.
Lesson 1: The failure of the ﬁrst try is because blind signa-
tures have known structure, publicly veriﬁable. Likewise, us-
ing passwords to protect other privacy-preserving primitives,
e.g., anonymous credentials, has the same vulnerability. The
lesson we learned is that the credentials to be protected by
passwords should not be publicly veriﬁable.
Second Try. It should be clear that credentials must be
veriﬁable to the server, thus it is unavoidable for the server
to recover passwords. This actually is not an issue in
password authentication, since the server (in the standard
setting) holds all users’ password information. Our second
try is thus to restrict veriﬁability of credentials to the server
only. Continuing with the ﬁrst
try, one way to achieve
restricted veriﬁability is that the server does not publicize
the public key of the blind signature scheme, such that no
one other than the server can verify blind signatures. This
solves the issue of off-line guessing attacks by outsiders.
However, since credentials are issued real time, users also
need to check the validity of the credentials issued to them.
Therefore, this method is not acceptable.
Another way to attain restricted veriﬁability is to encrypt