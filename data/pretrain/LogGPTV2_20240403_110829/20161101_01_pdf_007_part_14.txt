 sendto(10, "N\0\0\0wSLOG\0C00000\0Mperformsort st"..., 120, 0, NULL, 0) = 120
 getrusage(RUSAGE_SELF, {ru_utime={0, 10998}, ru_stime={0, 1999}, ...}) = 0
 write(2, "\0\0\365\0pA\0\0T2014-04-01 19:12:51.299"..., 254) = 254
 sendto(10, "N\0\0\0sSLOG\0C00000\0Mperformsort do"..., 116, 0, NULL, 0) = 116
 getrusage(RUSAGE_SELF, {ru_utime={0, 10998}, ru_stime={0, 1999}, ...}) = 0
PostgreSQL trace和debug
 write(2, "\0\0\374\0pA\0\0T2014-04-01 19:12:51.300"..., 261) = 261
 sendto(10, "D\0\0\0\r\0\1\0\0\0\003296N\0\0\0zSLOG\0C00000\0M"..., 137, 0, NULL, 0) = 137
 brk(0x1092000) = 0x1092000
 brk(0x108a000) = 0x108a000
 brk(0x1086000) = 0x1086000
 brk(0x107e000) = 0x107e000
 brk(0x1076000) = 0x1076000
 brk(0x1072000) = 0x1072000
 sendto(9, "\2\0\0\0\220\0\0\0\0@\0\0\1\0\0\0\1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"..., 144, 0, NULL, 0) = 144
 sendto(10, "C\0\0\0\rSELECT 1\0Z\0\0\0\5I", 20, 0, NULL, 0) = 20
 recvfrom(10,
PostgreSQL trace和debug
 ltrace帮助
 pg93@db-172-16-3-150-> ltrace --help
 Usage: ltrace [option ...] [command [arg ...]]
 Trace library calls of a given program.
 -a, --align=COLUMN align return values in a secific column.
 -c count time and calls, and report a summary on exit.
 -C, --demangle decode low-level symbol names into user-level names.
 -d, --debug print debugging info.
 --dl show calls to symbols in dlopened libraries.
 -e expr modify which events to trace.
 -f follow forks.
 -h, --help display this help and exit.
 -i print instruction pointer at time of library call.
 -l, --library=FILE print library calls from this library only.
 -L do NOT display library calls.
 -n, --indent=NR indent output by NR spaces for each call level nesting.
 -o, --output=FILE write the trace output to that file.
PostgreSQL trace和debug
 -p PID attach to the process with the process ID pid.
 -r print relative timestamps.
 -s STRLEN specify the maximum string size to print.
 -S display system calls.
 -t, -tt, -ttt print absolute timestamps.
 -T show the time spent inside each call.
 -u USERNAME run command with the userid, groupid of username.
 -V, --version output version information and exit.
 -x NAME treat the global NAME like a library subroutine.
PostgreSQL trace和debug
 ltrace举例
 pg93@db-172-16-3-150-> ltrace -p 16752
 memcpy(0x7fffdc5de29c, "", 4) = 0x7fffdc5de29c
 __sigsetjmp(0x7fffdc5de1d0, 0, 67, 0, 0) = 0
 memcpy(0xfd1718, "select count(*) from (select * f"..., 67) = 0xfd1718
 gettimeofday(0x7fffdc5de290, NULL) = 0
 strlen("select count(*) from (select * f"...) = 66
 strlen("select count(*) from (select * f"...) = 66
 gettimeofday(0x7fffdc5de190, NULL) = 0
 memcpy(0x7fbe526a7320, "select count(*) from (select * f"..., 66) = 0x7fbe526a7320
 strlen("TopTransactionContext") = 21
 strcpy(0xfc6700, "TopTransactionContext") = 0xfc6700
 malloc(8192) = 0xf47630
 memset(0xf47758, '\000', 76) = 0xf47758
 strlen("select count(*) from (select * f"...) = 66
 memcpy(0xfd2060, "select count(*) from (select * f"..., 66) = 0xfd2060
 strlen("select") = 6
 strcmp("localtime", "select") = -7
 strcmp("search", "select") = -11
 strcmp("truncate", "select") = 1
 strcmp("stdout", "select") = 15
 ... 略
PostgreSQL trace和debug
 gdb举例
 略
函数的三态
函数的三态分解-1
 volatile, stable, immutable
 VOLATILE
 volatile函数没有限制, 可以修改数据(如执行delete, insert , update), 使用同样的参数调用可能返回不同的值.
 STABLE
 不允许修改数据, PG8.0以及以上版本不允许在volatile函数中使用非SELECT|PERFORM语句.
 使用同样的参数调用返回同样的结果, 在事务中有这个特性的也归属stable.
 IMMUTABLE
 不允许修改数据, 使用同样的参数调用返回同样的结果.
函数的三态分解-1(例子1)
 PostgreSQL 8.0以及以上版本不允许在stable或immutable函数中执行非select|perform语句.
 digoal=# create table tbl(id int primary key, info text, crt_time timestamp);
 CREATE TABLE
 digoal=# create or replace function f_tbl(i_id int) returns void as $$
 digoal$# declare
 digoal$# begin
 digoal$# update tbl set crt_time=now() where id=i_id;
 digoal$# end;
 digoal$# $$ language plpgsql stable;
 digoal=# \set VERBOSITY verbose
 digoal=# select f_tbl(1);
 ERROR: 0A000: UPDATE is not allowed in a non-volatile function
 CONTEXT: SQL statement "update tbl set crt_time=now() where id=i_id"
 PL/pgSQL function f_tbl(integer) line 4 at SQL statement
 LOCATION: _SPI_execute_plan, spi.c:2127
函数的三态分解-1(例子1)
 漏洞 : 在stable或immutable函数中调用volatile函数是可以的.
 digoal=# alter function f_tbl(int) volatile;
 digoal=# create or replace function f_tbl1(i_id int) returns void as $$
 declare
 begin
 perform f_tbl(i_id); -- 在stable或immutable函数中调用volatile函数是可以的.
 end;
 $$ language plpgsql stable;
 CREATE FUNCTION
 digoal=# insert into tbl values(1,'test',now());
 INSERT 0 1
 digoal=# select * from tbl;
 id | info | crt_time
 ----+------+----------------------------
 1 | test | 2014-03-10 17:21:04.562394
 (1 row)
函数的三态分解-1(例子1)
 digoal=# select f_tbl1(1);
 f_tbl1
 --------
 (1 row)
 digoal=# select * from tbl;
 id | info | crt_time
 ----+------+----------------------------
 1 | test | 2014-03-10 17:21:12.183329
 (1 row)
函数的三态分解-1(例子2)
 同样的参数, 多次调用.
 volatile 函数, 相同的参数, 多次调用返回结果可能不一样.
 digoal=# create table t2(id int);
 CREATE TABLE
 digoal=# select pg_relpages('t2');
 pg_relpages
 -------------
 0
 (1 row)
 digoal=# insert into t2 values (1);
 INSERT 0 1
 digoal=# select pg_relpages('t2'); -- 返回值变化
 pg_relpages
 -------------
 1
 (1 row)
 digoal=# select proname,provolatile from pg_proc where proname='pg_relpages';
 pg_relpages | v
函数的三态分解-1(例子2)
 stable, immutable函数同样的参数多次调用返回结果不变.
 在事务中多次调用返回结果一致的也可归属于stable.
 digoal=# select now();
 now
 -------------------------------
 2014-03-11 02:49:12.198357+00
 (1 row)
 digoal=# select now();
 now
 -------------------------------
 2014-03-11 02:49:14.727296+00
 (1 row)
 事务中now()函数结果一致.
 digoal=# begin;
 BEGIN
函数的三态分解-1(例子2)
 digoal=# select now();
 now
 -------------------------------
 2014-03-11 02:49:16.706295+00
 digoal=# select now();
 now
 -------------------------------
 2014-03-11 02:49:16.706295+00
 (1 row)
 digoal=# select provolatile,proname,proargtypes from pg_proc where proname='now';
 provolatile | proname | proargtypes
 -------------+---------+-------------
 s | now |
 (1 row)
函数的三态分解-1(例子2)
 immutable函数同stable, 同样的参数多次调用结果一致.
 digoal=# select proname,provolatile from pg_proc where proname='abs';
 proname | provolatile
 ---------+-------------
 abs | i
 digoal=# select abs(-10);
 abs
 -----
 10
 (1 row)
 ......
函数的三态分解-2
 VOLATILE
 volatile函数不能被优化器作为优化条件.
例如单SQL处理多行时不能减少volatile函数的调用次数,
不能使用volatile函数创建函数索引,
在过滤条件中使用volatile函数时, 不能走索引扫描.
 在同一个查询中, 同样参数的情况下可能被多次执行(QUERY有多行返回/扫描的情况下).
 STABLE
 优化器可根据实际场景优化stable函数的调用次数, 同样的参数多次调用可能减少成单次调用.
 stable函数可以用于优化器选择合适的索引扫描, 因为索引扫描仅评估被比较的值一次, 后多次比较.
 stable和volatile函数都不能用于创建函数索引, 只有immutable函数可以用于创建函数索引.
 IMMUTABLE
 优化器在处理immutable函数时, 先评估函数结果, 将结果替换为常量.
函数的三态分解-2(例子1, 影响优化器)
 digoal=# create table t3(id int);
 digoal=# insert into t3 values(1),(1),(1),(2),(2),(2);
 digoal=# create or replace function f_t3(id int) returns int as $$
 declare
 begin
 raise notice 'Called.';
 return id;
 end;
 $$ language plpgsql stable; -- stable 状态
 digoal=# select * from t3 where f_t3(id) =1; -- f_t3(id), 这里id是变量, 不能被优化器优化, 因此函数调用了6次.
 NOTICE: Called.
 NOTICE: Called.
 NOTICE: Called.
 NOTICE: Called.
 NOTICE: Called.
 NOTICE: Called.
 id
函数的三态分解-2(例子1, 影响优化器)
 1
 1
 1
 (3 rows)
 digoal=# select * from t3 where f_t3(1) =1; -- 这里使用常量调用f_t3()所以可以被优化器优化.
 NOTICE: Called. -- 函数只被调用一次.
 id
 ----