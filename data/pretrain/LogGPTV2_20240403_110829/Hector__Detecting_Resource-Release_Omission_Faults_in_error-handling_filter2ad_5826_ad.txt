0
16
1
1
48
0
0
12
0
0
90
1
1
Invalid
errors or address user value
0
0
2
5
1
2
1
0
1
7
0
1
2
1
0
15
2
6
6
0
0
16
0
1
46
5
8
49
0
2
14
0
0
131
5
11
2
0
0
3
0
0
9
1
1
5
0
0
2
0
0
21
1
1
Total
10
0
2
36
1
3
72
7
11
109
0
3
30
1
0
257
9
19
We ﬁrst consider the faults in terms of the properties of
the containing function. Almost 40% of the faults found in
Linux code are in dynamic initialization functions, and this
ratio reaches almost 50% if static initialization functions are
included. Indeed, Kadav and Swift have found that initialization
functions make up 30-50% of the code of many kinds of drivers
[16]. 12 of the faults occur in read/write functions, which users
typically invoke repeatedly. A third of these faults depend in
some way on a ﬁle structure, which may depend on user-level
requests. Most of the rest of the faults depend only on internal
Fig. 10.
Fixed or eliminated Linux driver faults. Bars on the left refer to
functions associated with 4 or more ﬁxes. These bars are annotated with the
support for the corresponding acquisition and release functions. Bars on the
right refer to functions with fewer than 4 ﬁxes and varying levels of support.
positives. None of these protocols exceed the thresholds of
support 15 and conﬁdence 90%, showing the reasonableness of
these thresholds in a setting where false positives are very likely.
Otherwise, these protocols show a distribution similar to that
of protocols for which there are faults, with some having high
support or high conﬁdence. These results suggest that support
and conﬁdence are not very helpful in assessing these cases.
Comparison to faults ﬁxed in Linux. Linux 2.6.34 was
released in May 2010, and thus some of the faults we have
identiﬁed have subsequently been ﬁxed or otherwise eliminated
by other developers. We have furthermore submitted patches
for many of the faults detected by Hector, for Linux and for
other software. Fig. 10 summarizes the status of the 187 faults
in drivers that have been ﬁxed or otherwise eliminated since
the release of Linux 2.6.34. The ﬁxes include patches that we
have submitted and have been accepted (74), patches that we
have submitted but have not yet been accepted (23), patches
that have been submitted by others and have been accepted
(55), and faults that have disappeared due to reorganization or
elimination of the code (36). The faults in the third category
were primarily identiﬁed manually by developers, and thus the
involved functions may have low support.
72 of the faults ﬁxed by ourselves or others involve the
common memory allocation functions kmalloc, kzalloc, and
kcalloc. Because these functions and the corresponding release
function, kfree, are well known, such faults could be found using
fault-ﬁnding tools such as Coccinelle, smatch, and sparse,8
that are conﬁgurable with respect to a priori known protocols.
These tools are regularly applied to the Linux kernel, and thus
the fact that such faults remain suggests a lack of attention
to the affected ﬁles by tool users or lack of attention to
the submitted patches by the associated maintainers. For the
remaining functions, only 30% of the faults have been found
and ﬁxed by others. This shows that the strategies Hector
uses are complementary to existing maintenance approaches.
While many of these functions are used less often, within
the implementation of a given service, a function with few
overall call sites may be even more important than widely used
generic functions, such as kmalloc. Indeed, omitting a single
kfree typically results in the loss of only a few bytes, while
an omission fault associated with a more specialized function,
e.g., one that unregisters a device from the kernel, can lead
to serious errors such as resource unavailability and kernel
8http://coccinelle.lip6.fr, http://smatch.sourceforge.net/,
https://sparse.wiki.kernel.org/index.php/Main Page
01020304050607080 Fixed faultspatch submitted by us/acceptedpatch submitted by us/not yet acceptedpatch submitted by others/accepteddeleted/reorganizedkmalloc, etc.6030ioremap, etc819func_enter114usb_alloc_urb158alloc_etherdev202clk_get271unlock_kernel547framebuffer_alloc82mempool_alloc971-25 calls26-50 calls51-100 calls101-500 calls> 500 callsstructures, making it less likely that speciﬁc user actions can
trigger the fault.
Next, we consider the faults in terms of the reason for the
handled error. Over half of the faults (No device or address) are
found in the handling of errors related to invalid arguments and
non-existent devices, represented by constants such as EINVAL.
Such faults may arise from invalid user requests or unavailable
or malfunctioning devices. 23 of the faults are found in the
handling of errors related to invalid values received from the
user level (EFAULT), such as invalid addresses for copying
data to or from the kernel, which are easy for the user to
construct.
Finally, we consider the effect of the faults. 9 involve
omitted unlock operations, thus introducing potential deadlocks.
Among the faults that have the most potential impact, in 1
case, the error can be caused by an invalid user-level value,
provided via an ioctl, while in 4 other cases the error is caused
by the inability to access a resource such as a ﬁle, the identity
of which may ultimately depend on user-level requests. These
faults may thus be exploitable by a determined attacker. In two
other cases, the error derives from malfunctioning hardware;
such errors may be more difﬁcult for an attacker to exploit, but
can result in the inability to access related resources. Finally,
over 90% of the faults cause memory leaks. Of these, 88%
are in functions that can be iterated, and of these 5% are in
read/write functions that can be iterated by an unprivileged user.
These results generalize the examples presented in Section
II, showing that faults in error-handling code can potentially
have a signiﬁcant impact on the reliability of systems software.
Faults in other software. To have a broader view of the
potential impact of faults in error-handling code, we have also
studied the impact of the faults found by Hector in the PHP
and Python language runtimes. Out of the 13 faults Hector
ﬁnds in the PHP runtime, 11 are located in PHP functions
that are called by at least 14 API functions (i.e., functions
that are directly exposed to PHP developers). Several of the
associated blocks of error-handling code are triggered by bad
argument values or malformed input ﬁles (images, in particular,
in the gd2 module). These blocks of error-handling code expose
PHP applications to memory leaks. Moreover, since PHP is
commonly used as a web scripting language, an attacker could
potentially provide faulty arguments to a remote PHP script or
upload malformed ﬁles in order to trigger memory leaks on
a remote server. Indeed, 7 of the memory leaks detected by
Hector pertain to persistent memory (i.e., memory that is never
released as long as the web server runs). For Python, 8 of the
33 faults found in Python code are in three Python 3.2.3 API
functions. These functions either are new since Python 2.7.2 or
have been completely reimplemented. Most of the remaining
faults are in initialization functions or in functions stored in
Python modules. Python manages internal data structures using
reference counts, and almost all of the faults involve omission
of a reference count decrement operation.
For PHP, we have designed a possible attack that exploits
a fault in the function xmlwriter get valid ﬁle path(). We
wrote a PHP script that calls this function via the PHP runtime
function xmlwriter open uri() a hundred million times with a
faulty argument that triggers the bug. Running this PHP script
on an apache2 web server results in an apache2 process that
uses up all of the available RAM of a 4GB server. An attacker
could use this fault in two ways. First, if he has the ability to
upload PHP ﬁles to the server in a directory where they are
interpreted by Apache, he can upload our script and access
it remotely to use up all memory. Second, if he ﬁnds a PHP
script on the server that uses xmlwriter open uri() with an
argument that is passed in via an HTML form, he can fetch
the page millions of times with a faulty argument until all of
the memory of the server is exhausted.
C. False positives
Table IV shows the number of false positives among
the reports generated by Hector and the reasons why these
reports are false positives. The overall false positive rate is
23%, which is below the threshold of 30% that has has been
found to be the limit of what is acceptable to developers
[17]. The reasons for the false positives vary, including failure
of the heuristics for distinguishing error-handling code from
successful completion of a function (Not EHC, 4%), failure
of the heuristics for identifying acquired resources (Not alloc,
26%), or for recognizing existing releases, whether via an alias
(Via alias, 29%) or via a non-local call (Non-local call frees,
12%), or unawareness of releases performed in the caller of the
considered function rather than in the function itself (Caller
frees, 13%).
TABLE IV.
FALSE POSITIVES
s
t
r
o
p
e
R
FP
Reasons
(Rate, Fns) Not Not Via Non-local Caller Other
call frees
Linux drivers 293 56
13
44
0
Linux snd/net/fs
4
0
Python (2.7)
2
0
Python (3.2.3)
2
0
Apache httpd
1
0
Wine
3
0
PHP
1
0
PostgreSQL
Total
14
FP = False positives, Rate = FP/Reports, Fns = Containing functions
(19%,34)
92
(47%,29)
17
(24%,2)
22
(9%,2)
5
(20%,2)
31
(3%,1)
16
(19%,3)
8
(12%,1)
484 113 (23%,74)
3
0
0
0
1
0
0
0
4
EHC alloc alias
11
19
3
0
0
0
0
0
33
16
7
0
1
0
1
3
1
29
frees
8
7
0
0
0
0
0
0
15
5
10
1
1
1
0
0
0
18
The Linux sound, net, and fs directories all have false
positive rates higher than 30%. All of the sound false positives
come from the use of a single function that creates an alias via
which the resource is released. The affected functions all show
the same pattern, making these false positives easy to spot.
For net, 4 of the 6 false positives are due to error-handling
code related to timeouts, in which case it is not necessary to
release all of the resources. Again, the affected functions have
a similar structure. Finally, the fs faults are more varied, and
thus more difﬁcult to identify. Still, there are fewer than 50
fs reports in all, making the identiﬁcation of false positives
tractable by a ﬁlesystem expert.
D. False negatives
Hector requires an exemplar of the release of a resource