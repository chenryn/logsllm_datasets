2.33
Yahoo
PubMatic
2.04
61.05
Other (83,854)
Total
100.00
1,141
1,108
275
238
186
163
4,883
7,997
(c) Publisher Websites Affected
Publisher
YouTube
Yahoo
Google
Facebook
Microsoft
eBay
Other (112,889)
Total
Hits (×103) %
5.64
4.56
4.20
3.05
2.58
2.44
77.57
100.00
451
365
337
244
207
195
6,197
7,997
recently estimated a minimum level of ﬁnancial gains on the order of $14 million for the
botmasters behind the DNSChanger botnet [73]. Note that DNSChanger was a signiﬁcantly
smaller botnet that operated over less than half the time period that TDSS/TDL4 was active.
Ad Networks and Publishers Targeted
Although we did not use fraudulent clicks in our ﬁnancial estimations, we use sinkhole
trafﬁc from Protocol 2 to deteremine if the botnet was targeting a single or multiple entities
in the ad ecosystem. We studied the distribution of ad networks whose ads have been
replaced, according to the Protocol 2 trafﬁc (Section 3.4.1). According to Table 3.5b, in
total, 83,860 different ad networks were targeted. Google Inc. ad networks account for
almost 17.3% (1.37 million instances) of the total ad-abuse observations. Facebook comes
44
second, at 13.8% (1.1 million instances). Other ad networks share the remaining 68.9%.
The mean number of replaces ads was 95 and the median was four, reﬂecting a wide variety
of replacement behavior. Even excluding the most popular ad networks targeted, there is
still a long tail of 4,883 different ad networks constituting 61.05% of our observations. This
shows that botmasters did not target only one ad network but rather a variety of them.
Finally, Table 3.5c shows the number of times an ad shown on a publisher’s website
was replaced. The top publishers had approximately 2% to 5% of all malicious ad re-
placements. In total, 112,895 different publisher websites were affected by the victim’s
malware. Google again ranks high with an overall replacement frequency of almost 10%,
while their rival, Yahoo, was affected less than half as often. There is also a long tail of
112,889 different publishers.
3.7 Discussion
Our study aims to increase the situational awareness behind botnets that employ sophisti-
cated techniques to abuse the online ad ecosystem and hopefully motivate further research
in the space of ad-abuse. In this section we will discuss the most important challenges we
faced while analyzing TDSS/TDL4.
3.7.1 Ground Truth Behind The Financial Loss
The botnets that interact with and monetize the ad ecosystem typically do not target a single
entity (i.e., Google, Facebook, or Microsoft etc.). Due to the secrecy within the ecosystem,
it is very hard to gather all the datasets from different entities necessary to verify whether
the abuse levels we estimated are actually what the advertisers lost. For example, however
unlikely it may be, we cannot exclude the possibility that some percentage of the impres-
sion fraud could have been detected and stopped by some entities in the ad ecosystem.
Unfortunately, we cannot determine how much impression fraud, if any, was blocked, nor
by whom. Thus, we had to rely on our own assumptions to estimate the lower bound. How-
45
ever, even in the scenario where one entity had perfect defenses, we cannot reliably assume
it to be true for all the other entities in the ad ecosystem. For instance, if one DSP lacks
proper defenses, fraud will still occur in the ad ecosystem. This means, that advertisers
using this DSP will pay a hefty price due to ad-abuse. While we contacted several entities
in the ad ecosystem, they remain secretive about the methodology and tools that they use
to detect fraud. Even if a small percentage (e.g., 30%) of the reported fraudulent trafﬁc
evades detection, the losses are still signiﬁcant.
3.7.2 Ground Truth Behind TDSS/TDL4
Our goal was to get ground truth around the way the TDSS/TDL4 botnet operates in the
wild without contributing to online abuse. To that extent, we decided to gather the ground
truth from external reports, and also from analyzing the sinkholing datasets of DGA do-
main names that supported the monetization module in TDSS/TDL4. Observation of DNS
Ad-abuse Rate was made passively from actual infected hosts around the world. The
TDSS/TDL4 victims were notiﬁed by a community effort behind this sinkholing opera-
tion, the sinkhole data were released to the operational community and several entities in
the online ad ecosystem from the moment the sinkhole operation began.
3.7.3 Smart Pricing Data For Impressions and Clicks
We used Equation (3.2) to compute the lower bound of ﬁnancial loss of advertisers, which
assumes that perfect smart pricing for CPC was successfully used across the ad ecosystem,
and all fraudulent impressions impacted the advertisers.
We chose CP C = $0 to reﬂect on the lower bound for the ﬁnancial analysis assuming
CPC smart pricing was perfect. The attackers most likely can still proﬁt from fraudulent
clicks after smart pricing. For instance, recent work shows the actual CPC charged after
smart pricing was between 10 to 30 cents for ZeroAccess [7]. Smart pricing is hard since
not all conversion rates can be effectively measured. Not all conversion actions were logged
46
and shared between advertisers and ad networks/exchanges. The fact that TDSS/TDL4
does both impression and click fraud implies that the monetization technique tried to avoid
detection by generating positive click-through rates.
We chose to account for all the impressions since impression fraud is still a hard prob-
lem to date. The new standard of Ad Viewability has been announced and deployed to
prevent advertisers from spending money on invalid ad impressions [4, 3]. However, since
there is almost no documentation about how impression fraud was handled by ad networks
and ad exchanges when TDSS/TDL4 was active (before October 2013), it is reasonable to
assume that a signiﬁcant portion (if not all) of the impressions most likely went undetected.
As we have already pointed out, getting ground truth around this would require a collabo-
ration among many entities in the ecosystem. Such task was not realistically achievable by
the authors of this study.
3.8 Related Work
TDSS/TDL is a widely spread and intensively monetized malware family that has grown,
upgraded, and evolved into one of the most sophisticated rootkits over the years [74, 75,
76, 67]. The latest version (TDL4) varies signiﬁcantly from its ancestor (TDL3), mainly
because it is no longer limited to 32-bit systems, but can also infect 64-bit systems. The ex-
tent to which the malware managed to propagate gave its operators the opportunity to move
to businesses other than ad-abuse, such as leasing the botnet and providing an installation
channel for new malware to the already infected systems.
Operating a sinkhole is a safe, passive way to collect data regarding network connec-
tions between malware and the servers they try to contact. Sinkholing works for network
connections that go over DNS. Malware needs to ﬁnd a way to contact its Command and
Control (C&C) server [77], which cannot always be done through Peer to Peer (P2P) pro-
tocols, since network administrators often block them. Therefore, DNS is the preferred
channel for cheap communication. In the case of TDSS/TDL4, the malware uses P2P as
47
an alternative communication method [78]. Data collected from a sinkhole operation can
be used to measure the network behavior of a botnet. For example, [69] used a similar
approach as the one described here to uniquely identify infected hosts.
There have been several studies of click fraud abuse, including many that measure
the abuse and propose counter measures. Such works often focus on the ad network’s
perspective [79, 68]. Springborn et al. [65] studied pay-per-view networks and described
how millions of dollars are lost by fraudulent impressions annually. This loss has also
been studied by Daswani et al.
[80] through the “Clickbot.A” botnet of 100,000 hosts,
showing how the value chain of ad-abuse operates online. Moreover, Stone-Gross et al.
[54], studied abuse from both a botnet’s and ad network’s point of view, showing the large
amount of money the botnet can make. These works carefully focus on speciﬁc parts of the
ad ecosystem, while ours characterizes overall abuse impact by using edge-based metrics.
The work most similar to ours is the recent ZeroAccess study [7] that estimated daily
advertising losses caused by the botnet by analyzing just one week of click fraud activi-
ties during a takedown against the ad-abuse component of ZeroAccess. This was the ﬁrst
study that analyzed the levels of ad-abuse behind ZeroAccess, mainly from the view of
a single ad network. While the ZeroAccess study was novel, it did not help large net-
work administrators independently measure the levels of ad-abuse originating from their
network environments and take appropriate actions. Studying the ad-abuse phenomenon
and deriving generalizable results cannot be achieved by using short temporal windows, or
examining the problem from the viewpoint of a single ad network. Our system addresses
these limitations from previous studies by studying the ad-abuse problem passively at the
edge of the Internet over a multi-year time period.
3.9 Summary
We present a novel Ad-abuse Analysis System (A2S) to conservatively estimate the long-
term damage the monetization component of botnets can cause to advertisers. We studied
48
one of the most notorious botnets that monetized the ad ecosystem: TDSS/TDL4. Using a
long-term study of four years, taken from an edge-based system that permits generalization
to the overall ad ecosystem, we revealed the properties and evolution of the botnet’s in-
frastructure. We also estimated the lower bound for the abuse: less than 15% of the botnet
population inﬂicted ﬁnancial loss to the advertisers of at least $346 million, observed via a
US ISP network over four years. This reveals the extent of the abuse that botnets bring to
the advertisers in the long term, making them the low risk and high reward monetization
method for modern botmasters. The estimated lower bound suggests the importance of
more research effort in the problem to detect and prevent it.
49
MEASURING NETWORK REPUTATION IN THE AD-BIDDING PROCESS
CHAPTER 4
4.1 Motivation
In Chapter 3, we propose a new clustering technique to efﬁciently measure the impression
fraud from the botnet TDSS/TDL4. Similar to other past research efforts, the focus is
detecting ad abuse at the edge (i.e., the infected host), or, “outside” of the ad ecosystem.
This is vantage point V1 in Figure 2.1, Section 2.2. However, little is known about the
network policies that are being enforced within the ad ecosystem, especially during the
ad bidding process. Advertisers do not want to display ads on low quality publishers that
may include automated visits from adware and afﬁliate marketing entities, and thus they
need to selectively respond to ad bidding requests based on the reputation of the publishers.
Unfortunately, little work has been done to measure reputation of publisher domains.
In this Chapter, we examine if open source intelligence data from the security commu-
nity can be used to ascertain publisher reputation. To this end, we analyze anonymized ad
bidding requests between a large demand side platform (DSP) in North America and six
ad exchanges over a period of three months (vantage point V2 in Figure 2.1, Section 2.2).
Using open source intelligence from public blacklists and malware execution traces, we
investigate the reputation properties of publishers in the advertisement bidding process
(Section 4.5). This Chapter makes the following key observations:
• We explain the ad bidding process and measure it in detail to improve the network and
security communities’ understanding of the advertising ecosystem. These measure-
ments include bidding request trafﬁc from six large ad exchanges for request volume,
publisher domains, and client distribution. We ﬁnd that malicious publisher domains
tend to be present on more ad exchanges and reach more clients than non-blacklisted
50
publisher domains on average. These differences are statistically signiﬁcant and sug-
gest that reputation systems for advertisement publishers are possible.
• We identify that of all publisher domains seen in the DSP, 13,324 (0.27%) are on
blacklists, which generate only 1.8% of bid requests, and 134,262 (2.74%) are queried
by malware. This underestimates the amount of ad abuse based on other studies [23,
24], which has been measured as high as 30%. This also indicates that traditional
sources of maliciousness used in the security community are insufﬁcient to under-
stand ad abuse seen from DSPs.
• Using graph analysis, we demonstrate how to track advertising infrastructure over
time. To focus on potentially malicious campaigns, we use a simple suspiciousness
heuristic based on open-source intelligence feeds. Using this technique, we identify
case studies that show ad network domains support Potentially Unwanted Programs
(PUP), rely on domain name generation algorithms, and are occasionally used to
distribute malware.
4.2 Real-Time Bidding
In this section, we brieﬂy describe the real-time bidding process. Figure 4.1 shows a sim-
pliﬁed view of the Real-Time Bidding (RTB) process. The JavaScript from the publisher
page requests an ad through a bid request. In a request, the publisher includes information
such as category of the page, size of the ad space, country, user’s browser and OS version,
cookie, etc., and sends it to the ad exchange (step 1).
Once the ad exchange receives the bid request from a seller, it then consolidates the
request into seller site information (e.g., URL of the publisher page), device information,
and user data. The ad exchange sends the bid request to its buyer applications (step 2), for
instance, through a DSP.
After receiving the bid request, the buyer replies with a bid response containing the ad
51
Figure 4.1: A simpliﬁed view of the Real-Time Bidding process.
Table 4.1: Summary of all datasets.
DSP Trafﬁc
Public Blacklists
Malware
Alexa
DNS
Date Range
12/10/2014 - 3/24/2015
12/9/2009 - 1/15/2016
1/1/2011 - 11/17/2015
12/10/2013 - 3/24/2015
12/10/2014 - 3/24/2015
Size
2.61T
22G
136G
10G
1.54T
URL and the markup price (step 3). The RTB protocol typically waits for a ﬁxed amount
of time (e.g., 100ms) to collect bids, and then chooses the winning bid under the auction’s
rules (e.g., OpenRTB [81]). The ad exchange then notiﬁes the winner and returns the ad to
the publisher (step 4).
In the aforementioned example, the bid request comes from the publisher directly.
Therefore, the publisher page is the referrer for the bid request. Very often, the bid re-