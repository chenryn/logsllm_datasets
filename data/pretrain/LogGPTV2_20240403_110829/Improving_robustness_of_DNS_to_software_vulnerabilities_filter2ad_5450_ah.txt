### 2.33
- **Yahoo**: 2.33
- **PubMatic**: 2.04
- **Other (83,854)**: 61.05
- **Total**: 100.00

### Hits (×10³) and Percentage
- **YouTube**: 5.64 (451)
- **Yahoo**: 4.56 (365)
- **Google**: 4.20 (337)
- **Facebook**: 3.05 (244)
- **Microsoft**: 2.58 (207)
- **eBay**: 2.44 (195)
- **Other (112,889)**: 77.57 (6,197)
- **Total**: 100.00 (7,997)

### Financial Gains of Botmasters
The DNSChanger botnet was recently estimated to have generated a minimum financial gain of $14 million for its operators [73]. It is important to note that DNSChanger was significantly smaller and operated over a shorter period compared to TDSS/TDL4.

### Ad Networks and Publishers Targeted
Although fraudulent clicks were not used in our financial estimations, we analyzed sinkhole traffic from Protocol 2 to determine if the botnet targeted specific or multiple entities in the ad ecosystem. According to Table 3.5b, a total of 83,860 different ad networks were targeted. Google Inc. ad networks accounted for nearly 17.3% (1.37 million instances) of the total ad-abuse observations. Facebook ranked second with 13.8% (1.1 million instances). Other ad networks collectively made up the remaining 68.9%. The mean number of replaced ads was 95, and the median was four, indicating a wide variety of replacement behaviors. Even after excluding the most popular ad networks, there was still a long tail of 4,883 different ad networks, constituting 61.05% of our observations. This demonstrates that the botmasters did not focus on a single ad network but rather targeted a diverse range of them.

### Publisher Websites Affected
Table 3.5c shows the frequency of ad replacements on publisher websites. The top publishers experienced approximately 2% to 5% of all malicious ad replacements. In total, 112,895 different publisher websites were affected by the malware. Google had an overall replacement frequency of almost 10%, while Yahoo was affected less than half as often. There was also a long tail of 112,889 different publishers.

### 3.7 Discussion
Our study aims to enhance situational awareness regarding botnets that employ sophisticated techniques to abuse the online ad ecosystem, and to motivate further research in this area. In this section, we discuss the key challenges faced during our analysis of TDSS/TDL4.

#### 3.7.1 Ground Truth Behind Financial Loss
Botnets that interact with and monetize the ad ecosystem typically do not target a single entity (e.g., Google, Facebook, Microsoft). Due to the secrecy within the ecosystem, it is challenging to gather comprehensive datasets from different entities to verify the estimated abuse levels. For example, we cannot exclude the possibility that some impression fraud was detected and stopped by certain entities. However, we cannot determine how much, if any, impression fraud was blocked, nor by whom. Thus, we relied on our own assumptions to estimate the lower bound. Even if one entity had perfect defenses, it does not guarantee the same for others. If a Demand-Side Platform (DSP) lacks proper defenses, fraud will still occur, leading to significant losses for advertisers using that DSP. Despite contacting several entities, they remain secretive about their fraud detection methods. Even if a small percentage (e.g., 30%) of the reported fraudulent traffic evades detection, the losses are still substantial.

#### 3.7.2 Ground Truth Behind TDSS/TDL4
Our goal was to understand how the TDSS/TDL4 botnet operates in the wild without contributing to online abuse. We gathered ground truth from external reports and analyzed sinkholing datasets of DGA domain names supporting the monetization module in TDSS/TDL4. DNS Ad-abuse Rate was observed passively from actual infected hosts worldwide. The TDSS/TDL4 victims were notified through a community effort, and the sinkhole data were released to the operational community and several entities in the online ad ecosystem from the start of the sinkhole operation.

#### 3.7.3 Smart Pricing Data for Impressions and Clicks
We used Equation (3.2) to compute the lower bound of financial loss for advertisers, assuming perfect smart pricing for Cost-Per-Click (CPC) across the ad ecosystem and that all fraudulent impressions impacted advertisers. We chose CPC = $0 to reflect the lower bound for financial analysis, assuming perfect CPC smart pricing. Attackers can still profit from fraudulent clicks even with smart pricing, as recent work shows the actual CPC charged after smart pricing was between 10 to 30 cents for ZeroAccess [7]. Smart pricing is challenging because not all conversion rates can be effectively measured, and not all conversion actions are logged and shared between advertisers and ad networks/exchanges. Since TDSS/TDL4 engages in both impression and click fraud, the monetization technique likely aimed to avoid detection by generating positive click-through rates. We accounted for all impressions, as impression fraud remains a significant problem. The new standard of Ad Viewability has been introduced to prevent advertisers from spending money on invalid ad impressions [4, 3]. However, since there is little documentation on how impression fraud was handled by ad networks and ad exchanges during the active period of TDSS/TDL4 (before October 2013), it is reasonable to assume that a significant portion, if not all, of the impressions went undetected. Obtaining ground truth would require collaboration among many entities, which was not feasible for this study.

### 3.8 Related Work
TDSS/TDL is a widely spread and intensively monetized malware family that has evolved into one of the most sophisticated rootkits [74, 75, 76, 67]. The latest version, TDL4, can infect both 32-bit and 64-bit systems, unlike its predecessor, TDL3. The extent of its propagation allowed operators to diversify into other businesses, such as leasing the botnet and providing installation channels for new malware.

Operating a sinkhole is a safe, passive method to collect data on network connections between malware and the servers they contact. Sinkholing works for network connections that go over DNS, which is preferred for cheap communication. TDSS/TDL4 uses P2P as an alternative communication method [78]. Data from a sinkhole operation can be used to measure the network behavior of a botnet, as demonstrated in [69].

Several studies have focused on click fraud abuse, including those that measure abuse and propose countermeasures. Many of these works focus on the ad network's perspective [79, 68]. Springborn et al. [65] studied pay-per-view networks, showing millions of dollars lost annually due to fraudulent impressions. Daswani et al. [80] examined the "Clickbot.A" botnet, illustrating the value chain of ad-abuse. Stone-Gross et al. [54] studied abuse from both the botnet's and ad network's perspectives, highlighting the significant financial gains. These works focus on specific parts of the ad ecosystem, while ours characterizes overall abuse impact using edge-based metrics.

The most similar work to ours is the recent ZeroAccess study [7], which estimated daily advertising losses caused by the botnet by analyzing one week of click fraud activities. While novel, it did not help large network administrators independently measure ad-abuse levels. Our system addresses these limitations by studying ad-abuse passively at the edge of the Internet over a multi-year period.

### 3.9 Summary
We present a novel Ad-abuse Analysis System (A2S) to conservatively estimate the long-term damage caused by the monetization component of botnets to advertisers. We studied TDSS/TDL4, one of the most notorious botnets, using a four-year dataset from an edge-based system. Our findings revealed the properties and evolution of the botnet's infrastructure and estimated the lower bound for abuse: less than 15% of the botnet population inflicted financial losses of at least $346 million, observed via a US ISP network over four years. This highlights the significant long-term abuse that botnets bring to advertisers, making them a low-risk, high-reward monetization method for modern botmasters. The estimated lower bound underscores the need for more research to detect and prevent ad abuse.

### 4.1 Motivation
In Chapter 3, we proposed a new clustering technique to efficiently measure impression fraud from the TDSS/TDL4 botnet. Similar to other research efforts, the focus was on detecting ad abuse at the edge (i.e., the infected host) or outside the ad ecosystem (vantage point V1 in Figure 2.1, Section 2.2). However, little is known about the network policies enforced within the ad ecosystem, especially during the ad bidding process. Advertisers need to selectively respond to ad bidding requests based on the reputation of the publishers. Unfortunately, little work has been done to measure the reputation of publisher domains.

In this chapter, we examine whether open-source intelligence data from the security community can be used to ascertain publisher reputation. We analyze anonymized ad bidding requests between a large demand-side platform (DSP) in North America and six ad exchanges over three months (vantage point V2 in Figure 2.1, Section 2.2). Using open-source intelligence from public blacklists and malware execution traces, we investigate the reputation properties of publishers in the advertisement bidding process (Section 4.5). This chapter makes the following key observations:

- We explain the ad bidding process and measure it in detail to improve the network and security communities' understanding of the advertising ecosystem. These measurements include bidding request traffic from six large ad exchanges, covering request volume, publisher domains, and client distribution. We find that malicious publisher domains tend to be present on more ad exchanges and reach more clients than non-blacklisted publisher domains on average. These differences are statistically significant and suggest that reputation systems for advertisement publishers are possible.
- We identify that of all publisher domains seen in the DSP, 13,324 (0.27%) are on blacklists, generating only 1.8% of bid requests, and 134,262 (2.74%) are queried by malware. This underestimates the amount of ad abuse based on other studies [23, 24], which have measured it as high as 30%. This also indicates that traditional sources of maliciousness used in the security community are insufficient to understand ad abuse seen from DSPs.
- Using graph analysis, we demonstrate how to track advertising infrastructure over time. To focus on potentially malicious campaigns, we use a simple suspiciousness heuristic based on open-source intelligence feeds. Using this technique, we identify case studies that show ad network domains support Potentially Unwanted Programs (PUPs), rely on domain name generation algorithms, and are occasionally used to distribute malware.

### 4.2 Real-Time Bidding
In this section, we briefly describe the real-time bidding process. Figure 4.1 shows a simplified view of the Real-Time Bidding (RTB) process. The JavaScript from the publisher page requests an ad through a bid request. In the request, the publisher includes information such as the category of the page, size of the ad space, country, user’s browser and OS version, cookie, etc., and sends it to the ad exchange (step 1).

Once the ad exchange receives the bid request from a seller, it consolidates the request into seller site information (e.g., URL of the publisher page), device information, and user data. The ad exchange then sends the bid request to its buyer applications, for instance, through a DSP (step 2).

After receiving the bid request, the buyer replies with a bid response containing the ad URL and the markup price (step 3). The RTB protocol typically waits for a fixed amount of time (e.g., 100ms) to collect bids and then chooses the winning bid under the auction’s rules (e.g., OpenRTB [81]). The ad exchange then notifies the winner and returns the ad to the publisher (step 4).

In the aforementioned example, the bid request comes directly from the publisher, making the publisher page the referrer for the bid request. Often, the bid request may come through intermediaries, but the publisher page remains the primary referrer.