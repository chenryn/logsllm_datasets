= negl(λ),
where the probability is taken over a, b, c, s ←R Zp.
As for the Dk(p)-MDDH assumption, we deﬁne a Q-fold variant of the DBDh assumption,
and prove its random self-reducibility.
Deﬁnition 14: Q-fold DBDH assumption
For any Q ≥ 1, we say that the Q-fold DBDH assumption holds in a pairing group
PG := (G1, G2, p, P1, P2, e), if for all PPT adversaries A:
AdvQ-DBDH
PG,A (λ) := | PrhA(cid:16)PG, [a]1, [b]1, [b]2,{[ci]2, [abci]T}i∈[Q](cid:17) = 1i
− PrhA(cid:16)PG, [a]1, [b]1, [b]2,{[ci]2, [si]T}i∈[Q](cid:17) = 1i|
= negl(λ),
where the probability is taken over a, b ←R Zp, and for all i ∈ [Q], ci, si ←R Zp.
Lemma 4: DBDH ⇒ Q-fold DBDH
Let Q ≥ 1, and a pairing group PG := (G1, G2, p, P1, P2, e). For any PPT adversary A,
26
Chapter 2. Preliminaries
there exists a PPT adversary B such that:
AdvQ-DBDH
PG,A (λ) ≤ AdvDBDH
PG,B (λ).
Proof of Lemma 4. Upon receiving a DBDH challenge (PG, [a]1, [b]1, [b]2, [c]2, [s]T ), B samples
αi ←R Z∗
i · ab]T for all i ∈ [Q],
and gives the challenge (PG, [a]1, [b]1, [b]2,{[ci]2, [si]T}i∈[Q]) to A.
i ←R Zp computes [ci]2 := [αi · c]2 + [c′
i]2, [si]T := [αi · s]T + [c′
p, c′
We now recall the deﬁnition another standard assumption in asymmetric pairing groups,
ﬁrst introduced in [BSW06].
Deﬁnition 15: 3-PDDH assumption
We say that the 3-party Decision Diﬃe-Hellman (3-PDDH) assumption holds in a pairing
group PG ← PGGen(1λ) if for all PPT adversaries A:
Adv3-PDDH
PG,A (λ) := | Pr[A(PG, [a]1, [b]2, [c]1, [c]2, [abc]1) = 1]
− Pr[A(PG, [a]1, [b]2, [c]1, [c]2, [d]1) = 1]|
= negl(λ)
where the probability is taken over a, b, c, d ←R Zp.
Decisional Composite Residuosity
In [Pai99], the Decisional Composite Residuosity assumption is used to build a linearly homo-
morphic encryption scheme where the message is ZN , for an RSA modulus N.
Deﬁnition 16: Decisional Composite Residuosity assumption
Let N = pq, for prime numbers p, q. We say the Decisional Composite Residuosity (DCR)
assumption holds if for all PPT adversaries A:
AdvDCR
N,A (λ) := | Pr[A(N, zN
0 ) = 1] − Pr[A(N, z) = 1]| = negl(λ),
where the probability is taken over z0 ←R Z∗
N , z ←R Z∗
N 2.
Learning With Errors
We now provide minimal background on lattice-based cryptography.
2
Gaussian distributions. For any vector c ∈ Rn and any parameter σ ∈ R>0, let ρσ,c(x) :=
(cid:17)be the Gaussian function on Rn with center c and parameter σ. Let ρσ,c(Λ) :=
exp(cid:16) −πkx−ck2
Px∈Λ ρσ,c(x) be the discrete integral of ρσ,c over Λ, and let DΛ,σ,c be the discrete Gaussian
distribution over Λ with center c and parameter σ. Namely, for all y ∈ Λ,
σ2
DΛ,σ,c(y) :=
ρσ,c(y)
ρσ,c(Λ)
.
To keep notation simple, we abbreviate ρσ,0 and DΛ,σ,0 as ρσ and DΛ,σ, respectively.
2.3 Deﬁnitions for Single-Input Functional Encryption
27
Deﬁnition 17: LWEq,α,m assumption
Let q, m ∈ N and α ∈ (0, 1) be functions of the security parameter λ ∈ N. We say that
the LWEq,α,m assumption holds if for all PPT adversaries A:
AdvLWE
q,α,m,A := | Pr[A(q, A, As + e) = 1] − Pr[A(q, A, u) = 1]| = negl(λ),
where the probability is taken over A ←R Zm×λ
[Reg05] gives a quantum reduction from a worst-case lattice problem to LWE. We now
present a so-called multi-hint extended LWE assumption, which is stronger than the latter in
general. For some parameters, it has been shown in [ALS16] to be no stronger than LWE.
q , e ← Dm
, s ←R Zλ
q
Z,αq.
Deﬁnition 18: mheLWEq,α,m,t,D assumption
Let q, m, t ∈ N, α ∈ (0, 1), D be a distribution over Zt×m, all functions of the se-
curity parameter λ ∈ N. We say that the the multi-hint extended LWE assumtpion,
mheLWEq,α,m,t,D, holds, if for all PPT adversaries A:
AdvmheLWE
q,α,m,t,D,A := | Pr[A(q, A, As + e, Z, Ze) = 1] − Pr[A(q, A, Z, Ze, u) = 1]| = negl(λ),
where the probability is taken over A ←R Zm×λ
q
, s ←R Zλ
q , Z ←R D, e ← Dm
Z,αq.
Theorem 1: Reduction from LWEq,α′,m to mheLWEq,α,m[ALS16]
Let n ≥ 100, q ≥ 2, t  1). By a standard hybrid argument over the n instances, the converse
is also true.
Lemma 5: Single-instance implies multi-instance security
For any scheme FE, PPT adversary A, xx ∈ {many,one}, yy ∈ {AD,SEL}, there exists a
PPT adversary B such that for all security parameters λ:
FE,A,n (λ) ≤ n · Advxx-yy-IND
Advxx-yy-IND
FE,B,1
(λ).
Proof of Lemma 5 (sketch). We only give a high-level sketch of the proof, which uses a stan-
dard hybrid argument over the n instances. Namely, we deﬁne n games, where the i’th game
answers all the queries (j, (x0, x1)) to OEnc for j ≤ i with Enc(gpk, ekj, x1), and for j > i,
answers with Enc(gpk, eki, x0). To transition from hybrid i to i + 1, we use the single instance
security for the queries to OEnc on the i + 1’st instance. The rest can be simulated simply by
sampling (ekj, mskj) ← Setup(1λ, gpk, F ), for all j 6= i + 1, since gpk is known.
We consider the following weaker notions of security.
the adversary A can only query its encryption oracle OEnc
One ciphertext, one-yy-zzz:
once per instance i ∈ [n].
the adversary A must send its queries to OEnc before-
Selective security, xx-SEL-zzz:
hand, that is, before receiving the gpk (and the (eki)i∈[n], in the public-key setting) from the
experiment, and before querying OKeygen.
These weaker security notions may appear artiﬁcial, and indeed, the desirable security
notions are many-AD-IND or many-AD-SIM, both of which capture natural attacks. However,
they are still useful as a ﬁrst step towards many-yy-IND security. For instance, as explained
below, in the public-key setting, one-yy-IND implies many-yy-IND. Also, using a guessing
argument (see, for instance, [BB04], in the context of Identity-Based Encryption), one can
turn any selectively-secure scheme into an adaptively-secure scheme, albeit with an exponential
security loss.
Remark 2: Semi-adaptive security
In the context of Attribute-Based Encryption (which is a particular case of Functional
Encryption), [CW14] put forth the notion of semi-adaptive security, where the adversary
has to send its challenge messages before querying any decryption keys, but after receiving
the public key from its experiment. This notion lies in between adaptive and selective
security, namely, it is implied by the former, and implies the latter. In [GKW16], the
authors give a generic transformation that turns any selectively-secure FE into a semi-
adaptive secure FE, only using Public-Key Encryption.
It is also known that one-xx-IND security implies many-xx-IND security, in the public-key
setting.
2.4 Deﬁnitions for Multi-Input Functional Encryption
31
Lemma 6: one-xx-IND security implies many-xx-IND security
For any public-key scheme FE, PPT adversary A, xx ∈ {AD,SEL}, there exists a PPT
adversary B such that for all security parameters λ:
Advmany-xx-IND
FE,A,n
(λ) ≤ Q · Advone-xx-IND
FE,B,n
(λ),
where Q is an upper bound on the number of queries to OEnc(i,·), for any i ∈ [n].
Proof of Lemma 6 (sketch). We only give a high-level sketch of the proof, which uses a stan-
dard hybrid argument over the challenge ciphertexts. Namely, we deﬁne Q games, where the
i’th game answers the ﬁrst i query to OEnc(j, (x0, x1)) for any j ∈ [n], with Enc(gpk, ekj, x1),
and the last queries with Enc(gpk, ekj, x1). To transition from hybrid i to i + 1’st, we use
the one-yy-IND security to switch the i + 1’st query from Enc(gpk, ekj, x0) to Enc(gpk, ekj, x1)
simultaneously for all instances j ∈ [n]. The other queries can be addressed using the public
encryption keys ekj.
Deﬁnitions for Multi-Input Functional Encryption
We recall the deﬁnition of multi-input functional encryption, that has been ﬁrst introduced
in [GGG+14]. It generalizes functional encryption as follows. In a multi-input functional en-
cryption, encryption is split among n diﬀerent users, or input slots; each of which encrypts
separately an input xi independently, without any interaction. Then, given a functional de-
cryption key for an n-ary function f, decryption operates on all the n independently generated
ciphertexts and recovers f(x1,··· , xn). This generalization is useful in applications where the
data to encrypt is distributed among users that do not trust each other; or when the same user
wants to encrypt data at diﬀerent point in time (without memorizing the randomness used for
prior encryption).
Deﬁnition 22: Multi-input Function Encryption
Let {Fn}n∈N be a set of functionality where for each n ∈ N, Fn deﬁned over (Kn,X1,··· ,Xn)
is a function Fn : Kn × X1 × ··· × Xn → Z. Each i ∈ [n] is called an input slot. The key
space Kn, depends on the arity n. A multi-input functional encryption scheme MIFE
for the set of functionality {Fn}n∈N consists of the following algorithms: