以随机访问，但有些数据结构的访问并没有这么自由，
对于数组来说确实没必要搞这么复杂，
不就行了：
也许你会说，
1.数据结构的概念
for （i = LEN-l;
又是堆栈又是递归的，
putchar(buf[i]);
return 0;
putchar('\n');
 print _backward(0) ;
1
>= 0; i--
，倒序打印一个数组犯得着这么大动干戈吗？写一个简单的循环
，因为数组既可以从前向后访问也可以从后向前访问，甚至可
全国嵌入式人才培训基地
起始页
一级
一节你就会看到这样的数据结构。
3.深度优先搜索
---
## Page 201
编程序找出从左上角到右下角的路线。
它表示一个迷宫，
3.深度优先搜索 请点评
现在我们用堆栈解决一个有意思的问题，定义一个二维数组：
例12.3.用深度优先搜索解迷宫问题
int maze[5][5]
#define MAX 28Y 5 
void print_maze(void)
int maze[MAX_ROW][MAX_COL] = { 
struct
void push(struct point p)
struct point { int row, col; } stack[512];
#include 
int
其中的1表示墙壁,
is_empty(void)
一
 point pop(void)
int i，j;
return top == 0;
return stack[--top];
stack[top++] = p;
C
OL
0
0
0
0,0
C
0表示可以走的路，
0
0
0
程序如下：
全国嵌入式人才培训基地
第12章栈与队列
3.深度优先搜索
只能横着走或竖着走，不能斜着走，要求
20
---
## Page 202
p.col);
void visit(int row, int col, struct point pre)
struct point
int 
main(void)
return 0;
} else
while
struct 
struct point visit_point = { row,
for (i = 0;
ma
 (p.row == MAX_ROW - 1 && p.col == MAx_COL - 1)
一
T
(!is_empty()）
 point p 
printf("No path!\n");
print_maze();
{
一
if 
if
putchar('\n');
if 
if
一
dod
i
int is_empty(void)
 queue[tail++] = p;
从队头取出元素并返回。就像排队买票一样，
printf("*********\n");
 return head == tail;
for
int
return queue[head++];
，也提供两种基本操作：Enqueue（入队）将元素添加到队
0
0
"tail 
for 
'0;
4.队列与广度优先搜索
0
全国嵌入式人才培训基地
第12章栈与队列
, maze[i][j]);
COL;
j++）
先来先服务，
，先入队的人也是
1
下一
---
## Page 208
运行结果如下:
2222
22200
220
121
L
0
0
0
p.col);
0
int main(void)
void visit(int row, int col)
C
0
0
return
while
enqueue(p);
maze[p.row][p.col] = 2;
struct 
struct point_visit_point = { row, 
else
f (p.row == MAX_ROW - 1 && p.col == MAx_COL - 1) 
point p 
0;
printf("No path!\n");
print_maze();
if 
if
if
if
r:d
row
break;
visi
0，
t
MAX
 MAX_COL
0，
ROW
-1 };
p.row，]
[p.col]
1
-1)
/*
1)
/* goal */
 col, head-l };
p.col);
==
up
left
：0)
0
*
*/
*/
208
---
## Page 209
2
2
2
209
---
## Page 210
为了帮助理解，
变量head和tai1是队头和队尾指针,
但我想换一
其实仍然可以像例12.3“用深度优先搜索解迷宫问题”-
predecessor
图12.3.广度优先搜索的队列数据结构
if (p点是终点),
while（队
2222
0
432２2２2
else
一种更方便的数据结构，
2*
head
我把这个算法改写成伪代码如下:
没有路线可以到达终点；
while
打印p点的坐标;
否则沿右、
if（p这个
出队
２２２２２＊
L
0
0
（和p相邻的点
非空)
C
0
o
L
o
L
0
2
 break;
个指针，
江
2
G
223
，
，
直接在每个点的结构体中加一个成员表示前趋：
点的前趋；
上四个方向探索相邻的点
4
：col, predecessor; } queue[512];
一样用predecessor数组表示每个点的前趋，
它的前趋就是刚出队的p点；
0