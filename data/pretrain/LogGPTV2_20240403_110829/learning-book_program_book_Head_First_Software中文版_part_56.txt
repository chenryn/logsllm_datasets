（众需票或持IP格式）险其级两户。其他用
户应当有一全可以否端文管的选项。对平
被发运的文件没有大小的障制。
20
估计值：
4
优先级：
使用情节和
准务放的大白板上的使用
情节色含优无级和信计值。
用户案例描
述的是软件
需要做的同
C
PDI
一件事情。
438
附录
---
## Page 475
本书之遗
你可以给便用情节
增加更多的细节。
传送一张图片给其他用户
或老停收使用查例
描述用一要求“厦送一陈图
使期少一点细节……
片给用户
务使用情节
送完金取决手你和
等效的使用重例。
1.单击“伟送图片”按钮
你的客户。
2.在联系人列表中显示图片可被发送给使
用老。
2a.在壹询框中输入接收人的名字
好使用业例的
26.单击壹询以找到用户
美健需素。
3.选择图片要发送给的用户
4.单击发送
5.
接受人被询问是否想接爱图片
5a.（.接收人接收图片
5a.2.接收人测览图片
使用
56.1、接收人拒收图件
与使用情节相比。
重例的序别会有更多的
56.2.图件被毛弃
步得和细节，对子开发
有限多损买便用象例的方式
这种方式通播进用户与其使用
人男来说，更易于工
但这用时参味着与常是
的款件之用一乡一步的至动。
与客户一起的联外工作
量以便把细节确定下来，
那么，大的差别是什么呢？
其实，差别真不是太大。使用情节一般有三行左右的文字描述并伴有估计值和优先
级，因此，所有的信息都一目了然。相对来讲，使用案例通常有对用户与软件的互
动过程更详细的描述。使用案例通常也不包括优先级或者估计值一
一这些细节通常可
从其他地方获得，在更详细的设计文档之中。
理想上，使用情节应由客户撰写，而传统的使用案例则不是这样。最终，这两种方
法所做的工作是一样的，捕提你的客户需要你的软件做什么。另外，一个使用案例，
通过替代的途经（在特定的情形下，使用软件的不同方式），可能比使用情节能获取
更多的细节。
目前位置
439
---
## Page 476
系统测试与单元测试的比较
#4.系统测试与单元测试的比较
在第7章和第8章中，你学到了如何将构建测试和连续集成到你的开发流程之中。
测试是众多关键因素之一，通过测试，你能证明代码是能正常工作的，并且能满
足你的客户设定的需求。这两个不同的目标被两种不同类型的测试所支持。
单元测试检验你的代码
单元测试用于验证你的代码在做它应该微的事情。这类测试被构建到连续
构建和集成的循环中，以确认你对代码所做的任何修改不会让测试失败，
破坏代码和代码库中的剩余部分。
在理想情况下，软件中的每一个类都应该有一个相应的测试单元，实际上，
单元测试处在很保级的阶
采用测试驱动开发方式时，你的测试代码开发在编写任何代码之前，因
段··源文件和XM基述
此，没有代码是没有通过测试的，虽然，单元测试有它自身的局限性。例
如，或许你确定调用Automobile类中的drive（）)时能正常运行….但当
Automobile中的其他实例也被驱动，并且也使用相同的RaceTrack对象
时，情况会怎样呢？
系统测试检验你的软件
系统测试弥补了单元测试的不足。系统测试当你的代码集成到完
整的功能系统中时测试代码，系统测试有时是自动化的，但它经
常会需要某人以最终用户的心情来操作整个系统。
例如，你可以打开GUI来监视一场比赛，按下“StartRace”键，
观看小车在轨道上绕行的动画版本，然后模拟一场车祸，一切都与客户
所期待的一样吗？这就是系统测试。
系统测试施你的应用
系统作为整体
没有愚囊的问题
问：除了单元测试和系统测试之外，不是还
单元测试证明代码
有许多其他类型的测试吗？
能正常运行。系统
同名称的测试，从源代码组别到企业较件集成组
测试证明你的软件
别。州如，你可能听说过验收测试（Acceptance
tests），验收测试通需由客户进行主导，客户根
符合客户需求。
据你的款件是否在做它应该做的事情，决定接收
还是拒收，
440
附录
---
## Page 477
本书之遗
#5.代码重构
代码重构（Refactoring）就是修改你的代码结构而不改变其行为的
过程。代码重构是为了增强代码的清晰性、灵活性和可扩展性，它
通常与系统设计中特定部分的改善有关。
大多数的代码重构相当简单，并且集中于代码特定设计的某一方面。
重构改变了代
例如：
public double getDisabi1ityAmount (){
// Check for eligibility
码的内部结构
if (seniority  12)
return 0;
i.f (isPartTime)
码的行为。
// Calculate disability amount and return it
return 0;
虽然这段代码并没有什么特别的错误，但它不具备应该有的可维护
性。getDisabilityAmount(）方法实际上做了两件事情：检查去
功能（Disability）的资格（Eligibility）和计算总数。
至此，你应当知道这违背了单一责任原则。事实上，我们应该把处
理“资格要求”代码和计算去功能的数量的代码分开。因此，我们
把代码重构成以下这样：
我们采用了两个责任
pub1ic double getDisabi1ityAmount (){
们收在不用的方法中。
并把它
// Check for eligibility
则。
SRP版
if(isEligibleForDisability())(
// Calculate disability amount and return it
}else {
return 0;
F
现在，如果去功能的资格要求发生变化，只有isgligibleFor-
Disability()方法需要修改—而负责计算去功能数量的方法则
不需要修改。
把代码重构看作是对代码的检查，它应该是一个持续不断的过程，
因为遗留下来不管的代码倾向于越来越难再利用。回到已有的代
码，利用你所学的新技术，对它进行代码重构。那么，那些必须维
护和重用你的代码的编程人员会对你感激递零。
目前位置
441
---
## Page 478
家
---
## Page 479
附录ii技术和原则
给有经验的软件
米
米
开发人员的工具
开发技术
开发原则
开发循环帮助你保
诚实地对待你的客户，尤其当
当变更发生时，重
你要告诉他坏消息时。
衡开发继环
可运行的软件高于一切。
每次开发循环都
紧随其后的是代码要具可读性
行的软件，并目
和可理解性。
如果你没有测试某段代码，就
假定它不能工作。
修正系统的功能性。
为你编写的代码感到骄傲。
软件中所有的代码，即使你一
点都没有编写，也是你的责任。
是否曾经希望那些好用的工具和技术都放在一起？这里对我们所涉
及到的所有软件开发技术和原则微一个摘要，把它们全部浏览一遍、
看看你是否能记得每则内容的涵义。你甚至可能想把这些内容页面裁
PDG
剪下来，把它贴到你的大自板的底部，以便你每天参加碰头会议的人
都能看得到。
进入附录
443
---
## Page 480
开发技术
开发技术
开发循环有助于你把握开发方向。
当变更发生时，重新部和权衡你
的开发能环。
每轮开发储环将户生运行的软件。
每个处理步课都要收集客户的反馈
参见。
通过共筑远景、观察和角色扮演
你认为练习还没萄继束，对喝：科对第4象和
第5章的内客，写下你自己体金到的开发技
弄清楚系统该有怎样的行为。
术.
2章
利用使用情节，使开发以功能为中
心。
利用计划扑充牌来进行估计。
理想的开发循环时间不应超过一个
月，即意味若每轮开发他环你有20
个工作日。
采用版本管理工具对软件中的修改
把时间效率值应用于你的开发计则
进行记录并把它分发给团队中的成
让你更有信心兑现你给客户的开发
员。
承诺。
使用标答记录项目中的里程碑事件
使用墙上的大白板来计划和监测你
（开发继环结束，版本发布、错误修
当前的开发继环工作。
复等等）。
递择哪些使用情节可以在Milestone
使用分支维护代码的独立到本，但
1.0完成，以及哪些使用情节要安排
只有在绝对必要时才做分支。
在哪一轮开发继环时，要取得客户
认可。
444
附录i
---
## Page 481
技术和原则
利用构建工具对脚本进行构建、打
包、测试和配置应用系统。
大多数的3DE工具都已经在使用某种
构建工具。要熟悉请工具，你可以
每01道
靠DE构建应用程序。
像对待代码那样对待你的构建脚本
把它调入到版本控制之中。
用不同的角度去看你的系统，你必
个
须进行全面的测试。
你在第10章学到了什么：把它写到这置、
测试既要考虑成功素例，也爱考虑
章
关败案例。
在你修改某行代码之前，要确认它
只要有可能，就采用自动化测试。
是可控的和可构建的。
在每次提文时，采用连续集成工具
在错误出现在你不知道的代码中时
对你的代码进行自动构建和测试。
利用峰值测试来估计究成排错常票
的时间。
无编写测试程序，再编写代码使测试通
估计排错所需的制余工作量时，把
团队的信心因素纳入考虑。
过。
通过测试来告诉你何时错误被修正
开始时，你的测试可能会速还先败，等
它们通过测试后，你可以通行代码重构。
使用模拟对系，提供测试所需对象的各
通过卖实的数据，批判性地评估你
种变形。
的流程所作的任何定更。
注参你的工作量完成比率一尤加在开发
必要时，使你的提交物正式化，但
环结束之后
务必了解它所提供的价值如何。
开发的环的步调是很重爱的一
一如果保持
尽可能只在两轮开发继环之间变更
推进状态，你可以减少一些使用情节。
你的流程。
第
不要因为有人提前究成任务而责懂他们一
如果他们完成的工作温有问题，让他们利用
额外的时间继续向前或老学习一些新的知识。
目前位置
445
---
## Page 482
开发原则
开发原则
交付客户需要的款件。
按时交付款件。
第5章
按预算交付款件。
客户知道他们想要的是什么，但有时
像作者一样……基于你在第5章学
你必须帮助他们确定下来。
习的内客，把你自己的舟置原则写
坚持需求要面向客户
第2章
始终要清楚哪里需要修改（和不需
反复地与客户抱据和提炼系统需求。
要修改）。
要知运什么代码应请放进特定的版
本中，并能再次获取它。
控利代码的变更和分发。
坚持开发继环简短并且可管理。
最后，由客户决定Milestome1.o中需
第3章
构建项目应该是可重复和可控的。
要哪些内容和不需要哪些内容。
构建脚本为其他自动化工具类定基
爱承诺，就要兑现。
础。
第6.
总是诚宾地对待你的客户。
构建脚本不只是一步一步的自动化
并且能捕肤端译和部暑的决策还辑。
我们在第4章没有增加任何技术和
愿则……你出品项技术和原则
并把它们买到这里吗？
446
附录i
---
## Page 483
技术和原则
测试是一种工具，让你总能知道项
0的进展情况。
连续集成让你确信，代码库中的代
第7
10章