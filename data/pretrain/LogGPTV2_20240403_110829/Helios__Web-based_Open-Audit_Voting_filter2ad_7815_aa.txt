title:Helios: Web-based Open-Audit Voting
author:Ben Adida
Helios: Web-based Open-Audit Voting
Ben Adida
ben PI:EMAIL
Harvard University
Abstract
Voting with cryptographic auditing, sometimes called
open-audit voting, has remained, for the most part, a the-
oretical endeavor. In spite of dozens of fascinating pro-
tocols and recent ground-breaking advances in the ﬁeld,
there exist only a handful of specialized implementations
that few people have experienced directly. As a result,
the beneﬁts of cryptographically audited elections have
remained elusive.
We present Helios, the ﬁrst web-based, open-audit
voting system. Helios is publicly accessible today: any-
one can create and run an election, and any willing ob-
server can audit the entire process. Helios is ideal for on-
line software communities, local clubs, student govern-
ment, and other environments where trustworthy, secret-
ballot elections are required but coercion is not a serious
concern. With Helios, we hope to expose many to the
power of open-audit elections.
1
Introduction
Over the last 25 years, cryptographers have developed
election protocols that promise a radical paradigm shift:
election results can be veriﬁed entirely by public ob-
servers, all the while preserving voter secrecy. These
protocols are said to provide two properties: ballot cast-
ing assurance, where each voter gains personal assur-
ance that their vote was correctly captured, and universal
veriﬁability, where any observer can verify that all cap-
tured votes were properly tallied. Some have used the
term “open-audit elections” to indicate that anyone, even
a public observer with no special role in the election, can
act as auditor.
Unfortunately, there is a signiﬁcant public-awareness
gap: few understand that these techniques represent a
fundamental improvement in how elections can be au-
dited. Even voting experts who recognize that open-audit
elections are “the way we’ll all vote in the future” seem
to envision a distant future, not one we should consider
for practical purposes yet. The few implementations of
open-audit elections that do exist [3, 2] have not had as
much of an impact as hoped, in large part because they
require special equipment and an in-person experience,
thus limiting their reach.
We present Helios, a web-based open-audit voting
system. Using a modern web browser, anyone can set
up an election, invite voters to cast a secret ballot, com-
pute a tally, and generate a validity proof for the entire
process. Helios is deliberately simpler than most com-
plete cryptographic voting protocols in order to focus on
the central property of public auditability: any group can
outsource its election to Helios, yet, even if Helios is
fully corrupt, the integrity of the election can be veriﬁed.
Low-Coercion Elections. Voting online or by mail is
typically insecure in high-stakes elections because of the
coercion risk: a voter can be unduly inﬂuenced by an at-
tacker looking over her shoulder. Some protocols [13]
attempt to reduce the risk of coercion by letting voters
override their coerced vote at a later (or earlier) time. In
these schemes, the privacy burden is shifted from vote
casting to voter registration. In other words, no matter
what, some truly private interaction is required for coer-
cion resistance.
With Helios, we do not attempt to solve the coercion
problem. Rather, we posit that a number of settings—
student government, local clubs, online groups such as
open-source software communities, and others—do not
suffer from nearly the same coercion risk as high-stakes
government elections. Yet these groups still need voter
secrecy and trustworthy election results, properties they
cannot currently achieve short of an in-person, physically
observable and well orchestrated election, which is often
not a possibility. We produced Helios for exactly these
groups with low-coercion elections.
USENIX Association  
17th USENIX Security Symposium 
335
Trust no one for integrity, trust Helios for privacy.
In cryptographic voting protocols, there is an inevitable
compromise: unconditional integrity, or unconditional
privacy. When every component is compromised, only
one of those two properties can be preserved.
In this
work, we hold the opinion that the more important prop-
erty, the one that gets people’s attention when they under-
stand open-audit voting, is unconditional integrity: even
if all election administrators are corrupt, they cannot con-
vincingly fake a tally. With this design decision made,
privacy is then ensured by recruiting enough trustees and
hoping that a minimal subset of them will remain honest.
In the spirit of simplicity, and because it is difﬁcult
to explain to users how privacy derives from the acts of
multiple trustees, Helios takes an interesting approach:
there is only one trustee, the Helios server itself. Pri-
vacy is guaranteed only if you trust Helios. Integrity, of
course, does not depend on trusting Helios: the election
results can be fully audited even if all administrators –
in this case the single Helios sever – is corrupt. Future
versions of Helios may support multiple trustees. How-
ever, exhibiting the power of universal veriﬁability can
be achieved with this simpler setup.
Our Contribution.
In this work, we contribute the
software design and an open-source, web-based imple-
mentation of Helios, as well as a running web site that
anyone can use to manage their elections at http:
//heliosvoting.org. We do not claim any cryp-
tographic novelty. Rather, our contribution is a combina-
tion of existing Web programming techniques and cryp-
tographic voting protocols to provide the ﬁrst truly acces-
sible open-audit voting experience. We believe Helios
provides a unique opportunity to educate people about
the value of cryptographic auditability.
Limitations. While every major feature is functional,
Helios is currently alpha software. As such, it requires
Firefox 2 (or later). In addition, some aspects of the user
interface, especially for administrative tasks, require sig-
niﬁcant additional polish and better user feedback on er-
ror. These issues are being actively addressed.
This Paper.
In Section 2, we brieﬂy review the Helios
protocol, based on the Benaloh vote-casting approach [5]
and the Sako-Kilian mixnet [16]. In Section 3, we cover
some interesting techniques used to implement Helios in
a modern Web browser. Section 4 covers the speciﬁcs of
the Helios system and its use cases. We discuss, in Sec-
tion 5, the security model, some performance metrics,
and features under development. We reference related
work in Section 6 and conclude in Section 7.
2 Helios Protocol
This section describes the Helios protocol, which is
most closely related to Benaloh’s Simple Veriﬁable Vot-
ing protocol [5], which itself is partially inspired by the
Sako-Kilian mixnet [16]. We claim no novelty, we only
mean to be precise in the steps taken by voters, adminis-
trators, and auditors, and we mean to provide enough de-
tails for an able programmer to re-implement every por-
tion of this protocol.
2.1 Vote Preparation & Casting
The key auditability feature proposed by Benaloh’s Sim-
ple Veriﬁable Voting is the separation of ballot prepara-
tion and casting. A ballot for an election can be viewed
and ﬁlled in by anyone at any time, without authentica-
tion. The voter is authenticated only at ballot casting
time. This openness makes for increased auditability,
since anyone, including an auditor not eligible to vote
(e.g. someone from a political organization who has al-
ready voted), can test the ballot preparation mechanism.
The process is as follows between Alice, the voter, and
the Ballot Preparation System (BPS):
1. Alice begins the voting process by indicating in
which election she wishes to participate.
2. The BPS leads Alice through all ballot questions,
recording her answers.
3. Once Alice has conﬁrmed her choices, the BPS en-
crypts her choices and commits to this encryption
by displaying a hash of the ciphertext.
4. Alice can now choose to audit this ballot. The BPS
displays the ciphertext and the randomness used to
create it, so that Alice can verify that the BPS had
correctly encrypted her choices. If this option is se-
lected, the BPS then prompts Alice to generate a
new encryption of her choices.
5. Alternatively, Alice can choose to seal her ballot.
The BPS discards all randomness and plaintext in-
formation, leaving only the ciphertext, ready for
casting.
6. Alice is then prompted to authenticate. If success-
ful, the encrypted vote, which the BPS committed
to earlier, is recorded as Alice’s vote.
Because we worry little about the possibility of co-
ercion, Helios can be simpler than the Benaloh system
that inspired it. Speciﬁcally, the BPS does not sign the
ciphertext before casting, and we do not worry about Al-
ice seeing the actual hash commitment of her encrypted
vote before sealing. (The subtle reasons why these can
lead to coercion are explained in [6].)
336 
17th USENIX Security Symposium 
USENIX Association
USENIX Association  
17th USENIX Security Symposium 
337
c1
c2
cN
M
.
.
.
M
d1
d2
dN
.
.
.
d
1
d
2
.
.
.
d
N
Figure 1: The “Shadow-Mix” Shufﬂe Proof. The mix server
creates a secondary mix. If challenged with bit 0, it reveals this
secondary mix. If challenged with bit 1, it reveals the “differ-
ence” between the two mixes.
Shamir heuristic [9]: the challenge bits are computed as
the hash of all shadow mixes. Note how this approach is
only workable if we have enough shadow mixes to pro-
vide an overwhelming probability of integrity: if there
is a non-negligible probability of cheating, a cheating
prover can produce many shadow mixes until it ﬁnds a
set whose hash provides just the right challenge bits to
cheat.
Proof of Decryption. Once an El Gamal cipher-
text is decrypted, this decryption can be proven using
the Chaum-Pedersen protocol [8] for proving discrete-
logarithm equality. Speciﬁcally, given a ciphertext c =
(α, β) and claimed plaintext m, the prover shows that
logg(y) = logα(β/m):
• The prover selects w ∈ Zq and sends A = gw, B =
αw to the veriﬁer.
• The veriﬁer challenges with c ∈ Zq.
• The prover responds with t = w + xc.
• The veriﬁer checks that gt = Ayc and αt =
B(β/m)c.
It is clear that, given c and t, A and B can be easily com-
puted, thus providing for simulated transcripts of such
proofs indicating Honest-Verifer Zero-Knowledge. It is
also clear that, if one could rewind the protocol and ob-
tains prover responses for two challenge values against
the same A and B, the value of x would be easily solv-
able, thus indicating that this is a proof of knowledge of
the discrete log and that logg(y) = logα(β/m).
As this protocol is HVZK with overwhelming proba-
bility of catching a cheating prover, it can be transformed
safely into non-interactive form using the Fiat-Shamir
heuristic. We do exactly this in Helios to provide for
non-interactive proofs of decryption that can be posted
publicly and re-distributed by observers.
2.4 The Whole Process
The entire Helios protocol thus unfolds as follows:
1. Alice prepares and audits as many ballots as she
wishes, ensuring that all of the audited ballots are
consistent. When she is satisﬁed, Alice casts an en-
crypted ballot, which requires her to authenticate.
2. The Helios bulletin board posts Alice’s name and
encrypted ballot. Anyone, including Alice, can
check the bulletin board and ﬁnd her encrypted vote
posted.
3. When the election closes, Helios shufﬂes all en-
crypted ballots and produces a non-interactive proof
of correct shufﬂing, correct with overwhelming
probability.
4. After a reasonable complaint period to let auditors
check the shufﬂing, Helios decrypts all shufﬂed
ballots, provides a decryption proof for each, and
performs a tally.
5. An auditor can download the entire election data
and verify the shufﬂe, decryptions, and tally.
If an election is made up of more than one race, then
each race is treated as a separate election: each with its
own bulletin board, its own independent shufﬂe and shuf-
ﬂe proof, and its own decryptions. This serves to limit
the possibility of re-identifying voters given long ballots
where any given set of answers may be unique in the set
of cast ballots.
3 Web Components
We have clearly stated that Helios values integrity ﬁrst,
and voter privacy second. That said, Helios still takes
great care to ensure voter privacy, using a combination
of modern Web programming techniques. Once the bal-
lot is loaded into the browser, all candidate selections are
recorded within the browser’s memory, without any fur-
ther network calls until the ballot is encrypted and the
plaintext is discarded. In this section, we cover the Web
components we use to accomplish this goal.
338 
17th USENIX Security Symposium 
USENIX Association
3.1 Single-Page Web Application
A number of Web applications today are called “single-
page applications” in that the page context and its URL
never change. Gmail [10] is a prime example: clicks
cause background actions rather than full-page loads.
The technique behind this type of Web application is the
use of JavaScript to handle user clicks:
Do Stuff
which connects to an HTML template with variable
placeholders:
The election hash is {$T.election.hash}.
The code can, at a later point, render this template with a
parameter and without any additional network access:
When a user clicks the “Do Stuff” link, no new page
is loaded. Instead, the JavaScript function do stuff()
is invoked. This function may make network requests
and update the page’s HTML, but, importantly, the page
context, including its JavaScript scope, is preserved.
For our purposes, the key point is that, if all necessary
data is pre-loaded, the do stuff() function may not
need to make any network calls. It can update some of
its scope, read some of its pre-loaded data, and update
the rendered HTML user interface accordingly. This is
precisely the approach we use for our ballot preparation
system: the browser loads all election parameters, then
leads the voter through the ballot without making any
additional network requests.
The jQuery JavaScript Library. Because we ex-
pect auditors to take a close look at our browser-based
JavaScript code, it is of crucial importance to make this
code as concise and legible as possible. For this purpose,
we use the jQuery JavaScript library, which provides
ﬂexible constructs for accessing and updating portions
of the HTML Document Object Model (DOM) tree, ma-
nipulating JavaScript data structures, and making asyn-
chronous network requests (i.e. AJAX). An auditor is
then free to compare the hash of the jQuery library we
distribute with that of the ofﬁcial distribution from the
jQuery web site.
JavaScript-based Templating. Also important to the
clarity of our browser-based code is the level of inter-
mixing of logic and presentation: when all logic is im-
plemented in JavaScript, it is tempting to intermix small
bits of HTML, which makes for code that is particularly
difﬁcult to follow. Instead, we use the jQuery JavaScript
Templating library. Then, we can bind a template to a
portion of the page as follows:
$("#main").setTemplateURL(
"/templates/election.html"
);