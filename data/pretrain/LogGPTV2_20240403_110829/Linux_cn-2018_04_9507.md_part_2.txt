第一部分是关于 火焰图   flame graph 的使用。
* [IO Visor](https://www.socallinuxexpo.org/sites/default/files/presentations/Room%20211%20-%20IOVisor%20-%20SCaLE%2014x.pdf)（Brenden Blanco, SCaLE 14x, January 2016）：
介绍了 **IO Visor 项目**。
* [大型机上的 eBPF](https://events.linuxfoundation.org/sites/events/files/slides/ebpf_on_the_mainframe_lcon_2015.pdf)（Michael Holzheu, LinuxCon, Dubin, October 2015）
* [在 Linux 上新的（令人激动的）跟踪新产品](https://events.linuxfoundation.org/sites/events/files/slides/tracing-linux-ezannoni-linuxcon-ja-2015_0.pdf)（Elena Zannoni, LinuxCon, Japan, 2015）
* [BPF — 内核中的虚拟机](https://events.linuxfoundation.org/sites/events/files/slides/bpf_collabsummit_2015feb20.pdf)（Alexei Starovoitov, February 2015）：
eBPF 的作者写的一篇讲稿。
* [扩展 extended BPF](https://lwn.net/Articles/603983/) （Jonathan Corbet, July 2014）
**BPF 内部结构**：
* Daniel Borkmann 正在做的一项令人称奇的工作，它用于去展现 eBPF 的 **内部结构**，尤其是，它的关于 **随同 tc 使用** 的几次演讲和论文。
	+ [使用 tc 的 cls\_bpf 的高级可编程和它的最新更新](http://netdevconf.org/1.2/session.html?daniel-borkmann)（netdev 1.2, Tokyo, October 2016）：
	Daniel 介绍了 eBPF 的细节，及其用于隧道和封装、直接包访问和其它特性。
	+ [自 netdev 1.1 以来的 cls\_bpf/eBPF 更新](http://netdevconf.org/1.2/slides/oct5/07_tcws_daniel_borkmann_2016_tcws.pdf) （netdev 1.2, Tokyo, October 2016, part of [this tc workshop](http://netdevconf.org/1.2/session.html?jamal-tc-workshop)）
	+ [使用 cls\_bpf 实现完全可编程的 tc 分类器](http://www.netdevconf.org/1.1/proceedings/slides/borkmann-tc-classifier-cls-bpf.pdf) （netdev 1.1, Sevilla, February 2016）：
	介绍 eBPF 之后，它提供了许多 BPF 内部机制（映射管理、尾调用、校验器）的见解。对于大多数有志于 BPF 的人来说，这是必读的！[全文在这里](http://www.netdevconf.org/1.1/proceedings/papers/On-getting-tc-classifier-fully-programmable-with-cls-bpf.pdf)。
	+ [Linux tc 和 eBPF](https://archive.fosdem.org/2016/schedule/event/ebpf/attachments/slides/1159/export/events/attachments/ebpf/slides/1159/ebpf.pdf) （fosdem16, Brussels, Belgium, January 2016）
	+ [eBPF 和 XDP 攻略和最新更新](https://fosdem.org/2017/schedule/event/ebpf_xdp/) （fosdem17, Brussels, Belgium, February 2017）
	这些介绍可能是理解 eBPF 内部机制设计与实现的最佳文档资源之一。
[IO Visor 博客](https://www.iovisor.org/resources/blog) 有一些关于 BPF 的值得关注技术文章。它们中的一些包含了一点营销讨论。
**内核跟踪**：总结了所有的已有的方法，包括 BPF：
* [邂逅 eBPF 和内核跟踪](http://www.slideshare.net/vh21/meet-cutebetweenebpfandtracing) （Viller Hsiao, July 2016）：
Kprobes、uprobes、ftrace
* [Linux 内核跟踪](http://www.slideshare.net/vh21/linux-kernel-tracing)（Viller Hsiao, July 2016）：
Systemtap、Kernelshark、trace-cmd、LTTng、perf-tool、ftrace、hist-trigger、perf、function tracer、tracepoint、kprobe/uprobe …
关于 **事件跟踪和监视**，Brendan Gregg 大量使用了 eBPF，并且就其使用 eBPFR 的一些案例写了极好的文档。如果你正在做一些内核跟踪方面的工作，你应该去看一下他的关于 eBPF 和火焰图相关的博客文章。其中的大多数都可以 [从这篇文章中](http://www.brendangregg.com/blog/2016-03-05/linux-bpf-superpowers.html) 访问，或者浏览他的博客。
介绍 BPF，也介绍 **Linux 网络的一般概念**：
* [Linux 网络详解](http://www.slideshare.net/ThomasGraf5/linux-networking-explained) （Thomas Graf, LinuxCon, Toronto, August 2016）
* [内核网络攻略](http://www.slideshare.net/ThomasGraf5/linuxcon-2015-linux-kernel-networking-walkthrough) (Thomas Graf, LinuxCon, Seattle, August 2015)
**硬件 卸载   offload **（LCTT 译注：“卸载”是指原本由软件来处理的一些操作交由硬件来完成，以提升吞吐量，降低 CPU 负荷。）：
* eBPF 与 tc 或者 XDP 一起支持硬件卸载，开始于 Linux 内核版本 4.9，是由 Netronome 提出的。这里是关于这个特性的介绍：[eBPF/XDP 硬件卸载到 SmartNICs](http://netdevconf.org/1.2/session.html?jakub-kicinski)（Jakub Kicinski 和 Nic Viljoen, netdev 1.2, Tokyo, October 2016）
* 一年后出现的更新版：
[综合 XDP 卸载——处理边界案例](https://www.netdevconf.org/2.2/session.html?viljoen-xdpoffload-talk)（Jakub Kicinski 和 Nic Viljoen，netdev 2.2 ，Seoul，November 2017）
* 我现在有一个简短的，但是在 2018 年的 FOSDEM 上有一个更新版：
[XDP 硬件卸载的挑战](https://fosdem.org/2018/schedule/event/xdp/)（Quentin Monnet，FOSDEM 2018，Brussels，February 2018）
关于 **cBPF**：
* [BSD 包过滤器：一个用户级包捕获的新架构](http://www.tcpdump.org/papers/bpf-usenix93.pdf) （Steven McCanne 和 Van Jacobson, 1992）：
它是关于（经典）BPF 的最早的论文。
* [BPF 的 FreeBSD 手册](http://www.gsp.com/cgi-bin/man.cgi?topic=bpf) 是理解 cBPF 程序有用的资源。
* 关于 cBPF，Daniel Borkmann 做至少两个演讲，[一是，在 2013 年 mmap 中，BPF 和 Netsniff-NG](http://borkmann.ch/talks/2013_devconf.pdf)，以及 [在 2014 中关于 tc 和 cls\_bpf 的的一个非常完整的演讲](http://borkmann.ch/talks/2014_devconf.pdf)。
* 在 Cloudflare 的博客上，Marek Majkowski 提出的他的 [与 iptables 的 `xt_bpf` 模块一起使用 BPF 字节码](https://blog.cloudflare.com/introducing-the-bpf-tools/)。值得一提的是，从 Linux 内核 4.10 开始，eBPF 也是通过这个模块支持的。（虽然，我并不知道关于这件事的任何讨论或者文章）
* [Libpcap 过滤器语法](http://biot.com/capstats/bpf.html)
#### 关于 XDP
* 在 IO Visor 网站上的 [XDP 概述](https://www.iovisor.org/technology/xdp)。
* [eXpress Data Path (XDP)](https://github.com/iovisor/bpf-docs/raw/master/Express_Data_Path.pdf) （Tom Herbert, Alexei Starovoitov, March 2016）：
这是第一个关于 XDP 的演讲。
* [BoF - BPF 能为你做什么？](https://events.linuxfoundation.org/sites/events/files/slides/iovisor-lc-bof-2016.pdf) （Brenden Blanco, LinuxCon, Toronto, August 2016）。
* [eXpress Data Path](http://www.slideshare.net/IOVisor/express-data-path-linux-meetup-santa-clara-july-2016) （Brenden Blanco, Linux Meetup at Santa Clara, July 2016）：
包含一些（有点营销的意思？）**基准测试结果**！使用单一核心：
	+ ip 路由丢弃： ~3.6 百万包每秒（Mpps）
	+ 使用 BPF，tc（使用 clsact qdisc）丢弃： ~4.2 Mpps
	+ 使用 BPF，XDP 丢弃：20 Mpps （CPU 利用率 < 10%）
	+ XDP 重写转发（在端口上它接收到的包）：10 Mpps（测试是用 mlx4 驱动程序执行的）。
* Jesper Dangaard Brouer 有几个非常好的幻灯片，它可以从本质上去理解 XDP 的内部结构。
	+ [XDP − eXpress Data Path，介绍及将来的用法](http://people.netfilter.org/hawk/presentations/xdp2016/xdp_intro_and_use_cases_sep2016.pdf) （September 2016）：
	“Linux 内核与 DPDK 的斗争” 。**未来的计划**（在写这篇文章时）它用 XDP 和 DPDK 进行比较。
	+ [网络性能研讨](http://netdevconf.org/1.2/session.html?jesper-performance-workshop) （netdev 1.2, Tokyo, October 2016）：
	关于 XDP 内部结构和预期演化的附加提示。
	+ [XDP – eXpress Data Path, 可用于 DDoS 防护](http://people.netfilter.org/hawk/presentations/OpenSourceDays2017/XDP_DDoS_protecting_osd2017.pdf) （OpenSourceDays, March 2017）：
	包含了关于 XDP 的详细情况和使用案例，以及 **性能测试** 的 **性能测试结果** 和 **代码片断**，以及使用 eBPF/XDP（基于一个 IP 黑名单模式）的用于 **基本的 DDoS 防护**。
	+ [内存 vs. 网络，激发和修复内存瓶颈](http://people.netfilter.org/hawk/presentations/MM-summit2017/MM-summit2017-JesperBrouer.pdf) （LSF Memory Management Summit, March 2017）：
	提供了许多 XDP 开发者当前所面对 **内存问题** 的许多细节。不要从这一个开始，但如果你已经理解了 XDP，并且想去了解它在页面分配方面的真实工作方式，这是一个非常有用的资源。
	+ [XDP 能为其它人做什么](http://netdevconf.org/2.1/session.html?gospodarek)（netdev 2.1, Montreal, April 2017），及 Andy Gospodarek：
	普通人怎么开始使用 eBPF 和 XDP。这个演讲也由 Julia Evans 在 [她的博客](http://jvns.ca/blog/2017/04/07/xdp-bpf-tutorial/) 上做了总结。
	+ [XDP 能为其它人做什么](https://www.netdevconf.org/2.2/session.html?gospodarek-xdp-workshop)，第二版（netdev 2.2, Seoul, November 2017），同一个作者：
	该演讲的修订版本，包含了新的内容。
（Jesper 也创建了并且尝试去扩展了有关 eBPF 和 XDP 的一些文档，查看 [相关节](https://qmonnet.github.io/whirl-offload/2016/09/01/dive-into-bpf/#about-xdp-1)。）
* [XDP 研讨 — 介绍、体验和未来发展](http://netdevconf.org/1.2/session.html?herbert-xdp-workshop)（Tom Herbert, netdev 1.2, Tokyo, October 2016）
在这篇文章中，只有视频可用，我不知道是否有幻灯片。