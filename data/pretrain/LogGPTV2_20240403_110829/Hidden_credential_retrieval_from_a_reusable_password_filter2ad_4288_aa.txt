title:Hidden credential retrieval from a reusable password
author:Xavier Boyen
Hidden Credential Retrieval from a Reusable Password
Xavier Boyen
Stanford Univ.
PI:EMAIL
ABSTRACT
We revisit the venerable question of access credentials man-
agement, which concerns the techniques that we, humans
with limited memory, must employ to safeguard our vari-
ous access keys and tokens in a connected world. Although
many existing solutions can be employed to protect a long
secret using a short password, those solutions typically re-
quire certain assumptions on the distribution of the secret
and/or the password, and are helpful against only a subset
of the possible attackers.
After brieﬂy reviewing a variety of approaches, we propose
a user-centric comprehensive model to capture the possible
threats posed by online and oﬄine attackers, from the out-
side and the inside, against the security of both the plaintext
and the password. We then propose a few very simple proto-
cols, adapted from the Ford-Kaliski server-assisted password
generator and the Boldyreva unique blind signature in par-
ticular, that provide the best protection against all kinds
of threats, for all distributions of secrets. We also quantify
the concrete security of our approach in terms of online and
oﬄine password guesses made by outsiders and insiders, in
the random-oracle model.
The main contribution of this paper lies not in the techni-
cal novelty of the proposed solution, but in the identiﬁcation
of the problem and its model. Our results have an immedi-
ate and practical application for the real world: they show
how to implement single-sign-on stateless roaming authenti-
cation for the internet, in a ad-hoc user-driven fashion that
requires no change to protocols or infrastructure.
Categories and Subject Descriptors
E.3 [Data]: Data Encryption—Public-key cryptosystems;
H.3.5 [Information Storage and Retrieval]: Online In-
formation Services; K.4.4 [Computers and Society]: Elec-
tronic Commerce—Security
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ASIACCS ’09, March 10-12, 2009, Sydney, NSW, Australia
Copyright 2009 ACM 978-1-60558-394-5/09/03 ...$5.00.
General Terms
Security, Algorithms, Human Factors
Keywords
Stateless Roaming Credentials, Reusable Passwords, Online
Authentication, Partially Trusted Servers
1.
INTRODUCTION
Suppose that you need frequent access to a small piece of
secret information, say, your credentials to various Internet
services. However, the credentials are too complex to re-
member, and it would be unsafe simply to write them down
and carry them in your wallet everywhere you go. What do
you do?
Surprisingly, this practical question has not received much
direct attention from the security community, despite the
vast body of research on (sometimes very closely related)
password-based protocols. To see why this problem is worth
considering,
let us deconstruct all the natural candidate
strategies to expose their shortcomings.
The two most basic candidate strategies are the following:
(A) Encrypt the data under a short memorized password,
and carry the ciphertext with you.
(B) Entrust the data to a remote server, and make it ac-
cessible using password authentication.
Strategy A is the only viable approach to a stand-alone
user (i.e., an isolated individual without access to any kind
of remote storage, whether trusted or not). Because the
ciphertext is not well defended, it is an easy target for cap-
ture, at which point the weak password that serves as its
encryption key may quickly succumb to a brute-force oﬄine
dictionary attack. Since this strategy primarily relies on
physical security of the bearer, this is not much better than
merely carrying the plaintext and taking appropriate pre-
cautions to protect it. (As an aside, we note also that the
assumption of a stand-alone user is specious if the creden-
tials are intended for remote use, and especially for internet
use.)
Strategy B is the diametrical opposite:
it defers onto a
remote server as much of the burden (and associated trust)
of safekeeping one’s credentials, as one possibly could. The
main beneﬁt of this second strategy is that it is immune to
the physical and oﬄine attacks of the previous strategy. In
particular, since any password guessing must occur online
(i.e., by interacting with the storage server, or perhaps with
228the user), such attack can be quickly detected and inter-
dicted. The drawback of the second approach, however, is
that the storage server itself now has unfettered access to
the user credentials in plaintext. This strategy thus requires
a remote server that is ultimately trusted by the user, and
is of course worthy of such trust.
In view of these shortcomings, the next natural idea is
to try to combine the respective strengths of A and B: the
former would provide security against insiders, by keeping
the user credentials encrypted under the user’s password;
while the latter would provide security against outsiders, by
making it diﬃcult to access the ciphertext.
This leads us to the following hybrid strategy:
(C) Combine A plus B: store the password-encrypted data
on a password-authenticating server.
Strategy C simultaneously removes the threat of physical
theft against the user and provides good protection against
a malicious storage server, but only if the encryption pass-
word and the access password are unrelated to each other. If
the two passwords are the same, then the server can use its
knowledge of the authentication password to decrypt the ci-
phertext it has been entrusted with. Alas, remembering two
distinct passwords is not only an unnecessary burden, but it
is also a serious blunder in terms of concrete security, since
in principle it is exponentially easier to guess two sequential
passwords of length n, than to guess a single password of
length 2n.
It turns out that the two main drawbacks of the latter
approach (namely: the need for the server to know the au-
thentication password, and the consequential need for the
user to remember two distinct passwords) can be ﬁxed eas-
ily. All we need to to is to use a “good” authentication
protoocol.
Thus, we would like a version of Strategy C based on
an authentication mechanism that does not require server
knowledge of the user password, so that the same password
can also be used to encrypt the user data. This means in par-
ticular that the complete retrieval protocol must be “oblivi-
ous”; i.e., at the end of the protocol, the user client succeeds
or fails to retrieve the data, depending on the password, but
the storage server is none the wiser about the outcome.
This leads us to our fourth incremental strategy:
(D) Same as C, but with a user-private authentication pass-
word, equal to the encryption password.
Strategy D is a big step forward over the preceding ones,
and is still easy to implement generically using “oﬀ-the-
shelf” components. To implement it, we need an asymmetric
password-based authentication and key exchange (APAKE)
protocol. Such protocol involves two parties, a supplicant
(the user) who knows a secret password, and a respondent
(the server) who holds a secret token derived from the pass-
word, but from which the password is hard to reconstruct.
At the end of the protocol, both parties get an authenticated
random session key for a virtual secure channel.
The full Strategy D can thus be implemented as follows:
in the storage phase, the user picks a password and registers
with the server both a password-encrypted ciphertext and
a password-derived secret token; in the retrieval phase, the
two parties use APAKE to set up an authenticated private
channel, over which the server then sends the ciphertext
back to the user. The beneﬁt is that the user can safely
use the same password for authentication and decryption
(provided that the two selected schemes can be safely be
composed in this manner, which is always possible in the
random-oracle model).
Nevertheless, a big problem remains: with its knowledge
of the authentication token, the storage facility will have
the ability to mount an oﬄine dictionary attack against the
password, simply by simulating both sides of the APAKE
transactions. Fortunately, the server need not be as trusted
as in Strategies B and C, where the server was given either
the plaintext itself, or one half of the user passwords in the
clear. Also, unlike Strategy A, not everyone but only the
server has access to the information needed to mount an
oﬄine dictionary attack. Notwithstanding its clear bene-
ﬁts, Strategy D is still not ideal, because it contains an ex-
plicit authentication sub-protocol that irremediably grants
the server the means to mount a successful (though poten-
tially costly) oﬄine password guessing attack.
Conceivably, if authentication could be kept implicit (to
both parties), then the only way for the server to test a
password guess would be on the basis of the resulting de-
crypted plaintext, and distinguishing a valid plaintext from
an invalid one might not be easy.
Ideally, the only way for the storage facility to mount an
oﬄine guessing attack should be based exclusively on the
ﬁnality of the plaintext: that is, not merely by inspecting a
candidate decrypted plaintext, but by attempting to use it
in its intended application. Therefore, if the ﬁnality of the
plaintext happened to involve an online transaction (e.g.,
authenticating to a third party), the server would not be
able to test the validity of a password guess without going
online, even if it had the ability to enumerate them all oﬄine.
In other terms, we seek to deprive the storage server of any
means to test an oﬄine password guess, other than the in-
herent redundancy that the correct plaintext might contain
(and which is out of the control of the retrieval protocol). If
the correct plaintext is uniformly random over the domain of
all candidate plaintexts, or at least if the plaintext has sig-
niﬁcantly fewer bits of redundancy than the entropy of the
password, then even with unbounded computational powers
it should be impossible for anyone, even for the storage fa-
cility, to guess the correct plaintext and/or the password in
a purely oﬄine attack. The best that the server will be able
to do is to draw a list of candidates that must be validated
online.
To achieve this, we need a credential retrieval protocol
that merges handshake, transfer, and decryption in a single
operation that provides no explicit success/failure feedback
to either party. On the correct password, the user (alone)
receives the correct decrypted plaintext. On an incorrect
password, the user merely retrieves a reproducible pseudo-
random string that varies with the password.
Our ﬁnal password-based credential retrieval strategy is
thus summarized as follows:
(E) Keep the unauthenticated password-encrypted data on
a server, and perform the retrieval and decryption in
a single oblivious password-based protocol with silent
failure.
Strategy E can be viewed as an oblivious version of Strat-
egy D, itself a blind version of Strategy C. I.e., the user
commits to a password, and accordingly retrieves either the
decrypted plaintext or a garbled junktext, with no authen-
229tication/integrity check, and no indication of outcome to
either party.
When implemented correctly, this strategy oﬀers the best
protection against every (computationally-bounded) adver-
sary, for every distribution of the password and the plain-
text. Indeed:
• It is optimal against outsiders, i.e., attackers other
than the server custodian the ciphertext, because out-
siders cannot do better than the unavoidable online
guessing attack, which is to try one password at a time
in an attempt to impersonate one party to the other.
• It is optimal against insiders, i.e., the server entrusted
with the ciphertext, because the most that the server
can do is to simulate the protocol oﬄine, in order to
build from the password dictionary a list of candi-
date plaintexts. Although this oﬄine attack cannot
be avoided, it is only the ﬁrst step in cracking the ci-
phertext. The second step is to recognize the correct
plaintext among all the candidates; and how hard this
can be will depend on the context.
– On the one hand, if the correct plaintext has enough
redundancy that it can be recognized by inspec-
tion of the candidate list, then the resulting at-
tack by the server will be completely oﬄine, and
there is nothing one can do about it except pick
an encryption password that is suﬃciently hard
to guess.
– On the other hand, if the correct plaintext is not
recognizable by mere inspection, then its appear-
ance on a “short list” of possible candidates may
not be very helpful, since the attacker still has
to separate the correct plaintext from the other
candidates.
To ensure that this ﬁnal step is diﬃcult, the re-
trieval protocol itself should not be usable by ei-
ther party to validate guesses (feedback to the
server is clearly harmful, but so is feedback to
the client, because in an insider attack the client
is impersonated by the server in oﬄine protocol
simulations).
It it for this reason that Strategy E requires that there
be no success/failure status leak of any sort. Thus,
depending on the application, e.g., when the plaintext
is an access key to a third-party online service, even an
insider attacker will eventually have to fall back to an
exhaustive online search over some candidate list, i.e.,
by making authentication attempts to such third-party
service. Such list of candidates may be very long, even
as long as the password dictionary itself, depending on
the (lack of) redundancy of the decrypted third-party
credentials.
Clearly, this situation is extremely desirable for secu-
rity from the user’s, i.e., the secret holder’s, point of
view, assuming low- or no-redundancy secret data. In
that case, we would then achieve the paradoxical feat
of forcing the insider attacker back to an online attack
scenario, just like any run-oﬀ-the-mill outsider.
In summary, Strategy E will always provide the best security
among all password-based credential retrieval mechanisms,
for all distributions of plaintexts.
We emphasize however that, depending on the circum-
stances, Strategy E is not necessarily the only best strat-
egy among the ones we described, especially in the extremal
cases of plaintext distributions:
• On the one end of the spectrum, if we know that the
plaintext has zero redundancy, then Strategy A (with
an unauthenticated encryption scheme) works equally
well, since neither insiders nor thiefs have any advan-
tage over outsiders: this is because without plaintext
or ciphertext redundancy the validity of any decryp-
tion attempt can only be tested online (e.g., against
the third-party service they are intended to grant ac-
cess to).
• At the opposite end of the spectrum, any time the
plaintext (or the password/plaintext combination as a
whole) has enough redundancy to be recognizable of-
ﬂine unambiguously when found, Strategy D becomes
an equally viable alternative, since there is no longer
any reason for the protocol to hide the success of the
retrieval outcome to the parties.
In either case, though, Strategy E is always as good as the
competing strategy; and furthermore it will be better than
all of them in the intermediate cases where the plaintext
redundancy either is known to be small but non-zero, or is
unknown entirely.
What makes Strategy E superior is thus that it is a one-
stop shop: it will be at least as good as the best competing
strategy for the circumstances, and generally much more
robust than all of them.
1.1 Related Work
In spite of its immediate and compelling applications, e.g.,
for user-centric internet password security, the notion of Hid-