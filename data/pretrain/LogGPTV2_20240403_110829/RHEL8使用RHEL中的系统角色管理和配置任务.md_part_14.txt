# []{#configuring-kdump-using-system-roles_administration-and-configuration-tasks-using-system-roles-in-rhel.html#introduction-to-the-kdump-role_configuring-kdump-using-system-roles}`kdump`{.literal} RHEL 系统角色 {.title}
:::
`kdump`{.literal} 系统角色允许您在多个系统中设置基本内核转储参数。
:::
::: section
::: titlepage
# []{#configuring-kdump-using-system-roles_administration-and-configuration-tasks-using-system-roles-in-rhel.html#kdump-role-parameters_configuring-kdump-using-system-roles}kdump 角色参数 {.title}
:::
`kdump`{.literal} RHEL 系统角色使用的参数有：
::: informaltable
  角色变量     描述
  ------------ --------------------------------------------------------------------------------------------------------------------------------------------
  kdump_path   `vmcore`{.literal} 写入的路径。如果 `kdump_target`{.literal} 不是 null，则路径相对于那个转储目标。否则，它必须是 root 文件系统的绝对路径。
:::
::: itemizedlist
**其它资源**
-   请参阅 makedumpfile(8)man page。
-   有关 `kdump`{.literal} 中使用的参数详情，以及 `kdump`{.literal}
    系统角色的信息，请参阅
    `/usr/share/ansible/roles/rhel-system-roles.tlog/README.md`{.literal}
    文件。
:::
:::
::: section
::: titlepage
# []{#configuring-kdump-using-system-roles_administration-and-configuration-tasks-using-system-roles-in-rhel.html#configuring-kdump-using-rhel-system-roles_configuring-kdump-using-system-roles}使用 RHEL 系统角色配置 kdump {.title}
:::
您可以通过运行 Ansible playbook 在多个系统中使用 `kdump`{.literal}
系统角色设置基本内核转储参数。
::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
### 警告 {.title}
通过替换 `/etc/kdump.conf`{.literal} 文件，`kdump`{.literal}
角色完全取代了受管主机的 kdump 配置。另外，如果应用了 kdump
角色，则之前的所有 kdump
设置也会被替换，即使它们没有被角色变量指定，也会替换
`/etc/sysconfig/kdump`{.literal} 文件。
:::
::: itemizedlist
**先决条件**
-   您已在要运行 playbook 的系统中安装了 Red Hat Ansible Engine。
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    您不必在要部署 `kdump`{.literal} 解决方案的系统中安装 Red Hat
    Ansible Automation Platform。
    :::
-   已安装该系统中要运行 playbook 的 `rhel-system-roles`{.literal}
    软件包。
-   您有一个清单文件，其中列出了您要在其上部署 `kdump`{.literal}
    的系统。
:::
::: orderedlist
**流程**
1.  使用以下内容 `playbook.yml`{.literal} 创建新文件：
    ``` screen
    ---
    - hosts: kdump-test
      vars:
        kdump_path: /var/crash
      roles:
        - rhel-system-roles.kdump
    ```
2.  可选：验证 playbook 语法。
    ``` screen
    # ansible-playbook --syntax-check playbook.yml
    ```
3.  在清单文件上运行 playbook:
    ``` screen
    # ansible-playbook -i inventory_file /path/to/file/playbook.yml
    ```
:::
::: itemizedlist
**其它资源**
-   有关 kdump 角色变量的详情，请查看
    /usr/share/doc/rhel-system-roles/kdump 目录中的 README.md 或
    README.html 文件。
-   请参阅
    ["应用一个角色"一节](#getting-started-with-rhel-system-roles_administration-and-configuration-tasks-using-system-roles-in-rhel.html#applying-a-role_getting-started-with-rhel-system-roles "应用一个角色"){.xref}。
-   安装 `rhel-system-roles`{.literal} 软件包的文档
    `/usr/share/ansible/roles/rhel-system-roles.kdump/README.html`{.literal}
:::
:::
:::
[]{#managing-local-storage-using-rhel-system-roles_administration-and-configuration-tasks-using-system-roles-in-rhel.html}
::: chapter
::: titlepage
# []{#managing-local-storage-using-rhel-system-roles_administration-and-configuration-tasks-using-system-roles-in-rhel.html#managing-local-storage-using-rhel-system-roles_administration-and-configuration-tasks-using-system-roles-in-rhel}第 13 章 使用 RHEL 系统角色管理本地存储 {.title}
:::
要使用 Ansible 管理 LVM 和本地文件系统(FS)，您可以使用
`storage`{.literal} 角色，这是 RHEL 8 中可用的 RHEL 系统角色之一。
使用 `storage`{.literal} 角色可让您从 RHEL 7.7
开始，在多个机器和逻辑卷中自动管理磁盘和逻辑卷中的文件系统。
有关 RHEL 系统角色以及如何应用它们的更多信息，请参阅 [RHEL
系统角色简介](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/configuring_basic_system_settings/getting-started-with-system-administration_configuring-basic-system-settings#intro-to-rhel-system-roles_getting-started-with-rhel-system-roles){.link}。
::: section
::: titlepage
# []{#managing-local-storage-using-rhel-system-roles_administration-and-configuration-tasks-using-system-roles-in-rhel.html#storage-role-intro_managing-local-storage-using-rhel-system-roles}存储角色简介 {.title}
:::
`storage`{.literal} 角色可以管理：
::: itemizedlist
-   磁盘上未被分区的文件系统
-   完整的 LVM 卷组，包括其逻辑卷和文件系统
:::
使用 `storage`{.literal} 角色，您可以执行以下任务：
::: itemizedlist
-   创建文件系统
-   删除文件系统
-   挂载文件系统
-   卸载文件系统
-   创建 LVM 卷组
-   删除 LVM 卷组
-   创建逻辑卷
-   删除逻辑卷
-   创建 RAID 卷
-   删除 RAID 卷
-   创建带有 RAID 的 LVM 池
-   删除带有 RAID 的 LVM 池
:::
:::
::: section
::: titlepage
# []{#managing-local-storage-using-rhel-system-roles_administration-and-configuration-tasks-using-system-roles-in-rhel.html#parameters-that-identify-a-storage-device-in-the-storage-system-role_managing-local-storage-using-rhel-system-roles}在存储设备角色中识别存储设备的参数 {.title}
:::
您的 `storage`{.literal}
角色配置只会影响您在以下变量中列出的文件系统、卷和池。
::: variablelist
[`storage_volumes`{.literal}]{.term}
:   在所有要管理的未分区磁盘中的文件系统列表。
    当前不支持的分区。
[`storage_pools`{.literal}]{.term}
:   要管理的池列表。
    目前唯一支持的池类型是 LVM。使用 LVM
    时，池代表卷组（VG）。每个池中都有一个要由角色管理的卷列表。对于
    LVM，每个卷对应一个带文件系统的逻辑卷（LV）。
:::
:::
::: section
::: titlepage
# []{#managing-local-storage-using-rhel-system-roles_administration-and-configuration-tasks-using-system-roles-in-rhel.html#an-example-ansible-playbook-to-create-an-xfs-file-system_managing-local-storage-using-rhel-system-roles}在块设备中创建 XFS 文件系统的 Ansible playbook 示例 {.title}
:::
本节提供了一个 Ansible playbook 示例。此 playbook 应用
`storage`{.literal} 角色，以使用默认参数在块设备中创建 XFS 文件系统。
::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
### 警告 {.title}
`storage`{.literal}
角色只能在未分区、整个磁盘或者逻辑卷(LV)中创建文件系统。它不能在分区中创建文件系统。
:::
::: example
[]{#managing-local-storage-using-rhel-system-roles_administration-and-configuration-tasks-using-system-roles-in-rhel.html#idm140139476477776}
**例 13.1. 在 /dev/sdb 上创建 XFS 的 playbook**
::: example-contents
``` screen
---
- hosts: all
  vars:
    storage_volumes:
      - name: barefs
        type: disk
        disks:
          - sdb
        fs_type: xfs
  roles:
    - rhel-system-roles.storage
```
::: itemizedlist
-   卷名称（示例中是 `barefs`{.literal}
    ）目前是任意卷。`storage`{.literal} 角色根据在 `disks:`{.literal}
    属性中列出的磁盘设备识别卷。
-   您可以省略 `fs_type: xfs`{.literal} 行，因为 XFS 是 RHEL 8
    中的默认文件系统。
-   要在 LV 中创建文件系统，在 `disks:`{.literal} 属性中提供 LVM
    设置，包括保护卷组。详情请参阅 [管理逻辑卷的 Ansible playbook
    示例](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/configuring_and_managing_logical_volumes/assembly_configuring-lvm-volumes-configuring-and-managing-logical-volumes#an-example-playbook-to-manage-logical-volumes_managing-lvm-logical-volumes-using-rhel-system-roles){.link}。
    不要提供到 LV 设备的路径。
:::
:::
:::
::: itemizedlist
**其它资源**
-   有关 `storage`{.literal} 系统角色中使用的参数的详情，请查看
    `/usr/share/ansible/roles/rhel-system-roles.storage/README.md`{.literal}
    文件。
:::
:::
::: section
::: titlepage
# []{#managing-local-storage-using-rhel-system-roles_administration-and-configuration-tasks-using-system-roles-in-rhel.html#an-example-ansible-playbook-to-persistently-mount-a-file-system_managing-local-storage-using-rhel-system-roles}永久挂载文件系统的 Ansible playbook 示例 {.title}
:::
本节提供了一个 Ansible playbook 示例。此 playbook 应用
`storage`{.literal} 角色来立即和永久挂载 XFS 文件系统。
::: example
[]{#managing-local-storage-using-rhel-system-roles_administration-and-configuration-tasks-using-system-roles-in-rhel.html#idm140139463745648}
**例 13.2. 在 /dev/sdb 上将文件系统挂载到 /mnt/data 的 playbook**
::: example-contents
``` screen
---
- hosts: all
  vars:
    storage_volumes:
      - name: barefs
        type: disk
        disks:
          - sdb
        fs_type: xfs
        mount_point: /mnt/data
  roles:
    - rhel-system-roles.storage
```
::: itemizedlist
-   此 playbook 将文件系统添加到 `/etc/fstab`{.literal}
    文件中，并立即挂载文件系统。
-   如果 `/dev/sdb`{.literal} 设备或挂载点目录中的文件系统不存在，则
    playbook 会创建它们。
:::
:::
:::
::: itemizedlist
**其它资源**
-   有关 `storage`{.literal} 系统角色中使用的参数的详情，请查看
    `/usr/share/ansible/roles/rhel-system-roles.storage/README.md`{.literal}
    文件。
:::
:::
::: section
::: titlepage
# []{#managing-local-storage-using-rhel-system-roles_administration-and-configuration-tasks-using-system-roles-in-rhel.html#an-example-playbook-to-manage-logical-volumes_managing-local-storage-using-rhel-system-roles}管理逻辑卷的 Ansible playbook 示例 {.title}
:::
本节提供了一个 Ansible playbook 示例。这个 playbook 应用
`storage`{.literal} 角色在卷组中创建 LVM 逻辑卷。
::: example
[]{#managing-local-storage-using-rhel-system-roles_administration-and-configuration-tasks-using-system-roles-in-rhel.html#idm140139468936512}
**例 13.3. 在 myvg 卷组中创建 mylv 逻辑卷的 playbook**
::: example-contents
``` screen
- hosts: all
  vars:
    storage_pools:
      - name: myvg
        disks:
          - sda
          - sdb
          - sdc
        volumes:
          - name: mylv
            size: 2G
            fs_type: ext4
            mount_point: /mnt
  roles:
    - rhel-system-roles.storage
```
::: itemizedlist
-   `myvg`{.literal} 卷组由以下磁盘组成：
    ::: itemizedlist
    -   `/dev/sda`{.literal}
    -   `/dev/sdb`{.literal}
    -   `/dev/sdc`{.literal}
    :::
-   如果 `myvg`{.literal} 卷组已存在，则 playbook
    会将逻辑卷添加到卷组中。
-   如果 `myvg`{.literal} 卷组不存在，则 playbook 会创建它。
-   playbook 在 `mylv`{.literal} 逻辑卷中创建 Ext4
    文件系统，并在其中永久挂载文件系统 `/mnt`{.literal}。
:::
:::
:::
::: itemizedlist
**其它资源**
-   有关 `storage`{.literal} 系统角色中使用的参数的详情，请查看
    `/usr/share/ansible/roles/rhel-system-roles.storage/README.md`{.literal}
    文件。
:::
:::