    package main
    import "fmt"
    func main() {
        fmt.Println("Welcome to multi-stage Docker builds")
    }
    ```
    这是一个用 Golang 编写的简单的`hello world`应用。一旦执行，将输出`"Welcome to multi-stage Docker builds"`。
    在多级目录内，创建一个名为`Dockerfile`的文件。该文件将是多阶段`Dockerfile`:
    ```
    touch Dockerfile
    ```
6.  现在，使用您最喜欢的文本编辑器打开【T0:
    ```
    vim Dockerfile
    ```
7.  Add the following content to the `Dockerfile` and save the file:
    ```
    FROM golang:latest AS builder
    WORKDIR /myapp
    COPY welcome.go .
    RUN go build -o welcome .
    FROM scratch
    WORKDIR /myapp
    COPY --from=builder /myapp/welcome .
    ENTRYPOINT ["./welcome"]
    ```
    这个多阶段`Dockerfile`使用最新的`golang`映像作为父映像，这个阶段被命名为`builder`。接下来，将`/myapp`目录指定为当前工作目录。然后，`COPY`指令用来复制`welcome.go`源文件，`RUN`指令用来构建 Golang 文件。
    `Dockerfile`的下一阶段使用`scratch`映像作为父映像。这将把`/myapp`目录设置为 Docker 映像的当前工作目录。然后，`COPY`指令用于将`welcome`可执行文件从构建器阶段复制到该阶段。最后，使用`ENTRYPOINT`运行`welcome`可执行文件。
8.  Build the Docker image using the following command:
    ```
    docker build -t welcome-optimized:v1 .
    ```
    映像将成功构建并标记为`welcome-optimized:v1`:
    ![Figure 4.6: Building the Docker image ](img/B15021_04_06.jpg)
    图 4.6:构建 Docker 映像
9.  Use the `docker image ls` command to list all the Docker images available on your computer. These images are available on your computer, either when you pull them from Docker Registry or when you build them on your computer:
    ```
    docker images
    ```
    从下面的输出可以看出，`welcome-optimized`映像的大小与您在*练习 4.02 中使用构建器模式*构建的`welcome-runtime`映像的大小相同:
    ![Figure 4.7: Listing all Docker images ](img/B15021_04_07.jpg)
图 4.7:列出所有 Docker 映像
在本练习中，您学习了如何使用多阶段`Dockerfiles`来构建优化的 Docker 映像。下表总结了构建器模式和多阶段`Docker Builds`之间的主要差异:
![Figure 4.8: Differences between the builder pattern and multi-stage Docker Builds ](img/B15021_04_08.jpg)
图 4.8:构建器模式和多阶段 Docker 构建之间的差异
在下一节中，我们将回顾编写`Dockerfile`时要遵循的最佳实践。
# 最佳实践文件
在前一节中，我们讨论了如何通过多阶段`Dockerfiles`构建高效的 Docker 映像。在本节中，我们将介绍编写`Dockerfiles`的其他推荐最佳实践。这些最佳实践将确保减少构建时间、减少映像大小、提高安全性，并提高所生成的 Docker 映像的可维护性。
## 使用适当的父映像
在构建高效的 Docker 映像时，使用合适的基础映像是一个重要的建议。
在构建自定义 Docker 映像时，总是鼓励使用来自 **Docker Hub** 的官方映像作为父映像。这些官方映像将确保遵循所有最佳实践，提供文档，并应用安全补丁。例如，如果您的应用需要 **JDK** ( **Java 开发工具包**)，您可以使用`openjdk`官方 Docker 映像，而不是使用通用的`ubuntu`映像，并在`ubuntu`映像之上安装 JDK:
![Figure 4.9: Using appropriate parent images ](img/B15021_04_09.jpg)
图 4.9:使用适当的父映像
其次，在为生产环境构建 Docker 映像时，避免对父映像使用`latest`标记。当新版本发布到 Docker Hub 时，`latest`标签可能会指向映像的更新版本，并且更新版本可能与您的应用不向后兼容，从而导致您的生产环境出现故障。相反，最佳做法是始终使用特定的版本化标签作为父映像:
![Figure 4.10: Avoiding the use of the latest tag of the parent image ](img/B15021_04_10.jpg)
图 4.10:避免使用父映像的最新标签
最后，使用父映像的最小版本对于获得最小大小的 Docker 映像至关重要。Docker Hub 中的大多数正式 Docker 映像都有一个围绕 Alpine Linux 映像构建的最小大小的映像。此外，在我们的示例中，我们可以使用 **JRE** ( **Java 运行时环境**)来运行应用，而不是包含构建工具的 JDK:
![Figure 4.11: Using minimal-sized images ](img/B15021_04_11.jpg)
图 4.11:使用最小尺寸的映像
`openjdk:8-jre-alpine`映像大小仅为 84.9 MB，而`openjdk:8`则为 488 MB。
## 使用非根用户提高安全性
默认情况下，Docker 容器与 root ( `id = 0`)用户一起运行。这允许用户执行所有必要的管理活动，例如更改系统配置、安装软件包和绑定到特权端口。然而，这是高风险的，并且当在生产环境中运行 Docker 容器时被认为是不良的安全实践，因为黑客可以通过黑客攻击在 Docker 容器内运行的应用来获得对 Docker 主机的根访问。
作为非根用户运行容器是提高 Docker 容器安全性的推荐最佳实践。这将遵循最小特权原则，确保应用只有最少的特权来执行任务。我们可以使用两种方法作为非根用户运行容器:使用`--user`(或`-u`)标志，以及使用`USER`指令。
在运行 Docker 容器时，使用`docker run`命令的`--user`(或`-u`)标志是一种更改默认用户的方法。用户名或用户标识可以用`--user`(或`-u`)标志指定:
```
$ docker run --user=9999 ubuntu:focal
```
在前面的命令中，我们已经将用户标识指定为`9999`。如果我们将用户指定为一个标识，那么相应的用户不必在 Docker 容器中可用。
此外，我们可以使用`Dockerfile`中的`USER`指令来定义默认用户。但是，在启动 Docker 容器时，该值可以被`--user`标志覆盖:
```
FROM ubuntu:focal
RUN apt-get update 
RUN useradd demo-user
USER demo-user
CMD whoami
```
在前面的例子中，我们使用`USER`指令将默认用户设置为`demo-user`。这意味着`USER`指令之后的任何命令都将作为`demo-user`执行。
## 使用 dockrignore
`.dockerignore`文件是 Docker 上下文中的特殊文本文件，用于在构建 Docker 映像时指定要从 Docker 上下文中排除的文件列表。一旦我们执行`docker build`命令，Docker 客户端会将整个构建上下文打包为一个 TAR 归档文件，并将其上传到 Docker 守护程序。当我们执行`docker build`命令时，输出的第一行是`Sending build context to Docker daemon`，这表明 Docker 客户端正在将构建上下文上传到 Docker 守护程序:
```
Sending build context to Docker daemon  18.6MB
Step 1/5 : FROM ubuntu:focal
```
每次我们构建 Docker 映像时，构建上下文都会被发送给 Docker 守护程序。由于这将在 Docker 映像构建过程中花费时间和带宽，建议排除最终 Docker 映像中不需要的所有文件。`.dockerignore`文件可以用来达到这个目的。除了节省时间和带宽外，`.dockerignore`文件还用于从构建上下文中排除机密文件，如密码文件和密钥文件。
`.dockerignore`文件应该在构建上下文的根目录中创建。在将构建上下文发送给 Docker 守护程序之前，Docker 客户端将在构建上下文的根中查找`.dockerignore`文件。如果`.dockerignore`文件存在，Docker 客户端将从构建上下文中排除`.dockerignore`文件中提到的所有文件。
以下是一个样本`.dockerignore`文件的内容:
```
PASSWORDS.txt
tmp/
*.md
!README.md
```
在前面的例子中，我们已经明确地从构建上下文中排除了`PASSWORDS.txt`文件和`tmp`目录，以及除了`README.md`文件以外的所有扩展名为`.md`的文件。
## 最小化层
`Dockerfile`中的每一行都将创建一个新的图层，该图层将占用 Docker 映像中的空间。因此，建议在构建 Docker 映像时创建尽可能少的层。为此，尽可能结合`RUN`指令。
例如，考虑以下`Dockerfile`，它将首先更新包库，然后安装`redis-server`和`nginx`包:
```
FROM ubuntu:focal
RUN apt-get update
RUN apt-get install -y nginx
RUN apt-get install -y redis-server
```
这个`Dockerfile`可以通过结合三个`RUN`指令进行优化:
```
FROM ubuntu:focal
RUN apt-get update \
  && apt-get install -y nginx redis-server
```
## 不要安装所有不必要的工具
不安装不必要的调试工具(如`vim`、`curl`和`telnet`)并删除不必要的依赖关系有助于创建高效的小尺寸 Docker 映像。一些软件包管理器，如`apt`会自动在所需软件包旁边安装推荐和建议软件包。我们可以通过使用`apt-get install`命令指定`no-install-recommends`标志来避免这种情况:
```
FROM ubuntu:focal
RUN apt-get update \
  && apt-get install --no-install-recommends -y nginx 
```
在 prec 的例子中，我们正在安装带有`no-install-recommends`标志的`nginx`包，这将有助于将最终映像大小减少 10 MB 左右。
除了使用`no-install-recommends`标志，我们还可以移除`apt`包管理器的缓存，以进一步减小最终 Docker 映像的大小。这可以通过在`apt-get install`命令结束时运行`rm -rf /var/lib/apt/lists/*`来实现:
```
FROM ubuntu:focal
RUN apt-get update \
    && apt-get install --no-install-recommends -y nginx \
    && rm -rf /var/lib/apt/lists/*
```
在这一节中，我们讨论了编写`Dockerfile`时的最佳实践。遵循这些最佳实践将有助于减少构建时间，减小映像大小，提高安全性，并增加 Docker 映像的可维护性。
现在，让我们通过在下一个活动中部署一个带有多阶段 Docker 构建的 Golang HTTP 服务器来测试我们的知识。
## 活动 4。 01:部署具有多阶段 Docker 构建的 Golang HTTP 服务器
假设您的任务是将一个 Golang HTTP 服务器部署到一个 Docker 容器中。您的经理要求您建立一个最小尺寸的 Docker 映像，并在建立`Dockerfile`时遵守最佳实践。
该 Golang HTTP 服务器将根据调用网址返回不同的响应:
![Figure 4.12: Responses based on the invoke URL ](img/B15021_04_12.jpg)
图 4.12:基于调用网址的响应
您的任务是使用多阶段`Dockerfile`将下面代码块中给出的 Golang 应用归档:
```
package main
import (
    "net/http"
    "fmt"
    "log"
    "os"
)
func main() {
    http.HandleFunc("/", defaultHandler)
    http.HandleFunc("/contact", contactHandler)
    http.HandleFunc("/login", loginHandler)
    port := os.Getenv("PORT")
    if port == "" {
        port = "8080"
    }
    log.Println("Service started on port " + port)
    err := http.ListenAndServe(":"+port, nil)
    if err != nil {
        log.Fatal("ListenAndServe: ", err)
        return
    }
}
func defaultHandler(w http.ResponseWriter, r *http.Request) {
    fmt.Fprintf(w, "Home Page")
}
func contactHandler(w http.ResponseWriter, r *http.Request) {
    fmt.Fprintf(w, "Contact Us")
}
func loginHandler(w http.ResponseWriter, r *http.Request) {
    fmt.Fprintf(w, "Login Page")
}
```
执行以下步骤完成本活动:
1.  创建一个文件夹来存储活动文件。
2.  用前面代码块中提供的代码创建一个`main.go`文件。
3.  创建具有两个阶段的多阶段`Dockerfile`。第一阶段将使用`golang`映像。这个阶段将使用`go build`命令构建 Golang 应用。第二阶段将使用`alpine`映像。这个阶段将从第一个阶段复制可执行文件并执行它。
4.  构建并运行 Docker 映像。
5.  完成后，停止并移除 Docker 容器。
当您导航到网址`http://127.0.0.1:8080/`时，您应该会得到以下输出:
![Figure 4.13: Expected output of Activity 4.01 ](img/B15021_04_13.jpg)
图 4.13:活动 4.01 的预期产出
注意
此活动的解决方案可以通过[这个链接](16.html#_idTextAnchor326)找到。
# 总结
本章首先定义了一个普通的 Docker 构建，并使用普通的 Docker 构建过程创建了一个简单的 Golang Docker 映像。然后，我们观察了生成的 Docker 映像的大小，并讨论了最小大小的 Docker 映像如何加快 Docker 容器的构建和部署时间，并通过减少攻击面来增强安全性。
然后，我们使用构建器模式来创建最小尺寸的 Docker 映像，在这个过程中利用两个`Dockerfiles`和一个 shell 脚本来创建映像。我们探索了多阶段 Docker 构建——这是 Docker 在 17.05 版本中引入的新功能，可以帮助消除必须维护两个`Dockerfiles`和一个 shell 脚本的操作负担。最后，我们讨论了编写`Dockerfiles`的最佳实践，以及这些最佳实践如何确保缩短构建时间、减少映像大小和提高安全性，同时提高 Docker 映像的可维护性。
在下一章中，我们将介绍`docker-compose`以及如何使用它来定义和运行多容器 Docker 应用。