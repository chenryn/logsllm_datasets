# 绿盟科技 NSFOCUS
## WASM双刃剑—机制剖析与逆向
### 演讲人：赵光远
### 2018

---

## 目录
1. **WASM介绍**
2. **编译及反编译过程**
3. **挖矿实例**
4. **探索方向**

---

## 1. WASM介绍

### 1.1 前端编程无法解决的问题
- 传统的JavaScript脚本运行缓慢。
- 在浏览器中无法实现复杂功能，效率不足且影响用户体验。
- 渲染能力低下，但CPU和GPU占用率极高。

### 1.2 应用场景
- 浏览器页面的3D环境渲染。
- 数据压缩。
- 图像/音频/视频处理。
- 挖矿（本质上是一种计算任务）。
- 其他应用...

### 1.3 支持度
- **WebAssembly (WASM)**
  - 基于栈的二进制格式文件。
  - 支持C/C++/Rust等高级语言的转换。
  - 可以将现有的C/C++代码库直接编译运行，无需重写。
  - 支持“一次编写，到处运行”(Write Once, Run Anywhere)。
  - 由JVM解释并执行，运行时处于隔离环境中。
  - 不能直接操作DOM元素，不能直接调用I/O。
  - 只能通过WebSocket对外通信。
  - 只能使用binaryen-shell与JavaScript交互。
  - 只能通过为JavaScript提供的接口进行调用。

### 1.4 基于栈的运行机制示例
```c
int add(int num) {
    return num + 10;
}
```
对应的WASM字节码：
```
00 61 73 6D 0D 00 00 00 01 86 80 80 80 00 01 60
01 7F 01 7F 03 82 80 80 80 00 01 00 04 84 80 80
80 00 01 70 00 00 05 83 80 80 80 00 01 00 01 06
81 80 80 80 00 00 07 96 80 80 80 00 02 06 6D 65
6D 6F 72 79 02 00 09 5F 5A 35 61 64 64 34 32 69
00 00 0A 8D 80 80 80 00 01 87 80 80 80 00 00 20
00 41 0A 6A 0B
```

---

## 2. 编译及反编译过程

### 2.1 编译过程
- 加载Emscripten库。
- Emscripten生成LLVM IR。
- 通过映射转换生成ASM.js。
- 通过asm2wasm生成TextFormat (.wat)。
- 最终生成BinaryFormat (.wasm)。

### 2.2 反编译过程
- 使用WASM2C工具将BinaryFormat (.wasm)反编译为C/C++代码。

### 2.3 模块结构
- 一个模块中包含的节（必需）：
  - `type`
  - `function`
  - `code`
- 类型（部分）：
  - 整数类型：`i32`, `i64`
  - 浮点类型：`f32`, `f64`
  - 函数类型：`functype`

### 2.4 二进制文件格式
- 0x0: 标志位
- 0x4: 魔法数
- 0x8: 节标识符
- 0x9: 节长度
- 0xA: 类型
- 0xB: 函数类型开始
- 0xC: 值类型
- 0xE: 值类型
- ...

---

## 3. 挖矿实例

### 3.1 概述
- JavaScript脚本编写的挖矿程序，利用Coinhive提供的API。
- 将JavaScript脚本编译为WASM，在支持WASM的浏览器中执行挖矿行为。不支持WASM的浏览器则执行JavaScript脚本。
- 无技术含量，只是一种应用，但在下载时未被检测出来。

---

## 4. 探索方向

### 4.1 运行效率
- WASM在运行效率方面比JavaScript表现更出色，因此WASM将被广泛应用在游戏、虚拟场景模拟等方面，这意味着WASM在未来会占据重要地位。

### 4.2 安全性
- WASM运行在JVM沙箱中，对外的交互基本上都由JavaScript接管。JavaScript不了解WASM中运行的内容，只能获取到指定的返回信息。
- 对JavaScript来说，WASM是一个黑盒，难以获知其中的运行状态及内容。
- 大多数WAF产品目前没有WASM解析器，因此无法对其进行有效的特征检测及拦截。
- 如何检测隐藏在WASM中的功能？

### 4.3 代码保护
- WASM文件格式清晰，容易直接获取代码。如何对代码进行混淆并加以保护？
- 本地动态行为检测：WASM文件执行情况及功能的动态检测方案。
- 网络数据流实时检测：在下载或发送时对其进行检测。
- 加密流量的分离及分析。
- 漏洞挖掘：利用其能将高级语言编译为web bytecode的特性，挖掘相关漏洞。

---

## 引用及参考
- [WebAssembly GitHub](https://github.com/WebAssembly)
- [Mozilla Developer Network: WebAssembly](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/)
- [WebAssembly Specification](https://webassembly.github.io/spec/core/)

谢谢观看！

演讲人：赵光远