绿盟科技 NSFOCUS
WASM双刃剑—机制剖析与逆向
演讲人：赵光远
2 0 1 8
PART 01
WASM
目录
CONTENTS
PART 02
Compile
PART 03
挖矿实例
PART 04
探索方向
01
02
03
04
PART 
01
WASM
• 前端编程无法解决的问题
• 传统的js脚本运行缓慢
• 在浏览器中无法实现复杂功能(效率不足，影响体验)
• 很低的渲染能力，却拥有CPU、GPU极高的占用率
• 应用场景
• 浏览器页面3D环境渲染
• 数据压缩
• 图像/音频/视频的处理
• 挖矿(本身就是计算的一种)
• ….
• 支持度
• WebAssembly(WASM)
• 基于栈的二进制格式文件
• 支持C/C++/Rust等高级语言的转换
• 理论上能够将现有的C/C++代码库直接编译运行，无需重写
• 支持Write Once,Run anywhere
• 由JVM解释并执行，运行时处于隔离环境中
• 不能直接操作Dom元素，不能直接调用I/O
• 只能通过WebSocket对外通信
• 只能使用binaryen-shell与JavaScript交互
• 只能通过为JavaScript提供的接口进行调用
• 基于栈的运行机制
int add(int num) {
      return num+10;
}
00 61 73 6D 0D 00 00 00 01 86 80 80 80 00 01 60
01 7F 01 7F 03 82 80 80 80 00 01 00 04 84 80 80
80 00 01 70 00 00 05 83 80 80 80 00 01 00 01 06
81 80 80 80 00 00 07 96 80 80 80 00 02 06 6D 65
6D 6F 72 79 02 00 09 5F 5A 35 61 64 64 34 32 69
00 00 0A 8D 80 80 80 00 01 87 80 80 80 00 00 20
00 41 0A 6A 0B
get_local 0
i32.const 10
i32.add
PART 
02
编译及反编译过程
加载Emscripten库
Emscripten生成
通过映射转换
通过asm2wasm生成
C/C++
LLVM IR
ASM.js
TextFormat
.wat
BinaryFormat
.wasm
C/C++
WASM2C
BinaryFormat
.wasm
• 一个模块中包含的节(必需)
• type
• function
• code
• Type类型(部分)
• int
• i32
• i64
• float
• f32
• F64
• functype
• wasm的二进制文件格式
• 0x0   flag
• 0x4   magic
• 0x8   section_id
• 0x9   length
• 0xA    type
• 0xB    function type start
• 0xC    val:type
• 0xE    val:type
• ……
PART 
03
挖矿实例
• JavaScript脚本编写的挖矿程序，利用coinhive提供的API
• 将JavaScript脚本编译为wasm，在支持运行wasm运行的浏览器中执行挖矿行为，不支持的浏览器会执行
JavaScript脚本
• 无技术含量，只是一种应用，但是为何在下载的时候没有检测出来
PART 
04
研究方向
• wasm在运行效率方面比JavaScript表现的更加出色，因此wasm将被广泛应用在游戏，虚拟场景模拟等方面，这意
味着wasm在以后的应用中会占据一席之地
• wasm运行在JVM沙箱中，对外的交互基本上都由JavaScript进行接管，JavaScript不了解WASM中运行的内容，只
能获取到指定的返回信息
• wasm对于JavaScript来说就是一个黑盒，获知其中的运行状态及内容很难
• 大多数的WAF产品目前没有wasm解析器，因此无法对其进行有效的特征检测及拦截
• wasm由JVM解释执行，是否会支持C/C++等高级语言也可以导入wasm完成某些功能，将这些功能隐藏在wasm中
具有相当好的隐蔽性，如何对其进行检测？
代码保护
wasm文件格式清晰，非常
容易直接获取代码，对代
码应如何混淆并加以保护
本地动态行为检测
WASM文件执行情况及功能的
动态检测方案
网络数据流实时检测
在下载或发送时对其进行检测
加密流量的分离及分析
漏洞挖掘
利用其能将高级语言编译为
webbytecode的特性，挖掘相
关漏洞
代码保护
WAF相关
漏洞相关
行为检测
引用及参考
• https://github.com/WebAssembly
• https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/
• https://webassembly.github.io/spec/core/
谢谢观看
演讲人：赵光远