windows服务工作原理
windows服务是一种可以在后台完成任务的程序，服务程序一般随着系统启动而启动，启动权限一般是
system，windows vista开始为了提升系统的安全性，将服务程序放在session 0运行，和我们普通的用
户态程序运行在不同的session级别，我们无法跨session进行交互，因此保证了服务程序的安全。我们
随便找一个服务，用 process hacker打开他的进程，就可以看到如下信息：
服务程序不需要用户界面，所以服务程序通常是以控制台程序的形式编写的，入口函数是main函数。一
个服务一般由三部分组成。
1. Service control Manager(SCM),SCM存在于Service.exe中,在windows启动的时候会自动运行，此
进程以系统特权运行，并且提供一个统一的，安全的手段去控制服务。它其实是一个RPCServer，
SCM中包含一个存储着已安装的服务和驱动程序的信息的数据库，通过SCM可以统一的，安全地管
理这些信息，一个服务的安装需要将自身写入这个数据库。
2. 服务本身，一个服务需要拥有从SCM收到信号和命令所必须的特殊代码，并且能够在处理后将它的
状态回传给SCM。
3. 第三部分是service control dispatcher（SCP），有用户界面，允许用户开始停止暂停继续一个服
务，SCP的作用是跟SCM通讯。
服务很重要的函数
1. 入口函数中调用SCM通知函数
如果是exe程序，那么入口函数一般就指的是main或者winmain函数，通常在服务程序的入口函数使用
StartServiceCtrlDispatcher 函数通知SCM可执行程序包含几个服务（因为一个exe中可以注册多个
服务程序），每个服务的入口回调函数地址是什么：
SERVICE_TABLE_ENTRYA结构体的定义如下：
当SCM执行服务程序的时候，SCM为这个进程中每一个lpServiceStartTable指向的每一个服务产生一个
线程，并且入口地址是lpServiceProc。SCM启动一个服务程序之后，它会等待该程序的主线程去 调
StartServiceCtrlDispatcher。如果那个函数在两分钟内没有被调用，SCM将会认为这个服务有问题，并
调用 TerminateProcess去杀死这个进程。这就要求你的主线程要尽可能快的调用
StartServiceCtrlDispatcher。
StartServiceCtrlDispatcher函数并不是立即返回，而是等待所有服务线程退出后才会返回，所以不需要
用户自己构造死循环来防止你的程序的主线程退出导致进程结束。StartServiceCtrlDispatcher 被调用后
会陷入一个主循环中，当在该循环内，StartServiceCtrlDispatcher悬挂起自己，等待下面两个事件中的
一个发生。
第一，如果SCM要去送一个控制通知给运行在这个 进程内一个服务的时候，这个线程就会激活。当控制
通知到达后，线程激活并调用相应服务的CtrlHandler函数。CtrlHandler函数处理这个 服务控制通知，
并返回到StartServiceCtrlDispatcher。StartServiceCtrlDispatcher循环回去后再一次悬挂自己。
第二，如果服务线程中的一个服务中止，这个线程也将激活。在这种情况下，该进程将运行在它里面的
服务数减一。如果服务数为 零，StartServiceCtrlDispatcher就会返回到入口点函数，以便能够执行任何
与进程有关的清除工作并结束进程。如果还有服务在运 行，哪怕只是一个服务，
StartServiceCtrlDispatcher也会继续循环下去，继续等待其它的控制通知或者剩下的服务线程中止。
因为此函数需要SCM通讯，所以该函数所在的进程必须由SCM启动，不可以用户通过双击启动。双击启
动会造成SCM通讯失败从而导致函数调用失败。
2. 服务线程入口函数
此函数就是StartServiceCtrlDispatcherA传递给SCM促使其为每个服务启动的函数，一般命名为
ServiceMain ,需要如下形式:
此函数由操作系统调用，并执行能完成服务的代码。服务线程入口函数必须在80秒内完成初始化工作，
有两个必不可少的工作，第一项工作是调用 RegisterServiceCtrlHandler 通知SCM此服务的
CtrlHandle的回调函数地址:
BOOL StartServiceCtrlDispatcher(
  const SERVICE_TABLE_ENTRYA *lpServiceStartTable
);
typedef struct _SERVICE_TABLE_ENTRYA {
  LPSTR                    lpServiceName; //服务名称
  LPSERVICE_MAIN_FUNCTIONA lpServiceProc; // 服务回调函数
} SERVICE_TABLE_ENTRYA, *LPSERVICE_TABLE_ENTRYA;
void WINAPI ServiceMain(DWORD dwArgc, //参数个数 
                        LPTSTR* lpszArgv // 参数串
                        ); 
lpServiceName必须和刚才SERVICE_TABLE_ENTRY中指定的名字相对应。
此函数返回一个SERVICE_STATUS_HANDLE类型的句柄，SCM用它来唯一确定这个服务，当服务需要把
它的状态报告给SCM的时候，就必须把这个句柄传给需要它的API函数，这个句柄无需关闭。
第二项工作是立即调用 SetServiceStatus 报告SCM此服务正在初始化，传递一个SERVICE_STATUS的
结构体的地址。
SERVICE_STATUS结构体如下：
3. 服务控制回调函数
服务控制回调函数的作用是SCM将利用它去改变这个服务的状态，也是一个回调函数，它必须具有如下
原型。
用户必须为它的服务程序中每一个服务写一个单独的CtrlHandler函数，当使用系统服务管理工具操作你
注册的服务的时候，CtrlHandler函数就会收到相应的通知。
SCM调用控制函数HandlerProc的时候，有下面几个预定义的控制命令，如下：
当HandlerProc收到这些控制命令之后，需要立即去调用SetServiceStatus修改服务状态和处理这个状态
变化所需要的时间。因为服务程序的主线程大多是一个死循环，不停的干活，在这个函数中需要用一些
信号值来控制服务服务程序主线的的挂起、运行和停止功能。
SERVICE_STATUS_HANDLE RegisterServiceCtrlHandlerA(
  LPCSTR             lpServiceName,
  LPHANDLER_FUNCTION lpHandlerProc
);
BOOL SetServiceStatus(
  SERVICE_STATUS_HANDLE hServiceStatus, 
  LPSERVICE_STATUS      lpServiceStatus //SERVICE_STATUS结构体的地址
);
typedef struct _SERVICE_STATUS {
  DWORD dwServiceType; // 指明服务可执行文件的类型，此值在服务生命周期内不应该改变
  DWORD dwCurrentState; //服务现在的状态，如果是在初始化需要设置为 
SERVICE_START_PENDING
  DWORD dwControlsAccepted; // 指明服务愿意接收什么类型的控制通知，
  DWORD dwWin32ExitCode; // 报告启动或停止时发生的错误的错误代码
  DWORD dwServiceSpecificExitCode; //服务特定的错误代码，服务在服务启动或停止时发生错误时
返回
  DWORD dwCheckPoint; // 用来报告当前服务的事件进展
  DWORD dwWaitHint; 
} SERVICE_STATUS, *LPSERVICE_STATUS;
void WINAPI CtrlHandler(DWORD dwOpcode // 控制命令 );
SERVICE_CONTROL_STOP   
SERVICE_CONTROL_PAUSE 
SERVICE_CONTROL_CONTINUE
SERVICE_CONTROL_INTERROGATE
SERVICE_CONTROL_SHUTDOWN
独立进程的服务
有了如上的知识，我们就可以用c语言实现服务程序了，详细的代码如下：
//#include "stdafx.h"
#include 
#include 
#pragma warning(disable : 4996)
#include 
#define SERVICE_NAME _T("FirstService")
SERVICE_STATUS g_status;
SERVICE_STATUS_HANDLE g_hServiceStatus;
HANDLE g_hEvent = NULL;
void Init()
{
    g_status.dwServiceType = SERVICE_WIN32_OWN_PROCESS;
    g_status.dwCurrentState = SERVICE_STOPPED;
    // 设置服务可以使用的控制
    // 如果希望服务启动后不能停止，去掉SERVICE_ACCEPT_STOP
    // SERVICE_ACCEPT_PAUSE_CONTINUE是服务可以“暂停/继续”
    g_status.dwControlsAccepted = SERVICE_ACCEPT_STOP | 
SERVICE_ACCEPT_PAUSE_CONTINUE | SERVICE_ACCEPT_SHUTDOWN;
    g_status.dwWin32ExitCode = 0;
    g_status.dwServiceSpecificExitCode = 0;
    g_status.dwCheckPoint = 0;
    g_status.dwWaitHint = 0;
    //创建初始为有信号的手动内核事件。
    g_hEvent = CreateEvent(NULL, TRUE, TRUE, LPCWSTR("Pause"));
}
void SetStatus(long lCurrentStatus)
{
    g_status.dwCurrentState = lCurrentStatus;
    SetServiceStatus(g_hServiceStatus, &g_status);
}
void WINAPI Handler(DWORD dwOpcode)
{
    switch (dwOpcode)
    {
    case SERVICE_CONTROL_STOP:
    {   //收到停止服务命令停止服务
        SetStatus(SERVICE_STOP_PENDING);
        SetStatus(SERVICE_STOPPED);
    }
    break;
    case SERVICE_CONTROL_PAUSE:
    {
        SetStatus(SERVICE_PAUSE_PENDING);
        ResetEvent(g_hEvent); //通知RUN函数开始等待
        SetStatus(SERVICE_PAUSED);
    }
    break;
    case SERVICE_CONTROL_CONTINUE:
    {
        SetStatus(SERVICE_CONTINUE_PENDING);
        SetEvent(g_hEvent);//通知RUN函数继续执行
        SetStatus(SERVICE_RUNNING);
    }
    break;
    case SERVICE_CONTROL_INTERROGATE:
        break;
    case SERVICE_CONTROL_SHUTDOWN:
    {   //关机时停止服务
        SetStatus(SERVICE_STOP_PENDING);
        SetStatus(SERVICE_STOPPED);
    }
    break;
    default:
        break;
    }
}
void Run()
{
    while (1)
    {
        WCHAR tcFile[MAX_PATH] = L"C:\\test.txt";
        //打开已存在的a.txt文件
        HANDLE hFile = CreateFile(tcFile, GENERIC_WRITE | GENERIC_READ, 
FILE_SHARE_READ | FILE_SHARE_WRITE, NULL,
            OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);
        if (hFile == INVALID_HANDLE_VALUE) {
            //打开失败则创建一个。
            hFile = CreateFile(tcFile, GENERIC_WRITE | GENERIC_READ, 
FILE_SHARE_READ | FILE_SHARE_WRITE, NULL,
                CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, NULL);
            DWORD dwWrite = 0;
            WriteFile(hFile, "Hello", 5, &dwWrite, NULL);
        }
        CloseHandle(hFile);
        Sleep(500);  //暂停500毫秒后继续扫描
                          //如何g_hEvent无信号则暂停执行
        WaitForSingleObject(g_hEvent, INFINITE);
    }
}
void WINAPI ServiceMain(DWORD dwArgc, LPTSTR* lpszArgv)
{
    // 注册控制请求句柄
    g_hServiceStatus = RegisterServiceCtrlHandler(SERVICE_NAME, Handler);
    if (g_hServiceStatus == NULL) return;
    SetStatus(SERVICE_START_PENDING);
    SetStatus(SERVICE_RUNNING);
    // 当 Run 函数返回时，服务已经结束。
    Run();
    g_status.dwWin32ExitCode = S_OK;
    g_status.dwCheckPoint = 0;
    g_status.dwWaitHint = 0;
    g_status.dwCurrentState = SERVICE_START;
    //设置服务状态为停止,从而退出服务.
    SetServiceStatus(g_hServiceStatus, &g_status);
}
我们可以看到服务的入口函数就是mian函数，然后调用 StartServiceCtrlDispatcher  之后就return
了，但是你根本不必担心此程序启动的进程会因为return而直接退出，具体的原因请阅读上面对函数 
StartServiceCtrlDispatcher 的解释。
此服务启动后，在ServiceMain函数启动的服务线程调用死循环  Run 不停的打开 c:\test.txt ，向里面写
入 Hello。
独立进程服务的安装和卸载
独立运行的服务程序写好了，那怎么暗转它到服务管理器，并启动呢？
使用SC命令
使用sc.exe程序进行服务的安装和管理是最简单的方式，具体的操作如下：
int main(int argc, char* argv[])
{
    Init(); //初始化服务数据信息
            //判断参数决定如何执行代码
    SERVICE_TABLE_ENTRY st[] =
    {
        { (LPWSTR)SERVICE_NAME, ServiceMain },
        { NULL, NULL }
    };
    StartServiceCtrlDispatcher(st);
    CloseHandle(g_hEvent);
    return 0;
}
sc create FirstService 
BinPath="C:\ConsoleApplication1\Release\ConsoleApplication1.exe" 
DisplayName="FirstService"  # 安装一个服务
sc query {ServiceName} # 查询服务的运行状态
sc start {ServiceName} # 启动一个服务
sc stop {ServiceName}  # 关闭一个服务
sc delete {ServiceName} # 删除一个服务
sc create 子命令有很多选项可以控制服务的类型，自己看帮助文档吧：
我们在Services.msc管理器就可以看到FirstService的状况：
C:\Users\administrator>sc create /?
描述:
        在注册表和服务数据库中创建服务项。
用法:
        sc  create [service name] [binPath= ]  ...
选项:
注意: 选项名称包括等号。
      等号和值之间需要一个空格。
 type= 
       (默认 = own)
 start= 
       (默认 = demand)
 error= 
       (默认 = normal)
 binPath= 
 group= 
 tag= 
 depend= 
 obj= 
       (默认= LocalSystem)
 DisplayName= 
 password= 
然后我们的服务就运行起来了，可以看到C盘下面创建了一个 test.txt文件，并且即便被删除了之后还是
会不停的创建。
但是我们知道执行命令就意味着进程创建行为，如果了解端上防护软件的工作原理就会明白进程创建行
为是最敏感的（如果对端上主防软件的工作原理和规则不太懂的，我们以后再单独开专题讲），并且是
最容易被拦截和控制的步骤，再真正的权限控制过程中我们尽量要避免使用命令操作
攻防的对抗程度已经今非昔比了，不要再想以前一样，拿到一个shell之后，立马手贱的执行一个