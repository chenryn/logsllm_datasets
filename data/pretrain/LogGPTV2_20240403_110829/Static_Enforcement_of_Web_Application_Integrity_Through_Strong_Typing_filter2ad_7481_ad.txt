cols in [34].
capability-based subset of Java that allows programmers
to write pure Java functions that, due to their referential
transparency, admit strong analyses of desirable security
properties.
The work presented in this paper differs from those
above in that our framework is designed to mitigate spe-
ciﬁc vulnerabilities that are widely prevalent on the Inter-
net. The generality of our approach could be enhanced,
however, by integrating general information ﬂow poli-
cies, at the cost of an additional burden on developers.
Several application servers for Haskell have already
been developed, most notably HAppS [19]. To the best
of our knowledge, however, none of these frameworks
implement speciﬁc protection against cross-site script-
ing or SQL injection vulnerabilities. Finally, Elsman and
Larsen studied how XHTML documents can be typed
in ML [12]. Their focus, however, is on generating
standards-conforming documents; they do not directly
address security concerns.
7 Conclusions
In this paper, we have presented a framework for devel-
oping web applications that, by construction, are invul-
nerable to server-side cross-site scripting and SQL in-
jection attacks. The framework accomplishes this by
strongly typing both documents and database queries that
are generated by a web application, thereby automati-
cally enforcing a separation between structure and con-
tent that preserves the integrity of these objects.
We conducted an evaluation of the framework, and
demonstrated that all dynamic data that is contained in
a document generated by a web application must be
subjected to sanitization. Similarly, we show that all
SQL queries must be executed in a safe manner. We
also demonstrate the correctness of the sanitization func-
tions themselves. Finally, we give performance numbers
for representative web applications developed using this
framework that compare favorably to those developed in
other popular environments.
In future work, we plan to investigate how the frame-
work can be modiﬁed to allow developers to specify
“safe” transformations of document structure to occur in
a controlled manner. Also, we plan to investigate static
techniques for verifying the correctness of the sanitiza-
tion functions in terms of their agreement with invari-
ants extracted from web browser document parsers and
database query parsers, for instance using a combina-
tion of static and dynamic analyses [3, 5]. Finally, fu-
ture work will consider how language-based techniques
for ensuring document integrity could be applied on the
client.
Acknowledgments
The authors wish to thank the anonymous reviewers for
their insightful comments. We would also like to thank
Adam Barth for providing feedback on an earlier version
of this paper. This work has been supported by the Na-
tional Science Foundation, under grants CCR-0238492,
CCR-0524853, and CCR-0716095.
References
[1] D. Balzarotti, M. Cova, V. V. Felmetsger, N. Jo-
vanovic, E. Kirda, C. Kruegel, and G. Vigna. Saner:
Composing Static and Dynamic Analysis to Val-
In Pro-
idate Sanitization in Web Applications.
ceedings of the 2008 IEEE Symposium on Security
and Privacy (S&P 2008), Oakland, CA, USA, May
2008.
[2] D. Balzarotti, M. Cova, V. V. Felmetsger, and G. Vi-
gna. Multi-module Vulnerability Analysis of Web-
In Proceedings of the 2007
based Applications.
ACM Conference on Computer and Communica-
tions Security (CCS 2007), Alexandria, VA, USA,
October 2007.
[3] D. Balzarotti, W. Robertson, C. Kruegel, and G. Vi-
Improving Signature Testing Through Dy-
gna.
In Proceedings of
namic Data Flow Analysis.
the Annual Computer Security Applications Con-
ference (ACSAC 2007), Miami Beach, FL, USA,
December 2007.
[4] B. Bangert and J. Gardner. PylonsHQ. http://
pylonshq.com/, February 2009.
[5] A. Barth, J. Caballero, and D. Song. Secure Con-
tent Snifﬁng for Web Browsers, or How to Stop Pa-
pers from Reviewing Themselves. In Proceedings
of the IEEE Symposium on Security and Privacy,
Oakland, CA, USA, May 2009. IEEE Computer
Society.
[6] Breach Security,
Breach WebDe-
http://www.breach.com/products/
Inc.
fend.
webdefend.html, January 2009.
[7] S. Chong, K. Vikram, and A. C. Myers. SIF: En-
forcing Conﬁdentiality and Integrity in Web Ap-
In Proceedings of the 2007 USENIX
plications.
Security Symposium, Boston, MA, USA, 2007.
USENIX Association.
Inc.
[8] Citrix Systems,
Citrix Application Fire-
wall. http://www.citrix.com/English/PS2/
products/product.asp?contentID=25636,
January 2009.
[9] K. Claessen and J. Hughes.
Testing Monadic
Code with QuickCheck. ACM SIGPLAN Notices,
37(12):47–59, 2002.
[10] M. de Kunder. The Size of the World Wide Web.
http://www.worldwidewebsize.com/, May 2008.
[11] Django
Software
Web Application
//www.djangoproject.com/, June 2009.
Foundation.
Framework.
Django
http:
[12] M. Elsman and K. F. Larsen. Typing XHTML
Web Applications in ML. In Proceedings of the 6th
International Symposium on Practical Aspects of
Declarative Languages, pages 224–238. Springer-
Verlag, 2004.
[13] U. Erlingsson, B. Livshits, and Y. Xie. End-to-end
In Proceedings of the
Web Application Security.
11th USENIX Workshop on Hot Topics in Operat-
ing Systems, San Diego, CA, USA, 2007. USENIX
Association.
[14] F5 Networks,
Inc.
BIG-IP Application Se-
http://www.f5.com/
curity Manager.
products/big-ip/product-modules/
application-security-manager.html,
January 2009.
[15] Ferruh Mavituna.
SQL Injection Cheat
Sheet.
http://ferruh.mavituna.com/
sql-injection-cheatsheet-oku/, June 2009.
[16] M. Finifter, A. Mettler, N. Sastry, and D. Wagner.
In Proceed-
Veriﬁable Functional Purity in Java.
ings of the 15th ACM Conference on Computer and
Communications Security, pages 161–174, Alexan-
dria, VA, USA, October 2008. ACM.
[17] Google, Inc. ctemplate. http://code.google.
com/p/google-ctemplate/, June 2009.
[18] D. H. Hansson.
Ruby on Rails.
rubyonrails.org/, February 2009.
http://
[19] HAppS LLC. HAppS – The Haskell Application
Server. http://happs.org/, February 2009.
[20] Hewlett Packard Development Company, L.P.
http://www.hpl.hp.com/research/
httperf.
linux/httperf/, February 2009.
[21] Y.-W. Huang, F. Yu, C. Hang, C.-H. Tsai, D. Lee,
and S.-Y. Kuo. Securing Web Application Code by
In Pro-
Static Analysis and Runtime Protection.
ceedings of the 13th International Conference on
the World Wide Web, pages 40–52, New York, NY,
USA, 2004. ACM.
[22] T. Jim, N. Swamy, and M. Hicks. Defeating Script
Injection Attacks with Browser-Enforced Emded-
In Proceedings of the 16th Interna-
ded Policies.
tional Conference on the World Wide Web, Banff,
Alberta, Canada, May 2007. ACM.
[23] M. Johns and C. Beyerlein. SMask: Preventing In-
jection Attacks in Web Applications by Approxi-
mating Automatic Data/Code Separation. In Pro-
ceedings of ACM Symposium on Applied Comput-
ing, Seoul, Korea, March 2007. ACM.
[24] N. D. Jones and N. Andersen. Flow analysis of
lazy higher-order functional programs. Theoretical
Computer Science, 375(1–3):120–136, 2007.
[25] N. Jovanovic, C. Kruegel, and E. Kirda. Pixy: A
Static Analysis Tool for Detecting Web Applica-
In Proceedings of the IEEE
tion Vulnerabilities.
Symposium on Security and Privacy (S&P 2006),
pages 258–263, Oakland, CA, USA, May 2006.
IEEE Computer Society.
[26] N. Jovanovic, C. Kruegel, and E. Kirda. Precise
Alias Analysis for Static Detection of Web Appli-
cation Vulnerabilities. In Proceedings of the 2006
Workshop on Programming Languages and Anal-
ysis for Security, pages 27–36, Ottawa, Ontario,
Canada, 2006. ACM.
[27] E. Kirda, C. Kruegel, G. Vigna, and N. Jo-
vanovic. Noxes: A Client-side Solution for Mitigat-
ing Cross-Site Scripting Attacks. In Proceedings of
the 2006 ACM Symposium on Applied Computing
(SAC 2006), Dijon, France, April 2006. ACM.
[28] A. Klein. DOM Based Cross Site Scripting or
XSS of the Third Kind. http://www.webappsec.
org/projects/articles/071105.shtml, July
2005.
[29] C. Kruegel, W. Robertson, and G. Vigna. A Multi-
model Approach to the Detection of Web-based At-
tacks. Journal of Computer Networks, 48(5):717–
738, July 2005.
[30] M. S. Lam, M. Martin, B. Livshits, and J. Wha-
ley. Securing Web Applications with Static and Dy-
namic Information Flow Tracking. In Proceedings
of the 2008 ACM SIGPLAN Symposium on Partial
Evaluation and Semantics-based Program Manipu-
lation, pages 3–12, San Francisco, CA, USA, 2008.
ACM.
[31] P. Li and S. Zdancewic. Encoding Information
Flow in Haskell. In Proceedings of the 19th IEEE
Computer Security Foundations Workshop. IEEE
Computer Society, 2006.
[32] B. Livshits and U. Erlingsson. Using Web Appli-
cation Construction Frameworks to Protect Against
Code Injection Attacks. In Proceedings of the 2007
Workshop on Programming Languages and Anal-
ysis for Security, pages 95–104, San Diego, CA,
USA, 2007. ACM.
[33] B. Livshits and M. Lam. Finding Security Errors in
Java Programs with Static Analysis. In Proceedings
of the 14th USENIX Security Symposium (USENIX
Security 2005), pages 271–286. USENIX Associa-
tion, August 2005.
[34] A. Madhavapeddy, A. Ho, T. Deegan, D. Scott, and
R. Sohan. Melange: Creating a “Functional In-
ternet”. In Proceedings of the 2nd ACM European
Conference on Computer Systems, pages 101–114,
Lisbon, Portugal, April 2007. ACM.
[35] Microsoft,
Inc.
LINQ.
http://msdn.
microsoft.com/en-us/netframework/
aa904594.aspx, June 2009.
[36] Miniwatts
Marketing
Internet
World
http://www.internetworldstats.com/stats.htm,
May 2008.
Usage
Group.
Statistics.
[37] E. Moggi. Notions of Computation and Monads.
Information and Computation, 93(1):55–92, 1991.
[38] Y. Nadji, P. Saxena, and D. Song. Document Struc-
ture Integrity: A Robust Basis for Cross-site Script-
In Proceedings of the Network and
ing Defense.
Distributed System Security Symposium, February
2009.
[39] A. Nguyen-Tuong, S. Guarnieri, D. Greene, J. Shi-
ﬂey, and D. Evans. Automatically Hardening Web
Applications Using Precise Tainting. In Proceed-
ings of the 2005 International Information Security
Conference, pages 372–382, 2005.
[40] Ofer Shezaf and Jeremiah Grossman and Robert
Auger. Web Hacking Incidents Database. http:
//www.xiom.com/whid-about, January 2009.
[41] Open Security Foundation. DLDOS: Data Loss
Database – Open Source. http://datalossdb.
org/, January 2009.
[42] Open Web Application Security Project (OWASP).
OWASP Top 10 2007. http://www.owasp.org/
index.php/Top 10 2007, February 2009.
[43] C. Reis, J. Dunagan, H. J. Wang, and O. Dubrovsky.
BrowserShield: Vulnerability-Driven Filtering of
Dynamic HTML. ACM Transactions on the Web,
1(3):11, 2007.
[44] Robert Hansen (RSnake). XSS (Cross Site Script-
ing) Cheat Sheet. http://ha.ckers.org/xss.
html, June 2009.
[45] W. Robertson, G. Vigna, C. Kruegel, and R. A.
Kemmerer. Using Generalization and Characteri-
zation Techniques in the Anomaly-based Detection
In Proceedings of the Network
of Web Attacks.
and Distributed System Security Symposium (NDSS
2006), San Diego, CA, USA, February 2006.
[46] Symantec,
Inc.
–
07
08.
Symantec Report
on
–
http://eval.symantec.com/
the Underground Economy
June
mktginfo/enterprise/white papers/
b-whitepaper underground economy
report 11-2008-14525717.en-us.pdf,
November 2008.
July
[47] P. Vogt, F. Nentwich, N. Jovanovic, E. Kirda,
C. Kruegel, and G. Vigna. Cross Site Scripting
Prevention with Dynamic Data Tainting and Static
Analysis. In Proceedings of the Network and Dis-
tributed System Security Symposium (NDSS 2007),
February 2007.
[48] P. Wadler. The Essence of Functional Program-
In Proceedings of the 19th Annual Sym-
ming.
posium on Principles of Programming Languages,
pages 1–14, Albuquerque, NM, USA, 1992. ACM.
[49] G. Wassermann and Z. Su. Sound and Precise Anal-
ysis of Web Applications for Injection Vulnerabil-
ities. ACM SIGPLAN Notices, 42(6):32–41, April
2007.
[50] G. Wassermann and Z. Su. Static Detection of
In Proceed-
Cross-Site Scripting Vulnerabilities.
ings of the 2008 International Conference on Soft-
ware Engineering (ICSE 2008), pages 171–180,
Leipzig, Germany, 2008. ACM.
[51] D. N. Xu. Extended Static Checking for Haskell.
In Proceedings of the 2006 ACM SIGPLAN Work-
shop on Haskell, pages 48–59, Portland, OR, USA,
2006. ACM.
[52] D. N. Xu, S. P. Jones, and K. Claessen. Static Con-
tract Checking for Haskell. In Proceedings of the
36th Annual ACM Symposium on the Principles of
Programming Languages, pages 41–52, Savannah,
GA, USA, 2009. ACM.