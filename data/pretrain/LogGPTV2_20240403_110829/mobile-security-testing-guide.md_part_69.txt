$ cd ios-deploy/
$ xcodebuild
$ cd build/Release
$ ./ios-deploy
$ ln -s /build/Release/ios-deploy /usr/local/bin/ios-deploy
The last line in both the optool and ios-deploy code snippets creates a symbolic link and makes the executable
available system-wide.
504
Tampering and Reverse Engineering on iOS
Reload your shell to make the new commands available:
zsh: # . ~/.zshrc
bash: # . ~/.bashrc
Debugging
Debugging on iOS is generally implemented via Mach IPC. To "attach" to a target process, the debugger process calls
the task_for_pid function with the process ID of the target process and receives a Mach port. The debugger then
registers as a receiver of exception messages and starts handling exceptions that occur in the debugger. Mach IPC
calls are used to perform actions such as suspending the target process and reading/writing register states and virtual
memory.
The XNU kernel implements the ptrace system call, but some of the call's functionality (including reading and writing
register states and memory contents) has been eliminated. Nevertheless, ptrace is used in limited ways by standard
debuggers, such as lldb and gdb . Some debuggers, including Radare2's iOS debugger, don't invoke ptrace at
all.
Debugging with lldb
iOS ships with the console app debugserver, which allows remote debugging via gdb or lldb. By default, however,
debugserver can't be used to attach to arbitrary processes (it is usually used only for debugging self-developed apps
deployed with Xcode). To enable debugging of third-party apps, the task_for_pid entitlement must be added to the
debugserver executable. An easy way to do this is to add the entitlement to the debugserver binary shipped with
Xcode.
To obtain the executable, mount the following DMG image:
/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/DeviceSupport//Devel
operDiskImage.dmg
You'll find the debugserver executable in the /usr/bin/ directory on the mounted volume. Copy it to a temporary
directory, then create a file called entitlements.plist with the following content:
com.apple.springboard.debugapplications
run-unsigned-code
get-task-allow
task_for_pid-allow
Apply the entitlement with codesign:
$ codesign -s - --entitlements entitlements.plist -f debugserver
Copy the modified binary to any directory on the test device. The following examples use usbmuxd to forward a local
port through USB.
505
Tampering and Reverse Engineering on iOS
$ ./tcprelay.py -t 22:2222
$ scp -P2222 debugserver root@localhost:/tmp/
You can now attach debugserver to any process running on the device.
VP-iPhone-18:/tmp root# ./debugserver *:1234 -a 2670
debugserver-@(#)PROGRAM:debugserver PROJECT:debugserver-320.2.89
for armv7.
Attaching to process 2670...
Tracing
Execution Tracing
Intercepting Objective-C methods is a useful iOS security testing technique. For example, you may be interested in
data storage operations or network requests. In the following example, we'll write a simple tracer for logging HTTP(S)
requests made via iOS standard HTTP APIs. We'll also show you how to inject the tracer into the Safari web browser.
In the following examples, we'll assume that you are working on a jailbroken device. If that's not the case, you first
need to follow the steps outlined in section Repackaging and Re-Signing to repackage the Safari app.
Frida comes with frida-trace , a function tracing tool. frida-trace accepts Objective-C methods via the -m flag.
You can pass it wildcards as well-given -[NSURL *] , for example, frida-trace will automatically install hooks on all
NSURL class selectors. We'll use this to get a rough idea about which library functions Safari calls when the user
opens a URL.
Run Safari on the device and make sure the device is connected via USB. Then start frida-trace as follows:
$ frida-trace -U -m "-[NSURL *]" Safari
Instrumenting functions...
-[NSURL isMusicStoreURL]: Loaded handler at "/Users/berndt/Desktop/__handlers__/__NSURL_isMusicStoreURL_.js"
-[NSURL isAppStoreURL]: Loaded handler at "/Users/berndt/Desktop/__handlers__/__NSURL_isAppStoreURL_.js"
(...)
Started tracing 248 functions. Press Ctrl+C to stop.
Next, navigate to a new website in Safari. You should see traced function calls on the frida-trace console. Note that
the initWithURL: method is called to initialize a new URL request object.
/* TID 0xc07 */
20313 ms -[NSURLRequest _initWithCFURLRequest:0x1043bca30 ]
20313 ms -[NSURLRequest URL]
(...)
21324 ms -[NSURLRequest initWithURL:0x106388b00 ]
21324 ms | -[NSURLRequest initWithURL:0x106388b00 cachePolicy:0x0 timeoutInterval:0x106388b80
Tampering and Runtime Instrumentation
Patching, Repackaging, and Re-Signing
Time to get serious! As you already know, IPA files are actually ZIP archives, so you can use any zip tool to unpack
the archive.
$ unzip UnCrackable_Level1.ipa
Patching Example: Installing Frida Gadget
506
Tampering and Reverse Engineering on iOS
IF you want to use Frida on non-jailbroken devices you'll need to include FridaGadget.dylib . Download it first:
$ curl -O https://build.frida.re/frida/ios/lib/FridaGadget.dylib
Copy FridaGadget.dylib into the app directory and use optool to add a load command to the "UnCrackable Level 1"
binary.
$ unzip UnCrackable_Level1.ipa
$ cp FridaGadget.dylib Payload/UnCrackable\ Level\ 1.app/
$ optool install -c load -p "@executable_path/FridaGadget.dylib" -t Payload/UnCrackable\ Level\ 1.app/UnCracka
ble\ Level\ 1
Found FAT Header
Found thin header...
Found thin header...
Inserting a LC_LOAD_DYLIB command for architecture: arm
Successfully inserted a LC_LOAD_DYLIB command for arm
Inserting a LC_LOAD_DYLIB command for architecture: arm64
Successfully inserted a LC_LOAD_DYLIB command for arm64
Writing executable to Payload/UnCrackable Level 1.app/UnCrackable Level 1...
Repackaging and Re-Signing
Of course, tampering an app invalidates the main executable's code signature, so this won't run on a non-jailbroken
device. You'll need to replace the provisioning profile and sign both the main executable and the files you've made
include (e.g. FridaGadget.dylib ) with the certificate listed in the profile.
First, let's add our own provisioning profile to the package:
$ cp AwesomeRepackaging.mobileprovision Payload/UnCrackable\ Level\ 1.app/embedded.mobileprovision
Next, we need to make sure that the BundleID in Info.plist matches the one specified in the profile because the
codesign tool will read the Bundle ID from Info.plist during signing; the wrong value will lead to an invalid
signature.
$ /usr/libexec/PlistBuddy -c "Set :CFBundleIdentifier sg.vantagepoint.repackage" Payload/UnCrackable\ Level\ 1.
app/Info.plist
Finally, we use the codesign tool to re-sign both binaries. You need to use your signing identity (in this example
8004380F331DCA22CC1B47FB1A805890AE41C938), which you can output by executing the command security
find-identity -v .
$ rm -rf Payload/UnCrackable\ Level\ 1.app/_CodeSignature
$ /usr/bin/codesign --force --sign 8004380F331DCA22CC1B47FB1A805890AE41C938 Payload/UnCrackable\ Level\ 1.app/
FridaGadget.dylib
Payload/UnCrackable Level 1.app/FridaGadget.dylib: replacing existing signature
entitlements.plist is the file you created for your empty iOS project.
$ /usr/bin/codesign --force --sign 8004380F331DCA22CC1B47FB1A805890AE41C938 --entitlements entitlements.plist P
ayload/UnCrackable\ Level\ 1.app/UnCrackable\ Level\ 1
Payload/UnCrackable Level 1.app/UnCrackable Level 1: replacing existing signature
Now you should be ready to run the modified app. Deploy and run the app on the device:
$ ios-deploy --debug --bundle Payload/UnCrackable\ Level\ 1.app/
507
Tampering and Reverse Engineering on iOS
If everything went well, the app should start in debugging mode with lldb attached. Frida should then be able to attach
to the app as well. You can verify this via the frida-ps command:
$ frida-ps -U
PID Name
--- ------
499 Gadget
When something goes wrong (and it usually does), mismatches between the provisioning profile and code-signing
header are the most likely causes. Reading the official documentation helps you understand the code-signing
process. Apple's entitlement troubleshooting page is also a useful resource.
Patching React Native applications
If the React Native framework has been used for development, the main application code is in the file
Payload/[APP].app/main.jsbundle . This file contains the JavaScript code. Most of the time, the JavaScript code in this
file is minified. With the tool JStillery, a human-readable version of the file can be retried, which will allow code
analysis. The CLI version of JStillery and the local server are preferable to the online version because the latter
discloses the source code to a third party.
At installation time, the application archive is unpacked into the folder
/private/var/containers/Bundle/Application/[GUID]/[APP].app from iOS 10 onward, so the main JavaScript
application file can be modified at this location.
To identify the exact location of the application folder, you can use the tool ipainstaller:
1. Use the command ipainstaller -l to list the applications installed on the device. Get the name of the target
application from the output list.
2. Use the command ipainstaller -i [APP_NAME] to display information about the target application, including the
installation and data folder locations.
3. Take the path referenced at the line that starts with Application: .
Use the following approach to patch the JavaScript file:
1. Navigate to the application folder.
2. Copy the contents of the file Payload/[APP].app/main.jsbundle to a temporary file.
3. Use JStillery to beautify and de-obfuscate the contents of the temporary file.
4. Identify the code in the temporary file that should be patched and patch it.
5. Put the patched code on a single line and copy it into the original Payload/[APP].app/main.jsbundle file.
6. Close and restart the application.
Dynamic Instrumentation
Tooling
508
Tampering and Reverse Engineering on iOS
Frida
Frida is a runtime instrumentation framework that lets you inject JavaScript snippets or portions of your own library
into native Android and iOS apps. If you've already read the Android section of this guide, you should be quite familiar
with this tool.
If you haven't already done so, install the Frida Python package on your host machine:
$ pip install frida
To connect Frida to an iOS app, you need a way to inject the Frida runtime into that app. This is easy to do on a
jailbroken device: just install frida-server through Cydia. Once it has been installed, the Frida server will
automatically run with root privileges, allowing you to easily inject code into any process.
Start Cydia and add Frida's repository by navigating to Manage -> Sources -> Edit -> Add and entering
https://build.frida.re. You should then be able to find and install the Frida package.
Connect your device via USB and make sure that Frida works by running the frida-ps command and the flag '-U'.
This should return the list of processes running on the device:
$ frida-ps -U
PID Name
--- ----------------
963 Mail
952 Safari
416 BTServer
422 BlueTool
791 CalendarWidget
451 CloudKeychainPro
239 CommCenter
764 ContactsCoreSpot
(...)
We will demonstrate a few more uses for Frida throughout the chapter.
Cycript
Cydia Substrate (formerly called MobileSubstrate) is the standard framework for developing Cydia runtime patches
(the so-called "Cydia Substrate Extensions") on iOS. It comes with Cynject, a tool that provides code injection support
for C.
Cycript is a scripting language developed by Jay Freeman (aka Saurik). It injects a JavaScriptCore VM into a running
process. Via the Cycript interactive console, users can then manipulate the process with a hybrid Objective-C++ and
JavaScript syntax. Accessing and instantiating Objective-C classes inside a running process is also possible.
In order to install Cycript, first download, unpack, and install the SDK.
#on iphone
$ wget https://cydia.saurik.com/api/latest/3 -O cycript.zip && unzip cycript.zip
$ sudo cp -a Cycript.lib/*.dylib /usr/lib
$ sudo cp -a Cycript.lib/cycript-apl /usr/bin/cycript
To spawn the interactive Cycript shell, run "./cycript" or "cycript" if Cycript is on your path.
$ cycript
cy#
509
Tampering and Reverse Engineering on iOS
To inject into a running process, we first need to find the process ID (PID). Run the application and make sure the app
is in the foreground. Running cycript -p  injects Cycript into the process. To illustrate, we will inject into
SpringBoard (which is always running).
$ ps -ef | grep SpringBoard
501 78 1 0 0:00.00 ?? 0:10.57 /System/Library/CoreServices/SpringBoard.app/SpringBoard
$ ./cycript -p 78
cy#
One of the first things you can try out is to get the application instance ( UIApplication ), you can use Objective-C
syntax:
cy# [UIApplication sharedApplication]
cy# var a = [UIApplication sharedApplication]
Use that variable now to get the application's delegate class:
cy# a.delegate
Let's try to trigger an alert message on SpringBoard with Cycript.
cy# alertView = [[UIAlertView alloc] initWithTitle:@"OWASP MSTG" message:@"Mobile Security Testing Guide" dele
gate:nil cancelButtonitle:@"OK" otherButtonTitles:nil]
#">"
cy# [alertView show]
cy# [alertView release]
Find the app's document directory with Cycript:
510
Tampering and Reverse Engineering on iOS
cy# [[NSFileManager defaultManager] URLsForDirectory:NSDocumentDirectory inDomains:NSUserDomainMask][0]
#"file:///var/mobile/Containers/Data/Application/A8AE15EE-DC8B-4F1C-91A5-1FED35212DF/Documents/"
The command [[UIApp keyWindow] recursiveDescription].toString() returns the view hierarchy of keyWindow . The
description of every subview and sub-subview of keyWindow is shown. The indentation space reflects the
relationships between views. For example, UILabel , UITextField , and UIButton are subviews of UIView .
cy# [[UIApp keyWindow] recursiveDescription].toString()
`; layer = >
| >
| | >
| | >
| | ; layer = >
| | | >
| | >
| | | >
| | >
| | >`
You can also use Cycript's built-in functions such as choose which searches the heap for instances of the given
Objective-C class:
cy# choose(SBIconModel)
[#""]
Learn more in the Cycript Manual.
Method Hooking
Frida
In section "Execution Tracing" we've used frida-trace when navigating to a website in Safari and found that the
initWithURL: method is called to initialize a new URL request object. We can look up the declaration of this method
on the Apple Developer Website:
- (instancetype)initWithURL:(NSURL *)url;
Using this information we can write a Frida script that intercepts the initWithURL: method and prints the URL passed
to the method. The full script is below. Make sure you read the code and inline comments to understand what's going
on.
import sys
import frida
# JavaScript to be injected
frida_code = """
// Obtain a reference to the initWithURL: method of the NSURLRequest class
var URL = ObjC.classes.NSURLRequest["- initWithURL:"];
// Intercept the method
511
Tampering and Reverse Engineering on iOS
Interceptor.attach(URL.implementation, {
onEnter: function(args) {
// Get a handle on NSString
var NSString = ObjC.classes.NSString;