unsecure. Based on the assumption that the forwarded sessions perform signatures tagged
with “forwarded”, as shown below, we however can provide a signing oracle only for such
messages, allowing for the simulatability of the forwarding agent, and of the forwarded client
and server. More speciﬁcally, recall the the forwarding agent is of the form:
F A(skP, k) :=
in(enc(sid, k))
out(enc(sign(, skP ), k))
75
Then, we may obtain the simulatability with:
Tf or(m, s) := ∃A, m =
i
Tf or,skP,s,Osign
Tf or,skS,s,Oa(cid:48)
i,b(cid:48)
Then, Of orward is simply Osign
This diﬃculty actually stems from a well known weakness in the agent forwarding. When
a user logs on a remote server, he set up on the server a socket which allows to ask for any
signature.
If another user has privileged access to the server, he may also use the socket,
and obtain a signature for any session. In our model, we assume that only honest sessions of
forwarder P can access an agent, which allows us to prove the security. Providing a proof of
SSH without this modiﬁcation still represent a challenge regarding composition.
and D.4, where we replace for instance EUF-CMATP ,skP,s with EUF-CMATP ∨T (cid:48)
proofs will work as previously, based on the remark that T (cid:48)
for instance with getmess(sign) = hash().
Now, the proof of A-3 is instantly derived from the proof performed in Appendices D.3
P ,skP,s. The
P ( getmess(sign), s) is incompatible
The diﬃculty now lies in proving the security of what we do after the ﬁrst SSH key
exchange, i.e proving Hypothesis B-1. This is where we apply once again Corollary 3.
E.1.2 Second application of Corollary 3
We wish to prove that:
!n2P 1(k); F A(k)(cid:107)S1(k); P D(k); Y (cid:107)SF ; Z ∼=OKE1
We use as hypothesis:
A-3:
!n2P 1(k); F A(k)(cid:107)S1(k); P D(k); Y (cid:48)(cid:107)SF ; Z(cid:48)
P 1(k); F A(k)(cid:107)S1(k); P D0(a, skP );
if ¬T (B, s) then
P D1(a, skP, Ba); out(Ba)
(cid:107)SF 0(b, skS);
else out(Ba, ga, B)
if ¬T (A, s) then
P 1(k); F A(k)(cid:107)S1(k); P D0(a, skP );
∼=OKE1 ,Ok
F P S ,OY Z
SF 1(b, skS, Ab); out(Ab)
else out(Ab, gb, A)
out(k, ga, B)
if B = gb then
else if ¬T (B, s) then
P D1(a, skP, Ba); bad
(cid:107)SF 0(b, skS);
else out(Ab, gb, A)
if A = ga then
out(k, gb, A)
else if ¬T (B, s) then
SF 1(b, skS, Ab); bad
else out(Ab, gb, A)
Note that the k used here is a fresh name, which could be considered as a long term secret,
i.e inside p. We may prove this without considering P 1 and S1, and replacing them by oracles
which can simulate them. The proof of A-3 can once again be derived from the proof performed
in Appendices D.3 and D.4. Note that here, the proof is greatly simpliﬁed because our modiﬁed
76
forwarding agent ensure that any signed session identiﬁer is honest, and the secrecy of the
name k is not even required to perform the proof. This proof could also performed without
the additional check added to the forwarding agent, but it would then require a cryptographic
assumption regarding the encryption.
And B-1:
P D1(k(cid:48)); Y (k(cid:48))(cid:107)SF 1(k(cid:48)); Z(k(cid:48)) ∼=OKE1 ,O
KEk
2
P D1(k(cid:48)); Y (cid:48)(k(cid:48))(cid:107)SF 1(k(cid:48)); Z(cid:48)(k(cid:48))
With the oracles:
• Ok
allows to simulate (A-1) the other honnest sessions of P D and SF , it corresponds
F P S
P ,skS,s,Osign
S ,skP,s,Oai,bi
to Osign
T (cid:48)
T (cid:48)
of Appendix D.4.
• OY Z allows to simulate (C-1) the continuation, i.e the protocols of the form
in(k); P D1(k); Y (k)(cid:107)in(k); SF 1(k); Z(k)
2
allows to simulate (C-2) !n2F A(k)(cid:107)P D(k)(cid:107)SF (it is similar to OF P S).
• OKEk
Here, we do not commit to any transport protocol used after the SSH key exchange. It
would probably use some encryption using the fresh key. Then, if for instance IND-CCAis
required to prove Y (cid:107)Z ∼= Y (cid:48)(cid:107)Z(cid:48), to prove B − 1, we would need to assume that IND-CCAis
still valid even when the attacker has access to the hash of a message containing the key used
for encryption. This holds for instance in the random oracle model. A proof of B − 1 could
then be derived from the proof of Y (cid:107)Z ∼= Y (cid:48)(cid:107)Z(cid:48) which would still be valid under an oracle
producing hashes of the key, i.e an oracle which could simulate P D1 and SF 1.
F Proofs
F.1 Formal Corollary for Key Exchange
We denote p = {idI , idR} and s = {lsidI
identiﬁers.
i }i∈N the set of all the copies of the local session
Formalizing the previous Section, to prove the security of a key exchange, we can use the
i , lsidR
following Corollary of Theorem 5.
Corollary 1. Let Oke, O be oracles and KEi[_1, _2] := I(lsidI
a key exchange protocol, such that I binds xI , xI
disjoint of the oracle support. Let idI , idR be names and sI = {lsidI
of names :
id, xI
lsid, R binds xR, xR
i , idI ); _1(cid:107)R(lsidR
i }i∈N,sR = {lsidR
i , idR); _2
lsid and Nl(KE) is
i }i∈N sets
id, xR
1. ∀i ≥ 1, (νlsidI
i , idI , lsidR
KEi[out((cid:104)xI , lsidI
i , idR.
i , xI
lsid, xI
id(cid:105)), out((cid:104)xR, lsidR
i , xR
lsid, xR
id(cid:105))](cid:107)out((cid:104)lsidR
i (cid:105))
i , lsidI
is Oke simulatable)).
2. s is disjoint of the support of O.
77
3.
0 , xR
lsid, xR
id)] ∼=Oke,O
KE0[out((cid:104)xI , lsidI
KE0[
if xI
id(cid:105)), out((cid:104)xR, lsidR
id = idR then
id = idR then
lsid, xI
0 ∧ xI
0, xlsid, xid(cid:105))
lsid /∈ sR ∧ xI
0, xI
lsid = lsidR
out((cid:104)k, lsidI
else if xI
⊥
else out((cid:104)xI , lsidI
id(cid:105)),
0, xI
lsid, xI
0 ∧ xR
id = idI then
if xR
lsid = lsidI
out((cid:104)k, lsidR
id(cid:105))
lsid, xR
0 , xR
lsid /∈ sI ∧ xR
else if xR
⊥
else out((cid:104)xR, lsidR
id = idI then
id(cid:105))]
lsid, xR
0 , xR
Then, for any N which depends on the security parameter:
(cid:107)i≤N KEi[out(xI ), out(xR)] ∼=O
(cid:107)i≤N KEi[
id = idR) then
if (xI
if
1≤j≤N
xI
lsid = lsidR
out(ki,j)
else out(xI ),
id = idI ) then
if (xR
if
1≤j≤N
xR
lsid = lsidI
out(kj,i)
else out(xR)]
j ∧ xI
id = idR then
j ∧ xR
id = idI then
KEi[_1, _2] := I(lsidI
Then, building upon the previous Corollary and the sequential composition Theorems, the
following Corollary shows the precise requirements to prove the security of a protocol which
uses a key exchange, for an bounded number of session and with long term secrets shared
between the key exchange and the protocol.
Corollary 2. Let OT , Oke, Or,OP,Q be oracles and
i , idI ); _1(cid:107)R(lsidR
i }i∈N,sR = {lsidR
i , idR); _2 a key exchange protocol, such that I
lsid and Nl(KE) is disjoint of the oracle support. Let
i }i∈N and s = sI ∩ sR sets of names.
Let p = {idI , idR}, P (x, y) = P1(x, y)(cid:107)P2(x, y) and Q(x, y, z) = Q1(x, y, z)(cid:107)Q1(x, y, z) be
binds xI , xI
idI , idR be names, sI = {lsidI
parameterized protocols, such that Nl(P, Q) is disjoint of the oracle support.
I-1 ∀i ≥ 1, (νlsidI
I-2 s is disjoint of the support of OP,Q.
i , idR.KEi[out(xI ), out(xR)](cid:107)out((cid:104)lsidR
lsid, R binds xR, xR
i , idI , lsidR
i , lsidI
id, xR
id, xI
i (cid:105)) is OT -simulatable)).
78
I-3
0 , xR
lsid, xR
id(cid:105)) ∼=OT ,OP,Q
KE0[out((cid:104)xI , lsidI
KE0
[if xI
id(cid:105)), out((cid:104)xR, lsidR
id = idR then
id = idR then
id(cid:105))
lsid, xI
lsid, xI
0 ∧ xI
0, xI
lsid /∈ sR ∧ xI
0, xI
lsid = lsidR
out((cid:104)k, lsidI
else if xI
⊥
else out((cid:104)xI , lsidI
id(cid:105)),
0, xI
lsid, xI
lsid = lsidI ∧ xR
id = idI then
if xR
out((cid:104)k, lsidR
id(cid:105))
lsid, xR
0 , xR
lsid /∈ sI ∧ xR
else if xR
⊥
else out((cid:104)xR, lsidR
id = idI then
id(cid:105))]
lsid, xR
0 , xR
and
R-1 ∀ 1 ≤ i, j ≤ n, νp, ki,j.P0(p, ki,j) is Or-simulatable.
R-2 ∀ 1 ≤ i ≤ n, νp, ki,j.Q0(p, ki,j) is Or-simulatable.
R-3 s is disjoint of the support of Ok.
R-4 P0(p, k) ∼=Or,Oke Q0(p, k)
and
C-1 νp.in(xI
i ).P I
i (xI
(cid:107)i≤n KEi[
i )(cid:107)in(xR
i ).P R
i )is OP,Q-simulatable.
id = idR) then
i (xR
if (xI
lsid = lsidR
id = idR) then
if
1≤j≤n
(xI
j ∧ xI
out((cid:104)i, j(cid:105))
else P I
i (xI
i ),
id = idI ) then
j ∧ xR
out((cid:104)i, j(cid:104))
i (xR
i )]
else P R
1. νp.
if (xR
lsid = lsidI
(xR
if
1≤j≤n
id = idI ) then
is Oke-simulatable.
Then, for any n which may depend on the security parameter:
(cid:107)i≤nKEi[if xI
id = idR then QI
(cid:107)i≤nKEi[P I
i ) else P I
i (xI
i (xI
i (xI
i ), P R
i (xR
i ), if xR
i )] ∼=
id = idI then QR
i (xR
i ) else P R