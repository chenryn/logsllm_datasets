### Surrounding Context and Leakage of Meaningful Values

When a target application is used by a victim, it may inadvertently leak meaningful values that can be exploited. Automatically identifying which APIs can potentially be used by an attacker presents several challenges. A too conservative approach can result in a large number of false positives, requiring manual analysis. Conversely, an overly restrictive approach risks eliminating valid APIs, leading to false negatives.

Our analysis is divided into two stages, representing a balanced tradeoff. In the first stage, we start by considering all the collected API return values. We then discard keys whose values remain constant across all API invocations, as these do not provide any useful information for inferring state changes. Next, we identify keys with particularly noisy values, where the value is almost always different (e.g., out of 100 invocations, there are only a couple of repetitions). These values are unlikely to provide a strong signal for the attacker, but we err on the safe side and proceed to further inspection before discarding them.

Empirically, we found that the vast majority of these noisy values fall into one of the following categories: timestamps, incremental values (relative timestamps and auto-incremented sequential numbers), and pointers (memory addresses). We developed a simple, conservative heuristic to identify whether a noisy value belongs to one of these categories. If so, given their non-security-relevant semantics, we can safely discard them. Specifically:
- **Timestamps**: When all values are converted to "datetime" objects, the dates are always compatible with when the experiments were run.
- **Incremental values**: The differences between consecutive values are always small positive numbers.
- **Pointers**: All values, when interpreted as memory addresses, point to valid, mapped memory pages.

If we cannot recognize the semantics of a noisy key, we do not discard it and consider it potentially interesting. At the end of this stage, we obtain a set of candidate APIs for which at least one key has not been discarded. These APIs have the potential to be useful for an attacker, as they may return a changing value correlated with the outside environment.

In the second stage, we focus on identifying APIs that return the same value before the app starts and a different value just after the user (in our case, the Stimulator module) starts the victim app. These APIs are the final output of our analysis pipeline.

### Comparison with SCAnDroid

We are not the first to propose an analysis framework for pinpointing Android APIs vulnerable to state inference attacks. This section compares our work with SCAnDroid [27], highlighting several shortcomings in their approach.

#### Shortcomings of SCAnDroid

1. **API Selection**:
   - **Client-Side APIs Only**: SCAnDroid only considers client-side APIs implemented in the Manager, relying on AOSP documentation. Our analysis considers both client- and server-side components, using the AOSP source code.
   - **Filtering by Method Name**: SCAnDroid filters APIs by method name prefixes such as `get`, `query`, `has`, or `is`. Our filtering is based on the internal functioning of the Android system, allowing us to cover a wider attack surface. Our evaluation shows that SCAnDroid's strategies allow it to reach only ~44% of the available attack surface.

2. **Server-Side APIs**:
   - SCAnDroid cannot easily extend to identify and support the testing of server-side APIs, which are accessible only via AIDL. These APIs are neither accessible via reflection nor described in the official documentation.

3. **Method Invocation and Return Value Inspection**:
   - SCAnDroid recursively invokes all methods through reflection, leading to potential data loss and incomplete inspection. For example, invoking a setter method before a getter method can overwrite field values, losing information. Additionally, not all information stored in an object is accessible via its public or private methods.
   - Our approach uses custom serialization to recursively dump every field within an object, addressing these issues. Our analysis identified vulnerable APIs that SCAnDroid either did not analyze or incorrectly marked as "not vulnerable."

### Evaluation

#### Experimental Setup

We evaluated our framework on two versions of the Android OS: Android 8.1 (Nexus 5X, December 2018 security patch) and Android 9 (Xiaomi MI A2, August 2019). We also tested on Android 10 but found no new vulnerabilities, confirming that all previously identified bugs were fixed. Therefore, we focus on the results from Android 8.1 and 9.

#### Attack Surface Enumeration

- **Attacker-Reachable Services**:
  - **Android 8.1**: 160 services, 100 reachable (~62%).
  - **Android 9**: 180 services, 95 reachable (~52%).

- **API Enumeration**:
  - **Android 8.1**: 157 classes (71 Client, 86 Server), 6,219 methods, 2,464 candidates after filtering.
  - **Android 9**: 157 classes (76 Client, 81 Server), 6,979 methods, 2,796 candidates after filtering.

#### Method Testing

- **Testing Time**:
  - **Android 8.1**: 63 hours.
  - **Android 9**: 68 hours.

#### Analysis Results

- **Filtered APIs**:
  - **Android 8.1**: 1,616 methods, reduced to 51 after discarding constant and noisy values.
  - **Android 9**: 1,931 methods, reduced to 52 after discarding constant and noisy values.
  - **Total Unique APIs**: 66, with 24 potentially leaking APIs.

- **Vulnerable APIs**:
  - **Android 8.1 and 9**: 18 out of 24 APIs are indeed vulnerable. 
    - 4 require no permission.
    - 2 require a Normal permission.
    - The rest are protected with the `PACKAGE_USAGE_STATS` permission, allowing collection of usage statistics, including foreground app information.

- **False Positives**:
  - **getInputMethodWindowVisibleHeight**: Leaks keyboard size on the screen.
  - **getPendingAppTransition**: Indicates an app is about to move to the foreground, enabling generic phishing attacks.

### Detailed Information on Vulnerable APIs

| Classname | Method |
|-----------|--------|
| IActivityManager | getRunningTasks |
| IActivityManager | getRecentTasks |
| ActivityManager | getRunningTasks |
| IUsageStatsManager | queryUsageStats |
| INetworkStatsService | querySummaryForDevice |
| INetworkStatsService | queryDetailsForUid |
| StorageStatsManager | queryStatsForPackage |
| StorageManager | getStorageVolumes |
| IActivityManager | getRunningServices |
| NetworkStatsManager | querySummaryForDevice |
| NetworkStatsManager | queryDetailsForUid |
| IActivityManager | getRecentTasks |
| IActivityManager | getRunningTasks |
| NetworkStatsManager | querySummaryForDevice |
| UsageStatsManager | queryUsageStats |
| UsageStatsManager | queryEvents |
| UsageStatsManager | queryConfigurations |
| IStorageStatsManager | queryStatsForPackage |
| IStorageStatsManager | queryStatsForUid |

This structured and detailed approach ensures a comprehensive and accurate analysis of potential vulnerabilities in Android APIs.