### 9.2 基于Debian的系统

#### 9.2.1 查找文件所属的软件包
你可以使用 `dpkg` 命令来查找某个特定文件属于哪个软件包。例如：
```bash
dpkg --search /absolute/file/path
```
请注意，这里必须使用绝对路径。例如：
```bash
$ dpkg --search /usr/bin/xxd
vim-common: /usr/bin/xxd
```
从输出中可以看出 `/usr/bin/xxd` 文件是作为 `vim-common` 包的一部分被安装的。

#### 9.2.2 使用 `aptitude` 安装软件包
在了解了如何列出系统中的软件包信息之后，接下来我们将学习如何安装软件包。首先，你需要确定要安装的软件包名称。可以使用 `aptitude` 命令加上 `search` 选项来查找特定的软件包。例如：
```bash
$ aptitude search wine
```
`search` 选项的好处在于你无需在包名周围添加通配符；通配符会被隐式添加。下面是使用 `aptitude` 查找 `wine` 软件包的例子：
```bash
$ aptitude search wine
```
注意，在每个包名字之前都有一个 `p` 或 `i`。如果看到 `i`，说明这个包已经安装到了你的系统上。如果看到 `p` 或 `v`，说明这个包可用但尚未安装。通过上述命令，我们可以看到系统中尚未安装 `wine`，但在软件仓库中可以找到该包。

一旦通过 `search` 选项找到了软件包名称，只需将其插入到 `aptitude install` 命令中即可安装：
```bash
$ sudo aptitude install wine
```
在上述命令中，`sudo` 允许你以 `root` 用户身份运行命令。这是进行管理任务（如安装软件）所必需的。

为了检查安装过程是否正常，可以再次使用 `search` 选项。这次你应该可以看到 `wine` 包前面有 `i`，这表示它已经安装好了。此外，你还可能注意到其他一些包前面也有 `i`，这是因为 `aptitude` 自动解析了必要的包依赖关系，并安装了需要的额外库和软件包。

#### 9.2.3 使用 `aptitude` 更新软件
尽管 `aptitude` 可以帮助解决安装软件时遇到的问题，但在更新有依赖关系的多个包时可能会比较繁琐。要妥善地将系统上的所有软件包更新到软件仓库中的最新版本，可以使用 `safe-upgrade` 选项：
```bash
$ sudo aptitude safe-upgrade
```
注意，这个命令不需要使用软件包名称作为参数。`safe-upgrade` 选项会将所有已安装的包更新到软件仓库中的最新版本，有助于系统的稳定性。

还有一些不那么保守的软件升级选项：
- `aptitude full-upgrade`
- `aptitude dist-upgrade`

这些选项执行相同的任务，将所有软件包升级到最新版本。它们与 `safe-upgrade` 的区别在于，它们不会检查包之间的依赖关系。如果你不确定各种包的依赖关系，建议使用 `safe-upgrade` 选项。

#### 9.2.4 使用 `aptitude` 卸载软件
使用 `aptitude` 卸载软件包与安装及更新它们一样容易。你可以选择是否保留软件数据和配置文件。

- 若要仅删除软件包而不删除数据和配置文件，可以使用 `remove` 选项。
- 若要删除软件包及其相关的数据和配置文件，可以使用 `purge` 选项。

例如：
```bash
$ sudo aptitude purge wine
```

要检查软件包是否已删除，可以再次使用 `aptitude search` 选项。如果在软件包名称前看到 `c`，意味着软件已删除但配置文件尚未清除；如果前面是 `p`，则表示配置文件也已删除。

#### 9.2.5 `aptitude` 仓库
`aptitude` 默认的软件仓库位置是在安装 Linux 发行版时设置的，具体位置存储在 `/etc/apt/sources.list` 文件中。很多情况下，根本不需要添加或删除软件仓库，因此也不必接触这个文件。但如果需要为 PMS 添加一些额外的软件仓库，可以在该文件中进行设置。

以下是 Ubuntu 系统中 `sources.list` 文件的一个例子：
```bash
$ cat /etc/apt/sources.list
deb http://us.archive.ubuntu.com/ubuntu/ trusty main restricted
deb-src http://us.archive.ubuntu.com/ubuntu/ trusty main restricted
deb http://us.archive.ubuntu.com/ubuntu/ trusty-updates main restricted
deb-src http://us.archive.ubuntu.com/ubuntu/ trusty-updates main restricted
deb http://us.archive.ubuntu.com/ubuntu/ trusty universe
deb-src http://us.archive.ubuntu.com/ubuntu/ trusty universe
deb http://us.archive.ubuntu.com/ubuntu/ trusty-updates universe
deb-src http://us.archive.ubuntu.com/ubuntu/ trusty-updates universe
deb http://archive.canonical.com/ubuntu/ trusty partner
deb-src http://archive.canonical.com/ubuntu/ trusty partner
deb http://extras.ubuntu.com/ubuntu/ trusty main
deb-src http://extras.ubuntu.com/ubuntu/ trusty main
```

### 9.3 基于 Red Hat 的系统

基于 Red Hat 的发行版也有几种不同的前端工具，常见的有以下三种：
- `yum`：在 Red Hat 和 Fedora 中使用。
- `urpm`：在 Mandriva 中使用。
- `zypper`：在 openSUSE 中使用。

这些前端都是基于 `rpm` 命令行工具的。下一节将讨论如何使用这些基于 `rpm` 的工具来管理软件包。重点是 `yum`，但也会涉及 `zypper` 和 `urpm`。

#### 9.3.1 列出已安装包
要找出系统上已安装的包，可以在 shell 提示符下输入如下命令：
```bash
$ yum list installed
```
输出的信息可能会在屏幕上一闪而过，所以最好是将已安装包的列表重定向到一个文件中：
```bash
$ yum list installed > installed_software
```
可以使用 `more` 或 `less` 命令（或一个 GUI 编辑器）按需查看这个列表。

对于 openSUSE 或 Mandriva 发行版上的已安装包，可以参考表 9-1 中的命令。遗憾的是，Mandriva 中采用的 `urpm` 工具无法生成当前已安装软件列表，因此需要转向底层的 `rpm` 工具。

| 版本     | 前端工具 | 命令                                 |
|----------|----------|--------------------------------------|
| Mandriva | urpm     | `rpm -qa > installed_software`       |
| openSUSE | zypper   | `zypper se --installed-only > installed_software` |

`yum` 擅长找出某个特定软件包的详细信息。它可以给出关于包的非常详尽的描述，另外还可以通过一条简单的命令查看包是否已安装：
```bash
$ yum list xterm
```

对于 `urpm` 和 `zypper`，列出详细软件包信息的命令见表 9-2。还可以使用 `zypper` 命令的 `info` 选项从库中获得更详细的包信息。

| 信息类型      | 前端工具 | 命令                                      |
|---------------|----------|-------------------------------------------|
| 查看详细信息  | urpm     | `rpm -qi package_name`                    |
|               | zypper   | `zypper info package_name`                |
| 查看已安装包  | urpm     | `rpm -qa`                                |
|               | zypper   | `zypper se --installed-only`              |