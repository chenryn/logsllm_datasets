G4.8.4
Traffic positions component correctly 
implements reasonableness checks 
and error detection protocol
Figure 6. Assurance case fragment from third choice
p
9
by addressing subgoal G4.8. The traffic positions com-
ponent must detect the cases in which the information
received over ADS-B from the other aircraft is inade-
quate and in those cases report failure with probability
at least 
. Traffic position information could be com-
promised  in  several  ways:  1)  the  other  aircraft  could
report data incorrectly, 2) the data could be corrupted
in transit, and 3) the data could be stale because up-to-
date information was not received in time. The devel-
oper must ensure that the probabilities of these events
occurring undetected, either alone or in combination, is
low enough that the target probability is met.
Let us assume that the target probability is high,
and that the error detection and correction mechanism
used  on ADS-B  broadcasts  is  sufficient  for  our  pur-
poses.  The  design  of  the  traffic  positions  component
must sufficiently mask the remaining types of faults.
One way to address the threat of incorrect infor-
mation  being  reported  by  other  aircraft  is  to  impose
reasonableness criteria on the data. There are limits to
the acceleration of aircraft, and so if the data represen-
tation of an aircraft’s positions changes too quickly, we
can  conclude  that  the  data  are  faulty  and  report  the
unavailability of traffic position information.
Alternatively,  we  could  incorporate  a  redundant
source of traffic position information such as radar or a
camera with which to compare the ADS-B data (as is
done in the actual system). Since the given architecture
does not include such an additional information source,
however,  we  have  little  choice  but  to  detect  faults  in
the information we have. Accordingly, we choose to:
•
track the traffic positions we obtain from ADS-B
broadcasts over time, computing the velocity and
acceleration of each target aircraft;
•
•
•
perform  reasonableness  assessment  on  these  to
detect incorrect information in the broadcast;
check  the  error  detection  fields  of  each  ADS-B
message we use to detect corrupt messages; and
use  position  estimation  to  address  the  threat  of
stale data.
An assessment of this choice will help us to decide
whether reasonableness constraints are likely to be suf-
ficient.  Figure  6  shows  the  argument  fragment  that
accompanies the choice to use reasonableness criteria.
If we can satisfy subgoal G4.8.1 by showing that the
probability  of  incorrect  data  not  being  caught  by  our
criteria is sufficiently low, then we can make the choice
and proceed; if not, we must seek a change to our pre-
vious  choices  or  to  our  project’s  givens  that  would
make the project tractable.
4.6. The fourth system development choice
Assuming that we find—or chose to assume, at the
risk of rework or project failure if we are wrong—that
it is possible to satisfy subgoal G4.8.1, we proceed by
seeking  ways  to  satisfy  the  remaining  subgoals.  One
such  subgoal  is  G4.8.4,  which  claims  that  the  imple-
mentation of the traffic positions component performs
the described computation.
If  our  architecture  and  design  were  sufficient  to
tolerate a small number of residual faults in the traffic
positions component, we could elect to implement the
algorithm in the programming language of our choice
and rely upon testing to confirm that our implementa-
tion has the desired behavior. If we had elected earlier
to  use  a  safety  kernel  [11]  in  our  architecture,  for
example, we might now be faced with such a goal. We
assume  to  the  contrary  that  the  needed  assurance
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:49:24 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007 
G4.8.4
Traffic positions component correctly implements 
reasonableness checks and error detection protocol
C6
Software
implementation plan
ST4
Fully verified implementation
C7
Software
verification plan
G4.8.4.1
The specification 
of the traffic
positions com-
ponent is correct
G4.8.4.2
The source code of 
the traffic positions 
component meets the 
specification
G4.8.4.3
The compiler 
correctly translates 
source code to 
object code
G4.8.4.4
The linker correctly 
translates object 
code to machine 
code
G4.8.4.5
The libraries 
used are 
fully verified
G4.8.4.6
The hard-
ware used is 
fully verified
S1
Verified
compiler's
assurance
case
S2
Verified
linker's
assurance
case
S3
Verified
CPU's
assurance
case
Figure 7. Assurance case fragment from fourth choice
makes testing infeasible, and so we must either seek an
alternative choice or else revise an earlier choice so as
to lower the target probability.
the
similar assurance needs, potentially saving costs by re-
using the same technique. We are not compelled to do
so,  however:  if  a  cheaper  technique  meets  another
module’s assurance needs, we are free to use it.
Several unaddressed goals remain, and in a com-
plete application of ABD, we would continue the pro-
cess until all sub-goals had been addressed, directly or
through argument, by evidence. We would then exam-
ine the assurance case for flaws in the argument, and
redress these flaws. (The techniques a developer would
use to validate the assurance case argument are beyond
the scope of this work.)
At any point in the process, a developer may dis-
cover that a previous choice leads to an unsatisfiable
goal and so requires redress. If, for example, we could
find  no  suitable  fully-verified  compiler,  our  fourth
choice would need readdressing. If no other implemen-
tation strategy could be found to address goal G4.8.4 in
Figure 6, we may even have to readdress the architec-
ture  to  weaken  goal  G4.8.4  by  reducing  the  depend-
ability obligation imposed on the implementation.
5. Related work
Some standards governing software development,
such as DO-178B [8], offer the same prescription to all
applicable systems. The ABD process instead compels
the developer to assess the dependability needs of each
part of a system and make system development choices
accordingly; the developer can thus economize in some
parts  of  the  system  while  remaining  assured  that  the
system as a whole will be adequately dependable.
correctly 
formalizes 
specification 
One choice that would allow us to meet this goal is
to  use  a  fully-verified  implementation  of  the  traffic
position  component,  resulting  in  the  assurance  case
fragment shown in Figure 7. If we make this choice,
we  must  write  a  formal  specification  of  the  chosen
algorithm, implement it, and argue that: 
•
the 
described computation; 
the source code we write meets the specification; 
the compiler we use correctly translates the source
code into object code; 
the  linker  we  use  correctly  translates  the  object
code into machine code; 
the libraries we use (if any) are fully verified; and 
the hardware we run on correctly implements its
instruction set architecture.
Some  of  these  sub-goals  can  be  addressed  with
direct  evidence.  The  assurance  case  provided  by  the
vendors  of  the  tools  we  use,  for  example,  constitute
evidence in this assurance case of our claim that these
tools have been fully verified.
•
•
•
•
•
4.7. Re-addressing a choice
At  this  point  in  our  example  we  have  chosen  an
architecture, selected a design for detecting and report-
ing  errors  in  data  from  an  unreliable  subsystem,  and
chosen an implementation strategy for one submodule.
We  may  use  this  strategy  for  other  submodules  with
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:49:24 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007 
References
[1] Bishop, P. and R. Bloomfield. “A Methodology for Safety
Case  Development.”  
[2] Green, D. F. “Runway Safety Monitor Algorithm for Run-
way  Incursion  Detection  and  Alerting.”  Technical  report
NASA CR-2002-211416. January 2002.
[3] Green, D. F. “Runway Safety Monitor Algorithm for Sin-
gle and Crossing Runway Incursion Detection and Alerting.”
Technical report NASA CR-2006-214275. February 2006.
[4] Kelly, T. P. “A Systematic Approach to Safety Case Man-
agement.” Proc. of SAE 2004 World Congress, Detroit, MI,
March 2004. 
[5]  Kelly,  T.,  and  J.  McDermid.  “Safety  Case  Patterns  –
Reusing Successful Arguments.” Proc. of IEE Colloquium on
Understanding  Patterns  and  Their  Application  to  System
Engineering, London, April 1998.
[6]  Mannering,  D.,  J.  G.  Hall,  and  L.  Rapanotti.  “Relating
Safety  Requirement  and  System  Design  through  Problem
Oriented  Software  Engineering.”  Technical  report  2006/11,
Open University, September 2006.
[7]  MoD,  “00-56  Safety  Management  Requirements  for
Defence Systems,” U.K. Ministry of Defence, Defence Stan-
dard, Issue 3, December 2004.
[8]  RTCA.  “Software  Considerations  in  Airborne  Systems
and  Equipment  Certification,”  document  RTCA/DO-178B.
Washington, DC: RTCA, December 1992.
[9]  Strunk,  E.  and  J.  Knight.  “The  Essential  Synthesis  of
Problem Frames and Assurance Cases.” Proc. of 2nd Interna-
tional Workshop on Applications and Advances in Problem
Frames,  co-located  with  29th  International  Conference  on
Software Engineering, Shanghai, May 2006.
[10]  Weaver,  R. A.  and  T.  P.  Kelly.  “The  Goal  Structuring
Notation - A Safety Argument Notation.” Proc. of Depend-
able  Systems  and  Networks  2004  Workshop  on Assurance
Cases, July 2004.
[11]  Wika,  K.G.  and  J.C.  Knight.  “On  the  Enforcement  of
Software Safety Policies.” Proc. of 10th Annual IEEE Con-
ference on Computer Assurance (COMPASS ‘95), Gaithers-
burg, MD, June 1995.
Other safety-critical software development work is
assessed  via  a  safety  case.  Some  standards  [7]  and
researchers [4] call for safety cases to be constructed
early  and  updated  often  during  system  development
and  subsequent  change.  Continuing  with  this  idea,
ABD interleaves development and assurance case con-
struction tightly so that the assurance case can be used
to drive system development.
Problem-Oriented Software Engineering [6] aims
to create software and an argument that it is fit for use.
In  POSE,  the  system  requirements  are  documented
using Problem Frames and progressively transformed,
via a series of justified transformations, into an imple-
mentable  specification.  This  is  one  technique  that
could be used to argue (as one must) that if the system
meets its requirements the user will be satisfied.
6. Conclusion
Many choices must be made at each stage of sys-
tem development, and these can profoundly impact the
finished system’s dependability. Currently, there is lit-
tle  guidance  for  making  choices  that  give  assurance
that the system meets it dependability goals. If the sys-
tem and its assurance case are co-developed, however,
the assurance case can provide concrete dependability
criteria against which to gauge potential alternatives.
In this paper, we have explained the basic princi-
ples of Assurance Based Development and shown how
this  development  paradigm  can  be  used  to  provide
assurance case goals for system development choices.
We have presented an example system and shown how
its assurance case drove specific choices we made in its
development by allowing us to analyze the effect of our
choices  on  the  system’s  dependability  as  we  made
them. While it is not possible to show that the choices
we have made are optimal because of the many vari-
ables involved in development, we feel that our choices
were better informed than they would have been other-
wise and so are more likely to achieve our goals.
Acknowledgements
We  thank  David  Green  of  Lockheed  Martin  for
extensive help in understanding the RSM and its asso-
ciated artifacts. We are very grateful to NASA Langley
Research Center for suggesting the use of the system
for  study.  We  appreciate  William  Greenwell’s  assis-
tance with the assurance case material presented here.
This work was sponsored in part by NSF grant CCR-
0205447 and in part by NASA grant NAG1-02103.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:49:24 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007