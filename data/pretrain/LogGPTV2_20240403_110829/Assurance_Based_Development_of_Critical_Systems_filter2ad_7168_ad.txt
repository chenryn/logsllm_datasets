### G4.8.4: Traffic Positions Component Correctly Implements Reasonableness Checks and Error Detection Protocol

**Figure 6: Assurance Case Fragment for Subgoal G4.8**

The traffic positions component must ensure the integrity of the information received over ADS-B (Automatic Dependent Surveillance-Broadcast) from other aircraft. This involves detecting and reporting any inadequacies in the data, such as incorrect, corrupted, or stale information, with a specified probability threshold.

#### Potential Data Compromises:
1. **Incorrect Reporting:** The other aircraft may transmit inaccurate data.
2. **Data Corruption:** The data may be altered during transmission.
3. **Stale Data:** Up-to-date information may not be received in time, leading to outdated data.

To meet the target probability, the developer must ensure that the likelihood of these events occurring undetected, either individually or in combination, is sufficiently low.

**Assumptions:**
- The target probability is high.
- The error detection and correction mechanisms used in ADS-B broadcasts are adequate.

**Design Considerations:**
- **Reasonableness Criteria:** Imposing limits on the acceleration of aircraft can help detect faulty data. If the position changes too rapidly, it indicates an error.
- **Redundant Data Sources:** Incorporating additional sources like radar or cameras for cross-referencing ADS-B data can enhance accuracy. However, since the current architecture does not include these, we must focus on detecting faults in the available data.

**Chosen Approach:**
- **Track Traffic Positions:** Continuously monitor the positions obtained from ADS-B broadcasts, computing velocity and acceleration.
- **Reasonableness Assessment:** Evaluate the data to detect and report any inconsistencies.
- **Error Detection Fields:** Check the error detection fields in each ADS-B message to identify corrupt messages.
- **Position Estimation:** Use estimation techniques to address the issue of stale data.

**Evaluation:**
An assessment will determine if the reasonableness constraints are sufficient. Figure 6 illustrates the argument fragment supporting the use of reasonableness criteria. If the probability of undetected incorrect data is acceptably low, the chosen approach is valid. Otherwise, adjustments to previous choices or project parameters may be necessary.

### 4.6: Fourth System Development Choice

Assuming the subgoal G4.8.1 is satisfied, we proceed to address the remaining subgoals, including G4.8.4, which requires the traffic positions component to perform the specified computations accurately.

**Implementation Strategy:**
- **Residual Fault Tolerance:** If the architecture and design can tolerate a small number of residual faults, the algorithm can be implemented in a chosen programming language, with testing confirming its behavior.
- **Safety Kernel:** If a safety kernel were part of the architecture, the implementation would need to meet more stringent requirements.
- **Full Verification:** To achieve the required assurance, a fully verified implementation of the traffic positions component is proposed, as shown in Figure 7.

**Subgoals for Full Verification:**
- **Correct Specification:** Ensure the formal specification of the traffic positions component is accurate.
- **Source Code Compliance:** Verify that the source code meets the specification.
- **Compiler Accuracy:** Confirm that the compiler correctly translates the source code to object code.
- **Linker Accuracy:** Ensure the linker correctly translates the object code to machine code.
- **Verified Libraries:** Use fully verified libraries.
- **Hardware Verification:** Ensure the hardware correctly implements the instruction set architecture.

**Evidence:**
- Direct evidence from tool vendors' assurance cases can support claims about the verification status of tools used.

### 4.7: Readdressing a Choice

In our example, we have chosen an architecture, designed a method for error detection and reporting, and selected an implementation strategy for one submodule. This strategy can be applied to other submodules with similar assurance needs, potentially reducing costs through reusability. If a cheaper technique meets another module's assurance needs, it can be adopted.

**Remaining Goals:**
- In a complete ABD (Assurance Based Development) process, all sub-goals must be addressed, either directly or through arguments supported by evidence.
- The assurance case should be examined for flaws, and these should be corrected.

**Revisiting Choices:**
- If a previous choice leads to an unsatisfiable goal, it must be readdressed. For instance, if no suitable fully-verified compiler is found, the fourth choice would need to be reconsidered.
- If no alternative implementation strategy can be found for G4.8.4, the architecture may need to be revised to reduce the dependability obligation.

### 5. Related Work

Standards like DO-178B [8] provide uniform guidelines for software development. In contrast, ABD requires developers to assess the dependability needs of each system part and make informed choices, allowing for cost savings in some areas while ensuring overall system reliability.

### 6. Conclusion

System development involves numerous choices that significantly impact dependability. By co-developing the system and its assurance case, concrete criteria can guide decision-making. This paper explains the principles of ABD and demonstrates how it can drive system development choices, ensuring better-informed decisions and higher likelihood of achieving dependability goals.

### Acknowledgements

We thank David Green of Lockheed Martin for his extensive help, NASA Langley Research Center for suggesting the study system, and William Greenwell for assistance with the assurance case material. This work was partially funded by NSF grant CCR-0205447 and NASA grant NAG1-02103.

---

This optimized version aims to improve clarity, coherence, and professionalism, making the content more accessible and easier to understand.