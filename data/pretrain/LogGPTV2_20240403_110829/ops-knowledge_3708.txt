User: I'm writing scripts that have to run on a number of different UNIX-like releases.
These are written in python 2.x.
Unfortunately, some newer releases have taken to calling this flavor binary "python2" instead of "python." Thus, "#!/usr/bin/env python" doesn't work to look for the proper installed python interpreter. Either I get the version 3 interpreter (bad) or no interpreter at all (worse!)
Is there a clever way to write a python script such that it will load with the python2 interpreter if installed, else the python interpreter if it's installed? I'd have to use other mechanisms to detect when "python" is a python3, but as I'm inside a python-like environment at that point, I can live with that.
I imagine I can write a ripple launcher, call it "findpython2," and use that as the #! interpreter for the script, but that means I have to install findpython2 in the search path, which is decidedly sub-optimal (these scripts are often called by absolute reference, so they're not in the path.)
Assistant: If you must run on python 2, you best also call the interpreter as python2. I think most UNIX releases have symlinks from /usr/bin/python/and /usr/bin/python2 to the appropriate binary.