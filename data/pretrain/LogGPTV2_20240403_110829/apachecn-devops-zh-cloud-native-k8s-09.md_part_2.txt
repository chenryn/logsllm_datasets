default       my-lightweight-pod  2m           10Mi       
```
如您所见，该命令使用与`kubectl top nodes`相同的绝对单位–毫核心和字节。查看 Pod 级别的指标时，没有相对百分比。
接下来，我们将看看 Kubernetes 如何处理日志记录。
## 对 Kubernetes 的记载
我们可以将 Kubernetes 上的日志记录分为两个区域–*应用日志*和*控制平面日志*。让我们从控制平面日志开始。
### 控制平面日志
控制平面日志指的是由 Kubernetes 控制平面组件创建的日志，如调度器、API 服务器等。对于普通的 Kubernetes 安装，控制平面日志可以在节点本身上找到，并且需要直接访问节点才能看到。对于组件设置为使用`systemd`的集群，可以使用`journalctl`命令行界面工具找到日志(更多信息请参考以下链接:[https://manpages . debian . org/stretch/systemd/journal CTL . 1 . en . html](https://manpages.debian.org/stretch/systemd/journalctl.1.en.html))。
在主节点上，您可以在文件系统的以下位置找到日志:
*   在`/var/log/kube-scheduler.log`可以找到 Kubernetes 调度器日志。
*   在`/var/log/kube-controller-manager.log`处，您可以找到控制器管理器日志(例如，查看缩放事件)。
*   在`/var/log/kube-apiserver.log`可以找到 Kubernetes API 服务器日志。
在工作节点上，日志在文件系统的两个位置可用:
*   在`/var/log/kubelet.log`你可以找到 kubelet 日志。
*   在`/var/log/kube-proxy.log`可以找到 kube 代理日志。
虽然一般来说，集群运行状况会受到 Kubernetes 主节点和工作节点组件运行状况的影响，但是跟踪应用日志当然也很重要。
### 应用日志
在 Kubernetes 上很容易找到应用日志。在解释它的工作原理之前，让我们看一个例子。
要检查特定 Pod 的日志，可以使用`kubectl logs `命令。该命令的输出将显示写入容器的`stdout`或`stderr`的任何文本。如果 Pod 有多个容器，则必须在命令中包含容器名称:
```
kubectl logs   
```
在引擎盖下，Kubernetes 通过使用容器引擎的日志驱动程序来处理 Pod 日志。通常情况下，`stdout`或`stderr`的任何日志都会保存到`/var/logs`文件夹中每个节点的磁盘上。根据 Kubernetes 分布，可以设置日志循环，以防止日志过度使用节点磁盘空间。此外，Kubernetes 组件，如调度器、kubelet 和 kube-apiserver 也将日志保存到 Node 磁盘空间，通常在`/var/logs`文件夹中。需要注意的是，这种默认的日志记录功能是多么的有限 Kubernetes 强大的可观察性栈肯定会包括一个用于日志转发的第三方解决方案，我们很快就会看到。
接下来，对于一般的 Kubernetes 可观察性，我们可以使用 Kubernetes Dashboard。
## 安装增压板
Kubernetes Dashboard 在一个 GUI 中提供了 kubectl 的所有功能——包括查看日志和编辑资源。设置仪表板非常容易，让我们看看如何设置。
仪表板可以通过单个`kubectl apply`命令安装。如需定制，请查看位于[https://github.com/kubernetes/dashboard](https://github.com/kubernetes/dashboard)的 Kubernetes 仪表板 GitHub 页面。
要安装 Kubernetes 仪表板的一个版本，运行以下`kubectl`命令，根据您使用的 Kubernetes 版本，用您想要的版本替换``标签(同样，检查仪表板 GitHub 页面的版本兼容性):
```
kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/ /aio/deploy/recommended.yaml
```
在我们的案例中，在撰写本书时，我们将使用 v 2 . 0 . 4–最终命令如下所示:
```
kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.4/aio/deploy/recommended.yaml
```
一旦安装了 Kubernetes Dashboard，有几种方法可以访问它。
重要说明
通常不建议使用入口或公共负载平衡器服务，因为 Kubernetes Dashboard 允许用户更新集群对象。如果由于某种原因，您的仪表板登录方法被破坏或很容易被发现，您可能会面临很大的安全风险。
考虑到这一点，我们可以使用`kubectl port-forward`或`kubectl proxy`从本地机器查看我们的仪表板。
对于这个例子，我们将使用命令，因为我们还没有在一个例子中使用它。
与`kubectl port-forward`命令不同，`kubectl proxy`命令只需要一个命令来代理集群上运行的每个服务。它通过将 Kubernetes API 直接代理到本地机器上的一个端口来实现这一点，默认情况下这个端口是`8081`。有关`Kubectl proxy`命令的完整讨论，请查看[https://kubernetes . io/docs/reference/generated/ku bectl/ku bectl-commands # proxy](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#proxy)上的文档。
为了使用`kubectl proxy`访问特定的 Kubernetes 服务，您只需要拥有正确的路径。运行`kubectl proxy`后访问 Kubernetes 仪表板的路径如下:
```
http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/
```
如您所见，我们在浏览器中放置的`kubectl proxy`路径位于 localhost 端口`8001`上，并提到了名称空间(`kubernetes-dashboard`)、服务名称和选择器(`https:kubernetes-dashboard`)以及代理路径。
让我们把我们的 Kubernetes 仪表板网址放在浏览器中，看看结果:
![Figure 9.4 – Kubernetes Dashboard login](img/B14790_09_004_new.jpg)
图 9.4-固定仪表板登录
当我们部署和访问 Kubernetes Dashboard 时，我们会看到一个登录屏幕。我们可以创建一个服务帐户(或者使用我们自己的)来登录仪表板，或者简单地链接我们本地的`Kubeconfig`文件。通过使用特定服务帐户的令牌登录 Kubernetes 仪表板，仪表板用户将继承该服务帐户的权限。这允许您指定用户可以使用 Kubernetes 仪表板采取的操作类型，例如只读权限。
让我们继续为我们的 Kubernetes 仪表板创建一个全新的服务帐户。您可以自定义此服务帐户并限制其权限，但目前我们将授予其管理员权限。为此，请遵循以下步骤:
1.  We can create a Service Account imperatively using the following Kubectl command:
    ```
    kubectl create serviceaccount dashboard-user
    ```
    这将产生以下输出，确认我们服务帐户的创建:
    ```
    serviceaccount/dashboard-user created
    ```
2.  Now, we need to link our Service Account to a ClusterRole. You could also use a Role, but we want our dashboard user to be able to access all namespaces. To link a Service Account to the `cluster-admin` default ClusterRole using a single command, we can run the following:
    ```
    kubectl create clusterrolebinding dashboard-user \--clusterrole=cluster-admin --serviceaccount=default:dashboard-user
    ```
    该命令将产生以下输出:
    ```
    clusterrolebinding.rbac.authorization.k8s.io/dashboard-user created
    ```
3.  After this command is run, we should be able to log in to our dashboard! First, we just need to find the token that we will use to log in. A Service Account's token is stored as a Kubernetes secret, so let's see what it looks like. Run the following command to see which secret our token is stored in:
    ```
    kubectl get secrets
    ```
    在输出中，您应该会看到如下所示的机密:
    ```
    NAME                         TYPE                                  DATA   AGE
    dashboard-user-token-dcn2g   kubernetes.io/service-account-token   3      112s
    ```
4.  Now, to get our token for signing in to the dashboard, we only need to describe the secret contents using the following:
    ```
    kubectl describe secret dashboard-user-token-dcn2g   
    ```
    结果输出如下所示:
    ```
    Name:         dashboard-user-token-dcn2g
    Namespace:    default
    Labels:       
    Annotations:  kubernetes.io/service-account.name: dashboard-user
                  kubernetes.io/service-account.uid: 9dd255sd-426c-43f4-88c7-66ss91h44215
    Type:  kubernetes.io/service-account-token
    Data
    ====
    ca.crt:     1025 bytes
    namespace:  7 bytes
    token: 
    ```
5.  要登录仪表盘，复制`token`旁边的字符串，复制到 Kubernetes 仪表盘登录界面的令牌输入中，点击**登录**。您应该会看到 Kubernetes 仪表板概述页面！