two main causes for failed registrations in [17]. The second main
cause for failed registrations was the lack functionality for detecting
and fixing input errors during registration (e.g., due to formatting
constraints), which we have included in our system. We have also
extended the account activation process to support SMS-based
activation. For us to have a unified framework and also address these
shortcomings, we decided to not directly utilize their tool but instead
incorporate their key ideas into our own version of the non-SSO
automated account registration using Puppeteer. We note that all
of our SSO-related processes were not modelled after their design.
Ethics and disclosure. It is important to emphasize that all
experiments were conducted using test accounts registered by our
framework. During our experiments we did not interact with or
affect actual users in any way. To facilitate remediation efforts we
notified affected RPs following established strategies [42], [43],
[44], [17] for identifying contact emails. This included collecting
websites’ security.txt files,
leveraging search engines,
crawling the websites, and obtaining each domain’s WHOIS record.
While we are still waiting for feedback from other RPs, we received
confirmation from gifyu.com that their current system does not
merge accounts as they do not collect email addresses, but plan to
use Hybridauth [45]. We have also shared our work with Facebook.
Limitations. Certain caveats are inherent to any study, such as
ours, that relies on a fully automated system and analysis pipeline.
This includes the inability to create an account on certain RPs, or
potential false positives/negatives during the testing phase. For the
former issue, while our system was able to successfully complete the
login process on 1,900 RPs, in practice researchers could supplement
this by manually creating accounts on problematic websites of
interest. For the latter, as aforementioned, when designing our
system we opted for correctness (i.e., minimizing false positives)
and also manually verified all of our findings to ensure validity.
VII. RELATED WORK
Protocol Verification on the Web. Authentication and autho-
rization using third parties is a complex, critical, and security-
sensitive component of the modern web, necessitating the standard-
ization and evaluation of appropriate protocols. OpenID Connect,
the standardized protocol used in most implementations of Web
SSO, has been studied extensively; see the formal analysis of the
protocol in Fett et al. [46] and an overview of the scholarship in
this area related to protocol vulnerabilities by Mainka et al. [1].
While these efforts are substantial and necessary for securing the
SSO ecosystem, the vulnerabilities that we consider in this paper are
beyond the scope of such tools due to the vulnerabilities that arise out
of the composition of SSO and non-SSO authentication mechanisms.
Protocol and implementation mismatches. While the
analysis of these protocols is a necessary component of ensuring
their security, very often the devil is in the implementation
details. Researchers have investigated SSO implementations and
found various vulnerabilities [47], [48], [4]. Our approach is
complementary to investigations of attack models that directly
target the SSO implementations themselves,e.g., Sudhodanan et
al.’s work evincing various vulnerabilities of Multi-Party Web
Applications [49] and Cao et al.’s investigation of relying party
impersonation attacks [50]. A necessary precondition for evaluating
attacks at scale is the ability to create and interact with valid
authenticated sessions; SAAT complements these investigations by
providing a framework for evaluating large swaths of the Internet for
vulnerabilities. Zhou and Evans [2] built an automated system that
handled the SSO-registration process and detected implementation
flaws in SSO protocols; while some of the automation techniques
have inspired our SSO registration process, their system has not been
publicly maintained in the past six years, and thus cannot be readily
applied for auditing contemporary web application implementations.
While our paper focuses on SSO-based account creation and
session management, Shernan et al. [5] performed a crawl-based
investigation of a CSRF vulnerability in OAUTH 2.0 (a precursor
to contemporary SSO implementations) which was able to auto-
matically audit sites for potential vulnerabilities, and necessitated
manual inspection to identify true vulnerabilities. Recently Liu et
al. [7], explored how email reuse attacks can allow an adversary
to takeover accounts in SSO RPs. More closely related to our work
is that of Ghasemisharif et al. [6], which investigated the interplay
between accounts managed by relying parties and the connection
to the accounts managed by IdPs, but did so with substantial
manual investigation and at a small scale, the likes of which our
automated auditing system is designed to streamline and standardize.
Furthermore, their study did not explore how revocation, session
termination and cookie expiration actually affect RPs over time.
Considering the web ecosystem more broadly, researchers have also
investigated the security of various protocols and implementations
thereof for other web security primitives including Certificate
Authorities [51], TLS [52], [53], HSTS [54], and CSP [55]. In many
cases, dynamic analysis via crawling-style auditing was able to
identify numerous vulnerable implementations of these protocols.
VIII. CONCLUSION
SSO has revolutionized web authentication by allowing services
to essentially outsource the identity verification process to major IdPs
While the authentication process in these services is typically well-
protected, leading to security benefits for the RPs, the co-existence
and interplay of two separate account authentication pathways cre-
ates additional security pitfalls. As such, we developed an approach
to fully automating black-box auditing framework for detecting
violations and non-compliance of secure practices in Facebook’s RPs.
We implemented this tool for Facebook and manually verified the
approach on Apple and Google. Our large-scale analysis revealed a
series of flaws, ranging from insecure cookie management practices
and a lack of token-liveness checks to incorrect account-merging
practices. Overall, our research highlights that adopting SSO is not a
panacea against authentication flaws but, instead, a process fraught
with multiple nuanced opportunities for mistakes. Apart from our
responsible disclosure to the affected RPs, we will also share our
framework with researchers and IdPs, as we envision it being used by
major IdPs for ensuring a safer SSO ecosystem through continuous
testing and reporting of insecure practices.
1786
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:35:04 UTC from IEEE Xplore.  Restrictions apply. 
ACKNOWLEDGMENTS
We thank the anonymous reviewers for their valuable feedback.
This work was supported by the National Science Foundation (CNS-
1934597). Any opinions, findings, conclusions, or recommendations
expressed herein are those of the authors, and do not necessarily
reflect those of the US Government.
REFERENCES
[1] C. Mainka, V. Mladenov, J. Schwenk, and T. Wich, “Sok: single sign-on
security-an evaluation of openid connect,” in 2017 IEEE European Symposium
on Security and Privacy (EuroS&P).
[2] Y. Zhou and D. Evans, “Ssoscan: Automated testing of web applications
for single sign-on vulnerabilities,” in 23rd {USENIX} Security Symposium
({USENIX} Security 14), 2014, pp. 495–510.
IEEE, 2017, pp. 251–266.
[3] W. Li and C. J. Mitchell, “Security issues in oauth 2.0 sso implementations,”
Springer, 2014, pp.
in International Conference on Information Security.
529–541.
[4] S.-T. Sun and K. Beznosov, “The devil is in the (implementation) details: An
empirical analysis of oauth sso systems,” in Proceedings of CCS 2012.
[5] E. Shernan, H. Carter, D. Tian, P. Traynor, and K. Butler, “More guidelines
than rules: Csrf vulnerabilities from noncompliant oauth 2.0 implementations,”
in International Conference on Detection of Intrusions and Malware, and
Vulnerability Assessment. Springer, 2015, pp. 239–260.
[6] M. Ghasemisharif, A. Ramesh, S. Checkoway, C. Kanich, and J. Polakis,
“O single sign-off, where art
thou? an empirical analysis of single
sign-on account hijacking and session management on the web,” in 27th
USENIX Security Symposium (USENIX Security 18). Baltimore, MD:
USENIX Association, Aug. 2018, pp. 1475–1492. [Online]. Available: https:
//www.usenix.org/conference/usenixsecurity18/presentation/ghasemisharif
[7] G. Liu, X. Gao, and H. Wang, “An investigation of identity-account
inconsistency in single sign-on,” in Proceedings of the Web Conference, 2021.
[8] S. Sivakorn, J. Polakis, and A. D. Keromytis, “The cracked cookie jar: Http
cookie hijacking and the exposure of private information,” in In Proceedings
of the 37th IEEE Symposium on Security and Privacy, ser. S&P ’16, 2016.
[9] M. Isaac and K. Conger, “The New York Times - Facebook Hack
Puts Thousands of Other Sites at Risk,” 2018. [Online]. Available: https:
//www.nytimes.com/2018/10/02/technology/facebook-hack-other-sites.html
[10] Facebook, “Access tokens - facebook login,” 2021. [Online]. Available:
https://developers.facebook.com/docs/facebook-login/access-tokens/
[11] ——, “Using facebook login with existing login systems,” 2021.
[Online]. Available: https://developers.facebook.com/docs/facebook-login/
multiple-providers/
[12] OWASP, “Session management cheat sheet,” 2021. [Online]. Available:
https://cheatsheetseries.owasp.org/cheatsheets/Session Management Cheat
Sheet.html
[13] C. A. Vlsaggio and L. C. Blasio, “Session management vulnerabilities in
today’s web,” IEEE Security Privacy, vol. 8, no. 5, pp. 48–56, 2010.
[14] R. Wang, S. Chen, and X. Wang, “Signing me onto your accounts through
facebook and google: A traffic-guided security study of commercially
deployed single-sign-on web services,” in 2012 IEEE Symposium on Security
and Privacy.
IEEE, 2012, pp. 365–379.
[15] S. Calzavara, A. Rabitti, A. Ragazzo, and M. Bugliesi, “Testing for integrity
flaws in web sessions,” in European Symposium on Research in Computer
Security. Springer, 2019, pp. 606–624.
[16] S. Sivakorn, A. D. Keromytis, and J. Polakis, “That’s the way the cookie
crumbles: Evaluating https enforcing mechanisms,” in Proceedings of the 2016
ACM on Workshop on Privacy in the Electronic Society, 2016, pp. 71–81.
[17] K. Drakonakis, S. Ioannidis, and J. Polakis, “The cookie hunter: Automated
black-box auditing for web authentication and authorization flaws,” in
Proceedings of the 2020 ACM SIGSAC Conference on Computer and
Communications Security, 2020, pp. 1953–1970.
Analysis
Phishing
campaign targets YouTube creators with cookie theft malware,”
2021.
https://blog.google/threat-analysis-group/
phishing-campaign-targets-youtube-creators-cookie-theft-malware/
[Online]. Available:
[18] A.
“Google
Threat
Group
Shen,
-
[19] Google,
“Puppeteer,”
2021.
https://github.com/puppeteer/puppeteer
[Online].
Available:
1787
[20] Fent, “Randexp,” 2021. [Online]. Available: https://github.com/fent/randexp.js
[21] Google,
Available:
[Online].
“Gmail
2021.
api,”
https://developers.google.com/gmail/api
[22] Twilio, “Communication apis for sms, voice, video and authentication,” 2021.
[Online]. Available: https://www.twilio.com/
[23] S. Solanki, G. Krishanan, V. Sampath, and J. Polakis, “In (cyber)space bots
can hear you speak: Breaking audio captchas using ots speech recognition,”
in Proceedings 10th ACM Workshop on Artificial Intelligence and Security,
ser. AISec ’17, 2017.
[24] K. Bock, D. Patel, G. Hughey, and D. Levin, “uncaptcha: a low-resource
defeat of recaptcha’s audio challenge,” in 11th {USENIX} Workshop on
Offensive Technologies ({WOOT} 17), 2017.
[25] Wit.ai, “Build natural language experience,” 2021. [Online]. Available:
https://wit.ai/
[26] E.
Sangaline,
“It
is
not
possible
to
block
https://intoli.com/blog/not-possible-to-block-chrome-headless/
headless,”
[Online].
chrome
2021.
detect
and
Available:
[27] Berstend, “puppeteer-extra-plugin-stealth,” 2021.
[Online]. Available:
https://github.com/berstend/puppeteer-extra/tree/master/packages/
puppeteer-extra-plugin-stealth
J. Jueckstock, S. Sarker, P. Snyder, A. Beggs, P. Papadopoulos, M. Varvello,
B. Livshits, and A. Kapravelos, “Towards realistic and reproducibleweb crawl
measurements,” ser. WWW ’21, 2021.
[28]
[29] Chromium,
“Accessibility
overview,”
2021.
[Online]. Available:
https://chromium.googlesource.com/chromium/src/+/HEAD/docs/
accessibility/overview.md
[30] Majestic,
“The majestic million,”
2020.
[Online]. Available:
https://majestic.com/reports/majestic-million
[31] A. Aliyeva and M. Egele, “Oversharing is not caring: How cname cloaking
can expose your session cookies,” in Proceedings of the 2021 ACM Asia
Conference on Computer and Communications Security, 2021, pp. 123–134.
[32] Y. Nakatsuka, A. Paverd, and G. Tsudik, “Pdot: Private dns-over-tls with
tee support,” Digital Threats: Research and Practice, vol. 2, no. 1, Feb. 2021.
[Online]. Available: https://doi.org/10.1145/3431171
[33] F. Quinkert, T. Lauinger, W. Robertson, E. Kirda, and T. Holz, “It’s not what
it looks like: Measuring attacks and defensive registrations of homograph
domains,” in 2019 IEEE Conference on Communications and Network
Security (CNS), 2019, pp. 259–267.
[34] K. Borgolte, C. Kruegel, and G. Vigna, “Meerkat: Detecting website
defacements through image-based object recognition,” in 24th {USENIX}
Security Symposium ({USENIX} Security 15), 2015, pp. 595–610.
[35] O. Tange, “Gnu parallel 20200522 (’kraftwerk’),” May 2020, GNU
Parallel
to run multiple serial command
line programs in parallel without changing them. [Online]. Available:
https://doi.org/10.5281/zenodo.3841377
is a general parallelizer
[36] Facebook, “Re-authentication - facebook login,” 2021. [Online]. Available:
https://developers.facebook.com/docs/facebook-login/reauthentication/
[37] N. Sakimura, J. Bradley, M. Jones, B. De Medeiros, and C. Mortimore, “Final:
Openid connect core 1.0 incorporating errata set 1,” 2021. [Online]. Available:
https://openid.net/specs/openid-connect-core-1 0.html
[38] Google,
“Openid
connect,”
2021.
[Online].
Available:
https://developers.google.com/identity/protocols/oauth2/openid-connect
[39] Facebook, “Facebook login update - about facebook,” 2021. [Online].
Available: https://about.fb.com/news/2018/10/facebook-login-update/
[40] ——, “Login security - facebook login,” 2021. [Online]. Available:
https://developers.facebook.com/docs/facebook-login/security/
[41] ——, “Data deletion callback - app development,” 2021. [Online]. Available:
https://developers.facebook.com/docs/apps/delete-data/
[42] S. Roth, T. Barron, S. Calzavara, N. Nikiforakis, and B. Stock, “Complex
security policy? a longitudinal analysis of deployed content security policies,”
in NDSS, 2020.
[43] B. Stock, G. Pellegrino, C. Rossow, M. Johns, and M. Backes, “Hey, you have
a problem: On the feasibility of large-scale web vulnerability notification,”
in 25th USENIX Security Symposium (USENIX Security 16). USENIX
Association, 2016.
[44] F. Li, Z. Durumeric, J. Czyz, M. Karami, M. Bailey, D. McCoy, S. Savage,
and V. Paxson, “You’ve got vulnerability: Exploring effective vulnerability
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:35:04 UTC from IEEE Xplore.  Restrictions apply. 
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
1
2