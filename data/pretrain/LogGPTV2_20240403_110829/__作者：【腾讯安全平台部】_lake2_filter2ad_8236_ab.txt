大名鼎鼎的扫描器nmap有一个规避FW/IDS的功能就是利用IP分片进行端口扫描，参数是-f，可以用--mtu设置分片大小，最小的值是8，但是实测有些路由会丢弃MTU比较小的IP包。
![
](https://images.seebug.org/content/images/2020/04/b27c011f-abb1-4fd6-b64d-f165343694b3.png-w331s)
#### 3、程序bug / 性能问题
程序总是有bug的，特别是这种流量处理程序，会瞬间并发处理非常多的数据包，遇到各种特殊情况，稍微不注意就会产生异常。为了保障业务连续性，防护设备一定会在发生异常时保证业务连续性，所以制造异常包让IPS响应不过来也是可以实现绕过的目的。以前我们的DDoS防护系统宙斯盾处理流量的时候，稍微考虑不周程序就core掉了，别说了，说多了都是泪。
测试某个IPS时，建立TCP连接后发送大量序号错误的ack包，然后再发送正确的包，结果IPS出现bug回了序号不对的rst包，产生了绕过。
![
](https://images.seebug.org/content/images/2020/04/60cbc33c-9db8-42c7-b69c-574408668625.png-w331s)
还可以发送大量的无效包，消耗IPS性能，一旦IPS慢下来，他的包就会晚于正常包到达，也产生绕过的机会。
这种异常可以通过协议fuzz来发现[5]，Scapy也是一个好的协议fuzz生成工具，可以一试。
另外，链路上很多网络设备，各自处理TCP/IP协议的实现不一样，也可能带来绕过或者其他问题。比如现在操作系统判断rst包会精确到序号，连在滑动窗口都不行，但是一些NAT设备仍然存在无视序号的rstblood问题。
#### 4、伪造TCP状态
在测试一个IPS的时候发现这是一个久经考验的系统，前述各种方法绕过都失败了，应用层各种绕也不行，居然连bug也fuzz不到，而且它还不是包过滤的，而是基于状态跟踪的
—— 简单测试检测模式，不建立TCP连接直接发HTTP请求，如果还有响应的IPS就是包过滤，反之则是状态跟踪。
结果成也萧何败也萧何，它的破绽恰恰在状态跟踪上：
建立TCP连接后，我们可以发送一个定制TTL值的rst包，这个TTL值正好能够经过IPS但不会到达服务端，IPS基于状态跟踪会认为这个TCP连接已断开，后续的各种包都不会去检测，但服务端不受影响会继续等待ack包来。
经过测试这个当前环境里大概TTL设置为12左右rst包会路过IPS却不会到达服务端，所以我们的关键代码这样写：
![
](https://images.seebug.org/content/images/2020/04/b8cac6dd-e73e-4d6c-96be-3004f213109e.png-w331s)
完美绕过：
![
](https://images.seebug.org/content/images/2020/04/d486751b-3c72-4e27-bb6c-e3744d050504.png-w331s)
这个构造TTL值绕过的问题（我称之为“fake-TTL”攻击）可能是一些带状态跟踪的网络设备的通用问题。
#### 5、阻止三次握手的缺陷
对于直接阻止TCP三次握手的情况，我们详细来看看。
客户端发起syn包，IPS冒充服务端给客户端回rst，假装端口关闭，但是实际上端口开放的话服务端的synack包是能到达客户端的，只是同序号rst先到，后到的synack被操作系统丢弃。简单，客户端丢掉伪造的rst包，接受synack包，然后向服务端发ack包建立三次握手，这时候IPS会双向回rst（如果你家IPS没动作，我建议你考虑换一个牌子的IPS……）。
注意，你的ack包一定比IPS的rst先到服务端并被应用程序执行 ——
我们可以在这个ack包把所有的内容都发了，是一次性盲打，适用于一定场景的漏洞探测和利用。
如果想完美绕过，就得想办法让第二个rst失效；想完美防护，就得让第一个rst生效。仔细研读TCP/IP，具体情况具体分析了，或者试着fuzz一下。
#### 6、IPv6
随着IPv6的普及，会有越来越多的设备支持IPv6（过渡时期是IPv4/6双栈），但是正在服役的IDS/IPS/WAF不一定支持，于是可以畅行无阻。
浏览器支持这样的方式直接访问IPv6地址：https://[IPv6地址]/xxxx
![
](https://images.seebug.org/content/images/2020/04/bc627999-a6cf-4b3b-aaa1-3891b8b09612.png-w331s)
现在的Windows操作系统都默认支持IPv6，但Windows防火墙的规则可能还是只配了IPv4，使用IPv6地址就如入无人之境。以下演示机器的防火墙限制了IPv4的全部端口的访问，用IPv6地址可以连通所有端口，登录远程桌面看看：
![
](https://images.seebug.org/content/images/2020/04/4eb0316b-f68a-4336-b2a6-f58d55ab0e49.png-w331s)
举一反三，大家得检查一下各种安全系统是否开启了对IPv6的支持。
#### 7、加密协议
IPS一般是不能解SSL流量的，所以也检测不到SSL加密的流量，所以尝试通过HTTPS访问是绕过检查的一种方法 ——
这个场景下，基于应用层的WAF的优势就展现出来了。同理，HTTP/2、QUIC、WebSocket等新一代Web浏览协议也能规避IPS。
既然这些协议可以规避IPS，那就是可以通过服务端支持这些协议来防御链路劫持，既保护了通信过程不被篡改，又避免了黑客在网络中窃取用户敏感信息[5]。最佳实践就是部署HTTPS来防止链路劫持，虽说继续劫持HTTPS并非不可能，但是攻击难度提高了几个数量级。此次引起行业关注的github劫持事件，就是SSL证书不正确导致劫持被发现曝光的[6]。
#### 8、阻断UDP
UDP通信是无连接状态的通信，阻断起来更困难。
IPS通过向客户端发送端口不可达（port
unreachable）的ICMP包来实现UDP的阻断。但是效果有限：首先是客户端是否认可这个ICMP包，跟应用程序的代码有关[8]；另外，很可能这个ICMP包不能活着通过链路上的各种路由及防火墙。
### 三. 修复方案
知道了具体的技术手段，优化方案就比较容易推导出来了，读者可以自行归纳一下，这就是“以攻促防”。当然，有问题不怕，怕的是不知道自己有问题、无视问题甚至拒绝正视问题。
### 后记
相信经过上文探讨，前言里面的问题已经有了答案，根据纵深防御原则，不管有无防护设备，安全漏洞都要及时修复。
当然，本文并不是想表达IPS很多问题，而是告诉大家，安全是一个动态过程，防御不是永远有效的，要不断地运营优化，要关注安全防护系统自身的有效性，红蓝对抗的时候不要只关注渗透目标，还要关注整个安全防御体系。感谢宙斯盾的球头人牛长一起测试这个代号“007”的项目，后面的流量分析就交给他来跟进。
最后老规矩，招人，基础安全各个领域，特别是流量安全分析方向，有意向的同志可投递简历。不提供联系方式，你肯定能找到我的。
【附录】
[1] 现在网站越来越难渗透了，渗透这个方向还有前途吗
[2]
[WAF建设运营及AI应用实践](http://mp.weixin.qq.com/s?__biz=MjM5NzE1NjA0MQ==&mid=2651199346&idx=1&sn=99f470d46554149beebb8f89fbcb1578&chksm=bd2cf2d48a5b7bc2b3aecb501855cc2efedc60f6f01026543ac2df5fa138ab2bf424fc5ab2b0&scene=21#wechat_redirect
"WAF建设运营及AI应用实践")
[3] 全方位绕过软WAF思路
[4]
[某电商网站流量劫持案例分析与思考](http://mp.weixin.qq.com/s?__biz=MjM5NzE1NjA0MQ==&mid=204715406&idx=1&sn=e76e17cdf0d2144b39d2897a45ca0442&chksm=2f195028186ed93ec207c52078a0a5a257386ff61a1350ea086297346281540faeb49435d296&scene=21#wechat_redirect
"某电商网站流量劫持案例分析与思考")
[5] Fuzz漏洞挖掘漫谈
[6] “流量劫持”整正窃取你的信息？！
[7] Github疑似遭中间人劫持，网友反馈访问报证书错误
[8] 关于UDP接收ICMP端口不可达（port unreachable）
* * *