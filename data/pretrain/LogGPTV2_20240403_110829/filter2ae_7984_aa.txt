**声明：**
本次测试过程完全在本地或已授权环境中进行，仅供学习与参考。请勿将本文中的漏洞用于未经授权的测试，否则作者不承担任何责任。

在一次日常的安全测试中，我偶然发现了一个使用Flarum搭建的论坛，并成功获取了其管理员账号。虽然此时任务已经基本完成，但我决定进一步尝试是否能够实现远程代码执行（RCE）。

首先，通过管理员后台查看到该Flarum版本为1.3，PHP版本为7.4。由于之前没有接触过Flarum，我咨询了一些安全专家，看是否存在已知的历史漏洞。遗憾的是，结果是不存在这样的漏洞。

Flarum是一款基于PHP开发的开源论坛系统，在国外用户群体中较为流行。在网上搜索后，我发现公开记录的Flarum漏洞较少，且主要集中在跨站脚本攻击（XSS）和权限提升方面。

经过对前后台功能的初步观察，我发现这个论坛默认提供的功能相对有限，大部分扩展性依赖于插件来实现，而安装这些插件通常需要通过命令行工具composer操作。此外，后台管理界面的功能主要集中于帖子管理和用户管理上。

鉴于黑盒测试未能取得突破，我决定下载源码并开展代码审计工作。
## 0x01 源码审查及逻辑梳理
在开始寻找潜在漏洞前，我先仔细阅读了Flarum的核心代码及其扩展开发文档，以便更好地理解整个项目的架构设计以及各组件的具体用途。

随后，在本地环境成功部署了Flarum应用。部署完成后，项目根目录下出现了三个主要文件夹：
- `public`：Web服务根目录，仅包含一个`index.php`入口文件；
- `storage`：存放运行时生成的数据如session、缓存日志等；
- `vendor`：第三方库文件所在位置，通过Composer包管理器自动安装。

所有业务逻辑相关代码均位于`vendor`目录内。值得注意的是，尽管Flarum广泛采用了Laravel和Laminas框架的部分组件，但它自定义实现了核心MVC结构，并大量运用了依赖注入模式和事件驱动机制。这使得熟悉其内部运作方式变得尤为复杂耗时。

对于现代PHP应用程序而言，常见的几种获取shell访问权限的方法包括但不限于：
- 文件上传漏洞
- 路由解析错误导致的函数调用问题
- 模板注入漏洞
- 反序列化攻击

接下来，我按照上述思路逐一进行了尝试。
### 文件上传
Flarum只提供了三处允许上传图片的地方：网站Logo、Favicon图标以及用户头像。令人惊讶的是，默认情况下发帖并不支持附件或图片上传，必须额外安装特定插件才能启用此功能，而目标站点并未配置这类扩展。

检查了这三个上传点的相关处理代码后发现，它们都严格限制了文件名格式（固定为`.png`），并且会利用GD库强制转换图像内容至PNG格式保存。例如，这是用户头像上传部分的代码片段：

```php
public function upload(User $user, Image $image)
{
    if (extension_loaded('exif')) {
        $image->orientate();
    }
    $encodedImage = $image->fit(100, 100)->encode('png');
    $avatarPath = Str::random().'.png';
    $this->removeFileAfterSave($user);
    $user->changeAvatarPath($avatarPath);
    $this->uploadDir->put($avatarPath, $encodedImage);
}
```

显然，这条路已经被彻底封死，同时也给后续的漏洞挖掘带来了挑战。
### 路由分析
不同于早期一些PHP框架可能会根据用户输入动态加载类和方法执行，Flarum采用了一种更为安全的路由映射策略。例如：

```php
return function (RouteCollection $map, RouteHandlerFactory $route) {
    // Get forum information
    $map->get(
        '/',
        'forum.show',
        $route->toController(Controller\ShowForumController::class)
    );
    //...
};
```

因此我认为通过操控URL参数直接触发未授权函数的可能性极低。
### 模板注入
浏览整个后台管理系统后，我没有找到任何可以直接编辑模板文件的功能选项，所以暂时排除了这一可能性。
### 反序列化风险
最后，我还注意到Flarum存在两处可能涉及反序列化的场景——Session管理和缓存系统。不过这两者都是基于文件系统存储实现的，且外部无法直接修改其内容，故也难以作为突破口。

综上所述，经过以上一系列排查，目前看来Flarum似乎并没有明显的高危漏洞可以被利用来进行远程代码执行。
## 0x02 利用CSS渲染读取任意文件
正当我以为无计可施之时，突然注意到后台提供了一个“自定义CSS样式”的功能。许多内容管理系统都会提供类似设置项以满足个性化需求，但Flarum特别之处在于它还支持Less预处理器语法。

作为一种增强版CSS语言，Less不仅兼容标准CSS规则，还引入了许多高级特性如条件语句和循环结构等。开发者编写的Less代码最终会被转换成浏览器可识别的纯CSS形式。那么这里就存在两个值得探讨的方向：
- 编译过程中是否存在安全缺陷？
- Less本身是否有内置危险函数？

查阅资料得知，Flarum使用了名为`less.php`的第三方库来处理Less转译工作。在其官方文档中明确指出：“LESS预处理器具备强大的功能，但也意味着它可以读取服务器上的任意文件甚至嵌入恶意内容。因此建议将其视为与PHP等其他服务器端脚本具有同等安全级别。”

果然，在深入研究Less文档时，我发现了一个名为`data-uri()`的内置函数。该函数的作用是从指定路径加载文件，并将其编码为Base64字符串嵌入到CSS规则里。以下是`less.php`对此函数的具体实现细节：

```php
public function datauri($mimetypeNode, $filePathNode = null) {
    $filePath = ($filePathNode ? $filePathNode->value : null);
    // ...
    if (file_exists($filePath)) {
        $buf = @file_get_contents($filePath);
    } else {
        $buf = false;
    }
    // ...
}
```

由此可以看出，只要能控制`$filePath`变量值，便可以通过这种方式绕过常规文件访问限制，从而达到读取任意文件的目的。