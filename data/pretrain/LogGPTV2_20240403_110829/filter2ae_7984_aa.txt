**原文链接：  
作者：Phith0n**
> 事先声明：本次测试过程完全处于本地或授权环境，仅供学习与参考，不存在未授权测试过程，请读者勿使用该漏洞进行未授权测试，否则作者不承担任何责任
一次日常测试中，偶然遇到了一个Flarum搭建的论坛，并获得了其管理员账号。本来到这里已经可以算完成了任务，将漏洞报给具体负责的人就结束了，但是既然已经拿到了管理员账号，何不尝试一下RCE呢？
首先，我在管理员后台看到当前Flarum版本是1.3，PHP版本是7.4。Flarum以前没有遇到过，于是问下师傅们有没有历史漏洞，没准就不用费事了：
结果显然是没有，否则也不会有这篇文章了??。
Flarum是一个PHP开源的论坛社区系统，以前有听说过，主要是国外用户较多，所以我也是出国以后才遇到。简单搜了下网上公开的漏洞，确实很少，而且以XSS和越权为主。
我对前后台进行了一系列观察，发现这个论坛CMS默认的功能较少，大部分扩展性由插件实现，但安装插件却只能通过命令行composer。浏览了一遍后台所有的功能，基本都是针对帖子和用户进行管理的：
黑盒没有进展，那么下载源码进行代码审计吧。
## 0x01 代码通读与逻辑梳理
漏洞挖掘前，我阅读了Flarum的代码和扩展开发文档，来进一步了解整个项目的架构与各个部分的使用方法。
接着，我在本地安装好Flarum，完成后有三个目录：
• public：Web根目录，里面只有index.php  
• storage：储存runtime文件的目录，里面有session、cache、logs等  
• vendor：库文件目录，使用composer安装
所有代码都在vendor中。它使用了很多Laravel和Laminas框架的components，但主体的MVC架构是自己实现的，并大量使用了依赖注入和事件机制（这一点和我之前分析的Cachet有点像，但Cachet是使用的标准Laravel结构，更简单一些），导致我熟悉目录文件结构和数据流转方式就花了很长时间。
现代PHP项目想要getshell，常见的方法有下面几个：
• 文件上传漏洞  
• 路由错误导致的函数执行漏洞，比如ThinkPHP 5的两个RCE  
• 模板注入漏洞，比如Cachet这个后台getshell  
• 反序列化漏洞
文件上传漏洞是传统漏洞了，但如果规范使用Web框架是不太会出现的，特别是现代的Laravel等框架；路由错误导致的函数执行漏洞多出现于上一代的MVC框架，这类框架会将用户输入解析成class
name和method
name再动态调用，而现在的框架路由多是定义一个完整的路由，Flarum也是这样；模板注入漏洞在后台功能中相对较多，有时候甚至直接就是PHP代码（Wordpress）；反序列化漏洞多出现在数据库、session、缓存之类的位置，如果能控制这些地方，可以着重找这相关的功能。
我按照这个思路逐一进行测试。
### 文件上传
首先是文件上传功能，Flarum仅有三处支持文件上传的逻辑，分别是网站Logo、Favicon和用户头像……是的，作为一个论坛社区，发帖默认不支持上传附件和图片，需要安装扩展来实现，而目标站点并没有这类扩展。
看了一下三处图片上传的代码，文件名无法控制，后缀写死成.png，文件内容也会使用GD库转换成png格式保存，可谓是水泄不通了。比如这是上传用户头像的部分代码：
    /**
     * @param User $user
     * @param Image $image
     */
    public function upload(User $user, Image $image)
    {
        if (extension_loaded('exif')) {
            $image->orientate();
        }
        $encodedImage = $image->fit(100, 100)->encode('png');
        $avatarPath = Str::random().'.png';
        $this->removeFileAfterSave($user);
        $user->changeAvatarPath($avatarPath);
        $this->uploadDir->put($avatarPath, $encodedImage);
    }
这条路堵死，甚至给我后面的漏洞利用也造成了很大困扰。
### 路由问题
Flarum没有动态执行用户传入的类和函数，而是通过router的方式分发路由，比如：
    return function (RouteCollection $map, RouteHandlerFactory $route) {
        // Get forum information
        $map->get(
            '/',
            'forum.show',
            $route->toController(Controller\ShowForumController::class)
        );
        //...
    }
所以我判断路由出问题的可能性较小，就没有细看。
### 模板注入漏洞
我翻了后台页面，并没有发现存在任何有关编辑模板的功能，所以这条路也作罢。
### 反序列化漏洞
经过分析，Flarum中存在反序列化的有两个地方，一是session，二是缓存，但这两个都储存在文件系统中，而我并不能控制文件内容。
终上所述，经过前面的分析，已经大致排除了一些常见的可能导致RCE漏洞的点。
## 0x02 利用CSS渲染读取任意文件
这是我第一次被卡住，但很快我看到了后台的一个功能： **自定义CSS样式** 。
很多CMS都有类似的功能，但Flarum有个有趣的地方是其支持Less语法。
Less是一个完全兼容CSS的语言，并在CSS的基础上提供了很多高级语法与功能，比如CSS中不支持的条件判断与循环，相当于是CSS语言的超集。前端开发者使用Less编写的程序，可以通过编译器转换成合法的CSS语法，提供给浏览器进行渲染。
那么就有趣了，这里支持Less语法，说明这其中存在代码编译的过程，这让我有两个思路：
• 编译过程本身是否存在漏洞，可以用于执行任意代码或命令  
• Less语言中是否有一些高危的函数，可以执行代码或命令
Flarum使用了less.php这个第三方库来编译Less，在其README页面可以看到下面这段警告：
> **Security**
>
> The LESS processor language is powerful and including features that can read
> or embed arbitrary files that the web server has access to, and features
> that may be computationally exensive if misused.  
>  In general you should treat LESS files as being in the same trust domain as
> other server-side executables, such as Node.js or PHP code. In particular,
> it is not recommended to allow people that use your web service to provide
> arbitrary LESS code for server-side processing.
看起来less.php自己也知道在渲染的过程中可能存在一些安全隐患。
我很快在Less语言的文档中找到了这样一个函数：data-uri
在Less中，data-uri函数用于读取文件并转换成data协议输出在css中。看下less.php中相关的实现：
    public function datauri( $mimetypeNode, $filePathNode = null ) {
        $filePath = ( $filePathNode ? $filePathNode->value : null );
        // ...
        if ( file_exists( $filePath ) ) {
            $buf = @file_get_contents( $filePath );
        } else {
            $buf = false;
        }
        // ...
    }
一个可以控制完整路径的文件读取漏洞。