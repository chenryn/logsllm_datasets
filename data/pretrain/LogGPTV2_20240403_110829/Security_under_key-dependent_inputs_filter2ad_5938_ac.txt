the attacker only has an exponentially small probability of
hitting the right key s in the next query that it makes.
−1 on the right s (and since g
−1), the answers that the attacker
is independent of Π, Π
gets in both the “hybrid” and the “real” cases are drawn
from the same probability distribution. Namely the initial
value of f (g(s)) and the answers to all the queries to f are
computed using a random permutation which is independent
of the queries that the attacker makes to Π, Π
But short of querying Π, Π
−1.
Similar claims can be made for many of the published PRP-
to-PRF constructions in the literature, e.g., the schemes
from [3], the truncation construction [10], the XOR con-
struction [18], etc.2
4. KDI-SECURE PRFS IN THE STANDARD
MODEL
We have shown that an ideal cipher is also a KDI-secure
PRF with respect to any function g that does not depend on
the cipher itself. On the other hand, we saw, in the examples
following Deﬁnition 1, that in the standard model a secure
cipher (or PRF) does not have to be KDI-secure, not even
with respect to simple functions such as the identity func-
tion. Here we investigate the existence (and constructibility)
of KDI-secure schemes in the standard model. One obstacle
is the fact that in the standard model it is harder to impose
independence between a PRF (or cipher) scheme and the
function g.
4.1 No single deterministic construction for all g
We begin by showing that one cannot get a single de-
terministic construction that is KDI secure in the standard
model with respect to every singleton class {g}.
Theorem 2
(No single construction for all g).
There exists no deterministic construction of a pseudo-random
function family that is KDI-secure with respect to {g} for all
functions g.
Proof. Let F = {Fs} be a pseudo-random family. De-
ﬁne gF (s) = Fs(0), and we show that F is not KDI-secure
with respect to {gF}. An attacker A queries its key-dependent
oracle to obtain a = Fs(gF (s)) = Fs(Fs(0)); then it queries
the F -oracle on 0 to obtain b = Fs(0); ﬁnally, it queries the
F -oracle on b to obtain c = Fs(b). A outputs 1 if a = c and
0 otherwise. Clearly, when the oracle F is answered with
2For these constructions one gets KDI security in the “ideal
cipher mode” but not necessarily KDI security “beyond the
birthday bound”. (Getting PRF security beyond the birth-
day bound has been the initial motivation for these con-
structions.)
the pseudo-random function Fs then a = c and A outputs
1 with probability 1, while if the F -oracle is random then a
and c are independent random values and hence A outputs
1 only with small probability.
Given Theorem 2, our options for obtaining positive re-
sults in the standard model are either to settle for random-
ized (or salted) constructions, or to come up with diﬀerent
constructions for diﬀerent functions g.
In Section 4.2 we
show a randomized construction that is KDI secure with re-
spect to g for any function g, while in Section 4.3 we show
that for each “well spread” function g one can construct
an explicit deterministic PRF (whose deﬁnition depends on
g) that is KDI-secure with respect to the function g. This
leaves open the question of whether one can construct, for
each function g, an explicit deterministic PRF that is KDI
secure with respect to g.
(We note that the existence of
non-explicit g-speciﬁc deterministic schemes for each g fol-
lows from our randomized construction.)
4.2 A single randomized construction for all g
Here we describe a construction for a pseudo-random func-
tion family F that depends on a public random “salt” r,
such that for every function g, with high probability over the
choice of r, the family F r is KDI-secure with respect to g.
This construction uses in an essential way strong random-
ness extractors [19], see a brief description and deﬁnitions in
Appendix A. On a high level, our construction is as follows:
F r
s (x) = fextr (s)(Compress (x))
where f is a standard PRF, ext is a randomness extrac-
tor, and Compress is some function whose output is much
shorter than its input. The goal is to “break the depen-
dence” between the input and the key, even in the case
where the input is g(s). Roughly, since Compress outputs
very short strings, then there must be many diﬀerent keys s
that match any value of Compress (g(s)). Namely, s still has
high entropy even given the value Compress(g(s)), so extr(s)
is likely to be random and independent of Compress (g(s)).
Of course, one also needs to argue Compress does not in-
troduce easy to ﬁnd collisions which would destroy the PRF
property of F . This can be done by using a collision re-
sistant function, but then we would have to assume that
those exist.
Instead, in the long version [9] we show that
some form of universal hashing is suﬃcient in this context.
(This complicates the proof, but let us rely on a weaker as-
sumption.) Speciﬁcally, in the long version we analyze the
following construction:
“
”
F r1,r2
s
(x) def= fextr2 (s)
Hextr1 (s)(x)
−n/12, 2
(1)
where f : {0, 1}n/12 × {0, 1}n/2 → {0, 1}n is a standard
pseudo-random function family, ext : {0, 1}t × {0, 1}n →
{0, 1}n/12 is a strong (n/3, 2
−3n/4) randomness ex-
tractor,3 and H : {0, 1}m × {0, 1}12m → {0, 1}6m is a hash
function, which is deﬁned as follows: The (n/12)-bit key is
interpreted as an element u ∈ GF (2n/2) (say, by padding
it with zero bits), the n-bit input is interpreted as two el-
ement x1, x2 ∈ GF (2n/2), and the function is deﬁned as
3That is, for any distribution D with min entropy n/3 or
−3n/4 fractions of the seeds r, it holds
more, for all but a 2
that extr(D) is 2
−n/12-close to the uniform distribution over
{0, 1}n/12 (see Appendix A).
Hu(x1, x2) def= u · x1 + x2. Using the fact that this func-
tion H is regular (for every key u), and also it has low colli-
sion probability and very short keys, we prove that collisions
must be rare. Then applying the reasoning from above we
conclude that this construction is KDI-secure with respect
to any function g, with high probability over r1, r2.
Theorem 3
(A randomized construction for all g).
If pseudo-random function families exist, there there exists
a salted pseudo-random function family F r, which is KDI-
secure with respect to {g} for any eﬃciently computable4
function g, with high probability over the choice of the salt r.
4.3 On g-dependent deterministic KDI-secure
schemes
The construction from Section 4.2 implies a non-constructive
deterministic g-dependent KDI-secure scheme for each func-
(cid:2)
tion g (i.e., for each g, there exist values rg, r
g for which
(cid:2)
F rg ,r
g is KDI-secure with respect to g). In this section we
attempt a constructive proof of the same fact, namely, a
deterministic transformation that takes a circuit that com-
putes g and produces a PRF that is KDI-secure with respect
to function g. We succeed to do so only for functions g that
−1(g(s)) is not too big).
are “well spread” (i.e., for each s, g
First try. We begin with a simple construction that at ﬁrst
glance looks as if it should work. Let f = {fs} be a pseudo-
random function with (n + 1)-bit inputs and n-bit outputs
and keys. Fix some function g : {0, 1}n → {0, 1}n, and
s } with n-bit inputs, outputs,
deﬁne a family F
and keys:
fs(1|x)
fs(0)
if x (cid:5)= g(s)
if x = g(s)
= {F
j
(g)
F
s
(x) =
(2)
(g)
(g)
Perhaps surprisingly, we show that this construction does
not always work:
Negative Example 2. There are functions g s.t. F (g)
from Eq. (2) is not KDI-secure with respect to {g}.
Proof. Deﬁne g(s) = fs(0). We show a KDI-attacker
A that distinguishes between F (g) and a random function.
The attacker A has input a = φ
(g) = φ(g(s)), it queries the
oracle φ on a to get b = φ(a), and outputs 1 if a = b and 0
otherwise.
(cid:2)
s
s
) then we have a = F (g)
When the φ-oracle is a real one (i.e., instantiated with
F (g)
(g(s)) = fs(0) = g(s), and
(g(s)) = fs(0), thus A
therefore also b = F (g)
outputs 1 with probability 1. On the other hand, if the φ
oracle is a random function then a is a random value and
b = φ(a) is an independent random value, hence a = b
happens only with small probability.
(a) = F (g)
s
s
The reason for this counter-example is that the attacker
is able to compute g(s) given access to F (g). Indeed, it is
not hard to show that when g(s) is unpredictable even given
access to F (g) then the construction from above is secure (a
proof is implicit in the proof of Lemma 1 below). Thus we
try to construct a PRF F (g) such that g(s) is unpredictable
(·) and then use it as above. (Clearly,
given access to F (g)
this is not possible if there is a single value of g(s) that
4Hereafter, we
treatment
(polynomial-size) computable functions g.
eﬃciently
limit
our
to
s
j
occurs with noticeable probability, but it does work as long
as g(s) has suﬃcient min-entropy.) In the long version [9]
we analyze the construction
fprﬁx(s)(1|x)
fprﬁx(s)(0)
if x (cid:5)= g(s)
if x = g(s)
F (g)
def=
s
(x)
(3)
where f : {0, 1}αn ×{0, 1}n → {0, 1}n is a standard pseudo-
random function family (for some constant α > 0), and
prﬁx(s) the ﬁrst αn bits of s. We show that if the distri-
bution on g(s) for a random s has min-entropy more than
αn + ω(log n) then the function F (g)
(x) from above is KDI-
secure with respect to g. Roughly, the reason is that since
prﬁx(s) has only αn bits then g(s) still has min-entropy
ω(log n) even conditioned on prﬁx(s). As the view of A
when interacting with F (g)
depends on s only via prﬁx(s),
then g(s) is unpredictable to A, and therefore F (g)
should
be secure.
s
s
s
Lemma 1. If PRF families exist, then there exist a trans-
formation T that takes any constant α > 0 and a descrip-
tion of an (eﬃciently computable) function g, and outputs a
description of a PRF family F (g), such that if the distribu-
tion g(s) has min-entropy at least αn + ω(log n) then F (g)
is KDI-secure PRF with respect to the singleton class {g}.
Randomized extension to any function g.
The construction from Eq. (3) can be extended (via ran-
domization!) to deal also with “low entropy” functions g by
replacing prﬁx(s) with a randomness extractor extr(s), i.e.,
(g,r)
F
s
(x) =
fextr (s)(1|x)
fextr (s)(0)
if x (cid:5)= g(s)
if x = g(s)
(4)
j
where f accepts (n + 1)-bit inputs and short keys (if needed,
such keys can be expanded into longer ones using a pseudo-
random generator applied to extr(s)).
As in the case of the scheme from Eq. (1), the intuition
is that if g is “low entropy” then extr(s) is close to uniform
even given g(s), and for “high-entropy” g(s) the reasoning
from the proof above still holds when replacing prﬁx(s) with
extr(s). These arguments can be extended to arbitrary func-
tions g as stated in Lemma 2 below. Note that the resulting
scheme is both randomized and “tailored” for each g, and
hence inferior to the construction in Section 4.2. On the
other hand, scheme (4) preserves invertibility, namely, if f
is a family of invertible pseudorandom permutations (over
n + 1 bits) then F
is a KDI-secure invertible pseudo-
random family mapping n bits into n + 1 bits. This fact is
used in an essential way in Section 6 to claim KDI-secure
encryption (cf. Theorem 4).
(g,r)
Lemma 2. If the family f is a secure PRF and ext is
a strong randomness extractor, then for every (eﬃciently
from Eq. (4) is a