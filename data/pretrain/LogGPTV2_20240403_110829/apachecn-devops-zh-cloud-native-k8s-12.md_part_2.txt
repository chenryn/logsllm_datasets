      caBundle: ${CA_PEM_B64}
```
让我们为我们的`MutatingWebhookConfiguration`挑选出 YAML。正如您所看到的，我们可以在这个配置中配置多个 webhook 尽管在这个例子中我们只做了一个。
对于每个网钩，我们设置`name`、`rules`和一个`configuration`。`name`只是网络钩子的标识符。`rules`允许我们精确地配置在哪些情况下 Kubernetes 应该向我们的准入控制发出请求。在这种情况下，我们已经将我们的网络钩子配置为每当类型为`pods`、`deployments`和`configmaps`的资源发生`CREATE`事件时触发。
最后，我们有`clientConfig`，在这里我们确切地指定了 Kubernetes 应该在哪里以及如何发出 webhook 请求。由于我们在 Kubernetes 上运行我们的定制服务器，除了在我们的服务器上命中的路径(这里`"/mutate"`是最佳实践)以及要与 HTTPS 终止证书进行比较的集群的证书颁发机构之外，我们还像前面的 YAML 那样指定了服务名称。如果您的自定义准入服务器在其他地方运行，还有其他可能的配置字段–如果需要，请查看文档。
一旦我们在 Kubernetes 中创建了`MutatingWebhookConfiguration`，就很容易测试验证了。我们所需要做的就是像平常一样创建一个 Pod、Deployment 或 ConfigMap，并根据我们服务器中的逻辑检查我们的请求是否被拒绝或打补丁。
现在让我们假设我们的服务器设置为拒绝任何名称包含字符串`deny-me`的 Pod。还设置为向`AdmissionReviewResponse`添加错误响应。
让我们按如下方式使用 Pod 规范:
拒绝 pod.yaml
```
apiVersion: v1
kind: Pod
metadata:
  name: my-pod-to-deny
spec:
  containers:
  - name: nginx
    image: nginx
```
现在，我们可以创建我们的 Pod 来检查准入控制器。我们可以使用以下命令:
```
kubectl create -f to-deny-pod.yaml
```
这将产生以下输出:
```
Error from server (InternalError): error when creating "to-deny-pod.yaml": Internal error occurred: admission webhook "my-custom-webhook-server.default.svc" denied the request: Pod name contains "to-deny"!
```
就这样！我们的自定义准入控制器已成功拒绝一个与我们在服务器中指定的条件不匹配的 Pod。对于打补丁的资源(不是拒绝，而是更改)，`kubectl`不会显示任何特殊响应。您需要获取有问题的资源来查看正在运行的补丁。
既然我们已经探索了自定义准入控制器，那么让我们看看强制实施集群安全实践的另一种方式——Pod 安全策略。
## 启用 Pod 安全策略
Pods 安全策略的基础是，它们允许集群管理员创建 Pods 必须遵循的规则，以便安排到节点上。从技术上讲，Pod 安全策略只是另一种类型的准入控制器。但是，这个特性得到了 Kubernetes 的官方支持，值得深入讨论，因为有很多选项可供选择。
Pod 安全策略可用于防止 Pods 以 root 用户身份运行、限制使用的端口和卷、限制权限升级等等。我们现在将回顾 Pod 安全策略功能的一个子集，但是要查看 Pod 安全策略配置类型的完整列表，请查看官方 PSP 文档，网址为[https://kubernetes . io/docs/concepts/policy/Pod-security-policy/](https://kubernetes.io/docs/concepts/policy/pod-security-policy/)。
最后，Kubernetes 还支持控制容器权限的低级原语，即*apparemor*、 *SELinux* 和 *Seccomp* 。这些配置不在本书的讨论范围内，但是它们对于高度安全的环境非常有用。
### 创建 Pod 安全策略的步骤
实施 Pod 安全策略有几个步骤:
1.  首先，必须启用 Pod 安全策略准入控制器。
2.  这将阻止在您的群集中创建所有 Pod，因为它需要匹配的 Pod 安全策略和角色才能创建 Pod。因此，您可能希望在启用准入控制器之前创建您的 Pod 安全策略和角色。
3.  启用准入控制器后，必须创建策略本身。
4.  然后，必须创建具有 Pod 安全策略访问权限的`Role`或`ClusterRole`对象。
5.  最后，该角色可以与**集群角色绑定**或**角色绑定**绑定到用户或服务`accountService`帐户，允许使用该服务帐户创建的 Pod 使用 Pod 安全策略可用的权限。
在某些情况下，您的集群上可能没有默认启用 Pod 安全策略准入控制器。让我们看看如何启用它。
### 启用 Pod 安全策略准入控制器
为了启用 PSP 准入控制器，`kube-apiserver`必须以指定准入控制器开始的标志开始。在托管 Kubernetes (EKS、AKS 和其他)上，PSP 准入控制器可能会默认启用，同时还会创建一个权限 Pod 安全策略供初始管理员用户使用。这可以防止 PSP 在新集群中创建 Pods 时出现任何问题。
如果您正在自我管理 Kubernetes，并且尚未启用 PSP 准入控制器，您可以通过使用以下标志重新启动`kube-apiserver` 组件来实现:
```
kube-apiserver --enable-admission-plugins=PodSecurityPolicy,ServiceAccount…
```
如果你的库本尼斯应用编程接口服务器是使用一个`systemd`文件运行的(就像跟随*库本尼斯:艰难之路*一样)，你应该更新那里的标志。通常，`systemd`文件放在`/etc/systemd/system/`文件夹中。
为了找出哪些许可插件已经启用，您可以运行以下命令:
```
kube-apiserver -h | grep enable-admission-plugins
```
此命令将显示一长串已启用的准入插件。例如，您将在输出中看到以下准入插件:
```
NamespaceLifecycle, LimitRanger, ServiceAccount…
```
现在我们确定 PSP 准入控制器已启用，我们实际上可以创建一个 PSP。
### 创建 PSP 资源
Pod 安全策略本身可以使用典型的 Kubernetes 资源 YAML 创建。这是一份 YAML 的权限 Pod 安全策略文件:
权限-psp.yaml
```
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: privileged-psp
  annotations:
    seccomp.security.alpha.kubernetes.io/allowedProfileNames: '*'
spec:
  privileged: true
  allowedCapabilities:
  - '*'
  volumes:
  - '*'
  hostNetwork: true
  hostPorts:
  - min: 2000
    max: 65535
  hostIPC: true
  hostPID: true
  allowPrivilegeEscalation: true
  runAsUser:
    rule: 'RunAsAny'
  supplementalGroups:
    rule: 'RunAsAny'
  fsGroup:
    rule: 'RunAsAny'
```
该 Pod 安全策略允许用户或服务帐户(通过**角色绑定**或**集群角色绑定**)创建具有权限功能的 Pod。例如，使用此`PodSecurityPolicy`的 Pod 将能够绑定到端口`2000` - `65535`上的主机网络，以任何用户身份运行，并绑定到任何卷类型。此外，我们还有一个关于`allowedProfileNames`的`seccomp`限制的注释—让您了解`Seccomp`和`AppArmor`注释如何与`PodSecurityPolicies`一起工作。
正如我们之前提到的，仅仅创建 PSP 没有任何作用。对于将要创建权限 Pod 的任何服务帐户或用户，我们需要通过**角色**和**角色绑定**(或`ClusterRole`和`ClusterRoleBinding`)授予他们访问 Pod 安全策略的权限。
为了创建一个可以访问这个 PSP 的`ClusterRole`，我们可以使用下面的 YAML:
Privileged-clusterrole.yaml
```
apiVersion: rbac.authorization.k8s.io
kind: ClusterRole
metadata:
  name: privileged-role
rules:
- apiGroups: ['policy']
  resources: ['podsecuritypolicies']
  verbs:     ['use']
  resourceNames:
  - privileged-psp
```
现在，我们可以将新创建的`ClusterRole`绑定到我们打算用来创建权限 Pods 的用户或服务帐户。让我们用一个`ClusterRoleBinding`来完成:
privileged-cluster role binding . YAML
```
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: privileged-crb
roleRef:
  kind: ClusterRole
  name: privileged-role
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: Group
  apiGroup: rbac.authorization.k8s.io
  name: system:authenticated
```
在我们的例子中，我们希望让集群中每个经过身份验证的用户创建权限 Pods，因此我们绑定到`system:authenticated`组。
现在，我们可能不希望我们的所有用户或 Pods 都享有权限。更现实的 Pod 安全政策对 Pod 的功能进行了限制。
让我们看一下有这些限制的 PSP 的一些例子 YAML:
非权限-psp.yaml
```
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: unprivileged-psp
spec:
  privileged: false
  allowPrivilegeEscalation: false
  volumes:
    - 'configMap'
    - 'emptyDir'
    - 'projected'
    - 'secret'
    - 'downwardAPI'
    - 'persistentVolumeClaim'
  hostNetwork: false
  hostIPC: false
  hostPID: false
  runAsUser:
    rule: 'MustRunAsNonRoot'
  supplementalGroups:
    rule: 'MustRunAs'
    ranges:
      - min: 1
        max: 65535
  fsGroup:
    rule: 'MustRunAs'
    ranges:
      - min: 1
        max: 65535
  readOnlyRootFilesystem: false
```
可以看出，这种 Pod 安全策略在对创建的 Pod 施加的限制方面有很大的不同。此策略下的任何 Pods 都不允许作为 root 用户运行或升级到 root 用户。它们对可以绑定到的卷类型也有限制(这一部分在前面的代码片段中已经突出显示了)，并且它们不能使用主机网络或直接绑定到主机端口。
在这个 YAML 中，`runAsUser`和`supplementalGroups`部分都控制可以运行或由容器添加的 Linux 用户标识和组标识，而`fsGroup`键控制可以由容器使用的文件系统组。