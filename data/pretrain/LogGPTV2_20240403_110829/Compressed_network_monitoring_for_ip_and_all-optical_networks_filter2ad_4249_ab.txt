lows. Let G = (V,E ) be the graph with vertex set,
V =
V (k) ,
(3)
τ[
k=1
!
which is the union of the paths of the network at each
timestep, and with edge set E such that:
E =
τ[
n“
, v(k+1)
E (k)
∪
v(k)
i
i
.
k=1
”o
S
i∈{1,...,np},k∈{1,...,τ−1}
k E (k),
In the edge set, the ﬁrst term,
is the union of
the edge sets for each individual timestep, as introduced
in the previous subsection. The second term contains time-
correlation edges, which connect the subsets V (k) of the ver-
tex set V together: an edge is present between a path at
timestep k and the same path at timestep k + 1. We keep
the weights already deﬁned in the previous section for the
edges between paths at the same timestep (spatial correla-
tion edges) and we only need to deﬁne the weights for the
inter-timestep edges.
With the a priori assumption that time correlation has
the same strength across the network, we assign a weight
of wt to each of these new edges (time correlation edges),
except for the edges between vertices of V (1) and V (2), and
V (τ−1) and V (τ ), which are assigned a weight of 2wt (for
balancing purposes). The speciﬁc value of wt depends on
the anticipated relative strengths of spatial and temporal
correlation. We use a value of 0.5 in the examples described
later in the paper, which reﬂects expectation of reasonably
strong correlation; it is equivalent to the anticipated spatial
correlation for paths that share half of their combined links.
np τ×npτ is then deﬁned as the
block matrix whose elements are equal to the weights deﬁned
above (Inp is the np × np identity matrix):
The weight matrix w ∈ R
D(1)
2wtInp
0
3777777775 .
(4)
2666666664
·· ·
. . .
. . .
0
...
w =
wtInp D(2)
. . .
. . .
···
0
...
0
wtInp
. . .
wtInp D(τ−1) wtInp
2wtInp D(τ )
0
0
Again, we perform Sinkhorn balancing on [w] in order to
obtain a doubly stochastic matrix D, which we use when
constructing a diﬀusion wavelet basis.
3.3 Link-level Representations
A special case of our framework arises when there is a
strictly linear relationship between path and link metrics.
A good example is mean delay; the delay on links that share
many routes is often strongly correlated because the same
traﬃc sources are generating backlog in queues. In this case,
it becomes valuable to formulate the problem in “link-space”.
In this formulation we have ys = AGBβ, where G is the
np × nl binary-valued routing matrix, B is an nl × nl diﬀu-
sion wavelet basis, and β is now a vector of nl coeﬃcients.
The task is still the estimation of y, and it should be em-
phasized that although the by-product of this formulation is
an estimate of x, this is not the goal.
In general, nl (cid:4) np so the link-space formulation sig-
niﬁcantly reduces the dimensionality of the problem. This
formulation also means that any solution automatically sat-
isﬁes the known relationships between path and link met-
rics.
In the path formulation outlined above, these rela-
tionships would have to be incorporated as constraints in
the (cid:2)1-minimization (1), making the optimization problem
signiﬁcantly more challenging. The derivation of a suitable
diﬀusion operator proceeds exactly as described for the path
case, but now the nodes in the graph are links in the phys-
ical network and the edges are weighted according to the
fraction of shared paths.
4. PATH SELECTION
So far, we have discussed why and how it is possible to
accurately estimate end-to-end metrics from a limited num-
ber of observations. However, we have not discussed how
to select which routes should be observed. This problem is
Algorithm 1 Path selection
Input: Matrix Cp
Number of paths to select ns
Output: Selection matrix A
1: Perform singular value decomposition (SVD) on Cp:
Cp = U SV T where S contains the singular values in
descending order.
2: Perform QR decomposition with column pivoting on the
ﬁrst ns columns of U : QR = U T
(1,...,ns)P T .
3: return A = P(1,...,ns), the matrix formed from the ﬁrst
ns columns of P .
challenging and the appropriate approach depends on the
measurement constraints or costs. We will examine two sce-
narios and propose heuristics. In the ﬁrst scenario, we con-
sider that the cost (or constraint) is the average number of
measurements made per timestep. In this scenario, we do
not constrain which paths are measured at each timestep.
Rather, the set of paths measured can change from timestep
to timestep.
In the second scenario, we consider the case
where the constraint is the number of monitoring devices
and we must decide where to place them in the network.
Each monitoring device can measure any incoming path on
its interface.
4.1 Constraint on Number of Measurements
First we consider the case where the only constraint is
on the total number of paths to be selected over a ﬁxed
number of timesteps. For this scenario, we adapt the path
selection technique presented by Chua et al. in [5] to include
our correlation model. The path selection procedure in [5]
strives to minimize the mean square of the prediction error of
a linear end-to-end delay estimator. The exact minimization
procedure is NP-complete (it amounts to the problem of
subset selection) and hence heuristics are needed.
Chua et al. propose a heuristic that consists of ﬁnding
the rows of the routing matrix G that approximate the span
of the ﬁrst ns left singular vectors of GCl, where Cl is a
non-singular matrix that satisﬁes Σl = ClC T
l . For example,
1/2
Cl = Σ
, and Σl is the covariance of x. Note that the
l
estimation methodology in [5] is restricted to the case where
path metrics are a linear combination of link-level perfor-
mance values. In this case we can write y = Gx, which leads
to the incorporation of a link-level covariance matrix in this
path selection procedure. In the case where this covariance
matrix is not known, reasonable results can be obtained by
setting Σl = I. An algorithm (see Alg. 1) that implements
this heuristic can be found in [13].
The intuition behind this heuristic is that most of the en-
ergy of the path metric signal should reside in the space
spanned by the ns left singular vectors of GC.
Identify-
ing a set of paths that approximately span this space is
thus a desirable goal. Here, we do not have access to the
link covariance matrix, but the diﬀusion operator provides
a model of the path-level covariance, Σp. We therefore set
Σp = Dτ (recall D is the diﬀusion operator and τ the num-
ber of timesteps used to account for time-correlation). We
then strive to identify a subset of rows of G that approx-
imately spans the same space as the ﬁrst ns left singular
1/2
vectors of Cp = Σ
. In the case of a link-level representa-
p
tion, we set Σl = Dτ and use Cp = GCl, with Cl deﬁned as
above. Path selection is performed using Algorithm 1.
Algorithm 2 Monitor location selection
routing matrix G, covariance matrix Cp
Input:
number of monitors to select M
Output: selection matrix A, monitor set Es.
1: M(cid:3)
2: Perform SVD on Cp: Cp = U SV T where S contains the
= M .
singular values in descending order.
3: repeat
4:
5:
6:
7:
8:
columns of U : QR = U T
(1,...,M(cid:2))P T .
Perform QR decomposition with column pivoting on
the ﬁrst M(cid:3)
Let P (cid:3)
M(cid:3)
Es = ∅.
for i=1 . . . M’ do
= P(1,...,M(cid:2)) be the matrix formed of the ﬁrst
columns of P .
.
Interpret P (cid:3)
as a routing matrix and determine the
last link (cid:2) on the path described by the ith row of
P (cid:3)
Es = Es ∪ {(cid:2)}.
end for
= M(cid:3)
9:
10:
11: M(cid:3)
+ 1.
12: until |Es| = M .
13: return A = P(1,...,M ), the matrix formed of the ﬁrst M
columns of P .
4.2 Constraint on Number of Monitors
In this scenario, there is a more restrictive constraint. We
have a limited number of monitoring devices, M , and we
must choose where to place them. Our intuitive goal is the
same as for the previous scenario: to approximately span the
space where most signal energy is expected to lie. The same
algorithm is applicable, but there is not a direct mapping
from ns to M , because the number of monitors required to
measure ns paths varies according to how many of the paths
terminate at the same interface. We therefore iterate, run-
ning Algorithm 1 repeatedly for increasing values of ns until
M monitors are used. The resultant procedure is described
by Algorithm 2. The output of the algorithm is a selection
matrix A and a set of monitoring locations Es.
5. MEAN END-TO-END DELAYS
To illustrate the estimation technique presented in this pa-
per, we use experimental delay data collected on the Abilene
network depicted in Fig. 1. The network consists of 11 nodes
and 30 unidirectional links. Mean end-to-end delay measure-
ments are collected between every pair of nodes over 400
ﬁve-minute intervals. There are thus 121 path metrics to be
estimated at each time step. Owing to the large scale of the
Abilene network, the experimental Abilene end-to-end de-
lays are dominated by the propagation delays; those delays
can be determined accurately using ﬁber maps. Therefore,
we apply our estimation framework to (end-to-end) queuing
delays, which are more variable. To obtain the end-to-end
queuing delays from the end-to-end delays, we assume that
the propagation delay for any path is the minimum end-to-
end delay over the duration of the experiment for this path
and subtract oﬀ the minimum for each path. In the remain-
der of this section, we designate by “end-to-end delay” the
end-to-end queuing delays.
Fig. 2(a) provides a visualization of one of the wavelet
basis vectors, which allows us to assess how the energy of
wavelets is spatially distributed.
In this ﬁgure, the size
26
30
25
28
29
21
24
22
19
23
1
3
10
4
2
5
8
11
6
7
18
20
12
16
15
27
17
14
9
13
Figure 1: Abilene backbone: 11 nodes, 30 (unidi-
rectional) links. The numbers are link identiﬁers.
of each vertex of G is scaled according to the magnitude
of corresponding wavelet coeﬃcient. Visualization (vertex
layout) of the graph is achieved through the application of
Isomap [19], where the distances between vertices is set to
the inverse of the weight matrix. The ﬁgure provides a clear
depiction of the clustering induced by the routing matrix.
There are two primary clusters of vertices (on the left and
the right) corresponding approximately to links appearing
primarily in east-west and west-east paths respectively. Ad-
ditionally, nodes 14 and 17 (corresponding to links 14 and
17 in Figure 1) are separate from the clusters. These are
two of the more “vertical” links in the network which are
used in both east-to-west and west-to-east paths across the
network.
Such graphical representation of wavelet basis vectors can
be extended to the multi-timestep case. In the multi-timestep
case, the time dimension is represented using a third dimen-
sion, as is shown in Fig. 2(b) for 8 timesteps. Vertical slices
of the plot represent per-timestep network state while the
sequence in time is represented over the labeled axis. Again,
such visualization allows one to study where wavelet energy
lies in space and time. In this case for example, the wavelet
energy is concentrated on four links in the network most of
the time.
We now verify the compressibility of the data. Fig. 3
shows the delays for all links and the absolute values of the
diﬀusion wavelet coeﬃcients, over τ = 1 (top panel) and
τ = 8 (bottom panel) timesteps, sorted in descending order.
The decay of the delays expressed in the original basis is
very slow and exhibits a heavy tail. In the diﬀusion wavelet
basis however, the link delays exhibit a power law-like decay,
as can be seen by comparison to the reference functions k (cid:10)→
αk−p. Moreover, the coeﬃcients decay at a much faster rate
in the 8-timestep case than in the 1-timestep case, indicating
the value of incorporating time-correlation.
We have seen how, in the diﬀusion wavelet construction
step (Section 2), deeper scales correspond to ﬁner granu-
larity. In the Fourier domain, deeper scales correspond to
higher frequencies. Queuing delays are relatively low fre-
quency signals, especially in the time dimension. During
the nonlinear estimation step (1), estimated coeﬃcients cor-
responding to high frequencies should be encouraged to be
small; indeed, in case of estimation errors (unavoidable when
the number of observations is low compared to the total
8
22
18
14
5
1
19
25
12
4
21
13
27
30
7
28
23
3
2
10
16
6
26
9
15
24
17
20
29
11
(a) Single timestep graph.