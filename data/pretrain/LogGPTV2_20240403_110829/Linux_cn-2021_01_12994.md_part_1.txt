---
author: Matthew Broberg
category: 软件开发
comments_data: []
count:
  commentnum: 0
  favtimes: 1
  likes: 0
  sharetimes: 0
  viewnum: 3873
date: '2021-01-08 17:12:05'
editorchoice: false
excerpt: 想学习 Git？看看这个最重要的术语和命令的快速总结。
fromurl: https://opensource.com/article/19/2/git-terminology
id: 12994
islctt: true
largepic: /data/attachment/album/202101/08/171156gu9l8dvulxmxom6d.jpg
permalink: /article-12994-1.html
pic: /data/attachment/album/202101/08/171156gu9l8dvulxmxom6d.jpg.thumb.jpg
related: []
reviewer: wxy
selector: lujun9972
summary: 想学习 Git？看看这个最重要的术语和命令的快速总结。
tags:
- Git
thumb: false
title: Git 入门：术语基础
titlepic: true
translator: wxy
updated: '2021-01-08 17:12:05'
---
> 
> 想学习 Git？看看这个最重要的术语和命令的快速总结。
> 
> 
> 
![](/data/attachment/album/202101/08/171156gu9l8dvulxmxom6d.jpg "Digital hand surrounding by objects, bike, light bulb, graphs")
如今，对于任何希望跟踪他们的变化的人来说，版本控制是一个重要的工具。它对程序员、系统管理员和 网站可靠性工程师   site reliability engineers （SRE）都特别有用。确保可以从错误中恢复到已知的良好状态是一个巨大的胜利，比以前给复制的文件添加 `.old` 后缀的策略更友好。
但学习 Git 这件事往往被告诉大家“投身开源”的好心同行们过度简化了。在你还不明白之前，就有人要你给一个从 上游   upstream   变基   rebase 的 拉取请求   pull request （PR）或 合并请求   merge request （MR），然后他们才能从你的 远程版本库   remote 合并 —— 而且一定会删除 合并提交   merge commits 。无论你想给开源项目做出什么好的贡献，当你看到这些你不认识的单词时，都会觉得难以融入。
![Git 速查表封面图](/data/attachment/album/202101/08/171207av0lvu3z688ubg8l.jpg "Git Cheat Sheet cover image")
* [下载](https://opensource.com/downloads/cheat-sheet-git) 我们的 Git 速查表。
如果你有一两个月的时间和足够的好奇心，[Git SCM](https://git-scm.com/about) 是你需要学习所有术语的权威来源。但如果你正在寻找来自实践的总结，请继续阅读。
### 提交就是提醒
对我来说，Git 最难理解的部分是 Git 最简单的概念：一个 提交   commit 就是一个内容的集合，包括一个关于描述的信息，以及之前的提交。没有固有的代码发布策略，甚至没有内置的明确建议。这个内容甚至不一定是代码 —— 可以是*任何*你想添加到版本库的东西。 提交消息   commit message 会对这些内容进行注释。
我喜欢把提交信息看作是给未来的自己的礼物：它可能会提到你编辑的文件，但更重要的是它提醒你修改这些文件的意图。添加更多关于你为什么编辑这些内容的信息，可以帮助任何使用你的版本库的人，即使那个人是你。
### origin/master 在哪里？
要知道自己在 Git 项目中的位置，首先把它想成一棵树。所有 Git 项目都有一个根目录，类似于文件系统的根目录。所有的提交都是这个根目录下的分支。这样一来，分支只是一个提交的指针。按照惯例，`master` 是根目录下默认的分支名称。（LCTT 译注：世界变得快，原文发表于 2019 年，而现在有些地方开始用 `main` 替代这个名字。）
由于 Git 是一个分布式的版本控制系统，同一个代码库分布在多个地方，所以人们经常用 版本库   repository 这个词来表示同一个项目的所有副本。（LCTT 译注：“repository” 英文原意是仓库、存储库，在计算机环境中，常用于版本控制、软件分发等方面，有时候会统一译作“仓库”、“存储库”。但我们认为，应该根据不同语境采用更有指向性的译法。在 Git 等版本控制语境中，采用“版本库”；在软件分发方面，采用“软件库”；其它泛指或不确定的语境中，可采用“仓库”、“存储库”译法。）有 本地版本库   local repository ，这是你编辑代码的地方（稍后会有更多的介绍），还有 远程版本库   remote repository ，这是你完成后想把代码发送到的地方。远程版本库可以在任何地方，甚至在你的本地版本库所在的同一台计算机上，但它们通常托管在 GitLab 或 GitHub 等版本库服务上。
### 我在哪里？
虽然不是官方的卖点，但迷路也是 Git 仓库的“乐趣”之一。你可以通过这套可靠的命令来找到自己的方向：
* `git branch` —— 找到你所在的分支。
* `git log` —— 查看你正在进行的提交。
* `git status` —— 查看自上次提交以来你所做的编辑。
* `git remote` —— 查看你正在跟踪的远程仓库。