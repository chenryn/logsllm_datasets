title:On Random-Inspection-Based Intrusion Detection
author:Simon P. Chung and
Aloysius K. Mok
On Random-Inspection-Based
Intrusion Detection
Simon P. Chung and Aloysius K. Mok(cid:1)
University of Texas at Austin, Austin TX 78712, USA
Department of Computer Sciences,
{phchung, mok}@cs.utexas.edu
Abstract. Monitoring at the system-call-level interface has been an im-
portant tool in intrusion detection. In this paper, we identify the pre-
dictable nature of this monitoring mechanism as one root cause that
makes system-call-based intrusion detection systems vulnerable to
mimicry attacks. We propose random inspection as a complementary
monitoring mechanism to overcome this weakness. We demonstrate that
random-inspection-based intrusion detection is
inherently eﬀective
against mimicry attacks targeted at system-call-based systems. Further-
more, random-inspection-based intrusion detection systems are also very
strong stand-alone IDS systems. Our proposed approach is particularly
suitable for implementation on the Windows operating system that is
known to pose various implementation diﬃculties for system-call-based
systems. To demonstrate the usefulness of random inspection, we have
built a working prototype tool: the WindRain IDS. WindRain detects
code injection attacks based on information collected at random-
inspection points with acceptably low overhead. Our experiments show
that WindRain is very eﬀective in detecting several popular attacks
against Windows. The performance overhead of WindRain compares fa-
vorably to many other intrusion detection systems.
Keywords: Mimicry attacks, intrusion detection, computer security,
random inspection.
1 Introduction
Ever since they were ﬁrst introduced in [9, 15], system-call-based anomaly-
detection systems have been considered to be an eﬀective approach to achieve
intrusion detection in computer security, but there are also weaknesses in this
approach. In particular, system-call-based anomaly-detection systems have been
found to be susceptible to various mimicry attacks. Examples of these attacks
can be found in [31, 32, 35]. Subsequently, a lot of work has been done to make
system-call-based intrusion detection systems more resilent to mimicry attacks.
(cid:1) The research reported here is supported partially by a grant from the Oﬃce of Naval
Research under contract number N00014-03-1-0705.
A. Valdes and D. Zamboni (Eds.): RAID 2005, LNCS 3858, pp. 165–184, 2006.
c(cid:1) Springer-Verlag Berlin Heidelberg 2006
166
S.P. Chung and A.K. Mok
However, system-called-based IDS are still vulnerable to diﬀerent evasion tech-
niques for which countermeasures incur expensive run-time overheads. In this
paper, we propose an approach for intrusion detection that is based on random
inspection of application code execution. Our approach is complementary to
system-call-based anomaly-detection in that evasion techniques that are eﬀec-
tive against system-call-based detection are inherently vulnerable to detection
by our approach. Our approach is motivated by the following observations:
1. Vulnerability to mimicry attacks can be attributed to the predictable nature
of the monitoring mechanism: system-call-interface monitoring. Knowledge
of when/where checking will occur puts the attackers in a very favorable
position to launch mimicry attacks because they can “cover up” to make
their behavior appear “normal” before making system calls. Furthermore,
this monitoring mechanism does not preclude the attackers from exploiting
execution with impunity in user space. For example, the “null calls” inserted
by [13] can be found by an attacker who can then make those null calls
accordingly to appear “normal”.
2. Mimicry attacks usually take much longer than simple attacks that achieve
their goals directly. To avoid detection, mimicry attacks have to spend a
lot of extra eﬀort in mimicking the normal behavior. In other word, the
deployment of system-call-based IDS has the eﬀect of signiﬁcantly increasing
the complexity and length of successful attacks. The example given in [35]
clearly illustrates this point; in order to evade a very primitive system like
pH [30], a simple attack of 15 system-calls has to be transformed into one
with more than a hundred system calls. This seems to be unavoidable for
any evasion to be successful.
Based on these two observations, we propose a diﬀerent monitoring mech-
anism: random inspection. With random-inspection-based intrusion detection,
we stop the execution of the monitored program at random points and observe
its behavior. Based on the data collected at these random-inspection points, we
determine whether an intrusion is in progress. Two major properties of random-
inspection-based IDS are as follow:
1. The monitoring mechanism used by random-inspection-based IDS are less
predictable to the attackers inasmuch as they cannot predict when/where a
random inspection will occur, thus making it hard for mimicry attacks to
evade.
2. Random-inspection-based IDS are in general more eﬀective against long at-
tacks. As the attack length increases, we can expect more inspections to
occur when the attack is in progress. This means more data collected about
the attack, and higher detection accuracy.
These properties make random-inspection-based IDS a strong complement
to system-call-based IDS. In particular, the two types of IDS together present
the attackers with a dilemma: in order to evade detection by system-call-based
systems, the attackers will need to “mimic” normal behavior. This will signiﬁ-
cantly increas the length of the attacks. On the other hand, to avoid detection
On Random-Inspection-Based Intrusion Detection
167
by random-inspection-based systems, the attackers should keep their attacks as
short as possible. As a result, when random-inspection-based systems are used in
conjunction with system-call-based systems, it is very diﬃcult (if not impossible)
for the attacks to evade detection.
The eﬀectiveness against long attacks also opens up the possibility of boosting
random-inspection-based IDS with a new type of obfuscation techniques. Tradi-
tional obfuscation techniques as exempliﬁed in [1, 2, 18] are designed to thwart
attacks directly by making them unportable among diﬀerent machines. On the
other hand, obfuscation techniques designed to complement random-inspection-
based systems will not have to stop all attacks. Techniques that create an un-
familiar (but still analyzable) environment will serve the purpose. In such an
environment, extensive analysis will be needed for the attacker to achieve any-
thing “interesting”. This extensive analysis will signiﬁcantly increase the length
and complexity of attacks, which in turn makes them very visible to our random-
inspection-based system. In addition to making attacks more visible and thus im-
proving the detection rate, these new obfuscation techniques can also help reduce
the performance overhead of random-inspection-based systems. We will elabo-
rate on this point in Sect. 5.3. In fact, Windows is by itself a very “obfuscated”
system to the attackers; we shall explain why the Windows environment makes
attacks inevitably long in Sect. 4. This property makes Windows an especially
suitable platform for our random-inspection-based IDS. We emphasize, however,
that the applicability of our approach is not limited to Windows. We can apply
other obfuscation techniques for machines running other operating systems.
Finally, to demonstrate the usefulness of random-inspection-based IDS, we
have built a working prototype: the WindRain (WINDows RAndom INspection)
system. The WindRain system focuses on code injection attacks on Windows
systems. For this prototype, we adopt a very simple approach that checks the
PC values at the inspection points and determines if the observed PC value is
in a code region or a data region. If what is supposedly data is being executed,
WindRain will mark it as an intrusion. Because of the way it utilizes collected PC
values, WindRain is currently limited to code injection attacks. It cannot detect
existing code attacks. However, we emphasize that this is only a limitation of
the WindRain prototype and not a limitation to the general random-inspection
approach we propose. WindRain is a very simple proof-of-concept system, and
is not designed to show all the potentials of random-inspection-based intrusion
detection. We stress that the PC value is not the only piece of information that
an IDS can utilize at random-inspection points.
Our experiments show that WindRain is very eﬀective against some “fa-
mous” code injection attacks against Windows. We have tested WindRain on
MSBlast, Welchia, Sasser, SQLSlammer and Code Red, and all attacks are de-
tected. As for false positive rate, we found that WindRain works well with most
of the programs tested without generating ANY false alarm. In terms of per-
formance, WindRain has low runtime overhead and allows for tradeoﬀs. Based
on these results, we believe WindRain is a very strong stand-alone IDS in addi-
tion to being an excellent complement to system-call-based systems. Finally, our
168
S.P. Chung and A.K. Mok
prototype system also demonstrates another advantage of random-inspection-
based IDS: it is easier to implement on Windows systems. The proprietary
nature of the Windows kernel (with an undocumented interface that changes
over diﬀerent Windows versions, according to [29]) tends to make system-call
interposition diﬃcult. The extensive use of dlls in Windows further complicates
the implementation of system-call-based systems on Windows, since most of the
current systems do not work well with dlls.
2 Related Work
The idea of anomaly detection was ﬁrst proposed by [7] in the 1980’s. At that
time, the only known mechanism for monitoring the behavior of processes is the
audit-log. The kernel and other system components are responsible for moni-
toring process behavior and make this result available in audit-logs. The IDS
will then read the audit-log and determine whether an intrusion is observed
based on what is read. A new monitoring mechanism only came on the scene
when [9, 15] proposed system-call-based anomaly detection. By using system-call
traces for intrusion detection, an alternative monitoring mechansim, namely the
monitoring of the system-call interface is implicitly introduced. Another major
contribution of [9, 15] is the introduction of black-box-proﬁling technique. This
is a technique that allows the normal behavior of a process to be proﬁled by just
observing its normal execution. The process is treated like a black box since the
availability of the underlying code being executed is not necessary. With this
normal proﬁle, we can check the monitored behavior of a process and identify
any deviation from the proﬁle as an intrusion.
Due to the richness and timeliness of the information available at the system-
call interface, system-call-based anomaly detection has become a mainstream
approach in intrusion detection. A lot of work has been done in enhancing
system-call-based detection [20-22, 17, 25, 27, 37]; most of them focus on the
proﬁling technique. At the same time, black-box proﬁling for the traditional
audit-log monitoring mechanism has also received a lot of attention [4, 5, 12, 24,
38]. Despite all the work done in enhancing both system-call-based and audit-log
based anomaly detection, the underlying monitoring mechanisms have remained
largely the same. Monitoring at the system-call interface and monitoring through
the system audit log facility are still the two mainstream monitoring mechanisms.
There are some other monitoring mechanisms proposed (implicitly with the use
of new observable behavior for anomaly detection, such as [3, 16, 39]), but none
of these is as general as the two traditional approaches.
On the other hand, a lot of studies [31, 32, 35] have been done to ﬁnd out the lim-
itations and weaknesses of these system-call-based IDS. A lot of evasion strategies
for avoiding detection have been identiﬁed. [35] presents a systematic analysis of
these evasion strategies and introduces the notion of mimicry attacks. Afterwards,
a lot of work has been done to overcome the weaknesses identiﬁed. The major
focus of these approaches is to improve the accuracy of the proﬁle for normal
process behavior used for anomaly detection. With an inaccurate proﬁle, the IDS
On Random-Inspection-Based Intrusion Detection
169
has to be more tolerant to behavior that deviates from that predicted by the pro-
ﬁle. Otherwise, excessive false positive will result from the misprediction of nor-
mal, valid behavior. Unfortunately, this tolerance can be exploited to the attacker’s
advantage. With a more accurate proﬁle, the IDS can be stricter in its enforcement
and mark any slight deviation from the normal proﬁle as an intrusion.
Among the work done in this direction, the work in [36] is one of the most
exemplary. [36] ﬁrst proposed the white-box-proﬁling technique. Instead of treat-
ing the process being proﬁled as a black box, we can build the proﬁle based on
analysis of the corresponding program. They have proposed several techniques
for white-box proﬁling, varying in the accuracy of the proﬁle, as well as the ef-
ﬁciency of run time monitoring. If the analysis is done correctly, white-box pro-
ﬁling guarantees zero false positive. As a result, we can avoid the false-positive-
false-negative tradeoﬀ mentioned above. However, high proﬁle accuracy comes at
the cost of higher complexity in runtime monitoring. Some of the most accurate
proﬁling techniques proposed in [36] make it extremely diﬃcult for the attackers
to evade detection. Unfortunately, the monitoring overhead based on these pro-
ﬁles is likely to be high, owing to the nondeterministic nature inherent in proﬁles
generated by program analysis. In general, monitoring in this way has extremely
high complexity, and is so slow that it is impractical for monitoring in real time.
Requiring the availability of source code is another major drawback of this work.
This makes it impossible to apply their techniques to commodity software.
Some work [8, 13, 14, 23, 40] has been done in overcoming these two draw-
backs. To tackle the problem of high monitoring overhead, some tried to opti-
mize the proﬁle generated. There are also proposals for the monitoring of other
process characteristics that allows the diﬀerentiation of states that are seemingly
the same. Some other works attempt to instrument the corresponding program
so that it will report the needed context information during execution time. The
problem of unavailability of source code is to be solved by binary code analysis
and binary code instrumentation. Also, as is pointed out in [35], both input ar-
guments and return values of system-calls are ignored in many system-call-based
anomaly detection systems. Eﬀorts to utilize the input and output of system-calls
in anomaly detection are seen in [21, 22, 13, 14].
In addition to improving both proﬁle accuracy and monitoring eﬃciency,
many of these works propose new kinds of inputs for anomaly detection (e.g.,
return address, call stack information). Many of these new types of inputs are
much harder to imitate by the attackers (as compared to system-call traces).
This will also make the IDS built more resilent to mimicry attacks.
In some sense, WindRain, our prototype random-inspect-based system, is
also like a speciﬁcation-based intrusion detection system [28, 34]. The diﬀerence
between WindRain and a speciﬁcation-based system is that on WindRain, we
have only speciﬁed one rule to govern the behavior of the entire system. On the
other hand, for speciﬁcation-based systems, a very detailed rule is devised for
each individual process.
Two other related areas of work are instruction-set randomization [1, 18] and
Program Shepherding [19]. One can regard our WindRain system as a prob-
170
S.P. Chung and A.K. Mok
abilistic implementation of some Program Shepherding policies, targeting the
same attacks as [1, 18]. The main advantage of WindRain over both instruction-
set randomization and Program Shepherding is its smaller runtime impact; and
WindRain is by default a system-wide protection mechanism. As a result, we
believe that protection provided by WindRain is stronger than the by-process
protection by Program Shepherding.
As mentioned before, research approaches that use obfuscation/diversiﬁcation
techniques as a means of defense are closely related to our work. The idea of using
diversity in computer systems as a defensive measure is proposed in [6, 10]. The
idea is demonstrated in the instruction-set-randomization systems [1, 18] and the