---
title: Vuetify
date: 20220418
author: Lyz
---
[Vuetify](https://vuetifyjs.com/en/) is a Vue UI Library with beautifully
handcrafted Material Components.
# [Install](https://next.vuetifyjs.com/en/getting-started/installation/#installation)
First you need `vue-cli`, install it with:
```bash
sudo npm install -g @vue/cli
```
Then run:
```bash
vue add vuetify
```
If you're using [Vite](vite.md) select `Vite Preview (Vuetify 3 + Vite)`.
# Usage
## [Flex](https://vuetifyjs.com/en/styles/flex/)
Control the layout of flex containers with alignment, justification and more
with responsive flexbox utilities.
!!! note
        "I suggest you use this page only as a reference, if it's the first time
        you see this content, it's better to see it at the
        [source](https://vuetifyjs.com/en/styles/flex) as you can see Flex in
        action at the same time you read, which makes it much more easy to
        understand."
Using `display` utilities you can turn any element into a flexbox container
transforming direct children elements into flex items. Using additional flex
property utilities, you can customize their interaction even further.
You can also customize flex utilities to apply based upon various breakpoints.
* `.d-flex`
* `.d-inline-flex`
* `.d-sm-flex`
* `.d-sm-inline-flex`
* `.d-md-flex`
* `.d-md-inline-flex`
* `.d-lg-flex`
* `.d-lg-inline-flex`
* `.d-xl-flex`
* `.d-xl-inline-flex`
You define the attributes inside the `class` of the Vuetify object. For example:
```html
```
### [Display breakpoints](https://vuetifyjs.com/en/features/breakpoints/)
With Vuetify you can control various aspects of your application based upon the
window size.
| Device      | Code | Type                   | Range                |
| ---         | ---  | ---                    | ---                  |
| Extra small | xs   | Small to large phone   | `    1904px*`          |
The breakpoint service is a programmatic way of accessing viewport information
within components. It exposes a number of properties on the `$vuetify` object that
can be used to control aspects of your application based upon the viewport size.
The `name` property correlates to the currently active breakpoint; e.g. xs, sm,
md, lg, xl.
In the following snippet, we use a switch statement and the current breakpoint
name to modify the `height` property of the `v-card` component:
```html
    ...
```
The following is the public signature for the breakpoint service:
```javascript
{
  // Breakpoints
  xs: boolean
  sm: boolean
  md: boolean
  lg: boolean
  xl: boolean
  // Conditionals
  xsOnly: boolean
  smOnly: boolean
  smAndDown: boolean
  smAndUp: boolean
  mdOnly: boolean
  mdAndDown: boolean
  mdAndUp: boolean
  lgOnly: boolean
  lgAndDown: boolean
  lgAndUp: boolean
  xlOnly: boolean
  // true if screen width ` For example to log the current viewport width
to the console once the component fires the mounted lifecycle hook you can use:
```html
```
### [Flex direction](https://vuetifyjs.com/en/styles/flex/#flex-direction)
By default, `d-flex` applies `flex-direction: row` and can generally be omitted.
The `flex-column` and `flex-column-reverse` utility classes can be used to change
the orientation of the flexbox container.
There are also responsive variations for flex-direction.
* `.flex-row`
* `.flex-row-reverse`
* `.flex-column`
* `.flex-column-reverse`
* `.flex-sm-row`
* `.flex-sm-row-reverse`
* `.flex-sm-column`
* `.flex-sm-column-reverse`
* `.flex-md-row`
* `.flex-md-row-reverse`
* `.flex-md-column`
* `.flex-md-column-reverse`
* `.flex-lg-row`
* `.flex-lg-row-reverse`
* `.flex-lg-column`
* `.flex-lg-column-reverse`
* `.flex-xl-row`
* `.flex-xl-row-reverse`
* `.flex-xl-column`
* `.flex-xl-column-reverse`
### [Flex justify](https://vuetifyjs.com/en/styles/flex/#flex-justify)
The `justify-content` flex setting can be changed using the flex justify
classes. This by default will modify the flexbox items on the *x-axis* but is
reversed when using `flex-direction: column`, modifying the *y-axis*. Choose
from:
* `start` (browser default): Everything together on the left.
* `end`: Everything together on the right.
* `center`: Everything together on the center.
* `space-between`: First item on the top left, second on the center, third at
    the end, with space between the items.
* `space-around`: Like `space-between` but with space on the top left and right
    too.
For example:
```html
```
There are also responsive variations for `justify-content`.
* `.justify-start`
* `.justify-end`
* `.justify-center`
* `.justify-space-between`
* `.justify-space-around`
* `.justify-sm-start`
* `.justify-sm-end`
* `.justify-sm-center`
* `.justify-sm-space-between`
* `.justify-sm-space-around`
* `.justify-md-start`
* `.justify-md-end`
* `.justify-md-center`
* `.justify-md-space-between`
* `.justify-md-space-around`
* `.justify-lg-start`
* `.justify-lg-end`
* `.justify-lg-center`
* `.justify-lg-space-between`
* `.justify-lg-space-around`
* `.justify-xl-start`
* `.justify-xl-end`
* `.justify-xl-center`
* `.justify-xl-space-between`
* `.justify-xl-space-around`
### [Flex align](https://vuetifyjs.com/en/styles/flex/#flex-align)
The `align-items` flex setting can be changed using the flex align
classes. This by default will modify the flexbox items on the *y-axis* but is
reversed when using `flex-direction: column`, modifying the *x-axis*. Choose
from:
* `start`: Everything together on the top.
* `end`: Everything together on the bottom.
* `center`: Everything together on the center.
* `baseline`: (I don't understand this one).
* `align-stretch`: Align content to the top but extend the container to the
    bottom.
For example:
```html
```
There are also responsive variations for `align-items`.
* `.align-start`
* `.align-end`
* `.align-center`
* `.align-baseline`
* `.align-stretch`
* `.align-sm-start`
* `.align-sm-end`
* `.align-sm-center`
* `.align-sm-baseline`
* `.align-sm-stretch`
* `.align-md-start`
* `.align-md-end`
* `.align-md-center`
* `.align-md-baseline`
* `.align-md-stretch`
* `.align-lg-start`
* `.align-lg-end`
* `.align-lg-center`
* `.align-lg-baseline`
* `.align-lg-stretch`
* `.align-xl-start`
* `.align-xl-end`
* `.align-xl-center`
* `.align-xl-baseline`
* `.align-xl-stretch`
The `align-self` attribute works like `align` but for a single element instead
of all the children.
### [Margins](https://vuetifyjs.com/en/styles/flex/#auto-margins)
You can define the margins you want with:
* `ma-2`: 2 points in all directions.
* `mb-2`: 2 points of margin on bottom.
* `mt-2`: 2 points of margin on top.
* `mr-2`: 2 points of margin on right.
* `ml-2`: 2 points of margin on left.
If instead of a number you use `auto` it will fill it till the end of the
container.
To center things around, you can use `mx-auto` to center in the X axis and
`my-auto` for the Y axis.
If you are using a `flex-column` and you want to put an element to the bottom,
you'll use `mt-auto` so that the space filled on top of the element is filled
automatically.
### [Flex grow and shrink](https://vuetifyjs.com/en/styles/flex/#flex-grow-and-shrink)
Vuetify has helper classes for applying grow and shrink manually. These can be
applied by adding the helper class in the format `flex-{condition}-{value}`, where
condition can be either `grow` or `shrink` and value can be either `0` or `1`. The
condition `grow` will permit an element to grow to fill available space, whereas
`shrink` will permit an element to shrink down to only the space needs for its
contents. However, this will only happen if the element must shrink to fit their
container such as a container resize or being effected by a `flex-grow-1`. The
value `0` will prevent the condition from occurring whereas `1` will permit the
condition. The following classes are available:
* `flex-grow-0`
* `flex-grow-1`
* `flex-shrink-0`
* `flex-shrink-1`
For example:
```html
          I'm 2 column wide
          I'm 1 column wide and I grow to take all the space
          I'm 5 column wide and I shrink if there's not enough space