An ACE Up the Sleeve 
Designing Active Directory DACL Backdoors
Andy Robbins and Will Schroeder
SpecterOps
@_wald0
▪ ...
▪ Job: Adversary Resilience Lead at  
SpecterOps
▪ Co-founder/developer: BloodHound
▪ Trainer: BlackHat 2016
▪ Presenter: DEF CON, DerbyCon, ekoparty, 
Paranoia, ISSA Intl, ISC2 World Congress, 
various Security BSides
▪ Other: ask me about ACH
@harmj0y
▪ Job: Offensive Engineer at SpecterOps
▪ Co-founder/developer: Veil-Framework, 
Empire/EmPyre, PowerView/PowerUp, 
BloodHound, KeeThief
▪ Trainer: BlackHat 2014-2016
▪ Presenter: DEF CON, DerbyCon, ShmooCon, 
Troopers, BlueHat Israel, various BSides
▪ Other: PowerSploit developer and Microsoft 
PowerShell MVP
tl;dr
▪ DACL/ACE Background
▪ Enumeration of AD DACLs
▪ DACL Misconfiguration and Abuse
▪ Analysis with BloodHound
▪ Designing ACL Based Backdoors
▪ Case Studies and Demos
▪ Defenses
Disclaimer
▪ There is no exploit/CVE/whatnot here, just 
ways to purposely implement Active Directory 
DACL misconfigurations
▪ These backdoors are post-elevation 
techniques that require some type of 
elevated access to the objects you’re 
manipulating
Why Care?
▪
It’s often difficult to determine whether a specific 
AD DACL misconfiguration was set maliciously or 
configured by accident
▪
These changes also have a minimal forensic 
footprint and often survive OS and domain 
functional level upgrades
□
This makes them a great chance for subtle, long-term 
domain persistence!
▪
These may have been in your environment for 
YEARS!
“As an offensive researcher, 
if you can dream it, 
someone has likely already 
done it...and that someone 
isn’t the kind of person who 
speaks at security cons”
Matt Graeber
“Abusing Windows Management Instrumentation 
(WMI) to Build a Persistent, Asynchronous, and 
Fileless Backdoor” - BlackHat 2015
Background
From ACLs to ACEs
1.
https://www.sstic.org/2014/presentation/chemins_de_controle_active_directory/ 
Previous Work
Previous Work
https://www.sstic.org/2014/presentation/chemins_de_controle_active_directory/ 
Previous Work
https://blogs.technet.microsoft.com/pfesweplat/2017/01/28/forensics-active-directory-ac
l-investigation/ 
Previous 
(Offensive) Work?
https://habrahabr.ru/post/90990/ 
Securable Objects
▪ Any securable object in a Windows environment 
contains a SECURITY_DESCRIPTOR structure 
that contains:
□
A set of control/inheritance bits in the header
□
The security identifier (SID) of the object’s owner
□
The SID of the object’s primary group (not used)
□
A discretionary access control list (DACL)
□
A system access control list (SACL)
▪ This is a binary structure, but can be described 
with a Security Descriptor Definition Language 
(SDDL) string
SECURITY_DESCRIPTOR
https://msdn.microsoft.com/en-us/library/windows/hardware/ff556610(v=vs.85).aspx 
ACLs, DACLs, and SACLs
▪ Access Control List (ACL) is basically 
shorthand for the DACL/SACL superset
▪ An object’s Discretionary Access Control List 
(DACL) and Security Access Control List 
(SACL) are ordered collections of Access 
Control Entries (ACEs)
□
The DACL specifies what principals/trustees have 
what rights over the object
□
The SACL allows for auditing of access attempts to 
the object
▪ All ACEs include:
□
A 32-bit set of flags that control auditing
□
A 32-bit access mask that specifies access rights 
allowed
□
A security identifier (SID) that identifies the 
principal/trustee that has the given rights
ACEs
https://msdn.microsoft.com/en-us/library/windows
/desktop/aa374896(v=vs.85).aspx 
DS_CONTROL_ACCESS
▪ AD access mask bit that grant privileges that 
aren’t easily expressed in the access mask
▪ Interpreted a few different ways
▪ If the ObjectAceType of an ACE with 
CONTROL_ACCES set is the GUID of a 
confidential property or property set, this bit 
controls read access to that property
□
E.g. in the case of the Local Administrator Password 
Soltution (LAPS)
DS_CONTROL_ACCESS 
and Extended Rights
▪ If the ObjectAceType GUID matches a 
registered extended-right GUID in the schema, 
then control_access grants that particular 
“control access right”
▪ Examples:
□
User-Force-Change-Password on user objects
□
DS-Replication-Get-Changes and 
DS-Replication-Get-Changes-All on the domain 
object itself
▪ In Windows and AD, the Kernel-Mode Security 
Reference Monitor (SRM) is in charge of 
deciding the outcome of access requests, 
based on the canonical order of ACEs on the 
target object, and the access being requested.
▪ By understanding the order of evaluation the 
SRM uses for these access decisions, an 
attacker may more effectively hide malicious 
ACEs, or even entire security principals from 
defenders.
SRM and Canonical ACE 
Order
▪ The “canonical” order of ACE evaluation:
□
Explicit DENY
□
Explicit ALLOW
□
Inherited DENY
□
Inherited ALLOW
▪ Inherited privileges are further complicated by 
generational distance from which the object 
inherits that ACE: generationally closer 
inherited ACEs are given priority
SRM and Canonical ACE 
Order
DACL Enumeration
You Don’t Know
What You Can’t Find
2.
.NET/LDAP
▪ The SecurityMasks property of a .NET 
DirectorySearcher object can be set to 
retrieve the DACL, SACL, and/or Owner 
information for an object through LDAP
https://msdn.microsoft.com/en-us/library/system.directoryservices.securitymasks(v=vs.110).aspx 
PowerView
▪ PowerView’s Get-DomainObjectACL function 
wraps the .NET/LDAP method to enumerate 
the DACLs for any given domain object
□
The security descriptor is parsed and individual 
ACEs are output on the pipeline
□
The -ResolveGUIDs flag will build an 
environment-specific mapping of right GUIDS to 
display names
▪ By default, any domain authenticated user can 
enumerate DACLs for most objects in the 
domain!
PowerView
DACL 
(Mis)configurations
And Abuse!
3.
Elevation vs. Persistence
▪ Our work in this area was first motivated by a 
desire to find AD misconfigurations for the 
purposes of domain privilege escalation
□
I.e. searching for specific ACE relationships that 
result in a lesser-privileged object modifying a 
higher-privileged one
▪ This presentation is about modifying/adding 
ACEs (or chains of ACEs) in order to provide 
persistence in a domain environment
AD Generic Rights
▪ GenericAll
□
Allows ALL generic rights to the specified object
□
Also grants “control rights” (see next slide)
▪ GenericWrite
□
Allows for the modification of (almost) all properties 
on a specified object
▪ Both are abusable with PowerView’s 
Set-DomainObject, and these two rights 
generally apply to most objects for takeover
AD Control Rights
▪ There are a few rights that allow a 
trustee/principal to gain control of the object in 
some way
▪ WriteDacl grants the ability to modify the DACL 
in the object security descriptor
□
Abusable with PowerView: Add-DomainObjectAcl
▪ WriteOwner grants the ability to take ownership 
of the object
□
Object owners implicitly have full rights!
□
Abusable with PowerView: Set-DomainObjectOwner
Target:
User Objects
▪ The two takeover primitives are forcing a 
password reset, and targeted Kerberoasting 
through SPN modification (to recover creds)
▪ So the additional rights we care about are:
□
WriteProperty to all properties
□
WriteProperty to servicePrincipalName
□
All extended rights
□
User-Force-Change-Password (extended)
▪ Abusable through Set-DomainObjectOwner 
and Set-DomainUserPassword
Target:
Group Objects
▪ The main takeover primitive involves adding a 
user to the target group
▪ So the additional rights we care about are:
□
WriteProperty to all properties
□
WriteProperty to the member property
▪ Abusable through Add-DomainGroupMember
Target:
Computer Objects
▪ If LAPS is enabled:
□
We care about DS_CONTROL_ACCESS or 
GenericAll to the ms-MCS-AdmPwd (plaintext 
password) property
▪ Otherwise, we don’t know of a practical way to 
abuse a control relationship to computer 
objects :(
□
If you have any ideas, please let us know!
Target:
Domain Objects
▪ The main takeover primitive involves granting a 
user domain replications rights (for DCSync)
▪ So the main effective right we care about is 
WriteDacl, so we can grant a principal DCSync 
rights with Add-DomainObjectAcl
Target:
Group Policy Objects
▪ The main takeover primitive involves the right 
to edit the group policy (that’s then linked to 
an OU/site/domain)
□
This gives the ability to compromise 
users/computers in these containers
▪ So the additional rights we care about are:
□
WriteProperty to all properties
□
WriteProperty to GPC-File-Sys-Path
▪ GPOs can be edited on SYSVOL
BloodHound Analysis
Arroooooooooo
4.
BloodHound Analysis
▪ BloodHound enables simple, graphical analysis 
of control relationships in AD