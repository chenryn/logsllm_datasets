# The Deforestation of L2

**Authors:**
- James Murphy McCauley, UC Berkeley / ICSI
- Mingjie Zhao, UESTC / ICSI
- Ethan J. Jackson, UC Berkeley
- Barath Raghavan, ICSI
- Sylvia Ratnasamy, UC Berkeley / ICSI
- Scott Shenker, UC Berkeley / ICSI

## Abstract
Layer 2 (L2) networking has long relied on the combination of flood-and-learn Ethernet switches and the Spanning Tree Protocol (STP). However, STP has significant drawbacks, including the inefficient use of network capacity by removing links and slow convergence after topology changes. Recent efforts to address these issues have involved making L2 more like L3 (e.g., TRILL and SPB, which incorporate L3-like routing) or replacing L2 switches with "L3 switching" hardware and extending IP all the way to the host. In this paper, we explore an alternative approach in the L2 design space that is simple (using a single data plane mechanism without a separate control plane), converges quickly, delivers packets during convergence, utilizes all available links, and can support both equal-cost multipath (ECMP) and efficient multicast.

## CCS Concepts
- Networks → Network protocol design; Link-layer protocols

## Keywords
- L2 routing, spanning tree

## 1. Introduction
Layer 2 (L2) was originally developed to provide local connectivity with minimal configuration. This plug-and-play property ensures that new hosts can be added or moved without requiring manual reconfiguration of the host or switches. In contrast, Layer 3 (L3) requires assigning an IP address to a newly arriving host and updating routing tables when the host moves to a new subnet. Although L3 has developed some plug-and-play features (e.g., DHCP), L2 remains important in scenarios where initial or ongoing reconfiguration would be burdensome, such as enterprise networks, temporary event networks, wireless or virtual server networks with high host mobility, and small networks without dedicated support staff.

Traditional L2 switches use flooding to reach hosts for which they do not have forwarding state. When a new host sends traffic, the switches learn how to reach the sender by recording the port on which its packets arrived. To prevent loops, the network maintains a spanning tree, which removes links to ensure a loop-free topology. This approach, first developed by Mark Kempf and Radia Perlman at DEC in the early 1980s, has been a cornerstone of modern networking. However, it has two major drawbacks:
- The use of a spanning tree reduces the bisection bandwidth of the network to that of a single link, regardless of the physical topology.
- When a link on the spanning tree fails, the entire tree must be reconstructed, leading to slow convergence times, even with modern STP variants.

In this paper, we present a new approach to L2 called the All conneXion Engine (AXE), which retains the plug-and-play simplicity while using all network links, supporting ECMP, and providing extremely fast recovery from failures. AXE does not natively support fine-grained traffic engineering, but such designs can be implemented on top. We see AXE as a general replacement for current Ethernets and other high-bandwidth networks where local delivery traffic engineering is less critical.

We recognize the extensive related work in this area, which we elaborate on in Section 6. None of the other designs combine AXE's features of plug-and-play, near-instantaneous failure recovery, and compatibility with general topologies. While redesigning L2 may not be the most pressing problem in networking, L2 is widely used, and its performance is increasingly seen as a growing issue, as evidenced by the numerous modifications and extensions vendors now deploy. AXE represents the first substantial rethinking of L2 that improves performance in terms of available bandwidth and failure recovery, and entirely removes the need for a control plane at this layer.

In the next section, we describe AXE's design, starting with a simplified version with provable correctness properties under ideal conditions, and then moving to a practical version that is more robust under non-ideal conditions. We then describe an implementation of AXE in P4 (Section 3) and extensions to support multicast (Section 4) before evaluating AXE's performance through simulation in Section 5. We conclude with a discussion of related work in Section 6.

## 2. Design
Traditional L2 involves two separate processes: (i) creating a tree (via STP or its variants) and (ii) forwarding packets along this tree via a flood-and-learn approach. In AXE, we use a single mechanism—flood-and-learn—where flooded packets are prevented from looping through switch-based packet deduplication. This allows AXE to utilize all network links and removes the need for a complex failure recovery process like STP when links go down.

However, this approach introduces a more subtle learning process. Without a spanning tree, packets can arrive along multiple paths, so AXE must actively choose which path to learn. Additionally, in the presence of failures, some paths may become obsolete, necessitating unlearning to make way for better ones.

To provide a clearer understanding of AXE, we first present a clean version of the algorithm in Section 2.1, which has provable properties under ideal conditions. We then present a more practical version in Sections 2.2-2.4 that better addresses real-world non-ideal conditions. Both designs use standard Ethernet source and destination addresses and an additional AXE packet header with four fields: the "learnable" flag (L), the "flooded" flag (F), a hop count (HC), and a nonce (used by the deduplication algorithm). For rough estimation, if the entire additional header were 32 bits, one could allocate two bits for the flags, six for HC (allowing up to 64 hops), and the remaining 24 for the nonce. To maintain compatibility with unmodified hosts, this header is applied to packets at the first hop switch, which might be a software virtual switch in a virtualized datacenter. Switches enforce a maximal HC (defined by the operator) to prevent unlimited looping in worst-case scenarios.

Each switch uses a deduplication filter to detect and drop duplicate packets based on the triplet <source, destination, nonce>. While there are several ways to construct such a filter, we use a hash-table-like data structure that can experience false negatives but no false positives (i.e., no non-duplicates are dropped, but occasional duplicates may be forwarded).

The forwarding entries in a switch's learning table are indexed by an Ethernet address and contain the arrival port and the HC of the packet from which this state was learned. This information is used to determine the port to reach the host and the number of hops to reach it if a packet followed the reverse path.

Finally, note that AXE pushes the envelope for fast failure response but does not innovate in fast failure detection. Instead, AXE can leverage any existing detection techniques, from higher-level protocols like CFM and BFD to hardware-based techniques with failure detection times on the order of microseconds.

### 2.1 Clean Algorithm
The traditional Ethernet approach involves flooding and learning: (i) a packet is flooded when it arrives at a switch with no forwarding state for its destination address, and (ii) an arriving packet from a host establishes a forwarding entry toward that host. This approach is simple due to the presence of a nontrivial control plane algorithm—STP—which prunes the effective topology to a tree. Because AXE operates on a general topology without any control plane protocol, the clean version of AXE is slightly more complicated and can be summarized as follows:

- **Header Insertion and Host Discovery:** When a packet arrives without an AXE header, a header is attached with HC=1, the L flag set, and the F flag unset. If there is no forwarding state for the source, an entry is created, and the F flag is set. This step initializes the header, and the second step is how switches learn about their attached hosts (and the subsequent flood informs the rest of the network how to reach this host).
- **Flooding:** When a packet with the F flag set arrives, it is flooded out all other ports. When a packet with the F flag unset arrives at a switch with no forwarding state for its destination or for which the forwarding state is invalid (e.g., its link has failed), the F flag is set, and the packet is flooded. Flooded packets have the L flag set only if the flood originated at the first hop (i.e., HC=1). The flooding behavior is similar to traditional learning algorithms, with the addition of explicit flooding and learning flags.
- **Learning and Unlearning:** Switches learn how to reach the source from flooded packets with the L flag set and unlearn (erase) state for the destination whenever they receive a flood packet with the L flag unset. Traditional learning approaches learn from all incoming packets, but in AXE, reliable learning is only possible from packets flooded from the first hop (since packets flooded from elsewhere might have taken circuitous paths). Moreover, when switches learn from flooded packets, they choose the incoming copy with the smallest HC. When a flooded packet arrives with the L flag unset, it indicates a problem reaching the destination (because the flood originated somewhere besides the first hop, as might happen with a failed link); this is why switches unlearn forwarding state when such packets arrive.
- **Wandering Packets:** When the HC of a non-flooded packet reaches the limit, the packet is flooded (with the F flag set and the L flag unset), and local state for the destination is erased. If the forwarding state has created a loop, erasing the state locally ensures the loop is broken. Flooding the packet (with the L flag unset) will cause all forwarding state to the destination host to be erased, ensuring the next packet sent by that host will be flooded from the first hop, and the correct forwarding state will be learned.

Algorithm 1 shows pseudocode for this clean algorithm, which processes a single packet \( p \) at a time and consults the learning table `Table` by calling a `Lookup()` method with the desired Ethernet address. `Lookup()` returns `False` if there is no table entry corresponding to the address. The operation `Table.Learn()` inserts the appropriate updated state in the table, and `Table.Unlearn()` removes the state. `IsPortDown()` returns `True` if the output port passed to it is unavailable (e.g., the link has failed). The `IsDuplicate` value (obtained from the deduplication filter) indicates whether the switch has already seen a copy of that packet. `Output()` sends a packet via a specified port, and `Flood()` sends a packet out all other ports.

```python
def ProcessPacket(p):
    if not p.has_AXE_header:
        p.attach_AXE_header(HC=1, L=True, F=False)
        if not Table.Lookup(p.src):
            Table.Learn(p.src, p.in_port, p.HC)
            p.F = True
            Flood(p)
        else:
            Output(p, Table.Lookup(p.dst))
    elif p.F:
        if IsDuplicate(p):
            return
        Flood(p)
    else:
        if not Table.Lookup(p.dst) or IsPortDown(Table.Lookup(p.dst)):
            p.F = True
            Flood(p)
        else:
            Output(p, Table.Lookup(p.dst))

    if p.L and not IsDuplicate(p):
        Table.Learn(p.src, p.in_port, p.HC)
    elif not p.L:
        Table.Unlearn(p.dst)

    if p.HC >= MAX_HC:
        p.F = True
        p.L = False
        Flood(p)
        Table.Unlearn(p.dst)
```

This pseudocode provides a clear and concise representation of the clean AXE algorithm, highlighting the key steps and operations involved in processing packets and maintaining the learning table.