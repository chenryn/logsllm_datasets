very natural expectation. Overall, restricting messages are a
very convenient mechanism that adds extra expressivity to
universal composability models and that allows for a natural
modeling when adversaries and protocols have to exchange
meta information (see [20] for an in depth discussion). In
the rest of the paper, we always assume that environmental
and adversarial systems are responsive.
Notions of Simulation-Based Security. We can now deﬁne
strong simulatability; other equivalent security notions, such
as (dummy) UC, can be deﬁned in a similar way.
Deﬁnition 1. Let P and F be protocol systems with the same
I/O interface, the real and the ideal protocol, respectively.
Then, P realizes F (P ≤R F) if there exists an adversarial
system S (a simulator or an ideal adversary) such that the
systems P and S |F have the same external interface and for
all environmental systems E, connecting only to the external
interface of P (and hence, S |F), it holds true that E |P ≡
E |S |F.2
Composition Theorems. The IITM model provides several
composition theorems. One theorem (see Theorem 1 below)
handles concurrent composition of a ﬁxed number of proto-
col systems. Other theorems guarantee secure composition
of an unbounded number of copies of a protocol system.
Theorem 1. Let P1,P2,F1,F2 be protocol systems such
that P1 and P2 as well as F1 and F2 only connect via their
2Note that strong simulatability omits the adversary in the real world as
he can be subsumed by the environment.
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:26:54 UTC from IEEE Xplore.  Restrictions apply. 
I/O interfaces with each other and Pi ≤R Fi, for i ∈ {1, 2}.
Then, P1 |P2 ≤R F1 |F2.
Other composition theorems provided by the IITM model
can be found in [11], [16]. These theorems allow one to
analyze a single session of a protocol in isolation in order
to conclude security of an unbounded number of sessions.
All composition theorems of the IITM can be combined
and applied iteratively to construct more and more complex
systems.
PRIMITIVES
III. IDEAL FUNCTIONALITY FOR CRYPTOGRAPHIC
We now present our ideal functionality Fcrypto for crypto-
graphic primitives. As already mentioned in the introduction,
a higher-level protocol P can use Fcrypto for its cryptographic
operations. Then, in order to show that P |Fcrypto ≤R F,
i.e., that P (using Fcrypto for its cryptographic operations)
realizes some ideal functionality F (e.g., a key exchange
functionality), one can argue on a purely information theo-
retic level, without resorting to reductions or hybrid argu-
ments (at least for those primitives supported by Fcrypto). For
example, Fcrypto guarantees that only the (honest) owner of
a Difﬁe-Hellman key can get access to keys that are derived
from it, and only parties with access to these keys can, e.g.,
create a MAC with such keys. In all other cryptographic
approaches for security protocols, one has to reduce these
properties to the security assumptions for Difﬁe-Hellman
key exchange, key derivation, and MAC schemes. Once
P |Fcrypto ≤R F has been proven, using the composition
theorems of the IITM model one can replace Fcrypto with
its realization Pcrypto (see Section IV) by which the ideal
operations provided by Fcrypto are replaced by the real
counterparts.
As mentioned in the introduction, in [19] a ﬁrst version
of Fcrypto was proposed, which, however, does not support
DH key exchange, a fundamental primitive for most real-
world key exchange protocols. We also improve Fcrypto in
various other ways in order to overcome shortcomings of
the previous version, as discussed below. Our extension of
Fcrypto, in particular the treatment of DH key exchange, is
non-trivial and needs care in order for it to be widely usable
and realizable. In the following, we ﬁrst recall the version
of Fcrypto from [19] and then present our extension.
A. The ideal functionality Fcrypto
On a high level, the ideal functionality Fcrypto allows its
users to perform the following operations in an ideal way:
i) generate symmetric keys, including pre-shared keys, ii)
generate public/private keys, iii) derive symmetric keys from
other symmetric keys, iv) encrypt and decrypt messages
and ciphertexts, respectively (public-key encryption and both
unauthenticated and authenticated symmetric encryption are
supported), v) compute and verify MACs and digital sig-
natures, and vi) generate fresh nonces. All symmetric and
public keys can be part of plaintexts to be encrypted under
other symmetric and public keys. Derived keys can be used
just as freshly generated symmetric keys.
Formally, the ideal functionality Fcrypto is a machine with
n I/O tapes, representing different roles in a higher level
protocol, and a network tape for communicating with the
adversary. In runs of a system which contains Fcrypto there
will always be one instance of Fcrypto only. This instance
handles all requests.
A user of Fcrypto is identiﬁed by a tuple (pid , lsid , r ),
where r is the role/tape which connects the user to Fcrypto,
pid is a party identiﬁer (PID), and lsid is a local session
identiﬁer (local SID). The local session ID is chosen and
managed by higher level protocols and not further inter-
preted by Fcrypto. For example, it could be some session
identiﬁer that was established during a protocol run. All
messages on I/O tapes are preﬁxed with (pid , lsid ) so Fcrypto
can identify the user who sent/receives a message.
Users of Fcrypto, and its realization, do not get
their
hands on the actual (private) keys but rather get pointers
to such keys which can then be used to perform several
cryptographic operations (see below).
The adversary can statically corrupt asymmetric (sign-
ing/encryption) keys,3 i.e., he can corrupt them before they
are used for the ﬁrst time but not afterwards. The corruption
status of asymmetric keys determines whether operations
with these keys are performed ideally or without
ideal
security guarantees. Similarly, the adversary can statically
corrupt symmetric keys when they are generated or,
in
the case of pre-shared keys, when they are retrieved for
the ﬁrst time. In the case of symmetric keys, the func-
tionality keeps track of whether a key might be known to
the adversary/environment (e.g., because it was explicitly
corrupted or because it was encrypted with a corrupted
key). For this purpose, Fcrypto maintains a set Keys of
all symmetric keys and a set Keysknown ⊆ Keys which
contains all keys that might be known to the environment.
The known/unknown status of symmetric keys is then used
to determine whether symmetric operations are performed
ideally or without ideal security guarantees. In the following,
we will call a key known if it is in Keysknown and unknown
if it is in Keys\Keysknown.
Symmetric keys in Fcrypto are equipped with a key type
that determines their usage. That is, a key k is of the form
(cid:2) is the actual bit string used in algorithms
(cid:2)) where k
(t, k
while t is the key type. Keys of type pre-key are used
to derive other keys, keys of type unauthenc-key and
authenc-key are used for (un)authenticated encryption and
decryption, and keys of type mac-key are used to create and
verify MACs. This models the practice of using keys for a
single purpose only.
3In our extension of Fcrypto, corruption of asymmetric signing keys is
dynamic. That is, the adversary can corrupt signing keys at any point in
time.
884
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:26:54 UTC from IEEE Xplore.  Restrictions apply. 
The ideal functionality Fcrypto is parameterized with a
leakage algorithm L that is used to determine the informa-
tion that is leaked when a plaintext x is encrypted ideally.
For example L(x, 1η) = 1|x| can be used to leak exactly
the length of x. We call such a leakage algorithm length
preserving. The adversary is supposed to provide algorithms
for authenticated and unauthenticated symmetric encryption,
MACing, public key encryption, and signing. The adversary
also provides the actual bit strings of all keys generated
by Fcrypto. The functionality Fcrypto ensures only that a new
unknown symmetric key k is fresh (i.e., k (cid:6)∈ Keys) and
prevents key guessing of unknown keys when receiving a
new known key k (i.e., k (cid:6)∈ Keys\Keysknown). Note that, as
the adversary provides the keys, he knows the actual value
of symmetric keys that are marked as unknown in Fcrypto.
This is not a contradiction as the known/unknown status
determines only whether operations are performed ideally;
of course, in the realization a key that is marked unknown
will indeed be unknown to the environment.
The functionality Fcrypto offers the following list of com-
mands to a user (pid , lsid , r ) (see [19] for a detailed
deﬁnition of every command):
- Generating fresh, symmetric keys [(New, t)]. A user can
generate a new symmetric key of type t.
- Establishing pre-shared keys [(GetPSK, t, name)]. A
user can ask for a pointer to a pre-shared symmetric key of
type t, which can be used for modeling setup assumptions.
If another user creates a key with the same input name,
then this means that the two users share the created key.
- Store [(Store, t, k)]. A user can manually store a
(known) key k of type t in Fcrypto.
- Retrieve [(Retrieve, ptr )]. A user can retrieve the key
k a pointer ptr refers to, by which k is marked as known.
[(Equal?, ptr , ptr(cid:2))]. A user can test
whether two of her pointers refer to the same key (same
type and same bit string).
(cid:2)) or (GetPub−
(cid:2))]. A user can ask for the public encryp-
- Public key requests [(GetPubKeyPKE, p
KeySig, p
tion/veriﬁcation key, if any, of another party p
- Equality test
(cid:2)
- Key derivation [(Derive, ptr , t
, s)]. A user can derive
(cid:2) from salt s and key k of
a new symmetric key of type t
type pre-key to which ptr points.
- Encryption/decryption under symmetric keys [(Enc,
ptr , x) and (Dec, ptr , y)]. A user can encrypt a plaintext
x and decrypt a ciphertext y using a key k of type t ∈
{unauthenc-key, authenc-key} to which ptr points.
The plaintext x may contain (pointers to) symmetric keys.
As the result of the decryption of y, a user may learn
symmetric keys. The exact operations depend, among
others, on whether or not k is known. For example, if k is
unkown, encryption is ideal, i.e., a ciphertext is produced
which depends on L(x, 1η) only.
- Encryption and Decryption under public keys
(cid:2).
(cid:2)
[(PKEnc, p
, pk , x) and (PKDec, y)]. Asymmetric en-
cryption/decryption works just as symmetric encryp-
tion/decryption, with the main difference being that the
(cid:2) and the
encryption command takes as input the PID p
public key pk of the intended recipient.
- Creating and verifying MACs
[(Mac, ptr , x) and
(MacVerify, ptr , x, σ)]. A user can create a MAC for
or verify a MAC σ on a message x with key k of type
mac-key to which ptr points.
- Creating and verifying signatures [(Sign, x) and
(cid:2)
, pk , x, σ)]. A user can create or verify
(SigVerify, p
a signature σ on a message x using his own private
(cid:2),
signing key or the public veriﬁcation key pk of party p
respectively.
- Generating fresh nonces [(NewNonce)]. A user can ask
for a fresh nonce that does not collide with any previously
generated nonces.
- Corruption status request. A user can ask whether
one of her symmetric keys, or a public key of some
(cid:2) was corrupted by the adversary. This is used for
party p
modeling corruption: the environment can make sure that
the corruption status of a key is the same in the real and
ideal worlds.
B. Difﬁe-Hellman KE in Fcrypto
We now present our extension to Fcrypto that supports
Difﬁe-Hellman key exchange. On a high level, the extension
lets users generate secret Difﬁe-Hellman exponents (e) and
the corresponding public key shares (ge), called DH shares
in what follows. Exponents can be combined with arbitrary
DH shares, not necessarily generated by Fcrypto, to produce
a new symmetric key. If an exponent is combined with a DH
share created by Fcrypto, then the resulting key will only be
accessible by the owners of the two exponents that were used
to create the key. The resulting key can then be used to derive
other keys, e.g., for encryption or MACing. Whether or not
this key derivation is performed ideally depends on several
factors, such as whether any of the exponents is known to
the environment/adversary (see below). Furthermore, Fcrypto
guarantees that new exponents/DH shares are fresh, i.e., no
other user has access to the same exponent and no keys were
already created from the share.
Before we describe our extension in detail, we ﬁrst have
to explain how we use restricting messages (cf. Section II).
There are many situations where Fcrypto needs to retrieve
some information from the adversary, such as cryptographic
algorithms or values of fresh keys. The adversary might
use such requests to interfere with the run of Fcrypto in an
unintended way by, e.g., never responding to some of the
requests. Importantly, such attacks do not relate to anything
in reality: Fcrypto models local computations that always suc-
ceed in reality. Our extension of Fcrypto leverages the power
of restricting messages to guarantee that an adversary cannot
interfere with local computations, while still being able to
885
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:26:54 UTC from IEEE Xplore.  Restrictions apply. 
provide cryptographic values to Fcrypto. In the following, for
brevity, we will say that a message m is restricting when
we mean that the message (Respond,⊥, m) is sent on the
network. Recall from Section II that an environment has to
respond to such a message immediately. We will implicitly
assume that Fcrypto repeats these messages until an expected
response is received (e.g., when the response needs to be a
value within a certain range).
We can now detail our extension. Formally, we parame-
terize Fcrypto with a GroupGen(1η) algorithm that is used to
generate the Difﬁe-Hellman group. This algorithm takes as
input the current security parameter η, runs in polynomial
time in η (except with negligible probability), and outputs
a description (G, n, g) of a cyclic group G where |G| = n
and g is a generator of G. We require that it is possible
in polynomial time (in η) to check whether a bit string
encodes a group member of such a group, and that the group
operation is efﬁciently computable.
Difﬁe-Hellman exponents are modeled analogously to
keys in Fcrypto. That is, a user gets pointers to her exponents,
never the actual exponent, and can use these pointers to
perform Difﬁe-Hellman key exchange. However, users do
the DH share ge belonging to an exponent e. The
get
actual values of exponents are stored in two sets, Exp
and Expknown ⊆ Exp. An exponent in Expknown is called
known, while an exponent in Exp\Expknown is called un-
known. The known/unknown status of exponents is used to
determine whether keys created from them are considered
known/unknown. Just as for keys, the environment provides
the actual values of exponents, even if they are considered
unknown. Of course, an exponent that is marked unknown
in Fcrypto will in fact be unknown to the environment in the
realization Pcrypto. Fcrypto prevents exponent collisions (i.e.,
if a new unknown exponent e is created, then e (cid:6)∈ Exp)
and exponent guessing (i.e., if a new known exponent e is
created, then e (cid:6)∈ Exp\Expknown). Additionally, Fcrypto also
maintains a set BlockedElements of blocked DH shares that
contains group elements h that may not be generated when
a new exponent e is created, i.e., ge (cid:6)= h. In particular, this
set contains all DH shares that have been used to create a
Difﬁe-Hellman key (see Section III-C for an explanation).
We add another symmetric key type dh-key to Fcrypto