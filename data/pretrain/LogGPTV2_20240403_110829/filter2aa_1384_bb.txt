section to be sure I cover the point that if you created a user account, you have to
remove it. The entry in /etc/passwd needs to be cleaned up.
Of course, then we wouldn’t have discovered that there were shared credentials for
local administrator accounts or excessive domain admin privileges or any other vul-
nerabilities or attack vectors we were able to uncover only after compromising a level-
two system. 
Rather than focusing on whether you should conduct network pentesting, my goal for
writing this book is to teach you how to do it properly.
No active sessions 
are connected.
196
CHAPTER 11
Post-engagement cleanup
11.2.1 Removing entries from /etc/passwd
To remove entries from /etc/passwd, SSH into the compromised Linux server as a
user with root privileges. If you don’t know the root password, use whatever creden-
tials you used to gain access to the system initially, and then use the pentest entry that
you added to the /etc/passwd file to elevate to root. If you were to cat out the con-
tents of the /etc/passwd file right now, it would look something like the following list-
ing, with the pentest entry at the bottom of the file.
lxd:x:105:65534::/var/lib/lxd/:/bin/false
uuidd:x:106:110::/run/uuidd:/usr/sbin/nologin
dnsmasq:x:107:65534:dnsmasq,,,:/var/lib/misc:/usr/sbin/nologin
landscape:x:108:112::/var/lib/landscape:/usr/sbin/nologin
pollinate:x:109:1::/var/cache/pollinate:/bin/false
sshd:x:110:65534::/run/sshd:/usr/sbin/nologin
nail:x:1000:1000:Nail:/home/nail:/bin/bash
pentest:$1$pentest$NPv8jf8/11WqNhXAriGwa.:0:0:root:/root:/bin/bash 
Just as in section 9.3.2, open the /etc/passwd file in a text editor such as vim. Scroll
down to the last line, which contains the pentest/root account, and delete it. Save the
file, and you’re all set. To verify that the user entry has been properly removed, run
the command su pentest from your SSH prompt to try to switch to the pentest user
account. You will see an error message saying, “No passwd entry for user ‘pentest.’” If
you don’t see this message, then you failed to remove the entry from the /etc/passwd
file. Go back and do this properly, as described in section 11.2.1.
11.3
Removing leftover files from the filesystem
Throughout your INPT, you’ve undoubtably left traces of your engagement testing on
systems you’ve compromised. These traces are in the form of leftover files that have
been placed on disk. Obvious risks would be binary executables that could be used to
directly compromise one of your client’s systems. There are also less-obvious files, and
at the very least it would be considered unprofessional for you to leave them lying
around. 
Listing 11.1
/etc/passwd file with a backdoor entry
Pentest entry that
is a backdoor to the
root user account
Post-engagement cleanup is effective only if you took good notes while testing
I cannot stress this enough, although I’m sure you may think by now that I’ve
stressed it too much. Keeping copious notes of your activities during any pentest is
critical. Certainly, it will help with proper post-engagement cleanup; but it’s also just
a great habit to form, because at some point in your career, something will go wrong.
You will break something. It’s not the end of the world, but your client will need to
retrace your steps to figure out how to resolve the issue you created.
197
Removing leftover files from the filesystem
In this section, we cover four instances of leftover files that were used during the Cap-
sulecorp pentest. In all instances, the steps are the same: delete the file from the
filesystem. As long as you noted every file you created on every system where you cre-
ated files, you should have no problem going in and cleaning up after yourself.
11.3.1 Removing Windows registry hive copies
In section 6.2.1, you created a copy of two Windows registry hives. The SYSTEM and SAM
hive copies were placed in the c:\windows\temp directory. Using whatever means of
remote administration is comfortable for you, run the following two commands
(change the command appropriately if you named your copies something other than
sys and sam):
del c:\windows\temp\sam
del c:\windows\temp\sys
Equally as inevitable, and probably more frequent, will be cases where you didn’t
break anything, but something broke while you were conducting your engagement,
and the finger was pointed at you. In this case, accurate notes of your activities can
help exonerate you and, more importantly, help your client realize that they need to
look elsewhere to get to the bottom of whatever network issue they are having.
It’s not always the pentester’s fault
My favorite example of being wrongfully accused of breaking something while on an
engagement happened at a medium-sized (less than $1 billion in annual revenue) credit
union. Another consultant and I arrived onsite Monday morning to start the engagement.
We were placed in a conference room, which is pretty standard practice, and were in
the process of unzipping our backpacks and taking out our gear. I hadn’t even plugged
an ethernet cable into the network when a man burst into the room and asked frantically,
“What have you done? The Exchange server is down, and nobody can get email!” We
both looked at the man and then down at our laptops, which were not even powered
on or plugged into the network, and then back at the man. Before we could say anything,
he realized it couldn’t have been us, apologized, and shut the door.
We couldn’t help but laugh—not because our clients were having email problems, but
because of how quickly they pointed the finger at us. I was just glad we were able to
prove without question that it wasn’t our fault; after all, I hadn’t even powered on my
laptop. 
I’ve been in other situations where the client was “sure” I had broken something, and
it wasn’t as easy to convince them otherwise. In this case, later that day the man
came and told us what had caused the Exchange server to go down; he was very pro-
fessional and apologized more times than necessary for assuming that we had
caused the problem.
198
CHAPTER 11
Post-engagement cleanup
Verify that the files were deleted by listing the contents of the directory with the dir
c:\windows\temp command. You can see from the output that the sam and sys files
are no longer present on the victim machine.
Volume in drive C has no label.
Volume Serial Number is 04A6-B95A
CME          10.0.10.201:445 GOHAN
Directory of c:\windows\temp
CME          10.0.10.201:445 GOHAN
05/18/2020  08:27 AM              .
05/18/2020  08:27 AM              ..
05/13/2020  07:59 AM               957 ASPNETSetup_00000.log
05/13/2020  07:59 AM               959 ASPNETSetup_00001.log
05/18/2020  07:07 AM              FB8686B0-2861-4187-AF85
CB60E8C2C667-Sigs
05/18/2020  07:07 AM            58,398 MpCmdRun.log
05/18/2020  07:07 AM            59,704 MpSigStub.log
05/15/2020  07:15 AM              rad9230D.tmp
05/13/2020  08:20 AM               102 silconfig.log
05/13/2020  08:16 AM           286,450 SqlSetup.log
05/18/2020  08:27 AM                 0 yBCnqc
7 File(s)        406,570 bytes
4 Dir(s)   2,399,526,912 bytes free   
11.3.2 Removing SSH key pairs
In section 9.1.2, you uploaded an SSH key to a compromised Linux system so that you
could use it to auto-connect to your attacking machine. By itself, the SSH key doesn’t
pose a significant risk to your client because it can only be used to connect to your
computer. But it should still be removed as a courtesy and a best practice. 
 To remove the key pair, SSH into the compromised Linux machine and run the
command rm /root/.ssh/pentestkey*. This command will delete both the public
and private key files. You can verify that the keys are gone by running the command ls
-lah /root/.ssh. As you can see from the output, the keys are no longer present on
the Linux server I compromised during the Capsulecorp pentest.
total 8.0K
drwx------ 2 root root 4.0K Apr 24  2019 .
drwx------ 3 root root 4.0K Apr 24  2019 ..
-rw------- 1 root root    0 Apr 24  2019 authorized_keys 
While you’re already cleaning up this compromised Linux target, you should also take
care of the bash script that was created to use the SSH keys. The bash script you created
in section 9.1.4 was placed in the /tmp directory and named callback.sh. Remove it by
typing the command rm /tmp/callback.sh. Then verify that it has been removed with
ls -lah /tmp.
Listing 11.2
Directory listing with no registry hive copies
Listing 11.3
Directory listing with no SSH key pairs
There are no 
SSH key pairs.
199
Reversing configuration changes
11.3.3 Removing ntds.dit copies
In section 10.3.1, you learned how to obtain a copy of the ntds.dit file as well as a copy
of the SYSTEM registry hive file from the Capsulecorp Pentest domain controller. These
files definitely should not be left lying around because they could be used to obtain
Active Directory password hashes for the Capsulecorp Pentest domain. Again, connect
to this machine using whatever means of remote access you prefer. I’ll use RDP for ease
of use. Open a Windows command prompt, and run the following two commands to
delete the ntds.dit and sys files that were placed on the root of the C: drive:
del c:\ntds.dit
del c:\sys
You can see from the output that the files have been deleted.
Volume in drive C is System
Volume Serial Number is 6A81-66BB
CME          10.0.10.200:445 GOKU
Directory of c:\
CME          10.0.10.200:445 GOKU
01/03/2020  06:11 PM              chef
01/03/2020  06:11 PM              opscode
09/15/2018  07:19 AM              PerfLogs
01/03/2020  06:17 PM              Program Files
01/03/2020  06:09 PM              Program Files (x86)
03/10/2020  03:10 PM              Users
05/12/2020  11:37 PM         vagrant [\\vboxsvr\vagrant]
05/12/2020  11:42 PM              Windows
0 File(s)              0 bytes    
8 Dir(s)  123,165,999,104 bytes free
TIP
On Windows OSs, files are not permanently deleted until they are emp-
tied from the Recycle bin. If you are cleaning up sensitive files on Windows
systems—especially files containing credentials or password hashes—you
should navigate to the Recycle bin and permanently delete the files. Don’t
empty the entire Recycle bin, in case it contains files that were accidentally
deleted by a system administrator. 
11.4
Reversing configuration changes
As a pentester playing the role of an attacker, it is often necessary to modify a server’s
configuration to achieve a compromise of that target. Doing so is fair game under the
rules of engagement and makes sense because after all, that’s what an attacker would
do, and your client hired you to determine where they might be susceptible to attack. 
 Now that the engagement is complete, though, it’s vital that you don’t leave your
client’s network in an even more susceptible state than it was in before you arrived.
Any modifications or changes you made to an application or server need to be
Listing 11.4
Directory listing with no ntds.dit or registry hive copies
There are no ntds.dit 
or registry hive files.
200
CHAPTER 11
Post-engagement cleanup
reversed. In this section, I cover three configuration changes you made. First, in chap-
ter 6, you enabled the xp_cmdshell stored procedure on a Microsoft SQL Server sys-
tem. Second, also in chapter 6, you modified the file-sharing configuration of a
directory on that server to download the registry SYSTEM and SAM copies. Third, in
chapter 9, you modified the crontab of a compromised Linux server to run a remote
access script that connected to your attacking machine. This was done to establish per-
sistent re-entry into the target.
 All of the configuration changes need to be properly reversed. Let’s begin with the
database server and the xp_cmdshell stored procedure.
11.4.1 Disabling MSSQL stored procedures
In chapter 6, you learned how to compromise a vulnerable Microsoft SQL Server that
used a weak password for the sa user account. To fully compromise the target, you first
had to enable a dangerous stored procedure called xp_cmdshell, which allows OS
command execution. You should disable this stored procedure on the affected host as
part of your post-engagement cleanup activities. 
 First, connect to the target using the sa account and password from chapter 6.
Next, issue the sp_configure command to set the value for the xp_cmdshell stored
procedure to zero (0), like this: sp_configure 'xp_cmdshell', '0'. As you can see
in the output, the value was 1 and is now 0, which means the stored procedure has
been disabled:
[*] INFO(GOHAN\CAPSULECORPDB): Line 185: Configuration option 'xp_cmdshell'
changed from 1 to 0. Run the RECONFIGURE statement to install.  
You have to run the reconfigure command to make sure the configuration change
takes effect, so run that command next. Then, verify that xp_cmdshell is disabled by
attempting to run the OS command whoami: for example, exec xp_cmdshell 'whoami'.
Just as you would expect, the following listing shows that the command fails because the
xp_cmdshell stored procedure has been disabled on the SQL server.
[-] ERROR(GOHAN\CAPSULECORPDB): Line 1: SQL Server blocked access to
procedure 'sys.xp_cmdshell' of component 'xp_cmdshell' because this
component is turned off as part of the security configuration for this
server. A system administrator can enable the use of 'xp_cmdshell' by using
sp_configure. For more information about enabling 'xp_cmdshell', search for
'xp_cmdshell' in SQL Server Books Online.
Because you’re already cleaning up the database server from chapter 6, let’s continue
to the file share that was configured in section 6.2.2.
Listing 11.5
Error message when attempting to use xp_cmdshell
The value has been switched from 1 to 0.
The SQL Server blocked 
access to xp_cmdshell.
201
Reversing configuration changes
11.4.2 Disabling anonymous file shares
You may recall that in chapter 6, you also wanted to obtain a copy of the SYSTEM and
SAM Windows registry hive files from this server to extract the local user account pass-
word hashes. It was possible to use the reg command to place a copy of these hives on
the filesystem, but there was no way to retrieve them remotely. To solve this problem,
you created an unrestricted file share that you used to download the files. 
 The share you created on the target server is called pentest. You can verify that this
is the correct name of the share you created in your testing environment by running
the command net share. As you can see from the output, the share called pentest is
the one you need to remove from the Capsulecorp Pentest environment.
Share name   Resource                        Remark
CME          10.0.10.101:445 GOHAN
-----------------------------------------------------------------------------
C$           C:\                             Default share
IPC$                                         Remote IPC
ADMIN$       C:\Windows                      Remote Admin
pentest      c:\windows\temp    
The command completed successfully.
To delete this share, run the net share pentest /delete command. You will see the
following message: 
pentest was deleted successfully.
You can double-check that the share is gone by once again running the command net
share. The following listing shows that the share is no longer present on the target server.
Share name   Resource                        Remark
CME          10.0.10.201:445 GOHAN
-----------------------------------------------------------------------------
C$           C:\                             Default share
IPC$                                         Remote IPC
ADMIN$       C:\Windows                      Remote Admin
The command completed successfully.  
The last configuration change you need to revert is the crontab entry you created in
section 9.1.4. Let’s do that next, assuming you followed along and created a similar
crontab entry in your own testing environment.
11.4.3 Removing crontab entries
During your Linux post-exploitation activities in chapter 9, you learned how to config-
ure a crontab entry to launch a bash script that establishes a remote connection to
Listing 11.6
Windows net share command showing the pentest share
Listing 11.7
Windows net share command showing no pentest share
The pentest share to be deleted
202
CHAPTER 11
Post-engagement cleanup
your attacking machine. This is similar to the Meterpreter autorun backdoor execut-
able created in chapter 8, which you’ll clean up in section 11.5.
 To remove the crontab entry, connect to the Linux machine using SSH, and list
the crontab entries for your user account with the command crontab -l. You will see
output that looks similar to the following listing, which shows the entry for the /tmp/
callback.sh script that I created in chapter 9.
# For example, you can run a backup of all your user accounts
# at 5 a.m every week with:
# 0 5 * * 1 tar -zcf /var/backups/home.tgz /home/
#
# For more information see the manual pages of crontab(5) and cron(8)
#
# m h  dom mon dow   command
*/5 * * * * /tmp/callback.sh    
To remove this crontab entry, run the command crontab -r. You can verify that the
entry has been removed by running the crontab -l command again. You will see the
message “no crontab for piccolo,” where piccolo is the username of the account you are
using to access the Linux or UNIX server. In the next section, we discuss removing
backdoors that were installed on compromised targets. 
11.5
Closing backdoors
Although configuration changes modify the behavior of systems already present on
your target, sometimes it’s necessary on a pentest to add functionality that is not
already there. In this case, I’m referring to creating a backdoor to ensure that you can
reliably re-enter a compromised host. When cleaning up backdoors, you need to
make sure they are no longer accessible and also delete any binary or executable files
associated with them. 
 In this section, you remove three backdoors that you created during the Capsule-
corp pentest: 
 The web application archive (WAR) file used to compromise a vulnerable
Apache Tomcat server
 The Sticky Keys backdoor that you set up on a compromised Windows system
 The persistent Meterpreter backdoor you created using Metasploit
Let’s start with the Apache Tomcat WAR file.
11.5.1 Undeploying WAR files from Apache Tomcat
In section 5.3.2, you learned how to deploy a malicious WAR file to an unsecured
Apache Tomcat server. The WAR file that you deployed acted as a non-interactive web
shell to the victim Tomcat server. Leaving the WAR file deployed would be bad form
Listing 11.8
Crontab entry to run /tmp/callback.sh
The crontab entry that 
needs to be removed
203
Closing backdoors
and also leave your client potentially vulnerable to attack. Luckily, removing it from
the Tomcat management interface is a straightforward process. 
 First, log in to the Tomcat web management interface and scroll down to the
Applications section. Find the WAR file you deployed; in this case, it’s the one named
webshell. Click Undeploy in the Commands column (see figure 11.1).
After you’ve done that, the page refreshes, and you see a status message telling you
that the application has been undeployed (figure 11.2). Finally, just to be sure, browse
to the application using an internet browser. As you can see in figure 11.3, the applica-
tion is no longer present, and the Tomcat server returns a 404 Not Found message. 
Figure 11.1