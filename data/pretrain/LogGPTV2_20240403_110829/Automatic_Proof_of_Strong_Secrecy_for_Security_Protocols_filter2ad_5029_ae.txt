strong secrecy. This approximation is useful to have a sim-
ple enough and automatable technique. Except works that
rely on manual proofs, previous works that handle cryptog-
raphy, such as [1], were at least as approximate.
the way non-determinism is handled
Because of
in point 2 of
the deﬁnition of observational equiva-
lence, a non-deterministic process may satisfy a strong
secrecy property, while a process that has less possible be-
haviors does not. In other words, a reﬁnement of a process
may be found less secure. However, this problem is re-
duced by the approximations done in Proposition 1: if
we prove strong secrecy of a process (cid:0) using Propo-
sition 1, and the notion of reﬁnement guarantees that
(cid:0) does not execute more destruc-
the reﬁned process  (cid:0)
tor applications than (cid:0), then  (cid:0)
(cid:0) also satisﬁes strong se-
crecy.
4. Protocol Veriﬁer
In this section, we extend the protocol veriﬁer of [3, 16]
to verify strong secrecy. The veriﬁer builds a set of Horn
clauses (rules) from a closed process (cid:0). We assume that
each restriction (cid:1)(cid:2) in (cid:0) has a different name (cid:2), and
that this name is different from any free name of (cid:0).
We ﬁrst associate to each replication in (cid:0) a session
identiﬁer. Session identiﬁers are variables taking values in
a countable set of terms, and different values for each copy
of the replicated process. They make it possible to distin-
guish different copies of the process; in particular, we use
them below to distinguish names created by the same re-
striction in different copies of the process.
The terms of the rules are called patterns  and are gen-
erated by the following grammar:
 (cid:2)(cid:2)(cid:3)
(cid:4)(cid:5) (cid:6)(cid:5) (cid:7)
(cid:0)
(cid:2)(cid:4)(cid:0)(cid:5) (cid:8) (cid:8) (cid:8) (cid:5) (cid:5)
(cid:9) (cid:0)(cid:5) (cid:8) (cid:8) (cid:8) (cid:5) 
patterns
variable
element of (cid:0)(cid:1)(cid:2)
name
constructor application
The set (cid:0)(cid:1)(cid:2) contains special constants (cid:0), used below in
arguments of the (cid:0)	(cid:5)(cid:6) predicate. (Intuitively, these con-
stants stand for existentially quantiﬁed variables. They are
instantiated by substitutions in Deﬁnition 3 below. We write
constants (cid:0) in (cid:0)(cid:1)(cid:2) and names (cid:7) in (cid:4)(cid:5) (cid:6) in sanserif font,
to distinguish them from variables.) A restriction in a pro-
cess creates a new name each time it is executed. When the
restriction is under a replication, this leads to the genera-
tion of an unbounded number of names, which would im-
mediately lead to non-termination if we represented it di-
rectly. Instead, we encode names as functions. For example,
in the process (cid:0) of Section 2, the names created by the re-
striction (cid:1)(cid:10) are represented in the veriﬁer as (cid:10)(cid:4)(cid:11)(cid:0)(cid:5) (cid:4)(cid:1) (cid:0) (cid:5),
where (cid:10) is a function symbol and (cid:11)(cid:0) is the session identi-
ﬁer of the replication above (cid:0). Indeed, the names created
by (cid:1)(cid:10) after receiving different messages (cid:4)(cid:1) (cid:0) or in differ-
ent copies of the process (cid:0) numbered by (cid:11)(cid:0) are certainly
different, so these names depend on (cid:11)(cid:0) and (cid:4)(cid:1) (cid:0) ; thus, we
represent them by a function of (cid:11)(cid:0) and (cid:4)(cid:1) (cid:0) . More gener-
ally, for each name (cid:2) in (cid:1), we have a corresponding pat-
tern construct (cid:2)(cid:4)(cid:0)(cid:5) (cid:8) (cid:8) (cid:8) (cid:5) (cid:5), where (cid:2) is called a name func-
tion symbol. If (cid:2) is a free name, then the arity of this func-
tion is 0. If (cid:2) is bound by a restriction (cid:1)(cid:2) in (cid:1), then this
arity is the total number of input statements, destructor ap-
plications, and replications above the restriction (cid:1)(cid:2) in
the abstract syntax tree of (cid:1). Thus, in the veriﬁer, a new
name is represented by a function of the inputs and destruc-
tor applications that take place before its creation, and of
the session identiﬁers of replications. Thanks to the sessions
identiﬁers, we distinguish names created in different copies
of processes, so different names in the process calculus are
represented by different patterns in the veriﬁer.
The rules use the following facts:
(cid:12) (cid:2)(cid:2)(cid:3)
facts
(cid:8)
(cid:0)(cid:5) (cid:0)
(cid:10)
(cid:0)	(cid:5)(cid:6)(cid:5) (cid:0)
(cid:12)(cid:8)(cid:13)
attacker knowledge
channel messages
communication on 
uniﬁcation test
bad
The fact (cid:8) means that the attacker may have . The fact
(cid:0)(cid:5) (cid:0) means that the message (cid:0) may appear on chan-
nel . The fact (cid:10) means that the attacker may be able
to perform a communication on channel , which makes it
possible for it to test whether  is a name or not. The fact
(cid:0)	(cid:5)(cid:6)(cid:5) (cid:0) is deﬁned as follows. We say that a pattern
or a set of patterns contains bound names when it contains
subterms of the form (cid:2)(cid:4)(cid:8) (cid:8) (cid:8)(cid:5) where (cid:2) corresponds to a re-
striction in the process. In the following, we set (cid:4)(cid:5) (cid:6) and
(cid:13)(cid:1) as in Proposition 1.
Deﬁnition 3 Let (cid:5) (cid:0) be closed patterns. We say that
(cid:0)	(cid:5)(cid:6)(cid:5) (cid:0) is true if and only if there exists a (cid:13) closed
substitution of domain (cid:4)(cid:5)(cid:6) (cid:0) (cid:0)(cid:1)(cid:2) such that (cid:13)(cid:4)(cid:5) (cid:6) does
not contain bound names and (cid:13) (cid:3) (cid:13) (cid:0), and there ex-
ists no (cid:13) (cid:0) closed substitution of domain (cid:0)(cid:1)(cid:2) such that
(cid:13) (cid:0) (cid:3) (cid:13) (cid:0)(cid:0).
In the particular case when  and (cid:0) are closed patterns con-
taining no element of (cid:0)(cid:1)(cid:2), (cid:0)	(cid:5)(cid:6)(cid:5) (cid:0) is true when 
and (cid:0) unify for some values of the secrets, but  (cid:1)(cid:3) (cid:0), so
there exist other values of the secrets that make  and (cid:0) dif-
ferent. In other words, testing equality of  and (cid:0) gives
some information on the values of the secrets. For in-
stance, (cid:0)	(cid:5)(cid:6)(cid:5)(cid:6)(cid:9)(cid:14)(cid:1)(cid:5) (cid:10)(cid:5) (cid:5)(cid:6)(cid:9)(cid:7)(cid:5) (cid:10) is true,
because equality of (cid:5)(cid:6)(cid:9)(cid:14)(cid:1)(cid:5) (cid:10) and (cid:5)(cid:6)(cid:9)(cid:7)(cid:5) (cid:10)
tells whether the secret (cid:7) is (cid:14)(cid:1).
In the general case, (cid:0)	(cid:5)(cid:6)(cid:5) (cid:0) is true when the an-
swer to the question “do there exist values of elements
of (cid:0)(cid:1)(cid:2) that make  and (cid:0) unify?” depends on the val-
ues of the secrets. As we explain next, the predicate (cid:0)	(cid:5)(cid:6)
can be used to determine when the success or failure of a de-
structor application may give some information on the
values of the secrets. We deﬁne (cid:0)(cid:1)(cid:2)  as the pattern  af-
ter substituting distinct new elements of (cid:0)(cid:1)(cid:2) for variables.
Consider a destructor (cid:15) deﬁned by (cid:15)(cid:0)(cid:5) (cid:8) (cid:8) (cid:8) (cid:5)  (cid:2) .
The destructor application (cid:15)(cid:0)(cid:5) (cid:8) (cid:8) (cid:8) (cid:5)  succeeds for
some, but not all, values of the secrets, if and only if
true.
(cid:0)	(cid:5)(cid:6)(cid:0)(cid:5) (cid:8) (cid:8) (cid:8) (cid:5) (cid:5) (cid:0)(cid:1)(cid:2) (cid:0)(cid:5) (cid:8) (cid:8) (cid:8) (cid:5) 
is
Proceedings of the 2004 IEEE Symposium on Security and Privacy (S&P’04)  
1081-6011/04 $ 20.00 © 2004 IEEE 
For example, consider the destructor (cid:1)(cid:2)(cid:3)(cid:5) (cid:3) deﬁned
by (cid:1)(cid:2)(cid:3)(cid:5) (cid:3)(cid:2)(cid:3)(cid:5)(cid:3)(cid:0)(cid:1) (cid:8) (cid:2)(cid:1) (cid:3)(cid:1) (cid:2) (cid:0) (cid:0). The
fact (cid:1)	(cid:5)(cid:6)(cid:7)(cid:1) (cid:8) (cid:0)(cid:2) (cid:3)(cid:1) (cid:2)(cid:3)(cid:5)(cid:3)(cid:1)(cid:1) (cid:8) (cid:1)(cid:0)(cid:1) (cid:1)(cid:0)(cid:0)(cid:1) (cid:1)(cid:0)
is true, because the uniﬁcation succeeds for some val-
ues of (cid:1), (cid:1)(cid:0), and (cid:1)(cid:0)(cid:0), only when (cid:7) is of
the form
(cid:2)(cid:3)(cid:5) (cid:3)(cid:0)(cid:1) (cid:8) (cid:8) (cid:0)(cid:2) (cid:3)(cid:1) (cid:0). That
the destruc-
tor application (cid:1)(cid:2) (cid:3)(cid:5)(cid:3)(cid:7)(cid:1) (cid:8) (cid:0)(cid:2) (cid:3) succeeds when (cid:7)
is of the form (cid:2)(cid:3)(cid:5) (cid:3)(cid:1)(cid:1) (cid:8) (cid:8) (cid:0)(cid:2) (cid:3)(cid:1) (cid:0), which
gives some information on the value of (cid:7). The predi-
cate (cid:1)	(cid:5)(cid:6) is not deﬁned by clauses, but by special
simpliﬁcation steps in the solver, deﬁned in Section 5.
is,
The predicate (cid:8)(cid:9)(cid:10) serves in detecting violations of strong
secrecy: When (cid:8)(cid:9)(cid:10) is not derivable, strong secrecy is true.
Next we deﬁne the rules representing the abilities of the
attacker and the actions of the honest participants.
Rules for the attacker The abilities of the attacker are repre-
sented by the following rules. These rules encode the worst
actions that can be performed by any process 	 represent-
ing the attacker.
For each (cid:6) (cid:1) (cid:10)(cid:2), (cid:9)(cid:6)(cid:2) (cid:3)
(cid:9)(cid:8)  (cid:9)(cid:9)(cid:2)(cid:8)(cid:3) where (cid:9) (cid:10)(cid:1) (cid:10)(cid:2)