### 文件管理

#### 1. 扩展属性列表
`llistxattr()` 和 `listxattr()` 函数用于列出文件或路径的扩展属性。`flistxattr()` 则通过文件描述符来操作文件。

- **函数原型**:
  ```c
  #include <sys/types.h>
  #include <sys/xattr.h>
  ssize_t llistxattr(const char *path, char *list, size_t size);
  ssize_t listxattr(const char *path, char *list, size_t size);
  ssize_t flistxattr(int fd, char *list, size_t size);
  ```

- **返回值**:
  - 成功时返回扩展属性名称列表的总长度。
  - 失败时返回 `-1` 并设置 `errno`：
    - `EACCESS`: 调用进程没有足够的权限访问 `path` 或文件描述符。
    - `EBADF`: 对于 `flistxattr()`, 无效的文件描述符。
    - `EFAULT`: 无效的 `path` 或 `list` 参数。
    - `ELOOP`: `path` 中包含过多的符号链接。
    - `ENAMETOOLONG`: `path` 太长。
    - `ENOENT`: `path` 不存在。
    - `ENOMEM`: 内存不足。
    - `ENOTDIR`: `path` 不是目录。
    - `ENOTSUPP`: 文件系统不支持扩展属性。
    - `ERANGE`: `size` 小于实际需要的空间。调用者可以先调用一次获取所需大小，然后重新调用。

#### 2. 删除扩展属性
`removexattr()`, `lremovexattr()` 和 `fremovexattr()` 函数用于删除文件或路径的扩展属性。

- **函数原型**:
  ```c
  #include <sys/types.h>
  #include <sys/xattr.h>
  int removexattr(const char *path, const char *name);
  int lremovexattr(const char *path, const char *name);
  int fremovexattr(int fd, const char *name);
  ```

- **返回值**:
  - 成功时返回 `0`。
  - 失败时返回 `-1` 并设置 `errno`：
    - `EACCESS`: 调用进程没有足够的权限访问 `path` 或文件描述符。
    - `EBADF`: 对于 `fremovexattr()`, 无效的文件描述符。
    - `EFAULT`: 无效的 `path` 或 `name` 参数。
    - `ELOOP`: `path` 中包含过多的符号链接。
    - `ENAMETOOLONG`: `path` 太长。
    - `ENOATTR`: 指定的扩展属性不存在。
    - `ENOENT`: `path` 不存在。
    - `ENOMEM`: 内存不足。
    - `ENOTDIR`: `path` 不是目录。
    - `ENOTSUPP`: 文件系统不支持扩展属性。

#### 3. 目录管理
Unix 系统中的文件和目录通过 inode 进行映射。inode 包含了文件的元数据信息。

- **当前工作目录**:
  - 获取当前工作目录:
    ```c
    #include <unistd.h>
    char *getcwd(char *buf, size_t size);
    ```
    - 返回值: 成功时返回 `buf`，失败时返回 `NULL` 并设置 `errno`。
      - `EFAULT`: 无效的 `buf`。
      - `EINVAL`: `size` 为 `0` 且 `buf` 不为 `NULL`。
      - `ENOENT`: 当前工作目录无效。
      - `ERANGE`: `size` 太小，无法存储完整路径。

  - 更改当前工作目录:
    ```c
    #include <unistd.h>
    int chdir(const char *path);
    int fchdir(int fd);
    ```
    - 返回值: 成功时返回 `0`，失败时返回 `-1` 并设置 `errno`。
      - `EACCESS`: 调用进程没有足够的权限访问 `path` 或文件描述符。
      - `EFAULT`: 无效的 `path`。
      - `EIO`: 内部 I/O 错误。
      - `ELOOP`: `path` 中包含过多的符号链接。
      - `ENAMETOOLONG`: `path` 太长。
      - `ENOENT`: `path` 不存在。
      - `ENOMEM`: 内存不足。
      - `ENOTDIR`: `path` 不是目录。

- **创建目录**:
  ```c
  #include <sys/stat.h>
  #include <sys/types.h>
  int mkdir(const char *path, mode_t mode);
  ```
  - 返回值: 成功时返回 `0`，失败时返回 `-1` 并设置 `errno`。
    - `EACCESS`: 调用进程没有足够的权限写入 `path` 的父目录。
    - `EEXIST`: `path` 已存在。
    - `EFAULT`: 无效的 `path`。
    - `ELOOP`: `path` 中包含过多的符号链接。
    - `ENAMETOOLONG`: `path` 太长。
    - `ENOENT`: `path` 的父目录不存在。
    - `ENOMEM`: 内存不足。
    - `ENOSPC`: `path` 所在设备空间不足。
    - `ENOTDIR`: `path` 的某个部分不是目录。
    - `EPERM`: 权限不足。
    - `EROFS`: `path` 所在文件系统是只读的。

- **移除目录**:
  ```c
  #include <unistd.h>
  int rmdir(const char *path);
  ```
  - 返回值: 成功时返回 `0`，失败时返回 `-1` 并设置 `errno`。
    - `EACCESS`: 调用进程没有足够的权限写入 `path` 的父目录。
    - `EBUSY`: `path` 正在被使用。
    - `EFAULT`: 无效的 `path`。
    - `EINVAL`: `path` 是 `.` 或 `..`。
    - `ELOOP`: `path` 中包含过多的符号链接。
    - `ENAMETOOLONG`: `path` 太长。
    - `ENOENT`: `path` 不存在。
    - `ENOMEM`: 内存不足。
    - `ENOTDIR`: `path` 的某个部分不是目录。
    - `ENOTEMPTY`: `path` 不为空。
    - `EPERM`: 权限不足。
    - `EROFS`: `path` 所在文件系统是只读的。

- **读取目录内容**:
  ```c
  #include <dirent.h>
  DIR *opendir(const char *name);
  struct dirent *readdir(DIR *dir);
  int closedir(DIR *dir);
  ```

  - `opendir()` 打开一个目录流。
  - `readdir()` 读取目录流中的下一个条目。
  - `closedir()` 关闭目录流。

  - `struct dirent` 结构体:
    ```c
    struct dirent {
        ino_t d_ino;          /* inode number */
        off_t d_off;          /* offset to the next dirent */
        unsigned short d_reclen; /* length of this record */
        unsigned char d_type; /* type of file */
        char d_name[256];     /* filename */
    };
    ```

这些函数和结构体提供了对文件和目录的基本操作，包括扩展属性的管理和目录内容的读取。