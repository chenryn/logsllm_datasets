文件理
llistxattr()  listxattr()  path 时出
文件相的扩展属性。以的
空间的属性能调。
flistxattr() 操作文件 fd方 listxattr() 。
时调 -1设 errno
EACCESS
调的进程对 path 的（
 listxattr()  llistxattr()。
EBADF
效的 fd（ flistxattr()。
EFAULT
效的 path 或 list 。
ELOOP
 path 。（ listxattr() 
llistxattr()。
ENAMETOOLONG path （ listxattr()  llistxattr()。
ENOENT
 path 的存（ listxattr()  llistx-
attr()。
ENOMEM
内存。
ENOTDIR
 path （ listxattr()  llistx-
attr()。
ENOTSUPP
path 或 fd 的文件扩展属性。
ERANGE
size 零小存。程能
设 size  0调的实小。程能
 value新调调。
扩展属性。调给文件给
#include 
#include 
int removexattr (const char *path, const char
*key);
int lremovexattr (const char *path, const char
*key);
int fremovexattr (int fd, const char *key);
调 removexattr() 文件 path 扩展属性 key。
空的（零的。
– 222 –
 7 
文件理
lremovexattr()  removexattr()  path 
文件的扩展属性。空间的属性能
调。
fremovexattr() 操作文件 fd方 removexattr() 。
时调 0。时调 -1
设 errno
EACCESS
调的进程对 pat 的（
 removexattr()  lremovexattr()。
EBADF
效的 fd（ fremovexattr()。
EFAULT
效的 path 或 key 。
ELOOP
 path 。（ removexattr()
 lremovexattr()。
ENAMETOOLONG path （ removexattr()  lremovexattr()。
ENOATTR
给文件存 key。
ENOENT
 path 的存（ removexattr() 
lremovexattr()。
ENOMEM
内存。
ENOTDIR
 path 的（ removexattr() 
lremovexattr()。
ENOTSUPP
path 或 fd 的文件扩展属性。
7.2 目录
 Unix单的文件的文件对
 inode 。文件 inode 的映射。
内（的 ls 的文件。
的文件时内文件对的 inode 
。然内将 inode 给文件文件文件设
备上的理。
能。子的。
文件真的 / 的子。
（ root 的 /root 。
– 223 –
 7 
文件理
文件及或。绝对以
的 /usr/bin/sextant。相对以的
bin/sextant。的效操作的相对。
工作（作。
文件能（delineate的/
的 null 以的。的
效,ASCII 。内 C 的
程效。
的 Unix 文件 14 。 Unix 文件
文件 255 。∗Linux 文件更的
文件。†
7.2.1 当前工作目录
进程时进程的。
的进程工作（cwd。工作内相对时的
。进程的工作 /home/blackbeard进程
 parrot.jpg内将 /home /blackbeard/parrot.jpg。相进程
 /usr/bin/mast, 内将 /usr/bin/mast工作对绝对
（以 / 的。
进程以及更工作。
7.2.1.1 获取当前工作目录
工作的方 POSIX 的调 getcwd()
#include 
char * getcwd (char *buf, size_t size);
调 getcwd( ) 以绝对式工作 buf 
的 size 的 buf 的。时调
NULL设 errno
∗ 255  255 。然。
†然 Linux 提对的文件提性 FAT然们自的
。对 FAT”.”。的文件
.作的。
– 224 –
 7 
文件理
EFAULT
效的 buf 。
EINVAL
size  0 buf  NULL。
ENOENT 工作效。工作时。
ERANGE size 小将工作存 buf。程更
的。
 getcwd() 的子
char cwd[BUF_LEN];
if (!getcwd (cwd, BUF_LEN)) {
perror (”getcwd”);
exit (EXIT_FAILURE);
}
printf (”cwd = %s\n”, cwd);
POSIX 出 buf  NULL getcwd() 的的。
 Linux 的 C 将 size 的存工作
。 size  0 C 将小的存工作。调
程 free() 。 Linux 的处理方
式或 POSIX 的程方式。
性的单子
char *cwd;
cwd = getcwd (NULL, 0);
if (!cwd) {
perror (”getcwd”);
exit (EXIT_FAILURE);
}
printf (”cwd = %s\n”, cwd);
free (cwd);
Linux 的 C 提 get current dir name( ) buf  Null  size 
0 时 getcwd( ) 
#define _GNU_SOURCE
– 225 –
 7 
文件理
#include 
char * get_current_dir_name (void);
的相同
char *cwd;
cwd = get_current_dir_name ( );
if (!cwd) {
perror (”get_current_dir_name”);
exit (EXIT_FAILURE);
}
printf (”cwd = %s\n”, cwd);
free (cwd);
的 BSD 喜调 getwd() Linux 对提
#define _XOPEN_SOURCE_EXTENDED /* or _BSD_SOURCE
*/
#include 
char * getwd (char *buf);
调 getwd（工作 PATH MAX 的 buf。
时调 buf 时 NULL。
char cwd[PATH_MAX];
if (!getwd (cwd)) {
perror (”getwd”);
exit (EXIT_FAILURE);
}
printf (”cwd = %s\n”, cwd);
出性性的原程 getwd()
getcwd()。
7.2.1.2 更改当前工作目录
时进程 login 设工作 /etc/passwd
的。时进程更工作。 cd
– 226 –
 7 
文件理
时 shell 工作。
Linux 更工作提调
的文件
#include 
int chdir (const char *path);
int fchdir (int fd);
调 chdir() 更工作 path 的绝对或相对
以。同调 fchdir() 更工作文件 fd 的
 fd 的。时调 0。时 -1。
时 chdir() 设 errno
EACCESS
调的进程对 path 的。
EFAULT
效的 path 。
EIO
内 I/O 。
ELOOP
内 path 时。
ENAMETOOLONG path 。
ENOENT
path 的存。
ENOMEM
内存。
ENOTDIR
 path 的或。
fchdir() 设 errno
EACCESS 调的进程对 fd 的的（设
。读时出
。 open()  fchdir() 。
EBADF
fd 的文件。
对同的文件调能的。
调对进程。 Unix 更同进程工
作的。 shell 的 cd 的进程（
chdir() 出。 shell 
调 chdir() 工作 cd 内。
getcwd() 存工作进程能。
– 227 –
 7 
文件理
char *swd;
int ret;
/* save the current working directory */
swd = getcwd (NULL, 0);
if (!swd) {
perror (”getcwd”);
exit (EXIT_FAILURE);
}
/* change to a different directory */
ret = chdir (some_other_dir);
if (ret) {
perror (”chdir”);
exit (EXIT_FAILURE);
}
/* do some other work in the new directory... */
/* return to the saved directory */
ret = chdir (swd);
if (ret) {
perror (”chdir”);
exit (EXIT_FAILURE);
}
free (swd);
open() 调 fchdir()方更。内内
存存工作的存 inode以方更。
何时调 getcwd()内。相
工作的更内 inode, 
文件。的方
int swd_fd;
swd_fd = open (”.”, O_RDONLY);
if (swd_fd == -1) {
perror (”open”);
– 228 –
 7 
文件理
exit (EXIT_FAILURE);
}
/* change to a different directory */
ret = chdir (some_other_dir);
if (ret) {
perror (”chdir”);
exit (EXIT_FAILURE);
}
/* do some other work in the new directory... */
/* return to the saved directory */
ret = fchdir (swd_fd);
if (ret) {
perror (”fchdir”);
exit (EXIT_FAILURE);
}
/* close the directory’s fd */
ret = close (swd_fd);
if (ret) {
perror (”close”);
exit (EXIT_FAILURE);
}
 shell 存以的方（ bash  cd。
工作的进程（进程调 chdir(”/”) 设
工作 /。及及的程 (文处
理) 设工作或的文。工
作相对相更工作 shell 调的
实工实的。
7.2.2 创建目录
Linux 新提的 POSIX 调
#include 
– 229 –
 7 
文件理
#include 
int mkdir (const char *path, mode_t mode);
调 mkdir()  path（能相对或绝对
mode（ umask  0。
 umask 以方式 mode操作的式进
 Linux新的（mode & ˜umask & 01777。
umask 进程的 mkdir() 的。新的设
的 ID（sgid设或文件以 BSD 的方式新将
属。进程效 ID 将新。
调时 mkdir()  -1设 errno
EACCESS
进程对写或 path 的或
。
EEXIST
path 存（的。
EFAULT
效的 path 。
ELOOP
内 path 时。
ENAMETOOLONG path 。
ENOENT
path 存或空的。
ENOMEM
内存。
ENOSPC
 path 的设备空间或超。
ENOTDIR
path 的或。
EPERM
 path 的文件。
EROFS
 path 的文件读。
7.2.3 移除目录
 mkdir() 对的 POSIX 调 rmdir() 将文件上
#include 
int rmdir (const char *path);
调时 rmdir() 文件 path 0。. .. 
path 的空。调实 rm -r 的能。
的工文件文件
– 230 –
 7 
文件理
文件内的文件时以 rmdir() 
。
调时 rmdir()  -1设 errno
EACCESS
写 path 的或 path 的
。
EBUSY
 path。 Linux path 
或（ chroot( )时
能。
EFAULT
效的 path 。
EINVAL
path 的”.” 。
ELOOP
内 path 时。
ENAMETOOLONG path 。
ENOENT
path 存或效的。
ENOMEM
内存。
ENOTDIR
 path 的或。
ENOTEMPTY
path 的. .. 。
EPERM
path 的的（S ISVTX设进程
效 ID  path 的 ID进
程 CAP FOWNER 能。以上原
 path 的文件的。
EROFS
 path 的文件以读方式。
单的子
int ret;
/* remove the directory /home/barbary/maps */
ret = rmdir (”/home/barbary/maps”);
if (ret)
perror (”rmdir”);
7.2.4 读取目录内容
POSIX 读内的以
的文件。实 ls 或的文件存对时操
– 231 –
 7 
文件理
作给文件或给式的文件时
。
读内 DIR 对的
#include 
#include 
DIR * opendir (const char *name);
调 opendir()  name 的。
的文件存的内的
存内的。以给
的文件
#define _BSD_SOURCE /* or _SVID_SOURCE */
#include 
#include 
int dirfd (DIR *dir);
调 dirfd()  dir 的文件。时调 -1。
能内文件程能调操作文件
的调。 dirfd()  BSD 的扩展 POSIX  POSIX
的程。
7.2.4.1 从目录流读取
 opendir() 程以读。
readder()以给 DIR 对
#include 
#include 
struct dirent * readdir (DIR *dir);
调 readdir()  dir 的。 dirent 。
Linux 的  
struct dirent {
ino_t d_ino; /* inode number */
– 232 –
 7 
文件理
off_t d_off; /* offset to the next dirent */
unsigned short d_reclen; /* length of this
record */