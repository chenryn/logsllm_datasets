30.25 12.97 13.00 13.46 13.23 13.90 13.59 18.16 16.01 24.65 19.13
0
10 50 100 500 1000
クエリ化合物群の数[Q]
CPU(E5-2670v3) GTX980 GTX1080
 CPU版は、同等のロジックをC言语によるバイナリ版で実装して比较计测
 D化合物群の数は1000万レコード、Q化合物群の数は10,50,100,500,1000个の5通り
 最大で100亿通りの组合せを计算。これは実际の创薬ワークロードの规模と同等。
 HW) CPU: Xeon E5-2670v3, GPU: GTX980 / GTX1080, RAM:384GB
 SW) CentOS7, CUDA8.0, PostgreSQL v9.5 + PG-Strom v1.0
29 PGconf.ASIA - PL/CUDA / Fusion of HPC Grade Power with In-Database Analytics The PG-Strom Project
Another Usage
In-databaseでk-meansクラスタリング
30 PGconf.ASIA - PL/CUDA / Fusion of HPC Grade Power with In-Database Analytics The PG-Strom Project
クラスター分析
31 PGconf.ASIA - PL/CUDA / Fusion of HPC Grade Power with In-Database Analytics The PG-Strom Project
k-meansクラスタリング アルゴリズム
3. 各要素から最も近傍の
1. ランダムで初期クラスタ 2. 各クラスタ毎に
クラスタ中心点を选択。
を割り当て。 クラスタ中心点を计算
クラスタ割当てを更新。
32 PGconf.ASIA - PL/CUDA / Fusion of HPC Grade Power with In-Database Analytics The PG-Strom Project
k-meansクラスタリング アルゴリズム
5. 新しいクラスタ割当てに 6. クラスタ中心点が変动
1. ランダムで初期クラスタ
基づいて、クラスタ中心 しなくなったので计算终了
を割り当て。
点を再计算
4. 収束するか、一定回数に
达するまで缲り返し
33 PGconf.ASIA - PL/CUDA / Fusion of HPC Grade Power with In-Database Analytics The PG-Strom Project
PL/CUDAによるk-meansクラスタリングの実装
CREATE OR REPLACE FUNCTION :
gpu_kmeans(real[], -- ID + Data Matrix #plcuda_begin
int, -- k-value (number of clusters) :
int = 10, -- max number of iteration status = pgstromLaunchDynamicKernel4((void *)
int = 1) -- seed of initial randomness setup_initial_cluster,
RETURNS int[] (kern_arg_t)(D),
AS $$ (kern_arg_t)(R),
#plcuda_decl (kern_arg_t)(C),
: (kern_arg_t)(r_seed),
KERNEL_FUNCTION_MAXTHREADS(void) nitems, 0, 0);
update_centroid(MatrixType *D, if (status != cudaSuccess)
MatrixType *R, PLCUDA_RUNTIME_ERROR_RETURN(status);
MatrixType *C)
{ for (loop=0; loop < nloops; loop++)
: {
/* accumulate the local centroid */ :
for (did = get_global_id(); status = pgstromLaunchDynamicKernelMaxThreads3(
did < nitems; (void *)kmeans_update_cluster,
did += get_global_size()) (kern_arg_t)(D),
{ (kern_arg_t)(R),
/* pick up the target cluster */ (kern_arg_t)(C),
cid = r_values[nitems + did]; (kern_arg_t)k_value,
atomicAdd(&l_cent[cid], 1.0); nitems, 0,
for (index=1; index < width; index++) sizeof(cl_int) + sizeof(cl_float));
atomicAdd(&l_cent[index * k_value + cid], if (status != cudaSuccess)
d_values[index * nitems + did]); PLCUDA_RUNTIME_ERROR_RETURN(status);
} :
__syncthreads(); }
/* write back to the global C-matrix */ #plcuda_sanity_check gpu_kmeans_sanity_check
for (index = get_local_id(); #plcuda_working_bufsz gpu_kmeans_working_bufsz
index < width * k_value; #plcuda_results_bufsz gpu_kmeans_results_bufsz
index += get_local_size()) #plcuda_end
atomicAdd(&c_values[index], l_cent[index]); $$ LANGUAGE 'plcuda';
}
34 PGconf.ASIA - PL/CUDA / Fusion of HPC Grade Power with In-Database Analytics The PG-Strom Project
k-meansクラスタリングの検证に使用したデータ
▌データセットの概要
 测定区间毎に収集された自动车通行量の
パブリックデータ
 デンマーク・オーフス市(Arhus, Denmark)における
449観测点ののデータ。
 データ件数： 1350万件 （2014年2月～6月）
▌データに含まれるもの
 平均速度
 平均観测时间
 自动车台数
 测定区间（始点、终点）lの纬度・経
 など...
▌やった事
 平均速度や自动车台数によって测定区间を
５つのカテゴリに分割する。
35 PGconf.ASIA - PL/CUDA / Fusion of HPC Grade Power with In-Database Analytics The PG-Strom Project
GPU版k-means関数の呼出し
SELECT report_id, k, c
FROM (SELECT report_id, k, c,
Pick-up most frequent cluster
row_number() OVER (PARTITION BY report_id
ORDER BY c DESC) rank
FROM (SELECT report_id, k, count(*) c
FROM matrix_unnest(
(SELECT gpu_kmeans ( array_matrix(
int4_as_float4(report_id),
avg_measured_time,
Run k-means clustering logic
avg_speed,
vehicle_count),
5)
FROM tr_rawdata)
Make a matrix from the raw-data
) R(report_id int, k int)
GROUP BY report_id, k
) __summary_1
) __summary_2
WHERE rank = 1;
36 PGconf.ASIA - PL/CUDA / Fusion of HPC Grade Power with In-Database Analytics The PG-Strom Project
GPU版k-means (1/3) – 全データによるクラスタリング
$ wget -O map.png "`psql traffic -At -f ~/traffic.sql`"
バイパス道路？
环状道路？
市街地中心部へ
向かう道路？
37 PGconf.ASIA - PL/CUDA / Fusion of HPC Grade Power with In-Database Analytics The PG-Strom Project
GPU版k-means (2/3) – 日中と夜间
日中 (8-17) 夜间 (18-7)
38 PGconf.ASIA - PL/CUDA / Fusion of HPC Grade Power with In-Database Analytics The PG-Strom Project
GPU版k-means (3/3) – 平日と周末
平日 周末
39 PGconf.ASIA - PL/CUDA / Fusion of HPC Grade Power with In-Database Analytics The PG-Strom Project
GPU版k-means関数の呼出し
SELECT report_id, k, c
FROM (SELECT report_id, k, c,
row_number() OVER (PARTITION BY report_id
ORDER BY c DESC) rank
FROM (SELECT report_id, k, count(*) c
FROM matrix_unnest(
(SELECT gpu_kmeans ( array_matrix(
int4_as_float4(report_id),
avg_measured_time,
avg_speed,
vehicle_count),
5)
FROM tr_rawdata
WHERE extract('hour' from timestamp)
between 7 and 17
)
) R(report_id int, k int)
GROUP BY report_id, k
実は条件句を追加しただけ。
) __summary_1
（これがSQLの柔软性！）
) __summary_2
WHERE rank = 1;
40 PGconf.ASIA - PL/CUDA / Fusion of HPC Grade Power with In-Database Analytics The PG-Strom Project
パフォーマンス (1/3)
CPUによるk-meansの代表的実装として、
MADLib版 kemans_random() 関数を使用
41 PGconf.ASIA - PL/CUDA / Fusion of HPC Grade Power with In-Database Analytics The PG-Strom Project
パフォーマンス (2/3) – MADLib版k-meansクラスタリングの呼出し
SELECT report_id, k, c
FROM (SELECT report_id, k, c,
row_number() OVER (PARTITION BY report_id
最近傍クラスタの选択
ORDER BY c DESC) rank
FROM (SELECT t.report_id,
(madlib.closest_column(centroids,
t.attrs)).column_id as k,
count(*) c
FROM tr_rawdata_madlib_s t,
(SELECT centroids
FROM madlib.kmeans_random('tr_rawdata_madlib',
'attrs',
5)
) km;
GROUP BY t.report_id, k
) __summary_1
) __summary_2 クラスタ中心点の导出
WHERE rank = 1;
42 PGconf.ASIA - PL/CUDA / Fusion of HPC Grade Power with In-Database Analytics The PG-Strom Project
パフォーマンス (3/3) – GPU版 vs CPU版実装
Performance comparison of in-database k-means clustering
1800
1668.49
1600
]
c
e
1400
s
[
e m) r e 1200
t
it
Te
eb 1000
ss
ni x200倍高速化
r
oe 800
pw
so
eL
R※ 600
y(
r
e 400
u
Q
200 126.59
1.41 0.21 12.44 0.29 0.94 8.41
0
10,000 100,000 1,000,000 13,577,132
Number of Items that were clustered based on the k-means algorithm
MADLib PL/CUDA
 测定环境
 HW) CPU: Xeon E5-2670v3, GPU: GTX1080, RAM: 384GB
 SW) CentOS7, CUDA8.0, PostgreSQL v9.5 + PG-Strom v1.0, MADLib 1.9
 CPU版は、同等のロジックをC言语によるバイナリ版で実装して比较计测
43 PGconf.ASIA - PL/CUDA / Fusion of HPC Grade Power with In-Database Analytics The PG-Strom Project
まとめ
44 PGconf.ASIA - PL/CUDA / Fusion of HPC Grade Power with In-Database Analytics The PG-Strom Project
まとめ (1/3) – おさらい
▌PL/CUDAとは？
 PG-Stromのオリジナルのコンセプトは自动最适化／自动コード生成
 手动最适化と引换えに、PL/CUDAはGPU性能を最大限引き出すための手段。
たぶん、高度なアルゴリズムをSQLで书いている人はいないので正しい选択
▌利点
 TFLOPS级の计算エンジンをIn-Database Analyticsで使用できる。
 外部アプリケーションを使用する场合と异なり、データセット全体を
DBからエクスポートする必要がなくなる。
 取り出す必要があるのは “処理结果” だけ
 解析アルゴリズムの前処理/后処理で、SQLによる柔软なデータ操作が可能
 JOIN、GROUP BY、Window関数、etc...
45 PGconf.ASIA - PL/CUDA / Fusion of HPC Grade Power with In-Database Analytics The PG-Strom Project
まとめ (2/3) – 适用领域
▌実证実験① – 创薬领域における类似化合物検索
 化合物の特徴を fingerprint (= 特徴ベクトル)として表现。
GPUで类似度スコアを计算しスコア上位の组合せを抽出。
▌実证実験② – センサデータを用いた教师なし学习
 センサが生成した情报を用いてGPUで要素间距离を计算。
道路の特徴を抽出して数个のカテゴリへと自动分类。
▌考えられる适用领域
 化合物探索 ... 医薬、化学品、素材系
 レコメンデーションエンジン ... e-コマース领域
 アノマリー検知 ... セキュリティ分野
 データマイニング ... マーケティング
 ...など...
46 PGconf.ASIA - PL/CUDA / Fusion of HPC Grade Power with In-Database Analytics The PG-Strom Project
まとめ (3/3) – 课题と展望
▌技术面
 1GBを越えるサイズのArray-Matrixの取り扱い
PostgreSQL可変长データ型の制约により、SQL関数の个々の引数が
1GBより大きなサイズを持つ事ができない。
(↑12/1のdeveloper meetingでも议论する)
 缲り返し何度も同じArray-Matrixを使用する场合の処理コスト
GPU侧に静的なArray-Matrixを置いたままにできれば嬉しいかも。
▌运用面
 SQLとCUDAを両方书ける人はなかなか多くない。
“定番の” アルゴリズムをパッケージ化
専门エンジニアによるコンサルティング、构筑サービス
実证実験のお诱い、お待ちしております。
47 PGconf.ASIA - PL/CUDA / Fusion of HPC Grade Power with In-Database Analytics The PG-Strom Project
リソース
▌リポジトリ
https://github.com/pg-strom/devel
▌本日のスライド
http://www.slideshare.net/kaigai/pgconfasia2016-plcuda
▌コンタクト
 e-mail: PI:EMAIL
 Tw: @kkaigai
一绪に开発しようぜ！って人もお待ちしております。
48 PGconf.ASIA - PL/CUDA / Fusion of HPC Grade Power with In-Database Analytics The PG-Strom Project
Question?