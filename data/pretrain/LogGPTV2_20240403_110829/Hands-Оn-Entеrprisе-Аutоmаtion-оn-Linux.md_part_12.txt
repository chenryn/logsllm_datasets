### Chapter 5: Using Ansible to Build Virtual Machine Templates for Deployment

#### Building a CentOS 7.6 Virtual Machine Image on an Ubuntu 18.04 Server Host

In this chapter, we will guide you through the process of building a CentOS 7.6 virtual machine (VM) image using an Ubuntu 18.04 server as the build host. This involves several steps, including setting up the build environment, creating the VM disk image, and customizing the image using Ansible.

#### Step 1: Preparing the Build Host

Before starting, ensure that your build host is capable of running virtual machines. This typically requires CPU extensions available in most modern x86 systems. You can also use nested virtualization, where a VM runs within another VM, but you need to enable virtualization support in the build VM. The steps to do this vary depending on the hypervisor, so we will not cover them in detail here.

If you are using VMware for nested virtualization, you will need to enable code profiling support for the CPU and hypervisor applications. Some steps may fail if these settings are not enabled.

#### Step 2: Installing KVM Tools

Once your build host is ready, install the Linux Kernel-based Virtual Machine (KVM) toolset. On an Ubuntu host, run the following commands:

```bash
$ sudo apt-get install libvirt-bin libvirt-doc libvirt-clients virtinst libguestfs-tools libosinfo-bin
$ sudo gpasswd -a $USER libvirt
$ sudo gpasswd -a $USER kvm
$ logout
```

Note that you need to add your user account to the `libvirt` and `kvm` groups. Log out and log back in for these changes to take effect.

#### Step 3: Downloading the ISO Image

Download the ISO image for the CentOS 7.6 Standard Operating Environment (SOE). For example:

```bash
$ wget http://vault.centos.org/7.6.1810/isos/x86_64/CentOS-7-x86_64-Minimal-1810.iso
```

#### Step 4: Creating the Virtual Machine Disk Image

Create an empty virtual machine disk image in the Quick Copy On Write (QCOW2) format, which is compatible with OpenStack and most public cloud platforms. To create a 20 GB QCOW2 image, run:

```bash
$ qemu-img create -f qcow2 centos76-soe.qcow2 20G
```

If you are building exclusively for VMware, use the VMDK format instead:

```bash
$ qemu-img create -f vmdk centos76-soe.vmdk 20G
```

These commands create sparse images, which are only as large as the data and metadata they contain. They can be converted to pre-allocated images by your chosen hypervisor platform if needed.

#### Step 5: Installing the VM Image

Use the `virt-install` command to install the operating system on the VM. This command creates a temporary VM for OS installation. Here is an example command to create a CentOS 7 image from the downloaded ISO:

```bash
$ virt-install --virt-type kvm \
--name centos-76-soe \
--ram 1024 \
--cdrom=CentOS-7-x86_64-Minimal-1810.iso \
--disk path=/home/james/centos76-soe.qcow2,size=20,format=qcow2 \
--network network=default \
--graphics vnc,listen=0.0.0.0 \
--noautoconsole \
--os-type=linux \
--os-variant=centos7.0 \
--wait=-1
```

To connect to the VM and complete the installation, use the `virt-viewer` utility:

```bash
$ virt-viewer centos-76-soe
```

During the installation, choose the following options:
1. **KEYBOARD and LANGUAGE SUPPORT**: Select the most relevant options for your locale.
2. **DATE & TIME**: Set the appropriate date and time for your country.
3. **SOFTWARE SELECTION**: Choose Minimal Install (the default).
4. **INSTALLATION DESTINATION**: Select the single virtual hard drive attached to the VM.
5. **KDUMP**: Enable or disable as appropriate.
6. **NETWORK & HOST NAME**: Ensure networking is enabled.

#### Step 6: Customizing the VM

After the initial installation, log into the VM and perform any necessary customizations. In the next section, we will discuss using Ansible to configure deployed VMs. If the VM shuts down after the initial installation, undefine it and run it again with the following command:

```bash
$ virsh undefine centos-76-soe
$ virt-install --virt-type kvm \
--name centos-76-soe \
--ram 1024 \
--disk path=/home/james/centos76-soe.qcow2,size=20,format=qcow2 \
--network network=default \
--graphics vnc,listen=0.0.0.0 \
--noautoconsole \
--os-type=linux \
--os-variant=centos7.0 \
--boot=hd
```

Install the `cloud-init` utility to handle initial configuration when the VM is deployed:

```bash
$ yum -y install epel-release
$ yum -y install cloud-init cloud-utils-growpart dracut-modules-growroot
```

Customize `/etc/cloud/cloud.cfg` as needed for your environment.

#### Step 7: System Preparation and Compacting the Image

Prepare the image for deployment by wiping uniquely identifiable parameters and compacting the sparse image file. Use the following commands:

```bash
$ sudo virt-sysprep -a centos76-soe.qcow2
$ sudo virt-sparsify --compress centos76-soe.qcow2 centos76-soe-final.qcow2
```

This process cleans up various items such as SSH host keys, history files, local session configuration, log files, and MAC address references in network configuration.

#### Using Ansible to Build and Standardize the Template

Now that you have a base Linux image, you can use Ansible to customize it. Common tasks include transferring files, installing packages, editing configuration files, and validating the image.

##### Transferring Files into the Image

Create an inventory file and role directory structure. For example, create an inventory file like this:

```ini
[imagesetup]
192.168.81.141

[imagesetup:vars]
ansible_user=imagebuild
ansible_password=password
ansible_sudo_pass=password
```

Create the role directory structure:

```bash
$ mkdir -p roles/filecopyexample/tasks
$ mkdir -p roles/filecopyexample/files
```

Create sample files to copy across, such as a customized message of the day (`motd`) and a `chrony.conf` file.

```bash
# roles/filecopyexample/files/motd
------------------------
Enterprise Linux Template
Created with Ansible
------------------------

# roles/filecopyexample/files/chrony.conf
pool ntp.example.com iburst maxsources 4
keyfile /etc/chrony/chrony.keys
driftfile /var/lib/chrony/chrony.drift
logdir /var/log/chrony
maxupdateskew 100.0
rtcsync
makestep 1 3
```

Write the Ansible role to copy these files:

```yaml
# roles/filecopyexample/tasks/main.yml
---
- name: Copy new MOTD file, and backup any existing file if it exists
  copy:
    src: files/motd
    dest: /etc/motd
    owner: root
    group: root
    mode: '0644'
    backup: yes

- name: Copy across new chrony configuration, and backup any existing file if it exists
  copy:
    src: files/chrony.conf
    dest: /etc/chrony.conf
    owner: root
    group: root
    mode: '0644'
    backup: yes
```

By following these steps, you can build and customize a CentOS 7.6 VM image using Ansible, ensuring it is ready for deployment in your enterprise.