While it is possible that a network to which a real device is con-
nected may exhibit exactly the same network layout, it is unlikely.
Devices conﬁgured with cellular data plans will often user carrier
DNS resolvers and have a carrier DHCP lease for the device IP.
WIFI networks to which a device connects are also unlikely to be
conﬁgured in exactly this way, and are unlikely to exhibit the quiet
nature of a /24 network solely allocated to one emulated device.
Accessing network information is relatively straightforward us-
ing standard Java techniques. A trivial detection for the emulated
449Device
Emulator
Emulator
Emulator
Emulator
Emulator
Emulator
Emulator
Motorola Droid
Motorola Droid
HTC EVO 4G
Samsung Charge
Samsung Galaxy Nexus
Fingerprint
generic/sdk/generic/:1.5/CUPCAKE/150240:eng/test-keys
generic/sdk/generic/:1.6/Donut/20842:eng/test-keys
generic/sdk/generic/:2.1-update1/ECLAIR/35983:eng/test-keys
generic/sdk/generic/:2.2/FRF91/43546:eng/test-keys
generic/sdk/generic:2.3.3/GRI34/101070:eng/test-keys
generic/sdk/generic:4.1.2/MASTER/495790:eng/test-keys
generic/sdk/generic:4.2/JB_MR1/526865:eng/test-keys
verizon/voles/sholes/sholes:2.0.1/ESD56/20996:user/release-keys
verizon/voles/sholes/sholes:2.2.1/FRG83D/75603:user/release-keys
sprint/htc_supersonic/supersonic:2.3.3/GRI40/133994.1:user/release-keys
verizon/SCH-I510/SCH-I510:2.3.6/GINGERBREAD/EP4:user/release-keys
google/mysid/toro:4.1.1/JRO03O/424425:user/release-keys
Table 2: Listing of Build.FINGERPRINT’s collected from various instances. Emulator instances clearly include common substrings
not found in physical devices.
network would be to check for the four known IP addresses. The
false positives on this approach would be low and sufﬁce in most
situations. In order to obtain networking information and to inter-
act with the network, the Android application would need to request
the ACCESS_NETWORK_STATE and INTERNET permissions.
Detecting the underlying emulator.
The underlying emulator, QEMU, is employed to drive the hard-
ware emulation of the Android emulator. As such, any QEMU de-
tection techniques such as using CPU bugs [33] or virtual address
allocation [17] can also be employed against the Android emula-
tor. These techniques, however, require to run so-called native
code, that is, software that executes on the processor instead of
Android’s Dalvik VM. Such software must be compiled with the
Native Development Kit (NDK), and is only found in 4.52% of
applications [41]. Hence, malware that attempts to detect the un-
derlying emulator using native code may actually be easy to ﬂag as
suspicious.
Some CPU based detection mechanisms rely upon privileged in-
structions which cannot be used as part of a typical application.
Android uses Linux for privilege separation and each application
is installed under a different user ID. As is common in modern op-
erating systems the application code (both Dalvik and native code)
executes in user-mode. In order to use privileged instructions the
application must gain elevated privileges by “rooting” the device.
While this is certainly possible [37], many of the other techniques
discussed in this paper appear much simpler to deploy.
3.2 Differences in performance
The emulator, unassisted by hardware, is at a natural disadvan-
tage when it comes to processing speed. Translating the instruc-
tions for execution indeed inherently causes a performance penalty.
However, the emulator is typically run on a PC with considerably
more processing resources than a mobile device. Thus, it is plausi-
ble that, even with the instruction translation penalty, an emulator
could approximate the performance of a physical device. We tested
this hypothesis by 1) measuring CPU performance and 2) measur-
ing graphical performance.
3.2.1 CPU performance
Some hardware features often used for performance measure-
ments are unavailable to the application executing in user-mode.
For example, the performance counters on ARM processors are
enabled via the CP15 register and may only be enabled from the
privileged kernel—which will not be accessible unless the phone
is rooted. This limitation also poses a signiﬁcant barrier to us-
Device
Average Round
Standard
Duration (Seconds) Deviation
PC (Linux)
Galaxy Nexus (4.2.2)
Samsung Charge (2.3.6)
Motorola Droid (2.2)
Emulator 2.2
Emulator 4.2.2
0.153
16.798
22.647
24.420
62.184
68.872
0.012
0.419
0.398
0.413
7.549
0.804
Table 4: Pi calculation round duration on tested devices using
AGM technique (16 rounds). The tested devices are noticably
slower at performing the calculations than related devices run-
ning similar software.
ing many processor benchmarking software suites, which require
higher privilege than an Android application possesses.
We instead turn to a crude method of benchmarking: evaluating
the duration of lengthy computations. We created a Java Native
Interface (JNI) application for Android using the NDK. Our appli-
cation calculates the ﬁrst 1,048,576 digits of Pi using the method
described by Ooura [29]. Pi is calculated over 16 rounds of in-
creasing precision using Arithmetic-Geometric Mean (AGM) mak-
ing extensive use of Fast Fourier Transforms, square roots, multi-
plication, etc.
The AGM calculation shows signiﬁcantly different results when
comparing emulated instances with similar physical devices. Ta-
ble 4 shows the average and standard deviation for several tested
devices. For instance, executing the native application on a 4.2.2
emulator results in an median round duration of 68.8 seconds with
a total execution time of 1101.9 seconds. A 4.2.2 Galaxy Nexus
demonstrates a 16.8 second median round duration, and takes 268.8
seconds to complete. Comparatively, the PC hosting the emulator
executes the same code 2.5 seconds with a median of 0.15 sec-
ond/round (Linux PC). Round durations show statistically signiﬁ-
cant differences between emulated and non-emulated environments
(Wilcoxon test, W = 256, p  80% o f
1 f o r a v a l u e : v
2
3
4 AND
5
6 THEN
7
8
9
ELSE
v i s > 30 FPS
t h e s a m p l e d d e v i c e
t h e s a m p l e d d e v i c e
i s a p h y s i c a l d e v i c e
i s an e m u l a t o r
Figure 4: Sample heuristic using Frames Per Second (FPS) to
determine if an Android application is executing on a physical
device, indicated be high and closely-coupled FPS values.
and tightly coupled rates. By identifying FPS distributions that are
less coupled or slower, emulator instances can be identiﬁed.
Versions of the Android SDK after Revision 17 allow for lim-
ited emulator GPU acceleration, though only on Mac and Windows
systems. This feature is only meant to work for emulator instances
of Android 4.0.3 or later [11], but we tested several conﬁgurations
anyway. Figures 5 and 6 show FPS results from Mac and Windows
emulators and GPU-assisted emulators.
On the Mac, the 4.2.2 emulator instance, the only supported
platform, appears to behave considerably more like a physical de-
vice than the 4.2.2 emulator without assistance from the host GPU.
However, the GPU-assisted 4.2.2 emulator still registers visible
FPS rates in the 30-60 and 60-65 ranges, not the tightly coupled
plot of almost exclusively 59-60 FPS as observed in Figure 3. The
difference between the GPU-assisted 4.2.2 emulator on the Mac
and a real Galaxy Nexus, like all of the timing results, is statisti-
cally signiﬁcant (Wilcoxon test, W = 8.1 × 106, p < .001). On
the other hand, GPU assistance on Windows emulators does not
considerably improve upon collected values.
3.3 Differences in components
Modern devices are composed of complex combinations of hard-
ware subsystems that are all meant to work in concert. These sub-
systems all have their own physical implementations and often vary
from what is provide with the Android emulator. Likewise, devices
are shipped with proprietary software that drives special hardware,
interacts with web services, or implements speciﬁc functions such
as digital rights management. These hardware and software com-
ponents can both be used to differentiate physical devices from vir-
tual instances.
451y
c
n
e
u
q
e
r
F
 1200
 1000
 800
 600
 400
 200
 0
 0
 10
 20
 30
 40
 50
 60
 70
Frames Per Second (FPS)
2.2
2.2 w/GPU
2.3.3
2.3.3 w/GPU
4.2.2
4.2.2 w/GPU
Figure 5: GPU-Accelerated Emulator (Mac): The only sup-
ported version, 4.2.2, shows signiﬁcant improvement when us-
ing the host GPU (AMD Radeon 6750M - 1GB RAM). The
GPU-assisted 4.2.2 emulator more closely resembles a physi-
cal device, but still exhibits a visible tail through the 30-60 FPS
range.
y
c
n
e
u
q
e
r
F
 4000
 3500
 3000
 2500
 2000
 1500
 1000
 500
 0
 0
 5
 10
 15
 20
Frames Per Second (FPS)
2.2