Next, you need to download and install ldid, a small tool to view and manipu-
late code signatures and embedded entitlements plists:
$ curl -O http://networkpx.googlecode.com/fi les/ldid
% Total % Received % Xferd Average Speed Time Time Time Current
Dload Upload Total Spent Left Speed
100 32016 100 32016 0 0 91485 0 --:--:-- --:--:-- --:--:-- 123k
$ chmod a+x ldid
$ sudo mv ldid /usr/local/bin/
cc0033..iinndddd 5555 44//1166//22001122 55::4433::1133 PPMM
56 Chapter 3 n Encryption
If you did not select UNIX Development Support when you installed Xcode,
you need to manually create a symlink for codesign_allocate:
$ sudo ln -s
/Developer/Platforms/iPhoneOS.platform/Developer/usr/bin/codesign_allocate \
/usr/local/bin/
To modify an existing ramdisk, the iPhone Data Protection Tools include a
FUSE fi lesystem that understands the IMG3 fi le format that iOS uses for fi rmware
fi les. If you have not installed MacFUSE or OSXFuse on your system, you should
install the latest version of OSXFuse, which is currently better supported than
MacFUSE. You can download it and install it from http://osxfuse.github.com
or by using the command-line example shown here:
$ curl -O -L https://github.com/downloads/osxfuse/osxfuse/OSXFUSE-2.3.8.dmg
% Total % Received % Xferd Average Speed Time Time Time Current
Dload Upload Total Spent Left Speed
100 4719k 100 4719k 0 0 1375k 0 0:00:03 0:00:03 --:--:-- 1521k
$ hdiutil mount OSXFUSE-2.3.8.dmg
Checksumming Gesamte Disk (Apple_HFS : 0)…
...............................................................................
Gesamte Disk (Apple_HFS : 0): verifi ed CRC32 $D1B1950D
verifi ed CRC32 $09B79725
/dev/disk1 /Volumes/FUSE for OS X
$ sudo installer -pkg /Volumes/FUSE\ for\ OS\ X/Install\ OSXFUSE\ 2.3.pkg \
-target /
installer: Package name is FUSE for OS X (OSXFUSE)
installer: Installing at base path /
installer: The install was successful.
$ hdiutil eject /Volumes/FUSE\ for\ OS\ X/
“disk1” unmounted.
“disk1” ejected.
The iPhone Data Protection Tools’ Python scripts require the Python
Cryptography Toolkit (PyCrypto) to decrypt fi rmware images as well as fi les
or keychain items protected by Data Protection. You can install this library
quickly using Python’s easy_install command. You should install it ensuring
that it is built for both 32-bit x86 and 64-bit x86_64 as shown here:
$ sudo ARCHFLAGS=’-arch i386 -arch x86_64’ easy_install pycrypto
Searching for pycrypto
Reading http://pypi.python.org/simple/pycrypto/
Reading http://pycrypto.sourceforge.net
Reading http://www.amk.ca/python/code/crypto
Reading http://www.pycrypto.org/
Best match: pycrypto 2.5
Downloading http://ftp.dlitz.net/pub/dlitz/crypto/pycrypto/pycrypto-2.5.tar.gz
Processing pycrypto-2.5.tar.gz
cc0033..iinndddd 5566 44//1166//22001122 55::4433::1133 PPMM
Chapter 3 n Encryption 57
[...]
Installed /Library/Python/2.7/
site-packages/pycrypto-2.5-py2.7-macosx-10.7-intel.
egg
Processing dependencies for pycrypto
Finished processing dependencies for pycrypto
The Python scripts require a few other pure Python libraries: M2Crypto,
Construct, and ProgressBar. You should also install these using the easy_install
command.
$ sudo easy_install M2crypto construct progressbar
Searching for M2crypto
Reading http://pypi.python.org/simple/M2crypto/
Reading http://wiki.osafoundation.org/bin/view/Projects/MeTooCrypto
Reading http://www.post1.com/home/ngps/m2
Reading http://sandbox.rulemaker.net/ngps/m2/
Reading http://chandlerproject.org/Projects/MeTooCrypto
Best match: M2Crypto 0.21.1
Downloading http://chandlerproject.org/pub/Projects/MeTooCrypto/M2Crypto-0.21.1-
py2.7-macosx-10.7-intel.egg
[...]
Installed /Library/Python/2.7/site-packages/M2Crypto-0.21.1-py2.7-macosx-10.7-
intel.egg
Processing dependencies for M2crypto
Finished processing dependencies for M2crypto
Searching for construct
Reading http://pypi.python.org/simple/construct/
Reading https://github.com/MostAwesomeDude/construct
Reading http://construct.wikispaces.com/
Best match: construct 2.06
Downloading http://pypi.python.org/packages/source/c/construct/
construct-2.06.tar.gz#md5=edd2dbaa4afc022c358474c96f538f48
[...]
Installed /Library/Python/2.7/site-packages/construct-2.06-py2.7.egg
Processing dependencies for construct
Finished processing dependencies for construct
Searching for progressbar
Reading http://pypi.python.org/simple/progressbar/
Reading http://code.google.com/p/python-progressbar/
Reading http://code.google.com/p/python-progressbar
Best match: progressbar 2.3
Downloading http://python-progressbar.googlecode.com/fi les/
progressbar-2.3.tar.gz
[...]
Installed /Library/Python/2.7/site-packages/progressbar-2.3-py2.7.egg
Processing dependencies for progressbar
Finished processing dependencies for progressbar
cc0033..iinndddd 5577 44//1166//22001122 55::4433::1133 PPMM
58 Chapter 3 n Encryption
Finally, to download the latest copy of the iPhone Data Protection Tools, you
need to install the Mercurial source code management system. You can also do
this using easy_install, as shown here:
$ sudo easy_install mercurial
Searching for mercurial
Reading http://pypi.python.org/simple/mercurial/
Reading http://mercurial.selenic.com/
Reading http://www.selenic.com/mercurial
Best match: mercurial 2.1
Downloading http://mercurial.selenic.com/release/mercurial-2.1.tar.gz
Processing mercurial-2.1.tar.gz
[...]
Installing hg script to /usr/local/bin
Installed /Library/Python/2.7/site-packages/mercurial-2.1-py2.7-macosx-10.7-
intel.egg
Processing dependencies for mercurial
Finished processing dependencies for mercurial
At this point, all of the prerequisites should be installed. You are ready to
download the iPhone Data Protection Tools and build its custom ramdisk.
Building the Ramdisk
You should download the latest copy of the iPhone Data Protection Tools from
Google code using Mercurial (hg) as shown here:
$ hg clone https://code.google.com/p/iphone-dataprotection
destination directory: iphone-dataprotection
requesting all changes
adding changesets
adding manifests
adding file changes
added 38 changesets with 1921 changes to 1834 files
updating to branch default
121 files updated, 0 files merged, 0 files removed, 0 files unresolved
Now, you need to build the IMG3 FUSE fi lesystem from the img3fs/ sub-
directory. This FUSE fi lesystem module enables you to directly mount the
fi rmware disk images included in the iOS fi rmware packages (IPSW). The
ramdisk build scripts use this to modify the included ramdisk that is normally
used to install a new version of iOS on the mobile device.
$ cd iphone-dataprotection
$ make -C img3fs
gcc -o img3fs img3fs.c -Wall -lfuse_ino64 -lcrypto -I/usr/local/include/
osxfuse || gcc -o img3fs img3fs.c -Wall -losxfuse_i64 -lcrypto
-I/usr/local/include/osxfuse
[...]
cc0033..iinndddd 5588 44//1166//22001122 55::4433::1133 PPMM
Chapter 3 n Encryption 59
At this point, you should also download redsn0w, the iOS jailbreaking utility
developed by the iPhone Dev Team. The redsn0w application bundle includes
a plist fi le with the decryption keys for all previously released iOS fi rmware
images, which the build scripts will use to automatically decrypt the kernel and
ramdisk. A little later, you will also use redsn0w to boot the custom ramdisk.
You need to download redsn0w and create a symbolic link to its Keys.plist
fi le in the current directory, as shown here:
$ curl -LO https://sites.google.com/a/iphone-dev.com/fi les/home/\
redsn0w_mac_0.9.10b5.zip
% Total % Received % Xferd Average Speed Time Time Time Current
Dload Upload Total Spent Left Speed
100 14.8M 100 14.8M 0 0 1375k 0 0:00:11 0:00:11 --:--:-- 1606k
$ unzip redsn0w_mac_0.9.10b5.zip
Archive: redsn0w_mac_0.9.10b5.zip
creating: redsn0w_mac_0.9.10b5/
infl ating: redsn0w_mac_0.9.10b5/boot-ipt4g.command
infl ating: redsn0w_mac_0.9.10b5/credits.txt
infl ating: redsn0w_mac_0.9.10b5/license.txt
infl ating: redsn0w_mac_0.9.10b5/README.txt
creating: redsn0w_mac_0.9.10b5/redsn0w.app/
creating: redsn0w_mac_0.9.10b5/redsn0w.app/Contents/
infl ating: redsn0w_mac_0.9.10b5/redsn0w.app/Contents/Info.plist
creating: redsn0w_mac_0.9.10b5/redsn0w.app/Contents/MacOS/
infl ating: redsn0w_mac_0.9.10b5/redsn0w.app/Contents/MacOS/bn.tar.gz
infl ating: redsn0w_mac_0.9.10b5/redsn0w.app/Contents/MacOS/bootlogo.png
infl ating: redsn0w_mac_0.9.10b5/redsn0w.app/Contents/MacOS/bootlogox2.png
infl ating: redsn0w_mac_0.9.10b5/redsn0w.app/Contents/MacOS/Cydia.tar.gz
infl ating: redsn0w_mac_0.9.10b5/redsn0w.app/Contents/MacOS/Keys.plist
infl ating: redsn0w_mac_0.9.10b5/redsn0w.app/Contents/MacOS/progresslogo.png
infl ating: redsn0w_mac_0.9.10b5/redsn0w.app/Contents/MacOS/rd.tar
infl ating: redsn0w_mac_0.9.10b5/redsn0w.app/Contents/MacOS/redsn0w
extracting: redsn0w_mac_0.9.10b5/redsn0w.app/Contents/PkgInfo
creating: redsn0w_mac_0.9.10b5/redsn0w.app/Contents/Resources/
infl ating: redsn0w_mac_0.9.10b5/redsn0w.app/Contents/Resources/redsn0w.icns
$ ln -s redsn0w_mac_0.9.10b5/redsn0w.app/Contents/MacOS/Keys.plist .
Now, you need an iOS fi rmware update software archive (IPSW) to use as a
template for the forensics ramdisk. You should use the most recent version of
iOS 5 for the best results. The custom ramdisk is backward compatible and can
be used on devices running previous releases of iOS 4 or 5. If you are building
the ramdisk on a machine that was used to upgrade the fi rmware on an iOS
device, the IPSW will have been downloaded and stored in your home directory.
Otherwise, you can fi nd the URL for every known IPSW in the Keys.plist fi le
from redsn0w. Make sure that you are using the IPSW for the hardware model
with which you intend to use the forensics ramdisk. You should copy the IPSW
into the current directory, as shown in the following code (the command shown
assumes that you are building the forensics ramdisk for an iPod Touch 4G). The
cc0033..iinndddd 5599 44//1166//22001122 55::4433::1133 PPMM
60 Chapter 3 n Encryption
IPSW fi lenames include the hardware model name (iPod4,1), iOS version number
(5.0) and specifi c build number (9A334).
$ cp ~/Library/MobileDevice/Software\ Images/iPod4,1_5.0_9A334_Restore.ipsw .
For the ramdisk to function properly, it must be running with a modifi ed
kernel. The kernel_patcher.py script patches the kernelcache extracted from
the iOS fi rmware update IPSW archive to run in a jailbroken state. This disables
code signing so that the kernel will run arbitrary binaries. In addition, the kernel
is also patched to permit actions that are usually not allowed. For example,
the IOAESAccelerator kernel extension is patched to enable using the UID key
to encrypt or decrypt data, which is normally disallowed after the kernel has
fi nished booting. You should run the kernel_patcher.py script on your IPSW
to create a patched kernelcache and create a shell script that builds the ramdisk.
Pay attention to the fi lename of the script that is created, because it may differ
depending on the hardware model of your iOS device.
$ python python_scripts/kernel_patcher.py iPod4,1_5.0_9A334_Restore.ipsw
Decrypting kernelcache.release.n81
Unpacking ...
Doing CSED patch
Doing getxattr system patch
Doing _PE_i_can_has_debugger patch
Doing IOAESAccelerator enable UID patch
Doing AMFI patch
Patched kernel written to kernelcache.release.n81.patched
Created script make_ramdisk_n81ap.sh, you can use it to (re)build the ramdisk
The kernel_patcher.py script creates a script called make_ramdisk_n81ap.sh
to build the custom ramdisk. If you are using an IPSW for a different iOS device
model, your script may have a slightly different name. You should now run this
script to build the forensics ramdisk:
$ sh make_ramdisk_n81ap.sh
Found iOS SDK 5.0
[...]
Downloading ssh.tar.gz from googlecode
% Total % Received % Xferd Average Speed Time Time Time
Dload Upload Total Spent Left
100 3022k 100 3022k 0 0 1670k 0 0:00:01 0:00:01 --:--:--
Archive: iPod4,1_5.0_9A334_Restore.ipsw
infl ating: 018-7923-347.dmg
TAG: TYPE OFFSET 14 data_length:4
TAG: DATA OFFSET 34 data_length:104b000
TAG: SEPO OFFSET 104b040 data_length:4
TAG: KBAG OFFSET 104b05c data_length:38
KBAG cryptState=1 aesType=100
TAG: KBAG OFFSET 104b0a8 data_length:38
TAG: SHSH OFFSET 104b10c data_length:80
cc0033..iinndddd 6600 44//1166//22001122 55::4433::1144 PPMM
Chapter 3 n Encryption 61
TAG: CERT OFFSET 104b198 data_length:794
Decrypting DATA section
Decrypted data seems OK : ramdisk
/dev/disk1 /Volumes/ramdisk
“disk1” unmounted.
“disk1” ejected.
myramdisk.dmg created
You can boot the ramdisk using the following command (fi x paths)
redsn0w -i iPod4,1_5.0_9A334_Restore.ipsw -r myramdisk.dmg \
-k kernelcache.release.n81.patched
In the next section, you use redsn0w to boot the custom ramdisk that you
have just built.
Booting Ramdisk
You can now use redsn0w to boot your custom ramdisk. To do so, launch redsn0w
from the command line and specify the full path to your IPSW, ramdisk, and
patched kernel:
$ ./redsn0w_mac_0.9.10b5/redsn0w.app/Contents/MacOS/redsn0w -i
iPod4,1_5.0_9A334_Restore.ipsw -r myramdisk.dmg \
-k kernelcache.release.n81.patched
When redsn0w is launched with the preceding command, it skips the usual
initial screens and immediately shows the instructions in Figure 3.2. At this
point, you should make sure that the target iOS device is plugged in over USB
to the computer running redsn0w. If you know how to put the device into
DFU mode, you can do so now; redsn0w will detect this and automatically
boot the ramdisk.
Once your device is in DFU mode, redsn0w proceeds to exploit one of the
known vulnerabilities in the Boot ROM and injects its own raw machine code
payloads. These payloads disable the signature verifi cation of subsequent boot
stages and allow the booting of unsigned or improperly signed kernels and
ramdisks. This only temporarily jailbreaks the device and is what allows the
iPhone Data Protection Tools to boot a custom ramdisk and use it to acquire
data from the target device.
The custom ramdisk includes an SSH server for remote command-line access to
the device. This SSH server can be reached by proxying the network connection
through the USB protocol. Apple’s MobileDevice framework (included in Mac
OS X and installed with iTunes on Windows) includes the usbmuxd background
daemon. This daemon manages local software access to the iOS device’s USB
protocol. One of the features supported by this protocol is the tunneling of a
TCP socket connection over the USB protocol to a local TCP socket listening
on the iOS device. This is used internally by iTunes for a number of features,
but it can also be used to connect to custom software running on a jailbroken
cc0033..iinndddd 6611 44//1166//22001122 55::4433::1144 PPMM
62 Chapter 3 n Encryption
or temporarily jailbroken iOS device. In this case, use this feature to connect
to the SSH server running on the forensics ramdisk by running the tcprelay
.sh shell script:
$ sh tcprelay.sh
Forwarding local port 2222 to remote port 22