 count   
-------  
 10000  
(1 row)  
postgres=# select count(distinct c2) from t;  
 count    
--------  
 100001  
(1 row)  
postgres=# select count(distinct (c1,c2)) from t;  
s count    
--------  
 109999  
(1 row)  
postgres=# select 10000/109999.0;  
        ?column?          
------------------------  
 0.09090991736288511714  
(1 row)  
postgres=# select 100001/109999.0;  
        ?column?          
------------------------  
 0.90910826462058745989  
(1 row)  
postgres=# select 0.083733+0.916200;  
 ?column?   
----------  
 0.999933  
(1 row)  
```  
评估例子  
```  
a = ? and b = ? 的选择性   
=   
min( "选择性(a) * (a=>b)" , "选择性(b) * (b=>a)" )  
```  
8、SQL举例  
8\.1 多个字段条件  
```  
postgres=# explain (analyze) select * from tbl where c1=1 and c2='abc';  
                                               QUERY PLAN                                                 
--------------------------------------------------------------------------------------------------------  
 Seq Scan on tbl  (cost=0.00..243458.09 rows=96 width=45) (actual time=802.182..802.182 rows=0 loops=1)  
   Filter: ((c1 = 1) AND (c2 = 'abc'::text))  
   Rows Removed by Filter: 10000000  
 Planning time: 0.098 ms  
 Execution time: 802.203 ms  
(5 rows)  
```  
创建了多字段统计信息后，这两个条件在统计信息之列，所以可以用他们的依赖度来算组合AND条件的选择性。  
算法：选择性最低的条件的选择性 * 与另一个字段的依赖度，得到组合选择性。  
```  
0.642100 * (148/1e+07) * 1e+07 = 95.0308 (这里反推的选择性有一点失真，大概原理就是这样)  
```  
8\.2 多个字段条件求唯一值  
```  
postgres=# explain (analyze) select c1,c2,count(*) from tbl group by c1,c2;  
                                                          QUERY PLAN                                                             
-------------------------------------------------------------------------------------------------------------------------------  
 GroupAggregate  (cost=1561215.43..1698692.02 rows=3747653 width=17) (actual time=11632.613..16843.873 rows=5147139 loops=1)  
   Group Key: c1, c2  
   ->  Sort  (cost=1561215.43..1586215.45 rows=10000006 width=9) (actual time=11632.597..14202.457 rows=10000000 loops=1)  
         Sort Key: c1, c2  
         Sort Method: external merge  Disk: 185984kB  
         ->  Seq Scan on tbl  (cost=0.00..193458.06 rows=10000006 width=9) (actual time=0.008..1567.024 rows=10000000 loops=1)  
 Planning time: 0.215 ms  
 Execution time: 17246.889 ms  
(8 rows)  
```  
直接使用了多列统计信息中的唯一值统计信息3747653。  
```  
"2, 3": 3747653  
```  
9、如何利用自定义统计信息统计多个字段 唯一值、多列依赖性。  
9\.1 PostgreSQL已有了单列唯一值的统计，我们可以通过pg_stats.n_distinct以及pg_class.reltuples查询到。  
通过create statistic，数据库会自动收集多列值的统计信息，我们查询pg_statistic_ext.stxndistinct，可以得到多列唯一值的估计值。  
9\.2 多列依赖性指的是列与列之间值的依赖强度，是一个小于等于1的系数。1表示强依赖，  
## 小结  
1、PostgreSQL 10支持自定义多列统计信息，目前支持 多列组合唯一值、列与列的相关性。  
2、多列唯一值可用于评估group by, count(distinct)等。  
3、列与列相关性可用于估算多个列AND条件的选择性。算法  
```  
a = ? and b = ? 的选择性   
=   
min( "选择性(a) * (a=>b)" , "选择性(b) * (b=>a)" )  
```  
4、由于多列统计信息的组合很多，因此数据库默认只统计单列的柱状图。当用户意识到某些列会作为组合查询列时，再创建自定义多列统计信息即可。  
## 参考    
https://www.postgresql.org/docs/10/static/multivariate-statistics-examples.html  
https://www.postgresql.org/docs/10/static/sql-createstatistics.html  
https://www.postgresql.org/docs/10/static/planner-stats.html#planner-stats-extended  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")