http://httpd.apache.org/docs/2.0/
[2] Alexa top sites. http://www.alexa.com/topsites.
[3] BERNSTEIN, D. J. Curve25519: New Difﬁe-Hellman speed
records. Public Key Cryptography-PKC 2006 (2006), 207–228.
[4] BONEH, D. The decision Difﬁe-Hellman problem. Algorithmic
Number Theory (1998), 48–63.
[5] BONEH, D. J., GENTRY, C., LYNN, B., AND SHACHAM, H. Ag-
gregate and Veriﬁably Encrypted Signatures from Bilinear Maps.
In Proceedings of Advances in Cryptography — Eurocrypt 2003
(May 2003), pp. 416–432.
[6] DANEZIS, G., AND ANDERSON, R. The economics of censor-
ship resistance. In Proceedings of the 3rd Annual Workship on
Economics and Information Security (WEIS04) (May 2004).
[7] DANEZIS, G., AND DIAZ, C. Survey of anonymous communica-
tion channels. Computer Communications 33 (Mar. 2010).
[8] DIERKS, T., AND RESCORLA, E. The Transport Layer Security
(TLS) Protocol Version 1.2. RFC 5246 (Proposed Standard), Aug.
2008. Updated by RFCs 5746, 5878.
[9] DINGLEDINE, R.
Strategies for getting more bridge ad-
dresses. https://blog.torproject.org/blog/strategies-getting-more-
bridge-addresses, May 2011.
[10] DINGLEDINE, R., MATHEWSON, N., AND SYVERSON, P. Tor:
The second-generation onion router. In Proceedings of the 13th
USENIX Security Symposium (Aug. 2004).
[11] DOUCEUR, J. R. The Sybil attack. In Proc. International Work-
shop on Peer-to-Peer Systems (IPTPS) (2002), pp. 251–260.
[12] Dynaweb proxy. http://www.dit-inc.us/dynaweb.
[13] FEAMSTER, N., BALAZINSKA, M., HARFST, G., BALAKR-
ISHNAN, H., AND KARGER, D. Infranet: Circumventing web
censorship and surveillance. In Proceedings of the 11th USENIX
Security Symposium (Aug. 2002).
[14] FEAMSTER, N., BALAZINSKA, M., WANG, W., BALAKRISH-
NAN, H., AND KARGER, D. Thwarting web censorship with
untrusted messenger discovery. In Privacy Enhancing Technolo-
gies (2003), Springer, pp. 125–140.
[15] GLOBAL INTERNET FREEDOM CONSORTIUM. The Great Fire-
wall revealed. http://www.internetfreedom.org/ﬁles/WhitePaper/
ChinaGreatFirewallRevealed.pdf.
[16] GLOBAL INTERNET FREEDOM CONSORTIUM. Defeat inter-
net censorship: Overview of advanced technologies and prod-
ucts. http://www.internetfreedom.org/archive/Defeat_Internet_
Censorship_White_Paper.pdf, Nov. 2007.
[17] GOH, E.-J., BONEH, D., GOLLE, P., AND PINKAS, B. The De-
sign and Implementation of Protocol-based Hidden Key Recovery.
In Proceedings of the 6th Information Security Conference (Oct.
2003), pp. 165–179.
[18] HINTZ, A. Fingerprinting websites using trafﬁc analysis.
In
Privacy Enhancing Technologies, R. Dingledine and P. Syverson,
Eds., vol. 2482 of Lecture Notes in Computer Science. Springer
Berlin / Heidelberg, 2003, pp. 229–233.
[19] IP sets. http://ipset.netﬁlter.org/.
[20] JUELS, A., AND BRAINARD, J. Client puzzles: A cryptographic
In Pro-
countermeasure against connection depletion attacks.
ceedings of the 1999 Network and Distributed System Security
Symposium (NDSS) (Feb. 1999).
[21] LYON, G. Nmap Network Scanning. Nmap Project, 2009,
ch. Chapter 8: Remote OS Detection.
[22] MURDOCH, S. J., AND DANEZIS, G. Low-cost trafﬁc analysis of
tor. In Proceedings of the 2005 IEEE Symposium on Security and
Privacy (SP05) (2005).
[23] PAXSON, V. Bro: A system for detecting network intruders in
real time. Computer Networks 31 (1999), 2435–2463.
[24] PETERSON, L., ANDERSON, T., CULLER, D., AND ROSCOE,
T. A Blueprint for Introducing Disruptive Technology into the
Internet. In Proceedings of HotNets–I (Princeton, New Jersey,
October 2002).
[25] Squid HTTP proxy. http://www.squid-cache.org/.
[26] STEIN, W., AND JOYNER, D. Sage: System for algebra and
geometry experimentation. ACM SIGSAM Bulletin 39, 2 (2005),
61–64.
[27] THE TOR PROJECT. Tor: Bridges. https://www.torproject.org/
docs/bridges.
[28] THE TOR PROJECT. New blocking activity from Iran. https://
blog.torproject.org/blog/new-blocking-activity-iran, Jan. 2011.
[29] Transparent proxy support documentation. http://lxr.linux.no/
#linux+v2.6.37/Documentation/networking/tproxy.txt, Jan. 2011.
[30] UltraSurf proxy. http://www.ultrareach.com/.
[31] VALLENTIN, M., SOMMER, R., LEE, J., LERES, C., PAXON,
V., AND TIERNEY, B. The NIDS cluster: Scalable, stateful
network intrusion detection on commodity hardware. In Proc.
10th International Conference on Recent Advances in Intrusion
Detection (RAID ’07) (Sept. 2007), pp. 107–126.
[32] WATERS, B., JUELS, A., HALDERMAN, J. A., AND FELTEN,
E. W. New client puzzle outsourcing techniques for DoS resis-
tance. In Proceedings of the 11th ACM Conference on Computer
and Communications Security (CCS 2004) (Oct. 2004).
[33] WOLCHOK, S., YAO., R., AND HALDERMAN, J. A. Analysis
of the Green Dam Censorware System. Computer Science and
Engineering Division, University of Michigan 18 (2009).
A Tagging Details
Our system uses an elliptic curve E deﬁned over a ﬁeld of
prime order p. We choose p to be 3 mod 4, so that −1 will
be a quadratic nonresidue mod p. (z is a quadratic residue
mod p if there exists an integer y such that y2 ≡ z mod p.
Otherwise, z is a quadratic nonresidue mod p. Half of
√
the non-zero elements mod p are quadratic residues, and
half are nonresidues.) Let (cid:96)p be the bit length of p, and
ensure that 2(cid:96)p − p <
p. The curve E is deﬁned by the
equation y2 = x3 − 3x + b mod p for a particular value of
b.
For some values of x ∈ Fp, z = x3 − 3x + b will be a
quadratic residue mod p; for those values, y = z p+1
4 will
be a square root of z and (x,y) will be on the elliptic curve
E.
p.
The other values of x will never occur as the x-
coordinate of a point on the elliptic curve E; however, for
those values of x, −z will be a quadratic residue, y = z p+1
4
will be a square root of −z, and (x,y) will be a point on
the “twist” curve E(cid:48) deﬁned by −y2 = x3 − 3x + b. We
choose a value of b such that both E and E(cid:48) have prime
order over Fp. It is a fact about elliptic curves that the
orders o and o(cid:48) of E and E(cid:48) will satisfy o = p + 1−t and
√
o(cid:48) = p + 1 +t, for some |t| ≤ 2
Deﬁne a function φ : {0,1}(cid:96)p × {0,1}(cid:96)p → {0,1}(cid:96)p,
such that φ (r,x) is the point multiplication on the ellip-
tic curve (E or E(cid:48)) which contains a point X with x-
coordinate x. To compute φ (r,x), consider r and x as
integers expressed as little-endian strings. x will be the x-
coordinate of a point X = (x,y) on one of the curves. On
that curve, compute R = r·X, and output the x-coordinate
of R, expressed as a little-endian string. If R is the point
at inﬁnity (which happens if and only if r is a multiple of
the curve order), φ (r,x) is undeﬁned. We note that this
is the same function (albeit over different curves) as was
used by Bernstein in Curve25519 [3].
The tagging protocol is as follows:
Telex selects arbitrary generators of E and E(cid:48)
Setup
and publishes their x-coordinates as little-endian strings
g0 and g1. Since E and E(cid:48) have prime order, any non-
identity element is a generator of those groups. Telex
selects a random private key r ∈ {0,1}(cid:96)p, and publishes
α0 = φ (r,g0) and α1 = φ (r,g1). If either of those val-
ues is undeﬁned because r is a multiple of either group
order (this happens with probability less than 22−(cid:96)p), a
different value for r can be selected. Telex also pub-
lishes hash functions H1 : {0,1}∗ → {0,1}(cid:96)H1 and H2 :
{0,1}∗ → {0,1}(cid:96)H2 .
Client tag generation Given a context string χ, the
client selects a random s ∈ {0,1}(cid:96)p and a random bit
b ∈ {0,1}. The client computes β = φ (s,gb) and k =
φ (s,αb). (The bit b selects whether the client will be us-
ing E or E(cid:48).) In the extremely unlikely event (probability
approximately 21−(cid:96)p) that s is a multiple of the group
order, φ (s,αb) will be undeﬁned, and the client can select
a different s. The client publishes the tag β(cid:107)H1(k(cid:107)χ) and
stores the shared secret key H2(k(cid:107)χ) for later use. Again
viewing φ as point multiplication, we can see that the gen-
eration of the value k is just elliptic curve Difﬁe-Hellman;
we will exploit this fact in the security argument below.
Telex tag inspection Given a context string χ and a
purported ((cid:96)p + (cid:96)H1)-bit tag, the Telex station parses the
tag as β(cid:107)h where β is (cid:96)p bits and h is (cid:96)H1 bits. It computes
k(cid:48) = φ (r,β ) and h(cid:48) = H1(k(cid:48)(cid:107)χ). If h = h(cid:48), the Telex station
accepts the tag as valid, and outputs H2(k(cid:48)(cid:107)χ) as the
shared secret key for later use. Otherwise, it rejects the
tag as invalid.
A.1 Parameter selection
In our implementation, we use p = 2168 − 28 − 1 (and so
(cid:96)p = 168). Using sage version 4.5.2 [26], we searched
for an appropriate value of b by randomly selecting can-
didate values of b until the orders of E and E(cid:48) both
turned out to be prime. This search took only a few
minutes on an 8-core computer, and yielded the value b =
114301813541519167821195403070898020343878856329174. The
curve E has order p + 1 − t and the twist E(cid:48) has
order p + 1 + t (both of which are prime) for t =
−25904187505858679946718103.
g0 is the 168-bit
little-endian representation of the number 2, and g1 is
likewise of the number 0. The hash functions H1 and
H2 are both based on the SHA256 hash function; we se-
lect (cid:96)H1 = 56 and (cid:96)H2 = 128, and set H1 to be the ﬁrst
56 bits of the SHA256 output, and H2 to be the last 128
bits of the SHA256 output. The resulting tag length is
(cid:96)p + (cid:96)H1 = 224 bits, which is the size of the random por-
tion of a TLS ClientHello message.
Choosing (cid:96)p = 168 requires an adversary (under the
usual security assumptions for elliptic curves) to perform
284 computations in order to break the tagging scheme by
recovering the private key from the public key (and thus
violating the DDH assumption below). While we believe
this is sufﬁcient, there are a number of methods we can use
to guard against even more powerful adversaries. The ﬁrst
is that the key strength (2(cid:96)p/2) can be traded off against
the rate of false positives (2−(cid:96)H1 ) under the restriction that
(cid:96)p + (cid:96)H1 = 224. There are also other places [17] one can
hide random-looking bits in a TLS session, to increase
from the 224 bits we use to hide our tag. Next, we can
limit the utility of expending massive effort to recover
the Telex private key by having multiple keys that may
correspond to time, source, and/or destination. These
public keys could be bundled with the Telex client code.
Depending on the duration each public key is used, time-
based keys would have to be refetched periodically. As an
example, a system that switches public keys every hour
could bundle 1 million keys, enough to last for over 114
years, in only 42 MB of space.
A.2 Security argument
We must argue that an adversary, given g0, g1, α0, α1,
and a candidate tag τ, cannot determine whether τ was
an output from the above client tag generation algorithm
or was just a ((cid:96)p + (cid:96)H1 )-bit string generated uniformly at
random by a standard TLS client. Parsing τ as β(cid:107)h, we
claim that the distribution of β values is only negligibly
different from a uniform distribution of (cid:96)p-bit values, and
also that, under reasonable cryptographic assumptions,
given β , an adversary cannot distinguish the correct value
of h that would appear in a valid tag from a random (cid:96)H1-bit
value.
To see the former, consider the distribution of possible
values of β = φ (s,g0) as s ranges over {0,1}(cid:96)p. Treating
s as a number, this distribution is only negligibly differ-
ent from that resulting from the range 1 ≤ s < o, where
o is the order of E. The latter is the distribution of x-
coordinates of a uniformly selected (non-inﬁnity) point of
E. Let L0 be the set of values x ∈ Fp such that x3− 3x + b
is a quadratic residue. Then every value in L0 appears as
the x-coordinate of two points of E, except possibly for
up to 3 points whose y-coordinates are 0, which appear
only once each. The previous distribution is then only
negligibly different from the uniform distribution on L0.
If L1 is the set of values x ∈ Fp such that x3 − 3x + b is
a quadratic nonresidue, then the same argument shows
that the distribution of possible values of β = φ (s,g1)
is only negligibly different from a uniform distribution
on L1. The required distribution of β is then negligibly
different from the result of selecting a uniform element of
Lb where b is a uniform random bit. Since the sizes of L0
and L1 are negligibly different, and L0 and L1 are disjoint,
and the size of L0 ∪ L1 is p, which is negligibly different
from 2(cid:96)p (as we chose p to be only slightly smaller than a
power of 2), our result follows.
To see the latter, we require the Decision (Co-)Difﬁe-
Hellman (DDH and DCoDH) assumptions [4, 5]: that
no adversary, given the points P and rP, can distin-
An
adversary
can
from
{(φ (s,gb),H1(φ (s,αb)(cid:107)χ))}
guish the distributions {(Q,rQ)} and {(Q,r(cid:48)Q)} with
non-negligible advantage, where P and Q are points on ei-
ther E or E(cid:48) and r and r(cid:48) are selected uniformly at random
from their respective domains (or, as above, from [0,2(cid:96)p)).
If P are Q are on the same curve, this is DDH; if one is
on E and one on E(cid:48), this is DCoDH. We also need an
assumption on the properties of H1; namely, that for any
χ and any bit b, the distribution {H1(φ (s,αb)(cid:107)χ)} over
all s is indistinguishable from the uniform distribution on
(cid:96)H1-bit strings. (This is of course true if H1 is modelled
as a random oracle, but seems likely to be true for our
SHA256-based H1 as well.)
that
distinguish
{(φ (s,gb),H1(φ (s,αb)(cid:107)χ))}
{(φ (s,gb),$}
(where $ are uniform (cid:96)H1-bit values) can also
distinguish
from
{(φ (s,gb),H1(φ (s(cid:48),αb)(cid:107)χ))}
assumption
on H1. He can then distinguish {(φ (s,gb),φ (s,αb))}
from {(φ (s,gb),φ (s(cid:48),αb))} by taking hashes, and
{(sGb,sAb)} from {(sGb,s(cid:48)Ab)} by taking x-coordinates,
where Gb is the elliptic curve point with x-coordinate
gb and Ab is the elliptic curve point with x-coordinate
αb. Writing Q = sGb and r(cid:48) = s(cid:48)s−1, and noting
that Ab = rGb, this is the same as distinguishing the
distributions {(Q,rQ)} and {(Q,r(cid:48)Q)}, given Gb and
Ab = rGb, which is impossible by the DDH assumption.
Care must also be taken to ensure that the adversary’s
knowledge of (G1−b,A1−b) does not aid him, but this can
also be seen to be true by DCoDH.
In summary, under the DDH and DCoDH assumptions
on E and E(cid:48) and a random-looking-output assumption
on H1, an adversary who does not know Telex’s private
key r cannot distinguish valid tags from uniformly gen-
erated ((cid:96)p + (cid:96)H1)-bit strings with more than a negligible
advantage.
by
our