title:Enabling End-Host Network Functions
author:Hitesh Ballani and
Paolo Costa and
Christos Gkantsidis and
Matthew P. Grosvenor and
Thomas Karagiannis and
Lazaros Koromilas and
Greg O'Shea
Enabling End-host Network Functions
∗
Hitesh Ballani, Paolo Costa, Christos Gkantsidis, Matthew P. Grosvenor,
Thomas Karagiannis, Lazaros Koromilas,
Microsoft Research
Cambridge, UK
†
and Greg O’Shea
ABSTRACT
Many network functions executed in modern datacen-
ters, e.g.,
load balancing, application-level QoS, and
congestion control, exhibit three common properties at
the data plane: they need to access and modify state, to
perform computations, and to access application seman-
tics — this is critical since many network functions are
best expressed in terms of application-level messages.
In this paper, we argue that the end hosts are a natural
enforcement point for these functions and we present
Eden, an architecture for implementing network func-
tions at end hosts with minimal network support.
Eden comprises three components, a centralized con-
troller, an enclave at each end host, and Eden-compliant
applications called stages. To implement network func-
tions, the controller conﬁgures stages to classify their
data into messages and the enclaves to apply action
functions based on a packet’s class. Our Eden pro-
totype includes enclaves implemented both in the OS
kernel and on programmable NICs. Through case stud-
ies, we show how application-level classiﬁcation and the
ability to run actual programs on the data-path allows
Eden to eﬃciently support a broad range of network
functions at the network’s edge.
CCS Concepts
•Networks → Programmable networks; Network
management; Data center networks; Cloud comput-
ing;
∗Work performed while an intern with Microsoft Re-
†Work performed while an intern with Microsoft Re-
search; currently at Cambridge University, UK
search; currently at University of Crete, Greece
Permission to make digital or hard copies of all or part of this work for personal
or classroom use is granted without fee provided that copies are not made or
distributed for proﬁt or commercial advantage and that copies bear this notice
and the full citation on the ﬁrst page. Copyrights for components of this work
owned by others than ACM must be honored. Abstracting with credit is per-
mitted. To copy otherwise, or republish, to post on servers or to redistribute to
lists, requires prior speciﬁc permission and/or a fee. Request permissions from
permissions@acm.org.
SIGCOMM ’15, August 17 - 21, 2015, London, United Kingdom
c(cid:13) 2015 ACM. ISBN 978-1-4503-3542-3/15/08. . . $15.00
DOI: http://dx.doi.org/10.1145/2785956.2787493
Keywords
Software Deﬁned Networking; SDN; Network Manage-
ment; Data-plane programming; Network Functions
1 Introduction
Recent years have seen a lot of innovation in functional-
ity deployed across datacenter networks. Network func-
tions range from management tasks like load balanc-
ing [65, 4, 26, 1, 40] and Quality of Service (QoS) [9,
39, 10, 33, 52, 61, 6, 28] to data-plane tasks like (central-
ized) congestion control and network scheduling [48, 27,
64, 45, 30] to application-speciﬁc tasks like replica selec-
tion [17]. Today, such functions are implemented using
a mishmash of techniques and at a variety of places—at
network switches using SDN and OpenFlow, at physi-
cal or virtual middleboxes using NFV, and at end hosts
through Open vSwitch or custom implementations.
Despite their diﬀerences, three common requirements
characterize a large fraction of network functions:
i)
they maintain state at the data plane, ii) they perform
computation at the data plane, and iii) they operate on
application semantics. The last feature is particularly
important since many network functions are best ex-
pressed in terms of application data units or “messages”.
For example, a load balancing function for memcached,
a popular key-value store, may put its messages into
two “classes” (GETs and PUTs) and treat them diﬀer-
ently. It may even use message-speciﬁc details like the
key being accessed for load balancing [40].
Traditional network management approaches imple-
ment network functions completely decoupled from ap-
plications. They infer the application message a packet
belongs to using deep packet inspection or through other
heuristics. Instead, we propose messages and classes as
ﬁrst-order abstractions at the network layer. A mes-
sage refers to an (arbitrary) application data unit while
a class is the set of messages (and consequent network
packets) to which the same network function should be
applied. Applications can provide the class and message
information for any traﬃc they generate.
In this paper, we present Eden, an architecture for
implementing network functions at end hosts. End hosts
are a natural enforcement point for such functions—
493they have plentiful resources that allow for complex
computation and large amounts of state to be main-
tained, and they are ideally placed for ﬁne-grained vis-
ibility into application semantics. Finally, in single ad-
ministrator environments like enterprises and datacen-
ters, some part of end hosts can be trusted. We show
that a large number of diverse and interesting network
functions can be eﬃciently realized at the end hosts
with minimal support from the network.
Eden comprises three components: a logically cen-
tralized controller, stages, and end host enclaves. A
stage is any application or library that is Eden-compliant.
Stages bridge the gap between network functions ex-
pressed in terms of application-level messages and the
enclave operating on packets. To achieve this, stages
classify their network traﬃc, associating application mes-
sages with a class and a message identiﬁer that is carried
with it down the host’s network stack. The enclave re-
sides along the end host network stack, either in the
OS or the NIC. It extends and replaces functionality
typically performed by the end host virtual switch. An
enclave has a set of match-action tables that, based on
a packet’s class, determine an action function to apply.
The action function can modify both the packet and
the enclave’s global state. Enclaves and stages each ex-
pose an API through which they can be programmed.
Enclaves and stages, taken together, enable application-
aware data plane programmability.
Given a network function, the controller can imple-
ment it by programming stages and enclaves across the
network. Hence, Eden achieves a careful division of
functionality; the controller provides global visibility,
stages provide application visibility while enclaves pro-
vide a pragmatic enforcement point at the data plane.
A key challenge posed by our design is eﬃcient and
safe execution of action functions at enclaves while al-
lowing for the functions to be dynamically updated by
the controller without impacting data plane performance.
With Eden, action functions are written in a high-level
domain speciﬁc language using F# code quotations.
They are compiled to bytecode which is then interpreted
through a stack-based interpreter within the enclave.
This approach allows Eden to execute the same com-
putation across multiple platforms and avoids the com-
plexities of dynamically loading code in the OS or the
NIC. Indeed, our interpreter can execute the same ac-
tion function inside the OS or in a programmable NIC.
We have implemented the Eden enclave across two
platforms: Hyper-V and Netronome’s programmable
NICs [46]. We evaluate Eden through case studies across
these platforms. These studies highlight how the Eden
architecture can implement diverse functions spanning
application-aware load-balancing, quality of service and
weighted path selection. We show that Eden’s inter-
preter-based data plane computation incurs reasonable
overheads with negligible impact on application perfor-
mance metrics.
Overall, this paper makes the following contributions:
• We highlight that a large class of network functions
feature three key requirements: data-plane compu-
tation, data-plane state, and operate on application
semantics (§2).
• We design and implement Eden, an architecture that
enables end host network functions through data plane
programmability (§3).
• We present a ﬂexible scheme for application-level clas-
siﬁcation of network traﬃc (§3.3).
• We present a language, compiler and runtime for ac-
tion functions. The compiler decouples state man-
agement from the function, thus providing a clean
programming abstraction to administrators (§3.4).
The idea of end hosts participating in the implemen-
tation of network functions is not new [49, 16, 21, 34,
59, 57]. These state of the art approaches, however,
still encourage a low-level, packet-based API for pro-
gramming the data plane, often a variant of OpenFlow.
This ignores end host capabilities and restricts the func-
tions that can be implemented. Instead, Eden adopts a
diﬀerent philosophy by introducing a data plane inter-
face that is wide and rich enough to allow for general,
application-informed data-plane computation.
2 Network Functions
This paper is motivated by the observation that three
common data-plane requirements underlie many net-
work functions. First, they need to create, access and
modify state, in many cases on a per-packet basis. This
allows for “stateful network functions” where a packet
inﬂuences the processing of subsequent packets. Sec-
ond, they require computation on the data path.
Finally, they require visibility into application seman-
tics. This introduces a mismatch – data-plane elements
like the end host network stack and switches operate
at the granularity of packets. Instead, each application
has its own application data unit or “message”. For
example, for memcached, a popular key-value store, a
message is a GET or a PUT request or response. For
a HTTP library, a message is an HTTP request or re-
sponse. These messages are fragmented into packets
before being sent across the network. Many network
functions however are best expressed in terms of appli-
cation messages. Implementing such network functions
thus requires a mapping between messages and the con-
sequent network packets.
2.1 Examples
To make the discussion concrete, we now use a few net-
work functions proposed in recent literature as case-
studies to highlight the three requirements mentioned
above. For each example, we present a pseudo-code
sketch for the network function; in Section 5, we show
how the functions can be expressed in Eden’s language.
494Require: Global program state- pathMatrix, which
gives the list of paths and their weights for each
source destination pair.
pathMatrix:[src, dst] -> {[Path1, Weight1],
. . .}
1: fun WCMP (packet) {
2: Choose a path in a weighted random fashion from
Figure 1: Example of an asymmetric topology.
pathMatrix[p.src, p.dst])
2.1.1 Load balancing
Many recent proposals focus on load balancing of traﬃc
across network paths and across destinations in data-
centers. We begin with a simple path-level load balanc-
ing example.
Datacenters today use ECMP to load balance traf-
ﬁc among multiple equal cost paths. However, ECMP
assumes that the underlying topology is balanced and
regular which is often not true in practice [65]. For ex-
ample, in Figure 1, ECMP would distribute the traﬃc
at switch A evenly across the two upstream links even
though subsequent links along the paths have very dif-
ferent capacities. This can result in unfairness and poor
tail performance. Motivated by this, Zhou et al. [65]
proposed WCMP, a weighted version of ECMP that
balances traﬃc across links in a weighted fashion. In
the example in Figure 1, WCMP can be used to bal-
ance traﬃc across the two upstream links of A in a 10:1
ratio. While the authors present a switch-based imple-
mentation of WCMP in [65], we focus on the higher-
order network function associated with WCMP and for
now, sidestep where this function is implemented.
WCMP requires two main pieces of functionality: (a)
for each source-destination pair, computation of paths
and weights, and (b) picking a path for packets. The
former requires information about the network topology
which, in turn, requires a coordination point with global
visibility. With SDN-based management approaches,
such functionality is typically implemented at a central-
ized controller, possibly using high-level programming
abstractions [25, 62, 24, 54]. Here, we focus on the lat-
ter operation that needs to operate at the data path.
The ﬁrst snippet in Figure 2 implements the WCMP
It takes a packet as input and
data-plane function.
chooses its network path based on the weights of the
links between the packet’s source and destination. These
weights are obtained periodically from the controller.
Next, we discuss the state maintained by this function
and the computation it performs.
State. The function accesses global state—it reads the
pathMatrix variable that, for each source and destina-
tion pair, contains the list of paths between them and
their weights. A path’s weight is the probability with
which it should be used and is a product of the normal-
ized weights of all links along the path.
Send packet
3:
4: }
Require: Each packet is tagged with its message iden-
tiﬁer
1: fun messageWCMP (packet) {
2: msg = packet.message
3: if packet belongs to new message then
4:
Choose a path in a weighted random fashion from
pathMatrix[p.src, p.dst]
5:
cachedPaths[msg] = path
6: Use cachedPaths[msg] as this packet’s path
7: Send packet
8: }
Figure 2: Network functions implementing
weighted load balancing at packet- and message
granularity.
Computation. The function performs a simple com-
putation — it chooses the packet’s path from the set of
possible paths in a weighted random fashion.
Application semantics. The WCMP function chooses
paths on a packet-by-packet basis. However, as we show
in Section 5, this can lead to packet re-ordering across
the network which can adversely impact the perfor-
mance of connection oriented protocols like TCP. Flow-
level weighted load balancing [65] can address this prob-
lem, at the expense of some load imbalance.
More broadly, datacenter operators can balance the
trade-oﬀ between application performance and load across
network links through “message-level
load balancing”
whereby all packets of the same application message are
sent along the same path. For example, for memcached
traﬃc, all packets corresponding to a GET or a PUT
operation are sent along the same path. This is imple-
mented by the messageWCMP function in Figure 2 which
needs to know the message a given packet belongs to.
The previous discussion also applies to other schemes
for load balancing in datacenters [4, 26, 1]. For ex-
ample, Ananta [4] load balances incoming connections
across a pool of application servers. This requires a
NAT-like functionality along the network path which,
in turn, requires both computation and state. Sev-
eral proposals explicitly use application semantics as
495Require: Each packet is tagged with its message, size
Require: Each packet is tagged with its message and
and tenant information.
Global state: queueMap, a map that returns the rate
limited queue for each tenant
size information.
Global state:
priorityThresholds
msgTable:[msg] -> bytesSent and
1: fun Pulsar (packet) {
2: msg = packet.message
3: if msg is a “READ” message then
4:
Set size to msg.size //if read, policing is based
on operation size
5: else
6:
Set size to packet.size //policing is based on the
packet size
7: Send packet to queue queueMap[packet.tenant] and
charge it size bytes
8: }
1: fun PIAS (packet) {
2: msg = packet.message
3: if packet belongs to a new message then
4:
Initialize msgTable[msg] to packet.size
5: else
6:
7: Set packet priority according to priorityThresh-
Increment msgTable[msg] by packet.size