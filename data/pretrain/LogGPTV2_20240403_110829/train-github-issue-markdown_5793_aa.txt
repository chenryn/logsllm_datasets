When using `scipy.signal.savgol_filter`, the filter will randomly throw an
error. It usually happens after 6 calls to `savgol_filter`. I was not able to
get a reproducing code unfortunately :( (I mean I have my huge code that
replicates the issue, but I can't reduce this to a snipnet.)
  * The error comes after a fixed number of calls to `savgol_filter` but calling them in a snipnet doesn't work. (It has to be in my code somehow)
  * Using a debugger, I can call `lapack_func(a1, b1, lwork, iwork, cond, False, False)` after the error occurs. It will fail the first time but subsequent calls with the same parameter will suceed.
  * I can fix the issue by adding in `scipy\linalg\basic.py` a second call to `lapack_func`:
                    x, s, rank, info = lapack_func(a1, b1, lwork,
                                                   iwork, cond, False, False)
                    if info != 0:
                        x, s, rank, info = lapack_func(a1, b1, lwork,
                                                    iwork, cond, False, False)
What could I possibly do that would make `lapack_func` return different
results for the same parameters? (the parameters are):
    IPdb [3]: a1, b1, lwork, iwork, cond
    (array([[  1.,   1.,   1.,   1.,   1.,   1.,   1.,   1.,   1.,   1.,   1.,
              1.,   1.,   1.,   1.,   1.,   1.,   1.,   1.,   1.,   1.,   1.,
              1.,   1.,   1.,   1.,   1.,   1.,   1.,   1.,   1.,   1.,   1.,
              1.,   1.,   1.,   1.,   1.,   1.,   1.,   1.,   1.,   1.,   1.,
              1.,   1.,   1.,   1.,   1.,   1.,   1.],
           [ 25.,  24.,  23.,  22.,  21.,  20.,  19.,  18.,  17.,  16.,  15.,
             14.,  13.,  12.,  11.,  10.,   9.,   8.,   7.,   6.,   5.,   4.,
              3.,   2.,   1.,   0.,  -1.,  -2.,  -3.,  -4.,  -5.,  -6.,  -7.,
             -8.,  -9., -10., -11., -12., -13., -14., -15., -16., -17., -18.,
            -19., -20., -21., -22., -23., -24., -25.]]), array([1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
           0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
           0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]), 808, 22, 2.220446049250313e-16)
What happens is:  
I run the code. After 6 calls to `savgol_filter`, I get:
      File "C:\Users\Quentin.Peter\AppData\Local\Continuum\anaconda3\lib\site-packages\scipy\signal\_savitzky_golay.py", line 335, in savgol_filter
        coeffs = savgol_coeffs(window_length, polyorder, deriv=deriv, delta=delta)
      File "C:\Users\Quentin.Peter\AppData\Local\Continuum\anaconda3\lib\site-packages\scipy\signal\_savitzky_golay.py", line 137, in savgol_coeffs
        coeffs, _, _, _ = lstsq(A, y)
      File "C:\Users\Quentin.Peter\AppData\Local\Continuum\anaconda3\lib\site-packages\scipy\linalg\basic.py", line 1228, in lstsq
        % (-info, lapack_driver))
    ValueError: illegal value in 4-th argument of internal None
Trying to use `lstsq` after that leads to:
    Traceback (most recent call last):
      File "C:\Users\Quentin.Peter\OneDrive - Fluidic Analytics\Desktop\untitled4.py", line 59, in 
        lstsq(A, y)
      File "C:\Users\Quentin.Peter\AppData\Local\Continuum\anaconda3\lib\site-packages\scipy\linalg\basic.py", line 1224, in lstsq
        raise LinAlgError("SVD did not converge in Linear Least Squares")
    LinAlgError: SVD did not converge in Linear Least Squares
Any repeat after that will work.
#### Scipy/Numpy/Python version information:
`1.5.3 1.19.1 sys.version_info(major=3, minor=7, micro=6,
releaselevel='final', serial=0)`
PS: The calls to lstsq are as follow but this doesn't trigger the bug:
    import numpy as np
    from scipy.linalg import lstsq
    A = np.asarray([
         np.fromstring("""1.000e+00  1.000e+00  1.000e+00  1.000e+00  1.000e+00  1.000e+00
       1.000e+00  1.000e+00  1.000e+00  1.000e+00  1.000e+00  1.000e+00
       1.000e+00  1.000e+00  1.000e+00  1.000e+00  1.000e+00  1.000e+00
       1.000e+00  1.000e+00  1.000e+00  1.000e+00  1.000e+00  1.000e+00
       1.000e+00  1.000e+00  1.000e+00  1.000e+00  1.000e+00  1.000e+00
       1.000e+00  1.000e+00  1.000e+00  1.000e+00  1.000e+00  1.000e+00
       1.000e+00  1.000e+00  1.000e+00  1.000e+00  1.000e+00  1.000e+00
       1.000e+00  1.000e+00  1.000e+00  1.000e+00  1.000e+00  1.000e+00
       1.000e+00  1.000e+00  1.000e+00  1.000e+00  1.000e+00  1.000e+00
       1.000e+00  1.000e+00  1.000e+00  1.000e+00  1.000e+00  1.000e+00
       1.000e+00  1.000e+00  1.000e+00  1.000e+00  1.000e+00  1.000e+00
       1.000e+00  1.000e+00  1.000e+00  1.000e+00  1.000e+00  1.000e+00
       1.000e+00  1.000e+00  1.000e+00  1.000e+00  1.000e+00  1.000e+00
       1.000e+00  1.000e+00  1.000e+00  1.000e+00  1.000e+00  1.000e+00
       1.000e+00  1.000e+00  1.000e+00  1.000e+00  1.000e+00  1.000e+00
       1.000e+00  1.000e+00  1.000e+00  1.000e+00  1.000e+00  1.000e+00
       1.000e+00""", sep=' '),
       np.fromstring("""4.800e+01  4.700e+01  4.600e+01  4.500e+01  4.400e+01  4.300e+01
       4.200e+01  4.100e+01  4.000e+01  3.900e+01  3.800e+01  3.700e+01
       3.600e+01  3.500e+01  3.400e+01  3.300e+01  3.200e+01  3.100e+01
       3.000e+01  2.900e+01  2.800e+01  2.700e+01  2.600e+01  2.500e+01