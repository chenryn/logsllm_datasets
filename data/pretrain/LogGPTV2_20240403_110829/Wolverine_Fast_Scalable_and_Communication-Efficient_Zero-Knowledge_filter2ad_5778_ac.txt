requires two rounds of interaction, since the parties hold shares
of the values on the input wires, but neither party knows those
values. In the ZK setting, however, the prover P knows the
values on all wires; thus, evaluation of a multiplication gate
can be done without any interaction at all.
At a high level, our protocol consists of the following steps:
1) Initialization. The parties prepare authenticated values
{[λi]} for the witness, and {[si]} for each multiplication
gate in the circuit. The parties also generate some number
of authenticated multiplication triples {([xi], [yi], [zi])}; a
malicious prover may cause some or all of these triples to
be incorrect (i.e., zi (cid:54)= xi · yi).
2) Circuit evaluation. Starting with the authenticated values
{[wi]} at the input wires, the parties inductively compute
authenticated values for all the wires in the circuit. For
addition gates, this is easy. For the i-th multiplication gate,
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:31:45 UTC from IEEE Xplore.  Restrictions apply. 
1077
the prover uses [si] to enable the veriﬁer to compute its
component of the authenticated value for the output wire
without revealing information about the values on the input
wires. Speciﬁcally, given authenticated values [wα], [wβ]
on the input wires to the ith multiplication gate, the prover
sends wα·wβ−si to the veriﬁer; the prover and veriﬁer then
compute [wγ] := [si] + (wα · wβ − si) as the authenticated
value of the output wire. All communication here is from
the prover to the veriﬁer, so the entire circuit can be
evaluated using only one round of communication.
Once the parties have an authenticated value [wo] for the
output wire, the prover simply opens that value, and the
veriﬁer checks that it is equal to 1.
3) Verifying correct behavior. So far, nothing prevents a
malicious prover from cheating. To detect cheating, the
veriﬁer needs to check the behavior of the prover at each
multiplication gate using the initial set of authenticated
multiplication triples the parties generated. This can be
done in various ways. In the protocol as described in
Figure 3, which works for circuits over an arbitrary ﬁeld,
the veriﬁer checks the behavior of the prover as follows
(adapting [2]):
• The veriﬁer checks a random subset of the authenticated
triples to make sure they are correctly formed. For
an authenticated multiplication triple ([x], [y], [z]), this
can be done by having the prover run Open([x]) and
Open([y]) followed by CheckZero([z] − x · y).
• The veriﬁer then uses the remaining authenticated triples
to check that each multiplication gate was computed
correctly. For a multiplication gate with authenticated
values [wα], [wβ] on the input wires and [wγ] on the
output wire, the relation wγ = wαwβ can be checked
using an authenticated multiplication triple ([x], [y], [z])
by having the prover run δα := Open([wα] − [x]) and
δβ := Open([wβ] − [y]), followed by
CheckZero
[z] − [wγ] + δβ · [x] + δα · [y] + δα · δβ
.
(cid:16)
(cid:17)
Each multiplication gate is checked in this way using B
authenticated multiplication triples.
In Section III-B, we describe other approaches for verifying
correct behavior.
Note that the checks for the openings of all the authenticated
values (i.e., all the executions of Open and CheckZero) can
be batched together at the end of the protocol.
Non-interactive online phase. The ZK protocol described in
Figure 3 can be implemented in constant rounds. If we use
the Fiat-Shamir heuristic both for deriving the permutation π
as well as for non-interactive opening of authenticated values,
the online phase can be made non-interactive.
A. Proof of Security
Before giving the proof of security for ΠZK, we analyze
the procedure used to check correctness of the multiplication
gates. Consider some multiplication gate with authenticated
values [wα], [wβ] on the input wires and [wγ] on the output
wire. If P cheated, so wγ (cid:54)= wα · wβ, then this cheating
will be detected in step 7 of the protocol unless all B of the
multiplication triples used to check that gate are incorrect. (We
ignore for now the possibility that P is able to successfully
cheat when running Open/CheckZero.) But if too many of
the initial multiplication triples are incorrect, then there is
a high probability that P will be caught in step 8. We can
analyze the overall probability with which a cheating P can
successfully evade detection by considering an abstract “balls-
and-bins” game with an adversary A, which is based on a
similar game considered previously in the context of secure
three-party computation [2]. The game proceeds as follows:
1) A prepares (cid:96) = CB + c balls B1, . . . ,B(cid:96), each of which
is either good or bad. A also prepares C bins, each of
which is either good or bad. The balls {Bi}i∈[(cid:96)] corre-
spond to the triples {([xi], [yi], [zi])}i∈[(cid:96)] deﬁned in step 3
of the protocol, and the bins correspond to the triples
{([wα], [wβ], [wγ])} deﬁned for the multiplication gates
during the circuit evaluation.
2) Then, c random balls are chosen. If any of the chosen balls
is bad, A loses. Otherwise, the game continues to proceed.
3) The remaining CB balls are randomly partitioned into the
C bins, with each bin receiving exactly B balls.
4) We say that a bin is fully good (resp., fully bad) if it is
labeled good and all the balls inside it are good (resp.,
labeled bad and all the balls inside it are bad). A wins if
and only if there exists at least one bin that is fully bad,
and all other bins are either fully good or fully bad.
Lemma 1. Assume c ≥ B. Then A wins the above game with
probability at most(cid:0)CB+c
(cid:1)−1.
Proof. Assume A makes m bins bad for 1 ≤ m ≤ C. It is
easy to see that A can only possibly win if exactly mB balls
among B1, . . . ,B(cid:96) are bad, and they are exactly placed in the
m bins that are bad. We compute the probability that A wins
for some ﬁxed m.
B
Since exactly mB balls of the (cid:96) = CB + c balls are bad,
the probability that none of the bad balls is chosen in step 2
of the game is exactly
c
((cid:96) − mB)! · ((cid:96) − c)!
(cid:96)! · ((cid:96) − mB − c)!
(CB + c − mB)! · (CB)!
(CB + c)! · (CB − mB)!
Assume that this occurs. We are left with (cid:96) − c = CB balls,
of which mB are bad. The probability that B bad balls are
placed in each bad bin is
=
.
(mB)! · (CB − mB)!
(cid:0)(cid:96)−mB
(cid:1)
(cid:1) =
(cid:0)(cid:96)
c
p1 =
(CB)!
(cid:1)
(cid:0)(cid:96)−mB
(cid:0)(cid:96)
(cid:1)
c
c
Thus, the probability that A wins is exactly
(CB + c − mB)! · (mB)!
· p1 =
(CB + c)!
.
=
(cid:18)CB + c
(cid:19)−1
mB
.
For c ≥ B, 1 ≤ m ≤ C, this is maximized when m = 1.
Now we prove security of protocol ΠZK.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:31:45 UTC from IEEE Xplore.  Restrictions apply. 
1078
B
2) If A makes a global-key query (guess, ∆(cid:48)) to F p,r
execution except with probability ≤(cid:0)CB+c
(cid:1)−1
Theorem 1. Let c ≥ B. Protocol ΠZK UC-realizes FZK in
the F p,r
sVOLE-hybrid model. In particular, no environment Z
can distinguish the real-world execution from the ideal-world
+ p−r + εopen.
Proof. We ﬁrst consider the case of a malicious prover (i.e.,
soundness) and then consider the case of a malicious veriﬁer
(i.e., zero knowledge). In each case, we construct a PPT simu-
lator S given access to FZK, and running the PPT adversary A
as a subroutine while emulating functionality F p,r
sVOLE for A.
We always implicitly assume that S passes all communication
between A and Z.
Malicious prover. S interacts with adversary A as follows:
1) S emulates F p,r
sVOLE for A by choosing uniform ∆ ∈ Fpr
and recording all the values {λi}i∈Iin, {(xi, yi, ri)}i∈[(cid:96)],
and {si}i∈[C], and their corresponding MAC tags, sent
to F p,r
sVOLE by A. These values deﬁne corresponding keys
in the natural way.
sVOLE,
then S checks if ∆ = ∆(cid:48). If not, S sends abort to A,
sends (prove,C,⊥) to FZK, and aborts. Otherwise, S sends
success to A and continues.
3) When A sends {Λi}i∈Iin in step 4, S sets wi := λi + Λi
for i ∈ Iin.
4) S runs the rest of the protocol as an honest veriﬁer, using
∆ and the keys deﬁned in the ﬁrst step. If the honest
veriﬁer outputs false, then S sends (prove,C,⊥) to FZK
and aborts. If the honest veriﬁer outputs true, then S sends
(prove,C, w) to FZK where w is deﬁned as above.
We assume that A does not correctly guess ∆; this is true
except with probability at most p−r. It is clear that the view of
A is perfectly simulated by S. Whenever the veriﬁer simulated
by S outputs false, the real veriﬁer outputs false as well
(since S sends ⊥ to FZK). It thus only remains to bound the
probability with which the simulated veriﬁer run by S outputs
true but the witness w sent by S to FZK satisﬁes C(w) = 0.
Below, we show that if C(w) = 0 then the probability that the
+ εopen.
If C(w) = 0 then either wo = 0 or else at least one of
the triples {([wα], [wβ], [wγ])} deﬁned at the multiplication
gates during the circuit evaluation must be incorrect. In the
former case, the probability that P succeeds when running
CheckZero([wo] − 1) is at most εopen. In the latter case,
Lemma 1 shows that the probability that A avoids being
simulated veriﬁer outputs true is at most(cid:0)CB+c
(cid:1)−1
“caught” in steps 6–8 is at most(cid:0)CB+c
(cid:1)−1; if A is caught, then
B
it succeeds in opening some incorrect value with probability
at most εopen. This completes the proof for the case of a
malicious prover.
Malicious veriﬁer. If S receives false from FZK, then it simply
aborts. Otherwise, S interacts with adversary A as follows:
1) S emulates F p,r
sVOLE by recording the global key ∆, and
the keys for all
to the
functionality by A. Then, S samples uniform values for
{λi}i∈Iin, {(xi, yi, ri)}i∈[(cid:96)], and {si}i∈[C], and computes
their corresponding MAC tags in the natural way.
the authenticated values, sent
B
2) S executes steps 3–8 of protocol ΠZK by simulating the
honest prover with input w = 0|Iin|.
3) In step 9, S computes K[wo] (based on the keys sent to
sVOLE by A) and then sets M[wo] := K[wo] + ∆. Finally,
F p,r
it uses M[wo] to run CheckZero([wo] − 1) with A.
The view of A simulated by S is distributed identically to its
view in the real protocol execution.
B. Other Approaches for Verifying Correct Behavior
Here we describe alternative approaches for checking cor-
rectness of multiplication gates for large p (i.e., log p ≥ ρ).
Approach 1. The ﬁrst approach can be viewed as a simpliﬁed
version of the check used by SPDZ [26]. Both parties now pre-
pare a single authenticated multiplication triple ([x], [y], [z])
per multiplication gate (so only C in total), which may
be incorrect if P is malicious. To check correctness of a
multiplication gate with authenticated values [wα], [wβ] on
the input wires and [wγ] on the output wire, the veriﬁer sends
a uniform η ∈ Fp to the prover, who responds by running
δα := Open(η · [wα] − [x]) and δβ := Open([wβ] − [y]),
followed by
CheckZero([z] − η · [wγ] + δβ · [x] + δα · [y] + δα · δβ).
This has soundness error 1/p + εopen. To see this, say wγ =
wαwβ + ∆w with ∆w (cid:54)= 0, and let z = xy + ∆z. Then
z − η · wγ + δβ · x + δα · y + δα · δβ = 0 iff η = ∆z/∆w,
which occurs with probability 1/p. Note that this checking
procedure can be done for all multiplication gates in parallel
using a single value η, and the overall soundness error remains
unchanged. It can also be made non-interactive using the Fiat-
Shamir heuristic in the random-oracle model.
Approach 2: Trading off communication and computation.
This approach, which is a simpliﬁed and improved variant
of the polynomial approach used by SPDZ [26], reduces the
communication complexity by roughly half (from 4 to 2 ﬁeld
elements per gate) at the expense of increased computation.
Intuitively, the prover and veriﬁer deﬁne polynomials F, G, H
that interpolate to {wi
γ}, respectively. If
β for all i, then H = F · G, and this can be
γ = wi
wi
veriﬁed by checking whether H(ν) = F (ν)·G(ν) at a random
point ν ∈ Fpr. Details follow.
β}, and {wi
Assume p ≥ 2C − 1. Let ([wi
γ]) be the au-
thenticated values corresponding to the ith multiplication
gate. The parties additionally compute C − 1 authenticated
values {[si]}i∈[C+1,2C); they also compute an authenticated
multiplication triple ([x], [y], [z]) (which may be incorrect if P
is malicious) with x, y, z ∈ Fpr.1 They then do the following:
1) Let F ∈ Fp[X] (resp., G ∈ Fp[X]) be the polynomial
of degree at most C − 1 such that F (i) = wi
α (resp.,
β) for i ∈ [C]. Note that P can compute F and
G(i) = wi
G explicitly, and P and V can compute the authenticated
1A uniform authenticated value [z] with z ∈ Fpr can be generated from
r uniform authenticated values [z1], . . . , [zr] with zi ∈ Fp by setting z =
i zi · Xi. An authenticated triple can be computed from such authenticated
α}, {wi
α · wi
β], [wi
α], [wi
(cid:80)
values in the natural way.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:31:45 UTC from IEEE Xplore.  Restrictions apply. 
1079
γ].
α]}i∈[C] (resp., {[wi
α] def= [F (k)] (resp., [wk
β]}i∈[C]).
2) For k ∈ [C + 1, 2C), P sends d(cid:48)
k := wk
γ] := [sk] + d(cid:48)
β] def= [G(k)]) for any
value [wk
k ∈ Fpr using Lagrange interpolation over the shares
{[wi
α· wk