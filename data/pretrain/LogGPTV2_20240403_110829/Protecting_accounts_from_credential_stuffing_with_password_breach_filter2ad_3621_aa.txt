# Protecting Accounts from Credential Stuffing with Password Breach Alerting

**Authors:**
- Kurt Thomas, Jennifer Pullman, Kevin Yeo, Ananth Raghunathan, Patrick Gage Kelley, Luca Invernizzi, Borbala Benko, Tadek Pietraszek, and Sarvar Patel (Google)
- Dan Boneh (Stanford University)
- Elie Bursztein (Google)

**Conference:**
- 28th USENIX Security Symposium
- August 14–16, 2019, Santa Clara, CA, USA
- Proceedings: 978-1-939133-06-9
- Open access sponsored by USENIX

## Abstract

Protecting accounts from credential stuffing attacks remains challenging due to an asymmetry of knowledge: attackers have access to billions of stolen usernames and passwords, while users and identity providers are often unaware of which accounts need remediation. This paper proposes a privacy-preserving protocol that allows a client to query a centralized breach repository to determine if a specific username and password combination is publicly exposed, without revealing the queried information. The client can be an end user, a password manager, or an identity provider.

To demonstrate the feasibility of our protocol, we implemented a cloud service that mediates access to over 4 billion breached credentials and a Chrome extension as an initial client. Based on anonymous telemetry from nearly 670,000 users and 21 million logins, we found that 1.5% of logins involve breached credentials. By alerting users to this breach status, 26% of our warnings resulted in users migrating to a new password, at least as strong as the original. Our study illustrates how secure, democratized access to password breach alerting can help mitigate one dimension of account hijacking.

## 1. Introduction

The widespread availability of usernames and passwords exposed by data breaches has made it easier for criminals to access billions of accounts. In the last two years, breach compilations like Antipublic (450 million credentials), Exploit.in (600 million credentials), and Collection 1-5 (2.2 billion credentials) have grown as their creators aggregated material shared on underground forums [21, 25]. Despite the public nature of this data, it remains potent. Previous studies have shown that 6.9% of breached credentials remain valid due to reuse, even multiple years after their initial exposure [51]. Without defense-in-depth techniques that expand authentication to include user location and device details [12, 17], hijackers need only conduct a credential stuffing attack—attempting to log in with every breached credential—to isolate vulnerable accounts.

While users or identity providers can mitigate this risk by resetting passwords, discovering which accounts require attention remains a critical barrier. This has led to breach alerting services like HaveIBeenPwned and PasswordPing, which actively source breached credentials to notify affected users [26, 43]. These services make various tradeoffs involving user privacy, accuracy, and the risks of sharing private account details through unauthenticated public channels. For example, Firefox and LastPass check the breach status of usernames to encourage password resets [13, 42], but they lack context for whether the user’s password was actually exposed for a specific site or whether it was previously reset. Other schemes implicitly trust breach alerting services to handle plaintext usernames and passwords, making these services a liability if compromised.

In this paper, we present the design, implementation, and deployment of a new privacy-preserving protocol that allows a client to learn whether their username and password appear in a breach without revealing the queried information. Our protocol offers two main advantages compared to existing schemes. First, it addresses the threat of both adversarial clients and servers using computationally expensive hashing, k-anonymity, and private set intersection. Second, these privacy requirements allow us to check a client’s exact username and password against a database of breached credentials, reducing false positives that lead to warning fatigue.

To demonstrate the feasibility of our protocol, we released a Chrome extension that warns users when they log in to a website using one of over 4 billion breached usernames and passwords. Nearly 670,000 users installed our extension over a period of February 5–March 4, 2019. During this time, we detected that 1.5% of over 21 million logins were vulnerable due to relying on a breached credential—or one warning for every two users. By alerting users to this breach status, 26% of our warnings resulted in users migrating to a new password. Of these new passwords, 94% were at least as strong as the original.

Anonymous telemetry from our extension revealed that users reused breached credentials on over 746,000 distinct domains. The risk of hijacking was highest for video streaming and adult sites, where 3.6–6.3% of logins relied on breached credentials. Conversely, users appeared to internalize password security advice for financial and government sites, where only 0.2–0.3% of logins involved breached credentials. Despite variations across industries, our analysis shows that the threat of credential stuffing extends well into the long tail of the Internet. Absent new forms of authentication, we believe it is critical to democratize access to breach alerting so that both users and identity providers can proactively resecure their accounts.

### Key Contributions:
- We develop and publicly release a new protocol for detecting whether a username and password pair appears in a data breach without revealing the queried information. Our protocol improves on the privacy of existing schemes while also reducing the risk of false positives.
- We outline the technical challenges of deploying this scheme, including computational overhead, latency, and cost required to mediate access to over 4 billion breached usernames and passwords.
- Based on a real-world deployment, we find that 1.5% of logins across the web involve breached credentials. Roughly one in two of our 670,000 users received a warning.
- Users responded to 26% of our warnings by resetting their password; 94% of new passwords were as strong or stronger than the original passwords.

## 2. Background and Requirements

### 2.1 Design Principles

- **Democratized Access:** Identity providers individually collect breached password data to reset affected user accounts, leading to patchy protection. A breach alerting service should be accessible to all end users and identity providers, without requiring trust between the parties.
- **Actionable, Not Informational:** The service should provide accurate and actionable security advice, such as re-securing an account via a password reset. Alerts that warn about exposed data without a straightforward recovery step are out of scope.
- **Breached, Not Weak:** Alerts should trigger only when a username and password pair is exposed, not just weak or guessable passwords. This prioritizes scarce user attention and avoids warning fatigue.
- **Near Real-Time:** The time between querying a credential and learning its breach status should be near real-time to facilitate integration with account security flows, password managers, or upon password entry.

### 2.2 Threat Model

- **Mutual Distrust:** The protocol must address threats from both adversarial clients and servers.
- **Requester Credential Anonymity:** For every credential, there exists a sufficiently large anonymity set K such that requests from credentials within the same set are indistinguishable to the server.
- **Responses with Bounded Leakage:** The response from the breach alerting service should bound the information leaked about the membership of other credentials in the breach dataset.
- **Inefficient Oracle:** Learning a credential via the breach alerting service should be equally or less efficient compared to guessing attempts on the login portal.
- **Resistance to Denial of Service:** The server's response should not require significantly more computation than a client's request, making it difficult for an attacker to perform a denial-of-service attack.

## 3. Protocol Design

### 3.1 Abstract Protocol

We provide an abstract protocol for our breach alerting service in Figure 1. A client with access to a username and password tuple (u, p) executes some computation via `CreateRequest(u, p)` that produces a local state LS and request Req, which is sent to the breach alerting service. The service stores and regularly updates a database of unsafe credentials S = {(u1, p1), ..., (un, pn)}. Upon receiving a request, the server runs `CreateResponse(S, Req)` and sends the resulting response Resp to the client. Finally, the client arrives at a verdict whether the credential queried was exposed through a breach by calculating `Verdict(Resp, LS)`.

### 3.2 Implementation

- **Cloud Service:** We implemented a cloud service that mediates access to over 4 billion breached credentials.
- **Chrome Extension:** We released a Chrome extension that warns users when they log in to a website using a breached username and password.
- **Deployment Results:** Based on telemetry from nearly 670,000 users and 21 million logins, 1.5% of logins involved breached credentials. 26% of our warnings resulted in users migrating to a new password, with 94% of new passwords being at least as strong as the original.

## 4. Conclusion

Our study demonstrates the feasibility and effectiveness of a privacy-preserving protocol for detecting and alerting users to breached credentials. By providing secure, democratized access to breach alerting, we can help mitigate the threat of account hijacking. Future work will focus on further improving the protocol's efficiency and expanding its reach to more users and identity providers.