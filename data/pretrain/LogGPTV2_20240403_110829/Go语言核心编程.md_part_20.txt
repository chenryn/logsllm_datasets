funcmain() {
//通过 go 向redis 写入数据和读取数据
//1. 链接到redis
conn, err :=redis.Dial("tcp", "127.0.0.1:6379")
iferr!= nil {
fmt.Println("redis.Dial err=", err)
return
}
defer conn.Close() //关闭..
//2. 通过go 向redis 写入数据 string [key-val]
_,err =conn.Do("HSet", "user01", "name", "john")
iferr!= nil {
fmt.Println("hset err=", err)
return
}
_,err =conn.Do("HSet", "user01", "age", 18)
iferr!= nil {
fmt.Println("hset err=", err)
return
}
//3. 通过go 向redis 读取数据
r1, err :=redis.String(conn.Do("HGet","user01", "name"))
iferr!= nil {
fmt.Println("hget err=", err)
return
}
r2, err :=redis.Int(conn.Do("HGet","user01", "age"))
iferr!= nil {
fmt.Println("hget err=", err)
return
}
//因为返回 r 是 interface{}
//因为 name 对应的值是string,因此我们需要转换
//nameString:=r.(string)
fmt.Printf("操作okr1=%v r2=%v \n", r1, r2)
}
对hash 数据结构，field-val 是批量放入和读取
package main
import(
"fmt"
"github.com/garyburd/redigo/redis" //引入redis 包
)
funcmain() {
//通过go 向redis 写入数据和读取数据
//1. 链接到 redis
conn, err :=redis.Dial("tcp", "127.0.0.1:6379")
iferr!= nil {
fmt.Println("redis.Dial err=", err)
return
}
defer conn.Close() //关闭..
//2. 通过 go 向redis 写入数据 string [key-val]
_,err =conn.Do("HMSet", "user02", "name", "john", "age", 19)
iferr!= nil {
fmt.Println("HMSet err=", err)
return
}
//3. 通过 go 向redis 读取数据
r,err :=redis.Strings(conn.Do("HMGet","user02", "name", "age"))
iferr!= nil {
fmt.Println("hget err=", err)
return
}
fori, v:=range r {
fmt.Printf("r[%d]=%s\n", i, v)
}
}
19.5.4 批量 Set/Get 数据
说明: 通过Golang 对Redis操作，一次操作可以Set / Get 多个key-val 数据
核心代码:
_,err= c.Do("MSet", "name", "尚硅谷","address","北京昌平~")
r,err:= redis.Strings(c.Do("MGet", "name", "address"))
for_,v:= ranger{
fmt.Println(v)
}
19.5.5 给数据设置有效时间
说明: 通过Golang 对Redis操作，给key-value 设置有效时间
核心代码:
//给name 数据设置有效时间为 10s
_,err =c.Do("expire", "name", 10)
19.5.6 操作 List
说明: 通过Golang 对Redis操作List 数据类型
核心代码:
_,err= c.Do("lpush","heroList", "no1:宋江", 30,"no2:卢俊义",28)
r,err:= redis.String(c.Do("rpop", "heroList"))
19.5.7 Redis 链接池
 说明: 通过Golang 对Redis操作， 还可以通过Redis 链接池, 流程如下：
1) 事先初始化一定数量的链接，放入到链接池
2) 当Go 需要操作Redis 时，直接从 Redis 链接池取出链接即可。
3) 这样可以节省临时获取Redis 链接的时间，从而提高效率.
4) 示意图
5) 链接池使用的案例
package main
import(
"fmt"
"github.com/garyburd/redigo/redis"
)
//定义一个全局的 pool
varpool *redis.Pool
//当启动程序时，就初始化连接池
funcinit(){
pool= &redis.Pool{
MaxIdle: 8,//最大空闲链接数
MaxActive:0,// 表示和数据库的最大链接数， 0 表示没有限制
IdleTimeout:100,// 最大空闲时间
Dial:func() (redis.Conn, error) { // 初始化链接的代码， 链接哪个ip的redis
return redis.Dial("tcp", "localhost:6379")
},
}
}
funcmain() {
//先从pool 取出一个链接
conn :=pool.Get()
defer conn.Close()
_,err :=conn.Do("Set", "name", "汤姆猫~~")
iferr!= nil {
fmt.Println("conn.Do err=", err)
return
}
//取出
r,err :=redis.String(conn.Do("Get", "name"))
iferr!= nil {
fmt.Println("conn.Do err=", err)
return
}
fmt.Println("r=", r)
//如果我们要从 pool 取出链接，一定保证链接池是没有关闭
//pool.Close()
conn2 :=pool.Get()
_,err =conn2.Do("Set", "name2", "汤姆猫~~2")
iferr!= nil {
fmt.Println("conn.Do err~~~~=", err)
return
}
//取出
r2, err :=redis.String(conn2.Do("Get", "name2"))
iferr!= nil {
fmt.Println("conn.Do err=", err)
return
}
fmt.Println("r=", r2)
//fmt.Println("conn2=", conn2)
}
第 章数据结构
20
20.1 数据结构(算法)的介绍
 数据结构的介绍
1) 数据结构是一门研究算法的学科，只从有了编程语言也就有了数据结构.学好数据结构可以编写
出更加漂亮,更加有效率的代码。
2) 要学习好数据结构就要多多考虑如何将生活中遇到的问题,用程序去实现解决.
3) 程序 = 数据结构 + 算法
20.2 数据结构和算法的关系
 算法是程序的灵魂，为什么有些网站能够在高并发，和海量吞吐情况下依然坚如磐石,大家可能会
说: 网站使用了服务器群集技术、数据库读写分离和缓存技术(比如 Redis 等),那如果我再深入的问
一句，这些优化技术又是怎样被那些天才的技术高手设计出来的呢?
 大家请思考一个问题，是什么让不同的人写出的代码从功能看是一样的，但从效率上却有天壤之别,
拿在公司工作的实际经历来说, 我是做服务器的，环境是UNIX，功能是要支持上千万人同时在线，
并保证数据传输的稳定, 在服务器上线前，做内测，一切 OK,可上线后，服务器就支撑不住了, 公
司的CTO对我的代码进行优化，再次上线，坚如磐石。那一瞬间,我认识到程序是有灵魂的，就是
算法。如果你不想永远都是代码工人,那就花时间来研究下算法吧!
 本章着重讲解算法的基石-数据结构。
20.3 看几个实际编程中遇到的问题
20.4 稀疏 sparsearray 数组
20.4.1 先看一个实际的需求
 编写的五子棋程序中，有存盘退出和续上盘的功能
 分析按照原始的方式来的二维数组的问题
因为该二维数组的很多值是默认值0, 因此记录了很多没有意义的数据
20.4.2 基本介绍
当一个数组中大部分元素为０，或者为同一个值的数组时，可以使用稀疏数组来保存该数组。
稀疏数组的处理方法是:
1) 记录数组一共有几行几列，有多少个不同的值
2) 思想：把具有不同值的元素的行列及值记录在一个小规模的数组中，从而缩小程序的规模
20.4.3 稀疏数组举例说明
20.4.4 应用实例
1) 使用稀疏数组，来保留类似前面的二维数组(棋盘、地图等等)
2) 把稀疏数组存盘，并且可以从新恢复原来的二维数组数
3) 整体思路分析
4) 代码实现
package main
import(
"fmt"
)
typeValNodestruct {
rowint
col int
val int
}
funcmain() {
//1. 先创建一个原始数组
varchessMap [11][11]int
chessMap[1][2]=1//黑子
chessMap[2][3]=2//蓝子
//2. 输出看看原始的数组
for_,v:=range chessMap {
for_,v2:=range v{
fmt.Printf("%d\t", v2)
}
fmt.Println()
}
//3. 转成稀疏数组。想-> 算法
// 思路
//(1). 遍历 chessMap, 如果我们发现有一个元素的值不为0，创建一个node 结构体
//(2). 将其放入到对应的切片即可
varsparseArr []ValNode
//标准的一个稀疏数组应该还有一个 记录元素的二维数组的规模(行和列，默认值)
//创建一个 ValNode 值结点
valNode :=ValNode{
row: 11,
col :11,
val :0,
}
sparseArr= append(sparseArr,valNode)
fori, v:=range chessMap {
forj, v2:=range v{
ifv2!=0{
//创建一个ValNode 值结点
valNode :=ValNode{
row: i,
col :j,
val :v2,
}
sparseArr= append(sparseArr,valNode)
}
}
}
//输出稀疏数组
fmt.Println("当前的稀疏数组是:::::")
fori, valNode :=range sparseArr {
fmt.Printf("%d: %d %d %d\n", i, valNode.row,valNode.col, valNode.val)
}
//将这个稀疏数组，存盘 d:/chessmap.data
//如何恢复原始的数组
//1. 打开这个 d:/chessmap.data => 恢复原始数组.
//2. 这里使用稀疏数组恢复
// 先创建一个原始数组
varchessMap2 [11][11]int
// 遍历 sparseArr [遍历文件每一行]
fori, valNode :=range sparseArr {
ifi !=0{ //跳过第一行记录值
chessMap2[valNode.row][valNode.col]=valNode.val
}
}
// 看看 chessMap2 是不是恢复.
fmt.Println("恢复后的原始数据......")
for_,v:=range chessMap2 {
for_,v2:=range v{
fmt.Printf("%d\t", v2)
}
fmt.Println()
}
}
 对老师的稀疏数组的改进
1) 将构建的稀疏数组，存盘 chessmap.data
2) 在恢复原始二维数组，要求从文件chessmap.data 读取。
20.5 队列(queue)
20.5.1 队列的应用场景
20.5.2 队列介绍
 队列是一个有序列表，可以用数组或是链表来实现。
 遵循先入先出的原则。即：先存入队列的数据，要先取出。后存入的要后取出
 示意图：(使用数组模拟队列示意图)
20.5.3 数组模拟队列
 先完成一个非环形的队列(数组来实现)
思路分析：
代码实现：
package main
import(
"fmt"
"os"
"errors"
)
//使用一个结构体管理队列
type Queue struct {
maxSizeint
array [5]int// 数组=>模拟队列
front int// 表示指向队列首
rear int // 表示指向队列的尾部
}
//添加数据到队列
func(this *Queue)AddQueue(val int)(err error) {
//先判断队列是否已满
ifthis.rear ==this.maxSize- 1{ //重要重要的提示; rear 是队列尾部(含最后元素)
return errors.New("queuefull")
}
this.rear++//rear 后移
this.array[this.rear] =val
return
}
//从队列中取出数据
func(this *Queue) GetQueue() (val int,err error) {
//先判断队列是否为空
ifthis.rear ==this.front { //队空
return -1,errors.New("queue empty")
}
this.front++
val =this.array[this.front]
return val ,err
}
//显示队列, 找到队首，然后到遍历到队尾
//
func(this *Queue) ShowQueue() {
fmt.Println("队列当前的情况是:")
//this.front 不包含队首的元素
fori :=this.front + 1;i <= this.rear; i++ {
fmt.Printf("array[%d]=%d\t", i,this.array[i])