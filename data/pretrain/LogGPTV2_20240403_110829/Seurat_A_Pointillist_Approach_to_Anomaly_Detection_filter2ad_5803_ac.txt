−1
0
1
2
3
4
−4
−3
−2
−1
0
1
2
3
4
01−22−04
01−23−04
21
3
241
6
343
New Cluster! 
2
6
165
159
22
436
4
3
2
1
0
−1
−2
−3
−4
01−21−04
9
165
New Cluster! 
58
7
80
90
35
261
−4
−3
−2
−1
0
1
2
3
4
5
01−24−04
22
162
72
6
151
196
94
4
3
2
1
0
−1
−2
−3
−4
−5
−5
3
2
1
0
−1
−2
−3
4
3
2
1
0
−1
−2
−3
4
3
2
1
0
−1
−2
−3
−4
−5
−3
−2
−1
0
1
2
3
4
5
6
−4
−3
−2
−1
0
1
2
3
4
−3
−2
−1
0
1
2
3
Fig. 8. Clustering feature vectors for anomaly detection: Each circle represents a cluster. The
number at the center of the ﬁgure shows the total number of clusters. The radius of a circle
corresponds to the number of points in the cluster, which is also indicated beside the circle. The
squared dots correspond to the new points generated on the day under detection. New clusters are
identiﬁed by a thicker circle.
4.2 False Negatives
The primary goal of this experiment is to study the false negative rate and detection
latency of Seurat as the stealthiness of the attack changes. We use simulated attacks by
manually updating ﬁles on the selected host reports, as if they were infected.
We ﬁrst examine the detection rate of Seurat by varying the degree of attack ag-
gressiveness. We model the attack propagation speed as the number of hosts infected
on each day (the detection window), and model the attack stealthiness on a local host
as the number of new ﬁles installed by this attack. Our simulation runs on the same
teaching cluster that we described in Section 4.1. Since the aggregated ﬁle update pat-
terns are different for each day, we randomly pick ten days in Feb 2004, when there was
no intrusion. On each selected day, we simulate attacks by manually inserting artiﬁcial
new ﬁles into a number of host reports on only that day, and use the modiﬁed reports
as input for detection algorithm. We then remove those modiﬁed entries, and repeat the
experiments with another day. The detection rate is calculated as the number of days
that Seurat spots new clusters over the total ten days.
Figure 9 shows the detection rate of Seurat by varying the number of ﬁles inserted
on each host and the number of hosts infected. On one hand, the detection rate mono-
tonically increases as we increase the number of ﬁles inserted on each host by an attack.
Since the inserted ﬁles do not exist before, each of them will be selected as a feature di-
mension by the wavelet-based selection, leading to larger distances between the points
of infected host state changes and the points of normal host state changes. Therefore,
250
Yinglian Xie et al.
)
e
g
a
n
e
c
r
e
p
(
e
a
r
n
o
t
t
i
t
c
e
e
D
t
100
80
60
40
20
0
1
5 hosts
10 hosts
15 hosts
20 hosts
8
2
4
Number of files installed
Fig. 9. Detection rate: We vary the number of hosts infected and the number of ﬁles inserted on
each host by the simulated attacks.
the more new ﬁles are injected by an attack, the higher the detection rate gets. On the
other hand, as we increase the number of infected hosts, the number of points for ab-
normal host state changes becomes large enough to create an independent new cluster.
Thus, rapidly propagating attacks are more likely to be caught. Accordingly, detecting
a slowly propagating attack requires a larger detection window, hence longer detection
latency, in order to accumulate enough infected hosts. We revisit this issue in Section 5.
We further evaluate the detection rate of Seurat on six Linux worms with simulated
attacks. To do so, we compile a subset of ﬁles modiﬁed by each worm based on the
descriptions from public Web sites such as Symantec [16] and F-Secure information
center [17]. We then manually modify the described ﬁles in a number of selected host
reports to simulate the corresponding worm attacks. Again, for each worm, we vary
the number of infected hosts, and run our experiments on the teaching cluster with ten
randomly selected days.
Worms
Adore Ramen-A Ramen-B Slapper-A Slapper-B Kork
8
Files modiﬁed
10
2 infected hosts 80%
80%
4 infected hosts 100% 100%
8 infected hosts 100% 100%
12
90%
90%
100%
3
30%
70%
100%
4
5
30%
40%
80%
70%
100% 100%
Fig. 10. Detection rate of emulated worms: We vary the number of hosts compromised by the
attacks.
Table 10 shows the number of ﬁles modiﬁed by each worm and the detection rate
of Seurat. In general, the more ﬁles modiﬁed by a worm, the more likely the worm will
be detected. But the position of a ﬁle in the ﬁle system directory tree also matters. For
example, both Slapper-B worm and Kork worm insert 4 new ﬁles into a compromised
host. However, Kork worm additionally modiﬁes /etc/passwd to create accounts
with root privileges. Because there are many hosts that have updated /etc/passwd
Seurat: A Pointillist Approach to Anomaly Detection
251
during a series of system reconﬁguration events, the inclusion of such ﬁles in the feature
vector space reduces the distances from abnormal points to normal points, resulting in
higher false negative rates. We discuss this further in Section 5.
4.3 Real Attacks
Now we proceed to examine the efﬁcacy of Seurat during a real worm outbreak. The
best way to show this would be to have Seurat detect an anomaly caused by a new worm
propagation. Instead of waiting for a new worm’s outbreak, we have set up an isolated
computer cluster where, without damaging the real network, we can launch worms and
record ﬁle system changes. This way, we have full control over the number of hosts
infected, and can repeat the experiments. Because the isolated cluster has no real users,
we merge the data acquired from the isolated cluster with the data we have collected
from the teaching cluster in order to conduct experiments.
We obtained the binaries and source codes of a few popular worms from public
Web sites such as whitehats [18] and packetstorm [19]. Extensively testing Seurat, with
various real worms in the isolated cluster, requires tremendous effort in setting up each
host with the right versions of vulnerable software. As a ﬁrst step, we show the result
with the Lion worm [20] in this experiment.
The Lion worm was found in early 2001. Lion exploits a vulnerability of BIND
8.2, 8.2-P1, 8.2.1, 8.2.2-Px. Once Lion infects a system, it sets up backdoors, leaks out
conﬁdential information (/etc/passwd, /etc/shadow) via email, and scans the
Internet to recruit vulnerable systems. Lion scans the network by randomly picking the
ﬁrst 16 bits of an IP address, and then sequentially probing all the 216 IP addresses in
the space of the block. After that, Lion randomly selects another such address block to
continue scanning. As a result, once a host is infected by Lion, all the vulnerable hosts
nearby (in the same IP address block) will be infected soon. Lion affects ﬁle systems:
the worm puts related binaries and shell scripts under the /dev/.lib directory, copies
itself into the /tmp directory, changes system ﬁles under the /etc directory, and tries
to wipe out some log ﬁles.
We conﬁgured the isolated cluster with three Lion-vulnerable hosts and one addi-
tional machine that launched the worm. The vulnerable machines were running RedHat
6.2 including the vulnerable BIND 8.2.2-P5. The cluster used one C class network ad-
dress block. Every machine in the cluster was connected to a 100Mbps Ethernet and
was running named. The Seurat data collection tool generated a ﬁle system update
report on every machine daily.
After we launched the Lion worm, all three vulnerable hosts in the isolated cluster
were infected quickly one after another. We merge the ﬁle update report by the each
compromised host with a different normal host report generated on Feb 11, 2004, when
we know there was no anomaly. Figure 11 shows the clustering results of three consec-
utive days from Feb 10, 2004 to Feb 12, 2004 using the merged reports.
On the attack day, there are 64 ﬁles picked by the wavelet-based selection. The
number of feature dimensions is reduced to 9 after PCA. Seurat successfully detects a
new cluster consisting of the 3 infected hosts. Figure 12 lists the 22 ﬁles selected by
Seurat as the causes of the alarm. These ﬁles provide enough hints to the administrators
to conﬁrm the existence of the Lion worm. Once detected, these compromised hosts as
252
Yinglian Xie et al.
02−10−04
02−11−04
3
2
1
0
−1
−2
−3
481
40
3
177
5
4
3
2
1
0
−1
−2
−3
−4
New Cluster! 
11
3
211
38
38
47
171
37
16