f n d o e s n o t
r e t u r n −1 i f
r e t u r n 1 i f u s e r p w d f o u n d i n f n ;
r e t u r n 0 i f u s e r p w d n o t
/ /
/ /
/ /
i n t a u t h 2 ( char ∗ userpwd , char ∗
e x i s t ;
f n ) {
f o u n d i n f n
. . .
/ /
c o d e o m i t t e d
}
i n t a u t h ( char ∗ userpwd ) {
f o r
( i n t
i = 0 ;
i < 5 ;
i + + ) {
i n t
i f
r e t = a u t h 2 ( userpwd ,
fname [ i ] ) ;
( r e t
! = −1) r e t u r n r e t ;
}
r e t u r n −1;
}
void main ( i n t a r g c , char ∗ ∗ a r g v ) {
∗ pwd= a r g v [ 2 ] ;
" %s %s " , username , pwd ) ;
b u f f e r
o v e r r u n
char ∗ username = a r g v [ 1 ] ,
char userpwd [ 5 0 0 ] ;
/ / p o s s i b l e
s p r i n t f ( userpwd ,
i n t
i f
e l s e i f
e l s e p r i n t f ( " P a s s w o r d f i l e n o t
r e t = a u t h ( userpwd ) ;
( r e t = = 1 ) p r i n t f ( " Auth s u c c e e d e d ! \ n " ) ;
( r e t = = 0 ) p r i n t f ( " Auth f a i l e d ! \ n " ) ;
f o u n d ! \ n " ) ;
}
Figure 1: A motivating example.
Figure 2: Call graph and partitions for Fig. 1 example.
which lacks access to any password file. As a result, less code has
access to the secret passwords. While this is a natural partition for
improving security, other choices might be better to have better
balance between security and performance.
To explore possible choices of partitioning, let us examine the
example’s call graph annotated with information about frequencies
of calls (represented by the numbers of calls for brevity) and po-
tential leakage of secret information, shown in Fig. 2. It shows that
main invokes auth once and auth potentially invokes auth2 five
times. The return value of auth2 potentially leaks one bit of the
secret password since its return value depends on the comparison
between the user-provided password and the real password. That
one bit is also propagated back from auth to main, since auth’s
return value depends on the result of calling auth2.
Fig. 2 also shows two possible partitions. Partition #1 is the one
we have already discussed. It minimizes the size of the sensitive
domain (assuming functions are the unit of partitioning). To pro-
duce partition #1 in systems that require declassification [4, 15],
one would manually declassify the return values of auth2. Partition
#2 puts auth and auth2 in the sensitive domain and main in the
Session 5A: Software SecurityCCS ’19, November 11–15, 2019, London, United Kingdom1025insensitive domain. Partition #2 would likely cause less runtime
overhead than #1 because it has fewer cross-boundary function
calls (1 versus 5 calls), at the cost of an enlarged sensitive domain.
In addition, less data must be transferred between partitions, we
send only the requested password for partition #2, not the pass-
word file name as well. Therefore, partition #2 may be more desired
depending on how one considers different factors. In previous sys-
tems [4, 15], partition #2 can be achieved by manually declassify
the return result from auth to main.
This example shows that the best partition highly depends on
what the users’ tradeoffs are among multiple factors. Some earlier
work [4, 15] resorts to asking users to analyze the situation and
use manual declassification and code duplication to find a good
partition. However, such manual analysis is laborious and error-
prone. Therefore, what is needed is a flexible, automatic framework
that outputs the best partition according to users’ requirements.
4 SYSTEM OVERVIEW
Attack model. PM takes a program with some sensitive data and
splits it into a sensitive and an insensitive domain. Sensitive data
can be data of either high secrecy or low integrity. We assume pro-
grammers can identify such sensitive data and are able to annotate
the program to make sensitive data explicit. As we will explain, for
both secrecy and integrity, PM’s overall security goal of partition-
ing is based on information flow, particularly noninterference [11].
However, what the attacker controls in the case of secrecy differs
from the one for integrity. We next explain them separately (and
leave more details to Sec. 6).
When the goal is to prevent leakage of secret data, users use
PM to produce a sensitive, high-secrecy domain that holds and pro-
cesses a secret and an insensitive, low-secrecy domain for the rest
of the program. Here, we assume a strong attack model in which the
attacker can fully control the low-secrecy domain by modifying its
data and possibly its code or control flows (e.g., via code injection or
return-oriented programming); she can also control the interaction
from the low-secrecy domain to the high-secrecy domain given
the partition boundary. Given the attacker’s capabilities, PM aims
to produce a partition that achieves non-interference: the secret
data does not leak to the low-secrecy domain, modulo the data that
is declassified by the high-secrecy domain at the boundary. PM
does not determine how to declassify sensitive data automatically,
but enables assessment of the leakage rate for information flows
at boundaries to help users choose boundaries for implementing
declassifiers.
When the goal is to confine the use of low-integrity data, users
apply PM to produce a sensitive, low-integrity domain that pro-
cesses low-integrity data (e.g., untrusted data from the internet)
and an insensitive, high-integrity domain for the rest of the pro-
gram. In this case, we assume the low-integrity (sensitive) domain
can be fully controlled by the attacker because of the low-integrity
data (in contrast to the assumption that the insensitive domain can
be fully controlled in the case of secrecy). The attacker’s goal is
to influence the execution of the high-integrity domain through
controlling the interactions between the low-integrity to the high-
integrity domains. PM aims to produce a good partition that also
achieves non-interference: the low-integrity data cannot affect the
execution of the high-integrity domain, modulo the data that is en-
dorsed at the boundary from the low-integrity to the high-integrity
domain. Similarly to secrecy as described above, PM aids users in
the selection of partition boundaries for implementing endorsers.
System workflow. Fig. 3 presents PM’s workflow. It takes the
source code of an application as input and constructs a Program
Dependence Graph (PDG) for the application. We reuse our pre-
vious work [15] for PDG construction; detailed algorithms can be
found there. The user also annotates the application to tell PM what
the sensitive data is. PM then performs program analysis to quan-
tify security and performance using selected metrics. For instance,
it uses a dynamic information-flow tracker to measure the quan-
tity of sensitive flow among functions and global variables. Those
measurements are used to annotate the nodes and edges of the
PDG. Based on the annotated PDG and user-specified constraints
on the values of metrics, a partitioning algorithm searches for a
partition that satisfies the constraints and is optimal according a
user-specified goal (i.e., one of the metrics). The output is a sensitive
domain and an insensitive domain, each of which consists of both
data and code. In principle, this approach can be applied multiple
times to further decompose the resultant partitions.
We next clarify a few points. First, user-specified constraints
restrict the search space of what partitions are acceptable to users.
For instance, a user can specify that the sensitive information flow
from the sensitive domain to the insensitive one should be at most
2 bits. It can be difficult to get those constraints right in one shot;
so PM is intended as an interactive tool for users. A user specifies
some initial constraints and chooses the metric to optimize and
PM computes the optimal partition for that optimization metric
under those constraints; then the user inspects the results and pos-
sibly makes adjustments to the constraints to get further partitions.
Second, PM’s partitioning granularity is at the function level; it
does not partition individual functions. Our experiments show that
this level of granularity is sufficient for many programs; however,
there are some programs whose partitioning would require finer
granularity, as we will discuss.
5 GRAPH-BASED PARTITIONING
We next formalize program partitioning as graph partitioning. We
then show how we can encode the problem in integer programming.
5.1 Graph partitioning
For ease of exposition, we present the formalization in two steps.
First, we assume the input program consists of a set of functions
and has no global variables; here we formalize program partitioning
as call-graph partitioning. In the second step, we consider the case
when the program has both functions and global variables; in this
step, program partitioning is modeled as partitioning a program-
dependence graph.
We model a program that has a set of functions but no global
variables as a call graph. It is a directed graph G = (V , E), with
vertices V representing the program’s functions and edges E rep-
resenting call relations between functions. If function f1 can call
Session 5A: Software SecurityCCS ’19, November 11–15, 2019, London, United Kingdom1026Figure 3: System flow of PM.
f2, there is a call edge from f1 to f2.2 Without loss of generality,
we assume there is a single special function that reads in sensitive
data; we use s for the special function. For the example in Fig. 1,
auth2 is the special function since it reads the password file.
Definition 5.1 (Partitions). A partition of G = (V , E), also called
a cut, is modeled as two sets of functions (S,T ): a sensitive domain
S ⊆ V and an insensitive domain T ⊆ V and they satisfy (1) S
contains the special function (i.e., s ∈ S), and (2) S ∪ T = V .
Note that our partitions allow function replication; that is, S ∩ T
may not be empty because there may be functions that are repli-
cated in both domains. We use R = S ∩ T for the set of replicated
functions. In practice, duplicating common utility functions often
benefits performance. For instance, thttpd has a function called
my_snprintf, a custom implementation of snprintf. It is called
by many functions; without duplication, it would cause many do-
main crossings no matter what domain my_snprintf would be in.
Duplicating it in both domains benefits performance, at the cost of
larger domains.
The edges between two domains are called boundary edges; we
write BE to represent the set of boundary edges. There are two
kinds of boundary edges. Forward boundary edges are those from
| i ∈ S ∧ j ∈ T − R}. Backward
S to T − R, defined as FB = {ei j
boundary edges are those from T to S −R, defined as BB = {ei j
| i ∈
T ∧ j ∈ S − R}. We have BE = FB ∪ BB. Note that self recursion does
not pose a problem to our formalization: if there is a call edge from
f to itself, it is not considered a boundary edge by the definitions.
Given a call graph, PM annotates its vertices and edges with
a set of weights, which represent measurements of security and
performance impact at the function level. For example, a function
vertex may be associated with a weight that specifies the code size
of the function, describing one aspect of the function’s impact on
the security of a partition based on the amount of code in a sensitive
domain that includes this function. Given a partition, weights in the
graph are used to compute metrics for the partition. PM is largely
independent of the choice of metrics, but we describe the metrics
chosen in our experiments in Section 6. We discuss in Sec. 6.2 about
the space of metrics and how PM can be switched to other metrics.
Given an annotated graph, users guide PM’s partitioning process
by specifying constraints and an optimization goal. Constraints are
in the form of budgets on metrics: bi ∈ B, where bi is a limit for the
2This formalization has just forward edges but no return edges; measurements for both
the call and the return are associated with forward edges. This makes the formalization
easier to present and implement.
value of metric mi ∈ M, B is the set of budgets, and M is the set of
metrics. The optimization goal is one of the metrics. PM’s goal is
to search for the optimal partition in the following sense:
Definition 5.2 (Optimal partitioning). For a set of metrics M, a
target metric mk to minimize, and budgets B, the optimal partition
P = (S,T ) is the one that minimizes the target metric and satisfies
the following constraint: ∀mi ∈ M, mi (P ) ≤ bi , where mi (P ) is the
value of metric mi for partition P.
Global variables. When partitioning a program with both func-
tions and global variables, PM splits the program into two domains,
each with a set of functions and globals. For each global, a get-
ter function and a setter function are added. A domain can access
its own globals directly; however, to access a different domain’s
globals, RPCs are issued to the getter/setter functions. As a fur-
ther optimization, PM determines what global data are read only
and duplicates all read-only global data in both domains, reduc-
ing the frequency of context switches caused by accessing globals.
Given the above understanding, Appendix A presents necessary
adjustments to graph partitioning when the input program has
both functions and globals. Briefly, the graph becomes a Program
Dependence Graph (PDG). In this PDG, vertices represent either
functions or globals; edges are either call edges between functions,
or data-flow edges between functions and globals. Weights are
added on vertices and edges. Note that our implementation reuses
our previous work [15] to construct full-fledged PDGs [10], which
in addition contain control-dependence edges and data-dependence
edges within functions. PM, however, needs only the PDG’s call-
graph part as well as the data-dependence edges between functions
and globals, since it performs function-level partitioning.
5.2 Partitioning with integer programming
Given the formalization above, we now discuss how to find the
optimal partition using binary Integer Programming (IP). IP is linear
programming with only integral variables. Solving IP problems in
general is NP-complete, but practical IP solvers have been developed
and can solve moderately sized IP problems. A binary IP problem
is a special IP problem in which all variables are either 0 or 1. To
formulate an IP problem, one first needs to declare integral variables
with constraints. Constraints can be linear equations or inequations
on variables. Afterwards, one must define an objective function
to optimize. A solution to an IP problem is an assignment to all
declared variables that satisfies all the constraints and optimizes
the objective function.
Session 5A: Software SecurityCCS ’19, November 11–15, 2019, London, United Kingdom1027Appendix B presents in detail how to encode optimal partition
as a binary IP problem for the metrics we introduce in Sec 6. Briefly,
we introduce binary variables that model (1) whether a function
(or a global variable) is only in the sensitive domain (or only in the
insensitive domain), and (2) whether an edge is a forward boundary
edge (or a backward boundary edge). Then constraints are added
to (1) allow only valid partitions (e.g., the special sensitive function
must be in the sensitive domain), and (2) limit a produced parti-
tion to respect the given budgets. Finally, an objective function is
formalized to minimize the target metric. Overall, this encoding
declares O(|E |) number of variables and constraints.
6 METRICS
Privilege separation has traditionally been applied to reduce the
privileges of individual domains to achieve least privilege. For ex-
ample, privilege separation for OpenSSH by Provos et al. [20] refac-
tored the program into one privileged server and many unprivileged
monitors. Access to secret keys is removed from the monitors. The
server retains access to the files storing secret keys, but no longer
needs network access. However, least privilege may still permit
attacks from an unprivileged domain. For example, the SELinux
policy for the server allowed it to access files modifiable by un-
trusted monitors, which allowed unauthorized information flows
(i.e., from low-integrity monitors to high-integrity servers) that
may enable attacks. Researchers suggested modifications to the
SELinux policy and changes to access control enforcement to limit
the channels (i.e., particular system call invocations) through which
the server could access untrusted resources [23], approximating
Clark-Wilson integrity [8]. In particular, Clark-Wilson integrity
enforces an information-flow requirement that all low-integrity
data received by a high-integrity program may be received only if
the program can upgrade (e.g., endorse or filter) that data. Thus, a
privilege-separation method must enable users to configure parti-
tions that only allow authorized information flows.
In this section, we examine the information-flow security require-
ments that must be fulfilled in order to deploy sensitive domains
that process low-integrity data and high-secrecy data. Measuring
these requirements form a basis for key security metrics used by
PM to generate partitions. We then define the full set of security
metrics applied in our evaluation using PM.
Low-integrity domains. Low-integrity partitions are created to
receive untrusted, external input; the security goal is to protect the
program as much as possible from such untrusted inputs. For that,