Damg˚ard and Jurik [20] showed an efﬁcient dis-
tributed key generation mechanism for Paillier that al-
lows the creation of a public key K such that no indi-
vidual AS knows the private key, but together, they can
decrypt the value. In the full protocol, one AS creates an
encrypted vector E((cid:126)v) that represents the initial state of
the random walk. This vector is sent to each AS, who
then computes E(Ti(cid:126)v). The ASes sum up the individual
results to obtain E(∑m
i=1 Ti(cid:126)v) = E(T(cid:126)v). This process can
be iterated to obtain E(T k(cid:126)v). Finally, the ASes jointly
decrypt the result to obtain T k(cid:126)v.
Note that Paillier operates over members Zn, where n
is the product of two large primes. However, the vector
(cid:126)v and the transition matrices Ti contain fractional values.
To address this, we used ﬁxed-point representation, stor-
ing (cid:98)x× 2c(cid:99) (equivalently, (x− ε)× 2c, where ε  0.45
 4.6
nodes corresponding to the fourth cluster (colored in yel-
low). The cluster size is 17576 nodes.
Next, we recursively apply the modiﬁed SybilInfer
partitioning algorithm to this cluster. After three itera-
tions of the SybilInfer partitioning algorithm, we obtain
a subgraph of size 10143 nodes, containing 9905 P2P
nodes, and 238 other nodes. At this stage, our set of val-
idation conditions indicates that the sub-graph is indeed
fast mixing, and we stop the recursion. Table 2 shows the
values of the validation metrics on the ﬁnal subgraph and
the previous graphs. There is a signiﬁcant gap, making it
easy to select a threshold value.
To evaluate performance, we are concerned with the
false positive rate (the fraction of non-bot nodes that are
detected as bots) and the false negative rate (the frac-
tion of bot nodes that are not detected). These results
are shown in Tables 3(a) and 3(b). The experimental
methodology and parameters used were the same as in
the above example. All results are averaged over ﬁve
random seeds. Overall, we found that BotGrep was able
to detect 93-99% of bots over a variety of topologies and
workloads. In particular, we observed several key results:
Effect of botnet topology: To study applicability of
our approach to different botnet topologies, we consider
Kademlia [50], Chord [70], and de Bruijn graphs. In ad-
dition, we also consider the LEET-Chord topology [39],
a recently proposed overlay topology that aims to be dif-
ﬁcult to detect (cannot be reliably detected with exist-
ing trafﬁc dispersion graph techniques). Overall, we ﬁnd
performance to be fairly stable across multiple kinds of
botnet topologies, with detection rates higher than 95%.
In addition, BotGrep is able to achieve a false positive
rate of less than 0.42% on the harder-to-detect LEET-
Chord topology. While our approach is not perfectly ac-
curate, we envision it may be of use when coupled with
other detection strategies (e.g., previous work on botnet
detection [38, 36], or if used to signal “hints” to net-
work operators regarding which hosts may be infected.
Furthermore, while the LEET-Chord topology is harder
to detect, this comes at a tradeoff with less resilience
to failure. To study the robustness of the LEET-Chord
topology, Figure 3 shows the robustness of Chord and
LEET-Chord by randomly removing varying percentages
of nodes. We observed that LEET-Chord is much less re-
silient to node failures (or active attacks) as compared
with Chord. This trade-off between stealthiness of the
Figure 3: Robustness of Chord and LEET-Chord with 65,536
nodes. We also consider an alternative LEET-Chord-Iter, where
routing proceeds as in regular LEET-Chord, but when the des-
tination is outside the node’s cluster, and when all long range
links are failed, it greedily forwards the packet iteratively to
next clockwise cluster.
topology and its resilience is not surprising, since a com-
mon indicator of resilience is the bisection bandwidth,
and Sinclair [66] has shown that the bisection bandwidth
is bounded by the mixing time of the topology. Thus, it
is likely that the use of stealthy slow mixing topologies
to escape detection via BotGrep would adversely effect
the resilience of the botnet.
Effect of botnet graph size: Next, we vary the size
of the embedded botnet. We do this to investigate perfor-
mance as a function of botnet size, for example, to evalu-
ate whether BotGrep can efﬁciently detect small botnets
(e.g., bots in early stages of deployment, which may have
greater chance of containment) and large-scale botnets
(which may pose signiﬁcant threats due to their size and
large topological coverage). We perform this experiment
by keeping the size of the background trafﬁc graph con-
stant, and generating synthetic botnet topologies of vary-
ing sizes (between 100 and 100,000 bots). The degree
of bot nodes in the case of Chord and Kademlia depend
on the size of the topology (logN), while for de Bruijn,
we used a constant node degree of 10. Overall, we found
that as the size of the bot graph increases, performance
degrades, but only by a small amount. For example, in
Table 3(a), with the fully visible de Bruijn topology, for
100 nodes the false positive rate is zero, while for 10,000
nodes the rate becomes 0.12%.
Effect of background graph size: One concern is that
BotGrep may perform less accurately with larger back-
ground graphs, as it may become easier for the botnet
structure to “hide” in the increasing number of links in
the graph. To evaluate sensitivity of performance to
scale, we vary the size of the background communication
graph, by evaluating over both the Abilene and CAIDA
dataset (104,426 and 3,839,936 nodes, respectively). To
9
 0 20 40 60 80 100 0 10 20 30 40 50 60 70 80 90Percentage of failed  end-to-end paths [%]Percentage of failed nodes [%]ChordLEET-Chord-IterLEET-ChordTopology
de Bruijn
Kademlia
Chord
LEET-Chord
|VB|
100
1000
10000
100
1000
10000
100
1000
10000
100
1000
10000
(a) Abilene
% FP
0.00
0.01
0.12
0.00
0.01
0.10
0.00
0.01
0.08
0.00
0.03
0.42
% FN
2.00
2.40
2.35
3.20
2.48
2.12
3.00
2.32