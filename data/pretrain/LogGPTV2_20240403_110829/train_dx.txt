.\" .br abs ()
.\" function.
c89 only
includes the
.br abs ()
and
.br labs ()
functions; the functions
.br llabs ()
and
.br imaxabs ()
were added in c99.
.sh notes
trying to take the absolute value of the most negative integer
is not defined.
.pp
the
.br llabs ()
function is included in glibc since version 2.0.
the
.br imaxabs ()
function is included in
glibc since version 2.1.1.
.pp
for
.br llabs ()
to be declared, it may be necessary to define
\fb_isoc99_source\fp or \fb_isoc9x_source\fp (depending on the
version of glibc) before including any standard headers.
.pp
by default,
gcc handles
.br abs (),
.br labs (),
and (since gcc 3.0)
.br llabs ()
and
.br imaxabs ()
as built-in functions.
.sh see also
.br cabs (3),
.br ceil (3),
.br fabs (3),
.br floor (3),
.br rint (3)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.so man3/setnetgrent.3
.so man3/acos.3
.so man3/j0.3
.so man3/pthread_setaffinity_np.3
.so man3/bswap.3
.so man2/getrusage.2
.\" no new programs should use vtimes(3).
.\" getrusage(2) briefly discusses vtimes(3), so point the user there.
.so man3/tsearch.3
.so man2/outb.2
.so man3/sin.3
.\" copyright (c) 2002 by michael kerrisk 
.\"
.\" %%%license_start(verbatim)
.\" permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" since the linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  the author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  the author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%license_end
.\"
.\" 6 aug 2002 - initial creation
.\" modified 2003-05-23, michael kerrisk, 
.\" modified 2004-05-27, michael kerrisk, 
.\" 2004-12-08, mtk added o_noatime for cap_fowner
.\" 2005-08-16, mtk, added cap_audit_control and cap_audit_write
.\" 2008-07-15, serge hallyn 
.\"     document file capabilities, per-process capability
.\"     bounding set, changed semantics for cap_setpcap,
.\"     and other changes in 2.6.2[45].
.\"     add cap_mac_admin, cap_mac_override, cap_setfcap.
.\" 2008-07-15, mtk
.\"     add text describing circumstances in which cap_setpcap
.\"     (theoretically) permits a thread to change the
.\"     capability sets of another thread.
.\"     add section describing rules for programmatically
.\"     adjusting thread capability sets.
.\"     describe rationale for capability bounding set.
.\"     document "securebits" flags.
.\"     add text noting that if we set the effective flag for one file
.\"     capability, then we must also set the effective flag for all
.\"     other capabilities where the permitted or inheritable bit is set.
.\" 2011-09-07, mtk/serge hallyn: add cap_syslog
.\"
.th capabilities 7 2021-08-27 "linux" "linux programmer's manual"
.sh name
capabilities \- overview of linux capabilities
.sh description
for the purpose of performing permission checks,
traditional unix implementations distinguish two categories of processes:
.i privileged
processes (whose effective user id is 0, referred to as superuser or root),
and
.i unprivileged
processes (whose effective uid is nonzero).
privileged processes bypass all kernel permission checks,
while unprivileged processes are subject to full permission
checking based on the process's credentials
(usually: effective uid, effective gid, and supplementary group list).
.pp
starting with kernel 2.2, linux divides the privileges traditionally
associated with superuser into distinct units, known as
.ir capabilities ,
which can be independently enabled and disabled.
capabilities are a per-thread attribute.
.\"
.ss capabilities list
the following list shows the capabilities implemented on linux,
and the operations or behaviors that each capability permits:
.tp
.br cap_audit_control " (since linux 2.6.11)"
enable and disable kernel auditing; change auditing filter rules;
retrieve auditing status and filtering rules.
.tp
.br cap_audit_read " (since linux 3.16)"
.\" commit a29b694aa1739f9d76538e34ae25524f9c549d59
.\" commit 3a101b8de0d39403b2c7e5c23fd0b005668acf48
allow reading the audit log via a multicast netlink socket.
.tp
.br cap_audit_write " (since linux 2.6.11)"
write records to kernel auditing log.
.\" fixme add fan_enable_audit
.tp
.br cap_block_suspend " (since linux 3.5)"
employ features that can block system suspend
.rb ( epoll (7)
.br epollwakeup ,
.ir /proc/sys/wake_lock ).
.tp
.br cap_bpf " (since linux 5.8)"
employ privileged bpf operations; see
.br bpf (2)
and
.br bpf\-helpers (7).
.ip
this capability was added in linux 5.8 to separate out
bpf functionality from the overloaded
.br cap_sys_admin
capability.
.tp
.br cap_checkpoint_restore " (since linux 5.9)"
.\" commit 124ea650d3072b005457faed69909221c2905a1f
.pd 0
.rs
.ip * 2
update
.i /proc/sys/kernel/ns_last_pid
(see
.br pid_namespaces (7));
.ip *
employ the
.i set_tid
feature of
.br clone3 (2);
.\" fixme there is also some use case relating to
.\" prctl_set_mm_exe_file(); in the 5.9 sources, see
.\" prctl_set_mm_map().
.ip *
read the contents of the symbolic links in
.ir /proc/[pid]/map_files
for other processes.
.re
.pd
.ip
this capability was added in linux 5.9 to separate out
checkpoint/restore functionality from the overloaded
.br cap_sys_admin
capability.
.tp
.b cap_chown
make arbitrary changes to file uids and gids (see
.br chown (2)).
.tp
.b cap_dac_override
bypass file read, write, and execute permission checks.
(dac is an abbreviation of "discretionary access control".)
.tp
.b cap_dac_read_search
.pd 0
.rs
.ip * 2
bypass file read permission checks and
directory read and execute permission checks;
.ip *
invoke
.br open_by_handle_at (2);
.ip *
use the
.br linkat (2)
.b at_empty_path
flag to create a link to a file referred to by a file descriptor.
.re
.pd
.tp
.b cap_fowner
.pd 0
.rs
.ip * 2
bypass permission checks on operations that normally
require the filesystem uid of the process to match the uid of
the file (e.g.,
.br chmod (2),
.br utime (2)),
excluding those operations covered by
.b cap_dac_override
and
.br cap_dac_read_search ;
.ip *
set inode flags (see
.br ioctl_iflags (2))
on arbitrary files;
.ip *
set access control lists (acls) on arbitrary files;
.ip *
ignore directory sticky bit on file deletion;
.ip *
modify
.i user
extended attributes on sticky directory owned by any user;
.ip *
specify
.b o_noatime
for arbitrary files in
.br open (2)
and
.br fcntl (2).
.re
.pd
.tp
.b cap_fsetid
.pd 0
.rs
.ip * 2
don't clear set-user-id and set-group-id mode
bits when a file is modified;
.ip *
set the set-group-id bit for a file whose gid does not match
the filesystem or any of the supplementary gids of the calling process.
.re
.pd
.tp
.b cap_ipc_lock
.\" fixme . as at linux 3.2, there are some strange uses of this capability
.\" in other places; they probably should be replaced with something else.
.pd 0
.rs
.ip * 2
lock memory
.rb ( mlock (2),
.br mlockall (2),
.br mmap (2),
.br shmctl (2));
.ip *
allocate memory using huge pages
.rb ( memfd_create (2),
.br mmap (2),
.br shmctl (2)).
.pd 0
.re
.tp
.b cap_ipc_owner
bypass permission checks for operations on system v ipc objects.
.tp
.b cap_kill
bypass permission checks for sending signals (see
.br kill (2)).
this includes use of the
.br ioctl (2)
.b kdsigaccept
operation.
.\" fixme . cap_kill also has an effect for threads + setting child
.\"       termination signal to other than sigchld: without this
.\"       capability, the termination signal reverts to sigchld
.\"       if the child does an exec().  what is the rationale
.\"       for this?
.tp
.br cap_lease " (since linux 2.4)"
establish leases on arbitrary files (see
.br fcntl (2)).
.tp
.b cap_linux_immutable
set the
.b fs_append_fl
and
.b fs_immutable_fl
inode flags (see
.br ioctl_iflags (2)).
.tp
.br cap_mac_admin " (since linux 2.6.25)"
allow mac configuration or state changes.
implemented for the smack linux security module (lsm).
.tp
.br cap_mac_override " (since linux 2.6.25)"
override mandatory access control (mac).
implemented for the smack lsm.
.tp
.br cap_mknod " (since linux 2.4)"
create special files using
.br mknod (2).
.tp
.b cap_net_admin
perform various network-related operations:
.pd 0
.rs
.ip * 2
interface configuration;
.ip *
administration of ip firewall, masquerading, and accounting;
.ip *
modify routing tables;
.ip *
bind to any address for transparent proxying;
.ip *
set type-of-service (tos);
.ip *
clear driver statistics;
.ip *
set promiscuous mode;
.ip *
enabling multicasting;
.ip *
use
.br setsockopt (2)
to set the following socket options:
.br so_debug ,
.br so_mark ,
.br so_priority
(for a priority outside the range 0 to 6),
.br so_rcvbufforce ,
and
.br so_sndbufforce .
.re
.pd
.tp
.b cap_net_bind_service
bind a socket to internet domain privileged ports
(port numbers less than 1024).
.tp
.b cap_net_broadcast
(unused)  make socket broadcasts, and listen to multicasts.
.\" fixme since linux 4.2, there are use cases for netlink sockets
.\"    commit 59324cf35aba5336b611074028777838a963d03b
.tp
.b cap_net_raw
.pd 0
.rs
.ip * 2
use raw and packet sockets;
.ip *
bind to any address for transparent proxying.
.re
.pd
.\" also various ip options and setsockopt(so_bindtodevice)
.tp
.br cap_perfmon " (since linux 5.8)"
employ various performance-monitoring mechanisms, including:
.rs
.ip * 2
.pd 0
call
.br perf_event_open (2);
.ip *
employ various bpf operations that have performance implications.
.re
.pd
.ip
this capability was added in linux 5.8 to separate out
performance monitoring functionality from the overloaded
.br cap_sys_admin
capability.
see also the kernel source file
.ir documentation/admin\-guide/perf\-security.rst .
.tp
.b cap_setgid
.rs
.pd 0
.ip * 2
make arbitrary manipulations of process gids and supplementary gid list;
.ip *
forge gid when passing socket credentials via unix domain sockets;
.ip *
write a group id mapping in a user namespace (see
.br user_namespaces (7)).
.pd
.re
.tp
.br cap_setfcap " (since linux 2.6.24)"
set arbitrary capabilities on a file.
.ip
.\" commit db2e718a47984b9d71ed890eb2ea36ecf150de18
since linux 5.12, this capability is
also needed to map user id 0 in a new user namespace; see
.br user_namespaces (7)
for details.
.tp
.b cap_setpcap
if file capabilities are supported (i.e., since linux 2.6.24):
add any capability from the calling thread's bounding set
to its inheritable set;
drop capabilities from the bounding set (via
.br prctl (2)
.br pr_capbset_drop );
make changes to the
.i securebits
flags.
.ip
if file capabilities are not supported (i.e., kernels before linux 2.6.24):
grant or remove any capability in the
caller's permitted capability set to or from any other process.
(this property of
.b cap_setpcap
is not available when the kernel is configured to support
file capabilities, since
.b cap_setpcap
has entirely different semantics for such kernels.)
.tp
.b cap_setuid
.rs
.pd 0
.ip * 2
make arbitrary manipulations of process uids
.rb ( setuid (2),
.br setreuid (2),
.br setresuid (2),
.br setfsuid (2));
.ip *
forge uid when passing socket credentials via unix domain sockets;
.ip *
write a user id mapping in a user namespace (see
.br user_namespaces (7)).
.pd
.re
.\" fixme cap_setuid also an effect in exec(); document this.
.tp
.b cap_sys_admin
.ir note :
this capability is overloaded; see
.ir "notes to kernel developers" ,
below.
.ip
.pd 0
.rs
.ip * 2
perform a range of system administration operations including:
.br quotactl (2),
.br mount (2),
.br umount (2),
.br pivot_root (2),
.br swapon (2),
.br swapoff (2),
.br sethostname (2),
and
.br setdomainname (2);
.ip *
perform privileged
.br syslog (2)
operations (since linux 2.6.37,
.br cap_syslog
should be used to permit such operations);
.ip *
perform
.b vm86_request_irq
.br vm86 (2)
command;
.ip *
access the same checkpoint/restore functionality that is governed by
.br cap_checkpoint_restore
(but the latter, weaker capability is preferred for accessing
that functionality).
.ip *
perform the same bpf operations as are governed by
.br cap_bpf
(but the latter, weaker capability is preferred for accessing
that functionality).
.ip *
employ the same performance monitoring mechanisms as are governed by
.br cap_perfmon
(but the latter, weaker capability is preferred for accessing
that functionality).
.ip *
perform
.b ipc_set
and
.b ipc_rmid
operations on arbitrary system v ipc objects;
.ip *
override
.b rlimit_nproc
resource limit;
.ip *
perform operations on
.i trusted
and
.i security
extended attributes (see
.br xattr (7));
.ip *
use
.br lookup_dcookie (2);
.ip *
use
.br ioprio_set (2)
to assign
.b ioprio_class_rt
and (before linux 2.6.25)
.b ioprio_class_idle
i/o scheduling classes;
.ip *
forge pid when passing socket credentials via unix domain sockets;
.ip *
exceed
.ir /proc/sys/fs/file\-max ,
the system-wide limit on the number of open files,
in system calls that open files (e.g.,
.br accept (2),
.br execve (2),
.br open (2),