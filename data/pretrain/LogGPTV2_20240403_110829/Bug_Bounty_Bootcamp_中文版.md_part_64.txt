to read do not display.
接着，尝试提取一些常见的系统文件。例如，你可以从文件 /etc/hostname 和
/etc/passwd 开始。另一个我喜欢使用 XXE 提取的文件是
.bash_history。这个文件通常位于每个用户的主目录(\~/.bash_history)，它包含了之前执行的命令列表。通过阅读此文件，您通常可以发现内部
URL、IP
地址和文件位置等有用信息。这里提到的常见系统文件或路径可能会受到限制，所以如果您试图读取的前几个文件没有显示，请不要放弃。
### Step 3: Test for Blind XXE {#c15.xhtml#h2-123456c15-0003}
If the server takes XML input but does not return the XML document in an
HTTP response, you can test for a blind XXE instead. Instead of reading
files from the server's response, most blind XXE attacks steal data by
having the target server make a request to the attacker's server with
the exfiltrated information.
如果服务器接受XML输入但没有在HTTP响应中返回XML文档，则可以测试盲目的XXE。大多数盲目的XXE攻击并非从服务器响应中读取文件，而是通过让目标服务器向攻击者的服务器发出请求，从而窃取数据。
First, you need to make sure that the server can make outbound
connections by having the target make a request to your server. You can
set up a callback listener by following the instructions in [ Chapter 13
]{.xref itemid="xref_target_Chapter 13"} . The process for setting up a
listener to discover XXEs is the same as setting up to find SSRFs. Try
making an external entity load a resource on your machine. To bypass
common firewall restrictions, you should test with ports 80 and 443
first, because the target's firewall might not allow outbound
connections on other ports:
首先，您需要确保服务器可以进行出站连接，方法是让目标向您的服务器发送请求。您可以按照第13章的说明设置回调监听器。设置监听器以发现XXE与设置查找SSRF的过程相同。尝试使外部实体在您的机器上加载资源。为了绕过常见的防火墙限制，您应该首先使用80和443端口进行测试，因为目标的防火墙可能不允许其他端口的出站连接。
    ]>
    &test;
You can then search the access logs of your server and look for a
request to that particular file. In this case, you'll be looking for a
GET request for the *xxe_test.txt* file. Once you've confirmed that the
server can make outbound requests, you can try to exfiltrate files by
using the techniques covered in upcoming sections.
然后，您可以搜索服务器的访问日志并查找对该特定文件的请求。在本例中，您将寻找对xxe_test.txt文件的GET请求。一旦确认服务器可以进行出站请求，就可以尝试使用下面要讨论的技术来窃取文件。
### [ ]{#c15.xhtml#Page_253 .pagebreak title="253"} Step 4: Embed XXE Payloads in Different File Types {#c15.xhtml#h2-123456c15-0004}
Besides testing for XXEs on HTTP request bodies, you can try to upload
files containing XXE payloads to the server. File-upload endpoints and
file parsers are often not protected by the same XXE protection
mechanisms as regular endpoints. And hiding your XXE payloads in
different file types means that you will be able to upload your payloads
even if the application restricts the type of files that can be
uploaded.
除了在HTTP请求体中测试XXE外，您可以尝试上传包含XXE载荷的文件到服务器。文件上传端点和文件解析器通常没有像常规端点一样受到相同的XXE保护机制保护。而且，将XXE载荷隐藏在不同类型的文件中意味着，即使应用程序限制可以上传的文件类型，您也将能够上传您的载荷。
This section presents just a few examples of how to embed XXE payloads
in various file types. You should be able to find more examples by
searching the internet.
本节仅提供了几个将XXE负载嵌入各种文件类型中的示例。您可以通过在互联网上搜索来找到更多示例。
To embed an XXE payload in an SVG image, you need to first open up the
image as a text file. Take this SVG image of a blue circle, for example:
嵌入一个XXE有效载荷到SVG图像中，您需要先将图像作为一个文本文件打开。以这个蓝色圆形的SVG图像为例：
Insert the XXE payload by adding a DTD directly into the file and
referencing the external entity in the SVG image. You can then save the
file as an *.svg* file and upload it to the server:
将XXE负载插入文件中，通过直接在文件中添加DTD并在SVG图像中引用外部实体。然后，您可以将文件保存为.svg文件，并上传到服务器：
    ]>
      &test;
Microsoft Word documents ( *.docx* files), PowerPoint presentations (
*.pptx* ), and Excel worksheets ( *.xlxs* ) are archive files containing
XML files, so you can insert XXE payloads into them as well. To do so,
you should first unzip the document file. For example, I used the
Unarchiver software on a Mac to extract the files. You should see a few
folders containing XML files ( [Figure
15-1](#c15.xhtml#figure15-1){#c15.xhtml#figureanchor15-1} ).
Microsoft Word 文档（.docx 文件）、PowerPoint 演示文稿（.pptx）和 Excel
工作表（.xlxs）均为包含 XML 文件的档案文件，因此您也可以在其中插入 XXE
负载。为此，您首先需要解压缩文档文件。例如，我在 Mac 上使用 Unarchiver
软件提取文件。您应该会看到几个包含 XML 文件的文件夹（图 15-1）。
![[Figure 15-1]{#c15.xhtml#figure15-1} : When you unarchive a DOCX file,
you will see a few folders containing XML files. ¶
图15-1：当你解压一个DOCX文件时，你会看到几个包含XML文件的文件夹。](image_fi/501546c15/f15001.png){.keyline}
[ ]{#c15.xhtml#Page_254 .pagebreak title="254"} Then you can simply
insert your payload into */word/document.xml* , */ppt/presentation.xml*
, or */xl/workbook.xml* . Finally, repack the archives into the *.docx*
, *.pptx* , or *.xlxs* format.
然后，您可以将负载简单地插入到/word/document.xml、/ppt/presentation.xml或/xl/workbook.xml中。最后，将归档重新打包成.docx、.pptx或.xlxs格式。
You can do this by `      cd     ` ing into the unarchived folder and
running the command `      zip -r     `
`      filename.format     `{.variable} `      *     ` . The
`      zip     ` command line utility archives files. The
`      -r     ` option tells `      zip     ` to recursively archive
files in directories, `      filename.format     `{.variable} tells zip
what the name of the archived file should be, and `      *     ` tells
zip to archive all files in the current directory. In this case, you can
run these commands to create a new DOCX file:
你可以通过进入未归档文件夹并运行命令zip -r文件名格式\*来完成此操作。
zip命令行实用程序对文件进行归档。
-r选项告诉zip递归地在目录中归档文件，文件名格式告诉zip所归档文件的名称，\*告诉zip归档当前目录中的所有文件。在这种情况下，您可以运行这些命令来创建新的DOCX文件：
    cd example
    zip -r new_example.docx *
You should see the repacked document appear in the current directory.
你应该能看到重新打包的文档出现在当前目录下。
### Step 5: Test for XInclude Attacks {#c15.xhtml#h2-123456c15-0005}
Sometimes you cannot control the entire XML document or edit the DTD of
an XML document. But you can still exploit an XXE vulnerability if the
target application takes your user input and inserts it into XML
documents on the backend.
有时你无法控制整个XML文档，或者编辑XML文档的DTD。但是如果目标应用程序接受您的用户输入并将其插入后端的XML文档中，您仍然可以利用XXE漏洞。
In this situation, you might be able to execute an XInclude attack
instead. *XInclude* is a special XML feature that builds a separate XML
document from a single XML tag named `      xi:include     ` . If you
can control even a single piece of unsanitized data passed into an XML
document, you might be able to place an XInclude attack within that
value.
在这种情况下，你可能会执行一个XInclude攻击。
XInclude是一种特殊的XML功能，可以从一个名为xi：include的单个XML标记构建单独的XML文档。如果您可以控制传递到XML文档的未经过滤的数据的任何一个部分，则可能将XInclude攻击放置在该值中。
To test for XInclude attacks, insert the following payload into the data
entry point and see if the file that you requested gets sent back in the
response body:
为测试XInclude攻击，请将以下负载插入到数据输入点中，并查看请求的文件是否会发送回响应主体中：
This piece of XML code does two things. First, it references the
*http://www.w3.org/2001/XInclude* namespace so that we can use the
`      xi:include     ` element. Next, it uses that element to parse and
include the */etc/hostname* file in the XML document.
这段XML代码有两个作用。首先，它引用了http://www.w3.org/2001/XInclude命名空间，以便我们可以使用xi:include元素。接下来，它使用该元素来解析并包含XML文档中的/etc/hostname文件。
## Escalating the Attack {#c15.xhtml#h1-123456c15-0004}
What you can achieve with an XXE vulnerability depends on the
permissions given to the XML parser. Generally, you can use XXEs to
access and exfiltrate system files, source code, and directory listings
on the local machine. You can also use XXEs to perform SSRF attacks to
port-scan the target's network, read files on the network, and access
resources that are hidden behind a firewall. Finally, attackers
sometimes use XXEs to launch DoS attacks.
使用XXE漏洞可以获得的权限取决于XML解析器授予的权限。通常，您可以使用XXE来访问和窃取本地机器上的系统文件、源代码和目录列表。您还可以使用XXE执行SSRF攻击来端口扫描目标网络、读取网络上的文件以及访问隐藏在防火墙后的资源。最后，攻击者有时使用XXE启动DoS攻击。
### [ ]{#c15.xhtml#Page_255 .pagebreak title="255"} Reading Files {#c15.xhtml#h2-123456c15-0006}
To read local files by using an XXE vulnerability, place the local
file's path into the DTD of the parsed XML file. Local files can be
accessed by using the *file://* URL scheme followed by the file's path
on the machine. This payload will make the XML parser return the
contents of the */etc/shadow* file on the server:
使用XXE漏洞读取本地文件，将本地文件路径放入已解析XML文件的DTD中。可以使用文件：//
URL方案后跟该机器上的文件路径来访问本地文件。此有效载荷将使XML解析器返回服务器上/
etc / shadow文件的内容。
    ]>
    &file;
### Launching an SSRF {#c15.xhtml#h2-123456c15-0007}
Besides retrieving system files, you can use the XXE vulnerability to
launch SSRF attacks against the local network. For example, you can
launch a port scan by switching out the external entity's URL with
different ports on the target machine. This is similar to the
port-scanning technique mentioned in [ Chapter 13 ]{.xref
itemid="xref_target_Chapter 13"} , where you can determine the status of
a port by analyzing differences in the server's responses:
除了检索系统文件外，您还可以使用XXE漏洞发起针对本地网络的SSRF攻击。例如，您可以通过在目标机器上使用不同的端口替换外部实体的URL来发起端口扫描。这类似于第13章提到的端口扫描技术，通过分析服务器响应中的差异可以确定端口的状态。
    ]>
    &file;
You can also use an XXE to launch an SSRF to pull instance metadata, as
we talked about in [ Chapter 13 ]{.xref itemid="xref_target_Chapter 13"}
. This payload will make the parser return AWS metadata:
您还可以使用 XXE 进行 SSRF
启动来提取实例元数据，就像我们在第13章中讨论的那样。此有效载荷将导致解析器返回
AWS 元数据。
    ]>
    &file;
When trying to view unintended data like this, you should look for the
exfiltrated data by inspecting the page source code (right-click the
page and click **View Source** ) or HTTP response directly, rather than
viewing the HTML page rendered by the browser, because the browser might
not render the page correctly.
当尝试查看意外数据时，应该通过检查页面源代码（右键单击页面并单击"查看源代码"）或直接查看HTTP响应来查找渗透的数据，而不是查看浏览器呈现的HTML页面，因为浏览器可能无法正确呈现该页面。
Of course, what you can do with an XXE-based SSRF isn't simply limited
to network scanning and retrieving instance metadata. You can also use
the information you gathered to pivot into internal services. For more
ideas of how to exploit SSRFs, visit [ Chapter 13 ]{.xref
itemid="xref_target_Chapter 13"} .
当然，通过基于XXE的SSRF，您可以做的不仅仅局限于网络扫描和检索实例元数据。您还可以使用收集的信息来进入内部服务。有关如何利用SSRF的更多想法，请访问第13章。
### [ ]{#c15.xhtml#Page_256 .pagebreak title="256"} Using Blind XXEs {#c15.xhtml#h2-123456c15-0008}
Sometimes the application does not return the results of XML parsing to
the user. In this case, you can still exfiltrate data to a server that
you control by forcing the XML parser to make an external request with
the desired data in the request URL---the blind XXE attacks mentioned
earlier. Then you can monitor your server logs to retrieve the
exfiltrated data. At this point, you might think the payload of a blind
XXE looks like this:
有时，应用程序不能向用户返回XML解析的结果。
在这种情况下，您仍可以通过强制XML解析器在请求URL中进行外部请求并将所需数据包含在其中，从而将数据窃取到您控制的服务器上 -
就像先前提到的盲目XXE攻击一样。
然后，您可以监视您的服务器日志以检索窃取的数据。
这时，您可能认为盲目XXE的有效载荷看起来像这样：
    ]>