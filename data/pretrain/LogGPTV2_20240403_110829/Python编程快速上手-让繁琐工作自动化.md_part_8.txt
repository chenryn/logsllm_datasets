中有一个被执行。elif语句是“否则如果”，总是跟在if或另一条elif语句后面。它
提供了另一个条件，仅在前面的条件为False时才检查该条件。在代码中，elif语句
总是包含以下部分：
 elif关键字；
 条件（即求值为True或False的表达式）；
 冒号；
 在下一行开始，缩进的代码块（称为elif子句）。
让我们在名字检查程序中添加elif，看看这个语句的效果。
if name == 'Alice':
print('Hi, Alice.')
elif age  2000:
print('Unlike you, Alice is not an undead, immortal vampire.')
elif age > 100:
print('You are not Alice, grannie.')
图2-5 elif语句的流程图
这里，我添加了另外两条 elif 语句，让名字检查程序根据 age的不同答案而发
出问候。图2-6展示了这段代码的流程图。
但是，elif语句的次序确实重要。让我们重新排序，引入一个缺陷。回忆一下，
一旦找到一个True条件，剩余的子句就会自动跳过。所以如果交换vampire.py中的
一些子句，就会遇到问题。像下面这样改变代码，将它保存为vampire2.py。
if name == 'Alice':
print('Hi, Alice.')
elif age  100:
print('You are not Alice, grannie.')
elif age > 2000:
print('Unlike you, Alice is not an undead, immortal vampire.')
图2-6 vampire.py程序中多重elif语句的流程图
假设在这段代码执行之前，age变量的值是3000。你可能预计代码会打印出字
符串'Unlike you, Alice is not an undead, immortal vampire.'。但是，因为age > 100条
件为真（毕竟3000大于100），字符串'You are not Alice, grannie.'被打印出来，剩
第2章 控制流
下的语句自动跳过。别忘了，最多只有一个子句会执行，对于 elif语句，次序是很
重要的。
图2-7展示了前面代码的流程图。请注意，菱形age > 100和age > 2000交换了
位置。
图2-7 vampire2.py程序的流程图。打叉的路径在逻辑上永远不会发生，
因为如果age大于2000，它就已经大于100了
Python编程快速上手——让繁琐工作自动化
你可以选择在最后的elif语句后面加上else语句。在这种情况下，保证至少一
个子句（且只有一个）会执行。如果每个if和elif语句中的条件都为False，就执行
else子句。例如，让我们使用if、elif和else子句重新编写Alicee程序。
if name == 'Alice':
print('Hi, Alice.')
elif age < 12:
print('You are not Alice, kiddo.')
else:
print('You are neither Alice nor a little kid.')
图2-8展示了这段新代码的流程图，我们将它保存为littleKid.py。
图2-8 前面littleKid.py程序的流程图
在英语中，这类控制流结构会使得：“如果第一个条件为真，做这个。否则，
如果第二个条件为真，做那个。否则，做另外的事。”如果你同时使用这3个语句，
第2章 控制流
要记住这些次序规则，避免图2-7中那样的缺陷。首先，总是只有一个if语句。所
有需要的elif语句都应该跟在if语句之后。其次，如果希望确保至少一条子句被执
行，在最后加上else语句。
2.7.4 while 循环语句
利用while语句，可以让一个代码块一遍又一遍的执行。只要 while语句的条
件为 True，while 子句中的代码就会执行。在代码中，while 语句总是包含下面几
部分：
 关键字；
 条件（求值为True或False的表达式）；
 冒号；
 从新行开始，缩进的代码块（称为while子句）。
可以看到，while 语句看起来和 if 语句类似。不同之处是它们的行为。if 子句
结束时，程序继续执行if语句之后的语句。但在while子句结束时，程序执行跳回
到while语句开始处。while子句常被称为“while循环”，或就是“循环”。
让我们来看一个if语句和一个while循环。它们使用同样的条件，并基于该条
件做出同样的动作。下面是if语句的代码：
spam = 0
if spam < 5:
print('Hello, world.')
spam = spam + 1
下面是while语句的代码：
spam = 0
while spam < 5:
print('Hello, world.')
spam = spam + 1
这些语句类似，if和while都检查spam的值，如果它小于５，就打印一条消息。
但如果运行这两段代码，它们各自的表现非常不同。对于if语句，输出就是"Hello,
world."。但对于while语句，输出是"Hello, world."重复了5次！看一看这两段代码
的流程图，图2-9和2-10，找一找原因。
带有if语句的代码检查条件，如果条件为True，就打印一次"Hello, world."。带
有while循环的代码则不同，会打印5次。打印5次后停下来是因为，在每次循环
迭代末尾，spam中的整数都增加1。这意味着循环将执行5次，然后spam < 5变为
False。
在 while 循环中，条件总是在每次“迭代”开始时检查（也就是每次循环执行
时）。如果条件为True，子句就会执行，然后，再次检查条件。当条件第一次为False
时，while子句就跳过。
Python编程快速上手——让繁琐工作自动化
图2-9 if语句代码的流程图
图2-10 while语句代码的流程图
2.7.5 恼人的循环
这里有一个小例子，它不停地要求你输入“your name”（就是这个字符串，而
第2章 控制流
不是你的名字）。选择FileNew Window，打开一个新的文件编辑器窗口，输入以
下代码，将文件保存为yourName.py：
 name = ''
 while name != 'your name':
print('Please type your name.')
 name = input()
 p rint('Thank you!')
首先，程序将变量name设置为一个空字符串。这样，条件name != 'your name'
就会求值为True，程序就会进入while循环的子句。
这个子句内的代码要求用户输入他们的名字，然后赋给 name 变量。因为这是语
句块的最后一行，所以执行就回到while循环的开始，重新对条件求值。如果name中的
值“不等于”字符串'your name'，那么条件就为True，执行将再次进入while子句。
但如果用户输入your name，while循环的条件就变成'your name' != 'your name'，
它求值为 False。条件现在是 False，程序就不会再次进入 while 循环子句，而是跳
过它，继续执行程序后面的部分。图2-11展示了yourName.py程序的流程图。
图2-11 yourName.py程序的流程图
Python编程快速上手——让繁琐工作自动化
现在，让我们来看看yourName.py程序的效果。按F5键运行它，输几次your name
之外的东西，然后再提供程序想要的输入。
Please type your name.
Al
Please type your name.
Albert
Please type your name.
%#@#%*(^&!!!
Please type your name.
your name
Thank you!
如果永不输入 your name，那么循环的条件就永远为 False，程序将永远问
下去。这里，input()调用让用户输入正确的字符串，以便让程序继续。在其他
程序，条件可能永远没有实际变化，这可能会出问题。让我们来看看如何跳出
循环。
2.7.6 break 语句
有一个捷径，让执行提前跳出 while 循环子句。如果执行遇到 break 语句，就
会马上退出while循环子句。在代码中，break语句仅包含break关键字。
非常简单，对吗？这里有一个程序，和前面的程序做一样的事情，但使用了break
语句来跳出循环。输入以下代码，将文件保存为yourName2.py：
 while True:
print('Please type your name.')
 name = input()
 if name == 'your name':
 break
 p rint('Thank you!')
第一行创建了一个“无限循环”，它是一个条件总是为True的while循环。（表
达式True 总是求值为True。）程序执行将总是进入循环，只有遇到 break 语句执行
时才会退出（“永远不”退出的无限循环是一个常见的编程缺陷）。
像以前一样，程序要求用户输入 your name。但是现在，虽然执行仍然在
while 循环内，但有一个 if 语句会被执行，检查 name 是否等于 your name。
如果条件为 True，break 语句就会运行，执行就会跳出循环，转到 print('Thank
you!') 。否则，包含 break 语句的 if语句子句就会跳过，让执行到达 while 循
环的末尾。此时，程序执行跳回到 while 语句的开始，重新检查条件。因为
条件是 True，所以执行进入循环，再次要求用户输入 your name。这个程序的流
程图参见图 2-12。
运行yourName2.py，输入你为yourName.py程序输入的同样文本。重写的程序
应该和原来的程序反应相同。
第2章 控制流
图2-12 带有无限循环的程序的流程图。注意打叉路径在逻辑上
永远不会发生，因为循环条件总是为True
2.7.7 continue 语句
像 break 语句一样，continue 语句用于循环内部。如果程序执行遇到 continue
语句，就会马上跳回到循环开始处，重新对循环条件求值（这也是执行到达循环末
尾时发生的事情）。
Python编程快速上手——让繁琐工作自动化
让我们用continue写一个程序，要求输入名字和口令。在一个新的文件编辑窗
口中输入以下代码，将程序保存为swordfish.py。
while True:
print('Who are you?')
name = input()
 if name != 'Joe':
 continue
print('Hello, Joe. What is the password? (It is a fish.)')
 password = input()
if password == 'swordfish':
 break
 p rint('Access granted.')
如果用户输入的名字不是Joe，continue语句将导致程序执行跳回到循环开
始处。再次对条件求值时，执行总是进入循环，因为条件就是True。如果执行通过
了 if 语句，用户就被要求输入口令。如果输入的口令是 swordfish，break 语句运
行，执行跳出while循环，打印Access granted。否则，执行继续到while循环
的末尾，又跳回到循环的开始。这个程序的流程图参见图2-13。
陷在无限循环中？
如果你运行一个有缺陷的程序，导致陷在一个无限循环中，那么请按Ctrl-C。
这将向程序发送KeyboardInterrupt错误，导致它立即停止。试一下，在文件编辑
器中创建一个简单的无限循环，将它保存为infiniteloop.py。
while True:
print('Hello world!')
如果运行这个程序，它将永远在屏幕上打印Hello world！因为while语句的
条件总是True。在IDLE的交互式环境窗口中，只有两种办法停止这个程序：按
下Ctrl-C或从菜单中选择ShellRestart Shell。如果你希望马上停止程序，即使
它不是陷在一个无限循环中，Ctrl-C也是很方便的。
运行这个程序，提供一些输入。只有你声称是 Joe，它才会要求输入口令。一
旦输入了正确的口令，它就会退出。
Who are you?
I'm fine, thanks. Who are you?
Who are you?
Joe