title:General State Channel Networks
author:Stefan Dziembowski and
Sebastian Faust and
Kristina Host&apos;akov&apos;a
General State Channel Networks
Stefan Dziembowski
Institute of Informatics
University of Warsaw, Poland
PI:EMAIL
Sebastian Faust
Department of Computer Science
TU Darmstadt, Germany
PI:EMAIL
Kristina Hostáková
Department of Computer Science
TU Darmstadt, Germany
PI:EMAIL
ABSTRACT
One of the fundamental challenges that hinder further adaption
of decentralized cryptocurrencies is scalability. Because current
cryptocurrencies require that all transactions are processed and
stored on a distributed ledger – the so-called blockchain – trans-
action throughput is inherently limited. An important proposal
to significantly improve scalability are off-chain protocols, where
the massive amount of transactions is executed without requiring
the costly interaction with the blockchain. Examples of off-chain
protocols include payment channels and networks, which are cur-
rently deployed by popular cryptocurrencies such as Bitcoin and
Ethereum. A further extension of payment networks envisioned for
cryptocurrencies are so-called state channel networks. In contrast to
payment networks that only support off-chain payments between
users, state channel networks allow execution of arbitrary complex
smart contracts. The main contribution of this work is to give the
first full specification for general state channel networks. Moreover,
we provide formal security definitions and prove the security of our
construction against powerful adversaries. An additional benefit of
our construction is the use of channel virtualization, which further
reduces latency and costs in complex channel networks.
CCS CONCEPTS
• Security and privacy → Cryptography;
KEYWORDS
state channel networs; virtualization; blockchain protocols; prov-
able secure protocols
ACM Reference Format:
Stefan Dziembowski, Sebastian Faust, and Kristina Hostáková. 2018. General
State Channel Networks. In 2018 ACM SIGSAC Conference on Computer and
Communications Security (CCS ’18), October 15–19, 2018, Toronto, ON, Canada.
ACM, New York, NY, USA, 18 pages. https://doi.org/10.1145/3243734.3243856
1 INTRODUCTION
In recent years we have witnessed a growing popularity of dis-
tributed cryptocurrencies such as Bitcoin [25] or Ethereum [34].
The underlying main innovation of these currencies is a consen-
sus mechanism that allows their users to maintain the so-called
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
CCS ’18, October 15–19, 2018, Toronto, ON, Canada
© 2018 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-5693-0/18/10...$15.00
https://doi.org/10.1145/3243734.3243856
blockchain (or ledger). One of the most interesting potential appli-
cations of such currencies are the microtransactions [23, 28, 30, 33],
i.e., transactions of very small values (typically less than 1 cent) that
are executed instantaneously. Once implemented, they could enable
many novel business models, e.g., fair sharing of WiFi connection,
or devices paying to each other in the “Internet of Things”.
Unfortunately, blockchain-based systems face inherent chal-
lenges that make it very hard, if not impossible, to use them directly
for microtransactions. Firstly, each transaction that is processed via
the network has to be stored on the blockchain. Moreover, consen-
sus on the blockchain requires significant time to confirm transac-
tions, e.g., in Bitcoin confirmation takes at least around 10 minutes.
This imposes a fundamental limit on how many transactions can be
processed per second (for instance, the Bitcoin network is currently
limited to process up to 7 transactions per second [3]). Finally, the
miners that process transactions, ask for fees. Once these fees sur-
pass the actual value assigned to a transaction, micropayments
become much less attractive.
A prominent tool for addressing the above challenges are off-
chain channels [2, 8, 19–21, 29, 31] that allow two users to rapidly
exchange money between each other without sending transactions
to the blockchain. Channels are implemented using so-called smart
contracts, which allow to transfer money according to complex
program rules. Below we will first briefly describe this concept, and
then give a short introduction to the state of the art in off-chain
channels.
Smart contracts. Informally speaking, smart contracts (or simply:
“contracts”) are programmable money, described in form of self-
enforcing programs that are published on the ledger. Technically,
the term “smart contract” can have two meanings: (1) a contract
code which is a static object written is some programming language,
and (2) a contract instance (a dynamic object that executes this code
and is running on a blockchain, or inside of a state channel, see
below). In the sequel we will often use this distinction (which is
similar to the distinction between “programs” and “processes” in
operating systems). One can think of a smart contract instance
as a trusted third party to which users can send coins, and that
can distribute coins between the parties, according to conditions
written in its code. Probably the best known currency that supports
contracts of an arbitrary complexity is Ethereum [34], and its most
popular contract language is Solidity. In this system, a contract
instance never acts by itself, and its actions have to be triggered by
the users (who pay the so-called fees for every contract execution).
The users communicate with the contract instances using functions
calls (from the contract code). An instance is deployed on the ledger
by a call from a special function called constructor. For more details
on smart contracts and their formal modeling we refer to Sec. 3.
Session 5C: Blockchain 2CCS’18, October 15-19, 2018, Toronto, ON, Canada949Payment channels. Payment channels are one of the most promis-
ing proposals for addressing the scalability challenges in cryptocur-
rencies. The main idea behind this technology is to keep the mas-
sive bulk of transactions off-chain. To this end, the parties that
want to open a channel deploy a special “channel contract” on the
blockchain and lock a certain amount of coins in it. Afterwards
they can freely update the channel’s balance without touching the
ledger. The blockchain is contacted only when parties involved in
the payment channel want to close the channel, or if they disagree,
in which case the channel contract handles fair settlement. In the
normal case, when the two parties involved in the payment channel
play honestly and off-chain transactions never hit the blockchain
before the channel is closed, payment channels significantly im-
prove on the shortcomings of standard blockchain-based payments
mentioned above: they limit the load put on the blockchain, allow
for instantaneous payments, and reduce transaction fees.
The idea of payment channels has been extended in several di-
rections. One of the most important extensions are the so-called
payment networks, which enable users to route transactions via
intermediary hubs. To illustrate this concept, suppose that P1 has
a payment channel with P2, and P2 has a payment channel with
P3. A channel network allows P1 to route payments to P3 via the
intermediary P2 without the need for P1 and P3 to open a chan-
nel between each other on the ledger. This reduces the on-chain
transaction load even further. The most well known example of
such a system is the Ligthning network that has been designed and
implemented by Poon and Dryja over Bitcoin [29]. It is based on a
technique called hash-locked transactions, in which each transaction
that is sent from P1 to P3 is routed explicitly via P2 – meaning that
P2 confirms that this transaction can be carried out between P1 and
P3. For further details on hash-locked transactions, we refer the
reader to, e.g., the description of the Lightning network [29] and to
the full version of this paper [13].
Virtual payment channels. An alternative technique for connect-
ing channels has recently been proposed in [12] under the name
“channel virtualization”. Using this technique two parties can open a
virtual channel over two “extended payment channels” running on
the ledger.1 Consider the example already mentioned above, where
P1 and P3 are not connected by a payment channel, but each of
them has an extended payment channel with an intermediary called
P2. In contrast to connecting payment channels via hash-locked
transactions, virtual payment channels have the advantage that the
intermediary P2 does not need to confirm each transaction routed
via him. As argued in [12], virtual channels can further reduce
latency and fees, while at the same time improving availability.2
To distinguish the standard channels from the virtual ones, the
former ones are also called ledger channels. In [12] the authors
present only a construction of virtual payment channels over a sin-
gle intermediary hub, leaving the general construction as an open
research problem. Addressing this shortcoming is one important
contribution of our work.
1Concretely, the contract representing the extended payment channel offers additional
functionality to support connecting two payment channels.
2Availability is improved because payments via the virtual channel can be completed
even if the intermediary is temporarily off-line.
State channels. A further generalization of payment channels
are state channels [5], which radically enrich the functionality of
payment channels. Concretely, the users of a state channel can,
besides payments, execute complex smart contracts in an off-chain
way. Alice and Bob who established a state channel between each
other can maintain a “simulated ledger for contracts” and perform
the execution of contracts on it “without registering them on the
real blockchain”. This happens as long as the parties do not enter
into a conflict. The security of this solution comes from the fact
that at any time parties can “register” the current off-chain state
of the channel on the real blockchain, and let the channel contract
fairly finish the execution of the contract. Examples of use cases for
state channels are manifold and include contracts for digital content
distribution, online gaming or fast decentralized token exchanges.
In contrast to payment channels, there has been only little work
on general state channels.3 One prominent project whose final goal
is to implement general state channels over Ethereum is called
Raiden [1], but currently it only supports simple payments, and a
specification of protocols for full state channel networks has not
been provided yet. The concept of an off-chain state maintained by
parties was formalized in the work of Miller et al. [24], where it is
used as a main building block for the payment channel construction.
In contrast to [24], our general state channel construction allows
two parties to have a virtual state channel whose opening does
not require any interaction with the blockchain. This significantly
improves the time complexity and the cost of a state channel cre-
ation. To our best knowledge, the only work considering longer
general state channels is [4] recently published by Coleman et
al. and developed independently from our work. The work of [4]
lacks formal definitions and security proofs. On the other hand, it
includes several features useful for practical implementation. We
are in contact with the authors of [4] and planing collaboration to
further improve our construction and move provably secure state
channel networks closer to practice.
1.1 Our contribution
As described above, until now there has not been any satisfactory
formal construction or security definition of general state channel
networks. The main contribution of this work is to address this
shortcoming by providing the first construction for building state
channel networks of arbitrary complexity together with a formal
definition and security analysis. Our construction (i) allows users
to run arbitrary complex smart contracts off-chain, and (ii) permits
to build channels over any number of intermediaries. Below we
describe our core ideas in more detail.
Constructing state channel networks. In order to construct the
general state channel networks, we follow a modular recursive
approach where virtual state channels are built recursively on top
of ledger or other – already constructed – virtual state channels. For
a high-level description of our recursive approach see Sec. 2 (and
Fig. 1 therein). As long as everybody is honest, the intermediaries in
the virtual channel are contacted only when the channel is opened
and when it is closed (and the ledger is never contacted). On the
3A state channel that is not application specific and allows to run arbitrarily complex
contracts, is called a general state channel. Since we consider only general state channels
in this work, we usually omit the word “general” for brevity.
Session 5C: Blockchain 2CCS’18, October 15-19, 2018, Toronto, ON, Canada950other hand, let us stress that no intermediary can lose its coins even
if all other parties are dishonest and every user of a virtual state
channel has the guarantee that he can execute a contract created
in a virtual state channel even if all other parties collude.
Modeling state channel networks and security proofs. In addition
to designing the first protocols for state channel networks, we de-
velop a UC-style model for “state channel networks” – inspired by
the universal composability framework introduced in the seminal
work of Canetti [9]. To this end, similarly to [12], we model money
via a global ledger ideal functionality (cid:98)L and describe a novel ideal
functionality for state channel networks that provide an ideal spec-
ification of our protocols. Using our model, we formally prove that
our protocols satisfy this ideal specification. Key challenges of our
analysis are (i) a careful study of timings that are imposed by the
processing of the ledger, and (ii) the need to guarantee that honest
parties cannot be forced to lose money by the fact that the contracts
are executed off-chain even if all other parties collude and are fully
malicious.
We emphasize that in the context of cryptocurrencies, a sound
security analysis is of particular importance because security flaws
have a direct monetary value and hence, unlike in many other
settings, are guaranteed to be exploited. The later is, e.g., illustrated
by the infamous attacks on the DAO [32]. Thus, we believe that
before complex off-chain protocols are massively deployed and
used by potentially millions of users, their specification must be
analyzed using formal methods as done in our work using UC-style
proofs.
Optimistic vs. pessimistic execution times. While constructing our
protocols we will provide the “optimistic” and “pessimistic” execu-
tion times. The “optimistic” ones refer to the standard case when
all parties behave honestly. In the optimistic case all our protocols
allow for instantaneous off-chain contract execution, and a possible
delay depends only on the latency of the network over which parties
communicate. The “pessimistic” case corresponds to the situation
when the corrupt parties try to delay the execution as much as they
can by forcing contract execution on the blockchain. In our solution
the pessimistic execution times grow linearly with the number of
intermediaries ℓ involved. Notice that these pessimistic times can in
reality happen only in the unlikely case when all but one party are
corrupt. Since the main goal of this paper is to introduce the general
framework, and not to fine-tune the parameters, we leave it as an