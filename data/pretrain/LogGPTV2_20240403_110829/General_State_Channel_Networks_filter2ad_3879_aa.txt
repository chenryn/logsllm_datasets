# General State Channel Networks

**Authors:**
- Stefan Dziembowski, Institute of Informatics, University of Warsaw, Poland
- Sebastian Faust, Department of Computer Science, TU Darmstadt, Germany
- Kristina Hostáková, Department of Computer Science, TU Darmstadt, Germany

## Abstract
One of the fundamental challenges hindering the broader adoption of decentralized cryptocurrencies is scalability. Current cryptocurrencies require all transactions to be processed and stored on a distributed ledger, known as the blockchain, which inherently limits transaction throughput. A significant proposal to improve scalability is the use of off-chain protocols, where a large number of transactions can be executed without interacting with the blockchain. Examples of off-chain protocols include payment channels and networks, which are currently implemented by popular cryptocurrencies like Bitcoin and Ethereum.

A further extension of payment networks for cryptocurrencies are state channel networks. Unlike payment networks, which only support off-chain payments between users, state channel networks allow the execution of arbitrary complex smart contracts. The primary contribution of this work is to provide the first full specification for general state channel networks. We also offer formal security definitions and prove the security of our construction against powerful adversaries. Additionally, our construction utilizes channel virtualization, which further reduces latency and costs in complex channel networks.

## CCS Concepts
- Security and privacy → Cryptography

## Keywords
- State channel networks
- Virtualization
- Blockchain protocols
- Provable secure protocols

## ACM Reference Format
Stefan Dziembowski, Sebastian Faust, and Kristina Hostáková. 2018. General State Channel Networks. In 2018 ACM SIGSAC Conference on Computer and Communications Security (CCS '18), October 15–19, 2018, Toronto, ON, Canada. ACM, New York, NY, USA, 18 pages. https://doi.org/10.1145/3243734.3243856

## 1 Introduction
In recent years, distributed cryptocurrencies such as Bitcoin and Ethereum have gained significant popularity. The main innovation of these currencies is a consensus mechanism that allows users to maintain a blockchain (or ledger). One of the most interesting potential applications of these currencies is microtransactions, which are transactions of very small values (typically less than 1 cent) executed instantaneously. Microtransactions could enable novel business models, such as fair sharing of WiFi connections or device-to-device payments in the "Internet of Things."

However, blockchain-based systems face inherent challenges that make it difficult to use them directly for microtransactions. Each transaction must be stored on the blockchain, and consensus requires significant time to confirm transactions, e.g., at least 10 minutes for Bitcoin. This imposes a fundamental limit on the number of transactions that can be processed per second (e.g., the Bitcoin network is limited to processing up to 7 transactions per second). Additionally, miners who process transactions charge fees, which can surpass the actual value of the transaction, making micropayments less attractive.

A prominent solution to these challenges is the use of off-chain channels, which allow two users to rapidly exchange money without sending transactions to the blockchain. These channels are implemented using smart contracts, which enable the transfer of money according to complex program rules. Below, we briefly describe the concept of smart contracts and provide an introduction to the state of the art in off-chain channels.

### Smart Contracts
Smart contracts are programmable money described as self-enforcing programs published on the ledger. The term "smart contract" can refer to either (1) a static contract code written in a programming language, or (2) a dynamic contract instance that executes this code and runs on a blockchain or within a state channel. A smart contract instance acts as a trusted third party, distributing coins between parties according to the conditions in its code. Ethereum is a well-known currency that supports arbitrarily complex smart contracts, and Solidity is its most popular contract language. In Ethereum, a contract instance does not act autonomously; its actions are triggered by users who pay fees for each execution. Users communicate with contract instances via function calls, and an instance is deployed on the ledger through a constructor function.

### Payment Channels
Payment channels are a promising solution to the scalability challenges in cryptocurrencies. The idea is to keep the majority of transactions off-chain. To open a channel, parties deploy a special "channel contract" on the blockchain and lock a certain amount of coins. They can then update the channel's balance without interacting with the ledger. The blockchain is contacted only when closing the channel or resolving disputes. Payment channels significantly improve on the limitations of standard blockchain-based payments by reducing the load on the blockchain, enabling instantaneous payments, and lowering transaction fees.

The concept of payment channels has been extended to payment networks, which allow users to route transactions via intermediary hubs. For example, if P1 has a payment channel with P2, and P2 has a payment channel with P3, a payment network enables P1 to route payments to P3 via P2 without P1 and P3 needing to open a channel directly. This further reduces the on-chain transaction load. The Lightning Network, designed and implemented by Poon and Dryja over Bitcoin, is a well-known example of such a system. It uses hash-locked transactions, where P2 confirms that a transaction can be carried out between P1 and P3.

### Virtual Payment Channels
An alternative technique for connecting channels, called "channel virtualization," has been proposed. This allows two parties to open a virtual channel over two "extended payment channels" running on the ledger. For instance, if P1 and P3 are not connected by a payment channel but each has an extended payment channel with an intermediary P2, they can open a virtual channel. Unlike hash-locked transactions, virtual payment channels do not require P2 to confirm each transaction, reducing latency and fees while improving availability. The authors of [12] present a construction of virtual payment channels over a single intermediary hub, leaving the general construction as an open research problem. Our work addresses this shortcoming.

### State Channels
State channels are a further generalization of payment channels, allowing users to execute complex smart contracts off-chain. Alice and Bob, who establish a state channel, can maintain a "simulated ledger for contracts" and perform contract executions without registering them on the real blockchain. The security of this solution comes from the ability to register the current off-chain state on the real blockchain and let the channel contract fairly finish the execution if a dispute arises. Use cases for state channels include digital content distribution, online gaming, and fast decentralized token exchanges.

Despite their potential, there has been little work on general state channels. The Raiden project aims to implement general state channels over Ethereum but currently only supports simple payments. The concept of an off-chain state maintained by parties was formalized in the work of Miller et al. [24], which is used as a building block for payment channel construction. Our general state channel construction allows two parties to open a virtual state channel without any interaction with the blockchain, significantly improving the time complexity and cost of state channel creation. The only other work considering longer general state channels is [4] by Coleman et al., which lacks formal definitions and security proofs but includes practical implementation features. We are in contact with the authors of [4] and plan to collaborate to further improve our construction and move provably secure state channel networks closer to practice.

### 1.1 Our Contribution
Until now, there has not been a satisfactory formal construction or security definition of general state channel networks. The main contribution of this work is to provide the first construction for building state channel networks of arbitrary complexity, along with a formal definition and security analysis. Our construction (i) allows users to run arbitrary complex smart contracts off-chain and (ii) permits building channels over any number of intermediaries.

#### Constructing State Channel Networks
To construct general state channel networks, we follow a modular recursive approach where virtual state channels are built recursively on top of ledger or other already constructed virtual state channels. As long as everyone is honest, intermediaries in the virtual channel are contacted only when the channel is opened and closed, and the ledger is never contacted. However, no intermediary can lose their coins even if all other parties are dishonest, and every user of a virtual state channel has the guarantee that they can execute a contract even if all other parties collude.

#### Modeling State Channel Networks and Security Proofs
In addition to designing the first protocols for state channel networks, we develop a UC-style model for "state channel networks," inspired by the universal composability framework introduced by Canetti [9]. We model money via a global ledger ideal functionality and describe a novel ideal functionality for state channel networks that provide an ideal specification of our protocols. Using our model, we formally prove that our protocols satisfy this ideal specification. Key challenges in our analysis include a careful study of the timings imposed by the ledger processing and ensuring that honest parties cannot be forced to lose money even if all other parties collude and are fully malicious.

We emphasize that in the context of cryptocurrencies, a sound security analysis is crucial because security flaws have a direct monetary value and are guaranteed to be exploited, as illustrated by the DAO attacks [32]. Therefore, before complex off-chain protocols are widely deployed and used by millions of users, their specifications must be analyzed using formal methods, as done in our work with UC-style proofs.

#### Optimistic vs. Pessimistic Execution Times
Our protocols provide both "optimistic" and "pessimistic" execution times. The "optimistic" times refer to the standard case where all parties behave honestly, allowing for instantaneous off-chain contract execution with delays depending only on network latency. The "pessimistic" times correspond to situations where corrupt parties try to delay execution by forcing contract execution on the blockchain. In our solution, pessimistic execution times grow linearly with the number of intermediaries involved. These times are unlikely to occur unless all but one party are corrupt. Since the main goal of this paper is to introduce the general framework, we leave the fine-tuning of parameters for future work.