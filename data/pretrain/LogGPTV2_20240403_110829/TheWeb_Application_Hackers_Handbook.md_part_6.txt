### Targeting Other Users of the Application

Attackers may target other users of the application, potentially gaining access to their data, performing unauthorized actions on their behalf, or carrying out other attacks against them.

### Information Leakage (78%)

Information leakage involves cases where an application divulges sensitive information that can be used by an attacker to develop an assault. This can occur through defective error handling or other behaviors.

### Cross-Site Request Forgery (92%)

Cross-site request forgery (CSRF) is a flaw that allows a malicious website visited by a victim user to interact with the application and perform unintended actions within the user's context and privilege level.

### Common Web Application Vulnerabilities

- **Broken Authentication**: 62%
- **Broken Access Controls**: 71%
- **SQL Injection**: 32%
- **Cross-Site Scripting (XSS)**: 94%
- **Information Leakage**: 78%
- **Cross-Site Request Forgery (CSRF)**: 92%

**Figure 1-3:** Incidence of common web application vulnerabilities in recently tested applications (based on a sample of more than 100).

### SSL and Its Limitations

SSL is an excellent technology that protects the confidentiality and integrity of data in transit between the user’s browser and the web server. It helps defend against eavesdroppers and provides assurance of the web server's identity. However, it does not prevent attacks that directly target the server or client components of an application. Specifically, it does not prevent any of the vulnerabilities listed above or many others that can render an application critically exposed to attack. Regardless of whether they use SSL, most web applications still contain security flaws.

### The Core Security Problem: Users Can Submit Arbitrary Input

Web applications face a fundamental security problem due to the client being outside the application’s control. Users can submit arbitrary input to the server-side application, which must assume that all input is potentially malicious. Therefore, the application must take steps to ensure that attackers cannot use crafted input to compromise the application by interfering with its logic and behavior, thus gaining unauthorized access to its data and functionality.

#### Manifestations of the Core Problem

- **Data Interference**: Users can interfere with any piece of data transmitted between the client and the server, including request parameters, cookies, and HTTP headers. Client-side security controls, such as input validation checks, can be easily circumvented.
- **Request Sequencing**: Users can send requests in any sequence and can submit parameters at a different stage than the application expects, more than once, or not at all. Any assumptions developers make about how users will interact with the application may be violated.
- **Non-Browser Access**: Users are not restricted to using only a web browser to access the application. Numerous widely available tools can help attack web applications by making requests that no browser would ordinarily make and generating a large number of requests quickly to find and exploit problems.

### Examples of Crafted Input Attacks

- **Product Price Manipulation**: Changing the price of a product in a hidden HTML form field to fraudulently purchase the product for a cheaper amount.
- **Session Token Modification**: Modifying a session token in an HTTP cookie to hijack the session of another authenticated user.
- **Parameter Removal**: Removing certain parameters that normally are submitted to exploit a logic flaw in the application’s processing.
- **Database Query Injection**: Altering input processed by a back-end database to inject a malicious query and access sensitive data.

### Key Problem Factors

The core security problem faced by web applications arises in any situation where an application must accept and process untrusted data that may be malicious. Several factors exacerbate this problem:

- **Underdeveloped Security Awareness**: Although awareness of web application security issues has grown, it remains less well-developed than in areas like networks and operating systems. Many web application developers make major assumptions about the security provided by their programming frameworks.
- **Custom Development**: Most web applications are developed in-house or by third-party contractors, often involving custom code and unique defects.
- **Deceptive Simplicity**: Modern web application platforms and development tools allow novice programmers to create powerful applications quickly, but there is a significant difference between functional and secure code.
- **Rapidly Evolving Threat Profile**: New concepts and threats in web application security are conceived faster than in older technologies, making it challenging for development teams to stay current.
- **Resource and Time Constraints**: Strict time and resource constraints often lead to prioritizing stability and functionality over security.
- **Overextended Technologies**: Many core web technologies have been pushed beyond their original purposes, leading to unforeseen security vulnerabilities.
- **Increasing Demands on Functionality**: Applications are designed with functionality and usability in mind, often adding features that increase the attack surface.

### The New Security Perimeter

Web applications have changed the traditional network perimeter. For an application to be accessible, the perimeter firewall must allow inbound connections over HTTP or HTTPS, and the server must connect to supporting back-end systems. If a vulnerability exists, an attacker on the public Internet may compromise the organization’s core back-end systems by submitting crafted data from a web browser. This data bypasses all the organization’s network defenses.

#### Implications of the New Security Perimeter

- **Server-Side Security**: A single line of defective code in a web application can render an organization’s internal systems vulnerable.
- **Client-Side Security**: Malicious attackers can leverage a benign but vulnerable web application to attack any user who visits it, potentially compromising the user’s trusted position on an internal network.
- **Email as Extended Authentication**: Many applications use email for password recovery, allowing an attacker who compromises a user’s web mail account to escalate the attack and compromise other accounts.

### The Future of Web Application Security

Despite the widespread adoption of web applications, they remain rife with vulnerabilities. Understanding and addressing these threats are still underdeveloped within the industry. However, the landscape is evolving:

- **Diminishing Prevalence of Old Vulnerabilities**: While old and well-understood vulnerabilities like SQL injection continue to appear, their prevalence is gradually diminishing.
- **Shift in Attack Focus**: There is a gradual shift in attention from server-side attacks to those targeting application users, which involve some kind of interaction with another user to compromise their dealings with the vulnerable application.
- **Technological Trends**: Recent trends like Web 2.0 and cloud computing have brought new attacks and variations on existing ones, but the core issues remain largely the same.

### Conclusion

Despite the changes in web application technology, some "classic" vulnerabilities, such as business logic defects and access control failures, continue to persist. These timeless issues are likely to remain relevant even as the technology stack evolves.