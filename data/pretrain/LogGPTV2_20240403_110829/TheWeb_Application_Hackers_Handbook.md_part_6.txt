target other users of the application, potentially gaining access to their
data, performing unauthorized actions on their behalf, or carrying out
other attacks against them.
n Information leakage (78%) — This involves cases where an application
divulges sensitive information that is of use to an attacker in developing
an assault against the application, through defective error handling or
other behavior.
n Cross-site request forgery (92%) — This fl aw means that application
users can be induced to perform unintended actions on the application
within their user context and privilege level. The vulnerability allows a
malicious web site visited by the victim user to interact with the applica-
tion to perform actions that the user did not intend.
Broken authentication 62%
Broken access controls 71%
SQL injection 32%
Cross-site scripting 94%
Information leakage 78%
Cross-site request
92%
forgery
0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100%
Incidence in recently tested applications
Figure 1-3: The incidence of some common web application vulnerabilities in
applications recently tested by the authors (based on a sample of more than 100)
SSL is an excellent technology that protects the confi dentiality and integrity
of data in transit between the user’s browser and the web server. It helps defend
against eavesdroppers, and it can provide assurance to the user of the identity of
the web server he is dealing with. But it does not stop attacks that directly target
the server or client components of an application, as most successful attacks do.
Specifi cally, it does not prevent any of the vulnerabilities just listed, or many
others that can render an application critically exposed to attack. Regardless of
whether they use SSL, most web applications still contain security fl aws.
cc0011..iinndddd 88 88//1199//22001111 1122::0022::0033 PPMM
Stuttard c01.indd V2 - 07/07/2011 Page 9
Chapter 1 n Web Application (In)security 9
The Core Security Problem: Users Can Submit
Arbitrary Input
As with most distributed applications, web applications face a fundamental
problem they must address to be secure. Because the client is outside of the
application’s control, users can submit arbitrary input to the server-side appli-
cation. The application must assume that all input is potentially malicious.
Therefore, it must take steps to ensure that attackers cannot use crafted input
to compromise the application by interfering with its logic and behavior, thus
gaining unauthorized access to its data and functionality.
This core problem manifests itself in various ways:
n Users can interfere with any piece of data transmitted between the client
and the server, including request parameters, cookies, and HTTP head-
ers. Any security controls implemented on the client side, such as input
validation checks, can be easily circumvented.
n Users can send requests in any sequence and can submit parameters at a
different stage than the application expects, more than once, or not at all.
Any assumption developers make about how users will interact with the
application may be violated.
n Users are not restricted to using only a web browser to access the application.
Numerous widely available tools operate alongside, or independently of,
a browser to help attack web applications. These tools can make requests
that no browser would ordinarily make and can generate huge numbers
of requests quickly to fi nd and exploit problems.
The majority of attacks against web applications involve sending input to the
server that is crafted to cause some event that was not expected or desired by
the application’s designer. Here are some examples of submitting crafted input
to achieve this objective:
n Changing the price of a product transmitted in a hidden HTML form fi eld
to fraudulently purchase the product for a cheaper amount
n Modifying a session token transmitted in an HTTP cookie to hijack the
session of another authenticated user
n Removing certain parameters that normally are submitted to exploit a
logic fl aw in the application’s processing
n Altering some input that will be processed by a back-end database to inject
a malicious database query and access sensitive data
Needless to say, SSL does nothing to stop an attacker from submitting crafted
input to the server. If the application uses SSL, this simply means that other users
on the network cannot view or modify the attacker’s data in transit. Because
cc0011..iinndddd 99 88//1199//22001111 1122::0022::0033 PPMM
Stuttard c01.indd V2 - 07/07/2011 Page 10
10 Chapter 1 n Web Application (In)security
the attacker controls her end of the SSL tunnel, she can send anything she likes
to the server through this tunnel. If any of the previously mentioned attacks
are successful, the application is emphatically vulnerable, regardless of what
its FAQ may tell you.
Key Problem Factors
The core security problem faced by web applications arises in any situation
where an application must accept and process untrusted data that may be mali-
cious. However, in the case of web applications, several factors have combined
to exacerbate the problem and explain why so many web applications on the
Internet today do such a poor job of addressing it.
Underdeveloped Security Awareness
Although awareness of web application security issues has grown in recent
years, it remains less well-developed than in longer-established areas such as
networks and operating systems. Although most people working in IT security
have a reasonable grasp of the essentials of securing networks and hardening
hosts, widespread confusion and misconception still exist about many of the
core concepts involved in web application security. A web application devel-
oper’s work increasingly involves weaving together tens, or even hundreds,
of third-party packages, all designed to abstract the developer away from the
underlying technologies. It is common to meet experienced web application
developers who make major assumptions about the security provided by their
programming framework and to whom an explanation of many basic types of
fl aws comes as a revelation.
Custom Development
Most web applications are developed in-house by an organization’s own staff
or third-party contractors. Even where an application employs well-established
components, these are typically customized or bolted together using new code.
In this situation, every application is different and may contain its own unique
defects. This stands in contrast to a typical infrastructure deployment, in which
an organization can purchase a best-of-breed product and install it in line with
industry-standard guidelines.
Deceptive Simplicity
With today’s web application platforms and development tools, it is possible for
a novice programmer to create a powerful application from scratch in a short
period of time. But there is a huge difference between producing code that is
cc0011..iinndddd 1100 88//1199//22001111 1122::0022::0033 PPMM
Stuttard c01.indd V2 - 07/07/2011 Page 11
Chapter 1 n Web Application (In)security 11
functional and code that is secure. Many web applications are created by well-
meaning individuals who simply lack the knowledge and experience to identify
where security problems may arise.
A prominent trend in recent years has been the use of application frameworks
that provide ready-made code components to handle numerous common areas
of functionality, such as authentication, page templates, message boards, and
integration with common back-end infrastructure components. Examples of these
frameworks include Liferay and Appfuse. These products make it quick and
easy to create working applications without requiring a technical understanding
of how the applications work or the potential risks they may contain. This also
means many companies use the same frameworks. Thus, when a vulnerability
is discovered, it affects many unrelated applications.
Rapidly Evolving Threat Profi le
Research into web application attacks and defenses continues to be a thriving
area in which new concepts and threats are conceived at a faster rate than is now
the case for older technologies. Particularly on the client side, it is common for
the accepted defenses against a particular attack to be undermined by research
that demonstrates a new attack technique. A development team that begins a
project with a complete knowledge of current threats may have lost this status
by the time the application is completed and deployed.
Resource and Time Constraints
Most web application development projects are subject to strict constraints on
time and resources, arising from the economics of in-house, one-off develop-
ment. In most organizations, it is often infeasible to employ dedicated security
expertise in the design or development teams. And due to project slippage,
security testing by specialists is often left until very late in the project’s life
cycle. In the balancing of competing priorities, the need to produce a stable and
functional application by a deadline normally overrides less tangible security
considerations. A typical small organization may be willing to pay for only a
few man-days of consulting time to evaluate a new application. A quick pen-
etration test will often fi nd the low-hanging fruit, but it may miss more subtle
vulnerabilities that require time and patience to identify.
Overextended Technologies
Many of the core technologies employed in web applications began life when
the landscape of the World Wide Web was very different. They have since been
pushed far beyond the purposes for which they were originally conceived, such
as the use of JavaScript as a means of data transmission in many AJAX-based
cc0011..iinndddd 1111 88//1199//22001111 1122::0022::0033 PPMM
Stuttard c01.indd V2 - 07/07/2011 Page 12
12 Chapter 1 n Web Application (In)security
applications. As the expectations placed on web application functionality have
rapidly evolved, the technologies used to implement this functionality have
lagged behind the curve, with old technologies stretched and adapted to meet
new requirements. Unsurprisingly, this has led to security vulnerabilities as
unforeseen side effects emerge.
Increasing Demands on Functionality
Applications are designed primarily with functionality and usability in mind.
Once-static user profi les now contain social networking features, allowing upload-
ing of pictures and wiki-style editing of pages. A few years ago an application
designer may have been content with implementing a username and password
challenge to create the login functionality. Modern sites may include password
recovery, username recovery, password hints, and an option to remember the
username and password on future visits. Such a site would undoubtedly be
promoted as having numerous security features, yet each one is really a self-
service feature adding to the site’s attack surface.
The New Security Perimeter
Before the rise of web applications, organizations’ efforts to secure themselves
against external attack were largely focused on the network perimeter. Defending
this perimeter entailed hardening and patching the services it needed to expose
and fi rewalling access to others.
Web applications have changed all this. For an application to be accessible
by its users, the perimeter fi rewall must allow inbound connections to the
server over HTTP or HTTPS. And for the application to function, the server
must be allowed to connect to supporting back-end systems, such as databases,
mainframes, and fi nancial and logistical systems. These systems often lie at
the core of the organization’s operations and reside behind several layers of
network-level defenses.
If a vulnerability exists within a web application, an attacker on the public
Internet may be able to compromise the organization’s core back-end systems
solely by submitting crafted data from his web browser. This data sails past all
the organization’s network defenses, in the same way as does ordinary, benign
traffi c to the web application.
The effect of widespread deployment of web applications is that the security
perimeter of a typical organization has moved. Part of that perimeter is still
embodied in fi rewalls and bastion hosts. But a signifi cant part of it is now occupied
by the organization’s web applications. Because of the manifold ways in which
web applications receive user input and pass this to sensitive back-end systems,
they are the potential gateways for a wide range of attacks, and defenses against
these attacks must be implemented within the applications themselves. A single
cc0011..iinndddd 1122 88//1199//22001111 1122::0022::0044 PPMM
Stuttard c01.indd V2 - 07/07/2011 Page 13
Chapter 1 n Web Application (In)security 13
line of defective code in a single web application can render an organization’s
internal systems vulnerable. Furthermore, with the rise of mash-up applications,
third-party widgets, and other techniques for cross-domain integration, the
server-side security perimeter frequently extends well beyond the organization
itself. Implicit trust is placed in the services of external applications and services.
The statistics described previously, of the incidence of vulnerabilities within
this new security perimeter, should give every organization pause for thought.
NOTE For an attacker targeting an organization, gaining access to the net-
work or executing arbitrary commands on servers may not be what he wants
to achieve. Often, and perhaps typically, what an attacker really wants is to
perform some application-level action such as stealing personal informa-
tion, transferring funds, or making cheap purchases. And the relocation of the
security perimeter to the application layer may greatly assist an attacker in
achieving these objectives.
For example, suppose that an attacker wants to “hack in” to a bank’s systems
and steal money from users’ accounts. In the past, before the bank deployed
a web application, the attacker might have needed to fi nd a vulnerability
in a publicly reachable service, exploit this to gain a toehold on the bank’s
DMZ, penetrate the fi rewall restricting access to its internal systems, map the
network to fi nd the mainframe computer, decipher the arcane protocol used
to access it, and guess some credentials to log in. However, if the bank now
deploys a vulnerable web application, the attacker may be able to achieve the
same outcome simply by modifying an account number in a hidden fi eld of an
HTML form.
A second way in which web applications have moved the security perimeter
arises from the threats that users themselves face when they access a vulner-
able application. A malicious attacker can leverage a benign but vulnerable web
application to attack any user who visits it. If that user is located on an internal
corporate network, the attacker may harness the user’s browser to launch an
attack against the local network from the user’s trusted position. Without any
cooperation from the user, the attacker may be able to carry out any action that
the user could perform if she were herself malicious. With the proliferation of
browser extension technologies and plug-ins, the extent of the client-side attack
surface has increased considerably.
Network administrators are familiar with the idea of preventing their users
from visiting malicious web sites, and end users themselves are gradually becom-
ing more aware of this threat. But the nature of web application vulnerabilities
means that a vulnerable application may present no less of a threat to its users
and their organization than a web site that is overtly malicious. Correspondingly,
the new security perimeter imposes a duty of care on all application owners
to protect their users from attacks against them delivered via the application.
cc0011..iinndddd 1133 88//1199//22001111 1122::0022::0044 PPMM
Stuttard c01.indd V2 - 07/07/2011 Page 14
14 Chapter 1 n Web Application (In)security
A further way in which the security perimeter has partly moved to the cli-
ent side is through the widespread use of e-mail as an extended authentication
mechanism. A huge number of today’s applications contain “forgotten password”
functions that allow an attacker to generate an account recovery e-mail to any
registered address, without requiring any other user-specifi c information. This
allows an attacker who compromises a user’s web mail account to easily escalate
the attack and compromise the victim’s accounts on most of the web applications
for which the victim is registered.
The Future of Web Application Security
Over a decade after their widespread adoption, web applications on the Internet
today are still rife with vulnerabilities. Understanding of the security threats
facing web applications, and effective ways of addressing these, are still underde-
veloped within the industry. There is currently little indication that the problem
factors described in this chapter will disappear in the near future.
That said, the details of the web application security landscape are not static.
Even though old and well-understood vulnerabilities such as SQL injection
continue to appear, their prevalence is gradually diminishing. Furthermore,
the instances that remain are becoming more diffi cult to fi nd and exploit. New
research in these areas is generally focused on developing advanced techniques
for attacking more subtle manifestations of vulnerabilities that a few years ago
could be easily detected and exploited using only a browser.
A second prominent trend has been a gradual shift in attention from attacks
against the server side of the application to those that target application users.
The latter kind of attack still leverages defects within the application itself, but
it generally involves some kind of interaction with another user to compromise
that user’s dealings with the vulnerable application. This is a trend that has
been replicated in other areas of software security. As awareness of security
threats matures, fl aws in the server side are the fi rst to be well understood and
addressed, leaving the client side as a key battleground as the learning process
continues. Of all the attacks described in this book, those against other users
are evolving the most quickly, and they have been the focus of most research
in recent years.
Various recent trends in technology have somewhat altered the landscape of
web applications. Popular consciousness about these trends exists by means of
various rather misleading buzzwords, the most prominent of which are these:
n Web 2.0 — This term refers to the greater use of functionality that enables
user-generated content and information sharing, and also the adoption
of various technologies that broadly support this functionality, including
asynchronous HTTP requests and cross-domain integration.
cc0011..iinndddd 1144 88//1199//22001111 1122::0022::0044 PPMM
Stuttard c01.indd V2 - 07/07/2011 Page 15
Chapter 1 n Web Application (In)security 15
n Cloud computing — This term refers to greater use of external service
providers for various parts of the technology stack, including applica-
tion software, application platforms, web server software, databases, and
hardware. It also refers to increased usage of virtualization technologies
within hosting environments.
As with most changes in technology, these trends have brought with them
some new attacks and variations on existing attacks. Notwithstanding the hype,
the issues raised are not quite as revolutionary as they may initially appear. We
will examine the security implications of these and other recent trends in the
appropriate locations throughout this book.
Despite all the changes that have occurred within web applications, some
categories of “classic” vulnerabilities show no sign of diminishing. They continue
to arise in pretty much the same form as they did in the earliest days of the
web. These include defects in business logic, failures to properly apply access
controls, and other design issues. Even in a world of bolted-together applica-
tion components and everything-as-a-service, these timeless issues are likely