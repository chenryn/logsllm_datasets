Enc(pk,0,r0) for some random r0.
Now, send (“create”, c0, Tend) to the internally sim-
ulated G(Contract-PublicLeaks). Upon receiving a
challenge set Ω from the ideal functionality, use the
same Ω for simulating G(Contract-PublicLeaks).
to an honest
|M|, C)
from the ideal
leaker C:
Prot-KeyTheft
Contractor C:
Create: Upon receiving input (“create”, $reward, pkV ,Tend,
∆T , C):
Send (“create”, $reward, pkV , Tend, ∆T )
G(Contract-KeyTheft).
to
Claim: Upon receiving a message (“claim”, ct)
G(Contract-KeyTheft):
from
Decrypt and output m := Dec(skC, ct).
Perpetrator P:
Intent: Same as Prot-NaiveKeyTheft (Figure 10), but
send messages to G(Contract-KeyTheft) rather than
G(Contract-NaiveKeyTheft).
Claim: Same as Prot-NaiveKeyTheft, but
to G(Contract-KeyTheft)
sages
G(Contract-NaiveKeyTheft).
send mes-
than
rather
Revoker R:
Revoke: Upon
receiving
the environment E:
G(Contract-KeyTheft).
(“revoke”,
from
forward the message to
Πrevoke)
Figure 13: User-side programs for incentive compatible
key theft.
22
Contract-PublicLeaks
Init: Set state := INIT, and donations := {}. Let crs :=
KeyGennizk(1λ ), pk := KeyGenenc(1λ ) denote
hardcoded public parameters generated through a
trusted setup.
Create: Upon receiving (“create”, c0, {cti}n
i=1, Tend) from
some leaker C:
Set state := CREATED.
Select a random subset Ω ⊂ [n] of size k, and
send (“challenge”, Ω) to C.
Conﬁrm: Upon receiving (“conﬁrm”, {(κi,πi)}i∈Ω) from C:
Assert state = CREATED.
Assert that ∀i ∈ S: πi is a valid NIZK proof (un-
der crs) for the following statement:
∃(msk,r0), s.t. (c0 = Enc(pk, msk,r0))
∧ (κi = PRF(msk,i))
Set state := CONFIRMED.
Donate: Upon receiving (“donate”, $amt) from some pur-
chaser P:
Assert state = CONFIRMED.
Assert ledger[P] ≥ $amt.
Set ledger[P] := ledger[P]− $amt.
donations := donations∪{($amt,P)}.
Accept: Upon receiving (“accept”, msk, r0) from C:
Assert state = CONFIRMED
Assert c0 = Enc(pk, msk,r0)
ledger[C] := ledger[C] + sum(donations)
Send (“leak”, msk) to all parties.
Set state := ABORTED.
Timer: If state = CONFIRMED and T > Tend: ∀($amt,P) ∈
donations: let ledger[P] := ledger[P] + $amt. Set
state := ABORTED.
Figure 15: A contract PublicLeaks that leaks a secret M
to the public in exchange for donations. This ﬁgure is a
repeat of Figure 2 for the readers’ convenience.
Ideal-PublicLeaks
Init: Set state = INIT, and donations := {}.
Create: Upon receiving (“create”, M, Tend) from some
leaker C, where M is a document consisting of n
segments denoted M := {mi}i∈[n]:
Notify (“create”, |M|, C) to S.
Select a random subset Ω ⊂ [n] of size k,
and send Ω to the adversary S.
Set state := CREATED.
Conﬁrm: Upon receiving (“conﬁrm”) from leaker C:
Assert state = CREATED.
Send {mi}i∈Ω to the adversary S.
Set state := CONFIRMED.
Donate: Upon receiving (“donate”, $amt) from some pur-
chaser P:
Notify S of (“donate”, $amt, P)
Assert state = CONFIRMED
Assert ledger[P] ≥ $amt.
Set ledger[P] := ledger[P]− $amt.
donations := donations∪{($amt,P)}.
Accept: Upon receiving (“accept”) from C:
Notify (“accept”, C) to the ideal adversary S.
Assert state = CONFIRMED.
ledger[P] := ledger[P] + sum(donations)
Send M to the ideal adversary S.
Set state := ABORTED.
Timer: If state = CONFIRMED and T > Tend: ∀($amt,P) ∈
donations: let ledger[P] := ledger[P] + $amt. Set
state := ABORTED.
Figure 14: Ideal program for public leaks.
23
• Conﬁrm: Upon receiving {mi}i∈Ω from the ideal func-
the simulator simP now computes3 κi :=
tionality:
PRF(msk,i) for i ∈ Ω. The simulator programs the
random oracle such that H(κi) = mi ⊕ cti. Now, the
simulator computes the NIZKs honestly, and send
{κi,πi}i∈Ω to the simulated G(Contract-PublicLeaks).
• Accept: Upon receiving (“accept”, P) from the ideal
functionality, upon receiving M from the ideal func-
tionality:
send (“accept”, msk) to the simulated
G(Contract-PublicLeaks). Now, based on M, program
the random oracle such that H(PRF(msk,i))⊕cti = mi
for i ∈ [n].
Simulation for an honest purchaser P.
• Donate: Environment sends (“donate”, $amt, P)
to an honest donor, simulator simP receives (“do-
nate”, $amt, P) from the ideal functionality (routed
by the wrapper S), and forwards it to the simulated
G(Contract-PublicLeaks).
Simulation for a corrupted purchaser P.
• Donate: If the environment E sends (“donate”, $amt,
P) to simP on behalf of a corrupted purchaser P
(message routed through the wrapper S), simP passes
it onto the ideal functionality, and the simulated
G(Contract-PublicLeaks).
Simulation for a corrupted leaker C.
• Create: When the environment E sends (“create”, (ct0,
{(i, cti}i∈[n]), Tend, C) to simP, simP passes it to the in-
ternally simulated G(Contract-PublicLeaks). Further,
simP decrypts the msk from c0.
Now reconstruct M in the following manner: Compute
all κi’s from the msk. For every κi that was submitted
as an RO query, the simulator recovers the mi. Oth-
erwise if for some i, κi was an RO query earlier, the
simulator programs the RO randomly at κi, and com-
putes the mi accordingly – in this case mi would be
randomly distributed.
Now, send (“create”, M, Tend) on behalf of C to the
ideal functionality where M is the document set recon-
structed as above.
• Challenge: When the environment E sends (“con-
ﬁrm”, {κi,πi}i∈Ω, C) to simP (message routed through
the wrapper S), pass the message to the simulated
G(Contract-PublicLeaks). If the NIZK proofs all ver-
ify, then send “conﬁrm” as C to the ideal functionality.
can
mi ⊕
suitably
If
output, we
compute
follows:
[H(κi,1,“enc”)||H(κi,2,“enc”) . . . , ||H(κi,z,“enc”)]
for
large z. Here we simply write H(κi)⊕ mi for convenience.
hash
encryption
has
of mi
short
as
function
the
the
3
Prot-PublicLeaks
Init: Let
crs
:= KeyGennizk(1λ )
pk :=
KeyGenenc(1λ ) denote hardcoded public pa-
rameters generated through a trusted setup.
and
As leaker C:
Create: Upon receiving (“create”,M := {mi}i∈[n],Tend,C)
from the environment E:
$←{0,1}λ
msk
For i ∈ [n], compute κi := PRF(msk,i). Then,
compute cti := H(κi)⊕ mi.
Pick random r0
Enc(pk, msk,r0).
Send (“create”,
G(Contract-PublicLeaks).
$←{0,1}λ and compute c0 :=
c0, {cti}i∈[n], Tend).
to
Challenge: Upon
receiving
(“challenge”,
G(Contract-PublicLeaks):
For i ∈ Ω: compute a NIZK proof πi for the state-
ment using witness (msk,r0):
Ω)
from
∃(msk,r0), s.t. (c0 = Enc(pk, msk,r0))
∧ (κi = PRF(msk,i))
(“conﬁrm”,
Send
G(Contract-PublicLeaks).
{κi,πi}i∈Ω).
to
Accept: Upon receiving (“accept”, C)
vironment:
G(Contract-PublicLeaks).
Send (“accept”, msk,
from the en-
to
r0).
As purchaser P:
Donate: Upon receiving (“donate”, $amt, P) from the
to
Send (“donate”, $amt).
environment E:
G(Contract-PublicLeaks).
Leak: Upon
msk)
from
receiving
(“leak”,
G(Contract-PublicLeaks):
Download
G(Contract-PublicLeaks).
For i ∈ [n], output Dec(H(PRF(msk,i)), cti).
{(i, cti)i∈[n]}
from
Figure 16: User-side programs for public leaks.
24
• Accept: When the environment E sends (“accept”,
msk,r0, C) to simP (message routed through the
wrapper S), pass the message to the simulated
G(Contract-PublicLeaks).
If Enc(pk, msk,r0) = c0,
then send “accept” as C to the ideal functionality.
• Response: In epoch Topen, C publishes the subset
of public keys PK∗ = {pks}s∈S∗ corresponding to
addresses A∗ = {as}s∈S∗. (The sample of segments
M∗ = {ms}s∈S∗ can then be decrypted by the Dark-
leaks community.)
Indistinguishability of real and ideal worlds. Given
the above description of the ideal-world simulation, it is
not hard to proceed and show the computational indis-
tinguishability of the real and the ideal worlds from the
perspective of the environment E.
Remark. Our overall proof structure for this variant is
the same as that for the optimized scheme, under the
ROM for H. For schemes under the ROM to be uni-
versally composable, each protocol instance needs to in-
stantiate a different random oracle, or the approach of
Canetti et al. [28] can be adopted.
F Supplemental Details
Leakage
for Document
F.1 Background: Existing Darkleaks Pro-
tocol
In this appendix, we present an overview of the existing,
broken Darkleaks protocol, as we are unaware of any uni-
ﬁed technical presentation elsewhere. (Speciﬁc details,
e.g., message formats, may be found in the Darkleaks
source code [3], and cryptographic primitives h1,h2,h2,
and (enc, dec) are speciﬁed below.)
The protocol steps are as follows:
• Create: The contractor C partitions the secret M =
m1 (cid:107) m2 (cid:107) . . . (cid:107) mn. For each segment mi in M =
{mi}n
i=1, C computes:
– A Bitcoin (ECDSA) private key ski = h1(mi)
and the corresponding public key pki.
– The Bitcoin address ai = h2(pki) associated
with pki.
– A symmetric key κi = h3(pki), computed as a
hash of public key pki.
– The ciphertext ei = encκi[mi].
C publishes: The parameter triple (n,k,Topen), ci-
phertexts E = {ei}n
i=1, and Bitcoin addresses A =
{ai}n
i=1.
• Challenge: At epoch (block height) Topen, the cur-
rent Bitcoin block hash Bt serves as a pseudoran-
dom seed for a challenge S∗ = {si}k
i=1.
25
• Payment: To pay for M, buyers send Bitcoin to the
addresses A − A∗ corresponding to unopened seg-
ments.
• Disclosure: The leaker C claims the payments made
to addresses in A− A∗. As spending the Bitcoin in
address ai discloses pki., decryption of all unopened
segments M − M∗ is automatically made possible
for the Darkleaks community.
h1
=
h2
h3
Here,
SHA-256,
and
=
RIPEMD-160(SHA-256()),
=
SHA-256(SHA-256()). The pair (enc, dec) in Darkleaks
corresponds to AES-256-ECB.
As a byproduct of its release of PK∗ in response to
challenge S∗, C proves (weakly) that undecrypted ci-
phertexts are well-formed, i.e., that ei = encκi[mi] for
κi = h3(pki). This cut-and-choose-type proof assures
buyers that when C claims its reward, M will be fully
disclosed.
F.2 Public
leakage
Ethereum
implementation on
The section illustrates an actual smart contract for public
leakage. This contract ﬁxes two main drawbacks with the
existing Darkleaks protocol (Shortcomings 1 and 2 dis-
cussed in 4.1). The contract mainly enables better guar-