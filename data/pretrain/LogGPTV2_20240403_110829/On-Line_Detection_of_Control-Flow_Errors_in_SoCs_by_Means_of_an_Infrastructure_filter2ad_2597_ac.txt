### System-on-Chip (SoC) with MIPS Core Processor and I-IP

In this study, a SoC was utilized, which includes a MIPS core processor, an Instruction Integrity Protection (I-IP) module, and independent code memories. Both the MIPS core and the I-IP were configured to run the same application. Faults were injected into one of the two architectures while the other remained fault-free. At each cycle of the core processor, the simulation tool compared the program counter values from both copies to detect any errors. Additionally, all errors detected by the I-IP were logged, including the type of error and other relevant information for analysis.

**Figure 3: Error Detection Scheme**
```
Memory
Memory
I-IP
I-IP
I-IP
I-IP
Random
Fault Injection
Fault
Fault
Sensitive
Sensitive
Processor
Processor
Golden
Processor
comparator
comparator
Error
Error
```

### 4.2. Fault Coverage Analysis

The proposed I-IP successfully detected all Single Event Upset (SEU) errors affecting the program counter bits during the fault injection experiments using the Viterbi application. Some specific detection cases are analyzed below:

1. **Byte Addressing in MIPS Core Processor:**
   The MIPS core processor uses byte addressing for reading from the code memory. Therefore, all instruction addresses must be multiples of 4. In some MIPS implementations, a non-zero value in the two low-order bits of the Program Counter (PC) generates a processor exception. However, in our implementation, the I-IP itself checks if these two bits are zero during every fetch operation to detect such errors.

2. **Errors in the Third Least Significant Bit:**
   Approximately 3% of the detected errors were caused by faults in the third least significant bit of the PC. When a bit flip from '1' to '0' occurs, the PC retains the same value as the previous cycle, causing the processor to re-execute the same instruction. This can affect program execution. To handle this, the I-IP checks for consecutive fetch operations that request the same memory address and, if detected, sends a no-operation (nop) instruction to the core processor. Conversely, a bit flip from '0' to '1' skips an instruction, and the I-IP detects this error because the fetch address is not the expected one (address A + size of the instruction).

3. **Conditional Branch Instructions:**
   Although all errors were detected in this experiment, there is one rare case where the I-IP fails to detect an incorrect branch. This situation can occur with conditional branch instructions, which have two valid destination addresses: one for when the branch is taken (Ataken) and another for when it is not (Anext). If a fault changes the PC value to the other valid address, the I-IP cannot detect the error. To detect such situations, the I-IP would need to duplicate all instructions affecting the condition flags and maintain replicas of the condition codes. However, the additional area and performance penalties make this alternative impractical.

### 4.2. Performance and Area Analysis

As mentioned in Section 2, most control flow error detection techniques incur significant performance and/or area overheads. The proposed I-IP, however, offers good error detection capability with minimal overheads, as shown in Table 1.

**Table 1: Performance and Area Overheads**

| Metric | Without I-IP | With I-IP | Overhead |
|--------|--------------|-----------|----------|
| Performance (# of cycles) | 8,779 | 9,972 | 13.59% |
| Area (# of gates) | 38,340 | 41,982 | 9.5% |

- **Performance Overhead:**
  The performance data in Table 1 pertains to the Viterbi algorithm used in the experiments, which typically executes in 8,779 cycles. The I-IP introduces an additional 1,193 cycles, resulting in a 13.59% increase in computation time. Other applications may exhibit different behavior depending on their use of specific instructions.

- **Area Overhead:**
  The circular register file used by the I-IP to store addresses for later comparison with the PC contents accounts for most of the area overhead. Since the technique is designed to be non-intrusive, the I-IP must locally store all necessary information to check the control flow without modifying the target processor. Unlike the performance overhead, the area overhead is application-independent and remains consistent across different applications.

### 5. Conclusions and Future Work

This paper proposes the use of an Infrastructure IP (I-IP) to detect control flow errors caused by transient faults affecting the program counter of a MIPS core processor in a SoC. The technique is non-intrusive and has been able to detect all SEU-induced errors in the program counter bits of a pipelined MIPS processor executing a benchmark application, with minimal performance and area overheads compared to existing techniques.

- **Fault Detection Capability:**
  The proposed technique achieved 100% error detection coverage for the benchmark application, with only one undetectable situation that has a negligible probability of occurrence.

- **Future Work:**
  The next steps include repeating the experiments with a broader set of benchmark applications and developing tools to automate the generation of new I-IP versions for other core processors.

### 6. References

[1] Mahmood, A., and McCluskey, E. J., “Concurrent Error Detection Using Watchdog Processors – a Survey”, IEEE Transactions on Computers, vol. 37, no. 2, IEEE Computer Society, New-York-London, February 1988, pp 160-174.
[2] Lisbôa, C. A. L., Carro, L., Sonza Reorda, M., and Violante, M. “Online Hardening of Programs against SEUs and SETs”, in Proceedings of the 21st IEEE International Symposium on Defect and Fault Tolerance in VLSI Systems - DFT 2006, IEEE Computer Society, Los Alamitos, CA, October 2006, pp. 280-288.
[3] Torellas, S., Nicolescu, B., Velazco, R., Valderas, M. G., and Savaria, Y., “Validation by fault injection of a Software Error Detection Technique dealing with critical Single Event Upsets”, in Proceedings of the 7th IEEE Latin-American Test Workshop (LATW 2006), Evangraph, Porto Alegre, RS, Brasil, March 2006, pp. 111-116.
[4] B. W. Johnson, Design and Analysis of Fault Tolerant Digital Systems: Solutions Manual, Addison-Wesley Publishing Company, Reading, MA, October 1994.
[5] Austin, T., “DIVA: A Reliable Substrate for Deep-Submicron Microarchitecture Design”. Proceedings of the 32nd ACM/IEEE International Symposium on Microarchitecture, pages 196-207, Los Alamitos, CA, November, 1999.
[6] Breveglieri, L, Koren, I, and Maistri, P., “Incorporating Error Detection and Online Reconfiguration into a Regular Architecture for the Advanced Encryption Standard”. In Proceedings of the 20th IEEE International Symposium on Defect and Fault Tolerance in VLSI Systems - DFT 2005, IEEE Computer Society, Los Alamitos, CA, October 2005, pp. 72-80.
[7] K. H. Huang, J. A. Abraham, “Algorithm-Based Fault Tolerance for Matrix Operations”, IEEE Transactions on Computers, vol. 33, December 1984, pp. 518-528.
[8] N. Oh, P.P. Shirvani, and E.J. McCluskey. “Control Flow Checking by Software Signatures”, IEEE Transactions on Reliability, Vol. 51, No. 2, March 2002, pp. 111-112.
[9] Goloubeva, O., Rebaundengo, M., Sonza Reorda, M., and Violante, M., “Soft Error Detection Using Control Flow Assertions”, in Proceedings of the 18th IEEE International Symposium on Defect and Fault Tolerance (DFT 2003), IEEE Computer Society, Los Alamitos, CA, November 2003, pp. 581-588.
[10] P. Bernardi, L. M. V. Bolzani, M. Rebaudengo, M. Sonza Reorda, F. L. Vargas, M. Violante. “A New Hybrid Fault Detection Technique for Systems-on-a-Chip”, IEEE Transactions on Computers, Vol. 55, No. 2, February 2006, pp. 185-198.
[11] M. Namjoo, “CERBERUS-16: An architecture for a general purpose watchdog processor”, in Proceedings of the 13th International Symposium on Fault-Tolerant Computing (FTCS-13), 1983, pp. 216-219.
[12] K. Wilken, J.P. Shen, “Continuous signature monitoring: low-cost concurrent detection of processor control errors”, IEEE Transactions on Computer-Aided Design of Integrated Circuits and Systems, Vol. 9, No. 6, June 1990, pp. 629-641.
[13] J. Ohlsson, M. Rimen, “Implicit signature checking”, in Digest of Papers of the 25th International Symposium on Fault-Tolerant Computing (FTCS-25), 1995, pp. 218-227.
[14] Miremadi, G., and Torin, J., “Evaluating Processor Behavior and Three Error-Detection Mechanisms Using Physical Fault-Injection”, IEEE Transactions on Reliability, vol. 44, no. 3, IEEE Computer Society, New-York-London, September 1995, pp 441-454.
[15] Alkhalifa, Z., Nair, V. S. S., Krishnamurthy, N., and Abraham, J. A., “Design and Evaluation of System-Level Checks for On-line Control Flow Error Detection”, IEEE Transactions on Parallel and Distributed Systems, vol. 10, no. 6, IEEE Computer Society, New-York-London, May-June 1999, pp 627-641.
[16] A. C. S. Beck Fo, J. C. B. Mattos, F. R. Wagner, and L. Carro, “CACO-PS: A General Purpose Cycle-Accurate Configurable Power-Simulator”, in Proceedings of the 16th Brazilian Symposium on Integrated Circuits and Systems Design (SBCCI 2003), Sep. 2003.
[17] Nicolescu, B., Savaria, B., and Velazco, R., “Software detection mechanisms providing full coverage against single bit-flip faults”. IEEE Transactions on Nuclear Science, vol. 51, no. 6, part 2, IEEE Computer Society, New-York-London, May-December 2004, pp 3510-3518.