such as 6.5Tbps for any programs that ﬁt in their hardware re-
sources, which is appealing for combating large-scale attacks;
(2) Flexibility to support evolving attacks while traditional
hardware appliances are either ﬁxed-function or have low
programmability. With new switch architectures, we have the
ﬂexibility for both detection (e.g., capture packet signatures
with the programmable parser) and mitigation (e.g., ﬁlter at-
tack trafﬁc with customizable rule tables; (3) Cost-efﬁcient
with cost similar to legacy switches of the same speed while
having signiﬁcantly lower capital costs than other appliances
(e.g., a 6.5 Tbps switch costs around $12,000 [38, 39] while
Arbor TMS [11]/APS [8] and Cisco Guard [9] cost $128,000
to $220,000 based on public estimates from [10]).
We provide a brief overview of programmable switch archi-
tectures for completeness. As shown in Figure 1, a represen-
tative programmable switch architecture is Protocol Indepen-
dent Switch Architecture (PISA) [40], where the ASIC chip
consists of a programmable parser and a number of recon-
ﬁgurable match-action tables. Developers can program the
packet parser to support user-deﬁned packet headers, specify
the matching ﬁelds and types (e.g., exact, range, and ternary
matching), and conﬁgure supported actions (e.g., CRC hash,
header ﬁeld modiﬁcation, register read/write via arithmetic
logic unit (ALU), arithmetic operations using , and metering).
We refer readers to §7 for more details.
2.2 Existing DDoS Defenses and Limitations
Table 1 highlights the tradeoffs between cost, performance,
and ﬂexibility in today’s DDoS defenses.
Traditional DDoS defense solutions. At a high-level, tradi-
tional defense solutions include: (1) Proprietary hardware
can be employed to differentiate suspicious trafﬁc from legiti-
mate trafﬁc and ﬁlter out the attack trafﬁc. However, there are
key drawbacks. First, we need expensive appliances to deal
with large-scale attacks. Second, they have low ﬂexibility as
they are hard to program and upgrade. (2) SDN/NFV-based
defense systems have been proposed to detect and respond to
DDoS attacks [10, 41, 42] that orchestrate available resources
to dynamically allocate mitigation power for attacks. How-
ever, using software-only solutions is not scalable. Even if
the operator has enough servers, benign trafﬁc needs to be
1Poseidon assumes given detection results. Poseidon has a monitor primi-
tive, but its goal is to provide count/aggregation for known attack mitigation.
Figure 1: Protocol Independent Switch Architecture.
rerouted through a number of mitigation VMs, increasing the
rerouting and processing latency. Moreover, the server foot-
print can be high; e.g., for a 100 Gbps DDoS attack, Bohatei
may need 1000+ well provisioned VMs [10], which is not
economical.
Programmable switch-based defenses. We consider a
threat model (§3.1) where an adversary can launch dynamic
attacks drawn from a set of popular volumetric DDoS attacks.
Thus, ideally we need a defense system that achieves cover-
age over a broad spectrum of attack types and rapid response
as attack situations change. Unfortunately, most existing ef-
forts in switch-based defenses are based on the P4 behavior
software simulator [43] with unrestricted resources and op-
erations, except for recent efforts [3, 14] that have hardware
implementations. These efforts suffer from one or more key
limitations in ISP settings because of the non ISP-centric
design:
• Out-of-band and low-accuracy attack detection: Most
of these solutions, including Poseidon [3], essentially “punt”
on the detection problem similar to the assumption in
Bohatei [10]. Essentially dedicated NetFlow-like moni-
toring infrastructures (e.g., running on legacy routers and
computing statistics with servers ofﬂine) are required to
coalesce packet-level data into ﬂow-level records. This
may potentially offset the hardware cost savings that pro-
grammable switches could offer. While this was a rea-
sonable assumption for an NFV-oriented deployment like
Bohatei which envisions augments an existing network
infrastructure, this is a somewhat ironic assumption for
switch-based defenses. Even if we implemented these al-
gorithms natively on the switch, they still incur limitations
as (1) packet sampling approaches cannot provide ﬁne-
grained detection results [15, 44, 45] and (2) it requires
USENIX Association
30th USENIX Security Symposium    3831
Programmable ParserDeparserIngress Match-ActiontablesBufferMatch logic: SRAM and TCAM for lookup tables, counters, meters, and hash functions.Action logic: ALUs for bit and arithmetic operations, header mod., hash ops, etc. MAEgress Match-Actiontablesextra computation resources to conduct ofﬂine analysis,
inducing signiﬁcant detection delay.
• Low-performance, in-effective mitigation: Most exist-
ing efforts [4, 5, 7] build mitigation mechanisms covering
only speciﬁc attack types such as SYN ﬂood. While Po-
seidon [3] arguably has coverage on dynamic attacks, it
does so by running backup defense modules on servers and
reroutes all trafﬁc to servers for state migration when at-
tacks change, which is incompatible with the ISP scenario.
More importantly, Poseidon’s contribution is in design-
ing switch-based mitigation for trafﬁc scrubbing centers,
where there might be a limited number of legitimate ﬂows
involved. When considering the ISP scenario with many
legitimate ﬂows, using Poseidon’s switch component may
not be as performant. For example, Poseidon uses a stan-
dard SYN proxy on the switch in a similar way as CPU
by recording 65k legitimate sessions in a hash table. This
default table will not scale to even hundreds of thousands
of connections given the O(MB) on-chip memory con-
straint, and the hash collisions will cause the drop of many
legitimate connections, just as a denial of service. Our ex-
periments in §8.1 report 25% collisions for maintaining
2M legitimate connections (table size 221).
In summary, we see that while concurrent work has also
argued the promise of programmable switches, ISP-based
defense remains an open challenge: it is difﬁcult to achieve
the performance, ﬂexibility, and cost beneﬁts at the ISP scale.
3 Jaqen Overview
In this section, we describe the scope and architecture of
Jaqen before we discuss the main technical challenges.
3.1 Problem Scope
Threat model. Our focus is on volumetric DDoS threats that
aim to exhaust the available bandwidth and resources of the
victims [1], such as TCP SYN ﬂood, ICMP ﬂood, Elephant
ﬂows, DNS ﬂood, and other ampliﬁcation threats including
DNS, NTP, and Memcached. Other attacks such as nonvolu-
metric application-layer attacks or link ﬂooding attacks [46]
are outside the scope of this paper. We consider a hybrid
and dynamic DDoS threat [1] that adversary can dynamically
choose from a set of candidate attacks {Ai}∀i at different times
to launch a DDoS attack. The adversary has a volume budget
V specifying the maximum rate that can be used to launch the
attack at a given time. That is, ∑i vt (Ai) ≤ V , where vt (Ai) is
the volume of attack Ai at time t. Given such a budget V , the
adversary can control the choice of type and volumes from set
{Ai}∀i to generate an attack.2 We assume that programmable
switches cannot be compromised by the adversary.
ISP deployment. We envision ISPs being early adopters
of such a framework, given they are already adopting pro-
2For instance, v1(SYN)=50%·V and v1(DNS)=50%·V at time 1, and then
v2(SYN)=10%·V and v2(ICMP)=90%·V at time 2.
Figure 2: Overview of Jaqen
Jaqen Workﬂow
grammable hardware [47–49]. For instance, ISPs can deploy
Jaqen in their network infrastructure to offer defense as a
service to their customers. Our system can also coexist with
other defense solutions (e.g., NFV, dedicated ASICs) at other
locations to augment their capabilities against volumetric at-
tacks; however, exploring this hybrid design is outside the
scope of this paper.
3.2
Jaqen has three logical steps, as presented in Figure 2:
(1) Detection: We do not assume prior knowledge if there
is an ongoing DDoS attack. In this step, Jaqen provides
information about whether protected users are under attack,
what types and volumes of the attack are. During this step,
the switch data plane identiﬁes the suspicious trafﬁc to-
wards detected victims and report the estimated volumes
of each attack type. An example output of this step is “vic-
tim=10.0.0.1, srcpreﬁx=11.0.1.*+12.0.3.*, total= 2.5Gbps,
vol=DNS(0.4)+SYN(0.3)+NTP(0.1)”.
(2) Resource management: Once the detection information
about the attacks is available, the resource manager on the
controller makes resource allocation decisions on where to
deploy mitigation based on attack detection results using
minimized hardware resources.
(3) Mitigation: Based on resource management, the controller
deploys mitigation modules onto the switches in the net-
work. These modules effectively and accurately block at-
tack trafﬁc at packet arrival rates. After scrubbing the mali-
cious trafﬁc, the switches forward legitimate trafﬁc without
additional processing and network latency.
Attack coverage. Jaqen’s primary focus is to enable defenses
against a broad spectrum of volumetric attacks. Our deﬁnition
of a volumetric attack is that the attacker sends a high amount
of trafﬁc or request packets to exhaust the bandwidth or re-
sources of the victim. Our current Jaqen prototype handles 16
common volumetric attacks as described in Table 16:
• TCP-based attacks: SYN ﬂood, ACK ﬂood, RST/FIN ﬂood,
DNS ﬂood (over TCP), TCP elephant ﬂows, etc.
3832    30th USENIX Security Symposium
USENIX Association
Legit trafficAttack trafficLegit traffic1.Broad-spectrum In-band DetectionNetwork-wide Resource Management2.3.Fast on-demand MitigationPerformant (Tbps+), Flexible (P4), Minimal reroute (dynamic attacks)• UDP-based attacks: Ampliﬁcation attacks using various
UDP-based protocols—DNS, NTP, SNMP, SSDP, Mem-
cached, QUIC, and UDP ﬂood.
• ICMP-based attacks: ICMP ﬂood, Smurf attack, etc.
• Application-layer attacks: simple unencrypted HTTP Get/-
Post ﬂood, SIP Register ﬂood, etc.
Interestingly, we can further extend the coverage to some
non-volumetric attacks by using Jaqen API described in §4,
such as Slowloris, HTTP slow post, ARP cache poisoning,
and DNS spooﬁng. We describe these extensions in Table 16.
Potential limitations. We analyze the potential system and
security limitations of Jaqen. First, existing programmable
switches used in Jaqen do not implement full packet parsing.
Thus, any attack detection and mitigation requiring payload
information cannot be supported. Second, Jaqen needs a few
seconds to react to the attacks. An advanced attacker who
smartly and frequently changes the attack types (e.g., <5s)
can evade the defense. However, this potential evasion would
require more computation/bandwidth and make it more difﬁ-
cult for attackers to conceal their identities (e.g., due to fre-
quent trafﬁc pattern changes), leading to alternative defenses
such as IP ﬁltering near the attack source.
3.3 Challenges
Given this workﬂow, we highlight the key design challenges
that we need to address in the following sections.
Challenge I: Broad detection coverage on current and fu-
ture volumetric attacks (§4). Programmable switches are
constrained in terms of expressiveness compared to general-
purpose servers [50] and also have limited resources. As an
example, Barefoot Toﬁno switch [12] has O(10)MB SRAM,
O(1) ALUs, and O(10) hash units.3 Such resource constraints
limit the possibility of ﬁtting a large set of (complex) algo-
rithms into switch hardware. Thus, a natural question is, how
do we achieve broad-spectrum detection for many attacks?
Challenge II: Switch-optimized, resource-efﬁcient mitiga-
tion (§5). Programmable switch’s high performance guaran-
tee comes with constrained hardware resources and computa-
tional model. Best practice mitigation mechanisms designed
for servers do not work well for programmable switches (e.g.,
not scalable and dropping legitimate connections) and we
need to carefully craft mitigation functions to deliver envi-
sioned high-performance protection to the users.
Challenge III: Efﬁcient ISP-scale defense for dynamic at-
tacks (§6). In an ISP, attack trafﬁc can enter the network from
arbitrary ingresses. One alternative is to deploy Jaqen modules
only at the ingress switches on the edge. However, given the
limited resources at switches (and other concurrent services
on the switches), this may not be feasible. To this end, we pro-
pose to leverage other switches that have available resources
3The actual numbers are proprietary under switch vendor’s NDA.
Description
Poseidon
Detection Metric
Count/Aggr. [30]
Entropy [51]
Distinct ﬂows [52]
Trafﬁc change [53]
Signatures
New metrics
Table 2: Poseidon vs. Jaqen in supported detection metrics.
Count/Aggr. over a ﬂow
Identify anomalies/attacks
Distinct TCP/UDP ﬂows
Heavily changed ﬂows
Volumes of special packets
Arbitrary G-sum in [54]
Jaqen
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
×
×
×
×
×
to offer an ISP-scale network-wide defense while minimiz-
ing the total resource usage. When attack posture changes,
we need to quickly react by recomputing a resource alloca-
tion that has minimal changes from the previous allocation.
However, this means that we need fast resource allocation
decisions, especially in large-scale networks, with minimal
disruptions to ongoing trafﬁc.
4 Efﬁcient and General Detection
Programmable switch resources are constrained compared
to x86 servers, which impose restrictions on supporting a
broad spectrum of algorithms as x86. Thus, for ISP-scale
detection running completely in switches, we want our detec-