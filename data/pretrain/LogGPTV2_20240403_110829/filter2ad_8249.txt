# 一例简单的frida反调试绕过
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
最近在分析一款app时遇见了frida反调试，花了时间简单学习了一下，有不少收获，记录下学习的过程。
## 抛出问题
frida是一个很强大的hook框架，用的人多了，自然而然就出现了很多检测方案，这次碰到的app就检测了frida，可以正常打开，但是当你用frida
-f启动或者attach进程，不久后就会闪退。
## 常见frida检测
1.检测frida-server文件名  
2.检测27042默认端口  
3.检测D-Bus  
4.检测/proc/pid/maps映射文件  
5.检测/proc/pid/tast/tid/stat或/proc/pid/tast/tid/status  
6.双进程保护
前两种可以通过修改frida-server文件名，改默认端口绕过。双进程可以通过-f spawn模式启动绕过。其他的需要去hook修改。
## 定位
先针对简单的几个可能检测的方式，我修改了文件名，改了端口，也尝试了spawn启动，均会在启动后不久闪退。  
这时考虑到其他几种检测。  
首先用frida去看看载入了哪些so，看看是哪里检测了，看了个寂寞。
        function fridaProcess(){
          Java.perform(function () {
            var enumMoudle = Process.enumerateModules();
            for (var i = 0; i = 0) {
              while (parseInt(read(realFd, buffer, 512)) !== 0) {
                  var oneLine = Memory.readCString(buffer);
                  if (oneLine.indexOf("tmp") === -1) {
                      file.write(oneLine);
                  }
              }
              var filename = Memory.allocUtf8String(fakePath);
              return open(filename, flag);
          }
          var fd = open(pathnameptr, flag);
          return fd;
      }, 'int', ['pointer', 'int']));
    }
    setImmediate(main)
然后就可以继续调试了。
## 总结
这只是一个简单的例子，但是确实在这个bypass的过程中学到了东西，只要花时间是去分析，总能找到对应的突破口。