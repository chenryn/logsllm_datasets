that monitors the call chain as well as all the app launches
and activity switching requests by the running apps. If a call
violates the capsule policies, SWIRLS prompts the user for a
response action, e.g., block.
The Android permission system restricts app accesses to
system services, such as clipboard, account manager, hardware
devices and sensors. However, a system service would mix
data from different contexts when it is used by several apps
with different contexts. To provide capsule data isolation inside
system services, SWIRLS leverages the Android multi-user
support (since Android 4.1.1 r6) to separate capsule data.
Geo/Time-Based Data Context Switch. To realize the
location-based contexts deﬁned within capsules, SWIRLS ex-
tends the Android Geofence API [3] for context-awareness.
3Such as system server and surface flinger.
^ǇƐƚĞŵ^ĞƌǀŝĐĞƐ
dĂŝŶƚͲǁĂƌĞƉƉ
^ǁŝƌůƐW/
ĐĐŽƵŶƚDĂŶĂŐĞƌ
ĐƚŝǀŝƚǇDĂŶĂŐĞƌ
ůŝƉďŽĂƌĚ
&KHFN2EMHFW7DLQW
,V$OORZHG
«
dĂŝŶƚĞĚǀĂƌ,ŽŽŬƐ
^ŽĐŬĞƚ,ŽŽŬƐ
ĂůǀŝŬ sD
^ǁŝƌůƐƉƉ
ĂƉƐƵůĞĂƚĂďĂƐĞ
Ͳ dĂŝŶƚĞĚKďũĞĐƚƐ
Ͳ WŽůŝĐŝĞƐ
ĂƉƐƵůĞKƉĞƌĂƚŝŽŶƐ
Ͳ /ŶƐƚĂůůĂƚŝŽŶ
Ͳ ĞůĞƚŝŽŶ
Ͳ dĞŵƉŽͲ'ĞŽ&ĞŶĐĞ
ĞƚĞĐƚŝŽŶ
ĂƉƐƵůĞ/Ɛ
&ŝůĞƐŽƉĞŶ
ƉƉ/Ɛ
ŽŶƚĞǆƚƐ/Ɛ
WŽůŝĐǇĂĐŚĞ
ŝŶĚĞƌ,ŽŽŬ
WƌŽĐĞƐƐĞƐ,ŽŽŬƐ
^ǁŝƌůƐƉƉ/ŶƚĞƌĨĂĐĞ
&ŝůĞ^ǇƐƚĞŵ,ŽŽŬƐ
>^D
Fig. 4. SWIRLS’s System Components
Ğ
Đ
Ă
Ɖ
^

ƌ
Ğ
Ɛ
h
Ğ
Đ
Ă
Ɖ
^

ů
Ğ
Ŷ
ƌ
Ğ
 25K
LOC C/C++/Java). Table I summarizes the system compo-
nents enhanced by SWIRLS modules. Figure 4 illustrates the
components that store SWIRLS meta data and policies (gray
boxes) as well as the components that we modiﬁed to im-
plement SWIRLS functionalities (white boxes). Our empirical
evaluations were on a Nexus 7 tablet device to answer the
following questions: i) how much performance overhead does
SWIRLS cause compared to the vanilla Android system? ii)
does SWIRLS detect unauthorized capsule boundary mixing
and enforce the dynamically-installed policies accurately? iii)
are SWIRLS’s capsule deﬁnition/distribution/installation, and
system-wide policy enforcement usable in practice? and iv)
does SWIRLS realize the BYOD use-case scenarios success-
fully?
A. SWIRLS Performance
We measured SWIRLS performance overhead on Antutu
benchmark [6] that gives performance scores for various
criteria such as database IO, graphics, etc. Figure 5 shows
SWIRLS’s performance compared to Android vanilla (the
base) and TaintDroid 4.1.1 r6 for the userdebug build.
532
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:42:45 UTC from IEEE Xplore.  Restrictions apply. 
















+**
0*
/*
.*
,*
*
#
" 
" 

'
'
 
 

,
-
&
&


$

Fig. 5. Antutu Benchmark v5.7.1 Performance Results



































Fig. 6. Runtime Battery Consumption
TABLE II
MEMORY USAGE OF THE 15 VANILLA APPS RUNNING BY DEFAULT
Case
Memory usage (KB)
Android
502,612
TaintDroid
545,664
SWIRLS
548,168
SWIRLS’s overall performance is 96% of the base Android’s
performance, where TaintDroid’s is 97%. The runtime perfor-
mance score corresponds to the Dalvik VM, where most of
the ﬁne-grained (relatively high overhead) capsule boundary
tracking and policy enforcement occurs. SWIRLS’s relatively
low database performance (41%) is due to its ﬁne-grained
instrumentation of the content provider framework. SWIRLS
stores and retrieves the context for each data row entry of the
SQLite database. SWIRLS checks on every database INSERT
or SELECT if the target table/row is currently tainted and, if so,
whether the access request violates the installed capsule poli-
cies. Table II shows SWIRLS’s runtime memory usage averaged
over 15 apps that run by default at Android startup. Compared
to the base Android, SWIRLS causes 9.5% memory overhead
per app vs. 9% by TaintDroid. Finally, Figure 6 shows how
SWIRLS affects the device’s battery lifetime. SWIRLS drains
the battery 3.8% more than the base Android after one hour
of use, which is promising given SWIRLS’s practical usability.
B. Capsule Boundary Evolution
To validate the need for a capsule boundary tracking and
policy enforcement, we analyzed the top-10 most-used Google
Play market apps to determine whether they merge sensitive
data from different sources. Table III and Table IV show the
results of using SWIRLS’s capsule boundary tracking engine.
We considered established socket connections as separate
data sources. We observed 2, 819 (117 unique) data mixing
incidents (Table III) that were mostly caused by almost half
533
of the apps (4th column). Most of the mixings occurred at
the ﬁlesystem level (2, 178). We also noticed a few cases
where the app merged data from different individual sockets
destined to the same institute, and hence did not violate
SWIRLS’s data leakage policies. We manually investigated
the com.android.vending app, which mixes data from
a large number of sockets; however, all those sockets were
connected to different servers at Google and the transferred
data was mostly Google account parameters. Using certiﬁcate-
based treatment of sockets, SWIRLS was able to correctly mark
all of those connections as a part of single capsule that resulted
in a single-context app with no policy violations. Table IV
shows selected results for the top four popular applications.
The second column shows whether the data mixing occurred
due to a background app process (Facebook and Flashlight) or
the user’s action on the app’s GUI. Third and last columns
show, respectively,
the points dynamically marked as data
sources by SWIRLS and where data from different sources
mix. The large number of mixing incidents by the current
apps necessitates deployment of policy-based data isolation
solutions like SWIRLS in practice.
Figure 7 illustrates the dynamic growth of two BYOD
capsules that represent two different email accounts (personal
and professional). The vertical axis lists different application
objects, and the horizontal axis shows the sequence of various
user activities over time. For instance,
the database entry
(object c;
third line on vertical axis) is marked with the
personal context once the user sets up the ﬁrst account (A1 on
the horizontal axis). The details of the object c is explained
by message box on the ﬁgure. For each account, the capsule
data sources consist of a single object entry: the SSL/TLS
common name of the IMAP server. SWIRLS marks the data
received from the SSL/TLS with a speciﬁc capsule context
depending on the end-point SSL certiﬁcate. The enhanced
email app checks the context information during the email
sending procedure to stop the process if the sensitive data
transfer conﬂicts with the installed policies (as in Figure 9).
The email body, the recipients’ email addresses and possible
attachments’ contexts are inspected before allowing a mail to
leave the device. SWIRLS’s data ﬂow policies enable the app to
reuse the same ﬁle name in different contexts. For example, the
temporary ﬁle body1588647328.tmp appears to be created
while consulting the ﬁrst account, then deleted while switching
accounts and created again for the second account.
C. Capsule Policy Enforcement
Unmanaged app. We evaluated SWIRLS’s time requirement