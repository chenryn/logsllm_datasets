RSA problem, meaning we would like to ﬁnd a pair (v, e) ∈
Zn ×Z>1 such that ve ≡ z mod n. We look for such a pair
(v, e) by repeatedly playing a random one of the following
two games with M.
Game 1.
1. Select v1, . . . , vK ∈R Γ and primes e1, . . . , eK ∈R Λ.
2. Let α =
3. Choose r2 ∈R Γ, let d = ar2 mod n.
4. For 1 ≤ i ≤ K, let αi =
1≤i≤K ei, and a = z2T
α mod n.
1≤l≤K;l(cid:5)=i el mod n, and
(cid:1)
(cid:1)
ci = z(vi+r2)αi mod n.
public key.
5. Select g ∈R QRn and publish (n, a, d, g, h) as the group
6. When M sends si = g ˜xi ht1 and asks for the corre-
sponding group signing key, we ﬁrst extract ˜xi from
the zero-knowledge proof. We then compute wi such
that vi = (wi + ˜xi mod (2(cid:20)Γ+1 − 1)) − 2(cid:20)Γ + 1, and
send (ci, ei, wi) to M.
7. After K requests, M outputs a new group signing key
(ˆx, ˆe, ˆc) valid for time interval t, i.e. daˆx ≡ ˆc2T −t ˆe
α(ˆx+r2) mod n.
mod n.
Because squaring is a permutation in QRn, we have
(ˆc2)ˆe ≡ z2t+1
In particular, ˆc2T −t ˆe ≡ z2T
α(ˆx+r2) mod n.
8. If gcd(ˆe, ej) (cid:18)= 1 for some 1 ≤ j ≤ K, then output ⊥
and quit. Otherwise, Let ˜e := 2t+1(ˆx + r2). Because
gcd(ˆe, α) = 1, we have gcd(ˆe, α˜e) = gcd(ˆe, ˜e). By the
extended Euclidean algorithm, there exists σ, τ ∈ Z
s.t. σˆe + τ (˜eα) = gcd(ˆe, ˜e). Let v := zσ(ˆc2)τ mod n,
and e := ˆe/ gcd(ˆe, ˜e). We have ve ≡ z mod n. Because
ˆe ∈ Λ, and ˜e  1.
Therefore, (v, e) is a pair that solves the strong RSA
problem, i.e. ve ≡ z mod n and e > 1.
k /zβkvk )2T
Game 2.
1. Select v1, . . . , vK ∈R Γ and primes e1, . . . , eK ∈R Λ.
2. Choose k ∈R {1, . . . , K}. Let α =
1≤i≤K ei, βi =
1≤l≤K;l(cid:5)=i,k el mod n, for all 1 ≤ i ≤ K. In particular
(cid:1)
(cid:1)
(cid:1)
βk =
1≤l≤K;l(cid:5)=k el mod n. Set a = z2T
βk mod n.
key.
mod n.
mod n.
3. Choose r1 ∈R Γ, let ck = zβkr1 mod n, d = (cek
4. For all 1 ≤ j ≤ K, j (cid:18)= k, compute cj = z(vj +ekr1−vk)βj
5. Select g ∈R QRn and publish (n, a, d, g) as the public
6. When M sends si = g ˜xi ht1 and asks for the corre-
sponding group signing key, we ﬁrst extract ˜xi from
the zero-knowledge proof. We then compute wi such
that vi = (wi + ˜xi mod (2(cid:20)Γ+1 − 1)) − 2(cid:20)Γ + 1, and
send (ci, ei, wi) to M.
7. After K requests, M outputs a new group signing key
(ˆx, ˆe, ˆc) valid for time period t, i.e. daˆx ≡ ˆc2T −t ˆe mod n.
In particular, ˆc2T −t ˆe ≡ z2T
8. If gcd(ˆe, ek) (cid:18)= ek, then output ⊥ and quit. Oth-
erwise we have ˆe = ek because ˆe ∈ Λ. Therefore
k )2T −t
βk(ˆx−vk) mod n, and hence
(ˆc/c2t
βk(ˆx−vk) mod n. Let ˜e := 2t+1(ˆx−
(ˆc2/c2t+1
vk). Because gcd(ek, βk) = 1, we have gcd(ek, βk ˜e) =
gcd(ek, ˜e). By the extended Euclidean algorithm, there
exists σ, τ ∈ Z s.t. σek + τ (˜eβk) = gcd(ek, ˜e). Let
v := zσ(ˆc2/(c2t+1
))τ mod n, and e := ek/ gcd(ek, ˜e).
We have ve ≡ z mod n. Because ek ∈ Λ, and ˜e  1. Therefore, (v, e)
is a pair that solves the strong RSA problem, i.e. ve ≡ z
mod n and e > 1.
Consequently, we can use M to solve the strong RSA prob-
lem in expected running-time polynomial in K by playing
randomly Game 1 or Game 2 until the result is not ⊥. There-
fore no one but the group manager can generate group sign-
ing keys in our scheme under the strong RSA assumption.
βk(r1ek−vk+ˆx) mod n.
ek = z2T
)ek = z2t+1
k
k
Lemma 6. Under the strong RSA assumption, Scheme II
satisﬁes strong forward security given that the number of
group signing keys the group manager issues is polynomially
bounded.
Proof sketch. Let M be an attacker who can break
the strong forward security of Scheme II with non-negligible
probability. We show that we can use M to break the strong
RSA assumption.
Given a pair (n, z), where n is the product of two safe
primes and z ∈ QRn, we would like to solve the strong
RSA problem, meaning we would like to ﬁnd a pair (v, e) ∈
Zn ×Z>1 such that ve ≡ z mod n. We look for such a pair
(v, e) by repeatedly playing a random one of the following
two games with M.
Game 1. We ﬁrst randomly select primes
Φ = {e1,t1 , . . . , eK,tK} where ei,ti ∈ Λti .
Let α =
(cid:1)
1≤i≤K,ti≤wi≤T ei,wi where ei,wi represents the
9
233element for time period wi in the one-way chain generated
from ei,ti . Let a = zα mod n. Choose r ∈R Γ, and let
d = ar. For the i-th request, M asks for a group signing key
for some time period si at his will. We answer the request
∈ Φ such that tai = si and
by randomly selecting a eai,tai
eai,tai has not been used to answer M’s previous requests.
If no such eai,tai exists, then abort. Otherwise, we randomly
select xi ∈ Γ, and computes ci = z
mod n
and reply M with (xi, ci, eai,tai ).
Assume after L requests, M outputs a valid group signing
key (˜x, ˜c, ˜e) not in the span of the group signing keys from
his requests. If gcd(˜e, eai,wai ) (cid:18)= 1 for some 1 ≤ i ≤ L, tai ≤
wai ≤ T then abort. Otherwise, similar to the argument
shown in the previous proof, using the extended Euclidean
algorithm, one can break the strong RSA assumption, i.e.
ﬁnd a pair (v, e) such that ve ≡ z mod n and e > 1.
(xi+r)α/(eai ,tai
)
(cid:1)
Game 2.. We ﬁrst randomly select primes
Φ = {e1,t1 , . . . , eK,tK} where ei,ti ∈ Λti .
1≤i≤K,ti≤wi≤T ei,wi where ei,wi represents the
Let α =
element for time period wi
in the one-way chain gener-
ated from ei,ti . We randomly select k ∈R {1, . . . , K}. Let
βi = α/ei,ti . Let a = zβk mod n. Choose r, xk ∈R Γ,
−xk . For the i-th re-
and let ck = ar mod n, d = arek,tk
quest, M asks for a group signing key for time period si.
∈ Φ
We answer the request by randomly selecting a eai,tai
such that tai = si and eai,tai has not been used to an-
swer M’s previous requests. If no such eai,tai exists, then
abort. Otherwise, we randomly select xi ∈ Γ, and com-
−xk)βk/eai ,tai mod n and reply M
putes ci = z
with (xi, ci, eai,tai ).
Assume M outputs a valid group signing key (˜x, ˜c, ˜e) not
in the span of the group signing keys from his requests. If
gcd(˜e, ek,tk ) (cid:18)= ek,tk then abort. Otherwise, similar to the
(xi+rek,tk
argument shown in previous proof, using the extended Eu-
clidean algorithm, one can break the strong RSA assump-
tion, i.e. ﬁnd a pair (v, e) such that ve ≡ z mod n and
e > 1.
Note that when the number of group signing keys issued
by the group manager is polynomially bounded, Game 1 or
Game 2 will succeed with non-negligible probability given
M.
B. OUR ZERO-KNOWLEDGE PROOF
PROTOCOL
We now explain the details of the zero-knowledge proof
protocol PK2{(α, β) : A = αyβ ∧ B = gβ ∧ C = gα
2 } we
used in section 4.4. This protocol is to show that given
values A, B ∈ QRn and C ∈ G, where g2 is a generator
of G which is a group of order n and in which the DDH
problem is hard, the prover knows (cu, r1, r2) such that A =
cuyr1 , B = gr1 , C = gcu
2 . The protocol repeats the following
protocol for suﬃcient times:
1. P select t1, t2, t3 ∈R Zn, t4 ∈R {0, 1}((cid:20)n+k)+1, and
3 , a4 = gt4 , a5 = yt4
2 , a3 = tt2
compute E = At2 , a1 = gt1
and send V (E, a1, a3, a4, a5)
2. V selects c2 ∈ {0, 1}k.
3. P computes b1 = t1 + c2cut3 mod n, b2 = t4 + c2r1.
4. V sends P c1 ∈ {0, 1}.
5. If c1 = 0, P sends V f0 = cut3 mod n; If c1 = 1, P
6.
sends V f1 = t3 mod n.
• If c1 = 1, then V veriﬁes g2
b1 = a1C c2f1 , gb2 =
a4Bc2 . And P and V engage in a zero knowledge
proof, PK{(α) : a3 = f α
1 ∧ E = Aα}.
• If c1 = 0, then V veriﬁes g2
, gb2 =
a4Bc2 . And P and V engage in a zero knowledge
−1)α ∧
proof, PK{(α) : (Ea3)c2 = (f c2
E = Aα}.
0 (y)b2 (a5)
b1 = a1gc2f0
2
Lemma 7. PK2{(α, β) : A = αyβ ∧ B = gβ ∧ C = gα
2 } is
a zero-knowledge proof protocol.
2 = a1C c2f1 = a1gc2f0
Proof sketch. We ﬁrst show the knowledge extractor.
Assume we can rewind the prover so that we give it two
diﬀerent values c1 = 0 and c1 = 1 after the third step.
Thus gb1
2 , then f0 =
f1x1 mod n. From rewinding the second step, we get (x2)
such that B = gx2 . From rewinding the proof of knowledge
protocol in the veriﬁcation step, we can get x4 such that
a3 = f x4
1 , E = Ax4 , and (Af1)c2x4 = (f1x1yx2 )c2x4 . So A =
x1yx2 .
. Assume C = gx1
2
We now show the simulation argument. The following
algorithm constitutes a simulator S for the output of any
veriﬁer V .
1. S chooses c1 ∈R {0, 1}.
2. If c1 = 1, S randomly chooses b1, f1, t2, b2, a5 in their
appropriate ranges. S then also randomly chooses c2 ∈R
{0, 1}k, and computes a1 = gb1
1 , E =
At2 , a4 = gb2 B
If c1 = 0, S randomly chooses b1, b2, t2, t3, f0 from their
appropriate ranges. S then also randomly chooses c2 ∈R
{0, 1}k, and computes a1 = gb1
−c2
a3 = tt2
3
a5 = yb2 f c2
2 (gc2f0
, a4 = gb2 B
3 , a4 = f c2
0 (At3)
−1, E = At2 ,
)
−1, a3 = f t2
0 hb2 A
−c2 .
2 (C c2f1 )
−c2 t
−c2 .
−c2 ,
2
3. S runs V , sends it the generated values (E, a1, a3, a4, a5)
(cid:4)
and receives a c
2.
(cid:4)
2 = c2, then S sends the generated values (b1, b2) to
4. If c
(cid:4)
1. Otherwise S continues with Step
V and receives a c
1.
(cid:4)
(cid:4)
(cid:4)
1 = 1,
1 = 0 or f1 if c
1 = c1, then S sends f0 if c
5. If c
and completes the veriﬁcation step with V . Otherwise
S continues with Step 1.
By construction, the output of the simulator is statistically
distributed to the output of the veriﬁer. Hence if we choose
k = Θ(poly((cid:14))) then the protocol is zero-knowledge.
10
234