shared Random Oracle 𝐻(·) whose range is {0, 1}𝜅. We use 𝑞 to de-
note the number of random oracle queries available to each party
per round. The honest parties search the space by performing 𝑞
queries for ctr ← 1 to 𝑞. The adversary controlling 𝑡 parties gets
𝑞𝑡 total queries per round.
It has been proven [21, 22] that executions follow the properties
of Chain Growth, Common Prefix, and Chain Quality.
We define a 𝑄-block as a block satisfying a predicate 𝑄 on its
hash. Note that this evaluation does not depend on any particular
execution.
Definition 6.1 (𝑄-block). A block property is a predicate 𝑄 de-
fined on a hash output ℎ ∈ {0, 1}𝜅. Given a block property 𝑄, a
valid block with hash ℎ is called a 𝑄-block if 𝑄(ℎ) is true.
The block properties we are interested in will be evaluated in ac-
tual executions as 𝑄(𝐻(⟨𝑐𝑡𝑟, 𝑠, 𝑥⟩)) for particular blocks. As such,
we will be interested in properties which are polynomially com-
putable given ℎ as the input.
Definitions of random variables. We will call a query of a party
successful if it submits a triple (𝑐𝑡𝑟, 𝑠, 𝑥) such that 𝐻(𝑐𝑡𝑟, 𝑠, 𝑥) ≤ 𝑇 .
Consider a block property 𝑄. Let 𝜉𝑄 = Pr[𝑄(ℎ)|ℎ ≤ 𝑇], when ℎ is
uniformly distributed over the range of the hash function. For each
round 𝑖, query 𝑗 ∈ [𝑞], and 𝑘 ∈ [𝑡] (the 𝑘th party controlled by the
adversary), we define Boolean random variables 𝑋𝑄(𝑖), 𝑌𝑄(𝑖) and
Session 12D: Decentralized Cryptographic ProtocolsCCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea3495𝑘=1
∑
𝑍𝑄(𝑖, 𝑗, 𝑘) as follows. If at round 𝑖 an honest party obtains a 𝑄-
block, then 𝑋𝑄(𝑖) = 1, otherwise 𝑋𝑄(𝑖) = 0. If at round 𝑖 exactly
one honest party obtains a 𝑄-block, then 𝑌𝑄(𝑖) = 1, otherwise
∑𝑞
𝑌𝑄(𝑖) = 0. Regarding the adversary, if at round 𝑖, the 𝑗th query of
the 𝑘th corrupted party obtains a 𝑄-block, then 𝑍𝑄(𝑖, 𝑗, 𝑘) = 1, oth-
erwise 𝑍𝑄(𝑖, 𝑗, 𝑘) = 0. Define also 𝑍𝑄(𝑖) =
𝑗=1 𝑍𝑄(𝑖, 𝑗, 𝑘).
For a set of rounds 𝑆, let 𝑋𝑄(𝑆) =
𝑟 ∈𝑆 𝑋𝑄(𝑟) and similarly define
𝑌𝑄(𝑆) and 𝑍𝑄(𝑆). We drop the subscript from all variables 𝑋, 𝑌, 𝑍,
when the 𝑄-block is simply the property of being a valid block.
Further, if 𝑋(𝑖) = 1, we call 𝑖 a successful round and if 𝑌 (𝑖) = 1, a
uniquely successful round.
∑𝑡
As in the backbone model[21], the probability 𝑓 that at least one
honest party computes a solution at given round is an important
parameter. Writing 𝑝 = 𝑇/2𝜅 for the probability of success of a
single query, we have
(1 − 𝑓 )𝑝𝑞(𝑛 − 𝑡) ≤ 𝑓 = E[𝑋(𝑖)] = 1 − (1 − 𝑝)𝑞(𝑛−𝑡) ≤ 𝑝𝑞(𝑛 − 𝑡).
The following bounds relate the expectations of the random vari-
ables defined above to 𝑓 , for all 𝑖 and block properties 𝑄.
𝜉𝑄 𝑓 ≤ E[𝑋𝑄(𝑖)] ≤ 𝜉𝑄 𝑓
1 − 𝑓
,
𝜉𝑄 𝑓 (1 − 𝑓 )  3𝜖 +3𝑓 , an execution
is typical with probability 1 − 𝑒−Ω(𝜖2 𝑓 𝜆).
Proof. The proof uses standard Chernoff bounds, along the
lines of [20]. We just note that the variables 𝑋𝑄(𝑖) (and similarly
𝑌𝑄(𝑖) and 𝑍𝑄(𝑖, 𝑗, 𝑘)) are independent Bernoulli trials for each 𝑄
and successful with probability Θ(𝜉𝑄 𝑓 ). In addition, a union bound
is applied over all 𝑄.
□
Lemma 6.4. Assume 𝑡  3𝜖+3𝑓 (the honest
majority assumption) and a Q-typical execution. Then, the following
hold for any 𝑄 ∈ Q and any set 𝑆 of at least 𝜆/𝜉𝑄 consecutive rounds.
3)𝜉𝑄 𝑓 |𝑆|  𝑟∗) and would not mine on a
shorter chain. The second inequality holds because 𝑣 > 𝑢′ contra-
dicts an honest party having a chain of length 𝑢′ at round 𝑟′ > 𝑖
(since C∗[𝑣] was received by round 𝑟′). The inequality then follows
by Lemma 6.5, since it is always possible to find a block distinct
from C∗[𝑣] on C or C′ (we may use C′, unless C∗[𝑣] is on C′, in
Session 12D: Decentralized Cryptographic ProtocolsCCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea3496which case—due to the minimality of 𝑟′—we have 𝑣  𝑍(𝑆′). Note that, in a typical execution, no such 𝑆′ may
contain elements outside 𝑈 ′. Letting 𝑦 = 𝑌 (𝑈) and 𝑧 = 𝑍(𝑈), we
need to show 𝑦 − |𝑆| ≤ 2𝑧 + 2(1 − 2𝛿
Let us focus on the uniquely successful rounds not in 𝑆. Consider
a collection T of sets of consecutive rounds with the following
properties.
• For all 𝑇 ∈ T , 𝑌 (𝑇) ≤ 𝑍(𝑇).
• For each 𝑟 ∈ 𝑈 \ 𝑆, there is a 𝑇 ∈ T that contains 𝑟.
• |T | is minimum among all collections with the above prop-
We now observe that the minimality condition on T implies that
no round 𝑟 with 𝑍𝑟 > 0 belongs to more than two sets of T . If that
was the case, then there would be three sets 𝑇1,𝑇2,𝑇3 in T with
𝑇1 ∩ 𝑇2 ∩ 𝑇3 ≠ ∅. But then, we could keep the two sets with the
leftmost and rightmost endpoints, contradicting the minimality of
T . Furthermore, no round in 𝑈 ′ \ 𝑈 belongs to more than one set
erties.
of T . Thus,
𝑦 − |𝑆| =
∑
𝑖∈𝑈\𝑆
∑
𝑇 ∈T
𝑌𝑖 ≤
𝑌 (𝑇) ≤
∑
𝑇 ∈T
𝑍(𝑇) ≤ 2𝑧 + 𝑍(𝑈 ′ \ 𝑈).
The third inequality holds because every round in which the adver-
sary was successful is counted at most twice inside 𝑈 and at most
once outside 𝑈 (by the discussion above the inequalities). Finally,
using |𝑈 ′ \ 𝑈 | ≤ 2𝜆 and Lemma 6.4(c) we obtain the stated bound.
□
The proof of this lemma is quite generous to the adversary on
two accounts. First, it reveals to the adversary all coin flips in the
beginning of the execution. Second, it gives the adversary two
choices for each one of his blocks, and assumes that he will be able
to choose among these as he sees fit. Nevertheless, we conjecture
that the bound 𝑦 − 2𝑧 cannot be substantially increased in the case
the property is rare.
We can now prove that an adversary with less than 1/3 of the
total mining power cannot create a chain with more 𝑄-blocks than
an honest chain. Such a task would require the adversary to both
suppress many 𝑄-blocks from the honest chain and to obtain many
of them for the adversarial chain.
3 − 𝛿)𝑛
with 𝛿 > 3𝜖 + 3𝑓 and a Q-typical execution. Consider a round at
which a chain C is adopted by an honest party and suppose there
exist another chain C′ such that C′ \ (C′ ∩ C) has at least 22𝜆𝜉𝑄 𝑓
𝑄-blocks. Then, with overwhelming probability, C has more 𝑄-blocks
than C′.
Lemma 6.8 (𝑄-block Common-Prefix). Assume 𝑡 < ( 1
= C ∩ C′ was computed (if no such block exists let 𝑟∗
Proof. Assume an execution in which the assumptions of the
lemma hold. Let 𝑟∗ be the round on which the last honest block
on C∗
= 0)
and define the set of rounds 𝑆 = {𝑖 : 𝑟∗ < 𝑖 ≤ 𝑟}. We will study
the execution during the rounds in 𝑆. To that end, let 𝑊 ′ denote
the set of adversarial queries on C′ \ C∗ at some round at least 𝜆
greater from 𝑟∗. Denote by 𝑊 the rest of the adversarial queries in