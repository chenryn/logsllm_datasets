A  modified  algorithm  with  executable  assertions  and 
best effort recovery mechanisms is shown in Algorithm 11. 
â€™ An executable assertion is a software implemented check verifying that 
a variable fulfills  limitations given by a specification. 
Table 3 shows the results obtained  for the modified  PI 
controller  Algorithm  11.  Most  of  the  undetected  wrong 
results  had  no  or minor  impact on  the  controlled  object, 
similar to what is observed for Algorithm  1 (5.06% of  all 
faults injected lead to minor undetected wrong results). 
354 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:07:27 UTC from IEEE Xplore.  Restrictions apply. 
Pari of CPU fault Injected 
(no. 01  state elements) 
Type of Enonand Wrong Resulb 
talent  Ermrs 
Chewitten Errors 
Total (Non Eflective Errors) 
Adjress Emr 
Data Enor 
lmtmction Enor 
&mp  Enor 
Constraint Check 
Access Check 
Storage Enor 
w o w  
Illegal Operation 
Ccntml Flow Errors 
Other Errors 
Undetected Wmng Results (Seere: 
Undetected Wmng Results (Minor) 
Total (Wectlve Errors] 
Cache 
(1824) 
(95 %con0  # 
% 
Registers 
Total 
(2250) 
(95 %conf)  # 
% 
(426) 
(95%con0  # 
% 
21.04% (i 1,85% )  391  59.14% ( i 4.25%  )  304  29.30%  ( i 1.83% )  695 
71,42%( *  2.05% ) 1327  78,02%( * 3,58966  ) 401 
50.38% ( f 2.27%  )  936  18,87% ( i 3.39% )  97  43.55% ( i 2.00%  )  1033 
72,B5%( +  1,79% ) f72B 
0.00%  ( * o.ooo/. 
5.45% (i 1.96%  )  28  13.83% (f 1.39% )  328 
16,15% ( +  1.67% 
osa% ( i 0 . 6 6 ~ ~  
3 
)  3 
2.14% ( i 1.25%  )  11 
61 
2.69% ( f 0.74% 
0.00% ( * 0.00% )  0  0.00% ( f 0.00% ) 
0.00%  ( f  0.00% ) 
1 
0.05% (i 0.11% 
0 
0.00% ( i 0,00% 
1.45%  ( i 0.54% 
28 
60 
0.43% ( f 0.30% 
0,00% (f 0,00% 
0 
16 
0.54% ( i ,0.33% 
0.70% ( +  0,38% 
18 
0.05% (i 0.11% 
0,22% (i 0.21% 
6,3ff/o (i l,lO% 
28,5896 ( f 2.05% 
300 
o 
50 
1 
0 
0.19% ( i 0.38% ) 
1.18% ( k 0.43% ) 
27 
1 
10.12% (i 2.61%  )  52 
2.53% ( *  0,63%  ) 
8 
0,oosb ( *  0,00% ) 
0.00% ( i 0.00% ) 
0 
0 
0.67% I  i 0.33% ) 
1.17% I  f  0.93% ) 
10 
6 
0.76% ( i  0.35% ) 
13  0.97% ( f 0.85% ) 
5 
0.78% ( i 0.76% ) 
0.21% ( i 0,18% ) 
0.00% ( i  0.00% ) 
0,17% ( *  0.17%  ) 
117  0.58%  ( i 0.66%  ) 
5.06% ( i 0.88% )  120 
531  21,98%(f  3.58% )  113  27,15%(f  1,79% )  644 
o.iw0 ( i 0 . 1 4 ~ ~  
) 
2.57% ( f 0.64% ) 
0  O,M% ( f   0.08%  ) 
514  100,WA 
2372 
5,23%( i 0.90%  )  124 
94,7?%( i 0,90% ) 
results 
severe  undetected  wrong 
shows 
that  no  permanent  value 
failures were observed for Algorithm 
11.  However,  since  0.17%  of  all 
errors still  lead  to severe  undetected 
results  which  were  semi- 
wrong 
permanent, 
research 
focusing  on  more 
sophisticated 
assertions  capable  of  detecting  the 
remaining  errors  is  required.  One 
explanation for the undetected  wrong 
results  produced  by  Algorithm  I1 is 
in  Figure  10.  The  figure 
shown 
shows the controller output when  the 
additional 
correct  value  of  approximately  10 
degrees  to  an  incorrect  value  of  69 
Total (Faults Injected) 
1 0 0 , W / O  
1858 
lM),WO 
Total (Undetected Wrong Result! 
Coverage 
6,51%(f 1,lZsh)  121 
93,49%( i 1,12% ) 
O,Se%(  f  0.66%)  3 
99.42%( f 0,66% ) 
The results also show that 0.17% of  the faults injected 
had  severe impact on the controlled object (caused severe 
undetected wrong results),  which corresponds to 3.23% of 
all  value failures produced  using  the Algorithm 11. Thus, 
the  percentage  of  severe  undetected  wrong  results  are 
significantly  reduced  for  Algorithm  I1  compared  to 
Algorithm  I,  where  10.7% of  the  value  failures  were 
classified as severe. 
Figure I O .   Fault-free output vs. undetected 
wrong result not detected by the assertions. 
degrees at time r  = 6. 
The  assertions  will  not  detect  such  errors  since  x  is 
within  the  valid  range  (i.e.  between  0.0 and  70.0 in  our 
case).  After approximately  1 second, the output stabilizes, 
but  the  output  sequence  will  be  classified  as  a  severe 
undetected wrong result that is semi-permanent. 
4.5. Comparison of results for Algorithm I and I1 
Table 4 shows a detailed comparison of the undetected 
wrong  results  (value  failures)  obtained  for  Algorithm  I 
and  11.  The  table  shows  that  the  percentage  of  severe 
value 
failures  (permanent  and  semi-permanent)  are 
reduced  for  Algorithm  I1  while  the  percentage  of  minor 
value  failures (transient  and insignificant) increased.  The 
reason for this is that the best effort recovery  mechanisms 
of  Algorithm  I1 managed to detect many potential  severe 
value  failures  resulting  in  minor  value  failures  being 
produced instead. Thus, the total percentage of undetected 
wrong  results  is  almost  equal  for  Algorithm  I  and  I1 
(5.02% vs. 5.23%). 
The percentage  of  permanent  value  failures is  0.12% 
for Algorithm  I  while  no  permanent  value  failures  at  all 
are  observed  for  Algorithm  11.  The  percentage  of  semi- 
permanent  value  failures  decreased  from  0.42%  for 
Algorithm I to 0.17% for Algorithm 11. This corresponds 
to  a  total  reduction  of  the  percentage  of  severe  value 
failures,  from  0.54%  for  Algorithm  I  to  0.17%  for 
Algorithm  11.  Although, the  results for  Algorithm  I1 are 
based on only 2372 injected  faults  vs. 9290 injected faults 
for  Algorithm  I, 
the  corresponding  95%  confidence 
intervals indicate that the total percentage of severe value 
failures is lower for Algorithm  11. 
355 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:07:27 UTC from IEEE Xplore.  Restrictions apply. 
Results for Algorithm I 
% 
# 
73,87%( t; 0,89%  )  6863  72,85%( f 1,79%  )  1728 
Results for Algorithm /I 
% 
( 9 5 % c o n f )  
(95%conf) 
# 
I 
1  lOO,OO% 
I 
26.12%(*  0,89%  )  2427 
27,15%(*  1.79% 
) 
92901  100.00% 
23721 
Total (Non Effective Errors) 
Total (Detected Errors) 
Undetected Wrong Results (Permanent) 
Undetected Wrong Results (Semi-Permanent) 
Undetected Wrong Results (Transient) 
Undetected Wrong Results (Insignibcant) 
Total (Undetected Wrong Results) 
ITotal (Efiective Errors) 
botal (Faults Injected) 
5. Conclusions 
We  have  demonstrated  that  bit-flips  inside  a  central 
processing  unit  executing  an engine control  program  can 
cause  critical  failures,  such  as  permanently  locking  the 
engine's throttle at full speed. These failures were caused 
by  errors  that  escaped  several  hardware  implemented 
error  detection  mechanisms  included  in  the  CPU.  Our 
fault  injection  experiments  showed  that 
1 1 %   of  the 
undetected  errors  leading  to  value  failures  seriously 
affected  the  control  of  the  engine.  These critical  failures 
were  caused  by  errors  affecting  the  state  variable  of  the 
control algorithm. By using software assertions and a best 
effort  recovery  mechanism,  we  managed  to  reduce  the 
percentage  of  the  critical  failures  to  3%.  The  control 
algorithm  used  in  our  experiments  was  a  simple  PI 
controller.  Thus,  we  have  demonstrated  that  software 
assertions in combination  with best effort recovery can be 
very  effective  in  reducing  the  number  of  critical  failures 
for  simple control  algorithms.  In  our  future  research  we 
will  investigate  the  use  of  software  assertions  and  best 
effort recovery  techniques for multiple input and multiple 
output control algorithms such as jet-engine controllers. 
Acknowledgements 
We would  like to thank Martin  Fabian  of  the Dept. of 
Control Engineering, Chalmers University  of Technology 
and Stefan Asserhall and Thorbjorn Hult at Saab Ericsson 
Space for their  many  valuable  suggestions  and  technical 
assistance.  This  work  was  supported  by  the  Swedish 
Agency 
the  Swedish 
Network for Real-Time Research and Graduate Education 
for  Strategic 
(ARTES),  The  Swedish  Foundation 
Research 
Space. 
(VINNOVA), 
Innovation 
Ericsson 
(SSF) 
Saab 
and 
for 
References 
[ I ]   Y.C.  Yeh,  "Dependability of  the  777 
Primary  Flight  Control  System",  in  5th 
IFIP  Working Conference on Dependable 
Computing 
for  Critical  Applications 
(DCCA-5), pp. 3-17, (Urbana Champaign, 
IL, USA) Sep. 1995. 
[2]  J.  von  Neumann,  "Probabilistic 
Logics  and  the  Synthesis  of  Reliable 
Organisms 
Unreliable 
Components", Automata  Studies.  Annals 
of  Mathetnatical  Studies,  Princeton 
from 
University Press, No. 34, pp. 43-98, 1956. 
[3]  L.  Lamport,  P.  M.  Melliar-Smith,  "Byzantine  Clock 
Synchronization",  in  Proc.  Third  ACM  Sytnp.  Principles  of 
Distributed  Computing, August 1984, pp. 68-84. 
[4]  R.  M.  Kieckhafer,  C.  J.  Walter,  A.  M.  Finn,  P.  M. 
Thambidurai,  "The  MAFr  Architecture  for  Distributed  Fault 
Tolerance",  IEEE  Transactions  on  Computers, vol.  37,  no.  4, 
pp. 398-404, 1988. 
[5]  F.  Cristian,  "Understanding  Fault-Tolerant  Distributed 
Systems",  Comtnunications of ACM, Vol.  34, No.  2,  1991, pp. 
56-78. 
[6] J. Karlsson, P. Folkesson, J.  Arlat, Y. Crouzet, G .  Leber, J. 
Reisinger,  "Application  of  Three  Physical  Fault  Injection 
Techniques  to  the  Experimental  Assessment  of  the  MARS 
Architecture", in 5th IFIP  Working Conference on Dependable 
Cotnputing for  Critical  Applications  (DCCA-5). pp.  267-287, 
(Urbana Champaign, IL, USA) Sep. 1995. 
[7] G .  C. Messenger, "Collection of  Charge on  Junction Nodes 
From  Ion  Tracks".  IEEE Trans. on  Nuclear  Science, Vol. NS- 
29, No. 6, Dec. 1982, pp. 2024-2031. 
[8]  K.  Johansson,  P.  Dyreklev,  B. Granbom, M.  C .  Calvet,  S .  
Fourtine, 0. Feuillatre, "In-Flight and Ground Testing of  Single 
Event Upset  Sensitivity in Static RAMS", IEEE Transaction on 
Nuclear Science, vo1.45 no.3 June 1998 pp. 1628-1632. 
[9] E. Normand,  "Single Event  Upset  at  Ground Level",  IEEE 
Transaction on Nuclear Science, vol. 43, no.6, December 1996, 
pp. 2142-2750. 
[lo]  The  Mathworks,  Inc.  "Using  Simulink  Version  3, 
Dynamic System Simulation for MATLAB" January 1999. 
[I 11 Saab Ericsson Space AB, "Microprocessor Thor", Product 
Information, September 1993. 
[12] P. Folkesson, S. Svensson, J.  Karlsson, "A  Comparison of 
Simulation  Based  and  Scan  Chain 
Implemented  Fault 
Injection", 
in  Proc.  28th  Int.  Sytnp.  on  Fault-Tolerant 
Computing  (FTCS-28), pp.  284-293,  (Munich, Germany) June 
1998. 
[ 131 J. Aidemark, J. Vinter, P. Folkesson, J. Karlsson, "GOOFI: 
Generic  Object-Oriented  Fault  injection  tool",  Proceedings 
International  Conference  on  Dependable  System  and 
Neworks, DSN 2001, Gothenburg, Sweden, July 2001. 
356 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:07:27 UTC from IEEE Xplore.  Restrictions apply.