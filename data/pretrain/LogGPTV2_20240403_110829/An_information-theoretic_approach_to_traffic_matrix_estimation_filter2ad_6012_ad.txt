r
70
60
50
40
30
20
10
)
%
(
r
o
r
r
e
e
v
i
t
l
a
e
r
error= 0%
error= 1%
error= 5%
error=10%
0
10−6
10−5
10−4
10−3
10−2
lambda
10−1
100
101
102
(b) MMI (specific case)
0
10−6
10−5
10−4
10−3
10−2
lambda
10−1
100
101
102
(d) MMI (average over all data)
error= 0%
error= 1%
error= 5%
error=10%
70
60
50
40
30
20
10
)
%
(
r
o
r
r
e
e
v
i
t
l
a
e
r
70
60
50
40
30
20
10
)
%
(
r
o
r
r
e
e
v
i
t
l
a
e
r
error= 0%
error= 1%
error= 5%
error=10%
0
10−6
10−5
10−4
10−3
10−2
lambda
10−1
100
101
102
0
10−6
10−5
10−4
10−3
10−2
lambda
10−1
100
101
102
Figure 2: The relative errors for the quadratic and MMI algorithms for a given value of λ.
our experiments, we ﬁnd that the algorithm’s performance is not
sensitive to the choice of λ. Figure 2 shows the relative error in the
estimates for varying λ. Figure 2 (a) and (b) show the results for the
quadratic and MMI algorithms respectively, for a single-hour data
set given different levels of error in the input measurements (see
below for details of the introduced measurement errors). Figure 2 (c)
and (d) show the average results over a month of data.
Most notably, in each graph there is a distinct region where the
curves are all quite ﬂat, and that this region is largely the same re-
gardless of the error level. Thus the choice of λ is insensitive to the
level of noise in the measurements, and it is easy to choose a good
value. We choose a value from the middle of the insensitive range,
λ = 0.01 throughout the rest of the paper, as this performed well,
not just in the average (which one can see from Figure 2 (c) and (d)),
but also in the worst case. The impact of choosing a single value of
λ, rather than the optimal value for each case is shown in Table 1.
The table shows for varying levels of error (or noise) in the input
measurements the reduction in accuracy due to the use of a ﬁxed λ
rather than the optimal value. The table presents two measures: the
maximum and average accuracy reduction over all of the data sets.
Note that in the worst case the MMI algorithm is only a few per-
cent worse for not using the optimal value of λ and typically is very
close to optimal. The quadratic algorithm is marginally more sensi-
tive to the correct choice of λ.
algorithm noise
MMI
MMI
MMI
MMI
quadratic
quadratic
quadratic
quadratic
0% 0.01
1% 0.01
5% 0.01
10% 0.01
0% 0.01
1% 0.01
5% 0.01
10% 0.01
accuracy reduction
λ maximum average
0.3%
0.3%
0.3%
1.5%
0.4%
0.4%
0.3%
1.7%
1.6%
1.6%
1.4%
2.9%
1.9%
1.7%
1.9%
3.7%
Table 1: Impact of choosing a ﬁxed value of λ rather than the
optimal value. The table shows for the two algorithms, and vari-
ous levels of noise in the measurements, the impact of choosing a
ﬁxed value of λ compared to the optimal value. The table shows
the worst case and the average reduction in accuracy.
5.2 Comparison of Algorithms
We now apply the three algorithms described above (MMI, quad-
ratic optimization, and SVD-IPF) to the problem of computing a
BR-to-BR trafﬁc matrix, in order to compare their performance. The
results below are based on 506 data sets from the ISP in question,
representing the majority of June 2002, and covering all days of the
week, and times of day. Figure 3 shows the CDF of the relative
errors for the three methods. We can see that their performance is
almost identical. The mean relative error is 11.3%. Furthermore,
note that more than 80% of the trafﬁc matrix elements have errors
less than 20%. The CDFs for individual data sets are very similar,
but generally less smooth. All three algorithms are remarkably fast,
delivering the trafﬁc matrix in under six seconds. The fastest algo-
rithm is SVD-IPF, which is about twice as fast as MMI, the slowest
one. We also compare the three algorithms for robustness. The re-
sults are very similar, and are omitted here in the interest of brevity.
Note also that [28] showed a number of additional performance
metrics for the SVD-IPF algorithm (which we can see has very sim-
ilar performance to the MMI and quadratic algorithms). Those re-
sults indicated that not only are the errors on the ﬂows reasonable,
but also that the errors on the largest ﬂows are small, and that the
errors are stable over time (an important feature if the results are to
be used to detect network events).
100
90
80
70
60
50
40
30
20
10
s
d
n
a
m
e
d
f
o
e
g
a
t
n
e
c
r
e
p
0
0
20
40
60
relative error 
MMI
SVD−IPF
quadratic
80
100
Figure 3: A comparison of the relative errors for the methods.
5.3 Topological Impact
In this section, we investigate the impact of different topologies
on the performance of the algorithm. We use the ISP maps collected
by Rocketfuel [21, 14, 22]. Since we also need IGP weights, we
use the maps for three North American networks (Sprint, Abovenet,
and Exodus), for which the IGP weights have been estimated by
Rocketfuel. Note that these are not real weights from the networks
of interest, but a set consistent with observed routing.
The Rocketfuel data do not contain the peering relationships of a
network, and so we are limited to using the same initial conditional
independence assumptions in our exploration of topology. This is
not a problem here because we are primarily concerned with the
impact of the internal network topology on the estimates.
The approach for testing the impact of topology is as follows. We
map locations (origins and destination in the original network) to
locations (in the Rocketfuel network) at the PoP level, and map (28)
and (29) to this new network, assuming the same peering relation-
ships, thus removing dependence on data we don’t have access to.
More speciﬁcally, let M : A → B denote a mapping from the
original set of locations i ∈ A to a set of Rocketfuel locations j ∈
B. Then the mapping of demands from one network to another is
accomplished by
i , ∀j ∈ B,
xA
(31)
xB
j = Xi:M(i)=j
and we map the gi from (23) similarly. We consider two mappings,
the ﬁrst based on geographical location, which is provided in the
Rocketfuel dataset. Geographical information does not provide any
way of mapping from router to router in the new network, so we
perform our mapping at the PoP level, and therefore also perform
the estimation at this level). The second mapping is a random per-
mutation that destroys the dependency between the trafﬁc and the
network topology.
5.3.1 Results based on geographical mapping
Figure 4 (a) shows the results of applying the MMI algorithm to
the three Rocketfuel networks, where the mapping from location to
location is done on the basis of nearest geographical equivalent1.
That is, our mapping is given by
M(i) = j, where d(i, j) ≤ d(i, k) ∀k ∈ B,
where d(i, j) is the geographic distance between PoPs i and j. The
ﬁgure also shows the PoP level results for the original ISP (the re-
sults above were for BR-to-BR trafﬁc matrices). One can see vary-
ing levels of performance for the different topologies, but it is gen-
erally similar to or better than the performance we see in Figure 32.
Our aim here is to understand what features of the topology have
impact on the estimation algorithm, and to this end we can consider
two illustrative examples: simple 20 node star and clique topologies.
In the star, all PoPs are connected by a single hub, and in the clique,
all PoPs have direct connections to each other. We intentionally
make these control cases very simple so that we know exactly what
is going on. The results are shown in Figure 4 (b). The performance
on the star topology is poor, while on the clique the performance
is almost perfect. The results stem from the fact that in the clique
topology the link data gives us the trafﬁc matrix. In this case, the
initial MMI estimate of the trafﬁc matrix is almost completely over-
ridden by the information from link data. In the case of the star,
there is no additional information contributed by the link data, and
so we see how well the independence assumption performs on the
input trafﬁc matrix.
Table 2 provides a comparison between the different networks.
The table shows, for each network, the number of North American