偏移后基地址为：34000
(从hopper的login搜索找到方法［WCAccountPhoneLoginControlLogic initWithData:]：  
查看偏移基地址：  
则偏移后的地址： 14B6A66 + 30000 = 14E6A66  
设置断点动态调试，使用：
    br s -a 0x 14E6A66
### 0x05 Cycript
安装Cycript
    dpkg -i cycript_0.9.461_iphoneos-arm.deb  
    dpkg -i libffi_1-3.0.10-5_iphoneos-arm.deb 
    cycript -p 
步骤：
安装cydia之后的ssh，然后mac本机：
    brew install usbmuxd 
    iproxy 2222 22   //iphone的22端口转发到本机的2222
    ssh root@localhost -p 2222  //默认密码 alpine
    cycript:
    [UIApp description]
    [[UIApp keyWindow] recursiveDescription].toString() //输出如下
    >
       |    |    |    |    |    |    |    |    | >
       |    |    |    |    |    |    |    |    | >
    //查看某个UI：
    [#0x18b1c070 _ivarDescription].toString()
    [#0x15baf520 nextResponder] 某个地址的调用方法
    [[UIApp keyWindow] _autolayoutTrace].toString()
    //choose传递一个类，可以在内存中找出属于这个类的对象
    ／／输出对象的属性：
    方法1： 简单基本获取方法。
    *controller（直接在对象前面加个*）
    方法2：方法一无法获取，就使用方法2
    [i for (i in *UIApp)]
    方法3：建议方法三，方法三能获取到更多
    function tryPrintIvars(a){ var x={}; for(i in *a){ try{ x[i] = (*a)[i]; } catch(e){} } return x; }
    function printMethods(className, isa) {
      var count = new new Type("I");
      var classObj = (isa != undefined) ? objc_getClass(className)->isa : objc_getClass(className);
      var methods = class_copyMethodList(classObj, count);
      var methodsArray = [];
      for(var i = 0; i : \n integration=1541 \n iPhone=1541 \n watch=0 \n heartRat=0\n at:2017-12-26 16:00:00 +0000",#"PARSPedometerInfo: \n integration=1541 \n iPhone=1541 \n watch=0 \n heartRat=0\n at:2017-12-26 16:00:00 +0000"]
        也即找到两个PARSPedometerInfo类的对象,随便用其中一个即可
    [#0x12f22cd60 setIntegratedSteps:66666]
     setIntegratedSteps是减号开头的函数，如果是+号开头的函数用法则[className funcName:6666]，如下面的函数是+号开头的函数，可以直接调用这个类中的函数，而不用创建这个类的实例：
    cy# [PARSCryptDataUtils encryptWithServerTimestamp:"18013790233"]
    带减号的函数，要实例化之后才可以调用
    带加号的函数，可以直接调用
这一部分主要参考文章
### 0x06 调试流程
如果要使用lldb调试越狱设备上的进程，需要先将connect的端口映射到本地，以1234端口为例：
    iproxy 1234 1234
    然后打开lldb，输入以下命令：
    process connect connect://localhost:1234
    连接越狱设备，输入：
    debugserver *:1234 -a 
    只要越狱设备上的debugserver（重签名过的）正常运行，就可以通过lldb进行远程调试
越狱设备第一次连接xcode的时候会在/Developer/usr/bin目录下生成一个debugserver，这个debugserver在ios里面运行会失败需要使用ldid签名，需要两个东西：
  * ldid 
  * xml（文件） 
xml文件保存为`ent.xml`，然后签名：
        ldid -Sent.xml debugserver
然后回传到ios上面即可，使用wget或者scp（scp失败，这里是用的是wget）
        debugserver 0.0.0.0:1234 "SpringBoard"
    (lldb)process connect connect://:
### Object-C 的一些基础知识
在Objective-C中的“方法调用”其实应该叫做消息传递。  
以objc_msgSend函数为例子，
    [person sayHello] 
    可以解释为调用person对象的sayHello方法，但是如果从Object-C的Runtime角度来说，这个代码世纪是在发送一个消息，这个代码，编译器时机会将它转换成这样一个函数调用：
    objc_msgSend(person,@selector(sayHello))
第一个参数是要发送消息的实例，也就是person对象。objc_msgSend会先查询它的methodList方法列表，使用第二个参数sayHello
    苹果文档这样写的
    id objc_msgSend(id self, SEL _cmd, ...)
将一个消息发送给一个对象，并且返回一个值。其中，self是消息的接受者，_cmd是selector，... 是可变参数列表。
在现代操作系统中，一个线程会被分配一个stack，当一个函数被调用，一个stack
frame（帧栈)就会被压到stack里，里面包含这个函数设计的参数，局部变量，返回地址等相关信息。当函数返回这个帧栈之后，这个帧栈就会被销毁。
    _text:0001D76A MOV R0, #(selRefHTTPMethod - 0x1C776) ; selRef_HTTPMethod
    _text:0001D772 ADD R0, PC ; selRefHTTPMethod
    __text:0001D774 LDR R1, [R0] ; "HTTPMethod"
    __text:0001D776 MOV R0, R10
    _text:0001D778 STR R1, [SP,#0xAC+varA0]
    _text:0001D77A BLX _objcmsgSend
    __text:0001D77E MOV R7, R7
    _text:0001D780 BLX _objcretainAutoreleasedReturnValue
    __text:0001D784 MOV R4, R0
    _text:0001D786 MOV R0, #(selRefsetRequestMethod_ - 0x1C794) ; selRef_setRequestMethod_
    __text:0001D78E MOV R2, R4
0001D77A处的selector为HTTPMethod，在functions windows里可以搜到这个函数，函数在执行前把调用的对象存储在R0中。
    __text:0001D774 LDR R1, [R0] ; "HTTPMethod"   ／／把方法名放到R1中
    __text:0001D776 MOV R0, R10                    //R0赋值为R10所在的值，此处R10位HTTPMethod这个方法归属的类的指针之类。
    上面两条指令确定了调用的函数，调用完方法，如果一个方法有返回值，会更新在R0，大于一个返回值，就会通过栈来返回值。（意思是如果函数不止一个返回值，就会通过栈来返回）
    NSString *string1 = @"test 1";
    NSString *string2 = @"test 2";
    (lldb) po string1
    test 1
    (lldb) p string1
    (NSString *) $2 = 0x0000000100003af0 @"test 1"
    (lldb) p string2
    (NSString *) $3 = 0x0000000100003b10 @"test 2"
文章最后引用的一篇文章感觉特别有干货。
  * 
  * 
  * 
  * 
  * 
  * 
  * 
    * 