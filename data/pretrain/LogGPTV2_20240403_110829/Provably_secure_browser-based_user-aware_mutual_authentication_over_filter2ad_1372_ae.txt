that according to the protocol speciﬁcation U accepts after having recognized the authenticator w. Obviously
the adversary succeeds only if B has received a Send query containing a message of the form E|F which has
not been previously returned by S such that decryption of F to (w(cid:48)|µS) and rendering of w(cid:48) results in the
acceptance by U. Having excluded forgeries of µS in Game G17 we follow that the success probability of A is
conditioned by the occurrence of InjCert (by which A learns k1 and k2) and is given by the probability of A
to ﬁnd some authenticator w ∈ W excluding the subset of human-indistinguishable authenticators W∗ which
will then be visualized to U. Obviously, the success probability of A in ﬁnding such HPA depends on the size
of W∗. Thus, this is precisely the point in our security analysis of BBMA where human skills to distinguish the
authenticators become important. We get
| Pr[Win21] − Pr[Win20]| ≤ q|W|
|W∗| .
Note, this excludes attacks resulting in the impersonation of the server towards the user. Hence, A wins in
this game if there is a server instance which accepts but no partnered client instance, i.e., if the second condition
from Deﬁnition 3 is satisﬁed. Note, S accepts only after having veriﬁed the authenticity of µC and that the
decrypted password pw(cid:48) matches the one shared with U. Having excluded replays and forgeries of µC in Game
G19 and Game G20 we follow that there must be a client instance which sends this message. This also implies
that the mentioned client instance should be using the same session id as the server instance, thus is partnered;
otherwise, the server instance would have aborted upon the veriﬁcation of the client’s signature σC. Hence,
Pr[Win21] = 0.
(cid:117)(cid:116)
Considering Games G1 to G21 we obtain the desired inequality.
4 Realization
In our realization of BBMA the TLS protocol is ﬁrst executed in the bilateral authentication mode to establish a
secure channel; then, HumanAuth and HumanResponse are exchanged. Recall, HumanAuth contains the
authenticated and encrypted human authenticator whereas HumanResponse contains the authenticated and
encrypted user password. Thus, the authenticator and password are protected by the message authentication and
encryption mechanisms, using the keys provided by the TLS record layer. The ﬂexibility of choosing the higher
order protocol makes this realization especially interesting. Processing and displaying of the authenticator is
modular and outsourced to the Web application. This allows to use authenticators that are personally tailored for
a user. By personally, we mean the way in which the authenticators are presented to the user. Since technically
sophisticated users might opt for classical Web authentication, our realization makes it feasible to downgrade to
TLS in server authentication mode only.
We used HTTP over TLS in client authentication mode, executing a stand-alone Web application (in order to
avoid cross-site-scripting attacks) that is written in the widely adopted script language PHP. In order to avoid a
performance penalty for servers that have a large-scale penetration a TLS accelerator may be used. The protocol
consists of two stages. In the register stage the user opts for an image and generates a client certiﬁcate as deﬁned
in PKCS#10. In the login stage, the image is displayed while the user is requested to enter a password into a
Web form. A demonstration is available at [32].
As with any password-based key exchange protocol, we assume that there is no (active) adversary who
intercepts the setup of credentials. (In the setup phase, the protocol is vulnerable to man-in-the-middle attacks.).
When the user requests the Web site (Fig. 2), she may opt for registration. (Here the server may already test if
a client certiﬁcate is present in the browser by sending a CertificateRequest message.) Then, she has to
enter an email address, a username and password, and upload an image.
If no client certiﬁcate is stored in the browser, the server may trigger the generation of a public key pair
and a PKCS#10 certiﬁcate signing request. (For the protocol to work, it would be sufﬁcient that the browser
generates a self-signed certiﬁcate. However, this is not implemented in modern browsers.) Upon receiving the
Provably Secure Browser-Based User-Aware Mutual Authentication over TLS
15
Fig. 2. Registration (left), Login (right)
PKCS#10 request, the server issues a certiﬁcate. Since the server is the issuer, no third party is required. The
certiﬁcate is provided with attributes chosen by the server in order to relieve the user from ﬁlling out the (se-
curity) parameters. Finally, the server displays a link where the user downloads the client certiﬁcate. The client
certiﬁcate’s ﬁngerprint in addition to the credentials are stored in the server’s database and used to identify the
user in the login stage. The overhead to install the client certiﬁcate is minimal. Today’s browsers provide an
easy-to-use interface. For instance, in the current release of Firefox the user has to click a link in order to store
the certiﬁcate; no more interaction is required.
Upon requesting the login page (Fig. 2), the server checks that the browser is in possession of a valid
client certiﬁcate as speciﬁed by TLS (CertificateRequest). Then, it displays the corresponding image
above the login form (HumanAuth); otherwise, the protocol halts and the user is prevented from seeing the
login page (and the authenticator). In order to get access to the site, the user has to enter username and password
(HumanResponse). The messages HumanAuth and HumanResponse are authenticated and then encrypted
by the TLS record layer. However, TLS-protected messages are secured while in transit on the network; after
reception, the message plaintext as recovered by the record layer is forwarded to the browser where it can persist
in the cache. In order for preventing the adversary from revealing cache information and disclosing the HPA we
set up the server using the HTTP cache-response-directive [20, Sect. 14.9.2] so that the browser avoids caching
the HumanAuth message.
5 Conclusion
Authenticating the user on the Web is an essential primitive and target to various attacks. We have introduced and
analyzed a browser-based authentication protocol that makes weakest assumptions on users’ skills. They have to
detect a human perceptible authenticator. The protocol is speciﬁcally designed for those users who are security-
unaware and used to evaluate Web sites through easy-to-recognize indicators. It remains an open question, if
indeed all users detect the human perceptible authenticator. This requires to conduct usability experiments that
specify the choice of “good” authenticators and keep the human fuzziness low. The presented protocol makes
ﬁrst steps towards bridging the gap between protocols that are provably secure, interfaced to users who are
prone to errors, and implementable within the design constraints of standard browsers.
Interesting approaches to make BBMA more lightweight include the automatic generation of self-signed
X.509 certiﬁcates in the browser or modiﬁcations of the mature browser security model that allows for securely
handling cookies. Another interesting challenge is a cryptographic compiler that composes browser-based pro-
tocols in a general and provably secure sense. A last issue is to model alternative human skills such as the ability
to solve human-hard puzzles (e.g., CAPTCHAs). First steps towards a formal treatment of solving such puzzles
have been recently made by Canetti, Halevi, and Steiner [14].
Acknowledgement
This work has been partially supported by the European Commission under contract IST-2002-507932 through
the ECRYPT Network of Excellence.
16
Sebastian Gajek, Mark Manulis, Ahmad-Reza Sadeghi, and Jörg Schwenk
References
1. M. Abdalla, E. Bresson, O. Chevassut, B. Möller, and D. Pointcheval. Provably secure password-based authentication
in tls. In ASIACCS’06, pages 35–45. ACM, 2006.
2. M. Abdalla, O. Chevassut, and D. Pointcheval. One-time veriﬁer-based encrypted key exchange. In PKC’05, volume
3386 of LNCS, pages 47–64. Springer, 2005.
3. M. Abdalla and D. Pointcheval. Simple Password-Based Encrypted Key Exchange Protocols. In CT-RSA’05, volume
3376 of LNCS, pages 191–208. Springer, 2005.
4. C. Allen and T. Dierks. The TLS Protocol — Version 1.1. Internet proposed standard RFC 4346, 2006.
5. M. Bellare and C. Namprempre. Authenticated Encryption: Relations among Notions and Analysis of the Generic
Composition Paradigm. In ASIACRYPT’00, volume 1976 of LNCS, pages 531–545. Springer, 2000.
6. M. Bellare, D. Pointcheval, and P. Rogaway. Authenticated Key Exchange Secure Against Dictionary Attacks.
In
EUROCRYPT’00, volume 1807 of LNCS, pages 139–155. Springer, 2000.
7. M. Bellare and P. Rogaway. Entity Authentication and Key Distribution. In CRYPTO’93, volume 773 of LNCS, pages
232–249. Springer, 1993.
8. M. Bellare and P. Rogaway. Random Oracles are Practical: A Paradigm for Designing Efﬁcient Protocols. In ACM
CCS’93, pages 62–73. ACM, 1993.
9. M. Bellare and P. Rogaway. The AuthA Protocol for Password-Based Authenticated Key Exchange. Contributions to
IEEE P1363, 2000. http://grouper.ieee.org/groups/1363/passwdPK/contributions.html.
10. S. M. Bellovin and M. Merritt. Augmented encrypted key exchange: A password-based protocol secure against dictio-
nary atttacks and password ﬁle compromise. In ACM CCS’93, pages 244–250. ACM, 1993.
11. V. Boyko, P. D. MacKenzie, and S. Patel. Provably Secure Password-Authenticated Key Exchange using Difﬁe-
Hellman. In EUROCRYPT’00, volume 1807 of LNCS, pages 156–171. Springer, 2000.
12. E. Bresson, O. Chevassut, and D. Pointcheval. Security Proofs for an Efﬁcient Password-Based Key Exchange. In ACM
CCS’03, pages 241–250. ACM, 2003.
13. E. Bresson, O. Chevassut, and D. Pointcheval. New Security Results on Encrypted Key Exchange. In PKC’04, volume
2947 of LNCS, pages 145–158. Springer, 2004.
14. R. Canetti, S. Halevi, and M. Steiner. Mitigating Dictionary Attacks on Password-Protected Local Storage.
In
CRYPTO’06, volume 4117 of LNCS, pages 160–179. Springer, 2006.
15. S. Chiasson, P. C. van Oorschot, and R. Biddle. Graphical Password Authentication using Cued Click Points.
In
ESORICS’07, volume 4734 of LNCS, pages 359–374. Springer, 2007.
16. R. Dhamija and J. D. Tygar. The Battle against Phishing: Dynamic Security Skins. In SOUPS’05, pages 77–88. ACM,
2005.
17. R. Dhamija, J. D. Tygar, and M. A. Hearst. Why Phishing Works. In CHI’06, pages 581–590. ACM, 2006.
18. T. Dierks and E. Rescorla. The Transport Layer Security (TLS) Protocol, Version 1.1. RFC 4346, IETF, 2006. Proposed
Standard.
19. C. Ellison. Ceremony Design and Analysis. Cryptology ePrint Archive, Report 2007/399, 2007.
20. R. T. Fielding, J. Gettys, J. Mogul, H. F. Nielsen, L. Masinter, P. J. Leach, and T. Berners-Lee. Hypertext Transfer
Protocol — HTTP/1.1. Technical Report 2616, Internet Engineering Task Force, June 1999.
21. I. Giang. SSL Phishing, Microsoft Moves to Brand, and Nyms.
In FC’06, 14 February 2006. https://www.
financialcryptography.com/mt/archives/000654.html.
22. T. Groß. Security Analysis of the SAML Single Sign-On Browser/Artifact Proﬁle.
In ACSAC’03. IEEE Computer
Society, 2003.
23. T. Groß, B. Pﬁtzmann, and A.-R. Sadeghi. Browser Model for Security Analysis of Browser-Based Protocols.
In
ESORICS’05, volume 3679 of LNCS, pages 489–508. Springer, 2005.
24. T. Groß, B. Pﬁtzmann, and A.-R. Sadeghi. Proving a WS-Federation Passive Requestor Proﬁle with a Browser Model.
In ACM SWS’05, pages 54–64. ACM, 2005.
25. A. Herzberg. Why Johnny Can’t Surf (Safely)?, 2007. (Personal communication, work in progress).
26. M. Jakobsson and S. Myers. Delayed Password Disclosure. In ACM DIM’07, pages 17–26. ACM, 2007.
27. J. Katz, R. Ostrovsky, and M. Yung. Efﬁcient Password-Authenticated Key Exchange using Human-Memorable Pass-
words. In EUROCRYPT’01, volume 2045 of LNCS, pages 475–494. Springer, 2001.
28. J. Katz, R. Ostrovsky, and M. Yung. Forward Secrecy in Password-Only Key Exchange Protocols. In SCN’02, volume
2576 of LNCS, pages 29–44. Springer, 2002.
29. D. Kormann and A. Rubin. Risks of the Passport Single Sign-On Protocol. Computer Networks, 33(1–6):51–58, 2000.
30. P. MacKenzie. The PAK Suite: Protocols for Password-Authenticated Key Exchange. Technical Report 2002-46,
DIMACS, 2002.
Provably Secure Browser-Based User-Aware Mutual Authentication over TLS
17
31. B. Pﬁtzmann and M. Waidner. A Model for Asynchronous Reactive Systems and its Application to Secure Message
Transmission. In IEEE S&P’01, pages 184-201, 2001.
32. Proof of Concept Implementation of BBMA, 2007. http://www.demo.nds.rub.de/bbma.
33. V. Shoup. OAEP Reconsidered. Journal of Cryptology, 15(4):223–249, 2002.
34. V. Shoup. Sequences of Games: A Tool for Taming Complexity in Security Proofs. Cryptology ePrint Archive, Report
2004/332, 2006.
35. C. Soghoian
and M.
Jakobsson.
of America’s
Bank
deceit-augmented-man-in-middle-attack.html.
Service,
SiteKey
A Deceit-Augmented Man
against
http://paranoia.dubfire.net/2007/04/
the Middle Attack
in
2007.
36. M. Steiner, P. Buhler, T. Eirich, and M. Waidner. Secure Password-Based Cipher Suite for TLS. ACM Trans. on Inf.
and Sys. Sec, 4(2):134–157, 2001.
37. A. O. Stuart Schechter, Rachna Dhamija and I. Fischer. The Emperor’s New Security Indicators. In IEEE S&P’07,
pages 51–65. IEEE CS, 2007.
38. X. Suo, Y. Zhu, and G. S. Owen. Graphical Passwords: A Survey. In ACSAC’05, pages 463–472. IEEE CS, 2005.
39. W3C. Document Object Model (DOM), 2005. http://www.w3.org/DOM.