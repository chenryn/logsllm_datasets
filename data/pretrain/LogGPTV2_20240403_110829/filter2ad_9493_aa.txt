**作者：启明星辰ADLab**  
**原文链接：**
# 一、概述
加密货币一直以来都是黑客们极为热衷的攻击领域，除了攻击加密货币交易平台以获得巨额的经济利益外，还存在大量以窃取加密货币钱包的攻击，启明星辰ADLab近期发现多起以加密货币机器人为诱饵进行加密货币钱包窃取的攻击案例。起初我们注意到一些行为异常的交易机器人（主要以Bitmex
Bot 、Trade
Bot、UniqueTradingBot为主），这些机器人在安装过程中弹出缺少.NET运行库的错误提示框。而通过调查分析发现，其中多款机器人的官方软件并没有使用.NET进行相关组件的开发。因而进一步分析后，我们发现这些异常的机器人释放并试图执行一些使用C#编写的可执行文件，同时发现一些非官方的网络连接。随后，我们将这些机器人释放的非官方组件一一提取出来做进一步分析和对比，最后确认这是一款新型的具有丰富窃密功能的恶意软件。其中核心组件的大部分类均以“NoiseMe”作为命名空间的起始标志，因而此处我们将该恶意软件命名为“NoiseMe”。其除了具备窃取几乎所有主流加密货币钱包的能力外，还被用于敏感信息（如受害主机的各种登录凭证数据）窃取，进一步黑客还可以利用该恶意软件对受害主机进行定制化的攻击，对不同的受害主机下发不同攻击插件来执行不同的任务，以实现黑客利益的最大化。
通过我们全面的分析发现，该窃密软件几乎会窃取所有可能窃取的凭证数据，并且涵盖多达10种主流加密货币客户端软件的钱包文件。其中窃取的凭证的数据包含RDP凭证、FTP凭证、
Telegram凭证、Discord凭证、以及浏览器凭证（Cookies、Autofill、Credit
Cards、Credentials）等。其中涉及的加密货币客户端包含比特币、莱特币、字节币、达世币、以太币、门罗币、Electrum、Exodus等，这里Electrum是比特币的轻量钱包客户端，Exodus是一款用于管理资产和交易数据的数字货币钱包软件，其支持100多种加密货币，如比特币、以太坊、BAT、EOS、Augur、Tezos、Dash等。
此外，该窃密软件为了增加自身的存活时间，提高攻击的隐蔽性，其还大量使用代码混淆、关键字符串加密、高强度代码保护技术（WinLicense）来保护其攻击代码，提高逆向分析的难度和时间成本，同时采用文件内存加载技术来防止取证分析人员获取其核心攻击模块。在我们分析的整个过程中，需要对其采用高强度代码保护技术进行处理，解密出被保护的代码，并动态调试提取出其中被二次加密的字符串方可对其进行完整的逆向分析。
# 二、NoiseMe工作原理分析
在分析完“NoiseMe”恶意软件后，我们对其整个攻击过程进行回溯发现，其攻击载体主要存储在一些合法的下载站点、云盘，通过一些论坛和社交网络诱使特定人员下载恶意软件执行。黑客将这些攻击载体伪装成各种加密货币自动交易机器人，并以交易机器人为幌子发布恶意软件链进行传播。
图1 攻击流程图
如图1所示，这些攻击载体一旦被受害人下载执行，“NoiseMe”恶意软件便会在后台偷偷地执行。其中首先启动一个“Dropper”执行，该“Dropper”会从黑客的一个恶意代码存储点去下载“上线”模块（下载自站点ra.pdofan.ru）和“核心窃密”模块（下载自站点v69.pdofan.ru）执行。其中，“上线”模块会收集受害主机的系统状态信息并回传至C&C服务器（45.67.231.23:53623）完成上线任务，同时C&C服务器会指定一个远程组件的地址给该模块执行，以完成特定工作。而“Dropper”下载的“核心窃密”模块主要以窃取受感染主机的加密货币钱包地址和多种登录凭证数据为主，这些数据均会回传给内置的存储服务器（195.161.62.146:2012）使用。
通过对“NoiseMe”攻击载体的收集发现，黑客使用了多种类型的攻击载体以扩大其攻击目标，其中除了包含有三款比较著名的商用加密货币机器人外，还包含有多种用于赚取比特币的自动化辅助工具以及一些使用Autoit脚本实现的伪装器。
**伪装名称** | **伪装版本** | **内置软件** | **内置软件官方网站** | ***商业软件**  
---|---|---|---|---  
Bitmex Bot | 3.1 | MarginClick | https://www.marginclick.com/ | 是  
Trade Bot | 2.0 | Automated Trading Bot | http://mitsoft.ru/ | 是  
UniqueTrading Bot | 2.0.4.2 | Automated Trading Bot | http://mitsoft.ru/ | 是  
表1 攻击载体伪装信息
伪装的商用加密货币机器人中，实际安装的是类似于MarginClick及Automated Trading
Bot之类的商业化交易客户端。其中攻击载体伪装成为类似于“BtcClicks
Autoclicker.exe”的辅助工具，经过查证该工具是基于网站进行模拟观看广告以赚取比特币的自动化工具，可以看出黑客还试图攻击此类灰色收入者以窃取其所得的比特币收入。
此外，还有一些攻击载体以Autoit脚本转EXE的方式存在，不过这类攻击载体似乎大量感染上了Ramnit蠕虫（是一款具备广泛感染能力的蠕虫病毒，其支持感染EXE、DLL、HTML以及HTM等类型的文件）。这很可能是“NoiseMe”在传播过程中受此病毒感染，而并非是黑客刻意为之，因为在“NoiseMe”中加入Ramnit蠕虫极容易暴露自身并且其攻击目的也大相径庭。
最后，我们对“NoiseMe”恶意软件进行了溯源，最终发现一款攻击功能和目标较为相似的恶意软件GrandSteal，通过比对分析还发现他们中出现了完全相同的代码，见图2。
图 2 代码比对图
但是他们之间大量的代码仍然存在许多差别，我们猜测这两款恶意软件极有可能来自同一个家族的源码改造。“NoiseMe”相较于GrandSteal，其功能更丰富，对抗手段更强，如GrandSteal仅仅使用ConfuserEx混淆工具进行简单的代码混淆，而“NoiseMe”则使用高强度的商业加密工具进行了代码保护；GrandSteal单纯只有窃密功能，而“NoiseMe”却加入了Loader的使用和远程任意组件执行的功能；此外“NoiseMe”使用了更为丰富的攻击载体进行传播。
# 三、详细技术分析
黑客利用Dropper模块下载执行“上线模块”和“核心窃密模块”，达到窃取受感染主机加密货币和隐私凭证数据的目的。为了躲避安全防护软件查杀和对抗安全分析人员逆向分析，黑客使用了字符串加密、内存加载执行以及利用商业保护软件WinLicense加壳等多种技术手段保护“NoiseMe”窃密软件。“NoiseMe”窃密软件各个模块功能如图3所示。
图 3 NoiseMe模块功能示意图
## 3.1 Dropper模块分析
Dropper模块的主要任务是下载和执行功能模块。为了对抗逆向分析，黑客将Dropper模块中的关键字符串信息先进行异或加密（异或密钥为“dNwlEXttSqq”），加密的结果再用Base64编码存储到程序中。解密方法为其逆过程。解密代码如图4所示。
图 4 字符串解密算法
在完成关键字符串解密后，Dropper模块会从2个内置的链接下载并执行功能模块。其中，内置链接[hxxp://ra.pdofan[.]ru/Justmine.exe”](C:\\Users\\Administrator\\AppData\\Local\\Microsoft\\Windows\\Temporary
Internet Files\\Content.Outlook\\85E9QCTP\\
"hxxp://ra.pdofan\[.\]ru/Justmine.exe”")下载的是上线模块，该模块以Justmine.exe命名并存储到%USERPROFILE%目录；内置链接[[“hxxp://v69.pdofan[.]ru/111111111.exe”](C:\\Users\\Administrator\\AppData\\Local\\Microsoft\\Windows\\Temporary
Internet Files\\Content.Outlook\\85E9QCTP\\
"“hxxp://v69.pdofan\[.\]ru/111111111.exe”")下载的是核心窃密模块，以111111111.exe命名并保存到%USERPROFILE%目录。下文我们会详细地分析这两个功能模块的具体实现。下载和执行功能模块相关代码如图5所示。
 图 5 下载文件并执行
从图5中可以看出，Dropper模块中下载功能模块的URL链接是HTTP协议，但是在分析过程中我们发现它在传输功能模块时实际使用的是HTTPS协议。黑客利用了HTTP重定向功能将下载链接重定向到HTTPS网址上，再以HTTPS协议传输数据以达到隐藏恶意模块传递和躲避防火墙侦测的目的。重定向请求和应答的网络数据包如图6所示。
图 6 重定向到HTTPS
当Dropper模块完成上线模块和核心窃密模块的下载和执行后，其核心功能使命便已完成，接下来就是清理痕迹以躲避安全分析人员的追踪溯源。清理痕迹功能是利用上文解密出的Remove.bat批处理脚本程序实现，具体由Dropper模块中的“SystemDataDataRowBuilder”函数负责实施。相关代码如图7所示。
图 7 自删除代码
## 3.2 上线模块
“上线模块”是由Dropper模块下载并命名为`Justmine.exe`，其将自身伪装成WinRAR应用程序，用于迷惑攻击目标，获取被感染主机的国家、城市以及系统版本、时区等信息，然后将这些信息上传到C&C服务器。黑客能够根据攻击需求向受感染主机下发并执行任意攻击模块。
### 3.2.1 获取设备信息
“上线模块”利用Replace函数过滤掉垃圾数据得到真正的C&C服务器地址“45.67.231.23:53623”。C&C地址的获取代码如图8所示。
 图 8 C&C地址获取
在获得C&C服务器后，“上线模块”便开始收集受感染主机的设备信息，包括硬件ID、操作系统、公网IP、国家、CPU信息和显卡信息。这些信息会临时存储在内存中，作为上线信息上传到C&C服务器。获取设备信息代码如图9所示。
图 9 获取设备信息
### 3.2.2 安装和持久化
在获取到设备信息后，“上线模块”接着安装自身并利用计划任务实现持久化，其会先判断当前的执行路径与它预置的`%USERPROFILE%\\Video\\Junker`路径是否相同，为了方便描述，下文简称该路径为“安装目录”。
如不相同，“上线模块”会先创建该“安装目录”，然后通过遍历进程杀死在“安装目录”下的PHPmyAdmin.exe进程，接着将自身拷贝到“安装目录”下并命名为`PHPmyAdmin.exe`，再执行“安装目录”下的`PHPmyAdmin.exe`，最后退出执行。相关代码如图10所示。
图 10安装目录
如相同，“上线模块”会判断是否已经安装过，如果安装过就退出执行，否则就调用`Junk`函数向受感染主机安装计划任务以实现持久化。恶意代码利用Windows系统自带的schtasks程序执行安装计划任务，反编译后显示用于安装计划任务的命令字符串被混淆过，见图11。
图 11计划任务
从图11中可以看出，计划任务被安装到“[\Microsoft](http://Microsoft)”路径下。任务名称以`Php-`字符串开始，后面再拼接一个受感染主机硬件信息（机器名称、当前登录用户名、用户所在域、操作系统版本信息组成的字符串）的HASH值。安装好的计划任务如图12所示。
图 12 电脑中被安装的计划任务
### 3.2.3 下载执行扩展模块
“上线模块”在实现持久化后，就利用前面解析的C&C服务器和受感染主机的设备信息构造上线请求，并以SOAP协议每隔60秒与C&C服务器进行一次通信。C&C服务器收到上线请求后会向受感染主机下发配置信息，配置信息包含扩展模块的下载地址和扩展模块的启动方式（显示执行、隐藏执行）等配置信息。“上线模块”会按照配置信息下载并执行扩展模块。利用配置信息下达控制指令，黑客可以十分灵活的控制被感染主机执行任意攻击程序以实现其攻击目的。解析控制指令代码如图13所示。
图 13 解析控制指令
从图13中可以看出，“上线模块”会调用“Drop”函数来下载和执行扩展模块。该函数会判断`%USERPROFILE%\\Video\\Junker\\Lock`目录是否存在，如若不存在则先创建该目录，然后再按照配置信息下载执行扩展模块。相关代码如图14所示。
图 14下载执行代码
捕获到的上线请求数据包如图15所示。
图 15 上线请求数据包
上线请求数据各字段的含义如表2所示。
**_*上传字段*_** | **_*含义*_**  
---|---  
BuildID | 黑客定义的标识  
Country | 国家  
HardwareID | 硬件ID信息  
IP | 公网IP  
LastActive | 上次上线时间  
OS | 操作系统  