title:HeapTherapy+: Efficient Handling of (Almost) All Heap Vulnerabilities
Using Targeted Calling-Context Encoding
author:Qiang Zeng and
Golam Kayas and
Emil Mohammed and
Lannan Luo and
Xiaojiang Du and
Junghwan Rhee
2019 49th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN)
HeapTherapy+: Efﬁcient Handling of (Almost) All
Heap Vulnerabilities Using Targeted
Calling-Context Encoding
Qiang Zeng†, Golam Kayas‡, Emil Mohammed‡, Lannan Luo†, Xiaojiang Du‡, and Junghwan Rhee§
†University of South Carolina
{zeng1,lluo}@cse.sc.edu, {golamkayas,tuf58189,dux}@temple.edu, {rhee}@nec-labs.com
‡Temple University
§NEC Lab
Abstract—Exploitation of heap vulnerabilities has been on the
rise,
leading to many devastating attacks. Conventional heap
patch generation is a lengthy procedure requiring intensive man-
ual efforts. Worse, fresh patches tend to harm system depend-
ability, hence deterring users from deploying them. We propose
a heap patching system HEAPTHERAPY+ that simultaneously
has the following prominent advantages: (1) generating patches
without manual efforts; (2) installing patches without altering the
code (so called code-less patching); (3) handling various heap
vulnerability types; (4) imposing a very low overhead; and (5) no
dependency on speciﬁc heap allocators. As a separate contribution,
we propose targeted calling context encoding, which is a suite of
algorithms for optimizing calling context encoding, an important
technique with applications in many areas. The system properly
combines heavyweight ofﬂine attack analysis with lightweight
online defense generation, and provides a new countermeasure
against heap attacks. The evaluation shows that the system is
effective and efﬁcient.
Index Terms—Heap memory safety, automatic patch genera-
tion, dynamic analysis, calling context encoding.
I. INTRODUCTION
As many effective measures for protecting call stacks get
deployed (such as canaries [1], reordering local variables [2],
and Safe SEH [3]), heap vulnerabilities gain growing attention
of attackers. Heap vulnerabilities can be exploited by attackers
to launch vicious attacks. The recent Heartbleed [4] and
WannaCry [5] attacks demonstrate the dangers. For instance,
the WannaCry ransomware uses the EternalBlue exploit, which
makes use of a heap buffer overwrite vulnerability to hijack the
control ﬂow of the victim program [5]. It is notable that heap
memory vulnerabilities nowadays are frequently exploited to
launch ROP-based attacks [6], which makes heap memory
protection an even more urgent and important task.
There are a variety of heap vulnerability types. The follow-
ing types are among the most commonly exploited types.1 (1)
Buffer overﬂow: it includes both overwrite and overread. By
overwriting a buffer, the attack can manipulate data adjacent to
that buffer and launch various control-data or non-control-data
attacks, while exploitation of overread can steal sensitive in-
formation in memory, such as address space layout and private
keys. (2) Use after free: it refers to accessing memory after
it has been freed. If the memory space being reused is under
1Double free was frequently exploited; but many popular allocators, such
as the default allocator in glibc [7], have built-in double free detection now.
978-1-7281-0057-9/19/$31.00 ©2019 IEEE
DOI 10.1109/DSN.2019.00060
530
the control of attackers, use-after-free bugs can be exploited
to launch various attacks, such as control ﬂow hijacking. (3)
Uninitialized read: exploitation of such vulnerabilities can
leak sensitive information.
Many approaches have been proposed to tackle heap vul-
nerabilities. A large body of research focuses on detecting,
preventing or mitigating heap attacks (and other memory-
based attacks) [8]–[25]. They usually incur a large overhead
or/and can only handle a speciﬁc type of heap vulnerabilities.
For example, MemorySanitizer [20] is a dynamic tool that
detects uninitialized read; however, it incurs an average of
2.5x of slowdown and 2x of memory overhead. AddressSani-
tizer [8], which detects overﬂows and use after free online, is
deemed fast, but still incurs 73% slowdown and 3.4x memory
overhead. As another example, HeapTherapy [19] proposes an
efﬁcient heap buffer overﬂow detection and response system;
however, it does not detect and handle uninitialized read and
use after free.
When examining the spectrum of heap security measures,
we notice that handling heap vulnerabilities through patching
has been much less studied. Patching, however, is an indis-
pensable step for handling vulnerabilities in practice. Over
decades, conventional patch generation and deployment have
suffered serious limitations. First, the patch generation is a
lengthy procedure. Even for security sensitive bugs, it takes
those big vendors 153 days on average from vulnerability
report to patch availability [26]. A study ﬁnds that only 65% of
vulnerabilities in software running on a typical Windows host
have patches available at vulnerability disclosure [27]. This
provides opportunities for attackers to exploit the unpatched
vulnerabilities on a large scale [28]. For resource-constrained
small software companies, it takes even longer time.
Second, given a vulnerability, its fresh patches may have not
been thoroughly tested, and thus tend to introduce stability
issues and even logic errors. Although waiting for mature
patches can reduce the risk, it makes the exploitation window
longer. This has been a dilemma in patch deployment [29].
We propose a heap patching system that does not have the
limitations above. Our insight is that, by changing the conﬁgu-
ration of heap memory allocation, all the aforementioned heap
vulnerabilities can be addressed without altering the program
code and, hence, no new bugs are introduced. According to the
conﬁguration information, the allocator enhances its handling
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:53:42 UTC from IEEE Xplore.  Restrictions apply. 
(i.e., allocation, initialization and deallocation) of buffers that
are vulnerable to attacks, called vulnerable buffers and, more
importantly, applies security enhancement only to them (rather
than all buffers) to minimize the overhead. We refer to it as
Heap Patches as Conﬁguration.
We accordingly build our system HEAPTHERAPY+. Unlike
HeapTherapy [19], which generates defenses for overﬂow
bugs by combining online in-memory trace collection and
post-mortem core dump analysis, HEAPTHERAPY+ consists of
a heavyweight ofﬂine patch generation phase and a lightweight
online defense generation phase. In the ofﬂine patch generation
phase, we use shadow memory to scrutinize attacks and
achieve bit precision level. We group buffers according to
their allocation-time calling contexts. Buffers that share the
same calling context as the buffer exploited by the attack
are regarded as vulnerable buffers. The calling context along
with other information is collected to generate patches, i.e.,
the conﬁguration information. Next,
in the online defense
generation phase, the conﬁguration information is loaded and
the stored calling context information guides the allocator to
recognize vulnerable buffers. It properly combines detailed and
powerful ofﬂine analysis and highly efﬁcient online defenses.
However, if call stack walking (as used by gdb) is used for
obtaining calling contexts, it can incur signiﬁcant slowdown,
especially for allocation-intensive programs [30]–[33]. We
thus use calling context encoding, which continuously repre-
sents the current calling context in one or a few integers [30].
By reading the integer(s), the encoded calling context, called
Calling Context ID (CCID), can be obtained. By comparing
the CCID for the current buffer allocation with the CCIDs
stored in the patches, the online system can swiftly determine
whether the new buffer is vulnerable.
Moreover, we propose targeted calling context encoding,
which is a suite of algorithms that can optimize many
well-known calling encoding methods, such as PCC [30],
PCCE [31], and DeltaPath [32]. Since calling context encoding
is an important technique with many applications, the opti-
mization algorithms constitute a separate contribution.
Installing a heap patch does not change the program code.
Speciﬁcally, a heap patch is in the form of a (cid:2)key, value(cid:3)
tuple, where the key is the allocation-time CCID of the
vulnerable buffer and the value indicates the vulnerability type
and the parameter(s) for applying the online defense. The
patches are read into a hash table upon program initialization.
It thus takes only O(1) time to determine whether a new buffer
is vulnerable. The online defense is enforced by intercepting
heap buffer allocation and deallocation. Both the hash table
initialization and the buffer allocation/deallocation interception
are implemented in a shared library, and are transparent to the
underlying heap allocator. We thus do not need to modify the
heap allocator or depend on a speciﬁc allocator.
None of the techniques used in HEAPTHERAPY+, except
for targeted calling context encoding, is new. However, static
analysis, code instrumentation, ofﬂine attack analysis, and
online defense generation are creatively combined to build a
new countermeasure against heap attacks. A comprehensive
evaluation is performed, showing that HEAPTHERAPY+ is
effective and efﬁcient. We make the following contributions.
• We properly combine heavyweight ofﬂine attack analysis
and lightweight online defense generation to build a new
heap defense system that simultaneously demonstrates
the following good properties: (1) patch generation with-
out manual efforts, (2) code-less patching, (3) versatile
handling of heap buffer overwrite, overread, use after
free, and uninitialized read, (4) imposing a very small
overhead, and (5) no dependency on speciﬁc allocators.
• We propose targeted calling context encoding, a suite of
algorithms that can optimize calling context encoding,
and demonstrate its application to our system.
II. RELATED WORKS
Given the large body of research on heap memory safety,
we do not intend to make an exhaustive list of work on
the problem. Instead, we compare HEAPTHERAPY+ with
other automatic patch generation techniques, and then examine
critical techniques used in our system.
A. Automatic Patch/Defense Generation
With attack inputs in hand, generating patches/defenses au-
tomatically has been a highly desired goal. We divide previous
researches towards this goal into the following categories.
Bytes pattern based signature generation. Given a large
number of attack inputs, many systems (such as Honey-
comb [34], Autograph [35], and Polygraph [36]) generate sig-
natures by extracting common bytes patterns from the inputs.
However, such methods usually need many attack samples in
order to correctly mine patterns, and cannot work when only
one or very few attack inputs are available. False positives may
be raised when benign inputs happen to match the signatures.
Plus, attackers can mutate the inputs to bypass the detection.
In addition, these systems usually have deployment difﬁculty
in handling compressed or encrypted inputs.
Semantics based signature generation. Tools like COV-
ERS [37], Hamsa [38], TaintCheck [39] and the work by
Xu et al. [40] propose methods to generate semantics-based
signatures; e.g., spotting the target system call ID used upon
control ﬂow hijacking and ﬁltering out inputs that contain the
ID. They are very effective in handling certain control ﬂow
hijacking attacks, but it is unknown how they can be applied
to addressing overread and uninitialized read. They also have
deployment difﬁculty in handling compressed and encrypted
attack inputs and may incur false positives.
Tracking faulty instructions. By replaying the attacks, some
systems try to pinpoint faulty instructions that are exploited
by the attacks and try to generate patches to ﬁx them; such
systems include VSEF [41], Vigilant [42], PASAN [43] and
AutoPag [44]. A frequently employed insight is that a tainted
input, e.g., due to overwrite, should not be used to calculate
the indirect jump address. It is unknown how such systems
can handle attacks beyond control ﬂow hijacking, e.g., buffer
531
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:53:42 UTC from IEEE Xplore.  Restrictions apply. 
overread attacks. Plus, the deployment of the patches requires
code update, just like conventional code patching.
Trial and error for patch generation. Some systems propose
genetic programming based program generation [45], template
based patch generation [46], and patch generation via machine
learning [47] to generate many patches, and test each of them
against prepared test cases until one patch passes all of them.
However, it usually takes a lot of effort to prepare well-
structured test cases with a decent test coverage. Other systems
keep generating candidate patches based on certain criteria
until one can recover the program execution [48], [49]. There
is no guarantee a patch can be generated using these methods,
and the generated patch may introduce logic errors.
While there are many works on automatic defense/patch
generation, most of the proposed systems suffer one or more
of the following limitations: deployment difﬁculties, false
positives, requiring many attack inputs or test cases. Unlike ex-
isting automatic patch generation systems, HEAPTHERAPY+
supports easy deployment without code updates, guarantees
zero false positives, requires only one attack input, and handles
multiple types of heap vulnerabilities.
B. Calling Context Encoding
A calling context is the sequence of active function calls
on the call stack. It carries critical information about dynamic
program behavior. It thus has been widely used in debugging,
testing, anomaly detection, event logging, performance opti-
mization, and proﬁling [32]. For example, logging sensitive
system calls is a practice in many systems. Recording the call-
ing context of the system call provides important information
about the sequence of program components that gets involved
and leads to the call.
Obtaining calling contexts through stack walking is straight-
forward but very expensive [30]. A few encoding techniques,
which represent a calling context using one or very few inte-
gers, have been proposed to continuously track calling contexts
with a low overhead. The probabilistic calling context (PCC)
technique [30] computes a probabilistically unique integer
ID, essentially a hash value, for each calling context, but
does not support decoding. Precise calling context encoding
(PCCE) [31] stems from path proﬁling [50] and supports
decoding. DeltaPath [32] improves PCCE by supporting vir-
tual function calls and large-sized programs. A relevant but
different problem is path encoding [50], which represents
execution paths (within a control ﬂow graph) into integers.
Similar
to targeted calling context encoding, another
work [51] also aims to minimize the encoding overhead but
uses a very different idea. It performs ofﬂine-proﬁling runs
to establish the mappings between stack offsets and calling
contexts. It fails if the calling context of interest does not
appear in the proﬁling runs. Its reported decoding failure rate
is as high as 27%. Finally, it does work if variable-size local
arrays (allowed in C/C++) are used.
C. Calling Context-Sensitive Defenses
it may or may not detect
Calling context was applied to various areas beyond de-
bugging decades ago. As an example, a region-based heap
allocator tags heap objects with allocation-time calling con-
texts [52]. Recently, calling context is used to generate context
sensitive defenses [19], [33], [40], [41], [53]. In particular,
Exterminator [33] also generates context-sensitive heap de-
fenses. However, our system HEAPTHERAPY+ differs from
Exterminator in multiple aspects. (1) Exterminator performs