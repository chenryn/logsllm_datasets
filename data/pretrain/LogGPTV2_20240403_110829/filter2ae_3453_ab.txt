      HANDLE hStdOutput;
      HANDLE hStdError;
    } STARTUPINFOA, *LPSTARTUPINFOA;
若要隐藏窗口，则`dwFlags`的值需要设置为`STARTF_USESHOWWINDOW`，`wShowWindow`的值设置为false即可
    STARTUPINFO si = { 0 };
    si.dwFlags = STARTF_USESHOWWINDOW;    
    si.wShowWindow = FALSE;
然后调用`CreateProcess`启动进程
    BOOL bRet = CreateProcess(NULL,    szCmd, NULL, NULL, FALSE, CREATE_NEW_CONSOLE, NULL,    NULL, &si, &pi);
这里编译一下看看效果，这里直接退出了，什么也没有，证明是对的，因为我们隐藏了cmd的窗口
这里我们把`wShowWindow`的值改为`TRUE`再查看一下效果
这里看起来效果还是不明显，我们再换种方式，直接运行exe，发现在同目录下生成了`test.bat`
10s过后发现exe跟bat都已经删除，证明我们的自删除成功
上面提到，在xp是没有choice的命令的，那么可以用ping命令代替，bat的代码如下
    @echo off
    ping 127.0.0.1 -n 10
    del *.exe
    del %0
与choice相似，这里就不细说了，直接改一下代码就可以
    BOOL CreateBat(char *pszBatFileName)
    {
        int time = 5;
        char szBat[MAX_PATH] = { 0 };
        ::wsprintf(szBat, "@echo off\nping 127.0.0.1 -n %d\ndel *.exe\ndel %%0\n", time);
        FILE *fp = NULL;
        fopen_s(&fp, pszBatFileName, "w+");
        if (NULL == fp)
        {
            return FALSE;
        }
        fwrite(szBat, (1 + ::lstrlen(szBat)), 1, fp);
        fclose(fp);
        return TRUE;
    }
这里再提一个小tips，这里我们实现的是cmd.exe的自启动与删除，那么在实战过程中能否写成cs的上线exe的自删除呢？答案是肯定的，这里就不拓展了。
###  MoveFileEx方式
我们首先看一下`MoveFileEx`这个api
    BOOL MoveFileExA(
      [in]           LPCSTR lpExistingFileName,
      [in, optional] LPCSTR lpNewFileName,
      [in]           DWORD  dwFlags
    );
> dwFlags：设置移动标志，指明要怎样操作文件或者目录。
>
>
> MOVEFILE_COPY_ALLOWED:当需要移动文件到不同的盘符时需要指定此值，不然会失败，这个值不能和MOVEFILE_DELAY_UNTIL_REBOOT一起用
>
> MOVEFILE_DELAY_UNTIL_REBOOT：文件并不立即移动，当下一次机器重启时文件才执行移动
> ，不能和MOVEFILE_COPY_ALLOWED同时用
>
> MOVEFILE_FAIL_IF_NOT_TRACKABLE：当源文件是连接资源时会移动失败。
>
>
> MOVEFILE_REPLACE_EXISTING:当目的文件已经存在时,要将lpExistingFileName的内容替换掉以前的内容,此时要检查ACL权限,可能会失败
>
> MOVEFILE_WRITE_THROUGH:只有当文件完全到达目的文件的时候函数才返回,缓冲区也不能有未留的数据
`MoveFileEx`这个函数调用的时候有几个需要的点，第一个就是当`dwFlags`为`MOVEFILE_DELAY_UNTIL_REBOOT`时，需要为system或administrartor权限才能执行，第二个点就是如果要移动目录需要保证目录不存在才可以，第三个点就是不能在不同的盘符下移动目录。
那么我们这里实现自删除的话，就是好需要设置`dwFlags`为`MOVEFILE_DELAY_UNTIL_REBOOT`，这里为什么要system或者administrator权限呢，是因为`MoveFileEx`是通过写入`HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Session
Manager\PendingFileRenameOperations`这个注册表路径来达到移动或删除的目的，我们可以看到这个键是位于`HKEY_LOCAL_MACHINE`的，而不是`USER`，所以必须要administrator权限进行修改
这里我们看一下这个键值，它的类型是`REG_MULTI_SZ`，那么意味着这个键值能够写入多个字符串
经过探究后发现，`MoveFileEx`这个api在执行删除操作写入`File\0\0`到`PendingFileRenameOperations`，而如果是执行移动操作则是把`File\0OtherFile\0`写入`PendingFileRenameOperations`
那么如何用`MoveFileEx`实现自删除呢，首先提两个概念，`AUTOCHK`和页面文件。
这里说下何为`AUTOCHK`：
在msdn的官方解释中，`AUTOCHK`的含义是：`Runs when the computer is started and prior to
Windows Server starting to verify the logical integrity of a file system.`
也就是说`AUTOCHK`其实是用来验证文件系统的逻辑完整性的，那么再说说页面文件：
>
> 页面文件，是指操作系统反映构建并使用[虚拟内存](https://baike.baidu.com/item/%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/101812)的硬盘空间大小而创建的文件。要整理页面文件，首先将页面文件从原先所在的[驱动器](https://baike.baidu.com/item/%E9%A9%B1%E5%8A%A8%E5%99%A8/310105)移动到其他[驱动器](https://baike.baidu.com/item/%E9%A9%B1%E5%8A%A8%E5%99%A8)，然后对原来驱动器进行整理，最后再将页面文件移回到原驱动器上，此时页面文件就会存放在连续的磁盘空间中了。具体来说，在
> [windows](https://baike.baidu.com/item/windows)操作系统下（Windows
> 2000/XP）[pagefile.sys](https://baike.baidu.com/item/pagefile.sys)这个文件，它就是系统页面文件（也就是大家熟知的虚拟内存文件），它的大小取决于打开的程序多少和你原先设置页面文件的最小最大值，是不断变化的，有时可能只有几十MB，有时则达到几百甚至上千MB。
那么这两个概念有什么关联呢，有一个时间节点就是，用户在启动计算机时，执行了`AUTOCHK`，但是还没有创建页面文件，在这个时间节点下，可以说话用户是还没有完全进入操作系统的，那么这时候就可以删除在正常情况下删除不了的文件，我的理解是在没有创建页面文件的时候，其实操作系统是还没有启动完全的，所以这时候可执行文件其实是没有完全加载好的。
那么我们知道了原理，这里实现一下，其实代码相比于批处理方式少了很多，但是涉及到的知识点却是一点都不少。我们在前面发现在`PendingFileRenameOperations`键的数值数据中，路径前面都有`\??\`，但是这里并不是加上`\??\`，在`MoveFileEx`的函数定义中删除文件的路径开头需要加上`\\?\`
所以我们在缓冲区前面先加上`\\?\`
    char szTemp[MAX_PATH] = "\\\\?\\";
因为我们要把路径写在缓冲区后面，就要使用到`lstrcat`
    ::lstrcat(szTemp, szFileName);
然后调用`MoveFileEx`实现自删除
    BOOL bRet = ::MoveFileEx(szTemp, NULL, MOVEFILE_DELAY_UNTIL_REBOOT);
完整代码如下
    BOOL MoveDel(char* szFileName)
    {
        char szTemp[MAX_PATH] = "\\\\?\\";
        ::lstrcatA(szTemp, szFileName);
        BOOL bRet = ::MoveFileExA(szTemp, NULL, MOVEFILE_DELAY_UNTIL_REBOOT);
        if (bRet == NULL)
        {
            printf("[!] MoveFileExA failed, error is : %d\n\n", GetLastError());
            return FALSE;
        }
        else
        {
            printf("[*] MoveFileExA successfully!\n\n");
        }
        return TRUE;
    }
这里我们直接执行一下，发现报错5，对应`GetLastError`的报错属性是权限不够，这里我们之前提到过需要修改注册表，所以直接用user权限启动是拒绝访问的
这里我们改用administrator启动程序，可以看到已经执行成功
到`PendingFileRenameOperations`键值下查看已经添加成功，这里重启之后就会进行删除
## 后记
我们对两种自删除的方式进行了实现，这个地方我们可以发现，`MoveFileEx`方式是需要重启电脑后才能够进行删除，而批处理则可以不用重启就可以删除，这里可以根据具体用途才用具体方法进行实现。