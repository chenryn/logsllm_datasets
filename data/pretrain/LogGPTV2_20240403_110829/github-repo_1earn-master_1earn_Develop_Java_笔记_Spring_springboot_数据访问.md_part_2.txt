```
spring.jpa.properties.hibernate.hbm2ddl.auto 是 hibernate 的配置属性，其主要作用是：自动创建、更新、验证数据库表结构。该参数的几种配置如下：
- create：每次加载 hibernate 时都会删除上一次的生成的表，然后根据你的 model 类再重新来生成新表，哪怕两次没有任何改变也要这样执行，这就是导致数据库表数据丢失的一个重要原因。
- create-drop：每次加载 hibernate 时根据 model 类生成表，但是 sessionFactory 一关闭, 表就自动删除。
- update：最常用的属性，第一次加载 hibernate 时根据 model 类会自动建立起表的结构（前提是先建立好数据库），以后加载 hibernate 时根据 model 类自动更新表结构，即使表结构改变了但表中的行仍然存在不会删除以前的行。要注意的是当部署到服务器后，表结构是不会被马上建立起来的，是要等应用第一次运行起来后才会。
- validate：每次加载 hibernate 时，验证创建数据库表结构，只会和数据库中的表进行比较，不会创建新表，但是会插入新值。
**创建实体**
创建一个 User 实体，包含 id（主键）、name（姓名）、age（年龄）属性，通过 ORM 框架其会被映射到数据库表中，由于配置了 hibernate.hbm2ddl.auto，在应用启动的时候框架会自动去数据库中创建对应的表。
```java
@Entity
@Data
@NoArgsConstructor
public class User {
    @Id
    @GeneratedValue
    private Long id;
    private String name;
    private Integer age;
    public User(String name, Integer age) {
        this.name = name;
        this.age = age;
    }
}
```
- @Entity 注解标识了 User 类是一个持久化的实体
- @Data 和 @NoArgsConstructor 是 Lombok 中的注解。用来自动生成各参数的 Set、Get 函数以及不带参数的构造函数。
- @Id 和 @GeneratedValue 用来标识 User 对应对应数据库表中的主键
**创建数据访问接口**
下面针对 User 实体创建对应的 Repository 接口实现对该实体的数据访问，如下代码：
```java
public interface UserRepository extends JpaRepository {
    User findByName(String name);
    User findByNameAndAge(String name, Integer age);
    @Query("from User u where u.name=:name")
    User findUser(@Param("name") String name);
}
```
在 Spring Data JPA 中，只需要编写类似上面这样的接口就可实现数据访问。不再像我们以往编写了接口时候还需要自己编写接口实现类，直接减少了我们的文件清单。
下面对上面的 UserRepository 做一些解释，该接口继承自 JpaRepository，通过查看 JpaRepository 接口的 API 文档，可以看到该接口本身已经实现了创建（save）、更新（save）、删除（delete）、查询（findAll、findOne）等基本操作的函数，因此对于这些基础操作的数据访问就不需要开发者再自己定义。
在我们实际开发中，JpaRepository 接口定义的接口往往还不够或者性能不够优化，我们需要进一步实现更复杂一些的查询或操作。
在上例中，我们可以看到下面两个函数：
- User findByName(String name)
- User findByNameAndAge(String name, Integer age)
它们分别实现了按 name 查询 User 实体和按 name 和 age 查询 User 实体，可以看到我们这里没有任何类 SQL 语句就完成了两个条件查询方法。这就是 Spring-data-jpa 的一大特性：通过解析方法名创建查询。
除了通过解析方法名来创建查询外，它也提供通过使用 @Query 注解来创建查询，您只需要编写 JPQL 语句，并通过类似 “:name” 来映射 @Param 指定的参数，就像例子中的第三个 findUser 函数一样。
**单元测试**
在完成了上面的数据访问接口之后，按照惯例就是编写对应的单元测试来验证编写的内容是否正确。这里就不多做介绍，主要通过数据操作和查询来反复验证操作的正确性。
```java
@RunWith(SpringRunner.class)
@SpringBootTest
public class ApplicationTests {
    @Autowired
    private UserRepository userRepository;
    @Test
    public void test() throws Exception {
        // 创建10条记录
        userRepository.save(new User("AAA", 10));
        userRepository.save(new User("BBB", 20));
        userRepository.save(new User("CCC", 30));
        userRepository.save(new User("DDD", 40));
        userRepository.save(new User("EEE", 50));
        userRepository.save(new User("FFF", 60));
        userRepository.save(new User("GGG", 70));
        userRepository.save(new User("HHH", 80));
        userRepository.save(new User("III", 90));
        userRepository.save(new User("JJJ", 100));
        // 测试findAll, 查询所有记录
        Assert.assertEquals(10, userRepository.findAll().size());
        // 测试findByName, 查询姓名为FFF的User
        Assert.assertEquals(60, userRepository.findByName("FFF").getAge().longValue());
        // 测试findUser, 查询姓名为FFF的User
        Assert.assertEquals(60, userRepository.findUser("FFF").getAge().longValue());
        // 测试findByNameAndAge, 查询姓名为FFF并且年龄为60的User
        Assert.assertEquals("FFF", userRepository.findByNameAndAge("FFF", 60).getName());
        // 测试删除姓名为AAA的User
        userRepository.delete(userRepository.findByName("AAA"));
        // 测试findAll, 查询所有记录, 验证上面的删除是否成功
        Assert.assertEquals(9, userRepository.findAll().size());
    }
}
```
---
## MyBatis
新建 Spring Boot 项目，在 pom.xml 中引入 MyBatis 的 Starter 以及 MySQL Connector 依赖，具体如下：
```xml
    org.mybatis.spring.boot
    mybatis-spring-boot-starter
    2.1.1
    mysql
    mysql-connector-java
```
关于 mybatis-spring-boot-starter 的版本需要注意：
- 2.1.x 版本适用于：MyBatis 3.5+、Java 8+、Spring Boot 2.1+
- 2.0.x 版本适用于：MyBatis 3.5+、Java 8+、Spring Boot 2.0/2.1
- 1.3.x 版本适用于：MyBatis 3.4+、Java 6+、Spring Boot 1.5
其中，目前还在维护的是 2.1.x 版本和 1.3.x 版本。
同之前介绍的使用 jdbc 模块和 jpa 模块连接数据库一样，在 application.properties 中配置 mysql 的连接配置
```conf
spring.datasource.url=jdbc:mysql://localhost:3306/test
spring.datasource.username=root
spring.datasource.password=
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
```
也可以不用默认数据源，使用 Druid 作为数据库连接池
Mysql 中创建一张用来测试的表，比如：User 表，其中包含 id(BIGINT)、age(INT)、name(VARCHAR) 字段。
```sql
CREATE TABLE `USER` (
  `id` bigint NOT NULL AUTO_INCREMENT,
  `name` varchar(100) COLLATE utf8mb4_general_ci DEFAULT NULL,
  `age` int DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci
```
创建 User 表的映射对象 User：
```java
@Data
@NoArgsConstructor
public class User {
    private Long id;
    private String name;
    private Integer age;
    public User(String name, Integer age) {
        this.name = name;
        this.age = age;
    }
}
```
创建 User 表的操作接口：UserMapper。在接口中定义两个数据操作，一个插入，一个查询，用于后续单元测试验证。
```java
@Mapper
public interface UserMapper {
    @Select("SELECT * FROM USER WHERE NAME = #{name}")
    User findByName(@Param("name") String name);
    @Insert("INSERT INTO USER(NAME, AGE) VALUES(#{name}, #{age})")
    int insert(@Param("name") String name, @Param("age") Integer age);
}
```
创建 Spring Boot 主类
```java
@SpringBootApplication
public class Chapter35Application {
	public static void main(String[] args) {
		SpringApplication.run(Chapter35Application.class, args);
	}
}
```
创建单元测试
插入一条 name=AAA，age=20 的记录，然后根据 name=AAA 查询，并判断 age 是否为 20
测试结束回滚数据，保证测试单元每次运行的数据环境独立
```java
@Slf4j
@RunWith(SpringRunner.class)
@SpringBootTest
public class Chapter35ApplicationTests {
    @Autowired
    private UserMapper userMapper;
    @Test
    @Rollback
    public void test() throws Exception {
        userMapper.insert("AAA", 20);
        User u = userMapper.findByName("AAA");
        Assert.assertEquals(20, u.getAge().intValue());
    }
}
```
**使用@Param**
在之前的整合示例中我们已经使用了这种最简单的传参方式，如下：
```java
@Insert("INSERT INTO USER(NAME, AGE) VALUES(#{name}, #{age})")
int insert(@Param("name") String name, @Param("age") Integer age);
```
这种方式很好理解，`@Param` 中定义的 `name` 对应了 SQL 中的 `#{name}`，`age` 对应了 SQL 中的 `#{age}`。
**使用Map**
如下代码，通过 `Map` 对象来作为传递参数的容器：
```java
@Insert("INSERT INTO USER(NAME, AGE) VALUES(#{name,jdbcType=VARCHAR}, #{age,jdbcType=INTEGER})")
int insertByMap(Map map);
```
对于 Insert 语句中需要的参数，我们只需要在 map 中填入同名的内容即可，具体如下面代码所示：
```java
Map map = new HashMap<>();
map.put("name", "CCC");
map.put("age", 40);
userMapper.insertByMap(map);
```
**使用对象**
除了 Map 对象，我们也可直接使用普通的 Java 对象来作为查询条件的传参，比如我们可以直接使用 User 对象:
```java
@Insert("INSERT INTO USER(NAME, AGE) VALUES(#{name}, #{age})")
int insertByUser(User user);
```
这样语句中的 `#{name}`、`#{age}` 就分别对应了 User 对象中的 name 和 age 属性。
**增删改查**
MyBatis 针对不同的数据库操作分别提供了不同的注解来进行配置，在之前的示例中演示了 `@Insert`，下面针对 User 表做一组最基本的增删改查作为示例：
```java
public interface UserMapper {
    @Select("SELECT * FROM USER WHERE name = #{name}")
    User findByName(@Param("name") String name);
    @Insert("INSERT INTO USER(name, age) VALUES(#{name}, #{age})")
    int insert(@Param("name") String name, @Param("age") Integer age);
    @Update("UPDATE USER SET age=#{age} WHERE name=#{name}")
    void update(User user);
    @Delete("DELETE FROM USER WHERE id =#{id}")
    void delete(Long id);
}
```
在完成了一套增删改查后，不妨我们试试下面的单元测试来验证上面操作的正确性：
```java
@Transactional
@RunWith(SpringRunner.class)
@SpringBootTest
public class ApplicationTests {
	@Autowired
	private UserMapper userMapper;
	@Test
	@Rollback
	public void testUserMapper() throws Exception {
		// insert一条数据，并select出来验证
		userMapper.insert("AAA", 20);
		User u = userMapper.findByName("AAA");
		Assert.assertEquals(20, u.getAge().intValue());
		// update一条数据，并select出来验证
		u.setAge(30);
		userMapper.update(u);
		u = userMapper.findByName("AAA");
		Assert.assertEquals(30, u.getAge().intValue());
		// 删除这条数据，并select验证
		userMapper.delete(u.getId());
		u = userMapper.findByName("AAA");
		Assert.assertEquals(null, u);
	}
}
```
**返回结果绑定**
对于增、删、改操作相对变化较小。而对于 “查” 操作，我们往往需要进行多表关联，汇总计算等操作，那么对于查询的结果往往就不再是简单的实体对象了，往往需要返回一个与数据库实体不同的包装类，那么对于这类情况，就可以通过 `@Results` 和 `@Result` 注解来进行绑定，具体如下：
```java
@Results({
    @Result(property = "name", column = "name"),
    @Result(property = "age", column = "age")
})
@Select("SELECT name, age FROM user")
List findAll();
```
在上面代码中，`@Result` 中的 `property` 属性对应 User 对象中的成员名，column 对应 SELECT 出的字段名。在该配置中故意没有查出 id 属性，只对 User 对应中的 name 和 age 对象做了映射配置，这样可以通过下面的单元测试来验证查出的 id 为 `null`，而其他属性不为 `null`：
```java
@Test
@Rollback
public void testUserMapper() throws Exception {
	List userList = userMapper.findAll();
	for(User user : userList) {
		Assert.assertEquals(null, user.getId());
		Assert.assertNotEquals(null, user.getName());
	}
}
```
---
## 使用MyBatis的XML配置方式
在应用主类中增加mapper的扫描包配置
```java
@MapperScan("com.didispace.chapter36.mapper")
@SpringBootApplication
public class Chapter36Application {
	public static void main(String[] args) {
		SpringApplication.run(Chapter36Application.class, args);
	}
}
```
在第一步中指定的Mapper包下创建User表的Mapper定义
```java
public interface UserMapper {
    User findByName(@Param("name") String name);
    int insert(@Param("name") String name, @Param("age") Integer age);
}
```
在配置文件中通过mybatis.mapper-locations参数指定xml配置的位置：
```conf
mybatis.mapper-locations=classpath:mapper/*.xml
```
在第三步中指定的xml配置目录下创建User表的mapper配置：
```xml
        SELECT * FROM USER WHERE NAME = #{name}