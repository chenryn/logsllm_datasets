      unsigned (*mmap_capabilities)(struct file *);
    #endif
      ssize_t (*copy_file_range)(struct file *, loff_t, struct file *,
          loff_t, size_t, unsigned int);
      loff_t (*remap_file_range)(struct file *file_in, loff_t pos_in,
               struct file *file_out, loff_t pos_out,
               loff_t len, unsigned int remap_flags);
      int (*fadvise)(struct file *, loff_t, loff_t, int);
    } __randomize_layout;
但在这道题中我们只会用到其中的一小部分，即 `/baby(open|release|read|write|ioctl)/`。
> struct file_operations 中的 owner 指针是必须指向当前内核模块的指针，可以使用宏定义 `THIS_MODULE`
> 来获取该指针。
当 cdev 结构体初始化完成后，最后的一步就是使用 `cdev_add` 告诉内核该设备的设备号。
    cdev_add(&cdev_0, babydev_no, 1);
其中，`cdev_add` 函数声明如下所示：
    /**
     * cdev_add() - add a char device to the system
     * @p: the cdev structure for the device
     * @dev: the first device number for which this device is responsible
     * @count: the number of consecutive minor numbers corresponding to this
     *         device
     *
     * cdev_add() adds the device represented by @p to the system, making it
     * live immediately.  A negative error code is returned on failure.
     */
    int cdev_add(struct cdev *p, dev_t dev, unsigned count)
需要注意的是，一旦 `cdev_add` 函数执行完成，则当前 cdev 设备 **立即处于活动状态** ，其 **操作可以立即被内核调用**
。因此在编写驱动程序时，务必保证在驱动程序完全准备好处理设备上的操作之后，最后再来调用 `cdev_add`。
**1.4) 将设备注册进 sysfs**
当驱动模块已经将 cdev 注册进内核后，该函数将会执行以下代码，来将当前设备的设备结点注册进 sysfs 中。
    babydev_class = class_create(THIS_MODULE, "babydev");
    device_create(babydev_class, 0, babydev_no, 0, "babydev");
其中，函数 `class_create` 和 `device_create` 的声明如下：
    /* This is a #define to keep the compiler from merging different
     * instances of the __key variable */
    #define class_create(owner, name)    \
    ({            \
      static struct lock_class_key __key;  \
      __class_create(owner, name, &__key);  \
    })
    /**
     * class_create - create a struct class structure
     * @owner: pointer to the module that is to "own" this struct class
     * @name: pointer to a string for the name of this class.
     * @key: the lock_class_key for this class; used by mutex lock debugging
     *
     * This is used to create a struct class pointer that can then be used
     * in calls to device_create().
     *
     * Returns &struct class pointer on success, or ERR_PTR() on error.
     *
     * Note, the pointer created here is to be destroyed when finished by
     * making a call to class_destroy().
     */
    struct class *__class_create(struct module *owner, const char *name,
               struct lock_class_key *key)
    /**
     * device_create - creates a device and registers it with sysfs
     * @class: pointer to the struct class that this device should be registered to
     * @parent: pointer to the parent struct device of this new device, if any
     * @devt: the dev_t for the char device to be added
     * @drvdata: the data to be added to the device for callbacks
     * @fmt: string for the device's name
     *
     * This function can be used by char device classes.  A struct device
     * will be created in sysfs, registered to the specified class.
     *
     * A "dev" file will be created, showing the dev_t for the device, if
     * the dev_t is not 0,0.
     * If a pointer to a parent struct device is passed in, the newly created
     * struct device will be a child of that device in sysfs.
     * The pointer to the struct device will be returned from the call.
     * Any further sysfs files that might be required can be created using this
     * pointer.
     *
     * Returns &struct device pointer on success, or ERR_PTR() on error.
     *
     * Note: the struct class passed to this function must have previously
     * been created with a call to class_create().
     */
    struct device *device_create(struct class *class, struct device *parent,
               dev_t devt, void *drvdata, const char *fmt, ...)
初始时，init 函数通过调用 `class_create` 函数创建一个 `class` 类型的 **类** ，创建好后的 **类**
存放于sysfs下面，可以在 `/sys/class`中找到。
之后函数调用 `device_create` 函数，动态建立 **逻辑设备** ，对新逻辑设备进行初始化；同时还将其与第一个参数所对应的 **逻辑类**
相关联，并将此逻辑设备加到linux内核系统的设备驱动程序模型中。这样，函数会自动在 `/sys/devices/virtual`
目录下创建新的逻辑设备目录，并在 `/dev` 目录下创建与 **逻辑类** 对应的设备文件。
最终实现效果就是，我们便可以在 `/dev` 中看到该设备。
**1.5 init 函数小结**
综上，`babydriver_init` 函数主要做了几件事：
  1. 向内核申请一个空闲的设备号
  2. 声明一个 cdev 结构体，初始化并绑定设备号
  3. 创建新的 struct class，并将该设备号所对应的设备注册进 sysfs
**2) babydriver_exit**
理解完 init 函数后，理解 exit 函数的逻辑就相当的简单——把该释放的数据结构全部释放。
    void __cdecl babydriver_exit()
    {
      device_destroy(babydev_class, babydev_no);
      class_destroy(babydev_class);
      cdev_del(&cdev_0);
      unregister_chrdev_region(babydev_no, 1LL);
    }
**3) babyopen**
该函数代码如下：
babyopen 函数在内核中创建了一个 `babydev_struct` 的结构体，其中包含了一个 `device_buf` 指针以及一个
`device_buf_len`成员变量。
需要注意的是，`kmem_cache_alloc_trace` 函数分配内存的逻辑与 `kmalloc`类似，笔者怀疑反汇编出来的代码应该是调用
`kmalloc` 函数优化内敛后的效果：
    /**
     * kmalloc - allocate memory
     * @size: how many bytes of memory are required.
     * @flags: the type of memory to allocate.
     *
     * kmalloc is the normal method of allocating memory
     * for objects smaller than page size in the kernel.
     *
     * The allocated object address is aligned to at least ARCH_KMALLOC_MINALIGN
     * bytes. For @size of power of two bytes, the alignment is also guaranteed
     * to be at least to the size.
     *
     * The @flags argument may be one of the GFP flags defined at
     * include/linux/gfp.h and described at
     * :ref:`Documentation/core-api/mm-api.rst `
     *
     * The recommended usage of the @flags is described at
     * :ref:`Documentation/core-api/memory-allocation.rst `
     *
     * Below is a brief outline of the most useful GFP flags
     *
     * %GFP_KERNEL
     *  Allocate normal kernel ram. May sleep.
     *
     * %GFP_NOWAIT
     *  Allocation will not sleep.
     *
     * %GFP_ATOMIC
     *  Allocation will not sleep.  May use emergency pools.
     *
     * %GFP_HIGHUSER
     *  Allocate memory from high memory on behalf of user.
     *
     * Also it is possible to set different flags by OR'ing
     * in one or more of the following additional @flags:
     *
     * %__GFP_HIGH
     *  This allocation has high priority and may use emergency pools.
     *
     * %__GFP_NOFAIL
     *  Indicate that this allocation is in no way allowed to fail
     *  (think twice before using).
     *
     * %__GFP_NORETRY
     *  If memory is not immediately available,
     *  then give up at once.
     *
     * %__GFP_NOWARN
     *  If allocation fails, don't issue any warnings.
     *
     * %__GFP_RETRY_MAYFAIL
     *  Try really hard to succeed the allocation but fail
     *  eventually.
     */
    static __always_inline void *kmalloc(size_t size, gfp_t flags)
    {
      if (__builtin_constant_p(size)) {
    #ifndef CONFIG_SLOB
        unsigned int index;
    #endif
        if (size > KMALLOC_MAX_CACHE_SIZE)
          return kmalloc_large(size, flags);
    #ifndef CONFIG_SLOB
        index = kmalloc_index(size);
        if (!index)
          return ZERO_SIZE_PTR;
        return kmem_cache_alloc_trace(
            kmalloc_caches[kmalloc_type(flags)][index],
            flags, size);
    #endif
      }
      return __kmalloc(size, flags);
    }
**4) babyrelease**
babyrelease 函数的逻辑较为简单，这里只是简单的将 babydev_struct.device_buf 释放掉。
但这里需要注意的是，尽管这里释放了指针所指向的内核空间，但 **在释放完成后，该函数既没有对`device_buf`指针置空，也没有设置
`device_buf_len` 为0** 。
**5) babyread**
babyread 函数的 IDA 反汇编效果存在错误，这是笔者根据汇编代码修正后的效果：
    ssize_t __fastcall babyread(file *filp, char *buffer, size_t length, loff_t *offset)
    {
      _fentry__(filp, buffer);
      if ( !babydev_struct.device_buf )
        return -1LL;
      result = -2LL;
      if ( babydev_struct.device_buf_len > length )
      {
        copy_to_user(buffer, babydev_struct.device_buf, length);
        result = length;
      }
      return result;
    }
babyread 函数将在判断完当前 device_buf 是否为空之后，将 device_buf 上的内存拷贝至用户空间的 buffer 内存。
**6) babywrite**
babywrite 功能与 babyread 类似，将用户空间的 buffer 内存上的数据拷贝进内核空间的 device_buf
上，此处不再赘述。该函数修正后的反编译代码如下：
    ssize_t __fastcall babywrite(file *filp, const char *buffer, size_t length, loff_t *offset)
    {
      _fentry__(filp, buffer);
      if ( !babydev_struct.device_buf )