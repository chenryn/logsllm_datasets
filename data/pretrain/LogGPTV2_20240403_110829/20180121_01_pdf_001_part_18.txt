### 设置和配置性能分析工具

为了有效地进行性能分析，首先需要设置一些关键参数。以下是一些重要的设置步骤：

1. **启用详细的日志输出**：
   ```sql
   SET client_min_messages = debug5;
   SET log_checkpoints = on;
   SET log_error_verbosity = verbose;
   SET log_lock_waits = on;
   SET log_replication_commands = off;
   SET log_temp_files = 0;
   SET track_activities = on;
   SET track_counts = on;
   SET track_io_timing = on;
   SET track_functions = 'all';
   SET trace_sort = on;
   ```

2. **禁用不必要的日志记录**：
   ```sql
   SET log_statement_stats = off;
   SET log_parser_stats = on;
   SET log_planner_stats = on;
   SET log_executor_stats = on;
   SET log_autovacuum_min_duration = 0;
   SET deadlock_timeout = '1s';
   SET debug_print_parse = off;
   SET debug_print_rewritten = off;
   SET debug_print_plan = off;
   SET debug_pretty_print = on;
   ```

3. **使用 `EXPLAIN` 进行查询分析**：
   ```sql
   EXPLAIN (ANALYZE, VERBOSE, TIMING, COSTS, BUFFERS) 
   SELECT count(*), relkind FROM pg_class GROUP BY relkind ORDER BY count(*) DESC LIMIT 1;
   ```

### 性能分析利器

1. **索引推荐**：
   - [digoal/blog](https://github.com/digoal/blog/blob/master/201801/20180111_02.md)
   - [digoal/blog](https://github.com/digoal/blog/blob/master/201801/20180113_02.md)

2. **数据库优化**：
   - 擒贼先擒王（TOP SQL）
   - SQL执行计划分析、优化
   - 数据库内核代码层瓶颈分析
   - 慢SQL定位、优化
   - 数据库活动信息跟踪参数
   - 锁等待问题定位
   - 等待事件透视
   - 全面健康报告
   - 9种索引接口的适应场景与选择
   - 复合索引顺序
   - 非驱动列扫描优化
   - 优化器开关介绍（因子、开关）
   - HINT的使用

3. **性能分析工具**：
   - **perf**:
     - [digoal/blog](https://github.com/digoal/blog/blob/master/201611/20161129_01.md)
     - 示例：分区过多导致的性能问题
       - [digoal/blog](https://github.com/digoal/blog/blob/master/201801/20180124_01.md)
   - **Oprofile**:
     - [digoal/blog](https://github.com/digoal/blog/blob/master/201505/20150509_01.md)
     - [digoal/blog](https://github.com/digoal/blog/blob/master/201601/20160125_01.md)
   - **dtrace/stap**:
     - [digoal/blog](https://github.com/digoal/blog/blob/master/201310/20131017_01.md)
     - [PostgreSQL官方文档](https://www.postgresql.org/docs/current/static/dynamic-trace.html)
   - **strace/pstack**:
     - strace
     - pstack
   - **plprofiler**:
     - [plprofiler](https://bitbucket.org/openscg/plprofiler)

### 当前慢SQL

1. **运行中慢SQL**：
   ```sql
   SELECT * FROM pg_stat_activity WHERE now() - query_start > interval '?s';
   ```

2. **长运行中事务**：
   ```sql
   SELECT * FROM pg_stat_activity WHERE state = 'active' AND now() - xact_start > interval '?s';
   ```

3. **长空闲事务**：
   ```sql
   SELECT * FROM pg_stat_activity WHERE state = 'idle in transaction' AND now() - xact_start > interval '?s';
   ```

4. **长2PC事务**：
   ```sql
   SELECT * FROM pg_prepared_xacts WHERE now() - prepared > interval '?s';
   ```

5. **长事务的危害**：
   - 膨胀
   - VACUUM 无用功

### 杀会话和查询

1. **杀会话**：
   ```sql
   SELECT pg_terminate_backend(pid);
   ```

2. **杀某个会话**：
   ```sql
   SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE pg_backend_pid() <> pid;
   ```

3. **杀所有会话**：
   ```sql
   SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE usename = ? AND pid <> pg_backend_pid();
   ```

4. **杀查询**：
   ```sql
   SELECT pg_cancel_backend($pid);
   ```

### 历史慢SQL

- **AWR**:
  - [digoal/blog](https://github.com/digoal/blog/blob/master/201604/20160421_01.md)

### 跟踪慢SQL

- **auto_explain**:
  - [PostgreSQL官方文档](https://www.postgresql.org/docs/devel/static/auto-explain.html)
  - 详细执行计划：
    - plan
    - node time
    - buffers, hints
    - filter

### 跟踪活动日志

1. **设置日志参数**：
   ```sql
   SET log_autovacuum_min_duration = 0;
   SET log_checkpoints = on;
   SET log_lock_waits = on;
   SET lock_timeout = '1s';
   SET track_io_timing = on;
   SET track_counts = on;
   ```

### 查看当前锁等待

- [digoal/blog](https://github.com/digoal/blog/blob/master/201705/20170521_01.md)
- [digoal/blog](https://github.com/digoal/blog/blob/master/201806/20180622_02.md)
- Greenplum(HDB PG) segment级锁问题排查
  - [digoal/blog](https://github.com/digoal/blog/blob/master/201806/20180620_01.md)
  - [digoal/blog](https://github.com/digoal/blog/blob/master/201708/20170822_01.md)

### 防止雪崩

- **statement_timeout**:
  - 语句超时，防止雪崩
- **lock_timeout**:
  - 锁超时
- **deadlock_timeout**:
  - 死锁超时
- **idle_in_transaction_session_timeout**:
  - 空闲中事务超时

### DDL操作建议

- 锁等待机制介绍
  - [digoal/blog](https://github.com/digoal/blog/blob/master/201705/20170521_01.md)
- DDL、大锁建议
  ```sql
  BEGIN;
  SET lock_timeout = 'ns';
  -- DDL操作
  END;
  ```

### 表切换

- [digoal/blog](https://github.com/digoal/blog/blob/master/201807/20180725_04.md)

### 当前等待事件透视

- [PostgreSQL官方文档](https://www.postgresql.org/docs/devel/static/monitoring-stats.html#MONITORING-STATS-VIEWS)

### perf insight

- [digoal/blog](https://github.com/digoal/blog/blob/master/201901/20190125_02.md)

### AWR

- **PostgreSQL**:
  - [digoal/blog](https://github.com/digoal/blog/blob/master/201611/20161123_01.md)
- **PPAS(类似 ORACLE statspack)**:
  - [digoal/blog](https://github.com/digoal/blog/blob/master/201606/20160628_01.md)
- **Cloud DBA**:
  - 已上线

### IO和CPU飙升分析与优化

- **OS**:
  - cgroup 检查thrott
  - top find PID
  - iotop find PID
  - iostat，是否到达瓶颈、IOHANG问题
  - dmesg
- **DB**:
  - pid -> find pg_stat_activity
  - freeze 风暴问题
    - [digoal/blog](https://github.com/digoal/blog/blob/master/201804/20180411_01.md)
    - [digoal/blog](https://github.com/digoal/blog/blob/master/201801/20180117_03.md)
    - [digoal/blog](https://github.com/digoal/blog/blob/master/201606/20160612_01.md)
    - [digoal/blog](https://github.com/digoal/blog/blob/master/201605/20160520_01.md)
  - autovacuum_naptime, 长事务, 长2PC, long sql, hot_standby_feedback(备库长事务, 长2PC, long sql), vacuum_defer_cleanup_age
    - [digoal/blog](https://github.com/digoal/blog/blob/master/201704/20170410_03.md)
    - [digoal/blog](https://github.com/digoal/blog/blob/master/201505/20150503_01.md)

### 索引接口的选择

- **BTree**:
  - =, >, >=, <, <=, IN, ANY, ALL
  - 普通类型(通过btree_gist 插件支持)：与B-Tree类似，增加空间类型类似操作符
  - 数组类型(通过intarray 插件支持)：与GIN类似
  - 多列：任意列组合查询
- **SPGiST**:
  - 平面几何类型：与GiST类似

- **自动选择索引接口**:
  - [digoal/blog](https://github.com/digoal/blog/blob/master/201706/20170617_01.md)

- **查看可用的索引接口**:
  ```sql
  SELECT * FROM pg_am;
  ```

- **创建索引**:
  - [PostgreSQL官方文档](https://www.postgresql.org/docs/devel/static/sql-createindex.html)
  - [digoal/blog](https://github.com/digoal/blog/blob/master/201706/20170627_01.md)