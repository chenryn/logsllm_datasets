#BHUSA @BlackHatEvents

### Devils Are in the File Descriptors: It Is Time To Catch Them All
**Le Wu from Baidu Security**  
**Le Wu (@NVamous)**

- **Focus**: Android/Linux bug hunting and exploitation
- **Achievements**: Identified over 200 vulnerabilities in the last two years
- **Experience**: Speaker at Black Hat Asia 2022

---

## Outline
1. **Background**
2. **Diving into Issues in the fd Export Operations**
3. **Diving into Issues in the fd Import Operations**
4. **Conclusion & Future Work**

---

## Introduction to File Descriptors
A file descriptor (fd) is an integer used by a process to access a file or I/O resource. In the context of a process, each fd corresponds to a file object in the kernel.

### Process A
- **User Space**:
  - `fd:0` → `file object0`
  - `fd:1` → `file object1`
  - ...
  - `fd:n` → `file object_n`
- **Kernel Space**:
  - `fd_array`:
    - `[0]` → `file object0`
    - `[1]` → `file object1`
    - ...
    - `[n]` → `file object_n`

### Operations on File Descriptors
- `read(fd, ...)`, `write(fd, ...)`, `ioctl(fd, ...)`, `mmap(fd, ...)`, `close(fd)`, ...

---

## Background
### User Space vs. Kernel Space
- **User Space**: Where processes run.
- **Kernel Space**: Where the operating system kernel runs and manages resources.

### File Descriptor Operations
- **Export Operation**: The process of creating a new fd and associating it with a file object.
- **Import Operation**: The process of using an existing fd to access a file object.

---

## Diving into Issues in the fd Export Operations

### Scenario of fd Export Operation
1. **Get an unused fd**.
2. **Assign the file object to the fd in the fd_array**.
3. **Pass the fd to user space**.

### Example Code
```c
SYSCALL_DEFINE3(open, const char __user *, filename, int, flags, umode_t, mode)
{
    …
    return do_sys_open(AT_FDCWD, filename, flags, mode);
}

static long do_sys_openat2(int dfd, const char __user *filename,
                           struct open_how *how)
{
    …
    fd = get_unused_fd_flags(how->flags);
    if (fd >= 0) {
        struct file *f = do_filp_open(dfd, tmp, &op);
        …
        fd_install(fd, f);
        …
    }
    …
    return fd;
}
```

### Race Condition in fd Export
- **Race Condition 1**: Between operations on the file object and operations on the fd.
- **Race Condition 2**: Between operations on the fd in different threads.

### UAF Caused by Race Condition
- **Predictable fd**: Fds are assigned in ascending order and reused after being closed.
- **Time Window**: After step 2, the fd can be used, but its value is only known after step 3.

### Potential UAF Scenario
- **Thread A**:
  1. Get an unused fd.
  2. Assign the file object to the fd.
  3. Return to user space.
- **Thread B**:
  - Perform operations on the file object or related objects.

### Bug Pattern
- **Search for APIs performing "step 2"**:
  - `fd_install(fd, file)`
  - `anon_inode_getfd()`
  - `dma_buf_fd()`
  - `sync_fence_install()`
  - `ion_share_dma_buf_fd()`
  - ...

### Example Code
```c
From Vendor Q:
static int get_fd(uint32_t handle, int64_t *fd)
{
    int unused_fd = -1, ret = -1;
    struct file *f = NULL;
    struct context *cxt = NULL;
    …
    cxt = kzalloc(sizeof(*cxt), GFP_KERNEL);
    …
    unused_fd = get_unused_fd_flags(O_RDWR);
    …
    f = anon_inode_getfile(INVOKE_FILE, &invoke_fops, cxt, O_RDWR);
    …
    *fd = unused_fd;
    fd_install(*fd, f);
    ((struct context *)(f->private_data))->handle = handle;
    return 0;
    …
}

From Vendor M:
int ged_ge_alloc(int region_num, uint32_t *region_sizes)
{
    unsigned long flags;
    int i;
    struct GEEntry *entry =
        (struct GEEntry *)kmem_cache_zalloc(gPoolCache, …);
    …
    entry->alloc_fd = get_unused_fd_flags(O_CLOEXEC);
    …
    entry->file = anon_inode_getfile("gralloc_extra",
                                     &GEEntry_fops, entry, 0);
    …
    fd_install(entry->alloc_fd, entry->file);
    return entry->alloc_fd;
    …
}
```

### Found Vulnerabilities
- **Vendor M**:
  - **CVE-2022-21771**: `fd_install()` in GPU-related driver
  - **CVE-2022-21773**: `dma_buf_fd()` in dma-buf related
- **Vendor Q**:
  - **CVE-2022-33225**: `fd_install()`
- **Vendor S**:
  - **Issue#1**: `fd_install()` in sync_file related
  - **Issue#2**: `dma_buf_fd()` in dma-buf related
- **Linux Mainstream**:
  - **Issue#1**: `anon_inode_getfd()` in AMD GPU driver
  - **Issue#2**: `dma_buf_fd()` in dma-buf related

### CVE-2022-28349: Nday in ARM Mali GPU Driver
- **Affected Versions**:
  - Midgard GPU Kernel Driver: r28p0 – r29p0
  - Bifrost GPU Kernel Driver: r17p0 – r23p0
  - Valhall GPU Kernel Driver: r19p0 – r23p0

```c
int kbase_vinstr_hwcnt_reader_setup(
    struct kbase_vinstr_context *vctx,
    struct kbase_ioctl_hwcnt_reader_setup *setup)
{
    int errcode;
    int fd;
    struct kbase_vinstr_client *vcli = NULL;
    …
    errcode = kbasep_vinstr_client_create(vctx, setup, &vcli);
    …
}
```

---

## Conclusion & Future Work
- **Summary**: Explored race conditions in fd export and import operations, leading to potential UAF vulnerabilities.
- **Future Work**: Continue to monitor and analyze similar patterns in GPU drivers and other kernel components.

---