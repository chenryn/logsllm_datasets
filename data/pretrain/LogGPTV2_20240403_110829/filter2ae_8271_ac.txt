    ppb[0].nWidth  = 0x100;
    ppb[0].nHeight = 0x100;
    ppb[0].hBrush  = hbru;
    pfnPolyPatBlt(hdc, PATCOPY, ppb, 1, 0);
_漏洞验证代码片段_
在这段验证代码中，首先获取当前桌面的设备上下文 `DC` 对象句柄。根据函数 `PolyPatBlt` 的调用规则，需要在调用之前先创建笔刷对象，这通过函数
`CreateBitmap` 和 `CreatePatternBrush` 来实现。创建返回的笔刷对象句柄被放置在 `PATRECT` 数组元素的
`hBrush` 成员域中。
编译代码后在测试环境执行，可以成功命中漏洞所在位置的断点：
    win32k!EngRealizeBrush+0x19c:
    9397d73c e828f20600      call    win32k!PALLOCMEM (939ec969)
    kd> k
     # ChildEBP RetAddr
    00 8e03ba20 93980c34 win32k!EngRealizeBrush+0x19c
    01 8e03bab8 939834af win32k!bGetRealizedBrush+0x70c
    02 8e03bad0 939f9ae6 win32k!pvGetEngRbrush+0x1f
    03 8e03bb34 93a1e723 win32k!EngBitBlt+0x2bf
    04 8e03bb98 93a1e8ab win32k!GrePatBltLockedDC+0x22b
    05 8e03bb54 93a1ed96 win32k!GrePolyPatBltInternal+0x176
    06 8e03bc18 83e7b1ea win32k!NtGdiPolyPatBlt+0x1bc
    07 8e03bc18 77db70b4 nt!KiFastCallEntry+0x12a
    08 002cfb8c 764c6217 ntdll!KiFastSystemCallRet
    09 002cfb90 764c61f9 gdi32!NtGdiPolyPatBlt+0xc
    0a 002cfbbc 0104b146 gdi32!PolyPatBlt+0x1e7
    [...]
    kd> dc esp l2
    8e03b978  00004084 72626547                    PI:EMAIL
_漏洞验证代码执行后命中漏洞所在位置断点_
* * *
需要注意的是，在虚拟机同一环境中多次测试验证代码程序时，有时候在函数 `EngRealizeBrush` 中会绕过分配内存的指令块：
    win32k!EngRealizeBrush+0x164:
    93a5d704 b958a0c393      mov     ecx,offset win32k!gpCachedEngbrush (93c3a058)
    93a5d709 ff157000c193    call    dword ptr [win32k!_imp_InterlockedExchange (93c10070)]
    93a5d70f 8bf0            mov     esi,eax
    93a5d711 8975ac          mov     dword ptr [ebp-54h],esi
    93a5d714 85f6            test    esi,esi
    93a5d716 7418            je      win32k!EngRealizeBrush+0x190 (93a5d730)
    93a5d718 8d4340          lea     eax,[ebx+40h]
    93a5d71b 8945e0          mov     dword ptr [ebp-20h],eax
    93a5d71e 3bc3            cmp     eax,ebx
    93a5d720 7605            jbe     win32k!EngRealizeBrush+0x187 (93a5d727)
    93a5d722 394604          cmp     dword ptr [esi+4],eax
    93a5d725 7332            jae     win32k!EngRealizeBrush+0x1b9 (93a5d759)
    93a5d759 837d1400        cmp     dword ptr [ebp+14h],0
    kd> r eax 
    eax=00004084
    kd> r ebx
    ebx=00004044
    kd> ? poi(esi+4)
    Evaluate expression: 16516 = 00004084
_函数 EngRealizeBrush 绕过分配内存块的指令块_
创建的 `ENGBRUSH` 对象在释放时会尝试将地址存储在 `win32k` 中的全局变量 `gpCachedEngbrush`
中而不是直接释放，作为缓存对象以备下次分配合适大小的 `ENGBRUSH` 对象时直接取用。
在 `EngRealizeBrush` 函数中分配内存缓冲区之前，函数会获取 `gpCachedEngbrush` 全局变量存储的值，如果缓存的
`ENGBRUSH` 对象存在，那么判断该缓存对象是否满足当前所需的缓冲区大小，如果满足就直接使用该缓存对象作为新创建的 `ENGBRUSH`
对象的缓冲区使用，因此跳过了分配内存的那一步。
* * *
焦点回到命中断点的漏洞所在位置，可以观测到请求分配的缓冲区大小参数是 `0x4084`
数值，这是由在验证代码中创建笔刷对象时，所关联的位图对象的大小决定的。当前的数值并未命中溢出的条件，因此我们需要不断尝试和计算，得到满足溢出条件的可变因素的数值。
为了更清晰地理解关联的位图对象与最终分配的内存缓冲区大小的关联，接下来对相关函数进行深入的分析。
* * *
###### CreatePatternBrush
用户进程调用函数 `CreatePatternBrush` 以使用指定位图作为图案创建逻辑笔刷，函数接受位图对象的句柄作为唯一参数。在函数中直接调用
`NtGdiCreatePatternBrushInternal` 系统调用进入内核中执行。
    HBRUSH __stdcall CreatePatternBrush(HBITMAP hbm)
    {
      return (HBRUSH)NtGdiCreatePatternBrushInternal((int)hbm, 0, 0);
    }
_函数 CreatePatternBrush 直接调用 NtGdiCreatePatternBrushInternal 函数_
接下来在内核中函数 `NtGdiCreatePatternBrushInternal` 直接调用函数
`GreCreatePatternBrushInternal` 来根据传入的位图创建图案笔刷对象。函数
`GreCreatePatternBrushInternal` 第 1 个参数是传递的位图对象的句柄。后两个参数由于在用户进程传递时直接传值为 `0`
所以暂不关注。
      SURFREF::SURFREF(&ps, hbmp);
      [...]
      if ( *((_DWORD *)ps + 0x12) & 0x4000000 )
      {
        if ( a3 )
          hbmpClone = hbmCreateClone(ps, 8u, 8u);
        else
          hbmpClone = hbmCreateClone(ps, 0, 0);
        if ( hbmpClone )
        {
          a3 = *((_DWORD *)ps + 0x14);
          bIsMonochrome = XEPALOBJ::bIsMonochrome((XEPALOBJ *)&a3);
          BRUSHMEMOBJ::BRUSHMEMOBJ(&v9, hbmpClone, hbmp, bIsMonochrome, 0, 0x40, a2);
          if ( v9 )
          {
            v12 = *v9;
            v10 = 1;
          }
          BRUSHMEMOBJ::~BRUSHMEMOBJ((BRUSHMEMOBJ *)&v9);
        }
      }
      [...]
      return v12;
_函数 GreCreatePatternBrushInternal 的代码片段_
函数根据传入的位图句柄获得图案位图的 `SURFACE` 对象的引用，随后通过调用函数 `hbmCreateClone` 并传入图案位图的
`SURFACE` 对象指针以获得位图对象克隆实例的句柄。
函数 `hbmCreateClone` 用来创建指定位图的引擎管理的克隆。函数生命周期内存在位于栈上的 `DEVBITMAPINFO` 结构体对象
`dbmi`。结构体 `DEVBITMAPINFO` 定义如下：
    typedef struct _DEVBITMAPINFO { // dbmi
        ULONG   iFormat;
        ULONG   cxBitmap;
        ULONG   cyBitmap;
        ULONG   cjBits;
        HPALETTE hpal;
        FLONG   fl;
    } DEVBITMAPINFO, *PDEVBITMAPINFO;
_结构体 DEVBITMAPINFO 的定义_
图案位图对象的像素位数格式 `SURFACE->so.iBitmapFormat` 成员域的值被赋值给 `dbmi` 对象的 `iFormat`
成员；由于第 2 个和第 3 个参数都被传入 `0`，因此函数直接获取图案位图对象的 `SURFACE->so.sizlBitmap` 成员域的值并存储在
`dbmi` 对象的 `cxBitmap` 和 `cyBitmap` 成员中。
      dbmi_iFormat = *((_DWORD *)a1 + 0xF);
      if ( a2 && a3 )
      {
        [...]
      }
      else
      {
        dbmi_cx = *((_DWORD *)a1 + 8);
        dbmi_cy = *((_DWORD *)a1 + 9);
      }
      [...]
_函数 hbmCreateClone 获取图案位图 SURFACE 对象成员域的值_
接下来函数调用 `SURFMEM::bCreateDIB` 函数并传入 `dbmi` 对象首地址，用来构造新的设备无关位图的内存对象：
      if ( SURFMEM::bCreateDIB((SURFMEM *)&v23, (struct _DEVBITMAPINFO *)&dbmi_iFormat, 0, 0, 0, 0, 0, 0, 1) )
      {
        v19 = dbmi_cx;
        v6 = 0;
        v7 = (*((_DWORD *)a1 + 0x12) & 0x4000) == 0;
        v21 = 0;
        v22 = 0;
        v17 = 0;
        v18 = 0;
        v20 = dbmi_cy;
        v26 = 0;
        [...]
      }
      [...]
_函数调用 SURFMEM::bCreateDIB 构造设备无关位图的内存对象_
函数 `SURFMEM::bCreateDIB` 在初始化新分配的位图对象时，将使用传入的参数 `dbmi`
对象中存储的关键成员的值，包括位图的宽度高度和像素位格式。
函数 `hbmCreateClone` 向函数 `GreCreatePatternBrushInternal`
返回新创建的位图对象克隆的句柄。接下来函数判断原位图 `SURFACE` 对象的调色盘是否属于单色模式，接着通过调用构造函数
`BRUSHMEMOBJ::BRUSHMEMOBJ` 初始化位于栈上的从变量 `v9` 地址起始的静态 `BRUSHMEMOBJ` 对象。
在构造函数 `BRUSHMEMOBJ::BRUSHMEMOBJ` 中，函数通过调用成员函数 `BRUSHMEMOBJ::pbrAllocBrush`
分配笔刷 `BRUSH` 对象内存，接下来对笔刷对象的各个成员域进行初始化赋值。其中，通过第 2 个和第 3
个参数传入的位图对象克隆句柄和原位图对象句柄被分别存储在新分配的 `BRUSH` 对象的 `+0x14` 和 `+0x18` 字节偏移的成员域中。
      pbrush = BRUSHMEMOBJ::pbrAllocBrush((BRUSHMEMOBJ *)this, a7);
      *pbp_pbr = pbrush;
      if ( pbrush )
      {
        *((_DWORD *)pbrush + 5) = a2;
        *((_DWORD *)pbrush + 6) = a3;
        v10 = (_DWORD *)*((_DWORD *)pbrush + 9);
        *((_DWORD *)pbrush + 0xE) = 0;
        *((_DWORD *)pbrush + 4) = 0xD;
        *v10 = 0;
        *((_DWORD *)pbrush + 7) = a6;
        if ( a4 )