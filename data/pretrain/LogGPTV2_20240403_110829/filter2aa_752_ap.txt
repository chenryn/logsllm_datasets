解锁之后，pthread_cond_wait 自动申请锁定互斥体对象。 
当你的程序要改变你利用条件变量所维护的程序状态的时候，始终应该遵循以上这些步
骤。（在我们的例子中，我们要保护的就是标志变量的状态，所以每当试图改版标志变量的
值的时候都应该遵循这些步骤。） 
1. 
锁定与条件变量伴生的互斥体。 
2. 
执行可能改变程序状态的指令（在我们的例子中，修改标志）。 
3. 
向条件变量投递或广播信号。这取决于我们希望的行为。 
4. 
将与条件变量伴生的互斥体解锁。 
代码列表 4.14 再次展示了之前的那个例子，不过现在改用条件变量保护标志。注意，
在 thread_function 中，在检测 thread_flag 的值之前我们锁定了互斥体。这个锁会被
pthread_cond_wait 在阻塞之前自动释放，并在阻塞结束后自动重新获取。同时也要注意，
set_thread_flag 会在设定 thread_flag 的值之前自动锁定互斥体并向状态变量（译者注：这
里原文为 mutex，疑为 condition variable 笔误）发送信号。 
代码列表 4.14 (condvar.c) 用条件变量控制线程 
#include  
int thread_flag; 
pthread_cond_t thread_flag_cv; 
pthread_mutex_t thread_flag_mutex; 
void initialize_flag () 
{ 
  /* 初始化互斥体和条件变量。*/ 
  pthread_mutex_init (&thread_flag_mutex, NULL); 
  pthread_cond_init (&thread_flag_cv, NULL); 
  /* 初始化标志变量。*/ 
  thread_flag = 0; 
} 
/* 如果标志被设置，则反复调用 do_work；否则阻塞。*/ 
void* thread_function (void* thread_arg) 
{ 
  /* Loop infinitely. */ 
  while (1) { 
    /* 访问标志之前锁定互斥体。*/ 
    pthread_mutex_lock (&thread_flag_mutex); 
    while (!thread_flag) 
/* 标志被清空。等待条件变量指示标志被改变的信号。信号到达的时候线程解锁， 
www.AdvancedLinuxProgramming.com 
75
高级 Linux 程序设计·卷一·Linux 平台上的高级 UNIX 编程 
完美废人 译 
然后再次循环并检查标志。*/ 
      pthread_cond_wait (&thread_flag_cv, &thread_flag_mutex); 
    /* 当我们到达这里的时候，我们确信标志已经被设置。将互斥体解锁。*/ 
    pthread_mutex_unlock (&thread_flag_mutex); 
    /* 执行任务。*/ 
    do_work (); 
  } 
  return NULL; 
} 
/* 将线程标志值设置为 flag_value。*/ 
viod set_thread_flag (int flag_value) 
{ 
  /* 赋值之前先锁定互斥体。*/ 
  pthread_mutex_lock (&thread_flag_mutex); 
  /* 进行赋值操作，然后对等待标志改变而被阻塞的 thread_function 发送信号。但事实
上 thread_function 必须等待互斥体被解锁才能检查标志。*/ 
  thread_flag = flag_value; 
  pthread_cond_signal (&thread_flag_cv); 
  /* 解除互斥体锁定 */ 
  pthread_mutex_unlock (&thread_flag_mutex); 
} 
条件变量所保护的状态可以相当复杂。不过，在改变任何状态之前都应该首先锁定一个
互斥体，并且在修改操作之后向条件变量发送信号。 
条件变量也可以用于不涉及程序状态的情况，而仅用作一种让一个线程阻塞等待其它线
程唤醒的机制。信号量也可用于这个目的。两者之前的主要区别是，当没有线程处于阻塞状
态的时候信号量会“记住”唤醒下一个被阻塞的线程，而条件变量只是简单地丢弃这个信号。
另外，信号量只能发送一个唤醒信息给一个线程，而 pthread_cond_broadcast 可以同时唤
醒不限数量的可以被唤醒的线程。 
4.4.7 两个或多个线程的死锁 
死锁可能发生在这样一种情况：两个（或更多）线程都在阻塞等待一个只能被其它线程
引发的事件。例如，当线程 A 等待线程 B 向一个条件变量发送信号而线程 B 也在等待线程
A 向一个条件变量发送信号的时候，因为两个线程都永远无法发送对方等待的信号，死锁就
出现了。你应该尽力避免这种情况的发生，因为这种错误很难被察觉。 
一个可能引发死锁的常见错误是多个线程试图锁定同一组对象。假设有这样一个程序，
有两个线程运行不同的线程函数却尝试锁定相同的两个互斥体。假设线程 A 先锁定互斥体 A
而后锁定互斥体 B，而线程 B 先锁定互斥体 B 而后尝试锁定互斥体 A。在一个非常不幸的
情况下，Linux 可能让线程 A 运行到成功锁定互斥体 A 之后，然后转而运行线程 B 直到锁
定互斥体 B。接下来，两个线程都被阻塞在对方持有的互斥体上而再也无法继续运行。 
不仅是针对互斥体等同步对象，当针对更多种类的资源，例如文件或设备上的锁定进行
同步的时候，更容易造成这种死锁问题。这种问题出现的原因是一组线程以不同的顺序锁定
www.AdvancedLinuxProgramming.com 
76
高级 Linux 程序设计·卷一·Linux 平台上的高级 UNIX 编程 
完美废人 译 
同一组资源。解决这个问题的方法就是确保所有线程锁定这些资源的顺序相同，这样就可以
避免死锁的出现。 
4.5 GNU/Linux 线程实现 
GNU/Linux 平台上的 POSIX 线程实现与其它许多类 UNIX 操作系统上的实现有所不同：
在 GNU/Linux 系统中，线程就是用进程实现的。每当你用 pthread_create 创建一个新线程
的时候，Linux 创建一个新进程运行这个线程的代码。不过，这个进程与一般由 fork 创建的
进程有所不同；具体来说，新进程与父进程共享地址空间和资源，而不是分别获得一份拷贝。 
列表 4.15 中的程序 thread-pid 演示了这一点。这个程序首先创建一个线程，随后两个
线程都调用 getpid 并打印各自的进程号，最后分别无限循环。 
代码列表 4.15 (thread-pid) 打印线程的进程号 
#include  
#include  
#include  
void* thread_function (void* arg) 
{ 
  fprintf (stderr, "child thread pid is %d\n", (int) getpid ()); 
  /* 无限循环 */ 
  while (1); 
  return NULL; 
} 
int main () 
{ 
  pthread_t thread; 
  fprintf (stderr, "main thread pid is %d\n", (int) getpid ()); 
  pthread_create (&thread, NULL, &thread_function, NULL); 
  /* 无限循环 */ 
  while (1); 
  return 0; 
} 
在后台运行这个程序，然后调用 ps x 显示运行中的进程。别忘了随后结束 pthread_pid
程序——它浪费无数 CPU 时间却什么也不做。这是一个可能的输出： 
  % cc thread-pid.c -o thread-pid -lpthread 
  % ./thread-pid & 
  [1] 14608 
  main thread pid is 14608 
www.AdvancedLinuxProgramming.com 
77
  child thread pid is 14610 
高级 Linux 程序设计·卷一·Linux 平台上的高级 UNIX 编程 
完美废人 译 
  % ps x 
    PID TTY       STAT    TIME COMMAND 
  14042 pts/9     S       0:00 bash 
  14608 pts/9     R       0:01 ./thread-pid 
  14609 pts/9     S       0:00 ./thread-pid 
  14610 pts/9     R       0:01 ./thread-pid 
  14611 pts/9     R       0:00 ps x 
  % kill 14608 
  [1]+  Terminated                  ./thread-pid 
Shell 程序的进程控制提示 
以 [1] 开头的行是由 shell 程序输出的。当你在后台运行一个程序，shell 会分配一
个任务控制代码给这个程序——在这里是 1——并打印这个程序的进程号。如果后台程
序终止了，shell 会在你下次执行命令后通知你。 
注意这里共有三个进程运行着 thread-pid 程序。第一个，进程号是 14608 的，运行的是
程序的主函数；第三个，进程号是 14610 的，是我们创建来执行 thread_function 的线程。 
那么第二个，进程号是 14609 的线程呢？它是“管理线程”，属于 GNU/Linux 线程内部
实现细节。管理线程会在一个程序第一次调用 pthread_create 的时候自动创建。 
4.5.1 信号处理 
假设一个多线程程序收到了一个信号。究竟哪个线程的信号处理函数会作出响应？线程
和信号之间的互操作在各个 UNIX 变种系统都可能有所不同。在 GNU/Linux 系统中，这个
行为的决定因素在于：线程实际是由进程实现的。 
因为每个线程都是一个单独的进程，又因为信号是发送到特定进程的，究竟由哪个线程
接受信号并不会成为一个问题。一般而言，从程序外发送的信号通常都是发送到程序的主线
程。例如，如果一个程序通过 fork 调用产生了新进程运行一个多线程程序，父进程将得到
新程序主线程所在的进程号，并通过这个进程号发送信号。当你试图向一个多线程程序发送
信号的时候，通常也应该遵循这个方法。 
要注意的是 GNU/Linux 系统中 pthread 库的实现与 POSIX 线程标准的区别。在注重可
移植性的程序中不要依赖程序的特定行为。 
在一个多线程程序中，一个线程可以给另一个特定线程发送信号。函数 pthread_kill 可
以做到这一点。该函数的第一个参数是线程号，第二个参数则是信号的值。 
4.5.2 clone 系统调用 
虽然同一个程序中产生的线程被实现作不同的进程，所有线程都共享虚拟内存和其它资
源。而通过 fork 创建的子进程则得到所有这些的独立副本。前一种进程究竟是怎么创建的？ 
Linux 的 clone 系统调用是一个更通用版本的 fork 和 pthread_create。它允许调用者指
定哪些资源应在新旧进程之间共享。同时，clone 要求你指定新进程运行所需的栈空间所在
的内存区域。虽然我们在这里介绍了这个系统调用以满足读者的好奇心，clone 系统调用通
常不应该出现在程序中。应该调用 fork 创建新进程而调用 pthread_create 创建新线程。 
www.AdvancedLinuxProgramming.com 
78
高级 Linux 程序设计·卷一·Linux 平台上的高级 UNIX 编程 
完美废人 译 
4.6 进程 Vs. 线程 
对于一些从并发处理中受益的程序而言，多进程还是多线程可能很难被抉择。这里有一
些基本方针可以帮助你判断哪种模型更适合你的程序： 
· 一个程序的所有线程都必须运行同一个执行文件。而一个新进程则可以通过 exec
函数运行一个新的执行文件。 
· 由于所有线程共享地址空间和资源，一个错误的线程可能影响所有其它线程。例如，
通过未经初始化的指针非法访问内存可能破坏其它线程所使用的内存。 
而一个错误的进程则不会造成这样的破坏因为每个进程都有父进程的地址空间的
完整副本。 
· 为新进程复制内存会比创建新线程存在性能方面的损失。不过，由于只有当对内存
进行写入操作的时候复制操作才会发生，如果新进程只对内存执行读取操作，性能
损失可能微乎其微。 
· 对于需要精细并行控制的程序，线程是更好的选择。例如，如果一个问题可以被分
解为许多相对独立的子任务，用线程处理可能更好。进程适合只需要比较粗糙的并
行程序。 
· 由于线程之间共享地址空间，共享数据是一件简单的任务。（不过如前所述，必须
倍加小心防范竞争状态的出现。）进程之间共享属于要求使用第五章中介绍的各种
IPC 机制。这虽然显得更麻烦而笨重，但同时避免了许多并行程序错误的出现。 
www.AdvancedLinuxProgramming.com 
79
高级 Linux 程序设计·卷一·Linux 平台上的高级 UNIX 编程 
完美废人 译 
第五章：进程间通信 
第三章“进程”中我们讨论了进程的创建方法，也展示了一个进程如何获取子进程的退
出状态。这可以算是最简单的进程间通信方法，但毋庸置疑，它绝不是是最强大的一种。第
三章中所提供的通信机制，对父进程而言，除了通过设置命令行参数和环境变量之外，并没
有提供任何的与子进程通信的方法，同样，对于子进程而言，也只有退出代码这唯一一种向
父进程返回信息的方法。这些通信机制不允许进程与正在运行中的子进程通信，更不可能允