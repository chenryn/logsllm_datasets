                LOGGER.info("Discovering gadget chain source methods...");
                SourceDiscovery sourceDiscovery = config.getSourceDiscovery();
                sourceDiscovery.discover();
                sourceDiscovery.save();
            }
            //搜索生成调用链
            {
                LOGGER.info("Searching call graph for gadget chains...");
                GadgetChainDiscovery gadgetChainDiscovery = new GadgetChainDiscovery(config);
                gadgetChainDiscovery.discover();
            }
#### Step1 枚举全部类以及每个类的所有方法
要进行调用链的搜索，首先得有所有类及所有类方法的相关信息：
    public class MethodDiscovery {
        private static final Logger LOGGER = LoggerFactory.getLogger(MethodDiscovery.class);
        private final List discoveredClasses = new ArrayList<>();//保存所有类信息
        private final List discoveredMethods = new ArrayList<>();//保存所有方法信息
        ...
        ...
        public void discover(final ClassResourceEnumerator classResourceEnumerator) throws Exception {
            //classResourceEnumerator.getAllClasses()获取了运行时的所有类(JDK rt.jar)以及要搜索应用中的所有类
            for (ClassResourceEnumerator.ClassResource classResource : classResourceEnumerator.getAllClasses()) {
                try (InputStream in = classResource.getInputStream()) {
                    ClassReader cr = new ClassReader(in);
                    try {
                        cr.accept(new MethodDiscoveryClassVisitor(), ClassReader.EXPAND_FRAMES);//通过ASM框架操作字节码并将类信息保存到this.discoveredClasses，将方法信息保存到discoveredMethods
                    } catch (Exception e) {
                        LOGGER.error("Exception analyzing: " + classResource.getName(), e);
                    }
                }
            }
        }
        ...
        ...
        public void save() throws IOException {
            DataLoader.saveData(Paths.get("classes.dat"), new ClassReference.Factory(), discoveredClasses);//将类信息保存到classes.dat
            DataLoader.saveData(Paths.get("methods.dat"), new MethodReference.Factory(), discoveredMethods);//将方法信息保存到methods.dat
            Map classMap = new HashMap<>();
            for (ClassReference clazz : discoveredClasses) {
                classMap.put(clazz.getHandle(), clazz);
            }
            InheritanceDeriver.derive(classMap).save();//查找所有继承关系并保存
        }
    }
来看下classes.dat、methods.dat分别长什么样子：
  * classes.dat
找了两个比较有特征的
类名 | 父类名 | 所有接口 | 是否是接口 | 成员  
---|---|---|---|---  
com/sun/deploy/jardiff/JarDiffPatcher | java/lang/Object |
com/sun/deploy/jardiff/JarDiffConstants,com/sun/deploy/jardiff/Patcher | false
| newBytes!2![B  
com/sun/corba/se/impl/presentation/rmi/InvocationHandlerFactoryImpl$CustomCompositeInvocationHandlerImpl
| com/sun/corba/se/spi/orbutil/proxy/CompositeInvocationHandlerImpl |
com/sun/corba/se/spi/orbutil/proxy/LinkedInvocationHandler,java/io/Serializable
| false |
stub!130!com/sun/corba/se/spi/presentation/rmi/DynamicStub!this$0!4112!com/sun/corba/se/impl/presentation/rmi/InvocationHandlerFactoryImpl  
第一个类com/sun/deploy/jardiff/JarDiffPatcher：
和上面的表格信息对应一下，是吻合的
  * 类名：com/sun/deploy/jardiff/JarDiffPatcher
  * 父类： java/lang/Object，如果一类没有显式继承其他类，默认隐式继承java/lang/Object，并且java中不允许多继承，所以每个类只有一个父类
  * 所有接口：com/sun/deploy/jardiff/JarDiffConstants、com/sun/deploy/jardiff/Patcher
  * 是否是接口：false
  * 成员：newBytes!2![B，newBytes成员，Byte类型。为什么没有将static/final类型的成员加进去呢？这里还没有研究如何操作字节码，所以作者这里的判断实现部分暂且跳过。不过猜测应该是这种类型的变量并不能成为 **污点** 所以忽略了
第二个类com/sun/corba/se/impl/presentation/rmi/InvocationHandlerFactoryImpl$CustomCompositeInvocationHandlerImpl：
和上面的表格信息对应一下，也是吻合的
  * 类名：com/sun/corba/se/impl/presentation/rmi/InvocationHandlerFactoryImpl$CustomCompositeInvocationHandlerImpl，是一个内部类
  * 父类： com/sun/corba/se/spi/orbutil/proxy/CompositeInvocationHandlerImpl
  * 所有接口：com/sun/corba/se/spi/orbutil/proxy/LinkedInvocationHandler,java/io/Serializable
  * 是否是接口：false
  * 成员：stub!130!com/sun/corba/se/spi/presentation/rmi/DynamicStub!this$0!4112!com/sun/corba/se/impl/presentation/rmi/InvocationHandlerFactoryImpl，!*!这里可以暂时理解为分割符，有一个成员stub，类型com/sun/corba/se/spi/presentation/rmi/DynamicStub。因为是内部类，所以多了个this成员，这个this指向的是外部类
  * methods.dat
同样找几个比较有特征的
类名 | 方法名 | 方法描述信息 | 是否是静态方法  
---|---|---|---  
sun/nio/cs/ext/Big5 | newEncoder | ()Ljava/nio/charset/CharsetEncoder; | false  
sun/nio/cs/ext/Big5_HKSCS$Decoder | \ |
(Ljava/nio/charset/Charset;Lsun/nio/cs/ext/Big5_HKSCS$1;)V | false  
sun/nio/cs/ext/Big5#newEncoder：
  * 类名：sun/nio/cs/ext/Big5
  * 方法名： newEncoder
  * 方法描述信息： ()Ljava/nio/charset/CharsetEncoder; 无参，返回java/nio/charset/CharsetEncoder对象
  * 是否是静态方法：false
sun/nio/cs/ext/Big5_HKSCS$Decoder#\：
  * 类名：sun/nio/cs/ext/Big5_HKSCS$Decoder
  * 方法名：\
  * 方法描述信息： `(Ljava/nio/charset/Charset;Lsun/nio/cs/ext/Big5_HKSCS$1;)V` 参数1是java/nio/charset/Charset类型，参数2是sun/nio/cs/ext/Big5_HKSCS$1类型，返回值void
  * 是否是静态方法：false
继承关系的生成：
继承关系在后面用来判断一个类是否能被某个库序列化、以及搜索子类方法实现等会用到。
    public class InheritanceDeriver {
        private static final Logger LOGGER = LoggerFactory.getLogger(InheritanceDeriver.class);
        public static InheritanceMap derive(Map classMap) {
            LOGGER.debug("Calculating inheritance for " + (classMap.size()) + " classes...");
            Map> implicitInheritance = new HashMap<>();
            for (ClassReference classReference : classMap.values()) {
                if (implicitInheritance.containsKey(classReference.getHandle())) {
                    throw new IllegalStateException("Already derived implicit classes for " + classReference.getName());
                }
                Set allParents = new HashSet<>();
                getAllParents(classReference, classMap, allParents);//获取当前类的所有父类
                implicitInheritance.put(classReference.getHandle(), allParents);
            }
            return new InheritanceMap(implicitInheritance);
        }
        ...
        ...
        private static void getAllParents(ClassReference classReference, Map classMap, Set allParents) {
            Set parents = new HashSet<>();
            if (classReference.getSuperClass() != null) {
                parents.add(new ClassReference.Handle(classReference.getSuperClass()));//父类
            }
            for (String iface : classReference.getInterfaces()) {
                parents.add(new ClassReference.Handle(iface));//接口类
            }
            for (ClassReference.Handle immediateParent : parents) {
                //获取间接父类，以及递归获取间接父类的父类
                ClassReference parentClassReference = classMap.get(immediateParent);
                if (parentClassReference == null) {
                    LOGGER.debug("No class id for " + immediateParent.getName());
                    continue;
                }
                allParents.add(parentClassReference.getHandle());
                getAllParents(parentClassReference, classMap, allParents);
            }
        }
        ...
        ...
    }
这一步的结果保存到了inheritanceMap.dat：
类 | 直接父类+间接父类  
---|---  
com/sun/javaws/OperaPreferencesPreferenceEntryIterator |
java/lang/Object、java/util/Iterator  
com/sun/java/swing/plaf/windows/WindowsLookAndFeel$XPValue |
java/lang/Object、javax/swing/UIDefaults$ActiveValue  
#### Step2 生成passthrough数据流
这里的passthrough数据流指的是每个方法的返回结果与方法参数的关系，这一步生成的数据会在生成passthrough调用图时用到。
以作者给出的demo为例，先从宏观层面判断下：
FnConstant.invoke返回值与参数this(参数0，因为序列化时类的所有成员我们都能控制，所以所有成员变量都视为0参)、arg(参数1)的关系：
  * 与this的关系：返回了this.value，即与0参有关系
  * 与arg的关系：返回值与arg没有任何关系，即与1参没有关系
  * 结论就是FnConstant.invoke与参数0有关，表示为FnConstant.invoke()->0
Fndefault.invoke返回值与参数this(参数0)、arg(参数1)的关系：
  * 与this的关系：返回条件的第二个分支与this.f有关系，即与0参有关系
  * 与arg的关系：返回条件的第一个分支与arg有关系，即与1参有关系
  * 结论就是FnConstant.invoke与0参，1参都有关系，表示为Fndefault.invoke()->0、Fndefault.invoke()->1
在这一步中，gadgetinspector是利用ASM来进行方法字节码的分析，主要逻辑是在类PassthroughDiscovery和TaintTrackingMethodVisitor中。特别是TaintTrackingMethodVisitor，它通过标记追踪JVM虚拟机在执行方法时的stack和localvar，并最终得到返回结果是否可以被参数标记污染。
核心实现代码（TaintTrackingMethodVisitor涉及到字节码分析，暂时先不看）：
    public class PassthroughDiscovery {
        private static final Logger LOGGER = LoggerFactory.getLogger(PassthroughDiscovery.class);
        private final Map> methodCalls = new HashMap<>();
        private Map> passthroughDataflow;
        public void discover(final ClassResourceEnumerator classResourceEnumerator, final GIConfig config) throws IOException {
            Map methodMap = DataLoader.loadMethods();//load之前保存的methods.dat
            Map classMap = DataLoader.loadClasses();//load之前保存的classes.dat
            InheritanceMap inheritanceMap = InheritanceMap.load();//load之前保存的inheritanceMap.dat
            Map classResourceByName = discoverMethodCalls(classResourceEnumerator);//查找一个方法中包含的子方法
            List sortedMethods = topologicallySortMethodCalls();//对所有方法构成的图执行逆拓扑排序
            passthroughDataflow = calculatePassthroughDataflow(classResourceByName, classMap, inheritanceMap, sortedMethods,
                    config.getSerializableDecider(methodMap, inheritanceMap));//计算生成passthrough数据流，涉及到字节码分析
        }
        ...
        ...
        private List topologicallySortMethodCalls() {
            Map> outgoingReferences = new HashMap<>();
            for (Map.Entry> entry : methodCalls.entrySet()) {
                MethodReference.Handle method = entry.getKey();
                outgoingReferences.put(method, new HashSet<>(entry.getValue()));
            }
            // 对所有方法构成的图执行逆拓扑排序
            LOGGER.debug("Performing topological sort...");
            Set dfsStack = new HashSet<>();
            Set visitedNodes = new HashSet<>();
            List sortedMethods = new ArrayList<>(outgoingReferences.size());
            for (MethodReference.Handle root : outgoingReferences.keySet()) {
                dfsTsort(outgoingReferences, sortedMethods, visitedNodes, dfsStack, root);
            }
            LOGGER.debug(String.format("Outgoing references %d, sortedMethods %d", outgoingReferences.size(), sortedMethods.size()));
            return sortedMethods;
        }
        ...
        ...
        private static void dfsTsort(Map> outgoingReferences,
                                        List sortedMethods, Set visitedNodes,
                                        Set stack, MethodReference.Handle node) {
            if (stack.contains(node)) {//防止在dfs一条方法调用链中进入循环
                return;
            }
            if (visitedNodes.contains(node)) {//防止对某个方法及子方法重复排序
                return;
            }
            Set outgoingRefs = outgoingReferences.get(node);
            if (outgoingRefs == null) {
                return;
            }
            stack.add(node);
            for (MethodReference.Handle child : outgoingRefs) {
                dfsTsort(outgoingReferences, sortedMethods, visitedNodes, stack, child);
            }
            stack.remove(node);
            visitedNodes.add(node);
            sortedMethods.add(node);
        }
    }
**拓扑排序**
有向无环图（DAG）才有拓扑排序，非 DAG 图没有拓扑排序。 当有向无环图满足以下条件时：
  * 每一个顶点出现且只出现一次
  * 若A在序列中排在B的前面，则在图中不存在从B到A的路径
这样的图，是一个拓扑排序的图。树结构其实可以转化为拓扑排序，而拓扑排序 不一定能够转化为树。
以上面的拓扑排序图为例，用一个字典表示图结构
     graph = {
         "a": ["b","d"],
         "b": ["c"],
         "d": ["e","c"],
         "e": ["c"],
         "c": [],
     }
代码实现
    graph = {
        "a": ["b","d"],