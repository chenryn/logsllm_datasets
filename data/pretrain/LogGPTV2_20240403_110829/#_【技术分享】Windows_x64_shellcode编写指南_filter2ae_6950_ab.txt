### 优化后的文本

#### _LIST_ENTRY 结构
```plaintext
ntdll!_LIST_ENTRY
+0x000 Flink: Ptr64 _LIST_ENTRY
+0x008 Blink: Ptr64 _LIST_ENTRY
```

在 Windbg 中，使用 `!list` 命令可以遍历由 `_LIST_ENTRY` 结构组成的链表。`!list -x` 可以用于为每个位置的元素指定一个命令。我们可以用它来解析 `_PEB_LDR_DATA` 结构中的 `0x20` 偏移量，并通过 `_LIST_ENTRY` 元素进行解析。

#### 遍历 InMemoryOrderModule 链表
```plaintext
0:000> dt _LDR_DATA_TABLE_ENTRY
ntdll!_LDR_DATA_TABLE_ENTRY
+0x000 InLoadOrderLinks: _LIST_ENTRY
+0x010 InMemoryOrderLinks: _LIST_ENTRY
+0x020 InInitializationOrderLinks: _LIST_ENTRY
+0x030 DllBase: Ptr64 Void
+0x038 EntryPoint: Ptr64 Void
+0x040 SizeOfImage: Uint4B
+0x048 FullDllName: _UNICODE_STRING
+0x058 BaseDllName: _UNICODE_STRING
+0x068 Flags: Uint4B
+0x06c LoadCount: Uint2B
+0x06e TlsIndex: Uint2B
+0x070 HashLinks: _LIST_ENTRY
+0x070 SectionPointer: Ptr64 Void
+0x078 CheckSum: Uint4B
+0x080 TimeDateStamp: Uint4B
+0x080 LoadedImports: Ptr64 Void
+0x088 EntryPointActivationContext: Ptr64 _ACTIVATION_CONTEXT
+0x090 PatchInformation: Ptr64 Void
+0x098 ForwarderLinks: _LIST_ENTRY
+0x0a8 ServiceTagLinks: _LIST_ENTRY
+0x0b8 StaticLinks: _LIST_ENTRY
+0x0c8 ContextInformation: Ptr64 Void
+0x0d0 OriginalBase: Uint8B
+0x0d8 LoadTime: _LARGE_INTEGER
```

在 `_LDR_DATA_TABLE_ENTRY` 结构中，`InLoadOrderLinks` 指向下一个模块结构，`DllBase` 是模块的基地址，`FullDllName` 是模块名称的 Unicode 字符串。已知 `kernel32.dll` 是第三个模块。

#### 示例：遍历链表并显示 _LDR_DATA_TABLE_ENTRY
```plaintext
0:000> !list -t ntdll!_LIST_ENTRY.Flink -x "dt _LDR_DATA_TABLE_ENTRY @$extret" 002b3270
---CUT
ntdll!_LDR_DATA_TABLE_ENTRY
+0x000 InLoadOrderLinks: _LIST_ENTRY [0x00000000`002b3830 - 0x00000000`002b3260]
+0x010 InMemoryOrderLinks: _LIST_ENTRY [0x00000000`002b4980 - 0x00000000`002b3840]
+0x020 InInitializationOrderLinks: _LIST_ENTRY [0x00000000`77970000 - 0x00000000`77985ea0]
+0x030 DllBase: 0xbaadf00d`0011f000 Void
+0x038 EntryPoint: 0x00000000`00420040 Void
+0x040 SizeOfImage: 0x2b35c0
+0x048 FullDllName: _UNICODE_STRING "kernel32.dll"
+0x058 BaseDllName: _UNICODE_STRING " ámb "
+0x068 Flags: 0x77ccaa40
+0x06c LoadCount: 0
+0x06e TlsIndex: 0
+0x070 HashLinks: _LIST_ENTRY [0xbaadf00d`4ce7c78b - 0x00000000`00000000]
+0x070 SectionPointer: 0xbaadf00d`4ce7c78b Void
+0x078 CheckSum: 0
+0x080 TimeDateStamp: 0
+0x080 LoadedImports: (null)
+0x088 EntryPointActivationContext: 0x00000000`002b4d20 _ACTIVATION_CONTEXT
+0x090 PatchInformation: 0x00000000`002b4d20 Void
+0x098 ForwarderLinks: _LIST_ENTRY [0x00000000`002b36e8 - 0x00000000`002b36e8]
+0x0a8 ServiceTagLinks: _LIST_ENTRY [0x00000000`002b3980 - 0x00000000`002b3750]
+0x0b8 StaticLinks: _LIST_ENTRY [0x00000000`77c95124 - 0x00000000`78d20000]
+0x0c8 ContextInformation: 0x01d00f7c`80e29f8e Void
+0x0d0 OriginalBase: 0xabababab`abababab
+0x0d8 LoadTime: _LARGE_INTEGER 0xabababab`abababab
---CUT
```

现在知道加载的模块基地址在 `_LDR_DATA_TABLE_ENTRY` 的 `0x30` 偏移处。

#### 获取模块基地址
1. 通过访问 `[gs:60h]` 找到 PEB。
2. 通过在 PEB 中偏移 `0x18` 进入 LDR 链表。
3. 偏移 `0x20` 是 `InMemoryOrderModuleList`。
4. `InMemoryOrderModuleList` 中的第 3 个元素是 `Kernel32`，其 `0x30` 偏移处是模块的基地址。
5. 我们要调用 `ExitProcess`，这实际上是来自 `ntdll.dll` 的 `RtlExitUserProcess`。`Ntdll.dll` 是 `InMemoryOrderModuleList` 中的第二个条目，我们也将获取它的基地址并存储在 `r15` 中供以后使用。这种方法比依赖 `Kernel32` 在 `ntdll` 中正确执行函数更容易和更可靠。

从 Dependency Walker 中可以看出 `ExitProcess` 指向 `Ntdll.RtlExitUserProcess`。

#### 开始编写汇编代码
```assembly
mov r12, [gs:60h]       ; PEB
mov r12, [r12 + 0x18]   ; PEB --> LDR
mov r12, [r12 + 0x20]   ; PEB.Ldr.InMemoryOrderModuleList
mov r12, [r12]          ; 2nd entry
mov r15, [r12 + 0x20]   ; ntdll.dll base address!
mov r12, [r12]          ; 3rd entry
mov r12, [r12 + 0x20]   ; kernel32.dll base address! We go 20 bytes in here as we are already 10 bytes into the _LDR_DATA_TABLE_ENTRY from the InMemoryOrderModuleList
```

这里将 `Kernel32` 的地址放入 `r12` 寄存器（`r12` 寄存器不是 Clobber 寄存器），在 shellcode 执行期间需要保留 `Kernel32` 的地址。现在找到了 `kernel32` 模块的地址，可以通过 `kernel32` 加载其他模块和获取其他函数的地址。

#### 使用 `LoadLibraryA`
```c
HMODULE WINAPI LoadLibrary(
    _In_ LPCTSTR lpFileName
);
```

`LoadLibraryA` 用于将其他 DLL 模块加载到当前进程，因为 shellcode 需要与地址无关，不能依赖任何已经在目标进程中的 DLL。在本例中需要加载 `user32.dll`。

为了使用 `LoadLibraryA` 函数，它必须在 `kernel32.dll` 中找到其地址，这就需要 `GetProcAddress` 函数。

#### 使用 `GetProcAddress`
```c
FARPROC WINAPI GetProcAddress(
    _In_ HMODULE hModule,
    _In_ LPCSTR lpProcName
);
```

`GetProcAddress` 需要两个参数：需要获取的函数模块句柄以及函数名。

```assembly
; find address of LoadLibraryA from kernel32.dll which was found above.
mov rdx, 0xec0e4e8e  ; lpProcName (LoadLibraryA hash from ROR13)
mov rcx, r12         ; hModule
call GetProcAddress
```

一旦我们知道 `LoadLibraryA` 的地址，我们可以使用它来加载 `user32.dll`。

`0xec0e4e8e` 是 `LoadLibraryA` 的每个字母 ROR 0x13 相加所得的总和。这在 Shellcode 中是常见的，在 MetaSploit 等项目中使用。我写了一个简单的 C 程序来计算这些哈希值。

```c
# ./rot13.exe LoadLibraryA
LoadLibraryA
ROR13 of LoadLibraryA is: 0xec0e4e8e
```

#### 加载 `user32.dll`
```assembly
; import user32
lea rcx, [user32_dll]
call rax                ; load user32.dll
user_32dll: db 'user32.dll', 0
```

#### 获取 `MessageBoxA` 函数的地址
```assembly
mov rdx, 0xbc4da2a8     ; hash for MessageBoxA from ROR13
mov rcx, rax
call GetProcAddress
```

#### 执行 `MessageBoxA`
```assembly
; messageBox
xor r9, r9            ; uType
lea r8, [title_str]   ; lpCaption
lea rdx, [hello_str]  ; lpText
xor rcx, rcx          ; hWnd
call rax              ; display message box  
title_str:  db '0xdeadbeef', 0
hello_str:  db 'This is fun!', 0
```

#### 使用 `ExitProcess` 结束进程
```c
VOID WINAPI ExitProcess(
    _In_ UINT uExitCode
);
```

需要注意的是 `ExitProcess` 是 `kernel32` 所导出的函数，但这里使用 `RtlExitUserProcess`。

```assembly
; ExitProcess
mov rdx, 0x2d3fcd70             
mov rcx, r15            ; base address of ntdll
call GetProcAddress
xor  rcx, rcx           ; uExitCode
call rax
```

#### 完整的 Shellcode 与 `GetProcAddress` 实现
这里使用 `call/pop` 指令实现 `lea` 指令。

```assembly
bits 64
section .text
global start
start:
```