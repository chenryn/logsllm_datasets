26.在NUMA机器上，不管何时Windows内存管理器需要分配物理内存来处理页面失效，它总尝试从当前线程的理想的处理器的NUMA节点中获取。为什么？如果线程正运行在其他处理器上呢？
27.系统崩溃时，应用程序可以轻易地从基于卷的影子副本的备份中恢复，而不是从磁盘状态中恢复。请给出几个这样的例子。
28.在某些情况下为了满足安全性的要求需要为进程提供全零的页面，在11.9节中向进程的堆提供内存就是这样的一种情况。请给出一个或者多个其他需要对页面清零的虚拟内存操作。
29.在当前所有的Windows发行版本中，regedit命令可用于导出部分或全部注册表到一个文本文件。在一次工作会话中保存注册表若干次，看看有什么变化。如果您能够在Windows中安装软件或硬件，请找出安装或卸载程序或设备时注册表有何变化。
30.写一个UNIX程序，模拟用多个流来写一个NTFS文件。它应能接受一个或多个文件作为参数，并创建一个输出文件，该文件的一个流包含所有参数的属性，其他的流包含每个参数的内容。然后再写一个程序来报告这些属性和流并提取出所有的组成成分。
第12章 实例研究3：Symbian操作系统
在前面的两章里，我们已经介绍了两种在台式机以及笔记本电脑上通用的操作系统：Linux以及Windows Vista。但实际上，超过90%的CPU都并非用于台式机或笔记本电脑，而是用于嵌入式系统，例如手机、PDA、数码相机、便携式摄像机、游戏机、iPod、MP3播放器、CD播放器、DVD刻录机、无线路由器、电视机、GPS接收器、激光打印机、汽车，以及其他许多消费产品。它们大多使用现代的32位或64位芯片，几乎全部安装有成熟的操作系统。但是很少有人意识到这些操作系统的存在。在这一章里，我们将研究嵌入式系统中十分通用的一个操作系统：Symbian操作系统。
Symbian操作系统是一个运行在一些厂商的智能手机平台上的操作系统。智能手机因其运行功能齐全的操作系统以及利用台式机的特性而得名。Symbian操作系统用来作为很多厂商的多种智能手机的基础，通过精心设计，专门运行在智能手机平台上，即那些CPU、内存以及存储容量有限、主要针对通信的通用计算机。
针对Symbian操作系统的探讨将从它的历史开始。随后给出这个系统的概况，大致介绍它是怎样设计的以及实现什么样的功能。然后如前两章那样，介绍Symbian操作系统设计的各个方面，包括进程、内存管理、I/O、文件系统以及安全性。最后介绍Symbian操作系统怎样处理智能手机中的通信问题。
 12.1 Symbian操作系统的历史
UNIX操作系统有着很长的历史，几乎与计算机一样的久远。Windows操作系统也有较长的历史。而Symbian操作系统的历史相对较短。它起源于20世纪90年代研发的操作系统，首次出现则是在2001年。鉴于Symbian操作系统所依赖的智能手机平台也是近期才得到发展的，这一点应当并不令人惊讶。
Symbian操作系统起源于掌上设备，随后经历了几个版本的升级得到快速发展。
 12.1.1 Symbian操作系统的起源：Psion和EPOC
Symbian操作系统继承于某些最初的掌上设备。20世纪80年代末，作为将台式设备的功能整合到小型的可移动装置中的一个手段，掌上设备得到发展。对掌上电脑的初次尝试并没有引起太多的注意。Apple Newton是一个设计良好的掌上电脑设备，但只在少数使用者中间流行。虽然开始很缓慢，但20世纪90年代中期发展的掌上电脑则已经针对用户以及人们使用移动设备的方式进行了更好的修改。掌上电脑最初设计为PDA，是电子规划员的个人数码助手，不断地发展并具有了多种功能。随着它们的发展，在功能上已经趋向于台式机，也相应地有了与台式机同样的需求。它们需要多任务的处理方式；需要增加多种形式的存储能力；需要在输入输出上更加灵活。
掌上设备也逐渐包含了通信功能。随着个人设备的发展，个人通信也同样在发展着。移动电话的使用在20世纪90年代末期有了飞速的发展。因此，将掌上设备与移动电话相结合形成智能手机是一件很自然的事情。而随着这种合并的产生，在掌上设备里运行的操作系统也不得不发展。
在20世纪90年代，Psion电脑公司制造了PDA设备。1991年，Psion生产了Series 3——一个配有小尺寸单色显示屏的小型电脑，小到可以放入口袋中。在Series 3之后，1996年又制造了具有红外功能的Series 3c，1998年又生产了具有更快处理器速度以及更多内存容量的Series 3mx。它们各自均获得了成功，而它们的成功主要源自其良好的功耗管理以及与包括个人电脑和掌上设备在内的其他设备之间的互通性。程序是用C语言实现的，利用面向对象设计，并采用了“应用引擎”——Symbian操作系统发展中的一个重要部分。这种引擎方案功能强大。它借鉴了微内核的设计，从而强调类似于服务器般的引擎的功能性——通过回应来自各应用程序的请求进行功能管理。这种方式使得它可以拥有标准化的API以及利用对象的抽象来使得应用程序编程者免于诸如数据格式等令人麻烦的细节问题。
1996年，Psion开始设计一种新型的32位操作系统，它支持触摸屏上的定位设备，采用多媒体技术，并且具有更丰富的通信功能。这个新的系统同时也更加面向对象，并且可以移植到不同的体系结构和设备设计上。Psion的付出所得到的结果是系统EPOC版本1的推出。EPOC由C++编程实现，并且是彻底的面向对象的设计。它依然使用了引擎方案，并将这个设计理念扩展到协同访问系统服务和外部设备的一系列服务器。EPOC扩展了通信能力，开发了多媒体，引入了新的针对触摸屏等接口的平台，并通用化了硬件接口。
之后EPOC又继续发展了两个版本：EPOC版本3（ER3）和EPOC版本5（ER5）。它们在新的Psion Series 5及Series 7的电脑平台上运行。
Psion同时也试图强调它的操作系统可以适用于其他硬件平台。在2000年左右，新的掌上设备发展的最大机会在手机业务，而在这方面，众多厂商一直都在为它的下一代设备寻找一个新的先进的操作系统。为了利用这些机会，Psion与手机业的巨头，包括Nokia、Ericsson、Motorola以及Matsushita（Panasonic），成立了一个合资项目Symbian，用来控制EPOC操作系统核心的所有权并使其继续发展。这一新的内核设计现在称为Symbian操作系统。
12.1.2 Symbian操作系统版本6
鉴于EPOC的最后一个版本为ER5，因此Symbian操作系统在2001年以版本6首发。它利用了EPOC的灵活特性，并主要面向几个不同的通用平台。其设计非常灵活，从而满足了发展各种高级移动设备以及手机的需要，同时允许众多厂商具有区别各自产品的能力。
同时，Symbian操作系统将会积极采用现代最先进的、成熟的关键技术。这更强化了对于面向对象以及客户机-服务器结构的选择，正如它们在台式机以及网络世界的愈加广泛的使用。
Symbian操作系统版本6被它的设计者们称为“开放的”。这个“开放”不同于UNIX以及Linux那样的开源特性。这里，“开放”指的是这个操作系统的结构是公开的并且是大家均可获得的。另外，所有的系统接口也都公开，从而鼓励第三方软件的开发。
12.1.3 Symbian操作系统版本7
Symbian操作系统版本6在设计和功能上很像EPOC以及版本6以前的版本。它的设计主要着眼于移动电话。此后，随着越来越多的厂商设计了移动电话，即使是EPOC的灵活性也不能够应付如此众多的移动电话对Symbian操作系统的使用需求。
Symbian操作系统版本7保持了EPOC的台式机功能，但是大部分系统内部被重写了以包含多种智能手机功能。操作系统内核以及操作系统服务从用户界面中分离出来。相同的操作系统现在可以在众多不同的智能手机平台上运行了，它们各自拥有着不同的用户界面系统。Symbian操作系统现在可以扩展以处理新的不可预期的信息格式或者用在使用不同的电话技术的智能手机上。Symbian操作系统版本7发布于2003年。
12.1.4 今天的Symbian操作系统
Symbian操作系统版本7是一个重要的版本，因为它将抽象性以及灵活性带入了操作系统。然而，这种抽象是有代价的。操作系统的性能不久便成为一个需要解决的问题。
于是重写操作系统的工程又开始了，这次主要着眼于性能。这个新的操作系统设计旨在保持Symbian操作系统版本7的灵活性的同时提高其性能，并增强其安全性。Symbian操作系统版本8，发布于2004年，提高了Symbian操作系统的性能，尤其是在其实时功能上。Symbian操作系统版本9发布于2005年，增加了基于性能的安全以及看门机制安装的概念。如同Symbian操作系统版本7增加软件的灵活性那样，Symbian操作系统版本9增加了针对硬件的灵活性。一个新的二进制模型得到了开发，从而使得硬件开发者可以使用Symbian操作系统，而不必重新设计硬件使其适应某一特定的结构模型。
12.2 Symbian操作系统概述
前一节介绍过，Symbian操作系统是由一个掌上设备操作系统发展成为一个以实时性能作为目标的用在智能手机平台上的操作系统。这一节里我们将对Symbian操作系统设计中蕴含的概念作简单的介绍。这些概念与如何使用这个操作系统息息相关。
Symbian是一个独特的操作系统，因为它是以智能手机作为目标平台的。它不是将一般的操作系统硬装入智能手机（有很大的难度），也不是使较大的操作系统适应于较小的平台。然而，它确实包含了许多其他大型操作系统所具有的特性，从多任务到内存管理再到安全问题。
Symbian操作系统继承了其前身的最佳的特性，具有由EPOC传承下来的面向对象特性。并且如版本6中所引入的，使用了微内核的设计方案，最小化了内核的开销，将不必要的功能移到了用户层进程。它模仿EPOC中应用的引擎模型，使用了客户机/服务器结构。它支持多种台式机功能，包括多任务和多线程，以及可扩展存储系统。它还继承了EPOC中强调的多媒体与通信。
 12.2.1 面向对象
面向对象是一个意味着抽象的术语。在一个面向对象的设计中，针对某个系统成分的数据和功能，建立一个抽象的实体，称为对象。一个对象提供了具体的数据以及功能，但隐藏了具体实现。一个合理实现的对象可以被移除并被另外一个不同的对象代替，只要系统其他部分对这个对象的使用（也即其接口）保持不变。
当面向对象应用到操作系统设计中时，就意味着所有的系统调用以及内核端功能的使用均要通过接口，而不能直接获取实际数据或依靠其他类型的实现。一个面向对象的内核的实现通过对象来提供内核功能。使用内核端对象通常意味着一个应用程序具有一个对象的句柄，也就是对对象的一个引用，然后通过这个句柄来获得对该对象接口的访问。
Symbian操作系统采用了面向对象的设计。系统功能的实现是隐藏的，系统数据的使用通过系统对象已定义的接口完成。在Linux等操作系统中，构建一个文件描述符，并将这个描述符作为open调用的参数；而在Symbian操作系统中则会创建一个文件对象，然后调用该对象的open方法。举例来说，在Linux操作系统中，正如大家所知道的，文件描述符对应于系统内存中文件描述符表的索引的整数表示；而在Symbian操作系统中，文件系统表的实现是未知的，而所有的文件操作是通过一个特定的文件类的对象来实现的。
需要注意的是Symbian操作系统与其他在设计中运用了面向对象理念的操作系统不同。例如，许多操作系统设计使用了抽象数据类型，人们甚至可以说系统调用整个理念就是通过将系统实现细节对用户程序隐藏起来而实现了抽象。而对于Symbian操作系统，整个操作系统的结构均是面向对象设计的。操作系统功能以及系统调用都是与系统对象相联系的。资源分配以及保护则是对应于对象的分配，而不是系统调用的实现。
12.2.2 微内核设计
具有面向对象内在特性的Symbian操作系统的内核结构是微内核设计。内核中包括最小限度的系统功能以及数据，许多系统功能被放到了用户空间服务器端。服务器端通过获得系统对象的句柄并对这些对象进行必要的系统调用来完成各自的服务。用户空间应用程序与这些服务器端进行交互而不是采取系统调用。
典型的基于微内核的操作系统初始化引导时占用较少的内存，并且其结构也更加动态。当需要时可以启动服务器，而在启动时并不需要全部的服务器。微内核大多为可插拔结构，允许当需要时加载系统模块并插入到内核中。因此，微内核结构十分灵活：支持新功能的代码（例如，新硬件驱动程序）可以随时加载和插入。