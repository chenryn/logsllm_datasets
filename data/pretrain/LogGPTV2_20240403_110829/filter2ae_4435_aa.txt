### 0x00 简介
已下是阅读须知  
1， 本文所用框架是官方Thinkphp3.2.3  
2，
本文所举例子并不关TP这个框架什么事情，也没有吐槽TP的意思，只是单纯的希望帮助使用TP的开发者更好的认识这框架，能够安全的利用框架，明白在使用TP的过程中，哪一些操作是可能会造成安全问题的。  
3，本文，不涉及什么源码解析，就是单纯的告诉你们，什么样子的情况下会造成注入，什么样子会造成命令执行，什么样子会造成模版注入之类的,源码解析本文不会讲 :
)
为什么会有这篇水文？  
1， 因为TP3.2占比还是很高  
2， 因为我见过的使用TP3.2的或多或少都会踩一下这些雷区  
3， 自己公司因为历史原因部分业务使用的是TP3开发的，所以记录一下，防止内部踩雷
注：本文例子有的是网上的，有的是自己的，基本上我手上所有的都报的差不多了。
注：本文对于黑盒渗透基本没什么用所以读者看的时候别抱太多想法，祝大家白盒赚零花钱顺顺利利 : )
### 0x01 下载安装测试代码
下载地址：
自己配置一下数据库路径：test_thinkphp_3.2.3\Application\Common\Conf\config.php
自己安装，安装完以后：访问一下  
没报错就是成功
开启debug 方便本地测试  
路径：test_thinkphp_3.2.3\index.php
### 0x02 各种奇奇怪怪的雷区
#### 0x02.1 使用 $this->show 这种情况下会造成命令执行
url：phpinfo();
这个问题，大部分使用 php模板引擎技术 外部可以控制的情况下，都容易存在这种所以不过多解释=-= 反正不关tp框架的问题就是了。
#### 0x02.2 使用 $this->display这种情况下会造成命令执行
url:
phpinfo();
#### 0x02.3 使用 $this->fetch这种情况下会造成命令执行
url:
phpinfo();
#### 0x02.3 当想留后门时，可以利用I 函数造成命令执行留后门
url:   
POST: test = phpinfo();
#### 0x02.4 当想留后门时，可以利用 M 方法中的偏门方法filter 造成命令执行留后门
url:
POST: data = phpinfo()
#### 0x02.5 这样使用 $this->display的情况下可能会造成服务端模板注入
url:
#### 0x02.6 这样使用$this->fetch的情况下可能会造成服务端模板注入
url:
#### 0x02.7 thinkphp 指纹识别的方法
方法一：  
方法二(此方法需要 url重写 不然一般都是报错)：  
如果有出现 图片不是404 那么基本上就是TP框架了！
方法三：  
如果出现了logo 那么就是tp了  
方法四：  
#### 0x02.8 如果debug之前没有关，或是目录限制没做好，可能造成信息泄露
ThinkPHP在开启DEBUG的情况下会在Runtime目录下生成日志,所以如果你之前在线上开启过debug目录限制又没做好，那么就可以尝试利用
目录：test_thinkphp_3.2.3\index.php
ThinkPHP3.2 结构：Application\Runtime\Logs\Home\18_07_27.log  
ThinkPHP3.2 解析：项目名\Runtime\Logs\Home\年份_月份_日期.log
那么就可以尝试利用：  
### 0x03 开发者造成的各种奇奇怪怪的注入
#### 0x03.1 前提描述：
    注入基本上是我们每个开发者都会遇到的问题了，而框架已经帮我们解决了一部分，可是更多的情况框架是解决不了的，因此我们需要了解与清楚地知道 使用 tp 什么情况下外部控制是会造成sql注入的问题的。
注：这和TP真没关系，其实就是借TP讲解，现在经常造成注入的地方，而且能出现这种例子的，大部分都是开发者的水平问题了
#### 0x03.2 开发者失误的情况下各种可注入的情况 field注入
url: 
url:
url:
from test where (extractvalue (1,concat(0x7e,(SELECT USER()), 0x7e))) – a  
这是因为 底层是直接字符串拼接的然后带入数据库，框架的开发者，肯定也没想到会有人这样玩，因为这里一般是不会开放给外部控制的
#### 0x03.3 开发者失误的情况下各种可注入的情况 order注入
url:   
url: 
and(updatexml(1,concat(0x7e,(select user())),0))  
这是因为 底层是直接字符串拼接的然后带入数据库，框架的开发者，肯定也没想到会有人这样玩，因为这里一般是不会开放给外部控制的
#### 0x03.4 开发者失误的情况下各种可注入的情况 comment注入
url:   
url: