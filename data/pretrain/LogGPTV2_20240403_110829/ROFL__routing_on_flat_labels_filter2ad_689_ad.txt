### Intradomain Routing and Joining

#### Join Overhead
When a new host joins the network, only its successors need to be notified, resulting in an overhead of four messages multiplied by the network's diameter. ROFL (Routing On Flat Labels) allows the operator to control the number of messages generated for host joins. For instance, ephemeral hosts can join with fewer successor pointers, and routers can maintain active successor groups even as host sessions fluctuate. Figure 5c illustrates the cumulative distribution function (CDF) of the time required to complete a join, which is typically on the order of the network diameter due to parallel message transmission. In practice, join overhead can be further reduced by ephemeral joins and having the router manage the virtual node when the host fails or temporarily moves to another Autonomous System (AS). This join overhead is a one-time cost in the absence of churn.

#### Stretch
Figure 6a plots the stretch, measured by routing packets between random sources and destinations, as a function of the size of the pointer cache. Although small pointer caches can result in high stretch, a cache with approximately 70,000 entries (corresponding to a 9Mbit cache of 128-bit IDs) reduces the stretch to around 2. By comparison, a DNS lookup incurs a round trip to the DNS server, potentially leading to a stretch of up to 3. Figure 6b shows the fraction of packets that traverse a particular router, with the x-axis representing the rank of the router in a list sorted by the y-value for OSPF. The load at the ith most congested router in an OSPF network and the corresponding load under ROFL are plotted. The results indicate that, although load varies across routers, the difference from OSPF is minimal, suggesting that ROFL does not significantly increase the number of "hot-spots."

#### Memory Requirements
The intradomain pointer-cache memory requirements for ROFL are depicted in Figure 6c. Compared to CMU-ETHERNET, which requires 34 to 1200 times more memory, ROFL's memory requirements are significantly lower. Additionally, memory requirements for routers near the network edge are further reduced, allowing non-core routers (e.g., customer routers in access networks) to use smaller Ternary Content-Addressable Memories (TCAMs) or to cache popular destinations and additional successors. Hosting routers must store state for resident IDs, requiring between 1.3 Mbits for AS 3257 and 10.5 Mbits for AS 1239, assuming IDs are hosted at Rocketfuel-visible transit routers.

#### Failure Handling
This section discusses the overhead and time to reconverge in the presence of network-level events. The overhead triggered by host failure and mobility is comparable to the join overhead, and link/router failures that do not trigger partitions have recovery times similar to OSPF. However, if a network-layer partition occurs, the ring needs to reconverge into two separate, consistent namespaces. Given the high degree of engineering and redundancy in ISPs, partition events are rare compared to host failures. Nevertheless, we investigate this scenario to evaluate performance under extreme conditions. Figure 7 shows the overhead to recover from a Point of Presence (PoP) failure. We create partitions by varying the number of IDs per PoP between 1 and 10,000, randomly selecting a PoP, and measuring the overhead to disconnect and reconnect it to the graph. The repair process did not trigger any massive spikes in overhead, which was roughly on the same order of magnitude as rejoining all the hosts in the PoP. We repeated this experiment for 10 million partitions, and our approach converged correctly in every case, with consistency checks performed for misconverged rings in the simulator.

### Interdomain Routing

#### Join Overhead
Figure 8a illustrates the overhead to join a single host, with the x-axis varying the number of IDs in the AS and the y-axis plotting a moving average of the join overhead over the last 200 joins, averaged over three runs. Four joining strategies are compared:
1. **Ephemeral**: The host joins only at its global successor.
2. **Single-homed**: The host joins via a single path towards the core.
3. **Recursively multihomed**: The host joins via all ASes above it in the topology.
4. **Recursively multihomed+peering (Peering)**: The host also joins across all adjacent peering links.

The Peering approach provides the strongest guarantees on isolation but comes with increased join overhead.