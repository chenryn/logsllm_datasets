作者：Leeqwind  
作者博客：
这篇文章翻译自一篇多年之前的论文，原文系统地描述了 win32k 的用户模式回调机制以及相关的原理和思想，可以作为学习 win32k
漏洞挖掘的典范。早前曾经研读过，近期又翻出来整理了一下翻译，在这里发出来做个记录。原文链接在文后可见。
#### 摘要
十五年之前，Windows NT 4.0 引入了 win32k.sys 来应对旧的客户端-服务端图形子系统模型的固有限制。至今为止，win32k.sys
仍旧是 Windows 架构的基础组件之一，管理着窗口管理器（User）和图形设备接口（GDI）。为了更精确地与用户模式数据相连接，win32k.sys
使用了用户模式回调：一种允许内核反向调用到用户模式的机制。用户模式回调启用各种任务，例如调用应用程序定义的挂钩、提供事件通知，以及向/从用户模式拷贝数据等。在这篇文章中，我们将讨论涉及在
win32k 中用户模式回调的很多挑战和问题。我们将特别展示 win32k
的全局锁机制依赖性在提供一个线程安全环境时与用户模式回调的思想融合时的缺陷。虽然与用户模式回调有关的很多漏洞已被修补，但它们的复杂特性表明，仍有更多潜在的缺陷可能仍旧存在于
win32k 中。因此，为了缓解一些更加普遍的 BUG 类型，关于对用户自身来说如何预防将来可能遭受的内核攻击，我们将总结性地提出一些建议。
关键词：win32k，用户模式回调，漏洞
#### 1\. 简介
在 Windows NT 中，Win32 环境子系统允许应用程序与 Windows
操作系统相连接，并与像窗口管理器（User）和图形设备接口（GDI）这样的组件进行交互。子系统提供一组统称为 Win32 API
的函数，并遵循一个主从式模型，在该模型中客户端应用程序与更高特权级的服务端组件进行交互。
传统情况下，Win32 子系统的服务端在客户端-服务端运行时子系统（CSRSS）中执行。为了提供最佳性能，每个客户端的线程在 Win32
服务端都有一个对应的线程，在一种被称作快速 LPC 的特殊的进程间通信装置中等待。由于在快速 LPC
中配对线程之间的切换不需要内核中的调度事件，服务端线程能够在抢占式线程调度程序中轮到其执行之前，执行客户端线程的剩余时间片。另外，在大数据传递和向客户端提供对服务端管理的数据结构的只读访问时使用共享内存，用来最小化在客户端和
Win32 服务端之间进行切换的需要。
虽然在 Win32 子系统中进行了性能优化，微软仍决定在 Windows NT 4.0 版本中将大部分服务端组件移至内核模式实现。这导致了
win32k.sys
的引入，一个负责管理窗口管理器（User）和图形设备接口（GDI）的内核模式驱动程序。通过拥有更少的线程和上下文的切换（并使用更快的用户/内核模式传递）以及减少的内存需求，到内核模式的迁移极大地减少了与陈旧的子系统设计有关的开销。然而，由于与在同一特权级下的直接代码/数据访问相比，用户/内核模式传递仍是相对缓慢的，因此在客户端地址空间的用户模式部分中，例如管理器结构缓存之类的一些陈旧机制仍旧被维持下来。此外，一些管理器结构被特地存储在用户模式下，以避免环的传递。由于
win32k 需要一种访问这些信息并支持例如窗口挂钩的基础功能的途径，它需要一种途径来传递对用户模式客户端的控制。这通过用户模式回调机制实现。
用户模式回调允许 win32k
反向调用到用户模式并执行像调用应用程序定义的挂钩、提供事件通知，以及向/从用户模式拷贝数据之类的任务。在这篇文章中，我们将讨论涉及 win32k
中的用户模式回调的很多挑战和问题。我们将特别展示 win32k
在维护数据完整性（例如在依赖全局锁机制方面）方面的设计与用户模式回调的思想融合时的缺陷。最近，MS11-034 [7] 和 MS11-054 [8]
修复了一些漏洞，以实现修复多种与用户模式回调相关的 BUG
的目的。然而，由于其中一些问题的复杂特性，以及用户模式回调的普遍应用，更多潜在的缺陷很可能仍旧存在于 win32k 中。因此，为了缓解一些更加普遍的 BUG
种类，关于对微软和终端用户来说能够做的进一步缓解在将来 win32k 子系统中遭受攻击风险的事情，我们总结性地讨论一些观点。
这篇文章的剩余部分组织如下。在第 2 节，我们将审查必要的背景材料，来理解这篇文章的剩余部分，专注于用户对象和用户模式回调。在第 3 节，我们将讨论在
win32k 中的函数命名修饰，并将展示针对 win32k 和用户模式回调的某些特殊的漏洞种类。在第 4
节，我们将评估被用户模式回调触发的漏洞的利用，同时在第 5 节将尝试为普遍漏洞种类提出缓解措施以应对这些攻击。
最后，在第 6 节我们将就 win32k 的未来提供的一些想法和建议，并在第 7 节提出这篇文章的结论。
#### 2\. 背景
在这一节中，我们审查必要的背景信息来理解这篇文章的剩余部分。在移步更多像窗口管理器（专注于用户对象）和用户模式回调机制这样的特定组件之前，我们从简要地介绍
Win32k 和它的架构开始。
##### 2.1 Win32k
微软在 Windows NT 4.0 的改变中将 Win32k.sys 作为改变的一部分而引入，用以提升图形绘制性能并减少 Windows
应用程序的内存需求
[10]。窗口管理器（User）和图形设备接口（GDI）在极大程度上被移出客户端/服务端运行时子系统（CSRSS）并被落实在它自身的一个内核模块中。在
Windows NT 3.51 中，图形绘制和用户接口管理由 CSRSS
通过在应用程序（客户端）和子系统服务端进程（CSRSS.EXE）之间使用一种快速形式的进程间通信机制来执行。虽然这种设计已被进行过性能优化，但是
Windows 的图形集约化特性导致开发人员转向一种通过更快的系统调用的方式的基于内核的设计。
Win32k 本质上由三个主要的组件组成：图形设备接口（GDI），窗口管理器（User），以及针对 DirectX 的形实替换程序，以支持包括
Windows XP/2000 和 LongHorn（Vista）在内的操作系统的显示驱动模型（有时也可认为是 GDI 的一部分）。窗口管理器负责管理
Windows
用户接口，例如控制窗口显示，管理屏幕输出，收集来自键盘和鼠标的输入，并向应用程序传递消息。图形设备接口（GDI），从另一方面来说，主要与图形绘制和落实
GDI 对象（笔刷，钢笔，Surface，设备上下文，等等）、图形绘制引擎（Gre）、打印支持、ICM 颜色匹配、一个浮点数学库以及字体支持有关。
与 CSRSS 的传统子系统设计被建立在每个用户一个进程的基础上相类似地，每个用户会话拥有它自己的 win32k.sys 映射副本。会话的概念也允许
Windows 在用户之间提供一个更加严格的隔离（又称会话隔离，session isolation）。从 Windows Vista
开始，服务也被移至它自己的非交互式会话 [2] 中，用来避免一系列与共享会话相关的问题，例如粉碎窗口攻击 [12]
和特权服务漏洞。此外，用户接口特权隔离（UIPI） [1] 实施完整级别的概念并确保低特权级的进程不能干扰（例如发送消息给）拥有高完整性的进程。
为了与 NT 执行体进行适当的连接，win32k 注册若干呼出接口（Callout，PsEstablishWin32Callouts）来支持面向 GUI
的对象，例如桌面和窗口站。重要的是，win32k 也为线程和进程注册呼出接口来定义 GUI 子系统使用的每线程和每进程结构体。
    int __stdcall PsEstablishWin32Callouts(int a1)
    {
      int result; // eax@1
      PspW32ProcessCallout = *(int (__stdcall **)(_DWORD, _DWORD))a1;
      PspW32ThreadCallout = *(int (__stdcall **)(_DWORD, _DWORD))(a1 + 4);
      ExGlobalAtomTableCallout = *(_DWORD (__stdcall **)())(a1 + 8);
      KeGdiFlushUserBatch = *(_DWORD *)(a1 + 28);
      PopEventCallout = *(_DWORD *)(a1 + 12);
      PopStateCallout = *(_DWORD *)(a1 + 16);
      PopWin32InfoCallout = *(_DWORD *)(a1 + 20);
      PspW32JobCallout = *(_DWORD *)(a1 + 24);
      ExDesktopOpenProcedureCallout = *(_DWORD *)(a1 + 32);
      ExDesktopOkToCloseProcedureCallout = *(_DWORD *)(a1 + 36);
      ExDesktopCloseProcedureCallout = *(_DWORD *)(a1 + 40);
      ExDesktopDeleteProcedureCallout = *(_DWORD *)(a1 + 44);
      ExWindowStationOkToCloseProcedureCallout = *(_DWORD *)(a1 + 48);
      ExWindowStationCloseProcedureCallout = *(_DWORD *)(a1 + 52);
      ExWindowStationDeleteProcedureCallout = *(_DWORD *)(a1 + 56);
      ExWindowStationParseProcedureCallout = *(_DWORD *)(a1 + 60);
      result = *(_DWORD *)(a1 + 68);
      ExWindowStationOpenProcedureCallout = *(_DWORD *)(a1 + 64);
      ExLicensingWin32Callout = result;
      return result;
    }
GUI 线程和进程
由于并不是所有的线程都使用 GUI 子系统，预先为所有的线程分配 GUI 结构体将造成空间浪费。因此，在 Windows 中，所有的线程都作为非 GUI
线程启动（12 KB 栈）。如果某线程访问任意 USER 或 GDI 系统调用（调用号 >= 0x1000），Windows 将该线程提升为 GUI
线程（nt!PsConvertToGuiThread）并调用进程和线程呼出接口。GUI 线程在极大程度上拥有一个更大的线程栈，用来来更好地处理 win32k
的递归特性，以及更好地支持会为陷阱帧和其他元数据请求额外栈空间（在 Vista 及更新的系统中，用户模式回调使用专用的内核线程栈）的用户模式回调。
    int __stdcall PsConvertToGuiThread()
    {
      _KTHREAD *Thread; // esi@1
      int result; // eax@2
      Thread = KeGetCurrentThread();
      if ( !Thread->PreviousMode )
      {
        return 0xC000000D;
      }
      if ( !PspW32ProcessCallout )
      {
        return 0xC0000022;
      }
      if ( Thread->ServiceTable != &KeServiceDescriptorTable )
      {
        return 0x4000001B;
      }
      result = PspW32ProcessCallout(Thread->ApcState.Process, 1);
      if ( result >= 0 )
      {
        Thread->ServiceTable = &KeServiceDescriptorTableShadow;
        result = PspW32ThreadCallout(Thread, 0);
        if ( result ServiceTable = &KeServiceDescriptorTable;
      }