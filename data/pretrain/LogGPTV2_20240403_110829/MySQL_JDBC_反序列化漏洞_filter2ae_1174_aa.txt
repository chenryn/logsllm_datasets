# MySQL JDBC 反序列化漏洞
  * 该漏洞是BlackHat Europe 2019会议中的一个议题. **可以看参考1**
  * 该文章的主要优点在于对于POC的编写有更详细的过程，适合于 **新手**.  
### 使用环境  
mysql-connector-8.0.12.jar  
idea 2020.1 专业版  
windows 10  
python3  
[ysoserial](https://github.com/frohoff/ysoserial)  
wireshark  
[npcap](https://nmap.org/npcap/)  
### 基本知识  
#### JDBC简介  
JDBC（`Java DataBase Connectivity`）是Java和数据库之间的一个桥梁，是一个 **规范**
而不是一个实现，能够执行SQL语句。它由一组用Java语言编写的类和接口组成。各种不同类型的数据库都有相应的实现，本文中的代码都是针对MySQL数据库实现的。  
#### 简单实例
        String Driver = "com.mysql.cj.jdbc.Driver"; //从 mysql-connector-java 6开始
    //String Driver = "com.mysql.jdbc.Driver"; // mysql-connector-java 5
    String DB_URL="jdbc:mysql://127.0.0.1:3306/security";
    //1.加载启动
    Class.forName(Driver);
    //2.建立连接
    Connection conn = DriverManager.getConnection(DB_URL,"root","root");
    //3.操作数据库，实现增删改查
    Statement stmt = conn.createStatement();
    ResultSet rs = stmt.executeQuery("select * from users");
    //如果有数据，rs.next()返回true
    while(rs.next()){
      System.out.println(rs.getString("id")+" : "+rs.getString("username"));
#### java序列化对象特征
这个东西是为了理解下面的代码而写的.  
我们先写一个简单的demo
    public class Car implements Serializable {
        private String name;
        public Car(){
            this.name ="car";
        }
        public static void main(String[] args) throws IOException {
            Car car=new Car();
            FileOutputStream fos =new FileOutputStream("output");
            ObjectOutputStream oos =new ObjectOutputStream(fos);
            oos.writeObject(car);
            oos.close();
        }
    }
上面的代码把一个Car对象输出到了文件中.我们看一下文件的字节内容.  
可以看到我们序列化后的对象前两个字节分别是`-84`和`-19` .这个是java对象的一个标识，后面会用到这两个数字.
### 原理分析
根据原作者的思路去分析他是如何去挖掘这个漏洞的.
  * 反序列化漏洞，那就需要可以解析我们传过来的恶意对象.而不是把我们传输过来的当做字节数据处理. 所以需要找到一个可以 **readObject** 的地方
1.于是作者在这里盯上了`com.mysql.cj.jdbc.result.ResultSetImpl.getObject()`.
主要看其中重要的逻辑代码，对源代码进行了部分删减.
    public Object getObject(int columnIndex) throws SQLException {
            Field field = this.columnDefinition.getFields()[columnIndexMinusOne];
            switch (field.getMysqlType()) {
                case BIT:
                   //判断数据是不是blob或者二进制数据
                    if (field.isBinary() || field.isBlob()) {
                        byte[] data = getBytes(columnIndex);
                        //获取连接属性的autoDeserialize是否为true
                        if (this.connection.getPropertySet().getBooleanProperty(PropertyDefinitions.PNAME_autoDeserialize).getValue()) {
                            Object obj = data;
                            //data长度大于等于2是为了下一个判断.
                            if ((data != null) && (data.length >= 2)) {
                                if ((data[0] == -84) && (data[1] == -19)) {
                                    //上面已经分析过了,就是识别是不是序列化后的对象
                                    // Serialized object?                                
                                    //下面就是反序列化对象了.
                                    try {
                                        ByteArrayInputStream bytesIn = new ByteArrayInputStream(data);
                                        ObjectInputStream objIn = new ObjectInputStream(bytesIn);
                                        obj = objIn.readObject();
                                        objIn.close();
                                        bytesIn.close();
                                    }
                                }
                            }
                            return obj;
                        }
                        return data;
                    }
              ..............
  1. 现在就是找调用 `getObject`的地方了.作者找到了  
`com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor.populateMapWithSessionStatusValues()`方法。
`ServerStatusDiffInterceptor`是一个拦截器，在JDBC
URL中设定属性queryInterceptors为`ServerStatusDiffInterceptor`时，执行查询语句会调用拦截器的preProcess和postProcess方法，进而通过上述调用链最终调用`getObject()`方法。  
在JDBC连接数据库的过程中，会调用`SHOW SESSION
STATUS`去查询，然后对结果进行处理的时候会调用`resultSetToMap`.跟进去.  
这里还需要关注一个点getObject的columnindex的值，感谢fnmsd的提醒。这个值会在后面用到。  
到这里我们已经找到了一个利用链了.设置拦截器，然后进入到getObject，在getObject中，只要`autoDeserialize`
为True.就可以进入到最后readObject中.  
这也是POC中的`queryInterceptors=com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor&autoDeserialize=true`的由来.
### 复现
> 刚开始一直用别人现成的POC，结果一直出错。老大问我看懂了没有，我说看懂了，就是调试不通过.  
>  老大说我没看懂，自己只是在做一件事情，就是用别人东西试了一下，复现成功了，就觉得自己会了.但是你没会，你只是在无用功.
#### 复现的思路
在JDBC连接MySQL的过程中，执行了`SHOW SESSION
STATUS`语句.我们返回的结果需要是一个恶意的对象.那就是说我们需要自己写一个假的MYSQL服务.  
这里就会有两种写法1.根据MYSQL的协议去写服务器. 2.抓包，模拟发包过程.  
我这里选择使用第二种方法.(因为比较简单，后面发现还是要看mysql协议)
#### 数据包分析
  1. 抓包，因为我使用的是本地的MYSQL，所以抓包需要使用`npcap`.因为默认的wireshark使用的是`winpcap`，它不会抓取`本地环回`的数据包
安装好以后.如下图所示，就可以抓取本地环回包了.  
编写简单的测试用例，保证可以连接本地的数据库
    public static void main(String[] args) throws Exception{
            String Driver = "com.mysql.cj.jdbc.Driver";
            String DB_URL = "jdbc:mysql://127.0.0.1:3306/security?characterEncoding=utf8&useSSL=false&queryInterceptors=com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor&autoDeserialize=true";
            Class.forName(Driver);
            Connection conn = DriverManager.getConnection(DB_URL,"root","root");
        }
    }
图中标记的`No`为62的包就是`show session status`，也就是我们一共需要关注前面10个数据包的内容  
使用`tcp.port ==3306 && mysql` 来过滤协议  
这里面最难得应该是最后一个数据包的编写了，前面都可以直接按流量包总的数据直接抄过来的。
  1. 分析数据包  
先看一个简单的`Response OK`数据包.
所以`Response OK`的数据包内容，我们只需要发送`0700000200000002000000`  
`No.44`是一个问候报文。  
我们直接把数据发送过去就行。
#### show session status响应包的编写.
刚开始觉得是不需要了解MYSQL私有协议的，结果我错了。如果要自己编写POC，还是要看得懂的。这里会简单分析一下。  
从流量中可以看出来`show session status`属于 **request Query**
报文。对于查询数据包的响应包可以分为四种：错误包（ERR Packet）、正确包（OK Packet）、
Protocol::LOCAL_INFILE_Request、结果集（ProtocolText::Resultset）。我们上面看到的 **Response
OK** 数据包就是 **OK packet** 。  
这一部分我们主要是用的是 **结果集**
这个数据包。这里给出[官方例子](https://dev.mysql.com/doc/internals/en/protocoltext-resultset.html)  
结果集响应包的结构如图所示。
上面的官方图说明了一个结果集响应包的结构。