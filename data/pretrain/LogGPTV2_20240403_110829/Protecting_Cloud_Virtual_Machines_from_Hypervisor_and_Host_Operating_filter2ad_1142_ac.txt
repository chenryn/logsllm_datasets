HypSec can support advanced memory virtualization
features such as merging similar memory pages, KSM [46]
1362    28th USENIX Security Symposium
USENIX Association
in Linux, by splitting the work into the simple corevisor
functions which require direct access to VM data, and the more
complicated hostvisor functions which do not require access
to VM data. For example, to support KSM, the hostvisor
requests the corevisor for the hash values of a VM’s memory
pages and maintains the data structure in its address space to
support the merging algorithm. The corevisor validates the
hostvisor’s decision for the pages to be merged, updates the
corresponding VM’s sNPT, and scrubs the freed page before
granting the hostvisor access. While KSM does not provide
the hostvisor or other VMs direct access to a VM’s memory
pages, it can be used to leak some information such as whether
the contents of memory pages are the same across different
VMs. To avoid this kind of information leakage, HypSec
disables KSM support by default.
Interrupts
3.4
Hypervisors trap and handle physical interrupts to retain full
control of the hardware while virtualizing interrupts for VMs.
Accesses to the interrupt controller interface can by done
via MSRs or MMIO. Hypervisors provide a virtual interrupt
controller interface and trap and emulate VM access to the
interface. Virtual devices in the hypervisors can also raise
interrupts to the interface. However, giving hypervisors full
control of hardware poses a problem for VM security if the
hypervisor is compromised.
To protect against a compromised hostvisor, the corevisor
conﬁgures the hardware to route all physical interrupts and trap
all accesses to the interrupt controller to the corevisor, ensuring
that it retains full hardware control. However, to simplify its
TCB, HypSec delegates almost all interrupt functionality to the
hostvisor, including handling physical interrupts and providing
the virtual interrupt controller interface. Before entering the
hostvisor to handle interrupts, the corevisor protects all VM
CPU and memory state, as discussed in Sections 3.2 and 3.3.
The hostvisor has no access to and requires no VM data
to handle physical interrupts. However, VM accesses to
the virtual interrupt controller interface involve passing
parameters between the VM and the hostvisor since the
hostvisor provides the interface. On ARM, this is done using
only MMIO via the intermediate state structure discussed
in Section 3.2. On an MMIO write to interrupt controller
interface, the VM passes the value to be stored in a GPR. The
write traps to the corevisor, which identiﬁes the instruction and
memory address as corresponding to the interrupt controller
interface. The corevisor copies the value to be written from the
GPR to the intermediate VM state to make the value available
to the hostvisor. For example, when the guest OS in the VM
sends an IPI to a destination VCPU by doing an MMIO write
to the virtual interrupt controller interface, the identiﬁer of the
destination VCPU is passed to the hostvisor by copying the
value from the respective GPR to the intermediate VM state.
Similarly, on an MMIO read from the interrupt controller
interface, the read traps to the corevisor, which identiﬁes
the instruction and memory address as corresponding to the
interrupt controller interface. The corevisor copies the value
from the intermediate VM state updated by the hostvisor to the
GPR the VM is using to retrieve the value, updates the PC of
the VM to skip the faulting instruction, and returns to the VM.
Input/Output
3.5
To ease the burden of supporting a wide range of virtual devices,
modern hypervisors often rely on an OS kernel and its existing
device drivers to support I/O virtualization, which signiﬁcantly
increase the hypervisor TCB. Similar to previous work [16,33],
HypSec assumes an end-to-end I/O security approach, relying
on VMs for I/O protection. VMs can leverage secure communi-
cation channels such as TLS/SSL for network communications
and full disk encryption for storage. This allows the corevi-
sor to relax its I/O protection requirements, simplifying the
TCB. HypSec ofﬂoads the support of I/O virtualization to the
untrusted hostvisor. Since I/O data is already encrypted by
VMs, a compromised hostvisor would at most gain access to
encrypted I/O data which would not reveal VM data.
HypSec,
like other modern hypervisors, supports all
three classes of I/O devices: emulated, paravirtualized, and
passthrough devices; the latter two provide better I/O perfor-
mance. Emulated I/O devices are typically supported by hyper-
visors using trap-and-emulate to handle both port-mapped I/O
(PIO) and MMIO operations. In both cases, HypSec conﬁgures
the hardware to trap the operations to the corevisor which
hides all VM data other than actual I/O data and then allows
the hostvisor to emulate the operation. For example, to support
MMIO, the corevisor zeroes out the mappings for addresses in
the VM’s sNPT corresponds to virtual device I/O regions. Any
subsequent MMIO accesses from the VM result in a memory
access fault that traps to the corevisor. The corevisor then
securely supports MMIO accesses as discussed in Section 3.4.
We assume security aware users disable the use of emulated
devices such as the serial port, keyboard, or mouse to avoid
leaking private information to a compromised hostvisor.
Paravirtualized devices require that a front-end driver in
the VM coordinate with a back-end driver in the hypervisor;
the two drivers communicate through shared memory asyn-
chronously. HypSec allows back-end drivers to be installed as
part of the untrusted hostvisor. To support shared memory com-
munication, the front-end driver is modiﬁed to use GRANT_MEM
and REVOKE_MEM hypercalls to identify the shared data
structure and I/O memory buffers as accessible to the hostvisor
back-end driver. Since the I/O data is encrypted, hostvisor
access to the I/O memory buffers does not risk VM data.
Passthrough devices are assigned to a VM and managed by
the guest OS. To support passthrough I/O, HypSec conﬁgures
the hardware to trap sensitive operations such as Message
Signaled Interrupt (MSI) conﬁguration in BAR to trap to
the corevisor for secure emulation, while granting VMs
USENIX Association
28th USENIX Security Symposium    1363
Boot and Initialization
Secure Boot
Secure VM Boot
CPU
VM Symmetric Multiprocessing (SMP)
VCPU Scheduling
Memory
Dynamic Allocation
Memory Reclamation - Ballooning
Memory Reclamation - Swapping
DMA
Same Page Merging
Interrupts Virtualization
Hardware Assisted
Device Emulation
Paravirtualized (PV)
Device Passthrough
I/O
VM Management
Multi-VM ◦
◦
◦
◦
VM Snapshot
VM Restore
VM Migration
Xen
◦
(cid:9)
K V M
◦
(cid:9)
HypSec
◦
◦
◦
◦
◦
◦
◦
◦
◦
◦
◦
◦
◦
◦
◦
◦
◦
◦
◦
◦
◦
◦
◦
◦
◦
◦
◦
◦
◦
◦
◦
◦
(cid:11)
◦
(cid:11)
◦
◦
◦
◦
◦
◦
◦
◦
Table 1: Supported features comparison. (◦ = Supported, (cid:9) =
Not applicable, (cid:11) = Not implemented.)
direct access to the non-sensitive device memory region.
The corevisor controls the IOMMU to enforce inter-device
isolation, and ensures the passthrough device can only access
the VM’s own I/O buffer. Since we assume the hardware is not
malicious, passthrough I/O can be done securely on HypSec.
4 Implementation
We demonstrate how HypSec can improve the security of ex-
isting commodity hypervisors by applying our approach to the
mainline Linux KVM/ARM [22,23] hypervisor, given ARM’s
increasing popularity in server systems [4, 63, 87]. Table 1
compares commodity hypervisors with the current HypSec im-
plementation, showing that this security improvement comes
without compromising on hypervisor features. Since KVM
is a hosted hypervisor tightly integrated with a host OS kernel,
retroﬁtting KVM also demonstrates the viability of HypSec
in supporting an entire OS kernel as part of the hostvisor.
HypSec requires a higher-privileged CPU mode, nested
page tables for memory virtualization, and an IOMMU for
DMA protection. These requirements are satisﬁed by the
ARM architecture. ARM VE provides Hyp (EL2) mode for
hypervisors that is strictly more privileged than user (EL0)
and kernel (EL1) modes. EL2 has its own execution context
deﬁned by register and control state, and can therefore switch
the execution context of both EL0 and EL1 in software. Thus,
the hypervisor can run in an address space that is isolated
from EL0 and EL1. ARM VE provides stage 2 page tables
Figure 3: HypSec on KVM/ARM
which are nested level page tables conﬁgured in EL2 that affect
software in EL0 and EL1. ARM provides the System Memory
Management Unit (SMMU) [8] to protect DMA.
HypSec’s corevisor is initialized at machine bootup and
runs in EL2 to fully control the hardware. HypSec’s code is
embedded in the Linux kernel binary, which is veriﬁed and
loaded via UEFI. The kernel boots in EL2 and installs a trap
handler to later return to EL2. The kernel then enters EL1 so the
hostvisor can bootstrap the machine. The hostvisor allocates
resources and conﬁgures the hardware for the corevisor. The
hostvisor then makes a hypercall to the corevisor in EL2 to
enable HypSec.
The HypSec ARM implementation leverages KVM/ARM’s
split into an EL2 lowvisor and an EL1 highvisor to support the
ARM virtualization architecture. This is done because EL2
is necessary for controlling hardware virtualization features,
but Linux and KVM are designed to run in kernel mode, EL1.
Thus, the lowvisor manages hardware virtualization features
and VM-hypervisor switches, while the highvisor contains
the rest of the hypervisor and Linux. However, the lowvisor
cannot protect VM data if any other part of Linux or KVM are
compromised; with KVM/ARM, the Linux host has unfettered
access to all VM data.
As shown in Figure 3, the corevisor encapsulates the KVM
lowvisor and runs in EL2. The hostvisor, including the KVM
highvisor and its integrated Linux OS kernel, runs in EL1. The
hostvisor has no access to EL2 registers and cannot compro-
mise the corevisor or disable VM protection. HypSec leverages
ARM VE to force VM operations that need hypervisor inter-
vention to trap into EL2. The corevisor either handles the trap
directly to protect VM data or world switches the hardware to
EL1 to run the hostvisor if more complex handling is necessary.
When the hostvisor ﬁnishes its work, it makes a hypercall to
trap to EL2 so the corevisor can securely restore the VM state
to hardware. The corevisor interposes on every switch between
the VM and hostvisor, thus protecting the VM’s execution
context. Our implementation ensures that the hostvisor cannot
invoke arbitrary corevisor functions via hypercalls.
1364    28th USENIX Security Symposium
USENIX Association
VM KernelHost UserQEMUVM UserEL0EL1EL2EL3TEE KernelTASMCTEE FirmwareSMCNormal WorldSecure World (TEE)CPUProtectionHost OS KernelHighvisorMemoryProtectionBootProtectionLowvisorTAHostvisorCorevisorKVMHypSec leverages ARM VE’s stage 2 memory translation
support to virtualize VM memory and prevent accesses to pro-
tected physical memory. The corevisor routes stage 2 page
faults to EL2 and rejects illegal hostvisor and VM memory ac-
cesses. The corevisor allocates hNPTs and VMs’ sNPTs from
its protected physical memory and manages the page tables.
To secure DMA, the corevisor uses trap-and-emulate on
hostvisor accesses to the SMMU. HypSec ensures only the
corevisor has access to the SMMU hardware. The corevisor
manages the SMMU page tables in its protected memory to en-
sure hostvisor devices cannot access corevisor or VM memory,
and devices assigned to the VM can only access VM memory.
HypSec leverages the hardware features from VGIC
and KVM/ARM’s existing support to virtualize interrupts.
Our implementation supports ARM GIC 2.0. HypSec
relies on QEMU and KVM’s virtual device support for
I/O virtualization. Our implementation supports emulated
devices via MMIO, paravirtualized devices via virtio [67], and
passthrough devices. For virtio, we modiﬁed front-end drivers
to use GRANT/REVOKE_MEM hypercalls to share memory with
the hostvisor back-end drivers. To support passthrough
devices, HypSec conﬁgures the hardware to grant VMs direct
access to them. We modiﬁed the front-end virtio-balloon
driver to notify the corevisor about the pages allocated for
the balloon device. The corevisor scrubs and assigns these
pages to the hostvisor, allowing it to safely reclaim memory
as needed. Our current implementation does not support page
swapping and KSM, which are both left as future work.
HypSec supports secure VM boot using ARM TrustZone-
based TEE frameworks such as OP-TEE [61] to store the
signatures and keys securely. HypSec tasks QEMU to load the
VM boot images to VM memory, but the corevisor requires
QEMU to participate with its veriﬁed boot process. The corevi-
sor retrieves the VM boot image signatures and the user public
key from TrustZone for verifying the VM images remapped
to its address space. The corevisor uses Ed25519 [62] to
verify the boot images. HypSec builds the VM’s stage 2 page
table with mappings to the veriﬁed VM boot image. If the
veriﬁcation fails, HypSec stops the VM boot process. The
same scheme can also verify VM ﬁrmware and other binaries.
HypSec also retrieves the encrypted password which protects
the VM’s encrypted disk from either TrustZone or from the
cloud provider’s key management service. A small AES imple-