administrator
secure
    Run this command to enumerate paths on Facebook:
    运行此命令以枚举 Facebook 上的路径：
$ wfuzz -w wordlist.txt -f output.txt --hc 404 --follow http://facebook.com/FUZZ
    Let’s take a look at the results. From left to right, a Wfuzz report has the following columns for each request: Request ID, HTTP Response Code, Response Length in Lines, Response Length in Words, Response Length in Characters, and the Payload Used:
    让我们来看看结果。从左到右，每个请求的Wfuzz报告具有以下列：请求ID、HTTP响应代码、响应行长度、响应字长度、响应字符长度以及使用的有效载荷：
********************************************************
* Wfuzz 2.4.6 - The Web Fuzzer                         *
********************************************************
Target: http://facebook.com/FUZZ
Total requests: 4
===================================================================
ID           Response   Lines    Word     Chars       Payload                                                                                                                                           
===================================================================
000000004:   200        20 L     2904 W   227381 Ch   "secure"                                                                                                                                          
Total time: 1.080132
Processed Requests: 4
Filtered Requests: 3
Requests/sec.: 3.703250
    You can see that these results contain only one response. This is because we filtered out irrelevant results. Since we dropped all 404 responses, we can now focus on the URLs that point to actual paths. It looks like
     /secure
    returned a 200 OK status code and is a valid path on
     facebook.com
    .
    你可以看到这些结果只包含一个响应。这是因为我们过滤掉了无关的结果。由于我们删除了所有的404响应，现在我们可以专注于指向实际路径的URL。看起来/secure返回了200 OK状态码并且是facebook.com上的有效路径。
    Brute-Forcing Authentication
    Once you’ve gathered valid filepaths on the target, you might find that some of the pages on the server are protected. Most of the time, these pages will have a 403 Forbidden response code. What can you do then?
    一旦您在目标上收集到有效的文件路径，您可能会发现服务器上有些页面是受保护的。大多数情况下，这些页面将返回403禁止请求代码。那么您该怎么办呢？
    Well, you could try to brute-force the authentication on the page. For example, sometimes pages use HTTP’s
     basic
    authentication scheme as access control. In this case, you can use Wfuzz to fuzz the authentication headers, using the
     -H
    flag to specify custom headers:
    嗯，您可以尝试在页面上进行暴力身份验证。 例如，有时候页面使用HTTP的基本身份验证方案作为访问控制方式。在这种情况下，您可以使用Wfuzz来模糊身份验证头，使用-H标志指定自定义头：
$ wfuzz -w wordlist.txt -H "Authorization: Basic FUZZ" http://example.com/admin
    The basic authentication scheme uses a header named
     Authorization
    to transfer credentials that are the base64-encoded strings of username and password pairs. For example, if your username and password were
     admin
    and
     password
    , your authentication string would be
     base64("admin:password")
    , or
     YWRtaW46cGFzc3dvcmQ=
    . You could generate authentication strings from common username and password pairs by using a script, then feed them to your target’s protected pages by using Wfuzz.
    基本身份验证方案使用名为 Authorization 的头来传输凭据，这些凭据是用户名和密码对的 base64 编码字符串。例如，如果您的用户名和密码是 admin 和 password，您的认证字符串将是 base64（“admin：password”），即 YWRtaW46cGFzc3dvcmQ =。您可以使用脚本从常见的用户名和密码对中生成认证字符串，然后使用 Wfuzz 将其提供给目标保护页面。
    Another way to brute-force basic authentication is to use Wfuzz’s
     --basic
    option. This option automatically constructs authentication strings to brute-force basic authentication, given an input list of usernames and passwords. In Wfuzz, you can mark different injection points with
     FUZZ
    ,
     FUZ2Z
    ,
     FUZ3Z
    , and so on. These injection points will be fuzzed with the first, second, and third wordlist passed in, respectively. Here’s a command you can use to fuzz the username and password field at the same time:
    另一种暴力破解基本身份验证的方法是使用Wfuzz的--basic选项。该选项自动地构造身份验证字符串来暴力破解基本身份验证，给出用户名和密码的输入列表。在Wfuzz中，您可以用FUZZ，FUZ2Z，FUZ3Z等标记不同的注入点。这些注入点将分别通过第一个，第二个和第三个传递的字典进行模糊处理。下面是一个您可以同时模糊处理用户名和密码字段的命令：
$ wfuzz -w usernames.txt -w passwords.txt --basic FUZZ:FUZ2Z http://example.com/admin
    The
     usernames.txt
    file contains two usernames:
     admin
    and
     administrator
    . The
     passwords.txt
    file contains three passwords:
     secret
    ,
     pass
    , and
     password
    . As you can see, Wfuzz sends a request for each username and password combination from your lists:
    "usernames.txt"文件包含两个用户名：admin和administrator。"passwords.txt"文件包含三个密码：secret、pass和password。正如您所看到的，Wfuzz会为您列表中的每个用户名和密码组合发送请求：
********************************************************
* Wfuzz 2.4.6 - The Web Fuzzer                         *
********************************************************
Target: http://example.com/admin
Total requests: 6
===================================================================
ID           Response   Lines    Word     Chars       Payload
===================================================================
000000002:   404        46 L     120 W    1256 Ch     "admin – pass"
000000001:   404        46 L     120 W    1256 Ch     "admin – secret"
000000003:   404        46 L     120 W    1256 Ch     "admin – password"
000000006:   404        46 L     120 W    1256 Ch     "administrator – password"
000000004:   404        46 L     120 W    1256 Ch     "administrator – secret" 
000000005:   404        46 L     120 W    1256 Ch     "administrator – pass" 
Total time: 0.153867
Processed Requests: 6
Filtered Requests: 0
Requests/sec.: 38.99447
    Other ways to bypass authentication by using brute-forcing include switching out the
     User-Agent
    header or forging custom headers used for authentication. You could accomplish all of these by using Wfuzz to brute-force HTTP request headers.
    使用暴力破解绕过身份验证的其他方法包括更改User-Agent头或伪造用于身份验证的自定义头。通过使用Wfuzz暴力破解HTTP请求头，您可以实现所有这些功能。
    Testing for Common Web Vulnerabilities
    Finally, Wfuzz can help you automatically test for common web vulnerabilities. First of all, you can use Wfuzz to fuzz URL parameters and test for vulnerabilities like IDOR and open redirects. Fuzz URL parameters by placing a
     FUZZ
    keyword in the URL. For example, if a site uses a numeric ID for chat messages, test various IDs by using this command:
    最后，Wfuzz可以帮助你自动测试常见的Web漏洞。首先，你可以使用Wfuzz对URL参数进行FUZZ测试，测试漏洞如IDOR和开放式重定向。在URL中放置一个FUZZ关键字来Fuzz URL参数。例如，如果一个站点使用数字ID作为聊天消息，可以使用以下命令测试各种ID：
$ wfuzz -w wordlist.txt http://example.com/view_message?message_id=FUZZ
    Then find valid IDs by examining the response codes or content length of the response and see if you can access the messages of others. The IDs that point to valid pages usually return a 200 response code or a longer web page.
    然后，通过检查响应代码或响应内容长度来查找有效的 ID，并查看是否可以访问他人的消息。指向有效网页的 ID 通常返回 200 响应代码或更长的网页。
    You can also insert payloads into redirect parameters to test for an open redirect:
    你也可以将有效负载插入重定向参数中，以测试是否存在开放重定向：
$ wfuzz -w wordlist.txt http://example.com?redirect=FUZZ
    To check if a payload causes a redirect, turn on Wfuzz’s follow (
     --follow
    ) and verbose (
     -v
    ) options. The follow option instructs Wfuzz to follow redirects. The verbose option shows more detailed results, including whether redirects occurred during the request. See if you can construct a payload that redirects users to your site:
    要检查有效载荷是否导致重定向，请打开Wfuzz的跟随(--follow)和详细(-v)选项。跟随选项指示Wfuzz跟随重定向。详细选项显示更详细的结果，包括请求期间是否发生重定向。看看能否构造一个有效载荷，将用户重定向到您的站点：
$ wfuzz -w wordlist.txt -v –-follow http://example.com?redirect=FUZZ
    Finally, test for vulnerabilities such as XSS and SQL injection by fuzzing URL parameters, POST parameters, or other user input locations with common payload lists.
    最终，通过使用常见有效载荷列表对URL参数、POST参数或其他用户输入位置进行模糊测试，测试漏洞，如XSS和SQL注入。
    When testing for XSS by using Wfuzz, try creating a list of scripts that redirect the user to your page, and then turn on the verbose option to monitor for any redirects. Alternatively, you can use Wfuzz content filters to check for XSS payloads reflected. The
     --filter
    flag lets you set a result filter. An especially useful filter is
     content~
     STRING
    , which returns responses that contain whatever
     STRING
    is:
    使用Wfuzz测试XSS时，请尝试创建重定向用户到您的页面的脚本列表，然后打开详细选项以监视任何重定向。或者，您可以使用Wfuzz内容过滤器来检查反射的XSS有效负载。 --filter标志允许您设置结果过滤器。一个尤其有用的过滤器是content〜STRING，它返回包含任何STRING的响应。
$ wfuzz -w xss.txt --filter "content~FUZZ" http://example.com/get_user?user_id=FUZZ
    For SQL injection vulnerabilities, try using a premade SQL injection wordlist and monitor for anomalies in the response time, response code, or response length of each payload. If you use SQL injection payloads that include time delays, look for long response times. If most payloads return a certain response code but one does not, investigate that response further to see if there’s a SQL injection there. A longer response length might also be an indication that you were able to extract data from the database.
    在处理SQL注入漏洞时，尝试使用预先制作的SQL注入词库，并监测每个有效载荷的响应时间、响应代码或响应长度的异常情况。如果您使用的SQL注入有效载荷包括时间延迟，请寻找长时间的响应时间。如果大多数有效载荷返回特定的响应代码，但是某一个不返回，请进一步调查该响应，以查看是否存在SQL注入漏洞。较长的响应长度还可能表明您能够从数据库中提取数据。
    The following command tests for SQL injection using the wordlist
     sqli.txt
    . You can specify POST body data with the
     -d
    flag:
    以下命令使用单词列表sqli.txt测试SQL注入。您可以使用-d标志指定POST正文数据：
$ wfuzz -w sqli.txt -d "user_id=FUZZ" http://example.com/get_user
    More About Wfuzz
    Wfuzz has many more advanced options, filters, and customizations that you can take advantage of. Used to its full potential, Wfuzz can automate the most tedious parts of your workflow and help you find more bugs. For more cool Wfuzz tricks, read its documentation at
     https://wfuzz.readthedocs.io/
    .
    Wfuzz拥有更多的高级选项、过滤器和自定义功能，您可以充分利用它们。充分利用Wfuzz，它可以自动化您工作流程中最繁琐的部分，并帮助您发现更多的漏洞。要了解更多酷炫的Wfuzz技巧，请阅读它在https://wfuzz.readthedocs.io/上的文档。
    Fuzzing vs. Static Analysis
    In
     Chapter 22
    , I discussed the effectiveness of source code review for discovering web vulnerabilities. You might now be wondering: why not just perform a static analysis of the code? Why conduct fuzz testing at all?
    在第22章中，我讨论了源代码审查发现Web漏洞的有效性。你现在可能会想：为什么不仅仅对代码执行静态分析？为什么还要进行模糊测试？
    Static code analysis is an invaluable tool for identifying bugs and improper programming practices that attackers can exploit. However, static analysis has its limitations.
    静态代码分析是识别漏洞和不当编程实践的宝贵工具，攻击者可以利用它们。然而，静态分析也有其局限性。
    First, it evaluates an application in a non-live state. Performing code review on an application won’t let you simulate how the application will react when it’s running live and clients are interacting with it, and it’s very difficult to predict all the possible malicious inputs an attacker can provide.
    首先，它评估应用程序的非实时状态。在应用程序进行代码审查时，您无法模拟应用程序在运行实时且客户正在与之交互时的反应，而且很难预测攻击者可以提供的所有可能的恶意输入。
    Static code analysis also requires access to the application’s source code. When you’re doing a black-box test, as in a bug bounty scenario, you probably won’t be able to obtain the source code unless you can leak the application’s source code or identify the open source components the application is using. This makes fuzzing a great way of adding to your testing methodology, since you won’t need the source code to fuzz an application.
    静态代码分析也需要获得应用程序的源代码。在黑盒测试中，例如在漏洞赏金情境下，你可能无法获得源代码，除非你可以泄露应用程序的源代码或确定应用程序正在使用的开源组件。这使得模糊测试成为您测试方法的重要手段之一，因为您不需要源代码就可以对应用程序进行模糊测试。
    Pitfalls of Fuzzing
    Of course, fuzzing isn’t a magic cure-all solution for all bug detection. This technique has certain limitations, one of which is rate-limiting by the server. During a remote, black-box engagement, you might not be able to send in large numbers of payloads to the application without the server detecting your activity, or you hitting some kind of rate limit. This can cause your testing to slow down or the server might ban you from the service.
    当然，模糊测试并非所有漏洞检测的万能解决方案。这种技术有一定的局限性，其中之一是服务器的速率限制。 在远程黑盒测试期间，您可能无法向应用程序发送大量有效负载数据而不被服务器检测到或命中某种速率限制。 这可能会使您的测试减慢，或者服务器可能会禁止您使用该服务。
    In a black-box test, it can also be difficult to accurately evaluate the impact of the bug found through fuzzing, since you don’t have access to the code and so are getting a limited sample of the application’s behavior. You’ll often need to conduct further manual testing to classify the bug’s validity and significance. Think of fuzzing as a metal detector: it merely points you to the suspicious spots. In the end, you need to inspect more closely to see if you have found something of value.
    在黑盒测试中，通过模糊测试找到的漏洞的影响评估可能也很难。因为你无法访问代码，只能得到应用程序行为的有限样本。通常需要进行进一步的手动测试，以确定漏洞的有效性和重要性。把模糊测试想象成金属探测器：它只是简单地指向了可疑的区域。最终，您需要进行更仔细的检查，以确定是否找到有价值的东西。
    Another limitation involves the classes of bugs that fuzzing can find. Although fuzzing is good at finding certain basic vulnerabilities like XSS and SQL injection, and can sometimes aid in the discovery of new bug types, it isn’t much help in detecting business logic errors, or bugs that require multiple steps to exploit. These complex bugs are a big source of potential attacks and still need to be teased out manually. While fuzzing should be an essential part of your testing process, it should by no means be the only part of it.
    另一个限制涉及模糊测试可以发现的漏洞类别。尽管模糊测试擅长发现某些基本漏洞，比如XSS和SQL注入，有时可以帮助发现新的漏洞类型，但是它在检测业务逻辑错误或需要多步操作才能利用的漏洞方面并没有太大帮助。这些复杂的漏洞是潜在攻击的重要来源，仍需要手动梳理。虽然模糊测试应该是测试过程的重要组成部分，但绝不应该是唯一的部分。
    Adding to Your Automated Testing Toolkit
    Automated testing tools like fuzzers or scanners can help you discover some bugs, but they often hinder your learning progress if you don’t take the time to understand how each tool in your testing toolkit works. Thus, before adding a tool to your workflow, be sure to take time to read the tool’s documentation and understand how it works. You should do this for all the recon and testing tools you use.
    自动化测试工具（如Fuzzer或扫描器）可以帮助你发现一些漏洞，但是如果你不花时间理解测试工具包中每个工具的工作原理，它们往往会阻碍你的学习进程。因此，在将工具添加到工作流程之前，请确保花时间阅读工具的文档并理解其工作原理。对于您使用的所有侦查和测试工具都应该这样做。
    Besides reading the tool’s documentation, I also recommend reading its source code if it’s open source. This can teach you about the methodologies of other hackers and provide insight into how the best hackers in the field approach their testing. Finally, by learning how others automate hacking, you’ll begin learning how to write your own tools as well.
    除了阅读工具的文档之外，我还建议阅读其源代码（如果是开源的话）。这可以让你了解其他黑客的方法，并深入了解领域中最好的黑客如何进行测试。最后，学习其他人如何自动化黑客攻击，你也将开始学习如何编写自己的工具。
    Here’s a challenge for you: read the source code of the tools Sublist3r (
     https://github.com/aboul3la/Sublist3r/
    ) and Wfuzz (
     https://github.com/xmendez/wfuzz/
    ). These are both easy-to-understand tools written in Python. Sublist3r is a subdomain enumeration tool, while Wfuzz is a web application fuzzer. How does Sublist3r approach subdomain enumeration? How does Wfuzz fuzz web applications? Can you write down their application logic, starting from the point at which they receive an input target and ending when they output their results? Can you rewrite the functionalities they implement using a different approach?
    这是个挑战：阅读Sublist3r (https://github.com/aboul3la/Sublist3r/)和Wfuzz (https://github.com/xmendez/wfuzz/)工具的源代码。这两个都是用Python编写的易于理解的工具。Sublist3r是一个子域名枚举工具，而Wfuzz是一个Web应用程序模糊测试工具。Sublist3r如何处理子域名枚举？Wfuzz如何模糊测试Web应用程序？您能写下它们的应用逻辑吗，从它们接收输入目标开始，直到输出结果结束？您能否使用不同的方法重新编写它们实现的功能？
    Once you’ve gained a solid understanding of how your tools work, try to modify them to add new features! If you think others would find your feature useful, you could contribute to the open source project: propose that your feature be added to the official version of the tool.
    一旦你掌握了工具的使用方法，尝试修改它们以新增功能！如果你认为其他人会觉得你的功能有用，你可以为开源项目做出贡献：建议将你的功能添加到工具的官方版本中去。
    Understanding how your tools and exploits work is the key to becoming a master hacker. Good luck and happy hacking!
    了解你的工具和攻击手段的工作方式是成为大师黑客的关键。祝你好运并愉快地进行黑客活动！
Index
    Please note that index links to approximate location of each term.
    请注意索引链接到每个术语的近似位置。
     Symbols
    符号
     ../
    ,
     279
    ,
     287
    ,
     325
    ../，279，287，325
     .bash_profile
    ,
     81
    `.bash_profile, 81`: `.bash_profile`，81
     /etc/passwd
    ,