are nof j! Auo asiaaau u! μougnou, e se Sup yons ou s aua “uorudo Atu u]
familiar with the operating mechanism of the program, the characteristics of various
systems and architectures, and various encryption and decryption methods, can you
be more comfortable in solving reverse challenges.
---
## Page 441
5.9Summary
427
Whether it is CTF or practical work, the most important thing in reverse is to
practice and gain experience to improve. It is hoped that the reader will gain
something from reading this chapter, and practice diligently so that he or she can
learm these contents in future competitions and practical work, and eventually
become an elite player in the field of reverse.
---
## Page 442
Chapter6
PWN
You may be confused by the word “PWN". “PWN" doesn’t like Web or CRYPTO
which represent a specific meaning. In fact, “PWN" is an onomatopoeia that
represents the “bang? of a hacker gaining access to a computer through a vulnera-
bility. It is a slang term derived from the verb own. In short, the process of gaining
access to a computer through a vulnerability in binary is called PWN.
6.1Basic Knowledge for PWN
6.1.1What Is PWN?
In CTF, PWNers obtain flag by exploiting a vulnerability in a binary to cause
memory corruption in order to gain access to a remote computer. In most cases,
Pwn challenge is an executable program written in C/C++, and runs on a server.
PWNer interacts with the server through the network. The author will leave vulner-
abilities in the program, an attacker can expliot the program by sending malicious
data to the remote server, causing the program executes the code the attacker wants,
then get flag in the remote server.
6.1.2How toLearnPwN
Reverse engineering is the foundation of PWN. Sometimes binary security is used to
qa Ajoaean e sq Kumos Areug NAd pue Suaausu asiaau oq o sagan
barrier to entry, requiring a long period of study and accumulation. Which causes
many beginners to give up before they get started. Reverse engineering is necessary
for PWN, which in tum leads to a rarity of PWNer.
C The Author(s), under exclusive license to Springer Nature Singapore Pte Ltd. 2022
429
Nu1L Team, Handbook for CTFers,
htps:/doi.crg/10.1007/978-981-19-0336-6_6
---
## Page 443
430
6PWN
This chapter will focus on exploitation techniques, some basics knowledge
cannot be described in detail due to space limitations. If you don’t understand
something during the learning process, you can take some time to learn the basics.
The core knowledge of binary security consists of four main categories.
1. programming languages and compilation principles
Usually, the PWN challenges in CTF are written in C/C++. In order to write exploits,
it is mandatory to leam a scripting language like Python. In addition, PWN questions
can be written in languages other than C/C++, such as Java or Lua. Therefore, it is
necessary for PWNer to learm some widely used programming languages.
If you want to write automated vulnerability analysis tools, the knowledge of
compilation principles is extremely beneficial.
2. Assembly language
Assembly language, the core of reverse engineering, is the first hurdle that PWN
beginners must face with. There is no way around assembly language if you get
involved in the binary security. If we can understand how the CPU works, we can
understand why an attacker can make a program execute their code through a
vulnerability.
3. Operating systems and computer architectures
Operating system as the most important software running on the computer, is often
the target of attackers. In order to understand how a program is executed and how it
performs various tasks, PWNer must learn about operating systems and computer
architecture. Many of the techniques used in the CTF also require some features of
the operating system. Also, knowledge of the operating system is necessary to
reverse engineer to understand the program.
4. Data structure and algorithm
Data structures and algorithms has always been used in programming. For reverse
engineer, understanding the algorithms and data structures used by a program is
necessary if they want to understand the logic in program.
Jo opomou ao  st n! se Kns Aeuq jo ao o yonu os jou st s
so o o sbu uoeodxo snoa o ado no  us nos
moves in a martial arts novel, this knowledge is the “inner work" of martial arts. The
s! xpom 1ouu, mof anoadu o1 qed oq inq pasun nq uea[ o1 Asea ane saaou
endless. The important thing to do to improve your level is not to learm all kinds of
fancy exploitation techniques, but to take the time to leam the basics.
Unfortunately, some programmers and security profesonals are in a hurry to
learm all kinds of vulnerability exploitation techniques. Instead, they fail to learn the
core of computer science. These fundamentals are more important than exploitation
techniques if you really want to do well in CTF and get good at real-world
vulnerability.
---
## Page 444
6.1 Basic Knowledge for PWN
431
6.1.3 Linux Basic
Most of the CTF PWN challenges use the Linux environment, so it is necessary to
learm the basic knowledge of Linux. The following is an introduction to the content
of Linux related to the PWN.
6.1.3.1 Syseall and Function Call in Linux
Like 32-bit Windows programs, 32-bit Linux programs also follow the principle of
stack balancing during execution.ESP and EBP is the stack pointer and frame pointer
registers, and EAX is the retum value. We can see the argument passing follows the
traditional cdecl call convention from the source code and compilation results (see
Fig. 6.1). Function arguments are pushed into stack from right to leff, and function
arguments are cleared by the caller.
The 64-bit Linux program uses fast call to pass the parameter. The difference
between the 64-bit and 32-bit of the parameters passing is that the first six parameters
of the function are passed by the RDI, RSI, RDX, RCX, R8, and R9. If there are 
extra parameters, then use the stack to pass the same as 32-bit, see Fig. 6.2.
PuoiiC run
run proc near
var_C= dword ptr -eCh
unwind(
push
ebp
mov
ebp,esp
sub
push
esp, 18h
push
push
call
fune
ppe
mOV
[ebp+var_C], eax
esp.
ech
sub
push
[ebp+var_C]
esp,8
push
offset format
add
call
esp,10h
_printf
int run0 
leave
dou
int ret;
retn
ret = func(1,2.3);
；}// starts at 8048426
printf(*%d”,ret);
run endp
Fig, 6.1 Source code and assembly code
---
## Page 445
432
6PWN
Fig, 6.2 64-bit
assembly code
public run
run proc near
var_4= dword ptr
unwind{
push
rbp
AO
rbp,
qns
rsp,
rsp
edx,
10r
mov
mov
esi,
3
mov
edi,
call
func
1
m0V
[rbp+var_4],eax
AOW
eax,[rbp+var_4]
AOW
edi,offset format;
esi,
eax
mov
call
mov
eax,e
dou
_printf
leave
retn
edx,[#p*4+len];1en
s0V
acx,
#sp+4+addr]; addr
mOV
ebx,
sp+4+fd]：fd
mOV
eax, 3
rax, rax
:fd
ant
: LINUX - sys_read
Byscal1
: LEMUX - sys_read
Fig, 6.3 The example of read system call
The PWN also requires direct calls to the API provided by the operating system.
Unlike Windows, which uses the *win32 api° to call the system API. Simple system
calls also a feature of Linux.
In 32-bit Linux, system call calls require the int Ox80 (soft interrupt instruction).
When the instruction is executed, the system call number is stored in the EAX, and
the paramseters of the system call are stored in the EBX, ECX, EDX, ESI, EDI, and
EBP. The result of the call is stored in the EAX. In fact, a system call can be viewed
o po, jo pes ogx g, a asn m eo tonn nos e se
32-bit Linux, the 64-bit Linux system call instruction becomes syscall,the registers
for passing parameters become RDI, RSI, RDX, R10, R8, and R9, and the system 
call number corresponding to the system call is changed. An example of a read
system call is shown in Fig. 6.3.
The Linux currently has more than 300 system calls, and the number may
increase in the future as the kernel version is updated, but it is compact compared
to the complex Windows APL You can refer to the Linux help manual for finding the
call numbers and parameters that should be passed for each system call.
---
## Page 446
6.1 Basic Knowledge for PWN
433
6.1.3.2 ELF FHe Structure
The executable format for Linux is ELF (Executable and Linkable Format), which is
similar to the PE format of Windows. The ELF file format is relatively simple, and
the most important concepts that PWNer need to understand are the ELF header,
Section, and Segment.
The ELF header, which must be at the beginning of the file, indicates that it is an
ELF file and its basic information. It contains the ELF magic code, the architecture of
the program, the entry point of the program, etc. The ELF header can be displayed
with the command “readelf h", and is generally used to find the enty point of a
program.
The ELF file consists of sections, which store various data. Sections of the ELF
file are used to store a variety of different data, including:
text section  stores the code of the program.
•.rdata section  stores non-modifiable static data used by the program, such as
strings.
*.data section  stores data that can be modified by the program, such as global
variables.
•.bss section  stores the program’s modifiable data. Unlike .data, .bss is not
initialized and not occupy ELF space. Although the .bss section exists in the
od  g  p s ou s   s
starts executing, the system requests a memory unit and used as the actual .bss
-plt and .got sections  when a program calls a function from a dynamic link
section.
library (SO file), in order to get the address of the called function, these two
sections are required.
Due to the extensibility of the ELF format, it is possible to create custom sections.
ELF can include a lot of non-execution related information such as program version,
hash, or symbolic debugging information. However, the operating system does not
parse this information when executing an ELF program. What needs to be parsed is
the ELF header and the Program Head Table. The purpose of parsing the ELF header
is to determine if the program's instruction set architecture, ABI version, and other
system support information are supported. Then Linux parses the program head table
to determine which segments to load. The program header table is an array of
program head structs, each of which contains a description of the segment. Like
Windows, Linux has a memory-mapped file function. When the operating system
executes a program, it needs to load the contents of an ELF file to a specific location
in memory according to the segment information in the program header table.
Therefore, the contents of each header include the segment type, the address
which it is loaded into memory, the segment length, memory read/write atributes,
and so o0.
For example, the memory attribute of a segment stores code is readable and
executable, while a segment that stores data is read/write or read-only, etc. Note that
---
## Page 447
434
6PWN
some segments may not have corresponding data content in the ELF file, such as
uninitialized static memory. The operating system does not care about the contents
of each segment, it simply loads the segments and points the PC pointer to the
program entry.
Someone may be confused about the relationship and difference between seg-
ments and sections, they are just two forms of interpreting data in ELF. Just as a
person has multiple identities, ELF uses both segment and section formats to
describe a piece of data, but the emphasis is different. The operating system does
not need to care about the specific function in ELF, it just needs to know the data
should be loaded into which memory address and the read/write properties of the
memory, so it divides the data by segments.
The compiler, debugger, or IDA need to know what the data represents in order to
parse and divide the data by section. Usually, sections are more subdivided than
segments, such as text, rdata is often divided into a segment. Sections are used to
describe additional information about the program and have nothing to do with the
loaded into memory during program execution.
running of the program. So it not have a corresponding segment and will not be
6.1.3.3 Vulnerability Mitigation Measure for Linux
qnd ejo su  s es asn sssuedo po
attacked by a vulnerability, which are collectively referred to as vulnerability
mitigation measures.
1. NX
NX protection, also known as DEP in Windows, set permissions on program
memory at a page-by-page granularity through the MemoryProtect Unit (MPU)
mechanism of moderm operating systems. The basic rule of NX is that writable
and executable privileges are mutually exclusive. Therefore, it is not possible to
execute shellcode in an NX-protected program. All memory that can be modified is
not executable, and all code data that can be executed is unmodifiable.
GCC enables NX protection by default, which can be disabled by adding the “-z
execstack" parameter.
2. Stack Canary
Stack Canary Protection is a protection mechanism designed specifically for stack
overflow attacks. Since the goal of stack overflow attack is to overwrite the returm
address of a function in the stack. The idea of canary is to write a random data before
the function starts execution, and check if the value is changed before the function
returns. If it is changed, it is assumed that a stack overflow has occurred. The
program will simply terminate.
GCC enable Stack Canary protection by default, which can be disabled by adding
the “-fno-stack-protector” parameter.
---
## Page 448
6.1 Basic Knowledge for PWN
435
3. SLR (Address Space Layout Randomization)
The purpose of ASLR is to randomize the stack address and the load address of the
library. Between these addresses are unmapped memory that is not read-write and
executable. In this way, even if an attacker lays out a shellcode and can control pc,
the shellcode still cannot be executed because the address is unknown by the
alttacker.
ASLR is a system-level protection mechanism that can be disabled by modifying
the contents of the /proc/sys/kernel/randomize_va_space to zero.
4. PIE
Very similar to ASLR protection, the purpose of PIE protection is to make the
address of the executable program ELF randomly loaded. So, the loaded address of
the program is unknown to the attacker, thus further improving the security of the
program.
The way to enable PIE at GCC is adding parameter °-fpic pie". Newer versions
of GCC enable PIE by default, you can use “-no-pie? to disable it.
5. Full Relro
Full Relro protection is related to the Lazy Binding mechanism under Linux, which
purpose is to disable the read and write permission of .GOT.PLT table and some
 Sumo o se ue Suad sn o pe so
The way to enable Full Relro in GCC is to add the parameter “-z relro".
6.1.3.4 The Role of GOT and PLT
GOT.PLT and PLT are usually present in ELF files, ELF has no way of knowing
where libc are loaded when compiling. If a program wants to call a function in a
library, it must use .GOT.PLT and .PLT.
In Fig. 6.4, call _printf not jump to the actual _printf function. Since the program
does not determine the address of the printf function at compile time, the call
instruction actually jumps to the _printf entry in the PLT table. Figure 6.5 shows
Fig, 6.4 Sample code
mov
edi,offset unk_4006E4
mov
call
eax,0
rax,[rbp+var_18]
_isoc99_scanf
mov
AOu
edi,offset format ;"%p\n*
rsi,rax
mov
mov
eax,θ
call
eax,0
_printf
mov
mov
rdx,[rbp+var_8]
xor
rdx,fs:28h
Jz
short 1ocret_4865A
---
## Page 449
436
6PWN
plt:
plt:
4884C6
plt:
4004C0
SUBROUTINE
:Attributes: thunk
;int printf(const char *format, *.)
plt:e
plt:e6
_printf
cs:off_601020
: CODE XREF: main+461p
_printf
plt:e06