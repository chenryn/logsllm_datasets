10.3 小结
虽然GUI 版本的 IDA 仍然是功能最全面的版本，但控制台模式和批处理功能为 IDA 用户提供了极大的灵活性，可利用 IDA 的自动分析功能创建复杂的分析解决方案。
迄今为止，我们已经涵盖了 IDA 的所有基本功能，现在，是时候讨论高级功能了。在接下来的几章中，我们将介绍 IDA 的一些更加有用的配置选项，以及其他专用于改善 IDA 的二进制文件分析功能的实用工具。
第三部分 IDA高级应用
本部分内容：
第11章 定制IDA
第12章 使用FLIRT签名来识别库
第13章 扩展IDA的知识
第14章 修补二进制文件及其他IDA 限制
第11章 定制IDA
使用IDA 一段时间后，你可能有了自己的首选设置，并希望在你每次打开一个新的数据库时，IDA 都默认使用这些设置。你更改的一些选项在不同的任务中始终保持一致，而其他选项似乎在你每次加载新数据库时都需要重新设置。本章将介绍各种通过配置文件和菜单选项修改 IDA 行为的方法。我们还将指出 IDA 存储各种配置的位置，并讨论特定于数据库的设置与全局设置之间的差异。
11.1 配置文件
IDA 的许多默认行为由各种配置文件中的设置控制。多数情况下，配置文件存储在/cfg 目录中。插件配置文件是唯一的例外，它的位置为/plugins/plugins.cfg（plugins.cfg 将在第17 章中介绍）。你可能已经注意到，主要配置目录中有相当多的文件，但是绝大多数的文件都被处理器模块使用，并且只适用于分析某些类型的CPU 。其中 3 个主要的配置文件分别为 ida.cfg 、idagui.cfg和idatui.cfg 。通常，适用于所有 IDA 版本的选项保存在 ida.cfg 文件中，而idagui.cfg和idatui.cfg 中的选项分别针对 IDA 的GUI 版本和文本模式的版本。
11.1.1 主配置文件：ida.cfg
IDA 的主配置文件为 ida.cfg 。早在启动过程中，IDA 就读取了这个文件，给各种文件扩展名分配默认的处理器类型，并调整 IDA 的内存使用参数。指定处理器类型后，IDA 会再次读取这个文件，以处理其他配置选项。ida.cfg 中包含的选项适用于所有版本的 IDA ，无论你使用什么用户界面。
如第9 章所述，ida.cfg 中的常规选项包括内存调整参数（VPAGESIZE
 ）、是否创建备份文件（CTEATE_BACKUPS
 ）以及外部图形查看器的名称（GRAPH_VISUALIZER
 ）。
有时候，在处理非常大的输入文件时，IDA 可能会报告内存不足，因而无法创建新数据库。在这种情况下，增大 VPAGESIZE
 ，然后重新打开输入文件即可解决问题。
ida.cfg 中还包含大量用于控制反汇编行格式的选项，包括通过 Options▶General访问的许多选项的默认值。它们包括要显示的操作码字节数的默认值（OPCODE_BYTES
 ）、指令的缩进距离（INDENTATION
 ）、栈指针偏移量是否应与每条指令一起显示（SHOW_SP
 ）、每一行反汇编代码中显示的交叉引用的最大数量（SHOW_XREFS
 ）。其他选项则控制图形模式下反汇编代码的格式。
为已命名程序位置（相对于栈变量）指定最大名称长度的全局选项为 MAX_NAMES_LENGTH
 ，它同样位于 ida.cfg 中。这个选项的默认设置为 15 个字符，如果你输入的名称的长度超出了这个限制，IDA 将显示一条警告消息。这个默认值较小，因为有些汇编器无法处理超过 15 个字符的名称。如果你不打算在汇编器中运行 IDA 生成的反汇编代码，就可以安全地增加这个限制。
用户指定的名称中允许使用的字符列表由 NameChars
 选项控制。默认情况下，这个列表允许使用字母字符及 4 个特殊的字符：_、$、?
 和@
 。当你为位置或栈变量分配新名称时，如果 IDA 不支持你希望使用的字符，这时，你可能想要在 NameChars
 字符集中增加额外的字符。例如，如果你想要在 IDA 名称中合法使用点字符，就需要修改 NameChars
 选项。不过，你应该避免在名称中使用分号、冒号、逗号和空格字符，因为它们可能会造成混淆。通常，这些字符用于将反汇编行的各个部分分隔开来。
最后两个需要注意的选项会影响 IDA 在解析 C 头文件（见第8 章）时的行为。C_HEADER_PATH
 选项指定 IDA 在解析#include
 依赖关系时搜索的目录列表。默认情况下，这个选项会列出微软的Visual Studio使用的一个常见目录。如果你使用一个不同的编辑器，或者你的C 头文件位于非标准位置，这时你应该考虑编辑这个选项。C_PREDEFINED_MACROS
 选项可用于指定一个预处理宏默认列表，无论 IDA 在解析 C 头文件时是否遇到这些宏，它都会合并这个列表。处理那些在你无法访问的头文件中定义的宏时，这个选项提供了一种有限的解决方案。
ida.cfg 的另一半包含特定于各种处理器模块的选项。对于这些选项，IDA 提供的唯一参考信息是与每个选项有关的注释（如果有的话）。通常，ida.cfg 中特定于处理器的选项规定了 IDA 最初的“文件加载”对话框中 Process Options
 部分的默认设置。
处理ida.cfg 的最后一步是搜索一个名为/cfg/idauser.cfg 的文件。如果存在1
 ，这个文件将作为 ida.cfg 的一个扩展，其中的任何选项都将重写 ida.cfg 中的对应选项。如果不喜欢编辑ida.cfg ，你应该创建 idauser.cfg ，并在其中添加你想要重写的所有选项。此外，使用idauser.cfg ，你可以更直接地将定制的选项由一个 IDA 版本迁移到另一个 IDA 版本。例如，使用 idauser.cfg ，每次升级 IDA 后，你不再需要重新编辑 ida.cfg 文件，而只需要将现有的 idauser.cfg 复制到新版的IDA 中。
1. IDA并没有自带这个文件。如果希望IDA 找到这个文件，用户必须自己创建这个文件。
11.1.2 GUI 配置文件：idagui.cfg
GUI 版本的 IDA 的配置选项位于它们自己的文件/cfg/idagui.cfg 中。这个文件大致分为3 个部分：默认的 GUI 行为、键盘热键对应关系和 File▶Open对话框中的文件扩展名配置。本节将讨论其中几个比较重要的选项。有关所有可用选项，请查阅idagui.cfg文件，多数情况下，每个选项都有描述其用途的注释。
用户可使用 HELPFILE
 选项指定一个次要帮助文件。但是，这里指定的任何文件都不会代替IDA 的主要帮助文件。这个选项的作用是，为逆向工程任务提供补充信息。如果指定了一个补充帮助文件，按下 CTRL+F1，IDA 将打开这个文件，并在其中搜索与光标所在位置的单词相匹配的主题。如果没有找到相匹配的主题，IDA 将进入这个帮助文件的目录。比方说，除非你依赖自动注释，否则 IDA 不会提供任何与反汇编代码清单中指令助记符有关的帮助信息。如果你正分析一个x86 二进制文件，你可能希望得到一份有关 x86 指令的文档资料。如果你能够找到一个帮助文件，其中碰巧包含与每条 x86 指令有关的信息2
 ，那么，要想获得任何指令的帮助信息，只需按下一个热键即可。关于补充帮助文件，唯一需要注意的是：IDA 仅支持旧版的 WinHelp帮助文件（.hlp ），不支持将已编译 HTML 帮助文件（.chm ）作为次要帮助文件。
2. Pedram Amini 更喜欢http://pedram.redhive.com/openrce/opcodes.hlp
 中提到的WinHelp32文件。
说明
  微软Windows Vista及其后续版本并不支持 32 位WinHelp 文件，因为这些系统中没有WinHlp32.exe 文件。欲了解更多信息，请参阅微软知识库文章“917607 ”3
 。
3. 参见http://support.microsoft.com/kb/917607
 。
在使用IDA 时，人们常常提出同一个问题：“我如何使用IDA 修补二进制文件呢？”简单地说，这个问题的答案是：“你不能修补。”我们在第 14 章中再讨论这个问题的细节。使用 IDA ，你所能做的是修补数据库，以合适的方式修改指令或数据。在我们讨论编写脚本（参见第15 章）后，你会发现，修改数据库并不是十分困难。但是，如果你对于学习 IDA 的脚本语言不感兴趣，或者缺乏相关的背景知识，那该怎么办呢？别担心，IDA 提供一个数据库修补菜单，默认情况下，IDA 隐藏了这个菜单。DISPLAY_PATCH_SUBMENU
 选项用于显示或隐藏 IDA 的补丁菜单，这个菜单通过Edit ▶Patch Program 访问。我们将在第 14 章中讨论这个菜单中的选项。
IDA 工作区底部的单行输入框称为 IDA 命令行。你可以用 DISPLAY_COMMAND_LINE
 选项控制是否显示该输入框。默认情况下会显示该命令。如果你的屏幕空间紧张并且预计不需要输入单行脚本，那么关闭此功能可帮助你获得少量的 IDA 显示空间。需要注意的是，这个命令行并不允许你执行操作系统命令，就像你在命令提示符后输入命令那样。
idagui.cfg的热键配置部分用于指定 IDA 操作与热键组合之间的对应关系。热键重新分配可用在许多情况下，包括通过热键执行额外的命令，将默认的热键组合更改为更加易于记忆的热键组合，或者更改某些热键，避免它们与操作系统或终端应用程序（主要用于控制台版本的 IDA ）使用的其他热键造成冲突。
这部分几乎列出了 IDA 通过菜单项或工具栏按钮提供的每一个选项。遗憾的是，这里的命令名称与 IDA 的菜单文本并不匹配，因此，你可能需要付出一定的努力，才能将配置文件中的选项与特定的菜单选项对应起来。例如，Jump▶Jump to Problem（跳转▶跳转到问题）命令等同于idagui.cfg 中的 JumpQ 选项（这恰好与它的热键 CTRL+Q 相匹配）。此外，许多命令带有描述其用途的注释，但许多命令根本就没有任何注释，因此，你必须根据命令在配置文件中的名称，来决定这个命令的作用。有助于你确定与一个配置文件操作对应的菜单项的技巧是在 IDA 的帮助系统中搜索
 该操作。一般而言，通过这种搜索，你就可以找到与这项操作对应的菜单项的说明。
下面是在 idagui.cfg中分配热键的例子：
"Abort" = 0 // Abort IDA, don't save changes  
"Quit" = "Alt-X" // Quit to DOS, save changes
第一行代码是 IDA 的Abort 命令的热键分配，在这里，它并没有分配到热键。不带引号的 0值表示IDA 没有给命令分配热键。第二行代码是 IDA 的Quit
 操作的热键分配。热键组合用一个带引号的字符串指定。在 idagui.cfg中有大量热键分配的例子。
idagui.cfg 的最后一个部分将文件类型说明与它们相关的文件扩展名关联起来，并指定在File▶Open对话框的文件类型下拉列表中显示哪些文件类型。配置文件已经描述了大量文件类型，但是，如果你需要经常使用一种配置文件并未描述的文件类型，可能需要编辑文件类型列表，将你的文件类型添加到这个列表中。FILE_EXTENSIONS
 选项描述了 IDA 已知的所有文件关联（file association）。例如，下面的代码行是文件类型关联的一个典型例子。
CLASS_JAVA,  "Java Class Files",                           "*.cla*;*.cls"
这个代码行包括 3 个以逗号分隔的部分：关联的名称（CLASS_JAVA
 ）、一段说明和一个文件名模式。在文件名模式中可以使用通配符，多个模式则用分号分隔开。另一种文件关联可将几个现有的关联组合到单独一个关联中。例如，下面的代码行将所有名称以EXE_
 开头的关联组合到一个名为EXE
 的关联中。
EXE,         "Executable Files",                           EXE_*
值得注意的是，这里的模式指示符并没有带引号。我们可以定义自己的文件关联，如下所示：
IDA_BOOK,    "Ida Book Files",                             "*.book"
我们可以为关联选择任何名称，只要 IDA 还没有使用这个名称。但是，仅仅将一个新的关联添加到FILE_EXTENSIONS
 列表中，这个关联并不会在File▶Open对话框中显示出来。DEFAULT_FILE_FILTER
 选项列出了所有在 File▶Open对话框中出现的关联的名称。要使新创建的关联生效，还需要将 IDA_BOOK
 添加到DEFAULT_FILE_FILTER
 列表中。
与idauser.cfg 文件一样，idagui.cfg的最后一行提供一条指令来包含一个名为/cfg/ idauserg.cfg 的文件。如果不想编辑 idagui.cfg，就需要创建 idauserg.cfg 文件，并将你希望重写的所有选项添加到这个文件中。
11.1.3 控制台配置文件：idatui.cfg
对控制台版本的 IDA 用户而言，与 idagui.cfg类似的文件为/cfg/idatui.cfg。这个文件的布局和功能与 idagui.cfg非常相似。此外，它的热键分配方法也和 idagui.cfg完全相同。既然这两个文件如此相似，这里我们仅介绍它们之间的差异。
首先，DISPLAY_PATCH_SUBMENU
 和DISPLAY_COMMAND_LINE
 这两个选项在控制台版本中无效，因此，idatui.cfg 文件中并不包含这些选项。相对于GUI 版本中的File ▶Open对话框，控制台版本中的对话框要简单得多，因此，idatui.cfg 文件中没有idagui.cfg 文件所包含的全部文件关联命令。
另一方面，有少数选项仅对
 控制台版本的 IDA 有效。例如，你可以用 NOVICE
 选项让IDA 以入门模式启动，在这种模式中，IDA 禁用了它的一些复杂功能，以降低学习 IDA 的难度。入门模式与完整模式的一个明显不同在于，入门模式几乎不提供任何子窗口。
控制台用户需要更多地依赖于热键。为实现常用热键组合的自动操作，控制台模式的IDA 提供了键盘宏定义语法。你可以在 idatui.cfg 文件中找到几个宏实例，不过/cfg/idausert.cfg（控制台版本中与 idauserg.cfg 对应的文件）才是你保存你所创建的宏的理想位置。默认的 idatui.cfg文件中包含一个样本宏，如下所示（在真正的 idatui.cfg 中，这个宏并没有注释）：
➊  MACRO     ➋ "Alt-H"        // this sample macro jumps to "start" label  
   {  
              "G"  
              's' 't' 'a' 'r', 't'  
              "Enter"  
    }
宏定义由 MACRO
 关键字（➊）引入，后面紧跟这个宏的热键（➋）。宏序列在大括号中指定，它是一个由键名字符串或字符组成的序列，这些字符串或字符可能本身就是热键组合。这个宏使用ALT+H激活，它打开通过热键 G 打开的 Jump to Address对话框，然后在对话框中输入 start标签，一次一个字符，最后使用 ENTER键关闭这个对话框。注意，我们不能使用语法“start ”输入符号的名称，因为 IDA 可能会将它当成是热键的名称，因而导致错误。
说明
  宏和入门模式对 GUI 版本的 IDA 无效。
最后，关于配置文件选项，需要注意的是，如果 IDA 在解析配置文件时遇到任何错误，它都会立即终止，并显示一条错误消息，尝试描述问题的本质。在这个问题得到修复之前，你无法启动IDA 。
11.2 其他IDA 配置选项
IDA 拥有大量必须通过用户界面配置的其他选项。格式化反汇编行的选项已经在第7 章中讨论。其他 IDA 选项通过Options菜单访问。多数情况下，你修改的任何选项仅适用于当前打开的数据库。关闭数据库后，这些选项的值将存储在相关的数据库文件中。IDA 的颜色（Options▶Colors ）和字体（Options▶Font ）是两个例外，因为它们属于全局选项，一旦设置，将适用于IDA 将来的所有会话。Windows 版本IDA 的选项值保存在 Windows 注册表的HKEY_CURRENT_USER\Software\Hex-Rays\IDA注册表项中。至于非 Windows 版本的IDA ，这些值保存在根目录的一个名为$HOME/.idapro/ida.cfd 的专有文件中。
另一项注册表设置与对话框有关，针对这些对话框，你选择了 Do not display this dialog box again（不再显示该对话框）选项。有时候，这个消息以复选框的形式出现在一些消息对话框（你将来不希望见到它们）的右下角。如果你选择这个选项，IDA 将在HKEY_CURRENT_USER\ Software\Hex-Rays\IDA\Hidden Messages 注册表项下创建一个注册表值。不久以后，如果你想要再次显示隐藏的对话框，就需要删除这个注册表项下对应的值。
11.2.1 IDA 颜色
在IDA 窗口中，几乎每一个项目的颜色都可以通过Options▶Colors 对话框进行定制，如 图11-1 所示。
图11-1 颜色选择对话框
Disassembly选项卡控制反汇编窗口中每个反汇编行的不同部分所使用的颜色。上面的窗口列出了可以在反汇编窗口中显示的每一种文本类型（➊）。选择窗口中的一个项目，➋ 处将列出该项目的类型。使用 Change Color 按钮，可以给任何项目分配颜色。
颜色选择对话框中的选项卡可用于为导航栏、调试器、文本反汇编视图左侧的跳转箭头、以及图形视图中的各种组件分配颜色。具体来说，Graph选项卡控制图形节点、标题栏、连接每个节点的边的颜色，而 Disassembly选项卡则控制图形视图中反汇编文本的颜色，Misc 选项卡用于定制IDA 消息窗口的颜色。
11.2.2 定制IDA 工具栏
除了菜单和热键外，GUI 版本的 IDA 还提供大量的工具栏按钮，它们主要分布在 IDA 的20多个工具栏上。通常，工具栏位于 IDA 菜单栏下面的主工具栏区域。用户可以通过View▶Toolbars（查看▶工具栏）菜单访问两种预定义的工具栏模式：基本模式（该模式启用 7 个IDA 工具栏）和高级模式（该模式启用每一个 IDA 工具栏）。根据你的个人需要，你可以分离、拖动和重新定位每个工具栏，将其放置到屏幕的任何位置。如果不需要某个工具栏，你可以使用 ViewToolbars菜单将其从窗口中完全删除，如图 11-2 所示。
图11-2 工具栏配置菜单
右击IDA 窗口中工具栏右边的空白区域，这个菜单也会出现。关闭主工具栏，所有的工具栏将从窗口中消失。如果你需要为反汇编窗口提供最大的屏幕空间，就可以选择这个选项。你对工具栏布局所做的任何更改将保存在当前数据库中。如果这时打开另一个数据库，工具栏将恢复上一次保存这个数据库时的布局。如果你打开一个新的二进制文件，以创建一个新数据库，这时工具栏将恢复到 IDA 当前的默认工具栏设置。
如果你选定了一种你喜欢的工具栏布局，并且希望将其作为默认设置，那么，你应该使用Windows▶Save Desktop将当前的桌面布局保存为默认桌面，这个命令打开如图11-3 所示的对话框。
图11-3 Save disassembly desktop 对话框
每次保存桌面配置时，IDA 会要求你为这种配置提供一个名称。如果选择 Default 复选框，当前的桌面布局将成为所有新数据库以及你复原的桌面（如果你选择 Windows▶Reset desktop）的默认布局。要将窗口恢复到你定制的一个桌面，请选择 Windows▶Load Desktop ，并选择你想要加载的布局。在使用各种不同尺寸和/ 或分辨率的显示器时，保存和恢复桌面特别有用，使用不同扩展坞或连接到投影仪以播放演示文稿的笔记本电脑时，经常会遇到这种情况。
11.3 小结
最初使用IDA 时，你可能对它的默认行为和默认的 GUI 布局感到非常满意。逐步熟悉 IDA的基本功能后，你肯定需要找方法对 IDA 进行定制，以满足自己的特殊要求。仅仅通过一章内容，我们不可能全面介绍 IDA 提供的每一个选项，但是，我们提供了一些线索，以帮助你找到这些选项。我们还重点介绍了那些你在操控 IDA 时可能会感兴趣的选项。至于其他有用的选项，还有待好奇的读者去深入探索。
第12章 使用FLIRT 签名来识别库
现在，我们将开始讨论IDA 的高级功能。同时，我们将探讨在“最初的自动分析已经完成”1
 之后，该执行什么操作。本章将讨论各种技巧，以识别标准的代码序列，如静态链接二进制文件中的库代码，或者编译器插入的标准初始化代码和辅助函数。
1. 在自动处理新加载的二进制文件之后，IDA 会在输出窗口中生成这条消息。
在着手对二进制文件进行逆向工程时，你最不应该做的事情是，浪费时间逆向工程那些你只需阅读一本手册、一段源代码或搜索一下因特网就可以更轻易地了解其行为的库函数。静态链接二进制文件造成的问题在于，应用程序代码与库代码之间的区别很模糊。在静态链接二进制文件中，所有库与应用程序代码混杂在一起，组成了一个庞大的可执行文件。不过，有许多工具可以帮助我们在 IDA 中识别和标记库代码，使我们可以把注意力放在应用程序自身的代码上。
12.1 快速库识别和鉴定技术
库快速识别和鉴定技术，简称 FLIRT1
 ，是 IDA 用于识别库代码的一组技术。FLIRT 的核心是各种模式匹配算法，这些算法使 IDA 能够迅速确定：一个经过反汇编的函数是否与 IDA 已知的许多签名中的某一个相匹配。IDA 自带的签名文件保存在—/sig目录中，其中的大多数库是常见的 Windows 编译器自带的库，当然其中也包括一些非 Windows 签名。
1. 参见http://www.hex-rays.com/idapro/flirt.htm
 。
签名文件利用一种自定义格式将大量签名数据压缩并封装到一个特定于 IDA 的头文件中。多数情况下，签名文件名并不能清楚说明相关签名是由哪个库生成的。根据签名文件的创建方式，签名文件中可能包含一个描述其内容的库名称注释。查看从某个签名文件中提取出来的ASCII内容的前几行代码，通常可以找到这段注释。通常，下面的Unix 命令2
 可以在第二或第三行输出结果中显示上述注释：
2. strings
 命令已在第2 章讨论，而head命令用于查看其输入的前几行（这里为3 行）代码。
# strings sigfile  | head -n 3
在IDA 中，有两种方法可以查看与签名文件有关的注释。首先，你可以通过View ▶Open Subviews ▶Signatures访问应用于某个二进制文件的签名列表。其次，在手动签名应用程序中，所有签名文件的列表将会显示出来，你可以通过File ▶Load File ▶FLIRT Signature File打开这个列表。
12.2 应用FLIRT 签名
初次打开一个二进制文件时，IDA 会尝试对这个文件的入口点应用特殊的签名文件，即启动签名。因为由各种编译器生成的入口点代码各不相同，因此，我们可以通过匹配入口点签名来识别用于生成某个特定二进制文件的编译器。
Main与_start