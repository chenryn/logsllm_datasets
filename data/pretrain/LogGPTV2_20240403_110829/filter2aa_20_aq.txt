读取文件
编辑文件
通过 HTTP 请求攻击其他服务器
此处举一个读取文件的例子。同样使用 44-001.php 作为范例。
首先使用如下 URL 打开页面。
http://example.jp/44/44-001.php?author=';copy+books(title)+from+'/etc/passwd'--
此时会调用如下 SQL 语句。
copy books(title) from '/etc/passwd'
这里的 COPY 语句是 PostgreSQL 数据库的扩展功能，能够将文件内容存入表中。此例中 /etc/passwd 就被存入了 books 表的 title 列。执行 COPY 语句需要 PostgreSQL 的管理员权限以连接数据库。
为了确认效果，接下来我们用如下 URL 打开页面。
http://example.jp/44/44-001.php?author='or+author+is+null--
受 SQL 注入攻击的影响，页面显示 author 列的值为 NULL 的行。结果如下图所示。
图 4-35 /etc/passwd 被存入数据库
/etc/passwd 的内容被保存至数据库。
由此可见，在某些情况下，SQL 注入攻击可能会导致服务器上的文件内容经由数据库泄漏至外界。
SQL 注入攻击造成的影响因数据库引擎的不同而各异。但不管是什么样的数据库引擎，SQL 注入都会导致数据库内的数据被外界读取。关于各数据库引擎的影响，可以参考金床所著的《Web 应用程序安全》[2]。
综上所述，SQL 注入攻击能导致数据库内的任意数据被泄漏或篡改，因此，SQL 注入漏洞可谓贻害无穷。
专栏：数据库中表名与列名的调查方法
通过 SQL 语句能够调查数据库内存在哪些表和列。SQL 标准规格中规定了名为 INFORMATION_SCHEMA 的数据库，使用其中的 tables 和 columns 等视图（假想表），就可以从中读取表和列的定义。
图 4-36 展示了通过 SQL 注入攻击来使用 columns 视图使页面显示 user 表定义信息的范例。一般攻击者都会使用这种方法来探索数据库。图中的页面上显示了表名、列名和类型名。**
http://example.jp/44/44-001.php?author='+union+select+table_name,column_name,data_type,null,null,null,null+from+information_schema.columns+order+by+1--
图 4-36 使用 SQL 注入攻击显示表定义
安全隐患的产生原因
SQL 注入攻击能够以开发者意想不到的方式改变 SQL 语句的构造，其中很大程度上都是因为字面量 20
 的缘故。字面量指的是 SQL 语句中的固定值，比如字符串 'Shakespeare'
 和数值 -5
 都是字面量。SQL 中每种数据类型都有相应的字面量，其中最常用的是字符串字面量和数值字面量 21
 。
20
 字面量以外的其他原因造成的 SQL 注入攻击，请参考“各种列的排序”小节。
21
 除此以外还有布尔型字面量和日期时间字面量等。
字符串字面量的问题
SQL 标准规格中规定字符串字面量必须用单引号括起来。而若要在字符串字面量内使用单引号，就需要使用连续两个单引号来表示。这被称为单引号转义。因此，将“O'Reilly”用于 SQL 的字符串字面量时就需写成 O''Reilly
 。
然而，在有 SQL 注入漏洞的程序中，由于没有转义单引号，所以就导致拼接后的 SQL 语句如下。
SELECT * FROM books WHERE author='O'Reilly
'
将此 SQL 语句的后半部分放大，如下图所示。
图 4-37 上述 SQL 语句的后半部分
“O'Reilly
 ”中的单引号 22
 使得字符串字面量结束，后面的“Reilly'
 ”被排除出了字符串字面量。这部分在 SQL 语句中没有意义，所以就会产生语法错误。
但是，如果将“Reilly'
 ”换成有意义的 SQL 语句会如何呢？其实这正是 SQL 注入攻击的方法。SQL 注入攻击中，被插入的单引号等排除出的字符串是有意义的 SQL 语句，因此就能够被应用程序调用而执行特定操作。
为了便于理解，我们将 SQL 注入攻击的字符串比喻为笼中的狮子，如下图所示。无论攻击字符串多么危险，只要它被解释为字面量就安然无事。而如果狮子（攻击字符串）被放出了笼子（字面量），它就会执行攻击。
图 4-38 SQL 注入攻击字符串
针对数值的 SQL 注入攻击
前面介绍了针对字符串字面量的 SQL 注入攻击，而数值字面量也会遭受 SQL 注入攻击。Web 开发中普遍使用的脚本语言（PHP、Perl、Ruby 等）多为动态类型语言，不限制变量的类型。因此，理应填入数值的地方就有可能会被填入其他类型的字符。比如，假设以下 SQL 语句中 age 列的类型为整数型，存储的是职员的年龄。
SELECT * FROM employees WHERE age prepare($sql, array('text'));
  // 执行 SQL 语句。execute 方法的参数为参数的实际值（绑定值）
  $rs = $stmt->execute(array($author));
  // 省略显示的部分。
  $mdb2->disconnect(); // 切断数据库连接
?>
在上述脚本中，author = ?
 部分使用了占位符。此外，在调用 execute
 方法时指定了实际的参数值。而将值分配给占位符这一操作就被称为绑定变量。
专栏：采用 MDB2 的原因
PHP 中连接 MySQL 或 PostgreSQL 等数据库引擎的程序库种类繁多，而笔者在试用了很多程序库后发现，PEAR 类库中的 MDB2 的安全性最好。原因如下（调查时间为 2010 年 12 月）。
MDB2 连接数据库时能够方便地指定字符编码。PDO 等其他程序库指定文字编码非常不便
提供有占位符和转义等直接关系到安全性的功能
被 PEAR 合并的其他程序库（例如 DB）都已停止后续维护
为什么使用占位符会安全
占位符依据实现方法可分为静态占位符和动态占位符两类。下面我们就来看一下为什么使用占位符能够安全地调用 SQL 语句。
静态占位符
静态占位符 24
 的绑定变量操作在数据库引擎中执行。含有占位符的 SQL 语句被直接发送至数据库引擎，数据库引擎执行编译等准备工作后确定 SQL 语句。随后绑定值也被发送至数据库引擎，数据库引擎将收到的值填充进 SQL 语句后将其执行（图 4-39）。
图 4-39 静态占位符
由于 SQL 语句是在包含占位符的状态下被编译的，因此，从理论上来说，之后 SQL 语句就不可能再被改变。
动态占位符
动态占位符的方式为，首先在处理 SQL 的程序库中执行绑定变量操作，然后再将 SQL 语句发送给数据库引擎处理。绑定变量时字面量会被妥善处理，因此只要处理中没有 Bug 就不会遭受 SQL 注入攻击（图 4-40）。
图 4-40 动态占位符
由此可见，无论使用静态还是动态占位符都能消除 SQL 注入漏洞。但就理论上来说，静态占位符能够完全消除 SQL 注入漏洞出现的可能性，所以应当尽可能地采用静态占位符。
动态占位符可能会因程序问题而造成 SQL 注入漏洞，比如 JVN#5974872325
 。详情可参考笔者的博客文章 [4]。
参考：LIKE 语句与通配符
使用 LIKE 语句进行模糊查询时由通配符引发的问题，经常容易与 SQL 注入混为一谈。指定 LIKE 语句的查询模式时，_ 匹配任意 1 个字符，% 匹配任意 1 个或多个字符。_ 和 % 就被称为通配符。
使用 LIKE 语句进行查询时，如果字符中含有 _ 或 %，就必须对这些通配符进行转义。不进行转义的话就会出现很多问题，但这并不是 SQL 注入，而很多人却经常将两者混淆。
接下来就让我们首先通过示例看一下 LIKE 语句的用法。下面是一条用来查询 name 列中包含“山田”的行的语句（部分匹配）。
WHERE name LIKE '% 山田 %'
要在 LIKE 语句中查询 _ 或 %，就需要使它们不再担任通配符的角色，即对其进行转义。转义时使用的字符应该使用 ESCAPE 语句指定 26
 。下面的例子中就使用了 # 作为转义字符。
例如，下面是一条查询 name 列中包含 % 的行的语句。第一个和最后一个 % 为通配符，#% 表示查询对象字符为 %。
WHERE name LIKE '%#%%' ESCAPE '#'
虽然转义通配符与 SQL 注入漏洞并无直接关联，但却是正确处理所必需的步骤。
转义通配符的 PHP 函数示例如下所示。它适用于 PostgreSQL 和 MySQL。前提为 PHP 的内部字符编码设置无误。
function escape_wildcard($s) {
  return mb_ereg_replace('([_%#])', '#\1', $s);
}
其他数据库引擎中需要转义的字符则略有不同，如下表所示。
表 4-10 需要转义的通配符
数据库
转义对象字符
补充说明
MySQL
\_ %
PostgreSQL
\_ %
Oracle
\_ % \_ %
全角字符也需转义
MS SQL Server
\_ % [
见 ※1
IBM DB2
\_ % \_ %
全角字符也需转义
※1 MS SQL Server 中能够使用 [a-z] 这种类似于正则表达式的通配符。[a-z] 匹配 1 个小写字母。因此，要查询 [ 本身就必须将 [ 转义。参考：http://msdn.microsoft.com/zh-cn/library/ms179859.aspx
调查时上述数据库的版本如下。
表 4-11 调查时使用的数据库版本
数据库
版本
参考网页
MySQL
5.5