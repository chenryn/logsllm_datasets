11). If the RSL is valid and no push entries were added, a
new RSL push entry is created (lines 13-14). The newly
created entry will contain: (1) the new location of the
reference being pushed; (2) the nonces from the fetch
nonce bag; (3) a hash of the previous push entry; and (4)
the developer’s signature over the newly created push en-
try. The newly created entry is then appended to the RSL
(line 16), and the nonce bag is cleared (line 15).
Once this is done, the remote RSL must be updated
and local changes must be pushed to the remote reposi-
386  25th USENIX Security Symposium 
USENIX Association
8
PROCEDURE: Secure push
Input: LocalRSL; related commits; pushed reference X
Output: result: (success/fail/invalid)
1: repeat
2:
3:
result ← fail
(RemoteRSL, nonce bag) =
Retrieve RSL and nonce bag from remote repo
if (RSL Validate(RemoteRSL, nonce bag) == false)
// Retrieved RemoteRSL is invalid
// Must take necessary actions!
return invalid
if (new push entries for reference X in RemoteRSL) then
// Remote repository contains changes
// User must fetch changes and then retry
return fail
then
else
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
prev hash = hash last push entry(RemoteRSL)
new RSL Entry = create push Entry(prev hash,
nonce bag, X)
nonce bag.clear()
RemoteRSL.addEntry(new RSL entry)
result = Store in remote repo(RemoteRSL,
nonce bag)
if (result == success) then
18:
19:
20:
21:
22:
23: until (result == success)
// The remote RSL has no new entries
push related commits
LocalRSL = RemoteRSL
return success
tory (lines 17-20). Notice that these steps are performed
under a loop, because other developers might be pushing,
which is not an atomic operation in older versions of Git
(this is required to meet DG3).
Depending on the result of the Secure push procedure,
a developer’s actions correspond to the following:
• success: the push is successful. No further ac-
tions are required from the user (line 22).
• fail:
the push fails because there are changes
in the remote repository that must first be fetched
and merged locally before the user’s changes can be
pushed (line 11).
• invalid: the RSL validation has failed. The algo-
rithm detects a potential attack and notifies the user,
who must then take appropriate measures (line 7).
5.3.2 The Nonce Bag
When retrieving the changes from a remote repository,
a developer must also record her perceived state of the
repository. Our scheme requires that all the user fetches
be recorded in the form of a fetch nonce bag, i.e., an
unordered list of nonces. Each nonce is a random num-
ber that corresponds to a fetch from the main repository.
Every time a user fetches from the main repository, she
updates the nonce bag. If the user has not fetched since
the last push, then she generates a new nonce and adds it
to the nonce bag; otherwise, the user replaces her nonce
in the nonce bag with a new nonce.
Each nonce in the nonce bag serves as a proof that a
user was presented a certain RSL, preventing the server
from executing an Effort Duplication attack and pro-
viding repository freshness as per DG1. To fetch the
changes from the remote repository, a developer must ex-
ecute the Secure fetch procedure.
The first steps of the Secure fetch procedure consist
of retrieving the remote RSL, performing a regular git
fetch, and ensuring that the latest push entry in the
RSL points to a valid object in the newly-fetched ref-
erence (lines 4-11). Note that this check is performed
inside a loop because push operations are not atomic in
older versions of Git (lines 2-12). A user only needs to
retrieve the entries which are new in the remote RSL and
are not present in the local version of the RSL.
If this check is successful, the nonce bag must be up-
dated and stored at the remote repository (lines 14-20).
Note that all these steps are also in a loop because other
developers might update the RSL or the nonce bag since
it was last retrieved (lines 1-21).
Finally, the RSL is further validated for consistency
(line 22), and the local RSL is updated. We chose to
validate the RSL at the end of Secure fetch and outside
of the loop in order to optimize for the most common
case. Once Secure fetch is successfully executed, a de-
veloper can be confident that the state of the repository
she fetched is consistent with her peers. Otherwise, the
user could be the victim of one of the attacks in Sec. 4.
5.3.3 RSL validation
The RSL Validate routine is used in Secure push and
Secure fetch to ensure the presented RSL is valid. The
aim of this routine is to check that push entries in a
given RSL are correctly linked to each other, that they
are signed by trusted developers, and that nonces corre-
sponding to a user’s fetches are correctly incorporated
into the RSL.
Note that these actions mirror a user’s actions in the
case of a regular Git push operation, as suggested by
DG2. By doing this, we effectively follow the existing
Git workflows while providing better security guarantees
at the same time.
First, the procedure checks that the nonce correspond-
ing to the user’s last fetch appears either in the nonce bag
or was incorporated into the right push entry (i.e., the first
new push entry of the remote RSL) (lines 1-2). The algo-
rithm then checks if the new push RSL entries from the
USENIX Association  
25th USENIX Security Symposium  387
9
PROCEDURE: Secure fetch
Input: reference X to be fetched
Output: result: (success/invalid)
1: repeat
2:
3:
4:
store success ← false
repeat
(RemoteRSL, nonce bag) =
f etch success ← true
Retrieve RSL and nonce bag from remote repo()
f etch success ← false
// This is a regular “Git fetch” command.
// Branch X’s reference is copied to FETCH HEAD
fetch reference X
C ← RemoteRSL.latestPush(X).refPointer
if (C == FETCH HEAD) then
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
21: until (store success == true)
22: if (RSL Validate(RemoteRSL, nonce bag) == false)
save random nonce locally(NONCE)
nonce bag.add(NONCE)
// Storing the nonce bag at the remote repository
// might fail due to concurrency issues
store success = Store in remote repo(nonce bag)
until ( f etch success == true)
// Update the nonce bag
if NONCE in nonce bag then
nonce bag.remove(NONCE)
then
23:
24:
25:
26: else
27:
28:
// Retrieved RemoteRSL is invalid
// Must take necessary actions!
return invalid
LocalRSL = RemoteRSL
return success
remote RSL are correctly linked to each other and that
the first new remote push entry is correctly linked to the
last push entry of the local RSL (the check is based on
the prev hash field) (lines 5-9). Finally, the signature on
the last RSL push entry is verified to ensure it was signed
by a trusted developer; since all RSL entries are correctly
linked, only the last entry signature needs to be verified.
How to handle misbehavior? If the RSL validation fails
due to a misbehaving server, the user should compare
the local RSL with the remote RSL retrieved from the
remote repository and determine a safe point up to which
the two are consistent. The users will then manually roll
back the local and remote repositories to that safe point,
and decide whether or not to continue trusting the remote
repository.
6 Discussion
6.1 Trust and revoke entries
Developers’
keys may
be
distributed
trust/revoke RSL entries.
To use these entries,
using
the
PROCEDURE: RSL Validate
Input: LocalRSL (RSL in the local repository); RemoteRSL;
nonce bag
Output: true or false
1: if (NONCE not in nonce bag) and (NONCE not in Remot-
eRSL.push after(LocalRSL) then
return false
if new push entry.prev hash != prev hash then
2:
3: // Verify that the ensuing entries are valid
4: prev hash = hash last push entry(LocalRSL)
5: for new push entry in RemoteRSL do
6:
7:
8:
9:
10: if verify signature(RemoteRSL.latest push) == false then
11:
12:
13: return true
// this RSL is not signed by a trusted developer
return false
// The RSL entries are not linked correctly
return false
prev hash = hash(new push entry)
repository is initialized with an authoritative root of trust
(usually a core developer) who will add further entries
of new developers in the group. Once developers’ public
keys are added to the RSL, they are allowed to add other
trust entries.
A trust entry contains information about the new de-
veloper (i.e., username and email), her public key, a hash
of the previous push entry and a signature of the entry by
a trusted developer. Revocation entries are similar in that
they contain the key-id of the untrusted developer, the
hash of the push entry, and the signature of the developer
revoking trust.
6.2 Security analysis
Our defense scheme fulfills the properties described in
Sec. 3.1 as follows:
• Prevent modification of committed data: The ex-
isting signing mechanism for Git handles this well.
Also, RSL entries are digitally signed and chained
with each other, so unauthorized modifications will
be detected.
• Ensure consistent repository state: The RSL pro-
vides a consistent view of the repository that is
shared by all developers.
• Ensure repository state freshness: The Nonce Bag
provides repository state freshness because an at-
tacker cannot replay nonces in the Nonce Bag.
Also, if no newer push entries are provided by the
repository, then the attack becomes a fork attack.
The attacks described in Section 4 are prevented be-
cause, after performing the attack, the server cannot pro-
vide a valid RSL that matches the current repository
388  25th USENIX Security Symposium 
USENIX Association
10
Commit signing
RSL (full adoption)
RSL (partial adoption)
Possible attacks
all attacks
no attacks
all attacks
Time window of attack
Anytime
None
After the latest RSL entry and
before the next RSL entry
Vulnerable commit objects
Any object
No object
Objects added after
the latest RSL entry
Table 2: Security guarantees offered by different adoption levels of the defense scheme
state. Since she does not control any of the developers’
keys, she can not forge a signature for a spurious RSL en-
try. As a result, a user who fetches from the main repos-
itory after the attack will notice the discrepancy between
the RSL and the repository state that was presented to
her. Each metadata manipulation attack would be de-
tected as follows:
• Branch Teleport and Deletion Attacks: When this
attack is performed, there is no mention of this
branch pointing to such a commit, and the RSL val-
idation procedure will fail.
• Branch/Global Rollback and Tag Teleport Attacks:
These attacks can be detected because the latest en-
try in the RSL that corresponds to that branch points
to the commit removed and the RSL validation pro-
cedure will fail.
An attacker can attempt to remove the latest entries
on the RSL so that the attacks remain undetected.
However, after this moment, the server would need
to consistently provide an incorrect view of the RSL
to the target user, which would result in a fork at-
tack. Finally, the attacker cannot remove RSL en-
tries in between because these entries are chained
using the previous hash field. Thus, the signature
verification would fail if this field is modified.
• Effort Duplication Attack: This attack will result in
a fork attack because the RSL created by the user re-
questing the commit will contain a proof about this
request in the form of a nonce that has been incor-
porated into an RSL push entry or is still in the
Nonce Bag. Any ensuing RSL push entry that was
withheld from the user will not contain the user’s
nonce.
6.3 Partial adoption of defense scheme
It is possible that not all developers in a Git repository
use our solution. This can happen when, for example, a
user has not configured the Git client to sign and update
the RSL. When this is the case, the security properties of
the RSL change.
To study the properties of using the RSL when not ev-
eryone is using the defense, we will define a commit ob-
ject as a “secure commit” or an “insecure commit.” The
former will be commits made by users who employ our
defense, while the latter are made by users who do not
use our defense (i.e., they only use the Git commit sign-
ing mechanism). Consider that supporting partial adop-
tion requires changing the validation during fetches to
consider commits that are descendants of the latest se-
cure commit, for users might push to branches without
using the defense. For simplicity, we do not allow users
to reset branches if they are not using the defense.
Compared to commit signing only, when our scheme
is adopted by only some users, a user who writes an
RSL entry might unwittingly attest to the insecure com-
mits made by other users after the latest secure commit.
However, this situation still provides a valuable advan-
tage because the attacker’s window to execute Metadata
Manipulation attacks is limited in time. That is, when our
defense is not used at all, an attacker can execute Meta-
data Manipulation attacks on any commits in the repos-
itory, (e.g., the attacker can target a forgotten branch lo-
cated early in the history). This is not possible with our
scheme, where an attacker can only attack the commit
objects added after the latest RSL entry for that branch.
The differences between the three alternatives are sum-
marized in Table 2.
6.4 Comparison with other defenses
In Table 3, we examine the protections offered by
other defense schemes against metadata manipulation at-
tacks. Specifically, we studied how Git commit signing,
Git’s push certificate solution, and our solution (listed as
RSL) fare against the attacks presented in this paper, as
well as other usability aspects that may impact adoption.
Feature
Commit
Tampering
Branch Teleport
Branch Rollback
Global Rollback
Effort
Duplication
Tag Rollback
Minimum Git
Version
Distribution
Mechanism
Commit
signing
✓
X
X
X
X
X
1.7.9
in-band
Push
certificate