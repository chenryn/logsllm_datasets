# Android Reverse Engineering Practice

**Presenter: Jim Huang (黄敬群)  
Role: Developer, 0xlab  
Email: PI:EMAIL  
Date: July 23, 2011  
Event: HITcon**

## License
This work is licensed under the **Attribution-ShareAlike 3.0** license. You are free to:
- Copy, distribute, display, and perform the work.
- Create derivative works.
- Use the work for commercial purposes.

### Conditions
- **Attribution:** You must credit the original author.
- **Share Alike:** If you modify or build upon this work, you must distribute it under the same license.
- For any reuse or distribution, you must clearly state the license terms of this work.

These conditions can be waived if you obtain permission from the copyright holder. Your fair use and other rights are not affected by these conditions.

**License Text:** [http://creativecommons.org/licenses/by-sa/3.0/legalcode](http://creativecommons.org/licenses/by-sa/3.0/legalcode)

**Copyright © 2011 0xlab**  
[http://0xlab.org/](http://0xlab.org/)  
Email: PI:EMAIL

We welcome corrections, suggestions, contributions, and translations!

**Last Updated: July 22, 2011**

## About the Presenter
- Former Kaffe Developer: Threaded Interpreter, JIT, AWT for embedded systems, robustness.
- Former GCJ (Java Frontend for GCC) and GNU Classpath Developer.
- Current AOSP (Android Open Source Project) contributor with over 30 merged patches, including bionic libc and ARM optimizations.

## Purpose
Reverse engineering in Android is not just about cracking. It can also be used for:
1. **Source Code Acquisition:** Sometimes, obtaining source code takes more time than expected, especially from Taiwanese ODMs.
2. **Post-Optimization:** Enhancing existing Android applications.
3. **Innovation:** "Borrowing" good ideas to produce new and improved products.

## Background Knowledge
Special thanks to:
- Thinker Li for "The Code Injection and Data Protection of Android" @HITcon2011.
- Mahmud ab Rahman for "Reversing Android Malware" @HITcon2011.

My focus will be on practical aspects of reverse engineering for beginners.

## Agenda
1. **Development Flow**
2. **Reverse Engineering Practice**
3. **Real-World Tasks**

## Android Application Development Flow
### APK Content
```bash
$ unzip Angry+Birds.apk 
Archive:  Angry+Birds.apk
...
  inflating: AndroidManifest.xml     
 extracting: resources.arsc          
 extracting: res/drawable-hdpi/icon.png  
 extracting: res/drawable-ldpi/icon.png  
 extracting: res/drawable-mdpi/icon.png  
  inflating: classes.dex             
  inflating: lib/armeabi/libangrybirds.so  
  inflating: lib/armeabi-v7a/libangrybirds.so  
  inflating: META-INF/MANIFEST.MF    
  inflating: META-INF/CERT.SF        
  inflating: META-INF/CERT.RSA
```

### APK Components
- **Dalvik DEX:** `classes.dex`
- **JNI Libraries:** `lib/armeabi/libangrybirds.so`, `lib/armeabi-v7a/libangrybirds.so`
- **Manifest and Signature:** `AndroidManifest.xml`, `META-INF/MANIFEST.MF`, `META-INF/CERT.SF`, `META-INF/CERT.RSA`

### Extracting Manifest
```bash
$ file AndroidManifest.xml
AndroidManifest.xml: DBase 3 data file (2328 records)
$ apktool d ../AngryBirds/Angry+Birds.apk 
I: Baksmaling...
I: Loading resource table...
...
I: Decoding file-resources...
I: Decoding values*/* XMLs...
I: Done.
I: Copying assets and libs...
$ file Angry+Birds/AndroidManifest.xml
Angry+Birds/AndroidManifest.xml: XML document text
```

## Understanding the Android System
### How Launcher Finds Widgets/Activities
Before diving into reverse engineering, let's understand how the Android system works, specifically focusing on the Android Launcher and widgets/activities.

### APK Installation Procedure
#### Example: Installing `FrozenBubble.apk`
```bash
$ adb logcat -c
$ adb install -r FrozenBubble.apk 
1222 KB/s (499568 bytes in 0.399s)
pkg: /data/local/tmp/FrozenBubble.apk
Success
$ adb logcat
D/AndroidRuntime(  329): >>>>>> AndroidRuntime START com.android.internal.os.RuntimeInit
/data/dalvik-cache/data@PI:EMAIL@classes.dex
D/PackageManager(   60): New package installed in /data/app/org.jfedor.frozenbubble-1.apk
I/ActivityManager(   60): Force stopping package org.jfedor.frozenbubble uid=10034
I/installd(   34): unlink /data/dalvik-cache/data@PI:EMAIL@classes.dex
D/AndroidRuntime(  329): Shutting down VM
D/jdwp    (  329): adbd disconnected
```

### Steps in APK Installation
1. **Android Runtime Initialization**
2. **Package Manager Detection and Installation**
3. **DexOpt (Verification and Optimization)**
4. **Launching Activities**

### Executing an Activity
```bash
$ adb shell am start \
  -e debug true \
  -a android.intent.action.MAIN \
  -n org.jfedor.frozenbubble/.FrozenBubble
```

This presentation focuses on Android platform 2.3.3.