Practice of
Android Reverse Engineering
Jim Huang ( 黄敬群 )
Developer, 0xlab
PI:EMAIL
July 23, 2011 / HITcon
Rights to copy
Attribution – ShareAlike 3.0
You are free
to copy, distribute, display, and perform the work
to make derivative works
to make commercial use of the work
Under the following conditions
Attribution. You must give the original author credit.
Share Alike. If you alter, transform, or build upon this work, you may distribute the 
resulting work only under a license identical to this one.
For any reuse or distribution, you must make clear to others the license terms of this 
work.
Any of these conditions can be waived if you get permission from the copyright holder.
Your fair use and other rights are in no way affected by the above.
License text: http://creativecommons.org/licenses/by-sa/3.0/legalcode
© Copyright 2011 0xlab
http://0xlab.org/
PI:EMAIL
Corrections, suggestions, contributions and 
translations are welcome!
Latest update:July 23, 2011
Myself
was a Kaffe Developer
Threaded Interpreter, JIT, AWT for 
embedded system, robustness
was a GCJ (Java Frontend for GCC) 
and GNU Classpath Developer
is an AOSP (Android Open Source 
Project) contributror
30+ patches are merged officially
bionic libc, ARM optimizations
Not Only
for
Cracking
(1) Sometimes, it takes __time__ 
to obtain source code than 
expected. 
 Taiwanese ODM
→
(2) Post-optimizations over 
existing Android applications
(3) “Borrow" something good 
to produce "goods"
Background Knowledge
(and Thank you!)
• The Code Injection and Data Protection of Android, 
Thinker Li @HITcon2011
• Reversing Android Malware,
Mahmud ab Rahman @HITcon2011
• My focus would be the practice.
– Hack Android applications for Beginners
Agenda
(1) Development Flow
(2) Reverse Practice
(3) Real world tasks
7
Source code
Source code
Resources
Resources
Assets
Assets
Manifest
Manifest
Key
Key
Libraries
Libraries
Create 
packaged 
resource
compile
Dalvik 
bytecode
Create unsigned apk
Sign apk
Publish or 
Test
Packaged resource file
Packaged resource file
classes.dex
classes.dex
unsigned apk
unsigned apk
signed apk
signed apk
R
R
aapt
javac
dx
apkbuilder -u
jarsigner
adb
Android Application Development Flow
APK content
$ unzip Angry+Birds.apk 
Archive:  Angry+Birds.apk
...
  inflating: AndroidManifest.xml     
 extracting: resources.arsc          
 extracting: res/drawable-hdpi/icon.png  
 extracting: res/drawable-ldpi/icon.png  
 extracting: res/drawable-mdpi/icon.png  
  inflating: classes.dex             
  inflating: lib/armeabi/libangrybirds.so  
  inflating: lib/armeabi-v7a/libangrybirds.so  
  inflating: META-INF/MANIFEST.MF    
  inflating: META-INF/CERT.SF        
  inflating: META-INF/CERT.RSA
Dalvik DEX
JNI
manifest +
signature
APK content
$ unzip Angry+Birds.apk 
Archive:  Angry+Birds.apk
...
  inflating: AndroidManifest.xml     
 extracting: resources.arsc          
 extracting: res/drawable-hdpi/icon.png  
 extracting: res/drawable-ldpi/icon.png  
 extracting: res/drawable-mdpi/icon.png  
  inflating: classes.dex             
  inflating: lib/armeabi/libangrybirds.so  
  inflating: lib/armeabi-v7a/libangrybirds.so  
  inflating: META-INF/MANIFEST.MF    
  inflating: META-INF/CERT.SF        
  inflating: META-INF/CERT.RSA
Name: classes.dex
SHA1­Digest: I9Vne//i/5Wyzs5HhBVu9dIoHDY=
Name: lib/armeabi/libangrybirds.so
SHA1­Digest: pSdb9FYauyfjDUxM8L6JDmQk4qQ=
Name: classes.dex
SHA1­Digest: I9Vne//i/5Wyzs5HhBVu9dIoHDY=
Name: lib/armeabi/libangrybirds.so
SHA1­Digest: pSdb9FYauyfjDUxM8L6JDmQk4qQ=
AndroidManifest
$ unzip Angry+Birds.apk 
Archive:  Angry+Birds.apk
...
...
  inflating: AndroidManifest.xml     
 extracting: resources.arsc          
 extracting: res/drawable-hdpi/icon.png  
 extracting: res/drawable-ldpi/icon.png  
 extracting: res/drawable-mdpi/icon.png  
  inflating: classes.dex             
  inflating: lib/armeabi/libangrybirds.so  
  inflating: lib/armeabi-v7a/libangrybirds.so  
  inflating: META-INF/MANIFEST.MF    
  inflating: META-INF/CERT.SF        
  inflating: META-INF/CERT.RSA
$ file AndroidManifest.xml
AndroidManifest.xml: DBase 3 data file (2328 records)
$ apktool d ../AngryBirds/Angry+Birds.apk 
I: Baksmaling...
I: Loading resource table...
...
I: Decoding file­resources...
I: Decoding values*/* XMLs...
I: Done.
I: Copying assets and libs...
$ file Angry+Birds/AndroidManifest.xml
Angry+Birds/AndroidManifest.xml: XML  document text
$ file AndroidManifest.xml
AndroidManifest.xml: DBase 3 data file (2328 records)
$ apktool d ../AngryBirds/Angry+Birds.apk 
I: Baksmaling...
I: Loading resource table...
...
I: Decoding file­resources...
I: Decoding values*/* XMLs...
I: Done.
I: Copying assets and libs...
$ file Angry+Birds/AndroidManifest.xml
Angry+Birds/AndroidManifest.xml: XML  document text
Before performing reverse 
engineering, let's observe how 
Android system works
Android Launcher
Android Launcher
Widget
Widget
How can Launcher find widgets/activities and invoke them?
How can Launcher find widgets/activities and invoke them?
In this presentation,
Android platform 2.3.3 is selected.
In this presentation,
Android platform 2.3.3 is selected.
When installing FrozenBubble.apk
$ adb logcat -c
$ adb install -r FrozenBubble.apk 
1222 KB/s (499568 bytes in 0.399s)
pkg: /data/local/tmp/FrozenBubble.apk
Success
$ adb logcat
D/AndroidRuntime(  329): 
D/AndroidRuntime(  329): >>>>>> 
AndroidRuntime START 
com.android.internal.os.RuntimeInit >>>>> AndroidRuntime START com.android.internal.os.RuntimeInit  
/data/dalvik-cache/data@PI:EMAIL@classes.dex
D/PackageManager(   60): New package installed in /data/app/org.jfedor.frozenbubble-1.apk
I/ActivityManager(   60): Force stopping package org.jfedor.frozenbubble uid=10034
I/installd(   34): unlink /data/dalvik-cache/data@PI:EMAIL@classes.dex
D/AndroidRuntime(  329): Shutting down VM
D/jdwp    (  329): adbd disconnected
APK Installation Procedure
D/AndroidRuntime(  329): 
D/AndroidRuntime(  329): >>>>>> AndroidRuntime START com.android.internal.os.RuntimeInit  
/data/dalvik-cache/data@PI:EMAIL@classes.dex
D/PackageManager(   60): New package installed in /data/app/org.jfedor.frozenbubble-1.apk
I/ActivityManager(   60): Force stopping package org.jfedor.frozenbubble uid=10034
I/installd(   34): unlink /data/dalvik-cache/data@PI:EMAIL@classes.dex
D/AndroidRuntime(  329): Shutting down VM
D/jdwp    (  329): adbd disconnected
Android Runtime performs init
Android Runtime performs init
Package Manager detects APK and installs
Package Manager detects APK and installs
DexOpt
(verify and optimize all of the classes in the DEX file)
DexOpt
(verify and optimize all of the classes in the DEX file)
 Activities: org.jfedor.frozenbubble.FrozenBubble
 Activities: org.jfedor.frozenbubble.FrozenBubble
I/ActivityManager(   60): Start proc org.jfedor.frozenbubble for activity
org.jfedor.frozenbubble/.FrozenBubble: pid=356 uid=10034 gids={}
I/ActivityManager(   60): Displayed org.jfedor.frozenbubble/.FrozenBubble: +2s899ms
Execute FrozenBubble
from Android Launcher
$ adb shell am start \
  -e debug true \
  -a android.intent.action.MAIN \