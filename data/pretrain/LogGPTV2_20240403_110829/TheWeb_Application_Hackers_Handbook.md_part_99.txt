### Placing Parameters into Error Messages
When a parameter is placed into an error message, it is copied directly. Due to the practical constraints of brute-force vulnerability detection, scanners cannot exhaustively test every possible attack string in different parameters or every combination of functional steps. No human can practically do this either. However, humans often have an intuitive sense of where bugs are likely to be, where developers may have made assumptions, and where something doesn't "look right." As a result, a human tester will select a small subset of potential attacks for investigation, often leading to successful discoveries.

### Technical Challenges Faced by Scanners
The barriers to automation described earlier lead to several specific technical challenges that must be addressed in creating an effective vulnerability scanner. These challenges not only affect the scanner's ability to detect specific types of vulnerabilities but also its ability to map the application's content and probe for defects.

While some of these challenges are not insurmountable, today's scanners have found ways to partially address them. Scanning is not a perfect science, and the effectiveness of modern scanning techniques varies widely from one application to another.

#### Authentication and Session Handling
A scanner must be able to work with the authentication and session-handling mechanisms used by different applications. Often, most of an application's functionality is accessible only through an authenticated session. A scanner that fails to operate within such a session will miss many detectable flaws.

In current scanners, the authentication problem is addressed by allowing users to provide a login script or walk through the authentication process using a built-in browser, enabling the scanner to observe the specific steps involved in obtaining an authenticated session.

The session-handling challenge is more complex and includes two main problems:
1. **Interaction with Session-Handling Mechanisms:** The scanner must interact with the application's session-handling mechanism, which may involve transmitting a session token in a cookie, hidden form field, or URL query string. Tokens may be static or change per request, or the application may use a custom mechanism.
2. **Session Validity Detection:** The scanner must detect when its session has become invalid so it can return to the authentication stage to acquire a new one. This can occur if the scanner requests the logout function or if the application terminates the session due to abnormal navigation or invalid input. The scanner must detect this during both initial mapping and subsequent vulnerability probing. Different applications behave differently when a session becomes invalid, making this a difficult challenge, especially if a non-standard session-handling mechanism is used.

While some scanners handle the majority of authentication and session-handling mechanisms effectively, there are still many cases where they struggle. This can result in the failure to properly crawl or scan key parts of an application's attack surface, often without the user being aware of the issue.

#### Dangerous Effects
Running an unrestricted automated scan without user guidance can be dangerous to the application and its data. For example, a scanner might discover an administration page with functions to reset user passwords or delete accounts. If the scanner blindly requests every function, it could deny access to all users. Similarly, the scanner might exploit a SQL injection vulnerability, causing unforeseen operations on the application's data. A human tester, understanding the purpose of a function, would proceed with caution, but an automated scanner lacks this understanding.

#### Individuating Functionality
Purely syntactic analysis of an application often fails to correctly identify its core set of individual functions:
1. **Content Quantity:** Some applications, like eBay, MySpace, and Amazon, have millions of pages with different URLs and content, but these correspond to a relatively small number of actual functions.
2. **Infinite Boundaries:** Some applications, like calendars, allow users to navigate to any date, making them appear infinite from a syntactic perspective. Other applications use volatile URLs or request parameters, leading scanners to map indefinitely.
3. **Dynamic Content:** The scannerâ€™s actions may generate new content. For example, submitting a form might create a new link, which, when accessed, retrieves a further form with the same behavior.

A human attacker can quickly see through the application's syntactic content and identify the core set of functions to test. For an automated scanner, this is much more challenging.

#### Reporting Duplicates
Scanners based on purely syntactic analysis are prone to generating duplicate findings for each single vulnerability. For example, a scan report might identify 200 XSS flaws, 195 of which arise in the same application function probed multiple times in different contexts.

#### Other Challenges to Automation
As discussed in Chapter 14, some applications implement defensive measures to prevent access by automated client programs, such as reactive session termination and CAPTCHAs. The scanner's spidering function faces similar challenges to web application spiders, including customized "not found" responses and the need to interpret client-side code. Applications with fine-grained validation over input fields, like user registration forms, can also pose issues if the spider populates the form with invalid input and cannot understand the error messages.

The rapid evolution of web technologies, particularly the use of browser extension components and other frameworks, means that most scanners lag behind the latest trends. This can result in failures to identify all relevant requests or the precise format and contents required by the application. The highly stateful nature of modern web applications, with complex data held on both the client and server sides, and updated via asynchronous communications, creates additional problems for fully automated scanners, which typically work on each request in isolation.

To achieve complete coverage, it is often necessary to understand the multistage request processes and ensure the application is in the desired state to handle a particular attack request. Techniques for achieving this within custom automated attacks, as described in Chapter 14, generally require intelligent human involvement to configure and monitor the testing tools.

### Current Products
The market for automated web scanners has seen significant innovation, with a wide range of products available. Some prominent scanners include:
- Acunetix
- AppScan
- Burp Scanner
- Hailstorm
- NetSparker
- N-Stalker
- NTOSpider
- Skipfish
- WebInspect

While most mature scanners share a common core of functionality, they differ in their approaches to detecting vulnerabilities and the features presented to the user. Public discussions about the merits of different scanners often devolve into vendor disputes. Surveys evaluating the performance of different scanners in detecting security flaws are limited by the small sample of vulnerable code used. The most effective surveys run each scanner against a wide range of real-world-derived sample code without giving vendors an opportunity to adjust their product beforehand.

One such academic study by the University of California, Santa Barbara, claims to be "the largest evaluation of web application scanners in terms of the number of tested tools... and the class of vulnerabilities analyzed." The study's main conclusions were:
- Whole classes of vulnerabilities, such as weak passwords, broken access controls, and logic flaws, cannot be detected by state-of-the-art scanners.
- Crawling modern web applications is a serious challenge for today's scanners due to incomplete support for common client-side technologies and the complex stateful nature of applications.
- There is no strong correlation between price and capability. Some free or cost-effective scanners perform as well as expensive ones.

The study assigned each scanner a score based on its ability to identify different types of vulnerabilities. Table 20-1 shows the overall scores and prices of each scanner.

| SCANNER | SCORE | PRICE |
|---------|-------|-------|
| Acunetix | 14    | $4,995 to $6,350 |
| WebInspect | 13   | $6,000 to $30,000 |
| Burp Scanner | 13  | $191 |
| N-Stalker | 13    | $899 to $6,299 |
| AppScan | 10     | $17,550 to $32,500 |
| w3af | 9        | Free |
| Paros | 6       | Free |
| HailStorm | 6    | $10,000 |
| NTOSpider | 4    | $10,000 |
| MileSCAN | 4     | $495 to $1,495 |
| Grendel-Scan | 3  | Free |

It should be noted that scanning capabilities have evolved significantly in recent years and are likely to continue to do so. Both the performance and price of individual scanners are subject to change. The UCSB study, published in June 2010, provides the information shown in Table 20-1. Given the scarcity of reliable public information about the performance of web vulnerability scanners, it is recommended that you conduct your own research before making a purchase. Most scanner vendors provide detailed product documentation and free trial editions to help inform your decision.

### Using a Vulnerability Scanner
The effectiveness of using a vulnerability scanner depends largely on the target application. Automated scanners are capable of discovering approximately half of the common vulnerabilities, where a standard signature exists. While they do a good job of identifying individual cases, they often miss more subtle and unusual instances. Running an automated scan will identify some, but not all, of the low-hanging fruit in a typical application.

For novices or those with limited time, running an automated scan can provide clear benefits. It will quickly identify leads for further manual investigation, giving an initial overview of the application's security posture and highlighting areas that warrant further attention.

For experts, the inherent limitations of vulnerability scanners are well understood. While scan results are interesting and prompt manual investigation of specific issues, a full manual test of every area for every type of vulnerability is typically preferred to ensure thoroughness.

When using a vulnerability scanner, keep the following key points in mind to maximize its effectiveness:
- Be aware of the kinds of vulnerabilities that scanners can and cannot detect.
- Familiarize yourself with your scanner's functionality and know how to configure it for optimal performance.
- Understand the target application before running the scanner to make the most effective use of it.
- Be aware of the risks associated with spidering powerful functionality and automatically probing for dangerous bugs.
- Always manually confirm any potential vulnerabilities reported by the scanner.
- Recognize that scanners are noisy and leave a significant footprint in server logs and IDS defenses. Do not use a scanner if stealth is a priority.

### Fully Automated Versus User-Directed Scanning
The extent to which you want to direct the scanner's work is a key consideration. The two extreme use cases are:
1. **Fully Automated Scan:** You provide the application URL, click Go, and wait for the results.
2. **User-Directed Scan:** You work manually and use the scanner to test individual requests alongside your manual testing.

Standalone web scanners are geared toward the first use case, while integrated testing suite scanners are geared toward the second. Both types of scanners allow for a hybrid approach.

For novices, quick assessments, or large-scale testing, a fully automated scan can provide insight into part of the application's attack surface, helping to decide the level of comprehensive testing needed.

For users who understand web application security testing and the limitations of total automation, the best way to use a scanner is within an integrated testing suite to support and enhance the manual testing process. This approach helps avoid many of the technical challenges faced by fully automated scanners. You can guide the scanner using your browser to ensure no key areas of functionality are missed, directly scan the actual requests generated by the application, and avoid dangerous functionality. With full control over what gets scanned, you can recognize duplicated functionality, step through input validation requirements, and ensure proper handling of authentication, session management, and stateful functions. This frees you to focus on the types of vulnerabilities that require human intelligence and experience to uncover.

### Other Tools
In addition to the tools already discussed, there are many others that may be useful in specific situations or for performing particular tasks. The remainder of this chapter describes a few other tools you are likely to encounter and use when attacking applications. Note that this is only a brief survey of some tools the authors have used, and it is recommended that you investigate further.