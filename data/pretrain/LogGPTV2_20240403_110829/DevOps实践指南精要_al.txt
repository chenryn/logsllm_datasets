之前⼯工业⽤用途的⼟土地
可能有污染
现存结构需要拆除
Brownﬁeld DevOps projects
产品或服务已经服务客户，运⾏行行多年年
通常有很多技术债，如⽆无测试⾃自动
化，或运⾏行行在不不⽀支持的平台上等
60%在DevOps企业峰会上的案例例是
Brownﬁeld projects
2015 State of DevOps Report
应⽤用的年年龄不不是预测效能的指标
应⽤用的架构可以根据可测性、可
部署性重构才是预测指标
转型的阻碍和问题
没有⾃自动化测试
架构紧耦合，⽆无法⼩小团队独⽴立⼯工作
Case：CSG (2013)
初始改进范围： bill printing
COBOL主机应⽤用和20个周边技术平台
交付给客户从每年年两次提升到四次
每⽇日部署到准⽣生产环境
⼤大幅提升了了可靠性，部署前置时间从
2周降低到⼩小于1天
Case：Etsy（2009）
从‘仅仅从购物季幸存’，到整体组织转型
成功进⾏行行转型，2015年年IPO
Greenﬁeld DevOps projects
Case：美国国家仪器器公司
30年年的企业，5千⼈人，每年年收⼊入$1 billion
2009年年LabVIEW产品
让LabVIEW产品上市时间⽐比普通产品减少⼀一半
为了了让产品快速上市
使⽤用DevOps实践
成⽴立新的团队
可以在现有IT流程之外运⾏行行
使⽤用公有云
团队组成
1个应⽤用架构
1个系统架构
2个开发
1个系统⾃自动化开发
1个运维主管
2个离线运维员⼯工
新项⽬目，或计划和执⾏行行的早期阶段
⽆无约束
⽆无已有的代码和流程影响
团队和资源已经到位
通常是试点云、⾃自动化部署和⼯工具等
SYSTEMS OF RECORD AND 
SYSTEMS OF ENGAGEMENT
SOR
ERP类的系统
MRP，HR，财务报表系统
慢节奏，有监管和合规性需求（如SOX）
交易易和数据的正确性是⾸首要的
Focuses on “doing it right.”
SOE
⾯面向客户或者员⼯工使⽤用的系统
电⼦子商务系统或⽣生产率应⽤用
快节奏变更更，迅速反馈环，进⾏行行实验
探索满⾜足客户需求的最佳⽅方式
Focuses on “doing it fast.”
DevOps破除障碍，既有⾼高吞吐量量⼜又保证可靠性
有观点不不⽀支持bi-modal IT
每个客户都应得到快速和质量量
需要技术卓越，⽆无论是⽼老老应⽤用还是新系统
改进⽼老老应⽤用时不不仅要降低复杂性，提
升稳定性和可靠性，还要优化速度
即使新应⽤用经常是greenﬁeld的SOE
系统，但是经常导致下游的
brownﬁeld的SOR系统可靠性问题
所以需要整个组织更更快和更更安全达成⽬目标
从最赞同和创新的组开始
接受新想法，需要跨越鸿沟
需要找到认同DevOps原则和实践的团队
聚焦在有⼀一定⻛风险承受能⼒力力的组，创造出成功，打好基础
早期不不要花费⼤大量量时间⽤用于转化保守的组
即使有⾼高层的⽀支持，我们也要避免big bang的模式
聚焦在组织中的⼀一些领域，确保创新成功，然后再从此扩展
跨越整个组织扩展DevOps
示范早期的成功，⼴广播我们的成功
将⼤大的改进⽬目标分解为⼩小的、增量量的步骤
实施步骤
找到创新者和早期采纳者
真正需要帮助的团队
志趣相投和同路路⼈人
有影响⼒力力和公信⼒力力
构建群聚效应和沉默的⼤大多数
扩展联盟，制造从众效应
绕开危险的政治⽃斗争
识别顽固分⼦子
明确⽴立场，有影响⼒力力的贬损者
有时甚⾄至诋毁
只有取得⾜足够的成功时才与这个组交涉
6. 理理解价值流，可视化，横跨组织扩展
改进价值流的最好⽅方法：引导所有⼲干
系⼈人梳理理价值流图workshop
识别⽀支撑价值流的⻆角⾊色
PO：内部的业务声⾳音，定义服务中的功能集合
Dev：开发服务中的应⽤用功能
OP：维护⽣生产环境，确保服务级别需求满⾜足
Release managers：管理理和协调⽣生产环境部署和发布流程
QA：确保反馈环存在，保证服务功能按预期
Technology executives or value stream manager：
确保整个价值流达到或超越客户需求
InfoSec：安全系统和数据
创建价值流
不不是⽂文档化每⼀一步的细枝末节，⽽而是理理解危
及快速流动、端前置周期和可靠性的部分
特别关注
⼯工作等待数周或数⽉月
变更更审批流程
安全审批流程
等待类⽣生产环境
显著的返⼯工发⽣生或接收
第⼀一版本价值流
只包含⾼高阶流程，5到15个流程Blocks
每个Blocks包含前置时间、处理理时间、下游的%C/A
例例⼦子
上游缺乏必要信息，导致低 %C/A
未提供正确配置的测试环境配置给开
发，导致⻓长前置周期和低%C/A
每次发布前回归测试，导致⻓长前置周期
创建专职的转型团队
转型的挑战：与现有的业务运⾏行行冲突
专职的⼩小组负责达到清晰定义、可度
量量、系统化的结果
如：降低部署前置时间50%
具体要求
只分配DevOps转型⼯工作，⽽而不不是花
费20%时间⽤用于做新的DevOps⼯工作
选择团队成员是多⾯面⼿手，掌握多领域技能
选择在组织中资深，受到尊敬的成员
提供独⽴立的物理理场所，最⼤大化沟通流，与组织其余部分隔离
从现有组织的规则和政策中脱离出来，建⽴立新的流程
共享的⽬目标达成⼀一致
降低花在产品⽀支持和计划外⼯工作50%
95%的变更更，从代码提交到⽣生产发布的周期⼩小于⼀一周
零停机发布，在⽇日常业务时段
在流⽔水线中集成所有需要的信息安全控制，满⾜足所有合规需求
改进⼯工作迭代，持续进⾏行行，通常每迭代2-4周
保持改进计划⾜足够短
按周产⽣生可度量量的改进或可⾏行行动的数据
预留留20%时间⽤用于⾮非
功能需求和减少技术债
投资⾄至少20%的整体开发和运维周期，否则⼯工
程师时间都花在解决可靠性问题或变通问题上
投资⾃自动化⼯工作和架构
重构
⾮非功能需求
可维护性
可管理理性
可扩展性
可靠性
可测试性
可部署性
安全
Case：Operation InVersion at LinkedIn (2011)
7. 考虑康威定律律，设计组织和架构
康威定律律
设计系统的组织，产⽣生的设计会拷⻉贝
组织间的沟通结构
我们设计团队的⽅方式，会对我们⽣生产
的软件产⽣生巨⼤大的影响
Case：Etsy 2009开始 
DevOps 之旅
2007年年开发的Sprouter，连接⼈人、
流程和技术，但是产⽣生⾮非预期的结果
每次开发要增加新功能，都需要
DBA团队写新的存储过程；开发
创建新功能需要依赖DBA团队
需要排序，沟通
协调，队列列，会议
⻓长的前置时间
Sprouter：stored procedure router
允许开发在应⽤用中写PHP代码，DBA在Postgres
⾥里里写SQL，Sprouter帮助他们在中间相遇
开发恐惧写SQL
开发恐惧碰⽣生产环境
Sprouter在前端PHP应⽤用和Postgres DB之间，
集中访问数据库，向应⽤用层隐藏数据库执⾏行行
问题是，任何业务逻辑变更更导致
开发和DB团队的摩擦
Sprouter制造了了紧耦合，不不能让开发独
⽴立开发，测试和部署代码到⽣生产环境
DB存储过程也与Sprouter紧耦合，任
何存储过程变更更，Sprouter也需要变
Sprouter变成越来越⼤大的单点故障
按照康威定律律解释
Sprouter试图让两个团队更更轻松，但
是它未能达成期望
Etsy初始有两个团队，开发和DBA，
分别负责应⽤用逻辑和存储过程层
业务规则变更更时，从两层变更更，改为
三层都要变更更（增加Sprouter层）
2009年年，新CTO变⾰革
⼤大量量投资站点稳定性，让开发⾃自⼰己部
署变更更到⽣生产环境，排除Sprouter
将所有业务逻辑从数据库层转移到应
⽤用层，移除对Sprouter的需要
建⽴立⼀一个⼩小团队写PHP OR Mapping，
让前端开发直接访问数据库，业务逻辑
变更更从3个团队减少到1个团队
新功能⽤用ORM代替Sprouter，⽼老老功
能逐步替换，整体花费两年年时间