B2F6D9A62C63F61A6B33DC6520BFCCCD | 7/17/2018 | 27.102.112.179  
76C8DA4147B08E902809D1E80D96FBB4 | 7/17/2018 | 27.102.112.179  
## 三、技术分析
### 下载和执行功能
l 一旦使用Office打开这些恶意.xls/.doc文档，其内置的恶意宏就会连接远程服务器并下载Oceansalt
l 恶意宏随后会在受感染的终端上执行Oceansalt
.xls恶意下载器的入侵指标（IoC）：
IoC描述 |  IoC值  
---|---  
远程下载服务器 | [redacted].kr  
[redacted].kr  
远程服务器上的Oceansalt路径 | /admin/data/member/1/log[.]php  
/gbbs/bbs/admin/log[.]php  
受感染终端上的Oceansalt路径 | %temp%SynTPHelper[.]exe  
%temp%LMworker[.]exe  
图13 用于下载恶意软件的部分恶意宏代码
### 控制服务器
该恶意活动使用了多个控制服务器。在6月至7月期间，我们观察到的恶意IP包括：
l 172.81.132.62
l 211.104.160.196
l 27.102.112.179
l 158.69.131.78
我们的遥测技术表明该恶意活动运营在多个国家。IP地址211.104.160.196揭示了哥斯达黎加、美国和菲律宾的感染事件。IP地址158.69.131.78揭示了美国和加拿大的感染事件。
这些服务器在8月18日至21日期间分布在多个国家。由于它们在恶意活动中分发不同的恶意软件样本，这意味着它们很可能是更大规模的隐蔽监听网络的一部分。McAfee高级威胁研究小组以前观察到过类似的攻击活动，部分入侵目标被当作中继控制服务器。
## 四、恶意软件溯源
我们对早期样本的初步调查使我们注意到一个编译于2010年的变体 –
bf4f5b4ff7ed9c7275496c07f9836028。Oceansalt使用了该变体的部分代码；它们的整体代码相似度为21%。这部分被重用的代码是独一无二的，不属于任何一个公共库或公共代码，它主要提供侦察和控制功能。
该变体使用了属于APT1的域名。进一步的调查表明该样本与Seasalt的相似度达99%。Seasalt（5e0df5b28a349d46ac8cc7d9e5e61a96）据称是2010年APT1使用的恶意软件。这意味着Oceansalt重用了Seasalt的部分代码构建了一个新的恶意软件。根据对其整体技术水平的分析，Oceansalt不太可能是APT1的再次出现，这就带来了另一个问题，攻击者是如何获得Seasalt代码的呢？我们没有找到任何证据表明Seasalt的源代码在地下论坛出售或泄露过。
我们还发现几个编译于7月16日至17日的恶意软件样本，这些样本虽然经过混淆，但实际上还是同一个样本，只修改了控制服务器等少数几个地方。一些样本缺失反弹shell的功能，这表明攻击者能够访问Seasalt的源代码并进行修改和编译出不同的变体。这或许证明了这是一个由两个国家赞助的网络攻击程序之间的协作攻击行为。
### 与Seasalt代码的相似之处
Oceansalt包含部分与Seasalt相同的字符串：
l Upfileer
l Upfileok
图14 出现在Oceansalt中的Seasalt字符串
图15 出现在Oceansalt中的Seasalt字符串
Oceansalt和Seasalt的共享代码和函数具有高度的相似性。下面列出了它们的一些共性：
#### 命令处理程序和索引表的相似性
Oceansalt和Seasalt的命令处理程序通过相似的语义和指令编码执行相同的功能。甚至它们解析指令编码的机制也是相似的。下图中左边是Seasalt代码，右边是Oceansalt代码：
图16 Seasalt（左）和Oceansalt（右）的命令处理程序之间的相似性
图17 Seasalt（左）和Oceansalt（右）的指令索引表之间的相似性
#### 命令和功能上的相似性
Oceansalt和Seasalt的功能执行的方式是相同的，这表明它们是从同一个代码库开发的。用于表明命令执行成功还是失败的响应代码在两个恶意软件中也是完全一致的。下面是部分相似性案例：
驱动器探测功能：相似的代码签名。使用相同的代码来标记驱动器类型。
图18 Seasalt（左）和Oceansalt（右）的驱动器探测功能的相似性
l 文件探测功能：获取文件信息的API和代码十分相似。发送至控制服务器的用于表明文件是否找到的响应代码也完全一致。
图19 Seasalt（左）和Oceansalt（右）的命令执行功能中的相似性
l 反弹shell创建功能：创建反弹shell的代码签名是相似的，并且创建的反弹shell都是基于cmd.exe
图20 Seasalt（左）和Oceansalt（右）的反弹shell创建功能中的相似性
### 与Seasalt代码的不同之处
Oceansalt和Seasalt的实现存在一定的不同。这证明Oceansalt不仅仅是Seasalt源代码的简单再编译，而是Seasalt的进化版本。
l 编码机制的不同：Oceansalt在数据发送至服务器之前对数据进行编码和解码操作，而Seasalt则没有进行编码，直接将未加密的数据发送至服务器。
l 控制服务器地址的不同：Oceansalt使用了硬编码的控制服务器地址，而Seasalt则是从其binary中解码得到控制服务器的地址。
l
持久性机制的不同：Oceansalt没有任何持久性机制，这意味着它无法在受感染的终端重启后确保二次感染。Seasalt则将自己复制为C:DOCUMEN~1\java.exe并通过以下注册表项确保重启后的二次感染：
− HKLMSoftwareMicrosoftWindowscurrentVersion Run | sysinfo
根据可执行文件的头部信息，Seasalt的编译日期是2010年3月30日。Oceansalt的编译日期是2018年6月1日。在这里我们强调了编译日期的不同是因为根据前面的分析，它们之间存在高度的代码共享：
l 多处一致的代码和相似的代码
l 多个功能相似
l 命令处理功能完全一致
l 控制服务器发布和接收的命令和响应码完全相同
Oceansalt使用的反弹shell创建代码与APT1的Seasalt完全相同。不仅如此，这一反弹shell创建机制（基于管道的进程间通信）在APT1的其它恶意软件中（如WebC2-CSON和WebC2-GREENCAT）也有发现。
这些一致性促使我们认为Oceansalt是基于10年前的Seasalt开发的。Seasalt曾在APT1的报告中曝光过并没有阻碍Oceansalt开发者继续进行开发。
###  Oceansalt与Seasalt的混淆机制对比
我们对Oceansalt的初始样本和Seasalt样本的混淆技术进行了全面的分析。
SHA-1 | 编译日期 | 样本  
---|---|---  
fc121db04067cffbed04d7403c1d222d376fa7ba | 7/16/2018 | 部分混淆的Oceansalt  
281a13ecb674de42f2e8fdaea5e6f46a5436c685 | 7/17/2018 | 部分混淆的Oceansalt  
1f70715e86a2fcc1437926ecfaeadc53ddce41c9 | 7/17/2018 | 部分混淆的Oceansalt  
ec9a9d431fd69e23a5b770bf03fe0fb5a21c0c36 | 7/16/2018 | 部分混淆的Oceansalt  
12a9faa96ba1be8a73e73be72ef1072096d964fb | 7/17/2018 | 部分混淆的Oceansalt  
be4fbb5a4b32db20a914cad5701f5c7ba51571b7 | 7/17/2018 | 部分混淆的Oceansalt  
0ae167204c841bdfd3600dddf2c9c185b17ac6d4 | 7/17/2018 | 部分混淆的Oceansalt  
所有的部分混淆的Oceansalt样本都具有以下特征：
l 编译日期在7月16日至18日之间
l 包含debug语句（print logs），用于将log写入文件：C:UsersPublicVideostemp.log
l 这些debug语句以时间戳开头，并在调试信息的开头包含以下关键字
− [WinMain]
− [FraudProc]
l 连接到同一个控制服务器（IP地址为：27.102.112.179）
l 尽管所有样本都没有添加额外功能（与初始Oceansalt和Seasalt相比），但部分样本缺失了反弹shell功能：
部分混淆的Oceansalt样本哈希 | 是否包含反弹shell功能？  
---|---  
C1773E9CF8265693F37DF1A39E0CBBE2  | 否  
0355C116C02B02C05D6E90A0B3DC107C | 是  
74A50A5705E2AF736095B6B186D38DDF | 是  
45C362F17C5DC8496E97D475562BEC4D | 否  
D14DD769C7F53ACEC482347F539EFDF4 | 否  
B2F6D9A62C63F61A6B33DC6520BFCCCD | 是  
76C8DA4147B08E902809D1E80D96FBB4 | 是  
### 代码共享的证据
基于我们对三类样本（Oceansalt、部分混淆的Oceansalt和Seasalt）的综合分析，我们发现了以下代码共享的证据：
l 攻击者并不是简单地修改了Seasalt的控制服务器IP地址来得到Oceansalt：
–
Seasalt与Oceansalt获得控制服务器IP地址的机制不同。Seasalt在binary文件的末尾获取编码过的数据，解码成以符号$分隔的tokens并获得控制服务器的信息
– Oceansalt则是在binary文件中硬编码了控制服务器IP地址和端口号的明文字符串
l
一些部分混淆的Oceansalt样本缺失反弹shell功能。所有的其它功能（代码签名、响应代码等）以及命令编码都是相似的（指令编码要么完全一致，要么只偏移1）。这种程度的修改只能是在获得Seasalt源代码的基础上进行修改。
l Oceansalt中用于跟踪代码流程的debug字符串表明这些样本是在对Seasalt源码添加debug信息之后编译的：
− [WinMain]after recv cmd=%d 0Dh 0Ah
− [WinMain]before recv 0Dh 0Ah
− [FraudProc]Engine is still active! 0Dh 0Ah
− [FraudPRoc]Process Restart! 0Dh 0Ah
l 这些debug字符串还表明开发者在实施攻击之前进行了初步的测试，并且在没有去除调试信息的情况下进行了混淆
l
Oceansalt样本（531dee019792a089a4589c2cce3dac95，编译于6月1日）包含一些可以验证是Seasalt源码编译而来的关键特征：
– 缺失反弹shell功能