To benchmark cross-tab consolidation under memory pres-
sure, we simultaneously opened websites from Alexa’s top
US list in different tabs. We ﬁnd that simultaneously opening
17 out of Alexa’s top-20 websites forces Chrome to begin
consolidation where possible. Finally, we ﬁnd that the number
of open websites depends on the machine’s memory size.
Speciﬁcally, on a similar machine with 16 GB, we need to
open 33 sites concurrently before consolidation occurs.
B. Overcoming [C2]: Breaking 32-bit Boundaries via Specu-
lative Type Confusion
As described in Section II-E, Chrome uses a pointer com-
pression technique that allows it to represent array indices and
object pointers using 32-bit integers, partitioning the address
space into 4 GB partitions. For an attacker trying to use Spectre
v1 techniques to read information outside of the allocated array
size, Chrome’s 32-bit representation seems to limit the scope
of the recovered information to a single 4 GB heap, leaving
the rest of the address space out of reach.
In this section, we overcome this limitation using specula-
tive type confusion, building a primitive that allows transient
reading from arbitrary 64-bit addresses. While type confusion
techniques have been previously outlined [25, 30, 41], to the
best of our knowledge, this is the ﬁrst demonstration of type
confusion attacks against Spectre-hardened Chrome.
To mount our attacks, we ﬁrst inspected the memory layout
of common JavaScript objects, looking for an object with a
64-bit back pointer. We found that TypedArrays satisfy this
requirement, as shown in Figure 1. While any TypedArray
object can be potentially used with our technique, in the sequel
we focus on Uint8Arrays, confusing Chrome’s code for
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:21:13 UTC from IEEE Xplore.  Restrictions apply. 
5703
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
UInt8Array-access(array, index){
// type Check
if(array.type !== UInt8Array){
goto interpreter; // Wrong type
}
//compute array length
len = array.length
// length Check
if (index >= len) {
goto interpreter; // Out of Bounds
}
//compute array back_ptr
back_ptr = array.ext_ptr+
(cid:44)→
//do memory access
return back_ptr[index];
((array.base_ptr+heap_ptr)&0xFFFFFFFF);
}
Listing 1: Pseudocode of operations performed by Chrome’s
JavaScript engine during array accesses.
Figure 2: Memory layout of objects of Uint8Array (left)
and AttackerClass (right). All words are 4 bytes (32 bits).
For clarity, 64-bit ﬁelds are split to two 32-bit words.
performing array accesses and causing it to transiently operate
on attacker-controlled AttackerClass objects.
Performing Array Operations.
the fol-
Consider
array declaration: var arr = new
lowing JavaScript
Uint8Array(10). To implement arr[index],
the
Chrome JavaScript engine performs the sequence of operations
outlined in Listing 1, which the Chrome optimizer specializes
to handle Uint8Arrays. Speciﬁcally, the code ﬁrst checks
if the array type is Uint8Array (Line 3). If it is, the code
veriﬁes that index is within the array bounds (Line 9).
Following the success of these checks, the code constructs
a pointer to the array backing store (Line 13), which it
dereferences at offset index (Line 15). If either of the checks
in Lines 3 or 9 fails, the execution engine raises an exception,
diverting control to the JavaScript interpreter.
Uint8Array Memory Layout. The left half of Figure 2
shows the memory layout of a Uint8Array object. It
starts with a three-ﬁeld object header, specifying the object
type and other properties. The header is followed by several
ﬁelds, which describe the array. We focus on length, which
speciﬁes the number of elements in the array, and the two
ﬁelds, ext_ptr and base_ptr, which are combined to get
the pointer to the backing store. (Two ﬁelds are needed for
legacy reasons.) We note that while length and ext_ptr
are each 64 bits wide, we show each of them as two 32-bit
words in Figure 2 (left) for clarity.
A Malicious Memory Layout.
Unlike published Spectre
v1 attacks, which exploit misprediction of a bounds check,
our attack exploits type confusion by causing misprediction
after a type check. For the attack, we cause transient execution
of the Uint8Array array access code on an object other
than a Uint8Array. By carefully aligning the ﬁelds of the
malicious object, we can achieve transient accesses to arbitrary
64-bit memory locations.
The right
side of Figure 2 contrasts
the layout of
the malicious object with that of Uint8Array. The
AttackerClass object consists of ten 32-bit integer ﬁelds
named f0–f9. We note, in particular, that f5 and f6 align
with the length ﬁeld of the array, f7 and f8 align with
ext_ptr, and f9 aligns with base_ptr.
Type Confusion.
Type confusion operates by training
the processor to predict that the object processed by List-
ing 1 is a Uint8Array and then calling the code with an
AttackerClass object whose layout is shown in Figure 2
(right). The crux of the attack is that during transient execution
following a misprediction of the type check in Line 3 of
Listing 1, the code accesses the ﬁelds of AttackerClass
object but interprets them as ﬁelds of Uint8Array.
In particular, the code interprets the values of f7–f9 as
if they were ext_ptr and base_ptr. Thus, by controlling
f7–f9 an attacker can control the memory address accessed
under speculation. Speciﬁcally, Line 13 of Listing 1 shows
how the values of ext_ptr and base_ptr are combined
with the global heap_ptr to calculate the pointer to the
backing store. Because Chrome tends to align heaps to 4 GB
boundaries, the 32 least signiﬁcant bits of heap_ptr are
typically all zero. Hence, by setting the values of f7 and f8
to the low and high words of the desired address, and setting
f9 to zero, the computed value of back_ptr is the desired
address. If the value of index is also set to zero, the transient
execution will result in accessing the desired address. Setting
index to zero also helps to avoid the need to speculate over
the test in Line 9 of Listing 1. All the attacker needs to do is
to set f5 and f6 so that when they are interpreted as a 64-bit
length, they yield a non-zero value, e.g., 1.
Delaying Type Resolution.
Our type confusion attack
relies on mispredicting the branch at Line 3 of Listing 1. To
allow transient execution past the branch, we need to delay
the determination of the branch condition. Typically, such
delays can be achieved by evicting the data that the condition
evaluates from the cache. In our case, we evict the type ﬁeld
of the AttackerClass object. At the same time to compute
the fake backing store pointer, the CPU should have transient
access to ﬁelds f7–f9 of the AttackerClass object before
the type-checking branch is resolved. Thus, for a successful
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:21:13 UTC from IEEE Xplore.  Restrictions apply. 
6704
Uint8ArrayAttackerClass1typetype2propertiesproperties3integer_propertiesinteger_properties4bufferf05byte_offset_1f16byte_offset_2f27byte_length_1f38byte_length_2f49length_1f510length_2f611ext_ptr_1f712ext_ptr_2f813base_ptrf91
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
// Setup
let objArray = new Array(128);
for (let i=0; i<64; i++) {
objArray[i] = new Uint8Array(0x20);
objArray[64+i] = new AttackerClass(i);
garbageCollector();
}
let malIndex = findSplitAttackObj(objArray);
let malObject = objArray[malIndex];
let arguments;
let scratch = 0;
malObject.f0 = 1;
// Training
arguments = [0, 0];
for(let i=0; i<10000; i++) gadget();
// Attack
arguments = [malIndex, 0];
malObject.f5 = 1; // length_1
malObject.f6 = 0; // length_2
malObject.f7 = Lower32BitsOfAddress;
malObject.f8 = Upper32BitsOfAddress;
malObject.f9 = 0;
evict(malObject.f0);
gadget();
cacheChannel.receive()
// Attack Gadget
function gadget(){
let arrIndex, elemIndex = arguments;
if(arrIndex < malObject.f0) {
let arr = objArray[arrIndex];
let val = arr[elemIndex]; // byte
cacheChannel.leak(val);
return val;
}
return scratch;
}
Listing 2: An example of our speculative type confusion
primitive, including code inserted by the JavaScript engine.
attack, we need an AttackerClass object that straddles
two cache lines. In Section IV-D we describe how to achieve
this layout and how we evict the type ﬁeld from the cache.
C. Overcoming [C3]: Avoiding Deoptimization Events via
Speculation
In the previous section, we show how we can perform type
confusion with the compiler-generated code in Listing 1. We
now demonstrate how an attacker can exploit type confusion
to construct a generic read primitive. The main complication
is that the attacker must not only control speculative execution
at the processor, but also ensure that Chrome’s optimizing
compiler does not modify the code as it runs.
Listing 2 presents the JavaScript code for the attack, which
consists of four main stages that we now describe.
Setup.
The attack relies on speculatively swapping a
malicious object of AttackerClass for a Uint8Array.
The setup stage prepares all
the variables needed for the
attack. It initializes an array of objects objArray, setting
some of the entries to Uint8Array and others to objects
of AttackerClass (Lines 1–5). Line 6 triggers Chrome’s
garbage collector (similar to [20]) by allocating 50 1 MB
buffers and allowing each buffer to go out of scope imme-
diately. The garbage collector then compacts the heap and
reallocates the previously-initialized objects, placing them in
contiguous memory locations. Finally, we recall from Sec-
tion IV-B that the attack requires ﬁnding a malicious object
that is split over two cache lines. We ﬁnd such an object
in Line 8 of Listing 2. Due to its complexity, we defer
the discussion of this procedure and its interaction with the
garbage collector to Section IV-D.
We keep two different references to the malicious object:
a direct reference in malObject (Line 9) and an indirect
reference malIndex, via its index in objArray. Finally,
the setup declares variables used by the gadget and sets
malObject.f0 to 1. We note that we assume the ﬁeld f0
is in the same cache line as the malicious object’s type.
Training.
In Lines 15–16, we perform the training stage of
the attack. We ﬁrst set the arguments of the gadget to ensure
that the accessed object is a Uint8Array. Speciﬁcally, the
gadget expects two values in the variable arguments.1 The
ﬁrst argument is an index to the array objArray, which can
be either an object of AttackerClass or a Uint8Array.
In the case that the pointed object is a Uint8Array, the
gadget’s second argument is the Uint8Array index. Setting
the ﬁrst argument to 0 implies that the gadget uses the object
in objArray[0], which is a Uint8Array.
After setting the arguments,
the training stage invokes
the gadget 10000 times (Line 16). During these invocations,
Chrome’s optimizer observes the gadget’s execution, and de-
tects that it always processes a Uint8Array object. Con-
sequently, the optimizer specializes the gadget’s array access
to that case, using Listing 1 to perform the array access in
Line 34. Moreover, the CPU’s branch predictor observes the
branches in the gadget and in the array access code, and sets
their prediction to match a valid Uint8Array object.
Attack.
In the attack stage, we ﬁrst set the arguments to
refer to our malicious object (Line 19). We then set the ﬁelds
f5–f9, which correspond to the length, ext_ptr, and
base_ptr of a Uint8Array (see Figure 2). Speciﬁcally we
set f5, f6 to have the value 1 when interpreted as array length,
f7, f8 to point to the desired 64-bit address when interpreted
as ext_ptr, and f9 which is interpreted as base_ptr to
zero.2We then evict the cache line that contains f0 (and the
malicious object’s type) from the cache and invoke the gadget.
When the gadget returns, we retrieve the leaked value from
the cache side-channel (Line 27), completing the attack.
Attack Gadget.
The core of the attack occurs when
the gadget function is executed on a malObject of
type AttackerClass, after being specialized to han-
dle Uint8Arrays. As Line 19 of Listing 2 passes
malIndex, Line 33 results in arr being malObject of
type AttackerClass. Next, as the array access in Line 34
1We pass the arguments using a global variable because we ﬁnd that using
function parameters increases the noise in the cache side-channel, which we
use to retrieve the leaked values.
2This is a simpliﬁed description for brevity. See Appendix B for a thorough
description.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:21:13 UTC from IEEE Xplore.  Restrictions apply. 
7705
Figure 3: A malicious object split across cache lines.
of Listing 2 is specialized to handle access to Uint8Arrays,
executing this line using malObject triggers the spec-
ulative type confusion attack described in Section IV-B.
In particular, the address encoded in malObject.f7 and
malObject.f8 is dereferenced, resulting in val being pop-
ulated with that address’s contents. Finally, Line 35 transmits
val via a cache side-channel, where it is recovered in Line 27.
Deoptimization Hazard. Recall that the compiler specializes
the array access in Line 34 of Listing 2 based on the observing
Uint8Array accesses during the training phase. When the
type confusion attack executes, the type check (Line 3 of
Listing 1) recognizes the mismatch between Uint8Array
and AttackerClass, aborts the specialized code, and alerts
Chrome that other types may be used. Consequently, Chrome
deoptimizes the array reference, revoking the specialization.
Unfortunately, unspecialized code is not vulnerable to our type
confusion attack, requiring us to re-train the optimizer for the