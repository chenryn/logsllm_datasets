−1
K (T, X, C) = (Y, M).
makes a single query to EK using tweak T.
The encryption/decryption algorithms (E,D) of Π are then deﬁned as in Figure 3.1, where we require τ ≤ n.
Roughly, to encrypt a message M = M1M2 ··· M2m using nonce N and associated data A, set the initial
state X = 02n and set T = (N, A, 1). Then, iteratively process two message blocks at a time using Enc, each
time updating the initial state and outputting the next two ciphertext blocks. After processing the entire
message, Tag is used to compute a tag based on the ﬁnal state output by Enc and a designated tweak that
depends on the message length; the (truncated) tag is appended to the ciphertext.
Graph representation. As in the work of Malozemoﬀ et al. [18], we represent algorithms Enc, Dec, and
Tag as directed acyclic graphs, where each node is associated with an instruction and carries an n-bit value.
The n-bit value on each node is determined by applying the instruction at that node to the values at the
parent nodes. In the next section we introduce a system for “typing” the nodes of such graphs; our main
theorem states that AE schemes built from Enc, Dec, and Tag algorithms whose graphs can be correctly
typed are secure.
The main instructions we support are XOR, which computes the XOR of two n-bit strings, and TBC,
which invokes the tweakable blockcipher or its inverse. We also have an instruction DUP that duplicates a
4For eﬃciency, the real-world variants are often built directly from a blockcipher instead of a tweakable one, and employ a
scheme-speciﬁc way to handle fragmentary data. The real-world CCM is not online due to its treatment of fragmentary data,
whereas our variant is online. OCB is built from a tweakable blockcipher, but the tweaks are (N, i) instead of (N, A, i). To
handle associated data, OCB employs an XOR-universal hash (based on a tweakable blockcipher), and XORs the hash image
to the tag.
5One can extend the XEX construction [22] of a tweakable blockcipher from any blockcipher to tweak space N ×{0, 1}∗ × Z
as follows: On tweak (N, A, i), one applies a (keyed) universal hash to (N, A) to derive a synthetic nonce N0, and apply the
XEX construction on (N0, i). By buﬀering L, hashing need only be done once per message.
6Messages of arbitrary length can be handled by naive padding in the usual way. In Appendix B we describe a more eﬃcient
approach for handling messages of arbitrary length.
4
EK(N, A, M)
X := 02n; v := 1; M1 ··· M2m := M // |Mi| = n
for i = 1 to m do
T := (N, A, v)
(Y, C2i−1C2i) := EncEK (T, X, M2i−1M2i)
v := v + Cost(Π); X := Y
T := (N, A, 1 − v); V := TagEK (T, X)
return C1 ··· C2m k V [1, τ]
DK(N, A, C)
if |C| 6≡ τ (mod 2n) then return ⊥
C1 ··· C2m k tag := C // |Ci| = n and |tag| = τ
X := 02n; v := 1
for i = 1 to m do
// |Cj| = n
T := (N, A, v)
(Y, M2i−1M2i) := DecEK ,E
v := v + Cost(Π); X := Y
−1
K (T, X, C2i−1C2i)
T := (N, A, 1 − v); V := TagEK (T, X)
if tag 6= V [1, τ] then return ⊥ else return M1 ··· M2m
Figure 3.1: Code of an AE scheme Π = (K,E,D) following our template. The scheme is based on a tweakable
blockcipher E and a triple of deterministic algorithms (Enc, Dec, Tag).
value. Nodes corresponding to input blocks are labeled IN, those corresponding to output blocks are labeled
OUT, those corresponding to the initial state are labeled INI, and those corresponding to the ﬁnal state are
labeled FIN. These labels, along with their in-/out-degree, are summarized for convenience next:
Name
In-deg Out-deg Meaning
IN
INI
FIN
OUT
DUP
XOR
TBC
0
0
1
1
1
2
1
1
1
0
0
2
1
1
Input block
Initial state
Final state
Output block
Duplicate
XOR operation
Tweakable blockcipher
Figure 3.2 illustrates the OCB scheme [22] and its Enc, Dec, and Tag graphs, whereas Figure 3.3 shows
the corresponding algorithms. (In OCB, only the ﬁrst n bits of the state are used, so we treat the state as
an element of {0, 1}n.) Note that Figure 3.2 is informal and omits information needed to fully specify OCB;
see next for formal details of how graphs are speciﬁed.
Formally, we denote a graph G by a tuple (d, r, F, P, L), where d ∈ {2, 4} is the total number of IN and INI
nodes (Enc and Dec graphs have d = 4; Tag graphs have d = 2), and r ∈ N is the total number of nodes. Each
node in the graph is numbered from 1 to r, and we require that if node i is a parent of node j then i  0 then Zi := EK(T ∗, Zp) else Zi := E
−1
K (T ∗, Zp)
return (Z1, . . . , Zr)
Figure 3.4: Procedure to compute the value Zi of each node i in a graph G, given input Z1, . . . , Zd and tweak T .
proc Map(G−, type1, . . . , typed, rand)
(d, r, F, P ) := G−; maxCtr := 0
for i = 1 to d do
if typei = $ then R(i) := ($, 1); maxCtr := 1
else R(i) := (typei, 0)
if F (i) ∈ {FIN, OUT, DUP} then
for i = d + 1 to r do
elseif F (i) = TBC then
{p} := P (i); R(i) := R(p)
{p} := P (i); (x, ctr) := R(p)
if x ∈ {1, $} or (rand = true) then
maxCtr := maxCtr + 1; R(i) := ($, maxCtr)
else // F (i) = XOR
else R(i) := (x, ctr)
{p1, p2} := P (i); (x, ctr) := R(p1); (y, ctr0) := R(p2)
// Assume that ctr ≥ ctr0
if (x, y) ∈ {(0, 0), (0, 1), (1, 0)} then R(i) := (x ⊕ y, ctr)
elseif x = $ and ctr > ctr0 then R(i) := ($, ctr)
else R(i) := (⊥, ctr)
return R
Figure 3.5: A procedure for generating a mapping R : {1, . . . , r} → Types × N for a given unlabeled graph.