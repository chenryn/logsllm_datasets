OHCI
NVME
Lsi53c895a
Megasas
AHCI
Network
USB
Storage
Average
Functions Coverage Branches Coverage
Line Coverage
Initial
Initial
Total
30.00% 96.10% 57.10%
68.30% 95.00% 78.60%
54.20% 99.62% 73.70%
12.30% 99.19% 28.60%
27.40% 86.00% 66.70%
36.20% 94.20% 46.90%
6.70%
89.60% 28.60%
24.60% 97.40% 44.80%
28.10% 97.60% 59.10%
81.30% 89.10% 86.10%
40.70% 82.70% 53.40%
46.90% 83.70% 65.10%
38.60% 72.40% 47.30%
26.90% 79.00% 46.70%
58.10% 63.80% 68.30%
75.30% 81.80% 78.60%
40.98% 87.95% 58.10%
Total
100.00%
95.20%
100.00%
100.00%
80.00%
96.90%
100.00%
100.00%
97.70%
88.90%
89.00%
86.00%
76.40%
71.10%
70.00%
82.10%
89.58%
Total
85.80%
78.30%
91.91%
81.52%
79.40%
74.50%
71.90%
88.90%
88.40%
82.30%
71.90%
79.20%
65.10%
75.70%
58.50%
61.60%
77.18%
Initial
3.00%
42.10%
33.80%
3.00%
15.30%
16.10%
3.80%
8.30%
12.30%
68.90%
32.70%
33.30%
22.80%
9.30%
43.90%
51.90%
25.03%
Speed(exec/s)
Dumb-Fuzzing V-Shuttle
7632.70
8568.50
6496.04
3242.22
10103.42
1186.92
11392.45
4833.35
5495.18
9273.25
2265.34
5228.43
7870.23
4091.53
4558.58
5525.55
6110.23
10918.21
9596.41
8786.85
5123.76
10350.61
5532.90
12213.31
5880.21
6333.37
10592.12
3869.43
7221.49
10981.52
6363.84
5863.47
5577.74
7844.64
DMA). Also, we studied the Intel specifications and built structure-
aware fuzzing (also refers to generation-based fuzzing) that targets
these devices (RQ2). This structure-aware fuzzing is manually writ-
ten according to various rules in the device specification, including
manual construction of the nested structure and establishment of
the relationship between different types of nodes. Our customized
structure-aware fuzzing follows the common steps: (1) Setup device
states, registers using I/O ports or mapped memory. (2) Generate
random device data structures. (3) Issue commands for processing
the data structures.
We choose 3 USB controllers (UHCI, OHCI, and EHCI) for eval-
uation, mainly for the following reasons: 1) The USB controllers
use DMA more frequently and are more representative. Since our
work mainly focuses on DMA, the performance will be good as
long as the devices use DMA. Also, as described in Section 2.2, most
devices of hypervisors use DMA. 2) The security of USB is partic-
ularly important. USB is widely used and deployed in the public
cloud, and is usually mounted by default. In recent years, there are
many virtual machine escaping cases on USB devices [1–3]. Hence
it is crucial to test USB. 3) Building the structure-aware fuzzing
for a device involves massive human effort, since it requires us to
understand the specification. Therefore, we limit our comparison
to these three devices.
We evaluate V-Shuttle-M, V-Shuttle-S, structure-aware
fuzzing, and dumb fuzzing on QEMU for 24 hours, 10 runs. We
ran the target hypervisor with gcov, and called __gcov_flush() every
second to dump the coverage found over time. Figures 7 shows the
branch coverage results in log scale.
5.2.1 V-Shuttle Main Framework. We can learn from Figure 7
that V-Shuttle-M can greatly outperform dumb fuzzing. That is
because dumb fuzzing has no prior knowledge of data structure
(a) UHCI
(b) OHCI
(c) EHCI
Figure 7: QEMU’s branch coverage results of V-Shuttle during a 24-
hours run. The line indicates the averages while the shaded area represents
the 95% confidence intervals across 10 runs.
defined by specifications, thus stuck in the initial fuzzing stage.
V-Shuttle-M also discovers more branches than structure-aware
fuzzing in almost every case. For instance, on EHCI, structure-
aware fuzzing discovers about 64.6% of branches in 24 hours, while
V-Shuttle-M discovers 71.4%. According to our analysis, it is
mainly because (1) V-Shuttle-M’s feature could cover hard-to-
take branches caused by frequent use of pci_dma_read function,
where its argument address is hardly predictable, which points to
an unknown type structure with multi-layered feature (Section 3.3).
Session 7B: Fuzzing CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2206(2) Our structure-aware fuzzing is still in progress and not well-
crafted enough. This result tells, unlike the automatic and accurate
nature of V-Shuttle-M, writing manual rules by human effort is
subject to error-prone as well as time-consuming tasks.
5.2.2
Semantics-Aware Fuzzing Mode. Comparing V-Shuttle-S
with V-Shuttle-M, we can learn that the final coverage results
are nearly identical for all the cases, but V-Shuttle-S reaches the
peak point faster than V-Shuttle-M. Due to the semantics-aware
feature of the seedpool-based seed generation, V-Shuttle-S quickly
learned how to generate semantically valid data structures through
different contexts, which led to the deep execution of the hypervisor.
We believe this provides lots of insight to accelerate hypervisor
fuzzing.
In summary, both the V-Shuttle main framework and
semantics-aware fuzzing mode present outstanding coverage
improvement (better than loosely written structure-aware tem-
plates) without ongoing manual efforts. Better performance can be
achieved if integrating the semantics-aware fuzzing mode, which
could further accelerate the convergence speed of V-Shuttle.
Table 3: The branch coverage found by VDF, Hyper-Cube, Nyx and V-
Shuttle on the 8 QEMU devices. Std denotes the standard error over 10
runs. △ denotes the difference in percentage points between V-Shuttle
and Nyx.
Device
CS4231a
VDF
Cov
56.00%
Intel-HDA 58.60%
72.70%
81.00%
81.60%
71.70%
36.10%
63.00%
ES1370
SoundBlaster
E1000
NE2000
PCNET
RTL8139
Hyper-Cube
Cov
Nyx
Cov
V-Shuttle
Cov
Std
74.76% 74.76% 85.80% 1.07
78.30% 0.55
79.17% 78.33%
91.91% 1.21
91.38% 91.38%
83.80% 81.34%
81.52% 0.42
66.08% 54.55% 74.50% 0.90
71.90% 0.92
71.89% 71.89%
78.71% 89.49%
88.90% 1.35
74.68% 79.28% 88.40% 0.64
△
11.04%
-0.03%
0.54%
0.18%
19.95%
0.01%
-0.59%
8.72%
5.3 Comparison with State-of-the-Art Fuzzers
To answer RQ3, we compare V-Shuttle (enabling semantics-aware
fuzzing mode) against state-of-the-arts fuzzers (Nyx, Hyper-Cube
and VDF). Unfortunately, Nyx and Hyper-Cube were not openly
available at the time we performed the experiments. Therefore,
we only compare them with the devices we have already tested
(Table 2), and we compare them against the numbers published in
their paper. In the comparison, we carefully make the settings to
ensure fairness. 1) There is little difference in different versions of
QEMU, as the amount of code changes is tiny. 2) The evaluation
time is the same. All of them are the results of 24-hour fuzzing. 3)
The machine configuration is also comparable. Most importantly,
according to our observation, the fuzzing speed is not the key factor
affecting the final coverages. Almost all the coverages of the tested
devices by Nyx and Hyper-Cube reach the peak at a very early
stage of the 24 hours.
We display the overall results in Table 3. As can be seen, our
approach achieves significantly better than VDF in all (but one)
scenarios. The difference is due to the fact that the code changed
since VDF performed their experiments, which does not represent
a real difference in performance. Compared to Nyx, there are only
3 out of 8 cases are improved, mainly due to the following two
reasons. First, compared with other cases, these three cases use
DMA more intensively. Therefore, the performance gain benefits
from our DMA redirection approach. Second, the amount of the
code of the other five devices is very small (from 701 to 1753 LoC),
which means that most of the code paths can be triggered in simple
MMIO operations. Thus, there is little space for improvement. The
same results can be seen when compared to blind fuzzer Hyper-
Cube.
However, on the complex devices, the advantages of V-Shuttle
begin to show. For E1000 and RTL8139, we are able to achieve
19.95% and 8.72% better than Nyx. After manual analysis, we found
that nested structures are intensively used when the device encap-
sulates the network packets. We attribute the better performance to
our DMA redirection approach, which unrolls the nested structures
and helps to discover deeper code paths. This demonstrates that our
approach significantly improves the coverage finding capability.
5.4 Vulnerability Hunting
We demonstrate the vulnerability hunting capability of V-
Shuttle(RQ4) from two aspects: ❶ Is V-Shuttle able to uncover
new bugs and vulnerabilities in different hypervisors? ❷ Can V-
Shuttle reproduce previously known vulnerabilities found by
other hypervisor fuzzers?
Table 4: Overview of the vulnerabilities found by V-Shuttle in our targets.
Hypervisor
QEMU
VirtualBox
#Bugs
Type
Use-After-Free
2
Heap-based Buffer Overflow 4
1
Stack Overflow
3
Infinite Loop
6
Segmentation Fault
4
Null Pointer Derefence
Assertion
6
Heap-based Buffer Overflow 4
2
Divide by Zero
Segmentation Fault
3
5.4.1 Uncover New Vulnerabilities Ability. An overview of the
types of crashes found is shown in Table 4. A full list of the vul-
nerabilities with more details on the exploitability can be found
in Appendix. V-Shuttle has successfully detected 35 previously
unknown bugs, including 26 bugs from QEMU and 9 from Virtual-
Box. We have responsibly reported all the bugs to corresponding
hypervisor developers and have received their positive feedback.
At the time of paper writing, 24 of all the bugs have been fixed. 17
of them got CVE numbers due to the severe security consequences.
Bug Diversity. The 35 bugs in Table 6 cover almost all common
types of memory errors and almost all common device types of hy-
pervisor, showing that V-Shuttle can improve hypervisor security