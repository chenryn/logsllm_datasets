*   **cloud information 助手脚本**:当您使用 cloud information 来部署您的基础架构时，AWS 提供了一组 cloud information 助手脚本，统称为 **cfn-bootstrap** ，它们与 cloud information 一起工作，以获取初始化元数据，该元数据允许您在实例创建时执行自定义的初始化任务，并且还在实例成功完成初始化时向 cloud information 发出信号。我们将在后面的章节中探讨这种方法的好处，但是，现在您需要确保这些帮助脚本出现在您的自定义 ECS 容器实例映像中。
*   **CloudWatch 日志代理**:AWS cloud watch 日志服务提供来自各种来源的日志的集中存储，包括 EC2 实例、ECS 容器和其他 AWS 服务。要将您的 ECS 容器实例(EC2 实例)日志传送到 CloudWatch 日志，您必须在本地安装 CloudWatch 日志代理，然后可以使用该代理转发各种系统日志，包括操作系统、Docker 和 ECS 代理日志。
*   **`jq`实用程序**:实用程序([【https://stedolan.github.io/jq/manual/】](https://stedolan.github.io/jq/manual/))对于解析 JSON 输出很方便，当您定义一个简单的运行状况检查来验证 ECS 容器实例已经加入到配置的 ECS 集群时，您将在本章的后面需要这个实用程序。
安装这些附加包非常简单，可以通过修改您之前创建的内联 shell provisioner 来实现:
```
{
  "variables": {...},
  "builders": [...],
  "provisioners": [
    {
      "type": "shell",
      "script": "scripts/storage.sh"
    },
    {
      "type": "shell",
      "inline": [
        "sudo yum -y -x docker\\* -x ecs\\* update",
 "sudo yum -y install aws-cfn-bootstrap awslogs jq"
      ] 
    }
  ],
  "post-processors": [...]
}
```
Installing additional operating system packages
如您在前面的示例中所见，可以使用`yum`包管理器轻松安装所需的每个包。
# 配置系统设置
您需要对自定义 ECS 容器实例进行一些小的系统设置:
*   配置时区设置
*   修改默认云初始化行为
# 配置时区设置
之前，您定义了一个名为`timezone`的变量，到目前为止，您还没有在模板中引用它。您可以使用此变量来配置自定义 ECS 容器实例映像的时区。
为此，首先需要在 Packer 模板中添加一个新的 shell provisioner:
```
{
  "variables": {...},
  "builders": [...],
  "provisioners": [
    {
      "type": "shell",
      "script": "scripts/storage.sh"
    },
    {
 "type": "shell",
 "script": "scripts/time.sh",
 "environment_vars": [
 "TIMEZONE={{user `timezone`}}"
 ]
 },
    {
      "type": "shell",
      "inline": [
        "sudo yum -y -x docker\\* -x ecs\\* update",
        "sudo yum -y install aws-cfn-bootstrap awslogs jq"
      ] 
    }
  ],
  "post-processors": [...]
}
```
Adding a provisioner to configure time settings
在前面的示例中，我们引用了一个名为`scripts/time.sh`的脚本，您将很快创建该脚本，但是请注意，我们还包括一个名为`environment_vars`的参数，该参数允许您将您的 Packer 变量(在本例中为`timezone`)作为环境变量注入到您的 shell 供应脚本中。
以下示例显示了在新的 Packer 模板供应任务中引用的所需的`scripts/time.sh`脚本:
```
#!/usr/bin/env bash
set -e
# Configure host to use timezone
# http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/set-time.html
echo "### Setting timezone to $TIMEZONE ###"
sudo tee /etc/sysconfig/clock  /dev/null
ZONE="$TIMEZONE"
UTC=true
EOF
sudo ln -sf /usr/share/zoneinfo/"$TIMEZONE" /etc/localtime
# Use AWS NTP Sync service
echo "server 169.254.169.123 prefer iburst" | sudo tee -a /etc/ntp.conf
# Enable NTP
sudo chkconfig ntpd on
```
Time settings provisioning script
在上例中，首先配置 [AWS 推荐的配置时间设置](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/set-time.html)，用配置的`TIMEZONE`环境变量配置`/etc/sysconfig/clock`文件，创建符号`/etc/localtime`链接，最后确保`ntpd`服务配置为使用 [AWS NTP 同步](https://aws.amazon.com/blogs/aws/keeping-time-with-amazon-time-sync-service/)服务，并在实例启动时启动。
The AWS NTP sync service is a free AWS service that provides an NTP server endpoint at the `169.254.169.123` local address, ensuring your EC2 instances can obtain accurate time without having to traverse the network or internet.
# 修改默认云初始化行为
cloud-init 是一组标准实用程序，用于执行云映像和相关实例的初始化。cloud-init 最受欢迎的特性是用户数据机制，这是一种在创建实例时运行您自己的自定义初始化命令的简单方法。
cloud-init 也用于 ECS-Optimized AMI 中，在实例创建时执行自动安全修补，虽然这听起来是一个有用的功能，但它可能会导致问题，尤其是在您的实例位于私有子网并且需要 HTTP 代理与互联网通信的环境中。
cloud-init 安全机制的问题是，尽管可以通过设置代理环境变量来配置它以使用 HTTP 代理，但它是在执行 userdata 之前调用的，这导致了先有鸡还是先有蛋的情况，如果使用代理，您别无选择，只能禁用自动安全修补。
要禁用此机制，您首先需要在 Packer 模板中配置一个新的 shell provisioner:
```
{
  "variables": {...},
  "builders": [...],
  "provisioners": [
    {
      "type": "shell",
      "script": "scripts/storage.sh"
    },
    {
      "type": "shell",
      "script": "scripts/time.sh",
      "environment_vars": [
        "TIMEZONE={{user `timezone`}}"
      ]
    },
    {
 "type": "shell",
 "script": "scripts/cloudinit.sh"
 },
    {
      "type": "shell",
      "inline": [
        "sudo yum -y -x docker\\* -x ecs\\* update",
        "sudo yum -y install aws-cfn-bootstrap awslogs jq"
      ] 
    }
  ],
  "post-processors": [...]
}
```
Adding a provisioner to configure cloud-init settings The referenced `scripts/cloudinit.sh` script can now be created as follows:
```
#!/usr/bin/env bash
set -e
# Disable cloud-init repo updates or upgrades
sudo sed -i -e '/^repo_update: /{h;s/: .*/: false/};${x;/^$/{s//repo_update: false/;H};x}' /etc/cloud/cloud.cfg
sudo sed -i -e '/^repo_upgrade: /{h;s/: .*/: none/};${x;/^$/{s//repo_upgrade: none/;H};x}' /etc/cloud/cloud.cfg
```
Disabling security updates for cloud-init
在下面的例子中，看起来相当恐怖的`sed`表达式将在`/etc/cloud/cloud.cfg` cloud-init 配置文件中添加或替换以`repo_update`和`repo_upgrade`开头的行，并确保它们分别设置为`false`和`none`。
# 配置清理脚本
至此，我们已经执行了所有必需的安装和配置 shell 配置任务。我们将创建最后一个 shell provisioner，一个清理脚本，它将删除用于构建自定义映像的实例运行时创建的任何日志文件，并确保机器映像处于准备启动的状态。
您首先需要向您的 Packer 模板添加一个外壳提供程序，该模板引用`scripts/cleanup.sh`脚本:
```
{
  "variables": {...},
  "builders": [...],
  "provisioners": [
    {
      "type": "shell",
      "script": "scripts/storage.sh"
    },
    {
      "type": "shell",
      "script": "scripts/time.sh",
      "environment_vars": [
        "TIMEZONE={{user `timezone`}}"
      ]
    },
    {
      "type": "shell",
      "script": "scripts/cloudinit.sh"
    },
    {
      "type": "shell",
      "inline": [
        "sudo yum -y -x docker\\* -x ecs\\* update",
        "sudo yum -y install aws-cfn-bootstrap awslogs jq"
      ] 
    },
 { "type": "shell",
 "script": "scripts/cleanup.sh"
 }
  ],
  "post-processors": [...]
}
```
Adding a provisioner to clean up the Image
使用 Packer 模板中定义的置备程序，接下来需要创建清理脚本，如下所述:
```
#!/usr/bin/env bash
echo "### Performing final clean-up tasks ###"
sudo stop ecs
sudo docker system prune -f -a
sudo service docker stop
sudo chkconfig docker off
sudo rm -rf /var/log/docker /var/log/ecs/*
```
Cleanup script
在下面的例子中，请注意您没有执行命令`set -e`，因为这是一个清理脚本，如果出现错误，您并不太担心，如果服务已经停止，您也不希望您的构建失败。首先停止 ECS 代理，使用`docker system prune`命令清除可能存在的任何 ECS 容器状态，然后停止 Docker 服务，然后使用`chkconfig`命令禁用。这样做的原因是，在创建实例时，我们将总是调用第一次运行的脚本，该脚本将执行实例的初始配置，并要求 Docker 服务停止。当然，这意味着一旦第一次运行的脚本已经完成了它的初始配置，它将负责确保 Docker 服务已经启动并能够在启动时启动。
最后，清理脚本会删除任何 Docker 和 ECS 代理日志文件，这些文件可能是在自定义机器映像构建过程中实例启动的短暂时间内创建的。
# 创建第一次运行脚本