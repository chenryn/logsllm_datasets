Tη := T + η1 ;
12
13
14
15
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
count := 0; i := 0;
while ( count < N ∧ i < size )
η3 := sample[idx]; idx := idx + 1;
η2 := sample[idx]; idx := idx + 1;
if (q[i] + η2 ≥ Tη ) then
vϵ := vϵ + |A2| × ϵ/6N ; (cid:98)η2 := A2;
assert(q[i] + η2 +(cid:98)q[i] + (cid:98)η2 ≥ Tη + (cid:99)Tη );
vϵ := vϵ + |A3| × ϵ/3N ; (cid:98)η3 := A3;
assert((cid:98)q[i] + (cid:98)η3 = 0);
assert(¬(q[i] + η2 +(cid:98)q[i] + (cid:98)η2 ≥ Tη + (cid:99)Tη ));
out := (q[i] + η3 ):: out ;
count := count + 1;
else
out := false :: out ;
i := i + 1;
assert(vϵ ≤ ϵ );
Figure 10: Numerical Sparse Vector Technique and its
transformed code, where underlined parts are added by
CheckDP. The transformed code contains three alignment
templates for η1, η2 and η3 respectively: A1 = θ[0], A2 =
(q[i] + η2[i] ≥ Tη) ? (θ[1] + θ[2] ×(cid:98)Tη + θ[3] ×(cid:98)q[i]) : (θ[4] +
θ[5] × Tη + θ[6] ×(cid:98)q[i]), A3 = θ[7] + θ[8] ×(cid:98)Tη + θ[9] ×(cid:98)q[i])
19
function AdaptiveSVT (T,N,size : num0 ,q : list num∗ )
returns (out : list num0 ), check(ϵ)
precondition ∀ i. −1 ≤(cid:98)q[i] ≤ 1
cost := 0;
η1 := Lap (2/ϵ);
cost := cost + ϵ/2;
Tη := T + η1 ;
i := 0;
while ( cost ≤ ϵ - 4N/ϵ ∧ i < size )
η2 := Lap (8N/ϵ);
if (q[i] + η2 − Tη ≥ σ ) then
out := (q[i] + η2 - Tη ):: out ;
cost := cost + ϵ/(8N);
η3 := Lap (4N/ϵ);
if (q[i] + η3 − Tη ≥ 0) then
out := (q[i] + η3 - Tη ):: out ;
cost := cost + ϵ/(4N);
else
else
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
out := 0:: out ;
i := i + 1;
returns (out)
function Transformed AdaptiveSVT (T,N,size,q,(cid:98)q, sample, θ)
vϵ := vϵ + |A1| × ϵ/2; (cid:98)η1 := A1;
16 (cid:99)Tη := (cid:98)η1;
vϵ := 0; idx = 0;
η1 := sample[idx]; idx := idx + 1;
Tη := T + η1 ;
12
13
14
15
count := 0; i := 0;
while ( cost ≤ ϵ - 4N/ϵ ∧ i < size )
else
out := (q[i] + η2 - Tη ):: out ;
cost := cost + ϵ/(8N);
η2 := sample[idx]; idx := idx + 1;
if (q[i] + η2 - Tη ≥ σ ) then
vϵ := vϵ + |A2| × ϵ/8N ; (cid:98)η2 := A2;
assert(q[i] + η2 +(cid:98)q[i] + (cid:98)η2 - (Tη + (cid:99)Tη ) ≥ σ );
assert((cid:98)q[i] + (cid:98)η2 - (cid:99)Tη == 0);
assert(¬(q[i] + η2 +(cid:98)q[i] + (cid:98)η2 - (Tη + (cid:99)Tη ) ≥ σ ));
vϵ := vϵ + |A3| × ϵ/4N ; (cid:98)η2 := A3;
assert(q[i] + η3 +(cid:98)q[i] + (cid:98)η3 - (Tη + (cid:99)Tη ≥ 0) ;
assert((cid:98)q[i] + (cid:98)η3 - (cid:99)Tη == 0);
assert(¬(q[i] + η3 +(cid:98)q[i] + (cid:98)η3 - (Tη + (cid:99)Tη ) ≥ 0));
η3 := sample[idx]; idx := idx + 1;
if (q[i] + η3 - Tη ≥ 0)
out := (q[i] + η3 - Tη ):: out ;
cost := cost + ϵ/(4N);
else
out := false :: out ;
i := i + 1;
assert(vϵ ≤ ϵ );
Figure 11: Adaptive SVT and its transformed code, where un-
derlined parts are added by CheckDP. The transformed code
contains three alignment templates for η1 and η2: A1 = θ[0],
A2 = ΩT op ?(θ[1]+θ[2]×(cid:98)Tη +θ[3]×(cid:98)q[i]):(θ[4]+θ[5]×Tη +θ[6]×
(cid:98)q[i]) and A3 = ΩMiddle ?(θ[1] +θ[2]×(cid:98)Tη +θ[3]×(cid:98)q[i]):(θ[4] +
θ[5] × Tη + θ[6] ×(cid:98)q[i]), where Ω∗ denotes the corresponding
branch condition at Line 8 and 13.
Note that apart from BadSVT1, which does not sample η2, the
generated templates are identical to the GapSVT since they all have
similar typing environments.
Interestingly, since the errors are very similar among them
(no bounds on number of outputs / wrong scale of added noise),
CheckDP finds a common counterexample[0, 0, 0, 0, 0],[1, 1, 1, 1,−1]
where T = 0 and N = 1 within 6 seconds, and this counterexample
is further validated by PSI.
BadGapSVT. As discussed in Section 2.4, we list one of our run-
ning examples BadGapSVT in Figure 15 for completeness.
function BadSVT1 (T,N,size : num0 , q : list num∗ )
returns (out : list bool ), check(ϵ)
precondition ∀ i. −1 ≤(cid:98)q[i] ≤ 1
η1 := Lap (2/ϵ);
Tη := T + η1 ;
count := 0; i := 0;
while ( i < size )
0 ;
η2 :=
if (q[i] + η2 ≥ Tη ) then
out := true :: out ;
count := count + 1;
else
1
2
3
4
5
6
7
8
9
10
11
out := false :: out ;
i := i + 1;
returns (out)
function Transformed BadSVT1 (T,N,size,q,(cid:98)q, sample, θ)
vϵ := vϵ + |A1| × ϵ/2; (cid:98)η1 := A1;
16 (cid:99)Tη := (cid:98)η1;
vϵ := 0; idx = 0;
η1 := sample[idx]; idx := idx + 1;
Tη := T + η1 ;
12
13
14
15
17
18
19
20
21
22
23
24
25
26
27
28
count := 0; i := 0;
while (i < size )
η2 := 0;
if (q[i] + η2 ≥ Tη ) then
assert(q[i] + η2 +(cid:98)q[i] ≥ Tη + (cid:99)Tη );
assert(¬(q[i] + η2 +(cid:98)q[i] ≥ Tη + (cid:99)Tη ));
out := true :: out ;
count := count + 1;
else
out := false :: out ;
i := i + 1;
assert(vϵ ≤ ϵ );
Figure 12: BadSVT1 and its transformed code, where under-
lined parts are added by CheckDP. The transformed code
contains a alignment template for η1: A1 = θ[0].
20
function BadSVT3 (T,N,size : num0 , q : list num∗ )
returns (out : list bool ), check(ϵ)
precondition ∀ i. −1 ≤(cid:98)q[i] ≤ 1
function BadSVT2 (T,N,size : num0 , q : list num∗ )
returns (out : list bool ), check(ϵ)
precondition ∀ i. −1 ≤(cid:98)q[i] ≤ 1
Lap (4/ϵ) ;
η1 :=
Tη := T + η1 ;
count := 0; i := 0;
while ( count < N ∧ i < size)
Lap (4/3ϵ) ;
η2 :=
if (q[i] + η2 ≥ Tη ) then
out := true :: out ;
count := count + 1;
else
1
2
3
4
5
6
7
8
9
10
11
out := false :: out ;
i := i + 1;
returns (out)
function Transformed BadSVT3 (T,N,size,q,(cid:98)q, sample, θ)
vϵ := vϵ + |A1| × ϵ/4; (cid:98)η1 := A1;
16 (cid:99)Tη := (cid:98)η1;
vϵ := 0; idx = 0;
η1 := sample[idx]; idx := idx + 1;
Tη := T + η1 ;
14
15
12
13
17
18
19
20
21
22
23
24
25
26
27
28
29
count := 0; i := 0;
while ( count < N ∧ i < size )
η2 := sample[idx]; idx := idx + 1;
if (q[i] + η2 ≥ Tη ) then
vϵ := vϵ + |A2| × 3ϵ/4; (cid:98)η2 := A2;
assert(q[i] + η2 +(cid:98)q[i] + (cid:98)η2 ≥ Tη + (cid:99)Tη );
assert(¬(q[i] + η2 +(cid:98)q[i] + (cid:98)η2 ≥ Tη + (cid:99)Tη ));
out := true :: out ;
count := count + 1;
else
out := false :: out ;
i := i + 1;
assert(vϵ ≤ ϵ );
η1 := Lap (2/ϵ);
Tη := T + η1 ;
count := 0; i := 0;
while ( i < size )
Lap (2/ϵ) ;
η2 :=
if (q[i] + η2 ≥ Tη ) then
out := true :: out ;
count := count + 1;
else
1
2
3
4