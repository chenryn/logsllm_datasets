可以追踪到锁等待的源头，但是不能追踪到大锁。  
```  
2016-03-16 16:25:57.531 CST,"postgres","postgres",48877,"[local]",56e91894.beed,3,"ALTER TABLE waiting",2016-03-16 16:25:56 CST,13/28,580426398,LOG,00000,"process 48877 still waiting for AccessExclusiveLock on relation 61245 of database 13241 after 1000.048 ms","Process holding the lock: 48557. Wait queue: 48877, 46333, 46331, 46338, 46334, 46339, 46335, 46340, 46337, 46328, 46336.",,,,,"alter table test add column c1 int;",,"ProcSleep, proc.c:1323","psql"    
2016-03-16 16:25:57.531 CST,"postgres","postgres",46333,"[local]",56e91871.b4fd,3,"BIND waiting",2016-03-16 16:25:21 CST,4/263058,0,LOG,00000,"process 46333 still waiting for RowExclusiveLock on relation 61245 of database 13241 after 1000.036 ms","Process holding the lock: 48557. Wait queue: 48877, 46333, 46331, 46338, 46334, 46339, 46335, 46340, 46337, 46328, 46336.",,,,,"update test set info=info where id=$1;",,"ProcSleep, proc.c:1323","pgbench"    
2016-03-16 16:26:10.191 CST,"postgres","postgres",49812,"[local]",56e918a1.c294,3,"PARSE waiting",2016-03-16 16:26:09 CST,14/29,0,LOG,00000,"process 49812 still waiting for RowExclusiveLock on relation 61245 of database 13241 after 1000.207 ms","Process holding the lock: 48557. Wait queue: 48877, 46333, 此处省略500+ PIDs, 50816, 50817.",,,,,"update test set info=info where id=$1;",8,"ProcSleep, proc.c:1323","pgbench"    
2016-03-16 16:26:19.367 CST,"postgres","postgres",48877,"[local]",56e91894.beed,4,"ALTER TABLE waiting",2016-03-16 16:25:56 CST,13/28,580426398,LOG,00000,"process 48877 acquired AccessExclusiveLock on relation 61245 of database 13241 after 22836.312 ms",,,,,,"alter table test add column c1 int;",,"ProcSleep, proc.c:1327","psql"    
2016-03-16 16:26:19.368 CST,"postgres","postgres",48877,"[local]",56e91894.beed,5,"ALTER TABLE",2016-03-16 16:25:56 CST,13/28,580426398,ERROR,42701,"column ""c1"" of relation ""test"" already exists",,,,,,"alter table test add column c1 int;",,"check_for_column_name_collision, tablecmds.c:5069","psql"    
2016-03-16 16:26:19.379 CST,"postgres","postgres",49814,"[local]",56e918a1.c296,4,"PARSE waiting",2016-03-16 16:26:09 CST,15/2,0,LOG,00000,"process 49814 acquired RowExclusiveLock on relation 61245 of database 13241 after 10177.162 ms",,,,,,"update test set info=info where id=$1;",8,"ProcSleep, proc.c:1327","pgbench"    
```  
要追踪大锁，   
可以使用以下SQL  
```  
with t_wait as                         
(select a.mode,a.locktype,a.database,a.relation,a.page,a.tuple,a.classid,    
a.objid,a.objsubid,a.pid,a.virtualtransaction,a.virtualxid,a,    
transactionid,b.query,b.xact_start,b.query_start,b.usename,b.datname     
  from pg_locks a,pg_stat_activity b where a.pid=b.pid and not a.granted),    
t_run as     
(select a.mode,a.locktype,a.database,a.relation,a.page,a.tuple,    
a.classid,a.objid,a.objsubid,a.pid,a.virtualtransaction,a.virtualxid,    
a,transactionid,b.query,b.xact_start,b.query_start,    
b.usename,b.datname from pg_locks a,pg_stat_activity b where     
a.pid=b.pid and a.granted)     
select r.locktype,r.mode r_mode,r.usename r_user,r.datname r_db,    
r.relation::regclass,r.pid r_pid,    
r.page r_page,r.tuple r_tuple,r.xact_start r_xact_start,    
r.query_start r_query_start,    
now()-r.query_start r_locktime,r.query r_query,w.mode w_mode,    
w.pid w_pid,w.page w_page,    
w.tuple w_tuple,w.xact_start w_xact_start,w.query_start w_query_start,    
now()-w.query_start w_locktime,w.query w_query      
from t_wait w,t_run r where    
  r.locktype is not distinct from w.locktype and    
  r.database is not distinct from w.database and    
  r.relation is not distinct from w.relation and    
  r.page is not distinct from w.page and    
  r.tuple is not distinct from w.tuple and    
  r.classid is not distinct from w.classid and    
  r.objid is not distinct from w.objid and    
  r.objsubid is not distinct from w.objsubid and    
  r.transactionid is not distinct from w.transactionid and    
  r.pid <> w.pid    
  order by     
  ((  case w.mode    
    when 'INVALID' then 0    
    when 'AccessShareLock' then 1    
    when 'RowShareLock' then 2    
    when 'RowExclusiveLock' then 3    
    when 'ShareUpdateExclusiveLock' then 4    
    when 'ShareLock' then 5    
    when 'ShareRowExclusiveLock' then 6    
    when 'ExclusiveLock' then 7    
    when 'AccessExclusiveLock' then 8    
    else 0    
  end  ) +     
  (  case r.mode    
    when 'INVALID' then 0    
    when 'AccessShareLock' then 1    
    when 'RowShareLock' then 2    
    when 'RowExclusiveLock' then 3    
    when 'ShareUpdateExclusiveLock' then 4    
    when 'ShareLock' then 5    
    when 'ShareRowExclusiveLock' then 6    
    when 'ExclusiveLock' then 7    
    when 'AccessExclusiveLock' then 8    
    else 0    
  end  )) desc,r.xact_start;    
```  
## 优化措施或处理措施   
1\. 养成大锁处理习惯, 配置锁等待超时   
2\. 应用程序或中间件应该有自动释放空闲连接的功能   
3\. auto_explain也不会记录锁等待的时间，所以不利于分析原因。只有从日志中才能分析。  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")