of [Mau95] which suggests setting pr = CM R/CT D to minimise the running
time of primality testing with trial division; here we obtain CM R/CT D ≈ 800,
corresponding to r ≈ 140.7
MRAC on Adversarial Input Recall from [AMPS18] that worst-case adver-
sarial inputs can fool random-base MR testing with probability 1/4 per round.
The expected number of rounds needed to identify such inputs as composite is
then 1.33. However, with t rounds of testing, MRAC will fail to identify such
composites as being so with probability 1/22t (and will indicate that the input
was prime). Note that this analysis is unaﬀected by trial division, since the
adversarial inputs used have no small primes factors – the trial division just
increases the running time of the test.
7 The analysis of [Mau95] technically applies to prime generation, but ignores certain
terms in such a way as to actually analyse the cost of primality testing of composite
numbers. In this sense, it is only valid when the cost of primality testing for prime
inputs can be ignored compared to the case of composite inputs; this is not the case
in general, but is a reasonable approximation for MRAC.
Fig. 2. A plot of the theoretical running time of MRAC as a function of r, the number
of primes r used in trial division for k = 1024, using CT D = 0.000371ms and CM R =
0.298ms obtained from our experiments.
3.2 Miller-Rabin 64 (MR64)
Next we consider trial division followed by up to 64 rounds of MR testing with
random bases (the test will exit early if a base that is a witness to compositeness
of the input n is found). We refer to this test as MR64. By design, this test
guarantees a failure of 2−128, no matter the input distribution, so it oﬀers robust
security guarantees without the user needing to understand the context of the
test (i.e. whether the test is being done with adversarial inputs or not).
MR64 on Random Input As for MRAC, for a random, odd composite, k-bit
input, the expected number of rounds of MR testing (without trial division) is
very close to 1. On the other hand, for prime, k-bit input, the number of rounds
is exactly 64. This enables the average cost without trial division on random,
odd, k-bit input to be computed: it is approximately given by the weighted sum
(64 · qk + 1 · (1 − qk)) · CM R = (1 + 63qk) · CM R
For k = 1024, we again have qk = qk = 2/ ln(2k) = 0.0028, and this sum evaluates
to 1.18CM R, about 17% higher than MRAC for the same input distribution.
MR64 on Random Input with Trial Division Following the analysis for
MRAC, we can compute the cost of MR64 on random, prime, k-bit input as:
r(cid:88)
Ci + 64 · CM R
i=1
since here all trial divisions are performed, together with 64 rounds of MR testing.
For random, odd, composite input with r-prime trial division, the expected cost
is very close to that of MRAC with the same r, since whenever MR testing is
Fig. 3. Comparing the theoretical running time of MR64 and MRAC as a function of r
(the number of primes r used in trial division) for k = 1024, using CT D = 0.000371ms
and CM R = 0.298ms obtained from our experiments.
invoked, almost always one round suﬃces. As for the case of MR64 without trial
division, it is the prime inputs that make the cost diﬀerence here: they involve
64 rounds of MR testing instead of the (close to) 1 needed for composite inputs.
Again, a theoretical prediction for random, odd input can be made by combining
the expressions for odd, composite and prime input using a weighted sum. We
omit the details, but Figure 3 shows the theoretical curve for MR64 as compared
to MRAC (using costs CT D = 0.000371ms and CM R = 0.298ms for k = 1024 as
before).
MR64 on Adversarial Input By design, the MR64 test will fail to identify
a worst-case adversarial input as a composite with probability at most 2−128,
this after 64 rounds of MR testing. The expected number of rounds needed to
successfully classify such inputs is again 1.33.
3.3 Miller-Rabin 128 (MR128)
The test is identical to MR64, but up to 128 rounds of MR testing are invoked.
The intention is to reduce the false positive rate from 2−128 to 2−256. The analysis
is almost identical to that for MR64, replacing 64 by 128 where it appears in
the relevant formulae. We include it for comparison purposes and because the
OpenSSL documentation does target 256 bits of security when testing very large
numbers (larger than 6394 bits in size8). The headline ﬁgure for this test is its
expected cost (without trial division) of (1 + 127qk)· CM R, equating to 1.36· CM R
on random, odd, 1024-bit inputs, roughly 35% higher than MRAC at the same
input size.
8 See the man page https://www.openssl.org/docs/man1.1.0/
code
man3/BN is prime fasttest ex.html
https://github.com/openssl/openssl/blob/fa4d419c25c07b49789df96b32c4a1a85a984fa1
/include/openssl/bn.h#L159.
and
documentation
3.4 Baillie-PSW (BPSW)
The ﬁnal test we consider is the Baillie-PSW test. Recall that this is the combi-
nation of a single Miller-Rabin test to base 2, with a Lucas test using Selfridge’s
Method A to select D. If the input n we are testing is a perfect square, then
there does not exist a valid choice of D (see Section 2.1). So we must decide upon
a point to test for this. Baillie and Wagstaﬀ [BW80] show that, when n is not
square, the average number of D values that need to be tried until a suitable one
is found is 1.78. We choose to run a test to check if n is a perfect square only
after 7 unsuccessful attempts to select D. This provides a balance between the
relatively cheap process of testing a choice of D with the more expensive test for
n being a perfect square. We perform the Miller-Rabin part of the test ﬁrst, since
it is the more eﬃcient of the two techniques, omitting the Lucas test early if this
indicates compositeness. We then search for D using Selfridge’s Method A, using
it to carry out a Lucas test if found. We abort the search for D after 7 attempts
and then test n for being a perfect square. If this test fails, we revert to searching
for a suitable D and then perform the Lucas test when one is eventually found.
BPSW on Random Input The analysis without trial division is much like
that of MRAC, assuming that MR with a ﬁxed base 2 performs as well as MR
with a random base when the number being tested is uniformly random. For
prime inputs, the average cost is CM R + CL, where CL is average the cost of
doing the Lucas part of the test (and any tests of squareness); for composite
inputs, the cost is roughly CM R since the MR test catches the vast majority of
composites. The performance on random inputs is the weighted sum of these, as
usual. In our implementation, the average for CL is equal to 17.04· CM R (5.078ms
compared to 0.298ms on average for 1024-bit inputs, based on 220 trials). Overall,
then, this test has an expected cost (without trial division) of 1.05 · CM R on
random, odd, 1024-bit inputs, roughly 4% more than MRAC.
the input is prime, the average cost is (cid:80)r
The analysis with trial division is again similar to that for MRAC: when
i=1 Ci + CM R + CL, while when the
input is composite, it is of the same form as in (4) (where we are able to omit a
term CL under the assumption that the base 2 MR test is eﬀective in detecting
composites). We omit further detail.
(cid:80)r
BPSW on Adversarial Input It is relatively easy to construct composites
passing a base 2 MR test. For example, integers of the form (2x + 1)(4x + 1)
with each factor a prime have a roughly 1 in 4 chance of doing so (see [AMPS18]
for further discussion). Such inputs are highly likely to be detected by the
Lucas part of the BPSW test, so the cost of BPSW on such inputs would be
i=1 Ci + CM R + CL. However, we do not know if such numbers are worst-case
adversarial inputs for BPSW, and indeed, we cannot rule out the existence of
BPSW pseudo-primes, that is, composites which are declared probably primes
by the test. Recall that Pomerance [Pom84] has given heuristic evidence that
there are inﬁnitely many such pseudo-primes. Perhaps the smallest is beyond
r
0
128
2047
r
0
128
2047
r
0
128
2047
Declared Composite
MRAC MR64 MR128
BPSW
0.312
0.063
0.135
0.313
0.063
0.134
0.312
0.063
0.134
0.302
0.061
0.133
Declared Prime
MRAC MR64 MR128
BPSW
1.50
1.55
2.26
19.1
19.1
19.8
38.1
38.2
38.9
5.39
5.44
6.15
Overall
MRAC MR64 MR128
BPSW
0.315
0.067
0.141
0.366
0.117
0.190
0.419
0.170
0.244
0.316
0.077
0.150
Table 2. The mean running time (in ms) for each test when testing MRAC, MR64,
MR128 and BPSW for random 1024-bit, odd inputs and various amounts of trial division
(r). We show the breakdown of means for inputs declared as either prime or composite,
as well as the overall averages. Results based on 225 trials.
the bit-size we care about in cryptographic applications, but we cannot be sure.
Note also that such a pseudo-prime, if it can be found, would always fool the
BPSW test (because the test is deterministic). This is in sharp contrast to MR64
and MR128, where we can give precise bounds on the false positive rate of the
tests. We consider this, along with the relative complexity of implementing the
BPSW test, to be a major drawback.
3.5 Experimental Results
Having described our four chosen primality tests and given a theoretical evaluation
of them, we now turn to experimental analysis. This analysis gives us a direct
comparison with the current approach of OpenSSL (MRAC with trial division
either oﬀ or based on 2047 primes). It also allows us to study how the Baillie-
PSW test performs against Miller-Rabin testing in practice, something that does
not appear to have been explored before. We focus initially on testing 1024-bit
numbers to avoid deluging the reader with data; results for other bit-sizes are
presented later in the section.
Random Input Our results for random, odd, 1024-bit inputs to the tests are
shown in Table 2. We worked with 225 inputs, produced using OpenSSL’s internal
random number generator. All timings are in milliseconds, and are broken down
into results for composite inputs, inputs that were declared prime, and overall
results. We also report results for diﬀerent amounts of trial division — none,
r = 128 (which, from our theoretical analysis above, we consider to be a sensible
amount of trial division for 1024-bit inputs) and r = 2047 (as in OpenSSL). All
results were obtained using a single core of a Intel(R) Xeon(R) CPU E5-2690 v4
@ 3.20GHz processor, with code written in C using OpenSSL 1.1.1b (26-Feb-
2019) for big-number arithmetic and basic Miller-Rabin functionality. We also
computed standard deviations to accompany each timing, but omit the details
due to lack of space.
Of the 225 random, odd, 1024-bit numbers that we generated, 94947 were
prime. This is closely in line with the estimated q1024 × 225 ≈ 94548 given by the
usual density estimate.
The results in Table 2 are broadly in-line with our earlier theoretical analysis.
Some highlights:
– MRAC is fast overall, but with r = 2047, OpenSSL is doing far too much
trial division on 1024-bit inputs. Much better performance could be achieved
for this input size in OpenSSL by setting r = 128 (more than 2x speed-up
overall can be gained).
– MR64 is 8-9 times slower than MRAC on prime input, reﬂecting the many
more rounds of MR testing being done in MR64.
– MR128 is roughly twice as slow as MR64 on prime input (reﬂecting the
doubling of rounds of MR testing). On random input, the gap between MR64
and MR128 is not so large (because most composites are identiﬁed by trial
division or after just one round of MR testing).
– BPSW is quite competitive with MRAC overall and only 2-3 times slower for
prime input. This is because the Lucas test part of BPSW is expensive but
rarely invoked for random input, but always done for prime input.
– Based on overall ﬁgures, MR64 with r = 128 outperforms MRAC with
r = 2047 (as used in OpenSSL) by 17% on 1024-bit input. This indicates that,
by tuning parameters carefully, it is possible to obtain improved performance
over the current approach used in OpenSSL whilst enjoying strong security
across all use cases (i.e. a guaranteed false positive rate of 2−128). Even
MR128 with r = 128 is not far behind MRAC with r = 2047 on overall
ﬁgures at this input size.
Further improvements in running time can be obtained by ﬁne-tuning the
value of r on a per test basis, and according to input size. Importantly, the latter
is feasible even with a simple API (and indeed seems to be the only general,
input-dependent optimisation possible). To illustrate this, we show in Figure 4 the
average running times for MRAC and MR64 on random, odd, 1024-bit input for
varying r. The ﬁgure also shows the theoretical curves obtained previously. There
is excellent agreement between the experimental data and the curves obtained
from the model. In both cases, the curve is quite ﬂat around its minimum, but
we see that using r = 128 gives close to optimal performance for this value of
k = 1024. The ﬁgure also illustrates that using large amounts of trial division
(as per OpenSSL) harms performance for this input size, as was also explained
theoretically in Section 3.1. Speciﬁcally, OpenSSL uses r = 2047, putting its
Fig. 4. Experimental and theoretical performance of MRAC and MR64 on random,
odd, 1024-bit input for varying amounts of trial division, r.
performance with default settings (MRAC) well above the minimum obtainable
with MR64 with a carefully tuned choice of r.
Adversarial Input To bring into sharp relief the failings of MRAC as a general-
purpose primality test, we generated a set of 220 1024-bit composites of the
form n = (2x + 1)(4x + 1) in which the factors 2x + 1, 4x + 1 are both prime.
Numbers of this special form are known to pass random-base MR tests with
probability 1/4. We then put these n through our MRAC and MR64 tests without
trial division,9 tracking how many rounds of MR were used on each input by
each test. Table 3 shows the results. MR64 needed a maximum of 10 rounds
of MR testing to correctly classify all the inputs, while MRAC, using only 5
rounds of MR for inputs of this size, incorrectly classiﬁed exactly 1000 of the
inputs. This performance is in-line with expectations, as the expected number of
misclassiﬁcations is 220 × (1/4)5 = 210.
3.6 Other Bit Sizes
So far in our experimental evaluation, we have focussed on k = 1024, i.e. testing
of 1024-bit inputs. We have carried out similar testing also for k = 512, 2048, 3072.
Figures 5, 6 and 7 show these additional results for the MRAC and MR64 tests,
focussing on the eﬀect of varying r on running time. Notice the characteristic
“hockey-stick” shape of the curves in all the ﬁgures.
In each ﬁgure, the dashed horizontal time highlights the minimum running
time for MR64. Notably, for k = 512, this is signiﬁcantly lower than MRAC with
r = 2047 (as in OpenSSL). We saw the same eﬀect for k = 1024 in Figure 4. For
k = 2048, MR64 with the best choice of r is slightly slower than MRAC with
r = 2047 (but still competitive). For k = 3072, the inﬂuence of r on running time
9 Including trial division would not change the results.
Rounds MRAC MR64
1
2
3
4
5