L0 ← [Epk (u1 + r1), . . . , Epk (un + rn )]
Send L0 to B
(cid:2) }(K =
N /2
(cid:6)
(cid:2)
(cid:2), 1 · 2
(cid:2), · · · ,
Receive L0 from A
Pick n random integers v1, . . . , vn ∈ Z
v =[v1, . . . , vn ]
L1 ← [Epk (u1 + r1) · Epk (v1), . . . , Epk (un + rn ) · Epk (vn )]
= [Epk (u1 + v1 + r1), . . . , Epk (un + vn + rn )]
11: Generate a random π (cid:9), then permute L1 by π (cid:9):
2(cid:2)
3:
4:
5:
6: B:
7:
8:
9:
10:
L1 ← [Epk (uπ (cid:9)(1) + vπ (cid:9)(1) + rπ (cid:9)(1)), . . . ,
Epk (uπ (cid:9)(n) + vπ (cid:9)(n) + rπ (cid:9)(n))]
Send L1 to A
12:
13: A:
14:
15: Generate a random π , then permute L1 by π :
Receive L1 from B
L1 ← [Epk (uπ (π (cid:9)(1)) + vπ (π (cid:9)(1)) + rπ (π (cid:9)(1))), . . . ,
Epk (uπ (π (cid:9)(n)) + vπ (π (cid:9)(n)) + rπ (π (cid:9)(n)))]
Partial decrypt L1 with P Decs k (1) (·) to obtain L2
Send L2 to B
16:
17:
18: B:
19:
20: Decrypt L2 with P Decs k (2) (·) to obtain:
Receive L2 from A
(cid:3)
L3 ← [uπ (π (cid:9)(1)) + vπ (π (cid:9)(1)) + rπ (π (cid:9)(1)), · · · , uπ (π (cid:9)(n))+
vπ (π (cid:9)(n)) + rπ (π (cid:9)(n))]
(cid:4)x
= [−uπ (π (cid:9)(1)) − vπ (π (cid:9)(1)), . . . , −uπ (π (cid:9)(n)) − vπ (π (cid:9)(n))]
(cid:4)B ] = −(L3 mod 2
(cid:4)B , · · · ,
(cid:9) (cid:5)B ← [
x (cid:9)
1
x (cid:9)
n
(cid:2) )
(cid:3)
21:
enjoys excellent performance since it only requires one interaction
and involves no cryptographic operation.
4.2 Secure Branching (SBC) Protocol
, (cid:4)x2(cid:5) A
We assume that A inputs a set of shared values (cid:4)x1(cid:5) A
,
, (cid:4)y1(cid:5) B
, (cid:4)y2(cid:5) A
(cid:4)y1(cid:5) A
, (cid:4)x2(cid:5) B
,
(cid:4)y2(cid:5) B
. Secure Branching (SBC) protocol is to realize the function
that securely executes the following conditional statement on secret
sharing data:
and B inputs another part (cid:4)x1(cid:5) B
if(x1 > x2) then y ← y1 else y ← y2.
and B outputs (cid:4)y(cid:5) B
The output of the protocol is in the form of secret sharing, i.e.,
A outputs (cid:4)y(cid:5) A
. During this process, no
information regarding x1, x2, y1, and y2 is revealed to Server A
and Server B. Here, we construct an efficient mixed SBC proto-
col based on the SSF protocol. The main steps involved in SBC
protocol are shown in Algorithm 3. By the SSF protocol, Server
A and Server B jointly use the permutation function π (π (cid:9)(·))
to shuffle the secret sharing sequences [(cid:4)x1(cid:5) , (cid:4)x2(cid:5)] to get a new
(cid:4)
]. Then, the same permutation func-
one [
(cid:3)
tion π (π (cid:9)(·)) is applied to [(cid:4)y1(cid:5) , (cid:4)y2(cid:5)] for obtaining [
,
yπ (π (cid:9)(2))
]. After shuffling, a ADD-CMP circuit is used to com-
pare
. As depicted in Figure 2(a), the
anatomy of ADD-CMP is very simple as it only consists of two ADD
(cid:3)
xπ (π (cid:9)(1))
(cid:3)
xπ (π (cid:9)(1))
(cid:3)
xπ (π (cid:9)(2))
(cid:3)
xπ (π (cid:9)(2))
(cid:3)
yπ (π (cid:9)(1))
and
(cid:4)
(cid:4)
(cid:4)
(cid:4)
(cid:4)
,
Algorithm 2 The Online Phase of Secure Shuffling Protocol
Input: A inputs (cid:4)x(cid:5) A = [(cid:4)x1(cid:5) A , · · · , (cid:4)xn (cid:5) A ](A holds π , u)
B inputs (cid:4)x(cid:5) B = [(cid:4)x1(cid:5) B , · · · , (cid:4)xn (cid:5) B ] (B holds π (cid:9), v)
(cid:4) A , · · · ,
(cid:3)
x (cid:9)
1
(cid:4) A
(cid:3)
x (cid:9)
n
]
(cid:9)(cid:5) A = [
Output: A outputs (cid:4)x
1: A:
2:
3: Mask L4 by u to get:
L4 ← [(cid:4)x1(cid:5) A , . . . , (cid:4)xn (cid:5) A ]
L4 ← [(cid:4)x1(cid:5) A + u1, . . . , (cid:4)xn (cid:5) A + un ]
Send L4 to B
4:
5: B:
6: Receive L4 from A
7: Compute L5 ← L4 + (cid:4)x(cid:5) B + v to get
L5 = [x1 + u1 + v1, . . . , xn + un + vn ]
Permute L5 by π (cid:9)
L5 ← [xπ (cid:9)(1) + uπ (cid:9)(1) + vπ (cid:9)(1), . . . , xπ (cid:9)(n) + uπ (cid:9)(n) + vπ (cid:9)(n)]
Send L5 to A
8:
:
9:
10: A:
11: Receive L5 from B
12:
(cid:3)
Permute L5 by π to obtain
x (cid:9)
(cid:4)x
n
vπ (π (cid:9)(1)), . . . , xπ (π (cid:9)(n)) + uπ (π (cid:9)(n)) + vπ (π (cid:9)(n))]
(cid:4) A , · · · ,
(cid:3)
x (cid:9)
1
(cid:9)(cid:5) A = [
(cid:4) A
] = [xπ (π (cid:9)(1)) + uπ (π (cid:9)(1)) +
(cid:4) A
(cid:3)
(cid:4) A
xπ (π (cid:9)(1))
(cid:3)
xπ (π (cid:9)(2))
(cid:4) B
(cid:3)
(cid:4) B
xπ (π (cid:9)(1))
circuits and a CMP circuit. One ADD circuit takes
and
as inputs while the other takes
(cid:3)
and
xπ (π (cid:9)(2))
as inputs, then the two outputs serve as the inputs of
the CMP circuit. In this way, ADD-CMP outputs 1 if xπ (π (cid:9)(1)) >
xπ (π (cid:9)(2)) and 0 otherwise. Specifically, the circuit evaluator runs
oblivious transfer (OT) protocol with the circuit constructor to obliv-
iously obtain the garbled input corresponding to its private input,
then evaluates the garbled circuit to get the final result. If the result
is public, the evaluator directly sends it to the constructor. Note
that in this protocol, A or B can be either the circuit constructor or
the circuit evaluator and the output θ is public to A and B. Finally,
based on the output of the ADD-CMP circuit, Server A and Server B
(cid:3)
separately determine the final values (cid:4)y(cid:5) A
, i.e., if θ == 1
then (cid:4)y(cid:5)α ←
yπ (π (cid:9)(2))
(α ∈ {A, B}).
(cid:3)
yπ (π (cid:9)(1))
(cid:4)α
and (cid:4)y(cid:5) B
else (cid:4)y(cid:5)α ←
(cid:4)α
(cid:36)(cid:39)(cid:39)
(cid:36)(cid:39)(cid:39)
(cid:38)(cid:48)(cid:51)
(cid:19)(cid:18)(cid:20)
(cid:40)(cid:52)
(cid:36)(cid:39)(cid:39)
(a) ADD-CMP
(b) EQ-ADD
Figure 2: The structure of circuits
4.3 Secure Minimum Selection (SMS) Protocol
Let us assume that A inputs (cid:4)x(cid:5) A = [(cid:4)x1(cid:5) A , . . . , (cid:4)xn (cid:5) A ] and
B inputs (cid:4)x(cid:5) B = [(cid:4)x1(cid:5) B , . . . , (cid:4)xn (cid:5) B ]. Secure Minimum Selection
(SMS) protocol is to realize the function that A outputs (cid:4)xmin (cid:5) A
and B outputs (cid:4)xmin (cid:5) B
, where xmin = min(x1, · · · , xn ). In the
process, no information regarding the values of x = [x1, · · · , xn ] is
revealed to A and B. Here, we construct an efficient mixed SMS
protocol based on the SSF protocol. The main steps involved in the
This  is  an  author-produced,  peer-reviewed  version  of  this  article.  The  final,  definitive  version  of  this  document  can  be  found  online  at  ASIACCS  '18: 
Proceedings of the 2018 on Asia Conference on Computer and Communications Security, published by Association for Computing Machinery. Copyright
restrictions may apply. doi: 10.1145/3196494.3196535
Algorithm 3 Secure Branching Protocol
Input: A inputs [(cid:4)x1(cid:5) A , (cid:4)x2(cid:5) A ], [(cid:4)y1(cid:5) A , (cid:4)y2(cid:5) A ];
B inputs [(cid:4)x1(cid:5) B , (cid:4)x2(cid:5) B ], [(cid:4)y1(cid:5) B , (cid:4)y2(cid:5) B ];
; B outputs (cid:4)y(cid:5) B
(cid:4)
(cid:4)
3:
,
,
(cid:4)
(cid:4)
(cid:3)
(cid:3)
xπ (π (cid:9)(1))
yπ (π (cid:9)(1))
Output: A outputs (cid:4)y(cid:5) A
1: A and B:
2:
(cid:3)
(cid:3)
xπ (π (cid:9)(2))
[
yπ (π (cid:9)(2))
[
θ ← ADD-CMP(
(cid:3)
yπ (π (cid:9)(1))
(cid:3)
yπ (π (cid:9)(2))
4:
5: if θ == 1 then
A: (cid:4)y(cid:5) A ←
6:
7: else
8:
A: (cid:4)y(cid:5) A ←
,
(cid:4)
(cid:3)
xπ (π (cid:9)(2))
] ← SSF([(cid:4)x1(cid:5) , (cid:4)x2(cid:5)])
(cid:4)
(cid:3)
] ← SSF([(cid:4)y1(cid:5) , (cid:4)y2(cid:5)])
xπ (π (cid:9)(1))
(cid:4) A
(cid:4) A
; B: (cid:4)y(cid:5) B ←
)
; B: (cid:4)y(cid:5) B ←
(cid:3)
yπ (π (cid:9)(1))
(cid:3)
yπ (π (cid:9)(2))
(cid:4) B
(cid:4) B
Algorithm 4 Secure Minimum Selection Protocol
Input: A inputs (cid:4)x(cid:5) A
B inputs (cid:4)x(cid:5) B
= [(cid:4)x1(cid:5) A , · · · , (cid:4)xn (cid:5) A ]
= [(cid:4)x1(cid:5) B , · · · , (cid:4)xn (cid:5) B ]
(cid:3)
xπ (π (cid:9)(n))
Output: A outputs (cid:4)xmin (cid:5) A
; B outputs (cid:4)xmin (cid:5) B
(cid:3)
1: A and B:
(cid:4) A
(cid:3)
(cid:9)(cid:5) ← SSF((cid:4)x(cid:5)) = [
xπ (π (cid:9)(1))