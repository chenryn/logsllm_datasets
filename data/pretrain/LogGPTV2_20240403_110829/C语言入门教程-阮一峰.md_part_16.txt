} synth;
synth.ab = 0;
synth.cd = 1;
上⾯示例中，每个属性后⾯的 ，表示指定这些属性只占⽤⼀个⼆进制位，所以这个数据结构⼀共是 4
:1
个⼆进制位。
注意，定义⼆进制位时，结构内部的各个属性只能是整数类型。
实际存储的时候，C 语⾔会按照 类型占⽤的字节数，存储⼀个位字段结构。如果有剩余的⼆进制位，
int
可以使⽤未命名属性，填满那些位。也可以使⽤宽度为 0 的属性，表示占满当前字节剩余的⼆进制位，迫
使下⼀个属性存储在下⼀个字节。
struct {
unsigned int field1 : 1;
unsigned int : 2;
unsigned int field2 : 1;
unsigned int : 0;
unsigned int field3 : 1;
} stuff;
上⾯示例中， 与 之间，有⼀个宽度为两个⼆进制位的未命名属性。
stuff.field1 stuff.field2
将存储在下⼀个字节。
stuff.field3
弹性数组成员 #
很多时候，不能事先确定数组到底有多少个成员。如果声明数组的时候，事先给出⼀个很⼤的成员数，就
会很浪费空间。C 语⾔提供了⼀个解决⽅法，叫做弹性数组成员（flexible array member）。
如果不能事先确定数组成员的数量时，可以定义⼀个 struct 结构。
struct vstring {
int len;
char chars[];
};
上⾯示例中， 结构有两个属性。 属性⽤来记录数组 的⻓度， 属性是⼀
struct vstring len chars chars
个数组，但是没有给出成员数量。
数组到底有多少个成员，可以在为 分配内存时确定。
chars vstring
struct vstring* str = malloc(sizeof(struct vstring) + n * sizeof(char));
str->len = n;
上⾯示例中，假定 数组的成员数量是 ，只有在运⾏时才能知道 到底是多少。然后，就为
chars n n
分配它需要的内存：它本身占⽤的内存⻓度，再加上 个数组成员占⽤的内存⻓度。最
struct vstring n
后， 属性记录⼀下 是多少。
len n
这样就可以让数组 有 个成员，不⽤事先确定，可以跟运⾏时的需要保持⼀致。
chars n
弹性数组成员有⼀些专⻔的规则。⾸先，弹性成员的数组，必须是 struct 结构的最后⼀个属性。另外，除
了弹性数组成员，struct 结构必须⾄少还有⼀个其他属性。
全⽂完
本⽂由 简悦 SimpRead 转码，⽤以提升阅读体验，原⽂地址
命令 语⾔教程 ⽹道
typedef - C -
⽹道（WangDoc.com），互联⽹⽂档计划
“
⽹道（WangDoc.com），互联⽹⽂档计划
简介 #
命令⽤来为某个类型起别名。
typedef
typedef type name;
上⾯代码中， 代表类型名， 代表别名。
type name
typedef unsigned char BYTE;
BYTE c = 'z';
上⾯示例中， 命令为类型 起别名 ，然后就可以使⽤ 声明变量。
typedef unsign char BYTE BYTE
typedef 可以⼀次指定多个别名。
typedef int antelope, bagel, mushroom;
上⾯示例中，⼀次性为 类型起了三个别名。
int
typedef 可以为指针起别名。
typedef int* intptr;
int a = 10;
intptr x = &a;
上⾯示例中， 是 的别名。不过，使⽤的时候要⼩⼼，这样不容易看出来，变量 是⼀个指
intptr int* x
针类型。
typedef 也可以⽤来为数组类型起别名。
typedef int five_ints[5];
five_ints x = {11, 22, 33, 44, 55};
上⾯示例中， 是⼀个数组类型，包含 5 个整数的
five_ints
typedef 为函数起别名的写法如下。
typedef signed char (*fp)(void);
上⾯示例中，类型别名 是⼀个指针，代表函数 。
fp signed char (*)(void)
主要好处 #
为类型起别名的好处，主要有下⾯⼏点。
typedef
（1）更好的代码可读性。
typedef char* STRING;
STRING name;
上⾯示例为字符指针起别名为 ，以后使⽤ 声明变量时，就可以轻易辨别该变量是字符串。
STRING STRING
（2）为 struct、union、enum 等命令定义的复杂数据结构创建别名，从⽽便于引⽤。
struct treenode {
};
typedef struct treenode* Tree;
上⾯示例中， 为 的别名。
Tree struct treenode*
typedef 也可以与 struct 定义数据类型的命令写在⼀起。
typedef struct animal {
char* name;
int leg_count, speed;
} animal;
上⾯示例中，⾃定义数据类型时，同时使⽤ 命令，为 起了⼀个别名 。
typedef struct animal animal
这种情况下，C 语⾔允许省略 struct 命令后⾯的类型名。
typedef struct {
char *name;
int leg_count, speed;
} animal;
上⾯示例相当于为⼀个匿名的数据类型起了别名 。
animal
（3）typedef ⽅便以后为变量改类型。
typedef float app_float;
app_float f1, f2, f3;
上⾯示例中，变量 、 、 的类型都是 。如果以后需要为它们改类型，只需要修改
f1 f2 f3 float
语句即可。
typedef
typedef long double app_float;
上⾯命令将变量 、 、 的类型都改为 。
f1 f2 f3 long double
（4）可移植性
某⼀个值在不同计算机上的类型，可能是不⼀样的。
int i = 100000;
上⾯代码在 32 位整数的计算机没有问题，但是在 16 位整数的计算机就会出错。
C 语⾔的解决办法，就是提供了类型别名，在不同计算机上会解释成不同类型，⽐如 。
int32_t
int32_t i = 100000;
上⾯示例将变量 声明成 类型，保证它在不同计算机上都是 32 位宽度，移植代码时就不会出
i int32_t
错。
这⼀类的类型别名都是⽤ typedef 定义的。下⾯是类似的例⼦。
typedef long int ptrdiff_t;
typedef unsigned long int size_t;
typedef int wchar_t;
这些整数类型别名都放在头⽂件 ，不同架构的计算机只需修改这个头⽂件即可，⽽⽆需修改代
stdint.h
码。
因此， 有助于提⾼代码的可移植性，使其能适配不同架构的计算机。
typedef
（5）简化类型声明
C 语⾔有些类型声明相当复杂，⽐如下⾯这个。
char (*(*x(void))[5])(void);
typedef 可以简化复杂的类型声明，使其更容易理解。⾸先，最外⾯⼀层起⼀个类型别名。
typedef char (*Func)(void);
Func (*x(void))[5];
这个看起来还是有点复杂，就为⾥⾯⼀层也定义⼀个别名。
typedef char (*Func)(void);
typedef Func Arr[5];
Arr* x(void);
上⾯代码就⽐较容易解读了。
是⼀个函数，返回⼀个指向 Arr 类型的指针。
x
是⼀个数组，有 5 个成员，每个成员是 类型。
Arr Func
是⼀个函数指针，指向⼀个⽆参数、返回字符值的函数。
Func
全⽂完
本⽂由 简悦 SimpRead 转码，⽤以提升阅读体验，原⽂地址
{"code":404,"status":"uid"}
类型 语⾔教程 ⽹道
Enum - C -
⽹道（WangDoc.com），互联⽹⽂档计划
“
⽹道（WangDoc.com），互联⽹⽂档计划
如果⼀种数据类型的取值只有少数⼏种可能，并且每种取值都有⾃⼰的含义，为了提⾼代码的可读性，可
以将它们定义为 Enum 类型，中⽂名为枚举。
enum colors {RED, GREEN, BLUE};
printf("%d\n", RED);
printf("%d\n", GREEN);
printf("%d\n", BLUE);
上⾯示例中，假定程序⾥⾯需要三种颜⾊，就可以使⽤ 命令，把这三种颜⾊定义成⼀种枚举类型
enum
，它只有三种取值可能 、 、 。这时，这三个名字⾃动成为整数常量，编译器默
colors RED GREEN BLUE
认将它们的值设为数字 、 、 。相⽐之下， 要⽐ 的可读性好了许多。
0 1 2 RED 0
注意，Enum 内部的常量名，遵守标识符的命名规范，但是通常都使⽤⼤写。
使⽤时，可以将变量声明为 Enum 类型。
enum colors color;
上⾯代码将变量 声明为 类型。这个变量的值就是常量 、 、 之中的⼀
color enum colors RED GREEN BLUE
个。
color = BLUE;
printf("%i\n", color);
上⾯代码将变量 的值设为 ，这⾥ 就是⼀个常量，值等于 。
color BLUE BLUE 2
typedef 命令可以为 Enum 类型起别名。
typedef enum {
SHEEP,
WHEAT,
WOOD,
BRICK,
ORE
} RESOURCE;
RESOURCE r;
上⾯示例中， 是 Enum 类型的别名。声明变量时，使⽤这个别名即可。
RESOURCE
还有⼀种不常⻅的写法，就是声明 Enum 类型时，在同⼀⾏⾥⾯为变量赋值。
enum {
SHEEP,
WHEAT,
WOOD,
BRICK,
ORE
} r = BRICK, s = WOOD;
上⾯示例中， 的值是 ， 的值是 。
r 3 s 2
由于 Enum 的属性会⾃动声明为常量，所以有时候使⽤ Enum 的⽬的，不是为了⾃定义⼀种数据类型，⽽
是为了声明⼀组常量。这时就可以使⽤下⾯这种写法，⽐较简单。
enum { ONE, TWO };
printf("%d %d", ONE, TWO);
上⾯示例中， 是⼀个关键字，后⾯跟着⼀个代码块，常量就在代码内声明。 和 就是两个
enum ONE TWO
Enum 常量。
常量之间使⽤逗号分隔。最后⼀个常量后⾯的尾逗号，可以省略，也可以保留。
enum { ONE, TWO, };
由于 Enum 会⾃动编号，因此可以不必为常量赋值。C 语⾔会⾃动从 0 开始递增，为常量赋值。但是，C
语⾔也允许为 ENUM 常量指定值，不过只能指定为整数，不能是其他类型。因此，任何可以使⽤整数的场
合，都可以使⽤ Enum 常量。
enum { ONE = 1, TWO = 2 };
printf("%d %d", ONE, TWO);
Enum 常量可以是不连续的值。
enum { X = 2, Y = 18, Z = -2 };
Enum 常量也可以是同⼀个值。
enum { X = 2, Y = 2, Z = 2 };
如果⼀组常量之中，有些指定了值，有些没有指定。那么，没有指定值的常量会从上⼀个指定了值的常
量，开始⾃动递增赋值。
enum {
A,
B,
C = 4,
D,
E,
F = 3
G,
H
}
Enum 的作⽤域与变量相同。如果是在顶层声明，那么在整个⽂件内都有效；如果是在代码块内部声明，
则只对该代码块有效。如果与使⽤ 声明的常量相⽐，Enum 的好处是更清晰地表示代码意图。
int
全⽂完
本⽂由 简悦 SimpRead 转码，⽤以提升阅读体验，原⽂地址
预处理器（ ） 语⾔教程 ⽹道
Preprocessor - C -
⽹道（WangDoc.com），互联⽹⽂档计划
“
⽹道（WangDoc.com），互联⽹⽂档计划
简介 #
C 语⾔编译器在编译程序之前，会先使⽤预处理器（preprocessor）处理代码。
预处理器⾸先会清理代码，进⾏删除注释、多⾏的语句合成⼀个逻辑⾏等等。然后，执⾏ 开头的预处理
#
指令。本章介绍 C 语⾔的预处理指令。