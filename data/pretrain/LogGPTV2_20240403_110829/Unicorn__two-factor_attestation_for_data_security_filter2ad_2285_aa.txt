title:Unicorn: two-factor attestation for data security
author:Mohammad Mannan and
Beom Heyn Kim and
Afshar Ganjali and
David Lie
Unicorn: Two-Factor Attestation for Data Security∗
Mohammad Mannan
Concordia Institute for
Information Systems
Engineering
Concordia University
Montreal, Canada
Beom Heyn Kim
Computer Science
University of Toronto
Toronto, Canada
Afshar Ganjali and David Lie
Electrical and Computer
Engineering
University of Toronto
Toronto, Canada
ABSTRACT
Malware and phishing are two major threats for users seek-
ing to perform security-sensitive tasks using computers to-
day. To mitigate these threats, we introduce Unicorn, which
combines the phishing protection of standard security to-
kens and malware protection of trusted computing hard-
ware. The Unicorn security token holds user authentication
credentials, but only releases them if it can verify an attesta-
tion that the user’s computer is free of malware. In this way,
the user is released from having to remember passwords, as
well as having to decide when it is safe to use them. The
user’s computer is further veriﬁed by either a TPM or a
remote server to produce a two-factor attestation scheme.
We have implemented a Unicorn prototype using com-
modity software and hardware, and two Unicorn example
applications (termed as uApps, short for Unicorn Applica-
tions), to secure access to both remote data services and
encrypted local data. Each uApp consists of a small, hard-
ened and immutable OS image, and a single application.
Our Unicorn prototype co-exists with a regular user OS, and
signiﬁcantly reduces the time to switch between the secure
environment and general purpose environment using a novel
mechanism that removes the BIOS from the switch time.
Categories and Subject Descriptors
D.4.6 [Security and Protection]: Access controls, Au-
thentication
General Terms
Human Factors, Security
Keywords
Trusted Computing, Authentication, Attestation, Security
Token, Malware, Phishing
∗Contact: mmannan@ciise.concordia.ca. Majority of this
work was done when the ﬁrst author was a post-doctoral
fellow at the University of Toronto.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’11, October 17–21, 2011, Chicago, Illinois, USA.
Copyright 2011 ACM 978-1-4503-0948-6/11/10 ...$10.00.
1.
INTRODUCTION
Malware is one of the greatest security threats for Internet
users today. Evidence suggests that 53% of computers (out
of 21 millions scanned worldwide) are infected with mal-
ware [1]. Much of this malware is designed to steal sensitive
information from and invade the privacy of the computer
user. Aside from malware, computer users also have to con-
tend with phishing attacks, where the adversary social en-
gineers the user into leaking authentication credentials by
producing a web page or interface that appears similar to a
legitimate one. By acquiring these credentials the attacker
can then proceed to steal the user’s identity and access sen-
sitive information that belongs to the user.
Passwords and other authentication credentials can be
protected using security tokens that implement one-time
passwords, or that are able to respond to cryptographic chal-
lenges (e.g., RSA SecurID, and the split trust paradigm [3]).
By introducing the security token, users are protected from
phishing since convincing the user to leak an authentication
credential they know (such as a password) is not suﬃcient
for the adversary to gain access to the user’s data. How-
ever, even with token authentication, the user’s data is still
vulnerable to theft during an active session by malware on
their computer.
In contrast, trusted-computing hardware can be used to
measure and report integrity of the software stack running
on a computer [7, 8, 20, 21, 25, 35]. Trusted-computing hard-
ware, developed by the Trusted Computing Group (TCG),
Intel and AMD enables software to utilize a root of trust
based in hardware, which is signiﬁcantly more diﬃcult for
a remote attacker to subvert than a root of trust based in
software. These systems use hardware to measure the in-
tegrity of software running on the computer, allowing the
hardware to assert, via an attestation, that a system is free
of malware. This attestation may be conveyed to the user
over a trusted channel. Unfortunately, interpreting this at-
testation is diﬃcult for humans and user studies have shown
that users are not always diligent enough to interpret or no-
tice signals that indicate that the attestation has failed [16]
(cf. “the barn door property” [36]).
Our key insight is that security tokens and trusted com-
puting can be combined to produce a system that is as resis-
tant to phishing as standard security token authentication,
but is additionally resistant to attacks by malware. We pro-
pose the use of a Personal Security Device (PSD), which, like
a security token, holds personal authentication credentials,
but diﬀers in that a PSD can verify an attestation from the
user’s computer. Thus, rather than having the user decide
17when to release their authentication credential, the PSD ver-
iﬁes the attestation from the user’s computer and releases
the authentication credential on behalf of the user only if
the attestation is correct. In addition to the attestation by
the PSD, the computer’s software stack is also veriﬁed ei-
ther by a remote server that holds user data or the trusted
computing hardware on the computer. Thus user data is in
eﬀect protected by a two-factor attestation.
To evaluate this idea, we have designed a system called
Unicorn.1 Rather than trying to preventing malware and
phishing attacks altogether, Unicorn takes a mitigating ap-
proach by safe-guarding Unicorn-protected data from these
attacks. We implement a Unicorn prototype that uses Intel
TXT and TPM as the trusted computing implementation,
and an Android smartphone as the user’s PSD.2 In our pro-
totype, a user starts initially from an untrusted user oper-
ating system (OS), which could be infected with malware.
When the user wishes to access their secure data, which
could be stored on a remote service requiring authentication
(such as banking information), or encrypted on the local
disk, the user uses Unicorn to invoke a Unicorn application
(uApp) from her computer. A uApp is a small, hardened
and immutable OS image with a single application that will
be used to access the user’s sensitive data. Unicorn uses the
trusted computing hardware on the user’s computer to boot
and measure the uApp, generating an attestation that the
user’s PSD will verify. Only by combining this attestation
with the authentication credential on the PSD will the uApp
be able to access the user’s data.
The result is that an adversary may only gain unautho-
rized access to data protected by Unicorn in one of two ways:
the adversary must either (1) simultaneously gain physical
access to the user’s computer and compromise or clone the
user’s PSD, or (2) ﬁnd and exploit a run time vulnerability
in the uApp that has access to the sensitive data.
In the
ﬁrst case, requiring the adversary to compromise two com-
ponents simultaneously is a straightforward application of
the principle of defense in depth. In the second case, uApps
are intended to be smaller and simpler than the commodity
user OS, giving the adversary fewer vulnerabilities that they
can ﬁnd and exploit. Consequently, Unicorn serves as a sec-
ond line of defense so that a successful malware or phishing
attack does not expose Unicorn-protected data.
Contributions.
1. We present and perform a security analysis of the de-
sign of Unicorn, which combines an authentication to-
ken with trusted computing to implement two-factor
authentication protection for user data. Unicorn raises
the bar for attackers, forcing them to either gain phys-
ical access to the user’s computer and compromise the
user’s PSD simultaneously, or to ﬁnd and exploit a run
time compromise in a small hardened uApp.
2. We implement a Unicorn prototype using widely avail-
able commodity hardware and software tools. Unicorn
enables users to use trusted and untrusted systems on
the same computer, switching between them without
a full reboot. Compared to existing solutions, Unicorn
does not require hypervisor support, and does not suf-
fer from performance degradation, while achieving sig-
1A unicorn is a mythical single-horned creature, commonly
known as a protector of innocence, and a symbol of purity.
2For background on trusted computing, see Appendix A.
niﬁcantly faster switching time. Our prototype uses
a novel mechanism that reduces the time to invoke a
uApp to approximately 25.5 seconds, which is almost
twice as fast as existing systems [35].
3. We demonstrate the utility of Unicorn with two rep-
resentative uApps. The ﬁrst is a banking application,
which represents a scenario where sensitive user data
is stored on a remote service requiring authentication.
The second uApp is a secure document reader, which
represents a scenario where sensitive user data is en-
crypted and stored locally on the user’s computer.
We ﬁrst begin in Section 2 by deﬁning the attacker model
that Unicorn defends against, the guarantees that Unicorn
provides and the limitations that Unicorn has. We then de-
scribe the design and operation of Unicorn in Section 3. The
implementation of our prototype is given in Section 4 and
we describe the two representative uApps we created in Sec-
tion 5. We evaluate both the security of our Unicorn design
and the performance of our Unicorn prototype in Section 6.
Finally we discuss related work in Section 7 and give our
conclusions in Section 8.
2. SECURITY MODEL AND GUARANTEES
2.1 Attacker Model
The goals of the attacker are to compromise the user’s
Unicorn-protected sensitive data in the local machine or a
remote server, or to assume control of a Unicorn-session be-
tween the user and server (session hijacking). We explicitly
distinguish Unicorn-protected data from arbitrary data that
the user may know or have on their computer, which we con-
sider out of scope for Unicorn. Unicorn-protected data must
either be stored on a secure remote server, which requires
authentication for access, or in encrypted format with keys
available only to the user’s computer and PSD.
We assign the attacker the following capabilities. First,
the attacker is capable of infecting the user OS with arbi-
trary malware such that she has full control over the user’s
software platform. For example, she may tamper with the
Master Boot Record (MBR), bootloader, user OS kernel,
applications running on the user OS, and uApp binary im-
ages. Attackers can also tamper with device, BIOS and
CPU conﬁgurations, and send arbitrary commands to de-
vices before invoking a uApp. Second, the attacker can fake
interaction with the user to try to convince them that they
have correctly launched a uApp. We note that Unicorn
does not prevent such an attacker from extracting secrets
from the user through the equivalent of a phishing attack,
but will ensure that Unicorn-protected data is not compro-
mised. Third, the attacker may either gain physical access
to the user’s computer, or compromise the user’s PSD, but
not both. Compromising the user’s PSD includes infecting
the PSD with malware, cloning the PSD, gaining access to
PSD secrets, or stealing the PSD. We note that there have
been instances where attackers have compromised both the
computer and PSD at the same time, e.g., the Zeus banking
trojan [6]. However, compromising the user’s computer and
having physical access are not equivalent.
The following attacks are out of scope for Unicorn. While
the attacker may have physical access to user’s computer, we
assume that he cannot subvert the hardware root of trust as
provided by the TPM version 1.2 chip and CPU’s late launch
18User OS
uApp OS
QR coded 
TPM quote
2. Snap
Figure 1: Overview of Unicorn user steps
feature; i.e., attacks against hardware trust (e.g., [11,37]) are
considered out of scope. However, the attacker can reset the
TPM and change ownership password. We also assume that
compromises of the remote server storing Unicorn-protected
data are out of scope. Unicorn does not mitigate ﬂaws in the
remote server storing the user data. Finally, we assume that
the attacker cannot compromise the operation of a uApp
after it has launched. This is a standard limitation of trusted
computing hardware, which can only attest to the state of
the computer at the time the measurements are made.
For the communication between the user’s computer and
remote server, a Dolev-Yao (DY) attacker is assumed, who
also can arbitrarily modify and observe any plain text data
in transit. However, the attacker is unable to circumvent
any standard cryptographic mechanisms (e.g., SSL).
2.2 Properties, Guarantees and Limitations
Properties. Unicorn provides two properties from which
we may derive the security guarantee it provides. (1) Unicorn-
protected data is accessible only from the user’s computer.
Access is bound to a secret signing key stored in the TPM
of the user’s computer. Unicorn also deals with relaying
attacks [32], as described in Section 6.1 (under item (d)).
(2) Access to protected data is only granted if the PSD is
present, which will release its secret only if it can verify the
running uApp on the computer.
Guarantee. Unicorn protects user data unless (1) the ad-
versary simultaneously gets physical access to the user com-
puter, and compromises/clones the PSD; or (2) adversary
ﬁnds and exploits a run time vulnerability in a uApp. Mal-
ware is defeated because Unicorn-protected data is only ac-
cessible from a veriﬁed environment. Unicorn provides equiv-
alent protection to phishing attacks as security tokens –
phishing attacks targeting Unicorn credentials cannot suc-
ceed since Unicorn authentication requires the presence of
the PSD to succeed.
Limitations. Unicorn’s major limitations are the follow-
ing. (1) Unicorn requires a secure setup phase where the
user must be diligent. Both TPM secrets and authentica-
tion credentials for the PSD must be transmitted securely
and to the correct parties (e.g., by out-of-band methods).
Resetting a Unicorn-protected account also requires a sim-
ilar secure bootstrap. (2) Unicorn’s phishing protection is
limited to the user data explicitly protected by Unicorn.
Phishing and social engineering attacks that trick user into
revealing arbitrary information that users know (including
information that Unicorn is protecting) cannot be prevented
by Unicorn. (3) Unicorn is not an intrusion detection sys-
tem and cannot detect if a uApp has been compromised
after the measurements are taken. An attacker who com-
promises a uApp after the measurement phase will be able
to usurp all privileges the uApp has, including access to the
Unicorn-protected data.
3. SYSTEM DESCRIPTION
3.1 Unicorn Architecture