        json = await resp.Content.ReadAsStringAsync();
        return JsonConvert.DeserializeObject(json);
      }
    }
在Program类中，可以看到添加到服务的章。调用BookChapterClient的PostAsync方法
后，返回的Chapter包含新的标识符（代码文件BookServiceClientApp/Program.cs）：
    private static async Task AddChapterAsync()
    {
      WriteLine(nameof(AddChapterAsync));
      var client = new BookChapterClient(Addresses.BaseAddress);
      BookChapter chapter = new BookChapter
      {
        Number = 42,
        Title = "ASP.NET Web API",
        Pages = 35
      };
      chapter = await client.PostAsync(Addresses.BooksApi, chapter);
      WriteLine($"added chapter {chapter.Title} with id {chapter.Id}");
      WriteLine();
    }
AddChapterAsync方法的结果显示了创建对象的一次成功运行：
    AddChapterAsync
    status from POST Created
    added resource at http://localhost:5000/api/BookChapters/0e99217d-8769-46cd-9
3a4-
    2cf615cda5ae
    added chapter ASP.NET Web API with id 0e99217d-8769-46cd-93a4-2cf615cda5ae
42.4.4 发送PUT请求
HTTP PUT请求用于更新记录，使用HttpClient方法PutAsync来发送。PutAsync需要第
二个参数中的更新内容和第一个参数中服务的URL，其中包括标识符（代码文件
BookServiceClientApp/HttpClientHelper.cs）：
    public async Task PutAsync(string uri, T item)
    {
      using (var client = new HttpClient())
      {
        client.BaseAddress = _baseAddress;
        string json = JsonConvert.SerializeObject(item);
        HttpContent content = new StringContent(json, Encoding.UTF8,
        "application/json");
        HttpResponseMessage resp = await client.PutAsync(uri, content);
        WriteLine($"status from PUT {resp.StatusCode}");
        resp.EnsureSuccessStatusCode();
      }
    }
在Program类中，章Windows Store Apps更新为另一个章编号，标题更新为Windows
Apps （代码文件BookServiceClientApp/Program.cs）：
    private static async Task UpdateChapterAsync()
    {
      WriteLine(nameof(UpdateChapterAsync));
      var client = new BookChapterClient(Addresses.BaseAddress);
      var chapters = await client.GetAllAsync(Addresses.BooksApi);
      var chapter = chapters.SingleOrDefault(c => c.Title == "Windows Store Apps"
);
      if (chapter ! = null)
      {
        chapter.Number = 32;
        chapter.Title = "Windows Apps";
        await client.PutAsync(Addresses.BooksApi + chapter.Id, chapter);
        WriteLine($"updated chapter {chapter.Title}");
      }
      WriteLine();
    }
UpdateChapterAsync方法的控制台输出显示了HTTP NoContent结果和更新的章标题：
    UpdateChapterAsync
    status from GET OK
    status from PUT NoContent
    updated chapter Windows Apps
42.4.5 发送DELETE请求
示例客户端的最后一个请求是HTTP 
DELETE请求。调用HttpClient类的GetAsync、
PostAsync和PutAsync后，显然发送DELETE请求的方法是DeleteAsync。在下面的代码段
中，DeleteAsync方法只需要一个URI参数来识别要删除的对象（代码文件
BookServiceClientApp/HttpClientHelper.cs）：
    public async Task DeleteAsync(string uri)
    {
      using (var client = new HttpClient())
      {
        client.BaseAddress = _baseAddress;
        HttpResponseMessage resp = await client.DeleteAsync(uri);
        WriteLine($"status from DELETE {resp.StatusCode}");
        resp.EnsureSuccessStatusCode();
      }
    }
Program类定义了RemoveChapterAsync方法（代码文件
BookServiceClientApp/Program.cs）：
    private static async Task RemoveChapterAsync()
    {
      WriteLine(nameof(RemoveChapterAsync));
      var client = new BookChapterClient(Addresses.BaseAddress);
      var chapters = await client.GetAllAsync(Addresses.BooksApi);
      var chapter = chapters.SingleOrDefault(c => c.Title == "ASP.NET Web Forms")
;
      if (chapter ! = null)
      {
        await client.DeleteAsync(Addresses.BooksApi + chapter.Id);
        WriteLine($"removed chapter {chapter.Title}");
      }
      WriteLine();
    }
运行应用程序时，RemoveChapterAsync方法首先显示了HTTP GET方法的状态，因为
是先发出GET请求来检索所有的章，然后发出成功的DELETE请求来删除ASP.NET 
Web
Forms这一章：
    RemoveChapterAsync
    status from GET OK
    status from DELETE OK
    removed chapter ASP.NET Web Forms
42.5 写入数据库
第38章介绍了如何使用Entity Framework将对象映射到关系上。ASP.NET Web API控
制器可以很容易地使用DbContext。在示例应用程序中，不需要改变控制器；只需要创建
并注册另一个存储库，以使用Entity Framework。本节描述所需的所有步骤。
42.5.1 定义数据库
下面开始定义数据库。为了使用Entity 
Framework与SQL 
Server，需要把NuGet包
EntityFramework.Core和EntityFramework.MicrosoftSqlServer添加到服务项目中。为了在代
码中创建数据库，也要添加NuGet包EntityFramework.Commands。
前面已经定义了BookChapter类。这个类保持不变，用于填充数据库中的实例。映射
属性在BooksContext类中定义。在这个类中，重写OnModelCreating方法，把BookChapter
类型映射到Chapters表，使用数据库中创建的默认唯一标识符定义Id列的唯一标识符。
Title列限制为最多120个字符（代码文件
BookServiceAsyncSample/Models/BooksContext.cs）：
    public class BooksContext: DbContext
    {
      public DbSet Chapters { get; set; }
      protected override void OnModelCreating(ModelBuilder modelBuilder)
      {
        base.OnModelCreating(modelBuilder);
        EntityTypeBuilder chapter = modelBuilder
        .Entity();
        chapter.ToTable("Chapters").HasKey(p => p.Id);
        chapter.Property(p => p.Id)
        .HasColumnType("UniqueIdentifier")
        .HasDefaultValueSql("newid()");
        chapter.Property(p => p.Title)
        .HasMaxLength(120);
      }
    }
为了允许使用.NET CLI工具创建数据库，在project.json配置文件中定义了ef命令，把
它映射到EntityFrameworkCore.Commands（代码文件
BookServiceAsyncSample/project.json）：
    "tools": {
      "dotnet-ef": "1.0.＊"
    },
对于依赖注入容器，需要添加Entity 
Framework和SQL 
Server来调用扩展方法
AddEntity-Framework和AddSqlServer。刚才创建的BooksContext也需要注册。使用方法
AddDbContext添加BooksContext。在该方法的选项中，传递连接字符串（代码文件
BookServiceAsyncSample/ Startup.cs）：
    public async void ConfigureServices(IServiceCollection services)
    {
      services.AddMvc().AddXmlSerializerFormatters();
      // etc.
      services.AddEntityFramework()
        .AddSqlServer()
        .AddDbContext(options =>
        options.UseSqlServer(
          Configuration["Data:BookConnection:ConnectionString"]));
        // etc.
    }
连接字符串本身用应用程序设置定义（代码文件
BookServiceAsyncSample/appsettings.json）：
    "Data": {
      "BookConnection": {
        "ConnectionString":
        "Server=(localdb)\\mssqllocaldb; Database=BooksSampleDB;
          Trusted_Connection=True; MultipleActiveResultSets=true"
      }
    },
有了这些代码，现在可以创建迁移和数据库了。为了在项目中添加基于代码的迁移，
可以在Developer Command Prompt中启动这个dnx命令，在其中把当前目录改为项目的目
录——放置project.json文件的目录。这条语句使用project.json文件中定义的ef命令调用迁
移，在该项目中添加InitBooks迁移。成功运行这条命令后，可以看到项目中的Migrations
文件夹包含创建数据库的类：
    >dotnet ef migrations add InitBooks
下面的命令基于启动代码定义的连接字符串创建数据库：
    >dotnet ef database update
42.5.2 创建存储库
为了使用BooksContext，需要创建一个实现接口IBookChaptersRepository的存储库。
类BookChaptersRepository利用BooksContext，而不是像SampleBookChaptersRepository那样
使用内存中的字典（代码文件
BookServiceAsyncSample/Models/BookChaptersRepository.cs）：
      public class BookChaptersRepository: IBookChaptersRepository, IDisposable
      {
        private BooksContext _booksContext;
        public BookChaptersRepository(BooksContext booksContext)
        {
          _booksContext = booksContext;
        }
        public void Dispose()
        {
          _booksContext? .Dispose();
        }
        public async Task AddAsync(BookChapter chapter)
        {
          _booksContext.Chapters.Add(chapter);
          await _booksContext.SaveChangesAsync();
        }
        public Task FindAsync(Guid id) =>
          _booksContext.Chapters.SingleOrDefaultAsync(c => c.Id == id);
        public async Task> GetAllAsync() =>
          await _booksContext.Chapters.ToListAsync();
        public Task InitAsync() => Task.FromResult(null);
        public async Task RemoveAsync(Guid id)
        {
          BookChapter chapter = await _booksContext.Chapters
          .SingleOrDefaultAsync(c => c.Id == id);
          if (chapter == null) return null;
          _booksContext.Chapters.Remove(chapter);
          await _booksContext.SaveChangesAsync();
          return chapter;
        }
        public async Task UpdateAsync(BookChapter chapter)
        {
          _booksContext.Chapters.Update(chapter);
          await _booksContext.SaveChangesAsync();
        }
      }
如果考虑是否要使用上下文，可以阅读第38章，它涵盖了Entity Framework Core的更
多信息。
要使用这个存储库，必须在容器的注册表中删除SampleBookChaptersRepository（或
将其注释掉），并添加BookChaptersRepository，让依赖注入容器在要求提供接口
IBookChapterRepository时，创建这个类的一个实例（代码文件
BookServiceAsyncSample/Startup.cs）：
    public async void ConfigureServices(IServiceCollection services)
    {
      services.AddMvc().AddXmlSerializerFormatters();
      // comment the following three lines to use the DookChaptersRepository
      //IBookChaptersRepository repos = new SampleBookChaptersRepository();
      //services.AddSingleton(repos);
      //await repos.InitAsync();
      services.AddEntityFramework()
       .AddSqlServer()
       .AddDbContext(options => options.UseSqlServer(
        Configuration["Data:BookConnection:ConnectionString"]));
      services.AddSingleton();
    }
现在，不改变控制器或客户端，就可以再次运行服务和客户端。根据最初在数据库中
输入的数据，可以看到GET/POST/PUT/DELETE请求的结果。
42.6 创建元数据
为服务创建元数据允许获得服务的描述，并允许使用这种元数据创建客户端。通过使
用SOAP的Web服务，元数据和Web服务描述语言（WSDL）自SOAP的早期就已经存在。
WSDL详见第44章。如今，REST服务的元数据也在这里。目前它不像WSDL那样是一个
标准，但描述API的最流行的框架是Swagger（http://www.swagger.io）。自2016年1月起，
Swagger规范已经更名为OpenAPI，成为一个标准（http://www.openapis.org）。
要给ASP.NET Web API服务添加Swagger或OpenAPI，可以使用Swashbuckle。NuGet
包Swashbuckle.SwaggerGen包含生成Swagger的代码，包Swashbuckle.SwaggerUi提供了一
个动态创建的用户界面。这两个包都用于扩展BooksServiceSample项目。
在添加NuGet包之后，需要把Swagger添加到服务集合中。AddSwaggerGen是一个扩
展方法，可以把Swagger服务添加到集合中。为了配置Swagger，调用方法
ConfigureSwaggerDocument和ConfigureSwaggerSchema。ConfigureSwaggerGen配置标题、
描述和API版本，以及定义生成的JSON模式。示例代码配置为不显示过时的属性，而枚举
值应显示为字符串（代码文件BooksServiceSample/Startup.cs）：
    public void ConfigureServices(IServiceCollection services)
    {
      // Add framework services.
      services.AddMvc();
      IBookChaptersRepository repos = new SampleBookChaptersRepository();
      repos.Init();
      services.AddSingleton(repos);
      services.AddSwaggerGen();
      services.ConfigureSwaggerDocument(options =>
      {
        options.SingleApiVersion(new Info
        {
        Version = "v1",
        Title = "Book Chapters",
        Description = "A sample for Professional C# 6"
        });
        options.IgnoreObsoleteActions();
        options.IgnoreObsoleteProperties();
        options.DescribeAllEnumsAsStrings();
      }
    }
剩下的就是在Startup类的Configure方法中配置Swagger。扩展方法UseSwagger指定应
该生成一个JSON模式文件。可以用UseSwagger配置的默认URL
是/swagger/{version}/swagger.json。对于前面代码段中配置的文档，URL
是/swagger/v1/swagger.json。方法UseSwaggerUi定义了Swagger用户界面的URL。使用没有
参数的方法的话，URL是swagger/ui。当然，使用UseSwaggerUi的不同重载方法可以改变
这个URL：
    public void Configure(IApplicationBuilder app, IHostingEnvironment env,
      ILoggerFactory loggerFactory)
    {
      loggerFactory.AddConsole(Configuration.GetSection("Logging"));
      loggerFactory.AddDebug();
      app.UseIISPlatformHandler();