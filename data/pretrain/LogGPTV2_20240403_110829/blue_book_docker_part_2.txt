* Create an external network with `docker network create `
* In each of your `docker-compose.yml` configure the default network to use your
    externally created network with the networks top-level key.
* You can use either the service name or container name to connect between containers.
Let's do it with an example:
* Creating the network
    ```bash
    $ docker network create external-example
    2af4d92c2054e9deb86edaea8bb55ecb74f84a62aec7614c9f09fee386f248a6
    ```
* Create the first docker-compose file
    ```yaml
    version: '3'
    services:
      service1:
        image: busybox
        command: sleep infinity
    networks:
      default:
        external:
          name: external-example
    ```
* Bring the service up
    ```bash
    $ docker-compose up -d
    Creating compose1_service1_1 ... done
    ```
* Create the second docker-compose file with network configured
    ```yaml
    version: '3'
    services:
      service2:
        image: busybox
        command: sleep infinity
    networks:
      default:
        external:
          name: external-example
    ```
* Bring the service up
    ```bash
    $ docker-compose up -d
    Creating compose2_service2_1 ... done
    ```
After running `docker-compose up -d` on both docker-compose.yml files, we see
that no new networks were created.
```bash
$ docker network ls
NETWORK ID          NAME                DRIVER              SCOPE
25e0c599d5e5        bridge              bridge              local
2af4d92c2054        external-example    bridge              local
7df4631e9cff        host                host                local
194d4156d7ab        none                null                local
```
With the containers using the external-example network, they are able to ping
one another.
```bash
# By service name
$ docker exec -it compose1_service1_1 ping service2
PING service2 (172.24.0.3): 56 data bytes
64 bytes from 172.24.0.3: seq=0 ttl=64 time=0.054 ms
^C
--- service2 ping statistics ---
1 packets transmitted, 1 packets received, 0% packet loss
round-trip min/avg/max = 0.054/0.054/0.054 ms
# By container name
$ docker exec -it compose1_service1_1 ping compose2_service2_1
PING compose2_service2_1 (172.24.0.2): 56 data bytes
64 bytes from 172.24.0.2: seq=0 ttl=64 time=0.042 ms
^C
--- compose2_service2_1 ping statistics ---
1 packets transmitted, 1 packets received, 0% packet loss
round-trip min/avg/max = 0.042/0.042/0.042 ms
```
The other way around works too.
# Dockerfile creation
## [Remove the apt cache after installing a package](https://docs.docker.com/develop/develop-images/dockerfile_best-practices/)
```
RUN apt-get update && apt-get install -y \
  python3 \
  python3-pip \
  && rm -rf /var/lib/apt/lists/*
```
## [Add the contents of a directory to the docker](https://stackoverflow.com/questions/37789984/how-to-copy-folders-to-docker-image-from-dockerfile)
```
ADD ./path/to/directory /path/to/destination
```
## [Append a new path to PATH](https://stackoverflow.com/questions/27093612/in-a-dockerfile-how-to-update-path-environment-variable)
```
ENV PATH="${PATH}:/opt/gtk/bin"
```
# Troubleshooting
If you are using a VPN and docker, you're going to have a hard time.
The `docker` systemd service logs `systemctl status docker.service` usually doesn't
give much information. Try to start the daemon directly with `sudo
/usr/bin/dockerd`.
## Syslog getting filled up with docker network recreation
If you find yourself with your syslog getting filled up by lines similar to:
```
 Jan 15 13:19:19 home kernel: [174716.097109] eth2: renamed from veth0adb07e
 Jan 15 13:19:20 home kernel: [174716.145281] IPv6: ADDRCONF(NETDEV_CHANGE): vethcd477bc: link becomes ready
 Jan 15 13:19:20 home kernel: [174716.145337] br-1ccd0f48be7c: port 5(vethcd477bc) entered blocking state
 Jan 15 13:19:20 home kernel: [174716.145338] br-1ccd0f48be7c: port 5(vethcd477bc) entered forwarding state
 Jan 15 13:19:20 home kernel: [174717.081132] br-fbe765bc7d0a: port 2(veth31cdd6f) entered disabled state
 Jan 15 13:19:20 home kernel: [174717.081176] vethc4da041: renamed from eth0
 Jan 15 13:19:21 home kernel: [174717.214911] br-fbe765bc7d0a: port 2(veth31cdd6f) entered disabled state
 Jan 15 13:19:21 home kernel: [174717.215917] device veth31cdd6f left promiscuous mode
 Jan 15 13:19:21 home kernel: [174717.215919] br-fbe765bc7d0a: port 2(veth31cdd6f) entered disabled state
```
It probably means that some docker is getting recreated continuously. Those traces are normal logs of docker creating the networks, but as they do each time the docker starts, if it's restarting continuously then you have a problem.
## Don't store credentials in plaintext
!!! warning "It doesn't work, don't go this painful road and assume that docker is broken."
    The official steps are horrible, and once you've spent two hours debugging
    it, you [won't be able to push or pull images with your
    user](https://github.com/docker/docker-credential-helpers/issues/154).
When you use `docker login` and introduce the user and password you get
the next warning:
```
WARNING! Your password will be stored unencrypted in /root/.docker/config.json.
Configure a credential helper to remove this warning. See
https://docs.docker.com/engine/reference/commandline/login/#credentials-store
```
I got a nice surprise when I saw that `pass` was suggested in the link of the
warning, to be used as a backend to store the password. But that feeling soon
faded.
To make docker understand that you want to use `pass` you need to use the
[`docker-credential-pass`](https://github.com/docker/docker-credential-helpers/releases)
script. A Go script "maintained" by docker, whose last commit was two years ago
, has the CI broken and many old unanswered issues. Setting it up it's not easy
either and it's [ill
documented](https://github.com/docker/docker-credential-helpers/issues/102).
Furthermore, the script doesn't do what I expected, which is to store the
password of your registry user in a pass entry. Instead, you need to create an
empty pass entry in `docker-credential-helpers/docker-pass-initialized-check`,
and when you use `docker login`, manually introducing your data, it creates
another entry, as you can see in the next `pass` output:
```
Password Store
└── docker-credential-helpers
    ├── aHR0cHM6Ly9pbmRleC5kb2NrZXIuaW8vdjEv
    │   └── lyz
    └── docker-pass-initialized-check
```
That entry is removed when you use `docker logout` so the next time you log in
you need to introduce the user and password `(╯°□°)╯ ┻━┻`.
### Installing docker-credential-pass
You first need to install the script:
```bash
# Check for later releases at https://github.com/docker/docker-credential-helpers/releases
version="v0.6.3"
archive="docker-credential-pass-$version-amd64.tar.gz"
url="https://github.com/docker/docker-credential-helpers/releases/download/$version/$archive"
# Download cred helper, unpack, make executable, and move it where Docker will find it.
wget $url \
    && tar -xf $archive \
    && chmod +x docker-credential-pass \
    && mv -f docker-credential-pass /usr/local/bin/
```
Another tricky issue is that even if you use a non-root user who's part of the
`docker` group, the script is not aware of that, so it will *look in the
password store of root* instead of the user's. This means that additionally to
your own, you need to create a new password store for root. Follow the next
steps with the root user:
* Create the password with `gpg --full-gen`, and copy the key id. Use a non
    empty password, otherwise you are getting the same security as with the
    password in cleartext.
* Initialize the password store `pass init gpg_id`, changing `gpg_id` for the
    one of the last step.
* Create the *empty* `docker-credential-helpers/docker-pass-initialized-check`
    entry:
    ```bash
    pass insert docker-credential-helpers/docker-pass-initialized-check
    ```
    And press enter twice.
Finally we need to specify in the root's docker configuration that we want to
use the `pass` credential storage.
!!! note "File: /root/.docker/config.json"
    ```json
    {
        "credsStore": "pass"
    }
    ```
### Testing it works
To test that docker is able to use pass as backend to store the credentials,
run `docker login` and introduce the user and password. You should see the
`Login Succeeded` message without any warning.
```
Login with your Docker ID to push and pull images from Docker Hub. If you don't have a Docker ID, head over to https://hub.docker.com to create one.
Username: lyz
Password:
Login Succeeded
```
Awful experience, wasn't it? Don't worry it gets worse.
Now that you're logged in, whenever you try to push an image you're probably
going to get an `denied: requested access to the resource is denied` error.
That's because docker is not able to use the password it has stored in the
root's password store. If you're using `root` to push the image (bad idea
anyway), you will need to `export GPG_TTY=$(tty)` so that docker can ask you for
your password to unlock root's `pass` entry. If you're like me that uses
a non-root user belonging to the `docker` group, not even that works, so you've
spent all this time reading and trying to fix everything for nothing... Thank
you Docker `-.-`.
## [Start request repeated too quickly](https://askubuntu.com/questions/1222440/why-wont-the-docker-service-start)
Shutdown the VPN and it will work. If it doesn't inspect the output of
`journalctl -eu docker`.
## [Disable ipv6](https://stackoverflow.com/questions/30750271/disable-ip-v6-in-docker-container)
```bash
sysctl net.ipv6.conf.all.disable_ipv6=1
sysctl net.ipv6.conf.default.disable_ipv6=1
```