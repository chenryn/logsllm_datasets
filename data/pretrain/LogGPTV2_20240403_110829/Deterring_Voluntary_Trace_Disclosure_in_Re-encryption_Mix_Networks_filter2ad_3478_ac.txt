An equivalent deﬁnition. Let ν be the permutation on Zn
deﬁned by ν(i) = i + 1 mod n. The permutation ν is
called the “shift” permutation. Let ◦ denote the composi-
tion of functions. We deﬁne the set of permutations that are
conjugates of ν by elements of T as:
{π
−1 ◦ ν ◦ π | π ∈ T }.
Proposition 3. We have C = {π
−1 ◦ ν ◦ π | π ∈ T }.
This proposition states that the set of circular permuta-
tions is exactly the same as the set of conjugates of the shift
permutation ν. The proof is given in the appendix. This
equivalent deﬁnition will prove useful in Section 7 to let a
mix server prove that a batch of inputs was mixed correctly
according to our TD-partition.
6 Collateral Key Commitment Protocol
The collateral key-commitment (KC) protocol lets a mix
server e generate a collateral public key and commit to the
bits of the corresponding secret key. The protocol KC takes
as input a generator g of a group Gq of order q, and the
public key y ∈ Gq of the mix network. The protocol outputs
a collateral key ye ∈ Gq for mix server e, together with
a list of commitments [ai] to the bits of the corresponding
secret key se (such that ye = gse). The protocol also allows
the mix server to prove the correctness of the commitments,
without leaking any information about the secret key. We
denote the protocol by (ye, [ai]) ← KC (g, q, y). We note
that the KC protocol only needs to be executed once during
the system bootstrap stage.
(ye, [ai]) ←
Protocol 1. Key commitment protocol
KC (g, q, y)
R← Z
• P generates a secret key se
∗
q, and outputs the
corresponding public key ye = gse. We denote the
bits of the secret key se by bi for 0 ≤ i < k.
• V sends h R← Gq/{1} to P, where h is used to blind
P’s commitments.
• Commitment. For every bit bi of the secret key (0 ≤
R← Z
i < k), P chooses a private exponent ri
∗
q and
outputs the commitment ai = gbihri.
• Proof. P proves to V the correctness of the commit-
ments ai to the bits bi of the collateral key as follows:
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:52:05 UTC from IEEE Xplore.  Restrictions apply. 
(cid:2)
1. P proves
KDLh {ai} ∨ KDLh {ai/g}(cid:3)
. As
noted in Section 3.2, an efﬁcient proof can be
constructed for this boolean formula.
2. P computes A = (a0)20·(a1)21·. . .·(ak−1)2k−1
(cid:4)
.
3. P proves KDLh {A/ye} to V using knowledge
Note that A = gsehR, where R =
2iri.
of R.
The commitment scheme used in Protocol 1 is well-known
to be complete, sound and zero-knowledge (see [30]).
7 One Round of Trace-Deterring Mixing
This section introduces a protocol to perform one round
of trace-deterring mixing (TDM). In TDM, a mix server
takes as input a commitment to a bit b of its collateral key
and a list of ElGamal ciphertexts. The server re-encrypts
and mixes this list according to a permutation chosen from
the set T0 if b = 0 or from the set T1 if b = 1. The
sets T0 and T1 are deﬁned according the the TD-partition
({Id},C, T∗) of Section 5. Finally, the server outputs the
permuted list and proves to an honest veriﬁer that it ex-
ecuted the TDM protocol correctly. Since any input-to-
output trace discloses the secret bit, the administrator of the
mix server is deterred from leaking any information about
the permutation to a third party.
Let 0 ≤ j < n and let L0 = [(Gj, Mj)] be an input
batch to a mix server. We denote an instance of TDM as
TDM (y, bi, L0), where y is the public key mix server e
uses to encrypt and re-encrypt all the incoming messages.
The protocol is as follows:
Protocol 2. Trace-Deterring-Mixing TDM (y, bi, L0)
1. The mix server e chooses a permutation πi uniformly
at random from T . The mix server computes L1 =
MIX πi(L0) and outputs L1.
2. The server outputs a list L2 deﬁned as follows:
• If bi = 0, the server deﬁnes L2 = MIX Id(L1).
• If bi = 1, the server deﬁnes L2 = MIX ν(L1),
where ν is the shift permutation deﬁned in Sec-
tion 5.
3. The server computes L3 = MIX
L3.
−1
i
π
(L2) and outputs
Soundness. We prove ﬁrst that the protocol T DM is sound.
More precisely, we prove that T DM guarantees that the list
L0 is permuted according to Id when bi = 0 and is permuted
according to a permutation chosen randomly from the set C
of circular permutations when bi = 1.
Note that if bi = 0, we have
(cid:5)
(cid:6)
MIX Id(MIX πi(L0))
L3 = MIX
−1
i
π
and thus L3 = MIX Id(L0). In other words, the list L3 con-
sists of re-encryptions of the elements of the list L0 without
any modiﬁcation to their order. If bi = 1, then
(cid:5)
(cid:6)
MIX ν(MIX πi(L0))
.
L3 = MIX
−1
i
π
◦ ν ◦ πi is a circular
−1
By Proposition 3, we know that π
i
permutation. This shows that if the protocol is executed
correctly, the list L0 is permuted according to Id when
bi = 0 and is permuted according to a permutation chosen
randomly from the set C of circular permutations when
bi = 1.
The mix (the prover P) must next prove to a veriﬁer V
that it executed the T DM protocol correctly. The proof
proceeds as follows:
Protocol 3. Generating a proof of correct execution of
TDM
1. To prove correct operation in steps 1 and 3 of the TDM
protocol, P ﬁrst proves to V the correctness of the mix-
ing:
PVM {L0 (cid:2) L1} and PVM {L3 (cid:2) L2} .
P then proves to V that the mix that transforms L0 into
L1 (step 1) is equivalent to the mix that transforms L3
into L2 (step 3). This proof is given by running
PEM { (L0 (cid:2) L1) = (L3 (cid:2) L2) }
2. P proves to V correct operation in step 2 as follows.
Recall from Section 6 that the server’s commitment to
the bit bi is a value ai = gbihri. let L1 = [(Gj, Mj)]
(cid:3)
j)] denote the elements of the lists
and L2 = [(G
L1 and L2 (for 0 ≤ j < n). The server must prove
that:
(cid:3)
j, M
• either bi = 0 (i.e. ai = hri) and the ciphertext
(cid:3)
(cid:3)
j) is a re-encryption of (Gj, Mj) for j =
(G
j, M
0, . . . , n − 1,
• or bi = 1 (i.e. ai = ghri) and the ciphertext
(cid:3)
(cid:3)
j+1) is a re-encryption of (Gj, Mj) for
(G
j+1, M
j = 0, . . . , n − 1 (the list was shifted). Note
(cid:3)
j+1), the subscript
that in the notation (G
indices are taken modulo n. In other words, with
(cid:3)
(cid:3)
n) =
a slight abuse of notation, we let (G
n, M
(cid:3)
(G
0, M
(cid:3)
j+1, M
(cid:3)
0).
Formally, let
(cid:7)
F0 =
F1 =
0≤j<n
(cid:7)
0≤j<n
(cid:8)
(cid:8)
PCR
PCR
(cid:3)
(Gj, Mj) (cid:2) (G
j, M
(cid:3)
j)
(cid:9)
(cid:3)
(Gj, Mj) (cid:2) (G
j+1, M
(cid:3)
j+1)
(cid:9)
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:52:05 UTC from IEEE Xplore.  Restrictions apply. 
P proves to V the following formula:
(cid:5)
KDLh {ai} ∧ F0
∨
KDLh {ai/g} ∧ F1
(cid:6)
(cid:5)
(cid:6)
.
As noted in Section 3.2, an efﬁcient proof can be con-
structed for this boolean formula.
This protocol can be converted into a noninteractive ver-
sion in the random oracle model by using the Fiat-Shamir
heuristic [15].
The completeness, soundness and zero-knowledge of
protocol 3 follow directly from the corresponding properties
of the well-known building blocks that make up the proto-
col.
Computational complexity of the TDM protocol. Let n
denote the number of ciphertext inputs (i.e., the number of
elements in the list L0):
• The cost of Steps 1 and 3 of the TDM protocol (with
the accompanying proof of correctness), is the cost
of two veriﬁable mixings and one proof of equiva-
lent mixing: 18n modular exponentiations for both the
prover and the veriﬁer.
• The cost of Step 2 of the protocol is the cost of re-
encrypting n elements for the prover (which is 2n
modular exponentiations) plus the cost of the proof
for the boolean formula. Using the technique of [5],
the computational cost of proving the boolean formula
comes to 4n + 3 modular exponentiations for P and
4n + 4 modular exponentiations for V.
The total computational complexity of the TDM protocol is
thus 24n modular exponentiations for the prover P and 22n
modular exponentiations for the veriﬁer V.
8 A Trace-Deterring Mix Network
In this section, we discuss how to construct a complete
trace-deterring mix network using as a building block the
T DM protocol of Section 7. Our trace-deterring tech-
niques are compatible with the standard construction of mix
networks, but add a new property which discourages mix
administrators from disclosing input-to-output message cor-
respondences.
As discussed in Section 4, a mix server must perform
a sequence of TD-Mixing operations over a batch of in-
put messages, each corresponding to one bit of its collat-
eral secret key. If all these TD-Mixings are executed con-
secutively, the mix server can disclose to a third party the
input of a message to the ﬁrst TD-Mixing and its output
of the last TD-Mixing, without revealing any of its secret
bits in-between. To prevent this attack, we propose a loop
construction of a mix cascade. A cascade is composed of
multiple mix servers, each belonging to a different organi-
zation. A batch of messages ﬂows through the cascade, and
then goes back to the head of the cascade to start another
round. Each round commits to one bit of these mix servers’
collateral keys.
Figure 2 illustrates this construction. In the ﬁgure, the
mix cascade performs k loops on an input batch, where k
is the number of bits in the collateral key of a mix server.
The m servers permute the batch according to the bit string
11 . . . 0 in the ﬁrst loop and 10 . . . 1 in the second loop, and
so on, until all k strings are used. Note that the m mix
servers are assumed to belong to different organizations.
Their reluctance to reveal their secret bits to one another
prevents them from colluding.
… loop k times …
1
2
m
start
1         1
1         0
    ….        0
    ….        1
end
0         0
1
y
e
k
t
e
r
c
e
S
2
y
e
k
t
e
r
c
e