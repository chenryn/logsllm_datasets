I am getting an "access to undefined reference" in code that used to work, and
that I believe is valid. It takes a very specific combination of details to
trigger the problem, so I think it is related to optimization.
As far as I can tell from Travis (assuming they update 0.3 regularly) this
behaviour started in the last day or two.
    andrew@laptop:~/project/CRC> julia
                   _
       _       _ _(_)_     |  A fresh approach to technical computing
      (_)     | (_) (_)    |  Documentation: http://docs.julialang.org
       _ _   _| |_  __ _   |  Type "help()" to list help topics
      | | | | | | |/ _` |  |
      | | |_| | | | (_| |  |  Version 0.3.0-prerelease+2697 (2014-04-22 02:46 UTC)
     _/ |\__'_|_|_|\__'_|  |  Commit 9dc5e3f* (0 days old master)
    |__/                   |  x86_64-suse-linux
    julia> type Single{A}
               table::Vector{A}
               Single() = new()
           end
    julia> 
    julia> function crc(tables=Single)
               make_tables(tables{Uint8}())
           end
    crc (generic function with 2 methods)
    julia> 
    julia> function make_tables(tables::Single)
               tables.table = Array(Uint8, 256)
               tables.table[1] = 0x0
           end
    make_tables (generic function with 1 method)
    julia> 
    julia> crc()
    ERROR: access to undefined reference
     in crc at none:2
I believe this is valid code - undefined members of a type seem to be
supported in general, as long as they are created before reading.
Note that much of the "mess" above is necessary in order to trigger this.
Below I'll add some minimally modified versions that work to illustrate this:
The type parameterization is needed:
    julia> type Single
               table::Vector{Uint8}
               Single() = new()
           end
    julia> 
    julia> function crc(tables=Single)
               make_tables(tables())
           end
    crc (generic function with 2 methods)
    julia> 
    julia> function make_tables(tables::Single)
               tables.table = Array(Uint8, 256)
               tables.table[1] = 0x0
           end
    make_tables (generic function with 1 method)
    julia> 
    julia> crc()
    0x00
The default argument is needed:
    julia> type Single{A}
               table::Vector{A}
               Single() = new()
           end
    julia> 
    julia> function crc(tables)
               make_tables(tables{Uint8}())
           end
    crc (generic function with 1 method)
    julia> 
    julia> function make_tables(tables::Single)
               tables.table = Array(Uint8, 256)
               tables.table[1] = 0x0
           end
    make_tables (generic function with 1 method)
    julia> 
    julia> crc(Single)
    0x00
The separate routine to set the value is needed:
    julia> type Single{A}
               table::Vector{A}
               Single() = new()
           end
    julia> 
    julia> function crc(tables=Single)
               t = tables{Uint8}()
               t.table = Array(Uint8, 256)
               t.table[1] = 0x0
           end
    crc (generic function with 2 methods)
    julia> 
    julia> crc()
    0x00
Finally, the example to cut+paste:
    type Single{A}
        table::Vector{A}
        Single() = new()
    end
    function crc(tables=Single)
        make_tables(tables{Uint8}())
    end
    function make_tables(tables::Single)
        tables.table = Array(Uint8, 256)
        tables.table[1] = 0x0
    end
    crc()