## Page 41
操作
永
文件操作相关关键参数用户可控导致文件/目录删除/移动/写入（上传）读取等
文件/目录删除
PHP复制代码
unLink（文件路径）//删除文件
rmdir（文件夹路径）//删除目录
攻击者常见用法
删除lock文件（解除重复程序安装保护等安全限制）
删除网站关键文件（导致网站拒绝服务数据丢失）
文件写入/上传
PHP
复制代码
文件写入
个
file_put_contents（路径，写入字符串）；//直接将字符串写入文件（不存在会自动创建）
4
$fp=fopen（文件路径，"w"）；//以写入模式打开一个文件返回文件指针（不存在会自动创建）
5
fwrite（$fp，写入字符串）；//写入数据
fclose（$fp）;//关闭文件
文件上传
move_upLoaded_file（临时上传文件路径，目标文件路径）；//移动临时上传文件
php的原生文件上传收到POST表单->随机文件名写入临时目录->（执行PHP文件处理逻辑->移动临时
文件到保存位置）->删除临时文件（如果临时文件没有被移动）
41
---
## Page 42
临时文件路径必须是php上传表单自动处理产生的例如$_FILES["pictures"Itmp_name"]
"pictures"为表单中的name"tmp_name"为固定变量名（临时文件名）
HTTP POST with a file arrives
PHPbegins analysis
PHPcreates temp file
PHP writes data to temp file
PHP closes temp file
script execution begins
[optional]script moves uploaded file
scriptexecution ends
PHPremoves temp files(ifany)
time
time window
Gynvael Coldwind 《PHP_LFl_rfc1867_temporary_files》 2011.3
注：只要PHP收到POST上传文件表单哪怕php页面一行代码没有都会将上传文件保存到临时目录在请求
结束后如果临时文件没有被移走就会被自动删除从写入文件到删除文件有个短暂的窗口时间可用于文
件包含
文件解压
42
---
## Page 43
PHP
复制代码
$zip = new \ZipArchive;
2
$zip->open(test_new.zip’，\ZipArchive::CREATE）//打开—个zip文件
$zip->addFile（test.txt)；//添加压缩文件
$zip->addEmptyDir（‘newdir'）;//添加空目录
$zip->addFromString（new.txt'，文本）；//从字符串添加文件到压缩包
$zip->extractTo（'upLoad）;//将压缩包文件解压到upload目录下
$zip->close(）;//关闭zip
注：ZipArchive扩展在windows平台php版本>5.6时默认安装.linux及windows其他版本需要手动编译安
装
审计时重点查找extractTo方法
穿越控制上传目录到web目录下或者在权限足够的情况下写入文件到系统关键目录（自启动定时任务
ssh公钥覆盖shadow等）
文件写入/上传
43
---
## Page 44
函数
描述
例子
file_put_contents
将一个字符串写入文件
file_put_contents("1.txt","666
6");
move_uploaded_file
将上传的临时文件移动到新的
move_uploaded_file($_FILES[
位置
"pictures"]
["tmp_name"],"1.php")
rename
重命名文件/目录
rename(Soldname,
$newname);
 rmdir
删除目录
mkdir
创建目录
unlink
删除文件
copy
复制文件
copy(Sfile, Snewfile);
fopen/fputs/fwrite
打开文件或者URL
https://www.php.net/manual
/zh/function.fwrite.php
link
创建文件硬链接
link($target, Slink);
symlink
创建符号链接（软链接）
symlink($target, $link);
tmpfile
创建一个临时文件（在临时目录
$temp = tmpfile();
存放随机文件名返回句柄）
fwrite($temp,"123456");
fclose($temp);
request()>file()>move()
Thinkphp文件上传
Sfile = request()
request()>file()>file()
>file($name);
$file=>move($filepath);
extractTo
解压zip到目录
文件读取
44
---
## Page 45
函数
描述
例子
file_get_contents
读入文件返回字符串
echo
file_get_contents("flag.txt");
echo
file_get_contents("https://ww
w.bilibili.com/
");
readfile
读取一个文件，并写入到输出
同file_get_contents
缓冲
fopen/fread/fgets/fgetss
打开文件或者URL读取文件流
Sfile = fopen("test.txt","r");
/fgetc/fgetcsv/fpassthru/fsc
echo fread($file,"1234");
anf
fclose($file);
file
把整个文件读入一个数组中
echo implode(",
file(*https://www.bilibili.com/
);
highlight_file/show_source
语法高亮一个文件
highlight_file("1.php");
parse_ini_file
读取并解析一个ini配置文件
print_r(parse_ini_file(*1.ini*);
simplexml_load_file
读取文件作为XML文档解析
全部文件操作函数可参考PHP官方手册（几乎大部分文件操作函数都可用于ssrfphar反序列化）
https://www.php.net/manual/zh/ref.filesystem.php
白帽酱
45
---
## Page 46
XSS
跨站脚本（攻击）让用户浏览器执行到攻击者指定的JS脚本代码
XSS
反射型XSS
反射型XSS是服务器后端处理时把处理不当的用户输入输出到网页导致用户浏览器执行恶意代码
PHP
复制代码
服务器储存攻击者得到一个返回储存值的页面
被害者请求页面->服务器调用储存并输出->XSS
常见于评论留言文章等
该漏洞需要同时联合查看储存与输出有时业务复杂多写入点多输出点不易发现
比如发布评论攻击者发布带有恶意代码的评论被害者访问评论展示页面触发XSS后台管理员审核评论
时触发XSS
再比如用户系统设置昵称时攻击者将昵称写入数据库在评论显示时读取数据库值输出用户昵称
DOM型XSS
纯dom
储存（反射）dom
DOM型XSS只与浏览器前端DOM渲染有关不做赘述
前端外部文件引用
攻击者修改前端引用的文件链接引用外部网站文件
常见于用户头像文章/评论图片等
---
## Page 48
被害者访问到攻击者个人页面文章评论聊天内容时会访问远程图片文件
这可能会使攻击者获取到访问者的ip浏览器系统等信息
也可以绕过内容审查在审查通过后动态替换文件内容（hsbc广告等信息）
解决方法：正则匹配限制url域名
防护
后端过滤
服务端返回HTTP头添加内容安全策略content-Security-policy头
正确设置安全策略可以有效减少未知XSS/html外部文件引用漏洞产生的危害
COOKIES添加Httponly属性防止使用js读取用户cookies（js发起表单仍可携带cookies）
8
---
## Page 49
SSRF
服务端请求伪造
SSRF
让服务器发起攻击者指定的请求（HTTP/HTTPS/TCP/UDP等）
攻击者通常用来访问/攻击内网服务获取内网信息绕过ip限制
SSRF的函数几乎和文件读取操作一样php中绝大多数文件读取/写入操作函数都支持多种协议（包括
HTTP/SFTP伪协议等)
漏洞常见处：远程图片下载
49
---
## Page 50
函数
描述
例子
file_get_contents
读入文件返回字符串
echo
file_get_contents("https://ww
w.bilibili.com/
");
fsockopen
打开一个套接字连接（远程
https://www.php.net/manual
tcp/udp raw)
/zh/function.fsockopen.php
readfile
读取一个文件，并写入到输出
同file_get_contents
缓冲
fopen/fread/fgets/fgetss
打开文件或者URL读取文件流
$file = fopen("test.txt","r");
/fgetc/fgetcsv/fpassthru/fsc
echo fread($file,"1234");
anf
fclose($file);
file
把整个文件读入一个数组中
echo implode(",
file(*https:/www.bilibili.com/
highlight_file/show_source
语法高亮一个文件
highlight_file("1.php");
parse_ini_file
读取并解析一个ini配置文件
print_r(parse_ini_file(*1.ini*);
simplexml_load_file
读取文件作为XML文档解析
50
---
## Page 51
CSRF
跨站请求伪造
CSRF
表单请求
攻击者使被害者的浏览器在用户不知情的情况下发起目标网站表单请求这些表单常常带有目标网站的用
户cookies可以以用户在目标网站的身份进行操作（攻击者不能获取cookies）
检查鉴权后的操作是否添加token/Referrer校验拒绝空Referrer
JSONP请求
除了表单常见的还有jsonp请求服务器返回一段带有函数调用的json浏览器把jsonp页面当做js加载执
行调用回调函数将数据传入函数用于浏览器从服务器动态获取信息由于js等静态资源调用浏览器默认
放行造成了风险
（get表单也可以使用这种方式发起请求但是无法获取服务器返回的内容）
可获取用户登陆后才能获取的信息比如登陆用户个人资料账户余额等
检查Referrer拒绝空Referrer
AJAX请求
51
---
## Page 52
一种使用js动态加载数据的技术
浏览器会先发送一个HEAD请求获取HTTP头检查Access-Control-Allow-Origin等Access-Control安
全策略
门指南
这会决定是否发起带有目标域浏览器cookies的请求如果没有头或不符合策略则拒绝请求
审计时检查HTTP是否错误地添加"Access-Control-Allow-Origin:*”头
防护方法
添加随机token在表单/jsonp请求时附加token（非常有效）
服务端检测Referrer（一定要拒绝空Referrerhtml表单可以发起空referrer)（表单/静态资源引l用/jsonp
请求）
如果使用正则匹配一定要检查正则是否可以被绕过
服务器返回Access-Control-Allow-Origin头（表单/静态资源引l用/jsonp请求无效仅AJAX请求（一定
不要设置成
52
---
## Page 53
XXE
XML外部实体（注入）攻击者利用xml的性质可以获取本地/远程文件内容（不同于其他语言PHP
中xml实体可以使用PHP伪协议）
XXE
XML外部实体是XML的一个特性XML可以使用外部实体引用来包含和解析其他文档
当然XML还有其他实体详细内容可以参考这个DTD教程
这里就不详细将利用技巧了
审计时如果发现使用了文末列表的函数就要检查是否禁用了外部实体
libxml_disable_entity_loader（true）;：//禁用外部实体使用到的函数参数为true时禁用
注意：php环境中libxml版本>=2.9.0时外部实体默认禁用（PHP版本>=8.0时就开始使用>=2.9.0版本的
libxml且libxml_disable_entity_loader函数被完全废弃使用该函数会抛出错误
漏洞常见处：支付等回调api
---
## Page 54
函数
描述
DOMDocument:
加载解析XML
loadXML($xml);
$xml=simplexml_import_dom(
$dom); $xxe=$xml>xxe;
echo $xxe; ?>
simplexml_load_string
加载解析XML字符串
$xml=simplexml_load_string(
$_REQUEST['xml']);
print_r($xml);
simplexml_load_file
读取文件作为XML文档解析
simplexml_load_file("1.xml")
白帽谐
54
---
## Page 55
反序列化
序列化
函数：Serialize
将PHP中的值转化为一个字符串有利于存储或传递PHP的值同时不丢失其类型和结构
如果被序列化的值是一个对象则会调用对象的__sleep魔法函数
反序列化
函数：unserialize
反序列化在序列化操作后产生的字符串还原序列化前的值
如果被反序列化的结果包含对象则会调用对应对象的__wakeup魔法函数
如果反序列化的字符串被用户可控攻击者则有可能利用PHP中现有的对象调用对应魔法函数进行攻击（主要
者对象定义的魔法函数所拥有的功能）
如果存在可控反序列化点则存在风险.但在PHP语言中，如果反序列化没有可以利用的反序列化链，则无法造
成危害可以看看这篇文章来详细了解反序列化原理及利用方法
除了直接调用unserialize函数外还有覆盖session文件其他调用反序列化的扩展函数触发反序列化因并
不常见未做整理
55
---
## Page 56
LDAP
ldap的注入是ldap搜索过滤器的注入
审计时可以搜索ldap_search函数判断第三个参数是否可控
检查是否正确转义了特殊符号
Plain Text
复制代码
"\/\\空格#，；+*（）\x00（null）
将以上字符转换成ascii码值在其前面加上反斜线
只转义以下这6个字符就足以防止常见的ldap注入
Plain Text
复制代码
\（）\x00
PHP
复制代码
function ldapspecialchars($string){
个
$sanitized=array('\\'=>"\5c*,
'*=>'\2a'，
"(' => '\28',
L~
‘,6z\，'\00);
return
str_replace(array_keys($sanitized),array_values(Ssanitized),$string);
ldap过滤函数代码来自Pino_HD【LDAP】LDAP注入漏洞与防御[2017.09.27]
56
---
## Page 57
如果想要详细了解利用及原理可以参考文章Idap注入入门学习
PHP
复制代码
1
2
$ds=ldap_connect(SldapSrv,$port）;//建立ldap连接
3
if ($ds){
4
$r=ldap_bind（Sds，"cn=".$username.",".sdn，$passwd);/绑定ldap区域（相当
于登陆Ldap服务器）
使用域管用户登陆检索用户列表
5
if($r){
6
$sr=ldap_search($ds, $dn, "(I(cn=".$_GET["user"].")
（mail=".S_GET["user"]."))"）;//在ldap中使用过滤器搜索
Sinfo = ldap_get_entries(Sds, $sr);
8
if(Sinfo ["count"]==0){
9
die（用户不存在'）；
10
11
/ /if($info[0]["userpassword"] [o]==S_GET["pass"]){
12
//die（‘登陆成功'）；
13
//}else{
14
//die（密码错误'）；
15
//}
16
Ldap_close($ds);
17
$ds=ldap_connect($ldapSrv，$port）;//建立ldap连接
18
$bd =ldap_bind($conn，S_GET[user"]，$passwd);// 绑定ldap区域
（相当于登陆Ldap服务器）以普通用户登陆判断是否登陆成功
19 
if (sbd){
20
echo
“登陆成功"；
21 