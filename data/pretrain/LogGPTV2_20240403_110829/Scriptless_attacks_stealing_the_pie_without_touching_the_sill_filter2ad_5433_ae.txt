tection and prevention based on the manifold of encoding
and obfuscation techniques an attacker can choose from. In
a similar way, we argue that scriptless attacks cannot be
prevented at the server-side.
Jim et al.
introduced Browser-Enforced Embedded Poli-
cies (BEEP) [26], a policy-driven browser extension capable
of controlling whether a certain script may execute or not.
More speciﬁcally, BEEP enables a user to whitelist legiti-
mate scripts and disable scripts for certain regions of the
web page. The whole concept represents another foundation
for CSP [43]. Nadji et al. proposed a similar approach: doc-
ument structure integrity (DSI) [35] ensures that dynamic
content is separated from static content on the server-side,
while both are combined at the client-side in an integrity-
preserving way. Blueprint by Louw and Venkatakrishnan
follows a similar approach [31]: a server-side application en-
codes the content into a model representation that can be
processed by the client-side part of the tool. Saxena et al.
presented ScriptGuard, a context-sensitive XSS sanitation
tool capable of automatic context detection and accordant
sanitation routine selection [41]. Note that all these ap-
proaches focus on preventing code scripting, which implies
that scriptless attacks can potentially bypass such protection
mechanisms, for we do not use dynamic content.
Heiderich et al. published on XSS vulnerabilities caused
by SVG graphics bypassing modern HTML sanitizers [20]
as well as DOM-based attacks detection in the context of
browser malware and complex cross-context scripting at-
tacks [19].
Martin and Lam [34] as well as Kieyzun et al. [29] intro-
duced tools capable of automatically generating XSS and
SQL injection attacks against web applications. XSSDS [28]
is a system that determines if an attack is actually success-
ful by comparing HTTP requests and responses. In recent
papers, diﬀerent approaches to discovering parameter injec-
tion [1] and parameter tampering vulnerabilities [5] were
oﬀered. These types of tools are not yet available for auto-
mated discovery and creation of scriptless attacks, although
we expect that similar notions can be identiﬁed and ap-
plied to appropriately consistent tools’ development in the
future.
6. CONCLUSION AND OUTLOOK
In this paper, we introduced a class of attacks against web
applications we call scriptless attacks. The key property of
these attacks is that they do not rely on the execution of
JavaScript (or any other language) code. Instead, they are
solely based on standard browser features available in mod-
ern user agents and deﬁned in the current HTML and CSS3
speciﬁcation drafts. In a way, this kind of attacks can be seen
as a generalization of CSS-based history stealing [22,32] and
similar attack vectors [52]. We discussed several browser fea-
tures useful for scriptless attacks, covering a variety of ways
in which an adversary can access information or establish a
side channel. Furthermore, we presented several scriptless
attacks against an exemplary web application and demon-
strated how an adversary can successfully obtain sensitive
information such as CSRF token or user-input by abusing
legitimate browser concepts. In addition, we showed that an
adversary can also exﬁltrate speciﬁc information and estab-
lish side channels that make this attack feasible.
While the attacks discussed in this paper presumably do
not represent the entirety of ways to illegitimately retrieve
sensitive user-data, we believe that the attack components
discussed by us are of great importance to other attack vec-
769tors. Therefore, a detailed analysis and further elaborated
investigation pertaining to possible defense mechanisms will
likely yield more attack vectors. We hope that this paper
spurs research on attacks against web applications that are
not based on the execution of JavaScript code.
As another contribution, we introduced a browser patch
that enables a website to determine if it is being loaded in
a detached view or pop-up window, showcasing mitigation
technique for several kinds of attacks. Within our future
work, we will examine more ways for dealing with and pre-
venting scriptless attacks.
Acknowledgments
This work has been supported by the German Federal Min-
istry of Education and Research (BMBF grant 01BY1205A
JSAgents).
7. REFERENCES
[1] M. Balduzzi, C. Gimenez, D. Balzarotti, and E. Kirda.
Automated Discovery of Parameter Pollution
Vulnerabilities in Web Applications. In Network and
Distributed System Security Symposium (NDSS), 2011.
[2] D. Baron. :visited support allows queries into global
history. https://bugzilla.mozilla.org/147777,
2002.
[3] A. Barth, C. Jackson, and J. C. Mitchell. Robust
Defenses for Cross-Site Request Forgery. In ACM
Conference on Computer and Communications
Security (CCS), 2008.
[4] D. Bates, A. Barth, and C. Jackson. Regular
expressions considered harmful in client-side xss ﬁlters.
In Proceedings of the 19th international conference on
World wide web, pages 91–100. ACM, 2010.
[5] P. Bisht, T. Hinrichs, N. Skrupsky, R. Bobrowicz, and
V. Venkatakrishnan. NoTamper: Automatic Blackbox
De- tection of Parameter Tampering Opportunities in
Web Applications. In ACM Conference on Computer
and Communications Security (CCS), 2010.
[6] P. Bisht and V. Venkatakrishnan. XSS-GUARD:
Precise Dynamic Prevention of Cross-Site Scripting
Attacks. In Detection of Intrusions and Malware, and
Vulnerability Assessment (DIMVA). Springer, 2008.
[7] A. Bortz and D. Boneh. Exposing Private Information
by Timing Web Applications. In 16th International
Conference on World Wide Web (WWW), 2007.
[8] B. Bos, T. ¸Celik, I. Hickson, and H. Wium Lie.
Generated content, automatic numbering, and lists.
http://www.w3.org/TR/CSS21/generate.html, June
2011.
[9] Z. Braniecki. CSS allows to check history via :visited.
https://bugzilla.mozilla.org/224954, 2003.
[10] D. Brumley and D. Boneh. Remote Timing Attacks
are Practical. In USENIX Security Symposium, 2003.
[11] CERT Coordination Center. Advisory CA-2000-02
Malicious HTML Tags Embedded in Client Web
Requests.
http://www.cert.org/advisories/CA-2000-02.html,
2000.
[12] S. Chen, R. Wang, X. Wang, and K. Zhang.
Side-Channel Leaks in Web Applications: A Reality
Today, a Challenge Tomorrow. In IEEE Symposium
on Security and Privacy, 2010.
[13] C. Curtsinger, B. Livshits, B. Zorn, and C. Seifert.
Zozzle: Fast and precise in-browser javascript malware
detection. In USENIX Security Symposium, 2011.
[14] J. Daggett. CSS fonts module level 3.
http://www.w3.org/TR/css3-fonts/, Oct. 2011.
[15] E. W. Felten and M. A. Schneider. Timing Attacks on
Web Privacy. In ACM Conference on Computer and
Communications Security (CCS), 2000.
[16] M. Heiderich. Content exﬁltration using scrollbar
detection and media queries.
http://html5sec.org/scrollbar/test, June 2012.
[17] M. Heiderich. Measurement-based content exﬁltration
using smart scrollbars.
http://html5sec.org/webkit/test, June 2012.
[18] M. Heiderich. Scriptless SVG Keylogger.
http://html5sec.org/keylogger, June 2012.
[19] M. Heiderich, T. Frosch, and T. Holz. IceShield:
Detection and Mitigation of Malicious Websites with a
Frozen DOM. In Recent Advances in Intrusion
Detection (RAID), 2011.
[20] M. Heiderich, T. Frosch, M. Jensen, and T. Holz.
Crouching Tiger – Hidden Payload: Security Risks of
Scalable Vectors Graphics. In ACM Conference on
Computer and Communications Security (CCS), 2011.
[21] D. Huang and C. Jackson. Clickjacking Attacks
Unresolved.
https://docs.google.com/document/\\pub?id=
1hVcxPeCidZrM5acFH9ZoTYzg1D0VjkG3BDW_oUdn5qc,
June 2011.
[22] C. Jackson, A. Bortz, D. Boneh, and J. C. Mitchell.
Protecting Browser State From Web Privacy Attacks.
In 15th International Conference on World Wide Web
(WWW), 2006.
[23] D. Jackson, D. Hyatt, C. Marrin, S. Galineau, and
L. D. Baron. CSS animations.
http://dev.w3.org/csswg/css3-animations/, Mar.
2012.
[24] A. Janc and L. Olejnik. Web Browser History
Detection as a Real-World Privacy Threat. In
European Symposium on Research in Computer
Security (ESORICS), 2010.
[25] D. Jang, R. Jhala, S. Lerner, and H. Shacham. An
Empirical Study of Privacy-violating Information
Flows in JavaScript Web Applications. In ACM
Conference on Computer and Communications
Security (CCS), 2010.
[26] T. Jim, N. Swamy, and M. Hicks. Defeating Script
Injection Attacks with Browser-enforced Embedded
Policies. In 16th International Conference on World
Wide Web (WWW). ACM, 2007.
[27] M. Johns. Code Injection Vulnerabilities in Web
Applications – Exempliﬁed at Cross-Site Scripting.
PhD thesis, University of Passau, Passau, July 2009.
[28] M. Johns, B. Engelmann, and J. Posegga. XSSDS:
Server-side Detection of Cross-site Scripting Attacks.
In Annual Computer Security Applications Conference
(ACSAC), 2008.
[29] A. Kieyzun, P. Guo, K. Jayaraman, and M. Ernst.
Automatic Creation of SQL Injection and Cross-site
Scripting Attacks. In 31st International Conference on
Software Engineering. IEEE Computer Society, 2009.
770[30] E. Kirda, C. Kruegel, G. Vigna, and N. Jovanovic.
[42] D. X. Song, D. Wagner, and X. Tian. Timing Analysis
Noxes: A Client-side Solution for Mitigating Cross-site
Scripting Attacks. In ACM Symposium on Applied
Computing (SAC), 2006.
[31] M. Louw and V. Venkatakrishnan. Blueprint: Robust
prevention of cross-site scripting attacks for existing
browsers. In IEEE Symposium on Security and
Privacy, 2009.
[32] M. Jakobsson and S. Stamm. Invasive Browser Sniﬃng
and Countermeasures. In 15th International
Conference on World Wide Web (WWW), 2006.
[33] G. Maone. NoScript :: Firefox add-ons. https:
//addons.mozilla.org/de/firefox/addon/722/, July
2010.
[34] M. Martin and M. Lam. Automatic Generation of XSS
and SQL Injection Attacks With Goal-directed Model
Checking. In USENIX Security Symposium, 2008.
[35] Y. Nadji, P. Saxena, and D. Song. Document
Structure Integrity: A Robust Basis for Cross-site
Scripting Defense. In Network and Distributed System
Security Symposium (NDSS), 2009.
[36] OWASP. Top Ten Project.
https://www.owasp.org/index.php/Category:
OWASP\_Top\_Ten\_Project, Jan. 2012.
[37] T. Pietraszek and C. Berghe. Defending Against
Injection Attacks Through Context-sensitive String
Evaluation. In Recent Advances in Intrusion Detection
(RAID), 2006.
[38] T. Ristenpart, E. Tromer, H. Shacham, and S. Savage.
Hey, you, get oﬀ of my cloud: exploring information
leakage in third-party compute clouds. In ACM
Conference on Computer and Communications
Security (CCS), 2009.
[39] J. Ruderman. CSS on a:visited can load an image
and/or reveal if visitor been to a site.
https://bugzilla.mozilla.org/57351, 2000.
[40] G. Rydstedt, E. Bursztein, D. Boneh, and C. Jackson.
Busting Frame Busting: a Study of Clickjacking
Vulnerabilities on Popular Sites. In Web 2.0 Security
and Privacy (W2SP) Workshop, July 2010.
[41] P. Saxena, D. Molnar, and B. Livshits. Scriptgard:
Preventing script injection attacks in legacy web
applications with automatic sanitization. Technical
report, Technical Report MSR-TR-2010-128,
Microsoft Research, 2010.
of Keystrokes and Timing Attacks on SSH. In
USENIX Security Symposium, 2001.
[43] S. Stamm, B. Sterne, and G. Markham. Reining in the
Web with Content Security Policy. In 19th
International Conference on World Wide Web
(WWW), 2010.
[44] M. Van Gundy and H. Chen. Noncespaces: Using
Randomization to Enforce Information Flow Tracking
and Thwart Cross-site Scripting Attacks. In Network
and Distributed System Security Symposium (NDSS),
2009.
[45] E. Vela. CSS Attribute Reader Proof Of Concept.
http://eaea.sirdarckcat.net/cssar/v2/, Nov.
2009.
[46] P. Vogt, F. Nentwich, N. Jovanovic, E. Kirda,
C. Kruegel, and G. Vigna. Cross site scripting
prevention with dynamic data tainting and static
analysis. In Network and Distributed System Security
Symposium (NDSS), 2007.
[47] Z. Weinberg, E. Y. Chen, P. R. Jayaraman, and
C. Jackson. I Still Know What You Visited Last
Summer: Leaking Browsing History via User
Interaction and Side Channel Attacks. In IEEE
Symposium on Security and Privacy, 2011.
[48] J. Weinberger, P. Saxena, D. Akhawe, M. Finifter,
R. Shin, and D. Song. A Systematic Analysis of XSS
Sanitization in Web Application Frameworks. In
European Symposium on Research in Computer
Security (ESORICS), 2011.
[49] H. Wium Lie, T. ¸Celik, D. Glazman, and A. van
Kesteren. Media queries.
http://www.w3.org/TR/css3-mediaqueries/, July
2010.
[50] G. Wondracek, T. Holz, E. Kirda, and C. Kruegel. A
Practical Attack to De-anonymize Social Network
Users. In IEEE Symposium on Security and Privacy,
2010.
[51] P. Wurzinger, C. Platzer, C. Ludl, E. Kirda, and
C. Kruegel. SWAP: Mitigating XSS Attacks Using a
Reverse Proxy. In ICSE Workshop on Software
Engineering for Secure Systems. IEEE Computer
Society, 2009.
[52] M. Zalewski. Postcards from the post-XSS world.
http://lcamtuf.coredump.cx/postxss/, 2011.
771