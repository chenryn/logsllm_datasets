2000000
1500000
1000000
500000
0
364000
366000
368000
370000
Block
372000
374000
376000
Fig. 1. Number of occurrences of the most prominent duplicate r value over time.
Inspecting the other duplicate r values a bit more closely reveals further
interesting cases. The second most used r value also has 16 leading 0 bits, which
is also an indication that the corresponding nonce was not chosen randomly. The
fourth most used r value corresponds to the nonce k = 1, which is an indication
of either a broken random number generator or a hand-crafted transaction where
the nonce was not randomized and the creator simply took the x-coordinate of
G. Another r value we found was using the nonce k = 12345678, which is also
an indication of an ad-hoc generated transaction using a ﬁxed nonce rather
than a secure random one. Similarly, we found two other r values where the
corresponding nonces where suspiciously small, i.e., in one case the nonce was
k = 0x80001fff and in another case the nonce also had 74 leading 0 bits. In
i=0 16i, i.e., 0x0101...01 in hexadecimal
another case the nonce was k =
notation, which looks like a pattern that a human would produce.
(cid:2)
32
4.5 Measuring the Impact of Weak Nonces
We will now assess how much damage an attacker could have caused by using
the previously described methodology for leaking keys and nonces. To do this,
we put ourselves in the position of an attacker who monitors the transactions of
the blockchain. That is, we use our copy of the blockchain to create an ordered
sequence of signatures [(Δ1, h1, r1, s1, pk1), . . . , (Δn, hn, rn, sn, pkn)] where Δi is
Identifying Key Leakage of Bitcoin Users
635
a block number such that Δi ≤ Δj for i ≤ j and the remaining elements are the
components of a signature found in a transaction of block Δi. We then process
these entries in order as follows. We add each signature si = k−1(hi + ri) for
a public key pki in block Δi to a database, which allows us to quickly identify
duplicate r values as well as their signatures. Each identiﬁed duplicate r value ri
is then added to the graph G along with the used public key pki. However, before
adding these 2 nodes to the graph, we make a few checks. First, we check if we
have leaked both ki and ski, in which case we can completely disregard both, as
adding them will not lead to new leaks. Second, we check if G already contains
the edge {ri, pki}, in which case we can leak both ki and ski. Third, we check if
we have already leaked either ki or ski, in which case we can then leak ski or ki,
respectively. In the last two cases, we can also leak the secrets corresponding to
all the nodes reachable from both ri and pki as discussed previously. Only if none
of these three conditions apply, we add the edge {ri, pki} to G. After processing
all signatures of a block, we look for cycles in G to identify solvable systems of
linear equations in order to leak secrets as outlined previously. Whenever we ﬁnd
a new leak, we make sure that we remove the corresponding signatures from the
database and that we remove the corresponding nodes and their edges from G,
as we will otherwise redundantly reconsider the same r values and cycles.
500
400
300
200
100
C
T
B
e
l
b
a
l
a
e
t
s
f
o
r
e
b
m
u
N
800
600
.
s
r
d
d
a
.
n
400
l
u
v
f
o
200
r
e
b
m
u
N
Fig. 2. Number of stealable Bitcoins + number of vulnerable Bitcoin addresses
attributed to ECDSA nonce reuse over time.
Using this methodology, we managed to leak 892 out of the 1,550 possible
nonces (57.55%) and 2,537 out of the 4,433 secret keys that were used in conjunc-
tion with these nonces (57.23%). In total, this gives us theoretical control over
the balances of 5,074 addresses, i.e., two addresses per key. During this whole
operation we identiﬁed 23 cycles in the graph and the longest cycle consisted of
12 nodes, which represents a system of 12 linear equations and 12 unknowns (6
nonces + 6 secret keys). The ﬁnal shape of G did not contain any more cycles,
which means that we have leaked the maximum number of secrets.
Figure 2 depicts the number of Bitcoins that an attacker could have stolen
at any point in time, i.e., the block height, as well as the number of vulnerable
addresses at each moment in time. We consider an address at a certain block
636
M. Brengel and C. Rossow
vulnerable if we have leaked the key of the address and if it held a balance at
that block. There are a few notable spikes for both the number of stealable Bit-
coins as well as the number of vulnerable addresses. The ﬁrst signiﬁcant spike
occurs roughly between block 221,000 and block 227,000, where the peak steal-
able balance is 533.82 BTC. Interestingly, there was only one vulnerable address
during this spike. The next spike occurs roughly between block 296,000 and block
298,000 with a peak stealable balance of 20 BTC, which was stealable for a times-
pan of 3 blocks from block 297283 until block 297285. From block 297,261 up to
block 297,304 there were 90 vulnerable addresses, which is also the maximum
number of vulnerable addresses of the spike. The next spike is slightly shorter
and happens at around block 333,300 and lasts roughly until block 333,600.
During this timespan, an attacker could have stolen up to 266.73 BTC at block
333,387 and there were 290 peak vulnerable addresses at block 333,393. This is
followed by two similarly long-lasting spikes between blocks 365,000 and 366,000
and blocks 374,000 and 375,000. In the former case, 11.21 BTC was stealable and
there were 131 vulnerable addresses at some point, and in the latter case 15.41
BTC was stealable and there were 769 vulnerable addresses from block 374,386
to 374,386. This is also the largest number of addresses that were vulnerable at a
time over the whole timespan. Finally, while the number of vulnerable addresses
suddenly jumps to 289 at block 475,963, there are only 0.0064 BTC stealable at
the peak. At the current state of our copy of the blockchain, there are 5 vulner-
able addresses holding an accumulated balance of 4002 satoshis, i.e., 0.00004002
BTC, which is unlikely to be stolen given current transaction fees.
C
T
B
e
l
b
a
l
a
e
t
S
410
400
390
380
370
360
0.0
0.2
0.4
0.6
Balance threshold 
0.8
1.0
Fig. 3. Number of Bitcoins an attacker could have stolen based on a balance threshold.
To assess how much an attacker could have stolen over time, we consider
two scenarios. First, we assume an attacker which steals the peak balance of
each address over time. That is, we take the sum of the peak balances of each
address, which gives a total of 1021.58 BTC. Here, we implicitly assume that
the owner notices the fraud and therefore we ignore all future funds. However,
this attack model requires an attacker to know the peak balance in advance,
Identifying Key Leakage of Bitcoin Users
637
which is unrealistic. Therefore, we consider a second more realistic attacking
scenario in which an attacker deﬁnes a balance threshold . In this setting, an
attacker only steals a balance if it is equal to or larger than  and we assume
again that we can only steal once from an address. Figure 3 plots the number of
Bitcoins that an attacker could have stolen in this scenario depending on . We
let  range between 0 and 1 BTC with 0.001 increments. The optimal balance
threshold according to the plotted function is  = 0.125, which an attacker could
have used to steal 412.80 BTC. Note that even though one address alone had a
balance of 533.82 BTC at some point, it does not mean that an attacker in this
setting can steal it completely. This is because we assume that we can steal only
once from an address once its balance surpasses the balance threshold , after
which we conservatively assume that the owner of the address becomes aware of
the problem. While this means that choosing a large  such as  = 500 BTC would
yield a larger proﬁt for the attacker, we believe that it is not an optimal choice.
Given the current value of Bitcoin, we believe that it is unrealistic for a single
individual to hold such a large balance. Additionally, if we assume that there are
multiple competing attackers, then we also have to take this into consideration
when choosing . We therefore let  range between 0 and 1 BTC as we believe
that this is a good compromise between what is currently practical and what is
optimal in theory. After said optimum, the number of BTC starts to decrease
steeply, and for  = 1, there are 359.04 stealable Bitcoins, i.e., 13.02% less than
in the optimal case. Similar to our previous OSINT analysis in Sect. 3.2, we also
ignored transaction fees here due to their negligible impact. Additionally, we also
did not consider blocking transactions in this case, as an attacker monitoring
transactions can create stealing transactions as soon as possible.
4.6 Identifying Past Attacks
Given that the phenomenon of ECDSA nonce reuse is a known problem, we now
try to assess if it has been used by attackers in the past to steal Bitcoins. To do
this, we tried to identify for each of the 7 spikes in Fig. 2 the moment in time
when the number of stealable Bitcoins suddenly dropped. Then we tried to ﬁnd
transactions, which were created during that time and whose outputs referenced
inputs of many vulnerable addresses. In the case of the ﬁrst spike, it is hard
to argue whether it was used by an attacker as only 1 address was vulnerable
in this timespan. However, we identiﬁed several cases where the balance of the
address suddenly dropped by over 99.99%, which one could argue is an incident
where Bitcoins have been stolen. In the second, third, sixth and seventh spike
we found cases where the number of stealable Bitcoins decreased suddenly and
we identiﬁed in all cases a single transactions referencing all the responsible
vulnerable addresses, which makes us believe that Bitcoins were stolen. In the
case of the last spike, however, only 0.00064 BTC were stolen.
Regarding the fourth and ﬁfth spike, we did not observe a similar suspi-
cious drop regarding the number of Bitcoins, but only regarding the number
of vulnerable addresses. To see the diﬀerence, consider Fig. 4, which shows and
compares a zoomed in view of the second and the ﬁfth spike. In the former, we
638
M. Brengel and C. Rossow
C
T
B
e
l
b
a
l
a
e
t
s
f
o
r
e
b
m
u
N
60
50
40
30
20
10
0
16
14
12
10
8
6
4
2
0
20
.
s
r
d
d
a
15
.
l
n
u
v
10
f
o
r
e
b
m
u
N
5
0
80