# SMC自解码总结
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 0.说明
编译语言：c、x86汇编
编译器：vs2019
## 1.SMC自解码简介
###  a.原理
> SMC：Self Modifying Code
即 **自修改代码**
，简而言之就是程序中的部分代码在运行前是被加密成一段数据，不可反编译，通过程序运行后执行相关解码代功能，对加密的代码数据进行解密，让其恢复正常功能!
PS:代码二进制文件中就是字节码。本身就是一段二进制数据。
下面是伪代码演示一种SMC的典型应用：
    proc main:
    ............
    IF .运行条件满足
      CALL DecryptProc （Address of MyProc）;对某个函数代码解密
      ........
      CALL MyProc                           ;调用这个函数
      ........
      CALL EncryptProc （Address of MyProc）;再对代码进行加密，防止程序被Dump
    ......
    end main
###  b.一般实现方法
自修改代码，提前手动将要修改的代码部分替换为加密数据，运行自己的函数对修改部分进行解码。
  1. 有两个函数，一个函数加密，一个函数解密，两者对应。
  2. 找到要进行SMC的代码地址，然后事先在程序开始的地方设置：对该地址数据的解密函数。
  3. 取出要进行SMC的代码的字节码，对其进行加密操作得到一串加密数据。
  4. 用这串加密数据替换原代码的字节码。
通过这种方式，对核心代码进行SMC加密。
程序在被静态反编译的时候，核心代码就是一串数据无法反编译。程序在运行的时候又能成功将这段核心代码复原。
保护程序，同时亦可以将一些特征代码变形隐藏。
> 写在前面：在自己实现SMC时，一定注意SMC加解密代码所属的节区是否有可写权限！！！！
## 2.五种实现SMC的形式
SMC简单来说包括：加解密、寻找解码地址。
加解密的话，可以任意设置。重点在于如何 **程序自己** 如何找到要进行解码的地址。
下面便是四种寻址方式
###  ①.给定的固定地址->函数体
这是最简单的SMC加密方式，
一般是先写好解密代码，通过调试得到要解密的代码首地址RVA，在通过函数中的`ret`指令，计算函数代码块的大小，然后将函数首地址RVA给到解密代码，根据代码块大小进行加解密。
然后保存程序，再找到该函数在二进制文件中的地址FOA，对其字节码进行加密，然后替换掉。
> 注意代码段节区属性，是否可写？
###  ②.取出函数的字节码放入数组->函数体
与①中所述类似，是通过调试，将要进行SMC加密的代码对应的字节码字节码给取出来，加密后放到数组里。然后程序事先执行解密代码，对该数组进行解密，再通过
**函数指针** 调用这部分代码。
###  ③.添加代码段节区—>代码段
该部分需要了解 **PE结构** 中 **节表**
的知识:[PE头结构说明及C语言解析](https://blog.csdn.net/qq_35289660/article/details/106058233)
预编译指令#pragma为程序添加一个代码段节区，用于存放函数。
    #pragma code_seg(".scode")//告诉编译器为程序生成一个名为“.scode”的代码段节区。节区名不可超过8字节！
    //添加的函数
    void __declspec(naked)__cdecl Func(  )//我这里声明一个裸函数，自己开辟堆栈和释放堆栈，避开检测堆栈的函数，防止函数地址重定位的影响
    {//55 8b ec 83函数开始的字节码
        __asm
        {
            push ebp
            mov ebp,esp
            sub esp,0x40
            push ebx
            push esi
            push edi
            mov eax,0xCCCCCCCC
            mov ecx,0x10
            lea edi,dword ptr ds:[ebp-0x40]
            rep stos dword ptr es:[edi]
        }
        //功能代码处
        __asm
        {
            pop edi
            pop esi
            pop ebx
            mov esp,ebp
            pop ebp
            ret
        }
    }
    #pragma code_seg()//告诉编译器此处是新代码段的结束位置。
    #pragma comment(linker,"/SECTION:.scode,ERW")//告诉链接程序最终在生成代码时添加这个名为“.scode”的代码段，段属性为“ERW”，分别表示可执行、可读和可写。
编译成功后通过PE查看器可发现多了一个名为`.code`的节区，节区属性为0xE0000020，也就是0x00000020（代码段）、0x10000000（可执行）、0x40000000（可读）和0x80000000（可写）四个属性的组合。
那么我们就可以编写解密函数：通过API:[GetModuleHandle](https://docs.microsoft.com/en-us/windows/win32/api/libloaderapi/nf-libloaderapi-getmodulehandlea)获得自己进程的句柄
    HMODULE GetModuleHandleA(
      LPCSTR lpModuleName
    );//如果此参数为NULL，则 GetModuleHandle返回用于创建调用进程的文件（.exe文件）的句柄，即自身exe模块在内存中的句柄。
当参数为NULL时，返回的自己进程的句柄，值是一个地址，改地址指必定向`MZ`标志，即PE结构开头。
然后即可遍历自己的PE结构，找到节区名为`.code`的节表，表中的 **VirtualAddress**
即为该节区的RVA，即可找到SMC加密代码的地址，然后直接根据表中的 **SizeOfRawData** 对整个节区进行解密操作得到真实代码。
    void decode()//0x009AD000
    {//55 8b ec 83
        LPVOID pModule = GetModuleHandle(NULL);//获得自己进程的句柄
        PIMAGE_DOS_HEADER pDosHeader = (PIMAGE_DOS_HEADER)pModule;
        PIMAGE_NT_HEADERS32 pNtHeader = (PIMAGE_NT_HEADERS32)((DWORD)pDosHeader + pDosHeader->e_lfanew);
        PIMAGE_FILE_HEADER pFileHeader = (PIMAGE_FILE_HEADER)((DWORD)pNtHeader + 4);
        PIMAGE_OPTIONAL_HEADER pOptionalHeader = (PIMAGE_OPTIONAL_HEADER)((DWORD)pNtHeader + IMAGE_SIZEOF_FILE_HEADER + 4);
        PIMAGE_SECTION_HEADER pSectionHeader = (PIMAGE_SECTION_HEADER)((DWORD)pOptionalHeader + pFileHeader->SizeOfOptionalHeader);
           //遍历节表头找到名为“.scode”的节表地址
        while (strcmp((char*)pSectionHeader->Name, ".scode"))
            pSectionHeader = (PIMAGE_SECTION_HEADER)((DWORD)pSectionHeader + IMAGE_SIZEOF_SECTION_HEADER);
        PBYTE pSection = (PBYTE)((DWORD)pModule + pSectionHeader->VirtualAddress);//该节区的VA
        //下面这个是我个人的加解密操作，因为异或具有对称性，所以加密解密都可以这段代码。可以按照需求自行加解密。
        for (DWORD i = 0; i SizeOfRawData; i++)
            *(pSection + i) = *(pSection + i) ^ key[i % 4];
        //初始加密的时候，通过以下代码，将加密后的节区数据保存到文件中，方便我替换^.^hhhhhh
        FILE* pFile = NULL;
        char FileName[] = "./Data";
        pFile = fopen(FileName, "wb");
        if (!pFile)
        {
            printf("file creation failed!\n");
            return;
        }
        fwrite(pSection, pSectionHeader->SizeOfRawData, 1, pFile);
        fclose(pFile);
    }
只需将解密函数放在调用SMC加密函数之前的位置。
最后记得在程序生成之后对“.scode”代码段预先加密
反编译出来的SMC解密代码，是真的难看！。。。。。
这种方法由于会在pe结构中单独生成一个代码段节区，点儿“此地无银三百两”，会让破解者尤其“照顾”。
###  ④.函数名存放函数地址->函数体
> c/c++中函数名就是函数地址，
针对这一特性，我们直接可以直接可以根据函数名当做指针获取函数对应的字节码进行加解密。
而要加解密的函数的大小，一般用这两种方式：
调试程序，手动计算函数中ret指令据起始指令的偏移，即为函数代码块大小。
    #例如下面这段函数代码块的大小
    void Func()
    5: {
    00D33C20 55                   push        ebp  
    00D33C21 8B EC                mov         ebp,esp  
    00D33C23 81 EC C0 00 00 00    sub         esp,0C0h  
    00D33C29 53                   push        ebx  
    00D33C2A 56                   push        esi  
    00D33C2B 57                   push        edi  
    00D33C2C 8D BD 40 FF FF FF    lea         edi,[ebp-0C0h]  
    00D33C32 B9 30 00 00 00       mov         ecx,30h  
    00D33C37 B8 CC CC CC CC       mov         eax,0CCCCCCCCh  
    00D33C3C F3 AB                rep stos    dword ptr es:[edi]  