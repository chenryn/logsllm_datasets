显示了排序缓存区地址周围的堆可视化(红线).你可以看到排序缓存区被大小相近的分配所包围,这些分配都与hash表对应.你也可以观测到LFH随机性,因为随后分配的不一定在随后的地址上,然而这对我们的利用没有任何影响
Image 5: Heap visualization around the overflow buffer
正如前面提到的,我们以这样一种方式制作了我们的溢出:一个不幸的JScript对象的hash表指针将会被指向我们控制的数据指针覆盖.现在我们把这些数据放在什么地方:我们制作了一个包含5个(假)JavaScript变量的方法:
  1. 变量1 只包含数字1337.
  2. 变量2 是特殊类型的0x400c.这个类型基本上告诉Javascript,实际的VAR是有偏移量为8的指针指向的,在读取或写入这个变量之前,这个指针应该被解引用.在我们的例子中,这个指针指向变量1之前的16个字节,这基本上意味着变量2的最后8字节的qword和变量1的第一个8字节的qword重叠
  3. 变量3, 变量4和变量5是简单的整数.它们的特殊之处在于它们分别在最后8字节包含数字5,8,0x400c.
Image6显示了溢出之后被破坏的对象状态
Image 6: State of objects after the overflow. Red areas indicate where the
overflow occurred. Each box in the bottom row (except those marked as ‘...’)
corresponds to 8 bytes. Data contained in ‘...’ boxes is omitted for clarity
我们可以访问变量1,
只需要访问正确引索处的已破坏对象(我们之前称为Index1),对于变量2-5也是如此.实际上,我们可以通过访问所有对象的Index1来检测哪个对象被破坏,并查看哪个对象有现在的特征值1337
重叠变量1,变量2的作用是可以将变量1的类型(第一个word)改为5(double),8(字符串),或0x400c(指针).我们通过读取变量2,3或4然后将读取的值写入变量2来实现.例如语句:
    corruptedobject [ index 2] = corruptedobject [ index 4];
具有将变量1的类型更改为字符串(8)的效果,而变量1的所有其他字段将保持不变
这种布局给了我们几个非常强大的开发原语:
  * 如果我们将一个包含指针的变量写入变量1,我们可以通过将变量1的类型改为double(5)并将其读取出来公开该指针的值
  * 我们可以通过在改地址上伪造一个字符串来在任意地址上公开(读取)内存.我们可以通过首先将与我们想要读取的地址对应double的值写入变量1,然后将变量1的类型更改为Stirng(8)来完成此操作
  * 首先将对应于地址的数值写入变量1,然后将变量1的类型更改为0x400c(指针),最后将一些数据写入变量1,从而写入任意地址.
有了这些利用源语,通常获得代码执行将非常简单,但由于我们正在利用win10,我们首先要绕过Control Flow Guard(CFG).
##### 4、 Stage 3: bypass CFG
我们可以使用一些已知的绕过方式，但是如果攻击者有读写的权限就可以针对jscript.dll进行方便绕过。我们想要达到以下的效果：
  1. 返回地址没有受CFG保护
  2. 一些Jscript对象已经指向原始的栈
特别地，每一个NameTbl
对象（在Jscript中，所有的JavaScript对象都从NameTbl继承），在偏移24的位置保存一个指向CSession对象的指针。CSession对象偏移80的位置保存着指向靠近原始栈顶的指针。
所以，如果可以任意读，通过任何Jscript对象的一连串指针，有可能获得指向原始栈的指针。如果可以任意写，就有可能绕过CFG来覆盖返回地址。
##### 5、Stage 4: Getting code execution as Local Service
准备好所有攻击的条件，我们现在可以实现代码执行。具体步骤如下：
  1. 从任一JScript对象的虚表中读取jscript.dll的地址
  2. 通过读取jscript.dll的导入表获取kernel32.dll的地址
  3. 通过读取kernel32.dll的导入表获取kernelbase.dll的地址
  4. 从kernel32.dll中搜索我们需要的rop gadget
  5. 从kernel32.dll的导出表中获取WinExec函数的地址
  6. 根据上文的描述泄露栈地址
  7. 准备好ROP链并写入栈中，从最接近泄露的栈地址的一个返回地址开始执行rop
我们需要的rop链大致如下：
    [ address of RET ] // needed to align the stack to 16 bytes
    [ address of POP RCX ; RET ] // loads the first parameter into rcx
    [ address of command to execute ]
    [ address of POP RDX ; RET ] // loads the second parameter into rdx
    1
    [ address of WinExec ]
通过执行rop链我们可以调用WinExec函数调用指定的命令。例如：如果我们运行‘cmd’命令，将产生一个命令提示符，和WPAD服务运行用户相同的权限。
不幸的是，在子进程起的本地服务无法连接网络，但是我们可以将提权代码从内存落地到可写可执行的本地磁盘中。
6、Stage 5: Privilege escalation
当本地服务用户是一个service用户时，并没有管理员权限。这意味着exploit在进行系统的访问和修改操作时有很大的局限性，特别是攻击过后或者系统重启后的持久化。但是Windows上总是有可能找到未修补的提权漏洞，所以我们不需要找一个新的提权漏洞。我们可以滥用一个built-in功能实现从本地服务权限到SYSTEM权限。下图是WPAD中service用户被赋予的权限：
Image 7: Service Access Token’s Privileges showing Impersonate Privilege
我们只能得到以上三个权限，但是图中高亮的SeImpersonatePrivilege很重要。该权限允许此服务获得本地系统其他用户的权限。Impersonate权限表明该服务接受本地系统其他用户的请求，可能要代表这些用户执行一些操作。然而只要我们获得这些用户的访问令牌，就可以获得这些用户的全部权限，包括SYSTEM用户，这使得我们在本地系统上拥有了管理员权限。
滥用Impersonate权限是Windows安全模式（你可以通过查找[Token
Kidnapping](https://dl.packetstormsecurity.net/papers/presentations/TokenKidnapping.pdf)获取更多细节）下一个已知的问题。微软已经尝试让它更难获得其他用户的访问令牌，但是不可能避免所有可能的情况。例如，James发现了一个Windows
DCOM实现的一个[漏洞](https://bugs.chromium.org/p/project-zero/issues/detail?id=325)。该漏洞允许任意用户获得SYSTEM用户访问令牌。微软修复直接提权的漏洞，但是没有或者很难修复token
kidnapping问题。我们可以滥用这个功能来获取SYSTEM权限，然后完全控制该系统，比如安装一个提权服务。
这里有一个通过DCOM实现的token
kidnapping([RottenPotato](https://foxglovesecurity.com/2016/09/26/rotten-potato-privilege-escalation-from-service-accounts-to-system/))，但是这个实现是被设计用于Metasploit框架中
[getsystem](https://github.com/rapid7/metasploit-framework/blob/master/modules/post/windows/escalate/getsystem.rb)
命令的，我们无法使用。所以我们用C++实现了更简易的版本，通过
[CreateProcessWithToken](https://msdn.microsoft.com/en-us/library/windows/desktop/ms682434\(v=vs.85\).aspx) API直接产生带有SYSTEM
令牌的随机进程。我们将它编译成11KB大小的可执行程序，比RottenPotato小的多，方便落地到本地，执行rop链。
##### 7、Tying it all together
当WPAD服务请求PAC文件时，我们将运行恶意文件来攻击WPAD服务，运行WinExec来落地和运行提权程序。该程序会在SYSTEM权限下执行命令（我们例子中是‘cmd’的硬编码）。
该exploit在我们的实验环境中运行得十分稳定，但是100%的稳定性并不需要，因为如果该exploit使WPAD服务崩溃了，一旦用户发起另一个WPAD服务请求，就会产生新的进程，所以攻击者可以一直尝试。如果用户没有关闭Window
错误报告，将不会有图形化的页面显示WPAD服务崩溃了。如果开启，将会捕捉到这个崩溃，然后报告给微软。
事实上，我们的exploit一旦运行它的payload就会使WPAD服务崩溃，所以如果我们在服务被攻击后继续保持恶意的PAC文件，将会再次攻击服务。你可以在图片7中看到该效果，在攻击服务后的几分钟里，在受害者机器上产生了大量的HTTP请求。
Image 8: Did we leave the exploit running for too long?
我们将很快在 [issue tracker](https://bugs.chromium.org/p/project-zero/issues/detail?id=1383) 上公布我们的exploit源码
#### 0x05 Conclusion
执行不信任的JavaScript
代码是危险的，在一个没有沙箱的进程里执行更是如此。即使是在像jscript.dll这样相对安全的JavaScript引擎中也是这样。我们披露了jscript.dll
7个安全问题，成功证明了可以从本地网络（或者之外）达到稳定地代码执行。即使是在Windows 10 64-bit with Fall Creators
Update版本的全补丁（撰写本文之前）也可以实现。
尽管现在bug已经被修复了，是否意味我们就可以完成任务，安枕无忧了？事实不然，尽管我们花了相当多的时间，精力和电力成本来发现jscript.dll漏洞，但是我们并没有表明我们找到了所有漏洞。事实上，发现了7个漏洞，就很有很可能发现第8个。所以一些事情不改变，早晚有一天我们很可能会在野外看到这些利用。（这还是乐观地假设攻击者没有这种能力。）
那么，微软能做什么来使未来像这类攻击变的艰难：
  1. 默认关闭WPAD，事实上，虽然其他的操作系统也支持WPAD，但是Windows是唯一默认开启的。
  2. 沙箱化在WPAD服务中的Jscript解释器。当解释器需要执行一个定义好输入输出的JavaScript函数时，应该直接沙箱化它。考虑到输入输出模型的简易性，如果微软推出一个类似于seccomp-strict，有限制性的沙箱：一些进程不需要高于“接收一些数据”、“执行一些计算”、“返回一些数据”的权限。
如果你想要自己解决这些问题，当前防止这类攻击（除了未知的漏洞）的唯一方法似乎就是完全关闭WinHttpAutoProxySvc服务。由于有其他服务依赖于WPAD，所以在Services
界面里有时不能关闭WinHttpAutoProxySvc服务（“Startup
type”可能变灰失效），但是可以通过修改相应的注册表项关闭：将`“HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\WinHttpAutoProxySvc”`中的`“Start”`值从3（手动）改成4（关闭）。
当搜索“disabling WPAD”时，在网上发现一些常见的建议在我们的实验中并不能防范攻击：
  1. 在控制面板关闭`“Automatically detect settings”`
  2. 设置`“WpadOverride”`注册表值
  3. 在`hosts`文件中写入“255.255.255.255 wpad”（这将会关闭DNS变量，但是不能关闭DHCP变量）
* * *