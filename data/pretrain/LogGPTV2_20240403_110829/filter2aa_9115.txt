# REQUIRED: PyCrypto 2.6.1
#     To install: pip install pycrypto
#     Homepage: https://www.dlitz.net/software/pycrypto/
import argparse
import SocketServer
import socket
import time
import sys
import json
import logging
from io import BytesIO
from base64 import b64encode, b64decode
from struct import pack, unpack
from Crypto.Cipher import AES
from Crypto import Random
from Crypto.Hash import SHA256
################################
# BEGIN SERVER SECRET DATA
serverKey = b64decode("zfAjjf1mNH3HStxAOR0Q+w==")
authDb = \
	[
		{ "user": "admin", "password": "BLTL-INCC-6GPM-N6S7", "groups": [ "admin" ] },
		{ "user": "guest", "password": "Z29S-L47Z-9R8N-D76J", "groups": [ "guests" ] }
	]
# END SERVER SECRET DATA
################################
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger()
def pad(data):
	result = data
	nPadBytes = AES.block_size - len(data) % AES.block_size
	for i in range(0, nPadBytes):
		result += chr(nPadBytes)
	return result
def unpad(data):
	if len(data) == 0:
		raise ValueError("Incorrect padding")
	padLength = ord(data[-1])
	if padLength == 0 or padLength > AES.block_size:
		raise ValueError("Incorrect padding")
	if padLength > len(data):
		raise ValueError("Incorrect padding")
	for i in range(-padLength, -2):
		if ord(data[i]) != padLength:
			raise ValueError("Incorrect padding")
	return data[0:-padLength]
def encrypt(plaintext, key):
	iv = Random.new().read(AES.block_size)
	cipher = AES.new(key, AES.MODE_CBC, iv)
	plaintextPadded = pad(plaintext)
	return iv + cipher.encrypt(plaintextPadded)
def decrypt(ciphertext, key):
	if len(ciphertext)  1  currentTime:
			logger.info("Challenge cookie is expired")
			self._sendMessage_AuthxFailure()
			return
		userRecord = None
		for element in authDb:
			if element["user"] == username:
				userRecord = element
				break
		if not userRecord:
			logger.info("User does not exist in database: %s", username)
			self._sendMessage_AuthxFailure()
			return
		correctResponse = SHA256.new(nonce + userRecord["password"]).digest()
		logger.debug("Correct response to challenge : %s", correctResponse.__repr__())
		logger.debug("Received response to challenge: %s", r.__repr__())
		if not stringEquals_dataIndependentTime(r, correctResponse):
			logger.info("Response to authentication challenge is not correct. User: %s", username)
			self._sendMessage_AuthxFailure()
			return
		ticketTimestamp = getCurrentTimestamp()
		identity = json.dumps( \
			{ "user" : userRecord["user"], "groups": userRecord["groups"] }, \
			ensure_ascii = False)
		ticket = b64encode(encrypt( \
						toNullTerminatedUtf8(identity) + \
						pack(" currentTime:
				return (None, "EXPIRED")
			username = identityFromTicket["user"]
			if not (isinstance(username, str) or isinstance(username, unicode)):
				raise Exception("Ticket is not well formed: username is not a string")
			groups = []
			for group in identityFromTicket["groups"]:
				if not (isinstance(group, str) or isinstance(group, unicode)):
					raise Exception("Ticket is not well formed: group name not a string")
				groups.append(group)
			identity = { "user": username, "groups": groups }
			return (identity, None)
		except:
			logger.info("Ticket is not well formed", exc_info=True)
			return (None, "INVALID")
	def _sendMessage_CommandResult(self, commandResult):
		self.wfile.write(
			"\x07" + \
			toNullTerminatedUtf8(commandResult))
		self.wfile.flush()
	def _readBytes(self, nBytes):
		result = self.rfile.read(nBytes)
		if len(result) != nBytes:
			raise Exception("Connection was closed")
		return result
class MyThreadingTCPServer(SocketServer.ThreadingTCPServer):
	def server_bind(self):
		self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
		self.socket.bind(self.server_address)
if __name__ == "__main__":
	parser = argparse.ArgumentParser()
	parser.add_argument("--serverBindAddress", required=False, default="127.0.0.1")
	parser.add_argument("port", type=int, nargs="?", default="8888")
	args = parser.parse_args()
	server = MyThreadingTCPServer((args.serverBindAddress, args.port), MyTCPHandler)
	try:
		logger.warn("Listing on interface '%s', port %d", args.serverBindAddress, args.port)
		server.serve_forever()
	except KeyboardInterrupt:
		pass
	logger.warn("")
	logger.warn("Shutting down...")
	server.shutdown()	
	logger.warn("Exiting")