.myExt
Toast Notifications
Toast notifications, also known as toasts, are messages that appear at the top of the screen (even when another
app is in the foreground), informing the user of an event. For example, messaging apps could send a toast when
someone initiates a conversation with the user.
Although applications are supposed to send only toasts that map to pages in their own app, Windows Phone 8
(not 8.1) allows code to send toast notifications that when tapped open XAML pages in other applications
installed on the device. This is possible by calling a native API named Shell_PostMessaageToast(), which is
exported by ShellChromeAPI.dll.
Toasts, therefore, potentially provide an entry point into XAML pages and therefore functionality that
developers most likely never intended to be callable by anyone but them and their own code.
We provide more information about toast notifications later in this chapter, in the “Interprocess
Communications Vulnerabilities” section, including how to send toasts to arbitrary apps and how they might
help you exploit bugs in badly coded pages.
Attacking Transport Security
A large number of Windows Phone applications provide much of their core functionality by communicating with
services on the Internet. The specifics of why varies from application to application; many apps carry out
networking communications to provide users with rich web-based interfaces, and some call into web-based APIs
that provide and facilitate the app’s functionality and purpose.
When assessing a mobile application’s security, taking a look at its network transport aspects is important for
two chief reasons: to gain insight into what is being sent to and received from network hosts, and to assess
whether sensitive traffic is being communicated back and forth with appropriate security measures applied. For
example, are logins and other authentications being done via SSL, or are they being done in the clear, via
standard HTTP?
This section explores how to assess the security of communications between an app and network hosts, as well
as how to intercept communications for the purpose of manipulating traffic going either way between the app
and a network host.
We also discuss how to identify implementation flaws that may be present even when HTTPS/SSL is used for
sensitive traffic, and how such flaws may undermine the security of associated network traffic.
Identifying and Capturing Cleartext HTTP Communications
Despite the implications of using a cleartext transport such as standard HTTP for sensitive data
communications, many mobile apps use plaintext HTTP for the majority or all of their traffic. It’s still not
uncommon at the time of writing this book for applications to perform authentication via cleartext HTTP, in the
mobile, desktop, and enterprise worlds.
On the code level, a Windows Phone 8.x app may use the HttpClient class to interact with a web API, for
example. In a C# application, a call to a hypothetical authentication service could be comprised of the following
code:
string url = "http://www.myapp.com/api/login";
var values = new List>
{
new KeyValuePair("username", myUsername),
new KeyValuePair("password", myPassword)
};
var httpClient = new HttpClient(new HttpClientHandler());
HttpResponseMessage response = await httpClient.PostAsync(new Uri(url), new
FormUrlEncodedContent(values));
response.EnsureSuccessStatusCode();
var responseString = await response.Content.ReadAsStringAsync();
This code performs a POST request with the username and password credentials as POST parameters.
Similarly, an app could be using WebClient, HttpWebRequest, or another API to make its requests.
The uri string object is set to http://www.myapp.com/api/login, which is clearly a URL that will result in a non-
SSL protected HTTP request being made. Given that the request is making an authentication call, such a coding
practice represents a serious security risk, which could ultimately allow a suitably positioned attacker to
eavesdrop on the credentials and the request in general.
Equally, a WebBrowser control may have been directed towards a non-HTTPS URL; that is:
myWebBrowser.Navigate(new Uri(
"http://www.google.co.uk", UriKind.Absolute));
This could also be done with a WebView control.
Given code or code recovered using C# reflection tools, such a security issue is trivial to spot, but the issue is
almost equally as easy to find exclusively by basic manual testing, when no form of source code is available.
You can configure Windows Phone 8.x to route all HTTP traffic through a proxy tool, such as Burp Suite,
Fiddler, or OWASP’s ZAP. This capability allows for all standard HTTP traffic to be analyzed in real time as an
app communicates with a remote web server.
To configure a Windows Phone 8.x device to push web traffic through a proxy, first configure your test laptop to
be on the same wireless network as your WP device, and run your HTTP proxy tool of your choice. Then go to
Settings WiFi and click the name of the wireless network to which the device is connected. The screen presented
will closely resemble the one in Figure 11.2.
Figure 11.2 The proxy settings disabled
To set a proxy server, switch the slider to right, and type the IP address (or hostname) of the system where
you’ve previously set up your proxy tool, and input the appropriate port number. (See Figure 11.3.)
Figure 11.3 Proxy settings configured
At this point, you can see all standard HTTP traffic traveling from the device in the proxy application, such as
Burp Suite capturing a request from a Samsung Ativ device to the Google search engine, as shown in Figure 11.4.
Figure 11.4 Burp Suite captures web traffic from a Windows Phone device
If you are using the WP8 or WP8.1 emulator instead of a device, proxy settings do not need to be configured in
the device; simply configure proxy settings via Internet Explorer, because the emulator honors the proxy
settings of the host system.
Now that cleartext HTTP traffic is being routed through an intercepting proxy, a tester can examine web traffic
being sent and received by the device. An app sending and receiving sensitive information, including login
credentials, financial information, medical information, or Personally Identifiable Information (PII), is
unacceptable, and constitutes a serious security threat.
Likewise, if traffic (which will be cleartext HTTP) can be intercepted in real-time in this way, a plaintext HTTP
session also represents an entry point into the application because suitably positioned attackers who are
performing a man-in-the-middle attack on an unsuspecting user could inject data of their choice into HTTP
responses and requests. Such attacks could include injection of arbitrary HTML and JavaScript into
WebBrowser interfaces.
Although traffic issued through the standard HTTP APIs (HttpClient) and WebBrowser controls honors the
device’s (or emulator’s) proxy settings, socket communications doesn’t, thus you must use other means to
actively capture traffic that is non-HTTP(s) in nature. More on this topic appears later in “Capturing Non-
HTTP/HTTPS Traffic.”
Identifying and Capturing HTTPS Communications
When proxying an application, you might find that no HTTP traffic is visible in your proxy tool, even though you
know the app makes web requests. In cases like these, the app is most likely using HTTPS (that is, SSL
protected) as opposed to standard HTTP, and as a result, the SSL certificate chain validation check fails,
resulting in no SSL session actually being negotiated. Such situations become apparent when no traffic shows in
the proxy, and often the app complains that something went wrong, or that Internet access was unavailable.
Applications that are correctly using HTTPS for their web requests and API calls may be using code such as the
following:
string url = "https://www.myapp.com/api/login";
var values = new List>
{
new KeyValuePair("username", myUsername),
new KeyValuePair("password", myPassword)
};
var httpClient = new HttpClient(new HttpClientHandler());
HttpResponseMessage response = await httpClient.PostAsync(new Uri(url),
new FormUrlEncodedContent(values));
response.EnsureSuccessStatusCode();
var responseString = await response.Content.ReadAsStringAsync();
Note the use of the https:// URL.
When HTTPS is being used, an appropriate root certification authority (CA) certificate must be installed on the
device so that the certificate presented by the proxy tool validates correctly. This enables you to intercept HTTPS
traffic as seamlessly as you were able to intercept standard HTTP traffic.
Assuming your proxy tool of choice is Burp Suite, you must first instruct Burp to generate a root CA certificate
for you by going to Proxy Options, and then clicking the CA certificate button. Choose Certificate in DER format,
and then follow the wizard’s workflow through to export a certificate. (See Figure 11.5.)
Figure 11.5 Exporting Burp Suite CA Certificate
At this point, change the .der file extension to having a .cer file extension.
To install Burp Suite’s root CA certificate, the certificate must first be somehow sent to the device. The easiest
way to do this is via an email attachment.
After it has been received on the device via the Mail application, simply click the .cer attachment. A screen
similar to the one in Figure 11.6 appears.
Figure 11.6 Installing the certificate onto the device
Tap Install to instruct the OS to accept the certificate into its root CA trust store. A screen displays indicating a
successful installation.
With the root CA certificate now installed on the device, the application will generally allow proxying through
your chosen proxy app, because the SSL validation process now completes successfully due to certificates being
presented by Burp validating against Burp’s root CA certificate.
This procedure also works for installing CA certificates on the emulator.
Capturing Non-HTTP/HTTPS Traffic
Although the majority of apps for Windows Phone that rely on using the network use HTTP for their
communications, you may occasionally come across one that uses Windows’ socket interfaces to talk to a
network endpoint; that is, System.Net.Sockets or Windows.Networking.Sockets.
Such an app may be using a roll-your-own style binary protocol, an already-documented (for example in an
RFC) one, or could simply be communicating simple ASCII strings to a network listener, and receiving data in
an equally simple format.
Whichever the case may be, the two general options for eavesdropping on non-HTTP traffic are active and
passive. Active interception allows you to modify incoming and outgoing traffic in real time, much like you’ve
done with HTTP/HTTPS traffic (for example, using Burp Suite as a proxy). Passive sniffing on the other hand
just allows you to observe traffic from a non-modifying perspective and carry out analysis on the packets you
see. Passive traffic sniffing can be done from a suitably placed system using tools such as Wireshark and
tcpdump and doesn’t require any kind of special setup.
If you want to actively intercept non-HTTP traffic in a similar way to that allowed by tools such as Burp Suite,
you’ll need to get inventive, because Windows Phone offers no standard way to use any kind of non-HTTP
proxy.
Intrepidus Group provides a tool named Mallory that is designed specifically for active capture and modification
of non-HTTP traffic. Several supported and documented ways exist to set up Mallory to carry out a man-in-the-
middle attack on non-HTTP communications going to and from a mobile app, one of which is to configure a
subject device to use a PPTP VPN.
However, because Windows Phone 8 does not support VPN connections, and Windows Phone 8.1 does not
support PPTP VPN servers, try setting up Mallory to function as part of a Wi-Fi hotspot, which you connect your
Windows Phone device to. Proper setup allows you to view and modify all interesting communications
(including non-HTTP) in Mallory. See the following guide, by the authors of Mallory, for a tutorial on how to get
started with setting up and using the Mallory tool for non-HTTP traffic interception and modification:
https://intrepidusgroup.com/insight/2010/12/mallory-and-me-setting-up-a-mobile-mallory-gateway/.
SSL Certificate Validation Flaws
When proxying an application, your HTTPS traffic may appear in your proxy app (Burp Suite) even though you
have not installed a root CA certificate for the proxy. This is indicative of a serious security flaw: SSL certificate
validation has been disabled, and the app has connected to your proxy host even though the certificate it
presented was not valid for the host the app was really trying to connect to.
This means that the app is skipping certificate chain validation and is therefore not verifying that the host it is
talking to (your proxy box) is genuinely the one it was expecting (i.e., some web API host). Such flaws can be
described as certificate validation flaws, and they allow for connections to be observed or tampered via man-in-
the-middle interception attacks by favorably positioned attackers.
Most SSL/HTTPS APIs allow the developer to disable certificate validation checks so that when negotiating an
SSL session, no certificate validation checks are actually carried out. Many coders enable this mode when
developing an app because many test environments are wired up to use self-signed or otherwise untrusted
certificates, which makes perfect sense while still in the development process. No SSL certificate validation
errors are thrown because of self-signed certs or otherwise, and the developers can do their job and get the app
developed and tested without issue.
However, having developers who forget to remove the code that disables certificate validation is common, and
many apps end up shipping with the vulnerable code.
Even worse, some apps end up shipping with non-validating SSL API call patterns simply because developers
copied and pasted the code from a site like Stack Overflow after they couldn’t figure out why their code wouldn’t
work in the (self-signed certificated) test environment.
In Windows Phone 8, no (documented) way exists to disable SSL certification validation in the HTTPS APIs.
In Windows Phone 8.1, however, you can instruct the Windows.Web.Http .HttpClient to ignore untrusted
certificates using the HttpBaseProtocolFilter class (see
http://blogs.msdn.com/b/wsdevsol/archive/2013/10/17/how-to-ignore-self-signed-certificate-errors-in-
windows-store-apps-8-1.aspx).
Apps using Windows.Web.Http.HttpClient that have SSL certificate validation disabled are likely to be using code
resembling the following:
HttpBaseProtocolFilter filter = new HttpBaseProtocolFilter();
filter.IgnorableServerCertificateErrors.Add(
ChainValidationResult.Untrusted);
filter.IgnorableServerCertificateErrors.Add(
ChainValidationResult.Expired);
var httpClient = new Windows.Web.Http.HttpClient(filter);
try
{
var uri = new Uri("https://www.myapp.com/...");
HttpResponseMessage response = await httpClient.GetAsync(uri);
}
In the preceding code, untrusted and expired certificates are set as trusted. Luckily, this is easy to spot in a code
review and when using manual testing, because traffic will pass through a proxy, whereas the SSL negotiation
process should fail if certificate checking occurred!
Apps may also add ignore settings for other certificate errors, such as:
filter.IgnorableServerCertificateErrors.Add(
ChainValidationResult.IncompleteChain);
filter.IgnorableServerCertificateErrors.Add(
ChainValidationResult.WrongUsage);
filter.IgnorableServerCertificateErrors.Add(
ChainValidationResult.InvalidName);
filter.IgnorableServerCertificateErrors.Add(
ChainValidationResult.RevocationInformationMissing);
filter.IgnorableServerCertificateErrors.Add(
ChainValidationResult.RevocationFailure);
Certificate validation in System.Net.Http.HttpClient, however, cannot be disabled using any publicly
documented method.
Attacking WebBrowser and WebView Controls
We mentioned earlier that WebBrowser controls can represent an entry point and source of vulnerabilities in
third-party apps. Use of WebBrowser controls in Windows Phone apps is common, so we’ll now discuss
potential security problems that can result from not using them carefully.
Cross-Site Scripting
Because WebBrowser and WebView controls are a subset of browser functionality embedded into a Windows
Phone app, it’s probably no surprise that they could be vulnerable to cross-site scripting (XSS).
To create a WebBrowser control within a page of an application, developers insert (manually or using their IDE)
something similar to the following into the page’s XAML file:
Within their codebase, developers may then use their embedded WebBrowser control, whose object name is
myWebBrowser.
Likewise, in Windows Phone 8.1 apps, to embed a WebView within a page, XAML similar to the following could
be used:
You could then instruct the control (in both WebView and WebBrowser cases) programmatically to load a page, say
www.google.co.uk, with code such as the following:
myWebBrowser.Source = new Uri("http://www.google.co.uk",
UriKind.Absolute);
or
myWebBrowser.Navigate(new Uri("http://www.google.co.uk",
UriKind.Absolute));
A very important point to note is that these code fragments load a standard http:// URL, in particular,
http://www.google.co.uk. Because the HTTP session takes place over an unsecured channel, the connection is
ultimately vulnerable to man-in-the-middle attacks, and moreover, injection into the HTTP response stream
that will be received and parsed by the WebBrowser control. If the control had been instructed toward
https://www.google.co.uk, a man-in-the-middle attack would be particularly difficult, and an attacker would be
unable to inject any data into the HTTP response returning to the WebBrowser or WebView. (SSL API
implementation vulnerabilities aside!)
Now, suppose an attacker managed a man-in-the-middle attack on the targeted device (think public, guest, and
coffee shop Wi-Fi). One might assume that he could simply inject malicious JavaScript into www.google.co.uk’s
response, and launch some kind of attack against the user. Or, suppose an attacker carried out a persistent
(stored) cross-site scripting attack on the site the control is navigated to.
The preceding assumption is quite correct, when JavaScript is enabled on the WebBrowser control in question.
By default, WebBrowser and WebView controls have JavaScript disabled, but developers often enable JavaScript
just because their app or the plumbing of that particular interface relies on it.
The are two ways JavaScript can be enabled on an embedded WebBrowser are programmatically and in the page’s
XAML file.
Carrying on with the hypothetical myWebBrowser object, you could use the following line of code to enable
JavaScript execution:
myWebBrowser.IsScriptEnabled = true;
In programmatic enablement, it’s as simple as setting a Boolean named IsScriptEnabled to true.
Enabling JavaScript when actually declaring the WebBrowser control in the page’s XAML file is also possible, as