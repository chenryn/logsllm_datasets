从光标所在位置后面开始新增数据，光标后的数据随新增数据向后移动。A 从光标所
在列最后面的地方开始新增数据。
插入（insert）
I 从光标所在位置前面开始插入数据，光标后的数据随新增数据向后移动。I 从光标所
在列的第一个非空白字符前面开始插入数据。
开始（open）
o 在光标所在列下新增一列并进入输入模式。
O 在光标所在列上方新增一列并进入输入模式。
也许文字叙述看起来有点复杂，但是只要实际操作一下马上可以了解这些操作方式。
实践很重要，尤其是电脑方面的东西随时可以尝试及验证结果。极力建议实际去使用它而
- 320 -
Linux网络编程
不要只是猛 Ｋ文件，才有事半功倍的效用。
B.2  Vi 基本编辑
配合一般键盘上的功能键，像是方向键、[Insert] 、[Delete] 等等，现在你应该已经可
以利用 vi 来处理文字数据了。当然 vi 还提供其他许许多多功能让文字的处理更形方便，有
兴趣的看倌请继续。
在继续下去之前先来点 BCC 吧。电脑有许多厂牌，不同的硬体及操作系统。PC 也不
是仅仅只有 IBM PC 及其兼容品而已。事实上，包括键盘，终端等等往往都有不同的规格。
这代表什么？
在文本编辑软件上会遇这样的问题，某些电脑的键盘上没有特定的几个功能键！那么
不就有某些功能不能用了？这个问题在 Unix 系统上也一样，几乎各大电脑厂商都有自己的
Unix 系统，而 vi 的操作方法也会随之有点出入。我们固然可以用 PC 的键盘来说明 vi 的操
作，但是还是得提一下这个问题。
B.2.1  删除与修改
何谓编辑？在这里我们认为是文字的新增修改以及删除，甚至包括文字区块的搬移、
复制等等。这里先介绍 vi 的如何做删除与修改。（注意：在 vi 的原始观念里，输入跟编辑
是两码子事。编辑是在命令模式下操作的，先利用命令移动光标来定位要进行编辑的地方，
然后才下命令做编辑。）
x 删除光标所在字符。
dd 删除光标所在的列。
r 修改光标所在字符，r 后接著要修正的字符。
R 进入取代状态，新增数据会覆盖原先数据，直到按 [ESC] 回到命令模式下为止。
s 删除光标所在字符，并进入输入模式。
S 删除光标所在的列，并进入输入模式。
其实呢，在 PC 上根本没有这么麻烦！输入跟编辑都可以在输入模式下完成。例如要
删除字符，直接按 [Delete] 不就得了。而插入状态与取代状态可以直接用 [Insert] 切换，
犯不著用什么命令模式的编辑命令。不过就如前面所提到的，这些命令几乎是每台终端都
能用，而不是仅仅在 PC 上。
在命令模式下移动光标的基本命令是 h, j, k, l。想来各位现在也应该能猜到只要直接用
PC 的方向键就可以了，而且无论在命令模式或输入模式下都可以。多容易不是。
当然 PC 键盘也有不足之处。有个很好用的命令 u 可以恢复被删除的数据，而 U 命令
则可以恢复光标所在列的所有改变。这与某些电脑上的 [Undo] 按键功能相同。
B.3  Vi 进阶应用
相信现在对于 vi 应该已经有相当的认识。处理文字也不会有什么麻烦才对。如果有兴
趣善用 vi 的其它功能进一步简化操作过程，不妨继续看下去。
B.3.1  移动光标
由于许多编辑工作是由光标来定位，所以 vi 提供许多移动光标的方式，这个我们列几
张简表来说明（这些当然是命令模式下的命令）：
命令
说明
功能键
0
移动到光标所在列的最前面
[Home]
$
移动到光标所在列的最后面
[End]
附录 B  Vi 使用简介
- 321 -
[CTRL][d]
向下半页
[CTRL][f]
向下一页
[PageDown]
[CTRL][u]
向上半页
[CTRL][b]
向上一页
[PageUp]
命令
说明
H
移动到视窗的第一列
M
移动到视窗的中间列
L
移动到视窗的最后列
b
移动到下个字的第一个字母
w
移动到上个字的第一个字母
e
移动到下个字的最后一个字母
^
移动到光标所在列的第一个非空白字符
命令
说明
n-
减号移动到上一列的第一个非空白字符
前面加上数字可以指定移动到以上 n 列
n+
加号移动到下一列的第一个非空白字符
前面加上数字可以指定移动到以下 n 列
nG
直接用数字 n 加上大写 G 移动到第 n 列
命令
说明
fx
往右移动到 x 字符上
Fx
往左移动到 x 字符上
tx
往右移动到 x 字符前
Tx
往左移动到 x 字符前
;
配合 f&t 使用，重复一次
,
配合 f&t 使用，反方向重复一次
/string
往右移动到有 string 的地方
?string
往左移动到有 string 的地方
n
配合 /&? 使用，重复一次
N
配合 /&? 使用，反方向重复一次
命令
说明
备注
n(
左括号移动到句子的最前
面
句子是以
前面加上数字可以指定往
前移动 n 个句子
! . ? 三种符号来
界定
n)
右括号移动到下个句子的
最前面
前面加上数字可以指定往
后移动 n 个句子
n{
左括弧移动到段落的最前
面
段落是以
前面加上数字可以指定往
前移动 n 个段落
段落间的空白列
界定
n}
右括弧移动到下个段落的
最前面
- 322 -
Linux网络编程
前面加上数字可以指定往
后移动 n 个段落
不要尝试背诵这些命令，否则后果自行负责。它们看起来又多又杂乱，事实上这是文
字叙述本身的障碍。再强调一次，实际去使用它只要几次就可以不经大脑直接下达这些奇
奇怪怪的命令，远比死记活背搞得模模糊糊强多了。
B.3.2  进阶编辑命令
这些编辑命令非常有弹性，基本上可以说是由命令与范围所构成。例如 dw 是由删除
指令 d 与范围 w 所组成，代表删除一个字 d（elete） w（ord）。
命令列表如下：
d 删除（delete）
y 复制（yank）
p 放置（put）
c 修改（change）
范围可以是下列几个：
e 光标所在位置到该字的最后一个字母
w 光标所在位置到下个字的第一个字母
b 光标所在位置到上个字的第一个字母
$ 光标所在位置到该列的最后一个字母
0 光标所在位置到该列的第一个字母
) 光标所在位置到下个句子的第一个字母
( 光标所在位置到该句子的第一个字母
) 光标所在位置到该段落的最后一个字母
{ 光标所在位置到该段落的第一个字母
说实在的，组合这些命令来编辑文件有一点点艺术气息。不管怎么样，它们提供更多
编辑文字的能力。值得注意的一点是删除与复制都会将指定范围的内容放到暂存区里，然
后就可以用命令 p 贴到其它地方去，这是 vi 用来处理区段拷贝与搬移的办法。
某些 vi 版本，例如 Linux 所用的 elvis 可以大幅简化这一坨命令。如果稍微观察一下这
些编辑命令就会发现问题其实是定范围的方式有点杂，实际上只有四个命令罢了。命令 v
非常好用，只要按下 v 键，光标所在的位置就会反白，然后就可以移动光标来设定范围，
接著再直接下命令进行编辑即可。
对于整列操作，vi 另外提供了更方便的编辑命令。前面曾经提到过删除整列文字的指
令 dd 就是其中一个；cc 可以修改整列文字；而 yy 则是复制整列文字；命令 D 则可以删除
光标到该列结束为止所有的文字。
B.3.3  文件命令
文件命令多以“ :” 开头，跟编辑命令有点区别。例如前面提到结束编辑的命令就是:q。
现在就简单说明一下作为本篇的结尾：
:q 结束编辑(quit)如果不想存文件而要放弃编辑过的文件则用:q! 强制离开。
:w 存文件(write)
其后可加所要存文件的文件名。
可以将文件命令合在一起，例如:wq 即存文件后离开。
zz 功能与 :wq 相同。
另外值得一提的是 vi 的部份存文件功能。可以用 :n,mw filename 将第 n 行到第 m 行
附录 B  Vi 使用简介
- 323 -
的文字存放的所指定的 filename 里去哩。时代在变，世界在变，vi 也在变，不过大致上就
这么多了。
- 324 -
Linux网络编程
附录 C  Linux 下 C 语言使用与调试简介
C.1  C 语言编程
Linux 的发行版中包含了很多软件开发工具。它们中的很多是用于 C 和 C++应用程序
开发的。本文介绍了在 Linux 下能用于 C 应用程序开发和调试的工具。本文的主旨是介绍
如何在 Linux 下使用 C 编译器和其他 C 编程工具，而非 C 语言编程的教程。在本文中你将
学到以下知识：
什么是 C
GNU C 编译器
用 gdb 来调试 GCC 应用程序
你也能看到随 Linux 发行的其他有用的 C 编程工具。这些工具包括源程序美化程序
（pretty print programs），附加的调试工具，函数原型自动生成工具（automatic function
prototypers）。
注意：源程序美化程序（pretty print programs）自动帮你格式化源代码产生始终如一的缩进格式。
C.2  什么是 C?
C 是一种在 UNIX 操作系统的早期就被广泛使用的通用编程语言。它最早是由贝尔实
验室的 Dennis Ritchie 为了 UNIX 的辅助开发而写的，开始时 UNIX 是用汇编语言和一种叫
B 的语言编写的。从那时候起，C 就成为世界上使用最广泛计算机语言。
C 能在编程领域里得到如此广泛支持的原因有以下一些：
它是一种非常通用的语言。几乎你所能想到的任何一种计算机上都有至少一种能
用的 C 编译器。并且它的语法和函数库在不同的平台上都是统一的，这个特性对开发者来
说很有吸引力。
用 C 写的程序执行速度很快。
C 是所有版本的 UNIX 上的系统语言。
C 在过去的二十年中有了很大的发展。在 80 年代末期美国国家标准协会（American
National Standards Institute）发布了一个被称为 ANSI C的 C 语言标准。这更加保证了将来
在不同平台上的 C 的一致性。在 80 年代还出现了一种 C 的面向对象的扩展称为 C++。
Linux 上可用的 C 编译器是 GNU C编译器，它建立在自由软件基金会的编程许可证的
基础上，因此可以自由发布。你能在 Linux 的发行光盘上找到它。
C.3  GNU C 编译器
随 Slackware Linux 发行的 GNU C 编译器（GCC）是一个全功能的 ANSI C兼容编译
器。如果你熟悉其他操作系统或硬件平台上的一种 C 编译器，你将能很快地掌握 GCC。本
节将介绍如何使用 GCC 和一些 GCC 编译器最常用的选项。
C.3.1  使用 GCC
通常后跟一些选项和文件名来使用 GCC 编译器。gcc 命令的基本用法如下：
gcc [options] [filenames]
附录 C  Linux下 c 语言使用与调试简介
- 325 -
命令行选项指定的操作将在命令行上每个给出的文件上执行。下一小节将叙述一些你
会最常用到的选项。
C.3.2  GCC 选项
GCC 有超过 100 个的编译选项可用。这些选项中的许多你可能永远都不会用到，但一
些主要的选项将会频繁用到。很多的 GCC 选项包括一个以上的字符，因此你必须为每个选
项指定各自的连字符，并且就象大多数 Linux 命令一样你不能在一个单独的连字符后跟一
组选项。例如，下面的两个命令是不同的：
gcc -p -g test.c
gcc -pg test.c
第一条命令告诉 GCC 编译 test.c 时为 prof 命令建立剖析（profile）信息并且把调试信
息加入到可执行的文件里。第二条命令只告诉 GCC 为 gprof 命令建立剖析信息。
当你不用任何选项编译一个程序时，GCC 将会建立（假定编译成功）一个名为 a.out
的可执行文件。例如，下面的命令将在当前目录下产生一个叫 a.out 的文件：
gcc test.c
注意：当你使用-o 选项时，-o 后面必须跟一个文件名。