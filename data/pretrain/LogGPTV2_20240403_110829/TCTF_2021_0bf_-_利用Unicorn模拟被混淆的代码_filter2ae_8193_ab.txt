v2'=C2`，加上上一步解出的`v1`和`v2`，就可以推出最初的`a`和`b`。这样就可以在不对`f`函数求逆的情况下进行解密。
利用[Unicorn](https://www.unicorn-engine.org/)可以方便地对代码片段进行部分模拟。模拟执行的关键在于找到一个合适的起点和终点，将二者之间的代码视为一个黑盒，并且使该黑盒对外部信息的依赖尽可能地小，方便模拟。
加密函数`sub_11C9`的开头部分如下：
    .text:00000000000011C9                   ; __unwind {
    .text:00000000000011C9 F3 0F 1E FA                       endbr64
    .text:00000000000011CD 55                                push    rbp
    .text:00000000000011CE 48 89 E5                          mov     rbp, rsp
    .text:00000000000011D1 41 57                             push    r15
    .text:00000000000011D3 41 56                             push    r14
    .text:00000000000011D5 41 55                             push    r13
    .text:00000000000011D7 41 54                             push    r12
    .text:00000000000011D9 53                                push    rbx
    .text:00000000000011DA 48 89 7D C0                       mov     [rbp+var_40], rdi
    .text:00000000000011DE 48 8B 45 C0                       mov     rax, [rbp+var_40]
    .text:00000000000011E2 8B 00                             mov     eax, [rax]
    .text:00000000000011E4 41 89 C5                          mov     r13d, eax
    .text:00000000000011E7 48 8B 45 C0                       mov     rax, [rbp+var_40]
    .text:00000000000011EB 48 83 C0 04                       add     rax, 4
    .text:00000000000011EF 8B 00                             mov     eax, [rax]
    .text:00000000000011F1 41 89 C4                          mov     r12d, eax
    .text:00000000000011F4 B8 A3 49 C7 BE                    mov     eax, 0BEC749A3h
    .text:00000000000011F9 4C 31 E8                          xor     rax, r13
    .text:00000000000011FC 48 89 C2                          mov     rdx, rax
    .text:00000000000011FF 48 89 D0                          mov     rax, rdx
    .text:0000000000001202 48 C1 E2 02                       shl     rdx, 2
    .text:0000000000001206 48 29 D0                          sub     rax, rdx
    .text:0000000000001209 48 01 C0                          add     rax, rax
    .text:000000000000120C 48 89 C1                          mov     rcx, rax
    .text:000000000000120F 4C 89 E8                          mov     rax, r13
可以将`0x11F4`作为模拟的起点，此时`r12`和`r13`寄存器中分别存放了首轮的输入值。第一轮的结束位于`0xF7AD`，此时加密结果也存放在`r12`和`r13`寄存器中。我们同时还需要中途控制`v3`并检查`v1`和`v2`的值，因此还需要找到一个中间点，可以选在`0x241A`，此时`r12`和`r13`寄存器中分就是`v1`和`v2`。代码如下：
    void solve(uint64_t start,
               uint64_t middle,
               uint64_t end,
               uint64_t x,
               uint64_t y,
               uint64_t* ox,
               uint64_t* oy) {
      uint64_t z, w, s, t;
      uint32_t a, b;
      do_emulation(binary, start, middle, 1, 0, &s, &t);
      do_emulation(binary, middle, end, x ^ y, 0, &z, &w);
      printf("z=%lx w=%lx s=%lx t=%lx\n", z, w, s, t);
      b = (w ^ y) - t;
      uint64_t m, n;
      assert(exgcd(0x100000001, s, &m, &n) == 1);
      a = ((x ^ w) * n) % 0x100000001;
      if (n & (1UL << 63)) {
        a -= 1;
      }
      printf("n=%lx a=%x b=%x\n", n, a, b);
      *ox = a;
      *oy = b;
    }
其中`do_emulation`是用Unicorn模拟执行代码片段，第一次我们从起点开始，`a`和`b`分别取`1`和`0`，运行到中间点，根据上面的分析，此时`r12=C2,
r13=C1`，将结果保存为`s`和`t`。第一次我们从中间点开始，`v1`和`v2`分别取`x^y`和`0`，运行到终点，根据上面的分析，此时`r12=x^y^f(x^y),
r13=f(x^y)`，将结果保存为`z`和`w`。再通过`v1=w^x, v2=w^y`继续逆推出`v1`和`v2`。`b=v2-C2,
a=(v1*n)%0x100000001`，其中`n`是`C1`对`0x100000001`的乘法逆元。
## Unicorn的使用
接下来是`do_emulation`的实现：
    void do_emulation(FILE* fp,
                      uint64_t start,
                      uint64_t end,
                      uint64_t r12,
                      uint64_t r13,
                      uint64_t* x,
                      uint64_t* y) {
      uc_engine* uc;
      uint64_t size = end - start;
      uint64_t rsp = 0x280000, rbp = 0x2c0000;
      assert(uc_open(UC_ARCH_X86, UC_MODE_64, &uc) == UC_ERR_OK);
      assert(uc_mem_map(uc, 0x1000, 0x100000, UC_PROT_ALL) == UC_ERR_OK);
      assert(uc_mem_map(uc, 0x200000, 0x100000, UC_PROT_ALL) == UC_ERR_OK);
      assert(fseek(fp, start, SEEK_SET) == 0);
      assert(fread(buf, size, 1, fp) == 1);
      assert(uc_mem_write(uc, start, buf, size) == UC_ERR_OK);
      assert(uc_reg_write(uc, UC_X86_REG_RSP, &rsp) == UC_ERR_OK);
      assert(uc_reg_write(uc, UC_X86_REG_RBP, &rbp) == UC_ERR_OK);
      assert(uc_reg_write(uc, UC_X86_REG_R12, &r12) == UC_ERR_OK);
      assert(uc_reg_write(uc, UC_X86_REG_R13, &r13) == UC_ERR_OK);
      assert(uc_emu_start(uc, start, end, 0, 0) == UC_ERR_OK);
      assert(uc_reg_read(uc, UC_X86_REG_R12, x) == UC_ERR_OK);
      assert(uc_reg_read(uc, UC_X86_REG_R13, y) == UC_ERR_OK);
      uc_close(uc);
    }
题目是PIE程序，为了省去重定位过程，直接将.text段映射到`0x1000`地址处。再分配一个空的栈段，将rsp和rbp都指向栈段，r12和r13填入输入值，调用`uc_emu_start`开始运行即可。
将Unicorn下载下来并编译，一般不建议将自己编译的东西用`make
install`安装到系统目录，避免和已有的东西冲突。网上很多教程编译OpenSSL都敢直接安装到/usr/lib，很多依赖OpenSSL的系统程序都会因此载入错误版本的libssl而无法运行。
采用静态链接+局部包含路径的方式可以很方便地使用自编译的第三方库，同时不污染环境，适合编译仅运行一次的程序，链接到Unicorn时可以使用如下指令：
    gcc solve.c -I /xxx/download/unicorn/include/ /xxx/download/unicorn/libunicorn.a -lm -lpthread
-I选项指定头文件的搜索目录，同时把静态库libunicorn.a直接作为链接器输入，再链接到libm和libpthread即可编译出一个可独立运行的模拟程序。
完整代码参见[Pastebin](https://pastebin.com/DZtjMXiZ)
flag: `flag{0o0..MBA_0bF_1s_S0_1ntEresT1ng!!}`
## 总结
这道题目因为不懂去混淆还是费了很大的力气，最后还是靠加密函数中的异或结构巧妙地重用了已有的二进制代码，还是要提高自己的知识水平，学习去混淆。