AdvCCA
Π (A), is deﬁned as follows:
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)
Pr
(pk, sk) ← KG(1η);
(m0, m1, σ) ← ADsk(·)
(pk);
b $← {0, 1}; c∗ ← Epk(mb);
b′ ← ADsk(·6=c∗)
(c∗, σ)
1
2
: b = b′
−
1
2
In both stages of the experiment the adversary has access
to a decryption oracle, but in the second stage A2 cannot
query for the decryption of the challenge ciphertext c∗. In
an asymptotic setting, Π is IND-CCA-secure if all eﬃcient
adversaries have a negligible advantage.
In order to prove the IND-CCA security of ZAEP, we re-
quire that the underlying trapdoor function satisfy the two
properties deﬁned below.
Deﬁnition 3 (Second-Input Extractability) A family
of trapdoor functions (KG, f, f −1) satisﬁes SIE if there ex-
ists an eﬃcient algorithm sie that given a public key pk,
c ∈ {0, 1}n and r ∈ {0, 1}k, outputs s if c = fpk(r, s) or ⊥
otherwise.
Observe that Second-Input Extractability collapses the
distinction between one-wayness and partial one-wayness.
If a family of one-way functions satisﬁes Second-Input Ex-
tractability, then it is also partial-domain one-way over its
ﬁrst input.
Deﬁnition 4 (Common-Input Extractability) A fam-
ily of trapdoor functions (KG, f, f −1) satisﬁes CIE if there
exists an eﬃcient algorithm cie that given a public key pk
and c1, c2 ∈ {0, 1}n, outputs (r, s1, s2) if c1 = fpk(r, s1),
c2 = fpk(r, s2) and s1 6= s2, or ⊥ otherwise.
Since we conduct our proof in a concrete security setting
rather than in an asymptotic setting, and we prove exact
probability and time bounds, we ﬁx the security parame-
ter and omit it in the remainder. We prove the following
security result for ZAEP.
Theorem 1 Let (KG, f, f −1) be a family of trapdoor per-
mutations satisfying both SIE and CIE properties. Let A be
an adversary against the IND-CCA security of ZAEP instan-
tiated with (KG, f, f −1) that runs within time tA and makes
at most qG queries to the random oracle G and at most qD
queries to the decryption oracle. Then, there exists an algo-
rithm I running within time tI such that
Succ
OW
f
tI ≤ tA + 2qGqD tsie + q2
qD
2n
CCA
ZAEP(A) −
(I) ≥ Adv
D tcie
where tcie (resp. tsie) is an upper bound on the execution time
of the algorithm cie (resp. sie) for (KG, f, f −1).
In Section 4 we give an overview of a machine-checked
reductionist proof of the above theorem in EasyCrypt. We
observe that while ZAEP can be cast as an instance of SAEP
by setting the length of the padding k0 = 0, our reduction
726is diﬀerent from Boneh’s reduction for SAEP [19]; in fact,
Boneh’s exact security bounds are meaningless as soon as
k0 is of the order of log(qD).
3. A PRIMER ON VERIFIED SECURITY
Veriﬁed security [4, 6] is an emerging approach to cryp-
tographic proofs. While adhering to the principles and the
methods of provable security, veriﬁed security takes the view
that cryptographic proofs should be treated in a manner
similar to high-integrity software, so that conﬁdence in the
design of a cryptographic system is no lower than conﬁdence
in the software systems that use it. Thus, veriﬁed security
mandates that security proofs are built and validated using
state-of-the-art technology in programming languages and
veriﬁcation.
EasyCrypt [4] is a recent realization of the veriﬁed secu-
rity paradigm. As its predecessor CertiCrypt [6], it adopts
a code-centric view of cryptography. Under this view, secu-
rity assumptions and goals are formalized using probabilistic
programs, also called games. Each game is a probabilistic
imperative program composed of a main command and a
collection of concrete procedures and adversaries. More-
over, the statements of the language include deterministic
and probabilistic assignments, conditional statements and
loops, as given by the following grammar:
C ::= skip
|
|
|
|
|
|
V ← E
V $← DE
if E then C else C
while E do C
V ← P(E , . . . , E )
C; C
nop
deterministic assignment
probabilistic assignment
conditional
while loop
procedure call
sequence
where V is a set of variable identiﬁers, P a set of procedure
names with a distinguished class of abstract procedures used
to model adversaries, E is a set of expressions, and DE is
a set of distribution expressions. The latter are expressions
that evaluate to distributions from where values can be sam-
pled; for the purpose of this paper, we only need to consider
uniform distributions over bitstrings.
Programs in EasyCrypt are given a denotational seman-
tics, that maps initial memories to sub-distributions over
ﬁnal memories, where a memory is a (well-typed) mapping
from variables to values. We let Pr [c, m : A] denote the
probability of an event A in the sub-distribution induced by
executing the program c with initial memory m, which we
omit when it is not relevant. For additional details on the
semantics, we refer the reader to [6].
As envisioned by Halevi
[30] and Bellare and Rog-
away [13], this code-centric view of cryptographic proofs
leads to statements that are amenable to veriﬁcation using
programming language techniques. EasyCrypt captures com-
mon reasoning patterns in cryptographic proofs by means of
a probabilistic relational Hoare Logic (pRHL). Judgments
in pRHL are of the form
|= c1 ∼ c2 : Ψ ⇒ Φ
where c1 and c2 are probabilistic programs, and Ψ and Φ,
respectively called the pre-condition and the post-condition,
are relations over program states. We represent these rela-
tions as ﬁrst-order formulae deﬁned by the grammar:
Ψ, Φ ::= e | ¬Φ | Ψ ∧ Φ | Ψ ∨ Φ | Ψ → Φ | ∀x. Φ | ∃x. Φ
where e stands for a Boolean expression over logical vari-
ables and program variables tagged with either h1i or h2i
to denote their interpretation in the left or right-hand side
program, respectively. We write ehii for the expression e in
which all program variables are tagged with hii. A relational
formula is interpreted as a relation on program memories.
For example, the formula xh1i + 1 ≤ yh2i is interpreted as
the relation
R = {(m1, m2) | m1(x) + 1 ≤ m2(y)}
There are two complementary means to establish the va-
lidity of a pRHL judgment. Firstly, the user can apply in-
teractively atomic rules and semantics-preserving program
transformations. Secondly, the user can invoke an auto-
mated procedure that given a logical judgment involving
loop-free closed programs, computes a set of suﬃcient condi-
tions for its validity, known as veriﬁcation conditions. In the
presence of loops or adversarial code, EasyCrypt requires the
user to provide the necessary annotations. The outstanding
feature of this procedure, and the key to its eﬀectiveness, is
that veriﬁcation conditions are expressed as ﬁrst-order for-
mulae, without any mention of probability, and thus can
be discharged automatically using oﬀ-the-shelf SMT solvers
and theorem provers.
As security properties are typically expressed in terms of
probability of events, and not as pRHL judgments, Easy-
Crypt provides mechanisms to derive from a valid judgment
|= c1 ∼ c2 : Ψ ⇒ Φ
inequalities of the form
Pr [c1, m1 : A] ≤ Pr [c2, m2 : B] (+Pr [c2, m2 : F ])
for events A, B and F that are suitably related to the post-
condition Φ. The mechanisms are described more precisely
by the next two lemmas.
Lemma 2 (Probability Lemma) Let c1 and c2 be two
games, and A and B be events such that
|= c1 ∼ c2 : Ψ ⇒ Ah1i → Bh2i
For every pair of memories m1, m2 such that m1 Ψ m2, we
have
Pr [c1, m1 : A] ≤ Pr [c2, m2 : B]
Lemma 3 (Shoup’s Fundamental Lemma) Let c1 and
c2 be two games and A, B, and F be events such that
|= c1 ∼ c2 : Ψ ⇒ (F h1i ↔ F h2i) ∧ (¬F h1i → Ah1i → Bh2i)
Then,
m1 Ψ m2, we have
for every pair of memories m1, m2
such that
Pr [c1, m1 : A] ≤ Pr [c2, m2 : B] + Pr [c2, m2 : F ]
Moreover, EasyCrypt includes support for applying proba-
bility laws (e.g. the union bound) and computing the proba-
bility of simple events. The proof of ZAEP relies on two main
rules. The ﬁrst one states that an adversary has probability
1
2 of guessing a bit b independent from its view; indepen-
dence is captured by proving that sampling the bit b after
the adversary returns its guess does not change the seman-
tics of the game. The second rule allows to upper bound the
probability that a uniformly sampled value belongs to a list
727of bounded length. For instance, if L is a list of values in A
of length at most q and x is a value sampled independently
and uniformly over A, the probability that x belongs to L is
upper bounded by q/|A|.
3.1 User Perspective
Building a cryptographic proof in EasyCrypt is a process
that involves the following tasks:
• Deﬁning a logical context, including declarations of
types, constants and operators, axioms and derived
lemmas. Declarations allow users to extend the core
language, while axioms allow to give the extension
a meaning. Derived lemmas are intermediary results
proved from axioms, and are used to drive SMT solvers
and automated provers.
• Deﬁning games, including the initial experiment en-
coding the security property to be proved, intermedi-
ate games, and a number of ﬁnal games, which either
correspond to a security assumption or allow to di-
rectly compute a bound on the probability of some
event.
• Proving logical judgments that establish equivalences
between games. This may be done fully automatically,
with the help of hints from the user in the form of re-
lational invariants, or interactively using basic tactics
and automated strategies. In order to beneﬁt from ex-
isting technology and target multiple veriﬁcation tools,
veriﬁcation conditions are generated in the intermedi-
ate language of the Why3 Software Veriﬁcation Plat-
form [18] and then translated to individual provers to
check their validity.
• Deriving inequalities between probabilities of events in
games, either by using previously proven logical judg-
ments or by direct computation.
Although the above tasks can be carried out strictly in the
order described, one can conveniently interleave them as in
informal game-based proofs. To ease this process, Easy-
Crypt provides an interactive user-interface as an instance
of ProofGeneral, a generic Emacs-based frontend for proof-
assistants. Figure 2 gives an overview of the workﬂow in the
framework.
4. SECURITY PROOF
We overview the proof of Theorem 1 in EasyCrypt. The
proof is organized as a sequence of games starting from
game CCA, that encodes an adaptive chosen-ciphertext at-
tack against ZAEP for an arbitrary adversary A, and ending
in game OW, that encodes the reduction to the one-wayness
of the underlying trapdoor permutation. These two games
are shown in Figure 3; the rest of the games are shown in Fig-
ure 4. Games are shown alongside the oracles made available
to adversary A and global variables are typeset in boldface.
Formalizing the security proof of ZAEP in EasyCrypt re-
quired providing an appropriate axiomatization of the un-
derlying trapdoor permutation and the SIE and CIE prop-
erties. We extended the expression language with the fol-
lowing operators corresponding to the permutation f , its
ProofGeneral Frontend
Emacs Shell
EasyCrypt Toplevel
Why3 API
Why3 Software Veriﬁcation Platform
SMT Solvers
Automated Provers
Interactive Provers
Alt-Ergo
CVC3
Z3
Yices
Vampire
E-Prover
SPASS
Coq
Figure 2: Overview of workﬂow in EasyCrypt
inverse, and algorithms sie and cie:
: (pkey, {0, 1}k × {0, 1}l) → {0, 1}k × {0, 1}l
op f
op finv : (pkey, {0, 1}k × {0, 1}l) → {0, 1}k × {0, 1}l
op sie : (pkey, {0, 1}k × {0, 1}l, {0, 1}k) → {0, 1}ℓ option
op cie : (pkey, {0, 1}k × {0, 1}l, {0, 1}k × {0, 1}l) →
({0, 1}k × {0, 1}ℓ × {0, 1}ℓ) option
We gave these operators a meaning by introducing their
speciﬁcations as axioms; for instance, the operator sie is
speciﬁed as follows:
axiom sie_spec :
forall (pk : pkey, sk : skey), key_pair(pk, sk) =⇒
forall (c : {0, 1}k × {0, 1}ℓ, r : {0, 1}k, s : {0, 1}ℓ),
sie(pk, c, r) = Some(s) ⇐⇒ c = f(pk, (r, s))
Veriﬁcation conditions generated during the proof are ﬁrst-
order formulae over a mixture of theories: e.g. ﬁnite maps,
integer arithmetic, exclusive-or, an the above axiomatiza-
tion of the SIE and CIE solvers. All veriﬁcation conditions
are discharged automatically using the CVC3 and Alt-Ergo
SMT solvers.
The proof itself begins by transforming the initial CCA
game into game G1, where we inline the encryption of the
challenge ciphertext and eagerly sample the random value
r∗ used. We also introduce a Boolean ﬂag bad that is set
to true whenever r∗ would be appear as a query to G in the
CCA experiment. All these changes are semantics-preserving
w.r.t. to the event b = b′ and thus we have
Pr(cid:2)CCA : b = b′(cid:3) = Pr(cid:2)G1 : b = b′(cid:3)
Game G2 behaves identically to game G1 except that the
value of G(r∗) used to mask the plaintext of the challenge
ciphertext is always chosen at random, regardless of whether
it has been queried by the adversary during the ﬁrst stage
of the experiment. Subsequent queries to G(r∗) are also
answered with a fresh random value. This only makes a
diﬀerence if the ﬂag bad is set, and applying Lemma 3, we
obtain:
|Pr(cid:2)G1 : b = b′(cid:3) − Pr(cid:2)G2 : b = b′(cid:3) | ≤ Pr [G2 : bad]
728def ← false; q ← 0;
Game CCA :
LG ← nil; c∗