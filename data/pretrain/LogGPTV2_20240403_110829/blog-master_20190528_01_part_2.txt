   Schema   |          Name          | Result data type | Argument data types | Type     
------------+------------------------+------------------+---------------------+------    
 pg_catalog | getdatabaseencoding    | name             |                     | func    
 pg_catalog | pg_char_to_encoding    | integer          | name                | func    
 pg_catalog | pg_client_encoding     | name             |                     | func    
 pg_catalog | pg_encoding_max_length | integer          | integer             | func    
 pg_catalog | pg_encoding_to_char    | name             | integer             | func    
```    
## 导出PG支持的libc collate, ctype  
```  
create table t13 (c name);  
copy t13 from stdin;  
EUC_CN  
EUC_JP  
EUC_JIS_2004  
EUC_KR  
EUC_TW  
ISO_8859_5  
ISO_8859_6  
ISO_8859_7  
ISO_8859_8  
KOI8R  
KOI8U  
LATIN1  
LATIN2  
LATIN3  
LATIN4  
LATIN5  
LATIN6  
LATIN7  
LATIN8  
LATIN9  
LATIN10  
MULE_INTERNAL  
SQL_ASCII  
UTF8  
WIN866  
WIN874  
WIN1250  
WIN1251  
WIN1252  
WIN1253  
WIN1254  
WIN1255  
WIN1256  
WIN1257  
WIN1258  
\.  
-- 以上取值来自手册，支持哪些server端encoding, 不包括icu  
create or replace function get_coll_ctype (in c name, out c1 name, out c2 name) returns setof record as $$  
select  
collcollate,   
collctype   
from pg_collation   
where (pg_encoding_to_char(collencoding)='' and collcollate<>'' and collprovider<>'i')  
or  
pg_encoding_to_char(collencoding)=c;  
$$ language sql strict;  
select rtrim(c,' '), (get_coll_ctype(rtrim(c,' '))).* from t13 where rtrim(c,' ')<>'';
```  
## 如何扩展libc  collate  
如果PG运行操作系统的libc有更新，支持了更多的collate，如何导入呢？    
https://www.postgresql.org/docs/devel/functions-admin.html#FUNCTIONS-ADMIN-COLLATION    
Table 9.91. Collation Management Functions    
Name	| Return Type|	Description    
---|---|---    
pg_collation_actual_version(oid)|	text|	Return actual version of collation from operating system    
pg_import_system_collations(schema regnamespace)|	integer|	Import operating system collations    
pg_collation_actual_version returns the actual version of the collation object as it is currently installed in the operating system. If this is different from the value in pg_collation.collversion, then objects depending on the collation might need to be rebuilt. See also ALTER COLLATION.    
pg_import_system_collations adds collations to the system catalog pg_collation based on all the locales it finds in the operating system. This is what initdb uses; see Section 23.2.2 for more details. If additional locales are installed into the operating system later on, this function can be run again to add collations for the new locales. Locales that match existing entries in pg_collation will be skipped. (But collation objects based on locales that are no longer present in the operating system are not removed by this function.) The schema parameter would typically be pg_catalog, but that is not a requirement; the collations could be installed into some other schema as well. The function returns the number of new collation objects it created.    
```  
postgres=#     select pg_import_system_collations('pg_catalog');  
 pg_import_system_collations   
-----------------------------  
                           0  
(1 row)  
```    
## 注意  
以上例子没有考虑ICU。(PG支持libc , icu的collate. )      
支持哪些libc collate和操作系统的libc库有关, 详见手册。
https://www.postgresql.org/docs/current/collation.html    
Managing Collations  
A collation is an SQL schema object that maps an SQL name to locales provided by libraries installed in the operating system. A collation definition has a provider that specifies which library supplies the locale data. One standard provider name is libc, which uses the locales provided by the operating system C library. These are the locales that most tools provided by the operating system use. Another provider is icu, which uses the external ICU library. ICU locales can only be used if support for ICU was configured when PostgreSQL was built.  
A collation object provided by libc maps to a combination of LC_COLLATE and LC_CTYPE settings, as accepted by the setlocale() system library call. (As the name would suggest, the main purpose of a collation is to set LC_COLLATE, which controls the sort order. But it is rarely necessary in practice to have an LC_CTYPE setting that is different from LC_COLLATE, so it is more convenient to collect these under one concept than to create another infrastructure for setting LC_CTYPE per expression.) Also, a libc collation is tied to a character set encoding (see Section 23.3). The same collation name may exist for different encodings.  
A collation object provided by icu maps to a named collator provided by the ICU library. ICU does not support separate “collate” and “ctype” settings, so they are always the same. Also, ICU collations are independent of the encoding, so there is always only one ICU collation of a given name in a database.  
## 参考    
src/backend/utils/mb/encnames.c    
https://www.postgresql.org/docs/12/multibyte.html    
https://www.postgresql.org/docs/devel/functions-admin.html#FUNCTIONS-ADMIN-COLLATION     
https://www.postgresql.org/docs/current/collation.html    
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")