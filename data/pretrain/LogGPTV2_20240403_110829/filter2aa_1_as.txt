     1
    prints a message to the terminal. Next,
     mkdir
    creates a directory with the name
     DOMAIN_recon
     2
    . We store the results of
     nmap
    into a file named
     nmap
    in the newly created directory
     3
    . Dirsearch’s
     simple-report
    flag
     4
    generates a report in the designated location. We store the results of Dirsearch to a file named
     dirsearch
    in the new directory.
    echo 命令1 将消息打印到终端。接下来，mkdir 创建名为 DOMAIN_recon 2 的目录。我们将 nmap 的结果存储到新创建的目录中的名为 nmap 的文件中 3。Dirsearch 的 simple-report 标志 4 在指定位置生成报告。我们将 Dirsearch 的结果存储到新目录中名为 dirsearch 的文件中。
    You can make your script more manageable by introducing variables to reference files, names, and values. Variables in bash can be assigned using the following syntax:
     VARIABLE_NAME
     =
     VARIABLE_VALUE
    . Note that there should be no spaces around the equal sign. The syntax for referencing variables is
     $
     VARIABLE_NAME
    . Let’s implement these into the script:
    你可以通过引入变量来使你的脚本更易于管理，以便引用文件、名称和值。Bash中的变量可以使用以下语法进行分配：VARIABLE_NAME=VARIABLE_VALUE。请注意，等号周围不应该有空格。引用变量的语法是$VARIABLE_NAME。让我们将这些引入脚本中：
#!/bin/bash
PATH_TO_DIRSEARCH="/Users/vickieli/tools/dirsearch"
DOMAIN=$1
DIRECTORY=${DOMAIN}_recon 1
echo "Creating directory $DIRECTORY."
mkdir $DIRECTORY
nmap $DOMAIN > $DIRECTORY/nmap
echo "The results of nmap scan are stored in $DIRECTORY/nmap."
$PATH_TO_DIRSEARCH/dirsearch.py -u $DOMAIN -e php –simple-report=$DIRECTORY/dirsearch 2
echo "The results of dirsearch scan are stored in $DIRECTORY/dirsearch."
    We use
     ${DOMAIN}_recon
    instead of
     $DOMAIN_recon
     1
    because, otherwise, bash would recognize the entirety of
     DOMAIN_recon
    as the variable name. The curly brackets tell bash that
     DOMAIN
    is the variable name, and
     _recon
    is the plaintext we’re appending to it. Notice that we also stored the path to Dirsearch in a variable to make it easy to change in the future
     2
    .
    我们使用${DOMAIN}_recon代替$DOMAIN_recon 1，否则，bash会将DOMAIN_recon的全部识别为变量名。花括号告诉bashDOMAIN是变量名，_recon是我们要添加的明文。请注意，我们还将Dirsearch的路径存储在变量中，以便将来轻松更改。
    Using redirection, you can now write shell scripts that run many tools in a single command and save their outputs in separate files.
    使用重定向，你现在可以编写Shell脚本，在一个命令中执行多个工具，并将它们的输出保存在不同的文件中。
    Adding the Date of the Scan to the Output
    Let’s say you want to add the current date to your script’s output, or select which scans to run, instead of always running both Nmap and Dirsearch. If you want to write tools with more functionalities like this, you have to understand some advanced shell scripting concepts.
    假设你想要将当前日期添加到你的脚本输出中，或者选择运行哪个扫描工具，而不是总是运行Nmap和Dirsearch。如果你想要编写更多功能的工具，就必须理解一些高级的shell脚本概念。
    For example, a useful one is
     command substitution
    , or operating on the output of a command. Using
     $()
    tells Unix to execute the command surrounded by the parentheses and assign its output to the value of a variable. Let’s practice using this syntax:
    例如，一个有用的语法是命令替换，或者操作命令的输出。使用$()告诉Unix执行括号内的命令并将其输出赋值给一个变量的值。让我们练习使用这种语法：
#!/bin/bash
PATH_TO_DIRSEARCH="/Users/vickieli/tools/dirsearch"
TODAY=$(date) 1
echo "This scan was created on $TODAY" 2
DOMAIN=$1
DIRECTORY=${DOMAIN}_recon
echo "Creating directory $DIRECTORY."
mkdir $DIRECTORY
nmap $DOMAIN > $DIRECTORY/nmap
echo "The results of nmap scan are stored in $DIRECTORY/nmap."
$PATH_TO_DIRSEARCH/dirsearch.py -u $DOMAIN -e php --simple-report=$DIRECTORY/dirsearch
echo "The results of dirsearch scan are stored in $DIRECTORY/dirsearch."
    At
     1
    , we assign the output of the
     date
    command to the variable
     TODAY
    . The
     date
    command displays the current date and time. This lets us output a message indicating the day on which we performed the scan
     2
    .
    在第1步，我们为变量TODAY分配date命令的输出。date命令显示当前日期和时间。这样，我们可以输出一个消息，指示执行扫描的日期。
    Adding Options to Choose the Tools to Run
    Now, to selectively run only certain tools, you need to use conditionals. In bash, the syntax of an
     if
    statement is as follows. Note that the conditional statement ends with the
     fi
    keyword, which is
     if
    backward:
    现在，要选择性地运行某些工具，您需要使用条件语句。在Bash中，if语句的语法如下所示。请注意，条件语句以if关键字结尾，该关键字是if的反向形式：fi。
if [ condition 1 ]
then
  # Do if condition 1 is satisfied
elif [ condition 2 ]
then
  # Do if condition 2 is satisfied, and condition 1 is not satisfied
else
  # Do something else if neither condition is satisfied
fi
    Let’s say that we want users to be able to specify the scan
     MODE
    , as such:
    让我们假设我们希望用户能够指定扫描模式：
$ ./recon.sh scanmme.nmap.org MODE
    We can implement this functionality like this:
    我们可以这样实现此功能：
#!/bin/bash
PATH_TO_DIRSEARCH="/Users/vickieli/tools/dirsearch"
TODAY=$(date)
echo "This scan was created on $TODAY"
DIRECTORY=${DOMAIN}_recon
echo "Creating directory $DIRECTORY."
mkdir $DIRECTORY 
if [ $2 == "nmap-only" ] 1
then
  nmap $DOMAIN > $DIRECTORY/nmap 2
  echo "The results of nmap scan are stored in $DIRECTORY/nmap."
elif [ $2 == "dirsearch-only" ] 3
then  
  $PATH_TO_DIRSEARCH/dirsearch.py -u $DOMAIN -e php –simple-report=$DIRECTORY/dirsearch 4
  echo "The results of dirsearch scan are stored in $DIRECTORY/dirsearch."
else 5
  nmap $DOMAIN > $DIRECTORY/nmap 6
  echo "The results of nmap scan are stored in $DIRECTORY/nmap."
  $PATH_TO_DIRSEARCH/dirsearch.py -u $DOMAIN -e php --simple-report=$DIRECTORY/dirsearch
  echo "The results of dirsearch scan are stored in $DIRECTORY/dirsearch."
fi
    If the user specifies
     nmap-only
     1
    , we run
     nmap
    only and store the results to a file named
     nmap
     2
    . If the user specifies
     dirsearch-only
     3
    , we execute and store the results of Dirsearch only
     4
    . If the user specifies neither
     5
    , we run both scans
     6
    .
    如果用户指定了只运行nmap (nmap-only 1)，我们只运行nmap并将结果存入名为nmap的文件中 (nmap 2)。如果用户指定了只运行Dirsearch (dirsearch-only 3)，我们只执行并存储Dirsearch的结果 (4)。如果用户没有指定 (5)，我们将运行两个扫描 (6)。
    Now you can make your tool run only the Nmap or Dirsearch commands by specifying one of these in the command:
    现在您可以通过在命令中指定其中之一来仅运行Nmap或Dirsearch命令：
$ ./recon.sh scanme.nmap.org nmap-only
$ ./recon.sh scanme.nmap.org dirsearch-only
    Running Additional Tools
    What if you want the option of retrieving information from the crt.sh tool, as well? For example, you want to switch between these three modes or run all three recon tools at once:
    如果您想要从crt.sh工具中检索信息，该怎么办？例如，您想在这三种模式之间切换或同时运行所有这三个recon工具。
$ ./recon.sh scanme.nmap.org nmap-only
$ ./recon.sh scanme.nmap.org dirsearch-only
$ ./recon.sh scanme.nmap.org crt-only
    We could rewrite the
     if-else
    statements to work with three options: first, we check if
     MODE
    is
     nmap-only
    . Then we check if
     MODE
    is
     dirsearch-only
    , and finally if
     MODE
    is
     crt-only
    . But that’s a lot of
     if-else
    statements, making the code complicated.
    我们可以将if-else语句重写为三个选项：首先，我们检查MODE是否仅限于nmap。然后，我们检查MODE是否仅限于dirsearch，最后检查MODE是否仅限于crt。但这会造成很多if-else语句，让代码变得复杂。
    Instead, let’s use bash’s
     case
    statements, which allow you to match several values against one variable without going through a long list of
     if-else
    statements. The syntax of
     case
    statements looks like this. Note that the statement ends with
     esac
    , or
     case
    backward: