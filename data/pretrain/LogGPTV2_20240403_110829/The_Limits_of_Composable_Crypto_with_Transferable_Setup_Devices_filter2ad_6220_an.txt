functions:
fw0
i;j;k;V 0
i;j;k
where b = 1 if and only if R(xj; w0
with each other.
(xj; w1
i;j;k; V 1
(cid:8) w1
i;j;k) = (b; xj; w1
i;j;k; V 1
i;j;k) holds and the views V 0
i;j;k)
i;j;k and V 1
i;j;k
i;j;k are consistent
(d) Finally, the prover broadcasts to all parties the set containing
{
(f oﬀ
w0
i;j;k;V 0
i;j;k
(ri;j;k);Com(ri;j;k); Com(w0
i;j;k); Com(w1
i;j;k);
Com(V 0
i;j;k); Com(V 1
i;j;k))
(i(cid:2)j(cid:2)k)2[N(cid:2)m(cid:2)(n(cid:0)1)]:
}
Moreover, let decomri;j;k ; decomw0
be the respective de-
commitment information of the above commitments. Then for every k 2 [n (cid:0) 1], Pi commits to
the above decommitment information with respect to party Pk and all (i (cid:2) j) 2 [N ] (cid:2) [m], using
ComgWRAP.
; decomV 0
; decomV 1
; decomw1
i;j;k
i;j;k
i;j;k
i;j;k
3. The veriﬁer decommits to all its challenges.
4. For every index (i; j) in the t subset the prover replies as follows:
– If chi
j;k = 0 then it decommits to ri;j;k, w0
i;j;k and V 0
i;j;k. The veriﬁer then checks if the ofﬂine part
was constructed correctly.
– If chi
j;k = 1 then it sends f on
w0
veriﬁer
w1
i;j;k; V 1
i;j;k).
then
runs
i;j;k;V 0
the
i;j;k
(ri;j;k; xj; w1
decoder
i;j;k; V 1
and
i;j;k) and decommits w1
checks
if
it
i;j;k and V 1
obtains
i;j;k. The
(1; xj;
j;k
chi
i;j;k for every index (i; j) that the prover sends, the veriﬁer
Furthermore, from the decommitted views V
checks if the MPC-in-the-head protocol was executed correctly and that the views are consistent.
Theorem 6.2 Assuming the existence of one-way functions, then protocol (cid:5)CP GUC realizes F 1:M
FgWRAP-hybrid.
Proof: Let A be a malicious PPT real adversary attacking protocol (cid:5)CP in the FgWRAP-hybrid model. We
construct an ideal adversary S with access to F 1:M
CP which simulates a real execution of (cid:5)CP with A such
that no environment Z can distinguish the ideal process with S and FgWRAP-hybrid from a real execution of
(cid:5)CP with A in the FgWRAP-hybrid. S starts by invoking a copy of A and running a simulated interaction of
A with environment Z, emulating the honest party. We describe the actions of S for every corruption case.
Simulating the communication with Z: Every message that S receives from Z it internally feeds to A
and every output written by A is relayed back to Z. In case the adversary A issues a transfer query on any
token (transfer;(cid:1)), S relays the query to the FgWRAP.
CP in the
Party P(cid:28) is not corrupted.
role of the veriﬁers in our protocol. The simulator proceeds as follows.
In this scenario the adversary only corrupts a subset of parties I playing the
1. Upon receiving a commitment Comk
j and the challenge bits fchk
gWRAP from a corrupted party Pk, the simulator extracts the m
for all j 2 [m], by retrieving the queries
g
i2I k
i;j
j
committed t-subsets I k
made to the tokens.
50
2. For each j 2 [m] and k 2 [I], the simulator generates the views of 2N parties P 0
i;j;k for all
i 2 [N ] emulating the simulator of the t-robust t-private MPC protocol underlying in the real proof,
where the set of corrupted parties for the (j; k)th execution is ﬁxed to be I k
j extracted above. Let V b
be the view of party P b
i;j;k and P 1
i;j;k
i;j;k.
3. Next, for each j 2 [m] and k 2 [I], the simulator computes N ofﬂine encodings as follows.
(cid:15) For every index i in the t subset I k
j the simulator replies as follows:
– If chk
i;j = 0, then the simulator broadcasts the following honestly generated message:
i;j;k
(ri;j;k); Com(ri;j;k); Com(w0
f oﬀ
w0
Com(V
bit equals one, and vice versa.
i;j;k;V 0
′0
i;j;k); Com(V
′1
i;j;k): where V
i;j;k); Com(0);
′1
i;j;k = V 1
′0
i;j;k = 0 and V
i;j;k if the matched challenge
– Else, if chk
i;j = 1, then the simulator invokes the simulator for the randomized encoding
and broadcasts the following message:
{S oﬀ
w0
i;j;k;V 0
i;j;k
(ri;j;k);Com(0); Com(0); Com(w1
where w1
bit equals one, and vice versa.
i;j;k is a random string and V
(cid:15) For every index i not in the t subset I k
′0
Com(V
i;j;k); Com(V
′0
i;j;k = 0 and V
′1
i;j;k)
′1
i;j;k = V 1
j the simulator broadcasts
}
i;j;k);
(i(cid:2)j(cid:2)k)2[N(cid:2)m(cid:2)(n(cid:0)1)]
i;j;k if the matched challenge
f oﬀ
w0
i;j;k;V 0
i;j;k
(ri;j;k); Com(ri;j;k); Com(w0
i;j;k); Com(0); Com(0); Com(0):
The simulator correctly commits to the decommitments information with respect to the honestly gen-
erated commitments (namely, as the honest prover would have done) using ComgWRAP. Else, it com-
mits to the zero string.
4. Upon receiving the decommitment information from the adversary, the simulator aborts if the adver-
sary decommits correctly to a different set of messages than the one extracted above by the simulator.
5. Else, S completes the protocol by replying to the adversary as the honest prover would do.
Note that the adversary’s view is modiﬁed with respect to the views it obtains with respect to the underlying
MPC and both types of commitments. Indistinguishability follows by ﬁrst replacing the simulated views of
the MPC execution with a real execution. Namely the simulator for this hybrid game commits to the real
views. Indistinguishability follows from the privacy of the protocol. Next, we modify the fake commitments
into real commitments computed as in the real proof. The reduction for this proof follows easily as the
simulator is not required to open these commitments.
In this scenario the adversary corrupts a subset of parties I playing the role of
Party P(cid:28) is corrupted.
the veriﬁers in our protocol as well as the prover. The simulator for this case follows the honest veriﬁer’s
strategy fPkgk =2[I], with the exception that it extracts the prover’s witness by extracting one of the witness’
pairs. Recall that only the decommitment information is committed via the extractable commitment scheme
ComgWRAP. Since a commitment is made using tokens from every other party and there is at least one honest
51
party, the simulator can extract the decommitment information and from that extract the real value. We point
out that in general extracting out shares from only one-pair could cause the problem of “over-extraction”
where the adversary does not necessarily commit to shares of the same string in each pair. In our protocol
this is not an issue because in conjunction with committing to these shares, it also commits to the views of
an MPC-in-the-head protocol which veriﬁes that all shares are correct. Essentially, the soundness argument
follows by showing that if an adversary deviates, then with high-probability the set I will include a party
with an “inconsistent view”. This involves a careful argument relying on the so-called t-robustness of the
underlying MPC-in-the-head protocol. Such an argument is presented in [HV16] to get negligible soundness
from constant soundness and this proof can be naturally extended to our setting (our protocol simply involves
more repetitions but the MPC-in-the-head views still ensure correctness of all repetition simultaneously).
As for straight-line extraction, the argument follows as for the simpler protocol. Namely, when simu-
lating the veriﬁer’s role the simulator extracts the committed values within the forth message of the prover.
That is, following a similar procedure of extracting the committed message via obtaining the queries to the
token, it is sufﬁcient to obtain two shares of the witness as the robustness of the MPC protocol ensures that
all the pairs correspond to the same witness.
CP -Hybrid
6.2 Warmup: Simple MPC Protocol in the F 1:M
We next describe our MPC protocol in the F 1:M
CP -hybrid. On a high-level, we follow GMW-style compilation
[GMW87] of a semi-honest secure protocol (cid:5) to achieve malicious security using the F 1:M
CP -functionality.
Without loss of generality, we assume that in each round of the semi-honest MPC protocol (cid:5), each party
broadcasts a single message that depends on its input and randomness and on the messages that it received
from all parties in all previous rounds. We let mi;j denote the message sent by the ith party in the jth round
in the protocol (cid:5). We deﬁne the function (cid:25)i such that mi;t = (cid:25)i(xi; ri; (M1; : : : ; Mt(cid:0)1)) where mi;t is the
tth message generated by party Pi in protocol (cid:5) with input xi, randomness ri and where Mr is the message
sent by all parties in round i of (cid:5).
Protocol description. Our protocol (cid:5)MPC proceeds as follows:
Round 1. In the ﬁrst round, the parties commit to their inputs and randomness. More precisely, on input
and
xi, party Pi samples random strings ri;1; ri;2; : : : ; ri;n and sends (commit; sid;P; w) to F 1:M
w = (x; Ri) where Ri = (ri;1; ri;2; : : : ; ri;n).
CP
Round 2. Pi broadcasts shares Ri = Ri (cid:0) fri;ig and sends (prove; Pi;P; Ri). Let M0 = (R1; : : : ; Rn).
Round 2 + (cid:14). Let M(cid:14)(cid:0)1 be the messages broadcast by all parties in rounds 3; 4; : : : ; 2 + ((cid:14) (cid:0) 1) and let
CP the
mi;(cid:14) = (cid:25)i(xi; ri; (M1; : : : ; M(cid:14)(cid:0)1)) where ri = (cid:8)jrj;i. Pi broadcasts mi;(cid:14) and sends to F 1:M
message (prove; Pi;P; M t(cid:0)1 : mi;(cid:14)) where M (cid:14)(cid:0)1 = (M0; M1; : : : ; M(cid:14)(cid:0)1).
The NP-relation R used to instantiate the F 1:M
1. (M0; Ri) : if M0 contains Ri as its ith component where Ri = Ri (cid:0) fri;ig and Ri = fri;1; : : : ; ri;ng.
2. ((M (cid:14)(cid:0)1; mi;(cid:14)); (xi; Ri)) : if (M0; Ri) 2 R and mi;(cid:14) = (cid:25)i(xi; ri; (M1; : : : ; M(cid:14)(cid:0)1)) where ri =
CP functionality will include:
(cid:8)j2[n]rj;i, M (cid:14)(cid:0)1 = (M0; M1 : : : ; M(cid:14)(cid:0)1) and Ri = fri;1; : : : ; ri;ng.
52
CP -hybrid.
Theorem 6.3 Let f be any deterministic polynomial-time function with n inputs and a single output. As-
sume the existence of one-way functions and an n-party semi-honest MPC protocol (cid:5). Then the protocol
(cid:5)MPC GUC realizes Ff in the F 1:M
Proof: Let A be a malicious PPT real adversary attacking protocol (cid:5)MPC in the F 1:M
CP -hybrid model. We
construct an ideal adversary S with access to Ff which simulates a real execution of (cid:5)MPC with A such
that no environment Z can distinguish the ideal process with S interacting with Ff from a real execution of
(cid:5)MPC with A in the F 1:M
CP -hybrid. S starts by invoking a copy of A and running a simulated interaction of
A with environment Z, emulating the honest party. We describe the actions of S for every corruption case.