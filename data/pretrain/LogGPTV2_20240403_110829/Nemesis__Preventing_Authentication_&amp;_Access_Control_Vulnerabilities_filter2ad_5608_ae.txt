web application user by the script. Successful exploitation
of this vulnerability gives an attacker the ability to access
any user’s private messages.
Using Nemesis, when this attack is exploited, the at-
tacker can fool the private message script into thinking he
is an arbitrary user due to a missing access control check.
The shadow authentication for the attack still has the last
safe, correct authenticated username, and is not affected
by the attack. Thus, the attacker is unable to access any
unauthorized messages, because our ACL rules only allow
a user to retrieve messages from the private message table
when the sender or recipient ﬁeld of the message is equal
to the current shadow authenticated user. Similarly, the
attacker cannot abuse the private message script to forge
messages, as our ACLs constrain any messages inserted
into the private message table to have the sender ﬁeld set
to the current shadow authenticated username.
DeluxeBB allows admin users to execute arbitrary SQL
queries. We veriﬁed that this results in false positives in
existing DIFT SQL injection protection analyses. After
adding an ACL allowing SQL injection for web clients
shadow authenticated as the admin user, all SQL injection
false positives were eliminated.
6.7 PhpMyAdmin
PhpMyAdmin is a popular web application used to re-
motely administer and manage MySQL databases. This
application does not build its own authentication sys-
tem; instead, it checks usernames and passwords against
MySQL’s own user database. A web client is validated
only if the underlying MySQL database accepts their user-
name and password.
We treat the MySQL database connection function
as a third-party authentication function as detailed in
Section 3.2.2. We instrumented the call to the MySQL
database connection function to perform shadow authenti-
cation, authenticating a user if the username and password
supplied to the database are both tainted, and if the login
was successful.
The ACL for phpMyAdmin is very different from other
web applications, as phpMyAdmin is intended to provide
an authenticated user with unrestricted access to the un-
derlying database. The only ACL we include is a rule
allowing authenticated users to submit full SQL database
queries. We implemented this by modifying our SQL
injection protection policy deﬁned in Section 5.6 to treat
tainted SQL operators in user input as unsafe only when
the current user was unauthenticated. Without this pol-
icy, any attempt to submit a query as an authenticated
user results in a false positive in the DIFT SQL injection
protection policy. We conﬁrmed that adding this ACL
removes all observed SQL injection false positives, while
still preventing unauthenticated users from submitting
SQL queries.
6.8 Performance
We also performed performance tests on our prototype im-
plementation, measuring overhead against an unmodiﬁed
version of PHP. We used the bench.php microbenchmark
distributed with PHP, where our overhead was 2.9% com-
pared to unmodiﬁed PHP. This is on par with prior results
reported by object-level PHP tainting projects [29]. How-
ever, bench.php is a microbenchmark which performs
CPU-intensive operations. Web applications often are
network or I/O-bound, reducing the real-world perfor-
mance impact of our information ﬂow tracking and access
checks.
To measure performance overhead of our prototype
for web applications, we used the Rice University Bid-
ding System (RUBiS) [24]. RUBiS is a web application
benchmark suite, and has a PHP implementation that is
approximately 2,100 lines of code. Our ACL for RU-
BiS prevents users from impersonating another user when
placing bids, purchasing an item, or posting a bid com-
ment. Three access checks were added to enforce this
ACL. We compared latency and throughput for our pro-
totype and an unmodiﬁed PHP, and found no discernible
performance overhead.
7 Future Work
There is much opportunity for further research in pre-
venting authentication bypass attacks. A fully developed,
robust policy language for expressing access control in
web applications must be developed. This will require
support for SQL query rewriting, which can be imple-
mented by developing a full SQL query parser or by using
database table views and triggers similar to the approach
described in [18].
Additionally, all of our ACL rules are derived from
real-world behavior observed when using the web appli-
cation. While we currently generate such ACLs manually,
it should be possible to create candidate ACLs automati-
cally. A log of all database and ﬁle operations, as well as
the current shadow authenticated user at the time of the
14
operation, would be recorded. Using statistical techniques
such as machine learning [14], this log could be analyzed
and access control ﬁles generated based on application
behavior. This would allow system administrators to au-
tomatically generate candidate ACL lists for their web
applications without a precise understanding of the access
control rules used internally by the webapp.
8 Related Work
Preventing web authentication and authorization vulner-
abilities is a relatively new area of research. The only
other work in this area of which we are aware is the
CLAMP research project [18]. CLAMP prevents autho-
rization vulnerabilities in web applications by migrating
the user authentication module of a web application into
a separate, trusted virtual machine (VM). Each new login
session forks a new, untrusted session VM and forwards
any authentication credentials to the authentication VM.
Authorization vulnerabilities are prevented by a trusted
query restricter VM which interposes on all session VM
database accesses, examining queries to enforce the ap-
propriate ACLs using the username supplied by the au-
thentication VM.
In contrast to Nemesis, CLAMP does not prevent au-
thentication vulnerabilities as the application authentica-
tion code is part of the trusted user authentication VM.
CLAMP also cannot support access control policies that
require taint information as it does not use DIFT. Further-
more, CLAMP requires a new VM to be forked when
a user session is created, and experimental results show
that one CPU core could only fork two CLAMP VMs per
second. This causes signiﬁcant performance degradation
for throughput-driven, multi-user web applications that
have many simultaneous user sessions.
Researchers have extensively explored the use of DIFT
to prevent security vulnerabilities. Robust defenses
against SQL injection [15, 27], cross-site scripting [25],
buffer overﬂows [5] and other attacks have all been pro-
posed. DIFT has been used to prevent security vulner-
abilities in most popular web programming languages,
including Java [8], PHP [16], and even C [15]. This pa-
per shows how DIFT techniques can be used to address
authentication and access control vulnerabilities. Fur-
thermore, DIFT-based solutions to attacks such as SQL
injection have false positives in the real-world due to a
lack of authentication information. Nemesis avoids such
false positives by incorporating authentication and autho-
rization information at runtime.
Much work has also been done in the ﬁeld of secure
web application design. Information-ﬂow aware program-
ming language extensions such as Sif [4] have been de-
veloped to prevent information leaks and security vulner-
abilities in web application programs using the language
and compiler. Unfortunately these approaches typically
require legacy applications to be rewritten in the new,
secure programming language.
Some web application frameworks provide common
authentication or authorization code libraries [1, 2, 7].
The use of these authentication libraries is optional, and
many application developers choose to partially or en-
tirely implement their own authentication and authoriza-
tion systems. Many design decisions, such as how users
are registered, how lost passwords are recovered, or what
rules govern access control to particular database tables
are application-speciﬁc. Moreover, these frameworks do
not connect the user authentication mechanisms with the
access control checks in the underlying database or ﬁle
system. As a result, the application programmer must
still apply access checks at every relevant ﬁlesystem and
database operation, and even a single mistake can com-
promise the security of the application.
Operating systems such as HiStar [32] and Flume [12]
provide process-granularity information ﬂow control sup-
port. One of the key advantages of these systems is that
they give applications the ﬂexibility to deﬁne their own
security policies (in terms of information ﬂow categories),
which are then enforced by the underlying kernel. A web
application written for HiStar or Flume can implement its
user authentication logic in terms of the kernel’s informa-
tion ﬂow categories. This allows the OS kernel to then
ensure that one web user cannot access data belonging to
a different web user, even though the OS kernel doesn’t
know how to authenticate a web user on its own. Our
system provides two distinct advantages over HiStar and
Flume. First, we can mitigate vulnerabilities in existing
web applications, without requiring the application to be
re-designed from scratch for security. Second, by pro-
viding sub-process-level information ﬂow tracking and
expressive access control checks instead of labels, we
allow programmers to specify precise security policies in
a small amount of code.
9 Conclusion
This paper presented Nemesis, a novel methodology for
preventing authentication and access control bypass at-
tacks in web applications. Nemesis uses Dynamic In-
formation Flow Tracking to automatically detect when
application-speciﬁc users are authenticated, and con-
structs a shadow authentication system to track user au-
thentication state through an additional HTTP cookie.
Programmers can specify access control lists for re-
sources such as ﬁles or database entries in terms of
application-speciﬁc users, and Nemesis automatically en-
forces these ACLs at runtime. By providing a shadow
authentication system and tightly coupling the authenti-
cation system to authorization checks, Nemesis prevents
15
[12] M. Krohn, A. Yip, M. Brodsky, N. Cliffer, M. F. Kaashoek,
E. Kohler, and R. Morris.
Information ﬂow control for stan-
dard OS abstractions. In Proceedings of the 21st ACM SIGOPS
Symposium on Operating Systems Principles, 2007.
[13] Linpha User Authentication Bypass Vulnerability. http://
secunia.com/advisories/12189, 2004.
[14] E. Martin and T. Xie. Inferring access-control policy properties
via machine learning. In Proc. 7th IEEE Workshop on Policies for
Distributed Systems and Networks, 2006.
[15] S. Nanda, L.-C. Lam, and T. Chiueh. Dynamic multi-process infor-
mation ﬂow tracking for web application security. In Proceedings
of the 8th International Conference on Middleware, 2007.
[16] A. Nguyen-Tuong, S. Guarnieri, D. Greene, J. Shirley, and
D. Evans. Automatically Hardening Web Applications using
Precise Tainting. In Proceedings of the 20th IFIP Intl. Information
Security Conference, 2005.
[17] Top 10 2007 - Broken Authentication and Session Manage-
ment. http://www.owasp.org/index.php/Top_10_
2007-A7, 2007.
[18] B. Parno, J. M. McCune, D. Wendlandt, D. G. Andersen, and
A. Perrig. CLAMP: Practical Prevention of Large-Scale Data
Leaks. In Proceedings of the 2009 IEEE Symposium on Security
and Privacy, May 2009.
[19] phpFastNews Cookie Authentication Bypass Vulnerability. http:
//www.securityfocus.com/bid/31811, 2008.
[20] PHP iCalendar Cookie Authentication Bypass Vulnerability.
http://www.securityfocus.com/bid/31320, 2008.
[21] Php Stat Vulnerability Discovery. http://www.soulblack.
com.ar/repo/papers/advisory/PhpStat_
advisory.txt, 2005.
[22] PHP: Using Register Globals.
register_globals.
http://us2.php.net/
[23] PhpMyAdmin control user. http://wiki.cihar.com/
pma/controluser.
[24] Rice University Bidding System.
objectweb.org, 2009.
http://rubis.
[25] P. Saxena, D. Song, and Y. Nadji. Document structure integrity:
A robust basis for cross-site scripting defense. Network and Dis-
tributed Systems Security Symposium, 2009.
[26] S. R. Shariq, A. Mendelzon, S. Sudarshan, and P. Roy. Extending
Query Rewriting Techniques for Fine-Grained Access Control. In
Proceedings of the ACM SIGMOD International Conference on
Management of Data, 2004.
[27] Z. Su and G. Wassermann. The Essence of Command Injection At-
tacks in Web Applications. In Proceedings of the 33rd Symposium
on Principles of Programming Languages, 2006.
[28] The MITRE Corporation. Common vulnerabilities and expo-
sures (CVE) database. http://cve.mitre.org/data/
downloads/.
[29] W. Venema. Taint support for php. http://wiki.php.net/
rfc/taint, 2008.
[30] Web Application Security Consortium. 2007 web application secu-
rity statistics. http://www.webappsec.org/projects/
statistics/wasc_wass_2007.pdf.
[31] WordPress Cookie Integrity Protection Unauthorized Access
Vulnerability. http://www.securityfocus.com/bid/
28935, 2008.
[32] N. Zeldovich, S. Boyd-Wickizer, E. Kohler, and D. Mazi`eres.
Making information ﬂow explicit in histar. In Proceedings of the
7th Symposium on Operating Systems Design and Implementation,
2006.
a wide range of authentication and access control bypass
attacks found in today’s web applications. Nemesis can
also be used to improve precision in other security tools,
such as those that ﬁnd SQL injection bugs, by avoiding
false positives for properly authenticated requests.
We implemented a prototype of Nemesis in the PHP
interpreter, and evaluated its security by protecting seven
real-world applications. Our prototype stopped all known
authentication and access control bypass attacks in these
applications, while requiring only a small amount of work
from the application developer, and introducing no false
positives. For most applications we evaluated, the pro-
grammer had to write less than 100 lines of code to avoid
authentication and access control vulnerabilities. We also
measured performance overheads using PHP benchmarks,
and found that our impact on web application perfor-
mance was negligible.
Acknowledgments
We would like to thank the anonymous reviewers for their
feedback. Michael Dalton was supported by a Sequoia
Capital Stanford Graduate Fellowship. This work was
supported NSF Awards number 0546060 and 0701607.
References
[1] Turbogears documentation: Identity management. http://
docs.turbogears.org/1.0/Identity.
[2] Zope
security.
http://www.zope.org/
Documentation/Books/ZDG/current/Security.
stx.
[3] BilboBlog admin/index.php Authentication Bypass Vulnerability.
http://www.securityfocus.com/bid/30225, 2008.
[4] S. Chong, K. Vikram, and A. C. Myers. Sif: Enforcing conﬁden-
tiality and integrity in web applications. In Proceedings of the
16th Annual USENIX Security Symposium, 2007.
[5] M. Dalton, H. Kannan, and C. Kozyrakis. Real-World Buffer Over-
ﬂow Protection for Userspace and Kernelspace. In Proceedings of
the 17th Annual USENIX Security Symposium, 2008.
[6] DeluxeBB PM.PHP Unauthorized Access Vulnerability. http:
//www.securityfocus.com/bid/19418, 2006.
[7] Django Software Foundation.
User authentication in
Django. http://docs.djangoproject.com/en/dev/
topics/auth/.
[8] V. Haldar, D. Chandra, and M. Franz. Dynamic taint propagation
for java. Annual Computer Security Applications Conference,
2005.
[9] N. Hardy. The Confused Deputy: (or why capabilities might have
been invented). SIGOPS Operating System Review, 1988.
[10] Microsoft Internet Information Server Hit Highlighting Authenti-
cation Bypass Vulnerability. http://www.securityfocus.
com/bid/24105, 2007.
[11] M. Krohn, P. Efstathopoulos, C. Frey, F. Kaashoek, E. Kohler,
D. Mazi`eres, R. Morris, M. Osborne, S. VanDeBogart, and
D. Ziegler. Make Least Privilege a Right (Not a Privilege). In
Proceedings of the 10th Workshop on Hot Topics in Operating
Systems, 2005.
16