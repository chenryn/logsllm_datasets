    }
通过InitProtection方法调用AddDataProtection和ConfigureDataProtection扩展方法，通
过依赖注入添加数据保护，并配置它。AddDataProtection方法通过调用
DataProtectionServices.GetDefaultServices静态方法，注册默认服务。
ConfigureDataProtection方法包含一个有趣的特殊部分。在这里，它定义了密钥应该
如何保存。示例代码把DirectoryInfo实例传递给PersistKeysToFileSystem方法，把密钥保存
在实际的目录中。另一个选择是把密钥保存到注册表（PersistKeysToRegistry）中，可以
创建自己的方法，把密钥保存在定制的存储中。所创建密钥的生命周期由
SetDefaultKeyLifetime方法定义。接下来，密钥通过调用ProtectKeysWithDpapi来保护。这
个方法使用DPAPI保护密钥，加密与当前用户一起存储的密钥。ProtectKeysWithCertificate
允许使用证书保护密钥。API还定义了UseEphemeralDataProtectionProvider方法，把密钥存
储在内存中。再次启动应用程序时，需要生成新密钥。这个功能非常适合于单元测试（代
码文件DataProtectionSample / Program.cs）：
    public static MySafe InitProtection()
    {
      var serviceCollection = new ServiceCollection();
      serviceCollection.AddDataProtection();
        .PersistKeysToFileSystem(new DirectoryInfo("."))
        .SetDefaultKeyLifetime(TimeSpan.FromDays(20))
        .ProtectKeysWithDpapi();
      IServiceProvider services = serviceCollection.BuildServiceProvider();
      return ActivatorUtilities.CreateInstance(services);
    }
现在，实现了数据保护应用程序的核心，Write和Read方法可以利用MySafe，加密和
解密用户的内容：
    public static void Write(MySafe safe, string fileName)
    {
      WriteLine("enter content to write:");
      string content = ReadLine();
      string encrypted = safe.Encrypt(content);
      File.WriteAllText(fileName, encrypted);
      WriteLine($"content written to {fileName}");
    }
    public static void Read(MySafe safe, string fileName)
    {
      string encrypted = File.ReadAllText(fileName);
      string decrypted = safe.Decrypt(encrypted);
      WriteLine(decrypted);
    }
24.4 资源的访问控制
在操作系统中，资源（如文件和注册表键，以及命名管道的句柄）都使用访问控制列
表（ACL）来保护。图24-2显示了这个映射的结构。资源有一个关联的安全描述符。安全
描述符包含了资源拥有者的信息，并引用了两个访问控制列表：自由访问控制列表
（Discretionary Access Control List, DACL）和系统访问控制列表（System Access Control
List, 
SACL）。DACL用来确定谁有访问权；SACL用来确定安全事件日志的审核规则。
ACL包含一个访问控制项（Access Control Entries, ACE）列表。ACE包含类型、安全标识
符和权限。在DACL中，ACE的类型可以是允许访问或拒绝访问。可以用文件设置和获得
的权限是创建、读取、写入、删除、修改、改变许可和获得拥有权。
图24-2
读取和修改访问控制的类在System.Security.AccessControl名称空间中。下面的程序说
明了如何从文件中读取访问控制列表。
FileAccessControl示例应用程序使用了如下依赖项和名称空间：
依赖项：
    NETStandard.Library
    System.IO.FileSystem
    System.IO.FileSystem.AccessControl
名称空间：
    System.IO
    System.Security.AccessControl
    System.Security.Principal
    static System.Console
FileStream类定义了GetAccessControl（）方法，该方法返回一个FileSecurity对象。
FileSecurity是一个.NET类，它表示文件的安全描述符。FileSecurity类派生自基类
ObjectSecurity、CommonObject-Security、NativeObjectSecurity和FileSystemSecurity。其他
表示安全描述符的类有CryptoKeySecurity、EventWaitHandleSecurity、MutexSecurity、
RegistrySecurity、SemaphoreSecurity、PipeSecurity和ActiveDirectorySecurity。所有这些对
象都可以使用访问控制列表来保护。一般情况下，对应的.NET类定义了
GetAccessControl（）方法，返回相应的安全类；例如，Mutex.GetAccessControl（）方法
返回一个MutexSecurity类，PipeStream.GetAccessControl（）方法返回一个PipeSecurity
类。
FileSecurity类定义了读取、修改DACL和SACL的方法。GetAccessRules（）方法以
Authorization-RuleCollection类的形式返回DACL。要访问SACL，可以使用GetAuditRules
方法。
在GetAccessRules（）方法中，可以确定是否应使用继承的访问规则（不仅仅是用对
象直接定义的访问规则）。最后一个参数定义了应返回的安全标识符的类型。这个类型必
须派生自基类IdentityReference。可能的类型有NTAccount和SecurityIdentifier。这两个类都
表示用户或组。NTAccount类按名称查找安全对象，SecurityIdentifier类按唯一的安全标识
符查找安全对象。
返回的AuthorizationRuleCollection包含AuthorizationRule对象。AuthorizationRule对象
是ACE的.NET表示。在这里的例子中，因为访问一个文件，所以AuthorizationRule对象可
以强制转换为FileSystemAccessRule类型。在其他资源的ACE中，存在不同的.NET表示，
例如MutexAccessRule和PipeAccessRule。在FileSystemAccessRule类中，
AccessControlType、FileSystemRights和IdentityReference属性返回ACE的相关信息（代码
文件FileAccessControl/Program.cs）。
    class Program
    {
      static void Main(string[] args)
      {
        string filename = null;
        if (args.Length == 0) return;
        filename = args[0];
        using (FileStream stream = File.Open(filename, FileMode.Open))
        {
        FileSecurity securityDescriptor = stream.GetAccessControl();
        AuthorizationRuleCollection rules =
            securityDescriptor.GetAccessRules(true, true,
            typeof(NTAccount));
        foreach (AuthorizationRule rule in rules)
        {
      var fileRule = rule as FileSystemAccessRule;
      WriteLine($"Access type: {fileRule.AccessControlType}");
      WriteLine($"Rights: {fileRule.FileSystemRights}");
      WriteLine($"Identity: {fileRule.IdentityReference.Value}");
      WriteLine();
        }
        }
      }
    }
运行应用程序，并传递一个文件名，就可以看到文件的访问控制列表。这里的输出列
出了管理员和系统的全部控制权限、通过身份验证的用户的修改权限，以及属于Users组
的所有用户的读取和执行权限。
    Access type: Allow
    Rights: FullControl
    Identity: BUILTIN\Administrators
    Access type: Allow
    Rights: FullControl
    Identity: NT AUTHORITY\SYSTEM
    Access type: Allow
    Rights: FullControl
    Identity: BUILTIN\Administrators
    Access type: Allow
    Rights: FullControl
    Identity: TheOtherSide\Christian
设置访问权限非常类似于读取访问权限。要设置访问权限，几个可以得到保护的资源
类提供了SetAccessControl（）和ModifyAccessControl（）方法。这里的示例代码调用File
类的SetAccessControl（）方法，以修改文件的访问控制列表。给这个方法传递一个
FileSecurity对象。FileSecurity对象用FileSystemAccessRule对象填充。这里列出的访问规则
拒绝Sales组的写入访问权限，给Everyone组提供了读取访问权限，并给Developers组提供
了全部控制权限。
  注意： 只有定义了Windows组Sales和Developers，这个程序才能在系统上运
行。可以修改程序，使用自己环境下的可用组。
    private void WriteAcl(string filename)
    {
      var salesIdentity = new NTAccount("Sales");
      var developersIdentity = new NTAccount("Developers");
      var everyOneIdentity = new NTAccount("Everyone");
      var salesAce = new FileSystemAccessRule(salesIdentity,
        FileSystemRights.Write, AccessControlType.Deny);
      var everyoneAce = new FileSystemAccessRule(everyOneIdentity,
        FileSystemRights.Read, AccessControlType.Allow);
      var developersAce = new FileSystemAccessRule(developersIdentity,
        FileSystemRights.FullControl, AccessControlType.Allow);
      var securityDescriptor = new FileSecurity();
      securityDescriptor.SetAccessRule(everyoneAce);
      securityDescriptor.SetAccessRule(developersAce);
      securityDescriptor.SetAccessRule(salesAce);
      File.SetAccessControl(filename, securityDescriptor);
    }
  注意： 打开Properties窗口，在Windows资源管理器中选择一个文件，选择
Security选项卡，列出访问控制列表，就可以验证访问规则。
24.5 使用证书发布代码
可以利用数字证书来对程序集进行签名，让软件的消费者验证软件发布者的身份。根
据使用应用程序的地点，可能需要证书。例如，用户利用ClickOnce安装应用程序，可以
验证证书，以信任发布者。Microsoft通过Windows Error Reporting，使用证书来找出哪个
供应商映射到错误报告。
  注意： ClickOnce参见第36章。
在商业环境中，可以从Verisign或Thawte之类的公司中获取证书。从软件厂商购买证
书（而不是创建自己的证书）的优点是，那些证书可以证明软件的真实性有很高的可信
度，软件厂商是可信的第三方。但是，为了测试，.NET提供了一个命令行实用程序，使
用它可以创建测试证书。创建证书和使用证书发布软件的过程相当复杂，但是本节用一个
简单的示例说明这个过程。
设想有一个名叫ABC的公司。公司的软件产品（simple.exe）应该值得信赖。首先，
输入下面的命令，创建一个测试证书：
    >makecert -sv abckey.pvk -r -n "CN=ABC Corporation" abccorptest.cer
这条命令为ABC公司创建了一个测试证书，并把它保存到abccorptest.cer文件中。-sv
abckey.pvk参数创建一个密钥文件，来存储私钥。在创建密钥文件时，需要输入一个必须
记住的密码。
创建证书后，就可以用软件发布者证书测试工具（Cert2spc.exe）创建一个软件发布
者测试证书：
    >cert2spc abccorptest.cer abccorptest.spc
有了存储在spc文件中的证书和存储在pvk文件中的密钥文件，就可以用pvk2pfx实用
程序创建一个包含证书和密钥文件的pfx文件：
    >pvk2pfx -pvk abckey.pvk -spc abccorptest.spc -pfx abccorptest.pfx
现在可以用signtool.exe实用程序标记程序集了。使用sign选项来标记，用-f指定pfx文
件中的证书，用-v指定输出详细信息：
    >signtool sign -f abccorptest.pfx -v simple.exe
为了建立对证书的信任，可使用证书管理器certmgr或MMC插件Certificates，通过
Trusted Root Certification Authorities和Trusted Publishers安装它。之后就可以使用signtool验
证签名是否成功：
    >signtool verify -v -a simple.exe
24.6 小结
本章讨论了与.NET应用程序相关的几个安全性方面。用户用标识和主体表示，这些
类实现了IIdentity和IPrincipal接口。还介绍了如何访问标识中的声称。
本章介绍了加密方法，说明了数据的签名和加密，以安全的方式交换密钥。.NET提
供了对称加密算法和非对称加密算法，以及散列和签名。
使用访问控制列表还可以读取和修改对操作系统资源（如文件）的访问权限。ACL的
编程方式与安全管道、注册表键、Active Directory项以及许多其他操作系统资源的编程方
式相同。
在许多情况下，可以在较高的抽象级别上处理安全性。例如，使用HTTPS访问Web服
务器，在后台交换加密密钥。使用WCF可以修改配置文件，来定义要使用的加密算法。
在完整的.NET堆栈中，File类提供了Encrypt方法（使用NTFS文件系统），轻松地加密文
件。知道这个功能如何发挥作用也很重要。
第25章将介绍网络。当创建在网络上通信的应用程序时，了解安全性是非常重要的。
阅读下一章，就可以让Alice和Bob在网络上通信，而不仅仅在本章的进程中通信。第25章
介绍网络的基础。
第25章
网络
本章要点
● 使用HttpClient
● 操纵IP地址，执行DNS查询
● 用WebListener创建服务器
● 用TCP、UDP和套接字类进行套接字编程
本章源代码下载地址（wrox.com）：
打开网页http://www.wrox.com/go/professionalcsharp6，单击Download Code选项卡即可
下载本章源代码。本章代码分为以下几个主要的示例文件：
● HttpClientSample
● WinAppHttpClient
● HttpServer
● Utilities
● DnsLookup
● HttpClientUsingTcp
● TcpServer
● WPFAppTcpClient
● UdpReceiver
● UdpSender
● SocketServer
● SocketClient
25.1 网络
本章将采取非常实用的网络方法，结合示例讨论相关理论和相应的网络概念。本章并
不是计算机网络的指南，但会介绍如何使用.NET Framework进行网络通信。
本章介绍了如何使用网络协议创建客户端和服务器。从最简单的示例开始，阐明怎样
给服务器发送请求和在响应中存储返回的信息。
然后讨论如何创建HTTP服务器，使用实用工具类分拆和创建URI，把主机名解析为
IP地址。还介绍了通过TCP和UDP收发数据，以及如何利用Socket类。
在网络环境下，我们最感兴趣的两个名称空间是System.Net和System.Net.Sockets。
System.Net名称空间通常与较高层的操作有关，例如下载和上传文件，使用HTTP和其他
协议进行Web请求等；而System.Net.Sockets名称空间包含的类通常与较低层的操作有关。
如果要直接使用套接字或TCP/IP之类的协议，这个名称空间中的类就非常有用，这些类中
的方法与Windows套接字（Winsock）API函数（派生自Berkeley套接字接口）非常类似。
本章介绍的一些对象位于System.IO名称空间中。
25.2 HttpClient类
HttpClient类用于发送HTTP请求，接收请求的响应。它在System.Net.Http名称空间
中。System.Net.Http名称空间中的类有助于简化在客户端和服务器上使用Web服务。
HttpClient类派生于HttpMessageInvoker类，这个基类负责执行SendAsync方法。
SendAsync方法是HttpClient类的主干。如本节后面所述，这个方法有几个派生物。顾名思
义，SendAsync方法调用是异步的，这样就可以编写一个完全异步的系统来调用Web服
务。
25.2.1 发出异步的Get请求
本章的下载代码示例是HttpClientSample。它以不同的方式异步调用Web服务。为了
演示本例使用的不同的方法，使用了命令行参数。
示例代码使用了以下依赖项和名称空间：
依赖项
    NETStandard.Library
    System.Net.Http
名称空间
    System
    System.Net
    System.Net.Http
    System.Net.Http.Headers
    System.Threading
    System.Threading.Tasks
    static System.Console
第一段代码实例化一个HttpClient对象。这个HttpClient对象是线程安全的，所以一个
HttpClient对象就可以用于处理多个请求。HttpClient的每个实例都维护它自己的线程池，
所以HttpClient实例之间的请求会被隔离。调用Dispose方法释放资源。
接着调用GetAsync，给它传递要调用的方法的地址，把一个HTTP GET请求发送给服
务器。GetAsync调用被重载为带一个字符串或URI对象。在本例中调用Microsoft的OData
示例站点http://services.odata.org，但可以修改这个地址，以调用任意多个REST 
Web服
务。
对GetAsync的调用返回一个HttpResponseMessage对象。HttpResponseMessage类表示
包含标题、状态和内容的响应。检查响应的IsSuccessfulStatusCode属性，可以确定请求是
否成功。如果调用成功，就使用ReadAsStringAsync方法把返回的内容检索为一个字符串
（代码文件HttpClientSample/Program.cs）：
    private const string NorthwindUrl =
      "http://services.data.org/Northwind/Northwind.svc/Regions";
    private const string IncorrectUrl =
      "http://services.data.org/Northwind1/Northwind.svc/Regions";
    private async Task GetDataSimpleAsync()
    {
      using (var client = new HttpClient())
      {
        HttpResponseMessage response = await client.GetAsync(NorthwindUrl);
        if(response.IsSuccessStatusCode)
        {
        WriteLine($"Response Status Code: {(int)response.StatusCode} " +
          $"{response.ReasonPhrase}");
        string responseBodyAsText = await response.Content.ReadAsStringAsync();
        WriteLine($"Received payload of {responseBodyAsText.Length} characters");
        WriteLine();
        WriteLine(responseBodyAsText);
        }
      }
    }
用命令行参数- s执行这段代码，产生以下输出：
    Response Status Code: 200 OK