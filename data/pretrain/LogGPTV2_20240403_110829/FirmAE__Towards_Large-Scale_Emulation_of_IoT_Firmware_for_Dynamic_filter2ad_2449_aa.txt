title:FirmAE: Towards Large-Scale Emulation of IoT Firmware for Dynamic
Analysis
author:Mingeun Kim and
Dongkwan Kim and
Eunsoo Kim and
Suryeon Kim and
Yeongjin Jang and
Yongdae Kim
FirmAE: Towards Large-Scale Emulation of IoT Firmware for
Dynamic Analysis
Mingeun Kim
The Affiliated Institute of ETRI
PI:EMAIL
Suryeon Kim
Ministry of National Defense
PI:EMAIL
Dongkwan Kim
KAIST
PI:EMAIL
Yeongjin Jang
Oregon State University
PI:EMAIL
Eunsoo Kim
KAIST
PI:EMAIL
Yongdae Kim
KAIST
PI:EMAIL
ABSTRACT
One approach to assess the security of embedded IoT devices is
applying dynamic analysis such as fuzz testing to their firmware in
scale. To this end, existing approaches aim to provide an emulation
environment that mimics the behavior of real hardware/peripherals.
Nonetheless, in practice, such approaches can emulate only a small
fraction of firmware images. For example, Firmadyne, a state-of-the-
art tool, can only run 183 (16.28%) of 1,124 wireless router/IP-camera
images that we collected from the top eight manufacturers. Such a
low emulation success rate is caused by discrepancy in the real and
emulated firmware execution environment.
In this study, we analyzed the emulation failure cases in a large-
scale dataset to figure out the causes of the low emulation rate. We
found that widespread failure cases often avoided by simple heuris-
tics despite having different root causes, significantly increasing the
emulation success rate. Based on these findings, we propose a tech-
nique, arbitrated emulation, and we systematize several heuristics
as arbitration techniques to address these failures. Our automated
prototype, FirmAE, successfully ran 892 (79.36%) of 1,124 firmware
images, including web servers, which is significantly (≈4.8x) more
images than that run by Firmadyne. Finally, by applying dynamic
testing techniques on the emulated images, FirmAE could check
320 known vulnerabilities (306 more than Firmadyne), and also find
12 new 0-days in 23 devices.
CCS CONCEPTS
• Security and privacy → Embedded systems security; • Com-
puter systems organization → Firmware.
KEYWORDS
Firmware, embedded device, emulation, dynamic analysis
ACM Reference Format:
Mingeun Kim, Dongkwan Kim, Eunsoo Kim, Suryeon Kim, Yeongjin Jang,
and Yongdae Kim. 2020. FirmAE: Towards Large-Scale Emulation of IoT
Firmware for Dynamic Analysis. In Annual Computer Security Applications
Conference (ACSAC 2020), December 7–11, 2020, Austin, USA. ACM, New
York, NY, USA, 13 pages. https://doi.org/10.1145/3427228.3427294
Publication rights licensed to ACM. ACM acknowledges that this contribution was
authored or co-authored by an employee, contractor or affiliate of a national govern-
ment. As such, the Government retains a nonexclusive, royalty-free right to publish or
reproduce this article, or to allow others to do so, for Government purposes only.
ACSAC 2020, December 7–11, 2020, Austin, USA
© 2020 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-8858-0/20/12...$15.00
https://doi.org/10.1145/3427228.3427294
1 INTRODUCTION
The number of active Internet of things (IoT) devices is projected
to reach 34.2 billion by 2025 [36]. As numerous IoT devices are
connected to the Internet [33], they are exposed to cyber threats.
For instance, Linux-based IoT devices such as wireless routers and
IP cameras are often targeted for a large scale attacks. In the wild,
multiple backdoors were discovered from those devices [30, 38],
and malwares, such as Mirai and Satori, infected over millions of
such devices [5, 31, 32, 37].
To address security problems in such numerous IoT devices,
researchers have been focusing on analyzing firmware of those
devices in scale. Specifically, a stream of studies take an approach
to run device firmware in an emulated environment with virtual
hardware and then apply dynamic analysis to the firmware [12, 17,
23–25, 57, 60, 64]. With this approach, one can not only analyze
firmware dynamically without obtaining hardware but also utilize
cloud infrastructure to scale the security analysis. Among many,
Firmadyne [17] is the current state-of-the-art firmware emulation
framework that aims at enabling large-scale emulation for IoT de-
vices in general by providing a full-system emulation environment.
Problem: discrepancy in the real and virtual environment.
The approach is not a silver bullet in practice because running
firmware in a full-system emulation environment often fails due to
the inconsistencies between the real and the virtual, emulated envi-
ronment. Any discrepancies in the emulated environment may lead
the firmware execution to an unexpected state, resulting in a failure
of emulation and dynamic security analysis. Resolving this emula-
tion discrepancy is challenging because such inconsistencies stem
from the wide diversity in IoT device hardware and configurations.
Particularly, each of IoT devices equipped with specific hardware
devices from a plethora of manufacturers. Moreover, firmware often
relies on the configuration vectors, such as data in NVRAM, and an
emulated environment may miss such data because the data is only
available in hardware. Such convoluted circumstances does not
match with the emulation environment of Firmadyne. Its emulator,
QEMU [6], only supports few general devices and configurations,
and without putting extensive efforts on emulating each device and
configuration the problem will never disappear.
To see the effect of this problem in practice, we have obtained
1,124 wireless router and IP camera firmware images from top
eight vendors and ran them with Firmadyne. The result is alarming
as it can only emulate 183 of them (see Table 1). The majority
portion of firmware images (83.72%) left without analysis. Such
ACSAC 2020, December 7–11, 2020, Austin, USA
Mingeun Kim, Dongkwan Kim, Eunsoo Kim, Suryeon Kim, Yeongjin Jang, and Yongdae Kim
a low emulation success rate implies that, although Firmadyne
is designed to be generic by providing a full-system emulation
environment of a firmware, such an approach does not work in
practice, requiring many manual efforts to resolve inconsistencies
in emulated environment.
Motivating examples. Next, we show how we can handle the
inconsistencies manually as motivating examples. First, we ran the
firmware of D-Link DIR-505L to test CVE-2014-3936 [16] using
Firmadyne. Because the vulnerability is a stack-based buffer over-
flow in a web service running on firmware, exploitation requires
sending HTTP requests via the network interface of the emulated
environment. However, when we ran the firmware on Firmadyne,
we could not connect to the web service although the web server
is running correctly. From our analysis, we figured out that the
network configuration in the firmware does not match to the emu-
lated environment, and after we force to configure the network, we
were able to trigger the vulnerability. Second, we ran the firmware
of NETGEAR R6250 to test CVE-2017-5521 using Firmadyne. In this
case, the emulation failed with a kernel panic in the booting pro-
cedure. After we slightly modified the booting and kernel-related
configuration to match the virtual environment, we were able to
run the firmware and trigger the vulnerability.
Observations and goal. From these two examples, we observed
that a slight change in a configuration or device settings, which is
easy to apply, may let firmware emulation run without suffering
emulation discrepancy problem, which is difficult to handle. In this
regard, we believe that Firmadyne misses many chances of emulat-
ing and analyzing IoT firmware images not because of fundamental
problems in emulation but because of device setup failures, although
these can be easily handled. To address this issue, we aim at sys-
tematizing such heuristics via analyzing many emulation failure
cases, and ultimately, we aim to increase the chance of successful
firmware emulation than Firmadyne.
Our approach. We achieve this goal by investigating many emula-
tion failure cases as our first step. For the investigation, we collected
1124 firmware images from the top eight vendors [59]: 1079 wireless
routers and 45 IP cameras. For the emulation, we specifically focus
on emulating web services of wireless routers and IP cameras. This
is because the web interface is the part where remote attackers can
interact with, and numerous critical vulnerabilities have been found
in these services [5, 7, 12, 32, 51]. By using Firmadyne, we investi-
gated 437 emulation failure cases (among 527 firmware images in
AnalysisSet) and found that most cases fall into the following five
categories of problems: 1) boot-related problems, such as an incor-
rect boot sequence or absence of files, 2) network-related problems,
such as mismatches of network interface or improper configuration,
3) non-volatile RAM (NVRAM)-related problems, such as missing
library functions or customized formats, 4) kernel-related problems,
such as unsupported hardware or functions, and 5) minor problems,
such as unsupported commands or timing issues.
Our investigation resulted that failure cases in each category can
be resolved by applying simple heuristics even though they originate
from different root causes. For example, 227 images failed to set
up their network interfaces even though their web servers were
correctly running. Although the root causes of the failures may
vary, such as discrepancy in the number of available network ports,
the name of network device, etc., a heuristic that forces setting up
the network configuration that works in an emulated environment
can resolve the issue and enable dynamic analysis.
Based on this observation, we systemize those heuristics as a
technique, coined as arbitrated emulation, and develop several
arbitration techniques to bypass the failure cases. Instead of strictly
following the execution behavior of the firmware as is, arbitrated
emulation arbitrates between following the original behavior or
injecting proper interventions, i.e., intentional operations. Thereby,
it may slightly alter the original behavior of the firmware. However,
our goal is not to build an environment identical to the physical
device, but to create an environment conducive to the dynamic
analysis. In fact, our approach can emulate numerous firmware
images that previous approaches failed to emulate, and effectively
aid in finding real vulnerabilities.
After designing several arbitrations, we automate and parallelize
the entire firmware emulation procedure. Within 4h of testing 1,124
firmware images, our prototype, FirmAE, successfully emulated 892
(79.36% of total) images, which is more than four-times more than
Firmadyne (Table 1). Then, we ran exploits of previously known
vulnerabilities on the emulated images to verify whether arbitrated
emulation is useful for dynamic analysis. As a result, 320 known
vulnerabilities were successfully emulated on FirmAE which is 306
more successful cases than Firmadyne. We also built a simple fuzzer
on FirmAE, and found 23 unique vulnerabilities in 95 latest devices,
and responsibly reported them to the vendors.
cases and systematize failure handling heuristics.
In summary, the contributions of our study are as follows:
• We empirically investigate 437 firmware emulation failure
• We propose arbitrated emulation to apply those heuristics
to emulation environment. Our prototype, FirmAE, presents
a far higher emulation success rate (892 vs. 183) than the
state-of-the-art framework, Firmadyne.
• We confirm that arbitrated emulation is effective by redis-
covering 306 more known vulnerabilities than Firmadyne.
Additionally, with a simple fuzzer, FirmAE can find 23 new
vulnerabilities over 95 latest devices, out of which 12 were
0-days.
• We release the source code to encourage future studies.1
2 BACKGROUND
In this section, we explain how embedded devices are analyzed by
citing previous studies and present the state-of-the-art tool that we
employed as the basis of our approach.
2.1 Embedded device analysis process
To analyze an embedded device, the target firmware can be obtained
and analyzed with/without a physical device.
Firmware collection and unpacking. Typically, firmware can be
acquired from vendors’ websites, ftp servers, or third-party archives.
This can be done manually or by using a web crawler such as
Spider [41]. Firmware can also be directly dumped from the flash
memories in devices [46], although this requires a physical device.
1http://github.com/pr0v3rbs/FirmAE
FirmAE: Towards Large-Scale Emulation of IoT Firmware for Dynamic Analysis
ACSAC 2020, December 7–11, 2020, Austin, USA
A firmware image is then unpacked for later analysis. A single
image can include multiple contents. For example, Linux-based
firmware may have a bootloader, kernel, and filesystem. This image
is often compressed in various ways, such as LZMA, ZIP, or Gzip,
to save storage. To unpack an image, tools such as Binwalk [26],
Firmware-Mod-Kit [27], or FRAK [13] are often employed. In a
given image, these tools scan pre-defined signatures of various file
headers. When a signature matches, they extract the file from the
image, and continue to scan it to the end. Encrypted or customized
images also exist, for which signature matching cannot be used;
analyzing them is out of the scope of this study.
Analysis with physical devices. The unpacked firmware can be
analyzed with real devices. Zaddach et al. [62] and Marius et al. [44]
relayed process execution and peripheral access to real devices and
partially emulated target code using a JTAG interface. Similarly,
Kammerstetter et al. [28, 29] developed a proxy environment using
real devices and forwarded character device access to them. Cui et
al. [14, 15] and Kumar et al. [33] conducted a quantitative study of
embedded devices connected to the public Internet.
Analysis w/o devices. Another stream of studies have focused
on analyzing firmware without physical devices to scale up the
analysis. Researchers adopted static approaches on firmware [11,
52]; however, they often produce numerous false positives due to
the absence of runtime information. Nevertheless, Costin et al. [11]
showed statistics of vulnerable devices that have easily crackable
passwords or backdoor strings. Shoshitaishvili et al. [52] found
authentication bypass vulnerabilities using symbolic execution.
In contrast, dynamic analysis can identify vulnerabilities without
false positives as it runs the target program directly. However,
performing dynamic analysis is not a simple task, as the device
firmware has to be emulated. Recent studies [12, 17, 23–25, 57, 60,
64] focused on firmware emulation to overcome the difficulty in
obtaining the real hardware, and we further describe these studies
in details in the following subsection (§2.2).
2.2 Emulation-based analysis
Firmware emulation has attracted attention, as it does not require
real devices and provides useful interfaces for dynamic analysis.
The system where the emulation takes place is denoted as the host
system, and the emulated system is referred to as the guest system.
Typically, there are two levels of emulation: user- and system-level.
User-level emulation. User-level emulation only emulates the
target program inside the firmware and makes the best use of
the host system. An example is emulating a web interface. A web
interface is a representative service in embedded devices for device
administration or maintenance. It serves multiple static contents,
such as HTML, or dynamic contents generated by CGI programs.
Although static contents can be served with the host environment,
dynamic contents may not. This is because they may collide with
the host system or depend on custom libraries and device drivers
that do not exist in the host system.
System-level emulation. System-level emulation fully emulates
the guest system, including the kernel. Because it provides an in-
dividual execution environment, various features in kernel and
device drivers can be emulated as well. Nevertheless, firmware em-
ulation is extremely difficult, as vendor-specific hardware issues
or memory-mapped peripherals should be considered. Without
handling them, programs in the emulated firmware often crash.
Consequently, studies have recently struggled to address these
issues [12, 17, 23, 25, 57], by creating an emulation environment as
similar as possible to the real device. Popular emulators, such as
QEMU [6], have been supporting more hardware types, including
their peripherals. Costin et al. [12] presented a scalable dynamic
analysis framework along with several case-studies on various
embedded web interfaces. Chen et al. [17] emulated non-volatile
RAM (NVRAM), which stores various configuration values for pro-
grams in the emulated firmware. Gustafson et al. [25] modeled
memory-mapped I/O (MMIO) operations in peripheral communi-
cation. Feng et al. [23] attempted to resolve the same issue with
machine learning. Recently, Clements et al. [10] proposed decou-
pling the hardware from the firmware.
Analysis. After emulation, vulnerabilities can be checked by us-
ing a previously known PoC code [17] or a fuzzer [24, 60, 64].
TriforceAFL [24] is a popular fuzzer targeting a QEMU image, lever-
aging the American fuzzy lop (AFL) [63]. It is also adopted by Hu et
al. [60]. In their follow-up study, Zheng et al. [64] proposed an op-
timized emulation approach for dynamic analysis, which switches
the context between system- and user-level emulation.
2.3 Challenges in firmware emulation
Emulation-based analysis is advantageous; however, there are nu-
merous challenges when emulating firmware images from diverse
vendors, which stem from the non-standardized development pro-
cess and the discrepancy between the emulated and physical envi-
ronments. For example, libraries, device drivers, and even kernels
in devices differ across vendors; unless these are properly emulated,
internal programs cannot be executed.
Devices that access hardware interfaces, such as LED sensors or
cameras, have more diversity, as noted in previous studies [23, 25].
Communication between the main device and its peripherals often
utilizes memory-mapped IO (MMIO) operations, with pre-defined
memory addresses. However, the range of such addresses differs
significantly across devices. Consequently, it is difficult to scale this
approach to various devices. Chen et al. [17] attempted to emulate
one such hardware, namely NVRAM, on a large scale. Muench et
al. [45] underlined device-specific challenges when conducting a
dynamic analysis to identify memory corruption vulnerabilities.
Addressing these challenges may be infeasible, unless functions
are implemented perfectly as in physical devices. Nevertheless,
investigating emulation failure cases and resolving identified issues
helps gradually increase the emulation rate, and enable dynamic
analysis to improve the security of IoT ecosystem. Therefore, we
adopt the state-of-the-art emulation framework, Firmadyne [17],
and investigate the failure cases.
2.4 Firmadyne framework
Firmadyne [17] is a state-of-the-art firmware emulation frame-