### CVE-2015-1062
**MobileStorageMounter – Fixed in iOS 8.2**

**Affected Devices:**
- iPhone 4s and later
- iPod touch (5th generation) and later
- iPad 2 and later

**Impact:**
A malicious application may be able to create folders in trusted locations within the file system.

**Description:**
An issue existed in the developer disk mounting logic, which resulted in invalid disk image folders not being deleted. This was addressed through improved error handling.

**CVE-ID:**
- **CVE-2015-1062**: Reported by TaiG Jailbreak Team

---

### Payload Details

The payload consists of two DMG files.

#### First DMG File
The first DMG file contains three partitions:
1. **DeveloperDiskImage**: An empty partition.
2. **DeveloperCaches**: This partition is mounted to `/System/Library/Caches`.
3. **DeveloperLib**: This partition is mounted to `/usr/lib`.

**Directory Structure:**
```
├── Developer-Caches
│   └── com.apple.dyld
│       └── enable-dylibs-to-override-cache
├── Developer-Lib
│   ├── FDRSealingMap.plist
│   ├── StandardDMCFiles
│   │   ├── N51_Audio.dmc
│   │   ├── N51_Coex.dmc
│   │   ├── N51_Default.dmc
│   │   ├── N51_Flower.dmc
│   │   ├── N51_FullPacket.dmc
│   │   ├── N51_GPS.dmc
│   │   ├── N51_Powerlog.dmc
│   │   ├── N51_SUPL.dmc
│   │   ├── N51_Sleep.dmc
│   │   └── N51_Tput.dmc
│   ├── dyld
│   ├── libDHCPServer.dylib -> libDHCPServer.A.dylib
│   ├── libMatch.dylib -> libMatch.1.dylib
│   ├── libexslt.dylib -> libexslt.0.dylib
│   ├── libmis.dylib
│   ├── libsandbox.dylib -> libsandbox.1.dylib
│   ├── libstdc++.dylib -> libstdc++.6.dylib
│   ├── system
│   │   └── introspection
│   │       └── libdispatch.dylib
│   └── xpc
│       └── support.bundle
│           ├── Info.plist
│           ├── ResourceRules.plist
│           ├── _CodeSignature
│           │   └── CodeResources
│           └── support
└── DeveloperDiskImage
```
**Important Files:**
1. **enable-dylibs-to-override-cache**: In iOS, almost all dynamic libraries (dylibs) are prelinked into a cache file, and programs load dylibs from this cache by default, ignoring those in the file system. The presence of `enable-dylibs-to-override-cache` causes the dynamic loader (dyld) to prioritize loading dylibs from the file system. This mechanism might be used by Apple for system component hot updates or as a fallback.
2. **libmis.dylib**: A malformed dylib used to bypass code signing, which will be explained further.

#### Second DMG File
The second DMG file contains jailbreak-related content and is mounted to `/Developer`.

**Directory Structure:**
```
├── Library
│   └── Lockdown
│       └── ServiceAgents
│           ├── com.apple.load_amfi.plist
│           ├── com.apple.mount_cache_1.plist
│           ├── com.apple.mount_cache_2.plist
│           ├── com.apple.mount_cache_3.plist
│           ├── com.apple.mount_cache_4.plist
│           ├── com.apple.mount_cache_5.plist
│           ├── com.apple.mount_cache_6.plist
│           ├── com.apple.mount_cache_7.plist
│           ├── com.apple.mount_cache_8.plist
│           ├── com.apple.mount_lib_1.plist
│           ├── com.apple.mount_lib_2.plist
│           ├── com.apple.mount_lib_3.plist
│           ├── com.apple.mount_lib_4.plist
│           ├── com.apple.mount_lib_5.plist
│           ├── com.apple.mount_lib_6.plist
│           ├── com.apple.mount_lib_7.plist
│           ├── com.apple.mount_lib_8.plist
│           ├── com.apple.ppinstall.plist
│           ├── com.apple.remove_amfi.plist
│           ├── com.apple.umount_cache.plist
│           └── com.apple.umount_lib.plist
├── bin
│   └── ppunmount
├── pploader
└── pploader.idb
```

**Mounted Content:**
- `/Developer/bin` and other directories are considered by the system, meaning that programs in these directories are included in the system's search path.

---

### Vulnerability Analysis

Apple's description of the vulnerability is relatively brief. The main issue is a race condition that can be exploited to replace the DMG. Although the race condition is the primary problem, it was not fully fixed by Apple and remains difficult to address. Additionally, there is another issue with the Developer Disk Image (DDI).

**Before Triggering the Vulnerability:**
```
brw-r---- 1 root operator 1, 0 Jun 26 19:07 /dev/disk0
brw-r---- 1 root operator 1, 1 Jun 26 19:07 /dev/disk0s1
brw-r---- 1 root operator 1, 3 Jun 26 19:07 /dev/disk0s1s1
brw-r---- 1 root operator 1, 2 Jun 26 19:07 /dev/disk0s1s2
brw-r---- 1 root operator 1, 4 Jun 26 19:07 /dev/disk1
brw-r---- 1 root operator 1, 5 Jun 26 19:07 /dev/disk2
brw-r---- 1 root operator 1, 6 Jun 26 19:07 /dev/disk3
brw-r---- 1 root operator 1, 7 Jun 26 19:07 /dev/disk4
brw-r---- 1 root operator 1, 8 Jun 26 19:08 /dev/disk5
```

**After Triggering the Vulnerability:**
```
brw-r---- 1 root operator 1, 0 Jun 26 19:22 /dev/disk0
brw-r---- 1 root operator 1, 1 Jun 26 19:22 /dev/disk0s1
brw-r---- 1 root operator 1, 2 Jun 26 19:22 /dev/disk0s1s1
brw-r---- 1 root operator 1, 3 Jun 26 19:22 /dev/disk0s1s2
brw-r---- 1 root operator 1, 4 Jun 26 19:22 /dev/disk1
brw-r---- 1 root operator 1, 5 Jun 26 19:22 /dev/disk2
brw-r---- 1 root operator 1, 6 Jun 26 19:22 /dev/disk3
brw-r---- 1 root operator 1, 7 Jun 26 19:22 /dev/disk4
brw-r---- 1 root operator 1, 8 Jun 26 19:23 /dev/disk5
brw-r---- 1 root operator 1, 9 Jun 26 19:26 /dev/disk6
brw-r---- 1 root operator 1, 10 Jun 26 19:26 /dev/disk6s1
brw-r---- 1 root operator 1, 11 Jun 26 19:26 /dev/disk6s2
brw-r---- 1 root operator 1, 12 Jun 26 19:26 /dev/disk6s3
```

**Issue:**
Even if the mount of an invalid DMG fails, the corresponding partitions remain in the device directory. During the jailbreak process, these disks are mounted:
- `disk6s3` is mounted to `/System/Library/Caches`
- `disk6s2` is mounted to `/usr/lib`

**Triggering the Race Condition:**
To trigger the race condition and replace the DMG, the temporary directory of the DMG must be located. The construction rule for the temporary directory is as follows:

**Example Path:**
```
/var/run/mobile_image_mounter/
6d55c2edf0583c63adc540dbe8bf8547b49d54957ce9dc8032d1a9f9ad759e2b
1fe99fcb2baeb3db5348ab322cb65c7fc38b59cb75697cbc29221dce1ecd120d /
909b75240921fc3f2d96ff08d317e199e033a7f8a8ff430b0c97bf3c6210fc39
f35e1c239d1bf7d568be613aafef53104f3bc1801eda87ef963a7abeb57b8369 /
```

**Path Construction:**
- The first part of the path is the first 64 bytes of the signature file converted to a hexadecimal string.
- The second part is the next 64 bytes of the signature file.
- A randomly generated filename (e.g., `1Nm843.dmg`) is appended to the end.

**Exploitation Steps:**
1. Check if the DDI is already mounted (common on development devices).
2. If mounted, restart the device.
3. If not mounted, load the real DDI and its signature, create the temporary directory, upload a fake DMI, and then call the service to mount the real DDI.
4. Replace the temporary file (e.g., `1Nm843.dmg`) with the fake DDI.

**Exploitation Result:**
After exploiting the DDI vulnerability, the partitions from the first DMG remain on the device, and the contents of the second DMG are mounted to `/Developer`:
- `/Developer/Library`
- `/Developer/bin`
- `/Developer/pploader`
- `/Developer/Library/Lockdown/ServiceAgents`
- Various `.plist` files and other binaries related to the jailbreak process.

This allows the attacker to gain control over the system and perform further actions.