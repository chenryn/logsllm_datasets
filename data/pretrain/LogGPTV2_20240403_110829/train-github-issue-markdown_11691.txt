    interface Promise {
        then(cb: (x: T) => Promise): Promise;
    }
    // Consider both orderings of the following overloads
    declare function testFunction(n: number): Promise;
    declare function testFunction(s: string): Promise;
    var numPromise: Promise;
    var newPromise = numPromise.then(testFunction);
In the old compiler, with either ordering of the overloads, newPromise had
type `Promise`.  
In the new compiler, if the number signature comes first, we get an error. If
the string signature comes first, newPromise is of type `Promise`!
This is very inconsistent.  
We have based this on the notion that the last overload will always be more
general than the preceding overloads. However, with disjoint overloads, we are
essentially giving the last one undue priority. The rule of thumb is that in a
call, the first overload has priority, so giving the last one priority when
passing a callback seems really unintuitive.