To address the packet modiﬁcation attacks and collusion
attacks mentioned earlier, nodes do not know the per-epoch
s and K e
f until the end of each epoch e, after theyhave
K e
forwarded (or possibly corrupted) packets in epoch e. Thus,
when a packet is to be forwarded (or corrupted), a malicious
f, and thus cannot predict
node does not know K e
whether this epoch is selected for sending trafﬁc summaries,
and if selected, what the sketch output will be for this
packet. To achieve this property, in DynaFL, the trusted
f via key
AC periodically sends the per-epoch K e
disclosure messages to all nodes at the end of each epoch
in a reliable way (described later) and nodes use the received
s and K e
f to select epochs and ﬁngerprint packets that have
K e
already been forwarded or corrupted.
A malicious node may ﬁrst attempt to locally hold all
the packets in an epoch e, and only forward or corrupt
packets at the end of e when the malicious node learns K e
and K e
f, thus being able to launch the packet modiﬁcation
and selective packet corruption attacks as mentioned ear-
lier. However, since the trafﬁc summaries also include the
average departure/arrival time of the sent/received packets,
the malicious node will be detected with packet delay
misbehavior in the detection phase.
Sections IV, V, and VI detail the recording, reporting,
and detection phases in DynaFL, respectively. Section VII
presents the security analysis and Section VIII evaluates
DynaFL’s performance through measurements and simula-
tions.
s and K e
s and K e
s
s
IV. RECORDING TRAFFIC SUMMARIES
The main technical challenges in the recording phase are
how to deal with imperfect
time synchronization among
nodes and packet transmission delay, and how to efﬁciently
protect the key disclosure message from adversarial corrup-
tion. We explain how DynaFL solves these challenges in
turn below.
322
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:47:18 UTC from IEEE Xplore.  Restrictions apply. 
A. Storing Packets
In the “ideal” case (with perfect time sychronization and
no packet transmission delay), nodes simply need to store
packets for the single “current” epoch and at the end of each
epoch send the trafﬁc summaries to the AC for that epoch.
However, in practice, routers need to determine which epoch
an incoming packet belongs to (or whether a received packet
belongs to the current epoch or a previous, outdated epoch).
One might attempt to let routers map received packets into
epochs based on their local packet arrival time. However,
this approach would introduce large errors for the following
reasons:
• Though all the nodes in the network are loosely time-
synchronized, e.g., ±1 millisecond, the epoch intervals
at different nodes may still be misaligned by up to a few
milliseconds. This misalignment will result in a consid-
erable number of packets being attributed to different
epochs at different nodes, thus causing inconsistencies
in the corresponding packet ﬁngerprints.
• Due to the network transmission delay, a packet sent
by a source at epoch e may arrive at another node at
a different epoch e + i. In other words, a packet may
have been received by an ingress node but not the egress
node of a neighborhood at the end of an epoch when
nodes need to generate their packet ﬁngerprints, thus
producing inconsistencies in the trafﬁc summaries.
To deal with imperfect time synchronization, the source
in DynaFL embeds a local timestamp when sending each
packet. Such a timestamp can be added as an additional ﬂow
header, using the TCP timestamp, or in the IP option ﬁeld,
etc. Any router in the forwarding path will determine the
corresponding epoch for each packet based on the embedded
timestamp. In this way, we ensure that all routers put each
packet in the same epoch for updating the trafﬁc summaries.
For example, if the timestamp embedded by the source is
ts and the epoch length is L, then all routers will map the
L &.
packet into epoch % ts
To eliminate trafﬁc summary inconsistencies due to packet
transmission delay, we also need to ensure that when gen-
erating trafﬁc summaries for a certain epoch e, packets
that are sent and not corrupted in epoch e are received
by all
the nodes in the forwarding paths. To this end,
if the epoch length is set to L and the expected upper
bound on the one-way packet
transmission delay in the
network is D, each router stores packets sent in the current
L ( epochs, denoted by
epoch e as well as in previous ’ D
L (. We call these epochs live epochs.
e − 1, e − 2, . . . , e − ’ D
Then at the end of an epoch e, nodes will generate and send
to the AC the trafﬁc summaries for the oldest live epoch
L (, in which the packets have either traversed all nodes
e−’ D
in their forwarding paths or been corrupted. The periodic key
disclosure messages that the AC broadcasts synchronize the
current epoch ID and the oldest live epoch ID for which
s
s
s
and S←r
• The packet cache C↔r
trafﬁc summaries are needed for reporting.
Hence, a node s maintains the following data structures
for each neighbor r for each epoch, as Figure 6 also shows.
temporarily stores hashes for
that are seen in a live
packets in both S→r
epoch (using a cryptographic hash function such as
SHA-1). Each entry contains the packet hash and a bit
indicating if the packet belongs to S→r
• The router stores the sum of packet departure times-
and the sum of packet arrival
seen in S→r
tamps t→r
in a live epoch with
timestamps t←r
microsecond precision.
• Finally, the router stores the total number of packets
in a live epoch.
In DynaFL, a router s also needs to consider the case where
its next-hop neighbor r is the destination for a certain packet,
so that r will naturally not forward the packet. If it is the
case for a certain packet, router s does not cache that packet
for neighbor r.
seen in S←r
seen in S→r
seen in S←r
and n←r
or S←r
n→r
.
s
s
s
s
s
s
s
s
s
s
crypto hash
Srs or Ssr?
.
.
.
.
.
.
.
.
.
.
.
.
Epoch ID
t←r
s
n←r
s
t→r
s
n→r
s
C↔r
s
s
s
s
s
s
, t→r
Figure 6. Router per-neighbor state details.
, n←r
, andn →r
Among these data structures, t←r
require small constant storage, around 8 or 4 bytes for each.
s will be used for packet ﬁngerprinting. The size of C↔r
C↔r
depends only on the epoch length L and link bandwidth,
but not the number of ﬂows/paths traversing node s. As
Section VIII-A shows, with an epoch length of 20 millisec-
onds and one-way network latency of 20 milliseconds, each
router line-card requires only around 4MB of memory for
an OC-192 link, which is practical today.
to denote the
by node s, respectively.
packets cached for S→r
B. Secure Key Disclosure
For simplicity’s sake, we use C→r
and C←r
and S←r
and ﬁngerprinting key K
At the end of each epoch e, the AC discloses the sam-
to all
pling key K
nodes in the network via a key disclosure message dAC,
and requests the trafﬁc summaries for the most recently
L (. Obviously, dAC itself needs to be
retired epoch e − ’ D
protected from data-plane attacks (dropping, modiﬁcation,
fabrication, or delaying) by a malicious node during end-
of-epoch broadcasting. It might be tempting to let the AC
use digital signatures to authenticate dAC in order to address
malicious modiﬁcation and fabrication; however, frequently
e−( D
f
e−( D
s
L )
L )
s
s
s
s
323
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:47:18 UTC from IEEE Xplore.  Restrictions apply. 
dAC
i
dAC
m
j
drop dAC?
s
m
lower TTL
in m to ‘2’
p
r
q
b
c
m
a
TTL= 0 in m
drop m
Figure 7.
Possible attacks in the recording phase. A malicious nodes
may attempt to drop the key disclosure message dAC, or manipulate the
TTL value to cause packets to be dropped at a remote place (node a in this
example), thus framing a remote neighborhood (N(a) in this example).
generating and verifying the signatures on a per-epoch basis
can be expensive (e.g., an epoch can be as short as 20
milliseconds and signature generation and veriﬁcation time
could be on the order of milliseconds).
Our key observation is that, the key disclosure message
dAC is transmitted at the end of each epoch synchronously
among all the nodes. If a malicious node s drops dAC, the AC
will fail to receive the trafﬁc summaries of certain neighbors
of s, thus detecting N(s) as suspicious. For example in
Figure 7, if s drops dAC instead of forwarding it to its
neighbor r, node r cannot ﬁngerprint the packets to generate
trafﬁc summaries,
thus failing the consistency check of
trafﬁc summaries in N(s). As we show in Section V, the AC
expects to receive trafﬁc summaries within a short amount
of time after each epoch ends; delaying dAC more than
that amount of time is effectively equivalent to dropping
dAC and causes the malicious node’s neighborhood to be
detected. Thus, the remaining problem is to prevent the
modiﬁcation and fabrication of dAC, which is equivalent to
authenticating dAC to all nodes in the network without the
use of digital signatures. Section VII further elaborates why
the authentication of dAC is needed for security purposes.
The dAC for epoch j includes an epoch key K j, based
s and the epoch ﬁn-
on which the epoch sampling key K j
f can be derived using a Pseudo-Random
gerprinting key K j
Function (PRF), e.g.:
K j
f ← P RFKj (2)
s ← P RFKj (1), K j
(10)
Furthermore in DynaFL, time in the network is loosely
time-synchronized and divided into consecutive epochs; the
authentication of dAC is required only once per epoch.
s for each epoch,
Hence, we just need to authenticate K j
which can be efﬁciently achieved via a one-way hash chain.
As Figure 8 shows, the AC applies a one-way function H
(a cryptographic hash function) repeatedly on the root key
K r to derive a set of epoch keys. The AC publishes K0 in a
bootstraping broadcast message through the network so that
nodes can verify if any given epoch key is indeed derived
K 0
H(K 1)
H(K 2)
H(K r−1)
H(K r)
... ...
K r−1
K 1
Figure 8. One-way hash chain example.
K r
s
t
f
t
f
(C→r
t
and T←r
t
from the genuine one-way hash chain and is thus authentic.
We assume each node in the network has the correct public
key of the AC, so that the AC can authenticate K0 via
digital signatures during the bootstraping phase. Along with
K0, an epoch number is included and authenticated in the
bootstraping broadcast message to enable switching to a new
key chain whenever needed.
Furthermore, DynaFL creates a spanning tree in the
network rooted at the AC, along which dAC is delivered
to each node. Since DynaFL uses a pre-generated, static
spanning tree for the broadcast messages, there is no need
for dynamic path support when protecting dAC.
C. Sampling and Fingerprinting
s and K j
Given the disclosed K j
f at the end of an epoch
s,
e, each node t ﬁrst uses the sampling PRF P with K j
, to determine if the oldest live epoch j is
denoted by PKj
selected. If so, node t then uses the ﬁngerprinting function
F to map the cached packet hashes in each per-neighbor
),
stream into a sketch vector, i.e., FKj
(C←r
f. Finally, node t generates two
computed with the given K j
trafﬁc summaries T→r
includes a ﬁngerprint
,
t = t→r
of packets seen in S→r
in
includes a ﬁngerprint
,
t = t←r
of packets seen in S←r
in
• T→r
t
FKj
and the total number n→r
epoch j;
) or FKj
for a neighbor r:
for packet stream S←r
(C←r
• T←r
t
FKj
and the total number n←r
epoch j.
for packet stream S→r
(C→r
), average packet departure time t→r
), average packet arrival time t←r
K j
s <λ · 2n
Figure 9 summarizes the FL-related packet processing
inside a DynaFL router. We detail P and F in the following.
Implementing P. A n-bit epoch sampling key K j
s is derived
via a PRF (Equation 10) and is thus uniformly distributed
in [0, 2n − 1]. Given asampling rate λ ∈ (0, 1), an epoch j
is selected iff:
(11)
In this way, on average a fraction λ of the epochs will
be selected. Since nodes use the same K j
s for epoch sam-
pling, benign nodes will select the same set of epochs,
thus ensuring the consistency of the trafﬁc summaries in
a neighborhood.
Implementing F. We use the second-moment sketch
f as a case study to implement F, and
computed with K j
analyze the size of the sketch vector to achieve Property 1
with (α, β,δ )-accuracy. We assume 107 packets per second
in the worst case for an OC-192 link with an epoch length
t
n→r
t