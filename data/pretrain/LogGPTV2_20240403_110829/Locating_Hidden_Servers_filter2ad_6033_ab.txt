either Node 1 connected directly to HS or Node 2
in the circuit. This enables her to use timing or sta-
tistical methods to determine her position as will be
described later.
We will continue sampling data until we have
enough to determine when Alice is connecting to
the hidden service as Node 1 in the circuit to-
wards RP, at which point we will know the Hidden
Server’s IP address.
Our attack description is obviously based on
hidden services as deployed on Tor; however, the
basic approach will identify a client of a low-
latency, free-route anonymity network, not just hid-
den severs using Tor. These attacks should work on
networks such as Freedom [8] or Crowds [23], de-
spite their many differences from Tor. For systems
such as Web MIXes [6], it is difﬁcult to brieﬂy say
anything about either what a hidden service design
over such a system would look like or about the
relation to our attacks. On the one hand, becom-
ing a node in the network is tightly controlled, and
all circuits are through cascades (shared uniform
ﬁxed routes). Thus, our attacks would simply not
be possible. On the other hand, much of the point
of the attacks is to determine the point where con-
nections enter and leave the anonymity network. In
Web MIXes, this information is given, so there is
no need to attack to obtain it.
4.1 Experimental Setup
Our experiments were conducted using two dif-
ferent hidden services running at client nodes con-
necting to the Tor network, one in Europe and one
in the US. The services offered a couple of web
pages and images, which were pulled down in dif-
Figure 2. Vulnerable location of At-
tacker in communication channel to
the Hidden Server
and RP, to hide trafﬁc and create a degree of
anonymity on both ends; and
• any member of the network which claims to
offer stability can be used by HS to form an
anonymous tunnel to RP, including C if it is
a node in the anonymization network. This is
the basis of our attacks.
4 Attacks and Experimental Results
We have done experiments using multiple attack
methods in order to determine the IP address of the
Hidden Server. We will here ﬁrst describe the setup
of the experiment and then four attack methods.
The attacks can be carried out by an adversary that
controls merely a single node in the network. Since
anyone can run a Tor node simply by volunteering,
this is trivial. (In fact the adversary need only run
a “middleman” node, which never lets circuits exit
the anonymization network. The burden of running
a middleman node is typically less than that of run-
ning an exit node. Of the roughly 250 nodes in the
Tor network at the time the experiments were done
only about 100 allowed exit to port 80.) At the end
we describe an accelerated attack using two com-
promised nodes.
Fig. 2 shows the scenarios that an attacker, here-
after Alice, wants to achieve in connections to the
Hidden Server. Alice controls the Client and one
node. Her goal is to control Node 1 of the circuit.
Certain circuits will yield a match of trafﬁc pattern
with what is expected given when C sends to and
receives from HS. Alice will look for such pattern
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:48:40 UTC from IEEE Xplore.  Restrictions apply. 
ferent ways and with different timing patterns. The
documents and images varied in size from 2KB to
120KB. The connection from the Client to the Hid-
den Server was done through a random Rendezvous
Point (cf. Section 4.6), and the connection from
the Client to the Rendezvous Point was shortened
down to a path length of one.
(This will be de-
scribed more fully presently).
The Hidden Service was not offered, or known
to, any other node in the network except the direc-
tory service. Only the Client knew about how to
contact the service, so that all contact to and from
the Hidden Server was either caused by the Client,
or by the Hidden Server preparing to operate (mak-
ing circuits and downloading new updates from the
Directory Servers). This is not a limitation on the
implications of the experimental results for pub-
licly known and accessed hidden services: the tim-
ings of data are done with high enough precision
so the possibility of two identical patterns from the
same service routing through the same node at the
exact same time is negligible.4 No hidden server is
likely to get two specially designed requests (like
ours) from distinct clients and respond to them at
the exact same time. Thus a false positive in our
timing analysis is highly unlikely (Section 4.2).
The Client computer was also announced as a
middleman node, i.e. not having connections out
of the anonymity network, and this node is where
all Alice’s sampling of data takes place. By using
the node both as a server inside the network and as
the Client asking for the web pages from the Hid-
den Server, the attacker is able to get precise timing
without having to externally synchronize the time
with another node. This server node in the Tor net-
work had to use a logging mechanism when sam-
pling the active circuits during the attacks. In order
to avoid reference to the correct IP address during
the timing analysis we converted the IP addresses
by use of a simple preﬁx preserving scheme. If we
were to use permanent logging of data, we would
4One reason for not doing the experiment on a publicly
known server in the Tor network, is of course the possible le-
gal implications.
In addition, not wanting to cause harm to
the project and its participants, we avoided announcements until
there were countermeasures available and deployed.
use a better and more secure pseudonomizing IP
logging scheme [21].
The attacker must also make some minor
changes to the application code running at the
Client node in order to enable and strengthen the
attacks:
• Alice’s Client will connect directly, i.e. in one
hop, to the Rendezvous Point to shorten the
path and latency of trafﬁc between the Client
and the Hidden Server, thereby making it eas-
ier to set up and correlate the trafﬁc patterns.
• Alice’s Client will tear down the circuit to a
Hidden Server after each pattern is success-
fully communicated. This will disable reuse
of circuits and force the construction of a new
circuit on the next connection request.
• In addition to being the Client, Alice is also
running as a server middleman node partici-
pating in the network and carrying trafﬁc for
the other nodes. She will maintain a list of
active circuits (routed connections) and try to
correlate the generated circuit data with all the
other circuits to ﬁnd out if she is carrying the
same trafﬁc data as both Client and as a server
node.
• Alice’s server node will report a false higher
uptime and the maximum network bandwidth
to the directory server in order for other nodes
to trust it for their circuits. This is still possible
as there is (yet) no method for keeping reliable
track of uptime at the different servers.
Once this is implemented, Alice is ready to use
the methods of attack described below.
4.2 Timing Analysis
The attacker uses the logged timing data and di-
rection information from the generated data set and
the sampled data set (from each circuit active in that
period of time) to accomplish two different things:
1. Positively identify that Alice’s node is made a
part of a circuit; and
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:48:40 UTC from IEEE Xplore.  Restrictions apply. 
 T
 N
 E
 I
 L
 C
 R
 O
T
 R
 E
 V
 R
 E
 S
 R
 O
T
outgoing
incoming
outgoing
incoming
D
d
t
t
Figure 3. Example of data sets, match-
ing and response times
2. If (1) is true; determine at which position in
the circuit she is located.
To identify if the generated data is found within
one of the sampled data sets, Alice is faced with a
comparison of one sampled data set, the generated
set done by the Client, to all of the sampled data
sets done by the server. For all connections to the
Hidden Server there were a few hundred circuits
active at Alice’s Tor node during each of the sample
periods.
Our match conﬁrmation is an extended version
of the packet counting attack described by Serjan-
tov and Sewell [24]. In addition to basic counting
of cells, we also make use of precise timing infor-
mation of when cells were received and transmit-
ted, and the direction of each individual cell pass-
ing in order to determine a circuit match. An exam-
ple is depicted in Fig. 3. Alice uses the direction of
trafﬁc in addition to the timing of the cells’ arrival
to match all outgoing and incoming trafﬁc in the
generated data set. Notice that there is also noise
occurring in the sampled data set. We compare our
known data to one other speciﬁc set at a time, and
our algorithm only checks if the generated data may
be a part of the sampled data. Therefore, it makes
no estimate of how probable the match is.
Alice is also able to separate when there is a sin-
gle match and when there are multiple matches in
a data set. There is a potential for multiple matches
in a set, for example, if a circuit is carrying lots of
trafﬁc in both directions, we will probably have a
timing “match” due to the data load. In the attack
Alice knows that only one attack circuit is set up
at a time, and each attack circuit is set up for only
Alice’s requests at that time. So, she can use the
amount of trafﬁc relayed through the attack circuit
as a parameter. The small overhead and extra infor-
mation from setting up the tunnelled connections
etc., should not be more than a few cells, some-
thing our experiments conﬁrm. Therefore the at-
tacker may discard the samples that are more than
a few percent5 larger than the generated set.
Multiple matches could also be a possible result
in a future scenario where the circuits may be used
to carry data for different clients. In this case the
attacker must try to retrieve a list of all possible
matches of the generated data within the sampled
set and should then be able to use correlation tech-
niques on the timing data to calculate a probability
of the best match. We have not tested this part as
it would require major changes in functionality for
the deployed Tor network.
4.3 Service Location Attack
First we look at two different situations, the
Server Scenario and the Client Scenario, based on
whether the hidden service is located on a node
within the anonymity network, or on a client us-
ing the network but not participating as a network
node.
The Client Scenario is most often used when it is
desired that HS not be listed in the directory service
as a participating server node of the network. An-
other reason for this scenario is that the user may be
unable to set up a node directly reachable from the
Internet (e.g., it must be located behind a ﬁrewall)
but still wants to offer his service.
The Server Scenario is most often used to hide
the service trafﬁc within all the other trafﬁc running
through the server node. This is often regarded as
a reasonable effort to improve the cover of trafﬁc
originating at the node.
A problem with the Server Scenario is that it is
possible to correlate information about availability
of a service and the availability of the nodes listed
in the Directory Service. E.g. we poll each listed
5Actually the overhead is normally less than 10 cells, but the
extra margin has not given any false positives yet.
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:48:40 UTC from IEEE Xplore.  Restrictions apply. 
Table 1. Experimental results of our attacks.
Sample
Time to
Server 1
Server 1
Server 2
Server 2
time
7.8h
6.8h
4.9h
10.6h
ﬁrst match
15 min
3 min
28 min
3 min
Circuits Matched
circuits
completed
Largest
single IP
676
432
447
990
37
26
31
56
46%
54%
71%
54%
Second
largest
5%
7%
3%
7%
server every ﬁve minutes and correlate the lists of
active servers when we are able and unable to con-
tact the hidden service.
Our attack is based on the availability of a di-
rectory service containing a public list of all server
nodes in the anonymity network. From this list the
attacker will immediately be able to tell the differ-
ence between connections from mere clients and
connections from network nodes. If a service is lo-
cated at a client outside the anonymizing network,
Alice will know both this and the client’s IP ad-
dress, as soon as she has a positive match in the
timing analysis (Section 4.2) on a connection orig-
inating from outside of the currently listed server
nodes. There is no other way the hidden service can
communicate with the attacker’s node from outside
the Tor network unless this is the actual location of
the hidden service, or its point of contact, e.g., a
ﬁrewall hiding internal addresses, an IPSec tunnel
endpoint, etc.
Experimental Results: Our results conﬁrmed
this by a simple matching of the IP addresses in the
sampled circuits against the list of known servers.
Both of our Hidden Servers were run on Client
nodes and were easily conﬁrmed as the source of
the service. The time for the attack until success-
ful identiﬁcation of the IP address in the four tests
of the experiment are shown in Table 1 under the
column ”Time to ﬁrst match”.
So, if the hidden service is located at a client
of the anonymity network an attacker will ﬁnd it
in a matter of minutes using only one node in the
network, but if the service is located at a network
node we will have to use another method.
4.4 The Predecessor Attack
The current implementation of the network is
vulnerable to the predecessor attack [31]. This is
a form of intersection attack. Since intersection at-