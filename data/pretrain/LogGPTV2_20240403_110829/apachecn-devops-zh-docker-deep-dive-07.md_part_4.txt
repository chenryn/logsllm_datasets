    ```
     $ docker container stop always unless-stopped
     $ docker container ls -a
     CONTAINER ID   IMAGE     STATUS                        NAMES
     3142bd91ecc4   alpine    Exited (137) 3 seconds ago    unless-stopped
     4f1b431ac729   alpine    Exited (137) 3 seconds ago    always 
    ```
`*   重启 Docker。`
 `在不同的操作系统上，重新启动 Docker 的过程不同。这个例子展示了如何在运行`systemd`的 Linux 主机上停止 Docker。要在 Windows Server 2016 上重新启动 Docker，请使用`restart-service Docker`。
```
 $ systemlctl restart docker 
```
 `1.  一旦 Docker 重新启动，您就可以检查容器的状态。
    ```
     $ docker container ls -a
     CONTAINER   CREATED             STATUS                       NAMES
     314..cc4    2 minutes ago      Exited (137) 2 minutes ago    unless-stopped
     4f1..729    2 minutes ago      Up 9 seconds                  always 
    ```
 `请注意，“始终”容器(从`--restart always`策略开始)已经重新启动，但是“除非停止”容器(从`--restart unless-stopped`策略开始)没有重新启动。
如果容器以非零退出代码退出，则 **on-failure** 策略将重新启动容器。当 Docker 守护程序重新启动时，它还将重新启动容器，甚至是处于停止状态的容器。
如果您使用的是 Docker Compose 或 Docker Stacks，您可以将重启策略应用到一个`service`对象，如下所示。我们将在本书后面更多地讨论这些技术。
```
version: "3"
services:
  myservice:
    restart_policy:
      condition: always | unless-stopped | on-failure 
```
 `#### Web 服务器示例
到目前为止，我们已经看到了如何启动一个简单的容器并与之交互。我们还看到了如何停止、重启和删除容器。现在让我们来看一个基于 Linux 的 web 服务器示例。
在这个例子中，我们将从我在我的一些 [Pluralsight 视频课程](https://www.pluralsight.com/search?q=nigel%20poulton%20docker&categories=all)中使用的映像开始一个新的容器。该映像在端口 8080 上运行一个简单的网络服务器。
您可以使用`docker container stop`和`docker container rm`命令清理系统中的任何现有容器。然后运行以下命令来启动一个新的 web 服务器容器。
```
$ docker container run -d --name webserver -p 80:8080 \
  nigelpoulton/pluralsight-docker-ci
Unable to find image 'nigelpoulton/pluralsight-docker-ci:latest' locally
latest: Pulling from nigelpoulton/pluralsight-docker-ci
a3ed95caeb02: Pull complete
3b231ed5aa2f: Pull complete
7e4f9cd54d46: Pull complete
929432235e51: Pull complete
6899ef41c594: Pull complete
0b38fccd0dab: Pull complete
Digest: sha256:7a6b0125fe7893e70dc63b2...9b12a28e2c38bd8d3d
Status: Downloaded newer image for nigelpoulton/plur...docker-ci:latest
6efa1838cd51b92a4817e0e7483d103bf72a7ba7ffb5855080128d85043fef21 
```
 `请注意，您的 shell 提示没有改变。这是因为这个容器是在后台用`-d`标志启动的。像这样启动一个容器不会把它连接到你的终端。
让我们看看命令中的其他一些参数。
我们知道`docker container run`开始一个新的容器。然而，这次我们给它的是`-d`旗帜，而不是`-it`。`-d`代表 **d** aemon 模式，告诉容器后台运行。您不能在同一命令中使用`-d`和`-it`标志。
之后，该命令将容器命名为“webserver”。`-p`标志将 Docker 主机上的端口 80 映射到容器内部的端口 8080。这意味着到达端口 80 上的 Docker 主机的流量将被定向到容器内部的端口 8080。碰巧我们用于这个容器的映像定义了一个在端口 8080 上监听的 web 服务。这意味着容器将运行一个监听端口 8080 的 web 服务器。
最后，命令告诉容器基于`nigelpoulton/pluralsight-docker-ci`映像。此映像包含 node.js webserver 和所有依赖项。它大约每年维护一次，所以会包含漏洞！
一旦容器正在运行，一个`docker container ls`命令将显示容器正在运行以及映射的端口。重要的是要知道端口映射表示为`host-port:container-port`。
```
$ docker container ls
CONTAINER ID  COMMAND        STATUS       PORTS               NAMES
6efa1838cd51  /bin/sh -c...  Up 2 mins  0.0.0.0:80->8080/tcp  webserver 
```
 `为了提高可读性，一些列已经从输出中删除。
现在容器正在运行，并且端口已映射，您可以通过将网络浏览器指向端口 80 上的 **Docker 主机**的 IP 地址或 DNS 名称来连接到它。图 7.4 显示了容器提供的网页。
![Figure 7.4](img/figure7-4.png)
Figure 7.4
相同的`docker container stop`、`docker container pause`、`docker container start`和`docker container rm`命令可以在容器上使用。
#### 检查容器
在前面的 web 服务器示例中，您可能已经注意到，当我们发出`docker container run`命令时，我们没有为容器指定应用。然而，容器运行的是网络服务。这是怎么发生的？
构建 Docker 映像时，您可以嵌入一条指令，列出使用该映像的任何容器的默认应用。你可以通过运行`docker image inspect`来查看任何映像。
```
$ docker image inspect nigelpoulton/pluralsight-docker-ci
[
    {
        "Id": "sha256:07e574331ce3768f30305519...49214bf3020ee69bba1",
        "RepoTags": [
            "nigelpoulton/pluralsight-docker-ci:latest"
            ],
            "Cmd": [
                "/bin/sh",
                "-c",
                "#(nop) CMD [\"/bin/sh\" \"-c\" \"cd /src \u0026\u0026 node ./app.js\"]"
            ],
```
 `输出被剪切，以便更容易找到我们感兴趣的信息。
`Cmd`后的条目显示了容器将运行的命令/应用，除非您在用`docker container run`启动容器时用不同的命令/应用覆盖它。如果移除示例中的所有 shell 转义符，您将获得以下命令`/bin/sh -c "cd /src && node ./app.js"`。这是基于此映像的容器将运行的默认应用。请随意查看更多图片，有时默认应用会被列为`Entrypoint`而不是`Cmd`。
用这样的默认命令构建映像是很常见的，因为这样可以更容易地启动容器。它还强制一种默认行为，并且是一种自我记录的形式——也就是说，你可以*检查*映像，并且知道它被设计来运行什么应用。
这就是我们在本章中所做的例子。让我们看看整理我们系统的快速方法。
#### 整理
让我们看看最简单快捷的方法来摆脱 Docker 主机上的每个运行容器。不过要注意的是，该程序将强制销毁所有**容器，不给它们清理的机会。**这绝不应该在生产系统或运行重要容器的系统上执行。****
从 Docker 主机的外壳运行以下命令，删除所有**容器。**
```
$ docker container rm $(docker container ls -aq) -f
6efa1838cd51 
```
 `在本例中，只有一个容器在运行，因此只删除了一个(6efa1838cd51)。但是，该命令的工作方式与我们在上一章中用来删除单个 Docker 主机上所有映像的`docker image rm $(docker image ls -q)`命令相同。我们已经知道`docker container rm`命令删除容器。传递它`$(docker container ls -aq)`作为一个参数，实际上传递了系统上每个容器的 ID。`-f`标志强制操作，这样即使处于运行状态的容器也会被销毁。最终结果…所有运行或停止的容器都将被销毁并从系统中移除。
上述命令将在 Windows Docker 主机上的 PowerShell 终端中工作。
### 容器-命令
*   `docker container run`是用于启动新容器的命令。最简单的形式，它接受一个*映像*和一个*命令*作为参数。映像用于创建容器，命令是容器启动时运行的应用。这个例子将在前台启动一个 Ubuntu 容器，并告诉它运行 Bash shell: `docker container run -it ubuntu /bin/bash`。
*   `Ctrl-PQ`会将你的外壳从一个容器的终端上拆下，让容器在后台运行`(UP)`。
*   `docker container ls`列出所有处于运行`(UP)`状态的容器。如果您添加了`-a`标志，您还会看到处于停止`(Exited)`状态的容器。
*   `docker container exec`在运行的容器内部运行一个新的进程。这对于将 Docker 主机的外壳连接到正在运行的容器内部的终端非常有用。这个命令将在一个正在运行的容器中启动一个新的 Bash shell，并连接到它:`docker container exec -it  bash`。为此，用于创建容器的映像必须包含 Bash 外壳。
*   `docker container stop`将停止一个正在运行的容器，并将其置于`Exited (0)`状态。它通过向容器内部 PID 为 1 的过程发出`SIGTERM`来实现这一点。如果在 10 秒内没有清理并停止进程，将发出 SIGKILL 命令，强制停止容器。`docker container stop`接受容器标识和容器名称作为参数。
*   `docker container start`将重启一个停止的`(Exited)`容器。您可以给`docker container start`一个容器的名称或 ID。
*   `docker container rm`将删除一个停止的容器。您可以通过名称或标识指定容器。建议您在使用`docker container rm`删除容器之前，先使用`docker container stop`命令停止容器。
*   `docker container inspect`将向您显示关于容器的详细配置和运行时信息。它接受容器名称和容器标识作为它的主要参数。
### 章节总结
在本章中，我们比较了容器模型和虚拟机模型。我们研究了虚拟机模型中固有的*操作系统税*问题，看到了容器模型如何带来巨大的优势，就像虚拟机模型相对于物理服务器模型带来巨大的优势一样。
我们看到了如何使用`docker container run`命令启动几个简单的容器，并且看到了前台的交互容器和后台运行的容器之间的区别。
我们知道，杀死容器内部的 PID 1 进程将杀死容器。我们已经看到了如何启动、停止和删除容器。
我们使用`docker container inspect`命令查看详细的容器元数据，完成了这一章。
目前为止还不错！`````````````````````````````````