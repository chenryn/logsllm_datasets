Hybrids H3;0 : : : ; H3;(cid:20): We deﬁne a collection of hybrid executions such that for every i 2 [(cid:20)] hybrid
H3;i is deﬁned as follows. Assume that (b1; : : : ; b(cid:20)) correspond to the bit-vector for the real input of
the receiver b. Then in H3;i, the ﬁrst i commitments are computed as in the simulation (i.e. equiv-
ocated using the trapdoor e), whereas the remaining (cid:20) (cid:0) i commitments are set as commitments of
bi+1; : : : ; b(cid:20) as in the real execution. Note that hybrid H3;0 is identical to hybrid H2 and that the differ-
ence between every two consecutive hybrids H3;i(cid:0)1 and H3;i is regarding the way the ith commitment
is computed, which is either a commitment to bi computed honestly in the former hybrid, or equivo-
cated using the trapdoor in the latter hybrid. Indistinguishability of H3;i and H3;i(cid:0)1 follows similarly
to the indistinguishability argument of H1 and H2, as the only difference is in how the unopened
commitments are generated. Therefore, we have the following lemma.
23
Claim 4.5 For every i 2 [(cid:20)],
fHybrid1;i(cid:0)1FOT;S1;i(cid:0)1(z);I ((cid:20); (s0; s1); b)g(cid:20)2N;s0;s1;b;z2f0;1g(cid:3)
s(cid:25) fHybrid1;iFOT;S1;i(z);I ((cid:20); (s0; s1); b)g(cid:20)2N;s0;s1;b;z2f0;1g(cid:3)
Note that the proof regarding the expected running time of the simulator is identical to the proof of
Lemma 4.4.
⊕
IDEAL: In this hybrid, we consider the actual simulator. First, we observe that the view of the adversary
output by S3;(cid:20) in H3;(cid:20) is independent of the receiver’s real input b. This is because in H3;(cid:20), all
commitments are computed in an equivocation mode, where the real input b of the receiver is used
only after the view of the adversary is generated. More precisely, only after S3;(cid:20) obtains a second
view on which the adversary successfully decommits to e, does it use the tokens to extract sb by
decommitting the equivocal commitments to b1; : : : ; bn such that
i bi = b. In fact, since in the
rewinding phase all the commitments are equivocated, the bi’s themselves can also be sampled after
the view of the adversary is generated.
Next, we observe that the actual simulator proceeds exactly as S3;(cid:20) with the exception that it commu-
nicates with FgWRAP in order to run the tokens twice after the adversary’s view is obtained and the
rewinding phase is completed. Namely, it asks FgWRAP to run the token once with a vector of bi’s
that add up to 0 in order to obtain s0, then rewinds the tokens back to the original state and runs them
′
another time with a vector of b
i’s that add up to 1 in order to extract s1. (s0; s1) are then fed to the
ideal functionality. Recall that S3;(cid:20) on the other hand, runs the tokens only once for the actual re-
ceiver’s input b. Now, since the view of the adversary in H3;(cid:20) and IDEAL are identically distributed,
it follows that the value extracted for sb in H3;(cid:20) is identically distributed to sb in the ideal execution
for both b = 0 and b = 1. Therefore, we can conclude that the output of the simulator in H3;(cid:20) and the
joint output of the simulator and honest receiver the ideal execution, are identically distributed.
Claim 4.6 The following two ensembles are identical,
(cid:25) {
fHybrid3;(cid:20)FOT;S1;i(z);I ((cid:20); (s0; s1); b)g(cid:20)2N;s0;s1;b;z2f0;1g(cid:3)
IDEALFOT;S(z);I ((cid:20); (s0; s1); b)
}
(cid:20)2N;s0;s1;b;z2f0;1g(cid:3)
Simulating the corrupted R. Let A be a PPT adversary that corrupts R then we construct a simulator S
as follows,
1. S invokes A on its input and a random string of the appropriate length.
2. S communicates with FgWRAP on behalf of the honest party by sending create messages f(Create; sid; S; R;
midl; M1)gl2[4(cid:20)2] and (Create; sid; S; R; midl+1; M2), where the code M1 implements truly random
functions (that is, M1 is encoded with a lookup table that includes some polynomial number of queries
bounded by the running time of the adversary). Then FgWRAP forwards these tokens by sending receipt
messages f(Receipt; sid; S; R; midl; M1)gl2[4(cid:20)2] and (Receipt; sid; S; R; midl+1; M2) to A. For each
query u 2 f0; 1g5(cid:20) made by A to token TKPRF;l
, functionality FgWRAP runs M1 on that query and
returns a random v from f0; 1g(cid:20). Similarly, M2 implements a random function that maps elements
from f0; 1g(cid:20) ! f0; 1gp((cid:20)).
S
24
(cid:3)
3. Next, S retrieves A queries for session sid from FgWRAP by sending a (retreive; sid) message receiving
the list Qsid. S splits the set of receiver’s queries (tcomb; i
(that were further
part of the adversary’s message), and adds them either to the “valid” set ICom or “invalid” set JCom.
More formally, let T = q((cid:20)) denote the number of times the token TKCom
is queried by R for some
), we say that the query is valid if and only if there exist
polynomial q. For each query (tcomb; i
(cid:20)), 8i; j 2 [(cid:20)],
values f((cid:12)t
; v4j(cid:0)1
1; : : : ; M i
(cid:12)4j(cid:0)1
) to the token TKCom
i ; ut
i; vt
i)gi2[(cid:20)];t2[4(cid:20)] such that tcombi = (M i
; v4j(cid:0)3
; v4j(cid:0)2
0@ (cid:12)4j(cid:0)3
(cid:12)4j(cid:0)2
j =
M i
1A
(cid:3)
S
S
i
i
i
(cid:12)4j
i
; v4j
i
i
i
i
and, for every i 2 [(cid:20)]; t 2 [4(cid:20)], the query/answer pair (ut
i) has already been recorded as a query to
the corresponding PRF token. Next, for every valid query, the simulator tries to extract the committed
value. This it done by ﬁrst computing
i; vt
00 = (cid:12)4j(cid:0)3
(cid:13)j
10 = (cid:12)4j(cid:0)2
(cid:13)j
i
i
(cid:8) Ext(u4j(cid:0)3
(cid:8) Ext(u4j(cid:0)2
i
i
)
)
01 = (cid:12)4j(cid:0)1
(cid:13)j
(cid:13)j
11 = (cid:12)4j
i
i
(cid:8) Ext(u4j(cid:0)1
)
i
(cid:8) Ext(u4j
i ):
00 = (cid:13)j
10 and (cid:13)j
Next it marks the indices j for which (cid:13)j
11. Moreover, for the marked indices
(cid:8) (cid:13)j
it computes (cid:13)j = (cid:13)j
01. If there are at least more than half the indices that are marked and are
;?)
⊕
00
commitments to the same value, say (cid:13) then (tcomb; i
is added to JCom.
i=1 bi and sends b to the trusted party that computes FOT. Upon receiving
Next, S computes b =
sb, S picks a random sb(cid:8)1 from the appropriate domain and completes the execution by playing the
role of the honest sender on these two inputs.
01 = (cid:13)j
; (cid:13)) is added to ICom. Otherwise (tcomb; i
(cid:3)
(cid:3)
(cid:20)
We now prove that the receiver’s view in both the simulated and real executions is computationally
indistinguishable via a sequence of hybrid executions. More formally,
}
{
}
{
Lemma 4.7 The following two ensembles are computationally indistinguishable,
c(cid:25)
REAL
FgWRAP
(cid:5);A(z);I ((cid:20); (s0; s1); b)
IDEALFOT;S(z);I ((cid:20); (s0; s1); b)
(cid:20)2N;s0;s1;b;z2f0;1g(cid:3)
(cid:20)2N;s0;s1;;bz2f0;1g(cid:3)
Proof: Roughly speaking, we prove that the join output distribution of both the receiver and the sender is
computationally indistinguishable. Now, since only the receiver (which is the corrupted party) has an input,
the proof boils down to proving that the receiver’s view is indistinguishable in both executions. Our proof
follows by a sequence of hybrid executions deﬁned below. We denote by HybridiFOT;Si(z);I ((cid:20); (s0; s1); b)
the random variable that corresponds to the adversary’s view in hybrid execution Hi when running against
party Si that plays the role of the sender according to the speciﬁcations in this hybrid (where S0 refers to the
honest real sender).
Hybrid H0: The ﬁrst hybrid execution is the real execution.
Hybrids H1;0 : : : ; H1;4(cid:20)2: We deﬁne a collection of hybrid executions such that for every l 2 [4(cid:20)2] hybrid
H1;l is deﬁned as follows. We modify the code of token TKPRF;l
by replacing the function PRF(cid:13)l with
a truly random function fl. In particular, given a query u the token responds with a randomly chosen
(cid:20) bit string v, rather than running the original code of M1. We maintain a list of A’s queries and
S
25
responses so that repeated queries will be consistently answered. In addition, the code of token TKi
is modiﬁed so that it veriﬁes the decommitment against the random functions fl as opposed to the
PRF functions previously embedded in TKPRF;l
. It is simple to verify that the adversary’s view in
every two consecutive hybrid executions is computationally indistinguishable due to the security of
the pseudorandom function PRF(cid:13)l. Moreover, since the PRF key is hidden from the receiver, it follows
from the pseudorandomness property that the views in every two consecutive hybrid executions are
computationally indistinguishable. More formally, we have the following lemma.
Claim 4.8 For every l 2 [4(cid:20)2],
S
fHybrid1;l(cid:0)1FOT;S0(z);I ((cid:20); (s0; s1); b)g(cid:20)2N;s0;s1;b;z2f0;1g(cid:3)
c(cid:25) fHybrid1;lFOT;S1(z);I ((cid:20); (s0; s1); b)g(cid:20)2N;s0;s1;b;z2f0;1g(cid:3)
Hybrid H2: Similarly, we consider a hybrid execution for which the code of token TKCom
is modiﬁed so
′ rather than a pseudorandom function PRF(cid:13)′. Just as in
S
that it makes use of a truly random function f
the previous hybrid, we have the following Lemma.
Claim 4.9
fHybrid1FOT;S1(z);I ((cid:20); (s0; s1); b)g(cid:20)2N;s0;s1;b;z2f0;1g(cid:3)
c(cid:25) fHybrid2FOT;S2(z);I ((cid:20); (s0; s1); b)g(cid:20)2N;s0;s1;b;z2f0;1g(cid:3)
Hybrids H3;0 : : : ; H3;4(cid:20)2: This sequence of hybrids executions is identical to hybrid H2 except that here
have the same response. Speciﬁcally,
we ensure that no two queries made by A to the token TKPRF;l
in case of a collision simulator S3;l aborts.
Claim 4.10 For every l 2 [4(cid:20)2],
S
fHybrid3;l(cid:0)1FOT;S2(z);I ((cid:20); (s0; s1); b)g(cid:20)2N;s0;s1;b;z2f0;1g(cid:3)
s(cid:25) fHybrid3;lFOT;S3(z);I ((cid:20); (s0; s1); b)g(cid:20)2N;s0;s1;b;z2f0;1g(cid:3)
(
Proof: As we replaced PRF functions to truly random functions, we have that the probability the
simulation aborts in H3;l is at most the probability of ﬁnding a collision for a random function. To
prove statistical indistinguishability it sufﬁces to show that this probability is negligible. More for-
mally, if the adversary makes a total of Q queries to both tokens, then the probability that any pair of
(cid:0)ℓ where ℓ is the minimum length of the outputs of
queries yields a collision can be bounded by
2
all random functions. In our case this is (cid:20) and hence the probability that the simulator aborts in every
(cid:3)
hybrid is negligible.
Hybrid H4: In this hybrid execution, simulator S4 plays the role of the sender as in hybrid H3 except
that it extracts the adversary’s input bit b as carried out in the simulation by S. First, we observe that
for any i 2 [(cid:20)] and t 2 [4(cid:20)], the probability that the receiver reveals a valid pre-image ut
i for
i) collected by the simulator is exponentially
which there does not exists a query/answer pair (ut
i for vt
i; vt
)
Q
2
26
small since we rely on truly random functions in this hybrid. Therefore, except with negligible prob-
ability, the receiver will be able to decommit only to (cid:13)j
11 as extracted by the simulator.
Consequently, using the soundness of the Pass-Wee trapdoor commitment scheme, it follows that the
receiver can only decommit to bi and b as extracted by the simulator. Therefore, we can conclude that
the probability that a malicious receiver can equivocate the commitment tcombi is negligible. The
above does not make any difference to the receiver’s view which implies that,
00; (cid:13)j
01; (cid:13)j
10; (cid:13)j
Claim 4.11
fHybrid3FOT;S3(z);I ((cid:20); (s0; s1); b)g(cid:20)2N;s0;s1;b;z2f0;1g(cid:3)
(cid:25) fHybrid4FOT;S4(z);I ((cid:20); (s0; s1); b)g(cid:20)2N;s0;s1;b;z2f0;1g(cid:3)
Moreover, recall that extraction is straight-line, thus the simulator still runs in strict polynomial-time.
Hybrids H5;0;eH5;0; : : : ; H5;(cid:20);eH5;(cid:20): Let tcombi be the ith commitment sent to S in the ﬁrst message.