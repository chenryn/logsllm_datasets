12.6 HTML
There is some support in the XML package to handle HTML documents even though
they are not XML-compliant. The XML parser discussed earlier can handle
many HTML documents if it is modified by
XML 包的部分方法可支持处理 HTML 文档,即使他们本身不具备 XML 兼容性。前面讨论的
XML 解析器修改下就可以处理大部分 HTML 文件
parser := xml.NewDecoder(r)
parser.Strict = false
parser.AutoClose = xml.HTMLAutoClose
parser.Entity = xml.HTMLEntity
12.7 Conclusion 结论
Go has basic support for dealing with XML strings. It does not as yet have
mechanisms for dealing with XML specification languages such as XML Schema
or Relax NG.
Go 基本支持对 XML 字符的处理，而且它不像有着针对 XML 专用语言如 XML Schema 或
Relax NG 的处理机制。
Copyright Jan Newmarch, PI:EMAIL
If you like this book, please contribute using Flattr
or donate using PayPal
Chapter 13 第十三章
Remote Procedure Call 远程过程调用
13.1 Introduction 介绍
Socket and HTTP programming use a message-passing paradigm. A client sends
a message to a server which usually sends a message back. Both sides are
responsible for creating messages in a format understood by both sides,
and in reading the data out of those messages.
Socket 和 HTTP 编程 使用的是一种消息传递模式. 一个客户端发送了一个消息给服务
器，通常会等回一个响应消息。两边都要创建出一种双方可理解的格式，然后从里面读出
数据的实体。
However, most standalone applications do not make so much use of message
passing techniques. Generally the preferred mechanism is that of
the function (or method or procedure) call. In this style, a program will
call a function with a list of parameters, and on completion of the function
call will have a set of return values. These values may be the function
value, or if addresses have been passed as parameters then the contents
of those addresses might have been changed.
然而，大多数独立主机应用不会做太多的消息传递技术。一般来说，函数调用(或者被称作
method/procedure)的使用更为普遍。在函数风格下，程序会调用函数时会传入一系列
参数，然后函数调用完毕后会返回一系列返回值。这些返回值会成为函数的值，或者传递
进函数的是参数的地址引用，那么参数值可能最后会被修改。
The remote procedure call is an attempt to bring this style of programming
into the network world. Thus a client will make what looks to it like a
normal procedure call. The client-side will package this into a network
message and transfer it to the server. The server will unpack this and turn
it back into a procedure call on the server side. The results of this call
will be packaged up for return to the client.
远程过程调用的初衷就是把这种风格带入网络世界。客户调用时候会让这一切看起来像是
函数调用，而客户端会打包这些数据成为消息，然后传递到远端服务器。服务器再拆解包，
然后把它变成在服务器端的过程调用，而最后的返回结果会被打包传回给客户。
Diagrammatically it looks like
where the steps are
用图示表示的话，看起来就会是这个样子
经历如下几个步骤
1. The client calls the local stub procedure. The stub packages up the
parameters into a network message. This is called marshalling.
2. Networking functions in the O/S kernel are called by the stub to send
the message.
3. The kernel sends the message(s) to the remote system. This may be
connection-oriented or connectionless.
4. A server stub unmarshals the arguments from the network message.
5. The server stub executes a local procedure call.
6. The procedure completes, returning execution to the server stub.
7. The server stub marshals the return values into a network message.
8. The return messages are sent back.
9. The client stub reads the messages using the network functions.
10.The message is unmarshalled. and the return values are set on the
stack for the local process.
1. 客户调用本地存根节点过程, 存根节点会把参数打包成网络消息，这个过程被称为
编组
2. OS 内核里的网络通信函数会被存根节点调用来发送消息。
3. 内核把消息传递给远端系统。这个可以使面向连接的或者是无连接传输模式。
4. 服务器端的存根节点会把参数从网络消息中拆解出来。
5. 服务器端的存根节点会执行一个本地过程调用
6. 等到过程完成，返回之行结果给服务器端的存根节点。
7. 服务器存根节点会把返回值编组成网络消息。
8. 消息被返回
9. 客户端存根节点用网络通信函数读取消息
10.消息被拆解。然后返回值被放到本地程序的堆栈内。
There are two common styles for implementing RPC. The first is typified
by Sun's RPC/ONC and by CORBA. In this, a specification of the service is
given in some abstract language such as CORBA IDL (interface definition
language). This is then compiled into code for the client and for the server.
The client then writes a normal program containing calls to a
procedure/function/method which is linked to the generated client-side
code. The server-side code is actually a server itself, which is linked
to the procedure implementation that you write.
远程过程调用有两种普遍使用的风格。第一个是以 SUN 开发的 CORBA 的 RPC/ONC 为代表。
这里，服务的描述被某种像 CORBA IDL(接口定义语言)抽象语言提供，然后编译成可执
行代码分别部署在 client 端和 server 端。客户接着就可以写一个常规的程序去连接那
个生成出来的方法,而 server 端的代码实际上就是 server 服务的实体，然后连接到你实
现的程序。
In this way, the client-side code is almost identical in appearance to a
normal procedure call. Generally there is a little extra code to locate
the server. In Sun's ONC, the address of the server must be known; in CORBA
a naming service is called to find the address of the server; In Java RMI,
the IDL is Java itself and a naming service is used to find the address
of the service.
这样，客户端代码就基本上跟一个普通的程序调用没什么区别了。一般来说，在 server
端部署的代码量会有点多。在 SUN 开发的的 ONC 上，server 端的地址必须是公开的。在
CORBA 里面，一个命名服务会启动去寻找服务器的地址。而在 JAVA RMI 中，IDL 由 Java
类库实现，然后命名服务会被调用去寻找服务器地址。
In the second style, you have to make use of a special client API. You hand
the function name and its parameters to this library on the client side.
On the server side, you have to explicitly write the server yourself, as
well as the remote procedure implementation.
在第二种风格中，你会用到一些特别的 client 端 API，这些 API，包括函数名，和参数
是在生成的 client 代码中的。与此不同的是，在 server 端，你必须用你的手把代码敲
出来，包括这些远程函数的实现。
This approach is used by many RPC systems, such as Web Services. It is also
the approach used by Go's RPC.
很多 RPC 系统都采用了这种方法，比如 Web Services. 当然，Go 的 PRC 也采用了这样
的方法。
13.2 Go RPC
Go's RPC is so far unique to Go. It is different to the other RPC systems,
so a Go client will only talk to a Go server. It uses the Gob serialisation
system discussed in chapter X, which defines the data types which can be
used.
Go的RPC是非常独特的。它与别的RPC系统不同，所以Go的client 只能跟Go的server
对话。它被用在第十章讨论的 Gob 序列化系统里面，用来定义可被使用的数据类型。
RPC systems generally make some restrictions on the functions that can be
called across the network. This is so that the RPC system can properly
determine what are value arguments to be sent, what are reference arguments
to receive answers, and how to signal errors.
RPC 系统一般来说是对远程的函数调用的一些限定。这也就是为什么 RPC 系统可以恰当地
决定哪些参数要被传递，哪些引用参数来接受数据，以及如何做错误警报。
 the function must be public (begin with a capital letter);
 have exactly two arguments, the first is a pointer to value data to
be received by the function from the client, and the second is a pointer
to hold the answers to be returned to the client; and
 have a return value of type os.Error
函数必须是公共的(也就是首字母大写)
有且仅有2个指针参数，第一个指向 “接收器”——接受从client端发过来的数据值，
第二个指向 "发送器"——存放向 client 端发送的返回值。
 有一个 os.Error 类型返回值
For example, a valid function is
比方说，一个合法的函数应该是如下这样的
F(&T1, &T2) os.Error
The restriction on arguments means that you typically have to define a
structure type. Go's RPC uses the gob package for marshalling and
unmarshalling data, so the argument types have to follow the rules ofgob as
discussed in an earlier chapter.
所谓的对参数的限定指的是你只需要定义数据类型。Go 的 RPC 会用 gob 包来编组和解编
组数据，所以对于参数类型，你只需要按照之前讨论过的 gob 的规则定义就可以。
We shall follow the example given in the Go documentation, as this
illustrates the important points. The server performs two operations which
are trivial - they do not require the "grunt" of RPC, but are simple to
understand. The two operations are to multiply two integers, and the second
is to find the quotient and remainder after dividing the first by the second.
我们应该参考 Go 的官方文档的例子，因为这些例子展示了一些关键点。Server 端执行 2
种操作，这些操作看起来非常浅显易懂，这里没用 RPC 的那些难懂的细节，而是非常易于
理解。 第一种操作是两个整数相乘，第二个则是第一个数字除以第二个数字然后求商取
余。
The two values to be manipulated are given in a structure:
2 个操作数被放在了一个结构体里：
type Values struct {
X, Y int
}
The sum is just an int, while the quotient/remainder is another structure
两数之和是一个 int, 而商数和余数则在另一个结构体里
type Quotient struct {
Quo, Rem int
}
We will have two functions, multiply and divide to be callable on the RPC
server. These functions will need to be registered with the RPC system.
The function Register takes a single parameter, which is an interface. So
we need a type with these two functions:
我们会把这两个程序，也就是乘法和除法, 部署在 RPC 的 server 端等待调用。这些函数
过会儿会被注册到 RPC 系统里去。函数 Register 会带一个 interface 类型的参数。 所
以我们要给这两个函数定义一个类型。
type Arith int
func (t *Arith) Multiply(args *Args, reply *int) os.Error {
*reply = args.A * args.B
return nil
}
func (t *Arith) Divide(args *Args, quo *Quotient) os.Error {
if args.B == 0 {
return os.ErrorString("divide by zero")
}
quo.Quo = args.A / args.B
quo.Rem = args.A % args.B
return nil
}
The underlying type of Arith is given as int. That doesn't matter - any type
could have done.
Arith 背后的实际类型是 int. 这不要紧 - 任何类型都可以。
An object of this type can now be registered using Register, and then its
methods can be called by the RPC system.
这个类型的对象现在可以用 Register 函数来注册, 之后，RPC 系统就可以调用这个方法
了。
HTTP RPC Server
HTTP RPC 服务器
Any RPC needs a transport mechanism to get messages across the network.
Go can use HTTP or TCP. The advantage of the HTTP mechanism is that it can
leverage off the HTTP suport library. You need to add an RPC handler to
the HTTP layer which is done using HandleHTTP and then start an HTTP server.
The complete code is
任何 RPC 系统都需要一个传输机制来跨网络地传递消息。Go 可以用 HTTP 或 TCP。用 HTTP
机制的优势就是可以借助 HTTP 来支持库文件。你需要通过 HandleHTTP 在 HTTP 层上加一
个 RPC 处理器， 然后启动一个 HTTP 服务器。完整的代码是这样
/**
* ArithServer
*/
package main
import (
"fmt"
"net/rpc"
"errors"
"net/http"
)
type Args struct {
A, B int
}
type Quotient struct {
Quo, Rem int
}
type Arith int
func (t *Arith) Multiply(args *Args, reply *int) error {
*reply = args.A * args.B
return nil
}
func (t *Arith) Divide(args *Args, quo *Quotient) error {
if args.B == 0 {
return errors.New("divide by zero")
}
quo.Quo = args.A / args.B
quo.Rem = args.A % args.B
return nil
}
func main() {
arith := new(Arith)
rpc.Register(arith)
rpc.HandleHTTP()
err := http.ListenAndServe(":1234", nil)
if err != nil {
fmt.Println(err.Error())
}
}
HTTP RPC client
HTTP RPC 客户端
The client needs to set up an HTTP connection to the RPC server. It needs
to prepare a structure with the values to be sent, and the address of a
variable to store the results in. Then it can make a Callwith arguments:
客户端需要设置一个 HTTP 连接，来连接 RPC 服务器。客户端需要发起一个对 RPC 服务器
的连接。它需要准备一个包含要发送数据的结构体, 以及一个接受返回值的变量地址。之
后，它就可以用参数来 调用了，参数如下
 The name of the remote function to execute
 The values to be sent
 The address of a variable to store the result in
想要调用的远程函数的名字
被发送的数据结构体
储存返回值的变量地址
A client that calls both functions of the arithmetic server is
一个调用在远端服务器上的这两个计算函数的客户端是这样的
/**
* ArithClient
*/
package main
import (
"net/rpc"
"fmt"
"log"
"os"
)
type Args struct {
A, B int
}
type Quotient struct {
Quo, Rem int
}
func main() {
if len(os.Args) != 2 {
fmt.Println("Usage: ", os.Args[0], "server")
os.Exit(1)
}
serverAddress := os.Args[1]
client, err := rpc.DialHTTP("tcp", serverAddress+":1234")
if err != nil {
log.Fatal("dialing:", err)
}
// Synchronous call
args := Args{17, 8}
var reply int
err = client.Call("Arith.Multiply", args, &reply)
if err != nil {
log.Fatal("arith error:", err)
}
fmt.Printf("Arith: %d*%d=%d\n", args.A, args.B, reply)
var quot Quotient
err = client.Call("Arith.Divide", args, ")
if err != nil {
log.Fatal("arith error:", err)
}
fmt.Printf("Arith: %d/%d=%d remainder %d\n", args.A, args.B, quot.Quo,
quot.Rem)
}
TCP RPC server TCP RPC 服务端
A version of the server that uses TCP sockets is
一个使用 TCP socket 的服务器是这样的
/**
* TCPArithServer
*/
package main
import (
"fmt"
"net/rpc"
"errors"
"net"
"os"
)
type Args struct {
A, B int
}
type Quotient struct {
Quo, Rem int
}
type Arith int
func (t *Arith) Multiply(args *Args, reply *int) error {
*reply = args.A * args.B