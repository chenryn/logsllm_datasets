### McIlroy的程序展示了UNIX工具的强大之处：将复杂问题分解成若干简单部分，每个部分都有明确的处理方法。为了解决单词出现频率的问题，McIlroy采用了以下步骤：

1. **文本转换**：使用`tr`将纯文本文件转换为单词列表，每行一个单词。
2. **大小写统一**：再次使用`tr`将所有单词转换为小写，以确保统计时大小写不敏感。
3. **排序**：通过`sort`对单词列表进行排序。
4. **去重与计数**：使用`uniq -c`去除重复单词，并为每个唯一单词加上计数。
5. **按计数排序**：使用`sort -k1,1nr -k2`先按计数从大到小排序，再按单词从小到大排序。
6. **输出前N个结果**：使用`sed`（或`head`）显示前N个高频单词。

这些步骤最终形成了一个名为`wf`（word frequency）的Shell脚本，用于计算并输出文本中出现频率最高的N个单词。此外，我们还扩展了原始的`sed`命令，使其支持可选的输出长度参数，并更新了`sort`选项以符合现代标准。完整的脚本如例5-5所示。

#### 例5-5：单词出现频率过滤器
该脚本从标准输入读取文本，输出出现频率最高的N（默认值为25）个单词及其计数。

```sh
#!/bin/sh

# 将非字母字符替换为换行符
tr -c 'A-Za-z' '\n' | \
# 将所有大写字母转为小写
tr 'A-Z' 'a-z' | \
# 排序单词
sort | \
# 去除重复项并显示计数
uniq -c | \
# 按计数从大到小、单词从小到大排序
sort -k1,1nr -k2 | \
# 显示前N行（默认为25）
sed $(1:-25)q
```

需要注意的是，某些旧版本的`tr`不支持POSIX转义序列，这在Mcllroy的原始程序中曾被批评。不过，目前测试过的系统都已支持这一功能。

除了Shell管道外，Bentley提出了一种仅用六行代码实现相同功能的`awk`程序，其内容与Mcllroy的方法大致相似。Knuth和Hanson进一步讨论了这些程序的计算复杂度，并通过运行时分析找到了最快的实现方式。

对于Mcllroy的方法，除了`sort`之外的所有步骤都是线性时间复杂度。由于`sort`的时间复杂度为O(n log n)，因此整体性能主要取决于排序操作。实际上，`wf`的执行速度通常会比简单的`cat`慢一些。

#### 使用示例
我们可以使用莎士比亚的作品《哈姆雷特》来测试这个脚本，并使用`pr`重新格式化输出结果，以便每行显示四列：

```sh
$ wf < hamlet.txt | pr -4
```

### 标签列表生成器
另一个相关的工具是`taglist`，它可以从XML/SGML/HTML文件中提取标签，并生成一个包含标签使用情况的排序列表。该程序的工作流程如下：

1. **提取标签**：使用`egrep`选择由标签括起来的单词。
2. **分割字段**：使用`tr`将空白和定界符转换为换行符。
3. **格式化输出**：使用`awk`输出标签、单词及文件名。
4. **排序**：首先按单词顺序排序，然后按标签顺序排序。
5. **去重**：使用`uniq`提供初始计数字段。
6. **过滤与标记**：使用`awk`过滤连续行，并添加箭头符号以标记不同标记的单词。

完整的`taglist`脚本如例5-6所示。

#### 例5-6：标签列表生成器
该脚本从给定的XML/SGML/HTML文件中提取标签，并输出按单词和标签排序的结果。

```sh
#!/bin/sh

# 读取文件
cat "$1" | \
# 替换特定标签
sed -e 's#systemitem role="url"#URL#g' -e 's#/systemitem/URL+#g' | \
# 转换空白和定界符为换行符
tr '()[]\n' '\n\n\n\n\n\n\n' | \
# 选择标签内的单词
egrep '>[^<>]+' | \
# 格式化输出
awk -v FILE="$1" '
BEGIN { OFS = "\t" }
{ printf("%-31s\t%-15s\t%s\n", $3, $2, FILE) }' | \
# 按单词排序
sort | \
# 去重并计数
uniq -c | \
# 按单词和标签排序
sort -k2,2 -k3,3 | \
# 过滤连续行并添加箭头标记
awk '{
    if ($2 != Last) print($0)
    else print($0 " <-")
    Last = $2
}'
```

### 小结
本章介绍了利用简单的UNIX工具和管道解决文字处理问题的方法。主要观点包括：

- **数据标记**：使用简单的字符（如制表符、冒号或逗号）作为标记，有助于保持数据的简洁性和可处理性。
- **组合工具**：将基本的UNIX工具与管道结合使用，可以灵活地处理多步数据处理任务。
- **简化输出**：保持输出的简单性，使输出可以直接作为新工具的输入，从而实现更复杂的处理流程。

通过这些方法，我们可以高效地处理各种文本数据，并生成有用的报告。