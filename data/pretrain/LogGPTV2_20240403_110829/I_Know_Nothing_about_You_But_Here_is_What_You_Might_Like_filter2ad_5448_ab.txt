Whenever u rates an item (Step 3 in Algorithm 1), the x-
client encrypts it (along with the sampled ones) under SG,
transforms it to a ciphertext under SM using MSG→SM , and
sends it to the x-server. Additionally, the x-client can decrypt
the encrypted output (Step 14), which it receives from the TP,
using SG. Finally, the x-client computes the predictions and
recommends the unseen items to the end-user u.
X-server. The x-server stores the user proﬁles encrypted under
SM . The x-server performs addition, negation and multipli-
cation operations over the input encrypted under SM (steps
8, 14 in Algorithm 1). Note that the multiplication operation
requires an additional key-switching matrix (Mmult) as we
explain in more detail in § III. The x-server uses two additional
key-switching matrices (MST P →SM , MSM→ST P ) during the
neighbor selection step (X-NN), for communicating with the
TP, to select the threshold-based neighbors (Step 9).
TP. The TP has its own private key ST P as well as a private
key-switching matrix MSM→SG (received from the TTP at the
one-time setup). The TP switches the output of the x-server
encrypted under SM to a ciphertext under SG using MSM→SG.
Finally, the TP sends the encrypted output to the x-client who
can decrypt it using SG. Recall that the TP and the x-server
collaborate to compute the threshold-based neighbors (Step 9)
using X-NN.
B. Privacy Guarantees
We now present the two levels of privacy guaranteed by
X-REC. Current state-of-the-art systems provide at most one
of these privacy guarantees.
System-level privacy. This notion corresponds to the classical
concept of secure multiparty computation [24], [29], applied to
the context of a recommender. Consider an ideal recommender
R, which would be executed by a trusted black-box that
computes predictions for unrated items and returns the correct
output. Speciﬁcally, R takes a user proﬁle (in the form of a
vector) from each user as an input and outputs, to each user, the
predicted ratings of unrated items, and, to the service provider,
the encrypted proﬁles of all users. (R takes nothing from
the TP, and outputs nothing to the TP.) Given that encrypted
proﬁles are semantically secure [30], R can expose encrypted
proﬁles to the service provider and still be ideal.
Deﬁnition 1 (System-level privacy): A recommender S en-
sures system-level privacy if S and R are indistinguishable to
the service provider as well as to the users who collude with
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:37:11 UTC from IEEE Xplore.  Restrictions apply. 
the service provider. 5
Threats. The main threat here is the curious service provider
(x-server in X-REC) who tries to learn private data (e.g.
gender, ethnicity, location) by snooping on user proﬁles. In
particular, the x-server could be a curious recommender, a
database administrator, a server compromised by hackers, or a
root administrator of the machine that stores user proﬁles. In
addition, the x-server might collude with one or more users to
leak user data.
Guarantees. X-REC guarantees system-level privacy as long as
X-HE is semantically secure and the key-switching technique
(explained later with our implementation) is secure. In our
implementation, the semantic security is reduced to the hard-
ness of the Learning-With-Errors (LWE) problem [31] (i.e.,
no efﬁcient algorithm is able to solve the LWE problem).
Breaking the instance of the LWE problem [32] here takes
approximately 233.04 seconds on a 2.3GHz AMD Opteron
machine, which is sufﬁciently hard for a curious adversary,
and thus enables us to do a fair comparison with other private
recommenders in system aspects such as latency. We show the
concrete hardness (later in § VI) by estimating the complexity
of four state-of-the-art algorithms in solving the LWE problem:
EXHAUSTIVE SEARCH [33], MEET-IN-THE-MIDDLE [33],
BLUM-KALAI-WASSERMAN (BKW) [34], and BOUNDED-
DISTANCE-DECODING [32]. The x-server (as well as the TP)
is unable to learn anything about user proﬁles.
Assumptions. X-REC’s system-level privacy relies on the fol-
lowing two assumptions: (1) the x-server and the TP do
not collude; (2) all corrupted parties are honest-but-curious.
In addition, all parties trust the TTP, which can be easily
instantiated as the TTP is only involved once at setup. This
honest-but-curious model is a standard one assumed by recom-
menders, e.g., [11], [24], [35]. A possible deployment scenario
for X-REC is as follows. Service providers such as Netﬂix
and Amazon hold the role of the x-server, while a privacy-
conscious organization chosen by users, such as EDRI and
EFF runs the TP where the organization is contractually bound
not to collude with the enterprise. This mechanism is called
the dealer mechanism and has been approved by the European
privacy certiﬁcation organization EUROPRISE [16].
User-level privacy. This notion, which we use to formalize the
information leak of user proﬁles, is essentially (approximate)
differential privacy [15].
Deﬁnition 2 (User-level privacy): A recommender S en-
sures user-level privacy if for any pair of users u and v
in the system, a recommendation received by u from S is
indistinguishable 6 from a recommendation received by u from
the ideal one without v.
Threats. The main threat is a curious user who tries to learn
other users’ proﬁles only by querying recommendations. As X-
REC guarantees system-level privacy, the collusion with the x-
server does not provide any information to the curious user and
thus the collusion is not considered as a threat. This is different
from the context of database systems where differential privacy
has been initially introduced, and where the user might collude
with the server and thus know all but one entry.
5“Indistinguishable” intuitively means that there is no computationally-
bounded algorithm that can distinguish S from R. [29]
6This notion of indistinguishability is different from that of system-level
privacy. More precisely, we consider here (, δ)-indistinguishability [15].
Guarantees. X-REC guarantees (, δ) user-level privacy for
1−F , δ = F given the uniform user-sampling rate F ∈
 = ln 1
(0, 1] of X-REC. 7 (We discuss the privacy guarantee in detail
in our companion technical report [19].)
Assumptions. X-REC ensures user-level privacy based on
the following assumptions: (1) all corrupted parties are honest-
but-curious; (2) once the users rate an item,
they do not
change it; (3) corrupted parties have no auxiliary knowledge
of other user proﬁles. As pointed out before, the honest-but-
curious model is common in practice. The second assumption
is typical for a recommender. The two datasets, MovieLens
and FilmTrust, also conﬁrm the fact that users do not revisit
their ratings. In Movielens, there is 0% revisited rating among
the items whereas in FilmTrust there is 0.0084%, which could
be considered negligible. The third assumption captures the
fact that the main threat is a curious user who usually does
not have a clear target in mind. (For example, the curious user
does not probe other users in advance and cannot collude with
the x-server to learn auxiliary information about other users.)
III. X-HE: ENCRYPTION
In X-REC, we show that recommendations can be com-
puted from a small set of arithmetic operations over integers:
addition, multiplication and comparison. In this section, we
present X-HE, our implementation of an encryption scheme
that performs these operations in a homomorphic way. We
describe X-HE, following the main steps of a recommendation
computation (Figure 1). For presentation simplicity, we ignore
here performance optimizations, e.g., sampling, and system-
level privacy extensions, e.g. obfuscators. (We discuss more
of these implementation details in § V.) We then explain the
key-switching technique followed by a proof sketch of X-HE’s
semantic security [30]. (The full proof is in [19].) Note that
the key-switching technique is crucial for system-level privacy.
Without key-switching, a malicious user, colluding with the
x-server, can decrypt any other user’s proﬁle, stored on the
x-server, since the proﬁles are encrypted under the same key.
Encryption. The secret keys in X-HE are vectors. In this
section, we denote SG and SM (Table I) by the vectors (cid:6)s
and (cid:6)sm respectively to emphasize on the usage of vectors.
The security parameters of X-HE (q, n, χα) are distributed to
each user (by the x-server). The key of user u is (cid:6)s, a vector of
length n and consisting of integers modulo q. Let y represent
a positive integer rating in u’s proﬁle. The x-client (xcu) of u
encrypts y as follows.
1) It draws a noise e from distribution χα.
2) Then, it uniformly chooses c2, . . . , cn from Zq.
3) Next, it computes
c1 = (wy + e − n(cid:7)
(4)
where w is a performance parameter that shifts the
plaintext y to the left so that y is not altered by noise
e.
cisi) mod q
i=2
4) The resulting (cid:6)c = (c1, c2, . . . , cn) is the ciphertext of y.
The x-client for u encrypts some integers (chosen by item
sampling) in u’s proﬁle and sends them to the x-server. We
use [y]s to represent a ciphertext of integer y under key s.
7Non-uniform user-sampling is impractical as the x-server does not see
the proﬁles and cannot improve the quality of the recommendations from
sampling users non-uniformly.
442
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:37:11 UTC from IEEE Xplore.  Restrictions apply. 
Integer addition. The x-server receives encrypted proﬁle
updates and initiates the recommendation computation. The
x-server computes addition as (cid:6)c = ( (cid:6)c1 + (cid:6)c2) mod q where (cid:6)c1
and (cid:6)c2 are ciphertexts under the same key as (cid:6)c.
Integer multiplication. To perform a multiplication, a special
matrix Mmult (Table I) is prepared and distributed to the x-
server (at setup), as we explain later. Mmult ∈ Z
where
l is a performance parameter of X-HE (a tradeoff between the
noise ampliﬁcation and the latency). The x-server computes
integer multiplication as follows.
T (cid:6)c2 and ﬂattens the resulting
1) The x-server computes (cid:6)c1
2) The x-server represents each integer of (cid:6)cround = (cid:3)(cid:6)cf lat/w(cid:4)
mod q in l digits 8 (with base d, a parameter of X-HE and
l = (cid:5)logd(q)(cid:4) + 1).
(cid:3)l
(cid:6)c∗ such that (cid:6)c∗
i · di−1.
3) The x-server organizes the digits of all n2 integers into
l) where (cid:6)cround =
matrix into (cid:6)cf lat.
2, . . . , (cid:6)c∗
= ( (cid:6)c∗
n×n2l
q
1, (cid:6)c∗
(cid:6)c∗
i=1
4) The x-server computes (cid:6)c = (cid:6)c∗M T
mult mod q where (cid:6)c is
the resulting ciphertext.
Integer negation. In order to perform the integer comparison
(explained in § IV-A), we deﬁne integer negation as a primitive
operation. The x-server computes integer negation by (cid:6)c = (q−
(cid:6)c1) mod q where the subtraction is element-wise.
In § IV and § V, we overload operators +/− and · to repre-
sent the X-HE integer addition/subtraction and multiplication
respectively (instead of ordinary operations) for the sake of
notation simpliﬁcation.
Decryption. The x-client for user u receives a vector of
encrypted integers as predicted ratings. The vector (cid:6)c is a
ciphertext corresponding to the vector of predicted ratings and
has been switched to user u’s key (cid:6)s by the TP. Then, the x-
client decrypts (cid:6)c as: y = (cid:3)((cid:6)s · (cid:6)c mod q)/w(cid:4).
Key-switching. Performance parameters d and l concern key-
switching: a smaller d leads to a slower increase of the noise,
while a larger l increases the complexity of integer multipli-
cation. Parameters d and l are initialized and distributed to the
TTP and after the one-time setup, to every user u 9, the TP
and the x-server.
As pointed out previously,
the x-client for u encrypts
integers (ratings) and sends them to the x-server. To prevent
the x-server’s collusion with other users, before the x-client
sends encrypted integers, it has to switch the key. Suppose that
Ms→sm is the special matrix in Z
that helps the switch
from key (cid:6)s to key (cid:6)sm. The x-client switches the key as follows.
1) The x-client represents each integer of (cid:6)c in l digits and
=
organizes the digits of all n integers into (cid:6)c∗ such that (cid:6)c∗
( (cid:6)c∗
i · di−1.
2, . . . , (cid:6)c∗
(cid:3)l
l) where (cid:6)c =
2) The x-client computes (cid:6)c∗M T
s→sm mod q. The resulting
n×nl
q
1, (cid:6)c∗
(cid:6)c∗
i=1
vector is a ciphertext encrypted under key (cid:6)sm.
Similarly, before the encrypted predicted ratings are sent
to the x-client, the ciphertext of each integer is key-switched
with the help of a special matrix Msm→s ∈ Z
by the TP.
We now explain the computation of Ms→sm. The computa-
tion of Msm→s follows similar steps. Both matrices are called
n×nl
q
8(cid:2)M(cid:3) denotes the rounded value of M to the nearest integer.
9The x-server distributes these parameters when a new user joins.
443
key-switching matrices throughout the paper.
1) During the one-time setup, the TTP creates l copies of (cid:6)s
(by multiplication): (cid:6)s, d·(cid:6)s, . . . , dl−1·(cid:6)s, where d is the base
of the l digits in key-switching, and organizes the copies
into (cid:6)sd such that (cid:6)sd = ((cid:6)s, d · (cid:6)s, . . . , dl−1 · (cid:6)s).
2) The TTP solves the equation system (cid:6)smMs→sm = ( (cid:6)sd +(cid:6)e)
mod q for some noise (cid:6)e drawn from χα. The ﬁrst element
of (cid:6)sm is set to 1 so that the TTP may randomly choose the
last n− 1 rows and then compute the ﬁrst row of Ms→sm.
During the one-time setup, the TTP also generates a key-
switching matrix Mmult for integer multiplication. The TTP
generates Mmult in a similar way as Ms→sm: if we replace
T (cid:6)sm in the algorithm
(cid:6)s with the ﬂattened vector of matrix (cid:6)sm
above, we end up with an algorithm for the TTP to generate
Mmult.
Semantic security. We summarize the semantic security [30]
of X-HE in the following theorem.
Theorem 1: X-HE is semantically secure given that the
LWE problem is hard with parameters χα, n and q.
two integers are indistinguishable: (e −(cid:3)n
Proof sketch: The hardness of the underlying LWE
problem states that for any efﬁcient algorithm, the following
i=2 cisi) mod q
in Equation (4), and a uniformly random integer modulo q
given c2, . . . , cn. Hence, it is also difﬁcult to distinguish c1
and a uniformly random integer modulo q given c2, . . . , cn.
Therefore, X-HE is semantically secure. (The full proof is in
our companion technical report [19].)
IV. X-NN: NEIGHBORHOOD SELECTION
X-HE does not support comparison which is required for
recommenders. In this section, we present an implementation
of X-NN that builds on X-HE, and operates between the x-
server and the TP to output a ciphertext of an indicator of
integer comparison. Our description of X-NN follows the key
procedure of neighborhood selection, ignoring performance
optimizations for presentation simplicity, e.g., sampling.
A. Threshold Comparison with X-NN
The x-client for user u encrypts a scaled integer 10 that cor-
responds to the normalized rating Ru,i (Equation 3) for each
sampled item i. Similar computations are performed by the
x-client for user v. These ratings are updated in the encrypted
user proﬁles stored on the x-server. Leveraging these encrypted
proﬁles of users u and v, the x-server computes τ (u, v) by
Equation 1, using integer addition and integer multiplication
operations of X-HE only. Let α be the ciphertext of τ (u, v).
The x-server then decides whether v is a neighbor of u. In
X-REC, T is a global threshold for all users to select neighbors.
Users u and v are neighbors only if τ (u, v) is higher than T .
An initial T is encrypted and distributed to the x-server at the
one-time setup. 11 Let β be the ciphertext of T .
The x-server runs X-NN with the TP as shown in Figure
2. We now provide a schematic overview of the computation
the x-server chooses a random integer a and
steps. First,
encrypts it into γ. Second, the x-server computes c + γ and
sends c + γ to the TP where c = α − β. Third, the TP
10Normalized ratings are typically ﬂoating-point numbers which are not
supported by X-HE.
11The x-server may tune T later based on the surveys of users’ satisfaction,
which is not the focus of this paper.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:37:11 UTC from IEEE Xplore.  Restrictions apply. 
decrypts c + γ and decomposes the integer τ (u, v) − T + a
into bits, re-encrypts them, and sends the ciphertexts back.
Finally, with the encrypted decomposed bits and plaintext a,
the x-server computes an encryption of the most signiﬁcant
bit (MSB) of the integer τ (u, v)− T . This is equivalent to the
Iverson bracket indicator d[v is a neighbor], using integer addition
and integer multiplication of X-HE.
We now highlight
the following two detailed remarks.
First, the TP does not know the master key (cid:6)sm (using the
notation from the previous section; M in Figure 2). Instead,
the TP is given another key and before the x-server sends
c + γ, the x-server switches the ciphertext from the initial one
under the key (cid:6)sm and after the x-server receives the encrypted
decomposed bits, the x-server switches the ciphertext back
to another one under the key (cid:6)sm, using the key-switching
functionality of X-HE (Figure 2). In addition, the x-server
encrypts a using key (cid:6)s and key-switches γ to an encryption
under (cid:6)sm. The key-switching matrices are distributed to the x-
server also at the one-time setup as shown in Table I. Second,
as a multi-bit subtractor (that computes the most signiﬁcant