# DLL劫持原理及其漏洞挖掘（一）

##### 译文声明
本文为翻译文章，仅供参考。具体内容和含义以原文为准。

## 0x0 前言
我研究DLL劫持的原因如下：
1. 学习Windows的库加载机制。
2. 在sangforSRC上发现漏洞并前往长沙打卡。
3. 探索免杀及权限持久化的方法。

## 0x1 什么是DLL
动态链接库（Dynamic-Link Library, 简称DLL）是微软在Windows操作系统中实现共享函数库的一种方式。这些库文件通常具有`.DLL`、`.OCX`（包含ActiveX控件的库）或`.DRV`（旧式系统的驱动程序）扩展名。

### 动态链接与静态链接
- **动态链接**：将一些常用的代码制作成DLL文件。当可执行文件调用DLL中的函数时，Windows操作系统才会将DLL加载到内存中。这种方式可以显著减少内存浪费。
- **静态链接**：直接将库链接到可执行文件中。这种方式的优点是不需要外部支持，兼容性好；缺点是占用空间较大，且不方便修复bug。

### DLL文件格式
DLL文件的格式与Windows EXE文件相同，即等同于32位Windows的可移植执行文件（PE）和16位Windows的新可执行文件（NE）。作为EXE格式，DLL可以包含源代码、数据和资源的多种组合。

#### 相关概念
- **静态库**：被链接后直接嵌入可执行文件中。
  - 优点：无环境依赖，兼容性好。
  - 缺点：浪费空间，不方便修复bug。
- **动态库**：在程序运行时动态加载。
  - 优点：减少磁盘和内存消耗。
  - 缺点：容易造成版本冲突。

- 静态库命名：Linux下通常是`libxxx.a`，Windows下则是`*.lib`、`*.h`。
- 动态库命名：Linux下通常是`libxxx.so`，Windows下则是`*.dll`、`*.OCX`等。

## 0x2 DLL的用途
DLL的主要用途是在程序进行动态链接时加载所需的库函数。动态链接最直接的好处是减少了磁盘和内存的消耗。然而，DLL也存在版本冲突的问题，可以通过将不同版本的DLL放在不同的文件夹中来解决。

## 0x3 入门DLL的使用

### 0x3.1 编写TestDll.dll
1. 使用Visual Studio 2017创建一个新的DLL项目。
2. 分析DLL的组成，其中`dllmain.cpp`代码如下：

```cpp
// dllmain.cpp : 定义 DLL 应用程序的入口点。
#include "pch.h"

BOOL APIENTRY DllMain(HMODULE hModule, DWORD ul_reason_for_call, LPVOID lpReserved) {
    switch (ul_reason_for_call) {
        case DLL_PROCESS_ATTACH:
        case DLL_THREAD_ATTACH:
        case DLL_THREAD_DETACH:
        case DLL_PROCESS_DETACH:
            break;
    }
    return TRUE;
}
```

我们可以在该文件中引入`Windows.h`库，并编写一个`msg`函数：

```cpp
#include <windows.h>

void msg() {
    MessageBox(0, L"Dll-1 load succeed!", 0, 0);
}
```

接下来，在解决方案资源管理器中打开头文件`framework.h`，导出`msg`函数：

```cpp
#pragma once
#define WIN32_LEAN_AND_MEAN // 从 Windows 头文件中排除极少使用的内容
#include <windows.h>

extern "C" __declspec(dllexport) void msg(void);
```

编译生成`TestDll.dll`文件。可以使用16进制文件查看器检查DLL的文件头，其结构与EXE文件相同。

### 0x3.2 调用dll文件
1. 在解决方案处右键新建一个控制台应用程序项目，命名为`hello`。
2. 修改`hello.cpp`文件内容如下：

```cpp
// hello.cpp : 此文件包含 "main" 函数。程序执行将在此处开始并结束。
#include <iostream>
#include <windows.h>
using namespace std;

int main() {
    typedef void(*DLLFUNC)(void);
    DLLFUNC GetDllfunc = NULL;

    HINSTANCE hinst = LoadLibrary(L"TestDll.dll");
    if (hinst != NULL) {
        GetDllfunc = (DLLFUNC)GetProcAddress(hinst, "msg");
    }

    if (GetDllfunc != NULL) {
        (*GetDllfunc)();
    }

    return 0;
}
```

按Ctrl+F5运行调试，可以看到成功加载了我们编写的`msg`函数。

有关更多细节的解释，请参考：[C++编写DLL文件](https://my.oschina.net/u/4338312/blog/3376870)

## 0x4 DLL劫持漏洞

### 0x4.1 原理简述
**DLL劫持漏洞（DLL Hijacking Vulnerability）**是指在进程尝试加载DLL时，如果没有指定DLL的绝对路径，Windows会按照特定顺序搜索目录来查找DLL。如果攻击者能够将恶意的DLL放在优先于正常DLL所在的目录中，系统就会加载恶意DLL，从而形成“劫持”。CWE将其归类为**Untrusted Search Path Vulnerability**。