macOS 从运行库劫持到内核提权
周智
About
• Senior Security Engineer of AntFinancial (Alipay)
LightYear Security Labs
• Product security and offensive security research
• Acknowledged by Microsoft, Apple, Adobe and 
VMware for reporting security vulnerabilities
• Conference speaking:
• BlackHat USA 2017
• HITB 2019
• TyphoonCon 2019
PART 01
Attack Surface
CONTENTS
PART 02
Root Cause
PART 03
Exploit
PART 04
Mitigation
01
02
03
04
Why kernel exploit
• To overcome or disable System Integrity Protection (Rootless)
• File system protection (/System)
• Attaching to Apple-signed processes
• Enforced signature validation for KEXT
• Deploy Rootkits
• Gain more pwn points
Motivation
• General approach
• attack kernel mode driver or XNU to control $pc, then disable SIP in kernel mode
• Think outside the box
• Is memory corruption always necessary?
• Do the target have be the kernel itself or kernel mode drivers?
• What about user space SIP bypass to gain kernel privilege?
PART 01
An Attack Surface
patch kextd
(@osxreverser, Nov 2013)
Custom build of kextload
(@patrickwardle, BlackHat US 2015)
Old days with kext_tools
•
Issue 676: Logic error when exec-ing suid binaries allows code execution as root on OS X/iOS (CVE-2015-3708)
•
Issue 353: OS X kextd bad path checking and toctou allow a regular user to load an unsigned kernel extension (CVE-2015-3709)
•
Issue 1520: MacOS double mach_port_deallocate in kextd due to failure to comply with MIG ownership rules (CVE-2018-4139)
•
Issue 676: Logic error when exec-ing suid binaries allows code execution as root on OS X/iOS (CVE-2015-3708)
User mode only, logic
•
Issue 353: OS X kextd bad path checking and toctou allow a regular user to load an unsigned kernel extension (CVE-2015-3709)
User mode only, logic
•
Issue 1520: MacOS double mach_port_deallocate in kextd due to failure to comply with MIG ownership rules (CVE-2018-4139)
User mode only, MIG lifetime
Arbitrary code 
execution in kextd == 
kernel code execution
kextload
kextd
XNU
Doesn’t matter
What makes kextd so special
• Its entitlement
• A bundle resource containing key-value pairs that grant the executable permission 
to use an app service or technology
• A property list (XML serialized) embedded in executable’s code signature
• Some entitlements are for Apple signed binaries only
• “taskgated: killed app because its use of the com.apple.*** entitlement is not 
allowed”
➜
~ jtool --ent /usr/libexec/kextd -arch x86_64
com.apple.private.KextAudit.user-access
com.apple.private.allow-bless
com.apple.private.kernel.get-kext-info
com.apple.rootless.kext-secure-management
com.apple.rootless.storage.KernelExtensionManagement
com.apple.security.cs.allow-unsigned-executable-memory
•
Entitled to call kext_request
•
Permission to write /Library/StagedExtensions
Checks by kextd / kextload / kextutil
• Implemented in function authenticateKext of kext_tools
• Check bundle permission, must be owned by root and not writable by other groups
• Check bundle signature: must be signed
• During the loading process, the bundle must be staged to a rootless protected location: /Library/StagedExtensions
(requires com.apple.rootless.storage.KernelExtensionManagement entitlement)
• Invoke syspolicyd to ask user for approval to load a valid signed third party extension (User-Approved Kernel Extension Loading or SKEL)
• If SIP is disabled, some of the checks will be skipped
Secure Kernel Extension Loading
• Even a valid signed kernel extension still requires user approve to load
• Managed by user space daemon syspolicyd, not XNU
• Rules stored in a SQLite database 
• The database is protected by rootless, even root permission is 
insufficient to modify
➜
~ sudo file /var/db/SystemPolicyConfiguration/KextPolicy
/var/db/SystemPolicyConfiguration/ExecPolicy: SQLite 3.x database, last written using SQLite version 3024000
➜
~ sudo xattr /var/db/SystemPolicyConfiguration/
com.apple.rootless
➜
~ sudo sqlite3 /var/db/SystemPolicyConfiguration/KextPolicy
SQLite version 3.24.0 2018-06-04 14:10:15
Enter ".help" for usage hints.
sqlite> .tables
kext_load_history_v3
kext_policy_mdm
kext_policy
settings
sqlite> .header on
sqlite> select * from kext_policy;
team_id|bundle_id|allowed|developer_name|flags
9PTGMPNXZ2|com.symantec.kext.SymAPComm|1|Symantec|8
9PTGMPNXZ2|com.symantec.kext.ndcengine|1|Symantec|8
9PTGMPNXZ2|com.symantec.kext.internetSecurity|1|Symantec|8
9PTGMPNXZ2|com.symantec.kext.ips|1|Symantec|8
Z3L495V9L4|com.intel.kext.intelhaxm|1|Intel Corporation Apps|1
VB5E2TV963|org.virtualbox.kext.VBoxDrv|1|Oracle America, Inc.|1
@interface KextManagerPolicy : NSObject
- (BOOL)canLoadKernelExtensionAtURL:(id)url isCacheLoad:(BOOL)cache;
@end
@interface SPKernelExtensionPolicy : NSObject
- (char) canLoadKernelExtension:(id)ext error:(NSError *)err;
- (char) canLoadKernelExtensionInCache:(id)ext error:(NSError *)err;
@end
kextd
syspolicyd
XPC
Prompt / Reject / Pass based on SQLite database rules
SKEL bypass
• To bypass, pick any one of the following
• Code execution on a rootless entitled process, modify the KextPolicy database
• Get the task port of syspolicyd, patch 
-[KextManagerPolicy canLoadKernelExtensionAtURL:isCacheLoad:]
• Get the task port of kextd, patch
-[SPKernelExtensionPolicy canLoadKernelExtensionInCache:error]
A logic kernel attack surface
• Neither the signature nor file permission is checked by kernel
• It accepts kext_request as long as the user space process has com.apple.rootless.kext-secure-management entitlement
• User space process kextd / kextutil / kextload are responsible to perform the signature and other validation
• Once you own the entitlement, you rule the kernel
• Or you can try to obtain a task port for those entitled process (which are still protected by SIP)
PART 02
Hijack the Entitlement
DLL Hijack on Windows
• Trick the target application to load malicious library
• Abuse DLL search order
• Abuse runtime (LoadLibrary)
• …
• DLL hijacking on trusted application to bypass UAC prompt
• Is there anything similar on macOS?
Dylib Hijacking
• Use dylib hijacking to steal entitlement from Apple signed binaries
• Known techniques
• LC_LOAD_WEAK_DYLIB and relative @rpath
https://www.virusbulletin.com/virusbulletin/2015/03/dylib-hijacking-os-x
• dlopen
• NSBundle.principalClass (dlopen internally)
• CFBundleLoadExecutable (dlopen internally)
• CFBundleLoadExecutableAndReturnError (dlopen internally)
VM Regions Near 0xdeadbf57:
--> 
__TEXT                 0000000108b04000-0000000108b05000 [    4K] r-x/rwx SM=COW  /tmp/*
Application Specific Information:
dyld2 mode
Thread 0 Crashed:: Dispatch queue: com.apple.main-thread
0   libsystem_c.dylib
0x00007fff5da2859c flockfile + 18
1   libsystem_c.dylib
0x00007fff5da2b570 fwrite + 66
2   test                          0x0000000108b04f82 main + 82
3   libdyld.dylib
0x00007fff5d9a43d5 start + 1
Thread 0 crashed with X86 Thread State (64-bit):
rax: 0x00000001171ee66c  rbx: 0x00000000deadbeef  rcx: 0x00000001171ee66c  rdx: 0x0000000000000001
Symbolication
The bug
• The CoreSymbolication framework provides private APIs for symbolicating and other diagnostic information 
(/System/Library/PrivateFrameworks/CoreSymbolication.framework)
• Under certain circumstances it will try to load a dynamic library from a controllable path
• When trying to demangle Swift symbols:
• CoreSymbolication!call_external_demangle(char const*)
• More specifically, it will try to load a Swift runtime library, libswiftDemangle.dylib
handle = _dlopen("/System/Library/PrivateFrameworks/Swift/libswiftDemangle.dylib",1);
if (((handle == 0) && ((len = get_path_relative_to_framework_contents("../../Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/libswiftDemangle.dylib", alternative_path,0x400),
len == 0 || (handle = _dlopen(alternative_path,1), handle == 0)))) && ((len2 = get_path_relative_to_framework_contents("../../usr/lib/libswiftDemangle.dylib",alternative_path,0x400), 
len2 == 0
|| (handle = _dlopen(alternative_path,1), handle == 0)))) {
handle_xcselect = _dlopen("/usr/lib/libxcselect.dylib",1);
if (handle_xcselect == 0) goto cleanup;
p_get_dev_dir_path = (undefined *)_dlsym(handle_xcselect,"xcselect_get_developer_dir_path");
if ((p_get_dev_dir_path == (undefined *)0x0) ||
(cVar2 = (*(code *)p_get_dev_dir_path)(alternative_path,0x400,&local_42b,&local_42a,&local_429), cVar2 == 0)) {
handle = 0;
} else {
_strlcat(alternative_path, "/Toolchains/XcodeDefault.xctoolchain/usr/lib/libswiftDemangle.dylib", 0x400);
handle = _dlopen(alternative_path,1);
}
_dlclose(handle_xcselect);
if (handle == 0) goto cleanup;
}
__ZL25demanglerLibraryFunctions.0 = _dlsym(handle,"swift_demangle_getSimplifiedDemangledName");
insecure dlopen
(dylib hijack)
00001287 lea
rdi,[s_DEVELOPER_DIR_000025b9]   ;  = "DEVELOPER_DIR"
0000128e call
__stubs::_getenv
;  char * _getenv(char * param_1)
00001293 mov
r14,rAX
00001296 test
r14,r14
00001299 jz
env_not_set
0000129b mov
r13,rbx
0000129e mov
rdi,r14
000012a1 mov
rsi,r12
000012a4 mov
ebx,dword ptr [local_440 + rbp]
000012aa mov
edx,ebx
000012ac mov
rcx,r15
000012af call
_xcselect_find_developer_contents_from_path
; undefined _xcselect_find_develop
000012b4 test
found,found
000012b6 jz
LAB_000013a6        
000012bc mov
rdi,r12
000012bf mov
rsi,r14
000012c2 call
__stubs::_strcmp
; int _strcmp(char * param_1, char
000012c7 test
found,found
000012c9 jz
LAB_000013bb        
000012cf lea
rdi,[s_DEVELOPER_DIR_000025b9]   ; = "DEVELOPER_DIR"
000012d6 mov
edx,0x1
000012db mov
rsi,r12
000012de call
__stubs::_setenv
; int _setenv(char * param_1, char
xcselect.dylib!xcselect_get_developer_dir_path
Trigging the bug
• This file /System/Library/PrivateFrameworks/Swift/libswiftDemangle.dylib actually exists on High Sierra
• To force it to load our payload, apply a custom sandbox profile before spawning the entitled binary
• 以子之盾 攻子之盾
(version 1)
(allow default)
(deny file-read*
(literal "/System/Library/PrivateFrameworks/Swift/libswiftDemangle.dylib")
(literal "/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/libswiftDemangle.dylib")
(literal "/usr/lib/libswiftDemangle.dylib")
)
Find an entitled host
• The binary must 
• have special entitlement that we need
• have at least one code path to trigger dylib hijacking
• A magical entitlement com.apple.system-task-ports, with whom the process can attach to any other processes (even those 
restricted), and gain arbitrary entitlement
com.apple.SamplingTools
➜
~ ls 
/usr/bin/{filtercalltree,heap32,stringdups32,leaks32,heap,atos,vmmap32,sample,malloc_history32,symbols,vmmap
,leaks,stringdups,malloc_history}
/usr/bin/atos
/usr/bin/leaks32
/usr/bin/stringdups32
/usr/bin/filtercalltree
/usr/bin/malloc_history
/usr/bin/symbols
/usr/bin/heap
/usr/bin/malloc_history32 /usr/bin/vmmap
/usr/bin/heap32
/usr/bin/sample
/usr/bin/vmmap32
/usr/bin/leaks
/usr/bin/stringdups
➜
~ vmmap Finder
Process: 
Finder [245]
Path:
/System/Library/CoreServices/Finder.app/Contents/MacOS/Finder
Load Address:
0x107205000
Identifier:
com.apple.finder
com.apple.SamplingTools
• There are several graphical applications and command-line tools available for 
gathering performance metrics.
https://developer.apple.com/library/archive/documentation/Performance/C
onceptual/PerformanceOverview/PerformanceTools/PerformanceTools.html
• SIP exception, entitled to debug any process, including restricted
➜
~ jtool --ent `which vmmap`
com.apple.system-task-ports
Scenario