# macOS 从运行库劫持到内核提权

## 周智
### 关于作者
- 蚂蚁金服（支付宝）高级安全工程师
- LightYear Security Labs 成员
- 专注于产品安全和进攻性安全研究
- 曾被 Microsoft, Apple, Adobe 和 VMware 等公司认可并表彰其报告的安全漏洞
- 演讲经历：
  - BlackHat USA 2017
  - HITB 2019
  - TyphoonCon 2019

## 目录
1. 攻击面
2. 根本原因
3. 利用方法
4. 缓解措施

### 为什么需要内核利用
- 克服或禁用系统完整性保护 (SIP/Rootless)
- 文件系统保护 (/System)
- 附加到 Apple 签名的进程
- 强制 KEXT 的签名验证
- 部署 Rootkits
- 获取更多权限点

### 动机
- 通用方法
  - 攻击内核模式驱动程序或 XNU 以控制 $pc，然后在内核模式下禁用 SIP
- 创新思考
  - 内存破坏是否总是必要的？
  - 目标必须是内核本身或内核模式驱动程序吗？
  - 用户空间绕过 SIP 以获得内核权限？

## 第一部分：攻击面
### kextd 补丁
- @osxreverser, Nov 2013
- @patrickwardle, BlackHat US 2015
- 旧时代的 kext_tools

#### 已知问题
- 问题676: 执行 suid 二进制文件时的逻辑错误允许在 OS X/iOS 上以 root 身份执行代码 (CVE-2015-3708)
- 问题353: OS X kextd 错误路径检查和 TOCTOU 允许普通用户加载未签名的内核扩展 (CVE-2015-3709)
- 问题1520: MacOS 中由于未能遵守 MIG 所有权规则导致 kextd 双重 mach_port_deallocate (CVE-2018-4139)

### kextd 特殊之处
- 权限
  - 包含授权应用程序服务或技术使用的键值对的捆绑资源
  - 嵌入在可执行文件代码签名中的属性列表 (XML 序列化)
  - 某些权限仅适用于 Apple 签名的二进制文件
  - `jtool --ent /usr/libexec/kextd -arch x86_64` 显示了多个关键权限

### 安全内核扩展加载
- 即使是有效签名的内核扩展也需要用户批准才能加载
- 由用户空间守护进程 syspolicyd 管理，而不是 XNU
- 规则存储在受 rootless 保护的 SQLite 数据库中

### 绕过 SKEL
- 通过以下任意一种方式实现：
  - 在具有 rootless 权限的进程中执行代码并修改 KextPolicy 数据库
  - 获取 syspolicyd 的任务端口并修补 `- [KextManagerPolicy canLoadKernelExtensionAtURL:isCacheLoad:]`
  - 获取 kextd 的任务端口并修补 `- [SPKernelExtensionPolicy canLoadKernelExtensionInCache:error]`

### 逻辑内核攻击面
- 内核不检查签名或文件权限
- 只要用户空间进程具有 `com.apple.rootless.kext-secure-management` 权限，它就会接受 kext 请求
- 用户空间进程 kextd、kextutil 或 kextload 负责进行签名和其他验证
- 一旦拥有该权限，就可以控制内核

## 第二部分：劫持权限
### DLL 劫持在 Windows 上
- 通过欺骗目标应用程序加载恶意库来绕过 UAC 提示
- 类似的技术在 macOS 上是否存在？

### Dylib 劫持
- 使用 dylib 劫持从 Apple 签名的二进制文件中窃取权限
- 已知技术
  - LC_LOAD_WEAK_DYLIB 和相对 @rpath
  - dlopen
  - NSBundle.principalClass (内部使用 dlopen)
  - CFBundleLoadExecutable (内部使用 dlopen)
  - CFBundleLoadExecutableAndReturnError (内部使用 dlopen)

### CoreSymbolication 框架中的漏洞
- 在某些情况下，CoreSymbolication 框架会尝试从可控路径加载动态库
- 当尝试解码 Swift 符号时，会尝试加载 libswiftDemangle.dylib

### 触发漏洞
- 通过应用自定义沙箱配置文件来强制加载我们的负载
- 寻找具有所需特殊权限的宿主进程
- 使用具有 `com.apple.system-task-ports` 权限的工具（如 vmmap）

### 场景描述
- 这些工具可以调试任何进程，包括受限进程
- 使用 jtool 查看 vmmap 的权限，确认其具有 `com.apple.system-task-ports` 权限

希望以上内容能够帮助您更好地理解 macOS 从运行库劫持到内核提权的过程。