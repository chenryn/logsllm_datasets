For each packet arriving within the current interval ∆, the
router inserts in the packet header the feedback information
computed during the previous interval ∆. As a consequence,
the feedback is retarded by ∆ time units inside the router
in addition to any backward directional delays D←
. Since
MKC is robust to feedback delay, this extra ∆ time units
does not aﬀect stability of the system. We provide more
implementation details below.
i
During interval ∆, the router keeps a local variable S,
which tracks the total amount of data that has arrived into
the queue (counting any dropped packets as well) since the
beginning of the interval. Speciﬁcally, for each incoming
packet k from ﬂow i, the router increments S by the size of
the packet: S = S + si(k). In addition, the router examines
whether its locally recorded estimate ˜p of packet loss (which
was calculated in the previous interval ∆) is larger than
the one carried in the packet. If so, the router overrides the
corresponding entries in the packet and places its own router
ID, packet loss, and sequence number into the header. In
this manner, after traversing the whole path, each packet
records information from the most congested link.3
(cid:80)N
i=1 xi(n − D→
At the end of interval ∆, the router approximates the com-
i ) by averaging
bined arriving rate X(n) =
S over time ∆:
˜X =
S
∆
.
(57)
Based on this information, the router computes an estimate
of packet loss p(n) as following:
˜p =
˜X − C
˜X
,
(58)
3Note that multi-path routing is clearly a problem for this
algorithm; however, all AQM congestion control methods
fail when packets are routed in parallel over several paths.
(a)
(b)
Figure 10: Naive EMKC implementation: (a) one ns2
ﬂow (α = 100 kb/s, β = 0.9, and ∆ = 50 ms) passes
through a bottleneck link of capacity 10 mb/s; (b)
inconsistent feedback and reference rate.
where C is the capacity of the outgoing link known to the
router (these functions are performed on a per-queue basis).
After computing ˜p, the router increments its packet-loss
sequence number (i.e., seq = seq + 1) and resets variable S
to zero. Newly computed values seq and ˜p are then inserted
into qualiﬁed packets arriving during the next interval ∆
and are subsequently fed back by the receiver to the sender.
The latter adjusts its sending rate as we discuss in the next
section.
6.3 The User
MKC employs the primal algorithm (12)-(13) at the end-
users who adjust their sending rates based on the packet loss
generated by the most congested resources of their paths.
However, to properly implement MKC, we need to address
the following issues.
First, notice that ACKs carrying feedback information
continuously arrive at the end-user and for the most part
contain duplicate feedback (assuming ∆ is suﬃciently large).
To prevent the user from responding to redundant or some-
times obsolete feedback caused by reordering, each packet
carries a sequence number seq, which is modiﬁed by the bot-
tleneck router and is echoed by the receiver to the sender.
At the same time, each end-user i maintains a local variable
seqi, which records the largest value of seq observed by the
user so far. Thus, for each incoming ACK with sequence
seq, the user responds to it if and only if seq > seqi. This
allows MKC senders to pace their control actions such that
their rate adjustments and the router’s feedback occur on
the same timescale.
Second, recall from (12)-(13) that MKC requires both the
delayed feedback ηi(n) and the delayed reference rate xi(n−
Di) when deciding the next sending rate. Thus, the next
problem to address is how to correctly implement the control
equation (12). We develop two strategies for this problem
below.
6.3.1 Naive Implementation
One straightforward option is to directly follow (12) based
on the rate that was in eﬀect exactly Di time units earlier.
Since round-trip delays ﬂuctuate, the most reliable way to
determine xi(n − Di) is to carry this information in the usr
ﬁeld of each packet (see Figure 9). When the receiver echoes
the router ﬁeld to the sender, it also copies the user ﬁeld
IP header Router header (cid:1)(cid:2) : router ID (4) (cid:3)(cid:4)(cid:5) : router sequence number (4) (cid:6) : packet loss (4) (cid:7) : interval length (4) User header (cid:8)(cid:3)(cid:9) : custom user field (4) Data  … 16 bytes 4 bytes  00.511.522.5305101520253035time (sec)rate (mb/s)source router  (a)
(b)
(a) ns2 topology
(b) simulation results
Figure 11: Proper EMKC implementation:
(a)
graphical explanation of the algorithm; (b) result of
ns2 simulations with one EMKC ﬂow (α = 100 kb/s,
β = 0.9, and ∆ = 50 ms) over a link of capacity 10
mb/s.
into the acknowledgment. We show the performance of this
strategy via ns2 simulations in Figure 10(a), in which a sin-
gle MKC ﬂow passes through a bottleneck link of capacity
10 mb/s. We set α to 100 kb/s, β to 0.9, packet size to
200 bytes, and router sampling interval ∆ to 50 ms. As
seen from Figure 10(a), the sending rate converges to its
stationary point in less than 2 seconds and does not exhibit
oscillations in the steady state; however, the ﬂow exhibits
transient oscillations and overshoots C by over 200% in the
ﬁrst quarter of a second. Although this transient behavior
does not aﬀect stability of the system, it is greatly undesir-
able from the practical standpoint.
6.3.2 Proper Implementation
To remove the transient oscillations, we ﬁrst need to un-
derstand how they are created. Notice from (57)-(58) that
since the router calculates the packet loss based on the aver-
age incoming rate over interval ∆, it is possible that packets
of diﬀerent sending rates xi(n1) and xi(n2) arrive to the
router during the same interval ∆. Denote by Ti(n) the
time when user i receives the n-th non-duplicate feedback
p(n). Since the user responds to each feedback only once, it
computes new sending rates xi(n) at time instances Ti(n).
To better understand the dynamics of a typical AQM con-
trol loop, consider the illustration in Figure 10(b). In the
ﬁgure, the router generates feedback p(n − 1) and p(n) ex-
actly ∆ units apart. This feedback is randomly delayed by
time units and arrives to the user at instances Ti(n− 1)
D←
and Ti(n), respectively. In response to the ﬁrst feedback, the
user changes its rate from xi(n−2) to xi(n−1); however, the
router observes the second rate only at time Ti(n− 1) + D→
.
At the end of the n-th interval ∆, the router averages both
rates xi(n − 2) and xi(n − 1) to produce its feedback p(n)
as shown in the ﬁgure.
When the control loop is completed, the user is misled to
believe that feedback p(n) refers to a single rate x(n−1) and
is forced to incorrectly compute x(n). This inconsistency is
especially pronounced in the ﬁrst few control steps during
which the ﬂows increase their rates exponentially and the
amount of error between the actual rate and the reference
rate is large.
i
i
Instead of changing the router, we modify the end-users
Figure 12: Four EMKC ﬂows (α = 100 kb/s and
β = 0.9) with heterogeneous feedback delays share
a bottleneck link of capacity 10 mb/s.
to become more sophisticated in their processing of network
feedback. The key is to allow end-users to accurately esti-
mate their own contribution to ˜X and determine their av-
erage rates seen by the router during interval ∆. For each
outgoing packet k, MKC sender i places the packet’s sequence
number k in the usr ﬁeld and records in local memory the
size of the packet si(k) and its sequence number k. Upon
arrival of the n-th non-duplicate feedback at time Ti(n),
the end-ﬂow extracts the usr ﬁeld from the acknowledgment
and records its value in variable zi(n), which is the sequence
number of the packet that generated feedback p(n). To com-
pute the new rate xi(n), the user calculates the amount of
data that it has transmitted between packets zi(n − 1) and
zi(n)− 1 and normalizes the sum by ∆, which is exactly the
average rate used by the router in generation of p(n).
To visualize this description, consider Figure 11(a),
in
which the end-ﬂow is about to decide its sending rate xi(n)
at time Ti(n). Notice in the ﬁgure that feedback p(n) is
based on all packets of ﬂow i with sequence numbers be-
tween zi(n − 1) and zi(n) − 1. Through the use of zi(n), we
obtain a projection of the time-interval used by the router
in its computation of p(n) onto the sequence-number axis
of the end user.4 Given the above discussion, the user com-
putes its average rate as:
zi(n)−1(cid:88)
k=zi(n−1)
¯xi(n) =
1
∆
si(k),
(59)
and utilizes it in its control equation:
xi(n) = ¯xi(n) + α − βηi(n)¯xi(n).
(60)
Next, we turn our attention to the ns2 simulation in Fig-
ure 11(b) and examine the performance of this strategy with
a single ﬂow. The ﬁgure shows that (59)-(60) successfully
eliminates transient oscillations and oﬀers fast, monotonic
convergence to the steady state. Our next example shows
the performance of the new method (59)-(60) with multiple
ﬂows. The simulation topology of this example is illustrated
in Figure 12(a): four EMKC ﬂows identical to that in Figure
10(a) share the same bottleneck link of capacity 10 mb/s.
The round trip delays of the four ﬂows are 50 ms, 60 ms, 70
ms, and 80 ms, respectively, and the sampling intervals ∆
4Note that this approach is robust to random delays, but
may be impeded by severe packet loss at the router.
source router  00.511.522.53024681012time (sec)rate (mb/s)Snd1Snd4Snd3Snd2Rcv1Rcv4Rcv3Rcv2C1C4C3C2C5C610 mb/s30 mb/s25 mb/s20 mb/s15 mb/s01020304050024681012time (sec)rate (mb/s)of routers C1-C5 are 120 ms, 140 ms, 160 ms, 180 ms, and
100 ms, respectively. At time 0, the ﬁrst ﬂow starts at 125
kb/s and monotonically converges to bottleneck capacity in
less than 0.4 seconds as seen in Figure 12(b). Five seconds
later, the second ﬂow joins at initial rate 150 kb/s. The
ﬁgure shows that the system is immediately re-stabilized in
the new stationary point and the individual ﬂows quickly
converge to fairness without oscillations. This behavior is
repeated when the other two ﬂows join the network and the
system regains stability and fairness with ideal performance
(i.e., monotonically).
7. CONCLUSION
This paper investigated the properties of Internet conges-
tion controls under non-negligible directional feedback de-
lays. We focused on the class of control methods with sym-
metric Jacobians and showed that all such systems are stable
under heterogeneous delays. To construct a practical con-
gestion control system with a symmetric Jacobian, we made
two changes to the classic discrete Kelly control and created
a max-min version we call MKC. Combining the latter with a
negative packet-loss feedback, we developed a new controller
EMKC and showed in theory and simulations that it oﬀers
smooth sending rate and fast convergence to eﬃciency. Fur-
thermore, we demonstrated that EMKC’s convergence rate
to fairness is exponential when the network provider scales
the number of ﬂows N as Θ(C) and linear otherwise. From
the implementation standpoint, EMKC places very little bur-
den on routers, requires only two local variables per queue
and one addition per arriving packet, and allows for an easy
implementation both in end-to-end environments and under
AQM support. Our future work involves improvement of the
convergence speed to fairness and design of pricing schemes
for EMKC to achieve loss-free performance regardless of the
number of ﬂows N .
8. REFERENCES
[1] R. Bronson. Schaum’s Outline of Theory and Problems of
Matrix Operations. McGraw-Hill, 1988.
[2] D.-M. Chiu and R. Jain, “Analysis of the Increase and
Decrease Algorithms for Congestion Avoidance in
Computer Networks,” Computer Networks and ISDN
Systems, 17(1):1–14, June 1989.
[3] M. Dai and D. Loguinov, “Analysis of Rate-Distortion
Functions and Congestion Control in Scalable Internet
Video Streaming,” ACM NOSSDAV, June 2003.
[10] K. Kar, S. Sarkar, and L. Tassiulas, “A Simple Rate
Control Algorithm for Maximizing Total User Utility,”
IEEE INFOCOM, April 2001.
[11] D. Katabi, M. Handley, and C. Rohrs, “Congestion Control
for High Bandwidth Delay Product Networks,” ACM
SIGCOMM, August 2002.
[12] W. G. Kelley and A. C. Peterson. Diﬀerence Equations.
Harcourt / Academic Press, 2001.
[13] F. P. Kelly, “Charging and Rate Control for Elastic
Traﬃc,” European Transactions on Telecommunications,
8(1):33–37, January 1997.
[14] F. P. Kelly, A. K. Maulloo, and D. K. H. Tan, “Rate
Control for Communication Networks: Shadow Prices,
Proportional Fairness and Stability,” Journal of the
Operational Research Society, 49(3):237–252, March 1998.
[15] T. Kelly, “Scalable TCP: Improving Performance in
High-speed Wide Area Networks,” First International
Workshop on Protocols for Fast Long-Distance Networks,
February 2003.
[16] S. Kunniyur and R. Srikant, “Analysis and Design of an
Adaptive Virtual Queue (AVQ) Algorithm for Active
Queue Management,” ACM SIGCOMM, August 2001.
[17] S. Kunniyur and R. Srikant, “A Time-Scale Decomposition
Approach to Adaptive Explicit Congestion Notiﬁcation
(ECN) Marking,” IEEE Transactions on Automatic
Control, 47(6):882 – 894, June 2002.
[18] S. Kunniyur and R. Srikant, “End-to-End Congestion
Control Schemes: Utility Functions, Random Losses and
ECN Marks,” IEEE/ACM Transactions on Networking,
11(5):689 – 702, October 2003.
[19] S. Kunniyur and R. Srikant, “Stable, Scalable, Fair
Congestion Control and AQM Schemes that Achieve High
Utilization in the Internet,” IEEE Transactions on
Automatic Control, 48(11):2024–2029, November 2003.
[20] C.-K. Li and R. Mathias, “The Determinant of the Sum of
Two Matrices,” Bull. Australian Math. Soc.,
52(3):425–429, 1995.
[21] D. Loguinov and H. Radha, “End-to-End Rate-Based
Congestion Control: Convergence Properties and Salability
Analysis,” IEEE/ACM Transactions on Networking,
11(5):564–577, August 2003.
[22] S. H. Low, “A Duality Model of TCP and Queue
Management Algorithms,” IEEE/ACM Transactions on
Networking, 11(4):525–536, August 2003.
[23] S. H. Low and D. E. Lapsley, “Optimization Flow Control
I: Basic Algorithm and Convergence,” IEEE/ACM
Transactions on Networking, 7(6):861–874, December 1999.
[24] L. Massouli´e, “Stability of Distributed Congestion Control
with Heterogeneous Feedback Delays,” IEEE/ACM
Transactions on Networking, 47(6):895–902, June 2002.
[25] F. Paganini, J. Doyle, and S. H. Low, “A Control
Theoretical Look at Internet Congestion Control,” The
Mohammed Dahleh Symposium, 2002.
[4] S. Deb and R. Srikant, “Global Stability of Congestion
[26] G. Vinnicombe, “On the Stability of End-to-End
Controllers for the Internet,” IEEE Transactions on
Automatic Control, 48(6):1055 – 1060, June 2003.
[5] S. Floyd, “High-speed TCP for Large Congestion
Windows,” RFC 3649, December 2003.
[6] S. Floyd, M. Handley, J. Padhye, and J. Widmer,
“Equation-Based Congestion Control for Unicast
Applications,” ACM SIGCOMM, August 2000.
[7] S. Floyd and V. Jacobson, “Random Early Detection
Gateways for Congestion Avoidance,” IEEE/ACM
Transactions on Networking, 1(4):397–413, January 1993.
[8] C. Jin, D. Wei, and S. H. Low, “FAST TCP: Motivation,
Architecture, Algorithms, Performance,” IEEE
INFOCOM, March 2004.
Congestion Control for the Internet,” Technical Report
CUED/F-INFENG/TR.398, University of Cambridge,
December 2000.
[27] G. Vinnicombe, “Robust congestion control for the
Internet,” Technical report, University of Cambridge, 2002.
[28] L. Xu, K. Harfoush, and I. Rhee, “Binary Increase
Congestion Control for Fast, Long Distance Networks,”
IEEE INFOCOM, March 2004.
[29] Y. R. Yang and S. S. Lam, “General AIMD Congestion
Control,” IEEE ICNP, November 2000.
[30] L. Ying, G. E. Dullerud, and R. Srikant, “Global Stability
of Internet Congestion Control with Heterogeneous
Delays,” American Control Conference, June 2004.
[9] R. Johari and D. K. H. Tan, “End-to-End Congestion
[31] Y. Zhang, S.-R. Kang, and D. Loguinov, “Delayed Stability
Control for the Internet: Delays and Stability,”
IEEE/ACM Transactions on Networking, 9(6):818–832,
December 2001.
and Performance of Distributed Congestion Control
(extended version),” Texas A&M Technical Report, August
2004.