### Secure Routing Tunnel Establishment (Outbound)

1. **Key Derivation:**
   - The initialization package allows the anonymized node to derive the keys of all intermediary nodes.
   - It is impossible for any intermediary node to derive any key on its own.

2. **Connection Request:**
   - The anonymized node informs the exit node of the desired AP address to connect to.
   - The exit node establishes the connection and confirms a successful connection back to the anonymized node.

3. **Connection Establishment:**
   - The connection is fully established at both ends, and the application layer can now start communicating over it.

### Secure Routing Tunnel Establishment (Inbound)

1. **Incoming Connection Request:**
   - An incoming connection request arrives at the entry node of the routing path.
   - The entry node sends an initialization package to the anonymized node, enabling it to derive the keys of all intermediary nodes, while preventing them from deriving any key themselves.

2. **Tunnel Creation:**
   - A new set of connections are created for the tunnel, and a reply package is sent through these connections.
   - The entry node confirms the connection to the external peer.

3. **Connection Confirmation:**
   - The entry node confirms a successful connection back to the anonymized node.
   - The connection is now fully established at both ends, and the application layer can start communicating over it.

4. **Symmetry with Outbound Connections:**
   - To achieve symmetry with outbound connections, a dummy package is first sent over the tunnel.
   - This symmetry is important for maintaining consistent behavior in both directions.

### Secure End-to-End Encryption

- Once a full anonymized end-to-end connection has been established between two peers, double-authenticated SSL can be used as a final layer of encryption and authentication.
- The used certificates can be stored in the network database, in the individual entries for each AP address.

### IP Backward Compatibility

- **Identical Format and Functionality:**
  - Address format
  - Port semantics
  - Connection semantics

- **Binary Hooks:**
  - No need for any application author assistance or source code modification.
  - The application wonâ€™t even know that it is being anonymized.
  - The common Internet DNS system can be used, and it is simple to start supporting IPv6 and similar protocols.

### The Network Database

- **Structure:**
  - Node IP address table, with associated info
  - Node AP address table, with associated info

- **Access and Security:**
  - The database can be accessed through a specific strict API.
  - Voting algorithms, digital signatures, and enforced entry expiry dates are used on top of standard DHT technology to enforce permissions and protect against malicious manipulation of database contents and query results.
  - Resilient to "net splits."

### Manual Override Command Support

- **Emergency Measures:**
  - Protection against DoS attacks.
  - Restoration after possible more or less successful DoS attacks.
  - Protection against known malicious nodes.

- **Command Flooding:**
  - Signed commands can be flooded to all clients.
  - Commands signed by trusted parties, e.g., project maintainers.
  - Verification certificate hard-coded into the client application.
  - Only commands for banning IP addresses or manually editing the network database, never affecting client computers.
  - Minor updates can be released with a new key (verification certificate) if signing keys leak or are cracked.

### High-Availability Routing Paths

- **Network Topology:**
  - Diagrams and descriptions of high-availability routing paths (X2a, X3a, X1e, etc.).

### Legal Aspects & Implications

- **File Sharing Example:**
  - Lawsuits based on various aspects of file sharing and anonymization networks.
  - Potential legal challenges and implications.

- **License Trickery:**
  - A license for the main specification requiring a certain EULA to accompany all implementations.
  - The EULA would state that users understand and agree to the limitations and responsibilities of using the protocol.

### Review of Design Goals

1. **Complete Decentralization:**
   - No central points or individually valuable nodes.
   - No single points of attack, either technically or legally.

2. **Maximum DoS Resistance:**
   - DoS resistance has been a concern throughout the design process.
   - Continuous improvement is necessary.

3. **Theoretically Secure Anonymization:**
   - All security is based on cryptography and randomness.
   - No gaping holes left to chance, but continuous review and improvements are needed.

4. **Theoretically Secure End-to-End Encryption:**
   - All data encrypted in multiple layers with well-known and trusted algorithms.
   - Connections wrapped by SSL for protection from external eavesdroppers.

5. **Isolation from the "Normal" Internet:**
   - Impossible to contact regular IP addresses from inside the anonymous network.
   - Cannot be used to commit illegal acts against non-participating computers.

6. **Protection against Protocol Identification:**
   - SSL connections used as an external shell, making it hard to distinguish from common web traffic.
   - Advanced traffic analysis methods can be resource-intensive and produce false positives.

7. **High Volume/Throughput Capacity:**
   - Nodes cannot determine if they are communicating directly or through intermediaries.
   - Supports arbitrary network communication and generic anonymization.

8. **Generic, Well-Abstracted, and Backward Compatible:**
   - Abstracted design allows for easy exchange or redesign of individual protocol levels.
   - Emulates/hooks all TCP network APIs, making it externally applicable to any TCP-based application.

### Comparison with Other Anonymization Solutions

- **Advantages over TOR:**
  - Designed for current and future anonymization needs.
  - Compatible with all existing and future network-enabled software.
  - Higher throughput, no traffic volume limits, isolated from the "normal" Internet, end-to-end encryption, better prevents positive protocol identification, not vulnerable to DNS leaks.

- **Advantages over I2P:**
  - Compatible with all existing and future network-enabled software.
  - Higher throughput, end-to-end encryption, better prevents positive traffic analysis identification.

- **Advantages over Anonymized P2P:**
  - Less likely to be targeted by a "general ban."
  - Generic nature opens up more potential than binding anonymization to a single application.

### Known Weaknesses

1. **Controlled Routing Path:**
   - If all nodes in a routing path are controlled by the same attacker, the attacker can bind the anonymized node to the entry/exit node.
   - Data eavesdropping is still impossible; only the AP addresses can be concluded.
   - Algorithms can be optimized to minimize this risk.

2. **Monitoring All Traffic:**
   - An attacker monitoring all nodes can conclude the same as in the previous weakness.
   - Some protocols use delays and junk data, but this goes against Phantom's high throughput design goal.

3. **Covert Channels:**
   - Intermediate nodes could communicate their identity to other attacker-controlled nodes using covert channels.
   - Micro delays and data chunk size reorganization can counter this to some degree, but it is hard to defend against completely.

### Summary

- **Project Goals:**
  - Explore optimal requirements for an anonymization solution.
  - Provide examples of solutions for associated problems.
  - Inspire discussions about the design of such a system.
  - Be the starting point of an open de facto standard for free, secure, and ubiquitous Internet anonymization.

- **For More Details:**
  - Refer to the Phantom white paper: [Phantom White Paper](http://www.fortego.se/phantom.pdf)

### Future of Phantom

- **Google Code Repository:**
  - Reserved for the project to coordinate future design, development, and implementation.
  - [Phantom Google Code Repository](http://code.google.com/p/phantom)

### Questions / Discussion

- If you have any questions, feel free to ask me over a beer or contact me by email: [PI:EMAIL]