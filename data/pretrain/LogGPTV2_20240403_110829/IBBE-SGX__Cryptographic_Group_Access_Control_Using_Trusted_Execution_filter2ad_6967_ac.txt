AES, by using the partition broadcast key bk as the symmetric
encryption key. Note that since the scheme is executing inside
an SGX enclave, a curious administrator cannot observe gk
nor the broadcast keys.
The group metadata of IBBE-SGX is therefore represented
by the set of all pairs composed of the partition ciphertext
and the encrypted group key (i.e. (ci, yi) in Figure 4). The
inquisitive cloud storage can then publicly receive and store
this set of group metadata.
Whenever a membership change happens, the administrator
will update the list of group members and send the affected
partition metadata to the cloud. The clients, in turn, can detect
a change in their group by listening to updates in their partition
metadata.
The partitioning mechanism has an impact on the compu-
tational complexity of the IBBE-SGX scheme on the admin-
istrator side. First, as the public key P K of the IBBE system
is linear in the maximal number of users in a group [29],
results that
the public key for the IBBE-SGX scheme is
linear in the maximal number of users in a partition (denoted
5
IBBE-SGX AND IBBE OPERATIONS COMPLEXITIES PER THE NUMBER OF
PARTITIONS OF A GROUP (|P|), THE FIX SIZE OF A PARTITION (|p|) AND
THE CARDINALITY OF THE GROUP MEMBERS SET (|S|).
TABLE I
Operation
System Setup
Extract User Key
Create Group Key
Add User to Group
Remove User from Group
Decrypt Group Key
IBBE [29]
IBBE-SGX
O(|S|)
O(|p|)
O(1)
O(1)
|P| × O(|p|) O(|S|2)
O(1)
|P| × O(1)
O(|p|2)
O(|S|2)
by |p|). Therefore, both the computational complexity and
storage footprint of the system setup phase can be reduced
by a factor representing the maximal number of partitions,
without losing any security guarantee. Second, the complex-
ities of IBBE-SGX operations change to accommodate the
partitioning mechanism, as shown in Table I. Creating a group
becomes the cost of creating as many IBBE-SGX partitions
that the ﬁxed partition size dictates. Adding a user to a group
remains constant, as the new user can be added either to
an existing partition or to a brand new one. Removing a
user implies performing a constant time re-keying for each
partition. Finally,
the decryption operation gains by being
quadratic in the number of users of the partition rather than
the whole group.
The partitioning mechanism also has an impact on the
storage footprint for group metadata. Compared to IBBE when
considering a single partition, the footprint is augmented by
the symmetrically encrypted partition broadcast key (i.e. yi)
and the nonce required for this symmetric encryption. When
considering an entire group, the cost of storing the group
metadata is represented by the cost of a single partition
multiplied by the number of partitions in the group, in addition
to a metadata structure that keeps the mapping between users
and partitions.
Although the partition mechanism induces a slight overhead,
the number of partitions in a group is relatively small com-
pared to the group size. Second, partition metadata are only
manipulated by administrators, so they can locally cache it
and thus bypass the cost of accessing the cloud for metadata
structures. Third, as our model accepts that the identities of
group members can be discovered by the curious administrator
or the cloud, there is no cryptographic operation needed to
protect the mappings within the partition metadata structure.
Determining the optimal value for the partition size mainly
depends on the dynamics of the group. Indeed, there is a
trade-off between the number and frequency of operations
performed by the administrator for group membership and
those performed by regular users for decrypting the broadcast
key. A small partition size reduces the decryption time on the
user side while a larger partition size reduces the number of
operations performed by the administrator to run IBBE-SGX
and to maintain the metadata.
Fig. 5. Big Picture Architecture
V. IBBE-SGX GROUP ACCESS CONTROL SYSTEM
We describe in this section the design and implementation
of an end-to-end group access control system based on IBBE-
SGX. The overall architecture is illustrated in Figure 5 and
consists of a client and an administrator using Dropbox as a
public cloud storage provider.
A. System Design
The administrator’s Application Programming Interface
(API) makes calls to the underlying SGX enclave that hold
the functionalities of IBBE-SGX which is built on top of an
IBBE component. Since SGX is not required on the client side,
the Client API directly calls the functionalities of the IBBE
component. Both administrators and clients make use of local
in-memory caches in order to save round-trips to the cloud for
accessing existing access policies. Administrators make use of
the PUT HTTP verb to send data to the cloud, while clients
are listening by using HTTP long polling. In Dropbox, long
polling works at the directory level, so we index the group
metadata as a bi-level hierarchy. The parent folder represents
the group, and each child stands for a partition.
The operation for creating a group is described in Algo-
rithm 1. Once the ﬁxed-size partitions are determined (line 1),
the execution enters the SGX enclave (lines 2 to 6) during
which the random group key is enveloped by the hash of each
partition broadcast key. The ciphertext values, as well as the
sealed group key, leave the enclave to be later pushed to the
cache and the cloud (line 7).
Algorithm 1 Create Group
Input: Group g, Members S = {u1, ..., un}, Partition size m
1: P ← {{u1, ..., um},{um+1, ..., u2m}, ...}
Enclaved
(bp, cp) ← sgx ibbe create partition(MSK, p)
yp ← sgx aes(sgx sha(bp), gk)
2: gk ← RandomKey()
3: for p ∈ P do
4:
5:
6: sealed gk ← sgx seal(gk)
7: Store: (1) sealed gk; (2) ∀p ∈ P : (cid:104)∀u ∈ p, yp, cp(cid:105)
The operation of adding a user to a group (Algorithm 2)
starts by ﬁnding the set of all partitions with remaining
capacity (line 1). If no such a partition is found, a new partition
is created for the user (line 3) and the group key is enveloped
6
Admin APIIBBEIBBE-SGX Intel SGX/g/p1/g/p2…DropboxIBBEClient APIClientCacheAdminCachehttpputhttplong pollingby the broadcast key of the new partition (lines 4 to 6), before
persisting its ciphertexts (line 7). Otherwise, a partition that is
not empty is randomly picked, and the user is added to it (lines
9, 10). Since the partition broadcast key remains unchanged,
only the ciphertext needs to be adapted to include the new
user (line 10). The partition members and ciphertext are then
updated on the cloud (line 12). Note that there is no need to
push the encrypted group key yadd as it was not changed.
Algorithm 2 Add User to Group
Input: Group: g, Partitions of g: P, User to add: uadd, Sealed
group key: sealed gk.
1: P(cid:48) ← ∀p ∈ P, such that |p| < m.
2: if P(cid:48) = ∅ then
3:
padd ← {uadd}
4:
5:
6:
Enclaved
(badd, cadd) ← sgx ibbe create partition(MSK, padd)
gk ← sgx unseal(sealed gk)
yadd ← sgx aes(sgx sha(badd), gk)
Store: (cid:104){uadd}, yadd, cadd(cid:105)
padd ← RandomItem(P(cid:48))
padd ← pu ∪ {uadd}
cadd ← sgx add user to partition(MSK, padd, uadd)
Update: (cid:104)∀u ∈ padd,∗, cadd(cid:105)
7:
8: else
9:
10:
11:
12:
13: P ← padd ∪ P
Removing a user from a group (Algorithm 3) proceeds by
removing the user from her hosting partition (lines 1 and 2).
Next, a new group key is randomly generated (line 3). The
former user hosting partition broadcast key and ciphertext are
changed to reﬂect the user removal (line 4) and then used for
enveloping the new group key (line 5). For all the remaining
partitions, a constant time re-keying regenerates the partition
broadcast key and ciphertext that envelopes the new group key
(lines 6 to 9). After sealing the new group key (line 10), the
changes of metadata for the group partitions are pushed to the
cloud (line 11). Note that the partition members only need to
be updated for the removed user hosting partition.
Algorithm 3 Remove User urem from Group g
Input: Group: g, Partitions of g: P, User to remove: urem.
1: prem ← p ∈ P, such that urem ∈ p.
2: prem ← prem \ {urem}
Enclaved
3: gk ← RandomKey()
4: (brem, crem) ← sgx remove user(MSK, prem, urem)
5: yrem ← sgx aes(sgx sha(brem), gk)
6: for p ∈ P \ prem do
(bp, cp) ← sgx rekey partition(p)
7:
yp ← sgx aes(sgx sha(bp), gk)
8:
9: sealed gk ← sgx seal(gk)
10: Update: (1) (cid:104)∀ui ∈ prem, yrem, crem(cid:105)
(2) ∀p ∈ P \ prem : (cid:104)∗, yp, cp(cid:105)
11:
As many removal operations can result in partially unoccu-
pied partitions, we propose the use of a re-partitioning scheme
7
whenever the partition occupancies are too low. We implement
a heuristic to detect a low occupancy factor such that if less
than half of the partitions are only two thirds full, then re-
partitioning is triggered. Re-partitioning consists in simply re-
creating the group following Algorithm 1.
Finally, the client decrypt operation works by ﬁrst using
IBBE to decrypt the broadcast key and then use the hash of
this key for an AES decryption to obtain the group key. Due to
space constraints, we omit the formal algorithm speciﬁcation.
B. Implementation
In order to implement the system, we used the PBC [10]
pairing-based cryptography library which, in turn, depends
on GMP [11] to perform arbitrary precision arithmetics. They
both have to be used inside SGX enclaves (Section IV).
There are several challenges when porting legacy code to run
inside enclaves. Besides having severe memory limitations
(Section III-A), it also considers privileged code running in
any protection ring but user-mode (ring 3) as not trusted.
Therefore, enclaves cannot call operating system routines.
Although memory limitations can have performance impli-
cations at runtime, they have little inﬂuence on enclave code
porting. Calls to the operating system, on the other hand, can
render this task very complex or even unfeasible. Luckily,
since both PBC and GMP mostly perform computations rather
than input and output operations, the challenges on adapting
them were chieﬂy restrained to tracking and adapting calls to
glibc. The adaptations needed were done either by relaying op-
erations to the operating system through outside calls (ocalls),
or performing them with enclaved equivalents. The outside
calls, however, do not perform any sensitive action that could
compromise security. Aside from source code modiﬁcations,
we dedicated efforts to adapt the compilation toolchain. This
happens because one has to use curated versions of standard
libraries (like the ones provided by Intel SGX SDK), besides
having to prevent the use of compiler’s built-in functions and
setting some other code generation ﬂags. The total number of
Lines of Code (LoCs) or compilation toolchain ﬁles that were
modiﬁed were 32 lines for PBC and 299 for GMP.
Apart from changes imposed by SGX, we also needed to
use common cryptographic libraries. Although some functions
are provided in v.1.9 of the Intel SGX SDK [19], its AES
implementation is limited to 128 bits. Since we aim at the
maximal security level, we used the AES 256 bits implemen-
tation provided in Intel’s port of OpenSSL [30]. The end-to-
end system encapsulating both IBBE-SGX and HE schemes
consists in 3,152 lines of C/C++ code and 170 lines of Python.
VI. EVALUATION
In this section, we benchmark the performance of the IBBE-
SGX scheme from three different perspectives: by measuring
the operations performance in isolation, then by comparing
them to Hybrid Encryption (HE), and ﬁnally by capturing
the performance when replaying realistic and generated access
control traces. We chose to compare IBBE-SGX to HE only
(a) System Set-Up Latency
(b) Key Extract Throughput
Fig. 6. Performance of the system bootstrap phase.
as the latter already shows better computational complexity
than IBBE (see Figure 2a).
The experiments were performed on a quad-core Intel i7-
6600U machine, having a processor at 3.4 GHz with 16 GB
of RAM, using Ubuntu 16.04 LTS.
A. Microbenchmarks
Within the microbenchmarks we isolate the performance of
each IBBE-SGX operation, and perform a comparison with
the HE scheme.
First, we evaluate the performance of the bootstrap phase.
It consists on setting up the system and generating secret
user keys, referenced in Figure 6. One can notice that the
setup phase latency increases linearly per partition size, with
a growth of 1.2s per 1,000 users. In contrast, extracting secret
user keys gives an average throughput of 764 operations per
second, independent of the partition size.
Next, we evaluate the behavior of IBBE-SGX operations