AWK的版本
Awk可以用来检验程序，也可以用来组织程序测试.本小节包含的程序有几分近亲相奸的味道：用
awk 程序检查awk 程序.
Awk的新版可能包含更多的内建变量与内建函数，而老程序有可能不小心用到了这些名字，例如，
80
老程序用sub命名一个变量，而在新版awk中，sub是一个内建函数，下面的程序可以用来检测这种错
误：
# compat - check if awk program uses new built-in names
BEGIN { asplit("close system atan2 sin cos rand srand "\
---
## Page 82
第三章数据处理
74
"match sub gsub", fcns)
asplit("ARGC ARGV FNR RSTART RLENGTH SUBSEP", Vars)
asplit("do delete function return", keys)
{line = s0 }
/"/
（（uT/（\\[、]）-/)qnsb}
remove strings,
///{gsub(/\/([^\/1|\\\/)+\//,"",1ine)）#reg exprs,
/#/
{sub(/#.*/，""，line）}
 and comments
px0u#（+6-02-z-1.x）d=u}
for (i = 1; i $1 }
---
## Page 84
第三章数据处理
76
如果遇到一个新文件，则关闭之前打开的文件，如果文件不是很多（小于同时处于打开状态的文件数的最
大值），那么这一行可以省略。
实现bundle与unbundle的方法还有很多种，但是这里介绍的方法是最简单的，而且对于比较短
的文件，空间效率也比较高，另一种组织方式是在每一个文件之前，添加一行带有文件名的，客易识别的
行，这样的话，文件名只需要出现一次，
Exercise 3.17比较不同版本bundle与unbundle的时间效率和空网效率，这些不同的版本用到了
不同的头部信息与尾部信息，对程序的性能与复杂性之间的折衰进行评价，
3.4多行记录
到目前为止遇到的记录都是由单行组成的，然而，还有大量的数据，其每一条记录都由多行组成，比
如地址薄
Adam Smith
1234 Wa11 St., Apt. 5C
New York, NY 10021
212 5554 321
或参考文献
Donald E. Knuth
The Art of Computer Programming
Volume 2: Seminumerical Algorithms, Second Edition
Addison-Wesley, Reading, Mass.
1981
或个人笔记
Chateau Lafite Rothschild 1947
12 bottles @ 12.95
如果大小合适，结构也很规范，那么创建并维护这些信息相对来说还是比较容易的，在效果上，每一
条记录都等价于一张索引卡片，与单行数据相比，使用awk处理多行数据所付出的工作量只是稍微多了
一点，我们将展示几种处理多行数据的方法。
由空行分隔的记录
假设我们有一本地址薄，其每一条记录的前面4行分别是名字，街道地址，城市和州，在这4行之后，
可能包含一行额外的信息，记录之网由一行空白行分丹：
83
Adam Smith
1234 Wa11 St., Apt. 5C
New York, NY 10021
212 5554321
---
## Page 85
第三章数据处理
77
David W. Copperfield
221 Dickens Lane
Monterey, CA 93940
408 555-0041
work phone 408 555-6532
Mary, birthday January 30
Canadian Consulate
555 Fifth Ave
New York, NY
212 5862400
如果记录是由空白行分隔的，那么它们可以被直接处理：若记录分隔符RS被设置成空值（RS="")，
则每一个行块都被当成一个记录，于是
BEGIN { RS = "" )
/New York/
打印所有的，含有NewYork的记录，而不管这个记录有多少行：
Adam Smith
1234 Wa11 St., Apt. 5C
New York, NY 10021
212 555-4321
Canadian Consulate
555 Fifth Ave
New York, NY
212 586-2400
如果记录按照这种方式打印出来，则输出记录之网是不会有空白行的，输入格式并不会被保留下来，为了
解决这个问题，最简单的办法是把输出记录分隔符ORS设置成\n\n：
（U\u\=SO=S }NI8
/New York/
与第4行），如果每一行都表示一条记录，那么就比较容易，只要把FS设置成\n即可：
84
BEGIN
{ RS = ""; FS = "\n" }
$1~/Smiths/{print $1,$4}#name,phone
程序的输出是
Adam Smith 212 555-4321
前面提过，不管FS的值是什么，换行符总是多行记录的字段分隔符之一.如果RS被设置成""，则默认
的字段分隔符就是空格符，制表符，以及换行符；如果FS是\n，则换行符就是唯一的字段分隔符，
---
## Page 86
第三章数据处理
84
处理多行记录
如果已经有一个程序可以以行为单位对输入进行处理，那么我们只需要再写2个awk程序，就可以
处理，最后，第2个程序再把输出转换成多行格式.（我们假设行的长度不会超过awk的上限）
为了使过程更加其体，现在让我们用Unix命令sort对地址薄进行排序，下面的程序pipeline
按照姓氏对输入进行排序：
# pipeline to sort address list by last names
awk '
{u\=S.=SX}NID8
（[（-x）ds]x#i）gu}
for (i = 1; i <= NF; i++)
sort|
awk '
BEGIN { FS = "!!#" )
{for (i = 2; i <= NF; i++)
printf ("$s\n", Si)
printf("\n")
素的个数，于是，姓氏保存在元素x[split（S1，x，”")]中（前提是记录的第1行的最后一个单词
11#，再后面是原多行记录的各个字段（字段之阔也是通过字符串！1#分隔）.只要是输入数据中没有出
现的，并且在排序时可以排在输入数据之前的字符串，都可以用来代替！1#.Sort之后的程序通过分隔
符11#识别原来的字段，并重构出多行记录
Exercise3.18修改第1个awk程序：检查输入数据中是否包含魔术字符串11#.
85
带有头部和尾部的记录
有时候，记录通过一个头部信息与一个尾部信息来识别，而不是字段分隔符，考虑一个简单的例子，
仍然是地址薄，不过每个记录都带有一个头部信息，该信息指出了记录的某些特征（比如职业），限在头部
后面的是名字，每条记录（除了最后一条）都由一个尾部结束，尾部由一个空白行组成：
accountant
Adam Smith
---
## Page 87
第三章数据处理
6L
1234 Wal1 St., Apt. 5C
New York, NY 10021
doctor - ophthalmologist
Dr. Will Seymour
798 Maple Blvd.
Berkeley Heights, NJ 07922
lawyer
David W. Copperfield
221 Dickens Lane
Monterey, CA 93940
doctor - pediatrician
Dr. Susan Mark
600 Mountain Avenue
Murray Hi1l, NJ 07974
为了打印所有医生的记录，范围模式是最简单的办法：
/^doctor/,/^s/
范围模式匹配以doctor开始，以空白行结束的记录（/^$/匹配一个空白行）.
为了从输出中移除掉头部信息，我们可以用
/~doctor/(p= 1;next}
p == 1
/~s/
{p=0;next }
这个程序使用了一个变量来控制行的打印，如果当前输入行包含有期望的头部信息，则p被设置为1，随
后的尾部信息将p重置为0（也就是p的初始值）.因为仅当p为1时才会把当前输入行打印出来，所以
程序只打印记录的主体部分与尾部，而选择其他输出组合反而比较简单。
名字-值
86
在某些应用中，数据可能包含更复杂的结构，例如，地址可能含有国家名称，也可能不包括街道地
址.
处理结构化数据的一种方法是为记录的每一个字段加上一个名字或关键词，例如，我们有可能如此
组织一本支票薄：
check 1021
to Champagne Unlimited
amount 123.10
re structure than can be captured by a sequente of unformatted lines
---
## Page 88
第三章数据处理
08
date 1/1/87
deposit
amount 500.00
date 1/1/87
check 1022
date 1/2/87
amount 45.10
to Getwell Drug Store
tax medical
check 1023
amount 125.00
to International Travel
date 1/3/87
amount 50.00
to Carnegie Ha11
date 1/3/87
check 1024
tax charitable contribution
to American Express
check 1025
amount 75.75
date 1/5/87
我们仍然使用多行记录，记录之间用一个空白行分隔，但是在记录内部，每一个数据都是自描述的：每一
个字段都由一个条目名称，一个制表符，及信息组成，这意味着不同的记录可以包含不同的字段，即使是
类似的字段，其排列顺序也可以不一样。
处理这种数据的方法之一是把它们都当作单行数据，但是要注意空白行被当作分隔符，每一行都指
出了字段的名称及其所对应的值，但是它们之间并没有以其他方式相联系?，比如说，如果我们想要计算
存款与支票的总额，只需要扣描存款项与支票项即可：
87
#check1 - print total deposits and checks
/^check/
{ck = 1;next }
/~deposit/ (dep = 1;next }
/^amount/
{amt = $2;next }
/~$ /
(addup())
---
## Page 89
第三章数据处理
81
END
(addup()
printf("deposits $%.2f, checks $&.2f\n",