原文来自安全客，作者：区块链威胁情报  
原文链接：
#### 安全事件
最近，智能合约漏洞很火。
让我们再来看一下4月22日BeautyChain（BEC）的智能合约中一个毁灭性的漏洞。
BeautyChain团队宣布，BEC代币在4月22日出现异常。攻击者通过智能合约漏洞成功转账了10^58 BEC到两个指定的地址。
具体交易详情
攻击者到底是怎么攻击的？为什么能转账这么大的BEC？
#### 智能合约代码
首先我们来看BEC转账的智能合约代码
    function batchTransfer(address[] _receivers, uint256 _value) public whenNotPaused returns (bool) {
        uint cnt = _receivers.length;
        uint256 amount = uint256(cnt) * _value;
        require(cnt > 0 && cnt  0 && balances[msg.sender] >= amount);
        balances[msg.sender] = balances[msg.sender].sub(amount);
        for (uint i = 0; i  0 && cnt  0 && balances[msg.sender] >= amount);`
参数解读:
`_value`—————————————转账数量  
`balances[msg.sender]`————-转账人余额  
`amount`————————————转账总数量
判断`_value`是否大于0且转账人的余额`balances[msg.sender]`大于等于转账总金额amount
##### 第六行
`balances[msg.sender] = balances[msg.sender].sub(amount);`  
计算转账人的余额，使用当前余额balances[msg.sender]减去转账总数量
##### 第七行
`for (uint i = 0; i  0 && cnt  0 && balances[msg.sender] >= amount);`
`_value=57896044618658097711785492504343953926634992332820282019728792003956564819968`
`_value`肯定是大于0，转账人的余额balances[msg.sender]肯定是大于等于0的。
所以这个条件同样成立，require函数返回值为True。
###### 第六行
`balances[msg.sender] = balances[msg.sender].sub(amount);` 前面的条件都成立，那么代码会执行到这。
这行代码是求转账人转完账以后剩下的余额，amount为0 ， **那么转账人的余额其实没变！！！**
###### 第七行
`for (uint i = 0; i  0); // Solidity automatically throws when dividing by 0
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn’t hold
        return c;
      }
      function sub(uint256 a, uint256 b) internal constant returns (uint256) {
        assert(b = a);
        return c;
      }
    }
注意看这一段
     function mul(uint256 a, uint256 b) internal constant returns (uint256) {
        uint256 c = a * b;
        assert(a == 0 || c / a == b);
        return c;
      }
这里是乘法计算，计算出乘法的结果后会用assert函数去验证结果是否正确。
回到我们前面的dis第三行代码执行后的结果
    _value=57896044618658097711785492504343953926634992332820282019728792003956564819968
    cnt=2
两者相乘得到amount，类型为uint256
由于溢出，amount=0
赋值给mul函数即
    c=amount，而amount=0，则c=0
    a=cnt, 而cnt=2，则a=2
    b=_value
    得出
    b=57896044618658097711785492504343953926634992332820282019728792003956564819968
那么c/a==b这个式子不成立，导致assert函数执行会报错，assert报错，那么就不会执行后面的代码，也就不会发生溢出。
也就是说，写这段代码的人，加减法他用了SafeMath里面的add函数和sub函数，但是却没有用里面的乘法函数mul
#### 如何防止这样的漏洞？
肯定是要用SafeMath函数啊，你加减法用了，乘法不用，你咋这么皮呢
代码上线前要做代码审计啊亲，强调多少遍了！
合理使用变量类型，了解清楚变量的范围
一定要考虑到溢出！一定要考虑到溢出！一定要考虑到溢出！重要的事情说三遍。
写这么通俗易懂，你应该看懂了吧？？看懂了就给点个赞呗！
#### 参考
  * 
  * 
* * *
_本文经安全客授权发布，转载请联系安全客平台。_
* * *