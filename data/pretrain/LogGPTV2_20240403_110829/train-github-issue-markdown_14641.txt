`A_mul_B!(B, A, B)` replaces B with all zeros for the case where A is not
small and square:
    X = randn(3, 2)
    Y = randn(3, 3)
    Z = randn(3, 4)
    M = randn(3, 3)
    R = expm(M - M')
    display(A_mul_B!(X, R, X))
    display(A_mul_B!(Y, R, Y))
    display(A_mul_B!(Z, R, Z))
outputs:
    3x2 Array{Float64,2}:
     0.0  0.0
     0.0  0.0
     0.0  0.0
    3x3 Array{Float64,2}:
     1.6548     0.742438  -1.50673
     0.282773  -1.35856   -0.39896
     0.700949  -1.27408   -0.846028
    3x4 Array{Float64,2}:
     0.0  0.0  0.0  0.0
     0.0  0.0  0.0  0.0
     0.0  0.0  0.0  0.0
Here's my version info:
    Julia Version 0.4.0
    Commit 0ff703b* (2015-10-08 06:20 UTC)
    Platform Info:
      System: Darwin (x86_64-apple-darwin13.4.0)
      CPU: Intel(R) Core(TM) i7-3615QM CPU @ 2.30GHz
      WORD_SIZE: 64
      BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Sandybridge)
      LAPACK: libopenblas64_
      LIBM: libopenlibm
      LLVM: libLLVM-3.3