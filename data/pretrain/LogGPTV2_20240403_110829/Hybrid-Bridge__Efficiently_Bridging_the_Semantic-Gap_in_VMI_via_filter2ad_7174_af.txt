Reducing VMExit Overhead. In §VII-B, we showed that
complicated introspection tools usually cause lots of VMExits,
which are the main contributor to the FAST-BRIDGE perfor-
mance overhead. Reducing VMExits would be an important
immediate task. Part of our future efforts will address this
problem. For instance, a possible way to improve the perfor-
mance of FAST-BRIDGE is not to catch int3 (no VM Exit) in
hypervisor level. Instead, we can introduce an in-guest kernel
module and patch the int3 interrupt handler to switch the
page table entries.
Supporting Kernel ASLR. HYBRID-BRIDGE currently works
with Linux kernel, which so far has not deployed the kernel
space address space layout randomization (ASLR) yet [17].
Addressing kernel ASLR for recent Windows-like system is
another avenue of future work.
IX. RELATED WORK
Virtual Machine Introspection (VMI). A common practice
to achieve better security is through strong isolation from
untrusted environment. Early introspection solutions such as
Copilot [45] employs two separate physical machines to
provide isolation and uses a PCI card to pull the memory to the
monitoring system. Recently, VMI has been increasingly used
in many security applications to provide strong isolation. For
instance, we have witnessed VMI being used in intrusion de-
tection [22], [43], [44], [15], [19], [20], memory forensics [26],
[15], [19], process monitoring [51], and malware analysis [13],
[31].
VProbes [4], a general purpose VMI framework, provides
basic operation to interact with VMM and guest OS but
introspection developer is responsible to traverse the guest OS
kernel data structures and ﬁnd the required data in kernel.
VProbes does not provide any automatic mechanism to address
the semantic gap.
Min-c [29] is a C interpreter which extract kernel data
structure deﬁnitions automatically to assist VMI developers.
While Min-c cuts the development
introspection
tool, it is different from HYBRID-BRIDGE, VIRTUOSO [15],
VMST [19], and EXTERIOR [21] (a guest VM writable exten-
sion of VMST) in a sense that it does not provide any support
to reuse the existing inspection tool and the VMI developer
must develop the introspection tool from scratch.
time of
VIRTUOSO, VMST, EXTERIOR, and HYBRID-BRIDGE
pursue the same goal, namely, (automatically) bridging the
semantic-gap through binary code reuse. HYBRID-BRIDGE
outperforms VMST and VIRTUOSO by an order of magnitude
in terms of performance overhead. Furthermore, HYBRID-
BRIDGE supports a fall back mechanism to address the
coverage problem, whereas VIRTUOSO does not have a reliable
mechanism to solve this issue. Meanwhile, compared to VMST,
HYBRID-BRIDGE has a novel decoupled execution component
that runs a lazy taint analysis on a separate VM, which
signiﬁcantly reduce the performance cost.
Hybrid-Virtualization. While recently there are a number
of systems which combine both hardware virtualization and
software virtualization (e.g. TBP [27], Aftersight [32], and
V2E [55]), they have different goals and different techniques.
In particular, TBP detects malicious code injection attack by
using taint
tracking to prevent execution of network data.
The protected OS is running on Xen and uses page fault to
switch execution to QEMU for taint-tracking when tainted
data is being processed by the CPU. Aimed at heavyweight
analysis on production workload, Aftersight decouples analysis
from execution by recording all VM inputs on a VMware
Workstation and replaying them on QEMU. Designed for
malware analysis, V2E uses hardware virtualization to record
the malware execution trace at page level, and uses page fault
to transfer control to software virtualization; whereas HYBRID-
BRIDGE uses int3 patch to cause VMExit and control the
transitions between redirectable and non-redirecatable instruc-
tions at instruction level as well as control the transitions to
software virtualization.
13
Training Memoization. Memoization [39] is an optimiza-
tion technique that remembers the results corresponding to
some set of speciﬁc inputs, thus avoiding the recalculation
when encountering these inputs again. This has been used
in many applications such as deterministic multithreading
(via schedule memoization [11]) and taint optimization (e.g.,
FLEXITAINT [54] and DDFT [30]).
While HYBRID-BRIDGE and FLEXITAINT [54] may seem
similar at very high level regarding taint memoization but
they operate in different world and face different challenges.
FLEXITAINT is an instruction level CPU cache (very similar to
Translation Lookaside Buffer) to enhance taint operation with
low overhead in CPU, whereas HYBRID-BRIDGE is based on
the idea of decoupling taint analysis from the main execution
engine (i.e., FAST-BRIDGE) without any taint analysis inside
it. For DDFT [30], the substantial difference is that its taint
memoization works at user level program much like a compiler
optimization to speed up the taint analysis, whereas HYBRID-
BRIDGE works at hypervisor level with no intention to speed
up the taint analysis itself. Also, our memoization not only
does remember the tainted data, but also remember other types
of meta-data such as the offset for each return address for bi-
redirection instructions.
Binary Code Reuse. Recently, the concept of binary code
reuse has gained a lot of attention, and been exploited to
address a wide variety of interesting security problems such
as malware analysis [8], [34], [56], attack construction [37],
and VMI [15], [19], [21]. BCR [8] and Inspector Gadget [34]
extract certain malware feature in a self-contained manner and
reuse it to analyze the malware. Most recently, TOP [56]
demonstrates that we can dynamically decompile malware
code, unpack and transplant malware functions.
Dynamic Binary Code Patching. Dynamic binary patching
tools such as DDT [35] have been around for more than
50 years. In the past decade, general dynamic binary in-
strumentation tools such as DynInst [7], DynamoRIO [1],
PIN [38], and Valgrind [40] have been used for a wide variety
of tasks include performance proﬁling [52],
tracing [42],
sandboxing [36], debugging [50] and code optimization [53].
In HYBRID-BRIDGE, we apply dynamic binary code patching
technique that is often used by debuggers to set up break point
on the monitored program, to trap the guest-OS execution to
hypervisor and enforce data redirection policies.
X. CONCLUSION
We have presented HYBRID-BRIDGE, a fast virtual ma-
chine introspection system that allows the reuse of the ex-
isting binary code to automatically bridge the semantic gap.
HYBRID-BRIDGE combines the strengths of both training
based scheme from VIRTUOSO, which is fast but incomplete,
and online kernel data redirection based scheme from VMST,
which is slow but complete. By using a novel fall back
mechanism with decoupled execution and training memo-
ization at hypervisor layer, HYBRID-BRIDGE decouples the
expensive execution of taint analysis engine from hardware-
based virtualization such as KVM and moves it to software-
based virtualization such as QEMU. By doing so, HYBRID-
BRIDGE signiﬁcantly improves the performance of existing
solutions with one order of magnitude as demonstrated in our
experimental results.
ACKNOWLEDGMENT
We would like to thank the anonymous reviewers for their
comments. This research was supported in part by a research
gift from VMware Inc. Any opinions, ﬁndings conclusions, or
recommendations expressed are those of the authors and not
necessarily of the VMware.
REFERENCES
[1] Dynamorio
dynamic
instrumentation
tool
[2]
http://dynamorio.org.
Intel
manual
http://www.intel.com/Assets/PDF/manual/253669.pdf.
architectures
ia-32
3b:
System
64
and
volume
software
programming
platform.
developer’s
guide.
[3] QEMU: an open source processor emulator. http://www.qemu.org/.
[4] Vprobe toolkit. https://github.com/vmware/vprobe-toolkit.
[5] F. Baiardi and D. Sgandurra. Building trustworthy intrusion detection
In Proceedings of the 3rd International
through vm introspection.
Symposium on Information Assurance and Security (IAS’07), pages
209–214, 2007.
[6] D. Bovet and M. Cesati. Understanding The Linux Kernel. Oreilly &
Associates Inc, 2005.
[7] B. Buck and J. K. Hollingsworth. An api for runtime code patching.
International Journal of High Performance Computing Applications,
14(4):317–329, 2000.
J. Caballero, N. M. Johnson, S. McCamant, and D. Song. Binary
code extraction and interface identiﬁcation for security applications.
In Proceedings of the 17th Annual Network and Distributed System
Security Symposium (NDSS’10), San Diego, CA, February 2010.
[8]
[9] M. Carbone, W. Cui, L. Lu, W. Lee, M. Peinado, and X. Jiang. Mapping
kernel objects to enable systematic integrity checking.
In The 16th
ACM Conference on Computer and Communications Security (CCS’09),
pages 555–565, Chicago, IL. October 2009.
[10] P. M. Chen and B. D. Noble. When virtual
is better than real.
In Proceedings of the Eighth Workshop on Hot Topics in Operating
Systems (HOTOS’01), pages 133–138, Elmau/Oberbayern, Germany.
2001.
[11] H. Cui, J. Wu, C.-C. Tsai, and J. Yang. Stable deterministic multi-
threading through schedule memoization. In Proceedings of the Ninth
Symposium on Operating Systems Design and Implementation (OSDI
’10). October 2010.
[12] W. Cui, M. Peinado, Z. Xu, and E. Chan. Tracking rootkit footprints
with a practical memory analysis system. In Proceedings of USENIX
Security Symposium. August, 2012.
[13] A. Dinaburg, P. Royal, M. Sharif, and W. Lee. Ether: malware analysis
via hardware virtualization extensions. In Proceedings of the 15th ACM
conference on Computer and communications security (CCS’08), pages
51–62, Alexandria, Virginia. October 2008.
[14] B. Dolan-Gavitt. Virtuoso: Whole-system binary code extraction for
introspection. https://code.google.com/p/virtuoso/.
[15] B. Dolan-Gavitt, T. Leek, M. Zhivich, J. Gifﬁn, and W. Lee. Virtuoso:
Narrowing the semantic gap in virtual machine introspection.
In
Proceedings of the 32nd IEEE Symposium on Security and Privacy
(SP’11), pages 297–312, Oakland, CA. May 2011.
[16] B. Dolan-Gavitt, B. Payne, and W. Lee. Leveraging forensic tools for
virtual machine introspection. Technical Report; GT-CS-11-05, 2011.
J. Edge. Randomizing the kernel, 2013. http://lwn.net/Articles/546686/.
In Pro-
ceedings of the 2005 USENIX Annual Technical Conference (ATC’05),
Anaheim, CA. June 2005.
[17]
[18] B. Fabrice. Qemu, a fast and portable dynamic translator.
[19] Y. Fu and Z. Lin. Space traveling across vm: Automatically bridging
the semantic gap in virtual machine introspection via online kernel data
redirection. In Proceedings of the 2012 IEEE Symposium on Security
and Privacy (SP’12), pages 586–600, San Fransisco, CA. May 2012.
14
[20] Y. Fu and Z. Lin. Bridging the semantic gap in virtual machine
introspection via online kernel data redirection. ACM Trans. Inf. Syst.
Secur., 16(2):7:1–7:29, Sept. 2013.
[21] Y. Fu and Z. Lin. Exterior: Using a dual-vm based external shell for
guest-os introspection, conﬁguration, and recovery.
In Proceedings
of the Ninth Annual International Conference on Virtual Execution
Environments (VEE’13), Houston, TX. March 2013.
[22] T. Garﬁnkel and M. Rosenblum. A virtual machine introspection
based architecture for intrusion detection. In Proceedings Network and
Distributed Systems Security Symposium (NDSS’03), San Diego, CA.
February 2003.
[23] R. P. Goldberg. Architectural Principles of virtual machines. PhD
thesis. PhD thesis, Harvard University. 1972.
[24] Y. Gu, Y. Fu, A. Prakash, Z. Lin, and H. Yin. Os-sommelier: Memory-
only operating system ﬁngerprinting in the cloud.
In Proceedings of
the 3rd ACM Symposium on Cloud Computing (SOCC’12), San Jose,
CA. October 2012.
[25] Z. Gu, Z. Deng, D. Xu, and X. Jiang. Process implanting: A new active
introspection framework for virtualization. In Proceedings of the 30th
IEEE Symposium on Reliable Distributed Systems (SRDS 2011), pages
147–156, Madrid, Spain. October 4-7, 2011.
[26] B. Hay and K. Nance. Forensics examination of volatile system data
using virtual introspection. SIGOPS Operating System Review, 42:74–
82, April 2008.
[27] A. Ho, M. Fetterman, C. Clark, A. Warﬁeld, and S. Hand. Practical
taint-based protection using demand emulation. In Proceedings of the
1st ACM SIGOPS/EuroSys European Conference on Computer Systems
(EuroSys’06), pages 29–41. 2006.
[28] O. S. Hofmann, A. M. Dunn, S. Kim, I. Roy, and E. Witchel.
Ensuring operating system kernel integrity with osck. In Proceedings
of the sixteenth international conference on Architectural support for
programming languages and operating systems (ASPLOS’11), pages
279–290, Newport Beach, California. March 2011.
[29] H. Inoue, F. Adelstein, M. Donovan, and S. Brueckner. Automatically
bridging the semantic gap using a c interpreter. In Proceedings of the
2011 Annual Symposium on Information Assurance (ASIA’11), Albany,
NY. June 2011.
[30] K. Jee, G. Portokalidis, V. P. Kemerlis, S. Ghosh, D. I. August, and
A. D. Keromytis. A general approach for efﬁciently accelerating
software-based dynamic data ﬂow tracking on commodity hardware.
In Proceedings Network and Distributed Systems Security Symposium
(NDSS’12), San Diego, CA. February 2012.
[31] X. Jiang, X. Wang, and D. Xu. Stealthy malware detection through
vmm-based out-of-the-box semantic view reconstruction. In Proceed-
ings of the 14th ACM Conference on Computer and Communications
Security (CCS’07), pages 128–138, Alexandria, Virginia. October 2007.
[32] P. M. Chen, J. Chow, and T. Garﬁnkel. Decoupling dynamic program
analysis from execution in virtual environments. In USENIX 2008 An-
nual Technical Conference on Annual Technical Conference (ATC’08),
pages 1–14, 2008.
[33] A. Kivity, Y. Kamay, D. Laor, U. Lublin, and A. Liguori. kvm: the
linux virtual machine monitor. In Proceedings of the Linux Symposium,
volume 1, pages 225–230, 2007.
[34] C. Kolbitsch, T. Holz, C. Kruegel, and E. Kirda.
Inspector gadget:
Automated extraction of proprietary gadgets from malware binaries. In
Proceedings of 2010 IEEE Security and Privacy (SP’10), Oakland, CA.
May 2010.
[35] A. Kotok. Dec debugging tape (ddt). Massachusetts Institute of
Technology (MIT), 1964.
[36] W. Li, L.-c. Lam, and T.-c. Chiueh. Accurate application-speciﬁc sand-
boxing for win32/intel binaries. In Proceedings of the 3rd International
Symposium on Information Assurance and Security (IAS’07), pages
375–382, Manchester, UK. 2007.
[37] Z. Lin, X. Zhang, and D. Xu. Reuse-oriented camouﬂaging trojan:
In Proceedings of
Vulnerability detection and attack construction.
the 40th Annual IEEE/IFIP International Conference on Dependable
Systems and Networks (DSN-DCCS 2010), Chicago, IL. June 2010.
[38] C.-K. Luk, R. Cohn, R. Muth, H. Patil, A. Klauser, G. Lowney, S. Wal-
lace, V. J. Reddi, and K. Hazelwood. Pin: building customized program
15
analysis tools with dynamic instrumentation. In ACM SIGPLAN Notices,
volume 40, pages 190–200, 2005.
[39] D. Michie.
”Memo” Functions and Machine Learning. Nature,
218(5136):19–22, Apr. 1968.
[41]
[40] N. Nethercote and J. Seward. Valgrind: a framework for heavyweight
dynamic binary instrumentation.
In Proceedings of the 2007 ACM
SIGPLAN conference on Programming language design and implemen-
tation (PLDI’07), pages 89–100, San Diego, CA. 2007.
J. Newsome and D. Song. Dynamic taint analysis for automatic
detection, analysis, and signature generation of exploits on commodity
software. In Proceedings of the 14th Annual Network and Distributed
System Security Symposium (NDSS’05), San Diego, CA. February 2005.
[42] H. Pan, K. Asanovi´c, R. Cohn, and C.-K. Luk. Controlling program
execution through binary instrumentation. SIGARCH Comput. Archit.
News, 33(5):45–50, Dec. 2005.
[43] B. D. Payne, M. Carbone, and W. Lee. Secure and ﬂexible monitoring of
virtual machines. In Proceedings of the 23rd Annual Computer Security
Applications Conference (ACSAC’07). December 2007.
[44] B. D. Payne, M. Carbone, M. Sharif, and W. Lee. Lares: An architecture
for secure active monitoring using virtualization. In Proceedings of the
2008 IEEE Symposium on Security and Privacy (SP’08), pages 233–
247, Oakland, CA. May 2008.
[45] N. L. Petroni, Jr., T. Fraser, J. Molina, and W. A. Arbaugh. Copilot -
A coprocessor-based kernel runtime integrity monitor. In Proceedings
of the 13th USENIX Security Symposium (Security’04), pages 179–194,
San Diego, CA. August 2004.
[46] N. L. Petroni, Jr., T. Fraser, A. Walters, and W. A. Arbaugh. An
architecture for speciﬁcation-based detection of semantic integrity
violations in kernel dynamic data. In Proceedings of the 15th USENIX
Security Symposium (Security’06), Vancouver, B.C., Canada. August
2006.
J. Pfoh, C. Schneider, and C. Eckert. Nitro: Hardware-based system call
tracing for virtual machines. In Advances in Information and Computer
Security (IWSEC’11), volume 7038 of Lecture Notes in Computer
Science, pages 96–112. November 2011.
[47]
[48] N. A. Quynh. Operating system ﬁngerprinting for virtual machines,
2010. In DEFCON 18.
[49] M. Rajagopalan, S. Perianayagam, H. He, G. Andrews, and S. Debray.
Biray rewriting of an operating system kernel. In Proc. Workshop on
Binary Instrumentation and Applications, 2006.
J. Seward and N. Nethercote. Using valgrind to detect undeﬁned value
errors with bit-precision. In Proceedings of the annual conference on
USENIX Annual Technical Conference (ATC’05), pages 2–2, Anaheim,
CA. 2005.
[50]
[51] D. Srinivasan, Z. Wang, X. Jiang, and D. Xu. Process out-grafting: an
efﬁcient ”out-of-vm” approach for ﬁne-grained process execution mon-
itoring. In Proceedings of the 18th ACM conference on Computer and
communications security (CCS’11), pages 363–374, Chicago, Illinois.
October 2011.
[52] A. Tamches and B. P. Miller. Fine-grained dynamic instrumentation of
commodity operating system kernels. In Proceedings of the 3rd sym-
posium on Operating systems design and implementation (OSDI’99),
pages 117–130, 1999.
[53] A. Tamches and B. P. Miller. Dynamic kernel i-cache optimization. In
Proceedings of the 3rd Workshop on Binary Translation, 2001.
[54] G. Venkataramani, I. Doudalis, Y. Solihin, and M. Prvulovic. Flexi-
taint: A programmable accelerator for dynamic taint propagation.
In
Proceedings of the 4th International Symposium on High Performance
Computer Architecture (HPCA’08), Salt Lake City, UT. 2008.
[55] L.-K. Yan, M. Jayachandra, M. Zhang, and H. Yin. V2e: Com-
bining hardware virtualization and software emulation for transpar-
ent and extensible malware analysis.
the 8th
ACM SIGPLAN/SIGOPS conference on Virtual Execution Environments
(VEE’12), pages 227–238, London, UK, 2012.
J. Zeng, Y. Fu, K. Miller, Z. Lin, X. Zhang, and D. Xu. Obfuscation-
resilient binary code reuse through trace-oriented programming.
In
Proceedings of the 20th ACM Conference on Computer and Communi-
cations Security (CCS’13), Berlin, Germany. November 2013.
In Proceedings of
[56]