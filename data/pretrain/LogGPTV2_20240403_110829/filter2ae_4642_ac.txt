    }
应用配置的关键部分不应该被输出到返回数据报文中，并且用户也不能操作那些被用于代码的关键配置。  
引用：  
[OWASP: Top 10 2013-A6-Sensitive Data
Exposure](https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure)  
[1] [OWASP: Top 10 2007-Information Leakage and Improper Error
Handling](https://www.owasp.org/index.php/Top_10_2007-Information_Leakage_and_Improper_Error_Handling)  
[2] [WASC-13: Information
Leakage](http://projects.webappsec.org/w/page/13246936/Information%20Leakage)  
[CWE-200: Information
Exposure](https://cwe.mitre.org/data/definitions/200.html)
# Scala Play服务器端请求伪造(SSRF)
漏洞特征：SCALA_PLAY_SSRF  
当服务器端发送一个请求，这个请求的目标地址是用户输入指定的，且这个请求没有被严格的效验时，就会发生服务器端请求伪造漏洞。这个漏洞允许攻击者用你的web服务器访问网络上的任何一台服务器或者攻击其他服务器。  
有漏洞代码：
    def doGet(value:String) = Action {
        WS.url(value).get().map { response =>
            Ok(response.body)
        }
    }
解决方案/对策
  * 不要让用户控制请求的目的地址 
  * 接受一个目的地址的key，使用这个key去查找合法的目的地址 
  * urls地址白名单（如果可能的话） 
  * 用白名单校验url地址开头的部分 
引用：  
[CWE-918: Server-Side Request Forgery
(SSRF)](https://cwe.mitre.org/data/definitions/918.html)  
[Understanding Server-Side Request
Forgery](https://www.bishopfox.com/blog/2015/04/vulnerable-by-design-understanding-server-side-request-forgery/)
# URLConnection中的服务器端请求伪造(SSRF) 和任意文件访问
漏洞特征：SCALA_PLAY_SSRF  
当服务器端发送一个请求，这个请求的目标地址是用户输入指定的，且这个请求没有被严格的效验时，就会发生服务器端请求伪造漏洞。这个漏洞允许攻击者用你的web服务器访问网络上的任何一台服务器或者攻击其他服务器。  
URLConnection能够使用file://协议获取其他的协议去访问本地的文件系统和其他的服务  
有漏洞代码：
    new URL(String url).openConnection()
    new URL(String url).openStream()
    new URL(String url).getContent()
解决方案/对策
  * 不要让用户控制请求的目的地址 
  * 接受一个目的地址的key，使用这个key去查找合法的目的地址 
  * urls地址白名单（如果可能的话） 
  * 用白名单校验url地址开头的部分 
引用：  
[CWE-918: Server-Side Request Forgery
(SSRF)](https://cwe.mitre.org/data/definitions/918.html)  
[Understanding Server-Side Request
Forgery](https://www.bishopfox.com/blog/2015/04/vulnerable-by-design-understanding-server-side-request-forgery/)  
[CWE-73: External Control of File Name or
Path](https://cwe.mitre.org/data/definitions/73.html)  
[Abusing jar:// downloads](https://www.pwntester.com/blog/2013/11/28/abusing-jar-downloads/)
# 在Scala Twirl模板引擎里面潜在的xss
漏洞规则：SCALA_XSS_TWIRL  
可能会有潜在的xss漏洞。这可能会在客户端执行未期望的JavaScript。（见引用）  
有漏洞的代码：
    @(value: Html)
    @value
解决方案：
    @(value: String)
    @value
抵御xss最好的方式是像上面在输出中编码特殊的字符。有4种环境类型要考虑：HTML, JavaScript, CSS (styles),
和URLs.请遵守OWASP XSS Prevention备忘录中定义的xss保护规则，里面会介绍一些重要的防御细节。  
引用：  
[WASC-8: Cross Site
Scripting](http://projects.webappsec.org/w/page/13246920/Cross%20Site%20Scripting)  
[OWASP: XSS Prevention Cheat
Sheet](https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet)  
[OWASP: Top 10 2013-A3: Cross-Site Scripting
(XSS)](https://www.owasp.org/index.php/Top_10_2013-A3-Cross-Site_Scripting_%28XSS%29)  
[CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')](http://cwe.mitre.org/data/definitions/79.html)  
[OWASP Java Encoder](https://code.google.com/p/owasp-java-encoder/)
# 在Scala MVC API引擎里面潜在的xss
漏洞规则： SCALA_XSS_MVC_API  
可能会有潜在的xss漏洞。这可能会在客户端执行未期望的JavaScript。（见引用）  
有漏洞的代码：
    def doGet(value:String) = Action {
        Ok("Hello " + value + " !").as("text/html")
      }
解决方案：
    def doGet(value:String) = Action {
        Ok("Hello " + Encode.forHtml(value) + " !")
      }
抵御xss最好的方式是像上面在输出中编码特殊的字符。有4种环境类型要考虑：HTML, JavaScript, CSS (styles),
和URLs.请遵守OWASP XSS Prevention备忘录中定义的xss保护规则，里面会介绍一些重要的防御细节。  
引用：  
[WASC-8: Cross Site
Scripting](http://projects.webappsec.org/w/page/13246920/Cross%20Site%20Scripting)  
[OWASP: XSS Prevention Cheat
Sheet](https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet)  
[OWASP: Top 10 2013-A3: Cross-Site Scripting
(XSS)](https://www.owasp.org/index.php/Top_10_2013-A3-Cross-Site_Scripting_%28XSS%29)  
[CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')](http://cwe.mitre.org/data/definitions/79.html)  
[OWASP Java Encoder](https://code.google.com/p/owasp-java-encoder/)
# 在Velocity中潜在的模板注入
漏洞特征：TEMPLATE_INJECTION_VELOCITY  
Velocity模板引擎非常强大。你可以在模板中使用条件判断，循环，外部函数调用等逻辑代码。它里面也没有一个沙箱去限制操作。一个恶意的用户如果可以控制模板，那么他就可以在服务器端运行恶意代码。Velocity模板应被视为脚本。  
有漏洞的代码：
    [...]
    Velocity.evaluate(context, swOut, "test", userInput);
解决方案：  
避免让终端用户操作Velocity中的模板。如果你需要让你的用户去操作模板，那么最好限制模板引擎的能力，就像Handlebars 或 Moustache
一样（见引用）  
引用：  
[PortSwigger: Server-Side Template
Injection](http://blog.portswigger.net/2015/08/server-side-template-injection.html)  
[Handlebars.java](https://jknack.github.io/handlebars.java/)
# 在Freemarker中潜在的模板注入
漏洞特征：TEMPLATE_INJECTION_FREEMARKER  
Freemarker模板引擎非常强大。你可以在模板中使用条件判断，循环，外部函数调用等逻辑代码。它里面也没有一个沙箱去限制操作。一个恶意的用户如果可以控制模板，那么他就可以在服务器端运行恶意代码。Velocity模板应被视为脚本。  
有漏洞的代码：
    Template template = cfg.getTemplate(inputTemplate);
    [...]
    template.process(data, swOut);
解决方案：  
避免让终端用户操作Freemarker中的模板。如果你需要让你的用户去操作模板，那么最好限制模板引擎的能力，就像Handlebars 或 Moustache
一样（见引用）  
引用：  
[PortSwigger: Server-Side Template
Injection](http://blog.portswigger.net/2015/08/server-side-template-injection.html)  
[Handlebars.java](https://jknack.github.io/handlebars.java/)
# 过度宽松的cors策略
漏洞规则：PERMISSIVE_CORS  
在html5之前，web浏览器强制使用同源策略，目的是保证JavaScript能够访问web页面的内容，JavaScript和web页面的起源必须来自于同一个域下。如果没有同源策略，那么恶意网站就可以用JavaScript脚本加载客户端的用户凭据，从而读取用户保存在其他网站的中敏感信息，然后把数据传送给攻击者。如果http返回头定义了Access-Control-Allow-Origin字段，那么就可以让JavaScript跨域访问数据。有了这个头，web服务器就可以定义哪些其他域可以跨域来访问这个服务器。可是应该小心定义这个头，因为过度宽松的cors策略可以让恶意的应用通过这样的方式去读取受害者应用中的敏感数据，这样就会导致欺骗，数据失窃，数据修改等其他的攻击行为。  
有漏洞的代码：
    response.addHeader("Access-Control-Allow-Origin", "*");
解决方案：  
避免在Access-Control-Allow-Origin这个头中使用*，这表示运行在其他域下的任何JavaScript都可以访问这个域下的应用数据  
引用：  
[W3C Cross-Origin Resource Sharing](https://www.w3.org/TR/cors/)  
[Enable Cross-Origin Resource Sharing](http://enable-cors.org/)
# 匿名的LDAP绑定
漏洞特征：LDAP_ANONYMOUS  
没有做合适的访问控制，攻击者可以滥用ldap配置，让ldap服务器执行一段包含用户控制的代码。所有依赖ctx的ldap查询都可以以不需要用户认证和访问控制的方式去执行。攻击者可以操作其中的查询语句来获取被directory服务器保护的数据。  
有漏洞代码：
    ...
    env.put(Context.SECURITY_AUTHENTICATION, "none");
    DirContext ctx = new InitialDirContext(env);
    ...
解决方案：  
考虑ldap中其他的用户认证模式并且确保有合适的访问控制
引用：  
[Ldap Authentication
Mechanisms](https://docs.oracle.com/javase/tutorial/jndi/ldap/auth_mechs.html)
# ldap 入口投毒
漏洞特征： LDAP_ENTRY_POISONING  
JNDI api支持在ldap目录上绑定序列化对象。如果提供确定的属性，反序列化对象将会被用于应用数据的查询（详细信息见Black Hat USA 2016
白皮书）。反序列化对象是一个有风险的操作，他可能会导致远程代码执行。  
如果攻击者获得ldap基本查询的入口点，那么这个漏洞就可能会被利用。通过添加一个属性给已存在的ldap入口或者通过配置应用，就可以恶意的使用ldap服务器了。  
有漏洞的代码：
    DirContext ctx = new InitialDirContext();
    //[...]
    ctx.search(query, filter,
            new SearchControls(scope, countLimit, timeLimit, attributes,
                true, //Enable object deserialization if bound in directory
                deref));
解决方案：
    DirContext ctx = new InitialDirContext();
    //[...]
    ctx.search(query, filter,
            new SearchControls(scope, countLimit, timeLimit, attributes,
                false, //Disable
                deref));
引用：  
[Black Hat USA 2016: A Journey From JNDI/LDAP Manipulation to Remote Code
Execution Dream Land (slides & video) by Alvaro Muñoz and Oleksandr
Mirosh](https://www.blackhat.com/docs/us-16/materials/us-16-Munoz-A-Journey-From-JNDI-LDAP-Manipulation-To-RCE-wp.pdf)
[HP Enterprise: Introducing JNDI Injection and LDAP Entry Poisoning by Alvaro
Muñoz](https://community.hpe.com/t5/Security-Research/Introducing-JNDI-Injection-and-LDAP-Entry-Poisoning/ba-p/6885118)
[TrendMicro: How The Pawn Storm Zero-Day Evaded Java's Click-to-Play
Protection by Jack Tang](http://blog.trendmicro.com/trendlabs-security-intelligence/new-headaches-how-the-pawn-storm-zero-day-evaded-javas-click-to-play-protection/)
# 使用持久性的cookie
漏洞特征：COOKIE_PERSISTENT  
将敏感数据存储在持久性的cookie中会危害到数据的保密性和账户的安全性  
解释：  
如果隐私信息被存储在持久性的cookie中，攻击者就会利用这个巨大的时间窗口来窃取数据，尤其持久性cookie会在用户的电脑中保存非常长的一段时间。持久性cookie一般是以文本的形式存储在客户端，攻击者可以同年哥哥访问受害者的机器来获取到这些信息。  
持久性cookie会被经常使用，目的是为了在用户和网站互动时能够分析用户的行为。依靠持久性cookie去追踪数据，这可能已经侵犯了用户的隐私  
有漏洞的代码：下面的代码可以让cookie保存一年
    [...]
    Cookie cookie = new Cookie("email", email);
    cookie.setMaxAge(60*60*24*365);
    [...]
解决方案:
  * 在有必要的时候使用持久性cookie，并且要限制最大过期时间 
  * 不要在敏感上使用持久性cookie 
引用：  
[Class Cookie setMaxAge
documentation](https://tomcat.apache.org/tomcat-5.5-doc/servletapi/javax/servlet/http/Cookie.html#setMaxAge%28int%29)  
[CWE-539: Information Exposure Through Persistent
Cookies](https://cwe.mitre.org/data/definitions/539.html)
# url重写方法