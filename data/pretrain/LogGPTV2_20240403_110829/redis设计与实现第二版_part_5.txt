因为 dictEntry 节点组成的链表没有指向链表表尾的指针，所以为了速度考虑，程序
举个例子，假设程序要将键值对 k2和v2 添加到图 4-6所示的哈希表里面，并且计算
Redis 的哈希表使用链地址法（ separate chaining）来解决键冲突，每个哈希表节点都有
MurmurHash 算法最初由 Austin Appleby于 2008 年发明，这种算法的优点在于，即使
当字典被用作数据库的底层实现，或者哈希键的底层实现时，Redis 使用MurmurHash2
计算出键k0 的索引值 0，这表示包含键值对 k0 和v0 的节点应该被放置到哈希表数组
index = hash&dict->ht[0].sizemask = 8 & 3 = 0; 
假设计算得出的哈希值为8，那么程序会继续使用语句：
计算键 k0 的哈希值。
hash = dict->type->hashFunction (k0);
解决键冲突
rehashidx
 privdata
 ht
type
-1
dict
【ht[1]
ht[0],
图4-5添加键值对 K0 和v0 之后的字典
sizemask
table
 dictht
used
size
1
3
4
dictEntry*[4]
3
→NULL
dictEntry
NULL
NULL
kov0
→ NULL
---
## Page 33
做准备。
ht［0]，将ht［1］ 设置为 ht[0]，并在 ht[1］ 新创建一个空白哈希表，为下一次 rehash 
算键的哈希值和索引值，然后将键值对放置到ht[11 哈希表的指定位置上。
及ht[0] 当前包含的键值对数量（也即是ht[O］.used 属性的值）：
的哈希表执行rehash的步骤如下：
少时，程序需要对哈希表的大小进行相应的扩展或者收缩。
载因子（load factor）维持在一个合理的范围之内，当哈希表保存的键值对数量太多或者太
4.4
3）当ht[0］包含的所有键值对都迁移到了ht[1］ 之后（ht[0］变为空表），释放
1）为字典的ht［1］哈希表分配空间，这个哈希表的空间大小取决于要执行的操作，以
扩展和收缩哈希表的工作可以通过执行 rehash（重新散列）操作来完成，Redis 对字典
2）将保存在ht［O］中的所有键值对rehash 到 ht［1]上面：rehash 指的是重新计
随着操作的不断执行，哈希表保存的键值对会逐渐地增多或者减少，为了让哈希表的负
rehash
如果执行的是收缩操作，那么 ht[1］的大小为第一个大于等于 ht [0］.used 的 2"。
的 2"( 2 的 n 次方幂);
如果执行的是扩展操作，那么 ht[1］的大小为第一个大于等于 ht［0］.used*2
sizemask
table
dictht
used
size
3
3
4
 sizemask
table
size
dictht
used
dictEntry*[4]
2
图4-7使用链表解决k2和k1的冲突
2
图4-6
[dictEntry*[4]
一个包含两个键值对的哈希表
D
NULL
dictEntry
NULL
dictEntry
k2
ko
v2
v0
→NULL
dictEntry
 dictEntry
next
NULL
k1
ko
v1
dictEntry
k1 
next  NULL
v1
第 4章
字
典
·29
---
## Page 34
30第
后，字典的样子。
n 次方，所以程序会将 ht［1］哈希表的大小设置为 8。图4-9展示了 ht［1］在分配空间之
下步骤：
第一部分数据结构与对象
1）ht［0］.used 当前的值为 4，4*2=8，而8（2²）恰好是第—个大于等于4的2的
举个例子，
rehashidx
privdata
rehashidx
 privdata
ht
type
dict
ht
type
dict
，假设程序要对图 4-8所示字典的 ht［0］进行扩展操作，那么程序将执行以
ht[1]
[o]au
图4-9为字典的 ht[1] 哈希表分配空间
dictht
 dictht
sizemask
table
table
size
图4-8执行rehash之前的字典
used
used
size
table
dictht
size
table
dictht
8
used
size
used
3
dictEntry*[8]
dictEntry*[4]
dictEntry*[4]
→NULL
→NULL
→NULL
dictEntry
k3
dictEntry
dictEntry
dictEntry
dictEntry
k1
k1
k3
dictEntry
k0
dictEntry
k2
dictEntry
NULL
k0
k2
V3
v1
v0
[v2
v1
0
v2
→ NULL
→NULL
→NULL
→NULL
-→NULL
→NULL
NULL
→NULL
---
## Page 35
改为了现在的 8。
图 4-11所示。至此，对哈希表的扩展操作执行完毕，程序成功将哈希表的大小从原来的 4 
3）释放 ht[0］，并将 ht［1］ 设置为 ht［0］，然后为ht[1］ 分配一个空白哈希表，如
2）将ht[0］包含的四个键值对都 rehash 到ht[1］，如图 4-10 所示。
rehashidx
rehashidx
privdata
privdata
type
type
dict
ht
dict
-1
ht [l]sizemask
ht[1]
ht [0]
图4-10ht[0］的所有键值对都已经被迁移到nt[1]
 sizemask
图4-1l完成rehash之后的字典
dictht
dictht
dictht
dictht
size
table
table
used
size
table
used
used
size
used
size
table
。
0
4
→NULL
dictEntry*[8]
dictEntry*[8]
dictEntry*[4]
5
dictEntry
dictEntry
dictEntry
dictEntry
k1
k0
k3
dictEntry
dictEntry
dictEntry
dictEntry
k0
k3
NULL
NULL
NULL
NULL
v1
v0
2
V3
v1
v0
v3
→NULL
第 4 章 
→NULL
NULL
→NULL
→ NULL
→NULL
→NULL
→NULL
字
·31
---
## Page 36
32·第一部分数据结构与对象
到ht[1］。
键值对全部 rehash 到ht[1l，而是分多次、渐进式地将 ht［0］里面的键值对慢慢地 rehash
庞大的计算量可能会导致服务器在一段时间内停止服务。
四百万、四千万甚至四亿个键值对，那么要一次性将这些键值对全部rehash 到 ht[1］的话，
这些键值对全部 rehash 到 ht[1］；但是，如果哈希表里保存的键值对数量不是四个，而是
成的。
里面，但是，这个rehash 动作并不是一次性、集中式地完成的，而是分多次、渐进式地完
4.5
必要的内存写人操作，最大限度地节约内存。
所需的负载因子，从而尽可能地避免在子进程存在期间进行哈希表扩展操作，这可以避免不
write）技术来优化子进程的使用效率，所以在子进程存在期间，服务器会提高执行扩展操作
中，Redis需要创建当前服务器进程的子进程，而大多数操作系统都采用写时复制（copy-on-
需的负载因子并不相同，这是因为在执行BGSAVE命令或BGREWRITEAOF命令的过程
因子为：
因子大于等于 5。
载因子大于等于1。
哈希表的扩展与收缩
这样做的原因在于，如果ht［0］里只保存着四个键值对，那么服务器可以在瞬间就将
2）服务器目前正在执行BGSAVE命令或者BGREWRITEAOF命令，并且哈希表的负载
因此，为了避免 rehash 对服务器性能造成影响，服务器不是一次性将 ht[0] 里面的所有
上一节说过，扩展或收缩哈希表需要将 ht[0］里面的所有键值对 rehash 到ht[1］
另一方面，当哈希表的负载因子小于0.1时，程序自动开始对哈希表执行收缩操作。
根据BGSAVE命令或BGREWRITEAOF命令是否正在执行，服务器执行扩展操作所
又例如，对于一个大小为512，包含256个键值对的哈希表来说，这个哈希表的负载
其中哈希表的负载因子可以通过公式：
1）服务器目前没有在执行BGSAVE命令或者BGREWRITEAOF命令，并且哈希表的负
load_factor = 256 / 512 = 0.5
load_factor = 4 / 4 = 1 
例如，对于一个大小为4，包含4个键值对的哈希表来说，这个哈希表的负载因子为：
计算得出。
#负载因子=哈希表已保存节点数量／哈希表大小
当以下条件中的任意一个被满足时，程序会自动开始对哈希表执行扩展操作：
渐进式rehash
load_factor = ht[0].used / ht[0].size
---
## Page 37
字典的rehashidx属性是如何变化的。
大计算量。
摊到对字典的每个添加、删除、查找和更新操作上，从而避免了集中式rehash 而带来的庞
rehash 至 ht［1］，这时程序将rehashidx 属性的值设为-1，表示 rehash 操作已完成。
rehash 到 ht［1］，当 rehash 工作完成之后，程序将 rehashidx 属性的值增一。
了执行指定的操作以外，还会顺带将 ht［O］哈希表在rehashidx 索引上的所有键值对
工作正式开始。
图4-12至图4-17展示了一次完整的渐进式rehash 过程，注意观察在整个rehash过程中，
4）随着字典操作的不断执行，最终在某个时间点上，ht［0］的所有键值对都会被
3）在rehash进行期间，
渐进式 rehash 的好处在于它采取分而治之的方式，将 rehash 键值对所需的计算工作均