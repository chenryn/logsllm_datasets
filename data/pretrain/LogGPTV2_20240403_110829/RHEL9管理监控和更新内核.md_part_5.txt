:::
在 RHEL 9 中，当加载内核模块时，内核会根据内核系统密钥环中的公共 X.509
密钥检查模块的签名(`.builtin_trusted_keys`{.literal})以及内核平台密钥环(`.platform`{.literal})。`.platform`{.literal}
密钥环包含来自第三方平台提供商和自定义公钥的密钥。内核系统
`.blacklist`{.literal}
密钥环中的密钥不包括在验证中。以下小节提供了系统中不同源的密钥、密钥环和载入密钥示例概述。此外，您还可以了解如何验证内核模块。
您需要满足某些条件，才能在启用了 UEFI 安全引导功能的系统中载入内核模块。
如果启用了 UEFI 安全引导，或者指定了 `module.sig_enforce`{.literal}
内核参数：
::: itemizedlist
-   您只能加载那些签名是通过系统密钥环
    (`.builtin_trusted_keys`{.literal}) 和平台密钥环
    (`.platform`{.literal}) 验证的已签名内核模块。
-   公钥不能在系统中被撤销的密钥环 (`.blacklist`{.literal})。
:::
如果禁用了 UEFI 安全引导且未指定 `module.sig_enforce`{.literal}
内核参数：
::: itemizedlist
-   您可以加载未签名的内核模块和签名的内核模块，而无需公钥。
:::
如果系统不基于 UEFI，或者禁用 UEFI 安全引导：
::: itemizedlist
-   只有内核中嵌入的密钥才会加载到 `.builtin_trusted_keys`{.literal} 和
    `.platform`{.literal}。
-   您无法在不重新构建内核的情况下添加这组密钥。
:::
::: table
[]{#signing-kernel-modules-for-secure-boot_managing-monitoring-and-updating-the-kernel.html#idm140150594371536}
**表 4.2. 加载内核模块的验证要求**
::: table-contents
  模块已签名   找到公钥，且签名有效   UEFI 安全引导状态   sig_enforce   模块载入   内核污点
  ------------ ---------------------- ------------------- ------------- ---------- ----------
  未签名       \-                     未启用              未启用        成功       是
                                      未启用              Enabled       Fails      \-
                                      Enabled             \-            Fails      \-
  已签名       否                     未启用              未启用        成功       是
                                      未启用              Enabled       Fails      \-
                                      Enabled             \-            Fails      \-
  已签名       是                     未启用              未启用        成功       否
                                      未启用              Enabled       成功       否
                                      Enabled             \-            成功       否
:::
:::
:::
::: section
::: titlepage
# []{#signing-kernel-modules-for-secure-boot_managing-monitoring-and-updating-the-kernel.html#sources-for-public-keys_signing-kernel-modules-for-secure-boot}公钥的源 {.title}
:::
在引导过程中，内核会从一组持久性密钥中加载 X.509 密钥到以下密钥环中：
::: itemizedlist
-   系统密钥环 (`.builtin_trusted_keys`{.literal})
-   `.platform`{.literal} 密钥环
-   系统 `.blacklist`{.literal} 密钥环
:::
::: table
[]{#signing-kernel-modules-for-secure-boot_managing-monitoring-and-updating-the-kernel.html#idm140150700528048}
**表 4.3. 系统密钥环源**
::: table-contents
  X.509 密钥源                               用户可以添加密钥   UEFI 安全引导状态   引导过程中载入的密钥
  ------------------------------------------ ------------------ ------------------- -----------------------------------
  嵌入于内核中                               否                 \-                  `.builtin_trusted_keys`{.literal}
  UEFI 安全引导 \"db\"                       有限               未启用              否
                                                                Enabled             `.platform`{.literal}
  嵌入在 `shim.efi`{.literal} 引导装载程序   否                 未启用              否
                                                                Enabled             `.builtin_trusted_keys`{.literal}
  Machine Owner Key（MOK）列表               是                 未启用              否
                                                                Enabled             `.platform`{.literal}
:::
:::
`.builtin_trusted_keys`{.literal}：
::: itemizedlist
-   在引导时构建的密钥环
-   包含可信公钥
-   查看密钥需要 `root`{.literal} 权限
:::
`.platform`{.literal}：
::: itemizedlist
-   在引导时构建的密钥环
-   包含第三方平台供应商和自定义公钥的密钥
-   查看密钥需要 `root`{.literal} 权限
:::
`.blacklist`{.literal}
::: itemizedlist
-   使用 X.509 密钥的密钥环，该密钥已被撤销
-   使用来自 `.blacklist`{.literal}
    的密钥签名的模块将会验证失败，即使您的公共密钥已在
    `.builtin_trusted_keys`{.literal} 中。
:::
UEFI 安全引导数据库：
::: itemizedlist
-   签名数据库
-   存储 UEFI 应用程序、UEFI 驱动程序和引导装载程序的密钥（哈希值）
-   密钥可加载到机器上
:::
UEFI 安全引导 dbx：
::: itemizedlist
-   已撤销的签名数据库
-   防止加载密钥
-   从此数据库撤销的密钥添加到 `.blacklist`{.literal} 密钥环中
:::
:::
::: section
::: titlepage
# []{#signing-kernel-modules-for-secure-boot_managing-monitoring-and-updating-the-kernel.html#generating-a-public-and-private-key-pair_signing-kernel-modules-for-secure-boot}生成公钥和私钥对 {.title}
:::
您需要生成一个公共和私有 X.509
密钥对，才能成功在启用了安全引导的系统上使用内核模块。之后您将使用私钥为内核模块签名。您还必须将对应的公钥添加到用于安全引导的
Machine Owner Key (MOK) 中，以验证签名的模块。
这个密钥对生成的一些参数最好用配置文件指定。
::: orderedlist
**步骤**
1.  使用密钥对生成参数创建配置文件：
    ``` literallayout
    # cat  configuration_file.config
    [ req ]
    default_bits = 4096
    distinguished_name = req_distinguished_name
    prompt = no
    string_mask = utf8only
    x509_extensions = myexts
    [ req_distinguished_name ]
    O = Organization
    CN = Organization signing key
    emailAddress = E-mail address
    [ myexts ]
    basicConstraints=critical,CA:FALSE
    keyUsage=digitalSignature
    subjectKeyIdentifier=hash
    authorityKeyIdentifier=keyid
    EOF
    ```
2.  如以下示例所示，创建 X.509 公钥和私钥对：
    ``` literallayout
    # openssl req -x509 -new -nodes -utf8 -sha256 -days 36500 \
    -batch -config configuration_file.config -outform DER \
    -out my_signing_key_pub.der \
    -keyout my_signing_key.priv
    ```
    公钥将写入 `my_signing_key_pub.der`{.literal} 文件，私钥将写入
    `my_signing_key.priv`{.literal} 文件中。
    ::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 重要 {.title}
    在 RHEL 9
    中，密钥对的有效性日期无关紧要。这个密钥不会过期，但建议在签名密钥的有效周期内对内核模块进行签名。但是，`sign-file`{.literal}
    实用程序不会警告您，无论有效期日期如何密钥都将可用。
    :::
3.  另外，您还可以查看公钥的有效性日期，如下例所示：
    ``` literallayout
    # openssl x509 -inform der -text -noout -in my_signing_key_pub.der
    Validity
                Not Before: Feb 14 16:34:37 2019 GMT
                Not After : Feb 11 16:34:37 2029 GMT
    ```
4.  在您要验证并载入内核模块的所有系统中注册您的公钥。
:::
::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
### 警告 {.title}
应用强大的安全措施和访问策略来保护您的私钥内容。对于一个恶意的用户，可以使用这个密钥破坏所有由对应公钥验证的系统。
:::
::: itemizedlist
**其他资源**
-   `openssl(1)`{.literal} 手册页
-   [*[[RHEL
    安全指南](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html-single/security_guide/index#sec-Using_OpenSSL){.link}]{.citetitle}*]{.emphasis}
-   [通过在 MOK
    列表中添加公钥在目标系统中注册公钥](#signing-kernel-modules-for-secure-boot_managing-monitoring-and-updating-the-kernel.html#enrolling-public-key-on-target-system-by-adding-the-public-key-to-the-mok-list_signing-kernel-modules-for-secure-boot "通过在 MOK 列表中添加公钥在目标系统中注册公钥"){.link}
:::
:::
::: section
::: titlepage
# []{#signing-kernel-modules-for-secure-boot_managing-monitoring-and-updating-the-kernel.html#example-output-of-system-keyrings_signing-kernel-modules-for-secure-boot}系统密钥环输出示例 {.title}
:::
您可以使用 `keyutils`{.literal} 软件包中的 `keyctl`{.literal}
实用程序显示系统密钥环中的密钥信息。
以下是启用了 UEFI 安全引导的 RHEL 9 系统中的
`.builtin_trusted_keys`{.literal}、`.platform`{.literal} 和
`.blacklist`{.literal} 密钥环的简化示例输出。
::: itemizedlist
**先决条件**
-   有 root 权限。
-   您从 `keyutils`{.literal} 软件包安装了 `keyctl`{.literal} 实用程序。
:::
``` literallayout
# keyctl list %:.builtin_trusted_keys
6 keys in keyring:
...asymmetric: Red Hat Enterprise Linux Driver Update Program (key 3): bf57f3e87...
...asymmetric: Red Hat Secure Boot (CA key 1): 4016841644ce3a810408050766e8f8a29...
...asymmetric: Microsoft Corporation UEFI CA 2011: 13adbf4309bd82709c8cd54f316ed...
...asymmetric: Microsoft Windows Production PCA 2011: a92902398e16c49778cd90f99e...
...asymmetric: Red Hat Enterprise Linux kernel signing key: 4249689eefc77e95880b...
...asymmetric: Red Hat Enterprise Linux kpatch signing key: 4d38fd864ebe18c5f0b7...
# keyctl list %:.platform
4 keys in keyring:
...asymmetric: VMware, Inc.: 4ad8da0472073...
...asymmetric: Red Hat Secure Boot CA 5: cc6fafe72...
...asymmetric: Microsoft Windows Production PCA 2011: a929f298e1...
...asymmetric: Microsoft Corporation UEFI CA 2011: 13adbf4e0bd82...
# keyctl list %:.blacklist
4 keys in keyring:
...blacklist: bin:f5ff83a...
...blacklist: bin:0dfdbec...
...blacklist: bin:38f1d22...
...blacklist: bin:51f831f...
```
上述 `.builtin_trusted_keys`{.literal} 密钥环显示从 UEFI
安全引导\"db\"密钥和`红帽安全引导（CA 密钥 1）`{.literal}中添加了两个密钥，这些密钥嵌入在
`shim.efi`{.literal} 引导装载程序中。
以下示例显示了内核控制台的输出结果。消息标识带有 UEFI
安全引导相关源的密钥。这包括 UEFI 安全引导 db、内嵌的 shim 和 MOK 列表。
``` literallayout
# dmesg | egrep 'integrity.*cert'
[1.512966] integrity: Loading X.509 certificate: UEFI:db
[1.513027] integrity: Loaded X.509 cert 'Microsoft Windows Production PCA 2011: a929023...
[1.513028] integrity: Loading X.509 certificate: UEFI:db
[1.513057] integrity: Loaded X.509 cert 'Microsoft Corporation UEFI CA 2011: 13adbf4309...
[1.513298] integrity: Loading X.509 certificate: UEFI:MokListRT (MOKvar table)
[1.513549] integrity: Loaded X.509 cert 'Red Hat Secure Boot CA 5: cc6fa5e72868ba494e93...
```
::: itemizedlist
**其他资源**
-   `keyctl(1)`{.literal}、`dmesg(1)`{.literal} 手册页
:::
:::
::: section
::: titlepage
# []{#signing-kernel-modules-for-secure-boot_managing-monitoring-and-updating-the-kernel.html#enrolling-public-key-on-target-system-by-adding-the-public-key-to-the-mok-list_signing-kernel-modules-for-secure-boot}通过在 MOK 列表中添加公钥在目标系统中注册公钥 {.title}
:::
当 RHEL 9 在启用了安全引导机制的基于 UEFI
的系统上引导时，内核将加载到系统密钥环(`.builtin_trusted_keys`{.literal})所有位于安全引导
db key 数据库的公钥。同时，内核排除 dbx
数据库中已撤销的密钥。以下小节描述了在目标系统上导入公钥的不同方式，以便系统密钥环
(`.builtin_trusted_keys`{.literal}) 能够使用公钥来验证内核模块。
Machine Owner Key (MOK) 功能可以用来扩展 UEFI 安全引导密钥数据库。当
RHEL 9 在启用了安全引导机制的 UEFI
系统中引导时，除了密钥数据库中的密钥外，MOK
列表中的密钥也会添加到系统密钥环(`.builtin_trusted_keys`{.literal})。和安全引导数据库密钥相似，MOK
列表密钥会被安全地永久存储。但它们是两个独立的工具。MOK 工具由
`shim.efi`{.literal}、`MokManager.efi`{.literal}、`grubx64.efi`{.literal}
和 `mokutil`{.literal} 实用程序支持。
注册 MOK 密钥需要用户在每个目标系统中在 UEFI 系统控制台上手动互动。MOK
工具为测试新生成的密钥对以及与其签注的内核模块提供了方便的方法。
::: orderedlist
**步骤**
1.  请在 MOK 列表中添加您的公钥：
    ``` literallayout
    # mokutil --import my_signing_key_pub.der
    ```
    会要求您输入并确认此 MOK 注册请求的密码。
2.  重启机器。