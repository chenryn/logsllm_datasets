title:SmarTest: Effectively Hunting Vulnerable Transaction Sequences in
Smart Contracts through Language Model-Guided Symbolic Execution
author:Sunbeom So and
Seongjoon Hong and
Hakjoo Oh
SmarTeST: Effectively Hunting Vulnerable Transaction 
Sequences in Smart Contracts through Language 
Model-Guided Symbolic Execution
Sunbeom So, Seongjoon Hong, and Hakjoo Oh, Korea University
https://www.usenix.org/conference/usenixsecurity21/presentation/so
This paper is included in the Proceedings of the 30th USENIX Security Symposium.August 11–13, 2021978-1-939133-24-3Open access to the Proceedings of the 30th USENIX Security Symposium is sponsored by USENIX.SMARTEST: Effectively Hunting Vulnerable Transaction Sequences in
Smart Contracts through Language Model-Guided Symbolic Execution
Sunbeom So, Seongjoon Hong, Hakjoo Oh∗
Department of Computer Science and Engineering
Korea University
Abstract
We present SMARTEST, a novel symbolic execution tech-
nique for effectively hunting vulnerable transaction sequences
in smart contracts. Because smart contracts are stateful pro-
grams whose states are altered by transactions, diagnosing
and understanding nontrivial vulnerabilities requires gener-
ating sequences of transactions that demonstrate the ﬂaws.
However, ﬁnding such vulnerable transaction sequences is
challenging as the number of possible combinations of trans-
actions is intractably large. As a result, most existing tools
for smart contract analysis use abstractions and merely point
out the locations of vulnerabilities, which in turn imposes a
steep burden on users of understanding the bugs, or have lim-
ited power in generating transaction sequences. In this paper,
we aim to overcome this challenge by combining symbolic
execution with a language model for vulnerable transaction
sequences, so that symbolic execution effectively prioritizes
program paths that are likely to reveal vulnerabilities. Ex-
perimental results with real-world smart contracts show that
SMARTEST signiﬁcantly outperforms existing tools by ﬁnd-
ing more vulnerable transaction sequences including critical
zero-day vulnerabilities.
1 Introduction
Securing smart contracts is a pressing issue waiting to be
addressed for the upcoming blockchain era. Blockchain is
a ground-breaking technology that enables automatic fulﬁll-
ment of agreed obligations between untrusted parties. The
obligations are written in smart contracts, computer programs
running on blockchain whose executions are therefore guar-
anteed to be faithful. Smart contracts are gaining popularity
across diverse application domains where security and privacy
are important [29]. Unfortunately, however, the safety of smart
contracts itself remains a major concern. Smart contracts are
attractive targets for attackers since they typically manipulate
valuable data such as digital assets and therefore even a single
∗Corresponding author: PI:EMAIL
glitch can cause tremendous ﬁnancial damage [1, 5]. Even
worse, smart contracts are immutable and their vulnerabilities
cannot be mitigated once deployed. Developing techniques to
ensure their safety before deployment is critically important
and urgent.
In this paper, we present SMARTEST, a new safety an-
alyzer for Ethereum smart contracts. The key feature of
SMARTEST, which differs crucially from existing analyz-
ers [3,6,24,25,28,30,31,36,37], is that it effectively ﬁnds vul-
nerable transaction sequences of smart contracts. Ethereum
smart contracts are stateful programs whose global states are
altered by receiving and processing a series of transactions.
Therefore, nontrivial bugs in smart contracts are typically
caused by the interaction of multiple transactions, and un-
derstanding such bugs requires contriving concrete scenar-
ios in terms of transaction sequences. The primary goal of
SMARTEST is to automate this process; SMARTEST aims
not only to detect bugs in smart contracts, but to automati-
cally generate vulnerable transaction sequences that prove the
ﬂaws.
Existing analyzers for smart contracts fall short in this as-
pect. For example, existing safety veriﬁers (e.g. [6, 24, 36])
are fundamentally limited in producing vulnerable transaction
sequences because they abstract the set of all transaction se-
quences into single transaction invariants (i.e. properties that
hold under arbitrary interleaving of transactions [36]). Bug-
ﬁnders such as OYENTE [28] and OSIRIS [37] are only able to
indicate certain vulnerable points in smart contracts without
generating transaction sequences that reveal vulnerabilities.
As a result, triaging vulnerabilities reported by these tools is
difﬁcult and error-prone since users need to manually identify
concrete scenarios to understand root causes of the vulnera-
bilities. A few symbolic execution tools (e.g. [3, 25, 30, 31])
support tracing vulnerable transaction sequences but, as we
demonstrate in this paper, their performance is far from satis-
factory for real-world smart contracts.
To ﬁnd vulnerable transaction sequences effectively, we
present a novel technique that guides symbolic execution
with language models. Basically, our technique exhaustively
USENIX Association
30th USENIX Security Symposium    1361
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
contract SocialChain {
uint totalSupply ;
mapping(address=>uint) balance ;
mapping(address=>mapping(address=>uint)) allowance ;
constructor (uint initialSupply ) {
totalSupply = initialSupply ;
balance [msg. sender ] = initialSupply ;
}
function transfer (address to , uint value )
public returns (bool) {
require ( balance [msg. sender ] >= value );
balance [msg. sender ] -= value ;
balance [ to ] += value ;
return true;
}
function approve (address spender , uint value )
public returns (bool) {
allowance [msg. sender ][ spender ] = value ;
return true;
}
function transferFrom (address from , address to ,
uint value ) public returns (bool) {
require ( balance [ from ] >= value );
require ( balance [ to ] + value > balance [ to ]) ;
require ( allowance [ from ][msg. sender ] >= value );
balance [ from ] -= value ;
balance [ to ] += value ;
allowance [ from ][msg. sender ] += value ; // bug
return true;
}
}
Figure 2: A vulnerable contract (simpliﬁed for readability).
ties from smart contracts in the wild.
Contributions. We summarize our contributions below.
• We present a new technique for effectively ﬁnding vul-
nerable transaction sequences in smart contracts. To our
knowledge, our work is the ﬁrst to use language models
to steer symbolic execution towards likely paths.
• We extensively evaluate our technique in comparison
with ﬁve recently-developed tools [3, 19, 25, 30, 31].
• We make our tool, SMARTEST, and benchmarks publicly
available. 1 All experimental results are reproducible.
2 Motivating Examples
In this section, we illustrate SMARTEST with examples.
Example 1. Figure 2 shows a token contract, called SCA.2
It has three global variables: totalSupply, balance, and
allowance. totalSupply stores the total amount of issued
tokens. balance is a mapping from account addresses to
token balances. allowance is a two-dimensional mapping,
which maps approved agents’ addresses to token amounts that
are allowed to use on behalf of original token holders. For
1http://prl.korea.ac.kr/smartest
20xb75a5e36cc668bc8fe468e8f272cd4a0fd0fd773
Figure 1: Overview of SMARTEST
enumerates transaction sequences in increasing size and runs
symbolic execution over the sequences to decide whether they
are vulnerable or not. A main technical challenge that arises
in this method is that the number of transaction sequences to
be examined grows exponentially as the size of the sequences
increases. Our key idea to address this challenge is to guide
symbolic execution with statistical language models, so that
guided symbolic execution can effectively prioritize transac-
tion sequences that are likely to reveal vulnerabilities. More
speciﬁcally, given a set of training transaction sequences that
are automatically obtained by running unguided symbolic
execution on existing vulnerable contracts, our technique au-
tomatically learns a probability distribution over vulnerable
transaction sequences. Then, symbolic execution guided by
the learned model can effectively ﬁnd vulnerable transaction
sequences for new, unseen smart contracts. Figure 1 depicts
our approach.
Experimental results show that our language model-guided
symbolic execution is highly effective in hunting vulnerable
transaction sequences. We implemented SMARTEST for So-
lidity [4], the most widely used programming language for
Ethereum smart contracts, and evaluated it on two datasets
with different types of known vulnerabilities. The ﬁrst dataset
is comprised of 443 smart contracts with CVE-reported
arithmetic vulnerabilities (e.g., integer overﬂows). The sec-
ond dataset consists of 104 contracts with access control-
related vulnerabilities, namely Ether-leaking and suicidal con-
tracts [31]. On CVE dataset, we compared SMARTEST with
MYTHRIL [3] and MANTICORE [30], two well-known sym-
bolic execution tools developed by blockchain security
ﬁrms. The results show that SMARTEST found 93.0% of
known vulnerabilities out of sampled contracts, whereas
MYTHRIL and MANTICORE collectively found 37.2%. On
the second dataset with leaking and suicidal contracts, we
compared SMARTEST with four symbolic executors and one
fuzzer: MAIAN [31], TEETHER [25], MYTHRIL, MANTI-
CORE, and ILF [19]. The results show that SMARTEST effec-
tively found more vulnerabilities than these tools. Moreover,
SMARTEST found a number of critical zero-day vulnerabili-
1362    30th USENIX Security Symposium
USENIX Association
Symbolic ExecutionVulnerable
SequencesConcrete
ValidatorValidated
SequencesLanguage
ModelTraining
SequencesTraining
ContractsTesting
Contract⋮Symbolic Executionexample, allowance[A][B] indicates the amount of tokens
that A (i.e. the original token holder) allows B (i.e. the agent)
to spend.
The constructor at lines 6–9 initializes totalSupply and
balance[msg.sender] (i.e. the balance of the contract cre-
ator) with the argument (initialSupply). By invoking the
transfer function, a transaction sender (msg.sender) can
send value tokens to a designated account address (to).
By invoking approve, a token holder (msg.sender) can
set allowance (allowance[msg.sender][spender]) for her
agent (spender). The transferFrom function is similar to
transfer but tokens are transferred from from to to by the
agent (msg.sender) of from.
The contract has a critical bug in trasnferFrom. A
successful transaction must decrease both the sender’s
balance (balance[from]) and the agent’s allowance
(allowance[from][msg.sender]) by the same amount of
tokens (value). At line 32, however, the allowance is mistak-
enly increased by value (that is, += at line 32 should have
been -=). This logical ﬂaw in this contract can be found by
detecting an integer overﬂow in the agent’s allowance. For
example, suppose the contract is deployed by a transaction
constructor (V1) with msg.sender = A, and then assume
two transactions below are processed in sequence:
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
contract Goal {
address owner ;
uint totalSupply ;
mapping(address=>uint) balance ;
mapping(address=>mapping(address=>uint)) allowance ;
constructor () public {
owner = msg. sender ;
totalSupply = 0;
}
function mintToken (address target , uint amount )
public {
require (msg. sender == owner );
balance [ target ] += amount ; // overflow
totalSupply += amount ;
// overflow
}
function approve (address spender , uint value )
public returns (bool) {
allowance [msg. sender ][ spender ] = value ;
return true;
}
function burnFrom (address from , uint value )
public returns (bool) {
require ( balance [ from ] >= value );
require ( allowance [ from ][msg. sender ] >= value );
balance [ from ] -= value ;
allowance [ from ][msg. sender ] -= value ;
totalSupply -= value ; // underflow
return true;
}
}
1. approve(B,V2) with msg.sender = A
Figure 3: A vulnerable contract simpliﬁed from Goal contract.
2. transferFrom(A,C,V3) with msg.sender = B
where A denotes the contract creator, B is the A’s agent, C is an-
other account address, and V1–V3 are 256-bit integer constants
that can trigger the overﬂow at line 32. For example, assume
V1=0x8800...00, V2=0x8100...00, and V3=0x7f00...00.
In this case, the remaining allowance after the last transaction
must be 0x0200...00 but it ends up with 0x0000...00 due
to the overﬂow. Note that this bug does not manifest itself in a
single transaction; to reveal the bug at line 32, transferFrom
must be invoked with value > 0, but a direct invocation to
transferFrom with value > 0 will throw an exception due
to the guard statement at line 29. Therefore, a transaction
sequence such as the one shown above is required to trigger