be made to optimize performance in the satellite networking
environment. Future work might also consider the suitability
of other QUIC implementations such as Chromium’s [49].
VI. SECURE PEP TESTBED
One challenge in developing and evaluating PEPs has been
creating replicable simulations of system performance. While
systems can be tested on live satellite networks, understanding
performance under adverse conditions (e.g. poor reception
8
quality or network congestion) or creating experiments which
others can verify often requires some degree of simulation.
Simulating satellite IP networks involves more than the simple
injection of artiﬁcial latency, which can result in misleading
and inaccurate results [50].
The OpenSAND engine, previously Platine,
is a long-
standing satellite network simulation environment for more
faithfully replicating satellite broadband [1]. The engine sup-
ports built in attenuation and modulation emulation, replicating
conditions which can have signiﬁcant implications for TCP
performance. OpenSAND emulates satellite networks down to
the link layer, simulating low-level protocol noise mitigations
and creating realistic trafﬁc routing behaviors.
However, the OpenSAND environment is somewhat dif-
ﬁcult to conﬁgure - requiring multiple devices and precise
network conditions. This has been noted in prior work as a
barrier to its use, despite its relatively high degree of accuracy
when validated against real-world networks [50].
In the process of assessing QPEP’s performance, we have
developed a simple dockerized deployment of the OpenSAND
engine speciﬁcally tailored towards replicable PEP bench-
marking. Our testbed models a basic GEO satellite network
consisting of a single gateway and satellite terminal (akin to
the networks shown in Figure 1 and Figure 3). This testbed
is open-source and publicly available in the QPEP source
repository (see Footnote 1). Its intention is to simplify the
process for future researchers interested in making related
contributions towards secure PEP development.
The testbed’s gateway container is linked through the
simulation’s host machine to the broader internet, allowing a
testbed user to open a web-browser and visit real websites as
if they were using the simulated satellite link. We also connect
the gateway container to a simulated LAN environment with a
workstation containing several network benchmarking tools. A
similar LAN environment is connected to the satellite terminal,
replicating a satellite customer’s devices.
On the satellite container, we include packet capture tools
for real-time monitoring of simulated over-the-air transmis-
sions. This allows for immediate veriﬁcation that secure PEPs
are not leaking sensitive data in clear-text.
Finally, pre-conﬁgured installations of QPEP, OpenVPN,
and PEPsal are installed for both the gateway and satellite
terminal networks. A set of example python scripts are pro-
vided to orchestrate the environment and run the experiments
presented in this paper. These scripts are designed as modular
benchmarks which can also be adapted to future secure PEP
proposals to facilitate direct and replicable comparisons with
QPEP in future work.
VII. QPEP EVALUATION
In this section, we present an evaluation of the QPEP
approach and its impact on the performance of TCP-based
trafﬁc within our testbed environment.2
2In this paper, QPEP is evaluated only through simulation. While this
has beneﬁts for reproducability, we originally intended to supplement these
experiments with validation in a real-world VSAT network. Unfortunately,
due to restrictions during the global coronavirus pandemic, this has not been
possible. When real-world benchmarks are available, they will be added to
QPEP’s public source code repository (see Footnote 1).
No comparable encrypted satellite PEP is publicly avail-
able. As such, we selected PEPsal, one of the only open-
source unencrypted PEPs, and OpenVPN, a popular VPN
product without speciﬁc satellite optimizations,
to provide
some context to measurements made [37], [38]. Future work
including commercial and proprietary PEPs might be of merit,
although these are not readily available to researchers. It is
worth noting that the particular VPN product (e.g. OpenVPN
vs. PPTP vs. IPSec) is unlikely to have meaningful impact on
performance benchmarks insomuch as all hide the true TCP
headers of the customer’s connection from ISP PEPs.
A. Experimental Setup
First, we consider preliminary results under ideal Open-
SAND network conditions. Next, we present QPEP with
various adverse network situations, assessing its performance
in the presence of high rates of packet loss and under variable
delay conditions such as those in LEO constellations. Finally,
we brieﬂy consider how performance modiﬁcations to the
QUIC protocol itself may impact QPEP’s behavior.
Unless otherwise noted, the OpenSAND network is con-
ﬁgured to use the DVB-S2 protocol with GSE encapsulation
for forward-link communications and DVB-RCS2 with RLE
encapsulation for the return link. The clear-sky SNR is set
to 20 dB and Adaptive Coding and Modulation (ACM) is
used at the physical layer to provide quasi error free (QEF)
communications at this SNR level. A constant speed-of-light
delay of 125 ms is used from both the satellite terminal and the
satellite gateway to the satellite (resulting in a 500 ms RTT).
The forward-link carrier frequency is allocated 50.0 MHz
of bandwidth with a roll-off factor of 0.25 and the return-
link is allocated approximately 7.4 MHz of bandwidth. These
bandwidth values are well within the simulation capabilities
of the machines used to run the scenarios, reducing the
risk of artiﬁcial network caps due to hardware limitations.
While simulations were run on multiple hosts for efﬁciency
reasons, comparisons made within a given experiment (e.g. all
measurements shown in a single ﬁgure) were conducted on the
same physical host.
Our conﬁguration is intended to represent the characteris-
tics of a typical GEO satellite broadband network. We also
brieﬂy touch on an alternative LEO network conﬁguration in
Section VII-C, which demonstrates the performance of QPEP
in a situation where latency is variable, depending on the
geographic location of the end user and the corresponding
satellites and ground stations. The testbed supports arbitrary
delay and bandwidth models which may be useful in future
work considering more esoteric network designs, such as those
involving space-to-space routing or polar orbits.
Simulations of QPEP are conﬁgured with a QPEP server
sitting local to the satellite gateway network and listening
for incoming QUIC tunnel connections. The QPEP client is
hosted on the satellite terminal and listens transparently into
all incoming TCP connections. The QPEP server is conﬁgured
to accept up to 40,000 concurrent streams from a single host
- substantially higher than quic-go’s default of 100. This is to
enable compatibility with concurrent download benchmarks.
OpenVPN simulations are deployed similarly to QPEP,
with an OpenVPN client connected to the satellite terminal
9
goodput for small transfers, but diminishes at larger transfer
sizes until QPEP approaches the performance of unencrypted
distributed PEPs.
Integrated PEPsal offers little advantage here as it
is
constrained by head-of-line blocking over the satellite hop
and the majority of download trafﬁc originates on the un-
optimized route from the gateway to the user. Distributed
PEPsal performs much better as it is able to optimize both
directions of the satellite conversation. However,
lacks
QPEP’s ability to encapsulate concurrent streams and to make
use of the ﬁrst few handshake packets for data delivery.
Finally, as expected, OpenVPN performs much worse than
QPEP, essentially matching, or slightly underperforming, an
un-optimized satellite link.
it
Fig. 5.
Goodput Comparison by Iperf Transfer Size. The shaded zones
represent standard deviation across 100 simulation runs at each ﬁle size. Note
that QPEP performs well for small transfers and matches the performance
of the unencrypted distributed PEP for larger transfers. Meanwhile,
the
traditional VPN,
integrated PEP, and unencrypted satellite connection all
perform relatively poorly throughout.
and an OpenVPN server connected to the satellite gateway.
OpenVPN is conﬁgured to leverage a UDP tunnel as this is
expected to perform better in the satellite environment.
PEPsal is evaluated under two different conﬁgurations -
a distributed installation and an integrated installation. Eval-
uations of distributed PEPsal are implemented with a PEPsal
endpoint transparently listening to all incoming TCP trafﬁc
on both the satellite gateway and the satellite terminal. In
integrated PEPsal, a PEPsal endpoint listens to incoming TCP
trafﬁc on the satellite terminal but no endpoint is installed on
the satellite gateway.
Diagrams summarizing these conﬁgurations can be found
in Appendix A.
B. Baseline Performance
An initial comparative assessment of goodput can be
made through the use of Iperf which attempts to provide
consistent performance evaluations of network speed. For
these benchmarks, an Iperf server is hosted on the satellite
gateway network and is used to transfer data to an Iperf client
connected to the satellite terminal. For each tool, one-hundred
iterations of Iperf are run at data transfer sizes ranging from
0.5 to 10 MB in 250 KB intervals. Varying the volume of
data transferred provides insights into the extent to which
results are inﬂuenced by session initialization time. We would
expect smaller transfers to demonstrate larger susceptibility to
latent TCP handshakes as a proportion of total transfer time
while larger transfers should be more heavily inﬂuenced by
congestion control and total available bandwidth. The results
of these experiments are summarized in Figure 5.
We see that QPEP is capable of making signiﬁcantly
greater use of bandwidth for small to moderate-sized down-
loads than any of the evaluated alternatives, even, surprisingly,
the unencrypted PEPs. This make sense as QPEP is able to
send data along with the stream initialization packets, allowing
very small transfers to be completed in a single round-trip. As
shown in Figure 5 this has a large effect on the measured
This benchmark, while meaningful, is somewhat mislead-
ing. Iperf provides one important measure of goodput but
the scenario it evaluates is not representative of real-world
behavior. Speciﬁcally, opening a connection to a port, ramping
it up to maximum speed, and then maintaining that speed for
many ﬁle transfers is not how most web services operate. PEPs
were explicitly invented to optimize web-browsing and visits
to text and image-based services. Even if QPEP were well
suited to encrypting certain types of ﬁle transfers, its adoption
would likely hinge on its performance for web-browsing tasks.
Fig. 6.
ECDF Comparison of PLTs over Alexa Top 20. Note that QPEP
shows signiﬁcantly faster PLTs than traditional VPNs and marginally better
PLTs compared to unencrypted PEPs. Each line represents 2,000 simulations
with a connection timeout set to three minutes.
A more realistic sense can be found through the evaluation
of the time it takes to visit actual websites. Unlike IPerf, web-
browsing consists of the transfer of many small ﬁles (e.g.
embedded images or style-sheets) over multiple TCP sessions.
Often, these ﬁles can be hosted on a variety of servers. This
makes web trafﬁc more sensitive to latency effects.
Experimentally measuring page load times (PLTs) is an
imprecise art. For our simulations, we used the open-source
tool Browsertime [51]. Browsertime reports PLT as the number
of elapsed milliseconds between the “navigationStart” and the
“load” event of the browser’s navigation timing API (as deﬁned
in [52]). This roughly translates to the amount of time between
a user hitting the enter key in the browser’s navigation bar
and the moment when all page resources, including the DOM,
images, and stylesheets, are loaded.
10
To conduct these experiments, we connected our simulated
satellite gateway to a real terrestrial broadband network. This
naturally induces measurement variability depending on net-
work conditions at measurement time. To reduce this variabil-
ity, we conducted 100 connections with each tool to each of
the top 20 distinct domains listed by Alexa Internet Inc [53].
Between each visit, the browser (a headless version of Firefox)
and the DNS cache were reset. Any page loads which took
more than 3 minutes were terminated as timeouts. The results
of these PLT measurements are summarized by means of
an Empirical Cumulative Distribution Function (ECDF) in
Figure 6.
This page load time comparison shows that QPEP is able
to encrypt realistic web browsing trafﬁc without undermining
the performance users have come to expect from status quo
unencrypted PEPs. QPEP’s median page load time (PLT)
across the Alexa Top 20 is 13.77 seconds. This is roughly 54%
faster than distributed PEPsal’s 30.16 seconds and integrated
PEPsal’s 30.5 seconds. It makes sense that both integrated
and distributed PEPsal perform similarly here as PLTs are
dominated by large numbers of client-initiated TCP hand-
shakes for various web resources. In terms of mean PLTs,
which are more heavily inﬂuenced by “worst-case” long-
running connections, QPEP still signiﬁcantly outperforms the
traditional insecure PEP, with a mean PLT of approximately
25.80 seconds compared to distributed PEPsal’s 37.61 second
average and integrated PEPsal’s 40.70 second average.
The most important benchmark comparison, however, is
between QPEP and the status quo options for end-to-end web
trafﬁc encryption. In this case, we ﬁnd that QPEP more than
halves median PLTs when compared to OpenVPN’s encryp-
tion, achieving 72% faster page loads than an OpenVPN-
encapsulated connection’s 49.42 second median PLT. In terms
of mean PLTs, QPEP still roughly halves OpenVPN’s mean
PLT of 50.01 seconds. As expected, we further observe that
OpenVPN roughly matches, or slightly under-performs, a basic
unencrypted and unoptimized satellite link.
The relative disadvantage of using a traditional VPN for
over-the-air encryption in GEO broadband is clear when con-
sidering this PLT metric. QPEP is functionally the same from
a security perspective (eavesdroppers cannot interpret inter-
cepted trafﬁc), but signiﬁcantly more performant by design.
The surprising additional outcome that QPEP achieves signiﬁ-
cantly lower PLTs than established and architecturally similar
insecure PEP appliances suggests that QUIC is particularly
well-suited for the satellite tunneling use-case.
C. Performance Under Adverse Conditions
While these basic evaluations present a compelling case
for the use of QPEP in a typical GEO environment, satellite
networks can exhibit many atypical characteristics. Packet loss,
rain-fade, and orbit altitudes can all have signiﬁcant perfor-
mance implications. As such, we have elected to evaluate the
relative performance of QPEP under some of these conditions.
Intuitively, packet loss and rain fade conditions are signif-
icant threats to encrypted tunneling PEPs like QPEP. Loss of
critical packets related to the key exchange process or session
initialization could impose heavy additional round-trip costs
not observed in clear-sky conditions. In a tunneling PEP, severe
packet loss can even cause the tunnel between the PEP client
and server to timeout or otherwise break. However, at mild loss
levels, PEPs are expected to improve network performance by
mitigating the impact of TCP congestion-control restarts as
discussed in Section III-B.
Given these requirements, a series of simulations were
run to assess QPEP’s performance under adverse network
conditions. For these experiments, losses are expressed in the
form of “Packet Loss Rates” (PLR) between the satellite and
the customer’s satellite terminal. This represents the probability
that any given DVB-S encapsulated packet is irrecoverably cor-
rupted in transmission. Measuring “typical” PLRs in satellite
networks is a deceptively complex task as deﬁnitions of both
“packet” and “loss” are closely tied to the speciﬁc process by
which IP transmissions are framed and fragmented by satellite