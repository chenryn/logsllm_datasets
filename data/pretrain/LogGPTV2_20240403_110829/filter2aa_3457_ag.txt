### 使用 spunnel_local x64 运行代理并将其隧道回 Core Impact

我们通常在可访问互联网的基础设施上使用 Cobalt Strike，而 Core Impact 通常安装在本地 Windows 虚拟机上。因此，我们开发了 spunnel_local 工具。建议您在同一台安装了 Core Impact 的 Windows 系统上运行 Cobalt Strike 客户端。在这种设置下，您可以运行 `spunnel_local x64 127.0.0.1 9000 c:\path\to\agent.bin`。一旦连接成功，您将听到著名的 "Agent Deployed" 音频文件。

当您在目标系统上部署了 Impact 代理后，您将能够利用多种模块进行权限提升、扫描和信息收集、发起远程攻击，并通过 Beacon 连接链式其他 Impact 代理。

### 9.5 Pivot Listeners（中继监听器）

良好的操作技术要求限制从目标网络到命令与控制基础设施的直接连接数量。Pivot Listener 允许您创建一个绑定到 Beacon 或 SSH 会话的监听器。这样，您可以创建新的反向会话，而无需更多直接连接到您的命令与控制基础设施。

要设置 Pivot Listener，请转到 [beacon] -> Pivoting -> Listener…。这将打开一个对话框，您可以在其中定义一个新的 Pivot Listener。

**图 43：配置 Pivot Listener**

Pivot Listener 将绑定到指定会话的监听端口。Listen Host 值配置了您的反向 TCP 负载用于连接此监听器的地址。目前，唯一可用的负载选项是 windows/beacon_reverse_tcp。

Pivot Listeners 不会更改中继主机的防火墙配置。如果中继主机启用了基于主机的防火墙，可能会干扰您的监听器。作为操作员，您需要预见到这种情况并采取适当措施。

要移除 Pivot Listener，请转到 Cobalt Strike -> Listeners 并在那里移除监听器。如果会话仍然可达，Cobalt Strike 将发送任务以关闭监听套接字。

### 9.6 Covert VPN（隐蔽 VPN）

VPN 中继是一种灵活的流量隧道方式，不受代理中继的限制。Cobalt Strike 通过其 Covert VPN 功能提供 VPN 中继。Covert VPN 在 Cobalt Strike 系统上创建一个网络接口，并将其桥接到目标网络中。

**图 44：部署 Covert VPN**

要激活 Covert VPN，请右键点击一个被攻陷的主机，然后转到 [beacon] -> Pivoting -> Deploy VPN。选择您希望 Covert VPN 绑定的远程接口。如果没有本地接口，可以按 Add 创建一个。

选中 Clone host MAC address 使本地接口具有与远程接口相同的 MAC 地址。最安全的做法是保持此选项选中状态。

按下 Deploy 开始在目标上启动 Covert VPN 客户端。Covert VPN 需要管理员权限才能部署。

一旦 Covert VPN 接口处于活动状态，您可以像使用系统中的任何物理接口一样使用它。使用 ifconfig 配置其 IP 地址。如果目标网络中有 DHCP 服务器，您可以使用操作系统内置工具请求 IP 地址。

要管理 Covert VPN 接口，请转到 Cobalt Strike -> Interfaces。在这里，Cobalt Strike 将显示 Covert VPN 接口及其配置，以及每个接口传输和接收的字节数。

高亮显示一个接口并按下 Remove 以销毁该接口并关闭远程 Covert VPN 客户端。Covert VPN 会在重启时删除临时文件，并立即自动撤销所有系统更改。

按下 Add 以配置一个新的 Covert VPN 接口。

**图 45：设置 Covert VPN 接口**

Covert VPN 接口由网络分流器和通信通道组成，用于传输以太网帧。要配置接口，请选择一个接口名称（稍后通过 ifconfig 操作）和一个 MAC 地址。

您还必须为接口配置 Covert VPN 通信通道。Covert VPN 可以通过 UDP 连接、TCP 连接、ICMP 或 HTTP 协议传输以太网帧。TCP (Reverse) 通道让目标连接到您的 Cobalt Strike 实例。TCP (Bind) 通道让 Cobalt Strike 通过 Beacon 隧道传输 VPN。

Cobalt Strike 将根据您选择的 Local Port 和 Channel 设置并管理与 Covert VPN 客户端的通信。

Covert VPN HTTP 通道利用 Cobalt Strike 的 Web 服务器。您可以在同一端口上托管其他 Cobalt Strike Web 应用程序和多个 Covert VPN HTTP 通道。

为了获得最佳性能，建议使用 UDP 通道。UDP 通道比 TCP 和 HTTP 通道具有最少的开销。如果您需要绕过严格的防火墙，请使用 ICMP、HTTP 或 TCP (Bind) 通道。

虽然 Covert VPN 具有灵活性优势，但在某些情况下，您可能仍需要使用代理中继。Covert VPN 需要管理员权限，而代理中继不需要。Covert VPN 创建新的通信通道，而代理中继则不会。建议您最初使用代理中继，在必要时再切换到 VPN 中继。

### 10. SSH 会话

#### 10.1 SSH 客户端

Cobalt Strike 通过内置的 SSH 客户端控制 UNIX 目标。此 SSH 客户端从父 Beacon 接收任务并通过其输出路由。

使用 `ssh [target] [user] [password]` 从 Beacon 启动 SSH 会话。您也可以使用 `ssh-key [target] [user] [/path/to/key.pem]` 通过密钥进行身份验证。

这些命令运行 Cobalt Strike 的 SSH 客户端。客户端会将任何连接或身份验证问题报告给父 Beacon。如果连接成功，您将在 Cobalt Strike 显示中看到一个新的会话。这是一个 SSH 会话。右键点击此会话并按下 Interact 打开 SSH 控制台。

输入 help 查看 SSH 会话支持的命令列表。输入 help 后跟命令名称以获取有关该命令的详细信息。

#### 10.2 运行命令

shell 命令将运行您提供的命令和参数。运行命令时，SSH 会话最多会被阻塞 20 秒，之后 Cobalt Strike 会将命令放入后台。Cobalt Strike 会报告这些长时间运行命令的输出。

使用 `sudo [password] [command + arguments]` 尝试通过 sudo 运行命令。此别名要求目标系统的 sudo 支持 -S 标志。

cd 命令将更改 SSH 会话的当前工作目录。pwd 命令报告当前工作目录。

#### 10.3 上传和下载文件

upload 命令将文件上传到当前工作目录。download 命令将下载文件。使用 download 命令下载的文件可在 View -> Downloads 下查看。您也可以输入 downloads 查看正在进行的文件下载。

cancel 命令将取消正在进行的下载。

#### 10.4 点对点 C2

SSH 会话可以控制 TCP Beacon。使用 connect 命令接管等待连接的 TCP Beacon。使用 unlink 断开 TCP Beacon 会话。

转到 [session] -> Listeners -> Pivot Listener… 以设置与此 SSH 会话绑定的 Pivot Listener。这将允许此被攻陷的 UNIX 目标接收反向 TCP Beacon 会话。此选项要求 SSH 守护进程的 GatewayPorts 选项设置为 yes 或 ClientSpecified。

#### 10.5 SOCKS 中继和反向端口转发

使用 socks 命令在您的团队服务器上创建一个通过 SSH 会话转发流量的 SOCKS 服务器。rportfwd 命令也将创建一个通过 SSH 会话和 Beacon 链路路由流量的反向端口转发。

rportfwd 命令有一个注意事项：rportfwd 命令要求 SSH 守护进程绑定到所有接口。但很可能 SSH 守护进程会覆盖这一点并强制端口绑定到 localhost。您需要将 SSH 守护进程的 GatewayPorts 选项设置为 yes 或 clientspecified。

### 11. 可变形的命令与控制

#### 11.1 概述

许多 Beacon 指示符由 Malleable C2 配置文件控制。Malleable C2 配置文件包括设置和数据转换。数据转换是一个简单的程序，指定如何转换数据并将其存储在事务中。同样的程序还可以反向解释，以从事务中提取和恢复数据。

要使用自定义配置文件，您必须启动 Cobalt Strike 团队服务器并在启动时指定配置文件。

```sh
./teamserver [external IP] [password] [/path/to/my.profile]
```

每个 Cobalt Strike 实例只能加载一个配置文件。

#### 11.2 检查错误

Cobalt Strike 的 Linux 包含一个 c2lint 程序。该程序将检查通信配置文件的语法，执行一些额外的检查，并使用随机数据对您的配置文件进行单元测试。强烈建议您在将配置文件加载到 Cobalt Strike 之前使用此工具进行检查。

```sh
./c2lint [/path/to/my.profile]
```

#### 11.3 配置文件语言

创建配置文件的最佳方法是修改现有的配置文件。GitHub 上提供了几个示例配置文件：

- https://github.com/rsmudge/Malleable-C2-Profiles/

当您打开一个配置文件时，您将看到以下内容：

```c
# 这是一条注释
set global_option "value";
protocol-transaction {
    set local_option "value";
    client {
        # 自定义客户端指示符
    }
    server {
        # 自定义服务器指示符
    }
}
```

注释以 # 开头并持续到行尾。set 语句用于为选项赋值。配置文件使用 { 花括号 } 来分组语句和信息。语句总是以分号结尾。

为了帮助理解，这里是一个部分配置文件：

```c
http-get {
    set uri "/foobar";
    client {
        metadata {
            base64;
            prepend "user=";
            header "Cookie";
        }
    }
}
```

此部分配置文件定义了 HTTP GET 事务的指示符。第一条语句 set uri 为客户端和服务器在此事务中引用的 URI 赋值。此 set 语句位于 client 和 server 代码块之外，因为它适用于两者。

client 块定义了执行 HTTP GET 的客户端的指示符。在这种情况下，客户端是 Cobalt Strike 的 Beacon 负载。

当 Cobalt Strike 的 Beacon “回家”时，它会将自己的元数据发送给 Cobalt Strike。在此配置文件中，我们需要定义如何编码并将元数据嵌入到 HTTP GET 请求中。

metadata 关键字后面跟着一组语句，指定了如何转换并将元数据嵌入到我们的 HTTP GET 请求中。跟随 metadata 关键字的一组语句称为数据转换。

步骤 | 操作 | 数据
---|---|---
0. 开始 | metadata |
1. base64 | Base64 编码 | bWV0YWRhdGE=
2. prepend "user=" | 添加字符串 | user=bWV0YWRhdGE=
3. header "Cookie" | 存储到事务中 |

第一个数据转换语句说明我们将对元数据进行 base64 编码 [1]。第二个语句 prepend 将编码后的元数据前面加上字符串 user= [2]。现在我们的转换后的元数据是“user=” . base64(metadata)。第三个语句说明我们将把转换后的元数据存储到名为 Cookie 的客户端 HTTP 头中 [3]。就这样。

Beacon 及其服务器都使用配置文件。在这里，我们从 Beacon 客户端的角度读取了配置文件。Beacon 服务器将使用相同的信息并反向解释。假设我们的 Cobalt Strike Web 服务器收到了一个 URI 为 /foobar 的 GET 请求。现在，它想从事务中提取元数据。

步骤 | 操作 | 数据
---|---|---
0. 开始 |
1. header "Cookie" | 从事务中恢复 | user=bWV0YWRhdGE=
2. prepend "user=" | 删除前 5 个字符 | bWV0YWRhdGE=
3. base64 | Base64 解码 | metadata

header 语句告诉服务器从何处恢复转换后的元数据 [1]。HTTP 服务器负责解析客户端的头部。接下来，我们需要处理 prepend 语句。要恢复转换后的数据，我们将 prepend 解释为删除前 X 个字符 [2]，其中 X 是我们添加的原始字符串的长度。最后，我们解释最后一个语句 base64。我们在转换元数据之前使用了 base64 编码函数，现在我们使用 base64 解码来恢复元数据 [3]。

配置文件解释器执行完这些逆向语句后，我们将得到原始元数据。

#### 数据转换语言

数据转换是一系列转换和传输数据的语句。数据转换语句包括：

语句 | 操作 | 逆向操作
---|---|---
append "string" | 添加 "string" | 删除最后 LEN("string") 个字符
base64 | Base64 编码 | Base64 解码
base64url | URL 安全的 Base64 编码 | URL 安全的 Base64 解码
mask | 使用随机密钥进行 XOR 掩码 | 使用相同的随机密钥进行 XOR 掩码
netbios | NetBIOS 编码 'a' | NetBIOS 解码 'a'
netbiosu | NetBIOS 编码 'A' | NetBIOS 解码 'A'
prepend "string" | 前缀 "string" | 删除前 LEN("string") 个字符

数据转换可以是任意数量的这些语句，以任意顺序组合。例如，您可以选择对要传输的数据进行 NetBIOS 编码，添加一些信息，然后对整个包进行 Base64 编码。

数据转换总是以终止语句结束。一个转换中只能使用一个终止语句。该语句告诉 Beacon 及其服务器将转换后的数据存储在事务中的哪个位置。

有四个终止语句：

语句 | 作用
---|---
header "header" | 将数据存储在 HTTP 头中
parameter "key" | 将数据存储在 URI 参数中
print | 将数据作为事务主体发送
uri-append | 添加到 URI

header 终止语句将转换后的数据存储在 HTTP 头中。parameter 终止语句将转换后的数据存储在 HTTP 参数中。此参数始终作为 URI 的一部分发送。print 语句将转换后的数据作为事务主体发送。

对于 http-get.server.output、http-post.server.output 和 http-stager.server.output 块，预期的终止语句是 print。您可以使用 header、parameter、print 和 uri-append 终止语句用于其他块。

如果您在 http-post.client.output 中使用 header、parameter 或 uri-append 终止语句，Beacon 会将其响应拆分为合理的长度以适应事务的这一部分。

这些块及其发送的数据将在后续章节中描述。

#### 字符串

Beacon 的配置文件语言允许您在多个地方使用“字符串”。一般来说，字符串按原样解释。然而，有一些特殊值可以在字符串中使用：

值 | 特殊值
---|---
"\n" | 换行符
"\r" | 回车符
"\t" | 制表符
"\u####" | Unicode 字符
"\x##" | 一个字节（例如，\x41 = 'A'）
"\\\\" | \