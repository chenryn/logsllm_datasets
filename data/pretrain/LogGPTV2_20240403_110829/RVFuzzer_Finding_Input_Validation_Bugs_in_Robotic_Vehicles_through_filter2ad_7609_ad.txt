valid range of a control parameter is correct, any value outside
the speciﬁed range should be caught and rejected by the con-
trol program. If the implementation of the control program
fails to enforce that, an out-of-range parameter value may
432    28th USENIX Security Symposium
USENIX Association
Table 1: Summary of input validation bugs found by RVFUZZER
(RIB and RSB denote the number of range implementation and range
speciﬁcation bugs, respectively).
Module
Sub-module
PX4
ArduPilot
RIB RSB RIB RSB
1
2
1
1
3
1
5
1
5
1
6
0
3
1
2
2
1
36
1
1
1
1
0
1
3
1
3
2
3
3
0
2
4
0
1
27
1
1
1
0
0
1
3
1
3
2
3
3
0
0
0
0
1
20
0
1
0
0
0
0
0
0
0
0
0
0
3
1
0
0
1
6
Controller
x, y-axis position
x, y-axis velocity
z-axis position
z-axis velocity
z-axis acceleration
Roll angle
Roll angular rate
Pitch angle
Pitch angular rate
Yaw angle
Yaw angular rate
Motor
Sensor
Inertia sensor
Mission
x, y-axis velocity
z-axis velocity
z-axis acceleration
Roll, Pitch
Total
-
be maliciously provided and accepted by the program, caus-
ing control state deviations. This is the nature of the range
implementation bug which, based on our observation, arises
from a lack of or an incorrect implementation of range check
logic in the program. To discover range implementation bugs,
RVFUZZER employs the one-dimensional mutation strategy.
It mutates the value of each target parameter and issues the
parameter-change GCS command with the mutated value to
the control program. If the Control Instability Detector re-
ports a control state deviation, RVFUZZER will report a range
implementation bug associated with the target parameter.
Range Speciﬁcation Bugs Ideally, the speciﬁed valid range
of a parameter should correctly scope the value of the parame-
ter. Unfortunately, this turns out not always the case. To reveal
such problems, RVFUZZER ﬁrst performs one-dimensional
mutation and then performs multi-dimensional mutation on
each target parameter, determining its invalid value range that
will cause control state deviation. We observe that for some
control parameters, their valid value ranges are erroneously
speciﬁed by developers, allowing dangerous values in the
speciﬁed – and subsequently implemented – ranges. This is
the nature of the range speciﬁcation bug. Based on our analy-
sis, such bugs exist because a control program enforces a ﬁxed
valid value range for a control parameter, without considering
three critical factors: (1) the difference between hardware
models and conﬁgurations, (2) inter-dependencies between
control parameters, and (3) impact of environmental factors.
RVFUZZER reveals that the range of the valid input values
of a target parameter tends to “shrink” under these factors,
giving rise to range speciﬁcation bugs.
6.1.2 Detection of Input Validation Bugs
Table 1 summarizes the range implementation bugs (RIB) and
range speciﬁcation bugs (RSB) discovered by RVFUZZER in
ArduPilot and PX4. The detailed list of the 63 control parame-
ters that are affected by these bugs is presented in Appendix B.
For coherent presentation in Table 1, the control parameters
in each of the two control programs are categorized into three
modules (i.e., controller, sensor, and mission) and further into
their sub-modules. Table 1 shows that RVFUZZER detected
a total of 89 input validation bugs (42 bugs in ArduPilot and
47 bugs in PX4). We note that some of the control parameters
are associated with both range implementation and the range
speciﬁcation bugs. Hence, the total number of input validation
bugs (89) is higher than the total number of affected control
parameters (63).
We highlight that only two of the 89 bugs discovered by
RVFUZZER were detected and correctly patched by the de-
velopers before we reported our results to them. Out of the
remaining 87 bugs, the developers have so far independently
conﬁrmed 8 bugs and patched 7 of them. The remaining bugs
are under review. The delayed response of the developers
brings forth an important point: Compared to the traditional
“syntactic” bugs (e.g., buffer overﬂow), discovering, validating
and patching input validation bugs require more time and ef-
fort. This is because the exploitability of each input validation
bug must be fully veriﬁed under a spectrum of vehicle con-
ﬁgurations and operating environments. In such a scenario,
RVFUZZER can be utilized by developers as a helpful tool to
automate the discovery and conﬁrmation of input validation
bugs.
6.1.3
Impact of Input Validation Bugs
We now detail the physical impacts (on the vehicle’s opera-
tion) of the attacks that exploit the bugs found by RVFUZZER.
We consider four levels of physical impact: crash, trajectory
deviation, unstable movement, and frozen control states. Ap-
pendix B presents possible physical impact(s) of attacks that
exploit each of the vulnerable control parameters. Here, we
summarize the results by analyzing the impact on the modules
of the control program. Speciﬁcally, we present the causality
of the bugs in a bottom-up fashion and assess its impact on
the control state deviation which is detected by RVFUZZER’s
Control Instability Detector.
Controller Module Among the control parameters related
to the controller module, RVFUZZER discovered 27 range im-
plementation bugs and 1 range speciﬁcation bug in ArduPilot,
and 20 range implementation bugs and 19 range speciﬁcation
bugs in PX4 (Table 1). These bugs can be used to maliciously
set invalid parameter values or exploit environmental factors,
which would directly affect the primitive controllers and cor-
rupt the control states in the 6DoF. For example, if one of
the control parameters related to the z-axis velocity is set to
USENIX Association
28th USENIX Security Symposium    433
a value in the invalid range due to an input validation bug,
the manipulated parameter will corrupt the reference state of
the (downstream) z-axis acceleration. As a result, the z-axis
acceleration controller will attempt to bring its observed state
closer to the corrupted reference state, which will cause con-
trol instability of the vehicle. Such instability may eventually
lead to a crash.
Sensor Module For this module, while RVFUZZER found
3 range implementation bugs and 3 range speciﬁcation bugs
in ArduPilot, it did not ﬁnd any input validation bug in PX4
(Table 1). We note that the vulnerable control parameters of
the sensor module are related to either a sensor calibrator
or a sensor ﬁlter for noise/disturbance. While the calibrator
compensates for manufacturing errors in sensors and adjusts
the observed state accordingly, the ﬁlter smooths out the sen-
sor values and helps the controllers in robustly responding
to physical interactions [73]. Hence, if an invalid value is
assigned to a control parameter related to a sensor calibrator/-
ﬁlter due to an input validation bug, the primitive controller
that consumes the sensor values will compute a corrupted ob-
served state. Such corruption will also propagate to its output
reference state, and from there to other dependent primitive
controllers, leading to unstable movement of the vehicle.
Mission Module For this module, RVFUZZER discovered
6 range implementation bugs and 2 range speciﬁcation bugs
in ArduPilot, and 7 range implementation bugs and 1 range
speciﬁcation bug in PX4 (Table 1). Recall that this module
is responsible for setting the mission parameters (e.g., speed
and tilting angles) which deﬁne or adjust the vehicle’s mis-
sion. However, if a parameter related to the mission module
is manipulated with an invalid value by exploiting an input
validation bug, the corresponding controllers will generate
misguided reference states. Such mission corruption will mis-
lead one or more of the 6DoF controllers and prevent the
vehicle from fulﬁlling its intended mission (e.g., not moving
to the intended destination or at the intended speed), even if
the vehicle does not experience any immediate danger.
6.2 Effectiveness of Input Mutation
RVFUZZER employs the control-guided input mutation strat-
egy to generate control parameter value inputs and set environ-
mental factors. We evaluate the effectiveness of this mutation
strategy in enabling efﬁcient discovery of input validation
bugs.
ered a total of 63 range implementation bugs: 36 bugs in
ArduPilot and 27 bugs in PX4.
To detect the incorrectly speciﬁed ranges of the param-
eters and ﬁnd the range speciﬁcation bugs, RVFUZZER
employs one-dimensional mutation followed by the multi-
dimensional mutation strategy. We demonstrate the effective-
ness of RVFUZZER’s mutation strategies in discovering the
range speciﬁcation bugs in Fig. 4, which presents the valid
and invalid value ranges (detected using one-dimensional and
multi-dimensional mutation) for the affected control parame-
ters.
One-dimensional Mutation RVFUZZER discovered a total
of 26 range speciﬁcation bugs using one-dimensional muta-
tion: 6 bugs in ArduPilot and 20 bugs in PX4 (Fig. 4). For
example, for parameter MC_TPA_RATE_P in PX4, the speci-
ﬁed range was between 0 and 1, and the default value was 0.
However, RVFUZZER detected control state deviations with
values between 0.1 and 1, and hence found 90% of the values
in the speciﬁed range belonging to the invalid range. We note
that almost 100% of the values in the speciﬁed range of the
three parameters, MC_PITCHRATE_FF, MC_ROLLRATE_FF and
MC_YAWRATE_FF, in PX4 are invalid. This is because, while
each of these parameters can be independently conﬁgured
with a wide range of input values, there is a smaller range
of values that are valid when the other parameters take their
default values.
Multi-dimensional Mutation
the multi-
dimensional mutation further expands the invalid range of the
target parameter to include the additional values that cause
control state deviation under speciﬁc, non-default settings of
the other parameters. In Fig. 4, we observe that the multi-
dimensional mutation expands the invalid ranges of 10 out of
26 range speciﬁcation bugs found using one-dimensional mu-
tation. For instance, RVFUZZER found that the invalid range
of the MC_ROLL_P parameter in PX4 was expanded from 1.7%
to 51.7% when multi-dimensional mutation was employed.
We highlight that for some parameters, RVFUZZER reported
a signiﬁcant increase of invalid range with multi-dimensional
mutation. In particular, compared to the invalid ranges de-
tected using one-dimensional mutation, the invalid ranges of
the MC_PITCHRATE_MAX and MC_ROLLRATE_MAX parameters
in PX4 increased from 0.4% to 88.1% and from 0.1% to
87.9%, respectively. These results demonstrate that the multi-
dimensional mutation strategy can discover invalid values
of control parameters with stronger awareness of the inter-
parameter dependencies (discussed further in Section 8).
Recall
that
6.2.1 Control Parameter Mutation
6.2.2 Environmental Factor Mutation
RVFUZZER discovers the range implementation bugs using
the one-dimensional mutation strategy which detects the erro-
neous implementation of the parameter’s range check logic.
Through the extensive black-box-based (i.e., without source
code) testing of the control parameters, RVFUZZER discov-
RVFUZZER further found that the invalid ranges of some con-
trol parameters expand when environmental conditions are