### Client Authentication
Clients can authenticate using either SAML or JWT assertions. Additionally, we can cryptographically bind OAuth 2.0 access/refresh tokens and authorization codes to a specific TLS channel, preventing their export and misuse elsewhere. The IETF Token Binding working group has developed several specifications to address this aspect.

### Token Binding Protocol
The Token Binding Protocol, discussed in Chapter 11, allows client/server applications to create long-lived, uniquely identifiable TLS bindings that span multiple TLS sessions and connections. This enables applications to cryptographically bind security tokens to the TLS layer, thereby preventing token export and replay attacks. To protect privacy, Token Binding identifiers are only conveyed over TLS and can be reset by the user at any time.

### OAuth 2.0 Token Binding
The OAuth 2.0 Token Binding specification, also covered in Chapter 11, defines how to apply Token Binding to access tokens, authorization codes, and refresh tokens. This cryptographically binds OAuth tokens to a client’s Token Binding key pair, ensuring that the possession of these keys is verified on the TLS connections over which the tokens are intended to be used. This approach protects OAuth tokens from man-in-the-middle, token export, and replay attacks.

### Open Redirector
An open redirector is an endpoint hosted on the resource server (or the OAuth 2.0 client application) that accepts a URL as a query parameter in a request and then redirects the user to that URL. An attacker can modify the `redirect_uri` in the authorization grant request from the resource server to the authorization server to include an open redirector URL pointing to an endpoint they control. To do this, the attacker must intercept the communication channel between the victim’s browser and the authorization server or the resource server (see Figure 14-3).

Once the request reaches the authorization server and after authentication, the user will be redirected to the provided `redirect_uri`, which carries the open redirector query parameter pointing to the attacker’s endpoint. The authorization server can check against a pre-registered URL to detect any modifications to the `redirect_uri`. However, some authorization server implementations may only verify the domain part of the URL, ignoring exact one-to-one matches. As a result, changes to the query parameters may go unnoticed.

When the user is redirected to the open redirector endpoint, it will again redirect the user to the value (URL) defined in the open redirector query parameter, leading them to the attacker’s endpoint. In this request to the attacker’s endpoint, the HTTP Referer header could carry confidential data, including the authorization code, which is sent to the client application by the authorization server as a query parameter.

#### Preventing Open Redirector Attacks
- **Strict Validation**: Enforce strict validations at the authorization server against the `redirect_uri`. This can be an exact one-to-one match or a regex match.
- **Domain Validation**: Validate the redirecting URL at the open redirector and ensure you only redirect to domains you own.
- **JWT Secured Authorization Request (JAR) or Pushed Authorization Requests (PAR)**: Use JAR or PAR, as discussed in Chapter 4, to protect the integrity of the authorization request, preventing the attacker from modifying the request to include the open redirector query parameter in the `redirect_uri`.

### Code Interception Attack
A code interception attack can occur in a native mobile app. OAuth 2.0 authorization requests from native apps should be made through external user agents, primarily the user’s browser. The OAuth 2.0 for Native Apps specification, covered in Chapter 10, explains the security and usability reasons for this and how native apps and authorization servers can implement this best practice.

In a mobile environment, single sign-on is achieved by launching the system browser from the app and initiating the OAuth 2.0 flow from there. Once the authorization code is returned to the `redirect_uri` (from the authorization server) on the browser, it should be passed to the native app. This is handled by the mobile OS, and each app must register for a URL scheme with the mobile OS. When a request comes to that particular URL, the mobile OS passes control to the corresponding native app. However, if multiple apps are registered for the same URL scheme, a malicious app could intercept the authorization code. Since many mobile apps embed the same client ID and client secret for all instances, an attacker who knows the client ID and client secret and has access to the authorization code can obtain an access token on behalf of the end user.

**PKCE (Proof Key for Code Exchange)**, discussed in detail in Chapter 10, was introduced to mitigate such attacks. Here’s how it works:
1. The OAuth 2.0 client app generates a random number (code_verifier) and computes its SHA256 hash, known as the code_challenge.
2. The client app sends the code_challenge along with the hashing method in the authorization grant request to the authorization server.
3. The authorization server records the code_challenge (against the issued authorization code) and responds with the code.
4. The client sends the code_verifier along with the authorization code to the token endpoint.
5. The authorization server computes the hash of the provided code_verifier and matches it against the stored code_challenge. If it does not match, the request is rejected.

With this approach, a malicious app cannot exchange the authorization code for an access token without knowing the value of the code_verifier.

### Security Flaws in Implicit Grant Type
The OAuth 2.0 implicit grant type, now obsolete, was commonly used by single-page applications and native mobile apps. The recommendation is to use the authorization code grant type instead. Several security flaws have been identified in the implicit grant type, and the IETF OAuth working group officially announced that applications should no longer use it:
- **Access Token Exposure**: With the implicit grant type, the access token is returned as a URI fragment and remains in the web browser location bar. Since the browser history includes the location bar, anyone with access to the browser history can steal the tokens.
- **HTTP Referer Header Leakage**: Since the access token remains in the web browser location bar, API calls initiated from the corresponding web page will carry the entire URL, including the access token, in the HTTP Referer header. This allows external API endpoints to discover and potentially misuse the access token.

### Google Docs Phishing Attack
In May 2017, an attacker used a fake OAuth 2.0 app called "Google Docs" to launch a massive phishing attack targeting Google users, particularly media companies and PR agencies. The attack spread quickly before the app was removed by Google.

The attacker exploited step 3 in the OAuth 2.0 authorization grant flow by tricking users with a familiar application name and an email template similar to Google's. While careful users might have noticed something amiss, many did not.

This incident was neither a flaw in the OAuth 2.0 protocol nor in Google's implementation but rather a classic example of phishing. To prevent such attacks, Google could:
- **Filter Known Names**: Prevent app developers from using well-known names to trick users.
- **Display Domain Name**: Show the domain name prominently on the consent page to provide users with a clear indication of where they are being directed.
- **Approval Process**: Implement an approval process for new OAuth applications, similar to Facebook’s, to ensure they meet security standards.
- **Whitelist Control**: Give domain administrators more control to whitelist applications that domain users can access, preventing unauthorized access to company data.

### Summary
- **OAuth 2.0 Standard**: OAuth 2.0 is the de facto standard for access delegation, with a large ecosystem and high adoption rates.
- **Security Best Practices**: Always follow security best practices when using OAuth, and use proven libraries and products.
- **Threat Model and Security Considerations**: The OAuth 2.0 Threat Model and Security Considerations (RFC 6819) and the OAuth 2.0 Security Best Current Practice document provide additional security considerations.
- **Financial-grade API (FAPI)**: The FAPI working group under the OpenID Foundation has published guidelines for using OAuth 2.0 securely in financial-grade applications.

### Patterns and Practices
#### Direct Authentication with the Trusted Subsystem
In a medium-scale enterprise with multiple APIs, employees access these APIs via a web application behind the company firewall. User data are stored in Microsoft Active Directory, and the web application authenticates users directly with AD. The web application passes the logged-in user’s identifier to the back-end APIs to retrieve user-specific data.

**Solution**: Use a direct authentication pattern where the web application acts as a trusted subsystem. Since both the web application and the APIs are in the same trust domain, mutual Transport Layer Security (mTLS) is the best way to secure APIs. All requests from the web application are secured with mTLS, ensuring that only the web application can access the APIs.

#### Single Sign-On with Delegated Access Control
In a similar setup, the web applications need to access back-end APIs on behalf of the logged-in user. Users authenticate through a SAML 2.0 identity provider, and the web applications need to exchange the SAML token for an OAuth 2.0 access token.

**Solution**: Use the SAML grant type for OAuth 2.0. The web application exchanges the SAML token for an OAuth 2.0 access token, which it uses to access back-end APIs. The lifetime of the access token must match the SAML token. If the SAML token expires, the web application must redirect the user to the SAML 2.0 identity provider to get a new SAML token and exchange it for a new access token.

#### Single Sign-On with Integrated Windows Authentication
In a scenario where all users are in a Windows domain and should not be asked to provide credentials for other applications, extend the SSO with Delegated Access Control pattern by using Integrated Windows Authentication (IWA) to secure the SAML 2.0 identity provider. This ensures automatic authentication when users are redirected to the identity provider.

#### Identity Proxy with Delegated Access Control
For a setup where both company employees and trusted partners access APIs, extend the SSO with Delegated Access Control pattern to support multiple identity providers. The authentication mechanism at the SAML 2.0 identity provider must be adjusted to handle users from different domains.