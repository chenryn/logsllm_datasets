（package）里，而包可用来限制相应文件所定义的符号的有效范围。层次式的包名一经
定义就等于定义了相应的目录结构。例如，包的名称被定义为a.b.c就等于定义了
a/b/c的目录结构，而a.b.c包中所声明的程序代码将会被编译成存放在a/b/c目录里的
类文件。这意味着，make用来关联二进制文件与其源文件的标准算法在此处派不上用
171
---
## Page 182
172
第九章
场。不过，这也意味着，不必使用-o选项来指出输出文件应该存放在何处，指出输出
文件树的根目录（对所有文件而言都一样）就够了。这表示，相同的命令行调用方式就
可以编译来自不同目录的源文件。
标准的Java编译器都支持@filename的语法，这使得命令行参数可以从一个文件中被
读取。与包的功能并用时，这么做相当有用。因为这意味着，你只要运行一次Java编译
器就可以编译项目中所有的Java源代码。这会使得效能有较大的提升，因为加载和运行
编译器所花的时间基本上就是编译时间。
总结如下：通过适当的命令行，在2.5-GHzPentium4的处理器上编译400000行的Java
源代码，大约需要3分钟的时间：编译等效的C++应用程序却需要数小时。
make的替代方案
正如之前提到的，Java开发者社群非常喜欢采用新的技术。接下来让我们对其中两个
一Ant和IDE，来跟make进行比较。
Ant
Java社群非常活跃，新工具和新API的产生速度令人印象深刻。Ant便是这些新工具中
的一个，这个编译工具企图在Java开发过程中取代make的地位。如同make一样，Ant
会使用一个描述文件来指出项目的工作目标与必要条件：与make不同的是，Ant是用
Java写成的，而且Ant编译文件是用XML写成的。
让我们来感觉一下XML格式的编译文件的样子，如下的内容是摘录自Ant编译文件：
compilesthe sourcecode">
---
## Page 183
Java
173
如你所见，工作目标是由这个XML标记定义的。每个工作目标都具有一个
名称和依存列表，分别是由属性和定义的。实际的编译动作是由
Ant的任务（task）执行的。Ant的每项任务是由Java写成，而且会被绑定到一个XML
标记。例如，创建目录的任务是由标记来指定的，这会触发Java方法
Mkdir.execute的执行动作，最后会调用File.mkair。Ant会尽量以JavaAPI来实现
所有任务。
一个供make使用的等效编译文件将会像下面这样：
#编译源代码
build:S(all_javas)prepare check_for_optional_packages
$（MKDIR)-p $（build.dir)$(build.classes）$(build.lib)
$(JAvAC)-sourcepath $(java.dir)
-d $(build.classes)
$(debug)
$(deprecation)
-target S(javac.target)
S（optimize)
>Se
（p.--dod.-（a）
S（TAR）-C-f--T-IS（TAR)-CS（bui1d.classes）-x-f-
这个makefile片段使用了本书尚未介绍的技术，简单地说，就是在必要条件all_javas中
包含需要编译的，java文件列表。、和等Ant任务还可以用来
进行依存关系检查。也就是说，如果目录已经存在，mkdir并不会被执行。同样地，如
果Java类文件的时间戳在源文件（的时间戳）之后，就不会对源文件进行编译的动作。
然而，基本上，make的脚本所执行的是相同的功能。Ant还提供了一个通用的任务，称
为，可用来运行一个本地程序。
Ant是一个精明且新颖的编译工具，然而，有几个相关的议题值得我们加以探讨：
·尽管Ant在Java社群中广受欢迎，但它在其他地方却默默无闻。此外，如果说它
普及的程度会远超过Java似乎颇令人怀疑（基于此处所列的理由）。另一方面，make
一贯被广泛应用在各种领域中，包括软件开发、文件处理与排版以及网站与工作站
的维护等。需要在不同的软件系统上工作的人都知道make是个重要的工具。
---
## Page 184
第九章
尽管以Java为基础的工具适合选择XML作为描述语言，但是（对许多人来说）XML
的读写并不会特别容易。要找到令人满意的XML编译器并不容易，而且通常无法
跟现有的工具有很好的集成（如果我的集成开发环境没有提供令人满意的XML编
译器，我就得放弃自己的IDE，另外找一个独立的工具）。正如你在之前的例子中
所看到的，相比较于make和shell的语法，XML和它的Ant方言似乎太长了。
编写Ant编译文件的时候，你还必须应付另一个间接的层次。Ant的任
务并不会为你的系统调用底层的mkdir程序。事实上，它会执行java.io.File
类中的mkdir（）方法。这可能是也可能不是你想要的结果。基本上，一个使用过
一般工具的程序设计人员应该会对此感到怀疑，而且会去查看Ant文件、Java文
件或者Ant的源代码。此外，为了调用Java编译器，我不得不查看几十个或更多
个陌生的xML属性，比如、等，这些在编译器的手册中都没
有提到。相对来说，make脚本完全透明，即为了查看命令实际的行为，我通常会
将命令直接键人在一个shell中。
毫无疑问地，Ant具有可移植性，make也是如此。如第七章所示，编写具可移植
性的makefile，就如同编写具可移植性的Ant描述文件一样，需要具备相关的经验
和知识。程序员编写具可移植性的makefile已经有20年的历史了。此外，Ant的
说明文件提到了一些可移植性的问题：Unix上的符号链接，Windows上的长文件
名，Apple操作系统方面只支持MacOSX，而且不保证会支持其他的平台。而且，
一些基本的操作，像为文件设定执行位，无法通过JavaAPI来进行，必须使用一
个外部的程序。可移植性对Ant来说并不容易也不完全。
Ant工具无法准确地说明它正在做什么。因为Ant的任务通常不是通过运行shell
脚本来实现的，所以要Ant工具显示它的动作很困难。通常，其所显示的信息组成
自任务的作者在各个print语句中所加入的自然语言，用户无法通过shell来执行
这些被显示出来的语句。相对而言，make所输出的每一行通常就是命令行，用户
可将它转贴到一个shell来重新执行。这意味着，Ant的编译动作对想要了解编译
过程和工具的开发人员来说没有什么作用。而且，开发人员也不可能随意地通过键
盘再利用一个任务的某些部分。
最后而且是最重要的，Ant需要你将自已对编译方面的思考模式从脚本式的程序语
言转移至非脚本式的程序语言。Ant的任务是用Java写成的，如果某个任务不存
在或者不是你想要的，那么你不是必须用Java编写自已的任务，就是必须使用
这个任务。（当然，如果你经常需要用到这个任务，使用make并
利用它的宏、函数以及更简洁的语法反而会比较好。）
另一方面，脚本语言之所以大行其道，就是因为它解决了此类问题。make已经存
活了几乎30年，而且即使不加以扩充也能使用在最复杂的情况下。当然，在这30
年间它已经做了不少扩充，其中有许多都是GNUmake所构想和实现的。
---
## Page 185
Java
175
尽管Ant是一个广受Java社群欢迎的工具，不过在你着手新项目之前应该谨慎考虑Ant
是否适合使用在你的开发环境里。希望这一章能够向你证明，make也能符合你的Java
编译系统的需要。
IDE
大多数的Java开发人员都会使用集成开发环境（IntegratedDevelopmentEnvironment，
简称IDE），它（通常）会将编辑器、编译器、调试器以及程序代码浏览器集成到一个图
形环境里。实际的例子有开放源代码的Eclipse（http://www.eclipse.org）、EmacsJDEE
（http://jdee.sunsite.dk）及商业性质的SunJavaStudio（http://wwws.sun.com/software/
必要文件以及让应用程序能够运行”的项目编译过程。
如果IDE能够支持以上这些功能，为何我们应该考虑使用make？最明显的理由就是可
移植性。如果需要在另一个平台上编译项目，当我们实际移植到新的平台上时，可能会
导致编译失败的结果。尽管Java本身具跨平台的可移植性，不过它的支持工具通常做不
到。举例来说，如果项目的配置文件可能包含Unix或Windows风格的路径，那么当你
在其他的操作系统上运行编译程序的时候，这些路径可能会产生错误。使用make的第
二个理由是它支持自动编译的功能。有些IDE支持批编译的功能，有些则不支持；支持
此功能的程度也各不相同。最后，IDE对编译功能的支持通常很有限。如果你希望自定
义发行版目录结构、从外部的应用程序集成辅助说明文件、支持自动测试功能以及处理
分支和平行的开发线，你可能会发现IDE无法满足你的需要。
以我自己的经验来说，我发现IDE非常适合小规模或局部的开发工作，不过make可以
代码，并为产品的编译和发行编写一个makefile。开发期间我会使用该IDE将项目编译
成适合调试的状态。但如果源代码产生器的输人文件有许多遭到变更或修改，我就会运
行makefile。就我使用过的IDE来说，它们对外部的源代码产生工具的支持都不是很好。
通常，一个IDE的编译结果并不适合发布给内部或外部的客户使用。要进行此类工作时
我都会使用make。
一个通用的Javamakefile
例9-1可以看到一个通用的Javamakefile，本章稍后将会说明它的每一个部分。
例9-1：一个通用的Javamakefile
Java项目的通用makefile
VERSION_NUMBER:=1.0
---
## Page 186
176
第九章
文件树的位置
SOURCE_DIR
OUTPUT_DIR
:=Src
:=classes
#Unix工具
AWK
:=awk
FIND
:=/bin/find
MKDIR
:=mkdir-p
RM
=rm-rf
SHELL
：=/bin/bash
支持工具的路径
JAVA_HOME
：=
/opt/j2sdk1.4.2_03
AXIS_HOME
:=/opt/axis-1_1
TOMCAT_HOME
1=
/opt/jakarta-tomcat-5.0.18
XERCES_HOME
1=
/opt/xerces-1_4_4
JUNIT_HOME
:=/opt/junit3.8.1
#Java工具
JAVA
:=$(JAVA_HOME)/bin/java
JAVAC
：=S(JAVA_HOME)/bin/javac
JFLAGS
1=
-Sourcepath $(SOURCE_DIR)
-dS(OUTPUT_DIR)
-source 1.4
JVMFLAGS
:=-ea
-esa
-xfuture
JVM
：=S（JAVA)S（JVMFLAGS)
JAR
：=$(JAVA_HOME）/bin/jar
JARFLAGS
:=cf
JAVADOC
：=S(JAVA_HOME)/bin/javadoc
JDFLAGS
:=
-sourcepath S(SOURCE_DIR)
-dS(OUTPUT_DIR)
-1ink http://java.sun.com/products/jdk/1.4/docs/api
Jars
COMMONS_LOGGING_JAR
：=$（AXIS_HOME)/1ib/commons-1ogging.jar
LOG4J_JAR
:=$（AXIS_HOME)/1ib/1og4j-1.2.8.jar
XERCES_JAR
：= $（XERCES_HOME)/xerces.jar
JUNIT_JAR
：=S（JUNIT_HOME)/junit.jar
#设定Java classpath
claSS_path :=OUTPUT_DIR
XERCES_JAR
COMMONS_LOGGING_JAR
LOG4J_JAR
JUNIT_JAR
space -A blank space
space :=S（empty)S（empty)
---
## Page 187
Java
177
#S(call build-classpath,variable-list)
define build-classpath
$(strip
g：sqnsed
S（subst:.:,
$(strip
s（foreach j.$1,s（cal1 get-file,Sj):)))})
endef
#S(callget-file,variable-name)