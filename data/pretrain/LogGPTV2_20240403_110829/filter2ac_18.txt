### Title: BlackHat EU-21: From Coordinated Disclosure to Cooperative Vulnerability Research in Critical Software Stacks

When dealing with critical software stacks, such as embedded network libraries or real-time operating systems, it may be time to reconsider how researchers approach vendors when disclosing vulnerabilities. Shouldn't we start collaborating with them from the very beginning of our research, giving them the opportunity to learn and assist us in identifying more vulnerabilities? What is needed is a more collaborative relationship between the security research community and those developing and deploying critical software components.

The current status quo often involves conflicting parties attempting to become friends, typically during the disclosure phase, facilitated by an intermediary. Unlike traditional vulnerabilities found in operating systems or application stacks, mitigating vulnerabilities in critical software components can be particularly challenging. Patching equipment with lifespans of 10-20 years is not always feasible. In many cases, responsible disclosure is delayed or even canceled due to the potential impact on operations.

While this approach may not be scalable for mainstream software, where continuous security testing (e.g., fuzzing) and auto-updates are effective, recent research has shown that the most impactful vulnerabilities in critical software components require specialized tooling and significant research effort. This process cannot be easily streamlined, and doing so could result in the most critical bugs remaining undetected.

Therefore, as researchers, we should focus on a few, but highly impactful targets, as early as possible in the Software Development Life Cycle (SDLC). Establishing strong communication with developers is crucial, to the extent that they can share their insights on the weakest points of their software. In essence, the attacker model in vulnerability research should consider a better-informed and thus more powerful adversary than what might exist in reality.

By adopting a "shift left" approach, we can foster a more cooperative and proactive environment, ultimately leading to more secure and resilient critical software components.