New Deployment Pending Transition
2.  PRIMARY 部署接下来将转换为运行计数 1，这意味着容器的新版本将与现有容器一起运行:
![](img/74aa02ea-9b46-46cb-8854-3b7b1a8ffecd.png)
New Deployment Running Transition
3.  此时，现有容器现在可以停止，因此您应该会看到活动部署运行计数降至零:
![](img/619fe851-38df-4e92-bde6-6371ee013880.png)
Old Deployment Stopping Transition
4.  活动部署从“部署”选项卡中消失，滚动部署完成:
![](img/3750bf97-f2c1-4d44-a110-f3952a961157.png)
Rolling Deployment Completion
至此，我们已经成功执行了一个 ECS 服务的滚动更新，值得指出的是，新的动态端口映射配置意味着您的 Nginx web 服务器不再监听端口 80 与外部世界的连接，而是监听由 ECS 容器实例动态选择的端口。
您可以通过尝试浏览到您的 Nginx 网络服务器公共 IP 地址来验证这一点，这将导致连接失败，因为网络服务器在端口 80 上不再运行。如果您选择了**简单网络** ECS 服务的**任务**选项卡，您可以单击该任务来了解我们的网络服务器正在监听哪个端口。
展开如下所示的 Nginx 容器后，您可以看到，在这种情况下，ECS 容器实例主机上的端口`32775`映射到 Nginx 容器上的端口`80`，您将无法从互联网访问该端口，因为分配给 ECS 容器实例的安全组仅允许端口`80`上的入站访问。
For dynamic port mapping to be useful, you need to associate your ECS services with an application load balancer, which will automatically detect the dynamic port mapping of each ECS service instance and load balance incoming requests to a static port defined on the load balancer to each ECS service instance. You will learn more about this in later chapters.
![](img/c27fd937-e1b2-4a91-8300-c174222ad400.png)
ECS Service Dynamic Port Mapping
# 正在运行 ECS 任务
我们已经看到了如何将长期运行的应用部署为 ECS 服务，但是如何使用 ECS 运行临时任务或短期容器呢？答案当然是创建一个 ECS 任务，该任务通常用于运行临时任务，例如运行部署脚本、执行数据库迁移，或者执行计划的批处理。
尽管 ECS 服务本质上是长时间运行的 ECS 任务，但 ECS 确实将您自己创建的 ECS 任务与 ECS 服务区别开来，如下表所述:
| 场景/特征 | ECS 服务行为 | ECS 任务行为 |
| 容器停止或失败 | ECS 将始终尝试保持给定 ECS 服务的所需计数，并且如果由于容器停止或失败导致活动计数低于所需计数，将尝试重新启动容器。 | ECS 任务是一次性执行，要么成功，要么失败。ECS 永远不会尝试重新运行失败的 ECS 任务。 |
| 任务定义配置 | 对于给定的 ECS 服务，您不能覆盖任何 ECS 任务定义配置。 | ECS 任务允许您覆盖环境变量和命令行设置，允许您为各种不同类型的 ECS 任务利用单个 ECS 任务定义。 |
| 负载平衡器集成 | ECS 服务的特点是与 AWS 弹性负载平衡服务完全集成。 | ECS 任务不提供与任何负载平衡服务的集成。 |
ECS Services vs ECS Tasks
现在让我们看看如何使用 AWS 控制台运行 ECS 任务。您将创建一个非常简单的 ECS 任务，该任务从 ECS 任务定义中定义的 Nginx 映像运行`sleep 300`命令。
这将导致任务在执行前休眠五分钟，模拟短暂的临时任务:
1.  在 ECS 控制台中，选择左侧的**集群**，点击您的名为**测试集群**的集群。
2.  选择**任务**选项卡，点击**运行新任务**按钮，创建新的 ECS 任务:
![](img/c57d3acc-a14a-4571-b3a6-158461398793.png)
Running an ECS Task
3.  在**运行任务**界面，首先选择 **EC2** 作为**启动类型**，确保**任务定义**和**集群**设置配置正确。如果展开**高级选项**部分，请注意您可以为 **nginx** 容器指定容器覆盖。请注意，要配置命令覆盖，您必须以逗号分隔的格式提供您想要运行的命令以及任何参数，例如，要执行`sleep 300`命令，您必须配置**睡眠，300** 的命令覆盖。配置完成后，点击**运行任务**执行新的 ECS 任务:
![](img/689373b4-dae0-49a9-9677-97bf10311b1a.png)
Configuring an ECS Task
此时，您将返回到 ECS 集群的任务选项卡，您将看到一个状态为**待定**的新任务:
![](img/e25ba3d1-4de3-4d2d-a607-16d019c3b943.png)
ECS Task in a Pending State
新任务应该很快过渡到 **RUNNING** 的状态，如果我们让任务运行，它最终会在五分钟后退出。
现在让我们借此机会观察 ECS 任务停止时的行为。如果选择所有任务，点击**停止**按钮，系统会提示您确认是否要停止每个任务。确认要停止每项任务后，**任务**窗格应立即显示无活动任务，点击几次刷新按钮后，应看到单个任务重新启动。该任务由 ECS 自动启动，以保持简单 web 服务的期望计数为 1。
# 使用电子控制系统命令行界面
在这一章中，我们只专注于使用 AWS 控制台来开始使用 ECS。由 AWS 编写和维护的另一个工具称为 ECS CLI，它允许您创建 ECS 集群并从命令行部署 ECS 任务和服务。
ECS 命令行界面与 AWS 命令行界面在许多方面都有所不同，但主要区别包括:
*   ECS 命令行界面专注于与 ECS 交互，仅支持与为 ECS 提供支持资源的其他 AWS 服务交互，如 AWS 云信息和 EC2 服务。
*   ECS CLI 操作比 AWS CLI 操作更粗粒度。例如，ECS CLI 将协调创建一个 ECS 集群及其所有支持资源，很像您在本章前面使用的 ECS 集群向导的行为，而 AWS CLI 专注于执行单个特定任务的更细粒度的操作。
*   ECS 命令行界面是用 Golang 编写的，而 AWS 命令行界面是用 Python 编写的。这确实引入了一些行为差异，例如，ECS CLI 不支持在启用 MFA(多因素认证)的情况下使用 AWS 配置文件，这意味着您需要使用不强制 MFA 的 AWS 凭据和角色。
ECS CLI 的一个特别有用的特性是它支持 Docker Compose 文件的版本 1 和版本 2，这意味着您可以使用 Docker Compose 来提供多容器环境的一般描述。ECS CLI 还允许您使用基于 YAML 的配置文件来定义您的基础架构，因此可以将其视为一个简单而实用的基础架构即代码工具。
一般来说，ECS 命令行界面对于快速建立沙盒/开发环境进行快速原型开发或测试非常有用。为了部署您的正式非生产和生产环境，您应该使用工具和服务，如 Ansible、AWS 云信息或 Terraform，它们为您运行生产级环境所需的所有 AWS 资源提供了更广泛的支持。
The ECS CLI includes complete documentation, which you can find at [https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_CLI.html](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_CLI.html). You can also view the ECS CLI source code and raise issues at [https://github.com/aws/amazon-ecs-cli](https://github.com/aws/amazon-ecs-cli).
# 删除测试集群
此时，您应该按照 ECS 控制面板中的以下步骤删除您在本章中创建的测试集群:
1.  从集群中选择测试集群
2.  选择并更新简单网络 ECS 服务，使其期望计数为 0
3.  等待简单网络 ECS 任务计数降至 0
4.  选择测试群集，然后单击删除群集按钮
# 摘要
在本章中，您已经了解了 ECS 体系结构，并了解了构成 ECS 的核心组件。您了解了 ECS 集群是如何成为 ECS 容器实例的集合的，这些实例在 EC2 自动缩放组实例上运行 Docker Engine。AWS 为您提供了预构建的 ECS 优化的 AMI，使其非常容易使用 ECS 快速启动和运行。每个 ECS 容器实例都包括一个 ECS 代理，它作为系统容器运行并与 ECS 通信，提供启动、停止和部署容器所需的管理和控制平面。
接下来，您创建了一个 ECS 任务定义，它定义了一个或多个容器和卷定义的集合，包括容器映像、环境变量和 CPU/内存资源分配等信息。有了 ECS 集群和 ECS 任务定义，您就可以创建和配置 ECS 服务，引用 ECS 任务定义来定义 ECS 服务的容器配置，并将 ECS 服务的一个或多个实例定位到您的 ECS 集群。
ECS 支持对容器应用的更新进行滚动部署，您只需创建 ECS 任务定义的新版本，然后将该定义与 ECS 服务相关联，就可以成功部署新的应用更改。
最后，您学习了如何使用 ECS 命令行界面来简化 ECS 集群和服务的创建，使用 Docker Compose 作为定义任务定义和 ECS 服务的通用机制。
在下一章中，您将详细了解弹性容器注册(ECR)服务，在这里您将学习如何创建自己的私有 ECR 存储库，并将您的 Docker 映像发布到这些存储库中。
# 问题
1.  说出使用 ECS 运行长时间运行的 Docker 容器所需的三个 ECS 组件
2.  对/错:ECS 代理作为新贵服务运行
3.  使用 ECS 命令行界面时，您使用什么配置文件格式来定义基础架构？
4.  对/错:您可以将两个带有静态端口映射的 ECS 任务实例部署到单个实例 ECS 集群
5.  对/错:ECS 命令行界面被认为是将 Docker 环境部署到生产环境的最佳工具
6.  当使用 ECS 运行每晚运行 15 分钟的批处理作业时，您会配置什么？
7.  真/假:ECS 任务定义是可变的，可以修改
8.  对/错:您可以通过运行`curl localhost:51678`命令来检查给定 Docker 引擎上代理的当前状态
# 进一步的信息
有关本章所涵盖主题的更多信息，您可以查看以下链接:
*   ECS 开发者指南:[https://docs . AWS . Amazon . com/Amazon ECS/latest/Developer Guide/welcome . html](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/Welcome.html)
*   Amazon ECS-优化 AMI:[https://docs . AWS . Amazon . com/Amazon ECS/latest/developer guide/ECS-优化 _AMI.html](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html)
*   ECS 容器实例所需的权限:[https://docs . AWS . Amazon . com/Amazon ECS/latest/developer guide/instance _ IAM _ role . html](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/instance_IAM_role.html)
*   ECS 代理文档:[https://docs . AWS . Amazon . com/Amazon ECS/latest/developer guide/ECS _ agent . html](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_agent.html)
*   使用 ECS 命令行界面:[https://docs . AWS . Amazon . com/Amazon ECS/latest/developer guide/ECS _ CLI . html](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_CLI.html)
*   ECS 代理 GitHub 资料档案库:https://github . com/AWS/Amazon-ECS 代理
*   ECS init GitHub 资料档案库:https://github . com/AWS/Amazon-ECS-init
*   ECS CLI GitHub 存储库:https://github . com/AWS/Amazon-ECS-CLI