0.0159
62
赋值操作
10000
0.0001
8130
0.0001
10,989
subst（短字符串）
10000
0.0003
3891
0.0003
3846
subst（长字符串）
10000
0.0018
547
0.0014
704
sed (bash)
1000
0.0910
10
0.0342
29
sed (ash)
1000
0.0699
14
0.0069
144
sed (sh)
1000
0.0911
10
0.0139
71
shell (bash)
1000
0.0398
25
0.0261
38
shell (ash)
1000
0.0253
39
0.0018
555
shell (sh)
1000
0.0399
25
0.0050
198
Windows上的测试是在CPU为1.9-GHzPentium4（大约3578BogoMips）（注1）、RAM
为512MB.OS为WindowsXP的机器上进行的。进行测试的make3.80使用的是Cygwin
的版本，而且是从rxvt窗口启动的。Linux上的测试是在CPU为450-MHzPentium2
（891BogoMips）、RAM为256MB、OS为RedHat9的机器上进行的。
make所使用的subshell对makefile的整体效能将会有显著的影响。bash是一个复杂、
功能齐全的shell，因此是一个大型程序。ashshell的功能较少，所以是一个较小型的
程序，不过足够满足大部分工作所需。如果bash调用自文件名/bin/sh，bash会显著改
变自己的行为以便表现得比较像标准的shell，这会使得事情复杂化。在大部分的Linux
系统上，文件/bin/sh是一个指向bash的符号链接，然而在Cygwin中，/bin/sh实际上
是ash的副本。为了评估这些差异，有部分测试会进行三次，每一次使用一种shell。我
们会将测试时所使用的shell标注在圆括号里。当（sh）出现时，意味着bash被链接到
名为/bin/sh的文件。
前三个测试标注为make，用来指示当make运行时如果什么事也不做需要耗费多少成
本。测试所使用的makefile内容如下：
注1：
想要进一步了解BogoMips，可参考http：//www.hobby.nl/-clifton/bogomips.html的说明。
---
## Page 206
196
第十章
SHELL:=/bin/bash
.PHONY:X
X:
将此命令重复99次
请将bash字样替换成适当的shell名称。
为了消除非必要的求值动作影响计时测试的结果，以及避免在计时输出值中掺杂不适当
的文字，此处使用了--no-print-directory和--silent命令行选项。--question
选项用来告诉make只需检查依存关系而不必执行任何命令，并且在文件已更新的时候
返回值为零的结束状态。这让make能够尽量少做事。没有任何命令会被这个makefile
执行，而且只有一个，PHONY工作目标存在依存关系。命令脚本会执行make100次。
这个名为make-bash.mk的makefile将会被上层的makefile以下面的方式运行10次：
define ten-times
TESTS += $1
.PHONY:$1
$1:
@echo $（MAKE）--no-print-directory --silent S2:\
time S（MAKE)--no-print-directory --silent $2;\
time S(MAKE)
）--no-print-directory--silent $2;\
time S(MAKE)
）--no-print-directory--silent $2;\
time S(MAKE)
time $(MAKE)
--no-print-directory--silent $2:\
time S(MAKE)
)--no-print-directory --silent $2;\
time S(MAKE)
--no-print-directory --silent S2:\
time $(MAKE)
)--no-print-directory --silent $2;
time $(MAKE)--no-print-directory --silent $2:
time $（MAKE)--no-print-directory--silent $2
endef
.PHONY:a11
all:
S（evalS(call ten-times,make-bash,-f make-bash.mk))
all:S(TESTS)
记录运行1000次所花的时间，然后求平均值。
如表10-1所示，Cygwin版的make大约每秒运行22次，也就是每次要花0.044秒的时
间：而Linux的版本（即使在相当慢的CPU上）大约每秒运行61次，也就是每次要花
0.016秒的时间。为了确认这些结果，我们还对原生的Windows版的make做了测试，但
是速度并没有多大的提升。结论：Cygwin版的make创建进程的速度比原生的Windows
版的make稍慢，不过两者都比Linux版的慢很多。这同时意味着，在Windows平台上
递归式make的使用将会比在Linux上慢很多。
---
## Page 207
改进make的效能
197
正如你所预期的那样，运行时间不会因为shell的不同而有太大的差异。因为命令脚本中
并未包含SHELL的特殊字符，所以shell根本不会被调用，make会直接执行命令。要
够正确运行。这三种shell在效能上的不同必然是因为正常的系统差异。
接下来的基准测试用来测量变量赋值的速度。我们将会以此作为make的大多数基本操
作的基础。这个makefile名为assign.mk：
10000次赋值动作
2:=10
重复10000次
.PHONY:X
x:
我们将会以上层makefile里的ten-times函数来运行这个makefile。
赋值操作的执行速度显然非常快。Cygwin版的make每秒将会执行8130次赋值操作，
而Linux系统高达10989次。我相信对大部分操作来说，Windows的效能实际上会比测
试的结果好，因为创建make进程10次的成本无法从测试结果中排除。结论：因为一般
makefile不太可能执行100o0次赋值操作，所以在-般的makefile中可以忽略变量赋值
的成本。
接下来的两项基准测试用来测量subst函数调用的成本。首先是对10个字符长的字符
串进行3次替换：
#对10个字符长的字符串进行10000次subst操作
dir:=ab/cd/ef/g
x：=$（subst/.，$（dir)）
重复10000次
.PHONY:X
x：
此操作所花的时间大约是一般赋值操作的两倍，即在Windows上每秒可以进行3891次
操作。同样地，Linux系统的效能还是比Windows系统的好（别忘了，运行Linux系统
的机器的时钟速度是运行Windows系统的机器的四分之一。）
然后是对1000个字符长的字符串进行大约100次替换：
#10个字符长的文件名称
dir:=ab/cd/ef/g
#1000个字符长的路径
p100 :=s（dir);S(dir）;$(dir);$(dir);$(dir);...
p1000 :=S（D100)$(p100)$（p100)$(p100)S（p100)..
对1000个字符长的字符串进行10000次subst操作
x:= S（subst:,，$（D1000))
---
## Page 208
198
第十章
重复10000次
.PHONY:X
接下来的三项基准测试，用来测量以sed进行相同替换操作的成本：
#以bash进行100次sed操作
SHELL:=/bin/bash
.PHONY:sed-bash
sed-bash:
[tnu/Aap/<，b//:/s.pas1.（oootd）s.oyoa
重复100次
照例，我们将会以上层makefile里的ten-times函数来运行这个makefile。在Windows
上，sed的执行速度大约比subst函数慢50倍；在我们的Linux系统上，大约只慢24倍。
考虑到shell的成本因素时，我们发现ash在Windows上会有提升速度的效果。使用ash，
sed只比subst慢39倍！在Linux系统上，使用shell将会有更显著的影响：使用ash，
sed只比subst慢5倍。我们还注意到，将bash更名为sh所产生的奇怪结果。在Cygwin
上，把bash取名为/bin/bash以及取名为/bin/sh并没有什么差别。但是，在Linux
系统上，把bash链接至/bin/sh将会有比较好的效能。
最后的基准测试只是调用make的shel1命令来评估运行一个subshell的成本：
#以bash进行100次$（shell）操作
SHELL:=/bin/bash
x：=$（shel1：）
重复100次
.PHONY:X
毫无疑问，在Windows系统上会比在Linux系统上慢，ash的效能比bash好。较明确
地说，ash大约快50%。在Linux系统上，ash效能最好而bash（当取名为bash时）
最慢。
然而，基准测试是一个永无止境的工作，测量结果可以提供给我们若干有用的信息。你
可以创建任何必要的变量，如果这些变量有助于理清makefile结构的话，因为它们基本
上是免费的。如果调用内置的make函数以及执行命令就可以达成你的目的，应该优先
采用前者，即使你的makefile的结构需要一再重新执行make函数。避免递归式make
或是在Windows上创建非必要的进程。在Linux系统上，如果你要创建许多进程，最好
使用ash。
最后，别忘了，对大多数makefile来说，运行makefile所花的时间几乎完全取决于所运
行程序的成本，而与make或makefile的结构无关。通常，减少所运行程序的数目，对
提高makefile运行的速度最有帮助。
---
## Page 209
改进make的效能
199
找出瓶颈与处理瓶颈
函数和变量使用不当。这些问题可能会被make函数所掩盖，比如调用命令的shell没有
显示出它们，这让你难以找到延迟的原因。
依存分析有如双刃剑。一方面，如果进行完整的依存分析，分析动作本身就可能导致明
显的延迟。没有编译器特别的支持，比如gcc或jikes，依存文件的创建将会需要运行
另一个程序，这差不多是两倍的编译时间（注2）。另一方面，完整依存分析的好处是可
以让make执行较少的编译工作。可惜，有些开发人员可能不相信有这种好事，所以编
写makefile的时候所提供的依存信息并不完整。这种打折的做法几乎总是会导致更多的
开发问题，而且会使得其他开发人员对打折的结果付出更多的代价。
为了将依存分析策略公式化，现在让我们来了解项目的依存关系本质。一旦完全理解依
存信息之后，你可以选择在makefile中呈现多少信息（通过求值或直接表示）以及编译
期间可以采取哪些快捷方式。尽管以上所提到的这些都不是很简单，但是很直观。
事，通常只是在避免某些简单的陷阱。
简单变量与递归变量
最常见的与效能相关的问题之一，就是使用递归变量而不使用简单变量。例如，因为如
下的代码使用的是=运算符而不是：=，所以它会在每次DATE变量被使用时执行date
命令：
DATE = S(shell date +&F)
注意到date会被重复执行。当然，在深夜工作的开发人员可能会吓一跳！
因为make不会显示出shell函数所执行的命令，所以很难判断当前正在执行什么命令。
通过把shell变量重新设定为/bin/sh-x，可让make显示出它所执行的每一个命令。
个单词和日期组成：
注2：实际上，编译时间与输入文件的大小呈线性增长，而且此时间总是受到磁盘1/O的支配。
同样地，以-M选项找出依存关系所花的时间也是呈线性增长并且受磁盘I/O的支配。
---
## Page 210
200
第十章
DATE=S（shell date +&F)
OUTPUT_DIR =Out-S（DATE）
make-directories :=$（shel1[-dS（OUTPUT_DIR)}1lmkdir -p S(OUTPUT_DIR))
all::
让我们使用进人调试模式的shell来运行此makefile：
$make SHELL='/bin/sh -x'
+date+$F
+date+$F
+'['-dout-2004-03-30]
+mkdir -p out-2004-03-30
make:all is up todate.
显然，date命令被执行了两次。如果你时常需要进行此类的shell追踪，这么做会比较
容易：
ifdef DEBUG_SHELL
SHELL=/bin/sh -x
endif
禁用@
另一个隐藏命令的方式就是使用安静模式命令修饰符@。有些时候，禁用此功能将会很