title:The Dangers of Key Reuse: Practical Attacks on IPsec IKE
author:Dennis Felsch and
Martin Grothe and
J&quot;org Schwenk and
Adam Czubak and
Marcin Szymanek
The Dangers of Key Reuse:  
Practical Attacks on IPsec IKE
Dennis Felsch, Martin Grothe, and Jörg Schwenk, Ruhr-University Bochum;  
Adam Czubak and Marcin Szymanek, University of Opole
https://www.usenix.org/conference/usenixsecurity18/presentation/felsch
This paper is included in the Proceedings of the 
27th USENIX Security Symposium.
August 15–17, 2018 • Baltimore, MD, USA
ISBN 978-1-939133-04-5
Open access to the Proceedings of the 27th USENIX Security Symposium is sponsored by USENIX.The Dangers of Key Reuse:
Practical Attacks on IPsec IKE
Dennis Felsch
Ruhr-University Bochum
PI:EMAIL
Martin Grothe
Ruhr-University Bochum
PI:EMAIL
J¨org Schwenk
Ruhr-University Bochum
PI:EMAIL
Adam Czubak
University of Opole
PI:EMAIL
Marcin Szymanek
University of Opole
PI:EMAIL
Abstract
IPsec enables cryptographic protection of IP packets.
It is commonly used to build VPNs (Virtual Private Net-
works). For key establishment, the IKE (Internet Key
Exchange) protocol is used. IKE exists in two versions,
each with different modes, different phases, several au-
thentication methods, and conﬁguration options.
In this paper, we show that reusing a key pair across
different versions and modes of IKE can lead to cross-
protocol authentication bypasses, enabling the imperson-
ation of a victim host or network by attackers. We exploit
a Bleichenbacher oracle in an IKEv1 mode, where RSA
encrypted nonces are used for authentication. Using this
exploit, we break these RSA encryption based modes,
and in addition break RSA signature based authentica-
tion in both IKEv1 and IKEv2. Additionally, we describe
an ofﬂine dictionary attack against the PSK (Pre-Shared
Key) based IKE modes, thus covering all available au-
thentication mechanisms of IKE.
We found Bleichenbacher oracles in the IKEv1 imple-
mentations of Cisco (CVE-2018-0131), Huawei (CVE-
2017-17305), Clavister (CVE-2018-8753), and ZyXEL
(CVE-2018-9129). All vendors published ﬁxes or re-
moved the particular authentication method from their
devices’ ﬁrmwares in response to our reports.
1
Introduction
VPNs (Virtual Private Networks) allow employees to se-
curely access a corporate network while they are outside
the ofﬁce. They also allow companies to connect their lo-
cal networks over the public Internet. Examples for large
industrial VPNs are the ANX (Automotive Network Ex-
change), ENX (European Network Exchange), and JNX
(Japanese Network Exchange) associations, which con-
nect vehicle manufacturers with their suppliers [1–3]. In
4G/LTE (Long Term Evolution) networks, wireless car-
riers use VPNs to secure the backhaul links between base
Figure 1: The relationship between IKEv1 Phase 1,
Phase 2, and IPsec ESP. Multiple simultaneous Phase 2
connections can be established from a single Phase 1
connection. Grey parts are encrypted, either with IKE
derived keys (light grey) or with IPsec keys (dark grey).
The numbers at the curly brackets denote the number of
messages to be exchanged in the protocol.
stations and the core network [4, pp. 66–67]. Other appli-
cations of VPNs involve circumventing geo-restrictions
and censorship.
IPsec (Internet Protocol Security) is a protocol stack
that protects network packets at the IP layer. In contrast
to other widespread cryptographic protocols like TLS
(Transport Layer Security) or SSH (Secure Shell), which
operate at the application layer, IPsec allows to protect
every IP based communication. When transmitting pay-
load data, IPsec uses two different data formats to protect
IP packets: AH (Authentication Header) for integrity-
only setups and ESP (Encapsulating Security Payload)
for conﬁdentiality with optional integrity.
IKE. To establish a shared secret for an IPsec connec-
tion, the IKE protocol has to be executed. There are
two different versions of IKE named IKEv1 (1998) and
IKEv2 (2005). Although IKEv2 ofﬁcially obsoletes the
USENIX Association
27th USENIX Security Symposium    567
authentication/ key confirmationkey updatekey updatekey updateIKEv1Phase 1IKEv1Phase 2IPsec ESPIPsec ESPIPsec ESPIPsec ESPnegotiationauthentication/key agreementauthentication/ key confirmationauthentication/key agreementnegotiationMain ModeAggressive Mode23322Phase 2 – this holds for both IKEv1 and IKEv2. The
attacks are based on Bleichenbacher oracles discovered
in implementations of the two RSA encryption based
IKEv1 variants (cf. sections 5–7). These Bleichenbacher
oracles can very efﬁciently be used to decrypt nonces,
which breaks these two variants (subsection 4.2). The or-
acles can also be used to forge digital signatures, which
breaks the signature based IKEv1 and IKEv2 variants
(subsection 4.4).
We additionally show that both PSK based modes can
be broken with an ofﬂine dictionary attack if the PSK has
low entropy (section 9). We thus provide attacks against
all authentication modes in both IKEv1 and IKEv2 under
reasonable assumptions.
Contribution.
contributions:
In this paper, we make the following
• We identify and describe Bleichenbacher oracles in
the IKEv1 implementations of four large network
equipment manufacturers, Cisco, Huawei, Clavis-
ter, and ZyXEL.
• We show that the strength of these oracles is sufﬁ-
cient to break all handshake variants in IKEv1 and
IKEv2 (except those based on PSKs) when given
access to powerful network equipment.
• We demonstrate that key reuse across protocols as
implemented in certain network equipment carries
high security risks.
• We complete the evaluation of all variants of IKEv1
and IKEv2 by showing that all PSK based variants
are vulnerable to ofﬂine dictionary attacks if low en-
tropy PSKs are used. Such attacks were previously
only documented for one out of the three PSK-based
variants of IKE.
Responsible Disclosure. We reported our ﬁndings to
Cisco, Huawei, Clavister, and ZyXEL. Cisco pub-
lished ﬁxes with IOS XE versions 16.3.6, 16.6.3, and
16.7.1. They further informed us that the vulnera-
ble authentication method would be removed with the
next major release. Huawei published ﬁrmware version
V300R001C10SPH702 for the Secospace USG2000 se-
ries that removes the Bleichenbacher oracle and ﬁxes
crash bugs we identiﬁed on our test device. Customers
who use other affected Huawei devices will be contacted
directly by their support team as part of a need-to-know
strategy. Clavister removed the vulnerable authentication
method with cOS version 12.00.09. ZyXEL responded
that our ZyWALL USG 100 test device is from a legacy
model series that is end-of-support. Therefore, these de-
vices will not receive a ﬁx. For the successor models, the
patched ﬁrmware version ZLD 4.32 is available.
Figure 2: The relationship between IKEv2 Phase 1,
Phase 2, and IPsec ESP. Multiple simultaneous Phase 2
connections can be established from a single Phase 1
connection. Furthermore, Phase 1 and Phase 2 are par-
tially interleaved. Grey parts are encrypted, either with
IKE derived keys (light grey) or with IPsec keys (dark
grey). The numbers at the curly brackets to the left de-
note the number of messages to be exchanged in the pro-
tocol.
previous version, both are still available in all implemen-
tations and both can be conﬁgured for actual use in all
major operating systems and network devices.
IKE consists of two phases, where Phase 1 is used to
establish initial authenticated keying material between
two peers. Phase 2 is used to negotiate further derived
keys for many different IP based connections between
the two.
IKE is one of the most complex protocols in use, and
the dependencies between Phase 1 and Phase 2 make it
hard to analyze. Figures 1 and 2 illustrate this complex-
ity: In IKEv1, both phases are clearly separated, but there
are two different modes for Phase 1. In IKEv2, Phase 1
has been simpliﬁed, but now Phase 1 interleaves with the
ﬁrst execution of the Phase 2 protocol.
Authentication.
In IKEv1, four authentication meth-
ods are available for Phase 1 (cf. subsection 2.2): Two
RSA encryption based methods, one signature based
method, and a PSK (Pre-Shared Key) based method.
All Phase 1 modes/methods contain a DHKE (Difﬁe-
Hellman Key Exchange), which guarantees PFS (Perfect
Forward Secrecy) for every connection. IKEv2 Phase 1
omits both encryption-based authentication methods, so
only signature and PSK based authentication remain.
Attacks. Our attacks only target Phase 1 in IKEv1 and
IKEv2, where we impersonate an IKE device. Once
attackers succeed with this attack on Phase 1,
they
share a set of (falsely) authenticated symmetric keys
with the victim device, and can successfully complete
568    27th USENIX Security Symposium
USENIX Association
NegotiateESP/AH SADHKEAuthenticationNegotiateESP/AH SANegotiateESP/AH SANegotiateESP/AH SADoSProtectionESP/AH SAESP/AH SAESP/AH SAESP/AH SAIKEv2Phase 1IKEv2Phase 22222
IKE (Internet Key Exchange)
IKE is a family of AKE (Authenticated Key Exchange)
protocols. It is responsible for negotiating multiple sets
of cryptographic algorithms and keys, called SAs (Se-
curity Associations) in IPsec terminology. Each SA can
either be used to protect the integrity of IP packets with
the data format AH (Authentication Header) or to pro-
tect conﬁdentiality with optional integrity using the data
format ESP (Encapsulating Security Payload). IKE mes-
sages are exchanged over UDP (User Datagram Proto-
col) and their destination port is 500.
IKE is standardized in two major versions: Version 1,
described in RFC 2409 [16] and accompanying docu-
ments, was published in 1998. It has been declared obso-
lete by the IETF (Internet Engineering Task Force), but it
is nevertheless included in all implementations and still
widely used. Version 2, ﬁrst published in RFC 4306 in
2005 [22] was designed as a low-latency alternative to
Version 1, and therefore has a fundamentally different
design. It is subject of ongoing standardization, but only
minor clariﬁcations are incorporated in the most recent
RFCs. IKEv1 uses a data format called ISAKMP (In-
ternet Security Association and Key Management Proto-
col), which has later been integrated with IKEv2.
IKEv1 Phases
2.1
IKEv1 consists of two phases (cf. Figure 1). In Phase 1,
a SA is established for IKEv1 itself, such that the subse-
quent Phase 2 messages can be encrypted. Additionally,
a shared symmetric key is established as basis of authen-
tication in Phase 2. In Phase 2, several SAs for IPsec AH
and ESP are negotiated.
IKEv1 Phase 1. For Phase 1 of the protocol,
two
modes – main mode and aggressive mode – and four
authentication methods are available. A main mode
handshake consists of exactly six messages; an aggres-
sive mode handshake compresses the protocol ﬂow into
only three messages. We do not cover the aggressive
mode explicitly in this paper. However, all results de-
scribed in this paper hold for the aggressive mode as
well. Throughout the rest of this paper, we assume read-
ers familiar with the TLS protocol, as we will sometimes
compare IKE with TLS.
Figure 3 gives a simpliﬁed overview of the IKE proto-
col structure of Phase 1. Since IKE uses UDP, the pro-
tocol itself has to keep track of the handshake session.
IKE uses random values called cookies (and denoted by
cI and cR) for this purpose; these cookies are present in
each IKE header.
The ﬁrst two messages (m1 and m2) are used to ne-
gotiate on a proposal – a combination of different cryp-
Figure 3: Generic structure of IKEv1 Phase 1 in main
mode.
tographic algorithms, comparable to TLS ciphersuites.
In messages m3 and m4 a DHKE is performed,
to-
gether with the exchange of additional parameters called
ancillary data (anc), depending on the chosen authenti-
cation method.
Based on these messages and the shared DH secret,
four symmetric keys (k, kd, ka, ke)1 are derived by both
parties (cf. Table 1). The formula to derive the interme-
diate key k varies between the different authentication
methods, which are explained in more detail in the fol-
lowing sections. From this intermediate key, the other
three keys are derived as the result of a pseudorandom
function. Inputs to this function are k, the most recent
generated key, the shared DH secret gxy, the cookies
(cI, cR), and an index.
The last two messages (m5 and m6) are used for key
conﬁrmation. For this, two MAC values2 are generated
using k. These MACs are either exchanged or digitally
In main mode, messages m5 and m6 are en-
signed.
crypted under key ke.
Signature
PRFnI ,nR (gxy) PRFh(nI ,nR)(cI, cR) PRFPSK(nI,nR)
PKE & RPKE
PSK
PRFk(gxy, cI, cR,0)
PRFk(kd,gxy, cI, cR,1)
PRFk(ka,gxy, cI, cR,2)
k
kd
ka
ke
Table 1: The key derivation in the four different authen-
tication methods.
IKEv1 Phase 2. Phase 2 is also called quick mode. In
essence, quick mode is a three-message PSK based au-
thenticated key agreement protocol. Its security is based
on psk = (ka,kd) from Phase 1 while key ke is used to en-
crypt all messages. For each of the several executions of
Phase 2, fresh nonces are exchanged. If PFS is desired, a
DHKE can additionally be performed.
USENIX Association
27th USENIX Security Symposium    569
Initiator(IDI,skI)Responder(IDR,skR)m1:=(proposals)−cI,0,m1−−−−−−−−−−−→m2:=(proposal)←−cI,cR,m2−−−−−−−−−−−m3:=(gx,ancI)−cI,cR,m3−−−−−−−−−−−→m4:=(gy,ancR)←−cI,cR,m4−−−−−−−−−−−Derivek,kd,ka,keDerivek,kd,ka,keComputeMACIusingkGenerateauthenticationproofm5fromMACIandskIm5isencryptedwithke−cI,cR,m5−−−−−−−−−−−→ComputeMACRusingkGenerateauthenticationproofm6fromMACRandskRm6isencryptedwithke←−cI,cR,m6−−−−−−−−−−−Decryptandverifym6Decryptandverifym5IKEv1 Authentication Methods
2.2
In Phase 1 of IKEv1, four different modes of authentica-
tion are available: (a) Digital signatures, (b) PKE (Pub-
lic Key Encryption), (c) RPKE (Revised Public Key En-
cryption), and (d) PSKs (Pre-Shared Keys). While the
message exchange patterns in Phase 1 are ﬁxed to main
or aggressive mode, the two communicating entities may
freely negotiate any of these four authentication modes.
Signature Based Authentication. This authentication
mode assumes that each party owns an asymmetric key
pair with valid certiﬁcates. After choosing this authenti-
cation mode, nonces nI and nR are exchanged as ancillary
information with the third and fourth message. These
nonces are then used as key input to the PRF function,
which is used to derive the shared key k from the shared
DH secret. As proof for identiﬁcation and authentication,
both parties sign their MAC values and exchange these