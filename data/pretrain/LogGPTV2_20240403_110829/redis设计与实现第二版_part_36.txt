 sentinels字典的键是其中一个 Sentinel的名字，格式为 ip:port，比如对
口 
口如果信息中记录的 Sentinel 运
当一个 Sentinel 从_
添加到 sentinels字典里面。
和配置纪元。
的新Sentinel，目标 Sentinel会为源 Sentinel创建一个新的实例结构，并将这个结构
号为 26379的 Sentinel的实例结构。
1:26379"来说，这个键在sentinels字典中的值就是IP为127.0.0.1，端口
sentine1s字典中的键就是"127.0.0.1:26379"。
于IP地址为127.0.0.1，端口号为26379的Sentinel来说，这个Sentinel在
将根据信息中的各个参数，对相应主服务器的实例结构进行更新。
那么说明这条信息是监视同一个服务器的其他 Sentinel发来的，接收信息的 Sentinel
相反地，如果信息中记录的 Sentinel运行ID和接收信息的Sentinel的运行ID不相同，
弃这条信息，不做进一步处理。
Sentinel自己发送的，Sentinel 将丢
行 ID相同，那么说明这条信息是
行 ID 和接收信息的 Sentinel 的运
更新 sentinels字典
 sentinel 
_:hello频道收到一条信息时，Sentinel会对这条信
sentinell
图16-14
服务器
向服务器发送信息
sentine13
接收信接
---
## Page 237
sentinels 字典，区别在于字典中保存的 Sentinel信息不同：
例结构，以及结构中的 sentinels字典。
接收到以下信息时：
三个 Sentinel正在监视主服务器127.0.0.1:6379，那么当127.0.0.1:26379这个Sentinel
和127.0.0.1:26379—样，
图16-15展示了Sentinel127.0.0.1:26379为主服务器127.0.0.1:6379创建的实
口
口
Sentinel将执行以下动作：
5
1) "message"
内容，对sentinels字典中 127.0.0.1:26380所对应的实例结构进行更新。
第三条信息的发送者为127.0.0.1:26380，Sentinel会根据这条信息中提取出的
内容，对 sentinels 字典中 127.0.0.1:26381对应的实例结构进行更新。
第二条信息的发送者为127.0.0.1:26381，Sentinel会根据这条信息中提取出的
sentinelRedisInstance
1,6379,0"
"message"
1,6379,0"
"message"
1,6379,0"
_sentinel
_sentinel
sentinels
"mymaster"
SRI_MASTER
name
flags
_:hello"
:hello"
:hello"
图16-15
主服务器实例结构中的 sentinels 字典
其他两个 Sentinel也会创建类似于图16-15所示的
"127.0.0.1:26381"
"127.0.0.1:26380"
dict
sentinelRedisInstance
 sentinelRedisInstance
"127.0.0.1:26381"
"127.0.0.1:26380"
SRI_SENTINEL
flags
name
flags
name
第16章Sentinel
●233
---
## Page 238
234·第三部分多机数据库的实现
主服务器、从服务器、其他 Sentinel在内）发送 PING命令，并通过实例返回的 PING 命令
16.6
Sentinel之间的命令连接来进行通信。
来将对 Sentinel实现主观下线检测和客观下线检测的原理进行介绍，这两种检测都会使用
他 Sentinel 发送命令请求来进行信息交换，本章接下
Sentinel之间是如何互相连接的。
Sentinel A的命令连接。
向 Sentinel B 的命令连接，而 Sentinel B也有连向
个Sentinel将形成相互连接的网络：SentinelA有连
Sentinel的命令连接，最终监视同一主服务器的多
的命令连接，而新 Sentinel也同样会创建连向这个
创建相应的实例结构，还会创建一个连向新 Sentinel
时，它不仅会为新Sentinel在sentinels字典中
16.5.2创建连向其他 Sentinel 的命令连接
对方。
不需要提供各个 Sentinel的地址信息，监视同一个主服务器的多个 Sentinel可以自动发现
通过发送频道信息来让其他 Sentinel知道自己的存在，所以用户在使用 Sentinel的时候并
需要建立订阅连接，而相互已知的 Sentinel 只要使用命令连接来进行通信就足够了。
需要通过接收主服务器或者从服务器发来的频道信息来发现未知的新 Sentinel，所以才
在连接其他 Sentinel 时，却只会创建命令连接，而不创建订阅连接。这是因为 Sentinel
使用命令连接相连的各个 Sentinel可以通过向其
在默认情况下，Sentinel会以每秒一次的频率向所有与它创建了命令连接的实例（包括
图16-16展示了三个监视同一主服务器的
当 Sentinel通过频道信息发现一个新的 Sentinel
因为一个 Sentinel 可以通过分析接收到的频道信息来获知其他 Sentinel的存在，并
口而127.0.0.1:26381创建的 sentinels 字典则会保存127.0.0.1:26379和
口127.0.0.1:26380创建的 sentinels字典会保存127.0.0.1:26379和
Sentinel 在连接主服务器或者从服务器时，会同时创建命令连接和订阅连接，但是
127.0.0.1:26380两个 Sentinel的信息。
127.0.0.1:26381两个 Sentinel的信息。
检测主观下线状态
 Sentinel 之间不会创建订阅连接
图 16-16各个 Sentinel 之间的网络连接
监视
主服务器
Sentinel2
监视
命令连接
Sentinell
 Sentine13
监视
命令连接
---
## Page 239
16-18所示。
结构的 flags 属性中打开 SRI_S_DOWN 标识，如图
将 master 标记为主观下线，并在 master 所对应的实例
毫秒都向 Sentinell返回无效回复时，Sentinel1就会
为50000毫秒，那么当主服务器master连续50000
Sentinell 的 down-after-milliseconds 选项的值
此来表示这个实例已经进人主观下线状态。
例在 down-after-milliseconds 毫秒内，连续向 Sentinel 返回无效回复，那么 Sentinel
milliseconds 选项指定了 Sentinel判断实例进人主观下线所需的时间长度：如果一个实
送 PING 命令的：
回复来判断实例是否在线。
主观下线的标准。
Sentinel 判断 master 属下所有从服务器，以及所有同样监视 master 的其他 Sentinel进入
设置了以下配置：
样监视这个主服务器的其他 Sentinel的主观下线状态。举个例子，如果用户向 Sentinel
主服务器的主观下线状态，还会被用于判断主服务器属下的所有从服务器，以及所有同
以图16-17展示的情况为例子，如果配置文件指定
在图16-17展示的例子中，带箭头的连线显示了 Sentinell 和 Sentinel2是如何向实例发
Sentinel 配置文件中的 down-after-
口无效回复：实例返回除+PONG、-LOADING、
口有效回复：实例返回+PONG、-LOADING、
实例对PING命令的回复可以分为以下两种情况：
口 Sentinel2 将向 Sentinel1、主服务器 master 
Sentinell将向 Sentinel2、主服务器 master、
那么50000 毫秒不仅会成为 Sentinel 判断 master 进入主观下线的标准，还会成为
sentinel down-after-milliseconds master 50000 
 sentinel monitor master 127.0.0.1 6379 2
用户设置的down-after-milliseconds 选项的值，不仅会被Sentinel 用来判断
或者在指定时限内没有返回任何回复。·
-MASTERDOWN三种回复之外的其他回复：
-MASTERDOWN 三种回复的其中一种。
从服务器 slave1和 slave2 发送 PING 命令。
从服务器 slave1 和 slave2 发送 PING 命令。
主观下线时长选项的作用范围
图 16-17Sentinel 向实例发送 PING 命令
图16-18主服务器被标记为主观下线
SRI_MASTER I SRI_S DOWN
sentinelRedisInstance
slavel
master
"master"
 Sentinel2
flags
Sentinell
name
第16章Sentinel
slave2
·235
---
## Page 240
236·第三部分多机数据库的实现
16.7.1
行故障转移操作。
到足够数量的已下线判断之后，Sentinel就会将从服务器判定为客观下线，并对主服务器执
经进人了下线状态（可以是主观下线或者客观下线）。当 Sentinel从其他 Sentinel那里接收
了，它会向同样监视这一主服务器的其他 Sentinel 进行询问，看它们是否也认为主服务器已
16.7
 current_epoch
 port
之后，Sentinell 和 Sentinel2 才会都认为 master 进入了主观下线状态。
runid
下线，而 Sentinel1却认为 master 仍然在线。只有当 master 的断线时长超过 50000 毫秒
可能仍然会认为主服务器处于在线状态。举个例子，如果 Sentinell 载入了以下配置：
项的值也可能不同，因此，当一个Sentinel将主服务器判断为主观下线时，其他 Sentinel
服务器的多个 Sentinel来说，这些 Sentinel所设置的 down-after-milliseconds 选
ip
当Sentinel将一个主服务器判断为主观下线之后，为了确认这个主服务器是否真的下线
命令询问其他 Sentinel是否同意主服务器已下线，命令中的各个参数的意义如表16-4所示。
SENTINEL is-master-down-by-addr    
Sentinel 使用：
那么当 master的断线时长超过10000 毫秒之后，Sentinel2会将 master 判断为主观
 sentinel monitor master 127.0.0.1 6379 2
down-after-milliseconds 选项另一个需要注意的地方是，对于监视同一个主
sentinel monitor master 127.0.0.1 6379 2
而Sentinel2则载入了以下配置：
检查客观下线状态
发送 SENTINEL is-master-down-by-addr 命令
表 16-4 SENTINEL is-master-down-by-addr 命令各个参数的意义
状态，而 Sentinel 的运行 ID 则用于选举领头 Sentinel，详细作用将在下一节说明
可以是★符号或者Sentinel 的运行ID：符号代表命令仅仅用于检测主服务器的客观下线
Sentinel当前的配置纪元，用于选举领头 Sentinel，详细作用将在下一节说明
被Sentinel判断为主观下线的主服务器的端口号
被 Sentinel 判断为主观下线的主服务器的 IP 地址
多个 Sentinel 设置的主观下线时长可能不同
意
X
---
## Page 241
示主服务器已经进人客观下线状态，如图16-19所示。
所需的数量时，Sentinel会将主服务器实例结构 flags 属性的 SRI_O_DOwN 标识打开，表
将统计其他Sentinel同意主服务器已下线的数量，当这一数量达到配置指定的判断客观下线
16.7.3 接收 SENTINEL is-master-down-by-addr 命令的回复
addr 命令的回复：
条包含三个参数的 Multi Bulk回复作为 SENTINEL is-master-down-by 命令的回复：
并根据其中的主服务器IP和端口号，检查主服务器是否已下线，然后向源Sentinel返回一
is-master-down-by命令时，目标 Sentinel会分析并取出命令请求中包含的各个参数，
16.7.2
6379，并且 Sentinel当前的配置纪元为0，那么 Sentinel将向其他 Sentinel发送以下命令：
根据其他 Sentinel 发回的 SENTINEL is-master-down-by-addr 命令回复，Sentinel
leader_epoch
leader_runid
down_state
那么说明Sentinel也同意主服务器已下线。
举个例子，如果一个 Sentinel返回以下回复作为 SENTINEL
 （s ）  （ ）  
表16-5分别记录了这三个参数的意义。
3) 
1) 
 SENTINEL is-master-down-by-addr 127.0.0.1 6379 0 *
31
举个例子，如果被 Sentinel 判断为主观下线的主服务器的IP为127.0.0.1，端口号为
接收 SENTINEL is-master-down-by-addr 命令
leader_epoch 总为 0 
一节说明。仅在 leader_runid 的值不为*时有效，如果 leader_runid 的值为*，那么
用将在下一节说明
检测主服务器的下线状态，而局部领头 Sentinel的运行ID则用于选举领头 Sentinel，详细作
目标 Sentinel的局部领头 Sentinel的配置纪元，用于选举领头Sentinel，详细作用将在下
返回目标Sentinel 对主服务器的检查结果，1代表主服务器已下线，0代表主服务器未下线
表 16-5 
 SENTINEL is-master-down-by-addr 回复的意义
x
is-master-down-by-
第16章Sentinel·237
---
## Page 242
238
16.8选举领头 Sentinel
◆第三部分多机数据库的实现
主服务器标判断为客观下线。
Sentinell在启动时载入了以下配置：
能并不是那么认为的。比如说，对于监视同一个主服务器的五个 Sentinel来说，如果
前 Sentinel 才会将主服务器判断为客观下线。
线的条件可能也不同：当一个Sentinel将主服务器判断为客观下线时，其他 Sentinel 可
动时载入了以下配置：
状态，那么当前 Sentinel 就将主服务器判断为客观下线。又比如说，如果 Sentinel在启
如果Sentinel在启动时载入了以下配置：
quorum 参数的值，那么该 Sentinel 就会认为主服务器已经进入客观下线状态。比如说，
那么包括当前 Sentinel在内，总共要有五个 Sentinel 都认为主服务器已经下线，当
仅有两个 Sentinel 认为主服务器已下线，并不会令 Sentinel2 将主服务器判断为客观下线。
而对于载入了以下配置的 Sentinel2来说：
那么当五个 Sentinel中有两个 Sentinel认为主服务器已经下线时，Sentinell 就会将
sentine1 monitor master 127.0.0.1 6379 2
对于监视同一个主服务器的多个 Sentinel 来说，它们将主服务器标判断为客观下
 sentinel monitor master 127.0.0.1 6379 5
sentinel monitor master 127.0.0.1 6379 5
那么包括当前 Sentinel在内，只要总共有两个 Sentinel认为主服务器已经进入下线
 sentinel monitor master 127.0.0.1 6379 2
当认为主服务器已经进入下线状态的 Sentinel 的数量，超过 Sentinel配置中设置的
 不同 Sentinel 判断客观下线的条件可能不同 
 SRI_MASTER I SRI_S_DOWN 1 SRI_O_DOWN 
图16-19主服务器被标记为客观下线
客观下线状态的判断条件
sentinelRedisInstance
"master"
flags
name
---
## Page 243
假设现在有三个 Sentinel正在监视同一个主服务器，并且这三个 Sentinel之前已经通过
为了熟悉以上规则，让我们来看一个选举领头 Sentinel的过程。
口 如果在给定时限内，没有一个 Sentinel 被选举为领头 Sentinel，那么各个 Sentinel 将
口因
口如果有某个 Sentinel 被半数以上的 Sentinel设置成了局部领头 Sentinel，那么这个
口
口 Sentinel 设置局部领头 Sentinel 的规则是先到先得：最先向目标 Sentinel 发送设置要
口
口
口
口每次进行领头 Sentinel 选举之后，不论选举是否成功，所有 Sentinel 的配置纪元
口所有在线的 Sentinel 都有被选为领头 Sentinel的资格，换句话说，监视同一个主服
以下是Redis选举领头Sentinel的规则和方法：
在一段时间之后再次进行选举，直到选出领头 Sentinel 为止。
务器的多个在线Sentinel中的任意一个都有可能成为领头Sentinel。
一个领头Sentinel。
配置纪元里面只能设置一次局部领头 Sentinel，所以在一个配置纪元里面，只会出现
因为领头Sentinel的产生需要半数以上Sentinel的支持，并且每个Sentinel在每个
Sentinel，那么被设置的那个Sentinel就会成为领头Sentinel。
统里面，只要有大于等于10/2+1=6个 Sentinel将某个 Sentinel设置为局部领头
Sentinel成为领头Sentinel。举个例子，在一个由10个Sentinel组成的 Sentinel系
的运行ID一致，那么表示目标 Sentinel将源 Sentinel设置成了局部领头 Sentinel。
取出回复中的 leader_runid参数，如果 leader_runid 参数的值和源 Sentinel
epoch 参数的值和自己的配置纪元是否相同，如果相同的话，那么源 Sentinel继续