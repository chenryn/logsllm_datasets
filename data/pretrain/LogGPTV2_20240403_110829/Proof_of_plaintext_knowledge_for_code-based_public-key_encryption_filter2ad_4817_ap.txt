any ill-formed query. EncO is as in G3.i.2.
3.i.1.j: DecO is as in G3.i.2 except that for the ﬁrst j times it is queried, it outputs ⊥ to
any ill-formed query. EncO is as in G3.i.2.
• G′
We show that:
G3.i.1 ≡ G3.i.1.0 ≈AE G3.i.1.1 ≈AE . . . ≈AE G3.i.1.QDec ≡ G′
3.i.1.QDec ≈AE G′
G′
3.i.1.0 ≡ G3.i.2
3.i.1.QDec−1 ≈AE . . . ≈AE G′
3.i.1.QDec
It suﬃces to show that for all j = 0, . . . , QDec − 1, there exist adversaries B3.i.1.j and B′
where ≡ denote statistical equality, and ≈AE denotes indistinguishability based on the security
of AE.
against the one-time authenticity of AE, such that T(B3.i.1.j) ≈ T(B′
QDec) · poly(λ), with poly(λ) independent of T(A), and such that:
Claim 1: in G3.i.1.j, if the j +1-st query is ill-formed, then DecO outputs ⊥ with overwhelming
3.i.1.j) ≈ T(A) + (QEnc +
3.i.1.j
AE,B3.i.1.j (λ) (this implies G3.i.1.j ≈AE G3.i.1.j+1).
Claim 2: in G′
3.i.1.j, if the j +1-st query is ill-formed, then DecO outputs 0 with overwhelming
probability 1 − Advae-ot
probability 1 − Advae-ot
AE,B′
(λ) (this implies G′
3.i.1.j
3.i.1.j ≈AE G′
3.i.1.j+1).
We prove Claim 1 and 2 as in Lemma 16, in Section 3.1, arguing that the encapsulation key
K computed by DecO on an ill-formed j + 1-st query, is completely hidden from A, up to
its j + 1-st query to DecO. The reason is that the vector ki+1,1 in sk contains some entropy
that is hidden from A, and that is “released" on the j + 1-st query, if it is ill-formed. Then,
we use the one-time authenticity of AE to argue that DecO outputs ⊥ with all but negligible
probability.(cid:4)
Lemma 24: From game G3.i.2 to game G3.i.3
For all 0 ≤ i ≤ λ−1, there exists an adversary B3.i.2 such that T(B3.i.2) ≈ T(A)+(QEnc +
QDec) · poly(λ),
|AdvG3.i.2(A) − Adv3.i.3| ≤ 2QDec · Advae-ot
AE,B3.i.2(λ),
where QEnc, QDec are the number of queries to EncO and DecO, respectively, and poly(λ)
is independent of T(A).
Proof of Lemma 24. In G3.i.3, we use the same decomposition Span(M⊥) = Span(M∗
1) as
that in G3.i.2. The entropy of the component of k′
1) increases from G3.i.2 to
G3.i.3. That is, we use a random function RF(1)
p in place of the random function
RF(1)
p. To argue that these two games are computationally indistinguishable, we
use a computational variant of the Cramer-Shoup argument [CS03], exactly as in the proof of
Lemma 23.
i+1 : {0, 1}i+1 → Zk
τ that lies in Span(M∗
: {0, 1}i → Zk
0, M∗
i
3.3 Security proof of PKE
71
We deﬁne RF(1)
i+1 → Zk
p as follows:
RF(1)
i+1(τ|i+1) :=
RF(1)
RF(1)
i (τ|i) + RF′(1)
i (τ|i)
i (τ|i)
if τi+1 = 0
if τi+1 = 1
where RF′(1)
a random function.
: {0, 1}i → Zk
i
p is a random function independent from RF(1)
i
. This way, RF(1)
i+1 is
We show that the outputs of EncO and DecO are computationally indistinguishable in G3.i.1
and G3.i.2, similarly that in the proof of Lemma 17, in Section 3.1 (see the latter for further
details).
Lemma 25: From game G3.i.3 to game G3.i+1
For all 0 ≤ i ≤ λ−1, there exists an adversary B3.i.3 such that T(B3.i.3) ≈ T(A)+(QEnc +
QDec) · poly(λ) and
|Adv3.i.3 − AdvG3.i+1(A)| ≤ 2 · AdvUk(p)-mddh
G,B3.i.3
(λ) +
2
p − 1
,
where QEnc, QDec are the number of times A queries EncO, DecO, respectively, and poly(λ)
is independent of T(A).
1RF(1)
Proof of Lemma 25. First, we use the fact that for all τ ∈ {0, 1}λ, the vector M∗
i+1(τ|i+1)
+ M∗
i+1(τ|i+1) is identically distributed to M⊥RFi+1(τ|i+1), where RFi+1 : {0, 1}i+1 → Z2k
is a random function. This is because (M∗
1) is a basis of Span(M⊥). That means A’s
view can be simulated only knowing M⊥, and not M∗
1 explicitly. Then, to go from G3.i.3
to G3.i+1, we switch the distribution of the vectors [y] sampled by EncO, using the QEnc-fold
U2k,k(p)-MDDH Assumption (equivalent to the Uk-MDDH Assumption, see Lemma 2) twice:
ﬁrst with respect to a matrix M0 ←R U2k,k(p) for ciphertexts with τi+1 = 0, then with respect
to an independent matrix M1 ←R U2k,k(p) for ciphertexts with τi+1 = 1 (see the proof of
Lemma 22 for further details).
0, M∗
0, M∗
p
0RF(0)
Lemma 26: From game G3.λ to G4
There exists an adversary B3.λ such that T(B3.λ) ≈ T(A) + (QEnc + QDec) · poly(λ), and
|AdvG3.λ(A) − AdvG4(A)| ≤ QDecQEnc · Advae-ot
AE,B3.λ(λ) +
QDec
p
,
where QEnc, QDec are the number of queries to EncO and DecO, respectively, and poly(λ)
is independent of T(A).
Proof of Lemma 26. We use the one-time authenticity of AE to argue that with all but neg-
ligible probability, DecO outputs ⊥ on any input ([y], φ) such that for some previous output
([y′], φ′) of EncO, H([y′]) = H([y]).
We introduce intermediate games G3.λ.j for j = 0, . . . , QDec, deﬁned as G3.λ, except that on
its ﬁrst j query, DecO is as in G4, that is, it outputs ⊥ to any query corresponding to a tag τ
previously output by EncO.
We show that :
G3.λ ≡ G3.λ.0 ≈AE G3.λ.1 ≈AE . . . ≈AE G3.λ.QDec ≡ G4,
72
Chapter 3. Tightly CCA-Secure Encryption without Pairings
where ≡ denotes statistical equality, and ≈AE denotes indistinguishability based on the security
of AE.
Namely, we build adversaries B3.λ.j for j = 0, . . . , QDec − 1, such that T(B3.λ.j) ≈ T(A) +
(QEnc + QDec) · poly(λ), where poly(λ) is independent of T(A), and
|AdvG3.λ.j (A) − AdvG3.λ.j+1(A)| ≤ QEnc · Advae-ot
AE,B3.λ.j (λ) +
1
p
.
This implies the lemma.
It suﬃces to show that in G3.λ.j, with all but negligible probability, DecO outputs ⊥ to its
j + 1-st query if it contains [y⋆] such that H([y⋆]) = H([y]), for [y] that was output previously
by EncO.
We build B3.λ.j as follows.
pk : Upon receiving the description of K := G, B3.λ.j picks M ←R U3k,k, k1,0, . . . , kλ,1 ←R Z3k
p ,
H ←R H(1λ), and outputs pk as in G4 (see Figure 3.7). It also picks j⋆ ←R {1, . . . , QEnc},
and b ←R {0, 1}.
EncO(m0, m1) : On the j⋆’th query, B3.λ.j picks y ←R Z3k
p , calls the encryption oracle for AE,
EncO(mb, mb) to get φb := EncAE(K⋆, mb), for a random K⋆ ←R G. The rest of the
simulation goes as in G4 (see Figure 3.7), that is: if H([y]) /∈ TEnc ∪ TDec, B3.λ.j returns
([y, ], φb), sets TEnc := TEnc ∪ {H([y])} and CEnc := CEnc ∪ {([y], φb)}, otherwise, it returns
⊥. The other j 6= j⋆ queries are simulated as in G4.
DecO([y], φ): the ﬁrst j queries are simulated as in G4, the last QEnc − j − 1 as in G3.λ. For
the j + 1-st query ([y⋆], φ⋆), B3.λ.j calls the decryption oracle for AE, DecO([y⋆], φ⋆) to
get DecAE(K⋆, φ⋆). The rest of the simulation goes as in G3.i, that is, if ([y⋆], φ⋆) ∈ CEnc
or ∃([y], φ) ∈ CEnc with H([y⋆]) = H([y]) and y⋆ 6= y, B3.λ.j returns ⊥. Otherwise, it
returns DecAE(K⋆, φ⋆). Finally, it sets TDec := TDec ∪ {H([y⋆])}.
Assume the j + 1-st query ([y⋆], φ⋆) to DecO is such that DecO([y⋆], φ⋆) = ⊥ in G4, but
not in G3.λ.j. In particular, that means that there exists ([y], φ) ∈ CEnc such that y = y⋆ and
φ 6= φ⋆. Then, with probability 1/QEnc over the choice of j⋆, ([y], φ) is the j⋆’th query of EncO.
In that case, we show that A’s view is simulated as in G3.λ.j if DecO is the real decryption
oracle, and as in G4 if it is the “always ⊥” function. This implies the lemma.
Indeed, the key K⋆ := [y⋆⊤(kτ ⋆ + M⊥RFλ(τ ⋆))] for τ ⋆ := H([y⋆]) is random, independent
from A’s view up to its j + 1-st query on DecO (except what leaks through EncAE(K⋆, mb)).
This is because:
1. with probability 1/q over the random coins of B3.λ.j, y⋆ ←R Z3k
2. for all [y] contained in EncO outputs or DecO queries that don’t output ⊥, prior to the
j + 1-st DecO query, we have H([y]) 6= τ ⋆, by deﬁnition of G3.λ.j. That is, the tag τ ⋆ is
“fresh”. Therefore, the key
p /∈ Span(M).
K⋆ := [y⋆⊤(kτ ⋆ + M⊥RFλ(τ ⋆))] = [y⊤kτ ⋆ + y⋆⊤M⊥
RFλ(τ ⋆)]
is random, independent of A’s view up to its j + 1-st query (except what leaks through
EncAE(K⋆, mb)).
This proves that
|AdvG3.λ.j (A) − AdvG3.λ.j+1(A)| ≤ QEnc · Advae-ot
AE,B3.λ.j (λ) +
1
p
.
6=0
| {z }
3.3 Security proof of PKE
Lemma 27: Game G4
73
There exists an adversary B4 such that T(B4) ≈ T(A) + (QEnc + QDec)· poly(λ), such that
AdvG4(A) ≤ QEnc · Advae-ot
AE,B4(λ) +
QEnc
p
,
where QEnc denotes the number queries to EncO, and poly(λ) is independent of T(A).
Proof of Lemma 27. First, we show that the joint distribution of all the values K computed
by EncO is statistically close to uniform over GQEnc. Then, we use the one-time privacy of AE
on each one of the QEnc symmetric ciphertexts.
Recall that on input τ, EncO(τ) computes
K := [y⊤(kτ + M⊥RFλ(τ))],
where RFλ : {0, 1}λ → Z2k
p
is a random function, and y ←R Z3k
p .
We make use of the following properties:
Property 1: all the tags τ computed by EncO(m0, m1), such that EncO(m0, m1) 6= ⊥, are
distinct.
Property 2: the outputs of DecO are independent of {RF(τ) : τ ∈ TEnc}. This is because for
all queries ([y], φ) to DecO such that H([y]) ∈ TEnc, DecO([y], φ) = ⊥, independently of
RFλ(τ), by deﬁnition of G4.
Property 3: with probability at least 1− QEnc
y sampled by EncO are such that y⊤M⊥ 6= 0.
p
over the random coins of EncO, all the vectors
We deduce that the joint distribution of all the values RFλ(τ) computed by EncO is uni-
formly random over (cid:0)Z2k
Property 2). Finally, from Property 3, we get that the joint distribution of all the values K
computed by EncO is statistically close to uniformly random over GQEnc, since:
p (cid:1)QEnc (from Property 1), independent of the outputs of DecO (from
K := [y⊤(kτ + M⊥RFλ(τ)) = [y⊤kτ + y⊤M⊥
RFλ(τ)].
Therefore, we can use the one-time privacy of AE to argue that all symmetric ciphertexts
φb computed by EncO don’t reveal b (this uses a hybrid argument over the QEnc challenge
ciphertexts).
6=0 w.h.p.
| {z }
74
Chapter 3. Tightly CCA-Secure Encryption without Pairings
Chapter 4
Multi-Input Inner-Product
Functional Encryption from Pairings
Overview of the construction
In this chapter, we present a multi-input functional encryption scheme (MIFE) for inner prod-
ucts based on the MDDH assumption in prime-order bilinear groups. The construction ap-
peared in [AGRW17], and was the ﬁrst MIFE scheme for a non-trivial functionality based on
standard cryptographic assumptions with polynomial security loss, for any polynomial number
of slots and secure against unbounded collusions. We prove in this thesis a stronger security
guarantee than in [AGRW17]. Namely, the novelty here, is that input slots can collude, and
should not be able to break the security of the encryption for the other slots. The security
notion that captures corruption of input slots is formally described in Deﬁnition 23. Moreover,
using a single-input FE that is secure in a multi-instance setting, we obtain a multi-input FE
(see Figure 4.6) that is more eﬃcient that the original scheme from [AGRW17].
Concretely, the set of functionality {Fn}n∈N we consider is that of “bounded-norm” multi-
input inner products: each key is speciﬁed by a vector (y1k···kyn) ∈ Zmn, takes as input n
vectors x1, . . . , xn, each of dimension m, and outputs
Fn((y1k . . . ,kyn), x1, . . . , xn) =
nXi=1hxi, yii.
We require that the x1, . . . , xn, y1, . . . , yn have bounded norm, and inner product is computed
over the integers. The functionality is a natural generalization of single-input inner prod-
uct functionality introduced by Abdalla et. al [ABDP15], and studied in [ABDP15, BJK15,
DDM16, ALS16, ABDP16], and captures several useful computations arising in the context of
data-mining.
Prior approaches. Prior constructions of MIFE schemes in [BLR+15] require (at least) nm-
linear maps for n slots with m-bit inputs as they encode each input bit for each slot into a fresh
level of a multilinear map. In addition, there is typically a security loss that is exponential
in n due to the combinatorial explosion arising from combining diﬀerent ciphertexts across
the slots. In the case of inner products, one can hope to reduce the multilinearity to n by
exploiting linearity as in the single-input FE; indeed, this was achieved in two independent
works [LL16, KLM+18]1 showing how to realize a two-slot MIFE for inner products over
bilinear groups. We stress that our result is substantially stronger: we show how to realize
n-slot MIFE for inner products for any polynomial n over bilinear groups under standard
assumptions, while in addition avoiding the exponential security loss. In particular, we deviate
1This work is independent of both works.
75
76
Chapter 4. Multi-Input Inner-Product Functional Encryption from Pairings
from the prior approaches of encoding each slot into a fresh level of a multilinear map. We
stress that prior to [AGRW17], we did not even have a candidate for 3-slot MIFE for inner
products in the generic bilinear group model.
A public-key scheme. Our ﬁrst observation is that we can build a public-key MIFE for inner
product by running n independent copies of a single-input FE for inner products. Combined
with existing instantiations of the latter in [ABDP15], this immediately yields a public-key
MIFE for inner products under the standard DDH in cyclic group G (we use the implicit
representation of group elements as deﬁned in Section 2.2.1).
In a bit more detail, we recall the DDH-based public-key single-input FE scheme from
[ABDP15]:
pk := [w], ctx = ([s], [x + ws]), sky := hw, yi.
Decryption computes [hx, yi] = [x + ws]⊤y− [s]·hw, yi and then recovers hx, yi by computing
the discrete log.
Our public-key MIFE scheme is as follows:
pk := ([w1], . . . , [wn]),
:= ([si], [xi + wisi]),
ctxi
:= (hw1, y1i, . . . ,hwn, yni).
sky1,...,yn
We note that the encryption of xi uses fresh randomness si; to decrypt, we need to know
each hwi, yii, and not just hw1, y1i + ··· + hwn, yni. In particular, an adversary can easily
recover each [hxi, yii], whereas the ideal functionality should only leak the sum Pn
i=1hxi, yii.