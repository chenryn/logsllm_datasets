I am working with a LeNet-5 MNIST example from Udacity's course, and the source code can be found at the provided link. While training runs smoothly on a CPU (configured using `tf.ConfigProto(device_count = {'GPU': 0})`), it fails in GPU mode, throwing a 'CUDA_ERROR_ILLEGAL_ADDRESS' error.

The specific error message is as follows:
```
I c:\tf_jenkins\home\workspace\release-win\device\gpu\os\windows\tensorflow\core\common_runtime\gpu\gpu_device.cc:885] Found device 0 with properties:
name: GeForce GTX 1060 6GB
major: 6 minor: 1 memoryClockRate (GHz) 1.7845
pciBusID 0000:01:00.0
Total memory: 6.00GiB
Free memory: 5.01GiB
I c:\tf_jenkins\home\workspace\release-win\device\gpu\os\windows\tensorflow\core\common_runtime\gpu\gpu_device.cc:906] DMA: 0
I c:\tf_jenkins\home\workspace\release-win\device\gpu\os\windows\tensorflow\core\common_runtime\gpu\gpu_device.cc:916] 0: Y
I c:\tf_jenkins\home\workspace\release-win\device\gpu\os\windows\tensorflow\core\common_runtime\gpu\gpu_device.cc:975] Creating TensorFlow device (/gpu:0) -> (device: 0, name: GeForce GTX 1060 6GB, pci bus id: 0000:01:00.0)
Training...
E c:\tf_jenkins\home\workspace\release-win\device\gpu\os\windows\tensorflow\stream_executor\cuda\cuda_event.cc:49] Error polling for event status: failed to query event: **CUDA_ERROR_ILLEGAL_ADDRESS**
F c:\tf_jenkins\home\workspace\release-win\device\gpu\os\windows\tensorflow\core\common_runtime\gpu\gpu_event_mgr.cc:198] Unexpected Event status: 1
```

This issue has been reproduced on two different setups:

**Environment 1 (Home PC):**
- Operating System: Windows 10
- Anaconda: 4.2.0, Python: 3.5
- CUDA: 8.0
- cuDNN: 5.1 (for Windows 10)
- TensorFlow: 0.12.0 GPU (https://storage.googleapis.com/tensorflow/windows/gpu/tensorflow_gpu-0.12.0-cp35-cp35m-win_amd64.whl)
- Graphics Card: GeForce GTX 1060 6GB

**Environment 2 (Work PC):**
- Operating System: Windows 7
- Anaconda: 4.2.0, Python: 3.5
- CUDA: 8.0
- cuDNN: 5.1 (for Windows 7)
- TensorFlow: 0.12.0 GPU (https://storage.googleapis.com/tensorflow/windows/gpu/tensorflow_gpu-0.12.0-cp35-cp35m-win_amd64.whl)
- Graphics Card: GeForce GTX 660 3GB

To address this issue, I have shared two scripts with minor modifications that provide a workaround:
- [Google Drive Link](https://drive.google.com/open?id=0B6jkkqMOGy5cNHh3TVpxU283Ykk)

**Main Differences:**
- The script from the example that crashes (`LabLenetBad.py`) uses raw MNIST label data and applies `tf.one_hot()` to the labels.
- The workaround script (`LabLenetGood.py`) reads MNIST data with the `one_hot=True` flag and does not use the `tf.one_hot()` call on the `Y` placeholder.

Based on these observations, it appears that `tf.one_hot` may not function correctly on the GPU.