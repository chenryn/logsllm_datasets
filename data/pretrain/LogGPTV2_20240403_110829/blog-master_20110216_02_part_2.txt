---------+-----------+----------+----------+-----  
 9999999 | zhou      | digoal   | sky-mobi |  27  
(1 row)  
HOST A:  
postgres@db-172-16-3-33-> ps -eo pid,user,pmem,rssize,cmd --sort rssize|grep 172.16.3.39  
12205 postgres  4.8 703972 postgres: digoal digoal 172.16.3.39(52980) idle in transaction   
SESSION B:  
digoal=> abort;  
ROLLBACK  
digoal=> fetch last from cur_test;  
ERROR:  cursor "cur_test" does not exist  
```  
注意看内存占用的变化,对于hold游标，在取第一行的时候占用约1MB，直接跳到LAST的时候马上内存占用就上来了.  
ABORT之后CURSOR自动释放.  
相关系统表:  
```  
digoal=> \d pg_cursors  
             View "pg_catalog.pg_cursors"  
    Column     |           Type           | Modifiers   
---------------+--------------------------+-----------  
 name          | text                     |   
 statement     | text                     |   
 is_holdable   | boolean                  |   
 is_binary     | boolean                  |   
 is_scrollable | boolean                  |   
 creation_time | timestamp with time zone |   
```  
## 三、分页取(ORDER BY OFFSET x LIMIT n)  
```  
SESSION B:  
digoal=> \timing  
Timing is on.  
digoal=> select * from tbl_user order by id offset 0 limit 1;  
 id | firstname | lastname |   corp   | age   
----+-----------+----------+----------+-----  
  0 | zhou      | digoal   | sky-mobi |  27  
(1 row)  
Time: 1.354 ms  
HOST A:  
postgres@db-172-16-3-33-> ps -eo pid,user,pmem,rssize,cmd --sort rssize|grep 172.16.3.39  
13172 postgres  0.0  5256 postgres: digoal digoal 172.16.3.39(53042) idle   
SESSION B:  
digoal=> select * from tbl_user order by id desc offset 0 limit 1;  
   id    | firstname | lastname |   corp   | age   
---------+-----------+----------+----------+-----  
 9999999 | zhou      | digoal   | sky-mobi |  27  
(1 row)  
Time: 0.404 ms  
HOST A:  
postgres@db-172-16-3-33-> ps -eo pid,user,pmem,rssize,cmd --sort rssize|grep 172.16.3.39  
13172 postgres  0.0  5352 postgres: digoal digoal 172.16.3.39(53042) idle     
SESSION B:  
digoal=> select * from tbl_user order by id offset 9999999 limit 1;  
   id    | firstname | lastname |   corp   | age   
---------+-----------+----------+----------+-----  
 9999999 | zhou      | digoal   | sky-mobi |  27  
(1 row)  
Time: 1679.057 ms  
HOST A:  
postgres@db-172-16-3-33-> ps -eo pid,user,pmem,rssize,cmd --sort rssize|grep 172.16.3.39  
13172 postgres  5.7 832020 postgres: digoal digoal 172.16.3.39(53042) idle  
SESSION B: (已经全部在内存，所以现在OFFSET 99999已经比较快了,不过由于走索引，可能有随机硬盘扫描)  
digoal=> select * from tbl_user order by id offset 99999 limit 1;  
  id   | firstname | lastname |   corp   | age   
-------+-----------+----------+----------+-----  
 99999 | zhou      | digoal   | sky-mobi |  27  
(1 row)  
Time: 15.248 ms  
```  
示例:比较offset 和 move  
```  
digoal=> begin;  
BEGIN  
digoal=> declare cur_test no scroll cursor without hold for select * from tbl_user order by id;  
DECLARE CURSOR  
digoal=> \timing  
Timing is on.  
digoal=> fetch 1 from cur_test;  
 id | firstname | lastname |   corp   | age   
----+-----------+----------+----------+-----  
  0 | zhou      | digoal   | sky-mobi |  27  
(1 row)  
Time: 0.356 ms  
digoal=> move 99999 cur_test;  
MOVE 99999  
Time: 18.613 ms  
digoal=> fetch 1 from cur_test;  
   id   | firstname | lastname |   corp   | age   
--------+-----------+----------+----------+-----  
 100000 | zhou      | digoal   | sky-mobi |  27  
(1 row)  
Time: 0.286 ms  
digoal=> fetch first from cur_test;  
 id | firstname | lastname |   corp   | age   
----+-----------+----------+----------+-----  
  0 | zhou      | digoal   | sky-mobi |  27  
(1 row)  
Time: 0.308 ms  
digoal=> move 99999 cur_test;  
MOVE 99999  
Time: 18.567 ms  
```  
内存占用:  
```  
14622 postgres  0.1 18484 postgres: digoal digoal 172.16.3.39(27450) idle in transaction  
```  
```  
OFFSET:  
digoal=> \timing  
Timing is on.  
digoal=> select * from tbl_user order by id offset 99999 limit 1;  
  id   | firstname | lastname |   corp   | age   
-------+-----------+----------+----------+-----  
 99999 | zhou      | digoal   | sky-mobi |  27  
(1 row)  
Time: 19.484 ms  
```  
内存占用  
```  
14904 postgres  0.1 18496 postgres: digoal digoal 172.16.3.39(27452) idle     
```  
消耗的时间和内存的占用两种方法基本相同.不过再看看下面的例子，你会发现，CURSOR的开销是一次性的，而OFFSET是每次都要开销这么多  
```  
digoal=> \timing  
Timing is on.  
digoal=> begin;  
BEGIN  
Time: 0.287 ms  
digoal=> declare cur_test no scroll cursor without hold for select * from tbl_user order by id;  
DECLARE CURSOR  
Time: 1.121 ms  
digoal=> move 100000 from cur_test;  
MOVE 100000  
Time: 18.638 ms  
digoal=> fetch 10 from cur_test;  
   id   | firstname | lastname |   corp   | age   
--------+-----------+----------+----------+-----  
 100000 | zhou      | digoal   | sky-mobi |  27  
 100001 | zhou      | digoal   | sky-mobi |  27  
 100002 | zhou      | digoal   | sky-mobi |  27  
 100003 | zhou      | digoal   | sky-mobi |  27  
 100004 | zhou      | digoal   | sky-mobi |  27  
 100005 | zhou      | digoal   | sky-mobi |  27  
 100006 | zhou      | digoal   | sky-mobi |  27  
 100007 | zhou      | digoal   | sky-mobi |  27  
 100008 | zhou      | digoal   | sky-mobi |  27  
 100009 | zhou      | digoal   | sky-mobi |  27  
(10 rows)  
Time: 0.317 ms  
digoal=> fetch 10 from cur_test;  
   id   | firstname | lastname |   corp   | age   
--------+-----------+----------+----------+-----  
 100010 | zhou      | digoal   | sky-mobi |  27  
 100011 | zhou      | digoal   | sky-mobi |  27  
 100012 | zhou      | digoal   | sky-mobi |  27  
 100013 | zhou      | digoal   | sky-mobi |  27  
 100014 | zhou      | digoal   | sky-mobi |  27  
 100015 | zhou      | digoal   | sky-mobi |  27  
 100016 | zhou      | digoal   | sky-mobi |  27  
 100017 | zhou      | digoal   | sky-mobi |  27  
 100018 | zhou      | digoal   | sky-mobi |  27  
 100019 | zhou      | digoal   | sky-mobi |  27  
(10 rows)  
Time: 0.223 ms  
OFFSET:  
digoal=> select * from tbl_user order by id offset 100000 limit 10;  
   id   | firstname | lastname |   corp   | age   
--------+-----------+----------+----------+-----  
 100000 | zhou      | digoal   | sky-mobi |  27  
 100001 | zhou      | digoal   | sky-mobi |  27  
 100002 | zhou      | digoal   | sky-mobi |  27  
 100003 | zhou      | digoal   | sky-mobi |  27  
 100004 | zhou      | digoal   | sky-mobi |  27  
 100005 | zhou      | digoal   | sky-mobi |  27  
 100006 | zhou      | digoal   | sky-mobi |  27  
 100007 | zhou      | digoal   | sky-mobi |  27  
 100008 | zhou      | digoal   | sky-mobi |  27  
 100009 | zhou      | digoal   | sky-mobi |  27  
(10 rows)  
Time: 15.432 ms  
digoal=> select * from tbl_user order by id offset 100010 limit 10;  
   id   | firstname | lastname |   corp   | age   
--------+-----------+----------+----------+-----  
 100010 | zhou      | digoal   | sky-mobi |  27  
 100011 | zhou      | digoal   | sky-mobi |  27  
 100012 | zhou      | digoal   | sky-mobi |  27  
 100013 | zhou      | digoal   | sky-mobi |  27  
 100014 | zhou      | digoal   | sky-mobi |  27  
 100015 | zhou      | digoal   | sky-mobi |  27  
 100016 | zhou      | digoal   | sky-mobi |  27  
 100017 | zhou      | digoal   | sky-mobi |  27  
 100018 | zhou      | digoal   | sky-mobi |  27  
 100019 | zhou      | digoal   | sky-mobi |  27  
(10 rows)  
Time: 15.170 ms  
```  
所以有可能的话还是尽量使用CURSOR来做翻页  
cursor使用需要注意如下事项:  
1\. 指针使用完一定要记得用close关掉.  
2\. 尽量避免在大的结果集下使用with hold游标，因为需要将数据预加载到内存或临时文件，并发大并且结果集较大的话可能导致内存消耗过多。  
3\. 同时应尽量避免长事务(如等待用户翻页)，由于带有without hold指针的事务会影响VACUUM回收空间,这个是非常严重的事情。  
其他:  
python的fetchall，fetchmany函数分别返回所有和多个  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")