ture of the group.
GSAKMP protects the group by controlling access to
group keys. The access control rules and compliance
mechanisms are deﬁned in the policy token.
Initially, the policy issuance authority (Group Owner)
passes the token to the group controller (GC). The GC
uses the token’s access control rules to restrict access to
the group key. In all instances, there will be a member
of the group who is authorized to disseminate keys and
perform access control.
The group member presents required credentials to the
GC. Using these credentials as proof, the GC ensures that
the access control criteria is met prior to release of the
group key.
Equally important, the potential group member veriﬁes
the authority of GC or SGCs to make access control deci-
sions. In verifying the authenticity of messages received
from controllers, a group member is protected from ac-
cepting false keys and inadvertently revealing conﬁdential
group information.
Principle 3: Group information must be protected
a) Cryptographic mechanisms
speciﬁed
in
the
GSAKMP token protect group data.
b) Access to the group is granted by issuing the group
cryptographic key(s).
c) Keys can be obtained only through legitimate distri-
bution or from compromise.
Initial key distribution is secure, which is reasoned as
follows. Keys are distributed in a pairwise manner. The
pairwise join protocol is secure: 1) its messages are signed
by authorized entities and subsequently veriﬁed; 2) the
sender and intended recipient of the messages are explicit;
3) the messages freshness are indicated by nonces; and
4) the download of the keys are protected by a group-
appropriate conﬁdentiality mechanism as indicated by the
GSAKMP policy token. The design of the initial ex-
change is based on well known principles of peer authen-
tication and key distribution protocols [6, 1, 2].
Keys are distributed to authorized individuals only. The
authorization rules are listed in the policy token. These
rules are trusted (1-1). Because the pairwise distribution
to each individual member is done securely and because
groups are comprised of individual members, the initial
key distribution to the group is secure.
The ﬁrst rekey under LKH is sent encrypted in keys ob-
tained through initial distribution, which is secure. Only
authorized members received these keys through initial
distribution. Subsequent rekeys are sent encrypted ei-
ther in initial keys or in keys distributed through previous
rekeys.
d) If keys are obtained through compromise and that
compromise is discovered, the group is rekeyed such
that any compromised key is no longer valid.
GSAKMP provides a framework for advanced recovery
mechanisms; LKH is implemented in the reference soft-
ware. GSAKMP distributes LKH key arrays during group
establishment and uses the key tree to rekey following the
detection of member compromise. Over the course of the
session, each member receives an array of keys that corre-
spond to a unique path in the key tree.
GSAKMP deﬁnes compromise recovery as a security
relevant action. Thus, policy deﬁnes the rules and mecha-
nisms needed to issue a recovery message. However, com-
promise detection and reporting is outside of the scope of
the GSAKMP protocol.
Upon receipt of a compromise report, the GC creates
an LKH recovery message identifying the current policy
token. The GC instigates recovery by signing and trans-
mitting the recovery message.
All group members verify the authenticity of the recov-
ery message. Once the LKH message saturates the group3,
the compromise member is excluded from the new secu-
rity association. Thus, a secure state of operation is recov-
ered.
A member not receiving the recovery message will no
longer have access to the group. In this case, the mem-
3For brevity, these arguments do not discuss faults, accidental or in-
duced, related to unreliable nature of group communication.
will be forced to rejoin through the authenticated join
ber
exchange.
Principle 4: Groups must be capable of recovery from
security failures to a secure state
a) A security failure can occur when an adversary at-
tempts to masquerade as an authorized individual.
b) Any failure in veriﬁcation of the join exchange (sig-
nature, nonce, identiﬁcation ﬁeld, or inadequate cre-
dentials) are detectable by both parties. In this case,
the join exchange is aborted.
c) Counterfeit rekey messages are detected. Bad rekey
message will fail contain incorrect signatures, times-
tamps, or fail to be authorized.
d) Counterfeit group delete messages are also detected.
Bad group delete message will contain incorrect sig-
natures or fail to be authorized.
e) Group access via key compromise is remedied via
LKH as discussed previously; therefore, the group
will rapidly be rekeyed causing all compromised keys
to be invalid. This will result in denial of access to
any entity possessing only the compromised keys.
4. Related Work
The Internet Engineering Task Force (IETF), Policy
Framework working group is chartered with the devel-
opment of an architecture supporting the management of
network devices through abstract policies. In the policy
architecture [29], the desired behavior of each device is
stated through sets of policy rules. A policy rule is a
conditional statement identifying a set of (possibly ab-
stract) actions that are to be executed in environments
when/where the conditions are satisﬁed. However, the se-
curity of the distribution and enforcement of these rules
has yet to be addressed.
The Security Policy System [26] is an architecture sup-
porting ﬂexible deﬁnition and distribution of security poli-
cies for IPSec security associations (SA)s. The central
speciﬁcation documents include; an architecture overview
[26], a policy speciﬁcation language [8], and a policy dis-
tribution protocol deﬁnition [27]. To simplify, clients of
the policy system query the policy database for connection
policies. Connections are accepted only if they meet the
requirements of policies obtained from a policy database
in the server domain. The mechanisms used to secure
communication are deﬁned in the connection policies.
Developed by Branstad et. al., the Dynamic Crypto-
graphic Context Management (DCCM) system [10] is
used to deﬁne and enforce security policies within very
large groups (100,000+ members). A principle contribu-
tion of DCCM is its use of policy as entirely deﬁning the
context in which a group operates. Policy may be negoti-
ated or stated by an initiating member, and ﬂexible mech-
anisms for policy representation and interpretation are de-
ﬁned.
The Antigone framework [21] provides ﬂexible inter-
faces for the deﬁnition and implementation of a wide
range of secure group policies. A central element of
the Antigone architecture is a set of mechanisms provid-
ing the basic services needed for secure groups. Policies
are implemented by the composition and conﬁguration of
these mechanisms. Thus, Antigone does not dictate the
available security policies to an application, but provides
high-level mechanisms for implementing them.
Many recent advances in the use of policy in distributed
systems have occurred in the realm of authorization and
access control.
Introduced in [3] by Blaze et. al., trust
management provides a uniﬁed approach for the speciﬁ-
cation and evaluation of security policies. Trust manage-
ment focuses centrally on development of access control
policy through the speciﬁcation of evaluation of trust rela-
tionships. At the core of any trust management system is
a domain independent language used to specify the capa-
bilities, policies, and relationships between entities. Each
application subscribing to a trust management service pro-
vides policy speciﬁcations to a central component called
the trust management engine. An application consults the
engine for access control decisions at run-time. The en-
gine evaluates the access control request using the policy
speciﬁcation and environmental data. Therefore, applica-
tions need not evaluate access control policies directly, but
defer analysis to the trust management engine.
Through rigorous analysis, the PolicyMaker [3] trust
management engine has been proven to be correct. Thus,
with respect to the policy speciﬁcation, any application
using PolicyMaker is guaranteed to evaluate each pol-
icy decision correctly. However, policy enforcement is
left to the application. Recent systems (e.g KeyNote [4]
and REFEREE [7]) have extended the trust management
approach by simplifying application interfaces and intro-
ducing a limited set of enforcement facilities. Other ap-
proaches addressing access control policy in distributed
environments (e.g., Akenti [30], GAA API [25]) approach
the management of trust in similar ways, but with some-
what different goals, requirements, and architectures.
The Internet Engineering Research Force (IRTF), Se-
cure Multicast Research Group (SMuG) is researching
a suite of standards and associated reference architec-
ture [13] upon which secure multicast applications can
be built. In addition to the speciﬁcation of cryptographic
transforms [5] (i.e., content security) and key management
protocols [14], this work will deﬁne a policy management

infrastructure
appropriate for secure multicast. The policy
team has recently published a taxonomy of group policies
[19] and a requirements statement is forthcoming.
5. Conclusions
This paper considers the requirements of policy in se-
cure group communication. We have identiﬁed a set of
universal principals that can be used to guide the design of
security policy in secure group communication systems.
These principles not only address the pragmatic require-
ments for the correct and secure operation of standard ser-
vices, but identify requirements for the secure distribution
and synchronization of policy speciﬁcations.
In our investigation, we found that it is necessary, but
not sufﬁcient, to correctly specify policy. Once a pol-
icy is speciﬁed, it must be securely distributed, authen-
ticated, and enforced. This illustrates the fragility of secu-
rity in general; incorrect implementation of any one secu-
rity function can invalidate guarantees provided by others.
Over the lifetime of the group, consensus surrounding
the deﬁnition and interpretation of policy must be main-
tained by all participants. Failure to correctly synchronize
a policy deﬁnition can lead to undetected vulnerabilities.
If a policy is not uniformly interpreted by group members,
the security of the group as a whole can be compromised.
The attribution of authority in groups is of paramount
importance. Failure to correctly identify and authorize
secure action can lead to any number of vulnerabilities.
Thus, the protection of the group content is largely de-
ﬁned by the veriﬁcation and enforcement of rules deﬁning
authorization and access control.
Finally, we note that member compromise is an in-
evitability for many applications. Thus, a resilient group
must be able to recover from compromise to a secure state.
This often requires the ejection of compromised members
in a way that does signiﬁcantly affect the performance or
security of the group as a whole.
We have evaluated the Group Security Association Key
Management Protocol under the identiﬁed principles. We
have investigated where known and accepted principles
of (peer oriented) secure system construction and analysis
are applicable to groups. Furthermore, we have demon-
strated GSAKMP compliance with these principles.
In the end, policy supported communication is only go-
ing to be as successful as the abilities of entities specify-
ing policy permit. We, as researchers and engineers, can
develop rigorous frameworks in which policy can be spec-
iﬁed, distributed, and enforced. However, preventing the
speciﬁcation of bad policies is a much harder problem.
Environmental issues are likely to determine the correct-
ness of a given policy. Thus, education of the user com-
munity will play a large role in the correct operation of the
supported applications.
References
[1] M. Abadi and R. Needham. Prudent Engineering Practice
for Cryptographic Protocols. IEEE Transactions on Soft-
ware Engineering, 22(1):6–15, January 1996.
[2] R. Anderson and R. Needham. Robustness Principles for
Public Key Protocols. In Lecture Notes in Computer Sci-
ence, Don Coppersmith (Ed.), Advances in Cryptology
– CRYPTO ’95, volume 963, pages 236–247. Springer-
Verlag, 1995.
[3] M. Blaze, J. Feigenbaum, and J. Lacy. Decentralized Trust
Management.
In Proceedings of the 1996 IEEE Sympo-
sium on Security and Privacy, pages 164–173, November
1996. Los Alamitos.
[4] M. Blaze, J. Feignbaum, J. Ioannidis, and A. Keromytis.
The KeyNote Trust Management System - Version 2. In-
ternet Engineering Task Force, September 1999. RFC
2704.
[5] R. Canetti, P. Rohatgi, and P.-C. Cheng. Multicast
Data Security Transformations: Requirements, Consid-
erations, and Proposed Design.
Internet Engineering
Task Force, June 2000. draft-irtf-smug-data-
transforms-00.txt.
[6] U. Carlsen. Cryptographic Protocol Flaws: Know Your
In Proceedings of 7th IEEE Computer Security
Enemy.
Foundations Workshop, pages 192–200. IEEE, 1994.
[7] Y. Chu, J. Feigenbaum, B. LaMacchia, P. Resnick, and
M. Strauss. REFEREE: Trust Management for Web Ap-
plications. In Proceedings of Financial Cryptography ’98,
volume 1465, pages 254–274, Anguilla, British West In-
dies, February 1998. Springer-Verlag.
[8] M. Condell, C. Lynn, and J. Zao. Security Policy System
Language (Draft). Internet Engineering Task Force, July
1999. draft-ietf-ipsec-spsl-01.txt.
[9] W. Difﬁe and M. Hellman. New Directions in Cryptog-
IEEE Transactions on Information Theory, IT-
raphy.
22(6):644–654, November 1976.
[10] P. Dinsmore, D. Balenson, M. Heyman, P. Kruus,
C. Scace, and A. Sherman. Policy-Based Security Man-
agement for Large Dynamic Groups: A Overview of the
DCCM Project.
In Proceedings of DARPA Information
Survivability Conference and Exposition (DISCEX ’00),
pages 64–73. DARPA, January 2000. Hilton Head, S.C.
[11] D. Dolev and D. Malki. The Transis Approach to High
Availibility Cluster Communication. Communications of
the ACM, 39(4), April 1996.
[12] M. Fischer, N. Lynch, and M. Paterson. Impossibility of
Distributed Consensus with One Faulty Process. Journal
of the ACM, 32(2):374–382, 1985.
[13] T. Hardjono, R. Canetti, M. Baugher, and m P. Dins-
more. Secure Multicast: Problem Areas, Framework, and
Building Blocks (Draft). Internet Engineering Task Force,
October 1999.
draft-irtf-smug-framework-
00.txt.
[14] H. Harney, M. Baugher, and T. Hardjono. GKM Bukld-
ing Block: Group Security Association (GSA) Deﬁnition
(Draft). Internet Engineering Task Force, February 2000.
draft-irtf-smug-gkmbbb-gsadef-00.txt.

[15] H. Harney, A. Colegrove, E. Harder, U. Meth, and R. Fleis-
cher. Group Secure Association Key Management Proto-
col (Draft). Internet Engineering Task Force, April 2000.
draft-harney-sparta-gsakmp-sec-01.txt.
[16] H. Harney and C. Muckenhirn. Group Key Management
Protocol (GKMP) Architecture. Internet Engineering Task
Force, July 1997. RFC 2094.
[17] H. Harney and C. Muckenhirn. Group Key Manage-
ment Protocol (GKMP) Speciﬁcation. Internet Engineer-
ing Task Force, July 1997. RFC 2093.
[18] H. Krawczyk, M. Bellare, and R. Canetti. HMAC: Keyed-
Hashing for Message Authentication. Internet Engineer-
ing Task Force, April 1997. RFC 2104.
[19] P. McDaniel, H. Harney, P. Dinsmore, and A. Prakash.
Multicast Security Policy (Draft). Internet Research Task
Force, Secure Mutlicast Research Group (SMuG), June
2000.
draft-irtf-smug-mcast-policy-00.txt.
[20] P. McDaniel and A. Prakash. Lightweight Failure De-
tection in Secure Group Communication. Technical Re-
port CSE-TR-428-00, Electrical Engineering and Com-
puter Science, University of Michigan, June 2000.
[21] P. McDaniel, A. Prakash, and P. Honeyman. Antigone:
A Flexible Framework for Secure Group Communication.
In Proceedings of the 8th USENIX Security Symposium,
pages 99–114, August 1999.
[22] S. Mittra. Iolus: A Framework for Scalable Secure Mul-
ticasting. In Proceedings of ACM SIGCOMM ’97, pages
277–278. ACM, September 1997.
[23] S. Mullender. Distributed Systems. Addison-Wesley, First
edition, 1993.
[24] M. Reiter. Secure Agreement Protocols: Reliable and
Atomic Group Multicast in Rampart.
In Proceedings of
2nd ACM Conference on Computer and Communications
Security, pages 68–80. ACM, November 1994.
[25] T. Ryutov and C. Neuman. Representation and Evaluation
In
of Security Policies for Distributed System Services.
Proceedings of DARPA Information Survuvability Confer-
ence and Exposition, pages 172–183, Hilton Head, South
Carolina, January 2000. DARPA.
[26] L. Sanchez and M. Condell.
Security Policy System
(Draft). Internet Engineering Task Force, November 1998.
draft-ietf-ipsec-sps.txt.
[27] L. Sanchez and M. Condell. Security Policy Protocol
Internet Engineering Task Force, July 1999.
(Draft).
draft-ietf-ipsec-spp-00.txt.
[28] M. Steiner, G. Tsudik, and M. Waidner. CLIQUES: A New
Approach to Group Key Agreement. In International Con-
ference on Distributed Computing Systems (ICDCS’98).
IEEE, May 1998.
[29] M. Stevens, W. Weiss, H. Mahon, B. Moore, J. Strassner,
G. Waters, A. Westerinen, and J. Wheeler. Policy Frame-
work (Draft). Internet Engineering Task Force, Septem-
ber 1999.
(draft-ietf-policy-framework-
00.txt).
[30] M. Thompson, W. Johnson, S. Mudumbai, G. Hoo,
K. Jackson, and A. Essiari. Certiﬁcate-based Access Con-
trol for Widely Distributed Resources. In Proceedings of
8th USENIX UNIX Security Symposium, pages 215–227.
USENIX Association, August 1999. Washington D. C.
[31] D. M. Wallner, E. J. Harder, and R. C. Agee. Key Manage-
ment for Multicast: Issues and Architectures (Draft). In-
ternet Engineering Task Force, September 1998. draft-
wallner-key-arch-01.txt.
[32] C. K. Wong, M. Gouda, and S. S. Lam. Secure Group
Communication Using Key Graphs.
In Proceedings of
ACM SIGCOMM ’98, pages 68–79. ACM, September
1998.