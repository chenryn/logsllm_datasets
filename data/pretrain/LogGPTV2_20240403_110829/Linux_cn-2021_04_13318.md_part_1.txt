---
author: Stephan Avenwedde
category: 软件开发
comments_data: []
count:
  commentnum: 0
  favtimes: 0
  likes: 0
  sharetimes: 0
  viewnum: 6193
date: '2021-04-21 18:48:31'
editorchoice: false
excerpt: 了解 Linux 如何使用库，包括静态库和动态库的差别，有助于你解决依赖问题。
fromurl: https://opensource.com/article/20/6/linux-libraries
id: 13318
islctt: true
largepic: /data/attachment/album/202104/21/184822euzoqsiwxxpiqqrr.jpg
permalink: /article-13318-1.html
pic: /data/attachment/album/202104/21/184822euzoqsiwxxpiqqrr.jpg.thumb.jpg
related: []
reviewer: wxy
selector: lujun9972
summary: 了解 Linux 如何使用库，包括静态库和动态库的差别，有助于你解决依赖问题。
tags:
- 动态库
- 静态库
- 编译
thumb: false
title: 怎样在 Linux 中使用动态和静态库
titlepic: true
translator: tt67wq
updated: '2021-04-21 18:48:31'
---
> 
> 了解 Linux 如何使用库，包括静态库和动态库的差别，有助于你解决依赖问题。
> 
> 
> 
![](/data/attachment/album/202104/21/184822euzoqsiwxxpiqqrr.jpg "Hand putting a Linux file folder into a drawer")
Linux 从某种意义上来说就是一堆相互依赖的静态和动态库。对于 Linux 系统新手来说，库的整个处理过程简直是个迷。但对有经验的人来说，被构建进操作系统的大量共享代码对于编写新应用来说却是个优点。
为了让你熟悉这个话题，我准备了一个小巧的 [应用例子](https://github.com/hANSIc99/library_sample) 来展示在普通的 Linux 发行版（在其他操作系统上未验证）上是经常是如何处理库的。为了用这个例子来跟上这个需要动手的教程，请打开命令行输入：
```
$ git clone https://github.com/hANSIc99/library_sample
$ cd library_sample/
$ make
cc -c main.c -Wall -Werror
cc -c libmy_static_a.c -o libmy_static_a.o -Wall -Werror
cc -c libmy_static_b.c -o libmy_static_b.o -Wall -Werror
ar -rsv libmy_static.a libmy_static_a.o libmy_static_b.o
ar: creating libmy_static.a
a - libmy_static_a.o
a - libmy_static_b.o
cc -c -fPIC libmy_shared.c -o libmy_shared.o
cc -shared -o libmy_shared.so libmy_shared.o
$ make clean
rm *.o
```
当执行完这些命令，这些文件应当被添加进目录下（执行 `ls` 来查看）：
```
my_app
libmy_static.a
libmy_shared.so
```
### 关于静态链接
当你的应用链接了一个静态库，这个库的代码就变成了可执行文件的一部分。这个动作只在链接过程中执行一次，这些静态库通常以 `.a` 扩展符结尾。
静态库是多个 目标   object 文件的 归档   archive （[ar](https://en.wikipedia.org/wiki/Ar_%28Unix%29)）。这些目标文件通常是 ELF 格式的。ELF 是    可执行可链接格式    Executable and Linkable Format  的简写，它与多个操作系统兼容。
`file` 命令的输出可以告诉你静态库 `libmy_static.a` 是 `ar` 格式的归档文件类型。
```
$ file libmy_static.a
libmy_static.a: current ar archive
```
使用 `ar -t`，你可以看到归档文件的内部。它展示了两个目标文件：
```
$ ar -t libmy_static.a
libmy_static_a.o
libmy_static_b.o
```
你可以用 `ax -x ` 命令来提取归档文件的文件。被提出的都是 ELF 格式的目标文件：
```
$ ar -x libmy_static.a
$ file libmy_static_a.o
libmy_static_a.o: ELF 64-bit LSB relocatable, x86-64, version 1 (SYSV), not stripped
```
### 关于动态链接
动态链接指的是使用共享库。共享库通常以 `.so` 的扩展名结尾（“ 共享对象   shared object ” 的简写）。
共享库是 Linux 系统中依赖管理的最常用方法。这些共享库在应用启动前被载入内存，当多个应用都需要同一个库时，这个库在系统中只会被加载一次。这个特性减少了应用的内存占用。
另外一个值得注意的地方是，当一个共享库的 bug 被修复后，所有引用了这个库的应用都会受益。但这也意味着，如果一个 bug 还没被发现，那所有相关的应用都会遭受这个 bug 影响（如果这个应用使用了受影响的部分）。
当一个应用需要某个特定版本的库，但是 链接器   linker 只知道某个不兼容版本的位置，对于初学者来说这个问题非常棘手。在这个场景下，你必须帮助链接器找到正确版本的路径。
尽管这不是一个每天都会遇到的问题，但是理解动态链接的原理总是有助于你修复类似的问题。
幸运的是，动态链接的机制其实非常简洁明了。
为了检查一个应用在启动时需要哪些库，你可以使用 `ldd` 命令，它会打印出给定文件所需的动态库：
```
$ ldd my_app
        linux-vdso.so.1 (0x00007ffd1299c000)
        libmy_shared.so => not found
        libc.so.6 => /lib64/libc.so.6 (0x00007f56b869b000)
        /lib64/ld-linux-x86-64.so.2 (0x00007f56b8881000)
```
可以注意到 `libmy_shared.so` 库是代码仓库的一部分，但是没有被找到。这是因为负责在应用启动之前将所有依赖加载进内存的动态链接器没有在它搜索的标准路径下找到这个库。
对新手来说，与常用库（例如 `bizp2`）版本不兼容相关的问题往往十分令人困惑。一种方法是把该仓库的路径加入到环境变量 `LD_LIBRARY_PATH` 中来告诉链接器去哪里找到正确的版本。在本例中，正确的版本就在这个目录下，所以你可以导出它至环境变量：
```
$ LD_LIBRARY_PATH=$(pwd):$LD_LIBRARY_PATH
$ export LD_LIBRARY_PATH
```
现在动态链接器知道去哪找库了，应用也可以执行了。你可以再次执行 `ldd` 去调用动态链接器，它会检查应用的依赖然后加载进内存。内存地址会在对象路径后展示：
```
$ ldd my_app
        linux-vdso.so.1 (0x00007ffd385f7000)
        libmy_shared.so => /home/stephan/library_sample/libmy_shared.so (0x00007f3fad401000)
        libc.so.6 => /lib64/libc.so.6 (0x00007f3fad21d000)
        /lib64/ld-linux-x86-64.so.2 (0x00007f3fad408000)
```
想知道哪个链接器被调用了，你可以用 `file` 命令：
```
$ file my_app
my_app: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=26c677b771122b4c99f0fd9ee001e6c743550fa6, for GNU/Linux 3.2.0, not stripped
```