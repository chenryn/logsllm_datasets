      $q3=mysql_query("select * from `$table`");
      while($data=mysql_fetch_assoc($q3)){
        $keys=array_keys($data);
        $keys=array_map('addslashes',$keys);
        $keys=join('`,`',$keys);
        $keys="`".$keys."`";
        $vals=array_values($data);
        $vals=array_map('addslashes',$vals);
        $vals=join("','",$vals);
        $vals="'".$vals."'";
        $mysql.="insert into `$table`($keys) values($vals);\r\n";
      }
    }
**array_map() 函数**
将用户自定义函数作用到数组中的每个值上，并返回用户自定义函数作用后的带有新的值的数组。
**提示：** 您可以向函数输入一个或者多个数组。array_map( _myfunction,array1,array2,array3_...)
可以看到，$vals变量经过 **array_map() 函数** 处理后，全部经过了addlashes()转义处理来防止注入(
**addslashes() 函数返回在预定义字符(单·双引号、反斜杠（\）、NULL)之前添加反斜杠的字符串。** )，之后经过
**$vals="'".$vals."'";** 语句处理，添加单引号包裹，就完全杜绝了sql注入的可能性，无法构造闭合。（ **ps:**
要是这里没有添加单引号，此处语句括号闭合不在该函数的预定义字符内，则就实际上等于没有防护到，还是可以注入，十分可惜）。另一个变量 **$keys**
几乎是一样的情况，甚至防护更严格，因此也不存在注入，综上，此处属于seay的误报。
不纠结，下一处：
##### /template/wapian/vlist.php
直接看关键代码：
    '.$row['c_name'].'';
    }
    ?>
对$_GET['cid']变量，不经过滤，直接单引号包裹，文件头没有引入转义函数文件，带入查询，典型的sql注入：sql注入（但是这里审计出来的代码闭合方式应该是单引号闭合，但是测试却失败了，这是怎么回事？）sqlmap跑一下看看：
    python2 sqlmap.py -u "http://127.0.0.1/template/wapian/vlist.php?cid=1" --dbs --batch
可以看到，注出了数据库，payload:
    cid=1) UNION ALL SELECT NULL,NULL,CONCAT(0x7162717a71,0x4572725a7062476e5a734c4f51454742724f4579755449744967454b6a695461545a4857576a7952,0x7170706271),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- -    
（闭合竟然是小括号？）这是为什么？先放过，之后再来研究。
##### visit.php
这个文件有注入漏洞，那么自然有理由推断，引用这个文件的文件也有相同的漏洞，所以全局搜索template/wapian/vlist.php文件，然后发现：
在很多文件如：
seacher.php, tv.php, ustv.php, wxseacher.php，vlist.php等文件中都有相同引用：
    include('template/'.$xtcms_bdyun.'/wxseacher.php');
这里的 **$xtcms_bdyun**
向上回溯实际上就是wapian，是从xtcms_vod_class这个数据库表中查询出的数据，因此是固定的。但是，在这些文件中，大部分都有关于
**include('system/inc.php');** 文件的引用，我们知道system/inc.php文件中又有
**require_once('function.php');**
文件的引用，即进行转义处理，也就断绝了sql注入。而只有visit.php这个文件中，代码如下：
    '.$row['c_name'].'';
            }
    ?>
并没有对转义文件的引用，因此肯定存在该注入漏洞，直接sqlmap 跑一下，即可。
##### **admin/cms_book_edit.php**
有数据库交互，单引号闭合，不过文件头引入了 **../system/inc.php** 文件进行转义防注入处理，因此属于seay误报，同样的情况在
    admin/cms_ad_edit.php
    admin/cms_admin_edit.php
等文件中也相同出现，都有转义引用，而没有stripslashes() 函数去除预定义字符的处理，因此这写文件中的报洞都属于误报。
##### admin/youlian_edit.php
    。。。。
    。。。。
    。。。。
    ">导出
中间不重要，我们直接省略，看关键位置。 **$_GET['id']**
变量经过判断，若果存在，引入转义文件过滤预定义字符（但我们知道，该方法对xss的防御力几近于无）然后对变量直接输出，这就造成了一个简单的反射型xss