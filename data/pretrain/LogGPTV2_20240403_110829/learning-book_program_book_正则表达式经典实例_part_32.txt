End While
Java
List resultList = new ArrayList();
Pattern regex= Pattern.compile("\\d+");
Matcher regexMatcher = regex.matcher(subjectString);
while (regexMatcher.find())(
if (Integer.parseInt(regexMatcher.group()) 13 == 0)(
resultList.add(regexMatcher.group ());
使用正则表达式编程
155
www.TopSage.com
---
## Page 172
JavaScript
var list = [];
var regex =/\d+/g;
var match = null;
while (match = regex.exec(subject)){
// Don't let browsers such as Firefox get stuck in an infinite loop
if (match.index == regex.lastIndex) regex.lastIndex++;
//Here you can process the match stored in the match variable
if（match[0]13==0){
list.push(match[0]) ;
PHP
preg_match_a11('/\d+/'，$subject，$matchdata,PREG_PATTERN_ORDER);
for （$i=0;$itag标记为了粗体。现在你想要
找到所有标记为粗体的数字。如果有的粗体文本中包含了多个数字，那么你想要分别
匹配它们。例如，当处理字符串234567的时候，你想要找到4个
匹配：2、5、6和7。
解决方案
#
StringCollection resultList = new StringCollection();
Regex outerRegex = new Regex("(.*?)", RegexOptions.Singleline);
Regex innerRegex = new Regex(@"\d+");
//Find the first section
Match outerMatch = outerRegex.Match(subjectString);
while (outerMatch.Success)(
使用正则表达式编程
157
www.TopSage.com
---
## Page 174
//Get the matches within the section
while (innerMatch.Success) (
resultList.Add (innerMatch.Value);
innerMatch = innerMatch.NextMatch();
//Find the next section
outerMatch =outerMatch.NextMatch();
VB.NET
Dim ResultList = New StringCollection
Dim OuterRegex As New Regex("(.*?)", RegexOptions.Singleline)
Dim InnerRegex As New Regex("\d+")
'Find the first section
Dim OuterMatch = OuterRegex.Match(SubjectString)
While OuterMatch.Success
'Get the matches within the section
Dim InnerMatch = InnerRegex.Match(OuterMatch.Groups(1).Value)
While InnerMatch.Success
ResultList.Add (InnerMatch.Value)
InnerMatch = InnerMatch.NextMatch
End While
OuterMatch = OuterMatch.NextMatch
End While
Java
使用2个匹配器来遍历会比较容易，这可以用于Java4及更高版本：
List resultList = new ArrayList();
Pattern outerRegex = Pattern.compile("(.*?)",Pattern.DoTALL);
Pattern innerRegex = Pattern.compile("\\d+");
while (outerMatcher.find()){
Matcher innerMatcher = innerRegex.matcher(outerMatcher.group());
while (innerMatcher.find())(
resultList.add(innerMatcher.group());
下面的代码效率更高（因为innerMatcher只创建了一次），但是要求Java5或者更高版本：
List resultList = new ArrayList();
Pattern innerRegex = Pattern.compile("\\d+");
Matcher innerMatcher = innerRegex.matcher(subjectString);
while (outerMatcher.find())(
第3章
www.TopSage.com
---
## Page 175
innerMatcher.region(outerMatcher.start(),outerMatcher.end());
while (innerMatcher.find())(
resultList.add(innerMatcher.group());
JavaScript
var result = [];
（[\)<>=x
var innerRegex =/\d+/g;
var outerMatch = null;
while (outerMatch =outerRegex.exec(subject)){
if (outerMatch.index w= outerRegex.lastIndex)
outerRegex.lastIndex++;
var innerSubject = subject.substr(outerMatch.index,
outerMatch[0].length);
var innerMatch = null;
while （innerMatch = innerRegex.exec(innerSubject))(
if (innerMatch.index == innerRegex.lastIndex)
innerRegex.lastIndex++;
result.push(innerMatch[0]);
PHP
$list = array();
preg_match_all('$(.*?)$s'，$subject，$outermatches,
PREG_PATTERN_ORDER);
for （$i=O;$i（)~=qn）m
push(@1ist，（$& =~m/\d+/g)）;
这只能用于在内层的正则表达式（在这个例子中的八d+>）中不包含任何捕获分组的情
况，因此你应当只使用非捕获分组。更多细节请参考实例2.9。
Python
list =[]
innerre = re.compile(r"\d+")
使用正则表达式编程
159
www.TopSage.com
---
## Page 176
for outermatch in re.finditer("(?s)(.*?)", subject):
list.extend (innerre.findall(outermatch.group(1)))
Ruby
list = [1
sdnoxbxno）（/（）/)uesoqs
list += outergroups[0].scan(/\d+/)
）
讨论
正则表达式非常适合于对输入进行token解析（tokenizing），但是它们却很不适合对输
人进行分析。token解析指的是在字符串中识别不同的组成部分，例如数字，单词，符
号，标记，注释，等等。它涉及从左向右扫描文本，在匹配的过程中尝试不同的选择，
以及尝试不同的字符数量。正则表达式可以很好地完成这一任务。
分析意味着处理这些token之间的关系。例如，在编程语言中，这些token的组合就形
成了语句、函数、类、命名空间等。要想把这些token在更大的上下文中的含义记录下
来，最好还是留给过程代码来做。具体来讲，正则表达式不能记录非线性化的上下文，
例如嵌套结构”。
试图在一种token中寻找另一种token则是人们通常会用正则表达式来解决的任务。一
堆HTML粗体tag是很容易用正则表达式来进行匹配的：（(.*?)/b>。用正则表达
式匹配一个数字就更加容易了：《d+>。但是如果你试图把这两个正则表达式组合到一
个正则表达式中，那么就会得到一个看起来很不相同的正则表达式：
\d+(?=(?:(？!).) *)
正则选项：None
正则流派：NET、Java、JavaScript、PCRE、Perl、Python、Ruby
虽然刚刚给出的这个正则表达式也能够解决这个实例所提出的问题，但它却很不直观。
即使一个正则表达式专家也需要花很长时间研究才能知道它是做什么用的，或者可能
还需要求助于工具来检查它的匹配。而这仅仅是两个简单正则式的组合而已。
更好的一种解决方案是不要试图改变这两个正则表达式，而是使用过程代码来组合它
们。这样所得到的代码虽然有点儿长，但是却更加容易理解和维护，而我们最初使用
正则表达式的主要原因就是为了创造简单的代码。像（（.*?/b>）这样的正则表达
式是任何稍微懂一些正则表达式的人都很容易理解的，而且能够很快解决可能需要许
多行代码才能解决的问题。
有些现代的正则流派也尝试着引人了平衡或者递归匹配。然而，这些特性却导致了非常复杂的正则
表达式，这反而证明了我们所提到的“过程代码更适合做分析”的论点。
要想支持跨多行的边界，需要打开“点号匹配换行符”模式。在JavaScript中，使用（([siS]*?))。
160第3章
www.TopSage.com
---
## Page 177
虽然这个实例中的解答是本章中看起来最为复杂的，但它们却都很直截了当。其中使
用了两个正则表达式。“外层”正则表达式会匹配HTML的粗体tag以及两个tag之间
的文本，然后两个tag之间的文本会被捕获到第一个捕获分组中。这个正则表达式的实
现与实例3.11中的代码是一样的。唯一的区别是之前占位置的注释（说明在哪里使用
匹配结果）被替换为了实际做事情的“内层”正则表达式。
第二个正则表达式会匹配一个数字。这个正则表达式的实现与实例3.10中的代码是一
样的。唯一的区别是我们处理的不是整个自标字符事，而是外层正则表达式的第一个
捕获分组。
可以有两种方式来把内存正则表达式限制为只能处理外层正则表达式（或者是它的一
个捕获分组）匹配到的文本。有些语言会提供一个函数来把正则表达式应用到字符事