need to provide guidelines for exactly what needs to be fixed. If it’s a complex
issue, provide URLs to external resources. There are some examples of finding
recommendations in table 12.1, as well as in the sample report in appendix D. 
Table 12.1 is an example of what a proper pentest finding looks like (see appendix D
for additional findings from the Capsulecorp penetration test).
Table 12.1
Sample pentest finding
A. High
B. Default credentials found on Apache Tomcat server
C. Observation
One (1) Apache Tomcat server was identified as having a default password for 
the administrator account. It was possible to authenticate to the Tomcat web 
management interface and control the application server using a web browser.
D. Impact
An attacker could deploy a custom web application archive (WAR) file to com-
mand the underlying Windows operating system of the server hosting the Tomcat 
server. In the case of the capsulecorp.local environment, the Tomcat server was 
running with administrative privileges to the underlying Windows operating sys-
tem. This means the attacker would have unrestricted access to the server.
213
Technical observations
One last note before wrapping up technical observations (findings). Throughout The
Art of Network Penetration Testing, you have learned how to conduct a specific type of
engagement, which I frequently referred to as a penetration test. In the real world, defi-
nitions are obscure, and companies offer a wide range of services that they refer to as
a penetration test regardless of whether the environment was penetrated. 
 I point this out because it relates to my philosophy about a solid pentest deliver-
able, which essentially says that if you didn’t use a finding in some way to compromise
a target, then it probably shouldn’t be in your report. When I issue a pentest report, I
don’t include findings like “You’re not using up-to-date SSL ciphers” or “Host XYZ was
running telnet, which isn’t encrypted.” These by themselves are not findings; they are
best-practices deficiencies, which I would report on if I was doing something like an
E. Evidence
F. Asset affected
10.0.10.203 
G. Recommendation
Capsulecorp should change all default passwords and ensure that strong pass-
words are being enforced for all user accounts with access to the Apache Tomcat 
server.
Capsulecorp should consult its official password policy as defined by its internal 
IT/Security teams. If such a policy doesn’t exist, Capsulecorp should create one 
following industry standards and best practices.
Additionally, Capsulecorp should consider the necessity of the Tomcat Manager 
web app. If a business need is not present, the Manager web app should be dis-
abled via the Tomcat configuration file.
Additional References
https://wiki.owasp.org/index.php/Securing_tomcat#Securing_Manager_WebApp
Table 12.1
Sample pentest finding (continued)
A. High
B. Default credentials found on Apache Tomcat server
Operating system command. Output is 
displayed below.
214
CHAPTER 12
Writing a solid pentest deliverable
audit or maybe a vulnerability assessment. A penetration test by definition is an attack
simulation where the penetration tester attempts to attack and penetrate the scoped
environment. Keep that in mind when you are writing up your technical observations.
12.5.1 Finding recommendations
When writing up recommendations, it’s essential to keep in mind that you don’t fully
understand the intricacies of your client’s business model. How could you? Unless
you’ve spent way more time than is feasible given their budget, you couldn’t possibly
learn the ins and outs of their business, which has probably evolved over many years
and has been influenced by many people. Your recommendations should speak to the
security issues that you observed and the improvements or enhancements the client
can make to become less vulnerable to attack. 
 Based on the three categories of vulnerabilities introduced in chapter 3—authenti-
cation, configuration, and patching—you could conclude that your recommendations
will fall into one of those three categories. Do not make recommendations for specific
named tools or solutions. You don’t have the knowledge or expertise to tell your cli-
ent, “Don’t use Apache Tomcat; instead, use product XYZ.” What you should do
instead is recommend that strong passwords be enforced for all user accounts with
access to the Apache Tomcat application, or that the configuration settings should
match the latest security hardening standards from Apache (provide a link to those
standards), or that the Tomcat application should be patched to the latest security
update. All you have to do is clearly identify what was wrong (from a security perspec-
tive) and then provide actionable steps to remedy the situation. 
12.6
Appendices
Penetration test deliverables often contain lots of appendices at the end of the four
core components covered thus far. These appendices are supplemental and provide
information that enhances the report. I’ve seen too many different appendices
throughout my career to include them all in this chapter, but many of them were tai-
lored to a specific type of client, business, or engagement. There are four key appen-
dices that you’ll find in most pentest deliverables, and you should include them if you
write one yourself.
 The first of these four appendices is called the severity definitions—at least, that’s
what I call it. You can name it whatever you want, as long as the content does the job of
explaining exactly what you mean when you say a particular finding is of high or criti-
cal severity.
12.6.1 Severity definitions
I absolutely cannot overstate the value of this section, which usually isn’t more than a
single page. Later in the report, you provide what most people consider the meat and
potatoes: the findings. It’s the report findings that drive change for the organization
and create action items for the infrastructure teams to do things and implement
215
Appendices
recommendations. Because system administrators are already busy with their day-to-
day operations, companies want to rank and prioritize pentest findings. This way, they
can focus on the most important ones first.
 For this reason, all pentest companies, vulnerability scan vendors, security research
advisories, and similar companies assign a severity score to each finding. How bad is it
from 1 to 10, for example? Or, as is much more common in pentest reports, is the
severity high, medium, or low? Sometimes pentest companies add critical and informa-
tional for a total of five rankings for findings.
 The problem is that words like medium, high, and critical are arbitrary and mean
something different to me than they do to you and something different to someone
else. Furthermore, we are all human and tend to allow our personal feelings to influ-
ence our opinions. Thus, two people could debate all day long about whether a find-
ing is of critical or high severity.
 For this reason, you should always include a page in your report that lists the sever-
ity rankings you use and explicit, tangible definitions for each one. An example of an
intangible definition would be something like, “High is bad, whereas critical is really
bad.” What does that even mean? A less objective set of criteria would be something
like this:
 High—This finding directly resulted in unauthorized access to otherwise
restricted areas of the scoped network environment. Exploitation of a high
finding is typically limited to a single system or application.
 Critical—A finding that impacts a business-critical function within the organiza-
tion. Exploitation of a critical finding could result in a significant impact to the
business’s ability to operate normally.
Now it’s much more difficult to argue over the severity of a finding. Either the finding
resulted in direct access to a system or application or it did not. If it did not, it isn’t a
high finding. Or the finding could result in a significant business impact (shutting
down the domain controller), or it could not (shutting down Dave’s workstation). If it
can’t, then it isn’t a critical finding.
12.6.2 Hosts and services
There isn’t a lot to say about this section of your report other than that you should
have one. You don’t need to write any content other than a sentence or two to intro-
duce the section; after that, it’s typically just a table that contains IP addresses, host-
names, and open ports and services information.
 In extremely rare cases when you have an entirely closed-scope engagement—for
example, you are asked to test a specific service on a specific host—you may not need
to include this section. In 90% or more of cases, though, you’ll be given a range of IP
addresses to discover and attack hosts and services. This section serves as a record of the
hosts, ports, and services you identified. If you have an extensive network containing
thousands of hosts and tens of thousands of listening services, you might choose to offer
this information as a supplemental document in the form of an Excel spreadsheet.
216
CHAPTER 12
Writing a solid pentest deliverable
12.6.3 Tools list
This is another straightforward section. The bottom line is that clients ask all the time
about what tools you used during your engagement. Creating this appendix, which is
usually no longer than a page, is an easy win that adds value to your deliverable. I typi-
cally use a bulleted list with the name of the tool and a hyperlink to the website or
GitHub page for that tool, as you can see in the following examples:
 Metasploit Framework—https://github.com/rapid7/metasploit-framework
 Nmap—https://nmap.org/
 CrackMapExec—https://github.com/byt3bl33d3r/CrackMapExec
 John the Ripper—https://www.openwall.com/john/
 Impacket—https://github.com/SecureAuthCorp/impacket
12.6.4 Additional references
What can I say about this final appendix? I admit, its contents will likely be about as
generic as the title “additional references.” Nonetheless, it’s hard to imagine a solid
pentest deliverable missing this section. Security is a huge beast, and pentesters are
often passionate about security—usually with many strong recommendations that
exceed the scope of the particular engagement. In this section, you can provide exter-
nal links to standards and hardening guides from industry authorities like NIST, CIS,
OWASP, and so on. 
 This section varies the most among pentest companies. More mature pentest com-
panies that regularly service large Fortune-500 companies often put together their
own recommendations for setting up things like Active Directory, imaging gold stan-
dards, proper patch management, secure software development, and other topics that
most companies could do a better job of from a security perspective.
12.7
Wrapping it up
At this point, your engagement is complete from a technical testing and reporting
perspective. But in a real-world pentest, the work doesn’t end just yet. You typically
have what’s called a close-out meeting where you walk through your report with the key
stakeholders from the company that hired you. During this meeting, you explain the
details of your findings and field technical questions from various teams in your cli-
ent’s IT, infrastructure, and security organizations.
 If you are conducting your pentest not as a consultant but as a member of an inter-
nal IT, infrastructure, or security team, then you probably have even more work to do
after writing and delivering the content of your final deliverable. Doing internal pen-
testing for the company you work for is easily 10 times harder than doing it as a con-
sultant because now that the pentest is over, your colleagues have to fix the things you
found. You will without question be involved in many more meetings, email discus-
sions, report read-outs, and presentations for months after the engagement ends,
depending on the level of penetration you obtained.
217
Wrapping it up
 Consultants have the benefit of walking away after the engagement is over. For lack
of a better term, they can wash their hands of the project and go about their lives,
sometimes never knowing whether the issues they uncovered were fully resolved.
Some consultants struggle with this, and it’s one of many reasons a common career
track for penetration testers is to work as a consultant for 5 to 10 years and then transi-
tion to an internal security position.
 On the flip side, some enjoy the diversity and freedom of consulting. As a consul-
tant, if your career lasts long enough, you get to be involved in many different compa-
nies and learn from lots of smart people along the way. You might be the type who
prefers a change of scenery every month or sometimes even every week; if that’s the
case, becoming a professional pentester for a consulting company is an option you
should consider.
 Whatever path you choose or whatever path chooses you, I hope you have found this
book useful. My intention in writing it was to create a manual of sorts that someone with
little to no experience in network penetration testing could use to execute a solid
engagement from start to finish. Of course, I didn’t cover every possible attack vector
or ways in which systems can be compromised, but that’s too much for a single book. 
 I wanted to provide you with enough information to get started—but understand
that there is still much to learn if this craft is something you wish to pursue fulltime.
I’ve heard pentesters refer to themselves as professional search engine operators. This
is tongue-in-cheek, of course, but it hits home that every engagement you conduct will
present you with something you’ve never seen before. You’ll spend a lot of time on
Google and Stack Overflow asking questions and learning about new technologies,
because there are too many network applications to know them all.
 If you’ve grasped the concepts and framework laid out in this book, then you
should have no trouble filling in the missing pieces as they present themselves. I hope
you’ve learned that this isn’t rocket science; it doesn’t take expensive commercial soft-
ware to carry out a good INPT. It isn’t magic, either; it’s just a process. Companies run
on computer systems. In large companies, there are thousands of such systems, and
human beings are responsible for making sure all of them are secure. The defenders
have to close every single door and window; you (the attacker) need to find only a sin-
gle one that was accidentally left open. Once you get in, you just need to know where
to search for keys or other pathways into adjacent areas.
Exercise 12.1: Create a solid pentest deliverable
Follow the guidelines from this chapter to create a solid pentest deliverable docu-
menting all the results from your engagement.
Be sure your deliverable contains each of the eight components and effectively com-
municates the results of your engagement. It should also provide valuable recom-
mendations for strengthening the security posture of your client’s environment.
An example of a completed pentest report can be found in appendix D.
218
CHAPTER 12
Writing a solid pentest deliverable
12.8
What now?
Now that you have learned the four phases of a typical INPT and have the confidence
to execute an engagement on your own, you’re probably wondering where to go next
to build on the skills and techniques you’ve acquired from reading this book and work-
ing through the exercises. The best way to do this is to complete engagements. You’ll
learn the most when you come across a system that seems susceptible to compromise
but you aren’t sure exactly how to do it. Googling things is probably the number-one
skill a good pentester needs. In the meantime, if you don’t have any upcoming engage-
ments to practice on, here is a list of online resources to explore as you further your
growth and career development as a pentester and ethical hacker:
 Training and educational content
– https://www.pentestgeek.com
– https://www.pentesteracademy.com
– https://www.offensive-security.com
– https://www.hackthebox.eu
 Bug bounty programs
– https://www.hackerone.com
– https://www.bugcrowd.com
 Books
– The Web Application Hacker’s Handbook, by Dafydd Stuttard and Marcus Pinto
(Wiley, 2nd ed. 2011): https://amzn.to/3l3xJHM
– Gray Hat Hacking by Allen Harper et al. (McGraw-Hill Education, 5th ed.
2018): https://amzn.to/349IDFM
– Metasploit: The Penetration Tester’s Guide by David Kennedy, Jim O’Gorman,
Devon Kearns, and Mati Aharoni (No Starch Press, 2011): https://amzn.to/
2FEtAtv
– The Hacker Playbook: Practical Guide to Penetration Testing by Peter Kim
(CreateSpace, 2014): https://amzn.to/34cXsar
Summary
 Your pentest deliverable is the only tangible work product left behind after the
technical testing portion of your engagement has ended.
 Different vendors produce different deliverables, but the eight components
listed in this chapter will be present in some form or fashion.
 The executive summary is a 30,000-foot view of the entire engagement. It could
serve as a non-technical standalone report for executives and business leaders.
 The engagement methodology describes the workflow and activities that you
conducted during the engagement. It also answers the question, “What type of
attacker were you trying to emulate?”
219
Summary
 Attack narratives tell a story in a step-by-step fashion of how you went from no
access to complete control of the entire network.
 Technical observations, also called findings, are the meat and potatoes of
pentest deliverables. They correlate directly to the authentication, configura-
tion, and patching vulnerabilities introduced in chapter 4.
221
appendix A
Building a
 virtual pentest platform
In this appendix, you create a virtual penetration test (pentest) platform similar to
what an attacker would use to compromise an enterprise network. You start with the
latest stable Ubuntu Desktop ISO file and create a fresh virtual machine using
VMWare. Next, you install several OS dependencies with Ubuntu’s package manage-
ment tool, apt. Then you compile and install the bleeding-edge version of Nmap
from its source code repository. Finally, you set up the Ruby Version Manager (RVM)
and PostgreSQL for use with the Metasploit framework. These tools will serve as the
foundation for your pentest platform. Throughout this book, you install additional
packages as needed, but the core suite of applications necessary to conduct a thor-
ough internal network penetration test (INPT) is set up in this appendix.
DEFINITIONS
Nmap, short for network mapper, is a powerful open source
project originally developed for system administrators to map out and
identify information about listening network services. Coincidentally it is
an essential tool for network pentesters and hackers alike. The Metasploit
framework is an open source exploitation and attack framework developed
and maintained by hundreds of information security professionals. It con-
tains thousands of individual exploits, auxiliary modules, payloads, and
encoders that can be used throughout an INPT. 
A.1
Creating an Ubuntu virtual machine
In this appendix, you create and set up your Ubuntu VM, which will serve as your
pentest platform in the book. You should feel free to use whichever virtualization
software you are most comfortable with. I will be using VMware Fusion, which I highly
recommend if you are on a Mac; but you can also use VirtualBox if you prefer.
222
APPENDIX A
Building a virtual pentest platform
VMware Fusion is a commercial product, but you can get a free trial at www
.vmware.com/products/fusion/fusion-evaluation.html. You can find VMWare Player at
www.vmware.com/products/workstation-player.html and VirtualBox at www.virtualbox
.org/wiki/Downloads.
 Download the latest long-term support (LTS) release of Ubuntu Desktop in .iso
format from www.ubuntu.com/download/desktop, and create your VM. Ubuntu will
likely have a newer version available, but in my experience, it’s best to stick with the
LTS release. If you are a Linux junkie and enjoy playing with the latest and greatest
features, then go ahead and create a separate VM. For pentesting, you should use a
stable platform.
 If you prefer a different distribution, download the latest image of your preferred
distro and create your VM. As for the base VM, I’ll leave that up to you, but I recom-
mend configuring the VM with at least the following:
 50 GB of disk space
 2 GB of RAM
 2 CPU cores
If it’s been a while since you’ve created a VM, you might find my quick-and-dirty video
refresher course “Building a Virtual Pentest Platform” useful: http://mng.bz/yrNp. I
walk through most of the steps in this appendix. When you finish setting up your VM,
start it and log in. In the video, I mention encrypting the virtual hard disk, which adds
an additional layer of protection—mainly for your client, should you happen to mis-
place your VM. It’s worth mentioning the importance of securely storing your encryp-
tion key using a password vault such as 1Password, because if you ever lose this
encryption key, the data in your VM will be lost forever.
A.2
Additional OS dependencies
After you are booted up into your freshly created Ubuntu VM, it’s time to get started set-
ting up your pentest tools. Being comfortable and competent with the command line
is essential to penetrating enterprise networks, so the terminal is a great place to begin.
Most of the best tools for conducting pentests are command line–only. Even if that