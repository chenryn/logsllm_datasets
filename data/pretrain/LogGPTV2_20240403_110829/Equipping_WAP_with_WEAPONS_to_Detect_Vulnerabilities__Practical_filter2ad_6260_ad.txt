The tool correctly did not report these 6 cases. We recall
that WAP does not report candidate vulnerabilities that are
sanitized. This example shows that a user can conﬁgure WAPe
for a speciﬁc web application during its development, feeding
WAPs with user functions developed for that application and
helping the user revising the code of the application.
B. WordPress plugins
To answer
the ﬁrst and last questions, and to ﬁnd
previously-unknown (zero-day) vulnerabilities, we run WAPe
with a set of 115 WordPress (WP) plugins [27], 5 of which
with vulnerabilities registered in CVE [5]. WordPress is the
most adopted CMS and supports plugins developed by many
different teams. We selected 115 plugins from different tags
(arts, food, health, shopping, travel, authentication, popular
plugins and others) and distributed by several ranges of down-
loads, from less than 2000 to more than 500K. The popular
plugins ﬁt in this last range, having some of them more than
1M downloads. Fig. 4(a) shows the number of downloads of
these plugins and Fig. 4(b) the number of web sites that have
these plugins active.
WAPe discovered 153 zero-day vulnerabilities and detected
16 known vulnerabilities. Table VII shows the 23 plugins with
vulnerabilities, distributed by 8 classes. The wpsqli weapon
detected 55 SQLI vulnerabilities, while the other detectors
found the remaining 114 vulnerabilities of the XSS, RFI,
LFI, DT, HI and CS classes (last 2 are new). For the known
5 vulnerable plugins (appointment-booking-calendar 1.1.7,
easy2map 1.2.9, payment-form-for-paypal-pro 1.0.1, resads
1.0.1 and simple-support-ticket-system 1.2), we conﬁrmed the
vulnerabilities using the information about them published in
BugTraq [3]. However, for the simple-support-ticket-system 1.2
plugin WAPe detected more 13 SQLI vulnerabilities than those
that were registered.
The 23 plugins ﬁt in all ranges of downloads, as depicted
by the orange columns of Fig. 4(a). 16 of them have more
than 10K downloads, reaching more than 500K downloads. All
ranges of active WP installations contain vulnerable plugins,
as shown by the orange columns of Fig. 4(b). 12 plugins are
used in more than 2000 web sites. The vulnerable Lightbox
Plus Colorbox plugin is active in more than 200,000 web sites
(the most used plugin), making these web sites vulnerable to
XSS attacks.
Appointment Booking Calendar**
Auth0
Authorizer
BuddyPress
Contact formgenerator
CP Appointment Calendar
Easy2map**
Ecwid Shopping Cart
Gantry Framework
Google Maps Travel Route
Lightbox Plus Colorbox
Payment form for Paypal pro**
Recipes writer
ResAds**
Simple support ticket system**
The CartPress eCommerce Shopping Cart
WebKite
WP EasyCart - eCommerce Shopping Cart
WP Marketplace
WP Shop
WP ToolBar Removal Node
WP ultimate recipe
WP Web Scraper
SQLI XSS
1
11
2
1
18
8
1
13
3
1
2
1
1
3
2
8
2
4
2
17
6
9
5
1
3
71
1.1.7
1.3.6
2.3.6
2.4.0
2.0.1
1.1.7
1.2.9
3.4.6
4.1.6
1.3.1
2.7.2
1.0.1
1.0.4
1.0.1
1.2
1.4.7
2.0.1
3.2.3
2.4.1
3.5.3
1839
2.5
3.5
Total
2
29
5
2
5
4
1
2
0
11
2
3
1
3
3
8
2
4
2
18
25
1
60
9
5
1
0
3
169
1
1
1
1
1
3
2
Plugin
Version
Real vulnerabilities
Files*
SCD CS HI
Total
FPP
FP
55
31
5
2
5
*DT & RFI, LFI vulnerabilities
**plugins with vulnerabilities registered in CVE-2015-7319, CVE-2015-7320, CVE-2015-7666,
CVE-2015-7667, CVE-2015-7668, CVE-2015-7669, CVE-2015-7670
TABLE VII: Vulnerabilities found by new version of WAP in
WordPress plugins.































(a) Downloads
 
(b) Active installs
Fig. 4: Downloads and active installed plugins of 115 analyzed
(blue columns) and 23 vulnerable (orange columns) plugins.
Fig. 5 presents the vulnerabilities detected by class for
the 17 web applications and 23 WP plugins. Clearly SQLI
and XSS continue to be the most prevalent classes. Moreover,
it
is possible to observe that WAPe detects correctly the
vulnerabilities it was extended to detect. In both analysis it
detected HI and CS vulnerabilities, while LDAPI and SF were
only detected in the web applications (not plugins).
All these vulnerabilities were reported to the developers of
the web applications and WP plugins. Some already conﬁrmed
their existence. All were conﬁrmed by us manually.














 !"#!$ %&!'!(%








Fig. 5: Number of vulnerabilities detected by class in the
vulnerable web applications and WordPress plugins.
636
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:37:52 UTC from IEEE Xplore.  Restrictions apply. 
VI. RELATED WORK
This section summarizes the main related work in the areas
of static analysis and data mining used to detect vulnerabilities.
1) Static analysis: Taint analysis is a form of data ﬂow
analysis that tracks sensible data and veriﬁes which points of
the code it reaches. This form of analysis is usually used to
detect vulnerabilities in source code, tracking the entry points
and checking if they reach a sensitive sink. The technique
uses two states – tainted and untainted – that may change
during the data ﬂow analysis. WAP [11] is a tool that performs
this type of analysis to detect input validation vulnerabilities
in PHP web applications. Pixy [10], phpSAFE [15], and
RIPS [6] are other tools that apply the same technique to
discover vulnerabilities. The ﬁrst two only detect SQLI and
XSS vulnerabilities. RIPS detects the same vulnerabilities as
WAP v2.1, but cannot analyse object-oriented source code.
phpSAFE has been conﬁgured to detect SQLI vulnerabilities
in WordPress plugins, but this conﬁguration was made in its
source code, whereas in the present work we modiﬁed WAP
to be conﬁgured without modifying the source code. On the
contrary of the tool we present in this paper, none of these
tools is modular and extensible for new vulnerabilities classes.
Moreover, only WAP corrects the vulnerabilities found, ﬁxing
the web application source code and removing them.
2) Data mining: Recently data mining has started to be
explored to predict the existence of vulnerabilities in soft-
ware. This technique uses machine learning classiﬁers that
are trained with data sets containing instances composed by
attributes. Some tools use attributes collected from source code
while others from attack vectors. PhpMiner [22] detect SQLI
and XSS vulnerabilities in PHP source code. It collects at-
tributes from excerpts of code that end in a sink, independently
of where they start. It does not perform the data mining process
itself, which has to be run by the user using the WEKA tool
[26]. Nunan et al. retrieve attributes from a large collection of
XSS attacks vectors, using document- and URL-based features,
to learn how to characterize and detect XSS attacks [14]. The
WAP tool also uses data mining, but in contrast with these
tools, it uses that approach to predict false positives.
VII. CONCLUSION
The paper presents the extension of the WAP tool to detect
new vulnerabilities. It addresses the difﬁculty of extending
these tools by proposing a modular and extensible version
of the WAP tool, equipping it with “weapons” to detect (and
correct) vulnerabilities of new classes. The approach involved
restructuring WAP to make it modular and the creation of a
new module to generate weapons, i.e., to generate automat-
ically detectors and ﬁxes to detect and remove new classes
of vulnerabilities. To predict false positives the precision and
accuracy of the data mining process has been improved, adding
more symptoms about false positives and instances. The new
version of the tool was evaluated with 7 new vulnerability
classes using web applications and WordPress plugins. The
results show that this extensibility allows WAP to ﬁnd many
new (zero-day) vulnerabilities.
ACKNOWLEDGMENT
This work was partially supported by the EC through project FP7-
607109 (SEGRID), and by national funds through Fundac¸˜ao para a
Ciˆencia e a Tecnologia (FCT) with references UID/CEC/50021/2013
(INESC-ID) and UID/CEC/00408/2013 (LaSIGE).
REFERENCES
[1] OWASP WAP – Web Application Protection. https://www.owasp.org/
index.php/OWASP WAP-Web Application Protection.
[2] WAP. http://awap.sourceforge.net/.
[3] BugTraq. http://www.securityfocus.com.
[4] CSO Online. Ashley Madison hack exposes IT details and customer
http://www.csoonline.com/article/2949902/
records,
vulnerabilities/ashley-madison-hack-exposes-it-details-and-customer-
records.html.
July 2015.
[5] CVE. http://cve.mitre.org.
[6]
J. Dahse and T. Holz. Simulation of built-in PHP features for precise
static code analysis. In Proceedings of the 21st Network and Distributed
System Security Symposium, Feb 2014.
[7] DB-Engines. http://db-engines.com/en/ranking.
[8]
Imperva. Anatomy of comment spam. hacker intelligence initiative.
May 2014.
Imperva. Web application attack report #6. Nov. 2015.
[9]
[10] N. Jovanovic, C. Kruegel, and E. Kirda. Precise alias analysis for static
detection of web application vulnerabilities. In Proceedings of the 2006
Workshop on Programming Languages and Analysis for Security, pages
27–36, June 2006.
I. Medeiros, N. F. Neves, and M. Correia. Automatic detection and
correction of web application vulnerabilities using data mining to
predict false positives. In Proceedings of the International World Wide
Web Conference, pages 63–74, Apr. 2014.
I. Medeiros, N. F. Neves, and M. Correia. Detecting and removing web
application vulnerabilities with static analysis and data mining. IEEE
Transactions on Reliability, 65(1):54–69, March 2016.
[11]
[12]
[13] MongoDB. https://www.mongodb.org/.
[14] A. E. Nunan, E. Souto, E. M. dos Santos, and E. Feitosa. Automatic
classiﬁcation of cross-site scripting in web pages using document-based
and url-based features.
In Proceedings of the IEEE Symposium on
Computers and Communications, pages 702–707, July 2012.
[15] P. Nunes, J. Fonseca, and M. Vieira. phpSAFE: A security analysis
tool for OOP web application plugins.
In Proceedings of the 45th
Annual IEEE/IFIP International Conference on Dependable Systems
and Networks, June 2015.
[16] OWASP. Session ﬁxation. https://www.owasp.org/index.php/
Session ﬁxation.
[17] OWASP. Testing for NoSQL injection.
https://www.owasp.org/index.php/Testing for NoSQL injection.
[18] Packet storm. https://packetstormsecurity.com.
[19] T. Parr. The Deﬁnitive ANTLR Reference: Building Domain-Speciﬁc
Languages. Pragmatic Bookshelf, 2007.
[21]
[20] D. Powers. Evaluation a monte carlo study. CoRR, abs/1504.00854:843–
844, 2015.
J. Scambray, V. Lui, and C. Sima. Hacking Exposed Web Applications:
Web Application Security Secrets and Solutions. Mc Graw Hill, 2011.
[22] L. K. Shar and H. B. K. Tan. Mining input sanitization patterns
for predicting SQL injection and cross site scripting vulnerabilities.
In Proceedings of
the 34th International Conference on Software
Engineering, pages 1293–1296, 2012.
[23] The Hacker News. 600tb MongoDB database ’accidentally’ exposed on
the internet, Nov. 2015. http://thehackernews.com/2015/07/MongoDB-
Database-hacking-tool.html.
[24] WhiteHat Security. Website security statistics report. Nov. 2015.
[25]
J. Williams and D. Wichers. OWASP Top 10 2013 – the ten most
critical web application security risks, 2013.
I. H. Witten, E. Frank, and M. A. Hall. Data Mining: Practical Machine
Learning Tools and Techniques. Morgan Kaufmann, 3rd edition, 2011.
[26]
[27] WordPress. https://wordpress.org/.
637
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:37:52 UTC from IEEE Xplore.  Restrictions apply.