随着我们将越来越多的应用打包到隔离的盒子中，我们很快就会意识到我们需要一个能够帮助我们同时处理许多容器的工具。在这一节中，我们将从简单地旋转一个容器到在一个乐队中编排容器向前推进一步。
# 堆积容器
现代系统通常构建为由分布在网络上的多个组件组成的栈，例如应用服务器、缓存、数据库、消息队列等。同时，组件本身也是一个包含许多子组件的独立系统。此外，微服务的趋势给系统之间的这种纠缠关系带来了额外的复杂性。从这个事实来看，即使容器技术在部署任务方面给了我们一定程度的缓解，启动一个系统仍然是困难的。
假设我们有一个名为 kiosk 的简单应用，它连接到一个 Redis 来管理我们当前有多少张票。一旦门票售出，它就会通过 Redis 渠道发布活动。记录器订阅 Redis 通道，并在收到任何事件时将时间戳日志写入 MySQL 数据库。
对于**信息亭**和**记录器**，您可以在这里找到代码和文件:[https://github . com/DevOps-wit-Kubernetes/examples/tree/master/chapter 2](https://github.com/DevOps-with-Kubernetes/examples/tree/master/chapter2)。架构如下:
![](img/00031.jpeg)
我们知道如何分别启动这些容器，并将它们相互连接。基于我们之前讨论的内容，我们将首先创建一个桥接网络，并在内部运行容器:
```
$ docker network create kiosk
$ docker run -d -p 5000:5000 \
    -e REDIS_HOST=lcredis --network=kiosk kiosk-example 
$ docker run -d --network-alias lcredis --network=kiosk redis
$ docker run -d -e REDIS_HOST=lcredis -e MYSQL_HOST=lmysql \
-e MYSQL_ROOT_PASSWORD=$MYPS -e MYSQL_USER=root \
--network=kiosk recorder-example
$ docker run -d --network-alias lmysql -e MYSQL_ROOT_PASSWORD=$MYPS \ 
 --network=kiosk mysql:5.7 
```
目前一切顺利。但是，如果下次我们想再次启动同一个栈，我们的应用很可能在数据库之前启动，如果任何传入的连接请求对数据库进行任何更改，它们可能会失败。换句话说，我们必须考虑启动脚本中的启动顺序。此外，脚本也不适用于诸如如何处理随机组件崩溃、如何管理变量、如何扩展某些组件等问题。
# Docker 合成概述
Docker Compose 正是使我们能够轻松运行多个容器的工具，它是 Docker CE 发行版中的内置工具。它所做的只是读取`docker-compose.yml`(或`.yaml`)来运行定义的容器。一个`docker-compose`文件是一个基于 YAML 的模板，它通常看起来像这样:
```
version: '3'
services:
 hello-world:
 image: hello-world
```
启动很简单:将模板保存到`docker-compose.yml`中，使用`docker-compose up`命令启动；
```
$ docker-compose up
Creating network "cwd_default" with the default driver
Creating cwd_hello-world_1
Attaching to cwd_hello-world_1
hello-world_1  |
hello-world_1  | Hello from Docker!
hello-world_1  | This message shows that your installation appears to be working correctly.
...
cwd_hello-world_1 exited with code 0
```
让我们看看`up`命令后面`docker-compose`做了什么。
Docker Compose 基本上是多个容器的 Docker 函数的混合体。比如`docker build`对应的是`docker-compose build`；前一个构建了一个 Docker 映像，因此后一个构建了在`docker-compose.yml`中列出的 Docker 映像。但是有一点需要指出的是:`docker-compose run`司令部不是`docker run`的通讯员；它正在运行`docker-compose.yml`中配置的特定容器。其实最接近`docker run`的命令是`docker-compose up`。
`docker-compose.yml`文件由卷、网络和服务的配置组成。此外，应该有一个版本定义来指示使用的是`docker-compose`格式的哪个版本。对模板结构有了这样的理解，前面的`hello-world`例子做了什么就很清楚了；它创建了一个名为`hello-world`的服务，它是由形象`hello-world:latest`创建的。
由于没有定义网络，`docker-compose`将使用默认驱动程序创建一个新网络，并将服务连接到同一个网络，如示例输出的第 1 行到第 3 行所示。
此外，容器的网络名称将是服务的名称。您可能会注意到控制台中显示的名称与`docker-compose.yml`中的原始名称略有不同。这是因为 Docker Compose 试图避免容器之间的名称冲突。因此，Docker Compose 使用它生成的名称运行容器，并使用服务名创建一个网络别名。在本例中，“`hello-world`”和“`cwd_hello-world_1`”都可以解析为同一网络中的其他容器。
# 组合容器
由于 Docker Compose 和 Docker 在很多方面都是一样的，所以理解如何用例子写一个`docker-compose.yml`比从`docker-compose`语法开始更有效率。这里让我们回到前面的`kiosk-example`，从一个`version`定义和四个`services`开始:
```
version: '3'
services:
 kiosk-example:
 recorder-example:
 lcredis:
 lmysql:
```
`kiosk-example`的`docker run`参数非常简单，包括一个发布端口和一个环境变量。在 Docker Compose 端，我们相应地填充源映像、发布端口和环境变量。因为 Docker Compose 能够处理`docker build`，如果在本地找不到这些映像，它会构建映像。我们很可能希望利用它来进一步减少映像管理工作:
```
kiosk-example:
 image: kiosk-example
 build: ./kiosk
 ports:
  - "5000:5000"
  environment:
    REDIS_HOST: lcredis
```
以同样的方式转换`recorder-example`和`redis`的 Docker 运行，我们有一个像这样的模板:
```
version: '3'
services:
  kiosk-example:
    image: kiosk-example
    build: ./kiosk
    ports:
    - "5000:5000"
    environment:
      REDIS_HOST: lcredis
  recorder-example:
    image: recorder-example
    build: ./recorder
    environment:
      REDIS_HOST: lcredis
      MYSQL_HOST: lmysql
      MYSQL_USER: root
      MYSQL_ROOT_PASSWORD: mysqlpass
  lcredis:
    image: redis
    ports:
    - "6379"
```
对于 MySQL 部分，它需要一个数据卷来保存其数据和配置。因此，除了`lmysql`部分之外，我们还在`services`级别添加了`volumes`和一个空地图`mysql-vol`来声明一个数据量:
```
 lmysql:
 image: mysql:5.7
   environment:
     MYSQL_ROOT_PASSWORD: mysqlpass
   volumes:
   - mysql-vol:/var/lib/mysql
   ports:
   - "3306"
  ---
volumes:
  mysql-vol:
```
结合前面的所有配置，我们得到了最终的模板，如下所示:
```
docker-compose.yml
---
version: '3'
services:
 kiosk-example:
    image: kiosk-example
    build: ./kiosk
    ports:
    - "5000:5000"
    environment:
      REDIS_HOST: lcredis
 recorder-example:
    image: recorder-example
    build: ./recorder
    environment:
      REDIS_HOST: lcredis
      MYSQL_HOST: lmysql
      MYSQL_USER: root
      MYSQL_ROOT_PASSWORD: mysqlpass
 lcredis:
 image: redis
    ports:
    - "6379"
 lmysql:
    image: mysql:5.7
    environment:
      MYSQL_ROOT_PASSWORD: mysqlpass
    volumes:
    - mysql-vol:/var/lib/mysql
    ports:
    - "3306"
volumes:
 mysql-vol: 
```
该文件放在项目的根文件夹中。这里显示了相应的文件树:
```
├── docker-compose.yml
├── kiosk
│   ├── Dockerfile
│   ├── app.py
│   └── requirements.txt
└── recorder
 ├── Dockerfile
 ├── process.py
 └── requirements.txt  
```
最后，运行`docker-compose up`检查是否一切正常。我们可以通过发送`GET /tickets`请求来检查我们的信息亭是否已经打开。
为 Docker Compose 编写一个模板也不过如此。我们现在能够轻松地在栈中运行应用。
# 摘要
从 Linux 容器到 Docker 工具栈的非常原始的元素开始，我们经历了容器化应用的每个方面，包括打包和运行 Docker 容器，为基于代码的不可变部署编写`Dockerfile`，以及使用 Docker Compose 操作多容器。然而，我们在本章中获得的能力只允许我们在同一个主机中运行和连接容器，这限制了构建更大应用的可能性。因此，在下一章中，我们将与 Kubernetes 见面，释放容器超越规模限制的力量。