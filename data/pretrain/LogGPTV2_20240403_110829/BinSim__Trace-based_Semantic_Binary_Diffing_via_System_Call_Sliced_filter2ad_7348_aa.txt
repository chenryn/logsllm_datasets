title:BinSim: Trace-based Semantic Binary Diffing via System Call Sliced
Segment Equivalence Checking
author:Jiang Ming and
Dongpeng Xu and
Yufei Jiang and
Dinghao Wu
BinSim: Trace-based Semantic Binary Diffing via 
System Call Sliced Segment Equivalence Checking
Jiang Ming, University of Texas at Arlington; Dongpeng Xu, Yufei Jiang,  
and Dinghao Wu, Pennsylvania State University
https://www.usenix.org/conference/usenixsecurity17/technical-sessions/presentation/ming
This paper is included in the Proceedings of the 26th USENIX Security SymposiumAugust 16–18, 2017 • Vancouver, BC, CanadaISBN 978-1-931971-40-9Open access to the Proceedings of the 26th USENIX Security Symposium is sponsored by USENIXBinSim: Trace-based Semantic Binary Difﬁng via System Call Sliced
Segment Equivalence Checking
Jiang Ming
The University of Texas at Arlington
PI:EMAIL
Dongpeng Xu, Yufei Jiang, and Dinghao Wu
The Pennsylvania State University
{dux103, yzj107, dwu}@ist.psu.edu
Abstract
Detecting differences between two binary executables
(binary difﬁng), ﬁrst derived from patch analysis, have
been widely employed in various software security anal-
ysis tasks, such as software plagiarism detection and
malware lineage inference. Especially when analyzing
malware variants, pervasive code obfuscation techniques
have driven recent work towards determining semantic
similarity in spite of ostensible difference in syntax. Ex-
isting ways rely on either comparing runtime behaviors
or modeling code snippet semantics with symbolic exe-
cution. However, neither approach delivers the expected
precision. In this paper, we propose system call sliced
segment equivalence checking, a hybrid method to iden-
tify ﬁne-grained semantic similarities or differences be-
tween two execution traces. We perform enhanced dy-
namic slicing and symbolic execution to compare the
logic of instructions that impact on the observable behav-
iors. Our approach improves existing semantics-based
binary difﬁng by 1) inferring whether two executable bi-
naries’ behaviors are conditionally equivalent; 2) detect-
ing the similarities or differences, whose effects spread
across multiple basic blocks. We have developed a pro-
totype, called BinSim, and performed empirical eval-
uations against sophisticated obfuscation combinations
and more than 1,000 recent malware samples, includ-
ing now-infamous crypto ransomware. Our experimental
results show that BinSim can successfully identify ﬁne-
grained relations between obfuscated binaries, and out-
perform existing binary difﬁng tools in terms of better
resilience and accuracy.
1 Introduction
An inherent challenge for reverse engineering is the
source code of the program under examination is typi-
cally absent. The binary executable becomes the only
available resource to be analyzed. The techniques to de-
tect the difference between two executables (binary diff-
ing) have been applied to a broad range of reverse en-
gineering tasks. For example, the difference between a
pre-batched binary and its updated version reveals the
ﬁxed vulnerability [23, 54], and such information can
be exploited by attackers to quickly generate “1-day”
exploit [9, 50]. The similarity between an intellectual
property protected binary and a suspicious binary indi-
cates a potential case of software plagiarism [41, 73]. A
more appealing application emerges in malware analysis.
According to the latest Panda Security Labs study [53],
many malware samples in circulation are not brand new
but rather evolutions of previously known malware code.
Relentless malware developers typically apply various
obfuscation schemes (e.g., packer, polymorphism, meta-
morphism, and code virtualization) [51, 57] to camou-
ﬂage arresting features, circumvent malware detection,
and impede reverse engineering attempts. Therefore, an
obfuscation-resilient binary difﬁng method is of great ne-
cessity.
Pervasive code obfuscation schemes have driven bi-
nary difﬁng methods towards detecting semantic similar-
ity despite syntactical difference (e.g., different instruc-
tion sequences or byte N-grams). Existing semantics-
aware binary difﬁng can be classiﬁed into two cate-
gories. The ﬁrst one compares runtime execution behav-
iors rather than instruction bytes. Since dynamic analysis
has good resilience against code obfuscation [48], there
has been a notable amount of work to measure the simi-
larities of program behavior features, such as system call
sequences and dependency graphs [6, 12, 14]. However,
the program of interest may not involve unique system
call sequence [73]. Furthermore, dynamic-only methods
neglect subtle differences that do not reﬂect on the be-
havior change. In that case, two matched system calls
may carry different meanings.
The second category relies on measuring the seman-
tics of two pieces of binary code [54, 41, 37, 25, 43],
which is usually based on basic block semantics mod-
USENIX Association
26th USENIX Security Symposium    253
eling. At a high level, it represents the input-output
relations of a basic block as a set of symbolic for-
mulas, which are later proved by either a constraint
solver [41, 15, 25, 43], random sampling [54] or hash-
ing [37] for equivalence. Although these tools are effec-
tive against moderate obfuscation within a basic block,
such as register swapping, instruction reordering, in-
struction substitution, and junk code insertion [51], they
exhibit a common “block-centric” limitation [13, 37];
that is, it is insufﬁcient to capture the similarities or
differences that go beyond a single basic block bound-
ary. This issue stems from the fact that the effect of
code transformations spreads across basic blocks, such
as return-oriented programming encoding [40, 55], virtu-
alization obfuscation’s decode-dispatch loop [61], covert
computation [59], and different implementation algo-
rithms [56].
In this paper, we propose a hybrid method, BinSim,
to address the limitations of existing binary difﬁng ap-
proaches. We attempt to identify ﬁne-grained relations
between obfuscated binary code. BinSim leverages a
novel concept and technique called System Call Sliced
Segments and their Equivalence Checking. This new
technique relies on system or API calls1 to slice out cor-
responding code segments and then check their equiv-
alence with symbolic execution and constraint solving.
Starting from the observable behavior, our approach
integrates symbolic execution with dynamic backward
slicing to compare the behavior-related instruction seg-
ments. We ﬁnd that two matched system calls together
with their arguments may carry different meanings. Our
approach can answer whether two matched API calls
are conditional equivalent [31]. Note that the behavior-
related instruction segments typically bypass the bound-
ary of a basic block so that we are more likely to detect
similarities or differences that spread across basic blocks.
More precisely, we run two executables in tandem un-
der the same input and environment to record their de-
tailed execution data. Then, we rely on an advanced
bioinformatics-inspired approach [34] to perform system
call sequence alignment. After that, we trace back from
the arguments of the matched system calls to determine
instructions that directly (data ﬂow) or indirectly (con-
trol ﬂow) impact on the argument values. However, the
standard dynamic slicing algorithm [80] does not suf-
ﬁce to operate at the obfuscated binaries. Our enhanced
backward slicing considers many tricky issues and deals
with obfuscation schemes that cause undesired slice ex-
plosion. Next, we calculate weakest preconditions (WP)
along the dynamic slice. The resulting WP formulas ac-
cumulated in the two slices are then submitted to a con-
straint solver to verify whether they are equivalent. Now
1The system calls in Windows are named as native API. We also
consider part of Windows API calls as a proxy for system calls.
determining whether two matched system calls are truly
equivalent under current path conditions boils down to a
query of equivalence checking.
We have developed a prototype of BinSim on top of
the BitBlaze [66] binary analysis platform. Experimen-
tal results on a range of advanced obfuscation schemes
are encouraging. Compared with a set of existing bi-
nary difﬁng tools, BinSim exhibits better resilience and
accuracy. We also evaluate BinSim and existing tools
on more than 1,000 recent malware samples, includ-
ing highly dangerous and destructive crypto-ransomware
(e.g., CryptoWall) [32, 33, 58]. The results show that
BinSim can successfully identify ﬁne-grained relations
between obfuscated malware variants. We believe Bin-
Sim is an appealing method to complement existing mal-
ware defenses.
Scope and Contributions BinSim is mainly designed
for ﬁne-grained individual binary difﬁng analysis. It is
an ideal ﬁt for security analysts who need further investi-
gation on two suspicious binaries. The previous work on
large-scale coarse-grained malware comparison [6, 28] is
orthogonal and complementary to BinSim. In summary,
the contributions of this paper are as follows.
• BinSim presents a novel concept, System Call
Sliced Segment Equivalence Checking, that relies
on system or API calls to slice out corresponding
code segments and then checks their equivalence
with symbolic execution and constraint solving.
• BinSim can detect the similarities or differences
across multiple basic blocks. Therefore, BinSim
overcomes the “block-centric” limitation (Existing
Method 2) to a great extent. Compared to dynamic-
only approaches (Existing Method 1), BinSim pro-
vides more precise results, such as whether two pro-
grams’ behaviors are conditionally equivalent.
• Performing dynamic slicing on the obfuscated bi-
naries is rather tricky and complicated. The redun-
dant instructions introduced by indirect memory ac-
cess and fake control/data dependency can poison
the slicing output. We improve the standard algo-
rithm to produce more precise result.
• Unlike previous work that evaluates the efﬁcacy
of binary difﬁng either on different program ver-
sions [7, 25, 49], different compiler optimization
levels [21, 41] or considerably moderate obfusca-
tion [37, 41], we evaluate BinSim rigorously against
sophisticated obfuscation combinations and recent
malware. To the best of our knowledge, this is the
ﬁrst work to evaluate binary difﬁng in such scale.
254    26th USENIX Security Symposium
USENIX Association
2 Motivation and Overview
In this section, we ﬁrst discuss the drawbacks of current
semantics-aware binary difﬁng approaches. This also in-
spires us to propose our method. We will show C code
for understanding motivating examples even though Bin-
Sim works on binary code. At last, we introduce the ar-
chitecture of BinSim.
2.1 Motivation
Binary difﬁng methods based on behavior features (e.g.,
system call sequence or dependency graph) are prevalent
in comparing obfuscated programs, in which the accu-
rate static analysis is typically not feasible [48]. How-
ever, such dynamic-only approaches may disregard some
real different semantics, which are usually caused by in-
struction level execution differences. Figure 1 presents
such a counterexample, which lists three similar pro-
grams in the view of source code and their system call
dependencies. Given any input x ≥ 0, the three sys-
tem call sequences (NtCreateFile → NtWriteFile
→ NtClose) together with their arguments are identi-
cal. Besides, these three system calls preserve a data
ﬂow dependency as well: one’s return value is passed to
another’s in-argument (as shown in Figure 1(d)). There-
fore, no matter comparing system call sequences or de-
pendency graphs, these three programs reveal the same
behavior. However, if we take a closer look at line 3
and 4 in Figure 1(b), the two statements are used to cal-
culate the absolute value of x. That means the input
value y for NtWriteFile in Figure 1(a) and Figure 1(b)
differs when x < 0.
In another word, these two pro-
grams are only conditionally equivalent. Note that by
random testing, there is only about half chance to ﬁnd
Figure 1(a) and Figure 1(b) are different. Recently, the
“query-then-infect” pattern has become common in mal-
ware attacks [77], which only target speciﬁc systems in-
stead of randomly attacking victim machines. When this
kind of malware happens to reveal the same behavior,
dynamic-only difﬁng methods may neglect such subtle
conditional equivalence and blindly conclude that they
are equivalent under all conditions.
Another type of semantics-aware binary difﬁng uti-
lizes symbolic execution to measure the semantics of the
binary code. The core of current approaches is matching
semantically equivalent basic blocks [25, 37, 41, 43, 54].
The property of straight-line instructions with one en-
try and exit point makes a basic block a good ﬁt for
symbolic execution (e.g., no path explosion).
In con-
trast, symbolic execution on a larger scope, such as a
function, has two challenges: 1) recognizing function
boundary in stripped binaries [5]; 2) performance bot-
tleneck even on the moderate size of binary code [46].
Such block-centric methods are effective in defeating
instruction obfuscation within a basic block. Figure 2
presents two equivalent basic blocks whose instructions
are syntactically different. Their output symbolic formu-
las are veriﬁed as equivalent by a constraint solver (e.g.,
STP [24]). However, there are many cases that the se-
mantic equivalence spread across the boundary of a ba-
sic block. Figure 3 presents such an example, which con-
tains three different implementations to count the number
of bits in an unsigned integer (BitCount). Figure 3(a)
and Figure 3(b) exhibit different loop bodies, while Fig-
ure 3(c) has merely one basic block. Figure 3(c) imple-
ments BitCount with only bitwise operators. For the
main bodies of these three examples, we cannot even ﬁnd
matched basic blocks, but they are indeed semantically
equivalent. Unfortunately, current block-centric binary
difﬁng methods fail to match these three cases. The dis-
assembly code of these three BitCount algorithms are
shown in Appendix Figure 11.
Figure 4 shows another counterexample, in which the
semantic difference spreads across basic blocks. When
a basic block produces multiple output variables, exist-
ing block-centric binary difﬁng approaches try all possi-
ble permutations [54, 41, 25] to ﬁnd a bijective mapping
between the output variables. In this way, the two basic
block pairs in Figure 4 (BB1 vs. BB1’ and BB2 vs. BB2’)
are matched. Please note that the input variables to BB2
and BB2’ are switched. If we consider the two sequen-
tial executed basic blocks as a whole, they will produce
different outputs. However, the current block-centric ap-
proach does not consider the context information such as
the order of matched variables. Next, we summarize pos-
sible challenges that can defeat the block-centric binary
difﬁng methods.
1. The lack of context information such as Figure 4.
2. Compiler optimizations such as loop unrolling
and function inline, which eliminate conditional
branches associated.
3. Return-oriented programming (ROP) is originally
designed as an attack to bypass data execution pre-
vention mechanisms [60]. The chain of ROP gad-
gets will result in a set of small basic blocks.
ROP has been used as an effective obfuscation
method [40, 55] to clutter control ﬂow.
4. Covert computation [59] utilizes the side effects
of microprocessors to hide instruction semantics
across a set of basic blocks.
5. The same algorithm but with different implemen-
tations such as Figure 3, Figure 12, and Fig-
ure 13. More examples can be found in Hacker’s
USENIX Association
26th USENIX Security Symposium    255
Figure 1: Example: system calls are conditional equivalent.
we have to take extra efforts to address the last two chal-
lenges. We will discuss them in Section 4.
2.2 Methodology
Figure 5 illustrates BinSim’s core method. Given two
programs P and P(cid:48), our approach performs dynamic anal-
ysis as well as symbolic execution to compare how the
matched system call arguments are calculated, instead
of their exhibited values. We ﬁrst run P and P(cid:48) in tan-
dem under the same input and environment to collect the
logged traces together with their system call sequences.
Then we do the system call sequences alignment to get
a list of matched system call pairs (step 1). Another
purpose of system call alignment is to fast identify pro-
grams exhibiting very different behaviors. After that,
starting from the matched system calls arguments, we
conduct backward slicing on each logged trace to iden-
tify instructions that affect the argument both directly
(data ﬂow) and indirectly (control ﬂow). We extend the
standard dynamic slicing algorithm to deal with the chal-
lenges when working on obfuscated binaries. Next, we
compute the weakest precondition (WP) along each slice
(step 2).
In principle, WP is a symbolic formula that
captures the data ﬂow and control ﬂow that affect the
calculation of the argument. However, cryptographic
functions typically generate complicated symbolic rep-
resentations that could otherwise be hard to solve. To
walk around this obstacle, we identify the possible cryp-
tographic functions from the sliced segments and decom-
Figure 2: Semantically equivalent basic blocks with dif-
ferent instructions.
Delight [74], which is a collection of programming
optimization tricks with bitwise operations.
6. Control ﬂow obfuscation schemes, such as opaque
predicates [17] and control ﬂow ﬂattening [71], can
break up one basic block into multiple ones.
7. Virtualization
obfuscation
decode-dispatch
loop [61, 79] generates a sequence of basic
blocks to interpret one x86 instruction.
This
difﬁculty is further exacerbated by multi-level
virtualization.
BinSim’s hybrid approach can naturally break basic
block boundaries and link related instructions. However,