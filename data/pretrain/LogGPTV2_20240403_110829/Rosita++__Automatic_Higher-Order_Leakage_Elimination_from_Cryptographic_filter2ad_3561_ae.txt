(50,200) and (200,50). 𝑡-value peak: 6.86.
(a) Before applying code fixes. 𝑡-value peak of 6.85 at (42,28,7)
(b) After applying code fixes no leakage is present (𝑡-value peak:
3.15)
Figure 4: Evaluating a toy example.
We extended the second order Boolean masked implementation
shown in Listing 1 to the third order by introducing another share
to it. The code for this implementation is shown in Listing 3. Similar
to the second order version, we intentionally design the example to
leak operand information from the last two ldr instructions. This
implementation was fixed by Rosita++ with two million emulated
traces. To detect leakage in the physical device we had to collect
30 million traces. Figure 5a shows the detected leakage from a 3rd
order 𝑡-test. A first order 𝑡-test was run on the combined traces that
(b) After applying code fixes. 𝑡-value peak of 3.31 at (19,0,6)
Figure 5: Evaluating a toy example.
were combined using Equation 1 with a window of 50 samples. In
contrast, Figure 5b shows the results of the 𝑡-test that was run on
30 million side-channel traces taken from the physical experiment
after applying Rosita++’s fixes.
1
2
3
4
5
6
ldr r3, [r1,#0]
push {r7}
pop {r7}
; nop padding
ldr r4, [r1,#4]
push {r7}
 0 50 100 150 200 250 300Sample Number 0 50 100 150 200 250 300Sample Number 0 1 2 3 4 5 6t-test value 0 50 100 150 200 250 300 350 400Sample Number 0 50 100 150 200 250 300 350 400Sample Number 0 1 2 3 4 5 6t-test value 0 10 20 30 40 50Sample Number 0 10 20 30 40 50Sample Number 0 5 10 15 20 25 30 35 40 45 50 0 1 2 3 4 5 6t-test value 0 10 20 30 40 50Sample Number 0 10 20 30 40 50Sample Number 0 5 10 15 20 25 30 35 40 45 50 0 1 2 3 4 5 6t-test valueSession 3A: Side Channel CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea6947
8
9
10
11
pop {r7}
; nop padding
ldr r5, [r1,#16]
ldr r6, [r1,#20]
; nop padding
Listing 3: A Toy Example (third order)
Comparing Emulated and Real Traces: To better understand
the relationship between emulated and real traces, we compared
the leakage observed in the traces in terms of signal-to-noise ratio
(SNR). For this experiment we used 20,000 random input traces
coming from the emulation and the real experiments using the
code segment shown in Listing 1; we chose this number because
it is sufficient to find leakage in the emulated traces using TVLA.
We computed SNR for the leaking values that need to be combined
for bivariate analysis: hamming weight (HW) of 4 bytes of 𝑟1 and
HW of 4 bytes of 𝑟2 ⊕ 𝑟3. For the real experiments these values
were between 0.041 and 0.063 for the bytes of 𝑟1 and between 0.012
and 0.014 the bytes of 𝑟2 ⊕ 𝑟3. We could not compute the SNR
directly for the emulated traces since the emulation is deterministic
and therefore, noise-free. We added a sufficient amount of noise to
generate similar SNR to the real experiments. We used Gaussian
Noise with means 0 and standard deviation of 0.25% of the signal
amplitude for the bytes of 𝑟1 and 0.1% for the bytes of 𝑟2⊕𝑟3. We do
not know from where this leakage difference is exactly coming from,
but we suspect that we simply found a slight difference between
the emulated and the real measurements.
We conclude that if we introduce between 0.1% and 0.25% ratio
of noise to the emulated traces then we obtain a similar SNR to the
real traces. Moreover, we can use 25 times less traces than in the
real experiment to detect leakage using TVLA, since we can detect
leakage using emulation with 20,000 traces and we need 500,000 in
the real experiments.
4.3 Evaluated Cryptographic Implementations
We now turn our attention to more realistic examples. Before per-
forming the evaluation we use Rosita to detect and eliminate any
first-order leakage from the code. We further perform a first-order
fixed vs. random TVLA with 2,000,000 traces on the real hardware
to verify that no first-order leakage is detected. For the evaluation,
we use Rosita++ to detect and correct second-order leakage for
500,000 simulated traces. We then collect 2,000,000 power traces
from each of the original and the fixed software, and perform bivari-
ate second-order analysis to identify any leakage. We evaluate two
cryptographic implementations and one cryptographic primitive,
which we describe below.
Xoodoo
Xoodoo was proposed by Daemen et al. [19] and a
reference implementation is available from Bertoni et al. [7]. We
converted this code to a three-share implementation based on the
Threshold Implementation (TI) approach [48]. TI schemes were
proposed to prevent the leakage from “glitches” that can occur in
hardware implementations. The concept is accomplishing the goal
of masking through a number of shares with some additional prop-
erties. Specifically, the non-completeness property of TI enforces
that no operation should involve more than two shares.
𝑎0,0 = 𝑎0,0 ⊕ (¬𝑎1,0 ∧ 𝑎2,0) ⊕ (𝑎1,0 ∧ 𝑏2,0) ⊕ (𝑏1,0 ∧ 𝑎2,0)
𝑏0,0 = 𝑏0,0 ⊕ (¬𝑏1,0 ∧ 𝑏2,0) ⊕ (𝑏1,0 ∧ 𝑐2,0) ⊕ (𝑐1,0 ∧ 𝑏2,0)
𝑐0,0 = 𝑏0,0 ⊕ (¬𝑐1,0 ∧ 𝑐2,0) ⊕ (𝑐1,0 ∧ 𝑎2,0) ⊕ (𝑎1,0 ∧ 𝑐2,0)
Listing 4: Xoodoo code segment under test
𝑡3 = T(𝑥1, 𝑥2)
𝑡2 = T(𝑥3, 𝑥1)
𝑡1 = T(𝑥2, 𝑥3)
Listing 5: Present code segment under test
Xoodoo’s state is 48 bytes in length. The state is divided into
three equal blocks called planes, each consisting of four 32-bit words.
𝑥𝑖,𝑗 denotes the 𝑗th 32-bit word of the 𝑖th plane of share 𝑥, where
𝑥 ∈ {𝑎, 𝑏, 𝑐}. Listing 4 shows the algorithm segment that we
analyse, which forms part of the start of the Xoodoo 𝜒 function. Our
initial C implementation demonstrated first-order leakage caused by
the optimiser merging shares. We therefore manually implemented
the code in assembly, ensuring that shares are not merged.
Present
Present is a block cipher based on a substitution
permutation network, which was proposed by Bogdanov et al. in [9].
It has a block size of 64-bit and the key can be 80 or 128 bits long.
The non-linear layer is based on a single 4-bit S-box facilitating
lightweight hardware implementations.
We implemented present with side-channel protection in soft-
ware based on TI with three shares, as described by Sasdrich et al.
[56, Alg. 3.2]. Thus, at least in theory, the implementation should
not leak in the first order. We used the code shown in Listing 5
that implements a part of the present S-box, involving 3 shares
𝑥1, 𝑥2, 𝑥3 and the lookup table 𝑇 . The table is an 8-bit to 4-bit lookup
table where the inputs are two 4-bit nibbles. Each table lookup used
to compute 𝑡𝑖 is repeated 16 times to cover the complete 64-bit
shares.
Observe that threshold implementations with three shares pro-
vides provable first-order security, but only limited protection
against the second-order attacks [48]. Therefore, we can expect
that diminished second-order leakage may occur for both Xoodoo
and present implementations.
Second-order Boolean-to-arithmetic masking Boolean-to-
arithmetic masking [32] is a cryptographic building block that
converts a Boolean mask to an arithmetic mask. It is often used
in side-channel resistant implementations of cryptographic algo-
rithms that mix Boolean and arithmetic operations (for example,
ChaCha [5]). We implement and evaluate the second-order Boolean-
to-arithmetic masking of Hutter and Tunstall [33, Alg. 2].
In our evaluation this procedure takes as input boolean shares
𝑥′ = 𝑥 ⊕ 𝑟1 ⊕ 𝑟2, where 𝑥, 𝑟1 and 𝑟2 are random in Z232. For side-
channel protection, the procedure uses three additional masks 𝛾1,
𝛾2, and 𝛼 also random in Z232. It computes 𝑥′′ = 𝑥 + 𝑠1 + 𝑠2, where
𝑥′′, 𝑠1, and 𝑠2 are the output arithmetic shares. This implementation
is proven to be second-order secure in [33] and therefore, we do
not expect to see leakage in an implementation protected with
Rosita++.
4.4 Emulation results
We used Rosita++ to fix the leakages that were discovered in the
code segments introduced above in Section 4.3. Specifically, we
focus on leakage discovered by a bivariate fixed vs. random 𝑡-test.
Session 3A: Side Channel CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea695(a) Xoodoo
(b) Present
(c) Boolean-to-arithmetic
Figure 6: Discovered and remaining leakage points when
fixed code from previous iteration is used as input to the
next iteration of Rosita++
Implementation
Xoodoo
Present
Boolean to arithmetic
Emulation time Root Cause Det. time
3:12
24:46
1:07
1:35:41
1:55:19
1:08:19
Table 1: Time taken for emulation and root-cause detection
Implementation
Xoodoo
Present
Boolean to arithmetic
Unprotected
size (cycles)
56
114
75
Protected
size (cycles)
76
330
97
Increase
36%
189%
29%
Table 2: Performance overhead of fixes
To analyse the relationship between the number of traces and
leakage discovery, we ran Rosita++ on the unprotected ciphers,
varying the number of traces from 20,000 to 500,000 at steps of
20,000. In each iteration we used the output of the previous iteration
as the input. Each iteration performed emulation and root-cause
detection. The emulation results are shown in Figure 6. This proves
to be more efficient than running Rosita++ a single time with a
large number emulation traces. The reason for the efficiency of the
iterations based method with gradually increasing trace counts is
that leakage is fixed as it is detected so that large numbers of traces
are not required for fixing all the leakage points that are detected.
Table 1 shows the emulation and root cause detection time when
fixed code is used from the previous iteration. Table 2 shows the
performance overhead of the code fixes.
We observe that after emulation 500,000 traces for the fixed vs.
random 𝑡-test, there was only one remaining leakage in the Xoodoo
masked implementation. Present and Boolean-to-arithmetic im-
plementations did not have any remaining leakage points. However,
when running the physical experiments we observed that the re-
maining leakage in Xoodoo was not significant.
Trace set
Xoodoo unprotected
Xoodoo protected
Present unprotected
Present protected
Boolean to arithmetic unprotected
Boolean to arithmetic protected
Samples Wall Clock Time
4:51
33:50
28:31
7:02:00
4:18
8:51
1000
1400
1400
3500
1000
1200
Table 3: Bivariate analysis time
1
2
3
4
ldrb
lsls
adds
ldrb
r2, [r4, #16]
r1, r1, #4
r1, r3, r1
r0, [r1, r2]
Listing 6: Leaky code segment of fixed present
4.5 Physical experiment results
Figure 7 compares the 𝑡-test values of side-channel traces for the
three ciphers before and after Rosita++, as measured on the physi-
cal device. The top row (Figures 7a to 7c) show the leakage of the
original implementations, whereas the bottom row (Figures 7d to 7f)
shows the leakage after applying Rosita++. The three implemen-
tations were protected using 500,000 emulated traces. Collecting
the traces took around 8 hours for present and for Boolean-to-
arithmetic, and around 9:30 hours for Xoodoo, which requires sig-
nificantly more mask bytes, slowing down the communication with
the PC.
As the figures show, for Xoodoo and the Boolean-to-arithmetic
masking conversion, Rosita++ completely eliminates leakage. How-
ever, for present some leakage is not fixed. Further analysis shows