动Visual Studio，运行侦听器的用户就需要许可。为此，可以以提升模式运行一个命令提
示符，使用如下netsh命令，来添加URL：
    >netsh http add urlacl url=http://+:8082/samples user=Everyone
示例代码检查参数是否传递了至少一个前缀，之后调用StartServer方法（代码文件
HttpServer /Program .cs）:
    static void Main(string[] args)
    {
      if (args.Length {0}" +
      "{1}";
    private static byte[] GetHtmlContent(Request request)
    {
      string title = "Sample WebListener";
      var sb = new StringBuilder("Hello from the server");
      sb.Append("Header Info");
      sb.Append(string.Join(" ", GetHeaderInfo(request.Headers)));
      sb.Append("Request Object Information");
      sb.Append(string.Join(" ", GetRequestInfo(request)));
      string html = string.Format(htmlFormat, title, sb.ToString());
      return Encoding.UTF8.GetBytes(html);
    }
GetHeaderInfo方法从HeaderCollection中检索键和值，返回一个div元素，其中包含了
每个键和值：
    private static IEnumerable GetHeaderInfo(HeaderCollection headers) =>
      headers.Keys.Select(key =>
        $"{key}: {string.Join(", ", headers.GetValues(key))}");
GetRequestInfo方法利用反射获得Request类型的所有属性，返回属性名称及其值：
    private static IEnumerable GetRequestInfo(Request request) =>
      request.GetType().GetProperties().Select(
        p => $"{p.Name}: {p.GetValue(request)}");
  注意： GetHeaderInfo和GetRequestInfo方法利用表达式体的成员函数、LINQ
和反射。表达式体的成员函数参见第3章。第13章讨论了LINQ。第16章把反射作为一个
重要的话题。
运行服务器，使用Microsoft 
Edge等浏览器，通过URL访问服务器，如
http://[hostname]:8082/samples/Hello? sample=text，结果输出如图25-3所示。
图25-3
25.4 使用实用工具类
在使用抽象HTTP协议的类，如HttpClient和WebListener，处理HTTP请求和响应后，
下面看看一些实用工具类，它们在处理URI和IP地址时，更容易进行Web编程。
在Internet上，服务器和客户端都由IP地址或主机名（也称作DNS名称）标识。通常，
主机名是在Web浏览器的窗口中输入的友好名称，如www.wrox.com或www.microsoft.com
等。另一方面，IP地址是计算机用于互相识别的标识符，它实际上是用于确保Web请求和
响应到达相应计算机的地址。一台计算机甚至可以有多个IP地址。
目前，IP地址一般是一个32或128位的值，这取决于使用的是IPv4还是IPv6。例如
192.168.1.100就是一个32位的IP地址。目前有许多计算机和其他设备在竞争Internet上的一
个地点，所以人们开发了IPv6。IPv6至多可以提供3×1028 个不同的地址。.NET Framework
允许应用程序同时使用IPv4和IPv6。
为了使这些主机名发挥作用，首先必须发送一个网络请求，把主机名翻译成IP地址，
翻译工作由一个或几个DNS服务器完成。DNS服务器中保存的一个表把主机名映射为它知
道的所有计算机的IP地址以及其他DNS服务器的IP地址，这些DNS服务器用于在该表中查
找它不知道的主机名。本地计算机至少要知道一个DNS服务器。网络管理员在设置计算机
时配置该信息。
在发送请求之前，计算机首先应要求DNS服务器指出与输入的主机名相对应的IP地
址。找到正确的IP地址后，计算机就可以定位请求，并通过网络发送它。所有这些工作一
般都在用户浏览Web时在后台进行。
.NET Framework提供了许多能够帮助寻找IP地址和主机信息的类。
示例代码使用了以下依赖项和名称空间：
依赖项：
    NETStandard.Library
名称空间：
    System
    System.Net
    static System.Console
25.4.1 URI
Uri和UriBuilder是System名称空间中的两个类，它们都用于表示URI。Uri类允许分
析、组合和比较URI。而UriBuilder类允许把给定的字符串当作URI的组成部分，从而构建
一个URI。
下面的代码片段演示了Uri类的特性。构造函数可以传递相对和绝对URL。这个类定
义了几个只读属性，来访问URL的各个部分，例如模式、主机名、端口号、查询字符串和
URL的各个部分（代码文件Utilities/ Program. cs）：
    public static void UriSample(string url)
    {
      var page = new Uri(url);
      WriteLine($"scheme: {page.Scheme
}");
    #if NET46
      WriteLine($"host: {page.Host
}, type: {page.HostNameType
}");
    #else
      WriteLine($"host: {page.Host
}, type: {page.HostNameType
}, " +
        $"idn host: {page.IdnHost
}");
    #endif
      WriteLine($"port: {page.Port
}");
      WriteLine($"path: {page.AbsolutePath
}");
      WriteLine($"query: {page.Query
}");
      foreach (var segment in page.Segments
)
      {
        WriteLine($"segment: {segment}");
      }
      // etc.
    }
运行应用程序，传递下面的URL和包含一个路径和查询字符串的字符串：
    http://www.amazon.com/Professional-C-6-0-Christian-Nagel/dp/111909660X/ref=sr
_1_4? ie=
UTF8&amqid=1438459506&sr=8-4&keywords=professional+c%23+6
将得到下面的输出：
    scheme: http
    host: www.amazon.com, type:  Dns
    port: 80
    path: /Professional-C-6-0-Christian-Nagel/dp/111909660X/ref=sr_1_4
    query: ? ie=UTF8&qid=1438459506&sr=8-4&keywords=professional+c%23+6
    segment: /
    segment: Professional-C-6-0-Christian-Nagel/
    segment: dp/
    segment: 111909660X/
    segment: ref=sr_1_4
与Uri类不同，UriBuilder定义了读写属性，如下面的代码片段所示。可以创建一个
UriBuilder实例，指定这些属性，并得到一个从Uri属性返回的URL：
    public static void UriSample(string url)
    {
      // etc.
      var builder = new UriBuilder();
      builder.Host = "www.cninnovation.com";
      builder.Port = 80;
      builder.Path = "training/MVC";
      Uri uri = builder.Uri;
      WriteLine(uri);
    }
除了使用UriBuilder的属性之外，这个类还提供了构造函数的几个重载版本，其中也
可以传递URL的各个部分。
25.4.2 IPAddress
IPAddress类代表IP地址。使用GetAddressBytes属性可以把地址本身作为字节数组，
并使用ToString（）方法转换为用小数点隔开的十进制格式。此外，IPAddress类也实现静
态的Parse（）和TryParse方法，这两个方法的作用与ToString（）方法正好相反，把小数
点隔开的十进制字符串转换为IPAddress。代码示例也访问AddressFamily属性，并将一个
IPv4地址转换成IPv6，反之亦然（代码文件Utilities/ Program.cs）：
    public static void IPAddressSample(string ipAddressString)
    {
      IPAddress address;
      if (! IPAddress.TryParse(ipAddressString, out address)
)
      {
        WriteLine($"cannot parse {ipAddressString}");
        return;
      }
      byte[] bytes = address.GetAddressBytes()
;
      for (int i = 0; i < bytes.Length; i++)
      {
        WriteLine($"byte {i}: {bytes[i]:X}");
      }
      WriteLine($"family: {address.AddressFamily
}, " +
        $"map to ipv6: {address.MapToIPv6()
}, map to ipv4: {address.MapToIPv4()
}");
      // etc.
    }
给方法传递地址65.52.128.33，输出结果如下：
    byte 0: 41
    byte 1: 34
    byte 2: 80
    byte 3: 21
    family: InterNetwork, map to ipv6: ::ffff:65.52.128.33, map to ipv4: 65.52.12
8.3
    3
IPAddress类也定义了静态属性，来创建特殊的地址，如loopback、broadcast和
anycast：
    public static void IPAddressSample(string ipAddressString)
    {
      // etc.
      WriteLine($"IPv4 loopback address: {IPAddress.Loopback
}");
      WriteLine($"IPv6 loopback address: {IPAddress.IPv6Loopback
}");
      WriteLine($"IPv4 broadcast address: {IPAddress.Broadcast
}");
      WriteLine($"IPv4 any address: {IPAddress.Any
}");
      WriteLine($"IPv6 any address: {IPAddress.IPv6Any
}");
    }
通过loopback地址，可以绕过网络硬件。这个IP地址代表主机名localhost。
每个broadcast地址都在本地网络中寻址每个节点。这类地址不能用于IPv6，因为这个
概念不用于互联网协议的更新版本。最初定义IPv4后，给IPv6添加了多播。通过多播，寻
址一组节点，而不是所有节点。在IPv6中，多播完全取代广播。本章后面使用UDP时，会
在代码示例中演示广播和多播。
通过anycast，也使用一对多路由，但数据流只传送到网络上最近的节点。这对负载平
衡很有用。对于IPv4, Border Gateway Protocol （BGP）路由协议用来发现网络中的最短路
径；对于IPv6，这个功能是内置的。
运行应用程序时，可以看到下面的IPv4和IPv6地址：
    IPv4 loopback address: 127.0.0.1
    IPv6 loopback address: ::1
    IPv4 broadcast address: 255.255.255.255
    IPv4 any address: 0.0.0.0
    IPv6 any address: ::
25.4.3 IPHostEntry
IPHostEntry类封装与某台特定的主机相关的信息。通过这个类的HostName属性（这
个属性返回一个字符串），可以使用主机名；通过AddressList属性返回一个IPAddress对象
数组。下一个示例使用IPHostEntry类。
25.4.4 Dns
Dns类能够与默认的DNS服务器进行通信，以检索IP地址。
DnsLookup示例代码使用了以下的依赖项和名称空间：
依赖项：
    NETStandard.Library
    System.Net.NameResolution
名称空间：
    System
    System.Net
    System.Threading.Tasks
    static System.Console
样例应用程序实现为一个控制台应用程序（包），要求用户输入主机名（也可以添加
一个IP地址），通过Dns.GetHostEntryAsync得到一个IPHostEntry。在IPHostEntry中，使用
AddressList属性访问地址列表。主机的所有地址以及AddressFamily都写入控制台（代码文
件DnsLookup / Program.cs）：
    static void Main()
    {
      do
      {
        Write("Hostname:\t");
        string hostname = ReadLine();
        if (hostname.CompareTo("exit") == 0)
        {
        WriteLine("bye! ");
        return;
        }
        OnLookupAsync(hostname).Wait();
        WriteLine();
      } while (true);
    }
    public static async Task OnLookupAsync(string hostname)
    {
      try
      {