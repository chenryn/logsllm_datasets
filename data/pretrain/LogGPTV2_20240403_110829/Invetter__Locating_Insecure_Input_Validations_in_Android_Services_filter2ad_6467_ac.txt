(cid:11)(cid:68)(cid:12)(cid:3)(cid:57)(cid:72)(cid:85)(cid:76)(cid:73)(cid:92)(cid:3)(cid:70)(cid:68)(cid:79)(cid:79)(cid:72)(cid:85)(cid:3)(cid:76)(cid:71)(cid:72)(cid:81)(cid:87)(cid:76)(cid:87)(cid:92)(cid:11)(cid:69)(cid:12)(cid:53)(cid:72)(cid:86)(cid:87)(cid:85)(cid:76)(cid:70)(cid:87)(cid:3)(cid:86)(cid:72)(cid:81)(cid:86)(cid:76)(cid:87)(cid:76)(cid:89)(cid:72)(cid:3)(cid:85)(cid:72)(cid:86)(cid:82)(cid:88)(cid:85)(cid:70)(cid:72)(cid:3)(cid:88)(cid:86)(cid:68)(cid:74)(cid:72)(cid:3)(cid:83)(cid:72)(cid:85)(cid:80)(cid:76)(cid:86)(cid:86)(cid:76)(cid:82)(cid:81)(cid:76)(cid:71)(cid:15)(cid:3)(cid:88)(cid:76)(cid:71)(cid:15)(cid:3)(cid:81)(cid:72)(cid:87)(cid:76)(cid:71)(cid:15)(cid:3)(cid:75)(cid:82)(cid:86)(cid:87)(cid:76)(cid:71)(cid:15)(cid:3)(cid:70)(cid:82)(cid:81)(cid:71)(cid:76)(cid:87)(cid:76)(cid:82)(cid:81)(cid:76)(cid:71)(cid:15)(cid:3)(cid:3)(cid:86)(cid:86)(cid:76)(cid:71)(cid:15)(cid:3)(cid:81)(cid:72)(cid:87)(cid:90)(cid:82)(cid:85)(cid:78)(cid:76)(cid:71)(cid:15)(cid:68)(cid:70)(cid:70)(cid:72)(cid:86)(cid:86)(cid:76)(cid:71)(cid:81)(cid:68)(cid:80)(cid:72)(cid:15)(cid:83)(cid:68)(cid:70)(cid:78)(cid:68)(cid:74)(cid:72)(cid:81)(cid:68)(cid:80)(cid:72)(cid:15)(cid:3)(cid:70)(cid:79)(cid:68)(cid:86)(cid:86)(cid:81)(cid:68)(cid:80)(cid:72)(cid:15)(cid:3)(cid:71)(cid:72)(cid:89)(cid:76)(cid:70)(cid:72)(cid:81)(cid:68)(cid:80)(cid:72)(cid:88)(cid:76)(cid:71)(cid:15)(cid:3)(cid:79)(cid:68)(cid:86)(cid:87)(cid:88)(cid:83)(cid:71)(cid:68)(cid:87)(cid:72)(cid:88)(cid:76)(cid:71)(cid:15)(cid:3)(cid:3)(cid:88)(cid:76)(cid:71)(cid:85)(cid:68)(cid:81)(cid:74)(cid:72)(cid:15)(cid:3)(cid:70)(cid:85)(cid:72)(cid:68)(cid:87)(cid:82)(cid:85)(cid:88)(cid:76)(cid:71)(cid:78)(cid:72)(cid:92)(cid:15)(cid:3)(cid:78)(cid:72)(cid:92)(cid:70)(cid:82)(cid:71)(cid:72)(cid:86)(cid:87)(cid:68)(cid:87)(cid:72)(cid:15)(cid:3)(cid:86)(cid:87)(cid:68)(cid:87)(cid:88)(cid:86)(cid:87)(cid:82)(cid:78)(cid:72)(cid:81)(cid:15)(cid:3)(cid:70)(cid:88)(cid:86)(cid:87)(cid:82)(cid:80)(cid:87)(cid:82)(cid:78)(cid:72)(cid:81)(cid:15)(cid:3)(cid:90)(cid:76)(cid:81)(cid:71)(cid:82)(cid:90)(cid:87)(cid:82)(cid:78)(cid:72)(cid:81)(cid:68)(cid:71)(cid:71)(cid:85)(cid:72)(cid:86)(cid:86)(cid:15)(cid:3)(cid:80)(cid:68)(cid:70)(cid:68)(cid:71)(cid:71)(cid:85)(cid:72)(cid:86)(cid:86)(cid:71)(cid:72)(cid:89)(cid:76)(cid:70)(cid:72)(cid:15)(cid:71)(cid:72)(cid:89)(cid:76)(cid:70)(cid:72)(cid:81)(cid:68)(cid:80)(cid:72)(cid:83)(cid:68)(cid:70)(cid:78)(cid:68)(cid:74)(cid:72)(cid:15)(cid:3)(cid:83)(cid:68)(cid:70)(cid:78)(cid:68)(cid:74)(cid:72)(cid:76)(cid:81)(cid:73)(cid:82)(cid:15)(cid:3)(cid:83)(cid:68)(cid:70)(cid:78)(cid:68)(cid:74)(cid:72)(cid:81)(cid:68)(cid:80)(cid:72)(cid:15)(cid:76)(cid:81)(cid:73)(cid:82)(cid:15)(cid:68)(cid:83)(cid:83)(cid:79)(cid:76)(cid:70)(cid:68)(cid:87)(cid:76)(cid:82)(cid:81)(cid:76)(cid:81)(cid:73)(cid:82)(cid:15)(cid:81)(cid:72)(cid:87)(cid:90)(cid:82)(cid:85)(cid:78)(cid:76)(cid:81)(cid:73)(cid:82)(cid:83)(cid:68)(cid:70)(cid:78)(cid:68)(cid:74)(cid:72)(cid:76)(cid:81)(cid:73)(cid:82)(cid:15)(cid:68)(cid:70)(cid:87)(cid:76)(cid:89)(cid:76)(cid:87)(cid:92)(cid:76)(cid:81)(cid:73)(cid:82)(cid:3)(cid:88)(cid:86)(cid:72)(cid:85)(cid:15)(cid:3)(cid:88)(cid:86)(cid:72)(cid:85)(cid:76)(cid:71)(cid:15)(cid:3)(cid:88)(cid:86)(cid:72)(cid:85)(cid:75)(cid:68)(cid:81)(cid:71)(cid:79)(cid:72)(cid:15)(cid:3)(cid:68)(cid:70)(cid:87)(cid:76)(cid:89)(cid:76)(cid:87)(cid:92)(cid:68)(cid:86)(cid:88)(cid:86)(cid:72)(cid:85)(cid:68)(cid:70)(cid:70)(cid:82)(cid:88)(cid:81)(cid:87)(cid:15)(cid:3)(cid:68)(cid:70)(cid:70)(cid:82)(cid:88)(cid:81)(cid:87)(cid:87)(cid:92)(cid:83)(cid:72)(cid:76)(cid:71)(cid:72)(cid:81)(cid:87)(cid:76)(cid:73)(cid:76)(cid:72)(cid:85)(cid:15)(cid:3)(cid:88)(cid:83)(cid:71)(cid:68)(cid:87)(cid:72)(cid:76)(cid:71)(cid:72)(cid:81)(cid:87)(cid:76)(cid:73)(cid:76)(cid:72)(cid:85)(cid:3)(cid:70)(cid:72)(cid:85)(cid:87)(cid:15)(cid:3)(cid:70)(cid:72)(cid:85)(cid:87)(cid:76)(cid:73)(cid:76)(cid:70)(cid:68)(cid:87)(cid:72)(cid:15)(cid:3)(cid:70)(cid:85)(cid:72)(cid:71)(cid:76)(cid:72)(cid:81)(cid:87)(cid:76)(cid:68)(cid:79)(cid:15)(cid:3)(cid:86)(cid:72)(cid:86)(cid:86)(cid:76)(cid:82)(cid:81)(cid:3)(cid:258)(cid:87)(cid:92)(cid:83)(cid:72)(cid:15)(cid:3)(cid:72)(cid:89)(cid:72)(cid:81)(cid:87)(cid:87)(cid:92)(cid:83)(cid:72)(cid:73)(cid:79)(cid:68)(cid:74)(cid:15)(cid:3)(cid:76)(cid:73)(cid:79)(cid:68)(cid:74)(cid:86)(cid:15)(cid:3)(cid:80)(cid:73)(cid:79)(cid:68)(cid:74)(cid:76)(cid:70)(cid:82)(cid:81)(cid:15)(cid:3)(cid:76)(cid:70)(cid:82)(cid:81)(cid:73)(cid:76)(cid:79)(cid:72)(cid:87)(cid:76)(cid:80)(cid:72)(cid:15)(cid:3)(cid:87)(cid:76)(cid:80)(cid:72)(cid:86)(cid:87)(cid:68)(cid:80)(cid:83)(cid:3)(cid:76)(cid:87)(cid:72)(cid:80)(cid:86)(cid:15)(cid:3)(cid:76)(cid:87)(cid:72)(cid:80)(cid:68)(cid:87)(cid:15)(cid:3)(cid:76)(cid:87)(cid:72)(cid:80)(cid:70)(cid:82)(cid:88)(cid:81)(cid:87)(cid:85)(cid:72)(cid:86)(cid:82)(cid:88)(cid:85)(cid:70)(cid:72)(cid:15)(cid:3)(cid:86)(cid:82)(cid:88)(cid:85)(cid:70)(cid:72)(cid:69)(cid:82)(cid:88)(cid:81)(cid:71)(cid:15)(cid:3)(cid:90)(cid:82)(cid:85)(cid:78)(cid:86)(cid:82)(cid:88)(cid:85)(cid:70)(cid:72)(cid:3)(cid:87)(cid:75)(cid:85)(cid:72)(cid:86)(cid:75)(cid:82)(cid:79)(cid:71)(cid:258)(cid:3)(cid:70)(cid:68)(cid:87)(cid:72)(cid:74)(cid:82)(cid:85)(cid:92)(cid:258)(cid:3)(cid:71)(cid:88)(cid:85)(cid:68)(cid:87)(cid:76)(cid:82)(cid:81)(cid:70)(cid:80)(cid:71)(cid:258)(cid:3)(cid:3)(cid:74)(cid:85)(cid:82)(cid:88)(cid:83)(cid:258)(cid:3)(cid:53)(cid:72)(cid:86)(cid:83)(cid:82)(cid:81)(cid:86)(cid:72)(cid:258)(cid:3)(cid:258)(cid:3)(cid:54)(cid:72)(cid:72)(cid:71)(cid:86)(cid:72)(cid:91)(cid:83)(cid:68)(cid:81)(cid:86)(cid:76)(cid:82)(cid:81)(cid:76)(cid:71)(cid:15)(cid:3)(cid:3)(cid:87)(cid:82)(cid:78)(cid:72)(cid:81)(cid:15)(cid:3)(cid:3)(cid:70)(cid:72)(cid:85)(cid:87)(cid:15)(cid:3)(cid:3)(cid:83)(cid:68)(cid:70)(cid:78)(cid:68)(cid:74)(cid:72)(cid:15)(cid:3)(cid:3)(cid:81)(cid:68)(cid:80)(cid:72)(cid:87)(cid:92)(cid:83)(cid:72)(cid:15)(cid:3)(cid:3)(cid:73)(cid:79)(cid:68)(cid:74)(cid:15)(cid:3)(cid:3)(cid:70)(cid:82)(cid:71)(cid:72)(cid:15)(cid:3)(cid:3)(cid:86)(cid:87)(cid:68)(cid:87)(cid:72)(cid:72)(cid:91)(cid:83)(cid:68)(cid:81)(cid:86)(cid:76)(cid:82)(cid:81)(cid:40)(cid:91)(cid:83)(cid:68)(cid:81)(cid:86)(cid:76)(cid:82)(cid:81)(cid:3)(cid:86)(cid:72)(cid:87)(cid:54)(cid:72)(cid:72)(cid:71)(cid:86)(cid:40)(cid:91)(cid:83)(cid:68)(cid:81)(cid:86)(cid:76)(cid:82)(cid:81)(cid:3)(cid:86)(cid:72)(cid:87)(cid:258)(cid:3)(cid:76)(cid:73)(cid:3)(cid:11)(cid:3)(cid:88)(cid:76)(cid:71)(cid:3)(cid:4)(cid:32)(cid:3)(cid:37)(cid:76)(cid:81)(cid:71)(cid:72)(cid:85)(cid:17)(cid:74)(cid:72)(cid:87)(cid:38)(cid:68)(cid:79)(cid:79)(cid:76)(cid:81)(cid:74)(cid:56)(cid:76)(cid:71)(cid:3)(cid:12)(cid:94)(cid:3)(cid:87)(cid:75)(cid:85)(cid:82)(cid:90)(cid:3)(cid:81)(cid:72)(cid:90)(cid:3)(cid:54)(cid:72)(cid:70)(cid:88)(cid:85)(cid:76)(cid:87)(cid:92)(cid:40)(cid:91)(cid:70)(cid:72)(cid:83)(cid:87)(cid:76)(cid:82)(cid:81)(cid:11)(cid:3)(cid:5)(cid:258)(cid:3)(cid:5)(cid:3)(cid:12)(cid:3)(cid:30)(cid:3)(cid:96)(cid:76)(cid:73)(cid:3)(cid:11)(cid:3)(cid:4)(cid:76)(cid:86)(cid:54)(cid:92)(cid:86)(cid:87)(cid:72)(cid:80)(cid:51)(cid:68)(cid:70)(cid:78)(cid:68)(cid:74)(cid:72)(cid:49)(cid:68)(cid:80)(cid:72)(cid:11)(cid:83)(cid:68)(cid:70)(cid:78)(cid:68)(cid:74)(cid:72)(cid:49)(cid:68)(cid:80)(cid:72)(cid:12)(cid:3)(cid:12)(cid:94)(cid:3)(cid:87)(cid:75)(cid:85)(cid:82)(cid:90)(cid:3)(cid:81)(cid:72)(cid:90)(cid:3)(cid:54)(cid:72)(cid:70)(cid:88)(cid:85)(cid:76)(cid:87)(cid:92)(cid:40)(cid:91)(cid:70)(cid:72)(cid:83)(cid:87)(cid:76)(cid:82)(cid:81)(cid:11)(cid:5)(cid:258)(cid:3)(cid:5)(cid:3)(cid:12)(cid:3)(cid:30)(cid:96)(cid:258)APK(cid:258)terminationFramework(a)Incorrectly trusting app-supplied data(cid:76)(cid:73)(packageNames.contains (event.getPackageName()))event(crafted)APKApp CodeCheck SDK Manager(cid:258)FramewrokbypassRPC call (b)Incorrectly trusting code in the app process(c)Weakened  sensitive input validation in customized imagesAOSPFrameworkCustomized ImplemenetationCheck APKparamapplication processes often acts as a proxy that packages data from
the app and forwards them to Android service processes. During
the data packaging process, these Managers also conduct input
validations (many of which are sensitive).
We consider a case vulnerable when sensitive input validations
are performed in the Android SDK and yet the Android services
do not perform the same sensitive input validations (if both sides
perform the same sensitive input validations then it is still secure).
The scope of Android SDK includes not only the public interfaces,
but also those that are labeled by @hide or @SystemApi, since apps
can access these hidden interfaces with reflection.
Inter-image analysis. Given the set of input validations, we
4.4.2
locate the corresponding public interfaces that deploy these vali-
dations. To locate the weakened sensitive input validations during
vendor customization, we figure out inconsistent sensitive input
validations between AOSP and customized images, as illustrated
in Figure 10.(c). We first group the public interfaces of different
system images, based on similarities in their method behaviors.
Specifically, we borrow the techniques from [36] that represent a
method behavior based on its data dependency graphs. We deter-
mine two methods to be similar when the similarity score is higher
than 0.7. Specifically, the threshold is determined empirically from a
small-scale experiment where we apply our inconsistent validation
detection with AOSP as baseline to 4 third party images with three
different thresholds (0.6, 0.7 and 0.8). As illustrated in Figure 11,
0.7 is the largest threshold that Invetter can find similar but not
identical methods. Anything above (e.g., 0.8) is too strict and can
find only unmodified methods. Then, by comparing the enforced
validations inside each group, Invetter reports inconsistent access
controls among different system images.
Note that it is insufficient to simply look at the class names and
method names to determine similarity. The reason is that many
vendor-customized services introduce new system services, which
achieve similar functionalities as AOSP services yet with reduced
security. We suspect that this is often times for reasons of conve-
nience — it may be complex to change the existing AOSP services
directly.
5 IMPLEMENTATION
We implement Invetter on an open source static analysis framework,
Soot [24], with about 12,000 lines of Java code, which we plan
to open source. Our implementation follows the same workflow
as illustrated in Figure 6. In this section, we discuss a few major
technical issues in implementing Invetter.
Extracting system services. The third-party system images are
commonly not open-source. Thus, to analyze their code, Invetter
uses Java bytecode as input. As the first step of our analysis, we
extract Java classes from system images for analyzing. For a specific
system image, Invetter first dumps all dex, odex, and oat files from it.
Then, by using oatTodex, Invetter translates oat files and odex files
into dex files. Next, the dex files can be processed by a tool dexTojar,
which translates them into jar files, in which the corresponding
Java class files are zipped. Invetter uses the Java bytecode extracted
from the jar files as the analysis target.
Figure 11: The results of evaluating different thresholds in
inter-image analysis. The three columns present the results
under different thresholds (0.8, 0.7, and 0.6 respectively).
Figure 12: An example of client-side code for building a
Binder-based RPC connection to a system service.
A critical technical challenge for Invetter is to extract a com-
plete list of system services. At runtime, all system services register
themselves to Android ServiceManager so that the system can start
all available services when initialized. However, there is no direct
way to obtain the service list statically. Related work [26] searches
the specific register interfaces, such as addService in ServiceMan-
ager. But in this way, only services registered in Java code can be
extracted. Unfortunately, we find that many system services are
registered to the system in native code. Additionally, smartphone
vendors may customize their own service managers and register
methods. Thus the system services in customized images cannot
be completely identified with this approach.
We propose another approach based on the observation that
if a system service is available to use, there should be some code
in the system (e.g., Android SDK) that visits its public interfaces.
Specifically, we identify a system service by finding one of its clients
in the Java bytecode, that is, recognizing a client-side Proxy for
Android Binder-based RPC. Figure 12 depicts an example of this.
Besides, we also use the register interfaces as a supplement.
Extracting public interfaces. For each system service we find,
we extract all its app-accessible public interfaces. Specifically, two
kinds of public interfaces are considered in this paper. First, as
aforementioned, methods declared by AIDL are public interfaces of
services. Thus, they are extracted as targets of our analysis. Second,
public interfaces documented by Android SDK are also extracted.
 0 5 10 15 20 25 30 35 40 45 50Xiaomi Note2HuaWei Mate9HuaWei P9Samsung S6Inconsistency between similar methodsTrue PositiveFalse PositiveIBinder iBinder  =  ServiceManager.getService("accessibility");IAccessibilityManager service  =     IAccessibilityManager.Stub.asInterface(iBinder);These interfaces are APIs (of various Managers) executed in app-
controlled processes (see Figure 2). We utilize these interfaces to
find misplaced validations described in §3.
Constructing control flow graph. Since Invetter conducts its
analysis based on the control flow graph of Android framework,
complete and precise call graph and control flow graph are essential
for our approach. Invetter uses inter-procedure analysis to achieve
better coverage and accuracy, thus it requires both intra-procedure
information about how the execution flows inside the methods, and
inter-procedure call information. To construct complete call graphs
and control flow graphs, we first leverage the approach proposed
in Axplorer [5], to connect the callers and their callees of asynchro-
nous or implicit function calls. Besides, we utilize Spark, to generate
points-to and class-hierarchy information, and to recognize possible
referenced object types for each method call.
Conducting path-sensitive analysis. Path-sensitive analysis is
often prohibitively expensive to apply in complex systems. Invetter
requires inter-procedure analysis to cover inter-method execution
paths, which further expands the search space. While there are
many system methods that are relatively simple and can be handled,
some methods have complicated control flow graph and generate
plenty of execution paths.
To overcome this problem, we reduce the execution paths by
applying several optimizations illustrated in Figure 13. First, given
a basic block, if none of its instructions (or its descendant nodes’
instructions) is data/control dependent on the service input, and it
is not dominated by any permission, then it is ignored by Invetter.
For example, we do not analyze node C in Figure 13. Second, if a
basic block is dominated by a system level privileged permission
validation, Invetter ignores this node. For example, node A in Fig-
ure 13 will not be further analyzed. We manually checked the logic
of 21 interfaces checking privileged permissions, and found that all
of them rely on the secure input provided by the system (e.g. uid
from system interface Binder.getCallingUid()). Thus, this optimiza-
tion do not introduce false negatives to Invetter. Besides, all normal
conditional jumps recognized in §4 are also ignored in our analysis.
After the optimizations, we obtain a simplified control flow graph
which contains less paths to be analyzed.
6 EVALUATION
In this section, we evaluate Invetter’s effectiveness, efficiency, and
accuracy by applying it to 8 different Android system images, in-
cluding 4 versions of AOSP (5.0, 6.0, 7.0, 7.1), and 4 system images
customized by 3 different vendors (Samsung S6, XiaoMi Note2,
HuaWei P9, and HuaWei Mate9). Additionally, since Android 8.0
utilizes a new dex file format, called vdex, and currently no tool
can extract Java byte code from vdex files, thus we cannot apply
Invetter to this version of Android. However, some vulnerabilities
reported on the other Android versions still affect Android AOSP
8.0 and some other 3rd party Android images including Xiaomi
Mix2(Android 8.0) and Huawei P10(Android 8.0). When applicable,
we test our exploit programs against Android 8.0.
We also present some vulnerabilities identified by our approach
as case studies. Our static analysis framework is running on a Cen-
tOS 7 server, with four 8-core 2.0GHz CPUs and 192 GB memory.
Figure 13: An example of optimizations for path-sensitive
analysis.
Android Image
(Version)
AOSP(7.1)
AOSP(7.0)
AOSP(6.0)
AOSP(5.0)
Huawei Mate9(7.0)
Huawei P9(7.0)
XiaoMi Note2(6.0)
Samsung S6(5.0)
#Service
(105)118
(103)115
(89)103
(87)96
(131)156
(118)139
(100)126
(191)214
#Public
interfaces
2126
2072
1786
1562
2292
1756
2077
3584
#Classes
19425
15524
15166
12179
20100
18608
21961
18933
Table 1: The statistics of system services in different Android
system images. In the second column, the number in the
parentheses are system services covered by Kratos [26] and
the other number is Invetter’s result.
Statistics of analysis target. Our 8 target Android system images
are summarized in Table 1. As we can see, the number of system ser-
vices increases dramatically from Android 5.0 to 7.1, which leads to
an increasing demand of security validations. Additionally, though
both Huawei P9 and Huawei Mate 9 are based on the same Android
version (7.0) and come from the same vendor, they have different
numbers of services. It indicates the level of service customizations
is fairly intense; even a same vendor may need to distinguish their
own products. Moreover, standing out from other vendors, Samsung
adds the most number of new services and public interfaces.
To illustrate the effectiveness of Invetter to extract system ser-
vices, we also compare the number of system services covered by
Invetter to the number reported in Kratos [26]. As presented in Ta-
ble 1, by applying our new method to find system services through
the client-side code (discussed in §5), Invetter covers more services
than Kratos. After manually verifying these newly found services,
we confirm that all these services are valid Android system services
and should be included in our analysis.
Efficiency. To illustrate the efficiency of Invetter, we summarize
Invetter’s analysis time on different Android images. For a specific
ABCBOriginal Control Flow Graph Path OptimizationSimplified Control Flow GraphCheck System-level PermissionCheck App-level Permission or  depend on inputCheck App-level Permission or  depend on inputMaybe missing  validationAOSP(7.1)
AOSP(7.0)
AOSP(6.0)
AOSP(5.0)
Android Image (Version) C1 C2 C3
-
-
-
-
9
26
14
41
Huawei P9(7.0)
XiaoMi Note2(6.0)
Samsung S6(5.0)
Huawei Mate9(7.0)
27
24
23
20
27
25
28
35
8
7
6
5
5
5
7
6
Table 2: The number of possible insecure validations in dif-
ferent Android images. These results are categorized by: in-
correctly trusting app-supplied data(C1), incorrectly trust-
ing code in the app process(C2), and weakened validation in
customized system services(C3).
Android image, Invetter needs about 85 minutes to generate an anal-
ysis report. Besides, the analysis time of Invetter is mostly consumed
in the structure analysis phase, which applies an inter-procedure
path-sensitive data-flow analysis. Since the whole analysis process
can be finished in 11.8 hours for 8 Android images, we consider the
execution time of our tool acceptable.
6.1 Tool Accuracy
After recognizing access controls used in the 8 tested system images,
Invetter finds 1865 input validations used in Android framework