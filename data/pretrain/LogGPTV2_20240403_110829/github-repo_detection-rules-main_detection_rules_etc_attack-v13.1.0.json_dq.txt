### Clear Command History

**Description:**
In addition to clearing system logs, adversaries may clear the command history of a compromised account to conceal their actions during an intrusion. Both macOS and Linux maintain a record of commands entered by users in their terminal, allowing them to retrace their activities. This command history is typically stored in a file pointed to by the environment variable `HISTFILE`. When a user logs off, this information is flushed to a file in the user's home directory, usually named `~/.bash_history`.

This feature allows users to recall previously used commands across different sessions. However, it also means that any passwords passed on the command line are saved in plain text. Adversaries can exploit this by searching these files for cleartext passwords. Additionally, they can use various methods to prevent their own commands from being recorded in these logs, such as:
- Unsetting the `HISTFILE` variable.
- Setting `HISTFILESIZE` to 0.
- Clearing the history with `history -c`.
- Removing the `~/.bash_history` file.

**External References:**
- [T1146](https://attack.mitre.org/techniques/T1146)

**Kill Chain Phases:**
- **Phase Name:** Defense Evasion

**Detection:**
- Monitor for user authentication, especially via remote terminal services like SSH, without new entries in the user's `~/.bash_history`.
- Look for modifications to the `HISTFILE` and `HISTFILESIZE` environment variables.
- Detect the removal or clearing of the `~/.bash_history` file.

**Platforms:**
- Linux
- macOS

---

### Windows Credential Manager

**Description:**
Adversaries may acquire credentials from the Windows Credential Manager, which stores credentials for websites, applications, and devices that request authentication through NTLM or Kerberos. The Credential Manager separates website credentials from application or network credentials into two lockers: Web Credentials and Windows Credentials.

Credential Lockers store credentials in encrypted `.vcrd` files, located under `%Systemdrive%\Users\[Username]\AppData\Local\Microsoft\[Vault/Credentials]`. The encryption key is stored in a file named `Policy.vpol`, typically in the same folder as the credentials.

Adversaries can list credentials managed by the Windows Credential Manager using several mechanisms, including:
- `vaultcmd.exe`: A native Windows executable that can enumerate credentials stored in the Credential Locker.
- Directly reading files inside the Credential Lockers.
- Using Windows APIs like `CredEnumerateA`.

Additionally, adversaries can obtain credentials from credential backups. Backups and restorations can be performed via the `rundll32.exe keymgr.dll KRShowKeyMgr` command, followed by selecting the "Back up..." button in the "Stored User Names and Passwords" GUI.

Password recovery tools can also extract plain text passwords from the Credential Manager.

**External References:**
- [T1555.004](https://attack.mitre.org/techniques/T1555/004)
- [Malwarebytes The Windows Vault](https://blog.malwarebytes.com/101/2016/01/the-windows-vaults/)
- [Delpy Mimikatz Crendential Manager](https://github.com/gentilkiwi/mimikatz/wiki/howto-~-credential-manager-saved-credentials)
- [Microsoft Credential Locker](https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-8.1-and-8/jj554668(v=ws.11)?redirectedfrom=MSDN)
- [Microsoft Credential Manager store](https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-r2-and-2012/hh994565(v=ws.11)#credential-manager-store)
- [Microsoft CredEnumerate](https://docs.microsoft.com/en-us/windows/win32/api/wincred/nf-wincred-credenumeratea)
- [passcape Windows Vault](https://www.passcape.com/windows_password_recovery_vault_explorer)

**Kill Chain Phases:**
- **Phase Name:** Credential Access

**Detection:**
- Monitor process and command-line parameters of `vaultcmd.exe` for suspicious activity, such as listing credentials from the Windows Credentials locker.
- Monitor API calls like `CredEnumerateA` that may list credentials from the Windows Credential Manager.
- Monitor file reads to Vault locations, such as `%Systemdrive%\Users\[Username]\AppData\Local\Microsoft\[Vault/Credentials]`, for suspicious activity.

**Platforms:**
- Windows

---

### Emond

**Description:**
Adversaries may use the Event Monitor Daemon (emond) to establish persistence by scheduling malicious commands to run on predictable event triggers. Emond is a Launch Daemon that accepts events from various services, runs them through a simple rules engine, and takes action. The emond binary at `/sbin/emond` will load any rules from the `/etc/emond.d/rules/` directory and take action once an explicitly defined event occurs. Examples of event types include system startup and user authentication. Actions can include running a system command or sending an email.

The emond service will not launch if there is no file present in the QueueDirectories path `/private/var/db/emondClients`, specified in the Launch Daemon configuration file at `/System/Library/LaunchDaemons/com.apple.emond.plist`.

Adversaries may abuse this service by writing a rule to execute commands when a defined event occurs, such as system startup or user authentication. They may also escalate privileges from administrator to root, as the emond service is executed with root privileges by the Launch Daemon service.

**External References:**
- [T1519](https://attack.mitre.org/techniques/T1519)
- [xorrior emond Jan 2018](https://www.xorrior.com/emond-persistence/)
- [magnusviri emond Apr 2016](http://www.magnusviri.com/Mac/what-is-emond.html)
- [sentinelone macos persist Jun 2019](https://www.sentinelone.com/blog/how-malware-persists-on-macos/)

**Kill Chain Phases:**
- **Phase Name:** Persistence
- **Phase Name:** Privilege Escalation

**Detection:**
- Monitor for the creation or modification of files in `/etc/emond.d/rules/` and `/private/var/db/emondClients`.

**Platforms:**
- macOS

---

### Spearphishing via Service

**Description:**
Spearphishing via service is a specific variant of spearphishing that uses third-party services rather than enterprise email channels. Adversaries send messages through social media services, personal webmail, and other non-enterprise-controlled services, which often have less strict security policies. The goal is to generate rapport with the target or get their interest. Adversaries create fake social media accounts and message employees for potential job opportunities, asking about services, policies, and software running in the environment. They then send malicious links or attachments through these services.

A common example is building rapport with a target via social media and then sending content to their personal webmail, which they open on their work computer. This bypasses email restrictions and makes the target more likely to open the file.

**External References:**
- [T1194](https://attack.mitre.org/techniques/T1194)
- [CAPEC-163](https://capec.mitre.org/data/definitions/163.html)

**Kill Chain Phases:**
- **Phase Name:** Initial Access

**Detection:**
- Use SSL/TLS inspection to detect initial communication/delivery.
- Use anti-virus to detect malicious documents and files downloaded on the user's computer.
- Use endpoint sensing or network sensing to detect malicious events once the file is opened.

**Platforms:**
- Windows
- macOS
- Linux

---

### Hardware Additions

**Description:**
Adversaries may introduce computer accessories, networking hardware, or other computing devices into a system or network to gain access. These additions can be used to introduce new functionalities and features that can be abused. While public references of usage by threat actors are scarce, many red teams and penetration testers leverage hardware additions for initial access. Commercial and open-source products can be used for passive network tapping, network traffic modification, keystroke injection, kernel memory reading via DMA, adding new wireless access to an existing network, and other purposes.

**External References:**
- [T1200](https://attack.mitre.org/techniques/T1200)
- [Ossmann Star Feb 2011](https://ossmann.blogspot.com/2011/02/throwing-star-lan-tap.html)
- [Aleks Weapons Nov 2015](https://www.youtube.com/watch?v=lDvf4ScWbcQ)
- [McMillan Pwn March 2012](https://arstechnica.com/information-technology/2012/03/the-pwn-plug-is-a-little-white-box-that-can-hack-your-network/)
- [Frisk DMA August 2016](https://www.youtube.com/watch?v=fXthwl6ShOg)

**Kill Chain Phases:**
- **Phase Name:** Initial Access

**Detection:**
- Use asset management systems to detect unauthorized computer systems or network devices.
- Use endpoint sensors to detect the addition of hardware via USB, Thunderbolt, and other external device communication ports.

**Platforms:**
- Windows
- Linux
- macOS

---

### Server Software Component

**Description:**
Adversaries may abuse legitimate extensible development features of servers to establish persistent access. Enterprise server applications may include features that allow developers to write and install software or scripts to extend the functionality of the main application. Adversaries may install malicious components to extend and abuse server applications.

**External References:**
- [T1505](https://attack.mitre.org/techniques/T1505)
- [volexity_0day_sophos_FW](https://www.volexity.com/blog/2022/06/15/driftingcloud-zero-day-sophos-firewall-exploitation-and-an-insidious-breach/)
- [US-CERT Alert TA15-314A Web Shells](https://www.us-cert.gov/ncas/alerts/TA15-314A)

**Kill Chain Phases:**
- **Phase Name:** Persistence

**Detection:**
- Monitor application logs for abnormal behavior that may indicate the suspicious installation of application software components.
- Monitor file locations associated with the installation of new application software components.
- Use process monitoring to detect servers' components that perform suspicious actions.

**Platforms:**
- Windows
- Linux
- macOS
- Network

---

### Data Destruction

**Description:**
Adversaries may destroy data and files on specific systems or in large numbers on a network to interrupt availability to systems, services, and network resources. Data destruction is likely to render stored data irrecoverable by forensic techniques through overwriting files or data on local and remote drives. Common operating system file deletion commands such as `del` and `rm` often only remove pointers to files without wiping the contents, making the files recoverable by proper forensic methodology.

Adversaries may attempt to overwrite files and directories with randomly generated data to make them irrecoverable. In some cases, politically oriented image files have been used to overwrite data. To maximize impact, malware designed for destroying data may have worm-like features to propagate across a network by leveraging additional techniques like Valid Accounts, OS Credential Dumping, and SMB/Windows Admin Shares.

In cloud environments, adversaries may delete cloud storage, cloud storage accounts, machine images, and other infrastructure crucial to operations to damage an organization or their customers.

**External References:**
- [T1485](https://attack.mitre.org/techniques/T1485)
- [Symantec Shamoon 2012](https://www.symantec.com/connect/blogs/shamoon-attacks)
- [FireEye Shamoon Nov 2016](https://www.fireeye.com/blog/threat-research/2016/11/fireeye_respondsto.html)
- [Palo Alto Shamoon Nov 2016](http://researchcenter.paloaltonetworks.com/2016/11/unit42-shamoon-2-return-disttrack-wiper/)
- [Kaspersky StoneDrill 2017](https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2018/03/07180722/Report_Shamoon_StoneDrill_final.pdf)
- [Unit 42 Shamoon3 2018](https://unit42.paloaltonetworks.com/shamoon-3-targets-oil-gas-organization/)
- [Talos Olympic Destroyer 2018](https://blog.talosintelligence.com/2018/02/olympic-destroyer.html)
- [Data Destruction - Threat Post](https://threatpost.com/hacker-puts-hosting-service-code-spaces-out-of-business/106761/)
- [DOJ - Cisco Insider](https://www.justice.gov/usao-ndca/pr/san-jose-man-pleads-guilty-damaging-cisco-s-network)

**Kill Chain Phases:**
- **Phase Name:** Impact

**Detection:**
- Use process monitoring to monitor the execution and command-line parameters of binaries that could be involved in data destruction activity, such as SDelete.
- Monitor for the creation of suspicious files and high unusual file modification activity.
- In cloud environments, look for anomalous high-volume deletion events, such as the `DeleteDBCluster` and `DeleteGlobalCluster` events in AWS, or a high quantity of data deletion events, such as `DeleteBucket`, within a short period of time.

**Platforms:**
- Windows
- IaaS
- Linux
- macOS

---

### Non-Standard Encoding

**Description:**
Adversaries may encode data with a non-standard data encoding system to make the content of command and control traffic more difficult to detect. Command and control (C2) information can be encoded using a non-standard data encoding system that diverges from existing protocol specifications. Non-standard data encoding schemes may be based on or related to standard data encoding schemes, such as a modified Base64 encoding for the message body of an HTTP request.

**External References:**
- [T1132.002](https://attack.mitre.org/techniques/T1132/002)
- [Wikipedia Binary-to-text Encoding](https://en.wikipedia.org/wiki/Binary-to-text_encoding)
- [Wikipedia Character Encoding](https://en.wikipedia.org/wiki/Character_encoding)
- [University of Birmingham C2](https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf)

**Kill Chain Phases:**
- **Phase Name:** Command and Control

**Detection:**
- Analyze network data for uncommon data flows.
- Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port being used.

**Platforms:**
- Linux
- macOS
- Windows

---

### Domain Controller Authentication

**Description:**
Adversaries may patch the authentication process on a domain controller to bypass typical authentication mechanisms and enable access to accounts. Malware, such as Skeleton Key, can inject false credentials into the authentication process on a domain controller, creating a backdoor used to access any user's account and/or credentials. Once patched, an adversary can use the injected password to successfully authenticate as any domain user account until the skeleton key is erased from memory by a reboot of the domain controller. Authenticated access may enable unfettered access to hosts and/or resources within single-factor authentication environments.

**External References:**
- [T1556.001](https://attack.mitre.org/techniques/T1556/001)
- [Dell Skeleton](https://www.secureworks.com/research/skeleton-key-malware-analysis)
- [TechNet Audit Policy](https://technet.microsoft.com/en-us/library/dn487457.aspx)

**Kill Chain Phases:**
- **Phase Name:** Credential Access
- **Phase Name:** Defense Evasion
- **Phase Name:** Persistence

**Detection:**
- Monitor for calls to `OpenProcess` that can be used to manipulate `lsass.exe` running on a domain controller.
- Monitor for malicious modifications to functions exported from authentication-related system DLLs.
- Configure robust, consistent account activity audit policies across the enterprise and with externally accessible services.
- Look for suspicious account behavior across systems that share accounts, either user, admin, or service accounts.

**Platforms:**
- Windows

---

### Transfer Data to Cloud Account

**Description:**
Adversaries may exfiltrate data by transferring it to another cloud account they control on the same service to avoid typical file transfers/downloads and network-based exfiltration detection. A defender who is monitoring for large transfers to outside the cloud environment through normal file transfers or over command and control channels may not be watching for data transfers to another account within the same cloud provider. Such transfers may utilize existing cloud provider APIs and the internal address space of the cloud provider to blend into normal traffic or avoid data transfers over external network interfaces.

Incidents have been observed where adversaries have created backups of cloud instances and transferred them to separate accounts.

**External References:**
- [T1537](https://attack.mitre.org/techniques/T1537)
- [AWS EBS Snapshot Sharing](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-modifying-snapshot-permissions.html)
- [Azure Shared Access Signature](https://docs.microsoft.com/en-us/rest/api/storageservices/delegate-access-with-shared-access-signature)
- [Azure Blob Snapshots](https://docs.microsoft.com/en-us/azure/storage/blobs/snapshots-overview)
- [DOJ GRU Indictment Jul 2018](https://www.justice.gov/file/1080281/download)

**Kill Chain Phases:**
- **Phase Name:** Exfiltration

**Detection:**
- Monitor account activity for attempts to share data, snapshots, or backups with untrusted or unusual accounts on the same cloud service provider.
- Monitor for anomalous file transfer activity between accounts and to untrusted VPCs.
- In AWS, sharing an Elastic Block Store (EBS) snapshot generates a `ModifySnapshotAttribute` event in CloudTrail logs.
- In Azure, creating a Shared Access Signature (SAS) URI for a Virtual Hard Disk (VHD) snapshot generates a "Get Snapshot SAS URL" event in Activity Logs.

**Platforms:**
- IaaS

---

### HTML Smuggling

**Description:**
Adversaries may smuggle data and files past content filters by hiding malicious payloads inside seemingly benign HTML files. HTML documents can store large binary objects known as JavaScript Blobs, which can later be constructed into file-like objects. Data may also be stored in Data URLs, which enable embedding media type or MIME files inline of HTML documents. HTML5 also introduced a download attribute that may be used to initiate file downloads.

Adversaries may deliver payloads to victims that bypass security controls through HTML Smuggling by abusing JavaScript Blobs and/or HTML5 download attributes. Security controls such as web content filters may not identify smuggled malicious files inside of HTML/JS files, as the content may be based on typically benign MIME types such as `text/plain` and `text/html`. Malicious files or data can be obfuscated and hidden inside of HTML files through Data URLs and/or JavaScript Blobs and can be deobfuscated when they reach the victim.

For example, JavaScript Blobs can be abused to dynamically generate malicious files on the victim's machine and may be dropped to disk by abusing JavaScript functions such as `msSaveBlob`.

**External References:**
- [T1027.006](https://attack.mitre.org/techniques/T1027/006)
- [Outlflank HTML Smuggling 2018](https://outflank.nl/blog/2018/08/14/html-smuggling-explained/)
- [MSTIC NOBELIUM May 2021](https://www.microsoft.com/security/blog/2021/05/27/new-sophisticated-email-based-attack-from-nobelium/)
- [HTML Smuggling Menlo Security 2020](https://www.menlosecurity.com/blog/new-attack-alert-duri)
- [nccgroup Smuggling HTA 2017](https://research.nccgroup.com/2017/08/08/smuggling-hta-files-in-internet-explorer-edge/)

**Kill Chain Phases:**
- **Phase Name:** Defense Evasion

**Detection:**
- Detection of HTML Smuggling is difficult as HTML5 and JavaScript attributes are used by legitimate services and applications.
- Detecting specific JavaScript and/or HTML5 attribute strings such as `Blob`, `msSaveOrOpenBlob`, and `download` may be a good indicator of HTML Smuggling.
- Consider monitoring files downloaded from the Internet, possibly by HTML Smuggling, for suspicious activities.

**Platforms:**
- Windows
- Linux
- macOS

---

### Reversible Encryption

**Description:**
An adversary may abuse Active Directory authentication encryption properties to gain access to credentials on Windows systems. The `AllowReversiblePasswordEncryption` property specifies whether reversible password encryption for an account is enabled or disabled. By default, this property is disabled and should not be enabled unless legacy or other software requires it.

If the property is enabled and/or a user changes their password after it is enabled, an adversary may be able to obtain the plaintext of passwords created/changed after the property was enabled. To decrypt the passwords, an adversary needs four components:
1. Encrypted password (`G$RADIUSCHAP`) from the Active Directory user-structure `userParameters`.
2. 16-byte randomly-generated value (`G$RADIUSCHAPKEY`) also from `userParameters`.
3. Global LSA secret (`G$MSRADIUSCHAPKEY`).
4. Static key hardcoded in the Remote Access Subauthentication DLL (`RASSFM.DLL`).

With this information, an adversary may be able to reproduce the encryption key and subsequently decrypt the encrypted password value.

An adversary may set this property at various scopes through Local Group Policy Editor, user properties, Fine-Grained Password Policy (FGPP), or via the ActiveDirectory PowerShell module. For example, an adversary may implement and apply an FGPP to users or groups if the Domain Functional Level is set to "Windows Server 2008" or higher. In PowerShell, an adversary may make associated changes to user settings using commands similar to `Set-ADUser -AllowReversiblePasswordEncryption $true`.

**External References:**
- [T1556.005](https://attack.mitre.org/techniques/T1556/005)
- [store_pwd_rev_enc](https://docs.microsoft.com/en-us/windows/security/threat-protection/security-policy-settings/store-passwords-using-reversible-encryption)
- [how_pwd_rev_enc_1](http://blog.teusink.net/2009/08/passwords-stored-using-reversible.html)
- [how_pwd_rev_enc_2](http://blog.teusink.net/2009/08/passwords-stored-using-reversible_26.html)
- [dump_pwd_dcsync](https://adsecurity.org/?p=2053)

**Kill Chain Phases:**
- **Phase Name:** Credential Access
- **Phase Name:** Defense Evasion
- **Phase Name:** Persistence

**Detection:**
- Monitor property changes in Group Policy: `Computer Configuration\Windows Settings\Security Settings\Account Policies\Password Policy\Store passwords using reversible encryption`.
- Monitor command-line usage for `-AllowReversiblePasswordEncryption $true` or other actions that could be related to malicious tampering of user settings.
- Monitor Fine-Grained Password Policies and regularly audit user accounts and group settings.

**Platforms:**
- Windows

---

### Command Obfuscation

**Description:**
Adversaries may obfuscate content during command execution to impede detection. Command-line obfuscation is a method of making strings and patterns within commands and scripts more difficult to signature and analyze. This type of obfuscation can be included within commands executed by delivered payloads (e.g., Phishing and Drive-by Compromise) or interactively via Command and Scripting Interpreter.

For example, adversaries may abuse syntax that utilizes various symbols and escape characters (such as spacing, `^`, `+`, `$`, and `%`) to make commands difficult to analyze while maintaining the same intended functionality. Many languages support built-in obfuscation in the form of base64 or URL encoding. Adversaries may also manually implement command obfuscation via string splitting (`"Wor" + "d.Application"`), order and casing of characters (`rev Invoke-Obfuscation and Invoke-DOSfuscation have also been used to obfuscate commands.

**External References:**
- [T1027.010](https://attack.mitre.org/techniques/T1027/010)
- [Twitter Richard WMIC](https://twitter.com/rfackroyd/status/1639136000755765254)
- [Invoke-Obfuscation](https://github.com/danielbohannon/Invoke-Obfuscation)
- [Invoke-DOSfuscation](https://github.com/danielbohannon/Invoke-DOSfuscation)
- [FireEye Obfuscation June 2017](https://web.archive.org/web/20170923102302/https://www.fireeye.com/blog/threat-research/2017/06/obfuscation-in-the-wild.html)
- [Malware Monday VBE](https://bromiley.medium.com/malware-monday-vbscript-and-vbe-files-292252c1a16)
- [Akamai JS](https://www.akamai.com/blog/security/catch-me-if-you-can-javascript-obfuscation)
- [Bashfuscator Command Obfuscators](https://bashfuscator.readthedocs.io/en/latest/Mutators/command_obfuscators/index.html)
- [Microsoft PowerShellB64](https://learn.microsoft.com/powershell/module/microsoft.powershell.core/about/about_powershell_exe?view=powershell-5.1#-encodedcommand-base64encodedcommand)
- [RC PowerShell](https://redcanary.com/threat-detection-report/techniques/powershell/)

**Kill Chain Phases:**
- **Phase Name:** Defense Evasion

**Detection:**
- Detection of command obfuscation can be challenging due to the variety of techniques and the fact that many legitimate scripts and commands also use obfuscation.
- Monitor for unusual command-line arguments and script executions.
- Use behavioral analysis to detect anomalies in command execution patterns.

**Platforms:**
- Linux
- macOS
- Windows

---

### Install Root Certificate

**Description:**
Root certificates are used in public key cryptography to identify a root certificate authority (CA). When a root certificate is installed, the system or application will trust certificates in the root's chain of trust that have been signed by the root certificate. Certificates are commonly used for establishing secure TLS/SSL communications within a web browser. When a user attempts to browse a website that presents a certificate that is not trusted, an error message will be displayed to warn the user of the security risk. Depending on the security settings, the browser may not allow the user to establish a connection to the website.

Installation of a root certificate on a compromised system would give an adversary a way to degrade the security of that system. Adversaries have used this technique to avoid security warnings prompting users when compromised systems connect over HTTPS to adversary-controlled web servers that spoof legitimate websites in order to collect login credentials.

Atypical root certificates have also been pre-installed on systems by the manufacturer or in the software supply chain and were used in conjunction with malware/adware to provide a man-in-the-middle capability for intercepting information transmitted over secure TLS/SSL communications.

Root certificates (and their associated chains) can also be cloned and reinstalled. Cloned certificate chains will carry many of the same metadata characteristics of the source and can be used to sign malicious code that may then bypass signature validation tools (e.g., Sysinternals, antivirus, etc.) used to block execution and/or uncover artifacts of persistence.

In macOS, the Ay MaMi malware uses `/usr/bin/security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain /path/to/malicious/cert` to install a malicious certificate as a trusted root certificate into the system keychain.

**External References:**
- [T1130](https://attack.mitre.org/techniques/T1130)
- [CAPEC-479](https://capec.mitre.org/data/definitions/479.html)
- [Wikipedia Root Certificate](https://en.wikipedia.org/wiki/Root_certificate)
- [Operation Emmental](http://www.trendmicro.com/cloud-content/us/pdfs/security-intelligence/white-papers/wp-finding-holes-operation-emmental.pdf)
- [Kaspersky Superfish](https://www.kaspersky.com/blog/lenovo-pc-with-adware-superfish-preinstalled/7712/)
- [SpectorOps Code Signing Dec 2017](https://posts.specterops.io/code-signing-certificate-cloning-attacks-and-defenses-6f98657fc6ec)
- [objective-see ay mami 2018](https://objective-see.com/blog/blog_0x26.html)
- [Microsoft Sigcheck May 2017](https://docs.microsoft.com/sysinternals/downloads/sigcheck)
- [Tripwire AppUNBlocker](https://www.tripwire.com/state-of-security/off-topic/appunblocker-bypassing-applocker/)

**Kill Chain Phases:**
- **Phase Name:** Defense Evasion

**Detection:**
- A system's root certificates are unlikely to change frequently. Monitor new certificates installed on a system that could be due to malicious activity.
- Check pre-installed certificates on new systems to ensure unnecessary or suspicious certificates are not present.
- Use tools like Microsoft's `Sigcheck` to dump the contents of the certificate store and list valid certificates not rooted to the Microsoft Certificate Trust List.
- Installed root certificates are located in the Registry under `HKLM\SOFTWARE\Microsoft\EnterpriseCertificates\Root\Certificates\` and `[HKLM or HKCU]\Software[\\Policies\\]\Microsoft\SystemCertificates\Root\Certificates\`.

**Platforms:**
- Linux
- Windows
- macOS

---

### Data Encrypted

**Description:**
Data is encrypted before being exfiltrated in order to hide the information that is being exfiltrated from detection or to make the exfiltration less conspicuous upon inspection by a defender. The encryption is performed by a utility, programming library, or custom algorithm on the data itself and is considered separate from any encryption performed by the command and control or file transfer protocol. Common file archive formats that can encrypt files are RAR and zip.

Other exfiltration techniques likely apply as well to transfer the information out of the network, such as Exfiltration Over C2 Channel and Exfiltration Over Alternative Protocol.

**External References:**
- [T1022](https://attack.mitre.org/techniques/T1022)
- [Zhang 2013](http://www.netsec.colostate.edu/~zhang/DetectingEncryptedBotnetTraffic.pdf)
- [Wikipedia File Header Signatures](https://en.wikipedia.org/wiki/List_of_file_signatures)

**Kill Chain Phases:**
- **Phase Name:** Exfiltration

**Detection:**
- Encryption software and encrypted files can be detected in many ways. Common utilities that may be present on the system or brought in by an adversary may be detectable through process monitoring and monitoring for command-line arguments for known encryption utilities.
- A process that loads the Windows DLL `crypt32.dll` may be used to perform encryption, decryption, or verification of file signatures.
- Network traffic may also be analyzed for entropy to determine if encrypted data is being transmitted.
- If the communications channel is unencrypted, encrypted files of known file types can be detected in transit during exfiltration with a network intrusion detection or data loss prevention system analyzing file headers.

**Platforms:**
- Linux
- macOS
- Windows

---

### File Deletion

**Description:**
Adversaries may delete files left behind by the actions of their intrusion activity. Malware, tools, or other non-native files dropped or created on a system by an adversary (e.g., Ingress Tool Transfer) may leave traces to indicate what was done within a network and how. Removal of these files can occur during an intrusion or as part of a post-intrusion process to minimize the adversary's footprint.

There are tools available from the host operating system to perform cleanup, but adversaries may use other tools as well. Examples of built-in Command and Scripting Interpreter functions include `del` on Windows and `rm` or `unlink` on Linux and macOS.

**External References:**
- [T1070.004](https://attack.mitre.org/techniques/T1070/004)
- [Microsoft SDelete July 2016](https://docs.microsoft.com/en-us/sysinternals/downloads/sdelete)

**Kill Chain Phases:**
- **Phase Name:** Defense Evasion

**Detection:**
- It may be uncommon for events related to benign command-line functions such as `DEL` or third-party utilities or tools to be found in an environment, depending on the user base and how systems are typically used.
- Monitoring for command-line deletion functions to correlate with binaries or other files that an adversary may drop and remove may lead to detection of malicious activity.
- Some monitoring tools may collect command-line arguments, but may not capture `DEL` commands since `DEL` is a native function within `cmd.exe`.

**Platforms:**
- Linux
- macOS
- Windows