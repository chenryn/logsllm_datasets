# PhoneAuth: A Comparative Analysis and Evaluation

## Table 1: Comparison of PhoneAuth with Passwords and Google 2-Step Verification
Using Bonneau et al.’s evaluation framework, the following table compares PhoneAuth against traditional passwords and Google 2-Step Verification. The symbol 'y' indicates that the benefit is fully provided, while 's' means the benefit is somewhat provided. Some scores differ from those given by Bonneau.

| Benefit | PhoneAuth | Passwords | Google 2-Step Verification |
|---------|-----------|-----------|----------------------------|
| ...     | ...       | ...       | ...                        |

## Overhead Analysis

### Additional Round Trips During Login
During the login process, the browser makes an additional request to the server to obtain a login ticket from the login service. The latency introduced by this request varies significantly, ranging from a few milliseconds for clients with good network connections near the datacenter to several seconds for mobile clients in rural areas. However, the relative overhead of a single additional round trip is relatively low. For example, loading the login pages for Gmail, Facebook, and Hotmail involves 14, 11, and 14 HTTP requests, respectively, not including the submission of the password and subsequent redirection.

### Involving the Phone During Login
The most significant type of overhead is the time required to establish a Bluetooth connection between the browser and the phone to obtain an identity assertion. Our team measured the average login time for a simple password-based service at 8.8 seconds. When including the identity assertion, the average time increased to 10.3 seconds, with the additional 1.5 seconds primarily spent on establishing the Bluetooth connection. 

We observed that the "long tail" of Bluetooth connection setup times can be considerably slower, sometimes taking up to 7 seconds. To mitigate this, our test login service waits up to 7 seconds to connect to the phone before proceeding with a password-only "unprotected" login. When the phone was turned off, the average login time increased to 16.7 seconds, with most of the additional time spent waiting for the Bluetooth connection.

To reduce login times, we propose techniques such as "lazy verification" of the second factor credentials. This allows the user to log in normally if the second factor device is not found within 1 second, while the server continues to search for the device for another 20 seconds. If the device is found, the user session is upgraded, and no notifications are sent out.

### Comparison with Traditional Two-Factor Authentication
We measured an average login time of 24.5 seconds for a traditional two-factor authentication service, which includes typing a username and password and copying a one-time code from a smartphone app. For users who use 2-factor authentication, PhoneAuth significantly speeds up the process (from 24.5 seconds to 10.3 seconds) while reverting the login experience to a simple "username+password" form submission and improving security.

## Discussion

### Operational Requirements and Deployability
PhoneAuth has several operational requirements for successful deployment:
1. **Browser Integration**: The functionality of our browser extension should be integrated into the actual browser. We have approached the Chromium and Firefox teams to facilitate this.
2. **Developer Ease**: It must be simple for developers to deploy this authentication scheme to their websites. Our service-oriented implementation makes this easy, but a non-trivial deployment is still in the planning phase.
3. **User Testing and Approval**: The system must be tested and approved by users. We believe the main reason similar systems have failed is the lack of support for opportunistic strong user authentication without modifying the user experience, a feature our system provides.
4. **Bluetooth Ubiquity**: Bluetooth should be a ubiquitous technology on most phones and PCs. Most new devices ship with Bluetooth, and major manufacturers like Apple, HP, and Dell include it in their products.

### Alternative Methods for Testing Proximity
Instead of using a wireless channel, alternative methods for testing proximity between the phone and PC include:
- **Location-Based Approach**: Querying both the phone and PC for their location coordinates. However, this approach is impractical due to issues with GPS fix and geolocation API limitations.
- **NFC or QR Codes**: Transferring identity assertions via NFC or QR codes. These methods have a significant user experience impact and are not considered feasible.
- **Cellular Network**: Leveraging the cellular network, but this is not preferred due to occasional lack of coverage and high latency.

### Avoiding a Bluetooth Address Oracle
We considered a design where users could type their username into the login page, and an identity assertion would be fetched from their phone without requiring a password. However, this would require web sites to expose an API that returns a Bluetooth address based on the username, creating a privacy risk. Therefore, we discarded this approach.

## Conclusion

In this paper, we introduced PhoneAuth, a new method for user authentication on the web. PhoneAuth combines the usability benefits of conventional passwords with the security benefits of second-factor authentication. By storing cryptographic credentials on the user’s phone, PhoneAuth attests to the user’s identity via Bluetooth communications with the computer’s browser. We also introduced the concept of "opportunistic identity assertions," allowing servers to treat logins differently based on the user's authentication method.

We implemented and evaluated PhoneAuth, concluding that it is a viable solution for improving the security of web authentication today.

## Acknowledgements
We thank the team at Google, including Mayank Upadhyay, Diana Smetters, and Alex Klyubin, for their contributions to the development and implementation of PhoneAuth. We also thank the anonymous reviewers for their valuable feedback.

## References
[1] Android Cloud to Device Messaging Framework, 2012. https://developers.google.com/android/c2dm/.
[2] BrowserID - Quick Setup, 2012. https://developer.mozilla.org/en/BrowserID/Quick_Setup.
...
[28] R. Vogelei. Bluetooth-Enabled Device Shipments Expected to Exceed 2 Billion in 2013, 2011. http://www.instat.com/press.asp?ID=3238&sku=IN1104968MI.
[29] K.-P. Yee and K. Sitaker. Passpet: convenient password management and phishing protection. In Proceedings of the second symposium on Usable privacy and security, SOUPS ’06, pages 32–43, New York, NY, USA, 2006. ACM.
[30] K. Zetter. Security cavities ail bluetooth, 2004. http://www.wired.com/politics/security/news/2004/08/64463.