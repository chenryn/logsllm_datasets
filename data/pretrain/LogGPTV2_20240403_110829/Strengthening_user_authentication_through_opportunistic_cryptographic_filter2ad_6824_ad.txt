r
e
s
U
-
r
e
P
-
t
s
o
C
-
e
l
b
i
g
i
l
g
e
N
e
l
b
i
t
a
p
m
o
C
e
l
b
i
t
a
p
m
o
C
-
r
e
v
r
e
S
e
l
b
i
s
s
e
c
c
A
e
s
U
-
o
t
-
y
s
a
E
s
r
o
r
r
E
-
t
n
e
u
q
e
r
f
n
I
y
r
a
n
t
r
e
a
i
e
r
L
p
o
-
o
r
P
t
-
-
y
n
s
o
a
N
E
y y s y y y y y y y
y s
y y s y y s
y y s y y y s y y y
t
f
e
h
T
-
o
e
t
l
-
b
t
n
a
e
k
i
n
l
i
i
l
s
n
e
U
R
y y y y
y y y y y y
s y y y y y s y y y y y s
s y y y s
-
r
e
s
w
o
r
B
y y
s
e
r
u
t
a
M
s
s
s
s
s
s
s
s
s
s
Table 1: Comparison of PhoneAuth against passwords and Google 2-Step Veriﬁcation using Bonneau et al.’s evaluation framework.
‘y’ means the beneﬁt is provided, while ‘s’ means the beneﬁt is somewhat provided. For some scores, we disagree with the Bonneau
scoring.
have no end-user-impact (which is dominated by other latency; see
below).
OVERHEAD OF ADDITIONAL ROUND TRIPS. During login, the
browser makes an additional request to the server – to obtain the
login ticket from the login service. The latency introduced by such
a request is highly variable – from a few milliseconds for clients on
a good network connection close to a datacenter where the login
service is running, to a few seconds for mobile clients in rural
areas far away from any datacenter. The relative overhead of a
single additional round trip, however, is relatively low. Bringing up
the login pages for Gmail, Facebook, and Hotmail, for example,
involves 14, 11, and 14 HTTP requests as of the time of this
writing (and this does not include submitting the password, getting
redirected to the logged-in state, and so on – simply loading and
displaying the login page).
OVERHEAD OF INVOLVING THE PHONE DURING LOGIN. This
is perhaps the most interesting type of overhead incurred: The
browser has to establish a Bluetooth connection to the phone
and obtain an identity assertion. As a baseline comparison, we
measured how long it took a member of our team to log into a
simple password-based login service (type username, password,
and submit) – an average of 8.8 seconds. Repeating the same login
while also obtaining an identity assertion increased the average
time to 10.3 seconds. The additional 1.5 seconds are mostly spent
establishing the Bluetooth connection, with processing time on the
phone and penalty for the additional round trip being much less of
an issue in comparison.
We noticed that the “long tail” of Bluetooth connection setup
time, however, was considerably slower – sometimes taking up to
7 seconds. As a result, our test login service tries for as long as 7
seconds to connect to the phone before giving up and proceeding
with a password-only “unprotected” login. Not surprisingly, when
we tested login with the phone turned off (simulating a situation in
which the phone wasn’t available to protect the login), the average
login time increased to 16.7 seconds – almost all of the additional
time was spent waiting (in vain) for the Bluetooth connection to the
phone to be established.
We envision techniques that may shorten the login time even
more.
For example, “lazy veriﬁcation” of the second factor
credentials (for opportunistic rather than strict logins) may work
as follows. The user is allowed to login like normal if a second
factor device is not found within 1 second, but behind the scenes the
server continues to search for the second factor device for another
20 seconds. If the second factor device is found, the user session is
upgraded and no notiﬁcations will be sent out.
This is still faster than a typical two-factor login, however. We
measured an average login time of 24.5 seconds for a 2-factor login
service that included typing a username and password, and copying
a one-time code from a smart phone app to the login page.
Note that for a user that uses 2-factor authentication, and
whose login service may perhaps accept both traditional one-time
codes and the (considerably more secure) cryptographic assertions
login actually speeds up
from the phone as a second factor,
dramatically with our system (from 24.5 seconds to 10.3 seconds),
while at the same time reverting the login experience to a simple
“username+password” form submission and improving security.
7. DISCUSSION
OPERATIONAL REQUIREMENTS AND DEPLOYABILITY. As the
careful reader has noticed, PhoneAuth has several operational
requirements which must be met in order for the system to be
deployed. First, our browser extension’s functionality should be
ported to be part of the actual browser. We have approached
the Chromium browser team and have interacted with the Fire-
fox team to make that happen. Second, it must be simple for
developers to deploy this authentication scheme to their websites.
Our service-oriented implementation of the server-side PhoneAuth
functionality makes this easy, but a roll out of PhoneAuth to a
non-trivial deployment is still in its planning phase. Third, the
system must be tested and approved by users. We believe the
main reason similar systems have failed is that none have been
able to support opportunistic strong user authentication without
modiﬁcations to the user experience – a feature which our system
provides. We are planning on running ﬁeld tests of the system in the
412near future. Finally, Bluetooth should be a ubiquitous technology
on most phones and PCs. We found that the majority of new
devices do indeed ship with Bluetooth [28]. Examining several
major device manufacturers, we found that all Apple computers,
almost all laptops (HP and Dell), and about half of Desktop PCs
(HP and Dell) have integrated Bluetooth. Given these statistics, we
believe the ubiquity of Bluetooth goal to be realistic.
OTHER METHODS FOR TESTING PHONE/PC COLOCATION.
Instead of relying on a wireless channel between the phone and PC,
an alternative approach for testing for proximity between phone
and PC may be to query both for their location. Most phones
can provide their location coordinates (for example through GPS
or cell triangulation). Recently, browsers have begun to expose
geolocation APIs as well [18]. However, without a GPS ﬁx, phones
may provide location data with too coarse of a granularity. More
troublesome, however, is that the browser geolocation API (which
is based on IP addresses) does not work from behind a VPN or on
large managed networks (such as our university). These two issues
make the location based approach impractical.
As yet another approach, it may be feasible to transfer identity
assertions via NFC (by having users tap their phones on NFC
readers) or by having users scan QR codes. Both of these
approaches carry a non-negligible user experience impact. Users
must take their phone out of their pocket, purse, or backpack,
potentially unlock the screen, and potentially launch an app. We
believe this usability impact is too severe and therefore do not
consider these modes of operations.
Finally, some designs may be possible that leverage the cellular
network. We have chosen not to use them because of occasional
lack of cellular coverage and potentially high latency.
AVOIDING A BLUETOOTH ADDRESS ORACLE. We brieﬂy con-
sidered a very attractive design, but discarded it for privacy rea-
sons because it inadvertently created a Bluetooth address oracle.
Speciﬁcally, in the design, users could just type their username into
the webpage login page and an identity assertion would be fetched
from their phone without requiring users to enter a password. This,
however, required that web sites expose an API that would return
a Bluetooth address based on username. Even though this design
presented nice usability beneﬁts, we stayed clear of this approach.
8. CONCLUSION
In this paper we introduced PhoneAuth, a new method for user
authentication on the web. PhoneAuth enjoys the usability beneﬁts
of conventional passwords – users can, for example, approach an
Internet kiosk, navigate to a web page of interest, and simply
type their user name and password to log in. At the same time,
PhoneAuth receives the beneﬁts of conventional second-factor
authentication systems and more. Speciﬁcally, PhoneAuth stores
cryptographic credentials on the user’s phone. If present when the
user logs into a site, then the phone will attest to the user’s identity
via Bluetooth communications with the computer’s browser; this
happens even if the user has never interacted with that particular
computer before. Since users may occasionally forget their phones,
we further considered a layered approach to security whereby a
web server can enact different policies depending on whether or
not the user’s phone is actually present.
We called this concept "opportunistic identity assertions". Op-
portunistic identity assertions allow the server to treat
logins
differently based on how the user was authenticated – allowing the
server to provide tiered access or restrict dangerous functionality
(e.g., mass e-mail deletion). Thus, while opportunistic identity
assertions may not always be available to all users (e.g., lack of
Bluetooth support), there are still advantages in providing them.
Similarly, an adversary who is able to make it appear that Alice’s
phone is "not there" simply degrades Alice’s login and prevents
access to dangerous functionality.
We implemented and evaluated PhoneAuth, and our assessment
is that PhoneAuth is a viable solution for improving the security of
authentication on the web today.
9. ACKNOWLEDGEMENTS
We would like to thank the team at Google, including Mayank
Upadhyay, Diana Smetters, and Alex Klyubin for helping us
develop the ideas presented in this paper, and for helping with
the implementation. We would also like to thank the anonymous
reviewers of our manuscript for helping us make this a better paper.
References
[1] Android Cloud to Device Messaging Framework, 2012.
https://developers.google.com/android/c2dm/.
[2] BrowserID - Quick Setup, 2012. https://developer.
mozilla.org/en/BrowserID/Quick_Setup.
[3] Core Concepts - Authentication, 2012. https:
//developers.facebook.com/docs/authentication/.
[4] J. Bonneau. Measuring password re-use empirically, 2011.
http://www.lightbluetouchpaper.org/2011/02/09/
measuring-password-re-use-empirically/.
[5] J. Bonneau, C. Herley, P. C. van Oorschot, and F. Stajano.
The Quest to Replace Passwords: A Framework for
Comparative Evaluation of Web Authentication Schemes. In
Proceedings of the 2012 IEEE Symposium on Security and
Privacy, pages 553–567, May 2012.
[6] M. Brian. Gawker media is compromised. the responsible
parties reach out to tnw [updated], 2010.
http://goo.gl/0SvCj.
[7] D. Chappell. Introducing windows cardspace.
http://msdn.microsoft.com/en-us/library/aa480189.aspx,
April 2006.
[8] S. Chiasson, P. C. van Oorschot, and R. Biddle. A usability
study and critique of two password managers. In
Proceedings of the 15th conference on USENIX Security
Symposium - Volume 15, USENIX-SS’06, Berkeley, CA,
USA, 2006. USENIX Association.
[9] G. Cluley. 600,000+ compromised account logins every day
on Facebook, ofﬁcial ﬁgures reveal, 2011.
http://nakedsecurity.sophos.com/2011/10/28/
compromised-facebook-account-logins/.
[10] A. Czeskis and D. Balfanz. Protected Login. In Proceedings
of the Workshop on Usable Security (at the Financial
Cryptography and Data Security Conference), March 2012.
[11] T. Dierks and C. Allen. The TLS protocol, version 1.0.
http://tools.ietf.org/html/rfc2246, Jan 1999.
[12] T. Dierks and E. Rescorla. The transport layer security (TLS)
protocol, version 1.2. http://tools.ietf.org/html/rfc5246, Aug
2008.
413[13] M. Dietz, A. Czeskis, D. Wallach, and D. Balfanz.
Origin-bound certiﬁcates: A fresh approach to strong client
authentication for the web. In Proc. 21st USENIX Security
Symposium, 2012. Preprint obtained from authors.
[14] S. Gaw and E. W. Felten. Password management strategies
for online accounts. In Proc. SOUPS 2006, ACM Press,
pages 44–55. ACM Press, 2006.
[15] E. Grosse. Gmail account security in Iran, 2011.
http://googleonlinesecurity.blogspot.com/2011/
09/gmail-account-security-in-iran.html.
[16] J. A. Halderman, B. Waters, and E. W. Felten. A convenient
method for securely managing passwords. In Proceedings of
the 14th international conference on World Wide Web,
WWW ’05, pages 471–479, New York, NY, USA, 2005.
ACM.
[17] A. Langley. Protecting data for the long term with forward
secrecy, 2011. http://goo.gl/YMpXy.
[18] Mozilla. Location-aware browsing, 2012. http:
//www.mozilla.org/en-US/firefox/geolocation/.
[19] R. Oppliger, R. Hauser, and D. Basin. SSL/TLS
session-aware user authentication–or how to effectively
thwart the man-in-the-middle. Computer Communications,
29(12):2338–2246, 2006.
[20] C. Palmer and C. Evans. Certiﬁcate Pinning via HSTS, 2011.
http://www.ietf.org/mail-archive/web/websec/
current/msg00505.html.
[21] J. Prins. Interim report diginotar certiﬁcate authority breach
“operation black tulip”. Technical report, 2011.
http://www.rijksoverheid.nl/bestanden/
documenten-en-publicaties/rapporten/2011/09/05/
diginotar-public-report-version-1/
rapport-fox-it-operation-black-tulip-v1-0.pdf.
[22] D. Recordon and B. Fitzpatrick. OpenID authentication 1.1.
http://openid.net/specs/openid-authentication-1_1.html, May
2008.
[23] B. Ross, C. Jackson, N. Miyake, D. Boneh, and J. Mitchell.
Stronger password authentication using browser extensions.
In Proceedings of the 14th Usenix Security Symposium,
2005.
[24] N. Sakimura, D. Bradley, B. de Mederiso, M. Jones, and
E. Jay. OpenID connect standard 1.0 - draft 07.
http://openid.net/specs/openid-connect-standard-1
[25] F. Security. National Cybersecurity Awareness Month
Updates, 2011. https:
//www.facebook.com/notes/facebook-security/
national-cybersecurity-awareness-month-updates/
10150335022240766.
[26] P. Seybold. Sony’s response to the u.s. house of
representatives, 2011. http://goo.gl/YkXSv.
[27] O. Source. Google Authenticator, 2012.
https://code.google.com/p/google-authenticator/.
[28] R. Vogelei. Bluetooth-Enabled Device Shipments Expected
to Exceed 2 Billion in 2013, 2011. http://www.instat.
com/press.asp?ID=3238&sku=IN1104968MI.
[29] K.-P. Yee and K. Sitaker. Passpet: convenient password
management and phishing protection. In Proceedings of the
second symposium on Usable privacy and security, SOUPS
’06, pages 32–43, New York, NY, USA, 2006. ACM.
[30] K. Zetter. Security cavities ail bluetooth, 2004.
http://www.wired.com/politics/security/news/
2004/08/64463.
414