Applications often make use of temporary files to store data that is in some 
intermediate format, or to channel data between related processes. This practice has 
proved dangerous, however; innumerable local UNIX security vulnerabilities are 
related to temporary file use. Public temporary directories can be an extremely hostile 
environment for programs attempting to make use of them. 
On most UNIX systems, there's a public temporary directory in /tmp and one in 
/var/tmp. Programs are free to create files in those directories for the purpose of 
temporary storage. The temporary directories are marked as sticky directories, which 
means only the file owner can delete or rename that file. These directories are usually 
mode octal 1777, granting everyone full read, write, and search permissions. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
558 
Programs typically use temporary directories in two ways. Most programs want to 
create a new, unique temporary file they can use once and then discard. Some 
programs, however, want to open an existing temporary file, which they expect to 
have been created by a related program in the past. The following sections describe 
issues in both uses of temporary directories. 
Unique File Creation 
Many applications want to create a unique temporary file, use it, and then delete it or 
hand it off to another program. In general, you should check for all the file creation 
issues outlined earlier and the creation-related issues with symbolic links and race 
conditions. Several library calls, described in the following sections, are designed to 
assist in obtaining these unique temporary files. Unfortunately, the majority of them 
are fairly broken, as you will see. 
The mktemp() Function 
The mktemp() function takes a template for a filename and fills it out so that it 
represents a unique, unused filename. The template the user provides has XXX 
characters as placeholders for random data. However, that data is fairly easy to 
predict because it's based on the process ID of the program that calls mktemp() plus a 
simple static pattern. Here's some code that uses mktemp(): 
char temp[1024]; 
int fd; 
strcpy(temp, "/tmp/tmpXXXX"); 
if (!mktemp(temp)) 
    die("mktemp"); 
fd=open(temp, O_CREAT | O_RDWR, 0700); 
if (fd= 0) 
    { 
        if (!S_ISREG(stb1.st_mode) || 
            (stb1.st_nlink>1)) 
            raise_big_stink(); 
        fd = open(fname, O_RDWR); 
        if (fd 1) 
            raise_big_stink(); 
    } 
    else 
    { 
        fd = open(fname, O_RDWR | O_CREAT | O_EXCL, FMODE); 
        if (fd < 0) 
            raise_big_stink(); 
    } 
This code represents a reasonably safe idiom for opening a potentially existing file in 
a public directory. The code first checks the file with lstat() and stores the results in 
the stat buffer structure stb1. If the lstat() fails, indicating that the file doesn't exist, 
the code attempts to create the file by using open() with the O_CREAT | O_EXCL flags. 
This open() doesn't follow symbolic links in the last path component, and it succeeds 
only if it's successful in creating the file. 
So if the file doesn't exist, the open() call attempts to create it in a safe fashion. If the 
file does exist, it's first analyzed with lstat() to make sure it's not a symbolic link or 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
565 
hard link. Naturally, attackers could delete or rename the file and replace it with 
another file, device file, hard link, or symbolic link immediately after the lstat() 
security check. So the program opens the file and uses fstat(), and then uses the 
inode and device numbers from the fstat() and lstat() calls to check that the 
pathname hasn't been manipulated in the time that has elapsed since the program 
first called lstat(). If the pathname hasn't been tampered with, lstat() and fstat() 
should both indicate that the file has the same device and inode numbers. Note that 
the call to open() in the first block uses the O_RDWR flag, but not O_CREAT, ensuring that 
it doesn't create a file accidentally. 
This solution seems fairly robust, assuming the application can deal with the file open 
failing if tampering is detected. Kirch observed that in some situations, the inode and 
device check might be circumvented. Say that attackers create a regular file in the 
temporary directory with the filename the program is expecting. This program would 
call lstat() on the regular file and learn that it existed and wasn't a symbolic link. Say 
attackers then manage to send a job control signal, such as a SIGSTOP, to the 
application immediately after the lstat() but before the call to open(). This would be 
possible if the program is a setuid root program users had started in their terminal 
session. 
At this point, attackers would make note of the inode and device of the temporary file 
they created. They would then delete that file and wait for a sensitive file to be 
created with the same inode and device number. They could simply wait for 
something to happen, or they could call other privileged programs in ways designed 
to get them to create sensitive files. 
As soon as a sensitive file is created with an inode and device number equal to that of 
the original file, attackers would create a symbolic link to that file and resume the 
program. The program would perform the open() call, which would follow the 
symbolic link and open the sensitive file. However, when it analyzes the file, it would 
find that the inode and device numbers hadn't changed, so it wouldn't suspect 
anything odd was afoot. 
Temporary Directory Cleaners 
Michael Zalewski described an interesting class of attacks that can undermine the 
security of mkstemp() in certain environments (available at 
www.bindview.com/Services/Razor/Papers/2002/mkstemp.cfm). Many UNIX 
systems have a daemon that runs periodically to clean out public temporary 
directories, such as /tmp and /var/tmp. The program Zalewski analyzed, tmpwatch, is 
a popular program that performs this task. It goes through each file in the temporary 
directory and uses lstat() to determine the age of the file. If the file is old enough, 
the cleaning daemon uses unlink() on the file to delete it. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
566 
Say you have a program that creates a temporary file securely by using mkstemp(), 
but later it uses the file in a potentially unsafe fashion by reopening the file or 
performing operations such as chmod() and chown() that work with filenames rather 
than file descriptors. If the temporary file is created properly, with the correct umask, 
ownership, and permissions, usually this isn't a problem in a sticky directory, as only 
the file's owner is able to rename or unlink the file. You've already looked at a code 
snippet with these characteristics in Listing 9-6. 
If you could get a temporary file to be unlinked after it was created but before an 
application used it again, you could potentially create an exploitable condition. 
Zalewski outlined two attacks that could do just this. The simplest attack is to start a 
privileged setuid program, let it create its temporary file, and then suspend the 
program with a SIGSTOP signal. Then simply wait the requisite number of days for the 
cleaning daemon to decide that the temporary file is old enough to be purged. After 
the daemon purges the file, create a symbolic link in its place and resume the 
privileged program. 