## Page 391
368
第11章运行库
11.5fread实现
我们知道C语言的运行库十分大，前面介绍的启动部分、多线程、全局构造和析构
这些内容其实都不是占CRT篇幅最大的部分。与任何系统级别的软件一样，真正复杂的并
且有挑战性的往往是软件与外部通信的部分，即10部分。
前面的章节中对运行库的分析都是比较粗略的，虽然涉及运行库的各个方面，但是在运
行库实现的深度上挖掘得不够，我们知道，1O部分实际上是运行库中最为重要也最为复杂
的部分之一，在结束本章之前，最后来仔细了解C语言标准库中一个非常重要的IO函数fread
的具体实现，我们知道fread最终是通过 Windows 的系统APl：ReadFile(）来实现对文件的
读取的，但是从fread到ReadFile 之间究竞发生了什么却是一个未知的迷。我们希塑通过对
fread(的挖掘，能够打通从运行库函数fread到Windows 系统API的 ReadFileO函数之间的
这条通路，这有助于对运行库和IO的进一步了解。
首先我们来看fread的函数声明：
size_t fread(
void *buffer,
size_t elementSize,
FILE *strean
size_t count
在这里，size_t是表示数据大小的类型，定义为unsigned int.fread有4个参数，其功能
是尝试从文件流 stream里读取count 个大小为 elementSize 个字节的数据，存储在buffer里，
返回实际读取的字节数。
ReadFile的函数声明为：
BOOL ReadFile (
HANDLE hFi1e,
LPVOID 1pBuffer,
DWORD nNumberOfBytesToRead,
LPOVERLAPPED 1pOverlapped
LPDwORD 1pNumberOfBytesRead,
1 1
了句柄的概念及讨论了为什么要使用句柄的原因，与它对应的应该是fread里面的 stream 参
数：第二个参数IpBuffer是读取文件内容的缓冲区，相对应的fread参数为buffer：第三个
参数nNumberOfBytesToRead为要读取多少字节，fread与它相对应的应该是两个参数的乘
积，即elementSize*count：第四个参数IpNumberOfBytesRead为一个指向DWORD类型的
指针，它用于返回读取了多少个字节：最后一个参数是没用的，可以忽略它。
在了解了fread 函数和 ReadFile 函数之后，可以发现它们在功能上看似完全相同，而且
程序员的自我修养——键接、装载与库
---
## Page 392
11.5fread实现
369
在参数上儿乎一一对应，所以如果我们要实现一个最简单的fread，就是直接调用ReadFile
而不做任何处理：
size_t fread (
void *buffer,
size_t elementSize,
PILE *stream
size_t count.
DWORD bytesRead = 0:
BOOL ret = ReadFile(
stream->_file// FILE结构的文件句柄
 elementSize * count
,buffer
,&bytesRead
NULL
 (
if (ret)
else
return bytesRead;
return -1;
可能很多人会觉得很奇怪，既然fread可以这么简单地实现，为什么CRT还要做得这么
复杂呢？先别着急，我们接下来就慢慢来看CRT是怎么实现fread的，为什么它要这么做。
11.5.1缓冲
对于glibc，fread的实现过于复杂，因此我们这里选择MSVC的fread实现，但在阅读
fread的代码之前，首先要介绍一下缓冲（Buffer）的概念。
缓冲最为常见于IO系统中，设想一下，当希望向屏幕输出数据的时候，由于程序逻辑
的关系，可能要多次调用printf函数，并且每次写入的数据只有儿个字符，如果每次写数据
都要进行一次系统调用，让内核向屏幕写数据，就明显过于低效了，因为系统调用的开销是
很大的，它要进行上下文切换、内核参数检查、复制等，如果频繁进行系统调用，将会严重
影响程序和系统的性能。
一个显而易见的可行方案是将对控制台连续的多次写入放在一个数组里，等到数组被填
满之后再一次性完成系统调用写入，实际上这就是缓冲最基本的想法。当读文件的时候，缓
冲同样存在。我们可以在CRT中为文件建立一个缓冲，当要读取数据的时候，首先看看这个
文件的缓冲里有没有数据，如果有数据就直接从缓冲中取。如果缓冲是空的，那么CRT就通
过操作系统一次性读取文件一块较大的内容填充缓冲。这样，如果每次读取文件都是一些尺
寸很小的数据，那么这些读取操作大多都直接从缓冲中获得，可以避免大量的实际文件访问。
除了读文件有缓冲以外，写文件也存在着同样的情况，而且写文件比读文件要更加复杂，
程序员的自我修养一链接、装载与库
---
## Page 393
370
第11章运行库
因为当我们通过fwrite向文件写入-段数据时，此时这些数据不一定被真正地写入到文件
中，面是有可能还存在于文件的写缓冲里面，那么此时如果系统前读或进程意外退出时，有
可能导致数据丢失，于是CRT还提供了一系列与缓冲相关的操作用于弥补缓冲所带来的问
题。C语言标准库提供与缓冲相关的几个基本函数，如表11-4所示。
表11-4
gsn 
FILE *stream)
flush 指定文件的缓冲，若参数为NULL，则flush所有文件的缓冲
设置指定文件的缓冲，缓冲类型（mode参数）有3种：
int setvbuf(
缓冲模式
常量（mode）
备注
FILE *stream,
无缓冲模式
IONBF
该文件不使用任何缓冲
char *buf,
行缓冲模式
JOLBF
仅对文本模式打开的文件有效，所谓行。
int mode,
即是指每收到一个换行特(n或vrn），就
size_t size )
将缓冲flush掉
全缓冲模式
_IOFBF
仅当缓冲满时才进行flush
void setbuf(
FlLE *stream,
设置文件的缓冲，等价于
char *buf)
(void) setvbuf(stream, buf, _IOFBF, BUFSIZ).
所谓fush一个缓冲，是指对写缓冲而言，将缓冲内的数据全部写入实际的文件，并将
缓冲清空，这样可以保证文件处于最新的状态。之所以需要flush，是因为写缓冲使得文件
处于一种不同步的状态，逻辑上一些数据已经写入了文件，但实际上这些数据仍然在缓冲中，
如果此时程序意外地退出（发生异常或断电等），那么缓冲里的数据将没有机会写入文件。
fush可以在一定程度上避免这样的情况发生。
在这个表中我们还能看到C语言支持两种缓冲，即行缓冲（LineBuffer）和全缓冲（Full
Buffer）。全缓冲是经典的缓冲形式，除了用户手动调用fflush外，仅当缓冲满的时候，缓冲
才会被自动flush掉。而行缓冲则比较特殊，这种缓冲仅用于文本文件，在输入输出遇到一
个换行符时，缓冲就会被自动flush，因此叫行缓冲。
11.5.2 fread_s
在了解了缓冲的大致内容之后，让我们回到fread的代码分析。MSVC的fread的定义
在cr/fread.e里，实际内容只有一行：
void *buffer,
size_t elementSize,
size_t count,
FILE *stream
程序员的自我修养一链接、装载与库
---
## Page 394
11.5fread实现
371
return fread_s(buffer, SIzE_MAx, elementSize
, count, stream) ;
}
可见fread 将所有的工作都转交给了_fread_s.fread_s定义如下：
fread -> fread_s:
size_t bufferSize,
void *buffer,
size_t elementSize,
size_t count,
PILE *stream
7
_lock_str (stream) ;
retval = _fread_nolock_s(
buffer
, bufferSize
elenentSize
, stream) :
count
_unlock_str (stream) :
return retval:
fread_s的参数比fread多一个bufferSize，这个参数用于指定参数buffer的大小。在fread
中，这个参数直接被定义为SIZE_MAX，即size_的最大值，表明fread不关心这个参数。而
用户在使用fread_s时就可以指定这个参数，以达到防止越界的目的（fread_s的s是safe的意
思）。fread_s首先对各个参数检查，然后使用_lock_str对文件进行加锁，以防止多个线程同时
读取文件面导致缓冲区不一致。我们可以看到fread_s其实又把工作交给了_fread_nolock_s。
11.5.3 fread_nolock_s
fread_nolock_s是进行实际工作的函数，为了便于理解，下面会分段列出fread_nolock_s
的实现，并且将省去所有的参数检查和错误检查。同样，还将省去64位部分的代码。
fread -> fread_s -> _fread_nolock_s:
size_t __cdec1 _fread_nolock_s(
size_t buffersize,
void *buffer,
size_t elenentSize,
size_t nun,
FILE *stream
1
程序员的自我修养一链接、装载与库
---
## Page 395
372
第11章运行库
size_t dataSize;
char *data;
size_t
size_t count:
total;
unsigned streambufsize;
unsigned nbytes:
unsigned nread:
Int c:
dataSize - butferSize:
data = buffer;
count = total = elementSize * num;
这一段是 fread_nolock_s 的初始化部分。在它的局部变量中，data 将始终指向 buffer 中
尚未被写入的起始部分。在最开始的时候，data 指向 buffer 的开头，dataSize 记录了 buffer
中还可以写入的字节数，理论上。data +dataSize = buffer +bufferSize。如图11-12所示。
bufferSize
dataSize
buffer
data
图 11-12 data、buffer、bulferSize 和 dataSize
total变量记录了总共须要读取的字节数，count则记录在读取过程中尚未读的字节数。
streambufsize记录了文件缓冲的大小。剩下的3个局部变量在代码的分析过程中会一一提到。
在这里需要特别提一下缓冲在FILE结构中的具体实现。
在对缓冲的概念有了一定了解之后，可分析一下文件类型FILE结构的定文了。FILE的
定义位于 stdio.h 里：
struct _iobuf {
char *_ptr;
char *_base;
int
_cnt }
int
_f1ag:
int
init
_file}
int
_bufoiz1
_charbuf :
char *_tnpfname;
typedef struct _iobuf FILE;
在这里，_base字段指向一个字符数组，即这个文件的缓冲，而_bufsiz记录着这个缓冲
的大小。_ptr 和 fread_nolock_s的局部变量 data一样，指向 buffer 中第一个未读的字节，而
程序员的自我修养一链接、装载与库
---
## Page 396
11.5 fread实现
373
_cnt记录剩余未读字节的个数，_fag记录了FILE结构所代表的打开文件的一些属性，目前
我们感兴趣的是3个标志：
#define _IOYOURBUP0x0100
#define _IONYBUF
8000x0
#define _IONBF
0x0004
在这里，_IOYOURBUF代表这个文件使用用户通过setbuf提供的buffer，_IOMYBUF
代表这个文件使用内部的缓冲，而_IONBF代表这个文件使用一个单字节的缓冲，即缓冲大
小仅为1个字节。这个缓冲就是_charbuf变量。此时，_base变量的值是无效的。接下来继
续看 fread_nolock_s的代码：
((ueaxs)nqAue) 11
streambufsize = stream->_bufsiz;
else
streambufsi2e = _INTSRNAL_BUFSIZ;
anybuf 函数的定义位于 file2.h：
#define anybuf (s)\