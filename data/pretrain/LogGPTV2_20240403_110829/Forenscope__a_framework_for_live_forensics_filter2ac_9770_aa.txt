title:Forenscope: a framework for live forensics
author:Ellick Chan and
Shivaram Venkataraman and
Francis M. David and
Amey Chaugule and
Roy H. Campbell
Forenscope: A Framework for Live Forensics
Ellick Chan†
PI:EMAIL
Shivaram Venkataraman†
PI:EMAIL
Francis David∗
PI:EMAIL
Amey Chaugule†
PI:EMAIL
Roy Campbell†
PI:EMAIL
ABSTRACT
Current post-mortem cyber-forensic techniques may cause
signiﬁcant disruption to the evidence gathering process by
breaking active network connections and unmounting en-
crypted disks. Although newer live forensic analysis tools
can preserve active state, they may taint evidence by leav-
ing footprints in memory. To help address these concerns we
present Forenscope, a framework that allows an investigator
to examine the state of an active system without the eﬀects
of taint or forensic blurriness caused by analyzing a run-
ning system. We show how Forenscope can ﬁt into accepted
workﬂows to improve the evidence gathering process.
Forenscope preserves the state of the running system and
allows running processes, open ﬁles, encrypted ﬁlesystems
and open network sockets to persist during the analysis pro-
cess. Forenscope has been tested on live systems to show
that it does not operationally disrupt critical processes and
that it can perform an analysis in less than 15 seconds while
using only 125 KB of memory. We show that Forenscope
can detect stealth rootkits, neutralize threats and expedite
the investigation process by ﬁnding evidence in memory.
Keywords: forensics, introspection, memory remanence
1.
INTRODUCTION
Current forensic tools are limited by their inability to pre-
serve the hardware and software state of a system during in-
vestigation. Post-mortem analysis tools require the investi-
gator to shut down the machine to inspect the contents of the
disk and identify artifacts of interest. This process breaks
network connections and unmounts encrypted disks causing
signiﬁcant loss of potential evidence and possible disruption
of critical systems. In contrast, live forensic tools can allow
an investigator to inspect the state of a running machine
without disruption. However existing tools can overwrite
evidence present in memory or alter the contents of the disk
causing forensic taint which lowers the integrity of the evi-
dence. Furthermore, taking a snapshot of the system can re-
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ACSAC ’10 Dec. 6-10, 2010, Austin, Texas USA
Copyright 2010 ACM 978-1-4503-0133-6/10/12 ...$10.00.
sult in a phenomena known as forensic blurriness [26] where
an inconsistent snapshot is captured because the system is
running while it is being observed. Forensic blurriness af-
fects the ﬁdelity and quantity of evidence acquired and can
cast doubt on the validity of the analysis, making the courts
more reluctant to accept such evidence [4].
Experts at the SANS institute and DOJ are starting to
recognize the importance of volatile memory as a source of
evidence to help combat cybercrime [1, 3]. In response, the
SANS institute recently published a report on volatile mem-
ory analysis [7]. To help address the limitations of exist-
ing volatile memory analysis tools we present Forenscope, a
framework for live forensics, that can capture, analyze and
explore the state of a computer without disrupting the sys-
tem or tainting important evidence. Section 2 shows how
Forenscope can ﬁt into accepted workﬂows to enhance the
evidence gathering process.
Forenscope leverages DRAM memory remanence to pre-
serve the running operating system across a ”state-preserving
reboot”(Section 3) which recovers the existing OS without
having to go through the full boot-up process. This pro-
cess enables Forenscope to gain complete control over the
system and perform taint-free forensic analysis using well
grounded introspection techniques [22]. Finally, Forenscope
resumes the existing OS, preserving active network connec-
tions and disk encryption sessions causing minimal service
interruption in the process. Forenscope captures the con-
tents of system memory to a removable USB device and
activates a software write blocker to inhibit modiﬁcations
to the disk. To maintain ﬁdelity, it operates exclusively in
125 KB of unused legacy conventional memory and does not
taint the contents of extended memory. Since Forenscope
preserves the state of a running machine, it is suitable for
use in production and critical infrastructure environments.
We have thoroughly tested and evaluated Forenscope on an
SEL-1102, a power substation industrial computer, and an
IBM desktop workstation. The machines were able to per-
form their duties under a variety of test conditions with
minimal interruption and running Forenscope did not cause
any network applications to time out or fail. Our current im-
plementation is based on Linux 2.6, although the technique
is also applicable to other major operating systems.
We have implemented several modules that can check for
the presence of malware, detect open network sockets and
locate evidence in memory such as rootkit modiﬁcations to
help the investigator identify suspicious activity.
†University of Illinois, ∗Microsoft
307The contributions of this work include:
1. An extensible software framework for high-ﬁdelity live
forensics conforming to the best practices of a legal frame-
work of evidence.
2. Eﬃcient techniques to gather, snapshot and explore a sys-
tem without bringing it down.
3. Implementation and evaluation on several machines in-
cluding a standard industrial machine and against several
anti forensics rootkits.
This paper is organized as follows: Section 2 introduces
cyber-forensics followed by Section 3 which describes the de-
sign of Forenscope. We evaluate the eﬀectiveness of Foren-
scope in Section 4. Section 5 discusses forensics issues, Sec-
tion 6 surveys related work and Section 7 concludes.
2. BACKGROUND
To provide an overview of the accepted legal framework
of evidence collection currently in place, we summarize the
workﬂow from the CERT guide on FBI investigation [10]:
1. Preserve the state of the computer by creating a backup
copy of logs and ﬁles left by the intruder.
2. If the incident is in progress, log activity.
3. Document the losses suﬀered by your organization.
4. Contact law enforcement.
While the steps executed are similar for various cases, there
are special requirements for each case. For instance,
in
criminal investigation, integrity and ﬁdelity of the data is
paramount. As evidence presented in court must be as ac-
curate as possible, special steps must be taken to ensure ﬁ-
delity. For incident response, the goal is to detect and react
to security breaches while minimizing the intrusiveness of
the process. In some critical systems it is impractical to in-
terrupt the system to perform forensic analysis of a potential
breach and service level agreements (SLAs) may impose ﬁ-
nancial penalties for downtime. The cases chosen above are
example of evidentiary requirements but a more thorough
analysis is beyond the scope of this paper. To preserve the ﬁ-
delity of the original evidence, many forensic workﬂows cap-
ture a pristine image of the evidence and draw conclusions
based on analysis of the copy. Conventional post-mortem
forensic workﬂows perform this task by physically shutting
down a computer and copying the contents of the hard drive
for subsequent analysis. On the other hand, live forensics
are often desired for step 2 because they provide access to
networked resources such as active SSH and VPN sessions,
remote desktop connections, IM clients and ﬁle transfers.
However even state-of-the-art solutions often cannot image
a system with high ﬁdelity and frequently introduce taint in
the process. In summary, existing tools require the investi-
gator to make a tradeoﬀ between increased ﬁdelity through
post mortem analysis or the potential to collect important
volatile information using live forensic tools at the cost of
tainting evidence.
One of the key issues in collecting volatile information is
that various forms of data such as CPU registers, memory,
disk and network connections have diﬀerent lifetimes. To
1Encase: www.encase.com,
Helix: www.e-fense.com,
FTK Imager: www.accessdata.com,
Memoryze: www.mandiant.com/software/memoryze.htm
maximize evidence preservation, RFC 3227 [8] outlines the
order of volatility of these resources and dictates the order in
which evidence should be collected for investigation. Com-
mercial products currently used by forensic experts for inci-
dent response such as Encase, Helix, FTK Imager and Mem-
oryze 1 etc, do not capture all forms of data. A comparison
of these products is presented in Table 1. Scalpel and Sleuth
kit are solely designed for disk analysis while other tools such
as Encase, Helix and FTK include some level of memory cap-
ture and analysis capability. Memoryze is the only tool listed
in the table that performs volatile memory analysis. Some
tools such as Helix, FTK and Memoryze can list the state of
open network sockets, but the underlying network connec-
tions are not preserved during the analysis process. All live
forensic tools listed in this table rely on the integrity of the
running kernel. Compromised systems may provide inac-
curate information. Evidence preservation and minimizing
forensic intrusiveness are hard problems that haven’t been
adequately addressed in the literature.
In contrast, Forenscope was built to comply with steps
1 and 2 where it maximizes the preservation of evidence
and avoids disruption of ongoing activities to allow the cap-
ture of high ﬁdelity evidence. As a result, we believe that
Forenscope may be more broadly applicable to various sce-
narios which require live forensics such as incident response
and criminal investigation. For incident response, we recog-
nize that the integrity of the machine may be violated by
malware and our solutions have been designed to address
this scenario. For criminal investigation, we presume that
the machine may have various security mechanisms imple-
mented such as encrypted disks coupled with authentication
mechanisms such as logon screens and screensaver locks.
3. DESIGN
Forenscope utilizes the principle of introspection to pro-
vide a consistent analysis environment free of taint and blur-
riness which we term as the golden state. In this state, the
system is essentially quiescent and queries can be made to
analyze the system. As a result, analysis modules can access
in-memory data structures introspectively. The investigator
activates forenscope by forcing a reset where the state of the
machine is preserved by memory remanence in the DRAM
chips. Then, the investigator boots oﬀ the Forenscope me-
dia which performs forensic analysis on the latent state of
the system and restores the functionality of the system for
further live analysis. Forenscope is designed to work around
security mechanisms by interposing a lightweight analysis
platform beneath the operating system. For example, in in-
cident response, the machine may be controlled by malicious
software and the operating system cannot be trusted. The
observation capabilities aﬀorded by Forenscope oﬀer addi-
tional visibility in these scenarios.
3.1 Taint and Blurriness
Taint and blurriness are concepts related to the use of
forensic tools. Taint is a measurement of change in the
system induced by the use of a forensic tool and it may
be present both in memory and on disk.
In this section,
we only consider the in-memory portion because BitBlocker
(Section 3.6) eliminates disk taint by blocking writes. Blurri-
ness refers to the inconsistency of a memory snapshot taken
while a system is running.
308Table 1: Comparison of Forenscope with existing forensic tools
Evidence
Registers Memory Network Processes Disk
Encryption
RFC 3227 Reqs Nanosecs
Seconds Minutes Minutes
Hours Hours
Encase
Helix
FTK
Scalpel
Memoryze
Sleuth kit
Forenscope
×
×
×
×
×
×
X
Xa
Xa
Xa
×
Xa
×
X
×
Xb
X
×
Xb
×
X
×
X
X
×
X
×
X
X
X
X
X
×
X
X
×
×
X
×
×
×
X
a Subject to forensic blurriness
b Connection is recorded but not persisted
Table 2: Deﬁnitions
Quantity
Description
Contents of memory at time t
Snapshot St
Natural drift δv Change in the system state over time v
Snapshot ˆSv
Contents of captured memory snapshot
with v being the time taken to capture
the snapshot
f is deﬁned as the memory taint caused
by the forensic introspection agent
Taint f
To quantify the relationship between taint and blurriness,
let St be the contents of memory at any given instant of
time t. The state of a system changes over a period of time
due to the natural course of running processes and we deﬁne
this as the natural drift of the system, δ. When a traditional
live forensic tool attempts to take a snapshot of the system,
there is a diﬀerence between what is captured, ˆSv and the
true snapshot St, where v represents the time taken to cap-
ture the snapshot. There are two reasons for this diﬀerence:
the ﬁrst being δv the natural drift over the time period when
the snapshot was being acquired (v) and the second due to
the footprint f of the forensic tool. We deﬁne the former
as the blurriness of the snapshot and the latter quantity to
be the taint caused by the forensic tool. Table 2 captures
these deﬁnitions in a concise form.
In general, there are
two ways to obtain a snapshot of the machine’s state: ac-
tive techniques and passive techniques. Active techniques
involve the use of an agent on the machine which may leave
a footprint. Passive techniques operate outside the domain
of the machine and do not aﬀect its operation, one such
example is VM introspection. When a passive acquisition
tool is used, the relationship ˆSv = St + δv indicates that the
approximate snapshot diﬀers from the true snapshot due to
the blurriness δv. In contrast, when an active forensic tool
is used, ˆSv = St + f + δv, where f represents taint and
δv represents blurriness. Collectively, these quantities are
a measure of the error in the snapshot acquisition process.
Taint can result from the direct action of forensic tools or in-
direct eﬀects induced in the system through the use of these
tools. We call the former ﬁrst-order taint, f ′, and the lat-
ter second-order taint, f ′′. First-order taint can result from
loading a forensic tool into memory and second-order taint