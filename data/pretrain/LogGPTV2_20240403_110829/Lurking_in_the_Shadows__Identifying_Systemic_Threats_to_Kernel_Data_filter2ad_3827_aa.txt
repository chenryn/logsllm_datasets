# Lurking in the Shadows: Identifying Systemic Threats to Kernel Data

**Authors:**
- Arati Baliga
- Pandurang Kamat
- Liviu Iftode

**Affiliation:**
Department of Computer Science, Rutgers University

**Contact:**
- Email: {aratib, pkamat, iftode}@cs.rutgers.edu

## Abstract
The integrity of kernel code and data is fundamental to the security and stability of a computer system. Malicious modifications to kernel data are particularly attractive to rootkit authors because such changes are more difficult to detect compared to user-level alterations. To date, most tampering efforts have focused on hiding malicious objects in user space, which involves manipulating specific kernel data structures related to intercepting user requests or altering the user's view of the system. Consequently, current defense mechanisms are designed to detect these hiding behaviors.

This paper introduces a new class of stealthy attacks that exist solely within the kernel and do not employ traditional hiding techniques. These attacks are stealthy because the damage they cause is not immediately apparent to users or intrusion detection systems, indicating a broader systemic issue within the kernel. Our goal in developing these attack prototypes was to demonstrate that such attacks are not only feasible but also undetectable by current kernel integrity monitors without prior knowledge of the attack signatures.

## 1. Introduction
The integrity of the operating system kernel is crucial for the security and stability of a computer system. Rootkits, a type of malware, are commonly used to tamper with the kernel to hide the presence of an attacker. Other forms of malware, such as worms, viruses, and spyware, can evade detection when bundled with a rootkit. Sophisticated rootkits achieve this by modifying kernel data, often through process hiding or altering jump tables and file system handlers.

The challenge for users and intrusion detection systems (IDS) is to detect a compromised system as soon as an attack occurs. Rootkits aim to conceal this fact from the user for as long as possible. Once an attacker gains root access, they can perform visibly damaging actions, such as erasing files or rebooting the system to install a new kernel image. However, such actions conflict with the attacker's goal of remaining undetected to maintain long-term control. Radical actions are quickly detected, leading to the loss of control over the system.

Kernel integrity monitoring is achieved by isolating the detector from the system under surveillance. This can be done using a secure co-processor or virtual machine introspection. While the mechanisms for kernel integrity monitoring have been successfully developed, the policies for what data to monitor must be manually inferred from known rootkit behaviors. This is a significant challenge, similar to the one faced by anti-virus software, where attackers often have an advantage over defenders.

Petroni et al. [8] developed a specification architecture to manually define constraints on kernel data and monitor for violations. Although this architecture can specify known attack profiles, it fails to detect newer and unknown attacks that target unmonitored data structures or use different methods to attack monitored data structures. Additionally, as an external asynchronous monitor, it often finds data structures in an inconsistent state, limiting its scalability and feasibility. A comprehensive method to protect the integrity of all kernel data structures remains an active area of research.

Current rootkit-based kernel data tampering primarily focuses on hiding malicious objects, deceiving users into believing their system is clean. Early rootkits achieved this by installing trojaned system binaries and shared libraries that provided false responses. As file integrity tools like Tripwire [10] and AIDE [1] were developed, attackers shifted to intercepting user requests within the kernel by hooking into the system call table and interrupt descriptor table (IDT). More sophisticated rootkits modified kernel code instructions to redirect control to their own system call tables without altering the original ones. As kernel integrity monitors began to monitor these immutable data tables, rootkits found new ways to hide by modifying file system operation handlers and exploiting discrepancies in scheduler and process accounting data structures.

While the specific data structures targeted by rootkits have changed over time, the intent remains the same: to hide malicious files, processes, and network connections. Therefore, the tampered data structures are all related to intercepting user-level requests and providing false responses, or more generally, altering the user's view of the system. These rootkit attacks can be fully detected if all hiding techniques are explored. Tools like Strider Ghostbuster [4] can detect rootkits based on their attempts to hide.

In this paper, we introduce a new class of stealthy attacks that do not attempt to hide but still evade detection by current integrity monitors. These attacks highlight a larger systemic problem that requires comprehensive analysis. We also present a classification of kernel data tampering methods based on our designs and existing knowledge. To the best of our knowledge, this is the first paper to present this new class of attacks and provide a classification of the techniques used, which is a step towards developing a comprehensive solution.

## 2. Attacks
In this section, we present four stealthy attacks that alter kernel data without exhibiting hiding behavior. None of these attacks can be detected by currently known integrity monitoring approaches without prior knowledge of the attack signatures.

### 2.1. Disable Firewall
This attack hooks into the netfilter framework of the Linux kernel and stealthily disables the firewall installed on the system. The user cannot determine this fact by inspecting the system using iptables, as the rules still appear valid and the firewall seems to be in effect. The attacker's goal is to disable the network defense mechanisms, making the system vulnerable to other network-based attacks.

**Background:**
Netfilter is a packet filtering framework in the Linux kernel that provides hooks at different points in the networking stack. These hooks allow kernel modules to provide functionality such as packet filtering, mangling, and network address translation. The netfilter hooks for the IP protocol are shown in Figure 1. Iptables is a command-line tool for managing firewall rules, which uses the netfilter framework to enforce these rules.

**Attack Description:**
The pointers to the netfilter hooks are stored in a global table called `nf_hooks`. This is an array of pointers to the handlers registered by kernel modules for different protocol hooks. We modified the hook corresponding to the IP protocol and redirected it to our dummy code, effectively disabling the firewall. The firewall rules used in this experiment are shown in Figure 2. Before the attack, we were unable to access the web server running on the system. After inserting the attack module, we could access the web content hosted on port 80. Running the `iptables` command still showed the same rules in effect, leaving the user unaware that the firewall was disabled.

**Impact:**
This stealthy attack cannot be detected by existing tools. Since our attack module filters all packets without passing them to the firewall, it can run other commands upon receipt of a specially crafted packet sent by a remote attacker.

### 2.2. Resource Wastage Attack
This attack causes resource wastage and performance degradation by generating artificial memory pressure. The goal is to show that it is possible to stealthily influence kernel algorithms by manipulating data values. This attack targets the zone balancing logic, which ensures there are always enough free pages available in system memory.

**Background:**
Linux divides the total physical memory into nodes, each corresponding to a memory bank. Each node is further divided into three zones: `zone_dma`, `zone_normal`, and `zone_highmem`. `Zone_dma` is the first 16MB reserved for DMA transfers. `Zone_normal` spans from 16MB to 896MB and is used by user applications and dynamic data requests within the kernel. `Zone_highmem` is memory beyond 896MB, used for large contiguous memory allocations in the virtual address space.

Each zone is balanced by the kernel memory allocator (`buddy allocator`) and the page swapper (`kswapd`). The balance is maintained using zone watermarks, which indicate memory pressure. The three watermarks are `pages_min`, `pages_low`, and `pages_high` (Figure 3). When the number of free pages drops below `pages_low`, `kswapd` is activated to free pages by swapping unused pages to the swap store. It continues until the number of pages reaches `pages_high` and then goes back to sleep. When the number of pages reaches `pages_min`, the buddy allocator synchronously frees pages.

**Attack Description:**
The zone watermarks for each zone are stored in a global data structure called `zone_table`, an array of `zone_t` structures. This symbol is exported even by the 2.6 kernel. We wrote a simple kernel module to corrupt the zone watermarks for the `zone_normal` memory zone. The original and new values for these watermarks are shown in Table 1. By pushing `pages_min` and `pages_low` close to `pages_high` and making `pages_high` close to the total number of pages, we force the zone balancing logic to maintain the number of free pages close to the total number of pages, wasting a significant portion of physical memory. Table 1 shows that 210065 (820.56 MB) pages are maintained in the free pool, causing applications to constantly swap to disk. This attack also imposes a performance overhead on applications, as shown in Table 2.

**Table 1. Watermark values and free page count before and after the resource wastage attack for the normal zone**

| Watermark | Original Value | Modified Value |
|-----------|----------------|----------------|
| `pages_min` | 210000 | 255 |
| `pages_low` | 215000 | 510 |
| `pages_high` | 220000 | 765 |
| Total free pages | 210065 | 144681 |
| Total number of pages in zone: 225280 |

**Table 2. Performance degradation exhibited by applications after the resource wastage attack**

| Application | Before Attack | After Attack | Degradation (%) |
|-------------|---------------|--------------|-----------------|
| File copy | 49s | 1m, 3s | 28.57% |
| Compilation | 2m, 33s | 2m, 56s | 15.03% |
| File compression | 8s | 23s | 187.5% |

**Impact:**
This attack significantly degrades system performance and wastes resources, making it a serious threat. The attack can be similarly carried out for other zones, potentially wasting almost all memory installed on the system.

---

This revised version aims to improve the clarity, coherence, and professionalism of the original text.