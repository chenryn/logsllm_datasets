decades and has been exhaustively tested by tons of machines
with high-performance computing capacity [46]. Nonetheless,
we believe HFL showed the notable performance, in terms of
bug finding capability.
2) Efficiency: Besides the discovery of vulnerabilities, we
emphasize the superiority of HFL in terms of bug-finding per-
formance. To compare with HFL, we extra run a random syscall
fuzzer (using Syzkaller) in the same experiment environment as
in §VI-B1. In such a limited experiment, we figured that both
HFL and Syzkaller commonly discovered 13 known crashes
5 kasan [5], kmsan [6] and ubsan [7]
Fig. 9: Comparison of bug-finding time for 13 known crashes
(Table IX).
(listed in Table IX) that were all existing crashes and already
reported (but not patched) by other developers or analyzers. To
compare the performance, we measured the time elapsed at the
moment of each crash discovery, and then learn how fast HFL
discovered all these crashes. Figure 9 summarizes the result of
the performance comparison. As seen, HFL detected all these
vulnerabilities at the earlier time (around 15 hours) than that
of Syzkaller (over 50 hours), which reflects HFL shows better
capability in its bug-finding efficacy.
3) Overall Coverage: The goal of HFL is to gain maximum
code coverage by exploring as many execution paths as possible.
To evaluate this, we count the number of unique code blocks that
HFL has discovered throughout its entire process6. To highlight
better results of HFL, we compare with 5 popular kernel
fuzzers i.e., baseline Syzkaller, S2E [15], Moonshine [33],
kAFL [40] and TriforceAFL7 [22]. Since each of which has its
own particular way to measure code coverage8, we make all
of them (including HFL) use the same coverage measurement,
KCOV [4], for a fair comparison. For techniques that are not
designed for directly testing various system calls, e.g., S2E
and kAFL, we modified their frameworks to better handle such
cases in our experimental environments for a fair evaluation.
In the case that seed values are provided by default, we respect
them to use in the test; otherwise we used a randomly generated
one.
We then conduct experiments, taking a coverage measure-
ment, for 50 hours 3 times. The result is summarized in
Figure 10. In comparison, HFL not only reaches the peak point
faster, but explores more code blocks for all the categories. For
device drivers, in particular, the coverage difference between
HFL and other techniques is huge over the other two. According
to our analysis, it is mainly because of the frequent use of ioctl
function, where its second argument cmd is hardly predictable
and the third arg is typically unknown type featured with
various-sized and multi-layered structure (III-D). We observed
that Moonshine showed the most similar performance in terms
of the coverage compared to HFL. However, we notice that
its performance benefits would not go beyond that of HFL,
because it cannot handle hard-to-take branches, which are
6Although our decision of coverage measurement may miss some of unique
paths, considering overhead of measurement, we believe it is in a practical
and effective way.
7AFL-based [52] Linux kernel fuzzer.
8HFL, Moonshine and Syzkaller exercise KCOV-based measurement whereas
kAFL, S2E and TriforceAFL have measurement systems on their own [17, 22,
40].
10
01020304050Time (hour)024681012Cumulative sum of crashesHFLSyzkallerCrash type
Description
Kernel
Subsystem
Status
Impact
integer overflow
integer overflow
integer overflow
uninitialized variable access
memory access violation
memory access violation
memory access violation
uninitialized variable access
memory access violation
integer overflow
uninitialized variable access
integer overflow
integer overflow
integer overflow
memory access violation
integer overflow
integer overflow
memory access violation
memory access violation
task hang
memory access violation
integer overflow
memory access violation
task hang
undefined behaviour in mm/page_alloc.c
undefined behaviour in net/can/bcm.c
undefined behaviour in drivers/input/misc/uinput.c
undefined behaviour in fs/f2fs/extent_cache.c
use-after-free Read in ata_scsi_mode_select_xlat
use-after-free Read in raw_cmd_done
warning in pkt_setup_dev
uninit-value in selinux_socket_bind
undefined behaviour in drivers/block/floppy.c
undefined behaviour in drivers/net/ppp/ppp_generic.c
uninit-value in selinux_socket_connect_helper
undefined behaviour in ./include/linux/ktime.h
undefined behaviour in drivers/input/mousedev.c
undefined behaviour in drivers/pps/pps.c
general protection fault in spk_ttyio_ldisc_close
undefined behaviour in net/ipv4/ip_output.c
undefined behaviour in drivers/scsi/sr_ioctl.c
use-after-free Write in vgacon_scroll
use-after-free Write in do_con_write
task hung in drop_inmem_page
null-ptr-deref Write in complete
undefined behaviour in fs/xfs/xfs_ioctl.c
undefined behaviour in fs/jfs/jfs_dmap.c
task hung in reiserfs_sync_fs
4.19-rc8
4.19.13
4.19.13
5.0.7
4.17.19
4.19-rc2
4.19-rc2
4.19-rc8
4.19-rc8
4.19-rc8
4.19-rc8
4.19.13
4.20.0
4.20.0
4.20.0
5.0-rc2
5.0-rc2
4.17-rc3
4.17-rc3
4.17.19
4.17.19
4.19.19
4.19.19
4.19.19
memory
network
drivers
file system
drivers
drivers
drivers
network
drivers
drivers
network
timer
drivers
drivers
drivers
network
drivers
drivers
drivers
file system
drivers
file system
file system
file system
patched
patched
patched
patched
confirmed
confirmed
confirmed
confirmed
confirmed
confirmed
confirmed
confirmed
confirmed
confirmed
confirmed
confirmed
confirmed
reported
reported
reported
reported
reported
reported
reported
likely exploitable
DoS
DoS
DoS
likely exploitable
likely exploitable
DoS
likely exploitable
likely exploitable
DoS
likely exploitable
DoS
DoS
DoS
likely exploitable
DoS
DoS
likely exploitable
likely exploitable
DoS
DoS
DoS
DoS
DoS
TABLE III: List of 24 previously unknown vulnerabilities in the Linux kernels discovered by HFL.
mostly covered by HFL’s feature. Regarding S2E, it got stuck
at an early stage as the number of symbolic states grows;
thus much less code blocks were hit compared with HFL
and the others. Both kAFL and TriforceAFL do not show
impressive coverage results, because they neither resolve tight
branch conditions nor consider OS-specific features stated in
§III. In summary, the overall coverage improvement of HFL
over Moonshine and Syzkaller was around 15% and 26%,
respectively. Compared to kAFL, S2E and TriforceAFL, we
observed HFL’s coverage improvement was more than four
times.
In this regard, Table IV highlights the percentage distribution
of explored code blocks across the tested fuzzing schemes
for the overall category at the termination of the 50-hour
experiment. Note that unlike Figure 10, this comparison is
based on the line number9 due to incomparable code block
addresses (which rely on its own kernel build environment).
Most of the blocks explored by Moonshine and Syzkaller fall
into the ones discovered by HFL. In terms of the number of
blocks uniquely identified by each fuzzer, HFL exhibits much
better performance (18.1%) against all the others, as a result
of our hybrid approach along with kernel-specific solutions.
Furthermore, we compared the upper bound number of the
coverage, i.e., taking the upper bound as the total (absolute)
code blocks statically obtained from the target Linux kernel10.
With this maximum code block counts as the upper limit (100%)
of the coverage, HFL has approximately explored 10.5% of
the total coverage while exhibiting less percentages for the
other baselines, shown in Table V. We think this result is due
to HFL’s design choice, which only mutates entry points of
system calls. We hope to improve the coverage by extending
our mutation scope to the other kernel input space, other than
system calls, though it is out of scope in this paper.
9addr2line [2] is used for translation.
10Code block extraction is based on KCOV-assisted instrumentation.
{H ∩ M ∩ S} − {K ∪ T ∪ E}
H − {M ∪ S ∪ K ∪ T ∪ E}
{H ∩ M} − {S ∪ K ∪ T ∪ E}
{H ∩ M ∩ S ∩ K} − {T ∪ E}
{H ∩ S} − {M ∪ S ∪ T ∪ E}
{H ∩ M ∩ S ∩ K ∩ T} − E
etc.
Union of all
Coverage
38.6%
18.1%
12.1%
9.9%
4.1%
3.8%
13.3%
100%
TABLE IV: Percentage distribution for the overall coverage result
after running for 50 hours. 100 percent indicates the union of total
code blocks found by all the baselines tested in the experiment. The
notations H, M, S, K, T and E denote HFL, Moonshine, Syzkaller,
kAFL, TriforceAFL and S2E, respectively.
HFL
Moonshine
Syzkaller
kAFL
TriforceAFL
S2E
Coverage
10.5%
9.0%
7.9%
1.9%
0.9%
0.8%
TABLE V: Coverage percentage over the maximum (absolute)
coverage. 100 percent coverage indicates the entire code blocks
(statically identified in the target kernel binary) have been covered.
4) Case Study: In this section, we demonstrate a selective
crash example discovered by HFL, and describe how HFL is
used to reveal such a crash during the experiment.
page_alloc. Memory management is one of the key tasks of
operating systems — through this subsystem, OS kernels govern
the entire (physical and virtual) memory, and even the rest
of subsystems rely on it for kernel memory allocation. In
Figure 11, we present a simplified code snippet leading to a
11
(a) Overall
(b) Network
(c) File system
(d) Drivers
Fig. 10: Coverage results during a 50-hours run. The line indicates averages while the shaded area represents 95% confidence intervals across
three runs. The coverage improvement of HFL over Moonshine and Syzkaller is 15% and 26% (overall), respectively. Compared with the other
three (kAFL, TriforceAFL and S2E), HFL shows more than 4 times of improvement.
crash in memory allocation procedure.
In the scenario, a user program opens a device file and
conveys a message via syscall ioctl. Within the kernel, its
corresponding implementation (i.e., fd_ioctl) sends a request
for kernel pages, to store user-supplied data to be transferred.
We noticed here that although the amount of the kernel pages
requested is fully determined by the syscall argument, no
sanity check was deployed along this particular path (against
such data flow from argument input). Therefore, via syscall
argument, illegitimate user input can immediately affect kernel
page allocation, eventually leading to fatal memory problems,
such as out of memory.
In order to follow such a bug-triggering path, we need to
organize syscall arguments in a careful manner. At first, the
variable cmd (derived from the second argument of the syscall)
should be equal to a particular value (line 16). HFL precisely
reasons about it by evaluating the expression relevant to the
symbolized cmd. Second, it should have prior knowledge of
an internal structure (i.e., fd_raw_cmd) of the input stream
param (the third argument) such that len can be fuzzed enough
to cause overflow (line 23); otherwise this field may remain
unfuzzed. HFL keeps track of such a structure and correctly
guesses the size of input stream, thanks to our syscall argument
interface retrieval. On the other hand, other state-of-the-arts [24,
33] hardly reveal the vulnerability because they neither correctly
resolve such a branch predicate nor infer its valid argument
structure.
C. Per-feature Effectiveness
1) Per-feature Coverage: Since HFL is characterized with
multi-featured fuzzing scheme, we verify how much each HFL
feature contributes to the overall coverage. In order to better
highlight, we conduct an extra experiment based on selective
three test cases (i.e., ext4, rds11 and ppp12), where each
requires distinct HFL features to achieve the most performance
improvement (Table VI). Considering the saturation points
learned in our study, the experiment last up to 3 hours, we
measure explored execution blocks afterward. To compare the
result, we leverage existing pre-defined syscall templates (or
11Reliable Datagram Sockets (RDS).
12Point-to-Point Protocol (PPP). In this paper, PPP is considered as one of
devices because it is accessed through a device file "/dev/ppp".
// used for huge kernel memory request
...
void __user *data;
char *krn_data;
struct fd_raw_cmd *next;
long len;
1 // user-supplied input format through ioctl function
2 struct fd_raw_cmd {
3
4
5
6
7
8 };
9
10 int fd_ioctl(struct block_device *bdev, fmode_t mode,
11
12 {
13
14
15
16
17
18
19
20