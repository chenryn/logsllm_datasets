    vendor preset: enabled)
          Active: active (running) since Fri 2021-09-24 11:05:04 CEST; 2
    weeks 6 days ago
        Triggers: ● pcscd.service
          Listen: /run/pcscd/pcscd.comm (Stream)
          CGroup: /system.slice/pcscd.socket
    ```
3.  使用 `p11-kit list-modules`{.literal}
    命令，显示有关配置的智能卡和智能卡中的令牌的信息：
    ``` screen
    $ p11-kit list-modules
    p11-kit-trust: p11-kit-trust.so
    [...]
    opensc: opensc-pkcs11.so
        library-description: OpenSC smartcard framework
        library-manufacturer: OpenSC Project
        library-version: 0.20
        token: MyEID (sctest)
            manufacturer: Aventra Ltd.
            model: PKCS#15
            serial-number: 8185043840990797
            firmware-version: 40.1
            flags:
                   rng
                   login-required
                   user-pin-initialized
                   token-initialized
    ```
4.  验证您可以访问智能卡的内容：
    ``` screen
    $ pkcs11-tool --list-objects --login
    Using slot 0 with a present token (0x0)
    Logging in to "MyEID (sctest)".
    Please enter User PIN:
    Private Key Object; RSA
      label:      Certificate
      ID:         01
      Usage:      sign
      Access:     sensitive
    Public Key Object; RSA 2048 bits
      label:      Public Key
      ID:         01
      Usage:      verify
      Access:     none
    Certificate Object; type = X.509 cert
      label:      Certificate
      subject:    DN: O=IDM.EXAMPLE.COM, CN=idmuser1
      ID:         01
    ```
5.  使用 `certutil`{.literal} 命令显示智能卡中的证书内容：
    ::: orderedlist
    1.  运行以下命令来确定证书的正确名称：
        ``` screen
        $ certutil -d /etc/pki/nssdb -L -h all
        Certificate Nickname                                         Trust Attributes
                                                                     SSL,S/MIME,JAR/XPI
        Enter Password or Pin for "MyEID (sctest)":
        Smart Card CA 0f5019a8-7e65-46a1-afe5-8e17c256ae00           CT,C,C
        MyEID (sctest):Certificate                                   u,u,u
        ```
    2.  在智能卡中显示证书内容：
        ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
        ### 注意 {.title}
        确保证书的名称是与上一步中显示的输出完全匹配，在本例中为
        `MyEID(sctest):Certificate`{.literal}。
        :::
        ``` screen
        $ certutil -d /etc/pki/nssdb -L -n "MyEID (sctest):Certificate"
        Enter Password or Pin for "MyEID (sctest)":
        Certificate:
            Data:
                Version: 3 (0x2)
                Serial Number: 15 (0xf)
                Signature Algorithm: PKCS #1 SHA-256 With RSA Encryption
                Issuer: "CN=Certificate Authority,O=IDM.EXAMPLE.COM"
                Validity:
                    Not Before: Thu Sep 30 14:01:41 2021
                    Not After : Sun Oct 01 14:01:41 2023
                Subject: "CN=idmuser1,O=IDM.EXAMPLE.COM"
                Subject Public Key Info:
                    Public Key Algorithm: PKCS #1 RSA Encryption
                    RSA Public Key:
                        Modulus:
                            [...]
                        Exponent: 65537 (0x10001)
                Signed Extensions:
                    Name: Certificate Authority Key Identifier
                    Key ID:
                        e2:27:56:0d:2f:f5:f2:72:ce:de:37:20:44:8f:18:7f:
                        2f:56:f9:1a
                    Name: Authority Information Access
                    Method: PKIX Online Certificate Status Protocol
                    Location:
                        URI: "http://ipa-ca.idm.example.com/ca/ocsp"
                    Name: Certificate Key Usage
                    Critical: True
                    Usages: Digital Signature
                            Non-Repudiation
                            Key Encipherment
                            Data Encipherment
                    Name: Extended Key Usage
                        TLS Web Server Authentication Certificate
                        TLS Web Client Authentication Certificate
                    Name: CRL Distribution Points
                    Distribution point:
                        URI: "http://ipa-ca.idm.example.com/ipa/crl/MasterCRL.bin"
                        CRL issuer:
                            Directory Name: "CN=Certificate Authority,O=ipaca"
                    Name: Certificate Subject Key ID
                    Data:
                        43:23:9f:c1:cf:b1:9f:51:18:be:05:b5:44:dc:e6:ab:
                        be:07:1f:36
            Signature Algorithm: PKCS #1 SHA-256 With RSA Encryption
            Signature:
                [...]
            Fingerprint (SHA-256):
                6A:F9:64:F7:F2:A2:B5:04:88:27:6E:B8:53:3E:44:3E:F5:75:85:91:34:ED:48:A8:0D:F0:31:5D:7B:C9:E0:EC
            Fingerprint (SHA1):
                B4:9A:59:9F:1C:A8:5D:0E:C1:A2:41:EC:FD:43:E0:80:5F:63:DF:29
            Mozilla-CA-Policy: false (attribute missing)
            Certificate Trust Flags:
                SSL Flags:
                    User
                Email Flags:
                    User
                Object Signing Flags:
                    User
        ```
    :::
:::
::: itemizedlist
**其他资源**
-   请参阅 `certutil(1)`{.literal} man page。
:::
:::
::: section
::: titlepage
# []{#assembly_troubleshooting-authentication-with-smart-cards_managing-smart-card-authentication.html#proc_troubleshooting-smart-card-authentication-with-sssd_assembly_troubleshooting-authentication-with-smart-cards}使用 SSSD 对智能卡验证进行故障排除 {.title}
:::
这个步骤描述了如何使用智能卡使用 SSSD 对身份验证进行故障排除。
::: itemizedlist
**先决条件**
-   已安装并配置了用于智能卡的 IdM 服务器和客户端。
-   已安装 `sssd-tools`{.literal} 软件包。
-   您可以检测智能卡读取器并显示智能卡的内容。请参阅[在系统上测试智能卡访问](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/managing_smart_card_authentication/assembly_troubleshooting-authentication-with-smart-cards_managing-smart-card-authentication#proc_testing-smart-card-authentication_assembly_troubleshooting-authentication-with-smart-cards){.link}。
:::
::: orderedlist
**步骤**
1.  使用 `su`{.literal} 验证您可以使用智能卡进行验证：
    ``` screen
    $ su - idmuser1 -c ‘su - idmuser1 -c whoami’
    PIN for MyEID (sctest):
    idmuser1
    ```
    如果没有提示输入智能卡
    PIN，且返回一个密码提示或者返回授权错误，请检查 SSSD 日志。有关在
    SSSD 中登录的信息，请参阅 [IdM 中的 SSSD
    对身份验证进行故障排除](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/configuring_authentication_and_authorization_in_rhel/assembly_troubleshooting-authentication-with-sssd-in-idm_restricting-domains-for-pam-services-using-sssd){.link}。以下是身份验证失败的示例：
    ``` screen
    $ su - idmuser1 -c ‘su - idmuser1 -c whoami’
    PIN for MyEID (sctest):
    su: Authentication failure
    ```
    如果 SSSD 日志指明了 `krb5_child`{.literal}
    的问题，类似于以下内容，则可能对您的 CA
    证书有问题。要排除与证书相关的问题，请参阅 [验证 IdM Kerberos KDC
    可以使用 Pkinit 以及 CA
    证书正确位于](#assembly_troubleshooting-authentication-with-smart-cards_managing-smart-card-authentication.html#proc_verifying-that-idm-kerberos-kdc-can-use-pkinit-and-that-the-ca-certificates-are-correctly-located_assembly_troubleshooting-authentication-with-smart-cards "验证 IdM Kerberos KDC 可以使用 PKINIT 和 CA 证书正确位置"){.link}。
    ``` screen
    [Pre-authentication failed: Failed to verify own certificate (depth 0): unable to get local issuer certificate: could not load the shared library]
    ```
    如果 SSSD 日志表示来自 `p11_child`{.literal} 或
    `krb5_child`{.literal} 的超时，您可能需要提高 SSSD
    超时，并尝试使用智能卡再次进行身份验证。有关如何增加超时的详情，请参阅[增加
    SSSD
    超时](#assembly_troubleshooting-authentication-with-smart-cards_managing-smart-card-authentication.html#proc_increasing-sssd-timeouts_assembly_troubleshooting-authentication-with-smart-cards "增加 SSSD 超时"){.link}。
2.  验证您的 GDM 智能卡验证配置是否正确。应返回 PAM
    验证的成功消息，如下所示：
    ``` screen
    # sssctl user-checks -s gdm-smartcard "idmuser1" -a auth
    user: idmuser1
    action: auth
    service: gdm-smartcard
    SSSD nss user lookup result:
     - user name: idmuser1
     - user id: 603200210
     - group id: 603200210
     - gecos: idm user1
     - home directory: /home/idmuser1
     - shell: /bin/sh
    SSSD InfoPipe user lookup result:
     - name: idmuser1
     - uidNumber: 603200210
     - gidNumber: 603200210
     - gecos: idm user1
     - homeDirectory: /home/idmuser1
     - loginShell: /bin/sh
    testing pam_authenticate
    PIN for MyEID (sctest)
    pam_authenticate for user [idmuser1]: Success
    PAM Environment:
     - PKCS11_LOGIN_TOKEN_NAME=MyEID (sctest)
     - KRB5CCNAME=KCM:
    ```
    如果身份验证错误（类似于以下内容）被返回，请检查 SSSD
    日志尝试并确定导致这个问题的原因。有关在 SSSD 中登录的信息，请参阅
    [IdM 中的 SSSD
    对身份验证进行故障排除](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/configuring_authentication_and_authorization_in_rhel/assembly_troubleshooting-authentication-with-sssd-in-idm_restricting-domains-for-pam-services-using-sssd){.link}。
    ``` screen
    pam_authenticate for user [idmuser1]: Authentication failure
    PAM Environment:
     - no env -
    ```
    如果 PAM 验证仍失败，请清除您的缓存并再次运行命令。
    ``` screen
    # sssctl cache-remove
    SSSD must not be running. Stop SSSD now? (yes/no) [yes] yes
    Creating backup of local data…
    Removing cache files…
    SSSD needs to be running. Start SSSD now? (yes/no) [yes] yes
    ```
:::
:::
::: section
::: titlepage
# []{#assembly_troubleshooting-authentication-with-smart-cards_managing-smart-card-authentication.html#proc_verifying-that-idm-kerberos-kdc-can-use-pkinit-and-that-the-ca-certificates-are-correctly-located_assembly_troubleshooting-authentication-with-smart-cards}验证 IdM Kerberos KDC 可以使用 PKINIT 和 CA 证书正确位置 {.title}
:::
这个步骤描述了如何验证 IdM Kerberos KDC 可以使用
PKINIT，并描述了如何正确验证您的 CA 证书。
::: itemizedlist
**先决条件**
-   已安装并配置了用于智能卡的 IdM 服务器和客户端。
-   您可以检测智能卡读取器并显示智能卡的内容。请参阅[在系统上测试智能卡访问](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/managing_smart_card_authentication/assembly_troubleshooting-authentication-with-smart-cards_managing-smart-card-authentication#proc_testing-smart-card-authentication_assembly_troubleshooting-authentication-with-smart-cards){.link}。
:::
::: orderedlist
**步骤**
1.  运行 `kinit`{.literal} 工具，以 `idmuser1`{.literal}
    使用保存在智能卡中的证书进行验证：
    ``` screen
    $ kinit -X X509_user_identity=PKCS11: idmuser1
    MyEID (sctest)                   PIN:
    ```
2.  输入您的智能卡 PIN。如果没有提示输入
    PIN，请检查您是否可检测智能卡读取器并显示智能卡的内容。请参阅[测试智能卡验证](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/managing_smart_card_authentication/assembly_troubleshooting-authentication-with-smart-cards_managing-smart-card-authentication#proc_testing-smart-card-authentication_assembly_troubleshooting-authentication-with-smart-cards){.link}。
3.  如果您的 PIN 被接受，系统会提示您输入密码，可能会缺少您的 CA
    签名证书。
    ::: orderedlist
    1.  使用 `openssl`{.literal} 命令，验证默认证书捆绑包文件中列出的 CA
        链：
        ``` screen
        $ openssl crl2pkcs7 -nocrl -certfile /var/lib/ipa-client/pki/ca-bundle.pem | openssl pkcs7 -print_certs -noout
        subject=O = IDM.EXAMPLE.COM, CN = Certificate Authority
        issuer=O = IDM.EXAMPLE.COM, CN = Certificate Authority
        ```
    2.  验证您的证书的有效性：
        ::: orderedlist
        1.  查找 `idmuser1`{.literal} 的用户身份验证证书 ID：
            ``` screen
            $ pkcs11-tool --list-objects --login
            [...]
            Certificate Object; type = X.509 cert
              label:      Certificate
              subject:    DN: O=IDM.EXAMPLE.COM, CN=idmuser1
             ID: 01
            ```
        2.  从智能卡以 DER 格式读取用户证书信息：
            ``` screen
            $ pkcs11-tool --read-object --id 01 --type cert --output-file cert.der
            Using slot 0 with a present token (0x0)
            ```
        3.  将 DER 证书转换为 PEM 格式：
            ``` screen
            $ openssl x509 -in cert.der -inform DER -out cert.pem -outform PEM
            ```
        4.  验证证书是否有有效的签发者签名到 CA：
            ``` screen
            $ openssl verify -CAfile /var/lib/ipa-client/pki/ca-bundle.pem /cert.pem
            cert.pem: OK
            ```
        :::
    :::