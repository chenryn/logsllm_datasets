| 方案  | 适用场景  | 简介  |
|---|---|---|| 方案  | 适用场景  | 简介  |
|---|---|---|
| Hadoop/Hive  |离线数据处理  |Hadoop 以著名的 MapReduce 作为编程模型，Hive 的作用 是将 SQL 编译成 MapReduce 的代码运行，数据量可以支 持 EB 级  |
| Spark  |实时/离线数据处理  |Spark 一个用 Scala 编写的处理框架，以 RDD 数据为核心 数据结构，支持多种语言的编程，支持秒级实时计算和 离线计算，并且具备较完备的上下游大数据生态。  |
| Flink  |实时数据处理  |Apache Flink 是实时处理系统的后起之秀，支持多语 言。它提供完全流式的数据处理能力支持毫秒级的实时 计算，同时也支持 batch 的方式处理数据。同时，Flink 提供了 SQL 能力简化实时数据处理流程  || Storm  |实时数据处理  |Apache Storm 是分布式、容错的实时计算系统，它支持 多语言，提供简单编程框架，支持毫秒级级实时计算。  |
第 45 页共 74 页
《企业级 AIOps 实施建议白皮书》V1.0 
Python/Pandas  离线数据处理  Python Pandas 可以轻松应对百万级记录数下的大部分 数据处理场景。 
表 8-3 数据处理常见技术 
以上列举了一些市场上常见的数据解决方案。一般而言，推荐使用 Logstash 作为数据采集客户端，结合 Kalfa 做实时数据存储，Flink 作为实时数据系统，OpenTSDB 作为时间序列存储、Druid 作为事件存储、ElsticSearch 做日志存储与检索、Hadoop 做离线数据存储。
8.1.2 运维数据仓库的模型8.1.2 运维数据仓库的模型 
	经典的数据仓库模型有：实体关系（ER）模型 、 维度模型 、DataVault、 Anchor 模型。其中维度模型 是当前在数据仓库工程领域的经典，维度建模以分析决策的需求出发构建模型，重点解决用户如何更快速完 成分析需求，同时还有较好的大规模复杂查询的响应性能。星形模型是维度建模中的典型的代表。维度建模 以事实为中心，扩展 n 个维度。一般事实是动态的，随着时间的增加而增加；维度一般是静态的、相关固定 的属性。
图 8-1 维度模型 
举个例子，一台服务器发生了宕机这是一个事实。围绕这个事实，我们可以扩展出多个维度。比如该服 务器所在的机房、机架、网段、机器的应用角色、操作系统版本、kernel 版本等。这时维度建模后这个事实 就拥有了更多的信息，我们知道了一个在 xx 机房的、xx 机架、xx 应用、操作性系统版本为 xx、kernel 版本 为 xx 的服务器发生了一次宕机。为我们后续的数据分析提供了更好的基础。8.1.3 数据仓库建模的分层规范 
	前面介绍了数据仓库的维度模型，在实际的运维数据仓库建设时，由于每次的需求、场景不确定，可能 导致一个事实表被重复加工。这个问题实际上是数据重复建设的问题，它除了带来重复的工作量外，还可能 导致数据加工出错（维事实数据加工可能有特殊的 ETL 过程没有被所有人关注到，那轻易做加工的人会出现 纰漏，导致最终结果出错）。 
因此，建立起有效的机制防止数据被重复加工也至关重要，目前比较有效的方式是建立分层规范。
首先我们举个场景例子，现在有一份原始数据是机器的进程 OOM 日志记录，里面大概包含这样的信息。
（表 8-4） 
第 46 页共 74 页
《企业级 AIOps 实施建议白皮书》V1.0 
| 机器  | 进程  | 问题  |
|---|---|---|
| 192.168.1.1  |test.bin  |OOM  || 192.168.1.1  |test.bin  |OOM  |
| 192.168.1.2  |test2.bin  |OOM  |
表 8-4 机器进程 OOM 日志记录 
	这时 SRE A 需要分析哪种进程在什么样的 kerenl 下比较容易 OOM，他会把进程 OOM 事件记录和机器信息 表做 Join，进而拿到进程 OOM 和 Kernel 的关系，得出相应的结论。 
	假设 SRE B 需要分析哪种进程在什么样的内存配置下比较容易 OOM，他也会把进程 OOM 事件记录和机器信 息表做 Join，进而拿到进程 OOM 和内存大小的关系，得出相应的结论。 
	SREA 和 SREB 做了一件同样的事情，是把进程 OOM 记录表和机器表做 Join，然后分别得出结论。我们可 以想象，再来一个分析场景可能还要再 Join 一次。采用分层模型就可以较好的避免重复的工作。以上面的例子来看，把 OOM 记录表和机器表 Join 后的表打 造成一个宽表，即包含了未来可能分析到的所有维度的表，那么后续进一步分的分析工作都可以以这张宽表 为基准了。（表 8-5）
| 机器  | 进程  | 问题  | Kernel 版本  | CPU 核数  | 内存大小  | 机器型号  |
|---|---|---|---|---|---|---|
| 192.168.1.1  |test.bin  |OOM  |2.6.32  |32  |64G  |XXXX  |
| 192.168.1.2  |test2.bin  |OOM  |2.6.32  |32  |64G  |XXXX  |
表 8-5 分析工作基准表 8-5 分析工作基准 
我们把采集过来的数据叫做 ODS 层（操作数据）层（比如刚才机器的问题信息：OOM 事件），把维度相关 的称为 DIM（维度）层（比如刚才机器的一些静态信息，如 CPU、MEM 配置），这时候 ODS 层的数据和 DIM 层 的数据做 JOIN，就把 ODS 层的数据扩展了，产生了维度比较丰富的数据，我们叫做 DWD（明细）层（也就是 我们上面的“宽表”）。之后基于 DWD 层的数据，按照若干个维度来打造就可以形成 DWS（汇总）层（比如刚 才场景里某时间段内某类进程的 OOM 次数），也可以经过一些 ETL 过程变成适合应用的数据，同步到业务数 据库去使用。构筑体系化的 DWD 层，会有效控制数据仓库随数据规模增长的趋势，同时在数据研发效率、>成 本与性能间获得良好的收益。
第 47 页共 74 页
《企业级 AIOps 实施建议白皮书》V1.0《企业级 AIOps 实施建议白皮书》V1.0 
图 8-2 ODS 等分层 
8.1.4 数据时效性的选择 
	一般而言，数据的时效性是越实时越能对后续的决策提供更加精准、有效的帮助。但实现实时的数据往 往是有代价的（这里的实时数据是指基于维度模型建立的实时数据，不包含原生就已实时的数据，如时间序 列数据、实时采集的日志数据等）。实时度定义为实时的程度，如果实时度越高，则数据越实时。那么在现 实的场景中，实时度的提高会带来更大的资源消耗和更高的 ETL 复杂度。 
图 8-3                                                             图 8-4 
所以对于数据是否做到实时，做到多实时需要根据真实的需求来做抉择。 一般比较有效的方法是根据数
据的应用场景来选择（表 8-6）。 
| 场景  | 数据的时效性  |据的应用场景来选择（表 8-6）。 
| 场景  | 数据的时效性  |
|---|---|
| 决策类场景  |秒级实时、分钟级实时  |
| 报表类场景  |离线 T+1  |
表 8-6 应用场景
第 48 页共 74 页
《企业级 AIOps 实施建议白皮书》V1.0 
8.1.5 运维领域常见的数据 
	按照维度建模，可以把数据分成维度和事实。运维领域的数据也比较容易按照维度和事实来分解。如下 为一些常见的维度数据（表 8-7）： 
| 维度  | 常见的维度属性  |
|---|---|
| 服务器  |机器的主机名、ip 地址、机器型号、硬件配置、操作系统版本、所属网 段、所属产品线、机器角色等  |
| 监控配置  |监控项名称、被监控的对象、通知方式等  |