title:Attack Patterns for Black-Box Security Testing of Multi-Party Web
Applications
author:Avinash Sudhodanan and
Alessandro Armando and
Roberto Carbone and
Luca Compagna
Attack Patterns for Black-Box Security Testing of
Multi-Party Web Applications
Avinash Sudhodanan
Alessandro Armando
University of Trento, Italy
Security & Trust, FBK, Italy
DIBRIS, University of Genova
Security & Trust, FBK, Italy
PI:EMAIL
PI:EMAIL
Roberto Carbone
Security & Trust, FBK, Italy
Luca Compagna
SAP Labs France
PI:EMAIL
PI:EMAIL
Abstract—The advent of Software-as-a-Service (SaaS) has led
to the development of multi-party web applications (MPWAs).
MPWAs rely on core trusted third-party systems (e.g., payment
servers, identity providers) and protocols such as Cashier-as-a-
Service (CaaS), Single Sign-On (SSO) to deliver business services
to users. Motivated by the large number of attacks discovered
against MPWAs and by the lack of a single general-purpose
application-agnostic technique to support their discovery, we
propose an automatic technique based on attack patterns for
black-box, security testing of MPWAs. Our approach stems from
the observation that attacks against popular MPWAs share a
number of similarities, even if the underlying protocols and
services are different. In this paper, we target six different
replay attacks, a login CSRF attack and a persistent XSS
attack. Firstly, we propose a methodology in which security
experts can create attack patterns from known attacks. Secondly,
we present a security testing framework that leverages attack
patterns to automatically generate test cases for testing the
security of MPWAs. We implemented our ideas on top of OWASP
ZAP (a popular, open-source penetration testing tool), created
seven attack patterns that correspond to thirteen prominent
attacks from the literature and discovered twenty one previously
unknown vulnerabilities in prominent MPWAs (e.g., twitter.com,
developer.linkedin.com, pinterest.com), including MPWAs that do
not belong to SSO and CaaS families.
I.
INTRODUCTION
An increasing number of business critical, online applica-
tions leverage trusted third parties in conjunction with web-
based security protocols to meet
their security needs. For
instance, many online applications rely on authentication as-
sertions issued by identity providers to authenticate users using
a variety of web-based single sign-on (SSO) protocols (e.g.,
SAML SSO v2.0, OpenID Connect). Similarly, online shop-
ping applications use online payment services and Cashier-as-
a-Service (CaaS) protocols to obtain proof-of-payment before
delivering the purchased items (e.g., Express Checkout [11]
and PayPal Payment Standard [12]). We refer to this broad
class of protocols as security-critical Multi-Party Web Appli-
cations (MPWAs). Three entities take part in the protocols: the
Permission to freely reproduce all or part of this paper for noncommercial
purposes is granted provided that copies bear this notice and the full citation
on the ﬁrst page. Reproduction for commercial purposes is strictly prohibited
without the prior written consent of the Internet Society, the ﬁrst-named author
(for reproduction of an entire paper only), and the author’s employer if the
paper was prepared within the scope of employment.
NDSS ’16, 21-24 February 2016, San Diego, CA, USA
Copyright 2016 Internet Society, ISBN 1-891562-41-X
http://dx.doi.org/10.14722/ndss.2016.23286
User (through a web browser B), the web application (playing
the role of Service Provider, SP), and a trusted third party
(TTP).
The design and implementation of the protocols used by
security-critical MPWAs are notoriously error-prone. Several
vulnerabilities have been reported in the last few years. For
instance, the incorrect handling of the OAuth 2.0 access token
by a vulnerable SP can be exploited by an attacker hosting
another SP [38]. If the victim User logs into the attacker’s
SP, the attacker obtains an access token (issued by TTP) from
the victim and can replay it in the vulnerable SP to login
as the victim. A similar attack was previously discovered in
the SAML-based implementation deployed by Google [23].
(Here the SAML authentication assertion is replayed instead
of the OAuth 2.0 access token.) Similar attacks have also been
detected in CaaS-enabled scenarios [35], [32]. For instance, a
vulnerability in osCommerce v2.3.1 that allowed an attacker
to shop for free has been reported in [32]: the attacker controls
a SP and obtains an account identiﬁer from PayPal for paying
herself; later on, she replays this value in a subsequent session
with a vulnerable SP where she purchases a product by paying
herself. Recently, a token ﬁxation attack in PayPal Express
Checkout ﬂow was discovered [18] which is very similar to
the session ﬁxation attack in OAuth 1.0 [10]. The problem is
exacerbated by the large number of deployments. As a matter
of fact, over 20% of the top twenty-thousand Alexa top US
websites have a vulnerable implementation of the Facebook
SSO [40].
The aforementioned attacks have been discovered through
a variety of domain-speciﬁc techniques with different levels of
complexity, ranging from formal veriﬁcation [23], white-box
analysis [35], black-box testing [32], to manual testing [18].
In this paper, we pursue a different approach and propose
an automatic black-box testing technique for security-critical
MPWAs. Our approach is based on an observation and a
conjecture. The observation is that, regardless of their purpose,
the security protocols at the core of MPWAs share a number
of features:
1)
2)
3)
4)
By interacting with SP (and/or TTP), User authenti-
cates and/or authorizes some actions,
TTP (SP, resp.) generates a security token,
the security token is dispatched to SP (TTP, resp.)
through the web browser, and
SP (TTP, resp.) checks the security token and com-
pletes the protocol by taking some security-critical
decisions.
The conjecture is that the attacks found in the literature (and
possibly many more still to be discovered) are instances of a
limited number attack patterns. We conducted a detailed study
of attacks discovered in MPWAs of real-world complexity
and analyzed their similarities. This led us to identify a
small number of application-independent attack patterns that
concisely describe the actions performed by attackers while
performing these attacks.
To assess the generality and the effectiveness of our
approach, we have developed a security testing framework
based on OWASP ZAP1, a popular open-source penetration
testing tool, and run it against a number of prominent MPWA
implementations. Our tool has been able to identify:
two previously unknown attacks against websites in-
tegrating LinkedIn’s Javascript API-based SSO that
causes an access token replay attack and a persistent
XSS attack;
a previously unknown redirection URI ﬁxation attack
against the implementation of the OAuth 2.0 protocol
in PayPal’s “Log in with PayPal” SSO solution which
allows a network attacker to steal the authorization
code of the victim and replay it to login as the victim
in any SP website using the same SSO solution;
a previously unknown attack in the payment checkout
solution offered by Stripe (integrated in over 17,000
websites [15]); the attack allows an attacker to imper-
sonate a SP to obtain a token from the victim User
which is subsequently used to shop at the imperson-
ated SP’s online shop using the victim’s credit card;
and
seven previously unknown vulnerabilities in a num-
ber of websites (e.g., developer.linkedin.com, pin-
terest.com, websta.me) leveraging the SSO solutions
offered by LinkedIn, Facebook, and Instagram.
•
•
•
•
Besides the SSO and the CaaS scenarios, we investigated a
popular family of MPWAs, namely the Veriﬁcaton Via Email
(VvE) scenario, which is often used by websites to send
security-sensitive information to users via email. By testing the
security of Alexa Top 500 websites we found that a number
of prominent websites such as twitter.com, open.sap.com are
vulnerable to login CSRF attacks. The following are the main
contributions of this paper:
1) We show that the attack strategies behind thirteen
prominent MPWA attacks can be represented using
seven attack patterns, and these attack patterns are
general enough to discover similar attacks in MPWAs
implementing different protocols and in different
MPWA scenarios. For instance, an attack pattern
inspired by various SSO attacks from the literature
was able to automatically discover a new attack in
the CaaS scenario.
The idea that prior attacks proposed on SSO and CaaS
share commonalities is not new [39], [29]. However,
ours is the ﬁrst black-box security testing approach
that has experimental evidence of applicability in both
SSO and CaaS domains.
Prior work on security analysis of MPWAs is focused
only on SSO and CaaS scenarios. We evaluate the
MPWA scenario in which websites send security-
sensitive information to users via email and show that
2)
3)
1www.owasp.org/index.php/OWASP Zed Attack Proxy Project
eight out of the top Alexa global 500 websites2 are
vulnerable to login CSRF attacks.
4) We have developed a fully functional prototype of
our approach on OWASP ZAP, a widely-used open-
source penetration testing tool. The tool is available
online (upon request) at the companion website.3
5) We have been able to identify 11 previously unknown
vulnerabilities in security-critical MPWAs leveraging
the SSO and CaaS protocols of LinkedIn, Facebook,
Instagram, PayPal, and Stripe.
Structure of the paper. In Section II, we introduce some back-
ground information about MPWAs and details about various
attacks from the literature. The idea of creating attack patterns
from concrete attacks is explained in Section III. In Section IV
we show how the attack patterns we deﬁned can be used
to carry out black-box testing of MPWAs. In Section V,
we provide some details about our prototype implementation.
We discuss the experimental evaluation in Section VI. In
Section VII we discuss the related work and in Section VIII
we discuss the limitations of our approach. We conclude in
Section IX with some ﬁnal remarks.
II. BACKGROUND
Figure 1 provides pictorial representations of example
MPWAs leveraging SSO, CaaS, and Veriﬁcation via Email
(VvE) solutions. They all feature (i) a user U, operating a
browser B, who wants to consume a service from a service
provider SP and (ii) a service provider SP that relies on a
trusted-third-party TTP to deliver its services. TLS (and valid
certiﬁcates at TTP and SP) are used to securely exchange
messages.
Figure 1a shows the SAML 2.0 SSO protocol [30], where
SP relies on TTP (the Identity Provider, IdP for short) to
authenticate a user U before granting the user access to one
of its resources. The protocol starts (steps 1-2) with U asking
SP for a resource located at URI SP. SP in turn redirects B
to IdP with the authentication request AuthRequest (step 3).
The RelayState ﬁeld carries URI SP. IdP then challenges B
to provide valid credentials that are entered by U (steps 4-6).
If the authentication succeeds, IdP issues a digitally signed
authentication assertion (AuthAssert) and instructs the user
to sent it (along with the RelayState) to the SP (step 7).
SP checks the assertion and delivers the requested resource
(step 8). A severe man-in-the-middle attack against the SAML-
based SSO for Google Apps was reported [23]. The attack,
due to a deviation from the standard whereby AuthAssert
did not include the identity of SP (for which the assertion was
created), allowed a malicious agent hosting a SP (say SPM)
to reuse AuthAssert to access the resource of the victim U
(say UV) stored at Google, the target SP (say SPT). More in
detail, after a session S1 of the protocol involving UV and
SPM, in which SPM receives the AuthAssert from UV, the
malicious agent starts another session S2 playing the role UM
and mischievously reuses the assertion obtained in S1 in S2
to trick Google (SPT) into believing he is UV.
Figure 1b illustrates a typical MPWA running the PayPal
Payments Standard CaaS protocol [12] where TTP authorizes
U to purchase a product P at SP. Here, TTP is a Payment
Service Provider (PSP) played by PayPal. SP is identiﬁed by
2http://www.alexa.com/topsites
3https://sites.google.com/site/mpwaprobe/
2
(a) SAML-based SSO
(b) PayPal Payments Standard CaaS
(c) Email notiﬁcation and acknowledgment
Fig. 1: Typical MPWA scenarios
PayPal through a merchant account identiﬁer (P ayeeId). U
places an order for purchasing P (steps 1-5). SP sends the
P ayeeId, the cost of the product (Cost) and a return URI
(ReturnU RI) to TTP by redirecting B (step 6). By interacting
with PSP, U authorizes the payment of the amount to SP (steps
7-9). The transaction identiﬁer (TransactionId) is generated by
PSP and passed to SP by redirecting B to ReturnURI (step 10).
The TransactionId is then submitted by SP to TTP to get
the details of the transaction (steps 11-12). Upon successful
veriﬁcation of the transaction details, SP sends U the status of
the purchase order (step 13).
A serious vulnerability in the integration of the PayPal
Payments Standard protocol in osCommerce v2.3.1 and Aban-
teCart v1.0.4 that allowed a malicious party to shop for free
was discovered in [32]. The attack is as follows: from a
session S1 of the protocol involving the PSP and the malicious
party controlling both a user (UM) and a SP (SPM),
the
malicious party obtains a payee (merchant) identiﬁer. Later, in
the checkout protocol session S2 between UM and the target
SP (SPT), the malicious agent replays the value of PayeeId
obtained in the other session and manages to place an order
for a product in SPT by paying herself (instead of SPT).
While MPWAs for SSO and CaaS scenarios received a
considerable attention (see, e.g., [29], [34], [35], [37], [36],
[39], [32]), there are several other security critical MPWAs that
are in need of close scrutiny. For instance, websites often send
security-sensitive URIs to their users via email for veriﬁcation
purposes. This scenario occurs very frequently for account
registration: an account activation link is sent via email to
the user who is asked to access her email and click on the
link contained in the email message. An illustration of this
scenario is provided in Figure 1c. Here, TTP is a mailbox
provider MP that guarantees SP that a user U is in control of
a given email address (Email). During registration, U provides
Email to SP (steps 1-5). SP sends the account activation URI
(ActLink) via email to U, when U visits her inbox at MP
he gets access to ActLink (steps 6-12) and by clicking it, the