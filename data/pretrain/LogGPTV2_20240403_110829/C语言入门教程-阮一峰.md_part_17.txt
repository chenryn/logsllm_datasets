预处理指令可以出现在程序的任何地⽅，但是习惯上，往往放在代码的开头部分。
每个预处理指令都以 开头，放在⼀⾏的⾏⾸，指令前⾯可以有空⽩字符（⽐如空格或制表符）。 和
# #
指令的其余部分之间也可以有空格，但是为了兼容⽼的编译器，⼀般不留空格。
所有预处理指令都是⼀⾏的，除⾮在⾏尾使⽤反斜杠，将其折⾏。指令结尾处不需要分号。
#define #
是最常⻅的预处理指令，⽤来将指定的词替换成另⼀个词。它的参数分成两个部分，第⼀个参数
#define
就是要被替换的部分，其余参数是替换后的内容。每条替换规则，称为⼀个宏（macro）。
#define MAX 100
上⾯示例中， 指定将源码⾥⾯的 ，全部替换成 。 就称为⼀个宏。
#define MAX 100 MAX
宏的名称不允许有空格，⽽且必须遵守 C 语⾔的变量命名规则，只能使⽤字⺟、数字与下划线（ ），且
_
⾸字符不能是数字。
宏是原样替换，指定什么内容，就⼀模⼀样替换成什么内容。
#define HELLO "Hello, world"
printf("%s", HELLO);
上⾯示例中，宏 会被原样替换成 。
HELLO "Hello, world"
指令可以出现在源码⽂件的任何地⽅，从指令出现的地⽅到该⽂件末尾都有效。习惯上，会将
#define
放在源码⽂件的头部。它的主要好处是，会使得程序的可读性更好，也更容易修改。
#define
指令从 开始，⼀直到换⾏符为⽌。如果整条指令过⻓，可以在折⾏处使⽤反斜杠，延续到下⼀
#define #
⾏。
#define OW "C programming language is invented \
in 1970s."
上⾯示例中，第⼀⾏结尾的反斜杠将 指令拆成两⾏。
#define
允许多重替换，即⼀个宏可以包含另⼀个宏。
#define
#define TWO 2
#define FOUR TWO*TWO
上⾯示例中， 会被替换成 。
FOUR 2*2
注意，如果宏出现在字符串⾥⾯（即出现在双引号中），或者是其他标识符的⼀部分，就会失效，并不会
发⽣替换。
#define TWO 2
printf("TWO\n");
const TWOs = 22;
printf("%d\n", TWOs);
上⾯示例中，双引号⾥⾯的 ，以及标识符 ，都不会被替换。
TWO TWOs
同名的宏可以重复定义，只要定义是相同的，就没有问题。如果定义不同，就会报错。
#define FOO hello
#define FOO hello
#define BAR hello
#define BAR world
上⾯示例中，宏 没有变化，所以可以重复定义，宏 发⽣了变化，就报错了。
FOO BAR
带参数的宏 #
基本⽤法 #
宏的强⼤之处在于，它的名称后⾯可以使⽤括号，指定接受⼀个或多个参数。
#define SQUARE(X) X*X
上⾯示例中，宏 可以接受⼀个参数 ，替换成 。
SQUARE X X*X
注意，宏的名称与左边圆括号之间，不能有空格。
这个宏的⽤法如下。
z = SQUARE(2);
这种写法很像函数，但⼜不是函数，⽽是完全原样的替换，会跟函数有不⼀样的⾏为。
#define SQUARE(X) X*X
printf("%d\n", SQUARE(3 + 4));
上⾯示例中， 如果是函数，输出的应该是 49（ ）；宏是原样替换，所以替换成
SQUARE(3 + 4) 7*7 3 +
，最后输出 19。
4*3 + 4
可以看到，原样替换可能导致意料之外的⾏为。解决办法就是在定义宏的时候，尽量多使⽤圆括号，这样
可以避免很多意外。
#define SQUARE(X) ((X) * (X))
上⾯示例中， 替换后的形式，有两层圆括号，就可以避免很多错误的发⽣。
SQUARE(X)
宏的参数也可以是空的。
#define getchar() getc(stdin)
上⾯示例中，宏 的参数就是空的。这种情况其实可以省略圆括号，但是加上了，会让它看上去
getchar()
更像函数。
⼀般来说，带参数的宏都是⼀⾏的。下⾯是两个例⼦。
#define MAX(x, y) ((x)>(y)?(x):(y))
#define IS_EVEN(n) ((n)%2==0)
如果宏的⻓度过⻓，可以使⽤反斜杠（ ）折⾏，将宏写成多⾏。
\
#define PRINT_NUMS_TO_PRODUCT(a, b) { \
int product = (a) * (b); \
for (int i = 0; i 
#include "foo.h"
形式⼀，⽂件名写在尖括号⾥⾯，表示该⽂件是系统提供的，通常是标准库的库⽂件，不需要写路径。因
为编译器会到系统指定的安装⽬录⾥⾯，去寻找这些⽂件。
形式⼆，⽂件名写在双引号⾥⾯，表示该⽂件由⽤户提供，具体的路径取决于编译器的设置，可能是当前
⽬录，也可能是项⽬的⼯作⽬录。如果所要包含的⽂件在其他位置，就需要指定路径，下⾯是⼀个例⼦。
#include "/usr/local/lib/foo.h"
GCC 编译器的 参数，也可以⽤来指定 命令中⽤户⽂件的加载路径。
-I include
$ gcc -Iinclude/ -o code code.c
上⾯命令中， 指定从当前⽬录的 ⼦⽬录⾥⾯，加载⽤户⾃⼰的⽂件。
-Iinclude/ include
最常⻅的⽤途，就是⽤来加载包含函数原型的头⽂件（后缀名为 ），参⻅《多⽂件编译》⼀
#include .h
章。多个 指令的顺序⽆关紧要，多次包含同⼀个头⽂件也是合法的。
#include
#if...#endif #
指令⽤于预处理器的条件判断，满⾜条件时，内部的⾏会被编译，否则就被编译器忽略。
#if...#endif
#if 0
const double pi = 3.1415;
#endif
上⾯示例中， 后⾯的 ，表示判断条件不成⽴。所以，内部的变量定义语句会被编译器忽略。
#if 0 #if
这种写法常⽤来当作注释使⽤，不需要的代码就放在 ⾥⾯。
0 #if 0
后⾯的判断条件，通常是⼀个表达式。如果表达式的值不等于 ，就表示判断条件为真，编译内部的
#if 0
语句；如果表达式的值等于 0，表示判断条件为伪，则忽略内部的语句。
之间还可以加⼊ 指令，⽤于指定判断条件不成⽴时，需要编译的语句。
#if...#end #else
#define FOO 1
#if FOO
printf("defined\n");
#else
printf("not defined\n");
#endif
上⾯示例中，宏 如果定义过，会被替换成 ，从⽽输出 ，否则输出 。
FOO 1 defined not defined
如果有多个判断条件，还可以加⼊ 命令。
#elif
#if HAPPY_FACTOR == 0
printf("I'm not happy!\n");
#elif HAPPY_FACTOR == 1
printf("I'm just regular\n");
#else
printf("I'm extra happy!\n");
#endif
上⾯示例中，通过 指定了第⼆重判断。注意， 的位置必须在 之前。如果多个判断条件
#elif #elif #else
皆不满⾜，则执⾏ 的部分。
#else
没有定义过的宏，等同于 。因此如果 是⼀个没有定义过的宏，那么 为伪，⽽
0 UNDEFINED #if UNDEFINED
为真。
#if !UNDEFINED
的常⻅应⽤就是打开（或关闭）调试模式。
#if
#define DEBUG 1
#if DEBUG
printf("value of i : %d\n", i);
printf("value of j : %d\n", j);
#endif
上⾯示例中，通过将 设为 ，就打开了调试模式，可以输出调试信息。
DEBUG 1
GCC 的 参数可以在编译时指定宏的值，因此可以很⽅便地打开调试开关。
-D
$ gcc -DDEBUG=1 foo.c
上⾯示例中， 参数指定宏 为 ，相当于在代码中指定 。
-D DEBUG 1 #define DEBUG 1
#ifdef...#endif #
指令⽤于判断某个宏是否定义过。
#ifdef...#endif
有时源码⽂件可能会重复加载某个库，为了避免这种情况，可以在库⽂件⾥使⽤ 定义⼀个空的
#define
宏。通过这个宏，判断库⽂件是否被加载了。
#define EXTRA_HAPPY
上⾯示例中， 就是⼀个空的宏。
EXTRA_HAPPY
然后，源码⽂件使⽤ 检查这个宏是否定义过。
#ifdef...#endif
#ifdef EXTRA_HAPPY
printf("I'm extra happy!\n");