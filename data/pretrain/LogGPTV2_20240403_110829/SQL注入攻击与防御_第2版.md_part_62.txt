·（-d（4)？：准确匹配可能存在（出现）或完全不存在（未出现）的破折号字符加4位数字。
·S：出现在字符串末尾。如果字符串末尾包含附加的内容，正则表达式将不匹配。
一般来说，在这两种输入验证方法中，白名单验证的功能更强大些。不过，对于存在复杂
输入的情况，或者当难以确定所有可能的输入集合时，白名单验证实现起来会比较困难。这样
的例子包括使用带大字符集（例如，像中文和日文字符集这样的Unicode字符）的语言来实现本
地化的应用。建议尽可能使用白名单验证，然后结合使用其他控制手段（比如输出编码）来保证
后面在其他位置(比如向数据库)提交的信息得到正确处理。
攻击与陷阱
设计输入验证和处理策略
输入验证是一种在保证应用程序安全方面很有用的工具，不过，它只能作为深度防
御策略（包含多个防御层以保证应用程序的总体安全）的一个子部分。下面是一个输入验
证和处理策略的例子，它利用了本章介绍的一些解决方案：
·在应用程序输入层使用白名单输入验证以便验证所有用户输入都符合应用要接
收的内容，应用只允许接收符合期望格式的输入。
·在客户端浏览器上同样执行白名单输入验证，这样可以防止为用户输入不可接
收的数据时服务器和浏览器间的往返传递，不能将该操作作为安全控制手段，
因为攻击者可以修改来自用户浏览器的所有数据。
·在Web应用防火墙（WAF）层使用黑名单和白名单输入验证（以漏洞“签名"和“有
经验”行为的形式）以便提供入侵检测/阻止功能和监视应用攻击。
·在应用程序中自始自终地使用参数化语句以保证执行安全的SQL执行。
·在数据库中使用编码技术以便在动态SQL中使用输入时安全地对其编码。
·在使用从数据库中提取的数据之前恰当地对其进行编码，例如，将测览器中显
示的数据针对跨站脚本进行编码。
---
## Page 319
第8章代码层防御
1.用已知值进行检验
将输入值与一个有效值的列表进行比较，如果输入值不在列表中，就拒绝该输入，这是一
种强大但常常未被充分利用的检验输入值的方法。通过将值与一个列表进行比较，可以完全控
制可能的输入值以及输入可能通过的代码路径。
在前面讨论参数化语句时已经介绍过，SQL语句中的某些元素是无法参数化的一特别是
SQL的标识符和关键字。例如根据某个列对查询结果进行排序，该列的列名就无法参数化（它
是一个SQL标识符）。我们需要做的是确保这个值包含了一个有效的列名，而不是将来自用户
的未消毒的值直接漆加到SQL语句中。
在使用MySQL时，如果想查看列名，可以先运行一条语句，从当前数据库的指定表中检
索所有列的列名。可以像第4章介绍的那样使用一条SELECT语句，世可以使用DESCRIBE：
describe usezname
该语句将返回有效列的一个列表，还包括了它们的数据类型和默认值：
1Field
1  Type
1 Nul1 1 Key 1  Default 1Extra
+
1int (11)
1NO 
1id
1PRI 1 NULL
Iauto_increment
Iusername
S3X1 (0s) xeuoxeA 1 e
1
1NULL
1password 11
varchar (50) 1 YES
1NULL
现在我们获得了所有可能的列名，可以使用这些列名对输入值进行检验。为了避免每次都
执行两个查询，可以将该结果缓存在应用程序中。
如果正在对数据库编写语句，也可以使用这一概念，考虑下面Oracle查询的例子：
open c_data FOR sqlstmt;
这样的语句显然对于SQL注入是没有保护的，比如searchparam、orderby和sortorder参数
都可以被注入利用，从面改变查询的功能。就searchparam参数而言，可以按照本章前面讨论
过的方法对其参数化，但是orderby参数是一个 SQL标识符，而 sortorder参数则是一个 SQL
关键字。为了解决这一同题，可以在数据库端使用函数来检查提供的参数值是否有效。下面儿
个示例函数演示了儿种不同类型的已知值检验，在第一个例子中，使用了Oracle的decodeO命
令，用一个可能值的列表对sortorder参数进行了检验：
FUNCTIoN get_sort_order (in_sort_order VARCHAR2)
RETURN VARCHAR2
IS
v_sort_order varchar2 (10):= *ASC*;
BEGIN
IF in_sort_order IS NOT NULL THEN
select
decode (upper (in_sort_order), *ASC′, 'ASC', 'DESc′, 'DEsc′, *ASC′ INTO
xepxo1x08A
305
---
## Page 320
SQL注入攻击与防御（第2版）
from dua1;
END IF;
return v_sort_order;
fGN3
在第二个例子中，通过对表中的列执行一次查找，检验了提供的列名（orderby）是否有效，
并检验了该列名是否存在于指定的表中：
FUNCTION get_ordez_by (in_table_name VARCHAR2, in_column_name VARCHAR2,
I.n_de fau1 t_column_name VARCHAR2)
RETURN VARCHAR2
SI
v_count NUMBER;
BEGIN
SELECT COUNT (*) INTO v_count
FROM ALL_TAB_COLUMNS WHERE
LOWER (COLUMN_NAME) =LOWER (in_co1umn_name) and
LOWER (TABLE_NAME) =LOWER (in_table_name) ;
IF v_count=0 THEN
return in_default_column_name
3ST3
return in_column_name;
I GN3
EXCEPTION WHEN OTHERS THEN
return in_default_name;
END/
间接输入（inputindirection）是另一种用已知值进行检验的方法。在这种方法中，服务器端
并不接收直接来自客户端的值，客户端呈现一个允许值的列表，并向服务器端提交选中值的索
引。例如，在一个银行业务的应用程序中，可以向用户显示一个有效账号的列表，但是当把账
号信息提交给后台程序时，浏览器只提交列表中选中账号的索引，在服务器端，将使用该索引
查询出真正的账号，并使用该账号来创建查询。由于列表中仅包含了有效的值，因此在构建
SQL语句时可以信任该账号。然面，如果可以操纵提交的索引值，就可能对业务逻辑操作符和
功能带来无法预料的影响。因此当采用该方法时须谨慎。
8.5.2黑名单
黑名单验证是只拒绝已记录在案的不良输入的操作，它通过测览输入的内容来查找是否存
在已知的不良字符、字符串或模式。如果输入中包含这些众所周知的恶意内容，黑名单验证通
常会拒绝它。一般来说，这种方法的功能比白名单验证要弱一些，因为潜在的不良字符列表非
常大，这可能会导致不良内容列表很大，检索起来比较慢且不完全，而且很难及时更新这些
列表。
实现黑名单验证的常用方法也是使用正则表达式，附加一个禁止使用的字符或字符串列
表，如下所示：
dx1a11\11+11\1+\/1|181
一般来说，不应该孤立地使用黑名单，面应该尽可能地使用白名单。不过，对于无法使用
306
---
## Page 321
第8章代码层防御
白名单的情况，仍然可以使用黑名单来提供有用的局部控制手段。不过，对于这种情况，建议
在使用黑名单的同时结合使用输出编码以保证对传递到其他位置（比如，传递给数据库）的输入
进行附加检查，从而保证能正确地处理该输入以防止SQL注入。
损害与防御.
输入验证失败时怎么办？
主要有两种方法：要么恢复并继续，要么操作失败并报告一个错误，每种方法都有
自己的优点和缺点：
恢复：从输入验证失败中恢复意味着可以审查或修复输入，即可以通过编程方式来
解决引发验证失败的问题，如果采用黑名单方法进行输入验证，那么恢复通常是可行的，
通常采用从输入中清除不良字符的方法。这种方法的主要缺点是：要保证过滤操作或清
除值的操作确实审查了输入，而不是掩盖了恶意输入，后者仍然会导致SQL注入问题。
失败：操作失败会导致产生安全错误，并可能重定向到一个通用的错误页面，该页
面告诉用户应用遇到了问题，无法继续进行操作，这种方法通常更安全，但仍然需要非
常小心，确保未将与特定错误相关的信息展示给用户，因为这些信息能帮助攻击者判断
输入中正在被验证的内容，这种方法的主要缺点是：用户体验会被打断，正在处理的业
务可能丢失，可以通过在客户端浏览器上执行附加的输入验证来缓和这一问题。确保真
正的用户不会提交无效的数据，不能将这种做法作为控制子投，因为恶意用户可以修改
最终提交给站点的内容。
不管选用哪种方法，都请确保在应用程序日志中登记了发生的每一个输入验证错
误，这对于检查真正的或意图润入应用程序的行为来说是很有价值的资源。
8.5.3Java中的输入验证
Java中的输入验证支持专属于正在使用的框架。为了展示Java中的输入验证，我们将查
看一种常见的用于构建 Web 应用(使用Java)的框架(Java Server Faces，JSF)是如何对输入验证提
供支持的。要实现该目的，最好的方法是定义一个输入验证类，该类实现了javax.faces.validator
Validator接口。请参考下列代码片段并将其作为验证JSF中用户名的例子：
public class UsernameValidator implements Validator (
public void validate (FacesContext facesContext,
UIComponent uIComponent, Object value) throvs ValidatorException
//获取用户名并转换为一个字符串
rantea (butzas) - eweuxesn butaas
7/建立正则表达式
Pattern p = Pattern.compile("^[a-zA-z] (8, 12}$") ;
//匹配用户名
Katcher m = p.matcher (username) /
if (!matchFound)(
FacesMessage message = nev FacesMessage () /
message.setDetai1(*Not valid - it must be 812 letter only");
307
---
## Page 322
SQL注入攻击与防御（第2版）
message.setSummary(*Username not valid*) ;
message ,setSeverity (FacesMessage .SEVERITY_ERROR) /
throw new ValidatorException (message) :
需要将下列内容添加到faces-config.xml文件中以便启用上述验证器：
namespace, UsernameValidator
namespace.package.UsernameValidator
接下来可以在相关的JSP文件中引用在faces-config.xml文件中添加的内容，如下所示：
在Java中实现输入验证时，还有一种很有用的资源—OWASP ESAPI(Enterprise Security
API)，可以从www.owasp.org/index.php/ESAPI上下载。ESAPI是一种可免费使用的参考资料，
它实现了与安全相关的方法，可以通过这些方法来构建安全的应用。这包括org.owasp.csapi
reference.DefaultValidator输入验证类的实现，可以直接使用它，也可以将它作为自定义输入验
证引擎的参考实现。
8.5.4.NET中的输入验证
ExpressionValidator控件和 CustomValidator控件。在ASP.NET应用中使用这些控件会带来额外
的好处，它们同样执行客户端验证。此外，当用户确实输入了错误的输入时它们还能改进用户
的体验。下列代码是使用RegularExpressionValidator验证用户名的例子，用户名中只能包含字
母（大写和小写）并且总长度必须介于8到12个字符之间。
接下来的代码片段是使用CustomValidator验证口令是否为正确格式的例子。本例中同样
需要创建两个用户定义函数：PwdValidate位于服务器上，负责对口令值进行验证：ClientPwd-
Validate位于客户端的JavaScript或VBScript中，负责对用户浏览器上的口令值进行验证。
(input)：检查输入是否为，例如 is_numeric0。
·strlen(input)：检查输入的长度。
使用preg_match验证表单参数的例子如下所示：
f[,oweuxesn,]sods = eueuxesng