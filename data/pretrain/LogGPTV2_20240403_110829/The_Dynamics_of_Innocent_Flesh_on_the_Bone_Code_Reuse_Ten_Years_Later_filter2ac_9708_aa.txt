title:The Dynamics of Innocent Flesh on the Bone: Code Reuse Ten Years Later
author:Victor van der Veen and
Dennis Andriesse and
Manolis Stamatogiannakis and
Xi Chen and
Herbert Bos and
Cristiano Giuffrida
The Dynamics of Innocent Flesh on the Bone:
Code Reuse Ten Years Later
Victor van der Veen
Vrije Universiteit Amsterdam
PI:EMAIL
Dennis Andriesse
Vrije Universiteit Amsterdam
PI:EMAIL
Vrije Universiteit Amsterdam;
Xi Chen
Microsoft
PI:EMAIL
Herbert Bos
Vrije Universiteit Amsterdam
PI:EMAIL
Manolis Stamatogiannakis
Vrije Universiteit Amsterdam
PI:EMAIL
Cristiano Giuffrida
Vrije Universiteit Amsterdam
PI:EMAIL
ABSTRACT
In 2007, Shacham published a seminal paper on Return-Oriented
Programming (ROP), the first systematic formulation of code reuse.
The paper has been highly influential, profoundly shaping the way
we still think about code reuse today: an attacker analyzes the “ge-
ometry” of victim binary code to locate gadgets and chains these
to craft an exploit. This model has spurred much research, with a
rapid progression of increasingly sophisticated code reuse attacks
and defenses over time. After ten years, the common perception
is that state-of-the-art code reuse defenses are effective in signifi-
cantly raising the bar and making attacks exceedingly hard.
In this paper, we challenge this perception and show that an at-
tacker going beyond “geometry” (static analysis) and considering
the “dynamics” (dynamic analysis) of a victim program can easily
find function call gadgets even in the presence of state-of-the-art
code-reuse defenses. To support our claims, we present Newton, a
run-time gadget-discovery framework based on constraint-driven
dynamic taint analysis. Newton can model a broad range of de-
fenses by mapping their properties into simple, stackable, reusable
constraints, and automatically generate gadgets that comply with
these constraints. Using Newton, we systematically map and com-
pare state-of-the-art defenses, demonstrating that even simple in-
teractions with popular server programs are adequate for finding
gadgets for all state-of-the-art code-reuse defenses. We conclude
with an nginx case study, which shows that a Newton-enabled
attacker can craft attacks which comply with the restrictions of
advanced defenses, such as CPI and context-sensitive CFI.
1 INTRODUCTION
Ever since the advent of Return-Oriented Programming (ROP) [62],
a substantial amount of research has explored code reuse attacks
in depth. Starting from a relatively simple scheme where return
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full cita-
tion on the first page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
CCS’17, Oct. 30–Nov. 3, 2017, Dallas, TX, USA
© 2017 Association for Computing Machinery.
ACM ISBN 978-1-4503-4946-8/17/10...$15.00
https://doi.org/http://dx.doi.org/10.1145/3133956.3134026
instructions served to link together snippets of existing code (gad-
gets), the code reuse concept was quickly generalized to include for-
ward edges such as indirect calls and jumps [9, 59], and even signal
handling [10]. Not surprisingly, defenses kept pace with the attack
techniques, and a myriad of increasingly advanced attacks [13, 27,
32, 58] was met by equally advanced defenses. Some of these de-
fenses work by constraining control transfers to a specific set of
legal flows [1, 66–68], while others complicate attacks by making
it difficult to find reusable code snippets [3, 4, 7, 12, 19, 20, 45, 65].
Yet other defenses protect a program by ensuring the integrity of
code pointers [43, 46, 47].
In principle, exploitation may still be possible even in the pres-
ence of these defenses; for instance, through implementation is-
sues [14, 26]. However, in practice, code-reuse attacks on a system
with state-of-the-art defenses are extremely challenging. Such at-
tacks require an attacker to analyse the protected program to find
available defense-specific gadgets that can be used to implement
the desired malicious payload. Crucially, the literature on code
reuse attacks has thus far focused on the threat model introduced
in Shacham’s original work on ROP [62], which is based on (man-
ual or automatic) static analysis. This is an important observation,
because modern defenses reduce the set of available gadgets to the
point that finding a sufficient set of gadgets for an exploit stretches
the abilities of even the most advanced static analysis techniques.
In this paper, we introduce a novel approach for constructing code
reuse attacks even in the presence of modern defenses. The key in-
sight is that the required analysis effort to construct an attack can
be greatly reduced and scale across a broad range of defenses by
using dynamic analysis techniques instead of only static analysis.
Static flesh on the bone. The original paper introducing
Return-Oriented Programming appeared at CCS exactly 10 years
ago [62], and demonstrated the first general formulation of a code-
reuse attack. With ROP, an attacker would use static analysis to
scan the binary for useful snippets of code that ended with a re-
turn instruction. Out of these code snippets, known as gadgets, the
attacker would construct a malicious payload and link them by
means of the return instructions at the end of the gadgets. By in-
jecting the appropriate return addresses on the stack of a vulnera-
ble program, an attacker could craft arbitrary functionality.
All code-reuse techniques since have followed this same basic
approach—using static analysis to first identify which gadgets are
available, and then constructing a malicious payload out of them.
Session H2:  Code Reuse AttacksCCS’17, October 30-November 3, 2017, Dallas, TX, USA1675This is true even for advanced exploitation that performs such anal-
ysis “just in time” [63].
Modern code-reuse defenses push such attacks to their limits
and the analysis required to bypass them is now highly sophis-
ticated [58, 59]. In the absence of implementation errors or side
channels, an attacker would be hard-pressed to locate the gadgets,
let alone stitch them together. In other words, state-of-the-art de-
fenses have been successful in raising the bar: they may not stop
all possible attacks, but they make them exceedingly difficult.
Beyond static analysis. The key assumption for the effective-
ness of current defenses is that future attacks follow essentially the
same—static analysis-based—approach as proposed by Shacham in
2007. In this paper, we challenge this assumption, demonstrating
that a switch of attack tactics to include dynamic analysis renders
current defenses far less effective and attacks far less laborious. In
reality, attackers do not care about gadgets or ROP chains—all they
want is to execute a sensitive call such as execve or mprotect
with arguments they control. There is no reason to assume that
they would limit themselves to static analysis.
The goal of modern defenses is to prevent attackers from sub-
verting a program’s control flow to reach a desired target, even if
an attacker is able to read or write arbitrary data. The question that
the attackers must answer is which memory values they should
modify to gain control over the program. Ideally, they would an-
swer this question without resorting to complex static analysis.
The key insight in this paper is that we can model such an at-
tacker’s capabilities by means of dynamic taint analysis. In partic-
ular, we taint all bytes that an attacker can modify with a unique
color and then track the flow of taint until we reach code that,
given the right values for the tainted bytes, allows the attacker to
launch a code-reuse attack. For instance, if a tainted code pointer
and a tainted integer later flow into an indirect call target and its ar-
gument (respectively), we have concrete evidence that the attacker
can fully control a particular call instruction “gadget”. Shacham’s
original static analysis tool is named Galileo, a play on its use of
“geometry”. Since our approach is largely based on dynamic (“dy-
namics”) rather than static (“geometry”) analysis, we refer to our
gadget-discovery framework as Newton.
As we shall see, our approach requires an attacker to simply
run the victim process with Newton’s dynamic analysis enabled.
Moreover, our approach can easily emulate common constraints
imposed by modern defenses against code reuse. Depending on
the defense, we may be able to corrupt some locations (but not
others) and target some functions (but not others). As detailed later,
we can map these per-defense restrictions to simple and stackable
constraints (e.g., tainting policies) for our analysis. Moreover, an
attacker may model such constraints once and reuse them across
a wide variety of defenses and victim applications.
Contributions. Our contributions are the following:
(cid:15) We show that a hybrid static/dynamic attacker model sig-
nificantly lowers the bar for mounting code-reuse attacks
against state-of-the-art defenses.
(cid:15) We implement Newton, a novel framework for generat-
ing low-effort code-reuse attacks using constraint-driven
dynamic taint analysis.
(cid:15) We evaluate and compare existing defenses against code
reuse, highlighting their respective strengths and weak-
nesses using constraints in Newton.
(cid:15) We present an nginx case study to demonstrate how to
use Newton to craft code reuse attacks against advanced
defenses, such as secure implementations of CPI [43] and
context-sensitive CFI [67].
2 THREAT MODEL
We consider a code-reuse attacker armed with arbitrary memory
read and write primitives based on memory corruption vulner-
abilities (e.g., CVE-2013-2028 for nginx and CVE-2014-0226 for
Apache), similarly to recent work [19, 46, 52, 58, 61]. We focus
on a low-effort attacker, relying on such primitives and automatic
gadget-discovery tools to craft attacks with limited application
knowledge. Our attacker seeks to locate gadgets and mount code-
reuse attacks, even in the face of state-of-the-art defenses such as
Control-Flow Integrity (CFI) [66–68], leakage-resistant code ran-
domization [12, 19], and Code-Pointer Integrity (CPI) [43]. We fo-
cus specifically on lightweight code-reuse defenses and leave more
general heavyweight defenses such as memory safety [48, 49] or
Multi-Variant Execution (MVX) [41, 69] out of scope.
Given the overwhelming number of code-reuse defenses in the
literature, we limit our analysis to only (1) defenses applicable to
general programs (e.g., no vtable protection for C++ programs [66]),
(2) the strongest designs in each class (i.e., effectiveness against
weaker defenses is implied), and (3) the secure implementation of
such designs (e.g., no side-channel [26, 52] or weak-context [14] by-
passes). We also assume a strong baseline with ASLR [55], DEP [2],
a perfect shadow stack [21] (making it impossible to divert control-
flow by modifying return addresses), and coarse-grained forward-
edge CFI [75] (callsites can only target function entry points) en-
abled.
We assume that the attacker has access to a binary equivalent to
the one deployed by his prospective victim. Finally, for simplicity,
we focus specifically on popular server programs, similar to much
prior work in the area [8, 46, 51, 52, 58, 61, 67, 68].
3 OVERVIEW OF CODE-REUSE DEFENSES
In this section, we provide an overview of state-of-the-art code-
reuse defenses considered in our threat model. We distinguish four
classes of code-reuse defenses: (1) Control-Flow Integrity, (2) Infor-
mation Hiding, (3) Re-randomization, and (4) Pointer Integrity. We
now introduce each of these classes in turn, and later show how to
map them to Newton constraints in §5.
Control-Flow Integrity. The idea of (forward-edge) Control-
Flow Integrity (CFI) is to mitigate code-reuse attacks by instru-
menting indirect callsites to ensure that only legal targets allowed
by the (inter-procedural) Control Flow Graph (CFG) of the pro-
gram are permitted [1]. To determine the targets for each callsite,
modern CFI solutions use either static or dynamic information.
CFI solutions that rely only on static information either allow
callsites to target all function entry points [74, 75] or, more recently,
construct the set of legal targets by mapping callsite types to target
function types. In other words, a callsite of the form foo(struct
bar *p) should only call functions of type func(struct bar
Session H2:  Code Reuse AttacksCCS’17, October 30-November 3, 2017, Dallas, TX, USA1676*p). In particular, IFCC [66] and MCFI [50] construct such map-
pings using source type information, while TypeArmor [68] ap-
proximates types based on argument count at the binary level.
CFI solutions that rely on dynamic information track execu-
tion state to improve the accuracy of static analysis. In particular,
PICFI [51] implements a "history-based CFI" (HCFI) policy, restrict-
ing the target set to function targets whose address has been com-
puted at runtime. Context-sensitive CFI (CsCFI) solutions (or simi-
lar, with different definitions of “context”) such as PathArmor [67],
GRIFFIN [28], FlowGuard [44], kBouncer [54], and ROPecker [16]
restrict the target set based on analysis of the last n branches
recorded by hardware, e.g., the Last Branch Record (LBR) regis-
ters or Intel PT. The effectiveness depends on the amount of useful
“context” in the branch history, which is necessarily limited in prac-
tical implementations: 16 or 32 LBR entries [16, 54, 67], 30 Intel PT
packets [44], or a limited policy matrix [28].
Information Hiding. Information hiding (IH) aims to prevent
code reuse by making the locations of gadgets unknown to an at-
tacker. This is done by (1) diversifying the code layout using tradi-
tional Address-Space Layout Randomization (ASLR) [55] or more
fine-grained variants [4–6, 12, 15, 17–20, 29, 31, 35, 36, 40, 42, 53,
64, 71] and (2) "hiding" code pointers to an arbitrary memory read-
enabled attacker. The latter property is enforced in different ways
by different leakage-resistant randomization solutions.
Oxymoron [4] removes all the code references from the code,
preventing an attacker reading any given code page from gather-
ing new code pointers that reveal the location of other code pages.
Other solutions such as Readactor [19], software-based XnR [3],
HideM [30], LR2 [12], KHide [29], kRˆX [56], Heisenbyte [65], and
NEAR [72] implement eXecute-Only Memory (XoM) or similar se-
mantics for code pages, preventing an attacker from reading useful
gadgets from the code and thus fully "hiding" the code layout (in
the ideal case). Finally, recent solutions such as Readactor++ [20]
and CodeArmor [15] extend XoM semantics (XoM++) to also hide
code pointer tables such as the Global Offset Table (GOT).
Re-randomization. Re-randomization (RR) is another popular
defense strategy against code reuse attacks. Unlike information
hiding, re-randomization solutions seek to re-randomize and inval-
idate leaked information (ideally) before the attacker has a chance
to use it and craft just-in-time code reuse attacks [63]. Existing so-
lutions can be classified based on the particular information they
periodically re-randomize during the execution.
A number of RR solutions such as Shuffler [73], CodeArmor [15],
and ReRanz [70] periodically re-randomize the code layout (CodeRR)
but leave the function pointer values stored in data pages (heap,
stack, etc.) immutable using indirection tables. In contrast, TASR [7]
re-randomizes each code pointer value in memory every time the
corresponding code target is re-randomized. Finally, other solu-
tions such as ASR3 [31] and RuntimeASLR [45] re-randomize the
full memory address space layout, including the values of code and
data pointers at each re-randomization period.
Pointer Integrity. Pointer integrity (PI) solutions seek to counter
code reuse by preventing attackers from tampering with code or
data pointers. Existing solutions can be classified as encryption-
based or isolation-based.
Figure 1: Design of Newton.
ASLRguard [46] is an encryption-based solution that encrypts
each computed code pointer with a per-pointer key in a safe vault,
(ideally) preventing attackers from crafting new code pointers in
memory. In contrast, CCFI [47] encrypts each code pointer stored
into a given memory address with an address-dependent key, also
preventing attackers from reusing leaked code pointers in memory.
CPS [43] is an isolation-based solution that isolates all the code
pointers in a protected safe region, (ideally) preventing an attacker
from reaching and corrupting any of these pointers. CPI [43] ex-
tends CPS to also isolate data pointers that may indirectly be used
by the program to access code pointers, (ideally) preventing an at-
tacker from corrupting code and related data pointers in memory.
4 OVERVIEW OF Newton
We now present Newton, our gadget-discovery framework to as-
sist in crafting code-reuse attacks against arbitrary (modeled) de-
fenses. For this purpose, Newton applies a uniform and black-
box strategy to dynamically retrieve gadgets as a set of attacker-
controllable forward CFG edges. Each edge is expressed as a call-
site with a number of possible target functions, and tagged with
a number of dependencies (e.g., the target function is controlled
by the code pointer stored at address X and the first argument is
controlled by address Y). These edges can then be inspected by an
attacker and used to call arbitrary functions via arbitrary memory
read/write primitives. To call a sequence of arbitrary functions, an
attacker can chain a number of such edges together over multiple
interactions with the victim application.
To easily support a broad range of code-reuse defenses, New-
ton accepts a number of user-defined constraints that limit the
analysis to only gadgets allowed by the given modeled defense.
The key idea is to run the victim program mimicking the stages
of the real attack and constrain Newton’s dynamic gadget anal-
ysis using simple, reusable, and extensible policies that map the
NewtonGadgetsStatic AnalysisConstraint ManagersTarget ConstraintsWrite ConstraintsBinary+LibrariesDynamic AnalysisCommandsCommand ManagerInputMKcallsite0(svc.c:1901):  targets:[sys.c:19, lib.c:78 ...], deps:[fptr:0xdeca..., arg0:0xfbad..., ...]callsiteN(worker.c:111):  targets:[lib.c:20, conn.c:13 ...], deps:[fptr:0xdead..., arg0:0xbeef..., ...]...Session H2:  Code Reuse AttacksCCS’17, October 30-November 3, 2017, Dallas, TX, USA1677security invariants of a broad range of defenses. We discuss the
mapping of defenses to constraints later, in §5.
Figure 1 presents an overview of Newton and its high-level
components. The Newton framework pushes the victim binary
and its shared libraries through a pipeline of (1) static analysis, and
(2) dynamic analysis—on top of a dynamic taint analysis (DTA) en-
gine. During both phases, the target and write constraint managers
apply user-defined constraints to the analysis, eventually yielding
a list of callsites an attacker can control and, for each callsite, a list
of callees an attacker can target under a given defense (or combi-
nation of defenses) regime.
In more detail, the workflow of Newton when analyzing a bi-
nary to craft a code reuse attack is as follows.
(1) At the start of the analysis process, the user starts the target
application binary normally. At this point, Newton is in a
waiting state, and does not yet perform any analysis.
(2) The user now brings the application into a stable state
where they can effect arbitrary memory read/write primi-
tives. In our evaluation, we assume that the user brings the
victim program into a simple quiescent state. For instance,
in the case of a server application, the user would perform
a minimal set of interactions to bring the server into an idle
state with an open connection, where only long-lived data
persists in memory, as in [52]. In general, the chosen quies-
cent state is program-dependent.
(3) Next, the user signals Newton that the victim application
is now in a quiescent state. At this point, Newton begins
tracking user-controlled memory dependencies using its
DTA engine.
(4) At the same time, the user supplies Newton with a number
of commands (in a script) to specify the target and write
constraints that Newton should assume are used to defend
the victim application. As a result, Newton will take these
constraints into account during its analysis of controllable
edges.
(5) The user now interacts with the victim application, using
the inputs they want to use during the final exploit. This al-
lows Newton to track the dependencies during these inter-
actions. Focusing on a low-effort attacker targeting a server
application, we assume that the interactions amount to sim-
ple standard requests to the victim server.
(6) Finally, Newton reports the results of its analysis. This
yields a set of gadgets (callsites+targets) that are under the
user’s control given the user’s chosen defense model, initial
quiescent state and set of server interactions.
4.1 Constraints
As defined by our threat model, our goal as an attacker is to use
an arbitrary memory read/write primitive to divert control flow.
The baseline defenses described in §2 force us to achieve this by
corrupting memory in such a way that later in the execution, the
target of an indirect callsite no longer points to its intended callee.
With this in mind we observe that, conceptually, all existing de-
fenses attempt to avert successful attacks by enforcing constraints
along one (or both) of the following two dimensions:
(1) Write constraints. Write constraints limit an attacker’s ca-
pability to corrupt writable memory. Without any defense
deployed, an attacker can corrupt anything: (1) pointers to
code (function pointers), (2) pointers to data, and (3) non-
pointer values such as integers or strings.
(2) Target constraints. Constraints on targets limit the at-
tacker in his selection for possible callees of a controlled
callsite. Without any target constraints beyond the baseline,
the target set always consists of all functions in the program
and library code. We show later how different defenses and
their constraints reduce the wiggle room for an attacker.
4.2 Write Constraint Manager
The write constraint manager accepts user-defined constraints, de-
scribing the memory regions the attacker is allowed to overwrite
under the modeled defense. Then, using constraint-driven dynamic
taint analysis, it pinpoints callsites and arguments which can still
be controlled by the attacker, despite the assumed defenses. New-
ton’s DTA engine is a heavily modified version of libdft [39]
which supports arbitrary tags per memory location, as well as ad-