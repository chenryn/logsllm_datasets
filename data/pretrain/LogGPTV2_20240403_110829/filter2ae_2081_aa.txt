**作者：Seaer@深信服千里目安全实验室  
原文链接：**
## 1 组件介绍
Apache
Shiro是一个功能强大且易于使用的Java安全框架，功能包括身份验证，授权，加密和会话管理。使用Shiro的API，可以轻松地快速地保护任何应用程序，范围包括小型的移动应用程序到大型的Web和企业应用程序。以下是Shiro的结构图。
Shiro提供了应用安全API(被Shiro框架开发团队成为安全四大基石的Authentication（认证）, Authorization（授权）,
Session Management（会话管理）, Cryptography（加密）)
  * Authentication（认证）： 证明用户身份，通常称之为“登录”。
  * Authorization（授权） ： 访问控制。
  * Cryptography（加密） ： 保护或隐藏数据，防止数据被窃取。
  * Session Management（会话管理） ： 管理每一个用户的会话状态。
在概念层，Shiro 架构包含三个主要的理念：Subject,SecurityManager和 Realm。
  * Subject：当前用户，Subject 可以是一个人，但也可以是第三方服务、守护进程帐户、时钟守护任务或者其它–当前和软件交互的任何事件。
  * SecurityManager：管理所有Subject，SecurityManager 是 Shiro 架构的核心，配合内部安全组件共同组成安全伞。
  * Realms：用于进行权限信息的验证，我们自己实现。Realm 本质上是一个特定的安全 DAO：它封装与数据源连接的细节，得到Shiro 所需的相关的数据。在配置 Shiro 的时候，你必须指定至少一个Realm 来实现认证（authentication）和/或授权（authorization）。
（数据来源：[ZoomEye](https://www.zoomeye.org/))
上图是Shiro组件在国内的使用量统计图。通过网络空间搜索引擎的数据统计，绘制柱状图表。Shiro
在国内有着近5千个的站点分布，其中以浙江、北京、广东等为主要地区。
## 2 高危漏洞介绍
漏洞名称 | 漏洞ID | 影响版本 | CVSS  
---|---|---|---  
Apache Shiro 1.2.4反序列化远程代码执行漏洞 | CVE-2016-4437/SHIRO-550 | Apache Shiro  GetShell
Apache Shiro
1.2.4反序列化远程代码执行漏洞单独使用，即可完成GetShell。此漏洞利用前提是获取AES加密秘钥。一般情况，Shiro组件默认没有被更换，可以直接利用此漏洞。如果出现秘钥被更换，此漏洞需要结合任意文件读取或者任意文件下载，先获取到AES加密秘钥，再进行漏洞利用。
#### 3.2.2 普通权限 -> GetShell
Apache Shiro Padding Oracle Attack
远程代码执行漏洞单独使用，即可完成GetShell。此漏洞利用前提需要获得一个正确的用户Cookie值，利用此漏洞进行GetShell至少要获取一个普通用户权限。
## 4 高可利用漏洞分析
从高危漏洞列表中，针对部分近年高可利用漏洞进行漏洞深入分析。  
Shiro组件漏洞分为两个种类：java反序列化漏洞、身份验证绕过漏洞。本章节重点进行两个类别的漏洞分析。
### 4.1 java反序列化漏洞
**技术背景**
**Java反序列化漏洞原理：** Java
提供了一种对象序列化的机制，该机制中，一个对象可以被表示为一个字节序列，该字节序列包括该对象的数据、有关对象的类型的信息和存储在对象中数据的类型。Java反序列化则是从一个源输入流中读取字节序列，再把它们反序列化为一个对象，并将其返回。Java反序列化漏洞的成因是攻击者通过序列化函数将自己精心构造的恶意对象序列化，将序列化数据发送到目标服务器的反序列化接口，当服务器在没有对序列化数据进行有效的安全验证，直接对序列化数据进行反序列化处理，执行恶意对象中的代码，造成攻击。
**AES加密算法：** 使用Rijndael分组密码算法，属于对称加密。  
AES加密算法涉及4种操作：字节替代（SubBytes）、行移位（ShiftRows）、列混淆（MixColumns）和轮密钥加（AddRoundKey）。  
总体加密流程：
  * 字节替代（SubBytes）  
字节代替的主要功能是通过S盒完成一个字节到另外一个字节的映射。  
解密使用S盒的逆进行还原。  
  * 行移位（ShiftRows）  
行移位是一个4x4的矩阵内部字节之间的置换，用于提供算法的扩散性。  
正向行移位：正向行移位用于加密，其原理图如下。其中：第一行保持不变，第二行循环左移8比特，第三行循环左移16比特，第四行循环左移24比特。  
解密使用逆向行移位：第一行保持不变，第二行循环右移8比特，第三行循环右移16比特，第四行循环右移24比特。  
  * 列混淆（MixColumns）  
将行移位得到的新的4x4矩阵，与另一个矩阵进行左乘运算，更改每一列的数值。
解密时，左乘与之前选取的中间矩阵的互逆矩阵，即可还原。  
  * 轮密钥加（AddRoundKey）  
加密过程中，每轮的输入与轮子密钥异或一次。  
解密过程，由于任何数和自身的异或结果为0，因此，解密时再异或上该轮的轮子密钥即可恢复。
**AES CBC模式**
  * 加密
  * 解密
#### 4.1.1 Apache Shiro 1.2.4反序列化远程代码执行漏洞
**1 漏洞信息**
**1.1 漏洞简介**
  * 漏洞名称：Apache Shiro 1.2.4 Deserialize Remote Code Execution Vulnerability
  * 漏洞编号：CVE-2016-4437
  * 漏洞类型：远程代码执行
  * CVSS评分：【CVSS v2.0：6.8】【CVSS v3.0：8.1】
  * 漏洞危害等级：高危
**1.2 漏洞概述**
Apache Shiro
1.2.5之前的版本在`org.apache.shiro.mgt.AbstractRememberMeManager`中存在AES默认秘钥`kPH+bIxk5D2deZiIxcaaaA==`，开启RememberMe功能的shiro组件将允许远程攻击者构造序列化数据，在目标服务器上执行任意命令。
**1.3 漏洞利用条件**
  * 已知 Shiro AES 解密密钥。
  * 开启RememberMe功能。
**1.4 漏洞影响**
影响版本：  
Apache Shiro 
**2.漏洞复现**
**2.1 环境拓扑**
**2.2 应用协议**
8080/HTTP
**2.3 复现过程**
基于Windows平台，使用`环境`目录下的`shirodemo-1.0-SNAPSHOT.jar`环境，执行`java -jar
shirodemo-1.0-SNAPSHOT.jar`启动环境。效果如图
运行`sniper`工具箱，填写表单信息，输入`ipconfig`命令，点击Attack，效果如图。  
**有回显信息的exp插件**
**无回显信息的exp插件**
**3.漏洞分析**
**3.1 详细分析**
**3.1.1 漏洞利用过程**
使用ysoserial生成存在恶意命令的反序列化payload。使用AES默认秘钥，生成的payload进行`AES/CBC/PKCS5Padding`模式加密，将加密后的结果传入到HTTP头部Cookie字段的rememberMe参数，通过HTTP协议发起请求。
注：由于Shiro重写了resolveClass方法，将原生方法中的forName方法替换为loadClass方法，由于loadClass无法加载数组类型的类，因此存在Transformer[]类的CommonCollections
gadget无法成功利用此漏洞，（例如ysoserial CommonCollections1、CommonCollections3）
**3.1.2 代码分析**
传入的payload首先被服务器接收，并传送给Shiro拦截器处理(org.apache.shiro.web.servlet.OncePerRequestFilter#doFilter方法作为入口)  
调用createSubject方法创建Subject  
在org.apache.shiro.mgt.DefaultSecurityManager#getRememberedIdentity方法调用getRememberedSerializedIdentity方法获取rememberMe认证的序列化数据。  
在此方法中可以获取传入的HTTP请求，响应数据，并解析获取http请求中的cookie字段值(payload所在字段)(base64形式)。
并在后续的程序中进行base64解码，将解码后的byte流存储在decoded变量中，作为后续进行AES解密的密文。  
返回的密文数据流将会在org.apache.shiro.crypto.JcaCipherService#decrypt方法中完成AES解密操作。  
获得的AES解密后的明文将在org.apache.shiro.web.mgt.AbstractRememberMeManager#deserialize方法中反序列化，执行其中的恶意代码。  
**3.1.3 漏洞触发过程**
**3.1.4补丁分析**
对比Shiro
1.2.4与1.2.5版本的改动，在org.apache.shiro.mgt.AbstractRememberMeManager类中声明秘钥的方式，从原来的硬编码更改为自动生成秘钥。  
新版本中调用generateNewKey方法进行秘钥生成，通过传入秘钥长度，根据传入的长度参数，返回对应长度的随机秘钥。  
由于秘钥的随机性，使攻击者无法轻易的通过使用秘钥加密恶意序列化数据的方式进行攻击，从而修复了此漏洞。
#### 4.1.2 Apache Shiro Padding Oracle Attack 远程代码执行漏洞
**1.漏洞信息**
**1.1 漏洞简介**
  * 漏洞名称：Apache Shiro Padding Oracle Attack Remote Code Execution Vulnerability
  * 漏洞编号：CVE-2019-12422
  * 漏洞类型：远程代码执行
  * CVSS评分：【CVSS v2.0：5.0】【CVSS v3.1：7.5】
  * 漏洞危害等级：高危
**1.2 漏洞概述**
Apache Shiro
1.4.2之前的版本默认使用AES/CBC/PKCS5Padding模式加密,开启RememberMe功能的Shiro组件将允许远程攻击者构造序列化数据，通过Padding
Oracle Attack进行爆破，即使在秘钥未知的条件下，也可以在目标服务器上执行任意命令。
**1.3 漏洞利用条件**
  * 使用AES CBC模式。
  * 开启RememberMe功能。
  * 密文可控。
  * 获取到正常Cookie。
**1.4 漏洞影响**