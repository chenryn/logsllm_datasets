System (5GS); Stage 3 (Release 16). Technical spec-
iﬁcation, 3rd Generation Partnership Project (3GPP);
Technical Speciﬁcation Group Core Network and Ter-
minals, July 2020.
[19] TS 33.102: 3G Security Security Architecture (Release
16). Technical speciﬁcation, 3rd Generation Partnership
Project (3GPP); Technical Speciﬁcation Group Services
and System Aspects (SA3), July 2020.
[20] TS 33.501: Security architecture and procedures fo 5G
System (Release 16). Technical speciﬁcation, 3rd Gen-
eration Partnership Project (3GPP); Technical Speciﬁ-
cation Group Services and System Aspects (SA3), July
2020.
[21] Erdem Alkim, Léo Ducas, Thomas Pöppelmann, and
Peter Schwabe. Post-quantum key exchange - A new
hope. In 25th USENIX Security Symposium, USENIX
Security 16, pages 327–343, 2016.
[22] Myrto Arapinis, Loretta Ilaria Mancini, Eike Ritter,
Mark Ryan, Nico Golde, Kevin Redon, and Ravishankar
Borgaonkar. New privacy issues in mobile telephony: ﬁx
and veriﬁcation. In the ACM Conference on Computer
and Communications Security, CCS’12, pages 205–216.
[23] Jari Arkko, Karl Norrman, Mats Näslund, and Bengt
A USIM compatible 5g AKA protocol
Sahlin.
In 2015 IEEE Trust-
with perfect forward secrecy.
Com/BigDataSE/ISPA, Helsinki, Finland, August 20-22,
2015, Volume 1, pages 1205–1209.
[24] David A. Basin, Jannik Dreier, Lucca Hirschi, Sasa
Radomirovic, Ralf Sasse, and Vincent Stettler. A for-
mal analysis of 5g authentication. In Proceedings of
the 2018 ACM SIGSAC Conference on Computer and
Communications Security, CCS 2018, pages 1383–1396.
[25] David A. Basin, Jannik Dreier, and Ralf Sasse. Auto-
mated symbolic proofs of observational equivalence. In
Proceedings of the 22nd ACM SIGSAC Conference on
Computer and Communications Security, pages 1144–
1155, 2015.
[27] Ravishankar Borgaonkar, Lucca Hirshi, Shinjo Park,
Altaf Shaik, Andrew Martin, and Jean-Pierre Seifert.
New Adventures in Spying 3G & 4G Users: Locate,
Track, Monitor. Black hat usa, 2017.
[28] Joppe W. Bos, Craig Costello, Léo Ducas, Ilya Mironov,
Michael Naehrig, Valeria Nikolaenko, Ananth Raghu-
nathan, and Douglas Stebila. Frodo: Take off the ring!
practical, quantum-secure key exchange from LWE. In
Proceedings of the 2016 ACM SIGSAC Conference on
Computer and Communications Security, pages 1006–
1018, 2016.
[29] Jan Camenisch, Manu Drijvers, and Anja Lehmann.
In Ad-
Anonymous attestation with subverted tpms.
vances in Cryptology - CRYPTO, pages 427–461, 2017.
[30] Melissa Chase, Sarah Meiklejohn, and Greg Zaverucha.
Algebraic macs and keyed-veriﬁcation anonymous cre-
In Proceedings of the 2014 ACM SIGSAC
dentials.
Conference on Computer and Communications Secu-
rity, Scottsdale, AZ, USA, November 3-7, 2014, pages
1205–1216.
[31] Cas Cremers and Martin Dehnel-Wild. Component-
based formal analysis of 5g-aka: Channel assumptions
and session confusion. In The Network and Distributed
System Security Symposium, NDSS 2019, 2019.
[32] Cas Cremers, Marko Horvat, Jonathan Hoyland, Sam
Scott, and Thyla van der Merwe. A comprehensive sym-
bolic analysis of TLS 1.3. In Proceedings of the 2017
ACM SIGSAC Conference on Computer and Communi-
cations Security, CCS 2017, pages 1773–1788, 2017.
[33] Jannik Dreier, Lucca Hirschi, Sasa Radomirovic, and
Ralf Sasse. Automated unbounded veriﬁcation of state-
ful cryptographic protocols with exclusive OR. In 31st
IEEE Computer Security Foundations Symposium, CSF
2018, pages 359–373, 2018.
[34] Morris Dworkin. NIST Special Publication 800-38A
Recommendation for Block Cipher Modes of Operation:
Methods and Techniques, 2001.
[35] Pierre-Alain Fouque, Cristina Onete, and Benjamin
Richard. Achieving better privacy for the 3gpp AKA
protocol. PoPETs, (4):255–275, 2016.
[36] Nico Golde, Kevin Redon, and Jean-Pierre Seifert. Let
me answer that for you: Exploiting broadcast informa-
tion in cellular networks. In Proceedings of the 22th
USENIX Security Symposium, pages 33–48, 2013.
[26] Ravishankar Borgaonkar, Lucca Hirschi, Shinjo Park,
and Altaf Shaik. New privacy threat on 3g, 4g, and
upcoming 5g AKA protocols. IACR Cryptology ePrint
Archive, page 1175, 2018.
[37] Philippe Golle and Kurt Partridge. On the anonymity of
home/work location pairs. In Pervasive Computing, 7th
International Conference, Pervasive 2009, pages 390–
397, 2009.
3610    30th USENIX Security Symposium
USENIX Association
[38] Jonathan Katz and Yehuda Lindell.
Introduction to
modern cryptography, Second edition. CRC press.
[39] Charlie Kaufman, Paul E. Hoffman, Yoav Nir, Pasi Ero-
nen, and Tero Kivinen. Internet Key Exchange Protocol
Version 2 (IKEv2). RFC 7296, 2014.
[40] Haibat Khan, Benjamin Dowling, and Keith M. Martin.
Identity conﬁdentiality in 5g mobile telephony systems.
In Security Standardisation Research - 4th International
Conference, SSR 2018, pages 120–142.
[41] Mohammed Shaﬁul Alam Khan and Chris J. Mitchell.
Improving air interface user privacy in mobile telephony.
In Security Standardisation Research - Second Interna-
tional Conference, SSR 2015, pages 165–184, 2015.
[42] Mohsin Khan, Philip Ginzboorg, Kimmo Järvinen, and
Valtteri Niemi. Defeating the downgrade attack on iden-
tity privacy in 5g. In Security Standardisation Research -
4th International Conference, SSR 2018, pages 95–119.
[43] Adrien Koutsos. The 5g-aka authentication protocol
In European Security & Privacy, EuroS&P
privacy.
2019, pages 1–16.
[44] Zhenhua Li, Weiwei Wang, Christo Wilson, Jian Chen,
Chen Qian, Taeho Jung, Lan Zhang, Kebin Liu, Xi-
angyang Li, and Yunhao Liu. Fbs-radar: Uncovering
fake base stations at scale in the wild. In NDSS, 2017.
[45] Fuwen Liu, Jin Peng, and Min Zuo. Toward a secure
access to 5g network. In TrustCom/BigDataSE 2018,
pages 1121–1128.
[46] Gavin Lowe. A hierarchy of authentication speciﬁca-
tion. In 10th Computer Security Foundations Workshop
(CSFW ’97), pages 31–44, 1997.
[47] Simon Meier, Benedikt Schmidt, Cas Cremers, and
David A. Basin. The TAMARIN prover for the sym-
bolic analysis of security protocols. In Computer Aided
Veriﬁcation - 25th International Conference, CAV 2013,
pages 696–701.
[48] Eric Rescorla. The Transport Layer Security (TLS)
Protocol Version 1.2. RFC 5246, 2008.
[49] Eric Rescorla. The Transport Layer Security (TLS)
Protocol Version 1.3. RFC 8446, 2018.
[50] Altaf Shaik, Ravishankar Borgaonkar, Shinjo Park, and
Jean-Pierre Seifert. New vulnerabilities in 4g and 5g
cellular access network protocols: Exposing device ca-
pabilities. In Proceedings of the 12th Conference on
Security and Privacy in Wireless and Mobile Networks,
WiSec ’19, 2019.
[51] Altaf Shaik, Jean-Pierre Seifert, Ravishankar Bor-
gaonkar, N. Asokan, and Valtteri Niemi. Practical at-
tacks against privacy and availability in 4g/lte mobile
communication systems. In NDSS, 2016.
[52] Victor Shoup. A Proposal for an ISO Standard for Public
Key Encryption. Technical report, 2001.
[53] Daehyum Strobel. IMSI Catcher. Seminararbeit Ruhr-
Universitat Bochum, 2007.
[54] Jan stryjak and Mayuran Sivakumaran. The Mobile
Economy 2019. Technical report, GSMA, February
2019.
[55] Fabian van den Broek, Roel Verdult, and Joeri de Ruiter.
Defeating IMSI catchers. In Proceedings of the 22nd
ACM SIGSAC Conference on Computer and Communi-
cations Security, pages 340–351, 2015.
[56] Jorden Whiteﬁeld, Liqun Chen, Ralf Sasse, Steve
Schneider, Helen Treharne, and Stephan Wesemeyer.
A symbolic analysis of ecc-based direct anonymous at-
testation. In IEEE European Symposium on Security
and Privacy, EuroS&P 2019, pages 127–141, 2019.
[57] Zhenfeng Zhang, Kang Yang, Xuexian Hu, and Yuchen
Wang. Practical anonymous password authentication
and TLS with anonymous client authentication. In Pro-
ceedings of the 2016 ACM SIGSAC Conference on Com-
puter and Communications Security, Vienna, Austria,
October 24-28, 2016, pages 1179–1191.
A The Modeling Choices in Detail
A.1 A Brief Introduction to Tamarin Prover
Before presenting the details of our modeling choices, we ﬁrst
present a brief and informal introduction to Tamarin Prover.
We also refer the readers to [11] for the details. Particularly,
Tamarin uses multiset rewriting rules to specify the execution
of protocols, lemmas to model the desired properties, and
equations over functions to model the algorithmic operations
and cryptographic primitives, which are introduced as follows:
Rule. A rule commonly consists of three parts including a
premise, a conclusion and a state for labeling the transition
between the premise and conclusion, and is used to model one
step of a protocol. The premise contains facts that exist in the
current state of system, and the conclusion includes the set
of facts that appear in the system’s next state, which models
the states before and after a step of protocol execution. The
intermediate state consists of action facts, which are stored
by the system to indicate an execution of this step.
Lemma. A lemma claims the (non-)existence of a trace,
which consists of the action facts that appear in rules. The
order of facts can be arranged by constraints in time sequence.
USENIX Association
30th USENIX Security Symposium    3611
It is convenient to use lemmas and action facts to model secu-
rity properties such as secrecy and authentication. To prove
a lemma, Tamarin Prover automatically checks all possible
traces with backward-searching. It outputs the corresponding
path (i.e., the attack) when it ﬁnds a violation on the lemma.
Function and Equation. Tamarin Prover models crypto-
graphic primitives by functions and equation theories over
functions following the so-called black-box cryptography as-
sumption, which means that the primitives are assumed to be
secure. Functions model the syntaxes of primitives, and equa-
tions model the property of functions (i.e., the functionality
of cryptographic primitive). Tamarin Prover has provided a
series of built-in message theories which are useful to model
real-world protocols. It also allows users to deﬁne functions
and equations on their own choices, which can be adopted to
model primitives outside the scope of built-in theories.
A.2 Modeling the KEM/DEM Paradigm
To model 5G-AKA(cid:48) faithfully, we have to manually deﬁne
the asymmetric encryption algorithm (i.e., ECIES) following
the KEM/DEM paradigm with functions and theories, as the
built-in theory of asymmetric encryption only present a block-
box style modeling, which can not describe KEM and DEM
precisely. In particular, we present the modeling of a generic
asymmetric encryption scheme which is designed following
the KEM/DEM paradigm, rather than just model ECIES with
the built-in diﬃe-hellman theory.
To make our modeling more clear, we ﬁrst give a review
on the built-in modeling of asymmetric encryption. Tamarin
Prover models asymmetric encryption by aenc/2, adec/2 and
pk/1, where the digit indicates the number of parameters. In
particular, aenc/2 and adec/2 model encryption and decryp-
tion respectively, and pk/1 models the relationship between
a private key and public key. Let sk be the private key and
m be the plaintext, the built-in equation theory expresses a
public-key encryption scheme as follows:
adec(aenc(m, pk(sk)), sk) = m.
To model ECIES with the KEM/DEM paradigm, we use
four functions and one equation over these functions to de-
ﬁne the key encapsulation/decapsulation mechanism. The
functions of KEM are presented as follows:
• encap/2: It takes two parameters as input, which are the
public key of HN and a random number. In spite that the
deﬁnition of EncapECIES does not contain a random num-
ber as input, it is a random algorithm where different runs
output different results. Thus, we require the encap function
to take a freshly chosen random number as input. Other-
wise, Tamarin Prover will treat encap as a deterministic
algorithm. This measure has also been applied by Basin et
al. [24] for the modeling of ECIES in 5G-AKA.
• getkey/1: It takes one parameter as input (i.e., encap(·,·)),
which outputs the shared secret key generated by the key
encapsulation algorithm. This function is executed by the
sender (i.e., UE) to extract the shared key.
• getcipher/1: This function takes one parameter as input,
which is also encap(·,·). It outputs the ciphertext which
encapsulates the shared key, and is also executed by UE.
• decap/2: It takes two parameters as input, which are the
recipient’s (i.e., HN’s) private key and the ciphertext that
encapsulates the shared key (i.e., getcipher(·)). This func-
tion is executed by the recipient to obtain the shared secret
key, which models the key decapsulation algorithm.
We use an equation to model the functionality of key en-
capsulation and decapsulation as follows:
decap(sk, getcipher(encap(pk(sk), R))) =
getkey(encap(pk(sk), R)),
where R is a freshly chosen random number, and pk/1 is bor-
rowed from the built-in asymmetric-encryption theory to
model the relationship between the recipient’s private and
public keys. This function guarantees that only the holder of
sk can establish the same shared key with the sender. Further-
more, we also leverage Tamarin Prover’s built-in theory for
symmetric encryption (i.e., senc/2 and sdec/2) to model the
encapsulation and decapsulation of data. Note that we do not
distinguish a DEM with its underlying symmetric encryption
for the sake of simplicity. The equation for senc/2 and sdec/2
are deﬁned as follows:
sdec(senc(m, k), k) = m.
A.3 Modeling MAC Failure
Our modeling of the privacy goal covers the case of MAC
failure with the standard Inequality restriction which im-
plies that this rule can only be applied when a UE instance
receives a RAND encrypting with a key different from its kUE.
The case of MAC failure is not modeled in the scripts by [24],
and we also ﬁnd that the published version of Tamarin Prover
1.4.13 is unable to handle this checking condition properly
when the diﬀ/2 operator is applied. When searching for a
mirror from, e.g., LHS to RHS, Tamarin Prover always cap-
tures a mirror which violates the Inequality restriction and
outputs it as an attack. In fact, there exists other mirrors that
do not violate the restriction. The “attack” is detected due
to the incorrect collapsing of two freshly generated terms
as equal (e.g., Fr(~x) and Fr(~y)). Fortunately, this bug has
been reported to the Tamarin Prover team and ﬁxed by commit
c3c3cec4. To model the Mac_Failure message properly, we
use a developing version of Tamarin Prover that has applied
that commit.
3https://tamarin-prover.github.io/
4https://github.com/tamarin-prover/tamarin-prover/issues/331
3612    30th USENIX Security Symposium
USENIX Association