### References

1. **TS 23.501: 5G System (5GS); Stage 3 (Release 16).** Technical Specification, 3rd Generation Partnership Project (3GPP); Technical Specification Group Core Network and Terminals, July 2020.

2. **TS 33.102: 3G Security Architecture (Release 16).** Technical Specification, 3rd Generation Partnership Project (3GPP); Technical Specification Group Services and System Aspects (SA3), July 2020.

3. **TS 33.501: Security Architecture and Procedures for 5G System (Release 16).** Technical Specification, 3rd Generation Partnership Project (3GPP); Technical Specification Group Services and System Aspects (SA3), July 2020.

4. **Erdem Alkim, Léo Ducas, Thomas Pöppelmann, and Peter Schwabe.** "Post-Quantum Key Exchange - A New Hope." In 25th USENIX Security Symposium (USENIX Security 16), pages 327–343, 2016.

5. **Myrto Arapinis, Loretta Ilaria Mancini, Eike Ritter, Mark Ryan, Nico Golde, Kevin Redon, and Ravishankar Borgaonkar.** "New Privacy Issues in Mobile Telephony: Fix and Verification." In the ACM Conference on Computer and Communications Security (CCS'12), pages 205–216, 2012.

6. **Jari Arkko, Karl Norrman, Mats Näslund, and Bengt Sahlin.** "A USIM Compatible 5G AKA Protocol with Perfect Forward Secrecy." In 2015 IEEE TrustCom/BigDataSE/ISPA, Helsinki, Finland, August 20-22, 2015, Volume 1, pages 1205–1209.

7. **David A. Basin, Jannik Dreier, Lucca Hirschi, Sasa Radomirovic, Ralf Sasse, and Vincent Stettler.** "A Formal Analysis of 5G Authentication." In Proceedings of the 2018 ACM SIGSAC Conference on Computer and Communications Security (CCS 2018), pages 1383–1396, 2018.

8. **David A. Basin, Jannik Dreier, and Ralf Sasse.** "Automated Symbolic Proofs of Observational Equivalence." In Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications Security, pages 1144–1155, 2015.

9. **Ravishankar Borgaonkar, Lucca Hirschi, Shinjo Park, Altaf Shaik, Andrew Martin, and Jean-Pierre Seifert.** "New Adventures in Spying 3G & 4G Users: Locate, Track, Monitor." Black Hat USA, 2017.

10. **Joppe W. Bos, Craig Costello, Léo Ducas, Ilya Mironov, Michael Naehrig, Valeria Nikolaenko, Ananth Raghunathan, and Douglas Stebila.** "Frodo: Take Off the Ring! Practical, Quantum-Secure Key Exchange from LWE." In Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security, pages 1006–1018, 2016.

11. **Jan Camenisch, Manu Drijvers, and Anja Lehmann.** "Anonymous Attestation with Subverted TPMs." In Advances in Cryptology - CRYPTO, pages 427–461, 2017.

12. **Melissa Chase, Sarah Meiklejohn, and Greg Zaverucha.** "Algebraic MACs and Keyed-Verification Anonymous Credentials." In Proceedings of the 2014 ACM SIGSAC Conference on Computer and Communications Security, Scottsdale, AZ, USA, November 3-7, 2014, pages 1205–1216.

13. **Cas Cremers and Martin Dehnel-Wild.** "Component-Based Formal Analysis of 5G-AKA: Channel Assumptions and Session Confusion." In The Network and Distributed System Security Symposium (NDSS 2019), 2019.

14. **Cas Cremers, Marko Horvat, Jonathan Hoyland, Sam Scott, and Thyla van der Merwe.** "A Comprehensive Symbolic Analysis of TLS 1.3." In Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security (CCS 2017), pages 1773–1788, 2017.

15. **Jannik Dreier, Lucca Hirschi, Sasa Radomirovic, and Ralf Sasse.** "Automated Unbounded Verification of Stateful Cryptographic Protocols with Exclusive OR." In 31st IEEE Computer Security Foundations Symposium (CSF 2018), pages 359–373, 2018.

16. **Morris Dworkin.** "NIST Special Publication 800-38A: Recommendation for Block Cipher Modes of Operation: Methods and Techniques," 2001.

17. **Pierre-Alain Fouque, Cristina Onete, and Benjamin Richard.** "Achieving Better Privacy for the 3GPP AKA Protocol." PoPETs, (4):255–275, 2016.

18. **Nico Golde, Kevin Redon, and Jean-Pierre Seifert.** "Let Me Answer That for You: Exploiting Broadcast Information in Cellular Networks." In Proceedings of the 22nd USENIX Security Symposium, pages 33–48, 2013.

19. **Ravishankar Borgaonkar, Lucca Hirschi, Shinjo Park, and Altaf Shaik.** "New Privacy Threat on 3G, 4G, and Upcoming 5G AKA Protocols." IACR Cryptology ePrint Archive, page 1175, 2018.

20. **Philippe Golle and Kurt Partridge.** "On the Anonymity of Home/Work Location Pairs." In Pervasive Computing, 7th International Conference (Pervasive 2009), pages 390–397, 2009.

21. **Jonathan Katz and Yehuda Lindell.** "Introduction to Modern Cryptography, Second Edition." CRC Press, 2014.

22. **Charlie Kaufman, Paul E. Hoffman, Yoav Nir, Pasi Eronen, and Tero Kivinen.** "Internet Key Exchange Protocol Version 2 (IKEv2)." RFC 7296, 2014.

23. **Haibat Khan, Benjamin Dowling, and Keith M. Martin.** "Identity Confidentiality in 5G Mobile Telephony Systems." In Security Standardisation Research - 4th International Conference (SSR 2018), pages 120–142.

24. **Mohammed Shafiqul Alam Khan and Chris J. Mitchell.** "Improving Air Interface User Privacy in Mobile Telephony." In Security Standardisation Research - Second International Conference (SSR 2015), pages 165–184, 2015.

25. **Mohsin Khan, Philip Ginzboorg, Kimmo Järvinen, and Valtteri Niemi.** "Defeating the Downgrade Attack on Identity Privacy in 5G." In Security Standardisation Research - 4th International Conference (SSR 2018), pages 95–119.

26. **Adrien Koutsos.** "The 5G-AKA Authentication Protocol Privacy." In European Security & Privacy (EuroS&P 2019), pages 1–16.

27. **Zhenhua Li, Weiwei Wang, Christo Wilson, Jian Chen, Chen Qian, Taeho Jung, Lan Zhang, Kebin Liu, Xiangyang Li, and Yunhao Liu.** "FBS-Radar: Uncovering Fake Base Stations at Scale in the Wild." In NDSS, 2017.

28. **Fuwen Liu, Jin Peng, and Min Zuo.** "Toward a Secure Access to 5G Network." In TrustCom/BigDataSE 2018, pages 1121–1128.

29. **Gavin Lowe.** "A Hierarchy of Authentication Specifications." In 10th Computer Security Foundations Workshop (CSFW '97), pages 31–44, 1997.

30. **Simon Meier, Benedikt Schmidt, Cas Cremers, and David A. Basin.** "The TAMARIN Prover for the Symbolic Analysis of Security Protocols." In Computer Aided Verification - 25th International Conference (CAV 2013), pages 696–701.

31. **Eric Rescorla.** "The Transport Layer Security (TLS) Protocol Version 1.2." RFC 5246, 2008.

32. **Eric Rescorla.** "The Transport Layer Security (TLS) Protocol Version 1.3." RFC 8446, 2018.

33. **Altaf Shaik, Ravishankar Borgaonkar, Shinjo Park, and Jean-Pierre Seifert.** "New Vulnerabilities in 4G and 5G Cellular Access Network Protocols: Exposing Device Capabilities." In Proceedings of the 12th Conference on Security and Privacy in Wireless and Mobile Networks (WiSec '19), 2019.

34. **Altaf Shaik, Jean-Pierre Seifert, Ravishankar Borgaonkar, N. Asokan, and Valtteri Niemi.** "Practical Attacks Against Privacy and Availability in 4G/LTE Mobile Communication Systems." In NDSS, 2016.

35. **Victor Shoup.** "A Proposal for an ISO Standard for Public Key Encryption." Technical Report, 2001.

36. **Daehyum Strobel.** "IMSI Catcher." Seminararbeit Ruhr-Universität Bochum, 2007.

37. **Jan Stryjak and Mayuran Sivakumaran.** "The Mobile Economy 2019." Technical Report, GSMA, February 2019.

38. **Fabian van den Broek, Roel Verdult, and Joeri de Ruiter.** "Defeating IMSI Catchers." In Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications Security, pages 340–351, 2015.

39. **Jorden Whitefield, Liqun Chen, Ralf Sasse, Steve Schneider, Helen Treharne, and Stephan Wesemeyer.** "A Symbolic Analysis of ECC-Based Direct Anonymous Attestation." In IEEE European Symposium on Security and Privacy (EuroS&P 2019), pages 127–141, 2019.

40. **Zhenfeng Zhang, Kang Yang, Xuexian Hu, and Yuchen Wang.** "Practical Anonymous Password Authentication and TLS with Anonymous Client Authentication." In Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security, Vienna, Austria, October 24-28, 2016, pages 1179–1191.

### Appendix A: Detailed Modeling Choices

#### A.1 Brief Introduction to Tamarin Prover

Before delving into the details of our modeling choices, we provide a brief and informal introduction to Tamarin Prover. For more detailed information, readers are referred to [11]. Tamarin Prover uses multiset rewriting rules to specify the execution of protocols, lemmas to model desired properties, and equations over functions to model algorithmic operations and cryptographic primitives. These components are introduced as follows:

- **Rule:** A rule typically consists of three parts: a premise, a conclusion, and a state that labels the transition between the premise and conclusion. It models one step of a protocol. The premise contains facts that exist in the current system state, while the conclusion includes the set of facts that appear in the next state, modeling the states before and after a protocol step. The intermediate state consists of action facts, which are stored by the system to indicate the execution of this step.

- **Lemma:** A lemma claims the (non-)existence of a trace, which consists of the action facts that appear in rules. The order of facts can be arranged by constraints in time sequence. Lemmas and action facts are useful for modeling security properties such as secrecy and authentication. To prove a lemma, Tamarin Prover automatically checks all possible traces with backward-searching and outputs the corresponding path (i.e., the attack) if it finds a violation.

- **Function and Equation:** Tamarin Prover models cryptographic primitives using functions and equation theories, following the black-box cryptography assumption, which assumes the primitives are secure. Functions model the syntaxes of primitives, and equations model the properties of functions (i.e., the functionality of cryptographic primitives). Tamarin Prover provides a series of built-in message theories for real-world protocols and allows users to define their own functions and equations to model primitives outside the scope of built-in theories.

#### A.2 Modeling the KEM/DEM Paradigm

To model 5G-AKA' accurately, we manually defined the asymmetric encryption algorithm (i.e., ECIES) following the KEM/DEM paradigm with functions and theories. This is necessary because the built-in theory of asymmetric encryption only provides a black-box style modeling, which cannot precisely describe KEM and DEM. Specifically, we present the modeling of a generic asymmetric encryption scheme designed following the KEM/DEM paradigm, rather than just modeling ECIES with the built-in Diffie-Hellman theory.

To clarify our modeling, we first review the built-in modeling of asymmetric encryption in Tamarin Prover. Tamarin Prover models asymmetric encryption using `aenc/2`, `adec/2`, and `pk/1`, where the digit indicates the number of parameters. `aenc/2` and `adec/2` model encryption and decryption, respectively, and `pk/1` models the relationship between a private key and a public key. Let `sk` be the private key and `m` be the plaintext; the built-in equation theory expresses a public-key encryption scheme as follows:
```
adec(aenc(m, pk(sk)), sk) = m.
```

To model ECIES with the KEM/DEM paradigm, we use four functions and one equation over these functions to define the key encapsulation/decapsulation mechanism. The functions of KEM are presented as follows:

- **`encap/2`:** It takes two parameters as input: the public key of the Home Network (HN) and a random number. Although the definition of `EncapECIES` does not include a random number as input, it is a random algorithm where different runs produce different results. Thus, we require the `encap` function to take a freshly chosen random number as input. Otherwise, Tamarin Prover will treat `encap` as a deterministic algorithm. This measure has also been applied by Basin et al. [24] for the modeling of ECIES in 5G-AKA.

- **`getkey/1`:** It takes one parameter as input (i.e., `encap(·,·)`), which outputs the shared secret key generated by the key encapsulation algorithm. This function is executed by the sender (i.e., UE) to extract the shared key.

- **`getcipher/1`:** This function takes one parameter as input, which is also `encap(·,·)`. It outputs the ciphertext that encapsulates the shared key and is executed by the UE.

- **`decap/2`:** It takes two parameters as input: the recipient's (i.e., HN's) private key and the ciphertext that encapsulates the shared key (i.e., `getcipher(·)`). This function is executed by the recipient to obtain the shared secret key, modeling the key decapsulation algorithm.

We use an equation to model the functionality of key encapsulation and decapsulation as follows:
```
decap(sk, getcipher(encap(pk(sk), R))) = getkey(encap(pk(sk), R)),
```
where `R` is a freshly chosen random number, and `pk/1` is borrowed from the built-in asymmetric-encryption theory to model the relationship between the recipient's private and public keys. This ensures that only the holder of `sk` can establish the same shared key with the sender. Additionally, we leverage Tamarin Prover's built-in theory for symmetric encryption (i.e., `senc/2` and `sdec/2`) to model the encapsulation and decapsulation of data. We do not distinguish a DEM from its underlying symmetric encryption for simplicity. The equation for `senc/2` and `sdec/2` is defined as follows:
```
sdec(senc(m, k), k) = m.
```

#### A.3 Modeling MAC Failure

Our modeling of the privacy goal covers the case of MAC failure using the standard Inequality restriction, implying that this rule can only be applied when a UE instance receives a `RAND` encrypted with a key different from its `kUE`. The case of MAC failure was not modeled in the scripts by [24], and we found that the published version of Tamarin Prover 1.4.13 could not handle this checking condition properly when the `diff/2` operator was applied. When searching for a mirror from, e.g., LHS to RHS, Tamarin Prover always captures a mirror that violates the Inequality restriction and outputs it as an attack. In fact, there exist other mirrors that do not violate the restriction. The "attack" is detected due to the incorrect collapsing of two freshly generated terms as equal (e.g., `Fr(~x)` and `Fr(~y)`). Fortunately, this bug has been reported to the Tamarin Prover team and fixed by commit `c3c3cec4`. To model the `Mac_Failure` message properly, we used a developing version of Tamarin Prover that has applied this commit.

- **Bug Report:** [Tamarin Prover Issue #331](https://github.com/tamarin-prover/tamarin-prover/issues/331)
- **Commit Fix:** [Commit c3c3cec4](https://github.com/tamarin-prover/tamarin-prover/commit/c3c3cec4)

---

This optimized version aims to enhance clarity, coherence, and professionalism in the text.