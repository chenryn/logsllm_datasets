dow, as well as ei’s neighbour. Three pointers suﬃce, and
since the parallel scanning phase only slides the window over
each subsequence once, each of those pointers will similarly
30   25             16   15   10        3    1       0   1  15  12   6  12  13  15  15  16   0    1    2    3    4    5    6    7    8    9                 18   16             6          14   3   4   9  10  14                 2    3    4    6    7    7            10   3          10  14             2    5              8    8            21           2             2           2             7           2             8  12  15  12  14  10  11   9  11   8  10   7   9   5    7   6    8   7    8   7    9   8    9   9    10   6   8   9    12  12  15  12  14  10  11   9  11   8  10   7   9   5    7   6    8   7    8   7    9   8    9   9    10   6   8   9    12  12  15  12  14  10  11   9  11   8  10   7   9   5    7   6    8   7    8   7    9   8    9   9    10   6   8   9    12  Figure 3: Performance comparison of Smith-Waterman and Jacobson-Vo on intra-protocol alignments of
various TCP and UDP protocol ﬂows. Error bars indicate the minimum and maximum runtimes.
Figure 4: Behaviour of various Jacobson-Vo aspects with TCP and UDP protocol ﬂows:
relative to min(s1, s2), length of Π relative to s1s2, coverage of corridors relative to subsequence table.
length of LCS
visit each member of Π at most once.
At this point, the runtime complexity depends on the lo-
gistics of tracking the best-scoring node in the window. By
storing the window elements in a priority queue, we can ac-
cess the best-scoring element in constant time. Assume the
priority queue contains n elements. As the window moves
downward over a subsequence, new elements are inserted
into the priority queue as the low window boundary ad-
vances. Using a heap, this can be done in O(log n). At the
same time, existing elements need to be removed from the
priority queue whenever the top boundary advances. Re-
moval can likewise be done in O(log n). To estimate the
maximum size n of the queue, we need to bound the size
of Π’s subsequences. Note that a single occurrence list can
exist in a subsequence at most once in its entirety, and an
occurrence list can be at most of size s2. Beyond that, a
subsequence can only grow by adding the bottom-most in-
dex repeatedly, which can occur at most s1 times. Thus,
subsequence size is bounded from above by s1 + s2.
We can now summarise the runtime complexity of our ex-
tended Jacobson-Vo algorithm. As in the original approach,
we insert each member of Π into the subsequence table using
binary search, requiring O(π log s1). The parallel scanning
phase visits each element in Π at most once in the left sub-
sequence, while each element in the right subsequence is at
most once inserted into the priority queue and removed from
it, which takes at most O (log(s1 + s2)). Combining subse-
quence table construction and parallel scanning phase, we
obtain O (π (log s1 + log(s1 + s2))). Since normally we can
assume s1 ≈ s2 and thus O(s1 + s2) = O(s1), we obtain
O(2π log s1) = O(π log s1).
Remarkably, extending Jacobson-Vo to target gap-minimi-
sing and substring-maximising LCSs does not hurt the run-
time complexity bound, making only modest assumptions
about the scoring schema, namely uniform gap penalties.
4. EVALUATION
We implemented Smith-Waterman and our variant of Jacob-
son-Vo in about 500 and 600 lines of C++, respectively.
To compare performance, we selected a number of popu-
lar servers from a one-day full-content trace of our labo-
ratory’s uplink. We selected TCP services running FTP,
HTTP, HTTPS, SSH, and SMTP as well as UDP services
for DNS, DHCP, NetBios NS, SNMP, and Syslog, picking
n = 142 ﬂows each so that we could perform `n
´ > 10, 000
2
5010025000.511.522.53x 10−32.05.710.1FTP  SWJVsm5010025050000.0050.010.0152.05.511.011.9HTTP501002505001000200000.050.10.150.22.45.118.739.653.258.5HTTPS501002505001000200000.050.10.150.22.27.617.418.122.931.7SSH501002505001000200000.050.10.150.22.15.511.611.710.18.8SMTP5002468x 10−51.6DNSTime (s)501002500123456x 10−31.00.70.5DHCP5002468x 10−50.9NetBios NSPrefix length (bottom), JVsm speedup (top)5010025000.511.522.53x 10−31.84.25.9SNMP501000123456x 10−42.25.5Syslog501002500255075100FTP501002505000255075100HTTP50100250500100020000255075100HTTPS50100250500100020000255075100SSH50100250500100020000255075100SMTP  LCSPCoverage500255075100DNSPercent501002500255075100DHCP500255075100NetBios NSPrefix length501002500255075100SNMP501000255075100Syslog50
496
HTTPS
Protocol
FTP
250
5,460
HTTP 10,000 10,000 8,778
100
9,730
9,870
Preﬁx Length
500
×
561
1000 2000
×
×
×
×
630
10,000 10,000 9,870 9,316 2,346
SSH 10,000 10,000 10,000 9,730 8,385 5,253
136
×
×
×
×
×
1,431 1,271
SMTP 10,000 7,381
×
×
×
DHCP 10,000 10,000 10,000 ×
×
×
×
×
3,828
1,596
×
×
435
703
×
×
×
×
×
10,000
5,778
3,655
DNS
NetBios NS
SNMP
Syslog
Figure 5: Number of LCS computations per service
and preﬁx length.
Preﬁx Length
Avg. Speed-up
100
50
1.82 4.98 10.74 20.1 28.73
250
500 1000 2000
33
Figure 6: Average speed-up of extended Jacobson-
Vo compared to Smith-Waterman.
LCS computations among ﬂow pairs of the same service,
an operation more meaningful than cross-service alignments
and commonly performed by systems employing sequence
alignment. We reassembled the originator→responder ﬂows,
where feasible, using the Bro IDS [13] and stored them in
reassembled form. Next we measured the runtime for pair-
wise LCS computations with minimum substring length 1 of
ﬂows belonging to the same service, averaged the runtime
of 100 iterations, and varied the string length in separate
runs over 50, 100, 250, 500, 1000, and 2000 bytes. The ex-
periments were run on an otherwise idle Pentium 4 running
at 2.53GHz with 512MB of memory. Since ﬂows of at least
2000 bytes are less frequent than those of at least 50 bytes,
the actual number of string pairs varied per protocol. We
chose 100 comparisons as the lower bound for investigation,
and show the actual number of comparisons in Table 5. Fig-
ure 3 shows the performance comparison for all protocols,
including the speed-up factors of Jacobson-Vo over Smith-
Waterman. Our extended Jacobson-Vo algorithm is up to
33 times faster on average (see Table 6) with the best speed-
up factor being 58.5 for HTTPS ﬂows of 2000 bytes. The
runtime overhead of the extended Jacobson-Vo’s additional
operations is marginal; we do not show it.
There are two cases where Jacobson-Vo is not the clear win-
ner: NetBios NS and, more strongly, DHCP. To understand
the reason, recall that the runtime performance of Jacobson-
Vo is largely determined by the length of Π, and consider
Figure 4. With NetBios NS, and DHCP in particular, Π is
substantially larger than s1s2 (the amount of work Smith-
Waterman has to do) than with the other protocols. At the
same time, their ratio of LCS length to input string length
is not substantially higher than that of other protocols such
as FTP, where speed-up is substantial. The corridor sizes
relative to the full subsequence table sizes also cannot ex-
plain DHCP’s behaviour, since it is among the lowest in the
dataset. In summary, these observations conﬁrm that our
modiﬁcations have kept the length of Π the deﬁning factor
of Jacobson-Vo’s performance.
5. DISCUSSION
Generally, Jacobson-Vo tends to perform better on content
with a high number of characters in random distribution [8].
Our results conﬁrm this: ﬁrst, both ICMP and NetBios NS
contain a large number of zero-bytes and are of highly ﬁxed
structure: the LCSs reach up to 93% of the input string
length for DHCP and 97% for NetBios NS, indicating that
the input strings are nearly identical. Second, the encrypted
HTTPS has high randomisation in large parts of the content,
and brings out overall best performance. Knowledge of a
protocol’s statistical content distribution is thus a guideline
for the choice of alignment algorithm.
6. CONCLUSION
Sequence alignment algorithms have many potential appli-
cations in the network setting. As we have shown, the
employed alignment models and algorithms require care-
ful consideration. We have introduced an extension of the
Jacobson-Vo algorithm that allows ﬂexible alignment scor-
ing, borrowing concepts from Smith-Waterman. Our soft-
ware implementation outperforms Smith-Waterman by a fac-
tor of 33 on average and 58.5 in the best case. Both our
Smith-Waterman and Jacobson-Vo implementations will be
available with the next release of the Bro IDS.
7. REFERENCES
[1] James Newsome, Brad Karp, and Dawn Song. Polygraph:
Automatically generating signatures for polymorphic
worms. In Proc. 2005 IEEE Symposium on Security and
Privacy, pages 226–241, Washington, DC, USA, 2005.
IEEE Computer Society.
[2] Christian Kreibich and Jon Crowcroft. Honeycomb —
creating intrusion detection signatures using honeypots. In
Proceedings of the Second Workshop on Hot Topics in
Networks (Hotnets II), Boston, November 2003.
[3] W. Cui, V. Paxson, N. Weaver, and R. H. Katz.
Protocol-independent adaptive replay of application dialog.
In 13th Annual Network and Distributed System Security
Symposium (NDSS), San Diego, USA, February 2006.
[4] J. Ma, K. Levchenko, C. Kreibich, S. Savage, and
G. Voelker. Unexpected means of identifying protocols. In
Proceedings of the Internet Measurement Conference.
SIGCOMM/USENIX, October 2006.
[5] H.-A. Kim and B. Karp. Autograph: Toward automated,
distributed worm signature detection. In Proceedings of the
13th Usenix Security Symposium, San Diego, CA, 2004.
[6] Sumeet Singh, Cristian Estan, George Varghese, and Stefan
Savage. Automated worm ﬁngerprinting. In Proceedings of
the ACM/USENIX Symposium on Operating System
Design and Implementation, Dec 2004.
[7] S. B. Needleman and C. D. Wunsch. A general method
applicable to the search for similarities in the amino acid
sequence of two proteins. Journal of Molecular Biology,
48:443–453, 1970.
[8] Dan Gusﬁeld. Algorithms on Strings, Trees and Sequences.
Cambridge University Press, 1997.
[9] Temple F. Smith and Michael S. Waterman. Identiﬁcation
of common molecular subsequences. Journal of Molecular
Biology, 147, 1981.
[10] R. Durbin, S. Eddy, A. Krogh, and G. Mitchison. Biological
Sequence Analysis. Cambridge University Press, 1998.
[11] G. Jacobson and K. P. Vo. Heaviest increasing/common
subsequence problems. In Proc. of the 3rd Symposium on
Combinatorial Pattern Matching, volume 644, pages 52–65.
Springer LNCS, 1992.
[12] P. Pevzner and M. Waterman. Matrix longest common
subsequence problem, duality and Hilbert bases. In Proc. of
the 3rd Symposium on Combinatorial Pattern Matching,
volume 644, pages 79–89. Springer LNCS, 1992.
[13] Vern Paxson. Bro: A system for detecting network
intruders in real-time. Computer Networks (Amsterdam,
Netherlands: 1999), 31(23-24):2435–2463, 1998.