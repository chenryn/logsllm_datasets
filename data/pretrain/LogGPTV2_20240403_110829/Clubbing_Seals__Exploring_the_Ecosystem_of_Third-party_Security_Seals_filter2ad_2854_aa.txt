title:Clubbing Seals: Exploring the Ecosystem of Third-party Security Seals
author:Tom van Goethem and
Frank Piessens and
Wouter Joosen and
Nick Nikiforakis
Exploring the Ecosystem of Third-party Security Seals
Clubbing Seals:
Tom Van Goethem‡, Frank Piessens‡, Wouter Joosen‡, Nick Nikiforakis†
‡iMinds-Distrinet, KU Leuven, 3001 Leuven, Belgium
ﬁPI:EMAIL
†Department of Computer Science, Stony Brook University
PI:EMAIL
ABSTRACT
In the current web of distrust, malware, and server compro-
mises, convincing an online consumer that a website is se-
cure, can make the diﬀerence between a visitor and a buyer.
Third-party security seals position themselves as a solution
to this problem, where a trusted external company vouches
for the security of a website, and communicates it to visi-
tors through a security seal which the certiﬁed website can
embed in its pages.
In this paper, we explore the ecosystem of third-party se-
curity seals focusing on their security claims, in an attempt
to quantify the diﬀerence between the advertised guaran-
tees of security seals, and reality. Through a series of au-
tomated and manual experiments, we discover a real lack
of thoroughness from the side of the seal providers, which
results in obviously insecure websites being certiﬁed as se-
cure. Next to the incomplete protection, we demonstrate
how malware can trivially evade detection by seal providers
and detail a series of attacks that are actually facilitated by
seal providers. Among other things, we show how seals can
give more credence to phishing attacks, and how the cur-
rent architecture of third-party security seals can be used as
a completely passive vulnerability oracle, allowing attackers
to focus their energy on websites with known vulnerabilities.
Categories and Subject Descriptors
K.6.5 [Security and Protection]: Unauthorized access;
H.3.5 [Online Information Services]: Web-based ser-
vices; K.4.4 [Electronic Commerce]: Security
Keywords
Web applications; security seals; web-based attacks
1.
INTRODUCTION
Nowadays, it has become rather uncommon for an entire
month to go by without some news of a major security in-
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
CCS’14, November 3–7, 2014, Scottsdale, Arizona, USA.
Copyright 2014 ACM 978-1-4503-2957-6/14/11 ...$15.00.
http://dx.doi.org/10.1145/2660267.2660279.
cident. Whether by bugs in cryptographic libraries [11, 22],
malware installed on points-of-sale terminals [20], the ex-
ploitation of web application vulnerabilities [21, 26, 28], or
social engineering [1, 5], databases with credentials and per-
sonal details of millions of users seem to be ﬁnding their way
into the hands of attackers, on a regular basis.
The monetary losses due to these events and due to cyber-
crime in general, are sizable. According to a recent report
on the economic cost of cybercrime and cyber espionage, the
cost of these activities reach 100 billion dollars each year,
just for the United States alone [24]. Note that these losses
are not just direct monetary losses, but also indirect ones.
One interesting indirect loss is the opportunity cost to busi-
nesses due to reduced trust in online services.
Trust has always been a barrier to the adoption and use
of new technology.
In the context of the web, people are
called to trust the websites of online companies, many of
which do not have an oﬄine brick-and-mortar presence, with
their sensitive personal and ﬁnancial information. In a 2008
survey, 75% of online shoppers did not like the fact that they
had to provide their credit card and personal information
online [13], while in a 2013 survey, only 61% of U.S. Internet
users were banking online [9].
In such an environment of distrust, companies can dis-
tinguish themselves from others by not only securing their
infrastructure but also convincing the user that they did so.
This is even more so for smaller companies which do not
enjoy the implicit trust aﬀorded by the wide recognition of
logos and household company names.
One way of achieving this goal is through the use of third-
party security seals. A third-party security seal is an image
that a website can embed in its HTML code which signals
to consumers that the website has been scanned by a se-
curity company and has been found to be without issues,
i.e., without vulnerabilities and without malware. Seals are
typically provided by large security companies, like McAfee
and Symantec, and are meant to be recognizable by the
user and lend the credibility and trust associated with these
large companies, to the certiﬁed site. Depending on the seal
provider, security seals can cost anywhere between hundreds
to thousands of dollars per year which can be a signiﬁcant
reoccurring security investment, especially for smaller com-
panies.
Prior research on the topic of third-party security seals
has mostly focused on whether a user recognizes their pres-
ence on certiﬁed websites and whether they result in higher
conﬁdence and thus increased sales [4, 10, 15, 18].
918In this paper, we perform a three-pronged analysis of
third-party security seal providers.
Instead of measuring
whether users trust security seals, we want to know whether
these seals should be trusted in the ﬁrst place. First, we
compile a list of ten popular seal providers and analyze their
certiﬁcation methods. We discover that, among others, the
security checking of seal-using websites is done almost en-
tirely in a black-box fashion where the seal providers try a
list of automated attacks on their clients. By designing and
deploying a known vulnerable web application, we witness
the inaccuracy and haphazardness of these scanners, with
the best one detecting less than half of the known vulnera-
bilities.
Second, we turn our attention to existing businesses that
use third-party security seals, discovering more than 8,000
websites certiﬁed to be secure by the studied seal providers.
By gathering and comparing features that are telling of a
website’s security hygiene, e.g., the use of HttpOnly cookies
and Anti-CSRF tokens in HTML forms, we show that seal-
using websites are not more prudent than other websites of
an equivalent nature and popularity. Moreover, by obtain-
ing explicit permission for a manual penetration test on nine
seal-using websites, we demonstrate how a moderately moti-
vated attacker can discover high-risk vulnerabilities in most
certiﬁed websites, in less than one working day.
Finally, taking into account the workings of seal providers,
we detail a series of attacks on websites that are actually fa-
cilitated by the use of third-party security seals. Among
others, we describe the architecture of a completely passive
vulnerability oracle that allows an attacker to discover easily
exploitable websites by monitoring the appearance and dis-
appearance of third-party security seals on seal-using web-
sites.
Our main contributions are:
• We perform the ﬁrst study of third-party security seals
that tests the claimed security guarantees, exposing a
lack of thoroughness and sophistication
• We show that seal-certiﬁed websites do not have diﬀer-
ent security practices when compared to other equiva-
lent non-seal-using websites
• We demonstrate that even moderately motivated at-
tackers have no problem ﬁnding critical vulnerabilities
in websites that are certiﬁed to be secure
• We describe how attackers can abuse third-party secu-
rity seals proposing, among others, a completely pas-
sive vulnerability oracle that takes advantage of the
way seal providers react when one of their clients has
been detected as vulnerable
2. SECURITY SEALS
In this section, we describe the general workings of third-
party security seals and list the ten seal providers that we
analyzed, together with their features and deviations from
the generic model of a third-party security seal.
2.1 General Architecture
In general, third-party security seals follow the architec-
ture shown in Figure 1 which is comprised of two distinct
components. We arrived at this architecture through the
analysis of all ten investigated providers, and the recording
of common features.
Figure 1: High-level view of the architecture and
delivery of third-party security seals
First, if seal providers are to give meaningful security cer-
tiﬁcations to other websites, they must have a way to assess
the security stance of those websites. This is done through
the use of an automated scanner which periodically checks
the websites of their clients for the presence of security is-
sues, usually involving vulnerabilities and, in some cases,
malware. While the exact scanning frequency depends on
each seal provider and the version of the seal a customer
has bought, the scans are usually repeated either on a daily
or a weekly basis. The clients of seal providers are given ac-
cess to a web-based “control panel” where they can inspect
the ﬁndings of the latest security scan. If the scan discovered
vulnerabilities, the client is given a description of the vul-
nerability, its exact location and nature (e.g. reﬂected XSS
found on parameter page of index.php), and some generic
guidance for its remediation, usually in the form of links
towards whitepapers and other security resources. When a
vulnerability is discovered, the owners of certiﬁed websites
are typically given a “grace period” of a few days which they
can use to correct the discovered vulnerability before it af-
fects their certiﬁcation, i.e., the visual component displayed
on their website.
The second component of a seal-provider is the seal itself.
When a website owner subscribes her website for a third-
party security seal, she is given a snippet of HTML code (or
JavaScript code which creates an HTML snippet) which she
is instructed to place in her page, at the position where she
wants the third-party seal to appear. The general format of
seal snippets is as follows:

client = example . com "/ >
This snippet always involves an HTML image tag which
dynamically requests an image from the web server of the
seal provider. If a website is found to be secure, the server
will respond with an image of a seal, as shown in Figure 1,
which typically includes the logo of the seal provider and
is meant to be recognizable by the visitors of the seal-using
website and lend it the credibility associated with the seal-
provider. Usually, the image is wrapped in an anchor tag
919#Clients Name
Yearly Cost
Scan
Vulnerability
Malware
Scan
Server-side
access
Server
AuthN
Disappearing
seal
3,980 Norton Secured
3,029 McAfee SECURE
463 Trust-Guard
459
281 WebsiteProtection
SecurityMetrics
(GoDaddy)
118 BeyondSecurity
109
ScanVerify
68 Qualys
48 HackerProof
4 TinfoilSecurity
$995
$300
$697
$120
$84
$360
$100
$495
$2,295
$2,388












–


–
–

–
–
–
–
–
–

–
–
–
–
–
–
–
–
–
–

–
–
–

–


–





–
Grace
Period
(Days)
NA
Unknown
7
0
0
0
2
3
5
NA
Table 1: Overview of evaluated seal providers and their features
which is clickable, leads to the domain of the seal provider,
and shows the visitor of a certiﬁed website more information
about the seal and the seal provider, e.g., the coverage of the
scan that produced the seal, and the day of the last scan.
Apart from providing more information, this linked page
creates an obstacle for website owners who wish to create
the illusion of being certiﬁed, e.g., by showing a fake security
seal on their website, possibly scraped by the website of a
seal provider’s paying client. Since the extra information
is provided in a page under the seal-provider’s domain, a
non-paying user cannot mimic that part of the certiﬁcation.
Interestingly, for the majority of seal providers, when a
vulnerability is discovered and the certiﬁed website fails to
correct it within its allotted grace period, the security seal
merely becomes invisible. That is, even when a website is
vulnerable, a visitor of that website will never see a “nega-
tive” security seal. The only way that a visitor can discover
this fact is by the examination of the HTML source code of
a page and the discovery of the aforementioned HTML snip-