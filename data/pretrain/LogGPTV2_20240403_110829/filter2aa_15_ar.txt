））
{
               Notice
：：
set
（
'mod_marquee/msg'
，
__
（
'Link image upload failed
！
'
））；
              Content
：：
redirect
（
Html
：：
uriquery
（
'mod_marquee'
，
'upload_img'
））；
        }
这是一个文件上传的代码，其中此漏洞的关键代码在：
if
（！
$this->_savelinkimg
（
$file_info
））
{
    Notice
：：
set
（
'mod_marquee/msg'
，
__
（
'Link image upload failed
！
'
））；
    Content
：：
redirect
（
Html
：：
uriquery
（
'mod_marquee'
，
'upload_img'
））；
}
在这里调用_savelinkimg（）函数保存文件，跟进该函数，函数代码如下：
private function _savelinkimg
（
$struct_file
）
{
    $struct_file['name'] = iconv
（
"UTF-8"
，
"gb2312"
，
$struct_file['name']
）；
    echo $struct_file['name']
；
    move_uploaded_file
（
$struct_file['tmp_name']
，
ROOT.'/upload/image/'.$struct_ file['name']
）；
    return ParamParser
：：
fire_virus
（
ROOT.'/upload/image/'.$struct_file['name']
）；
}
代码中：
$struct_file['name'] = iconv
（
"UTF-8"
，
"gb2312"
，
$struct_file['name']
）；
对文件名进行转码，之后：
move_uploaded_file
（
$struct_file['tmp_name']
，
ROOT.'/upload/image/'.$struct_file['name']
）；
写入文件，这里就出现了我们上面说到的编码转换，最终导致可以上传任意文件。
8.3 php：//输入输出流
提到流，大家会想到水流或者数据流，PHP提供了php://的协议允许访问PHP的输入输出流、标准输入输出和错误描述符，内存中、磁盘备份的临时文件流以及可以操作其他读取写入文件资源的过滤器。主要提供如下访问方式来使用这些封装器：
php
：
//stdin
php
：
//stdout
php
：
//stderr
php
：
//input
php
：
//output
php
：
//fd
php
：
//memory
php
：
//temp
php
：
//filter
使用最多的是php://input、php://output以及php：//filter，其中php://input是可以访问请求的原始数据的只读流。即可以直接读取到POST上没有经过解析的原始数据，但是php://input不能在获取“multipart/form-data”方式提交的数据。我们做一个测试，测试代码如下：
当我们执行代码的时候，会像脚本同目录下写入“example.txt”文件，内容为rot13编码过的“Hello World”，而php：//filter还可以用来读文件，如果有远程文件保护漏洞，类似如下的代码：
正常情况下如果我们直接传入一个文件名，则是会被include函数包含并执行，如果我们想读取Web目录下的PHP文件，则可以通过请求：
/1.php
？
f=php
：
//filter/convert.base64-encode/resource=1.php
来将文件进行Base64编码后输出，输入结果如图8-5所示。
图 8-5
8.4 PHP代码解析标签
PHP有几种解析标签的写法来标识PHP代码，比如最标准的，当PHP解析器找到这个标签的时候，就会执行这个标签里面的代码，实际上除了这种写法外还有一些标签，分别如下：
1）脚本标签
 ：，这种方式写法有点像JavaScript，不过也是可以正常解析PHP代码。
2）短标签
 ：，使用短标签前需要在php.ini中设置short_open_tag=on，默认是on状态。
3）asp标签
 ：，在PHP 3.0.4版后可用，需要在php.ini中设置asp_tags=on，默认是off。
因为有的程序在后台配置模板的时候，禁止提交这样的标签来执行PHP代码，但是大部分程序会存在过滤不全的问题，所以这些各式各样的写法常常用于留后门以及绕过Web程序或者waf的防护写入webshell。
我们来测试脚本标签方式，测试代码如下：
执行后如图8-6所示。
图 8-6
可以看到PHP代码可以正常解析执行。
8.5 fuzz漏洞发现
fuzz指的是对特定目标的模糊测试，这里要注意的是，针对特定目标甚至说是特定请求，它不同于漏洞扫描器进行批量漏洞扫描，不过它们的初衷都是以发现bug（漏洞）为目的。由于本书主要介绍代码安全，所以我们后面所说的fuzz都是安全方向的fuzz。fuzz在很早就应用在软件测试领域，并且发现了大量不可预知的漏洞，fuzz到底是怎么样的一个东西，我们来通过它的工作原理流程认识一下，大概流程如图8-7所示。
图 8-7
举个最简单的读文件例子，当我们用Office Word打开doc文档的时候，Word软件会按照指定的格式读取文件的内容，如果文件格式出现异常字符，Word无法解析，而又没有提前捕捉到这种类型的错误，则有可能引发Word程序崩溃，这就是一个bug，这时候我们就可以通过工具生成大量带有异常格式或者字符的doc文档，然后调用Word程序去读取，尝试发现更多的bug，这就是一个完整的fuzz测试例子。虽然它不是一种纯白盒的漏洞挖掘方法，但我们在白盒审计过程中，也经常需要用到fuzz的方式来寻找漏洞利用方法。
目前互联网上已经有不少fuzz工具来专门做各种各样的fuzz测试，比如无线、Web、浏览器、协议，等等，在Web安全这块，使用比较多的像pywebfuzz，基于Python开发，不过相对来说这个工具年代还是有点久了，可以用的payload还算比较全，比较常见的文件包含、文件上传、SQL注入、XSS等都支持，详细的列表如图8-8所示。
图 8-8
playload文件在各个目录下面，我们打开其中一个payload规则文件后，可以看到类似如下的规则：
cFc%20%20%20
dBm%20%20%20
cfm......
cfml......
cfc.......
dbm......
cFm......
cFml......
cFc......
dBm......
cfm%20%20%20...%20.%20..
cfml%20%20%20...%20.%20..
cfc%20%20%20...%20.%20..
dbm%20%20%20...%20.%20..
cFm%20%20%20...%20.%20..
我们之前在8.2.2.2节介绍iconv函数字符编码转换截断时提到过一个字符串枚举来尝试寻找能导致iconv（）函数异常而截断数据，也是fuzz非常典型的一种利用方式，当时fuzz用的代码非常粗糙，如下所示：
'
；
}
运行脚本后结果如下，当遇到不能正常转码的时候出现字符串截断，并且iconv（）函数报出一个notice提示，如图8-9所示。
图 8-9
8.6 不严谨的正则表达式
很多程序在判断文件上传扩展名、URL解析、入库参数等值的时候，都会使用正则表达式，正则表达式确实是一个非常方便和灵活的东西，能够帮助我们少写很多逻辑处理的代码，但是正则表达式也跟程序语言一样，规则写得不严谨，就会导致安全问题产生，至今已经有很多程序在这块栽了跟头，常见的几种问题如下。
1.没有使用^和$限定匹配开始位置
举例来说明，通过HTTP_CLIENT_IP来获取用户IP，其中这个值是可以被用户修改的，所以一般都会在服务端再过滤一下，看看是否被修改过，而过滤不严格的正则表达式很多都写成“\d+\.\d+\.\d+\.\d+”的形式，用代码来看看它的问题的在哪：
从这段代码的意思可以看出，程序员原本是想检查文件的扩展名，如果不是图片文件则不允许上传，但是在检查扩展名的时候，正则表达式里面扩展名前面的点（.）没有进行转义，导致变成了全匹配符。如果这时候提交的文件名是'xxx.php%00jpg'，则会绕过检查并写入一个PHP脚本文件。
8.7 十余种MySQL报错注入
利用数据库报错来显示数据的注入方式经常会在入侵中利用到，这种方法有一点局限性，需要页面有错误回显。而在代码审计中，经常会遇到没有正常数据回显的SQL注入漏洞，这时候我们就需要用报错注入的方式最快地拿到注入的数据。
早在很久以前就用到的数据类型转换报错是用得最多的一种方式，这种方式大多用在微软的SQL Server上，利用的是convert（）和cast（）函数，MySQL的报错SQL注入方式更多，不过多数人以为只有三种，分别是floor（）、updatexml（）以及extractvalue（）这三个函数，但实际上还有很多个函数都会导致MySQL报错并且显示出数据，它们分别是GeometryCollection（）、polygon（）、GTID_SUBSET（）、multipoint（）、multilinestring（）、multipolygon（）、LINESTRING（）、exp（），下面我们来看看它们具体的报错用法，需要注意的一点是，这些方法并不是在所有版本都通用，也有比较老的版本没有这些函数。
通常注入的SQL语句大多是"select*from phpsec where id=？”这种类型，这里我们就用这种形式来说明怎么利用，利用方式分别如下。
第一种：floor（）
注入语句：
id=1 and
（
select 1 from
（
select count
（
*
），
concat
（
user
（），
floor
（
rand
（
0
）
*2
））
x from information_schema.tables group by x
）
a
）
SQL语句执行后返回的错误信息如图8-10所示。
图 8-10
通过截图我们可以看到MySQL出现了报错，并且显示出了当前的连接用户名。
第二种：extractvalue（）
注入语句：
id = 1 and
（
extractvalue
（
1
，
concat
（