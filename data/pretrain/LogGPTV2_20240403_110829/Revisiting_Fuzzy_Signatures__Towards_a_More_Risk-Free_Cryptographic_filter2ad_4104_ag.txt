we have Pr[x ← X; e ← Φ : x + e ∈ AR(x)] ≥ 1 − ϵ. Hence, to
show correctness, it is sufficient to show that if x′ ∈ AR(x), then a
signature generated using x′ is always accepted under a verification
key generated using x.
Fix arbitrarily a message M and fuzzy data x, x′ ∈ X such that
Also, let ppFS = (G, ppLS) ← FS.Setup(1κ , F), vkFS = (h =
where β = H(д
x′ ∈ AR(x). Let(c, a) = Sketch(ppLS, x) and((cid:101)c , ˜a) = Sketch(ppLS, x′).
дa, c) ← FS.KeyGen(ppFS, x), and σFS = (β, z,(cid:101)c ) ← FS.Sign(ppFS, x′, M),
x′ ∈ AR(x), the correctness of ΠLinS implies ∆a = DiffRec(ppLS, c,(cid:101)c ) =
Now, consider an execution of FS.Vrfy(ppFS, vkFS, M, σFS). Since
˜a and R = дz ·
˜a, дr , M) = H( ˜h, R, M)
□
˜a− a. Hence, FS.Vrfy sets ˜h = h ·д∆a = дa+(a′−a) = д
˜h−β = дβ · ˜a+r · д− ˜a·β = дr . Hence, β = H(д
holds, and consequently FS.Vrfy outputs ⊤, as desired.
B.2 Omitted Proof of Security: Thm. 4.3
The complete proof of Thm. 4.3 is provided below. It establishes the
security of our fuzzy signature ΠDL
under the DLsketch assumption.
FS
Proof Overview. Before diving into the full proof, we provide
an overview. The proof is similar to that of Schnorr signature [29].
The main difference is that in our proof, we additionally have to
simulate the sketch c without knowledge of the secret fuzzy data x.
To this end, we use the linearity of the linear sketch (see Def. 3.1)
that informally stipulates that given a sketch c where (c, a) ←
Sketch(ppLS, x), there exists an algorithm Mc that simulates a fresh
sketch(cid:101)c for a proxy key ˜a with knowledge of only (c, ∆a := ˜a − a).
Specifically, since the DLsketch problem implicitly provides us with
an “initial” sketch c of the proxy key (or secret exponent) a, we can
easily construct an adversary B against the DLsketch problem that
simulates the EU-CMA security game to an adversary A by running
Mc. The full proof follows.
□
Proof. Let A be any PPT adversary against the fuzzy signature
that makes at most Q-signing queries and QH-random
scheme ΠDL
FS
oracle queries and breaks the EU-CMA security with probability ϵ.
Consider the following sequence of games, where the first game
is equivalent to the original EU-CMA game. Let Ei denote the event
that A wins in Gamei.
- Game1: We define Game1 as the actual game played between
the challenger and the adversary A. By assumption the winning
probability of A in this game is Pr[E1] = ϵ. In this game, the
public parameter ppFS and the verification key vkFS are generated
as follows:
(cid:2)pp ← S.Setup(1κ); ppLS ← LinS.Setup(F, Λ); ppFS ← (pp, ppLS);
x ← X; (c , a) ← Sketch(ppLS, x); vkFS = (h ← дa , c)(cid:3) .
(cid:2)ei ← Φ; ((cid:101)c i , ˜ai) ← Sketch(ppLS, x + ei); ri ← Zp;
βi ← H(д ˜ai , дri , Mi); zi ← βi · ˜ai + ri ; σFSi = (βi , zi ,(cid:101)c i)(cid:3) .
(6)
Furthermore, when A makes the i-th signing query (for i ∈ [Q]) on
message Mi, the challenger generates a signature σFSi as follows:
˜ai ← a + ∆ai ; ri ← Zp;
key ˜ai to create the sketch(cid:101)c i as in the previous game, the challenger
˜ai(= ˜hi) and ˜ai as ephemeral ver-
Throughout the proof, we call д
ification and signing keys, respectively, as it can be seen as an
intermediate key used during the signing phase.
- Game2: In this game, we change how the signing queries are
answered by the challenger. Instead of using the ephemeral signing
uses the auxiliary algorithm Mc of the linear sketch ΠLinS (Def. 3.1)
with input c and ei. Specifically, when A makes the i-th signing
query (for i ∈ [Q]) on message Mi, the challenger generates a
signature σFSi as follows: (where the difference from Game1 is
underlined.)
(cid:2)ei ← Φ; ((cid:101)c i , ∆ai) ← Mc(ppLS, c , ei);
βi ← H(д ˜ai , дri , Mi); zi ← βi · ˜ai + ri ; ; σFSi = (βi , zi ,(cid:101)c i)(cid:3) .
of ((cid:101)c i)i∈[Q] generated in Game1 and Game2 are identical. There-
By the linearity of the linear sketch scheme ΠLinS, the distribution
fore, we have Pr[E1] = Pr[E2].
- Game3: In this game, we further modify how the signing queries
are answered by the challenger. In the previous game, after(д
were set, the challenger checked whether the random oracle H was
set on that point. If not, it sampled a random βi ← Zp and set
the random oracle as H(д
˜ai , дri , Mi) := βi. Otherwise, it outputs
the already programmed output. In this game, the challenger will
abort the game when the input was already programmed. Since
the random oracle is ever programmed on at most (Q + QH) inputs,
and ri is randomly sampled from Zp, the probability of an abort
occurring on any of the signing query can be upper bounded by
Q · (Q + QH)/p. Hence, |Pr[E2] − Pr[E3]| ≤ Q · (Q + QH)/p.
- Game4: In this game, we make a final modification on how the
signing queries are answered by the challenger. In particular, we al-
ter the signing procedure so that the challenger no longer requires
the secret key a to sign; instead it will indirectly use the public
˜ai , дri , Mi)
Session 6D: Authentication and Privacy CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2060key h = дa. Conditioning on an abort not occurring, the chal-
lenger performs the following: (where the difference from Game3
is underlined.)
(cid:2)ei ← Φ; ((cid:101)c i , ∆ai) ← Mc(ppLS, c , ei); βi ← {0, 1}2κ ;
zi ← Zp; Ri ← дzi · (h · д∆ai )−βi ; H(h · д∆ai , Ri , Mi) := βi ;
σFSi = (βi , zi ,(cid:101)c i)(cid:3) . (7)
The only difference from the previous game is the order of which
ri and zi are constructed. In the previous game, a uniform random
ri ← Zp was sampled and then zi was set as βi · ˜ai + ri = βi · (a +
∆ai) + ri. However, in this game, a uniform random zi ← Zp is
sampled and then ri is implicitly set to zi − βi · (a + ∆ai). We say
“implicitly” since the challenger actually only computes ri in the
exponent, that is, Ri = дri . Since the joint distribution of (ri , zi) is
identical in Game3 and Game4, we conclude Pr[E3] = Pr[E4].
Summarizing thus far, we upper bound the advantage of A
winning the EU-CMA game as follows:
ϵ = Pr[E1] ≤
|Pr[Ei] − Pr[Ei +1]| + Pr[E4]
3
≤ Pr[E4] + Q · (Q + QH)
i =1
p
.
(8)
FS
= (β∗, z∗,(cid:101)c
Therefore, in order to conclude the proof, it suffices to show that
ϵ4 := Pr[E4] is negligible. Below, we show that an adversary A
against Game4 can be used to construct an adversary B against the
DLsketch assumption. This is a direct consequence of the forking
lemma [1, 28]. The description of B follows:
- B(G, ppLS, h, c) : Given a DLsketch instance, B simulates the Game4-
challenger to A by appropriately programming the random oracle.
Note that B can answer all queries via Eqs. (6) and (7). If A outputs
∗)), B then checks if it ever
a valid forgery (M∗, σ∗
replied back to A with β∗ to a random oracle query of the form
( ˜h, R, M∗). If not, B aborts. Otherwise, assume A queried ( ˜h, R, M∗)
to the random oracle as its I∗-th query, where I∗ ∈ [Q]. B then
reruns A on the same randomness tape and answers the random
oracle queries identically to the previous run up until the I∗-th
query and with fresh random outputs from the I∗-th query. Then,
′∗)), B
if A outputs another valid forgery (M′∗, σ ′∗
then checks if M′∗ = M∗, β′∗ (cid:44) β∗, and that β′∗ is the output of the
I∗-th random oracle query. If not B aborts. Otherwise, B outputs
where ∆a ← DiffRec(ppLS, c,(cid:101)c
z∗−z′∗
β∗−β′∗ − ∆a as the solution to the DLsketch problem and terminates,
Let us analyze algorithm B. It is easy to see that the first run
simulates the view of Game4 perfectly to A. Therefore, standard
argument using the forking lemma [1, 28] tells us that B outputs
something (i.e., will not abort) with probability ϵ4·( ϵ4
p ) and runs
in time about twice as A. Next, we show that condition on B out-
putting something, it solves the DLsketch problem with probability
1. Observe that since the two runs are identical up till the point A
makes the I∗-th random oracle query, we must have that A queried
( ˜h, R, M∗) to the random oracle as its I∗-th query in the second run
as well. Due to validity of the forgery in the two runs, we have
˜h = h · д∆a, R = дz∗ · ˜h−β∗, and R = дz′∗ · ˜h−β′∗. Simple calculation
shows that dlogд(h) = z∗−z′∗
β∗−β′∗ − ∆a. Therefore, B correctly solves
the DLsketch problem.
= (β′∗, z′∗,(cid:101)c
Q − 1
∗)
FS
The above shows
ϵ4 = Pr[E4] ≤
(cid:115)
Q ·
(cid:18)
ϵDLsketch(κ) +
(cid:19)
,
1
p
where ϵDLsketch(κ) is the maximum advantage of a PPT adversary
against the DLsketch problem. Combining this with Eq. (8) completes
the proof of Thm. 4.3.
□
C PROOF OF OUR LINEAR SKETCH
We prove Thm. 5.1 in Sec. 5.
Proof. To prove the theorem, we show that ΠLinS given in Sec. 5
satisfies correctness and linearity (Def. 3.1).
Correctness. Fix ppLS = (Λ = (Zp, +), UH), and x, x′ ∈ X such that
x′ ∈ AR(x), which implies CVL(x − x′) = 0. Let y = дL(x) and
y′ = дL(x′), and let
′) = (x′ − y′
, UH(B−1y′)) = Sketch(ppLS, x′).
(c, a) = (x − y, UH(B−1y)) = Sketch(ppLS, x),
(c′
, a
We have
∆y = CVL(c − c′) = CVL(cid:0)(x − y) − (x′ − y′)(cid:1)
∆a = UH(cid:0)B−1(∆y)(cid:1) = UH(cid:0)B−1(y′ − y)(cid:1)
(∗)
= CVL(x − x′) + y′ − y
where the equality (*) uses the fact that y, y′ ∈ L, and the equality
(**) uses CVL(x − x′) = 0. Using this, we see that
(∗∗)
= y′ − y,
(∗)
= UH(B−1y′) − UH(B−1y) = a
′ − a,
where the equality (*) uses the linearity of UH. This shows that
DiffRec(ppLS, c, c′) = a′ − a. Thus, ΠLinS satisfies correctness.
Linearity. We use the auxiliary algorithm Mc in Fig. 7. Fix ppLS =
(Λ = (Zp, +), UH) and x, e ∈ X. Let
(c, a) = (x − дL(x), UH(B−1
(c′
дL(x))) = Sketch(ppLS, x),
дL(x + e)))
′) = ((x + e) − дL(x + e), UH(B−1
= Sketch(ppLS, x + e)
In order to show the linearity of ΠLinS, it is sufficient to show that
the following equality holds:
, a
(cid:0)c + e − дL(c − e), UH(B−1
дL(c + e)(cid:1) = (c′
′ − a),
(9)
, a
since the left hand sice is exactly Mc(ppLS, c, e).
For the first element in Eq. (9), we have
c + e − дL(c − e) = x − дL(x) + e − дL(x − дL(x) + e)
= x − дL(x) + e −(cid:0)дL(x + e) − дL(x)(cid:1)
(∗)
= x + e − дL(x + e) = c′
,
UH(cid:0)B−1
where the equality (*) uses the property of дL that дL(x′ + y′) =
дL(x′) + y′ for x′ ∈ X and y′ ∈ L, and that дL(x) ∈ L.
For the second element in Eq. (9), we have
дL(c + e)(cid:1) = UH(cid:0)B−1(дL(x − дL(x) + e))(cid:1)
= UH(cid:0)B−1(дL(x + e) − дL(x))(cid:1)
дL(x)(cid:1)
= UH(cid:0)B−1
дL(x + e) − B−1
(∗)
Session 6D: Authentication and Privacy CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2061(∗∗)
= UH(B−1
= a
′ − a,
дL(x + e)) − UH(B−1
дL(x))
where the equality again uses the property of дL that дL(x′ + y′) =
дL(x′) + y′ for x′ ∈ X and y′ ∈ L, and the equality (**) uses
the linearity of UH. Hence, we can conclude that ΠLinS satisfies
linearity.
□
D FURTHER DETAILS ON TRIANGULAR
LATTICES
We introduce the formal definition of triangular lattices here: Let d
be any positive real and let Btri = [b1, . . . , bn] be a basis matrix
such that
(1) ∥bi ∥2 = d for all i ∈ [n], and
(2) bi · bj = d
the inner product.
2/2 for all i, j ∈ [n] with i (cid:44) j, where “·” denotes
We call Ltri = L(Btri) the triangular lattice (with basis length d).
Notice that changing the d has the effect of changing the size of the
acceptance region AR. That is, using a larger d results in a larger
AR.
A triangular lattice enjoys the property that for any x ∈ Rn,
we can calculate CVLtri(x) efficiently in terms of the dimension
n. Concretely, its computational cost is O(n
2). Since the following
description of the closest vector algorithm is invariant to the choice
of d, we assume d = 1. The details follow.
For simplicity, we use the representation with respect to Ltri for
the target vector x. If an input vector is with respect to the standard
basis, then it can be converted to one with the representation with
respect to Ltri by multiplying with B−1. Let x = x1b1 +· · · + xnbn
(where xi ∈ R for each i ∈ [n]) be the target vector for which
we would like to compute the closest vector y = CVLtri(x). For
simplicity, we first explain the case xi ∈ [0, 1) for each i ∈ [n], and
later explain how to extend it to the general case (xi ∈ R). In this
case, y = CVLtri(x) can be written as y = y1b1 + · · · + ynbn with
yi ∈ {0, 1} for each i ∈ [n].
Due to the property of the triangular lattice, for all i, j ∈ [n], we
have the following properties:
xi ≤ xj ⇒ (yi , yj) ∈ {(0, 0),(0, 1),(1, 1)},
xi ≥ xj ⇒ (yi , yj) ∈ {(0, 0),(1, 0),(1, 1)}.
In other words, the magnitude relation among the coordinates
{xi}i∈[n] of the target vector and that among the coordinates {yi}i∈[n]
of the closest vector are synchronized. Hence, the above two rela-
tions can be equivalently written as
xi ≤ xj ⇒ yi ≤ yj ,
xi ≥ xj ⇒ yi ≥ yj .
Using this fact, we consider the sorting of {(xi , yi)}i∈[n] in as-
cending order by using {xi}i∈[n] as the sorting key. Let (x∗