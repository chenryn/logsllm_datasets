### Capacities and Routing in Abilene Network

The capacities of the peering links connecting Abilene to the neighboring ASes are assigned based on the actual peering link capacities. The oblivious routing ratio for this new topology is 2.039.

Next, we determine the total traffic demands from a router in Abilene to ESNET and DREN. Due to the lack of reliable models for interdomain traffic matrices, we generate synthetic interdomain traffic demands using Abilene traces. We assume that a random portion (uniformly distributed between 0 and 0.5) of the traffic from a router in Abilene to the three border routers connecting to ESNET is actually destined for ESNET. We similarly derive interdomain traffic demands for DREN.

We apply the algorithm described in Section 5.1 to the derived topology and traffic demands, setting the penalty envelope to 2.2. We evaluate two failure scenarios:
1. A peering link connecting to ESNET (link 11) is down.
2. Both a peering link connecting to ESNET (link 11) and a peering link connecting to DREN (link 15) are down.

### Time Series Plot of MLU

Figure 18 shows the time series plot of the Maximum Link Utilization (MLU) for Thursday, March 11, 2004. At the 145th time interval, links 11 and 15 fail and remain down until the end of the day. The plot includes four curves:
- Optimal with no link failures (i.e., the performance if the links do not fail).
- Optimal with the link failures.
- COPE without link failures.
- COPE with the link failures.

We observe that when the two links fail, the MLU of COPE increases, but the performance penalty remains small.

### Performance Ratio under Link Failures

Figure 19 evaluates the performance ratio of COPE under link failures from March 8, 2004, to March 14, 2004. It plots the sorted performance ratios of COPE under the following three scenarios:
- No link failure.
- Only link 11 is down.
- Both links 11 and 15 are down.

We observe that when only link 11 is down, the performance degradation of the network under COPE is minimal. When both links are down, COPE has a higher performance ratio compared to the first two scenarios, but the performance is mostly within 30% of optimal. The performance ratios are always within the penalty envelope, and during most intervals, they are well below the penalty envelope.

### Extended Graph and Traffic Engineering

In the first step, we group external destination prefixes that share the same set of stable egress points into equivalence classes. Each equivalence class is represented by a virtual destination. We estimate the aggregated traffic demands to each virtual destination and obtain origin-destination (OD) traffic demands. Then, we construct an extended graph \( G' \), which includes the intradomain topology, the peers of the AS, the peering links, and the virtual destination nodes. Each virtual destination node is connected to its corresponding peers using virtual links with infinite capacity. We apply COPE to the resulting topology \( G' \) to compute a robust routing. This routing will tell us how traffic to a virtual destination should be split among its connected peers. Guided by these splitting ratios, we assign the egress point of each external destination prefix to approximate these ratios. This assignment can be implemented using BGP local preference values. Figure 16 summarizes the algorithm.

In the second step, using the splitting ratios, we first compute ingress-egress (IE) traffic matrices involving only intradomain nodes. Then, we use the IE matrices to compute a robust intradomain routing. To ensure robustness against large changes in traffic demands (e.g., traffic changes when a peer is down and many external destinations change egress points), we apply COPE to compute intradomain routing. The algorithm is shown in Figure 17. Note that unlike in Figure 16, here the inputs of COPE are the ingress-egress traffic matrices and the intradomain topology (which does not include peering links). This is important because we want to ensure that when peers or peering links go up and down, the penalty envelope of the resulting routing is not affected.

When the status of a peering link changes, the OD traffic that goes through this link is equally split over the alternative links. 

### Conclusions and Future Work

In this paper, we propose a novel scheme of traffic engineering: Common-Case Optimization with Penalty Envelope (COPE), a class of traffic engineering algorithms that optimize for expected scenarios while providing worst-case guarantees for unexpected scenarios. Using extensive evaluations based on real topologies and traffic traces, we show that COPE combines the best of prediction-based routing and oblivious routing, achieving efficient resource utilization under a wide variety of scenarios.

There are several avenues for future work:
1. Applying COPE for optimizing other performance metrics.
2. Implementing COPE in a real network to gain operational experience.
3. Finding a way to dynamically detect changes in common-case traffic and recompute the network.
4. Exploring other applications of the general principle behind COPE, which involves optimizing for common cases while providing worst-case guarantees.

### Acknowledgments

Hao Wang and Haiyong Xie are supported by NSF grants ANI-0238038 and CNS-0435201. Yang Richard Yang is supported in part by NSF grant ANI-0238038. We are grateful to Pascal Bihler, David Goldenberg, Yanbin Liu, and Zheng Ma for their valuable comments. We also thank the anonymous reviewers whose comments improved the paper.

### References

[References listed as provided]

### Appendix: Shortest-Path-Implementable Intradomain TE

The link-based routing computed by COPE can be implemented by path-based routing such as MPLS. In this section, we seek a mechanism to compute routing that can be implemented by OSPF-style shortest path routing, with an appropriate set of positive link weights. Formally, a routing \( f_{ab}(i, j) \) is shortest-path-implementable if there exists a set of positive link weights such that any path \( p \) carrying positive flows for OD pair \( a \to b \) is a shortest path from \( a \) to \( b \).

From the definition, it can be shown that a routing \( f_{ab}(i, j) \) is shortest-path-implementable if and only if there exists a set of link weights \( \{w(i, j) | (i, j) \in E\} \) and corresponding shortest distances \( \{U(i, j) | i, j \in V\} \), such that:

1. \( \forall (i, j) \in E : w(i, j) \geq 1 \)
2. \( \forall a, i \in V, i \neq a : U(a, a) = 0, U(a, i) > 0 \)
3. \( \forall a \in V, (i, j) \in E : U(a, i) + w(i, j) \geq U(a, j) \)
4. \( \forall a, b \in V, (i, j) \in E : f_{ab}(i, j) > 0 \Rightarrow U(a, i) + w(i, j) = U(a, j) \)

Given (1)-(4), if \( f_{ab}(i, j) > 0 \), then \( i \) is on the shortest path from \( a \) to \( j \), and by induction, \( i \) is also on the shortest path from \( a \) to \( b \).

Let
\[ SP(f, w, U) = \sum_{a, b \in V, (i, j) \in E} f_{ab}(i, j) [U(a, i) + w(i, j) - U(a, j)] \]

In view of (3) and the fact that \( f_{ab}(i, j) \geq 0 \), we have that \( SP(f, w, U) \geq 0 \) for any \( f, w \), and \( U \) satisfying (1)-(3), and (4) is equivalent to \( SP(f, w, U) = 0 \). Therefore, if we can compute a routing \( f \) and its associated \( w \) and \( U \) such that \( SP(f, w, U) = 0 \), we can set link weights of OSPF-style routing protocols according to \( w(i, j) \), ensuring that traffic is always routed through shortest paths.

Specifically for COPE, we introduce \( w \) and \( U \) as optimization variables and (1)-(3) as constraints. We can then add
\[ SP(f, w, U) = 0 \]
as a quadratic constraint to guarantee that the routing \( f \) computed is shortest path implementable. Alternatively, we can add
\[ \alpha \cdot SP(f, w, U) \]
as a quadratic penalty term to the objective of COPE, where \( \alpha > 0 \). The added penalty term \( \alpha \cdot SP(f, w, U) \) ensures that the optimization minimizes the original objective of COPE and \( SP(f, w, U) \). The scalar \( \alpha \) is a very small positive number introduced to ensure that the minimization of the original objective of COPE takes higher priority. When this alternative approach is used, the routing computed is not guaranteed to be shortest path implementable. However, if the computed routing \( f \), link weights \( w \), and corresponding shortest path distances \( U \) make \( SP(f, w, U) \) small, the routing \( f \) is "nearly" shortest path implementable.