capacities of the peering links connecting Abilene to the inserted
neighboring ASes are assigned using the actual peering link capac-
ities. The oblivious routing ratio for this new topology is 2.039.
Next we determine the total demands from a router in Abilene
to ESNET and DREN. Due to lack of good models for interdomain
trafﬁc matrices, we generate synthetic interdomain trafﬁc demands
using the Abilene traces as follows. We assume that a random por-
tion (uniform from 0 to 0.5) of the trafﬁc from a router in Abilene
to the 3 border routers connecting to ESNET is actually targeted to
ESNET. We similarly derive interdomain trafﬁc demands to DREN.
We apply the algorithm described in Section 5.1 to the above de-
rived topology and trafﬁc demands. We set the penalty envelope to
2.2. We evaluate two failure scenarios: 1) a peering link connect-
ing to ESNET (link 11) is down; and 2) both a link connecting to
ESNET (link 11) is down, and a link connecting to DREN (link 15)
is down.
Figure 18 shows the time series plot of MLU for Thursday, March
11, 2004. At the 145-th time interval, links 11 and 15 fail and re-
main failed until the end of the day. We include 4 curves in the plot:
optimal with no link failures (i.e., performance should the links not
fail), optimal with the link failures, COPE without link failures, and
COPE with the link failures. We observe that when the two links
peer
peer
(cid:10) which includes intradomain
Figure 15: Extended graph G
topology, peers, peering links (dashed links), and virtual nodes.
Each virtual node represents a set of external destinations with
the same set of egress peers.
Speciﬁcally, in the ﬁrst step, we group external destination pre-
ﬁxes that share the same set of stable egress points into an equiv-
alence class. Each equivalence class is represented by a virtual
destination. We estimate the aggregated trafﬁc demands to each
virtual destination, and obtain origin-destination (OD) trafﬁc de-
(cid:10)
, as illustrated in
mands. Then we construct an extended graph G
Figure 15, which includes the intradomain topology, the peers of
the AS, the peering links, and the virtual destination nodes. We
connect each virtual destination node with its corresponding peers
using virtual links with inﬁnite capacity. We apply COPE to the
(cid:10)
to compute a robust routing. In particular,
resulting topology G
this routing will tell us how trafﬁc to a virtual destination be split
among its connected peers. Guided by the splitting ratios, we as-
sign the egress point of each external destination preﬁx to approx-
imate these ratios. This assignment of egress point can be imple-
mented by BGP using local preference values. Figure 16 summa-
rizes the algorithm.
In the second step, using the splitting ratios, we ﬁrst compute
ingress-egress (IE) trafﬁc matrices involving only intradomain nodes.
Then we use the IE matrices to compute a robust intradomain rout-
ing. To be robustness against possible large changes in trafﬁc de-
mands (e.g., trafﬁc change when a peer is down and many external
destinations change egress points), we apply COPE to compute in-
tradomain routing. The algorithm is shown in Figure 17. Note that
unlike in Figure 16, here the inputs of COPE are the ingress-egress
trafﬁc matrices and the intradomain topology (which does not in-
clude peering links). This is important because we want to ensure
that when peers or peering links go up and down, the penalty enve-
lope of the resulted routing is not affected.
When the status of a peering link changes, the OD trafﬁc that
goes through this link is equally split over the alternative links that
COPE PE=2.2, with failures
COPE PE=2.2, no failure
optimal, with failures
optimal, no failure
link 11 and 15 fail
 0.16
 0.14
 0.12
 0.1
 0.08
 0.06
 0.04
 0.02
U
L
M
 0
 0
 50
 100
Interval
 150
 200
Figure 18: Times series plot of MLU: Abilene traces on Thurs-
day, March 11, 2004.
o
i
t
a
r
e
c
n
a
m
r
o
f
r
e
P
 2.2
 2
 1.8
 1.6
 1.4
 1.2
 1
 0.8
 0
link 11 and 15 fail
link 11 fails
no failure
 500
 1500
Intervals sorted by performance ratio
 1000
 2000
Figure 19: Scatter plot of sorted performance ratios: Abilene
traces from March 8, 2004 to March 14, 2004.
fail, the MLU of COPE increases; but the performance penalty is
small.
Figure 19 evaluates the performance ratio of COPE under link
failures, for the time period from March 8, 2004 to March 14, 2004.
It plots the sorted performance ratios of COPE under the following
three scenarios: (i) there is no link failure, (ii) only link 11 is down,
and (iii) both links 11 and 15 are down. We observe that when only
link 11 is down, the performance degradation of the network under
COPE is small. When two links are down, COPE has a higher per-
formance ratio compared to the ﬁrst two scenarios. However, even
then the performance is mostly within 30% of optimal. Finally, we
note that the performance ratios are always within the penalty en-
velope, and during most of the intervals, the performance ratios are
well below the penalty envelope.
Summary:While preliminary, these results show that COPE is promis-
ing in handling interdomain route dynamics. As part of future
work, we plan to further evaluate COPE in more diverse scenar-
ios.
6. CONCLUSIONS AND FUTURE WORK
In this paper, we propose a novel scheme of trafﬁc engineering:
common-case optimization with penalty envelope (COPE), a class
of trafﬁc engineering algorithms that optimize for the expected sce-
narios while providing worst-case guarantee for unexpected scenar-
ios. Using extensive evaluations based on real topologies and trafﬁc
traces, we show that COPE combines the best of prediction-based
routing and oblivious routing, and can achieve efﬁcient resource
utilization under a wide variety of scenarios.
There are several avenues for future work. First, in this paper
we focus on MLU. It is useful to apply COPE for optimizing other
performance metrics. Second, we are interested in implementing
COPE in a real network, and gain operational experience. Third, it
will be interesting to ﬁnd a way to dynamically detect that the com-
mon case trafﬁc has changed and the network should recompute.
Fourth, we believe that the general principle behind the design of
COPE, optimizing for the common-cases while providing worst-
case guarantee, can be applicable to many dynamic environments.
We plan to explore other applications of this general principle.
7. ACKNOWLEDGMENTS
Hao Wang and Haiyong Xie are supported by NSF grants ANI-
0238038 and CNS CNS-0435201. Yang Richard Yang is supported
in part by NSF grants ANI-0238038. We are grateful to Pascal Bih-
ler, David Goldenberg, Yanbin Liu, and Zheng Ma for their valu-
able comments. We are also grateful to the anonymous reviewers
whose comments improve the paper.
8. REFERENCES
[1] Abilene topology and trafﬁc dataset.
http://www.cs.utexas.edu/˜yzhang/research/AbileneTM/.
[2] Abilene Observatory.
http://abilene.internet2.edu/observatory/.
[3] S. Agarwal, C.-N. Chuah, S. Bhattacharyya, and C. Diot. The impact of BGP
dynamics on intra-domain trafﬁc. In Proceedings of Joint International
Conference on Measurement and Modeling of Computer Systems
(SIGMETRICS), New York, NY, June 2004.
[4] S. Agarwal, A. Nucci, and S. Bhattacharyya. Measuring the shared fate of IGP
engineering and interdomain trafﬁc. In Proceedings of the 13th International
Conference on Network Protocols (ICNP) ’05, Boston, MA, Nov. 2005.
[5] R. Ahuja, T. Magnanti, and J. Orlin. Network Flows. Prentice Hall, 1993.
[6] D. Applegate, L. Breslau, and E. Cohen. Coping with network failures: Routing
strategies for optimal demand oblivious restoration. In Proceedings of Joint
International Conference on Measurement and Modeling of Computer Systems
(SIGMETRICS), New York, NY, June 2004.
[7] D. Applegate and E. Cohen. Making intra-domain routing robust to changing
and uncertain trafﬁc demands: Understanding fundamental tradeoffs. In
Proceedings of ACM SIGCOMM ’03, Karlsruhe, Germany, Aug. 2003.
[8] D. Awduche, A. Chiu, A. Elwalid, I. Widjaja, and X. Xiao. Overview and
Principles of Internet Trafﬁc Engineering, RFC 3272, May 2002.
[9] D. O. Awduche. MPLS and trafﬁc engineering in IP networks. IEEE
Communication Magazine, pages 42–47, Dec. 1999.
[10] Y. Azar, E. Choen, A. Fiat, H. Kaplan, and H. Racke. Optimal oblivious routing
in polynomial time. In Proceedings of the 35th Annual Symposium on Theory of
Computing, 2003.
[11] N. Bansal, A. Blum, S. Chawla, and A. Meyerson. Online oblivious routing. In
Proceedings of ACM Symposium in Parallelism in Algorithms and Architectures
(SPAA), 2003.
[12] D. Bertsekas. Nonlinear Programming. Athena Scientiﬁc, 2nd edition edition,
1999.
[13] D. Bertsekas and R. Gallager. Data Networks. Prentice-Hall, Second Edition,
1992.
[14] D. Bertsimas, D. Pachamanova, and M. Sim. Robust linear optimization under
general norms. Operations Research Letters, 2004.
[15] T. Bressoud, R. Rastogi, and M. Smith. Optimal conﬁguration for BGP route
selection. In Proceedings of IEEE INFOCOM ’03, San Francisco, CA, Apr.
2003.
[16] T. C. Bressoud, R. Rastogi, and M. A. Smith. Optimal conﬁguration for BGP
route selection. In Proceedings of IEEE INFOCOM ’02, New York, NY, June
2002.
[17] M. Caesar and J. Rexford. BGP routing policies in ISP networks. IEEE Network
Magazine, Nov. 2005.
[18] ILOG CPLEX: optimization software. http://www.ilog.com/products/cplex/.
[19] A. Elwalid, C. Jin, S. Low, and I. Widjaja. MATE: MPLS adaptive trafﬁc
engineering. In Proceedings of IEEE INFOCOM ’01, Anchorage, AK, Apr.
2001.
[20] N. Feamster, J. Borkenhagen, and J. Rexford. Guidelines for interdomain trafﬁc
engineering. ACM SIGCOMM Computer Communications Review, Oct. 2003.
[21] N. Feamster and J. Rexford. Network-wide BGP route prediction for trafﬁc
engineering. In Proceedings of ITCOM, Boston, MA, Aug. 2002.
[22] N. Feamster, J. Winick, and J. Rexford. A model of BGP routing for network
engineering. In Proceedings of Joint International Conference on Measurement
and Modeling of Computer Systems (SIGMETRICS), pages 331–342, New
York, NY, June 2004. ACM Press.
[23] V. Firoiu, I. Yeom, and X. Zhang. A framework for practical performance
evaluation and trafﬁc engineering in IP networks. In IEEE ICT 2001, 2001.
[24] B. Fortz, J. Rexford, and M. Thorup. Trafﬁc engineering with traditional IP
routing protocols. IEEE Communication Magazine, Oct. 2002.
[25] B. Fortz and M. Thorup. Internet trafﬁc engineering by optimizing OSPF
weights. In Proceedings of IEEE INFOCOM ’00, Tel Aviv, Israel, Mar. 2000.
path properties. In Proceedings of Internet Measurement Workshop 2001, San
Francisco, CA, Nov. 2001.
[26] S. Kandula, D. Katabi, B. Davie, and A. Charny. Walking the tightrope:
[52] Y. Zhang and Z. Ge. Finding critical trafﬁc matrices. In Proceedings of DSN
Responsive yet stable trafﬁc engineering. In Proceedings of ACM SIGCOMM
’05, Philadelphia, PA, Aug. 2005.
[27] M. Kodialam, T. V. Lakshman, and S. Sengupta. Efﬁcient and robust routing of
highly variable trafﬁc. In Proceedings of Third Workshop on Hot Topics in
Networks (HotNets-III), San Diego, CA, Nov. 2004.
[28] Y. Li, J. Harms, and R. Holte. A simple method for balancing network
utilization and quality of routing. In Proceedings of ICCCN, San Diego, CA,
2005.
[29] Z. Ma, H. Wang, A. Krishnamurthy, A. Silberschatz, and Y. R. Yang. Achieving
robust and optimal trafﬁc engineering in current Internet. Technical report, Yale
University, 2006.
[30] L. Qiu, Y. R. Yang, Y. Zhang, and S. Shenker. Selﬁsh routing in Internet-like
environments. In Proceedings of ACM SIGCOMM ’03, Karlsruhe, Germany,
Aug. 2003.
[31] H. Racke. Minimizing congestion in general networks. In Proceedings of the
43rd Annual Symposium on Foudations of Computer Science, Oct. 2002.
[32] J. Rexford, J. Wang, Z. Xiao, and Y. Zhang. BGP routing stability of popular
destinations. In Proceedings of Internet Measurement Workshop, Marseille,
France, Nov. 2002.
[33] M. Roughan. First order characterization of Internet trafﬁc matrices. In
Proceedings of the 55th Session of the International Statistics Institute, Sydney,
Australia, Apr. 2005.
[34] M. Roughan, M. Thorup, and Y. Zhang. Trafﬁc engineering with estimated
trafﬁc matrices. In Proceedings of the Internet Measurement Conference,
Miami, FL, Oct. 2003.
[35] N. Spring, R. Mahajan, and D. Wetherall. Rocketfuel: An ISP topology
mapping engine. Available from http://www.cs.washington.edu/
research/networking/rocketfuel/.
[36] A. Sridharan, R. Guerin, and C. Diot. Achieving near optimal trafﬁc
engineering solutions in current OSPF/ISIS networks. In Proceedings of IEEE
INFOCOM ’03, San Francisco, CA, Apr. 2003.
[37] R. Teixeira, S. Agarwal, and J. Rexford. BGP routing changes: Merging views
from two ISPs. ACM SIGCOMM Computer Communications Review, Oct.
2005.
[38] R. Teixeira, N. Dufﬁeld, J. Rexford, and M. Roughan. Trafﬁc matrix reloaded:
Impact of routing changes. In Proceedings of Passive and Active Measurement,
Mar. 2005.
[39] R. Teixeira, T. Grifﬁn, A. Shaikh, and G. Voelker. Network sensitivity to
hot-potato disruptions. In Proceedings of ACM SIGCOMM ’04, Portland, OR,
Aug. 2004.
[40] R. Teixeira, A. Shaikh, T. Grifﬁn, and J. Rexford. Dynamics of hot-potato
routing in IP networks. In Proceedings of Joint International Conference on
Measurement and Modeling of Computer Systems (SIGMETRICS), New York,
NY, June 2004.
[41] S. Uhlig and O. Bonaventure. Implications of interdomain trafﬁc characteristics
on trafﬁc engineering. In J. Crowcroft and A. Feldmann, editors, Special issue
on trafﬁc engineering of European Transactions on Telecommunications. 2002.
[42] L. G. Valiant. A scheme for fast parallel communication. SIAM Journal on
Computing, 11(7):350–361, 1982.
[43] H. Wang, H. Xie, Y. R. Yang, L. E. Li, Y. Liu, and A. Silberschatz. Stable
egress route selection for interdomain trafﬁc engineering: Model and analysis.
In Proceedings of the 13th International Conference on Network Protocols
(ICNP) ’05, Boston, MA, Nov. 2005.
[44] Z. Wang, Y. Wang, and L. Zhang. Internet trafﬁc engineering without full mesh
overlaying. In Proceedings of IEEE INFOCOM ’01, Anchorage, AK, Apr.
2001.
[45] J. Wu, Z. M. Mao, J. Rexford, and J. Wang. Finding a needle in a haystack:
Pinpointing signiﬁcant BGP routing changes in an IP network. In Proceedings
of USENIX/ACM Symposium on Networked Systems Design and
Implementation (NSDI ’05), San Francisco, CA, May 2005.
[46] X. Xiao, A. Hannan, B. Bailey, and L. Ni. Trafﬁc engineering with MPLS in the
Internet. IEEE Network Magazine, pages 28–33, Mar. 2000.
[47] K. Xu, Z.-L. Zhang, and S. Bhattacharya. Proﬁling Internet backbone trafﬁc:
Behavior models and applications. In Proceedings of ACM SIGCOMM ’05,
Philadelphia, PA, Aug. 2005.
[48] T. Ye, H. Kaur, S. Kalyanaraman, K. Vastola, and S. Yadav. Optimization of
OSPF weights using online simulation. In Proceedings of International
Workshop on Quality of Service (IWQoS)), 2002.
[49] C. Zhang, Z. Ge, J. Kurose, Y. Liu, and D. Towsley. Optimal routing with
multiple trafﬁc matrices: Tradeoff between average case and worst case
performance. In Proceedings of the 13th International Conference on Network
Protocols (ICNP) ’05, Boston, MA, Nov. 2005.
[50] C. Zhang, Y. Liu, W. Gong, J. Kurose, R. Moll, and D. Towsley. On optimal
routing with multiple trafﬁc matrices. In Proceedings of IEEE INFOCOM ’05,
Miami, FL, Apr. 2005.
[51] Y. Zhang, N. Dufﬁeld, V. Paxson, and S. Shenker. On the constancy of Internet
’05, Yokohama, Japan, June 2005.
[53] Y. Zhang, M. Roughan, C. Lund, and D. L. Donoho. An information-theoretic
approach to trafﬁc matrix estimation. In Proceedings of ACM SIGCOMM ’03,
Karlsruhe, Germany, Aug. 2003.
[54] R. Zhang-Shen and N. McKeown. Designing a predictable Internet backbone
network. In Proceedings of Third Workshop on Hot Topics in Networks
(HotNets-III), San Diego, CA, Nov. 2004.
APPENDIX
A. SHORTEST-PATH-IMPLEMENTABLE
INTRADOMAIN TE
The link-based routing computed by COPE can be implemented
by path-based routing such as MPLS [29]. In this section, we seek a
mechanism which enables us to compute routing that can be imple-
mented by OSPF-style shortest path routing, with an appropriate set
of positive link weights. Formally, A routing fab(i, j) is shortest-
path-implementable if there exists a set of positive link weights,
such that any path p carrying positive ﬂows for OD pair a → b is a
shortest path from a to b.
From the above deﬁnition, it can be shown that a routing fab(i, j)
is shortest-path-implementable if and only if there exists a set of
link weights {w(i, j)|(i, j) ∈ E} and corresponding shortest dis-
tances {U(i, j)|i, j ∈ V}, such that:
∀(i, j) ∈ E : w(i, j) ≥ 1;
∀a, i ∈ V, i (cid:5)= a : U(a, a) = 0,U(a, i) > 0;
∀a ∈ V,(i, j) ∈ E : U(a, i) + w(i, j) ≥ U(a, j);
∀a, b ∈ V,(i, j) ∈ E :
fab(i, j) > 0 ⇒ U(a, i) + w(i, j) = U(a, j).
(15)
(16)
(17)
(18)
Given (15)-(18), if fab(i, j) > 0, then i is on the shortest path from
a to j, and by induction i is also on the shortest path from a to b.
fab(i, j)[U(a, i) + w(i, j)−U(a, j)].
Let
SP( f , w,U) = ∑
In view of (17) and the fact that fab(i, j)≥ 0, we have that SP( f , w,U)≥
0 for any f , w and U satisfying (15)-(17), and that (18) is equivalent
to SP( f , w,U) = 0. Therefore, if we can compute a routing f and its
associated w, U such that SP( f , w,U) = 0, we can set link weights
of OSPF-style routing protocols according to w(i, j), which makes
sure that trafﬁc is always routed through shortest paths.
a,b∈V,(i, j)∈E
Speciﬁcally for COPE, we now introduce w and U as optimiza-
tion variables and (15)-(17) as constraints. We can then add
SP( f , w,U) = 0
(19)
as a quadratic constraints to guarantee that the routing f computed
is shortest path implementable. Alternatively, we can add
α· SP( f , w,U)
(20)
as a quadratic penalty term to the objective of COPE, where α > 0.
The added penalty term α · SP( f , w,U) will ensure that the opti-
mization not only minimizes the orginal objective of COPE, but
also SP( f , w,U). The scaler α is a very small positive number
which is introduced to ensure that the minimization of the origi-
nal objective of COPE takes higher priority. When this alternative
approach is used, the routing computed is no longer guaranteed to
be shortest path implementable. However, if the computed rout-
ing f , link weights w and corresponding shortest path distances U
make SP( f , w,U) small, the routing f is “nearly” shortest path im-
plementable.