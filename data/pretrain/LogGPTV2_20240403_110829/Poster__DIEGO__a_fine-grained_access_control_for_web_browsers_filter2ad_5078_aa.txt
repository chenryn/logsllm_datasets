title:Poster: DIEGO: a fine-grained access control for web browsers
author:Ashar Javed
Fine-grained Access Control to Web Databases 
Alex Roichman 
Department of Computer Science,  
The Open University, Raanana, Israel 
PI:EMAIL 
ABSTRACT 
Before the Web era, databases were well-protected by using the 
standard  access  control  techniques  such  as  Views  and  SQL 
authorization  commands.  But  with  the  development  of  web 
systems, the number of attacks on databases increased and it has 
become  clear  that  their  access  control  mechanism  is  inadequate 
for web-based systems. In particular, the SQL Injection and other 
vulnerabilities  have  received  considerable  attention  in  recent 
years, and satisfactory solutions to these kinds of attacks are still 
lacking. 
We  present  a  new  method  for  protecting  web  databases  that  is 
based  on  fine-grained  access  control  mechanism.  This  method 
uses the databases’ built-in access control mechanisms enhanced 
with  Parameterized  Views  and  adapts  them  to  work  with  web 
applications.  The  proposed  access  control  mechanism 
is 
applicable  for  any  existing  databases  and  is  capable  to  prevent 
many  kinds  of  attacks,  thus  significantly  decreases  the  web 
databases’ attack surface. 
Categories and Subject Descriptors 
K.6.5 [Management of Computing and Information Systems]: 
Security and Protection—Unauthorized access (e.g., hacking, 
phreaking);  
H2.7 [Database Administration]: Security, integrity, and 
protection. 
General Terms 
Security 
Keywords 
Access control, web database security, database vulnerability, 
parameterized view, session key, rolling key 
1.  INTRODUCTION 
Information  is  the  most  valuable  asset  for  organizations.  In  our 
days  information  is  stored  in  databases  that  become  accessible 
Permission to make digital or hard copies of all or part of this work for 
personal or classroom use is granted without fee provided that copies are 
not  made  or  distributed  for  profit  or  commercial  advantage  and  that 
copies  bear  this  notice  and  the  full  citation  on  the  first  page.  To  copy 
otherwise,  or  republish,  to  post  on  servers  or  to  redistribute  to  lists, 
requires prior specific permission and/or a fee. 
SACMAT’07, June 20–22, 2007, Sophia Antipolis, France. 
Copyright 2007 ACM  978-1-59593-745-2/07/0006...$5.00. 
Ehud Gudes 
Department of Computer Science, 
The Open University, Raanana, Israel, and 
Department of Computer Science,  
Ben-Gurion University, Beer-Sheva, Israel 
PI:EMAIL 
from the Internet. The information disclosure from such databases 
may have very serious impact on organization business. So new 
access  control  approaches  for  databases  and  especially  for  web 
databases have become a dire necessity. 
New  web  applications  replace  the  old  systems.  This  is  an 
unstoppable  process  that  started  at  the  mid  1990’s  and  has 
accelerated  in  recent  years.  Databases  were  well-protected  from 
attacks  from  old  applications.  But  web  applications  place 
databases  in  a  new  situation  exposing  them  to  many  illegal 
accesses and attacks. 
Old  applications  were  run  from  the  users’  desktop.  These  users 
were fixed and known in advance and their number was limited. 
The applications usually opened a connection to the database and 
all  the  transactions  were  passed  via  the  same  connection.  This 
two-tier architecture resulted in a model where the user is working 
with an application layer that interfaces directly with the database 
layer. Consequently, the database would directly identify the user 
working with it, the computer from which she connects to, and the 
transactions that she runs. Thus it is quite easy to supply the user 
with  the  proper  authorizations  and  follow  up  single  user 
transactions to seek signs of intrusion, as all the transactions of the 
same user are passed via the same connection. 
On the other hand, web applications differ significantly from old 
applications  in  their  mode  of  working  with  databases.  These 
applications are run from the users’ browser windows. The users 
of web applications can be casual users and their number is not 
limited. The browser does not directly connect to the database, but 
instead transfer a request to a web server. The server processes the 
request and if required it performs a transaction to the database. 
The  result  of  this  three  (or  more)  -tier  architecture,  is  that  the 
database  does  not  identify  the  user  who  accesses  it.  From  the 
database  point  of  view,  the  user  accessing  the  database  is  the 
super-user of the web application server!  
Not only that the database does not identify the user who accesses 
it, but it is also impossible to follow transactions of the same user. 
This is derived from using the technique of connection pooling. In 
this technique the web application does not open a connection for 
each request and does not close it after performing a request, but 
instead, uses a connection pool mechanism where connections to 
the  database  are  stored.  Prior  to  performing  a  request,  the 
application pulls a vacant connection from the pool, runs a request 
on it and immediately returns it to the pool. This way the time to 
open and close the connection is saved per each request. A large 
number  of  users  can  also  be  satisfied  with  a  small  number  of 
connections,  so  that  the  application  works  more  efficiently  for 
each database request. 
But the situation described above has serious implications. First, 
no  user-based  access  control  can  be  applied  since  the  only 
recognized  user  is  the  super-user  of  the  web  application  server. 
Databases  cannot  differentiate  anymore  between  transactions  of 
different application users. The principle of minimal privilege is 
violated!  It  is  impossible  to  authorize  the  web  application  user 
with appropriate privileges: all application users have an access to 
the same data. This situation results with horizontal (e.g. a student 
has  access  to  the  data  of  another  student)  and  vertical  (e.g.  a 
student has access to a professor’s data) privileges escalation. No 
more  fine-grained  access  control  to  the  database  exists,  and  the 
only mean to prevent attack to web databases is in the application 
level.  Although  many  advances  have  been  made  in  developing 
secure  applications,  trusting  applications  which  are  developed 
under  time  constraints  by  developers  which  are  not  security 
experts,  presents  a  large  risk  to  the  database  and  therefore 
databases are threatened by these applications.  
In this paper we first demonstrate that preventing illegal accesses 
to the database by means of application layer is not effective, as it 
try to shield the vulnerable database by some middleware ad hoc 
methods. Instead, we suggest dealing with the root of the problem 
and  searching  for  new  generic  methods  for  protection  databases 
by  means  of  proper  access  control  mechanisms  that  will  be 
implemented  by  the  databases  themselves.  We’ll  suggest  the 
Parameter  Method  as  being  capable  of  preventing  attacks  on 
databases by the existing native database protection mechanisms.  
The parameter method allows transferring the identity of the user 
working  with  the  database  to  the  database  and  not  only  to  the 
application,  thus  solving  the  first  major  problem  of  fine-grained 
authorization  at  the  data  level.  The  parameter  method  will  also 
allow distinguishing between the requests of different users thus 
solving the second problem of user-session’s traceability for web 
systems. Therefore, developers of intrusion detection system will 
be  able  to  analyze  the  transactions  of  the  intruder  when  they 
discover  penetrations  to  databases,  as  these  transactions  are 
distinguished from transactions of legal users. 
We’ll present two design solutions for the parameter method. The 
first solution is based on the concept of application session key, 
and the second solution enhances the first one by the concept of a 
rolling key. Both methods will use the concept of parameterized 
views.  As  our  experiments  show,  the  web  site  based  on 
parameterized  views  is  much  secure  and  this  is  accomplished 
without a significant performance overhead. 
The  importance  of  our  solution  is  that,  on  the  one  hand,  it 
proposes the novel fine-grained access control mechanism to the 
web  database,  and,  on  the  other  hand,  it  enables  real-life 
development of secure Internet databases by using commercially 
available tools. 
The  next  section  discusses  the  background  of  web  databases 
access  control,  the  concept  of  parameterized  views  and  gives 
examples  for  attacks  such  as  SQL  injections.  Section  3  presents 
the  Related  work.  Section  4  presents  the  main  ideas  of  our 
approach. Section 5 discusses in detail the parameter method, and 
then  describes 
the 
parameterized  views  are  integrated  to  provide  the  required 
protection.  The  security  and  performance  of  our  approach  are 
the  parameter  method  and 
the  way 
in  Section  6,  and  Section  7  discusses  some 
  Section  8 
evaluated 
implementation  issues  of  parameterized  views. 
concludes and describes some future work. 
2.  BACKGROUND AND TERMINOLOGY 
2.1 Parameterized Views 
Views are the basis for protection and access control in relational 
databases, as they enable to determine for a user the only part of 
the database that interests her. But because of the existence of the 
most powerful user, the web server super-user that is connected to 
the database on behalf of all actual users, traditional views cannot 
be  used  as  means  of  access  control.  We  checked  many  existing 
open  source  web  applications  and  found  that  in  most  of  these 
systems there is no use of views as means of access control. 
Our  goal  is  to  revive  the  use  of  views  as  access  control 
mechanisms in the context of web systems. We’ll show that the 
replacement  of  a  traditional  view  in  the  context  of  web 
applications  is  the  parameterized  view.  The  parameterized  view 
will transfer the user’s identity to the database and the view will 
display the relevant data to this user accordingly, thus providing 
fine-grained access control to web databases. 
The  subject  of  parameterized  views  was  raised  in  academic 
discussions during the mid 1990’s mainly in the context of Object 
Oriented databases. Eder in [4] presents the problem of relational 
databases in which the views are dependent on the table’s name 
and  not  on  the  type  of  the table.  Actually,  the  predicate  (where 
clause)  of  each  view  is  fixed  and  there  is  no  way  to  modify  it 
dynamically.  
Jamil  in  [9]  displays  the  syntax  and  semantics  of  parameterized 
views  and  show  how  parameters  affect  their  predicate.  For 
instance,  a  definition  sentence  (DDL)  of  a  view  that  determines 
the grades of a specific student can appear like this: 
CREATE VIEW Student_Marks_View 
WITH  pStudent_No 
SELECT *  
FROM   Student_Marks_Table 
WHERE  Student_No = :pStudent_No 
Figure 1: definition of parameterized view 
The  content  of  this  view  depends  on  the  value  of  the  parameter 
pStudent_No. In Section 7 we’ll discuss in detail the issue of 
implementing  parameterized  views,  but  for  the  rest  of  the  paper 
we assume their existence. 
2.2  SQL Injection and Other Attacks 
As explained above, access control to web databases is currently 
implemented  by  applications  and  not  by  the  database.  Since  the 
applications accessing the database can be very heterogeneous and 
their access control can be very inconsistent, this can results in a 
situation  in  which  the  database  is  exposed  to  attacks  from  web 
systems. The description of such attacks appears in many articles 
and the attack that received special attention of researchers is the 
SQL  injection  attack  [18].  We  will  present  a  small  example  of 
such an attack: let’s assume that the application displays a salary 
of an employee whose number is 123 for the period chosen by the 
employer:  
strSQL= "SELECT  Salary  
  FROM    Salary_Table  
  WHERE   Employee_No = 123  
   AND     Salary_Date = ‘" +  
dateParam + "‘"
Figure 2: example of SQL with user input 
It’s possible to see that the SQL sentence is structured as a string 
and  the  parameter  is  concatenated  to  this  string.  In  a  proper 
situation,  the  user  keys  in  some  date  which  is  stored  in  the 
variable dateParam  and  concatenated  to  SQL.  But  if  the  user 
will type  01.2007’ or ‘1’ = ‘1  then we’ll get: 
SELECT Salary 
FROM Salary_Table WHERE Employee_No = 123 
AND  Salary_Date = ‘01/2007’ OR ‘1’ = ‘1’ 
Figure 3: example of SQL injection 
As the condition ‘1’ = ‘1’ always holds, the application will return 
the salaries of all the workers for all the periods. Such attack is 
possible, as the application works with a strong DB user who has 
a retrieval authorization from the entire Salary_Table. 
Another  type  of  an  attack  is  the  Parameters  Tampering  attack. 
Like the SQL injection attack, this attack takes advantage of the 
fact  that  many  programmers  rely  on  parameters  that  come  from 
the user. Attackers can easily modify these parameters to bypass 
the  security  mechanisms  and  attack  the  back-end  database.  But 
this attack is more difficult to detect than SQL injection: in SQL 
injection the structure of original SQL sentence is changed, but in 
parameter  tampering  the  structure  remains  the  same,  only  the 
parameter range is changed. 
For example, in the Book-store application [22] the customer can 
view  her  ordering.  For  each  order  she  can  request  its  details. 
When  this  happens,  the  application  sends  a  request  to  the  web 
server  with  the  parameter  of  customer’s  Order_No.  The  SQL 
sentence submitted by the application is as following: 
strSQL = "SELECT * FROM Orders_Table  
   WHERE Order No = " + orderParam
Figure 4:  SQL vulnerable to parameter tampering 
But if the intruder wants to view the details of another customer, 
she  can  change  the  value  of  orderParam  to  the  value  of  a 
different  order  that  does  not  belong  to  her  (bypassing  the 
application protection). In such a situation, she will be capable of 
retrieving the data of a different customer. 
As we can see, all the attacks on web databases are caused by the 
inadequate access control mechanism of databases. If we will be 
able to authorize each application user to the part in the database 
relevant only to her, we can minimize the effect of these attacks as 
the attacker will be restricted to attack only her data and not the 
data of different users! What we need then is fine-grained access 
control to web databases. 
3.  RELATED WORKS 
The  conventional  methods  for  providing  protection  in  databases 
rely  heavily  on  the  identity  of  the  entity  accessing  the  database 
(User,  Program-Id,  etc)  [2,  5].  Using  such 
the 
authorization provided by views and roles and the Grant/Revoke 
mechanism  can  be  applied  [6,  14].  Furthermore,  in  case  of  a 
identity, 
]3[
failure in authentication, after the fact intrusion detection may still 
be  used,  since  all  transactions  on  behalf  of  a  single  user  are 
properly  identified  and  can  be  analyzed  using  the  log.  But  as 
explained above, this situation does not exist anymore in the web 
environment, and  databases  are exposed  to  different  attacks  that 
are very hard to prevent and detect. 
Several  suggestions  were  published  in  the  literature  to  prevent 
SQL injection attacks such as: precise checking of parameters that 
come from the user, prohibition of running SQL sentences directly 
from  the  application,  but  instead,  running  database  stored 
procedures, use of prepared SQL statements etc [7, 11, 19]. 
Experiments trying to create signatures for known attacks such as 
SQL injections were also carried out. Mookhey and Burghate in 
[13]  present  a  way  to  structure  regular  expressions  for  known 
instances of SQL injections, but the research displayed by Maor 
and Shulman in [12] shows that such signatures are not effective. 
For  example,  instead  of  injecting  1  =  1  the  intruder  may  inject      
1 < 2 or any other predicate that always holds. Some suggestions 
are  very  sophisticated  methods,  such  as  the  use  of  SQLRand 
technique  proposed  by  Boyd  and  Keromytis  in 
.  The  last 
technique applies the concept of instruction randomization to each 
SQL sentence. In SQL injection attack, the intruder injects some 
reserved  SQL  word,  but  with  randomization  this  word  is 
unpredictable by the intruder. 
The recent tendency in the architecture of web applications is to 
build distributed multi-layered platforms (.NET, Java EE) where 
there exists  some  tier  that  offers  database access  control  service 
which  is  supposed  to  shield  the  database  from  attacks.  Oracle 