successful brute-force attacks very low. Android also enforces
strong protection mechanisms to keep the pattern password out
of the reach of adversary. The pattern password is stored at
/data/system/gesture.key and is only accessible to
the OS itself (ﬁle attribute: -rw-------). The raw data of
user’s touch traces are recorded in /dev/input/deviceX
(X is an integer and varies for different phones). This ﬁle is
only open to system-level processes belonging to the input
user group. Therefore, it is impossible to directly steal the
password unless the root privilege is obtained. Instead, our
attack aims to infer the user’s unlock pattern through a zero-
permission third-party app which is much stealthier.
Unlock Pattern and Interrupt. When user’s ﬁnger touches
and swipes on the screen, a sequence of interrupts will be
produced, which is similar to moving the mouse on desktop.
Particularly, in this case, different lines could result in different
interrupt sequences and a gap could be observed between
lines’ interrupts. As an example illustrated in Fig. 5, when
drawing the pattern 41235789,
the amount of interrupts
observed from the line 3 to 7 is more than other lines, and
gaps occur at dot 1, 3 and 7.
The correlation between interrupts and ﬁnger movement
motivates us to model unlock pattern through interrupt timing
analysis. When the interrupt time series is gathered, we ﬁrst
seek to segment it into sequences of incessant interrupts. For
each sequence, we look into the observed amount of interrupts
and map it to one type of swipe line (e.g., short v.s. long). By
combining the inferred swipe lines, we are able to recover the
pattern password with decent probabilities.
B. Inferring foreground app
The information about the app running in the foreground
(or foreground app) should be kept away from unauthorized
apps to prevent phishing attacks. However, the name of the
foreground app can be speculated through interrupt timing
analysis. Furthermore, we found certain app’s activity exhibits
distinctive interrupt pattern, causing privacy leaks.
d
e
r
r
u
c
c
o
t
p
u
r
r
e
t
n
i
f
o
t
n
u
o
m
A
1
turn on the screen
4 to 1
1 to 3
3 to 7
7 to 9
swipe to enter unlock pattern
gap
0
500
1000
1500
Time (millisecond)
2000
2500
3000
3500
Fig. 5. Interrupt time series for pattern 41235789 inputted by a participant.
Within 1 ms, at most 1 interrupt can be observed.
Foreground App Detection. The information of foreground
app is considered sensitive. If leaked, malicious apps can
it for phishing attacks. For example, when a ma-
exploit
licious app identiﬁes that an e-banking app is started,
it
can immediately pop up a phishing window covering the
foreground with the same UI as the login page of the e-
banking app and fool the user to type her credentials in the
fake UI [18], [19]. To mitigate this threat, Google mediated
the access to such information through permissions. For the
early versions of Android, an app with GET_TASKS permis-
sion granted can invoke the getRunningTasks() API to
learn the foreground app. Since Android 5.0, Google replaced
the GET_TASKS permission with a nonpublic system-level
permission REAL_GET_TASKS [7], which blocks the access
from third-party apps.
UI Refreshing and Interrupts. When an app is launched
by the user, a system service ActivityManagerService
will start the default main activity of this app and then the
functions onCreate(), OnStart(), and OnResume()
are executed sequentially for app loading. The process also
happens for Activity transition after running. At
the low
level, the foreground UI is continuously refreshed during these
processes. An app could choose the way UI is refreshed, and
we elaborate three popular UI refreshing related techniques
below:
• Splash Screen. It is usually shown when an app is started
by the user. In most cases, a splash screen displays the
promotion information (e.g., logo) or running status (e.g.,
network connectivity or data loading progress).
• Asynchronous Loading. When large data is being loaded
from remote servers or internal storage during UI transi-
tion, asynchronous loading technique is leveraged, which
separates UI rendering and data loading into isolated
threads. Therefore, UI is continuously updated instead
of being blocked during data loading process.
• Animation. App developers can choose animation ef-
fects during activity switching. Popular effects include
fading in, zooming, wiping, etc. Besides,
the anima-
tion is also used for rendering control objects such as
ImageButton.
Fig. 6 shows the launching process of a popular ﬁle sharing
app SHAREit [20]. The app ﬁrst displays a splash screen and
418418
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:16:05 UTC from IEEE Xplore.  Restrictions apply. 
In the end, we evaluate the effectiveness and performance of
our approach.
A. Touchscreen Controller and Interrupt
A set of mechanisms have been implemented in Android
system and the underlying devices to support the process from
electrical signal generation from user’s ﬁnger touching to event
dispatching to the receiving app. The complete touch event
processing ﬂow is introduced in Appendix VIII-A, and here
we only describe mechanism regarding interrupt.
IRQ from Touchscreen. Currently, most touchscreens use the
capacitive touch techniques to detect the change of electro-
static ﬁeld from human’s ﬁnger in order to capture its move-
ment. Typically, capacitive touchscreens consist of glass as
the insulator. The human body is also an electrical conductor,
so when the human body comes into contact with the touch-
screen, its electrostatic ﬁeld becomes distorted [22]. When the
ﬁnger keeps stationary on the screen, the electrostatic ﬁeld
stays unchanged. An IRQ is triggered by the touchscreen
hardware when a change happens on the electrostatic ﬁeld.
Therefore, a ﬁnger touching or leaving the screen will both
trigger one IRQ [23]. When user’s ﬁnger swipes upon the
touchscreen, a sequence of IRQ sequence will be produced as
the electrostatic ﬁeld keeps changing (consider the movement
as continuous touching and leaving screen). The amount and
frequency of IRQ ﬁred depend on the distance and speed
of ﬁnger’s movement. When the ﬁnger moves faster, more
IRQs will be generated, but the frequency can not exceed the
processing capability (about 135 Hz on Google Nexus 6).
Though some kinds of IRQs can be ignored by CPU, this
never happens to touchscreen due to its high priority in the
processing queue.
B. Attack Methodology
The correlation between ﬁnger’s movement on touchscreen
and IRQ inspires us to infer the unlock pattern through
monitoring the interrupt counter. As described in Section III-B,
an unlock pattern is composed of a set of swipe lines. Usually,
more interrupts can be observed from long swipe lines than
short ones. The ﬁnger usually pauses at the joint point between
two swipe lines, leading to a gap of interrupts. Therefore, by
analyzing interrupt data stream, at least partial information
on swipe lines (i.e., number and length) can be inferred.
Although the exact password pattern is not recovered, the
search space is signiﬁcantly reduced, and enumerating the
possible combinations only takes dozens of attempts and
minutes of unlocking and waiting time, as shown in our later
analysis.
We divide the attack method into the following stages. 1)
The public interrupt log ﬁle is regularly sampled, and the
stream of interrupt counts are preprocessed and divided into
grams (a segment of ever-changing interrupt counts). 2) We
model the unlock pattern into the transition of states (a state
is a cluster of the swipe lines with the same length) with
probabilities. 3) The candidate combinations of states ranked
with probabilities are produced for a testing unlock pattern.
Fig. 6. The launching process of SHAREit. The interrupt time series is shown
in the left top of Fig. 7.
the gradually transit the UI to the main Activity with fading
animation effect.
In the course of UI refreshing, Display Sub-System (DSS)
keeps notifying Android system through sending IRQs, and
our observation suggests the UI layout and refreshing strate-
gies usually yield distinct interrupt time series. One example
is splash screen, for which showing static image will generate
much fewer interrupts than showing animation. An app doing
asynchronous loading usually refreshes UI more frequently,
which leads to continuous occurrences of interrupts.
Fig. 7 shows the interrupts patterns for 6 apps during
loading (including e-banking, anti-virus, system pre-installed
apps, etc.). The x-axis is the time sequence with 50ms as the
interval. The y-axis is the aggregated amount of interrupts
observed during the 50ms interval. Their patterns can be
told apart even just through human eyes. This phenomenon
motivates us to model
the UI refreshing process through
interrupt time series and detect the foreground app.
C. Adversary Model
We assume the adversary here has tricked the victim to
install the malicious app targeting secret unlock pattern or app
UI information. The malicious app requires “zero permission”
from system for the inference attacks, as reading interrupt
statistics is unfettered. Such app is difﬁcult to be detected by
mobile anti-virus software or the user during installation time.
In addition, our later evaluation on performance shows battery
and time consumption is negligible. Thus, it is also hard to be
observed by the user at runtime.
For the ﬁrst attack, either the raw data of interrupts or the
inferred unlock pattern is sent out to the remote server of
adversary, based on where the analysis happens. Normally,
this requires the INTERNET permission to be granted. But as
discovered by previous works [21], certain covert channels can
be exploited (e.g., URI loading by browser) and the permission
requirement can be ignored. For the second attack, the UI
information can be used locally for subsequent attacks, like
phishing.
IV. UNLOCK PATTERN INFERENCE ATTACK
In this section, we present the attack inferring user’s An-
droid unlock pattern. We ﬁrst elaborate the internal mecha-
nisms of event processing on touchscreen. Then, we introduce
our approach in unlock pattern modeling and data processing.
419419
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:16:05 UTC from IEEE Xplore.  Restrictions apply. 
d
e
r
r
u
c
c
o
t
p
u
r
r
e
t
n
i
f
o
t
n
u
o
m
A
10
8
6
4
2
0
0
SHAREit 
[com.lenovo.anyshare.gps]
Total interrupts = 359 
20
Time Sequence (interval = 50 ms)
40
60
80
100
d
e
r
r
u
c
c
o
t
p
u
r
r
e
t
n
i
f
o
t
n
u
o
m
A
[com.yahoo.mobile.client.android.weather]
Yahoo Weather 
10
8
6
4
2
0
0
Total interrupts = 224 
20
Time Sequence (interval = 50 ms)
40
60
80
100
d
e
r
r
u
c
c
o
t
p
u
r
r
e
t
n
i
f
o
t
n
u
o
m
A
10
8
6
4
2
0
0
d
e
r
r
u
c
c
o
t
p
u
r
r
e
t
n
i
f
o
t
n
u
o
m
A
10
8
6
4
2
0
0
Express 100 
[com.Kingdee.Express]
Total interrupts = 228 
20
Time Sequence (interval = 50 ms)
40
60
80
HSBC Mobile Banking 
[com.htsu.hsbcpersonalbanking]
Total interrupts = 216 
20
Time Sequence (interval = 50 ms)
40
60
80
d
e
r
r
u
c
c
o
t
p
u
r
r
e
t
n
i
f
o
t
n
u
o
m
A
10
8
6
4
2
0
0
d
e
r
r
u
c
c
o
t
p
u
r
r
e
t
n
i
f
o
t
n
u
o
m
A
10
8
6
4