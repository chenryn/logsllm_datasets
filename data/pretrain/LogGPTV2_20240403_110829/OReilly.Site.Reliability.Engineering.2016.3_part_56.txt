### Exposing the Same API, Behavior, Configuration, and Controls

While different implementations of the framework (e.g., in C++ versus Java) cannot share code, the goal is to expose the same API, behavior, configuration, and controls for identical functionality. This approach allows development teams to choose the language platform that best fits their needs and experience, while SREs can still expect consistent behavior in production and use standard tools to manage the service.

### New Service and Management Benefits

The structural approach, founded on service frameworks and a common production platform and control surface, provides several new benefits:

#### Significantly Lower Operational Overhead
A production platform built on top of frameworks with strong conventions significantly reduces operational overhead for the following reasons:
- **Conformance Testing:** It supports robust conformance tests for coding structure, dependencies, tests, and coding style guides. This improves user data privacy, testing, and security conformance.
- **Built-in Features:** It includes built-in service deployment, monitoring, and automation for all services.
- **Easier Management:** It facilitates the management of large numbers of services, especially microservices, which are growing in number.
- **Faster Deployment:** An idea can be fully deployed to SRE-level production quality in just a few days.

#### Universal Support by Design
The constant growth in the number of services at Google means that most services cannot warrant full SRE engagement or maintenance. However, these services can still benefit from production features developed and maintained by SREs. This practice breaks the SRE staffing barrier, enabling SRE-supported production standards and tools for all teams, thus improving overall service quality across Google. Additionally, services implemented with frameworks automatically benefit from ongoing improvements to the framework modules.

#### Faster, Lower Overhead Engagements
The frameworks approach results in faster PRR (Production Readiness Review) execution due to:
- **Built-in Service Features:** As part of the framework implementation.
- **Faster Onboarding:** Typically accomplished by a single SRE during one quarter.
- **Reduced Cognitive Burden:** For SRE teams managing services built using frameworks.

These properties allow SRE teams to lower the assessment and qualification effort for service onboarding while maintaining high service production quality.

### A New Engagement Model Based on Shared Responsibility

The original SRE engagement model offered only two options: full SRE support or no SRE engagement. A production platform with a common service structure, conventions, and software infrastructure now allows SRE teams to provide support for the "platform" infrastructure, while development teams handle on-call support for functional issues with the service, such as bugs in the application code. Under this model, SREs assume responsibility for developing and maintaining large parts of the service software infrastructure, particularly control systems like load shedding, overload, automation, traffic management, logging, and monitoring.

This model represents a significant departure from traditional service management in two major ways:
1. **New Relationship Model:** It changes the interaction between SRE and development teams.
2. **New Staffing Model:** It enables the creation of production platforms with a separation of concerns between production platform support (handled by SREs) and service-specific business-logic support, which remains with the development team. These platform teams are staffed based on the need to maintain the platform rather than the number of services, and can be shared across products.

### Conclusion

Service reliability can be improved through SRE engagement, including systematic review and improvement of production aspects. Google SRE’s initial systematic approach, the Simple Production Readiness Review, standardized the SRE engagement model but was limited to services already in the Launch phase. Over time, the Early Engagement Model involved SRE earlier in the development lifecycle to "design for reliability." As demand for SRE expertise grew, the need for a more scalable engagement model became apparent, leading to the development of frameworks for production services. These frameworks encapsulate best practices, making it easier to build production-ready services.

All three engagement models are still practiced within Google, but the adoption of frameworks is becoming increasingly influential in building production-ready services, expanding SRE contributions, lowering service management overhead, and improving baseline service quality across the organization.

---

### Lessons Learned from Other Industries

**Written by Jennifer Petoff**
**Edited by Betsy Beyer**

A deep dive into SRE culture and practices at Google naturally leads to the question of how other industries manage their businesses for reliability. Compiling this book on Google SRE created an opportunity to speak to a number of Google’s engineers about their previous work experiences in various high-reliability fields to address the following comparative questions:
- Are the principles used in Site Reliability Engineering also important outside of Google, or do other industries tackle the requirements of high reliability in markedly different ways?
- If other industries also adhere to SRE principles, how are these principles manifested?
- What are the similarities and differences in the implementation of these principles across industries?
- What factors drive these similarities and differences?
- What can Google and the tech industry learn from these comparisons?

Several key themes fundamental to Site Reliability Engineering at Google are discussed throughout this text. To simplify our comparison of best practices in other industries, we distilled these concepts into four key themes:
- Preparedness and Disaster Testing
- Postmortem Culture
- Automation and Reduced Operational Overhead
- Structured and Rational Decision Making

This chapter introduces the industries profiled and the industry veterans interviewed. We define key SRE themes, discuss their implementation at Google, and provide examples of how these principles manifest in other industries for comparative purposes. We conclude with insights and discussions on the patterns and anti-patterns discovered.

#### Meet Our Industry Veterans

- **Peter Dahl:** Principal Engineer at Google, previously worked on high-reliability GPS and inertial guidance systems.
- **Mike Doherty:** Site Reliability Engineer at Google, previously a lifeguard and lifeguard trainer.
- **Erik Gross:** Software engineer at Google, previously designed algorithms for refractive eye surgery.
- **Gus Hartmann and Kevin Greer:** Experience in telecommunications, including E911 emergency response systems.
- **Ron Heiby:** Technical Program Manager for SRE at Google, previously worked on medical devices and automotive interfaces.
- **Adrian Hilton:** Launch Coordination Engineer at Google, previously worked on military aircraft and railway signaling systems.
- **Eddie Kennedy:** Project manager for Global Customer Experience at Google, previously a Six Sigma Black Belt process engineer in synthetic diamond manufacturing.
- **John Li:** Site Reliability Engineer at Google, previously a systems administrator and software developer in the finance industry.
- **Dan Sheridan:** Site Reliability Engineer at Google, previously a safety consultant in the civil nuclear industry.
- **Jeff Stevenson:** Hardware operations manager at Google, previously a nuclear engineer in the US Navy.
- **Matthew Toia:** Site Reliability Manager focused on storage systems, previously worked on air traffic control software.

#### Preparedness and Disaster Testing

“Hope is not a strategy.” This rallying cry of the SRE team at Google sums up what we mean by preparedness and disaster testing. The SRE culture is vigilant and constantly questioning: What could go wrong? What actions can we take to address these issues before they lead to an outage or data loss? Our annual Disaster and Recovery Testing (DiRT) drills address these questions head-on. In DiRT exercises, SREs push production systems to the limit and inflict actual outages to:
- Ensure systems react as expected.
- Identify unexpected weaknesses.
- Determine ways to make systems more robust to prevent uncontrolled outages.

Strategies for testing disaster readiness and ensuring preparedness in other industries include:
- **Relentless Organizational Focus on Safety:** Critical in industrial engineering contexts.
- **Attention to Detail:** Important in the nuclear Navy and other high-reliability environments.
- **Swing Capacity:** Used in the telecom industry to handle unpredictable system utilization.
- **Simulations and Live Drills:** Common in aviation and other critical industries.
- **Training and Certification:** Essential for ensuring personnel are prepared for emergencies.

These strategies help ensure that organizations are well-prepared to handle potential disasters and maintain high levels of reliability.