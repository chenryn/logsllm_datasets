        string command;
        command = "del  /F /Q C:\test.txt ";
        system(command.c_str());
    }
不过大家都知道，在Windows下删除文件其实不是真的删除， 只是把那个文件的某个属性从0标识成1，你看不见而已。这也是为什么被删除的数据，可以恢复的道理。
所以也有很多恶意代码使用删除文件工具，进行安全删除。如SDelete，它安全地删除没有任何特殊属性的文件相对而言简单而直接：安全删除程序使用安全删除模式简单地覆盖文件。较为复杂的是安全地删除
Windows NT/2K 压缩、加密和稀疏文件，以及安全地清理磁盘可用空间。 感兴趣的可以参考：
除了删除文件，一般还会清除日志Windows事件日志。Windows事件日志是计算机警报和通知的记录。Microsoft将事件定义为“系统或程序中需要通知用户或添加到日志中的任何重要事件”。事件有三个系统定义的来源：系统、应用程序和安全。执行与帐户管理、帐户登录和目录服务访问等相关的操作的对手可以选择清除事件以隐藏其活动。
程序命令执行清除事件日志：
        wevtutil cl system
        wevtutil cl application
        wevtutil cl security
#### 运行效果图
运行SDelete如图所示
![avatar]
清除系统日志
![avatar]
#### 检查及限制方案
  1. 在环境中检测与命令行函数（如 DEL，第三方实用程序或工具 ）相关的不常见的事件。
  2. 监视执行删除功能可能会导致的恶意活动。
  3. 监视已知的删除工具和安全删除工具 。
  4. 使用文件系统监视文件的不当删除或修改。例如，删除Windows事件日志。
#### 参考链接
  1. 
  2. 
  3. 
### 21、文件加壳
#### 原理及代码介绍
软件打包指的是对可执行文件进行压缩或加密。打包可执行文件会更改文件签名，以避免基于签名的检测。通常我们称软件打包为加壳。
当一个程序生成好后，很轻松的就可以利用诸如资源工具和反汇编工具对它进行修改，但如果程序员给程序加一个壳的话，那么至少这个加了壳的程序就不是那么好修改了，如果想修改就必须先脱壳。而且壳的解压缩是在内存中进行的，能检测到的杀毒软件就很少。大部分的程序是因为防止反跟踪，防止程序被人跟踪调试，防止算法程序不想被别人静态分析。加密代码和数据，保护你的程序数据的完整性。不被修改或者窥视你程序的内幕。
现在有很多加壳器，例如MPress和UPX。也可以写一个自己的加壳器。针对PE文件写加壳器需要对PE文件的格式和各种结构有充分的了解。
下面是加壳器的主要代码
    //增加区段
    void CPackPE::AddSection1(char*& pFileBuff, int& fileSize, const char* scnName, int scnSize)
    {
        // 1.1 增加文件头的区段个数
        GetFileHeader(pFileBuff)->NumberOfSections++;
        // 1.2 配置新区段的区段头
        IMAGE_SECTION_HEADER* pNewScn = NULL;
        pNewScn = GetLastSection(pFileBuff);
        PIMAGE_SECTION_HEADER pLastSection = pNewScn - 1;
        // 1.2.1 区段的名字
        memcpy(pNewScn->Name, scnName, 8);
        // 1.2.2 区段的大小(实际大小/对齐后大小)
        pNewScn->Misc.VirtualSize = scnSize;
        pNewScn->SizeOfRawData =
            aligment(scnSize,
            GetOptionHeader(pFileBuff)->FileAlignment);
        // 新区段的内存偏移 = 上一个区段的内存偏移+上一个区段的大小(内存粒度对齐后的大小)
        pNewScn->VirtualAddress =
            pLastSection->VirtualAddress +
            aligment(pLastSection->Misc.VirtualSize,
            GetOptionHeader(pFileBuff)->SectionAlignment);
        // 设置文件偏移和文件大小
            while (TRUE)
            {
                if (pLastSection->PointerToRawData)
                {
                    // 找到前一个非0的区段
                    pNewScn->PointerToRawData = pLastSection->PointerToRawData +
                        pLastSection->SizeOfRawData;
                    break;
                }
                pLastSection = pLastSection - 1;
            }
            // 1.2.4 区段的属性(0xE00000E0)
            pNewScn->Characteristics = 0xE00000E0;
            // 2. 修改扩展头的映像大小
            GetOptionHeader(pFileBuff)->SizeOfImage = pNewScn->VirtualAddress + pNewScn->Misc.VirtualSize;
            // 3. 扩充文件数据的堆空间大小
            int newSize = pNewScn->PointerToRawData + pNewScn->SizeOfRawData;
            char* pNewBuff = new char[newSize];
            memcpy(pNewBuff, pFileBuff, fileSize);
            // 释放旧的缓冲区
            delete[] pFileBuff;
            // 将新的缓冲区首地址和新的文件大小赋值给形参(修改实参)
            fileSize = newSize;
            pFileBuff = pNewBuff;
    }
这里是部分壳代码
    //修复IAT
    void DealwithIAT()
    {
        // 1.获取第一项iat项
        // 1.获取加载基址
        // 2.获取导入表的信息
        g_dwImageBase = (DWORD)MyGetModuleHandleW(NULL);
        PIMAGE_IMPORT_DESCRIPTOR pImport = (PIMAGE_IMPORT_DESCRIPTOR)(g_dwImageBase + g_conf.ImportTableRva);
        // 3.解析导入表信息
        HMODULE hMoudle;
        PDWORD TableIAT = NULL;
        DWORD ThunkRVA;
        while (pImport->Name)
        {
            //获取dll基址
            hMoudle = MyLoadLibraryA((char*)(pImport->Name + g_dwImageBase));
            // 是否是有效的IAT
            if (pImport->FirstThunk == 0)
            {
                ++pImport;
                continue;
            }
            TableIAT = (PDWORD)(pImport->FirstThunk + g_dwImageBase);
            if (pImport->OriginalFirstThunk == 0)
            {
                ThunkRVA = pImport->FirstThunk;
            }
            else
            {
                ThunkRVA = pImport->OriginalFirstThunk;
            }
            PIMAGE_THUNK_DATA lpThunkData = (PIMAGE_THUNK_DATA)(g_dwImageBase + ThunkRVA);
            DWORD dwFunName;
            while (lpThunkData->u1.Ordinal != 0)
            {
                // 名称导出
                if ((lpThunkData->u1.Ordinal & 0x80000000) == 0)
                {
                    PIMAGE_IMPORT_BY_NAME lpImportByName = (PIMAGE_IMPORT_BY_NAME)(g_dwImageBase + lpThunkData->u1.Ordinal);
                    dwFunName = (DWORD)&lpImportByName->Name;
                }
                else
                {
                    dwFunName = lpThunkData->u1.Ordinal & 0xFFFF;
                }
                DWORD dwFunAddr = (DWORD)MyGetProcAddress(hMoudle, (char*)dwFunName);
                DWORD dwOldProtect = 0;
                MyVirtualProtect(TableIAT, 4, PAGE_EXECUTE_READWRITE, &dwOldProtect);
                dwFunAddr = EncryptFun(dwFunAddr);
                *(TableIAT) = dwFunAddr;
                MyVirtualProtect(TableIAT, 4, dwOldProtect, &dwOldProtect);
                ++TableIAT;
                ++lpThunkData;
            }
            ++pImport;
        }
    }
     //修复目标PE的重定位表
    void FixPEReloc()
    {
        // 获取当前进程的加载基址
        DWORD dwImageBase = (DWORD)MyGetModuleHandleW(NULL);
        // 1. 修复目标PEg_dwImageBase
        PIMAGE_BASE_RELOCATION pReloc = (PIMAGE_BASE_RELOCATION)(g_conf.stcReloc.VirtualAddress + dwImageBase);//g_dwImageBase
        while (pReloc->SizeOfBlock)
        {
            PWORD pOffsetType = (PWORD)((DWORD)pReloc + sizeof(IMAGE_BASE_RELOCATION));
            DWORD dwCount = (pReloc->SizeOfBlock - sizeof(IMAGE_BASE_RELOCATION)) / sizeof(WORD);
            // 修改内存属性
            DWORD dwOldProtect = 0;
            MyVirtualProtect((PBYTE)dwImageBase + pReloc->VirtualAddress, pReloc->SizeOfBlock, PAGE_EXECUTE_READWRITE, &dwOldProtect);
            // 循环检查重定位项
            for (DWORD i = 0; i > 12;
                // 去除无效的重定位项
                if (!*pOffsetType) continue;
                if (dwType == 3)
                {
                    // 获取此重定位项指向的指针
                    DWORD dwPointToRVA = dwOffset + pReloc->VirtualAddress;
                    PDWORD pdwPtr = (PDWORD)(dwPointToRVA + dwImageBase);
                    // 计算增量值
                    DWORD dwIncrement = dwImageBase - g_conf.dwDefaultImageBase;
                    DWORD OldProtect = 0;
                    MyVirtualProtect((PBYTE)(pdwPtr), 0x4, PAGE_EXECUTE_READWRITE, &OldProtect);
                    // 修改重定位项
                    *((PDWORD)pdwPtr) += dwIncrement;
                    MyVirtualProtect((PBYTE)(pdwPtr), 0x4, OldProtect, &OldProtect);
                }
                // 下一轮循环
                ++pOffsetType;
            }
            // 恢复内存访问属性
            MyVirtualProtect((PBYTE)dwImageBase + pReloc->VirtualAddress, pReloc->SizeOfBlock, dwOldProtect, &dwOldProtect);
            // 下一个重定位块
            pReloc = (PIMAGE_BASE_RELOCATION)((DWORD)pReloc + pReloc->SizeOfBlock);
        }
    }
通过加壳，修改了文件的大小，签名等信息，可以绕过基于特征的检测，防止被静态分析，是恶意代码常用的伎俩。
#### 运行效果图
目标程序被加壳后，发现PE文件多了一个区段，这里面就是壳程序
#### 检查及限制方案
使用文件扫描来查找已知的软件包装器或包装技术的工件。
#### 参考链接
## 三、结语
防御逃逸所拥有的技术是MITRE
ATT&CK框架所述战术中最多的，详细介绍了防御逃逸技术的不同方向以及相同方向上的不同手段。通过上文的介绍，大家可以看到达到相同的目的可以用到不同的技术手段。当然随着防御者根据这些
**策略** 的 **更新** ，攻击者也在寻找 **更隐蔽** 的方法来绕过安全工具的 **检测** 和 **防御**
。这就要求防御者能够与时俱进，紧跟技术发展的脚步。本文到此就结束了，希望大家都能有所收获！
* * *