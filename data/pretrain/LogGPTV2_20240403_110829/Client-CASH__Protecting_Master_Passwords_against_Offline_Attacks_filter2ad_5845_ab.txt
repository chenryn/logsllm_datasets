(in expectation).
We use O to denote the range of the SelPreds function (e.g., the space of all valid predicate sequences of
length n − 1, where n denotes the maximum number of rounds of hashing for Reproduce ). We adopt the
5
following notational conventions: Given a randomized algorithm like SelPreds we use o ← SelPreds(pwd)
to denote a random sample from the distribution induced by an input pwd. If we ﬁx the random input bits r
then we will use o := SelPreds(x; r) to denote the deterministic result. We will use P to denote the space
of all possible passwords that the user might select.
For a user with password pwdu and predicate sequence ou, the hash used by that user on the instance of
S(pwdu,ou)
= {o ∈ O S(pwd, o) = j} ⊆ O to denote the subset
.
a correct password is H
k
of outcomes which yield stopping time j for the password pwd. Finally, we will use the parameter  > 0 to
quantify the maximum amount of information leaked about a user’s password by the output o ∈ O of the
SelPreds function. For readers familiar with the notion of -diﬀerential privacy we remark that we use the
same notation intentionally.
. We will use Oj,pwd
4 Design of the Mechanism
In the previous section we outlined the Client-CASH mechanism using the randomized algorithm SelPreds in
a black-box manner. We now examine the exact formulation of this algorithm.
4.1 Security Requirements
The probability that SelPreds(pwd) yields a particular outcome o ∈ O may depend on the input password
pwd. Indeed, our goal is to introduce a cost asymmetry so that, in expectation, the stopping time S(pwd, o)
for the correct password is less than stopping time S(pwd(cid:48), o) for any incorrect passwords pwd(cid:48) (cid:54)= pwd. One
natural way to achieve this asymmetry might be to deﬁne a family of predicates
(cid:40)
Ppwd,j(x) =
if x ≡ H j
else
k (pwd, su)
1
0
for each password pwd ∈ P and j  i − 1. Thus,
denotes the conditional probability that S(pwdg, o) = i given that S(pwdg, o) > i − 1.
9
Because the user selects passwords uniformly at random from the set P we might conjecture that the
optimal adversary will follow the same strategy for every password guess (e.g., for some i ≤ n the optimal
adversary will hash each guess pwdg for min{i,S(pwdg, o)} rounds before moving on to the next guess). This
= {b ∈ FB : ∀b(cid:48) ∈ FB, bi ≥ b(cid:48)
intuition turns out to be correct. Formally, Ai
i} denotes the set of strategies
.
in which the adversary tries each password guess for min{i,S(pwdg, o)} rounds before giving up. Our next
results states that for some i ≤ n the adversary will follow a strategy in Ai.
Theorem 2 Assume that O is constructed as in Theorem 1. The dominant adversary strategies are given
by the collection of sets Ai = {b ∈ FB : ∀(cid:126)b(cid:48) ∈ FB, bi ≥ b(cid:48)
Ai. Then
B :=
Pr[E1]b1 +
i} for 1 ≤ i ≤ n. Let F ∗
n(cid:88)
(cid:18) (cid:96)j
i−1(cid:89)
Pr[Ei]bi
(cid:96)j − 1
i=2
j=1
n(cid:83)
(cid:19)
i=1
Padv,B =
B
k|P| max
b∈F ∗
B
Discussion. In our analysis of the adversary we assume that the user picks passwords uniformly at random