为了从 Gradle 运行 JaCoCo，我们需要通过在插件部分添加以下一行来将`jacoco`插件添加到`build.gradle`文件中:
```
apply plugin: "jacoco"
```
接下来，如果我们想在代码覆盖率太低的情况下使 Gradle 失败，我们也可以将以下配置添加到`build.gradle`文件中:
```
jacocoTestCoverageVerification {
     violationRules {
          rule {
               limit {
                    minimum = 0.2
               }
          }
     }
}
```
该配置将最小代码覆盖率设置为 20%。我们可以使用以下命令运行它:
```
$ ./gradlew test jacocoTestCoverageVerification
```
该命令检查代码覆盖率是否至少为 20%。您可以使用最小值来查看构建失败的级别。我们还可以使用以下命令生成测试覆盖率报告:
```
$ ./gradlew test jacocoTestReport
```
你也可以看看`build/reports/jacoco/test/html/index.html`文件中的全覆盖报告:
![](img/f40840a3-e0e7-47f2-810c-53cd492ae0f6.png)
# 添加代码覆盖阶段
向管道添加代码覆盖阶段与前面的阶段一样简单:
```
stage("Code coverage") {
     steps {
          sh "./gradlew jacocoTestReport"
          sh "./gradlew jacocoTestCoverageVerification"
     }
}
```
添加这个阶段后，如果任何人提交的代码没有被测试很好地覆盖，构建将会失败。
# 发布代码覆盖率报告
当覆盖率低并且管道失败时，查看代码覆盖率报告并找出哪些部分还没有被测试覆盖是很有用的。我们可以在本地运行 Gradle 并生成覆盖率报告；不过，如果 Jenkins 给我们看报告就更方便了。
为了在 Jenkins 中发布代码覆盖率报告，我们需要以下阶段定义:
```
stage("Code coverage") {
     steps {
          sh "./gradlew jacocoTestReport"
          publishHTML (target: [
               reportDir: 'build/reports/jacoco/test/html',
               reportFiles: 'index.html',
               reportName: "JaCoCo Report"
          ])
          sh "./gradlew jacocoTestCoverageVerification"
     }
}
```
这个阶段将生成的 JaCoCo 报告复制到 Jenkins 输出。当我们再次运行构建时，我们应该会看到一个指向代码覆盖率报告的链接(在左侧的菜单中，在“立即构建”下面)。
To perform the `publishHTML` step, you need to have the **HTML Publisher** plugin installed in Jenkins. You can read more about the plugin at [https://jenkins.io/doc/pipeline/steps/htmlpublisher/#publishhtml-publish-html-reports](https://jenkins.io/doc/pipeline/steps/htmlpublisher/#publishhtml-publish-html-reports).
我们已经创建了代码覆盖阶段，它显示了未经测试的代码，因此容易受到 bug 的影响。让我们看看还能做些什么来提高代码质量。
If you need code coverage that is more strict, you can check the concept of mutation testing and add the PIT framework stage to the pipeline. Read more at [http://pitest.org/](http://pitest.org/).
# 静态代码分析
您的代码可能工作得非常好，但是，代码本身的质量呢？我们如何确保它是可维护的，并以良好的风格编写？
静态代码分析是检查代码而不实际执行代码的自动过程。在大多数情况下，这意味着要检查源代码中的一些规则。这些规则可能适用于广泛的方面；例如，所有公共类都需要有一个 Javadoc 注释；一行的最大长度是 120 个字符，或者如果一个类定义了`equals()`方法，那么它也必须定义`hashCode()`方法。
对 Java 代码执行静态分析最流行的工具是 Checkstyle、FindBugs 和 PMD。让我们看一个例子，并使用 Checkstyle 添加静态代码分析阶段。我们将分三步进行:
1.  添加检查样式配置。
2.  添加 Checkstyle 阶段。
3.  或者，在 Jenkins 发布检查样式报告。
# 添加检查样式配置
为了添加 Checkstyle 配置，我们需要定义用于检查代码的规则。我们可以通过指定`config/checkstyle/checkstyle.xml`文件来做到这一点:
```
```
配置只包含一个规则:检查公共类、接口和枚举是否用 Javadoc 记录。如果不是，构建将失败。
The complete Checkstyle description can be found at [http://checkstyle.sourceforge.net/config.html](http://checkstyle.sourceforge.net/config.html).
我们还需要将`checkstyle`插件添加到`build.gradle`文件中:
```
apply plugin: 'checkstyle'
```
然后，我们可以用下面的代码运行`checkstyle`:
```
$ ./gradlew checkstyleMain
```
就我们的项目而言，它应该会导致失败，因为我们的公共类(`Calculator.java`、`CalculatorApplication.java`、`CalculatorTest.java`、`CalculatorApplicationTests.java`)都没有 Javadoc 注释。我们需要通过添加文档来修复它，例如，在`src/main/java/com/leszko/calculator/CalculatorApplication.java`文件的情况下:
```
/**
 * Main Spring Application.
 */
@SpringBootApplication
public class CalculatorApplication {
     public static void main(String[] args) {
          SpringApplication.run(CalculatorApplication.class, args);
     }
}
```
现在，构建应该会成功。
# 添加静态代码分析阶段
我们可以在管道中添加一个`Static code analysis`阶段:
```
stage("Static code analysis") {
     steps {
          sh "./gradlew checkstyleMain"
     }
}
```
现在，如果任何人提交了一个没有 Javadoc 的公共类的文件，构建将会失败。
# 发布静态代码分析报告
非常类似于 JaCoCo，我们可以向 Jenkins 添加 Checkstyle 报告:
```
publishHTML (target: [
     reportDir: 'build/reports/checkstyle/',
     reportFiles: 'main.html',
     reportName: "Checkstyle Report"
])
```
它生成一个指向 Checkstyle 报告的链接。
我们增加了静态代码分析阶段，这有助于在团队或组织内部发现错误和标准化代码风格。
# 声纳员
SonarQube 是最广泛的源代码质量管理工具。它支持多种编程语言，可以被视为我们所看到的代码覆盖率和静态代码分析步骤的替代方案。实际上，它是一个独立的服务器，聚合了不同的代码分析框架，比如 Checkstyle、FindBugs 和 JaCoCo。它有自己的仪表板，并与 Jenkins 集成良好。
我们可以安装 SonarQube，在那里添加插件，并在管道中添加一个“声纳”阶段，而不是在管道中添加代码质量步骤。这个解决方案的优势在于，SonarQube 提供了一个用户友好的 web 界面来配置规则和显示代码漏洞。
You can read more about SonarQube on its official page [https://www.sonarqube.org/](https://www.sonarqube.org/).
# 触发器和通知
到目前为止，我们总是通过点击“立即构建”按钮来手动构建管道。它有效，但不太方便。所有团队成员都必须记住，在提交到存储库之后，他们需要打开 Jenkins 并开始构建。管道监控也是如此；到目前为止，我们手动打开了 Jenkins 并检查了构建状态。在本节中，我们将看到如何改进流程，以便管道自动启动，并在完成后通知团队成员其状态。
# 扳机
启动生成的自动操作称为管道触发器。在 Jenkins，有很多选择；然而，它们都归结为三种类型:
*   外部的
*   轮询配置管理(源代码管理)
*   计划的构建
让我们看看他们每个人。
# 外部的
外部触发因素很容易理解。它们意味着 Jenkins 在被通知程序调用后开始构建，通知程序可以是另一个管道构建、SCM 系统(例如 GitHub)或任何远程脚本。
下图显示了通信:
![](img/51bf1a24-ebcd-48de-b743-4bea791ba412.png)
GitHub 在推送至存储库并开始构建后触发 Jenkins。
要以这种方式配置系统，我们需要以下设置步骤:
1.  在 Jenkins 安装 GitHub 插件。
2.  为 Jenkins 生成一个密钥。
3.  设置 GitHub 网络钩子并指定 Jenkins 地址和密钥。
在最受欢迎的配置管理提供商的情况下，总是提供专用的 Jenkins 插件。
还有一种更通用的方式，通过对端点`/job//build?token=`的 REST 调用来触发 Jenkins。出于安全考虑，需要在 Jenkins 中设置`token`，然后在远程脚本中使用。
Jenkins must be accessible from the SCM server. In other words, if we use the public GitHub to trigger Jenkins, then our Jenkins server must be public as well. This also applies to the generic solution; the `` address must be accessible.
# 轮询单片机
轮询 SCM 触发器有点不太直观。下图显示了通信:
![](img/ea1d08c6-7d01-477e-9d0f-3639f4aabc12.png)
Jenkins 定期调用 GitHub 并检查是否有任何推送到存储库。然后，它开始构建。这听起来可能与直觉相反，但是，使用这种方法至少有两种好的情况:
*   Jenkins 在防火墙网络中(GitHub 无法访问)
*   提交很频繁，构建需要很长时间，因此在每次提交后执行构建会导致过载
**轮询 SCM** 的配置也比较简单，因为从 Jenkins 到 GitHub 的连接方式已经设置好了(Jenkins 从 GitHub 检查代码，所以它需要有访问权限)。在我们的计算器项目中，我们可以通过在管道中添加`triggers`声明(就在`agent`之后)来设置自动触发器:
```
triggers {
     pollSCM('* * * * *')
}
```
首次手动运行管道后，设置自动触发器。然后，它每分钟检查一次 GitHub，对于新的提交，它开始构建。为了测试它是否如预期的那样工作，您可以将任何东西提交并推送到 GitHub 存储库中，并看到构建开始。
我们用神秘的`* * * * *`作为`pollSCM`的论据。它指定了 Jenkins 应该多久检查一次新的源代码更改，并以 cron 样式的字符串格式表示。