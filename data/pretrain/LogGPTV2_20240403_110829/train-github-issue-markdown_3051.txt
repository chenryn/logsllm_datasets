Let's say we have a component `Foo` which expects to get a single child:
     class Foo extends React.Component {
        render () {
          const {children} = this.props;
          return React.Children.only (children);
        }
    }
This works as expected if I render `` since `children` then
maps to a single child, and `React.Children.only()` will happily return the
only child.
However, when using `Foo` like this, it throws:
    class Bar extends React.Component {
      render () {
        const keys = ['a'];
        return {keys.map (k => )};
      }
    }
Now, `Foo` gets an array with one `` element.
I was expecting `React.Children.only()` to also handle this case and return
the only child in the array. But obviously, it does not.
Now, I have to write this instead:
     class Foo extends React.Component {
        render () {
          const {children} = this.props;
          return (Array.isArray (children)) ? children[0] : React.Children.only (children);
        }
    }
Is this by design? Did I miss something here?