exists that allows a malicious application to open local files inside another application's WebView. This opens
the exposed WebView to all the available exploitation techniques. You can disable filesystem access from a
WebView as follows:
webview.getSettings().setAllowFileAccess(false);
This will not stop the WebView from being able to load from its own application's resources or assets folder
using file:///android_res and file:///android_asset. To lock down the WebView even further, you should
not allow loaded pages from the filesystem to access other files on the filesystem. This will stop these loaded
pages from exfiltrating other files out to the Internet. The following setting helps protect against this:
webview.getSettings().setAllowFileAccessFromFileURLs(false);
Furthermore, you can protect a WebView from being able to access content providers on the device by using the
following setting:
webview.getSettings().setAllowContentAccess(false);
Web Content Validation
If a WebView is connecting to a pre-defined set of pages that are known to the developer before the release of
the application, then performing additional checks to ensure that no other page is attempting to load inside the
WebView is best. You can do so by overriding the WebViewClient's shouldInterceptRequest method as follows:
@Override
public WebResourceResponse shouldInterceptRequest (final WebView view,
String url)
{
Uri uri = Uri.parse(url);
if (!uri.getHost.equals("www.mysite.com") &&
!uri.getScheme.equals("https"))
{
return new WebResourceResponse("text/html", "UTF-8",
new StringBufferInputStream("alert('Not happening')")
}
else
{
return super.shouldInterceptRequest(view, url);
}
}
The previous example will load pages from www.mysite.com only when they are being loaded over HTTPS.
Configuring the Android Manifest
The exploitation of some issues on Android do not arise from insecure code, but rather a lack of understanding
of each configuration available in the Android manifest. This section contains some configurations to be aware
of in the manifest file.
Application Backups
To ensure that an attacker with physical access to a device is not able to download the contents of an
application's private data directory using "adb backup," you can implement a single fix. In the application's
AndroidManifest.xml file, set the android:allowBackup attribute to false. By default, this attribute is set to true
and backups are allowed.
Setting the Debuggable Flag
To ensure that your application cannot be exploited by an attacker with physical access to the device, or on older
devices by another application, the application should not be searching for a debugger. The android:debuggable
attribute in the AndroidManifest.xml should explicitly be set to false prior to building the release version of the
application. Having the application built automatically with the debuggable flag set to false is possible in
common Android IDEs, and if you are comfortable with your configuration then by all means make use of it.
However, explicitly setting this flag in conjunction with having manual pre-release checks performed on the
APK will always ensure that the application does not go into production with this flag set.
API Version Targeting
Developers have the ability to create Android applications that are largely backward compatible and have a
single code base that works on a range of old and new devices. However, Google trusts that the developer is
informed about what features and modifications have been made in each API version to make sure that an
application remains backward compatible.
Two important attributes regarding API version targeting in an application's manifest are minSdkVersion and
targetSdkVersion in the  tag. minSdkVersion states the minimum API level that the application can
work on. targetSdkVersion states the API version that ensures the set of features that the application is
intended to run on is available. Having differing versions between minSdkVersion and targetSdkVersion means
that your code should be detecting what platform features are not available on older devices and providing
alternatives.
These values also have implications for security. When security fixes that change certain features in existing
components are performed, they are activated only if you are targeting an API version equal to or greater than
the version where the security fix was implemented. For example, content providers on older versions of
Android were exported by default. However, if you set your minSdkVersion or targetSdkVersion to 17 or greater,
the content provider is no longer exported by default.
The latest versions of Android have security fixes included but sometimes they need to keep these fixes
unimplemented for older API versions so that backward compatibility is maintained. Therefore, targeting the
largest targetSdkVersion value possible is important so that users of new devices get the benefits of security
fixes made to the platform. This may require extra effort in keeping up with changes, but it benefits the security
of your application. A great example of where this is important is when using a WebView with a
JavaScriptInterface. If your version is targeting an API level smaller than 17, your application will still be
vulnerable to code execution regardless of which Android version the application is running on.
Correctly targeting API versions also applies for native code that is bundled with your application. The targeted
API versions can be set in the Android.mk file as follows:
APP_PLATFORM := android-16
The bigger the value, the more security features are enabled but the fewer devices are supported. A defining
point for security in the Android NDK took place at API 16 where PIE (Position Independent Executable) was
enabled in order to ensure full ASLR on devices. However, PIE binaries were not enforced until Android 5.0
Lollipop and targeting API versions smaller than 16 will cause binaries not to run on this version and upward.
The only solution is to provide two versions of the same binary bundled with your application and use the
correct one for the version of Android your application is running on.
Logging
Logging is essential during development, but can inadvertently expose information if it's left on in release
builds. Keeping track of whether these logging functions are commented out when going into production is
difficult for a developer. Instead of waiting until production release time to check and disable logging functions,
you can use a centralized logging class. This class should contain a flag that can be turned on and off depending
on whether you want logging enabled during development or have it all turned off for production releases. You
can even link this logging function to a check for BuildConfig .DEBUG, but this approach may also be prone to
errors, and using your own defined constant is safer. Defining a central logging function can apply to native code
as well and the on/off flag can be implemented by using define. Using a custom logging class eliminates all
potential failure points in terms of logging sensitive information.
Additionally, by making use of a tool like ProGuard (see http://developer
.android.com/tools/help/proguard.html), you can also remove the logging functions from code. The following
solution was provided by David Caunt on StackOverflow to remove logging; you specify the following inside
proguard .cfg:
-assumenosideeffects class android.util.Log {
public static *** d(...);
public static *** v(...);
public static *** i(...);
}
Reducing the Risk of Native Code
Native code is notoriously hard to secure but sometimes is required within an application. You can reduce the
risk of using native code by limiting its exposure to the outside world. Scrutinize any entry points into native
code and treat them as high risk factors of the application. Any native code that can be replaced with its Java
equivalent without affecting the goals of the application should be replaced. If you are using any third-party
libraries, these should also be kept up to date to ensure that the latest security fixes are included.
Another way of contributing to the mitigating factors of using native code is by making sure that all exploit
mitigations are enabled when compiling the code. This was made quite simple by the Android NDK and the
secret is to always use the latest version of the NDK and target the highest possible API version. The NDK
enables as many exploit mitigations as possible by default. In fact, you need to explicitly turn them off if you do
not want them enabled for some reason. These exploit mitigations should not be an excuse for coding
insecurely, though, and you should make every effort to check the code for possible bugs. A minimum effort of
making sure that some common native coding mistakes are not present is a prerequisite.
Tobias Klein created an excellent script named checksec to show which exploit mitigations are enabled on a
library or executable. You can download it from his site at http://www.trapkit.de/tools/checksec.html. You
can use this script to verify that all expected exploit mitigations have been enabled on your native components.
Here is an example of running this against a demo shared library created using the NDK:
$ ./checksec.sh --file libtest.so
RELRO STACK CANARY NX PIE RPATH RUNPATH FILE
Full RELRO Canary found NX enabled DSO No RPATH No RUNPATH libtest.so
The previous output shows that all important exploit mitigations have been enabled on this library. Performing
the same test of an example busybox binary downloaded from an unofficial source on the Internet reveals the
following:
$ ./checksec.sh --file busybox
RELRO STACK CANARY NX PIE RPATH RUNPATH FILE
No RELRO No canary found NX enabled No PIE No RPATH No RUNPATH busybox
The exploit mitigations have not been enabled for this binary, which will make exploitation of any bugs inside it
easier. This script is very useful for doing a quick verification that suitable exploit mitigations are enabled before
going live with your application. The output is self-explanatory if you are familiar with the available exploit
mitigations offered on Android. However, even as a beginner the output of checksec makes spotting disabled
mitigations easy because it highlights them in red.
CHECKSEC NOT EXECUTING?
For readers who are new to Linux, after you have downloaded this script you would need to mark it as
executable before being able to use it. You do this using the chmod command and then verifying that the
file is executable:
$ chmod +x checksec.sh
$ ls -l checksec.sh
-rwxrwxr-x 1 tyrone tyrone 27095 Nov 17 2011 checksec.sh
Advanced Security Mechanisms
This section explores security mechanisms that are generally not implemented in everyday applications. These
are reserved for developers looking to go above and beyond the call of duty to secure their applications.
Protection Level Downgrade Detection
Chapter 7 explored how it was possible to downgrade application protection levels by installing a malicious
application that defined a permission first with an insecure protection level. Therefore, having applications that
hold sensitive data perform an additional check to ensure that the security of the custom permissions defined
have not been downgraded to a less secure protection level is important. You do this by running a check at each
entry point protected by a custom permission that ensures that all the custom permissions defined still have the
correct protection levels set. The following code shows a functional implementation of this check:
public void definedPermissionsSecurityOk(Context con)
{
PackageManager pm = con.getPackageManager();
try
{
PackageInfo myPackageInfo = pm.getPackageInfo(con.getPackageName(),
PackageManager.GET_PERMISSIONS);
PermissionInfo[] definedPermissions = myPackageInfo.permissions;
for (int i = 0; i < definedPermissions.length; i++)
{
int protLevelReportedBySystem = pm.getPermissionInfo(
definedPermissions[i].name,
0).protectionLevel;
if (definedPermissions[i].protectionLevel !=
protLevelReportedBySystem)
{
throw new SecurityException("protectionLevel mismatch for "
+ definedPermissions[i].name);
}
}
}
catch (NameNotFoundException e)
{
e.printStackTrace();
}
}
This code snippet checks all the custom permissions defined by the application and compares the protection
level specified in the manifest to the one that the system reports. If a discrepancy exists between these values,
the function throws a SecurityException, meaning that one of the permissions has been altered and may no
longer provide protection for exported components.
Using this function will stop downgrade attacks from taking place and could be used to alert the user and
developer of the situation.
Protecting Non-Exported Components
If you recall from Chapter 7, privileged users such as root are able to invoke and interact with application
components even when they are not exported. If you as an application developer decide that this is not
acceptable for your application then ways exist to protect against it. Note that regardless of any permissions
(even with signature protection levels) set on an application component, stopping root from being able to
invoke it is not possible.
One way to prevent the invocation of components that are not meant to be accessible to any user except the
local application is by implementing a request token system. When the application is started, a random token
can be generated and stored in a static variable inside the code. Then when the application itself issues an
intent to other non-exported components, this token must be provided as an extra. When the component is
started by any application including itself, the provided token should be checked by the application against the
stored value and if it does not match, the component should immediately exit and not process any other data
further. This check should be done before any other actions are performed. This technique is very useful for
activities but is not restricted to only being used by them. You can apply the concept in a similar way to other
application components that are not exported.
Slowing Down a Reverse Engineer
Application developers who want to do so can put the following checks and measures in place, but these items
are not a replacement for good application security practices. Defeating these checks will always be possible by
patching them out of the application either statically or at runtime by a privileged user context. Therefore,
performing such checks may be a requirement but will only serve to slow down a skilled reverse engineer from
being able to properly analyze an application's behavior.
Obfuscation
As discussed in previous chapters, compiled Android applications can easily be decompiled into readable source
code that resembles the original. To make a reverse engineer's life a tad more difficult, developers can use
obfuscators to make the decompiled code less readable and harder to follow. Depending on how rigorous the
obfuscation technique performed is, it could add significant time expenses for a reverse engineer. This fact may
deter the casual reverse engineer but will not stop someone who is determined to understand the code.
You should view this countermeasure as an in-depth defense measure that makes researching and planning
attacks more difficult, rather than as a replacement for ensuring that any source code is as secure as possible.
Obfuscating source code does not prevent any inherent vulnerability from being exploited.
Various code obfuscators exist, ranging from free tools such as ProGuard (see
http://developer.android.com/tools/help/proguard.html) to many paid options. The paid version of
ProGuard is called DexGuard (see https://www .saikoa.com/dexguard) and provides excellent features that can
make reverse-engineering applications tough.
Other products that provide obfuscation are as follows:
DashO—https://www.preemptive.com/products/dasho
DexProtector—http://dexprotector.com
ApkProtect—http://www.apkprotect.com
Stringer—https://jfxstore.com/stringer
Allitori—http://www.allatori.com
Jon Sawyer at Defcon 22 made an excellent comparison of some of these obfuscators and their features at
https://www.defcon.org/images/defcon-22/dc-22-presentations/Strazzere-Sawyer/DEFCON-22-Strazzere-
and-Sawyer-Android-Hacker-Protection-Level-UPDATED.pdf. Some commonly found features in these products
are:
String encryption
Class encryption
Native library encryption
Asset encryption
Reflection to hide sensitive calls to APIs
Tamper detection
Removal of logging code
Class and variable renaming
Control flow mangling
Watermarking
Many of these products support native code obfuscation as well. However, the University of Applied Sciences
and Arts Western Switzerland of Yverdon-les-Bains started an interesting open-source project called O-LLVM,
and it is a fork of the LLVM (Low Level Virtual Machine) project that provides obfuscation and tamper proofing
for many languages and platforms. You can make use of it with the Android NDK, and it produces compiled code
that is very difficult to reverse engineer. The project page is available at https://github.com/obfuscator-
llvm/obfuscator/wiki and is worth investigating if you require rigorous obfuscation of native code.
Root Detection
Some applications may have legitimate reasons for needing to know whether the device they are running on is
rooted. In practice, often very shallow checks are performed to determine this status. This section presents
some more in-depth methods to check whether the user of the device or other applications are able to obtain
root access. The most commonly implemented technique is to check for the existence of the su binary on the
path. This is commonly done by executing which su and parsing the output, which provides the full path to su if
it is available on the device. The which tool is not a standard binary that is provided on Android and you should
not rely on its being present. Instead you should create a function that operates in the same manner as which.
This would involve decomposing the PATH environmental variable into its separate directories and searching
them for the provided binary.
Although searching for the su binary certainly is valid, it is not sufficient on its own to determine whether the
owner of the device can obtain root. You could also perform the following additional checks:
Read the default.prop file located on the root of the Android filesystem. An attribute in this file called
ro.secure indicates what privileges are associated with an ADB shell when the connection is made from a
computer. If this value equals 0, then ADB starts with root privileges and this is an indication that the user
can obtain a root shell when connecting to the device using adb shell.
Check whether the adbd program has been started by the root user. You can see this by invoking the standard
ps binary and parsing the output.
Check for common emulator build properties through the use of the android.os.Build class. The following
system properties can be checked against the provided regular expression to see whether the application is
running inside an emulator:
Build.TAGS = "test-keys"
Build.HARDWARE = "goldfish"
Build.PRODUCT = "generic" or "sdk"
Build.FINGERPRINT = "generic.*test-keys"
Build.display = ".*test-keys"
The existence of one or more of these values would indicate that the application is running on an emulator.
Iterate through the labels of installed applications using the PackageManager class and look whether they
contain the words 'SuperSU', 'Superuser', and other common applications used to control root access. This