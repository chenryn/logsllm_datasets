*   `produces`:指定映射请求可以产生的媒体类型，如`"text/plain"`或`"application/json"`。这也可以是媒体类型的列表，例如:`{"text/plain", "application/json"}`
`Similar to JAX-RS``@PathParam``@QueryParam`指定控制器方法的输入参数`,`现在我们有`@PathVariable`和`@RequestParam`在 Spring。如果您需要让您的方法参数进入请求主体(作为您想要保存的整个 JSON 对象，与我们的`saveBook()`方法相同)，您将需要使用`@RequestBody`注释映射参数。至于输出，`@ResponseBody`注释可以告诉我们的控制器，方法返回值应该绑定到 web 响应体。
在现实的服务中，您可能会有许多控制器，映射了许多路径。当向世界公开这样的服务时，记录服务的应用编程接口通常是一个很好的做法。该应用编程接口文档是服务合同。手动完成这项工作可能是一个乏味的过程。此外，如果您进行了更改，最好同步应用编程接口文档。有一个工具可以让它变得容易得多，斯瓦格。
# 记录应用编程接口
在客户端可以使用服务之前，它需要一个服务契约。服务合同定义了服务的所有细节；例如，如何调用服务，服务的 URI，以及请求和响应格式是什么。您的客户需要知道如何与您的应用编程接口交互。在过去的几年里，在主要供应商的支持下，swag 获得了大量的支持。swag 的规范以 JSON 格式呈现了服务资源和操作的所有细节。该规范的格式被称为 OpenAPI 规范(斯瓦格 RESTful API 文档规范)。它是人和机器可读的，易于解析、传输和集成使用。`SpringFox`库可以用来从 RESTful 服务代码生成 Swagger 文档。更重要的是，有一个叫做 Swagger UI 的很棒的工具，当集成到应用中时，它提供了人类可读的文档。在这一部分，我们将为我们的服务生成斯瓦格文档。位于 http://springfox.github.io/springfox/和马文中心的`SpringFox`库可在 GitHub 上获得，它是一个自动为使用 Spring 构建的应用编程接口构建 JSON 应用编程接口文档的工具。更好的是，该库提供了斯瓦格用户界面工具。该工具将与您的服务一起部署，并且可以使用，以非常方便的方式浏览生成的 API 文档。让我们向斯瓦格介绍我们的服务。我们首先向我们的服务`pom.xml`文件添加所需的依赖项:
```
   io.springfox 
   springfox-swagger2 
   2.6.1 
   io.springfox 
   springfox-swagger-ui 
   2.5.0 
```
在我们的应用的类路径中有了这个库，我们需要打开它。下一步将是添加配置类来启用和生成 Swagger 文档。我们通过创建一个用 Spring `@Configuration`注释进行注释的类来实现，与下面的示例相同:
```
package pl.finsys.example.configuration; 
import org.springframework.context.annotation.Bean; 
import org.springframework.context.annotation.Configuration; 
import springfox.documentation.builders.PathSelectors; 
import springfox.documentation.builders.RequestHandlerSelectors; 
import springfox.documentation.spi.DocumentationType; 
import springfox.documentation.spring.web.plugins.Docket; 
import springfox.documentation.swagger2.annotations.EnableSwagger2; 
@Configuration 
@EnableSwagger2 
public class SwaggerConfig { 
    @Bean 
    public Docket api() { 
        return new Docket(DocumentationType.SWAGGER_2) 
                .select() 
                .apis(RequestHandlerSelectors.any()) 
                .paths(PathSelectors.any()).build(); 
    } 
} 
```
这里解释几句。`@Configuration`表示带注释的类正在定义 Spring 配置，`@EnableSwagger2`关闭 Swagger 支持。`Docket`是一个构建器类，用于配置斯瓦格文档的生成，配置`DocumentationType.SWAGGER_2`用于生成斯瓦格 2 兼容的应用编程接口文档。在`Docket` bean 实例上调用的`select()`方法返回一个`ApiSelectorBuilder`，它提供了`apis()`和`paths()`方法来过滤使用字符串谓词记录的控制器和方法。在我们的示例中，我们希望记录所有控制器和所有映射路径；这就是为什么我们使用`.apis(RequestHandlerSelectors.any()).paths(PathSelectors.any())`
您也可以使用传递给`paths()`的`regex`参数来提供额外的过滤器，只为匹配正则表达式的路径生成文档。
就是这样；这是为您的 API 生成文档的最简单形式。如果您现在运行该服务(我们将在短时间内完成此操作)，将有两个端点可用:
*   `http://localhost:8080/v2/api-docs`
*   `http://localhost:8080/swagger-ui.html`
第一个包含 JSON 格式的斯瓦格 2 兼容文档，如下面的截图所示:
![](img/39b70efb-d3d8-422c-b6f5-539f3eeea7f9.png)
要以更有用的形式浏览应用编程接口文档，请将浏览器指向第二个网址。您将看到斯瓦格用户界面工具界面:
![](img/0f3799a1-9001-48fe-b380-8c830c4ae488.png)
斯瓦格用户界面是 HTML、JavaScript 和 CSS 资产的集合，这些资产从符合斯瓦格的应用编程接口动态生成漂亮的文档。它列出了您的服务操作及其请求和响应格式。最重要的是，您可以使用这个工具，通过执行特定的请求来测试您的服务。事实上，这是一个快速测试你的服务的好工具。我们的文档描述性不是很强。当然，我们有一个公开端点的列表，以及它们的输入和输出描述。如果我们能够用一些更具体的细节来增强文档，那就太好了。我们可以做到，我们可以在服务代码中使用 Java 注释来增强生成的文档。注释来自斯瓦格注释包，如果您在项目中使用`springfox-swagger2`库，该包将可用。例如，考虑以下代码片段:
```
@ApiOperation(value = "Retrieve a list of books.",
responseContainer = "List")
@RequestMapping(value = "/books", method = RequestMethod.GET, produces = {"application/json"})
public List listBooks() {
LOGGER.debug("Received request to list all books");
return bookService.getList();
}
```
在前面的代码中，我们使用`@ApiOperation`注释来提供操作的更详细描述。还有更多:`@ApiImplicitParam`用于描述参数，`@Authorization`提供将在此资源/操作上使用的授权方案的名称，`@License`提供关于许可证的信息，等等。所有这些注释都将由`springfox-swagger2`提取，并用于增强生成的文档。我强烈建议查看 swag-annotations JavaDoc；您将能够以详细、专业的方式记录您的 API。
我猜我们的小服务已经准备好了；是时候让它起死回生了。
# 运行应用
因为我们已经在我们的`pom.xml`构建文件中定义了 Spring Boot 插件，我们现在可以使用 Maven 启动应用。您所需要的只是系统路径上的 Maven，但作为一名 Java 开发人员，您可能已经具备了这一点。要运行应用，请从命令外壳(MacOS 上的终端或 Windows 上的`cmd.exe`)执行以下命令:
```
$ mvn spring-boot:run  
```
过一会儿，Spring splash 日志将出现在控制台中，您的微服务将准备好接受`HTTP`请求。很快，在[第 5 章](05.html)、*用 Java 应用创建映像*中，我们的目标将是从 Docker 容器中看到同样的东西:
![](img/29bc43f1-4ed7-4162-bb07-1fc5166479e5.png)
如果您愿意，您也可以直接从 IDE 运行应用，无论是 IntelliJ IDEA、Eclipse 还是 Netbeans。我们`BookstoreApplication`班有`main()`法；您只需要在 IDE 中创建一个运行时配置并运行它。这与 JE7 JAX-RS 服务不同。在这种情况下，您需要在符合 JEE 标准的应用服务器上部署该服务，以便能够运行它。定义`main()`方法在调试您的服务时非常方便。只需以`BookstoreApplication`为切入点开始调试会话。不需要创建远程调试会话。让我们的服务运行起来，是时候对其公开的端点进行一些调用了。
# 打电话
调用服务公开的操作可以使用任何能够执行`HTTP`请求的工具或库来完成。第一个显而易见的选择就是网络浏览器。但是网络浏览器只方便执行`GET`请求(比如从我们的书店服务中获取图书列表)。如果您需要执行其他方法，如`POST`或`PUT`或提供额外的请求参数、头值等，您将需要使用一些替代方法。第一个选择可能是 CUlR，一个使用各种协议传输数据的命令行工具。让我们看看其他的选择。
# Spring RestTemplate(弹簧剩余模板)
如果你需要从另一个服务调用一个服务，你将需要一个`HTTP`客户端。Spring 提供了非常有用的`RestTemplate`类。它为您提供了同步客户端`HTTP`访问，简化了与 HTTP 服务器的通信，并实施了 RESTful 原则。它处理 HTTP 连接，留下应用代码来提供 URL(带有可能的模板变量)并提取结果。默认情况下，`RestTemplate`依靠标准的 JDK 设施来建立 HTTP 连接。您可以通过其`setRequestFactory()`方法切换到您选择的不同 HTTP 库，如 Apache `HttpComponents`、`Netty`和`OkHttp`。调用`REST`资源用`ID = 1`取书可以简单如下:
```
package pl.finsys.example.client; 
import org.springframework.http.ResponseEntity; 
import org.springframework.web.client.RestTemplate; 
import pl.finsys.example.domain.Book; 
public class ExampleClient { 
    public static void main(String[] args) { 
        try { 
            RestTemplate restTemplate = new RestTemplate(); 
            ResponseEntity response = restTemplate.getForEntity("http://localhost:8080/books/1", Book.class); 
            System.out.println(response.getBody()); 
        } catch (Exception e) { 
            e.printStackTrace(); 
        } 
    } 
} 
```
当然，这只是一个简化的客户端示例，向您展示这个想法。您可以使用`RestTemplate`创建对 REST 资源的更复杂的客户端调用。
# HTTPie
cURL 的一个很好的命令行替代品是 HTTPie，可在[https://httpie.org](https://httpie.org)获得。这是一个命令行`HTTP`客户端。幸运的是，名字中的`*ie*`并不是来自于 Internet Explorer。如果您更喜欢从 shell 或命令行工作，`HTTPie`只是一个单一的命令，它为 cUrl 增加了以下功能:可感知的默认值、表达性和直观的命令语法、彩色和格式化的终端输出、内置的 JSON 支持、持久会话、表单和文件上传、代理和身份验证支持，以及对任意请求数据和头的支持。它是用 Python 编写的，可以在 Linux、macOSX 和 Windows 上运行。
# 邮递员
邮递员是许多开发人员的首选工具。它可以作为 Chrome 插件或独立实用程序在[https://www.getpostman.com](https://www.getpostman.com)获得。邮递员使用起来非常方便。它是一个强大的图形用户界面平台，可以使您的应用编程接口开发更快、更容易，从构建应用编程接口请求到测试、文档和共享。您可以保存您的`HTTP`请求供以后使用，并将其组织成集合。如果您在多个环境中工作，例如您的本地主机，当以后开发服务和生产环境时，邮递员引入了环境的概念。环境使您能够使用变量定制您的请求。这样，您可以轻松地在不同设置之间切换，而无需更改您的请求。每个环境都表示为一组键值对。这使得在多种环境下工作变得容易。它还有一个非常方便的用户界面来编辑您的`HTTP`请求:
![](img/197a8706-30f5-456d-b316-a9fd7864012c.png)
您可以定义请求头、cookies 和正文。如果您的服务支持身份验证，Postman 包含许多身份验证助手:它可以是基本身份验证、摘要身份验证和 OAuth。可以在三个视图之一中查看响应正文:漂亮、原始和预览。漂亮模式格式化 JSON 或 XML 响应，这样它们更容易查看，并且标题在标题选项卡中显示为键/值对。这是一个非常强大和令人愉快的工具。如果你在苹果电脑上工作，还有更好的东西。
# 苹果的爪子
**Paw** 是一个功能齐全的`HTTP`客户端，允许您测试您构建或使用的 API。它有一个漂亮的本地 OS X 接口来编写请求，检查服务器响应，并生成开箱即用的客户端代码。正如您在下面的截图中看到的，它还包含一个强大的编辑器来编写您的请求:
**![](img/87cfdd88-fd36-46fd-9611-53828034b471.png)**
它还支持许多身份验证模式，包括 OAuth 1 和 2、基本身份验证、摘要身份验证、Hawk、AWS 签名版本 4 和亚马逊 S3。与邮差类似，Paw 也允许你在文件夹中组织你的请求。您还可以快速定义和切换不同的环境。有趣的特性是 Paw 可以生成客户端代码来执行您的请求。它可以为 cURL、HTTPie、Objective-C、Python、JavaScript、Ruby、PHP、Java、Go 和许多其他语言生成代码。你猜怎么着？Paw 还可以导入我们一直在讨论的 Swagger 文档。您可以使用此功能来测试您获得文档的服务。
如果您需要快速启动新服务，有几个工具可能会派上用场。其中之一是 **Initializr** 。
# 弹簧初始化 zr
Spring Initializr 是一个基于网络的工具，可在 [https://start.spring.io](https://start.spring.io) 获得。这是 Spring 项目的快速启动生成器。弹簧初始化器可以如下使用:
*   来自[的网页浏览器](https://start.spring.io)
*   在您的集成开发环境中(IntelliJ IDEA Ultimate 或 NetBeans，使用插件)
*   从命令行使用 Spring Boot 命令行界面或简单地使用 cURL 或 HTTPie
使用 web 应用非常方便；您所需要做的就是提供关于您的应用 Maven 原型的细节，比如组、工件名称、描述等等:
![](img/72d4ea86-1947-4e47-b2d1-471091d38308.png)
在“依赖项”部分，您可以输入想要包含的功能的关键字，如 JPA、web 等。您还可以将用户界面切换到高级视图，列出所有功能并准备好进行选择:
![](img/e0d4d8e0-61ef-4768-8c27-032350b18722.png)
作为输出，Spring Initializr 将使用您想要开始的基本 Maven 项目创建一个 ZIP 存档。Spring Initializr 创建的项目是一个 Maven 项目，遵循标准的`Maven`目录布局。这在创建新的 Spring 项目时确实节省了很多时间。您不再需要搜索特定的 Maven 原型并寻找它们的版本。Initializr 会自动为您生成`pom.xml`。`pom.xml`中依赖项的存在很重要，因为当在类路径中发现某些东西时，Spring Boot 将决定自动创建什么。例如，如果 H2 数据库的依赖项存在，并且在应用运行时存在于类路径中，Spring Boot 将自动创建一个数据连接和一个嵌入式 H2 数据库。
# 摘要
如您所见，开发 Java 微服务并不像听起来那么棘手。你可以选择 JEE7 JAX-RS 或 Spring Boot，连线一些课程，基本服务就准备好了。您不限于使用 Spring MVC 来创建您的 REST 端点。如果您更熟悉 Java EE JAX-RS 规范，那么您可以轻松地将 JAX-RS 集成到 Spring 应用中，尤其是 Spring Boot 应用。然后你可以从两者中选择最适合你的。
当然，在现实世界中，您可能希望包含一些更高级的功能，例如身份验证和安全性。在开发自己的服务时，让 Spring Initializr 可用可以大大提高速度。在[第 5 章](05.html)、*用 Java 应用创建映像*中，我们将把我们的书店服务打包成 Docker 映像，并使用 Docker Engine 运行它。