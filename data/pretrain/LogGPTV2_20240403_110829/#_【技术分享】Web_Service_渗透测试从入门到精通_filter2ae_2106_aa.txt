# 【技术分享】Web Service 渗透测试从入门到精通
|
##### 译文声明
本文是翻译文章，文章来源：exploit-db.com
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
****
****
翻译：[兴趣使然的小胃](http://bobao.360.cn/member/contribute?uid=2819002922)
预估稿费：300RMB
投稿方式：发送邮件至linwei#360.cn，或登陆网页版在线投稿
**  
**
**一、Web Service的含义及使用范围**
Web Service覆盖的范围非常广泛，在桌面主机、Web、移动设备等领域都可以见到它的身影。任何软件都可以使用Web
Service，通过HTTP协议对外提供服务。
在Web
Service中，客户端通过网络向服务器发起请求，Web服务器按照适当的格式（比如JSON、XML等）返回应答数据，应答数据由客户端提供给最终的用户。
提及Web Service时，我们首先需要解释以下概念：
SOAP（Simple Object Access Protocol，简单对象访问协议）型Web Service。SOAP型的Web
Service允许我们使用XML格式与服务器进行通信。
REST（Representational State Transfer，表征性状态转移）型Web Service。REST型Web
Service允许我们使用JSON格式（也可以使用XML格式）与服务器进行通信。与HTTP类似，该类型服务支持GET、POST、PUT、DELETE方法。
WSDL（Web Services Description Language，网络服务描述语言）给出了SOAP型Web
Service的基本定义，WSDL基于XML语言，描述了与服务交互的基本元素，比如函数、数据类型、功能等，少数情况下，WSDL也可以用来描述REST型Web
Service。
WADL（Web Application Description Language，网络应用描述语言）就像是WSDL的REST版，一般用于REST型Web
Service，描述与Web Service进行交互的基本元素。
**二、为什么写这篇文章**
BGA团队专注于对机构、组织开放的Web应用、外部IP地址以及Web Service进行安全测试。
在渗透测试中，我们看到Web Service的应用范围越来越多广，但人们在使用Web
Service时，并没有特别关注安全问题。出于这个原因，人们部署的Web Service中经常会出现重大安全漏洞。
我们将在本文中讨论Web Service渗透测试工作中经常遇到的技术和逻辑相关问题。
**三、如何发现Web Service**
我们可以使用以下方式发现Web Service：
1、使用代理软件，检查所捕获的数据。
2、通过搜索引擎探测Web应用程序暴露的接口（比如目录遍历漏洞、lfi（本地文件包含）等）。
3、爬取并解压swf、jar等类似文件。
4、模糊测试。
可根据实际情况选择所使用的具体方法。
举个例子，我们可以使用swf intruder工具，反编译某个.swf文件，从中挖掘Web Service的WSDL地址，如下图所示：
代理软件可以用来探测应用程序所使用的Web Service。
下图是在BurpSuite中设定的过滤规则，用来筛选抓包数据中的Web
Service地址。我们可以通过搜索与表达式相匹配的数据，探测诸如“.dll?wsdl”、“.ashx?wsdl”、“.exe?wsdl”或者“.php?wsdl”等等的Web
Service地址。
探测Web Service的另一种方法是使用搜索引擎，比如Google。比如，我们可以通过以下搜索语句在Google中找到Web Service：
    Search string: filetype:asmx inurl:(_vti_bin | api | webservice | ws )
    Search string: allinurl:dll?wsdl filetype:dll
对于Bing搜索引擎，我们可以使用以下语句查找Web Service：
    asmx?wsdl site:us
我们也可以使用Wfuzz工具，查找Web Service，命令如下：
    wfuzz -p 127.0.0.1:8080 -c --hc 404,XXX -z list,ws-webservice-webservisler -z
    file,../general/common.txt -z file,ws-files.txt http://webservices.example.com/FUZZ/FUZ2ZFUZ3Z
我们可以通过“-p”参数，同时使用多个代理，以达到负载均衡。最后使用的代理服务器地址将会在tor网络中使用。
    -p IP:port-IP:port-IP:8088
通过查看HTTP响应状态代码，从各个方面分析响应报文，我们可以找到正确的服务地址。根据上图结果，我们找到的Web Service如下图所示：
“wsdl”地址有时候可以是“.wsdl”，不一定都是“?Wsdl”形式。我们在搜索时要注意到这一点。比如，我们可以通过如下搜索语句，探测Web
Service：
    filetype:wsdl
**四、Web Service中的渗透测试工具**
我们可以操纵Web Service方法的具体参数，挖掘其中存在的各种技术和逻辑漏洞。我们可以使用以下专业工具对常见的Web Service进行渗透测试。
比如，我们可以下载OWASP Zed Attack Proxy的SOAP Scanner插件，对SOAP型Web Service进行测试。
指定URL或WSDL地址，我们可以载入与Web Service相关的一些方法。
如下图所示，我们可以看到与Web Service有关的所有方法。
例如，某个Web Service请求如下所示：
对应的响应如下所示：
此外，我们还可以使用Firefox的RESTClient插件对REST型的Web
Service进行测试。通过RESTClient插件，我们可以使用POST和GET方法来查询目标系统相关信息。我们也可以使用插件中的Basic
Auth或自定义头部等等其他附加功能。如下所示：
简单汇总一下，我们可以使用以下工具对Web Service进行渗透测试。
WebScarap
SoapUI
WCFStorm
SOA Cleaner
WSDigger
wsScanner
Wfuzz
RESTClient
BurpSuite
WS-Attacker
ZAP
Metasploit
WSDL Analyzer
我们可以合理搭配使用SoapUI以及BurpSuite这两个工具，以获得非常完美的渗透测试结果。
与BurpSuite一样，SoapUI工具可以作为代理使用，这也是这两款工具在渗透测试中经常使用的原因所在。
现在，举个具体例子，说明我们如何通过SoapUI访问Web Service，并将请求转发给BurpSuite。
首先启动SoapUI软件，创建一个新的SOAP工程。在“Initial
WSDL”一栏填入WSDL地址（本例中，我们可以使用“http://zero.webappsecurity.com/webservices/infoService?wsdl”这个地址，该Web
Service存在漏洞）。
如下图所示，我们已经成功导入Web Service。SoapUI对给定的WSDL地址进行解析，以创建Web Service函数及请求。
点击“File->Preferences”菜单，打开“Proxy Settings”，指向BurpSuite的地址，如下所示：
如果后续请求中涉及函数列表中的任意函数，BurpSuite可以成功捕获这些请求。
**五、Web Service渗透测试中可能会发现的漏洞**
在这一部分，我们将讨论在Web Service渗透测试中可能会发现的漏洞。
如果我们已知某个Web应用漏洞，且该漏洞在Web Service渗透测试中可能存在，那么我们应该在测试流程中将其考虑在内。
比如，在Web应用程序中存在的“用户枚举（User Enumeration）”漏洞或“全路径泄露（Full Path
Disclosure）”漏洞也可能在Web Service中存在。
**5.1 Web Service中的注入漏洞**
**5.1.1 SQL注入漏洞**
Web Service中的SQL注入（SQLi）漏洞与普通Web渗透测试中漏洞并无区别。
我们需要仔细检查Web Service中所有函数的所有参数，检查它们是否受到SQLi漏洞影响。
我们以“http://www.thomas-bayer.com/sqlrest/”这个RESTful Web
Service为例，分析该服务存在的SQLi漏洞。我们使用Firefox中的RESTClient插件检测SQLi漏洞。
我们的目标是“http://www.thomas-bayer.com/sqlrest/CUSTOMER/$id”中的id参数，我们可以构造某些SQLi载荷，发往该地址，解析返回的结果。
正常的id值为23，我们使用的测试载荷为：
    23 AND 1=1
测试地址为：
    http://www.thomas-bayer.com/sqlrest/CUSTOMER/23%20AND%201=1/
返回结果为：
我们没有看到任何错误页面，貌似SQL服务器正确处理了这个请求逻辑。
更换测试载荷，如下所示。
    23 AND 1=0
测试地址为：
    http://www.thomas-bayer.com/sqlrest/CUSTOMER/23%20AND%201=0
返回结果为：
如果载荷不满足SQL查询条件，服务器会返回404响应报文。
我们发送如下载荷，并最终获得了服务器上的所有用户名。
    23 OR 1=1
测试地址：
    http://www.thomas-bayer.com/sqlrest/CUSTOMER/23%20OR%201=1
包含用户名的服务器响应如下：
我们可以通过这种方法，手动检查SQLi漏洞。我们可以先向目标系统发送一段简单载荷，检查响应内容，确定Web Service对应的函数是否存在SQLi漏洞。
**5.1.2 XPath注入漏洞**
XPath是服务端查询以XML格式存储的数据时所使用的查询语言。
    string(//user[username/text()='bga' and password/text()='bga']/account/text())
例如，对于上述查询语句，如果发送的测试载荷为“1 'and' 1 '=' 1 and 1 'and' 1 '='
2”，那么经过逻辑处理后，返回的响应为“TRUE”，否则，返回的响应为“FALSE”。
我们以“https://github.com/snoopythesecuritydog/dvws/”为例，分析该应用存在的XPATH注入漏洞。
开发者使用的应该是PHP语言，如下所示：
代码中读取的“accountinfo.xml”文件内容如下所示：
当我们试图使用“bga:1234”凭证登陆该页面时，我们看到如下的错误信息：
然而，我们可以使用“1' or '1' = '1”作为用户及密码的输入载荷，发现该页面存在XPATH注入漏洞：
**5.1.3 XML注入漏洞**