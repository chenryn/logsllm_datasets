process this huge “result set” before detecting the anomaly? These legitimate
concerns are within the scope of question (2) above. We will show that this
performance-accuracy tradeoﬀ is not at all as bad as it seems at ﬁrst glance. We
experimentally show that a representative constant number of result tuples per
query is suﬃcient for the detection engine to perform well, especially when the
right statistical features and distance function (between normal and abnormal
result sets) are chosen. Furthermore, these (constant number of) result tuples
can be computed eﬃciently by leveraging the pipelined query execution model
of commercial RDBMS’s.
The fourth contribution, presented in Section 5, is a taxonomy of anomalous
database access patterns, which is needed to systematically evaluate the accuracy
of both the data-centric and the syntax-centric approaches.
The ﬁfth contribution is a relatively extensive evaluation of several statistical
learning algorithms using the data-centric approach. Speciﬁcally, for the mas-
querade detection problem on a real Graduate Admission data set, we found
that k-means clustering works very well, with detection rates of around 95-99%.
For detecting data harvesting, we develop an outlier detection method based
on attribute deviation (a sort of clustering using the L∞-norm) which performs
well. Furthermore, this method is suitable when the features are only extracted
from a constant number of tuples of the result set, thus making it practical.
In summary, though our results are derived in the limited context of insider
threat detection with respect to database security, this paper is a ﬁrst step in
exploring the larger potential of the data-centric approach in anomaly detection.
Paper Outline. The rest of this paper is organized as follows. Section 2 surveys
background and related work. Section 3 demonstrates the limitations of the
syntax-based approach, thus motivating the data-centric approach introduced
in Section 4. Section 5 gives a brief taxonomy of query anomalies facilitating
the experiments presented in Section 6. We further discuss our solution, its
implications, and future research directions in Section 7.
2 Related Work
IDSs with direct or indirect focus on databases have been presented in the lit-
erature [23,35]. In [22], temporal properties of data are utilized for intrusion
detection in applications such as real-time stock trading. Anomaly detection
schemes dealing with SQL injection attacks in Web applications were studied
in [20,34]. SQL injection attacks are a speciﬁc kind of database query anomaly
that is detected by our approach in a straightforward manner as we shall show.
Data correlation between transactions is used to aid anomaly detection in
[17]. Similarly, in [32], dependency between database attributes is used to gen-
erate rules based on which malicious transactions are identiﬁed. The DEMIDS
system [13] detects intrusions by building user proﬁles based on their working
scopes which consist of feature/value pairs representing their activities. These
features are typically based on syntactical analysis of the queries. A system to
detect database attacks by comparison with a set of known legitimate database
386
S. Mathew et al.
transactions is the focus of [21]; this is another syntax-based system where SQL
statements are summarized as regular expressions which are then considered to
be “ﬁngerprints” for legitimate transactions. Yet another syntax-based approach
was considered in [27] for web databases, where ﬁngerprints of all SQL statements
that an application can generate are proﬁled. A binary vector with length equal
to the number of ﬁngerprints is used to build session proﬁles and aid in anomaly
detection. This approach made assumptions such as restricting the number of
distinct queries possible; these techniques may complement our approach in cases
where the assumptions are valid. In [15], database transactions are represented
by directed graphs describing execution paths (select, insert, delete etc.) and
these are used for malicious data access detection. This approach cannot handle
adhoc queries (as the authors themselves state) and works at the coarse-grained
transaction level as opposed to the ﬁne-grained query level. Database session
identiﬁcation is the focus of [36]: queries within a session are considered to be
related to each other, and an information theoretic metric (entropy) is used
to separate sessions; however, whole queries are used as the basic unit for n-
gram-statistical modeling of sessions. A multiagent based approach to database
intrusion detection is presented in [26]; relatively simple metrics such as access
frequency, object requests and utilization, and execution denials/violations are
used to audit user behavior.
Prior approaches in the literature that most resemble ours are [31] and [18].
The solution in [31] is similar in the use of statistical measurements; however the
focus of the approach is mainly on detecting anomalies in database modiﬁcation
(e.g., inserts) rather than user queries. The query anomaly detection component
is mentioned only in passing and only a limited set of features (e.g., session du-
ration, number of tuples aﬀected) are considered. The recent syntax-based work
in [18] has the same overall detection goals as our work: detection of anomalies
in database access by means of user queries. A primary focus on this paper will
be on exposing the limitations of syntax based detection schemes; the approach
in [18] will be used in this paper as a benchmark for evaluating the performance
of our approach.
3
Limitations of Syntax-Centric Approach
This section demonstrates that two syntactically similar queries may generate
vastly diﬀerent results, and two syntactically distinct queries may give similar
results. Consequently, SQL expressions are poor discriminators of users’ intent.
For example, a syntax-based approach may model a query with a frequency
vector, each of whose coordinates counts the number of occurrences (or marks
the presence) of some keywords or mathematical operators [18].
Consider the following query:
SELECT p.product_name, p.product_id
FROM PRODUCT p
WHERE p.cost = 100 AND p.weight > 80;
A Data-Centric Approach to Insider Attack Detection in Database Systems
387
A syntactical analysis of this query and subsequent feature extraction (e.g.,
[18]) might result in the following features for query data representation – SQL
Command – SELECT, Select Clause Relations – PRODUCT, Select Clause
Attributes – product name, product id, Where Clause Relation – PRODUCT,
Where Clause Attributes – cost, weight. Now consider the alternate query:
SELECT p.product_name, p.product_id
FROM PRODUCT p
WHERE p.cost > 100 AND p.weight = 80;
This query has the same syntax-based feature set as the previous one; however,
the data tuples accessed in the two cases are vastly diﬀerent.
Conversely, suppose we rewrite the ﬁrst query as follows:
SELECT p.product_name, p.product_id
FROM PRODUCT p
WHERE p.cost = 100 AND p.weight > 80
AND p.product_name IS NOT NULL;
This query is syntactically diﬀerent (three columns in the WHERE clause), but
produces the same result tuples as the ﬁrst (under the reasonable assumption
that all products in the database have a valid product name). Most syntax-
based anomaly detection schemes are likely to ﬂag this query as anomalous with
respect to the ﬁrst.
Syntax analysis, even if very detailed (taking into account diﬀerences in the
operand diﬀerence between ‘=’ and ‘>’ in the above examples) is complicated
given the expressiveness of the SQL language, and involves determining query
equivalence, which is diﬃcult to perform correctly. In fact, query containment and
equivalence is NP-complete for conjunctive queries and undecidable for queries
involving negation [10]. Our data-centric approach bypasses the complexities and
intricacies of syntax analysis.
4 Data-Centric User Proﬁles
A relational database often consists of multiple relations with attributes and
relationships speciﬁed by multiple primary key and foreign key constraints. One
can visualize a database as a single relation, called the Universal Relation [24],
incorporating the attribute information from all the relations in the database.
Our approach proﬁles users as follows: for each query we compute a statistical
“summary” of the query’s result tuples. The summary for a query is represented
by a vector of ﬁxed dimension regardless of how large the query’s result tuple
set is. This way, past queries (i.e. normal queries) from a user can be intuitively
thought of as a “cluster” in some high dimensional space. We’d like to emphasize
that clustering is only one of several statistical learning technique we will adopt
for this problem. The term clustering is used here to give the reader an intuitive
sense of the model. When a new query arrives, if it “belongs” to the user’s
cluster, it will be classiﬁed as normal, and abnormal otherwise.
388
S. Mathew et al.
Table 1. Statistics Vector Format for Sample Database Schema
Database Schema
S-Vector Features
Relation Attribute
Product
Product.type(varchar) Product.type.ncount
Product.type.ndistinct
Product.cost.Min
Product.cost(numeric) Product.cost.Max
Product.cost.Mean
Product.cost.StdDev
Product.cost.Median
Our query summary vector is called an S-Vector. An S-Vector is a multi-
variate vector composed of real-valued features, each representing a statistical
measurement; it is deﬁned by the columns of the universal relation correspond-
ing to a database. Each attribute of the universal relation contributes a number
of features to the S-Vector according to the following rules.
Numeric Attributes: each numeric attribute contributes the measurements Min
(value), Max (value), Mean, Median and Standard deviation.
the standard statistics do not make sense for non-
Non-Numeric Attributes:
numeric attributes (e.g., char and varchar). For categorical attributes, one op-
tion is to expand a k-value attribute into k binary-valued attributes (value 1
if the category is represented in the set of result tuples and 0 otherwise) and
compute statistics on them as usual. However, the expansion of categorical at-
tributes may result in an S-vector that has far too many dimensions, aﬀecting
the time-performance of the learner. We compromise by replacing each categori-
cal attribute with two numeric dimensions representing the total count of values,
as well as the number of distinct values for this attribute in the query result.
The S-Vector format for a database is determined by its schema; the value of
the S-Vector for a query is determined by executing the query and computing
the relevant attribute statistics based on the set of result tuples. Table 1 shows
the S-Vector format for a database consisting of a single relation. To illustrate
how an S-Vector value for a query is generated, consider the following query
executed against the database in Table 1:
SELECT p.cost
FROM PRODUCT p
WHERE p.type = ‘abc’;
For this query, the result schema consists of the single column Product.cost and
statistics computed on the result tuples are used to populate the Product.Min,
Product.Max, Product.Mean, Product.StdDev and Product.Median
features of the S-Vector format for the database – the result is the S-Vector
representation of this query.
A Data-Centric Approach to Insider Attack Detection in Database Systems
389
5 A Data-Centric Taxonomy of Query Anomalies
In order to evaluate the eﬀectiveness and accuracy of a threat detection engine,
a taxonomy of query anomalies can help us reason about potential solutions.
Subsequent experiments can analyze the performance of detection schemes with
respect to speciﬁc anomalies in light of this taxonomy. We shall classify query
anomalies based on how “far” the anomalous query is from a normal query. From
a data centric view point, two queries are represented by the two result sets, each
of which consists of the result schema (the columns) and the result tuples (the
rows). If the result schemas are (very) diﬀerent, the two queries are diﬀerent. If
the result schemas are similar, then we need to look into how diﬀerent the result
tuples are. On this basis we classify query anomalies. Table 2 summarizes the
taxonomy.
Table 2. A Taxonomy of Query Anomalies
Anomaly Cases Types
Type 1
Diﬀerent Schema/
Diﬀerent Results
Type 2
Similar Schema/
Diﬀerent Results
Type 3
Similar Schema/ Similar Semantics
Similar Results
(a) Distinct Syntax Yes
(b) Similar Syntax
No
(b) Diﬀerent Syntax/ Yes
Diﬀerent Semantics
(a) Diﬀerent Syntax/ False Positive
Detected by
Syntax-Centric? Data-Centric?
Yes
Yes
Detected by Attack Models
Masquerade
SQL-Injection
Data-Harvesting
Data Harvesting
Yes
Yes
Yes
(True Positive)
No (Rare)
Type 1: Distinct Schema and Tuples. Anomalous queries of this type have
result sets whose columns and rows are very diﬀerent from those of normal
queries. Intuitively, anomalous queries of this type should be detected by both
the syntax-based and the data-centric approaches. The syntax-based approach
works because queries that diﬀer in the result schema should have distinct SQL
expressions (especially in the SELECT clause). The data-centric approach works
because the S-vector of the anomalous query not only diﬀer in the dimensions
(the result schema) but also in the magnitudes in each dimension (the statistics
of the result tuples). From the insider threat perspective, data harvesting and
masquerading can both result in this type of anomaly. As an example, consider
the following two queries to the database described in Table 1:
Query 1: SELECT p.cost
Query 2: SELECT p.type
FROM PRODUCT p
WHERE p.type = ‘abc’;
FROM PRODUCT p
WHERE p.cost  100;
Yet the result tuples are the complement of that of the normal query. Thus, we
further classify type-2 anomalous queries into type-2a and type-2b, where type-
2a contains type-2 anomalous queries whose syntax are also distinct from normal
ones, and type-2b contains the rest. The intuition is that a syntax-based scheme
such as that in [18] is unlikely to be able to detect type-2b anomalous queries.
Indeed, the scheme in [18] represents the above type-2b query variation and
the original example query identically. Furthermore, type-2b anomalous queries
can be rewritten in multiple ways (e.g. p.cost != 100), varying combinations
of constants, arithmetic and logical operators; even very detailed syntax-based
models may be hard-pressed to consider all variations. We will show that data-
centric schemes are likely able to detect both of these anomalous types.
From the insider threat perspective, data harvesting and masquerading can
both result in type-2 anomaly. Another example of a well-known attack class
that may fall in this category is SQL injection since a typical attack is one that
injects input causing condition checks to be bypassed resulting in the output of
all tuples – e.g., a successful exploit of the ﬁrst example above may lead to the
execution of:
A Data-Centric Approach to Insider Attack Detection in Database Systems
391
SELECT *
FROM PRODUCT p
WHERE 1;
Type 3: Similar Schema and Tuples. A query whose execution results in
a similar schema and tuples as a normal one is considered to be similar from a
data-centric viewpoint. Clearly, if the queries also have the same syntax, then
their resulting schemas and tuples are the same and they are identical from both
the data-centric and syntax-centric view.
The interesting case arises when a query producing the same result as a normal
query is syntactically diﬀerent from the normal query. The question is, should
we consider such a query “anomalous”?
On the one hand, it seems to be obvious that a user accessing the same data
schema and tuples as those in his normal access patterns should not be ﬂagged
as malicious regardless of how diﬀerent the syntax of the queries he issued. For
example, the following two queries should be considered identical:
SELECT p.type
FROM PRODUCT p
WHERE p.cost < 100;
SELECT p.type
FROM PRODUCT p
WHERE p.cost < 100 AND p.type IN (
SELECT q.type
FROM PRODUCT q
);
The two queries have identical outputs, semantics, and thus user intent. We will
refer to an “anomalous” query of this type a type-3a query. Note again that
“anomalous” is not the same as “malicious.” Our approach will not raise a red
ﬂag, while the syntax-based approach would issue a false positive.
On the other hand, two queries resulting in the same output might actually
reveal more information than what is in the output. To see this, we have to look
a little deeper into the semantics of the queries. Consider the following query in
relation to the ones from the previous paragraph.
SELECT p.type
FROM PRODUCT p
WHERE true;
Now assume, for the sake of illustration, that the attacker is attempting to see
all product types (data harvesting). If the above query returns more (or diﬀerent
tuples) with respect to the ﬁrst example, then the data-centric approach should,
conceptually detect this. But in the rare case when the result tuples are exactly
the same, this would (as expected) be permitted by the data-centric approach.
However, the attacker has now gained the additional information (based on his
results from the query from the previous paragraph), that all product types in
the database cost less than 100, and has reﬁned his knowledge regarding some
entity. We call to this type of anomalous query type-3b.
This kind of successive knowledge accrual has received much interest in the
areas of privacy preserving data mining and query auditing ([4,19]). The attack