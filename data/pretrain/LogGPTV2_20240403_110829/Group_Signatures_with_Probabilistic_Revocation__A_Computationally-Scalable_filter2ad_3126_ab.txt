of the revocation correctness property. One of the intrinsic
attributes of GSPR that distinguishes it from all other GSs
is that it satisﬁes the revocation correctness property with
a certain probability, but not with certainty. GSPR exploits
the computational eﬃciency advantage of probabilistic al-
gorithm to signiﬁcantly reduce the computation cost of the
revocation check procedure. Below, we provide formal deﬁ-
nitions of the security properties mentioned above.
Deﬁnition 5. (Signature Correctness): It requires that
for all λ, n ∈ N, all (gpk, gms) obtained by KeyGen, all
(gski, grti, regi) obtained by Join for any i ∈ [1, n], and
all M ∈ {0, 1}∗,
SignCheck(gpk,Sign(gpk, gski, M ), M ) = valid.
Deﬁnition 6. (Identity Correctness): It requires that
for all λ, n ∈ N, all (gpk, gms) obtained by KeyGen, all
(gski, grti, regi) obtained by Join for any i ∈ [1, n], and
all M ∈ {0, 1}∗,
Open(reg,Sign(gpk, gski, M ), M ) = i.
Deﬁnition 7. (Revocation Correctness):
It requires
that for all λ, n ∈ N, all (gpk, gms) obtained by KeyGen,
all (gski, grti, regi) obtained by Join for any i ∈ [1, n], and
all M ∈ {0, 1}∗,
RevCheck(RC,Sign(gpk, gski, M )) = valid,
implies that the private key of the signer i is not revoked.
Deﬁnition 8. (Anonymity):
It requires that for each
PPT algorithm A, the advantage of A on winning the fol-
lowing game is negligibly small.
• Setup: The challenger runs KeyGen(λ) and Join(gms,
i, m), ∀i ∈ [1, n]. He obtains gpk, gsk, and reg. He
provides the algorithm A with gpk.
• Queries-Phase I : A queries the challenger about the
following.
– Signing: A requests a signature on an arbitrary
message M for an arbitrary member i. The chal-
lenger responds with the corresponding signature.
– Corruption: A requests the secret key of an ar-
bitrary member i. The challenger responds with
the key gski.
– Opening: A requests the identity of the signer
by providing a message M and its valid signature
σ created by signer i ∈ [1, n]. The challenger
responds with the signer’s identity i.
• Challenge: A outputs a message M and two members
i0 and i1 with the restriction that the corruption of
i0 and i1 have not been requested. The challenger
chooses φ R←− {0, 1}, and responds with the signature
σ∗ on M ∗ of member iφ.
1336• Queries-Phase II (Restricted Queries): After obtain-
ing the challenge, A can make additional queries of
signing, corruption and opening, except the corrup-
tion queries of i0 and i1, and the opening query of the
signature σ∗ on M ∗.
• Output: A outputs a bit φ′ indicating its guess of φ.
A wins the anonymity game if φ′ = φ. The advantage of A
is deﬁned as |Pr(φ′ = φ) − 1/2|.
Deﬁnition 9. (Traceability):
It requires that for each
PPT algorithm A, the probability that A wins the following
game is negligibly small.
• Setup: The challenger runs KeyGen(λ) and Join(gms,
i, m), ∀i ∈ [1, n]. He obtains gpk gsk, and reg. He
provides A with gpk, and sets U as empty.
• Queries: A queries the challenger about the following.
– Signing: A requests a signature on an arbitrary
message M for an arbitrary member i. The chal-
lenger responds with the corresponding signature.
– Corruption: A requests the secret key of an arbi-
trary member i. The challenger adds i to U , and
responds with the key gski.
• Output: A outputs a message M ∗ and a signature σ∗.
A wins the game if:
1. SignCheck(gpk, σ∗, M ∗) = valid;
2. σ∗ is traced to a member outside of U or the trace is
failure; and
3. A did not obtain σ∗ by making a signing query on M ∗.
4. PROPOSED SCHEME: GSPR
Before describing the low-level details of GSPR, we discuss
the motivation behind the concept of probabilistic revoca-
tion, which is one of the distinguishing attributes of GSPR.
4.1 Motivation for Probabilistic Revocation
In the GSs supporting VLR [3, 6, 16], the group manager
includes a revocation token corresponding to each revoked
private key in a revocation list, and distributes the revoca-
tion list to the veriﬁer. In each VLR based GS scheme, there
is an associated implicit tracing algorithm which utilizes the
revocation token to link a signature to a revoked private key
using which the signature is generated. This implicit algo-
rithm requires several exponentiation and/or bilinear map
operations which are computationally expensive. In the re-
vocation check procedure, the veriﬁer performs this implicit
tracing algorithm between the received signature, and each
revocation token in the revocation list. This means that the
computation time for the revocation check procedure of a
signature increases linearly with the number of revoked pri-
vate keys. Hence, the revocation check procedure becomes
the major bottleneck in the application of VLR based GSs
in real systems with large number of signers along with pos-
sibility of large number revoked private keys.
In this paper, we propose a VLR based GS, called Group
Signatures with Probabilistic Revocation (GSPR), in which
an alias token is embedded into the group signature gener-
ated by a signer in such a way that it can be utilized for the
purpose of revocation check procedure. GSPR signiﬁcantly
reduces the computation complexity of the revocation check
procedure by adopting two techniques. Firstly, it reduces
the computation cost of executing the implicit tracing al-
gorithm by using the alias tokens in generating signatures.
Secondly, it enables the veriﬁer to check the revocation sta-
tus of an alias token in a single step, instead of requiring the
veriﬁer to sequentially go through the revocation list and
execute the implicit tracing algorithm for each revocation
token included in the revocation list.
Speciﬁcally, the group manager issues a set of alias to-
kens corresponding to a private key of the signer, and the
signer embeds an alias token in each of its generated sig-
natures. When the private key of the signer is revoked,
all its corresponding alias tokens are added to a revocation
list. Further, each alias token is mapped to an “alias code”.
The group manager performs sample-by-sample addition of
all the alias codes corresponding to the alias tokens in the
revocation list to generate one code called the “revocation
code”. The revocation code, instead of the revocation list,
is provided to the veriﬁer. When the veriﬁer receives a par-
ticular signature with a particular alias token, he generates
the alias code corresponding to the alias token. The veri-
ﬁer computes the cross correlation of the alias code and the
revocation code. If the value of correlation exceeds a par-
ticular threshold, the veriﬁer presumes that the alias code
(of the signature being veriﬁed) is used to generate the re-
vocation code, and in turn concludes that the signature is
invalid because it is associated with a revoked alias token.
Otherwise, the veriﬁer concludes that the signature is valid.
The motivation for using alias codes comes from direct-
sequence spread spectrum (DSSS) systems used in commu-
nications [17]. DSSS is a modulation technique that enables
the receiver to remove undue interference and recover the
correct information from an aggregate of multiple signals
even when multiple transmitters send information simulta-
neously over a single channel. Information recovery is made
possible with the use of specially-crafted spreading codes.
Further, we discuss the speciﬁc technical details of GSPR.
4.2 Technical Details
p and Hg : {0, 1}∗ → G2
For a given security parameter λ ∈ N, we consider a bilin-
ear group pair (G1,G2) with isomorphism ψ. We represent
Hz : {0, 1}∗ → Z∗
2 as collision re-
sistant hash functions treated as random oracles. Also, we
consider a set of alias codes, Cp. The order of Cp is p which
is equal to the order of Z∗
p. Each element in Cp is an alias
code which is a vector of +1s and −1s of length l. Further,
we deﬁne a mapping function Fc : Z∗
p → Cp using which
an alias token in Z∗
p can be mapped to an alias code in
Cp. The details of Cp and Fc are discussed in Section 5.4.1.
G1, G2, ψ, Hz, Hg, Cp and Fc are considered public knowl-
edge. In the following paragraphs, we deﬁne the algorithms
that make up GSPR.
KeyGen(λ): With the security parameter λ ∈ N, this al-
gorithm generates the group public key gpk and the group
manager’s secret gms through the following steps.
1. Select a generator g2
R←− G2, and set g1 = ψ(g2) such
that g1 is a generator of G1.
2. Select γ R←− Z∗
p, and compute wk = gγk
2 , ∀k ∈ [0, m].
Note that w0 = g2.
The group public key is gpk = (g1, g2, w1, w2, · · · wm). The
secret belonging only to the group manager is given by gms =
γ. The output of this algorithm is (gpk, gms).
Join(gms, i, m): This algorithm adds the signer i as a mem-
ber of the group with the group manager’s secret gms, and
generates m alias tokens for signer i, and a corresponding
secret key gski. This algorithm also generates a revocation
1337token grti for signer i, and an entry in the registration list
regi using the following steps.
1. Select yi
2. Compute the set of m alias tokens,
R←− Z∗
p.
Xi = {xik : xik = Hz(yi, k), ∀k ∈ [1, m]},
(1)
where kth alias token of signer i is represented by xik.
3. Compute πi = Qm
k=1(γ + xik), and calculate
Ai = g1/πi
1
.
(2)
In the unlikely case, if πi = 0, restart from Step 1.
For signer i, the secret key is gski = (Ai, yi), the revocation
token is grti = Xi, and the entry in the registration list is
regi = Xi. Note that only the group manager has access
to reg. The output of this algorithm is (gski, grti, regi).
Sign(gpk, gski, M ): The inputs to the signing algorithm are
the group public key gpk, the signer’s secret key gski, and
the message to be signed M ∈ {0, 1}∗. This algorithm gen-
erates a signature σ on M using the following steps.
1. Generate the following parameters.
(b) Deﬁne πi = Qm
(a) Compute the alias tokens Xi using equation (1).
k=0 akγk, where
a0, a1, · · · , am ∈ Z∗
p are the coeﬃcients of the
polynomial πi with the variable γ, and compute
k=1(γ + xik) = Pm
Bi = gπi
2 =
wak
k .
(3)
mY
k=0
(c) For each xik ∈ Xi, deﬁne πi/(γ+xik) = Qm
j=1,j6=k
j=0 bjγj, where b0, b1, · · · , bm−1 ∈
(γ + xij) = Pm−1
Z∗
p are the coeﬃcients, and compute
Cik = gπi/(γ+xik)
2
=
m−1Y
j=0
w
bj
j .
(4)
2. Select a tuple (Ai, Bi, Cik, xik) by selecting some value
of k ∈ [1, m]. The signer utilizes a particular k to sign
all its signatures during some time interval. After this
time interval, she discards the alias token. When the
signer exhausts all its alias tokens, she runs the Join
algorithm again to fetch new secret key, and computes
corresponding set of new alias tokens.
3. Compute (ˆu, ˆv) = Hg(gpk, M, xik), and calculate their
images in G1, such that u = ψ(ˆu) and v = ψ(ˆv).
4. Select α, β, δ R←− Z∗
p, and compute T1 = uα, T2 = Aivα,
T3 = Bβ
i , and T4 = C δ
ik.
5. Compute the signature of knowledge (SP K) [16] which
is expressed as follows.
V = SP K{(α, β, δ, xik, Ai, Bi, Cik) :
, Cik)}(M )
i , T4 = C δ
T1 = uα, T2 = Aivα, T3 = Bβ
ik,
1 gxik
e(Ai, Bi) = e(g1, g2), e(g1, Bi) = e(gγ
= SP K{(α, β, δ, xik, Ai, Bi, Cik) :
T1 = uα, e(T2, T3) = e(v, T3)α e(g1, g2)β,
1 = e(g1, T3)δ e(ψ(w1)gxik
, T4)−β}(M ).
1
(5)
This SP K is computed with the Fiat-Shamir heuristic
method [9] using the following steps.
1
(a) Select binding factors rα, rβ, rδ
R←− Z∗
p, and com-
pute
R1 = urα , R2 = e(v, T3)rα e(g1, g2)rβ ,
R3 = e(g1, T3)rδ e(ψ(w1)gxik
, T4)−rβ .
1
(6)
(b) Compute the challenge c as
c = Hz(gpk, M, xik, T1, T2, T3, T4, R1, R2, R3).
(c) Compute responses, sα = rα + cα, sβ = rβ + cβ,
and sδ = rδ + cδ.
The output of this algorithm is the signature
σ = (xik, T1, T2, T3, T4, c, sα, sβ, sδ).
(7)
Verify(gpk, RC, σ, M ): The veriﬁcation algorithm takes as
input the group public key gpk, the revocation code RC,
the signature σ, and the message M . Using the following
sub-algorithms, it veriﬁes two things: (1) whether the sig-
nature was honestly generated, and (2) revocation status of
the alias token used to generate the signature. If both the
sub-algorithms output valid, this algorithm outputs valid;
otherwise it outputs invalid.
• SignCheck(gpk, σ, M ): With the group public key gpk
and a purported signature σ on a message M , this sub-
algorithm outputs valid if σ is an honest signature on
M . This is checked using the following steps.
1. Compute (ˆu, ˆv) = Hg(gpk, M, xik), and calculate
their images in G1, i.e., u = ψ(ˆu) and v = ψ(ˆv).
2. Retrieve:
3. Check the correctness of the challenge c as
1 , eR2 = e(v, T3)sα e(g1, g2)sβ e(T2, T3)−c
eR1 = usα T −c
eR3 = e(g1, T3)sδ e(ψ(w1)gxik
c ?= Hz(gpk, M, xik, T1, T2, T3, T4, eR1, eR2, eR3).
If the above equation holds, this sub-algorithm
outputs valid; otherwise, it outputs invalid.
, T4)−sβ .
(8)
1
• RevCheck(RC, σ): The inputs to the revocation check
algorithm are the alias token xik embedded in the sig-
nature σ, and the revocation code, RC. The purpose of
this sub-algorithm is to check whether the alias token,
xik, has been revoked or not, which is accomplished
using the following steps.
1. Map xik to the corresponding alias code sik, i.e.,
compute sik = Fc(xik), where sik is a column
vector of length l of samples of +1s and −1s.
2. Compute the value of the decision variable, z =
1