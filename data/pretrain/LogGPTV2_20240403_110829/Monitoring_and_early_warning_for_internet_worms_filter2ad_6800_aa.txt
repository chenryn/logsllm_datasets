title:Monitoring and early warning for internet worms
author:Cliff Changchun Zou and
Lixin Gao and
Weibo Gong and
Donald F. Towsley
Monitoring and Early Warning
for Internet Worms
Cliff Changchun Zou,
Lixin Gao,
Weibo Gong,
Don Towsley
{czou, lgao, gong}@ecs.umass.edu,
University of Massachusetts at Amherst
PI:EMAIL
ABSTRACT
After the Code Red incident in 2001 and the SQL Slammer
in January 2003, it is clear that a simple self-propagating
worm can quickly spread across the Internet, infects most
vulnerable computers before people can take eﬀective coun-
termeasures. The fast spreading nature of worms calls for a
worm monitoring and early warning system. In this paper,
we propose eﬀective algorithms for early detection of the
presence of a worm and the corresponding monitoring sys-
tem. Based on epidemic model and observation data from
the monitoring system, by using the idea of “detecting the
trend, not the rate” of monitored illegitimated scan traﬃc,
we propose to use a Kalman ﬁlter to detect a worm’s propa-
gation at its early stage in real-time. In addition, we can ef-
fectively predict the overall vulnerable population size, and
correct the bias in the observed number of infected hosts.
Our simulation experiments for Code Red and SQL Slam-
mer show that with observation data from a small fraction
of IP addresses, we can detect the presence of a worm when
it infects only 1% to 2% of the vulnerable computers on the
Internet.
Categories and Subject Descriptors
K.6.5 [Management of computing and information
systems]: Security and Protection—Invasive software
General Terms
Security, Algorithms
Keywords
Monitoring, Early detection, Worm propagation
1.
INTRODUCTION
Since the Morris worm in 1988 [21], the security threat
posed by worms has steadily increased, especially in the last
several years. In 2001, the Code Red and Nimda infected
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’03, October 27–31, 2003, Washington, DC, USA.
Copyright 2003 ACM 1-58113-738-9/03/0010 ...$5.00.
hundreds of thousands of computers [17, 22], causing mil-
lions of dollars loss to our society [8]. After a relatively quiet
period, the SQL Slammer appeared on January 25th, 2003,
and quickly spread throughout the Internet [19]. Because
of its very fast scan rate, Slammer infected more than 90%
of vulnerable computers on the Internet within 10 minutes
[19]. In addition, the large amount of scan packets sent out
by Slammer caused a global-scale denial of service attack
to the Internet. Many networks across Asia, Europe, and
America were eﬀectively shut down for several hours [6].
Currently, some organizations and security companies, such
as the CERT, CAIDA, and SANS Institute [3, 4, 23], are
monitoring the Internet and paying close attention to any
abnormal traﬃc. When they observe abnormal network ac-
tivities, their security experts will immediately analyze these
incidents. However, no nation-scale malware monitoring and
defense center exists. Given the fast spreading nature of
Internet worms and their heavy damage to our society, it
seems appropriate to setup a nation-scale worm monitoring
and early warning system.
In order to detect an unknown (zero-day) worm, a straight-
forward way is to use various threshold-based anomaly de-
tection methods to detect the presence of a worm. We can
directly use some well-studied methods established in the
anomaly intrusion detection area. However, many threshold-
based anomaly detections have the trouble to deal with their
high false alarm rate. In the case of worm detection, we ﬁnd
that there is a major diﬀerence between a worm’s propa-
gation and a hacker’s intrusion attack: the propagation of
a worm code exhibits simple attack behaviors and usually
follows some dynamic models because it is usually a global
large-scale propagation; on the other hand, a hacker’s in-
trusion attack, which is more complicated, usually targets
one or a set of speciﬁc computers and does not follow any
well-deﬁned dynamic model in most cases.
Therefore, we do not use any threshold-based anomaly
detection methods in this paper. Instead, we fully exploit
a worm’s simple behavior based on well-studied epidemic
models. We present a Kalman ﬁlter to detect the propa-
gation of a worm in its early stage based on observed ille-
gitimated scan traﬃc, which includes both real worm scans
and background noise. The Kalman ﬁlter will not only make
use of the correlation of the history trace of observation data
(not just a burst of traﬃc at one time), but also the dynamic
trend of the propagation of a worm — at the beginning of
a worm’s spreading when there are little human counter-
actions or network congestions, a worm propagates almost
exponentially with a constant, positive infection rate.
190The Kalman ﬁlter is activated when the monitoring sys-
tem encounters a surge of illegitimated scan activities.
If
the worm infection rate estimated by the Kalman ﬁlter sta-
bilizes and oscillates a little bit around a constant positive
value, we can claim that the illegitimated scan activities are
mainly caused by a worm, even if the estimated value of the
worm’s infection rate is still not well converged. If the illegit-
imated scan traﬃc is caused by non-worm noise, the traﬃc
will not have the exponential growth trend, then the esti-
mated value of infection rate would oscillate around without
a ﬁxed central point, or it would oscillate around zero. In
other words, the Kalman ﬁlter is used to detect the pres-
ence of a worm by detecting the trend, not the rate, of the
observed illegitimated scan traﬃc. In this way, the unpre-
dictable, noisy illegitimated scan traﬃc we observe everyday
will not cause many false alarms to our detection system —
such background noise will cause great trouble to traditional
threshold-based detection methods.
Our algorithms can also provide the estimated value of a
worm’s scan rate and its vulnerable population size. With
such forecast information, people can take appropriate ac-
tions to deal with the worm. In addition, we present a for-
mula to correct the bias in the number of infected hosts
observed by monitors— this bias has been mentioned in [5]
and [20], but neither of them has presented methods to cor-
rect the bias.
1.1 Related Work
In recent years, people have paid attention to the necessity
of monitoring the Internet for malicious activities. Moore
presented the concept of “network telescope”, in analogy
to light telescope, by using a small fraction of IP space to
observe security incidents on the global Internet [20]. Yeg-
neswaran et al. pointed out that there was no obvious ad-
dressing biases when using the “network telescope” monitor-
ing methodology [26]. “Honeynet” is a network of honeypots
trying to gather comprehensive information of attacks [12].
Symantec Corp. has an “enterprise early warning solution”,
which can collect IDS and ﬁrewall attack data from the se-
curity systems of thousands of partners to keep track of the
latest attack techniques [25]. The SANS Institute set up the
“Internet Storm Center” in November 2000, which could
gather the log data from participants’ intrusion detection
sensors distributed around the world [16]. It has quickly ex-
panded to gather more than 3, 000, 000 intrusion detection
log entries every day. Berk et al. proposed a monitoring
system by collecting ICMP “Destination Unreachable” mes-
sages generated by routers for packets to non-existent IP
addresses [2]. Based on such a monitoring system, they also
presented a threshold-based detection system called TRAF-
FEN.
The monitoring system we present can be incorporated
into the current monitoring systems such as the SANS “In-
ternet Storm Center”. Our contribution in this context is to
point out the infrastructure speciﬁcally for worm monitor-
ing, and what data should be collected for worm early detec-
tion. We also emphasize the functionality of egress monitors,
which has been ignored in previous research. Worm mon-
itors can be ingress or egress ﬁlters on routers, which can
cover more IP space and gather more comprehensive infor-
mation than the log data from intrusion detection sensors
or ﬁrewalls.
In the area of virus and worm modelling, Kephart, White
and Chess of IBM performed a series of studies from 1991
to 1993 on viral infection based on epidemiology models [13,
14, 15]. Staniford et al. used the classical simple epidemic
model to model the spread of Code Red right after the Code
Red incident on July 19th, 2001 [24]. Their model matched
well the increasing part of the observation data. Zou et
al. presented a “two-factor” worm model that considered
both the eﬀect of human countermeasures and the eﬀect
of the congestion caused by worm scan traﬃc [27]. Chen
et al. presented a discrete-time version worm model that
considered the patching and cleaning eﬀect during a worm’s
propagation [5].
For a very fast spreading worm such as Slammer, it is
necessary to have automatic response and mitigation mech-
anisms. Moore et al. discussed the eﬀect of Internet quar-
antine for containing worm propagation [18]. However, they
did not present how to detect a worm in its early stage.
The CounterMalice devices from Silicon Defense company
can separate an enterprise network into cells, automatically
block a worm’s traﬃc when detecting the worm. In this way,
an infected host inside a cell will not be able to infect com-
puters in other cells of the enterprise network [9]. However,
the white paper did not explain how the CounterMalice de-
vices detect a worm at its early stage.
1.2 Discussions
In this paper, we mainly focus on worms that uniformly
scan the Internet. The most widespread Internet worms,
including both Code Red and Slammer, belong to this cate-
gory (although the Slammer has a bad-coded random num-
ber generator, the generator has a good random initial seed.
Thus “it is likely that all Internet addresses would be probed
equally” [19] by Slammer). Uniform scan is the simplest and
yet an eﬃcient way for a worm to propagate when the worm
has no prior knowledge of where vulnerable computers re-
side.
We assume that the IP infrastructure is the current IPv4.
If IPv6 replaces IPv4, the 2128 IP space of the IPv6 would
make it futile for a worm to propagate through blindly ran-
dom IP scans. However, we believe IPv6 will not replace
IPv4 in the near future, and worms will continue to use the
random scan technique to spread on the Internet.
2. WORM PROPAGATION MODEL
A promising approach for modelling and evaluating the
behavior of malware is the use of ﬂuid models. Fluid models
are appropriate for a system that consists of a large number
of vulnerable hosts involved in a malware attack. The simple
epidemic model assumes that each host resides in one of two
states: susceptible or infectious. The model further assumes
that, once infected by a virus or a worm, a host remains in
the infectious state forever. Thus any host has only one
possible state transition: susceptible → infectious [10]. The
simple epidemic model for a ﬁnite population is
dIt
dt = βIt[N − It],
(1)
where It is the number of infected hosts at time t; N is
the size of population; and β is called the pairwise rate of
infection in epidemic studies [10]. At t = 0, I0 hosts are
infectious while the remaining N − I0 hosts are susceptible.
This model could capture the mechanism of a uniform
scan worm [24], especially for the initial part of a worm’s
propagation when the eﬀect of human counteractions and
congestion is ignorable [27].
In this paper, we only study
the initial part of worm spreading for the purpose of early
detection. Therefore, it is suitable for us to use the simple
epidemic model (1) instead of other complex models, such
as the two-factor worm model in [27].
x 105
Slow finish   
 phase        
Slow start    
 phase        
Fast spread phase 
I
t
5
4.5
4
3.5
3
2.5
2
1.5
1
0.5
0
0
100
200
300
Time t
400
500
600
Figure 1: Worm propagation model
For the epidemic model (1), Fig. 1 shows the dynamics
of It as time goes on for one set of parameters. We can
roughly partition a worm’s propagation into three phases:
the slow start phase, the fast spread phase, and the slow
ﬁnish phase. During the slow start phase, since It (cid:5) N , the
number of infected hosts increases exponentially (model (1)
becomes dIt/dt ≈ βN It). After many hosts are infected and
then participate in infecting others, the worm enters the fast
spread phase where vulnerable hosts are infected at a fast,
near linear speed. When most of vulnerable computers have
been infected, the worm enters the slow ﬁnish phase because
the few leftover vulnerable computers are diﬃcult for the
worm to search out. Our task is to detect the presence of a
worm in its slow start phase.
Table 1: Notations in this paper
Notation Deﬁnition
N
∆
It
β
α
Ct
Number of hosts under consideration
The length of monitoring interval (time
unit in discrete-time model)
Number of infected hosts at time t∆
Pairwise rate of infection
Infection rate per infected host, α = βN
Number of infected hosts monitored
by time t∆
Monitored worm scan rate at time t∆
Average scan rate per infected host
Probability a worm scan is monitored
Measurement data in Kalman ﬁlter
White noise in observation at time t∆
Constant in equation yt = δIt + wt
Variance of observation error
Abbr. of “Malware Warning Center”
Estimated value of α
Transpose of a matrix A
Zt
η
p
yt
wt
δ
R
MWC
ˆα
Aτ
N (µ, σ2) Normal distribution with mean µ
and variance σ2
In this paper, we use discrete-time model for worm mod-
elling. Time is divided into intervals of length ∆, where ∆
is the discrete time unit. To simplify the notations, we use
“t” as the discrete time index from now on. For example,
It means the number of infected hosts at the real time t∆.
The discrete-time version of the simple epidemic model (1)
can be written as [10]:
It = (1 + α)It−1 − βI 2
t−1
(2)
where α = βN . We call α the infection rate, the average
number of vulnerable hosts that can be infected per unit
time by one infected host during the early stage of worm
propagation.
Before we go on to discuss how to use the worm model to
detect and predict worm propagation, we will ﬁrst present
the monitoring system design in the next Section 3 and dis-
cuss data collection issues in Section 4.
3. MONITORING SYSTEM
In this section, we propose the architecture of a worm
monitoring system. The monitoring system aims to provide
comprehensive observation data on a worm’s activities for
the early detection of the worm. The monitoring system con-
sists of a Malware Warning Center (MWC) and distributed
monitors as shown in Figure 2.
3.1 Monitoring System Architecture
Figure 2: A generic worm monitoring system
There are two kinds of monitors:
ingress scan monitors
Ingress scan monitors are lo-
and egress scan monitors.
cated on gateways or border routers of local networks. They
can be the ingress ﬁlters on border routers of the local net-
works, or separated passive network monitors. The goal of
an ingress scan monitor is to monitor scan traﬃc coming
into a local network by logging incoming traﬃc to unused
IP addresses. For management reason, Local network ad-
ministrators know how addresses inside their networks are
allocated; it is relatively easy for them to set up the ingress
scan monitor on routers in their local networks. For exam-
ple, during the Code Red incident on July 19th, 2002, a /8
network at UCSD and two /16 networks at Lawrence Berke-
ley Laboratory were used to collect Code Red scan traﬃc.
All port 80 TCP SYN packets coming in to nonexistent IP
addresses in these networks were considered to be Code Red
scans [17].
Berk et al. presented a worm monitoring system by col-
lecting the ICMP “Destination Unreachable” messages gen-
erated by routers for packets to unused IP addresses [2]. In
fact, such ICMP data are essentially the same data as the
data collected by the ingress scan monitors here: when en-
countering packets to unused IP addresses, the routers of
local networks can either send ICMP messages to the mon-
itoring system of [2], or send such information to the MWC
of the monitoring system in this paper.
An egress scan monitor is located at the egress point of
a local network. It can be set up as a part of the egress ﬁl-
ter on the routers of a local network. The goal of an egress
scan monitor is to monitor the outgoing traﬃc from a net-
work to infer a potential worm’s scan behavior. Ingress scan
monitors listen to the global traﬃc on the Internet; they are
the sensors of the global worm incidents (or called “network
telescope” in [20]). However, it is diﬃcult to determine the
behavior of each individual worm from the data collected
by ingress scan monitors since ingress scan monitors can-
not capture most of the scans sent out by an infected host.
On the other hand, if a computer inside a local network is
infected, the egress scan monitor on this network’s routers
can observe most of the scans sent out by the compromised
computer. The closer the egress scan monitor is to an in-
fected computer, the more complete data could be obtained
about the worm’s scan behavior.
For worm early warning at real-time, distributed monitors
are required to send observation data to the MWC contin-
uously without signiﬁcant delay, even when the worm scan
traﬃc has caused congestion to the Internet. For this reason,
a tree-like hierarchy of data mixers can be set up between
monitors and the MWC: the MWC is the root; the leaves
of the tree are monitors. The monitors nearby a data mixer
send observed data to the data mixer. After fusing the data
together, the data mixer passes the data to a higher level
data mixer or directly to MWC. An example of data fusion is
the removal of redundant addresses from the list of infected
hosts. However, the tree structure of data mixers creates
single points of failure, thus there is a trade-oﬀ in designing
this hierarchical structure.