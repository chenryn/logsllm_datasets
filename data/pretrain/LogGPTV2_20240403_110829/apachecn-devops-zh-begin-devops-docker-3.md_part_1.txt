# 三、编排和交付
创建 Docker 主机集群的主要动机是为高可用性进行设计。大多数(如果不是全部的话)集群和编排工具，如 Docker Swarm 和 Kubernetes，通过创建主从关系来利用集群。这确保了在环境中任何一个节点发生故障时，总有一个节点可以依靠。将集群部署到云提供商时，您可以利用多种技术来确保您的环境高度可用，例如 Consul，还可以通过在单独的可用性区域中部署主节点和节点来利用云的本机容错设计。
# 课程目标
本课结束时，您将能够:
*   获得 DockerSwarm 体模式的概述
*   使用 Docker 引擎创建一群 Docker 引擎
*   管理集群中的服务和应用
*   向上和向下扩展服务，以处理应用中的更多请求
*   负载平衡 DockerSwarm 部署
*   安全的 Docker 容器和部署
# 编排
在我们当地的环境中运行容器很容易，不需要我们付出很多努力；谈到云，我们需要一种不同的心态和工具来帮助我们实现这一目标。我们的环境应该是**高可用、容错**和**易扩展**。这种协调资源和/或容器的过程产生了一个整合的工作流，这就是流程编排。
首先，让我们熟悉一下在配器方面使用的一些术语:
*   `docker-engine`:这个指的是我们目前电脑上的 Docker 捆绑包或安装
*   `docker-machine`:帮助我们在虚拟主机上安装 Docker 的工具
*   `Virtual hosts`:这些是在物理主机下运行的虚拟服务器
*   `docker-swarm`:Docker 的聚类工具
*   `docker host`:设置或安装了 Docker 的主机或服务器
*   `Node`:连接到 Swarm 集群的 Docker 主机
*   `Cluster`:一组 Docker 主机或节点
*   `Replica`:一个实例的一个副本或多个副本
*   `Task`:在节点上运行的定义的操作
*   `Service`:一组任务
### 注
以下是本课中最常见的术语:
*   `docker-engine`:在我们的电脑上运行 Docker
*   `docker-machine`:帮助我们安装 Docker 的工具或 CLI
*   `Virtual hosts`:运行在物理主机上的主机或服务器。
*   `docker-swarm:`一个用于 Docker 的聚类工具
*   `Docker host`:任何运行 Docker 的服务器或主机
*   `Node`:这个指的是绑定到 Swarm 集群的任何主机。
*   `Cluster`:一组被管理和被控制的主机。
*   `Replica`:各种任务的其他运行主机的副本
*   `Task`:安装、升级或移除等操作。
*   `Service`:多个任务定义一个服务。
现在我们至少熟悉了上面的术语，我们准备使用`docker-machine`实现一个 Docker Swarm 编排流。
# DockerSwarm 体概述
DockerSwarm 是 Docker 容器的一个聚类工具。它允许你建立和管理一个集群的 Docker**节点**作为一个单一**虚拟系统**。这意味着我们可以在计算机的多个主机上运行 Docker。
我们通过主要处理和**控制**容器的管理器来控制集群。使用群管理器，您可以创建一个主管理器实例和多个**副本**实例，以防主管理器出现故障。这意味着群中可以有多个经理！
### 注
群是从一个管理器节点创建的，其他 Docker 机器作为工作者节点或管理器节点加入集群。
集群很重要，因为它创建了一组提供冗余的协作系统，创造了一个容错环境。例如，如果一个或多个节点发生故障，Docker Swarm 将故障转移到另一个工作节点。
**群管理器** 执行以下角色:
*   接受`docker`命令
*   对集群执行命令
*   支持高可用性；部署一个主实例和一个辅助实例，在主实例出现故障时可以接管
Docker Swarm 使用**调度**来优化资源并确保环境中的效率。它**将容器**分配给最合适的**节点**。这意味着 Docker Swarm 会将容器分配给最健康的节点。
### 注
请记住，节点是运行 Docker 的**主机，而不是**容器。****
可以将 Swarm 配置为使用以下任何一种调度策略:
*   **随机**:将新容器部署到随机节点。
*   **展开** : Swarm 将新容器部署到容器数量最少的节点。
*   **Binpack**:Binpack 策略包括将新容器部署到容器数量最多的节点。
你可以在[https://www.virtualbox.org/wiki/Downloads](https://www.virtualbox.org/wiki/Downloads)下载 VirtualBox:
![An Overview of Docker Swarm](img/image03_01.jpg)
### 注
要模拟一个 Docker Swarm 集群，我们需要在本地安装一个虚拟机管理程序(虚拟机管理程序类型 2 是作为软件应用安装在现有操作系统上的虚拟机管理程序)，在本例中是 VirtualBox，这将允许我们通过`docker-machine`在本地创建多个运行 Docker 的主机，然后将它们添加到 Swarm 集群中。部署到云供应商时，这是使用他们的计算服务实现的，例如 AWS 上的 EC2。
对于 Windows 操作系统，选择您的操作系统发行版，您应该可以立即下载。运行可执行文件并安装 VirtualBox。
# 使用 Docker 引擎创建群
在我们创建我们的蜂群之前，让我们快速了解一下`docker-machine cli`。在你的终端上输入`docker-machine`应该会给你这个输出:
![Using Docker Engine to Create a Swarm](img/image03_03.jpg)
就在下面，我们有我们的命令列表:
![Using Docker Engine to Create a Swarm](img/image03_04.jpg)
### 注
当你需要澄清一些事情的时候，记得一定要使用`help`选项，也就是`docker-machine stop --help`
为了创建我们的第一个 Docker Swarm 集群，我们将首先使用`docker-machine`来创建我们的经理和工人节点。
在创建第一台机器之前，快速浏览一下我们的目标，我们会得到以下信息:我们将有四台 Docker 机器、一名经理和三名工人；它们都运行在 VirtualBox 上，因此有四个**虚拟机**。
## 创建 Docker 机器
该命令是用来创建一个新的虚拟 Docker 主机:
```
docker-machine create --driver  
```
这意味着我们的 Docker 主机将在 **VirtualBox** 上运行，但由`docker-machine`管理和控制。`--driver`选项指定创建机器的驱动程序。在这种情况下，我们的驱动程序是 **VirtualBox** 。
我们的命令是`docker-machine create --driver virtualbox manager1`。
### 注
我们在命令中需要驱动程序，因为这是我们主机的基础，这意味着我们的`manager1`机器将作为虚拟主机在 VirtualBox 上运行。不同的供应商提供了多种驱动程序，但这是用于演示目的的最佳驱动程序。
![Creating Docker Machines](img/image03_05.jpg)
## 列出创建的机器
该命令将提供当前在您的主机上的所有 Docker 机器的列表和更多信息，例如机器的状态、驱动程序等:`docker-machine ls`
![Listing Created Machines](img/image03_06.jpg)
### 注
列出我们的机器非常重要，因为它为我们提供了机器状态的更新。我们并没有真正得到错误的通知，这有时会导致一个致命的事件。在机器上做一些工作之前，这将给出一个简短的概述。通过`docker-machine status`命令可以进行更详细的检查。
## 工人机器创建
我们将遵循相同的过程为我们的 Swarm 集群创建三个工人机器，换句话说，运行`docker-machine create --driver virtualbox `三次，在每次后续运行中将`worker1, worker2,`和 `worker3` 作为 `` 的值传递:
![Worker Machine Creation](img/image03_07.jpg)
![Worker Machine Creation](img/image03_08.jpg)
最后最后一个工作节点将显示如下:
![Worker Machine Creation](img/image03_09.jpg)
这样做之后，运行`docker-machine ls`，如果创建成功，您将看到类似如下的输出:
![Worker Machine Creation](img/image03_10.jpg)
### 注
根据目的命名机器有助于我们避免对错误主机的意外调用。
## 初始化我们的蜂群
现在我们的机器已经开始运转，是时候创造我们的蜂群了。这将通过管理器节点`manager1`完成。以下是我们将采取的步骤，以实现一个成熟的群体:
1.  连接到管理器节点。
2.  将`manager1`节点声明为管理器，并公布其地址。
3.  获取节点加入群的邀请地址。
我们将使用`ssh` 进行连接。`ssh` 是用于访问或连接主机或服务器的安全网络协议。
### 注
Docker 机器通过`docker-machine cli.` DockerSwarm 作为服务运行来控制，该服务将所有 Docker 机器绑定在一起，并将它们统一在一个管理机器或节点下。这并不意味着集群中的机器在任何方面都是相同或相似的，它们都可能运行不同的服务或操作，例如，数据库主机和网络服务器。Docker Swarm 进来帮助编排主持人。
该命令用于获取一台或多台 Docker 机器的 IP 地址:
```
docker-machine ip 
```
该命令用于获取一台或多台 Docker 机器的 IP 地址。``是我们需要其 IP 地址的机器的名称。在我们的例子中，我们将使用它来获取`manager1`节点的 IP 地址，因为我们在初始化集群模式时需要它:
![Initializing our Swarm](img/image03_11.jpg)
## 连接到机器
该命令用于使用`SSH:`登录机器
```
docker-machine ssh 
```
成功连接到我们的`manager1`后，我们应该会得到如下输出:
![Connecting to a Machine](img/image03_12.jpg)
### 注
在云供应商上使用`ssh protocol`将需要通过用户名和密码或`ssh keys`进行认证和/或授权。我们不会深入讨论这个问题，因为这是一个演示。
## 初始化群体模式
以下是初始化集群模式的命令:
```
docker swarm init --advertise-addr 
```
让我们在管理器节点中运行这个命令来初始化一个群。`advertise-addr` 选项用于指定将向群的其他成员通告的地址，以便进行应用编程接口访问和联网。
在这种情况下，它的值是`manager IP address`，它的值是我们之前运行`docker-machine ip manager1`得到的:
### 注
我们之前提到 Docker Swarm 是一个通过管理器节点绑定和编排所有机器的服务。为了实现这一点，Docker Swarm 让我们通过在`docker swarm init`命令中包含`advertise-addr`来通过管理器的地址通告集群。
![Initializing Swarm Mode](img/image03_13.jpg)
运行命令的输出显示我们的节点现在是一个管理器！
请注意，我们还有两个命令:一个应该允许我们邀请其他节点加入集群，另一个应该允许我们向集群添加另一个管理器。
### 注
在设计高可用性时，建议有多个管理器节点在主管理器节点出现故障时接管。
### 注
确保您保存输出中列出的两个命令，因为它们将有助于在群中添加其他主机。
## 向我们的群中添加工人
该命令是用来添加群工`:`
```
docker swarm join --token  :
```
在我们可以将我们的工人添加到群中之前，我们需要通过`ssh.`连接到他们
我们通过运行`docker-machine ssh `然后运行我们从`manager1 node.`获得的邀请命令来实现这一点
### 注
`docker-machine`命令可以从任何目录运行，并将始终与创建的机器一起工作。
首先，我们将使用`exit`命令退出管理器节点:
![Adding Workers to our Swarm](img/image03_14.jpg)
然后，我们通过`ssh`连接到一个工作节点:
![Adding Workers to our Swarm](img/image03_15.jpg)
最后，我们将节点添加到集群中: