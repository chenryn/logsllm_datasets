title:What Cannot Be Read, Cannot Be Leveraged? Revisiting Assumptions of
JIT-ROP Defenses
author:Giorgi Maisuradze and
Michael Backes and
Christian Rossow
What Cannot Be Read, Cannot Be Leveraged? 
Revisiting Assumptions of JIT-ROP Defenses
Giorgi Maisuradze, Michael Backes, and Christian Rossow, Saarland University
 https://www.usenix.org/conference/usenixsecurity16/technical-sessions/presentation/maisuradze
This paper is included in the Proceedings of the 25th USENIX Security SymposiumAugust 10–12, 2016 • Austin, TXISBN 978-1-931971-32-4Open access to the Proceedings of the 25th USENIX Security Symposium is sponsored by USENIX What Cannot be Read, Cannot be Leveraged?
Revisiting Assumptions of JIT-ROP Defenses
Giorgi Maisuradze
CISPA, Saarland University
Saarland Informatics Campus
Michael Backes
CISPA, Saarland University
Saarland Informatics Campus
PI:EMAIL
PI:EMAIL
Christian Rossow
CISPA, Saarland University
Saarland Informatics Campus
PI:EMAIL
Abstract
Despite numerous attempts to mitigate code-reuse at-
tacks, Return-Oriented Programming (ROP) is still at
the core of exploiting memory corruption vulnerabili-
ties. Most notably, in JIT-ROP, an attacker dynamically
searches for suitable gadgets in executable code pages,
even if they have been randomized. JIT-ROP seemingly
requires that (i) code is readable (to ﬁnd gadgets at run
time) and (ii) executable (to mount the overall attack). As
a response, Execute-no-Read (XnR) schemes have been
proposed to revoke the read privilege of code, such that
an adversary can no longer inspect the code after ﬁne-
grained code randomizations have been applied.
We revisit these “inherent” requirements for mounting
JIT-ROP attacks. We show that JIT-ROP attacks can be
mounted without ever reading any code fragments, but
instead by injecting predictable gadgets via a JIT com-
piler by carefully triggering useful displacement values
in control ﬂow instructions. We show that defenses de-
ployed in all major browsers (Chrome, MS IE, Firefox)
do not protect against such gadgets, nor do the current
XnR implementations protect against code injection at-
tacks. To extend XnR’s guarantees against JIT-compiled
gadgets, we propose a defense that replaces potentially
dangerous direct control ﬂow instructions with indirect
ones at an overall performance overhead of less than 2%
and a code-size overhead of 26% on average.
1
Introduction
Code-reuse attacks, such as Return-Oriented Program-
ming (ROP), enable an attacker to bypass Execute-XOR-
Write (XˆW) policies by suitably chaining existing small
code fragments (so-called gadgets). One of the most
prominently explored concepts to defend against such at-
tacks involves randomizing programs so that an attacker
can no longer reliably identify and chain such gadgets,
whether by code transformations [19, 6, 14], data region
hardening [5, 23], or whole address space randomiza-
tion [4]. However, a novel class of attacks, dubbed JIT-
ROP, allows for code reuse even for such diversiﬁed pro-
grams [31]. JIT-ROP leverages a memory disclosure vul-
nerability in combination with a scripting environment—
which is part of all modern browsers—to read existing
code parts, notably after they were randomized. Once
the code has been read (e.g., using a memory disclosure
vulnerability), an attacker can dynamically discover and
chain gadgets for conventional code-reuse attacks.
Mounting a successful JIT-ROP attack seemingly re-
quires the ability to (i) read code fragments and iden-
tify suitable gadgets (otherwise the adversary would not
know what to combine) and to (ii) execute them (so that
the overall attack can be mounted). The recently pro-
posed Execute-no-Read (XnR) schemes [2, 11, 12] con-
sequently strive to eliminate JIT-ROP attacks by ensur-
ing that executable code is non-readable, i.e., marking
code sections as executable-only while explicitly remov-
ing the read privilege. Hence an adversary can no longer
inspect the code after ﬁne-grained code randomization
techniques have been applied and should thus fail to
identify suitable gadgets. As a more pointed statement:
what cannot be read, cannot be leveraged.
Our contributions:
In this paper, we carefully re-
visit these seemingly inherent requirements for mounting
a successful JIT-ROP attack. As our overall result, we
show that JIT-ROP attacks can often be mounted without
ever reading any code fragments, but by instead inject-
ing arbitrary, predictable gadgets via a JIT compiler and
by subsequently assembling them to suitable ROP chains
without reading any code pages.
As a starting point, we show how to obtain expressive
unaligned gadgets by encoding specially-crafted con-
stants in instructions. Prior research has already shown
that explicit constants in JavaScript statements, e.g., in
assignment statements like x = 0x12345678, can be used
to generate unaligned gadgets [1]. Browsers started to
ﬁx such vulnerabilities, e.g., by blinding explicit con-
USENIX Association  
25th USENIX Security Symposium  139
stants (i.e., XOR-ing them with a secret key), and/or
by applying ﬁne-grained code randomization techniques
(cf. Athanasakis et al. [1]). We show that implicit con-
stants in JIT-compiled code can be exploited in a sim-
ilar manner, and are hence far more dangerous in the
JIT-ROP setting than commonly believed. To this end,
we generate JavaScript code that emits speciﬁc offsets in
relative jumps/calls in the JIT-compiled code. We show
that both relative jumps and relative calls can be used
to encode attacker-controllable values in an instruction’s
displacement ﬁeld. These values can later be used as un-
aligned gadgets, i.e., an attacker that controls the jump
or call destination (or source) can predict the displace-
ment and thereby generate deterministic gadgets on-the-
ﬂy, without the need to ever read them before use. We
demonstrate the impact of our attack by injecting almost
arbitrary two- or three-byte-wide gadgets, which enable
an attacker to perform arbitrary system calls, or, more
generally, obtain a Turing-complete instruction set. We
show that all major browsers (Chrome, Internet Explorer,
Firefox) are susceptible to this attack, even if code ran-
domization schemes such as NOP insertion (like in Inter-
net Explorer) are in place.
The ability to create controllable JIT-compiled code
enables an adversary to conveniently assemble ROP
chains without the requirement to ever read code. This
challenges current XnR instantiations in that code does
not have to be readable to be useful for ROP chains,
highlighting the need to complement XnR with effective
code pointer hiding and/or code randomization schemes
also in JIT-compiled code. Unless XnR implementa-
tions additionally protect JIT-compiled code, they do
not prevent attackers from reusing predictable attacker-
generated gadgets, and hence from mounting JIT-ROP
attacks. We stress that a complete XnR implementa-
tion that offered holistic code coverage (i.e., hiding code-
pointers also in JIT-compiled code) may also be effective
against our attack. However, maintaining XnR’s guaran-
tees also for JIT-compiled and attacker-controlled code
imposes additional challenges in practical settings: First,
ﬁne-grained code randomization schemes that are imple-
mented in XnR do not add security against implicit con-
stants, and they hence make gadget emissions, proposed
in this paper, possible. In particular, the widely deployed
concepts of register renaming and instruction reordering
do not affect our proposed unaligned gadgets. More-
over, ﬁne-grained code randomization techniques com-
monly deployed in browsers (as NOP insertion in IE) are
not sufﬁcient either, as the attacker can test the validity
of its gadgets before using them. Second, the lack of
code pointer hiding in JIT-compiled code in current XnR
instantiations constitutes an additional vector of attack,
since adversaries can then still leverage our attack to en-
code constants in relative calls.
We ﬁnally explored how to extend XnR’s guarantees
against implicit constants in JIT-compiled code. One op-
tion would be to extend the use of call trampolines in
XnR schemes also to JIT compilers, as suggested by
Crane el al. [11, 12]. However, this will replace exist-
ing direct calls with direct jumps to trampolines, which
also encode implicit constants. Furthermore, trampolines
will introduce new relative offsets in their direct call in-
structions. As the locations of trampolines are not hid-
den (e.g., they can be revealed by reading the return ad-
dress on stack), in the presence of an unprotected code
pointer, the attacker will be able to predict encoded con-
stants by leaking either the caller or the callee address.
As an orthogonal alternative, in this paper we propose
to (i) replace relative addressing with indirect calls and
(ii) blind (i.e., reliably obfuscate) all explicit constants
used to prepare the indirect calls. We implement our de-
fense in V8, the JavaScript engine of Chrome, and show
that our proposal imposes less than 2% performance and
26% code size overhead, while effectively preventing the
attacks described in this paper.
The summarized contributions of our paper are:
• We present a novel class of attacks that encode ROP
gadgets in implicit constants of JIT-compiled code.
We thereby show that reading code fragments is
not necessarily a prerequisite for assembling useful
gadgets in order to mount a JIT-ROP attack.
• We demonstrate that all
three major browsers
(Chrome, Internet Explorer, Firefox) are suscepti-
ble to our proposed attack.
• We discuss potential shortcomings when using XnR
to protect JIT-compiled code. We show that the un-
derlying assumptions that XnR schemes build upon
(such as code randomization) have to be carefully
evaluated in the presence of JIT-compiled code.
• We implement a defense in V8 that replaces rela-
tive calls/jumps with indirect control ﬂow instruc-
tions. This effectively prevents the attack proposed
in this paper by removing dangerous implicit con-
stants, exhibiting a performance overhead of 2%
and a code size overhead of 26%.
The remainder of this paper is structured as follows.
Section 2 provides background information on code-
reuse attacks. Section 3 describes our threat model. Sec-
tion 4 introduces the fundamentals of our attack and
demonstrates its efﬁcacy against three major browsers.
Section 5 introduces an efﬁcient defense against our at-
tack. Section 6 discusses the implications of our work.
Section 7 describes related work and Section 8 concludes
the paper with a summary of our ﬁndings.
140  25th USENIX Security Symposium 
USENIX Association
2
2 Background
We will use this section to provide background informa-
tion on code-reuse attacks. We start by explaining ROP,
and then provide insights on JIT-ROP, which collects
code on-the-ﬂy and thus evades existing randomization
schemes like ASLR. Finally, we describe Execute-no-
Read (XnR), a new defensive scheme that aims to protect
against code-reuse attacks (including JIT-ROP).
2.1 Return Oriented Programming (ROP)
ROP has emerged since the wide deployment of Data Ex-
ecution Prevention (DEP), which is a defense technique
against regular stack overﬂow vulnerabilities. DEP, mak-
ing the writable regions of the memory non-executable,
forbids the attacker to execute the shellcode directly on
the stack. As a response, attackers switched to code-
reuse attacks, in which they execute existing code instead
of injecting new code. ROP, proposed by Shacham [29],
is a generalized version of the ret-to-libc attack [22],
which redirects the control ﬂow of the program to exist-
ing code, such as the program’s code or imported func-
tions (e.g., in libc). In ROP, an attacker uses short in-
struction sequences (called gadgets) ending with a con-
trol ﬂow instruction (e.g., ret). Return instructions are
used to chain multiple gadgets together by providing
their addresses as the return values on the stack. Check-
oway et al. [8] showed that it is possible to launch ROP
attacks without using return instructions, i.e., via lever-
aging other control ﬂow changing instructions such as
indirect jumps or calls.
Code-reuse remains a popular attack technique and
has triggered a variety of defensive schemes. Most
prominent, and deployed in most operating systems, is
Address Space Layout Randomization (ASLR). ASLR
randomizes the base addresses of memory segments and
prevents an attacker from predicting the addresses of
gadgets. Although ASLR is effective for pre-computed
gadget chains, ASLR has known shortcomings in that
it only randomizes base addresses and is too coarse-
grained. An attacker can thus reveal the memory lay-
out of an entire ASLR-protected segment with a single
leaked pointer. To address this problem, ﬁne-grained
ASLR randomization schemes have been proposed that
add randomness inside the segment [16, 20, 25] (we re-
fer the reader to Larsen’s survey [21]).
JIT-ROP
2.2
To counter ASLR, Snow et al. proposed a new attack
technique, called just-in-time code reuse (JIT-ROP) [31].
By leveraging the fact that an adversary is able to read
randomized code sections, JIT-ROP undermines ﬁne-
grained ASLR schemes. JIT-ROP is based on the follow-
ing assumptions: (i) a memory disclosure vulnerability,
allowing the attacker to read data at arbitrary locations,
(ii) at least one control ﬂow vulnerability, (iii) a scripting
environment running code provided by the attacker. The
basic idea of the JIT-ROP is the following:
(J1) Repeatedly using the memory disclosure vulnera-
bility, the attacker follows the code pointers in the
memory to read as many code pages as possible.
(J2) From the read code pages, JIT-ROP extracts gad-
gets (e.g, Load, Store, Jump, Move) and col-
lects useful API function calls (e.g., LoadLibrary,
GetProcAddress).
(J3) Given the gadgets and API functions, the JIT-ROP
framework takes an exploit, written in a high-level
language, as an input and compiles it to a chain of
gadgets and function calls that perform a code-reuse
attack.
(J4) Finally, the control ﬂow vulnerability is used to
jump to the beginning of the compiled gadget chain.
JIT-ROP demonstrates that an adversary may be able
to run code-reuse attacks even in the case of ﬁne-grained
ASLR or code randomization, as she can read the code
and function pointers after they have been randomized.
2.3 Execute-no-Read (XnR)
In an attempt to close the security weakness that JIT-ROP
has demonstrated, researchers suggest marking code sec-
tions as non-readable. Such Execute-no-Read (XnR)
schemes were proposed by Backes et al. [2], and were
strengthened by Crane et al. [11, 12] shortly thereafter.
The common goal is to prevent step (J1) of the JIT-ROP
attack, as the attacker can no longer dynamically search
for gadgets in non-readable code sections.
XnR: Lacking support for XnR pages in the current
hardware, Backes et al. implemented XnR in software by
marking code pages as non-present and checking the
permissions inside a custom pagefault handler [2]. To in-
crease the efﬁciency of this scheme, the authors propose
to leave a window of N pages present. This exposes a
few readable pages to the attacker, but prevents her from
reading arbitrary code pages. As the authors suggest, at
low window size (N = 3), the likelihood that an attacker
can leverage code-reuse attacks using only the present
code pages is negligible.
Readactor(++): Crane et al. suggested Readactor [11]
and Readactor++ [12], both of which leverage hardware
support to realize XnR. The authors suggest using Ex-
tended Page Tables (EPT), which were introduced re-
cently to the hardware to assist virtualized environments.
While regular page tables translate virtual addresses into
physical ones, EPTs add another layer of indirection
USENIX Association  
25th USENIX Security Symposium  141
3
and translate physical addresses of a VM to physical
addresses of the host. EPTs allow marking pages as
(non-)readable, (non-)writable, or (non-)executable, al-
lowing enforcement of XnR in hardware.
In addition,
Readactor(++) hides code pointers by creating trampo-
lines, and replacing all code pointers in readable mem-
ory with trampoline pointers. The underlying assump-