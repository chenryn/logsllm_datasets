块：
      fileNamesForPath.LinkTo(lines);
      lines.LinkTo(words);
      words.LinkTo(display);
      return fileNamesForPath;
    }
现在，Main（）方法只需要启动管道。调用Post（）方法传递目录时，管道就会启
动，并最终将单词从C#源代码写入控制台。这里可以发出多个启动管道的请求，传递多
个目录，并行执行这些任务：
    static void Main()
    {
      var target = SetupPipeline();
      target.Post(".");
      ReadLine();
    }
通过对TPL Data Flow库的简单介绍，可以看到这种技术的主要用法。该库还提供了
其他许多功能，例如以不同方式处理数据的不同块。BroadcastBlock允许向多个目标传递
输入源（例如将数据写入一个文件并显示该文件）, JoinBlock将多个源连接到一个目标，
BatchBlock将输入作为数组进行批处理。使用DataflowBlockOptions选项可以配置块，例如
一个任务中可以处理的最大项数，还可以向其传递取消标记来取消管道。使用链接技术，
可以对消息进行筛选，只传递满足指定条件的消息。
21.6 小结
本章介绍了如何通过System.Threading.Tasks名称空间编写多任务应用程序。在应用程
序中使用多线程要仔细规划。太多的线程会导致资源问题，线程不足又会使应用程序执行
缓慢，执行效果也不好。使用任务可以获得线程的抽象。这个抽象有助于避免创建过多的
线程，因为线程是在池中重用的。
我们探讨了创建多个任务的各种方法，如Parallel类。通过使用Parallel.Invoke、
Parallel.ForEach和Parallel.For，可以实现任务和数据的并行性。还介绍了如何使用Task类
来获得对并行编程的全面控制。任务可以在主调线程中异步运行，使用线程池中的线程，
以及创建独立的新线程。任务还提供了一个层次结构模型，允许创建子任务，并且提供了
一种取消完整层次结构的方法。
取消架构提供了一种标准机制，不同的类可以以相同的方法使用它来提前取消某个任
务。
第22章介绍使用任务的一个重要概念：同步。
第22章
任务同步
本章要点
● 线程问题
● lock关键字
● 用监控器同步
● 互斥
● Semaphore和SemaphoreSlim
● ManualResetEvent、AutoResetEvent和CountdownEvent
● 障碍
● 读写锁定
● 计时器
本章源代码下载地址（wrox.com）：
打开网页www.wrox.com/go/procsharp，单击Download Code选项卡即可下载本章源代
码。本章代码分为以下几个主要的示例文件：
● ThreadingIssues
● SynchronizationSamples
● SemaphoreSample
● EventSample
● EventSampleWithCountdownEvent
● BarrierSample
● ReaderWriterLockSample
● WinAppTimer
22.1 概述
第21章解释了如何使用Task和Parallel类创建多线程应用程序。本章介绍如何在多个进
程、任务和线程之间同步。
要避免同步问题，最好不要在线程之间共享数据。当然，这并不总是可行的。如果需
要共享数据，就必须使用同步技术，确保一次只有一个线程访问和改变共享状态。如果不
注意同步，就会出现争用条件和死锁。一个主要问题是错误会不时地发生。如果CPU核心
比较多，错误数量就会增加。这些错误通常很难找到。所以最好从一开始就注意同步。
使用多个任务是很容易的，只要它们不访问相同的变量。在某种程度上可以避免这种
情况，但有时，一些数据需要共享。共享数据时，需要应用同步技术。线程访问相同的数
据，而没有进行同步，立即出现问题是比较幸运的。但很少会出现这种情况。本章讨论了
争用条件和死锁，以及如何应用同步机制来避免它们。
.NET 
Framework提供了同步的几个选项。同步对象可以用在一个进程中或跨进程
中。可以使用它们来同步一个任务或多个任务，来访问一个资源或许多资源。同步对象也
可以用来通知完成的任务。本章介绍所有这些同步对象。
首先看看不同步导致的问题。
  注意： 使用本章介绍的同步类型同步定制的集合类前，应该先阅读第12章，
学习线程安全的集合：并发集合。
22.2 线程问题
用多个线程编程并不容易。在启动访问相同数据的多个线程时，会间歇性地遇到难以
发现的问题。如果使用任务、并行LINQ或Parallel类，也会遇到这些问题。为了避免这些
问题，必须特别注意同步问题和多个线程可能发生的其他问题。下面探讨与线程相关的问
题：争用条件和死锁。
ThreadingIssues示例的代码使用了如下依赖项和名称空间：
依赖项：
    NETStandard.Library 1.0.0
    System.Diagnostics.TraceSource
名称空间：
    System.Diagnostics
    System.Threading
    System.Threading.Tasks
    static System.Console
可以使用命令行参数启动ThreadingIssues示例应用程序，来模拟争用条件或死锁。
22.2.1 争用条件
如果两个或多个线程访问相同的对象，并且对共享状态的访问没有同步，就会出现争
用条件。为了说明争用条件，下面的例子定义一个StateObject类，它包含一个int字段和一
个ChangeState（）方法。在ChangeState（）方法的实现代码中，验证状态变量是否包含
5。如果它包含，就递增其值。下一条语句是Trace.Assert，它立刻验证state现在是包含6。
在给包含5的变量递增了1后，可能认为该变量的值就是6。但事实不一定是这样。例
如，如果一个线程刚刚执行完if （_state == 5）语句，它就被其他线程抢占，调度器运行
另一个线程。第二个线程现在进入if体，因为state的值仍是5，所以将它递增到6。第一个
线程现在再次被调度，在下一条语句中，state递增到7。这时就发生了争用条件，并显示
断言消息（代码文件ThreadingIssues/SampleTask.cs）。
    public class StateObject
    {
      private int _state = 5;
      public void ChangeState(int loop)
      {
        if (_state == 5)
        {
        _state++;
        Trace.Assert(_state == 6,
          $"Race condition occurred after {loop} loops");
        }
        _state = 5;
      }
    }
下面通过给任务定义一个方法来验证这一点。SampleTask类的RaceCondition（）方法
将一个StateObject类作为其参数。在一个无限while循环中，调用ChangeState（）方法。变
量i仅用于显示断言消息中的循环次数。
    public class SampleTask
    {
      public void RaceCondition(object o)
      {
        Trace.Assert(o is StateObject, "o must be of type StateObject");
        StateObject state = o as StateObject;
        int i = 0;
        while (true)
        {
        state.ChangeState(i++);
        }
      }
    }
在程序的Main（）方法中，新建了一个StateObject对象，它由所有任务共享。通过使
用传递给Task的Run方法的lambda表达式调用RaceCondition方法来创建Task对象。然后，
主线程等待用户输入。但是，因为可能出现争用，所以程序很有可能在读取用户输入前就
挂起：
    public void RaceConditions()
    {
      var state = new StateObject();
      for (int i = 0; i  new SampleTask().RaceCondition(state));
      }
    }
启动程序，就会出现争用条件。多久以后出现第一个争用条件要取决于系统以及将程
序构建为发布版本还是调试版本。如果构建为发布版本，该问题的出现次数就会比较多，
因为代码被优化了。如果系统中有多个CPU或使用双核/四核CPU，其中多个线程可以同
时运行，则该问题也会比单核CPU的出现次数多。在单核CPU中，因为线程调度是抢占式
的，也会出现该问题，只是没有那么频繁。
图22-1显示在1121个循环后出现争用条件的程序断言。多次启动应用程序，总是会得
到不同的结果。
图22-1
要避免该问题，可以锁定共享的对象。这可以在线程中完成：用下面的lock语句锁定
在线程中共享的state变量。只有一个线程能在锁定块中处理共享的state对象。由于这个对
象在所有的线程之间共享，因此，如果一个线程锁定了state，另一个线程就必须等待该锁
定的解除。一旦接受锁定，线程就拥有该锁定，直到该锁定块的末尾才解除锁定。如果改
变state变量引用的对象的每个线程都使用一个锁定，就不会出现争用条件。
    public class SampleTask
    {
      public void RaceCondition(object o)
      {
        Trace.Assert(o is StateObject, "o must be of type StateObject");
        StateObject state = o as StateObject;
        int i = 0;
        while (true)
        {
        lock (state) // no race condition with this lock
        {
          state.ChangeState(i++);
        }
        }
      }
    }
  注意： 在下载的示例代码中，需要取消锁定语句的注释，才能解决争用条件
的问题。
在使用共享对象时，除了进行锁定之外，还可以将共享对象设置为线程安全的对象。
在下面的代码中，ChangeState（）方法包含一条lock语句。由于不能锁定state变量本身
（只有引用类型才能用于锁定），因此定义一个object类型的变量sync，将它用于lock语
句。如果每次state的值更改时，都使用同一个同步对象来锁定，就不会出现争用条件。
    public class StateObject
    {
      private int _state = 5;
      private _object sync = new object();
      public void ChangeState(int loop)
      {
        lock (_sync)
        {
        if (_state == 5)
        {
          _state++;
          Trace.Assert(_state == 6,
            $"Race condition occurred after {loop} loops");
        }
        _state = 5;
        }
      }
    }
22.2.2 死锁
过多的锁定也会有麻烦。在死锁中，至少有两个线程被挂起，并等待对方解除锁定。
由于两个线程都在等待对方，就出现了死锁，线程将无限等待下去。
为了说明死锁，下面实例化StateObject类型的两个对象，并把它们传递给SampleTask
类的构造函数。创建两个任务，其中一个任务运行Deadlock1（）方法，另一个任务运行
Deadlock2（）方法（代码文件ThreadingIssues/Program.cs）：
    var state1 = new StateObject();
    var state2 = new StateObject();
    new Task(new SampleTask(state1, state2).Deadlock1).Start();
    new Task(new SampleTask(state1, state2).Deadlock2).Start();
Deadlock1（）和Deadlock2（）方法现在改变两个对象s1和s2的状态，所以生成了两
个锁。Deadlock1方法先锁定s1，接着锁定s2。Deadlock2（）方法先锁定s2，再锁定s1。
现在，有可能Deadlock1（）方法中s1的锁定会被解除。接着，出现一次线程切换，
Deadlock2（）方法开始运行，并锁定s2。第二个线程现在等待s1锁定的解除。因为它需
要等待，所以线程调度器再次调度第一个线程，但第一个线程在等待s2锁定的解除。这两
个线程现在都在等待，只要锁定块没有结束，就不会解除锁定。这是一个典型的死锁（代
码文件ThreadingIssues/SampleTask.cs）。
    public class SampleTask
    {
      public SampleTask(StateObject s1, StateObject s2)
      {
        _s1 = s1;
        _s2 = s2;
      }
      private StateObject _s1;
      private StateObject _s2;
      public void Deadlock1()
      {
        int i = 0;
        while (true)
        {
        lock (_s1)
        {
          lock (_s2)
          {
            _s1.ChangeState(i);
            _s2.ChangeState(i++);
            WriteLine($"still running, {i}");
          }
        }
        }
      }
      public void Deadlock2()
      {
        int i = 0;
        while (true)
        {
        lock (_s2)
        {
          lock (_s1)
          {
            _s1.ChangeState(i);
            _s2.ChangeState(i++);
            WriteLine($"still running, {i}");
          }
        }
        }
      }
    }
结果是，程序运行了许多次循环，不久就没有响应了。“仍在运行”的消息仅写入控制
台中几次。同样，死锁问题的发生频率也取决于系统配置，每次运行的结果都不同。
死锁问题并不总是像这样那么明显。一个线程锁定了s1，接着锁定s2；另一个线程锁
定了s2，接着锁定s1。在本例中只需要改变锁定顺序，这两个线程就会以相同的顺序进行
锁定。但是，在较大的应用程序中，锁定可能隐藏在方法的深处。为了避免这个问题，可
以在应用程序的体系架构中，从一开始就设计好锁定顺序，也可以为锁定定义超时时间。
如何定义超时时间详见下一节的内容。
22.3 lock语句和线程安全
C#为多个线程的同步提供了自己的关键字：lock语句。lock语句是设置锁定和解除锁
定的一种简单方式。在添加lock语句之前，先进入另一个争用条件。SharedState类说明了
如何使用线程之间的共享状态，并共享一个整数值（代码文件
SynchronizationSamples/SharedState.cs）。
    public class SharedState
    {
      public int State { get; set; }
    }
下述所有同步示例的代码（SingletonWPF除外）都使用如下依赖项和名称空间：
依赖项：
    NETStandard.Library 1.0.0
    System.Threading.Tasks.Parallel
    System.Threading.Thread
名称空间：
    System
    System.Collections.Generic
    System.Linq
    System.Text
    System.Threading
    System.Threading.Tasks
    static System.Console
Job类包含DoTheJob（）方法，该方法是新任务的入口点。通过其实现代码，将
SharedState对象的State递增50 
000次。sharedState变量在这个类的构造函数中初始化（代
码文件Synchronization-Samples/Job.cs）：