### 2.3.65 INSERT
**Name**
INSERT -- Insert new rows into a table

**Synopsis**
```sql
INSERT INTO table [ (column [, ...]) ]
    { VALUES (expression [, ...]) | query }
    [ RETURNING [ BULK COLLECT ] INTO { record | variable [, ...] | collection [, ...] } ]
```

**Description**
The `INSERT` statement allows you to insert new rows into a table. You can insert a single row at a time or multiple rows as the result of a query.

- **Columns in the Target List**: The columns in the target list can be listed in any order. Any column not present in the target list will be inserted using its declared default value or `NULL` if no default is specified.
- **Type Conversion**: If the expression for each column is not of the correct data type, automatic type conversion will be attempted.
- **RETURNING INTO Clause**: The `RETURNING INTO { record | variable [, ...] }` clause can only be specified when the `INSERT` command is used within an SPL program and only when the `VALUES` clause is used.
- **RETURNING BULK COLLECT INTO Clause**: The `RETURNING BULK COLLECT INTO collection [, ...]` clause can only be specified if the `INSERT` command is used within an SPL program. If more than one collection is specified, each collection must consist of a single, scalar field. The `return_expression` evaluated for each inserted row becomes an element in the collection, starting with the first element. Any existing rows in the collection are deleted. If the result set is empty, the collection will be empty.

**Privileges**
You must have `INSERT` privilege on the table to insert into it. If you use the `query` clause to insert rows from a query, you also need `SELECT` privilege on any table used in the query.

**Parameters**
- **table**: The name (optionally schema-qualified) of an existing table.
- **dblink**: Database link name identifying a remote database. See the `CREATE DATABASE LINK` command for information on database links.
- **column**: The name of a column in the table.
- **expression**: An expression or value to assign to the column.
- **DEFAULT**: This column will be filled with its default value.
- **query**: A query (SELECT statement) that supplies the rows to be inserted. Refer to the `SELECT` command for a description of the syntax.
- **return_expression**: An expression that may include one or more columns from the table. If a column name from the table is specified in the `return_expression`, the value substituted for the column when `return_expression` is evaluated is determined as follows:
  - If the column specified in `return_expression` is assigned a value in the `INSERT` command, then the assigned value is used in the evaluation of `return_expression`.
  - If the column specified in `return_expression` is not assigned a value in the `INSERT` command and there is no default value for the column in the table's column definition, then `NULL` is used in the evaluation of `return_expression`.
  - If the column specified in `return_expression` is not assigned a value in the `INSERT` command and there is a default value for the column in the table's column definition, then the default value is used in the evaluation of `return_expression`.
- **record**: A record whose fields the evaluated `return_expression` is to be assigned. The first `return_expression` is assigned to the first field in the record, the second `return_expression` is assigned to the second field in the record, and so on. The number of fields in the record must exactly match the number of expressions, and the fields must be type-compatible with their assigned expressions.
- **variable**: A variable to which the evaluated `return_expression` is to be assigned. If more than one `return_expression` and variable are specified, the first `return_expression` is assigned to the first variable, the second `return_expression` is assigned to the second variable, and so on. The number of variables specified following the `INTO` keyword must exactly match the number of expressions following the `RETURNING` keyword, and the variables must be type-compatible with their assigned expressions.
- **collection**: A collection in which an element is created from the evaluated `return_expression`. There can be either a single collection which may be a collection of a single field or a collection of a record type, or there may be more than one collection, in which case each collection must consist of a single field. The number of return expressions must match in number and order the number of fields in all specified collections. Each corresponding `return_expression` and collection field must be type-compatible.

**Examples**
1. Insert a single row into the `emp` table:
   ```sql
   INSERT INTO emp VALUES (8021, 'JOHN', 'SALESMAN', 7698, '22-FEB-07', 1250, 500, 30);
   ```

2. In this example, the `comm` column is omitted and therefore it will have the default value of `NULL`:
   ```sql
   INSERT INTO emp (empno, ename, job, mgr, hiredate, sal, deptno)
   VALUES (8022, 'PETERS', 'CLERK', 7698, '03-DEC-06', 950, 30);
   ```

3. This example uses the `DEFAULT` clause for the `hiredate` and `comm` columns rather than specifying a value:
   ```sql
   INSERT INTO emp VALUES (8023, 'FORD', 'ANALYST', 7566, NULL, 3000, NULL, 20);
   ```

4. This example creates a table for the department names and then inserts into the table by selecting from the `dname` column of the `dept` table:
   ```sql
   CREATE TABLE deptnames (
       deptname VARCHAR2(14)
   );
   INSERT INTO deptnames SELECT dname FROM dept;
   ```

---

### 2.3.66 LOCK
**Name**
LOCK -- Lock a table

**Synopsis**
```sql
LOCK TABLE name [, ...] IN lockmode MODE [ NOWAIT ]
```
where `lockmode` is one of:
- `ROW SHARE`
- `ROW EXCLUSIVE`
- `SHARE`
- `SHARE ROW EXCLUSIVE`
- `EXCLUSIVE`

**Description**
The `LOCK TABLE` command obtains a table-level lock, waiting if necessary for any conflicting locks to be released. If `NOWAIT` is specified, the `LOCK TABLE` command does not wait to acquire the desired lock; if it cannot be acquired immediately, the command is aborted and an error is emitted. Once obtained, the lock is held for the remainder of the current transaction. (There is no `UNLOCK TABLE` command; locks are always released at the end of the transaction.)

When acquiring locks automatically for commands that reference tables, Advanced Server always uses the least restrictive lock mode possible. The `LOCK TABLE` command provides for cases when you might need more restrictive locking. For example, suppose an application runs a transaction at the isolation level `READ COMMITTED` and needs to ensure that data in a table remains stable for the duration of the transaction. To achieve this, you could obtain a `SHARE` lock mode over the table before querying. This will prevent concurrent data changes and ensure subsequent reads of the table see a stable view of committed data because the `SHARE` lock mode conflicts with the `ROW EXCLUSIVE` lock acquired by writers, and your `LOCK TABLE name IN SHARE MODE` statement will wait until any concurrent holders of `ROW EXCLUSIVE` mode locks commit or roll back. Thus, once you obtain the lock, there are no uncommitted writes outstanding, and none can begin until you release the lock.

To achieve a similar effect when running a transaction at the isolation level `SERIALIZABLE`, you have to execute the `LOCK TABLE` statement before executing any data modification statement. A serializable transaction's view of data will be frozen when its first data modification statement begins. A later `LOCK TABLE` will still prevent concurrent writes but won't ensure that what the transaction reads corresponds to the latest committed values.

If a transaction of this sort is going to change the data in the table, then it should use `SHARE ROW EXCLUSIVE` lock mode instead of `SHARE` mode. This ensures that only one transaction of this type runs at a time. Without this, a deadlock is possible: two transactions might both acquire `SHARE` mode, and then be unable to also acquire `ROW EXCLUSIVE` mode to actually perform their updates. (Note that a transaction's own locks never conflict, so a transaction can acquire `ROW EXCLUSIVE` mode when it holds `SHARE` mode - but not if anyone else holds `SHARE` mode.) To avoid deadlocks, make sure all transactions acquire locks on the same objects in the same order, and if multiple lock modes are involved for a single object, then transactions should always acquire the most restrictive mode first.

**Parameters**
- **name**: The name (optionally schema-qualified) of an existing table to lock. The command `LOCK TABLE a, b;` is equivalent to `LOCK TABLE a; LOCK TABLE b;`. The tables are locked one-by-one in the order specified in the `LOCK TABLE` command.
- **lockmode**: The lock mode specifies which locks this lock conflicts with. If no lock mode is specified, then the server uses the most restrictive mode, `ACCESS EXCLUSIVE`. (Note: `ACCESS EXCLUSIVE` is not compatible with Oracle databases. In Advanced Server, this configuration mode ensures that no other transaction can access the locked table in any manner.)
- **NOWAIT**: Specifies that `LOCK TABLE` should not wait for any conflicting locks to be released. If the specified lock cannot be immediately acquired without waiting, the transaction is aborted.

**Notes**
- All forms of `LOCK` require `UPDATE` and/or `DELETE` privileges.
- `LOCK TABLE` is useful only inside a transaction block since the lock is dropped as soon as the transaction ends. A `LOCK TABLE` command appearing outside any transaction block forms a self-contained transaction, so the lock will be dropped as soon as it is obtained.
- `LOCK TABLE` only deals with table-level locks, and so the mode names involving `ROW` are all misnomers. These mode names should generally be read as indicating the intention of the user to acquire row-level locks within the locked table. Also, `ROW EXCLUSIVE` mode is a sharable table lock. Keep in mind that all the lock modes have identical semantics so far as `LOCK TABLE` is concerned, differing only in the rules about which modes conflict with which.

---

### 2.3.67 REVOKE
**Name**
REVOKE -- Remove access privileges

**Synopsis**
```sql
REVOKE { { SELECT | INSERT | UPDATE | DELETE | REFERENCES } [,...] | ALL [ PRIVILEGES ] }
ON tablename
FROM { username | groupname | PUBLIC } [, ...]
[ CASCADE | RESTRICT ]

REVOKE { SELECT | ALL [ PRIVILEGES ] }
ON sequencename
FROM { username | groupname | PUBLIC } [, ...]
[ CASCADE | RESTRICT ]

REVOKE { EXECUTE | ALL [ PRIVILEGES ] }
ON FUNCTION progname
( [ [ argmode ] [ argname ] argtype ] [, ...] )
FROM { username | groupname | PUBLIC } [, ...]
[ CASCADE | RESTRICT ]

REVOKE { EXECUTE | ALL [ PRIVILEGES ] }
ON PROCEDURE progname
[ ( [ [ argmode ] [ argname ] argtype ] [, ...] ) ]
FROM { username | groupname | PUBLIC } [, ...]
[ CASCADE | RESTRICT ]

REVOKE { EXECUTE | ALL [ PRIVILEGES ] }
ON PACKAGE packagename
FROM { username | groupname | PUBLIC } [, ...]
[ CASCADE | RESTRICT ]

REVOKE role [, ...] FROM { username | groupname | PUBLIC } [, ...]
[ CASCADE | RESTRICT ]

REVOKE { CONNECT | RESOURCE | DBA } [, ...]
FROM { username | groupname } [, ...]

REVOKE CREATE [ PUBLIC ] DATABASE LINK
FROM { username | groupgroup }

REVOKE DROP PUBLIC DATABASE LINK
FROM { username | groupname }

REVOKE EXEMPT ACCESS POLICY
FROM { username | groupname }
```

**Description**
The `REVOKE` command revokes previously granted privileges from one or more roles. The key word `PUBLIC` refers to the implicitly defined group of all roles. See the description of the `GRANT` command for the meaning of the privilege types.

Note that any particular role will have the sum of privileges granted directly to it, privileges granted to any role it is presently a member of, and privileges granted to `PUBLIC`. Thus, for example, revoking `SELECT` privilege from `PUBLIC` does not necessarily mean that all roles have lost `SELECT` privilege on the object; those who have it granted directly or via another role will still have it.

If the privilege had been granted with the grant option, the grant option for the privilege is revoked as well as the privilege itself. If a user holds a privilege with grant option and has granted it to other users, then the privileges held by those other users are called dependent privileges. If the privilege or the grant option held by the first user is being revoked and dependent privileges exist, those dependent privileges are also revoked if `CASCADE` is specified; otherwise, the revoke action will fail. This recursive revocation only affects privileges that were granted through a chain of users that is traceable to the user that is the subject of this `REVOKE` command. Thus, the affected users may effectively keep the privilege if it was also granted through other users.

**Notes**
- A user can only revoke privileges that were granted directly by that user. If, for example, user A has granted a privilege with grant option to user B, and user B has in turn granted it to user C, then user A cannot revoke the privilege directly from C. Instead, user A could revoke the grant option from user B and use the `CASCADE` option so that the privilege is in turn revoked from user C. For another example, if both A and B have granted the same privilege to C, A can revoke his own grant but not B's grant, so C will still effectively have the privilege.
- When a non-owner of an object attempts to `REVOKE` privileges on the object, the command will fail outright if the user has no privileges whatsoever on the object. As long as some privilege is available, the command will proceed, but it will revoke only those privileges for which the user has grant options. The `REVOKE ALL PRIVILEGES` forms will issue a warning message if no grant options are held, while the other forms will issue a warning if grant options for any of the privileges specifically named in the command are not held. (In principle, these statements apply to the object owner as well, but since the owner is always treated as holding all grant options, the cases can never occur.)
- If a superuser chooses to issue a `GRANT` or `REVOKE` command, the command is performed as though it were issued by the owner of the affected object. Since all privileges ultimately come from the object owner (possibly indirectly via chains of grant options), it is possible for a superuser to revoke all privileges, but this may require use of `CASCADE` as stated above.
- `REVOKE` can also be done by a role that is not the owner of the affected object, but is a member of the role that owns the object, or is a member of a role that holds privileges `WITH GRANT OPTION` on the object. In this case, the command is performed as though it were issued by the containing role that actually owns the object or holds the privileges `WITH GRANT OPTION`. For example, if table `t1` is owned by role `g1`, of which role `u1` is a member, then `u1` can revoke privileges on `t1` that are recorded as being granted by `g1`. This would include grants made by `u1` as well as by other members of role `g1`.
- If the role executing `REVOKE` holds privileges indirectly via more than one role membership path, it is unspecified which containing role will be used to perform the command. In such cases, it is best practice to use `SET ROLE` to become the specific role you want to do the `REVOKE` as. Failure to do so may lead to revoking privileges other than the ones you intended, or not revoking anything at all.
- Please Note: The Advanced Server `ALTER ROLE` command also supports syntax that revokes the system privileges required to create a public or private database link, or exemptions from fine-grained access control policies (DBMS_RLS). The `ALTER ROLE` syntax is functionally equivalent to the respective `REVOKE` command, compatible with Oracle databases.

**Examples**
1. Revoke `INSERT` privilege for the public on table `emp`:
   ```sql
   REVOKE INSERT ON emp FROM PUBLIC;
   ```

2. Revoke all privileges from user `mary` on view `salesemp`:
   ```sql
   REVOKE ALL PRIVILEGES ON salesemp FROM mary;
   ```
   Note that this actually means "revoke all privileges that I granted."

3. Revoke membership in role `admins` from user `joe`:
   ```sql
   REVOKE admins FROM joe;
   ```

4. Revoke `CONNECT` privilege from user `joe`:
   ```sql
   REVOKE CONNECT FROM joe;
   ```

5. Revoke `CREATE DATABASE LINK` privilege from user `joe`:
   ```sql
   REVOKE CREATE DATABASE LINK FROM joe;
   ```

6. Revoke the `EXEMPT ACCESS POLICY` privilege from user `joe`:
   ```sql
   REVOKE EXEMPT ACCESS POLICY FROM joe;
   ```

**See Also**
- `GRANT`
- `SET ROLE`

---

### 2.3.68 ROLLBACK
**Name**
ROLLBACK -- Abort the current transaction

**Synopsis**
```sql
ROLLBACK [ WORK ]
```

**Description**
The `ROLLBACK` command rolls back the current transaction and causes all the updates made by the transaction to be discarded.

**Parameters**
- **WORK**: Optional keyword - has no effect.

**Notes**
- Use `COMMIT` to successfully terminate a transaction.
- Issuing `ROLLBACK` when not inside a transaction does no harm.
- Please note: Executing a `ROLLBACK` in a PL/SQL procedure will throw an error if there is an Oracle-style SPL procedure on the runtime stack.

**Examples**
To abort all changes:
```sql
ROLLBACK;
```

**See Also**
- `COMMIT`
- `ROLLBACK TO SAVEPOINT`
- `SAVEPOINT`

---

### 2.3.69 ROLLBACK TO SAVEPOINT
**Name**
ROLLBACK TO SAVEPOINT -- Roll back to a savepoint

**Synopsis**
```sql
ROLLBACK [ WORK ] TO [ SAVEPOINT ] savepoint_name
```

**Description**
The `ROLLBACK TO SAVEPOINT` command rolls back all commands that were executed after the savepoint was established. The savepoint remains valid and can be rolled back to again later, if needed. `ROLLBACK TO SAVEPOINT` implicitly destroys all savepoints that were established after the named savepoint.

**Parameters**
- **savepoint_name**: The savepoint to which to roll back.

**Notes**
- Specifying a savepoint name that has not been established is an error.
- `ROLLBACK TO SAVEPOINT` is not supported within SPL programs.

**Examples**
To undo the effects of the commands executed after the savepoint `depts` was established:
```sql
\set AUTOCOMMIT off
INSERT INTO dept VALUES (50, 'HR', 'NEW YORK');
SAVEPOINT depts;
INSERT INTO emp (empno, ename, deptno) VALUES (9001, 'JONES', 50);
INSERT INTO emp (empno, ename, deptno) VALUES (9002, 'ALICE', 50);
ROLLBACK TO SAVEPOINT depts;
```

**See Also**
- `COMMIT`
- `ROLLBACK`
- `SAVEPOINT`

---

### 2.3.70 SAVEPOINT
**Name**
SAVEPOINT -- Define a new savepoint within the current transaction

**Synopsis**
```sql
SAVEPOINT savepoint_name
```

**Description**
The `SAVEPOINT` command establishes a new savepoint within the current transaction. A savepoint is a special mark inside a transaction that allows all commands that are executed after it was established to be rolled back, restoring the transaction state to what it was at the time of the savepoint.

**Parameters**
- **savepoint_name**: The name to be given to the savepoint.

**Notes**
- Use `ROLLBACK TO SAVEPOINT` to roll back to a savepoint.
- Savepoints can only be established when inside a transaction block. There can be multiple savepoints defined within a transaction.
- When another savepoint is established with the same name as a previous savepoint, the old savepoint is kept, though only the more recent one will be used when rolling back.
- `SAVEPOINT` is not supported within SPL programs.

**Examples**
To establish a savepoint and later undo the effects of all commands executed after it was established:
```sql
\set AUTOCOMMIT off
INSERT INTO dept VALUES (50, 'HR', 'NEW YORK');
SAVEPOINT depts;
INSERT INTO emp (empno, ename, deptno) VALUES (9001, 'JONES', 50);
```

**See Also**
- `COMMIT`
- `ROLLBACK`
- `ROLLBACK TO SAVEPOINT`