有直接调用Cancel（）方法，而是使用了.NET 4.5中的一个新方法CancelAfter（），在500
毫秒后取消标记。
在For（）循环的实现代码内部，Parallel类验证CancellationToken的结果，并取消操
作。一旦取消操作，For（）方法就抛出一个OperationCanceledException类型的异常，这
是本例捕获的异常。使用CancellationToken可以注册取消操作时的信息。为此，需要调用
Register（）方法，并传递一个在取消操作时调用的委托（代码文件
CancellationSamples/Program.cs）。
    public static void CancelParallelFor()
    {
      var cts = new CancellationTokenSource();
      cts.Token.Register(() => WriteLine("＊＊＊ token cancelled"));
      // send a cancel after 500 ms
      cts.CancelAfter(500);
      try
      {
        ParallelLoopResult result =
          Parallel.For(0, 100, new ParallelOptions
          {
          CancellationToken = cts.Token,
          },
          x =>
          {
          WriteLine($"loop {x} started");
          int sum = 0;
          for (int i = 0; i  WriteLine("＊＊＊ task cancelled"));
      // send a cancel after 500 ms
      cts.CancelAfter(500);
      Task t1 = Task.Run(() =>
      {
        WriteLine("in task");
        for (int i = 0; i (s =>
      {
        WriteLine($"user input: {s}");
      });
      bool exit = false;
      while (! exit)
      {
        string input = ReadLine();
        if (string.Compare(input, "exit", ignoreCase: true) == 0)
        {
        exit = true;
        }
        else
        {
        processInput.Post(input);
        }
      }
    }
21.5.2 源和目标数据块
以前示例中分配给ActionBlock的方法执行时，ActionBlock会使用一个任务来并行执
行。通过检查任务和线程标识符，并把它们写入控制台可以验证这一点。每个块都实现了
IDataflowBlock接口，该接口包含了返回一个Task的属性Completion，以及Complete（）和
Fault（）方法。调用Complete（）方法后，块不再接受任何输入，也不再产生任何输出。
调用Fault（）方法则把块放入失败状态。
如前所述，块既可以是源，也可以是目标，还可以同时是源和目标。在示例中，
ActionBlock是一个目标块，所以实现了ITargetBlock接口。ITargetBlock派生自
IDataflowBlock，除了提供IDataBlock接口的成员以外，还定义了OfferMessage（）方法。
OfferMessage（）发送一条由块处理的消息。Post是比OfferMessage更方便的一个方法，
它实现为ITargetBlock接口的扩展方法。示例应用程序中也使用了Post（）方法。
ISourceBlock接口由作为数据源的块实现。除了IDataBlock接口的成员以外，
ISourceBlock还提供了链接到目标块以及处理消息的方法。
BufferBlock同时作为数据源和数据目标，它实现了ISourceBlock和ITargetBlock。在下
一个示例中，就使用这个BufferBlock来收发消息（代码文件
SimpleDataFlowSample/Program.cs）：
    private static BufferBlock s_buffer = new BufferBlock();
Producer（）方法从控制台读取字符串，并通过调用Post（）方法把字符串写到
BufferBlock中：
    public static void Producer()
    {
      bool exit = false;
      while (! exit)
      {
        string input = ReadLine();
        if (string.Compare(input, "exit", ignoreCase: true) == 0)
        {
        exit = true;
        }
        else
        {
        s_buffer.Post(input);
        }
      }
    }
Consumer（）方法在一个循环中调用ReceiveAsync（）方法来接收BufferBlock中的数
据。ReceiveAsync是ISourceBlock接口的一个扩展方法：
    public static async Task ConsumerAsync()
    {
      while (true)
      {
        string data = await s_buffer.ReceiveAsync();
        WriteLine($"user input: {data}");
      }
    }
现在，只需要启动消息的产生者和使用者。在Main（）方法中通过两个独立的任务
完成启动操作：
    static void Main()
    {
      Task t1 = Task.Run(() => Producer());
      Task t2 = Task.Run(async () => await ConsumerAsync());
      Task.WaitAll(t1, t2);
    }
运行应用程序时，产生者从控制台读取数据，使用者接收数据并把它们写入控制台。
21.5.3 连接块
本节将连接多个块，创建一个管道。首先，创建由块使用的3个方法。
GetFileNames（）方法接收一个目录路径作为参数，得到以.cs为扩展名的文件名（代码文
件DataFlowSample/Program.cs）：
    public static IEnumerable GetFileNames(string path)
    {
      foreach (var fileName in Directory.EnumerateFiles(path, "＊.cs"))
      {
        yield return fileName;
      }
    }
LoadLines（）方法以一个文件名列表作为参数，得到文件中的每一行：
    public static IEnumerable LoadLines(IEnumerable fileNames)
    {
      foreach (var fileName in fileNames)
      {
        using (FileStream stream = File.OpenRead(fileName))
        {
        var reader = new StreamReader(stream);
        string line = null;
        while ((line = reader.ReadLine()) ! = null)
        {
          //WriteLine($"LoadLines {line}");
          yield return line;
        }
        }
      }
    }
GetWords（）方法接收一个lines集合作为参数，将其逐行分割，从而得到并返回一个
单词列表：
    public static IEnumerable GetWords(IEnumerable lines)
    {
      foreach (var line in lines)
      {
        string[] words = line.Split(' ', '; ', '(', ')', '{', '}', '.', ', ');
        foreach (var word in words)
        {
        if (! string.IsNullOrEmpty(word))
          yield return word;
        }
      }
    }
为了创建管道，SetupPipeline（）方法创建了3个TransformBlock对象。
TransformBlock是一个源和目标块，通过使用委托来转换源。第一个TransformBlock被声
明为将一个字符串转换为IEnumerable。这种转换是通过GetFileNames（）方法完
成的，GetFileNames（）方法在传递给第一个块的构造函数的lambda表达式中调用。类似
地，接下来的两个TransformBlock对象用于调用LoadLines（）和GetWords（）方法：
    public static ITargetBlock SetupPipeline()
    {
      var fileNamesForPath = new TransformBlock>(
        path =>
        {
        return GetFileNames(path);
        });
      var lines = new TransformBlock, IEnumerable>(
        fileNames =>
        {
        return LoadLines(fileNames);
        });
      var words = new TransformBlock, IEnumerable>(
        lines2 =>
        {
        return GetWords(lines2);
        });
定义的最后一个块是ActionBlock。这个块只是一个用于接收数据的目标块，前面已
经用过：
      var display = new ActionBlock>(
        coll =>
        {
          foreach (var s in coll)
          {
          WriteLine(s);
          }
        });
最后，将这些块彼此连接起来。fileNamesForPath被链接到lines块，其结果被传递给
lines块。lines块链接到words块，words块链接到display块。最后，返回用于启动管道的