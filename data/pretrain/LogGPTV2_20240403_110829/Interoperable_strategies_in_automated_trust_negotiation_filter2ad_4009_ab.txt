CPN
BBB M ember
Landscape Designer’s Policies
Credit Card ← BBB M ember
Reseller License ← true
Credit Card
Reseller License
Order OK
CPN’s Policies
Order OK ← (Credit Card ∨ CP N Account)∧
BBB M ember ← true
Reseller License
Figure 2: An example of access control policies and a safe disclosure sequence which establishes trust between
the server and the client.
f alse, then C must appear in a previously disclosed
policy.
2. A credential or policy can be disclosed at most once.
3. Every disclosure must be safe.
Before the negotiation starts, the client sends the orig-
inal resource request message to the server indicating its
request to access resource R. This request triggers the ne-
gotiation, and the server invokes its local security agent
with the call TrustBuilder handle disclosure message(∅, R).
Then the client and server exchange messages until either
the service R is disclosed by the server or one party sends a
failure message (ﬁgure 3).
In the remainder of this paper, we discuss only strate-
gies that can be called from the TrustBuilder protocol and
satisfy the three conditions above. A formal deﬁnition of a
negotiation strategy is given below.
Definition 5.1. A strategy is a function f : {G, L, R} →
Sm, where R is the resource to which the client originally re-
quested access, G = (m1, . . . , mk) is a sequence of disclosure
messages such that mi (cid:9)= ∅ and R /∈ mi for 1 ≤ i ≤ k, L
is the set of local resources and policies, and Sm is a set of
disclosure messages. Further, every disclosure in a message
in Sm must be of a local resource or policy, as must be all
the disclosures in mk−2i, for 1 ≤ k − 2i < k. The remaining
disclosures in G are of remote resources and policies.
Note that a strategy returns a set of possible disclosure
messages, rather than a single message. Practical negoti-
ation strategies will suggest a single next message, but the
ability to suggest several possible next messages will be very
convenient in our formal analysis of strategy properties, so
we include it both in the formal deﬁnition of a negotiation
strategy and also in the protocol pseudocode in ﬁgure 3.
Definition 5.2. Strategies fA and fB are compatible if
whenever there exists a safe disclosure sequence for a party
PA to obtain access to a resource owned by party PB, the
trust negotiation will succeed when PA uses fA and PB uses
fB. If fA = fB, then we say that fA is self-compatible.
Definition 5.3. A strategy family is a set F of mutually
compatible strategies, i.e., ∀f1 ∈ F , f2 ∈ F , f1 and f2 are
compatible. We say a set F of strategies is closed if given a
is compatible with every strategy in F , then
strategy f(cid:2)
f(cid:2) ∈ F .
, if f(cid:2)
One obvious advantage of strategy families is that a se-
curity agent (SA) can choose strategies based on its needs
without worrying about interoperability, as long as it ne-
gotiates with other SAs that use strategies from the same
family. As another advantage, under certain conditions, an
SA does not need to stick to a ﬁxed strategy during the
entire negotiation process. It can adopt diﬀerent strategies
from the family in diﬀerent phases of the negotiation. For
example, during the early phase, since the trust between two
parties is very limited, an SA may adopt a cautious strategy
for disclosing credentials. When a certain level of trust has
been established, the SA may adopt a less cautious strategy.
Without the closure property, a family may be too small
for practical use. As an extreme example, given any self-
compatible strategy f , {f} is a strategy family. The closure
property guarantees the maximality of a strategy family.
The notions of strategy families and closed sets of strate-
gies are incomparable, in the sense that neither of them
implies the other. For example, if a strategy f ’s output is
{m}, where m is a message containing all the undisclosed
local policies and unlocked credentials, then it is easy to
prove that f is self-compatible. Then {f} is a family, but
not closed. On the other hand, consider the strategy f(cid:2)
whose output is always {∅}. Obviously f(cid:2)
is not compatible
with any strategies. The strategy set {f(cid:2)} is not a family
but is closed.
We end this section with two simple propositions.
Proposition 5.1. Any subset of a strategy family is also
a family.
Proposition 5.2. If a strategy family F is a proper sub-
set of another family, then F is not closed.
6. CHARACTERIZING SAFE DISCLOSURE
SEQUENCES
In this section, we deﬁne the concepts that we use to de-
scribe the progress of a negotiation and to characterize the
behavior of diﬀerent strategies. In the remainder of the pa-
per, we use R to represent the resource to which access was
originally requested.
6.1 Disclosure Trees
Definition 6.1. A disclosure tree for R is a ﬁnite tree
satisfying the following conditions:
149TrustBuilder handle disclosure message (m, R)
Input: m is the last disclosure message received from the remote party.
R is the resource to which the client originally requested access.
TrustBuilder check for termination(m, R). //Stop negotiating, if appropriate.
TrustBuilder next message(m, R).
End of TrustBuilder handle disclosure message.
TrustBuilder next message(m, R)
// First, let the local strategy suggest what the next message should be.
Let G be the disclosure message sequence so far.
Let L be the local resources and policies.
Sm = Local strategy(G, L, R).
// Sm contains the candidate messages the local strategy suggests.
Choose any single message m(cid:2)
from Sm.
Send m(cid:2)
to the remote party.
TrustBuilder check for termination(m(cid:2)
End of TrustBuilder next message.
, R). //Stop negotiating, if appropriate.
TrustBuilder check for termination(m, R)
If m is the empty set ∅ and this is not the beginning of the negotiation,
Then negotiations have failed. Stop negotiating and exit.
If m contains the disclosure of R,
Then negotiations have succeeded. Stop negotiating and exit.
End of TrustBuilder check for termination.
Figure 3: Pseudocode for the TrustBuilder protocol. The negotiation is triggered when the client asks to
access a protected resource owned by the server. After rounds of disclosures, either one party sends a failure
message and ends the negotiation, or the server grants the client access.
1. The root represents R.
From theorems 6.1 and 6.2, we have:
2. Except for the root, each node represents a credential.
When the context is clear, we refer to a node by the
name of the credential it represents.
3. The children of a node C form a minimal solution set
for C.
When all the leaves of a disclosure tree T are unprotected
credentials, we say T is a full disclosure tree. Given a dis-
closure tree T , if there is a credential appearing twice in the
path from a leaf node to the root, then we call T a redundant
disclosure tree.
Figure 4 shows example disclosure trees. Note that T3 is
redundant and T4 is a full disclosure tree.
The following theorems state the relationship between dis-
closure trees and safe disclosure sequences that lead to the
granting of access to resource R. Proofs are included in the
full version of this paper [16].
Theorem 6.1. Given a non-redundant safe disclosure se-
quence G = (C1, . . . , Cn = R), there is a full non-redundant
disclosure tree T such that both of the following hold:
1. The nodes of T are a subset of {C1, . . . , Cn}.
2. For all credential pairs (C(cid:2)
2) such that C(cid:2)
1, C(cid:2)
2 in T , C(cid:2)
2 is disclosed before C(cid:2)
ancestor of C(cid:2)
1 is an
1 in G.
Theorem 6.2. Given a full disclosure tree for R, there
is a non-redundant safe disclosure sequence ending with the
disclosure of R.
Corollary 6.1. Given a safe disclosure sequence G =
(C1, . . . , Cn = R), there is a full non-redundant disclosure
tree T such that:
1. T ’s credential nodes are a subset of {C1, . . . , Cn}.
2. For all credential pairs (C(cid:2)
1, C(cid:2)
ancestor of C(cid:2)
before the ﬁrst disclosure of C(cid:2)
1.
2) such that C(cid:2)
2 in T , the ﬁrst disclosure of C(cid:2)
1 is an
2 in G is
Without loss of generality, from now on, we consider only
non-redundant disclosure sequences.
Since there is a natural mapping between safe disclosure
sequences and disclosure trees, during the negotiation, theo-
retically one could determine whether a potential credential
or policy disclosure is helpful by examining all the disclosure
trees for R. At the beginning of a negotiation, before disclo-
sures begin, the only relevant disclosure tree for the client
contains a single node R. As the negotiation proceeds, other
trees may become relevant. The following deﬁnitions help
us describe the set of relevant trees.
Definition 6.2. Given a disclosure tree T and a set of
credentials Sc, the reduction of T by Sc, reduction(T, Sc),
is the disclosure tree T (cid:2)
which is obtained by removing all
the subtrees rooted at a node representing resource C ∈ Sc.
Given a set St of disclosure trees,
reduction(St, Sc) = {reduction(T, Sc) | T ∈ St}.
If Sc is the set of credential disclosures made so far, then
reducing T by Sc prunes out the part of the negotiation that
150Server Policies
R ← (CB1 ∧ CB2) ∨ CB3 ∨ CB4
CA1 ← CB1
CA2 ← true
CA3 ← CB4
Client Policies
CB1 ← CA1 ∨ (CA2 ∧ CA3)
CB2 ← CA3
CB3 ← CA2
CB4 ← true
T1
R
T2
R
T3
R
CB1
CB2
CB1
CB2
CA2
CA3
CA1
CB1
CA1
T4
R
CB3
CA2
Figure 4: Example disclosure trees for a set of policies
has already succeeded. Intuitively, if a credential C has been
disclosed, then we already have a safe disclosure sequence
for C. We do not need to disclose additional credentials or
policies in order to get a full disclosure tree rooted at C.
An example of a disclosure tree reduction is shown in ﬁgure
5(a).
Definition 6.3. Given a disclosure tree T and a policy
set Sp containing no denial policies, the expansion of T by
Sp, expansion(T, Sp), is the set of all disclosure trees Ti
such that
1. T is a subgraph of Ti, i.e., there exists a set S of cre-
dentials such that reduction(Ti, S) = T .
2. For each edge (C1, C2) in Ti, if (C1, C2) is not an edge
of T , then C1’s policy is in Sp.
3. For each leaf node C of Ti, either Sp does not contain
C’s policy, or Ti is redundant.
Given a set of disclosure trees St,
(cid:1)
expansion(St, Sp) =
T∈St
expansion(T, Sp).
A disclosure tree can expand when a party receives new
policy disclosures. An example of a disclosure tree expansion
is shown in ﬁgure 5(b).
Definition 6.4. Given a set St of disclosure trees and a
set Sdp of denial policies, the denial pruning of St by Sdp,
denoted prunedenial(St, Sdp), is the set
{T | T ∈ St and T contains no resource
whose policy is in Sdp}.
Since a full disclosure tree contains only credentials that
the two parties possess, if a disclosure tree node represents a
credential with a denial policy, that tree cannot evolve into
a full disclosure tree, and is irrelevant.
Definition 6.5. Given a set St of disclosure trees, the
redundancy pruning of St, denoted pruneredundant(St), is
the set
{T | T ∈ St and T is not a redundant disclosure tree}.
The rationale for redundancy pruning will be shown after
we introduce more operations on disclosure trees. Examples
of denial and redundancy pruning are shown in ﬁgure 5(c).
Definition 6.6. Given a disclosure tree T and a set Sdp
of denial policies, Sp of non-denial policies, and Sc of cre-
dentials, let S = Sdp ∪ Sp ∪ Sc. The evolution of T by S,
denoted evolution(T, S), is
pruneredundant(prunedenial(reduction(
expansion(T, Sp), Sc), Sdp).
Given a set St of disclosure trees,
(cid:1)
evolution(St, S) =
T∈St
evolution(T, S).
As a special case, when T is the disclosure tree containing
only a root node R, then we say evolution(T, S) is the view
of S, denoted view(S).
During the negotiation, let S be the set of credentials
and policies disclosed so far and L be the local policies of a
negotiation party. Then view(S∪L) contains all the relevant
disclosure trees that can be seen by this party. An example
view is shown in ﬁgure 5(d). Sometimes even though a tree
may evolve into a full tree later in the negotiation, it is
nonetheless redundant and can be removed by redundancy
pruning, whose correctness is guaranteed by the following
theorem.
Theorem 6.3. Let T be a full but redundant disclosure
that is not re-
tree. Then there is a full disclosure tree T (cid:2)
dundant.
Suppose S is the current set of disclosed credentials and
policies. By theorem 6.3, if a redundant tree may evolve
into a full tree, then the corresponding non-redundant tree
is already included in view(S), and the redundant trees can
be ignored.
To ensure negotiations succeed whenever possible, a ne-
gotiation strategy cannot overlook any possible full disclo-
sure trees. A disclosure tree also tells a party what may
contribute to the success of a negotiation. As an example,
suppose party PB requests service R from party PA. Sd, the
set of disclosures so far, and view(Sd) are shown in ﬁgure
6. Suppose now it is PA’s turn to send a message to PB.
From the disclosure tree, it is clear to an outside observer
that credentials CA1 and CA2 must be disclosed if the nego-
tiation is to succeed. So PA’s negotiation strategy can now
disclose CA1’s and/or CA2’s policy. This shows that to let
party P know what might be the next appropriate message,
151R
R
CB1
CB2
{CB4, CA1, CA3}
reduction
CB1
CB2
CA1
CA2
CA3
CB3
CB4
CB4
CA2
CB3
(a) Example of a disclosure tree reduction
R
CB1
CB2
CA3
{CB1 ← CA1 ∧ CA2 , CA3 ← CB4,
CA2 ← (CB3 ∧ CB4) ∨ CB5}
expansion
R
R
CB1
CB2
CB1
CB2
CA1
CA2
CA3
CA1
CA2 CA3
CB3
CB4
CB4
CB5 CB4
(b) Example of a disclosure tree expansion
CB1
CA1
CB1
R
R
R
CB3
CB1