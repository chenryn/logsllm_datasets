a
u
Q
 1
 0.8
 0.6
 0.4
 0.2
 0
 0
Prioritized
Unprioritized
 5
 10
 15
 20
 25
 30
 35
 40
s
d
n
o
c
e
S
 2.5
 2
 1.5
 1
 0.5
 0
 0
Flushing Outbuf
Circuit Queue to Outbuf
Arriving in Circuit Queue
 0.2
 0.4
 0.6
 0.8
 1
 1.2
Seconds
Seconds
Figure 3: CDF for time cost of downloading a small
ﬁle for unprioritized and prioritized Tor, under traf-
ﬁc simulation
to investigate this issue, we selectively turned on the algo-
rithm on individual ORs, and repeated the experiment to see
the eﬀect. We discovered that switching on the algorithm
on the entry and exit ORs does not have noticeable eﬀects,
while by turning on the algorithm on the middle OR, we
immediately see the improvement that is close to the overall
improvement we obtained. The reason is that for the nodes
we chose on PlanetLab, the link between the middle OR and
the entry OR is slower than the link between the middle OR
and the exit OR, so that cells (being sent from the server
to the client) accumulated at the middle OR. This indicates
that the eﬀectiveness of the algorithm highly depends on
the conditions of individual ORs; when an OR’s output link
is congested, cells will wait in the circuit queue for longer
periods, and our algorithm will make a more noticeable dif-
ference.
For the real Tor network, the traﬃc distribution is quite
diﬀerent from the previous experiment. McCoy et al. [12]
identiﬁed the exit traﬃc protocol distribution of Tor in 2008.
HTTP accounted for 92.45% of all connections, and 57.97%
of the total bytes sent; SSL accounted for 4.06% of all con-
nections, and 1.55% of the total bytes sent; BitTorrent ac-
counted for 3.33% of all connections, and 40.20% of the
total bytes sent. Other protocols such as Instant Messag-
ing, E-Mail, FTP, and Telnet accounted for less than 1%
of both connections and bytes sent. From the cited results,
we can conclude that BitTorrent consumed a disproportion-
ately large amount of bandwidth compared to other proto-
cols. This justiﬁes our intention of giving interactive streams
higher priority. On the other hand, in reality, the ratio of
busy circuits is not as high as in our previous experiment;
i.e., there are not as many low-priority circuits. To see how
much improvement we can get, we created a traﬃc simula-
tor that randomly generates network traﬃc according to the
connection-to-throughput ratio in the above statistics.
In Experiment 2, we ran the traﬃc simulator on multiple
clients, to simulate the Tor network. We downloaded a small
ﬁle and recorded the time cost. There were 1000 attempts
for both unprioritized and prioritized Tor. The results are
shown in Figure 3.
Due to the large variance in the network conditions, the
results have large variance in both unprioritized and pri-
Figure 4: Time points for a cell’s life cycle in the
middle OR, unprioritized
s
d
n
o
c
e
S
 2.5
 2
 1.5
 1
 0.5
 0
 0
Flushing Outbuf
Circuit Queue to Outbuf
Arriving in Circuit Queue
 0.2
 0.4
 0.6
 0.8
 1
 1.2
Seconds
Figure 5: Time points for a cell’s life cycle in the
middle OR, prioritized
oritized Tor (ranging from 1 second to almost 1 minute).
However, from the CDF graph, we can still ﬁnd 10–20%
improvement at each quantile.
3.2 Fine-grained Timing Analysis
In Experiment 3, we examine the life cycle of a cell in an
OR, check how much time it spends at each stage, and see
where we have improved.
Remember that when a cell reaches an OR, it enters the
circuit queue to which it belongs, and waits to be ﬂushed
to the output buﬀer of the connection. When the output
buﬀer is empty or has ﬂushed some cells, one circuit will be
selected to ﬂush its cells to the output buﬀer. Then the cells
wait in the output buﬀer until they are ﬂushed to the socket.
The testbed setting is similar to Experiment 1. We use
libspe [19] to record the time points related to the cells:
when cells enter the circuit queue, when they are moved
from the circuit queue to the output buﬀer of the connection,
and when they leave the output buﬀer. We record those time
points of cells in the middle OR (as we mentioned, using our
algorithm on the middle OR showed the most improvement
in our experiment), for both unprioritized and prioritized
Tor.
Figures 4 and 5 show the results for a single download
332s
d
n
o
c
e
S
 1.4
 1.2
 1
 0.8
 0.6
 0.4
 0.2
 0
 0
Unprioritized
Prioritized
 0.2
 0.4
 0.6
 0.8
 1
 1.2
e
l
i
t
n
a
u
Q
 1
 0.8
 0.6
 0.4
 0.2
 0
 0
Prioritized
Unprioritized
 5
 10
 15
 20
 25
 30
 35
 40
Seconds
Seconds
Figure 6: Time cells wait in the circuit queue in the
middle OR
Figure 7: CDF for time cost of downloading a small
ﬁle using unprioritized and prioritized middle OR,
in the real Tor network
of a small ﬁle. The x-axis indicates the time a cell enters
the circuit queue, and the y-axis indicates the time the cell
enters the circuit queue (the straight diagonal line), the time
the cell moved from the circuit queue to the output buﬀer,
and the time the cell is ﬂushed from the output buﬀer. Thus
the gap between the two lower lines indicates the time a
cell spends in a circuit queue, while the gap between the
upper two lines indicates the time a cell spends in the output
buﬀer, waiting to be written to the socket. We can see that,
in unprioritized Tor, a cell spends most of its life cycle in
the circuit queue waiting to be ﬂushed. The prioritized Tor
greatly reduced this duration.
Next, we recorded the time cells spent in the circuit queue.
We see signiﬁcant improvement in these durations; in fact,
the average duration spent in the circuit queue decreased
from 653 milliseconds to 115 milliseconds. The actual im-
provement in latency is even greater than the improvement
in the average duration. Figure 6 shows the amount of time
cells wait in the circuit queue, which is just the diﬀerence
between the lower two lines in each of Figures 4 and 5. We
can see that as cells arrive, more cells are queuing up within
the OR, making the latency higher. Our improvement is
more noticeable when the cells are queuing up: the decrease
in latency is as high as 1 second, in this case. This explains
the results we obtained in Experiment 1.
3.3 Experiments on Live Tor Nodes
In order to test the eﬀectiveness of our algorithm on the
real Tor network, we need to perform the experiments on
running Tor nodes, with real Tor traﬃc going through them.
In this section, we describe our live experiments and results,
and analyze the limitations.
3.3.1 Bandwidth Requirement for Live Tor Nodes
The eﬀectiveness of our algorithm depends on whether
multiple circuits are sharing a single connection between a
pair of ORs. According to [1], as of March 2010, there were
around 1500 ORs in Tor network, with the highest reported
bandwidth as much as 15 MB/s.
We downloaded the descriptors of all the ORs, and calcu-
lated the sum of the advertised bandwidth. The total band-
width was 440 MB/s. We assume that there are 250,000
simultaneous Tor users (circuits), who select ORs randomly
e
l
i
t
n
a
u
Q
 1
 0.8
 0.6
 0.4
 0.2
 0
 0
Prioritized
Unprioritized
 5
 10
 15
 20
 25
 30
 35
 40
Seconds
Figure 8: CDF for time cost of downloading a small
ﬁle using unprioritized and prioritized middle OR,
in the real Tor network, during afternoons ET
using their bandwidth as weights. Assume that we have a
pair of ORs, each having bandwidth BW MB/s. The ex-
pected number of circuits between this pair of ORs is then
440 )2 = 1.29(BW )2. In order to see several circuits
250000( BW
between the pair to make the prioritization eﬀective, we re-
quire BW ≈ 2 MB/s at least.
The above calculation is only a rough estimate to ensure
the ORs we select are in the right range. The accurate esti-
mate of the number of circuits would be more complicated.
3.3.2 Testbed Setup
Initially, we planned to run three ORs on selected Plan-
etLab nodes, and let them join the Tor network. However,
among the PlanetLab nodes, few could reach such a high
bandwidth requirement.
In fact, most nodes have band-
width lower than 100 KB/s. With these nodes, it is hardly
possible to attract multiple circuits within the connection.
We found one PlanetLab node at Princeton University
that has bandwidth as high as 1 MB/s. However, the daily
usage on the node is limited to 10 GB. Since the startup pro-
cess of an OR requires several hours to complete (including
333e
l
i
t
n
a
u
Q
 1
 0.8
 0.6
 0.4
 0.2
 0
 0
Prioritized
Unprioritized
 5
 10
 15
 20
 25
 30
 35
 40
e
l
i
t
n
a
u
Q
 1
 0.8
 0.6
 0.4
 0.2
 0
 0
Prioritized
Unprioritized
 200
 400
 600
 800
 1000
Seconds
Seconds
Figure 9: CDF for time cost of downloading a small
ﬁle using unprioritized and prioritized middle OR,
in the real Tor network, during midnights ET
Figure 10: CDF for time cost of bulk download using
unprioritized and prioritized middle OR, in the real
Tor network
publishing descriptors, computing consensus by directory
authorities, advertising bandwidth and re-advertising band-
width after attracting traﬃc), the throughput limit makes
it impossible to perform any tests.
Instead, we used gurgle.cs.uwaterloo.ca, a machine lo-
cated at the University of Waterloo, which has a compara-
bly high bandwidth of 3 MB/s. We also selected two exist-
ing ORs with high bandwidth: blutmagie with 10 MB/s,
and coldbotTorHosting1 with 10 MB/s. We used blut-
magie as the entry OR, planetgurgle as the middle OR, and
coldbotTorHosting1 as the exit OR. In this way, the esti-
mated number of circuits between planetgurgle and cold-