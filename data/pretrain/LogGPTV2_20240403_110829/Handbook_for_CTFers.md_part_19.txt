atic char
*php_ap_bas
++s2
path
Fig, 2.123 The code of _basename()
"$_FILES", because PHP calls the “_basenameO” method to process the file name
1 pe 21 sy u uqs se o, s m
The °_basename” method will get the last character after "/' or "", so uploading
the ./x.php file cannot achieve directory traversal. Because after the α_basename′
function, the value of *_FILES('name′T' is *x.php".
2.4.5.1 .htaccess Prohibit Seript FHe Execution Bypass
In the upload script (server/php/index.php) that comes with jQuery-File-Upload
lower than version 9.22, the regular rule used to verify the suffix of the uploaded
file is:
'accept_file_typesa* => * / +S/1 1
That is, any file upload is allowed. The reason why it has the confidence to allow
arbitrary file upload is because it has its own “.htaccess"° file in its upload directory,
and the script file that is configured to upload cannot be executed.
---
## Page 183
2.4 File Upload Vulnerability
167
SetHandler default -handler
ForceType application/octet -stream
# The folloring unseta the forced type and Content -Disposition headers
Header set Content -Disposition attachment
# for known image files :
Header unset Content -Disposition
ForceType none
# The following directive prevents browsers from MINE-sniffing the
content -type.
# This is an important complement to the FozceType directive above :
# Uncomment the fo1loving lines to prevent unauthorized dowmload of
tusou suogado-adA- quaquo-x aas xapeag
files :
#AuthType Basic
#require valid-user
However, starting from Apache 2.3.9, °AllowOverride" is None by default, so
, pe ,  sn oq no s,  ss e
directives are also useless. Directly uploading the PHP file will be executed.
ad[g)
Fig, 2.126 Result
Fig. 2.127 Result
p1Jom 011a
---
## Page 185
2.4 File Upload Vulnerability
169
1ocation ~ /upload/ + (php|php5 |phtml |pht}$ (
deny a11;
location - \ php(/ |$) {
#try_files
fastcgi_pass
Sur1 =404 ;
unix:/App1ications/MAMP/Librazy/1ogs/fast.cgi/
nginxFastCGI_php5 . 4 . 45 sock;
Sdocument_rootSfastcgi_script_name;
fastcgi_param SCRIPT_FILENANE
include
/Applications/MAMp/conf/nginx/fastcgi_params ;
Due to the popularity of °pathinfo" in major frameworks, many system support
“pathinfo", and will pass the path similar to “x.php/xxxx" in “location to FPM for
analysis, but *x.php/xxx” does not meet the matching rules of “deny all, leading to
bypass. See Fig. 2.128.
Japao Suqpieu _uoeoo, Aq pasnes ssedkg 
In the Nginx configuration, there are often scenarios where multiple “location” can
depends on the matching priority of the “location* block. Nginx configuration is as
match the request URI. At this time, which “location" statement block to handle
follows:
location /book/upload/ {
deny a11;
location - \ php(/|$) {
#try_flles
fastcgi_pass
Suri =404 ;
unix: /App11cations/MAMp/Librazy/1ogs/fastcgi/
nginxFastCGI_php5 . 4 . 45 sock;
Sdocument_rootSfaatcgi_scxipt_name ;
fastcgi_param SCRIPT_FILENANE
Fig, 2.128 Bypas result
$ cur1 http://Localhost:81/book/upload/x.php
chtml>
head>403Forbidden
403Forbidden
hr
nginx/1.13.2
# yulegeyu e yulegeyu in /tmp [11:40:46]
cur1http://localhost:81/book/upload/x.php/a
Hello World%
---
## Page 186
170
2  Advanced Web
Fig, 2.129 Result
cur1 http://localhost:81/book/upload/x.php
Hello World
include
/Appl1cations/MAMP/conf/nginx/fastcgi_parans;
“location" block matching priority is to first match the normal “location", and
then match the regular “location". If there are multiple common “location" that
match the URI, the “location" will be selected according to the longest prefix
principle. After the normal “location? matching is completed, if it is not a whole
“location" detection. If the regular match is successful, the result of the normal
matching, it will not end, but will continue to be handed over to the regular
“"location? matching will be overwritten. Therefore, in the above configuration,
“"deny all is covered by regular “location", and the PHP files in the upload directory
can still be executed normally, as shown in Fig. 2.129.
1ocation ^= /book/upload/ {
deny a11;
The correct configuration method should add "A_" before the normal matching,
which means that as long as the normal matching is successful, regular matching wil1
not be performed even if it is not a whole matching. Therefore, the parsing of PHP
files can be successfully prohibited under this configuration, as shown in Fig. 2.130.
location -\.php$ 
#try_flles
fastcgi_pass
Suri =404 ;
unix:/Appl1cations/MAMp/Librazy/logs/fastcgi/
nginxFastCGI_php5 .4 .45 sock;
fastcgi_param SCRIPT_FILENANE
Sdocument_root$faatcgi_script_name ;
include
/Applications/MAMp/conf/nginx/fastcgi_params ;
location ~ /book/up1oad/ 
deny a11 ;
Fig, 2.130 Result
$cur1 http://localhost:81/book/upload/x.php
403 Forbidden
chtml>
body bgcolor="white">
ch1>403 Forbidden
---
## Page 187
  o7
171
Fig. 2.131 Result
$ curl http://localhost:81/book/uplood/x.php
HelloWorld
chta>heod
483 Forbidden/title
hbsforbadenc/hs
perrission to access /book/uplood/yu.php
Fig, 2.132 Result
The above configuration is different from normal matching, as long as the regular
“location" matches successfully, the following *location" block will not be consid-
ered. The regular “location" matching order is related to the physical order in the
configuration file, and the physical order in the front will be matched first. Therefore,
in the above configuration, both matches are regular matches, then the PHP files in
the upload directory will still be handed over to FPM for analysis according to the
matching order, as shown in Fig. 2.131.
3. Bypass with Apache parsing vulnerability
Deny fron al1
Apache usually uses the above configuration to prohibit the script files in the
upload directory from being accessed. At this time, you can use Apache's parsing
vulnerability to upload the "yu.php.aaa”" file, so that it does not comply with the
“deny all° matching rule and bypassed, as shown in Fig. 2.132.
2.4.6Bypass Image Check to Achieve Code Execution
Some developers believe that if the uploaded file is a normal picture, it is impossible
to execute the code, so any suffix file is allowed to upload, but in PHP, the method of
detecting whether the file is a normal picture can often be bypassed.
---
## Page 188
172
2 Advanced Web
1. °getimagesize” bypass
The “getimagesize” function is used to calculate the size of any image file and retum
the size and file type of the image. If the file is not a valid image file, it will retum
“FALSE" and throw an °E_WARNING" error, as shown in Fig. 2.133.
The attempt to upload the PHP file directly fails, as shown in Fig. 2.134.
The bypass of *getimagesize” is relatively easy, as long as the PHP code is added
to the image content,it can be successfully bypassed, as shown in Fig. 2.135. At this
time, the uploaded PHP file can be parsed normally, as shown in Fig. 2.136.
Fig, 2.133 PHP code
c?php
.
Include(pclzip.ltb.php');
=sfile[name];
upload/';
$ext = strtolower(substr（strrchr（$name，*)，1）);
$path =sdir.sname;
$size =@getimagesize(sfile[‘tnp_name']);
if(ssize != false)
e_uptoaded_fLle(sftle['tmp_name'],$path);
exit("success');
exit（“请上传图片交件'）;
Fig, 2.134 The content of jpg
6066660:66606666600:66000-601600
9010:0:9011190
Fig, 2.135 Bypass
---
## Page 189
2.4 File Upload Vulnerability
173
k rr  
php
Fig, 2.136 Result
At the same time, °getimagesize? the calculation of pictures in XBM format - a
plain text picture format. αgetimagesize” will read the XBM file line by line when
calculating XBM. If a line matches “°#define %s %d", the “sscanf’ function will be
used to get the string and number. If the final *height" and *width" are not NULL,
then “getimagesize” will return successfully. Because it is read line by line, the
“"height”" and “"width" can be placed on any line.
while ( (fline=php_stream_gets (stream, NULL, 0) ) 1= NULL) {
if (sscanf (fine, "#define s d", iname, &value) == 2) {
if (1 (type = strrchr (inane, *_,))) {
type = 1name ;
else (
type++;
if (1stremp (*vidth", type)) {
vidth = (unsigned int) value;
if (1strcmp (*height", type) 1 {
height = (unsigned int) value;
if (vidth ss height) {
return IMAGE_FILETYPE_XBM;
same time.
push graphic-context
fi11 *ur1 (https: / /example, com/image - Jpg° |whoami ") 
v1ewbox 0 0 640 480
pop graphie-context
#define height 100
#define vidth 1100
---
## Page 190
174
2 Advanced Web
sfile =s_FILES[file'];
echo imagejpeg( tmagecreatefronjpeg(sfite[tnp_nane*]));
Fig, 2.137 PHP code
Fig, 2.138 Execution process
2. Imagecreatefromjpeg bypass
tug mau e aeu o aseug a apuan m poau _saduoaeasen, u
After the script code injected into the image is rendered, the script code will
disappear. But there is also a mature bypass script for this method: https://github.
com/BlackFan/jpg_payload. The test code is shown in Fig. 2.137.
First, upload the normal image file, then download the rendered image, run
“jpgpayload.php" to process the downloaded image, inject the code into the
image file, and upload the newly generated image. You can see the script code
injected after “imagecreatefromjpeg" still exists, see Fig. 2.138.
2.4.7ExploitwithUpload theGeneratedTemporaryFile
PHP will generate temporary files during file upload, and deletes temporary files
after uploaded. When there is a local file inclusion vulnerability but the upload
function is not found and there is no file to include, you can try to include the
 m apuadoo on peodn o Aq paeou ay Areuodua
---
## Page 191
 p  7
175
Fig, 2.139 PHPinfo
1. LFI via phpinfo
Since there are 6 random characters in the file name of the temporary file, and the file
will be deleted after the upload is completed, it is a big problem to find the temporary
file name within a limited time. However, all variables in the current environment
will be output in *phpinfo" function. If there is a “S_FILES" variable, it will also be
output, so if the target has a file of the *phpinfo function, upload a file to “phpinfo,
and you can easily get “tmp_name, as shown in Fig. 2.139. There are mature scripts
for LFI combined with phpinfo scenarios, and will not be described in detail here. 
2. LFI via Upload_Progress
When the “session.upload_progress.enabled" option is enabled, PHP can monitor
the upload progress when each file is uploading. Starting from PHP 5.4, this
configuration is available and enabled by default When uploading a file, there is a
variable with the same name as *session.upload_progress.name" set in INI in the
POST variable. When PHP detects such a POST request, it will add a set of data to
the “Session", write the upload progress and other information, and its index is the
value of “session.upload_progress.prefix and the value of "$_POST[session.
upload_progress.name] spliced together. “session.upload_progress.prefix” default
St onea 1negap oueu'ssarlondpeodnuojsss, ssaulondpeodn, s! anea
“php_session_upload_progress".
So,
to
POST
the
“php_session_upload_progress" when uploading. At this time, the uploaded file
name will be written into “SESSION", and *PHPSESSION" is saved as a file by
default, which can be used with LFI, as shown in Fig. 2.140.
Since the “session.upload_progress.cleanup” default configuration is ON, that is,
the “Session? added by “upload_progress" will be cleared after reading the POST
data. Therefore, it is necessary to use conditional competition to include the Session
file before the Session file is cleared, then do the code execution. The results of
conditional competition are shown in Fig. 2.141.
3. LFI via Segmentation Fault
The Segmentation Fault method is implemented by uploading a file to the url where
the Segmentation Fault exception occurs, causing an abnormal exit before the
garbage collection, and the temporary file generated by the upload will not be
deleted. Finally, by uploading a large number of files and enumerating all the
possibilities of temporary file names at the same time, and LFI exploit is successful,
---
## Page 192
176
2 Advanced Web
1538722560
228
41K292563
118292543-
2s1 2029 11124+11 9
*_123°1**
（228）
th°j=3
sed°1*>
"riies"
at(1s5i090761)
Fig, 2.140 Execution process
as shown in Fig. 2.140. In PHP 7, if the user can control the parameters of the file
function, a Segmentation Fault can be thrown. As for the reason for the formation of
“Segfault", you can directly refer to the analysis of Nu1L team member wupco:
https://hackmd.io/s/Hk-2nUb3Q.
---
## Page 193
2.4 File Upload Vulnerability
177
Fig, 2.141 Result
2.4.8Use File_put_contents to UploadFiles
In addition to uploading using “FILES", another upload format will also be encoun-
tered in the test. This method is uses *file_put_contents"” to save files after obtaining
the file content, as shown in Fig. 2.142.
1. “file_put_contents" upload file blacklist bypass
In the scenario where the file name is controllable, even if the developer does not
filter the ../" character in the *FILES" upload, PHP will use the “_basename
function to process when registering the “FILES['name']° variable, so that the users
cannot input characters such as “/./',etc. In the “file_put_contents" function, the file
path parameter may be an absolute path, so PHP will definitely not use the
“"basename” function to process this parameter. When the file name is controllable,
the “file_put_contents" upload can achieve directory traversal.
When the code shown in Fig. 2.143 appears in the Nginx+PHP server and there is