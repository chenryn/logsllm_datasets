tamp Replies with zero transmit timestamps. Furthermore,
the system clocks on version 1.0 honeyd virtual hosts are
still highly synchronized and are too fast by several orders
of magnitude.
To experiment with real virtualization technologies, we
installed VMware Workstation 4.5.2 on host3, but this
time host3 ran Red Hat 9.0. We then installed ﬁve default
copies of Red Hat 9.0 under VMware. We applied our skew
estimation techniques to these ﬁve virtual machines, as well
as to host3. The results show that the ﬁve virtual machines
do not have constant (or near constant) clock skews, shown
by the non-linearity of the points in Figure 5. Furthermore,
the magnitude of the clock skews on these virtual machines
is larger than we would expect for physical machines. We
feel conﬁdent that these observations and natural extensions
could prove useful in distinguishing virtual honeynets from
real networks.
COUNTING THE NUMBER OF DEVICES BEHIND A NAT.
Another natural application of our techniques is to count the
number of devices behind a NAT. To brieﬂy recall previous
work in this area, Bellovin [7] showed that an adversary
can exploit the IP ID ﬁeld to count the number of devices
behind a NAT, but his approach is limited in three ways:
(1) the IP ID ﬁeld is only 16-bits long; (2) recent operating
systems now use constant or random IP ID ﬁelds; and (3)
his technique cannot count the total number of devices be-
hind a NAT if not all of them are active at the same time.
Our suggested approach to this problem has two phases.
First, partition the trace into (candidate) sets corresponding
to different sequences of time-dependent TCP timestamps;
creating such a partition is relatively easy to do unless two
machines have approximately the same TSopt clock values
at some point in time, perhaps because the machines booted
at approximately the same time. Then apply our clock skew
estimation techniques to each partition, counting hosts as
unique if they have measurably different clock skews. If two
devices have approximately the same TSopt clock values
at some point in time but have measurably different clock
skews, then one can detect and correct this situation in the
analysis of the partition’s offset-set.
FORENSICS AND TRACKING INDIVIDUAL DEVICES. The
utility of our techniques for forensics purposes follows
closely from our claims (1) that there is variability in the
clock skews between different physical devices (Section 5),
(2) that the clock skew for a single device is approximately
constant over time (Section 5), and (3) that our clock skew
estimates are independent of access technology, topology,
and the measurer (Section 6). For forensics, we anticipate
that our techniques will be most useful when arguing that a
0
-1
-2
-3
)
s
d
n
o
c
e
s
(
t
e
s
f
f
o
d
e
v
r
e
s
b
o
-4
0
600
1200 1800 2400 3000 3600 4200 4800 5400 6000 6600 7200
time since start of measurement (seconds)
Figure 5. TSopt clock offset-sets for ﬁve
VMware Workstation virtual machines run-
ning Red Hat 9.0, and for the host, host3,
also running Red Hat 9.0. 2004-10-27 17:00–
19:00PDT. The top set of points corresponds
to the TSopt clock offset set for host3.
given device was not involved in a recorded event. With re-
spect to tracking individual devices, we stress that our tech-
niques do not provide unique serial numbers for devices,
but that our skew estimates do provide valuable bits of in-
formation that, when combined with other sources of infor-
mation such as operating system ﬁngerprinting results, can
help track individual devices on the Internet.
UNANONYMIZING ANONYMIZED DATA SETS. It is com-
mon for organizations that provide network traces contain-
ing payload data to anonymize the IP addresses in the traces
using some preﬁx-preserving anonymization method [28,
29]. If an organization makes available both anonymized
and unanonymized traces from the same link, one can
use our techniques to catalyze the unanonymization of the
anonymized traces. Such a situation is not hypothetical: in
addition to the 2004-04-28 trace that we used in Section 5,
CAIDA took another trace from the same link on 2004-04-
21, but the 2004-04-21 trace included payload data and was
therefore anonymized.
To study how one might use our clock skew estima-
tion techniques to help unanonymize anonymized traces,
on 2005-01-13 and 2005-01-21 CAIDA took two two-hour
traces from a major OC-48 link (the same link from which
CAIDA captured the 2004-04-28 trace). We anonymized
the 2005-01-13 trace and experimented with our ability to
subsequently unanonymize it. Given the value of a de-
vice’s TSopt clock and knowledge of that clock’s intended
frequency Hz, we can compute the approximate uptime of
the device.
(Prior to our work, one method for inferring
Hz from a passive trace would be to use a program like
p0f [3].) As a ﬁrst attempt at unanonymizing the 2005-01-
13 trace, we paired anonymized IP addresses from 2005-
01-13 with IP addresses from 2005-01-21 when our uptime
estimate of a host in 2005-01-21 is eight days higher (plus
or minus ﬁve minutes) than the uptime of a host in 2005-01-
13 and when both hosts have the same TTLs and intended
frequencies. Our program produced 4613 pairs of candidate
anonymous to real mappings, of which 2660 (57.66%) were
correct. To reduce the number of false matches, especially
for small uptimes, we modiﬁed our program to ﬁlter out
pairs that have TSopt clock skews different by more than 3
ppm. We also incorporated our clock skew estimates into
our uptime estimates. These changes reduced the number
of candidate mappings to 2170, of which 1902 (87.65%)
were correct. There are a total of 11862 IP addresses in
both the 2005-01-13 and 2005-01-21 traces that have the
TCP timestamps option enabled. Since the anonymiza-
tion is preﬁx-preserving, given the candidate mappings one
can begin to unanonymize address blocks. We are un-
aware of any previous discussion of the problems to preﬁx-
preserving anonymization caused by leaking information
about a source via the TCP timestamps option.
9 Other measurement techniques
Although the techniques we describe above will likely
remain applicable to current generation systems, we suspect
that future generation security systems might try to resist
some of the physical device ﬁngerprinting techniques that
we uncover. In anticipation of these future systems, we con-
sider possible avenues for clock-based physical device ﬁn-
gerprinting when information about a system’s TSopt clock
or system clock is not readily available to an adversary; we
do not consider here but recognize the possibility of ﬁnger-
printing techniques that proﬁle other aspects of a device’s
hardware, e.g., processor speed or memory. These direc-
tions assume that new operating systems mask or do not in-
clude the TSopt clock values in the TCP headers and do not
reply to ICMP Timestamp Requests, but that the systems’
underlying clocks still have non-negligible skews. (This as-
sumption may not be valid if, for example, at boot a new op-
erating system does a more precise estimation of the oscilla-
tor frequencies supplying the hardware basis for the clocks.)
The techniques we propose in this section are less reﬁned
than the techniques elsewhere in this paper; we envision
them as starting points for more sophisticated techniques.
FOURIER TRANSFORM. Some systems send packet at 10
or 100 ms intervals, perhaps due to interrupt processing
or other internal operating system feature on one side of
a ﬂow. When this condition holds, we can use the Fourier
transform to extract information about the system’s clock
skew. Figure 6 plots the TSopt clock offset-sets for a de-
vice in BBS with a 2 Hz TSopt clock. The ﬁve diagonal
TSopt clock skew estimate by linear programming upper bound
2000
1500
1000
500
)
s
m
(
t
e
s
t
e
s
f
f
o
0
0
900
1800
2700
time since start of measurment (seconds)
3600
4500
5400
6300
7200
Figure 6. TSopt clock skew estimate for a
source in BBS. Trace recorded on an OC-48
link of a U.S. Tier 1 ISP, 2004-04-28 19:30–
21:30PDT. TSopt clock skew estimate via lin-
ear programming: 175.2 ppm. Clock skew es-
timate via the Fourier transform: 175.6 ppm.
bands suggests that the machine clusters packet transmis-
sions at approximately 100 ms intervals, and we can use the
Fourier transform on packet arrival times to estimate the fre-
quency at which the device actually transmits packets (here
packet arrival times refers to the times at which the moni-
tor records the packets). For the source shown in Figure 6,
after computing the Fourier transform, the frequency with
the highest amplitude was 25.00439, which implies a skew
of 25.00439/25 − 1, or 175.6 ppm. Moreover the top 19
frequencies output by the Fourier transform all imply skews
between 171.0 ppm and 179.3 ppm. These values are all
close to the 175.2 ppm output by our TCP timestamps-based
approach but do not make any use the TCP timestamps con-
tained with the packets.
Although our Fourier-based technique does not require
knowledge of a device’s TSopt or system clocks, our
Fourier-based solution is currently not automated. This lack
of automation, coupled with the fact that current generation
systems readily relinquish information about their TSopt
and system clocks, means that our Fourier-based solution
is currently less attractive than the techniques we described
in Sections 3 and 4.
PERIODIC USER-LEVEL ACTIVITIES. Toward estimating
the system clock skew of devices that do not synchronize
their system times with NTP, we note that many applica-
tions perform certain operations at semi-regular intervals.
For example, one can conﬁgure most mail clients to poll for
new mail every n minutes. As another example, Broido,
Nemeth, and claffy show that some Microsoft Windows
2000 and XP systems access DNS servers at regular inter-
It may be possible to infer information about a
vals [8].
device’s system clock skew by comparing differences be-
tween actual intervals of time between these periodic activ-
ities and what the application intends for those intervals of
time to be.
10 Conclusions
In this study we veriﬁed the ability and developed tech-
niques for remote physical device ﬁngerprinting that exploit
the fact that modern computer chips have small yet non-
trivial and remotely detectable clock skews. We showed
how our techniques apply to a number of different practi-
cally useful goals, ranging from remotely distinguishing be-
tween virtual honeynets and real networks to counting the
number of hosts behind a NAT. Although the techniques we
described will likely remain applicable to current generation
systems, we suspect that future generation security systems
might offer countermeasures to resist some of the ﬁnger-
printing techniques that we uncover. In anticipation of such
developments, we discussed possible avenues for physical
device ﬁngerprinting when information about a system’s
TSopt clock or system clock are not readily available to the
adversary. Our results compellingly illustrate a fundamental
reason why securing real-world systems is so genuinely dif-
ﬁcult: it is possible to extract security-relevant signals from
data canonically considered to be noise. This aspect renders
perfect security elusive, and even more ominously suggests
that there remain fundamental properties of networks that
we have yet to integrate into our security models.
Acknowledgments
We thank Bruce Potter and Stefan Savage for helpful dis-
cussions, Emile Aben, Dan Andersen, Colleen Shannon,
and Brendan White for collecting some of the traces that
we analyzed, and William Griswold for loaning us a PDA
from the HP Mobile Technology Solutions gift to the Ac-
tiveCampus project. All three authors were supported by
the SciDAC program of the US DOE (award # DE-FC02-
01ER25466). T. Kohno was also supported by NDSEG and
IBM Ph.D. Fellowships.
References
[1] Endace measurement systems, 2004. URL: http://www.
endace.com/.
[2] Nmap free security scanner, 2004. URL: http://www.
insecure.org/nmap/.
for p0f,
[3] Project details
2004.
URL: http://
freshmeat.net/projects/p0f/.
[4] VMware virtual infrastructure, 2004. URL: http://www.
vmware.com/.
[5] Xprobe ofﬁcial home, 2004.
URL: http://www.
sys-security.com/html/projects/X.html.
[6] K. G. Anagnostakis, M. Geenwald, and R. S. Ryger. cing:
Measuring network-internal delays using only existing in-
frastructure. In INFOCOM, 2003.
[7] S. M. Bellovin. A technique for counting NATted hosts. In
IMW, 2002.
[8] A. Broido, E. Nemeth, and k. claffy. Spectroscopy of DNS
update trafﬁc. In SIGMETRICS, 2003.
[9] S. Donnelly. High precision timing in passive measure-
ments of data networks. Ph.D. thesis, University of Waikato,
Hamilton, New Zealand, 2002.
[10] M. E. Dyer. Linear time algorithms for two- and three-
variable linear programs. SIAM J. Comput., 13, 1984.
[11] I. D. Graham, M. Pearson, J. Martens, and S. Donnelly. Dag
- A cell capture board for ATM measurement systems. URL:
http://dag.cs.waikato.ac.nz/.
[12] R. L. Graham. An efﬁcient algorithm for determining the
convex hull of a ﬁnite planar set. Inf. Process. Lett., 1, 1972.
[13] V. Jacobson, R. Braden, and D. Borman. TCP extensions for
high performance. RFC 1323, May 1992.
[14] K. Keys, D. Moore, R. Koga, E. Lagache, M. Tesch, and
k. claffy. The architecture of the CoralReef Internet trafﬁc
monitoring software suite. In PAM, 2001.
[15] T. Kohno, A. Broido, and k. claffy.
Remote physi-
cal device ﬁngerprinting.
Full version of this paper,
available at http://www-cse.ucsd.edu/users/
tkohno/papers/PDF/, 2005.
[16] N. Megiddo. Linear-time algorithms for linear programming
in r3 and related problems. SIAM J. Comput., 12, 1983.
[17] J. Micheel, S. Donnelly, and I. Graham. Precision times-
tamping of network packets. In IMW, 2001.
[18] D. Mills. Simple network time protocol (SNTP) version 4
for IPv4, IPv6 and OSI. RFC 2030, 1996.
[19] D. L. Mills. Network time protocol (version 3): Speciﬁca-
tion, implementation and analysis. RFC 1305, 1992.
[20] S. B. Moon, P. Skelly, and D. Towsley. Estimation and re-
moval of clock skew from network delay measurements. In
INFOCOM, 1999.
[21] A. P´asztor and D. Veitch. PC based precision timing without
GPS. In SIGMETRICS, 2002.
[22] V. Paxson. On calibrating measurements of packet transit
times. In SIGMETRICS, 1998.
[23] J. Postel. Internet control message protocol. RFC 792, 1981.
[24] N. Provos. A virtual honeypot framework. In Usenix Secu-
rity 2004, 2004.
[25] C. Shannon. The mathematical theory of communication.
1949. Urbana, University of Illinois Press.
[26] D. Veitch, S. Babu, and A. P´asztor. Robust synchronization
of software clocks across the Internet. In IMC, 2004.
[27] F. Veysset, O. Courtay, and O. Heen.
New tool
and technique for remote operating system ﬁngerprint-
ing, 2002. URL: http://www.intranode.com/fr/
doc/ring-short-paper.pdf.
[28] J. Xu, J. Fan, M. Ammar, and S. B. Moon. On the design and
performance of preﬁx-preserving IP trafﬁc trace anonymiza-
tion. In IMW, 2001.
[29] J. Xu, J. Fan, M. H. Ammar, and S. B. Moon. Preﬁx-
preserving IP address anonymization: Measurement-based
security evaluation and a new cryptography-based scheme.
In ICNP, 2002.