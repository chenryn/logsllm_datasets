### Production Environment Configuration

In production environments, the value of this option should be kept at 2 (the default value). Well-intentioned developers often misunderstand these parameters and frequently set `CURLOPT_SSL_VERIFYHOST` to `TRUE`, which changes it to 1. This inadvertently disables hostname verification, leading to disastrous consequences (see Section 7.1).

### SSL Connection in PHP

PHP provides several methods for establishing SSL connections. For example, `fsockopen` can open a raw socket to a remote server by including "ssl://" in the URL. However, `fsockopen` does not perform any certificate checks, yet it is commonly used by PHP application developers for SSL connection establishment (see Section 9).

PHP also offers a cURL binding that uses cURL’s default settings for SSL connections with proper certificate validation. As shown in Sections 7.1, 7.2, and 7.3, developers often incorrectly set cURL options, overriding the defaults and breaking certificate validation.

### SSL Connection in Python

Several Python modules, such as `urllib`, `urllib2`, and `httplib`, can establish SSL connections but do not check certificates. This is clearly documented on the `urllib` front page:

> **Warning**: When opening HTTPS URLs, it does not attempt to validate the server certificate. Use at your own risk!

Despite this warning, even high-security applications frequently use these modules for SSL connection establishment (see Section 9).

Python also includes an `ssl` module that verifies the certificate's chain of trust but not the hostname. The application must perform its own hostname verification. In Python version 3, the `ssl` module introduced the `match_hostname` method for hostname verification, but it must be explicitly called by the application.

### Analysis of Non-Browser Software

We analyze a representative sample of non-browser software applications and libraries that use SSL for secure Internet connections. Some programs, like instant messenger clients and simple mobile banking apps, use SSL straightforwardly. Others, especially middleware libraries, integrate SSL into a multi-layer software stack. Many of these programs transmit highly sensitive data—such as private user files, financial information, and developer account credentials—over potentially insecure public networks, making correct SSL usage critical.

#### Cloud Client APIs

As cloud-computing platforms like Amazon EC2 grow in popularity, their operators provide client SDKs for third-party software to interact with cloud-based storage, manage computation, and access other cloud services. For example, Amazon offers EC2 API tools in Java, PHP, Python, and Perl. Apache Libcloud is another independent library for accessing multiple cloud providers.

#### Merchant Payment SDKs

E-commerce websites often rely on third-party payment processors like PayPal and Amazon Flexible Payments Service (FPS) to handle customer payments. These processors provide merchant SDKs in various languages, designed to be integrated into the back end of e-commerce websites. Merchant software uses these SDKs to transmit payment details and receive notifications when payments are made.

There are two primary options for payment processing:
1. **Redirect to Payment Processor**: The customer enters payment details directly on the payment processor's website. After the payment is complete, the processor redirects the customer back to the merchant's website and notifies the merchant.
2. **Direct Collection**: Larger, more established stores prefer to collect payment details directly from the customer without redirecting them. The back-end software then transmits these details to the payment processor's gateway over an SSL connection and receives confirmation of the successful payment.

Figure 4 illustrates the interaction between the merchant's server and the payment gateway, with the SSL client being the merchant's back-end software and the payment gateway acting as the SSL server.

#### Web-Services Middleware

Many modern programs rely on web services, which are designed for interoperable machine-to-machine interaction over a network. These services use XML-based protocols like SOAP or REST. Middleware frameworks, such as Apache Axis, Axis 2, or Codehaus XFire, are responsible for transmitting messages over the network. If the connection must be secure, the middleware typically uses SSL, delegating actual SSL connection management to a data-transport library like Apache HttpClient or Weberknecht.

#### Mobile Advertising

Mobile advertising services, such as AdMob, provide software for mobile app providers to install on their sites. When a new app instance is initialized, it connects to the provider's site, which notifies the AdMob server to associate ads with the provider's account. The connection from the app provider's site to the AdMob server contains the provider's credentials and must be protected by SSL.

### Experimental Testbed

Our primary methodology for discovering SSL certificate validation bugs is black-box fuzzing. We test applications and libraries implementing SSL client functionality on two Dell laptops running Microsoft Windows 7 Professional and Ubuntu Linux 10.04, respectively. Mobile applications are tested on a Nexus One smartphone running Android 2.3.6 and an iPad 2 running iOS 4.2.1.

We use local DNS cache poisoning to divert clients' connections to a simulated attack server. We built two prototypes: one in Java using JKS keystore and the other in C using OpenSSL. We also used Fiddler, a web debugging proxy, to simulate a man-in-the-middle attacker who presents self-signed certificates with correct common names.

If we observe a client successfully establishing an SSL connection with any of the attack certificates, we analyze the source code or, for closed-source applications, the results of reverse-engineering, decompilation, and runtime traces to find the root cause of the vulnerability.

### Specific Vulnerabilities

#### Amazon Flexible Payments Service (PHP)

The PHP version of the FPS SDK uses a wrapper around the libcurl library to establish an SSL connection to the gateway. The well-intentioned code in `src\Amazon\FOPS\Client.php` sets `CURLOPT_SSL_VERIFYPEER` and `CURLOPT_SSL_VERIFYHOST` to `true`. However, `true` silently turns into 1, overriding the default and instructing cURL to check the existence of any common name in the certificate, which may or may not match the requested name. This makes the connection insecure against a man-in-the-middle attack.

#### PayPal Payments Standard and PayPal Invoicing (PHP)

The previous version of PayPal Payments Standard SDK disabled all certificate validation checks. The version released on April 27, 2012, "fixes" the problem by setting `CURLOPT_SSL_VERIFYPEER` and `CURLOPT_SSL_VERIFYHOST` to `TRUE`. However, this still overrides the correct default value of `CURLOPT_SSL_VERIFYHOST` and breaks hostname verification. Similarly, PayPal Invoicing contains broken code, making any PHP code using these SDKs insecure against a man-in-the-middle attack.

#### ZenCart and PayPal IPN

ZenCart’s functionality for PayPal IPN shows a profound misunderstanding of cURL’s parameters. It disables certificate validation entirely but attempts to enable hostname verification, which has no effect if certificate validation is disabled.

#### Lynx

Lynx, a text-based browser, relies on GnuTLS to validate SSL certificates. The code misinterprets the semantics of `gnutls_certificate_verify_peers2`, leading to broken chain-of-trust verification.

#### Apache HttpClient

Apache HttpClient 3.1, released in 2007, sets up SSL connections using JSSE’s `SSLSocketFactory` without performing its own hostname verification. This means it accepts any certificate with a valid chain of trust, regardless of the name. The hostname verification bug was fixed in version 4.0-alpha1, and the current version, 4.2.1, has its own hostname verifier and delegates chain-of-trust verification to JSSE. Unfortunately, the existence of a correct implementation has had little effect on the security of applications that rely on HttpClient for SSL connection establishment.