In production environments the value of this
option should be kept at 2 (default value).
Well-intentioned developers not only routinely misunderstand
these parameters, but often set CURLOPT_SSL_VERIFY HOST to TRUE,
thereby changing it to 1 and thus accidentally disabling hostname
veriﬁcation with disastrous consequences (see Section 7.1).
PHP. PHP provides several methods for establishing SSL connec-
tions. For example, fsockopen, which opens a raw socket to the
remote server, can be used to connect to SSL servers by putting
“ssl://” in the URL. Even though fsockopen does not perform any
certiﬁcate checks whatsoever, PHP application developers routinely
use it for SSL connection establishment (see Section 9).
PHP also provides a cURL binding, which uses cURL’s default
settings to establish SSL connections with proper certiﬁcate valida-
tion. As we show in Sections 7.1, 7.2, and 7.3, application develop-
ers often set cURL options incorrectly, overriding the defaults and
breaking certiﬁcate validation.
Python. Several Python modules can be used for SSL connection
establishment. urllib, urllib2, and httplib connect to SSL servers
but do not check certiﬁcates. This is clearly documented in a bright
pink box on the urllib front page:6
Warning: When opening HTTPS URLs, it does not
attempt to validate the server certiﬁcate. Use at your
own risk!
Nevertheless, even high-security applications routinely use these
modules for SSL connection establishment (see Section 9).
Python also has an ssl module. This module veriﬁes the certiﬁ-
cate’s chain of trust, but not the hostname. The application must do
its own hostname veriﬁcation. In Python version 3, the ssl module
introduced the match_hostname method for hostname veriﬁcation,
but it must be explicitly called by the application.
4http://code.google.com/p/weberknecht/
5http://curl.haxx.se/
6http://docs.python.org/library/urllib.html
425. SSL IN NON-BROWSER SOFTWARE
We analyze a representative sample of non-browser software ap-
plications and libraries that use SSL for secure Internet connec-
tions. Some programs, such as instant messenger clients and sim-
ple mobile banking apps, are fairly straightforward in their use of
SSL. Others, especially middleware libraries, use SSL as part of a
multi-layer software stack. Many of the programs we analyze trans-
mit extremely sensitive data—private ﬁles of individual users in the
case of cloud clients, ﬁnancial information of customers in the case
of merchant SDKs, developer account credentials in the case of
mobile advertising software—over potentially insecure public net-
works, thus it is absolutely critical that they use SSL correctly.
Cloud client APIs. As cloud-computing platforms such as Ama-
zon EC2 grow in popularity, their operators supply client SDKs
through which third-party software can transmit user data to cloud-
based storage, manage cloud-based computation (e.g., start and ter-
minate virtual instances), and access other cloud services. For ex-
ample, Amazon provides EC2 API tools in Java, PHP, Python, and
Perl. Apache Libcloud is an example of an independent library for
accessing multiple cloud providers.
Merchant payment SDKs. Operators of e-commerce websites of-
ten rely on third parties such as PayPal and Amazon Flexible Pay-
ments Service (FPS) to process their customers’ payments. Pay-
ment processors provide merchant SDKs (software development
kits) in a variety of languages. These libraries are designed to be
integrated into the back end of e-commerce websites. Merchant
software uses them to transmit customers’ payment details and/or
receive notiﬁcations when payments are made by customers.
An online store typically has two options for payment process-
ing. The ﬁrst option is to have the customer enter payment details
directly into the payment processor’s website. When the customer
checks out, the merchant’s website redirects her browser to PayPal
or Amazon, where the customer enters her name, credit or debit
card number, etc. The merchant never sees these details. Once the
payment is complete, the payment processor redirects the customer
back to the merchant’s website and notiﬁes the merchant.
The merchant’s site runs a daemon listening for IPN (Instant Pay-
ment Notiﬁcation) calls from the payment processor. Upon receiv-
ing a notiﬁcation, the merchant is advised to verify that the call in-
deed originated from the processor (some merchants skip this step,
opening the door to “shop-for-free” attacks [23]). The merchant
then completes the transaction with the customer.
The second option is preferred by larger, more established stores.
It does not require the customer to leave the merchant’s website and
allows the merchant to collect payment details directly from the
customer. The back-end software on the merchant’s website then
transmits these details to the payment processor’s gateway over an
SSL connection and receives the conﬁrmation that the payment suc-
ceeded (often over the same SSL connection).
Fig. 4 shows schematically the interaction between the merchant’s
server and the payment gateway. The SSL client is the merchant’s
back-end software (running on the merchant’s server), while the
payment gateway acts as the SSL server.
We analyzed SSL connection establishment in popular merchant
SDKs, including Java and PHP SDKs for Amazon Flexible Pay-
ments Service and multiple interfaces to PayPal: Payments Pro,
Transactional Information, and Mass Pay (all in Java), as well as
Payments Standard and Invoicing (PHP). We also analyzed both
Amazon’s and PayPal’s utilities that merchants can use to verify
the origin of IPN (Instant Payment Notiﬁcation) calls.
We also analyzed several open-source shopping carts written in
PHP: osCommerce, ZenCart, Ubercart, and PrestaShop. Shopping
Merchant’s
   Website
Payment
Gateway
Customer
1
SDK
SSL tunnel
Internet
2
3
1 Credit Card
   Information
2 Charge Request
3 Payment
   Confirmation
Figure 4: Merchant SDK interacting with payment processor.
carts are an important component of e-commerce websites. They
keep track of customers’ shipping and billing information and al-
low them to purchase multiple items in one transaction. When the
customer checks out, the shopping cart generates a summary of the
purchases and the total price and sends it to the payment gateway.
Shopping carts include modules for many payment processors.
Web-services middleware. Many modern programs rely on Web
services. A Web service is “a software system designed to support
interoperable machine-to-machine interaction over a network.”7 A
service has an interface described in a machine-readable XML for-
mat. Different providers may provide different concrete implemen-
tations of this interface. Other systems interact with the service by
sending and receiving messages.
Messages to and from Web services are sent using XML-based
Simple Object Access Protocol (SOAP) or REpresentational State
Transfer (REST). From the viewpoint of the client software, a Web
service can be thought of as providing a remote procedure call
(RPC) interface, while SOAP or REST middleware marshals and
unmarshals arguments of RPC calls.
To interact with such a Web service—for example, if a cloud
client implemented in Java wants to interact with Amazon EC2 —
existing Java software often uses SOAP middleware such as Apache
Axis, Axis 2, or Codehaus XFire (see Section 8). Similarly, if
an Android app needs real-time “push” notiﬁcations, it may use
a client-side library to connect to the REST-based Pusher service.8
These middleware frameworks are responsible for transmitting
Web-service messages over the network. If the connection must be
secure, the middleware typically uses SSL but delegates actual SSL
connection management to a data-transport library such as Apache
HttpClient or Weberknecht (see Section 4.2).
Mobile advertising. Mobile advertising services such as AdMob
supply software that providers of mobile apps install on their sites.
When a new app instance is initialized on a customer’s phone, it
connects to the provider’s site, which in turn notiﬁes the AdMob
server so that all ads shown to this app instance will be associated
with the provider’s account (to enable ad revenue sharing, etc.).
The connection from the app provider’s site to the AdMob server
contains the provider’s credentials and must be protected by SSL.
6. EXPERIMENTAL TESTBED
Our primary methodology for the initial discovery of SSL cer-
tiﬁcate validation bugs is black-box fuzzing. We test applications
and libraries implementing SSL client functionality on two Dell
laptops running Microsoft Windows 7 Professional Service Pack
7http://www.w3.org/TR/ws-arch/
8http://pusher.com
431 and Ubuntu Linux 10.04, respectively. Mobile applications are
tested on a Nexus One smartphone running Android 2.3.6 and an
iPad 2 running iOS 4.2.1.
We use local DNS cache poisoning to divert clients’ connections
to a simulated attack server executing on an old Dell laptop with
Ubuntu Linux 10.04. To simulate a man-in-the-middle attacker, we
built two prototypes: one in Java, using JKS keystore to manage
the attacker’s certiﬁcates and keys, the other in C, using OpenSSL
for certiﬁcate and key management. We also used Fiddler, a Web
debugging proxy [9]. If Fiddler encounters a connection request
to a server it has not seen before, it creates a new certiﬁcate with
the common name matching the requested name and stores it in
its repository; otherwise, it retrieves an existing certiﬁcate from
its repository. Fiddler then presents the certiﬁcate to the client,
allowing us to simulate a man-in-the-middle attacker who presents
self-signed certiﬁcates with correct common names. In addition,
we enabled Fiddler to capture and decrypt HTTPS connections.
Our simulated “man-in-the-middle” server presents the client with
several certiﬁcates: (1) a self-signed certiﬁcate with the same com-
mon name as the host the client is attempting to connect to, (2) a
self-signed certiﬁcate with an incorrect common name, and (3) a
valid certiﬁcate issued by a trusted certiﬁcate authority to a domain
called AllYourSSLAreBelongTo.us. If the client establishes
an SSL connection, the attack server decrypts trafﬁc sent by the
client. It can then establish its own SSL connection to any legiti-
mate server speciﬁed by the attacker and forward the client’s trafﬁc.
The attack server also listens for the legitimate server’s response,
decrypts and logs it, re-encrypts it with the symmetric key the at-
tacker shares with the client and forwards it to the client.
If we observed a particular client successfully establishing an
SSL connection when presented with any of the attack certiﬁcates,
we analyzed the source code of the client or, in the case of closed-
source applications, the results of reverse-engineering, decompi-
lation, and runtime traces (focusing in particular on calls to SSL
libraries) in order to ﬁnd the root cause of the vulnerability.
The URL veriﬁcation utility—found in src\Amazon\IpnRe-
turnUrlValidation\SignatureUtilsForOutbound.
php—is broken in a very similar way. This utility is critically im-
portant because it is used by merchants to verify the origin of the
calls informing them that a customer’s payment has been success-
fully processed (see Section 5). Because Amazon’s PHP SDK does
not correctly verify the origin of the IPN call, e-commerce sites
using it may be vulnerable to “shop-for-free” attacks [23].
7.2 PayPal Payments Standard and
PayPal Invoicing (PHP)
PayPal Payments Standard SDK implemented in PHP uses cURL.
The previous version disabled all certiﬁcate validation checks:
curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE);
curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, FALSE);
The version released on April 27, 2012, “ﬁxes” the problem:
curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, TRUE);
curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, TRUE);
As in Section 7.1, this code overrides the correct default value of
CURLOPT_SSL_VERIFYHOST and breaks hostname veriﬁcation.
PayPal Invoicing contains similarly broken code:
public function setHttpTrustAllConnection(
$trustAllConnection)
{
}
$this->curlOpt[CURLOPT_SSL_VERIFYPEER] =
!$trustAllConnection;
$this->curlOpt[CURLOPT_SSL_VERIFYHOST] =
!$trustAllConnection;
Any PHP code using these PayPal-provided SDKs to establish
an SSL connection to PayPal’s payment processing gateway is in-
secure against a man-in-the-middle attack.
In Sections 7 through 10, we describe the vulnerabilities in spe-
7.3 PayPal IPN in ZenCart
ciﬁc programs, arranged by error type.
7. MISUNDERSTANDING THE SSL API
7.1 Amazon Flexible Payments Service (PHP)
Amazon Flexible Payments Service (FPS) provides SDKs that
merchants use to transmit customers’ payment details to the FPS
gateway. The PHP version of the FPS SDK uses a wrapper around
the libcurl library (see Section 4.2) to establish an SSL connection
to the gateway. cURL’s options for certiﬁcate validation are set in
src\Amazon\FOPS\Client.php as follows:
curl_setopt($curlHandle, CURLOPT_SSL_VERIFYPEER, true);
curl_setopt($curlHandle, CURLOPT_SSL_VERIFYHOST, true);
...
/ / E x e c u t e t h e
$response = curl_exec($curlHandle);
r e q u e s t
This well-intentioned code contains a fatal mistake. cURL’s de-
fault value of CURLOPT_SSL_VERIFYHOST is correctly set to 2. In the
curl_setopt($curlHandle,CURLOPT_SSL_VERIFYHOST, true) call,
true silently turns into 1, overriding the default and instructing
cURL to check the existence of any common name in the certiﬁcate
(Section 4.2), which may or may not match the name requested.
Any PHP code using this Amazon-provided SDK to establish an
SSL connection to the Amazon Flexible Payments Service gateway
is insecure against a man-in-the-middle attack.
ZenCart’s functionality for PayPal IPN shows a profound misun-
derstanding of cURL’s parameters. It disables certiﬁcate validation
entirely, yet attempts to enable hostname veriﬁcation—even though
the latter has no effect if certiﬁcate validation is disabled.
$curlOpts=array( ...
CURLOPT_SSL_VERIFYPEER => FALSE,
CURLOPT_SSL_VERIFYHOST => 2
... );
7.4 Lynx
Lynx is a text-based browser, included in our study because it is
often used programmatically by other software. It relies on GnuTLS
to validate SSL certiﬁcates:
ret = gnutls_certificate_verify_peers2(handle->gnutls_
state, &tls_status);
if (ret < 0) {
int flag_continue = 1;
char *msg2;
if (tls_status & GNUTLS_CERT_SIGNER_NOT_FOUND) {
msg2 = gettext("no issuer was found");
} else if (tls_status & GNUTLS_CERT_SIGNER_NOT_CA) {
msg2 = gettext("issuer is not a CA");
} else if (tls_status & GNUTLS_CERT_SIGNER_NOT_FOUND)
{
msg2 = gettext("the certificate has no known issuer"
);
} else if (tls_status & GNUTLS_CERT_REVOKED) {
msg2 = gettext("the certificate has been revoked");
} else {
44msg2 = gettext("the certificate is not trusted"); }
... }
This code misinterprets the semantics of gnutls_certificate_
verify_peers2. As explained in Section 4.1, this function indeed
sets the tls_status code if certiﬁcate validation fails, but for cer-
tain errors—including self-signed certiﬁcates!—it returns 0. Even
though the above code includes two identical checks for GNUTLS_
CERT_SIGNER_NOT_FOUND, neither check is ever executed when GNU-
TLS_CERT_SIGNER_NOT_FOUND is actually true! In this case hostname
veriﬁcation is correct, but chain-of-trust veriﬁcation is broken.
7.5 Apache HttpClient
The most widely used version of Apache HttpClient is 3.1, re-
leased in 2007. This library, as well as its earlier versions, sets
up SSL connections using JSSE’s SSLSocketFactory without per-
forming its own hostname veriﬁcation (see Sections 4.1 and 4.2).
As a consequence, Apache HttpClient 3.* accepts any certiﬁcate
with a valid chain of trust, regardless of the name. As mentioned in
Section 4.2, the same bug occurs in Weberknecht.
The hostname veriﬁcation bug in HttpClient was ﬁxed in version
4.0-alpha1 [1]. The current version, 4.2.1, has its own hostname
veriﬁer and delegates chain-of-trust veriﬁcation to JSSE. Unfortu-
nately, as we show in Section 8, the existence of a correct imple-
mentation of HttpClient has had little effect on the security of appli-
cations that rely on HttpClient for SSL connection establishment.
Apache HttpClient 4.* involved a major architectural re-design,