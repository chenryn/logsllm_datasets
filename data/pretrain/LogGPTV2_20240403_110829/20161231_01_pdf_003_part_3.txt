trie kd-tree suffixtree
CREATEOPERATORCLASS CREATEOPERATORCLASS CREATEOPERATORCLASS
SPGiSTtrie SPGiSTkdtree SPGiSTsuffix
FORTYPEVARCHAR FORTYPEPOINT FORTYPEVARCHAR
USINGSPGiST USINGSPGiST USINGSPGiST
ASOPERATOR1=, ASOPERATOR1@, ASOPERATOR1@=,
ASOPERATOR2#=, OPERATOR2∧, ASOPERATOR20@@,
ASOPERATOR3?=, OPERATOR20@@, FUNCTION1suffixconsistent,
ASOPERATOR20@@, FUNCTION1kdtree consistent, FUNCTION2suffixpicksplit,
FUNCTION1trieconsistent, FUNCTION2kdtree picksplit, FUNCTION3suffixNNconsistent;
FUNCTION2triepicksplit, FUNCTION3kdtree NNconsistent, FUNCTION4suffixgetparameters;
FUNCTION3trieNNconsistent, FUNCTION4kdtree getparameters;
FUNCTION4triegetparameters;
Table5.Thetrie,kd-tree,andsuffixtreeoperatorclassdefinitions.
trie kd-tree
CREATETABLEworddata( CREATETABLEpoint data(
Index nameVARCHAR(50),idINT); pPOINT,idINT);
creation
CREATEINDEXsptrieindexONworddata CREATEINDEXspkdtree indexONpoint data
USINGSPGiST(nameSPGiSTtrie); USINGSPGiST(pSPGiSTkdtree);
equalityquery regularexpressionquery equalityquery rangequery
Queries SELECT* SELECT* SELECT* SELECT*
FROMworddata FROMworddata FROMpoint data FROMpoint data
WHEREname=‘random’; WHEREname?=‘r?nd?m’; WHEREp@‘(0,1)’; WHEREp∧‘(0,0,5,5)’;
Table6.Thetrieandkd-treeind excreationandquerying.
of the trie operator class (SP-GiST trie), the kd-tree PostgreSQL Engine
operator class (SP-GiST kdtree), and the suffix tree
operator class (SP-GiST suffix) are given in Table 5. PostgreSQL Function Manager
SP-GiST trie, and SP-GiST suffix use the data type
VARCHAR, whereas, SP-GiST kdtree uses the data PostgreSQL SP_Gist_trie SP_Gist_kdtree
Storage Manager Operator class Operator class
typePOINT.
Two examples for creating and querying the trie and SP-Gist SP-Gist
trie SP-Gist kd-tree
kd-tree indexes are given in Table 6. The USING Internal
Methods
clause in the CREATE INDEX statement specifies
the name of the access method to be used, that is
‘SP GiST’ in our case. We then specify the column
name to be indexed, and the corresponding operator Figure 4. SP-GiST architecture inside Post-
class. greSQL.
extensions are loadable modules. That is, SP-GiST
SP-GiST external methods are implemented as a dy-
can be realized inside PostgreSQL without recompil-
namicallyloadablemodulethatisloadedwhenthein-
ingPostgreSQL.Weextendedtheinternalmethodsto
dexisfirstused.
include functions, i.e., PostgreSQL storage interface,
InFigure4, we illustrate the architectureofSP-GiST tocommunicatewiththePostgreSQLstoragemanager
inside PostgreSQL. The implementation of the SP- fortheallocationandretrievalofdiskpages.
GiSTcore(i.e.,internalmethods)isfullyisolatedfrom
the implementation of the SP-GiST extensions (i.e.,
5 New Nearest-Neighbor Search inSP-GiST
externalmethods). Thelinkbetweenthecoreandthe
extensions is achieved through PostgreSQL operator
classes. The communication among the methods is We extendedSP-GiST coreinternalmethodstosupport
throughthePostgreSQLfunctionmanager.Theporta- incremental nearest-neighbor searching. Our extension is
bility is achievedbecause boththe SP-GiST coreand an adaptation of the algorithm in [23]. The outline of the
Insert the root node into the priority queue with minimum distance 0 Externalmethodscode
While (priority queue is not empty) trie kd-tree Pquadtree PMRquadtree
{
No.oflines 580 551 562 602
- Retrieve the top of the queue into P
%oftotallines 8.2 7.8 8.0 8.6
- If (P is an object) Then
- Report P as the next NN to the query object
- Else
Table 7. Number and percentage of external
- Compute the minimum distances between
the query object and P’s children methods’codelines
- Insert P’s children into their proper positions
in the queue based on their distances Search Time Relative Performance
} 175
150
Figure5.GenericNNalgorithmforSP-GiST 125 001
x
100 )eirt/eert-B(
75
algorithmisgiveninFigure5.Thealgorithmprioritizesand 50 Exact Match Performance
visitsthespacepartitionsbasedontheirminimumdistances 25 Prefix Match Performance
fromthequeryobject. Thepartitionsaremaintainedsorted 0
2M 4M 8M 16M 32M
in increasing order of their distances in a priority queue.
Relation Size (No. of Keys)
Initially,thequeuecontainstherootnodewithaminimum
distanceof0.Thealgorithmrecursivelyreplacesthenodeat
Figure 6. The search performance of the B+-
thetopofthequeuebythenode’schildren(insertedintheir
treevs. thepatriciatrie.
properpositionsbasedontheirminimumdistances)untila
databaseobjectreachesthetopofthequeue. Thisobjectis
reportedasthenextNNtothequeryobject. Thealgorithm 6 Experiments
isincrementalandcanbeusedinaquerypipelinesuchthat
every call to the algorithm (get-next) returns the next NN
Our main objective of this paper is not to show the su-
object.
periorityofoneindexstructureovertheotheraswebelieve
that the index performance depends heavily on the nature
Tomakethealgorithmgenericforallspace-partitioning of data and the type of applications. Our objectives are
trees(notonlyforquadtreesandkd-trees),wemodifiedthe todemonstratetheextensibilityofSP-GiSTtorapidlypro-
algorithm. Forexample,inthecaseofatrie,theNNalgo- totype new indexes and to highlight several strengths and
rithmhastoremembertheminimumdistanceoftheparent weaknessesofSP-GiSTindexesoverB+-treeandR-treein-
nodeinordertocomputetheminimumdistanceofthechil- dexes.
dren. TheNN algorithmstorestheminimumdistanceofa We realized the following index structures in Post-
parentinthepriorityqueueandusesittocomputethemin- greSQLusingSP-GiST: a disk-basedpatricia trie, kd-tree,
imum distances of the parents children and stores them in pointquadtree,PMRquadtree,and suffixtree. In Table7,
thepriorityqueueentriesofeachchild. weprovidethenumberandpercentageofcodelinesthatwe
addedtorealizetheseindexstructures. Thetableillustrates
TorealizetheNN searchalgorithminsideSP-GiST,we thattheexternalmethodsthatadeveloperneedstoprovide
added the new internal method NN Search() and the new representlessthan10%ofthetotalindexcoding.Theother
external method NN Consistent(). NN Search() maintains 90%ofthecodeisprovidedastheSP-GiSTcore.
a priority queue by retrieving the top of the queue P, to For the experimental results, we conduct our experi-
either report P as the next NN to the query object if P ments from within PostgreSQL. We compare the perfor-
is a database object or replace P with its child nodes if mance of the SP-GiST trie against the performanceof the
P is an index node. NN Search() is aware of neither the B+-treeinthecontextoftextstringdata. Wealsocompare
index data type nor how the distance function is com- theperformanceoftheSP-GiSTkd-treeandPMRquadtree
puted. NN Consistent() guides the NN Search() method againsttheperformanceoftheR-treeinthecontextofpoint
during the search. NN Consistent() computes and returns andlinesegmentdata,respectively.Wecomparetheperfor-
theminimumdistancesbetweenthequeryobjectandthein- manceofthesuffixtreeagainstsequentialscanningbecause
dexnodesordatabaseobjectssenttoitfromNN Search(). theotheraccessmethodsdonotsupportthesubstringmatch
NN Search() then sorts these nodes and objects based on operations.
theirdistancesandinsertthemintotheirproperpositionsin ForthepatriciatrieversusB+-treeexperiments,wegen-
thepriorityqueue. erate datasets with size ranges from 500K words to 32M
Regular Exp. Search Time Performance
3 Relative Index Size
100
2.5
80 )eirt/eert-B(
001
2
60 x
1.5 )eirt/eert-B(
1 40 01GOL
Search Relative performance
0.5 20 Relative Index Size
0 0
2M 4M 8M 16M 32M 500K 1M 2M 4M 8M 16M 32M
Relation Size (No. of Keys)
Relation Size (No. of Keys)
Figure 7. The regular exp. search of the B+-
Figure 10. The index size of the B+-tree vs.
treevs. thepatriciatrie.
thetrie.
Trie Search Time Standard Deviation
4 Max Tree Node-Height
8
3.5 Series1 7 B-tree
SP-Gist trie
3 6 )sm(
5 thgieH
emiT
2.5 4
xaM
3
2
2
1.5 1
2M 4M 8M 16M 32M 0
Relation Size (No. of Keys) 500K 1M 2M 4M 8M 16M 32M
Relation Size (No. of Keys)
Figure8.Thetriesearchtimestandarddevia-
tion. Figure11.Themaximumtreeheightinnodes.
Insert Time Relative Performance
100 Max Tree Page-Height
5
80
001
4
60 x
)eirt/eert-B( thgieH
3
40
2 xaM
20 Insert RelativePerformance B-tree
1 SP-Gist trie
0
500K 1M 2M 4M 8M 16M 32M 0
No. of Inserted Keys 500K 1M 2M 4M 8M 16M 32M
Relation Size (No. of Keys)
Figure 9. The insert performance of the B+-
treevs. thetrie. Figure12.Themaximumtreeheightinpages.
words. The word size (key size) is uniformly distributed
Insertion and Search Time Relative Performance
overtherange[1,15],andthealphabetlettersarefrom’a’ 350
to ’z’. Our experimentsillustrate that the trie has a better 300
001
search performancethan that of the B+-tree. In Figures 6
250 Point Search x
and7,wedemonstratetheperformanceofthreesearchop- Range Search )eert-dk/eert-R(
200
Insert
erations;exactmatch,prefixmatch,andregularexpression
150