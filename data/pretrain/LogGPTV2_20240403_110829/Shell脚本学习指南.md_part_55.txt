---
## Page 326
314
第10章
$ diff -c test.[12] > test.dif
将相异处的相关内文，存储到test.dif
$ patch  /Gev/nu11 1
awk '[
if (count[$1] == 1) first [$1] = $0
count [$1]++
1f (count[S1] == 2] print first[$1]
if (count[$1] > 1l print $0
sort 1
awk '(
if (last 1= $1) print **
last = $1
print
下面是该程序在GNU/Linux系统下的输出结果：
S shou-identical-files /bin/*
注12：如果你从N个项目中选一个，则有1/N机会被选中。如果选M个项目，则有M(M-1)/2
可能的配对，线到一个相同配对的权会是（M（M-1)/2）/N，针对M而言，该值到选可能性
1/2约是N的平方根。这敢称为生日尊论（birthday paradox）;弥可以在有美曾码学、数
字理论、概率论书格及相关网站中技到有用的信息，也括若干个经过验证的例子。
www.TopSage.com
---
## Page 328
第10章
1
316
网
2df30875121b92767259e89282dd3002/bin/ed
TopSage.com
2df30875121b92767259e89282dd3002/bin/red
43252d689938f4d6a513a2f571786aal/bin/avk
43252d689938f4d6a513a2f571786aa1/bin/gavk-3.1.0
...
由本例可推论ed与red在此系统里为相同一致的程序，尽管根据它们被引用的名称，
可能仍会产生不同的行为模式。
内容一致的文件多半是会彼此连接，特别是当这些文件出现在系统目录下时。show-
identical-files在应用到用户目录下时，可以提供更多有用的信息，因为用户目录
下的文件不大可能是连接，比较可能是用户无意中做的副本。
10.7.4数字签名验证
各种的校验和工具程序都提供单一数字，这是文件的特性，且几乎不可能与具有不同内
容的一个文件的校验和相同。软件发布时，通常会包含分发文件的校验和，这可以让你
方便得知所下载的文件是否与原始文件匹配。不过，单独的校验和不能提供验证
（verification）工作：如果校验和被记录在你下载软件里的另一个文件中，则攻击者可以
恶意地修改软件，然后只要相应地修订校验和即可。
这个问题的解决方案是公钥加密（public-keycryptography）。在这种机制下，数据的安
全保障来自两个相关密钥的存在：一个私密密钥—只有所有者知悉，以及一个公开
密钥一任何人都可得知。两个密钥的其中一个用以加密，另一个则用于解密。公开
密钥加密的安全性，依赖已知的公开密钥及可被该密钥解密的文本，以提供一条没有实
际用途的信息但可被用来恢复私密密钥。这一发明最大的突破是解决了一直以来密码学
上极严重的问题：在需要彼此沟通的对象之间，如何安全地交换加密密钥。
私密密钥与公开密钥是如何使用和运行的呢？假设Alice想对一个公开文件签名，她可
以使用她的私密密钥（privatekey）为文件加密。之后Bob再使用Alice的公开密钥
（publickey）将签名后的文件解密，这么一来即可确信该文件为Alice所签名，而Alice
也无须泄露其私密密钥，就能让文件得到信任。
如果Alice想传送一份只有Bob能读的信给他，她应以Bob的公开密钥为信件加密，之
后Bob再使用他的私密密钥将信件解密。只要Bob妥善保管其私密密钥，Alice便可确
信只有Bob能读取她的信件。
对整个信息加密其实是没有必要的：相对的，如果只有文件的校验和加密，它就等于有
www.TopSage.com
---
## Page 329
文件处理
数字签名（digital signature）了，如来信息本身是公开的，这种方法便相当有用，不过
还需要有方法验证它的真实性。
在GNU Privacy Guard (GnuPG，注 13）与 Pretty Good Privacy (PGP,注 14)里有
相当多工具程序提供公开密钥加密机制。要完整说明这些包需要整本书才够，可到参考
书目中的“安全性与密码学”部分寻找。然而，会使用它们就只为一个重要任务：数字
签名（digitalsignature）的验证。我们仅在此说明GnuPG，因为它还在持续发展中，且
构建较PGP简单，也适用于更多平台。
由于计算机越来越容易遭受攻击，许多的软件存档文件（archive）现在都并人文件校验
和信息的数字签名，以及来自签名者的私密密钠。这也就是为什么了解验证这样的签名
是很重要的原因，如果有签名文件，你应该都要记得验证它。使用GnuPG的方式如下：
S 1e -1 coreut1e-5.0.tar*
-rw-rw-r--1 jones devel 6020616 Apr 2
2003 coreutils-5.0.tar-gz
星示分发文件
-rw-rw=r--1 jones devel65 Apr 2 2003 coreuti1s-5.0.tar.gz.sig
S gpg coreutils-5.0.tar.gz.sig
IV80 aI Aox vso 5uren Lsx c00e 8s192=#t t adv pen apeu e1nqeu51s :5d6
会试验证此签名
gpg: Can’t check signaturei public key not found
签名验证失败，是因为我们还未将签名者的公开密钥加人9D9密钥环。如果我们知道谁
对文件执行签名，我们就可以在签名者的个人网站上找到公开密钥，或是通过email向
签名者要求一份密钥。然面，我们在这里拥有的就只有密钥ID的信息。幸好使用数字签
名的人多半会将它们的公开密钥注册到第三方（thrid-party）的公开密钥服务器（public-
keyserver)，且该注册会自动地提供给其他的密钥服务器其享。几个主要的站点列于表
10-2，你也可以自查找引擎找到更多数据。你可以复制一份公开密钥，以提升安全性：
如果密钥服务器不能用或毁损，便能轻松切换成另一个，
.表10-2：主要的公开密钥服务器
比利时
http://www.keyserver.net/en/
德国
http://math-www.ani-paderborn.de/pgp/
德国
http:/pgp.zdv.uni-mainz.de/keyserver/pks-commands.html#extract
英国
htp://www.cl.cam.ac.uk/PGP/pks-commands.html#extracr
美国
http://pgp.mit.edu/
注 13:ftp://ftp.gnapg.org/gcrypt/gnapg/ 与 http://www.gmupg.org/,
注 14:htp://web.mir.edw/nerwork/pgp.htiml,
www.TopSage.com
---
## Page 330
318
第10章
在网页浏览器上造访这些密钥服务器，在查找栏里输人密钥ID0xD333CBA1（前面的0x
是强制性的），并得到这样的报告：
ype bite/xeyIDDate
User ID
pub  1024D/D333c8A1 1999/09/26 Jim Meyering  5ureex u. Xax orrqnd 1teccca Xex 15d6
gDg: Total nunber processed: 1
9P9:
inported: 1
现在，就可以成功地验证签名了：
S gpg coreutfla-5.0.tar.gz.aig
T a1 Aax v9 um 18 c002 85192 z 2dy pa apeu a1es 15d6
验证数字签名
15d6
aka *Jim Meyering PI:EMAIL -gov>*
9P91
gPg:
aka *Jim Meyering cneyeringelucent.com>*
 fuxa/eg wtr。 exe
9P9:
gpg: checking the trustdb
gpg: checking at depth 0 signed=0 ot(-/q/n/m/f/u) =0/0/0/0/0/1
9Pg: next trustdb check due at 77??-777?
1DdB
There La no indication that the signature belongs to the owmer,
咸功验证中的警告信息简单扼要地告诉你：你仍未认证签名者密钥确实是属于他的，除
非你私下认识签名者，并有很好的理由相信这个密钥是有效的，否则你不应认证此密钥。
攻击者可以修改再重新包装分发包，但不知道签名者的（秘密）私密密钥，数字签名不
能被重新产生，且gpg会发现此攻击：
S 1e -1 coreutila-5.0.tar.gz
列出湿惠意像改的存档文件
www.TopSage.com
---
## Page 331
文件处理
com
$gpg coreutila-5.0.tar.gz.aig
试着验证数字签名
数字签名确保你站点里的文件匹配于远端站点中已准备妥且完成签名的那个文件。当然，
当签名被验证时，在签名者系统上软件包装成包分发之前，就已经道受到未侦测出的攻
击是无法被显现出来的。安全性永远不可能是百分百完美。
你不一定要使用网页浏览器取得公开密钥：GNU的wget工具程序（注15）可以帮你完
成这件事，前提是你必须先找出特定密钥服务器所预期的URL语法。例10-3的脚本可
以让密钥的取得更容易，还会提醒你如何将公开密钥加入到你的密钥环中。
例10-3：自动化公开密钥的取得
自密钥服务器取得一个或多个PGP/GPG密钥
#1/bin/sh -
语法：
getpubkey key-ID-1 key-ID-2 ..
IFS='
PATH=/usr/local/bin:/usr/bin:/bin
export PATH
for f in *se*
do
g=0xecho $f 1sed -e s/~0x//
tmpfi1e=/tmp/pgp-Sg.tmp.$s
确保字首为0x
vget -q -0 - "http://pgp.mit,edu:11371/pks/1ookup?op=get&search=Sg* > Stmpfi1e
1s -1 stnpfile
echo*Try!
pgp -ka $tnpfile*
echo·
echo *
popopg -ka Stmpf11e*
done
rm -f Stnpfile*
使用范例如下：
-rv-rw-r--1 jones jones 4567Apr 6 07:26/tmp/pgp-0xD333cBA1.tmp.21649
Sgetpubkey D333cBA1
取得密朝ID为D333CBA1的公开密钥
Try:
Pgp -ka /tap/pap-0xD333CBA1.tmp.21643