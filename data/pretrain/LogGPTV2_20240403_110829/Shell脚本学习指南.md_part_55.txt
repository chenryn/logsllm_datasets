---
## Page 326
### 第10章

使用 `diff` 命令来比较两个文件，并将差异存储到 `test.dif` 文件中：
```bash
$ diff -c test.1 test.2 > test.dif
```

以下的 `awk` 脚本用于处理文件内容，找出并打印出每个唯一项及其第一次出现的行：
```bash
awk '{
    if (count[$1] == 1) first[$1] = $0;
    count[$1]++;
    if (count[$1] == 2) print first[$1];
    if (count[$1] > 1) print $0;
} END {
    for (i in count) if (count[i] > 1) print i, count[i];
}' file.txt | sort
```

在GNU/Linux系统下运行该脚本的输出结果如下：
```bash
$ sh-identical-files /bin/*
```

注释 12：如果你从N个项目中选择一个，则有1/N的机会被选中。如果选择M个项目，则有M(M-1)/2种可能的配对。找到相同配对的概率为（M(M-1)/2）/N。当M接近N的平方根时，这个概率大约是1/2。这被称为生日悖论（birthday paradox）。你可以在密码学、数论和概率论的相关书籍及网站上找到更多相关信息和验证示例。

---

## Page 328
### 第10章

以下是通过校验和识别的同一系统中的相同文件：
```bash
2df30875121b92767259e89282dd3002/bin/ed
2df30875121b92767259e89282dd3002/bin/red
43252d689938f4d6a513a2f571786aal/bin/avk
43252d689938f4d6a513a2f571786aa1/bin/gavk-3.1.0
...
```

尽管 `ed` 和 `red` 在此系统中具有相同的校验和，但根据它们的引用名称，可能会表现出不同的行为模式。通常情况下，具有相同校验和的文件会彼此链接，尤其是在系统目录中。然而，在用户目录下，这些文件更可能是无意中创建的副本。

#### 10.7.4 数字签名验证

各种校验和工具提供了一个唯一的数字，这是文件的特征，几乎不可能与其他内容不同的文件的校验和相同。软件发布时，通常会包含分发文件的校验和，以确保下载的文件与原始文件匹配。但是，单独的校验和不能提供验证：如果校验和文件也被篡改，攻击者可以修改软件并相应地更新校验和。

解决这个问题的方法是公钥加密（public-key cryptography）。在这种机制下，数据的安全性依赖于两个相关的密钥：一个是只有所有者知道的私钥，另一个是可以公开的公钥。其中一个密钥用于加密，另一个用于解密。公钥加密的安全性在于，即使已知公钥和可解密的文本，也无法恢复私钥。这一发明解决了长期以来密码学上的一个重要问题：如何在需要通信的各方之间安全地交换加密密钥。

假设Alice想对一个文件进行签名，她可以使用她的私钥对该文件进行加密。Bob可以通过使用Alice的公钥来解密签名后的文件，从而确认该文件确实是由Alice签名的，而无需泄露Alice的私钥。

如果Alice想发送一封只有Bob能读取的信件，她可以用Bob的公钥对信件进行加密，然后Bob再使用他的私钥解密。只要Bob妥善保管其私钥，Alice就可以确信只有Bob能够读取她的信件。

实际上，没有必要对整个信息进行加密。相反，如果只对文件的校验和进行加密，就相当于有了数字签名。这种方法对于公开的信息非常有用，但仍需方法验证其真实性。

GNU Privacy Guard (GnuPG) 和 Pretty Good Privacy (PGP) 提供了许多支持公钥加密的工具。要详细了解这些工具，可以参考相关书籍。这里仅介绍如何使用GnuPG进行数字签名验证，因为它仍在持续发展中，构建简单且适用于多个平台。

由于计算机越来越容易受到攻击，许多软件存档现在都包含了文件校验和信息的数字签名，以及来自签名者的私钥。因此，了解如何验证这样的签名非常重要。使用GnuPG进行验证的方法如下：

```bash
$ ls -l coreutils-5.0.tar*
-rw-rw-r-- 1 jones devel 6020616 Apr 2 2003 coreutils-5.0.tar.gz
-rw-rw-r-- 1 jones devel 65 Apr 2 2003 coreutils-5.0.tar.gz.sig

$ gpg coreutils-5.0.tar.gz.sig
gpg: Signature made Mon Apr 2 12:00:00 2003 CEST using DSA key ID 0xD333CBA1
gpg: Can't check signature: public key not found
```

签名验证失败是因为我们还没有将签名者的公钥添加到GPG密钥环中。如果我们知道谁对文件进行了签名，我们可以在签名者的个人网站上找到公钥，或者通过电子邮件向签名者请求一份密钥。在这里，我们只有密钥ID的信息。幸运的是，使用数字签名的人通常会将其公钥注册到第三方公钥服务器上，这些服务器会自动共享信息。几个主要的站点列于表10-2，你也可以通过搜索引擎找到更多信息。

### 表10-2：主要的公钥服务器
- 比利时: http://www.keyserver.net/en/
- 德国: http://math-www.uni-paderborn.de/pgp/
- 德国: http://pgp.zdv.uni-mainz.de/keyserver/pks-commands.html#extract
- 英国: http://www.cl.cam.ac.uk/PGP/pks-commands.html#extract
- 美国: http://pgp.mit.edu/

你可以通过访问这些密钥服务器并在搜索栏中输入密钥ID（例如0xD333CBA1），获取相应的公钥。成功导入后，即可验证签名：

```bash
$ gpg coreutils-5.0.tar.gz.sig
gpg: Signature made Mon Apr 2 12:00:00 2003 CEST using DSA key ID 0xD333CBA1
gpg: Good signature from "Jim Meyering <jim@gnu.org>"
gpg:                 aka "Jim Meyering <meyering@redhat.com>"
Primary key fingerprint: A1A2 A3A4 A5A6 A7A8 A9AA B1B2 B3B4 B5B6 B7B8 B9BA
```

成功验证中的警告信息简洁地告诉你，你仍未认证签名者的密钥确实是属于他的。除非你私下认识签名者，并有充分的理由相信这个密钥是有效的，否则你不应认证此密钥。攻击者可以修改并重新打包分发包，但如果不知道签名者的私钥，数字签名无法重新生成，GPG会发现这种攻击。

当然，即使签名被验证，也无法保证在签名者系统上软件打包分发之前没有受到未检测到的攻击。安全性永远不可能是百分之百完美的。

你不必使用网页浏览器来获取公钥。GNU的wget工具程序可以帮助你完成这件事，前提是你必须先找出特定密钥服务器所预期的URL语法。例10-3的脚本可以使密钥的获取更容易，并提醒你如何将公钥添加到你的密钥环中。

### 例10-3：自动化公钥的获取
从密钥服务器获取一个或多个PGP/GPG密钥
```bash
#!/bin/sh
IFS='
PATH=/usr/local/bin:/usr/bin:/bin
export PATH

for f in "$@"
do
    g=0x$(echo $f | sed -e 's/^0x//')
    tmpfile=/tmp/pgp-$g.tmp.$$
    wget -q -O - "http://pgp.mit.edu:11371/pks/lookup?op=get&search=0x$g" > $tmpfile
    if [ -s $tmpfile ]; then
        echo "Try:"
        gpg --import $tmpfile
    else
        echo "Failed to get key $g"
    fi
    rm -f $tmpfile
done
```

使用范例如下：
```bash
$ ./getpubkey D333CBA1
Try:
gpg: key 0xD333CBA1: public key "Jim Meyering <jim@gnu.org>" imported
gpg: Total number processed: 1
gpg:               imported: 1
```

---

希望这些优化使文本更加清晰、连贯和专业。如果有任何进一步的调整需求，请告诉我！