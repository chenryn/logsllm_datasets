$ ./fb-rotate -d 0x4248edd -r 90 # rotates given display by 90 degrees
$ ./fb-rotate -d 0x4248edd -r 0 # restores to original
10.7.2. Accessing Framebuffer Memory
We saw how to access the contents of framebuffer memory through the diagnostics system call interface in
Section 6.8.8.2. The Quartz Services function CGDisplayBaseAddress() returns the base address of a
display's framebuffer. Given this address, the framebuffer memory can be read or written using the read()
and write() system calls, respectively.
Quartz Services
As we saw in Chapter 2, the majority of what constitutes the windowing and graphics system of
Mac OS X is collectively referred to as Quartz. The Quartz Services API provides a set of low-
level window server features. In particular, display hardware can be accessed and manipulated
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh4BFC.h... 20.08.2007
Chapter 10. Extending the Kernel Page 43 of 79
through this API.
Figure 1024 shows a program that dumps the entire contents of a given display's framebuffer to a file. It
assumes 32 bits per pixel. The contents can be converted to a viewable image using the same approach as in
the screenshot-capturing example from Section 6.8.8.2. Note that the program uses the listDisplays()
function from Figure 1023.
Figure 1024. Accessing framebuffer memory
// fb-dump.c
#include 
#include 
#include 
#define PROGNAME "fb-dump"
#define DUMPFILE_TMPDIR "/tmp/"
#define DUMPFILE_TEMPLATE "fb-dump.XXXXXX"
...
int
main(int argc, char * argv[])
{
int i, saveFD = -1;
char template[] = DUMPFILE_TMPDIR DUMPFILE_TEMPLATE;
uint32_t width, height, rowBytes, rowUInt32s, *screen;
CGDirectDisplayID targetDisplay = 0;
// populate targetDisplay as in Figure 1023
// use listDisplays() from Figure 1023
...
screen = (uint32_t *)CGDisplayBaseAddress(targetDisplay);
rowBytes = CGDisplayBytesPerRow(targetDisplay);
rowUInt32s = rowBytes / 4;
width = CGDisplayPixelsWide(targetDisplay);
height = CGDisplayPixelsHigh(targetDisplay);
if ((saveFD = mkstemp(template)) 
#include 
#include 
#define PROGNAME "lsfirmware"
void
printDictionaryAsXML(CFDictionaryRef dict)
{
CFDataRef xml = CFPropertyListCreateXMLData(kCFAllocatorDefault,
(CFPropertyListRef)dict);
if (xml) {
write(STDOUT_FILENO, CFDataGetBytePtr(xml), CFDataGetLength(xml));
CFRelease(xml);
}
}
int
main(void)
{
io_registry_entry_t options;
CFMutableDictionaryRef optionsDict;
kern_return_t kr = KERN_FAILURE;
options = IORegistryEntryFromPath(kIOMasterPortDefault,
kIODeviceTreePlane ":/options");
if (options) {
kr = IORegistryEntryCreateCFProperties(options, &optionsDict, 0, 0);
if (kr == KERN_SUCCESS) {
printDictionaryAsXML(optionsDict);
CFRelease(optionsDict);
}
IOObjectRelease(options);
}
if (kr != KERN_SUCCESS)
fprintf(stderr, "failed to retrieve firmware variables\n");
exit(kr);
}
$ gcc -Wall -o lsfirmware lsfirmware.c -framework IOKit \
-framework CoreFoundation
$ ./lsfirmware # PowerPC
...
boot-command
mac-boot
boot-device
hd:,\\:tbxi
...
$ ./lsfirmware # x86
...
SystemAudioVolume
cg==
efi-boot-device
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh4BFC.h... 20.08.2007
Chapter 10. Extending the Kernel Page 45 of 79
...
10.7.4. Retrieving Information about Loaded Kernel Extensions
We can retrieve information about loaded kernel extensionsa list of kmod_info_t structuresusing the
kmod_get_info() routine that is part of the Mach host interface. Figure 1026 shows a program that
retrieves and displays this information.
Figure 1026. Retrieving information about loaded kernel extensions
// lskmod.c
#include 
#include 
int
main(void)
{
kern_return_t kr;
kmod_info_array_t kmods;
mach_msg_type_number_t kmodBytes = 0;
int kmodCount = 0;
kmod_info_t *kmodp;
mach_port_t host_port = mach_host_self();
kr = kmod_get_info(host_port, (void *)&kmods, &kmodBytes);
(void)mach_port_deallocate(mach_task_self(), host_port);
if (kr != KERN_SUCCESS) {
mach_error("kmod_get_info:", kr);
return kr;
}
for (kmodp = (kmod_info_t *)kmods; kmodp->next; kmodp++, kmodCount++) {
printf("%5d %4d %-10p %-10p %-10p %s (%s)\n",
kmodp->id,
kmodp->reference_count,
(void *)kmodp->address,
(void *)kmodp->size,
(void *)(kmodp->size - kmodp->hdr_size),
kmodp->name,
kmodp->version);
}
vm_deallocate(mach_task_self(), (vm_address_t)kmods, kmodBytes);
return kr;
}
$ gcc -Wall -o lskmod lskmod.c
$ ./lskmod
...
27 0 0x761000 0x5000 0x4000 com.apple.driver.AppleRTC (1.0.2)
26 0 0x86a000 0x3000 0x2000 com.apple.driver.AppleHPET (1.0.0d1)
25 0 0x7f6000 0x4000 0x3000 com.apple.driver.AppleACPIButtons (1.0.3)
24 0 0x7fa000 0x4000 0x3000 com.apple.driver.AppleSMBIOS (1.0.7)
...
10.7.5. Retrieving Accelerometer Data from the Sudden Motion Sensor
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh4BFC.h... 20.08.2007
Chapter 10. Extending the Kernel Page 46 of 79
Apple added a feature called the Sudden Motion Sensor (SMS)[11] to the PowerBook line of computers in
early 2005.[12] Eventually, the feature was added to all Apple notebook computers. The sensor is used as
part of a mechanism for attempting to prevent data loss by parking the heads of an active disk drive after
detecting a sudden motion.
[11] The SMS is also called the Mobile Motion Module or the Apple Motion Sensor (AMS).
[12] IBM had been offering a conceptually identical feature in ThinkPad notebooks before
Apple introduced the SMS. The ThinkPad sensor can be programmatically accessed as well.
The Background behind the Sudden Motion Sensor
In modern disk drives, the "flying height" between a platter and a head is very small. This
increases the possibility of a disturbed head colliding with a platter. Modern drives support
parking their heads in a safe position under various circumstances. In particular, heads are
automatically parked when the system is powered off or is asleep. SMS adds the ability to park
the heads in the event of an accidental drop, strong vibrations, or other accelerated movement.
The mechanism works by using a tri-axis accelerometer to detect sudden motion. When the
threshold for emergency action is reachedsay, because of a shock or free fallan interrupt is
generated. In processing this interrupt, the SMS driver (such as IOI2CMotionSensor.kext,
PMUMotionSensor.kext, or SMCMotionSensor.kext) may send a "park" command to the disk
drive, thereby reducing the possibility of damage to the drive on impact. Conversely, when the
SMS detects that the computer is once again level and not under acceleration, it unlocks the
drive heads so that the system can continue to use the disk normally.
On some models, the accelerometer is an integrated feature of the main logic boardspecifically,
an Inter-Integrated Circuit (I2C) device[13] that is not tied to a specific disk drive. Typically,
such an accelerometer uses a silicon sensor based on integrated microelectromechanical
systems (iMEMS) technology. Acceleration or inclination causes an electrical property (say,
capacitance) of the sensor to be altered. The sensor's interface can then translate these tiny
changes to present them as acceleration readings.
It is interesting to note that depending on your working environment, the default sensitivity of
the SMS may be too aggressive. For example, loud musicperhaps music with rather high bass
and the consequential vibrationscan activate SMS undesirably. If the computer in question is
itself involved in the generation or recording of such music, this may cause unacceptable
interruptions. The mechanism can be disabled using the pmset power management
configuration utility.
[13] Philips developed the I2C bus in the early 1980s. I2C is a multimaster control bus using
which various ICs in a system can communicate with each other. It uses only two control lines
and has a software-defined protocol.
The SMS driver implements an I/O Kit user client, which allows several types of operations to be performed
from user space, such as:
Querying miscellaneous information such as vendor, version, and status
Retrieving and setting sensitivity
Resetting the hardware
Retrieving orientation values
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh4BFC.h... 20.08.2007
Chapter 10. Extending the Kernel Page 47 of 79
The orientation values consist of a triplet (x, y, z) that is related to the acceleration vector acting on the
computer. The individual components of this vector change when external acceleration is applied to the
computer (such as in a sideways sudden motion) or when the computer is rotated (thereby changing the
angle of the gravity vector). Note the following points regarding the vector's components.
 The value of x is zero when the computer's bottom is parallel to the ground and it is not under lateral
acceleration along its long edge. Rotating the computer's base around an axis parallel to its short edge
changes the value of x.
 The value of y is zero when the computer's bottom is parallel to the ground and it is not under lateral
acceleration along its short edge. Rotating the computer's base around an axis parallel to its long edge
changes the value of y.
 The value of z changes when the computer is rotated such that its bottom does not remain in the
horizontal plane.
A perfectly calibrated SMS accelerometer would read (0, 0, 0) when the computer is in free fall in a
vacuum.
In practice, an SMS unit may not be calibrated perfectly, and different units may have different calibrations.
For example, the x and y values reported by the SMS hardware may not be zeros when the computer is
parallel to the ground. Moreover, depending on the surroundings and the configured sensitivity of the
hardware, minor fluctuations may be seen even when there is no perceptible movement of the computer.
Let us now see how to retrieve orientation data by communicating with the SMS driver. To invoke a user
client method, we need to know the method's identifier and the types of its parameters.
$ cd /System/Library/Extensions/IOI2CMotionSensor.kext/Contents/MacOS
$ nm IOI2CMotionSensor | c++filt
...
00003934 T IOI2CMotionSensor::getOrientationUC(paramStruct*, paramStruct*,
unsigned long, unsigned long*)
...
Since the getOrientationUC() method is exported by the user client, its address0x3934 in this casemust
also appear in the array of IOExternalMethod structures within the driver executable. The position of the
structure within the array will give us the index of the method, whereas the structure's contents will indicate
the sizes of the structures we need to provide while calling the method.
// iokit/IOKit/IOUserClient.h
struct IOExternalMethod {
IOService *object;
IOMethod func;
IOOptionBits flags;
IOByteCount count0;
IOByteCount count1;
};
Figure 1027 shows the contents of the IOExternalMethod structure corresponding to getOrientationUC
(). The index of this particular structure in the method array can be different based on the driver version.
Although not shown in the figure, in this case (version 1.0.3 of both IOI2CMotionSensor and
PMUMotionSensor), the index is 21. The index is 5 for SMCMotionSensor.
Figure 1027. Relevant contents of the IOExternalMethod structure corresponding to getOrientationUC()
[View full size image]
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh4BFC.h... 20.08.2007
Chapter 10. Extending the Kernel Page 48 of 79
Note in Figure 1027 that the value of flags is kIOUCStructIStructO, which means that the method has
one structure input parameter and one structure output parameter. The count0 and count1 values, which are
60 bytes each (40 bytes for SMCMotionSensor), represent the sizes of the input and output structures,
respectively. We can invoke such a method using the IOConnectMethodStructureIStructureO() function
from the I/O Kit framework, which provides this function and other similar functions (such as
IOConnectMethodScalarIStructureO()) to pass untyped data across the user-kernel boundary.
kern_return_t
IOConnectMethodStructureIStructureO(
io_connect_t connect, // acquired by calling IOServiceOpen()
unsigned int index, // index for kernel-resident method
IOItemCount structureInputSize, // size of the input struct parameter
IOByteCount *structureOutputSize, // size of the output structure (out)
void *inputStructure, // pointer to the input structure
void *ouputStructure); // pointer to the output structure
In this case, we are interested only in the output structure, the first three bytes of which contain the x, y, and
z values.[14] We can define the output structure as follows:
[14] Note that these values are not raw acceleration valuesthey have been processed before we
receive them. Nevertheless, they will change in direct correspondence to the computer's
movement.
typedef struct {
char x;
char y;
char z;
// filler space to make size of the structure at least 60 bytes
pad[57];
} SuddenMotionSensorData_t;
First, we need to create a connection to the appropriate IOService instance. Figure 1028 shows the function
that looks up the service and requests a connection to it.
Figure 1028. Opening a connection to the motion sensor service object
static io_connect_t dataPort = 0;
kern_return_t
sms_initialize(void)
{
kern_return_t kr;
CFDictionaryRef classToMatch;
io_service_t service;
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh4BFC.h... 20.08.2007
Chapter 10. Extending the Kernel Page 49 of 79
// create a matching dictionary given the class name, which depends on
// hardware: "IOI2CMotionSensor", "PMUMotionSensor", "SMCMotionSensor" ...
classToMatch = IOServiceMatching(kTargetIOKitClassName);