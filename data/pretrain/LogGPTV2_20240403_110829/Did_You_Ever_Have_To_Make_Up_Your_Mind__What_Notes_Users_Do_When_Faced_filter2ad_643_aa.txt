title:Did You Ever Have To Make Up Your Mind? What Notes Users Do When Faced
With A Security Decision
author:Mary Ellen Zurko and
Charlie Kaufman and
Katherine Spanbauer and
Chuck Bassett
Did You Ever Have To Make Up Your Mind?
What Notes Users Do When Faced With A Security Decision
Mary Ellen Zurko
IBM Software Group IBM Software Group IBM Software Group IBM Software Group
PI:EMAIL
Katherine Spanbauer Chuck Bassett
Charlie Kaufman
Abstract
Designers are often faced with difficult
tradeoffs
between easing the user's burden by making security
decisions for them and offering features that ensure that
users can make the security decisions that are right for
them and their environment. Users often do not understand
enough about the impact of a security decision to make an
informed choice. We report on the experience in a 500-
person organization on the security of each user's Lotus
Notes client against unsigned active content. We found that
the default configuration of the majority of users did not
allow unsigned active content to run. However, we found
that when presented with a choice during their work flow,
many of
those otherwise secured users would allow
unsigned active content to run. We discuss the features
that are in Lotus Notes that provide security for active
content and that respond to the usability issues from this
study.
1. Introduction
decisions
about what
Applications writers and software developers are often
design
security
faced with
to provide, how those mechanisms are
mechanisms
presented to the various types of users, and what policies
are possible, are privileged, and are shipped by default
with those mechanisms. Powerful new features can often
present a tradeoff between staying out of the user's way
while they do their work and providing minimal protection
if the features are used maliciously, or making sure that
nothing potentially dangerous happens unless someone on
site (user, administrator) has determined that the specific
situation poses an acceptable risk. Features are often
shipped with settings that allow for either choice, but the
default settings still need to be chosen. For example, in
the month on security
February 2002, Microsoft spent
related activities
in
security-related options from open to secured [2].
included changing defaults
that
It's hard to figure out if something is safe or not. For
example, it is convenient for an email message to include
buttons so the recipient can RSVP with a 'yes' or 'no'
response, but a fully general capability to automatically
generate and send email can be used to spread viruses and
compromise the recipient's privacy. The more general
purpose a feature is, the harder it is to determine whether it
is safe. In our example case of sending an email message,
the system can compare the source of the original email
message with the destination of any email it tries to send,
and whether the contents of the email is hard coded or
dynamically generated, as inputs to the decision process,
but there will always be a gray area. If the mail message is
trying to send a message back to its original sender (and
both the address of the original sender and the potential
recipient are verifiable), if the contents of that message is
hard coded, and if the active content in the button has not
accessed any information outside of the originally sent
message, then it is probably safe. Other variations might
also be safe. If the principal is both the current user and the
signed code signer, the operation is probably trustworthy.
Dynamically composed mail messages may be considered
safe if they are displayed to the user before they are sent,
but there can be problems with that as well, such as white
on white font, information that doesn't make sense (bit
level
information, encrypted information), and hidden
coded information (steganography).
the failure either
If the system detects something dangerous, it has a
number of choices. It can ignore the danger and proceed, it
can disallow the action silently, it can disallow the action
and report
to a user or a system
administrator (perhaps via a log file), or it can ask the user
what to do. If the application designer can't write code that
figures out whether an action is proper or improper, he has
to leave open multiple of these options and pass the buck
to the system administrator
for
example, which sources of instructions should be trusted).
If the system administrator can't figure out what's proper
that
and manipulate configuration settings to reflect
(who might know,
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:13:27 UTC from IEEE Xplore.  Restrictions apply. 
judgement, he has to either leave the system unsafe or
dysfunctional, or leave the decision to the user. If the
default setting is unsafe, the system administrator is likely
to leave it that way because it generates no complaints. It
would be highly unusual for the user to have enough
information to determine whether the action is proper or
not. The warning box might as well say "Do you feel
lucky?". Users are likely to feel that if they are being given
an option,
then the application designer and system
administrator must have already concluded that it is safe to
proceed. Especially if they are being asked - in effect -
whether they want to do their job unsafely or not do it at
all.
Within that context, this paper discusses the results of a
user study conducted just after the default security setting
on an active content protection mechanism was changed
from “open” to “secured.” The next section discusses that
feature and the short-term impact on development when
the default was changed. Section 3 covers how the user
study was run. Section 4 describes the results of the study,
and discusses the implications and reactions. Section 5
outlines changes in the next release related to the problems
uncovered as a result of securing the defaults, and those
uncovered as a result of running the user study itself.
Section 6 covers related work, and the final section
summarizes all of the conclusions
in this paper and
touches on potential future work in this area.
2. Lotus Notes Execution Control Lists
Lotus Notes is a platform for distributed applications, of
which email and discussion forums are examples. As with
web browsers, there is an expectation that users can visit
and interact with sites (or databases in Notes parlance)
safely, meaning that even if those sites are mismanaged
they cannot corrupt the user's private data or interactions
with other sites. It is useful, however, to be able to use this
mechanism to do unsafe operations,
like upgrading
software on the workstation or composing and sending
email messages based on filling out a form. These same
techniques, however, can be used to steal user data or
spread viruses if the application is not trustworthy. With
both Lotus Notes and browsers,
this is done with a
combination of
configuration deciding certain
operations should proceed without warnings and pop up
dialogs asking users whether to override the defaults.
Lotus Notes takes advantage of its built in public key
infrastructure to digitally sign potentially dangerous active
content so that trust decisions can be based on who created
it rather than what server it is fetched from. This concept is
particularly powerful in the context of email, where all of
the email comes from the user's mailbox, but trust of its
contents is based on the signature of the sender.
local
Execution Controls Lists (ECLs) were introduced in
Lotus Notes version R4.5 to provide client-side security
controls for the execution of potentially dangerous active
content in the languages supported by the Notes client:
LotusScript and @ formulas, Java, and Javascript. Active
content in any of those forms can be embedded in either
the design of a database and its documents (the forms), or
in a document instance itself. A Notes signature is attached
to the embedded active content, consisting of a hash of the
active content, the hash signed with the private key of the
person embedding it, and the certificate(s) associating the
private key's corresponding public key with the name of
the signer.
Each Notes client user has a Execution Control List
(ECL). For each of the three active content languages, it
lists the signers to which the user grants active content
permissions, and the permissions granted. For example, in
Figure 1, LotusScript or @ formulas signed by Jane
Done/SoftwareHouse can read and write information in the
database in which the active content is running and access
environment variables. Java and Javascript execution
controls are set and viewed on other panes of the ECL
dialog box. Permissions can be added or removed from
any signing identity, even the ones that are shipped with
permissions,
as
Template
Development/Lotus Notes.
Notes
Lotus
such
A new user's ECL is initialized in two places. It
includes the entries from the Administrative ECL set on
the user’s home server, which specifies the signers that are
trusted by the site administration. It also includes the
default permissions required by Lotus Notes and Lotus
companion products:
•
•
The "-No Signature-"
entry specifies
permissions given to unsigned active content.
The "-Default-" entry specifies permissions given
to active content with a signature that can be
verified when the
appear
elsewhere on the user's ECL.
signer does not
the
These two entries are the only ones that cannot be
removed from the ECL. The permissions for any entry can
be modified (enabled or disabled).
The Refresh button on a user's ECL updates that ECL
with the current information from the administrative ECL.
Each entry in the administrative ECL is added to the user's
ECL, or overwrites the existing entry on the user's ECL if
an entry with the same name already exists.
When active content
running in the Notes client
attempts a protected operation that
requires an ECL
permission, such as creating a new document in the current
database, a check for the appropriate permission is made.
If
the active content
continues running. If it doesn't, the user is prompted with
an Execution Security Alert (ESA) indicating the action
the code is attempting, who signed it, and the permission is
required to complete the operation.
the signer has the permission,
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:13:27 UTC from IEEE Xplore.  Restrictions apply. 
Figure 1: Lotus Notes Execution Control List
In Figure 2, a piece of active content signed by Lotus
Notes Template Development/Lotus Notes (according to a
public key certificate signed by the Notes CA) is calling
the GetProfileField command to get a field from a profile
document in the current database. That operation requires
the "Access to current database" permission. The user can
chose to abort that call (the default), execute the call this
one time, or give the required permission to the signer in
their ECL. The exception is those users who are not
allowed to modify their own ECL (an option specified in
the Administrative ECL) can only choose Abort.
Figure 2: Execution Security Alert (ESA)
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:13:27 UTC from IEEE Xplore.  Restrictions apply. 
In R5.02 IBM began shipping tight defaults on ECLs.
Originally, ECLs were initialized with all permissions
given to the -No Signature- and -Default- entries. Sites
could tighten that default for their users by removing
permissions on those entries in the Administrative ECL.
Not many did. Sites who tried to deploy tight ECL defaults
found problems -- both in the features available for
deployment and in some bugs. Since the initial defaults on
ECLs were open, new features in product development
were tested with them open. Some new features introduced
bugs that would only be noticed when unsigned code was
not allowed to execute. Committing to ship with secure
ECL defaults meant a commitment to rapidly fix the bugs
that appeared as a result of those defaults.
3. The User Study
With the change to shipping secure ECL defaults, any
new users would get them automatically (unless their site
administrator overrode them). The propagation of these
defaults to existing users with the R5 features was more
problematic. We were particularly concerned that as many
users as possible begin running with no permissions given
to unsigned active content as soon as they received the
software update. We ran a pilot study at a small company
that does Notes-related development (which we will call
SoftwareHouse)
deployed properly with R5.02 features.
to find out
if
tight ECLs could be
First,
included
the site Administrative ECL defaults were
secured. Then, a prestigious SoftwareHouse security
maven sent an email announcement to a list that included
everyone in the company. It
a button for
recipients to click in order to tighten their ECLs. The
action of the button caused the the new administrative
defaults
to be merged into the user's ECL. The
announcement included an extensive explanation of how
the security of in-house ECLs was being tightened. It also
provided an example of an unsigned Execution Security
Alert, explaining the potential danger it could represent,
and gave instructions about how to handle it safely and to
whom to report it.
state of ECLs
to obtain data on the
Three months later, we used active content in a survey
email
in
SoftwareHouse. The active content is shown in Figure 3.,
and was associated with the Postopen event of the design
(form) of the survey mail message. It creates a mail
message (document) to send. The creation of the document
(Dim doc As New notesdocument (db)) calls a protected
operation, since it accesses the current database. The mail
message is then set
to be sent back to the person
conducting the survey (Jane Doe/SoftwareHouse). The
actual sending of the document (doc.send) calls a second
protected
operation.
Sub Postopen(Source As Notesuidocument)
On Error Resume Next
Dim current As String
current$ = Time$()
Dim sess As New notessession
Dim db As notesdatabase
Set db = sess.currentdatabase
Dim doc As New notesdocument(db)
doc.SendTo="Jane Doe/SoftwareHouse"
doc.Subject = "I allow unsigned code to execute on my workstation " + current + "; "
+ Time$()
Call doc.send(False)
End Sub
Figure 3: Survey LotusScript Active Content
The mail message has two timestamps in the subject
line. The first is the time taken before the first protected
operation is called. The second time stamp is after that. If
the call to the protected operation does not generate an
alert, the difference in the timestamps will be minimal (0 -
1 seconds). If the call does generate an alert, it will require
user interaction, and the difference in the timestamps will
be 2 seconds or more. If the mail message is sent, and the
timestamps are 2 or more seconds apart, the user must
have chosen "Execute Once" or "Trust Signer" for both
alerts generated by the code. The timestamps are also an