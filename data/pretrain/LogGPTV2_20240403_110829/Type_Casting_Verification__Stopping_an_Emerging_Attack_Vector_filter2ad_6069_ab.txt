(e.g., corrupting memory semantics because of misalign-
ment). For example, when bad-casting occurs in proxim-
USENIX Association  
24th USENIX Security Symposium  83
3
SVGElementElement(3) invaliddowncastpDom (allocated)ity to a virtual function table pointer (vptr), an attacker
can directly control input to the member variable (e.g., by
employing abusive memory allocation techniques such as
heap-spray techniques [16, 38]), overwrite the vptr and
hijack the control flow. Similarly, an attacker can also
exploit bad-casting vulnerabilities to launch non-control-
data attacks [7].
The exploitability of a bad-casting bug depends on
whether it allows attackers to perform out-of-bound mem-
ory access or manipulate memory semantics. This in turn
relies on the details of object data layout as specified by
the C++ application binary interface (ABI). Because the
C++ ABI varies depending on the platform (e.g., Itanium
C++ ABI [12] for Linux-based platforms and Microsoft
C++ ABI [11] for Windows platforms), security implica-
tions for the same bad-casting bug can be different. For
example, bad-casting may not crash, corrupt, or alter the
behavior of an application built against the Itanium C++
ABI because the base pointer of both the base class and
derived class always point to the same location of the
object under this ABI. However, the same bad-casting
bug can have severe security implications for other ABI
implementations that locate a base pointer of a derived
class differently from that of a base class, such as HP
and legacy g++ C++ ABI [13]. In short, given the num-
ber of different compilers and the various architectures
supported today, we want to highlight that bad-casting
should be considered as a serious security issue. This
argument is also validated from recent correspondence
with the Firefox security team: after we reported two
new bad-casting vulnerabilities in Firefox [4], they also
pointed out the C++ ABI compatibility issue and rated the
vulnerability as security-high.
Running example: CVE-2013-0912.
Our illustra-
tive Example 1 is extracted from a real-world bad-casting
vulnerability—CVE-2013-0912, which was used to ex-
ploit the Chrome web browser in the Pwn2Own 2013
competition. However, the complete vulnerability is more
complicated as it involves a multitude of castings (be-
tween siblings and parents).
In HTML5, an SVG image can be embedded directly
into an HTML page using the  tag. This tag is
implemented using the SVGElement class, which inherits
from the Element class. At the same time, if a web page
happens to contain unknown tags (any tags other than stan-
dard), an object of the HTMLUnknownElement class will be
created to represent this unknown tag. Since both tags are
valid HTML elements, objects of these types can be safely
casted to the Element class. Bad-casting occurs when the
browser needs to render an SVG image. Given an Element
object, it tries to downcast the object to SVGElement so
the caller function can invoke member functions of the
SVGElement class. Unfortunately, since not all Element
objects are initially allocated as SVGElement objects, this
Figure 1: Inheritance hierarchy of classes involved in the CVE-
2013-0912 vulnerability. MWR Labs exploited this vulnerability
to hijack the Chrome browser in the Pwn2Own 2013 competi-
tion [31]. The object is allocated as HTMLUnknownElement and
eventually converted (static_cast) to SVGElement. After this
incorrect type casting, accessing member variables via this ob-
ject pointer will cause memory corruption.
static_cast is not always valid. In the exploit demon-
strated in the Pwn2Own 2013 competition [31], attackers
used an object allocated as HTMLUnknownElement. As the
size of an SVGElement object (160 bytes) is much larger
than an HTMLUnknownElement object (96 bytes), this in-
correctly casted object pointer allowed the attackers to
access memory beyond the real boundary of the allocated
HTMLUnknownElement object. They then used this capabil-
ity to corrupt the vtable pointer of the object adjacent to
the HTMLUnknownElement object, ultimately leading to a
control-flow hijack of the Chrome browser. This example
also demonstrates why identifying bad-casting vulnerabil-
ities is not trivial for real-world applications. As shown
in Figure 1, the HTMLUnknownElement class has more than
56 siblings and the Element class has more than 10 parent
classes in WebKit. Furthermore, allocation and casting
locations are far apart within the source code. Such com-
plicated class hierarchies and disconnections between
allocation and casting sites make it difficult for develop-
ers and static analysis techniques to reason about the true
allocation types (i.e., alias analysis).
3 CAVER Overview
In this paper, we focus on the correctness and effective-
ness of CAVER against bad-casting bugs, and our main
application scenario is as a back-end testing tool for de-
tecting bad-casting bugs. CAVER’s workflow (Figure 2)
is as simple as compiling a program with one extra com-
pile and link flag (i.e., -fcaver for both). The produced
binary becomes capable of verifying the correctness of ev-
ery type conversion at runtime. When CAVER detects an
incorrect type cast, it provides detailed information of the
bad-cast: the source class, the destination class, the truly
allocated class, and call stacks at the time the bad-cast is
captured. Figure 3 shows a snippet of the actual report of
CVE-2013-0912. Our bug report experience showed that
the report generated by CAVER helped upstream main-
84  24th USENIX Security Symposium 
USENIX Association
4
HTMLUnknwonElement(size: 96 bytes)......(56 siblings)HTMLElement(size: 96 bytes)SVGElement(size: 160 bytes)Element(size: 96 bytes)ContainerNode...static_caststatic_cast(> 10 parent classes)...(allocated)USENIX Association  
24th USENIX Security Symposium  85
Secured binarySource codeCompileCaVerRuntimeCaVer OptimizationpassClangLLVMCaVer StaticInstrumentationLink+Figure2:OverviewofCAVER’sdesignandworkflow.Giventhesourcecodeofaprogram,CAVERinstrumentspossiblecastingsatcompiletime,andinjectsCAVER’sruntimetoverifycastingswhentheyareperformed.1==CaVer:(Stopped)PI:EMAIL:87:123Castinganobjectof’blink::HTMLUnknownElement’4from’blink::Element5to’blink::SVGElement’6Pointer0x60c0000082807Allocbase0x60c0000082808Offset0x0000000000009THTable0x7f7963aa20d01011#10x7f795d76f1a4inviewTargetSVGViewSpec.cpp:8712#20x7f795d939d1cinviewTargetAttributeV8SVGViewSpec.cpp:5613...Figure3:AreportthatCAVERgeneratedonCVE-2013-0912.tainerseasilyunderstand,confirm,andfixelevennewlydiscoveredvulnerabilitieswithoutfurtherexamination.4DesignInthissection,weintroducethedesignofCAVER.WefirstdescribehowtheTHTableisdesignedtogenerallyrepresentthetypeinformationforbothpolymorphicandnon-polymorphicclasses(§4.1),andthenexplainhowCAVERassociatestheTHTablewithruntimeobjects(§4.2).Next,wedescribehowCAVERverifiesthecor-rectnessoftypecastings(§4.3).Attheendofthissection,wepresentoptimizationtechniquesusedtoreducetheruntimeoverheadofCAVER(§4.4).4.1TypeHierarchyTableTokeeptrackofthetypeinformationrequiredforval-idatingtypecasting,CAVERincorporatesanewmeta-datastructure,calledtheTypeHierarchyTable(THTable).GivenapointertoanobjectallocatedastypeT,theTHTablecontainsthesetofallpossibletypestowhichTcanbecasted.InC++,thesepossibletypesareaproductoftwokindsofclassrelationships:is-aandhas-a.Theis-arelationshipbetweentwoobjectsisimplementedasclassinheritance,thehas-arelationshipisimplementedasclasscomposition(i.e.,havingamembervariableinaclass).Thus,foreachclassinaC++program,CAVERcre-atesacorrespondingTHTablethatincludesinformationaboutbothrelationships.Torepresentclassinheritance,theTHTableemploystwouniquedesigndecisions.First,informationoninher-itedclasses(i.e.,baseclasses)isunrolledandserialized.ThisallowsCAVERtoefficientlyscanthroughasetofbaseclassesatruntimewhilestandardRTTIrequiresre-cursivetraversal.Second,unlikeRTTI,whichstoresamangledclassname,theTHTablestoresthehashvalueofaclassname.ThisallowsCAVERtoavoidexpensivestringequalitycomparisons.Note,sinceallclassnamesareavailabletoCAVERatcompiletime,allpossiblehashcollisionscanbedetectedandresolvedtoavoidfalsenegativesduringruntime.Moreover,becausecastingisonlyallowedbetweenclasseswithinthesameinheritancechain,weonlyneedtoguaranteetheuniquenessofhashvalueswithinasetofthoseclasses,asopposedtoguaran-teeingglobaluniqueness.TheTHTablealsoincludesinformationofwhetherabaseclassisaphantomclass,whichcannotberepresentedbasedonRTTIandcausesmanyfalsealarmsinRTTI-basedtypeverificationsolutions[9].WesayaclassPisaphantomclassofaclassQiftwoconditionsaremet:(1)QisdirectlyorindirectlyderivedfromP;and(2)comparedtoP,Qdoesnothaveadditionalmembervariablesordifferentvirtualfunctions.Inotherwords,theyhavethesamedatalayout.Strictlyspeaking,allocatinganobjectasPanddowncastingittoQisconsideredbad-castingasQisnotabaseclassofP.However,suchbad-castingsareharmlessfromasecuritystandpoint,asthepointersemanticafterdowncastingisthesame.Moreimportantly,phantomclassesareoftenusedinpracticetoimplementobjectrelationshipswithemptyinheritances.Forthesereasons,CAVERdeliberatelyallowsbad-castingscausedbyphantomclasses.ThisisdonebyreservingaonebitspaceintheTHTableforeachbaseclass,andmarkingifthebaseclassisaphantomclass.Wewilldescribemoredetailsonhowthephantomclassinformationisactuallyleveragedin§4.3.Inaddition,theTHTablecontainsinformationoncom-positedclass(es)togenerallyrepresentthetypeinforma-tionforbothpolymorphicandnon-polymorphicclassesandovercomethelimitationofRTTI-basedtypeverifica-tionsolutions.RTTI-basedsolutionslocateaRTTIref-erenceviathevirtualfunctiontable(VTable).However,sinceonlypolymorphicclasseshaveVTable,thesesolu-tionscancauseruntimecrasheswhentheytrytolocatetheVTablefornon-polymorphicclasses.UnlikeRTTI,CAVERbindsTHTablereferencestotheallocatedobjectwithexternalmetadata(refer§4.2fordetails).There-fore,CAVERnotonlysupportsnon-polymorphicobjects,butitalsodoesnotbreaktheC++ABI.However,com-positedclass(es)nowsharethesameTHTablewiththeircontainerclass.Sinceacompositedclasscanalsohaveitsowninheritancesandcompositions,wedonotunrollinformationaboutcompositedclass(es);instead,CAVERprovidesareferencetothecompositedclass’sTHTable.TheTHTablealsostoresthelayoutinformation(offsetandsize)ofeachcompositedclasstodeterminewhetherthegivenpointerpointstoacertaincompositedclass.Otherthaninheritanceandcompositioninformationas5described above, the THTable contains basic information
on the corresponding type itself: a type size to represent
object ranges; and a type name to generate user-friendly
bad-casting reports.
4.2 Object Type Binding
To verify the correctness of type casting, CAVER needs
to know the actual allocated type of the object to be
casted. In CAVER, we encoded this type information in
the THTable. In this subsection, we describe how CAVER
binds the THTable to each allocated object. To overcome
the limitations of RTTI-based solutions, CAVER uses a
disjoint metadata scheme (i.e., the reference to an object’s
THTable is stored outside the object). With this unique
metadata management scheme, CAVER not only supports
both polymorphic classes and non-polymorphic classes,
but also preserves the C++ ABI and works seamlessly with
legacy code. Overall, type binding is done in two steps.
First, CAVER instruments each allocation site of an ap-
plication to pass the allocation metadata to its runtime
library. Second, CAVER’s runtime library maintains the
allocation metadata and supports efficient lookup opera-
tions.
Instrumentation. The goal of the instrumentation is to
pass all information of an allocated object to the runtime
library. To bind a THTable to an object, the runtime li-
brary needs two pieces of information: a reference to the
THTable and the base address of the allocated object.
In C++, objects can be allocated in three ways: in heap,
In all three cases, the
on stack, or as global objects.
type information of the allocated object can be deter-
mined statically at compile time. This is possible because
C++ requires programmers to specify the object’s type at
its allocation site, so the corresponding constructor can
be invoked to initialize memory. For global and stack
objects, types are specified before variable names; and
for heap objects, types are specified after the new opera-
tor. Therefore, CAVER can obtain type information by
statically inspecting the allocation site at compile time.
Specifically, CAVER generates the THTable (or reuses the
corresponding THTable if already generated) and passes
the reference of the THTable to the runtime library. An
example on how CAVER instruments a program is shown
in Example 2.
For heap objects, CAVER inserts one extra function
invocation (trace_heap() in Example 2) to the runtime
library after each new operator, and passes the information
of the object allocated by new; a reference to the THTable
and the base address of an object. A special case for the
new operator is an array allocation, where a set of objects
of the same type are allocated. To handle this case, we add
an extra parameter to inform the runtime library on how
many objects are allocated together at the base address.
Unlike heap objects, stack objects are implicitly al-
// Heap objects (dynamically allocated)
void func_heap_ex() {
C *p_heap_var = new C;
C *p_heap_array = new C[num_heap_array];
trace_heap(&THTable(C), p_heap_var, 1);
trace_heap(&THTable(C), p_heap_array, num_heap_array);
...
C stack_var;
trace_stack_begin(&THTable(C), &stack_var, 1);
...
trace_stack_end(&stack_var);
}
}
// Stack objects
void func_stack_ex() {
1
2
3
4
5 +
6 +
7
8
9
10
11
12
13 +
14
15 +
16
17
18
19
20
21
22
23 + void trace_global_helper_1() {
24 +
25 + }
26
27
28
29
30 +
31
// Global objects
C global_var;
}
// @.ctors: (invoked at the program’s initialization)
//
trace_global_helper_1() and trace_global_helper_2()
trace_global(&THTable(C), &global_var, 1);
// Verifying the correctness of a static casting
void func_verify_ex() {
B *afterAddr = static_cast(beforeAddr);
verify_cast(beforeAddr, afterAddr, type_hash(A));
Example 2: An example of how CAVER instruments a program.
Lines marked with + represent code introduced by CAVER, and
&THTable(T) denotes the reference to the THTable of class T.
In this example, we assume that the THTable of each allocated
class has already been generated by CAVER.
located and freed. To soundly trace them, CAVER in-
serts two function calls for each stack object at the
function prologue and epilogue (trace_stack_begin()
and trace_stack_end() in Example 2), and passes the
same information of the object as is done for heap ob-
jects. A particular challenge is that, besides function
returns, a stack unwinding can also happen due to ex-
ceptions and setjmp/longjmp. To handle these cases,
CAVER leverages existing compiler functionality (e.g.,
EHScopeStack::Cleanup in clang) to guarantee that the
runtime library is always invoked once the execution con-
text leaves the given function scope.
To pass information of global objects to the runtime
library, we leverage existing program initialization pro-
cedures. In ELF file format files [46], there is a special
section called .ctors, which holds constructors that must
be invoked during an early initialization of a program.
Thus, for each global object, CAVER creates a helper
function (trace_global_helper_1() in Example 2) that
invokes the runtime library with static metadata (the ref-
erence to the THTable) and dynamic metadata (the base
address and the number of array elements). Then, CAVER
adds the pointer to this helper function to the .ctors sec-
tion so that the metadata can be conveyed to the runtime
library2.
2Although the design detail involving .ctors section is platform de-
pendent, the idea of registering the helper function into the initialization
86  24th USENIX Security Symposium 
USENIX Association
6
Runtime library. The runtime library of CAVER main-
tains all the metadata (THTable and base address of an
object) passed from tracing functions during the course
of an application execution. Overall, we consider two pri-
mary requirements when organizing the metadata. First,
the data structure must support range queries ( i.e., given
a pointer pointing to an address within an object ([base,
base+size)) CAVER should be able to find the correspond-
ing THTable of the object). This is necessary because the
object pointer does not always point to the allocation base.
For example, the pointer to be casted can point to a com-
posited object. In case of multi-inheritance, the pointer
can also point to one of the parent classes. Second, the
data structure must support efficient store and retrieve
operations. CAVER needs to store the metadata for every
allocation and retrieve the metadata for each casting ver-
ification. As the number of object allocations and type
conversions can be huge (see §6), these operations can
easily become the performance bottleneck.
We tackle these challenges using a hybrid solution (see
Appendix 2 for the algorithm on runtime library func-
tions). We use red-black trees to trace global and stack
objects and an alignment-based direct mapping scheme
to trace heap objects3.
We chose red-black trees for stack and global objects
for two reasons. First, tree-like data structures are well
known for supporting efficient range queries. Unlike
hash-table-based data structures, tree-based data struc-
tures arrange nodes according to the order of their keys,
whose values can be numerical ranges. Since nodes are
already sorted, a balanced tree structure can guarantee
O(logN) complexity for range queries while hash-table-
based data structure requires O(N) complexity. Second,
we specifically chose red-black trees because there are sig-
nificantly more search operations than update operations
(i.e., more type conversion operations than allocations,
see §6), thus red-black trees can excel in performance due
to self-balancing.
In CAVER, each node of a red-black tree holds the
following metadata: the base address and the allocation
size as the key of the node, and the THTable reference as
the value of the node.
For global object allocations, metadata is inserted into
the global red-black tree when the object is allocated at
runtime, with the key as the base address and the alloca-
tion size4, and the value as the address of the THTable.
We maintain a per-process global red-black tree without
function list can be generalized for other platforms as others also support
.ctors-like features
3The alignment-based direct mapping scheme can be applied for
global and stack objects as well, but this is not implemented in the
current version. More details can be found in §7.
4The allocation size is computed by multiplying the type size rep-
resented in THTable and the number of array elements passed during
runtime.
locking mechanisms because there are no data races on
the global red-black tree in CAVER. All updates on the
global red-black tree occur during early process start-up
(i.e., before executing any user-written code) and update
orders are well serialized as listed in the .ctors section.
For stack object allocations, metadata is inserted to
the stack red-black tree similar to the global object case.
Unlike a global object, we maintain a per-thread red-
black tree for stack objects to avoid data races in multi-
threaded applications. Because a stack region (and all
operations onto this region) are exclusive to the corre-
sponding thread’s execution context, this per-thread data
structure is sufficient to avoid data races without locks.
For heap objects, we found that red-black trees are
not a good design choice, especially for multi-threaded
programs. Different threads in the target programs can up-
date the tree simultaneously, and using locks to avoid data
races resulted in high performance overhead, as data con-
tention occured too frequently. Per-thread red-black trees
used for stack objects are not appropriate either, because
heap objects can be shared by multiple threads. There-
fore, we chose to use a custom memory allocator that can