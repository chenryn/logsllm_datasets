account hijacking (if session information or an authentication token has been disclosed), and gathering information
from apps that have a payment option (to attack and abuse them).
Storing data is essential for many mobile apps. For example, some apps use data storage to keep track of user
settings or user-provided data. Data can be stored persistently in several ways. The following list of storage
techniques are widely used on the Android platform:
Shared Preferences
SQLite Databases
Realm Databases
Internal Storage
External Storage
The following code snippets demonstrate bad practices that disclose sensitive information. They also illustrate Android
storage mechanisms in detail. For more information, check out the Security Tips for Storing Data in the Android
developer's guide.
Shared Preferences
150
Data Storage on Android
The SharedPreferences API is commonly used to permanently save small collections of key-value pairs. Data stored
in a SharedPreferences object is written to a plain-text XML file. The SharedPreferences object can be declared
world-readable (accessible to all apps) or private. Misuse of the SharedPreferences API can often lead to exposure of
sensitive data. Consider the following example:
SharedPreferences sharedPref = getSharedPreferences("key", MODE_WORLD_READABLE);
SharedPreferences.Editor editor = sharedPref.edit();
editor.putString("username", "administrator");
editor.putString("password", "supersecret");
editor.commit();
Once the activity has been called, the file key.xml will be created with the provided data. This code violates several
best practices.
The username and password are stored in clear text in /data/data//shared_prefs/key.xml .
administrator
supersecret
MODE_WORLD_READABLE allows all applications to access and read the contents of key.xml .
root@hermes:/data/data/sg.vp.owasp_mobile.myfirstapp/shared_prefs # ls -la
-rw-rw-r-- u0_a118 170 2016-04-23 16:51 key.xml
Please note that MODE_WORLD_READABLE and MODE_WORLD_WRITEABLE were deprecated with API 17. Although
newer devices may not be affected by this, applications compiled with an android:targetSdkVersion value less
than 17 may be affected if they run on an OS version that was released before Android 4.2 ( JELLY_BEAN_MR1 ).
SQLite Database (Unencrypted)
SQLite is an SQL database engine that stores data in .db files. The Android SDK has built-in support for SQLite
databases. The main package used to manage the databases is android.database.sqlite . You may use the following
code to store sensitive information within an activity:
SQLiteDatabase notSoSecure = openOrCreateDatabase("privateNotSoSecure",MODE_PRIVATE,null);
notSoSecure.execSQL("CREATE TABLE IF NOT EXISTS Accounts(Username VARCHAR, Password VARCHAR);");
notSoSecure.execSQL("INSERT INTO Accounts VALUES('admin','AdminPass');");
notSoSecure.close();
Once the activity has been called, the database file privateNotSoSecure will be created with the provided data and
stored in the clear text file /data/data//databases/privateNotSoSecure .
The database's directory may contain several files besides the SQLite database:
Journal files: These are temporary files used to implement atomic commit and rollback.
Lock files: The lock files are part of the locking and journaling feature, which was designed to improve SQLite
concurrency and reduce the writer starvation problem.
Sensitive information should not be stored in unencrypted SQLite databases.
SQLite Databases (Encrypted)
With the library SQLCipher, SQLite databases can be password-encrypted.
151
Data Storage on Android
SQLiteDatabase secureDB = SQLiteDatabase.openOrCreateDatabase(database, "password123", null);
secureDB.execSQL("CREATE TABLE IF NOT EXISTS Accounts(Username VARCHAR,Password VARCHAR);");
secureDB.execSQL("INSERT INTO Accounts VALUES('admin','AdminPassEnc');");
secureDB.close();
If encrypted SQLite databases are used, determine whether the password is hard-coded in the source, stored in
shared preferences, or hidden somewhere else in the code or filesystem. Secure ways to retrieve the key include:
Asking the user to decrypt the database with a PIN or password once the app is opened (weak passwords and
PINs are vulnerable to brute force attacks)
Storing the key on the server and allowing it to be accessed from a web service only (so that the app can be used
only when the device is online)
Firebase Real-time Databases
Firebase is a development platform with more than 15 products, and one of them is Firebase Real-time Database. It
can be leveraged by application developers to store and sync data with a NoSQL cloud-hosted database. The data is
stored as JSON and is synchronized in real-time to every connected client and also remains available even when the
application goes offline.
In Jan 2018, Appthority Mobile Threat Team (MTT) performed security research on insecure backend services
connecting to mobile applications. They discovered a misconfiguration in Firebase, which is one of the top 10 most
popular data stores which could allow attackers to retrieve all the unprotected data hosted on the cloud server. The
team performed the research on more than 2 Million mobile applications and found that the around 9% of Android
applications and almost half (47%) of iOS apps that connect to a Firebase database were vulnerable.
The misconfigured Firebase instance can be identified by making the following network call:
https://\.firebaseio.com/.json
The firebaseProjectName can be retrieved from the mobile application by reverse engineering the application.
Alternatively, the analysts can use Firebase Scanner, a python script that automates the task above as shown below:
python FirebaseScanner.py -p 
python FirebaseScanner.py -f 
Realm Databases
The Realm Database for Java is becoming more and more popular among developers. The database and its contents
can be encrypted with a key stored in the configuration file.
//the getKey() method either gets the key from the server or from a KeyStore, or is deferred from a password.
RealmConfiguration config = new RealmConfiguration.Builder()
.encryptionKey(getKey())
.build();
Realm realm = Realm.getInstance(config);
If the database is not encrypted, you should be able to obtain the data. If the database is encrypted, determine
whether the key is hard-coded in the source or resources and whether it is stored unprotected in shared preferences
or some other location.
Internal Storage
152
Data Storage on Android
You can save files to the device's internal storage. Files saved to internal storage are containerized by default and
cannot be accessed by other apps on the device. When the user uninstalls your app, these files are removed. The
following code would persistently store sensitive data to internal storage:
FileOutputStream fos = null;
try {
fos = openFileOutput(FILENAME, Context.MODE_PRIVATE);
fos.write(test.getBytes());
fos.close();
} catch (FileNotFoundException e) {
e.printStackTrace();
} catch (IOException e) {
e.printStackTrace();
}
You should check the file mode to make sure that only the app can access the file. You can set this access with
MODE_PRIVATE . Modes such as MODE_WORLD_READABLE (deprecated) and MODE_WORLD_WRITEABLE (deprecated) may pose
a security risk.
Search for the class FileInputStream to find out which files are opened and read within the app.
External Storage
Every Android-compatible device supports shared external storage. This storage may be removable (such as an SD
card) or internal (non-removable). Files saved to external storage are world-readable. The user can modify them when
USB mass storage is enabled. You can use the following code to persistently store sensitive information to external
storage as the contents of the file password.txt :
File file = new File (Environment.getExternalFilesDir(), "password.txt");
String password = "SecretPassword";
FileOutputStream fos;
fos = new FileOutputStream(file);
fos.write(password.getBytes());
fos.close();
The file will be created and the data will be stored in a clear text file in external storage once the activity has been
called.
It's also worth knowing that files stored outside the application folder ( data/data// ) will not be deleted
when the user uninstalls the application. Finally, it's worth noting that the external storage can be used by an attacker
to allow for arbitrary control of the application in some cases. For more information: see the blog from Checkpoint.
Static Analysis
Local Storage
As previously mentioned, there are several ways to store information on an Android device. You should therefore
check several sources to determine the kind of storage used by the Android app and to find out whether the app
processes sensitive data insecurely.
Check AndroidManifest.xml for read/write external storage permissions, for example, uses-permission
android:name="android.permission.WRITE_EXTERNAL_STORAGE" .
Check the source code for keywords and API calls that are used to store data:
File permissions, such as:
MODE_WORLD_READABLE or MODE_WORLD_WRITABLE : You should avoid using MODE_WORLD_WRITEABLE and
MODE_WORLD_READABLE for files because any app will be able to read from or write to the files, even if they
are stored in the app's private data directory. If data must be shared with other applications, consider a
153
Data Storage on Android
content provider. A content provider offers read and write permissions to other apps and can grant
dynamic permission on a case-by-case basis.
Classes and functions, such as:
the SharedPreferences class ( stores key-value pairs)
the FileOutPutStream class (uses internal or external storage)
the getExternal* functions (use external storage)
the getWritableDatabase function (returns a SQLiteDatabase for writing)
the getReadableDatabase function (returns a SQLiteDatabase for reading)
the getCacheDir and getExternalCacheDirs function (use cached files)
Encryption should be implemented using proven SDK functions. The following describes bad practices to look for in
the source code:
Locally stored sensitive information "encrypted" via simple bit operations like XOR or bit flipping. These
operations should be avoided because the encrypted data can be recovered easily.
Keys used or created without Android onboard features, such as the Android KeyStore
Keys disclosed by hard-coding
A typical misuse are hard-coded cryptographic keys. Hard-coded and world-readable cryptographic keys significantly
increase the possibility that encrypted data will be recovered. Once an attacker obtains the data, decrypting it is trivial.
Symmetric cryptography keys must be stored on the device, so identifying them is just a matter of time and effort.
Consider the following code:
this.db = localUserSecretStore.getWritableDatabase("SuperPassword123");
Obtaining the key is trivial because it is contained in the source code and identical for all installations of the app.
Encrypting data this way is not beneficial. Look for hard-coded API keys/private keys and other valuable data; they
pose a similar risk. Encoded/encrypted keys represent another attempt to make it harder but not impossible to get the
crown jewels.
Consider the following code:
//A more complicated effort to store the XOR'ed halves of a key (instead of the key itself)
private static final String[] myCompositeKey = new String[]{
"oNQavjbaNNSgEqoCkT9Em4imeQQ=","3o8eFOX4ri/F8fgHgiy/BS47"
};
The algorithm for decoding the original key might be something like this:
public void useXorStringHiding(String myHiddenMessage) {
byte[] xorParts0 = Base64.decode(myCompositeKey[0],0);
byte[] xorParts1 = Base64.decode(myCompositeKey[1],0);
byte[] xorKey = new byte[xorParts0.length];
for(int i = 0; i 
SuperApp
Hello world!
154
Data Storage on Android
Settings
My_Secret_Key
build configs, such as in local.properties or gradle.properties Example:
buildTypes {
debug {
minifyEnabled true
buildConfigField "String", "hiddenPassword", "\"${hiddenPassword}\""
}
}
KeyStore
The Android KeyStore supports relatively secure credential storage. As of Android 4.3, it provides public APIs for
storing and using app-private keys. An app can use a public key to create a new private/public key pair for encrypting
application secrets, and it can decrypt the secrets with the private key.
You can protect keys stored in the Android KeyStore with user authentication in a confirm credential flow. The user's
lock screen credentials (pattern, PIN, password, or fingerprint) are used for authentication.
You can use stored keys in one of two modes:
1. Users are authorized to use keys for a limited period of time after authentication. In this mode, all keys can be
used as soon as the user unlocks the device. You can customize the period of authorization for each key. You
can use this option only if the secure lock screen is enabled. If the user disables the secure lock screen, all stored
keys will become permanently invalid.
2. Users are authorized to use a specific cryptographic operation that is associated with one key. In this mode,
users must request a separate authorization for each operation that involves the key. Currently, fingerprint
authentication is the only way to request such authorization.
The level of security afforded by the Android KeyStore depends on its implementation, which depends on the device.
Most modern devices offer a hardware-backed KeyStore implementation: keys are generated and used in a Trusted
Execution Environment (TEE) or a Secure Element (SE), and the operating system can't access them directly. This
means that the encryption keys themselves can't be easily retrieved, even from a rooted device. You can determine
whether the keys are inside the secure hardware by checking the return value of the isInsideSecureHardware method,
which is part of the KeyInfo class. Note that the relevant KeyInfo indicates that secret keys and HMAC keys are
insecurely stored on several devices despite private keys being correctly stored on the secure hardware.
The keys of a software-only implementation are encrypted with a per-user encryption master key. An attacker can
access all keys stored on rooted devices that have this implementation in the folder /data/misc/keystore/ . Because
the user's lock screen pin/password is used to generate the master key, the Android KeyStore is unavailable when the
device is locked.
Older KeyStore Implementations
Older Android versions don't include KeyStore, but they do include the KeyStore interface from JCA (Java
Cryptography Architecture). You can use KeyStores that implement this interface to ensure the secrecy and integrity
of keys stored with KeyStore; BouncyCastle KeyStore (BKS) is recommended. All implementations are based on the
fact that files are stored on the filesystem; all files are password-protected. To create one, you can use the
KeyStore.getInstance("BKS", "BC") method , where "BKS" is the KeyStore name (BouncyCastle Keystore) and "BC" is
the provider (BouncyCastle). You can also use SpongyCastle as a wrapper and initialize the KeyStore as follows:
KeyStore.getInstance("BKS", "SC") .
Be aware that not all KeyStores properly protect the keys stored in the KeyStore files.
155
Data Storage on Android
KeyChain
The KeyChain class is used to store and retrieve system-wide private keys and their corresponding certificates
(chain). The user will be prompted to set a lock screen pin or password to protect the credential storage if something
is being imported into the KeyChain for the first time. Note that the KeyChain is system-wide—every application can
access the materials stored in the KeyChain.
Inspect the source code to determine whether native Android mechanisms identify sensitive information. Sensitive
information should be encrypted, not stored in clear text. For sensitive information that must be stored on the device,
several API calls are available to protect the data via the KeyChain class. Complete the following steps:
Make sure that the app is using the Android KeyStore and Cipher mechanisms to securely store encrypted
information on the device. Look for the patterns AndroidKeystore , import java.security.KeyStore , import
javax.crypto.Cipher , import java.security.SecureRandom , and corresponding usages.
Use the store(OutputStream stream, char[] password) function to store the KeyStore to disk with a password.
Make sure that the password is provided by the user, not hard-coded.
Third Party libraries
There are several different open-source libraries that offer encryption capabilities specific for the Android platform.
Java AES Crypto - A simple Android class for encrypting and decrypting strings.
SQL Cipher - SQLCipher is an open source extension to SQLite that provides transparent 256-bit AES
encryption of database files.
Secure Preferences - Android Shared preference wrapper than encrypts the keys and values of Shared
Preferences.
Please keep in mind that as long as the key is not stored in the KeyStore, it is always possible to easily retrieve
the key on a rooted device and then decrypt the values you are trying to protect.
Dynamic Analysis
Install and use the app, executing all functions at least once. Data can be generated when entered by the user, sent
by the endpoint, or shipped with the app. Then complete the following:
Identify development files, backup files, and old files that shouldn't be included with a production release.
Determine whether SQLite databases are available and whether they contain sensitive information. SQLite
databases are stored in /data/data//databases .
Check Shared Preferences that are stored as XML files (in /data/data//shared_prefs ) for sensitive
information. Avoid using Shared Preferences and other mechanisms that can't protect data when you are storing
sensitive information. Shared Preferences is insecure and unencrypted by default. You can use secure-
preferences to encrypt the values stored in Shared Preferences, but the Android KeyStore should be your first
choice for storing data securely.
Check the permissions of the files in /data/data/ . Only the user and group created when you
installed the app (e.g., u0_a82) should have user read, write, and execute permissions ( rwx ). Other users
should not have permission to access files, but they may have execute permissions for directories.
Determine whether a Realm database is available in /data/data//files/ , whether it is
unencrypted, and whether it contains sensitive information. By default, the file extension is realm and the file
name is default . Inspect the Realm database with the Realm Browser.
Check external storage for data. Don't use external storage for sensitive data because it is readable and writeable
system-wide.
Files saved to internal storage are by default private to your application; neither the user nor other applications can
access them. When users uninstall your application, these files are removed.
156
Data Storage on Android
Testing Local Storage for Input Validation (MSTG-PLATFORM-2)
For any publicly accessible data storage, any process can override the data. This means that input validation needs to
be applied the moment the data is read back again.
Note: Similar holds for private accessible data on a rooted device
Static analysis