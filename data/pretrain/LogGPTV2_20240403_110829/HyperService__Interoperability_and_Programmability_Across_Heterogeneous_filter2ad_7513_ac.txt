(⟨op_payment⟩) specifies the transfer of a certain amount of coins
(⟨coin⟩) between two accounts that may live on different blockchains
(⟨accts⟩). Note that no new coins on any blockchains are ever cre-
ated during the operation. The ⟨exchange⟩ rule is used to specify
the exchange rate between the coins held by the two accounts. An
invocation operation (⟨op_invocation⟩) specifies calling one contract
entity’s public method with certain arguments (⟨call⟩). The argu-
ments passed to a method invocation can be literals (⟨int⟩, ⟨float⟩,
⟨string⟩), and state variables (⟨state_var⟩) of other contract entities.
When using state variables, semantic validation is required (§ 3.3).
Dependency Definition. The ⟨dep_def⟩ specifies the rule of defin-
ing preconditions and deadlines for operations. A precondition
(⟨temp_deps⟩) specifies the temporal constraints for the execution
order of operations. A deadline (⟨del_deps⟩) specifies the deadline
constraints of each operation. The deadline dependency may be
given either using the number of blocks on NSB (⟨int⟩ blocks) or
in absolute time (⟨int⟩ ⟨time_unit⟩), as explained in § 3.4.
3.3 Semantic Validation
The compiler performs two types of semantic validation to ensure
the security and correctness of HSL programs. First, the compiler
guarantees the compatibility and verifiability of the arguments used
in invocation operations, especially when those arguments are ob-
tained from other contract entities. For compatibility check, the
compiler performs type checking to ensure the types of arguments
and the types of method parameters are mapped to the same uni-
fied type. For verifiability check, the compiler ensures that only
literals and state variables that are publicly stored on blockchains
are eligible to be used as arguments in invocation operations. For
example, the return values of method calls to a contract entity are
not eligible if these results are not persistent on blockchains. This
requirement is necessary for the UIP protocol to construct pub-
licly verifiable attestations to prove that correct values are used to
invoking contracts during actual on-chain execution. Second, the
compiler performs dependency validation to make sure that the
dependency constraints defined in a HSL program uniquely specify
a directed acyclic graph connecting all operations. This ensures
that no conflicting temporal constraints are specified.
3.4 HSL Program Executables
Once a HSL program passes all validations, the HSL compiler gen-
erates executables for the program in form of a transaction depen-
dency graph GT . Each vertex of GT , referred to as a transaction
wrapper, contains the complete information to compute an on-chain
transaction executable on a specific blockchain, as well as additional
metadata for the transaction. The edges in GT define the precon-
ditioning requirements among transactions, which are consistent
with the dependency constraints specified by the HSL program.
Figure 4 show the GT generated for the HSL program in Figure 2.
A transaction wrapper is in form of T := [from, to, seq, meta],
where the pair  decides the sending and receiving ad-
dresses of the on-chain transaction, seq (omitted in Figure 4) rep-
resents the sequence number of T in GT , and meta stores the
structured and customizable metadata for T . Below we explain
Figure 4: GT generated for the example HSL program.
the fields of meta. First, to achieve financial atomicity, meta must
populate a tuple ⟨amt, dst⟩ for fund reversion. In particular, amt
specifies the total value that the from address has to spend when T
is committed on its destination blockchain, which includes both the
explicitly paid value in T , as well as any gas fee. If the entire execu-
tion fails with exceptions whereas T is committed, the dst account
is guaranteed to receive the amount of fund specified in amt. As
we shall see in § 4.4, the fund reversion is handled by the Insurance
Smart Contract (ISC). Therefore, the unit of amt (represented as
ncoin in Figure 4) is given based on the cryptocurrency used by the
blockchain where the ISC is deployed, and the dst should live on
the hosting blockchain as well.
Second, for a transaction (such as T1) whose resulting state is
subsequently used by other downstream transactions (such as T4),
its meta needs to be populated with a corresponding state proof.
This proof should be collected from the transaction’s destination
blockchain after the transaction is finalized (c.f., § 4.2.3). Third,
a cross-chain payment operation in the HSL program results in
multiple transactions in GT . For instance, to realize the op1 in
Figure 2, two individual transactions, involving the relay accounts
owned by the VES, are generated. As blockchain drivers, each VES
is supposed to own some accounts on all blockchains that it has
visibility so that the VES is able to send and receive transactions on
those blockchains. For instance, in Figure 4, the relayX and relayY
are two accounts used by the VES to bridge the balance updates
between ChainX::a1 and ChainY::a2. Because of those VES-owned
accounts, GT is in general VES-specific.
Finally, the deadlines of transactions could be specified using
the number of blocks on the NSB. This is because the NSB con-
structs a unified view of the status of all underlying blockchains
and therefore can measure the execution time of each transaction.
Specifically, the deadline of a transaction T is measured as the
number of blocks between two NSB blocks B1 and B2 (including
B2), where B1 proves the finalization of T ’s last preconditioned
transaction and B2 proves the finalization of T itself. We explain in
detail how the finality proof is constructed based on NSB blocks in
§ 4.2.2. Transaction deadlines are indeed enforced by the ISC using
the number of NSB blocks. Note that to improve expressiveness,
the HSL language also allows developers to define deadlines in time
intervals (e.g., minutes). The compiler will then convert those time
intervals into numbers of NSB blocks.
Transaction T1 on ChainX:    from: a1.address    to: c1.addressMeta:    data: c1.getStrikePrice    :     state_proof: collect from NSBTransaction T2 on ChainX:    from: a1.address    to: VES.relayX.addressMeta:    value: 50 xcoin    :     deadline: 4 NSB blocksTransaction T3 on ChainY:    from: VES.relayY.address     to: a2.addressMeta:    value: 25 ycoin    :     deadline: 6 NSB blocksTransaction T4 on ChainY:    from: a2.address     to: c2.addressMeta:    data: c2.CashSettle(10, c1.StrikePrice)    :     value_proof: T1.meta.state_proofTransaction T5 on ChainZIn summary, the executable produced by the HSL complier de-
fines the blueprint of cross-blockchain execution to realize the HSL
program. It is the input instructions that direct the underlying
cryptography protocol UIP, as detailed below.
4 UIP DESIGN DETAIL
UIP is the cryptography protocol that executes HSL program exe-
cutables. The main protocol ProtUIP is divided into five preliminary
protocols. In particular, ProtVES and ProtCLI define the execution
protocols implemented by VESes and dApp clients, respectively.
ProtNSB and ProtISC are the protocol realization of the NSB and
ISC, respectively. Lastly, ProtUIP includes ProtBC, the protocol real-
ization of a general-purposed blockchain. Overall, ProtUIP has two
phases: the execution phase where the transactions specified in the
HSL executables are posted on blockchains and the insurance claim
phase where the execution correctness or violation is arbitrated.
4.1 Protocol Preliminaries
4.1.1 Runtime Transaction State
During the execution phase, a transaction may be in any of the fol-
lowing state {unknown, init, inited, open, opened, closed}, where
a latter state is considered more advanced than a former one. The
state of each transaction must be gradually promoted following the
above sequence. For each state (except for the unknown), ProtUIP
produces a corresponding attestation to prove the state. When the
execution phase terminates, the final execution status of the HSL
program is collectively decided by the state of all transactions, based
on which ProtISC arbitrates its correctness or violation.
4.1.2 Off-Chain State Channels
The protocol exchange between ProtVES and ProtCLI can be con-
ducted via off-chain state channels for low latency. One challenge,
however, is that it is difficult to enforce accountability for non-
closed transactions without preserving the execution steps by both
parties. To address this issue, ProtUIP proposes Proof of Actions
(PoAs), allowing ProtVES and ProtCLI to stake their execution steps
on NSB. As a result, the NSB is treated as a publicly-observable
fallback communication medium for the off-chain channel. The
benefit of this dual-medium design is that the protocol exchange
between ProtVES and ProtCLI can still proceed agilely via off-chain
channels in typical scenarios, whereas the full granularity of their
protocol exchange is preserved on the NSB in case of exceptions,
eliminating the ambiguity for accountability enforcement.
As mentioned in § 4.1.1, ProtUIP produces security attestations
to prove the runtime state of transactions. As we shall see below, an
attestation may come in two forms: a certificate, denoted by Cert,
signed by ProtVES or/and ProtCLI during their off-chain exchange,
or an on-chain Merkle proof, denoted by Merk, constructed using
the NSB and underlying blockchains. An Cert and its corresponding
Merk are treated equivalently by the ProtISC in code arbitration.
4.1.3 Architecture of the NSB
The NSB is a blockchain designed to provide an objective view on
the execution status of dApps. Figure 5 depicts the architecture
of NSB blocks. Similar to typical blockchain blocks, an NSB block
contains several common fields, such as the hash fields to link blocks
Figure 5: The architecture of NSB blocks.
together and the Merkle trees to store transactions and state. To
support the extra functionality of the NSB, an NSB block contains
two additional Merkle tree roots: StatusRoot and ActionRoot.
StatusRoot is the root of a Merkle tree (referred as StatusMT)
that stores transaction status of underlying blockchains. The NSB
represents the transaction status of a blockchain based on the Tx-
Roots and StateRoots retrieved from the blockchain’s public ledger.
Although the exact namings may vary on different blockchains,
in general, the TxRoot and StateRoot in a blockchain block rep-
resent the root of a Merkle tree storing transactions and storage
state (e.g., account balance, contract state), respectively. Note that
the NSB only stores relevant blockchain state, where a blockchain
block is considered to be relevant if the block packages at least one
transaction that is part of any dApp executables.
ActionRoot is the root of a Merkle tree (referred to as ActionMT)
whose leaf nodes store certificates computed by VESes and dApp
clients. Each certificate represents a certain step taken by either
the VES or the dApp client during the execution phase. To prove
such an action, a party needs to construct a Merkle proof to demon-
strate that the certificate mapped to the action can be linked to a
committed block on the NSB. These PoAs are crucial for the ISC to
enforce accountability if the execution fails. Since the information
of each ActionMT is static, we lexicographically sort the ActionMT
to achieve fast search and convenient proof of non-membership.
Note that the construction of StatusMT ensures that each under-
lying blockchain can have a dedicated subtree for storing its trans-
action status. This makes the NSB shardable on the granularity of
individual blockchains, ensuing that the NSB is horizontally scalable
as HyperService continuously incorporates additional blockchains.
ProtNSB, discussed in § 4.5, is the protocol that specifies the detailed
construction of both roots and guarantees their correctness.
4.2 Execution Protocol by VESes
The full protocol of ProtVES is detailed in Figure 6. Below we clarify
some technical subtleties.
4.2.1 Post Compilation and Session Setup
After GT is generated, ProtVES initiates an execution session for
GT in the PostCompiliation daemon. The primary goal of the ini-
tialization is to create and deploy an insurance contract to protect
the execution of GT . Towards this end, ProtVES interacts with the
protocol ProtISC to create the insurance contract for GT , and fur-
ther deploys the contract on NSB after the dApp client D agrees
on the contract. Throughout the paper, Cert([∗]; Sig) represents a
signed certificate proving that the signing party agrees on the value
enclosed in the certificate. We use SigV
and SigD
to represent the
signature by ProtVES and ProtCLI, respectively.
sid
sid
Block Number: N + 1ActionRootStatusRoot…Block Number: NPrevHashActionRootHashCommonRootsStatusRootBlockchain XBlockID: 2012StateRoot: 0x1…TxRoot: 0xf…Blockchain XBlockID: 2019StateRoot: 0x2…TxRoot: 0xe…Cert(z)Cert(a)21
22
23
6
1 Init: Data := ∅
2 Daemon PostCompiliation():
3
4
5
sid) to ProtCLI for approval
sid) is received
generate the session ID sid ← {0, 1}λ
call [cid, contract] := ProtISC.CreateContract(GT )
send Cert([sid, GT , contract]; SigV
halt until Cert([sid, GT , contract]; SigV
package contract as a valid transactioncontract
sid, SigD
call ProtNSB.Exec(contract) to deploy thecontract
halt untilcontract is initialized on ProtNSB
call ProtISC.StakeFund to stake the required funds in ProtISC
halt until D has staked its required funds in ProtISC
initialize Data[sid] := {GT , cid, SCert=∅, SMerk=∅}
(GT , _, SCert, SMerk) := Data[sid]; abort if not found
for each T ∈ GT :
7
8
9
10
11
12
13 Daemon Watching(sid, {ProtBC, ...}) private:
14
15
16
17
18
19
20
identify T’s on-chain counterpart(cid:101)T
continue if ProtBC.Status((cid:101)T) is not committed
:= Cert([(cid:101)T , closed, sid, T, tsclosed], SigV
sid)
call ProtBC.MerkleProof((cid:101)T) to obtain a finalization proof for(cid:101)T
closed) to negotiate the closed attestation
get tsclosed := ProtNSB.BlockHeight()
compute CT
call ProtCLI.CloseTrans(CT
continue if T .state is not opened
closed
denote the finalization proof as Merkc1T (Figure 7)
update SCert .Add(CT
closed) and SMerk .Add(Merkc1T )
(GT , _, SCert, SMerk) := Data[sid]; abort if not found
watch four types of attestations {Certid, Certo, Certod, Certc }
process fresh attestations via corresponding handlers (see below)
# Retrieve alternative attestations if necessary.
for each T ∈ GT :
if T .state = opened and Merkc1T ∈ SMerk :
retrieve the roots [R, ...] of the proof Merkc1T
call ProtNSB.MerkleProof([R, ...]) to obtain a status proof Merkc2T
continue if Merkc2T is not available yet on ProtNSB
compute the complete proof MerkcT := [Merkc1T , Merkc2T ]
update T .state := closed and SMerk .Add(MerkcT)
compute eligible transaction set S using the current state of GT
for each T ∈ S:
24
25 Daemon Watching(sid, ProtNSB) private:
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48 Upon Receive SInitedTrans(sid, T) private:
49
50
51
continue if T .state is not unknown
if T .from = ProtCLI:
compute CertiT := Cert([T, init, sid]; SigV
sid)
call ProtCLI.InitTrans(CertiT) to request initialization