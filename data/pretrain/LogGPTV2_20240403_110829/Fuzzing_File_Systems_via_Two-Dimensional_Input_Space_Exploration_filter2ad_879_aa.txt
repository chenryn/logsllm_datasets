title:Fuzzing File Systems via Two-Dimensional Input Space Exploration
author:Wen Xu and
Hyungon Moon and
Sanidhya Kashyap and
Po-Ning Tseng and
Taesoo Kim
(cid:19)(cid:17)(cid:18)(cid:26)(cid:1)(cid:42)(cid:38)(cid:38)(cid:38)(cid:1)(cid:52)(cid:90)(cid:78)(cid:81)(cid:80)(cid:84)(cid:74)(cid:86)(cid:78)(cid:1)(cid:80)(cid:79)(cid:1)(cid:52)(cid:70)(cid:68)(cid:86)(cid:83)(cid:74)(cid:85)(cid:90)(cid:1)(cid:66)(cid:79)(cid:69)(cid:1)(cid:49)(cid:83)(cid:74)(cid:87)(cid:66)(cid:68)(cid:90)
Fuzzing File Systems via
Two-Dimensional Input Space Exploration
Wen Xu Hyungon Moon† Sanidhya Kashyap Po-Ning Tseng Taesoo Kim
†
Georgia Institute of Technology
Ulsan National Institute of Science and Technology
Abstract—File systems, a basic building block of an OS, are
too big and too complex to be bug free. Nevertheless, ﬁle systems
rely on regular stress-testing tools and formal checkers to ﬁnd
bugs, which are limited due to the ever-increasing complexity
of both ﬁle systems and OSes. Thus, fuzzing, proven to be an
effective and a practical approach, becomes a preferable choice,
as it does not need much knowledge about a target. However,
three main challenges exist in fuzzing ﬁle systems: mutating a
large image blob that degrades overall performance, generating
image-dependent ﬁle operations, and reproducing found bugs,
which is difﬁcult for existing OS fuzzers.
Hence, we present JANUS, the ﬁrst feedback-driven fuzzer
that explores the two-dimensional input space of a ﬁle system,
i.e., mutating metadata on a large image, while emitting image-
directed ﬁle operations. In addition, JANUS relies on a library
OS rather than on traditional VMs for fuzzing, which enables
JANUS to load a fresh copy of the OS, thereby leading to better
reproducibility of bugs. We evaluate JANUS on eight ﬁle systems
and found 90 bugs in the upstream Linux kernel, 62 of which have
been acknowledged. Forty-three bugs have been ﬁxed with 32
CVEs assigned. In addition, JANUS achieves higher code coverage
on all the ﬁle systems after fuzzing 12 hours, when compared
with the state-of-the-art fuzzer Syzkaller for fuzzing ﬁle systems.
JANUS visits 4.19× and 2.01× more code paths in Btrfs and ext4,
respectively. Moreover, JANUS is able to reproduce 88–100% of
the crashes, while Syzkaller fails on all of them.
I. INTRODUCTION
File systems are one of the most basic system services of an
operating system that play an important role in managing the
ﬁles of users and tolerating system crashes without losing data
consistency. Currently, most of the conventional ﬁle systems,
such as ext4 [8], XFS [64], Btrfs [59], and F2FS [30], run in
the OS kernel. Hence, bugs in ﬁle systems cause devastating
errors, such as system reboots, OS deadlock, and unrecoverable
errors of the whole ﬁle system image. In addition, they also
pose severe security threats. For instance, attackers exploit
various ﬁle system issues by mounting a crafted disk image [28]
or invoking vulnerable ﬁle system-speciﬁc operations [37]
to achieve code execution or privilege escalation on victim
machines. However, manually eliminating every bug in a ﬁle
system that has sheer complexity is a challenge, even for
an expert. For example, the latest implementation of ext4 in
Linux v4.18 comprises 50K lines of code, while that of Btrfs
is nearly 130K LoC. At the same time, many widely used
ﬁle systems are still under active development. File system
developers consistently optimize performance [72] and add new
features [11, 29], meanwhile introducing new bugs [26, 27, 40].
To automatically discover these potential bugs, most ﬁle
systems in development rely on the known stress-testing frame-
works (xfstests [63], fsck [56, 69], Linux Test Project [62], etc.)
that mostly focus on the regression of ﬁle systems with minimal
integrity checks. For example, one of the bugs we found in
ext4 (i.e., CVE-2018-10880) crashes the kernel by moving a
critical extended attribute out of the inode structure. We trigger
this bug by mounting a normal ext4 image formatted with
inline_data, which bypasses integrity checks in both xfstests
and fsck. In addition, some prior works have applied model
checking [73, 74] to ﬁnd ﬁle system bugs, which requires a
deep understanding of both the ﬁle system and OS states. This
is now impractical due to the increasing complexity of modern
OSes [2, 35, 68]. On the other hand, most of the veriﬁed ﬁle
systems [6, 9] are too immature to adopt in practice.
Another approach—fuzzing—is gaining traction. Fuzzing
not only requires minimal knowledge about the target software,
but also is an effective and a practical approach that has found
thousands of vulnerabilities [15, 18, 34, 76]. Hence, fuzzing is a
viable approach to automatically discover bugs in a wide range
of ﬁle systems (e.g., 54 in the Linux kernel). However, unlike
other ordinary targets, fuzzing ﬁle systems is dependent on two
inputs: a mounted disk image and a sequence of ﬁle operations
(i.e., system calls) that are executed on the mounted image.
Existing fuzzers either focus on mutating images as ordinary
binary inputs [21, 48, 57, 61] or generating random sets of
ﬁle operation-speciﬁc system calls [20, 25, 46]. Unfortunately,
they all fail to efﬁciently and comprehensively test ﬁle systems
because of the following three challenges.
First, a disk image is a large binary blob that is structured
but complicated, and the minimum size can be almost 100×
larger than the maximum preferred size of general fuzzers [76],
which dramatically degrades the fuzzing throughput [21, 57, 61]
due to the heavy I/O involved in mutating images. Another
issue related to blob mutation is that existing fuzzers [20, 48]
mutate only non-zero chunks in an image. This approach is
unsound because these fuzzers do not exploit the properties
of structured data, i.e., ﬁle system layout, in which mutating
metadata blocks is more effective than mutating data blocks. In
addition, without any knowledge about the ﬁle system layout,
existing fuzzers also fail to ﬁx any metadata checksum after
corrupting metadata blocks. The second challenge is that ﬁle
operations are context-aware workloads, i.e., a dependence
exists between an image and the ﬁle operations executed on
(cid:165)(cid:1)(cid:19)(cid:17)(cid:18)(cid:26)(cid:13)(cid:1)(cid:56)(cid:70)(cid:79)(cid:1)(cid:57)(cid:86)(cid:15)(cid:1)(cid:54)(cid:79)(cid:69)(cid:70)(cid:83)(cid:1)(cid:77)(cid:74)(cid:68)(cid:70)(cid:79)(cid:84)(cid:70)(cid:1)(cid:85)(cid:80)(cid:1)(cid:42)(cid:38)(cid:38)(cid:38)(cid:15)
(cid:37)(cid:48)(cid:42)(cid:1)(cid:18)(cid:17)(cid:15)(cid:18)(cid:18)(cid:17)(cid:26)(cid:16)(cid:52)(cid:49)(cid:15)(cid:19)(cid:17)(cid:18)(cid:26)(cid:15)(cid:17)(cid:17)(cid:17)(cid:20)(cid:22)
(cid:25)(cid:18)(cid:25)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:52:33 UTC from IEEE Xplore.  Restrictions apply. 
it. In particular, the real-time status of a mounted ﬁle system
determines which ﬁle objects a set of system calls can operate
on, and the invocation of a particular system call brings changes
to the object being operated on. Unfortunately, existing system
call fuzzers [20, 25, 46], which independently generate random
system calls with hard-coded ﬁle paths, fail to emit meaningful
sequences of ﬁle operations, and cover deep code paths of a
ﬁle system. The third issue with existing fuzzers is the aspect
of reproducing found bugs. Most of the existing fuzzers that
target OSes [20, 25, 46] or ﬁle systems [48] test generated
inputs without reloading a fresh copy of the OS instance or
ﬁle system image, i.e., they do not use a non-aging OS and
ﬁle system. The reason they do not re-initialize the OS or ﬁle
systems is that they rely on VM, QEMU, or user-mode Linux
(UML) [13] instances that take seconds to reload a fresh copy.
To overcome this issue, they reuse these instances, thereby
leading to dirty OS states, which eventually results in unstable
executions and irreproducible bugs.
We address the aforementioned challenges with JANUS, an
evolutionary feedback-driven fuzzer, that effectively explores
the two-dimensional input space of a disk ﬁle system. JANUS
addresses the ﬁrst problem by exploiting the structured data
property in the form of metadata, i.e., it mutates only metadata
blocks of a seed image,
thereby drastically pruning the
searching space of the input. Second, we propose the image-
directed syscall fuzzing technique to fuzz ﬁle operations, i.e.,
JANUS not only stores generated system calls but also deduces
the runtime status of every ﬁle object on the image after these
system calls complete. JANUS then uses the speculated status as
feedback to generate a new set of system calls, thereby emitting
context-aware workloads. During each fuzzing iteration, JANUS
performs image fuzzing with higher priority and then invokes
image-directed syscall fuzzing to fully explore a target ﬁle
system. Finally, JANUS solves the reproducibility problem,
which is tightly coupled with the scalability of OS fuzzing as
well as OS aging, by always loading a fresh copy of the OS
to test the ﬁle system-related OS functionalities with the help
of a library OS (i.e., Linux Kernel Library [54]), running in
user space.
With JANUS, we fuzzed eight popular ﬁle systems in the
upstream Linux kernel (v4.16–v4.18) for four months. Our
evaluation shows that JANUS achieves at most 4.19× more
code coverage than the state-of-the-art OS fuzzer Syzkaller.
Moreover, our choice of using a library OS enables us
to reproduce 88-100% of crashes, while Syzkaller fails to
reproduce any. Until now, we have successfully found 90 bugs,
and developers have already acknowledged 62 of them, 43 of
which have been ﬁxed with 32 CVEs assigned.
This paper makes the following contributions:
• Issues. We identify three prominent issues of existing
ﬁle systems fuzzers: (1) fuzzing a large blob image is
inefﬁcient; (2) fuzzers do not exploit the dependence
between a ﬁle system image and ﬁle operations; (3)
fuzzers use aging OSes and ﬁle systems, which results in
irreproducible bugs.
• Approach. We design and implement an evolutionary
ﬁle system fuzzer, called JANUS, that efﬁciently mutates
metadata blocks in a large seed image while generating
image-directed workloads to extensively explore a target
ﬁle system. JANUS further leverages a library OS (i.e.,
LKL) other than a VM to test OS functionalities, so as to
provide a clean-slate OS image in a matter of milliseconds.
• Impact. We evaluate JANUS on eight ﬁle systems and ﬁnd
90 bugs in the upstream kernel, 62 and 43 of which have
been acknowledged and patched with 32 CVEs assigned.
Moreover, JANUS outperforms Syzkaller regarding code
coverage on all selected ﬁle systems. In particular, JANUS
eventually visits 4.19× and 2.01× more code paths than
Syzkaller when fuzzing Btrfs and ext4, respectively, for
12 hours. Meanwhile, JANUS can reproduce 88-100% of
the found crashes, while Syzkaller fails to reproduce any.
Threat Model.
In this work, we assume that an attacker is
privileged to mount a fully crafted disk image on a target
machine and operate ﬁles stored on the image to exploit
security bugs in an in-kernel ﬁle system. Practical ways exist
for an attacker to achieve this without root privilege, including:
(1) Auto-mounting. Modern OSes automatically mount an
untrusted plugged-in drive if it supports the corresponding ﬁle
system, which is exploited by several infamous attacks such
as Stuxnet [28], "evil maid attack" [60], etc.; (2) Unprivileged
mounts. macOS allows a non-root user to mount an Apple disk
image applying various ﬁle systems such as HFS, HFS+, APFS,
etc., and a number of bugs are found in these ﬁle systems that
lead to memory read restriction bypass and code execution
in the kernel [38, 39, 77]. Linux also allows unprivileged
users to mount any ﬁle system with FS_USERNS_MOUNT in a user
namespace [12].
II. BACKGROUND AND MOTIVATION
Commodity OSes usually implement a disk ﬁle system as a
kernel module. Users are tasked with mounting the large-size
and formatted image and manage data via ﬁle operations. In this
section, we ﬁrst describe general fuzzing approaches (§II-A)
and existing ﬁle system fuzzers (§II-B). Later, we explain why
they all fail to efﬁciently test ﬁle systems. We then summarize
the challenges and potential opportunities in ﬁle system fuzzing
(§II-C).
A. A Primer on Fuzzing
Fuzzing is a popular software-testing method that repeatedly
generates new inputs and injects them into a target program to
trigger bugs. It is one of the most effective approaches in prac-
tice to ﬁnd security bugs in modern software. For example, the
state-of-the-art fuzzer AFL [76] and its variants [4, 5, 15, 51],
have discovered numerous bugs in open-source software. To
effectively explore a target program, recent fuzzers leverage
the past code coverage to later direct the input generation.
Moreover, software such as an OS is the most critical program,
as discovered bugs allow privilege escalation on a target
machine. To fuzz OSes, several frameworks [20, 46, 61] extend
(cid:25)(cid:18)(cid:26)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:52:33 UTC from IEEE Xplore.  Restrictions apply. 
super
super
block
block
group
group
descriptors
descriptors
data block 
data block 
bitmap
bitmap
inode 
inode
bitmap
bitmap
inode 
inode
tables
tables
data
directory
directory
entryi
entryi
data extent 
extent 
nodei
nodei
data journal 
journal 
blocki
blocki
data
Fig. 1: The on-disk layout of an ext4 image. The gray blocks shows
metadata in use, which occupies merely 1% of the image size. Some
of them, including extent tree nodes, directory entries, and journal
blocks, are scattered in the image, while others (e.g., superblock,
group descriptors, etc.) are in the beginning.
File system
Min. size (MB)
ext4
2
XFS
16
Btrfs
100
F2FS GFS2
16
38
ReiserFS
33
NTFS
1
AFL
1
TABLE I: The minimal size of a block device allowed to be formatted
by various ﬁle systems with default options along with enabled
journaling or logging. Most of the image sizes exceed the size of a
fuzzing input suggested by AFL (1MB).
feedback-driven fuzzing approaches to trigger kernel bugs by
invoking randomly generated system calls.
B. File System Fuzzing
A disk ﬁle system has two-dimensional input space: (1) the
structured ﬁle system image format; and (2) ﬁle operations that
users invoke to access ﬁles stored on a mounted image. Several
ﬁle system fuzzing tools use a generic fuzzing infrastructure
to target either images or ﬁle operations.
1) Disk Image Fuzzer: A disk image is a large structured
binary blob. The blob has (1) user data and (2) several
management structures, called metadata, that a ﬁle system
needs to access, load, recover, and search data or to fulﬁll
other speciﬁc requirements of a ﬁle system. Figure 1 presents
the on-disk layout of a typical ext4 image.1 However, the size
of metadata constitutes merely 1% of the image size [1]. On
the other hand, the minimal size of a valid image can be 100
MBs (see Table I), which further increases on enabling certain
features. Three issues occur with an image as a fuzzing input:
(1) Large input size leads to an exponential increase in the
input space exploration. Meanwhile, important metadata are
mutated infrequently. (2) A fuzzer performs frequent read and
write operations on input ﬁles. When fuzzing a disk image, it
repeatedly reads during mutation, writes after mutation, and
saves the image if necessary. As a result, the large size of a
disk image slows down essential ﬁle operations, leading to
huge performance overhead. (3) Finally, to detect metadata
corruption, several ﬁle systems (e.g., XFS v5, GFS2, F2FS, etc.)
introduce checksums to protect on-disk metadata. Hence, the
kernel rejects a corrupt image, with mutated metadata blocks
without correct checksums, during initialization.
Disk image fuzzers [21, 48, 57, 61, 69] enforce a ﬁle system
to mount and execute a sequence of ﬁle operations on the
mutated disk images to trigger ﬁle system-speciﬁc bugs. Early
fuzzers [21, 57] ineffectively mutate bytes at random offsets in a
valid image to generate new images or mutate bytes in metadata
blocks only. These approaches incur heavy disk I/O from
loading and saving entire images. Moreover, these blind fuzzing
techniques generate poor-quality images without utilizing past
coverage. To overcome this, most recent fuzzers [20, 48] are
1We have listed its ﬁle hierarchy in Figure 9 including ﬁles and directories.
driven by code coverage. Moreover, they extract all the non-zero
chunks in a seed image for mutation. This approach touches
most of the metadata blocks and improves fuzzing performance
by decreasing input size. Nevertheless, these non-zero chunks
not only contain non-zero data blocks but also discard the
zero initialized metadata blocks, which results in sub-optimal
ﬁle system fuzzing. In addition, as metadata blocks are not
precisely located, this approach fails to ﬁx their checksums.
2) File Operation Fuzzer: Since ﬁle systems are part of
the OS, a general approach to fuzz them is to invoke a set
of system calls [20, 25, 46]. Although porting these fuzzers
to target ﬁle system operations is straightforward, they fail
to efﬁciently fuzz ﬁle systems for two reasons: First, ﬁle
operations modify only ﬁle objects (e.g., directories, symbolic
links, etc.) that exist on the image, and a completed operation
affects particular objects. However, existing OS fuzzers do not
consider the dynamic dependence between an image and ﬁle
operations, as they blindly generate system calls, that explore
a ﬁle system superﬁcially. For example, the state-of-the-art
OS fuzzer, Syzkaller, generates system calls based upon static
grammar rules describing the data types of every argument and
return value for every target system call. Therefore, Syzkaller
is able to generate a single semantically correct system call but
fails to explore the collective behavior of a set of system calls
and the modiﬁed ﬁle system image. For instance, Syzkaller may
emit multiples of open() calls on a ﬁle with its old path that
has been either renamed (rename()) or removed (unlink()).
Second, existing OS fuzzers [20, 61] mostly use virtualized
instances (e.g., KVM, QEMU, etc.) to run a target OS without
reloading a fresh copy of the OS or ﬁle system for every testing
input for the sake of performance. Unfortunately, fuzzing with
an aging OS or ﬁle systems has two issues: (1) The execution
of an aging OS becomes non-deterministic after processing
numerous system calls. For example, kmalloc() which depends
on prior allocations, behaves differently across runs. Sometimes
a kernel component (e.g., journaling system) quietly fails and
detaches from the OS without triggering any ﬁle system crash
during a long-run fuzzing. (2) A bug found by these fuzzers
accumulates the impact of thousands of invoked system calls,
which impedes the generation of a stable proof-of-concept for
developers to reproduce the bug and debug it [19].
3) File System Fuzzer: As mentioned before, most fuzzers
either fuzz a binary input [34, 76] or use a sequence of system
calls to fuzz the OS [20, 25]. However, to fuzz a ﬁle system,
we need to mutate two inputs: (1) the binary image (i.e., a ﬁle
system image) and (2) the corresponding workload (i.e., a set
of ﬁle system speciﬁc system calls). Unfortunately, combining
these two existing fuzzing techniques is not straightforward.
Recently, Syzkaller tried to achieve both by mutating non-zero
chunks in an image, while independently generating context-
unaware workloads to test the mutated image, which is still
unsound and ineffective.
C. Challenges of Fuzzing a File System
We summarize a set of challenges of fuzzing ﬁle systems
in the Linux kernel, and present our insights in designing
(cid:25)(cid:19)(cid:17)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:52:33 UTC from IEEE Xplore.  Restrictions apply. 
JANUS to overcome these challenges. Note that our insights
are applicable to other OSes as well.
Handling large disk images as input. An image fuzzer
should effectively fuzz a complicated, large disk image by (1)
mutating scattered metadata in the image with checksum, and