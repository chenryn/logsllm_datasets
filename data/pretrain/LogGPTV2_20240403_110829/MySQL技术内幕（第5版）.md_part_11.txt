图1-5里的 grade_event表还隐含了这样一个要求：所有的日期必须唯一，因为每个日期要
成绩册里的页的概念
在某种程度上，这种担心是有道理的，它需要做更多的工作。记录两个表肯定会比记录
不过，我们现在需要把多个表的信息进行组合。如果你是我，那么在第一次听说这种事的
（2）当把各个分数放到 score 表中的时候，记录事件ID，不记录日期。
换句话说，尽管你可能还未意识到这一点，但你在成绩册里所做的事，与我把信息放到两
口
口你需要把考试成绩记录在表格的每一个格里，这些格都要按学生姓名和考试日期进行
请看下面两个事实。
与通过推测来判断考分类别的做法相比，这种方法更好一些。因为现在能够从记录在数据
的两组信息当中的第二组，而它也正好对应于grade_event表里的内容。
当中的一组，而它正好对应于score表里的内容。
排列（姓名由上往下排列，考试日期则由左往右排列）。这正是我刚才讲过的两组信息
或Q。于是，你又在表格的顶部把考试日期与考试类型关联起来了。这正是我刚才讲过
你要如何才能知道各日期所对应的考试类型呢？你或许会这样做：在日期上方写一个T
患于未然，事先想好如何处理这些问题。因此，我们现在假设：你有时也会需要
起来，这也使得我们有时很难清楚地分辨出自己所拥有的信息是有多种类型，
念体现了我们对信息的思维方式，同时这也表明：把信息妥善地放到
“这种奇怪的情况永远不会
1.4MySOL 教程
数
进
要
---
## Page 44
细节。
绩考评这个示例里，MySQL 会负责考虑通过事件 ID 将信息汇集到一起，你不必去关心其中的
将一个事物与另一样事物进行关联，从而在多个信息源里把你最想知道的信息提取出来。在成
方式（根据事件ID）查出考分类别。别忘了，像MySQL这类的关系数据库系统最擅长的就是：
的就不会是一组分散的数据块了。
赖数据库引擎来收集数据，并把它以一种对你来讲很有意义的方式呈现出来。这样，你所看到
才能按照最符合你目标的方式来安排你的数据。不过，确定好如何表示信息之后，你便需要依
么大问题。
进行对比分析（如男生与女生的对比），或者想以灵活方式显示统计信息，那么情况就有所不同
情况如下。
或者使用其他像电子表格程序那样的工具，事情是否会变得更好”，这些都是不错的做法。对比
开始某项工作之前，多考虑几种情况，以及想一下“如果使用像MySQL这样的数据库系统，
猜到了，我对此持反对意见。原因很简单，你看本书的厚度就知道了。但是，当你在考虑如何
表示的”之后，你却因这些信息表示起来相当抽象和分散而开始不前。
要
很快就能从繁琐的评分工作中解脱出来。可是，在了解到“在数据库里分数信息实际上是如何
让人一眼即能看明白。但在图1-6所示的 score 表里，那两列都不见了，我们看到的是一个高
为它包含的列越来越让人看不懂。请看图1-4里的score表，里面既有考试日期又有考分类别，
喜若狂)，而且你也能把它们直接记录下来。
ID。这意味着，在同一天可以进行多次考试和测验（在听到这个消息之后，你的学生肯定会欣
能查出它具体发生的日期。还有，在grade_event 表里，具有唯一性的不再是日期，而是事件
要知道考试分数是属于测验的，还是属于考试的。这点也很容易做到。数据库可以采用同样的
忆
此时此刻，我们到了一个十字路口。大家之前还对电子化的成绩考评系统充满希望，觉得
现在，为了提前让大家了解到如何让MySQL 实现这种事物之间的关联，
例如，当从 score 表检索分数时，你想要看考试日期，而不想看到事件 ID。这点很容易估
另外一个需要考虑的地方是：在关系数据库里表示具有抽象和分散特性的数据，也不是什
这自然会引出一个问题：
数据库将在 grade_event 表里根据事件 ID查出考试日期，并显示在你面前。你可能还想
这些工作不是电子表格所擅长的，而关系数据库系统却能轻易地完成。
另一方面，如果你想只对一部分数据进行操作（如只统计测验分数，或者只统计考试分数)，
口成绩册由行和列构成，电子表格也是如此。
必须承认，
口
分数和考试分数按不同权重来统计可能会有点棘手，但相信你能办到。
电子表格程序能够执行计算，因此可以使用计算字段来统计每个学生的分数。将测验
第1章MySQL入门
在数据库
图1-6里的表结构不如前面的那几个看起来顺眼。score 表变得更加抽象，因
Jenny
Johnny
Missy
Billy
库建立之初，仔细考虑好信息在数据库里的表示方式是很有必要的，这样
name
图1-6score 表与 grade_event 表，通过事件 ID链接
event_idscore
“也许MySQL不适合我。不用数据库会不会好些？”想必大家已
17197138 9
15
。这使得它们在概念和外观上都很相似。
event_id
grade_event表
3
2
2012-10-01
2010
2012-09-23
2012-09-16
2012-09-09
date
category
00
，假设你想要查看
做
依
你
---
## Page 45
考试分数的语句又复杂了一点：
天进行考试和测试的分数是一样的道理。在对表的结构做了上述改动之后，根据指定日期查询
ID编号有助于把他们的分数区别开来。这与我们不用日期而是使用唯一的事件ID来区分同一
其中包含学生姓名
先，我们将 score表里的学生姓名替换成具有唯一性
索考试分数的查询相比，它算是简单的。
情况下，在执行完某个类似这样的查询之后，你可以将它保存起来；然后，在必要时你便可以
过，在每次你想要调用某个查询时，也有很多方法可以避免输入占用很多行的SQL语句。一般
来又长又复杂。只是要查出某一天的考试分数，就要写得这么复杂？没错，它是有点复杂。
本不会出现这种情况。
时候，如果你还在担心那种抽象和分散是否会让我们迷失，那么到这个时候你应该可以看到根
个日期将考试分数找出来。因此，当从数据库里以某种对我们很意义的形式将信息提取出来的
你不必知道事件ID就能获得结果。你只要指定你感兴趣的那个日期，然后MySQL便会根据
检索得出学生姓名、考试日期、考试分数和考分类别等信息。结果如下所示：
2012年9月23日的考试分数。下面这个查询可以将指定日期的考试分数查出来：
Student表
册
轻
Jenny
Johnny
Missy
Bily
name
里“ID”
为了让大家对查询过程先有所了解，
为什么要做这样的改动呢？只为解决可能会出现的两名学生同名的情况。使用唯一的学生
当然，在仔细查看该查询之后，你或许又会产生一些新的疑问。换句话说，这个查询看走
SELEcT student.name,grade_event.date,score.score,grade_event.category
是不是觉得上面这个表格有点面熟？你应该很熟悉，它与图1-4里的表格布局是一样的。
相当可怕，哈？这个查询通过将 score 表中的各行和 event 表中的各行进行连接（关联)，
FROM grade_event INNER JOIN score INNER JOIN student
WHERE grade_event.date = '2012-09-23';
FROMSCOreINNER
I grade_event.event_id = score.event_id
Jenny
Missy
Billy
name
栏的值，
图1-7
sex
M
Idate
2012-09-23
2012-09-23
2012-09-23
2012-09-23
Score表、student 表和 grade_event表，通过学生ID和事件ID链接
（name）和学号（student_id）两列（见图1-7)。
，而不使用“名称”
scoreI
A
score表
L
”栏里的值。）我们还要另外新建一个名为student的表，
3
2
Icategory
O
因为我们还需要对表的结构再做一次较大的改动。
我提前展示了这个示例。
6
9
9
9
55
一性的学生ID。（也就是说，我们将使用成绩
score
7
7738
6
15
，事实上，与我们真正用来检
grade event表
event_id
3
2
1.4MySOL教程
2012-10-01
2012-09-23
2012-09-16
2012-09-09
2012-0
2012-09-03
date
-09-06
category
T
100
首
起
这
---
## Page 46
查看。MySQL会列出ENUM列的合法枚举值：
可以让被允许的列值更加明确。如果你忘了它都有哪些可取值，就可以调用DESCRIBE 命令来
在某个有限集合内时，ENUM会非常管用。当然，我们也可以把该列定义为CHAR（1），但ENUM
上你可能需要使用多个列。）
事先知道成绩考评查询示例不需要用到多个列来表示名字。（没错，这是骗人的。我承认！实际
联盟”表里的简单，它只使用了一个单列，并没有将名和姓单独分开。这样做的原因在于：我
student_id。
列命令：
句)。稍后我会解释它的用途。
TABLE语句如下：
来对表里的数据进行汇总，从而统计出每位学生的缺勤天数。
一行都代表了一位在指定日期有缺席的学生。到期末的时候，我们将利用 MySQL 的统计功能
勤情况。这个表的内容相对比较简单，只包含一个学生ID和一个日期（见图1-8)。这个表的每
如比较男女生的成绩。
记录性别的列。可以利用这个列来统计班级里男女生的人数；也可以用它来做一些复杂的事情，
真的，不开玩笑。
后半部分，我们还会遇到这个查询命令，不过前后的差异在于后面的那个版本会让你眼前一亮。
26
sex用于表明某位学生是男生还是女生。这是一个ENUM（枚举）列，其取值只能是在该列
name是一个长度可变的字符串列，它最多可以存储 20个字符。这里的名字表示比“美史
这条 CREATE TABLE 语句将创建一个名为 student 的表，其中包含三列：name、sex 和
至此，我们几乎完成了成绩考评项目所有表的创建。最后还需再增加一个表，用来记录考
现在，我们知道了那些成绩考评表的样子，下面来创建它们。用于创建 student 表的cREATE
从图1-7里可以看到，student 表里增加了一些在成绩册里没有的内容：它多了一个用于
8 mysql sampdb < create_student.sql
请注意观察，我在CREATE TABLE语句里加入了一些新的内容（在末尾加上了ENGINE子
如果你现在为看不懂这个查询命令而担心，那么请放松。大部分人都看不懂。在本教程的
CREATE TABLE student
1.student 表
WHERE grade_event.date ='2012-09-23;
ENGINE=InnoDB;
PRIMARY KEY
name
第1章MySQL入门
SD
tudent_id INT UNSIGNED
VARCHAR(20)NOT NULL,
(student_id）
NOTNULLAUTO_INCREMENT
student_id
absence表
图1-8absence表
2012-09-20
2012000
date
---
## Page 47
可以在命令行上执行下面这条命令：
其配置与此不同的默认值。
服务器被重新配置过)。student 表的定义显式地包括了 ENGINE=InnoDB，防止了服务器为
子句，因此服务器会使用默认存储引擎来创建它们。如前所述，默认存储引擎是InnoDB（除非
项目表的创建，这些概念将会变得越来越清晰。
表里”，而“外键”指的是必须与另一个表里的某个键值相匹配的键值。随着后面更多成绩考评
很有必要的。
MySQL将某些约束施加到两个表之间的相互关系上，这种做法对成绩考评项目的各个表来讲是
integrity）”的功能。该功能是通过使用外键（foreign key）来实现的。也就是说，我们可以使用
式指定了InnoDB引擎就行了，因为我们需要InnoDB引擎所提供的称为“引I用完整性（referential
(MySQL5.5版本的默认引擎）和MyISAM（MySQL5.5版本之前的默认引擎）。
种表的处理器。MySQL有好几种存储引擎，都各有特色。其中两个最常用的引擎是InnoDB
将在创建新表时，为MySQL应该使用的存储引擎指定名字。“存储引擎”就是一种用来管理某