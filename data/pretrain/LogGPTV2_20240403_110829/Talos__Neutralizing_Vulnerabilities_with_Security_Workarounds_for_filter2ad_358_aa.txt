# Talos: Neutralizing Vulnerabilities with Security Workarounds for Rapid Response

**Authors:**
- Zhen Huang
- Mariana D'Angelo
- Dhaval Miyani
- David Lie

**Affiliation:**
- University of Toronto

**Email:**
- {z.huang, mariana.dangelo, dhaval.miyani}@mail.utoronto.ca

**Abstract:**
There is often a significant delay between the discovery of a vulnerability and the issuance of a patch. One method to mitigate this window of vulnerability is through configuration workarounds, which prevent the execution of vulnerable code at the cost of some lost functionality. However, these workarounds are only available for 25.2% of vulnerabilities.

To minimize the risks associated with this delay and address the limitations of configuration workarounds, we propose Security Workarounds for Rapid Response (SWRRs). SWRRs are designed to neutralize security vulnerabilities in a timely, secure, and unobtrusive manner. Similar to configuration workarounds, SWRRs prevent the execution of vulnerable code, but they leverage existing error-handling mechanisms within applications. This allows SWRRs to be mechanically inserted with minimal knowledge of the application and developer effort, achieving high coverage while remaining fast and easy to deploy.

We have designed and implemented Talos, a system that automatically instruments SWRRs into a given application. We evaluated Talos on five popular Linux server applications, running exploits against 11 real-world software vulnerabilities. Our results show that SWRRs neutralized all tested vulnerabilities. Quantitative measurements on 320 SWRRs indicate that they can neutralize 75.1% of potential vulnerabilities, with a loss of functionality comparable to configuration workarounds in 71.3% of cases. Overall, automatically generated SWRRs can safely mitigate 2.1 times more vulnerabilities than traditional configuration workarounds, with a similar impact on functionality.

**I. Introduction**

Patches are the standard solution for completely preventing the exploitation of security vulnerabilities. They fix vulnerabilities without typically affecting the application's functionality or performance. However, patches are not perfect. A significant drawback is the pre-patch window of vulnerability, the period between the discovery of a vulnerability and the issuance of a patch. This window is inherent due to the time and effort required to manually create and test patches. Although various techniques have been proposed to automatically generate patches, none have been widely adopted in practice. The length of this window can be substantial and is unlikely to decrease, given the complexity of creating security patches.

While the risk of exploitation during the pre-patch window can be reduced by keeping the vulnerability secret, this approach is merely security through obscurity. The market for zero-day vulnerabilities indicates that attackers may exploit known vulnerabilities before patches are issued. While better vulnerability detection and software engineering practices can reduce the pre-discovery period, the window between the discovery of a vulnerability and the issuance of a patch remains a challenge.

Configuration workarounds, which disable functionality related to the vulnerable code, are a common mechanism to address this window. For example, the Android Stagefright bug, discovered in 2015, affected almost 1 billion devices. A patch was not available until several months after the vulnerability was discovered, but a configuration workaround prevented the worst methods of exploitation. However, configuration workarounds are not ideal, as they have low coverage. Many vulnerabilities do not have corresponding configuration options, making it a matter of chance whether a vulnerability can be mitigated this way.

To address the pre-patch vulnerability window and the low coverage of configuration workarounds, we propose Security Workarounds for Rapid Response (SWRRs). These workarounds can be mechanically generated to address a large percentage of vulnerabilities. The main challenge in designing SWRRs is ensuring they work in a broad range of circumstances. SWRRs must be simple and generic, relying on few assumptions about applications or vulnerabilities. Like configuration workarounds, users must accept some minor loss of functionality in return for protection from a vulnerability until a patch is issued.

Our key insight for making SWRRs generic and easy to deploy is that application error-handling code, designed to gracefully handle unexpected errors, can be identified and invoked using static analysis. Based on this, we designed and implemented Talos, a system that detects such error-handling code and adds SWRRs to an application. Each SWRR prevents the execution of vulnerable code and calls the error-handling code instead. Developers can deploy SWRRs as patches or in-place, activated via runtime loadable configurations.

In summary, SWRRs provide benefits for both software developers and users. Developers gain more time to create, test, and deploy patches, while users are protected during the pre-patch vulnerability window. In cases where users cannot install a patch due to compatibility issues or because the software is no longer supported, SWRRs offer a viable alternative.

**Contributions:**
1. We propose SWRRs, a low-cost method for software developers to quickly protect users during the pre-patch vulnerability window.
2. We design and implement Talos, a tool that demonstrates the practical deployment of SWRRs by heuristically identifying error-handling code and transferring execution to those paths to avoid executing vulnerable code.
3. We evaluate the effectiveness and coverage of SWRRs inserted by Talos into five popular applications. When tested against 11 vulnerabilities, SWRRs successfully neutralized all vulnerabilities. Empirical tests on 320 Talos-generated SWRRs show they achieve 2.1 times the coverage of traditional configuration workarounds.

**II. Motivation**

**A. The Pre-Patch Vulnerability Window**

We conducted a study on the lifecycle and complexity of software patches for recent security vulnerabilities. The vulnerabilities were collected from various sources, including common vulnerability databases, vendor-specific security bulletins, and software bug databases. We focused on open-source applications that are popular, reasonably complex, mature, actively developed, and have a decent number of vulnerabilities.

For each application, we selected as many vulnerabilities as possible with the required information for manual examination. Table I summarizes our findings. The average delay between the disclosure of a vulnerability and the release of a patch is around 1.5 months. We find that 43.4% of vulnerabilities were patched within 7 days, 23.3% between 7 and 30 days, and 33.3% after 30 days. A recent study on the lifecycle of security vulnerabilities in operating systems and web browsers shows similar trends, with 65% of vulnerabilities patched within 7 days, 9% between 7 and 30 days, and 18% after 30 days.

To understand the bottleneck in releasing a patch, we examined the bug reports of 21 vulnerabilities. We found that the time and effort spent in constructing a patch is significant. For the 8 vulnerabilities that took more than one day to create a patch, 89% of the time was spent in construction. Nine vulnerabilities required two to six attempts to patch correctly. The complexity of patches, as shown in Table I, indicates that on average, patches involve non-trivial changes to the application code, spanning multiple functions and files. This suggests that the vulnerability window is inherent to the patching process, as human engineers must spend time understanding, designing, and testing the patches.

**Table I: Security Patch Statistics**

| Application | Vulns. | Delay (Days) | SLOC | Funcs | Files |
|-------------|--------|--------------|------|-------|-------|
| lighttpd    | 27     | 54           | 49   | 2     | 2     |
| apache      | 30     | 61           | 47   | 2     | 2     |
| squid       | 46     | 73           | 64   | 6     | 3     |
| proftpd     | 16     | 9            | 95   | 4     | 2     |
| sqlite      | 12     | 62           | 17   | 4     | 3     |
| **Average** | 26     | 52           | 54   | 4     | 2     |

**Table II: Configuration Workaround Statistics**

| Application | Vulns. | Workaround |
|-------------|--------|------------|
| lighttpd    | 27     | 25.2%      |
| apache      | 30     | 25.2%      |
| squid       | 46     | 25.2%      |
| proftpd     | 16     | 25.2%      |
| IE          | ...    | ...        |

This study highlights the need for a more effective and rapid response mechanism to address the pre-patch vulnerability window, leading to the development of SWRRs and the implementation of Talos.