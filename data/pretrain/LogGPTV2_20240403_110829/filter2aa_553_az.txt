习。
314
6.1 再探while循环
经过上一章的学习，读者已经熟悉了 while 循环。这里，我们用一个程
序来回顾一下，程序清单 6.1根据用户从键盘输入的整数进行求和。程序利
用了scanf()的返回值来结束循环。
程序清单6.1 summing.c程序
/* summing.c -- 根据用户键入的整数求和 */
#include 
int main(void)
{
long num;
long sum = 0L;     /* 把sum初始化为0 */
int status;
printf("Please enter an integer to be summed ");
printf("(q to quit): ");
status = scanf("%ld", &num);
while (status == 1)  /* == 的意思是“等于” */
{
sum = sum + num;
printf("Please enter next integer (q to quit): ");
315
status = scanf("%ld", &num);
}
printf("Those integers sum to %ld.\n", sum);
return 0;
}
该程序使用long类型以储存更大的整数。尽管C编译器会把0自动转换为
合适的类型，但是为了保持程序的一致性，我们把sum初始化为0L（long类
型的0），而不是0（int类型的0）。
该程序的运行示例如下：
Please enter an integer to be summed (q to quit): 44
Please enter next integer (q to quit): 33
Please enter next integer (q to quit): 88
Please enter next integer (q to quit): 121
Please enter next integer (q to quit): q
Those integers sum to 286.
6.1.1 程序注释
先看while循环，该循环的测试条件是如下表达式：
status == 1
==运算符是C的相等运算符（equality operator），该表达式判断status是
否等于1。不要把status== 1与status = 1混淆，后者是把1赋给status。根据测试
316
条件status == 1，只要status等于1，循环就会重复。每次循环，num的当前值
都被加到sum上，这样sum的值始终是当前整数之和。当status的值不为1时，
循环结束。然后程序打印sum的最终值。
要让程序正常运行，每次循环都要获取num的一个新值，并重置status。
程序利用scanf()的两个不同的特性来完成。首先，使用scanf()读取num的一
个新值；然后，检查scanf()的返回值判断是否成功获取值。第4章中介绍
过，scanf()返回成功读取项的数量。如果scanf()成功读取一个整数，就把该
数存入num并返回1，随后返回值将被赋给status（注意，用户输入的值储存
在num中，不是status中）。这样做同时更新了num和status的值，while循环进
入下一次迭代。如果用户输入的不是数字（如， q），scanf()会读取失败并
返回0。此时，status的值就是0，循环结束。因为输入的字符q不是数字，所
以它会被放回输入队列中（实际上，不仅仅是 q，任何非数值的数据都会导
致循环终止，但是提示用户输入q退出程序比提示用户输入一个非数字字符
要简单）。
如果 scanf()在转换值之前出了问题（例如，检测到文件结尾或遇到硬件
问题），会返回一个特殊值EOF（其值通常被定义为-1）。这个值也会引起
循环终止。
如何告诉循环何时停止？该程序利用 scanf()的双重特性避免了在循环中
交互输入时的这个棘手的问题。例如，假设scanf()没有返回值，那么每次循
环只会改变num的值。虽然可以使用num的值来结束循环，比如把num 
>
0（num大于0）或num ！= 0（num不等于0）作为测试条件，但是这样用户就
不能输入某些值，如-3或0。也可以在循环中添加代码，例如每次循环时询
问用户“是否继续循环？”，然后判断用户是否输入y。这个方法有些笨
拙，而且还减慢了输入的速度。使用scanf()的返回值，轻松地避免了这些问
题。
现在，我们来看看该程序的结构。总结如下：
把sum初始化为0
317
提示用户输入数据
读取用户输入的数据
当输入的数据为整数时，
输入添加给sum，
提示用户进行输入，
然后读取下一个输入
输入完成后，打印sum的值
顺带一提，这叫作伪代码（pseudocode），是一种用简单的句子表示程
序思路的方法，它与计算机语言的形式相对应。伪代码有助于设计程序的逻
辑。确定程序的逻辑无误之后，再把伪代码翻译成实际的编程代码。使用伪
代码的好处之一是，可以把注意力集中在程序的组织和逻辑上，不用在设计
程序时还要分心如何用编程语言来表达自己的想法。例如，可以用缩进来代
表一块代码，不用考虑C的语法要用花括号把这部分代码括起来。
总之，因为while循环是入口条件循环，程序在进入循环体之前必须获
取输入的数据并检查status的值，所以在 while 前面要有一个 scanf()。要让循
环继续执行，在循环内需要一个读取数据的语句，这样程序才能获取下一个
status的值，所以在while循环末尾还要有一个scanf()，它为下一次迭代做好
了准备。可以把下面的伪代码作为while循环的标准格式：
获得第1个用于测试的值
当测试为真时
处理值
获取下一个值
318
6.1.2 C风格读取循环
根据伪代码的设计思路，程序清单6.1可以用Pascal、BASIC或
FORTRAN来编写。但是C更为简洁，下面的代码：
status = scanf("%ld", &num);
while (status == 1)
{
/* 循环行为 */
status = scanf("%ld", &num);
}
可以用这些代码替换：
while (scanf("%ld", &num) == 1)
{
/*循环行为*/
}
第二种形式同时使用scanf()的两种不同的特性。首先，如果函数调用成
功，scanf()会把一个值存入num。然后，利用scanf()的返回值（0或1，不是
num的值）控制while循环。因为每次迭代都会判断循环的条件，所以每次迭
代都要调用scanf()读取新的num值来做判断。换句话说，C的语法特性让你可
以用下面的精简版本替换标准版本：
当获取值和判断值都成功
处理该值
319
接下来，我们正式地学习while语句。
320
6.2 while语句
while循环的通用形式如下：
while ( expression )
statement
statement部分可以是以分号结尾的简单语句，也可以是用花括号括起来
的复合语句。
到目前为止，程序示例中的expression部分都使用关系表达式。也就是
说，expression是值之间的比较，可以使用任何表达式。如果expression为真
（或者更一般地说，非零），执行 
statement部分一次，然后再次判断
expression。在expression为假（0）之前，循环的判断和执行一直重复进行。
每次循环都被称为一次迭代（iteration），如图6.1所示。
图6.1 while循环的结构
6.2.1 终止while循环
321
while循环有一点非常重要：在构建while循环时，必须让测试表达式的
值有变化，表达式最终要为假。否则，循环就不会终止（实际上，可以使用
break和if语句来终止循环，但是你尚未学到）。考虑下面的例子：
index = 1;
while (index 
int main(void)
322
{
int n = 5;
while (n 
int main(void)
{
324
int n = 0;
while (n 
int main(void)
{
int n = 0;
while (n++ < 3);      /* 第7行 */
printf("n is %d\n", n); /* 第8行 */
printf("That's all this program does.\n");
return 0;
}
该程序的输出如下：
n is 4
That's all this program does.
如前所述，循环在执行完测试条件后面的第 1 条语句（简单语句或复合
语句）后进入下一轮迭代，直到测试条件为假才会结束。该程序中第7行的
326
测试条件后面直接跟着一个分号，循环在此进入下一轮迭代，因为单独一个
分号被视为一条语句。虽然n的值在每次循环时都递增1，但是第8行的语句
不是循环的一部分，因此只会打印一次循环结束后的n值。
在该例中，测试条件后面的单独分号是空语句（null statement），它什
么也不做。在C语言中，单独的分号表示空语句。有时，程序员会故意使用
带空语句的while语句，因为所有的任务都在测试条件中完成了，不需要在
循环体中做什么。例如，假设你想跳过输入到第1个非空白字符或数字，可
以这样写：
while (scanf("%d", &num) == 1)
; /* 跳过整数输入 */
只要scanf()读取一个整数，就会返回1，循环继续执行。注意，为了提
高代码的可读性，应该让这个分号独占一行，不要直接把它放在测试表达式
同行。这样做一方面让读者更容易看到空语句，一方面也提醒自己和读者空
语句是有意而为之。处理这种情况更好的方法是使用下一章介绍的continue
语句。