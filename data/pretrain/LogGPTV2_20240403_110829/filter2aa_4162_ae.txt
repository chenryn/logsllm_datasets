psql变量name的值。参阅 "Variables 变量" 节获取细节。
.TP
\fB%`\fIcommand\fB`\fR
command的输出， 类似于通常的反引号（back-tick）替换。
.PP
 要在提示符里插入百分号，键入%%。缺省提示符等效于 '%/%R%# ' 用于 prompts 1 和 2，以及'>> ' 用于 prompt 3。
.sp
.RS
.B "Note:"
注意:  这个特性是无耻地从tcsh 里剽窃来的。
.RE
.sp
.SS "COMMAND-LINE EDITING 命令行编辑"
.PP
\fBpsql\fR 为了编辑和检索命令行的方便支持 readline 和历史库。 命令历史存放在你的家目录的一个叫 .psql_history 的文件里， 并且当 psql 启动的时候会装载进来。 还支持 Tab 补齐，尽管该补齐逻辑并不是一个 SQL 分析器必备的。 如果因某些原因你不喜欢 tab 补齐，你可以把下面几行放在你的家目录的一个叫\fI.inputrc\fR 的文件里关闭这个特性：
.sp
.nf
$if psql
set disable-completion on
$endif
.sp
.fi
（这不是 psql 的特性， 是\fBReadline\fR 的。参考它的文档获取更多细节。）
.SH "ENVIRONMENT 环境"
.TP
\fBHOME\fR
 初始化文件（.psqlrc）和命令历史文件（\fI.psql_history\fR）的目录。
.TP
\fBPAGER\fR
 如果查询结果在一页里放不下，那么它们被定向到这个命令。 典型的值是 more 或者 less。 缺省的是平台相关的。我们可以用\fB\\pset\fR 命令关闭分页器。
.TP
\fBPGDATABASE\fR
 缺省连接的数据库
.TP
\fBPGHOST\fR
.TP
\fBPGPORT\fR
.TP
\fBPGUSER\fR
 缺省连接参数
.TP
\fBPSQL_EDITOR\fR
.TP
\fBEDITOR\fR
.TP
\fBVISUAL\fR
\fB\\e\fR 命令使用的编辑器。这些变量是按照上面的顺序检查的；设置最早的最先使用。
.TP
\fBSHELL\fR
\fB\\!\fR 命令执行的命令。
.TP
\fBTMPDIR\fR
 存储临时文件的目录。缺省是\fI/tmp\fR。
.SH "FILES"
.TP 0.2i
\(bu
 在启动之前，psql 视图读取并 执行来自文件\fI$HOME/.psqlrc\fR 的命令。 它将用于设置客户端或者服务器的风格（使用\fB\\set\fR 和\fBSET\fR 命令）。
.TP 0.2i
\(bu
 命令行历史存储在\fI$HOME/.psql_history\fR。
.SH "NOTES 注意"
.TP 0.2i
\(bu
 一些 psql的早期版本允许一个单字母的反斜杠命令（元命令）的第一个参数直接跟在命令后面， 而不用空白间隔。出于兼容性原因，这个特性仍然在某些程度上被支持，但是我不准备在这里详细解释，因为我不鼓励这样使用。 不过如果你收到莫名其妙的信息，想想这个用法。例如
.sp
.nf
testdb=>\fB\\foo\fR
Field separator is "oo".
.sp
.fi
 可能不是你想要的东西。
.TP 0.2i
\(bu
\fBpsql\fR 只能与同版本的服务器平稳地工作。 这不意味着其他组合会完全失败，但是可能有微小的或者不那么微小的问题。 如果服务器的版本不同，反斜杠命令是特别容易失效的。
.SH "EXAMPLES 例子"
.PP
 第一个例子演示了如何把一个查询分成多个行进行输入。注意提示符的变化：
.sp
.nf
testdb=>\fBCREATE TABLE my_table (\fR
testdb(>\fB first integer not null default 0,\fR
testdb(>\fB second text\fR
testdb->\fB);\fR
CREATE TABLE
.sp
.fi
 现在再看看表定义：
.sp
.nf
testdb=>\fB\\d my_table\fR
             Table "my_table"
 Attribute |  Type   |      Modifier
-----------+---------+--------------------
 first     | integer | not null default 0
 second    | text    |
.sp
.fi
 把提示符变成更有趣的东西：
.sp
.nf
testdb=>\fB\\set PROMPT1 '%n@%m %~%R%# '\fR
peter@localhost testdb=>
.sp
.fi
 假设你用数据填充了表并且想看一眼：
.sp
.nf
peter@localhost testdb=> SELECT * FROM my_table;
 first | second
-------+--------
     1 | one
     2 | two
     3 | three
     4 | four
(4 rows)
.sp
.fi
 你可以用\fB\\pset\fR 命令让这个查询看起来不一样：
.sp
.nf
peter@localhost testdb=>\fB\\pset border 2\fR
Border style is 2.
peter@localhost testdb=>\fBSELECT * FROM my_table;\fR
+-------+--------+
| first | second |
+-------+--------+
|     1 | one    |
|     2 | two    |
|     3 | three  |
|     4 | four   |
+-------+--------+
(4 rows)
peter@localhost testdb=>\fB\\pset border 0\fR
Border style is 0.
peter@localhost testdb=>\fBSELECT * FROM my_table;\fR
first second
----- ------
    1 one
    2 two
    3 three
    4 four
(4 rows)
peter@localhost testdb=>\fB\\pset border 1\fR
Border style is 1.
peter@localhost testdb=>\fB\\pset format unaligned\fR
Output format is unaligned.
peter@localhost testdb=>\fB\\pset fieldsep ","\fR
Field separator is ",".
peter@localhost testdb=>\fB\\pset tuples_only\fR
Showing only tuples.
peter@localhost testdb=>\fBSELECT second, first FROM my_table;\fR
one,1
two,2
three,3
four,4
.sp
.fi
 还可以用短（缩写）命令：
.sp
.nf
peter@localhost testdb=>\fB\\a\\t\\x\fR
Output format is aligned.
Tuples only is off.
Expanded display is on.
peter@localhost testdb=>\fBSELECT * FROM my_table;\fR
-[ RECORD 1 ]-
first  | 1
second | one
-[ RECORD 2 ]-
first  | 2
second | two
-[ RECORD 3 ]-
first  | 3
second | three
-[ RECORD 4 ]-
first  | 4
second | four
.sp
.fi
.SH "译者"
.B Postgresql 中文网站
.B 何伟平 