# TEA系列算法101
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## TEA系列算法学习
TEA（Tiny Encryption
Algorithm）微型加密算法是一种易于描述的基于块的加密手法。通常来说，TEA加密算法会作用在两个32bit的无符号整数上（又或者可以理解成一个64bit的整数），并且会使用一个128bit的数字作为密钥。其拥有一个叫做[Feistel
结构](https://en.wikipedia.org/wiki/Feistel_cipher)的密码学结构。这种密码学结构通俗的来讲就是会将加密的plaintext分成L、R两部分，并且满足
`L_{i+1} = R_i, R_{i+1} = F(K_i,R_i) \oplus L_i` 这种交换式的加密方式的一种结构。
TEA加密算法使用了64轮的加密算法结构，并且是成对的执行加密轮次。在加密周期中，每个密钥都是按照相同的轮次进行密钥的混合，从而完成加密。这个加密算法中为了防止基于轮询过程中的可能发生的攻击，使用了黄金分割律数字转换的一个数字
2654435769 （0x9E3779B9）作为魔数。
>
> 值得注意的是，TEA算法中的密钥中存在缺陷。每一个key都等效于其他算法中的三个key，这意味着实际上key中只有126bit会生效。因此，TEA算法的散列性能不好。这个弱点甚至导致了Xbox被黑客攻击。并且TEA容易受到密钥相关攻击，这需要在相关密钥对下选择
> `2^{23}` 个明文，并且具有 $2^{32}$ 的时间复杂度 ———— 摘自wiki，下文会解释
###  TEA算法实现
算法加密过程可以用一个图简单的说明:
输入一定要是一个64bit的数字，或者可以写作一个拥有两个元素的32bit的数组。，并且需要一个两倍长度的key（`int[4]`)。整个加密流程如下:
    void encrypt (uint32_t v[2], const uint32_t k[4]) {
        uint32_t v0=v[0], v1=v[1], sum=0, i;           /* set up */
        uint32_t delta=0x9E3779B9;                     /* a key schedule constant */
        uint32_t k0=k[0], k1=k[1], k2=k[2], k3=k[3];   /* cache key */
        for (i=0; i>5) + k1);
            v1 += ((v0>5) + k3);
        }                                              /* end cycle */
        v[0]=v0; v[1]=v1;
    }
有几个重要的特征
  * 存在一个delta值，这个值会不停的增加到sum之中，形成一种循环的效果
  * 传入的v0，v1会和传入的key0，key1运算。v1优先参与，并且会有一个 **位移- >与密钥相加->异或**的过程。
  * v0 = 原先的v1值套用公式，v1 = 变化后的v0 套用公式
  * 之前用于计算delta的sum状态值也会参与
由于是一个类似 **delta状态变化+异或加密** 的过程，所以整个流程反过来写即可得到解密
    void decrypt (uint32_t v[2], const uint32_t k[4]) {
        uint32_t v0=v[0], v1=v[1], sum=0xC6EF3720, i;  /* set up; sum is 32*delta */
        uint32_t delta=0x9E3779B9;                     /* a key schedule constant */
        uint32_t k0=k[0], k1=k[1], k2=k[2], k3=k[3];   /* cache key */
        for (i=0; i>5) + k3);
            v0 -= ((v1>5) + k1);
            sum -= delta;
        }                                              /* end cycle */
        v[0]=v0; v[1]=v1;
    }
整个加密算法同样也适用于ECB,CBC等加密模式。
####  Davies–Meyer
在密码学中，单向压缩函数(one-way compression
function)是将两个固定长度的输入转换为固定长度的输出的功能。该转换是“单向”的，这意味着在给定输出的情况下，很难反向计算压缩前的输入。单向压缩函数与普通的数据压缩算法无关，而可以将其准确地（无损压缩）或近似（有损压缩）转换为原始数据。  
单向要锁函数通常是由 **块加密算法** 变形而来的，一种常见的就是`Davies–Meyer`算法。该算法将消息的每个块（mi）作为
**加密算法的密钥** 。 它将上一次加密生成的哈希值（Hi-1）作为 **要加密的明文** 输入。
之后，将输出密文与上一个哈希值（Hi-1）进行异或（⊕），以产生下一个哈希值（Hi）。
在第一轮中，如果没有以前的哈希值，它将使用一个恒定的预先指定的初始值（H0），算法可以写成  
`H_i = E_{m_i}(H_{i-1}) \oplus H_{i-1}`
其中的`E_{m_i}`可以理解成使用 **mi块作为密钥的加密算法**
####  TEA算法的弱点
TEA整个算法和密钥密切相关，这种算法我们称为 **密钥相关算法** 。这类算法如果密钥在加密过程中处理不当，很容易就会引发 **密钥相关攻击**
，感兴趣的[可以看这边](http://derekwilliams.us/docs/CPSC-6128-TEA-Encryption.pdf)，具体的数学原理可以看[这边](https://www.tayloredge.com/reference/Mathematics/VRAndem.pdf)，概括的说就是，TEA算法中的每一个密钥都会有其他三种相同的密钥。大致可用如下方式理解：
    v0 += ((v1>5) + k1);
_v1那一段也同理。_  
上述的逻辑，我们可以简写成:  
`V_0 = (C_1 + k_0) \oplus C_2 \oplus (C_2 + k_1)`  
其中`C_*`为常量。设此时我们让k0和k1的变化为`\Delta k_*`，变化后的我们写作`k'_*`，此时有公式:  
`V'_0 = (C_1 + k'_0) \oplus C_2 \oplus (C_2 + k'_1)`  
如上，如果我们想要保证`V'_0 == V_0`，一个最好的办法就是 **让这个异或过程发生的变化被抵消掉**
。根据[数学原理](https://www.tayloredge.com/reference/Mathematics/VRAndem.pdf)我们可以知道，如果将
**k0和k1的最高bit同时进行翻转，那么这个变化将会有1/2的概率被抵消**
如果TEA算法被当作 **基于Davies–Meyer的hash算法** 的话，就很容易因为散列度不足导致碰撞发生。
在[这边](http://derekwilliams.us/docs/CPSC-6128-TEA-Encryption.pdf)提到了关于TEA算法错误使用的例子。这里提到Xbox和Reiserfs都错误的使用了TEA算法，虽然xbox的源码我们找不到了，但是我找到了Reiserfs中[使用TEA的源代码](https://code.woboq.org/linux/linux/fs/reiserfs/hashes.c.html)，其中关键的如下:
    #define DELTA 0x9E3779B9
    #define FULLROUNDS 10        /* 32 is overkill, 16 is strong crypto */
    #define PARTROUNDS 6        /* 6 gets complete mixing */
    /* a, b, c, d - data; h0, h1 - accumulated hash */
    #define TEACORE(rounds)                            \
        do {                                \
            u32 sum = 0;                        \
            int n = rounds;                        \
            u32 b0, b1;                        \
                                        \
            b0 = h0;                        \
            b1 = h1;                        \
                                        \
            do                            \
            {                            \
                sum += DELTA;                    \
                b0 += ((b1 > 5)+b);    \
                b1 += ((b0 > 5)+d);    \
            } while(--n);                        \
                                        \
            h0 += b0;                        \
            h1 += b1;                        \
        } while(0)
    u32 keyed_hash(const signed char *msg, int len)
    {
        u32 k[] = { 0x9464a485, 0x542e1a94, 0x3e846bff, 0xb75bcfc3 };
        u32 h0 = k[0], h1 = k[1];
        u32 a, b, c, d;
        u32 pad;
        int i;
        /*      assert(len >= 0 && len = 16) {
            a = (u32) msg[0] |
                (u32) msg[1] = 12) {
            a = (u32) msg[0] |
                (u32) msg[1] = 8) {
            a = (u32) msg[0] |
                (u32) msg[1] = 4) {
            a = (u32) msg[0] |