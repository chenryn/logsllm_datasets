利用上面的方法可以解一下这道题：Pass-05
$deny_ext = array(“.php”,”.php5″,”.php4″,…”.htaccess”);
$file_name = trim($_FILES[‘upload_file’][‘name’]);
$file_name = deldot($file_name);//删除文件名末尾的点
$file_ext = strrchr($file_name, ‘.’);
$file_ext = strtolower($file_ext); //转换为小写
$file_ext = str_ireplace(‘::$DATA’, ”, $file_ext);//去除字符串::$DATA
$file_ext = trim($file_ext); //首尾去空
XXX.php. .
相同原理，听说为新加题目，查看几年前笔记确实没有此题
### 大小写绕过
根据Pass-06（大小写过滤）这个题，我们清楚看到是函数并没有对大小写进行检查，即使是列了黑名单，也会因为这个问题而绕过
直接分析源码
// 缩写为减少文章篇幅，实际看 Pass-04
$deny_ext = array(“.php”,”.php5″,”.php4″,…”.htaccess”);
$file_name = trim($_FILES[‘upload_file’][‘name’]);
$file_name = deldot($file_name);//删除文件名末尾的点
$file_ext = strrchr($file_name, ‘.’);
$file_ext = str_ireplace(‘::$DATA’, ”, $file_ext);//去除字符串::$DATA
$file_ext = trim($file_ext); //首尾去空
通过分析 Pass-04 我们一定记着但是当时有一句
$file_ext = strtolower($file_ext); //转换为小写
既然不再转换大小写，那就直接大小写绕过
### 白名单绕过
白名单绕过虽然相比于黑名单更加安全，但是还是会存在其他问题，在upload-labs master中，给出一个%00截断与0x00阶段的题目
Pass-12（%00截断）
$ext_arr = array(‘jpg’,’png’,’gif’);
// substr — 返回字符串的子串
// strrpos – 查找在字符串中最后一次出现的位置
$file_ext =
substr($_FILES[‘upload_file’][‘name’],strrpos($_FILES[‘upload_file’][‘name’],”.”)+1);
if(in_array($file_ext,$ext_arr)){
$temp_file = $_FILES[‘upload_file’][‘tmp_name’];
$img_path = $_GET[‘save_path’].”/”.rand(10, 99).date(“YmdHis”).”.”.$file_ext;
当网站上传XXX.php%00.jpg时，通过白名单绕过，保存文件时，遇到%00字符就会截断后面的.jpg,文件最终保存为XXX.php
Pass-13（0x00截断）
查看源代码发现 此题在上题将GET换为POST，利用Pass-11的方法 ，但在url解码中%00不会被解析，但是我们可以使用0x00进行截断
### 空字符绕过
参考：Pass-07
分析源码
$deny_ext = array(“.php”,”.php5″,”.php4″,…”.htaccess”);
$file_name = $_FILES[‘upload_file’][‘name’];
$file_name = deldot($file_name);//删除文件名末尾的点
$file_ext = strrchr($file_name, ‘.’);
$file_ext = strtolower($file_ext); //转换为小写
$file_ext = str_ireplace(‘::$DATA’, ”, $file_ext);//去除字符串::$DATA
先删掉最后的“.”，再返回“.”后面的字符，之后是大小写处理，直接上传“.php ”（php后面有个空格）即可绕过
### deldot()绕过
参考：Pass-08（deldot()）
分析源码
$deny_ext = array(“.php”,”.php5″,”.php4″,…”.htaccess”);
$file_name = trim($_FILES[‘upload_file’][‘name’]);
$file_ext = strrchr($file_name, ‘.’);
$file_ext = strtolower($file_ext); //转换为小写
$file_ext = str_ireplace(‘::$DATA’, ”, $file_ext);//去除字符串::$DATA
$file_ext = trim($file_ext); //首尾去空
先去空，然后返回“.”后面的字符，之后转换大小写，这里也有一个逻辑错误，直接返回最后一个点之后的消息，那直接后缀名改为“.php.”即可绕过
### 流特性绕过
参考：Pass-09
还是分析源码
$deny_ext = array(“.php”,”.php5″,”.php4″,…”.htaccess”);
$file_name = trim($_FILES[‘upload_file’][‘name’]);
$file_name = deldot($file_name);//删除文件名末尾的点
$file_ext = strrchr($file_name, ‘.’);
$file_ext = strtolower($file_ext); //转换为小写
$file_ext = trim($file_ext); //首尾去空
这次没有这一句
$file_ext = str_ireplace(‘::$DATA’, ”, $file_ext);
//去除字符串::$DATA
这个关于windows下文件的流特性
::$DATA 会把 之后的数据当成文件流处理，不会检测后缀名，保持“::$DATA”之前的文件名
### 双写绕过
参考：Pass-11
$file_name = trim($_FILES[‘upload_file’][‘name’]);
$file_name = str_ireplace($deny_ext,””, $file_name);
$temp_file = $_FILES[‘upload_file’][‘tmp_name’];
$img_path = UPLOAD_PATH.’/’.$file_name;
str_ireplace() 函数替换字符串中的一些字符（不区分大小写）
既然替换一次，可采用双写绕过
XXX.pphphp
注意⚠️：XXX.phphpp这样就是不行的，因为他会去掉从前面来说的第一个php，去掉后会成为XXX.hpp
除这些之外upload labs还有一道Pass-10（过滤）
直接分析源码
$deny_ext = array(“.php”,”.php5″,”.php4″,…”.htaccess”);
$file_name = trim($_FILES[‘upload_file’][‘name’]);
$file_name = deldot($file_name);//删除文件名末尾的点
$file_ext = strrchr($file_name, ‘.’);
$file_ext = strtolower($file_ext); //转换为小写
$file_ext = str_ireplace(‘::$DATA’, ”, $file_ext);//去除字符串::$DATA
$file_ext = trim($file_ext); //首尾去空
采用抓包添加后缀 .php. .
## 0x05 检测文件内容进行过滤
例如 Pass-04这道题，这道题除了可以采用 Pass-03 中的一种读源码的方法，更主要的是学习使用 .htaccess文件
分析源码，是在基础上添加了更多的后缀过滤
$file_name = trim($_FILES[‘upload_file’][‘name’]);
$file_name = deldot($file_name);//删除文件名末尾的点
$file_ext = strrchr($file_name, ‘.’);
$file_ext = strtolower($file_ext); //转换为小写
$file_ext = str_ireplace(‘::$DATA’, ”, $file_ext);//去除字符串::$DATA
$file_ext = trim($file_ext); //收尾去空
htaccess文件能够更改服务器的设置，全称为Hypertext
Access，称为超文本入口，提供了针对目录改变配置的方法，可在一个特定的文档目录中放置一个包含一个或多个指令的文件。
如果想详看可以参考或自行搜索：
对于这道题，我们可以上传一个.htaccess 文件重写服务器的文件解析
开启htaccess的方法：
打开apache的httpd.conf设置文件
查找到的AllowOverride None，将其改为AllowOverride All
创建一个.htaccess文件
内容写成：
AddType application/x-httpd-php .jpg,可将jpg文件解析为php文件
SetHandler application/x-httpd-php,可将其他所有文件解析为php文件
之后上传文件就可以了
### 二次渲染绕过
二次渲染指的是提取了文件中的图片数据，然后再对图片重新渲染，这样加在其中的恶意代码就不见了
例如Pass-17（二次渲染绕过）这个题
采用的二次渲染技术，就是根据用户上传的图片，新生成一个图片，将原始图片删除，将新图片添加到数据库中。
关于这道题，lmn写多少都不如这篇文章详细，所以干脆不写了，可以参考参考
处这两个以外也可以学习一下文件包含漏洞，例如，如果网站对jsp，php等文件内容进行校验，可以通过上传（无限制）的文件例如.txt文件，并通过例如php语句进行文件包含，从而达到目的
常见的文件包含例如：
  1. include()
  2. require()
  3. include_once()
  4. require_once()
include()，只生成警告（E_WARNING），并且脚本会继续
require()，会生成致命错误（E_COMPILE_ERROR）并停止脚本
include_once()与require_once()，如果文件已包含，则不会包含，其他特性如上
### upload其他优秀题目
Pass-18 19（条件竞争）
竞争条件：多个线程或者进程在读写一个共享数据时结果依赖于它们执行的相对时间的情形
先将文件上传到服务器，然后判断文件后缀是否在白名单里，如果在则重命名，否则删除
这里的原理就是上传info.php，边上传边访问，保证在上传之前访问到，利用burp的intruder模块不断上传
这里需要借助一段代码
’);?>
因为在没有文件时，w写参数会自动创建文件，并将后面的字放到前面的文件中，所以用burp的intruder连续访问，因为是多个进程或者线程在读写数据，其最终的的结果依赖于多个进程的指令执行顺序，也就是可能在被删除前访问到文件
Pass-20（/.绕过）
查看源码
save_name为页面上我们提交的文件名，因此抓包修改为upload-19.php/.
upload-19是因为上传处默认文件名就是这个
## 06 文件上传的危害
文件上传漏洞很容易带来严重的安全问题，可以利用文件上传漏洞上传Webshell
webshell，web指的是在web服务器上，shell是用脚本语言编写的脚本程序，通常黑会自己编写webshell，并上传到目标web服务器的页面的目录下，然后通过目标系统进行入侵
根据不同的分类可以分为很多类，比如根据功能可以分为大马和小马，小马通常指一句话木马，例如将这句话写入一个后缀为.asp的文件中，然后传到服务器上面。eval方法将request(“pass”)转换成代码执行，request函数的作用是应用外部文件。
根据脚本的类型可以分为jsp、asp、aspx、php等
现在对于不同的web服务器系统对应的有不同的web服务端程序，windows端主流的有iis，linux端主流的有Nginx。这些服务对服务器会带来一些隐患，这些服务器上都存在一些漏洞，很容易被黑客利用
利用上面提到的文件上传绕过方法，可以将恶意文件传入服务器中
### 文件上传绕waf
通过绕过waf达到防止恶意文件被拦截的效果，这里给出几种大家屡试不爽的方法
  1. 有时候可以通过之前给出的替换不常见的但可达到相同解析效果的文件名
  2. 制造一些“垃圾数据”，可以降低waf的检测
  3. 例如早期的安全狗就可以通过多加几个filename绕过
  4. （看到有人说有些waf会检测是否为POST，如果为POST则会校验数据包内容，这里更改POST为GET）
  5. 删除Conten-Type字段
  6. 删除Content-Disposition字段里的空格
  7. 修改Content-Disposition字段值的大小写
  8. （文件名处回车）
参考文章：
[https://blog.csdn.net/skynet_x/article/details/109285482?utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~aggregatepage~first_rank_ecpm_v1~rank_v31_ecpm-10-109285482.pc_agg_new_rank&utm_term=upload-labs-master&spm=1000.2123.3001.4430](https://blog.csdn.net/skynet_x/article/details/109285482?utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~aggregatepage~first_rank_ecpm_v1~rank_v31_ecpm-10-109285482.pc_agg_new_rank&utm_term=upload-labs-master&spm=1000.2123.3001.4430)
[https://blog.csdn.net/qq_42357070/article/details/82881393?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164543284216780255288719%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=164543284216780255288719&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-82881393.pc_search_insert_ulrmf&utm_term=webshell&spm=1018.2226.3001.4187](https://blog.csdn.net/qq_42357070/article/details/82881393?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164543284216780255288719%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=164543284216780255288719&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-82881393.pc_search_insert_ulrmf&utm_term=webshell&spm=1018.2226.3001.4187)