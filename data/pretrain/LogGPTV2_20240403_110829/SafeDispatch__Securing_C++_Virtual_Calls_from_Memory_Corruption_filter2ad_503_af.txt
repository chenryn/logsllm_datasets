checking. Although the additional data integrity guarantee
provided by vtable checking may mitigate some attacks, we
feel that the signiﬁcantly reduced overhead of our method
checking and hybrid approaches offer a more realistic tradeoff
for complex, high performance applications like web browsers.
VIII. RELATED WORK
The research community has developed numerous defenses
to increase the cost of mounting low-level attacks that corrupt
control data, steadily driving attackers to discover new classes
of exploitable programming errors like vtable hijacking. In
this section we survey the existing defenses most relevant to
vtable hijacking, consider their effectiveness at mitigating such
attacks, and compare them to SAFEDISPATCH.
Reference Counting. Reference counting [30], [31], [32]
is a memory management technique used in garbage collectors
and complex applications to track how many references point
to an object during program execution. When the number
of references reaches zero, the object may safely be freed.
Use-after-free errors can be avoided using reference counting
by checking that an object has a non-zero number of refer-
ences before calling any methods with the object. While this
may help increase the attack complexity of vtable hijacking
attacks mounted by exploiting use-after-free bugs, reference
counting can have a non-trivial run-time overhead, and it
also makes reclaiming cyclic data-structures complicated. Most
importantly, however, reference counting cannot fundamentally
prevent such attacks. In reference counting, the number of
references to an object is stored in the heap, and thus an
adversary capable of corrupting vtable pointers would also be
able to corrupt reference counts, thereby circumventing any
reference counting based defense. In contrast, SAFEDISPATCH
instrumentation is placed in the program binary which resides
in read-only memory and thus is not susceptible to corruption
by an attacker.
Memory Safety. Programs written in memory safe lan-
to be free of ex-
guages are guaranteed, by construction,
ploitable,
low-level memory errors. This kind of memory
safety guarantee is clearly stronger than the guarantee that
SAFEDISPATCH provides. However, unfortunately programs
written in such languages often suffer signiﬁcant performance
overhead from runtime checking to ensure that all memory
operations are safe. This overhead is sufﬁcient to preclude the
use of memory safe languages in many performance critical
applications. In contrast, SAFEDISPATCH provides strong secu-
rity guarantees without any assumptions about memory safety
and incurs only minimal overhead.
There has also been extensive research on C compilers
which insert additional checks or modify language features
to ensure memory safety, for example CCured [33], [34],
Cyclone [35], Purify [36], and Deputy [37]. While these
techniques can help prevent vtable hijacking, they often require
some amount of user annotations, and even if they don’t, their
run-time overheads are bigger than SAFEDISPATCH, especially
on large-scale applications like Chrome.
Control Flow Integrity. Control ﬂow integrity (CFI) is a
technique that inserts sufﬁcient checks in a program to ensure
that every control ﬂow transfer jumps to a valid program loca-
tion [13]. Recent advances have greatly reduced the overhead
of CFI, in some cases to as low as 5%, by adapting efﬁcient
checks for indirect targets [14], using static analysis [15],
harnessing further compiler optimizations from a trustworthy
high-level inline-reference monitor representation [16], or in-
corporating low-level optimizations [17]. The main difference
between our work and these previous CFI approaches lies in
13
the particular point in design space that we chose to explore.
Broadly speaking, previous CFI approaches are designed to
secure all indirect jumps whereas we focus speciﬁcally on
protecting C++ dynamic dispatch, which has become a popular
target for exploits. In this more speciﬁc setting, we provide
stronger guarantees than recent CFI approaches while incurring
very low performance overhead.
VTable Hijacking Prevention. The GCC compiler has
recently been extended with a promising new “vtable veri-
ﬁcation” feature developed by Google [27], [28], concurrently
and indenpendently from SAFEDISPATCH. The GCC approach
compiles each C++ source ﬁle to an object ﬁle extended with
local vtable checking data, and the local checking data is
combined at load-time into a program-wide checking table.
Each virtual method call site is then instrumented with a call
to a checking function which uses the program-wide table to
determine if the control-ﬂow transfer should be allowed. In
many respects, the GCC approach is roughly equivalent to
our unoptimized vtable checking approach. In this light, our
work extends GCC’s approach in the following ways: (1) we
explore and empirically evaluate not only vtable checking, but
also method checking (2) through this evaluation, we discover
and propose a new optimization opportunity in the form of a
hybrid approach and (3) we inline common checks. In our
implementation, vtable checking without inlining (which is
roughly what GCC does) leads to an overhead of about 25%.
Through optimizations 2 and 3 above, we reduce the overhead
to only 2%. On the other hand, the GCC approach supports
separate compilation much more easily than our approach,
which requires whole program analysis and proﬁling.
Another technique for preventing vtable hijacking is VT-
Guard [38], a feature of the Visual Studio C++ compiler.
This approach inserts a secret cookie into each vtable and
checks the cookie before the vtable is used at runtime. While
this approach has very low performance overhead, it is less
the attacker can still overwrite a vtable
secure than ours:
pointer to make it point
to any vtable generated by the
compiler, something we prevent. Moreover, if the secret cookie
is revealed through an information disclosure attack, then the
VTGuard protection mechanism can be circumvented.
Memory Allocators and Dynamic Heap Monitoring.
Dynamic heap monitoring, like that used in Undangle [39]
and Valgrind [40], can help discover memory errors during
testing, but are not suitable for deployment as they can impose
up to 25x performance overhead, which is unacceptable for
the applications we aim to protect. The DieHard [3], [41]
custom memory manager has proven effective at providing
probabilistic guarantees against several classes of memory
errors, including heap-based buffer overﬂows and use-after-
free errors by randomizing and spreading out the heap. While
DieHard overhead is often as low at 8%, it demands a heap
at least 2x larger than what the protected application would
normally require, which is unacceptable for the applications we
aim to protect. Furthermore, large applications like a browser
often use multiple custom memory allocators for performance,
whereas DieHard requires the entire application to use a single
allocator.
Data Execution Prevention (DEP). After an adversary
has compromised program control ﬂow, they must arrange for
their attack code to be executed. DEP [2] seeks to prevent an
attacker from writing malicious shellcode directly to memory
and then jumping to that code. Conceptually every memory
page is either writable or executable, but never both. DEP can
mitigate vtable hijacking after the attack has been mounted by
preventing the attacker from executing code they’ve allocated
somewhere in memory. However, attackers can still employ
techniques like Return Oriented Programming [42] (ROP) to
circumvent DEP after control ﬂow has been compromised
from a vtable hijacking attack. DEP is also often disabled
for JIT. While DEP tries to mitigate the damage an attacker
can do after compromising control ﬂow, SAFEDISPATCH seeks
to prevent a class of control ﬂow compromises (those due to
vtable hijacking) from arising in the ﬁrst place.
Address Space Layout Randomization (ASLR). Like
DEP, ASLR [43] seeks to severely limit an attackers ability
to execute their attack code after control ﬂow has been
compromised. It does this by randomly laying out pages in
memory so that program and library code will not reside at
predictable addresses, making it difﬁcult to mount ROP and
other attacks. Unfortunately, for compatibility, many prevalent,
complex applications are still forced to load key libraries
at predictable addresses, limiting the effectiveness for ASLR
in these applications. SAFEDISPATCH helps secure such ap-
plications by preventing vtable-hijacking-based control ﬂow
compromises from arising in the ﬁrst place.
IX. CONCLUSION
Robust vtable hijacking attacks are increasingly common,
as seen in sophisticated, high proﬁle attacks like Pinkie Pie’s
recent exploits of the Chrome browser [12]. In this paper,
we addressed the growing threat of vtable hijacking with
SAFEDISPATCH, an enhanced C++ compiler to ensure that
control ﬂow transfers at method invocations are valid according
to the static C++ semantics.
SAFEDISPATCH ﬁrst performs class hierarchy analysis
(CHA) to determine, for each class c in the program, the
set of valid method implementations that may be invoked
by an object of static type c, according to C++ semantics.
SAFEDISPATCH then uses the information produced by CHA
to instrument
the program with dynamic checks, ensuring
that, at runtime, all method calls invoke a valid method
implementation according to C++ dynamic dispatch rules.
To minimize performance overhead, SAFEDISPATCH per-
forms optimizations to inline and order checks based on
proﬁling data and adopts a hybrid approach which combines
method checking and vtable checking. We were able to reduce
runtime overhead to just 2.1% and memory overhead to just
7.5% in the ﬁrst vtable-safe version of the Google Chromium
browser which we built with the SAFEDISPATCH compiler.
We believe that
these results are a solid ﬁrst step to-
wards hardening method dispatch against attack, and that
they provide a good foundation for future exploration in this
space, including ways of handling separate compilation, and
additionally protecting indirect control ﬂow through arbitrary
functions pointers.
ACKNOWLEDGMENT
We would like to thank Hovav Shacham and Stephen
Checkoway for clarifying the importance of vtable hijacking
14
[24] Apple, “Sunspider 1.0 javascript benchmark suite,” https://www.webkit.
[25] Mozilla,
org/perf/sunspider/sunspider.html, 2013.
javascript
//krakenbenchmark.mozilla.org/, 2013.
“Kraken
1.1
benchmark
suite,”
http:
[26] WebKit, “Rendering performance tests,” https://code.google.com/p/
webkit-mirror/source/browse/PerformanceTests/, 2013.
[27] C. Tice, “Improving function pointer security for virtual method dis-
patches,” http://gcc.gnu.org/wiki/cauldron2012?action=AttachFile&do=
get&target=cmtice.pdf, 2012.
[28] ——, “Gcc vtable security hardening proposal,” http://gcc.gnu.org/ml/
gcc-patches/2012-11/txt00001.txt, 2012.
[29] D. Dewey and J. T. Gifﬁn, “Static detection of c++ vtable escape
vulnerabilities in binary code,” in NDSS, 2012.
[30] G. E. Collins, “A method for overlapping and erasure of lists,” in CACM,
1960.
[31] D. J. Roth and D. S. Wise, “One-bit counts between unique and sticky,”
in ISMM, 1998.
[32] Y. Levanoni and E. Petrank, “An on-the-ﬂy reference-counting garbage
collector for java,” in TOPLAS, 2006.
[33] G. C. Necula, J. Condit, M. Harren, S. McPeak, and W. Weimer,
“Ccured: type-safe retroﬁtting of legacy software,” in TOPLAS, 2005.
J. Condit, M. Harren, S. McPeak, G. C. Necula, and W. Weimer,
“Ccured in the real world,” in PLDI, 2003.
[34]
[35] T. Jim, J. G. Morrisett, D. Grossman, M. W. Hicks, J. Cheney, and
Y. Wang, “Cyclone: A safe dialect of c,” in USENIX ATEC, 2002.
[36] W. Xu, D. C. DuVarney, and R. Sekar, “An efﬁcient and backwards-
compatible transformation to ensure memory safety of c programs,” in
SIGSOFT, 2004.
J. Condit, M. Harren, Z. Anderson, D. Gay, and G. C. Necula,
“Dependent types for low-level programming,” in ESOP, 2007.
[37]
[38] M. R. Miller and K. D.Johnson, “Using virtual table protections to
prevent the exploitation of object corruption vulnerabilities,” http://
patentimages.storage.googleapis.com/pdfs/US20120144480.pdf, 2010.
J. Caballero, G. Grieco, M. Marron, and A. Nappa, “Undangle: early
detection of dangling pointers in use-after-free and double-free vulner-
abilities,” in ISSTA, 2012.
[39]
[40] N. Nethercote and J. Seward, “Valgrind: a framework for heavyweight
dynamic binary instrumentation,” in PLDI, 2007.
[41] G. Novark and E. D. Berger, “Dieharder: securing the heap,” in CCS,
2010.
[42] H. Shacham, “The geometry of innocent ﬂesh on the bone: return-into-
libc without function calls (on the x86),” in CCS, 2007.
[43] P. Team, “Pax address
grsecurity.net/docs/aslr.txt.
space layout
randomization,” http://pax.
attacks in the initial stage of the project. We would also like
to thank the anonymous reviewers for helping us improve our
paper. This work was supported in part by the National Science
Foundation through grants 1228967 and 1219172.
REFERENCES
[1] C. Cowan, C. Pu, D. Maier, H. Hintony, J. Walpole, P. Bakke, S. Beattie,
A. Grier, P. Wagle, and Q. Zhang, “Stackguard: automatic adaptive de-
tection and prevention of buffer-overﬂow attacks,” in USENIX Security,
1998.
[2] Microsoft, “A detailed description of the data execution prevention
(dep) feature in windows xp service pack 2, windows xp tablet pc
edition 2005, and windows server 2003,” http://support.microsoft.com/
kb/875352.
[3] E. D. Berger and B. G. Zorn, “Diehard: probabilistic memory safety
for unsafe languages,” in PLDI, 2006.
rix, “Smashing c++ vptrs,” http://www.phrack.org/issues.html?issue=
56&id=8, 2000.
[4]
[5] O. Vertanen, “Java type confusion and fault attacks,” in FDTC, 2006.
[6] D. Dewey and J. Gifﬁn, “Static detection of c++ vtable escape vulner-
abilities in binary code,” in NDSS, 2012.
[7] Microsoft, “Vulnerability in Internet Explorer could allow remote
code execution,” http://technet.microsoft.com/en-us/security/advisory/
961051, 2008.
[8] H. D. Moore,
“Microsoft
memory
Microsoft-Internet-Explorer-Data-Binding-Memory-Corruption.html,
2010.
Internet Explorer
binding
http://packetstormsecurity.com/ﬁles/86162/
corruption,”
data
[9] Google, “Heap-use-after-free in WebCore (exploitable),” https://code.
google.com/p/chromium/issues/detail?id=162835, 2012.
[10] Symantec, “Microsoft
function table re-
mote code execution vulnerability,” http://www.symantec.com/security
response/vulnerability.jsp?bid=54951, 2012.
Internet Explorer virtual
[11] VUPEN, “Exploitation of Mozilla Firefox use-after-free vulnera-
bility,” http://www.vupen.com/blog/20120625.Advanced Exploitation
of-Mozilla Firefox UaF CVE-2012-0469.php, 2012.
Linux
a
http://scarybeastsecurity.blogspot.com/2013/02/
boss,”
exploiting-64-bit-linux-like-boss.html, 2013.
“Exploiting
[12] C.
Evans,
64-bit
like
[13] M. Abadi, M. Budiu, U. Erlingsson, and J. Ligatti, “Control-ﬂow
integrity,” in CCS, 2005.
[14] C. Zhang, T. Wei, Z. Chen, L. Duan, L. Szekeres, S. McCamant,
D. Song, and W. Zou, “Practical control ﬂow integrity & randomization
for binary executables,” in Proceedings of the 34th IEEE Symposium
on Security and Privacy, San Francisco, CA, 2013.
[15] B. Zeng, G. Tan, and G. Morrisett, “Combining control-ﬂow integrity
and static analysis for efﬁcient and validated data sandboxing,” in Pro-
ceedings of the 18th ACM conference on Computer and communications
security. ACM, 2011, pp. 29–40.
[16] B. Zeng, G. Tan, and ´U. Erlingsson, “Strato-a retargetable framework
for low-level inlined-reference monitors,” in USENIX Security Sympo-
sium, 2013.
[17] M. Zhang and R. Sekar, “Control ﬂow integrity for cots binaries,” in
USENIX Security Symposium, 2013.
[18] C. Grier, S. Tang, and S. T. King, “Secure web browsing with the op
web browser,” in IEEE Security and Privacy, 2008.
[19] C. Reis, A. Barth, and C. Pizano, “Browser security: lessons from
google chrome,” in CACM, 2009.
[20] A. Barth, C. Jackson, and C. Reis, “The security architecture of the
chromium browser,” in Technical Report, 2008.
[21] C. Lattner and V. Adve, “Llvm: A compilation framework for lifelong
program analysis & transformation,” in CGO, 2004.
J. Dean, D. Grove, and C. Chambers, “Optimization of object-oriented
programs using static class hierarchy analysis,” in ECOOP, 1995.
[22]
[23] Google, “Octane javascript benchmark suite,” https://developers.google.
com/octane/, 2013.
15