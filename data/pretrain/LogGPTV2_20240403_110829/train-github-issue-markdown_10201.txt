Choose one: bug report (possibly)
I'm new to Babel and trying to figure out the correct way to make use of
babel-external-helpers in a project that uses ES6 modules and targets Node and
browsers.
I have a lengthy question about this on StackOverflow, and a repo
demonstrating the issue, but the SO question hasn't received much attention
yet. In the interest of brevity, I'll give the condensed version here.
I've created a babel-external-helpers file with the `-t global` option, so I
am referencing it in my index.js file like this so that it can run before
everything else and add the helpers to the global scope:
    import './babel-helpers';
    export * from './fileThatNeedsExternalHelpers';
If I run this through Babel with the `env` preset and the `external-helpers`
plugin, I get this output:
    'use strict';
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _fileThatNeedsExternalHelpers = require('./fileThatNeedsExternalHelpers');
    Object.keys(_fileThatNeedsExternalHelpers).forEach(function (key) {
      if (key === "default" || key === "__esModule") return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function get() {
          return _fileThatNeedsExternalHelpers[key];
        }
      });
    });
    require('./babel-helpers');
We can see that what corresponds to the `import` has been moved to the end of
the file, and my code won't run because my `fileThatNeedsExternalHelpers`
needs the external helpers to be in the global scope when it executes (e.g. it
uses syntax which, when transpiled, uses the `defineProperty` helper). If I
manually edit the output file to move `require('./babel-helpers');` above the
`var` line, everything runs fine.
So my questions are:
  * What is the reason for rearranging imports and exports like this, and is there a (simple) way to control/suppress it?
  * Am I going about using external helpers the wrong way? Is there a better approach? I believe I could put the helpers in a module and explicitly `import` them in each file that needs them, but that doesn't seem like a very good solution.
software | version(s)  
---|---  
Babel | 6.26.0  
node | 8.9.1  
npm | 5.0.3  
Operating System | Win 10