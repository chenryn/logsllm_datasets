ten in C, and more than thirteen times faster than applications written in Python. Effi-
ciency is the highest priority, and some features make optimizing code easy. This goes
hand in hand with a soft real-time garbage collector, which allows you to specify the
amount of time that should be spent collecting memory. This feature becomes
important during game development, where an ordinary garbage collector may slow
down the rendering of frames on the screen if it uses too much time collecting mem-
ory. It’s also useful in real-time systems that need to run in very strict time frames.
 Nim can be used alongside other much slower languages to speed up certain
performance-critical components. For example, an application written in Ruby that
requires certain CPU-intensive calculations can be partially written in Nim to gain a
considerable speed advantage. Such speed-ups are important in areas such as scien-
tific computing and high-speed trading.
 Applications that perform I/O operations, such as reading files or sending data
over a network, are also well supported by Nim. Web applications, for example, can be
written easily using a number of web frameworks like Jester (https://github
.com/dom96/jester). Nim’s script-like syntax, together with its powerful, asynchro-
nous I/O support, makes it easy to develop these applications rapidly.
 Command-line applications can benefit greatly from Nim’s efficiency. Also,
because Nim applications are compiled, they’re standalone and so don’t require any
Licensed to   
6
CHAPTER 1
Why Nim?
bulky runtime dependencies. This makes their distribution incredibly easy. One such
application written in Nim is Nimble; it’s a package manager for Nim that allows users
to install Nim libraries and applications.
 These are just a few use cases that Nim fits well; it’s certainly not an exhaustive list.
 Another thing to keep in mind is that, at the time of writing, Nim is still in develop-
ment, not having yet reached version 1.0. Certain features haven’t been implemented
yet, making Nim less suited for some applications. For example, Nim includes a back-
end that allows you to write JavaScript applications for your web pages in Nim. This
backend works, but it’s not yet as mature as the rest of the language. This will improve
with time.
 Of course, Nim’s ability to compile to JavaScript makes it suitable for full-stack
applications that need components that run on a server and in a browser. This is a
huge advantage, because code can easily be reused for both the browser and server
components of the application.
 Now that you know a little bit about what Nim is, its history, and some of the appli-
cations that it’s particularly well suited for, let’s look at some of Nim’s features and talk
about how it works. 
1.1.2
Core features
In many ways, Nim is very innovative. Many of Nim’s features can’t be found in any
other programming language. If you enjoy learning new programming languages,
especially those with interesting and unique features, then Nim is definitely the lan-
guage for you.
 In this section, we’ll look at some of the core features of Nim—in particular, the
features that make Nim stand out from other programming languages:
 A facility called metaprogramming, used for, among many things, molding the
language to your needs.
 Style-insensitive variable, function, and type names. By using this feature, which
is slightly controversial, you can treat identifiers in whatever style you wish, no
matter if they were defined using camelCase or snake_case.
 A type system that’s rich in features such as generics, which make code easier to
write and maintain.
 Compilation to C, which allows Nim programs to be efficient and portable. The
compilation itself is also very fast.
 A number of different types of garbage collectors that can be freely selected or
removed altogether.
METAPROGRAMMING
The most practical, and in some senses unique, feature of Nim is its extensive
metaprogramming support. Metaprogramming allows you to read, generate, analyze,
and transform source code. It was by no means a Nim invention, but there’s no other
programming language with metaprogramming that’s so extensive and at the same
Licensed to   
7
What is Nim?
time easy to pick up as Nim’s. If you’re familiar with Lisp, then you might have some
experience with metaprogramming already.
 With metaprogramming, you treat code as data in the form of an abstract syntax tree.
This allows you to manipulate existing code as well as generate brand new code while
your application is being compiled.
 Metaprogramming in Nim is special because languages with good metaprogram-
ming features typically belong to the Lisp family of languages. If you’re already famil-
iar with the likes of Java or Python, you’ll find it easier to start using Nim than Lisp.
You’ll also find it more natural to learn how to use Nim’s metaprogramming features
than Lisp’s.
 Although it’s generally an advanced topic, metaprogramming is a very powerful
feature that you’ll get to know in far more detail in chapter 9 of this book. One of the
main benefits that metaprogramming offers is the ability to remove boilerplate code.
Metaprogramming also allows the creation of domain-specific languages (DSLs); for
example,
html:
body:
p: "Hello World"
This DSL specifies a bit of HTML code. Depending on how it’s implemented, the DSL
will likely be translated into Nim code resembling the following:
echo("")
echo("
")
echo("
Hello World")
echo("
")
echo("")
That Nim code will result in the following output:
Hello World
With Nim’s metaprogramming, you can define DSLs and mix them freely with your
ordinary Nim code. Such languages have many use cases; for example, the preceding
one can be used to create HTML templates for your web apps.
 Metaprogramming is at the center of Nim’s design. Nim’s designer wants to
encourage users to use metaprogramming in order to accommodate their style of pro-
gramming. For example, although Nim does offer some object-oriented program-
ming (OOP) features, it doesn’t have a class definition construct. Instead, anyone
wishing to use OOP in Nim in a style similar to that of other languages should use
metaprogramming to create such a construct. 
Licensed to   
8
CHAPTER 1
Why Nim?
STYLE INSENSITIVITY
Another of Nim’s interesting and likely unique features is style insensitivity. One of the
hardest things a programmer has to do is come up with names for all sorts of identifi-
ers like variables, functions, and modules. In many programming languages, these
names can’t contain whitespace, so programmers have been forced to adopt other
ways of separating multiple words in a single name. Multiple differing methods were
devised, the most popular being snake_case and camelCase. With Nim, you can use
snake_case even if the identifier has been defined using camelCase, and vice versa.
So you can write code in your preferred style even if the library you’re using adopted a
different style for its identifiers.
import strutils
echo("hello".to_upper())
echo("world".toUpper())
This works because Nim considers the identifiers to_upper and toUpper to be equal.
 When comparing identifiers, Nim considers the case of the first character, but it
doesn’t bother with the case of the rest of the identifier’s characters, ignoring the
underscores as well. As a result, the identifiers toUpper and ToUpper aren’t equal
because the case of the first character differs. This allows type names to be distin-
guished from variable names, because, by convention, type names should start with an
uppercase letter and variable names should start with a lowercase letter.
 The following listing shows one scenario where this convention is useful.
type
Dog = object
age: int
let dog = Dog(age: 3)
POWERFUL TYPE SYSTEM
One of the many characteristics that differentiate programming languages from one
another is their type system. The main purpose of a type system is to reduce the
opportunities for bugs in your programs. Other benefits that a good type system pro-
vides are certain compiler optimizations and better documentation of code.
 The main categories used to classify type systems are static and dynamic. Most pro-
gramming languages fall somewhere between the two extremes and incorporate ideas
from both. This is because both static and dynamic type systems require certain trade-
offs. Static typing finds more errors at compile time, but it also decreases the speed at
which programs can be written. Dynamic typing is the opposite.
Listing 1.1
Style insensitivity
Listing 1.2
Style insensitivity and type identifiers
The strutils module defines a procedure called toUpper.
You can call it using snake_case.
As it was originally defined, you can call it using camelCase.
The Dog type is defined with 
an uppercase first letter.
Only primitive types such as int 
start with a lowercase letter.
A dog variable can be safely defined because 
it won’t clash with the Dog type. 
Licensed to   
9
What is Nim?
 Nim is statically typed, but unlike some statically typed programming languages, it
also incorporates many features that make development fast. Type inference is a good
example of that: types can be resolved by the compiler without the need for you to
write the types out yourself (though you can choose to). Because of that, your pro-
gram can be bug-free and yet your development speed isn’t hindered. Nim also incor-
porates some dynamic type-checking features, such as runtime type information,
which allows for the dynamic dispatch of functions.
 One way that a type system ensures that your program is free of bugs is by verifying
memory safety. Some programming languages, like C, aren’t memory safe because
they allow programs to access memory that hasn’t been assigned for their use. Other
programming languages are memory safe at the expense of not allowing programs to
access low-level details of memory, which in some cases is necessary. Nim combines
both: it’s memory safe as long as you don’t use any of the unsafe types, such as ptr, in
your program, but the ptr type is necessary when interfacing with C libraries. Sup-
porting these unsafe features makes Nim a powerful systems programming language.
 By default, Nim protects you against every type of memory error:
 Arrays are bounds-checked at compile time, or at runtime when compile-time
checks aren’t possible, preventing both buffer overflows and buffer overreads.
 Pointer arithmetic isn’t possible for reference types as they’re entirely managed
by Nim’s garbage collector; this prevents issues such as dangling pointers and
other memory issues related to managing memory manually.
 Variables are always initialized by Nim to their default values, which prevents
variables containing unexpected and corrupt data.
Finally, one of the most important features of Nim’s type system is the ability to use
generic programming. Generics in Nim allow for a great deal of code reuse without
sacrificing type safety. Among other things, they allow you to specify that a single func-
tion can accept multiple different types. For example, you may have a showNumber
procedure that displays both integers and floats on the screen:
proc showNumber(num: int | float) =
echo(num)
showNumber(3.14)
showNumber(42)
Here, the showNumber procedure accepts either an int type or a float type. The |
operator specifies that both int and float can be passed to the procedure.
 This is a simple demonstration of Nim’s generics. You’ll learn a lot more about
Nim’s type system, as well as its generics, in later chapters. 
COMPILATION
I mentioned in the previous section that the Nim compiler compiles source code into
C first, and then feeds that source code into a C compiler. You’ll learn a lot more
about how this works in section 1.1.3, but right now I’ll talk about some of the many
practical advantages of this compilation model.
Licensed to   
10
CHAPTER 1
Why Nim?
 The C programming language is very well established as a systems programming
language and has been in use for over 40 years. C is one of the most portable pro-
gramming languages, with multiple implementations for Windows, Linux, Mac OS,
x86, AMD64, ARM, and many other, more obscure OSs and platforms. C compilers sup-
port everything from supercomputers to microcontrollers. They’re also very mature
and implement many powerful optimizations, which makes C very efficient.
 Nim takes advantage of these aspects of C, including its portability, widespread use,
and efficiency.
 Compiling to C also makes it easy to use existing C and C++ libraries—all you need
to do is write some simple wrapper code. You can write this code much faster by using
a tool called c2nim. This tool converts C and C++ header files to Nim code, which
wraps those files. This is of great benefit because many popular libraries are written in
C and C++.
 Nim also offers you the ability to build libraries that are compatible with C and
C++. This is handy if you want your library to be used from other programming lan-
guages. You’ll learn all about wrapping C and C++ libraries in chapter 8.
 Nim source code can also be compiled into Objective C and JavaScript. The Objec-
tive C language is mainly used for iOS software development; by compiling to it, you
can write iOS applications natively in Nim. You can also use Nim to develop Android
applications by using the C++ compilation backend. JavaScript is the client-side lan-
guage used by billions of websites; it’s sometimes called the “assembly language of the
web” because it’s the only programming language that’s supported by all the major
web browsers. By compiling to JavaScript, you can write client-side applications for
web browsers in Nim. Figure 1.1 shows the available Nim backends.
 You may now be wondering just how fast Nim is at compiling software. Perhaps
you’re thinking that it’s very slow; after all, Nim needs to translate source code to an
intermediate language first. But in fact it’s fairly fast. As an example, the Nim com-
piler, which consists of around 100,000 lines of Nim code, takes about 12 seconds to
Nim compiler  
C
C++
Objective C 
JavaScript
Allows
interfacing
with:  
Backend:
Figure 1.1
Compilation backends
Licensed to   
11
What is Nim?
compile on a MacBook Pro with a 2.7 GHz Intel Core i5 CPU. Each compilation is
cached, so the time drops to 5 seconds after the initial compilation. 
MEMORY MANAGEMENT
C and C++ both require you to manually manage memory, carefully ensuring that
what you allocate is deallocated once it’s no longer needed. Nim, on the other hand,
manages memory for you using a garbage collector. But there are situations when you
may want to avoid garbage collectors; they’re considered by many to be inadequate
for certain application domains, like embedded systems and games. For this reason,
Nim supports a number of different garbage collectors with different applications in
mind. The garbage collector can also be removed completely, giving you the ability to
manage memory yourself.
GARBAGE COLLECTORS
Switching between garbage collectors is easy. You just
need to specify the --gc: flag during compilation and replace
 with markandsweep, boehm, or none.
This was just a small taste of Nim’s most prominent features. There’s a lot more to it:
not just the unique and innovative features, but also the unique composition of fea-
tures from existing programming languages that makes Nim as a whole very unique
indeed. 
1.1.3
How does Nim work?
One of the things that makes Nim unique is its implementation. Every programming
language has an implementation in the form of an application, which either inter-
prets the source code or compiles the source code into an executable. These imple-
mentations are called an interpreter and a compiler, respectively. Some languages may
have multiple implementations, but Nim’s only implementation is a compiler. The
compiler compiles Nim source code by first translating the code to another program-
ming language, C, and then passing that C source code to a C compiler, which then
compiles it into a binary executable. The executable file contains instructions that
indicate the specific tasks that the computer should perform, including the ones spec-
ified in the original Nim source code. Figure 1.2 shows how a piece of Nim code is
compiled into an executable.
 The compilers for most programming languages don’t have this extra step; they
compile the source code into a binary executable themselves. There are also others
that don’t compile code at all. Figure 1.3 shows how different programming languages
transform source code into something that can be executed.
Executable
Nim code
Nim compiler
C code
C compiler
Figure 1.2
How Nim 
compiles source code
Licensed to   
12
CHAPTER 1
Why Nim?
Nim connects to the C compilation process in order to compile the C source code
that was generated by it. This means that the Nim compiler depends on an external C
compiler, such as GCC or Clang. The result of the compilation is an executable that’s
specific to the CPU architecture and OS it was compiled on.
 This should give you a good idea of how Nim source code is transformed into a
working application, and how this process is different from the one used in other pro-
gramming languages. Every time you make a change to your Nim source code, you’ll
need to recompile it.
 Now let’s look at Nim’s positive and negative aspects. 
1.2
Nim’s benefits and shortcomings
It’s important to understand why you might want to use a language, but it’s just as
important to learn why that language may not be correct for your particular use case.
 In this section, I’ll compare Nim to a number of other programming languages,
focusing on a variety of characteristics and factors that are typically used in such com-
parisons. After that, I’ll discuss some of the areas where Nim still needs to catch up
with other languages.
1.2.1
Benefits
As you read this book, you may wonder how Nim compares to the programming lan-
guages that you’re familiar with. There are many ways to draw a comparison and mul-
tiple factors that can be considered, including the language’s execution speed,
expressiveness, development speed, readability, ecosystem, and more. This section
looks at some of these factors to give you a better idea of the benefits of Nim.
Nim code 
Nim compiler 
C code 
C compiler 
Executable
Actions
Python code 
Python interpreter 
Actions
Java code 
Java compiler 
JAR ﬁle 
Actions
Java virtual machine
Figure 1.3
How the Nim compilation process 
compares to other programming languages
Licensed to   
13
Nim’s benefits and shortcomings
NIM IS EFFICIENT
The speed at which applications written in a programming language execute is often
used in comparisons. One of Nim’s goals is efficiency, so it should be no surprise that
it’s a very efficient programming language.
 C is one of the most efficient programming languages, so you may be wondering
how Nim compares. In the previous section, you learned that the Nim compiler first
translates Nim code into an intermediate language. By default, the intermediate lan-
guage is C, which suggests that Nim’s performance is similar to C’s, and that’s true.
 Because of this feature, you can use Nim as a complete replacement for C, with a
few bonuses:
 Nim has performance similar to C.
 Nim results in software that’s more reliable than software written in C.
 Nim features an improved type system.
 Nim supports generics.
 Nim implements an advanced form of metaprogramming.
In comparison to C, metaprogramming in Nim is unique, as it doesn’t use a prepro-
cessor but is instead a part of the main compilation process. In general, you can
expect to find many modern features in Nim that you won’t find in C, so picking Nim
as a C replacement makes a lot of sense.
 Table 1.1 shows the results of a small benchmark test.1 Nim matches C’s speed and
is significantly faster than Python.
In this benchmark, the Nim application’s runtime matches the speed of the C app and
is significantly faster than the app implemented in Python. Micro benchmarks such as
this are often unreliable, but there aren’t many alternatives. Nim’s performance
matches that of C, which is already one of the most efficient programming languages
out there. 
NIM IS READABLE
Nim is a very expressive language, which means that it’s easy to write Nim code that’s
clear to both the compiler and the human reader. Nim code isn’t cluttered with the
curly brackets and semicolons of C-like programming languages, such as JavaScript
1 You can read more about this benchmark test on Dennis Felsing’s HookRace blog: http://hookrace.net/
blog/what-is-special-about-nim/#good-performance.
Table 1.1
Time taken to find which numbers from 0 to 100 million are prime
Programming language
Time (seconds)
C
2.6
Nim
2.6
Python (CPython)
35.1
Licensed to   
14
CHAPTER 1
Why Nim?
and C++, nor does it require the do and end keywords that are present in languages
such as Ruby.
 Compare this expressive Nim code with the less-expressive C++ code
for i in 0 .. 
using namespace std;
int main()
{
for (int i = 0; i < 10; i++)
{
cout << i << endl;
}
return 0;
}
The Nim code is more readable and far more compact. The C++ code contains many
elements that are optional in Nim, such as the main function declaration, which is
entirely implicit in Nim.
 Nim is easy to write but, more importantly, it’s also easy to read. Good code read-
ability goes a long way. For example, it makes debugging easier, allowing you to spend
more time writing beautiful Nim code, cutting down your development time. 
NIM STANDS ON ITS OWN
This has been mentioned already, but it’s worth revisiting to describe how other lan-
guages compare, and in particular why some require a runtime.
 Compiled programming languages such as Nim, C, Go, D, and Rust produce an
executable that’s native to the OS on which the compiler is running. Compiling a Nim
application on Windows results in an executable that can only be executed on Win-
dows. Similarly, compiling it on Mac OS results in an executable that can only be exe-
cuted on Mac OS. The CPU architecture also comes into play: compilation on ARM
results in an executable that’s only compatible with ARM CPUs. This is how things
work by default, but it’s possible to instruct Nim to compile an executable for a differ-
ent OS and CPU combination through a process known as cross-compilation.
 Cross-compilation is usually used when a computer with the desired architecture
or OS is unavailable, or the compilation takes too long. One common use case would
be compiling for ARM devices such as the Raspberry Pi, where the CPU is typically slow.
More information about cross-compilation can be found in the Nim Compiler User
Guide: http://nim-lang.org/docs/nimc.html#cross-compilation.
 Among other things, the JVM was created to remove the need for cross-compilation.
You may have heard the phrase “write once, run anywhere.” Sun Microsystems created
Listing 1.3
Iterating from 0 to 9 in Nim
Listing 1.4