title:Principled Unearthing of TCP Side Channel Vulnerabilities
author:Yue Cao and
Zhongjie Wang and
Zhiyun Qian and
Chengyu Song and
Srikanth V. Krishnamurthy and
Paul Yu
Principled Unearthing of TCP Side Channel Vulnerabilities
Yue Cao
UC Riverside
Riverside, California
PI:EMAIL
Chengyu Song
UC Riverside
Riverside, USA
PI:EMAIL
Zhongjie Wang
UC Riverside
Riverside, California
PI:EMAIL
Srikanth V. Krishnamurthy
UC Riverside
Riverside, USA
PI:EMAIL
Zhiyun Qian
UC Riverside
Riverside, USA
PI:EMAIL
Paul Yu
U.S. Army Combat Capabilities
Development Command
Army Research Laboratory
Adelphi, USA
PI:EMAIL
ABSTRACT
Recent work has showcased the presence of subtle TCP side chan-
nels in modern operating systems, that can be exploited by o-path
adversaries to launch pernicious attacks such as hijacking a connec-
tion. Unfortunately, most work to date is on the manual discovery of
such side-channels, and patching them subsequently. In this work
we ask “Can we develop a principled approach that can lead to
the automated discovery of such hard-to-nd TCP side-channels?”
We identify that the crux of why such side-channels exist is the
violation of the non-interference property between simultaneous
TCP connections i.e., there exist cases wherein a change in state
of one connection implicitly leaks some information to a dierent
connection (controlled possibly by an attacker). To nd such non-
interference property violations, we argue that model-checking is
a natural t. However, because of limitations with regards to its
scalability, there exist many challenges in using model checking.
Specically, these challenges relate to (a) making the TCP code base
self-contained and amenable to model checking and (b) limiting
the search space of model checking and yet achieving reasonable
levels of code coverage. We develop a tool that we call SCENT (for
Side Channel Excavation Tool) that addresses these challenges in
a mostly automated way. At the heart of SCENT is an automated
downscaling component that transforms the TCP code base in a
consistent way to achieve both a reduction in the state space com-
plexity encountered by the model checker and the number and
types of inputs needed for verication. Our extensive evaluations
show that SCENT leads to the discovery of 12 new side channel
vulnerabilities in the Linux and FreeBSD kernels. In particular, a
real world validation with one class of vulnerabilities shows that
an o-path attacker is able to infer whether two arbitrary hosts
are communicating with each other, within slightly more than 1
minute, on average.
ACM acknowledges that this contribution was authored or co-authored by an employee,
contractor, or aliate of the United States government. As such, the United States
government retains a nonexclusive, royalty-free right to publish or reproduce this
article, or to allow others to do so, for government purposes only.
CCS ’19, November 11–15, 2019, London, United Kingdom
© 2019 Association for Computing Machinery.
ACM ISBN 978-1-4503-6747-9/19/11...$15.00
https://doi.org/10.1145/3319535.3354250
KEYWORDS
TCP; side-channels; model-checking
ACM Reference Format:
Yue Cao, Zhongjie Wang, Zhiyun Qian, Chengyu Song, Srikanth V. Krish-
namurthy, and Paul Yu. 2019. Principled Unearthing of TCP Side Channel
Vulnerabilities. In 2019 ACM SIGSAC Conference on Computer and Commu-
nications Security (CCS ’19), November 11–15, 2019, London, UK. ACM, New
York, NY, USA, 14 pages. https://doi.org/10.1145/3319535.3354250
1 INTRODUCTION
TCP side-channels are critical vulnerabilities that can be exploited
by adversaries towards launching dangerous attacks. Prior studies
have demonstrated that TCP side-channels can be exploited by o-
path attackers to perform idle port scans [16], to estimate the round
trip time (RTT) of a connection [1], or to infer how many packets
were exchanged over a connection [11]. They even allow attackers
to hijack connections between a client and a server [7, 11, 18, 37, 38],
These side-channels are an artifact of unforeseen code interactions,
can arise with the deployment of large code bases, and are subtle
and hard to nd.
Most of the aforementioned side-channel vulnerabilities are dis-
covered manually by domain experts. While manual analysis has
been immensely useful in discovering and patching such subtle vul-
nerabilities, it requires a signicant eort, and is thus not scalable
and cannot guarantee the elimination of such vulnerabilities. In
this work our goal is to develop a principled approach to automate
the discovery of such hard-to-nd TCP side-channel vulnerabilities.
In principle, TCP side-channel vulnerabilities are violations of
the non-interference property [21] between simultaneous TCP con-
nections, i.e., the existence of one connection can have an observ-
able eect on the other connection(s). Thus, o-path attackers can
use their own connections to the server to infer the properties
(e.g., sequence number) of a targeted TCP connection between a
victim client and the same server. Specically, an attacker can send
spoofed packets with guessed properties to the server. If the guess
is correct or close, the spoofed packet will cause a change in the
state at the server which in turn, causes changes pertaining to the
attacker’s own connection to the server.
Based on this observation, we design a tool SCENT, to nd TCP
side-channels in a complex code base with very little manual inter-
vention. At a high level, SCENT detects TCP side-channel vulner-
abilities by detecting violations of the non-interference property
between connections. In particular, it uses two instances of the
same server (TCP stack), where the only dierences are in the secu-
rity sensitive properties (e.g., sequence number, acknowledgement
number, or port) of an idle (victim) connection. It then sends a set
of packets (inputs) to the two servers. If the responses from the
servers are dierent, then SCENT has detected a violation of the
non-interference property.
While this approach is intuitive, the challenging part is deter-
mining what kind of packets to send in order to induce such a
violation. Given the large search space of possible combinations
of TCP packets, popular dynamic testing techniques like symbolic
execution and fuzzing all face eciency problems. In this work, we
resort to bounded model checking [14, 29, 31] to drive an analysis
to answer this question. Compared to bounded testing [32, 42] (i.e.,
blindly enumerating all possible packets up to the bound), bounded
model checking enjoys the benet of state deduplication and is
thus, much more ecient (see §8 for more details).
Unfortunately, applying model checking to a real-world TCP
stack implementation is non-trivial. First, we need to prepare a self-
contained model that is amenable for model checking (otherwise
the code base is simply too large). Previously, the work by Enas
et al., [16] has adopted model checking to detect non-interference
property violations in the network stack. However, due to the com-
plexity of implementation level code, they had to manually craft a
much simplied abstract model for the analysis. Such an approach,
while useful in their context of interest (discovering idle port scan
techniques), cannot guarantee that subtle TCP side-channels buried
in complex implementations like the Linux kernel, will not be (unin-
tentionally) removed during the abstraction. To avoid this problem
(high false negatives), we opt to use the unmodied TCP stack
implementation for analysis and only abstract away code that is
outside the core TCP stack.
The second challenge is state explosion. TCP implementations
from real-world kernels contain many variables; if we blindly mark
all the variables as states, then any change to any variable will be
deemed as a new state. However, if a variable is never “shared” be-
tween two connections, it cannot leak any information and is thus,
not interesting to track. To solve this large state space challenge,
we develop a conservative static analysis within SCENT to safely
reduce the state space.
The last challenge is that bounded model checking has bounded
code/state coverage and hence, cannot detect all vulnerabilities.
For instance, the TCP side-channel discovered by Cao et al., [7]
requires sending 100 packets, which is way beyond the capability
of bounded model checking. To solve this problem, we developed a
program transformation technique to automatically simplify the
model as a way to improve the code coverage. In particular, we
observe that many uncovered cases relate to branches that compare
an attacker-controllable value with a xed value (e.g., the global rate
limit exploited in [7]), and the problem is that the bounded input
space cannot drive the variable side of the branch to go beyond
the xed threshold. Based on this observation, SCENT automatically
identies such branches and downscales the xed threshold so
that both branches can be visited during a subsequent iteration of
bounded model checking.
To demonstrate the eectiveness of our approach, we have imple-
mented a prototype of SCENT and created two realistic TCP models,
one based on the Linux kernel (version 4.8.0) and the other one
based on the FreeBSD kernel (version 13.0)1 We applied SCENT on
these two models and found 12 new side-channel vulnerabilities.
A real world evaluation shows that in particular, with one of the
classes of vulnerabilities discovered, an o-path attacker is able to
infer whether two arbitrary hosts are communicating with each
other, within slightly more than 1 minute on average. The evalu-
ation results also show that our transformation step is critical for
nding these side-channels—none of them can be found without the
transformation. Besides, we also did not observe any false positives
during our evaluation.
Contributions. Our contributions can be summarized as follows:
• We design and implement SCENT, a system that nds subtle TCP
side-channels by detecting violations of the non-interference
property between TCP connections, using model checking as a
basis.
• We developed several techniques to automate the process of
creating self-contained code amenable for use with an o-the-
shelf model checker, from real-world kernels that keep the core
TCP implementation intact. We applied these techniques to the
Linux and the FreeBSD operating systems and open sourced the
extracted models at [41].
• We developed a code-transformation-based model simplica-
tion technique that improves code coverage for bounded model
checking.
• We applied SCENT to the Linux and the FreeBSD TCP models and
found 12 new side-channel vulnerabilities. We open sourced our
system and released the complete details of ndings at [41].
2 BACKGROUND
In this section, we briey describe the non-interference property
and why it is relevant to the problem of interest. Subsequently,
since we use model checking as a basic building block, we provide
relevant background in brief.
In recent decades, the non-
The non-interference property.
interference property [21] has been widely used as a requirement
to prove that neither explicit nor implicit information leakage can
occur in a scenario of interest. Because side-channels are a con-
sequence of information leakage, the non-interference property
can be used as a verication condition to ensure that they do not
exist. If the property is violated, it indicates the potential presence
of an information leak, which can in turn lead to an exploitable
side-channel vulnerability. With regards to the context of interest,
if this property holds, it implies that a state change on a given
connection does not (implicitly or explicitly) become observable in
another connection.
Ensa et al. [16] applied model checking to verify the non-
interference property in the TCP/IP stack, towards nding side
1SCENT can be applied to any OS kernel as long as the source code is available. Therefore,
SCENT can be potentially applied on Windows in its internal environments.
Victim Connection
Client
s
p
o
o
f
e
n
o
r
m
d
 s
e
r
v
al 
p
a
e
r 
p
c
k
e
t
s
a
c
k
e
t
Off-path Attacker
Server
spoofed client packet
Attacker's Own Connection
Figure 1: Threat model
channel vulnerabilities relating to idle port scans. While they nd
two port scan vulnerabilities, we point out that they use model
checking more like a validation tool instead of a tool to discover
these; they heuristically specify the scope of the TCP code (to only
consider the specic shared resources across connections) and then
manually build the model.
In this work, we seek to perform non-interference analysis in
more general attack scenarios. Importantly, since a manually ab-
stracted model like that in [16] is very approximate and may miss
vulnerabilities that exist in real code, we explore applying model
checking to real TCP implementations from commodity kernels.
Software model checking. Model checking [13, 40] exhaustively
checks if a given model of a system satises a given formal prop-
erty. If violations are encountered, the model checker outputs
counter examples which enable the locatation of where a viola-
tion has occurred with relative ease. Model checking methods can
be broadly classied into two categories viz., those that use abstrac-
tion (e.g., SLAM [3], BLAST [22], Event-Driven Software Verica-
tion [25]) and those that are applied directly on implementations
(e.g., VeriSoft [20], CMC [34] [33], and Model-Driven Software Ver-
ication [24]). Since the former relies on extracting an abstraction
from the real code (and thus can result in signicant approxima-
tion), we use the second category to verify the non-interference
property in our work.
Specically, the basis for our work is a TCP event-driven exe-