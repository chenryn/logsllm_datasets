title:Sonic: Zero-Knowledge SNARKs from Linear-Size Universal and Updatable
Structured Reference Strings
author:Mary Maller and
Sean Bowe and
Markulf Kohlweiss and
Sarah Meiklejohn
Sonic: Zero-Knowledge SNARKs from Linear-Size Universal and
Updatable Structured Reference Strings
Sean Bowe
Mary Maller
PI:EMAIL
PI:EMAIL
University College London
Markulf Kohlweiss
PI:EMAIL
University of Edinburgh
IOHK
Electric Coin Company
Sarah Meiklejohn
PI:EMAIL
University College London
ABSTRACT
Ever since their introduction, zero-knowledge proofs have become
an important tool for addressing privacy and scalability concerns
in a variety of applications. In many systems each client downloads
and verifies every new proof, and so proofs must be small and
cheap to verify. The most practical schemes require either a trusted
setup, as in (pre-processing) zk-SNARKs, or verification complex-
ity that scales linearly with the complexity of the relation, as in
Bulletproofs. The structured reference strings required by most zk-
SNARK schemes can be constructed with multi-party computation
protocols, but the resulting parameters are specific to an individ-
ual relation. Groth et al. discovered a zk-SNARK protocol with a
universal structured reference string that is also updatable, but the
string scales quadratically in the size of the supported relations.
Here we describe a zero-knowledge SNARK, Sonic, which sup-
ports a universal and continually updatable structured reference
string that scales linearly in size. We also describe a generally useful
technique in which untrusted “helpers” can compute advice that
allows batches of proofs to be verified more efficiently. Sonic proofs
are constant size, and in the “helped” batch verification context the
marginal cost of verification is comparable with the most efficient
SNARKs in the literature.
ACM Reference format:
Mary Maller, Sean Bowe, Markulf Kohlweiss, and Sarah Meiklejohn. 2019.
Sonic: Zero-Knowledge SNARKs from Linear-Size Universal and Updat-
able Structured Reference Strings. In Proceedings of CCS’19, London, UK,
November 2019, 20 pages.
https://doi.org/10.1145/nnnnnnn.nnnnnnn
1 INTRODUCTION
In the decades since their introduction, zero-knowledge proofs
have been used to support a wide variety of potential applications,
ranging from verifiable outsourced computation [11, 16, 24, 59]
to anonymous credentials [6, 27, 28, 32, 39], with a multitude of
other settings that also require a balance between privacy and
integrity [17, 19, 29, 31, 36]. In recent years, cryptocurrencies have
been one increasingly popular real-world application [10, 44, 52,
57], with general zero-knowledge protocols now deployed in both
Zcash and Ethereum. In the cryptocurrency setting it is common
for clients to download and verify every transaction published to
the network. This means that small proof sizes and fast verification
time are important for the practical deployment of zero-knowledge
protocols. There are several practical schemes from which to choose,
with a vast space of tradeoffs in performance and cryptographic
assumptions.
Currently, the most attractive proving system from the verifier’s
perspective is a (pre-processing) succinct non-interactive argument
of knowledge, or zk-SNARK for short, which has a small constant
proof size and constant-time verification costs even for arbitrarily
large relations. The most efficient scheme described in the literature
is a zk-SNARK by Groth [45] which contains only three group
elements. Typically, zk-SNARKs require a trusted setup, a pairing-
friendly elliptic curve, and rely on strong assumptions.
In contrast, proving systems such as Bulletproofs [26] do not
require a trusted setup and depend on weaker assumptions. Un-
fortunately, although its proof sizes scale logarithmically with the
relation size, Bulletproof verification time scales linearly, even when
applying batching techniques. As a result, Bulletproofs are ideal for
simpler relations.
Although zk-SNARKs have been deployed in applications, such
as the private payment protocol in Zcash, the trusted setup has
emerged as a barrier for deployment. If the setup is compromised
in Zcash, for example, an attacker could create counterfeit money
without detection. It is possible to reduce risk by performing the
setup with a multi-party computation (MPC) protocol, with the
property that only one participant must be honest for the final
parameters to be secure [25, 62]. However, the resulting parameters
are specific to the individual relation, and so each distinct applica-
tion must perform its own setup. Applications must also perform
a new setup each time their construction changes, even for minor
optimisations or bug fixes.
Groth et al. [46] recently proposed a zk-SNARK scheme with
a universal structured reference string (SRS1) that allows a single
setup to support all circuits of some bounded size. Moreover, the
SRS is updatable, meaning an open and dynamic set of participants
can contribute secret randomness to it indefinitely. Although this
is still a trusted setup in some sense, it increases confidence in the
security of the parameters as only one previous contributor must
have destroyed their secret randomness in order for the SRS to be
secure.
In terms of efficiency, however, while the construction due to
Groth et al. does have constant-size proofs and constant-time ver-
ification, it requires an SRS that is quadratic with respect to the
1“Structured reference string” is the recommended language to use when referring to
what was once called a “common reference string” [63].
number of multiplication gates in the supported arithmetic circuits.
Moreover, updating the SRS requires a quadratic number of group
exponentiations, and verifying the updates requires a linear number
of pairings. Finally, while the prover and verifier need only a linear-
size, circuit-specific string for a given fixed relation (rather than
the whole SRS), deriving this from the SRS requires an expensive
Gaussian elimination process. In a concrete setting such as Zcash,
which has a circuit with 217 multiplication gates, the SRS would be
on the order of terabytes and is thus prohibitively expensive.
1.1 Our Contributions
We present Sonic, a new zk-SNARK for general arithmetic circuit
satisfiability. Sonic requires a trusted setup, but unlike conventional
SNARKs the structured reference string supports all circuits (up to a
given size bound) and is also updatable, so that it can be continually
strengthened. This addresses many of the practical challenges and
risks surrounding such setups. Sonic’s structured reference string
is linear in size with respect to the size of supported circuits, as
opposed to the scheme by Groth et al., which scales quadratically.
The structured reference string in Sonic also does not need to be
specialized or pre-processed for a given circuit. This makes a large,
distributed and never-ending setup process a practical reality.
Proof verification in Sonic consists of a constant number of pair-
ing checks. Unlike other zk-SNARKs, all proof elements are in the
same source group, which has several advantages. Most signifi-
cantly, when verifying many proofs at the same time, the pairing
operations need to be computed only once. Thus the marginal costs
stem solely from a handful of exponentiations in the group. We
also remove the requirement for operations in the second source
group, which are typically more expensive.
Sonic’s verification includes checking the evaluation of a sparse
bivariate polynomial in the scalar field. We introduce a method to
check this evaluation succinctly (given a circuit-dependent precom-
putation) and thus maintain our zk-SNARK properties. Our proof
of correct evaluation introduces a new permutation argument and
a grand-product argument.
Additionally Sonic can achieve better concrete efficiency if an
untrusted “helper” party aggregates a batch of proofs. This batching
operation computes advice to speed up the verifier. In a blockchain
application, this helper could be a miner-type client that already
processes and verifies transactions for inclusion in the next block.
We define security in this setting in Section 3, and present and
prove secure the regular usage of Sonic in Section 6 and Section 7.
In Section 8 we present the more efficient version of Sonic which is
helper-assisted. Finally, we implement our protocol and discuss its
performance in Section 9, demonstrating verification times that are
competitive with state-of-the-art pre-processing zk-SNARKs for
typical arithmetic circuits. For any size of circuit proof sizes are 256
bytes and the verification times for circuits with small instances
and arbitrarily sized witnesses are approximately 0.7ms (assuming
there are helpers).
1.2 Our Techniques
The goal of Sonic is to provide zero-knowledge arguments for the
satisfiability of constraint systems representing NP-hard languages.
Sonic defines its constraint system with respect to the two-variate
2
polynomial equation used in Bulletproofs that was designed by
Bootle et al. [22]. In the Bulletproofs polynomial equation, there is
one polynomial that is determined by the instance of the language
and a second that is determined by the constraints. The polynomial
determined by the instance a is given by

i, j
ai, jX iY j
i.e., each element of the instance is used to scale a monomial in the
overall polynomial. For this reason, an SRS that contains only hid-
den monomial evaluations suffices for committing to the instance.
Groth et al. [46] showed that an SRS that contains monomials is
updatable. The second polynomial that is determined by the con-
straints is known to the verifier. We use this knowledge to allow
the verifier to obtain evaluations of the polynomial while avoiding
putting constraint-specific secrets in the SRS.
To commit to our polynomials, we use a variation of a polynomial
commitment scheme by Kate et al. [50]. We prove the commitment
scheme secure in the algebraic group model [37], which is a model
that lies somewhere between the standard model and the generic
group model. This security proof does not follow from the initial
reductions by Kate et al. because we additionally need to show
that the adversary can extract the committed polynomials. Kate et
al.’s scheme has constant size and verification time, but is designed
for single-variate polynomials, whereas our polynomials are two-
variate. To account for this, we hide only one evaluation point in
the reference string. The polynomial defining the instance is of
a special form where it can be committed to using a univariate
scheme; i.e., it is of the form
ai X iY i .
ti, jX iyj
i

The prover first commits to the polynomial defining the statement,
and then the second evaluation point y is determined in the clear.
The prover can then commit to other polynomials of the form
i, j
using a univariate scheme.
When the prover and verifier both know a two-variate polyno-
mial that the verifier wants to calculate, this work can be unloaded
onto the prover. In our scheme we utilise this observation by placing
the work of computing the polynomial specifying the constraints
onto the prover. The prover then has to show that the polynomial
has been calculated correctly. We provide two methods of achieving
this. In the first, we simply provide a proof that the evaluation is cor-
rect. While asymptotically preferable, concretely this proof is three
times the size of our second method. In this scenario, many proofs
are calculated by many provers, and then a “helper” calculates the
circuit-specifying polynomial for each proof. The circuit-specifying
polynomial contains no private information, so the helper can be
run by anyone. The helper then proves that they have calculated
all of the polynomials correctly at the same time, which they can
do succinctly with a one-off circuit-dependent cost that can be
amortised over many proofs.
Scheme
Hyrax
ZK vSQL
Ligero
Bootle et al. [23]
Baum et al. [4]
STARKs
Aurora
Bulletproofs
SNARKs
Groth et al. [46]
This work
Runtime
Prover
Verifier
d(hc + c log c) + w ℓ + d(h + log(hc))
ℓ + d polylog(n)
c log(c) + h log(h)
n
n log(c)
n log(n)
n log(n)
n polylog(n)
n log(n)
n log(n)
n log(n)
n log(n)
n log(n)
n
n
polylog(n)
n log(n)
n
ℓ
ℓ
ℓ
CRS
√
w
log(n)
0
0
√
n
0
0
n
n
2
n
n
Proof
d log(hc) +
d log(c)
√
w
(cid:112)n log(n)
√
√
n
n
log2(n)
log2(n)
log(n)
1
1
1
(cid:35)
(cid:35)
(cid:71)(cid:35)
(cid:71)(cid:35)
(cid:71)(cid:35)
(cid:71)(cid:35)
(cid:71)(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:35)