\[root@sql51 \~\]# redis-trib.rb add-node \--slave 192.168.4.57:6357
192.168.4.51:6351
\>\>\> Send CLUSTER MEET to node 192.168.4.57:6357 to make it join the
cluster.
**集群移除slave角色(57)**
\[root@sql51 \~\]# redis-trib.rb del-node 任意主机:端口 被移除的主机id
\[root@sql51 \~\]# redis-trib.rb del-node 192.168.4.51:6351
f5251bebf750c5beaa48fbbed03e880889e07fcd #57的id
\[root@sql51 \~\]# redis-trib.rb info 192.168.4.51:6351 #查看集群
**集群移除master角色**
1重新分片:释放占用的hash槽
\[root@sql51 \~\]#redis-trib.rb reshard 192.168.4.51:6351
\[OK\] All 16384 slots covered.
How many slots do you want to move (from 1 to 16384)? 4096
What is the receiving node ID? 412a79829c7d0eed812b24959ca123b58990d60e
#接受哈希槽的主机id(51)
Please enter all the source node IDs.
Type \'all\' to use all the nodes as source nodes for the hash slots.
Type \'done\' once you entered all the source nodes IDs.
Source node #1:c2e039c3a388e62ec6c02a8af3b5a8bd53040a65
#要移除的主机id(58)
Source node #2:done #只移除一个主机的最后写done
**2**再移除主机
sql51 \~\]# redis-trib.rb del-node 任意主机:端口 被移除的主机id
sql51\~\]# redis-trib.rb del-node 192.168.4.51:6351
c2e039c3a388e62ec6c02a8af3b5a8bd53040a65 #被移除的主机id58
**Redis 主从复制工作原理**
1\. Slave向master发送sync命令
2\. Master启动后台存盘进程,并收集所有修改数据命令
3\. Master完成后台存盘后,传送整个数据文件到slave
4\. Slave接收数据文件(dump.rdb文件).加载到内存中完成首次完全同步
5\.
后续有新数据产生,master继续将新的数据收集到的修改命令传送给slave,slave运行命令后完成同步
主从注意事项:启动服务默认为主库、从库需要手动配置、从库默认是只读的、命令操作都是临时,
192.168.4.51:6351\> info replication #查看主从配置信息
\# Replication
role:master #主库 开启服务默认是主库
connected_slaves:0 #从库个数为"0"
\[root@sql52 \~\]# redis-cli -h 192.168.4.52 -p 6352
#临时手动设置为从库，重启服务失效
192.168.4.52:6352\> slaveof 192.168.4.51 6351
OK
192.168.4.52:6352\> info replication
\# Replication
role:slave #从库
master_host:192.168.4.51 #主库地址
master_port:6351 #主库端口
\[root@sql52 \~\]# vim /etc/redis/6379.conf #永久配置从库:修改配置文件
282 \# slaveof \ \ #修改前
282 slaveof 192.168.4.51 6351 #修改后
\[root@sql52 \~\]# /etc/init.d/redis_6379 stop #停止服务
\[root@sql52 \~\]# /etc/init.d/redis_6379 start #开启服务
192.168.4.52:6352\> slaveof no one
#临时手动设置为主库，重启失效,恢复从库
OK
192.168.4.52:6352\> info replication
\# Replication
role:master
connected_slaves:0
282# slaveof 192.168.4.51 6351 #注释这行，永久配置主库，注释配置文件中
\[root@sql52 \~\]# vim /etc/redis/6379.conf #主库设置连接密码的主从配置
501 requirepass 123456 设置密码为123456
\[root@sql52 \~\]# vim /etc/redis/6379.conf #从库密码设置
289 \# masterauth 123456 #设置密码为123456
**哨兵模式**
监视当前主库,当主库宕机后,从对应的从库里选举新的主库是一种服务,可以在主库上运行.也可以单独拿一台设备运行使用哨兵模式,如果主服务器设置了密码.各从服务器配置文件中设置了
masterauth
123456(指定连接主服务器密码),因为从服务器没有设置相同连接密码(或者没设置连接密码)的主服务器会漂移,但是所有的从服务器状态都会是down。
**需要安装redis软件包：**创建服务主配置：文件有配置文件模板
\[root@sql51 \~\]# ls /root/redis-4.0.8/sentinel.conf
/root/redis-4.0.8/sentinel.conf #模板
\[root@sql55 \~\]# vim /etc/sentinel.conf #直接编辑空白文件,添加内容也可
bind 0.0.0.0 #实验中未配置
sentinel monitor sql51 192.168.4.51 6351 1 #添加当前主库
sentinel auth-pass 123456 #设置主库连接密码
格式：#sentinel monitor master主机名 masterip地址 master端口 票数
#sentinel auth-pass 连接主库密码
> #票数:有几台哨兵主机连接不上主库时切换主库,需要这里只有一台哨兵服务器主机
\[root@sql55 \~\]# redis-sentinel /etc/sentinel.conf #启动服务
**redis数据持久化(RDB/AOF)：**服务在运行的过程中,自动把内存里的数据存储到物理硬盘
持久化（Persistence）即把数据（如内存中的对象）保存到可永久保存的存储设备中（如磁盘）。
持久化的主要应用是将内存中的对象存储在数据库中，或者存储在磁盘文件中、XML数据文件中等等。
 持久化是将程序数据在持久状态和瞬时状态间转换的机制。
 JDBC就是一种持久化机制。文件IO也是一种持久化机制。
日常持久化的方法，例如：将鲜肉冷藏，吃的时候再解冻的方法也是。将水果做成罐头的方法也是。
**持久化之RDB介绍：**Redis数据库文件,全称Redis DataBase
 数据持久化方式之一按照指定时间间隔,
将内存中的数据集快照写入硬盘，术语叫Snapshot快照
恢复时,将快照文件直接读入内存
**RBD优点：**高性能的持久化实现\--创建一个子进程来执行持久化.先将数据写入临时文件.持久化过程结束后,再用这个临时文件替换上次持久化好的文件;过程中主进程不做任何IO操作，比较适合大规模数据恢复,且对数据完整性要求不是非常高的场合
**RDB缺点：**意外宕机时,最后一次持久化的数据会丢失
\[root@sql57 \~\]# vim /etc/redis/6379.conf **#配置文件中启用RDB**
save \"\" #如果注释则禁用RDB
Save 900 1 #900秒内且至少有1次修改,进行存盘
Save 300 10 #300 秒内且至少有10次修改,则进行存盘
Save 60 10000 #60 秒内且至少有10000次修改则进行存盘
\[root@sql57 \~\]# cp dump.rdb /var/lib/redis/6379/ #以ROB文件恢复数据
\[root@sql57 \~\]# /etc/init.d/redis_6379 start
Starting Redis server\...
**持久化之AOF：**为了弥补RDB的缺点,出现AOF
只做追加操作的文件.Append Only
File,只记录redis服务所有写的操作,默认未启用
不断的将新的写操作追加到文件的末尾,就是一个文本文件,使用cat命令可以查看文件内容
\[root@sql56 \~\]# vim /etc/redis/6379.conf **#配置文件中启用AOF**
673 appendonly yes #启用aof ,默认no
677 appendfilename \"appendonly.aof\" #指定文件名
> 以下为AOF文件记录写操作的方式
702 \# appendfsync always
#有新写操作立即记录,记录命令同时把数据写入dump.rdb
703 appendfsync everysec #3选一
#每秒记录一次,记录命令同时把数据写入dump.rdb
704 \# appendfsync no #从不记录,
\[root@sql57 \~\]# rm -rf /var/lib/redis/6379/\* #以下为AOF文件恢复数据
\[root@sql57 \~\]# cp appendonly.aof /var/lib/redis/6379/
#appendonly.aof从别的机器上拷贝过来的
\[root@sql57 \~\]# /etc/init.d/redis_6379 start
Starting Redis server\...