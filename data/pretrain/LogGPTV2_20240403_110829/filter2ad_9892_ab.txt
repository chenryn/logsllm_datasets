        if ((err = verify_one_alg(attrs, XFRMA_ALG_AUTH)))//XFRMA_ALG_AUTH参数长度检查
            goto out;
        if ((err = verify_one_alg(attrs, XFRMA_ALG_CRYPT)))//XFRMA_ALG_CRYPT参数长度检查
            goto out;
        if ((err = verify_one_alg(attrs, XFRMA_ALG_COMP)))//XFRMA_ALG_COMP参数长度检查
            goto out;
        if ((err = verify_sec_ctx_len(attrs)))//XFRMA_SEC_CTX数据长度定义检查
            goto out;
    [1] if ((err = verify_replay(p, attrs)))//XFRMA_REPLAY_ESN_VAL数据检查
            goto out;
        err = -EINVAL;
        switch (p->mode) {
        case XFRM_MODE_TRANSPORT:
        case XFRM_MODE_TUNNEL:
        case XFRM_MODE_ROUTEOPTIMIZATION:
        case XFRM_MODE_BEET:
            break;
        default:
            goto out;
        }
        err = 0;
    out:
        return err;
    }
在[verify_replay](https://elixir.bootlin.com/linux/v4.10.6/source/net/xfrm/xfrm_user.c#L103)函数中，可以看到检查主要有如下几条：[1]`bmp_len`是否超过最大值，最大值定义为`4096/4/8`。[2]检查参数长度定义是否正确。[3]是否为`IPPROTO_ESP`或者`IPPROTO_AH`协议。
    static inline int verify_replay(struct xfrm_usersa_info *p,
                    struct nlattr **attrs)
    {
        struct nlattr *rt = attrs[XFRMA_REPLAY_ESN_VAL];
        struct xfrm_replay_state_esn *rs;
        if (p->flags & XFRM_STATE_ESN) {
            if (!rt)
                return -EINVAL;
            rs = nla_data(rt);
    [1]     if (rs->bmp_len > XFRMA_REPLAY_ESN_MAX / sizeof(rs->bmp[0]) / 8)// (4096/4/8)
                return -EINVAL;
    [2]     if (nla_len(rt) id.proto != IPPROTO_ESP) && (p->id.proto != IPPROTO_AH))
            return -EINVAL;
        if (p->replay_window != 0) 
            return -EINVAL;
        return 0;
    }
回到`xfrm_add_sa`函数，继续分析[xfrm_state_construct](https://elixir.bootlin.com/linux/v4.10.6/source/net/xfrm/xfrm_user.c#L528)函数。首先在`xfrm_state_alloc`中用调用`kzalloc`函数新建`xfrm_state`，并拷贝用户数据进行赋值。接下来根据用户输入的各种参数进行类型构建。关于`xfrm_replay_state_esn`这个结构体在[3]处申请，在[4]处进行验证。
    static struct xfrm_state *xfrm_state_construct(struct net *net,
                               struct xfrm_usersa_info *p,
                               struct nlattr **attrs,
                               int *errp)
    {
    [1] struct xfrm_state *x = xfrm_state_alloc(net); //新建 xfrm_state 结构
        int err = -ENOMEM;
        if (!x)
            goto error_no_put;
    [2] copy_from_user_state(x, p);  //拷贝用户数据
        if (attrs[XFRMA_SA_EXTRA_FLAGS])
            x->props.extra_flags = nla_get_u32(attrs[XFRMA_SA_EXTRA_FLAGS]);
        if ((err = attach_aead(x, attrs[XFRMA_ALG_AEAD])))
            goto error;
        if ((err = attach_auth_trunc(&x->aalg, &x->props.aalgo,
                         attrs[XFRMA_ALG_AUTH_TRUNC])))
            goto error;
        if (!x->props.aalgo) {
            if ((err = attach_auth(&x->aalg, &x->props.aalgo,
                           attrs[XFRMA_ALG_AUTH])))
                goto error;
        }
        if ((err = attach_crypt(x, attrs[XFRMA_ALG_CRYPT])))
            goto error;
        if ((err = attach_one_algo(&x->calg, &x->props.calgo,
                       xfrm_calg_get_byname,
                       attrs[XFRMA_ALG_COMP])))
            goto error;
        if (attrs[XFRMA_ENCAP]) {
            x->encap = kmemdup(nla_data(attrs[XFRMA_ENCAP]),
                       sizeof(*x->encap), GFP_KERNEL);
            if (x->encap == NULL)
                goto error;
        }
        if (attrs[XFRMA_TFCPAD])
            x->tfcpad = nla_get_u32(attrs[XFRMA_TFCPAD]);
        if (attrs[XFRMA_COADDR]) {
            x->coaddr = kmemdup(nla_data(attrs[XFRMA_COADDR]),
                        sizeof(*x->coaddr), GFP_KERNEL);
            if (x->coaddr == NULL)
                goto error;
        }
        xfrm_mark_get(attrs, &x->mark);
        err = __xfrm_init_state(x, false);
        if (err)
            goto error;
        if (attrs[XFRMA_SEC_CTX]) {
            err = security_xfrm_state_alloc(x,
                            nla_data(attrs[XFRMA_SEC_CTX]));
            if (err)
                goto error;
        }
        //对x->replay_esn、x->preplay_esn初始化为用户输入XFRMA_REPLAY_ESN_VAL参数
    [3] if ((err = xfrm_alloc_replay_state_esn(&x->replay_esn, &x->preplay_esn,
                               attrs[XFRMA_REPLAY_ESN_VAL])))
            goto error;
        x->km.seq = p->seq;
        x->replay_maxdiff = net->xfrm.sysctl_aevent_rseqth;
        /* sysctl_xfrm_aevent_etime is in 100ms units */
        x->replay_maxage = (net->xfrm.sysctl_aevent_etime*HZ)/XFRM_AE_ETH_M;
    [4] if ((err = xfrm_init_replay(x)))//检查滑动窗口大小及flag，确定检测使用的函数
            goto error;
        /* override default values from above */
        xfrm_update_ae_params(x, attrs, 0);
        return x;
    error:
        x->km.state = XFRM_STATE_DEAD;
        xfrm_state_put(x);
    error_no_put:
        *errp = err;
        return NULL;
    }
在[xfrm_alloc_replay_state_esn](https://elixir.bootlin.com/linux/v4.10.6/source/net/xfrm/xfrm_user.c#L421)中，可以看到通过`kzalloc`函数分别申请了两块同样大小的内存，大小为`sizeof(*replay_esn)
+ replay_esn->bmp_len *
sizeof(__u32)`，并将用户数据中`attr[XFRMA_REPLAY_ESN_VAL]`内容复制过去。
    static int xfrm_alloc_replay_state_esn(struct xfrm_replay_state_esn **replay_esn,
                           struct xfrm_replay_state_esn **preplay_esn,
                           struct nlattr *rta)
    {
        struct xfrm_replay_state_esn *p, *pp, *up;
        int klen, ulen;
        if (!rta)
            return 0;
        up = nla_data(rta);
        klen = xfrm_replay_state_esn_len(up);
        ulen = nla_len(rta) >= klen ? klen : sizeof(*up);
        p = kzalloc(klen, GFP_KERNEL);
        if (!p)
            return -ENOMEM;
        pp = kzalloc(klen, GFP_KERNEL);
        if (!pp) {
            kfree(p);
            return -ENOMEM;
        }
        memcpy(p, up, ulen);
        memcpy(pp, up, ulen);
        *replay_esn = p;
        *preplay_esn = pp;
        return 0;
    }
最终在[xfrm_init_replay](https://elixir.bootlin.com/linux/v4.10.6/source/net/xfrm/xfrm_replay.c#L585)函数中对上述申请的结构体数据进行检查，`replay_window`不大于定义的`bmp_len`大小，并对`x->repl`进行初始化，该成员是一个函数虚表，作用是在收到`AH`或`ESP`协议数据包时进行数据重放检查。
    int xfrm_init_replay(struct xfrm_state *x)
    {
        struct xfrm_replay_state_esn *replay_esn = x->replay_esn;
        if (replay_esn) {
            if (replay_esn->replay_window >
                replay_esn->bmp_len * sizeof(__u32) * 8)//不大于bmp本身长度
                return -EINVAL;
            if (x->props.flags & XFRM_STATE_ESN) {
                if (replay_esn->replay_window == 0)
                    return -EINVAL;
                x->repl = &xfrm_replay_esn;
            } else
                x->repl = &xfrm_replay_bmp;
        } else
            x->repl = &xfrm_replay_legacy;
        return 0;
    }
    EXPORT_SYMBOL(xfrm_init_replay);
## xfrm_replay_state_esn结构体更新
对于一个`SA`，内核提供修改`replay_esn`
成员的功能，也就是`xfrm_alloc_replay_state_esn`申请的第一个内存块。在[xfrm_new_ae](https://elixir.bootlin.com/linux/v4.10.6/source/net/xfrm/xfrm_user.c#L1926)函数中，首先在[1]处循环查找哈希链表，得到`xfrm_state`结构体，查找标识是之前提到的三个要素。而在[2]处，对用户输入的`attr[XFRMA_REPLAY_ESN_VAL]`参数进行检查，也就是修改后的`replay_esn`
成员内容。最后在[3]处，利用`memcpy`进行成员内容修改。
    static int xfrm_new_ae(struct sk_buff *skb, struct nlmsghdr *nlh,
            struct nlattr **attrs)
    {
        struct net *net = sock_net(skb->sk);
        struct xfrm_state *x;
        struct km_event c;
        int err = -EINVAL;
        u32 mark = 0;
        struct xfrm_mark m;
        struct xfrm_aevent_id *p = nlmsg_data(nlh);
        struct nlattr *rp = attrs[XFRMA_REPLAY_VAL];
        struct nlattr *re = attrs[XFRMA_REPLAY_ESN_VAL];
        struct nlattr *lt = attrs[XFRMA_LTIME_VAL];
        struct nlattr *et = attrs[XFRMA_ETIMER_THRESH];
        struct nlattr *rt = attrs[XFRMA_REPLAY_THRESH];
        if (!lt && !rp && !re && !et && !rt)
            return err;
        /* pedantic mode - thou shalt sayeth replaceth */
        if (!(nlh->nlmsg_flags&NLM_F_REPLACE))
            return err;
        mark = xfrm_mark_get(attrs, &m); //copy XFRMA_MARK变量，返回值是u32
    [1] x = xfrm_state_lookup(net, mark, &p->sa_id.daddr, p->sa_id.spi, p->sa_id.proto, p->sa_id.family); //循环查找hash表，得到xfrm_state结构体
        if (x == NULL)
            return -ESRCH;
        if (x->km.state != XFRM_STATE_VALID)
            goto out;
    [2] err = xfrm_replay_verify_len(x->replay_esn, re); //XFRMA_REPLAY_ESN_VAL参数检查
        if (err)
            goto out;
        spin_lock_bh(&x->lock);
    [3] xfrm_update_ae_params(x, attrs, 1); //memcpy
        spin_unlock_bh(&x->lock);
        c.event = nlh->nlmsg_type;
        c.seq = nlh->nlmsg_seq;
        c.portid = nlh->nlmsg_pid;
        c.data.aevent = XFRM_AE_CU;
        km_state_notify(x, &c);
        err = 0;
    out:
        xfrm_state_put(x);
        return err;
    }
验证过程在[xfrm_replay_verify_len](https://elixir.bootlin.com/linux/v4.10.6/source/net/xfrm/xfrm_user.c#L403)函数中，可见在检查过程中主要检查了修改部分的`bmp_len`长度，该检查是因为`replay_esn`成员内存是直接进行复制的，不再二次分配。但缺少了对`replay_window`变量的检测，
**导致引用`replay_window`变量进行`bitmap`读写时造成的数组越界问题**。
    static inline int xfrm_replay_verify_len(struct xfrm_replay_state_esn *replay_esn,
                         struct nlattr *rp)
    {
        struct xfrm_replay_state_esn *up;
        int ulen;
        if (!replay_esn || !rp)
            return 0;
        up = nla_data(rp);
        ulen = xfrm_replay_state_esn_len(up);
        if (nla_len(rp) repl`成员赋值，因此转而寻找`x->repl`成员被调用的位置，最终跟踪到了`xfrm_input`函数，而`xfrm_input`函数之前被[xfrm4_rcv_spi](https://elixir.bootlin.com/linux/v4.10.6/source/include/net/xfrm.h#L1523)
dev);
        int err;
        __be32 seq;
        __be32 seq_hi;
        struct xfrm_state *x = NULL;
        xfrm_address_t *daddr;
        struct xfrm_mode *inner_mode;
        u32 mark = skb->mark;
        unsigned int family;
        int decaps = 0;