代码
这一题比较简单，直接写即可。
解题思路
找到，返回-1，如果子串是空串，则返回0。
实现一个查找 substring 的函数。如果在母串中找到了子串，
题目大意
consistent to C's strstr() and Java's indexOf().
For the purpose of this problem, we will return O when needle is an empty string. This is 
interview.
What should we return when needle is an empty string? This is a great question to ask during an
Clarification:
 Example 2:
Example 1: 
haystack.
Return the index of the first occurrence of needle in haystack, or -1 if needle is not part of 
Implement strStr().
题目
28. Implement strStr()
package leetcode
Output: -1 
Input: haystack = "aaaaa", needle = "bba"
Output:2
Input: haystack = "hello", needle = "l1"
return j
，返回子串在母串中出现的下标，如果没有
---
## Page 109
Example 1: 
The integer division should truncate toward zero.
Return the quotient after dividing dividend by divi sor
division and mod operator.
Given two integers dividend and divisor, divide two integers without using multiplication,
题目
29. Divide Two Integers
func strstrl(haystack string, needle string) int 
//解法二
func strstr(haystack string, needle string) int {
//解法一
import "strings"
return strings.Index(haystack, needle)
for i := O; ； i++ { 
for j := O; ； j++ {
if j == len(needle) {
if needle[j] != haystack[i+j] { 
if i+j == len(haystack) {
break
 return -1 
 return i
---
## Page 110
代码
解题思路
符。返回被除数 dividend 除以除数 divisor 得到的商。
给定两个整数，被除数 dividend 和除数 divisor。将两数相除，要求不使用乘法、除法和 mod 运算
题目大意
Note:
 Example 2:
说明：
·给出除数和被除数，
package leetcode
Output:-2
Input: dividend = 7,divisor = -3
Output: 3 
Input: dividend = 10, divisor = 3
import
）二分的写法常写错的3点：
这一题可以用二分搜索来做。要求除法运算之后的商，把商作为要搜索的目标。商的取值范围是
超过范围的都按边界计算。
假设我们的环境只能存储 32位有符号整数，其数值范围是[-2^31，2^31－1]。本题中，如果除
除数不为 0。
被除数和除数均为 32位有符号整数。
 Assume we are dealing with an environment which could only store integers within the 32-
 The divisor will never be 0.
 Both dividend and divisor will be 32-bit signed integers.
继续二分即可。最后还要注意符号和题目规定的Int32 取值范围。
数≤被除数或者(商+1)除数≥被除数并且商＊除数被除数并且 商＊除
法结果溢出，则返回 2^31－1。
your function returns 2^31 - 1 when the division result overflows.
bit signed integer range: [-2^31, 2^31 - 1]. For the purpose of this problem, assume that 
3.1
2. mid = low + (high-low)>>1 (防止溢出)
1． low≤high (注意二分循环退出的条件是小于等于)
low = mid + 1 ;high = mid -1 (注意更新 low 和 high 的值，如果更新不对就会死循环)
 要求计算除法运算以后的商。注意值的取值范围在[-2^31,2^31－1] 之中。
---
## Page 111
abs(dividend){
abs(dividend）{
quotient*abs(divisor)= abs(dividend) &&
func divide(dividend int, divisor int) int {
//解法一递归版的二分搜索
// if (quotient+l)*abs(divisor) > abs(dividend) && quotient*abs(divisor) >
if res  math.MaxInt32 { 
res = binarySearchQuotient(O, abs(dividend), abs(divisor), abs(dividend))
(ost^p)sqexuatonb s (puap^!p)sqe  math.MaxInt32 
if dividend > 0 && divisor > 0 ll dividend >1
 low = quotient + 1
 high = quotient - 1
break 
if (quotient+l)*abs(divisor) == abs(dividend) 
res = quotient
break 
res = quotient + 1 
人
 可以改成下面这段代码
---
## Page 112
func dividel(divided int, divisor int) int {
//解法二非递归版的二分搜索
((quotient+l)*val >= dividend && quotient*val  dividend && quotient*val  dividend && quotient*val > dividend {
 quotient := low + (high-low)>>1
return sign * result
for dvd >= dvs { 
dvd, dvs := abs(divided), abs(divisor)
if divided > 0 && divisor > 0 ll divided  
 if tmpcounter[s[i:i+length]] > O {
 //fmt.Printf("sub = %v i = %v lenght = %v start = %v tmpcounter = %v
 counter[w]++
 return []int{}
} else{ 
flag = false
i =i + length - 1
if checkwords(tmpcounter) && (i+length-start == totalLen) {
start++
unodu ^% = s ^% = ybua ^% =  ^% = qns*****)ud'w// 
break
tmpcounter = copyMap(counter)
i = start - 1
 tmpcounter[s[i:i+length]]-- 
res = append(res, start) 
continue
---
## Page 115
解题思路
你的算法时间复杂度必须是 O(log n)级别。
[4,5,6,7,0,1,2])。搜索一个给定的目标值，如果数组中存在这个目标值，则返回它的索引，否则返回-1
假设按照升序排序的数组在预先未知的某个点上进行了旋转。（例如，数组[0,1,2,4,5,6,7] 可能变为
题目大意
 Example 2:
Example 1:
Your algorithm's runtime complexity must be in the order of O(log n).
(i.e., [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2] ).
beforehand.
Suppose an array sorted in ascending order is rotated at some pivot unknown to you 
题目
33. Search in Rotated Sorted Array.
。你可以假设数组中不存在重复的元素。
You may assume no duplicate exists in the array.
·给出一个数组，数组中本来是从小到大排列的，并且数组中没有重复数字。但是现在把后面随机-
Output:-1
Input: nums = [4,5,6,7,0,1,2], target = 3 
Output: 4
Input: nums = [4,5,6,7,0,1,2], target = 0 
·由于数组基本有序，虽然中间有一个"断开点"，还是可以使用二分搜索的算法来实现。现在数组前
设计一个 O(log n)的算法。如果找到就输出数组的小标，如果没有找到，就输出-1。
段有序的放到数组前面，这样形成了前后两端有序的子序列。在这样的一个数组里面查找一个数,
return c 
内了，那么一定有 nums[mid]>nums[1ow] ，如果是落在后面一段数值比较小的区间内，
面一段是数值比较大的数，后面一段是数值偏小的数。如果 mid 落在了前一段数值比较大的区间
---
## Page 116
Array.
34. Find First and Last Position of Element in Sorted
代码
func search33(nums []int, target int) int {
package leetcode 
return -1
if len(nums) == 0 { 
处理即可。最后找到则输出 mid，没有找到则输出-1。
for low nums[low］{// 在数值大的一部分区间里
if nums[mid] == target {
mid := low + (high-low)>>1
if nums[high] == nums[mid] {
if nums[low] == nums[mid] {
else {
}else{ 
if nums[mid] > 1)
} else{ 
} else if nums[mid]  target {
mid := low + ((high - low) >> 1)
if nums[mid] > target { 
mid := low + ((high - low) >> 1)
if（mid==O）Il（nums［mid-1］〈target）{//找到第一个大于等于 target 的元
if （mid == len(nums)-1） Il（nums[mid+1] != target）{ // 找到最后—个与
 high = mid - 1
else if nums[mid] < target {
 high = mid - 1 
low = mid + 1 
high = mid - 1 
if （mid==0）丨l（nums[mid-1］!=target）{// 找到第—个与target 相等的元素
else { 
low = mid + 1
low = mid + 1
 return mid
 return mid
return mid
~
---
## Page 119
Example 3:
 Example 2: