    模式	    | 字符串	| 匹配部分
    - | - | -
    /\w\w\w/	| "ABC"	    | "▶ABC◀"
    /\w\w\w/	| "abc"	    | "▶abc◀"
    /\w\w\w/	| "012"	    | "▶012◀"
    /\w\w\w/	| "AB C"	| （不匹配）
    /\w\w\w/	| "AB\nC"	| （不匹配）
- `\A`
    匹配字符串的开头
    模式	| 字符串	    | 匹配部分
    - | - | -
    /\AABC/	| "ABC"	        | "▶ABC◀"
    /\AABC/	| "ABCDEF"	    | "▶ABC◀DEF"
    /\AABC/	| "012ABC"	    | （不匹配）
    /\AABC/	| "012\nABC"	| （不匹配）
- `\z`
    匹配字符串的末尾
    模式	| 字符串	    | 匹配部分
    - | - | -
    /ABC\z/	| "ABC" 	    | "▶ABC◀"
    /ABC\z/	| "012ABC"	    | "012▶ABC◀"
    /ABC\z/	| "ABCDEF"	    | （不匹配）
    /ABC\z/	| "012\nABC"	| "012\n▶ABC◀"
    /ABC\z/	| "ABC\nDEF"	| （不匹配）
- 元字符转义
    我们还可以用 `\` 对元字符进行转义。在 `\` 后添加 `^`、`$`、`[` 等非字母数字的元字符后，该元字符就不再发挥元字符的功能，而是直接被作为元字符本身来匹配
    模式	| 字符串	| 匹配部分
    - | - | -
    /ABC\[/	| "ABC["	| "▶ ABC[ ◀"
    /\^ABC/	| "ABC"	    | （不匹配）
    /\^ABC/	| "012^ABC"	| "012▶^ABC◀"
**重复**
有时候，我们会需要重复匹配多次相同的字符。例如，匹配“`"Subject:"` 字符串后多个空白符，空白符后又有字符串这样的行”（这是匹配电子邮件的主题时使用的模式）。
正则表达式中用以下元字符来表示重复匹配的模式。
- `*** ……重复 0 次以上**`
    使用 * 的例子
    模式	            | 字符串	            | 匹配部分
    - | - | -
    /A*/	            | "A"	                | "▶A◀"
    /A*/	            | "AAAAAA"	            | "▶AAAAAA◀"
    /A*/	            | ""	                | "▶◀"
    /A*/	            | "BBB" 	            | "▶◀"BBB
    /A*C/	            | "AAAC"	            | "▶AAAC◀"
    /A*C/	            | "BC"	                | "B▶C◀"
    /A*C/	            | "AAAB"	            | （不匹配）
    /AAA*C/	            | "AAC"	                |"▶AAC◀"
    /AAA*C/	            | "AC"	                |（不匹配）
    /A.*C/	            | "AB012C"	            | "▶AB012C◀"
    /A.*C/	            | "AB CD"	            | "▶AB C◀D"
    /A.*C/	            | "ACDE"	            | "▶AC◀DE"
    /^Subject:\s*.*$/	| "Subject: foo"	    | "▶Subject: foo◀"
    /^Subject:\s*.*$/	| "Subject: Re: foo"	| "▶Subject: Re: foo◀"
    /^Subject:\s*.*$/	| "Subject:Re^2 foo"	| "▶Subject:Re^2 foo◀"
    /^Subject:\s*.*$/	| "in Subject:Re foo"	| （不匹配）
- `+ ……重复 1 次以上`
    模式	| 字符串	  | 匹配部分
    - | - | -
    /A+/	| "A"	    | "▶A◀"
    /A+/	| "AAAAAA"	| "▶AAAAAA◀"
    /A+/	| ""	    | （不匹配）
    /A+/	| "BBB"	    | （不匹配）
    /A+C/	| "AAAC"	| "▶AAAC◀"
    /A+C/	| "BC"	    | （不匹配）
    /A+C/	| "AAAB"	| （不匹配）
    /AAA+C/	| "AAC"	    | （不匹配）
    /AAA+C/	| "AC"	    | （不匹配）
    /A.+C/	| "AB012C"	| "▶AB012C◀"
    /A.+C/	| "AB CD"	| "▶AB C◀D"
    /A.+C/	| "ACDE"	| （不匹配）
- `? ……重复 0 次或 1 次`
    模式	| 字符串	|  匹配部分
    - | - | -
    /^A?$/	| "A"	    | "▶A◀"
    /^A?$/	| ""	    | "▶◀"
    /^A?$/	| "AAAAAA"	| （不匹配）
    /^A?C/	| "AC"	    | "▶AC◀"
    /^A?C/	| "AAAC"	| （不匹配）
    /^A?C/	| "BC"	    | （不匹配）
    /^A?C/	| "C"	    | "▶C◀"
    /AAA?C/	| "AAAC"	| "▶AAAC◀"
    /AAA?C/	| "AAC"	    | "▶AAC◀"
    /AAA?C/	| "AC"	    | （不匹配）
    /A.?C/	| "ACDE"	| "▶AC◀DE"
    /A.?C/	| "ABCDE"	| "▶ABC◀DE"
    /A.?C/	| "AB012C"	| （不匹配）
    /A.?C/	| "AB CD"	| （不匹配）
**最短匹配**
匹配 0 次以上的 `*` 以及匹配 1 次以上的 `+` 会匹配尽可能多的字符 1。相反，匹配尽可能少的字符 2 时（重复后的模式首次出现的位置之前的部分），我们可以用以下元字符：
- `*? ……0 次以上的重复中最短的部分`
- `+? ……1 次以上的重复中最短的部分`
    模式	| 字符串	        | 匹配部分
    - | - | -
    /A.*B/	| "ABCDABCDABCD"	| "▶ABCDABCDAB◀CD"
    /A.*C/	| "ABCDABCDABCD"	| "▶ABCDABCDABC◀D"
    /A.*?B/	| "ABCDABCDABCD"	| "▶AB◀CDABCDABCD"
    /A.*?C/	| "ABCDABCDABCD"	| "▶ABC◀DABCDABCD"
    /A.+B/	| "ABCDABCDABCD"	| "▶ABCDABCDAB◀CD"
    /A.+C/	| "ABCDABCDABCD"	| "▶ABCDABCDABC◀D"
    /A.+?B/	| "ABCDABCDABCD"	| "▶ABCDAB◀CDABCD"
    /A.+?C/	| "ABCDABCDABCD"	| "▶ABC◀DABCDABCD"
**() 与重复**
在刚才的例子中，我们只是重复匹配了 1 个字符，而通过使用 `()`，我们还可以重复匹配多个字符
模式	    | 字符串	    | 匹配部分
- | - | -
/^(ABC)*$/	| "ABC"	        | "▶ABC◀"
/^(ABC)*$/	| ""	        | "▶◀"
/^(ABC)*$/	| "ABCABC"	    | "▶ABCABC◀"
/^(ABC)*$/	| "ABCABCAB"	| （不匹配）
/^(ABC)+$/	| "ABC"	        | "▶ABC◀"
/^(ABC)+$/	| ""	        | （不匹配）
/^(ABC)+$/	| "ABCABC"	    | "▶ABCABC◀"
/^(ABC)+$/	| "ABCABCAB"	| （不匹配）
/^(ABC)?$/	| "ABC"	        | "▶ABC◀"
/^(ABC)?$/	| ""	        | "▶◀"
/^(ABC)?$/	| "ABCABC"	    | （不匹配）
/^(ABC)?$/	| "ABCABCAB"	| （不匹配）
**选择**
我们可以用 `|` 在几个候补模式中匹配任意一个
模式	        | 字符串	    | 匹配部分
- | - | -
/^(ABC|DEF)$/	| "ABC"	        | "▶ABC◀"
/^(ABC|DEF)$/	| "DEF"	        | "▶DEF◀"
/^(ABC|DEF)$/	| "AB"	        | （不匹配）
/^(ABC|DEF)$/	| "ABCDEF"	    | （不匹配）
/^(AB|CD)+$/	| "ABCD"	    | "▶ABCD◀"
/^(AB|CD)+$/	| ""	        | （不匹配）
/^(AB|CD)+$/	| "ABCABC"	    | （不匹配）
/^(AB|CD)+$/	| "ABCABCAB"	| （不匹配）
# 使用 quote 方法的正则表达式
有时候我们可能会希望转义（escape）正则表达式中的所有元字符。而 `quote` 方法就可以帮我们实现这个想法。`quote` 方法会返回转义了元字符后的正则表达式字符串，然后再结合 `new` 方法，就可以生成新的正则表达式对象了。
```Ruby
re1 = Regexp.new("abc*def")
re2 = Regexp.new(Regexp.quote("abc*def"))
p (re1 =~ "abc*def")    #=> nil
p (re2 =~ "abc*def")    #=> 0
```
`quote` 方法的问题在于不能以元字符的格式写元字符。因此，在写一些复杂的正则表达式时，建议不要使用 `quote` 方法，而是乖乖地对元字符进行转义。
# 正则表达式的选项
正则表达式中还有选项，使用选项可以改变正则表达式的一些默认效果。
设定正则表达式的选项时，只需在 `/…/` 的后面指定即可，如 `/… /im`，这里的 `i` 以及 `m` 就是正则表达式的选项。
- `i`
    忽略英文字母大小写的选项。指定这个选项后，无论字符串中的字母是大写还是小写都会被匹配。
- `x`
    忽略正则表达式中的空白字符以及 `#` 后面的字符的选项。指定这个选项后，我们就可以使用 `#` 在正则表达式中写注释了。
- `m`
    指定这个选项后，就可以使用 . 匹配换行符了。
    ```ruby
    str = "ABC\nDEF\nGHI"
    p /DEF.GHI/ =~ str     #=> nil
    p /DEF.GHI/m =~ str    #=> 4
    ```
表中总结了几种常用的选项。
选项	| 选项常量	                | 意义
- | - | -
i	    | Regexp::IGNORECASE	    | 不区分大小写
x	    | Regexp::EXTENDED	        | 忽略模式中的空白字符
m	    | R egexp::MULTILINE	    | 匹配多行