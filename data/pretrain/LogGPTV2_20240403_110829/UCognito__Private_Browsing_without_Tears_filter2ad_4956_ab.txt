### Table 1: Comparison of Policies for Private Browsing Modes in Major Browsers

| Browser | Store | Use | Notes |
|---------|-------|-----|-------|
| Chrome  | ✗     | ✗   | Incognito mode disables add-ons. |
| Firefox | ✓     | ✓   | Private browsing enables plugins. |
| Opera   | ✗     | ✗   | - |
| Safari  | ✗     | ✗   | - |
| IE      | ✗     | ✗   | - |

**Notes:**
- **Store:** Indicates whether the browser stores persistent data generated during a private browsing session.
- **Use:** Indicates whether the browser accesses persistent data generated in previous browsing sessions.
- Each browser has a different set of privacy policies. For example, Firefox's private browsing mode allows the use of plugins, while Chrome's incognito mode disables add-ons.

### Code Snippet: Firefox Cookie Service Implementation

```cpp
// @netwerk/cookie/nsCookieService.cpp

DBState *mDBState;
nsRefPtr<DBState> mDefaultDBState; // DB for normal mode
nsRefPtr<DBState> mPrivateDBState; // DB for private mode

// Invoked when initializing session
void nsCookieService::InitDBStates() {
    // Initialization logic
}

// Invoked when storing cookies
void nsCookieService::SetCookieStringInternal() {
    // Logic to store cookies
}

// Decide which cookie DB to use, depending on the mode
mDBState = aIsPrivate ? mPrivateDBState : mDefaultDBState;
```

### Figure 1: Firefox's Cookie Service Implementation

Firefox maintains separate objects for public and private browsing modes. For example, the cookie service has two database instances: `mDefaultDBState` for normal mode and `mPrivateDBState` for private mode. This implementation adds complexity because developers must distinguish between the modes whenever they update or access cookies. The global variable `aIsPrivate` is used to identify the current browsing mode and is checked whenever the browser needs to access or modify cookies.

### Complexity and Privacy Issues

The code snippet in Figure 1 illustrates the complexity added by Chrome and Firefox to support private browsing. In addition to cookie management, the full implementation of private browsing in these browsers also involves other components such as cache services, form auto-complete, history, and SSL certificate stores. This complexity increases the likelihood of bugs and privacy issues, as shown in Table 2.

### Add-on Management in Private Browsing

Browser add-ons are not automatically enabled in private browsing mode. Instead, Firefox and Chrome provide an interface for add-ons to check the current browsing mode and expect developers to implement different logic for each mode. Firefox uses a manual review process to ensure that add-ons respect private browsing policies, but this approach may become less effective as add-ons become more complex.

### Bug Reports Related to Private Browsing

| Category                | Bug ID | Browser | Description |
|-------------------------|--------|---------|-------------|
| Privacy unawareness     | 967812 | Firefox | Permissions Manager writes to disk in Private Browsing Mode. |
| Implementation bug      | 37238  | Chrome  | Cookie exception recorded while in private browsing mode. |
| Reluctance in responding | 553773 | Firefox | Entering private browsing aborts active downloads. |
|                         | 21974  | Chrome  | Private Browsing download window shows wrong data. |
|                         | 1074150| Firefox | Second instance of incognito mode remembers the log-in session. |
|                         | 471597 | Chrome  | Sessions are not "private" when opening two or more private (incognito) windows. |

### Testing Private Browsing with UVERIFIER

To systematically test the security of private browsing in Firefox and Chrome, we developed UVERIFIER, a tool that checks for violations of the stealthiness and freshness goals. UVERIFIER consists of three main components:

1. **Script-based Driver:** Manages the creation of new profiles, starting and stopping the browser, visiting suspicious websites, and initializing plug-ins.
2. **System Call Tracer:** Based on `strace`, captures browser behavior in terms of system calls.
3. **Analyzer:** Extracts privacy violation patterns from the system call traces.

### UVERIFIER Workflow

- **Stealthiness Goal Test:**
  - Run one private session (A).
  - Detect any file that is opened/created with the write flag, has data inflow, and is not deleted after session A.
  
- **Freshness Goal Test:**
  - Run one public session (A) and one private session (B) consecutively.
  - Detect any file that is opened with the read flag and has data outflow in session B.

### Detected Privacy Violations

Using UVERIFIER, we discovered several previously unknown privacy violations in Chrome and Firefox, including:

- **OCSP Cache in Firefox:**
  - Firefox caches OCSP responses at `//cache2/entries/` even in private mode, violating the stealthiness goal. An adversary could infer visited websites using the cached information.

- **PNaCl Translation Cache in Chrome:**
  - PNaCl (Portable Native Client) allows compiled C and C++ code to run securely in the browser. However, the translation cache can persist data, violating the stealthiness and freshness goals.

These findings highlight the need for more systematic and rigorous approaches to ensure the privacy and security of private browsing modes in modern web browsers.