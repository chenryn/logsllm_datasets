title:Measuring the (Over)use of Service Workers for In-Page Push Advertising
Purposes
author:George Pantelakis and
Panagiotis Papadopoulos and
Nicolas Kourtellis and
Evangelos P. Markatos
Measuring the (Over)use of Service
Workers for In-Page Push Advertising
Purposes
George Pantelakis1, Panagiotis Papadopoulos2(B), Nicolas Kourtellis2,
and Evangelos P. Markatos1
1 FORTH/University of Crete, Heraklion, Greece
2 Telefonica Research, Barcelona, Spain
PI:EMAIL
Abstract. Rich oﬄine experience, periodic background sync, push noti-
ﬁcation functionality, network requests control, improved performance
via requests caching are only a few of the functionalities provided by the
Service Worker (SW ) API. This new technology, supported by all major
browsers, can signiﬁcantly improve users’ experience by providing the
publisher with the technical foundations that would normally require a
native application. Albeit the capabilities of this new technique and its
important role in the ecosystem of Progressive Web Apps (PWAs), it is
still unclear what is their actual purpose on the web, and how publishers
leverage the provided functionality in their web applications.
In this study, we shed light in the real world deployment of SWs, by
conducting the ﬁrst large scale analysis of the prevalence of SWs in the
wild. We see that SWs are becoming more and more popular, with the
adoption increased by 26% only within the last 5 months. Surprisingly,
besides their fruitful capabilities, we see that SWs are being mostly used
for In-Page Push Advertising, in 65.08% of the SWs that connect with
3rd parties. We highlight that this is a relatively new way for advertisers
to bypass ad-blockers and render ads on the user’s displays natively.
Keywords: Service workers · Push ads · Push notiﬁcation advertising
1 Introduction
The proliferation of, and our ever-increasing reliance on, the Web have boosted
the development of more complex and user-friendly Web applications that can
operate cross-platform (on both desktop and mobile Web). Recent advancements
in the contemporary browsers and in the availability of technologies like the SW
API have 1) enabled users to receive timely updates via push notiﬁcations, 2)
their content synced on the background, 3) improved performance (via request
caching) and 4) even allowed to work oﬄine.
These rich capabilities of SWs played an important role in the birth and
growth of a whole separate type of application software called Progressive Web
c(cid:2) The Author(s), under exclusive license to Springer Nature Switzerland AG 2022
O. Hohlfeld et al. (Eds.): PAM 2022, LNCS 13210, pp. 426–438, 2022.
https://doi.org/10.1007/978-3-030-98785-5_19
Measuring the (Over)use of Service Workers
427
Apps (PWAs) [1]. PWAs are built on top of three requirements: HTTPS, SWs
and a web app manifest. By combining functionalities of diﬀerent web APIs (e.g.,
WebRTC, Cache API, Push API), PWAs are capable of providing the beneﬁts
of both native apps and websites worlds: reliability, rich user experience, and
multi-platform support via a single codebase [2].
The somewhat revolutionary functionality of SWs could not avoid drawing
the attention of the academic community with regards to its security aspects.
Speciﬁcally, research studies have shown that this technology provides rich capa-
bilities not only to users and web developers, but to potential attackers as well.
In [3], authors present a framework that exploits SWs functionality to launch
attacks like DDoS, cryptojacking and distributed password cracking. In [4],
authors investigate the potential privacy leaks that malicious SWs can cause
on a victim’s browser.
Notwithstanding the important research on the SW API, yet it is still
unknown what is the prevalence and the growth of the SW deployment across
the Web and how publishers leverage the provided functionality of SWs in their
Web applications. In this study, we aim to address these exact questions, by
conducting a full-scale analysis of SWs (the core component of PWAs) in the
wild. Speciﬁcally, we crawl a large number of websites to detect the deployment
of SWs, monitor and characterize their communications across the Internet, and
investigate their purpose of existence and operation on the websites found.
In summary, the contributions of our present work are:
1. By crawling the top 150 K sites of the Tranco list, we detect a dataset of
7,444 SWs-registering websites. The same crawl after 5 months reveals a
high increase (26%) in the adoption of SWs.
2. We use Wayback Machine to go back in time and ﬁnd that, from 2015 till
today, there were 1.62× more publishers per year, on average, utilizing SWs
in their web applications.
3. By analysing our collected dataset, we conduct the ﬁrst full-scale study of
the SWs deployment on the Web. Speciﬁcally, we investigate with whom the
deployed SWs communicate over the Internet, what are the websites that
use such technology the most, as well as what is the purpose of the deployed
SWs. Surprisingly, we see that despite the important functionality of SWs
(e.g., timely notiﬁcations, background sync, etc.), yet a stunning 65.08% of
the SWs that connect with 3rd parties use SWs for pushing ads to the users,
under the radar of possibly deployed ad-blockers.
2 Service Workers
A Service Worker is a JavaScript script that runs separately from the main
browser thread, and can intercept network requests, perform caching or retriev-
ing resources from the cache, and deliver push messages. SWs are independent
from the Web application they are associated with, so they cannot access the
DOM directly. SWs are non-blocking and fully asynchronous. Therefore, syn-
chronous XHR and localStorage cannot be used inside a SW . Also, a SW can
428
G. Pantelakis et al.
Fig. 1. The Web Push API enables devel-
opers to deliver asynchronous notiﬁca-
tions and updates to users who opted-in.
Fig. 2. An in-page push advertisement
as it appears on the user’s screen on top
of other windows.
import and execute 3rd party scripts within its context, and receive push mes-
sages from a remote server, thus letting the associated website push notiﬁcations
to the user (even when the website is not open in a browser tab). Finally, a SW
can be registered to the browser via the serviceWorkerContainer.register()
or navigator.serviceWorker.register() function, which take as argument
the (HTTPS only) URL of the remote JavaScript ﬁle that contains the worker’s
script. This URL is passed to the internal browser’s engine and is fetched from
there. For security purposes, this JavaScript ﬁle can be fetched only from the
ﬁrst-party domain, i.e., cannot be hosted by a CDN or a 3rd party server.
2.1 Web Push Notiﬁcations
The Web Push API gives web applications the ability to receive messages pushed
from a remote server, whether or not the Web app is in the foreground, or even
loaded in a browser tab. As shown in Fig. 1, the Web Push API enables devel-
opers to deliver asynchronous notiﬁcations and updates to (desktop or mobile)
users that opt-in, resulting in better engagement with timely new content. For
an app to receive push messages, it has to have an active SW and subscribe to
push notiﬁcations (each subscription is unique to a SW ). The endpoint for the
subscription is a unique capability URL, and the knowledge of the endpoint is
all that is necessary to send a message to the application’s users. Therefore, the
endpoint URL needs to be kept secret or anyone might be able to send push
messages to the app’s users.
2.2
In-Page Push Advertising
Web push notiﬁcation technology itself is nothing new, but it has started to be
used for advertising purposes very recently. In fact, push marketing skyrocketed
at the end of 2018 [5]. Push ads are a type of native ad format in the form of
a notiﬁcation message from a website, which appears on the user’s screen on
top of other windows as shown in Fig. 2. Users who click on those messages get
redirected to the advertiser’s landing page, thus, generating ad-conversion.
Measuring the (Over)use of Service Workers
429
Fig. 3. High level overview of how SWs deliver push ads on the user display even with
ad blocker deployed.
The in-page push ad delivery is cross-platform and aims to oﬀer an opt-
in based, highly engaging way for advertisers to reconnect and expand their
audiences, while at the same time it achieves higher click-through and conver-
sion rates than other ad formats [6]. A push notiﬁcation usually consists of: (i)
the main image which conveys the sense of the ad impression, (ii) the small
icon which explains the main image, (iii) the headline which is the main ele-
ment to engage users and (iv) the message text that shows the main details
of the oﬀer. Contrary to traditional programmatic advertising [7–9], in push
ads, advertisers pay for clicks (i.e., Cost-Per-Click) and not for impressions (i.e.,
Cost-per-Impression). The minimum cost per click starts from $0.0104 [10], but
in Real-Time Bidding the median cost per impression has been measured to be
as low as $0.0025 [11].
3 Use Case
In Fig. 3, we present a high level overview of how SWs and push notiﬁcations
work. As we can see, ﬁrst (step 1), the user visits a website they are interested in,
thus, instructing a browser to connect with a web server (step 2) that responds
back with the web page’s HTML/CSS/JavaScript resources, along with a SW
script, which gets registered (step 3). This snippet will deploy a SW inside the
user’s browser (step 4) which operates independently from the rendered website.
Then, the SW will ask the user’s permission to push notiﬁcation massages on
their display (step 5) and if granted, it will establish a communication chan-
nel with a remote messaging platform to subscribe to their push notiﬁcations
(step 6). Whenever the message publishing entity (e.g., news update feed server,
430
G. Pantelakis et al.
Table 1. Summary of our dataset
Data
Volume
Websites parsed
(1st crawl, 12.20) Websites registering a SW (SW)
150 K
7,444 (4.96%)
SWs that do not communicate with any remote server 336 (4.51%)
SWs communicating only with the ﬁrst party
SWs communicating with at least one 3rd party
2,054 (27.59%)
5,054 (67.89%)
SWs communicating with at least one ad server
SWs communicating with at least one analytics server 164 (3.24%)
3,289 (44.18%)
(2nd crawl, 05.21) Websites registering a SW
9,383 (6.25%)
article recommendation server, ad server) behind the messaging platform has
updates to push to the website’s users, it uploads them to the platform which
will push them to all subscribed users (step 7). On the user’s end, upon message
arrival, the deployed SW creates a push notiﬁcation with the received message
on the user’s display (step 8). As shown, a SW may establish a separate commu-
nication channel with a remote messaging platform that cannot be monitored or
ﬁltered by any potentially deployed ad-blocking browser extension. This means
that whenever a user opts-in to receive updates from a website, they may start
receiving ad notiﬁcations instead, even if they have an ad-blocker deployed.
4 Data Collection
Crawling Infrastructure. After manual inspection, we see that there are web-
sites checking ﬁrst if the site has push notiﬁcation permissions, before registering
SWs. This means that in order to perform a large scale crawl of websites and
detect the deployment of SWs, and the use of push notiﬁcations, some sort of
automation for the notiﬁcation consent is required. To address this, we leverage
the crawler presented in [12]. This crawler creates docker containers with fresh
instrumented Chromium browser instances and browser automation scripts. The
browser has the RequestPermission and PermissionDecided methods of the class
Permission-ContextBase, modiﬁed to automatically grant permissions on every
site. Then, a custom Puppeteer [13] script listening to serviceworkercreated event
is used to log when a SW is registered by a website, the page that registered
this SW and the URI of the source code. As soon as a SW is registered, it can
subscribe for push notiﬁcations via a Cloud Messaging Platform (e.g., Firebase
Cloud Messaging [14]) with an API key passed from the server to the browser,
which is also logged by listening for PushManager.subscribe events. Then, the
custom Puppeteer script logs the communication between the SW and the Web.
Creating the Dataset. We create a dataset of websites that utilize SWs, by
crawling the landing pages of the 150 K top sites of a (deduplicated, pay-level
only domains) Tranco list [15] in December 2020. Each site is visited for three
s
e
t
i
s
f
o
e
g
a
t
n
e
c
r
e
P
40%
35%
30%
25%
20%
15%
10%
5%
0%
%
0
0
7
2
.
%
5
0
2
2
.
i
a
d
e
M
d
n
a
s
w
e
N
Measuring the (Over)use of Service Workers
431
sites with SW
sites with SW fetching ads
%
7
2
.
6
%
2
4
.
6
%
7
3
.
4
%
0
5
.
3
%
9
7
.
4
%
2
3
.
3
%
8
1
.
3
%
2
3
.