改进的性能：
::: itemizedlist
-   现在，将长代码粘贴到 `交互式 Ruby Shell(IRB)`{.literal}
    的速度要快得多。
-   `测量结果`{.literal} 命令已添加到 `IRB`{.literal} 中以测量时间。
:::
其他显著变化包括：
::: itemizedlist
-   关键字参数已与其他参数分隔。
-   用户安装的 gems 的默认目录现在是
    `$HOME/.local/share/gem/`{.literal}，除非 `$HOME/.gem/`{.literal}
    目录已经存在。
:::
要安装 `ruby:3.0`{.literal} 模块流，请使用：
``` literallayout
# yum module install ruby:3.0
```
如果要从以前的 `ruby`{.literal}
模块流升级，[请参阅切换到更新的流](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/installing_managing_and_removing_user-space_components/index#switching-to-a-later-stream_managing-versions-of-appstream-content){.link}。
([BZ#1938942](https://bugzilla.redhat.com/show_bug.cgi?id=1938942){.link})
[]{#New-features.html#BZ-1935686}
::: title
**Python `urllib`{.literal} 解析功能的默认分隔符更改**
:::
为缓解 Python `urllib`{.literal} 库中的 [Web Cache Poisoning
CVE-2021-23336](https://access.redhat.com/security/cve/CVE-2021-23336){.link}，`urllib.parse.parse_qsl`{.literal}
和 `urllib.parse.parse_qs`{.literal} 功能的默认分隔符将从 `&`{.literal}
和分号(`;`{.literal})改为只使用 &。
这个变化是在 Python 3.6 中在 RHEL 8.4 中实施的，现在被向后移植到 Python
3.8 和 Python 2.7。
默认分隔符的更改可能会向后不兼容，因此红帽提供了一种方法来配置 Python
软件包中修改了默认分隔符的行为。此外，如果受影响的 `urllib`{.literal}
解析功能检测到客户的应用受到更改的影响，则发出警告。
如需更多信息，请参阅 [Python urllib 库(CVE-2021-23336)知识库中的 Web
Cache Poisoning 的
Mitigation](https://access.redhat.com/articles/5860431){.link}。
Python 3.9
不受影响，并且已经包含新的默认分隔符(`&`{.literal})，其只能在调用
由Python 代码编写的 `urllib.parse.parse_qsl`{.literal} 和
`urllib.parse.parse_qs`{.literal} 函数时传递 separator 参数来进行修改。
(BZ#1935686, BZ#1931555, BZ#1969517)
[]{#New-features.html#BZ-1986007}
::: title
**Python `ipaddress`{.literal} 模块不再允许 IPv4 地址中的零**
:::
为缓解
[CVE-2021-29921](https://access.redhat.com/security/cve/CVE-2021-29921){.link}，Python
`ipaddress`{.literal} 模块现在拒绝带有
`AddressValueError 的前导零的 IPv4 地址：不允许前导零`{.literal} 错误。
`python38 和 python`{.literal} `39`{.literal} 模块中引入了这个变化。RHEL
中发布的早期 Python 版本不受 CVE-2021-29921 的影响。
依赖之前行为的客户可以预先处理其 IPv4 地址输入，从而去除前导零。例如：
``` screen
>>> def reformat_ip(address): return '.'.join(part.lstrip('0') if part != '0' else part for part in address.split('.'))
>>> reformat_ip('0127.0.0.1')
'127.0.0.1'
```
要使用显式循环剥离前导零以提高可读性，请使用：
``` screen
def reformat_ip(address):
    parts = []
    for part in address.split('.'):
        if part != "0":
            part = part.lstrip('0')
        parts.append(part)
    return '.'.join(parts)
```
(BZ#1986007, BZ#1970504, BZ#1970505)
[]{#New-features.html#BZ-1944110}
::: title
**`php:7.4`{.literal} 模块流被 rebase 到版本 7.4.19**
:::
`php:7.4`{.literal} 模块流提供的 PHP 脚本语言已从 7.4.6 升级到版本
7.4.19。这个版本提供了多个安全和程序错误修复。
(BZ#1944110)
[]{#New-features.html#BZ-1967193}
::: title
**新软件包： `pg_repack`{.literal}**
:::
new `pg_repack`{.literal} 软件包已添加到 `postgresql:12`{.literal} 和
`postgresql:13`{.literal} 模块流中。The `pg_repack`{.literal}
软件包提供了一个 `PostgreSQL`{.literal} 扩展，可让您从表和索引中删除
bloat，也可以恢复集群索引的物理顺序。
(BZ#1967193，BZ#1935889)
[]{#New-features.html#BZ-1945671}
::: title
**新模块流： `nginx:1.20`{.literal}**
:::
`nginx 1.20`{.literal} web 和代理服务器现在作为 `nginx:1.20`{.literal}
模块流提供。与之前发布的 1.18
版本相比，这个版本提供了很多程序错误修复、安全修复、新功能以及改进。
新特性：
::: itemizedlist
-   `nginx`{.literal} 现在支持使用在线证书状态协议(OCSP)的客户端 SSL
    证书验证。
-   `nginx`{.literal} 现在支持根据最小可用空间清除缓存。此支持作为
    `proxy_cache _path 指令的 min_`{.literal} free``{=html}
    参数实施。
-   添加了一个新的 `ngx_stream_set_module`{.literal}
    模块，它可让您为变量设置值。
:::
增强的指令：
::: itemizedlist
-   现在提供了多个新指令，如 `ssl_conf_command`{.literal} 和
    `ssl_reject_handshake`{.literal}。
-   `proxy_cookie_flags`{.literal} 指令现在支持变量。
:::
改进了对 HTTP/2 的支持：
::: itemizedlist
-   `ngx_http_v2`{.literal} 模块现在包含 lingering
    `_close、ling`{.literal}
    ering`_time`{.literal}、ling`ering_timeout`{.literal} 指令。
-   HTTP/2 中的连接处理与 HTTP/1.x 一致。从 `nginx 1.20`{.literal}，使用
    `keepalive_timeout`{.literal} 和 `keepalive_requests`{.literal}
    指令，而不是删除的
    `http2_recv_timeout`{.literal}、`http2_idle_timeout`{.literal} 和
    `http2_max_requests`{.literal} 指令。
:::
要安装 `nginx:1.20`{.literal} 流，请使用：
``` literallayout
# yum module install nginx:1.20
```
如果要从 `nginx:1.20`{.literal}
流升级，[请参阅切换到更新的流](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/installing_managing_and_removing_user-space_components/index#switching-to-a-later-stream_managing-versions-of-appstream-content){.link}。
(BZ#1945671)
[]{#New-features.html#BZ-1964384}
::: title
**`squid:4`{.literal} 模块流 rebase 到版本 4.15**
:::
`Squid`{.literal} 代理服务器（位于 `squid:4`{.literal} 模块流中）已从
4.11 升级到 4.15 版本。这个版本提供了各种程序错误和安全修复。
(BZ#1964384)
[]{#New-features.html#BZ-1945408}
::: title
**`配额`{.literal} 现在支持 HPE XFS**
:::
`配额`{.literal} 实用程序现在提供对 HPE XFS 文件系统的支持。因此，HPE
XFS 用户可以通过 `配额`{.literal} 实用程序监控和管理磁盘使用情况。
(BZ#1945408)
[]{#New-features.html#BZ-1912614}
::: title
**`mutt`{.literal} rebase 到版本 2.0.7**
:::
`Mutt`{.literal} 电子邮件客户端已更新至 2.0.7
版本，提供一些增强和程序错误修复。
主要变更包括：
::: itemizedlist
-   `mutt 现在使用 XOAUTH2`{.literal} ``{=html} 机制提供对
    `OAuth 2.0`{.literal} 授权协议的支持。mutt 现在还支持用于 IMAP、POP
    和 SMTP 协议的 `OAUTHBEARER`{.literal} 验证机制。基于 OAuth
    的功能通过外部脚本提供。因此，您可以使用身份验证令牌将
    `Mutt`{.literal} 与各种云电子邮件提供商连接，如
    `Gmail`{.literal}。有关如何使用 OAuth 支持设置 `Mutt`{.literal}
    的更多信息，请参阅 [如何使用 OAuth2 身份验证使用 Gmail 设置
    Mutt](https://access.redhat.com/articles/6278361){.link}。
-   `mutt 添加了对域字面电子邮件地址的支持`{.literal}，例如
    `user@[IPv6:fcXX:…​]`{.literal}.
-   新的 `$ssl_use_tlsv1_3`{.literal} 配置变量允许 TLS 1.3
    连接（如果电子邮件服务器支持）。此变量默认为启用。
-   新的 `$imap_deflate`{.literal} 变量添加了对
    `COMPRESS=DEFLATE`{.literal} 压缩的支持。变量默认为禁用。
-   `$ssl_starttls`{.literal} 变量不再控制未加密 IMAP
    `PREAUTH`{.literal} 连接。如果您依赖 `STARTTLS`{.literal}
    进程，则改为使用 `$ssl_force_tls`{.literal} 变量。
:::
请注意，即使更新到新的 `Mutt`{.literal} 版本，`ssl_force_tls`{.literal}
配置变量仍默认为 `no`{.literal}，以防止 RHEL
用户在现有环境中遇到问题。在 `Mutt`{.literal}
的上游版本中，`ssl_force_tls`{.literal} 现在被默认启用。
([BZ#1912614](https://bugzilla.redhat.com/show_bug.cgi?id=1912614){.link},
[BZ#1890084](https://bugzilla.redhat.com/show_bug.cgi?id=1890084){.link})
:::
::: section
::: titlepage
# []{#New-features.html#enhancement_compilers-and-development-tools}编译器和开发工具 {.title}
:::
[]{#New-features.html#BZ-1938071}
::: title
**Go Toolset rebase 到版本 1.16.7**
:::
Go Toolset 已升级至 1.16.7 版本。主要变更包括：
::: itemizedlist
-   现在，`GO111MODULE`{.literal} 环境变量默认设置为
    `on`{.literal}。要恢复此设置，请将 `GO111MODULE`{.literal} 更改为
    `auto`{.literal}。
-   Go linker
    现在使用较少的资源，提高了代码的稳健性和可维护性。这适用于所有支持的体系结构和操作系统。
-   使用新的 `嵌入`{.literal}
    软件包，您可以在编译程序的同时访问嵌入的文件。
-   `io/ioutil`{.literal} 软件包的所有功能都已移到 `io`{.literal} and
    `os`{.literal} 软件包中。虽然您仍然可以使用
    `io/ioutil`{.literal}，但 `io`{.literal} and `os`{.literal}
    软件包提供更好的定义。
-   Delve 调试器已被 rebase 到 1.6.0，现在支持 Go 1.16.7 Toolset。
:::
如需更多信息，请参阅 [使用 Go
Toolset](https://access.redhat.com/documentation/en-us/red_hat_developer_tools/1/html/using_go_1.16.6_toolset/index){.link}。
(BZ#1938071)
[]{#New-features.html#BZ-1945805}
::: title
**Rust Toolset rebase 到版本 1.54.0**
:::
Rust Toolset 已更新至 1.54.0 版本。主要变更包括：
::: itemizedlist
-   Rust 标准库现在可用于 is `m32-unknown-unknown`{.literal}
    目标。在这个版本中，您可以生成 WebAssembly
    二进制文件，包括新稳定的内部。
-   Rust 现在包括数组的 `IntoIterator`{.literal}
    实施。在这个版本中，您可以使用 `IntoIterator`{.literal}
    特征按值迭代数组并将数组传递给方法。但是，`array.into_iter（）`{.literal}
    仍会通过引用来迭代值，直到 2021 版 Rust。
-   或 模式的语法现在允许在 `模式`{.literal}
    中的任何位置嵌套。例如：`Pattern(1|2)`{.literal} 而不是
    `Pattern(1)|Pattern(2)`{.literal}。
-   Unicode 标识符现在可以包含 Unicode 标准 #31
    中定义的所有有效标识符字符。
-   方法和特征实施已经稳定。
-   默认重新启用增量编译。
:::
如需更多信息，[请参阅使用 Rust
Toolset](https://access.redhat.com/documentation/en-us/red_hat_developer_tools/1/html/using_rust_1.54.0_toolset/index){.link}。
(BZ#1945805)
[]{#New-features.html#BZ-1927937}
::: title
**LLVM Toolset rebase 到版本 12.0.1**
:::
LLVM Toolset 已升级到 12.0.1 版本。主要变更包括：
::: itemizedlist
-   添加了新编译器标志 `-march=x86-64-v[234]`{.literal}。
-   Clang 编译器的编译器标志 `-fasynchronous-unwind-tables`{.literal}
    现在是 Linux AArch64/PowerPC 中的默认设置。
-   Clang 编译器现在支持 C++20 可能属性 \[\[类似\]\] 和
    \[\[notlikely\]\]。
-   添加了新函数属性 `tune-cpu`{.literal}。它允许独立于
    `target-cpu`{.literal} 属性或 TargetMachine CPU 应用微架构优化。
-   新的 sanitizer `-fsanitize=unsigned-shift-base`{.literal}
    已添加到整数 sanitizer `-fsanitize=integer 以提高`{.literal}
    安全性。
-   PowerPC 目标上的代码生成已被优化。
-   WebAssembly 后端现在在 LLVM 中启用。在这个版本中，您可以使用 LLVM 和
    Clang 生成 WebAsembly 二进制文件。
:::