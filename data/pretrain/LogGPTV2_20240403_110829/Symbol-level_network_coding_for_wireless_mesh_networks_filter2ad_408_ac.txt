The new packet is innovative w.r.t the previously transmitted coded
packet, and uses lower overhead in describing the codes.
6.3 Dynamic Programming to Minimize Overhead
S1
We now present a systematic way to minimize the number of runs in
a coded packet, while ensuring that each packet is innovative with
respect to previously transmitted coded packets. We formalize the
problem using dynamic programming. Let there be n input packets,
from which we create the naive coded packet, as shown in the previ-
ous example. Say the naive packet contains the runs R1R2 . . . RL. The
optimization attempts to combine consecutive runs from the naive
coded packet into a single run, whose symbols all have the same code
vector by ignoring some of the input clean symbols. Let Cij be the
combined run that includes the runs Ri . . . Rj from the naive coded
packet. Note that the combined run Cii is the same as run Ri.
Next, we show that each combined run can be assigned a cost, and
that the optimization problem that minimizes the number of inno-
vative combined runs exhibits the “optimal substructure” property,
i.e., the cost of a combined run can be derived from the cost of two
sub-runs.
The goal is to create an outgoing coded packet out of the smallest
number of combined runs, while ensuring that the information we
send out is innovative. Thus, we can formulate the cost of a combined
run as follows:
Cost(Cij) = min(cid:26)f(Cij), min
i 0 do
Update C-ETS of downstream nodes from overheard packets
Sort downstream nodes according to their C-ETS
Pleft = 1
for node j in set of downstream nodes sorted according to C-ETS do
credit assgn(j) = Pleft
Pleft = Pleft ∗ (1 − p(i, j))
Increment Transmit Counter of ﬂow f by 1/(1 − Pleft)
Decrement Q(i, f ) by 1
Distributed protocol: Each node, i, periodically measures the
symbol delivery probabilities p(i, j) for each of its neighbors via
probes. These probabilities are distributed to its neighbors using a
link state protocol. Node i includes the computed credit assgn for
each of its downstream nodes in the header of every packet it transmits.
When downstream nodes receive a packet, they update their Q(i, f )
for that ﬂow by the amount speciﬁed in the header. Further, whenever
node i transmits a packet, it includes its C-ETS to the corresponding
destination in the header. Upstream nodes which overhear this packet,
use the C-ETS value in their credit assignment procedure.
The algorithm above improves on the routing algorithms used in
prior packet based opportunistic routing protocols like MORE [2] in
two ways. First, we use queue backlog information explicitly to avoid
congested spots and balance network-wide load, prior work ignores
congestion. Second, the algorithm works at the symbol-level, which is
the right granularity for performing opportunistic routing on symbols.
The algorithm is similar in spirit to theoretical back-pressure [19]
ideas, but the exact technique is different and simpler. We also present
an actual implementation and evaluation of this algorithm in §11.
8
Increasing Concurrency
Current wireless mesh networks allow a node to transmit only when
they are sure that they can deliver the packet to the intended next hop
with high probability. MIXIT however, has looser constraints:
1. It does not require the delivery of correct packets; it can work with
partially correct packets.
2. Because of its opportunistic nature, MIXIT only needs to ensure
that every symbol reaches some node closer to the destination than
the transmitter; it does not need to ensure that a speciﬁc node gets
the correct symbols.
MIXIT exploits the above ﬂexibility to increase concurrency without
affecting end-to-end reliability, improving throughput by enabling a
more pipelined transmission pattern. MIXIT’s concurrency design
has two components: determining when concurrent transmissions are
beneﬁcial and building a distributed protocol to take advantage of
concurrency opportunities. We describe both components below.
8.1 When Should Two Nodes Transmit Concurrently?
rent transmissions and comparing it to the throughput when the
nodes transmit separately. The nodes independently pick the strategy
with the higher expected throughput. Speciﬁcally, let n1 and n2 be
two nodes transmitting packets of two ﬂows l and k. Ne(n1, l) and
Ne(n2, k) are the corresponding sets of downstream nodes for n1 and
n2 for the respective ﬂows. Symbol delivery probabilities on any link
will depend on whether these nodes transmit concurrently or not. Let
pc(i, j) be the symbol delivery probability on link (i, j) when the two
nodes transmit concurrently and p(i, j) when they don’t. The symbol
delivery likelihoods achieved by node n1 for ﬂow l with and without
concurrent transmissions are given by
Dc(n1, l) = 1 − (∏j∈Ne(n1,l)(1 − pc(n1, j)))
D(n1, l) = 1 − (∏j∈Ne(n1,l)(1 − p(n1, j)))
(4)
The symbol delivery likelihood is the probability that at least one
node in Ne(n1, l) receives the symbol correctly when node n1 trans-
mits. The symbol delivery likelihood depends on other concurrent
trafﬁc, and could differ if n2’s transmission interferes with n1’s. Sim-
ilarly, n2 can compute its symbol delivery likelihood under both
conditions.
Each node then computes the following concurrency condition:
Dc(n1, l) + Dc(n2, k) > (D(n1, l) + D(n2, k))/2
(5)
The above equation compares overall delivery likelihood under the
two scheduling strategies. If the above condition is true, it implies
that more information gets delivered per time slot when nodes trans-
mit concurrently than when they transmit separately. Each node
independently evaluates the above condition and decides its strategy.3
8.2 Estimating Symbol Delivery Probabilities
The concurrency condition above depends on the symbol delivery
probabilities. Empirically measuring these probabilities for all pairs
of concurrent transmissions has O(N2) cost, where N is the number
of nodes. Instead, MIXIT uses O(N) empirical signal-to-noise ratio
(SNR) measurements to predict these probabilities for any set of
concurrent transmissions. The approach works as follows.
1. The SNR proﬁle of the network is measured when there is little
trafﬁc. Each of the N nodes broadcasts probe packets in turn, while
the rest of the nodes measure the received SNR and the fraction
of correctly received symbols. The measurements are of the form
SNR(i, j) and p(x), where SNR(i, j) is the received SNR at j when i
transmits and p(x) is the fraction of correct symbols received when
the SNR is x.
2. Nodes use
to predict
the
Speciﬁcally,
the SNR proﬁle
signal-to-
interference+noise ratio (SINR) at any node under con-
current
transmissions.
if nodes n1 and n2
the SINR at node m is computed
transmit concurrently,
as SINR(n1, n2, m) = SNR(n1, m) − SNR(n2, m)
assuming
SNR(n1, m) > SNR(n2, m) ≥ c, where c is a threshold SNR below
which no symbol can be decoded. The symbol delivery probability
is then predicted to be p(SINR(n1, n2, m)), i.e., it is the same as if
the signal was received at m with SNR of SINR(n1, n2, m).
Fig. 7 plots the CDF of prediction errors using the above model.
The results are from a 25-node testbed of GNURadio software nodes
with USRP frontends, with two concurrent senders transmitting
802.15.4 packets. The ﬁgure demonstrates that the prediction model
is quite accurate, with the inaccurate predictions occurring at low
SINR (< 4 dB). But because the symbol delivery probability at low
MIXIT, similar to conﬂict maps [26], determines if two nodes should
transmit concurrently by predicting the throughput under concur-
3The above conditions assumes a single radio transmission bit-rate; it can be adapted
easily to handle variable bit-rates.
s
n
o
i
t
c
d
e
r
P
i
f
o
n
o
i
t
c
a
r
F
e
v
i
t
a
u
m
u
C
l
 1
 0.8
 0.6
 0.4
 0.2
 0
-1
-0.5
 0
 0.5
 1
Fractional Error ((Predicted-Actual)/Actual)
Figure 7: Prediction error CDF: The SNR based prediction model accu-
rately predicts the symbol delivery probabilities under concurrent trans-
missions for 72% of the cases. The inaccuracies are primarily in cases
where (SNR(n1, m) − SNR(n2, m) < 4dB, i.e., when concurrent transmis-
sions will result in a signal being received with low SINR at the receivers.
Input Data
Source Encoded 
Data
Received Data
(mostly corrupted)
Decoded Data
B
r
iD
MRD 
Encoding
K
Symbol-Level
Network Coding
MRD 
Decoding
r
iX
r
iY
r
iD
Figure 8: MIXIT’s error correcting code design: The source prepro-
cesses the original packets with a MRD code in groups of B symbols and
transmits them. The network applies symbol-level network coding on
clean symbols. Erroneous clean symbols may end up corrupting all the
received symbols at the destination, but the destination can use the MRD
code to decode most of the original data symbols.
SINR is negligible, inaccuracies in the low SINR region do not affect
performance. Furthermore, unlike prior proposals [24, 20] that try to
predict packet delivery rates using a SINR model, MIXIT’s model pre-
dicts symbol delivery likelihoods. The latter is simpler since packet
delivery is a complex function of error rates, nature of interference
etc. Finally, the concurrency condition is a binary decision, even if
the predicted probabilities are slightly off, it is unlikely to affect the
decision.
8.3 Distributed Channel Access Protocol
A node uses a two-step procedure when it has packets enqueued for
transmission. First, if it has not heard any on-going transmissions,
it simply goes ahead and transmits. But if it has heard an on-going
transmission, then it uses Eq. 5 to determine if it should transmit
concurrently or defer until the on-going transmission has ﬁnished.
How does a node know which other nodes are transmitting at that
time instant? Similar to prior work [8, 26], MIXIT encapsulates every
packet with a header and trailer. The header includes the identity of
the transmitting node, and the ﬂow to which the packet belongs. Other
nodes overhearing a packet use the header to identify the beginning
of an active transmission and the trailer to signify the end.
that allows the destination to recover the original correct symbols.
The error-correcting code is not affected even if all received symbols
are corrupted; the only thing that matters is how many erroneous
symbols were incorrectly classiﬁed clean. The code guarantees that
if m erroneous symbols were incorrectly classiﬁed clean, then the
destination needs only B + 2m symbols to recover the original B
symbols. This guarantee is theoretically optimal [30]. The code
is simple, rateless and end-to-end; routers inside the network are
oblivious to the existence of the error-correcting code.
MIXIT’s error-correcting code is built on the observation that
random network coding is vector space preserving [12]. Speciﬁcally,
if we model the original data injected by the source as a basis for a
vector space V, then the random network code acts only as a linear
transformation T on the vector space. But vector spaces are preserved
under linear transformations if no errors occur, and if errors do occur,
the received vector space U is very close to the transmitted vector
space V under an appropriately deﬁned distance metric on vector
spaces.
Recent work [12, 23, 7] has studied the problem of making network
coding resilient to byzantine adversaries injecting corrupted packets.
It has observed that low complexity Maximum Rank Distance (MRD)
codes [3], with a small modiﬁcation, can be applied to exploit the
vector space observation and correct adversarial errors. The network
coding in MIXIT is different, but the basic algorithm in MRD can
be adapted to work with MIXIT’s symbol-level network code. Fig. 8
shows the high level architecture of how MRD codes are integrated
within MIXIT. The exact details of decoding MRD codes can be
found in [23, 21, 3], we outline the main differences here:
• Symbol-level network coding along with the end-to-end MRD
code functions as a rateless error-correcting code. The destina-
tion attempts to decode the original data vector ~Di as soon as it
receives B < K coded symbols for that position. If no erroneous
symbols had seeped through, then it will be able to recover the