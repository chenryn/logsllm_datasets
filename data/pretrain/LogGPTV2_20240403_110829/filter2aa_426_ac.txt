security scanners
Insecure protocol
handlers
improper checking of
incoming URLs
no
no
yes
/
security scanners
Introducing privileged
APIs to the window
object
exposing privileged APIs from
preload scripts
no
no
yes
/
security scanners
3.1. Attack Vectors Shared with Web Applications
14
Broken Authentication (A2:2017)
The authentication mechanisms used by services may be weak. Common problems include insuﬀicient brute-
force protection, allowing attackers to perform credential stuﬀing attacks, and improper session timeouts
[17].
This problem doesn’t apply to Electron apps as, again, the Electron app doesn’t act as a central server
but rather the attacker would only be able to access their own data. There may of course be related
vulnerabilities in the backend server the app talks to.
Sensitive Data Exposure (A3:2017)
Sensitive data exposure means the leaking of sensitive information to a third party that isn’t supposed to
have access to that information [18]. The cause for the problem might be something as trivial as forgotten
files on a web server that are accessible without authentication or even just leaking whether a user exists
after entering an invalid password.
While it seems like sensitive data exposure might also primarily apply to server applications, it is actually
relevant to Electron as well. A common example here is remote content loaded via HTTP, allowing for
man-in-the-middle (MITM) attacks, just like in browsers. One might also imagine a password manager
implemented in Electron that leaks sensitive data to other applications.
There are some mitigations targetting these kinds of problems, primarily security scanners which alert
the developer when resources are loaded via HTTP [19].
XML External Entities (A4:2017)
XML is a powerful language, so developers need to be careful when parsing untrusted data. Notably, external
entities in XML can be used to load values from outside the document. If the parser is configured incorrectly,
an attacker may be able to exfiltrate sensitive data by including local files in the document [20].
While it is possible for Electron apps to (dangerously) parse XML, that is fairly uncommon. As they are
written in JavaScript, the preferred data exchange format for Electron apps is JSON.
The impact from this attack would be similar to that in a server app, just endangering the files on the
user’s computer instead.
There are no Electron-specific mitigations for XML external entities attacks.
Broken Access Control (A5:2017)
Access to sensitive data and functions needs to be restricted to authorized users. If access control mecha-
nisms are not present or configured incorrectly, an attacker may access privileged data or run unintended
commands [21].
This attack vector doesn’t apply here as it is only relevant to server applications. The Electron app only
has access to the user’s own computer which they already control.
Security Misconfiguration (A6:2017)
Software and libraries don’t always come with secure default settings or even include unnecessary sample
components that need to be disabled or removed explicitly [22]. An attacker can use these misconfigurations
to gain unauthorized access.
This problem equally applies to Electron apps. There are a number of security settings that need to be
enabled explicitly by the developer. In addition, some unnecessary features like the Chromium DevTools
3.1. Attack Vectors Shared with Web Applications
15
are enabled by default and need to be disabled explicitly. Electron is starting to move more and more
settings to secure defaults, though. See Section 3.2.1 for more details.
In addition, some security scanners include checks for these preferences [19].
Cross Site Scripting (A7:2017)
Cross site scripting (XSS) occurs when an attacker is able to inject JavaScript into a web page. This is often
because user input, e.g. a search query, is inserted directly into the web page (using element.innerHTML =
value for example) and then interpreted as HTML by the browser, allowing the attacker to execute code
in the context of the user’s session.
XSS can be used to steal session data like cookies, perform key logging, or even for phishing by manipulating
the page [23].
In the context of Electron apps, XSS is even more relevant. It is equally applicable as Electron apps are
just web pages. The effects are greatly magnified though: Electron apps often need more privileges than a
regular browser. Electron thus provides them with access to the Node.js APIs, allowing access to the file
system, for example. While it is possible to isolate them from the renderer process, that isn’t always done,
allowing to escalate XSS attacks into remote code execution (RCE) which gives the attacker full access to
the user’s system.
In terms of mitigations, it is possible to weaken the effects of XSS attacks by limiting the privileges of
the renderer process. These settings are detailed in Section 3.2.1.
Insecure Deserialization (A8:2017)
Serialization is used to store an object on the file system or to pass it over the network. Deserialization then
takes this serialized data and turns it back into an object. Deserializing untrusted data can be dangerous.
The deserialized object may contain properties, most notably attached functions, the developer is not aware
of. In some cases, these functions may even be executed automatically when deserializing [24].
This attack vector also applies to Electron. Similarly to XSS, it can also lead to RCE here. It is not
very common, though. Usually, objects in JavaScript code are serialized to JSON which is safe to dese-
rialize. However, there are packages like node-serialize1 which also serialize functions and may even
automatically execute attached functions [25].
There are no mitigations for insecure deserialization, as this attack vector is caused by third-party
packages.
Using Components with Known Vulnerabilities (A9:2017)
Large lists of exploits and known vulnerabilities are available for most libraries, frameworks, and other
packages. Using these components in an application may expose it to the same vulnerabilities. This problem
is particularly prevalent with older versions of packages, so developers need to make sure to update their
dependencies regularly.
This problem equally applies to Electron apps. In the JavaScript ecosystem, it is common to have large
trees of dependencies and managing them can be hard [26].
In 2018, the NPM package manager introduced the npm audit command that scans a package’s depen-
dencies for known vulnerabilities and warns the developer. If versions with fixes are available, it can also
automatically update those dependencies [27]. This tool can also be used for Electron apps.
1https://www.npmjs.com/package/node-serialize
3.1. Attack Vectors Shared with Web Applications
16
Insuﬀicient Logging & Monitoring (A10:2017)
When running server applications, it is important to monitor for suspicious activities like brute-forcing
passwords or port scanning. This can help detect attacks early and prevent them or at least lower their
impact [28].
This doesn’t really apply to Electron as the app runs on the user’s computer and not on a server. While
logging would also be possible here, privacy concerns are greatly amplified. Users often don’t appreciate
aggressive telemetry.
3.1.2. Additional Attack Vectors
The OWASP Top Ten only lists a selection of ten attack vectors in the very broad field of general web
security. This section will list some additional attack vectors beyond those.
Replacing the App Source
On the web, creating websites looking identical to popular websites is common for phishing attacks. Using
methods like typosquatting, which means registering domains with common misspellings of brand names,
e.g. ebaay.com instead of ebay.com; homograph attacks, which means registering domains with some
characters swapped for similar looking ones, e.g. g00gle.com instead of google.com, or even using the
fact that some TLDs allow Unicode characters in domains; and spam emails, victims are lured to the fake
website where a login form awaits. The credentials entered there are sent to the attacker, though.
Similar attacks can be carried out against Electron apps by distributing modified binaries with malicious
code [29]. This attack is made easier by two factors: For one, Electron apps are written in HTML and
JavaScript. While the code can be minified and obfuscated, introducing changes here is still a lot easier
than in compiled binaries. Additionally, the actual code for the application, i.e. the HTML and JavaScript
source, is usually distributed outside of the actual executable, either by bundling the source directly or
by packing it into a so-called ASAR archive (a simple archive format developed specifically for Electron
that is similar to TAR). Since ASAR files cannot be code-signed [30], an attacker can distribute a modified
ASAR file alongside the original, signed, executable to bypass software authentication mechanisms like
SmartScreen on Windows or Gatekeeper on macOS.
There are even exploitation frameworks making this attack trivial to execute.2
Open Redirect and Navigation
Using redirects, websites can forward users from one page to another. A redirect is called open if the list
of targets isn’t limited and an attacker can use it to forward to arbitrary URLs. For example, visiting the
following URL on the domain google.com forwards the user to the website of the TU Braunschweig:
https://google.com/url?sa=t&url=https%3A%2F%2Fwww.tu-braunschweig.de%2F
&usg=AOvVaw1LJw3a4MqPwxNzQnuY83n3
An attacker can change the destination in the URL to forward to another website.3
2see BEEMKA by Context Information Security, which allows injecting reverse shells and keyloggers, as well as screenshot
and webcam exfiltrators: https://github.com/ctxis/beemka
3In the case of this particular redirect on google.com, simply changing the https%3A%2F%2Fwww.tu-braunschweig.de%2F part
isn’t actually enough. The destination is further authenticated using the usg parameter. However, obtaining the necessary
value is trivial for any website listed on Google: Clicking on a search result will not open the website directly, but rather
go through a URL like the one shown. An attacker can simply copy the correct usg value from there [31].
3.2. Attack Vectors Specific to Electron
17
Open redirects are commonly used for phishing. Instead of trying to lure a victim directly to the phishing
page, an attacker will instead use an open redirect on a trusted domain to make the link seem less suspicious.
This can also be used to fool rudimentary filtering software. However, under the right circumstances, open
redirects on the web can also be used in more classical exploits, usually as a step to achieving XSS [32].
Those problems also apply in the context of Electron applications. However, they start even sooner. In
Electron apps, it is recommended to only allow navigation (i.e. changing the displayed webpage) to a set of
trusted origins [33, p. 15]. This is for two reasons: First, Electron apps typically don’t display a URL bar.
As such, if an attacker manages to get the user to navigate to a website controlled by them, the user has
basically no way of noticing. This once again opens the possibility of phishing. In addition, this also allows
for actual exploits as the attacker controls the code run on the target website without requiring an XSS
vector.
Keeping this in mind, it becomes clear why open redirects are even more dangerous in Electron apps:
By passing through a trusted domain, they may allow the attacker to bypass the navigation filters put in
place by the developer. Depending on how the app is configured, this may also lead to code execution on
the user’s computer (see also Section 3.1.1) [34], [35].
Further, Electron doesn’t show a warning before opening URLs with a protocol not handled by the
app. For example, clicking on a link to tel:+1555314159 would show a prompt whether to open the
app configured for telephony in most browsers. In Electron however, the telephony app is opened directly
without a warning. This can be a problem as the examples in Section 4.2 will show. Do note that the URLs
are encoded here which means that some of the examples won’t work as-is.
Content Security Policy
A Content Security Policy (CSP) is an HTTP header4 that allows the developer to specify a set of policy
directives, limiting the origins from which certain resource types can be embedded into the website. The
list of resources that can be limited includes scripts (through script-src), images (through img-src), and
styles (through style-src) [36].
Note that unlike the other items discussed in this section, a CSP is not an attack vector but rather used
to prevent attacks. A lack of a CSP or even a misconfigured one will make attacking a website a lot easier
though, so it makes sense to consider it in this context.
CSPs are commonly used to lessen the impact of XSS attacks. By limiting the scripts that can run on a
webpage, it gets a lot harder or even impossible to execute malicious code through XSS [37].
As Electron apps are essentially just regular websites, they benefit from using a CSP in the same way.
Some security scanners include a CSP check that verifies the presence of a CSP and passes it through
additional tools like Google’s CSP evaluator5 [19].
3.2. Attack Vectors Specific to Electron
While the previous section focussed on attack vectors that apply both to classic web applications and
(potentially) Electron, this section will list additional attack vectors that are specific to Electron. The list
presented here is compiled from the Electron security warnings [38] and the checks of the Electronegativity
security scanner [19].
4Although it is also possible to specify one through an HTML meta element.
5https://github.com/google/csp-evaluator
3.2. Attack Vectors Specific to Electron
18
3.2.1. Not Enabling Security Features
Electron includes a number of preferences that affect the security of applications. Not enabling them or
disabling the ones that are enabled by default opens up additional attack vectors.
In particular, the following security features are of relevance:
Node.js integration The option nodeIntegration controls whether the renderer process gets direct access
to all Node.js APIs. It is disabled by default since version 5.0 (released April 24, 2019) [39] but can
be re-enabled by the developer.
If Node.js integration is enabled, it is trivial for an attacker to turn XSS into RCE as they would
have direct access to all privileged Node.js APIs, allowing for file access for example:
As such, it is recommended to leave nodeIntegration disabled. The developer can still make use
of the native Node.js APIs through so-called preload scripts which are executed once before every
page load and run in a privileged process that cannot be accessed by the renderer process (as long as
context isolation is enabled) [38, Sec. 2].
Context isolation The contextIsolation option separates Electron’s internal scripts and the preload
scripts from the scripts running in the renderer process, giving them dedicated window and document
objects, as well as different prototypes for the built-in JavaScript globals like Array and RegExp [40].
The main purpose behind this is to stop the renderer process from interfering with privileged code
through attacks like prototype pollution [41]. Without context isolation, the renderer process can
modify the behaviour of internal JavaScript functions that privileged code likely relies on, making it
possible to also change the behaviour of those privileged scripts.
Enabling context isolation also means that the developer cannot expose additional APIs to the ren-
derer process by attaching them to the window object anymore. For this purpose, the context bridge
was introduced [42]. If context isolation is enabled, additional APIs can be exposed to the renderer
process from the preload script like so:
const { contextBridge, shell } = require('electron');
contextBridge.exposeInMainWorld('acme', {
openWebsiteInBrowser: function() {
shell.openExternal('https://acme.tld/electron-app');
}
});
The renderer process can then call window.acme.openWebsiteInBrowser() to use the API.
Context isolation will be enabled by default starting from Electron version 12.0 (no release date
planned yet as of the time of writing). In the meantime, the Electron developers already recommend
that all apps enable context isolation manually [43].
Remote module Electron includes GUI APIs for creating menus or windows for example. Using the remote
module allows accessing these APIs from the renderer process without needing to resort to IPC calls
[44]. It only works if Node.js integration is also enabled as the content would otherwise not have
access to require() which is necessary to get the reference to the module.
The remote module is enabled by default but will be disabled by default in version 10.0 [39], which
has not been released yet.
3.2. Attack Vectors Specific to Electron
19
Even if Node.js integration is enabled, which is discouraged, as explained, allowing the remote module
provides even more access to the renderer process which would otherwise not have been able to interact
with the Electron application itself. With the remote module, the renderer process can add Chrome
extensions or create new BrowserWindows with arbitrary web preferences, for example [45]:
As such, it is recommended to disable it [46]. Instead, applications should only access those APIs
through the main or preload script and, if necessary, provide heavily filtered wrappers to the renderer
process that only allow specific, safe actions.
Web security Disabling the option webSecurity turns off various security features in the underlying
Chromium browser, as the name implies. In particular, it disables the same-origin policy and al-
lows HTTPS pages to load content from HTTP origins [45]. The option is enabled by default and
should only be disabled for testing purposes.
Sandboxing Electron extends various browser APIs to make them more convenient for desktop application
developers. They return their own BrowserWindowProxy upon calling window.open() from a renderer
process for example and the third parameter of this function allows setting the web preferences for
the new window. These extensions cause a larger attack surface. By enabling the sandbox option,
developers can instead opt to enable Chromium’s sandbox feature to isolate the renderer from the
main process and to only expose the default browser APIs as provided by Chromium [47]. This option
is disabled by default.
Experimental features Depending on the version, Chromium ships with a number of experimental features
that are hidden behind feature flags and may or may not be enabled by default in future releases.
In Electron, these can be enabled through the enableBlinkFeatures and experimentalFeatures