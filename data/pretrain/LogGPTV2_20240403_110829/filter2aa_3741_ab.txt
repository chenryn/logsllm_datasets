We can see the "Nope" here:
```c
basic_string(local_104,"Nope");
```
We also see another string that can get printed:
```c
basic_string(local_11c,"Secret, Agent Man!");
```
But what's most interesting is this code, which seems to perform some kind of basic XOR decryption:
```c
while (local_144 
    Matrix Cyber-Labs CTF
```
We can see that this is a simple HTML page with a single image in it. Now, we can choose to proceed in two ways:
 * Implement `DownloadFile().get` (using [frida](https://frida.re/) for example) by having it download the file and return it, then run the application in an emulator and see what happens
 * Download the file, extract the decryption code and decrypt the message offline
The second option seems simple enough, we'll go for it.
```console
root@kali:/media/sf_CTFs/matrix/Agent_Man# wget https://ctfroom.matrixcyberlabs.com/static/bc3403beec4074fb96466a557dfb7e53/digDeeper.jpg
--2021-03-02 23:06:59--  https://ctfroom.matrixcyberlabs.com/static/bc3403beec4074fb96466a557dfb7e53/digDeeper.jpg
Resolving ctfroom.matrixcyberlabs.com (ctfroom.matrixcyberlabs.com)... 89.237.91.77
Connecting to ctfroom.matrixcyberlabs.com (ctfroom.matrixcyberlabs.com)|89.237.91.77|:443... connected.
HTTP request sent, awaiting response... 200 OK
Length: 1610554 (1.5M) [image/jpeg]
Saving to: ‘digDeeper.jpg’
digDeeper.jpg                                       100%[==================================================================================================================>]   1.54M   388KB/s    in 4.1s
2021-03-02 23:07:03 (380 KB/s) - ‘digDeeper.jpg’ saved [1610554/1610554]
```
We also need the global array, `radare2` can print it in Python syntax:
```
[0x00008270]> pcp 0xa8 @ 0x287f4
import struct
buf = struct.pack ("168B", *[
0xa5,0x00,0x00,0x00,0xbc,0x00,0x00,0x00,0xbc,0x00,0x00,
0x00,0xa1,0x00,0x00,0x00,0x5c,0x00,0x00,0x00,0x6c,0x00,
0x00,0x00,0xdc,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3c,
0x00,0x00,0x00,0x16,0x00,0x00,0x00,0x9c,0x00,0x00,0x00,
0x42,0x00,0x00,0x00,0x2d,0x00,0x00,0x00,0x28,0x00,0x00,
0x00,0xdb,0x00,0x00,0x00,0xc8,0x00,0x00,0x00,0xc0,0x00,
0x00,0x00,0x27,0x00,0x00,0x00,0x21,0x00,0x00,0x00,0x29,
0x00,0x00,0x00,0x41,0x00,0x00,0x00,0x08,0x00,0x00,0x00,
0x19,0x00,0x00,0x00,0xc0,0x00,0x00,0x00,0x44,0x00,0x00,
0x00,0x8b,0x00,0x00,0x00,0x1c,0x00,0x00,0x00,0x2f,0x00,
0x00,0x00,0x27,0x00,0x00,0x00,0x1f,0x00,0x00,0x00,0x03,
0x00,0x00,0x00,0xb2,0x00,0x00,0x00,0x3d,0x00,0x00,0x00,
0xf3,0x00,0x00,0x00,0xed,0x00,0x00,0x00,0x14,0x00,0x00,
0x00,0x15,0x00,0x00,0x00,0xfe,0x00,0x00,0x00,0x2b,0x00,
0x00,0x00,0xd6,0x00,0x00,0x00,0xe1,0x00,0x00,0x00,0x55,
0x00,0x00,0x00])
```
All that's left is to XOR the values according to the recipe:
```python
import mmap, struct, os
def memory_map(filename, access=mmap.ACCESS_READ):
    size = os.path.getsize(filename)
    fd = os.open(filename, os.O_RDONLY)
    return mmap.mmap(fd, size, access=access)
buf = struct.pack ("168B", *[
0xa5,0x00,0x00,0x00,0xbc,0x00,0x00,0x00,0xbc,0x00,0x00,
0x00,0xa1,0x00,0x00,0x00,0x5c,0x00,0x00,0x00,0x6c,0x00,
0x00,0x00,0xdc,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3c,
0x00,0x00,0x00,0x16,0x00,0x00,0x00,0x9c,0x00,0x00,0x00,
0x42,0x00,0x00,0x00,0x2d,0x00,0x00,0x00,0x28,0x00,0x00,
0x00,0xdb,0x00,0x00,0x00,0xc8,0x00,0x00,0x00,0xc0,0x00,
0x00,0x00,0x27,0x00,0x00,0x00,0x21,0x00,0x00,0x00,0x29,
0x00,0x00,0x00,0x41,0x00,0x00,0x00,0x08,0x00,0x00,0x00,
0x19,0x00,0x00,0x00,0xc0,0x00,0x00,0x00,0x44,0x00,0x00,
0x00,0x8b,0x00,0x00,0x00,0x1c,0x00,0x00,0x00,0x2f,0x00,
0x00,0x00,0x27,0x00,0x00,0x00,0x1f,0x00,0x00,0x00,0x03,
0x00,0x00,0x00,0xb2,0x00,0x00,0x00,0x3d,0x00,0x00,0x00,
0xf3,0x00,0x00,0x00,0xed,0x00,0x00,0x00,0x14,0x00,0x00,
0x00,0x15,0x00,0x00,0x00,0xfe,0x00,0x00,0x00,0x2b,0x00,
0x00,0x00,0xd6,0x00,0x00,0x00,0xe1,0x00,0x00,0x00,0x55,
0x00,0x00,0x00])
# Unpack as little endian integers
local_bc = struct.unpack(f"<{str(len(buf)//4)}I", buf)
flag = ""
with memory_map("digDeeper.jpg") as pcVar1:
    local_108 = 0x1ce9
    for i, x in enumerate(local_bc):
        flag += chr(local_bc[i] ^ pcVar1[(i + 2) * local_108])
print(flag)
```
Output:
```console
root@kali:/media/sf_CTFs/matrix/Agent_Man# python3 solve.py
MCL{li7tl3_5P3c1al_S3crET_Ag3n7_'\'m3n'\'}
```