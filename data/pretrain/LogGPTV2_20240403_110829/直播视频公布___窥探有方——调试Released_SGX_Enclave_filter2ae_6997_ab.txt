| 使一个EPC页面无效并写回到主内存（DRAM）  
ETRACK | 0CH
(In)
|  | EPCPAGE
(In, EA)
|  | 激活EBLOCK的检查  
EAUG | 0DH
(In)
| PAGEINFO
(In, EA)
| EPCPAGE
(In, EA)
| LINADDR | 为已初始化的Enclave增加一个EPC页  
EMODPR | 0EH
(In)
| SECINFO
(In, EA)
| EPCPAGE
(In, EA)
|  | 为已初始化的Enclave修改EPC页的访问权限  
EMODT | 0FH
(In)
| SECINFO
(In, EA)
| EPCPAGE
(In, EA)
|  | 改变EPC页的类型  
EA:Effective Address
In:Input parameter
Out:Output parameter  
表2 ENCLU指令
指令 | EAX | RBX | RCX | RDX | 功能简介  
---|---|---|---|---|---  
EREPORT | 00H
(In)
| TARGETINOF
(In,EA)
| REPORTDATA
(In,EA)
| OUTPUTDATA
(In, EA)
| 创建Enclave的加密报告  
EGETKEY | 01H
(In)
| KEYREQUEST
(In,EA)
| KEY
(In,EA)
|  | 检索一个加密密钥  
EENTER | 02H
(In)
| TCS
(In,EA)
| AEP
(In,EA)
|  | 进入Enclave模式执行  
RBX.CSSA
(Out)
| Return
(Out,EA)  
ERESUME | 03H
(In)
| TCS
(In,EA)
| AEP
(In, EA)
|  | 重进入Enclave模式执行  
EEXIT | 04H
(In)
| Target
(In,EA)
| Current
AEP
(Out)
|  | 退出Enclave模式  
EACCEPT | 05H
(In)
| SECINFO
(In,EA)
| EPCPAGE
(In,EA)
|  | 接受对EPC页面的更改  
EMODPE | 06H
(In)
| SECINFO
(In,EA)
| EPCPAGE
(In,EA)
|  | 扩展EPC页面的权限  
EACCEPTCOPY | 07H
(In)
| SECINFO
(In,EA)
| EPCPAGE
(In,EA)
| EPCPAGE
(In,EA)
| 将现有EPC页面的内容拷贝到未初始化的EPC页面  
###  **3.3 SGX** **技术实现**
SGX技术实现如图3所示，可总结成如下几点：
图3 SGX 技术实现
SGX应用程序切分成Untrusted和Trusted两部分，Trust部分运行在Enclave中；
由Untrusted部分的应用程序通过ioctl系统调用的方式调用ENCLS指令创建出Enclave,并把Trust部分的代码加载到Enclave里执行；
Untrusted部分的应用通过特殊的调用接口Ecalls调用Enclave里函数的执行；
当Enclave里的函数被调用后，仅仅Enclave里的代码可访问其数据，外部的程序——不管是普通的应用程序，还是具备特权的OS、VMM、Bios都无法访问。当Enclave里的函数返回后，其数据仍保留在内存保护区；
Enclave拥有自己的代码和数据区，SGX保证代码和数据的完整和保密性。Enclave的入口点是在编译阶段预定义好，支持多线程，可访问整个Application的内存空间。下一小节详述Enclave.
EPC是SGX的内存管理核心，属于Enclave的相关数据结构和代码以及数据的存放处，是经过MEE加密存储，外部程序无法获取其实际内容，逻辑上如图4所示。
图4 EPC内部逻辑
###  **3.4 Enclave** **安全机制**
形式上，Intel SGX
允许以明文形式发布应用程序的受保护部分，也就是说在Enclave建立之前，Enclave的code和data都是可以自由地进行分析检查的，当这部分受保护的程序加载进Enclave时，它的code和data将会被度量，加载完成后，度量值存放于EPC的SECS，不可更改，来自Enclave外的访问将被拒绝。
应用上，Enclave可以向远方证明自己的身份，并且提供必要的构建块（MRENCLAVE）以安全地提供密钥和凭证。应用程序也可以请求特定于Enclave或平台的密钥，这样就支持保护那些希望存储在Enclave之外的密钥和数据。
原理上，当CPU访问Enclave中数据时，首先切换到Enclave模式，Enclave模式会强制对每个内存访问进行额外的基于硬件的安全检查，由于数据是存放在EPC中，而EPC的内存内容都经过MEE加密，只有当EPC的内存内容进入CPU
package时才会被解密，一旦返回EPC后立即被加密。因此即使通过各种内存攻击手段，典型的如内存嗅探，获取到EPC的内容，也是无法获知实际内容的密文。Enclave
Enter/Exit的流程如图5所示，进入Enclave模式时，首先通过应
图5 Enclave Entry/Exit 流程
用程序调用ENCLC指令EENTER通知CPU切换Enclave模式，之后将应用程序的上下文保存到TCS数据结构，这样CPU就切换到Enclave模式执行。当Enclave主动退出时，Enclave里的程序调用ENCLC指令EEXIT，切换回Non-Enclave模式。EENTER指令将CPU控制权从应用程序转移到Enclave里的预定位置，它会首先检查TCS是否可用，清空TLB条目，然后切换入Enclave模式，并保存好RSP、RBP和XCR0寄存器内容，最后禁用PEBS（Precise
Event Based
Sampling），使Enclave执行时像一条巨大的指令。EEXIT指令将进程返回其原始模式，并清除Enclave地址的TLB条目，释放TCS数据结构，另外，Enclave退出前会清空CPU寄存器以防止数据泄露。
当Enclave运行过程被中断或异常打断时，CPU通过AEX机制退回到Non-Enclave模式，在模式切换时，其运行状态会保存到EPC的SSA中，并清除TLB，处理完中断或异常利用ERESUME重进入Enclave并从SSA加载数据恢复先前状态.Enclave
AEX 流程如图6所示，AEP（Asynchronous Exit Pointer）指向位于应用程序
图6 Enclave AEX流程
内部的处理程序，在中断服务例程（ISR）处理异常后，该处理程序将继续执行，并决定是否调用ERESUME指令来恢复Enclave的执行。流程上，在Enclave运行过程中，CPU收到了中断/异常，Enclave首先保存其程序上下文后恢复应用程序的上下文，然后操作系统调用ISR处理中断并返回到AEP，若AEP决定要恢复Enclave的执行，它将调用ERESUME指令，Enclave退出前保存的上下文内容将被恢复，最后Enclave从原先退出的地方继续执行。
SGX的内存访问控制流程如图7所示。线性地址转物理地址流程跟传统一样由OS负责，当访问地址指向EPC时，CPU首先检查是否属于Enclave发起的请求，若是再自动到EPCM里检查访问权限是否符合。EPCM检查项包括：
图7 SGX内存访问控制
该内存页是否有效；
该内存页的类型（PT_SECS/PT_TCS/PT_REG,etc.）是否正确；
该内存页是否属于当前的Enclave;
R/W/X访问权限是否匹配；
线性地址是否正确。
Enclave具备如下安全特性：
  1. 不管当前特权级别还是CPU模式（Ring3/用户模式，Ring0/内核模式，SMM，VMM，或是其他Enclave）,Enclave安全区内存都无法从外部读取或写入；
  2. 在构建Enclave的时候可以设置debug属性，进行debug签名，再借助sgx-gdb 调试器可以像普通调试器调试普通软件一样调试Enclave。产品级（Released）Enclave不允许通过软件或硬件的形式进行调试（这正是本文要攻破的地方），若强行设置debug属性，将会导致Enclave创建失败，表现在EINIT时异常退出；
  3. Enclave执行环境的唯一方式是通过EENTER/ERESUME这样的SGX新指令在进行一系列安全检查后进入，像传统的函数调用、跳转、寄存器操控、栈操控等方式均无法进入Enclave执行环境。当然，在Enclave内部进行传统的函数调用是没问题的。
###  **3.5 Enclave** **的创建**
从上文描述可见，在外对Enclave内部不可访问，无法修改运行中Enclave的SECS，因此想通过直接修改SECS的debug域是没法实现的。山重水复疑无路，柳暗花明又一村，我们可以从创建Enclave的过程着手。本文重点探究的将Released
Enclave改成可debug模式从此开始。创建Enclave可分为两大过程，首先是创建Enclave内容，即编程和编译，其次是创建其执行环境，即加载执行的过程。
**3.5.1 Enclave** **内容的创建**
图8 SGX 软件开发模型
以Linux系统为例，SGX应用软件发布时在形态上分为App和Enclave.signed.so 两部分，App运行在Non-Enclave模式，属于非可信计算，Enclave.signed.so运行在Enclave模式下，属于可信计算，运行时App利用特定的Enclave接口ECalls调用Enclave.signed.so内函数的执行，同时Enclave.signed.so也可利用特定的接口OCalls来调用App内的函数，典型的如系统调用。SGX软件开发的模型如图8所示，Intel提供了SGX
SDK工具包以支持用户快速开发，SDK包含了工具和代码库两大部分，工具包含：用于配置CPUSVN信息的sgx_config_cpusvn、用于解析Enclave
Description
Language (EDL)
file的sgx_edger8r、用于加密的sgx_encrypt、用于给Enclave.so签名的sgx_sign以及debugger工具sgx-gdb;代码库根据是否属于可信计算分成trusted（如libsgx_trts.a）和untrusted(如libsgx_urts.so)两大部分以及两者间的接口。开发SGX应用时，用户自主决定哪部分代码需要运行在Enclave中，生成Enclave文件的整体操作流程是：
首先需要用户编写期望运行在Enclave中的c/c++代码，并声明在edl文件的”trusted”段中；
然后使用SGX SDK提供的 sgx_edger8r 工具解析edl文件生成Enclave_trust.c文件；
再将Enclave_trust.c和其他c文件编译成enclave.so；
最后使用SGX SDK提供的 sgx_sign
工具对enclave.so进行签名，生成enclave.signed.so。传入sgx_sign工具的文件还包括enclave_private.pem私钥文件和定义有Enclave
metadata信息的xml文件，假如要生成产品级Release的Enclave，需要传入的私钥文件是经过Intel进行签发；若是debug版本的可以使用随SGX
SDK一起的Samplecode里的Enclave_private.pem。