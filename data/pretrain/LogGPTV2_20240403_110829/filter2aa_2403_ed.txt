ptr=0x0028fe90 _Next=0x000349a0 _Prev=0x00034b40 x=5 y=6 
最后一个元素的地址还是刚才的 0x0028fe90。实际上在释放结构体之前它的地址不会发生变化。而且
这个节点的两个字段 x 和 y 仍然还是随机的噪音数据，这时它们的值分别是 5 和 6。碰巧的是，这些值和
最后一个元素的值相同。只是这种巧合并不会一直持续下去。 
此时，这 3 个节点存储过程和内存分布结构如下所示。 
变量 l 总是指向第一个节点。 
实际上迭代器.begin()（开始）和.end()（结束）不是变量而是函数，它们的返回值是相应节点的指针。 
双向链表通常都会采用这种虚节点（英文别称是 sentinel node/岗哨节点）的实现方法。这种节点具有
异步社区会员 dearfuture(15918834820) 专享 尊重版权
538 
逆向工程权威指南（下册） 
简化链结构和提升操作效率的作用。 
迭代器其实就是一个指向节点的指针，而 list.begin()和 list.end()分别返回首/尾节点的指针。 
node at .begin: 
ptr=0x000349a0 _Next=0x00034988 _Prev=0x0028fe90 x=3 y=4 
node at .end: 
ptr=0x0028fe90 _Next=0x000349a0 _Prev=0x00034b40 x=5 y=6 
事实上，最后一个节点的 Next 指针指向的第一个节点，而第一个元素的 Prev 指针指向的是最后一个
元素。因此我们很容易就能想到这是一个循环链。 
所以，可利用指向第一个节点的指针（即本例的实例 l）顺藤摸瓜地找到序列的最后一个节点，而不
必遍历整个链。利用这种结构，我们还可毫不费力的在链尾之后插入其他节点。 
运算符“++”、“--”就是把迭代器的值设为［当前节点->prev］或［当前节点->next］的值。逆向迭代
器（reverse iterators，即.rbegin 和.rend）的作用几乎相同，只是方向相反。 
迭代器的运算符“*”用于返回节点结构体的指针，即自定义的数据结构体的启始地址，换句话说是节
点第一项数据（本例中是 x）的指针。 
在链表里插入和删除节点时，我们只需要分配（或释放）节点的存储空间，,然后再更新所有的链域指
针、即可保障整个链的有效性。 
在删除节点之后，相邻节点的迭代器（链域）可能依然指向被删除的无效节点，此时迭代器就会
失效。指向无效结点的迭代器又叫做“迷途指针”和“悬空指针”（dangling pointer）。当然，这种指
针就不能再使用了。 
在 GCC（以 4.8.1 版为例）编译 std::list 的实例时，它不会存储链中的节点总数。这就意味着内置函数.size()
的运行速度十分缓慢，因为它必须遍历完整个数据链才能返回节点个数。因此，那些与节点总数有关的所
有函数（例如 O(n)）的时间开销都和链表长度成正比。 
指令清单 51.29  GCC4.8.1 带参数-fno 内置小函数的优化 
main proc near 
    push ebp 
    mov   ebp, esp 
    push esi 
    push ebx 
    and   esp, 0FFFFFFF0h 
    sub   esp, 20h 
    lea   ebx, [esp+10h] 
    mov   dword ptr [esp], offset s ; "* empty list:" 
    mov   [esp+10h], ebx 
    mov   [esp+14h], ebx 
    call puts 
    mov   [esp], ebx 
    call _Z13dump_List_valPj ; dump_List_val(uint *) 
    lea   esi, [esp+18h] 
    mov   [esp+4], esi 
    mov   [esp], ebx 
    mov   dword ptr [esp+18h], 1 ; X for new element 
    mov   dword ptr [esp+1Ch], 2 ; Y for new element 
    call  _ZNSt4listI1aSaIS0_EE10push_frontERKS0_ ; std::list>::push_front(a  
     const&) 
    mov   [esp+4], esi 
    mov   [esp], ebx 
    mov   dword ptr [esp+18h], 3 ; X for new element 
    mov   dword ptr [esp+1Ch], 4 ; Y for new element 
    call _ZNSt4listI1aSaIS0_EE10push_frontERKS0_ ; std::list>::push_front(a  
     const&) 
    mov   dword ptr [esp], 10h 
    mov   dword ptr [esp+18h], 5 ; X for new element 
    mov   dword ptr [esp+1Ch], 6 ; Y for new element 
    call _Znwj ; operator new(uint) 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 51 章  C++ 
539 
    cmp   eax, 0FFFFFFF8h 
    jz    short loc_80002A6 
    mov   ecx, [esp+1Ch] 
    mov   edx, [esp+18h] 
    mov   [eax+0Ch], ecx 
    mov   [eax+8], edx 
loc_80002A6: ; CODE XREF: main+86 
    mov   [esp+4], ebx 
    mov   [esp], eax 
    call _ZNSt8__detail15_List_node_base7_M_hookEPS0_ ; std::__detail::_List_node_base::_M_hook  
     (std::__detail::_List_node_base*) 
    mov   dword ptr [esp], offset a3ElementsList ; "* 3-elements list:" 
    call puts 
    mov   [esp], ebx 
    call _Z13dump_List_valPj ; dump_List_val(uint *) 
    mov   dword ptr [esp], offset aNodeAt_begin ; "node at .begin:" 
    call puts 
    mov   eax, [esp+10h] 
    mov   [esp], eax 
    call _Z14dump_List_nodeP9List_node ; dump_List_node(List_node *) 
    mov   dword ptr [esp], offset aNodeAt_end ; "node at .end:" 
    call puts 
    mov   [esp], ebx 
    call _Z14dump_List_nodeP9List_node ; dump_List_node(List_node *) 
    mov   dword ptr [esp], offset aLetSCountFromT ; "* let's count from the begin:" 
    call puts 
    mov   esi, [esp+10h] 
    mov   eax, [esi+0Ch] 
    mov   [esp+0Ch], eax 
    mov   eax, [esi+8] 
    mov   dword ptr [esp+4], offset a1stElementDD ; "1st element: %d %d\n" 
    mov   dword ptr [esp], 1 
    mov   [esp+8], eax 
    call __printf_chk 
    mov   esi, [esi] ; operator++: get ->next pointer 
    mov   eax, [esi+0Ch] 
    mov   [esp+0Ch], eax 
    mov   eax, [esi+8] 
    mov   dword ptr [esp+4], offset a2ndElementDD ; "2nd element: %d %d\n" 
    mov   dword ptr [esp], 1 
    mov   [esp+8], eax 
    call __printf_chk 
    mov   esi, [esi] ; operator++: get ->next pointer 
    mov   eax, [esi+0Ch] 
    mov   [esp+0Ch], eax 
    mov   eax, [esi+8] 
    mov   dword ptr [esp+4], offset a3rdElementDD ; "3rd element: %d %d\n" 
    mov   dword ptr [esp], 1 
    mov   [esp+8], eax 
    call __printf_chk 
    mov   eax, [esi] ; operator++: get ->next pointer 
    mov   edx, [eax+0Ch] 
    mov   [esp+0Ch], edx 
    mov   eax, [eax+8] 
    mov   dword ptr [esp+4], offset aElementAt_endD ; "element at .end(): %d %d\n" 
    mov   dword ptr [esp], 1 
    mov   [esp+8], eax 
    call __printf_chk 
    mov   dword ptr [esp], offset aLetSCountFro_0 ; "* let's count from the end:"  
     call puts 
    mov   eax, [esp+1Ch] 
    mov   dword ptr [esp+4], offset aElementAt_endD ; "element at .end(): %d %d\n" 
    mov   dword ptr [esp], 1 
    mov   [esp+0Ch], eax 
    mov   eax, [esp+18h] 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
540 
逆向工程权威指南（下册） 
    mov   [esp+8], eax 
    call __printf_chk 
    mov   esi, [esp+14h] 
    mov   eax, [esi+0Ch] 
    mov   [esp+0Ch], eax 
    mov   eax, [esi+8] 
    mov   dword ptr [esp+4], offset a3rdElementDD ; "3rd element: %d %d\n" 
    mov   dword ptr [esp], 1 
    mov   [esp+8], eax 
    call __printf_chk 
    mov   esi, [esi+4] ; operator--: get ->prev pointer 
    mov   eax, [esi+0Ch] 
    mov   [esp+0Ch], eax 
    mov   eax, [esi+8] 
    mov   dword ptr [esp+4], offset a2ndElementDD ; "2nd element: %d %d\n" 
    mov   dword ptr [esp], 1 
    mov   [esp+8], eax 
    call __printf_chk 
    mov   eax, [esi+4] ; operator--: get ->prev pointer 
    mov   edx, [eax+0Ch] 
    mov   [esp+0Ch], edx 
    mov   eax, [eax+8] 
    mov   dword ptr [esp+4], offset a1stElementDD ; "1st element: %d %d\n" 
    mov   dword ptr [esp], 1 
    mov   [esp+8], eax 
    call __printf_chk 
    mov   dword ptr [esp], offset aRemovingLastEl ; "removing last element..." 
    call puts 
    mov   esi, [esp+14h] 
    mov   [esp], esi 
    call _ZNSt8__detail15_List_node_base9_M_unhookEv  ; std::__detail::_List_node_base::  
     _M_unhook(void) 
    mov   [esp], esi ; void * 
    call _ZdlPv ; operator delete(void *) 
    mov   [esp], ebx 
    call _Z13dump_List_valPj ; dump_List_val(uint *) 
    mov   [esp], ebx 
    call _ZNSt10_List_baseI1aSaIS0_EE8_M_clearEv ; std::_List_base>::  
     _M_clear(void) 
    lea   esp, [ebp-8] 
    xor   eax, eax 
    pop   ebx 
    pop   esi 
    pop   ebp 
    retn 
main endp 
运行上面这个由 GCC 编译的程序，可以得到如下数据： 
指令清单 51.30  整个输出 
* empty list: 
ptr=0x0028fe90 _Next=0x0028fe90 _Prev=0x0028fe90 x=3 y=0 
* 3-elements list: 
ptr=0x000349a0 _Next=0x00034988 _Prev=0x0028fe90 x=3 y=4 
ptr=0x00034988 _Next=0x00034b40 _Prev=0x000349a0 x=1 y=2 
ptr=0x00034b40 _Next=0x0028fe90 _Prev=0x00034988 x=5 y=6 
ptr=0x0028fe90 _Next=0x000349a0 _Prev=0x00034b40 x=5 y=6 
node at .begin: 
ptr=0x000349a0 _Next=0x00034988 _Prev=0x0028fe90 x=3 y=4 
node at .end: 
ptr=0x0028fe90 _Next=0x000349a0 _Prev=0x00034b40 x=5 y=6 
* let's count from the begin: 
1st element: 3 4 
2nd element: 1 2 
3rd element: 5 6 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 51 章  C++ 
541 
element at .end(): 5 6 
* let's count from the end: 
element at .end(): 5 6 
3rd element: 5 6 
2nd element: 1 2 
1st element: 3 4 
removing last element... 
ptr=0x000349a0 _Next=0x00034988 _Prev=0x0028fe90 x=3 y=4 
ptr=0x00034988 _Next=0x0028fe90 _Prev=0x000349a0 x=1 y=2 
ptr=0x0028fe90 _Next=0x000349a0 _Prev=0x00034988 x=5 y=6 
MSVC 
在编译 std::list 的时候，MSVC 2012 会存储链表的长度。除此以外，它的实现方法和 GCC 基本一致。
这就是说，内置函数.size()只需要从内存中读取一个值就可以返回函数结果，其速度相当快。不过，这也意
味着每次添增/删除节点的时候都需要调整这个值。 
MSVC 的链存储结构也和 GCC 有所区别： 
可见，GCC 构造的虚节点在链尾，而 MSVC 构造的虚节点在链首。 
使用 MSVC 2012（启用/Fa2.asm/GS-/Ob1 选项）编译上述程序，可得到： 
指令清单 51.31  MSVC 2012 带参数/Fa2.asm/GS-/Ob1 优化的程序 
_l$ = -16 ; size = 8 
_t1$ = -8 ; size = 8 
_main     PROC 
    sub   esp, 16 
    push ebx 
    push esi 
    push edi 
    push 0 
    push 0 
    lea   ecx, DWORD PTR _l$[esp+36] 
    mov   DWORD PTR _l$[esp+40], 0 
    ; allocate first "garbage" element 
    call ?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@Ua@@V?  
     $allocator@Ua@@@std@@@std@@@std@@QAEPAU?$_List_node@Ua@@PAX@2@PAU32@0@Z ; std::  
     _List_alloc > >::_Buynode0 
    mov   edi, DWORD PTR __imp__printf 
    mov   ebx, eax 
    push OFFSET $SG40685 ; '* empty list:' 
    mov   DWORD PTR _l$[esp+32], ebx 
    call edi ; printf 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
542 
逆向工程权威指南（下册） 
    lea   eax, DWORD PTR _l$[esp+32] 
    push eax 
    call ?dump_List_val@@YAXPAI@Z ; dump_List_val 
    mov   esi, DWORD PTR [ebx] 
    add   esp, 8 
    lea   eax, DWORD PTR _t1$[esp+28] 
    push eax 
    push DWORD PTR [esi+4] 
    lea   ecx, DWORD PTR _l$[esp+36] 
    push esi 
    mov   DWORD PTR _t1$[esp+40], 1 ; data for a new node 
    mov   DWORD PTR _t1$[esp+44], 2 ; data for a new node 
    ; allocate new node 
    call ??$_Buynode@ABUa@@@?$_List_buy@Ua@@V?$allocator@Ua@@@std@@@std@@QAEPAU?  
     $_List_node@Ua@@PAX@1@PAU21@0ABUa@@@Z ; std::_List_buy >::_Buynode 
    mov   DWORD PTR [esi+4], eax 
    mov   ecx, DWORD PTR [eax+4] 
    mov   DWORD PTR _t1$[esp+28], 3 ; data for a new node 
    mov   DWORD PTR [ecx], eax 
    mov   esi, DWORD PTR [ebx] 
    lea   eax, DWORD PTR _t1$[esp+28] 
    push eax 
    push DWORD PTR [esi+4] 
    lea   ecx, DWORD PTR _l$[esp+36] 
    push esi 
    mov   DWORD PTR _t1$[esp+44], 4 ; data for a new node 
    ; allocate new node 
    call ??$_Buynode@ABUa@@@?$_List_buy@Ua@@V?$allocator@Ua@@@std@@@std@@QAEPAU?  
     $_List_node@Ua@@PAX@1@PAU21@0ABUa@@@Z ; std::_List_buy >::_Buynode 
    mov   DWORD PTR [esi+4], eax 
    mov   ecx, DWORD PTR [eax+4] 
    mov   DWORD PTR _t1$[esp+28], 5 ; data for a new node 
    mov   DWORD PTR [ecx], eax 
    lea   eax, DWORD PTR _t1$[esp+28] 
    push eax 
    push DWORD PTR [ebx+4] 
    lea   ecx, DWORD PTR _l$[esp+36] 
    push ebx 
    mov   DWORD PTR _t1$[esp+44], 6 ; data for a new node 
    ; allocate new node 
    call ??$_Buynode@ABUa@@@?$_List_buy@Ua@@V?$allocator@Ua@@@std@@@std@@QAEPAU?  
     $_List_node@Ua@@PAX@1@PAU21@0ABUa@@@Z ; std::_List_buy >::_Buynode 
    mov   DWORD PTR [ebx+4], eax 
    mov   ecx, DWORD PTR [eax+4] 
    push OFFSET $SG40689 ; '* 3-elements list:' 
    mov   DWORD PTR _l$[esp+36], 3 
    mov   DWORD PTR [ecx], eax 
    call edi ; printf 
    lea   eax, DWORD PTR _l$[esp+32] 
    push eax 
    call ?dump_List_val@@YAXPAI@Z ; dump_List_val 
    push OFFSET $SG40831 ; 'node at .begin:' 
    call edi ; printf 
    push DWORD PTR [ebx] ; get next field of node l variable points to 
    call ?dump_List_node@@YAXPAUList_node@@@Z ; dump_List_node 
    push OFFSET $SG40835 ; 'node at .end:' 
    call edi ; printf 
    push ebx ; pointer to the node $l$ variable points to! 
    call ?dump_List_node@@YAXPAUList_node@@@Z ; dump_List_node 
    push OFFSET $SG40839 ; '* let''s count from the begin:' 
    call edi ; printf 
    mov   esi, DWORD PTR [ebx] ; operator++: get ->next pointer 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 51 章  C++ 
543 
    push DWORD PTR [esi+12] 
    push DWORD PTR [esi+8] 
    push OFFSET $SG40846 ; '1st element: %d %d' 
    call edi ; printf 
    mov   esi, DWORD PTR [esi] ; operator++: get ->next pointer 
    push DWORD PTR [esi+12] 
    push DWORD PTR [esi+8] 
    push OFFSET $SG40848 ; '2nd element: %d %d' 