时间性能。
的时间绝。给进程时间
率。给的时间的
性能。我们将 Linux 进程时间方
。
: 进程时间。 100ms 时
间的进程能 20ms 。时调
时进程出子
空调进程。进程的 80ms 或
。
6.1.3 I/O 约束进程 Vs. 处理器约束进程
时间的进程处理进程∗。进程
 CPU 时间调的时间。单的子
的子处理。
方时间处的的进程I/O 进
程†。 I/O 进程文件 I/O或
。 I/O 程的子文件实程 cp 或 mv们
内 I/O 操作 GUI 程时
。
处理程 I/O 程调对同程的
同。处理程能的时间存率 (时
间性)。相 I/O 程时间
们出 I/O 内的段时间。然
I/O 程能调的。调的 I/O 
程能件。更进步
的程调的给的。
处理程 I/O 程的同绝。 Linux 调
对 I/O 程 I/O 程处理程
∗process-bound
†I/O-bound
– 174 –
 6 
进程理
。
实上程处理 I/O 的。
子。对给程能
的时间进程能同的。
6.1.4 抢占调度
进程时间的时调新的
进程。的进程内给时间的进程新的时间
。即进程 — 进程
进程时间或的进程。
Unix 调的原: 的进程。
进程内空进程 (idle process)。实上空
进程进程能实 ()。空进程
调方的程空时间空进程的时间。
进程时进程 (进程
单)进程进
程。的进程的进程
的进程。
6.1.5 线程
程进程的单的进程程。程
自处理自的存处理。然
进程程进程实以程程
同的同空间 (同的内存映射文件
)的文件内。
Linux 内对程的。上内程对
 Linux 内的程的进程。上进程
进程内的程。内程的进程
内进程的程内 (空间
的文件) 的同进程。
程程程的程。 Linux 上程程的
API  IEEE Std 1003.1c-1995(POSIX 1995 or POSIX.1c) 的 API
– 175 –
 6 
进程理
们实 API 的pthreads。程程的相 API
。 pthreads 的内相
 pthreads 的上。
6.2 让出处理器
然 Linux 操作提调
进程出处理调进程。
#include 
int sched_yield (void);
调 sched yield() 将进程新进程内
进程。进程出的进程
。性上们以更的
调。
调 0 -1设errno。 Linux 内的
Unix 上 sched yield() 能 0。然谨的程
:
if(sched_yield ())
perror (”sched_yield”);
6.2.1 合理使用
 Linux 的理 sched yield() 的
。内能作出效率的调内然
的程更何时进程同
同对的同理。
调程
件或进程的件。进程
进程出处理进程的。以
 / 单的实:
/* the consumer... */
– 176 –
 6 
进程理
do {
while (producer_not_ready ())
sched_yield ();
process_data ();
} while (!time_to_quit ());
的 Unix 程写。 Unix 程件
的 ()  sched yield()。
读的时。空间进程
进程同的给内对内以进程的方式
理的时。 Unix 程
文件上的件。
的 sched yield(): 空间程。
程程的的时程出处理
。内空间的时方单效。然 Linux
程实 (the New POSIX Threading Library, or NPTL) 
的方即内提空间的。
sched yield() 的更 (playing nicely): 处理
集的程以时调 sched yield() 对的。出
。内能进程作出更的调
操作的调进程。对调
 I/O 集程处理集程的。处理
集程的程的的
程。以将的 “nice” 给程性能
的设。
6.2.2 让出处理器方法的过去和现状
 2.6 内以调 sched yield() 单的作。
进程内进程进程的内
调进程。然能进程进程。
2.6 内调:
1. 进程实时进程将的 (以
)。步。 (实时进程读实时
– 177 –
 6 
进程理
。)
2. 进程出进程。
进程时间进程能的进程新进
。
3. 调进程。
调 sched yield() 的实作进程时间同
内的处理时 sched yield() 的效 (同进程
然我)。
的原的理。
进程 A  B 调 sched yield()。设们的进程 (
以进程进程时间)。以的 sched yield()内
调进程进程进程进程的时间
。我们以内的调 “A, B, A, B, A, B” 
。
2.6 内。 A 出处理的时调将
出。 B 出。进程的时调
然 A  B, 效进程处理时
间。
进程出处理的时真的出处理!
6.3 进程优先级
的实时进程实时
进程同的调的以。
Linux 进进程调。进程们
何时的。上 Unix 
nice values的进程进程更的处理时
间进程对的进程更。
“nice value” 进程的时的 Linux 调的原
调的程。同时 nice 进程的时间
。
– 178 –
 6 
进程理
的 -20  19 间 0。的 nice 
时间相 nice 时间
进程的 nice 进程对更。
。我们进程的时我们进程更
更的时间然对的更。
6.3.1 nice()
Linux 提设进程 nice 的调单的 nice():
#include 
int nice (int inc);
  调  nice() 将       上   inc   新 。   
CAP SYS NICE 能 (实上 root 的进程) 能 inc
。 root 进程能 ( nice )。
 nice()  -1,  -1 能时的
调对 errno  0调。:
int ret;
errno = 0;
ret = nice (10);
/* increase our nice by 10 */
if (ret == -1 && errno !=0)
perror (”nice”);
else
printf (”nice value is now %d\n”, ret);
对 nice() Linux : EPERM进程提
 CAP SYS NICE 能。的 nice 超出的时
 EINVAL Linux 的对的上。
 0 给 nice() 的单方:
printf(”nice value is currently %d\n”, nice (0));
进程设绝对的相对的时以的
:
– 179 –
 6 
进程理
int ret, val;
/* get current nice value */
val = nice (0);
/* we want a nice value of 10 */
val = 10 - val;
errno = 0;
ret = nice (val);
if (ret == -1 && errno != 0)
perror (”nice”);
else
printf (”nice value is now %d\n”, ret);
6.3.2 getpriority() 和 setpriority()
更的方 getpriority()  setpriority() 调以更的
能然更
#include 
#include 
int getpriority (int which, int who);
int setpriority (int which, int who, int prio);
    作   “which”  “who”   的 进 程进 程  或   
which的    PRIO PROCESS、 PRIO PGRP 或  PRIO USER对 
who进程 ID进程 ID 或 ID。who 0 的时
进程进程或。
getpriority() 进程的 (nice 小) setpriority() 将
进程的设prio。同 nice()  CAP SYS NICE 能
的进程能提进程的 ( nice )更进步
的进程能调属的进程的。
getpriority() 的时 -1 -1 能的同
nice() 处理程调空 error 。 setpriority()
 0 -1。
进程的子:
– 180 –
 6 
进程理
int ret;
ret = getpriority (PRIO_PROCESS, 0);
printf (”nice value is %d\n”, ret);
设进程进程 10 的子:
int ret;
ret = setpriority (PGIO_PGRP, 0, 10);
if (ret == -1)
perror (”setpriority”);
的时设 errno 以:
EACCESS 进程 CAP SYS NICE 能提进程。 (
setpriority())
EINVAL
“which” 的 PRIO PROCESS, PRIO PGRP 或 PRIO USER 。
EPERM
的进程效 ID 调进程效 ID 调进程
 CAP SYS NICE 能。 ( setpriority())
ESRCH
存whichwho的进程。
6.3.3 I/O 优先级
作进程的 Linux 进程 I/O 内 I/O 调
 () 自 I/O 的。
 I/O 调进程 I/O 设
自 I/O 。然 Linux 内调单设
I/O:
int ioprio_get (int which, int who)
int ioprio_set (int which, int who, int ioprio)
内出调 glibc 提空间
。 glibc 的相的。以 glibc 
的时能调同。方操作
进程 I/O :  nice 或 “ionice”∗的实程。
∗ionice  util-linux 的以 http://www.kernel.org/pub/linux/utils/utl-linux 以
GNU General Public License v2 
– 181 –
 6 
进程理
的 I/O 调 I/O  Complete Fair Queu-
ing(CFQ) I/O 调的调。 I/O 调 I/O
相调何提示。
6.4 处理器亲和度
Linux 以处理进程处理的
工作进程调。对处理 (SMP) 上进程调
 CPU 上进程: 调
的处理处理空。然进程 CPU 上
进程调同 CPU 上处理间的进程
性能。
的性能自的存效†。 SMP 的设
处理的存自的处理存的。
进程新处理上写新内存时原处理的存
能。存读新的内存时
存效。时处理的存效
(设存)。进程的时方的相: 进程能
存原存的效。进程调
进程处理。
实上进程调的的。处理处
理的进程 — 或更处理处理空
— 新调进程 CPU 上的。何时进程
对 SMP 的性能。
处理进程同处理上的能性。
 (soft affinity) 调调进程同处理上的自然上文
的以的性。 Linux 调能
的时进程小的存效
能的处理。
然时或程进程处理间的
进程存‡同处理的。
†:cache effects
‡: cache-sensitive
– 182 –
 6 
进程理
 (hard affinity) 内进程处理的。
6.4.1 sched getaffinity() 和 sched setaffinity()
进程进程处理能何 CPU
上。 Linux 提调设进程的‡:
#define _GNU_SOURCE
#include 
typedef struct cpu_set_t;
size_t CPU_SETSIZE;
void CPU_SET (unsigned long cpu, cpu_set_t *set);
void CPU_CLR (unsigned long cpu, cpu_set_t *set);
int CPU_ISSET (unsigned long cpu, cpu_set_t *set);
void CPU_ZERO (cpu_set_t *set);
int sched_setaffinity (pid_t pid, size_t setsize,
const cpu_set_t *set);
int sched_getaffinity (pid_t pid, size_t setsize,
const cpu_set_t *set);
调 sched getaffinity() 以 “pid” 的进程的处理存
 cpu set t 以的。pid 0进程的
。setsize cpu set t 的小 glibc 将时
然性。的时 0 -1设 errno。子
:
cpu_set_t set;
int ret, i;
CPU_ZERO (&set);
ret = sched_getaffinity (0, sizeof (cpu_set_t),
&set);
if (ret == -1)
perror (”sched_getaffinity”);
‡: hard affinity
– 183 –
 6 
进程理
for (i = 0; i< CPU_SETSIZE; i++) {
int cpu;
cpu = CPU_ISSET (i, &set);
printf (”cpu=%i is %s\n”, i, cpu ? ”set” :
”unset” );
}
 调  我 们  CPU ZERO  零   的  进  然     0 
CPU SETSIZE  set 上的。 CPU SETSIZE  set 的小 — 然
能示 setsize—  set 能示的处理。的实 1 
进示处理以 CPU SETSIZE  sizeof(cpu set t) 。我们
 CPU ISSET 的处理进程 0 示 0 
。
实存的处理能处理的上上
将:
cpu=0 is set
cpu=1 is set
cpu=2 is unset
cpu=3 is unset
...
cpu=1023 is unset
出以的 CPU SETSIZE( 0 )  1,024。
我们 CPU #0  #1 存的处理我们我们的进
程 CPU #0 上。:
cpu_set_t set;
int ret, i;
CPU_ZERO (&set);
/* clear all CPUs */
CPU_SET (0, &set);
/* allow CPU #0 */
CPU_CLR (1, &set);
/* forbid CPU #1 */
ret = sched_setaffinity (0, sizeof (cpu_set_t),
&set);
– 184 –
 6 
进程理
if (ret == -1)
perror (”sched_setaffinity”);
for (i = 0; i < CPU_SETSIZE; i++) {
int cpu;
cpu = CPU_ISSET (i, &set);
printf (”cpu=%i is %s\n”, i, cpu ? ”set” :
”unset”);
我们 CPU ZERO 零 set然 CPU SET 对 CPU #0  1, 
CPU CLR 对 CPU #1  0。   零    set 以 CPU CLR  零   
的处性的。
同的处理上同的出:
cpu=0 is set
cpu=1 is unset
cpu=2 is unset
...
cpu=1023 is unset
 CPU #1 进程何 CPU #0 上。
能的:
EFAULT 提的进程的空间或效。
EINVAL 处理调 ( sched setaffinity())或 set-
size 小内示处理集的的小。
EPERM
pid   的 进 程  属  调  进 程 的  效   ID   进 程  
CAP SYS NICE 能。
ESRCH
pid 的进程存。
6.5 实时系统
实时的。
操作∗— 间的小 — 的
∗: operational deadlines
– 185 –
 6 
进程理
实时的。上以的 (ABS)
的实时。的时内
调以
性能。的操作能相
能。
 Linux 内的操作提的实时。
6.5.1 软硬实时系统
实时实时。实时对操作
超。方实时超
的。
实时: 、、设备、处理
的子。实时的子
处理程: 超操作时的
以的。
的时间能满