### Routine Called the System Service Dispatcher

The system service dispatcher uses the value in the EAX register as an index into the System Service Dispatch Table (SSDT). This table directs the code to the appropriate system service (or system call). For example, in the case of Notepad, the SSDT entry would point to the `NtCreateFile` function, which is implemented by the kernel’s I/O manager. Note that this function has the same name and parameters as the one in NTDLL.dll, but the kernel-side implementation is the actual one. Once the system service is complete, the thread returns to user mode to execute the instruction following `sysenter` or `syscall`. This sequence of calls is illustrated in Figure 1-8.

**Figure 1-8: System Service Function Call Flow**

### Chapter 1: Windows Internals Overview
**13. General System Architecture**

Figure 1-9 illustrates the general architecture of Windows, including both user-mode and kernel-mode components.

**Figure 1-9: Windows System Architecture**

Here is a brief overview of the key components shown in Figure 1-9:

- **User Processes**: These are normal processes based on image files, such as instances of `Notepad.exe`, `cmd.exe`, and `explorer.exe`.
- **Subsystem DLLs**: These dynamic link libraries (DLLs) implement the API of a subsystem. A subsystem provides a specific view of the capabilities exposed by the kernel. In Windows 8.1 and later, there is only one subsystem: the Windows Subsystem. Examples of subsystem DLLs include `kernel32.dll`, `user32.dll`, `gdi32.dll`, `advapi32.dll`, and `combase.dll`.
- **NTDLL.DLL**: This system-wide DLL implements the Windows native API. It is the lowest layer of code still in user mode and is responsible for making the transition to kernel mode for system call invocation. NTDLL also includes the Heap Manager, Image Loader, and parts of the user mode thread pool.
- **Service Processes**: These are normal Windows processes that communicate with the Service Control Manager (SCM, implemented in `services.exe`). The SCM can start, stop, pause, resume, and send other messages to services. Services typically run under special Windows accounts like Local System, Network Service, or Local Service.
- **Executive**: This is the upper layer of `ntoskrnl.exe` (the "kernel") and hosts most of the kernel-mode code. It includes various managers such as the Object Manager, Memory Manager, I/O Manager, Plug & Play Manager, Power Manager, and Configuration Manager.
- **Kernel**: The Kernel layer implements the most fundamental and time-sensitive parts of the kernel-mode OS code, including thread scheduling, interrupt and exception dispatching, and kernel primitives like mutexes and semaphores. Some kernel code is written in CPU-specific machine language for efficiency and direct access to CPU-specific details.
- **Device Drivers**: These are loadable kernel modules that execute in kernel mode and have full kernel privileges. This book focuses on writing certain types of kernel drivers.
- **Win32k.sys**: This is the kernel-mode component of the Windows subsystem, handling the user interface and classic Graphics Device Interface (GDI) APIs. All windowing operations (e.g., `CreateWindowEx`, `GetMessage`, `PostMessage`) are managed by this component.
- **Hardware Abstraction Layer (HAL)**: The HAL is a software abstraction layer over the hardware closest to the CPU, allowing device drivers to use APIs without detailed knowledge of hardware specifics like Interrupt Controllers or DMA controllers.
- **System Processes**: These are processes that typically run in the background and are not directly communicated with. They are crucial for the system's operation, and terminating some of them can cause a system crash. Examples include `Smss.exe`, `Lsass.exe`, `Winlogon.exe`, and `Services.exe`.
- **Subsystem Process**: The Windows subsystem process, running the image `Csrss.exe`, assists the kernel in managing processes under the Windows subsystem. It is a critical process, and killing it will cause a system crash. There is one `Csrss.exe` instance per session.
- **Hyper-V Hypervisor**: The Hyper-V hypervisor exists on Windows 10 and Server 2016 (and later) systems that support Virtualization Based Security (VBS). VBS provides an extra layer of security, where the normal OS runs as a virtual machine controlled by Hyper-V. Two Virtual Trust Levels (VTLs) are defined: VTL 0 for the normal user-mode/kernel-mode, and VTL 1 for the secure kernel and Isolated User Mode (IUM).

### Windows 10 Version 1607 and WSL

Windows 10 version 1607 introduced the Windows Subsystem for Linux (WSL). Unlike the old POSIX and OS/2 subsystems, WSL allows existing Linux executables (in ELF format) to run on Windows without recompilation. To achieve this, a new process type called the Pico process was created, along with a Pico provider. A Pico process is a minimal process used for WSL, where every Linux system call is intercepted and translated to the equivalent Windows system call using the Pico provider (a device driver).

Starting with Windows 10 version 2004, WSL 2 was introduced. WSL 2 is based on a hybrid virtual machine technology, allowing the installation of a full Linux system (including the Linux kernel) while still sharing Windows resources. WSL 2 is faster and more capable than WSL 1, thanks to the real Linux kernel handling Linux system calls.

### Handles and Objects

The Windows kernel exposes various types of objects for use by user-mode processes, the kernel itself, and kernel-mode drivers. These objects are data structures in system space, created by the Object Manager (part of the executive) when requested. Objects are reference-counted and are destroyed only when the last reference is released.

Since these object instances reside in system space, they cannot be directly accessed by user mode. Instead, user mode must use handles, which are indices to entries in a table maintained on a per-process basis in kernel space. Functions like `CreateMutex` and `OpenMutex` create or open objects and return handles to them. A handle value of zero indicates an invalid handle.

Kernel and driver code can use either handles or direct pointers to objects, depending on the API. In some cases, a handle given by user mode must be converted to a pointer using the `ObReferenceObjectByHandle` function.

Most functions return null (zero) on failure, but some, like `CreateFile`, return `INVALID_HANDLE_VALUE` (-1) if they fail. Handle values are multiples of 4, with the first valid handle being 4. Zero is never a valid handle value.

All objects are reference-counted, and the Object Manager maintains a handle count and total reference count for each object. When an object is no longer needed, its client should close the handle or dereference the object. The Object Manager will destroy the object if its reference count reaches zero.

Each object points to an object type, which holds information about the type. These types are also exposed as global kernel variables, some of which are defined in kernel headers.

### Object Names

Some types of objects can have names, which can be used to open objects with suitable `Open` functions. However, not all objects have names. For example, processes and threads have IDs instead of names, and files do not have true object names.

Threads in Windows 10 can have a name set with the `SetThreadDescription` API, but this is a friendly name/description primarily useful for debugging.

When a `Create` function is called with a name, it creates the object with that name if it does not already exist. If the object exists, it opens the existing object, and `GetLastError` returns `ERROR_ALREADY_EXISTS`.

The name provided to a `Create` function is prepended with `\Sessions\x\BaseNamedObjects\` where `x` is the session ID of the caller. If the session is zero, the name is prepended with `\BaseNamedObjects\`. If the caller is running in an AppContainer, the prepended string is more complex and includes the unique AppContainer SID.

To share an object across sessions, it can be created in session 0 by prepending the object name with `Global\`.

This hierarchy can be viewed with the Sysinternals WinObj tool, as shown in Figure 1-10.

**Figure 1-10: Sysinternals WinObj Tool**

### Accessing Existing Objects

The Access column in Process Explorer’s handles view shows the access mask used to open or create the handle. This access mask determines what operations are allowed with the handle. For example, to terminate a process, the `OpenProcess` function must be called with at least `PROCESS_TERMINATE` access.

Here is a user-mode example for terminating a process given a process ID:

```cpp
bool KillProcess(DWORD pid) {
    HANDLE hProcess = OpenProcess(PROCESS_TERMINATE, FALSE, pid);
    if (!hProcess)
        return false;

    BOOL success = TerminateProcess(hProcess, 1);
    CloseHandle(hProcess);
    return success != FALSE;
}
```

The Decoded Access column in Process Explorer provides a textual description of the access mask, making it easier to identify the exact access allowed for a particular handle.

Double-clicking a handle entry in Process Explorer shows the object’s properties, including its name, type, address in kernel memory, number of open handles, and specific object information. The actual reference count for the object can be seen using the kernel debugger’s `!trueref` command.

### Chapter 2: Getting Started with Kernel Development

This chapter covers the fundamentals needed to get started with kernel driver development. You will install the necessary tools and write a basic driver that can be loaded and unloaded.

#### Installing the Tools

To begin, install the following tools on your development machine:

- **Visual Studio 2019** with the latest updates and the C++ workload selected. Any SKU, including the free Community edition, is sufficient.
- **Windows 11 SDK** (the latest version is recommended). Ensure that the Debugging Tools for Windows item is selected during installation.
- **Windows 11 Driver Kit (WDK)**, which supports building drivers for Windows 7 and later. Make sure the project templates for Visual Studio are installed.
- **Sysinternals Suite**, available for free from the Sysinternals website. Download and unzip the suite to any folder.

Ensure that the SDK and WDK versions match. Verify that the WDK templates are installed correctly by opening Visual Studio, selecting New Project, and looking for driver projects like “Empty WDM Driver”.

#### Creating a Driver Project

With the installations complete, create a new driver project using the “WDM Empty Driver” template. Figures 2-1 and 2-2 show the New Project dialog in Visual Studio 2019, with and without the Classic Project Dialog extension, respectively.

**Figure 2-1: New WDM Driver Project in Visual Studio 2019**

**Figure 2-2: New WDM Driver Project in Visual Studio 2019 with the Classic Project Dialog extension**

Delete the `Sample.inf` file as it is not needed in this example. Add a new C++ source file named `Sample.cpp` to the Source Files node in Solution Explorer.

#### The DriverEntry and Unload Routines

Every driver has an entry point called `DriverEntry` by default. This function is the main entry point of the driver, comparable to the `main` function in a user-mode application. It is called by a system thread at IRQL PASSIVE_LEVEL (0).

The prototype for `DriverEntry` is as follows:

```cpp
NTSTATUS
DriverEntry(_In_ PDRIVER_OBJECT DriverObject, _In_ PUNICODE_STRING RegistryPath);
```

The `_In_` annotations are part of the Source (Code) Annotation Language (SAL), providing metadata useful for human readers and static analysis tools. These annotations may be removed in code samples for readability, but you should use SAL annotations in your code.