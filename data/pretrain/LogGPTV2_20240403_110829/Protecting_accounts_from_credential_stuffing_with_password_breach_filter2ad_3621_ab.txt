(u1, p1), . . . , (un, pn) such that:
∑
t(CreateRequest(ui, pi)) (cid:28) ∑
t(CreateResponse(Reqi))
i
(7)
i
Where t(f(·)) denotes the running time of the function f.
Non-threats: Some threats are explicitly outside our threat
model. These include an attacker attempting to conﬁrm
whether a breach they have access to is known to the alerting
service (e.g., D ⊆ S), as well as an attacker learning |S|. Such
information may instead be beneﬁcial to have public, allow-
ing the service to publicly communicate which breaches it
covers.
2.4 Tradeoffs of existing schemes
Existing breach alerting services include HaveIBeenPwned
and PasswordPing, both of which have publicly documented
APIs [26, 43]. Clients for each service include the 1Pass-
word [48] and LastPass [42] password managers. GitHub
relies on a local mirror of HaveIBeenPwned’s password dic-
tionary for detection [36]. Firefox uses HaveIBeenPwned to
warn users when they browse to a site that previously suffered
a data breach, or if users supply their email address to Fire-
fox [13]. We examine the tradeoffs these protocols make in
terms of our design principles and threat model, with Table 1
serving as summary.
Query by username: HaveIBeenPwned and PasswordPing
both support querying a speciﬁc plaintext username u. Pass-
wordPing also supports querying H(u), the SHA256 hash of a
l
a
n
o
i
t
a
m
r
o
f
n
i
t
o
n
,
e
l
b
a
n
o
i
t
c
Setup A
Query by
y
t
i
m
y
n
o
n
a
l
a
i
t
n
e
d
e
r
c
r
e
t
s
e
u
q
e
R
e
c
i
v
r
e
S
f
o
l
a
i
n
e
D
o
t
t
n
a
t
s
i
s
e
R
e
s
n
o
p
s
e
r
e
g
a
k
a
e
l
d
e
d
n
u
o
B
e
l
c
a
r
o
t
n
e
i
c
ﬁ
f
e
n
I
k
a
e
w
t
o
n
,
d
e
h
c
a
e
r
B
e
m
i
t
-
l
a
e
r
r
a
e
N
Username
Password
Plaintext
Hash
Plaintext
Hash
Hash preﬁx
Plaintext
(cid:32) (cid:32)
(cid:32)
(cid:32) (cid:32)
(cid:32)
(cid:32) (cid:32)
(cid:32)
(cid:32) (cid:32)
(cid:32)
(cid:32)
(cid:32) (cid:32)
(cid:32) (cid:32) (cid:32) (cid:32) (cid:32)
(cid:32)
(cid:32)
Table 1: Summary of protocols supported by HaveIBeen-
Pwned and PasswordPing and their tradeoffs according to our
design principles and threat model.
Plaintext, hash (cid:32) (cid:32) (cid:32)
(cid:32) (cid:32) (cid:32)
Domain
Username,
then password
Hash, hash
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
username. In response, both services provide a list of breaches
that the speciﬁed user was affected by and the class of data
exposed (e.g., password, physical address). Lastpass currently
relies on the username-only protocol from PasswordPing for
breach alerting (after user consent).
In terms of our threat model (see Table 1), H(u) creates a
unique, stable identiﬁer of the user that is possibly reversible
via a dictionary attack. This fails our requirement of requester
credential anonymity. Likewise, querying u directly leaks the
user’s identity. Neither H(u) or u provides a computational
hurdle, thus providing an efﬁcient oracle for performing recon-
naissance on victims. Knowledge of which breaches a victim
is involved in can expose the victim to extortion, similar to
recent scams that include breached data to coerce victims into
paying the attacker by misrepresenting wider access [31].
Revisiting our design principles, we ﬁnd that username-
only protocols fail to satisfy our requirement of actionable
rather than informational breach warnings. Users may have
changed their password, or no longer use the account involved.
Likewise, isolating responses solely to the types of data ex-
posed fails to alert users to breached passwords that they re-
use across multiple sites, where just one of the sites involved
might be breached.
Query by password: PasswordPing allows clients to send a
plaintext password p, or H(p) using SHA1, SHA256, or MD5.
Both PasswordPing and HaveIBeenPwned provide a more
secure alternative, whereby clients supply an N-bit preﬁx
1558    28th USENIX Security Symposium
USENIX Association
H(p)[0:N]. The server then returns all known breached pass-
words with that preﬁx, with the client performing the ﬁnal ex-
actness check locally. PasswordPing uses a 10-hex character
preﬁx of a SHA1, SHA256, or MD5 hash; HaveIBeenPwned
uses a 5-hex character preﬁx of a SHA1 hash. 1Password
currently relies on HaveIBeenPwned and the password-preﬁx
approach for breach alerting.
As detailed in Table 1, while supplying p explicitly exposes
a client’s non-breached password, revealing even H(p) leads
to a potential pre-computed dictionary attack by an adversarial
server. This threat is simpliﬁed by the lack of salt. As such,
both schemes fail to provide requester credential anonymity.
In the preﬁx-based variant, the same attack reduces the search
space necessary by 2N, with the attacker prioritizing guesses
based on a password’s popularity. With a sufﬁciently small
N, this meets our criteria for anonymity—though weakly. We
provide a deeper treatment of our rationale in Appendix A.
However, as the response contains multiple passwords per
lookup, this does not satisfy our requirement for bounded
leakage. An adversarial client can enumerate each bucket
to acquire a local copy of all H(p) for ofﬂine cracking to
rebuild the underlying password dictionary.1 While there is a
legitimate argument that an attacker could more easily acquire
a plaintext copy of the data breach, ideally any such protocol
should also work for more sensitive breach data that is not
widely accessible.
From a design perspective, we ﬁnd that password-only pro-
tocols run the risk of alerting users to merely weak passwords.
If u1 in a breach shares the same password as u2 who was not
in any breach, there is no way to curate the security advice to
both users’ circumstances.
Query by domain: Both HaveIBeenPwned and Password-
Ping provide a protocol for determining whether a domain
was part of a breach. Firefox currently uses HaveIBeenPwned
to warn users when they visit a domain that’s previously suf-
fered a breach [9]. This alert speciﬁes that if they had an
account, their data may no longer be secure. While these
domain-only protocols satisfy every requirement laid out in
our threat model (assuming the list of insecure domains is
locally cached rather than queried), they provide neither ac-
tionable advice nor speciﬁc insights into breached rather than
weak passwords. For example, a site visitor may have regis-
tered an account after the breach date. Likewise, domain-only
protocols cannot capture the risk of password re-use across
breached and non-breached sites.
Query by username, then password: PasswordPing pro-
vides a protocol whereby a client ﬁrst queries u or H(u) using
SHA-256, in turn receiving a salt s associated with that ac-
count. The client uses this to calculate H(u, p, s) via Argon2,
sending only the N-bit preﬁx H(u, p, s)[0:N]. PasswordPing
1HaveIBeenPwned provides a direct download to every password in its
corpus (hashed via SHA1), so this enumeration step is unnecessary and
something the service argues is outside their threat model.
relies on a 10-hex character preﬁx. The server responds with
all known matching credentials, allowing a client to perform
the conﬁrmation locally. This approach satisﬁes all of our
design principles. Additionally, due to the use of Argon2, the
hash complexity involved compared to SHA or MD5 satisﬁes
our requirement of an inefﬁcient oracle. While we can bound
the leakage of this protocol, it leaks information about both a
requester’s identity as well as multiple H(u, p, s) per response
enabling ofﬂine attacks. (The s prevents pre-computed dic-
tionary attacks.) This protocol bears a close resemblance to
ours, but we satisfy all the criteria laid out in Table 1 and
show in Section 3.2 how to further protect users’ password
information when querying by username.
2.5 Alternative cryptographic protocols
Our threat model is closely related to several well-studied
cryptographic primitives. These protocols offer stricter pri-
vacy guarantees, but are computationally burdensome for a
network setting in practice. As such, our threat model uses a
relaxed requirement of anonymity. Secure hardware enclaves
would also enable stricter privacy guarantees, but current en-
claves have been shown to be vulnerable to side-channel and
speculative execution attacks [53, 54].