    public static string IntToBinaryString(int bits, bool removeTrailingZero)
    {
      var sb = new StringBuilder(32);
      for (int i = 0; i 
类。这个类最初是为WPF定义的，这样UI就可以得知集合的变化，Windows应用程序使用
它的方式相同。在.NET Core中，需要引用NuGet包System.ObjectModel。这个类的名称空
间是System.Collections. ObjectModel。
ObservableCollection类派生自Collection基类，该基类可用于创建自定义集
合，并在内部使用List类。重写基类中的虚方法SetItem（）和RemoveItem（），以触
发CollectionChanged事件。这个类的用户可以使用INotifyCollectionChanged接口注册这个
事件。
下面的示例说明了ObservableCollection（）方法的用法，其中给
CollectionChanged事件注册了Data_CollectionChanged（）方法。把两项添加到末尾，再插
入一项，并删除一项（代码文件ObservableCollectionSample/Program.cs）：
    var data = new ObservableCollection();
    data.CollectionChanged += Data_CollectionChanged;
    data.Add("One");
    data.Add("Two");
    data.Insert(1, "Three");
    data.Remove("One");
ObservableCollectionSample使用如下依赖项和名称空间：
依赖项：
    NETStandard.Library
    System.ObjectModel
名称空间：
    System.Collections.ObjectModel
    System.Collections.Specialized
    static System.Console
Data_CollectionChanged（）方法接收NotifyCollectionChangedEventArgs，其中包含了
集合的变化信息。Action属性给出了是否添加或删除一项的信息。对于删除的项，会设置
OldItems属性，列出删除的项。对于添加的项，则设置NewItems属性，列出新增的项。
    public static void Data_CollectionChanged(object sender,
                                          NotifyCollectionChangedEventArgs e)
    {
      WriteLine($"action: {e.Action.ToString()}");
      if (e.OldItems ! = null)
      {
        WriteLine($"starting index for old item(s): {e.OldStartingIndex}");
        WriteLine("old item(s):");
        foreach (var item in e.OldItems)
        {
          WriteLine(item);
        }
      }
      if (e.NewItems ! = null)
      {
        WriteLine($"starting index for new item(s): {e.NewStartingIndex}");
        WriteLine("new item(s): ");
        foreach (var item in e.NewItems)
        {
          WriteLine(item);
        }
      }
      WriteLine();
    }
运行应用程序，输出如下所示。先在集合中添加One和Two项，显示的Add动作的索
引是0和1。第3项Three插入在位置1上，所以显示的Add动作的索引是1。最后删除One
项，显示的Remove动作的索引是0：
    action: Add
    starting index for new item(s): 0
    new item(s):
    One
    action: Add
    starting index for new item(s): 1
    new item(s):
    Two
    action: Add
    starting index for new item(s): 1
    new item(s):
    Three
    action: Remove
    starting index for old item(s): 0
    old item(s):
    One
12.4 不变的集合
如果对象可以改变其状态，就很难在多个同时运行的任务中使用。这些集合必须同
步。如果对象不能改变其状态，就很容易在多个线程中使用。不能改变的对象称为不变的
对象。不能改变的集合称为不变的集合。
  注意： 使用多个任务和线程，以及用异步方法编程的主题详见第21章和第15
章。
为了使用不可变的集合，可以添加NuGet包System.Collections.Immutable。这个库包含
名称空间System.Collections.Immutable中的集合类。
比较前一章讨论的只读集合与不可变的集合，它们有一个很大的差别：只读集合利用
可变集合的接口。使用这个接口，不能改变集合。然而，如果有人仍然引用可变的集合，
它就仍然可以改变。对于不可变的集合，没有人可以改变这个集合。
ImmutableCollectionSample利用下面的依赖项和名称空间：
依赖项：
    NETStandard.Library
    System.Collections.Immutable
.NET Core包
    System.Console
    System.Collections
    System.Collections.Immutable
名称空间：
    System.Collections.Generic
    System.Collections.Immutable
    static System.Console
下面是一个简单的不变字符串数组。可以用静态的Create（）方法创建该数组，如下
所示。Create方法被重载，这个方法的其他变体允许传送任意数量的元素。注意，这里使
用两种不同的类型：非泛型类ImmutableArray的Create静态方法和Create（）方法返回的泛
型ImmutableArray结构。在下面的代码中（代码文件
ImmutableCollectionsSample/Program.cs），创建了一个空数组：
    ImmutableArray a1 = ImmutableArray.Create();
空数组没有什么用。ImmutableArray类型提供了添加元素的Add（）方法。但
是，与其他集合类相反，Add（）方法不会改变不变集合本身，而是返回一个新的不变集
合。因此在调用Add（）方法之后，a1仍是一个空集合，a2是包含一个元素的不变集合。
Add（）方法返回新的不变集合：
    ImmutableArray a2 = a1.Add("Williams");
之后，就可以以流畅的方式使用这个API，一个接一个地调用Add（）方法。变量a3
现在引用一个不变集合，它包含4个元素：
    ImmutableArray a3 =
        a2.Add("Ferrari").Add("Mercedes").Add("Red Bull Racing");
在使用不变数组的每个阶段，都没有复制完整的集合。相反，不变类型使用了共享状
态，仅在需要时复制集合。
但是，先填充集合，再将它变成不变的数组会更高效。需要进行一些处理时，可以再
次使用可变的集合。此时可以使用不变集合提供的构建器类。
为了说明其操作，先创建一个Account类，将此类放在集合中。这种类型本身是不可
变的，不能使用只读自动属性来改变（代码文件
ImmutableCollectionsSample/Account.cs）：
    public class Account
    {
      public Account(string name, decimal amount)
      {
        Name = name;
        Amount = amount;
      }
      public string Name { get; }
      public decimal Amount { get; }
    }
接着创建List集合，用示例账户填充（代码文件
ImmutableCollectionsSample/Program. cs）：
    var accounts = new List()
    {
      new Account("Scrooge McDuck", 667377678765m),
      new Account("Donald Duck", -200m),
      new Account("Ludwig von Drake", 20000m)
    };
有了账户集合，可以使用ToImmutableList扩展方法创建一个不变的集合。只要打开名
称空间System.Collections.Immutable，就可以使用这个扩展方法：
    ImmutableList immutableAccounts = accounts.ToImmutableList();
变量immutableAccounts可以像其他集合那样枚举，它只是不能改变。
    foreach (var account in immutableAccounts)
    {
      WriteLine($"{account.Name} {account.Amount}");
    }
不使用foreach语句迭代不变的列表，也可以使用用ImmutableList定义的
foreach（）方法。这个方法需要一个Action委托作为参数，因此可以分配lambda表达
式：
    immutableAccounts.ForEach(a =.Builder builder = immutableAccounts.ToBuilder
 ();
    for (int i = 0; i > builder.Count; i++)
    {
      Account a = builder[i];
      if (a.Amount  overdrawnAccounts = builder. ToImmutable
 ();
    overdrawnAccounts.ForEach(a =
ImmutableArray 是一个结构，它在内部使用数
组类型，但不允许更改底层类型。这个结构实现了
接口IImmutableList 
ImmutableList
ImmutableList 在内部使用一个二叉树来映射
对象，以实现接口IImmutableList 
ImmutableQueue
IImmutableQueue 实现了接口IImmutableQueue
，允许用Enqueue、Dequeue和Peek以先进先出
的方式访问元素
ImmutableStack
ImmutableStack实现了接口
IImmutableStack，允许用Push、Pop和Peek以先
进后出的方式访问元素
ImmutableDictionary
ImmutableDictionary 是一个不可变
的集合，其无序的键/值对元素实现了接口
IImmutableDictionary 
ImmutableSortedDictionary
ImmutableSortedDictionary 是一个
不可变的集合，其有序的键/值对元素实现了接口
IImmutableDictionary 
ImmutableHashSet
ImmutableHashSet 是一个不可变的无序散列
集，实现了接口IImmutableSet。该接口提供了
第11章讨论的功能
ImmutableSortedSet
ImmutableSortedSet 是一个不可变的有序集
合，实现了接口IImmutableSet 
与正常的集合类一样，不变的集合也实现了接口，例如，IImmutableQueue、
IImmutableList以及IImmutableStack 。这些不变接口的最大区别是所有改变集合的
方法都返回一个新的集合。
12.4.3 使用LINQ和不变的数组
为了使用LINQ和不变的数组，类ImmutableArrayExtensions定义了LINQ方法的优化版
本，例如，Where、Aggregate、All、First、Last、Select和SelectMany。要使用优化的版
本，只需要直接使用ImmutableArray类型，打开System.Linq名称空间。
使用ImmutableArrayExtensions类型定义的Where方法如下所示，扩展了
ImmutableArray类型：
    public static IEnumerable Where(
        this ImmutableArray immutableArray, Func predicate);
正常的LINQ扩展方法扩展了IEnumerable 。因为ImmutableArray 是一个更好
的匹配，所以使用优化版本调用LINQ方法。
  注意： LINQ参见第13章。
12.5 并发集合
不变的集合很容易在多个线程中使用，因为它们不能改变。如果希望使用应在多个线
程中改变的集合，.NET在名称空间System.Collections.Concurrent中提供了几个线程安全的
集合类。线程安全的集合可防止多个线程以相互冲突的方式访问集合。
为了对集合进行线程安全的访问，定义了IProducerConsumerCollection接口。这个
接口中最重要的方法是TryAdd（）和TryTake（）。TryAdd（）方法尝试给集合添加一
项，但如果集合禁止添加项，这个操作就可能失败。为了给出相关信息，TryAdd（）方
法返回一个布尔值，以说明操作是成功还是失败。TryTake（）方法也以这种方式工作，
以通知调用者操作是成功还是失败，并在操作成功时返回集合中的项。下面列出了
System.Collections.Concurrent名称空间中的类及其功能。
● ConcurrentQueue ——这个集合类用一种免锁定的算法实现，使用在内部合并到
一个链表中的32项数组。访问队列元素的方法有Enqueue（）、TryDequeue（）和
TryPeek（）。这些方法的命名非常类似于前面Queue类的方法，只是给可能
调用失败的方法加上了前缀Try。因为这个类实现了
IProducerConsumerCollection接口，所以TryAdd（）和TryTake（）方法仅调
用Enqueue（）和TryDequeue（）方法。
● ConcurrentStack ——非常类似于ConcurrentQueue类，只是带有另外的元素
访问方法。ConcurrentStack类定义了Push（）、PushRange（）、
TryPeek（）、TryPop（）以及TryPopRange（）方法。在内部这个类使用其元素
的链表。
● ConcurrentBag ——该类没有定义添加或提取项的任何顺序。这个类使用一个把
线程映射到内部使用的数组上的概念，因此尝试减少锁定。访问元素的方法有
Add（）、TryPeek（）和TryTake（）。
● 
ConcurrentDictionary 