### 使用-t参数指定镜像命名空间、仓库名及TAG

`-t` 参数用于指定镜像的命名空间、仓库名和标签（TAG）。即使在镜像创建成功后，仍可以通过 `docker tag` 命令来修改这些信息。实际上，这是为同一镜像实体创建了两个不同的引用名称。例如，`xixihe/test:v1` 和 `xixihe/test:v2` 指向的是同一个镜像 ID `8758374dc545`。

```bash
# docker tag xixihe/test:v1 xixihe/test:v2
# docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
xixihe/test         v2                  8758374dc545        5 minutes ago       192.7 MB
xixihe/test         v1                  8758374dc545        5 minutes ago       192.7 MB
ubuntu              latest              9bd07e480c5b        6 days ago          192.7 MB
```

紧跟 `-t` 参数的是 Dockerfile 文件所在的相对路径。如果使用当前目录，则路径为 `.`。从构建输出中可以看出，每条指令都相当于构建了一个临时镜像，直到最终生成目标镜像。以下以第 5 步为例进行说明：

```bash
Step 5 : RUN touch test.txt && echo "abc" >> abc.txt
---> Running in 141802f35d94
---> d3625958dc52
Removing intermediate container 141802f35d94
```

在这个步骤中，Docker 从前一个临时镜像创建了一个新容器 `141802f35d94`，并在其中执行了 `RUN` 指令。完成后，该容器被提交为一个新的临时镜像 `d3625958dc52`，而原来的临时容器则被删除。通过设置 `docker build` 命令中的 `--rm=false` 参数，可以避免临时容器被删除。

此外，步骤 0 到步骤 3 与其他步骤有所不同，因为它们利用了 Docker 构建器的缓存机制。如果某条指令已经执行过并产生了缓存镜像，那么下一次执行时可以直接使用这个缓存镜像，无需重新执行指令链。

```bash
Step 0 : FROM ubuntu:latest
---> 8eaa4ff06b53
Step 1 : MAINTAINER xxh "PI:EMAIL"
---> Using cache
---> f9caa95a4e54
Step 2 : USER root
---> Using cache
---> 05ee079f4925
Step 3 : RUN apt-get update
---> Using cache
---> 73ede9cd2370
```

通过设置 `docker build` 命令中的 `--no-cache=true` 参数，可以禁用缓存机制。

接下来，我们可以使用刚才构建的镜像来创建一个容器，并检查 Dockerfile 中的操作是否已生效。

除了使用本地 Dockerfile 文件外，还可以通过指定一个 Git 仓库来构建镜像。此时，Dockerfile 需要放置在仓库的根目录下，且 ADD 命令所依赖的文件也必须在仓库目录中。使用 `build` 命令时，Docker 会自动下载所需文件。需要注意的是，`build` 命令所需的 Git 地址形式与 GitHub 上复制的地址不同。示例代码如下：

```bash
# docker build -t xixihe/test:v1 git://github.com/xixihe/gitDockerFile.git
Sending build context to Docker daemon 49.15 kB
Sending build context to Docker daemon
Step 0 : FROM ubuntu
---> 9bd07e480c5b
Step 1 : ADD README.md /opt/
---> 66ef4ce82a4b
Removing intermediate container 95e82db31db1
Successfully built 66ef4ce82a4b
```

### Docker Hub

#### 3.4.1 Docker Hub 简介

Docker Hub 的网址是 https://hub.docker.com，类似于提供源代码托管服务的 GitHub，但 Docker Hub 提供的是镜像托管服务。用户可以在 Docker Hub 上搜索、创建、分享和管理镜像，并利用其提供的自动化构建技术直接在集群云服务器上构建镜像。

Docker Hub 为用户提供不限数量的公开镜像托管服务，但仅提供一个私有镜像托管服务。如需更多私有镜像托管服务，需要额外付费。

Docker Hub 上的镜像分为两类：官方镜像和普通用户镜像。官方镜像通常由权威第三方（如 Canonical、Oracle、Red Hat 等）开发维护，并经过 Docker 官方认证。普通用户镜像则由普通用户上传和维护。

#### 3.4.2 镜像的分发

将本机上创建的镜像分发到互联网供其他用户使用，最便捷的方式是使用 Docker Hub。首先登录 Docker Hub 官网注册账号。如果你已有 GitHub 账号，可以点击用户名框上的 "Sign up with Github" 使用 GitHub 账号直接登录。注册时填写的用户名将成为你在 Docker Hub 上的命名空间。

注册成功后，在命令行客户端登录你的 Docker Hub 账号：

```bash
# docker login
Username: xixihe
Password:
Email: PI:EMAIL
Login Succeeded
```

登录信息保存在 `~/.dockercfg` 文件中：

```bash
# cat ~/.dockercfg
{
  "https://index.docker.io/v1/": {
    "auth": "eGl4aWhlOndob2FtaQ==",
    "email": "PI:EMAIL"
  }
}
```

用户名和密码通过哈希运算后保存在 `auth` 字段中，确保密码的安全性。登录成功后，使用 `push` 命令上传镜像。如果不指定镜像标签，所有本地镜像都将上传到 Docker Hub。

```bash
# docker push xixihe/abcd:v1
The push refers to a repository [xixihe/abcd] (len: 1)
Sending image list
Pushing repository xixihe/abcd (1 tags)
511136ea3c5a: Image already pushed, skipping
01bf15a18638: Image already pushed, skipping
30541f8f3062: Image already pushed, skipping
e1cdf371fbde: Image already pushed, skipping
9bd07e480c5b: Image already pushed, skipping
ca1a774c2745: Image successfully pushed
Pushing tag for rev [ca1a774c2745] on
{https://cdn-registry-1.docker.io/v1/repositories/xixihe/abcd/tags/v1}
```

这样，镜像就已经成功上传到了 Docker Hub。进入 Docker Hub 的仓库管理页面，可以看到 `xixihe/abcd` 镜像仓库已成功创建。你还可以为镜像添加或更改图标、描述等信息，方便管理和使用。默认情况下，镜像是公开的，其他用户可以搜索并使用它。当然，也可以将其设为私有。

#### 3.4.3 自动化构建

除了在本地创建镜像并通过 `push` 命令将其推送到 Docker Hub 外，还可以使用 Docker Hub 提供的自动化构建技术在服务端直接构建镜像。通过连接包含 Dockerfile 文件的 GitHub 或 Bitbucket 仓库，Docker Hub 的构建集群服务器会自动构建镜像。这种方式构建的镜像会被标记为 "Automated Build" 或 "Trusted Build"。

使用自动化构建的优点包括：
- 用户可以确保拉取的镜像是按照特定方式构建的。
- 访问 Docker Hub 的用户可以自由查阅 Dockerfile 文件。
- 因为构建过程是自动的，所以能确保仓库中的镜像都是最新的。

下面我们将演示如何使用 GitHub 来自动构建镜像：

1. 登录 Docker Hub，在我的镜像页面点击右上角的 "Add Repository"，选择 "Automated Build"。
2. 选择用来构建的源（这里选择 GitHub），点击 "Link to your GitHub.com account" 进行授权。
3. 选择连接到 GitHub 的方式（推荐选择 "Public and Private"）。
4. 在 GitHub 授权登录页面输入账号登录，然后选择 "Authorize application"。
5. 成功授权后，选择你想要构建的仓库。
6. 进入自动化构建配置页面，配置镜像的命名空间、仓库名、标签、所在分支、Dockerfile 文件位置、访问属性等。
7. 点击 "Create Repository" 按钮完成创建。
8. 进入自动化构建详情页面，通过 "Build Details" 选项卡中的 build ID 链接可以跳转到镜像构建的过程信息页面。如果构建失败，可以通过 Logs 信息定位原因。

一旦对应的 GitHub 仓库文件有更新，Docker Hub 上的镜像构建就会被自动触发，从而保证镜像都是最新的。

#### 3.4.4 创建注册服务器

除了使用 Docker 官方提供的注册服务器 Docker Hub 存储管理镜像外，还可以搭建自己的注册服务器。Docker Hub 所使用的注册服务器本身是开源的，并且以镜像的形式分发在 Docker Hub 上。注册服务器源码的地址是 https://github.com/docker/docker-registry，Docker Hub 上的镜像名为 `registry`。

可以从 GitHub 上拉取源码，然后使用 `docker build` 命令手动构建注册服务器的镜像，也可以使用 `docker pull` 拉取 Docker Hub 上已经构建好的镜像。使用后者只需两步即可完成注册服务器的创建：

1. 拉取最新的 `registry` 官方镜像：
   ```bash
   # docker pull registry
   ```

2. 运行 `registry`：
   ```bash
   # docker run -p 5000:5000 -d -i -t registry
   ```

这样，注册服务器就成功在 5000 端口运行了。接下来，可以将镜像提交到这个注册服务器上。使用 `commit` 命令将任意一个容器提交成镜像，并按照 `[registry_host: registry_port/image_name:image_tag]` 方式指定标签：

```bash
# docker ps -a
CONTAINER ID        IMAGE               COMMAND                CREATED             STATUS              PORTS               NAMES
...
56d26c54b98f        registry:latest      "docker-registry"      9 minutes ago       Exited (3) 9 minutes ago   pensive_davinci
...

# docker commit 56d26c54b98f 127.0.0.1:5000/my_image:v1
e35c26122c2ada4f2fb1a84542c3a0ec9e1e0dc191949e01cf5ba43da6aef410
```