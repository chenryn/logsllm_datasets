### 图5：页面加载时间的开销比率

ADGRAPH 在 42% 的网站上比 Chromium 加载速度更快。这是因为 ADGRAPH 需要获取和渲染的资源比原生 Chromium 少（即 ADGRAPH 拦截了部分网络请求）。表 VIII 显示，ADGRAPH 在拦截更多广告/追踪内容的网站上表现优于 Chromium，而在拦截较少内容的网站上则表现较差。换句话说，ADGRAPH 拦截的内容越多，它就越能通过减少网络请求和渲染来弥补其自身的检测和分类开销。

ADGRAPH 在 78% 的网站上比 Adblock Plus 加载速度更快。ADGRAPH 比 Adblock Plus 更快的原因有两个。首先，Adblock Plus 实现了元素隐藏规则（即这些元素仍然被获取，但在渲染时被隐藏），这带来了额外的执行和重排版开销，而 ADGRAPH 不需要这些开销。其次，ADGRAPH 的拦截逻辑是在浏览器内部实现的，而 Adblock Plus 的拦截逻辑是在扩展层实现的，这使得 ADGRAPH 的性能更好。

总体而言，我们得出结论，ADGRAPH 足够高效，可以作为一个实用的在线内容拦截解决方案。未来的实现改进和探索更低成本的特征可能会进一步提高 ADGRAPH 的性能。

### 讨论

#### A. ADGRAPH 的离线应用

ADGRAPH 是作为在线、浏览器内的拦截工具设计和实现的。这与大多数依赖于主流浏览器扩展的拦截工具不同（例如 Chrome 和 Firefox）。由于 ADGRAPH 需要对浏览器进行插桩，因此不能直接用于依赖离线手动维护过滤列表的扩展型拦截工具。然而，ADGRAPH 可以通过以下几种方式帮助现有的拦截工具创建和维护过滤列表：

1. **提高过滤列表的准确性**：过滤列表的手动生成和依赖非正式的众包反馈导致了其准确性问题。如第四章 B 节所述，过滤列表维护者可以通过分析 ADGRAPH 与过滤列表之间的差异来识别并修复过滤列表中的潜在不准确之处。
   
2. **支持未充分服务的语言和地区**：过滤列表通常偏向于流行网站和语言，因为这些网站有更大的活跃用户基础 [42], [54]。过滤列表维护者在不太受欢迎的网站上收到的反馈较少，这使得为未充分服务的地区（地理和语言方面）创建和维护过滤列表变得困难。语言/地区特定的过滤列表更新频率远低于通用（主要是针对英语）的过滤列表，如 EasyList。许多语言和地区（尤其是非洲）根本没有专门的过滤列表。ADGRAPH 可以帮助自动为较小或未充分服务的地区生成过滤列表。

3. **解决过时和陈旧的规则**：过滤列表的手动维护导致了越来越多的过时和陈旧规则。大多数网站频繁更新且高度动态，过滤列表可能需要几个月才能响应这些变化 [47]。即使过滤列表得到更新，通常也是添加新规则而不是编辑旧规则，从而导致陈旧规则的积累。先前的研究报告称，EasyList 中只有 200 条规则占了 90% 的拦截活动 [62]。换句话说，EasyList 中很少使用或从未使用的规则数量正在增加，这对性能产生了影响。ADGRAPH 可以由过滤列表维护者定期审计过滤列表，以识别过时和陈旧的规则。

#### B. ADGRAPH 的局限性及未来改进

**真实情况**：ADGRAPH 依赖过滤列表作为训练机器学习分类器的真实数据。如第四章 B 节所示，过滤列表存在误报和漏报的问题。ADGRAPH 可以通过在大规模部署时收集有价值的用户反馈来解决这些问题。ADGRAPH 可以根据收到的用户反馈定期重新训练其机器学习分类器。

**特征**：ADGRAPH 使用的特征是基于我们的领域知识和专家直觉手动设计的，目的是达到不错的准确性。需要注意的是，特征集并不“完整”，还有改进的空间。新的特征可以通过结合用户反馈系统地发现，这些反馈可能揭示出当前 ADGRAPH 未覆盖的广告/追踪器的新特性。新的特征可能需要添加新的插桩点，如 JavaScript API 或新的特征模式，如基于图像的感知信息 [28], [60], [61]。

**分类粒度**：目前，ADGRAPH 设计为对网络请求做出二元决策，即拦截或允许。然而，如第四章 B 节所述，ADGRAPH 也能检测到单个 JavaScript 代码既包含广告/追踪内容又包含功能性内容的情况。在这种情况下，拦截请求可能会破坏页面功能，而允许请求则会导致页面上出现广告/追踪器。ADGRAPH 的上下文丰富的分类方法可以扩展到超过两个标签，以处理这种双用途脚本。具体来说，ADGRAPH 可以在更细粒度的级别上训练，以区分广告/追踪器、功能性内容和双用途资源。对于双用途资源，ADGRAPH 可以采取不同的补救措施，而不是简单地允许或拦截，例如限制这些脚本的 DOM 功能（如读写 Cookie [14], [63] 或访问某些 API [4], [13]），或者阻止这些脚本发出的网络请求。

### 结论

本文提出了 ADGRAPH，一种基于图的机器学习方法来拦截广告和追踪器。我们设计了 ADGRAPH 以利用网络请求、DOM 元素和 JavaScript 代码执行之间的细粒度交互，构建一个图表示，用于追踪广告/追踪器与其他页面内容之间的关系。为了实现 ADGRAPH，我们对 Chromium 的渲染引擎（Blink）和 JavaScript 执行引擎（V8）进行了插桩，以便在页面加载过程中高效地收集完整的 HTML、HTTP 和 JavaScript 信息。我们利用这些丰富的上下文提取了区分特征，以训练一个在浏览器中实时运行的机器学习分类器来进行广告和追踪器拦截。

我们展示了 ADGRAPH 不仅以 95.33% 的准确率拦截广告/追踪器，还发现了许多被过滤列表遗漏或过度拦截的广告/追踪器和功能性资源。此外，ADGRAPH 的中断率与过滤列表相当。除了高准确率和可比的中断率外，我们还展示了 ADGRAPH 在页面加载速度上显著优于现有的内容拦截工具。我们设计 ADGRAPH 既可用于在线（浏览器内拦截）也可用于离线（过滤列表管理）。由于绝大多数基于扩展的拦截工具目前依赖于手动维护的过滤列表，ADGRAPH 的离线用例将有助于过滤列表的监控和维护。总体而言，我们认为 ADGRAPH 显著推进了广告和追踪器拦截技术的发展。

### 致谢

本研究得到了美国国家科学基金会的部分资助，资助编号为 1715152, 1719147 和 1815131。

### 参考文献

[略]

---

希望这个优化后的版本能够更好地传达您的意图，并且更加清晰、连贯和专业。如果需要进一步调整，请告诉我！