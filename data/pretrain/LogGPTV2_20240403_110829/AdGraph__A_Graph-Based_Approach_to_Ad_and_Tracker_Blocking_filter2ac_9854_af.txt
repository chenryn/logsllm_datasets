a
r
F
0
-50 -40 -30 -20 -10 0   10  20  30  40  50 
Difference in page load time (%)
AdGraph vs. Stock
AdGraph vs. Adblock Plus
Fig. 5: Overhead ratio in terms of page load time.
ADGRAPH performs faster than Chromium on 42% of
websites. ADGRAPH is often faster than stock Chromium
because it needs to fetch and render fewer resources than stock
Chromium (i.e. the network requests blocked by ADGRAPH).
Table VIII shows that ADGRAPH outperforms Chromium on
sites where it blocks more ad/tracking content, as compared
to sites where it blocks less. Put differently, the more content
ADGRAPH blocks, the more it is able to make up for the
instrumentation and classiﬁcation overhead with network and
rendering savings.
ADGRAPH performs faster than Adblock Plus on 78% of
websites. ADGRAPH is faster than Adblock Plus for two
reasons. First, Adblock Plus implements element hiding rules
(i.e. rules describing elements that are still fetched, but hidden
when rendering), which carries with it an enforcement and
display-reﬂow overhead ADGRAPH does not share. Second,
ADGRAPH’s blocking logic is implemented in-browser which
leads to performance improvement over Adblock Plus’s im-
plementation at the extension layer.
Overall, we conclude that ADGRAPH is performant enough
to be a practical online content blocking solution. Future
implementation reﬁnements, and the exploration of cheaper
features, could further improve ADGRAPH’s performance.
V. DISCUSSIONS
A. Ofﬂine Application of ADGRAPH
ADGRAPH is designed and implemented to be used as
an online, in-browser blocking tool. This is different than
most blocking tools, which operate as extensions on main-
stream browsers (e.g. Chrome, Firefox). Since ADGRAPH
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:17:00 UTC from IEEE Xplore.  Restrictions apply. 
774
requires browser instrumentation, it cannot be directly used
by extension-based blockers that rely on ofﬂine manually
curated ﬁlter lists. ADGRAPH can beneﬁt existing blocking
tools through the creation and maintenance of ﬁlter lists in
several ways.
First, the accuracy of ﬁlter lists suffers because of they
are manual generated and rely on informal crowdsourced
feedback. As discussed in Section IV-B, ﬁlter list maintainers
can analyze disagreements between ADGRAPH and ﬁlter lists
to identify and ﬁx potential inaccuracies in ﬁlter lists
Second, ADGRAPH can support the generation of ﬁlter lists
targeting under-served languages or region on the web. Filter
lists are inherently skewed towards popular websites and lan-
guages because of their larger and more active blocking user
base [42], [54]. Filter list maintainers receive much less feed-
back to ﬁx inaccuracies on less popular websites. This makes
the creation and maintenance of ﬁlter lists for underserved
regions (geographically and linguistically) difﬁcult, since these
sites have less visitors. Language/region speciﬁc ﬁlter lists are
updated much less frequently than general (and mostly English
targeting) ﬁlter lists like EasyList. Many languages and regions
(most notably Africa) do not have dedicated ﬁlter lists at all.
ADGRAPH can assist in automatically generating ﬁlter lists
for smaller or underserved regions.
Third,
the manual nature of ﬁlter list maintenance has
lead to increasing number of outdated and stale rules. Filter
list rules can quickly get outdated because most websites
frequently update and are highly dynamic. Prior research found
that ﬁlter lists can take months to update in response to such
changes [47]. Even when ﬁlter lists are updated, new rules are
typically added (rather than editing old rules) which leads to
accumulation of stale rules over time. Prior research reported
that only 200 rules account for 90% blocking activity for
EasyList [62]. In other words, the number of rare-to-never
used rules in EasyList
is increasing over time which has
performance implications. ADGRAPH can by used by ﬁlter
list maintainers to periodically audit ﬁlter lists for identifying
outdated and stale rules.
B. ADGRAPH Limitations And Future Improvements
Ground Truth. ADGRAPH relies on ﬁlter lists as ground
truth to train a ML classiﬁer for detecting ads/trackers. As we
showed in Sections IV-B, ﬁlter lists suffer from inaccuracies
due to both false negatives and false positives. ADGRAPH can
address these inaccuracies in ground truth by gathering valu-
able user feedback when it is deployed at scale. ADGRAPH
can retrain its ML classiﬁer periodically on improved ground
truth as user feedback is received.
Features. The features used by ADGRAPH are manually
designed, based on our domain knowledge and expert intuition,
with the goal of achieving decent accuracy. Note that the
feature set is by no means “complete” and there is room for ad-
ditional feature engineering to further improve accuracy. New
features can be systematically discovered by incorporating user
feedback, which may reveal new characteristics of ads/trackers
over time that are not currently covered by ADGRAPH. New
features may require addition of new instrumentation points
such as JavaScript APIs or new feature modalities altogether,
such as image based perceptual information [28], [60], [61].
Classiﬁcation Granularity. ADGRAPH is currently designed
to make binary decisions to either block or allow network
requests. However, as discussed in Section IV-B, ADGRAPH
is also able to detect cases when a single JavaScript is used
for both ad/tracking and functional content. The cases where
JavaScript code serves dual-purpose are challenging because
blocking the request may break page functionality, while
allowing the request will allow ads/trackers on the page. AD-
GRAPH’s context rich classiﬁcation approach can be adapted
to more than two labels for handling such dual-purpose scripts.
Speciﬁcally, ADGRAPH can be trained at a more granular
level to distinguish between ads/trackers, functional, and dual-
purpose resources. ADGRAPH can respond to such dual-
purpose resources with different remediations than outright
allowing/blocking, such as giving those scripts a reduce set
of DOM capabilities (e.g. reading/writing cookies [14], [63],
access to certain APIs [4], [13]), or blocking network requests
issued from such scripts.
VI. CONCLUSION
In this paper we proposed ADGRAPH, a graph-based ML
approach to ad and tracker blocking. We designed ADGRAPH
to leverage ﬁne-grained interactions between network requests,
DOM elements, and JavaScript code execution to construct a
graph representation that is used to trace relationships between
ads/trackers and the rest of the page content. To implement
ADGRAPH, we instrumented Chromium’s rendering engine
(Blink) and JavaScript execution engine (V8) to efﬁciently
gather complete HTML, HTTP, and JavaScript information
during page load. We leveraged this rich context by extracting
distinguishing features to train a ML classiﬁer for in-browser
ad and tracker blocking at runtime.
We showed that ADGRAPH not only blocks ads/trackers
with 95.33% accuracy but uncovers many ad/tracker and
functional resources that are missed and over-blocked by ﬁlter
lists, respectively. We also showed that ADGRAPH’s breakage
is on par with ﬁlter lists. In addition to high accuracy and
comparable breakage, we showed that ADGRAPH loads pages
much faster as compared to existing content blocking tools.
We designed ADGRAPH to be used both online (for in-
browser blocking) and ofﬂine (ﬁlter list curation). Since the
vast majority of extension-based blocking tools currently rely
on manually curated ﬁler lists, ADGRAPH’s ofﬂine use case
will aid ﬁlter list monitoring and maintenance. Overall, we
believe that ADGRAPH signiﬁcantly advances the state-of-the-
art in ad and tracker blocking.
ACKNOWLEDGMENT
This work is supported in part by the National Science
Foundation under grant numbers 1715152, 1719147, and
1815131.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:17:00 UTC from IEEE Xplore.  Restrictions apply. 
775
REFERENCES
[1] Adblock Plus. https://adblockplus.org/.
[2] Anti-Adblock Killer. https://github.com/reek/anti-adblock-killer.
[3] Blockzilla. https://zpacman.github.io/Blockzilla/.
[4] Brave Browser Fingerprinting Protection Mode.
brave/browser-laptop/wiki/Fingerprinting-Protection-Mode.
https://github.com/
[5] Browserify. http://browserify.org/.
[6] Chromium Blink Rendering
Engine
(Renderer).
https:
//cs.chromium.org/chromium/src/third_party/blink/renderer/.
[7] Chromium V8 JavaScript Engine. https://v8.dev/.
[8] Disconnect . https://disconnect.me/.
[9] EasyList. https://easylist.to/.
[10] EasyPrivacy. https://easylist.to/easylist/easylist.txt.
[11] EFF’s Open Letter to Facebook.
social_networks/openlettertofacebook.pdf.
https://www.eff.org/ﬁles/ﬁlenode/
[12] Fanboy Annoyances List. https://www.fanboy.co.nz/.
[13] Fingerprinting Defenses in The Tor Browser. https://www.torproject.org/
projects/torbrowser/design/#ﬁngerprinting-defenses.
[14] Firefox Storage Access Policy.
https://developer.mozilla.org/en-US/
docs/Mozilla/Firefox/Privacy/Storage_access_policy.
https://developers.google.com/analytics/devguides/
[15] Ghostery. https://www.ghostery.com/.
[16] Google Analytics.
collection/analyticsjs/events.
[17] Google Chrome AdTracker.
https://cs.chromium.org/chromium/
src/third_party/blink/renderer/core/frame/ad_tracker.h?rcl=
fabe78ea42052335674f6cc9c809dd610a8eea29&l=32.
[18] IAB Standard Ad Unit Portfolio.
https://www.iab.com/wp-content/
uploads/2017/08/IABNewAdPortfolio_FINAL_2017.pdf.
[19] Incorrectly Removed Content by Filer Lists. https://forums.lanik.us/
viewforum.php?f=64.
[20] Instart Logic AppShield Ad Integrity.
products/advertising-marketing-recovery.
https://www.instartlogic.com/
[21] Interactive Advertising Bureau. http://www.iab.com/.
[22] JSMin. http://www.crockford.com/javascript/jsmin.html.
[23] PageFair, 2017 Global Adblock Report. https://pagefair.com/downloads/
2017/01/PageFair-2017-Adblock-Report.pdf.
[24] Peter Lowe’s list. http://pgl.yoyo.org/adservers/.
[25] Privacy Badger. https://www.eff.org/privacybadger.
[26] Putting Mobile Ad Blockers to the Test. https://www.nytimes.com/
2015/10/01/technology/personaltech/ad-blockers-mobile-iphone-
browsers.html.
[27] RequireJS. https://requirejs.org/.
[28] Sentinel - The artiﬁcial intelligence ad detector. https://adblock.ai/.
[29] Squid blacklist. http://www.squidblacklist.org/.
[30] UBlock Origin. https://github.com/gorhill/uBlock/.
[31] Warning removal
https://easylist-downloads.adblockplus.org/
list.
antiadblockﬁlters.txt.
[32] Webpack. https://webpack.js.org/.
[33] PageFair 2015 Adblock Report.
blocking-report/, 2015.
https://pagefair.com/blog/2015/ad-
[34] PageFair 2016 Mobile Adblocking Report. https://pagefair.com/blog/
2016/mobile-adblocking-report/, 2016.
[35] ANTHES, G. Data Brokers Are Watching You. Communications of the
ACM (2015).
[36] BAU, J., MAYER, J., PASKOV, H., AND MITCHEL, J. C. A Promising
Direction for Web Tracking Countermeasures. In W2SP (2013).
Ad
[37] BHAGAVATULA, S., DUNN, C., KANICH, C., GUPTA, M., AND
ZIEBART, B. Leveraging Machine Learning to Improve Unwanted
Resource Filtering.
In ACM Workshop on Artiﬁcial Intelligence and
Security (2014).
[38] BREIMAN, L. Random Forests. In Machine learning (2001).
[39] CIMPANU, C.
Ad Network Uses DGA Algorithm to
In-Browser Miners.
Bypass
https://www.bleepingcomputer.com/news/security/ad-network-uses-
dga-algorithm-to-bypass-ad-blockers-and-deploy-in-browser-miners/,
2018.
Blockers
Deploy
[40] CURTSINGER, C., LIVSHITS, B., ZORN, B., AND SEIFERT, C. ZOZ-
In
ZLE: Fast and Precise In-Browser JavaScript Malware Detection.
USENIX Security Symposium (2011).
[41] DOLANJSKI, P. Mozilla Firefox The Path to Enhanced Tracking
Protection. https://blog.mozilla.org/futurereleases/2018/10/23/the-path-
to-enhanced-tracking-protection.
and
[42] ENGLEHARDT, S., AND NARAYANAN, A. Online Tracking: A 1-
million-site Measurement and Analysis. In ACM Conference on Com-
puter and Communications Security (CCS) (2016).
[43] GARIMELLA, K., KOSTAKIS, O., AND MATHIOUDAKIS, M. Ad-
blocking: A Study on Performance, Privacy and Counter-measures. In
WebSci (2017).
[44] GERVAIS, A., FILIOS, A., LENDERS, V., AND CAPKUN, S. Quantifying
Web Adblocker Privacy. In ESORICS (2017).
[45] GUGELMANN, D., HAPPE, M., AGER, B., AND LENDERS, V. An
Automated Approach for Complementing Ad Blockers’ Blacklists. In
Privacy Enhancing Technologies Symposium (PETS) (2015).
[46] IKRAM, M., ASGHAR, H. J., KAAFAR, M. A., MAHANTI, A., AND
KRISHNAMURTHY, B. Towards Seamless Tracking-Free Web: Improved
Detection of Trackers via One-class Learning . In Privacy Enhancing
Technologies Symposium (PETS) (2017).
[47] IQBAL, U., SHAFIQ, Z., AND QIAN, Z. The Ad Wars: Retrospective
Measurement and Analysis of Anti-Adblock Filter Lists. In IMC (2017).
[48] JOHN ROSS QUINLAN. Induction of decision trees.
[49] KAIZER, A. J., AND GUPTA, M. Towards Automatic identiﬁcation of
JavaScript-oriented Machine-Based Tracking. In IWSPA (2016).
[50] KONTAXIS, G., POLYCHRONAKIS, M., KEROMYTIS, A. D., AND
MARKATOS, E. P. Privacy-Preserving Social Plugins. In Usenix Security
Symposium (2012).
[51] LE, H., FALLACE, F., AND BARLET-ROS, P. Towards accurate detection
In IEEE International Workshop on
of obfuscated web tracking.
Measurement and Networking (M&N) (2017).
[52] LERNER, A., SIMPSON, A. K., KOHNO, T., AND ROESNER, F. Internet
Jones and the Raiders of the Lost Trackers: An Archaeological Study
of Web Tracking from 1996 to 2016. In USENIX Security Symposium
(2016).
[53] LI, B., VADREVU, P., LEE, K. H., AND PERDISCI, R.
JSgraph:
Enabling Reconstruction of Web Attacks via Efﬁcient Tracking of
Live In-Browser JavaScript Executions.
In 25th Annual Network and
Distributed System Security Symposium (2018).
[54] MERZDOVNIK, G., HUBER, M., BUHOV, D., NIKIFORAKIS, N., NE-
UNER, S., SCHMIEDECKER, M., AND WEIPPL, E. Block Me If You
Can: A Large-Scale Study of Tracker-Blocking Tools. In IEEE European
Symposium on Security and Privacy (2017).
[55] NICK NIKIFORAKIS AND WOUTER JOOSEN AND BENJAMIN
LIVSHITS. PriVaricator: Deceiving Fingerprinters with Little White
Lies. In WWW (2015).
[56] PUJOL, E., HOHLFELD, O., AND FELDMANN, A. Annoyed Users:
Ads and Ad-Block Usage in the Wild. In ACM Internet Measurement
Conference (IMC) (2015).
[57] RAMASWAMY, S.
Building
a
better web
for
everyone.
https://www.blog.google/topics/journalism-news/building-better-
web-everyone/, 2017.
[58] SHUBA, A., MARKOPOULOU, A., AND SHAFIQ, Z. NoMoAds: Effec-
tive and Efﬁcient Cross-App Mobile Ad-Blocking. In Privacy Enhancing
Technologies Symposium (PETS) (2018).
[59] SNYDER, P., TAYLOR, C., AND KANICH, C. Most websites don’t need
to vibrate: A cost-beneﬁt approach to improving browser security.
In
Proceedings of the 2017 ACM SIGSAC Conference on Computer and
Communications Security (2017), ACM, pp. 179–194.
[60] STOREY, G., REISMAN, D., MAYER, J., AND NARAYANAN, A. The
Future of Ad Blocking: An Analytical Framework and New Techniques.
In arXiv:1705.08568 (2017).
[61] TRAMER, F., DUPRE, P., RUSAK, G., PELLEGRINO, G., AND
In
BONEH, D. Ad-versarial: Defeating Perceptual Ad-Blocking.
arXiv:1811.03194 (2018).
[62] VASTEL, A., SNYDER, P., AND LIVSHITS, B. Who Filters the Filters:
Understanding the Growth, Usefulness and Efﬁciency of Crowdsourced
AdBlocking. In arXiv:1810.09160 (2018).
[63] WILANDER, J. Apple Safari Intelligent Tracking Prevention. https:
//webkit.org/blog/8311/intelligent-tracking-prevention-2-0/, 2018.
[64] WU, Q., LIU, Q., ZHANG, Y., LIU, P., AND WEN, G. A Machine
Learning Approach for Detecting Third-Party Trackers on the Web. In
ESORICS (2016).
[65] YU, Z., MACBETH, S., MODI, K., AND PUJOL, J. M. Tracking the
Trackers. In World Wide Web (WWW) Conference (2016).
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:17:00 UTC from IEEE Xplore.  Restrictions apply. 
776