title:LiS: Lightweight Signature Schemes for Continuous Message Authentication
in Cyber-Physical Systems
author:Zheng Yang and
Chenglu Jin and
Yangguang Tian and
Junyu Lai and
Jianying Zhou
LiS: Lightweight Signature Schemes for Continuous Message
Authentication in Cyber-Physical Systems
Zheng Yang
Singapore University of Technology
and Design
PI:EMAIL
Chenglu Jin
New York University
PI:EMAIL
Yangguang Tian
Singapore Management University
PI:EMAIL
University of Electronic Science and
Singapore University of Technology
Junyu Lai
Technology of China
PI:EMAIL
Jianying Zhou
and Design
PI:EMAIL
ABSTRACT
Cyber-Physical Systems (CPS) provide the foundation of our criti-
cal infrastructures, which form the basis of emerging and future
smart services and improve our quality of life in many areas. In
such CPS, sensor data is transmitted over the network to the con-
troller, which will make real-time control decisions according to
the received sensor data. Due to the existence of spoofing attacks
(more specifically to CPS, false data injection attacks), one has to
protect the authenticity and integrity of the transmitted data. For
example, a digital signature can be used to solve this issue. However,
the resource-constrained field devices like sensors cannot afford
conventional signature computation. Thus, we have to seek for an
efficient signature mechanism that can support the fast and contin-
uous message authentication in CPS, while being easy to compute
on the devices.
To this end, we introduce two Lightweight Signature schemes
(LiS), which are suitable for continuous message authentication
commonly seen in cyber-physical systems. In our constructions,
we exploit the efficient hash collision generation property of a
chameleon hash function to transform a chameleon hash function
into signature schemes. In our schemes, the signature of a message
m is the randomness r associated with m in a chameleon hash
function, such that they can lead to a hash collision with a given
message randomness pair (m′, r′). Thus, the task of a signer is
to generate the collision using the private key of the underlying
chameleon hash function, and a verifier can verify the signature by
checking the hash collision with a known message and randomness
pair.
We also specifically instantiate the chameleon hash function
in such a way that it leads to a fast signing procedure and an
optimal storage requirement on the signer side. The optimized
signing algorithms are very efficient. Namely, our first scheme
requires only three additions and two multiplications, and only one
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
ASIA CCS ’20, October 5–9, 2020, Taipei, Taiwan
© 2020 Association for Computing Machinery.
ACM ISBN 978-1-4503-6750-9/20/10...$15.00
https://doi.org/10.1145/3320269.3372195
additional hash is needed in the second scheme to resist adaptive
chosen message attacks. In addition, the size of the signing key in
our schemes is a small constant-sized bit string, which well fits CPS
applications.
CCS CONCEPTS
• Security and privacy → Digital signatures; Key management;
Distributed systems security.
KEYWORDS
Digital Signature; Chameleon Hash; Continuous Message Authen-
tication; Bloom Filter
ACM Reference Format:
Zheng Yang, Chenglu Jin, Yangguang Tian, Junyu Lai, and Jianying Zhou.
2020. LiS: Lightweight Signature Schemes for Continuous Message Au-
thentication in Cyber-Physical Systems. In 15th ACM Asia Conference on
Computer and Communications Security (ASIA CCS’20), October 5–9, 2020,
Taipei, Taiwan. ACM, New York, NY, USA, 13 pages. https://doi.org/10.1145/
3320269.3372195
1 INTRODUCTION
Cyber-Physical Systems (CPS) integrate various cyber computation,
physical devices, and networking technology to control physical
processes through data exchange in real-time. The emerging CPS is
expected to encompass every aspect of our lives, which generates a
paradigm shift towards a hyper-connected society. Up to now, CPS
devices are widely used in navigation systems, smart grid, smart
city application domains. However, due to the limitation in both
computation and storage, many modern cryptographic schemes
cannot run on CPS devices, which results in serious security and
privacy issues [1–3].
Thus, it is notoriously important to ensure that the data that
comes from CPS devices has not been changed by attackers [4, 5].
A natural solution to protect the authenticity and integrity of a
message is to use a message authentication code (MAC). It allows
the verifier (who possess a shared key with the message sender) to
detect any change to the message content [6]. However, MAC has
a potential security risk: when the key stored on the verifiers gets
leaked, all the future message authentication codes will possibly
be compromised. Notice that, in more physically isolated CPS, like
nuclear plants and manufacturing systems, the verifiers (servers),
Session 14: CPS Security ASIA CCS ’20, October 5–9, 2020, Taipei, Taiwan719are actually more vulnerable to cyber attacks than CPS devices.
This is because they are connected to enterprise networks or even
the Internet. For example, the famous Stuxnet worm compromised
the engineering workstations first in Iranian nuclear plants before
it got a footprint in the controller systems [1].
Another standard solution is to use cryptographic digital signa-
tures, which allow receivers to verify the origin of a message using
a ‘public’ key so that it can be secure in a verifier breach. Although
there are many online efficient (computationally secure) digital
signature schemes, such as ElGamal signature [7] and Schnorr
signature [8, 9], they require expensive cryptographic operations
like modular exponentiation which is too complex for resource-
constrained CPS devices.
To make a digital signature scheme deployable on constrained de-
vices, Even et al. proposed an online/offline signature paradigm [10].
The idea is to use a trusted and powerful server to pre-compute
some expensive operations in an offline phase, so the signer does
not need to compute complex operations, but the signer needs to
securely store a large number of private intermediate values D
generated by the server, and the size of D has a linear relation with
the number of signatures to be signed [10].
It is suggested in [11–13] that the offline phase for computing D
can be carried out either during the device manufacturing process
or by the device itself as a background computation. However,
none of these two ways of generating D is perfect in CPS. The
first solution requires a large amount of storage overhead on the
device (e.g., 97MB for seven-day usage with a message rate at 1
second per message [12, Schnorr]), but it is generally infeasible on
CPS devices. Although some sorts of replenishment of D might be
possible, it may interrupt the normal operation and communication
of the CPS devices, which need to keep sending data measured
in real-time. The second solution demands a lot of computational
power and idle time on the device side. However, the CPS devices
keep generating data at a fast pace, so there is no enough idle time
for it to compute these operations in the background. For example,
in an automatic identification system used on ships [14], each time
slot for sending a message is just 26.66 milliseconds, which is too
short for an exponentiation operation on an embedded device.
In this work, we are specifically motivated to design signature
schemes that can be efficiently used in CPS for continuous message
authentication. In particular, we introduce signature schemes that
are optimized for the signer, in terms of both computation over-
head and storage overhead, and the signer only needs to store a
constant-sized signing key which does not need to be replenished
for continuous and uninterrupted message authentication.
Our Work. Our construction leverages on a chameleon hash func-
tion [15] and a pre-computation strategy to shift the ‘burdens’ of
computation and storage from a signer to verifiers and possibly a
trusted third-party server. It is worth noting that the verifiers in
CPS are servers that have enough computation power and have
storage. Recall that, given a message and randomness pair (m′, r′),
a chameleon hash function CHF allows one to use its secret key sk
to efficiently compute a collision r for a message m (cid:44) m′ such that
CHF(m, r) = CHF(m′, r′). The general idea is to utilize a trusted
server to take as inputs a set of dummy message/randomness pair
i , r′
(m′
i) (for 1 ≤ i ≤ ℓ) and pre-compute the chameleon hash values
which will be used as a part of the verification key vk, where ℓ is
the maximum number of signatures can be verified by vk. For the
online signature generation, the signer only needs to compute the
collision ri as the signature of mi based on a used dummy random
r′
.
i
In order to further optimize the signing algorithm for the resource-
constrained signers, we propose to fix all dummy message m′
as a
i
constant M, and use a universal hash function UHF to chain up all
dummy randomness, i.e., r′
i−1) for 1 ≤ i ≤ ℓ, and r0 is
i
chosen randomly, where k is a random hash key of UHF. As a result,
the signer only needs to store a few hundreds of bits (sk, sk·M, r′
0, k)
for signing. Also, we applied some arithmetic tricks in our instantia-
tion of the chameleon hash function [15], which successfully saves
one big-number modular division in the signing algorithm. After
our extensive optimization, only three modular additions and two
modular multiplications are needed to generate one signature in our
first protocol LiS1. One additional hash computation is required in
the second protocol LiS2.
= UHF(k, r′
However, in the above naïve construction, the size of the verifi-
cation key is dominated by the pre-computed hash values. If the vk
can support the verification of many signatures (i.e., ℓ is large), then
vk may get very large too. To reduce the size of vk, we propose
to use a Bloom filter [16] to compress vk. For certain applications
that can tolerate small errors, such as Globe Positioning System
(GPS), we can even allow a relatively large false-positive rate for
the Bloom filter.
Nevertheless, the verification key of our schemes will still be
used up after ℓ signatures. We further develop two verification
key replenishment solutions to enable unlimited signing capability.
Notice that the chameleon hash keys (both secret and public key)
do not need to be changed after a verification key update, so the
signer can keep signing messages without being interrupted. In an
update of vk, the verifiers need to get a new set of authenticated
chameleon hash values for future verification. Our first verification
key replenishment approach is to outsource the computation of the
new chameleon hash values to a trusted server, which periodically
computes the chameleon hash values based on the dummy message
M and the dummy randomness r′ and publishes them to a bulletin
(where verifiers have access) together with a signature of the server.
Moreover, the second verification key replenishment solution can
be used when all the verifiers are honest (and not controlled by
attackers). For instance, in industrial control systems, the verifier
can be a server located in an isolated control center, which is trusted
by all signer (i.e., the client devices). In this case, one can let the
verifier have the dummy message M and dummy randomness r′, so
it can generate the verification key on the fly during the verification
procedure. We specifically customized a verification algorithm for
this scenario. Notice that even if the dummy message/randomness
pairs (M, r′
i) are leaked to an adversary, he still cannot forge a valid
signature without knowing the secret signing key.
Contributions. We made the following contributions in our paper:
(1) We propose two lightweight signature schemes LiS with an
optimized signing algorithm in terms of both computation
and storage. Our first protocol LiS1 is designed to sign small
messages and to provide security guarantee against weak
chosen message attacks, so it is suitable for the applications
Session 14: CPS Security ASIA CCS ’20, October 5–9, 2020, Taipei, Taiwan720(such as GPS), which have an untamperable data source. We
extend our first protocol to the second one LiS2 by adding a
hash function, which is modeled as a random oracle, to not
only sign large messages, but also achieve adaptive security.
(2) We instantiate and optimize the proposed algorithms. As a
result, the signing algorithm of LiS1 requires three additions
and two multiplications, and one more hash is needed in
LiS2.
(3) We propose two verification key replenishment solutions
based on different assumptions of the verifiers. New verifi-
cation algorithms are designed for honest verifiers.
(4) We show the security results of our schemes with formal
security proofs. LiS1 and LiS2 are proved in the standard
model and the random oracle model, respectively.
(5) We implement our signature schemes and evaluate the per-
formance experimentally. Our results show that they are
efficient for continuous message authentication in CPS.
Organization. We introduce necessary preliminaries that will be
used frequently in the rest of the paper in Section 2. Section 3
presents a signature framework with two concrete signature schemes
based on chameleon hash functions. The security of the proposed
schemes is analyzed in Section 4. We show instantiations and opti-
mizations in Section 5. Section 6 presents two verification key re-
plenishment solutions. Some candidate applications of our schemes
in cyber-psychical systems are discussed in Section 7. Performance
analysis and evaluation results are presented in Section 8. In Section
9, we review the literature related to our work. The paper concludes
in Section 10.
2 PRELIMINARIES
Here we briefly review the notions and cryptographic primitives
that our constructions rely on.
We denote with κ the security parameter, ∅ an empty string, and
with [n] = {1, . . . , n} ⊂ N the set of integers between 1 and n. If X
$← X denotes the action of sampling a uniformly
is a set, then x
random element from X. If X is a probabilistic algorithm, then
$← X denotes that X is run with fresh random coins and returns
x
x. Let ∥ be an operation to concatenate two strings, | · | be an
operation to get the bit-length of a variable, and # be an operation
to get the number of elements in a set.
2.1 Universal Hash Functions
A universal hash function (UH) family [17]: KUH × MUH → RUH,
refers to a family of hash functions which guarantees a low number
of collisions in expectation even, where KUH, MUH and RUH be
key, message and output space of UH, respectively. These spaces
are determined by the security parameter κ.
Definition 2.1. We say that a set of hash functions UH is univer-
sal hash function family if: i) we uniformly choose a hash func-
tion UHF ∈ UH by sampling a random hash key k
$← KUH,
ii) and ∀(x, y) ∈ MUH we have the probability Pr[UHF(k, x) =
UHF(k, y)] ≤
1
.
#MUH
2.2 Chameleon Hash Functions
An important cryptographic primitive that we will use is chameleon
hash function [15]. A chameleon hash function CH(pk,·,·) : PKCH×
MCH × RCH → YCH is associated with a pair of public key
pk ∈ PKCH and private key sk ∈ SKCH, where (PKCH,SKCH)
are public and private key spaces, respectively, MCH is the message
space, RCH is the randomness space and YCH is the output space.
These public/secret key pairs are generated by a PPT algorithm
(pk, sk)
$← CHKGen(1κ). If the key is clear from the context, we
will write CH(m, r) for CH(pk, m, r).
A hash value generated by CH(m, r) on input a message m and
a random string r satisfies the following properties:
• Collision resistance. There is no efficient algorithm that on
input the public key pk can output two pairs (m1, r1) and
(m2, r2) such that m1 (cid:44) m2 and CH(m1, r1) = CH(m2, r2),
except with negligible probability in the security parameter
κ.
• Trapdoor collisions. There exists an efficient determinis-
tic algorithm CHColl that on input the secret key sk, and
(r , m, m′) ∈ RCH × MCH × MCH, outputs a value r′ ∈ RCH
such that CH(pk, m, r) = CH(pk, m′, r′).
• Uniformity. For an arbitrary public key pk output by CHKGen,
all messages m ∈ MCH generate equally distributed hash val-
ues CH(m, r) when drawing r
$← RCH uniformly at random.
This property ensures that a third party is unable to examine
the value hash from deducing any information about the
hashed message.
Given an adversary A and a chameleon function CHF, the CH
security game GCHA,CHF(κ) is defined in Figure 1.
If (m, m′) ∈ MCH
(r, r′) ∈ RCH m (cid:44) m′
Proc.Init() :
(sk, pk) $← CHKGen(1κ)
OUTPUT pk
Proc.Finalize(m, m′, r, r′) :