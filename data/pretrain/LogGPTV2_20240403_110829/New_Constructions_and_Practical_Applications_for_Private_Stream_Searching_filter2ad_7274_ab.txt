 100
 80
 60
 40
 20
 0
 0
 500
original files
size in previous system
 200
 100
expected number of matching documents
 300
 400
 500
Figure 2. Server to client communication af-
ter a period of searching in the new system.
Figure 3. Server to client communication af-
ter a period of searching in Ostrovsky-Skeith.
proportionally (e.g., |K| = 2 would double the value
of sq). It should be apparent that this is a signiﬁcant
cost; in fact, it turns out that sq is the most signiﬁcant
component in the total resource usage of the system
under typical circumstances.
Two measures may be taken to reduce this cost.
First, note that the majority of distinct words occur-
ring in the text of a news article are common English
words that are not likely to be useful search terms.
Given this observation, the client may specify that
the server should ignore the most commonly occurring
words when processing each ﬁle. A cursory review of
the 3000 most common English words (based on data
from the British National Corpus [13]) conﬁrms that
none are likely to be useful search terms.
Ignoring
those words reduces the average distinct word count
in a news article to about 200.
The second consideration in reducing sq is that a
smaller Paillier key may be acceptable. While 1024 bits
is generally accepted to be the minimum public modu-
lus secure for a moderate time frame (e.g., as required
by the standards ANSI X9.30, X9.31, X9.42, and X9.44
and FIPS 186-2) [14], it is important to realize that a
compromise of the Paillier key would not immediately
result in the revelation of K. Instead, it would allow
the adversary to mount a dictionary attack, checking
potential members of K against Q. Since a string not
in K that is checked against Q will match anyway with
probability
, an attacker may also need some prior
knowledge about potential search terms if they are to
gain useful information about K. Without any such
knowledge, checking a very large set of potential words
against Q would result in too many false positives to be
useful. Given this consideration, if the client decides
a smaller key length is acceptable, sq will be reduced.
The third column in Table 1 gives the size of the en-
crypted query using a 768-bit key and pruning out the
|K|
(cid:2)Q
3000 most common English words from those searched.
Despite the signiﬁcant cost of sq in our system, the
cost to obtain a comparable level of security is likely
much greater in the system of Ostrovsky and Skeith.
In that case sq = 256|D|, where |D| is the set of all
possible keywords that could be searched. In order to
reasonably hide K ⊆ D, |D| may have to be quite large.
For example, if we wish to include names of persons in
K, in order to keep them suﬃciently hidden we must
include many names with them in D. If D consists of
names from the U.S. population alone, sq will be over
70 GB.
4.2 Storage Buﬀers Space
We now turn to the size of the buﬀers maintained by
the server during the search and then sent back to the
client. This cost, sb, is both a storage requirement of
the server conducting the search and a communication
requirement at the end of the search. Let the length of
the main data buﬀer maintained by the server be (cid:4)D,
the length of the two metadata buﬀers (taken together)
be (cid:4)M , and the length of a ﬁle be (cid:4)f (measured as the
required number of plaintexts from Zn). The server
then stores sb = 256 (cid:4)D(cid:4)f +256 (cid:4)M bytes (using a 1024-
bit key).
The client will specify (cid:4)D and (cid:4)M based on the num-
ber of documents they expect their search to match in
one period and the desired correctness guarantees. In
the case of Google news, we may estimate that each
of the 4,500 crawled news sources produces an aver-
age of 30 articles per day [1].
If the client retrieves
the current search results four times per day, then the
number of ﬁles processed in each period is t = 33, 750.
Now the client cannot know ahead of time how many
articles will match their query, so they must make an
estimate of m. Based on this estimate, they may try
increasing (cid:4)D and (cid:4)M until the probability of an over-
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:47:12 UTC from IEEE Xplore.  Restrictions apply. 
time to
multiply
3.9 μs
6.3 μs
time to
exponentiate
6.2 ms
14.7 ms
768-bit key
1024-bit key
Table 2. Benchmarks for arithmetic in Z
∗
n2.
ﬂow is bounded by some small . A detailed analysis
demonstrating values of (cid:4)D and (cid:4)M that achieve this
appears in [2].
In this extended abstract we instead
consider empirical results on the necessary (cid:4)D and (cid:4)M
in a particular application.
A range of desired values of m were considered and
the results are displayed in Figure 2.
In each case,
(cid:4)D and (cid:4)M were selected so that the probability of an
overﬂow is less than 0.01. Also, the spurious match
rate r was taken to be 0.001, and the news articles were
considered to be 5 KB in size (text only, compressed).
Note that sb is linear with respect to the size of the
matching ﬁles. More speciﬁcally, the data displayed in
Figure 2 reveals that it is about 2.4 times the size of the
matching ﬁles. For comparison, the space stored by the
server and returned to the client using the Ostrovsky-
Skeith scheme for private searching in this scenario is
shown in Figure 3.1 Note that the graph diﬀers in scale
from Figure 2.
To summarize, in the proposed system sb ranges
from about 564 KB to about 6.63 MB when the ex-
pected number of matching ﬁles ranges from 2 to
512 and the overﬂow rate is held below 0.01. In the
Ostrovsky-Skeith scheme, sb would range from about
282 KB to 110 MB.
4.3 File Stream Processing Time
Next we consider the time tp necessary for the server
to process each ﬁle in its stream. This is essentially
determined by the time necessary for modular multi-
∗
∗
plications in Z
n2 and modular exponentiations in Z
n2
with exponents in Zn. To roughly estimate these times,
benchmarks were run on a modern workstation. The
processor was a 64-bit, 3.2 Ghz Pentium 4. We used the
GNU Multiple Precision Arithmetic Library (GMP), a
library for arbitrary precision arithmetic that is suit-
able for cryptographic applications. The results are
given in Table 2.
The ﬁrst step carried out for in processing the ith
ﬁle in the StreamSearch procedure is computing E (c);
this takes |Wi| − 1 multiplications. We again use
1The paper describing this system did not explicitly state a
minimum buﬀer length for a given number of ﬁles expected to be
retrieved and a desired probability of success, but instead gave a
loose upper bound on the length. Rather than using the bound,
we ran a series of simulations to determine exactly how small the
buﬀer could be made while maintaining an overﬂow rate below
0.05.
tp with
m 768-bit key
359 ms
2
362 ms
8
32
373 ms
420 ms
128
593 ms
512
tp with
1024-bit key
600 ms
600 ms
603 ms
617 ms
669 ms
Table 3. The time necessary for the server to
process a ﬁle.
|Wi| = 540 as described in Section 4.1. Computing
E (cfi) requires (cid:4)f modular exponentiations. The next
step is updating the main data buﬀer and metadata
buﬀers with these values. Although we have not given
the details of this algorithm, it requires approximately
(cid:2)D(cid:2)f
2 modular multiplications. The time necessary for
both these steps is given for several values of m in Ta-
ble 3. The majority of tp is due to the (cid:4)f modular
exponentiations. Since the Ostrovsky-Skeith scheme
requires the same number of modular exponentiations,
the processing time for each ﬁle would be similar.
4.4 File Recovery Time
Finally, we consider the time necessary for the client
to recover the original matching ﬁles after a period
of searching, tr. This time is composed of the time
to decrypt the returned buﬀers and the time to setup
and solve a system of linear equations, producing the
matching documents. A decryption requires 1536 mod-
ular multiplications with a 1024-bit key and 1152 with
a 768-bit key [12]. The times necessary to decrypt the
buﬀers are given in Table 4. This time is typically less
than a minute, but can take as long as ﬁve with many
ﬁles.
The time to setup and solve the system of linear
equations is dominated by the time necessary to invert
Inverting an n × n matrix
two matrices of size (cid:4)D.
through Gaussian elimination requires 1
n
3
multiplications; this could likely be improved with
sparse matrix techniques. As shown in Table 5, the
time for matrix inversions is small for all but the largest
cases.
n3 + n2 − 1
3
Although the time spent in matrix inversions is
a signiﬁcant additional cost of the new scheme over
Ostrovsky-Skeith,
it is more than oﬀset by the re-
duced buﬀer size.
In Ostrovsky-Skeith, the times to
decrypt the buﬀer returned to the client in this scenario
range from 6.79 seconds for m = 2 to 45.5 minutes for
m = 512, using a 768-bit key. With a 1024-bit key,
the buﬀer decryption times range from 10.8 seconds to
1.21 hours.
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:47:12 UTC from IEEE Xplore.  Restrictions apply. 
decryption time
decryption time
m with 768-bit key with 1024-bit key
23s
2
26s
8
32
38s
1.4m
128
4.4m
512
14s
15s
23s
51s
2.7m
inversion time
inversion time
m with 768-bit key with 1024-bit key
0.2 s
2
0.3 s
8
32
1.3 s
0.3 m
128
11.5 m
512
0.1 s
0.2 s
0.8 s
0.2 m
7.1 m
Table 4. Time (in seconds and minutes) nec-
essary to decrypt the buffers.
Table 5. Time (in seconds and minutes) nec-
essary to invert the matrices.
5 Conclusion
Our system for private stream searching allows a
range of applications not previously practical. In par-
ticular, we have considered the case of conducting a
private search on essentially all news articles on the
web as they are generated, estimating this number to
be 135,000 articles per day. In order to establish the
private search, the client has a one time cost of ap-
proximately 10 MB to 100 MB in upload bandwidth,
based on various tradeoﬀs. Several times per day they
download about 500 KB to 7 MB of new search results,
allowing up to about 500 articles per time interval. Af-
ter receiving the encrypted results, the client spends
under a minute recovering the original ﬁles, or up to
about 15 minutes if many ﬁles were retrieved. This per-
formance would be typical of a desktop PC; a mobile
device would be capable of handling a somewhat less
demanding scenario. To provide the searching service,
the server keeps about 10 MB to 100 MB of storage for
the client and spends roughly 500 ms processing each
new article it encounters. These costs are comparable
to many free services currently available on the web
(e.g., email and webhosting), so it is likely the private
searching service could be provided for free. With high
probability, the client will successfully obtain all arti-
cles matching their query, and in any case the server
will remain provably oblivious to nature of their search.
Most of the parameters of this scenario (e.g., the
number of distinct articles generated per day, the num-
ber of distinct words per ﬁle, the size of a ﬁle, etc.)
are probably less than one or two orders of magnitude
diﬀerent than for the other online searching situations
mentioned in Section 1 (such as blog posts, USENET,
online auctions). We expect our techniques to be ap-
plicable to many of these searching applications. The
complete algorithms for the private searching scheme
are presented along with complexity analysis and for-
mal security proofs in [2].
References
[1] The Google news alerts service. Information available
at http://www.google.com/alerts.
[2] John Bethencourt, Dawn Song, and Brent Waters.
New techniques for private stream searching. Technical
Report CMU-CS-06-106, Carnegie Mellon University,
March 2006.
[3] Dawn Xiaodong Song, David Wagner, and Adrian Per-
rig. Practical techniques for searches on encrypted
data. In IEEE Symposium on Security and Privacy,
pages 44–55, 2000.
[4] Boneh, Di Crescenzo, Ostrovsky, and Persiano. Public
In Eurocrypt,
key encryption with keyword search.
2004.
[5] Eyal Kushilevitz and Rafail Ostrovsky. Replication is
not needed: Single database, computationally-private
information retrieval. In Foundations of Computer Sci-
ence (FOCS), pages 364–373, 1997.
[6] Yan-Cheng Chang. Single database private informa-
tion retrieval with logarithmic communication. In In-
formation Security and Privacy (ACISP), 2004.
[7] Kaoru Kurosawa and Wakaha Ogata. Oblivious key-
word search. Journal of Complexity, 20, 2004.
[8] Freedman, Ishai, Pinkas, and Reingold. Keyword
search and oblivious pseudorandom functions. In The-
ory of Cryptography Conference (TCC), volume 2,
2005.
[9] Helger Lipmaa. An oblivious transfer protocol with
log-squared communication. pages 314–328, 2005.
[10] Rafail Ostrovsky and William Skeith. Private search-
ing on streaming data. August 2005.
[11] Pascal Paillier. Public-key cryptosystems based on
In Eurocrypt,
composite degree residuosity classes.
pages 223–238, 1999.
[12] Ivan Damg˚ard and Mats Jurik. A generalisation, a
simpliﬁcation and some applications of Paillier’s prob-
abilistic public-key system. In Public Key Cryptogra-
phy, pages 119–136, 2001.
[13] The British national corpus. Oxford University Com-
puting Services. Information available at
http://www.natcorp.ox.ac.uk.
[14] Robert Silverman. A cost-based security analysis of
symmetric and asymmetric key lengths. Technical re-
port, RSA Laboratories, November 2001.
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:47:12 UTC from IEEE Xplore.  Restrictions apply.