它们关注建筑中某些方面的适当细节，而忽略其他的内容。
874
---
## Page 876
当客户和建筑师在这些抽象上达成一致意见之后，建筑师会准备或
监督准备更为详细的图纸，以及相关的文字规格说明。这些图纸和
规格说明描述了建筑的许多“实质性”细节，如管道、壁板材料、窗
户玻璃和电线等。
在极少的情况下，建筑师简单地将详细规划交给建造者，建造者将
根据规划完成项目。对更重要一些的项目，建筑师会继续参与，定
期检查工作，并且可能会建议变更，或接受来自建造者和客户的变
更建议。如果建筑师监督项目，仅当他确认项目充分符合了规划和
规格说明的要求，项目才算完工。
我们请一名建筑师是为了确保：1）设计满足客户的需要，包括前
面提到的那些特征；2）设计具有概念完整性，处处运用了相同的
设计原则：3）设计满足法规和安全的要求。建筑师职责的一个重
要方面是确保设计概念在实现时得到一致的体现。有时候，建筑师
也充当建造者和客户之间的协调人。哪些决定需要由建筑师做出，
哪些决定由其他人做出，人们对这个问题常有不同意见，但我们清
楚，建筑师将做出重要决定，包括所有对结构的可用性、安全性和
可维护性产生影响的那些决定。
音乐作曲与软件架构
虽然人们常用建筑架构设计来类比软件架构，但音乐作曲可能是更
好的类比。建筑师创建的是相对静止的结构（该架构必须考虑到人
员和服务在建筑内的移动，以及承重结构）的静态描述（蓝图或其
他图纸）。在音乐作曲和软件设计中，作曲家（软件架构师）创建
一段音乐的静态描述（架构描述和代码），这段音乐以后将演奏
（执行）许多次。在音乐和软件中，设计都依靠许多组件的交互来
得到期望的结果，结果依赖于演奏者、演奏环境，以及演奏者所做
的诠释。
1.1.2软件架构师的角色
软件开发项目需要一些人在软件构建时扮演架构师的角色，就像构
建或修复建筑时传统的建筑师的角色一样。但是，对于软件系统来
说，从来就弄不清楚哪些决定属于架构师的职责范围，哪些决定要
留给实现者。定义架构师在软件项目中做什么，比建筑师的类似定
义更困滩，原因有3个因素：缺少传统、产品无形性和系统复杂
875
---
## Page 877
性。（参见Grinter[1999]，其中描述了软件架构师如何在一个大型
软件开发组织中实现她的职责。）具体来说：
建筑师可以回顾几千年的历史，看看过去的建筑师都做过些什么。
他们可以参观并研究那些赢立了几百年的建筑，有时甚至有上千年
历史的建筑，而它们仍在使用。在软件业，我们只有几十年的历
史，并且我们的设计常常是不公开的。此外，建筑师拥有并利用标
准来描述他们制作的图纸和规格说明，这让现在的建筑师能够从记
录下来的架构历史中受益。
建筑是有形的产品，在建筑师制作的规划和工人修造的建筑之间存
在着明显的区别。
架构复用
圣索菲亚大教堂（HagiaSophia，上图），建造于公元6世纪，率先
之美的代表。在l100年之后，ChristopherWren使用了同样的设计来
建造圣保罗大教堂的穹顶（St.Paul'sCathedral，下图），它成为伦
教的地标性建筑。这两座建筑在今天仍在使用。
876
---
## Page 878
在大的软件项目中，常常会有许多架构师。某些架构师相当专注于
特定领域，如数据库和网络，他们一般作为团队的一部分，但目前
我们假定只有唯一一位架构师。
1.1.3软件架构的含义
如果认为“架构”是一个简单的实体，能够用一份文档或一张图纸来
描述，那就错了。架构师必须做出许多设计决定。要想有用，这些
决定必须用文档记录下来，这样就能够进行复审、讨论、修改和批
准，然后作为后续决定和构建时的约束。对于软件系统，这些设计
决定包括行为上的和结构上的。
外部行为描述展示了产品如何与它的用户、其他系统和外部设备进
行交互，这应该表现为需求。结构描述展示了产品如何划分为多个
部分，以及这些部分之间的关系。我们还需要内部行为描述，用于
描述组件之间的交互接口。结构上的描述常常展示相同部分的一些
不同视图，因为不可能把所有信息以有意义的方式组织到一张图纸
或一份文档中。一个视图中的组件，可能是另一个视图中一个组件
的一个部分。
软件架构常常表现为分层的层次结构，这种层次结构将几种不同的
结构放在一张图中。20世纪70年代，Parnas指出“层次结构"这个术
语已经被滥用，然后精确地定义了它，并给出了几个不同结构的例
子，它们在设计不同系统时实现了不同的目的（Parnas1974）。将
架构的结构描述为一组视图（view），每个视图关注不同的部分，
现在已成为了广泛接受的标准架构实践（Clements等2003；IEEE
2000）。我们将使用“架构"这个词来代指一组有标注的图纸和功能
描述，它说明了设计和构建一个系统时所使用的结构。在软件开发
877
---
## Page 879
社区中，针对这样的图纸和描述，人们使用并建议了许多不同的形
式。在Hoffman和Weiss（2000，第14章和第16章）的著作中可以看
到一些例子。
包含软件元素、这些元素的外部可见的属性，以及元素之间的关
系。
“外部可见"的属性是其他元素对该元素可以做出的假定，诸如它提
供的服务、执行时的特征、错误处理、共享资源的使用等。
LenBass、Paul ClementsIRick Kazman《Software Architecture in
Practice,SecondEdition)
1.1.4架构与设计
架构是系统设计的一部分，它突出了某些细节，并通过抽象省略掉
另一些细节。所以，架构是设计的一个子集。关注实现系统组件的
开发者可能不会特别关心所有组件如何装配在一起，而是主要关注
少数组件的设计和开发，包括他们必须遵守的架构约束和可以应用
的规则。因此，并发者和架构师面对的是系统设计的不同方面。
如果说架构关注的是组件之间的关系和系统组件外部可见的属性，
那么设计还要关注这些组件的内部结构。例如，如果一组组件包含
了一些信息隐藏的模块，那么这些外部司见的属性就构成了这些组
件的接口，内部的结构与模块内的数据结构和控制流一同考虑
（Hoffiman和Weiss2000，第7章和第16章）。
1.2创建软件架构
到自前为止，我们已经讨论了一般意义上的架构，并分析了软件架
构与其他领域的架构之间有何相似与差异。接下来我们将注意力转
到“如何”设计软件架构。当架构师创建软件系统的架构时，她应该
关注什么？
软件架构师的首要关注点不是系统的功能。
这是正确的一软件架构师的首要关注点不是系统的功能。
878
---
## Page 880
例如，如果我们请你来设计一个“基于Web的应用”，你首先问我们
页面布局和导航树，还是问下面这些问题：
谁提供应用主机托管？托管的环境有什么技术限制吗？
你想运行在Windows服务器上还是在LAMP栈上？
你想支持多少并发用户？
应用需要怎样的安全性？有需要保护的数据吗？应用将运行在公网
上还是在私有的内部网上？
你能为这些答案排列优先级吗？例如，用户数是否比响应时间更重
要？
根据我们对这些问题和一些其他问题的回答，你就可以并始画出系
统架构的草图。我们还没有谈到应用的功能。
好吧，我们承认要了点计谋，因为我们问的是“基于Web的应用”，
这是一个大家熟悉的领域，所以你已经知道了哪些决定会对你的架
构产生最大的影响。类似地，如果我们问的是一个电信系统或一个
航空电子控制系统，在这些领域有经验的架构师将考虑到一些功能
需求。但是，你仍然可以不必过多担心功能就并始设计架构。你关
注的是需要满足的品质。
品质关注点指明了功能必须以何种方式交付，才能被系统的利益相
关人所接受，系统的结果包含这些人的既定利益。利益相关人有一
些关注点，架构师必须重视。稍后，我们将讨论为了确保系统具有
要求的品质，通常会提出的一些关注点。正如我们前面所说的，架
构师的一项职责是确保系统设计能满足客户的需要，我们将利用品
质关注点来帮助我们理解这些需要。
这个例子突出了成功架构师的两项关键实践：让利益相关人参与以
及同时关注功能和品质。作为一名架构师，你首先问我们想从系统
中得到什么，有怎样的优先级。在实际项目中，你会找出其他的利
益相关人。典型的利益相关人和他们的关注点包括：
投资人，他们想知道项目是否能够在给定的资源和进度约束下完
成。
879
---
## Page 881
架构师、并发人员和测试人员，他们首先考虑的是最初的构建和以
后的维护与演进。
项目经理，他们需要组织团队，制定选代计划。
市场人员，他们想通过品质特点实现与竞争者的差异化。
用户，包括最终用户、系统管理员，以及安装、部署、准备、配置
人员。
技术支持人员，他们关注帮助平台电话呼人的数目和复杂性。
每个系统都有自己的品质关注点。有些关注点可能定义得很好，如
性能、安全、可伸缩性等。但是，另一些同样重要的关注点却可能
没有详细规定，如可变性、可维护性和可用性等。利益相关人希望
把功能放到软件上，而不是放到硬件上，这主要是为了很容易、很
快速地修改，然后通常在品质关注方面又对可变性轻描淡写。这很
奇怪，不是吗？哪些改变能够迅速、容易地实现，哪些改变需要花
时间并且很滩实现，架构决定将对此产生重要影响。所以，架构师
滩道不应该在理解功能需求的同时，也理解利益相关人在“可变性”
这样的品质方面的期望吗？
当架构师理解了利益相关人的品质关注点之后，接下来该做些什
么？考虑折中。例如，对信息加密将加强安全性，但会损失性能。
利用配置文件将增加可变性，但会降低可用性，除非我们能够验证
配置是有效的。我们是否应该对这些文件使用标准的表示方式，如
XML，还是使用自已发明的格式？创建系统的架构将涉及许多这样
的艰难折中。
架构师的第一项任务，就是与利益相关人协作，理解这些品质关注
点和约束，并为它们排列优先级。为什么不从功能需求并始？因为
通常有许多种可能的系统分解方式。例如，从数据模型开始可能得
到一种架构，而从业务处理模型并始则可能得到不同的架构。在极
端的情况下，系统没有分解，被开发成单一的软件。这可能会满足
所有的功能需求，但可能不会满足品质需求，如可变性、可维护
性、可伸缩性等。架构师通常必须进行架构层面的系统重构，例如
为了满足伸缩性或性能的要求，将单机部署迁移到分布式部署，从
单线程转向多线程，或者将硬编码的参数移到外部配置文件中，因
为原来从不改变的参数现在需要修改了。
880
---
## Page 882
尽管有许多架构都能满足功能需求，其中却只有一少部分能够满足