printf 
         xor    
eax, eax 
         add    
rsp, 40 
         ret    
0 
main    ENDP       
f       PROC 
         ; ECX - 1st argument 
         ; EDX - 2nd argument 
         ; R8D - 3rd argument 
         imul   
ecx, edx 
         lea    
eax, DWORD PTR [r8+rcx] 
         ret    
0 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
86 
逆向工程权威指南（上册） 
f        ENDP 
我们可以看到，f()函数通过寄存器获取了全部的所需参数。此处求址的加法运算是通过 LEA 指令实现
的。很明显，编译器认为 LEA 指令的效率比 ADD 指令的效率高，所以它分配了 LEA 指令。在制备 f()函
数的第一个和第三个参数时，main()函数同样使用了 LEA 指令。编译器无疑认为 LEA 指令向寄存器赋值
的速度比常规的 MOV 指令速度快。 
我们再来看看 MSVC 未开启优化选项时的编译结果。 
指令清单 8.5  MSVC 2012 x64 
f                
proc near 
; shadow space: 
arg_0            = dword ptr  8 
arg_8            = dword ptr  10h 
arg_10           = dword ptr  18h 
; ECX - 1st argument 
; EDX - 2nd argument 
; R8D - 3rd argument 
mov      [rsp+arg_10], r8d 
mov      [rsp+arg_8], edx 
mov      [rsp+arg_0], ecx 
mov      eax, [rsp+arg_0] 
imul     eax, [rsp+arg_8] 
add      eax, [rsp+arg_10] 
retn 
f                
endp 
main             proc near 
sub      rsp, 28h 
mov      r8d,3 ; 3rd argument 
mov      edx,2 ; 2nd argument 
mov      ecx,1 ; 1st argument 
call     f 
                  mov      edx, eax 
lea      rcx, $SG2931  ; "%d\n" 
call     printf 
; return 0 
xor      eax, eax 
add      rsp, 28h 
retn 
main            
endp 
比较意外的是，原本位于寄存器的 3 个参数都被推送到了栈里。这种现象叫作“阴影空间/shadow space” ①
8.2.2 GCC 
。
每个Win64 程序都可以（但非必须）把 4 个寄存器的值保存到阴影空间里。使用阴影空间有以下两个优点：
1）通过栈传递参数，可避免浪费寄存器资源（有时可能会占用 4 个寄存器）；2）便于调试器debugger在程序中
断时找到函数参数（请参阅：https://msdn.microsoft.com/en-us/library/ew5tede7%28v=VS.90%29.aspx）。 
大型函数可能会把输入参数保存在阴影空间里，但是小型函数（如本例）可能就不会使用阴影空间了。 
在使用阴影空间时，由调用方函数分配栈空间，由被调用方函数根据需要将寄存器参数转储到它们的
阴影空间中。 
在启用优化选项后，GCC 生成的代码更为晦涩。 
指令清单 8.6  Optimizing GCC 4.4.6 x64 
f: 
① 请参阅 MSDN https://msdn.microsoft.com/en-us/library/zthk2dkh%28v=vs.80%29.aspx。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 8 章  参 数 获 取 
87 
        ; EDI - 1st argument 
        ; ESI - 2nd argument 
        ; EDX - 3rd argument 
        imul     esi, edi 
        lea      eax, [rdx+rsi] 
        ret 
main: 
        sub      rsp, 8 
        mov      edx, 3 
        mov      esi, 2 
        mov      edi, 1 
        call     f 
        mov      edi, OFFSET FLAT:.LC0 ; "%d\n" 
        mov      esi, eax 
        xor      eax, eax  ; number of vector registers passed 
        call     printf 
        xor      eax, eax 
        add      rsp, 8 
        ret         
不开启优化选项的情况下，GCC 生成的代码如下。 
指令清单 8.7  GCC 4.4.6 x64 
f: 
        ;EDI - 1st argument 
        ; ESI - 2nd argument 
        ; EDX - 3rd argument 
        push     rbp 
        mov      rbp, rsp 
        mov      DWORD PTR [rbp-4], edi 
        mov      DWORD PTR [rbp-8], esi 
        mov      DWORD PTR [rbp-12], edx 
        mov      eax, DWORD PTR [rbp-4] 
        imul    eax, DWORD PTR [rbp-8] 
        add      eax, DWORD PTR [rbp-12] 
        leave 
        ret 
main:       
        push     rbp 
        mov      rbp, rsp 
        mov      edx, 3 
        mov      esi, 2 
        mov      edi, 1 
        call     f 
        mov      edx, eax 
        mov      eax, OFFSET FLAT:.LC0 ; "%d\n" 
        mov      esi, edx 
        mov      rdi, rax 
        mov      eax, 0  ; number of vector registers passed 
        call     printf 
        mov      eax, 0 
        leave 
        ret 
阴影空间只是微软的概念，System V *NIX［参见参考文献 Mit13］里没有这种规范或约定。GCC 只有
在寄存器数量容纳不下所有参数的情况下，才会使用栈传递参数。 
8.2.3  GCC: uint64_t 型参数 
指令清单 8.1 的源程序采用的是 32 位 int 整型参数，所以以上的汇编指令使用的寄存器都是 64 位寄存
器的低 32 位（即 E-字头寄存器）。如果把参数改为 64 位数据，那么汇编指令则会略有不同： 
#include  
#include  
异步社区会员 dearfuture(15918834820) 专享 尊重版权
88 
逆向工程权威指南（上册） 
uint64_t f (uint64_t a, uint64_t b, uint64_t c) 
{ 
         return a*b+c; 
}; 
int main() 
{ 
         printf ("%lld\n", f(0x1122334455667788, 
                                      0x1111111122222222, 
                                      0x3333333344444444)); 
         return 0; 
}; 
指令清单 8.8  Optimizing GCC 4.4.6 x64 
f       
proc near 
imul     rsi, rdi 
lea      rax, [rdx+rsi] 
retn 
f       
endp 
main    
proc near 
sub      rsp, 8 
mov      rdx, 3333333344444444h ; 3rd argument 
mov      rsi, 1111111122222222h ; 2nd argument 
mov      rdi, 1122334455667788h ; 1st argument 
call     f 
mov      edi, offset format ; "%lld\n" 
mov      rsi, rax 
xor      eax, eax ; number of vector registers passed 
call     _printf 
xor      eax, eax 
add      rsp, 8 
retn 
main    
endp 
相应的汇编指令使用了整个寄存器（R-字头寄存器）。其他部分基本相同。 
8.3 ARM 
8.3.1 Non-optimizing Keil 6/2013 (ARM mode) 
.text:000000A4  00 30 A0 E1   
MOV      
R3, R0 
.text:000000A8  93 21 20 E0   
MLA      
R0, R3, R1, R2 
.text:000000AC  1E FF 2F E1   
BX       
LR 
... 
.text:000000B0       
main 
.text:000000B0  10 40 2D E9   
STMFD    
SP!, {R4,LR} 
.text:000000B4  03 20 A0 E3   
MOV      
R2, #3 
.text:000000B8  02 10 A0 E3   
MOV      
R1, #2 
.text:000000BC  01 00 A0 E3   
MOV      
R0, #1 
.text:000000C0  F7 FF FF EB   
BL       
f 
.text:000000C4  00 40 A0 E1   
MOV      
R4, R0 
.text:000000C8  04 10 A0 E1   
MOV      
R1, R4 
.text:000000CC  5A 0F 8F E2   
ADR      
R0, aD_0  ; "%d\n" 
.text:000000D0  E3 18 00 EB   
BL       
__2printf 
.text:000000D4  00 00 A0 E3   
MOV      
R0, #0 
.text:000000D8  00 00 A0 E3   
LDMFD    
SP!, {R4,PC} 
主函数只起到了调用另外 2 个函数的作用。它把 3 个参数传递给了 f()函数。 
前文提到过，在 ARM 系统里，前 4 个寄存器（R0～R3）负责传递前 4 个参数。 
在本例中，f()函数通过前 3 个寄存器（R0～R2）读取参数。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 8 章  参 数 获 取 
89 
MLA（Multiply Accumulate）指令将前两个操作数（R3 和 R1 里的值）相乘，然后再计算第三个操作
数（R2 里的值）和这个积的和，并且把最终运算结果存储在零号寄存器 R0 之中。根据 ARM 指令的有关
规范，返回值就应该存放在 R0 寄存器里。 
MLA是乘法累加指令
①，能够一次计算乘法和加法运算，属于非常有用的指令。在SIMD技术
②
BL指令把程序的控制流交给LR寄存器里的地址，而且会在必要的时候切换处理器的运行模式（Thumb
模式和ARM模式之间进行模式切换）。被调用方函数f()并不知道它会被什么模式的代码调用，不知道调用
方函数属于 ARM模式的代码还是Thumb模式的代码。所以这种模式切换的功能还是必要的。如果它被
Thumb模式的代码调用，BX指令不仅会进行相应的跳转，还会把处理器模式调整为Thumb。如果它被ARM
模式的指令
的FMA
指令问世之前，x86 平台的指令集里并没有类似的指令。 
首条指令“MOV R3, R0”属于冗余指令。即使此处没有这条指令，后面的 MLA 指令直接使用有关的
寄存器也不会出现任何问题。因为我们没有启用优化选项，所以编译器没能对此进行优化。 
③
8.3.2 Optimizing Keil 6/2013 (ARM mode) 
调用，则不会进行模式切换。 
.text:00000098              f  
.text:00000098 91 20 20 E0      MLA     R0, R1, R0, R2 
.text:0000009C 1E FF 2F E1      BX      LR 
在启用最大幅度的优化功能（-O3）之后，前面那条 MOV 指令被优化了，或者说被删除了。MLA 直
接使用所有寄存器的参数，并且把返回值保存在 R0 寄存器里。调用方函数继而可从 R0 寄存器获取返回值。 
8.3.3 Optimizing Keil 6/2013 (Thumb mode) 
.text:0000005E 48 43    MULS    R0, R1 
.text:00000060 80 18    ADDS    R0, R0, R2 
.text:00000062 70 47    BX      LR 
因为 Thumb 模式的指令集里没有 MLA 指令，所以编译器将它分为两个指令。第一条 MULS 指令计算 R0 和
R1 的积，把运算结果存储在R1 寄存器里。第二条ADDS 计算R1 和R2 的和，并且把计算结果存储在R0 寄存器里。 
8.3.4 ARM64 
Optimizing GCC (Linaro) 4.9 
ARM64 的情况简单一些。MADD 指令可以一次进行乘法和加法的混合运算，与前文的 MLA 指令十
分类似。全部 3 个参数由 X-字头寄存器的低 32 位传递。这是因为这些参数都是 32 位整型数据。函数的返
回值存储在 W0 寄存器。 
指令清单 8.9  Optimizing GCC (Linaro) 4.9 
f: 
  madd      w0, w0, w1, w2 
  ret 
main: 
; save FP and LR to stack frame: 
  stp       x29, x30, [sp, -16]! 
  mov       w2, 3 
  mov       w1, 2 
  add       x29, sp, 0 
① 请参见 http://en.wikipedia.org/wiki/Multiply%E2%80%93accumulate_operation。 
② “单指令流多数据流”的缩写，请参见 https://en.wikipedia.org/wiki/FMA_instruction_set。 
③ ARM12，附录 A2.3.2。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
90 
逆向工程权威指南（上册） 
  mov       w0, 1 
  bl        f 
  mov       w1, w0 
  adrp      x0, .LC7 
  add       x0, x0, :lo12:.LC7 
  bl        printf 
; return 0 
  mov       w0, 0 
; restore FP and LR 
  ldp       x29, x30, [sp], 16 
  ret 
.LC7: 
  .string "%d\n" 
我们再来看看参数为 64 位 uint64_t 的情况： 
#include  
#include  
uint64_t f (uint64_t a, uint64_t b, uint64_t c) 
{ 
  return a*b+c; 
}; 
int main()  
{ 
  printf ("%lld\n", f(0x1122334455667788, 
                                      0x1111111122222222, 
                                      0x3333333344444444)); 
  return 0;  
}; 
f: 
  madd    x0, x0, x1, x2 
  ret  
main: 
  mov     x1, 13396 
  adrp    x0, .LC8 
  stp     x29, x30, [sp, -16]! 
  movk    x1, 0x27d0, lsl 16 
  add     x0, x0, :lo12:.LC8 
  movk    x1, 0x122, lsl 32 
  add     x29, sp, 0 
  movk    x1, 0x58be, lsl 48 
  bl      printf 
  mov     w0, 0 
  ldp     x29, x30, [sp], 16 