        IEmailSender emailSender,
        ISmsSender smsSender,
        ApplicationDbContext applicationDbContext)
      {
        _userManager = userManager;
        _signInManager = signInManager;
        _emailSender = emailSender;
        _smsSender = smsSender;
        _applicationDbContext = applicationDbContext;
      }
要注册用户，应定义RegisterViewModel。这个模型定义了用户在注册时需要输入什
么数据。在生成的代码中，这个模型只需要电子邮件、密码和确认密码（必须与密码相
同）。如果想获得更多的用户信息，可以根据需要添加属性（代码文件
MenuPlanner/Models/AccountViewModels.cs）：
    public class RegisterViewModel
    {
      [Required]
      [EmailAddress]
      [Display(Name = "Email")]
      public string Email { get; set; }
      [Required]
      [StringLength(100, ErrorMessage =
        "The {0} must be at least {2} characters long.", MinimumLength = 6)]
      [DataType(DataType.Password)]
      [Display(Name = "Password")]
      public string Password { get; set; }
      [DataType(DataType.Password)]
      [Display(Name = "Confirm password")]
      [Compare("Password", ErrorMessage =
        "The password and confirmation password do not match.")]
      public string ConfirmPassword { get; set; }
    }
用户注册对于未经过身份验证的用户也必须可用。这就是为什么AllowAnonymous特
性应用于AccountController的Register方法的原因。这会否决这些方法的Authorize特性。
Register方法的HTTP 
POST变体接收RegisterViewModel对象，通过调用方法
_userManager.CreateAsync把ApplicationUser写入数据库。用户成功创建后，通过
_signInManager.SignInAsync登录（代码文件
MenuPlanner/Controllers/AccountController.cs）：
      [HttpGet]
      [AllowAnonymous]
      public IActionResult Register()
      {
        return View();
      }
      [HttpPost]
      [AllowAnonymous]
      [ValidateAntiForgeryToken]
      public async Task Register(RegisterViewModel model)
      {
        EnsureDatabaseCreated(_applicationDbContext);
        if (ModelState.IsValid)
        {
          var user = new ApplicationUser
          {
          UserName = model.Email,
          Email = model.Email
          };
          var result = await _userManager.CreateAsync(user, model.Password);
          if (result.Succeeded)
          {
          await _signInManager.SignInAsync(user, isPersistent: false);
          return RedirectToAction(nameof(HomeController.Index), "Home");
          }
          AddErrors(result);
        }
        // If we got this far, something failed, redisplay form
        return View(model);
      }
现在视图（代码文件MenuPlanner/Views/Account/Register.cshtml）只需要用户的信
息。图41-16显示要求用户提供信息的对话框。
图41-16
41.10.4 设置用户登录
用户注册时，在注册成功后，会直接开始登录。LoginViewModel模型定义了
UserName、Password和RememberMe属性——用户登录时要求提供的信息。这个模型有一
些注解与HTML辅助程序一起使用（代码文件
MenuPlanner/Models/AccountViewModels.cs）：
    public class LoginViewModel
    {
      [Required]
      [EmailAddress]
      public string Email { get; set; }
      [Required]
      [DataType(DataType.Password)]
      public string Password { get; set; }
      [Display(Name = "Remember me? ")]
      public bool RememberMe { get; set; }
    }
为了登录已注册的用户，需要调用AccountController的Login方法。用户输入登录信息
后，就使用登录管理器通过PasswordSignInAsync验证登录信息。如果登录成功，用户就
重定向到最初请求的页面。如果登录失败了，会返回同样的视图，再给用户提供一个选
项，以正确输入用户名和密码（代码文件
MenuPlanner/Controllers/AccountController.cs）：
        [HttpGet]
        [AllowAnonymous]
        public IActionResult Login(string returnUrl = null)
        {
          ViewData["ReturnUrl"] = returnUrl;
          return View();
        }
        [HttpPost]
        [AllowAnonymous]
        [ValidateAntiForgeryToken]
        public async Task Login(LoginViewModel model,
          string returnUrl = null)
        {
          EnsureDatabaseCreated(_applicationDbContext);
          ViewData["ReturnUrl"] = returnUrl;
          if (ModelState.IsValid)
          {
            var result = await _signInManager.PasswordSignInAsync(
            model.Email, model.Password, model.RememberMe, lockoutOnFailure: fals
e);
            if (result.Succeeded)
            {
            return RedirectToLocal(returnUrl);
            }
            if (result.RequiresTwoFactor)
            {
            return RedirectToAction(nameof(SendCode),
              new { ReturnUrl = returnUrl, RememberMe = model.RememberMe });
            }
            if (result.IsLockedOut)
            {
            return View("Lockout");
            }
            else
            {
            ModelState.AddModelError(string.Empty, "Invalid login attempt.");
            return View(model);
            }
          }
          return View(model);
        }
41.10.5 验证用户的身份
有了身份验证的基础设施，就很容易使用Authorize特性注解控制器或动作方法，要求
用户进行身份验证。把这个特性应用到类上需要为类的每一个动作方法指定角色。如果不
同的动作方法有不同的授权要求，Authorize特性也可以应用于动作方法。使用这个特性，
会验证调用者是否已经获得授权（检查授权cookie）。如果调用者还没有获得授权，就返
回一个401 HTTP状态代码，并重定向到登录动作。
应用特性Authorize时如果没有设置参数，那么就需要用户通过身份验证。为了拥有更
多的控制，可以把角色赋予Roles属性，指定只有特定的用户角色才可以访问动作方法，
如下面的代码段所示：
    [Authorize(Roles="Menu Admins")]
    public class MenuAdminController : Controller
    {
还可以使用Controller基类的User属性访问用户信息，允许更动态地批准或拒绝用户。
例如，根据传递的参数值，要求不同的角色。
  注意： 用户身份验证和其他安全信息参见第24章。
41.11 小结
本章介绍了一种使用ASP.NET MVC 6框架的最新Web技术。这提供了一个健壮的结
构，非常适合需要恰当地进行单元测试的大型应用程序。通过本章可以看到，使用
ASP.NET MVC 6时，提供高级功能十分简单，其逻辑结构和功能的分离使代码很容易理
解和维护。
下一章继续讨论ASP.NET Core，但重点是以ASP.NET Web API的形式与服务通信。
第42章
ASP.NET Web API
本章要点
● ASP.NET Web API概述
● 创建Web API控制器
● 使用存储库和依赖注入
● 调用REST API创建.NET客户端
● 在服务中使用Entity Framework
● 使用Swagger创建元数据
● 使用OData
本章源代码下载地址（wrox.com）：
打开网页http://www.wrox.com/go/professionalcsharp6，单击Download Code选项卡即可
下载本章源代码。本章代码分为以下几个主要的示例文件：
● 图书服务示例
● 图书服务分析示例
● 图书服务客户应用程序
● 元数据示例
42.1 概述
.NET 3.0发布WCF时，WCF是一种通信技术，替代了.NET栈中的其他几个技术（其
中的两个是.NET Remoting和ASP.NET Web服务）。其目标是只用一种非常灵活的通信技
术来满足所有需求。但是，WCF最初基于SOAP。现在有许多情形都不需要强大的SOAP
改进功能。对于返回JSON的HTTP请求这样的简单情形，WCF过于复杂。因此在2012年
引入了另一种技术：ASP.NET Web API。在Visual Studio 2015和ASP.NET MVC 6中，发
布了ASP.NET Web API的第三个重要版本3.0。ASP.NET MVC和ASP.NET Web API以前有
不同的类型和配置（以前的版本是ASP.NET MVC 5和ASP.NET Web API 2），但
ASP.NET Web API现在是ASP.NET MVC 6的一部分。
ASP.NET Web API提供了一种基于REST（Representational State Transfer）的简单通
信技术。REST是基于一些限制的体系结构样式。下面比较基于REST体系结构样式的服务
和使用SOAP的服务，以了解这些限制。
REST服务和使用SOAP协议的服务都利用了客户端-服务器技术。SOAP服务可以是有
状态的，也可以是无状态的；REST服务总是无状态的。SOAP定义了它自己的消息格式，
该格式有标题和正文，可以选择服务的方法。而在REST中，使用HTTP动词GET、
POST、PUT和DELETE。GET用于检索资源，POST用于添加新资源，PUT用于更新资
源，DELETE用于删除资源。
本章介绍ASP.NET Web API的各个重要方面——创建服务、使用不同的路由方法、
创建客户端、使用OData、保护服务和使用自定义的宿主。
  注意： SOAP和WCF参见第44章。
42.2 创建服务
首先创建服务。使用新的.NET Core框架时，需要从ASP.NET Web应用程序开始，并
选择ASP.NET Core 1.0 Template Web API（参见图42-1）。这个模板添加了ASP.NET Web
API需要的文件夹和引用。如果需要Web页面和服务，还可以使用模板Web Application。
图42-1
  注意： ASP.NET MVC参见第41章。ASP.NET MVC的基础核心技术参见第40
章。
用这个模板创建的目录结构包含创建服务所需要的文件夹。Controllers目录包含Web
API控制器。第41章介绍过这样的控制器，事实上ASP.NET Web API和ASP.NET MVC使
用相同的基础设施。以前的版本不是这样。
Models目录用于数据模型。在这个目录中可以添加实体类型，以及返回模型类型的存
储库。
所创建的服务返回图书的章列表，并允许动态增删章。提供该服务的示例项目的名称
是BookServiceSample。
42.2.1 定义模型
首先需要一个类型来表示要返回和修改的数据。在Models目录中定义的类的名称是
BookChapter，它包含表示一章的简单属性（代码文件
BookServiceSample/Models/BookChapter.cs）：
    public class BookChapter
    {
      public Guid Id { get; set; }
      public int Number { get; set; }
      public string Title { get; set; }
      public int Pages { get; set; }
    }
42.2.2 创建存储库
接下来创建一个存储库。库中提供的方法用IBookChapterRepository接口定义——用
于检索、添加和更新书中章的方法（代码文件
BookServiceSample/Models/IBookChaptersRepository.cs）：
    public interface IBookChaptersRepository
    {
      void Init();
      void Add(BookChapter bookChapter);
      IEnumerable GetAll();
      BookChapter Find(Guid id);
      BookChapter Remove(Guid id);
      void Update(BookChapter bookChapter);
    }
存储库的实现由SampleBookChaptersRepository类定义。书中的章保存在一个集合类
中。因为来自不同客户端请求的多个任务可以同时访问集合，所以把ConcurrentList类型
用于书的章。这个类是线程安全的。Add、Remove和Update方法利用集合添加、删除和更
新书的章（代码文件BookServiceSample/Models/SampleBookChapterRepository.cs）：
    public class SampleBookChaptersRepository: IBookChapterRepository
    {
      private readonly ConcurrentDictionary _chapters =
        new ConcurrentDictionary();
      public void Init()
      {
        Add(new BookChapter
        {
        Number = 1,
        Title = "Application Architectures",
        Pages = 35
        });
        Add(new BookChapter
        {
        Number = 2,
        Title = "Core C#",
        Pages = 42
        });
        // more chapters
      }
      public void Add(BookChapter chapter)
      {
        chapter.Id = Guid.NewGuid();
        _chapters[chapter.Id] = chapter;
      }
      public BookChapter Find(Guid id)
      {
        BookChapter chapter;
        _chapters.TryGetValue(id, out chapter);
        return chapter;
      }
      public IEnumerable GetAll() => _chapters.Values;
      public BookChapter Remove(Guid id)
      {
        BookChapter removed;
        _chapters.TryRemove(id, out removed);
        return removed;
      }
      public void Update(BookChapter chapter)
      {
        _chapters[chapter.Id] = chapter;
      }
    }
  注意： 在示例代码中，Remove方法确保用id参数传递的BookChapter不在字
典中。如果字典不包含书的章节，则没关系。如果传递的书中章节没有找到，则
Remove方法的另一种实现会抛出异常。
  注意： 并发集合参见第12章。
启动时，用依赖注入容器的AddSingleton方法注册SampleBookChapterRepository，为
请求服务的所有客户端创建一个实例。在这个代码段中，使用AddSingleton的重载方法允
许传递以前创建的实例，这样就可以调用Init方法，初始化实例（代码文件
BookServiceSample/Startup.cs）：
    public void ConfigureServices(IServiceCollection services)
    {