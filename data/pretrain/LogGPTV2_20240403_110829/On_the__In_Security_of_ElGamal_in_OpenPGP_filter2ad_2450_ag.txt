the Secret Key. In EUROCRYPT’96 (LNCS, Vol. 1070), Ueli M. Maurer (Ed.). Springer,
Heidelberg, 10–18. https://doi.org/10.1007/3-540-68339-9_2
[10] Dan Boneh, Antoine Joux, and Phong Q. Nguyen. 2000. Why Textbook ElGamal
and RSA Encryption Are Insecure. In ASIACRYPT 2000 (LNCS, Vol. 1976), Tatsuaki
Okamoto (Ed.). Springer, Heidelberg, 30–43. https://doi.org/10.1007/3-540-44448-
3_3
[11] Steve Brooks, Andrew Gelman, Galin Jones, and Xiao-Li Meng. 2011. Handbook
of markov chain monte carlo. CRC press.
[12] Jon Callas, Lutz Donnerhacke, Hal Finney, David Shaw, and Rodney Thayer. 2007.
OpenPGP Message Format. https://www.rfc-editor.org/rfc/rfc4880.html
[13] Srdjan Capkun, Levente Buttyán, and Jean-Pierre Hubaux. 2002. Small worlds in
security systems: an analysis of the PGP certificate graph. In Proceedings of the
2002 Workshop on New Security Paradigms, Virginia Beach, VA, USA, September
Session 6D: Authentication and Privacy CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea207823-26, 2002, Cristina Serban, Carla Marceau, and Simon N. Foley (Eds.). ACM,
28–35. https://doi.org/10.1145/844102.844108
[14] Taher ElGamal. 1984. A Public Key Cryptosystem and a Signature Scheme Based
on Discrete Logarithms. In CRYPTO’84 (LNCS, Vol. 196), G. R. Blakley and David
Chaum (Eds.). Springer, Heidelberg, 10–18.
[15] Luca De Feo, Bertram Poettering, and Alessandro Sorniotti. 2021. On the
(In)Security of ElGamal in OpenPGP. Cryptology ePrint Archive, Report 2021/923.
https://ia.cr/2021/923.
[16] Daniel Genkin, Lev Pachmanov, Itamar Pipman, and Eran Tromer. 2015. Stealing
Keys from PCs Using a Radio: Cheap Electromagnetic Attacks on Windowed
Exponentiation. In CHES 2015 (LNCS, Vol. 9293), Tim Güneysu and Helena Hand-
schuh (Eds.). Springer, Heidelberg, 207–228. https://doi.org/10.1007/978-3-662-
48324-4_11
[17] Daniel Gruss, Clémentine Maurice, Klaus Wagner, and Stefan Mangard. 2016.
Flush+Flush: A Fast and Stealthy Cache Attack. In Detection of Intrusions and
Malware, and Vulnerability Assessment - 13th International Conference, DIMVA
2016, San Sebastián, Spain, July 7-8, 2016, Proceedings (Lecture Notes in Computer
Science, Vol. 9721), Juan Caballero, Urko Zurutuza, and Ricardo J. Rodríguez (Eds.).
Springer, 279–299. https://doi.org/10.1007/978-3-319-40667-1_14
[18] Gaël Hachez and Jean-Jacques Quisquater. 2000. Montgomery Exponentiation
with no Final Subtractions: Improved Results. In CHES 2000 (LNCS, Vol. 1965),
Çetin Kaya Koç and Christof Paar (Eds.). Springer, Heidelberg, 293–301. https:
//doi.org/10.1007/3-540-44499-8_23
[19] Werner Koch, brian m. carlson, Ronald Henry Tse, Derek Atkins, and Daniel Kahn
Internet-Draft draft-ietf-openpgp-
Gillmor. 2020. OpenPGP Message Format.
rfc4880bis-10. Internet Engineering Task Force. https://datatracker.ietf.org/doc/
html/draft-ietf-openpgp-rfc4880bis-10 Work in Progress.
[20] Hendrik W. Lenstra. 1987. Factoring integers with elliptic curves. Annals of
Mathematics 126 (1987), 649–673.
[21] Chae Hoon Lim and Pil Joong Lee. 1997. A Key Recovery Attack on Discrete Log-
based Schemes Using a Prime Order Subgroup. In CRYPTO’97 (LNCS, Vol. 1294),
Burton S. Kaliski Jr. (Ed.). Springer, Heidelberg, 249–263. https://doi.org/10.1007/
BFb0052240
[22] Fangfei Liu, Yuval Yarom, Qian Ge, Gernot Heiser, and Ruby B. Lee. 2015. Last-
Level Cache Side-Channel Attacks are Practical. In 2015 IEEE Symposium on
Security and Privacy, SP 2015, San Jose, CA, USA, May 17-21, 2015. IEEE Computer
Society, 605–622. https://doi.org/10.1109/SP.2015.43
[23] Alfred J. Menezes, Paul C. van Oorschot, and Scott A. Vanstone. 1997. Handbook
of Applied Cryptography. CRC Press, 2000 N.W. Corporate Blvd., Boca Raton, FL
33431-9868, USA. xxviii + 780 pages.
[24] Thomas S. Messerges, Ezzy A. Dabbish, and Robert H. Sloan. 1999. Power
Analysis Attacks of Modular Exponentiation in Smartcards. In CHES’99 (LNCS,
Vol. 1717), Çetin Kaya Koç and Christof Paar (Eds.). Springer, Heidelberg, 144–157.
https://doi.org/10.1007/3-540-48059-5_14
[25] Fabrizio Milo, Massimo Bernaschi, and Mauro Bisson. 2011. A fast, GPU based,
dictionary attack to OpenPGP secret keyrings. J. Syst. Softw. 84, 12 (2011), 2088–
2096. https://doi.org/10.1016/j.jss.2011.05.027
[26] Serge Mister and Robert J. Zuccherato. 2005. An Attack on CFB Mode Encryp-
tion as Used by OpenPGP. In Selected Areas in Cryptography, 12th International
Workshop, SAC 2005, Kingston, ON, Canada, August 11-12, 2005, Revised Selected
Papers (Lecture Notes in Computer Science, Vol. 3897), Bart Preneel and Stafford E.
Tavares (Eds.). Springer, 82–94. https://doi.org/10.1007/11693383_6
[27] Andrew M Odlyzko. 1995. The Future of Integer Factorization. CryptoBytes (The
technical newsletter of RSA Laboratories) 1, 2 (1995), 5–12. http://www.dtc.umn.
edu/~odlyzko/doc/future.of.factoring.pdf
[28] Damian Poddebniak, Christian Dresen, Jens Müller, Fabian Ising, Sebastian
Schinzel, Simon Friedberger, Juraj Somorovsky, and Jörg Schwenk. 2018. Efail:
Breaking S/MIME and OpenPGP Email Encryption using Exfiltration Chan-
nels. In 27th USENIX Security Symposium, USENIX Security 2018, Baltimore, MD,
USA, August 15-17, 2018, William Enck and Adrienne Porter Felt (Eds.). USENIX
Association, 549–566. https://www.usenix.org/conference/usenixsecurity18/
presentation/poddebniak
[29] S. Pohlig and M. Hellman. 1978. An Improved Algorithm for Computing Loga-
rithms over GF(𝑝) and Its Cryptographic Significance. IEEE Trans. Inf. Theor. 24,
1 (Jan. 1978), 106–110. https://doi.org/10.1109/TIT.1978.1055817
[30] John M. Pollard. 1978. Monte Carlo methods for index computation mod 𝑝. Math.
Comp. 32 (1978), 918–924.
[31] Birger Schacht and Peter Kieseberg. 2020. An Analysis of 5 Million OpenPGP
Keys. J. Wirel. Mob. Networks Ubiquitous Comput. Dependable Appl. 11, 3 (2020),
107–140. https://doi.org/10.22667/JOWUA.2020.09.30.107
[32] Claus-Peter Schnorr. 1990. Efficient Identification and Signatures for Smart
Cards. In CRYPTO’89 (LNCS, Vol. 435), Gilles Brassard (Ed.). Springer, Heidelberg,
239–252. https://doi.org/10.1007/0-387-34805-0_22
[33] Daniel Shanks. 1971. Class number, a theory of factorization, and genera. In Proc.
Symp. Pure Math., Vol. 20. AMS, 41–440.
[34] Eran Tromer, Dag Arne Osvik, and Adi Shamir. 2010. Efficient Cache Attacks on
AES, and Countermeasures. J. Cryptol. 23, 1 (2010), 37–71. https://doi.org/10.
1007/s00145-009-9049-y
[35] Yiannis Tsiounis and Moti Yung. 1998. On the Security of ElGamal Based Encryp-
tion. In PKC’98 (LNCS, Vol. 1431), Hideki Imai and Yuliang Zheng (Eds.). Springer,
Heidelberg, 117–134. https://doi.org/10.1007/BFb0054019
[36] Alexander Ulrich, Ralph Holz, Peter Hauck, and Georg Carle. 2011. Investigating
the OpenPGP Web of Trust. In ESORICS 2011 (LNCS, Vol. 6879), Vijay Atluri and
Claudia Díaz (Eds.). Springer, Heidelberg, 489–507. https://doi.org/10.1007/978-
3-642-23822-2_27
[37] Paul C. van Oorschot and Michael J. Wiener. 1996. On Diffie-Hellman Key
Agreement with Short Exponents. In EUROCRYPT’96 (LNCS, Vol. 1070), Ueli M.
Maurer (Ed.). Springer, Heidelberg, 332–343. https://doi.org/10.1007/3-540-68339-
9_29
[38] Paul C. van Oorschot and Michael J. Wiener. 1999. Parallel Collision Search
with Cryptanalytic Applications. Journal of Cryptology 12, 1 (Jan. 1999), 1–28.
https://doi.org/10.1007/PL00003816
[39] Yuval Yarom and Katrina Falkner. 2014. FLUSH+RELOAD: A High Resolution,
Low Noise, L3 Cache Side-Channel Attack. In Proceedings of the 23rd USENIX
Security Symposium, San Diego, CA, USA, August 20-22, 2014, Kevin Fu and Jaeyeon
Jung (Eds.). USENIX Association, 719–732. https://www.usenix.org/conference/
usenixsecurity14/technical-sessions/presentation/yarom
A MAPPING FINITE FIELD SIZES TO
PARAMETER SIZES
Matching an ElGamal key to a security level is more complex than
just choosing a bit size for the modulus 𝑝. In configurations where
𝑝 is not a safe prime, it is necessary to set a minimum size for one
prime factor 𝑞|(𝑝 − 1), or all prime factors other than 2 in the case
of Lim–Lee primes. Moreover, some libraries sample exponents 𝑥
and 𝑦 from short intervals, whose size must also be a function of
the security level.
Table 3: Left column: bit-size of modulus. Other columns: bit-
size of exponents according to gcrypt, Crypto++ and various
standards.
Crypto++ NIST RFC BSI
|𝑞|
|𝑞|
|𝑞|
|𝑝|
512
768
1024
1536
2048
3072
4096
7680
15360
gcrypt
|𝑥|
181
220
250
298
340
406
460
1741
3181
|𝑦|
184
224
248
304
344
408
464
1744
3184
𝑙
119
145
165
198
225
269
305
1160
2120
|𝑥|, |𝑦|
120
144
164
198
226
268
304
398
530
160
224
256
384
512
135
168
190
224
280
380
480
140
200
256
384
512
Table 3 indicates how different implementations and interna-
tional standards map field sizes (a.k.a. modulus sizes) to the different
parameters. The first group of columns describes gcrypt’s some-
what baroque parameters: a hard-coded table, which the source
code attributes to Wiener19, determines an integer 𝑙 as a function
of 𝑝. From 𝑙, gcrypt gets the next multiple of 2:
(cid:22) 𝑙 + 1
(cid:23)
,
2
𝑚 = 2
then generates a Lim–Lee modulus such that all the odd prime
factors 𝑞|(𝑝−1) are larger than 2𝑚. Secret exponents 𝑥 are uniformly
sampled from the interval [1, 23𝑚/2+1 − 1], the factor 3/2 providing
19See comment “Michael Wiener’s table” at https://github.com/gpg/libgcrypt/blob/
1a83df98/cipher/elgamal.c#L105-L109
Session 6D: Authentication and Privacy CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2079(cid:22) 3𝑙 + 14
(cid:23)
,
16
𝑟 = 8
a “large safety margin”.20 Ephemeral exponents 𝑦 are sampled from
the similarly sized interval: first gcrypt increments 3𝑙/2 to the next
multiple of 8, i.e.,
then samples 𝑦 from [1, 2𝑟 − 1], rejecting if gcd(𝑦, 𝑝 − 1) ≠ 1.21
Crypto++ uses safe primes in key generation, it does thus not
need to apply a correspondence for the size of the prime order
subgroup. It does however sample the exponents 𝑥 and 𝑦 for the
short interval
(cid:20)
1 .. 22(cid:4)2.4 3√
𝑛 ln(𝑛)2−5(cid:5)(cid:21)
,
using a formula attributed to Odlyzko [27].22 We tabulate the expo-
nent of the upper bound in Table 3.
For reference, we also include in Table 3 the group size recom-
mendations of standardization bodies NIST23, RFC24 and BSI25.
20See comment at https://github.com/gpg/libgcrypt/blob/1a83df98/cipher/elgamal.c#
L312-L315.
21See https://github.com/gpg/libgcrypt/blob/1a83df98/cipher/elgamal.c/#L190-L196,
the function gen_k is always called with small_k = 1 in ElGamal.
22See
L1050.
23Table 2 of https://doi.org/10.6028/NIST.SP.800-57pt1r5
24Sec. 5 of https://www.ietf.org/rfc/rfc3766.html
25Table 3.2 of https://www.bsi.bund.de/SharedDocs/Downloads/EN/BSI/Publications/
TechGuidelines/TG02102/BSI-TR-02102-1.pdf
https://github.com/weidai11/cryptopp/blob/434e3189/nbtheory.cpp#L1045-
Session 6D: Authentication and Privacy CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2080