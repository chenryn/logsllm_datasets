### References

1. **The Secret Key**. In *EUROCRYPT’96* (LNCS, Vol. 1070), Ueli M. Maurer (Ed.). Springer, Heidelberg, pp. 10–18. https://doi.org/10.1007/3-540-68339-9_2

2. **Dan Boneh, Antoine Joux, and Phong Q. Nguyen**. 2000. Why Textbook ElGamal and RSA Encryption Are Insecure. In *ASIACRYPT 2000* (LNCS, Vol. 1976), Tatsuaki Okamoto (Ed.). Springer, Heidelberg, pp. 30–43. https://doi.org/10.1007/3-540-44448-3_3

3. **Steve Brooks, Andrew Gelman, Galin Jones, and Xiao-Li Meng**. 2011. *Handbook of Markov Chain Monte Carlo*. CRC Press.

4. **Jon Callas, Lutz Donnerhacke, Hal Finney, David Shaw, and Rodney Thayer**. 2007. OpenPGP Message Format. https://www.rfc-editor.org/rfc/rfc4880.html

5. **Srdjan Capkun, Levente Buttyán, and Jean-Pierre Hubaux**. 2002. Small Worlds in Security Systems: An Analysis of the PGP Certificate Graph. In *Proceedings of the 2002 Workshop on New Security Paradigms*, Virginia Beach, VA, USA, September 23-26, 2002, Cristina Serban, Carla Marceau, and Simon N. Foley (Eds.). ACM, pp. 28–35. https://doi.org/10.1145/844102.844108

6. **Taher ElGamal**. 1984. A Public Key Cryptosystem and a Signature Scheme Based on Discrete Logarithms. In *CRYPTO’84* (LNCS, Vol. 196), G. R. Blakley and David Chaum (Eds.). Springer, Heidelberg, pp. 10–18.

7. **Luca De Feo, Bertram Poettering, and Alessandro Sorniotti**. 2021. On the (In)Security of ElGamal in OpenPGP. Cryptology ePrint Archive, Report 2021/923. https://ia.cr/2021/923

8. **Daniel Genkin, Lev Pachmanov, Itamar Pipman, and Eran Tromer**. 2015. Stealing Keys from PCs Using a Radio: Cheap Electromagnetic Attacks on Windowed Exponentiation. In *CHES 2015* (LNCS, Vol. 9293), Tim Güneysu and Helena Handschuh (Eds.). Springer, Heidelberg, pp. 207–228. https://doi.org/10.1007/978-3-662-48324-4_11

9. **Daniel Gruss, Clémentine Maurice, Klaus Wagner, and Stefan Mangard**. 2016. Flush+Flush: A Fast and Stealthy Cache Attack. In *Detection of Intrusions and Malware, and Vulnerability Assessment - 13th International Conference, DIMVA 2016*, San Sebastián, Spain, July 7-8, 2016, Proceedings (Lecture Notes in Computer Science, Vol. 9721), Juan Caballero, Urko Zurutuza, and Ricardo J. Rodríguez (Eds.). Springer, pp. 279–299. https://doi.org/10.1007/978-3-319-40667-1_14

10. **Gaël Hachez and Jean-Jacques Quisquater**. 2000. Montgomery Exponentiation with no Final Subtractions: Improved Results. In *CHES 2000* (LNCS, Vol. 1965), Çetin Kaya Koç and Christof Paar (Eds.). Springer, Heidelberg, pp. 293–301. https://doi.org/10.1007/3-540-44499-8_23

11. **Werner Koch, Brian M. Carlson, Ronald Henry Tse, Derek Atkins, and Daniel Kahn Gillmor**. 2020. OpenPGP Message Format. Internet-Draft draft-ietf-openpgp-rfc4880bis-10. Internet Engineering Task Force. https://datatracker.ietf.org/doc/html/draft-ietf-openpgp-rfc4880bis-10 (Work in Progress)

12. **Hendrik W. Lenstra**. 1987. Factoring Integers with Elliptic Curves. *Annals of Mathematics* 126, pp. 649–673.

13. **Chae Hoon Lim and Pil Joong Lee**. 1997. A Key Recovery Attack on Discrete Log-based Schemes Using a Prime Order Subgroup. In *CRYPTO’97* (LNCS, Vol. 1294), Burton S. Kaliski Jr. (Ed.). Springer, Heidelberg, pp. 249–263. https://doi.org/10.1007/BFb0052240

14. **Fangfei Liu, Yuval Yarom, Qian Ge, Gernot Heiser, and Ruby B. Lee**. 2015. Last-Level Cache Side-Channel Attacks are Practical. In *2015 IEEE Symposium on Security and Privacy, SP 2015*, San Jose, CA, USA, May 17-21, 2015. IEEE Computer Society, pp. 605–622. https://doi.org/10.1109/SP.2015.43

15. **Alfred J. Menezes, Paul C. van Oorschot, and Scott A. Vanstone**. 1997. *Handbook of Applied Cryptography*. CRC Press, Boca Raton, FL, USA. xxviii + 780 pages.

16. **Thomas S. Messerges, Ezzy A. Dabbish, and Robert H. Sloan**. 1999. Power Analysis Attacks of Modular Exponentiation in Smartcards. In *CHES’99* (LNCS, Vol. 1717), Çetin Kaya Koç and Christof Paar (Eds.). Springer, Heidelberg, pp. 144–157. https://doi.org/10.1007/3-540-48059-5_14

17. **Fabrizio Milo, Massimo Bernaschi, and Mauro Bisson**. 2011. A Fast, GPU-Based, Dictionary Attack on OpenPGP Secret Keyrings. *J. Syst. Softw.* 84(12), pp. 2088–2096. https://doi.org/10.1016/j.jss.2011.05.027

18. **Serge Mister and Robert J. Zuccherato**. 2005. An Attack on CFB Mode Encryption as Used by OpenPGP. In *Selected Areas in Cryptography, 12th International Workshop, SAC 2005*, Kingston, ON, Canada, August 11-12, 2005, Revised Selected Papers (Lecture Notes in Computer Science, Vol. 3897), Bart Preneel and Stafford E. Tavares (Eds.). Springer, pp. 82–94. https://doi.org/10.1007/11693383_6

19. **Andrew M. Odlyzko**. 1995. The Future of Integer Factorization. *CryptoBytes* (The technical newsletter of RSA Laboratories) 1(2), pp. 5–12. http://www.dtc.umn.edu/~odlyzko/doc/future.of.factoring.pdf

20. **Damian Poddebniak, Christian Dresen, Jens Müller, Fabian Ising, Sebastian Schinzel, Simon Friedberger, Juraj Somorovsky, and Jörg Schwenk**. 2018. Efail: Breaking S/MIME and OpenPGP Email Encryption Using Exfiltration Channels. In *27th USENIX Security Symposium, USENIX Security 2018*, Baltimore, MD, USA, August 15-17, 2018, William Enck and Adrienne Porter Felt (Eds.). USENIX Association, pp. 549–566. https://www.usenix.org/conference/usenixsecurity18/presentation/poddebniak

21. **S. Pohlig and M. Hellman**. 1978. An Improved Algorithm for Computing Logarithms over GF(p) and Its Cryptographic Significance. *IEEE Trans. Inf. Theor.* 24(1), pp. 106–110. https://doi.org/10.1109/TIT.1978.1055817

22. **John M. Pollard**. 1978. Monte Carlo Methods for Index Computation mod p. *Math. Comp.* 32, pp. 918–924.

23. **Birger Schacht and Peter Kieseberg**. 2020. An Analysis of 5 Million OpenPGP Keys. *J. Wirel. Mob. Networks Ubiquitous Comput. Dependable Appl.* 11(3), pp. 107–140. https://doi.org/10.22667/JOWUA.2020.09.30.107

24. **Claus-Peter Schnorr**. 1990. Efficient Identification and Signatures for Smart Cards. In *CRYPTO’89* (LNCS, Vol. 435), Gilles Brassard (Ed.). Springer, Heidelberg, pp. 239–252. https://doi.org/10.1007/0-387-34805-0_22

25. **Daniel Shanks**. 1971. Class Number, a Theory of Factorization, and Genera. In *Proc. Symp. Pure Math.*, Vol. 20. AMS, pp. 41–440.

26. **Eran Tromer, Dag Arne Osvik, and Adi Shamir**. 2010. Efficient Cache Attacks on AES, and Countermeasures. *J. Cryptol.* 23(1), pp. 37–71. https://doi.org/10.1007/s00145-009-9049-y

27. **Yiannis Tsiounis and Moti Yung**. 1998. On the Security of ElGamal-Based Encryption. In *PKC’98* (LNCS, Vol. 1431), Hideki Imai and Yuliang Zheng (Eds.). Springer, Heidelberg, pp. 117–134. https://doi.org/10.1007/BFb0054019

28. **Alexander Ulrich, Ralph Holz, Peter Hauck, and Georg Carle**. 2011. Investigating the OpenPGP Web of Trust. In *ESORICS 2011* (LNCS, Vol. 6879), Vijay Atluri and Claudia Díaz (Eds.). Springer, Heidelberg, pp. 489–507. https://doi.org/10.1007/978-3-642-23822-2_27

29. **Paul C. van Oorschot and Michael J. Wiener**. 1996. On Diffie-Hellman Key Agreement with Short Exponents. In *EUROCRYPT’96* (LNCS, Vol. 1070), Ueli M. Maurer (Ed.). Springer, Heidelberg, pp. 332–343. https://doi.org/10.1007/3-540-68339-9_29

30. **Paul C. van Oorschot and Michael J. Wiener**. 1999. Parallel Collision Search with Cryptanalytic Applications. *Journal of Cryptology* 12(1), pp. 1–28. https://doi.org/10.1007/PL00003816

31. **Yuval Yarom and Katrina Falkner**. 2014. FLUSH+RELOAD: A High Resolution, Low Noise, L3 Cache Side-Channel Attack. In *Proceedings of the 23rd USENIX Security Symposium*, San Diego, CA, USA, August 20-22, 2014, Kevin Fu and Jaeyeon Jung (Eds.). USENIX Association, pp. 719–732. https://www.usenix.org/conference/usenixsecurity14/technical-sessions/presentation/yarom

### Mapping Finite Field Sizes to Parameter Sizes

Matching an ElGamal key to a security level is more complex than simply choosing a bit size for the modulus \( p \). In configurations where \( p \) is not a safe prime, it is necessary to set a minimum size for one prime factor \( q \mid (p - 1) \), or all prime factors other than 2 in the case of Lim–Lee primes. Additionally, some libraries sample exponents \( x \) and \( y \) from short intervals, whose size must also be a function of the security level.

#### Table 3: Bit-Sizes of Modulus and Exponents According to Various Implementations and Standards

| \( |p| \) | gcrypt \( |x| \) | gcrypt \( |y| \) | gcrypt \( l \) | Crypto++ \( |x|, |y| \) | NIST \( |q| \) | RFC \( |q| \) | BSI \( |q| \) |
|---------|-----------------|-----------------|----------------|--------------------|----------------|--------------|--------------|
| 512     | 181             | 184             | 119            | 120                | 160            | 135          | 140          |
| 768     | 220             | 224             | 145            | 144                | 224            | 168          | 200          |
| 1024    | 250             | 248             | 165            | 164                | 256            | 190          | 256          |
| 1536    | 298             | 304             | 198            | 198                | 384            | 224          | 384          |
| 2048    | 340             | 344             | 225            | 226                | 512            | 280          | 512          |
| 3072    | 406             | 408             | 269            | 268                | -              | 380          | -            |
| 4096    | 460             | 464             | 305            | 304                | -              | 480          | -            |
| 7680    | 1741            | 1744            | 1160           | 398                | -              | -            | -            |
| 15360   | 3181            | 3184            | 2120           | 530                | -              | -            | -            |

Table 3 indicates how different implementations and international standards map field sizes (a.k.a. modulus sizes) to the different parameters. The first group of columns describes gcrypt’s somewhat baroque parameters: a hard-coded table, which the source code attributes to Wiener19, determines an integer \( l \) as a function of \( p \). From \( l \), gcrypt gets the next multiple of 2:

\[
m = 2^{\left\lceil \frac{l + 1}{2} \right\rceil}
\]

then generates a Lim–Lee modulus such that all the odd prime factors \( q \mid (p - 1) \) are larger than \( 2m \). Secret exponents \( x \) are uniformly sampled from the interval \([1, 2^{3m/2 + 1} - 1]\), the factor \( \frac{3}{2} \) providing a “large safety margin”.20 Ephemeral exponents \( y \) are sampled from the similarly sized interval: first gcrypt increments \( \frac{3l}{2} \) to the next multiple of 8, i.e.,

\[
r = 8^{\left\lceil \frac{3l + 14}{16} \right\rceil}
\]

then samples \( y \) from \([1, 2^r - 1]\), rejecting if \(\gcd(y, p - 1) \neq 1\).21

Crypto++ uses safe primes in key generation, thus it does not need to apply a correspondence for the size of the prime order subgroup. It does, however, sample the exponents \( x \) and \( y \) for the short interval:

\[
\left[1, 2^{2 \cdot 2.4 \sqrt[3]{n \ln(n)} - 5}\right]
\]

using a formula attributed to Odlyzko [27]. We tabulate the exponent of the upper bound in Table 3.

For reference, we also include in Table 3 the group size recommendations of standardization bodies NIST23, RFC24, and BSI25.

20. See comment at https://github.com/gpg/libgcrypt/blob/1a83df98/cipher/elgamal.c#L312-L315.
21. See https://github.com/gpg/libgcrypt/blob/1a83df98/cipher/elgamal.c/#L190-L196, the function `gen_k` is always called with `small_k = 1` in ElGamal.
22. See https://github.com/weidai11/cryptopp/blob/434e3189/nbtheory.cpp#L1045-L1050.
23. Table 2 of https://doi.org/10.6028/NIST.SP.800-57pt1r5
24. Sec. 5 of https://www.ietf.org/rfc/rfc3766.html
25. Table 3.2 of https://www.bsi.bund.de/SharedDocs/Downloads/EN/BSI/Publications/TechGuidelines/TG02102/BSI-TR-02102-1.pdf