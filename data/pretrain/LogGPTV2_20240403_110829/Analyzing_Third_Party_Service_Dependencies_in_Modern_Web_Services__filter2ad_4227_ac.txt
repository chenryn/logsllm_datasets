cases, it will have false positives, e.g., yahoo uses a private CDN
which uses *.yimg.com as CNAME. We can also match the SOA
records of CNAMEs and websites, which also has false positives;
e.g., Facebook CDN uses Facebook DNS as its SOA, Instagram
uses private Facebook CDN while its SOA is AWS DNS. This tech-
nique also leads to overestimating third party CDNs. Hence, we
develop a heuristic that uses TLD matching but to avoid some
corner cases, it uses the SAN list and SOA information. For each
(website, CDN) pair, we get the CNAMEs of the internal resources
of the website which uses that CDN. For instance, the CNAME of
the resources fetched from Akamai will contain CNAMEs such as
*.akamaiedge.net. For each CNAME, we first apply TLD matching,
then we use the SAN list. Finally, we check for a mismatch in the
SOA of the CNAME of the CDN and the SOA of the website, im-
plying two separate entities. Of the 38,030 (website, CDN) pairs,
we successfully classify 37,259 as third-party and we observe 86
distinct CDNs. We summarize our heuristic below:
𝐶𝐷𝑁 𝑆 ← 𝑔𝑒𝑡𝐶𝐷𝑁 (𝑤)
for 𝑐𝑑𝑛 ∈ 𝐶𝐷𝑁 𝑆 do
𝑐𝑛𝑎𝑚𝑒𝑠 ← 𝑔𝑒𝑡𝐶𝑁 𝐴𝑀𝐸𝑆(𝑐𝑑𝑛, 𝑤)
𝑐𝑑𝑛.𝑡 𝑦𝑝𝑒 ← 𝑢𝑛𝑘𝑛𝑜𝑤𝑛
for 𝑐𝑛𝑎𝑚𝑒 ∈ 𝐶𝑁 𝐴𝑀𝐸𝑆 do
𝑐𝑑𝑛.𝑡 𝑦𝑝𝑒 ← 𝑝𝑟𝑖𝑣𝑎𝑡𝑒
𝑐𝑑𝑛.𝑡 𝑦𝑝𝑒 ← 𝑝𝑟𝑖𝑣𝑎𝑡𝑒
𝑐𝑑𝑛.𝑡 𝑦𝑝𝑒 ← 𝑡ℎ𝑖𝑟𝑑
if 𝑡𝑙𝑑(𝑐𝑛𝑎𝑚𝑒) = 𝑡𝑙𝑑(𝑤) then
else if 𝑖𝑠𝐻𝑇𝑇 𝑃𝑆(𝑤) & 𝑡𝑙𝑑(𝑐𝑛𝑎𝑚𝑒) ∈ 𝑆𝐴𝑁 (𝑤) then
else if 𝑆𝑂𝐴(𝑐𝑛𝑎𝑚𝑒) ≠ 𝑆𝑂𝐴(𝑤) then
end if
end for
end for
Again, we validate our heuristic by taking a random sample
of 100 websites and manually establishing their ground truth. We
observed that our approach classifies (website, CDN) pairs with
100% accuracy, while TLD and SOA matching classify with 97% and
83% accuracy respectively.
3.4 Inter-services dependencies
DNS, CDN, and CA services also have dependencies on each other.
For instance, CA’s OCSP servers and CDPs, and CDNs will use DNS
for IP resolution. CAs may also host CDPs or OCSP servers on a
CDN. For a 𝐶𝐷𝑁 → 𝐷𝑁 𝑆 dependency, we find the nameservers
of the CNAMEs used by a given CDN and then classify them as a
third party or private using the techniques mentioned in Section 3.1.
We do the same for 𝐶𝐴 → 𝐷𝑁 𝑆 dependency by measuring and
classifying OCSP and CRL addresses. Moreover, for 𝐶𝐴 → 𝐶𝐷𝑁
dependency, we identify CDNs of OCSP servers and CDPs by get-
ting their CNAMEs as we did for websites in Section 3.3. After
identifying CDNs, we classify them as a third party or private using
the same techniques described in Section 3.3.
3.5 Limitations
We acknowledge several limitations of our methodology to help
put our results in perspective:
• We use a single vantage point. While this is a representative view
of the structural dependencies, we may miss region-specific de-
pendencies; e.g., websites in Asia having different dependency
structure for clients in Asia, etc. Hence, our results might un-
derestimate the impact of certain providers.
• We do not measure physical and network infrastructure depen-
dencies; e.g., physical hosting, routing, or capacity. Such data is
proprietary and hard to get in practice. Our analysis has value
even with this limitation.
• We do not focus on dependencies between web-services them-
selves; e.g., loading third-party widget or scripts. While this
can have implications (e.g., privacy), our focus is on infrastruc-
ture components like DNS, CDN, and CAs. We refer readers
638
IMC ’20, October 27–29, 2020, Virtual Event, USA
Aqsa Kashaf, Vyas Sekar, and Yuvraj Agarwal
to related work on the analysis of third-party web content
(e.g., [7, 29, 35, 43, 47, 48, 51]).
• We only analyze dependencies on the landing pages. This is rep-
resentative as shown by [35] where they found that on average,
the root page of each site loads content from 87% of the union
of external domains that all pages (landing and internal) depend
on. However, we miss dependencies that may manifest deeper
in the content hierarchy.
4 Direct Dependencies
In view of our research goals mentioned in Section 2.3, we analyze
direct dependencies to 1) see how pervasive third party dependen-
cies are, 2) look at the concentration of websites among third party
providers and identify single points of failure in the internet, 3)
compare the state of the third-party dependencies right after the
Dyn 2016 attack, and now.
4.1 Third Party Dependencies
Observation 1: DNS third party and critical dependencies are
higher for less popular websites. 89% of the top-100K websites
use a third party DNS as compared to 49% in the top-100. More-
over, 28% of the websites are critically dependent in top-100 as
compared to 85% in the top-100K.
Figure 2 shows that third-party and critical dependencies are
higher for lower-ranked websites. This could be because less pop-
ular websites cannot afford private infrastructure. Moreover, we
observe that redundancy decreases with popularity; i.e., more pop-
ular websites care more about availability as compared to less pop-
ular ones. Overall, a very small fraction of websites have redun-
dancy, perhaps since configuring for multiple providers can be
non-trivial [4, 23]. Using multiple DNS providers requires provider
support and currently, only a limited number of providers support
or encourage redundancy as we see in Section 4.2.
Observation 2: Critical dependency on DNS providers has in-
creased by 4.7% in 2020 relative to 2016.
Table 3 shows that 6% of the top-100K websites that were criti-
cally dependent in 2016, have moved to a private DNS in 2020. On
the other hand, 10.7% of the websites which used a private DNS
in 2016, have moved to a single third party DNS provider (e.g.,
espn.com, flickr.com). Between these snapshots, redundancy has re-
mained roughly similar. Overall, critical dependency has increased
by 4.7% in 2020. More popular websites, however, have decreased
their critical dependency.
Observation 3: Of the 33.2% websites using CDNs, more pop-
ular websites are less critically dependent on them. For the
websites using CDNs, 85% (top-100K) and 43% (top-100) are
critically dependent on a third-party CDN.
We note that only 33.2% of the top-100K websites use CDNs.
Figure 3 shows that 97.6% of websites that use CDNs use a third-
party CDN. Third-party dependency increases across ranks; i.e.,
less popular websites likely cannot afford setting up a private CDN.
Figure 2: Percentage of websites that use third-party DNS, are criti-
cally dependent, use multiple third-party DNS, and use redundancy
by having private as well as third-party DNS providers. Critical de-
pendency increases across ranks.
Website Trends
Pvt to Single 3rd
Single Third to Pvt
Red. to No Red.
No Red. to Red.
Critical dependency
k=100
0.0
1.0
1.0
2.0
-2.0
k=1K k=10K k=100K
7.4
1.6
1.6
1.9
+5.5
10.7
6.0
0.5
0.5
+4.7
9.8
4.2
1.0
1.1
+5.5
Table 3: The percentage of websites per rank in 𝑤𝑒𝑏𝑠𝑖𝑡𝑒 → 𝐷𝑁 𝑆
dependency trends in 2016 vs. 2020. Red. is short for redundancy.
Critical dependency increased in 2020.
Moreover, 85% of websites in this set (i.e., 28% of all sites) are
critically dependent on a third-party CDN provider. We see that
redundancy decreases with popularity; i.e., the top-100 websites
use redundancy more often than the top-100K websites.
Observation 4: We observe no significant change in critical
dependency on CDNs in 2020 relative to 2016.
In 2016, 28.4% of the top 100K websites used CDNs in Alexa’s
2016 rankings. In 2020, this number has increased to 39.9% for the
same set of websites. Specifically, 18.6% additional websites have
started using a CDN, while 6.8% have stopped using a CDN. Table 4
shows a rank-wise (as per the Alexa 2016 list) summary of the
trends we observe in websites in 2016 vs. 2020. 0.5% of websites
have moved to a single third-party CDN, while none have shifted
to a private CDN. Moreover, 1.1% of websites have given up redun-
dancy, including twitch.tv, walmart.com, fiverr.com. Also, 1.6% of
the websites such as paypal.com, imdb.com, ebay.com, have adopted
redundancy. Overall, 1.6% of websites have become critically de-
pendent and 1.6% have become redundantly provisioned. Hence,
we observe no significant change in third party dependency, criti-
cal dependency, and redundancy of top-100K websites. However,
critical dependency has decreased in more popular websites.
639
Analyzing Third Party Service Dependencies in Modern Web Services: Have We Learned from the Mirai-Dyn Incident?
IMC ’20, October 27–29, 2020, Virtual Event, USA
Figure 3: Percentage of websites that use third-party CDNs, are crit-
ically dependent, use multiple CDNs to have redundancy. Critical
dependency increases across ranks.
k=100
Website Trends
Pvt to Single 3rd party CDN 0.0
0.0
3rd Party CDN to Pvt
3.0
Red. to No Red.
9
No Red. to Red.
Critical dependency
-6.0
k=1K k=10K k=100K
0.3
0.0
2.7
6.8
-3.8
0.5
0.0
1.1
1.6
+0.0
0.8
0.0
1.2
3.0
-1.0
Table 4: Percentage of websites per rank in 𝑤𝑒𝑏𝑠𝑖𝑡𝑒 → 𝐶𝐷𝑁 de-
pendency trends in 2016 vs. 2020. Red. is short for redundancy. We
observe no significant change between 2016-2020.
Figure 4: Percentage of websites that use HTTPS, use third-party
CA providers, and enable OCSP stapling shown per rank and hence
are not critically dependent. Critical dependency is slightly higher
in less popular sites.
Website Trends
Stapling to No Stapling
No Stapling to Stapling
Critical dependency
k=100
7.5
3.7
+3.8
k=1K k=10K k=100K
6.2
14.7
-8.5
9.7
9.9
-0.2
9.1
12.9
-3.8
Table 5: The percentage of websites in 𝑤𝑒𝑏𝑠𝑖𝑡𝑒𝑠 → 𝐶𝐴 dependency
trends in 2016 vs. 2020. We observe no significant change in critical
dependency.
Observation 5: More popular websites are slightly less criti-
cally dependent on third-party CAs.
Our data indicate that 78% of the top-100K websites support
HTTPS. 77% use a third-party CA, and 60% are critically dependent
on the CA. Figure 4 shows the percentage of websites that support
HTTPS across ranks, which is marginally higher for more popular
websites. This may be because popular websites care more about
user trust, due to a larger user base. The use of third party CAs is
also higher (77% in top-100K) in less popular websites as compared
to more popular (71% in top-100) websites. Critical dependency
in CAs (support for OCSP stapling) remains low across all ranks
as compared to DNS and CDNs, being only 17% for the top-100K
websites. Hence, 61% of the top-100K websites are critically depen-
dent on CAs as they do not support OCSP stapling. Low support of
OCSP stapling may be due to poor/faulty support across browsers
and web servers (Apache and Nginx) [6, 14]. Also, OCSP stapling
is ineffective unless the browser knows when to expect a stapled
response, as an attacker can just omit OCSP status when using a re-
voked certificate causing a soft-fail [14]. The must-staple extension
addresses this but has yet to gain widespread support [14].
Observation 6: We observe no significant change in critical
dependency of websites on CAs in 2016 vs. 2020.
In 2016, 46,529 websites from Alexa’s 2016 list of top-100K sup-