away. Each transmitted frame could also be classiﬁed into
three categories: not received, received with integrity corrup-
tion and received without integrity corruption. The experiment
was performed on all Zigbee channels, and the corresponding
results are shown in table III.
In both cases and for all channels, the rate of valid frames
received without integrity corruption by the RZUSBStick is
very satisfactory, with an average of 97.5% for nRF52832 and
99.438 % for CC1352-R1. We observe a similar phenomenon
to the one observed during the assessment of the reception
primitive for channels 17 and 18, related to the simultaneous
use of WiFi channel number 6 in our experimental environ-
ment. The rate of corrupted frames received is also slightly
higher for nRF82832 (with an average of 0.8125 % while the
CC1352-R1 did not miss any frame).
VI. ATTACK SCENARIOS
In this section, we demonstrate the WazaBee attack by
describing two attack scenarios we actually carried out. Two
main attack scenarios, considering various devices, have been
implemented. The ﬁrst scenario illustrates the implementation
of a subset of the WazaBee primitives on an unrooted An-
droid phone, using an high level API. The second scenario
presents the implementation of WazaBee on a commercial BLE
tracker device in order to perform complex Zigbee attacks.
We purposely chose these devices in order to illustrate the
critical impact of the WazaBee attack. Indeed, Android phones
and BLE trackers are very common devices, that anyone may
TABLE III: Reception and transmission primitives assessment results
Reception primitive
nRF52832
corrupted
CC1352-R1
corrupted
Transmission primitive
nRF52832
corrupted
CC1352-R1
corrupted
Channels
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
valid
100
100
100
100
99
100
98
95
100
100
98
95
97
99
100
97
0
0
0
0
1
0
1
2
0
0
2
2
0
1
0
2
valid
100
100
100
100
100
97
99
100
100
100
100
98
96
100
100
100
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
valid
98
100
95
97
100
90
94
91
97
100
100
100
100
100
100
98
0
0
1
3
0
3
3
2
0
0
0
0
0
0
0
1
valid
100
100
100
100
100
100
96
95
100
100
100
100
100
100
100
100
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
possess. The successful implementation of WazaBee on these
devices shows that this attack may actually be deployed easily
and massively.
Short videos of these two attack scenarios are respectively
available at: https://youtu.be/a16LYLwvcZw and https://youtu.
be/uDxD1jTNnoE.
A. Experimental setup
A main experimental setup is used for the two attack
scenarios, based on a simple domotic Zigbee network with
the PANID 0x1234. This network is composed of two XBee (a
commercial implementation of ZigBee) transceivers. The ﬁrst
one (16-bits address 0x0063) is an end device simulating a
sensor transmitting an integer (e.g. the temperature) every two
seconds while the second one (16-bits address 0x0042) is a
coordinator which acknowledges the data and displays it on a
HTML graph. The channel 14, which matches the 2420 MHz
frequency, is used.
B. Scenario A: injecting 802.15.4 frames using a smartphone
The ﬁrst attack scenario was the injection of arbitrary
802.15.4 frames into our network, using an unrooted Android
smartphone. For instance, an attacker could use a malware
installed on an employee’s phone to launch such an attack
remotely, allowing him to perform multiple active attacks
targeting Zigbee networks. It could also allow to exﬁltrate
discreetly sensitive data using a protocol that is not monitored.
As mentioned earlier, implementing the two primitives of
the WazaBee attack requires the attacker to gain control over
the lowest layers of the BLE protocol stack. However, the aim
of the experiment is to test if an attacker that can only interact
via an high level API could be able to implement at least a sub-
set of the attack. As a consequence, this scenario was evaluated
with the following contraints: 1) the smartphone is unrooted;
2) the attacker has only access to standard Android API with
common permissions, and 3) the attack should be compliant
with any BLE 5-compliant device, without the need to divert
speciﬁc hardware components (e.g. InternalBlue [27]).
According to the speciﬁcation, the received frames includ-
ing a wrong CRC are dropped at the controller level and are
not delivered to the host. Therefore, the received 802.15.4
frames are considered as invalid BLE frames and are ﬁltered in
the controller and not forwarded to the host. As a consequence,
the implementation of the reception primitive is not possible
without a low-level access allowing to collect invalid frames.
The implementation of the transmission primitive is also tricky,
because we only have an indirect control over the frequency
and the payload content using a high level API. However, the
extended advertising feature allows a partial implementation
of the transmission primitive. Indeed, this feature has some
interesting properties: it allows the transfer of large amount
of data, it can use the 37 data channels without the need to
initiate a BLE connection, it can use the LE 2M physical layer
and it is based on predictable frame formats.
it
layer,
If the device uses LE 1M as primary physical layer and
LE 2M as secondary physical
initially transmits
ADV EXT IND advertisements at 1 MBits/s on the primary
advertising channels (37,38 and 39),
indicating on which
secondary advertising channel and the offset to the start time
the extended advertisement will be transmitted. The channel
selection is based on a pseudo-random algorithm named
Channel Selection Algorithm #2 [20], and is not directly
controllable by the user. Then, the advertiser transmits the
extended advertisement embedding the data provided by the
user (AUX ADV IND) at 2 Mbits/s on the selected channel.
Diverting this feature in order to transmit 802.15.4 frames
can be achieved using the strategy mentioned above to forge
the advertising data. We ﬁrst need to choose the PN sequences
(encoded in MSK) corresponding to the frame to transmit.
Then, we need to add some padding bytes before the frame
(because of the multiple headers included before the data) and
apply the dewhitening function to the resulting data. As this
operation depends on the channel, it allows to select a speciﬁc
Zigbee channel: in our case, we want to transmit data at 2420
MHz (Zigbee channel 14), which corresponds to BLE channel
8, so we perform the dewhitening operation using this BLE
channel as input. The output is then cropped to remove the
padding bytes, then the result is provided as advertising data.
We use a manufacturer data ﬁeld to encapsulate our forged
frame, resulting in a padding size of 16 bytes. Then, the
extended advertising can be enabled using the smallest time
interval in order to increase the probability that the channel
selection algorithm picks our target channel.
We implemented this approach in an android application
running on an unrooted OnePlus 6T smartphone, that fully
supports the extended advertising feature. We were able to
inject forged data packets to our target zigbee network, as
illustrated in ﬁgure 4.
Fig. 4: Forged data packets injection from a OnePlus 6T
smartphone
This approach is entirely compliant with the speciﬁcation
and only uses an high level API, meaning every BLE 5 device
is able to inject 802.15.4 frames into at least eleven channels
(especially those which have common frequencies with BLE
data channels) in the 2.4-2.5GHz ISM band. As a result, it
increases the attack surface of 802.15.4-based protocols.
As we have chosen to implement the attack on a smartphone
with limited permissions, it was not possible to implement the
reception primitive. However, let us note that attackers with
higher privileges may be able to gain a low level access and
easily implement the two primitives. For example, Internal-
Blue [27] allows to patch ﬁrmwares of Broadcom and Cypress
controllers, which are common in off-the-shelf devices. If
the attackers are able to reverse engineer the target ﬁrmware
to identify the functions allowing to match the requirements
mentioned in IV-D, they can easily write malicious patches
and add custom code to the ﬁrmware implementing WazaBee
primitives.
C. Scenario B: performing complex Zigbee attacks from a
BLE tracker device
The second attack scenario illustrates the possibility to per-
form complex Zigbee attacks by abusing a BLE smart object.
The impact of such an attack could be signiﬁcant, as it may
allow an attacker to build complex attacks involving legitimate
BLE devices, that will not be identiﬁed as a potential threat to
802.15.4 networks. For example, an employee’s mobile device
(e.g. a smart watch, a tracker ...) could be infected outside the