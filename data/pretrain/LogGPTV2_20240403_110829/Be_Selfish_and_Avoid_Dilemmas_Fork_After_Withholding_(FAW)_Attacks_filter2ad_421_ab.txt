an a(cid:138)acker generates a block, she can withhold it until another
miner generates and propagates another block. (cid:140)en, the a(cid:138)acker
can propagate her block right a(cid:137)er she listens to the block prop-
agation, intentionally causing a fork, for double-spending [31] or
sel(cid:128)sh mining [18, 30, 35] a(cid:138)acks.
Mining Pools: Because successfully generating blocks requires
a non-trivial amount of luck, mining pools have been organized
to reduce variance in the miners’ rewards as mining di(cid:129)culty in-
creases. Most mining pools consist of a manager and multiple
miners. At the start of every round, the manager distributes work
to the miners [37], and every miner uses his computing power to
generate either partial (PPoW) or full (FPoW) PoWs. (cid:140)e di(cid:129)culty
of generating a PPoW is lower than that of an FPoW. For example,
the hash value of a block header can have a 32-bit and 72-bit zero
pre(cid:128)x in a PPoW and in an FPoW, respectively. When a miner
generates a PPoW or an FPoW, he submits it as a share. If a miner is
lucky enough to generate an FPoW, the manager propagates it and
receives a reward, which he shares with the miners in proportion
to their submissions.
2.2 Related Work
We review two related a(cid:138)acks on Bitcoin mining and new Bitcoin
protocol designs in this section.
Sel(cid:128)sh Mining: Sel(cid:128)sh mining [3, 18] generates forks intention-
ally. If an a(cid:138)acker generates an FPoW, she does not propagate it
immediately. As soon as another miner propagates a block, the at-
tacker selectively propagates her withheld blocks according to their
number to generate a fork. (cid:140)is fork may invalidate honest miners’
blocks, and the a(cid:138)acker can improperly earn an extra reward. How-
ever, because the a(cid:138)acker can also lose her block if her branch is not
chosen, she must have greater computational power to make sel(cid:128)sh
mining pro(cid:128)table, especially if her network connection capability
is low [18]. Many researchers have investigated sel(cid:128)sh mining.
Sapirshtein et al. [35] and Nayak et al. [30] showed that the original
sel(cid:128)sh mining scheme is not optimal and provided a new algorithm
to optimize the sel(cid:128)sh mining. (cid:140)e former study [35] modeled
an optimal sel(cid:128)sh mining strategy using the delay parameter of
the Bitcoin network rather than the a(cid:138)acker’s network capability.
It also stated that a pro(cid:128)table sel(cid:128)sh miner can execute a double
spending a(cid:138)ack. Nayak et al. [30] extended the parameters used
for sel(cid:128)sh mining strategy and combined sel(cid:128)sh mining with a
network-level eclipse a(cid:138)ack. Although powerful, sel(cid:128)sh mining is
widely considered to be impractical [10, 30]. Carlsten et al. studied
sel(cid:128)sh mining under a transaction fee regime (a Bitcoin reward
system for the far future) and improved the a(cid:138)ack by considering a
variable reward for each block [11]. Sel(cid:128)sh mining and FAW a(cid:138)acks
are compared in Section 8.
BWH Attack: (cid:140)e BWH a(cid:138)ack was introduced by Rosenfeld [34].
An a(cid:138)acker joins a target pool and then submits only PPoWs, but not
FPoWs, unlike honest pool miners. Because the a(cid:138)acker pretends
to contribute to the target pool and gets paid, the pool su(cid:130)ers
a loss. Courtois et al. [12] generalized the concept of the BWH
a(cid:138)ack, considering an a(cid:138)acker who mines both solo and in pools.
(cid:140)ey showed that the a(cid:138)acker can unfairly earn a greater reward
through a BWH a(cid:138)ack. (cid:140)is a(cid:138)ack was carried out against the
“Eligius” mining pool in 2014, with the pool losing 300 BTC [5].
In this case, the manager found the a(cid:138)acker, who was using only
two Bitcoin accounts and did not submit FPoWs for an extended
period of time. If the a(cid:138)acker had used many more Bitcoin accounts,
distributing computational power across them and masquerading
as many workers, each of whom would mine in the pool for only a
short time before being replaced with a new account, the manager
may not have detected her. Meanwhile, managers can always notice
whether a BWH a(cid:138)ack has occurred by comparing the number of
submi(cid:138)ed PPoWs and FPoWs. However, managers cannot prevent
the a(cid:136)ack. In 2015, Luu et al. [24] found the optimal BWH a(cid:138)ack
strategy against one pool and multiple pools by de(cid:128)ning the power
spli(cid:138)ing game. Eyal [15] modeled the BWH a(cid:138)ack game between
two mining pools. (cid:140)is study showed that such a game results in
the miner’s dilemma, which is analogous to the prisoner’s dilemma,
because it creates mutual loss in the Nash equilibrium. We propose
the FAW a(cid:138)ack, which improves the BWH a(cid:138)ack. (cid:140)e FAW a(cid:138)ack
gives an a(cid:138)acker extra rewards up to four times more than those
for a BWH a(cid:138)acker. Moreover, we show that the miner’s dilemma
may not hold in the FAW a(cid:138)ack game. FAW and BWH a(cid:138)acks
can occur against Ethereum [38], Litecoin [22], Dogecoin [14], and
Permacoin [27] as well as Bitcoin.
New Bitcoin Protocols: Many papers have proposed new proto-
cols to solve various problems with Bitcoin such as sel(cid:128)sh mining,
double spending, and scalability [16, 21, 23, 36]. To prevent BWH
a(cid:138)acks, several works [17, 34] have proposed new two-phase PoW
protocols, dividing work into two smaller cryptographic puzzles.
(cid:140)en, a manager gives one puzzle to miners in his pool and solves
the other himself. As a result, miners cannot know whether their
solutions are FPoWs and cannot execute BWH a(cid:138)acks. Under these
protocols, an FAW a(cid:138)ack also cannot happen. However, Bitcoin
participants do not want to adopt them, for reasons described in
Section 10.3. Luu et al. [25] proposed a decentralized pool protocol
called SmartPool that applies smart contracts. (cid:140)ey argued that at-
tacks on pools would no longer be pro(cid:128)table if SmartPool exists as
only one mining pool in the Bitcoin system. However, SmartPool’s
full adoption is considered to be a long way o(cid:130) [1]. We discuss other
possible defense mechanisms against an FAW a(cid:138)ack in Section 10.3.
3 ATTACK MODEL AND ASSUMPTIONS
In this section, we specify our a(cid:138)ack model and the assumptions
made in the rest of the paper.
3.1 Attack Model
First, an a(cid:138)acker can be a solo miner, or the manager of a closed or
open mining pool. Second, the a(cid:138)acker can launch Sybil a(cid:138)acks [2],
i.e., the a(cid:138)acker can generate an arbitrary number of identities and
join multiple open pools with di(cid:130)erent IDs and Bitcoin accounts.
However, we assume that the a(cid:138)acker cannot join closed pools since
those require private information. (cid:140)ird, the computational power
of an a(cid:138)acker is (cid:128)nite, and she can distribute it into any fraction for
both innocent mining (i.e., working as an honest solo miner) and
in(cid:128)ltration mining (i.e., joining and mining in multiple open pools
to gain extra illicit rewards). If an a(cid:138)acker is the manager of an open
pool, her in(cid:128)ltration mining power (the computational power used
for in(cid:128)ltration mining) should be loyal mining power 1 (the amount
of loyal mining power pools possess is generally a trade secret [15]).
Finally, the rushing adversary can plant many Sybil nodes in the
Bitcoin network, which can simply listen to the propagation of valid
blocks and propagate the a(cid:138)acker’s block preferentially when the
a(cid:138)acker’s block and another block are released simultaneously. By
this means, the a(cid:138)acker can track the propagation of other blocks
and propagate her own as fast as possible using Sybil nodes. Note
that these nodes require very li(cid:138)le computational power because
their role is only to listen and propagate a block; thus planting Sybil
nodes involves negligible computation cost for the a(cid:138)acker.
3.2 Assumptions
For the sake of simplicity, we make the following assumptions,
consistent with other a(cid:138)acks on Bitcoin mining [15, 18, 24]:
(1) (cid:140)e normalized total computational power of the Bitcoin
system is 1. (cid:140)erefore, any computational power is rep-
resented as a fraction of this total. Also, we assume that
the computational power of any one miner or mining pool
is less than 0.5 to prevent a “51% a(cid:138)ack” on the Bitcoin
network [9].
(2) No managers or miners, except FAW a(cid:138)ackers, launch
a(cid:138)acks. We do not consider other a(cid:138)acks, such as BWH
a(cid:138)acks or sel(cid:128)sh mining, alongside the FAW a(cid:138)ack.
(3) (cid:140)e reward for each valid block is normalized to 1 BTC
instead of the current 12.5 BTC. Moreover, we calculate
the reward as a probabilistic expectation for each round.
(4) We do not consider unintentional forks. (cid:140)is assumption
is reasonable because the fork rates are negligible (the re-
cent stale block rate is about 0.41% [19]). Because of this
assumption, the reward for a miner is equal to the prob-
ability of (cid:128)nding a block by the miner for one round. A
period of (cid:128)nding a block by a miner has an exponential
distribution with mean inversely proportional to his com-
putational power. (cid:140)erefore, the probability of (cid:128)nding a
1De(cid:128)ned by Eyal as “mining power ...either run directly by the pool owners or sold
as a service but run on the pool owners’ hardware” [15].
block from a miner for one round is the same as his relative
computational power.
(5) When a miner in a pool generates an FPoW, the manager
propagates a block corresponding to the FPoW and earns
the reward. (cid:140)en, the manager distributes the reward to
each miner in his pool in proportion to the miners’ sub-
mission shares for each round.
4 ATTACK OVERVIEW
We describe a novel a(cid:138)ack, called an FAW a(cid:138)ack, combining sel(cid:128)sh
mining and a BWH a(cid:138)ack. (cid:140)e core idea is that an a(cid:138)acker can split
his computing power between innocent mining and in(cid:128)ltration min-
ing, aiming at a target pool (as with a BWH a(cid:138)ack). However, when
the a(cid:138)acker (cid:128)nds an FPoW as an in(cid:128)ltration miner, she deviates
from the pa(cid:138)ern of a BWH a(cid:138)ack. In a BWH a(cid:138)ack, the a(cid:138)acker
drops the FPoW; in an FAW a(cid:138)ack, she does not immediately prop-
agate it to the pool manager, waiting instead for an external honest
miner to publish theirs, at which point she propagates the FPoW to
the manager hoping to cause a fork (similar to sel(cid:128)sh mining). We
present not only the FAW a(cid:138)ack against one target pool but also
a generalized FAW a(cid:138)ack against multiple pools simultaneously.
Finally, we present an FAW a(cid:136)ack game in which two pools a(cid:138)ack
each other via in(cid:128)ltration. (cid:140)e following are detailed descriptions
of these FAW a(cid:138)ack scenarios.
4.1 One Target Pool
Considering an a(cid:138)acker who targets one open pool, the FAW a(cid:138)ack
proceeds as follows. First, an a(cid:138)acker conducts both innocent
and in(cid:128)ltration mining by distributing her computational power
to join the target pool.
If the a(cid:138)acker (cid:128)nds an FPoW through
innocent mining, she propagates it and earns a legitimate pro(cid:128)t.
However, if the a(cid:138)acker (cid:128)nds an FPoW in the target pool, she
does not submit it immediately. A(cid:137)er this, there are three possible
paths the a(cid:138)acker can take. 1) When she notices that other miners,
not participating in the target pool, propagate a valid block, she
immediately submits her FPoW to the manager of the target pool,
who propagates her FPoW to other Bitcoin nodes, generating a fork
in the Bitcoin network. 2) When an honest miner in the target pool
(cid:128)nds an FPoW, the a(cid:138)acker discards her FPoW. 3) When she (cid:128)nds
another FPoW through innocent mining, she discards the FPoW
generated by in(cid:128)ltration mining.
In summary, the FAW a(cid:138)ack
generates intentional forks propagated by the target pool, while the
BWH a(cid:138)ack never does so. (cid:140)is detailed algorithm is Algorithm 1
in Appendix A.
Based on this simple description, it is easy to see that the FAW
a(cid:138)ack is at least as pro(cid:128)table as the BWH a(cid:138)ack. Note that the
pro(cid:128)t from the FAW a(cid:138)ack is equal to that for the BWH a(cid:138)ack
in cases 2) and 3). In other words, additional pro(cid:128)t comes from
case 1). Suppose the a(cid:138)acker submits multiple FPoWs in case 1)
over multiple rounds. If none of the FPoWs are chosen as the main
chain, the pro(cid:128)t from the FAW a(cid:138)ack is equal to that from the BWH
a(cid:138)ack. If any of the a(cid:138)acker’s FPoWs are chosen, the target pool
receives a reward, which is distributed among miners including the
in(cid:128)ltration miner. (cid:140)is gives additional pro(cid:128)t to the a(cid:138)acker.
Moreover, a manager’s behavior can vary. If a manager notices
a valid block from outside the pool before the in(cid:128)ltration miner
submits her FPoW, an honest manager would discard the FPoW
generated by the in(cid:128)ltration miner. However, if accepting the
in(cid:128)ltration miner’s FPoW is more pro(cid:128)table (or would cause a
smaller loss for the manager), a rational manager may discard the
FPoW from the outside instead. Otherwise, if an a(cid:138)acker propagates
the withheld FPoW to the manager before the manager notices
an external block propagation, the manager always selects the
FPoW from the a(cid:138)acker regardless of his rational consideration.
We discuss this rational behavior in more detail in Section 10.
4.2 Multiple Target Pools
An a(cid:138)acker can target multiple pools to generate a higher reward.
For simplicity, we (cid:128)rst consider an FAW a(cid:138)ack executed against two
pools (Pool1 and Pool2). A(cid:137)er the a(cid:138)acker joins the two target pools,
she distributes her computational power for innocent mining and
in(cid:128)ltration mining between these pools. As in the single-pool case,
when the a(cid:138)acker (cid:128)nds an FPoW in Pool1 or Pool2, she withholds it
to generate a fork. However, in this case, she may (cid:128)nd two di(cid:130)erent
FPoWs, one for each pool, within a single round and withhold both.
If another honest miner propagates an FPoW, the a(cid:138)acker submits
both FPoWs to both managers simultaneously. (cid:140)is behavior raises
the winning probability of the in(cid:128)ltration miners’ blocks in the fork
by reducing propagation delay. (cid:140)erefore, the a(cid:138)acker can make a
fork that has two branches generated by herself and another found
by an external honest miner, by le(cid:138)ing two target pools release
two di(cid:130)erent valid blocks to the Bitcoin network at the same time.
When the a(cid:138)acker targets n pools, she can execute the FAW a(cid:138)ack
as above to generate a fork with n + 1 branches. (cid:140)e detailed
algorithm is Algorithm 2 in Appendix A.
4.3 Pool vs Pool
(cid:140)e activities of mining pools can be interpreted as a game in the
Bitcoin system, with each pool choosing its strategy. We consider
the FAW a(cid:138)ack as a strategy that pools can choose to earn higher
rewards, meaning that an FAW a(cid:136)ack game can occur similarly to
a BWH a(cid:138)ack case [15]. For simplicity, we assume that two pools,
Pool1 and Pool2, play the game and all other miners are solo miners.
Pool1 and Pool2 (cid:128)rst divide their own computational power into
two parts for innocent and in(cid:128)ltration mining, and each pool in-
(cid:128)ltrates the other using its in(cid:128)ltration mining power. While both
conduct innocent and in(cid:128)ltration mining, if Pool1 (cid:128)nds an FPoW
in Pool2 by in(cid:128)ltration mining, it withholds it. A(cid:137)er that, if Pool1
generates an FPoW using innocent mining, it throws away its with-
held FPoW generated by in(cid:128)ltration mining, and the Pool1 manager
propagates the FPoW from its innocent mining. (cid:140)e same action can
be expected from Pool2 with regard to Pool1. Otherwise, if someone
from outside both pools broadcasts a valid block, the pools generate
a fork using their withheld FPoWs. (cid:140)erefore, a fork created under
these conditions can include two or three branches (three branches
might occur if both Pool1 and Pool2 have withheld FPoWs obtained
from in(cid:128)ltration mining). If both competing pools generate FPoWs
through in(cid:128)ltration mining, they select the FPoW generated from
the opponent’s in(cid:128)ltration mining for the main chain. For example,
the manager of Pool1 selects the FPoW generated by in(cid:128)ltration
mining of Pool2 in Pool1.
5 FAW ATTACKS AGAINST ONE POOL
In this section, we analyze the optimal behavior and maximum
reward for an a(cid:138)acker theoretically and quantitatively when she
targets one pool. Our results show that the extra reward for an FAW
a(cid:138)ack is always equal to or greater than that for a BWH a(cid:138)ack.
5.1 (cid:135)eoretical Analysis
We mathematically analyze our a(cid:138)ack against one pool and derive
the optimal behavior of an a(cid:138)acker. (cid:140)e relevant parameters are as
follows:
mining will be selected as the main chain
α: Computational power of the a(cid:138)acker
β: Computational power of the victim pool
τ: A(cid:138)acker’s In(cid:128)ltration mining power as a proportion of α
c: Probability that an a(cid:138)acker’s FPoW through in(cid:128)ltration
(cid:140)e a(cid:138)acker uses computational power (1 − τ)α for innocent min-
ing and τ α for in(cid:128)ltration mining. Note that β does not include
the a(cid:138)acker’s in(cid:128)ltration mining power in the victim pool. (cid:140)e
parameter c is a coe(cid:129)cient closely related to the topology of the
Bitcoin network [28] and the a(cid:138)acker’s network capability. 2 We