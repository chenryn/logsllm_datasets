:::
::: section
::: titlepage
# [⁠]{#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Performance_Monitoring_Tools.html#sect-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Performance_Monitoring_Tools-SystemTap}2.14. SystemTap {.title}
:::
::: para
SystemTap
是一个跟踪和探测工具，使用户可以详尽地监控和分析操作系统的活动，尤其是内核活动。它提供的信息类似于
top、ps、netstat 和 iostat
工具的输出，但包括筛选和分析所收集数据的额外选项。
:::
::: para
SystemTap
提供对系统活动和应用程序性能更为深入且更为准确的分析，使用户能够精确地找到系统和应用程序的瓶颈。
:::
::: para
关于 SystemTap 的更多信息，请见红帽企业版 Linux 7 《*SystemTap
Beginner\'s Guide*》 和红帽企业版 Linux 7 《*SystemTap TapSet
Reference*》。两本书都可从
中获取。
:::
:::
::: section
::: titlepage
# [⁠]{#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Performance_Monitoring_Tools.html#sect-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Performance_Monitoring_Tools-OProfile}2.15. OProfile {.title}
:::
::: para
OProfile
是一个全系统性能监控工具。它使用处理器的专业性能监控硬件来检索关于内核和系统可执行文件的信息，以便确定某些事件的频率，比如引用内存时，就接收第二级缓存请求数和硬件请求数。OProfile
也可用于确定处理器的使用率，并确定最常使用的应用程序和服务。
:::
::: para
但 OProfile 有一些局限性：
:::
::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
-   ::: para
    性能监控样本可能不太准确。由于处理器可能无法执行指令，样本就会记录一个附近的指令，而不是记录触发中断的指令。
    :::
-   ::: para
    OProfile
    希望程序多次启动和停止。这样的话多次运行得到的样本就可以累积，用户可能需要清除上一次运行的样本数据。
    :::
-   ::: para
    OProfile 集中识别 CPU
    访问限制的进程问题。因此，对于等待锁定其他事件来识别睡眠状态的进程并无帮助。
    :::
:::
::: para
关于 OProfile 的更多信息，请见 [第 A.15 节
"OProfile"](#appe-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Tool_Reference.html#sect-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Tool_Reference-OProfile){.xref}
或 *Red Hat Enterprise Linux 7 System Administrator\'s Guide*，可从
中获取。此外还可参见系统中位于
`/usr/share/doc/oprofile-version`{.filename} 的文档。
:::
:::
::: section
::: titlepage
# [⁠]{#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Performance_Monitoring_Tools.html#sect-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Performance_Monitoring_Tools-Valgrind}2.16. Valgrind {.title}
:::
::: para
Valgrind
提供大量的检测及分析工具以帮助提高应用程序的性能。这些工具能检测内存和与线程相关的错误，同样也能检测堆、栈和数组的超限运行，使用户能够轻松地定位和修改应用程序代码错误。它也可以配置缓存、堆和分支预测来确定能增加应用程序速度并最小化内存使用率的因素。
:::
::: para
Valgrind 通过在合成的 CPU
上运行应用程序来进行分析，并在执行时对现有的应用程序代码进行测试。之后显示的评论会清楚地标识出每个参与应用程序执行的进程至用户指定文件、文件描述符或网络
socket。要注意的是执行测试代码会花上正常执行情况下四至五十倍的时间。
:::
::: para
Valgrind 可以按原样应用于应用程序，不需要进行重新编制。但由于 Valgrind
使用调试信息来定位编码中的问题，若应用程序和支持库没有启用调试信息编制，红帽建议进行程序编制以便能包含该信息。
:::
::: para
Valgrind 也与 GNU 项目调试器 （gdb）一起使用来提高调试效率。
:::
::: para
Valgrind 及其附属工具有助于内存分析。关于使用 Valgrind
分析系统内存，详情请见 [第 4.2.2 节 "用 Valgrind
分析应用程序的内存使用量"](#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Memory.html#sect-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Monitoring_and_diagnosing_performance_problems-Profiling_application_memory_usage_with_Valgrind){.xref}。
:::
::: para
关于 Valgrind，详情请见红帽企业版 Linux 7 开发者指南，可从
中获取。
:::
::: para
关于使用 Valgrind，详情请见手册页：
:::
``` screen
$ man valgrind
```
::: para
当 valgrind 数据包安装后，附带文档可以在
`/usr/share/doc/valgrind-version`{.filename} 中找到。
:::
:::
:::
[]{#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-CPU.html}
::: chapter
::: titlepage
# [⁠]{#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-CPU.html#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-CPU}第 3 章 CPU {.title}
:::
::: para
本章对红帽企业版 Linux 7 中会影响应用性能的
CPU（中央处理器）硬件细节及配置选择进行了概述。＜[第 3.1 节
"注意事项"](#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-CPU.html#sect-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-CPU-Considerations){.xref}
＞详述了与 CPU 相关的会影响性能的因素。 ＜[第 3.2 节
"监控和诊断性能问题"](#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-CPU.html#sect-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-CPU-Monitoring_and_diagnosing_performance_problems){.xref}
＞教您如何使用红帽企业版 Linux 7 的工具来诊断与 CPU
硬件或配置细节相关的性能问题。＜ [第 3.3 节
"配置建议"](#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-CPU.html#sect-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-CPU-Configuration_suggestions){.xref}＞
详述了可用以解决在红帽企业版 Linux 7 中与 CPU
相关的性能问题的工具和策略。
:::
::: section
::: titlepage
# [⁠]{#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-CPU.html#sect-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-CPU-Considerations}3.1. 注意事项 {.title}
:::
::: para
阅读本章来了解以下因素是如何影响系统和应用程序性能的。
:::
::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
-   ::: para
    处理器如何互相连接，并且如何连接到相关资源，如内存。
    :::
-   ::: para
    处理器如何为执行操作调度线程。
    :::
-   ::: para
    处理器如何处理红帽企业版 Linux 7 中的间断。
    :::
:::
::: section
::: titlepage
## [⁠]{#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-CPU.html#sect-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Considerations-System_Topology}3.1.1. 系统拓扑 {.title}
:::
::: para
在现代计算机技术中，一个＂[*中央*]{.emphasis}＂处理单元的观念是误导性的，因为大部分现代化的系统都有多个处理器。这些处理器是如何相互连接，并且如何连接至其他系统资源
---＂[*系统拓扑*]{.emphasis}＂---
会对系统和应用程序的性能以及系统调节选项产生巨大的影响。
:::
::: para
现代计算机技术主要运用两种主要的拓扑类型
:::
::: variablelist
[⁠]{#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-CPU.html#varl-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-System_Topology-Symmetric_Multi_Processor_SMP_topology}[SMP 拓扑]{.term}
:   ::: para
    SMP（对称多处理器）拓扑允许所有的处理器同时访问内存。然而，由于内存访问权限的共享性和平等性，固然会迫使所有
    CPU 及 SMP
    系统序列化的内存访问权限的局限性增加，目前这种情况常不被接受。因此，几乎所有现代服务器系统都是
    NUMA（非一致性内存访问）机器。
    :::
[⁠]{#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-CPU.html#varl-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-System_Topology-Non_Uniform_Memory_Access_NUMA_topology}[NUMA 拓扑]{.term}
:   ::: para
    比起 SMP 拓扑，NUMA（非一致性内存访问）拓扑是近来才开发的。在 NUMA
    系统中，多个处理器物理分组至一个 socket。每个 socket
    都有一个专用内存区，对该内存进行本地访问的服务器统称为一个节点。
    :::
    ::: para
    同一个节点上的服务器能高速访问该节点的存储体，但访问其他节点上的存储体速度就较慢。因此，访问非本地存储体会造成性能的损失。
    :::
    ::: para
    考虑到性能损失，服务器执行应用程序时，NUMA
    拓扑结构系统中对性能敏感的应用程序应访问同一节点的内存，并且应尽可能地避免访问任何远程内存。
    :::
    ::: para
    因此，在调节 NUMA
    拓扑结构系统中的应用程序性能时，重要的是要考虑这一应用程序的执行点以及最靠近此执行点的存储体。
    :::
    ::: para
    在 NUMA 拓扑结构系统中，`/sys`{.filename}
    文件系统包含处理器、内存及外围设备的连接信息。`/sys/devices/system/cpu`{.filename}
    目录包含处理器在系统中相互连接的详情。
    `/sys/devices/system/node`{.filename} 目录包含系统中 NUMA
    的节点信息以及节点间的相对距离。
    :::
:::
::: section
::: titlepage
### [⁠]{#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-CPU.html#sect-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-System_Topology-Determining_system_topology}3.1.1.1. 确定系统拓扑结构 {.title}
:::
::: para
很多指令能帮助用户了解系统的拓扑结构。`numactl --hardware`{.command}
指令概述了系统的拓扑结构。
:::
``` screen
$ numactl --hardware
available: 4 nodes (0-3)
node 0 cpus: 0 4 8 12 16 20 24 28 32 36
node 0 size: 65415 MB
node 0 free: 43971 MB
node 1 cpus: 2 6 10 14 18 22 26 30 34 38
node 1 size: 65536 MB
node 1 free: 44321 MB
node 2 cpus: 1 5 9 13 17 21 25 29 33 37
node 2 size: 65536 MB
node 2 free: 44304 MB
node 3 cpus: 3 7 11 15 19 23 27 31 35 39
node 3 size: 65536 MB
node 3 free: 44329 MB
node distances:
node   0   1   2   3 
  0:  10  21  21  21 
  1:  21  10  21  21 
  2:  21  21  10  21 
  3:  21  21  21  10
```
::: para
`lscpu`{.command} 指令由 [util-linux]{.package} 数据包提供，包括 CPU
体系结构信息，如 CPU 数量、线程数、内核数、 socket 数量以及 NUMA
节点数等。
:::
``` screen
$ lscpu
Architecture:          x86_64
CPU op-mode(s):        32-bit, 64-bit
Byte Order:            Little Endian
CPU(s):                40
On-line CPU(s) list:   0-39
Thread(s) per core:    1
Core(s) per socket:    10
Socket(s):             4
NUMA node(s):          4
Vendor ID:             GenuineIntel
CPU family:            6
Model:                 47
Model name:            Intel(R) Xeon(R) CPU E7- 4870  @ 2.40GHz
Stepping:              2