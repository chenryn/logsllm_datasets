随着组织的发展，这种复杂实践得使用使得组织建立了参照平台，以涵盖其
建立的普遍类型软件。这些类型软件作为安全的框架，使开发人员可以以尽量低
的漏洞风险开发软件。
13
构造
措施概观
威胁评估 更多信息请见第46页
TA1 TA2 TA3
目标 确定并了解组织
和单个项目的高
级别威胁。
提高威胁评估的
准确性，并深入了
解每个项目的细
节。
将补偿控制与对
内部和第三方软
件的每个威胁具
体联系起来。
措施 A. 建立并维护特
定应用程序的
威胁模型；
B. 根据软件架构
建立攻击者概
况。
A. 建立并维护每
个项目的滥用
用例模型；
B. 为威胁的度量
采用一个权重
系统。
A. 明确评估来自
第三方组件的
风险；
B. 用补偿控制详
细描述威胁模
型。
安全需求 更多信息请见第50页
SR1 SR2 SR3
目标 在软件需求分析
阶段明确地将安
全考虑在内。
根据业务逻辑和
已知风险增加安
全需求的深度。
为所有软件项目
和第三方的附属
项目强制要求安
全需求。
措施 A. 从业务功能推
导出安全需
求；
B. 为需求评估安
全和遵守指
导。
A. 为资源和能力
建立一个访问
控制矩阵；
B. 根据已知风险
指定安全需
求。
A. 将安全需求写
入供应商协议
中；
B. 为安全需求扩
展审计计划。
安全架构 更多信息请见第54页
SA1 SA2 SA3
目标 将主动安全指导
的想法引入到软
件设计过程中。
将软件设计过程
引导向已知安全
服务和默认安全
设计。
正式控制软件设
计过程并验证安
全部件的使用。
措施 A. 维护推荐的软
件框架列表；
B. 将安全原则明
确运用到设计
中。
A. 明确并促进安
全服务和基础
设施；
B. 明确来自架构
的安全设计模
式。
A. 建立正式的参
照架构和平
台；
B. 验证框架、模
式和平台的使
用。
 14
验证
安全实践描述
设计审核
设计审核实践（DR）注重于针对与安全相关的问题评估软件设计和架构。
这使得组织能够在软件开发的早期检测到架构层面的问题，从而避免因安全问题
而导致以后由于重构所带来地潜在昂贵成本。
从简便的活动开始，了解有关架构的安全细节，组织进行了更加正式的检验
方式，以验证安全机制提供的完整性。在组织层面上，设计审核服务建立并提供
给利益相关者。
在一个复杂的形式下，该实践的提供涉及了数据级别的详细设计检验，以及
期待基准线的实施。为在发布以前，执行设计评估和审核检验。
代码审核
代码审核实践（CR）注重于在源代码级别上的软件检验，以发现安全漏洞。
代码级的漏洞一般在概念上简单易懂，但即便是开发人员也可以很容易地犯下错
误，使软件存在潜在的安全漏洞而被利用。
首先，组织使用简便的检查列表，并针对有效性，仅检查软件的最关键模块。
但是，组织使用自动化的技术，可以大大提高覆盖面和代码审核的效果。
该复杂实践的提供，将代码审核深深地整合到开发过程中，使项目团队能够
及早地发现问题。这也使组织能够更好地进行审计，并在发布以前为代码审核结
果设立期望。
安全测试
安全测试实践（ST）注重于在实时环境中检验软件，以发现安全问题。这
些测试活动通过在与预期运行环境相同的情况下运行，检查软件的保证用例，从
而避免那些不易发现的操作配置错误或业务逻辑中的错误再次发生。
从渗透测试和基于软件功能的高级别测试用例开始，组织使用自动化的安全
测试方法以覆盖更多的测试用例，以发现系统中可能存在的漏洞。
在一个高级的形式下，该实践的提供涉及了自定义的自动化测试，以建立一
个覆盖了详细的安全应用特定问题的测试机制。由于提供了在组织级别的其他可
视性，安全测试使组织在发布以前能为安全测试结果设置一个最低预期。
15
验证
措施概观
设计审核 更多信息请见第58页
DR1 DR2 DR3
目标 为软件设计提供
专门的审核，以确
保排除已知风险
的最低线。
根据安全的最佳
实践为软件设计
审核提供评估服
务。
需求评估并验证
已完成部分，以详
细了解保护机制。
措施 A. 确定软件攻击
层面；
B. 根据已知安全
需求分析设
计。
A. 检查提供安全
机制的完整
性；
B. 为项目团队部
署设计审核服
务。
A. 为敏感资源开
发数据流图；
B. 为设计审核建
立发布关卡。
代码审核 更多信息请见第62页
CR1 CR2 CR3
目标 随机查找基本的
代码级漏洞和其
他高风险安全问
题。
通过自动化方式
在开发过程中使
代码审核更加准
确和有效。
必须进行全面的
代码审核过程，以
发现语言级别和
特定应用程序的
风险。
措施 A. 根据已知安全
需求建立审核
检查列表；
B. 为高风险代码
执行定点审