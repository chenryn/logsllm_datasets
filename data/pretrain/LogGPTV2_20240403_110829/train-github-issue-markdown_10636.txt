React version: 18.2
## Steps To Reproduce
  1. I have multiple async methods that fetch data from API on demand.
  2. This data needs to be loaded initially on page load and also in case of refresh button pressed by the user
  3. Without React.StrictMode the abort controller aborted = false
  4. With React.StrictMode the abort controller gets set to aborted = true
## Example code:
    import { useEffect, useState } from "react";
    import axios from "axios";
    export default function App() {
      const [data, setData] = useState([]);
      const [dataLoading, setDataLoading] = useState(false);
      const controller = new AbortController();
      const { signal } = controller;
      const getData = async () => {
        console.log("getData API call");
        setDataLoading(true);
        return axios
          .get(`/api/v1/health`, {
            signal
          })
          .then((res) => {
            setData(["data: ", "loaded", " successfully"]);
          })
          .catch((err) => {
            console.log("getData caught error");
            console.log({ err });
          })
          .finally(() => setDataLoading(false));
      };
      useEffect(() => {
        getData();
        return () => {
          console.log("CONTROLLER ABORT");
          controller.abort();
        };
      }, []);
      const refreshData = async () => {
        await getData();
      };
      return (
          {data.length ? (
            data.map((val) => val)
          ) : (
            {dataLoading ? "Loading..." : "Data not found."}
          )}
      );
    }
    function Actions({ onRefresh }) {
      return (
          Refresh
      );
    }
Console log produces the following result:
    getData API call
    CONTROLLER ABORT
    getData API call
    getData caught error
    {err: CanceledError}
    getData caught error
    {err: CanceledError}
## Link to code example:
https://codesandbox.io/s/react-18-abort-controller-bug-v3v4oi
## The current behavior
The second rendering of the component causes the controller to go from aborted
false -> true.
## The expected behavior
Please suggest how else can we use AbortController without duplicating logic
and what are the best practices for doing so going forward.
PS: I'm aware of the React.StrictMode changes in React 18, but I can't seem to
find another solution to this problem other than move all the fetch logic
inside useEffect, which solves the problem, but cannot be isolated for reuse.