## IMPORTANT: DevOps Kit (AzSK) is being sunset by end of FY21. More details [here](../ReleaseNotes/AzSKSunsetNotice.md)
----------------------------------------------
> The Secure DevOps Kit for Azure (AzSK) was created by the Core Services Engineering & Operations (CSEO) division at Microsoft, to help accelerate Microsoft IT's adoption of Azure. We have shared AzSK and its documentation with the community to provide guidance for rapidly scanning, deploying and operationalizing cloud resources, across the different stages of DevOps, while maintaining controls on security and governance.
AzSK is not an official Microsoft product â€“ rather an attempt to share Microsoft CSEO's best practices with the community..
# PowerShell tips for new AzSK Users
If you are just getting started with AzSK and are also new to PowerShell, this set of tips can get you jump-started by helping you get past 
the initial hurdles relatively smoothly. It will also give you some useful tricks to save time by reusing your work and incrementally 
building your PowerShell expertise. Before you know, you will start feeling the true *power* of PowerShell at your fingertips and, after that, 
using AzSK or any other Azure PowerShell modules will become a breeze.
### List of Tips
- [Use the PowerShell ISE](GettingStarted_PowerShellTipsAzSK.md#use-the-powershell-ise)  
- ['Run Selection' is your friend](GettingStarted_PowerShellTipsAzSK.md#run-selection-is-your-friend)
- [Save your scripts!](GettingStarted_PowerShellTipsAzSK.md#save-your-scripts)
- [Use 'Auto Complete'](GettingStarted_PowerShellTipsAzSK.md#use-auto-complete)
- [Use backtick for long command lines](GettingStarted_PowerShellTipsAzSK.md#use-backtick-for-long-commands)
- [Explore available commands](GettingStarted_PowerShellTipsAzSK.md#explore-available-commands)
- [Use Get-Help](GettingStarted_PowerShellTipsAzSK.md#use-get-help)
- [Avoid module version conflicts](GettingStarted_PowerShellTipsAzSK.md#avoid-module-version-conflicts)
- [Use variables effectively](GettingStarted_PowerShellTipsAzSK.md#use-variables-effectively)  
- [Strings - single or double quote?](GettingStarted_PowerShellTipsAzSK.md#strings---single-or-double-quote)  
- [Listing your subscriptions](GettingStarted_PowerShellTipsAzSK.md#listing-your-subscriptions)  
- [Switching to another subscription](GettingStarted_PowerShellTipsAzSK.md#switching-to-another-subscription) 
- [Comparison operators are different!](GettingStarted_PowerShellTipsAzSK.md#comparison-operators-are-different)
- [A few handy loops](GettingStarted_PowerShellTipsAzSK.md#a-few-handy-loops)  
- [To match or to like?](GettingStarted_PowerShellTipsAzSK.md#to--match-or-to--like) 
----------------------------------------------------------------
### Use the PowerShell ISE
When launching PowerShell, you will note that there are 2 prominent options presented. The PowerShell console or PowerShell ISE.
(The image below shows what appears when you do a Windows-S and type 'PowerShell'). Of these, while either option works for AzSK
from a functionality standpoint, there are some distinct advantages of using the ISE. 
![00_PS_SearchISE](../Images/00_PS_Search_ISE.png)  
 Here are some key benefits of the ISE:
 - You get a part-GUI, part-Console experience. If you have not used the command prompt for a while, this is a friendlier in-between.
 - You get the ability to load, edit, save script files. This is immensely useful when running a bunch of new PS commands for the first time.
 You don't have to save them in some text file and copy from there to run in the console. 
 - You get the benefit of the powerful 'Run Selection' command (see next tip) which can help you get past the learning curve rapidly.
 - You get an embedded console as well. So if you feel like it, you can just type a command in the console as needed. 
 You can even hide the script pane if, for some time, you want to work just within the console. (In a way, the ISE is a GUI-friendly superset of the console.)
 - You can debug scripts, set breakpoints, examine variables, etc. 
 > Note: When using the ISE, you can choose how you want the 'Script Pane' to appear. Usually a side-by-side view is handy because it lets
 you run commands from the script pane and see the outcomes in the PS console on the left. 
 See the image below:
![00_PS_ISEScriptPane](../Images/00_PS_ISE_Script_Pane.png)  
[Back to top...](GettingStarted_PowerShellTipsAzSK.md#list-of-tips)
### Use 'CurrentUser' mode
When you launch PowerShell ISE, you have the choice of running it as 'Administrator' or 'CurrentUser' (default if you just click on the icon). Over the years most 
of us have got habituated to run as 'Administrator'. However, AzSK does not require this. Unless you are running some scripts 
targeted to perform administrative activities on the local system, you should run as 'CurrentUser'. 
By and large you would not even notice any issues while running PS as 'CurrentUser'. Occasionally, if you do some activity that 
attempts to change something in the local PS setup (e.g., installing a new PS module), it might complain that you do not have admin
privilege. However, even in those situations, you can specify the "-Scope CurrentUser" parameter to tell PS that you intend to make
that change only for the current user. Note that the AzSK "iwr" install script uses "-Scope CurrentUser" by default.
[Back to top...](GettingStarted_PowerShellTipsAzSK.md#list-of-tips)
### 'Run Selection' is your friend!
One of the most handy features in the ISE is the 'Run Selection' option. It helps you learn and work past the initial
challenges of PS in an incremental way. You can continue to save your work as you progress and get closer to achieving 
the objective of a script you are working on.
The whole idea with 'Run Selection' (F8) is to let you run just the lines of code you have selected (which can be one or more lines).
This can be done simply by selecting one or more lines from the 'Script Pane' and clicking 'Run Selection' in the toolbar 
(or F8 on the keyboard). The icon is right next to the 'Run Script (F5)' icon. So you have to be careful not to click the former.
'Run Script' runs your entire script pane and that is often not what you want when you are experimenting and improving your
script one or two lines at a time.
![00_PS_RunSelection](../Images/00_PS_RunSelection.PNG)    
If the normal 'Play' button is clicked in the ISE above, then the entire script file will be run from top to bottom. However, if
the 'Run Selection' button is clicked (or F8 is pressed), then only the two script lines (line 21 and line 24) will run leveraging
all the other settings, variables, etc. that have been established in the current context.
Using 'Run Script' has many advantages. For instance:
- you can start with an old script that you have (by opening a saved file) and run just one line that you need (for example to 
initialize some large object or to output a JSON object to a CSV file)
- for single line situations, you don't even have to select the entire line. Just keep the cursor *anywhere* on the line and press 'F8'
- you can have many related small snippets of script in a single large script file with the comfort that you can run a subset of those as you please
- you can literally 'control the flow' of your script. You can run some selection and then choose to run another selection which 
is several lines of code above or below the current selection (or even in another script file altogether). This can be very handy when debugging. 
[Back to top...](GettingStarted_PowerShellTipsAzSK.md#list-of-tips)
### Save your scripts!
It is invaluable to save scripts that you have spent some time on to get them to work...even if it is only a few lines of code. When you 
need to rerun those same lines a few days later, you will not have to go looking for that email or that website link again. It will be
right there in the script file you saved (and most likely also in your recently used file list in the "File" menu of the ISE). 
Also, over each working session you can add a few more useful/valuable lines to your saved scripts and, 
before you know, you will be sitting on a mini treasure of *your own* PowerShell nuggets.
This is why, when you use the ISE, always  use the script pane for most of your work. Each time you make net progress, hit 'Save'. Make sure
you organize scripts in an easy to find folder (e.g., \Desktop\PSScripts) and name script files aptly (e.g., AzSKCmds.ps1, MyAzCmds.ps1, etc.).
[Back to top...](GettingStarted_PowerShellTipsAzSK.md#list-of-tips)
### Use 'Auto Complete'
Whether you are typing a command in the ISE Script Pane or in the console window, all PS commands can be 'auto-completed'.
Auto-complete is activated simply by hitting the 'TAB' key after partially typing something and can be used both for command names and parameters. 
Here are some common ways 'Auto-Complete' can help you learn and use AzSK faster:
- You don't have to spend time tying complete commands. After you have typed the enough characters from the start, you can just 'TAB-complete' 
to get the whole command. E.g., 'Set-AzSKSu' + TAB gives you 'Set-AzSKSubscriptionSecurity'.
- If you are having trouble recollecting the command (but know enough of the starting part), you can just type that and use 'TAB' key multiple times. 
PS will cycle through all commands that have that prefix and let you stop at whichever you actually want to run. E.g., 'Get-AzSKSu' + TAB will
start with 'Get-AzSKSubscriptionSecurityStatus' and then, on further TABs, give you other commands which have the same prefix.
- After the name of the command, you can type just "-" (dash or minus) and TAB one or more times to cycle through the various parameters supported by the command.
You can pause at the parameter you want to use and provides it's value then move on to the next parameter, etc. E.g., 'Get-AzSKSubscriptionSecurityStatus -' 
(not the '-') followed by one or more TABs will give you the parameter choices for the Get-AzSKSubscriptionSecurityStatus command. This saves time and 
eliminates syntax errors from mis-typed parameter names. Usually, commands are designed so that 'auto complete'suggests the most often used (and mandatory) parameters first. 
Additionally, using the auto-complete functionality helps you explore a command and discover its various parameters easily. 
Note that intrinsically PS is case-insensitive (i.e., the exact case you use for command names or parameters does not matter). However,
it is very possible that the target objects you operate on using PS commands (e.g., an Azure storage account or an HDInsight resource) 
may themselves be case-sensitive (for e.g., a storage account name has to be all lower case). 
[Back to top...](GettingStarted_PowerShellTipsAzSK.md#list-of-tips)
### Use backtick for long commands
The backtick (`) character in PS indicates that you want to continue a command to the next line. This is very handy when
you have to type a long command with many parameters. Here's an example:
###### Without backtick: single long line
```PowerShell
Install-AzSKContinuousAssurance -SubscriptionId '2fedc012-3456-7890-abcd-ef0123456479' -ResourceGroupNames 'RG1, RG2, RG3' -LAWSId $lawsId '1fedcba0-1234-5678-9abc-fedcba012345' -LAWSSharedKey 'O1qaz2wsx3edc4rfv5tgb.........9olp0plofA=='
```
###### With backtick: for multi-line continuation
```PowerShell
# Note that the backtick (`) character must be present at the end of every line except the last one
Install-AzSKContinuousAssurance `
                    -SubscriptionId '2fedc012-3456-7890-abcd-ef0123456479' `
                    -ResourceGroupNames 'RG1, RG2, RG3' `
                    -LAWSId $lawsId '1fedcba0-1234-5678-9abc-fedcba012345' `
                    -LAWSSharedKey 'O1qaz2wsx3edc4rfv5tgb.........9olp0plofA=='
```
[Back to top...](GettingStarted_PowerShellTipsAzSK.md#list-of-tips)
### Explore Available Commands
Here are some quick tricks to help you explore various commands in AzSK (and also in other modules).
###### Get all commands available in AzSK
```PowerShell
PS C:\> Get-Command -Module AzSK
CommandType     Name                                              Version    Source 
-----------     ----                                              -------    ------ 
Function        Get-AzSKAccessToken                               3.11.0     AzSK  
Function        Get-AzSKAzureServicesSecurityStatus               3.11.0     AzSK  
Function        Get-AzSKContinuousAssurance                       3.11.0     AzSK  
Function        Get-AzSKControlsStatus                            3.11.0     AzSK  
Function        Get-AzSKExpressRouteNetworkSecurityStatus         3.11.0     AzSK  
Function        Get-AzSKSubscriptionSecurityStatus                3.11.0     AzSK  
Function        Get-AzSKSupportedResourceTypes                    3.11.0     AzSK  
Function        Install-AzSKContinuousAssurance                   3.11.0     AzSK  
Function        Install-AzSKMonitoringSolution                    3.11.0     AzSK  
Function        Remove-AzSKAlerts                                 3.11.0     AzSK  
Function        Remove-AzSKARMPolicies                            3.11.0     AzSK  
... 
(truncated)
```
###### Get all AzSK commands that start with the word 'Get'
```PowerShell
PS C:\> Get-Command -Name Get* -Module AzSK
CommandType     Name                                              Version    Source 
-----------     ----                                              -------    ------ 
Function        Get-AzSKAccessToken                               3.11.0     AzSK
Function        Get-AzSKARMTemplateSecurityStatus                 3.11.0     AzSK
Function        Get-AzSKAzureServicesSecurityStatus               3.11.0     AzSK
Function        Get-AzSKContinuousAssurance                       3.11.0     AzSK
Function        Get-AzSKControlsStatus                            3.11.0     AzSK
Function        Get-AzSKExpressRouteNetworkSecurityStatus         3.11.0     AzSK
Function        Get-AzSKInfo                                      3.11.0     AzSK
Function        Get-AzSKOrganizationPolicyStatus                  3.11.0     AzSK
Function        Get-AzSKSubscriptionSecurityStatus                3.11.0     AzSK
Function        Get-AzSKSupportedResourceTypes                    3.11.0     AzSK
```
###### Get all AzSK commands have 'Subscription' anywhere in the name