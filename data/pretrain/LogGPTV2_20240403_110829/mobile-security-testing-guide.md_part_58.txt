5. Get a backtrace for those methods and try to build a call graph.
Once all methods were identified, you might use this knowledge to reverse engineer the app and try to find out how
the data is being handled. While doing that you might spot new methods involved in the process which you can again
feed to step 3. above and keep iterating between static and dynamic analysis.
423
iOS Platform APIs
In the following example we use Telegram to open the share dialog from a chat and frida-trace to identify which
methods are being called.
First we launch Telegram and start a trace for all methods matching the string "authorizationStatus" (this is a general
approach because more classes apart from CLLocationManager implement this method):
$ frida-trace -U "Telegram" -m "*[* *authorizationStatus*]"
-U connects to the USB device. -m includes an Objective-C method to the traces. You can use a glob
pattern "Glob (programming)") (e.g. with the "" wildcard, `-m "[ authorizationStatus*]" means "include any
Objective-C method of any class containing 'authorizationStatus'"). Type frida-trace -h` for more information.
Now we open the share dialog:
The following methods are displayed:
1942 ms +[PHPhotoLibrary authorizationStatus]
1959 ms +[TGMediaAssetsLibrary authorizationStatusSignal]
1959 ms | +[TGMediaAssetsModernLibrary authorizationStatusSignal]
If we click on "Location", another method will be traced:
11186 ms +[CLLocationManager authorizationStatus]
11186 ms | +[CLLocationManager _authorizationStatus]
11186 ms | | +[CLLocationManager _authorizationStatusForBundleIdentifier:0x0 bundle:0x0]
424
iOS Platform APIs
Use the auto-generated stubs of frida-trace to get more information like the return values and a backtrace. Do the
following modifications to the JavaScript file below (the path is relative to the current directory):
// __handlers__/__CLLocationManager_authorizationStatus_.js
onEnter: function (log, args, state) {
log("+[CLLocationManager authorizationStatus]");
log("Called from:\n" +
Thread.backtrace(this.context, Backtracer.ACCURATE)
.map(DebugSymbol.fromAddress).join("\n\t") + "\n");
},
onLeave: function (log, retval, state) {
console.log('RET :' + retval.toString());
}
Clicking again on "Location" reveals more information:
3630 ms -[CLLocationManager init]
3630 ms | -[CLLocationManager initWithEffectiveBundleIdentifier:0x0 bundle:0x0]
3634 ms -[CLLocationManager setDelegate:0x14c9ab000]
3641 ms +[CLLocationManager authorizationStatus]
RET: 0x4
3641 ms Called from:
0x1031aa158 TelegramUI!+[TGLocationUtils requestWhenInUserLocationAuthorizationWithLocationManager:]
0x10337e2c0 TelegramUI!-[TGLocationPickerController initWithContext:intent:]
0x101ee93ac TelegramUI!0x1013ac
We see that +[CLLocationManager authorizationStatus] returned 0x4 (CLAuthorizationStatus.authorizedWhenInUse)
and was called by +[TGLocationUtils requestWhenInUserLocationAuthorizationWithLocationManager:] . As we anticipated
before, you might use this kind of information as an entry point when reverse engineering the app and from there get
inputs (e.g. names of classes or methods) to keep feeding the dynamic analysis.
Next, there is a visual way to inspect the status of some app permissions when using the iPhone/iPad by opening
"Settings" and scrolling down until you find the app you're interested in. When clicking on it, this will open the "ALLOW
APP_NAME TO ACCESS" screen. However, not all permissions might be displayed yet. You will have to trigger them
in order to be listed on that screen.
425
iOS Platform APIs
For example, in the previous example, the "Location" entry was not being listed until we triggered the permission
dialogue for the first time. Once we did it, no matter if we allowed the access or not, the the "Location" entry will be
displayed.
Testing for Sensitive Functionality Exposure Through IPC (MSTG-
PLATFORM-4)
During implementation of a mobile application, developers may apply traditional techniques for IPC (such as using
shared files or network sockets). The IPC system functionality offered by mobile application platforms should be used
because it is much more mature than traditional techniques. Using IPC mechanisms with no security in mind may
cause the application to leak or expose sensitive data.
In contrast to Android's rich Inter-Process Communication (IPC) capability, iOS offers some rather limited options for
communication between apps. In fact, there's no way for apps to communicate directly. In this section we will present
the different types of indirect communication offered by iOS and how to test them. Here's an overview:
Custom URL Schemes
Universal Links
UIActivity Sharing
App Extensions
UIPasteboard
Custom URL Schemes
Please refer to the next section "Testing Custom URL Schemes" for more information on what custom URL schemes
are and how to test them.
Universal Links
Overview
Universal links are the iOS equivalent to Android App Links (aka. Digital Asset Links) and are used for deep linking.
When a user taps a universal link (to the app's website) he will get seamlessly redirected to the corresponding
installed app without going through Safari. If the app isn’t installed, the link will open in Safari.
Universal links are standard web links (HTTP/HTTPS) and are not to be confused with custom URL schemes, which
originally were also used for deep linking.
For example, the Telegram app supports both custom URL schemes and universal links:
tg://resolve?domain=fridadotre is a custom URL scheme and uses the tg:// scheme.
https://telegram.me/fridadotre is a universal link and uses the https:// scheme.
Both result in the same action, the user will be redirected to the specified chat in Telegram ("fridadotre" in this case).
However, universal links give several key benefits that are not applicable when using custom URL schemes and are
the recommended way to implement deep linking, according to the Apple Developer Documentation. Specifically,
universal links are:
Unique: Unlike custom URL schemes, universal links can’t be claimed by other apps, because they use standard
HTTP or HTTPS links to the app's website. They were introduced as a way to prevent URL scheme hijacking
attacks (an app installed after the original app may declare the same scheme and the system might target all new
requests to the last installed app).
Secure: When users install the app, iOS downloads and checks a file (the Apple App Site Association or AASA)
that was uploaded to the web server to make sure that the website allows the app to open URLs on its behalf.
Only the legitimate owners of the URL can upload this file, so the association of their website with the app is
426
iOS Platform APIs
secure.
Flexible: Universal links work even when the app is not installed. Tapping a link to the website would open the
content in Safari, as users expect.
Simple: One URL works for both the website and the app.
Private: Other apps can communicate with the app without needing to know whether it is installed.
Static Analysis
Testing universal links on a static approach includes doing the following:
Checking the Associated Domains entitlement
Retrieving the Apple App Site Association file
Checking the link receiver method
Checking the data handler method
Checking if the app is calling other app's universal links
Checking the Associated Domains Entitlement
Universal links require the developer to add the Associated Domains entitlement and include in it a list of the domains
that the app supports.
In Xcode, go to the "Capabilities" tab and search for "Associated Domains". You can also inspect the .entitlements
file looking for com.apple.developer.associated-domains . Each of the domains must be prefixed with applinks: , such
as applinks:www.mywebsite.com .
Here's an example from Telegram's .entitlements file:
com.apple.developer.associated-domains
applinks:telegram.me
applinks:t.me
More detailed information can be found in the archived Apple Developer Documentation.
If you don't have the original source code you can still search for them, as explained in "Entitlements Embedded in the
Compiled App Binary".
Retrieving the Apple App Site Association File
Try to retrieve the apple-app-site-association file from the server using the associated domains you got from the
previous step. This file needs to be accessible via HTTPS, without any redirects, at https:///apple-app-site-
association or https:///.well-known/apple-app-site-association .
You can retrieve it yourself with your browser or use the Apple App Site Association (AASA) Validator. After entering
the domain, it will display the file, verify it for you and show the results (e.g. if it is not being properly served over
HTTPS). See the following example from apple.com:
427
iOS Platform APIs
{
"activitycontinuation": {
"apps": [
"W74U47NE8E.com.apple.store.Jolly"
]
},
"applinks": {
"apps": [],
"details": [
{
"appID": "W74U47NE8E.com.apple.store.Jolly",
"paths": [
"NOT /shop/buy-iphone/*",
"NOT /us/shop/buy-iphone/*",
"/xc/*",
"/shop/buy-*",
"/shop/product/*",
"/shop/bag/shared_bag/*",
"/shop/order/list",
"/today",
"/shop/watch/watch-accessories",
"/shop/watch/watch-accessories/*",
"/shop/watch/bands",
] } ] }
}
The "details" key inside "applinks" contains a JSON representation of an array that might contain one or more apps.
The "appID" should match the “application-identifier” key from the app’s entitlements. Next, using the "paths" key, the
developers can specify certain paths to be handled on a per app basis. Some apps, like Telegram use a standalone
(`"paths": [""] ) in order to allow all possible paths. Only if specific areas of the website should **not** be
handled by some app, the developer can restrict access by excluding them by prepending a "NOT "` (note the
whitespace after the T) to the corresponding path. Also remember that the system will look for matches by following
the order of the dictionaries in the array (first match wins).
This path exclusion mechanism is not to be seen as a security feature but rather as a filter that developer might use to
specify which apps open which links. By default, iOS does not open any unverified links.
Remember that universal links verification occurs at installation time. iOS retrieves the AASA file for the declared
domains ( applinks ) in its com.apple.developer.associated-domains entitlement. iOS will refuse to open those links if
the verification did not succeed. Some reasons to fail verification might include:
The AASA file is not served over HTTPS.
The AASA is not available.
The appID s do not math (this would be the case of a malicious app. iOS would successfully prevent any possible
hijacking attacks
428
iOS Platform APIs
Checking the Link Receiver Method
In order to receive links and handle them appropriately, the app delegate has to implement
application:continueUserActivity:restorationHandler: . If you have the original project try searching for this method.
Please note that if the app uses openURL:options:completionHandler: to open a universal link to the app's website, the
link won't open in the app. As the call originates from the app, it won't be handled as a universal link.
From Apple Docs: When iOS launches your app after a user taps a universal link, you receive an
NSUserActivity object with an activityType value of NSUserActivityTypeBrowsingWeb . The activity object’s
webpageURL property contains the URL that the user is accessing. The webpage URL property always contains
an HTTP or HTTPS URL, and you can use NSURLComponents APIs to manipulate the components of the URL.
[...] To protect users’ privacy and security, you should not use HTTP when you need to transport data; instead,
use a secure transport protocol such as HTTPS.
From the note above we can highlight that:
The mentioned NSUserActivity object comes from the continueUserActivity parameter, as seen in the method
above.
The scheme of the webpageURL must be HTTP or HTTPS (any other scheme should throw an exception). The
scheme instance property of URLComponents / NSURLComponents can be used to verify this.
If you don't have the original source code you can use radare2 or rabin2 to search the binary strings for the link
receiver method:
$ rabin2 -zq Telegram\ X.app/Telegram\ X | grep restorationHan
0x1000deea9 53 52 application:continueUserActivity:restorationHandler:
Checking the Data Handler Method
You should check how the received data is validated. Apple explicitly warns about this:
Universal links offer a potential attack vector into your app, so make sure to validate all URL parameters and
discard any malformed URLs. In addition, limit the available actions to those that do not risk the user’s data. For
example, do not allow universal links to directly delete content or access sensitive information about the user.
When testing your URL-handling code, make sure your test cases include improperly formatted URLs.
As stated in the Apple Developer Documentation, when iOS opens an app as the result of a universal link, the app
receives an NSUserActivity object with an activityType value of NSUserActivityTypeBrowsingWeb . The activity
object’s webpageURL property contains the HTTP or HTTPS URL that the user accesses. The following example in
Swift from the Telegram app verifies exactly this before opening the URL:
func application(_ application: UIApplication, continue userActivity: NSUserActivity,
restorationHandler: @escaping ([Any]?) -> Void) -> Bool {
...
if userActivity.activityType == NSUserActivityTypeBrowsingWeb, let url = userActivity.webpageURL {
self.openUrl(url: url)
}
return true
}
In addition, remember that if the URL includes parameters, they should not be trusted before being carefully sanitized
and validated (even when including a whitelist of trusted domains here). For example, they might have been spoofed
by an attacker or might include malformed data. If that is the case, the whole URL and therefore the universal link
request must be discarded.
429
iOS Platform APIs
The NSURLComponents API can be used to parse and manipulate the components of the URL. This can be also part of
the method application:continueUserActivity:restorationHandler: itself or might occur on a separate method being
called from it. The following example demonstrates this:
func application(_ application: UIApplication,
continue userActivity: NSUserActivity,
restorationHandler: @escaping ([Any]?) -> Void) -> Bool
{
guard userActivity.activityType == NSUserActivityTypeBrowsingWeb,
let incomingURL = userActivity.webpageURL,
let components = NSURLComponents(url: incomingURL, resolvingAgainstBaseURL: true),
let path = components.path,
let params = components.queryItems else {
return false
}
print("path = \(path)")
if let albumName = params.first(where: { $0.name == "albumname" } )?.value,
let photoIndex = params.first(where: { $0.name == "index" })?.value {
print("album = \(albumName)")
print("photoIndex = \(photoIndex)")
return true
} else {
print("Either album name or photo index missing")
return false
}
}
Finally, as stated above, be sure to verify that the actions triggered by the URL do not expose sensitive information or
risk the user’s data on any way.
Checking if the App is Calling Other App's Universal Links
An app might be calling other apps via universal links in order to simply trigger some actions or to transfer information,
in that case, it should be verified that it is not leaking sensitive information.
If you have the original source code, you can search it for the openURL:options:completionHandler: method and check
the data being handled.
Note that the openURL:options:completionHandler: method is not only used to open universal links but also to
call custom URL schemes.
This is an example from the Telegram app:
}, openUniversalUrl: { url, completion in
if #available(iOS 10.0, *) {
var parsedUrl = URL(string: url)
if let parsed = parsedUrl {
if parsed.scheme == nil || parsed.scheme!.isEmpty {
parsedUrl = URL(string: "https://\(url)")
}
}
if let parsedUrl = parsedUrl {
return UIApplication.shared.open(parsedUrl,
options: [UIApplicationOpenURLOptionUniversalLinksOnly: true as NSNumber],
completionHandler: { value in completion.completion(value)}
)
430
iOS Platform APIs
Note how the app adapts the scheme to "https" before opening it and how it uses the option
UIApplicationOpenURLOptionUniversalLinksOnly: true that opens the URL only if the URL is a valid universal link and
there is an installed app capable of opening that URL.
If you don't have the original source code, search in the symbols and in the strings of the app binary. For example, we
will search for Objective-C methods that contain "openURL":
$ rabin2 -zq Telegram\ X.app/Telegram\ X | grep openURL
0x1000dee3f 50 49 application:openURL:sourceApplication:annotation:
0x1000dee71 29 28 application:openURL:options:
0x1000df2c9 9 8 openURL:
0x1000df772 35 34 openURL:options:completionHandler:
As expected, openURL:options:completionHandler: is among the ones found (remember that it might be also present
because the app opens custom URL schemes). Next, to ensure that no sensitive information is being leaked you'll
have to perform dynamic analysis and inspect the data being transmitted. Please refer to "Identifying and Hooking the