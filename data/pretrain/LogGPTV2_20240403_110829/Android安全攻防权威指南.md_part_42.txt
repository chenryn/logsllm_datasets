## Page 188
### 第7章 调试与分析安全漏洞

#### 7.5 使用Android Device Monitor进行调试

图 7-6 显示了 Android Device Monitor (ADM) 在设备处于可调试状态 (debuggable=1) 时的界面。除了显示所有进程外，ADM 还能展示 `system_server` 进程的线程信息。如果未使用工程设备或执行本节所述步骤，则无法实现这一功能。完成这些步骤后，即可利用 DDMS、ADM 或 Eclipse 对系统上的任何 Dalvik 进程进行调试。

**提示**: Pau Oliva 的 RootAdb 应用能够自动执行上述步骤。您可以在 Google Play 上找到该应用：[https://play.google.com/store/apps/details?id=org.eslack.rootadb](https://play.google.com/store/apps/details?id=org.eslack.rootadb)。

#### 附加到其他进程

在完全调试模式下，设备支持实时调试任意 Dalvik 进程。通过附加到目标进程来进行调试是一个相对简单的过程。

首先确保 Eclipse 已启动并运行。接着，在右上角选择 DDMS 界面。从 Devices 窗口中选择一个目标进程，如 `system_process`。然后，在 Run 菜单中选择 "Debug Configurations" 打开相应的对话框。在左侧列表中选择 "Remote Java Application" 并点击 "New Launch Configuration" 按钮。在 Name 输入框中输入任意名称，例如 "Attacher"。在 Connect 选项卡下选择之前创建的 AOSP Framework Source 项目，并在 Host 和 Port 输入框中分别填写 `127.0.0.1` 和 `8700`。

---

## Page 189
### 7.6 调试原生代码

注意：端口 `8700` 与 DDMS 界面中当前选中的进程相对应。每个可调试进程都会被分配一个唯一的端口号。正如预期的那样，使用特定于进程的端口将生成特定于该进程的调试配置文件。

最后，点击 Apply 按钮，再点击 Debug 按钮以完成设置。此时，Eclipse 将附加到 `system_process` 进程上。切换至 Debug 视图将在 Debug 窗口中显示该进程的所有活动线程。点击 Suspend 按钮可以暂停选定线程。图 7-7 展示了已附加至 `system_process` 进程的 Eclipse，并挂起了 WifiManager 服务线程。

![](images/fig_7-7.png)

图 7-7: Eclipse 已附加至 `system_process` 进程

点击线程栈帧可跳转至源代码的相关位置。接下来只需利用 Eclipse 调试器提供的断点及其他功能来追踪错误或探索系统内部机制。

#### 7.6.1 使用 NDK 进行调试

Android 平台上的 C 和 C++ 语言编写的原生代码缺乏 Dalvik 提供的内存安全特性，因此更容易出现错误和崩溃。这类漏洞可能被攻击者利用，故无论是对攻击者还是防御者而言，定位问题根源都至关重要。交互式调试是分析此类程序最常用的方法之一。

本节讨论多种调试 Android 原生代码的方法：
1. 使用 Android NDK 调试嵌入应用内的自定义原生代码；
2. 利用 Eclipse 调试原生代码；
3. 在 Nexus 设备上使用 AOSP 调试 Android 浏览器；
4. 通过 AOSP 实现全源码级别的交互式调试；
5. 调试非 Nexus 设备上的原生代码。

---

## Page 190
### 7.6.1 使用 NDK 进行调试（续）

从 r4b 版本开始，NDK 包含了一个易于使用的 `ndk-gdb` 脚本，这标志着官方开始支持对应用内原生代码的调试。本节将介绍调试原生代码所需的前提条件、详细准备流程及其工作原理，并探讨该脚本的局限性。

**警告**: Android 4.3 版本的 OTA 更新引入了 NDK 调试兼容性问题。更多相关信息及解决方案，请参阅 Android Bug 跟踪系统中的问题 #58373。此问题已在 Android 4.4 中得到修复。

#### 准备用于调试的应用

要体验 NDK 的调试功能，需准备一台运行 Android 2.2 或更高版本的设备或模拟器。对于多线程原生代码调试，则至少需要 Android 2.3 及以上版本。由于几乎所有 Android 代码都是多线程的，因此建议使用较新的设备。此外，在准备阶段还必须创建一个可用于调试的目标应用。

根据所使用的构建系统不同，准备目标应用的具体方法也有所差异。通过将环境变量 `NDK_DEBUG` 设置为 1 即可启用 NDK 支持的原生代码调试（通过 `ndk-build`）。若使用 Eclipse，则需修改项目属性；若采用 Apache Ant 构建系统，则可通过 `ant debug` 命令生成支持调试的应用包。无论使用哪种构建工具，在生成过程中开启调试选项都是必要的。

**注意**: 使用本节提及的脚本时，确保 NDK 目录已添加至环境变量路径中。

---

## Page 191
### 7.6.1 使用 NDK 进行调试（续）

为了演示整个调试过程，我们对经典的“HelloWorld”应用稍作修改。原本的应用仅显示字符串，现在我们将通过 JNI 方法返回一个字符串给应用。完整的示例代码可在本书配套资料中找到。以下命令展示了如何使用 NDK 构建应用：

```sh
$ ndk-build
GdbServer : [arm-linux-androideabi-4.6] libs/armeabi/gdbserver
Compile thumb: hello-jni <= libs/armeabi/libhello-jni.so
```

显然，当设置了 `NDK_DEBUG` 环境变量后，`ndk-build` 脚本会执行额外的操作。首先，它向应用包中添加了 `gdbserver` 二进制文件，这是因为在一般情况下，设备上不会预装 GDB 服务器。其次，该脚本生成了一个 `gdb.setup` 文件，其内容帮助 GDB 客户端找到本地库文件副本及其对应的源代码。

在这种构建方式下，生成原生代码与打包应用是分开进行的。接下来，可以使用 Apache Ant 的 `ant debug install` 命令一次性完成应用包的构建与安装。以下是部分输出结果：

```sh
$ ant debug install
...
install:
[echo] Installing /android/ws/1/NativeTest/bin/MainActivity-debug.apk
onto default emulator or device.
[exec] pkg: /data/local/tmp/MainActivity-debug.apk
[exec] 759 KB/s (393632 bytes in 0.506s)
[exec] Success
BUILD SUCCESSFUL
Total time: 16 seconds
```

应用成功安装后，就可以开始调试了。

无参数调用 `ndk-gdb` 脚本时，它会尝试查找正在运行的目标应用实例。如果没有找到，脚本将报错。解决这个问题有多种方法，但大多数都需要手动启动应用。最简便的方式是在运行脚本时加上 `--start` 参数，如下所示：

```sh
$ ndk-gdb --start
Set uncaught Java.lang.Throwable
Initializing jdb ...
Set deferred uncaught Java.lang.Throwable
> Input stream closed.
GNU gdb (GDB) 7.3.1
...
```

这种方法的最大优点在于能够在原生代码执行早期设置断点。然而，在某些 Android 版本上使用 NDK 时可能会遇到问题。具体来说，应用不会正常启动，而是不断弹出等待调试器的对话框。幸运的是，有一种简单的解决办法：先手动启动 Java 调试器并将其连接到默认端点，再启动原生 GDB 客户端，如下所示：

```sh
$ jdb -connect com.sun.jdi.SocketAttach:hostname=127.0.0.1,port=65534
Set uncaught java.lang.Throwable
Set deferred uncaught Java.lang.Throwable
Initializing jdb ...
```

JDB 成功连接后，应用将开始运行，先前设置的断点也会被触发。

---

## Page 192
### 7.6.1 使用 NDK 进行调试（续）

使用这种解决办法，可以方便地在程序较早运行的位置设置断点。即使手动启动应用，通常也可能因为旋转设备方向而导致应用重新执行 `onCreate` 事件处理程序，从而有助于设置一些难以捉摸的断点。

**注意**: 我们为此问题贡献了一个简单的补丁：[https://code.google.com/p/android/issues/detail?id=60685#c4](https://code.google.com/p/android/issues/detail?id=60685#c4)。

NDK 的较新版本包含了 `ndk-gdb-py` 脚本，这是一个用 Python 编写的替代方案。虽然该脚本避免了不断等待调试器的问题，但它也有自己的缺陷。特别是，当应用以较旧的 Android SDK 版本为目标时，可能会出现问题。通过简单修改一行代码即可修复此问题，类似于修复之前的某个 bug。希望随着时间推移，这些问题能得到解决，使 NDK 的调试功能更加健壮可靠。

#### 内在原理探究

顺利解决了各种问题后，我们现在可以调试原生代码了。那么，在运行 `ndk-build` 脚本时究竟发生了什么？使用 `--verbose` 参数运行脚本可以帮助阐明这一点。此外，查阅 NDK 官方文档（位于 `docs/NDK-GDB.html`）也有助于解释这个问题。该 shell 脚本约有 750 行，阅读起来并不困难。最相关的部分位于脚本的最后 40 行左右。以下片段展示了 Linux x86_64 平台上 Android NDK r9 的部分内容：

```sh
708 # Get the app_server binary from the device
709 APP_PROCESS=$APP_OUT/app_process
710 log "Pulled app_process from device/emulator."
711 run adb_cmd pull /system/bin/linker "$native_path $APP_OUT/linker"
712 log "Pulled linker from device/emulator."
713 run adb_cmd pull /system/lib/libc.so "$APP_OUT/libc.so"
714 log "Pulled libc.so from device/emulator."
```

第 710、713 和 716 行的命令从设备上下载了三个关键文件：`app_process`、`linker` 和 `libc.so` 二进制文件。这些文件包含关键信息和一些有限的符号，尽管不足以支持源代码级的调试（将在 7.6.5 节中进一步讨论），但它们对于 GDB 客户端正确调试目标进程至关重要，特别是在处理线程时。获取这些文件后，脚本会尝试启动 JDB 以解决前面提到的“等待调试器”问题。最后，脚本启动 GDB 客户端，如下所示：

```sh
730 # Now launch the appropriate gdb client with the right init commands
731 GDBCLIENT=$(TOOLCHAIN_PREFIX)gdb
732
733
```

---

## Page 193
### 7.6.1 使用 NDK 进行调试（续）

至此，我们已经了解了 `ndk-gdb` 脚本的工作原理及其在调试过程中的作用。通过这些步骤，您可以更有效地调试 Android 应用中的原生代码。希望这些信息对您有所帮助！