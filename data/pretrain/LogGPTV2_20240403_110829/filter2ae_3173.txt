# Razer Synapse 3 Windows客户端本地提权漏洞分析

##### 译文声明
本文为翻译文章，原文作者为 enigma0x3，来源：enigma0x3.net。
译文仅供参考，具体内容及含义以原文为准。

## 一、漏洞简介
Razer Synapse（雷云）软件在系统中安装了一个名为“Razer Synapse Service”的服务，该服务以`NT AUTHORITY\SYSTEM`权限运行，并会加载`C:\ProgramData\Razer\`目录中的多个.NET assembly。由于`C:\ProgramData\Razer\*`及其子目录/文件的权限设置不严格，任何经过身份验证的用户都可以对该目录和文件具有完全控制权限（`FullControl`）。攻击者可以通过绕过签名检测机制，利用assembly侧加载方法将权限提升至`SYSTEM`级别。
此漏洞已在Windows 10 1803 (x64) 系统上的Razer Synapse 3 (版本3.3.1128.112711) Windows客户端上成功复现。

## 二、漏洞分析
### 服务启动与权限
当Razer Synapse服务启动时，它会加载位于`C:\ProgramData\Razer\*`目录（包括其子目录，如`C:\ProgramData\Razer\Synapse3\Service\bin`）中的.NET assembly。检查这些目录的DACL权限设置时发现，`Everyone`组拥有对这些目录及其所有文件的`FullControl`权限。

理论上讲，攻击者可以替换这些目录中的现有.NET assembly为恶意assembly。重启系统后，Razer Synapse服务便会加载这个恶意assembly。然而，实际操作中需要考虑一些复杂因素，例如竞争条件以及服务内置的一些安全检查机制。为了成功利用该漏洞，我们需要明确具体加载assembly所需的条件。

### 绕过安全检查
首先解决的问题是如何植入恶意assembly并确保目标服务能够加载它。对于低权限用户来说，直接劫持现有的assembly可能较为困难，因为他们无法停止或重新启动Razer Synapse服务。因此，攻击者需要通过重启系统来触发assembly加载过程，在此过程中快速替换合法assembly为恶意assembly。

观察到目标服务递归枚举`C:\ProgramData\Razer\*`下的所有DLL文件，这意味着我们只需简单地将恶意assembly放置于其中一个目录内即可被识别为有效assembly。

在加载前，服务会尝试确认这些assembly是否带有Razer的签名。这一步骤通过调用[X509Certificate.CreateFromSignedFile()](https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.x509certificates.x509certificate.createfromsignedfile?view=netframework-4.7.2)实现，比较"Razer.cer"证书链与待加载assembly的证书链。如果两者不符，则不会加载该assembly。尽管这种方法看似合理，但其实并不稳健，因为`X509Certificate.CreateFromSignedFile()`仅提取证书链信息而不验证签名有效性。攻击者可以使用类似[SigPirate](https://github.com/xorrior/Random-CSharpTools/tree/master/SigPirate)这样的工具，将合法Razer assembly的证书克隆到恶意assembly上。

一旦assembly通过了证书验证，服务将使用[Assembly.LoadFile()](https://docs.microsoft.com/en-us/dotnet/api/system.reflection.assembly.loadfile?view=netframework-4.7.2)将其加载到当前的应用程序域中。之后，服务还会检查assembly是否实现了[IPackage接口](https://simpleinjector.org/ReferenceLibrary/html/T_SimpleInjector_Packaging_IPackage.htm)，这是`SimpleInjector`项目特有的一个接口。为了绕过这一检查，攻击者只需在其恶意assembly中实现该接口即可。

完成上述步骤后，攻击者便可通过构造特定的恶意assembly来执行任意代码，从而实现权限提升。

## 三、漏洞利用
基于以上分析，我们可以总结出以下利用流程：
1. 创建自定义assembly，实现来自`SimpleInjector`项目的`IPackage`接口；
2. 在`IPackage`接口的`RegisterServices()`方法中加入恶意逻辑；
3. 编译assembly，并使用`SigPirate`等工具从合法Razer assembly中复制证书链；
4. 将最终生成的恶意assembly放置于`C:\ProgramData\Razer\Synapse3\Service\bin`目录下；
5. 重启服务或主机。

## 四、时间线
- **2018年6月5日**：向Razer HackerOne项目提交漏洞报告
- **2018年6月8日**：厂商通过HackerOne确认收到报告
- **2018年6月8日**：HackerOne工作人员要求提供Synapse 3的具体版本号
- **2018年6月8日**：向Razer提供了Synapse 3的版本号
- **2018年7月5日**：请求更新信息
- **2018年8月6日**：报告分类
- **2018年8月27日**：请求更新信息，厂商未回应
- **2018年9月14日**：再次请求更新信息并通过邮件直接联系以加快沟通进度，厂商仍未回应
- **2018年12月14日**：通过Twitter联系Razer寻求安全联系方式
- **2018年12月14日**：HackerOne项目经理开始调查报告
- **2018年12月15日**：Razer CEO Min-Liang Tan要求直接发送电子邮件给安全团队
- **2018年12月16日**：信息安全经理和软件高级副总裁通过邮件直接联系我们，表示将在几周内推出补丁
- **2018年12月19日**：下载最新版Synapse 3，研究存在漏洞的代码路径，并向Razer HackerOne项目提交更多信息
- **2018年12月25日**：Razer员工联系我们并提供内部版本链接以便后续反馈
- **2018年12月27日**：根据要求通过HackerOne报告提供缓解措施反馈
- **2019年1月9日**：通过HackerOne询问厂商关于新版产品的发布时间表
- **2019年1月10日**：厂商告知已公开新版本
- **2019年1月10日**：报告流程关闭
- **2019年1月10日**：请求公开披露漏洞信息
- **2019年1月10日**：Razer同意公开披露漏洞信息
- **2019年1月21日**：公布漏洞报告