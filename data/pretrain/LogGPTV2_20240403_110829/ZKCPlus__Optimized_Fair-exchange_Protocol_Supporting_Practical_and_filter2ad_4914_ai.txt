### 优化后的文本

#### 构造向量 \( z \) 和相关关系
定义集合 \(\{u_k\}_{k \in [0, \log m]}\)，以及参数 \(L_d, R_d, S_1, S_2, e, l', r', \iota', \rho', \sigma'\)。如果这些参数不满足非平凡离散对数关系，则应生成一个非平凡的离散对数关系 \((U, H)\)。

从 \(\{u_k\}_{k=0}^{\log m}\) 构造向量 \(z\)，使用二进制计数结构：
\[
z = 
\begin{pmatrix}
u_0 u_1 \cdots u_{\log m} \\
u_0^{-1} u_1 \cdots u_{\log m} \\
\vdots \\
u_0^{-1} u_1^{-1} \cdots u_{\log m}^{-1}
\end{pmatrix}
\]
其中 \(z_i\) 是 \(z\) 的第 \(i\) 个元素。注意到 \(l, r\) 和 \(\{l_i, r_i\}_{i \in [2m]}\) 之间的关系为：
\[
l = \sum_{i \in [m]} z_i \cdot l_i, \quad r = \sum_{i \in [m]} z_i \cdot r_i
\]
类似地，\(Ext\) 可以从 \(\iota, \rho\) 构造 \(\{\iota_i, \rho_i\}_{i \in [2m]}\)，使得：
\[
\iota = \sum_{i \in [m]} z_i \cdot \iota_i, \quad \rho = \sum_{i \in [m]} z_i \cdot \rho_i
\]

当转录是接受的时，必须满足以下等式：
\[
L = \langle l, G \rangle + \iota \cdot H = \sum_{i \in [m]} z_i \cdot (\langle l_i, G \rangle + \iota_i \cdot H)
\]
\[
R = \langle r, G \rangle + \rho \cdot H = \sum_{i \in [m]} z_i \cdot (\langle r_i, G \rangle + \rho_i \cdot H)
\]

假设 \(V_j = \langle v_j, G \rangle + \nu_j \cdot H\)，则应满足：
\[
\langle l_i, G \rangle + \iota_i \cdot H = w_i \cdot \left( \sum_{j \in [m]} A_{ij} \cdot v_j \right), \quad \langle l_{i+m}, G \rangle + \iota_{i+m} \cdot H = w_i \cdot \left( \sum_{j \in [m]} C_{ij} \cdot v_j \right)
\]
\[
\langle r_i, G \rangle + \rho_i \cdot H = w_i \cdot \left( \sum_{j \in [m]} B_{ij} \cdot v_j \circ y_n \right), \quad \langle r_{i+m}, G \rangle + \rho_{i+m} \cdot H = w_i \cdot \left( \sum_{j \in [m]} C_{ij} \cdot v_j \right)
\]

否则，它将产生 \(H, G\) 之间的非平凡离散对数关系。类似地，有：
\[
\sum_{i \in [m]} w_i \cdot \left( \sum_{j \in [m]} A_{ij} \cdot v_j - \sum_{j \in [m]} B_{ij} \cdot v_j \circ y_n \right) = 0
\]
\[
\sum_{i \in [m]} w_i \cdot \left( \sum_{j \in [m]} C_{ij} \cdot v_j - y_n \right) = 0
\]

使用固定的 \(y\) 和 \(m\) 个不同的 \(w\) 挑战，我们可以推断出：
\[
\sum_{j \in [m]} C_{ij} \cdot v_j = 0
\]
然后使用 \(n\) 个不同的 \(y\) 挑战，我们可以推断出：
\[
\sum_{j \in [m]} C_{ij} \cdot v_j \cdot y_n = 0
\]

#### 安全性证明
**定理 4.1**：ZKCPlus 在嵌入的 CP-NIZK 论证 \(\Pi_{Com}\) 满足完备性、计算知识合理性和零知识的情况下是安全的。具体来说：

- **买方公平性**：对于任何可能恶意的卖方 \(S^*\)，如果其余额以不可忽略的概率增加，则买方 \(B\) 学习到某个 \(x'\) 使得 \(\phi(x') = 1\)。
- **卖方公平性**：对于与可能恶意的买方 \(B^*\) 交互的卖方 \(S\)，如果 \(S\) 的余额没有增加，则除了可以从中推断出的信息外，\(B^*\) 不会学习到 \(x\) 的任何信息。

对于买方公平性，如果 \(B\) 与可能恶意的 \(S^*\) 交互，并且 \(S^*\) 的余额增加，则必须满足以下三个条件：
1. 在“验证”阶段，\(B\) 收到 \(\pi\) 使得 \(\Pi_{Com}.Verify(\sigma, (\phi, c_x), \pi) = 1\)。
2. 在“交付”阶段结束时，存在 \(z, h\) 和 \(\pi_z\) 使得 \(\Pi_{Com}.Verify(\sigma, (z, h, c_x), \pi_z) = 1\)。
3. 在“最终化”阶段，\(J\) 得到 \(k\) 使得 \(H(k) = h\)。

由于 \(\Pi_{Com}\) 的计算知识合理性，对于条件 2 成立，存在一个提取器 \(Ext\)，除了概率 \(\text{negl}(\lambda)\)，输出 \((x', k')\) 使得：
\[
\text{Enc}_k(x') = z \land h = H(k')
\]

类似地，对于条件 1 成立，存在一个提取器 \(Ext\)，除了概率 \(\text{negl}(\lambda)\)，输出 \(x''\) 使得：
\[
\phi(x'') = 1
\]

由于承诺方案 \(Com\) 的绑定属性，除了可忽略的概率外，有 \(x'' = x'\)，因此 \(\phi(x') = 1\)。假设在协议执行结束时，\(S^*\) 的余额增加，但 \(B\) 没有学到 \(x'\)，那么在“最终化”阶段，\(J\) 必须收到一些不同于 \(k'\) 但 \(H(k) = h\) 的 \(k\)。这破坏了 \(H\) 的碰撞抵抗性。

在第 4.2.2 节中，我们提议使用承诺 \(c_k\) 代替 \(h\)。然后 \(B\) 失去资金但学到错误的 \(x\) 当且仅当在“最终化”阶段 \(J\) 学到一对 \((k, r_k)\) 使得 \(k \neq k'\) 但 \(\text{Check}(pp, c_k, (k \cdot 1), r_k) = 1\)。这破坏了承诺方案 \(Com\) 的绑定属性。

对于卖方公平性，如果 \(S\) 与可能恶意的 \(B^*\) 交互，并且 \(S\) 的资金没有增加，我们可以构造一个模拟器 \(Sim_{B^*}\)，该模拟器在输入 \((c_x, z, h)\) 上运行，并且对于 \(B^*\) 来说是不可区分的诚实卖方 \(S\)。模拟器 \(Sim_{B^*}\) 的工作方式如下：
1. 在“验证”阶段，\(Sim_{B^*}\) 运行 \(\Pi_{Com}\) 的模拟器 \(Sim\)，发送 \(\pi \leftarrow Sim(\sigma, (\phi, c_x))\)。
2. 在“交付”阶段，\(Sim_{B^*}\) 运行 \(\Pi_{Com}\) 的模拟器 \(Sim\)，得到 \(\pi'_z \leftarrow Sim(\sigma, (z, c_x, h))\)，发送 \((z, h, \pi'_z)\)。
3. 在“揭示”阶段，\(Sim_{B^*}\) 中止。

由于 \(\Pi_{Com}\) 的零知识属性，\(\pi\) 和 \(\pi'_z\) 与诚实的 \(S\) 发送的不可区分。此外，在 \(S\) 的资金没有增加的前提下，要么 \(B^*\) 中止，要么 \(S\) 看到由 \(B^*\) 发布的包含某些 \(h\) 使得 \(H(k) \neq h\) 的交易 \(tx\)，在这种情况下 \(S\) 必须在“揭示”阶段中止。

此外，由于 \(H\) 的前像抵抗性，\(B^*\) 无法从 \(h\) 推断出 \(k\)，因此不能解密 \(z\) 到 \(x\)。当我们使用 \(c_k\) 代替 \(h\) 时，由于 \(Com\) 的隐藏属性，类似的结论也成立。

#### ZKCPlus 在数独解决方案中的应用
这里描述 ZKCPlus 如何适应交换数独解决方案的场景。假设一个 \(D \times D\) 的数独谜题。协议从“承诺”阶段开始，卖方 \(S\) 对解决方案 \(x \in F_{p}^{D^2}\) 做出承诺。我们在第 3 节中描述的数据并行 CP-NIZK 论证适用于 ZKCPlus 的“交付”阶段；不太明显的是，它也适用于“验证”阶段的数独解决方案。

为了说服买方 \(x\) 是正确的，\(S\) 必须证明对于 \(D \times D\) 的解决方案，每一行 \(r_i\)、列 \(c_i\) 和子网格 \(s_i\)（对于所有 \(i \in [D]\)）都是数字 \(\{1, \ldots, D\}\) 的排列，即：
\[
\text{isPerm}_D(r_i) = 1, \quad \text{isPerm}_D(c_i) = 1, \quad \text{isPerm}_D(s_i) = 1
\]
这构成了一个数据并行计算，有 \(3D\) 个函数 \(\text{isPerm}\) 并行运行。此外，\(S\) 必须证明 \(\{r_i\}\) 与承诺的 \(x\) 一致。这可以通过内积论证来完成：
\[
\langle r_i, y_i \rangle = 0
\]
其中 \(y \leftarrow F_{p}^{D^2}\)，并且 \(y = (y_1 || \ldots || y_D)\)。Schwartz-Zippel 引理表明，除了误差 \(D^2 / |F_p|\)，上述等式成立当且仅当 \(x\) 和 \(\{r_i\}\) 一致。类似论证适用于 \(\{c_i\}\) 和 \(\{s_i\}\)。

此外，\(S\) 必须证明 \(x\) 与谜题设置 \(p\) 一致，即在位置 \(i\) 处开放的数字，有 \(x_i = p_i\)。通过二进制掩码 \(b \in F_{p}^{D^2}\) 来证明这一点：
\[
b_i = 
\begin{cases} 
1 & \text{如果位置 } i \text{ 开放} \\
0 & \text{否则}
\end{cases}
\]
\(x\) 和 \(p\) 之间的一致性转化为方程 \(x \circ b = p\)。同样，\(S\) 可以使用内积论证：
\[
\langle x \circ b, y \rangle = \langle p, y \rangle
\]

在“验证”阶段和“交付”阶段分离的情况下，可以选择合并数据压缩过程。由于 \(x\) 的每个元素是一个在 \([1, D]\) 范围内的数字，将其编码为 \(F_p\) 的元素有些浪费。替代地，设 \(l\) 表示 \(F_p\) 的位长度，\(k = \lceil \log(D + 1) \rceil\) 表示 \([1, D]\) 中每个数字的位长度，\(S\) 可以将 \(t = \lfloor l / k \rfloor\) 个数字组合成 \(F_p\) 的一个元素，并将长度为 \(D^2\) 的解决方案 \(x\) 重新形成长度为 \(\lceil D^2 / t \rceil\) 的 \(x'\)。为了证明 \(x\) 和 \(x'\) 之间的一致性，\(S\) 可以随机采样 \(y' \leftarrow F_{p}^{\lceil D^2 / t \rceil}\)，并通过长度为 \(t\) 的向量 \(t = [1, 2^k, \ldots, 2^{(t-1)k}]\) 构造 \(y\)：
\[
y = [y'_1 \cdot 2^k, \ldots, y'_{\lceil D^2 / t \rceil} \cdot 2^{(t-1)k}] \in F_{p}^{\lceil D^2 / t \rceil \cdot t}
\]
其中 \(y'_i\) 是 \(y'\) 的第 \(i\) 个元素向量，然后使用内积论证：
\[
\langle x, y \rangle - \langle x', y' \rangle = 0
\]
其中 \(x\) 用零填充到与 \(y\) 相同的长度。启用压缩后，“交付”阶段将在 \(x'\) 上运行，而不是 \(x\)，效率提高了 \(t\) 倍。

#### 其他评估结果
我们还测量了 ZKCPlus 的“最终化”阶段中链上仲裁者的计算成本，即智能合约的 gas 成本。在我们的协议中，智能合约负责承诺打开和并发转账，并通过存储预准备的群元素，计算复杂度可以降低到 \(O(1)\)（详见第 4.2.2 节）。

我们的评估显示，“最终化”阶段中智能合约的总链上 gas 成本非常经济，约为 156,770 gas，与数据大小无关。在所有消耗的 gas 中，转账支付和更新账本状态（即写入存储）占了主要的计算成本，约为 102,082 gas，而承诺打开仅消耗约 15,900 gas，占总 gas 的 10.14%。考虑到 ZKCP，链上计算哈希比承诺打开更便宜，但实际上对整体链上 gas 成本帮助不大，因为无论是哈希计算还是承诺打开都只占总 gas 成本的一小部分。