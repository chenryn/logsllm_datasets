k , uk}k∈[0,log m],
Ld, Rd, S1, S2, e, l′, r′, 𝜄′, 𝜌′, 𝜎′),
(77)
Otherwise they should yield a non-trivial discrete logarithm relation
between (U, H).
Construct vector z from {uk}log m
k=0 with a binary counting struc-
u0u1 . . . ulog m
u–1
0 u1 . . . ulog m
...
z =
(cid:169)(cid:173)(cid:173)(cid:173)(cid:173)(cid:173)(cid:173)(cid:171)
(cid:170)(cid:174)(cid:174)(cid:174)(cid:174)(cid:174)(cid:174)(cid:172) ,
(66)
(68)
(69)
(70)
(71)
(72)
and note that l, r and {li, ri}i∈[2m] are related by the relation that
(67)
zi · li,
· ri,
z–1
i
where zi is the i-th element of z. Similarly, Ext can construct {𝜄i, 𝜌i}i∈[2m]
from 𝜄, 𝜌 s.t.
𝜄i · H.
log m
z–1
i
i∈[m]
j∈[m]
· 𝜌i.
i∈[2m]
i∈[2m]
i∈[2m]
i∈[2m]
i∈[2m]
i∈[2m]
zi · 𝜄i,
u–1
0 u–1
1 . . . u–1
Recall the definition of L
When a transcript is accepting, it must hold that
Equations (69) and (70) imply that for i ∈ [m]
l = 
𝜄 = 
r = 
𝜌 = 
zi · ⟨li, G⟩ + 
L = ⟨l, G⟩ + 𝜄 · H = 

L = 
wi ·(cid:0)zi · Aij + zi+m · Cij
(cid:1) · Vj.
⟨li, G⟩ + 𝜄i · H = wi · 
⟨li+m, G⟩ + 𝜄i+m · H = wi · 
li+m = wi · 
li = wi · 
ri = 
Aij · vj, 
(cid:11) –(cid:10) 
Aij · Vj.
Cij · Vj.
Assume Vj = ⟨vj, G⟩ + 𝜈j · H, then it should hold that
According to (65), it must hold that
Bij · vj ◦ yn,
Bij · vj ◦ yn
ri+m = yn.
Aij · vj,
j∈[m]
j∈[m]
j∈[m]
j∈[m]
j∈[m]
Cij · vj.
Otherwise it yields a non-trivial discrete logarithm relation among
(H, G). Similarly, there are
i∈[m]
j∈[m]
(cid:10) 

wi·(cid:169)(cid:173)(cid:171)
Aij · vj, 
(cid:10) 
(cid:16) 
j∈[m]
j∈[m]
Aij · vj
j∈[m]
j∈[m]
(cid:11) –(cid:10) 
(cid:17)
– 
j∈[m]
Bij · vj
j∈[m]
Bij · vj ◦ yn
(cid:17) ◦(cid:16) 
j∈[m]
(73)
(cid:11)(cid:170)(cid:174)(cid:172) = 0.
(74)
(75)
Cij · vj, yn
j∈[m]
(cid:11) = 0.
Cij · vj, yn
Cij · vj = 0.
(76)
Using a fixed y and m different w challenges, we can infer that
Then using n different y challenges, we can infer that
Session 11B: Zero Knowledge II CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea3019and the distribution is indistinguishable from that produced by an
honest P interacting with an honest V. Sim uses V’s randomness,
and runs as follows.
𝜄′, 𝜌′, 𝜏′ $← Fp,
$← G
S1
(cid:1) · Vj,
si+m · ⟨1, G⟩,
l′, r′ $← Fn
p,
$← G,
Vj
T +
k , T –
k
i∈[m]
j∈[m]


$← G, ∀ k ∈ [0, log m],
L ← 
wi ·(cid:0)si · Aij + si+m · Cij
R ← 
(cid:1) · Vj + 
(cid:0)si · Bij
Ld ← e–1 ·(cid:0)⟨l′, G⟩ + 𝜄 · H – L(cid:1) ,
Rd ← e–1 ·(cid:16)⟨r′ ◦ y–1
(cid:17)
S2 ← e–2 ·(cid:0)⟨l′, r′⟩ · U + 𝜏′ · H(cid:1) + e–1 · S1
(cid:17)
(cid:16)
log 2m
n , G⟩ + 𝜌 · H – R
j∈[m]
i∈[m]
i∈[m]
k · T +
u2
k + u–2
k · T –
k
,
.
– e–2 ·
k=0
(78)
k , T –
It is straightforward to see that such a proof produced by Sim will
be accepted by an honest V. l′, r′, 𝜄′, 𝜌′, 𝜎′ are randomly distributed
over Fp. Due to the prefect hiding property of Pedersen commit-
ment, Ld, Rd, {T +
k }, S1, S2 are also random elements of G, apart
from the relation defined by the verification procedure. Therefore,
the transcript given by (78) is indistinguishable from an honestly
computed proof with uniformly sampled challengers.
E Proof for Theorem 4.1
Theorem 4.1 states that ZKCPlus is secure if the embedded CP-NIZK
argument ΠCom satisfies completeness, computational knowledge
soundness and zero-knowledge, where by secure we mean:
• (buyer fairness) for any possibly malicious seller S∗, if its balance
increases with non-negligble probability, then the buyer B learns
some x′ s.t. 𝜙(x′) = 1;
• (seller fairness) for a seller S interacting with a possibly mali-
cious buyer B∗, if S’s balance does not increase, then except for
negligible probability, B∗ learns no information of x, apart from
what can be inferred from 𝜙.
For buyer fairness, If B interacts with a possibly malicious S∗,
and S∗’s balance increases, then it must be the case that all three
of the following conditions are met
1. in the “validate” phase, B receives 𝜋 s.t.
ΠCom.Verify(𝜎, (𝜙, cx), 𝜋) = 1;
2. by the end of the “deliver” phase, z, h and (𝜋z) s.t.
ΠCom.Verify(𝜎, (z, h, cx), 𝜋z) = 1;
3. in the “finalize” phase, J gets k s.t. H(k) = h.
Due to the computational knowledge soundness of ΠCom, for con-
dition 2. to hold, there exists an extractor Ext which except for
probability negl(𝜆), outputs (x′, k′)
Enck(x′) = z ∧ h = H(k′).
Similarly for condition 1. to hold, there must exist an extractor Ext
which except for probability negl(𝜆), outputs x′′ s.t.
𝜙(x′′) = 1.
Due to the binding property of Com, except for negligible probabil-
ity, there is x′′ = x′, and hence 𝜙(x′) = 1. Assume that at the end
of protocol execution, S∗’s balance increases, but B does not learn
x′, then it must be the case that in the “finalize” phase J receives
some k different from k′ but H(k) = h. This breaks the collision
resistance of H.
In Section 4.2.2, we propose using commitment ck instead of h.
Then B loses its funds but learns a wrong x iff in the “finalize” phase
J learns a pair (k, rk) s.t. k ≠ k′ but Check(pp, ck, (k · 1), rk) = 1.
This breaks the binding property of the commitment scheme Com.
For seller fairness, if S interacts with a possibly malicious B∗,
and S’s funds do not increase, we can construct a simulator SimB∗
which runs on input (cx, z, h), and for B∗ it is indistinguishable
from an honest seller S. The simulator SimB∗ works as follows:
1. in “validate” phase, SimB∗ runs ΠCom’s simulator Sim, sends
2. in “deliver” phase, SimB∗ runs ΠCom’s simulator Sim, gets 𝜋′
z ←
𝜋′ ← Sim(𝜎, (s, cx));
Sim(𝜎, (z, cx, h)), sends (z, h, 𝜋′
z);
3. in “reveal” phase, SimB∗ aborts.
Due to the zero-knowledge property of ΠCom, 𝜋′ and 𝜋′
z are in-
distinguishable from that sent by an honest S. Moreover, on the
premise that S’s funds does not increase, either B∗ aborts, or S sees
a transaction tx posted by B∗ which contains some h s.t. H(k) ≠ h,
in which case S must abort in “reveal” phase.
Moreover, due to preimage resistance of H, it is infeasible for B∗
to infer k from h, so it cannot decrypt z to x. Similar conclusion
holds when we use ck instead of h, due to the hiding property of
Com.
F Pay to sudoku solution by ZKCPlus
Herein we describe how ZKCPlus adapts to the scenario of exchang-
ing sudoku solutions. Assume a sudoku puzzle of dimension D × D.
The protocol starts with the “commit” phase where the seller S
makes commitment to the solution x ∈ FD2
p . We’ve described how
the data-parallel CP-NIZK argument in Section 3 applies to the
“delivier” phase of ZKCPlus; what is not so obvious is that it also
applies to the “validate” phase for a sudoku solution as well. To
convince the buyer that x is correct, S has to prove that of the
D × D solution, each row ri, column ci, and sub-grid si for i ∈ [D]
is a permutation of digits {1, . . . , D}, namely
isPermD(ri) = 1,
isPermD(ci) = 1,
(79)
hold for all i ∈ [D]. This constitutes a data-parallel computation
with 3D copies of function isPerm running in parallel. Besides, S
has to prove that {ri} are consistent the committed x. It can be
accomplished by a CP-NIZK argument for inner products
isPermD(si) = 1
⟨ri, yi⟩ = 0,
(80)
⟨x, y⟩ – 
i∈[D]
where y $← FD2
p , and y = (y1|| . . . ||yD). The Schwartz-Zippel lemma
states that except for error D2
|Fp|, (80) holds iff x and {ri} are consistent.
Similar arguments apply to {ci} and {si}. In addition, S has to prove
that x is consistent with the puzzle setting p, that at position i
where the digit is open, there is xi = pi. With binary mask b ∈ FD2
p
Session 11B: Zero Knowledge II CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea3020(cid:40)1 position i is open,
where
to prove it.
bi =
(81)
the consistency between x and p translates into an equation x◦ b =
p. Again S can use an inner product argument for
0 otherwise,
⟨x ◦ b, y⟩ = ⟨p, y⟩
(82)
With the “validate” phase and “deliver” phase separated, one
may optionally incorporate a data compression procedure. Since
each element of x is a digit in the range of [1, D], encoding it as
an element of field Fp is somewhat wasteful. Alternatively, with
l marking the bit length of Fp, and k = ⌈log(D + 1)⌉ marking the
bit length of each digit in [1, D], S may group t = ⌊l/k⌋ digits
into one element of Fp, and reform a solution x of length D2 into
x′ of length ⌈D2/t⌉. To justify the consistency between x and x′,
$← F⌈D2/t⌉
S may randomly sample y′
, and by a length t vector
t = [1, 2k,· · · , 2(t–1)k] construct y as
2k
p
y = [y′
1 · 2k
t ,· · · , y′
(83)
i is the i-th element vector of y′, and then employ an inner
p
,
⌈D2/t⌉ · 2k
t ] ∈ F⌈D2/t⌉·t
where y′
product argument for
⟨x, y⟩ – ⟨x′, y′⟩ = 0,
(84)
with x padded with zeros into the same length as y. With the
compression on, the “deliver” phase runs on x′ instead of x, which
is t times more efficient.
G Other evaluation results
We also measure computational cost of the on-chain arbiter in
ZKCPlus’s “finalize” phase, i.e., the gas cost of the smart contract.
In our protocol the contract takes charge of commitment opening
and concurrent transferring, and by storing a prepared group el-
ement, the computational complexity can be reduced to O(1) (see
Section 4.2.2 for details).
Our evaluation shows that the total on-chain gas cost of the smart
contract in “finalize” phase is quite economical, around 156,770 gas
independent of data size. Among all these consumed gas, trans-
ferring payment and updating the ledger’s state (i.e., writing to
storage) account for the majority of the computational cost by
102,082 gas, and commitment opening costs only about 15,900 gas,
10.14% of the total gas. Considering ZKCP, computing hash on chain
is cheaper than commitment opening, but actually it does not help
much to overall on-chain gas cost, since either hash computation or
commitment opening accounts for only a minor portion of overall
gas cost.
Session 11B: Zero Knowledge II CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea3021