### Section 2: Bitcoin Actors and Protocols

In the Bitcoin system, there are three primary actors: the sender (Sender), the receiver (Receiver), and the miner (Miner). The sender and the miner must participate in the Log protocol to enter transactions into the log. Although, in practice, the miner can perform this task independently after collecting all relevant transactions. The receiver, on the other hand, participates in the CheckEntry protocol to verify that the transaction in which they should receive bitcoins is recorded in the log.

Our transparency overlay for Bitcoin then instantiates the GenEventSet as follows:

- **Receiver**: 
  - `Sender(tx)`: No action.
  - `Miner(headold, hgt, txset)`: No action.
  - `tx`: No action.
  - `txset ← txset ∪ {tx}`: No action.
  - `r←− Mine(headold, txset)`: No action.
  - `head`: No action.
  - `return (head, hgt, txset)`: No action.

- **Sender**:
  - `tx`: Adds the transaction to the set of transactions.
  - `txset ← txset ∪ {tx}`: Updates the set of transactions.
  - `r←− Mine(headold, txset)`: Mines a new block.
  - `head`: Returns the new block header.
  - `return (head, hgt, txset)`: Returns the new block, height, and updated transaction set.

- **Miner**:
  - `headold, hgt, txset`: Receives the old block header, block height, and transaction set.
  - `txset ← txset ∪ {tx}`: Updates the set of transactions.
  - `r←− Mine(headold, txset)`: Mines a new block.
  - `head`: Returns the new block header.
  - `return (head, hgt, txset)`: Returns the new block, height, and updated transaction set.

An event in this context is a transaction (`tx`), which must have a specific structure (e.g., lists of input and output addresses) and meet certain requirements (e.g., no double-spending). A set of events (`eventset`) forms a block, which includes a list of transactions (`txset`), a hash (`head`), a pointer to the previous block (`headprev`), and a height (`hgt`). Combining events in an event set allows us to impose the required notion of timing, represented by the block height (`hgt`). By integrating GenEventSet with the modified protocols described in Section 4.4, we can apply Theorem 4.5 to achieve a secure basic transparency overlay in the Bitcoin setting.

### Section 6.2: Further Security Implications

By applying a transparency overlay to Bitcoin, we provide a method for achieving provable transparency guarantees. This approach also results in a more efficient system, as observed by Miller et al. [27], although they did not provide any security guarantees. In our system, senders and receivers no longer need to store the entire blockchain or set of block headers; instead, they can store nothing or, if the auditor collapses into the users (as discussed in Section 5.3 for CT), they can store a snapshot. This goal was previously achievable using web solutions (e.g., online wallets), but our system is the first to achieve it with provable security guarantees, thereby minimizing the trust users must place in third parties.

Our analysis has implications beyond users' storage of the blockchain. To improve our initial overlay (dubbed the "naïve overlay" in Table 1), one might observe that the miner provides no additional value beyond that of the log server. In contrast to Certificate Transparency (CT), where a Certificate Authority (CA) is necessary to provide a signature and perform external functions, the miner in Bitcoin simply collates transactions and sends them to the log server. By having senders contact log servers directly, we could eliminate the role of mining without any adverse effects on security.

If users are willing to trust a distributed set of log servers, the system can collapse into a distributed structure (the "CT-like overlay" in Table 1) where no energy is expended to produce the ledger, and users have minimal storage requirements. Additionally, if users communicate directly with the log server, we could add a signed acknowledgment from the log server, allowing us to satisfy accountability. This solution closely resembles the recent RSCoin proposal [14] but with additional consistency and non-frameability guarantees, achieving linear scaling in transaction throughput. This distributed approach presents an attractive compromise between the two settings.

### Section 7: Conclusions and Open Problems

In this paper, we initiated a formal study of transparency overlays by providing definitions and a generic secure construction of this new primitive. We demonstrated the broad applicability of our generic formalization by proving that Certificate Transparency (CT) is a secure transparency overlay and presenting a Bitcoin-based transparency overlay that achieves provable notions of security and significantly reduces the storage costs of regular Bitcoin users. Our comparison reveals that in settings where distributed trust is possible, Bitcoin can collapse into CT, eliminating the need for both mining and the storage of the blockchain. However, if one is not willing to trust anyone, these requirements seem inevitable.

While our constructions provide provably secure properties concerning integrity, it is unclear how our transparency overlay could provide the same value to systems requiring a meaningful notion of privacy. Therefore, it is an interesting open problem to explore the interaction between transparency and privacy and to provide a transparency overlay that preserves the privacy guarantees of the underlying system.

### Acknowledgments

Sarah Meiklejohn is supported in part by EPSRC Grant EP/M029026/1.

### References

[References listed here as provided in the original text.]

### Appendix A: Interactive Protocols

We present a formal description of an interactive protocol between multiple participants, as modified from the definitions given by Bellare and Keelveedhi [5]. Consider a protocol `Prot` with a set of participants `Parties`, where each participant is invoked at most `q` times. The protocol can be represented as a tuple `(Prot[party, j])party∈Parties,j∈[q]`. Each algorithm in this tuple is given as input the security parameter `1λ`, a value `a`, and a message `m ∈ {0, 1}∗`, and produces as output a value `a'`, a message `m'`, an indicator `party` of the next algorithm to run, and an output `out`, where `out = ⊥` indicates that the participant has not yet terminated. When all participants have terminated, the protocol has terminated. For stateful participants, the values `a` and `a'` are replaced with `stateparty`.

The execution of a protocol is captured by `Run`, which takes a list of inputs `inputs` and returns a list of outputs `outputs`. The algorithm is described below:

```plaintext
Run(1λ, Prot, Parties, inputs)
T ← ∅; party ← Parties[1]; m ← ε; outputs ← ∅
for party ∈ Parties do a[party, 1] ← inputs[party]; round[party] ← 1
while T (cid:54)= Parties do
    if party ∈ T return ⊥
    i ← round[party]
    (a[party, i + 1], m, party', out) r←− Prot[party, i](1λ, a[party, i], m)
    if (out (cid:54)= ⊥) T ← T ∪ {party}; outputs[party] ← out
    round[party] ← i + 1; party ← party'
return outputs
```

Finally, the transcript (i.e., the messages exchanged during the protocol) is captured by `Msgs`, which takes a list of inputs and returns a matrix of messages. The algorithm is described below:

```plaintext
Msgs(1λ, Prot, Parties, inputs)
T ← ∅; party ← Parties[1]; m ← ε; M ← ε
for party ∈ Parties do a[party, 1] ← inputs[party]; round[party] ← 1
while T (cid:54)= Parties do
    if party ∈ T return ⊥
    i ← round[party]
    (a[party, i + 1], m, party', out) r←− Prot[party, i](1λ, a[party, i], m)
    if (out (cid:54)= ⊥) T ← T ∪ {party}
    round[party] ← i + 1; party ← party'; M[party][round[party]] ← m'
return M
```

### Appendix B: Hash-Based Dynamic List Commitments

In Section 3.2, we presented the formalization of a dynamic list commitment (DLC) and defined its algorithms and desired security properties abstractly. To prove that such structures exist, we present two constructions here and prove their security.

#### B.1 An Instantiation Based on Hash Chains

Briefly, our first construction is essentially a rolling hash chain: the commitment to a list is an iterated hash of its elements (i.e., a hash of the first element is hashed with the second element, etc.), and as new elements are appended, they are folded into the hash. Proofs are simple and mainly involve revealing certain parts of the list and committing to the rest.

- **Com(list)**:
  - `h ← ε`
  - `for all 1 ≤ i ≤ len(list)`
    - `c ← (h, len(list))`
    - `return c`
    - `h ← H(h(cid:107)list[i])`

- **Append(list∆, cold)**:
  - `(h, ℓ) ← cold`
  - `for all 1 ≤ i ≤ len(list∆)`
    - `h ← H(h(cid:107)list∆[i])`
  - `c ← (h, ℓ + len(list∆))`
  - `return c`

- **CheckCom(c, list)**:
  - `return (c = Com(list))`

- **ProveAppend(cold, cnew, list)**:
  - `(hold, ℓold) ← cold`
  - `if cnew (cid:54)= Append(list[ℓold + 1 :], cold)`
    - `return false`
  - `return true`
```

This optimized version of the text is more structured, clear, and professional, making it easier to understand and follow.