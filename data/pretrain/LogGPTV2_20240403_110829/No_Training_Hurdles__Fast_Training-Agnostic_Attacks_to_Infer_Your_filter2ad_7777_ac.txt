### 3.3.2 Inter-Element Relationship Matrix

We introduce a new data structure to represent the structure of every word or CSI word group. Specifically, we denote a word or a CSI word group by a vector \([x_1, \ldots, x_n]\) of \(n\) elements, where each element is a letter (or a CSI sample). We then define its inter-element relationship matrix as follows:

\[
M: [x_1, \ldots, x_n] \mapsto
\begin{bmatrix}
r_{1,1} & r_{1,2} & \cdots & r_{1,n} \\
r_{2,1} & r_{2,2} & \cdots & r_{2,n} \\
\vdots & \vdots & \ddots & \vdots \\
r_{n,1} & r_{n,2} & \cdots & r_{n,n}
\end{bmatrix}
\]

To construct \(M\), for a CSI word group \([x_1, \ldots, x_n]\), we set \(r_{i,j} = 1\) if \(x_i\) and \(x_j\) are similar CSI samples, as classified during the CSI word group generation step (Section 3.2). Otherwise, we set \(r_{i,j} = 0\). Note that the diagonal elements are always 1, and the matrix is symmetric.

We build the inter-element relationship matrix for each word and ultimately partition the 1,500 most commonly used words into 337 sets. The words in a particular set have the same inter-element relationship matrix. On average, each set has about \( \frac{1,500}{337} \approx 4 \) words, which are possible candidates for the CSI word group having that inter-element relationship matrix. The corresponding uniqueness rate is \( \frac{337}{1,500} \approx 0.225 \), which is much larger than those of the previously discussed features.

### 3.3.3 Joint Demodulation Example

Matrix \(R_2\) is constructed in the same way for the second word. Combining both words and considering all similar CSI samples forms the joint sequence \(c_1 || c_2 || c_3 || c_4 || c_5 || c_6 || c_7 || c_8\), and similarly, the new inter-element relationship matrix \(R_{new}\) can be obtained. To search the dictionary \(W\) for these CSI word groups, we pre-compute the inter-element relationship matrix for each word in \(W\). We compare each with \(R_1\) and find that the words "apple" and "offer" survive this test. Each is compared with \(R_2\), and "hat", "old", "are", and "pen" survive the test for the second word group. The 8 resulting candidates for the two-word sequence are thus "apple||are", "apple||hat", "apple||old", "apple||pen", "offer||are", "offer||hat", "offer||old", and "offer||pen". We use \(T\) to denote the set of these candidates.

We generate the relationship matrix for each new candidate in \(T\) and compare it with \(R_{new}\). Only "apple||pen" survives this test and must be the final result.

### 3.3.4 General Joint Demodulation Method

In the following, we extend the joint demodulation method utilized in this example to \(m\) CSI word groups. After CSI word group generation, assume that the attacker obtains from the eavesdropped typing \(m\) CSI word groups denoted by \(S = \{S_1, S_2, \ldots, S_m\}\). We further use \(W_1, W_2, \ldots, W_q\) to denote the \(q\) words in the dictionary \(W\). Our goal is to find a phrase of \(m\) words that corresponds to the \(m\) CSI word groups. Clearly, while each individual CSI word group could have several candidate dictionary words with matching structure, each candidate will impose a mapping of some CSI samples and letters on some successive words, and several of these possible mappings will result in successive words that are not real, so the below technique works to rule out these impossible mappings. The full method includes two steps: 1) demodulation of each single CSI word group; and 2) joint demodulation of multiple CSI word groups.

**Step 1: Initial Candidate Selection**
This step finds initial candidate words for each CSI word group or determines if a word cannot be immediately demodulated and must be returned to later. We first create the inter-element relationship matrices for \(W_1, W_2, \ldots, W_q\) in our dictionary \(W\). We next iterate over each \(S_i \in S\), creating its inter-element relationship matrix and considering the subset \(W'\) of \(W\) whose entries are of the same length as \(S_i\). We compare the relationship matrix of \(S_i\) to that of each \(W_j \in W'\) and mark that \(W_j\) as a candidate if the two matrices are equal. If no candidates match, the word must not appear in the collection of English words comprising our dictionary, so we add \(S_i\) to the "undemodulated set" \(U\).

**Step 2: Joint Demodulation**
This step works to build up a mapping between CSI samples and letters that works for multiple CSI word groups simultaneously, successively ruling out the many candidates established by the first step, until (ideally) only one candidate remains for each word and the message is uncovered. Conceptually, we iterate over the word groups not in the undemodulated set \(U\):

1. Concatenate each with all those previous.
2. Apply each possible mapping thus far constructed.
3. Rule out all candidates that cannot coexist with any mappings.
4. Add any new CSI sample/character mapping information from the remaining candidates.

Specifically, we name \(T_i\) the concatenation of the first \(i - 1\) CSI word groups \(\{S_1, \ldots, S_{i-1}\}\). For each \(T_{ij} \in T_i^C\) and \(S_{ik} \in S_i^C\), if \(M(T_i || S_i) = M(T_{ij} || S_{ik})\), then \(T_{(i + 1)}^C \leftarrow T_{(i + 1)}^C \cup T_{ij} || S_{ik}\). Pseudocode for this step is shown in Algorithm 1.

```pseudo
Algorithm 1: Joint_Demod(Si, TiC, U)
1: procedure Joint_Demod(Si, TiC, U)
2:   if TiC = ∅ then
3:     U ← U ∪ Si
4:     T(i + 1)C ← TiC
5:   end if
6:   for Tij in TiC do
7:     for Sik in SiC do
8:       if M(Ti || Si) = M(Tij || Sik) then
9:         T(i + 1)C ← T(i + 1)C ∪ Tij || Sik
10:      end if
11:    end for
12:  end for
13:  return T(i + 1)C
14: end procedure
```

In this manner, we iterate over \(i\) and gradually build up \(T_i\) until all distinct CSI samples are mapped to characters in the alphabet. At this time, the mapping can be applied to the remaining word groups, including those in \(U\), for which no matches were found in the dictionary used. An example of this final alphabet matching is visible in Figure 4.

### 3.3.5 Error Tolerance

Wireless channel noise may cause CSI classification errors, such that a recorded CSI sample for a character typed might not appear like others for that character or may appear like a different character. Additionally, CSI samples may be classified correctly, but a typo by the user may mean a word is misspelled and will not appear in the dictionary. This can cause a concatenated set of CSI word groups to have an incorrect inter-element relationship matrix, which may match with invalid words or have no candidates at all. The latter is the ideal case as the word group having the CSI sample in question will simply be added to the undemodulated set and skipped. However, if invalid words are incorporated into the candidates for joint demodulation, incorrect relationship matrices will continue to be used as the joint demodulation progresses, and the content recovery will fail. We have observed in experiments that even if a wrong matrix matches to other word sequences, cascading discovery failures inevitably happen for successive words.

The attacker may employ this observation to work around the presence of typos or CSI classification errors. If a CSI word group is successfully demodulated but continuous recovery failures occur thereafter, this word can be added to the undemodulated set and skipped in favor of proceeding with the next word. Further word groups are thus less likely to be processed with an incorrect portion of the relationship matrix, and a correct mapping is more probable. Algorithm 2 shows how our system checks for cascading errors.

### 3.3.6 Impact of Non-Alphabetical Characters

Users mostly type alphabetical characters and spaces, but also occasionally use numbers and punctuation, which obviously cannot be matched by examining word structures. If these appear during alphabet mapping construction, they will cause cascading demodulation errors, be added to the undemodulated set, and be skipped, similar to typos or CSI classification errors as just discussed. If the mapping has already been constructed, the CSI samples for these numbers or punctuation will not appear in the mapping and will be left as unknown. In both cases, the attacker can use some common knowledge to infer or narrow down candidates for these characters.

For example, users press the backspace key to remove multiple characters before the cursor and then continue typing. For a CSI word group that is recovered as "abab××out", the attacker may infer that the backspace key was pressed twice, and the actual text might be "abab out".