but a malicious web page can specify a “javascript”
protocol URI. When the privileged UI code attempts
to load the image by setting the src property of
the icon container to the Href URI, it will inadver-
tently execute script code. This code will be com-
piled with the unprivileged principals of the URI,
but it will have access to the privileged UI names-
pace, allowing reference leaks, which can then be
used for other attacks (e.g., see Section 3.2.4). This
vulnerability occurs because the native code im-
plementing the icon container and the compilation
function are unaware of the origin of the Href ar-
gument.
3.2.2 Compilation with Wrong Principals
Figure 3 shows code that exploits a code
compilation and a reference leak vulnerabil-
ity to create a dynamically-deﬁned function
(clonedFunction) with elevated privileges.
The eval function compiles and executes the
evalCode string with the unprivileged principal of
the web page. However, the attacker has also sup-
plied a second argument that speciﬁes the names-
pace for name resolution during the string evalu-
ation. Normally, this argument does not cause a
problem because it belongs to the same namespace
as the caller’s namespace. However, xbl object
is a benign reference leak from a privileged names-
pace.
Exposing xbl object is a reference leak, but it
is not sufﬁcient for an attack because the interpreter
invokes eval with the correct caller’s principals.
However within eval, once run, the evalCode
byte code gets access to a privileged namespace.
This access by itself is still not a problem because
evalCode runs with the web page principals, and
thus will not be able to get past the stack inspection
checks. Similarly, invoking deliverPayload
directly within evalCode would not be problem-
atic.
The exploit occurs when evalCode creates
a function referenced by clonedFunction.
The interpreter creates a new function object
in the privileged namespace that
is a clone of
deliverPayload. When a function is created
by cloning, its principal is set to its object princi-
pal, as described in Section 2.2.2. When the cloned
function is invoked, it executes its payload with el-
evated privileges. In effect, this exploit attaches a
user-supplied function to a privileged namespace,
making it appear privileged to the security manager.
This vulnerability occurs because the implementa-
tion of eval did not check that it was compiling
code from one principal and executing it within the
namespace of a more privileged principal.
The patch for this vulnerability added a check to
eval to ensure that the principal of the caller sub-
sumes the object principal of the second argument.
However, it was discovered that this patch could
be bypassed by invoking eval indirectly using the
timer method setTimeout. When the natively-
var code = "... payload ...";
document.body. defineGetter
("localName", Script(code));
Figure 4: Simpliﬁed exploit code for Bug 289074.
implemented timer ﬁres, there are no JavaScript
frames left on the stack, so the caller’s principal
is the fully privileged principal of the native timer
code. The next patch prevented eval from being
called directly by native code. Further patches were
needed to ﬁx other attacks on eval.
3.2.3 Luring Privileged Code
Figure 4 shows the exploit code for a lur-
ing attack.
This exploit would trigger if the
document.body.localName property is read
by the UI code. This code tricks the privileged code
into working with a different property than the one
it expects by associating a getter function with a na-
tive DOM object property (localName). Further-
more, the Script object behaves like an eval-like
function that allows strings to be precompiled and
executed with the privileges of the caller’s princi-
pal.2 The consequences are equivalent to privileged
JavaScript executing a string of the attacker’s choos-
ing, although no code is compiled in the privileged
namespace. This vulnerability occurs because the
caller accesses an overridden property.
This problem was so widespread in Firefox
1.0 that it motivated developers to implement the
“safety wrapper” mechanism that allows privileged
scripts to work with native DOM objects without
being exposed to any modiﬁcations made by web
page scripts. However, even the latest releases of
Firefox continue to suffer from bugs in assigning
wrappers, thus allowing privileged scripts to interact
with tampered DOM methods and properties [6].
3.2.4 Privileged Reference Leaks
Figure 5(a) shows code that exploits a reference leak
vulnerability in the QueryInterface XPCOM object.
A ﬂaw in the XPConnect code for setting up safety
wrappers for native objects inadvertently sets a priv-
ileged object as the prototype of the safety wrapper
for QueryInterface in untrusted namespaces. Ma-
licious code can use this leak to reach the global
2This Firefox-speciﬁc object has been deprecated since
Firefox 3.0, presumably due to security risk.
QueryInterface. proto . parent ;
var leaked =
var cid = {equals:
leaked.foo.getClassObject(cid);
Script(payload)};
(a) Simpliﬁed exploit code.
var foo = {
getClassObject:
function(aCID) {
if (aCID.equals(value))
return this. objects[key];
}
};
(b) Simpliﬁed target code.
Figure 5: Exploit and target code for Bug 294795.
object of a privileged namespace. The exploit calls
the script method foo.getClassObject in the
privileged namespace with a specially-crafted argu-
ment to carry out a luring attack.
The getClassObject method shown in Fig-
ure 5(b) relies on namespace isolation and thus ex-
pects to be called from other privileged functions
with safe arguments. However, when it calls the
equals method of its aCID parameter, it inadver-
tently invokes the Script object deﬁned by the at-
tacker, executing it with full privileges.
3.2.5 Loading Privileged URIs
There are also attacks that use a combination of a
bug that allows unprivileged pages to load higher
privilege documents (e.g., “chrome” protocol URIs)
and a cross-site scripting (XSS) bug to inject their
own scripts into these pages. Bug 306261 allowed
untrusted pages to bypass restrictions on loading
privileged URIs of the “about” protocol (which al-
lows setting browser conﬁguration values) by using
a malformed URI. We do not address XSS bugs or
violations of URI loading policies, but our system
is able to detect this category of attacks because it
leads to code injection.
3.3 Comparison With Memory Safety
JavaScript extensions have many clear beneﬁts, but
they suffer from risks posed by these four classes
of vulnerabilities. As a result, Firefox users have
been victims of real-world privilege escalation at-
tacks and the Firefox bug database shows that the
incidence rate for these types of vulnerabilities is
comparable to memory-safety vulnerabilities (more
on this in Section 5.1).
At ﬁrst, this may seem counter-intuitive: com-
ponents written in a memory-safe, interpreted lan-
guage should be more secure than their native equiv-
alents. This intuition may be true in single-principal
applications, but Firefox must execute JavaScript
from multiple principals concurrently and must ar-
bitrate over many possible interactions, which raises
the specter of bugs leading to privilege escalation at-
tacks.
In fact, the classes of vulnerabilities we found
for the multi-principal Firefox script environment
are similar to memory-safety vulnerabilities found
in single-principal native code. The code compila-
tion vulnerabilities are not unlike buffer overﬂows:
data is executed as code, allowing for arbitrary code
execution. The luring vulnerabilities allow attackers
to call existing functions of their choosing, similar
to return-to-libc attacks [5].
4 Approach
Script-based extensibility in the Firefox web
browser is a powerful feature and is highly valued
by its users. However, it leads to privilege escalation
vulnerabilities precisely because of the dynamic and
ﬂexible nature of the script language used to imple-
ment the extensions. The language features allow
leveraging browser bugs or vulnerable extensions to
confuse the browser into assigning wrong principals
to code, thus bypassing stack inspection.
Privilege escalation vulnerabilities also arise be-
cause Firefox’s implementation of one-way names-
pace isolation is inherently error prone.
The
browser fully trusts script extensions, but these
scripts can interact with data from unprivileged
sources in unsafe ways, compromising namespace
isolation. One-way namespace isolation will not
disappear from extensible browser architectures, as
extensions will always need to read and modify un-
trusted web pages. One method of improving the
security of one-way namespace isolation is to pro-
vide stronger isolation guarantees. For example,
Google Chrome [10] divides an extension into sep-
arate processes, one for for accessing privileged in-
terfaces, and another for interacting with untrusted
web pages, while only allowing IPC between the
two processes. This architecture requires increased
implementation effort from the extension developer
and is completely incompatible with the Firefox ex-
tension model.
Instead, our solution is to use tainting to aug-
ment the browser’s security mechanisms. We use
tainting because it helps detect when untrusted con-
tent can affect privileged code. Furthermore, it is
fully compatible with the current Firefox extension
model. Unfortunately, many tainting-based systems
suffer from endemic false alarms and thus are un-
usable in practice [18].
In this section, we show
that our tainting-based solution, while being con-
ceptually simple, is well-suited for the browser’s se-
curity model because namespace isolation already
provides a security barrier between the taint sources
in content namespaces and privileged code in exten-
sion namespaces.
4.1 Threat Model
We deﬁne a privilege escalation attack as tainted
data executing as privileged code. Tainted data is
executed as privileged code if it is compiled into
script byte code tagged with the wrong principals,
or if tainted data is used as a reference to execute
privileged code. Both scenarios lead to a failure of
the browser’s security mechanism for guarding ac-
cess to sensitive interfaces, allowing untrusted web
pages to gain the ability to modify the host system.
We add security checks and augment stack in-
spection to look for the characteristic signature of
privilege escalation attacks. To do so, we rely on
the memory safety of the browser as well as the
browser’s ability to correctly assign a principal to
a web page when it is ﬁrst loaded, before any web
page scripts begin executing. Assigning this prin-
cipal is straightforward as it only depends on the
web page’s URI. We do not depend on the correct-
ness of the rest of the code that assigns principals, or
code that interprets principals. Instead, we “second
guess” browser security code by auditing its secu-
rity decisions with the additional taint status infor-
mation.
4.2 Tainting
We consider all documents fetched from remote
sources or local documents opened with the “ﬁle”
protocol as untrusted and taint them because the
browser does not assign them a privileged princi-
pal. When documents are loaded into the browser,
they are parsed into a tree of native DOM objects,
representing individual markup elements and their
attributes. All nodes of the tree are individually
marked tainted, including the text of any scripts de-
ﬁned inside the document, such as in event handlers
or in SCRIPT tags, and taints are tracked separately
for each attribute of a DOM element.
Tainting systems can suffer
Our tainting system uses different policies based
on the privilege level of the executing script. Un-
privileged code is completely untrusted and may
be malicious, so we must unconditionally taint all
script variables created or modiﬁed by executing
scripts originating from untrusted (tainted) docu-
ments. For privileged scripts, we use standard taint
propagation rules that mark the output of JavaScript
instructions as tainted when the instruction inputs
are tainted. Tainting allows us to mark and track the
inﬂuence of untrusted code throughout the browser.
from excessive
false alarms when using control-dependent taint-
ing. Control-dependent tainting taints the output of
any code whose execution depends on tainted data.
For example, all outputs of an if-branch would be
tainted if the condition variable were tainted. Con-
trol dependence is necessary when the code process-
ing the tainted data may itself be malicious. For ex-
ample, detecting cross-domain information leaks re-
quires accounting for implicit ﬂows, since malicious
web page scripts could leak information [19]. We do
not use control-dependent tainting on the privileged
side because we assume that the privileged scripts
are trusted. We consider it highly unlikely that priv-
ileged script code would accidentally launder taints
through control ﬂow and then execute the laundered
data as privileged code.
It is necessary to track taint both in the native
code and inside the script interpreter. For exam-
ple, when a new HTML document is loaded into a
tab, privileged UI script code reads the tainted doc-
ument’s title property and sets it as the caption of
the tab element. This requires taints from native
DOM objects associated with the HTML document
to propagate to script variables in the UI code and
then back to DOM objects associated with the UI
document. On the native side, we track the taint sta-
tus of string properties of XPCOM objects. Taint-
ing code in XPConnect taints any JavaScript ref-
erences to unprivileged DOM elements and prop-
agates taints between the XPCOM and JavaScript
environments.
4.3 Attack Detection
We deﬁne a privilege escalation attack as tainted
data executing as privileged code. We implement
two classes of attack detectors to detect this con-
dition: compilation detectors and invocation detec-
tors. Compilation detectors ensure that tainted data
is never compiled into byte code tagged with priv-
ileged principals, while invocation detectors moni-
tor the stack for tainted references to function ob-
jects creating privileged frames. Compilation de-
tectors map closely to code compilation vulnerabil-
ities, while invocation detectors are best suited for
preventing luring attacks.
4.3.1 Compilation Detectors
We use compilation detectors as a proactive mea-
sure to prevent tainted data from being compiled
to privileged byte code, even if it is never exe-
cuted. These detectors are well suited for secur-
ing eval-like functions that compile strings into byte
code, because the string’s taint status informs these
functions of the string’s origin. These detectors al-
low defending against compilation bugs such as the
wrong principal attack (see Section 3.2.2).
If na-
tive XPCOM code compiles the strings, as in the
URI code injection attack (see Section 3.2.1), or the
XSS attacks (see Section 3.2.5), the detectors will
use the taint status of XPCOM string objects to de-
tect and prevent exploits. Our compilation detectors
are placed before all calls to compilation functions,
such as those deﬁned by the JavaScript API.
4.3.2
Invocation detectors monitor script execution for
situations where tainted references to script or na-
tive functions are invoked inside the interpreter and
result in the creation of privileged stack frames.
This policy catches luring attacks in which privi-
leged scripts are tricked into invoking functions of
the attacker’s choice. It also detects when an unpriv-
ileged script uses a reference leak to directly call a
privileged JavaScript function from an extension.
Invocation Detectors
The invocation detectors vary depending on
whether the invoked functions are scripted or native.
Namespace isolation limits script functions to call-
ing other script functions within the same names-
pace. Therefore, our detectors watch for namespace
pollution, namely callers invoking tainted function
references that result in a privileged callee stack
frame, as in the luring attack (see Section 3.2.3).
This detector is able to intercede before any func-
tion code is executed with elevated privileges.
For native functions, it is not as straightforward
to come up with a policy for detecting attacks. It
can be perfectly safe for privileged scripts to in-
voke natively deﬁned methods of tainted object ref-
erences. For example, an extension script could
call the native toLowerCase string method on a
web page’s title string. The reference to the title
string will be tainted, and the function reference to
the toLowerCase method will also be tainted be-
cause it is accessed as a method of a tainted string,
but this operation should not raise a privilege es-
calation alert because, in and of itself, it does not
represent a privilege escalation threat even if it is
called from a privileged context. However, if the
native function called through the tainted reference
is a native XPCOM method that is only accessible
to privileged callers, then a security violation needs
to be raised as it indicates a luring attack.
Thus, it is important to know whether the native
callee is sensitive and whether the caller will be in-
terpreted as privileged. We get this information by
letting the call proceed, and if it reaches XPCon-
nect, the security manager establishes the sensitivity
of the target XPCOM method or property and per-
forms a stack inspection to determine the effective
subject principal of the caller. We augment the se-
curity manager to signal an attack whenever it com-
putes a privileged subject principal, but a tainted
function reference is found on any stack frame dur-
ing the stack walk.
4.3.3 Reference Leaks
As demonstrated in Section 5, we can detect and
stop the vast majority of proof-of-concept exploits
in the Firefox bug database based on reference
leaks. We achieve these results by detecting at-
tempts to directly invoke or lure privileged code
with our invocation detectors, as in the reference
leak attack (see Section 3.2.4), and by detecting ma-
licious attempts to compile tainted strings with our
compilation detectors. However, we are unable to
detect and prevent reference leaks. For example,
in Figure 5(a), we cannot rely on the object refer-
ence’s taint status to detect the privileged reference
leak, because our tainting rules require that proper-
ties of tainted objects, such as QueryInterface, also
be marked tainted.
Although we do not prevent reference leaks, at-