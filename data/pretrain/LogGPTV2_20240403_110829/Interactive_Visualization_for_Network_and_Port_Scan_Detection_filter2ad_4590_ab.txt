from activity level to color. The gradient editor can be used to explore spikes,
gaps, or other interesting features of the activity level space revealed in the his-
togram by mapping each activity level to a smoothly interpolated color. Any
number of arbitrarily colored control points can be added to the gradient; col-
ors are linearly interpolated between control points. In general, operators are
interested in seeing indications of port activity above certain levels [19], and the
gradient editor can act as a ﬁlter to achieve this end.
Figure 2 shows some examples of timelines based on diﬀerent metrics. Dif-
ferent metrics can reveal diﬀerent patterns in the data. The basic session count
metric (a) gives a basic overall feel for the amount of activity on a network,
however, when searching for something particular like scans, there are better
alternative views such as the ratio of destination addresses to source addresses
(b). In this view the scan patterns that can be seen in (a) are more clearly
deﬁned. Other views such as the diﬀerence between the session count and the
unique source/destination pairs count (c) can be useful for detecting anomalies
such as covert communications, but are nearly useless for detecting scans be-
cause it essentially ﬁlters out scan activity, leaving only repeated connections.
Another interesting view is the diﬀerence between the number of sessions and
the number of source addresses (d). This essentially ﬁlters out the port scans,
leaving network scans and maintained connections.
Interactive Visualization for Network and Port Scan Detection
271
(a)
(b)
(c)
(d)
Fig. 2. Timelines with diﬀerent metrics
The Grid Visualization. The grid visualization depicts the activity during a
given time unit. It consists of a dot on a 256 × 256 grid for each of the 65,536
ports. The port number can be thought of as a two-byte number. Therefore, the x
(horizontal) axis represents the high byte of the port number, and the y (vertical)
axis represents the low byte of the port number. So each point corresponds to
a particular port, and the color of each point is determined by the value of the
current metric at the corresponding port. Points for which there exists no data
(probably because there was no activity at all on the port) are always black. A
small, square selector (1) corresponds to the ports currently being magniﬁed. The
selector is 4 × 4 grid units in size and can be dragged around with the mouse to
magnify any group of ports the user desires. A large circle (2) serves to help users
locate the selector. The selector is relatively small, and can easily get lost in the
ﬁeld of ports, especially when there is a lot of background noise. A magniﬁcation
area (3) serves to provide detailed information about the magniﬁed ports. Each
port’s exact number is displayed, along with an enlarged visualization of its color
point—to help users correlate it to the main visualization—and its exact data
value. A histogram (not shown) corresponds to the the relative frequencies of
each data value. Like the histogram in the timeline, it serves to identify trends
and/or patterns in the data. A gradient editor (not shown) corresponds to the
the mapping from data values to colors. Like the gradient editor in the timeline,
it helps users explore gaps, spikes, and other interesting features that may be
noticeable in the histogram.
The Scatterplot. The scatterplot was added to help analysts compare the dif-
ferent metrics. Scatterplots have been applied to security visualizations in previ-
ous work [5, 10]. The scatterplot is an alternative to the grid visualization since
272
C. Muelder, K.-L. Ma, and T. Bartoletti
Fig. 3. The grid visualization. Session counts are shown with a blue to white gradient.
A small region around port 46011 has been zoomed into.
it is at the same semantic level. The primary diﬀerence is that instead of laying
the ports out by their numeric value, they are laid out according to the values of
two metrics for that port. Some features that are diﬃcult to see in the grid view
become quite obvious in a scatterplot and some patterns that are obvious in the
grid view are nearly invisible in the scatterplot. For example, to ﬁnd a network
scan in the grid based requires hunting for a small area with a diﬀerent color,
which can be diﬃcult. But in a scatterplot, one can just look at the ports that
fall in a certain region and deduce that they are likely network scans. However,
while a port scan is quite visible in the grid visualization, in a scatterplot all the
ports involved will occlude each other, making it impossible to see a pattern.
The axes of the scatterplot correspond to two diﬀerent metrics and each point
in the scatterplot is a particular port. The color is determined just like the grid
visualization, but the position is determined by the values of the metrics that
the axes correspond to. The same histogram and gradient editor that are used
by the grid visualization are used to control the scatterplot. Figure 4 shows some
examples of this method. Figure 4(a) shows the total number of sessions on the
x axis versus the number of diﬀerent unique pairs of sources and destinations on
the y axis. This is useful when looking for maintained connections such as covert
communications, because it essentially isolates cases where a few computers were
making a lot of connections. Figure 4(b) shows the number of destination ad-
dresses versus the number of source addresses. Network scans have a low source
count and a high destination count, so they fall into the lower right region of this
scatterplot. The upper left region however, corresponds to ports that had high
source counts and low destination counts, such as would occur in a distributed
denial of service attack.
Interactive Visualization for Network and Port Scan Detection
273
(a) Sessions vs.
pairs
source/dest
(b) Destinations vs. sources
Fig. 4. The scatterplot visualization. Per port values are positioned based on their
values in two diﬀerent metrics instead of by the port number.
The Volume Visualization. The representation of the timeline works very well
for analyzing up to several hundred time units of data at once, but as the number of
time units reaches the number of rows of pixels available, detail is lost. Alternative
representations of time exist; for instance, [12] describes a method for compacting
a timeline of arbitrary length into a visualization of constant size. The other option
is to add one more dimension to the visualization so more information may be
presented. Each row in the previous timeline visualization becomes the 2D plane
that the grid visualization would generate, displaying a selected attribute for every
port. With time as the third dimension, a volume is formed. In order to view this
volume interactively, a hardware accelerated volume renderer was used. Figure 5
shows a volume rendered image of such a representation that gives essentially an
expanded view of the same information that the other views provide. The axes of
the volume in this particular image are time going from left to right, high byte
going from bottom to top, and low byte going from front to back.
The volume rendering has the advantage of not needing another visualization
at the time instant semantic level, because it displays all of the data at once.
However, the dataset is not very conducive to volume rendering. The features
of interest are quite often only one or two voxels across, so they could easily
be missed. Also, occlusion and noise can make it very diﬃcult to see interesting
patterns. But it still provides a nice way to see the whole dataset without having
to go back and forth between several panels.
The Port Visualization. The timeline visualization can identify a particu-
lar block of ports at particular time that warrant further investigation. The
main visualization can often—as in Figure 3—identify speciﬁc ports(s) to be
investigated. But, given that information, one question remains: is the identiﬁed
activity on the port anomalous? This question is addressed by the remaining
274
C. Muelder, K.-L. Ma, and T. Bartoletti
Fig. 5. This 3D volume visualization provides an overview of time-varying port at-
tributes using volume rendering
visualization technique, which is a view of all the data available that concerns a
particular port.
Figure 6 displays the components of the port visualization. Each of the parallel
graphs correspond to a particular data metric. The vertical axes correspond to
the data values; the greater the value, the more height. The horizontal axis
corresponds to time. The time currently being analyzed is indicated by a red
(a) port 80
(b) port 46011
(c) port 27374
(d) port 34816
Fig. 6. The port visualization. Plots of metrics versus time for individual ports. In each
example, the session count (the ﬁrst metric) is highlighted. The other 4 metrics shown
are destination address count, source address count, unique source and destination pair
count, and source country count. These ports show a few distinct patterns of activity.
Interactive Visualization for Network and Port Scan Detection
275
bar. And ﬁnally, the attribute that is currently being analyzed with the main
visualization is highlighted in red.
Examples of some ports are given in Figure 6. The usage of Port 80 is very
periodic; it goes up during the day, and, predictably, down during the night.
Port 46011 has a fairly constant level of activity, with a few spikes. Port 27374
is more erratic, though, interestingly, its usage drops noticeably as time goes on.
Port 34816 has one of the most suspicious usage graphs; it is only used a few
times, but it is used fairly heavily during those times.
Comparing and Contrasting. It is often the case that a network analyst is
not interested so much in what occurred during a particular time unit but rather
what changed across a range of time units. [8] Therefore, a feature was imple-
mented that allows analysts to select any arbitrary set of time units and see on
the grid visualization not a depiction of the actual values at each port but rather
a depiction of the variance of the values at each port. Suppose, for instance, that
the analyst selected 4 units of times, during which the port had 1,434 sessions,
1,935 sessions, 1,047 sessions, and 1,569 sessions, respectively. The system would
then assign that port a value equal to the σ2 of this set of values.
However, a large absolute variance on port 80 is a lot less interesting then the
same variance on some random high numbered port such as port 12345. This is
because the average value of a metric on port 80 would be expected to be much
larger then on port 12345. So in order to prevent values from common ports such
as port 80 from overwhelming the rest of the data, the capability was added to
view relative variance. This is calculated by dividing the variance calculated for
each port by the average value for that port. Thus, while a variance of 1,000
would be the same on port 80 or port 12345, the relative variance for port
80 would likely be very small, while the relative variance on port 12345 would
probably be quite large. So the capability to calculate the relative variance over
a range of time was added. Using this statistical method can sometimes bring
out interesting patterns that were previously unseen. In ﬁgure 7(a), the variance
over the whole dataset was calculated. While several interesting ports show up,
any pattern that shows up is quite faded, if visible at all. However, when the
(a) Variance
(b) Relative variance
Fig. 7. Variance calculations
276
C. Muelder, K.-L. Ma, and T. Bartoletti
relative variance is calculated instead, as in ﬁgure 7(b), the patterns show up
distinctly. In particular, there is a suspicious line down the middle of the image
that is completely invisible in the left image.
During the course of a day, the amount of traﬃc on a network will naturally
vary substantially. This eﬀect can be seen quite clearly in the oscillating pattern
on port 80 shown in ﬁgure 6 This can skew some of the results, as natural traﬃc
will have variance but attacks can have relatively low variance. However, one
would expect that as traﬃc levels rise and fall, the percentage of traﬃc that
occurs on a particular port will be relatively constant. That is, if approximately
half the traﬃc is on port 80 at midday, approximately half the traﬃc should
be on port 80 at midnight as well. Therefore, in order to counter the natural
variance, one can normalize the data into percentages of the total amount at a
particular time. So the option was added to allow to normalize the data before
calculation of variance.
4 Case Studies
The data sets used in our study were collected by a number of network traﬃc
analyzers installed at the Internet gateway of selected Department of Energy
sites. These traﬃc analyzers summarize large amounts of Internet Protocol (IP)
traﬃc that ﬂows to/from the Internet. As a result of the summarization, the data
is reduced to a set of counts of entities. For instance, instead of a list of each
TCP session, there is a ﬁeld that speciﬁes how many TCP sessions are present;
instead of a list of source IP addresses, a ﬁeld speciﬁes how many diﬀerent source
IP addresses were present. While the raw data is unclassiﬁed, it is handled as
Oﬃcial Use Only (OUO), and is therefore restricted, but the summarized data
is not, and so it is not restricted.
The full list of ﬁelds present appears in Table 1. The ﬁrst three ﬁelds are
used for ﬁltering and positioning the data; the last ﬁve ﬁelds are considered
to be attribute values. The ﬁelds in combination tell a much more useful story
than any individual ﬁeld. For instance, suppose that a port has a relatively high
session count. What does this represent? If many sources and one destination
are involved, it could be a distributed denial of service attack, in which many
systems attack one system, often targeting a service on a speciﬁc port. If many
destinations and one source are involved, it could be a network scan or worm
attack, in which a single attacker or group of attackers probes a number of des-
tination machines on the same port, looking for a vulnerable service. If only a
single source and destination are involved, it could be a TTL walking attack,
in which an attacker probes a machine 50–100 times in an attempt to deter-
mine the network topology through TTL variations. Therefore, information on
the uniqueness of source addresses, destination addresses, and pairs of the two
is very useful to analysts. In particular, the number of unique pairs provides
a redundancy-free measure of the extent to which a port seems broadly inter-
esting to the community of adversaries—a measure that is very diﬃcult for an
individual attacker to skew.
Interactive Visualization for Network and Port Scan Detection
277
Table 1. The ﬁelds available, and an example of each. Each tuple represents the activity
on a given port during a given time period, through the given protocol. The ﬁrst three
ﬁelds (Protocol, Port, and Time) form a unique, composite key. The example row here
is ﬁctitious.
Field
Protocol
Port
Time
Session count
Unique source addresses
Unique destination addresses
Unique src/dest address pairs
Unique source countries
Example
TCP
80