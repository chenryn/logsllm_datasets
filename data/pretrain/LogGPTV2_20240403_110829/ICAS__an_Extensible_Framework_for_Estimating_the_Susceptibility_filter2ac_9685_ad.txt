∗ bsame
+
∗ badjacent
3
(1)
(2)
(3)
(cid:19)
HARDWARE TROJANS USED IN DEFENSIVE COVERAGE ASSESSMENT.
TABLE I
Trojan
A2 Analog [6]
A2 Digital [6]
Privilege
Escalation [7], [17]
Key Leak [18]
# Std
Cells
2
91
25
187
# Placement
Sites
20
1444
342
2553
Timing
Critical?




3) Metric 3: Route Distance: The Route Distance metric
combines the Net blockage and Trigger Space metrics (thus
is correlated with these metrics) to estimate the difﬁculty of
of meeting Trojan and attack timing constraints (§V-C). It
computes a conservative estimate, i.e., Manhattan distance, for
the minimal routing distance between open trigger placement
sites and the n least blocked integration sites on the targeted
security critical nets. It cross-references each Manhattan dis-
tance with the distribution of net lengths within the entire
IC design. Net length can impact whether or not the Trojan
circuit will meet timing constraints and function properly.
Understanding where in the distribution of net lengths the
Trojan routing falls provides insights into the ability of the
Trojan circuit
its timing requirements and is an
opportunity for outlier-based defenses. In summary, the more
Manhattan distances that fall within one standard deviation of
the mean net length, the easier it is to carry out an attack.
to meet
We implement the Route Distance metric as follows. First,
the Net Blockage and Trigger Space metrics are computed.
Next, the the distribution of all net-lengths within the IC layout
are computed. Then,
two-dimensional Manhattan distances
between all unblocked nets (< 100% overall net blockage)
and trigger spaces are calculated. The Manhattan distance
calculated is the minimum distance between a given trigger
space and security-critical net,
the minimum distance
between any placement site within the given trigger space
and any unblocked location on the targeted security-critical
net. Lastly, each Manhattan distance is reported in terms of
standard deviations away from the mean net-length in the given
IC layout.
i.e.,
VII. EVALUATION
We use ICAS to quantify the defensive coverage of existing
defensive layout techniques—revealing that gaps persist. First,
we analyze the effectiveness of undirected defenses [15].
Speciﬁcally, we measure the impact of varying both physical
and electrical back-end design parameters of the same IC
layout on its susceptibility to attack. Second, we analyze the
effectiveness of directed defenses [13], [16]. Speciﬁcally, we
measure the coverage of existing, placement-oriented, defen-
sive layout schemes in preventing the insertion of an attack
by the foundry. Beyond revealing gaps, our results reveal that
there is an opportunity for improving both directed and undi-
rected defenses that systematically eliminates Trojan/victim
integration points. Lastly, our evaluation also demonstrates that
ICAS is design-agnostic, works with commercial tools, and
scales to complex IC layouts.
A. Experimental Setup
We utilize three IC designs for our evaluations: OR1200
processor SoC, AES accelerator, and DSP accelerator. The
OR1200 processor SoC is an open-source design [36] used
in previous fabrication-time attack studies [6]. The AES and
DSP accelerator designs are open-sourced under the Common
Evaluation Platform (CEP) benchmark suite [47]. The OR1200
processor SoC consists of a 5-stage pipelined OR1200 CPU
that implements the 32-bit OR1K instruction set and Wishbone
bus interface. The AES accelerator supports 128-bit key sizes.
The DSP accelerator implements a Fast Fourier Transform
(FFT) algorithm.
All designs target a 45nm Silicon-On-Insulator (SOI) pro-
cess technology. We synthesize and place-and-route all designs
with Cadence Genus (version 16.23) and Innovus (version
17.1), respectively. In our ﬁrst evaluation (§VII-B) the design
constraints (clock frequency, max transition time, core den-
sity) used for both synthesis and layout are varied as noted.
However, in our second evaluation (§VII-C) the same design
constraints (100 M Hz clock frequency, 100 ps max transition
time, 60% core density) were used for both synthesis and
layout to form a common baseline. All ICs are synthesized and
placed-and-routed on a server with 2.5 GHz Intel Xeon E5-
2640 CPU and 64 GB of memory running Red Hat Enterprise
Linux (version 6.9).
1) Security-critical Signals: The ﬁrst tool in the ICAS
ﬂow is Nemo. Nemo tracks security-critical signals from the
HDL level to the IC layout level. The ﬁrst step is ﬂagging
root security-critical signals at the RTL level, for each IC
design. For the OR1200 processor SoC, the supervisor bit
signal supv is ﬂagged. We select this signal because one can
alter the state of this bit to escalate the privilege mode of
the processor [6]. For the AES accelerator, we ﬂag all 128
key bits as security-critical. The next out signal within the
DSP accelerator was ﬂagged as security-critical. The next out
signal of the DSP accelerator indicates to external hardware
when an FFT computation is ready at the output registers.
Tampering with the next out signal allows the attacker to
hide speciﬁc outputs of the DSP accelerator. Lastly, Nemo
marks, for each design’s IC layout, all root security-critical
nets and their 2-deep fan-in as security-critical nets.
2) Hardware Trojans: Table I lists the hardware Trojan
designs that we use in our evaluation. The ﬁrst two Trojan
designs (analog and digital variants of A2) are attacks on the
OR1200 processor and DSP accelerator ICs. With respect to
the OR1200, the A2 attacks act as a hardware foothold [7]
for a software-level privilege escalation attack. With respect
to the DSP accelerator, the A2 attacks suppress the next out
signal (§VII-A). The Privilege Escalation Trojan targets solely
the OR1200 and the Key Leak solely the AES accelerator.
3) Build Environment: Both ICAS tools (Nemo and
GDSII-Score) were run on the same server as the synthesis
and place-and-route CAD tools. Nemo and Icarus Verilog
were compiled from source using GCC (version 4.4.7). For
increased performance, GDSII-Score was executed using the
PyPy Python interpreter with JIT compiler (version 4.0.1).
Fig. 8. Trigger Space distributions for 15 different OR1200 processor IC layouts. Core density and max transition time parameters are varied across the
layouts, while target clock frequency is held constant at 1 GHz. The boxes represent the middle 50% (interquartile range or IQR) of open placement regions
in a given layout, while the dots represent individual open placement region sizes.
B. Undirected Defense Coverage
As detailed in §IV-A, a defensive strategy for protecting an
IC layout from foundry-level attackers is to exploit physical
layout parameters (e.g., core density, clock frequency, and
max transition time) offered by commercial CAD tools to
increase congestion—hopefully around security-critical wires.
The tradeoff is that while this is a low cost defense in that
CAD tools already expose such knobs, the entire design is
impacted and there is no guarantee that security-critical wires
will be protected. We use ICAS and its three security metrics to
quantify the effectiveness of such undirected approaches [15].
To uncover the impact of each parameter, we start by gen-
erating 60 different physical layouts of the OR1200 processor
design by varying:
1) Target Core Density (%): 50, 70, 90
2) Clock Frequency (M Hz): 100, 200, 500, 1000
3) Max Transition Time (ps): 100, 150, 200, 250, 300
Target core density is a measure of how congested the place-
ment grid is. Typically, designers select die dimensions that
achieve ∼60–70% placement density to allow space for rout-
ing [6]. Target clock frequency is the desired speed at which
the circuitry should perform. Typically, designers select the
clock frequency based on performance goals. Max transition
time is the longest time required for the driving pin of a net
to change logical values. Typically, designers choose a value
for max transition time based upon power consumption and
combinational logic delay constraints.
For each of the 60 layout variations we compute ICAS
metrics. Figures 8, 9, and 10 provide a visual representation for
each metric. Overlaid on Figure 10 are the number of unique
attack (color-coded) implementations for each Trojan (Tab. I)
at six parameter conﬁgurations. Across the 60 IC layouts, the
time it took ICAS to complete its analyses ranged from 38
seconds to 18 minutes. On average, this translates to less
than 10% of the combined synthesize and place-and-route run-
times. These run-time results demonstrate the deployability
of ICAS as a back-end design analysis tool. Overall, our
evaluation indicates that while some of these layout parameters
do increase attacker complexity, none are sufﬁcient on their
own. We break down the results metric-by-metric.
1) Trigger Space Analysis: Figure 8 shows the distribu-
tions of open trigger spaces across 15 unique OR1200 layouts.
We vary target core density and max transition time parameters
across layouts, while we ﬁx the target clock frequency at
1 GHz. A trigger space is deﬁned as a contiguous region
of open placement sites on the device layer placement grid
and is measured by number of contiguous “4-connected”
placement sites. Each box represents the middle 50%, or
interquartile range (IQR), of open trigger space sizes for a
given IC layout. The dots represent individual data points
within and outside the IQR. Our empirical results afﬁrm prior
notions [13], [15], [16] that increasing the target core density
of an IC layout results in fewer large open spaces to insert
hardware Trojans. Additionally our results indicate that at
lower densities, decreasing the max transition time constraint
decreases the median trigger space size. Similar trends occur
at lower clock frequencies. While results show that modulating
target core density is effective, observe that even in the best
case, large trigger spaces remain.
From our Trigger Space analysis, we conclude future undi-
rected defenses should modulate layout parameters that both 1)
shrink the trigger space IQR, and 2) shift the median towards
one. In doing so, defenders: 1) minimize the variation in sizes
of contiguous open-spaces available to the attacker—therefore
limiting their Trojan design (size) options, and 2) force the
attacker to have to distribute Trojan components across the
die making Trojan logic placement and intra-Trojan routing
more challenging.
2) Net Blockage Analysis: Figure 9 shows the Net Block-
age metric (Eq. 3) computed across 20 unique OR1200 lay-
outs. We ﬁx the target density at 50% across all layouts,
while the target clock frequency and max transition time
are varied (as listed above). The results show that at lower
clock frequencies a smaller max transition time parameter
corresponds to increased Net Blockage. This corresponds to
Fig. 9. Overall Net Blockage results computed across 20 different OR1200
processor IC layouts. A target density of 50% was used for all layouts, while
target clock frequency and max transition time parameters were varied.
less open Trojan/victim integration points available to the
attacker. However, as clock speed increases, the correlation
between max transition time and overall Net Blockage dete-
riorates. Intuitively, smaller max transition times should lead
to smaller average net-lengths within the design, as transition
time is a function of the capacitive load on the net’s driving
pin [39]. Shorter net-lengths result in more routing congestion
as components cannot be spread-out across the die. However,
capacitive load (on a driving pin) is inversely proportional to
frequency, thus at higher clock frequencies the max-transition
time constraint is more easily satisﬁed, and altering it has less
effect on the Net Blockage. Given these results, the effec-
tiveness of modulating transition time is context dependent
and—even in the best case—open integration points remain.
From our Net Blockage analysis, we conclude future undi-
rected defenses should modulate layout parameters that both 1)
shrink overall security-critical wire lengths, and 2) maximize
routing congestion in the vicinity of security-critical wires.
In doing so, defenders minimize the Victim/Trojan integration
attack surface.
3) Route Distance Analysis: Figure 10 shows the Route
Distances across six various OR1200 layouts in the form of
heatmaps that capture the trade space between layout parame-
ters. Core density and max transition times were varied across
the layouts (indicated in the labels), while clock frequency was
held constant at 100 M Hz. Each heatmap describes several
(column-wise) histograms of Route Distances in terms of
standard deviations from the mean net length observed in that
particular IC layout (y-axis). The Route Distances reported
are those between any unblocked security-critical nets, and
trigger spaces large enough to hold an attack of a given
size range (x-axis). That is, the color intensities within in a
given heatmap column indicate the percentage of (security-
critical-net, trigger-space) pairs in that column that are within a
range of distance apart. Additionally, overlaid on each heatmap
are rectangles indicating the region of the heatmap where a
given attack (Tab. I) can be implemented, and the number
of possible attack conﬁgurations, (security-critical-net, trigger-
space) pairs, that can be exploited.
If timing is critical to the operation of an attacker’s desired
Trojan, (critical-net, trigger-space) pairs with routing distances
signiﬁcantly greater than the average net length in the IC
Fig. 10. Heatmaps of routing distances across six unique IC layouts of the
OR1200 processor. Core density and max transition times are labeled. Each
heatmap is to be read column-wise, where each column is a histogram, i.e, the
color intensity within a heatmap column indicates the percentage of (critical-
net, trigger-space) pairs that are within a (y-axis) distance apart. Overlaid are
rectangles, indicating regions on each heatmap a given attack can exploit, and