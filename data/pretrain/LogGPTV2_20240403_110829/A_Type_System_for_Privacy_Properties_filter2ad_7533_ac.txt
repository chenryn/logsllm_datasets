of type T . The type (T)k (resp. {T}k) describes symmetric (resp.
asymmetric) encryptions with key k of a message of type T . The
describes nonces and constants of security level l: the
type τ l,a
label a ranges over {∞, 1}, denoting whether the nonce is bound
within a replication or not (constants are always typed with a = 1).
We assume a different identifier i for each constant and restriction
in the process. The type τ l,1
is populated by a single name, (i.e., i
describes a constant or a non-replicated nonce) and τ l,∞
i
is a special
type, that is instantiated to τ l,1
in the jth replication of the process.
m (cid:75) is a refinement type that restricts the set of val-
Type(cid:74)τ l,a
ij
n ; τ l′,a
ues which can be taken by a message to values of type τ l,a
on the
m on the right. For a refinement type(cid:74)τ l,a
n (cid:75)
n
left and type τ l′,a
n ; τ l,a
n . Messages of
with equal types on both sides we simply write τ l,a
type T ∨ T ′ are messages that can have type T or type T ′.
i
i
4.2 Constraints
When typing messages, we generate constraints of the form (M ∼
N), meaning that the attacker sees M and N in the left and right
process, respectively, and these two messages are thus required to
be indistinguishable.
4.3 Typing Messages
Typing judgments are parametrized over a typing environment Γ,
which is a list of mappings from names and variables to types. The
typing judgement for messages is of the form the form Γ ⊢ M ∼
N : T → c which reads as follows: under the environment Γ, M
and N are of type T and either this is a high confidentiality type
(i.e., M and N are not disclosed to the attacker) or M and N are
indistinguishable for the attacker assuming the set of constraints c
holds true. We present an excerpt of the typing rules for messages
in Figure 4 and comment on them in the following.
Confidential nonces (i.e. nonces with label l = HH or l = HL) are
typed with their label from the typing environment. As the attacker
may not observer them, they may be different in the left and the
right message and we do not add any constraints (TNonce). Public
terms are given type LL if they are the same in the left and the right
message (TNonceL, TCstFN, TPubKey, TVKey). We require keys
and variables to be the same in the two processes, deriving their
type from the environment (TKey and TVar). The rule for pairs
operates recursively component-wise (TPair).
For symmetric key encryptions (TEnc), we have to make sure
that the payload type matches the key type (which is achieved by
rule TEncH). We add the generated ciphertext to the set of con-
straints, because even though the attacker cannot read the plaintext,
he can perform an equality check on the ciphertext that he observed.
If we type an encryption with a key that is of low confidentiality
(i.e., the attacker has access to it), then we need to make sure the
payload is of type LL, because the attacker can simply decrypt the
message and recover the plaintext (TEncL). The rules for asymmet-
ric encryption are the same, with the only difference that we can
always chose to ignore the key type and use type LL to check the
payload. This allows us to type messages produced by the attacker,
which has access to the public key but does not need to respect its
type. Signatures are also handled similarly, the difference here is
that we need to type the payload with LL even if an honest key is
used, as the signature does not hide the content. The first typing
rule for hashes (THash) gives them type LL and adds the term to
the constraints, without looking at the arguments of the hash func-
tion: intuitively this is justified, because the hash function makes
it impossible to recover the argument. The second rule (THashL)
gives type LL only if we can also give type LL to the argument of
the hash function, but does not add any constraints on its own, it
is just passing on the constraints created for the arguments. This
means we are typing the message as if the hash function would not
have been applied and use the message without the hash, which is
a strictly stronger result. Both rules have their applications: while
the former has to be used whenever we hash a secret, the latter
may be useful to avoid the creation of unnecessary constraints
when hashing terms like constants or public nonces. Rule THigh
states that we can give type HL to every message, which intuitively
means that we can treat every message as if it were confidential.
Rule TSub allows us to type messages according to the subtyping
relation, which is standard and defined in Figure 5. Rule TOr allows
us to give a union type to messages, if they are typable with at least
one of the two types. TLR1 and TLR∞ are the introduction rules
for refinement types, while TLR’ and TLRL’ are the corresponding
elimination rules. Finally, TLRVar allows to derive a new refine-
ment type for two variables for which we have singleton refinement
types, by taking the left refinement of the left variable and the right
refinement of the right variable. We will see application of this rule
in the e-voting protocol, where we use it to combine A’s vote (0 on
the left, 1 on the right) and B’s vote (1 on the left, 0 on the right),
into a message that is the same on both sides.
4.4 Typing Processes
The typing judgement for processes is of the form Γ ⊢ P ∼ Q → C
and can be interpreted as follows: If two processes P and Q can
be typed in Γ and if the generated constraint set C is consistent,
then P and Q are trace equivalent. We assume in this section that
P and Q do not contain replication and that variables and names
are renamed to avoid any capture. We also assume processes to be
given with type annotations for nonces.
When typing processes, the typing environment Γ is passed
down and extended from the root towards the leafs of the syntax
tree of the process, i.e., following the execution semantics. The
generated constraints C however, are passed up from the leafs
towards the root, so that at the root we get all generated constraints,
modeling the attacker’s global view on the process execution.
More precisely, each possible execution path of the process -
there may be multiple paths because of conditionals - creates its
own set of constraints c together with the typing environment
Γ that contains types for all names and variables appearing in c.
Session B4:  Privacy PoliciesCCS’17, October 30-November 3, 2017, Dallas, TX, USA414Γ(n) = τ l,a
n
Γ(m) = τ l,a
m
Γ ⊢ n ∼ m : l → ∅
k ∈ dom(Γ)
l ∈ {HH, HL}
(TNonce)
Γ ⊢ pk(k) ∼ pk(k) : LL → ∅ (TPubKey)
Γ ⊢ x ∼ x : T → ∅ (TVar)
Γ ⊢ M ∼ N : T → c
Γ(x) = T
Γ ⊢ enc(M, k) ∼ enc(N , k) : (T)k → c
Γ(k) = keyLL(T)
Γ ⊢ M ∼ N : (LL)k → c
Γ ⊢ M ∼ N : LL → c
Γ(n) = τ LL,a
n
Γ ⊢ n ∼ n : LL → ∅ (TNonceL)
k ∈ dom(Γ)
a ∈ C ∪ FN
Γ ⊢ a ∼ a : LL → ∅ (TCstFN)
Γ(k) = T
Γ ⊢ vk(k) ∼ vk(k) : LL → ∅ (TVKey)
′ ∼ N
′ : T
Γ ⊢ M ∼ N : T → c
Γ ⊢ ⟨M, M
Γ ⊢ M
′⟩ : T ∗ T
Γ ⊢ M ∼ N : (T)k → c
′⟩ ∼ ⟨N , N
Γ ⊢ k ∼ k : T → ∅ (TKey)
′ → c
′
′
(TPair)
Γ(k) = keyHH(T)
′ → c ∪ c
(TEncH)
Γ ⊢ M ∼ N : LL → c ∪ {M ∼ N}
Γ ⊢ M ∼ N : T → c
Γ ⊢ aenc(M, pk(k)) ∼ aenc(N , pk(k)) : {T}k → c
Γ ⊢ M ∼ N : {LL}k → c
k ∈ dom(Γ)
(TAenc)
(TAencL)
(TEnc)
(TEncL)
Γ ⊢ M ∼ N : {T}k → c
Γ(k) = keyHH(T)
Γ ⊢ M ∼ N : LL → c ∪ {M ∼ N}
(TAencH)
Γ ⊢ M ∼ N : T → c
Γ ⊢ M ∼ N : LL → c
′
Γ ⊢ sign(M, k) ∼ sign(N , k) : LL → c ∪ c
′ ∪ {sign(M, k) ∼ sign(N , k)} (TSignH)
Γ ⊢ M ∼ N : LL → c
Γ(k) = keyHH(T)
Γ ⊢ M ∼ N : LL → c
Γ(k) = keyLL(T)
Γ ⊢ sign(M, k) ∼ sign(N , k) : LL → c
(TSignL)
Γ ⊢ M ∼ N : LL → c
Γ ⊢ h(M) ∼ h(N) : LL → c
(THashL)
′ → c
Γ ⊢ M ∼ N : T
names(M) ∪ names(N) ∪ vars(M) ∪ vars(N) ⊆ dom(Γ) ∪ FN
Γ ⊢ h(M) ∼ h(N) : LL → {h(M) ∼ h(N)}
names(M) ∪ names(N) ∪ vars(M) ∪ vars(N) ⊆ dom(Γ) ∪ FN
(THash)
(THigh)
′
<: T
(TSub)
Γ ⊢ M ∼ N : HL → ∅
Γ ⊢ M ∼ N : T → c
Γ ⊢ M ∼ N : T ∨ T
′ → c
(TOr)
Γ(m) = τ l,1
m
Γ(n) = τ l′,1
n
Γ ⊢ M ∼ N :(cid:74)τ l,a
T
Γ ⊢ M ∼ N : T → c
or m ∈ FN ∪ C ∧ l = LL
′ = LL
or n ∈ FN ∪ C ∧ l
n (cid:75) → ∅
Γ ⊢ m ∼ n :(cid:74)τ l,1
m ; τ l′,1
n (cid:75) → c
m ; τ l,a
Γ ⊢ M ∼ N : l → c
n (cid:75) → ∅
Γ ⊢ x ∼ x :(cid:74)τ l,1
m ; τ l′,1
Γ ⊢ x ∼ y :(cid:74)τ l,1
l ∈ {HL, HH}
(TLR1)
(TLR’)
n
m
Γ(n) = τ l′,∞
(cid:75) → ∅
(cid:75) → c
Γ(m) = τ l,∞
Γ ⊢ m ∼ n :(cid:74)τ l,∞
m ; τ l′,∞
Γ ⊢ M ∼ N :(cid:74)τ LL,a
n
; τ LL,a
Γ ⊢ M ∼ N : LL → c
(cid:75) → ∅
; τ l′′′,1
n′
(TLRVar)
n
n
(TLR∞)
(TLRL’)
Γ ⊢ y ∼ y :(cid:74)τ l′′,1
(cid:75) → ∅
m ; τ l′′′,1
n′
m′
Figure 4: Rules for Messages
Hence a constraint set C is a set elements of the form (c, Γ) for a
set of constraints c. The typing environments are required in the
constraint checking procedure, as they helps us to be more precise
when checking the consistency of constraints.
An excerpt of our typing rules for processes is presented in
Figure 6 and explained in the following. Rule PZero copies the
current typing environment in the constraints and checks the well-
formedness of the environment (Γ ⊢ ⋄), which is defined as ex-
pected. Messages output on the network are possibly learned by
the attacker, so they have to be of type LL (POut). The generated
constraints are added to each element of the constraint set for the
continuation process, using the operator ∪∀ defined as
′ :=(cid:8)(c ∪ c
, Γ) | (c, Γ) ∈ C(cid:9) .
′
C∪∀c
Conversely, messages input from the network are given type LL
(PIn). Rule PNew introduces a new nonce, which may be used in the
continuation processes. While typing parallel composition (PPar),
we type the individual subprocesses and take the product union of
the generated constraint sets as the new constraint set. The product
union of constraint sets is defined as
′) |
, Γ ∪ Γ
′ ∧ Γ, Γ
′) ∈ C
, Γ
′ := {(c ∪ c
(c, Γ) ∈ C ∧ (c
′ are compatible}
C∪×C
′
′
where compatible environments are those that agree on the type of
all arguments of the shared domain. This operation models the fact
that a process P | P′ can have every trace that is a combination of any
trace of P with any trace of P′. The branches that are discarded due
to incompatible environments correspond to impossible executions
Session B4:  Privacy PoliciesCCS’17, October 30-November 3, 2017, Dallas, TX, USA415T <: T
(SRefl)
′′
′
1
T1 <: T
T1 ∗ T2 <: T
(STrans)
′
2
(SPair)
T <: T
′
′
<: T
T
′′
T <: T
T2 <: T
′
′
1 ∗ T
2
(SPairS’)
T ∗ HH <: HH
′
T <: T
(T)k <: (T
(SEnc)
′)k
LL ∗ LL <: LL
(SPairL)
HH ∗ T <: HH
(SPairS)