User: 请回答以下安全问题您如何处理内部系统中的漏洞？我在工程师和安全团队之间看到的一个持续的争论来源是如何处理内部系统中的漏洞。特别是Docker容器内的linux包（如gcc、libcurl、openssl、libpng等）中的漏洞。很多时候，应用不使用这些包，它们只是随操作系统一起提供的，而其他时候，这些包被广泛使用。您如何优先处理和修复无法从公共互联网访问的系统中的这些漏洞？这些图像是数据库、缓存、仅限内部应用等。你只是照原样接受NIST CVSSv3评分吗？当需要审查的漏洞数量达到数百或数千个时，这种情况会发生什么变化？
如果您需要一个特定的示例，比如在数据库容器上的nfs-utils包中发现了一个高严重性漏洞。

Assistant: 使用漏洞管理处理漏洞
漏洞管理包括修补，但更多。它包括评估脆弱性和评估控制环境中的缓解措施（修补是其中之一）。
你只是照原样接受NIST CVSSv3评分吗？
嗯，是的。没有必要改变对漏洞的核心评估，但CVSS分数并不能告诉你应该怎么做。你需要将CVSS分数作为风险评估的一部分，但你仍然需要评估其存在的控制环境中的风险。
例如，如果存在只能通过网络利用的漏洞，而机器没有连接到网络的能力，则该威胁会得到缓解。
它变得更复杂
当大多数人提出这种类型的问题时，他们期望复杂的问题是用简单的解决方案（“Just Patch”）来解决的。但是，当打补丁不可行时，你如何进行风险评估，而不会因为团队缺乏经验或视角而暴露出隐藏的风险？
我们都知道，风险评估可能会变得复杂，因为技术、脆弱性和控制环境可能非常复杂，以至于人们可能永远不会相信自己有能力正确或完全地进行风险评估。所以，当你必须开始“；边走边编”；为了满足您的独特和情境需求，您需要专家建议和精心选择的控制层（识别、保护、检测、响应、恢复），以防止在复杂环境中临时控制的意外后果。这也是漏洞管理的一部分。
docker工人/集装箱
因此，Docker或任何其他容器化环境都不会改变基本原理。容器可以暴露在外部，也可以不暴露在内部，也可以仅限于本地主机。就像任何其他服务一样。您仍然需要评估控制环境。当您这样做时，请考虑该机器、容器或服务的未来使用情况。如果您更改用于允许漏洞保持未修补状态的用例或控制环境，那么您允许存在的任何漏洞都将被视为您必须解决的债务。
快速答案
修补是最简单、最直接和推荐的默认操作。您应该有一个策略/标准来进行修补，除非有令人信服的理由不进行修补，并且您应该参与考虑当前和未来控制环境的补偿过程（识别、保护、检测、响应、恢复）。
规则#1：当有疑问时：打补丁。
规则#2：当打补丁给目标带来重大风险时：确保你知道自己在做什么。
规则#3：如果你不确定自己知道自己在做什么：请参阅规则#1。