M a t h e m a t i c a
B a l k a n i c a
—————————
NewSeries Vol. 21, 2007,Fasc. 3-4
Termination of Workflows
A snapshot-based approach
Gl´oria Cravo, Jorge Cardoso
Presented at the MASSEE International Congress on Mathematics
MICOM - 2006, Cyprus
A workflow is a set of activities usually organized using a graph structure that has
onebeginningandoneend. Aworkflowincludeshumanparticipantsandsoftwareapplications
that have the responsibility to carry out activities. A workflow is known to be the formal
definitionoftheprocessusedtomanagebusinessprocesses(e.g.,salesorderprocessing,article
reviewing, member registration, etc). In this paper we describe and analyze the behavior of
workflowsusinggraphtheorytoverifyanimportantproperty: theirtermination. Itisessential
toformallyverifyifaworkflow,suchasasalesorderprocessing,willeventuallyterminateand
be completed. We verify the termination of workflows using a new approach based on what
we call snapshot-based theory.
1. Introduction
In this paper we describe and analyze the behavior of workflows using
graph theory. A workflow is an abstraction of a business process that consists of
one or more activities that need to be executed to complete a business process
(forexample,salesorderprocessing,articlereviewing,memberregistration,etc).
Activities are represented with vertices and the partial ordering of activities is
modeled with arcs, known as transitions. Each task of a workflow represents
a unit of work to be executed by a computer program or a person. Workflows
allow organizations to streamline and automate business processes, reengineer
their structure, as well as, increase efficiency and reduce costs.
In the last decade, important advancements have been accomplished in
the development of theoretical foundations to allow workflow modeling, veri-
fication, and analysis. Several formal modeling methods have been proposed
234 G. Cravo, J. Cardoso
to model workflows, such as graph theory [8], State and Activity Charts [9],
Event-Condition-Action rules [4,5], Petri Nets [1], Temporal Logic [2], Markov
chains [7] and Process and Event Algebras [6,10].
Despite the existence of several formal methods to model workflows, a
vastnumberofwidelywell-knowncommercialworkflowsystems,suchasTIBCO
Workflow (www.tibco.com) and METEOR-S [8], have decided to use graphs to
model their workflows.
While important advancements have been accomplished in the develop-
mentoftheoreticalfoundationsforworkflowmodeling, verification, andanalysis
(especiallyinthecontextofPetriNets[1])moreresearchisrequiredwithrespect
to the modeling and analysis of workflows using graphs.
In this paper, our aim is to present a formal framework, based on graphs
theory, to check the termination of workflows. Termination is an important
property for workflows because it is indispensable to know if a business process,
such as a loan application or insurance claim, will eventually be completed. In
our approach we model workflows with tri-logic acyclic directed graphs and de-
velop a formalism to verify the logical termination of workflows. Our formalism
uses a snapshot-based methodology which captures the different behaviors that
a workflow may have.
2. Logical Termination
Definition 2.1. A workflow is a tri-logic acyclic directed graph
WG = (T,A), where T = {t ,t ,...,t } is a finite nonempty set of vertices
1 2 n
representing workflow tasks. Each task t (i.e., a vertex) has an input logic
i
operator (represented by ≻ t ) and an output logic operator (represented by
i
t ≺). An input/output logic operator can be the logical AND (•), the OR
i
(⊗), or the XOR - exclusive-or - (⊕). The set A = {a ,a ,a ,a ,...,a } is a
⊔ ⊓ 1 2 m
finite nonempty set of arcs representing workflow transitions. Each transition
a ,i ∈ {1,...,m}, is a tuple (t ,t ) where t , t ∈ T. The transition a is a
i k l k l ⊔
tuple of the form (⊔,t ) and transition a is a tuple of the form (t ,⊓). The
1 ⊓ n
symbols ⊔ and ⊓ represent abstract tasks which indicate the entry and ending
point of the workflow, respectively. We use the symbol ′ to reference the label of
a transition, i.e., a′ references transition a , a ∈ A. The elements a′ are called
i i i i
Boolean terms and form the set A′.
An example of a workflow is presented in Figure 1. For more details and
practical examples see [3].
Definition 2.2. The incoming transitions for task t ∈ T are the tuples
i
of the form a = (x,t ),x ∈ T,a ∈ A, and the outgoing transitions for task t
j i j i
Termination of Workflows 235
Figure 1: Example of a tri-logic acyclic directed graph (i.e., a workflow)
are the tuples of the form a = (t ,y),y ∈ T,a ∈ A.
l i l
Definition 2.3. The incoming condition for task t ∈ T is a Boolean
i
expression with terms a′ ∈ A′, where a is an incoming transition of task t . The
i
terms a′ are connected with the logical operator ≻ t . If the task has only one
i
incoming transition then the condition does not have a logical operator.
Definition 2.4. The outgoing condition for task t ∈ T is a Boolean
i
expression with terms a′ ∈ A′, where a is an outgoing transition of task t . The
i
terms a′ are connected with the logical operator t ≺. If the task has only one
i
outgoing transition then the condition does not have a logical operator.
Definition 2.5. Given a workflow WG = (T,A), an Event-Action
(EA) model for a task t ∈ T is an implication of the form t : f f , where
i i E C
f and f are the incoming and outgoing conditions of task t , respectively. For
E C i
any EA model t : f f , f and f have always the same Boolean value.
i E C E C
Example 1. Examples of the above definitions can be found in [3].
Definition 2.6. Let WG be a workflow. The behavior of WG is
described by its EA models, according to the following rules:
(1) The workflow starts its execution by asserting a′ to be true.
⊔
(2) Let t : a′ f . Then f has the Boolean value of a′ , i.e., since
1 ⊔ C1 C1 ⊔
the workflow starts its execution, f is always true.
C1
(3) For any t : f f ,i ∈ {2,...,n},f and f have always the
i Ei Ci Ei Ci
same Boolean value.
236 G. Cravo, J. Cardoso
(4) The workflow correctly terminates when a′ is asserted to be true.
⊓
SincethebehaviorofaworkflowisdeterminedbyitsEAmodelsanatural
concern is the exhaustive study of the EA models. We start by defining three
different types of EA models.
Definition 2.7. An EA model f f is said to be simple if f =
E C E
a′ and f = a′, i,j ∈ {⊔,⊓,1,...,m}, with i 6= j.
i C j
Definition 2.8. An EA model f f is said to be complex if f =
E C E
a′ and f = a′ ϕa′ ϕ...ϕa′ , or f = a′ ϕa′ ϕ...ϕa′ and f = a′, where
i C j1 j2 jk E j1 j2 jk C i
ϕ ∈ {•,⊗,⊕}.
Definition 2.9. An EA model f f is said to be hybrid if f =
E C E
a′ ϕa′ ϕ ...ϕa′ and f = a′ ψa′ ψ...ψa′ , where ϕ,ψ ∈ {•,⊗,⊕}.
i1 i2 il C j1 j2 jk
The study of simple EA models is very easy. Our concern is to study
complexandhybridEAmodels. Inthefollowingresultweestablishaconnection
between hybrid and complex EA models.
Theorem 2.1. A hybrid EA model f f can be split into two
E C
derived equivalent complex EA models f a∗ and a∗ f .
E i i C
Proof. Suppose that t : f f is a hybrid EA model (Figure 2.a).
i E C
Then both f and f are Boolean terms with an AND (•), an OR (⊗), or a
E C
XOR (⊕). Let us create two auxiliary tasks t′, t′′ and an auxiliary transition
i i
a⊤ = (t′,t′′).Leta∗ betheBooleantermassociatedwiththeauxiliarytransition
i i i i
a⊤, such that a∗ has the same Boolean value of f . Let t′ : f a∗ and t′′ :
i i E i E i i
a∗ f be new EA models. Since a∗ has the same Boolean value of f and, as
i C i E
a consequence, f has its Boolean value depending on the Boolean value of a∗,
C i
when we consider these new EA models instead of the initial hybrid EA model,
the behavior of the workflow is not modified (Figure 2.b). Clearly the new EA
models f a∗ and a∗ f are complex and so the result is satisfied.
E i i C
Definition 2.10. Ahybrid workflow isa workflow that contains hybrid
EA models. A workflow is said to be non-hybrid if it contains only simple and
complex EA models, i.e., no hybrid EA models exist.
Example 2. The workflow from Figure 1 is non-hybrid.
Definition 2.11. A hybrid workflow WG is said to be equivalent to
a non-hybrid workflow WG′ if WG′ is obtained from WG by decomposing all
hybrid EA models of WG into equivalent derived complex EA models.
Theorem 2.2. A hybrid workflow can be transformed into an equivalent
non-hybrid workflow.
Termination of Workflows 237
Figure 2: Splitting a hybrid EA model into two equivalent complex EA models
Table 1: EA Models structures
EA model structure EA model name EA model type
t : a′ •a′ •···•a′ a′ AND-join Complex
u i1 i2 ik l
t : a′ a′ •a′ •···•a′ AND-split Complex
u i j1 j2 jl
t : a′ ⊕a′ ⊕···⊕a′ a′ XOR-join Complex
u i1 i2 ik l
t : a′ a′ ⊕a′ ⊕···⊕a′ XOR-split Complex
u i j1 j2 jl
t : a′ ⊗a′ ⊗···⊗a′ a′ OR-join Complex
u i1 i2 ik l
t : a′ a′ ⊗a′ ⊗···⊗a′ OR-split Complex
u i j1 j2 jl
t : a′ a′ Sequence Simple
u i l
Proof. Follows immediately from Theorem 2.1. and Definition 2.11.
Since a hybrid workflow can be transformed into a non-hybrid workflow,
in this paper we only need to study non-hybrid workflows. When no ambiguity
can arise we will refer to non-hybrid workflows simply as workflows. As we will
consider only non-hybrid workflows, the behavior of a workflow will depend on
its complex and simple EA models.
A non-hybrid workflow can contain seven different EA model structures:
AND-join, AND-split, XOR-join, XOR-split, OR-join, OR-split and Sequence.
Table 1 illustrates the structure of these seven different EA models.
TheseEAmodelscanbeclassifiedasdeterministicandnon-deterministic.
The AND-join, AND-split, XOR-join, OR-join and Sequence models are deter-
ministic, while XOR-split and OR-split are non-deterministic.
For any deterministic model t : f f knowing that the Boolean
u E C
value of the incoming condition f is true allows us to infer that all its outgoing
E
transitions will be set to be true. Consequently, in these cases we know which
238 G. Cravo, J. Cardoso
task(s) will be executed after t (i.e., connected to t ).
u u
For any non-deterministic model t : f f knowing that the
u E C
Boolean value of the only incoming transition of f is true does not allow us to
E
infer which outgoing transition(s) will be set to be true. Nevertheless, we know
that if f is true then f is also true. Let us analyze each case individually.
E C
(1) XOR-split. In this case, if f is true, we just know that only one of
E
the outgoing transitions a′ , r ∈ {1,...,l}, is true.
jr
(2) OR-split. In this case, if f is true, we only know that a nonempty
E
subset of the outgoing transitions a′ , r ∈ {1,...,l}, are true.
jr
In these two cases, knowing that f is true does not allow us to infer
E
which task(s) will be executed after t (i.e., connected to t ). Therefore, we call
u u
these models non-deterministic.
Definition 2.12. A non-deterministic task is a task associated with a
XOR-split or OR-split model (see Table 1).
Definition 2.13. AlltransitionshaveaBooleanlabela′ thatreferences
i
the transitions a (definition 2.1). Additionally, each outgoing transition of a
i
task associated with a XOR-split or OR-split models has a snapshot Boolean
variable denoted by~a , which is related to the non-determinism of the task.
i
Definition 2.14. The non-deterministic task behavior (tND(t )) of a
i
non-deterministic task t is the set of all snapshot Boolean variables associated
i
with its outgoing transitions, i.e., tND(t ) = {{~a , ~a , ..., ~a }|t : f
i j1 j2 jl i E
f ,f = a and f = a ϕa ϕ...ϕa , ϕ ∈ {⊗,⊕}}.
C E i C j1 j2 jl
Definition 2.15. The non-deterministic workflow behavior of a work-
flowWGisthesetofallnon-deterministictaskbehaviorsoftheworkflow,which
is denoted by wND(WG), i.e., wND(WG) = {tND(t ), tND(t ), ..., tND(t )},
i1 i2 ik
where t ,t ,...,t ∈ T, are the non-deterministic tasks.
i1 i2 ik
·
Definition 2.16. Let t be a non-deterministic task. Let P ∪N be
i
a partition of tND(t ) such that P = {~a ∈ tND(t )| ~a is a snapshot Boolean
i i