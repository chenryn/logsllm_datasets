logic include Field Programmable Gate Arrays (FPGAs),
Programmable Array Logics (PALs), and Application Spe-
ciﬁc Integrated Circuits (ASICs). ASIC synthesis tools, as
opposed to FPGA synthesis tools, are used in this work due
to the increased ﬂexibility and options allowed in their syn-
thesis tools, and because FPGA synthesis tools map circuits
into Look-up Tables (LUTs) and ﬂip-ﬂop (FF) gates in ac-
cordance with FPGA architectures, and not Boolean gates,
which makes them unsuitable for this work. We used two
main ASIC synthesis tools interchangeably: Synopsys Design
Compiler (DC) [Syn10] which is one of the most popular
commercial logic synthesis tools, and the open-source aca-
demic Yosys-ABC toolchain [Wol, Ber]. In the following, we
focus on brieﬂy describing the synthesis ﬂow of Synopsys DC.
Synthesis Flow. A Hardware Description Language (HDL)
description of the desired circuit is provided to Synopsys DC.
Operations in this description get mapped to the most ap-
propriate circuit components selected by Synopsys DC from
two types of libraries: the generic technology (GTECH)
library of basic logic gates and ﬂip-ﬂops called cells, and syn-
thetic libraries consisting of optimized circuit descriptions for
more complex operations. Designware [Syn15] is a built-in
synthetic library provided by Synopsys, consisting of tested
IP constructions of standard and complex cells frequently
used, such as arithmetic or signal processing operations. This
ﬁrst mapping step is independent of the actual circuit man-
ufacturing technology and results in a generic structural
representation of the circuit. This gets mapped next to low-
level gates selected from a target technology library to obtain
a technology-speciﬁc representation: a list of Boolean and
technology-speciﬁc gates (e.g., multiplexers), called netlist.
Synopsys DC performs all of the above mapping and syn-
thesis processes under synthesis and optimization constraints,
which are directives and options provided by the developer
to optimize the delay, area and other performance metrics of
a synthesized circuit.
Input to these hardware synthesis tools can be a pure
combinational circuit, which maps only to Boolean gates, or
a sequential circuit that requires a clock signal and FF gates
which are memory elements to store the current state of the
circuit. The output of a sequential circuit is a function of
both the circuit inputs and the current state. In this work,
we constrain circuit description to combinational circuits.
High-Level Synthesis. Logic synthesis tools accept the
input function description most commonly in a HDL for-
mat (Verilog or VHDL), whereas more recent logic synthesis
tools support high-level synthesis (HLS). This allows them
to accept higher-level circuit descriptions in C/C++ or sim-
ilar high-level programming alternatives. The HLS tools
then transform the functional high-level input code into
an equivalent hardware circuit description, which in turn
can be synthesized by classic logic synthesis. Although this
higher abstraction is more developer-friendly and usable,
performance of resulting circuits is often inferior to HDL
descriptions, unless heavy design constraints are provided to
guide the mapping and optimization process.
2.3 The IEEE 754 Floating-Point Standard
Floating-point (FP) numbers allow to represent approxi-
mations of real numbers with a trade-oﬀ between precision
and range. The IEEE 754 ﬂoating-point standard [FP008]
deﬁnes arithmetic formats for ﬁnite numbers including signed
zeros and subnormal numbers, inﬁnities, and special “Not
a Number” values (NaN) and rounding rules to be satisﬁed
when rounding numbers during ﬂoating-point operations,
e.g., rounding to nearest even. Additionally, the standard
deﬁnes exception handling such as division by zero, overﬂow,
underﬂow, inﬁnity, invalid and inexact.
The IEEE 754 Standard 32-bit single precision ﬂoating-
point format consists of 23 bits for signiﬁcand, 1 bit for sign
and 8 bits for exponent distributed from MSB to LSB as
follows: sign [31], exponent [30:23], and signiﬁcand [22:0].
The 64-bit double precision format consists of 52 bits for
signiﬁcand, one bit for sign, and 11 bits for exponent.
3. OUR TOOLCHAIN
We describe our toolchain here by presenting our architec-
ture followed by a detailed description of each component.
3.1 Architecture
An overview of our architecture is shown in Fig. 1. We
provided the hardware synthesis tools with optimization
and synthesis constraints along with a set of customized
technology and synthesis libraries (cf. §3.2), to map the
input circuit description in Verilog (or any other HDL) into
a functionally-equivalent Boolean circuit netlist in Verilog.
The output netlist, in the meantime, is constrained to consist
of AND, XOR, INV and MUX gates.
Functionality in HDL
Libraries
Constraints
Hardware Synthesis
Synthetic
Synopsys
Design-
ware
Customized
Technology
Circuit
Building
Blocks
InputB
Netlist
Scheduler
Parsed &
Scheduled Netlist
ABY Framework
Secure
Computation
Protocol
Outputs
InputA
Figure 1: Architecture Overview
The Verilog netlist is then parsed and scheduled, and
provided as input to the ABY framework [DSZ15], which we
extended to process this netlist and generate the Boolean
circuit described in it. The evaluation of the GMW protocol
in ABY minimizes the number of communication rounds, i.e.,
all AND gates on the same layer are evaluated in parallel.
In the following we describe in further detail the main com-
ponents of our toolchain architecture: logic synthesis (§3.2),
scheduling (§3.3), and extending the ABY framework (§3.4).
15073.2 Hardware and Logic Synthesis
The GMW protocol and Yao’s protocol require that the
function to be computed is represented as a Boolean circuit.
As described in detail in §1.2, previous work, such as the
Fairplay framework [MNPS04, BNP08], used domain-speciﬁc
high-level languages that allow a developer to describe the
function to be computed, which in turn gets compiled into a
Boolean circuit. Other compilers allow compilation of circuit
descriptions written in C into size-optimized Boolean circuits,
e.g., [HFKV12], whereas further tools allow a developer to
build up the circuit by instantiating its building blocks from
within custom libraries composed of these building blocks,
e.g., [HEKM11, Mal11]. All these works rely on custom-made
compilers and/or languages which have to compile from a
high-level description of the functionality and map it to a
Boolean circuit. This may be considered as “reinventing the
wheel” since Boolean mapping and optimization is the core
of hardware synthesis tools, and has been researched for long.
It has been argued, however, that such “hardware compilers”
target primarily hardware platforms and therefore involve
technology constraints and metrics which are not directly
related to the purpose of generating Boolean circuits for
secure computation. Writing circuits in HDL, such as Verilog
or VHDL, is not entirely high-level, and involves hardware
description paradigms which may not be similar to high-level
programming paradigms. Furthermore, they rely on the use
of sequential logic rather than pure combinational logic.
Exploiting Logic Synthesis. However, the TinyGarble
framework [SHS+15] exploited these very same points, and
employed hardware synthesis tools in generating compact
sequential Boolean circuits for secure evaluation by Yao’s gar-
bled circuits protocol [Yao86]. The work in our paper extends
this further by using the hardware synthesis tools to generate
combinational circuits of more complex functionalities for
evaluation by both Yao and the GMW protocol [GMW87],
while excluding all design and technology optimization met-
rics. The synthesis and generation of the Boolean netlist by
the synthesis tools (cf. §2.2) can be optimized according to
the synthesis constraints and optimization options provided.
Hardware synthesis tools conventionally target circuit synthe-
sis on hardware platforms, but can be adapted and exploited
for secure computation purposes to generate Boolean netlists
which are AND-minimized (depth-optimized primarily for
GMW or size-optimized for Yao’s garbled circuits).
3.2.1 Customizing Synthesis
In the following, we focus on how we customized the syn-
thesis ﬂow of Synopsys DC to generate our Boolean netlists.
Synthesis Flow. The synthesis and optimization con-
straints that can be provided to Synopsys DC allow us to
manipulate it to serve our purposes in this work, and generate
depth-optimized circuit netlists for evaluation with GMW.
Moreover, we developed a synthetic library of optimized
basic cells and depth/size-optimized circuit building blocks
that can be assembled by developers to build more complex
circuits, and a customized technology library to constrain
circuit mapping to XOR and AND gates only. The diﬀerent
libraries and our engineered customizations to achieve this
are described next.
Synthetic Libraries. The ﬁrst step of the synthesis ﬂow is
to convert arithmetic and conditional operations (if-else,
switch-case) to their functionally-equivalent logical repre-
sentations. By default, they are mapped to cells (either
simple gates or more complex circuits such as adders and
comparators) extracted from the GTECH library and the
built-in Synopsys DC DesignWare library [Syn15] (cf. §2.2).
A single cell can have diﬀerent implementations from which
the synthesis tool selects, depending on the provided con-
straints. For example, the sum of two (cid:96)-bit numbers can be
replaced with 1 out of 10 diﬀerent adder implementations
available in both libraries, depending on the optimization
constraints provided (optimizing for area or delay).
Our Optimized Circuit Building Blocks Library. Be-
sides the standard built-in libraries, we developed our own
DesignWare circuits in a customized synthetic library. It
consists of depth-optimized circuit descriptions (arithmetic,
comparators, 2-to-1 multiplexer, etc.) customized for GMW,
as well as size-optimized counterparts for Yao’s garbled cir-
cuits. Synopsys DC can then be instructed to prefer auto-
mated mapping to our customized circuit descriptions (cf. §4)
rather than built-in circuits (cf. §3.2.3 for developer usage).
Technology Library. The intermediate generic representa-
tion of the circuit obtained in the step before is then mapped
into low-level gates extracted from a technology library. A
technology library is a library that speciﬁes the gates and
cells that can be manufactured by the semiconductor ven-
dor onto the target platform. The library consists of the
functional description (such as the Boolean function they
represent) of each cell, as well as their performance and tech-
nology attributes such as timing parameters (intrinsic rise
and fall times, capacitance values, etc.) and area parameters.
Technology libraries targeting ASICs contain a range of
cells ranging from simple 2-input gates to more complex gates
such as multiplexers and ﬂip-ﬂops. A single cell can also
have diﬀerent implementations which have varying technology
attributes. Ultimately, the goal of the synthesis tool is to
map the generic circuit description into a generated netlist
of cells from this target technology such that user-provided
constraints and optimization goals are satisﬁed.
Our Customized Technology Library. In order to meet
our requirements of the Boolean circuit netlists required in
this work, we constrain Boolean mapping to non-free AND
and free XOR gates. However, Synopsys DC requires that
synthesis runs with at least OR, AND and inverter (INV) gates
deﬁned in the technology library. We developed a customized
technology library which has no manufacturing or technology
rules deﬁned, similar to the approach in TinyGarble, and we
manipulated the cost functions of the gates by setting the
area and delay parameters of XOR gates to 0, and set them
to very high non-zero values for OR gates to ensure their
exclusion in mapping. Their very high area and delay costs
force Synopsys DC to re-map all instances of OR gates to
AND and INV gates according to their equivalent Boolean rep-
resentation (A∨B=¬(¬A∧¬B)), and to optimize the Boolean
mapping in order to meet the speciﬁed area/delay constraints.
We set the area and delay costs of an inverter (INV) gate
to zero, as they can be replaced with XOR gates with one
input buﬀered to constant one. For AND gates, the area
and delay costs are set to reasonably high values, but not
too high so that they are not excluded from synthesis. We
set MUX gates to area cost equivalent to that of a single
AND gate (since the 2-to-1 multiplexer construction in [KS08]
is composed of a single AND gate and 2 XOR gates). And
we set its delay cost equivalent to 0.25 times more than that
1508of an AND gate to ensure preferred but also non-redundant
mapping to MUX gates whenever feasible. We concluded
that these settings give the most desirable mapping results
after experimenting with Synopsys DC mapping behavior in
diﬀerent scenarios.
Synthesis Constraints. We provide constraints that make
delay optimization of the circuit a primary objective followed
by area optimization as a secondary objective when generat-
ing depth-optimized circuits for GMW. We set the preference
attribute to XOR gates, and disable circuit ﬂattening to avoid
remapping of XOR gates to other gates. Synthesis tools are
not primarily designed to minimize Boolean logic by maxi-
mizing XOR gates and reducing the multiplicative complexity
of circuits within multi-level logic minimization. This is be-
cause XOR gates are only considered as “free” gates in secure
computation applications, whereas in the domain of tradi-
tional hardware CMOS design, NAND gates are the universal
logic gates from which all other gates can be constructed.
Hence, the tools need to be heavily manipulated to achieve
our objectives. These constraints and technology library
settings also have to be customized diﬀerently when we want
to generate circuits optimized for other secure computation
protocols, such as Yao’s garbled circuits.
Construction of More Complex Circuits. The cus-
tomized circuit descriptions we developed can be used to
build higher-level and more complex applications. We as-
sembled complex constructions such as Private Set Inter-
section (PSI) primitives (bitwise-AND, pairwise comparison,
and Sort-Compare-Shuﬄe networks as described in [HEK12])
using our customized building blocks, and they have demon-
strated equivalent AND gate count and depth as their hand-
optimized counterparts in [HEK12]. In general, all sorts
of more complex functionalities and primitives can be con-
structed by assembling these circuit building blocks along
with built-in Designware IP implementations. Consequently,
these more complex circuits can then be appended to our li-
brary to be re-used in building further more complex circuits,
and so on, in a modular and hierarchical way.
HDLs also allow a developer to describe circuits recur-
sively which can be synthesized, which is often the most
eﬃcient paradigm for describing depth-optimized circuit con-
structions such as the depth-optimized “greater than” opera-
tion [GSV07], the Waksman permutation network [Wak68],
or the Boyar-Peralta counter [BP06].
3.2.2 High-level Function and Operator Mapping
An alternative to describing the circuits for HLS in high-
level C/C++ is to allow developers to input their circuit
descriptions in high-level Verilog, by calling operators and
functions, which we map to “instantiate” circuit modules
such as depth-optimized adders or comparators from our
customized synthetic library. This allows high-level circuit
descriptions without incurring the drawbacks of using HLS
tools, such as inferior hardware implementation (cf. §2.2).
Mapping operators. We prepared a library description
which links our customized circuits into the Synopsys DC.
This provides a description of each circuit module, its diﬀer-
ent implementations, and the operator bound to each module.
These operators can be newly created, or already built-in,
such as (‘+’, ‘-’, ‘*’, etc.), but bound to our customized
circuits. For instance, when synthesizing the statement
Z = X + Y, Synopsys DC is automated to map the ‘+’ to
our customized Ladner-Fischer adder, rather than a built-in
adder implementation.
Mapping Functions. We mapped functions to instantiate
circuit modules by creating a global Verilog package ﬁle
which declares these functions and which circuit modules
they instantiate when being called. This package ﬁle is then
included in the high-level Verilog description code which calls
on these functions.
Explicit Instantiation. Other more complex circuits can
only be explicitly called from our customized building blocks
library, as well as from the Designware IP library which
oﬀers a wide range of IP implementations, all of which have
veriﬁed and guaranteed correctness, such as the ﬂoating-
point operations we present and benchmark in §5.3. A list
of available Designware IP implementations can be found
in [Syn15].
High-level Circuit Description Example. In Fig. 2, we
show how the depth-optimized constructions of the Manhat-
tan, Euclidean and Hamming distances [SZ13] are described
using high-level Verilog. The Manhattan distance between
two points is the distance in a 2-dimensional space between
these two points based only on horizontal and vertical paths.
The Euclidean distance between two points computes the
length of the line segment connecting them. Hamming dis-
tance between two strings computes the number of positions
at which the strings are diﬀerent.
In the Euclidean distance description, in lines 19 and 20
the ‘-’ operator is mapped automatically to our Ladner-
Fischer subtractor. The function sqr called in lines 23 and 24,
is automatically mapped to instantiate our Ladner-Fischer
squarer. We declared and bound this function correctly in
the package ﬁle ‘func_global.v’ which is included in line 6.
case statements (as are if...else statements) in lines 26-
34 are also mapped to our depth-optimized multiplexer. In
line 38, a carry-save network is explicitly instantiated from
our library described in §4.2, since some circuit blocks are
not mapped to functions and operators and have to be ex-
plicitly instantiated due to their structure and design. In
the Manhattan distance description, the absolute diﬀerences
are computed by calling the ‘abs_diff’ function in line 12
which is also mapped to instantiate the corresponding circuit.
The same high-level abstraction can be seen in the Hamming
distance description. Once these distance circuits are con-
structed, they can be appended to our blocks library to be
easily re-used in more complex functionalities.
3.2.3 Developer Usage
By default, Synopsys DC maps operations to Designware
circuit descriptions. For operations that have multiple circuit
descriptions which are optimized for diﬀerent parameters,
e.g., area or delay, Synopsys DC selects the most appropri-
ate circuit description which best satisﬁes the constraints
provided by the developer in the synthesis script. Alterna-
tively, the developer can explicitly select a speciﬁc circuit
description to map an operation to. For example, the built-in
Designware adder circuit is available in diﬀerent implemen-
tations: ripple-carry, carry-look-ahead and other area- and
delay-optimized implementations. Synopsys DC selects the
most suitable implementation to map ‘+’ to, depending on