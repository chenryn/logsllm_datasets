检查IA32_MISC_ENABLE MSR寄存器的位
11（BTS_UNAVAILABLE），如果该位为0，表示该处理器支持
BTS功能，如果该位为1，则不支持。
检查IA32_MISC_ENABLE MSR寄存器的位
12（PEBS_UNAVAILABLE），如果该位为0，则表示该处理器支
持PEBS功能，如果该位为1，则不支持。
第二步，根据前面的要求分配和建立DS区。
第三步，将DS区的基地址写到IA32_DS_AREA MSR寄存器。这个
寄存器的地址可以在IA手册卷3B的附录中查到，目前CPU对其分配的地
址都是0x600。
第四步，如果计划使用硬件中断来定期处理BTS记录，那么设置
APIC局部向量表（LVT）的性能计数器表项，使其按固定时间间隔产
生中断（fixed delivery and edge sensitive），并在IDT中建立表项并注册
用于处理中断的中断处理例程。在中断处理例程中，应该读取已经记录
的分支信息和PEBS信息，将这些信息转存到文件或其他位置，然后将
缓冲区索引字段复位。
第五步，设置调试控制寄存器，启用BTS。
5.3.3 调试控制寄存器
在支持分支监视和记录机制的处理器中，都有一个用来控制增强调
试功能的MSR，称为调试控制寄存器（Debug Control Register）。对于
不同的处理器，这个寄存器的名称和格式有所不同，主要有以下4种。
P6系列处理器中的DebugCtl MSR，我们在5.2节对其格式做过详细
的介绍。
奔腾4系列处理器中的DebugCtlA MSR，其格式如图5-4所示。
奔腾M系列处理器中的DebugCtlB MSR，其格式如图5-5所示。
Core系列和Core 2系列处理器中的IA32_DEBUGCTL MSR，其格式
如图5-6所示。从名称上来看，这个名称已经带有IA-32字样——称
为架构中的标准寄存器，以后的IA-32系列处理器应该会保持这个
名称。
奔腾4的DebugCtlA MSR如图5-4所示。
图5-4 DebugCtlA MSR（奔腾4处理器）
图5-5 DebugCtlB MSR（奔腾M处理器）
图5-6 IA32_DEBUGCTL MSR（Core、Core 2及更新的IA-32处理器）
其中LBR、BTF的含义与P6中的一样。概括来说，TR位用来启用分
支机制；BTS位用来控制分支信息的输出方式，如果BTS位为1，则将分
支信息写到DS区的BTS缓冲区中，如果为0，则向前端总线发送分支跟
踪消息（BTM），供总线分析仪等设备接收。
BTI（Branch Trace INTerrupt）如果被置为1，那么当BTS缓冲区已
满时，会产生中断；如果为0，CPU会把BTS缓冲区当作一个环形缓冲
区，写到缓冲区的末尾后，CPU会自动回转到缓冲器的头部。
BOO（BTS_OFF_OS）和BOU（BTS_OFF_USER）用来启用BTS
的过滤机制，如果BOO为1，则不再将CPL为0的BTM记录到BTS缓冲区
中，也就是不再记录内核态的分支信息；如果BOU为1，则不再将CPL
不为0的BTM记录到BTS缓冲区中，也就是不再记录用户态的分支信
息。
尽管名称和格式有所不同，对于目前的CPU，以上4种MSR的地址
都是0x1D9。
启用DS机制，需要编写专门的驱动程序来建立和维护DS存储区，
我们将在下一节给出一个示例。
5.4 DS示例：CpuWhere
上一节介绍了IA处理器的调试存储（DS）功能。为了演示其用
法，帮助读者加深理解，我们将编写一个示例性的应用，这个应用的名
字为CpuWhere，其含义是使用这个应用，用户可以看到CPU曾经运行
过哪些地方（where has CPU run）。
5.4.1 驱动程序
因为访问MSR和分配BTS缓冲区都需要在内核态进行，所以要使用
DS机制，需要编写一个驱动程序，我们将其命名为CpuWhere.sys。
首先，我们需要定义两个数据结构：DebugStore和BtsRecord。
DebugStore结构用来描述DS存储区的管理信息区，代码如下：
typedef struct tagDebugStore
{
   DWORD   dwBtsBase;             // BTS缓冲区的基地址
   DWORD   dwBtsIndex;            // BTS缓冲区的索引，指向可用的BTS缓冲区
   DWORD   dwBtsAbsolute;         // BTS缓冲区的极限值
   DWORD   dwBtsIntThreshold;     // 报告BTS缓冲区已满的中断阈值
   DWORD   dwPebsBase;            // PEBS缓冲区的基地址
   DWORD   dwPebsIndex;           // PEBS缓冲区的索引，指向可用的BTS缓冲区
   DWORD   dwPebsAbsolute;        // PEBS缓冲区的极限值
   DWORD   dwPebsIntThreshold;    // 报告PEBS缓冲区已满的中断阈值
   DWORD   dwPebsCounterReset;    // 计数器的复位值
   DWORD   dwReserved;            // 保留
} DebugStore, *PDebugStore;
BtsRecord结构用来描述BTS缓冲区的每一条数据记录，代码如下：
typedef struct tagBtsRecord
{
   DWORD   dwFrom;      // 分支的发起地址
   DWORD   dwTo;        // 分支的目标地址
   DWORD   dwFlags;     // 标志
} BtsRecord, *PBtsRecord;
以上两个结构都是用于32位模式的，如果系统工作在64位（IA-
32e）模式下，那么需要将大多数字段从DWORD改为8字节的
DWORD64，或者使用DWORD_PTR这样的指针类型自动适应32位和64
位。
定义了以上结构后，便可以使用Windows操作系统的
ExAllocatePoolWithTag函数来在非分页内存区中建立DS区了。清单5-4
给出了主要的源代码。
清单5-4 建立DS区的源代码
1    #define  BTS_RECORD_LENGTH sizeof(BtsRecord)
2    
3    PDebugStore   g_pDebugStore=NULL;
4    PVOID         g_pBtsBuffer=NULL;
5    DWORD         g_dwMaxBtsRecords=0;
6    BOOLEAN       g_bIsPentium4=0xFF;
7    BOOLEAN       g_bIsTracing=0;
8    DWORD         g_dwOptions=0;
9      
10   NTSTATUS SetupDSArea(DWORD dwMaxBtsRecords)
11   {
12      if(g_pDebugStore==NULL)
13         g_pDebugStore=ExAllocatePoolWithTag(
14           NonPagedPool,sizeof(DebugStore),
15           CPUWHERE_TAG);
16    
17      memset(g_pDebugStore,0,sizeof(DebugStore));
18    
19      if(g_pBtsBuffer && g_dwMaxBtsRecords!=dwMaxBtsRecords)
20      {
21         ExFreePoolWithTag(g_pBtsBuffer,CPUWHERE_TAG);
22         g_pBtsBuffer=NULL;
23      }
24      g_pBtsBuffer=ExAllocatePoolWithTag(
25         NonPagedPool,dwMaxBtsRecords*BTS_RECORD_LENGTH,
26         CPUWHERE_TAG);
27      if(g_pBtsBuffer==NULL)
28      {
29         DBGOUT(("No resource for BTS buffer %d*%d", 
30            dwMaxBtsRecords, BTS_RECORD_LENGTH));
31         return STATUS_NO_MEMORY;
32      }
33    
34      g_dwMaxBtsRecords=dwMaxBtsRecords;
35      // zerolize the whole buffer
36      memset(g_pBtsBuffer,0, dwMaxBtsRecords*BTS_RECORD_LENGTH);
37   
38      g_pDebugStore->dwBtsBase=(ULONG)g_pBtsBuffer;
39      g_pDebugStore->dwBtsIndex=(ULONG)g_pBtsBuffer;
40      g_pDebugStore->dwBtsAbsolute=(ULONG)g_pBtsBuffer
41         +dwMaxBtsRecords*BTS_RECORD_LENGTH;
42      //在使用环形BTS缓冲区时，如果要阻止CPU产生
43      //中断，软件需要把BTS中断阈值设置得大于BTS
44      //的绝对最大值，只清除BTINT 
45      //标志是不够的
46      g_pDebugStore->dwBtsIntThreshold=(ULONG)g_pBtsBuffer
47         +(dwMaxBtsRecords+1)*BTS_RECORD_LENGTH;
48    
49      DBGOUT(("DS is setup at %x: base %x, index %x, max %x, int %x",
50      g_pDebugStore,g_pDebugStore->dwBtsBase,
51      g_pDebugStore->dwBtsIndex,
52      g_pDebugStore->dwBtsAbsolute,
53      g_pDebugStore->dwBtsIntThreshold))
54   
55      return STATUS_SUCCESS;   
56   }
第12～17行分配一个DebugStore结构，将其线性地址赋给全局变量
g_pDebugStore，并将整个结构用0填充。第19～34行分配用于保存分支
记录的BTS缓冲区，其大小是由参数dwMaxBtsRecords所决定的。第36
行将这个缓冲区初始化为0。第38～47行用来初始化DebugStore结构。
因为我们不打算使用中断方式来报告BTS缓冲区已满，所以将产生中断
的阈值（dwBtsIntThreshold字段）设得很大，比缓冲区的最大值还大一
些。
准备好DS区后，就可以通过设置MSR寄存器来启用DS机制了。清
单5-5给出了用于启用和禁止BTS机制的EnableBTS函数的源代码。
清单5-5 启用和禁止BTS的源代码
1    NTSTATUS EnableBTS(BOOLEAN bEnable,BOOLEAN bTempOnOff)
2    {
3       DWORD dwEDX,dwEAX;
4       
5       if(!bTempOnOff)
6       {
7          ReadMSR(IA32_MISC_ENABLE,&dwEDX,&dwEAX);
8          if(bEnable && ( (dwEAX & (1<<BIT_BTS_UNAVAILABLE))!=0 ) )
9          {
10            DBGOUT(("BTS is not supported %08x:%08x",dwEDX,dwEAX));
11            return -1;
12         }
13         if(bEnable) // 禁止时，保持寄存器原来的值
14         {
15            // 将DS内存地址写到MSR
16            dwEDX=0;
17            dwEAX=bEnable?(DWORD)g_pDebugStore:0;
18             
19            WriteMSR(IA32_DS_AREA, dwEDX,dwEAX);
20         }
21      }
22    
23      // 启用MSR中的标志
24      ReadMSR(IA32_DEBUGCTL, &dwEDX,&dwEAX);
25      DBGOUT(("Old IA32_DEBUGCTL=%08x:%08x", dwEDX,dwEAX));
26    
27      // 设置MSR_DEBUGCTLA寄存器中的TR和BTS标志
28      if(bEnable)
29      {
30         dwEAX|=(1 << (g_bIsPentium4?BIT_P4_BTS:BIT_BTS) );
31         dwEAX|=(1 << (g_bIsPentium4?BIT_P4_TR:BIT_TR) );
32         // Clear the BTINT flag in the MSR_DEBUGCTLA
33         dwEAX&=~(1<< (g_bIsPentium4?BIT_P4_BTINT:BIT_BTINT) );
34      }
35      else
36      {
37         dwEAX&=~(1<< (g_bIsPentium4?BIT_P4_BTS:BIT_BTS) );
38         dwEAX&=~(1<< (g_bIsPentium4?BIT_P4_TR:BIT_TR) );
39      }
40      WriteMSR(IA32_DEBUGCTL, dwEDX,dwEAX);
41    
42      // show new value after write
43      ReadMSR(IA32_DEBUGCTL, &dwEDX,&dwEAX);
44      DBGOUT(("Current IA32_DEBUGCTL=%08x:%08x", dwEDX,dwEAX));
45    
46      return STATUS_SUCCESS;   