discussed. When appropriate, several approaches are examined and then we indicate the
chosen one. One should note that a good knowledge of several W3C recommendations,
such as XML [24], OWL [25], and XPath [26], is necessary to better understand the
concepts discussed.
3.1 The structures of XML and OWL
In order to fully understand the transformation process of instances between XML
and OWL schema we have to understand the differences of these two data models.
XML’s data model [24] describes a node labeled tree (independently of using XML
Schema or DTD to define the model), while OWL’s data model is based upon the
subject-predicate-object triples from RDF [27]. RDF schema defines a vocabulary for
creating class hierarchies, attaching properties to classes and adding instance data.
Since the main characteristic of XML Schema and DTDs is to define a tree structure
for the data, the transformation of instances from one data model to the other consists to
simply map the XML tree structure to a class hierarchy. It should be noticed that
transforming XML to OWL is a simpler task than the inverse mapping, in other words,
mapping OWL to XML. This is because the elements and the expressiveness of XML
are a subset of the elements and the expressiveness of OWL. Therefore, when creating
mappings between elements of an XML schema and an OWL schema, we need to
consider, in the one hand, the tree structure of XML, and, in the other hand, the class
structure of an OWL ontology.
An XML DTD only provides basic cardinality constraints such as the Kleene
operators ? (0 or 1), * (0+), and + (1+). A DTD also allows defining enumerations.
Besides these basic cardinality constraints, the XML Schema also allows the
specification of data types. Since OWL allows specifying cardinality constraints,
enumeration, data types (OWL uses the same data types as XML Schema), it becomes
straightforward to map cardinality constraints and enumeration from a DTD/XML
Schema to OWL. It should be noticed that since the XML Schema and OWL use the
same data types, when establishing mappings there is not need to perform any
conversion or transformation. OWL only needs to reference the data types that were
referenced by the XML Schema.
The nodes of the tree structure can be easily identified and referenced using an
XPath expression. Since all the nodes have the same syntactic representation, no more
considerations need to be drawn with respect to XML. Dealing with OWL is more
involved, since depending on the semantics of an XML node it can be mapped to
different OWL elements. Having a particular XML node, we need to consider three
possible mapping scenarios to OWL:
• Map a XML node to an OWL concept;
• Map a XML node to an OWL datatype property
• Relate a XML node to an OWL object property
7
XML element OWL element
Node Class
Node Datatype Property
Node Object Property
Table 1. Elements that need to be considered when mapping XML to OWL
The data model mapping decisions that need to be taken into account when
transforming XML to OWL are illustrated in Table 1. This table shows that the
mappings are established between XML elements (i.e., nodes) and OWL elements. The
challenge is to formally specify under which conditions a XML node need to be mapped
to an OWL class, datatype or object property. Our solution uses XPath expressions to
distinguish XML nodes with the same name but with different ancestors and permits to
map them to their corresponding OWL elements. Our approach references XML nodes
with XPath expressions while OWL classes are referenced with their URIs. The pair
(OWL class URI, XPath expression) identifies a mapping and means that an instance of
the OWL class identified by the URI reference is created for each XML node matching
the specified XPath expression. The following subsections discuss how the issue of
establishing mappings between XML nodes and OWL elements has been addressed.
3.2 Referencing XML nodes
To map an XML node (i.e., an XML element or an attribute) to an OWL class, it is
necessary to reference the XML node to be mapped. The first possible approach would
be to reference the node by its name. However we cannot forget that XML lacks
semantics. This means that XML nodes with the same name but with different parents
may have different semantics. The following example, an XML document describing
electronic products and technology, represents such a case.
SONY LCD 28TV 
Philips Flat 32AB
...
HP 720.us
Dell P4-DC2 
...
The product elements have different semantics. For instance, the product elements
with the names SONY LCD 28TV and Philips Flat 32AB are part of the electronics
section while the product HP and Dell refer to computers. It is possible that those two
kinds of products are represented by different concepts on the ontology. Referencing
product nodes by their names simultaneously identifies electronics and computers and
thus they would be mapped to the same ontological concept. Therefore, referencing
XML nodes by their names is not a suitable solution.
A second approach, much more appropriate, is to identify the XML nodes with an
XPath expression. For instance, the XML nodes representing electronics are referenced
8
with /products/electronics/product and can be mapped to the appropriate
concept defined by the ontology. Similarly, computers are addressed by
/products/computers/product and mapped to the corresponding ontological
concept.
XPath expressions have other advantages: XML attributes can be easily addressed
prefixing the attribute name with the '@' symbol. For instance,
/products/computers/product/@price could address the price of a
computer. Also, XPath predicates could be used to support conditional mappings.
Since this second approach using XPath expressions is more suitable, it was the
selected to overcome the lack of semantics of XML documents.
3.3 Referencing OWL resources
OWL resources are the classes and properties defined by an ontology. The W3C
OWL recommendation requires OWL resources to have unique identifiers. URI
references are used as unique identifiers in the Semantic Web context to reference
resources. URI references can be broken up in a namespace and a local name (or in a
URI and a fragment). The namespace is usually the URI of the whole ontology. The
local name uniquely identifies a resource within a namespace, that is, within an
ontology. A prefix can be associated with a namespace and can then be used to
reference a resource without writing the complete URI.
For example,
http://jxml2owl.sourceforge.net/ontologies/tourism.owl# is a
namespace (and a URI) that identifies the tourism ontology [28]. The concept
Accommodation is the local name (or fragment) of a resource defined by this
ontology.
http://jxml2owl.sourceforge.net/ontologies/tourism.owl#Acco
mmodation is the complete URI reference of this resource. The term
tourism:Accommodation is equivalent to the previous URI reference if the prefix
tourism is associated with the namespace identifying the ontology.
Since our objective is to map an XML schema to an ontology and knowing that a
local name is unique within an ontology, one could think that the local name is
appropriate to uniquely reference a resource defined by the mapped ontology. However,
the local name is not enough because the OWL recommendation permits an ontology to
import other ontologies. Therefore, to be able to address resources defined by the
imported ontology, resources must be referenced by their URI. However, because URIs
can be quite long, it is also possible to reference resources using a prefix and a local
name.
3.4 Mapping XML nodes to OWL classes
XML nodes are referenced with XPath expressions while OWL classes are
referenced with their URIs. The pair (OWL class URI, XPath expression)
identifies a mapping and means that an instance of the OWL class identified by the URI
reference is created for each XML node matching the specified XPath expression. Let
us consider an ontology which defines two classes: computerProduct and
electronicProduct. The term product is a prefix associated with the
9
namespace of this ontology. Let us also consider the XML document introduced in
Section 3.1.
The following pair (product:eletronicsProduct,
/products/computers/product) indicates that an instance of
electronicsProduct is created for each XML nodes matching the XPath
expression /products/computers/product. Therefore, applying the mapping
rules to the considered XML document will generate two instances of the class
electronicProduct, one instance for product SONY LCD 28TV and the other one
for the product Philips Flat 32AB.
3.5 Mapping XML nodes to OWL properties
The W3C OWL recommendation defines two kinds of OWL properties: datatype
and object properties. Both properties have a domain and a range. The domain of a
property is not always a single class. For instance, it is possible to define the domain of
a property as the union of several classes. Consider the property displaySize and
the classes LCD-TV and Plasma-TV. Both a LCD television and a Plasma television
have a display size. Therefore, the domain of the property displaySize can be
specified as the union of the classes LCD-TV and Plasma-TV.
The range of a property varies according to the type of the property. Datatype
properties are properties for which the value is a data literal, such as xs:integer
(where xs is a prefix associated to the namespace
http://www.w3.org/2001/XMLSchema), while object properties take
individuals of a particular class as range.
3.5.1 Mapping XML nodes to OWL datatype properties
To create a datatype property mapping, the property as well as both its domain and
its range must be specified. The OWL datatype property, which is an OWL resource, is
addressed as we saw in Section 3.2 by its URI reference or by its prefix and local name.
The value of a datatype property range is a data literal such as xs:integer or
xs:string. Such a value can be specified with an XPath expression to indicate the
XML element, attribute or node containing the value used to fill the property value.
A discussion can arise to determine the best way to specify the domain of a mapped
property. How should it be referenced? Is it necessary to specify the domain to map a
property? In order to answer these questions, let us consider the following case. Let us
consider an ontology, identified by the prefix product, defining the concept
computerProduct as an OWL class which is the domain of two datatype properties:
name, whose range is a data literal xs:string, and price, whose range is
xs:integer. Let us consider as well the following XML document.
Philips Flat 32AB
10
SONY LCD 28TV
Using the notation introduced in Section 3.3, the following mapping to an OWL
class is valid:
(product:computerProduct, /products/price/computer/product)
Given this scenario, the challenge is to discover a generic way to specify that we
intend to map the XML element name and the attribute @value to the OWL datatype
properties product:name and product:price and specify the domain of these
properties, which is product:computerProduct.
A pair such as (product:name,
/products/price/computer/product/name) would mean that the value
under /products/price/computer/product/name would be used as the
range of the OWL datatype property product:name. This approach is not suitable
because the domain is not specified. One could argue that the domain of the created
property could be easily found checking the OWL class to which the parent node of
/products/price/computer/product/name is mapped, namely
product:computerProduct. However, this is not a valid solution. In fact,
consider that we also want to map /products/price/@value to the datatype
property product:price. Looking at the parent node is not appropriate. We could
also check the child node of price, but it is not mapped. Even worse, it could be
mapped to another OWL class that could also be part of the domain of the mapped
OWL property! Clearly, this approach is not suitable. The domain must be specified.
The first approach to specify the domain is to use an XPath expression identifying
the XML nodes mapped to the OWL class which is the domain of the property. Once
again, we need to find another solution because an XML node can be simultaneously
mapped to several OWL classes and the domain of the property can be the union of
those several classes.
The best solution is to associate the datatype property mapping to a class mapping.
This can be achieved using a triplet like
(OWL datatype property URI, domain class mapping, range XPath expression)
to specify a datatype property mapping. Considering the previous XML document and
the following class mapping, cm:
cm = (product:computerProduct, /products/price/computer/product)
the following triplet (product:price, cm, /product/price/@value) is a
valid datatype property mapping. It means that for each instance created from the cm
class mapping, a datatype property product:price is also created and its value is
filled using the one under /products/price/@value. Considering the previous
XML document, the class mapping cm and the previous datatype property mapping, two
instances of the OWL class product:computerrProduct are created: one for the
product Philips Flat 32AB and the other one for SONY LCD 28TV (in fact one for each
XML node matching the XPath expression used in the class mapping cm). For each of
these instances, a datatype property product:price is created, whose value is found
with /products/price/@value. In reality the value is not exactly found under the
XPath expression used in the triplet identifying the mapping of the property. In order to
11
get the value used as the range of a property, it is necessary to compute the relative path
from the XPath expression used in the class mapping to the XPath expression used in
the property mapping. For instance, for each XML node mapped to
product:computerProduct, the value of the property product:price is
found under the relative path ../../@value and the value of the property
product:name is found under the relative path name.
3.5.2 Mapping XML nodes to OWL object properties
Mapping OWL object properties is very similar to the mapping of datatype
properties. The difference occurs in the range of the property. While the range of
datatype properties takes literal values, the range of object properties takes instances of
OWL classes. The OWL object property is addressed like any other OWL resource (see
Section 3.2). The domain is specified like the domain of datatype properties. For the
same reasons of the domain of properties, the range of object properties is also
referenced with a class mapping. As such, object property mappings are also specified
with triplets:
(OWL object property URI, domain class mapping, range class mapping)
Let us consider an ontology with two OWL classes, tourism:Country and
tourism:City and an object property tourism:hasCity whose domain and
range are, respectively, tourism:Country and tourism:City. Let us also
consider its inverse property tourism:belongsToCountry as well as the
following XML document:
And the following mappings:
cm1 = (tourism:Country, /locations/location/country)
cm2 = (tourism:City, /locations/location/city)
The following triplets are valid object property mappings: (tourism:hasCity,
cm1, cm2) and (tourism:belongsToCountry, cm2, cm1). The first
object property mapping means that each OWL instance created from the class
mapping cm1 is the domain of an object property tourism:hasCity whose range is
an individual generated from the class mapping cm2. Again, in an identical way to the
datatype properties, it is necessary to compute the relative path, which is in the
example ../city, to obtain the exact individual used as range. Running the
instances’ transformation over the considered XML document, four individuals are
created: two instances of the OWL class tourism:Country, one for Portugal and
one for France, as well as two instances for the OWL class tourism:City, one for
Funchal and one for Paris. Four relationships between individuals (corresponding to the
two object property mappings) are also created: two that relate Portugal and Funchal,