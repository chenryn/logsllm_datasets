CPU MHz:               2394.204
BogoMIPS:              4787.85
Virtualization:        VT-x
L1d cache:             32K
L1i cache:             32K
L2 cache:              256K
L3 cache:              30720K
NUMA node0 CPU(s):     0,4,8,12,16,20,24,28,32,36
NUMA node1 CPU(s):     2,6,10,14,18,22,26,30,34,38
NUMA node2 CPU(s):     1,5,9,13,17,21,25,29,33,37
NUMA node3 CPU(s):     3,7,11,15,19,23,27,31,35,39
```
::: para
`lstopo`{.command} 指令由 [hwloc]{.package}
数据包提供，创建了用户的系统示意图。`lstopo-no-graphics`{.command}
指令提供详尽的文本输出。
:::
::: mediaobject
![Graphical output of the lstopo command on a system with four NUMA
nodes](images/bz1042800-lstopo_output.png)
::: caption
::: para
lstpo 指令的输出
:::
:::
:::
:::
:::
::: section
::: titlepage
## [⁠]{#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-CPU.html#sect-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Considerations-Scheduling}3.1.2. 调度 {.title}
:::
::: para
在红帽企业版 Linux 中，执行进程的最小单元叫做一个
"[*线程*]{.emphasis}"。系统调度器决定运行线程的处理器和运行的时间。但由于调度器主要关注的是保持系统繁忙，因此可能不会为应用程序的性能而对线程进行最佳调度。
:::
::: para
例如，在 NUMA 系统中，一个处理器在节点 B 可用，一个应用程序在节点 A
运行，要使在节点 B 的处理器保持忙碌，
调度器会把应用程序的一个线程转移到节点
B。但是，线程上的应用程序仍然需要访问在节点 A
的内存。由于该线程目前在节点 B 运行，并且对于此线程来说节点 A
的内存已不再是本地内存，访问起来就要花更长的时间。较于在节点 A
等待可用的处理器，并且在能够进行本地内存访问的源节点上执行线程，此线程在节点
B 结束运行可能就更加费时。
:::
::: para
设计器或管理员确定线程的运行位置能使对性能敏感的应用程序从中受益。如何保证适当地调度线程，以满足对性能敏感的应用程序的需要，详情请参见
＜[第 3.3.6 节
"调节调度策略"](#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-CPU.html#sect-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Configuration_suggestions-Tuning_scheduling_policy){.xref}＞。
:::
::: section
::: titlepage
### [⁠]{#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-CPU.html#sect-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Scheduling-Kernel_Ticks}3.1.2.1. 内核滴答信号 {.title}
:::
::: para
在早期红帽企业版 Linux 版本中，Linux 内核会定期中断每个 CPU
以查看需要完成的任务。查看的结果用来决定进程调度及负载均衡。这种常规性的中断叫做一个内核
"*滴答信号*"。
:::
::: para
此标记的出现不考虑内核是否有任务要执行。这意味着为了回应这些中断，即使是空闲的内核也会被迫定期进入高能状态（每秒高达1000次）。这阻止了系统有效地利用新近
x 86 代处理器的深睡眠状态。
:::
::: para
在红帽企业版 Linux 6 和 7 中，默认情况下内核不再中断趋于低功率状态的空闲
CPU，这种性能叫做无时钟内核。当一个或几个任务在运行时，按需中断取代了定时中断，使
CPU 可以更久地处于空闲或低功率状态，减少了电量的消耗。
:::
::: para
红帽企业版 Linux 7 提供一种动态的无时钟设置（ `nohz_full`{.option}
），通过用户空间的任务来减少内核干扰以进一步改善其确定性。这一设置可以在指定的内核中通过
*`nohz_full`*
内核参数来启用。当这一设置在一个内核中启用时，所有的计时活动将会被移动至无延迟敏感性的内核。这对于高性能计算和实时计算工作负载来说都很有用，因为其用户空间任务对由于内核计时器滴答信号造成的微秒级的延迟尤为敏感。
:::
::: para
启用红帽企业版 Linux 7 中动态无时钟性能的方法，请见＜ [第 3.3.1 节
"配置内核滴答记号时间"](#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-CPU.html#sect-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Configuration_suggestions-Configuring_kernel_tick_time){.xref}＞。
:::
:::
:::
::: section
::: titlepage
## [⁠]{#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-CPU.html#sect-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Considerations-Interrupt_Request_IRQ_Handling}3.1.3. 中断请求管理 {.title}
:::
::: para
中断请求或 IRQ
是请求及时关注的信号，是从硬件发送至处理器的。系统中的每个设备都分配到一个或多个
IRQ
号，以便能发送独一的中断信号。当启用中断时，收到中断请求的处理器会立即暂停执行当前应用程序线程，这是为了处理该中断请求。
:::
::: para
因为中断了正常的运行，高中断率会严重降低系统性能，但减少中断的时间是可能的，可以设置中断关联或发送一批低优先率的中断（"[*组合*]{.emphasis}
中断"）
:::
::: para
关于调节中断请求的更多信息，请见＜ [第 3.3.7 节
"设置中断关联"](#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-CPU.html#sect-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Configuration_suggestions-Setting_interrupt_affinity){.xref}＞
或 ＜[第 3.3.8 节 "使用 Tuna 配置
CPU、线程和中断关联"](#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-CPU.html#sect-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Configuration_suggestions-Configuring_CPU_thread_and_interrupt_affinity_with_Tuna){.xref}＞。针对网络中断信息，请见＜
[第 6 章
*网络*](#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Networking.html){.xref}＞。
:::
:::
:::
::: section
::: titlepage
# [⁠]{#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-CPU.html#sect-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-CPU-Monitoring_and_diagnosing_performance_problems}3.2. 监控和诊断性能问题 {.title}
:::
::: para
红帽企业版 Linux 7
提供了大量工具，这些工具对与处理器及其配置相关的系统性能监和性能问题诊断很有帮助。本章概述了可用的工具并举例说明如何使用它们来监测和诊断与处理器相关的性能问题。
:::
::: section
::: titlepage
## [⁠]{#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-CPU.html#sect-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Monitoring_and_diagnosing_performance_problems-turbostat}3.2.1. turbostat {.title}
:::
::: para
[**Turbostat**]{.application}
在规定的间隔中给出计时器的结果以协助管理员识别服务器异常，例如过度耗电，无法进入深睡眠状态或是创建了不必要的系统管理中断（SMIs）。
:::
::: para
[**turbostat**]{.application} 工具是 [ 内核工具]{.package}
数据包的一部分。支持在 AMD 64 和 [Intel]{.trademark}® 64
处理器的系统中使用。需要 root 特权来运行，处理器支持时间戳计时器以及
APERF 和 MPERF 型号的特定寄存器。
:::
::: para
使用实例，请参见手册页：
:::
``` screen
$ man turbostat
```
:::
::: section
::: titlepage
## [⁠]{#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-CPU.html#sect-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Monitoring_and_diagnosing_performance_problems-numastat}3.2.2. numastat {.title}
:::
::: {.important xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**重要**
:::
::: admonition
::: para
该工具在红帽企业版 Linux 6
的整个使用周期中都会接收到大量更新，虽然默认的输出和 Andi Kleen
写的原始工具相兼容，但提供任何选项或参数给 numastat
都会显著地改变其输出格式。
:::
:::
:::
::: para
[**numastat**]{.application} 工具会列举每个 NUMA
节点内存数据给所有的进程和操作系统，并会告知管理员进程内存是散布于系统还是集中于某个节点。
:::
::: para
通过处理器的 [**top**]{.application} 输出进行交互参照
[**numastat**]{.application}
输出，以确认进程线程是在同一个节点运行，此节点是进程内存分配节点。
:::
::: para
[**Numastat**]{.application} 由 [numactl]{.package} 数据包提供。关于
[**numastat**]{.application} 输出的更多信息，请参见手册页：
:::
``` screen
$ man numastat
```
:::
::: section
::: titlepage
## [⁠]{#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-CPU.html#sect-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Monitoring_and_diagnosing_performance_problems-procinterrupts}3.2.3. /proc/ 中断 {.title}
:::
::: para
`/proc/interrupts`{.filename} 文件列举了从一个特殊的 I/O
设备发送至各处理器的中断数量，显示了中断请求（IRQ）数量、系统中各处理器处理该类型中断请求的数量，发送的中断类型以及以逗号分隔开的回应所列中断请求的设备列表。
:::
::: para
如果一个特定的应用程序或是设备生成大量的中断请求给远程处理器处理，其性能就会受到影响。这种情况下，当应用程序或设备在处理中断请求时，可以在同一节点设置一个处理器，以此来缓解性能不佳的状况。将中断处理分配给特定处理器的方法，请见
＜[第 3.3.7 节
"设置中断关联"](#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-CPU.html#sect-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Configuration_suggestions-Setting_interrupt_affinity){.xref}＞。
:::
:::
:::
::: section
::: titlepage
# [⁠]{#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-CPU.html#sect-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-CPU-Configuration_suggestions}3.3. 配置建议 {.title}
:::
::: para
红帽企业版 Linux
提供了大量工具来协助管理员配置系统。本章概述了可用的工具并提供了使用它们在红帽企业版
Linux 7 中解决与处理器相关的性能问题的实例。
:::
::: section
::: titlepage
## [⁠]{#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-CPU.html#sect-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Configuration_suggestions-Configuring_kernel_tick_time}3.3.1. 配置内核滴答记号时间 {.title}
:::
::: para
默认情况下，红帽企业版 Linux 7 使用无时钟内核，它不会中断空闲 CPU
来减少用电量，并允许较新的处理器利用深睡眠状态。
:::
::: para
红帽企业版 Linux 7
同样提供一种动态的无时钟设置（默认禁用），这对于延迟敏感型的工作负载来说是很有帮助的，例如高性能计算或实时计算。
:::
::: para
要启用特定内核中的动态无时钟性能，在内核命令行中用 *`nohz_full`*
参数进行设定。在 16 核的系统中，设定 `nohz_full=1-15`{.code} 可以在 1 到
15
内核中启用动态无时钟内核性能，并将所有的计时移动至唯一未设定的内核中（0
内核）。这种性能可以在启动时暂时启用，也可以在
`/etc/default/grub`{.filename} 文件中永久启用。要持续此性能，请运行
`grub2-mkconfig -o /boot/grub2/grub.cfg`{.command} 指令来保存配置。
:::
::: para
启用动态无时钟性能需要一些手动管理。
:::
::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
-   ::: para