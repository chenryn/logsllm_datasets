$ otool -I -v simpleapp | grep stack
0x00001e48 97 ___stack_chk_fail
0x00003008 98 ___stack_chk_guard
0x0000302c 97 ___stack_chk_fail
$
Automatic Reference Counting
Automatic Reference Counting (ARC) was introduced in iOS SDK version 5.0 to move the responsibility of
memory management and reference counting from the developer to the compiler. As a side effect ARC also
offers some security benefits because it reduces the likelihood of developers’ introducing memory corruption
(specifically, object use-after-free and double-free) vulnerabilities into applications.
ARC can be enabled globally within an Objective-C application within Xcode by setting the compiler option
Objective-C Automatic Reference Counting to Yes. ARC can also be enabled or disabled on a per-object file basis
using the —fobjc-arc or —fno-objc-arc compiler flags. Swift applications require ARC, a setting enabled by
default when you create a Swift application project in Xcode.
To identify the presence of ARC in a blackbox review of a compiled application, you can look for the presence of
ARC-related symbols in the symbol table, as shown here:
$ otool -I -v test-swift | grep release
0x0000ffa4 551 _objc_autoreleaseReturnValue
0x0000ffcc 562 _objc_release
A number of runtime support functions exist for ARC; however, some common ones that you are likely to
observe are:
objc_retainAutoreleaseReturnValue
objc_autoreleaseReturnValue
objc_storeStrong
objc_retain
objc_release
objc_retainAutoreleasedReturnValue
Be aware that because ARC can be applied on a per-object file basis, identifying the presence of these symbols
does not necessarily guarantee that ARC is used globally across all application classes. For more information on
the ARC run time, consult the LLVM documentation
http://clang.llvm.org/docs/AutomaticReferenceCounting.html#runtime-support.
2.8.3 Decrypting App Store Binaries
When an application is released to the App Store, Apple applies its FairPlay Digital Rights Management (DRM)
copy scheme to protect the application against piracy. The result of this is an encrypted application where the
internal code structures are not immediately visible to someone attempting to reverse the application. In this
section you learn how to bypass this protection, providing a platform for you to go on and reverse engineer the
application.
Decrypting iOS Binaries Using a Debugger
Applications originating from the App Store are protected by Apple’s binary encryption scheme. These apps are
decrypted at run time by the kernel’s Mach-O loader; as such recovering the decrypted files is a relatively
straightforward process. Removing this encryption allows the attacker to get a greater understanding of how the
binary works, the internal class structure, and how to get the binary in a suitable state for reverse engineering.
You can remove the App Store encryption by letting the loader decrypt the application, then using lldb or gdb
attach to the process and dump the cleartext application from memory.
You can identify encrypted binaries by the value in the cryptid field of the LC_ENCRYPTION_INFO load command.
We will now walk you through an example of decrypting the ProgCalc calculator application
(https://itunes.apple.com/gb/app/progcalc-rpn-programmer-calculator/id294256032?mt=8):
# otool -l ProgCalc | grep -A 4 LC_ENCRYPTION_INFO
cmd LC_ENCRYPTION_INFO
cmdsize 20
cryptoff 4096
cryptsize 53248
cryptid 0
1. To retrieve the decrypted segment of the ProgCalc application, you must first let the loader run and perform
its decryption routines, and then attach to the application. You can do this by running the application on the
device and using the attach command in gdb:
(gdb) attach 963
Attaching to process 963.
Reading symbols for shared libraries . done
Reading symbols for shared libraries
...........................................................
...........................................................
..................................................... done
Reading symbols for shared libraries + done
0x3ac22a58 in mach_msg_trap ()
(gdb)
At this stage, the loader has decrypted the application and you can dump the cleartext segments directly from
memory. The location of the encrypted segment is specified by the cryptoff value in the LC_ENCRYPTION_INFO
load command, which gives the offset relative to the header. You will need to take this value and add it to the
base address of the application.
2. To find the base address you can use the following command:
(gdb) info sharedlibrary
The DYLD shared library state has not yet been initialized.
Requested State Current State
Num Basename Type Address Reason | | Source
| | | | | | | |
1 ProgCalc - 0x1000 exec Y Y
/private/var/mobile/Applications/659087B4-510A-475D-A50F-
F4476464DB79/ProgCalc.app/ProgCalc (offset 0x0)
In this example, the ProgCalc image is loaded at a base address of 0x1000. Consequently, the encrypted
segment begins at offset 0x2000 or 8192 decimal (base address of 0x1000 plus the cryptoff of 0x1000). The
address range to extract from memory is simply the address of the start of the encrypted segment, plus the
size of the encrypted segment that is specified by the cryptsize variable (53248 or 0xD000 hex), resulting in
an end address of 0xF000 (0x2000 + 0xD000).
3. You can retrieve the decrypted segment using the dump memory GDB command:
(gdb) dump memory ProgCalc.decrypted 8192 61440
(gdb)
The resultant file should be exactly the same size as your cryptsize value.
4. The decrypted section can then be written to the original binary, replacing the original encrypted segment:
# dd seek=4096 bs=1 conv=notrunc if=ProgCalc.decrypted of=ProgCalc
53248+0 records in
53248+0 records out
53248 bytes (53 kB) copied, 1.05688 s, 50.4 kB/s
Finally, the cryptid value must be set to 0 to denote that the file is no longer encrypted and the loader
should not attempt to decrypt it. Using a hex editor such as vbindiff (available in saurik’s Cydia repository),
you must search for the location of the LC_ENCRYPTION_INFO command; find it by searching for the hex bytes
2100000014000000. From this location, flip the cryptid value to 0, which is located 16 bytes in advance of
the cmdsize (0x21000000). At this stage your binary should be decrypted, and you can view the internal class
structure, which is covered in greater detail in the following section of this chapter.
Automating the Decryption Process
Manually decrypting an application as described in the previous section can be quite a laborious and potentially
error-prone task. This is why a number of researchers have developed tools to automate this process; some
common examples include Clutch and the now defunct Crackulous application. However, our solution of choice
is the dumpdecrypted tool developed by Stefan Esser (https://github.com/stefanesser/dumpdecrypted). This
solution works by using the dynamic linker to inject a constructor into the application, which goes on to
automatically parse the LC_ENCRYPTION_INFO load command and extract the decrypted segment in a similar way
to the method described in the previous section.
To use dumpdecrypted simply run the application and use the DYLD_INSERT_LIBRARIES environment variable to
inject the dumpdecrypted dynamic library, as shown here:
# DYLD_INSERT_LIBRARIES=dumpdecrypted.dylib
/var/mobile/Applications/C817EEF7-D01F-4E70-BE17-
07C28B8D28E5/ProgCalc.app/ProgCalc
mach-o decryption dumper
DISCLAIMER: This tool is only meant for security research purposes,
not for application crackers.
[+] offset to cryptid found: @0x1680(from 0x1000) = 680
[+] Found encrypted data at address 00001000 of length 53248 bytes - type
1.
[+] Opening /private/var/mobile/Applications/C817EEF7-D01F-4E70-BE17-
07C28B8D28E5/ProgCalc.app/ProgCalc for reading.
[+] Reading header
[+] Detecting header type
[+] Executable is a plain MACH-O image
[+] Opening ProgCalc.decrypted for writing.
[+] Copying the not encrypted start of the file
[+] Dumping the decrypted data into the file
[+] Copying the not encrypted remainder of the file
[+] Setting the LC_ENCRYPTION_INFO->cryptid to 0 at offset 680
[+] Closing original file
[+] Closing dump file
The tool generates a decrypted copy in the current working directory. You can verify that the application has
been decrypted by checking the value of the cryptid variable, which should now be set to 0:
# otool -l ProgCalc.decrypted | grep -A 4 LC_ENCRYPT
cmd LC_ENCRYPTION_INFO
cmdsize 20
cryptoff 4096
cryptsize 53248
cryptid 0
Inspecting Decrypted Binaries
Now that you are comfortable with the methods for decrypting iOS applications, we now detail how to use the
decrypted application to discover more about its inner workings.
Inspecting Objective-C Applications
Within a decrypted Objective-C binary, a wealth of information exists in the __OBJC segment that can be useful
to a reverse engineer. The __OBJC segment provides details on the internal classes, methods, and variables used
in the application; this information is particularly useful for understanding how the application functions, when
patching it or hooking its methods at run time.
You can parse the __OBJC segment using the class-dump-z
(https://code.google.com/p/networkpx/wiki/class_dump_z) application. For example, running the previously
decrypted ProgCalc application through class-dump-z yields details on the internal class structure, including the
following:
@interface RootViewController :
{
ProgCalcViewController *progcalcViewController;
ProgCalcDriver *driver;
AboutViewController *aboutViewController;
EditTableViewController *editTableViewController;
UIBarButtonItem *doneButton;
UIBarButtonItem *upgradeButton;
UIBarButtonItem *saveButton;
}
- (void)dealloc;
- (void)loadView;
- (void)viewDidLoad;
- (void)loadAboutViewController;
- (void)upgrade;
- (void)toggleAbout;
- (void)loadEditViewController;
- (void)toggleEdit;
- (void)writeState;
- (BOOL)shouldAutorotateToInterfaceOrientation:(int)fp8;
- (void)didReceiveMemoryWarning;
- (id)driver;
- (void)setDriver:(id)fp8;
- (id)editTableViewController;
- (void)setEditTableViewController:(id)fp8;
- (id)aboutViewController;
- (void)setAboutViewController:(id)fp8;
- (id)progcalcViewController;
- (void)setProgcalcViewController:(id)fp8;
@end
In the previous snippet class-dump-z identifies a number of methods in the RootViewController class, which
gives you a fantastic insight into the application’s internals. In Chapter 3 you learn how by using this
information you can invoke, modify, and tamper with these methods at run time.
Inspecting Swift Applications
As has been previously mentioned, Apple announced the release of Swift, a new programming language for use
alongside iOS 8. At the time of writing iOS 8 is still in beta and little research has been released on the format or
structure of Swift binaries, nor are many tools available to parse them in a similar way to Objective-C
applications. At the 2014 World Wide Developer Conference Apple suggested that the Swift language and syntax
might change in the future; the information presented within this section is accurate at the time of writing but
could potentially be affected by future changes to the language.
Unlike Objective-C applications, Swift not only uses the traditional message passing system; this is only used for
Swift classes that inherit from Objective-C classes. Swift classes use a mixture of two approaches: direct
function calls and vtables. Where the compiler does not necessarily have enough information to form a direct
function call or inline the function, Swift classes use vtables to handle dynamic dispatch; those of you familiar
with C++ may be aware of this approach. In this instance, the vtable acts as an array of function pointers. The
vtable is constructed during compilation and the function’s pointers are inserted into the vtable array in the
order that they are declared. The compiler converts any method calls into a vtable lookup by index during the
compilation process. This has some side effects: the most obvious being the impact on method swizzling, which
Chapter 3 covers.
Consider the following simple Swift class:
class MAHH {
func sayHello(personName: String) -> String {
return "Hello " + personName + "!"
}
func helloMAHH()
{
println(sayHello("MAHH reader"))
}
}
If you compile this class in a Swift application and use the latest version of class-dump to parse it (taken from
swift-binaries branch of https://github.com/0xced/class-dump/tree/swift-binaries), you will see that the
MAHH Swift class is actually an Objective-C object and has a superclass of SwiftObject, which is a new root class
introduced with the Swift run time:
__attribute__((visibility("hidden")))
@interface MAHH : SwiftObject
{
}
@end
You can then modify your Swift class to subclass an Objective-C class, in this case NSObject, by making the
following alteration,
class MAHH : NSObject {
then rerunning the class-dump of the application will produce a more familiar result, and in this instance you
can see the class methods:
__attribute__((visibility("hidden")))
@interface MAHH : NSObject
{
}
- (id)init;
- (void)helloMAHH;
- (id)sayHello:(id)arg1;
@end
As you can see Swift is adaptable and may use different approaches for dynamic dispatch depending upon the
use case. But what about the methods for Swift classes that do not inherit from Objective-C? If you compile the
first example again as a debug build, you can inspect the symbol table of the application using nm to find the
following:
$ nm mahh-swift | grep -i mahh
0000b710 T __TFC10mahh_swift4MAHH8sayHellofS0_FSSSS
0000b824 T __TFC10mahh_swift4MAHH9helloMAHHfS0_FT_T_
Swift uses C++–like name-mangled functions for methods. The naming convention for the function carries
metadata about the function, attributes, and more. Using the helloMAHH function from the earlier example, the
mangled name can be broken down as follows:
__TFC10mahh_swift4MAHH9helloMAHHfS0_FT_T_
_T is the prefix indicating that it is a Swift symbol.
F indicates that it is a function.
C indicates that it is a function belonging to a class.
10mahh_swift is the module name prefixed with a length.
4MAHH is the class name prefixed with a length.
9helloMAHH is the function name prefixed with a length.
f is the function attribute; in this case, it indicates it’s a normal function.
S0_FT is currently not publicly documented.
_ separates the argument types from the return type; because this function takes no arguments, it comes
directly after the S0_FT.
T_ is the return type; in this case it specifies a void return. If S is used it specifies a Swift built-in type.
You can find a number of other values for this metadata detailed in http://www.eswick.com/2014/06/inside-
swift/; some possible values for function attributes and Swift built-in types are listed in Table 2.6 and Table 2.7.
Table 2.6 Function Attributes
CHARACTER TYPE
f Normal Function
s Setter
g Getter
d Destructor
D Deallocator
c Constructor
C Allocator
Table 2.7 Swift Built-in Types
CHARACTER TYPE
a Array
b Boolean
c UnicodeScalar
d Double