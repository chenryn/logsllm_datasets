4
the attacker already knows the hash values, he can down-
load ﬁles directly from the Dropbox server and no inter-
action with the client is needed which could be logged or
detected on the client side. The victim is unable to notice
this in any way, as no access to his computer is required.
Even for the Dropbox servers this unauthorized access to
arbitrary ﬁles is not detectable because they believe the
attacker already owns the ﬁles, and simply added them
to their local Dropbox folder.
3.2 Stolen Host ID Attack
During setup of the Dropbox client application on a
computer or smartphone, a unique host ID is created
which links that speciﬁc device to the owner’s Dropbox
account. The client software does not store username
and password.
Instead, the host ID is used for client
and user authentication. It is a random looking 128-bit
key that
is calculated by the Dropbox server from
several seeding values provided by the client (e.g.
username, exact date and time). The algorithm is not
publicly known. This linking requires the user’s account
credentials. When the client on that host is success-
fully linked, no further authentication is required for
that host as long as the Dropbox software is not removed.
If the host ID is stolen by an attacker, extracted by
malware or by social engineering, all the ﬁles on that
users accounts can be downloaded by the attacker. He
simply replaces his own host ID with the stolen one, re-
syncs Dropbox and consequently downloads every ﬁle.
3.3 Direct Download Attack
Dropbox’s transmission protocol between the client
software and the server is built on HTTPS. The client
software can request ﬁle chunks
from https://dl-
clientXX.dropbox.com/retrieve (where XX is replaced
by consecutive numbers) by submitting the SHA-256
hash value of the ﬁle chunk and a valid host ID as
HTTPS POST data. Surprisingly, the host ID doesn’t
even need to be linked to a Dropbox account that owns
Dropbox-Client(Python)Modiﬁed NCrypto(wrapper)SHA-256OpenSSL(hash value calculation)replacinghash valuethe corresponding ﬁle. Any valid host ID can be used
to request a ﬁle chunk as long as the hash value of the
chunk is known and the ﬁle is stored at Dropbox. As
we will see later, Dropbox hardly deletes any data.
It
is even possible to just create an HTTPS request with
any valid host ID, and the hash value of the chunk to
be downloaded. This approach could be easily detected
by Dropbox because a host ID that was not used to
upload a chunk or is known to be in possession of the
chunk would try to download it. By contrast the hash
manipulation attack described above is undetectable for
the Dropbox server, and (minor) changes to the core
communication protocol would be needed to detect it.
3.4 Attack Detection
To sum up, when an attacker is able to get access to the
content of the client database, he is able to download all
the ﬁles of the corresponding Dropbox account directly
from the Dropbox servers. No further access to the vic-
tim’s system is needed, and in the simplest case only the
host ID needs to be sent to the attacker. An alternative
approach for the attacker is to access only speciﬁc ﬁles,
by obtaining only the hash values of the ﬁle. The owner
of the ﬁles is unable to detect that the attacker accessed
the ﬁles, for all three attacks. From the cloud storage ser-
vice operators point of view, the stolen host-ID attack as
well as the direct download attack are detectable to some
extent. We discuss some countermeasures in section 6.
However, by using the hash manipulation attack the at-
tacker can avoid detection completely, as this form of
unauthorized access looks like the attacker already owns
the ﬁle to Dropbox. Table 2 gives an overview of all of
the different attacks that can lead to unauthorized ﬁle ac-
cess and information leakage 2.
4 Attack Vectors and Online Slack Space
This section discusses known attack techniques to exploit
cloud storage and Dropbox on a large scale. It outlines
already known attack vectors, and how they could be
used with the help of Dropbox, or any other cloud stor-
age service with weak security. Most of them can have
a severe impact and should be considered in the threat
model of such services.
2We communicated with Dropbox and reported our ﬁndings prior
to publishing this paper. They implemented a temporary ﬁx to prevent
these types of attacks and will include a permanent solution in future
versions.
4.1 Hidden Channel, Data Leakage
The attacks discussed above can be used in numerous
ways to attack clients, for example by using Dropbox
as a drop zone for important and possibly sensitive data.
If the victim is using Dropbox (or any other cloud stor-
age services which is vulnerable to our discovered at-
tack) these services might be used to exﬁltrate data a lot
stealthier and faster with a covert channel than using reg-
ular covert channels [16]. The amount of data that needs
to be sent over the covert channel would be reduced to a
single host ID or the hash values of speciﬁc ﬁles instead
of the full ﬁle. Furthermore the attacker could copy im-
portant ﬁles to the Dropbox folder, wait until they are
stored on the cloud service and delete them again. After-
wards he transmits the hash values to the attacker and the
attacker then downloads these ﬁles directly from Drop-
box. This attack requires that the attacker is able to exe-
cute code and has access to the victim’s ﬁle system e.g.
by using malware. One might argue that these are tough
preconditions for this scenario to work. However, as in
example, in the case of corporate ﬁrewalls this kind of
data leakage is much harder to detect as all trafﬁc with
Dropbox is encrypted with SSL and the transfers would
blend in perfectly with regular Dropbox activity, since
Dropbox itself is used for transmitting the data. Cur-
rently the client has no control measures to decide upon
which data might get stored in the Dropbox folder. The
scheme for leaking information and transmitting data to
an attacker is depicted in Figure 2.
Figure 2: Covert Channel with Dropbox
4.2 Online Slack Space
Uploading a ﬁle works very similarly to downloading
with HTTPS (as described above, see section 3.3). The
client software uploads a chunk to Dropbox by calling
https://dl-clientXX.dropbox.com/store with the hash
value and the host ID as HTTPS POST data along with
the actual data. After the upload is ﬁnished, the client
5
Victim using DropboxAttackers PC1. Steal hashes2. Send hashes to Attacker3. Link hashes with fake client4. Download all files of the victimMethod
Hash Value Manipulation Attack
Direct Download Attack
Stolen Host ID Attack
Consequences
Detectability
Undetectable
Unauthorized ﬁle access
Dropbox only Unauthorized ﬁle access
Dropbox only
Get all user ﬁles
Table 2: Variants of the Attack
software links the uploaded ﬁles to the host ID with
another HTTPS request. The updated or newly added
ﬁles are now pushed to all computers of the user, and to
all other user accounts if the folder is a shared folder.
quences, as it is possible to store ﬁles remotely in other
peoples Dropbox. A large scale infection using Drop-
box is however very unlikely, and if an attacker is able to
retrieve the host ID he already owns the system.
A modiﬁed client software can upload ﬁles without
limitation, if the linking step is omitted. Dropbox can
thus be used to store data without decreasing the avail-
able amount of data. We deﬁne this as online slack space
as it is similar to regular slack space [21] from the per-
spective of a forensic examiner where information is hid-
den in the last block of ﬁles on the ﬁlesystem that are not
using the entire block. Instead of hiding information in
the last block of a ﬁle, data is hidden in Dropbox chunks
that are not linked to the attackers account. If used in
combination with a live CD operating system, no traces
are left on the computer that could be used in the foren-
sic process to infer the existence of that data once the
computer is powered down. We believe that there is no
limitation on how much information could be hidden, as
the exploited mechanisms are the same as those which
are used by the Dropbox application.
4.3 Attack Vector
If the host ID is known to an attacker, he can upload
and link arbitrary ﬁles to the victim’s Dropbox account.
Instead of linking the ﬁle to his account with the second
HTTPS request, he can use an arbitrary host ID with
which to link the ﬁle.
In combination with an exploit
of the operating system ﬁle preview functions, e.g. on
one of the recent vulnerabilities in Windows 3, Linux 4,
or MacOS 5,
this becomes a powerful exploitation
technique. An attacker could use any 0-day weakness
in the ﬁle preview of supported operating systems to
execute code on the victim’s computer, by pushing a
manipulated ﬁle into his Dropbox folder and waiting for
the user to open that directory. Social engineering could
additionally be used to trick the victim into executing a
ﬁle with a promising ﬁlename.
To get access to the host ID in the ﬁrst place is tricky,
and in any case access to the ﬁlesystem is needed in
the ﬁrst place. This however does not reduce the conse-
3Windows Explorer: CVE-2010-2568 or CVE-2010-3970
4Evince in Nautilus: CVE-2010-2640
5Finder: CVE-2006-2277
5 Evaluation
This section studies some of the attacks introduced. We
evaluate whether Dropbox is used to store popular ﬁles
from the ﬁlesharing network thepiratebay.org 6 as well as
how long data is stored in the previously deﬁned online
slack space.
5.1 Stored ﬁles on Dropbox
With the hash manipulation attack and the direct down-
load attack described above it becomes possible to test
if a given ﬁle is already stored on Dropbox. We used
that to evaluate if Dropbox is used for storing ﬁlesharing
ﬁles, as ﬁlesharing protocols like BitTorrent rely heavily
on hashing for ﬁle identiﬁcation. We downloaded the top
100 torrents from thepiratebay.org [7] as of the middle of
September 2010. Unfortunately, BitTorrent uses SHA-1
hashes to identify ﬁles and their chunks, so the informa-
tion in the .torrent ﬁle itself is not sufﬁcient and we had
to download parts of the content. As most of the ﬁles
on BitTorrent are protected by copyright, we decided to
download every ﬁle from the .torrent that lacks copyright
protection to protect us from legal complaints, but are
still sufﬁcient to prove that Dropbox is used to store these
kind of ﬁles. To further proctect us against complaints
based on our IP address, our BitTorrent client was modi-
ﬁed to prevent upload of any data, as described similarly
in [27]. We downloaded only the ﬁrst 4 megabytes of any
ﬁle that exceeds this size, as the ﬁrst chunk is already suf-
ﬁcient to tell if a given ﬁle is stored on Dropbox or not
using the hash manipulation attack.
We observed the following different types of ﬁles that
were identiﬁed by the .torrent ﬁles:
• Copyright protected content such as movies, songs
or episodes of popular series.
• “Identifying ﬁles” that are speciﬁc to the copyright
protected material, such as sample ﬁles, screen cap-
tures or checksum ﬁles, but without copyright.
6Online at http://thepiratebay.org
6
• Static ﬁles that are part of many torrents, such as
release group information ﬁles or links to websites.
Those “identifying ﬁles” we observed had the follow-
ing extensions and information:
• .nfo: Contains information from the release group
that created the .torrent e.g., list of ﬁles, installation
instructions or detailed information and ratings for
movies.
• .srt: Contains subtitles for video ﬁles.
• .sfv: Contains CRC32 checksums for every ﬁle
within the .torrent.
• .jpg: Contains screenshots of movies or album cov-
ers.
• .torrent: The torrent itself contains the hash values
of all the ﬁles, chunks as well as necessary tracker
information for the clients.
In total from those top 100 torrent archives, 98 con-
tained identifying ﬁles. We removed the two .torrents
from our test set that did not contain such identifying
ﬁles. 24 hours later we downloaded the newest entries
from the top 100 list, to check how long it takes from the
publication of a torrent until it is stored on Dropbox. 9
new torrents, mostly series, were added to the test set. In
Table 3 we show in which categories they where catego-
rized by thepiratebay.org.
Category Quantity
Application
Game
Movie
Music
Series
Sum
3
5
64
6
29
107
Table 3: Distribution of tested .torrents
When we downloaded the “identifying ﬁles” from
these 107 .torrent, they had in total approximately 460k
seeders and 360k leechers connected (not necessarily
disjoint), with the total number of complete downloads
possibly much higher. For every .torrent ﬁle and every
identifying ﬁle from the .torrent’s content we generated
the sha256 hash value and checked if the ﬁles were stored
on Dropbox, in total 368 hashes. If the ﬁle was bigger
then 4 megabytes, we only generated the hash of the ﬁrst
chunk. Our script did not use the completely stealthy ap-
proach described above, but the less stealthy approach
by creating an HTTPS request with a valid host ID as the
overall stealthiness was in our case not an issue.
7
From those 368 hashes, 356 ﬁles were retrievable,
only 12 hashes were unknown to Dropbox and the cor-
responding ﬁles were not stored on Dropbox. Those 12
ﬁles were linked to 8 .torrent ﬁles. The details:
• In one case the identifying ﬁle of the .torrent was
not on Dropbox, but the .torrent ﬁle was.
• In three cases the .torrent ﬁle was not on Dropbox,
but the identifying ﬁles were.
• In four cases the .nfo ﬁle was not on Dropbox, but
other iIn fact, it might be the case that only one per-
son uses Dropbox to store these ﬁles. dentifying
ﬁles from the same .torrent were.
This means that for every .torrent either the .torrent
ﬁle, the content or both are easily retrievable from Drop-
box once the hashes are known. Table 4 shows the num-
bers in details, where hit rate describes how many of
them were retrievable from Dropbox.
File Quantity Hitrate Hitrate rel.
.torrent:
.nfo:
others:
In total:
107
53
208
368
106
49
201
356
99%
92%
97%
97%
Table 4: Hit rate for ﬁlesharing
Furthermore we analyzed the age of the .torrents to
see how quick Dropbox users are to download the .tor-
rents and the corresponding content, and to upload ev-
erything to Dropbox. Most of the .torrent ﬁles were rela-
tively young, as approximately 20 % of the top 100 .tor-
rent ﬁles were less than 24 hours on piratebay before we
were able to retrieve them from Dropbox. Figure 3 shows
the distribution of age from all the .torrents:
5.2 Online Slack Space Evaluation
To assess if Dropbox could be used to hide ﬁles by
uploading without linking them to any user account, we
generated a set of 30 ﬁles with random data and uploaded
them with the HTTPS request method. Furthermore we
uploaded 55 ﬁles with a regular Dropbox account and
deleted them right afterwards, to assess if Dropbox ever
deletes old user data. We furthermore evaluated if there
is some kind of garbage collection that removes ﬁles
after a given threshold of time since the upload. The
ﬁles were then downloaded every 24 hours and checked
for consistency by calculating multiple hash functions
and comparing the hashvalues. By using multiple ﬁles
with various sizes and random content we minimized the
likelihood of an unintended hash collision and avoided
testing for a ﬁle that is stored by another user and thus
Figure 3: Age of .torrents
Figure 4: Online slack without linking over time
always retrievable. Table 5 summarizes the setup.
Method of upload
Regular folder
Shared folder
HTTPS request
In total:
#
6 months
25
30
6 months
30 >3 months
85
Testduration Hitrate
100%
100%
50%
100%
—
Table 5: Online slack experiments