data  corruption  latency  using  the  above  metric  was 
presented  in  [Mitra 99bl.  Suppose that  faultsf]  and f 2  
affect  the  two  implementations  NI  and  N2  at  cycle  c. 
The data corruption latencv is defined to be  the number 
of  cycles  from  c  after  which  both  the  implementations 
produce  the  same  error  pattem  at  the  output.  The 
expression for  the  expected  data corruption latency of  a 
duplex system is shown below. 
= 
Expected 
data 
corruption 
latency 
In  the above expression, Tis the mission time of  the 
application under consideration.  When the d1,2 value of a 
fault  pair  is  1,  the  data  corruption  latency  is  strictly 
infinity  (because  data  integrity  is  guaranteed)  and  is 
limited by  the system mission time.  It  is clear  from  the 
above  expression  that  the  fault  pairs  having  their  di,j 
27 
values very close to  1  contribute  the most  to increase the 
data corruption latency.  Fault pairs with very low values 
of di,j have  very little impact on  increasing  the expected 
data corruption latency of the system. 
3.  Techniques for Reducing the Number of Fault Pairs 
In  this  section,  we  first  prove  that  the  problem  of 
calculating  the  D-metric  presented  in  Sec.  2  is  NP- 
complete. 
Theorem 1:  The  calculation  of  the  dj,j  value  for  a 
fault pair fi, 4) is an NP-complete problem  for arbitrary 
logic networks. 
Proof:  Consider  any  fault  fi  in  an  arbitrary 
combinational  logic  network.  We  want  to  find  whether 
the  fault  is redundant  or  not.  For  that  purpose,  we  can 
identical  designs 
calculate 
(corresponding 
logic 
network).  The fault  is redundant  if  and  only  if  the  di,i 
value  is  1.  However,  we  know  that  the  problem  of 
identification of a redundant fault is NP-complete because 
it  can  be  reduced  to  the  Boolean  Satisfiability  problem 
[Garey 791.  Hence, the problem of  calculation  of  the d i j  
values is NP-complete. 
the  given  combinational 
the  di,i  value  for 
Q.E.D. 
two 
to 
two 
For  practical  purposes,  there  are  two  problems 
associated  with  calculation  of  the  D-metric.  First,  the 
number of  fault  pairs  for  which  the  di,j values  must  be 
calculated  can  be  very  large.  Second,  the  problem  of 
calculating  the di,j value for a fault pair is NP-complete. 
In  this  section,  we  present  techniques  to  reduce  the 
number  of  fault  pairs  for  which  the  d i j  values  have  to 
calculated - as a result, we obtain bounds on the D-metric 
for 
logic 
function.  The fault model  that we  consider  is the  single 
stuck-at fault model; i.e., all failures act as single stuck-at 
faults in N1  and N2.  As  our basis for the calculation  of 
the lower and the upper bounds, we use the following two 
theorems. 
implementations  of  a  combinational 
Theorem 2:  In  a single-output fanout-free  circuit  C, 
for any single stuck-at fault f, the  set  of  all  test pattems 
that  detect f is  a  subset of  the  set of  all  test  pattems  of 
either the stuck-at-0 or the stuck-at-1 fault at the output of 
C. 
Theorem 3: In  a single-output fanout-free  circuit C, 
for any faultf, we can find a set S of single stuck-at faults 
at the inputs of  C such that the set of  all test pattems that 
detect f is  a  superset of  the  set  of  all  test  pattems  that 
detect the faults in S. 
The  proofs  of  the  above  theorems  follow  directly 
from  the  analysis  of  the  equivalence  and  dominance 
relationship  of  single-stuck faults  in  logic  networks  [To 
731. 
fanout-free 
combinational  logic  network  of  Fig.  3.1.  Consider  the 
fault  lead  r  stuck-at  0  (do).  This  fault  dominates  the 
single-output 
Consider 
the 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:03:47 UTC from IEEE Xplore.  Restrictions apply. 
Tr c Tz i 
following 
the 
L 
a 
Figure 3.1.  A fanout-free combinational logic network 
fanout-free  or 
Given any arbitrary combinational logic network (not 
necessarily 
single-output).  we  can 
decompose  the  network  into  maximal  single-output 
fanout-free regions and calculate the test sets of the single 
stuck-at  faults  at  the  inputs  and  the  outputs  of  the 
different  fanout-free  regions  (Fig.  3.2).  Next,  we  can 
approximate  the  test  sets  of  the  stuck-at  faults  on  the 
remaining leads  of  the  given network  using  the  superset 
and  subset  relationships  explained  earlier  and  calculate 
bounds on  the  dj,j  values  of  for  different  fault  pairs  as 
explained next.  . 
SI- 
'1 11 L 
respectively.  Let us  suppose that  T1  and  T2 are the sets 
of  input combinations that detect f1 and f2, respectively. 
From  our  example  in  Sec.  2,  we  know  that  d1,2  = 
1- IT nr21 
.  Suppose  that,  from  the  analysis  of  the 
circuits  we  obtain  the  following  superset  and  subset 
relationships: T3uT4 e T1 e T5 and TguT7 c T2 c Tg, 
where T i ,  T2, T3, T4, T5, 7'6, T7, and Tg are the test  sets 
for faults f i ,  f2, f3, f4, f5, f6, fi, andfg,  respectively.  We 
relationship: 
can 
(T3uTq)n(TguT7) e T1nT2  c T5nTg. 
Hence, 
deduce 
L 
This means that,  if  we  know T3, T4, T5, T6, T7  and 
Tg, then  we  do not need to calculate Ti and T2, but can 
obtain  the  above  bounds on  d1,2.  This  can  reduce  the 
computation  time  for  calculating  the  di,j  values  of 
different fault pairs. 
It  is possible  that  calculation  of  the  test  sets forfi, 
...,fg  may be difficult (may take long time).  However, it 
may  be  easier  to  calculate 
the  d i j   values  (using 
simulation  techniques  described  in  Sec.  5 )  for  the  fault 
Pairs V3,f6), V47 f6)3 V5, f6)v V37 fi), V47 fi), V57 fi), V3: 
fg),  V4,  fg), V5, fs).  Then,  the d1,2  value  for  the  fault 
pair Vi, f 2 )  can be approximated in the following way: 
Since,  (T3uTq)n(T6uT7) e T l n T 2  c TgnTg,  we 
(T3nTg)u( T3nT7)u(TqnTg)u( TqnT7)  c 
can  write 
T i n T 2   c TsnT8.  This  implies,  write  max[lT3nTgl, 
IT3nT71, ITqnTgl, ITqnT711 I IT1nT21 I IT5nTgI.  Hence, 
d5,g  5  4 2  5  l-max[(l-d3~9, (1-d3,7), (14,6), (1- 
d4,7)1.  Thus, ds,8  2 d1,2 2 min[&,6,  d3,7, 4 , 6 .  d4,7l. 
Thus, we do not have to explicitly  calculate  the  value of 
d1,2 as long as we  know  the  values of  d3,6, d3,7: d4,6, 
d4,7. 
The  above  illustration  also  holds  for  a  multiple- 
output  combinational  logic  circuit.  Given  a  general 
multiple-output  combinational  logic  circuit,  we  first 
decompose  it  into  maximal  single-output  fanout-free 
regions and calculate the test  sets and error responses for 
the stuck-at faults at the inputs and outputs of  the fanout- 
free regions.  It  follows directly from Theorems 2 and  3 
that  if  a  test  pattern  t  detects  a  fault f inside  a  single- 
output  fanout-free  region  and  produces  an  erroneous 
pattern  e  at  the  output  of 
the  combinational  logic 
network, then t  also detects the stuck-at-0 or the stuck-at- 
1  fault  at  the  output  of  the  fanout-free  region  and 
produces the same erroneous pattern e at the output of  the 
combinational logic network. 
stuck-at  faults  dl0,  el0  and fl0.  Hence,  the  set  of  test 
patterns  that  detect  rl0  is  a  superset  of  the  set  of  test 
patterns that detect any one of dl0, el0 andflO.  If  Tr, Td, 
Te and Tfare the test sets that detect rl0, dl0, el0 andflO, 
respectively, then,  we  can  infer  Tr 2 T e T e u T f   Next, 
consider the.fault x/O.  This fault dominates the fault nlO 
and is equivalent to the fault do.  Thus, if  T, is the set of 
test patterns that detect z/O,  then  T,  3 Tr.  Thus, we  get 
the following supersets and  subsets for Tr: T&TeUTf  c 
 I 
C
,
 14 
I
l
n
f 
h 
k 
Figure 3.2.  A logic network with fanout-free regions 
Consider two implementations NI and N2 of  a single 
output combinational logic circuit  with  n  inputs.  Let us 
consider  two  faults f1  and  f 2   affecting  N1  and  N2, 
28 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:03:47 UTC from IEEE Xplore.  Restrictions apply. 
aIFA"Tvr' 11$ 
i;. $Air 
A i   Bi 
FA"-1 
FA"-2 
C"  S" 
S".1 
Sn-2 
(a) 
0 .
S1 
4 
C, 
Figure 4.1.  Implementation of  a ripple-carry adder.  (a) Ripple Carry adder using full-adder blocks.  (b) Implementation of 
(b) 
a full-adder. 
Table 3.1.  Reduction of the number of fault pairs 
Circuit 
% Reduction 
1
-
cordic 
duke2 
ex1 01 0 
misex2 
misex3 
pdc 
sa02 
seq 
spla 
t481 
table3 
table5 
vg2 
50 
47 
57 
50 
43 
80 
50 
45 
62 
the 
For estimating the potential benefits of  the reduction 
of  fault  pairs.  we  present  some  simulation  results  on 
MCNC  benchmark  circuits.  We  synthesized  two 
implementations  of 
true  and 
complemented outputs using  the Sis  tool  [Sentovich 921. 
For  each  benchmark circuit,  we  calculated  the  reduced 
number  of  fault  pairs  obtained  by  considering  stuck-at 
faults at the inputs and outputs of  fanout free sub-circuits 
of  the two implementations.  We calculate the percentage 
reduction in the number of fault pairs to be considered as: 
tables  with 
truth 
(1 - 
Reduced number of  fault pairs 
Total number of  of  fault pairs 
)XlOO% 
The simulation results  in  Table  3.1  show that  in  the 
worst-case  we  obtain  around  40%  (i.e.,  1.6  times) 
reduction  while  in  the  best  case  we  obtain  around  80% 
(i.e., 5 times reduction).  While the number of  fault pairs 
can be  greatly reduced,  the  accuracy  of  the  bounds can 
suffer.  However, the user can control the extent to which 
the reduction must be performed depending on the desired 
accuracy  of  the  bounds.  For  example,  if  the  user  uses 
only fault  equivalence rules  for reduction of  the  number 
of fault pairs, then the bounds will be perfectly accurate. 
4.  Diversity Calculation for Datapath Circuits 
In this section we calculate the value of the D-metric 
like  adders,  priority 
for  different  datapath  circuits 
encoders,  etc.  Our  main  focus  is  on  datapath  designs 
based  on  iterative  logic  networks.  However,  similar 
analysis techniques can be  used for other structures (e.g., 
trees  and  combinations  of  iterative  logic  networks  and 
trees). 
In  this  section,  we  illustrate  the  calculation 
technique  for  ripple-carry  adder. 
Techniques  for 