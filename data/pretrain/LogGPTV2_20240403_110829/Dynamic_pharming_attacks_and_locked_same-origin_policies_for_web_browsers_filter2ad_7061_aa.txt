# Title: Dynamic Pharming Attacks and Locked Same-Origin Policies for Web Browsers

## Authors
- Chris Karlof
- Umesh Shankar
- J. Doug Tygar
- David A. Wagner

### Affiliations
- **Chris Karlof, J.D. Tygar, David Wagner**
  - UC Berkeley, Computer Science
  - Berkeley, CA, USA
  - Email: {ckarlof, tygar, daw}@cs.berkeley.edu
- **Umesh Shankar**
  - Google, Inc.
  - New York, NY, USA
  - Email: umesh.shankar@gmail.com

## Abstract
We introduce a new attack on web authentication, termed dynamic pharming. This attack hijacks DNS and delivers malicious JavaScript to the victim's browser, exploiting DNS rebinding vulnerabilities and the name-based same-origin policy to hijack legitimate sessions post-authentication. The attack is effective regardless of the authentication scheme used. To mitigate dynamic pharming, we propose two locked same-origin policies for web browsers. These policies use X.509 certificates and public keys instead of domain names to enforce access control. We demonstrate how these policies enhance the security of existing mechanisms like client-side SSL and SSL-only cookies. Additionally, we provide a deployability analysis based on a study of 14,651 SSL domains, suggesting that one of our policies can be implemented immediately, while the other can be incrementally deployed using policy files.

## 1. Introduction
Web authentication is vulnerable to a new type of attack called dynamic pharming. In this attack, an adversary hijacks DNS and sends the victim's browser malicious JavaScript, which exploits DNS rebinding vulnerabilities and the name-based same-origin policy to hijack a legitimate session after authentication. This attack is effective against any authentication scheme and allows the attacker to eavesdrop, forge transactions, and sniff secondary passwords.

To counter dynamic pharming, we propose two locked same-origin policies for web browsers. Unlike the legacy same-origin policy, which uses domain names for access control, our policies use servers' X.509 certificates and public keys. We show how these policies enhance the security of client-side SSL and SSL-only cookies, and we analyze their deployability based on a study of 14,651 SSL domains. Our results indicate that one policy can be deployed today, while the other can be incrementally deployed using policy files.

### Categories and Subject Descriptors
- C.2.0 [Computer-Communication Networks]: Security and protection
- H.4.3 [Information Systems Applications]: Communication Applications – Information Browsers

### General Terms
- Security

### Keywords
- Pharming, Web Authentication, Same-origin Policy

## 2. Preliminaries

### 2.1 Threat Models
We consider three classes of adversaries:

- **Phishers**:
  - Control a web server with a public IP address.
  - Send communications (e.g., emails, instant messages) to potential victims.
  - Mount application-layer man-in-the-middle attacks.

- **Pharmers**:
  - All phisher capabilities.
  - Change DNS records for the target site, redirecting the victim to the attacker's IP address.

- **Active Attackers**:
  - All pharmer capabilities.
  - Control internet routing infrastructure.
  - Eavesdrop on all traffic.
  - Mount active, network-layer, man-in-the-middle attacks.

### 2.2 Legacy Same-Origin Policy
The same-origin policy (SOP) in web browsers governs access control among different web objects. It prohibits a web object from one origin from accessing web objects from a different origin. Browsers currently enforce this by checking that the originating host, port, and protocol match. For example, JavaScript on `http://www.foo.com/index.html` can access `http://www.foo.com/other.html` but not `https://www.foo.com/secure.html` (different protocol) or `http://www.xyz.com/index.html` (different host).

However, when an adversary controls the domain name mapping, the legacy SOP does not provide strong isolation between web objects. In dynamic pharming, malicious JavaScript and content from the legitimate server appear to have the same origin, allowing the JavaScript to access the user's authenticated session.

## 3. Dynamic Pharming
Dynamic pharming works by initially delivering a web document containing malicious JavaScript to the victim. The adversary then exploits DNS rebinding vulnerabilities to force the victim’s browser to connect to the legitimate server in a separate window or frame. After the victim authenticates, the malicious JavaScript hijacks the authenticated session. This attack is effective regardless of the authentication mechanism, compromising even the strongest schemes such as passwords, authentication cookies, and client-side SSL.

## 4. Locked Same-Origin Policies
To resist dynamic pharming, we propose two locked same-origin policies:

- **Weak Locked Same-Origin Policy**:
  - Isolates a domain's locked web objects with valid certificate chains from those with invalid chains.
  - Distinguishes a legitimate server using a valid certificate from pharmers using invalid certificates.

- **Strong Locked Same-Origin Policy**:
  - Enforces access control using cryptographic identity (public SSL keys).
  - Compares the public keys associated with locked web objects; access is granted only if they match.

### 4.4 Deployability Analysis
Based on a study of 14,651 SSL domains, we found that the weak locked same-origin policy can replace the legacy SOP with minimal risk of breaking existing websites. The strong locked same-origin policy can be incrementally deployed using policy files, which support flexible server configurations and key updates.

### 4.5 Incremental Deployment
For the strong locked same-origin policy, we propose a simple, backwards-compatible mechanism using policy files. Websites can opt-in by posting a policy file at a well-known location, enabling them to specify how the browser should enforce the policy. This supports self-signed and untrusted certificates, shared subdomain objects, and key updates.

## Conclusion
Dynamic pharming is a significant threat to web authentication. Our proposed locked same-origin policies enhance the security of existing mechanisms and can be deployed with minimal disruption. Future work will focus on further improving these policies and addressing additional security challenges.