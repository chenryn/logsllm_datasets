title:Dynamic pharming attacks and locked same-origin policies for web browsers
author:Chris Karlof and
Umesh Shankar and
J. Doug Tygar and
David A. Wagner
Dynamic Pharming Attacks and Locked Same-origin
Policies for Web Browsers
Chris Karlof, J.D. Tygar, David Wagner
UC Berkeley
Computer Science
Berkeley, CA, USA
{ckarlof,tygar,daw}@cs.berkeley.edu
Umesh Shankar
Google, Inc.
New York, NY, USA
PI:EMAIL
ABSTRACT
1.
INTRODUCTION
We describe a new attack against web authentication, which we call
dynamic pharming. Dynamic pharming works by hijacking DNS
and sending the victim’s browser malicious Javascript, which then
exploits DNS rebinding vulnerabilities and the name-based same-
origin policy to hijack a legitimate session after authentication has
taken place. As a result, the attack works regardless of the authen-
tication scheme used. Dynamic pharming enables the adversary to
eavesdrop on sensitive content, forge transactions, sniff secondary
passwords, etc. To counter dynamic pharming attacks, we propose
two locked same-origin policies for web browsers. In contrast to
the legacy same-origin policy, which regulates cross-object access
control in browsers using domain names, the locked same-origin
policies enforce access using servers’ X.509 certiﬁcates and public
keys. We show how our policies help two existing web authenti-
cation mechanisms, client-side SSL and SSL-only cookies, resist
both pharming and stronger active attacks. Also, we present a de-
ployability analysis of our policies based on a study of 14651 SSL
domains. Our results suggest one of our policies can be deployed
today and interoperate seamlessly with the vast majority of legacy
web servers. For our other policy, we present a simple incremen-
tally deployable opt-in mechanism for legacy servers using policy
ﬁles, and show how web sites can use policy ﬁles to support self-
signed and untrusted certiﬁcates, shared subdomain objects, and
key updates.
Categories and Subject Descriptors
C.2.0 [Computer-Communication Networks]: General – Secu-
rity and protection; H.4.3 [Information Systems Applications]:
Communication Applications – Information Browsers
General Terms
Security
Keywords
Pharming, Web Authentication, Same-origin Policy
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’07, October 29–November 2, 2007, Alexandria, Virginia, USA.
Copyright 2007 ACM 978-1-59593-703-2/07/0010 ...$5.00.
Phishing is a social engineering attack in which an adversary
lures an unsuspecting Internet user to a web site posing as a trust-
worthy business with which the user has a relationship [3]. The
broad goal is identity theft; phishers try to fool web visitors into
revealing their login credentials, sensitive personal information, or
credit card numbers with the intent of impersonating their victims
for ﬁnancial gain. In a more advanced phishing attack known as
pharming [53], the adversary subverts the domain-name lookup
system (DNS), which is used to resolve domain names to IP ad-
dresses. In this attack, the DNS infrastructure is compromised so
that DNS queries for the victim site’s domain (say, google.com)
return an attacker-controlled IP address. This can be accomplished
via several techniques, including DNS cache poisoning and DNS
response forgery. Pharming attacks are particularly devious be-
cause the browser’s URL bar will display the domain name of the
legitimate site, potentially fooling even the most meticulous users.
Although pharming attacks have been relatively rare in prac-
tice, evidence suggests they may become a more serious threat in
the near future. Recent research has exposed complex and sub-
tle dependencies between names and name servers [59], suggest-
ing the DNS infrastructure is more vulnerable to DNS poisoning
attacks than previously thought. The ubiquity of public wireless
access points and wireless home routers introduces new pharm-
ing threats. Users are becoming accustomed to accessing wire-
less routers in airports, restaurants, conferences, libraries, and other
public spaces. Adversaries can set up malicious wireless routers
in these areas that offer free Internet access but redirect users to
spoofed web sites [2]. Also, many users leave the default pass-
word and security settings on their home wireless home routers un-
changed [66]. This enables warkitting attacks [72, 73], a combina-
tion of wardriving and rootkitting, where an adversary maliciously
alters a router’s conﬁguration over a wireless connection. A related
attack is drive-by pharming [70], where a malicious web site serves
content which scans a visitor’s internal network and compromises
home routers with default passwords. After the adversary has com-
promised the victim’s router, she can change the DNS settings or
overwrite the ﬁrmware to redirect the victim’s requests.
We describe a new type of DNS attack against web authentica-
tion we call dynamic pharming. In a dynamic pharming attack, the
adversary initially delivers a web document containing malicious
Javascript code to the victim, and then exploits DNS rebinding vul-
nerabilities in browsers to force the victim’s browser to connect to
the legitimate server in a separate window or frame. The adver-
sary waits for the victim to authenticate herself to the legitimate
server, and then uses the malicious Javascript to hijack the victim’s
authenticated session.
58Policy
Legacy SOP
Weak locked SOP
Strong locked SOP
(w/ policy ﬁles)
Information used to enforce access Locked web objects
Shared locked web objects Untrusted certs
Strongest threat model protected against for:
(protocol,domain,port)
(protocol,domain,port,
validity of cert chain)
(protocol,domain,port,
server public key)
phishers
active attackers
phishers
phishers
phishers
phishers
active attackers
active attackers
active attackers
Table 1: Comparison of our locked same-origin policies with the legacy same-origin policy. This table shows the strongest threat
model under which each policy can isolate a legitimate server’s web objects (e.g., cookies, HTML documents, etc.) from adversaries.
Locked web objects refer to objects retrieved over SSL. Shared locked web objects refer to objects retrieved over SSL which are
intended to be shared among subdomains of a higher-level domain (e.g., domain cookies). Untrusted certs refer to a legitimate server
using a self-signed certiﬁcate or a certiﬁcate issued by a root CA untrusted by browsers.
Dynamic pharming takes advantage of how browsers currently
implement the same-origin policy. The same-origin policy pro-
hibits a web object from one site from accessing web objects served
from a different site. Browsers currently enforce this by checking
that the two objects’ originating domain names, ports, and proto-
cols match. However, when an adversary controls the domain name
mapping, the legacy same-origin policy does not provide strong
isolation between web objects co-executing in a user’s browser. In
a dynamic pharming attack, malicious Javascript from the pharmer
and content from the legitimate server both appear to have the same
“origin” (i.e., same domain, port, and protocol), and the browser
allows the Javascript to access to the user’s authenticated session.
As a result, the attacker can gain complete control of the session,
enabling her to eavesdrop on sensitive content, forge transactions,
sniff secondary passwords, etc. Since dynamic pharming hijacks
users’ sessions after authentication completes, irrespective of the
authentication mechanism, it can be used to compromise even the
strongest web authentication schemes currently known, including
passwords, authentication cookies, and client-side SSL. We present
dynamic pharming in more detail in Section 3.
1.1 The locked same-origin policies
Since dynamic pharming hijacks a user’s session after initial au-
thentication completes, it is unlikely any future web authentication
protocol developed for currently deployed browsers will resist dy-
namic pharming either. To resist dynamic pharming, we must ad-
dress the root of the problem: we must upgrade the browser’s same-
origin policy. We propose two locked same-origin policies: instead
of comparing domain names to enforce access control, our policies
enforce access control for web objects retrieved over SSL by using
servers’ public keys and X.509 certiﬁcates. We refer to web ob-
jects retrieved over SSL as locked web objects because the browser
can clearly associate the public key and X.509 certiﬁcate of server
hosting the object with the object. Our ﬁrst proposal, the weak
locked same-origin policy, isolates a domain’s locked web objects
with valid certiﬁcate chains from objects with invalid chains. This
enables browsers to distinguish a legitimate server using a valid cer-
tiﬁcate from pharmers using invalid certiﬁcates, such as self-signed
certiﬁcates or certiﬁcates with CN/domain mismatches. Our sec-
ond proposal, the strong locked same-origin policy, enforces access
control using cryptographic identity, namely web sites’ public SSL
keys. In the strong locked same-origin policy, the browser com-
pares the public keys it associates with locked web objects; access
in granted only if they match. We present our locked same-origin
policies in more detail in Section 4 and show a comparison with the
legacy same-origin policy in Table 1.
sary foundation for developing pharming resistant authentication.
We show how our policies help two existing web authentication
mechanisms, client-side SSL and SSL-only cookies, resist pharm-
ing and stronger attacks. In addition, we evaluate our policies in
terms of deployability, meaning how well they interoperate with
existing web servers. Based on the results of a study of 14651 SSL
domains, we found strong evidence that the weak locked same-
origin policy can replace the legacy same-origin policy today with
minimal risk of breaking existing web sites (Section 4.4).
Although we did not ﬁnd similar evidence for the strong locked
same-origin policy, we propose a simple, incrementally deployable
and backwards compatible mechanism for web sites to opt-in using
policy ﬁles (Section 4.5). To opt-in, we propose a web site posts a
policy ﬁle at a static well-known ﬁle name, say pk.txt, which en-
ables a web site to specify how it would like the browser to enforce
the strong locked same-origin policy. Policy ﬁles also support ﬂex-
ible server conﬁgurations and key updates. In contrast to the weak
locked same-origin policy, the strong locked same-origin policy has
better security properties, is compatible with sites using self-signed
or untrusted certiﬁcates, and supports subdomain object sharing.
The locked same-origin policies are similar to work done inde-
pendently and concurrently by Masone et al. on Web Server Key
Enabled Cookies, a new browser policy for protecting authentica-
tion cookies against pharming attacks [41]. However, their pro-
posal falls short of protecting cookies against dynamic pharming
attacks. Also, they do not address pharming attacks against other
web objects or other web authentication mechanisms, e.g., client-
side SSL, nor do they address subdomain object sharing or key up-
dates.
2. PRELIMINARIES
2.1 Threat models
We consider three broad classes of adversaries, classiﬁed accord-
ing to their capabilities.
Phishers. We assume a phisher has the following capabilities:
• Complete control of a web server with a public IP address.
We assume a phisher uses a different domain name from the
target domain.
• The ability to send communications such as emails and in-
stant messages to potential victims.
• Mount application-layer man-in-the-middle attacks, represent-
ing a legitimate server to the victim and proxying input from
the victim to the real server as needed.
We show how our policies substantially increase browsers’ re-
sistance to pharming attacks and provide both a solid and neces-
There have been relatively few documented cases of application-
layer man-in-the-middle attacks [21, 56, 57], most likely because
of the extra effort required to implement the attack. However, re-
searchers have recently discovered a “Universal Man-in-the-Middle
Phishing Kit” [40], a hacker toolkit which enables a phisher to eas-
ily set up a MITM proxy attack against any site she wishes.
Pharmers. An attacker with pharming capability has all the abili-
ties of a phisher, plus
• The ability to change DNS records for the target site, such
that the victim will resolve the target site’s name to the at-
tacker’s IP address.
In practice, such an attack might work through DNS poisoning,
spoofed DNS responses, modifying a user’s /etc/hosts ﬁle,
tricking a user to modify her DNS settings, or by social engineer-
ing attacks against a domain name registry. We assume the server
under the pharmer’s control does not have the same IP address as
the victim and cannot receive packets destined to the victim’s IP
address.
Active attackers. An active attacker has all the abilities of a pharmer,
plus
• The ability to control the Internet routing infrastructure and
re-route trafﬁc destined to particular IP addresses.
• Eavesdrop on all trafﬁc.
• Mount active, network-layer, man-in-the-middle attacks.
To date, phishers have been by far the most prevalent class of at-
tacker; however, looking to the future, pharmers and active attack-
ers are a growing threat [2, 59, 70, 72, 73], and it seems prudent to
defend against these more powerful attackers as well, to the extent
possible.
2.2 The legacy same-origin policy
The same-origin policy (SOP) in web browsers governs access
control among different web objects and prohibits a web object
from one origin from accessing web objects from a different ori-
gin [51]. By web objects, we mean HTTP cookies, HTML doc-
uments, images, Javascript, CSS ﬁles, XML ﬁles, etc. A common
example of “access” is Javascript referencing another object. There
are a few situations our work does not address, and we discuss these
in Section 4.10. In the remainder of this paper, we will use “SOP”
as an abbreviation for “same-origin policy”.
Browsers currently consider two objects to have the same
origin if the originating host, port, and protocol are the same
for both web objects.
For example, Javascript executing on
http://www.foo.com/index.html is allowed to access
http://www.foo.com/other.html, but
is not allowed
to access https://www.foo.com/secure.html (different
protocol) or http://www.xyz.com/index.html (different
host). Other examples of “web object accesses” subject to the SOP
include determining which cookies to append to an HTTP request,
Javascript document.cookie references, and XMLHTTPRe-
quest.
Note there is a distinction between “access” and “causing to
load”. After the browser receives an HTML page, it processes de-
pendent requests necessary to render the page, such as images, style
sheets, etc. These requests can cause the browser to fetch and load
a web object from a different domain. However, these requests are
not considered violations of the SOP. The document can read cer-
tain metaproperties of the object (e.g., height, width), but the SOP