 
!

Fig. 4. Visualization of how coverage-guided tracing augments the workÔ¨Çow of a conventional coverage-guided grey-box fuzzer (e.g., AFL [5]). Coverage-guided
tracing can also be similarly adapted into coverage-guided white-box fuzzers (e.g., Driller [18]).
we show that two coverage-guided fuzzers of different type‚Äî
AFL (‚Äúblind‚Äù) and Driller (‚Äúsmart‚Äù)‚Äîboth spend the majority
of their time executing/tracing non-coverage-increasing test
cases. Coverage-guided tracing aims to trace fewer test cases
by restricting tracing to only coverage-increasing test cases.
for this exist
in literature [43], [44], [45], and tools like
angr [46] and Dyninst [25] can also accomplish this via static
analysis. Inserting interrupts is trivial, but bears two caveats:
Ô¨Årst, while any interrupt signal can be used, it should avoid
conÔ¨Çicts with other signals central
those
related to crashes or bugs); second, interrupt instruction size
must not exceed any candidate basic block‚Äôs size (e.g., one-
byte blocks cannot accommodate two-byte interrupts).
to fuzzing (e.g.,
A. Overview
C. Tracing
Coverage-guided tracing derives coverage-increasing test
cases‚Äô full coverage through a separate, tracing-only version of
the target. As interest oracles rely on block-level binary mod-
iÔ¨Åcations, code coverage tracing must also operate at block-
level. Currently, block-level tracing can support either block
coverage [7], or‚Äîif all critical edges are mitigated‚Äîedge
coverage [4], [6]. Thus, coverage-guided tracing is compatible
with most existing tracing approaches.
D. Unmodifying
Coverage-guided tracing‚Äôs unmodify routine removes ora-
cle interrupts in newly-covered basic blocks. Given a target
binary, an interest oracle, and a list of newly-covered basic
blocks, unmodifying overwrites each block‚Äôs interrupt with the
instructions from the original target binary.
E. Theoretical Performance Impact
Over time, a growing number of coverage-increasing test
cases causes more of the oracle‚Äôs basic blocks to be unmodiÔ¨Åed
(Figure 5)‚Äîthus reducing the dissimilarity between oracle
and target binaries. As the oracle more closely resembles the
target, it becomes less likely that a test case will be coverage-
increasing (and subsequently traced). Given that non-coverage-
increasing test cases execute at the same speed for both the
original and the oracle binaries, as fuzzing continues, coverage-
guided tracing‚Äôs overall performance approaches 0% overhead.
V.
IMPLEMENTATION: UNTRACER
Here we introduce UnTracer, our
implementation of
coverage-guided tracing. Below, we offer an overview of
UnTracer‚Äôs algorithm and discuss its core components in detail.
A. UnTracer Overview
UnTracer is built atop a modiÔ¨Åed version of the coverage-
guided grey-box fuzzer, AFL 2.52b [5], which we selected
due to both its popularity in the fuzzing literature [47], [18],
[48], [8], [31], [24], [9], [49] and its open-source availability.
Our implementation consists of 1200 lines of C and C++
(cid:24)(cid:26)(cid:18)
Coverage-guided tracing introduces an intermediate step
between test case generation and code coverage tracing: the
interest oracle. An interest oracle is a modiÔ¨Åed version of the
target binary, where a pre-selected software interrupt is inserted
via overwriting at the start of each uncovered basic block.
Interest oracles restrict tracing to only coverage-increasing test
cases as follows: test cases that trigger the oracle‚Äôs interrupt
are marked coverage-increasing, and then traced. As new
basic blocks are recorded, their corresponding interrupts are
removed from the oracle binary (unmodifying)‚Äîmaking it
increasingly mirror the original target. As this process repeats,
only test cases exercising new coverage trigger the interrupt‚Äî
thus signaling them as coverage-increasing.
As shown in Figure 4, coverage-guided tracing augments
conventional coverage-guided fuzzing by doing the following:
Determine Interesting: Execute a generated test case
against the interest oracle. If the test case triggers the
interrupt, mark it as coverage-increasing. Otherwise,
return to step 1.
Full Tracing: For every coverage-increasing test
case, trace its full code coverage.
Unmodify Oracle: For every newly-visited basic
block in the test case‚Äôs coverage, remove its corre-
sponding interrupt from the interest oracle.
Return to step 1.
1)
2)
3)
4)
B. The Interest Oracle
In coverage-guided tracing, interest oracles sit between test
case generation and coverage tracing‚Äîacting as a mechanism
for Ô¨Åltering-out non-coverage-increasing test cases from being
traced. Given a target binary, an interest oracle represents a
modiÔ¨Åed binary copy with a software interrupt signal over-
writing the start of each basic block. A test case is marked
coverage-increasing if it triggers the interrupt‚Äîmeaning it
has entered some previously-uncovered basic block. Coverage-
increasing test cases are then traced for their full coverage,
and their newly-covered basic blocks are unmodiÔ¨Åed (interrupt
removed) in the interest oracle.
Interest oracle construction requires prior identiÔ¨Åcation of
the target binary‚Äôs basic block addresses. Several approaches
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:42:59 UTC from IEEE Xplore.  Restrictions apply. 

	

	




















	





	
























	



















Fig. 5. An example of the expected evolution of a coverage-guided tracing
interest oracle‚Äôs basic blocks alongside its original source code. Here, INT
denotes an oracle interrupt. For simplicity, this diagram depicts interrupts as
inserted; however, in coverage-guided tracing, the interrupts instead overwrite
the start of each basic block. Unmodifying basic blocks consists of resetting
their interrupt-overwritten byte(s) to their original values.
code. UnTracer instruments two separate versions of the target
binary‚Äîan interest oracle for identifying coverage-increasing
test cases, and a tracer for identifying new coverage. As AFL
utilizes a forkserver execution model [50], we incorporate this
in both UnTracer‚Äôs oracle and tracer binaries.
Algorithm 1 shows the steps UnTracer takes, as integrated
with AFL. After AFL completes its initial setup routines
(e.g., creating working directories and Ô¨Åle descriptors) (line
1), UnTracer instruments both the oracle and tracer binaries
(lines 2‚Äì3); the oracle binary gets a forkserver while the tracer
binary gets a forkserver and basic block-level instrumentation
for coverage tracing. As the oracle relies on block-level soft-
ware interrupts for identifying coverage-increasing test cases,
UnTracer Ô¨Årst identiÔ¨Åes all basic blocks using static analysis
(line 5); then, UnTracer inserts the interrupt at the start of every
basic block in the oracle binary (lines 6‚Äì8). To initialize both
the oracle and tracer binaries for fuzzing, UnTracer starts their
respective forkservers (lines 9‚Äì10). During AFL‚Äôs main fuzzing
loop (lines 11‚Äì23), UnTracer executes every AFL-generated
test case (line 12) on the oracle binary (line 13). If any test case
triggers an interrupt, UnTracer marks it as coverage-increasing
(line 14) and uses the tracer binary to collect its coverage
(line 15). We then stop the forkserver (line 16) to unmod-
ify every newly-covered basic block (lines 17-19)‚Äîremoving
their corresponding oracle interrupts; this ensures only future
test cases with new coverage will be correctly identiÔ¨Åed as
coverage-increasing. After all newly-covered blocks have been
unmodiÔ¨Åed, we restart the updated oracle‚Äôs forkserver (line
20). Finally, AFL completes its coverage-increasing test case
handling routines (e.g., queueing and prioritizing for mutation)
(line 21) and fuzzing moves onto the next test case (line 12).
Figure 6 depicts UnTracer‚Äôs architecture.
B. Forkserver Instrumentation
During fuzzing, both UnTracer‚Äôs oracle and tracer binaries
are executed many times; the oracle executes all test cases
to determine which are coverage-increasing and the tracer
executes all coverage-increasing test cases to identify new
Algorithm 1: The UnTracer algorithm integrated in AFL.
Input: P : the target program
Data: b: a basic block
B: a set of basic blocks
i: an AFL-generated test case
Œ¶: the set of all coverage-increasing test cases
1 AFL SETUP()
// Instrument oracle and tracer binaries
2 PO ‚Üê INSTORACLE(P )
3 PT ‚Üê INSTTRACER(P )
// Find and modify all of oracle‚Äôs blocks
4 B = ‚àÖ
5 B ‚Üê GETBASICBLOCKS(P )
6 for b ‚àà B do
7
8 end
MODIFYORACLE(b)
// Start oracle and tracer forkservers
9 STARTFORKSERVER(PO)
10 STARTFORKSERVER(PT )
// Main fuzzing loop
11 while 1 do
12
13
i ‚Üê AFL WRITETOTEST CASE()
if PO(i) ‚Üí INTERRUPT then
// The test case is coverage-increasing
Œ¶.ADD(i)
// Trace test case‚Äôs new coverage
Btrace ‚Üê GETTRACE(PT (i))
// Kill oracle before unmodifying
STOPFORKSERVER(PO)
// Unmodify test case‚Äôs new coverage
for b ‚àà Btrace do
end
// Restart oracle before continuing
STARTFORKSERVER(PO)
AFL HANDLECOVERAGEINCREASING()
UNMODIFYORACLE(b)
14
15
16
17
18
19
20
21
22
23 end
end
coverage. In implementing UnTracer, we aim to optimize
execution speeds of both binaries. Like other AFL tracers,
UnTracer incorporates a forkserver execution model [50] in its
tracer binary, as well as in its oracle binary. By launching new
processes via fork(), the forkserver avoids repetitive process
initialization‚Äîachieving signiÔ¨Åcantly faster speeds than tradi-
tional execve()-based execution. Typically, instrumentation
Ô¨Årst inserts a forkserver function in a binary‚Äôs .text region,
and then links to it a callback in the Ô¨Årst basic block of function
. In the tracer binary, we already use Dyninst‚Äôs static
binary rewriting for black-box binary instrumentation, so we
use that same technique for the forkserver.
For the oracle binary, our initial approach was to instru-
ment it using Dyninst. Unfortunately, preliminary evaluations
revealed several performance problems.3 Since the oracle
executes every test case, it is performance critical. To avoid
Dyninst‚Äôs limitations, we leverage AFL‚Äôs assembly-time instru-
mentation to insert the forkserver in the oracle binary, since it
closely mimics the outcome of black-box binary rewriters.
C. Interest Oracle Binary
The oracle is a modiÔ¨Åed version of the target binary that
adds the ability to self-report coverage-increasing test cases
through the insertion of software interrupts at the start of
3We made Dyninst developers aware of several performance issues‚Äî
speciÔ¨Åcally, excessive function calls (e.g., to __dl_relocate_object)
after exiting the forkserver function. While they conÔ¨Årmed that this behavior
is unexpected, they were unable to remedy these issues before publication.
(cid:24)(cid:26)(cid:19)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:42:59 UTC from IEEE Xplore.  Restrictions apply. 




 
		

"

	

	
		

!

#	


	
		







		

Fig. 6. UnTracer‚Äôs workÔ¨Çow. Not shown is test case generation, or starting/stopping forkservers.
each uncovered basic block. Thus, if a test case triggers the