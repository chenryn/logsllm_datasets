## Feature request
add "hot module introspection"  
as a feedback channel from browser to editor
**situation in my code editor**
    class Class1 {constructor() {this.key1 = 'val1'}};
    class Class2 {constructor() {this.key2 = 'val2'}};
    obj1 = new Class1();
    obj2 = new Class2();
    obj1.k
    //    ^
    //    at this point i want "hot code completion" in my code editor
    //    so only "key1" is suggested, but not "key2"
    // code introspection at runtime
    Object.keys(obj1)
    // = [ 'key1' ]
    // the node.js shell can do it
    obj1.k
    //    ^
    //    the tab-key does the right completion to "key1"
**Ideal?**
**What is the expected behavior?**
    obj1.k
    //    ^
    //    at this point i want "hot code completion" in my code editor
    //    so only "key1" is suggested, but not "key2"
as far as i know  
all code editors fail at this point of "dynamic code analysis"  
the best they can offer is: `key1` or `key2`
vscode and eclipse do this by default  
vscode calls this "intellisense text suggestions"
but i dont want to be limited by "static code analysis"  
when the program is started anyway, after every file change
**Solution?**
**How should this be implemented in your opinion?**
extend the "hot module replacement" system  
to feed back "hot module introspection" data to the editor
![js-webpack-hmr--hot-module-introspection-feedback](https://user-
images.githubusercontent.com/12958815/70218504-613f2f80-1743-11ea-9d66-a725eb8b558f.jpg)
this introspection-data can be sent over http  
so the editor has a keep-alive connection  
and is waiting for the server to push new introspection data
.... or use the browser as code editor, using CodeMirror  
and show the program inside a frame, like on jsfiddle.net  
[ the code completion function of codemirror seems broken to me ]
the data format should be optimized for machine-readability  
for example by using length-prefixed lists and strings,  
like in BSON, messagepack, python-pickle, EXI, flatbuffers, ....
in an ideal world, the javascript runtime does offer a fast way  
to access the "internal representation" of the running program
**limits**
introspection requires a valid program,  
so you must have a running "last version"  
to provide introspection data for your not-running "current version"
**potential problems**
circular references must be detected and handled  
like `object.child.parent.child.parent.child`....
**related**
recursive introspection in javascript
get inherited properties of javascript objects
VS Code to autocomplete JavaScript class 'this' properties automatically  
\-- "doesn't work too well if you bind things to the class at runtime"
the ahaa moment of hot reloading in clojurescript/figwheel, by bruce hauman
**Why?**
**What is motivation or use case for adding/changing the behavior?**
this allows for "zero knowledge programming"
let the machine do the boring-precise part of  
"how did i call this property? where is it hidden?"  
and focus on the creative-fuzzy part of  
"let me just add something like ...."
this also makes it much easier to learn new libraries.  
instead of depending on good documentation,  
you can make full use of the existing introspection functions.
for "distant properties" who are hidden in child/parent objects,  
you can browse a "map of properties", like a mind-map.
also, why not? : P
**Are you willing to work on this yourself?**
no, not today.  
i hope that the "insider people" can solve this much faster than me  
and i can avoid digging into unfamiliar projects
**more keywords**
code hinting, runtime analysis, dynamic analysis, runtime introspection, live
object introspection, hierarchy of variable names, javascript object graph