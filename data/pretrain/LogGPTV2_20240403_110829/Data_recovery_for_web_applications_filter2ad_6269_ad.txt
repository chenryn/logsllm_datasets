policy tainted 
The program-row 
requests 
When different 
causing 
the finer-grained 
the poll data during voting. 
same poll, their sessions 
itives. 
To our surprise, 
did not reduce the false positives 
much, even though the ses­
sion update was a blind write. Our investigation 
this update was using a tainted 
got tainted 
revealed 
that 
the user id) that 
data. 
program-field 
value, (i.e., 
request 
were related 
when the initial 
All false positives 
The database-row 
policy marked the queries 
information 
Reverting 
updated the session 
policy marked queries in many re­
quests to be tainted. 
to 
the sessions and users table. On the other hand, the 
database-field 
that updated the 
number of votes in the polLchoices table, but not the 
about who has voted into the 
queries 
inserting 
the effects of only the updates 
po 1 L vot e s table. 
would create an inconsistency 
in the application, 
polLvotes table would have duplicate 
Discussion: 
sessions, history and watchdog tables. 
row policy still produced 
many false positives 
table because of the updates 
In contrast, 
the field-level 
as the update is a blind write, 
field. 
the taint for this field, 
in no false positives. 
to the access timestamp 
After examining 
The request­
policy resets 
resulting 
entries. 
because the 
via the users 
our logs, we whitelisted 
The second and third rows in Table 2 show that the same 
policies 
dependency 
positives, 
tion. This shows that the nature of the bug plays an important 
produce different 
even though the scenarios 
in terms of false 
the same applica­
involve 
results 
These false positives 
The program-row 
policy reduces 
the number of false pos­
taint 
than the renamed 
tainting 
prevents 
granularity. 
When the ad­
to the options table. 
adds links with other categories 
because data flow at the program-level 
itives, 
from spreading 
are caused by the row-level 
ministrator 
one (i.e., {caL2,  caL3 }), these operations 
because each of these categories 
the renamed category, 
{old_caLl, caL3 }, causing 
grained program-field 
no false negatives. 
recognizing 
the addition 
caL3 } as independent 
tives are caused, 
sociated 
used with 
such as {old_caLl, caL2 } and 
The finer­
and 
of links associated 
of old_caLl. The six false posi­
improves 
with {caL2, 
with old_caLl and updated 
because these requests 
were previously 
false positives. 
Field-level 
added new links as­
a link belonging 
to it. 
policy has fewer false positives 
tainting 
get tainted, 
accuracy, 
in the term_taxonomy table. The database-row 
when another 
because 
Wordpress 
associates 
a new link with a category 
in three 
is in­
previously 
because it reads 
to  a category 
between the link and the category 
for the number of links associated 
oper­
it did 
only the update opera­
in the application, 
row that was tainted 
with old_caLl was added. The insert 
because 
steps: 1) the relation 
serted into the term_relationships table. 2) this table 
is queried 
with the cate­
gory. 3) this number is used to update the count field ofthe 
category 
policy only marks the third step as tainted, 
the category's 
link associated 
ation in the first step was not marked as tainted, 
not read any tainted 
rows. Reverting 
tion will cause an inconsistency 
the actual number of links belonging 
term_relationships table will not match the count 
value in term_taxonomy table. In contrast, 
field policy misses all other related 
tionship 
overwritten 
field-level 
ever, a database-level 
Discussion: 
The addition 
old_caLl and updating 
may be considered 
quest because of the explicit 
requests 
ship). However, 
date. In this case, choosing 
trivial, 
we provide 
results 
help the administrator 
policy can have false negatives. 
of the links associated 
with 
this would lose the new links and the up­
action is non­
its taint. Exploiting 
to break dependencies 
for different 
make an informed 
policies, 
decision 
and thus, 
about the 
with that category), 
steps (Le., creating 
data dependency 
is desirable; 
as dependent 
on the initial 
an existing 
blind writes via 
resetting 
the correct 
tainting 
detailed 
recovery 
between the 
(i.e., 
a rela­
in the 
how­
because the count is blindly 
old_caLl's id is used to create the relation­
the database­
because this problem is application-specific. 
Instead, 
link in this  category 
corrupting 
re­
978-1-4244-7501-8/10/$26.00 
©2010 IEEE 
88 
DSN 20lO: Akku & Goel 
role on determining 
and thus, the correct 
ministrator 
each policy and how they generate 
by providing 
detailed 
what kind of dependencies 
recovery 
actions. 
results 
We can help the ad­
and analysis 
the dependencies. 
really exist 
logs for 
4.2.4 Gallery2: 
Remove Permissions 
Breaks Application 
data. For entities, 
An 
to view the 
picture, 
pictures 
Gallery2 
stopping 
actions: 
and making 
additions 
access control 
permissions 
sub-albums' 
album) inserted 
into the database 
capabilities 
(e.g., 
the application 
to the corruption. 
uses a global sequence 
An administrator 
The administrator 
to view the entire gallery. 
a ChildEntity table stores the re­
Restore 
considers 
mechanism. 
view) for 
has a fine-grained 
can assign various 
or whole albums to specific 
temporarily 
entirely 
no longer available. 
users and groups. 
removes other users' 
She then creates 
sub­
Gallery2 
administrator 
specific 
Scenario: 
permissions 
albums under the main album, and adds users and groups. 
After she logs out, a bug [9] causes the application 
to show an 
error message, 
the web interface 
Correct recovery 
gallery. 
irrelevant 
Background: 
item (e.g., 
this id their primary key in their respective 
the last value in the Sequenceld table. A global 
table stores each item and its associated 
such as sub-albums, 
lationships. 
associating 
Results: 
as tainted. 
request 
at the beginning 
program-field 
to Drupal, 
is propagated 
session 
with the initial 
when it is read 
and the 
also have many false positives. 
Similar 
session 
data 
and is used to update the 
spreading 
the taint. 
to the 
The ses­
id for every 
making 
tables. 
It stores 
Entity 
The table SessionMap tracks open sessions, 
each session 
however, 
functionality 
policy marks the update queries 
SessionMap and Sequenceld tables as tainted. 
sion data may be considered 
and ignored 
recovery; 
the sequence 
for correct 
an item will increment 
verted back to its original 
item being inserted 
another 
since the same id is already 
of 
id. If this value is re­
a new 
to 
of the application. 
the sequence 
state before the corruption, 
assigned 
behaviour, 
and the taint is spread to other requests 
policy marks almost every request 
data at the end of the request, 
with the corresponding 
user's id. 
will get an  id that is already 
item. This will certainly 
in use in the En tit Y table. 
The database-row 
the user id retrieved 
data becomes tainted 
The program-row 
The request-row 
Every insertion 
cause undesired 
of each request. 
from the tainted 
the request 
are important 
update queries 
throughout 
The session 
temporary 
policies 
during 
in this case is also application­
One may argue that these requests 
are really 
depen­
is used to insert new entries 
resulting 
in false positives. 
to the 
Choosing 
actions 
recovery 
request, 
by the initial 
ChildEntity table, 
the correct 
specific. 
dent, because viewing sub-albums 
album is not accessible. 
be dependent 
sions from the parent (i.e., 
positives 
vide enough information 
ministrator 
database-level 
verting 
on the first request 
is small and manageable. 
can decide for the correct 
policies 
Thus, sub-albums' 
is prevented 
if the parent 
should 
that removed the permis­
main) album. The number of false 
additions 
Also, our replay logs pro­
on how taint spreads, 
recovery 
actions. 
not only had false positives, 
so that the ad­
The 
but re­
them caused the inconsistency 
given in Table 3. 
4.3 Performance 
We report our system's 
performance 
and disk space re­
We mea­
of our monitors. 
overhead 
and logging 
benchmark. 
using the TPC-W industry 
quirements 
sure the throughput 
The server was an Intel Pentium 4 2.80 GHz with dual CPU 
on Ubuntu Linux 8.04 with Apache 2.2.8 running 
mode. Both CPU's were saturated 
running on an Intel Pentium 4 3.0 GHz with 4 CPU's. Both 
machines 
of at least 15 runs each lasting 
using 100 emulated 
were connected 
30 minutes. 
in pre-fork 
clients 
via a 1 Gb link. We report averages 
4.3.1 Throughput 
Overhead 
overhead 
them separately 
To measure the throughput 
tests by enabling 
The results 
curs a maximum of 4% overhead 
when both monitors 
by our PHP instrumentation, 
can be found in Table 4. Our instrumentation 
in­
in throughput 
and latency, 
are on. The overhead 
is mostly caused 
of our monitors, 
we ran 
and both of them together. 
which can be further 
optimized. 
improves performance 
Our database 
(compare 
slightly 
cause our monitor disables 
formation 
of committed 
instrumentation 
the first and second rows in Table 4), be­
purge of the undo in­
the periodic 
transactions. 
For details, 
see [18]. 
2010 IEEEIIFIP International 
Conference 
on Dependable Systems 
& Networks (DSN) 
Table 4. Throughput and latency overhead 
Monitors  Throughput (reqJsec) Latency (ms) 
Enabled 
None 
MySQL 
31.50 (-0.61%) 3614 (-0.62%) 
PHP 
29.55 (5.62%) 3853 (5.95%) 
PHP& MySQL  30.06 (3.99%) 3787 (4.12%) 
and Overhead  and Overhead 
31.31(0)  3637 (0) 
4.3.2 Disk Space Overhead 
On the other hand, the database-field 
policy only marks 
as the old value of the field is read 
data is reset with 
because this 
The used value cannot be tainted, 
id updates, 
The taint for the session 
the sequence 
during the update. 
a blind write. 
policy does not propagate 
Discussion: 
SessionMap and Sequenceld tables, 
ducing the false positives. 
child relationship  between 
sub-albums. 
The id of the main gallery, 
The rest is caused by the parent­
and the added 
the main gallery 
the taint throughout 
the request. 
We examined our logs and whitelisted 
significantly 
the 
re­
which was tainted 
and modified rows 
the undo log purge, 
arises from disabling 
(3.08 KB  for the PHP log) for TPC-W, totaling 
and the PHP log. The logs take about 4 KB 
the mapping between transactions 
The disk overhead 
keeping 
in the database 
per request 
196 MB for a 30 minute run (9.19 GB per day). Compress­
ing the PHP log reduces 
250 GB disk can save logs of about 104 days. Given current 
disk capacities, 
is acceptable 
providing 
the log size to 2.23 GB per day. A 
that this overhead 
we believe 
recovery 
a generic 
system for web applications. 
for 
978-1-4244-7501-8/10/$26.00 
©201O IEEE 
89 
DSN 2010: Akku & Goel 
20lO IEEEIIFIP International 
Conference 
on Dependable Systems 
& Networks (DSN) 
5 Conclusion 
can 
store data at 
A web application 
bug causing 
data loss or corruption 
re­
software. 
that helps administrators 
Our system tracks and correlates 
across multiple 
the design of a recov­
tiers of the application 
affect many users, because these applications 
the server side. We have described 
ery system for web applications 
cover from data corruption. 
requests 
changes to existing 
recovery 
Our evaluation 
cluding our proposed 
how they allow an administrator 
recover 
prototype 
generic 
overhead 
to successfully 
scenarios 
the correct 
compared various 
in data 
set of dependent 
schemes, 
dependency 
scheme, and showed 
and 
and real bugs. Our 
with MySQL and PHP shows that 
and no modifications 
tainting-based 
implementation 
functionality 
is determining 
A significant 
data recovery 
can be obtained 
with little 
to the web applications. 
corruption 
from various 
requests. 
challenge 
with modest 
diagnose 
in­
[20]  P. 
T. Barham, A. Donnelly, 
and R. Mortier. 
ing Magpie for request 
In 
Proceedings of the Operating Systems Design and Implemen­
tation (OSDI), pages 259-272, 
extraction 
and workload 
R. Isaacs, 
2004. 
Us­
modelling. 
[21] A. B. Brown and D. A. Patterson. 
e-mail store. 
ing an undoable 
Technical Conference, pages 1-14, June 2003. 
In Proceedings of the USENIX 
Undo for operators: 
Build­
[22] A. Chanda, K. Elmeleegy, 
A. L. Cox, and W. Zwaenepoel. 
Causeway: 
tion of Web-Accessible 
Support 
Applications. 
for Controlling 
and Analyzing 
the Execu­
In Middleware, 2005. 
and 
In 
[23] T.-C. Chiueh and D. Pilania. 
Design, implementation, 
of a repairable database management system. 
evaluation 
Proceedings of the Annual Computer Security Applications 
Conference, pages 179-188, 2004. 
[24] A. Goel, K. Po, K. Farhadi, 
recovery 
intrusion 
on Operating Systems Principles 
2005. 
Z. Li, and E. de Lara. The Taser 
system. In Proceedings of the Symposium 
(SOSP), pages 163-176, 
Oct. 
[25] S. T. King and P. M. Chen. Backtracking 
intrusions. 
In Pro­
References 
ceedings of the Symposium on Operating Systems Principles 
(SOSP), pages 223-236, 
Oct. 2003. 
[1] Amazon hit by pricing 
error. 
http://news.zdnet.co.
ukJinternetJ 
0,1000000097
,39226977,
00.htm. 
[2] Amazon shuts after price error. http://news.bbc.co.
ukJ2lhi/ 
business/2864461.stm. 
[3] Best Buy will not honor $9.99 big-screen 
TV deal. http:// 
edition.cnn.
coml2009IUS/08/13Ibestbuy
plumbing. 
http://drupal.org/. 
.mistake/. 
[4] Community 
[5] Dell customers 
[26] H. F. Korth, E. Levy, and A. Silberschatz. 
transactions. 
A formal approach 
In The VLDB Jour­
by compensating 
to recovery 
nal, pages 95-106, 1990. 
[27]  P.  Liu,  P.  Ammann, 
and S. Jajodia. 
Rewriting 
histories:  Re­
covering 
lel Databases, 8(1):7-40, 2000. 
from malicious 
transactions. 
Distributed 
and Paral­
[28] D. B. Lomet. MLR: a recovery 
method for multi-level 
sys­
tems. SIGMODRec., 21(2):185-194,1992. 
co.ukJinternetJO, 
get snappy at pricing 
1000000097,39181 032,00.htm. 
error. http://news.zdnet. 
[29] B. Mediratta. 
Gallery 
2004. 
menalto.coml, 
photo album organizer. 
http://gallery. 
[6] Drupal Bug Report: 
IIdrupal.org/node/67745. 
[7] Drupal Bug Report: Editing 
IIdrupal.org/node/67895. 
Big bug in management comments.  http: 
process 
rity. In Proceedings of the ACMffFIP/uSENIX internationa
conference  on 
a poll clears all old votes. http: 
Middleware, pages 1-20,2007. 
for web application 
information 
[30] S. Nanda,  L.-C.  Lam, 
and T.-C. Chiueh. Dynamic multi­
flow tracking 
secu­
l 
[8] Drupal Group: Remove warning modal dialogs 
l 913. 
them with undo. http://groups.drupal.org/node/2
and replace 
[9] Gallery2  Bug  Report: 
One easy step to break G2 with album 
permIssIons. 
detail&aid=20 
project. 
[10] Jsqlparser 
[11] Wordpress 
wordpress.org. 
http://sourceforge.netJtracker/in
1 6834&group..id= 
dex.php?func= 
7 l30&atid= 
1 07130. 
http://jsqlparser.sourceforge.netJ. 
-Blog Tool and Publishing 
Platform. 
http:// 
[12] Wordpress 
Codex - Managing Plugins. http://codex. 
wordpress.orglManaging..Plugins. 
[31] A. Nguyen-tuong, 
S. Guarnieri, 
D. Evans.  Automatically  hardening 
web applications 
precise 
formation Security 
In Proceedings of the IFIP International In­
Conference, 2005. 
tainting. 
D. Greene, J. Shirley, 
using 
and 
[32] Y.-Y. Su, M. Attariyan, 
and J. Flinn. Autobash: 
management 
ing configuration 
ity analysis. 
SIGOPS symposium on Operating systems principles, 
237-250, 2007. 
In SOSP '07: Proceedings of twenty-first ACM 
with operating 
pages 
improv­
system causal­
pub/php/index.html. 
[13] Wordpress 
Codex:  IRC 
Meetup. http://codex.wordpress.org/ 
IRC..MeetupsI2007/SeptemberISeptember26RawLog. 
[34] W. J. Lee, J. Loaiza, 
Database 
M. J. Stewart, 
-US Patent 7181476,2007. 
Flashback 
W. Hu, W. H. Bridge,  Jr. 
[14] Wordpress 
Ticket: 
Links category 
can be set to blank. http: 
[35] H. J. Wang, J. C. Platt, 
Y. Chen, R. Zhang, and Y.-M. Wang. 
[33] W. Venema. Taint support 
for PHP. ftp://ftp.porcupine.org/ 
IIcore.trac. wordpress.org/ticketJ7336. 
[15] Wordpress 
Ticket: 
Unprivileged 
users can perform some ac­
tions on pages they aren't allowed to access. http://trac. 
wordpress.org/ticketJ4748. 
capability 
"create_users" 
Ticket: 
can 
[16] Wordpress 
Users without 
add new users. http://trac.
wordpress.org/ticketJ6662. 
[17] Wordpress 
Ticket: Users without unfiltered..html 
capability 
misconfiguration 
Automatic 
sure. In Proceedings of the Operating Systems  Design  and 
Implementation 
[36] A. Whitaker, 
R. S. Cox, and S. D. Gribble. 
(OSDI), pages 245-258, 
troubleshooting 
Configuration 
with PeerPres­
Dec. 2004. 
as search: 
finding the needle in the haystack. 
debugging 
In 
OSDI'04: Proceedings of the 6th conference on Symposium 
on Operating Systems Design & Implementation
Berkeley, 
2004. USENIX Association. 
CA,  USA, 
, pages 6-6, 
can post arbitrary 
html. http://trac.
wordpress.org/ticketJ4720. 
[18] I. E. Akkus. Data recovery for web applica-
of Toronto. 
tions. Master's thesis, University 
https:lltspace.library.utoronto.calhandle/1807/18132. 
ities in scripting languages. 
Security 
Symposium, 2006. 
[37]  Y. 
Xie and A. Aiken. Static 
detection 
In Proceedings of the USENIX 
of security 
vulnerabil­
[38] N. Zhu and T.-C. Chiueh. Design,  implementation, 
and evalu­
[19] P.  Ammann, 
S. Jajodia, 
transactions. 
IEEE Transactions 
gineering, 14(5):1167-1185, 2002. 
and P. Liu. Recovery 
from malicious 
on Knowledge and Data En­
ation of repairable 
pendable Systems and Networks, pages 217-226, 
file service. 
In Proceedings of the IEEE De­
June 2003. 
978-1-4244-7501-8/10/$26.00 
©20lO IEEE 
90 
DSN 20lO: Akku & Goel