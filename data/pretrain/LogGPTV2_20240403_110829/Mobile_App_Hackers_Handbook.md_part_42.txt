### Intent Filters and BROWSABLE Activities

To enable an application to be installed, the user must first visit a specific page. An example of an intent filter within the manifest of a rogue drozer agent (to be discussed later) is provided below. This filter allows an activity to be invoked from a web browser:

```xml
<intent-filter>
    <action android:name="android.intent.action.VIEW" />
    <category android:name="android.intent.category.BROWSABLE" />
    <category android:name="android.intent.category.DEFAULT" />
    <data android:scheme="pwn" />
</intent-filter>
```

This manifest declaration indicates that any web browser attempting to load a URI starting with `pwn://` will open this activity. Historically, you could start an application with a BROWSABLE activity by loading an iframe that uses a custom scheme. However, launching via an iframe is no longer possible in Chromium versions 25 and later. Therefore, the URI must be visited directly by the user or redirected through JavaScript.

If the specified resource does not exist on the device, the web page will fail to function, as the browser will throw an invalid URI error. The section "BROWSABLE URI Injection" covers the exploitation of BROWSABLE activities in more detail.

BROWSABLE activities can also be invoked using Chrome's experimental web intents specification, which allows for more structured and useful invocations. This is achieved through URIs starting with `intent://`, which support additional attributes and extras of an Intent object. Two methods to invoke the drozer activity are:

1. **Using the defined scheme directly:**
   - `pwn://start_drozer`

2. **Using a web intent:**
   - `intent://start_drozer#Intent;package=com.example.drozer;scheme=pwn;end`

For more information about the web intents project and available parameters, refer to [Chrome's documentation](https://developer.chrome.com/multidevice/android/intents). The implementation of web intents was exploited at Mobile Pwn2Own 2013, as detailed in [this report](http://www.pwn2own.com/2013/11/local-japanese-team-exploits-mobile-applications-install-malware-samsung-galaxy-s4/). A comprehensive analysis of web intents in different browsers can be found [here](http://www.mbsd.jp/Whitepaper/IntentScheme.pdf).

Some browsers, like Chrome, limit the invocation of activities to those marked as BROWSABLE and do not allow the component to be explicitly set. Other browsers, however, do not enforce this restriction, allowing any activity to be opened with the given intent. A technique involving intent selectors to bypass even this restriction in Chrome is described [here](http://developer.android.com/reference/android/content/Intent.html#setSelector(android.content.Intent)).

This opens up a significant attack vector for finding activities that perform tasks automatically in their `onCreate()` method using the supplied bundle. Even if all browsers fix the ability to invoke arbitrary activities and only allow BROWSABLE activities, significant attack vectors still exist.

A drozer module, `scanner.activity.browsable`, can be used to find all BROWSABLE activities on a device. Running it on a Samsung Galaxy S5 reveals the following output:

```plaintext
dz> run scanner.activity.browsable
...
Package: com.sec.android.app.shealth
Invocable URIs:
- shealth://
- com.sec.android.app.shealth.sleepmonitor://main
Classes:
- com.sec.android.app.shealth.SplashScreenActivity
- com.sec.android.app.shealth.sleepmonitor.SleepMonitorActivity_Base
...
Package: com.vodafone.cloud
Invocable URIs:
- intent://
- http://vodafone.com/cloud (PATTERN_LITERAL)
Classes:
- com.newbay.syncdrive.android.ui.gui.activities.SplashLogoActivity
...
Package: com.sec.android.cloudagent
Invocable URIs:
- db-qp95n66cz21kx96://
Classes:
- com.dropbox.client2.android.AuthActivity
...
Package: com.sec.android.app.voicenote
Invocable URIs:
- sherif-activity://nuanceinfo
Classes:
- com.sec.android.app.voicenote.library.subactivity.VNPolicyInfoActivity
...
Package: com.samsung.groupcast
Invocable URIs:
- groupplay://
- http://gp.samsung.com
- https://gp.samsung.com
Classes:
- com.samsung.groupcast.application.start.StartActivity
...
Package: com.sec.enterprise.knox.cloudmdm.smdms
Invocable URIs:
- smdm://
Classes:
- .ui.LaunchActivity
...
Package: com.osp.app.signin
Invocable URIs:
- samsungaccount://MainPage
Classes:
- .AccountView
...
Package: com.sec.android.app.billing
Invocable URIs:
- APKUPReadersHub://
- APKUPLearningHub://
- APKUPMediaHub://
- APKUPVideoHub://
- APKUPMusicHub://
- APKUPSamsungCloud://
- APKUPSamsungApps://
Classes:
- com.sec.android.app.billing.UnifiedPaymentPGActivity
...
```

All the activities listed can be invoked from a web browser by an arbitrary website, presenting a clear set of potential attack vectors.

### Custom Update Mechanisms

Applications with the `INSTALL_PACKAGES` permission are high-value targets and should be thoroughly investigated. These applications often handle their own updates rather than using the Play Store. Developers may prefer custom update mechanisms for various reasons, but these can contain vulnerabilities that allow for the arbitrary installation of packages. It is crucial to investigate code that installs new packages to identify any external entry points that can be abused.

When these applications start, they typically check for updates on a remote web server. If an update is available, the APK is downloaded and installed. The security of the communication channel used for this download is critical. If the new APK is downloaded in cleartext or the SSL certificate is not properly validated, an attacker could perform a man-in-the-middle attack to replace the APK file in transit. While targeting an individual on a wireless network is unlikely, performing such attacks at an airport or busy wireless hotspot on a larger scale may be more effective.

### Remote Loading of Code

Android allows applications to load new code at runtime using the Java Reflection API. This enables the loading of entirely new classes or the instantiation of new objects. Drozer uses this technique for interactions between the console and the agent.

Developers who use these mechanisms should ensure that new code is loaded from secure sources. Loading new code from unsecured remote sources can lead to remote code execution. The `DexClassLoader` class is commonly used for this purpose, with a constructor that looks like this:

```java
DexClassLoader(String dexPath, String dexOutputDir, String libPath, ClassLoader parent)
```

Another local vulnerability arises when the `dexPath` points to a location on the device that can be overwritten by other applications. Additionally, if the `dexOutputDir` is compromised and replaced with a malicious ODEX file, the attacker's code will be loaded when the application runs again. If another vector exists to replace ODEX files and the application can be invoked (e.g., through web intents), remote code execution becomes possible.

### WebViews

Chapter 7 examined issues affecting WebViews and concluded that the worst mistake a developer can make is loading content over HTTP inside a WebView. The following combination is particularly dangerous and can lead to code execution on the device using CVE-2012-6636:

- Using a WebView
- Defining a JavaScript interface
- Loading from a cleartext source or having SSL bypass code
- Targeting API versions prior to 17 or using an Android version earlier than 4.2

This combination forms the basis of two attacks presented later in this chapter. A warning sign for a potentially exploitable chain of vulnerabilities in a custom app store is the use of a WebView. If you can inject your own JavaScript into the WebView, you may be able to invoke the installation functionality and install an arbitrary package.

### Listening Services

Performing a port scan on an Android device is unlikely to reveal any listening ports. If you do find any, you would need to map them to the application handling the networking. To find any listening TCP ports on a connected device, use the following command:

```sh
$ adb shell netstat -antp | grep LISTEN
```

For example, when using the embedded server from within drozer, the output might look like this:

```sh
$ adb shell netstat -antp | grep LISTEN
tcp6 0 0 :::31415 :::* LISTEN
```

Finding a listening port is rare, but a listening service may be invoked through another vulnerability. The likelihood of listening ports increases when the user uses features like Android Beam, S-Beam, Bluetooth, or other Personal Area Networks (PANs). When a PAN is initiated, listening services are commonly started to facilitate communication.

### Messaging Applications

Any application that handles data from external sources is a potential entry point for attacks. Examples include:

- Short Message Service (SMS)
- Multimedia Messaging Service (MMS)
- Commercial Mobile Alert System (CMAS)
- Email clients
- Chat clients

Applications handling incoming SMS, MMS, or CMAS messages may contain elements performed in native code or handled by third-party applications. Tracing messages from their entry point through all possible code paths is a complex task. However, vulnerabilities have been found in even the most trusted code, so thorough review is essential.

Third-party email and chat clients are more likely to contain vulnerabilities. Decompiling and reviewing these applications, as described in Chapter 7, can reveal many potential vulnerabilities. For example, if an email or chat client loads received messages in a WebView, it may be vulnerable to JavaScript injection or misconfigured WebView attributes.

### Finding Local Vulnerabilities

Chapter 7 explored various types of vulnerabilities in Android applications. Finding vulnerabilities on a device is similar, but a faster, automated approach is recommended for efficiency. A good first step is to decompile all installed applications on the device and convert them to readable source code. You can use the decompilation techniques discussed in Chapter 6. Simple searches using `grep` can help identify low-hanging fruit, though what constitutes low-hanging fruit may vary based on your experience.

Drozer's scanner modules can help identify issues with minimal effort. For example, the `scanner.provider.injection` module can be used to search for SQL injection in all content providers on a Nexus 7 tablet:

```sh
dz> run scanner.provider.injection
Scanning com.android.backupconfirm...
Scanning com.android.packageinstaller...
Scanning com.android.providers.userdictionary...
Scanning com.android.providers.downloads.ui...
...
Not Vulnerable:
- content://com.android.gmail.ui/
- content://com.google.android.libraries.social.stream.content.StreamUris/activity_view/activity
- content://subscribedfeeds/deleted_feeds
...
Injection in Projection:
- content://settings/system/notification_sound
- content://settings/system/ringtone
- content://settings/gservices
- content://settings/system/notification_sound/
- content://settings/gservices/
- content://com.google.settings/partner/
- content://settings/system/alarm_alert/
- content://com.google.settings/partner
- content://settings/system/alarm_alert
Injection in Selection:
- content://com.android.bluetooth.opp/live_folders/received
- content://settings/gservices
- content://settings/gservices/
- content://com.google.settings/partner/
- content://com.google.settings/partner
- content://com.android.bluetooth.opp/live_folders/received/
```

These injection points, while not providing significant advantages to an attacker, illustrate the scale of searches that a scanner module can perform to find vulnerabilities.

### Exploiting Devices

Many classes of vulnerabilities can be discovered and exploited on an Android device. These can be broadly categorized into remote and local vulnerabilities. Remote exploits typically provide an initial foothold on the target device, while local exploits require existing access and aim to escalate privileges or perform unintended actions.

### Using Attack Tools

This section discusses some attack tools that are useful for understanding potential routes an attacker might take to compromise a device.

#### Ettercap

Ettercap is a standard tool for performing man-in-the-middle attacks on a network. It includes features for ARP poisoning, DNS spoofing, and other techniques to control victim traffic on the same network. The project page is [here](http://ettercap.github.io/ettercap/). To install it on Ubuntu, use:

```sh
$ sudo apt-get install ettercap-graphical
```

However, the repositories often lag behind the latest version. We recommend compiling the latest version from the project page. After downloading the tarball, install the required dependencies and compile Ettercap:

```sh
$ cd ettercap-0.8.1
$ mkdir build
$ cd build
$ cmake ..
-- The C compiler identification is GNU 4.8.2
-- Check for working C compiler: /usr/bin/cc
-- Check for working C compiler: /usr/bin/cc -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Check if the system is big endian
-- Searching 16 bit integer
-- Looking for sys/types.h
-- Looking for sys/types.h - found
-- Looking for stdint.h
...
-- Looking for strndup - found
-- Found LIBNET: /usr/lib/x86_64-linux-gnu/libnet.so
-- Found PCRE: /usr/lib/x86_64-linux-gnu/libpcre.so
-- Performing Test HAVE_MUTEX_RECURSIVE_NP
-- Performing Test HAVE_MUTEX_RECURSIVE_NP - Success
-- Found BISON: /usr/bin/bison (found version "3.0.2")
-- Found FLEX: /usr/bin/flex (found version "2.5.35")
-- Configuring done
-- Generating done
-- Build files have been written to: /home/tyrone/ettercap-0.8.1/build
```

This setup provides a powerful tool for conducting man-in-the-middle attacks and understanding potential vulnerabilities in networked environments.