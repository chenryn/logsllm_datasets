title:Hop by hop multicast routing protocol
author:Lu&apos;ıs Henrique Maciel Kosmalski Costa and
Serge Fdida and
Otto Carlos Muniz Bandeira Duarte
Hop By Hop Multicast Routing Protocol ∗
Lu´ıs Henrique M. K. Costa1,2, Serge Fdida1, and Otto Carlos M. B. Duarte2
PI:EMAIL, PI:EMAIL, PI:EMAIL
1 Laboratoire d’Informatique de Paris 6
Université Pierre et Marie Curie
4, place Jussieu - 75252
Paris Cedex 05 - France
ABSTRACT
IP Multicast is facing a slow take-oﬀ although it is a hotly
debated topic since more than a decade. Many reasons are
responsible for this status. Hence, the Internet is likely to
be organized with both unicast and multicast enabled net-
works. Thus, it is of utmost importance to design protocols
that allow the progressive deployment of the multicast ser-
vice by supporting unicast clouds. This paper proposes HBH
(Hop-By-Hop multicast routing protocol). HBH adopts the
source-speciﬁc channel abstraction to simplify address allo-
cation and implements data distribution using recursive uni-
cast trees, which allow the transparent support of unicast-
only routers. Additionally, HBH is original because its tree
construction algorithm takes into account the unicast rout-
ing asymmetries. As most multicast routing protocols rely
on the unicast infrastructure, these asymmetries impact the
structure of the multicast trees. We show through simula-
tion that HBH outperforms other multicast routing proto-
cols in terms of the delay experienced by the receivers and
the bandwidth consumption of the multicast trees.
1.
INTRODUCTION
IP Multicast is facing a slow take-oﬀ although it is a hotly
debated topic since more than a decade. Many reasons are
responsible for this status. The IP Multicast architecture
is composed of a service model that deﬁnes a group as an
open conversation from M sources to N receivers, an ad-
dressing scheme based on IP class-D addresses, and routing
protocols. In IP Multicast any host can send to a multicast
group and any host can join it and receive data [5]. The IP
Unicast service model is also completely open, but the po-
tential burden caused by unauthorized senders is ampliﬁed
by the group size in multicast.
∗
This work was sponsored by FUJB, CNPq, CAPES,
COFECUB, and IST Project GCAP N0 1999-10504.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for profit or commercial advantage and that copies
bear this notice and the full citation on the first page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior specific
permission and/or a fee.
SIGCOMM’01, August 27-31, 2001, San Diego, California, USA..
Copyright 2001 ACM 1-58113-411-8/01/0008 ...$5.00.
2 Grupo de Teleinform´atica e Automac¸ ˜ao
Universidade Federal do Rio de Janeiro
P.O. Box 68504 - 21945-970
Rio de Janeiro - RJ - Brasil
The IP Multicast architecture is completed by group ad-
dressing and routing protocols. A multicast group is iden-
tiﬁed by a class-D IP address which is not related to any
topological information, as opposed to the hierarchical uni-
cast addressing model. Therefore, multicast address alloca-
tion is complicated and multicast forwarding state is diﬃ-
cult to aggregate. Currently, there is no scalable solution
to inter-domain multicast routing. The approach used is to
connect diﬀerent domains through MBGP (Multiprotocol
Extensions to BGP)[2] and MSDP (Multicast Source Dis-
covery Protocol)[18]. MBGP is used to announce diﬀer-
ent unicast and multicast-capable routes whereas MSDP is
able to exchange active source information among the diﬀer-
ent domains. The conﬁguration complexity of this solution
works against multicast deployment. On the other hand,
backbone operators are currently overprovisioning their net-
works so they have little interest in using multicast.
Nevertheless, ISPs (Internet Service Providers) could be
interested in multicast to face the increasing demand for
network resources and content distribution. As a conse-
quence, the Internet is likely to be organized with both uni-
cast and multicast enabled networks. Therefore, it is of
utmost importance to design protocols that allow the pro-
gressive deployment of the multicast service by supporting
unicast clouds.
Diﬀerent solutions that simplify the multicast service by
reducing the distribution model were proposed [8]. EX-
PRESS [16] restricts the multicast conversation to 1 to N
(the channel abstraction), simplifying address allocation and
data distribution, and still covering most of the current mul-
ticast applications. The source-speciﬁc multicast service,
currently being standardized at the IETF (Internet Engi-
neering Task Force), can be implemented by Version 3 of
IGMP (Internet Group Management Protocol)[4] and by a
modiﬁed version of PIM-SM (Protocol Independent Multi-
cast - Sparse Mode)[11], named PIM-SSM [3]. Neverthe-
less, source-speciﬁc multicast does not allow the progressive
deployment of the multicast service. Currently, the only
alternative is to use tunnels to go through unicast-only net-
works. There is some work in progress speciﬁc to multi-
cast tunnelling. One such mechanism is the UDP Multi-
cast Tunneling Protocol (UMTP)[13]. UMTP encapsulates
UDP multicast datagrams inside UDP unicast datagrams,
so it can be implemented as a user-level process at end-
hosts. The work in [14, 17] propose diﬀerent mechanisms
to automate the generation of UMTP tunnels. Automatic
249Multicast Tunnelling (AMT)[22] is an alternative scheme
that does not rely on UDP, it provides tunneling capabil-
ity through pseudo network interfaces that serve as default
routes to multicast traﬃc. We do not propose a new au-
tomatic tunnelling scheme to connect the multicast-enabled
parts of the Internet, but instead proposes a new multicast
routing protocol that inherently supports unicast routers.
Additionally, the protocol design takes into account the uni-
cast routing asymmetries that may aﬀect the structure of the
multicast distribution tree, especially if unicast-only routers
are present.
The ability to transparently support unicast routers is the
main motivation of the Hop-By-Hop multicast routing pro-
tocol (HBH) we propose in this paper. HBH implements
multicast distribution through recursive unicast trees, ap-
proach originally proposed in REUNITE [21]. REUNITE
does not use class-D IP addresses for group identiﬁcation,
completely abandoning the IP Multicast addressing model.
HBH uses the unicast infrastructure to do packet forward-
ing with smaller routing tables, just as REUNITE does, but
uses EXPRESS’ channel abstraction to identify a group.
Thus HBH preserves compatibility with IP Multicast as it
uses class-D IP addresses in group identiﬁcation. HBH con-
structs Shortest-Path Trees (SPT) instead of Reverse SPTs
as most routing protocols do [6, 7, 9, 23]. Consequently,
HBH potentially provides best routes in asymmetric net-
works and is suitable for an eventual implementation of
Quality of Service (QoS) based routing. Additionally, HBH
has a tree management algorithm that provides enhanced
tree stability in the presence of group dynamics and poten-
tially reduces tree bandwidth consumption in asymmetric
networks.
This paper is organized as follows: Section 2 presents the
related work, motivations and basic ideas of HBH, Section
3 describes the HBH protocol and Section 4 presents a per-
formance comparison of HBH and other multicast protocols
through simulation. Section 5 concludes the paper.
2. THE BASIC PRINCIPLES OF HOP-BY-
HOP MULTICAST
This section presents previous work related to this pa-
per, namely the EXPRESS and REUNITE protocols, and
then introduce the basic principles of HBH and the prob-
lems caused by asymmetric unicast routing that motivated
the design of HBH.
2.1 Related Work
EXPRESS [16] provides a simple solution to the multicast
address allocation problem, introducing the channel abstrac-
tion that reduces the multicast conversation from M to N to
1 to N. A channel is identiﬁed by the pair  where
S is the unicast address of the source and G is a class-D
multicast address. The concatenation of a unicast address
with a class-D address solves the address allocation problem
since the unicast address is unique. The channel model also
simpliﬁes group management issues such as sender access
control, although its implementation (PIM-SSM - Protocol
Independent Multicast-Source Speciﬁc Multicast [3]) adds
no group management support.
REUNITE (REcursive UNIcast TrEes) [21] implements
multicast distribution based on the unicast routing infras-
tructure. REUNITE’s basic motivation is that in typical
multicast trees, the majority of routers simply forward pack-
ets from one incoming interface to one outgoing interface, in
other words, the minority of routers are branching nodes.
Nevertheless, all multicast protocols keep per group infor-
mation in all routers of the multicast tree. Therefore the
idea is to separate multicast routing information in two ta-
bles: a Multicast Control Table (MCT) that is stored in
the control plane and a Multicast Forwarding Table (MFT)
installed in the data plane. Non-branching routers simply
keep group information in their MCT, as branching nodes
keep MFT entries which are used to recursively create packet
copies as to reach all group members.
REUNITE identiﬁes a conversation by a  tuple,
where S is the unicast address of the source and P is a port
number allocated by the source. Class-D IP addresses are
not used. As receivers join the group REUNITE populates
its tables to construct the distribution tree. REUNITE uses
two message types: join and tree. Join messages travel up-
stream from the receivers to the source, as tree messages are
periodically multicast by the source to refresh soft-state of
the tree. Only the branching nodes for the group 
keep  entries in their MFT. The control table,
MCT, is not used for packet forwarding. Non-branching
routers in the  tree have MCT entries for 
but no MFT entry.
2.2 Multicast distribution through recursive
unicast
The basic idea of the recursive unicast approach is that
packets have unicast destination addresses. The routers that
act as branching nodes for a speciﬁc multicast group are re-
sponsible of creating packet copies with modiﬁed destination
address in such a way that all group members receive the
information.
Figure 1(a) shows how the recursive unicast data distri-
bution works for HBH. S sends data addressed to H1. H1
creates two packet copies and sends them to H4 and H5 (the
next branching nodes). H3 simply forwards the packets in
unicast. H5 receives the data and sends a modiﬁed packet
copy to H7 and r8. Finally, H7 creates one packet copy to
r4, r5, and r6. Data distribution is symmetric on the other
side of the tree.
Figure 1(b) gives an example of the recursive unicast data
distribution in REUNITE. The source sends data in unicast
to the ﬁrst receiver that joined the group. At a branching
node, RB, incoming packets are addressed to the ﬁrst re-
ceiver, ri, that joined the group in the sub-tree below RB.
ri is stored in a special MFT entry, MFT.dst. RB cre-
ates one packet copy for each receiver in its MFT (the des-
tination address of each packet copy is set to the receiver’s
unicast address). The original packet is also forwarded to
ri. In the example, S produces data packets addressed to r1
(these packets reach r1 unchanged). R1 creates one packet
copy and sends it to r4. Since R3 is a non-branching node, it
simply forwards the packets without consulting its MFT. R5
creates one packet copy to r8 and ﬁnally R7 creates copies
to r5 and r6.
The recursive unicast technique allows the progressive de-
ployment of the multicast service because data forwarding
is based on unicast addresses. Unicast-only routers in the
distribution tree are transparently supported. These routers
are unable to be branching nodes of the tree but can forward
data since unicast destination addresses are used.
(a) HBH tree.
(b) REUNITE tree.
Figure 1: Data distribution in the recursive unicast approach.
2.3 The risks of asymmetric routing
Asymmetric routing means that the unicast path from A
to B may diﬀer from the path from B to A. In the Internet,
it may be due to diﬀerent reasons [20]. The simplest case
is that of asymmetric or unidirectional links (e.g., ADSL
lines or satellite links). There are also less obvious sources
of asymmetric routes: routing misconﬁguration and routes
intentionally conﬁgured asymmetric. One such mechanism
is known as ”hot-potato routing” and is used because of
economical reasons. For example, suppose two ISPs, A and
B, that both provide connectivity through the US territory.
Traﬃc generated at the East Coast in A’s network, and
destined to a customer in the West Coast connected to B
will be routed to B’s network as soon as possible, i.e., in a
peering point located at the East Coast. This way, A avoids
using its own links to cross the country since these links are
a scarce resource. On the other direction, B uses the same
strategy causing routes between A and B to be asymmetric.
Real routing measurements have shown that the percent-
age of asymmetric routes in the Internet is high. The anal-
ysis in [20] evaluated about 10,000 pairs of sites. Only ma-
jor routing asymmetries were considered, where the virtual
paths diﬀer by one city or AS (Autonomous System). About
a half of the measures revealed routes that diﬀer by one city
or more. In a diﬀerent level of granularity, about 30% of the
routes were asymmetric with at least one AS of diﬀerence,
which still is high a percentage.
Asymmetric unicast routing aﬀects multicast routing since
the majority of multicast routing protocols construct Re-
verse Shortest-Path Trees [6, 9, 23]. Data packets from the
source to a receiver follow the unicast route used to go from
the receiver to the source. If these paths have diﬀerent char-
acteristics, e.g. diﬀerent delays, the use of the reverse SPT
may be problematic to QoS deployment. The ability to con-
struct Shortest-Path Trees is therefore advantageous for a
multicast routing protocol.
REUNITE diﬀers from previous routing protocols because
it potentially constructs SPTs. (MOSPF - Multicast Open
Shortest Path First [19] is the only Internet protocol that
constructs SPTs.) This is possible because the tree mes-
sages that travel from the source to the destination nodes
install forwarding state and not the join messages that fol-
low the inverse direction. Nevertheless, REUNITE may fail
to construct shortest-path branches in the presence of uni-
cast routing asymmetries. A second undesirable behavior
of REUNITE is that the route for one receiver may change
after the departure of another receiver. This is undesirable
if some QoS mechanism is to be implemented.
Figure 2 illustrates the tree construction mechanism of
REUNITE with an example where it fails to construct a
SPT. Suppose the unicast routes: r1 → R2 → R1 → S ;
S → R1 → R3 → r1 ; r2 → R3 → R1 → S ; S → R4 → r2.
Suppose the following events: r1 joins , r2 joins
, and r1 leaves the group.
Receiver r1 subscribes to the multicast channel by send-
ing a join(S, r1)1 message to S. This message reaches S
since there is no previous tree state for this channel in the
routers. We say that r1 joined  at S. S then starts
1In the rest of the paper, we interchangeably use  and
 to refer to the multicast channel.
Figure 2: REUNITE’s tree construction mechanism.
sending tree(S, r1) messages to r1 (in unicast). These tree
messages install soft-state for  in the routers tra-
versed downstream. R1 and R3 create a  entry in
their MCT. Now r2 joins the group. The join(S, r2) travels
in the direction of S reaching the tree at R3. R3 drops the
join(S, r2), creates a MFT with r1 as dst, adds r2 to
MFT, and removes  from its MCT. R3 becomes
a branching node and will consequently forward tree(S, r2)
messages downstream (upon the reception of tree(S, r1)).
We say that r2 joined the channel at R3. Data packets sent
to the group (addressed to r1) are duplicated at R3 and ad-
dressed to r2. Subsequent join messages sent by r1 and r2
refresh the MFT entries at S and R3 respectively.
In this conﬁguration, r1 receives data from S through the
shortest-path, but not r2. Because the unicast routes be-
tween S and r2 are asymmetric and because R3 intercepts
join(S, r2), data follows the path S → R1 → R3 → r2, the
same as tree messages from S down to r2 (Figure 2(a)).
MCT and MFT states are soft. Receivers periodically
send join(S, ri) messages and the source periodically multi-
casts a tree(S, ri) message. The receiver simply stops send-
ing join messages to leave the channel. When the tree struc-
ture is stable, a tree(S, ri) message refreshes the ri MCT
entries and the MFT.dst = ri entries down the tree. The
join(S, rj) messages refresh the rj entry in the MFT of the
node where rj joined  (in Figure 2, join(S, r1) refreshes
the r1 entry in S’s MFT and join(S, r2) refreshes the r2 en-
try in R3’s MFT).
Now r1 leaves the group: it stops sending join(S, r1) mes-
sages. As the r1 entry in S’s MFT is not refreshed, after the
expiration of timer t1 the r1 entry becomes stale. A second
timer, t2, is created and will eventually destroy the r1 en-
try. As r1 is stale, S now sends marked tree(S, r1) messages
(Figure2(b)). The marked tree(S, r1) means that data ﬂow
addressed to r1 will stop soon, so the tree portion based on
r1 has to be reconﬁgured. At the branching nodes, MFT
tables that have MFT.dst = r1 become stale as the
marked tree travels down the tree. At non-branching nodes,
the reception of a stale tree(S, r1) causes the destruction of
any r1 MCT entries. Consequently, join(S, r2) messages are
no more intercepted by R3 (as its MFT is stale) and