### 1. Introduction
Despite our efforts, we were unable to identify the application as malicious. Our proposed protection system (detailed in Section VI) mitigates these threats by enforcing signature checks on all code, including external code, thus preventing attackers from evading analysis and detection by downloading code at runtime.

### 2. Code Loading as a Source of Vulnerabilities
Improper use of the code-loading techniques described in Section III-A can introduce severe vulnerabilities in otherwise benign applications. Our analysis of applications from Google Play reveals that developers often fail to implement these mechanisms securely, as we will discuss in more detail in Section V.

The primary issue is that Android delegates the responsibility for checking the integrity and authenticity of external code to application or framework developers. These developers are primarily focused on functionality and may be unaware of the security implications. This oversight provides opportunities for attackers to substitute legitimate code with malicious code, which, without proper checks, will go undetected and executed.

### 3. Common Security Issues
We identified the following common problems:

#### a) Insecure Downloads
Some applications download external code via HTTP, which is vulnerable to man-in-the-middle attacks. Attackers can modify or replace the downloaded code. Fahl et al. [15] demonstrated that the use of HTTP and improper use of HTTPS is a widespread problem in Android applications.

#### b) Unprotected Storage
Applications that download additional code (often in the form of APKs) and store it in the device’s file system are also at risk. If the storage location is improperly chosen, other applications on the device can gain write access to it, allowing them to tamper with the code. For example, if an APK is modified before installation, attackers can gain full access to the new application’s data.

#### c) Improper Use of Package Names
Each application installed on an Android system is identified by its package name, which must be unique on the device. Developers can freely specify the package name, but they often overlook the possibility that the same package name could be used by multiple applications, as long as they are not installed on the same device. An attacker can choose a package name commonly used by a well-known application, and if their malicious application is installed first, any subsequent application using the well-known package name will load the malicious code instead.

In Section V-B, we will present real-world exploits using these attack techniques.

### 4. Automatic Detection
To assess the prevalence of these issues among popular Android applications, we developed a tool that uses static analysis to detect problematic code-loading techniques.

#### A. Tool Design
Our detection tool receives an APK as input and identifies indications of problematic code loading. The analysis is performed directly on Dalvik bytecode, without requiring the source code. The tool generates a report indicating whether the application can load additional code at runtime and categorizes each detected code-loading attempt.

#### B. Basis for the Tool
We built our static-analysis tool using Androguard [13] to disassemble the Dalvik bytecode and extract information about classes, methods, basic blocks, and individual Dalvik bytecode instructions. The tool then transforms the code into Static Single Assignment (SSA) form [10], performs Class Hierarchy Analysis (CHA), and constructs the control flow graph (CFG) for each method.

#### C. Construction of the sCFG
The tool constructs a super control flow graph (sCFG) to represent possible method invocations. The sCFG construction is challenging due to the dynamic dispatch mechanism in Dalvik bytecode. We implemented a class-hierarchy-based algorithm that scales well and is reasonably precise. The algorithm over-approximates the sCFG, introducing edges between invoke instructions and method entry points that might never be used at runtime, but this does not affect our heuristics.

#### D. Backward Slicing
Our tool uses backward slicing to compute slices of the analyzed application based on control flow information. Given an instruction and a register, the slice includes instructions that can influence the value of the register. The slicing algorithm traces the flow of data and recursively continues the analysis when reaching the beginning of a method.

#### E. Heuristics to Detect Code Loading
We implemented several heuristics to detect code-loading issues:

1. **General Detection**: The tool detects the use of code-loading techniques by identifying associated method invocations and checking for specific parameters.
2. **Storage Location**: For APK installations, class loaders, and native code, the tool analyzes the storage location. Code stored in world-writable locations, such as external storage, is flagged as vulnerable.
3. **Code Provenance**: The tool flags code downloaded via HTTP as problematic due to its vulnerability to man-in-the-middle attacks.
4. **Package Names**: Using package names for code loading is always considered a security risk, as a given package name is not guaranteed to belong to the desired application.

### 5. Large-Scale Analysis of Benign Applications
We applied our detection tool to various sets of real-world applications to assess the prevalence of code-loading techniques and associated security issues. Our findings indicate that these techniques are very popular and lead to vulnerabilities in many applications.

#### A. Use of Code-Loading Techniques
We tested the following sets of applications from Google Play:

1. A set of 1,632 applications randomly chosen in May 2012 with more than one million installations.
2. The 50 most popular free applications in November 2012.
3. The 50 most popular free applications in August 2013.

The tool was run with a timeout value of one hour. In 10% of the cases, the runtime exceeded the timeout. The mean runtime for the remaining cases was 74.9 seconds per application, with a standard deviation of 55.3 seconds. The median runtime, including timeouts, was 69.8 seconds. The mean size of the analyzed code files was 3,303 KB, with a standard deviation of 2,152 KB.

Tables I, II, and III show the use of code-loading techniques and the number of vulnerabilities detected in the different test sets. Note that a single application can use multiple techniques, and Runtime.exec is not specific to Android, leading to higher usage numbers.

Our results show that code loading at runtime is a widespread phenomenon among benign applications, with 9.25% of the applications on Google Play being vulnerable to code-injection attacks. The situation is even more concerning in the top 50 free applications, with 16% containing vulnerable code.

### 6. Conclusion
The improper use of code-loading techniques in Android applications poses significant security risks. Our tool and analysis highlight the need for better security practices and more robust checks to prevent these vulnerabilities.