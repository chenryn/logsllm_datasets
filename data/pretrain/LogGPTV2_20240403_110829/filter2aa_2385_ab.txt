Remote WMI Protocols – WinRM/PowerShell Remoting 
45 
Copyright ©  2015, FireEye, Inc.  All rights reserved. 
Remote WMI Protocols – WinRM/PowerShell Remoting 
46 
Copyright ©  2015, FireEye, Inc.  All rights reserved. 
Copyright ©  2015, FireEye, Inc.  All rights reserved. 
WMI Attack Lifecycle 
47 
Copyright ©  2015, FireEye, Inc.  All rights reserved. 
WMI Attacks 
 From an attackers perspective, WMI can be used but is not limited to 
the following: 
- Reconnaissance 
- VM/Sandbox Detection 
- Code execution and lateral movement 
- Persistence 
- Data storage 
- C2 communication 
48 
Copyright ©  2015, FireEye, Inc.  All rights reserved. 
WMI Attacks – Reconnaissance 
Host/OS information:  
ROOT\CIMV2:Win32_OperatingSystem, Win32_ComputerSystem 
File/directory listing:   
ROOT\CIMV2:CIM_DataFile 
Disk volume listing:   
ROOT\CIMV2:Win32_Volume 
Registry operations:  
ROOT\DEFAULT:StdRegProv 
Running processes:   
ROOT\CIMV2:Win32_Process 
Service listing:  
ROOT\CIMV2:Win32_Service 
Event log:  
ROOT\CIMV2:Win32_NtLogEvent 
Logged on accounts:  
ROOT\CIMV2:Win32_LoggedOnUser 
Mounted shares:  
ROOT\CIMV2:Win32_Share 
Installed patches:  
ROOT\CIMV2:Win32_QuickFixEngineering 
Installed AV: 
ROOT\SecurityCenter[2]:AntiVirusProduct 
49 
Copyright ©  2015, FireEye, Inc.  All rights reserved. 
WMI Attacks – VM/Sandbox Detection 
Sample WQL Queries 
SELECT * FROM Win32_ComputerSystem WHERE TotalPhysicalMemory = 200 AND TargetInstance.SystemUpTime \InprocServer32 – (default) 
Extend the functionality of WMI all while using its existing infrastructure 
New providers create new __Win32Provider : __Provider instances 
Unique per namespace 
56 
Copyright ©  2015, FireEye, Inc.  All rights reserved. 
WMI Providers 
Get-WmiProvider.ps1 
-
https://gist.github.com/mattifestation/2727b6274e4024fd2481 
57 
Copyright ©  2015, FireEye, Inc.  All rights reserved. 
Malicious WMI Providers 
This was merely a theoretical attack vector until recently… 
EvilWMIProvider by Casey Smith (@subTee) 
-
https://github.com/subTee/EvilWMIProvider 
-
PoC shellcode runner 
-
 Invoke-WmiMethod -Class Win32_Evil -Name ExecShellcode -ArgumentList @(0x90, 
0x90, 0x90), $null 
EvilNetConnectionWMIProvider by Jared Atkinson (@jaredcatkinson) 
-
https://github.com/jaredcatkinson/EvilNetConnectionWMIProvider 
-
PoC PowerShell runner and network connection lister 
-
Invoke-WmiMethod -Class Win32_NetworkConnection -Name RunPs -ArgumentList 
'whoami', $null 
-
Get-WmiObject -Class Win32_NetworkConnection 
58 
Copyright ©  2015, FireEye, Inc.  All rights reserved. 
Copyright ©  2015, FireEye, Inc.  All rights reserved. 
WMI Forensics 
59 
Copyright ©  2015, FireEye, Inc.  All rights reserved. 
With online systems: use WMI to query itself 
-
Enumerate filter to consumer bindings 
-
Query WMI object definitions for suspicious events 
CIM repository is totally undocumented 
-
objects.data, index.btr, mapping#.map 
Today, forensic analysis is mostly hypothesize and guess: 
-
Copy CIM repository to a running system, or 
-
strings.exe on objects.data 
WMI Forensics - Motivation 
60 
Copyright ©  2015, FireEye, Inc.  All rights reserved. 
WMI “providers” register themselves to expose query-able data 
-
Object-oriented type hierarchy: Namespaces, Classes, Properties, Methods, Instances, 
References 
-
CIM (Common Information Model) repository : %SystemRoot%\WBEM\Repository 
•
Objects.data 
•
Mapping1.map, Mapping2.map, Mapping3.map 
•
index.btr 
•
mapping.ver – Only in XP, specifies the index of the current mapping file 
-
HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\WBEM 
WMI Implementation on Disk 
61 
Copyright ©  2015, FireEye, Inc.  All rights reserved. 
WMI Repository 
62 
Copyright ©  2015, FireEye, Inc.  All rights reserved. 
WMI Repository – Artifact Recovery Methodology 
Construct the search string, taking into consideration the artifact’s namespace, class, name 
-
Stay tuned 
Perform a search in the index.btr  
-
Logical Page # 
-
Artifact’s Record Identifier 
-
Artifact’s Record Size 
Based on the Logical Page #, determine the Physical Page # from the objects.data Mapping in 
Mapping#.map 
Find the Record Header based on the Artifact’s Record Identifier in the page discovered at 
previous step in objects.data 
Validate the size in the Record Header matches Artifact’s Record Size in index.btr found string 
Record Offset in the Record Header represents the offset in the current page of the Artifact  
63 
Copyright ©  2015, FireEye, Inc.  All rights reserved. 
Paged  
Page Size = 0x2000 
Physical Offset = PageNumber x PageSize 
Most of the pages contain records 
-
Record Headers 
•
Size = 0x10 
•
Last Record Header contains only 0s 
-
Records  
A record with size greater than the Page Size always starts in an empty page 
-
Use the Mapping file to find the rest of the record’s chunks  
Objects.data – Structure 
64 
Copyright ©  2015, FireEye, Inc.  All rights reserved. 
Record Header : RecID, RecOffset, RecSize, Crc32 (16 bytes) 
First Record starts immediately after last Record Header 
CRC32 is only stored in the Record Header in Repos under XP 
Objects.data – Page Structure 
Offset 
RecID     RecOffset  RecSize    CRC32 
Last Record Header 
First Record 
First Record Header 
65 
Copyright ©  2015, FireEye, Inc.  All rights reserved. 
Up to 3 mapping files 
In XP Mapping.ver specifies the index of the most current Mapping file 
Consists of: 
-
Objects.data Mapping data 
-
Index.btr Mapping data 
Logical Page# = Index in Map 
Mapping#.map 
66 
Copyright ©  2015, FireEye, Inc.  All rights reserved. 
Start Signature: 0xABCD 
Header: 
-
Revision 
-
PhysicalPagesCount 
-
MappingEntriesCount  
Mapping Data 
FreePages Mapping Size 
FreePages Mapping Data 
End Signature : 0xDCBA 
Mapping#.map - Mapping data 
67 
Copyright ©  2015, FireEye, Inc.  All rights reserved. 
Mapping#.map – Header and Mapping Data 
Start Signature 
Logical-Page 0 => Physical-Page 0xC11 
Logical-Page 6 => Physical-Page 0xABB 
Revision 
PhysicalPagesCount 
MappingEntriesCount 
Mapping Data 
68 
Copyright ©  2015, FireEye, Inc.  All rights reserved. 
Mapping#.map – Free Pages Mapping Data 
Free Pages Map Size 
End Signature 
Free Pages  
Mapping Data 
69 
Copyright ©  2015, FireEye, Inc.  All rights reserved. 
B-Tree on disk 
Paged 
PageSize = 0x2000 
Physical Offset = PageNumber x PageSize 
Root of the Tree 
-
In XP => Logical Page Number  = the DWORD at offset 12 in Logical Page 0 
-
In Vista and Up => Logical Page Number = Logical Page 0 
-
Use the Index.btr Mapping Data in Mapping#.map to find out the Physical Page 
Index.btr 
70 
Copyright ©  2015, FireEye, Inc.  All rights reserved. 
 A page consists of: 
-
Header 
-
List of logical page numbers => Pointers to next level nodes 
-
List of Offset Pointers to Search String Records 
-
Search String Records 
-
List of Offset Pointers to Strings 
-
Strings 
Index.btr - Page 
71 
Copyright ©  2015, FireEye, Inc.  All rights reserved. 
Index.btr – Root Page Details 
Header:   Signature        LogicalPage      Zero          RootLogPage  EntriesCount 
Strings 
Next Level Logical Pages 
Search String Records 
Search String Offsets in uint16s 
String Offsets 
Strings 
Count 
After 
Strings 
Offset 
Records Size in uint16s 
72 
Copyright ©  2015, FireEye, Inc.  All rights reserved. 
Index.btr – Root Page Search Strings 
73 
Copyright ©  2015, FireEye, Inc.  All rights reserved. 
Copyright ©  2015, FireEye, Inc.  All rights reserved. 
MOF  
Managed Object Format 
74 
Copyright ©  2015, FireEye, Inc.  All rights reserved. 
MOF – Primitives 
 Object Oriented Hierarchy consisting of: 
-
Namespaces 
-
Classes 
-
Instances 
-
References 
-
Properties 
-
Qualifiers 
75 
Copyright ©  2015, FireEye, Inc.  All rights reserved. 
MOF – Namespaces 
 Namespace Definition – a way to create new namespaces 
-
__namespace – class representing a namespace 
Namespace Declaration - #pragma namepace (\\\) 
76 
Copyright ©  2015, FireEye, Inc.  All rights reserved. 
MOF – Classes/Properties/References 
Class definition: 
-
A list of qualifiers 
•
abstract, dynamic, provider  
-
Class name 
-
A list of properties 
-
A list of references to instances 
Property definition: 
-
A list of qualifiers 
•
type, primary key, locale 
-
Property name 
Reference definition: 
-
Class referenced 
-
Reference name 
77 
Copyright ©  2015, FireEye, Inc.  All rights reserved. 
MOF – Example 
78 
Copyright ©  2015, FireEye, Inc.  All rights reserved. 
MOF – Instances 
 Instance declarations: 
-
Property name = Property value 
-
Reference name = Class instance referenced 
79 
Copyright ©  2015, FireEye, Inc.  All rights reserved. 
MOF – Full Example 
80 
Copyright ©  2015, FireEye, Inc.  All rights reserved. 
Copyright ©  2015, FireEye, Inc.  All rights reserved. 