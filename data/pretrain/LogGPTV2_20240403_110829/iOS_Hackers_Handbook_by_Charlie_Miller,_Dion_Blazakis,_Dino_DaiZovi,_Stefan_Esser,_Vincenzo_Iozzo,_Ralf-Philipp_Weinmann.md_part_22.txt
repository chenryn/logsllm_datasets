### Chapter 6: Fuzzing iOS Applications

#### Introduction
This chapter covers the process of fuzzing iOS applications, with a focus on MobileSafari and SMS handling. The provided code and instructions demonstrate how to create and run a fuzzer for these components.

#### Fuzzing MobileSafari

##### Code Example
The following C program calls the `SBSOpenSensitiveURLAndUnlock` API from the private `SpringBoardServices` framework to open a URL passed as a command-line argument.

```c
#include <stdio.h>
#include <CoreFoundation/CoreFoundation.h>

#define SBSApplicationLaunchUnlockDevice 4
#define SBSApplicationDebugOnNextLaunch_plus_SBSApplicationLaunchWaitForDebugger 0x402

bool SBSOpenSensitiveURLAndUnlock(CFURLRef url, char flags);

int main(int argc, char **argv) {
    if (argc != 2) {
        fprintf(stderr, "Usage: sbopenurl <url>\n");
        return 1;
    }

    CFURLRef cu = CFURLCreateWithBytes(NULL, argv[1], strlen(argv[1]), kCFStringEncodingUTF8, NULL);
    if (!cu) {
        fprintf(stderr, "Invalid URL\n");
        return 1;
    }

    int fd = dup(2);
    close(2);
    bool ret = SBSOpenSensitiveURLAndUnlock(cu, 1);
    if (!ret) {
        dup2(fd, 2);
        fprintf(stderr, "SBSOpenSensitiveURLAndUnlock failed\n");
        return 1;
    }

    return 0;
}
```

##### Compilation and Entitlements
To build this program, use the following commands:

```sh
/Developer/Platforms/iPhoneOS.platform/Developer/usr/bin/gcc -x objective-c -arch armv6 -isysroot /Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS5.0.sdk/ -F /Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS5.0.sdk/System/Library/PrivateFrameworks -g -framework Foundation -framework SpringBoardServices -o sbopenurl sbopenurl.c
```

You also need to sign the binary with the appropriate entitlements:

```sh
codesign -fs "iPhone Developer" --entitlements ent.plist sbopenurl
```

The `ent.plist` file should contain the necessary entitlements:

```xml
<key>com.apple.springboard.debugapplications</key>
<true/>
<key>com.apple.springboard.opensensitiveurl</key>
<true/>
```

##### Usage
Transfer the compiled program to your iOS device and use it as a replacement for `open`. The modified `crash` script can be used to launch MobileSafari against a URL and detect crashes:

```sh
#!/bin/bash
url=$1
sleeptime=$2
filename=/private/var/mobile/Library/Logs/CrashReporter/LatestCrash-MobileSafari.plist

rm $filename 2> /dev/null
echo "Going to do $url"
/var/root/sbopenurl $url
sleep $sleeptime
cat $filename 2>/dev/null
/usr/bin/killall -9 MobileSafari 2>/dev/null
```

Run the script as follows:

```sh
./crash http://192.168.1.2/a/62.pdf 6
```

#### Fuzzing PPT Files

When running the fuzzer, you may encounter bugs. For example, the following crash report is from a PPT file fuzzing session:

```sh
# ./crash http://192.168.1.2/bad.ppt 10
Going to do http://192.168.1.2/bad.ppt
...
AutoSubmitted
SysInfoCrashReporterKey
411e2ce88eec340ad40d98f220a2238d3696254c
bug_type
109
description
Incident Identifier: 7A75E653-019B-44AC-BE54-271959167450
CrashReporter Key: 411e2ce88eec340ad40d98f220a2238d3696254c
Hardware Model: iPhone3,1
Process: MobileSafari [1103]
Path: /Applications/MobileSafari.app/MobileSafari
Identifier: MobileSafari
Version: ??? (???)
Code Type: ARM (Native)
Parent Process: launchd [1]
Date/Time: 2011-12-18 21:56:57.053 -0600
OS Version: iPhone OS 5.0.1 (9A405)
Report Version: 104
Exception Type: EXC_BAD_ACCESS (SIGSEGV)
Exception Codes: KERN_INVALID_ADDRESS at 0x0000002c
Crashed Thread: 10
...
Thread 10 Crashed:
0 OfficeImport 0x383594a0 0x3813e000 + 2208928
1 OfficeImport 0x381bdc82 0x3813e000 + 523394
2 OfficeImport 0x381cbbe 0x3813e000 + 519102
3 OfficeImport 0x381bb990 0x3813e000 + 514448
4 OfficeImport 0x38148010 0x3813e000 + 40976
5 OfficeImport 0x38147b94 0x3813e000 + 39828
...
Thread 10 crashed with ARM Thread State:
r0: 0x00000024 r1: 0x00000000 r2: 0x00000000 r3: 0x00000000
r4: 0x00000000 r5: 0x0ecbece8 r6: 0x00000000 r7: 0x04fa8620
r8: 0x002d3c90 r9: 0x00000003 r10: 0x00000003 r11: 0x0ecc43b0
ip: 0x04fa8620 sp: 0x04fa8620 lr: 0x381bdc89 pc: 0x383594a0
cpsr: 0x00000030
```

#### Fuzzing SMS

SMS is a significant attack vector in iOS due to its nature of unannounced and unsolicited message delivery. Hereâ€™s an overview of how to fuzz SMS handling in iOS.

##### SMS Basics
SMS is a communication protocol designed for GSM networks, using the control channel for message transmission. Messages are limited to 140 bytes or 160 7-bit characters. SMS can deliver text, binary data, and other types of content.

##### SMS Handling in iOS
iOS uses two processors: the application processor and the baseband processor. The baseband processor handles cellular network communication and communicates with the application processor via AT commands.

When an SMSC delivers an SMS message to the iPhone, the modem sends an unsolicited AT command result code to the CommCenter process. The result code includes the message in hexadecimal format.

##### Focusing on PDU Mode
SMS has two modes: text mode and PDU mode. PDU mode supports more features and is more widely supported by modems. This section focuses on PDU mode for incoming SMS-DELIVER messages.

Example of an unsolicited AT result code for an SMS-DELIVER message in PDU mode:

```sh
+CMT: ,30
0791947106004034040D91947196466656F8000090108211421540
0BE8329BFD4697D9EC377D
```

The `CMT` result code is used for delivering SMS messages in iOS.

#### Conclusion
This chapter provides a comprehensive guide to fuzzing iOS applications, focusing on MobileSafari and SMS handling. By following the provided steps and examples, you can effectively identify and analyze potential vulnerabilities in these components.