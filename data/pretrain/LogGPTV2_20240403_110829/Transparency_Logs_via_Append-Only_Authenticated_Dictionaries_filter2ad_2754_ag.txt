and Verified Builds. In USENIX Security ’17.
[79] Alina Oprea and Kevin D. Bowers. 2009. Authentic Time-Stamps for Archival
Storage. In ESORICS’09.
[80] Mark H. Overmars. 1987. Design of Dynamic Data Structures.
[81] Mark H. Overmars and Jan van Leeuwen. 1981. Worst-case optimal insertion
and deletion methods for decomposable searching problems. Inform. Process.
Lett. 12, 4 (1981).
[82] Charalampos Papamanthou and Roberto Tamassia. 2007. Time and Space Effi-
cient Algorithms for Two-Party Authenticated Data Structures. In Information
and Communications Security.
Insynd: Improved Privacy-Preserving
[83] Roel Peeters and Tobias Pulls. 2016.
Transparency Logging. In ESORICS’16.
[84] Raluca Ada Popa, Emily Stark, Jonas Helfer, Steven Valdez, Nickolai Zeldovich,
M. Frans Kaashoek, and Hari Balakrishnan. 2014. Building Web Applications
on Top of Encrypted Data Using Mylar. In NSDI’14.
[85] Franco P. Preparata and Dilip V. Sarwate. 1977. Computational Fourier Trans-
forms Complexity of Over Finite Fields. Math. Comp. 31, 139 (1977).
[86] Tobias Pulls and Roel Peeters. 2015. Balloon: A Forward-Secure Append-Only
Persistent Authenticated Data Structure. In ESORICS’15.
[87] Leonid Reyzin and Sophia Yakoubov. 2016. Efficient Asynchronous Accumula-
tors for Distributed PKI. In Security and Cryptography for Networks.
[88] Mark D. Ryan. 2014. Enhanced certificate transparency and end-to-end en-
crypted mail. In NDSS’14.
[89] Tomas Sander, Amnon Ta-Shma, and Moti Yung. 2001. Blind, Auditable Mem-
bership Proofs. In Financial Cryptography ’01.
[90] SCIPR Lab. 2016. libff. https://github.com/scipr-lab/libff. Accessed: 2018-07-28.
[91] SCIPR Lab. 2016.
libfqfft. https://github.com/scipr-lab/libfqfft. Accessed:
2018-07-28.
[92] Victor Shoup. 2016. libntl. https://www.shoup.net/ntl/. Accessed: 2018-07-28.
[93] Ryan Sleevi. 2017. Certificate Transparency in Chrome - Change to Enforcement
Date. https://groups.google.com/a/chromium.org/forum/#!msg/ct-policy/sz_
3W_xKBNY/6jq2ghJXBAAJ. Accessed: 2018-04-20.
[94] E. Syta, I. Tamas, D. Visher, D. I. Wolinsky, P. Jovanovic, L. Gasser, N. Gailly, I.
Khoffi, and B. Ford. 2016. Keeping Authorities “Honest or Bust” with Decentral-
ized Witness Cosigning. In IEEE S&P’16.
[95] Pawel Szalachowski, Stephanos Matsumoto, and Adrian Perrig. 2014. PoliCert:
Secure and Flexible TLS Certificate Management. In ACM CCS’14.
[96] Alin Tomescu and Srinivas Devadas. 2017. Catena: Efficient Non-equivocation
via Bitcoin. In IEEE S&P’17.
[97] Jelle van den Hooff, M Frans Kaashoek, and Nickolai Zeldovich. 2014. VerSum:
Verifiable Computations over Large Public Logs. In ACM CCS’14.
[98] Joachim von zur Gathen and Jurgen Gerhard. 2013. Fast Euclidean Algorithm.
In Modern Computer Algebra (3rd ed.). Cambridge University Press, New York,
NY, USA, Chapter 11, 313–333.
[99] Joachim von zur Gathen and Jurgen Gerhard. 2013. Fast Multiplication. In
Modern Computer Algebra (3rd ed.). Cambridge University Press, New York, NY,
USA, Chapter 8, 221–254.
[100] Joachim von zur Gathen and Jurgen Gerhard. 2013. Fast polynomial evaluation
and interpolation. In Modern Computer Algebra (3rd ed.). Cambridge University
Press, New York, NY, USA, Chapter 10, 295–310.
[101] Riad S. Wahby, Ioanna Tzialla, abhi shelat, Justin Thaler, and Michael Walfish.
2018. Doubly-Efficient zkSNARKs Without Trusted Setup. In IEEE S&P’18.
[102] Gavin Wood. 2015. Ethereum: A Secure Decentralised Generalised Transaction
Ledger. http://gavwood.com/paper.pdf. Accessed: 2016-05-15.
[103] Howard Wu, Wenting Zheng, Alessandro Chiesa, Raluca Ada Popa, and Ion
Stoica. 2018. DIZK: A Distributed Zero Knowledge Proof System. In USENIX
Security ’18.
[104] Jiangshan Yu, Vincent Cheval, and Mark Ryan. 2016. DTKI: A New Formalized
PKI with Verifiable Trusted Parties. Comput. J. 59, 11 (2016).
[105] Zcash. 2017. What is Jubjub. https://z.cash/technology/jubjub/. Accessed:
2019-02-03.
A CRYPTOGRAPHIC ASSUMPTIONS
Definition A.1 (Bilinear pairing parameters). Let G(·) be a ran-
domized polynomial algorithm with input a security parameter λ.
Then, ⟨G, GT , p, д, e⟩ ← G(1λ ) are called bilinear pairing parame-
ters if G and GT are cyclic groups of prime order p where discrete
log is hard, G = ⟨д⟩ (i.e., G has generator д) and if e is a bilinear
map, e : G × G → GT such that GT = ⟨e (д, д)⟩.
Our security analysis utilizes the following two cryptographic
assumptions over elliptic curve groups with bilinear pairings.
Definition A.2 (q-SBDH Assumption). Given security parame-
ter λ, bilinear pairing parameters ⟨G, GT , p, д, e⟩ ← G(1λ ), public
, . . . , дsq⟩ for some q = poly(λ) and some s
parameters ⟨д, дs , дs2
chosen uniformly at random from Z∗
p, no probabilistic polynomial-
time adversary can output a pair ⟨c, e (д, д)
s +c ⟩ for some c ∈ Zp,
except with probability negligible in λ.
Definition A.3 (q-PKE Assumption). The q-power knowledge of
exponent assumption holds for G if for all probabilistic polynomial-
time adversaries A, there exists a probabilistic polynomial time ex-
tractor χA such that for all benign auxiliary inputs z ∈ {0, 1}poly(λ)
1
 = negl(λ)
Pr
⟨G, GT , p, д, e⟩ ← G(1λ );⟨s, τ⟩ ← Z∗
p;
σ ← ⟨G, GT , p, д, e, PPq (s, τ )⟩;
⟨c, ˆc; a0, a1, . . . , aq⟩ ← (A||χA)(σ , z) :
ˆc = cτ ∧ c (cid:44) д
i =0 ai s i
(cid:81)q
where ⟨y1; y2⟩ ← (A||χA)(x ) means A returns y1 on input x and
χA returns y2 given the same input x and A’s random tape. Aux-
iliary input z is required to be drawn from a benign distribution
to avoid known negative results associated with knowledge-type
assumptions [15, 22].
B AAS ALGORITHMS
Here, we give detailed algorithms that implement our AAS from
Section 3. Recall that our AAS is just a forest of BPTs with corre-
sponding BFTs. In particular, observe that each forest node has a
BPT accumulator associated with it, while root nodes in the forest
have BFTs associated with them. Our algorithms described below
operate on this forest, adding new leaves, merging nodes in the
forest and computing BFTs in the roots.
Trees notation. The | symbol denotes string concatenation. A
tree is a set of nodes denoted by binary strings in a canonical
way. The root of a tree is denoted by the empty string ε and the
left and right children of a node w are denoted by w|0 and w|1
respectively. If b ∈ {0, 1}, then the sibling of w = v|b is denoted
by sibling(w ) = v|b, where b = 1 − b. A path from one node v
to its ancestor node w is denoted by path[v, w] = {u1 = v, u2 =
parent(u1), . . . , uℓ = parent(uℓ−1) = w}. The parent node of v =
w|b is denoted by parent(v) = parent(w|b) = w. We also use
path[v, w ) = path[v, w] − {w}.
Forest notation. Let Fi denote a forest of up to β leaves that only
has i leaves in it (e.g., see Figure 3). Intuitively, a forest is a set of
trees where each tree’s size is a unique power of two (e.g., see F5
in Figure 3). The unique tree sizes are maintained by constantly
merging trees of the same size. Let binβ (x ) denote the ⌈log β⌉-bit
binary expansion of a number x (e.g., bin14 (6) = 0110). (Note that
bin1 (x ) = ε,∀x because ⌈log 1⌉ = 0.) In our AAS, binβ (i) denotes
the ith inserted leaf, where i starts at 0 (e.g., see leaves 000 through
111 in F5 in Figure 3). Let roots(Fi ) denote all the roots of all the trees
in the forest (e.g., roots(F5) = {0, 111} in Figure 3). Let leaves(Fi )
Session 6C: Secure Computing VICCS ’19, November 11–15, 2019, London, United Kingdom1312denote all the leaves in the forest (e.g., leaves(F3) = {000, 001, 010}
in Figure 3).
AAS notation. Note that assert(·) ensures a condition is true or
fails the calling function otherwise. Let Dom( f ) be the domain of
a function f . We use f (x ) = ⊥ to indicate x (cid:60) Dom( f ). Let Si
denote our AAS with i elements. Each node w in the forest stores
extractable accumulators aw , ˆaw of its BPT together with a Merkle
hash hw . Internal nodes (i.e., non-roots) store a subset proof πw
between aw and aparent(w ). The digest di of Si maps each root
r to its Merkle hash hr . Every root r stores a disjointness proof
ψr between its BPT and BFT. For simplicity, we assume server
algorithms implicitly parse out the bolded blue variables from
Si.
Server algorithms. Setup(·) generates large enough q-PKE public
parameters PPq (s, τ ) (see Definition A.3), given an upper bound
β on the number of elements. Importantly, the server forgets the
trapdoors s and τ used to generate the public parameters. In other
words, this is a trusted setup phase (see Section 7).
Algorithm 1 Computes public parameters (trusted setup)
1: function Setup(1λ, β) → (pp, V K )
q ← (2λ + 1)ℓ
2:
$← Fp
3:
4:
ℓ ← 2⌊log β⌋
$← Fp
s
return (((G, GT , p, д, e (·, ·)), β, PPq (s, τ )), V K )
▷ Generates q-PKE public parameters
(G, GT , p, д, e (·, ·)) ← G(1λ )
)2λ+1
i =0 , дτ )
V K = ((дsi
τ
Sw ← {k }
▷ Create new leaf w for element k
Append(·) creates a new leaf ℓ for the element k (Lines 2 to 3).
Recursively merges equal-sized BPTs in the forest, as described in
Section 4 (Lines 5 to 9). In this process, computes subset proofs
between old BPT roots and the new BPT. Merging ends when the
newly created BPT w has no equal-sized BPT to be merged with.
Recall from Section 2.1 that HF maps elements to be accumulated
to field elements in Fp.
Algorithm 2 Appends a new ith element to the AAS, i ∈ [0, β − 1]
1: function Append(pp, Si, di, k) → (Si +1, di +1)
w ← binβ (i )
2:
(αw , aw , ·) ← Accum(P (Sw )) hw ← H (w |⊥|aw |⊥)
3:
▷ “Merge” old BPT roots with new BPT root (recursively)
4:
while sibling(w ) ∈ roots(Fi ) do
5:
ℓ ← sibling(w )
6:
(αp, ap, ˆap ) ← Accum(P (Sp ))
7:
(·, π ℓ, ·) ← Accum(P (Sp \ Sℓ ))
8:
(·, π w , ·) ← Accum(P (Sp \ Sw ))
9:
▷ Invariant: w is a new root in Fi +1. Next, computes w’s frontier.
10:
(ϕw , σ w ) ← CreateFrontier(F (Sw ))
11:
(y, z ) ← ExtEuclideanAlg(αw , ϕw )
ψw ← (дy (s ), дz (s ) )
12:
Store updated AAS state (i.e., the bolded blue variables) into Si +1
13:
di +1 (r ) ← hr , ∀r ∈ roots(Fi +1)
14:
return Si +1, di +1
15:
16: function Accum(T )
17:
return (α, дα (s ), дτ α (s ) ) where α (x ) =(cid:81)
If k is in the set, ProveMemb(·) sends a Merkle path to k’s leaf
in some tree with root r (Lines 3 to 5) via ProvePath(·) (see Algo-
rithm 3). This path contains subset proofs between every node’s
accumulator and its parent node’s accumulator. If k is not in the
set, then ProveMemb(·) sends frontier proofs in each BFT in the
forest (Lines 6 to 8) via ProveFrontier(·) (see Algorithm 6).
hp = H (p|hℓ |ap |hw )
w∈T (x − HF (w ))
▷ Set new digest
p ← parent(w )
Sp ← Sℓ ∪ Sw
w ← p
else
▷ Construct Merkle path to element
b ← 1
▷ Prove non-membership in all BFTs
Let ℓ ∈ leaves(Fi ) be the leaf where k is stored or ⊥ if k (cid:60) Si
if k ∈ Si then
Let r ∈ roots(Fi ) be the root of the tree where k is stored
π ← ProvePath(Si, ℓ, r, ⊥)
χr ← ProveFrontier(Si, r, k ), ∀r ∈ roots(Fi )
π ← ProveRootAccs(Si, π ) b ← 0
Algorithm 3 Constructs a (non)membership proof
1: function ProveMemb(pp, Si, k) → (b, π )
2:
3:
4:
5:
6:
7:
8:
9:
10: function ProvePath(Si, u, r, π ) → π
11:
12:
13:
14: