discusses  newly  formulated  conflict  resolution  policies; 
some of them specify DTP policy with varying degrees of 
flexibility. 
4.3.2.1 Localized DTP (LDTP). DTP policy resolves any 
conflict in favor of denial. This is rather restrictive since it 
means the more rules a user satisfies, the higher is the risk 
that he might be denied access to a role due to a conflict in 
authorization  which  is  counter-intuitive.  We  propose 
modifying  the  DTP  policy  such  that  the  conflict  among 
unrelated rules is resolved in favor of permission. In other 
words, 
to  conflict  among 
comparable  rules.  We  name  the  modified  policy:  the 
Localized  DTP,  or  LDTP  for  short.  Based  on  this, 
applying  the  LDTP  policy  on  the  three  cases  of  conflict 
mentioned in the previous section results in the following 
authorizations:
the  denial 
localized 
is 
Case 1: (u,r) ∈ URAuth i.e. u is authorized to activate 
role r.
Case 2: (u,r) ∉ URAuth 
Case 3: (u,r) ∉ URAuth 
4.3.2.2 Flexible DTP (FDTP). This policy enforces DTP 
in cases where conflict occurs among authorization rules 
but it enforces PTP if conflict occurs between the implicit 
assignment and explicit assignment. Thus, when FDTP is 
enforced, in the example of the hospital discussed above, 
an intern can work as an ER doctor via can_assume
relation without the need to remove rule2 from the 
authorization rules set. In other words, FDTP policy 
authorizes u to role r if there is no conflict wrt role r, or if 
there is a can_assume relation which authorizes u to role r
even if u receives a negative authorization wrt to r.
Applying the FDTP policy on the three cases of conflict 
mentioned in the previous section results in the following 
authorizations:
Case 1: (u,r) ∉ URAuth 
Case 2: (u,r) ∉ URAuth 
Case 3: (u,r) ∈ URAuth 
In  Table  2  we  summary  how  the  afore-discussed 
policies compare and contrast.  
Table 2 
Conflicting Parties 
Comparable 
Non-
Rules and SSO-
Rules 
comparable 
initiated 
Rules 
Policy 
↓
DTP 
PTP 
LDTP 
FDTP 
Denial 
Permission 
Denial 
Denial 
Denial 
Permission 
Permission 
Denial 
authorization 
(can_assume and 
can_delegate)
Denial 
Permission 
Denial 
Permission  
The entry at the intersection of the fourth row with the 
third  column,  for  example,  means  that  under  LDTP  if  the 
conflicting  parties  are  non-comparable 
then 
permission prevails.  
rules, 
4.3.2.3 Weighted Rules. Authorization rules are assigned 
weights according to criteria determined by the enterprise
such as: 
a. The  seniority  of  the  rule,  so  rule3  has  higher  weight 
than  rule5  in  Figure  4  and,  thus,  the  negative 
authorization is enforced.  
b. When  rules  administration  is  decentralized,  the  SSO 
may  authorize  a  junior  security  officer  (JSO)  to 
administer  a  specific  group  of  rules.  Conflict  may 
arise  among  rules  specified  by  SSO  and  JSO.  One 
way  to  resolve  this  is  by  considering  the  seniority  of 
the rule issuer. Based on this, an SSO-issued rule has 
higher  weight  than  a  rule  issued  by  a  junior  security 
officer  and,  thus,  the  authorization  obtained  via  the 
higher rule prevails. 
4.3.2.4 Labeled  Roles.  This  policy  requires  assigning 
label  to  each  role.  This  label  could  be  either  one  of  the 
following  values:  DTP  or PTP.  If  rg  and  rh  are  roles  such 
that  they  are  respectively  labeled  DTP  and  PTP,  then  in 
case of conflict wrt rg, DTP is always enforced, while PTP 
is  enforced  in  case  of  rh.  The  notion  and  notation  of  role 
ranges  [17]  could  be  utilized 
this  context.  An 
assign_label relation can be defined as follows: 
in 
assign_label ⊆ {DTP, PTP}× 2IR
So,  assign_label(DTP,  [rg,  rh])  assigns  DTP  label  to  all 
roles in the range [rg, rh].
4.3.3  Users'  Authorization.  We  have  discussed  several 
policies that can be deployed to resolve conflicts that may 
arise  among  authorization  appointed  to  a  specific  user.  In 
this section, we modify the definition of the set "URAuth" 
under selected policies  to reflect the impact of conflict, if 
it exists, on user’s authorization. While it is possible to do 
Proceedings of the 20th Annual Computer Security Applications Conference (ACSAC’04) 
1063-9527/04 $ 20.00 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:08:40 UTC from IEEE Xplore.  Restrictions apply. 
6
this with respect to all the conflict resolution policies that 
we  have  discussed,  for  the  sake  of  brevity,  we  choose  to 
focus on PTP, DTP, LDTP and FDTP.  
Definition 1 
1. URAuth, A, and B are imported from Model A, and are 
       ∈RHS(aei)}
mentioned here for convenience:  
URAuth= {(u,r)| (∃rulei)[(u, aei) ∈U_AE ∧ r
A= RHS of URAuth above. 
B= (∃rulej) [  (u, aej)∈ U_AE ∧ r’ ∈RHS(aej) ∧
can_assume(r’, r, t, d ) ∧ can_assume has not expired ] 
2. Let  C  =  ¬  (∃rulej)[(u,  aej) ∈U_AE  ∧ ¬r ∈RHS(aej)]
which means that user u has a negative authorization wrt
r via satisfying a rule rulej . 
→ aei) ∨ (aei
3. Let C’= ¬ (∃rulej)[(u, aej) ∈U_AE ∧ ¬r ∈RHS(aej) ∧ ( 
→ aej)] which means that user u has a 
(aej
negative  authorization  wrt r via  satisfying  another  rule 
rulej  that  is  comparable  to  a  rule  that  positively 
authorizes u to r.
4. URAuth  varies according to the policy enforced: 
a. PTP:  URAtuh  in  PTP  with/without  can_assume  is 
similar to the corresponding URAtuh in Model A. 
b. DTP : URAuthDTP = A ∧ C , or 
c.  DTP with can_assume: URAuthDTP  with  can_assume =  (A
URAuthDTP  =  {(u,r)|  (∃rulei)[(u,  aei) ∈U_AE  ∧ r
∈RHS(aei) ∧ ¬  (∃rulej)[(u,  aej) ∈U_AE  ∧ ¬r
∈RHS(aej)]}
∨ B) ∧ C , or 
URAuthDTP  with  can_assume  =  {(u,r)|  ((∃rulei)[(u,  aei)
∈U_AE ∧ r ∈RHS(aei)]
∨  (∃rulej)  [(u,  aej)∈  U_AE  ∧ r’ ∈RHS(aej) ∧
can_assume(r’, r, t, d ) ∧ can_assume has not expired 
]) ∧ ¬ (∃rulej)[(u, aej) ∈U_AE ∧ ¬r ∈RHS(aej)]}
→ aej)] )
→ aei) ∨ (aei
e. LDTP  with  can_assume:  URAuthLDTP  with  can_assume  = 
d. LDTP:  We  modify  the  term  C  to  require  the 
conflicting  rules  to  be  comparable.  Call  the  modified 
term C', thus URAuthLDTP = A ∧ C'
URAuthLDTP  =  {(u,r)|  ((∃rulei)[(u,  aei) ∈U_AE  ∧ r
∈RHS(aei)] ∧ ¬  (∃rulej)[(u,  aej) ∈U_AE  ∧ ¬r
∈RHS(aej) ∧ ( (aej
(A ∨ B) ∧ C'
URAuthLDTP  with  can_assume  =  {(u,r)|  ((∃rulei)[(u,  aei)
∈U_AE ∧ r ∈RHS(aei)]
∨ (∃rulej) [(u, aej)∈ U_AE ∧ r’ ∈RHS(aej) ∧
can_assume(r’, r, t, d ) ∧ can_assume has not expired 
])
∧ ¬ (∃rulej)[(u, aej) ∈U_AE ∧ ¬r ∈RHS(aej) ∧ ( (aej
→ aei) ∨ (aei
FDTP: URAuthFDTP = URAuthDTP
f.
g. FDTP with can_assume: URAuthFDTP with can_assume = (A
→ aej)] } 
∧ C ) ∨ B
URAuthFDTP  with  can_assume  =  {(u,r)|  ((∃rulei)[(u,  aei)
∈U_AE ∧ r ∈RHS(aei)]
∧ ¬ (∃rulej)[(u, aej) ∈U_AE ∧ ¬r ∈RHS(aej) ] ) 
∨ (∃rulej) [(u, aej)∈ U_AE ∧ r’ ∈RHS(aej) ∧
can_assume (r’, r, t, d ) ∧ can_assume has not expired 
]}
Table  3  summaries  the  definition  of  URAuth  under 
different policies. 
Table 3 
Policy 
URAuth 
Without 
With can_assume
can_assume 
PTP 
DTP 
LDTP 
FDTP 
A
A ∧ C 
A ∧ C' 
A ∧ C 
( A ∨ B)
( A ∨ B) ∧ C
(A ∨ B) ∧ C'
(A ∧ C ) ∨ B
4.3.4  Impact  on  Roles  Hierarchies.    The  concept  of  a 
given  role  hierarchy  (GRH)  that  represents  the  current 
business practice of the enterprise is discussed in [11] and 
[16].  The  GRH  is  identical  to  role  hierarchies  defined  in 
RBAC96, that is, it is permission-driven: 
≥
GRH rj) → rj permissions
⊆ r j permissions
(ri
where  ≥
GRH  has  the  same  semantics  as  in  RBAC96.  As 
such,  inheritance  of  permissions  flows  upward  in  the 
GRH. When a GRH is present, rulei such that aei (cid:159) (cid:329)rg
may have one of the following two possible semantics: 
a. Propagation  prohibited:  Users  who  satisfy  aei  should 
the 
from  assuming 
rg.  This 
be  prohibited 
interpretation given previously. 
is 
b. Propagation 
≥
allowed:  Negative 
authorization 
propagates  upward  in  GRH  such  that  users  who 
satisfy  aei  should  be  prohibited  not  only  from 
assuming rg, but also  from assuming any role rk such 
GRH  rg.  This  ensures  that  the  user  cannot 
that  rk
the  system  by  assuming  rk,  whose 
circumvent 
permissions  are  a  superset  of  rg’s.  From  a  functional 
perspective,  this  may  not  be  desirable  since  it  is 
usually the case that the prohibition is targeting users 
who  merely  satisfy  rulei,  but  not  those  who  can 
assume  roles  higher  in  the  hierarchy  by  virtue  of 
satisfying  rules  senior  to  rulei,  which  usually  means 
that  they  meet  higher  security  requirement.  Allowing 
the  negative  authorization 
to  propagate  upward 
requires  modification  of  the  definition  of  URAuth. 
For a user to be authorized to a role r, not only do we 
require  that  u  has  positive  authorization  wrt  r  and 
does  not  have  negative  authorization  wrt r,  but  we 
that  u  does  not  have  negative 
also 
authorization wrt any role r' such that r ≥ GRH r' i.e. r is 
senior to r' in GRH. 
require 
Proceedings of the 20th Annual Computer Security Applications Conference (ACSAC’04) 
1063-9527/04 $ 20.00 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:08:40 UTC from IEEE Xplore.  Restrictions apply. 
7
Definition 2 
URAuth definition is modified to take propagation of 
negative  authorization  into  account.  We  need  to  modify 
term C as follows: 
Term C becomes: Cmodified = ¬ (∃rulej)[(u, aej) ∈U_AE ∧
¬r' ∈RHS(aej) ∧ r ≥GRH r']
Notice that we can replace the term C' in Definition 8 
with  Cmodified    since  r ≥GRH  r'  implies  that  the  rules  that 
generate r  and r' are comparable.  
4.3.5 User State Diagram. Suppose that the system that 
implements RB-RBAC has the following set of rules only: 
rulei: aei (cid:159)  rg
rulej: aej (cid:159) rh
rulek: aek (cid:159) (cid:329)rh
Let’s consider the following scenarios assuming DTP 
to 
that 
implements  RB-RBAC 
is in effect and using Figure 2: 
Scenario  1:  Assume  that  u  satisfies  rulej only  and,  thus, 
(u, rh) ∈URAuth. In other words, u could be in any of the 
following  states  wrt  rh:  P,  D,  or  Act.  A  change  in  u’s 
attributes  or  in  the  authorization  rules  may  cause  the 
invoke  rulek
system 
assigning  negative  authorization  to  u wrt rh.  Accordingly, 
(u, rh) ∉URAuth and u’s state will be changed from P to N 
or  from  D  or  Act  to  R.  The  arrows  labeled  ae/r  represent 
this.  
Scenario 2: Assume that u satisfies rulei only. Hence, (u,
rg) ∈URAuth.  As  a  result,  u  could  be  in  any  of  the 
following  states  wrt  rg:  P,  D,  or  Act.  A  change  in  u’s 
attributes  or  in  the  authorization  rules  that  cause  the 
invoke  rulek
system 
≥ rh and 
assigning  negative authorization to u wrt rh. If rg
propagation  is  allowed,  u’s  state  will  be  changed  as  in 
scenario 1.   
that 
implements  RB-RBAC 