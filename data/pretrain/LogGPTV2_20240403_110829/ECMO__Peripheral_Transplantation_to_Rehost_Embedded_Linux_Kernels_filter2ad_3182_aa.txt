title:ECMO: Peripheral Transplantation to Rehost Embedded Linux Kernels
author:Muhui Jiang and
Lin Ma and
Yajin Zhou and
Qiang Liu and
Cen Zhang and
Zhi Wang and
Xiapu Luo and
Lei Wu and
Kui Ren
ECMO: Peripheral Transplantation to Rehost Embedded Linux
Muhui Jiang
The Hong Kong Polytechnic University,
Zhejiang University,
China
PI:EMAIL
Kernels
Lin Ma
Yajin Zhou∗
Qiang Liu
Zhejiang University, China
{linma,yajin_zhou,qiangliu}@zju.edu.cn
Cen Zhang
Nanyang Technological University,
Singapore
PI:EMAIL
Zhi Wang
Xiapu Luo
Florida State University,
The Hong Kong Polytechnic University,
USA
China
PI:EMAIL
PI:EMAIL
Lei Wu
Kui Ren
Zhejiang University, China
{lei_wu,kuiren}@zju.edu.cn
ABSTRACT
Dynamic analysis based on the full-system emulator QEMU is
widely used for various purposes. However, it is challenging to
run firmware images of embedded devices in QEMU, especially the
process to boot the Linux kernel (we call this process rehosting
the Linux kernel in this paper). That’s because embedded devices
usually use different system-on-chips (SoCs) from multiple ven-
dors and only a limited number of SoCs are currently supported in
QEMU.
In this work, we propose a technique called peripheral trans-
plantation. The main idea is to transplant the device drivers of
designated peripherals into the Linux kernel binary. By doing so,
it can replace the peripherals in the kernel that are currently un-
supported in QEMU with supported ones, thus making the Linux
kernel rehostable. After that, various applications can be built.
We implemented this technique inside a prototype system called
ECMO and applied it to 815 firmware images, which consist of 20
kernel versions and 37 device models. The result shows that ECMO
can successfully transplant peripherals for all the 815 Linux kernels.
Among them, 710 kernels can be successfully rehosted, i.e., launch-
ing a user-space shell (87.1% success rate). The failed cases are
mainly because the root file system format (ramfs) is not supported
by the kernel. Meanwhile, we are able to inject rather complex
drivers (i.e., NIC driver) for all the rehosted Linux kernels by in-
stalling kernel modules. We further build three applications, i.e.,
kernel crash analysis, rootkit forensic analysis, and kernel fuzzing,
based on the rehosted kernels to demonstrate the usage scenarios
of ECMO.
∗Corresponding author.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea
© 2021 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-8454-4/21/11. . . $15.00
https://doi.org/10.1145/3460120.3484753
CCS CONCEPTS
• Security and privacy → Virtualization and security; Oper-
ating systems security.
KEYWORDS
Rehosting, Linux Kernel, Peripheral Transplantation
ACM Reference Format:
Muhui Jiang, Lin Ma, Yajin Zhou, Qiang Liu, Cen Zhang, Zhi Wang, Xiapu
Luo, Lei Wu, and Kui Ren. 2021. ECMO: Peripheral Transplantation to
Rehost Embedded Linux Kernels. In Proceedings of the 2021 ACM SIGSAC
Conference on Computer and Communications Security (CCS ’21), November
15–19, 2021, Virtual Event, Republic of Korea. ACM, New York, NY, USA,
15 pages. https://doi.org/10.1145/3460120.3484753
1 INTRODUCTION
IoT devices (or embedded devices) are becoming popular [7], many
of which run Linux-based operating systems [30]. At the same
time, hundreds of vulnerabilities are discovered every year for the
Linux kernel [22]. Once the devices are compromised, attackers
can control them to launch further attacks. As such, the security
of embedded devices, especially the kernel, deserves a thorough
analysis.
Dynamic analysis has been widely used for various purposes [31,
41, 44, 47, 51, 70]. It can monitor the runtime behavior of the target
system, complementing the static analysis [30, 45, 55, 61]. Rehost-
ing, also known as emulation, is used to run a target system inside
an emulated environment, e.g., QEMU, and provides the capability
to introspect the runtime state. Based on this capability, different
applications, e.g., kernel crash analysis, rootkit forensic analysis,
and kernel fuzzing, can be built. Running the Linux kernel in QEMU
for the desktop system is a solved problem. However, rehosting
embedded system is challenging. First, rehosting Linux kernel is
dependent on the emulation of peripherals. Without the right emu-
lation of these peripherals, Linux kernel may halt or crash during
the rehosting process. Second, peripherals vary widely. Due to the
diverse peripherals in the wild, it is not practical for QEMU to
support all kinds of peripherals in any SoC. Third, vendors may
not strictly follow the GPL license [35, 42], resulting in the lack of
public information (e.g., specifications, datasheets, and source code).
These obstruct the diagnosis of failures when adding emulation
Session 3B: Operating Systems CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea734Firmware Image
ECMO
Peripherals
to be Transplanted
Rehosted Linux Kernel
Applications &
Peripheral Drivers
Figure 1: The overview of our system (ECMO)
support of new SoCs in QEMU. Thus, how to rehost the embedded
Linux kernels in QEMU is still an open research question.
Previous research [26, 50] provides the capability of rehosting
user-space programs by running a customized Linux kernel for one
SoC that is supported in QEMU. This works well because user-space
programs mainly depend on standard system calls that are provided
by the underlying Linux kernel. Different from user-space programs,
the OS kernel interact with peripherals that are usually different in
different SoCs. Some researchers have proposed to use real devices
to perform the dynamic analysis [43, 54, 62, 69]. Such solutions
do not scale since there exist a large number of embedded devices.
Other mechanism that are for the bare-metal systems [28, 37, 52],
i.e., embedded systems without an OS kernel or having a thin layer
of abstraction, cannot be directly used to rehost the Linux kernel as
the Linux kernel is far more complicated than the bare-metal ones.
Key Insights To address the above mentioned three challenges,
we have three key insights. First, only early-boot peripherals (i.e.,
interrupt controller, timer, and UART) need to be supported during
the rehosting process. After successfully rehosting the Linux kernel,
we are able to install the different peripheral drivers in ramfs to
support the other peripherals with kernel modules. Second, Linux
kernel provides interfaces to implement drivers of these peripher-
als, which brings the chance to replace these diverse peripherals
with designated ones. Third, embedded Linux kernels are usually
modified based on the mainstream Linux kernel, which is open-
sourced. The modification mainly aims to add support for specific
peripherals while most of the other code is unchanged.
Our Approach With the insights, we propose peripheral trans-
plantation technique, which is device-independent and works towards
the Linux kernel without the need of the source code. The main idea
is, instead of manually adding emulation support of various periph-
erals in QEMU, we can transplant the device drivers of designated
peripherals into the target Linux kernel binary. It replaces the pe-
ripherals in the target Linux kernel that are currently unsupported
in QEMU with supported ones, thus making the Linux kernel re-
hostable. Specifically, our system transplants two components, i.e.,
the emulated models of peripheral into QEMU and their device
drivers into the Linux kernel (if they are not initialized originally).
Transplanting a peripheral model requires the emulation code for
specified (or simplified) peripheral and integrates it into QEMU.
This is straightforward since QEMU provides us with APIs to add
new peripheral models.
However, transplanting a driver into the Linux kernel is non-
trivial. First, we need to substitute the original (unsupported) device
driver with the transplanted one. Since the peripheral driver is ini-
tialized with indirect calls, we need to locate function pointers and
rewrite them in a stripped binary on the fly, which is challeng-
ing. Second, the transplanted driver should not affect the memory
view of the original kernel. Otherwise, the memory holding the
transplanted driver can be overwritten since the Linux kernel is
not aware of the existence of that memory region. Third, the trans-
planted driver needs to invoke APIs in the Linux kernel. Otherwise,
the transplanted driver cannot function as desired.
To overcome the difficulties of transplanting drivers, we design
and implement a new algorithm to identify the required function
pointers (Section 4.2) and introduce opaque memory (Section 4.3) to
guarantee that the transplanted driver does not affect the memory
view of the original kernel. Finally, we implement and integrate
the peripheral transplantation technique into QEMU to create a
prototype called ECMO. Figure 1 shows the overview of ECMO. It
receives the firmware image and the peripherals to be transplanted.
Then it transplants the peripherals to the Linux kernel binary to
make it rehostable in QEMU and launch a shell. Note that ECMO
focuses on transplanting the early-boot peripherals (i.e., interrupt
controller, timer, and UART), which are needed to rehost the Linux
kernel. Once the Linux kernel is rehosted, users can install different
peripheral drivers to support more peripherals with kernel modules
and build various applications to analyze the rehosted kernel.
We apply ECMO on 815 Linux kernels extracted from firmware
images, including 20 different kernel versions and 37 device mod-
els. ECMO now only supports ARM architecture, which is widely
used in embedded systems [17]. However, it does not rely on any
architecture specific feature and can be easily extended to the other
architectures (Section 6). Our experiment shows that ECMO can
successfully transplant peripherals for all 815 Linux kernels. Among
them, 710 are able to launch a shell. The failed cases are due to the
unsupported root file system format (ramfs) in the rehosted kernel.
Furthermore, we successfully install one Ethernet device driver (i.e.,
smc91x) on all the rehosted Linux kernel, which demonstrates the
capability to support more peripherals based on rehosted Linux
kernel. To demonstrate the functionality and usefulness of our sys-
tem, we build and port three applications, including kernel crash
analysis, rootkit forensic analysis, and kernel fuzzing. Note that,
the applications themselves are not the contribution of our work.
They are used to demonstrate the usage scenarios of our system.
Other applications that can be built on QEMU can also be ported.
In summary, this work makes the following main contributions.
• Novel technique We propose a device-independent technique
called peripheral transplantation that can rehost Linux kernels of
embedded devices without the availability of the source code.
• New system We implement and integrate the peripheral trans-
plantation technique into QEMU, to create a prototype system
called ECMO.
• Comprehensive evaluation We apply ECMO to 815 Linux
kernels from different images. It can transplant peripherals for
all the Linux kernels and successfully launch the shell for 710
ones.
To engage with the community, we release the source code of
our system in https://github.com/valour01/ecmo. We also provide
an online service [6] for the community.
Session 3B: Operating Systems CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea735MACHINE_START ( VERSATILE_AB , " ARM - Versatile AB ")
. atag_offset = 0 x100 ,
. map_io = versatile_map_io ,
. init_early = versatile_init_early ,
. init_irq = versatile_init_irq ,
. init_time = versatile_timer_init ,
. init_machine = versatile_init ,
. restart = versatile_restart ,
MACHINE_END
Figure 2: The machine description for ARM-Versatile AB.
1
2
3
4
5
6
7
8
9
1
2
3
4
5
6
7
8
9
10
11
12
13
// UART read call back
static uint64_t serial_mm_read ( void * opaque ,
hwaddr addr , unsigned size ) {
SerialMM *s = SERIAL_MM ( opaque );
return serial_ioport_read (&s -> serial ,
}
// register read / write call back functions
static const MemoryRegionOps serial_mm_ops = {
addr >> s -> regshift , 1) ;
. read = serial_mm_read ,
. write = serial_mm_write ,
...
};
Figure 3: The callback functions for UART emulation in
QEMU
2 BACKGROUND
2.1 Linux Kernel
Linux kernel source code can be categorized into three types ac-
cording to their functionalities. The first type is the architecture
independent code, which contains the core functionality used by
all CPU architectures. The second type is architecture dependent
code. For instance, the sub-directories under the arch/ directory
contain the code for multiple CPU architectures. The third type
is board-specific code, which is used by specific board (machine).
For instance, the directory arch/arm/versatile/ contains the code
used by the machine named versatile. The kernel compiled for one
machine usually cannot be directly booted on other machines (or
QEMU instances that emulate different machines.)
2.2 ARM Machines
Embedded systems usually use SoCs from multiple vendors with
different designs. For instance, they contain different peripherals.
Each SoC is expressed as a machine in the Linux kernel. Manu-
facturers develop the board support package (BSP) (e.g., drivers of
peripherals) so that Linux kernel can use these peripherals.
Linux kernel introduces the structure machine_desc for ARM to
describe different machines. The structure machine_desc provides
interfaces to implement BSPs. For example, Figure 2 shows an exam-
ple of one machine ARM-Versatile AB in the Linux kernel (Version
3.18.20). It initializes function pointers and data pointers with its im-
plementation. Specifically, in line 5, the function pointer init_irq is
assigned the value as versatile_init_irq. During the booting process,
the Linux kernel will invoke the function machine_desc→init_irq
to initialize the IC (interrupt controller). The same logic applies to
the function pointer init_time. Linux kernel invokes the function
machine_desc→init_time to initialize the timer.
2.3 QEMU
QEMU [16] is one of the most popular full-system emulators. It
emulates different machines by providing different machine models.
A machine model consists of CPU, memory, and different kinds
of peripheral models. To emulate a peripheral, QEMU registers
the read/write callback functions for the MMIO (memory-mapped
I/O) address space of the peripheral. Once the Linux kernel run-
ning inside QEMU reads from or writes into the address inside the
MMIO range, the registered callback functions inside QEMU will
be invoked to emulate the peripheral. Basically, it maintains an
internal state machine to implement the peripheral’s functionality.
Figure 3 shows an example of the registered callback functions for
UART emulation. Specifically, when the Linux kernel reads from
the MMIO space of the emulated UART device (e.g., 0x01C42000),
the serial_mm_read function will be invoked by QEMU to emulate
the read access.
3 CHALLENGES AND OUR SOLUTION
The main goal of our work is to rehost Linux kernel binaries that are
originally running on embedded systems in QEMU. This lays the
foundation of applications that rely on the capability to introspect
runtime states of the Linux kernel, e.g., kernel crash and vulnera-
bility analysis [31, 41], rootkit forensic analysis [56, 64], and kernel
fuzzing [51, 59].
3.1 Challenges
Rehosting the Linux kernel on QEMU faces the following chal-
lenges.
Peripheral dependency Rehosting the Linux kernel requires
QEMU to emulate the peripherals, e.g., the interrupt controller, that
the Linux kernel depends on. During the booting process, Linux
kernel will read from or write into the peripheral registers and
execute the code according to the state specified by the value of
peripheral registers. Without the emulation of these peripherals,
the rehosted kernel will halt or crash during the booting process.
Peripheral diversity SoCs vary widely [19] and different ven-
dors, e.g., Broadcom, Marvell may design and develop different
SoCs. These new SoCs introduce many new peripherals that are not