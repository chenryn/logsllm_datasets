![](img/9486bf16-31d9-4726-a3fb-d06d0fd92aeb.png)
ECS rolling deployments
在上图中，滚动部署期间会发生以下事件:
1.  对链接到 ECS 服务的`ApplicationTaskDefinition` ECS 任务定义进行配置更改，这通常是应用新版本的映像标签的更改，但也可能是对任务定义的任何更改。这将导致创建任务定义的新版本(本例中为版本 2)。
2.  ECS 服务被配置为使用新的任务定义版本，这在使用云信息管理您的 ECS 资源时会自动发生。ECS 服务的部署配置决定了 ECS 如何管理滚动部署-在上图中，ECS 必须确保在部署期间至少保持 100%的已配置所需任务数，并且可以在部署期间将任务数临时增加到 200%。假设所需的任务数为 1，这意味着 ECS 可以基于新的任务定义版本部署新的 ECS 任务，并满足部署配置。请注意，您的 ECS 群集必须有足够的资源来容纳这些部署，并且您负责管理 ECS 群集容量(也就是说，ECS 不会临时增加 ECS 群集容量来容纳部署)。您将在后面的章节中学习如何动态管理 ECS 集群容量。
3.  一旦新的 ECS 任务成功启动，ECS 将向配置负载平衡器注册新任务(在应用负载平衡器的情况下，该任务将向目标组资源注册)。负载平衡器将执行运行状况检查，以确定新任务的运行状况，一旦确认运行状况良好，新的 ECS 任务将在负载平衡器中注册，并能够接受传入的连接。
4.  ECS 现在指示负载平衡器清空现有的 ECS 任务。负载平衡器将使现有的 ECS 任务停止服务(也就是说，它不会向任务转发任何新连接)，但是将等待一段可配置的时间，以便现有连接“耗尽”或关闭。在此期间，到负载平衡器的任何新连接都将被转发到在步骤 3 中向负载平衡器注册的新 ECS 任务。
5.  排出过程完成后，负载平衡器会从目标组中完全删除旧的 ECS 任务，现在 ECS 可以终止现有的 ECS 任务。完成后，新应用任务定义的部署就完成了。
从这个描述中可以看出，部署过程非常复杂。好消息是，所有这些都是 ECS 开箱即用的——您需要理解的是，对任务定义的任何更改都将触发新的部署，并且您的部署配置(由`DeploymentConfiguration`属性确定)为您提供了对滚动部署的一些控制。
# 执行滚动部署
现在您已经了解了滚动部署是如何工作的，让我们通过更改您的 ECS 任务定义并通过云信息部署更改来查看正在进行的过程，这将触发您的 ECS 服务的滚动部署。
目前，您的云信息配置没有指定`ApplicationImageTag`参数，这意味着您的 ECS 任务定义使用了`latest`的默认值。回到第 5 章，当您将 Docker 映像发布到 ECR 时，您实际上推送了两个标签——T2 标签和 todobackend 存储库的提交散列。这为我们提供了一个很好的机会来进一步改进我们的云信息模板——通过引用提交散列，而不是`latest`标记，每当您有新版本的应用要部署时，我们总是能够触发对您的 ECS 任务定义的配置更改。
下面的示例演示了将`ApplicationImageTag`参数添加到 todobackend-aws 存储库中的`dev.cfg`文件，引用 ECR 中当前发布的映像的提交哈希:
```
ApplicationDesiredCount=1
ApplicationImageId=ami-ec957491
ApplicationImageTag=97e4abf
ApplicationSubnets=subnet-a5d3ecee,subnet-324e246f
VpcId=vpc-f8233a80
```
Adding ApplicationImageTag to the dev.cfg file
如果您现在使用`aws cloudformation deploy`命令部署您的更改，尽管您现在引用的映像与当前最新标记的映像相同，但是 CloudFormation 会将其检测为配置更改，创建 ECS 任务定义的新版本，并更新`ApplicationService` ECS 服务资源，从而触发滚动部署。
部署运行时，如果您在 ECS 控制面板中浏览到您的 ECS 服务并选择“部署”选项卡，如下图所示，您将看到两个部署 ACTIVE 部署指的是现有的 ECS 任务，而 PRIMARY 部署指的是正在部署的新 ECS 任务:
![](img/44aab8c6-3a36-47ec-b224-74861afc4181.png)
ECS service rolling deployment
最终，滚动部署过程完成后，活动部署将消失，如果您单击事件选项卡，您将看到部署期间发生的各种事件，这些事件对应于前面的描述:
![](img/adc2feb0-c12b-4822-b81d-0acf52cefc78.png)
ECS service rolling deployment events
# 创建云信息自定义资源
尽管我们的应用已经部署并正在运行，但我们显然有一个问题，那就是我们没有运行数据库迁移，这是一项必需的部署任务。我们已经处理了运行另一个部署任务，即收集静态文件，但是数据库迁移应该只作为每个部署的*单个*部署任务运行。例如，如果您正在部署服务的多个实例，您不想为您部署的每个实例运行迁移，您只想在每个部署中运行一次迁移，而不考虑服务中的实例数量。
一个显而易见的解决方案是在每次部署后手动运行迁移，但是理想情况下，您希望部署完全自动化，并确保有一个自动运行迁移的机制。cloud information 不提供允许您运行一次性 ECS 任务的资源，但是 cloud information 的一个极其强大的功能是能够创建您自己的自定义资源，这允许您执行自定义资源调配任务。创建自定义资源的一个好处是，您可以将自定义资源调配任务合并到部署各种 AWS 服务和资源的工作流中，使用 CloudFormation 框架来为您管理。
现在让我们了解如何创建一个简单的 ECS 任务运行器自定义资源，该资源将运行迁移任务，作为通过云信息创建和更新应用环境的一部分。
# 了解云信息定制资源
在开始配置云信息定制资源之前，值得讨论一下它们实际上是如何工作的，并描述组成定制资源的关键组件。
下图说明了云信息自定义资源的工作方式:
![](img/a8738f96-3ab5-46a3-95dc-d5d9216a7f06.png)
CloudFormation custom resources
在上图中，当您在云信息模板中使用自定义资源时，会发生以下步骤:
1.  您需要在您的云信息模板中定义自定义资源。自定义资源具有`AWS::CloudFormation::CustomResource`资源类型，或者`Custom::`。当 CloudFormation 遇到自定义资源时，它会寻找一个名为`ServiceToken`的特定属性，该属性为 Lambda 函数的 ARN 提供了一个应该提供自定义资源的属性。
2.  CloudFormation 调用 Lambda 函数，并以 JSON 对象的形式将自定义资源请求传递给该函数。事件有一个请求类型，它定义请求是创建、更新还是删除资源，并包括请求属性，这些属性是您可以在自定义资源定义中定义的自定义属性，将传递给 Lambda 函数。请求的另一个重要属性是响应 URL，它提供了一个预签名的 S3 URL，一旦配置完成，Lambda 函数应该在其中发布响应。
3.  Lambda 函数处理自定义资源请求，并根据请求类型和请求属性执行适当的资源供应。一旦供应完成，该功能向在定制资源请求中接收的响应 URL 发布成功或失败响应，并且在资源已经被创建或更新的情况下包括资源标识符。假设响应表示成功，则响应可以包括`Data`属性，该属性可以包括关于所提供的定制资源的有用信息，该定制资源可以使用标准的`!Sub ${.}`语法在云信息栈的其他地方引用，其中``是包括在响应的`Data`属性中的属性。
4.  云信息服务轮询响应的响应网址。一旦收到响应，CloudFormation 将解析响应并继续栈供应(或在响应指示失败的情况下回滚栈)。
# 创建自定义资源 Lambda 函数
如前一节所述，自定义资源要求您创建一个 Lambda 函数，该函数处理 cloud information 发送的传入事件，执行自定义配置操作，然后使用预签名的 S3 URL 响应 cloud information。
这听起来相当复杂，但是有许多可用的工具可以以相对简单的方式实现简单的用例，如下例所示:
```
...
...
Resources:
 EcsTaskRunner:
 Type: AWS::Lambda::Function
    DependsOn:
 - EcsTaskRunnerLogGroup
 Properties:
 FunctionName: !Sub ${AWS::StackName}-ecsTasks
 Description: !Sub ${AWS::StackName} ECS Task Runner
 Handler: index.handler
 MemorySize: 128
 Runtime: python3.6
 Timeout: 300
      Role: !Sub ${EcsTaskRunnerRole.Arn}
 Code:
 ZipFile: |
 import cfnresponse
 import boto3
 client = boto3.client('ecs')
 def handler(event, context):
 try:
              print("Received event %s" % event)
              if event['RequestType'] == 'Delete':
                cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, event['PhysicalResourceId'])
                return
              tasks = client.run_task(
                cluster=event['ResourceProperties']['Cluster'],
                taskDefinition=event['ResourceProperties']['TaskDefinition'],
                overrides=event['ResourceProperties'].get('Overrides',{}),
                count=1,
                startedBy=event['RequestId']
              )
              task = tasks['tasks'][0]['taskArn']
              print("Started ECS task %s" % task)
              waiter = client.get_waiter('tasks_stopped')
              waiter.wait(
                cluster=event['ResourceProperties']['Cluster'],
                tasks=[task],
              )
              result = client.describe_tasks(
                cluster=event['ResourceProperties']['Cluster'],
                tasks=[task]
              )
              exitCode = result['tasks'][0]['containers'][0]['exitCode']
              if exitCode > 0:
                print("ECS task %s failed with exit code %s" % (task, exitCode))
                cfnresponse.send(event, context, cfnresponse.FAILED, {}, task)
              else:
                print("ECS task %s completed successfully" % task)
                cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, task)
            except Exception as e:
              print("A failure occurred with exception %s" % e)
              cfnresponse.send(event, context, cfnresponse.FAILED, {})
 EcsTaskRunnerRole:
 Type: AWS::IAM::Role
 Properties:
 AssumeRolePolicyDocument:
 Version: "2012-10-17"
 Statement:
 - Effect: Allow
 Principal:
 Service: lambda.amazonaws.com
 Action:
 - sts:AssumeRole
 Policies:
 - PolicyName: EcsTaskRunnerPermissions
 PolicyDocument:
 Version: "2012-10-17"
 Statement:
 - Sid: EcsTasks
 Effect: Allow
 Action:
 - ecs:DescribeTasks
 - ecs:ListTasks
 - ecs:RunTask
 Resource: "*"
 Condition:
 ArnEquals:
 ecs:cluster: !Sub ${ApplicationCluster.Arn}
 - Sid: ManageLambdaLogs
 Effect: Allow
 Action:
 - logs:CreateLogStream
 - logs:PutLogEvents
 Resource: !Sub ${EcsTaskRunnerLogGroup.Arn}
 EcsTaskRunnerLogGroup:
 Type: AWS::Logs::LogGroup
 Properties:
 LogGroupName: !Sub /aws/lambda/${AWS::StackName}-ecsTasks
 RetentionInDays: 7
  ApplicationService:
    Type: AWS::ECS::Service
...
...
```
Creating an inline Lambda function using CloudFormation
前面例子中最重要的一个方面是`EcsTaskRunner`资源中的`Code.ZipFile`属性，它定义了一个内联 Python 脚本来执行自定义资源的自定义配置操作。注意这种定义代码内联的方法通常不推荐用于现实世界的用例，在后面的章节中，我们将为 Lambda 函数代码创建一个更复杂的定制资源，并有自己的源代码库，但是为了保持这个例子的简单并介绍定制资源的核心概念，我现在使用的是内联方法。
# 了解自定义资源功能代码
让我们集中讨论自定义资源函数代码，我在前面的示例中已经隔离了它，并添加了注释来描述各种语句正在做什么。
```
# Generates an appropriate CloudFormation response and posts to the pre-signed S3 URL
import cfnresponse
# Imports the AWS Python SDK (boto3) for interacting with the ECS service
import boto3
# Create a client for interacting with the ECS service
client = boto3.client('ecs')
# Lambda functions require a handler function that is passed an event and context object
# The event object contains the CloudFormation custom resource event
# The context object contains runtime information about the Lambda function
def handler(event, context):
  # Wrap the code in a try/catch block to ensure any exceptions generate a failure
  try:
    print("Received event %s" % event)
    # If the request is to Delete the resource, simply return success
    if event['RequestType'] == 'Delete':
      cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, event.get('PhysicalResourceId'))
      return
    # Run the ECS task
    # http://boto3.readthedocs.io/en/latest/reference/services/ecs.html#ECS.Client.run_task
    # Requires 'Cluster', 'TaskDefinition' and optional 'Overrides' custom resource properties
    tasks = client.run_task(
      cluster=event['ResourceProperties']['Cluster'],
      taskDefinition=event['ResourceProperties']['TaskDefinition'],