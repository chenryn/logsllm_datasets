2.4.1.2 Numerical Data Types
Access String / Floating Numbers
Numerical data types also comprehend floating numbers.
$x='Giuseppe';
echo $x[0.1]; // floating (0.1) casted to 0 > 'G'
echo $x[.1e+1]; // exponential > 'i'
echo $x[0.2E+0000000000001]; // long exponential > 'u'
echo $x[1e+1-1E-1-5.999]; // exponential and floating
expression (3.901) casted
to 3 > 's'
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.82
2.4.1.2 Numerical Data Types
Access String / Floating Numbers
The following image, according to the PHP documentation,
describes how the structure for floating point literals are:
floating point
LNUM DNUM EXPONENT_DNUM
[0-9]+ ([0-9]*[\.]{LNUM}) | ({LNUM}[\.][0-9]*) [+-]?(({LNUM} | {DNUM}) [eE][+-]? {LNUM})
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.83
2.4.1.2 Numerical Data Types
‘Exotic’ Number Generation
Here is an example of an 'exotic' number generation:
$x='Giuseppe';
echo $x[FALSE]; // FALSE is 0 > 'G'
echo $x[TRUE]; // TRUE is 1 > 'i'
echo $x[count('hello')+true]; // count(object) is 1 > 'u'
echo $x["7rail"+"3er"-TRUE^0xA]; // PHP ignore trailing data > 's'
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.84
2.4.1.2 Numerical Data Types
‘Exotic’ Number Generation
In addition to our previous examples, it is possible to use the
casting functionalities PHP provides:
$x='Giuseppe';
echo $x[(int)"a common string"]; // 0 > 'G'
echo $x[(int)!0]; // True (1) > 'i'
echo $x[(int)"2+1"]; // 2 > 'u'
echo $x[(float)"3.11"]; // 3 > 's'
echo $x[boolval(['.'])+(float)(int)array(0)+floatval('2.1+1.2=3.3')];
// True(1)+1+2.1 = 4.2 (float) > 'e'
http://www.php.net/manual/en/language.types.type- WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.85
juggling.php#language.types.typecasting
2.4.1.3 String Data Types
In PHP there are four different ways in which it is possible
to specify a string literal:
▪ single quoted
▪ double quoted
▪ heredoc syntax
▪ nowdoc syntax (since PHP 5.3.0)
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.86
2.4.1.3 String Data Types
When working with type string it is common to use single
'
and double quoted delimiters.
"
The main difference between these two notations is that in
the first, variables and escape sequences for special
characters are not expanded, but in the second, they are.
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.87
2.4.1.3 String Data Types
Single / Double Quoted - Delimiters
$expand = 'expand, nay they do';
//Variables do not $expand, \n\t also escapes except ' and \ at the end of the string \
echo 'Variables do not $expand, \n\t also escapes except \' and \ at the end of the string \\';
//Variables do not expand, nay they do,
// also escapes
echo "Variables do not $expand, \n\t also escapes";
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.88
2.4.1.3 String Data Types
Single / Double Quoted - Escapes
The next table on the next slide contains the list of escape
sequences that PHP provides for special characters.
Notice that it is possible to use octal and hexadecimal
notations to represent characters.
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.89
2.4.1.3 String Data Types
Single / Double Quoted - Escapes
SEQUENCE MEANING
\n linefeed (LF or 0x0A (10) in ASCII)
\r carriage return (CR or 0x0D (13) in ASCII)
\t horizontal tab (HT or 0x09 (9) in ASCII)
\v vertical tab (VT or 0x0B (11) in ASCII) (since PHP 5.2.5)
\f form feed (FF or 0x0C (12) in ASCII) (since PHP 5.2.5)
\\ backslash
\$ dollar sign
\" double-quote
\[0-7]{1,3} the sequence of characters matching the regular expression is a character in octal notation
\x[0-9A-Fa-f]{1,2} the sequence of characters matching the regular expression is a character in hexadecimal notation
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.90
2.4.1.3 String Data Types
Single / Double Quoted - Escapes
//I Love Be3r
echo "I\x20L\x6fve\40B\145\63r";
SPACE
(hexadecimal)
SPACE DIGIT THREE
(octal) (octal)
LATIN SMALL LETTER O
LATIN SMALL LETTER E
(hexadecimal)
(octal)
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.91
2.4.1.3 String Data Types
Single / Double Quoted – Variable Parsing
With the dollar sign ( ), the parser tries to form a valid
$
variable name.
It is also possible to enclose the variable name in curly
braces to explicitly specify the end of the name.
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.92
2.4.1.3 String Data Types
Single / Double Quoted – Variable Parsing
$s = "\x20"; //Space character
echo "I$sLove Beer"; //There's no $sLove variable > I Beer
echo "I{$s}Love Beer"; // > I Love Beer
echo "I${s}Love Beer"; // > I Love Beer
echo "I{${s}}Love Beer"; // > I Love Beer
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.93
2.4.1.3 String Data Types
Single / Double Quoted – Variable Parsing
Even arrays, object methods, class functions with numerical
obfuscation are allowed.
$s = "\x20"; //Space character
$sp = " "; //Another space character
echo "I{$s[0]}Love{$sp[0]}Beer"; //> I Love Beer
echo "I{$s[(int)"I love Beer"]}Love{$sp[!true]}Beer";//> I Love Beer
echo ILoveBeer./**/.NULL; //> ILoveBeer
echo ILoveBeer.FALSE; //> ILoveBeer
echo "I{$s[eval($_GET['s'])]}Love Beer"; //Simple shell!> [SHELL-result]I Love Beer
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.94
2.4.1.3 String Data Types
Heredoc and Nowdoc
PHP offers other two alternatives to delimit strings:
Heredoc and Nowdoc. These are usually the preferred ways
among command-line programmers.
Basically, Heredoc is for double-quoted strings while
Nowdoc is for single-quoted strings.
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.95
2.4.1.3 String Data Types
Heredoc and Nowdoc
$expand = 'expand, nay they do'; $expand = 'expand, nay they do';
$nd =  Variables do not $expand, \n\t also escapes.\n This is > Variables do not expand, nay they do,
the Nowdoc syntax. \n Notice the single quotes used to
also escapes.
enclose the identifier (NOW)
This is the Heredoc syntax.
Notice there is no quotes around the identifier (HERE)
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.96
2.4.1.3 String Data Types
Heredoc and Nowdoc
The identifier must contain only alphanumeric characters
and underscores. It must also start with a non-digit
character or underscore, thereby making these examples
still valid:
echo  Complex (curly) Syntax
Now that we have seen how to specify a variable with
multiple notations, let’s focus on a specific case.
We now know that when a string is either specified in
double quotes or with Heredoc, variables are parsed within
it.
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.98
2.4.1.3 String Data Types
Variable Parsing > Complex (curly) Syntax
Basically, there are two types of syntax’s that the PHP
parser recognizes:
Simple
Complex or Curly
The most common syntax, e.g.:
This syntax can be recognized by the
$love = "Beer";
curly braces surrounding the expression
echo "I ❤$love";
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.99
2.4.1.3 String Data Types
Variable Parsing > Complex (curly) Syntax
For our purpose, the Curly syntax is quite interesting since it
allows the use of complex expressions. It works simply by
adding the expression in the same way as it appears
outside the string, and then wraps it in and .
{ }
Let’s see how it works with some examples.
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.100
2.4.1.3 String Data Types
Variable Parsing > Complex (curly) Syntax
These are 3 different ways to define a variable named
$Beer:
${'Be'.'er'} = 'Club’; // Define $Beer
${'B'.str_repeat('e',2).'r'} = "Club"; // Define $Beer
${'B'.str_repeat('e',2).@false./*.*/'r'} = "Club"; // Define $Beer
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.101
2.4.1.3 String Data Types
Variable Parsing > Complex (curly) Syntax
Due to the fact that it is possible to access any scalar
variable, array element or object property, there are
countless ways to obfuscate code. For example, the
following snippet of code uses a class:
class beers {
const lovely= 'rootbeer';
}
$rootbeer = 'Club';
echo "I'd like a {${beers::lovely}}!"; //> I'd like a Club!
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.102
2.4.1.4 Array Data Types
Even arrays are data types that are important to know. You
just need to consider the superglobals that handle user
input in order to realize how arrays are fundamental.
Let’s look at some examples.
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.103
2.4.1.4 Array Data Types
Accessing Individual Index of Array
$a = array(x=>123, xx=>456); // This could be a $_GET, $_POST, or any another superglobal
echo $a['x’]; // 'normal' usage > 123
echo $a[x]; // index without quotes > 123
echo $a["\x78"]; // hexadecimal notation > 123
echo $a["\170"]; // octal notation > 123
echo $a['x'.@false."\x78"];// 'normal' usage with padding and hex.notation> 456
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.104
2.4.1.4 Array Data Types
Take Advantage of Superglobals
Superglobals can be very useful to the obfuscation process. For
example, $_SERVER is full of interesting fields. We can manipulate
these both to increase the obfuscation level and evade security
mechanisms such as WAFs.
Let’s suppose we can generate our requests client-side and either
send headers like: User-Agent, Accept-Language, Accept-Encoding,
or send customized headers like MyHeader. Combining what we