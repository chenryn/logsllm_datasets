### 2.4.1.2 Numerical Data Types

#### Accessing Strings with Floating Numbers
Numerical data types in PHP also include floating numbers. Here are some examples of how to access string characters using floating numbers:

```php
$x = 'Giuseppe';
echo $x[0.1]; // 0.1 is casted to 0, resulting in 'G'
echo $x[.1e+1]; // 0.1e+1 (exponential) is 1, resulting in 'i'
echo $x[0.2E+0000000000001]; // 0.2E+0000000000001 (long exponential) is 2, resulting in 'u'
echo $x[1e+1 - 1E-1 - 5.999]; // 1e+1 - 1E-1 - 5.999 (expression) is 3.901, casted to 3, resulting in 's'
```

**WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020 | p.82**

#### Structure of Floating Point Literals
According to the PHP documentation, the structure for floating point literals is as follows:

- **LNUM**: `[0-9]+`
- **DNUM**: `([0-9]*[\.]{LNUM}) | ({LNUM}[\.][0-9]*)`
- **EXPONENT_DNUM**: `[+-]?(({LNUM} | {DNUM}) [eE][+-]? {LNUM})`

**WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020 | p.83**

#### Exotic Number Generation
Here are some examples of "exotic" number generation in PHP:

```php
$x = 'Giuseppe';
echo $x[FALSE]; // FALSE is 0, resulting in 'G'
echo $x[TRUE]; // TRUE is 1, resulting in 'i'
echo $x[count('hello') + true]; // count('hello') is 5, and true is 1, resulting in 6, which is 'u'
echo $x["7rail" + "3er" - TRUE ^ 0xA]; // PHP ignores trailing data, resulting in 7 + 3 - 1 ^ 10, which is 11 - 11, resulting in 0, which is 'G'
```

**WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020 | p.84**

#### Using Type Casting
PHP provides type casting functionalities that can be used to generate exotic numbers:

```php
$x = 'Giuseppe';
echo $x[(int)"a common string"]; // 0, resulting in 'G'
echo $x[(int)!0]; // True (1), resulting in 'i'
echo $x[(int)"2+1"]; // 2, resulting in 'u'
echo $x[(float)"3.11"]; // 3, resulting in 's'
echo $x[boolval('.') + (float)(int)array(0) + floatval('2.1+1.2=3.3')]; // True (1) + 0 + 2.1, resulting in 3.1, casted to 3, resulting in 's'
```

For more information on type casting, refer to the PHP manual: [Type Juggling](http://www.php.net/manual/en/language.types.type-juggling.php#language.types.typecasting)

**WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020 | p.85**

### 2.4.1.3 String Data Types

In PHP, there are four ways to specify a string literal:
- Single quoted: `'... '`
- Double quoted: `"... "`
- Heredoc syntax: `<<<EOF ... EOF`
- Nowdoc syntax: `<<<'EOF' ... EOF` (since PHP 5.3.0)

**WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020 | p.86**

#### Differences Between Single and Double Quoted Strings
- **Single Quoted Strings**: Variables and escape sequences for special characters are not expanded.
- **Double Quoted Strings**: Variables and escape sequences for special characters are expanded.

Example:
```php
$expand = 'expand, nay they do';
echo 'Variables do not $expand, \n\t also escapes except \' and \ at the end of the string \\'; // Variables do not $expand, \n\t also escapes except ' and \ at the end of the string \
echo "Variables do not $expand, \n\t also escapes"; // Variables do not expand, nay they do, \n\t also escapes
```

**WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020 | p.87**

#### Escape Sequences in PHP
The following table lists the escape sequences provided by PHP for special characters:

| Sequence | Meaning |
|----------|---------|
| `\n`     | Linefeed (LF or 0x0A (10) in ASCII) |
| `\r`     | Carriage return (CR or 0x0D (13) in ASCII) |
| `\t`     | Horizontal tab (HT or 0x09 (9) in ASCII) |
| `\v`     | Vertical tab (VT or 0x0B (11) in ASCII) (since PHP 5.2.5) |
| `\f`     | Form feed (FF or 0x0C (12) in ASCII) (since PHP 5.2.5) |
| `\\`     | Backslash |
| `\$`     | Dollar sign |
| `\"`     | Double-quote |
| `\[0-7]{1,3}` | Character in octal notation |
| `\x[0-9A-Fa-f]{1,2}` | Character in hexadecimal notation |

**WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020 | p.89**

#### Example of Escape Sequences
```php
// I Love Be3r
echo "I\x20L\x6fve\40B\145\63r";
// Output: I Love Be3r
```

**WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020 | p.90**

#### Variable Parsing in Strings
In double-quoted strings, variables are parsed. You can use curly braces to explicitly specify the end of the variable name.

Example:
```php
$s = "\x20"; // Space character
echo "I$sLove Beer"; // I Beer
echo "I{$s}Love Beer"; // I Love Beer
echo "I${s}Love Beer"; // I Love Beer
echo "I{${s}}Love Beer"; // I Love Beer
```

**WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020 | p.92**

#### Complex Variable Parsing
You can use complex expressions within curly braces to parse variables in strings.

Example:
```php
$s = "\x20"; // Space character
$sp = " "; // Another space character
echo "I{$s[0]}Love{$sp[0]}Beer"; // I Love Beer
echo "I{$s[(int)'I love Beer']}Love{$sp[!true]}Beer"; // I Love Beer
echo ILoveBeer . NULL; // ILoveBeer
echo ILoveBeer . FALSE; // ILoveBeer
echo "I{$s[eval($_GET['s'])]}Love Beer"; // Simple shell! [SHELL-result]I Love Beer
```

**WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020 | p.93**

#### Heredoc and Nowdoc Syntax
- **Heredoc**: Used for double-quoted strings.
- **Nowdoc**: Used for single-quoted strings.

Example:
```php
$expand = 'expand, nay they do';
$nd = <<<'NOWDOC'
Variables do not $expand, \n\t also escapes.
This is the Nowdoc syntax.
Notice the single quotes used to enclose the identifier (NOW)
NOWDOC;

$hd = <<<HERE
Variables do not $expand, \n\t also escapes.
This is the Heredoc syntax.
Notice there is no quotes around the identifier (HERE)
HERE;
```

**WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020 | p.95**

#### Identifier Rules
The identifier in Heredoc and Nowdoc must contain only alphanumeric characters and underscores, and it must start with a non-digit character or underscore.

**WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020 | p.96**

### 2.4.1.4 Array Data Types

Arrays are fundamental in PHP, especially when handling user input through superglobals like `$_GET`, `$_POST`, etc.

#### Accessing Individual Array Elements
Example:
```php
$a = array('x' => 123, 'xx' => 456); // This could be a $_GET, $_POST, or any other superglobal
echo $a['x']; // 123
echo $a[x]; // 123
echo $a["\x78"]; // 123
echo $a["\170"]; // 123
echo $a['x'.@false."\x78"]; // 456
```

**WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020 | p.103**

#### Using Superglobals for Obfuscation
Superglobals like `$_SERVER` can be useful for obfuscation. For example, you can manipulate headers like `User-Agent`, `Accept-Language`, `Accept-Encoding`, or send customized headers to increase obfuscation and evade security mechanisms such as WAFs.

**WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020 | p.104**