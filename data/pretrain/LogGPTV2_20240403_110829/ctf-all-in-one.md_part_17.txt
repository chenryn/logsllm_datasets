field@BBBB 。扩展为 iinstanceop/jumbo vAAAA, vBBBB, field@CCCCCCC
与 sstaticop/jumbo vAAAA, field@BBBBBBBB 。
普通字段指令的指令前缀为 i ，静态字段的指令前缀为 s 。字段操作指令后紧
跟字段类型的后缀。
方法调用指令
用于调用类实例的方法，基础指令为 invoke ，有 invoke-kind {vC, vD, vE,
vF, vG}, meth@BBBB 和 invoke-kind/range {vCCCC .. vNNNN},
meth@BBBB 两类。扩展为 invoke-kind/jumbo {vCCCC .. vNNNN},
meth@BBBBBBBB 这类指令。
根据方法类型的不同，共有如下五条方法调用指令：
invoke-virtual 或 invoke-virtual/range ：调用实例的虚方法
invoke-super 或 invoke-super/range ：调用实例的父类方法
invoke-direct 或 invoke-direct/range ：调用实例的直接方法
invoke-static 或 invoke-static/range ：调用实例的静态方法
invoke-interface 或 invoke-interface/range ：调用实例的接口方法
188
1.7.2 Dalvik 指令集
方法调用的返回值必须使用 move-result* 指令来获取，如：
invoke-static {}, Landroid/os/Parcel;->obtain()Landroid/os/Parce
l;
move-result-object v0
数据转换指令
格式为 unop vA, vB ，vB 寄存器或vB寄存器对存放需要转换的数据，转换后结
果保存在 vA 寄存器或 vA寄存器对中。
求补
neg-int
neg-long
neg-float
neg-double
求反
not-int
not-long
整型数转换
int-to-long
int-to-float
int-to-double
长整型数转换
long-to-int
long-to-float
long-to-double
单精度浮点数转换
float-to-int
float-to-long
float-to-double
双精度浮点数转换
double-to-int
double-to-long
double-to-float
整型转换
189
1.7.2 Dalvik 指令集
int-to-byte
int-to-char
int-to-short
数据运算指令
包括算术运算符与逻辑运算指令。
数据运算指令有如下四类：
binop vAA, vBB, vCC ：将 vBB 寄存器与 vCC 寄存器进行运算，结果保存
到 vAA 寄存器。以下类似
binop/2addr vA, vB
binop/lit16 vA, vB, #+CCCC
binop/lit8 vAA, vBB, #+CC
第一类指令可归类为：
add-type ：vBB + vCC
sub-type ：vBB - vCC
mul-type ：vBB * vCC
div-type ：vBB / vCC
rem-type ：vBB % vCC
and-type ：vBB AND vCC
or-type ：vBB OR vCC
xor-type ：vBB XOR vCC
shl-type ：vBB > vCC
ushr-type ：（无符号数）vBB >> vCC
smali 语法
类声明：
.class  [修饰关键字] 
.super 
.source 
190
1.7.2 Dalvik 指令集
字段声明：
# static fields
.field  static [修饰关键字] :
# instance fields
.field  [修饰关键字] :
方法声明：
# direct methods
.method  [修饰关键字] 
[.locals]
[.param]
[.prologue]
[.line]
.end method
# virtual methods
.method  [修饰关键字] 
[.locals]
[.param]
[.prologue]
[.line]
.end method
需要注意的是，在一些老教程中，会看到 .parameter ，表示使用的寄存器个
数，但在最新的语法中已经不存在了，取而代之的是 .param ，表示方法参数。
接口声明：
# interfaces
.implements 
注释声明：
191
1.7.2 Dalvik 指令集
# annotations
.annotation [注释属性] 
[注释字段 = 值]
.end annotation
循环语句
# for
Iterator  = ;
for( :){
[处理单个对象的代码体]
}
# while
Iterator  = ;
while(.hasNext()){
  = .next();
[处理单个对象的代码体]
}
比如下面的 Java 代码：
public void encrypt(String str) {
String ans = "";
for (int i = 0 ; i v1
const/4 v1, 0x0
.local v1, "i":I
:goto_0 # for_start_place
# str.length()=>v2
invoke-virtual {p1}, Ljava/lang/String;->length()I
move-result v2
# i v2
new-instance v2, Ljava/lang/StringBuilder;
invoke-direct {v2}, Ljava/lang/StringBuilder;->()V
invoke-virtual {v2, v0}, Ljava/lang/StringBuilder;->append(Ljava
/lang/String;)Ljava/lang/StringBuilder;
move-result-object v2
#str.charAt(i) => v3
invoke-virtual {p1, v1}, Ljava/lang/String;->charAt(I)C
move-result v3
# ans += v3 =>v0
invoke-virtual {v2, v3}, Ljava/lang/StringBuilder;->append(C)Lja
va/lang/StringBuilder;
move-result-object v2
invoke-virtual {v2}, Ljava/lang/StringBuilder;->toString()Ljava/
lang/String;
move-result-object v0
# i++
193
1.7.2 Dalvik 指令集
add-int/lit8 v1, v1, 0x1
goto :goto_0
# Log.e("ans:", ans);
:cond_0
const-string v2, "ans:"
invoke-static {v2, v0}, Landroid/util/Log;->e(Ljava/lang/String;
Ljava/lang/String;)I
return-void
.end method
switch 语句
public void encrypt(int flag) {
String ans = null;
switch (flag){
case 0:
ans = "ans is 0";
break;
default:
ans = "noans";
break;
}
Log.v("ans:", ans);
}
对应下面的 smali：
194
1.7.2 Dalvik 指令集
# public void encrypt(int flag) {
.method public encrypt(I)V
.locals 2
.param p1, "flag" # I
.prologue
# String ans = null;
const/4 v0, 0x0
.local v0, "ans":Ljava/lang/String;
# switch (flag){
packed-switch p1, :pswitch_data_0 # pswitch_data_0指定case
区域的开头及结尾
# default: ans="noans"
const-string v0, "noans"
# Log.v("ans:", ans)
:goto_0
const-string v1, "ans:"
invoke-static {v1, v0}, Landroid/util/Log;->v(Ljava/lang/Str
ing;Ljava/lang/String;)I
return-void
# case 0: ans="ans is 0"
:pswitch_0 # pswitch_
const-string v0, "ans is 0"
goto :goto_0 # break
nop
:pswitch_data_0 #case区域的结束
.packed-switch 0x0 # 定义case的情况
:pswitch_0 #case 0
.end packed-switch
.end method
根据 switch 语句的不同，case 也有两种方式：
195
1.7.2 Dalvik 指令集
# packed-switch
packed-switch p1, :pswitch_data_0
...
:pswitch_data_0
.packed-switch 0x0
:pswitch_0
:pswitch_1
# spase-switch
sparse-switch p1,:sswitch_data_0
...
sswitch_data_0
.sparse-switch
0xa -> : sswitch_0
0xb -> : sswitch_1 # 字符会转化成数组
try-catch 语句
public void encrypt(int flag) {
String ans = null;
try {
ans = "ok!";
} catch (Exception e){
ans = e.toString();
}
Log.d("error", ans);
}
对应的下面的 smali：
196
1.7.2 Dalvik 指令集
# public void encrypt(int flag) {
.method public encrypt(I)V
.locals 3
.param p1, "flag" # I
.prologue
# String ans = null;
const/4 v0, 0x0
.line 20
.local v0, "ans":Ljava/lang/String;
# try { ans="ok!"; }
:try_start_0 # 第一个try开始，
const-string v0, "ok!"
:try_end_0 # 第一个try结束(主要是可能有多个try)
.catch Ljava/lang/Exception; {:try_start_0 .. :try_end_0} :c
atch_0
# Log.d("error", ans);
:goto_0
const-string v2, "error"
invoke-static {v2, v0}, Landroid/util/Log;->d(Ljava/lang/Str
ing;Ljava/lang/String;)I
return-void
# catch (Exception e){ans = e.toString();}
:catch_0 #第一个catch
move-exception v1
.local v1, "e":Ljava/lang/Exception;
invoke-virtual {v1}, Ljava/lang/Exception;->toString()Ljava/
lang/String;
move-result-object v0
goto :goto_0
.end method
更多资料
《Android软件安全与逆向分析》