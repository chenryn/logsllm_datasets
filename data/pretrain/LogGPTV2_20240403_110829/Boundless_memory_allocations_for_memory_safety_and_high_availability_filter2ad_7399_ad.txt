### Patching and Instrumentation

To address the 264 instructions in an application, we can create a patched executable with minimal instrumentation using the error log. The patched executable only includes instrumentation for allocation sites and memory accesses that appear in the error log. However, for some memory accesses, it is still necessary to mask the upper 16 bits of the pointer value, as we may not know at compile time whether the accessed pointer will contain metadata at runtime.

### Vulnerability-Specific Patching

Our approach is designed to protect against all attacks exploiting a specific vulnerability, rather than just a single attack. We refer to this as "vulnerability-specific patching." To address multiple vulnerabilities, multiple logs can be easily merged by concatenating them.

### Evaluation

#### Performance Overhead
Our evaluation focuses on the performance overhead of Boundless, its memory safety, and availability. In Section VII-A, we compare the performance overhead of Boundless (without automatic patching) with SoftBound. In Section VII-B, we demonstrate Boundless's ability to tolerate real-world memory errors. Section VII-C presents the performance gains achieved through our automatic patching approach. Section VII-D provides measurements of the availability of the HTTP proxy Squid. Finally, we motivate the use of FastPointer, showing that trading computational power for memory access efficiency can be beneficial.

#### Applications and Memory Errors
We evaluate Boundless using five different applications known to contain memory errors (Table I). These applications include:

- **polymorph-0.4.0**: Global array and stack overflow
- **libpng-1.2.4**: Gzip-1.2.4: Stack overflow
- **squid-2.3**: Global array overflow
- **ssca2**: Heap overflow

We also evaluate a known bug in libpng, which propagates through the library and manifests in zlib. To handle this, we statically link zlib with libpng and instrument both. Additionally, ssca2 contains a previously unknown bug, confirmed by the maintainers of STAMP, where the tool underestimates the necessary size of a heap object, leading to out-of-bounds accesses.

#### Error Detection and Redirection
Boundless detects all errors and redirects out-of-bounds accesses to the out-of-bounds store. Executions proceed normally, and subsequent runtime checks in gzip, libpng, and polymorph detect error conditions and terminate the application gracefully. Both squid and ssca2 continue operation, terminate normally, and return the correct result.

#### Automatic Patching
For each of the five applications, we automatically create patches and measure the runtime slowdown relative to the uninstrumented version. The results are presented in Figure 8. The runtime overhead of our automatically generated patches ranges from 0.0% (polymorph) to 32.0% (gzip), with an average of 14.2%, which is 2.6% of the overhead caused by full tolerance.

#### Availability: Fail-Stop vs. Tolerance
In Figure 9, we compare the throughput of an uninstrumented version of the Squid server with a patched version. During normal operation, the patched version has a slightly lower throughput due to the runtime overhead of the patch. When an attack hits the uninstrumented version, the processing thread crashes, and Squid spawns a new thread, causing a decrease in throughput. In contrast, the patched version experiences only a slight decrease in throughput during an attack, as the attack itself results in a cache miss.

#### Pointer Representation
We measured the ratio between last-level cache misses and unhalted core cycles using perfmon [24] and used this ratio to sort the STAMP benchmarks. Figure 10 shows the runtime slowdown as a function of this ratio, with and without our compiler optimizations. An increasing frequency of last-level cache misses translates to a higher load on the memory bus and more bubbles in the pipeline. Boundless uses these bubbles to perform extra calculations, trading computation for memory accesses and minimizing the load on the memory subsystem. This makes Boundless particularly effective for applications with high memory bus utilization.

### Conclusion
Boundless is a novel approach that enhances the memory safety and availability of applications with spatial memory errors. Our measurements show that Boundless can significantly increase the availability of server applications with such errors. By exploiting spare bits on current x86-64 architectures to track metadata directly in the pointer value and using two different pointer representations, Boundless dynamically chooses the most suitable representation. Boundless is safe, complete, and has a competitive low overhead.

### References
[1] “2010 CWE/SANS top 25 most dangerous software errors,” The MITRE Corporation, Mar. 2011.
[2] S. Nagarakatte, J. Zhao, M. M. Martin, and S. Zdancewic, “SoftBound: Highly compatible and complete spatial memory safety for C,” in Proceedings of the 2009 ACM SIGPLAN conference on Programming language design and implementation (PLDI’09). New York, NY, USA: ACM, 2009.
...
[24] S. Eranian, “The perfmon2 interface specification,” HP Laboratories, Tech. Rep., Feb. 2005.