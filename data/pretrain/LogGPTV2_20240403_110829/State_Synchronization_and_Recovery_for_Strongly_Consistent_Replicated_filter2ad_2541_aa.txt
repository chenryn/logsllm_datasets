title:State Synchronization and Recovery for Strongly Consistent Replicated
CORBA Objects
author:Priya Narasimhan and
Louise E. Moser and
P. M. Melliar-Smith
State Synchronization and Recovery for 
Strongly Consistent Replicated CORBA Objects * 
P.  Narasimhan, L. E. Moser and P. M. Melliar-Smith 
Department of Electrical and Computer Engineering 
University  of California, Santa Barbara, CA 93 106 
PI:EMAIL,  PI:EMAIL, PI:EMAIL 
Abstract 
The  Eternal  systeni  provides  transparent  fault  tolerance  for 
CORBA applications,  without requiring  the niodification  of  ei- 
ther the  application  or the  ORB. Eternal  replicates  the  appli- 
cation  objects, arid  erisitres strong  replica  consistency  by em- 
ploying  reliable totally-ordered nuilticast niessages for convey- 
ing the llOP niessages of the application.  To maintain  replica 
consistency  even as replicas fail and are recovered, Eternal en- 
sures  the  retrieval,  assignment  and  transfer  of  the  three  kinds 
of stute  - application-level. ORB/POA-level and infrastructure- 
level  state  - that  are  associated  with  each  replicated  object. 
Eternal’s  rnechanisnis for recovety  include  the synclzronization 
of the state retrieval and the state assignment messages, as well 
as the logging and replay of messages arid checkpoints. 
1  Introduction 
Standards, such  as  the  Object  Management  Group’s Common 
Object Request Broker Architecture (CORBA) [ 131, aim to sim- 
plify  application  development  by  freeing  the  application  pro- 
grammer from low-level  syslem details.  CORBA applications 
consist of client  objects and  server objects,  with client objects 
invoking server objects  that  return  responses  to  the  client  ob- 
jects after performing the desired operations.  CORBAs Object 
Rcquest Broker (ORB) acts as an intermediary between a client 
object and a server object, allowing them to interact, transcend- 
ing differences in their programming languages and their physi- 
cal locations. The Portable Object Adapter (POA), a server-side 
entity that deals with  the  actual implementations of a CORBA 
server object, allows application programmers  to  build  imple- 
mentations  that  are  portable  across  different  vendors’  ORBS. 
CORBAs General  Internet Inter-ORB Protocol  (GIOP) and its 
TCP/IP-based mapping, the Internet Inter-ORB Protocol (IIOP), 
allow client and server objects to communicate regardless of dif- 
ferences in their operating systems, byte orders, hardware archi- 
tectures, etc. 
Enhancing  CORBA  with  fault  tolerance  while  maintaining 
CORBAs transparency and simplicity of  application  program- 
ming  is  a  challenge.  The  Eternal  system  [ IO]  addresses  this 
challenge by providing fault tolerance for CORBA applications, 
without requiring the application programmer to be  concerned 
with  the  difficult issues of  fault  tolerance.  The value of  Eter- 
nal  in developing fault-tolerant CORBA applications lies in the 
*This research  hxs  been  supported  by  the  Defense  Advanced  Research 
Projects  Agency  in  conjunction  with the Office of  Naval  Research  and the Air 
Force  Research  Laboratory.  Rome.  under  Contracts  NO01 74-95-K-0083  and 
F3602-97- 1-03-48. respectively 
transparency of its approach, i.e.,  neither the CORBA applica- 
tion  nor the ORB needs to be modified to benefit from the fault 
tolerance that the Eternal system provides. 
2  The Eternal System 
The  Eternal  system  provides  fault  tolerance  for  applications 
running  over  commercial  off-the-shelf  implementations  of 
CORBA. The mechanisms implemented in  the  Eternal system 
work  together efficiently to provide strong  replica consistency 
with  low  overheads, and without requiring the  modification of 
either the application or the ORB. 
In  the  Eternal  system,  the  client  and  server objects  of  the 
CORBA  application  are  replicated,  and  the  replicas  are  dis- 
tributed across the system. Different replication styles - active, 
cold passive and  warm passive replication - of both  client and 
server objects are supported.  To facilitate replica consistency, 
the Eternal  system conveys the  IIOP messages of  the CORBA 
application using the reliable totally-ordered multicast messages 
ofthe underlying Totem system [9]. 
The structure of the Eternal system is shown in Figure 1. The 
Eternal Replication Manager replicates each application object, 
according  to  user-specified  fault tolerance  properties (such  as 
the replication style, the checkpointing interval, the fault moni- 
toring interval, the initial number of replicas, the minimum num- 
ber of replicas, etc.) and distributes the replicas across the sys- 
tem. 
The  Eternal  Interceptor’  captures the  IIOP  messages  (con- 
taining the client’s requests and the  server’s replies), which are 
intended  for  TCPAP, and  diverts  them  instead  to  the  Eternal 
Replication Mechanisms for multicasting via Totem. The Eter- 
nal Replication Mechanisms, together with the Eternal Recovery 
Mechanisms, maintain strong consistency of the replicas, detect 
and recover from faults, and sustain operation in all components 
of a partitioned system, should a partition occur. 
The  Eternal  Resource  Manager  monitors  the  system  re- 
sources, and maintains the initial and the  minimum  number of 
replicas.  The Eternal  Evolution Manager exploits object repli- 
cation to support upgrades to the CORBA application objects. 
The Replication Manager, the Resource Manager and the  Evo- 
lution  Manager  are  themselves  implemented  as  collections  of 
CORBA objects and, thus, can benefit  from Eternal’s fault  tol- 
erance.  The Eternal system implements the  new Fault Tolerant 
CORBA standard [ 141. 
‘Unlike CORBA’s ORB-level  portable  interceptors.  Eternal’s Interceptor is 
an  IlOP message  interceptor  that  is  not  pan of the ORB  stack  and  is located 
outside the ORB, at the ORB’S socket-level interface to the operating  system. 
0-7695-1101-5/01 $10.00 0 2001 IEEE 
261 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:04:13 UTC from IEEE Xplore.  Restrictions apply. 
CORBA Application 
I 
CORBA ORB 
I 1  
I 
CORBA ORB 
Figure 1 : T h e  structure of the Eternal system. 
2.1  Strong Replica Consistency 
For ensuring strong replica consistency of the application, ap- 
plication objects must be deterministic in their behavior so that 
if  two  replicas  of  an  object  start  from  the  same initial  state, 
and  have  the same sequence of  messages  applied  to  them,  in 
the  same order, the two replicas will reach the same final state. 
Challenges in maintaining replica consistency include: 
Ordering of operations. All  of the replicas of each repli- 
cated object must perform the same sequence of operations 
in  the same order to achieve replica consistency.  Eternal 
achieves this by exploiting a reliable totally-ordered multi- 
cast group communication system for conveying the IIOP 
invocations (responses) to the replicas of a CORBA server 
(client), thereby facilitating replica consistency under both 
fault-free and recovery conditions. 
Duplicate operations.  Replication,  by  its  very  nature, 
may  lead  to  duplicate  operations.  For  example,  when 
every  replica  of  a  three-way  replicated  client  object  in- 
vokes a method of a replicated  server object, every server 
replica  will  receive  three  copies  of  the  same invocation, 
one from each of the invoking client replicas.  Eternal pro- 
vides unique  invocation  (response)  identifiers that  enable 
the  Replication Mechanisms to ensure that such duplicate 
invocations (responses) from a replicated client (server) are 
never delivered to their target server (client) objects. 
Multithreading.  Many  commercial  ORBS and  CORBA 
applications employ multithreading, a significant source of 
non-deterministic  behavior.  Replicas  of  a  multithreaded 
object might become inconsistent  if  the  threads, and  the 
operations that they  execute, are  not  carefully  controlled. 
Eternal provides mechanisms [ 1 I ]  to ensure replica consis- 
tency,  regardless of the multithreading of  the ORB or the 
application. 
Recovery. Replicating an object allows it to continue pro- 
viding useful  services  when  one of  its replicas fails.  For 
true fault tolerance, it must be possible to recover a failed 
replica,  and  to  reinstate  it  to  be  useful  again.  However, 
before a new or recovered replica issues an invocation, per- 
forms an operation, or returns a response, its state must be 
synchronized with that of the other operational replicas of 
the object.  The focus of this paper is on Eternal’s mecha- 
nisms for providing state transfer and recovery for strongly 
consistent replicated CORBA objects. 
3  Supporting Replication Styles 
The mechanisms required for the consistent recovery vary with 
the replication style - active replication, warm  passive replica- 
tion, cold passive replication - of the replicated object.  For ac- 
tive  replication, as  shown  in  Figure  2(a),  each  server (client) 
replica responds to (invokes) every operation. For passive repli- 
cation, one of the replicas, designated the primary  replica,  re- 
sponds to (invokes) every operation.  With  warm  passive repli- 
cation, as shown in Figure 2(b), the remaining passive replicas, 
known  as backups, are synchronized periodically  with  the pri- 
mary  replica’s state.  With  cold  passive  replication,  a  backup 
replica is loaded into memory and its state initialized from a log 
only if the existing primary replica fails. 
3.1  Recovering an Active Replica 
Masking the failure of an active replica is relatively simple. If an 
active replica fails while performing an operation, the remaining 
active replicas of the object continue to perform the  operation 
and return the result. 
The failure of a single active replica is relatively easy to mask, 
and is transparent to the other replicated objects involved in the 
nested  operation.  Thus,  active replication  yields  substantially 
more rapid  recovery  from faults.  When  a  failed  active replica 
is recovered, the  state of the new or recovering replica must be 
synchronized with the consistent state of an existing operational 
replica of the object. 
262 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:04:13 UTC from IEEE Xplore.  Restrictions apply. 
Actively Replicated 
Sewer Object B 
................. 
....... 
/ 
Passively Replicated 
Client Object A 
Passively Replicated 
Server Object B 
‘.  / 
.
I
Actively Replicated 
Client Object A 
................ 
’ . .  
A2 
. 
Elemal 
Elemal 
A 
................................................................................................................ 
Reliable mulucast messages 
Etemal 
A 
Etemal 
A 
A 
Etemal 
A 
Ii 
- ~ . - .  _
_
_
State Transfer 
(b) 
Figure 2: Replication styles supported by the Eternal system (a) active replication  and (b) passive replication. 
3.2  Recovering a Passive Replica 
If  a  backup  replica  fails,  it can  be  simply  removed  while  the 
operation continues to be performed by the primary replica.  On 
the  other hand,  if  the  primary replica fails,  one of  the  backup 
replicas must be promoted to be the new primary replica. 
Before the new primary replica can become fully operational 
(and start processing normal invocations and responses), its state 
must be synchronized with the state that the old primary replica 
had  just  before  it  failed.  However,  because  the  old  primary 
replica  is  no longer available once it has failed, an operational 
primary’s state must be periodically captured and logged so that 
it is available for reinstating a new primary replica. 
3.3  Logging Checkpoints and Messages 
Because the system continues to operate during the recovery of 
a replica, a recovering replica may  be the  target of normal in- 
vocations and responses from other objects in the system, even 
as it  is having its state restored.  Eternal does not discard these 
normal invocations and responses, but  instead,  enqueues them 
(in the order of their receipt) at the Recovery Mechanisms host- 
ing the  recovering replica.  Once the  replica  is  recovered,  the 
Recovery Mechanisms  dispatch  the  enqueued  invocations and 
responses to the now-operational replica. 
For passive replication, Eternal periodically captures the pri- 
mary’s state in the form of checkpoints. Eternal logs each check- 
point and the ordered messages that follow that checkpoint, until 
the next checkpoint (which overwrites the previous checkpoint) 
occurs. If the primary replica fails, the recovery action depends 
on the replication style - warm or cold passive replication.  For 
warm passive replication, the backup replicas’ states are already 
initialized to the primary’s last checkpoint; Eternal delivers the 
messages  (that  have been logged  since the  last  checkpoint)  to 
the  new  primary  replica  before  allowing  it  to  become opera- 
tional.  For cold passive  replication,  Eternal  must  first  launch 
the new  primary replica before providing it with  the  primary’s 
last checkpoint, and the logged messages, in that order. 
For active replication, there is no need to log any checkpoints 
or  messages  until  a replica  is  being recovered.  At  that  point, 
Eternal’s mechanisms for synchronizing state transfer handle the 
retrieval of checkpoints and the logging of messages, just as for 
passive replication. 
4  Consistent State 
Unfortunately,  the  state  required  to  recover  a  failed  CORBA 
replica  consistently  is  not  located  in  a  single  place.  For  the 
purposes of  recovery, every  replicated  CORBA object can  be 
regarded as having three kinds of state: application-level state. 
ORBPOA-level state, and infrastructure-level state.  Any fault- 
tolerant CORBA system that aims to provide strong replica con- 
sistency must maintain consistent application-level, ORBIPOA- 
level state and infrastructure-level state across all of the replicas 
of every replicated CORBA object. 
4.1  Application-Level State 
Application-level  state is represented  by  the  values of the  data 
structures of the replicated object, and is completely determined 