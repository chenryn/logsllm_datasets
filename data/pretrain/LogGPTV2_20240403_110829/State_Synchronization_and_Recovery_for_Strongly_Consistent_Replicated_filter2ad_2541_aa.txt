# State Synchronization and Recovery for Strongly Consistent Replicated CORBA Objects

## Authors
- Priya Narasimhan
- Louise E. Moser
- P. M. Melliar-Smith

## Affiliation
Department of Electrical and Computer Engineering  
University of California, Santa Barbara, CA 93106  
Emails: [PI:EMAIL, PI:EMAIL, PI:EMAIL]

## Abstract
The Eternal system provides transparent fault tolerance for CORBA applications without requiring modifications to either the application or the ORB. It achieves this by replicating application objects and ensuring strong replica consistency through the use of reliable, totally-ordered multicast messages for conveying the IIOP messages of the application. To maintain replica consistency even in the presence of failures and recoveries, Eternal manages three types of state—application-level, ORB/POA-level, and infrastructure-level—associated with each replicated object. The system's recovery mechanisms include state synchronization, message logging, and checkpointing.

## 1. Introduction
Standards such as the Object Management Group’s Common Object Request Broker Architecture (CORBA) aim to simplify application development by abstracting low-level system details. CORBA applications consist of client and server objects, where client objects invoke operations on server objects, which then return responses. The Object Request Broker (ORB) acts as an intermediary, allowing these objects to interact despite differences in programming languages and physical locations. The Portable Object Adapter (POA) facilitates the creation of portable server-side implementations across different ORBs. The General Internet Inter-ORB Protocol (GIOP) and its TCP/IP-based mapping, the Internet Inter-ORB Protocol (IIOP), enable communication between client and server objects regardless of their operating systems, byte orders, and hardware architectures.

Enhancing CORBA with fault tolerance while maintaining its transparency and simplicity is a significant challenge. The Eternal system addresses this by providing fault tolerance for CORBA applications without burdening the application programmer with the complexities of fault tolerance. The value of Eternal lies in its transparent approach, which does not require modifications to the CORBA application or the ORB.

## 2. The Eternal System
The Eternal system provides fault tolerance for applications running on commercial off-the-shelf CORBA implementations. Its mechanisms work efficiently to ensure strong replica consistency with minimal overhead and without modifying the application or the ORB.

### 2.1. System Structure
In the Eternal system, both client and server objects are replicated and distributed across the system. Different replication styles—active, cold passive, and warm passive—are supported for both client and server objects. To facilitate replica consistency, the system uses reliable, totally-ordered multicast messages from the underlying Totem system to convey IIOP messages.

**Figure 1:** The structure of the Eternal system.

- **Eternal Replication Manager:** Replicates each application object according to user-specified fault tolerance properties and distributes the replicas.
- **Eternal Interceptor:** Captures IIOP messages intended for TCP/IP and diverts them to the Eternal Replication Mechanisms for multicasting via Totem.
- **Eternal Replication and Recovery Mechanisms:** Maintain strong replica consistency, detect and recover from faults, and sustain operation in partitioned systems.
- **Eternal Resource Manager:** Monitors system resources and maintains the initial and minimum number of replicas.
- **Eternal Evolution Manager:** Supports upgrades to CORBA application objects using object replication.

These components are implemented as collections of CORBA objects, benefiting from Eternal’s fault tolerance. The system adheres to the new Fault Tolerant CORBA standard.

### 2.2. Strong Replica Consistency
To ensure strong replica consistency, application objects must be deterministic. This means that if two replicas start from the same initial state and receive the same sequence of messages in the same order, they will reach the same final state. Challenges in maintaining replica consistency include:

- **Ordering of Operations:** All replicas must perform the same sequence of operations in the same order. Eternal uses a reliable, totally-ordered multicast group communication system to achieve this.
- **Duplicate Operations:** Replication can lead to duplicate operations. Eternal provides unique invocation identifiers to prevent duplicate deliveries.
- **Multithreading:** Many ORBs and CORBA applications use multithreading, which can introduce non-deterministic behavior. Eternal provides mechanisms to ensure replica consistency in such environments.
- **Recovery:** A failed replica must be synchronized with the operational replicas before it can resume normal operations. This paper focuses on Eternal’s mechanisms for state transfer and recovery.

## 3. Supporting Replication Styles
The mechanisms required for consistent recovery vary depending on the replication style—active, warm passive, or cold passive.

### 3.1. Active Replication
In active replication, all replicas respond to every operation. If an active replica fails, the remaining replicas continue to perform the operation and return the result. Recovering a failed active replica involves synchronizing its state with an operational replica.

### 3.2. Passive Replication
In passive replication, one primary replica responds to every operation, while backup replicas are periodically synchronized with the primary. If the primary fails, a backup is promoted to primary. Before becoming fully operational, the new primary must be synchronized with the state of the old primary, which is periodically captured and logged.

### 3.3. Logging Checkpoints and Messages
During recovery, the system continues to operate, and normal invocations and responses may target the recovering replica. Eternal enqueues these messages and dispatches them once the replica is recovered. For passive replication, checkpoints and ordered messages are logged. For warm passive replication, backups are already synchronized with the last checkpoint, and logged messages are delivered to the new primary. For cold passive replication, the new primary is launched and provided with the last checkpoint and logged messages.

For active replication, checkpoints and messages are logged only during recovery, and the state transfer mechanisms handle the retrieval of checkpoints and logging of messages.

## 4. Consistent State
Consistently recovering a failed CORBA replica requires managing three types of state: application-level, ORB/POA-level, and infrastructure-level.

### 4.1. Application-Level State
Application-level state is represented by the values of the data structures of the replicated object and is determined by the application logic. Ensuring consistency across all replicas is crucial for maintaining strong replica consistency.

---

This optimized version of the text is more structured, clear, and professional, making it easier to read and understand.