(such as RDF and OWL) and semantic applications (such as Jena).
The Jena toolbox includes a Java programming API that gives a
framework to program semantic Web applications. The API is divided
into five sets of functions that deal with the processing of ontologies,
namely:
• Processing and manipulation of RDF data models
• Processing and manipulation of ontologies
• SPARQL query support
10 Semantic Web Services, Processes and Applications
• Inference on OWL and RDFS data models
• Persistence of ontologies to databases
In this chapter we will focus primarily on the API responsible for
the processing and manipulation of OWL ontologies.
5.1 Installing Jena
To install Jena the first step is to download Jena API from
http://jena.sourceforge.net. The version used for the examples shown
in this chapter was Jena 2.3. Once you have downloaded Jena (in our
case the package was named ), you need to extract the
Jena 2.3.zip
zip file.
You will find in the /lib directory all the libraries needed to use the
Jena API. To develop semantic applications with Java you will need to
update your CLASSPATH to include the following libraries:
•
antlr-2.7.5.jar
•
arq.jar
•
commons-logging.jar
•
concurrent.jar
•
icu4j_3_4.jar
•
jakarta-oro-2.0.8.jar
•
jena.jar
•
jenatest.jar
•
junit.jar
•
log4j-1.2.12.jar
•
stax-1.1.1-dev.jar
•
stax-api-1.0.jar
•
xercesImpl.jar
•
xml-apis.jar
5.2 Creating an Ontology Model
The main Java class that represents an ontology in memory is the
OntModel.
OntModel model;
Programming the Semantic Web 11
In Jena, ontology models are created using the
ModelFactory
class. A model can be dynamically created by calling the
method.
createOntologyModel()
OntModel m = ModelFactory.createOntologyModel();
When creating an ontology it is possible to describe its
characteristics, such as the ontology language used to model the
ontology, the storage scheme and the reasoner.
To describe specific characteristics of an ontology, the method
needs to be called and
createOntologyModel(OntModelSpec o)
accepts a parameter of the type . For example,
OntModelSpec
determines that the ontology to be
OntModelSpec.OWL_DL_MEM
created will have an OWL DL model and will be stored in memory
with no support for reasoning. Various other values are available.
Table 14-1 illustrates some of the possibilities.
Table 14-1. Types of ontology models with Jena
Field Description
A simple DAML model stored in memory with
DAML_MEM
no support for reasoning
A DAML model stored in memory with support
DAML_MEM_RDFS_INF
for RDFS inference
A simple OWL Lite model stored in memory
OWL_LITE_MEM
with no support for reasoning
A OWL Lite model stored in memory with
OWL_MEM_RULE_INF
support for OWL rules inference
A simple OWL Lite model stored in memory
RDFS_MEM
with no support for reasoning
More than 20 different ontology models can be created. The
following segment of code illustrates how to create an OWL ontology
model, stored in memory, with no support for reasoning.
import com.hp.hpl.jena.ontology.OntModel;
import com.hp.hpl.jena.ontology.OntModelSpec;
import com.hp.hpl.jena.rdf.model.ModelFactory;
public class CreateModel
public static void main(String[] args) {
OntModel model = ModelFactory.createOntologyModel(
OntModelSpec.OWL_MEM);
}
12 Semantic Web Services, Processes and Applications
}
5.3 Reading an Ontology Model
Once we have an ontology model, we can load an ontology.
Ontologies can be loaded using the method which can read an
read
ontology from an URL or directly from an input stream.
read(String url)
read(InputStream reader, String base)
In the following example, we show a segment of code that creates
an OWL ontology model in memory and loads the University
ontology from the URL
.
http://dme.uma.pt/jcardoso/owl/University.owl
OntModel model = ModelFactory.createOntologyModel(
OntModelSpec.OWL_MEM);
model.read("http://dme.uma.pt/jcardoso/owl/University.owl");
For performance reasons, it is possible to cache ontology models
locally. To cache a model, it is necessary to use a helper class that
manages documents ( ), allowing subsequent
OntDocumentManager
accesses to an ontology to be made locally. The following example
illustrates how to add an entry for an alternative copy of an OWL file
with the given OWL URI. An alternative copy can be added by calling
the method
addAltEntry.
import com.hp.hpl.jena.ontology.OntDocumentManager;
import com.hp.hpl.jena.ontology.OntModel;
import com.hp.hpl.jena.ontology.OntModelSpec;
import com.hp.hpl.jena.rdf.model.ModelFactory;
public class CacheOntology {
public static void main(String[] args) {
OntModel m = ModelFactory.createOntologyModel(
OntModelSpec.OWL_MEM);
OntDocumentManager dm = m.getDocumentManager();
dm.addAltEntry(
"http://dme.uma.pt/jcardoso/owl/University.owl",
"file:///c:/University.OWL");
Programming the Semantic Web 13
m.read("http://dme.uma.pt/jcardoso/owl/University.owl");
}
}
Since we specify that a local copy of our University ontology
exists in , Jena can load the
file:///c:/University.OWL
ontology from the local copy instead of loading it from the URL.
5.4 Manipulating Classes
OWL ontology classes are described using the Java
OntClass
class. To retrieve a particular class from an ontology we can simply
use the method from the or,
getOntClass(URI) OntModel
alternatively, it is possible to use the method to
listClasses()
obtain a list of all the classes of an ontology. The class
OntClass
allows us to retrieve all the subclasses of a class using the method
. For example, the following segment of code
listSubClasses()
allows listing of all the subclasses of the class of our
#Person
University ontology.
String baseURI=
"http://dme.uma.pt/jcardoso/owl/University.owl#";
OntModel model = ModelFactory.createOntologyModel(
OntModelSpec.OWL_MEM);
model.read(“http://dme.uma.pt/jcardoso/owl/University.owl");
OntClass p = model.getOntClass(baseURI+"Person");
for(ExtendedIterator i=p.listSubClasses(); i.hasNext();)
{
OntClass Class=(OntClass)i.next();
System.out.println(Class.getURI());
}
In our scenario the output of this example is:
http://dme.uma.pt/jcardoso/owl/University.owl#Student
http://dme.uma.pt/jcardoso/owl/University.owl#Teacher
14 Semantic Web Services, Processes and Applications
The method can be used to create a new class. For
createClass
example we can create the new class and set as
#Researcher
superclass the class from the previous example,
#Person
OntClass p = model.getOntClass(baseURI+"Person");
OntClass r = model.createClass(baseURI+"Researcher");
r.addSuperClass(p)
The class has several methods available to check the
OntClass
characteristics of a class. All these methods return a Boolean
parameter. Some of these methods are illustrated in table 14-2.
Table 14-2. Methods to check the characteristics of an OntClass object
isIntersectionClass() isComplementClass()
isRestriction() hasSuperClass()
5.5 Manipulating Properties
With Jena, properties are represented using the class
. Two types of OWL properties exist:
OntProperty
• Datatype Properties are attributes of a class. These types of
properties link individuals to data values and can be used to restrict
an individual member of a class to RDF literals and XML Schema
datatypes.
• Object Properties are relationships between classes. They link
individuals to individuals. They relate an instance of one class to
an instance of another class.
It is possible to dynamically create new properties. The
OntModel
class includes the method to create properties (and
createXXX()
classes as we have already seen previously). As an example, the
following code creates a new class named and an
#Project
named . Using the
ObjectProperty #ProjectOwner setRange
and methods of the class we set the
setDomain ObjectProperty
domain of the new property to and its range to .
#Project #Person
...
OntClass p=model.createClass(BaseUri +"#Project");
ObjectProperty po=
Programming the Semantic Web 15
model.createObjectProperty(BaseUri+"#ProjectOwner");
po.setRange(model.getResource(BaseUri+"#Person"));
po.setDomain(p);
...
A DatatypeProperty can be created in the same way, but using the
method, i.e.
createDatatypeProperty
DatatypeProperty p=
model.createDatatypeProperty(BaseUri+"#ProjectDate");
The class has several methods available to check
OntProperty
the characteristics of a Property. All these methods return a Boolean
parameter. For example,
Table 14-3. Methods to check the characteristics of an OntProperty object
isTransitiveProperty() isSymmetricProperty()
isDatatypeProperty() isObjectProperty()
The following segment of code can be used to list the properties of
a class. Basically the from the class
listDeclaredProperties()
needs to be called.
OntClass
import com.hp.hpl.jena.ontology.OntClass;
import com.hp.hpl.jena.ontology.OntModel;
import com.hp.hpl.jena.ontology.OntModelSpec;
import com.hp.hpl.jena.rdf.model.ModelFactory;
import com.hp.hpl.jena.util.iterator.ExtendedIterator;
public class ListProperties {
public static void main(String[] args) {
String baseURI=
"http://dme.uma.pt/jcardoso/owl/University.owl#";
OntModel model = ModelFactory.createOntologyModel(
OntModelSpec.OWL_MEM);
model.read(
“http://dme.uma.pt/jcardoso/owl/University.owl");
OntClass cls = model.getOntClass(baseURI+"Person");
16 Semantic Web Services, Processes and Applications
System.out.println("Class:");
System.out.println(" "+cls.getURI());
System.out.println("Properties:");
for(ExtendedIterator j=cls.listDeclaredProperties();
.hasNext();)
{
System.out.println(" "+(OntProperty)j.next());
}
}
}
The output of executing this example is:
Class:
http://dme.uma.pt/jcardoso/owl/University.owl#Person
Properties:
http://dme.uma.pt/jcardoso/owl/University.owl#Age
http://dme.uma.pt/jcardoso/owl/University.owl#Address
http://dme.uma.pt/jcardoso/owl/University.owl#Email
http://dme.uma.pt/jcardoso/owl/University.owl#Name
, , , and are properties of the class
#Age #Address #Email #Name
.
#Person
5.6 Manipulating Instances
Instances, also known as individuals of classes, are represented
through the class . Having a class it is possible
Instance OntClass
to list all its instances using the method . A
listInstances()
similar method exists in the class but is named
OntModel
. For example, the following segment of code
listIndividuals()
lists all the individuals of the University ontology,
import com.hp.hpl.jena.ontology.Individual;
import com.hp.hpl.jena.ontology.OntModel;
import com.hp.hpl.jena.ontology.OntModelSpec;
import com.hp.hpl.jena.rdf.model.ModelFactory;
import com.hp.hpl.jena.util.iterator.ExtendedIterator;
public class ListInstances {