control model. In particular, we have defined the data processing
purpose and data operation purpose; and then introduced an algo-
rithm to automatically analyze and extract purposes from logical
query plans. On the other hand, we have developed a PAAC enforce-
ment mechanism for Spark’s structured data analytics engines/APIs.
The mechanism is deployed in Spark Catalyst, to re-write logical
plans into secure ones on-the-fly. With extensive experiments, we
show that GuardSpark++ effectively enforces PAAC and it only in-
troduces a small overhead to Spark. GuardSpark++ is open sourced
at (https://github.com/liveonearthormars).
ACKNOWLEDGMENTS
We would like to thank the anonymous reviewers for their construc-
tive comments. We also thank Dr. Fangxiao Ning’s technical help.
Tao Xue, Yu Wen, et al. were supported by the Strategic Priority
Research Program of CAS, Grant No.XDC02010300. Bo Luo was
sponsored in part by NSF CNS-1422206, DGE-1565570, NSA Science
of Security Initiative H98230-18-D-0009, and the Ripple University
Blockchain Research Initiative. Yingjiu Li was also supported in
part by the Ripple University Blockchain Research Initiative.
REFERENCES
[1] AMPlab.University of California, Berkeley.Big data benchmark. https://amplab.
cs.berkeley.edu/benchmark/.
[2] Apache Beam. https://beam.apache.org/.
[3] Apache Hadoop. http://hadoop.apache.org/.
[4] Apache Ranger. https://hortonworks.com/apache/ranger/.
[5] Apache Sentry. https://sentry.apache.org/.
[6] Apache Spark. https://spark.apache.org/.
[7] The Big Data Security Gap: Protecting the Hadoop Cluster, White Paper, Zit-
taset, 2014. http://www.zettaset.com/wp-content/uploads/2014/04/zettaset_wp_
security_0413.pdf.
[8] By Jure Leskovec. http://snap.stanford.edu/data/soc-Pokec.html.
[9] C.L. Blake and C.J. Merz (1998). UCI Repository of Machine Learning Databases.
University of California. http://archive.ics.uci.edu/ml/datasets/Iris.
[10] Data Sharing and Data Integration. https://www.european-big-data-value-
forum.eu/data-sharing-and-data-integration/.
[11] Databricks, Spark SQL Performance Tests, 2019. https://github.com/databricks/
spark-sql-perf.
[12] Enable Table Access Control. 2017. https://docs.databricks.com/administration-
guide/admin-settings/table-acls/table-acl.html.
[13] GitBook, 2019. https://jaceklaskowski.gitbooks.io/mastering-spark-sql/.
[14] GraphFrames User Guide, 2018. https://graphframes.github.io/user-guide.html.
[15] Introducing Row/Column Level Access Control for Apache Spark, 2017. https:
//ko.hortonworks.com/blog/row-column-level-control-apache-spark/.
[16] Kafka Security, 2019. http://www.cs.toronto-.edu/~kriz/cifar.html.
[17] MLlib:Main Guid, 2018. http://spark.apache.org/docs/latest/ml-clustering.html.
[18] MySQLTutorial. 2019. https://www.mysqltutorial.org/mysql-adminsitration/,
2019.
[19] Presto. https://prestodb.github.io/.
[20] Sharing in the Era of Big Bata. https://sciencenode.org/feature/improving-
sharing-in-the-era-of-big-data.php.
[21] Structured Streaming Programming Guide, 2018. http://spark.apache.org/docs/
latest/structured-streaming-programming-guide.html.
[22] Sysdig. https://sysdig.com/.
[23] TPC BENCHMARK DS Standard Specificationversion 2.3.0, Transaction Pro-
cessing Performance Council (TPC), 2016. http://www.tpc.org/tpc_documents_
current_versions/pdf/tpc-ds_v2.3.0.pdf.
[24] Privacy-Preserving Machine Learning: Threats and Solutions. IEEE Security &
Privacy, S&P’19 (2019).
[25] Structured Streaming: A Declarative API for Real-Time Applications in Apache
Spark. In Proceedings of the 2018 International Conference on Management of Data,
SIGMOD’18.
GuardSpark++: Fine-Grained Purpose-Aware Access Control for Secure Data Sharing and Analysis in Spark
ACSAC 2020, December 7–11, 2020, Austin, USA
[26] Spark SQL: Relational Data Processing in Spark. In Proceedings of the 2015 ACM
SIGMOD international conference on management of data, SIGMOD’15.
[27] Spanner: Becoming a SQL System. In Proceedings of the 2017 ACM International
Conference on Management of Data, SIGMOD’17.
[28] Nephele/PACTs: A Programming Model and Execution Framework for Web-Scale
Analytical Processing. In Proceedings of the 1st ACM Symposium on Cloud Comput-
ing (Indianapolis, Indiana, USA) (SoCC’10). Association for Computing Machinery,
New York, NY, USA, 119–130. https://doi.org/10.1145/1807128.1807148
[29] Big Data Security and Privacy, 2018.
[30] HDFS Architecture Guide. Hadoop Apache Project (2008).
[31] Privacy-Preserving Graph Algorithms in the Semi-Honest Model. In International
Conference on the Theory and Application of Cryptology and Information Security,
ASIACRYPT’05.
[32] Purpose Based Access Control for Privacy Protection in Relational Database
Systems. The International Journal on Very Large Data Bases, VLDB Journal’08
(2008).
[33] Apache Flink: Stream and Batch Processing in a Single Engine. Bulletin of the
IEEE Computer Society Technical Committee on Data Engineering 36, 4 (2015).
[34] The Importance of ABAC: Attribute-Based Access Control to Big Data: Privacy
and Context. Privacy and Big Data Institute, Ryerson University, Toronto, Canada
(2015).
[35] Spark: the Definitive Guide: Big Data Processing Made Simple, 2018.
[36] Enforcing Obligations within RelationalDatabase Management Systems. IEEE
Transactions on Dependable and Secure Computing 11, 4 (2013), 318–331.
[37] Enforcement of Purpose Based Access Control within Relational Database Man-
agement Systems. IEEE Transactions on Knowledge and Data Engineering, TKDE’14
(2014).
[38] Efficient Enforcement of Action-Aware Purpose-Based Access Control within
Relational Database Management Systems. In IEEE International Conference on
Data Engineering, ICDE’16.
[39] Towards a Unifying Attribute Based Access Control Approach for NoSQL Data-
stores. In 2017 IEEE 33rd International Conference on Data Engineering (ICDE).
IEEE, 709–720.
[40] Managing and Sharing Research Data: a Guide to Good Practice. SAGE Publications
[60] The SQL++ Semi-Structured Data Model and Query Language: A Capabilities
Survey of SQL-on-Hadoop, NoSQL and NewSQL databases. CoRR (2014).
[61] Role-Based Access Control. Network Security Technology & Application (2007).
[62] Security in Computing. Prentice Hall Professional Technical Reference, 2002.
[63] SparkXS: Efficient Access Control for Intelligent and Large-Scale Streaming Data
Applications. In International Conference on Intelligent Environments, 2015.
[64] Data-at-Rest Security for Spark. In 2016 IEEE International Conference on Big
Data (Big Data). IEEE, 1464–1473.
[65] Big Data Security: The Evolution of Hadoop’s Security Model, 2013. https:
//www.infoq.com/articles/HadoopSecurityModel/.
[66] Bringing Java’s Wild Native World under Control. ACM Transactions on Infor-
mation and System Security (TISSEC) (2013).
[67] Hive-A Petabyte Scale Data Warehouse using Hadoop. In 2010 IEEE 26th interna-
tional conference on data engineering, ICDE’10.
[68] GuardMR: Fine-Grained Security Policy Enforcement for MapReduce Systems.
In Proceedings of the 10th ACM Symposium on Information, Computer and Com-
munications Security, ASIA CCS ’15.
[69] Bigdatabench: A Big Data Benchmark Suite from Internet Services. In 2014
IEEE 20th International Symposium on High Performance Computer Architecture,
HPCA’14.
[70] MeDShare: Trust-Less Medical Data Sharing among Cloud Service Providers via
Blockchain. IEEE Access 5 (2017), 14757–14767.
[71] Data Level Inference Detection in Database Systems. In Proceedings. 11th IEEE
Computer Security Foundations Workshop, CSFW’98.
[72] Resilient Distributed Datasets: A Fault-Tolerant Abstraction for in-Memory
Cluster Computing. In Presented as part of the 9th {USENIX} Symposium on
Networked Systems Design and Implementation ({NSDI} 12). 15–28.
[73] Discretized Streams: Fault-Tolerant Streaming Computation at Scale. In Pro-
ceedings of the Twenty-Fourth ACM Symposium on Operating Systems Principles,
SOSP’13.
[74] Apache Spark: A Unified Engine for Big Data Processing. Commun. ACM (2016).
[75] Statistical Privacy for Streaming Traffic. In NDSS.
[76] SCOPE: Parallel Databases Meet MapReduce. The International Journal on Very
Large Data Bases, VLDB Journal’12 (2012).
[77] A Secure Anti-Collusion Data Sharing Scheme for Dynamic Groups in the Cloud.
IEEE Transactions on parallel and distributed systems 27, 1 (2015), 40–50.
Limited.
(2008).
[41] Privacy by Design in Big Data: an Overview of Privacy Enhancing Technologies
in the Era of Big Data Analytics. arXiv preprint arXiv:1512.06000 (2015).
[42] GraphFrames: An Integrated API for Mixing Graph and Relational Queries. In
Proceedings of the Fourth International Workshop on Graph Data Management
Experiences and Systems, GRADES’16.
[43] MapReduce: Simplified Data Processing on Large Clusters. Commun. ACM, 2008
[44] Big Data Sharing and Analysis to Advance Research in Post-Traumatic Epilepsy.
Neurobiology of disease 123 (2019), 127–136.
[45] The Inference Problem: A Survey. ACM SIGKDD Explorations Newsletter (2002).
[46] A Secure Environment for Untrusted Helper Applications: Confining the Wily
Hacker. In Proceedings of the 6th conference on USENIX Security Symposium,
Focusing on Applications of Cryptography.
[47] Going beyond the Sandbox: An Overview of the New Security Architecture in
the Java Development Kit 1.2.. In USENIX Symposium on Internet Technologies
and Systems.
[48] GraphX: Graph Processing in a Distributed Dataflow Framework. In Proceedings
of the 11th USENIX Conference on Operating Systems Design and Implementation,
OSDI’14.
[49] An Attribute-Based Access Control Model for Secure Big Data Processing in
Hadoop Ecosystem. In Proceedings of the Third ACM Workshop on Attribute-Based
Access Control (ABAC’18).
[50] Apache Flume: Distributed Log Collection for Hadoop, 2013.
[51] Big Data: Storage, Sharing, and Security. CRC Press, 2016.
[52] Guide to Attribute Based Access Control (ABAC) Definition and Considerations
(draft). NIST special publication 800, 162 (2013).
[53] An Attribute-Based Fine-Grained Access Control Mechanism for HBase. In
International Conference on Database and Expert Systems Applications. Springer,
44–59.
[54] Kafka: A Distributed Messaging System for Log Processing. In Proceedings of the
NetDB, 2011.
[55] Distributed Denial of Service Attacks. In Smc 2000 conference proceedings. 2000
ieee international conference on systems, man and cybernetics.’cybernetics evolving
to systems, humans, organizations, and their complex interactions’(cat. no. 0, Vol. 3.
IEEE, 2275–2280.
[56] Graph-Based Privacy-Preserving Data Publication. In IEEE INFOCOM 2016-
The 35th Annual IEEE International Conference on Computer Communications,
INFOCOM’16.
[57] MLlib: Machine Learning in Apache Spark. J. Mach. Learn. Res. (2016).
[58] Linux Security Modules: General Security Support for the Linux Kernel. In
USENIX Security Symposium, USENIX Security’02.
[59] An obligation model bridging access control policies and privacy policies.. In
SACMAT, Vol. 8. 133–142.
ACSAC 2020, December 7–11, 2020, Austin, USA
Tao Xue, et al.
A EXPERIMENTAL TABLE AND FIGURES
Figure 10: The Query35 string.
Figure 12: Three computation results about Query35.
This plan contains many aliases obviously exhibited in the for-
mat _ AS _ (e.g., avg(cd_dep_employed_count)#3041 is the alias
of computation expression avg(cd_dep_employed_count#412)).
Moreover, it includes three sub queries in the “Filter” operator.
Figure 11: The original analyzed logical plan and secure log-
ical plan of Query35 (Figure 10).
Figure 10 provides Query35 string used in the case study for
SQL engine (Section 6.4.1). This query, which contains various data
processing purposes, aliases and sub queries, is complicated enough
for showing our assessment. Figure 11 shows its original analyzed
logical plan and secure logical plan. Figure 12 shows the results
about the Query35. The reader will find that some information is
omitted in the logical plans in Figure 11. The omitted information
cannot obscure the understanding of this assessment. And, it is easy
for the reader to find some direct correspondences between the
SQL string and its logical plan (e.g., the cd_dep_employed_count
corresponds to the cd_dep_employed_count in Figure 11.)
As shown in Figure 11, the two plans have a common part in-
cluding the “Sort” operator and its below operators. The “Project”
operator above the “Sort” operator belongs to the original logical
plan and another in dotted box belongs to the secure logical plan.
The original logical plan makes computation on several objects
while outputting these objects (e.g., cd_dep_employed_count ob-
ject, and one of DOP-C purposes on this object is designated by
the expression avg(cd_dep_employed_count#412) (Section 5.3)).
The access control policy is that sensitive information in those ta-
bles accessed by Query35 cannot be seen. The corresponding objects
representing sensitive information in each table can be recognized
by initial abbreviation, e.g., ca_state object represents state infor-
mation in customer_address table; cd_gender represents gender
information in customer_demographics; ss_sales_price repre-
sents price information in store_sales.
Obviously, in the secure logical plan, all sensitive information is
prevented from direct disclosure by the zero setting logic (Section
5.5). The zero setting logic has the format “0 AS _”. For example,
the “0 AS cd_dep_employed_count#1754” indicates the value of the
cd_dep_employed_count object is set to zero). Meanwhile, compu-
tation results of some sensitive information are disclosed although
aliases are used on these results in the secure logical plan. For ex-
ample, the average of cd_dep_employed_count object is disclosed.
In addition, those three sub queries try to disclose sensitive infor-
mation (e.g., price information) to its “Filter” operator; however,
the sensitive information is not directly disclosed to a data user and
thus we don’t use zero setting logic to restrict this disclosing.
The computation results in Figure 12(b) are consistent with ones
in Figure 12(c) while outputted sensitive information is set to zero
in Figure 12(b). However, the computation results in Figure 12(a) are
obviously different from the ones in Figure 12(c) because directly
deleting sensitive information from data sources alters computation
results.
Three sub queries of Filter operator(a) The Query35 string. The reader will find that some information is omitted in the logical plan in (b). Those omitted information cannot obscure the understanding of this assessment. Moreover, it is easy for the reader to find some direct correspondences between the SQL string and its logical plan (e.g., the  cd_dep_employed_count  in (a) corresponds to the  cd_dep_employed_count  in (b).). (b) The secure logical plan and original logical plan of Query 35. Both have a common part including the Sort operator and its below operators, and the Project operator above the Sort operator belongs to the original logical plan and another in dotted box belongs to the secure logical plan. The original logical plan makes computation on several objects while retrieving these objects (e.g.,  cd_dep_employed_count  object. One of computation purposes on this object is designated by the expression avg(cd_dep_employed_count#412) (§4.3)). This plan contains many aliases obviously exhibited in the format  _ AS _  (e.g., avg(cd_dep_employed_count)#3041 is the alias of computation expression avg(cd_dep_employed_count#412)). Moreover, it includes three sub queries in the Filter operator. The access control policy is that sensitive information (see the note above) in those tables cannot be retrieved. Obviously, in the secure logical plan, all sensitive information is prevented from direct disclosure through the zero setting logic  (see the note above). Meanwhile, computation results on some sensitive information (e.g.,  cd_dep_employed_count object) are disclosed although aliases are used upon these results in the secure logical plan. In addition, those three sub queries try to disclose sensitive information (e.g., price information) to its Filter operator; however, the sensitive information is not directly disclosed to a user and the system-level purposes on the sensitive information are regarded as assistance purpose, resulting in no zero setting logic on them in the secure logical plan.    Note: zero setting logic (§4.5):  the format  0 AS _ represents the logic (e.g., the  0 AS cd_dep_employed_count#1754 indicates the value of the cd_dep_employed_count object  is set to zero).sensitive information: the corresponding objects representing sensitive information in each table can be recognized by initial abbreviation, e.g., ca_state object  represents state information in customer_address  table; cd_gender  object represents gender information in customer_demographics  table; ss_sales_price object represents price information in  store_sales  table. SELECT ca_state, cd_gender, cd_marital_status, count(*) cnt1, min(cd_dep_count), max(cd_dep_count), avg(cd_dep_count), cd_dep_employed_count, count(*) cnt2, min(cd_dep_employed_count), max(cd_dep_employed_count), avg(cd_dep_employed_count), cd_dep_college_count, count(*) cnt3, min(cd_dep_college_count), max(cd_dep_college_count), avg(cd_dep_college_count) FROM customer c, customer_address ca, customer_demographicsWHERE c.c_current_addr_sk = ca.ca_address_skAND cd_demo_sk = c.c_current_cdemo_sk AND Exists (SELECT * FROM store_sales, date_dim WHERE c.c_customer_sk = ss_customer_sk AND ss_sold_date_sk = d_date_sk AND d_year = 2002 AND d_qoy Project [0 AS ca_state#1750, 0 AS cd_gender#1751, 0 AS cd_marital_status#1753, cnt1#1700L, ..., avg(cd_dep_count))#1724, 0 AS cd_dep_employed_count#1754, cnt2#1701L, ..., avg(cd_dep_employed_count)#3041, 0 AS cd_dep_college_count#1752, cnt3#1702L, ...]=>Project [ca_state#497, cd_gender#406, cd_marital_status#407, cnt1#1700L, ..., avg(cd_dep_count))#1724, cd_dep_employed_count#412, cnt2#1701L,  , avg(cd_dep_employed_count)#3041, cd_dep_college_count#413, cnt3#1702L, ...]=>Sort [ca_state#497, cd_gender#406, cd_marital_status#407, aggOrder#1730, cd_dep_employed_count#412, cd_dep_college_count#413]=>Aggregate [ca_state#497,...], [ca_state#497, cd_gender#406, cd_marital_status#407, count(1) AS cnt1#1700L, ..., avg(cd_dep_count#411) AS avg(cd_dep_count)#1724, cd_dep_employed_count#412,  count(1) AS cnt2#1701L, ..., avg(cd_dep_employed_count#412) AS avg(cd_dep_employed_count)#3041, cd_dep_college_count#413, count(1) AS cnt3#1702L, ..., cd_dep_count#411 AS aggOrder#1730]=>Filter ((... && ...) && (exists#1703 [c_customer_sk#422] && (exists#1704 [c_customer_sk#422] || exists#1705 [c_customer_sk#422])))         => Project [..., ss_sales_price#876, ...]         ...         => Underlying tables （including store_sales table）                                            => Project [..., ws_sales_price#1150, ...]      ...                                                        => Underlying tables (including web_sales table)   => Project [..., cs_sales_price#256, ...]   ...   => Underlying tables (including catalog_sales table)...  =>Underlying tables (including customer_address and customer_demographics tables)Project [0 AS ca_state#1750, 0 AS cd_gender#1751, 0 AS cd_marital_status#1753, cnt1#1700L, ..., avg(cd_dep_count))#1724, 0 AS cd_dep_employed_count#1754, cnt2#1701L, ..., avg(cd_dep_employed_count)#3041, 0 AS cd_dep_college_count#1752, cnt3#1702L, ...]Project [ca_state#497, cd_gender#406, cd_marital_status#407, cnt1#1700L, ..., avg(cd_dep_count))#1724, cd_dep_employed_count#412, cnt2#1701L, ...,avg(cd_dep_employed_count)#3041, cd_dep_college_count#413, cnt3#1702L, ...]Sort [ca_state#497, cd_gender#406, cd_marital_status#407, aggOrder#1730, cd_dep_employed_count#412, cd_dep_college_count#413]Aggregate [ca_state#497,...], [ca_state#497, cd_gender#406, cd_marital_status#407, count(1) AS cnt1#1700L, ..., avg(cd_dep_count#411) AS avg(cd_dep_count)#1724, cd_dep_employed_count#412, count(1) AS cnt2#1701L, avg(cd_dep_employed_count#412) AS avg(cd_dep_employed_count)#3041, cd_dep_college_count#413, count(1) AS cnt3#1702L, ..., cd_dep_count#411 AS aggOrder#1730]Filter ((... && ...) && (exists#1703 [c_customer_sk#422] && (exists#1704 [c_customer_sk#422] || exists#1705 [c_customer_sk#422]))) Project [..., ss_sales_price#876, ...] Underlying tables （including store_sales table） Project [..., ws_sales_price#1150, ...] Underlying tables (including web_sales table) Project [..., cs_sales_price#256, ...] Underlying tables (including catalog_sales table) Underlying tables (including customer_address and customer_demographics tables)=>=>=>=>=>=>=>=>=>=>=>=>.........Three sub queriesof Filter operatorc1c2c3c4c5c6c7c8c9c10c11c12c13c14c15c16c17000169800001698000016980000001807111018070000180700000017822220178200001782000c1c2c3c4c5c6c7c8c9c10c11c12c13c14c15c16c17000100001000013330001000010000155500010000133301222c1c2c3c4c5c6c7c8c9c10c11c12c13c14c15c16c17nullFD10000100031333nullFD10000100051555nullFD10003133321222(a) The results of Query 35 are got from 2GB data with sensitive informationdirectly deleted from these data.(b) The results of Query 35 are got from 2GB data with sensitive informationdeleted by zero setting logic in secure logical plan.(c) The results of Query 35 are got from 2GB data without access controlpolicy.𝒄𝟏 :  ca_state, 𝒄𝟐 : cd_gender, 𝒄𝟑 : cd_marital_status, 𝒄𝟒: cnt1,  𝒄𝟓: min(cd_dep_count), 𝒄𝟔: max(cd_dep_count), 𝒄𝟕: avg(cd_dep_count), 𝒄𝟖: cd_dep_employed_count,  𝒄𝟗 : cnt2, 𝒄𝟏𝟎: min(cd_dep_employed_count), 𝒄𝟏𝟏: max(cd_dep_employed_count),  𝒄𝟏𝟐: avg(cd_dep_employed_count),  𝒄𝟏𝟑: cd_dep_college_count, 𝒄𝟏𝟒: cnt3,  𝒄𝟏𝟓: min(cd_dep_college_count),  𝒄𝟏𝟔: max(cd_dep_college_count), 𝒄𝟏𝟕: avg(cd_dep_college_count) Note: The bold italics represent sensitive information. (𝒄𝟏, 𝒄𝟐, 𝒄𝟑, 𝒄𝟖, 𝒄𝟏𝟑)           The others are computation results.