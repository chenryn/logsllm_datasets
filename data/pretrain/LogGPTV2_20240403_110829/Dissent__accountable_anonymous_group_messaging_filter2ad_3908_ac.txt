by exhibiting one of j’s messages µjφ, together with a false “prior”
kφ′ (for φ′ < φ) signed by some colluding node k, dif-
message m′
ferent from the message µkφ′ that j actually used to compute her
message µjφ. In this case, the “proof” will contain both µkφ′ (from
j’s log) and the false m′
kφ′ , exposing the equivocating member k
instead of honest member j.
Suppose a protocol run fails, but some honest member i does not
expose any faulty member. Member i observes a run to fail if it
reaches phase 5a (decryption) but detects a bad secondary private
key, or if it reaches phase 5b (blame). A failure in phase 5a exposes
the sender of the bad secondary key. Member i enters phase 5b
only if it: (a) detects a faulty encryption key in phase 1, (b) detects
a duplicate or faulty ciphertext in phase 3, (c) sees a GOj = FALSE
in phase 4, or (d) sees an incorrect HASH{ ~B} in phase 4. Case (a)
immediately exposes the relevant message’s sender as faulty.
In case (b), member i can encounter a duplicate ciphertext in
phase 3 only if some member 1 ≤ j < i injected it earlier in the
anonymization phase, or if two members j1 and j2 colluded to in-
ject it in phase 2. (Two independently encrypted ciphertexts are
cryptographically unique due to the random bits used in encryp-
tion.) If some member 1 ≤ j < i duplicated a ciphertext, then
using the message logs of members 1 through i and the random
bits from phase 2, member i can replay the decryptions and permu-
tations of each member before i in phase 3 to expose j as faulty.
If no member duplicated a ciphertext in phase 3, then in replaying
phase 3, i identiﬁes the ciphertexts Cj1 and Cj2 (which decrypt to
identical ciphertexts in ~Ci−1), and exposes their senders j1 and j2.
If i cannot decrypt a ciphertext in phase 3, it similarly traces the
bad ciphertext to the member responsible.
In case (c), the sender j of the GOj = FALSE either truthfully
reported its ciphertext missing in phase 4, or sent GOj = FALSE
344j appeared in ~CN . In the former case, i
although its ciphertext C ′
replays phase 3 to expose the member who replaced j’s ciphertext.
In the latter case, the occurrence of C ′
j in ~CN exposes j itself.
In case (d), member i’s ~B does not match the HASH{ ~B ′} in an-
other member j’s go/no-go ( ~B 6= ~B ′). Members i and j compare
their respective message logs. If i’s log of prior broadcast messages
does not match its computed ~B, this fact exposes i, and similarly
for j with its ~B ′. Otherwise, for some member k and phase φ, there
must be corresponding signed messages that differ between B and
B ′, i.e., some µkφ ∈ B and µ′
kφ. These
messages expose k as having equivocated during a broadcast.
kφ ∈ B ′ such that µkφ 6= µ′
3.4 Asymptotic Complexity
Since iterated public-key encryptions as performed in phase 2
typically involve plaintext expansion, let ˜L = L + O(N ) be the
size of an L-bit input message after these 2N encryptions.
If the underlying network provides efﬁcient broadcast, then each
node transmits O(N ˜L) bits during a run, for a total messaging cost
of O(N 2 ˜L). Without efﬁcient broadcast, the “normal-case” phases
1 through 5a still require each node to transmit only O(N ˜L) bits,
for O(N 2 ˜L) overall cost, because all broadcasts in these phases
are either single messages of length O(N ˜L) or N messages of
length O( ˜L). The blame phase in an unsuccessful run may require
O(N 3 ˜L) total communication for all honest members to expose
some faulty member, but an attacker can trigger at most O(N ) such
runs before the group exposes and removes all faulty members.
Latency is dominated by the N serial communication rounds in
phase 3, in which each node must send O(N ˜L) bits, for a total
latency of O(N 2 ˜L) transmission bit-times. Other phases require a
constant number of unicast messages or parallelizable broadcasts.
Excluding the blame phase, each member’s computational cost
is dominated by the 2N public-key encryptions and decryptions it
performs. Each of these operations is on a plaintext of length O( ˜L),
for a processing cost of O(N ˜L) per node or O(N 2 ˜L) total. The
blame phase introduces an additional O(N ) factor if all members
must replay all other members’ encryptions.
4. BULK PROTOCOL
We now describe Dissent’s bulk protocol in detail, then analyze
its correctness, security properties, and complexity.
4.1 Protocol Description
Members 1, . . . , N initially hold messages m1, . . . , mN , now
of varying lengths L1, . . . , LN . We reuse the cryptographic prim-
itives described in Section 3.1. As before, each member i has a
signing key pair (ui, vi) and a primary encryption key pair (xi, yi).
All members know each others’ public keys, and have agreed upon
session nonce nR and an ordering of members.
• Phase 1: Message Descriptor Generation. Each member i chooses
a random seed sij for each member j, then for each j 6= i, gen-
erates Li pseudorandom bits from sij to obtain ciphertext Cij :
Cij = PRNG{Li, sij} (j 6= i)
Member i now XORs her message mi with each Cij for j 6= i
to obtain ciphertext Cii:
Cii = Ci1 ⊕ . . . ⊕ Ci(i−1) ⊕ mi ⊕ Ci(i+1) ⊕ . . . ⊕ CiN
Member i computes hashes Hij = HASH{Cij}, encrypts each
Rij
seed sij with j’s public key to form Sij = {sij}
yj , and col-
lects the Hij and Sij for each j into vectors ~Hi and ~Si:
~Hi = Hi1, . . . , HiN
~Si = Si1, . . . , SiN
Finally, member i forms a message descriptor, di:
di = {Li, HASH{mi}, ~Hi, ~Si}
• Phase 2: Message Descriptor Shufﬂe. The group runs the shufﬂe
protocol in Section 3, each member i submitting its ﬁxed-length
descriptor di as the secret message to be shufﬂed. The shufﬂe
protocol broadcasts all descriptors in some random permutation
π to all members, so di appears at position π(i) in the shufﬂe.
• Phase 3: Data transmission. Each member j now recognizes its
own descriptor dj in the shufﬂe, and sets C ′
jj = Cjj. From all
other descriptors di (i 6= j), j decrypts Sij with private key xj
to reveal seed sij , computes ciphertext Cij = PRNG{Li, sij},
and checks HASH{Cij} against Hij . If decryption succeeds and
the hashes match, member j sets C ′
ij = Cij. If decryption of
Sij fails or HASH{Cij} 6= Hij, then j sets C ′
ij to an empty
ciphertext, C ′
ij = {}.
Member j now signs and sends each C ′
for the protocol run, in π-shufﬂed order:
ij to the designated target
{C ′
π−1(1)j, . . . , C ′
π−1(N )j, nR, hj3}SIGuj .
• Phase 4: Message Recovery. The designated target (or each
member if the target is the group) checks each C ′
ij it receives
from member j against the corresponding Hij from descriptor
di. If C ′
ij} 6= Hij , then message slot
π(i) was corrupted and the target ignores it. For each uncor-
rupted slot π(i), the target recovers i’s message by computing:
ij is empty or HASH{C ′
mi = C ′
i1 ⊕ ... ⊕ C ′
iN
• Phase 5: Blame. If any messages were corrupted in phase 4,
all members run the shufﬂe protocol again, during which each
member i whose message was corrupted anonymously broad-
casts an accusation naming the culprit member j:
Ai = {j, Sij, sij, Rij}
Each accusation contains the seed sij that i assigned j and the
random bits i used to encrypt the seed. Each member k veriﬁes
Rij
the revealed seed by replaying its encryption Sij = {sij}
yj ,
and checks that Hij = HASH{PRNG{Li, sij}}. If the accusa-
tion is valid, then k exposes j as faulty. If the shufﬂe reveals
no valid accusation for a corrupted message slot π(i), then k
does nothing: either the anonymous sender i has corrupted its
own message or has chosen not to accuse the member who did,
which is equivalent to i sending a valid but useless message.
4.2 Protocol Correctness
We now sketch proofs of the bulk protocol’s correctness.
4.2.1
Integrity
The shufﬂe protocol ensures that the message descriptor di of
each honest member i is correctly included in the shufﬂed output.
The target can use either the individual ciphertext hashes Hij or
the cleartext hash HASH{mi} from di to verify the integrity of i’s
message in the bulk output. The cleartext hash HASH{mi} is tech-
nically redundant, but enables all members to verify the output if
only one node collects and combines the ciphertexts for efﬁciency.
4.2.2 Anonymity
Suppose an attacker controls all but two honest members i and
j, and wishes to win the anonymity game [7] by determining with
345non-negligible advantage over random guessing which honest mem-
ber sent one of their plaintexts, for example, mi. The attacker
knows which two message slots π(i) and π(j) belong to the honest
members, and must ﬁnd the exact permutation π. Since the shuf-
ﬂe protocol preserves anonymity (Section 3.3.2) and the shufﬂed
message descriptors depend only on random bits and the messages
themselves, the attacker learns nothing about π from the message
descriptors. The only other information the attacker obtains about
mi are the ciphertexts C ′
ik produced by all members k. But since
each bit of C ′
ij is encrypted with a pseudorandom one-time
pad generated from a seed sij that only i and j know, the attacker
learns nothing from these ciphertext bits.
ii and C ′
4.2.3 Accountability
We ﬁrst show that no dishonest member i can expose an hon-
est member j. Since the shufﬂe protocol maintains accountability,
we need only show that the bulk protocol never exposes an hon-
est member in its blame phase. To expose j, i must anonymously
submit a valid accusation naming j as faulty. This accusation must
include a seed s′
ij} 6= PRNG{Li, sij} and
Hij = HASH{PRNG{Li, s′
ij}}, thus violating our assumption that
the hash function is collision resistant.
ij such that PRNG{Li, s′
Now suppose the bulk protocol violates accountability, such that
at the end of a protocol run, some honest member j does not hold
the plaintext of another honest member i and does not expose any
dishonest member. Since the shufﬂe protocol maintains account-
ability, member j must have received i’s message descriptor di, or
have exposed some group member k. Since i is honest, di contains
correctly computed hashes Hik and correctly encrypted seeds Sik
for ciphertexts C ′
ik that, XORed together, would reveal i’s message
mi to j. Some member k must therefore have sent an incorrect ci-
phertext in the bulk phase. But since i is honest, i would have sent
a correct accusation of k in the blame phase, exposing k as faulty.
4.3 Asymptotic Complexity
With efﬁcient broadcast, in the normal case each member trans-
mits O(N 2) bits to shufﬂe N message descriptors of length O(N ),
then sends Ltot + O(1) bits of bulk ciphertext, where Ltot =
Pi Li. Normal-case communication complexity is thus O(N 2) +
Ltot bits per node. An unsuccessful run may transmit O(N 3) +
Ltot bits per node due to the shufﬂe protocol’s blame phase.
If N is small so that Ltot dominates, only one member wishes
to transmit (Li = Ltot and Lj = 0 for j 6= i), and the transmitted
data is incompressible, then Dissent’s communication efﬁciency is
asymptotically optimal for our attack model: trivial trafﬁc analy-
sis reveals that any member sending fewer than Ltot bits cannot be
the sender. An interesting question for future work is whether bet-
ter communication efﬁciency is feasible, while preserving strong
trafﬁc analysis resistance, when several members transmit at once.
The shufﬂe protocol incurs an O(N 3) startup latency, as the
N nodes serially shufﬂe N descriptors of length O(N ), but the
data transmission phase is fully parallelizable, for a total latency of
O(N 3 + Ltot) transmission bit-times overall.
Each member i performs N cryptographic operations on O(N )
bits each during the shufﬂe, N operations on Li bits to compute
Cii, and one operation on Lj bits to compute Cij for each j 6= i.
Computational complexity is thus O(N 2 + N Ltot) per node.
5. USAGE CONSIDERATIONS
In describing Dissent’s shufﬂe and bulk protocols, we made a
number of simplifying assumptions, which we now address by plac-
ing these core protocols in the context of a more realistic, high-level
“wrapper” protocol. We merely sketch this wrapper protocol with-
out formal deﬁnition or analysis, since it is intended only to illus-
trate one way to deploy Dissent in a realistic environment, and not
to deﬁne the “right” way to do so. The wrapper protocol addresses
ﬁve practical issues: protocol initiation, member selection, deni-
able keying, liveness assurance, and end-to-end reliability.
5.1 Protocol Initiation
Our shufﬂe and bulk protocols assume that all group members
“just know” when to commence a protocol run, but in practice some
node must initiate each run. Members must not initiate a protocol
run out of a desire to send anonymously, however, since doing so
would make the sender’s identity obvious to trafﬁc analysis.
In our wrapper protocol, therefore, each protocol run is unilat-
erally initiated by some node, whom we call the leader. To en-
able members to send “spontaneously” without compromising their
anonymity, every group member periodically initiates a protocol
run independently of its own desire to send, on either a ﬁxed or ran-
domized time schedule. Anonymity would be equally well served
if the leader was the same for all protocol runs, but requiring ev-