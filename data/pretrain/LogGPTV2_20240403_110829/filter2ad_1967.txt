title:Experimenting software radio with the Sora platform
author:Jiansong Zhang and
Kun Tan and
Sen Xiang and
Qiufeng Yin and
Qi Luo and
Yong He and
Ji Fang and
Yongguang Zhang
Experimenting Software Radio with the Sora Platform
Jiansong Zhang Kun Tan
Sen Xiang Qiufeng Yin
Qi Luo Yong He
Ji Fang Yongguang Zhang
Microsoft Research Asia
Beijing, China
ABSTRACT
Sora is a fully programmable, high performance software radio
platform based on commodity general-purpose PC. In this demon-
stration, we illustrate the main features of the Sora platform that
provide researchers ﬂexible and powerful means to conduct wire-
less experiments at different levels with various goals. Speciﬁcally,
the demonstrator will show four useful applications for wireless re-
search that are built based on the Sora platform: 1) A capture tool
that allows one to take a snapshot on a wireless channel; 2) a sig-
nal generation tool that allows one to transmit arbitrary baseband
wave-form over the air, from a monophonic tone to a complex mod-
ulated frame; 3) an on-line real-time receiving application that uses
the Sora User-Mode Extension; and 4) a fully featured Software
radio WiFi driver (SoftWiFi) that can seamlessly inter-operate with
commercial WiFi cards.
Categories and Subject Descriptors
C.2.1 [COMPUTER-COMMUNICATION NETWORKS]: Net-
work Architecture and Design—Wireless communication
General Terms
Algorithms, Design, Experimentation
Keywords
Software radio, Sora, Wireless experiment
1.
INTRODUCTION
Wireless networking is ubiquitous and has become an essential
part of global Internet. Recently, there shows a clear trend that
wireless networking research has been crossing from higher layer
((i.e. MAC and above) into the low layer primitives (i.e. PHY).
However, it remains a challenge to experiment with such research
work, especially with high-speed modulations and wide spectrum
band.
It is because that low layers of wireless are typically im-
plemented in hardware, which is either based on ASIC that has
very limited reconﬁgurability (e.g. Atheros chips with MadWiﬁ
driver [2]), or is based on FPGA and requires complicated pro-
gramming (e.g. WAPR [4]).
To address this challenge, we develop Sora, a fully programmable,
high performance software radio platform based on commodity
general-purpose PC [3, 5]. Compared to hardware solutions, Sora
Copyright is held by the author/owner(s).
SIGCOMM’10, August 30–September 3, 2010, New Delhi, India.
ACM 978-1-4503-0201-2/10/08.
allows researchers to implement high-speed wireless protocols en-
tirely in software with familiar programming environment, e.g. C/C++
language, and conduct real over-the-air experiments. Compared
with other GPP-based SDR solutions (e.g. GNURadio/USRP [1]),
Sora can achieve the full ﬁdelity of state-of-the-art wireless proto-
cols in real high-speed, wide-band environments, while using stan-
dard operating systems and applications.
In this demonstration, we will illustrate the main features of the
Sora platform that provide researchers ﬂexible and powerful means
to conduct wireless experiments at different levels with various
goals. Speciﬁcally, the demonstrator will show four useful applica-
tions for wireless research that are built based on Sora:
1. A capture tool that allows one to take a snapshot on a wire-
less channel. The captured signals are stored locally in a
hard-drive ﬁle. This ﬁle can be later fed to other off-line pro-
cessing tools for analysis or display.
2. A signal generation tool that allows one to transmit arbitrary
baseband wave-form over the air, from a monophonic tone to
a complex modulated frame. This generated wireless signal
can work as a stimulus source to test receivers or measure
wireless channels.
3. An on-line real-time receiving application that uses the Sora
User-Mode Extension. This receiving application runs in the
User Mode, and is able to receive digital signals from radio
front-end in real-time manner with very low latency. More-
over, the user-mode application can still enjoy the core dedi-
cation service provided by Sora platform. Thus, researchers
can write high-performance user-mode process programs with
minimal disruptions.
4. A fully featured Software radio WiFi driver (SoftWiFi). The
driver exposes a normal Ethernet interface to the upper TCP/IP
layer with fully software implemented IEEE 802.11a/b/g PHY
and MAC. SoftWiFi can communicate seamlessly with com-
mercial 802.11 NICs at various data rates up to 54Mbps. Im-
plemented as Kernel-mode drivers, software radios will have
less overhead and enjoy near-metal short responsive time.
Further, it also enables researchers to deploy and experiment
with rich existing network applications on their software ra-
dio test-beds.
2. SORA OVERVIEW
Architecturally, Sora platform contains both hardware and soft-
ware components, as shown in Figure 1.
The hardware components in the Sora architecture are a new ra-
dio control board (RCB) with an interchangeable radio front-end
469Figure 1: The Sora system architecture.
(RF front-end). The radio frontend is a hardware module that re-
ceives and/or transmits radio signals through an antenna. Multiple
wireless technologies deﬁned on the same frequency band can use
the same RF front-end hardware, and the RCB can connect to dif-
ferent RF front-ends designed for different frequency bands.
The RCB is a new PC interface board for establishing a high-
throughput, low-latency path for transferring high-ﬁdelity digital
signals between the RF frontend and PC memory, as shown in Fig-
ure 3. To achieve the required system throughput, the RCB uses
a high-speed, low-latency PCIe bus. With a maximum throughput
of 16Gbps (PCIe x8) and submicrosecond latency, it is well-suited
for supporting multiple gigabit data rates for wireless signals over
a very wide band or over many MIMO channels.
Figure 2: Sora radio control board.
Figure 3 illustrates Sora’s software architecture. The software
components in Sora provide necessary system services and pro-
gramming support for implementing various wireless PHY and MAC
protocols in a general-purpose operating system. In addition to fa-
cilitating the interaction with the RCB, the Sora platform provides
a set of techniques to greatly improve the performance of PHY and
MAC processing on GPPs. To meet the processing and real-time
requirements, these techniques make full use of various common
features in existing multi-core CPU architectures, including the ex-
tensive use of lookup tables (LUTs), the efﬁcient partitioning of
streamlined processing over multiple cores, exclusive dedication
of cores for software radio tasks and substantial data-parallelism
with CPU SIMD extensions. Sora provides an high-level abstrac-
tion of SIMD operations, named Vector1, that allows developers to
exploit SIMD capability of modern processors in an architecture-
independent manner.
Developers can write both user-mode processing applications or
kernel network drivers for software radio processing. The Sora
User-Mode Extension provides a convenient way for user-mode ap-
plications to access digital samples received from RF front-end in
real-time with low latency.
3. DEMONSTRATION
Our demonstrations takes four sample applications that are built
on the Sora platform.
Wireless channel capture tool. Sora provides API for applications
to capture a snapshot on a wireless channel and store the signals
in a local ﬁle. The snapshot is 16M bytes, which is translated to
a period of 100 ms for a 40MHz wireless channel. The capture
Figure 3: Sora software architecture.
ﬁle contains the raw I/Q signals and can be further processed by
other off-line analysis tools. In this demonstration, we will show
a graphic-based spectrum analyzer that parses the store signals and
visualize the results on the screen.
Wireless signal generator. An application program can further in-
struct Sora platform to transmit an arbitrary waveform over the air.
The waveform can be a simple monophonic tone or a complex mod-
ulated signal. In this demonstration, we will use the tool to generate
a signature signal to precisely measure the wireless channel coefﬁ-
cients, and transmit a pre-modulated frame to test our receiver.
On-line real-time SDR receiving program. This is a user-mode
program that receives and processes real-time digital signals using
the Sora User-Mode Extension. A user-mode program is easy to
write, debug and deploy. With the Sora platform, it is also possible
for a user-mode program to use the core dedication service. Thus,
efﬁcient DSP algorithms can be implemented in a multi-core sys-
tem with minimal disruption. We demonstrate two receivers, one
ZigBee and one 802.11. These two receivers can work simultane-
ously on the same Sora hardware.
Fully featured SoftWiFi Driver. The driver implements a fully
featured 802.11a/b/g PHY and MAC that can seamlessly inter-operate
with commercial NICs at all data rates up to 54Mbps. It exposes
a virtual Ethernet interface to the operating system. Thus, exist-
ing network applications can run unmodiﬁed over a software radio
network.
These sample applications cover several common useful scenar-
ios of experimenting wireless. We note that part of these samples
are included in Microsoft Software Radio Kit for academic [3] and
they are extensible and can be easily customized for future applica-
tions.
4. REFERENCES
[1] Gnu radio. http://www.gnu.org/software/gnuradio/.
[2] Madwiﬁ. http://sourceforge.net/projects/madwiﬁ.
[3] Microsoft research software radio platform.
http://research.microsoft.com/en-
us/projects/sora/academickit.aspx.
[4] WARP: Wireless open access research platform.
http://warp.rice.edu/trac.
[5] K. Tan, J. Zhang, J. Fang, H. Liu, Y. Ye, S. Wang, Y. Zhang,
H. Wu, W. Wang, and G. M. Voelker. Sora: High performance
software radio using general purpose multi-core processors. In
NSDI 2009.
MemRFRFRFSoraAPPMulti-coreCPUSoraSoft-RadioStackHighthroughputlowlatencyPCIebusDigitalSamples@MultipleGbpsRCBA/DD/ARFSoraAPPAPPAPPAPPAPPSoraStackEthernet InterfaceRCB managementRadio managementSoraDSPLibSoraethreadLib (core dedication)SoraStreamingLibSW MAC SW PHY SoraFSMLibLink layer SoraframingLibTCP/IPSoraRCBKernelNet AppNet AppNet AppSDR User-modeProcessing AppSora User-Mode  Extension470