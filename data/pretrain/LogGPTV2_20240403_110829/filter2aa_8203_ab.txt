            for g in groups_lengths:
                codes = OrderedHuffmanTable(g)
                codes.populate_huffman_symbols()
                codes.min_max_bits()
                tables.append(codes)
            #favourites = map(chr,range(sum(used)))
            #favourites = string.join([y for x,y in map(None,used,map(chr,range(len(used)))) if x],'')
            favourites = [y for x,y in map(None,used,map(chr,range(len(used)))) if x]
            data_start = b.tellbits()
            selector_pointer = 0
            decoded = 0
            # Main Huffman loop
            repeat = repeat_power = 0
            buffer = ''
            t = None
            while True:
                decoded -= 1
                if decoded  0:
                    # Remember kids: If there is only one repeated
                    # real symbol, it is encoded with *zero* Huffman
                    # bits and not output... so buffer[-1] doesn't work.
                    ##print 'runfinal', repeat
                    buffer += favourites[0] * repeat
                    repeat = 0
                if r == symbols_in_use - 1:
                    ##print 'finished', `buffer[:10]`, '..', `buffer[-10:]`, 'len', len(buffer)
                    break
                else:
                    o = favourites[r-1]
                    ##print 'pre ', `favourites`
                    move_to_front(favourites, r-1)
                    ##print 'post', `favourites`
                    ##print 'output', `o`
                    buffer += o
                    pass
            ##print 'huffman', `buffer`, pointer, len(buffer)
            if True:
                #nearly_there = bwt_reverse(buffer, len(buffer)-pointer-1)
                nt = nearly_there = bwt_reverse(buffer, pointer)
                ##print 'nearly there', `nearly_there`
                done = ''
                i = 0
                # Pointless/irritating run-length encoding step
                while i  0:
                        ##print 'add 0 count', literal_count, 'bits', lz_start-literal_start, 'data', `out[-literal_count:]`
                        literal_count = 0
                    #print 'eos 0 count 0 bits', b.tellbits() - lz_start
                    #print 'end of Huffman block encountered'
                    break
                elif 257  0:
                        ##print 'add 0 count', literal_count, 'bits', lz_start-literal_start, 'data', `out[-literal_count:]`
                        literal_count = 0
                    #print "reading", extra_length_bits(r), "extra bits for len"
                    length_extra = b.readbits(extra_length_bits(r))
                    length = length_base(r) + length_extra
                    r1 = main_distances.find_next_symbol(b)
                    if 0  distance:
                            out += out[-distance:]
                            cmdbuf.pushcmd( ("ADDL", distance) )
                            length -= distance
                        if length == distance:
                            out += out[-distance:]
                            cmdbuf.pushcmd( ("ADDL", distance) )
                        else:
                            out += out[-distance:length-distance]
                            cmdbuf.pushcmd( ("ADDO", distance, length) )
                        #print 'dictionary lookup: length', cached_length,
                        #print 'copy', -distance, 'num bits', b.tellbits() - lz_start, 'data', str(out[-cached_length:])
                    elif 30 |'
        #print '\tThe contents will be decoded and decompressed plaintext written to "./out".'
        sys.exit(0)
    profile_code = False
    if not profile_code:
        try:
            import psyco
            psyco.full()
            profile_code = False
        except:
            pass
    if profile_code:
        import profile
        profile.run('_main()')
    else:
        _main()