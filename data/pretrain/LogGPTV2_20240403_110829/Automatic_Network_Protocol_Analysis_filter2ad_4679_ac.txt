ing the algorithm to strings, one can assign a negative score
when the algorithm attempts to align two different charac-
ters, or when it attempts to align a character in one string
with a gap in the other one. When the two characters are
the same, a positive score is assigned. Based on the scores,
the algorithm ﬁnds the alignment that maximizes the over-
all score.
For our system, the scoring function used for alignment
has to take into account that a message is not simply a se-
quence of basic ﬁelds. Instead, a message can be composed
of complex, nested ﬁelds. To obtain a score for a pair of
complex ﬁelds (ﬁelds arranged in a tree hierarchy), we ap-
ply the Needleman-Wunsch algorithm in a recursive fash-
ion. That is, we view the immediate children of the root
node (i.e., the ﬁrst layer of the tree) as a sequence of ﬁelds.
This is done for both trees, yielding two sequences of child
nodes. We then apply the alignment algorithm to these se-
quences. The score that is calculated is taken as the score
for the two root nodes. Of course, because each child node
can itself be a complex ﬁeld, the alignment might be called
recursively again.
When comparing two complex ﬁelds, the alignment al-
gorithm is called recursively.
In order for the recursive
calls to terminate, we require a function that can resolve
the base cases. More precisely, we require a way to calcu-
Figure 3. String alignment based on the Needleman-Wunsch algorithm.
late a score for a pair of basic ﬁelds, and a basic ﬁeld that
is matched with a complex ﬁeld.
To calculate the score for a pair of basic ﬁelds, we use
the following, simple method: We return a value of +1 if
two basic ﬁelds match, and a value of -1 if they do not
match. Also, the penalty for a single gap is set to -1. Two
length ﬁelds match if they have the same number of bytes.
A target ﬁeld matches another target ﬁeld only if the corre-
sponding length ﬁelds match. A scope ﬁeld and a delimited
ﬁeld match if they use the same delimiter. A token ﬁeld al-
ways matches another token ﬁeld. An individual byte ﬁeld
always matches another individual byte ﬁeld, even if the
value of the byte is different. This highlights how our al-
gorithm does not rely on textual similarity between mes-
sages, but on the message structure as inferred from server
behavior.
Clearly, ﬁelds of different types never match. Therefore,
for the alignment between a basic and a complex ﬁeld, we
always report a mismatch. However, the score cannot be
simply set to -1. This is because a complex ﬁeld can con-
tain many embedded ﬁelds, and thus, the penalty has to be
increased proportionally to the number of elements that the
complex ﬁeld contains. We solve this by simply multiply-
ing the penalty score by the number of embedded elements.
It would be possible to further tune the values used
for the scoring function.
In fact, the authors of previ-
ous work [10], who used alignment algorithms on net-
work traces, found it very challenging to select appropri-
ate weights. However, because we operate on input that is
well-structured and on a high level of abstraction, tuning
was not necessary as our alignment approach immediately
returned good results.
Generalization. After the alignment step, it is necessary
to produce a generalized result that can serve as an abstrac-
tion for the inputs. As an example for the generalization
step, revisit the example shown in Figure 3. Note that the
character ’b’ appears as optional in the generalized regular
expression, while there is an alternative expression inserted
for the characters ’d’ and ’e’.
For generalization, simple rules apply. When a node
in the tree is aligned with a gap, then this node becomes
an optional node. When two nodes are aligned that do
not match, we introduce an alternative node. This alterna-
tive node simply indicates that either one of the two struc-
tures can appear in the message. When matching, but non-
identical nodes are aligned, a new node is created that pre-
serves common properties of the aligned nodes. Two non-
identical nodes can be aligned when those nodes have the
same type, but their content is different. For instance, when
two byte ﬁelds are aligned that have different content, the
resulting node is a generic byte node that represents arbi-
trary bytes.
Once we have created a “generalized” tree, this tree can
be traversed to produce a regular expression. This regular
expression then represents the generalized message format
speciﬁcation. For a more complex example of running the
alignment and generalization algorithm on two messages
with a hierarchy of ﬁelds, please refer to Appendix C.
Repetition detection. A common pattern is for a proto-
col message format to allow an arbitrary number of repe-
titions of a certain part of the message. We use a simple
but effective heuristic to detect such cases. At the end of
the generalization phase, we look for two (or more) con-
secutive, optional nodes that match. When we ﬁnd such
nodes, we merge them into a single repetition node. For ex-
ample, using the standard regular expression notation, the
sequence ’a?a?a?’ would become ’a*’. If there is a non-
optional ﬁeld of the same type before or after the newly
created repetition node, it is merged into a ”one or more”
repetition. For example, the sequence ’aa?a?’ would be-
come ’a+’. The limitation of our technique is that it only
detects repetitions of identical nodes, missing more sub-
tle cases in which repeating elements contain a number of
different ﬁelds, such as in the case of HTTP header lines.
Parsing. We developed a simple parser that leverages the
generalized regular expressions that are produced by the
previous step to demonstrate that it is possible to parse ad-
ditional protocol messages of the same type. Since it is
a non-deterministic parser, the worst case computational
complexity of parsing is exponential. In practice, this has
not been a problem: the parser runs on our entire data set
in under two minutes. For parsing messages, a regular ex-
pression is almost sufﬁcient. However, some additional
information is necessary.
In particular, to parse a target
ﬁeld, we need to compute its length from the value of the
corresponding length ﬁeld. Otherwise, we do not know
when to stop reading bytes from a target ﬁeld. For this,
we need to make some assumptions on the encoding of the
length ﬁeld. In our current system, we assume that a length
ﬁeld stores an integer value with either little-endian or big-
endian encoding. With no further loss of generality, we can
assume that T = L ∗ scale + offset under one of the two
encodings, where T and L are, respectively, the length of
the target ﬁeld and the value of the length ﬁeld, and scale
a b c d   a c ea b c d   a _ c ea b? c [d|e]AlignmentGeneralizationTest Case
apache
lighttpd
ircnick
ircuser
smtphelo
smtpquit
smtpmail
dnsquery
nfslookup
nfsgetattr
nfscreate
nfswrite
smbnegotiate
smbtree
smbsession
Server
apache
lighttpd
iacd
iacd
sendmail
sendmail
sendmail
named
nfsd
nfsd
nfsd
nfsd
samba
samba
samba
Protocol
Message
HTTP
GET
HTTP
GET
IRC
NICK command
IRC
USER command
SMTP
HELO command
SMTP
QUIT command
SMTP
MAIL command
DNS
Query IPv4 Address
RPC/NFS
Lookup
RPC/NFS Getattr
RPC/NFS Create
RPC/NFS Write
SMB
SMB
SMB
negotiate protocol request
tree connect andX request
session setup andX request
Table 1. Test case summary.
#Msg
34
34
5
5
8
8
8
9
12
9
12
16
8
9
8
and offset are two integer constants. When merging two
length ﬁelds a and b, we can compute
this platform. However, our general approach equally ap-
plies to other systems (e.g., such as Windows) as well.
scale = (Ta − Tb)/(La − Lb)
offset = Ta − La ∗ scale = Tb − Lb ∗ scale
This computation will only be successful for one of the
two encodings (returning an integer result for scale, and a
consistent value for offset). This allows us to individually
detect the endianess of each length ﬁeld, without assuming
a common encoding of ﬁelds in the protocol.
In a similar way, to be able to parse a pointer ﬁeld, we
need to compute the position in the packet that it points
to.
In addition to the two possible encodings, a pointer
ﬁeld can represent an absolute position in the message or
an offset relative to the pointer ﬁeld itself. As for length
ﬁelds, we compute a scale and an offset and discard encod-
ing options for which this computation fails. When parsing
a pointer ﬁeld, we check that the offset this ﬁeld points to
is a valid offset inside the message.
5 Evaluation
In this section, we present the experimental evaluation
of our approach. We applied our techniques to multiple
server implementations of six real-world protocols. In par-
ticular, we selected HTTP, IRC, DNS, NFS, SMB and
SMTP. These protocols were chosen because they have
been used in the evaluation of previous work [4, 9, 10], be-
cause they represent a good mix of text-based (HTTP, IRC,
SMTP), binary (DNS, NFS) and mixed (SMB) protocols,
and because they are implemented by complex, real-world
programs (such as apache, bind, or samba). Note that
all programs that we analyzed are x86 Linux binaries. This
is because our dynamic tainting tool currently onl runs on
For each of the six analyzed network protocols, we se-
lected one well-known server program that implements this
protocol (two in the case of HTTP), and one or more mes-
sage types (e.g., a GET request for HTTP, Lookup, Getattr,
Write and Create requests for NFS). The full list of test
cases is detailed in Table 1. This table shows the server,
protocol, and message type that we analyzed. For each test
case, we used client programs to send the server a num-
ber of messages of the selected type. The number of client
messages for each test case is shown as column Message
in the table.
The server programs were monitored while processing
the requests, and we generated an execution trace for each
message. In the next step, our system analyzed these ex-
ecution traces and generated appropriate message format
speciﬁcations. In Appendix A, we present the full speci-
ﬁcations obtained for one message format for each of the
tested protocols. Table 2 shows the ﬁeld detection results
for different types of ﬁelds in each of the test cases, while
Table 3 further details the keyword and delimiter detection
results for each server. The results in these tables were
obtained by manually comparing our speciﬁcations with
ofﬁcial RFC documents and with Wireshark [30] output.
More details about the results for each individual protocol
are discussed in the following paragraphs. In general, how-
ever, we can observe that most of the ﬁelds were correctly
identiﬁed.
Finally, the speciﬁcations obtained for each test case
were used with our simple protocol parser to parse another
set of messages (of the same type). Despite imperfections
in the inferred formats (as highlighted by Table 2), parsing
succeeded in all test cases. This demonstrates that our sys-
tem is capable of automatically deriving accurate format
Test Case
apache
lighttpd
ircnick
ircuser
smtphelo
smtpquit
smtpmail
dnsquery
nfslookup
nfsgetattr
nfscreate
nfswrite
smbnegotiate
smbtree
smbsession
Length
Target
Padding
Pointer Delimiter Keyword
0
0
0
0
0
0
0
1/1
4/5
3/4
4/5
4/6
2/2
2/3
8/9
0
0
0
0
0
0
0
1/1
4/4
3/3
4/4
4/4
2/2
2/2
8/8
0
0
0
0
0
0
0
0
2/2
1/1
2/2
2/2
1/1
0
0
0
0
0
0
0
0
0
0
0