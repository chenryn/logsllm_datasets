6  y_ = tf.constant(0.0, name='correct_value')
7  loss = tf.pow(y – y_, 2, name='loss')
8  train_step = tf.train.GradientDescentOptimizer(0.025).minimize(loss)
9 
10 for value in[x, w, y, y_, loss]:
11     tf.summary.scalar(value.op.name, value)
1212
13 session = tf.Session()
14
15 summaries = tf.summary.merge_all()
16 summary_writer = tf.summary.FileWriter('log_simple_stats', session.graph)
17
18 session.run(tf.global_variables_initializer())
19 for i in range(100):
20      summary_writer.add_summary(session.run(summaries), i)
21      session.run(train_step)
22      if (i % 10) == 0: print (session.run(y))
23
24 summary_writer.close()23
24 summary_writer.close()
此代码导入 TensorFlow 并使用第 3 行到第 8 行的定义在它上创建一个图形。
最初，系统采用输入 1.0 并返回 0.8，这是错误的，因为 'correct_value' 是 0.0。我们需要一种方法来衡量这个系统的错误程度。让我们调用这个测量“损失”，并给我们的系统一个目标是，training_step 在使用梯度下降优化器中最小化损失，使神经元了解应该值。
在第 13 行，我们开始我们的 TensorFlow 会话。然后，我们准备一些摘要，在 TensorBoard 上可视化，最后在第 19 行的 100 步循环中运行会话优化。
运行显示输出越来越接近 0，如优化预期：
0.76
0.45504
0.272449
0.163125
0.0976692
0.0584782
0.035013
0.02096360.0976692
0.0584782
0.035013
0.0209636
0.0125517
0.00751515
 TensorBoard 是一个图形仪表板，用于显示在执行一个或多个 TensorFlow 程序期间保存的摘要。你可以获取并可视化该图形和此操作的值：
25  !tensorboard --logdir=log_simple_stats
  Starting TensorBoard b'54' at http://localhost:6006
  (Press CTRL+C to quit)
请注意，我们在启动 TensorBoard 之前运行了上述优化，而这些值则通过 log_simple_stats 保存在 TensorBoard 供以后使用。结果现在如预期的那样，如图#loss_function_being_minimized和#neuronapostrophes_output_training_100_tim所示。损失功能最小化
神经元的输出，经过100次训练
查看 TensorBoard 上的“图形”选项卡，我们可以看到期待的主图形和用于查找最小函数的辅助梯度下图形，如#main_graph_and_an_auxiliary_gradientdesce所示。
TensorBoard 展示的主图和辅助梯度下图
除了可视化图形和标量数据外，TensorBoard 还允许你查看图像数据、音频数据、分布、直方图、嵌入和文本。这就是为什么我认为它是一个伟大的工具，而且你应该在机器学习 SRE 领域考虑它。TensorBoard 生成功能强大且有点复杂的图形。但是，将 TensorFlow 与图形可视化一起使用可以帮助你理解和调试它们。
在 TensorFlow GitHub 存储库中，您可以找到许多现成的 TensorFlow 模型，以及 CPU 和 GPU Dockerfile：https://github.com/tensorflow/models，比如：Mnist
用于从 MNIST 数据集对图像数字进行分类的基本模型。
Resnet
可用于对 CIFAR-10 和 ImageNet 的一千个类数据集进行分类的深层残差网络。
Wide_deep
一种将广泛的模型和深度网络相结合的模型，对人口普查收入数据进行分类。  
时间序列：服务器请求等待
 到目前为止，我们还没有看到 SRE 领域里机器学习最擅长的应用。在我看来，我认为真正的价值在于时间序列，也就是是按常规时间间隔测量的信号。在此示例中，我们看到一组服务器请求在 2017 年 5 月左右出现巨大跳跃，如#time_series_is_a_signal_that_is_measured所示。
时间序列的示例
如果我们能做到以下几点，那会有多好？
使用异常检测查找并触发响应式自动化
提前几个小时预测服务器请求
在使用此数据之前，需要记住一些要点：
时间序列中未来值的估计值，它们通常使用同一时间序列的过去值进行预测。时间序列中未来值的估计值，它们通常使用同一时间序列的过去值进行预测。
请注意，序列的时间步长可以是任意长度，例如秒、小时、天、年等。
我们需要为我们想要预测的内容选择正确的时间步长，为此我们需要进行测试。往往需要尝试多次，并使用不同的值，我们得到最终的选择。
深度学习尽管是一门数据科学，但在获得好解决方案之前，它有很多的反复试验，主要是因为它涉及概率。
在以下示例中（如#recurrent_neural_network_with_sequential所示），我们获取几个月的 nginx 请求数据，并尝试预测未来 20 小时内的趋势。这个模型现在是实验性的，和天气预报一样，它也会失败。这是一个具有顺序模型的循环神经网络，在使用 TensorFlow 后端的 Keras 代码中使用，该后端可在线获取：具有序列模型的循环神经网络。（来源：https://github.com/ricardoamaro/MachineLearning4SRE/blob/master/demo_predicting_nginx_requests-Final.ipynb）
存储库中提供的代码加载数据、规范化数据、预测序列并绘制结果，你可以在#time_series_forecasting_based_on_past_dat中看到。实际训练通过 100 次迭代完成。
基于过去数据的时间序列预测
输出图显示从我们获得过去的数据（我们称之为测试集）中 160 小时的流量样本。该模型使用 120 天的数据对交叉验证集进行训练，该验证集也长达 160 小时。这是返回最佳结果的比率。黑色虚线代表未来大约 20 小时的预测，这些预测并不完美，但清楚地给出了模型能够预测流量趋势的想法。总之，这些结果清楚地显示，未来某个时间范围内的预测取得了良好进展，包括出现峰值，因此，我们可以在需要时实际预配新硬件，从而避免中断问题。对于 SRE，这种类型的分析可能很有用，例如，在事件响应和容量规划中。  
成功案例
 AI 已经并将对企业 IT 的几个领域产生重大影响：
日志分析
容量规划
基础架构扩展
成本管理
性能调优
节能
安全
  最近，谷歌开始通过 DeepMind 管理数据中心冷却系统。在一个实例中，它设法减少40%的能源使用量，如#reduction_of_40percent_spent_on_datacente所示。
使用 DeepMind 减少 40% 的数据中心能源支出（来源：https://deepmind.com/blog/deepmind-ai-reduces-google-data-centre-cooling-bill-40）它通过使用数据中心中数千个单元已经收集的历史传感器数据（如温度、功率、泵速度、设定点等）来实现此目的。然后，这些数据用于训练深度神经网络，以测试未来的平均电力使用效率（PUE），并直接在数据中心冷却系统上使用和测试该模型。
神经网络也被广泛用于图像识别。例如，数据中心安全部门正在通过实时分析监控摄像机的视频帧来发现未经授权的人员。
当然，除了神经网络和深度学习之外，还有其他机器学习的成功示例，例如 Naive Bayes 分类器，这些示例可自动过滤电子邮件垃圾邮件，并在行业中长期使用，并取得了巨大成功。你的电子邮件提供商可能今天正在使用此功能。
我们从机器学习中看到良好结果的另一个 IT 领域是安全性，例如用于信用卡欺诈检测和许多其他应用程序的异常检测，这些应用通过异常值极大地提高了安全自动化检测。   
延伸阅读延伸阅读
本章对机器学习和 AI 的主题采取了非常浅的方法来。如果你想深入调查，我建议探索一些开放源代码，其中一些你可以在我的存储库和两本参考书中找到。深度学习，你可以在网站deeplearningbook.org免费阅读，或获得打印版本。是时候在组织中应用机器学习了。
我的 GitHub 存储库
https://github.com/ricardoamaro/MachineLearning4SRE
推荐书籍
Russell, Stuart J., Peter Norvig, and John F. Canny. Artificial Intelligence: A Modern Approach. Upper Saddle River, NJ: Pearson International (2003).Goodfellow, Ian, Yoshua Bengio, and Aaron Courville. Deep Learning. Cambridge, MA: MIT Press (2016). www.mitpress.mit.edu/books/deep-learning.
编者介绍
Ricardo Amaro 目前正在 Acquia 担任高级现场可靠性工程职责，该公司是自由软件领域最大的公司之一，生产服务器约 2 万台。Ricardo 是葡萄牙 ADP（葡萄牙 Drupal 协会）的总裁，在90年代他第一次接触开放技术，尤其是 Linux。Ricardo 很早就开始应用敏捷技术并鼓励 DevOps 文化。他也是自由软件、数字权利的热情倡导者，并经常在 IT 活动中发表演讲。