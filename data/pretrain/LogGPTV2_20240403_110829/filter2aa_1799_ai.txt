15
Reserved
16 (#MF)
17 (#AC)
Alignment check fault
18 (#MC)
Machine check abort
19 (#XM)
SIMD fault
20 (#VE)
Virtualization exception
21 (#CP)
Control protection exception
22-31
Reserved
The remainder of the IDT entries are based on a combination of hardcoded values (for example, 
vectors 30 to 34 are always used for Hyper-V-related VMBus interrupts) as well as negotiated values 
example, a keyboard controller might send interrupt vector 82 on one particular Windows system and 
67 on a different one.
34 
CHAPTER 8 System mechanisms
EXPERIMENT: Viewing the 64-bit IDT
You can view the contents of the IDT, including information on what trap handlers Windows has 
assigned to interrupts (including exceptions and IRQs), using the !idt kernel debugger command. 
The !idt
interrupts (and, on 64-bit machines, the processor trap handlers).
The following example shows what the output of the !idt command looks like on an x64 system:
0: kd> !idt 
Dumping IDT: fffff8027074c000 
00:     fffff8026e1bc700 nt!KiDivideErrorFault 
01:     fffff8026e1bca00 nt!KiDebugTrapOrFault    Stack = 0xFFFFF8027076E000 
02:     fffff8026e1bcec0 nt!KiNmiInterrupt
Stack = 0xFFFFF8027076A000 
03:     fffff8026e1bd380 nt!KiBreakpointTrap 
04:     fffff8026e1bd680 nt!KiOverflowTrap 
05:     fffff8026e1bd980 nt!KiBoundFault 
06:     fffff8026e1bde80 nt!KiInvalidOpcodeFault 
07:     fffff8026e1be340 nt!KiNpxNotAvailableFault 
08:     fffff8026e1be600 nt!KiDoubleFaultAbort    Stack = 0xFFFFF80270768000 
09:     fffff8026e1be8c0 nt!KiNpxSegmentOverrunAbort 
0a:     fffff8026e1beb80 nt!KiInvalidTssFault 
0b:     fffff8026e1bee40 nt!KiSegmentNotPresentFault 
0c:     fffff8026e1bf1c0 nt!KiStackFault 
0d:     fffff8026e1bf500 nt!KiGeneralProtectionFault 
0e:     fffff8026e1bf840 nt!KiPageFault 
10:     fffff8026e1bfe80 nt!KiFloatingErrorFault 
11:     fffff8026e1c0200 nt!KiAlignmentFault 
12:     fffff8026e1c0500 nt!KiMcheckAbort
Stack = 0xFFFFF8027076C000 
13:     fffff8026e1c0fc0 nt!KiXmmException 
14:     fffff8026e1c1380 nt!KiVirtualizationException 
15:     fffff8026e1c1840 nt!KiControlProtectionFault 
1f:     fffff8026e1b5f50 nt!KiApcInterrupt 
20:     fffff8026e1b7b00 nt!KiSwInterrupt 
29:     fffff8026e1c1d00 nt!KiRaiseSecurityCheckFailure 
2c:     fffff8026e1c2040 nt!KiRaiseAssertion 
2d:     fffff8026e1c2380 nt!KiDebugServiceTrap 
2f:     fffff8026e1b80a0 nt!KiDpcInterrupt 
30:     fffff8026e1b64d0 nt!KiHvInterrupt 
31:     fffff8026e1b67b0 nt!KiVmbusInterrupt0 
32:     fffff8026e1b6a90 nt!KiVmbusInterrupt1 
33:     fffff8026e1b6d70 nt!KiVmbusInterrupt2 
34:     fffff8026e1b7050 nt!KiVmbusInterrupt3 
35:     fffff8026e1b48b8 hal!HalpInterruptCmciService (KINTERRUPT fffff8026ea59fe0) 
b0:     fffff8026e1b4c90 ACPI!ACPIInterruptServiceRoutine (KINTERRUPT ffffb88062898dc0) 
ce:     fffff8026e1b4d80 hal!HalpIommuInterruptRoutine (KINTERRUPT fffff8026ea5a9e0) 
d1:     fffff8026e1b4d98 hal!HalpTimerClockInterrupt (KINTERRUPT fffff8026ea5a7e0) 
d2:     fffff8026e1b4da0 hal!HalpTimerClockIpiRoutine (KINTERRUPT fffff8026ea5a6e0) 
d7:     fffff8026e1b4dc8 hal!HalpInterruptRebootService (KINTERRUPT fffff8026ea5a4e0) 
d8:     fffff8026e1b4dd0 hal!HalpInterruptStubService (KINTERRUPT fffff8026ea5a2e0) 
df:     fffff8026e1b4e08 hal!HalpInterruptSpuriousService (KINTERRUPT fffff8026ea5a1e0) 
e1:     fffff8026e1b8570 nt!KiIpiInterrupt 
e2:     fffff8026e1b4e20 hal!HalpInterruptLocalErrorService (KINTERRUPT fffff8026ea5a3e0) 
EXPERIMENT: Viewing the 64-bit IDT
You can view the contents of the IDT, including information on what trap handlers Windows has 
assigned to interrupts (including exceptions and IRQs), using the !idt kernel debugger command. 
The !idt
interrupts (and, on 64-bit machines, the processor trap handlers).
The following example shows what the output of the !idt command looks like on an x64 system:
0: kd> !idt
Dumping IDT: fffff8027074c000
00:     fffff8026e1bc700 nt!KiDivideErrorFault
01:     fffff8026e1bca00 nt!KiDebugTrapOrFault    Stack = 0xFFFFF8027076E000
02:     fffff8026e1bcec0 nt!KiNmiInterrupt
Stack = 0xFFFFF8027076A000
03:     fffff8026e1bd380 nt!KiBreakpointTrap
04:     fffff8026e1bd680 nt!KiOverflowTrap
05:     fffff8026e1bd980 nt!KiBoundFault
06:     fffff8026e1bde80 nt!KiInvalidOpcodeFault
07:     fffff8026e1be340 nt!KiNpxNotAvailableFault
08:     fffff8026e1be600 nt!KiDoubleFaultAbort    Stack = 0xFFFFF80270768000
09:     fffff8026e1be8c0 nt!KiNpxSegmentOverrunAbort
0a:     fffff8026e1beb80 nt!KiInvalidTssFault
0b:     fffff8026e1bee40 nt!KiSegmentNotPresentFault
0c:     fffff8026e1bf1c0 nt!KiStackFault
0d:     fffff8026e1bf500 nt!KiGeneralProtectionFault
0e:     fffff8026e1bf840 nt!KiPageFault
10:     fffff8026e1bfe80 nt!KiFloatingErrorFault
11:     fffff8026e1c0200 nt!KiAlignmentFault
12:     fffff8026e1c0500 nt!KiMcheckAbort
Stack = 0xFFFFF8027076C000
13:     fffff8026e1c0fc0 nt!KiXmmException
14:     fffff8026e1c1380 nt!KiVirtualizationException
15:     fffff8026e1c1840 nt!KiControlProtectionFault
1f:     fffff8026e1b5f50 nt!KiApcInterrupt
20:     fffff8026e1b7b00 nt!KiSwInterrupt
29:     fffff8026e1c1d00 nt!KiRaiseSecurityCheckFailure
2c:     fffff8026e1c2040 nt!KiRaiseAssertion
2d:     fffff8026e1c2380 nt!KiDebugServiceTrap
2f:     fffff8026e1b80a0 nt!KiDpcInterrupt
30:     fffff8026e1b64d0 nt!KiHvInterrupt
31:     fffff8026e1b67b0 nt!KiVmbusInterrupt0
32:     fffff8026e1b6a90 nt!KiVmbusInterrupt1
33:     fffff8026e1b6d70 nt!KiVmbusInterrupt2
34:     fffff8026e1b7050 nt!KiVmbusInterrupt3
35:     fffff8026e1b48b8 hal!HalpInterruptCmciService (KINTERRUPT fffff8026ea59fe0)
b0:     fffff8026e1b4c90 ACPI!ACPIInterruptServiceRoutine (KINTERRUPT ffffb88062898dc0)
ce:     fffff8026e1b4d80 hal!HalpIommuInterruptRoutine (KINTERRUPT fffff8026ea5a9e0)
d1:     fffff8026e1b4d98 hal!HalpTimerClockInterrupt (KINTERRUPT fffff8026ea5a7e0)
d2:     fffff8026e1b4da0 hal!HalpTimerClockIpiRoutine (KINTERRUPT fffff8026ea5a6e0)
d7:     fffff8026e1b4dc8 hal!HalpInterruptRebootService (KINTERRUPT fffff8026ea5a4e0)
d8:     fffff8026e1b4dd0 hal!HalpInterruptStubService (KINTERRUPT fffff8026ea5a2e0)
df:     fffff8026e1b4e08 hal!HalpInterruptSpuriousService (KINTERRUPT fffff8026ea5a1e0)
e1:     fffff8026e1b8570 nt!KiIpiInterrupt
e2:     fffff8026e1b4e20 hal!HalpInterruptLocalErrorService (KINTERRUPT fffff8026ea5a3e0)
CHAPTER 8 System mechanisms
35
e3:     fffff8026e1b4e28 hal!HalpInterruptDeferredRecoveryService 
(KINTERRUPT fffff8026ea5a0e0) 
fd:     fffff8026e1b4ef8 hal!HalpTimerProfileInterrupt (KINTERRUPT fffff8026ea5a8e0) 
fe:     fffff8026e1b4f00 hal!HalpPerfInterrupt (KINTERRUPT fffff8026ea5a5e0)
On the system used to provide the output for this experiment, the ACPI SCI ISR is at interrupt 
number B0h. You can also see that interrupt 14 (0Eh) corresponds to KiPageFault, which is a type 
pointer next to them. These correspond to the traps explained in the section on “Task state seg-
ments” from earlier, which require dedicated safe kernel stacks for processing. The debugger 
knows these stack pointers by dumping the IDT entry, which you can do as well by using the dx 
command and dereferencing one of the interrupt vectors in the IDT. Although you can obtain the 
IdtBase.
0: kd> dx @$pcr->IdtBase[2].IstIndex 
@$pcr->IdtBase[2].IstIndex : 0x3 [Type: unsigned short] 
0: kd> dx @$pcr->IdtBase[0x12].IstIndex 
@$pcr->IdtBase[0x12].IstIndex : 0x2 [Type: unsigned short]
If you compare the IDT Index values seen here with the previous experiment on dumping the 
Each processor has a separate IDT (pointed to by their own IDTR) so that different processors can 
clock interrupt, but only one processor updates the system clock in response to this interrupt. All the 
processors, however, use the interrupt to measure thread quantum and to initiate rescheduling when a 
handle certain device interrupts.
Programmable interrupt controller architecture
Traditional x86 systems relied on the i8259A Programmable Interrupt Controller (PIC), a standard that origi-
nated with the original IBM PC. The i8259A PIC worked only with uniprocessor systems and had only eight 
second-
ary
Because PICs had such a quirky way of handling more than 8 devices, and because even 15 became a bottle-
neck, as well as due to various electrical issues (they were prone to spurious interrupts) and the limitations of 
uniprocessor support, modern systems eventually phased out this type of interrupt controller, replacing it 
with a variant called the i82489 Advanced Programmable Interrupt Controller (APIC).
e3:     fffff8026e1b4e28 hal!HalpInterruptDeferredRecoveryService 
(KINTERRUPT fffff8026ea5a0e0)
fd:     fffff8026e1b4ef8 hal!HalpTimerProfileInterrupt (KINTERRUPT fffff8026ea5a8e0)
fe:     fffff8026e1b4f00 hal!HalpPerfInterrupt (KINTERRUPT fffff8026ea5a5e0)
On the system used to provide the output for this experiment, the ACPI SCI ISR is at interrupt 
number B0h. You can also see that interrupt 14 (0Eh) corresponds to KiPageFault, which is a type 
KiPageFault, which is a type 
KiPageFault
pointer next to them. These correspond to the traps explained in the section on “Task state seg-
ments” from earlier, which require dedicated safe kernel stacks for processing. The debugger 
knows these stack pointers by dumping the IDT entry, which you can do as well by using the dx
command and dereferencing one of the interrupt vectors in the IDT. Although you can obtain the 
IdtBase.
0: kd> dx @$pcr->IdtBase[2].IstIndex
@$pcr->IdtBase[2].IstIndex : 0x3 [Type: unsigned short]
0: kd> dx @$pcr->IdtBase[0x12].IstIndex
@$pcr->IdtBase[0x12].IstIndex : 0x2 [Type: unsigned short]
If you compare the IDT Index values seen here with the previous experiment on dumping the 
36 
CHAPTER 8 System mechanisms
APIC and the integration of both an I/O APIC (IOAPIC) connected to external hardware devices to a 
Local APIC (LAPIC), connected to the processor core. With time, the MPS standard was folded into the 
compatibility with uniprocessor operating systems and boot code that starts a multiprocessor system 
in uniprocessor mode, APICs support a PIC compatibility mode with 15 interrupts and delivery of inter-
As mentioned, the APIC consists of several components: an I/O APIC that receives interrupts from 
devices, local APICs that receive interrupts from the I/O APIC on the bus and that interrupt the CPU 
they are associated with, and an i8259A-compatible interrupt controller that translates APIC input into 
PIC-equivalent signals. Because there can be multiple I/O APICs on the system, motherboards typically 
have a piece of core logic that sits between them and the processors. This logic is responsible for imple-
menting interrupt routing algorithms that both balance the device interrupt load across processors and 
attempt to take advantage of locality, delivering device interrupts to the same processor that has just 
the I/O APIC with its own routing logic to support various features such as interrupt steering, but device 
Because the x64 architecture is compatible with x86 operating systems, x64 systems must provide 
Windows refused to run on systems that did not have an APIC because they use the APIC for inter-
rupt control, whereas x86 versions of Windows supported both PIC and APIC hardware. This changed 
with Windows 8 and later versions, which only run on APIC hardware regardless of CPU architecture. 
this register to store the current software interrupt priority level (in the case of Windows, called the 
IRQL) and to inform the IOAPIC when it makes routing decisions. More information on IRQL handling 
will follow shortly.
Device
interrupts
i8259A-
equivalent
PIC
I/O
APIC
CPU 0
Processor Core
Local APIC
CPU 1
Processor Core
Local APIC
FIGURE 8-12 APIC architecture.
CHAPTER 8 System mechanisms
37
EXPERIMENT: Viewing the PIC and APIC
multiprocessor by using the !pic and !apic
output of the !pic command on a uniprocessor. Note that even on a system with an APIC, this 
command still works because APIC systems always have an associated PIC-equivalent for emulat-
ing legacy hardware.
lkd> !pic 
----- IRQ Number ----- 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 
Physically in service:  Y  .  .  .  .  .  .  .  .  Y  Y  Y  .  .  .  . 
Physically masked:
Y  Y  Y  Y  Y  Y  Y  Y  Y  Y  Y  Y  Y  Y  Y  Y 
Physically requested:   Y  .  .  .  .  .  .  .  .  Y  Y  Y  .  .  .  . 
Level Triggered:
.  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .
!apic command on a system running with Hyper-V enabled, which 
you can see due to the presence of the SINTI
Controller (SynIC), described in Chapter 9. Note that during local kernel debugging, this com-
mand shows the APIC associated with the current processor—in other words, whichever proces-
at a crash dump or remote system, you can use the ~ (tilde) command followed by the processor 
number to switch the processor of whose local APIC you want to see. In either case, the number 
next to the ID: label will tell you which processor you are looking at.
lkd> !apic 
Apic (x2Apic mode)  ID:1 (50014)  LogDesc:00000002  TPR 00 
TimeCnt: 00000000clk  SpurVec:df  FaultVec:e2  error:0 
Ipi Cmd: 00000000`0004001f  Vec:1F  FixedDel    Dest=Self
edg high
Timer..: 00000000`000300d8  Vec:D8  FixedDel    Dest=Self
edg high
m 
Linti0.: 00000000`000100d8  Vec:D8  FixedDel    Dest=Self
edg high
m 
Linti1.: 00000000`00000400  Vec:00  NMI         Dest=Self
edg high
Sinti0.: 00000000`00020030  Vec:30  FixedDel    Dest=Self
edg high
Sinti1.: 00000000`00010000  Vec:00  FixedDel    Dest=Self
edg high
m 
Sinti2.: 00000000`00010000  Vec:00  FixedDel    Dest=Self
edg high
m 
Sinti3.: 00000000`000000d1  Vec:D1  FixedDel    Dest=Self
edg high
Sinti4.: 00000000`00020030  Vec:30  FixedDel    Dest=Self
edg high
Sinti5.: 00000000`00020031  Vec:31  FixedDel    Dest=Self
edg high
Sinti6.: 00000000`00020032  Vec:32  FixedDel    Dest=Self
edg high
Sinti7.: 00000000`00010000  Vec:00  FixedDel    Dest=Self
edg high
m 
Sinti8.: 00000000`00010000  Vec:00  FixedDel    Dest=Self
edg high
m 
Sinti9.: 00000000`00010000  Vec:00  FixedDel    Dest=Self
edg high
m 
Sintia.: 00000000`00010000  Vec:00  FixedDel    Dest=Self
edg high
m 
Sintib.: 00000000`00010000  Vec:00  FixedDel    Dest=Self
edg high
m 
Sintic.: 00000000`00010000  Vec:00  FixedDel    Dest=Self
edg high
m 
Sintid.: 00000000`00010000  Vec:00  FixedDel    Dest=Self
edg high
m 
Sintie.: 00000000`00010000  Vec:00  FixedDel    Dest=Self
edg high
m 
Sintif.: 00000000`00010000  Vec:00  FixedDel    Dest=Self
edg high
m 
TMR: 95, A5, B0 
IRR:  
ISR: 
EXPERIMENT: Viewing the PIC and APIC
multiprocessor by using the !pic and !apic
output of the !pic command on a uniprocessor. Note that even on a system with an APIC, this 
command still works because APIC systems always have an associated PIC-equivalent for emulat-
ing legacy hardware.
lkd> !pic
----- IRQ Number ----- 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F