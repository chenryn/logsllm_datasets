# Deanonymizing Users of the SafeWeb Anonymizing Service

**Author:** Andrew Schulman  
**USENIX Association**  
**Proceedings of the 11th USENIX Security Symposium**  
**San Francisco, California, USA**  
**August 5-9, 2002**  
**© 2002 by The USENIX Association**  
**Phone: 1 510 528 8649**  
**FAX: 1 510 548 5738**  
**THE ADVANCED COMPUTING SYSTEMS ASSOCIATION**  
**All Rights Reserved**  
**Email: PI:EMAIL**  
**For more information about the USENIX Association: WWW: http://www.usenix.org**  
**Rights to individual papers remain with the author or the author's employer. Permission is granted for noncommercial reproduction of the work for educational or research purposes. This copyright notice must be included in the reproduced paper. USENIX acknowledges all trademarks herein.**

## Abstract

Andrew Schulman, Santa Rosa, CA, PI:EMAIL  
David Martin, Boston University, PI:EMAIL  
Computer Science Department, Software Litigation Consultant

The SafeWeb anonymizing system has been praised by the media and embraced by its users, claiming to be "the most widely used online privacy service in the world," with over 3,000,000 page views per day at its peak. SafeWeb was designed to bypass content blocking by firewalls and to prevent Web servers from identifying users, without degrading website behavior or requiring users to install specialized software. In this paper, we analyze how these fundamentally incompatible requirements were implemented in SafeWeb’s architecture, leading to significant vulnerabilities under simple JavaScript attacks. These exploits allow adversaries to weaponize SafeWeb against its users, causing more damage than if they had never used the service. By highlighting these issues, we aim to underscore the gap between popular and technical understandings of security.

## 1. Introduction

In "Murphy’s Law and Computer Security" [59], Venema described how early users of the "booby trap" feature in the TCP wrapper defense system might have been more vulnerable than those who did not use it. This paper presents a contemporary example in the realm of computer privacy: we demonstrate how the SafeWeb anonymizing service can be turned into a weapon against its users by malicious third parties, inflicting more damage on some users than if they had never used SafeWeb. Unfortunately, the problems we describe do not seem to have an easy fix that aligns with SafeWeb’s design requirements.

SafeWeb was designed to allow users to disguise their visits to websites, preventing nearby firewalls from detecting these visits and ensuring that the websites could not identify the visitors. Our findings show that malicious firewalls or websites can undermine SafeWeb’s anonymity by tricking the user’s browser into revealing its identity. This not only exposes the user’s IP address but also any persistent cookies established through SafeWeb. Adversaries can also modify the SafeWeb code running on the victim’s browser to receive copies of all pages visited during that session.

Ordinary web browsers are susceptible to such extreme privacy violations only in the presence of serious bugs, which vendors typically treat as urgent and fix quickly. However, the SafeWeb problems are not mere bugs; they are symptoms of incompatible design decisions. The exploits described here are straightforward, and experienced programmers in networking and web technologies should be able to replicate them.

The SafeWeb company has been aware of these vulnerabilities since May 2001, and possibly earlier, but did not publicly acknowledge them until February 2002. The SafeWeb FAQ [43] even claimed that JavaScript, which is central to our attacks, was inherently safe (see Figure 1). Meanwhile, the mainstream press enthusiastically endorsed the SafeWeb service [5,25,34,55]. Thus, most SafeWeb users had no reason to suspect that the service might put them at risk.

### Figure 1: Excerpt from SafeWeb FAQ, October 2001

**Q: How does SafeWeb tackle JavaScript?**

There have been numerous claims, mainly by privacy companies, that JavaScript is very dangerous to your privacy and that pages containing JavaScript should not be allowed through their privacy servers. These claims are false. JavaScript is no more "dangerous" than HTML. By design, JavaScript was limited in its feature set to prevent any abuse of your computer or privacy. Therefore, it is harder to make JavaScript code secure than it is to secure HTML, but it is certainly not impossible.

SafeWeb analyzes all JavaScript code that passes through our servers and sanitizes it so that you can maintain your normal browsing habits while still remaining safe from prying eyes. The same is true for VBScript.

To mount these attacks, an adversary must lure a SafeWeb user to a web page under the adversary’s control. The web page does not have to be located at the adversary’s site; using cross-site scripting vulnerabilities [6,33,49,52], the adversary only needs to lure the victim to a particular URL on one of many vulnerable sites. The attacker also needs to control a web or equivalent server to receive the sensitive data.

We provide background in Section 2, describe the SafeWeb design in Sections 3 and 4, detail our attacks and related threats in Section 5, discuss possible remedies in Section 6, and give pointers to related work in Section 7. We explore the impact of our attacks in Section 8, summarize responses to our attacks in Section 9, and conclude in Section 10.

## 2. Background

Anonymizing services promise to keep user IP addresses out of routinely collected log files. This can help opponents of oppressive regimes, individuals who value privacy, or even planners of terrorist attacks. (However, in practice, a simple Hotmail account seems to be the preferred tool for al-Qaida [31].)

SafeWeb, the first offering of SafeWeb Inc., a privately held company founded in April 2000 and based in Emeryville, CA, launched its anonymizing service in October 2000. Partners and investors include the Voice of America and In-Q-Tel, a C.I.A.-funded venture capital firm [40,41].

By March 2001, SafeWeb considered itself the "most widely used online privacy service in the world" [44]. In August 2001, SafeWeb licensed its technology to PrivaSec LLC for a planned subscription privacy service [45]. By October, SafeWeb was serving over 3,000,000 page views per day. In November, it suspended free public access, citing financial constraints [28]. In December 2001, SafeWeb announced it was considering reestablishing the service, possibly on a subscription model [42].

Although SafeWeb’s advertising-supported privacy service was discontinued, its technology continues to be used, and we refer to it primarily as SafeWeb. Our attacks can currently be witnessed through a technology preview program at PrivaSec’s website [36].

## 3. SafeWeb Design Requirements

The SafeWeb service was designed to offer two main benefits: censorship avoidance and anonymization.

### Censorship Avoidance
SafeWeb’s censorship avoidance helps users bypass content blocking systems, such as national censors and corporate security managers, who control firewalls. Censorship avoidance means encrypting content to pass through blocking systems intact. (A censor response is to block access to SafeWeb, which SafeWeb countered with its “Triangle Boy” system to hide its IP address [39].) Users concerned with censorship avoidance consider their adversary to be close to their own computer and may not perceive a threat from the websites they visit.

### Anonymity
SafeWeb’s anonymization benefits users who wish to conceal their identities from the websites they visit. This includes hiding the user’s IP addresses and cookies. Anonymity can also be seen as a form of second-order censorship avoidance, reducing access by intimidating authors and readers. For example, the Directorate for Mail Censorship in Romania under Ceausescu collected handwriting and typewriter samples for this purpose [35].

In support of these primary goals, SafeWeb observed the following auxiliary requirements:

- **Faithfulness**: The service should reproduce visited sites as faithfully as possible, supporting most content types, including cookies and JavaScript.
- **Usability**: The service must have quick response times and be easy to use.
- **No-mods Requirement**: Many intended users are not free to install software or reconfigure their browsers, and may lack the technical skills to do so. Visitors to public facilities and corporate employees should be able to use the service.

## 4. SafeWeb Architecture

Figure 2 shows a schematic diagram of SafeWeb’s technology. The service is implemented through a URL-based content rewriting engine. To "safely" visit a page like http://www.bu.edu, a user requests a URL such as https://www.safeweb.com/o/_o(410):_win(1):_i:http://www.bu.edu. A simple form at the SafeWeb site performs this transformation, consistent with the no-mods requirement.

Given this transformed URL, the user’s browser builds an SSL connection to safeweb.com. Since SSL encryption hides the URL request from intervening censors, this implements the censorship avoidance requirement. Behind the scenes, SafeWeb obtains the requested page, sanitizes it, and returns it to the user. This step fulfills the anonymity requirement, as the website sees a request from the SafeWeb site, not the user’s computer.

SafeWeb manipulates the user’s browser display to make the page appear to come from http://www.bu.edu, contributing to faithfulness. Internally, the browser considers it an SSL page delivered from safeweb.com. Sanitization is crucial for maintaining faithfulness without violating anonymity. The requested page likely contains URL references to other web content, such as images, hyperlinks, and style sheets. Since the browser does not use the HTTP proxy mechanism, every reference must be rewritten through the safeweb.com sanitizer. Otherwise, the browser would directly contact the server, revealing the user’s IP address and breaking anonymity.

SafeWeb handles cookies by multiplexing them into a single "master cookie" associated with safeweb.com. When a user requests a web page, the browser sees a connection to an HTTPS page within safeweb.com and transmits the safeweb.com cookie. The server extracts and forwards the relevant part of the cookie when contacting the origin server for the page content. Similar multiplexing occurs with Set-Cookie headers sent back to the browser.

To render web pages containing JavaScript, SafeWeb sanitizes JavaScript programs before delivering them to the user’s browser. The JavaScript rewriting engine takes untrusted JavaScript from websites and produces trusted JavaScript, preserving as much functionality as possible. The output programs are considered safe to run natively in the user’s browser. For example, consider this simple JavaScript...