plementary to Massive MIMO. Speciﬁcally, massive MIMO
is typically applicable to base stations or macro cells, which
can accommodate the size and power requirements of the large
number of antennas and their corresponding digital and analog
463
SIGCOMM ’18, August 20–25, 2018, Budapest, Hungary
E. Hamed et al.
chains. In contrast, Chorus is targeted at small cells, which
have a much smaller form factor and lower power budget.
(d) Inter-Cell Coordination without Frequency Reuse: LTE
has some mechanisms for loose GPS-based synchronization
between devices, to enable joint transmission from multiple de-
vices in nearby subcarriers, subcarrier suppression for inter cell
interference cancellation etc [7]. Similarly, schemes have been
proposed to achieve such inter-cell interference elimination in
802.11ac [47]. Unlike distributed MIMO, these schemes do
not allow concurrent transmissions in the same frequencies at
the same time. They only limit interference between adjacent
frequencies. Hence their throughput gains are much lower than
distributed MIMO.
(e) Other network synchronization techniques: There is a
signiﬁcant literature on time synchronization for wired and
wireless networking applications. However, all those tech-
niques focus only on time synchronization and are not capa-
ble of providing phase synchronization, which is essential for
beamforming. Those techniques for network synchronization
fall into two major categories.
Theoretical: Dorﬂer et. al [12] discuss various theoretical mod-
els of oscillators and the performance bounds associated with
different levels of synchronization. The paper however does
not describe algorithms that can achieve the different levels
of synchronization, nor does it explore the system issues of
designing and building a network of synchronized transmitters.
Antonioni et. al. [4] discuss the game theoretic tradeoff of syn-
chronization in natural systems, such as ﬁreﬂies, based on the
costs of synchronizing and the beneﬁts that would accrue. As
such, this work neither provides algorithms that achieve accu-
rate synchronization, nor do these tradeoffs apply to MIMO
beamforming.
Practical: Chen et. al. [8] , Sommer et. al [41] evaluate various
gradient clock synchronization algorithms in sensor networks.
These algorithms provide tight time synchronization by ﬂood-
ing the network with messages and then using these message
timestamps to discipline their local clocks. However, they do
not provide phase synchronization, which is needed for beam-
forming. NTP is similar, and further, achieves time synchro-
nization only at the accuracy of ms, which is inadequate for
joint MIMO transmission. Further, none of these algorithms
have been evaluated across a wide range of SNRs, which is
actually necessary for a synchronization system to work ro-
bustly in practice, nor do they address the practical challenges
of interoperability with standards like LTE.
3 SCOPE
As in prior work on Distributed-MIMO, this paper focuses
on delivering phase coherence across distributed independent
nodes [1, 5, 23, 33, 46], thereby allowing those nodes to act
as one huge MIMO node which can perform the basic prim-
itives of multi-user transmission, such as nulling, diversity,
and multi-user beamforming. All of these systems focus on the
physical layer signal transmission, and the associated necessary
coordination protocols.
In today’s multi-user and massive MIMO systems, there are
additional functions that are performed by the higher layers.
For example, the higher layers decide the frequency and time
slots in which each user receives its data, as well as the choice
of transmit antennas, and the combinations of beamforming,
nulling, and diversity to be used for the different users. Much
work has been done in both academia and industry to develop
algorithms for these higher layers [3, 9, 27, 36, 37, 43]. The
higher layers in distributed-MIMO also have to address these
questions. Given the similarity, they can leverage the past work
for existing MIMO systems, but have to account for the greater
complexity due to the bigger scale of a distributed-MIMO sys-
tem and the additional system constraints such as the amount
of backhaul bandwidth available for each small cell. Dealing
with these issues is beyond the scope of this paper, and is left
for future work.
4 OVERVIEW
Chorus is designed for 5G cellular networks with dense small
cell deployments containing tens of thousands of small cells
spanning multiple tens of square kilometers. These dense net-
works can obtain dramatic throughput gains from distributed-
MIMO as their throughput is currently limited by interference.
However, their size and geographic scale make them unsuited
for current distributed-MIMO solutions, which require a single
leader that needs to be reliably heard by all other small cells in
order to perform phase synchronization.
Chorus addresses these challenges by designing a scheme
that does not require a single leader transmitting a synchroniza-
tion signal. Instead, all nodes act as leaders, jointly transmitting
the synchronization signal. Each node locally has a controller
that listens to the synchronization signal transmitted by other
nodes, and synchronizes the phase of its oscillator to the signal.
As a result, Chorus can synchronize the phase of hundreds
to thousands of nodes in a large geographic area, creating a
distributed massive MIMO fabric that can be leveraged by
higher layers. Note however that this does not mean that thou-
sands of nodes have to transmit data together to the same set of
clients. The distributed MIMO fabric allows the higher layers
to treat any subset of the network as a large massive MIMO
system. They can freely pick groups of nodes to deliver multi-
plexing or diversity gain to speciﬁc client sets. They can also
change those groups from one transmission to another without
worrying about which small cells hear each other.
Chorus’s protocol and architecture is designed to be compat-
ible with LTE, and operates without requiring any changes to
LTE end user devices. We describe the different components
of Chorus in the subsequent sections.
464
Chorus: Truly Distributed Distributed-MIMO
SIGCOMM ’18, August 20–25, 2018, Budapest, Hungary
Reference 
Signal
+
+
Node A Controller
Output
G
G
Root nodes 
L0 
A 
B 
L1 
L1 
Root nodes 
A 
L1 
L0  L1 
C 
B 
L2 
L2 
L2 
L1 
L1 
L1 
L2 
L2 
L2 
Node B Controller
N1 
N2 
Nk 
N1 
N2 
Nk 
Figure 1—Positive Feedback between two nodes. The ﬁgure shows two
nodes transmitting and receiving synchronization signals to each other. Each
node can be modeled as a control system with transfer function G. Node
A receives a reference synchronization signal from node B, and transmits a
synchronization signal, which in turn is used by Node B as its input synchro-
nization signal, producing a positive feedback loop.
5 SELF ORGANIZING TREE
ARCHITECTURE
Chorus achieves leaderless synchronization by making all
nodes equally responsible for propagating the synchroniza-
tion signal. Speciﬁcally, every node continuously listens to the
synchronization signal, compensates for its own phase shift
with respect to the synchronization signal, and transmits a syn-
chronization signal that can then be used by other nodes to
measure their phase shifts and synchronize their oscillators.
However, if nodes do this naively, they could end up with
synchronization loops. For example, consider the following
topology – node 1 transmits a synchronization signal that is
used by node 2, which transmits a synchronization signal used
by node 3, which in turn, transmits a synchronization signal that
is used by node 1. Such synchronization loops can destabilize
the system, i.e., prevent the network from converging to a
coherent phase.
To understand why, let us model the system using control
theoretic concepts. Each node in our system has a reference
signal which is the synchronization signal received by the node.
The node internally has some controller which aims to match
the node’s phase to the reference phase. Since the details of
the controller are irrelevant to this argument, let us abstract the
controller inside the node by the function G. Since the goal
of the controller is to ensure that the output synchronization
signal matches the reference, the transfer function G should be
as close to 1 as possible.
Now, let us see what happens when there is a loop. We will
take a simple case with two nodes A and B. Node A receives a
synchronization signal from node B, which it uses to synchro-
nize and transmit its own synchronization signal. Node B will
hear the synchronization signal transmitted by node A, use it to
synchronize itself, and in turn transmit the synchronization sig-
nal that node A uses. This leads to a feedback loop, as shown
in Fig. 1. From basic control theory [29], the transfer function
of such a loop is G
1−G 2 . Since, accurate tracking requires G to
(a) Resilience to 1 failure at the root 
(b) Resilience to 2 failures at the root 
Figure 2—Resilience to Root Failures: (a) shows a topology for the synchro-
nization tree that is resilient to either node A or B failing. (b) shows a topology
that is resilient to any two nodes of {A,B,C} failing.
be as close to 1 as possible, the loop is bound to be unstable.
The same argument generalizes to larger loops.
5.1 Chorus’s Layering Protocol
Since our objective is to eliminate loops, by deﬁnition, our
synchronization topology must be a tree. We will refer to the
nodes at a particular depth in the synchronization tree as a
layer, with the root being at depth 0, and so on. Each layer’s
synchronization signals are associated with a different set of
frequencies. Each node transmits its synchronization signal in
the frequencies corresponding to its layer, and synchronizes
itself by listening to the synchronization signal on the frequen-
cies corresponding to its parent layer directly above it. Thus,
the tree structure is really a fat tree.
Chorus’s synchronization tree is self-organizing. All that the
administrator has to do is to pick the root of the tree. Once
the administrator nominates the root, the tree self organizes as
follows: The root starts transmitting a signal in layer 0. Each
node who wants to join the system listens for synchronization
signals on the frequencies associated with all layers. The node
picks the lowest layer from which it receives an adequately
strong synchronization signal. Speciﬁcally, each node inter-
nally is running a controller (described in §6) whose objective
is to match its phase with the phase of the synchronization
signal. The controller needs a minimum synchronization signal
SNR in order to provide robust phase coherence. Thus, when
picking a layer, the node picks the lowest layer whose SNR is
above this threshold. We evaluate the performance of Chorus’s
controller in §11.2, and describe how we can determine this
SNR threshold. Intuitively, one can see these layers in space
as concentric rings starting from the single layer 0 node in the
network.
Since the synchronization signals will attenuate with dis-
tance, Chorus can reuse synchronization frequencies. For ex-
ample, say that we have 8 sets of synchronization frequencies,
which are used by layers 0 through 7. Layer 8 can re-use the
frequencies corresponding to layer 0, assuming nodes at this
465
SIGCOMM ’18, August 20–25, 2018, Budapest, Hungary
E. Hamed et al.
layer are sufﬁciently distant from the node in layer 0. By de-
fault, Chorus uses 8 distinct sets of synchronization frequencies.
Thus, layer i, for i ≥ 1, receives on synchronization frequency
(i − 1) mod 8, and transmits on synchronization frequency i
mod 8. In §7, we describe how these synchronization frequen-
cies can be provided cheaply in the LTE framework without
allocating dedicated frequency bands.
5.2 Resilience
Chorus is resilient to node addition and removal, as well as
changes in channel quality and, therefore, topology of the syn-
chronization tree. In particular, say that a node fails. Such a
failure typically has no impact on the other nodes. Speciﬁcally,
all nodes who are synchronizing to the layer on which the
failed node transmits are likely to continue receiving the syn-
chronization signal from the rest of the nodes in that layer. In
the unlikely case, where the failed node has a descendant who
cannot hear any other nodes from that layer, the descendant
will immediately discover the loss of its synchronization signal
from its parent layer, and therefore pick the next layer with
sufﬁciently high SNR. This process could, in principle, cas-
cade across several nodes, and naturally resolve itself with each
node moving to the appropriate layer. Node addition works
similarly.
In our description so far, we have addressed the resilience
at all layers except layer 0. We now address how to make
layer 0 resilient. Speciﬁcally, consider the topology in Fig. 2(a).
This is a modiﬁed tree topology where node A transmits a
synchronization signal on layers 0 and 1, node B listens to
the synchronization signal on layer 0, and transmits a synchro-
nization signal on layer 1, and nodes N1 , N2 , . . . , Nk listen to
the synchronization signal on layer 1, and transmit a synchro-
nization signal on layer 2. In this case, if node A dies, node B
automatically becomes the root of the network and the system
continues to operate as usual. Further, if node B dies, nodes
N1 , N2 , . . . , Nk transparently continue to synchronize with par-
ent layer 1, but using node A alone. Thus, this system can
withstand one root failure, at the expense of an additional layer
at the root alone. We can extend this idea to multiple root fail-
ures. For instance, Fig. 2(b) shows a root topology that can
withstand up to two nodes at the root failing, i.e., any two
nodes of A, B, and C can fail. While we expect that the system
administrator should pick robust nodes for the root, such as
base stations, the fault tolerant topology shown here enables
resilience to the transient failure of one or more of the root
nodes.
6 ROBUST PHASE UPDATE ALGORITHM
Chorus embeds the synchronization signal in the LTE frame.
LTE divides the frequency band into subcarriers, which them-
selves are divided into timeslots called resource elements. To
maintain low overhead, the synchronization signal appears
in certain resource elements, once every 5 milliseconds (the
details are in §7). Every time the synchronization signal is
available, the small cell obtains new measurements, which it
uses to update its phase so that it maintains phase coherence
with the received synchronization signal. But, how should a
Chorus node use the measurements to update its phase?
Past distributed MIMO update rules are not suitable for Cho-
rus. Speciﬁcally, past work belongs to two categories. Systems
like AirSync [5] have the synchronization signal all the time on
a dedicated channel. Thus, each node can continuously com-
pute the phase difference between its signal and the received
synchronization signal, and compensate for that difference.
Systems like MegaMIMO [23, 33] transmit the synchroniza-
tion signal immediately before every packet and use it only for
the duration of that packet – i.e., they synchronize on demand
and immediately before transmission. Chorus’s requirements
are more stringent than either system – it needs to provide
continuous phase tracking to accommodate LTE’s continuous
data transmission, but can afford only infrequent synchroniza-
tion signals (every few milliseconds) in order to integrate into
the LTE framework with low overhead. Furthermore, Chorus’s
synchronization signal exhibits a higher variability because it
is transmitted by multiple nodes as opposed to a single leader.
To deal with these more stringent conditions, Chorus com-
bines techniques from signal processing and control theory.
First, Chorus designs its synchronization signal to be resilient
to channel conditions in the presence of multiple transmitters.
It then uses principles from robust control to perform phase