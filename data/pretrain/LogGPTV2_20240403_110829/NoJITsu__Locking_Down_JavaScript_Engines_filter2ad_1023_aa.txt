# Title: NoJITsu: Locking Down JavaScript Engines

## Authors
- Taemin Park<sup>∗</sup>
- Karel Dhondt<sup>†</sup>
- David Gens<sup>∗</sup>
- Yeoul Na<sup>∗</sup>
- Stijn Volckaert<sup>†</sup>
- Michael Franz<sup>∗</sup>

<sup>∗</sup>Department of Computer Science, University of California, Irvine  
<sup>†</sup>Department of Computer Science, imec-DistriNet, KU Leuven

## Abstract
Data-only attacks on dynamic scripting environments have become increasingly common. Modern applications, including web browsers, embed scripting engines to support interactive content, often using just-in-time (JIT) compilation to optimize performance. As applications are becoming more resilient to code-reuse attacks, adversaries are now targeting sensitive data, such as the intermediate representation in JIT compilers, to achieve code execution or privilege escalation.

This paper demonstrates that securing JIT compilation alone is insufficient. We present a proof-of-concept data-only attack against a recent version of Mozilla's SpiderMonkey JIT, where the attacker corrupts heap objects to issue a system call from within bytecode execution at runtime. Previous work assumed that bytecode execution was inherently safe due to the limited set of benign instructions and validity checks. We show that this assumption does not hold in practice.

We also introduce NOJITSU, a novel defense mechanism designed to protect complex, real-world scripting engines from data-only attacks on interpreted code. NOJITSU leverages fine-grained memory access control for individual memory regions based on their roles throughout the JavaScript lifecycle. Our approach combines automated analysis, instrumentation, compartmentalization, and Intel’s Memory-Protection Keys (MPK) to secure SpiderMonkey against both existing and newly synthesized attacks. We implement and thoroughly test NOJITSU using real-world scenarios and standard benchmarks, demonstrating that it successfully thwarts code-reuse and data-only attacks with a modest runtime overhead of only 5%.

## 1. Introduction
Browsers are among the most widely used programs and are continuously exposed to untrusted inputs from remote web servers. A significant portion of these inputs is JavaScript code. Browsers typically use a script engine with one or more Just-In-Time (JIT) compilers to execute scripts efficiently. Mainstream engines like Mozilla’s SpiderMonkey and Google’s V8 evolve rapidly to keep up with the latest ECMAScript standards and user demands for high performance, making them prime targets for adversaries seeking to gain remote code execution [49, 66].

Initially, exploits focused on the JIT compiler itself, which transforms interpreted bytecode into natively executed machine code. Early JIT compilers wrote all runtime-generated code onto memory pages that were simultaneously writable and executable, enabling code-injection attacks [18, 55]. Later, JIT engines adopted W⊕X policies, mapping JIT pages to prevent simultaneous writability and executability. While this improved security, attackers still found ways to exploit JIT engines, such as through JIT spraying [7, 13, 37]. Defenders responded with techniques like constant blinding [13], constant elimination and code obfuscation [19], code randomization [32], and control-flow integrity [46].

Defending JIT engines against code-reuse attacks proved more challenging, as adversaries could leverage memory disclosure vulnerabilities to generate ROP chains at runtime (known as JIT-ROP [56]). Various schemes, such as randomization and execute-only memory [8, 9, 23, 29], were developed to counter these attacks.

Recently, several efforts independently demonstrated that adversaries can still inject code by corrupting the intermediate representation of the JIT compiler without overwriting code pointers [62, 27]. Recent defenses propose isolating JIT code compilation from execution through separate processes [42, 58] or hardware-based trusted execution environments [27].

In this paper, we show that isolating JIT code compilation from its execution is not sufficient to prevent remote code execution. We present a new attack that targets the bytecode interpreter component, previously considered safe. Our attack shows that an adversary can corrupt the internal data representation of individual operations within the interpreter, allowing the execution of potentially malicious operations like arbitrary system calls. This attack does not require JIT compilation at any point. We implemented our proof-of-concept attack on a recent version of Mozilla’s SpiderMonkey to verify its efficacy.

Existing protections for JavaScript engines do not trivially extend to the bytecode interpreter, either due to design constraints or because they would incur substantial runtime overhead. Therefore, we introduce NOJITSU, a novel and general defense strategy that leverages hardware-based memory protection features, such as Intel MPK, to isolate and protect each component of the scripting engine. We analyze, partition, and instrument SpiderMonkey, using automated dynamic analysis techniques to scale our efforts to this complex real-world codebase while keeping our techniques implementation-agnostic. To the best of our knowledge, we are the first to fully implement hardware-backed, fine-grained access control for a JavaScript engine. We thoroughly tested and evaluated NOJITSU in various attack scenarios, including code injection, dynamic code reuse, and data-only attacks, demonstrating practical performance with a moderate runtime overhead of only 5% on average.

### Summary of Contributions
1. **Bytecode Interpreter Attack**: We present a new attack against the bytecode interpreter in modern JavaScript engines, which works despite all existing defenses being enabled.
2. **Fine-Grained Memory Access Control**: We propose NOJITSU, a novel approach that secures the bytecode interpreter component of modern scripting engines. Our design leverages enhanced memory protection, such as Intel MPK, to lock down the entire scripting engine.
3. **Thorough Evaluation**: We extensively evaluate NOJITSU for its security and performance using real-world attack scenarios and standard benchmarks, demonstrating that it withstands all previously presented attacks and our new data-only attack with a low overhead of only 5%.

## 2. Attacking the Interpreter
We constructed an attack on the interpreter component of Mozilla’s SpiderMonkey, the JavaScript engine used in the Firefox web browser. This section provides the necessary background information and assumptions about SpiderMonkey’s internals and then describes our attack.

### 2.1 Threat Model
We assume a recent version of SpiderMonkey built with the standard Mozilla build environment and configuration. SpiderMonkey has many components containing statically compiled machine code. We assume that at least one of these components contains an arbitrary memory read/write vulnerability.

- **Memory-corruption vulnerability**: Some part of the scripting engine (or the surrounding application) contains a memory-corruption bug that enables an adversary to arbitrarily corrupt any part of the program’s address space.
- **Code-injection defense**: We assume the scripting engine enforces a strong W⊕X policy, ensuring no memory pages are simultaneously writable and executable. Some engines enforce W⊕X by offloading JIT compilation to an external process [42, 58] or trusted execution environment [27], while others toggle writable and executable permissions on JIT pages at runtime [44].
- **Code-reuse defense**: We assume the browser uses widespread code-reuse defenses, including ASLR [48] and coarse-grained CFI [3]. These defenses make the base addresses of executable code sections unknown a priori and limit control flow to legitimate function entry points. However, they do not prevent leaking function addresses by disassembling code pages to discover function locations.
- **Hardware-based Memory Protection Features**: We assume Intel Memory Protection Keys (MPK) [22] are available on the target platform. We assume PKRU values, which control access privileges to memory domains, remain in registers, preventing adversaries with arbitrary memory read/write capability from directly manipulating these values.

### 2.2 SpiderMonkey Implementation
Modern scripting engines, including SpiderMonkey, have two main components for executing JavaScript code: an interpreter and a JIT compiler (see Figure 1). The interpreter takes a plain-text script as input, parses it, and generates bytecode instructions, object tables, and data objects. Data objects encapsulate all the data used throughout the execution of the bytecode program, including constant values, function arguments, local and global variables, properties, and function pointers. Object tables provide an indirection layer between the bytecode and the data objects, allowing the JavaScript engine to generate highly compact bytecode. The engine then executes the script by interpreting the bytecode. When a part of the bytecode becomes "hot," the JIT compiler is invoked to compile it into optimized native machine code, eliminating the overhead of interpreter dispatch.

#### 2.2.1 Speculative Optimization
Some optimizations used by the JIT compiler may be speculative. For example, the compiler might speculate that certain program variables maintain stable types, even though types can change at any point. If a speculative assumption fails during execution, the optimized code is de-optimized, and execution falls back to the interpreter. The interpreter and JIT compiler share many data structures and memory regions, such as program variables stored in data objects, to ensure a seamless transition between interpreted and JIT-compiled execution.

#### 2.2.2 Native Functions
During script execution, a script may call C++ functions registered as JavaScript native (JSNative) functions. SpiderMonkey has hundreds of JSNative functions, providing the functionality of built-in JavaScript types and operations. In many cases, calls to JSNative functions are not inlined, even when the caller is a JIT-compiled function. Instead, SpiderMonkey transfers control to the JSNative function using a regular function call. One important property of JSNative functions is that SpiderMonkey calls them using an internal calling convention. According to this convention, a JSNative function must receive a pointer to the global JavaScript context object as its first argument, an argument count object as its second argument, and a pointer to an argument array as its third argument. Within the argument array, there is a slot reserved for the return value of the JSNative function. Upon calling a JSNative function, SpiderMonkey stores a pointer to the callee’s JavaScript function object in the return address slot.

#### 2.2.3 Data Structures
Throughout our analysis of SpiderMonkey’s implementation, we identified several key memory areas crucial for the correct and secure operation of the script engine:
1. **Bytecode region**: Includes instruction opcodes and operands, used by both the interpreter and the JIT compiler.
2. **JIT code cache**: Mapped as an executable memory region.
3. **JIT compiler data**: Used exclusively by the JIT compiler.
4. **JavaScript data objects**: Encapsulates all data used in the bytecode program.
5. **Object tables**: Provide an indirection layer between the bytecode and the data objects.

The bytecode region and other areas are mapped as readable and writable regions, while the JIT code is mapped as an executable memory region.