title:Stratified round Robin: a low complexity packet scheduler with bandwidth
fairness and bounded delay
author:Sriram Ramabhadran and
Joseph Pasquale
Stratiﬁed Round Robin: A Low Complexity Packet
Scheduler with Bandwidth Fairness and Bounded Delay
Sriram Ramabhadran
Joseph Pasquale
Department of Computer Science & Engineering
Department of Computer Science & Engineering
University of California, San Diego
9500 Gilman Drive
La Jolla, CA 92093-0114
PI:EMAIL
ABSTRACT
Fair queuing is a well-studied problem in modern computer
networks. However, there remains a gap between schedul-
ing algorithms that have provably good performance, and
those that are feasible and practical to implement in high-
speed routers.
In this paper, we propose a novel packet
scheduler called Stratiﬁed Round Robin, which has low com-
plexity, and is amenable to a simple hardware implemen-
tation. Stratiﬁed Robin Robin exhibits good fairness and
delay properties that are demonstrated through both ana-
lytical results and simulations. In particular, it provides a
single packet delay bound that is independent of the number
of ﬂows. This property is unique to Stratiﬁed Round Robin
among all other schedulers of comparable complexity.
Categories and Subject Descriptors
C.2.6 [Computer Communication Networks]:
Inter-
networking—Routers; F.2.2 [Analysis of Algorithms and
Problem Complexity]: Non-numerical Algorithms and
Problems—Sequencing and scheduling
General Terms
Algorithms, Performance
Keywords
output scheduling, quality of service, fair queuing
1.
INTRODUCTION
There are an increasing number of interactive Internet-
based applications, such as video and audio conferencing,
that make quality-of-service (QoS) demands on the network.
These applications generally transmit ﬂows of related pack-
ets between two end-points, and require that these ﬂows
meet certain QoS requirements, in terms of throughput and
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
SIGCOMM ’03, August 25-29, 2003, Karlsruhe, Germany.
Copyright 2003 ACM 1-58113-735-4/03/0008 ...$5.00.
University of California, San Diego
9500 Gilman Drive
La Jolla, CA 92093-0114
PI:EMAIL
end-to-end delay. How to satisfy the QoS requirements of
competing ﬂows, given a packet-switched network with de-
centralized control distributed over all the routers, is a long-
standing problem that has been the subject of considerable
research [3] [7] [8] [9] [11] [14] [15] [16] [32] [34] in the net-
working community.
An important component of the many QoS architectures
proposed is the packet scheduling algorithm used by routers
in the network. The packet scheduler determines the order
in which packets of various independent ﬂows are forwarded
on a shared output link. One of the simplest algorithms
is First Come First Served (FCFS), in which the order of
arrival of packets also determines the order in which they
are forwarded over the output link. While almost trivial to
implement, FCFS clearly cannot enforce QoS guarantees, as
it allows rogue ﬂows to capture an arbitrary fraction of the
output bandwidth.
In general, a packet scheduler should
have the following properties.
Fairness The packet scheduler must provide some mea-
sure of isolation between multiple ﬂows competing for the
same shared output link.
In particular, each ﬂow should
get its fair share of the available bandwidth, and this share
should not be aﬀected by the presence and (mis)behavior of
other ﬂows. For example, this share may be a pre-allocated
amount of bandwidth, that should be available to the ﬂow,
regardless of other ﬂow activity.
Bounded delay Interactive applications such as video and
audio conferencing require the total delay experienced by a
packet in the network to be bounded on an end-to-end ba-
sis. The packet scheduler decides the order in which packets
are sent on the output link, and therefore determines the
queuing delay experienced by a packet at each intermediate
router in the network.
Low complexity With line rates increasing to 40 Gbps,
it is critical that all packet processing tasks performed by
routers, including output scheduling, be able to operate in
nanosecond time frames. The time complexity of choosing
the next packet to schedule should be small, and in particu-
lar, it is desirable that this complexity be a small constant,
independent of the number of ﬂows N . Equally importantly,
the scheduling algorithm should be amenable to an eﬃcient
hardware implementation on a router line card.
Designing a packet scheduler with all of these constraints
has proved to be a diﬃcult problem.
In the long evolu-
tion of packet scheduling algorithms, one can identify two
basic approaches in design. Timestamp-based (also called
deadline-based) algorithms [2] [10] [28] [33] have provably
good delay and fairness properties [12] [13] [18] [26] [27], but
generally need to sort packet deadlines, and therefore suf-
fer from complexity logarithmic in the number of ﬂows N .
This sorting bottleneck makes practical implementations of
these algorithms problematic, and necessitates the design of
simpler schemes. Round-robin-based algorithms [24] [23] [6]
have O(1) complexity, and while they support fair alloca-
tion of bandwidth, they fail to provide good delay bounds.
Thus, while fair queuing is a well-studied problem in modern
computer networks, there remains a signiﬁcant gap between
schedulers that have provably good performance, and those
that are feasible to implement in high-speed routers.
It is to be emphasized here that reduction in complexity is
of paramount importance. If a separate queue is maintained
for each ﬂow, the number of queues required is potentially
in the millions. Flow aggregation, in the form of Stochas-
tic Fair Queuing [20], can be employed to reduce the num-
ber of queues by hashing multiple ﬂows to a single queue.
However, in order to limit the eﬀect of a single rogue ﬂow
on other ﬂows, the number of queues required is still large.
The same is true of many implementations of Diﬀerentiated
Services [3]. Thus, due to the large number of queues, even
logarithmic complexity can be a signiﬁcant barrier to imple-
mentation.
This paper proposes a novel packet scheduling algorithm
called Stratiﬁed Round Robin. Stratiﬁed Round Robin has
a complexity of O(1) in most practical scenarios, and is
amenable to an extremely simple hardware implementation.
Nevertheless, it has good fairness and delay properties that
we demonstrate through both analysis and simulation. In
particular, Stratiﬁed Round Robin provides a single packet
delay bound that is independent of the number of ﬂows.
Our contributions are two-fold: (1) we present a practically
realizable scheduler that provides a good approximation of
Weighted Fair Queuing, and (2) we show that this sched-
uler, despite its low complexity, exhibits unique asymptotic
performance in the form of a constant single packet delay
bound.
their timestamps. For example, the well-known Weighted
Fair Queuing [10] algorithm uses this method by computing
the timestamp of a packet as the time it would ﬁnish being
serviced under a reference GPS server. WFQ exhibits some
short-term unfairness which is addressed by the Worst-case
Weighted Fair Queuing [2] algorithm. While WFQ sched-
ules the packet with the least timestamp among all pack-
ets, WF2Q only considers those packets that have started
receiving service under the reference GPS server. As a re-
sult, WF2Q achieves ”worst-case fairness”, a notion deﬁned
in [2]. Although both WFQ and WF2Q have good delay
bounds and fairness properties, the need to maintain a ref-
erence GPS server results in high complexity. Speciﬁcally,
both algorithms have a time complexity of O(N ), where N
is the number of competing ﬂows. It has subsequently been
shown how to modify WF2Q so that it has a time complexity
of O(log N ) [1].
Self-Clocked Fair Queuing [17] and Virtual Clock [33] are
timestamp schedulers that use computationally more eﬃ-
cient schemes to compute timestamps without maintaining
a reference GPS server. As a result, timestamps can be com-
puted quickly. However, it is still required to sort packets
in ascending order of their timestamps. Consequently, they
still have a time complexity of O(log N ) per packet.
In general, although timestamp schedulers have good de-
lay properties, they suﬀer from a sorting bottleneck that
results in a time complexity of O(log N ) per packet. The
Leap Forward Virtual Clock [28] algorithm attempts to ad-
dress this problem by coarsening the way in which times-
tamps are computed in Virtual Clock. This results in a
reduced time complexity of O(log log N ) per packet. This is
an interesting result in terms of showing that rough sorting
is almost as good as exact sorting. However, the implemen-
tation requires a complicated data structure such as a Van
Emde Boas tree that typically would have higher constants,
and is not suited to a hardware implementation. Thus, the
high computational costs associated with timestamp sched-
ulers prevent them from being used in practice.
Recent lower bounds [31] suggest that the O(log N ) sort-
ing overhead is fundamental to achieving good delay bounds.
In particular, any scheduler that has a complexity of below
O(log N ) must incur a GPS-relative delay proportional to
N , the number of ﬂows.
2. PREVIOUS WORK
2.2 Round-robin schedulers
There is a signiﬁcant amount of prior work in ﬁnding
scheduling disciplines that provide delay and fairness guar-
antees. Generalized Processor Sharing [21] (also called Fluid
Fair Queuing) is considered the ideal scheduling discipline
that achieves perfect fairness and isolation among compet-
ing ﬂows. However, the ﬂuid model assumed by GPS is not
amenable to a practical implementation, as network com-
munication takes place in the form of packets that must
be transmitted atomically. Nevertheless, in terms of fair-
ness and delay guarantees, GPS acts as a benchmark for
other scheduling disciplines. Practical scheduling disciplines
can be broadly classiﬁed as either timestamp schedulers or
round-robin schedulers.
2.1 Timestamp schedulers
Timestamp schedulers [2] [11] [10] [17] [33] try to emulate
the operation of GPS by computing a timestamp for each
packet. Packets are then transmitted in increasing order of
Round-robin schedulers [24] [6] [19] are the other broad
class of work-conserving schedulers. These schedulers typi-
cally assign time slots to ﬂows in some sort of round-robin
fashion. By eliminating the sorting bottleneck associated
with timestamp schedulers, they achieve an O(1) time packet
processing complexity. As a result, they tend to have poor
delay bounds and output burstiness.
Deﬁcit Round Robin (DRR) [24] is a well-known example
of a round-robin scheme. DRR assigns a quantum size to
each ﬂow that is proportional to the weight of the ﬂow. Each
ﬂow has a deﬁcit counter that measures the current unused
portion of the allocated bandwidth. Packets of backlogged
ﬂows are transmitted in rounds, and in each round, each
backlogged ﬂow can transmit up to an amount of data equal
to the sum of its quantum and deﬁcit counter. The unused
portion of this amount is carried over to the next round as
the value of the deﬁcit counter. Once a ﬂow is serviced, irre-
spective of its weight, it must wait for N−1 other ﬂows to be
serviced until it is serviced again. Also, during each round,
a ﬂow transmits its entire quantum at once. As a result,
DRR has poor delay and burstiness properties. However,
due to its extreme simplicity, DRR (or some variant) is the
scheduling discipline typically implemented in high speed
routers such as the Cisco GSR [30].
Summarizing, timestamp schedulers have good fairness
and delay properties but high complexity, while round-robin
schedulers are simple to implement but have poor delay
bounds and show output burstiness. More recently proposed
schemes [6] [19] [5] have attempted to achieve the best of
both worlds by combining the fairness and delay properties
of timestamp schedulers with the low complexity of round-
robin schedulers. This is typically done by evolving a round-
robin scheme like DRR and incorporating some elements of
a timestamp scheduler. The Stratiﬁed Round Robin sched-
uler proposed in this paper follows this approach.
The Smoothed Round Robin [6] discipline addresses the
output burstiness problem of DRR. This is done by spread-
ing the quantum allocated to a ﬂow over an entire round us-
ing a Weight Spread Sequence. Although SRR also results
in better delay bounds than DRR, the worst case delay ex-
perienced by a packet is still proportional to N , the number
of ﬂows.
Aliquem [19] is an evolution of DRR that permits scaling
down the quantum assigned to a ﬂow in each round. How-
ever, since the quantum may be less than the maximum
packet size, a ﬂow may not be able to transmit any data in
each round. Therefore a mechanism is required to keep track
of the round in which a ﬂow has accumulated enough credit
to transmit a packet. Their mechanism, called Active List
Management, can be implemented using a priority encoder,
similar to Stratiﬁed Round Robin. The scaling down of the
quanta results in better delay and burstiness properties.
Bin Sort Fair Queuing [5] uses an approximate bin sorting
mechanism to schedule packets. Each packet is assigned a
deadline similar to a timestamp scheduler. Packets with
close deadlines are assigned to the same bin. Within a bin,
there is no sorting of packets based on deadlines. Therefore,
packets are transmitted in approximately the same order as
their deadlines.
Although both Aliquem and BSFQ signiﬁcantly improve
the delay bounds of DRR, it appears that the worst case
delay of even a single packet is still proportional to N , the
number of ﬂows. The Stratiﬁed Round Robin scheduler pro-
posed in this paper improves upon this by reducing the worst
case delay of a single packet to a small constant.
3. STRATIFIED ROUND ROBIN
This section describes the main contribution of this paper,
which is a new scheduling algorithm called Stratiﬁed Round
Robin.
3.1 Model
There are N backlogged ﬂows f1, f2, . . . , fN that share
an output link of bandwidth R. Flow fi has a reserved
bandwidth of ri with admission control ensuring that
ri ≤ R
i=N
Xi=1
(1)
In addition, it is assumed that for every ﬂow fi, ri < R.
Otherwise scheduling is trivial as there is only one ﬂow which
F1
F3
F4
1 = 8
w1 = 1
2
2 = 2
w2 = 1
8
3 = 3
w3 = 3
16
4 = 1
w4 = 1
16
5 = 1
w5 = 1
16
f1
f2
f3
f4
f5
R = 16
Output
Figure 1: There are ﬁve ﬂows f1, . . . , f5 sharing an
output link of bandwidth R = 16. Flow f1 has a re-