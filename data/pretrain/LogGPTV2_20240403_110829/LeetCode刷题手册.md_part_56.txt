·给出一个数组，
 2. The sum of elements in the given array will not exceed 1000.
There are 5 ways to assign symbols to make the sum of nums be target 3.
+1+1+1+1-1 
+1+1+1-1+1
+1+1-1+1+1 
+1-1+1+1+1 
-1+1+1+1+1 
Explanation:
Output:5 
Input: nums is [1, 1, 1, 1, 1], S is 3.
. Your output answer is guaranteed to be fitted in a 32-bit integer.
种不同的方法。
保证返回的最终结果能被 32 位整数存下。
初始的数组的和不会超过1000。
数组非空，且长度不会超过 20
3
3
3
3
3
要求在这个数组里面的每个元素前面加上+或者－号，最终总和等于S。问有多少
---
## Page 566
代码
·如果和不是偶数，即不能被2整除，那说明找不到满足题目要求的解了，直接输出〇。
·这一题可以用 DP 和 DFS 解答。DFS 方法就不比较暴力简单了。见代码。这里分析一下 DP 的做
func findTargetSumwaysl(nums []int, S int) int {
//解法二 DFS 
func findTargetsumways(nums []int, S int) int {
dfsFindTargetSumways(nums, O, O, S, &res, sums)
for i := len(nums) - 2; i > -l; i--  
sums[len(nums)-1] = nums[len(nums)-1]
sums := make([]int, len(nums)) 
//sums［i］存储的是后缀和 nums[i:］，即从i到结尾的和
return dp[target]
dp[0]= 1 
dp := make([]int, target+1)
if s > total ll(S+total)%2 == 1 { 
for -, n := range nums {
total := 0 
return res
res := 0
target := (s + total) / 2
数。
sum(nums)） ／ 2。那么这题就转化为了第 416 题了。dp[i] 中存储的是能使和为  的方法个
sum(nums），那么这道题就转换成了，
等号两边都加上sum(N）+ sum(P)，
号，
法。题目要求在数组元素前加上+或者－号，其实相当于把数组分成了 2 组，一组全部都加+
 sums[i] = sums[i+l] + nums[i]
 return 0
 total += n 
for i := target; i >= n; i-- {
Sum(P) + Sum(N) + sum(P) - sum(N) = target + sum(P) + sum(N)
sum(P) - sum(N) = target 
dp[i] += dp[i-n]
‘一-‘一+-一
 2 * sum(P) = target + sum(nums) 
，能否在数组中找到这样一个集合，和等于（target+
，于是可以得到结果2*sum(P）=target+
---
## Page 567
 Example 2:
Example 1: 
nums2. If it does not exist, output -1 for this number.
 The Next Greater Number of a number x in nums1 is the first greater number to its right in 
places of nums2. 
subset of nums2. Find all the next greater numbers for nums1's elements in the corresponding 
You are given two arrays (without duplicates) nums1 and nums2 where nums1's elements are 
题目
496. Next Greater Element I
the second array, so output -1.
Explanation: 
Output: [-1,3,-1] 
Input: nums1 = [4,1,2], nums2 = [1,3,4,2].
了，所以这里可以剪枝了
sums []int){
func dfsFindTargetSumways(nums []int, index int, cursum int, S int, res *int,
second array is 3.
dfsFindTargetSumways(nums, index+l, curSum-nums[index], 
dfsFindTargetSumways(nums，
if S-curSum > sums[index]{
// 剪枝优化：如果sums［index］值小于剩下需要正数的值，那么右边就算都是＋号也无能为力
 For number 1 in the first array, the next greater number for it in the 
 a xau au   n  a ae   a o 
 return 
return
if curSum == S { 
[+(sa)=(sau) 
 index+l,
curSum+nums [index]，S
S, res, sums)
S, res, sums)
---
## Page 568
代码
简单题，依题意做即可。
解题思路
1。
比 A 数组中元素大的数，B中元素之间的顺序保持不变。如果找到了就输出这个值，如果找不到就输出
这道题也是简单题。题目给出 2个数组A和 B，针对 A 中的每个数组中的元素，要求在 B 数组中找出
题目大意
Note:
● The length of both nums1 and nums2 would not exceed 1000.
● All elements in nums1 and nums2 are unique. 
func nextGreaterElement(nums1 []int, nums2 []int) []int {
package leetcode 
second array is 3.
Explanation: 
Output: [3,-1]
Input: nums1 = [2,4], nums2 = [1,2,3,4].
for i, v := range nums2 {
res, reocrd, flag := []int{}, map[int]int[}, false
if len(nums1) == 0 Il len(nums2) == 0 { 
for i := 0; i  0{ 
 obj := Constructor(rects);
:uns se palles pue paeausuy aa llim ioatqo uotanios unos 
if index == -1 {
for low >1
}else{
if so.arr[mid] > r { 
if i == 0{ 
 S.arr[i] = s.arr[i-1] + area 
low = mid + 1
high = mid - 1
if mid == 0 ll so.arr[mid-1] {
dir = 0 
i--
j--
2
2
1
 dir=1 代表从左下到右上的方向 dir=-1 代表上一次
---
## Page 575
if i == m-l { // 下边界
f
dir = -1
j++ 
ifj= 0 && i = 0 && j <= len(matrix[0])-1 {
return res
*res = append(*res, matrix[i][j])
f