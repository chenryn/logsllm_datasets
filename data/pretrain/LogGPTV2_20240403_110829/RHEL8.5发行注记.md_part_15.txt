工具。这个版本提供了与之前版本相比的程序错误修正和增强列表。
如需了解更多详细信息，请参阅
[RHEA-2021:85361-01](https://errata.devel.redhat.com/advisory/85361){.link}。
([BZ#2009153](https://bugzilla.redhat.com/show_bug.cgi?id=2009153){.link})
[]{#New-features.html#BZ-2001020}
::: title
**现在完全支持 The ` ubi8/nodejs-16`{.literal}
andubi8/nodejs-16-minimal``{=html} 容器镜像**
:::
[RHBA `-2021:5260 公告中完全支持 The ubi8/nodejs-16 and`{.literal}
ubi8/nodejs-16-minimal``{=html}
容器镜像（](https://access.redhat.com/errata/RHBA-2021:5260){.link}
以前作为技术预览）。这些容器镜像包括
`Node.js 16.13`{.literal}，这是一个长期支持(LTS)版本。
([BZ#2001020](https://bugzilla.redhat.com/show_bug.cgi?id=2001020){.link})
:::
:::
[]{#kernel_parameters_changes.html}
::: chapter
::: titlepage
# []{#kernel_parameters_changes.html#kernel_parameters_changes}第 5 章 对外部内核参数的重要更改 {.title}
:::
本章为系统管理员提供了 Red Hat Enterprise Linux 8.5
附带的内核有显著变化的总结。这些更改包括添加或更新的 `proc`{.literal}
条目、`sysctl`{.literal} 和 `sysfs`{.literal}
默认值、引导参数、内核配置选项或者任何可见的行为更改。
## []{#kernel_parameters_changes.html#_new_kernel_parameters}新内核参数
::: variablelist
[idxd.sva = \[HW\]]{.term}
:   格式： \
    使用这个参数，您可以强制禁用对 `idxd`{.literal}
    内核模块的共享虚拟内存(SVA)支持。
    默认值为 `true(`{.literal} `1)`{.literal}。
[lsm.debug = \[SECURITY\]]{.term}
:   使用这个参数，您可以启用 Linux 安全模块(LSM)初始化调试输出。
[lm = lsm1,...​,lsmN \[SECURITY\]]{.term}
:   使用这个参数，您可以选择 Linux Security 模块(LSM)初始化顺序。
    此参数覆盖 `CONFIG_LSM`{.literal} 选项和 `security=`{.literal}
    参数。
[rcutree.qovld = \[KNL\]]{.term}
:   使用这个参数，您可以设置排队的
    Read-copy-update(RCU)回调的阈值。除这个阈值外，RCU 的
    force-quiescent-state 扫描将积极采纳 `cond_resched（）`{.literal}
    系统调用的帮助，并调度 IPI，以帮助 CPU 更快地到达静默状态。
    您可以将此参数设置为小于零的值，以便在引导时根据
    `rcutree.qhimark`{.literal}
    参数设置此参数。或者，将此参数设置为零，以禁用更积极的帮助加入。
[rcutree.rcu_unlock_delay = \[KNL\]]{.term}
:   使用这个参数，您可以在将配置布尔值设置为
    `CONFIG _RCU_STRICT_GRACE_PERIOD=y 的内核中指定 rcu_read_`{.literal}unlock（）``{=html}
    -time delay。
    默认值为 0。
    更大的延迟会增加捕获
    Read-copy-update(RCU)指针泄漏的可能性。这是相关的
    `rcu_read_unlock（）`{.literal} 完成后 RCU 保护指针有缺陷的使用。
[rcutorture.irqreader = \[KNL\]]{.term}
:   使用这个参数，您可以从 Interrupt
    请求(IRQ)处理程序或计时器处理程序中运行
    Read-copy-update(RCU)读取器。
[rcutorture.leakpointer = \[KNL\]]{.term}
:   使用这个参数，您可以将
    Read-copy-update(RCU)受保护的指针泄露出读取器。这可能会导致
    splats，并旨在测试 `CONFIG_RCU_STRICT_GRACE_PERIOD=y`{.literal}
    等配置的能力来检测此类泄漏。
[rcutorture.read_exit = \[KNL\]]{.term}
:   使用这个参数，您可以设置 read-then-exit kthreads 的数量，以测试
    Read-copy-update(RCU)更新器和 task-exit 处理的交互。
[rcutorture.read_exit_burst = \[KNL\]]{.term}
:   使用这个参数，您可以在给定的 read-then-exit 集中指定生成一组
    read-then-exit kthreads 的次数。
[rcutorture.read_exit_delay = \[KNL\]]{.term}
:   使用这个参数，您可以指定连续的读-then-exit
    测试集之间的延迟（以秒为单位）。
[rcutorture.stall_cpu_block = \[KNL\]]{.term}
:   使用这个参数，您可以在阻塞时设置睡眠状态。因此，除了其它与停滞相关的活动外，还会出现来自抢占的
    Read-copy-update(RCU)的警告。
[rcutorture.stall_gp_kthread = \[KNL\]]{.term}
:   使用这个参数，您可以指定 Read-copy-update(RCU)gate-period kthread
    中强制睡眠的持续时间（以秒为单位）来测试 RCU CPU 停滞警告。
    将此参数设置为零可禁用功能。
    如果同时指定了 `stall_cpu`{.literal} 和 `stall_gp_kthread`{.literal}
    参数，则 kthread 首先会耗尽，然后是 CPU。
[rcupdate.rcu_cpu_stall_suppress_at_boot = \[KNL\]]{.term}
:   使用这个参数，您可以阻止 RCU CPU
    停止警告信息并阻止在早期引导过程中发生 rcutorture 写卡警告。这是生成
    `init`{.literal} 任务之前的时间。
[rcupdate.rcu_task_ipi_delay = \[KNL\]]{.term}
:   使用这个参数，您可以设置 jiffies 的时间，其中
    Read-copy-update(RCU)任务避免发送 IPI，从给定宽限期的开头开始。
    设置大量数字可避免干扰实时工作负载，但会延长宽限期。
[refscale.holdoff = \[KNL\]]{.term}
:   使用这个参数，您可以设置 test-start Holoff
    周期。此参数的目的是将测试的开始延迟到启动完成，以避免干扰。
[refscale.loops = \[KNL\]]{.term}
:   使用这个参数，您可以在测试时设置同步原语的循环数量。增加这个数量可减少因为循环启动/结束开销而导致的空出。
    在 2020 年 x86 笔记本电脑中，默认值已减少为每被动的几秒钟。
[refscale.nreaders = \[KNL\]]{.term}
:   使用这个参数，您可以设置读取器的数量。
    默认值为 -1，其中 N 是 CPU 数量大约 75%。
[refscale.nruns = \[KNL\]]{.term}
:   通过这个参数，您可以设置运行数量，每个都转储到控制台日志中。
[refscale.readdelay = \[KNL\]]{.term}
:   使用这个参数，您可以设置只读关键部分持续时间，以微秒为单位。
[refscale.scale_type = \[KNL\]]{.term}
:   使用这个参数，您可以指定要测试的读保护实现。
[refscale.shutdown = \[KNL\]]{.term}
:   通过这个参数，您可以在性能测试结束时关闭系统。
    默认值为 1，它会关闭系统 - refscale 内置在内核中。
    值 0 并使系统保持运行 - refscale 将作为模块构建。
[refscale.verbose = \[KNL\]]{.term}
:   使用这个参数，您可以启用额外的 `printk（）`{.literal} 语句。
[scftorture.holdoff = \[KNL\]]{.term}
:   使用这个参数，您可以指定开始测试前要保留的秒数。
    模块插入时，paramter 默认为零，内置
    `smp_call_function（）`{.literal} 测试时则默认为 10 秒。
[scftorture.longwait = \[KNL\]]{.term}
:   使用这个参数，您可以请求非常长的等待时间，这些等待会随机选择达到所选的限制（以秒为单位）。
    默认值为零，它禁用了此功能。
    请注意，请求少量非零秒数可能导致读-copy-update(RCU)CPU
    停滞警告，以及软锁定投诉等。
[scftorture.nthreads = \[KNL\]]{.term}
:   使用这个参数，您可以指定要生成的 kthreads 数来调用
    `smp_call_function（）`{.literal} 函数系列。
    默认值 -1 指定等于 CPU 数量的 kthreads 数。
[scftorture.onoff_holdoff = \[KNL\]]{.term}
:   使用这个参数，您可以指定在启动 CPU-hotplug
    操作前测试开始后等待的秒数。
[scftorture.onoff_interval = \[KNL\]]{.term}
:   使用这个参数，您可以指定连续 CPU-hotplug 操作之间等待的秒数。
    默认值为零，它禁用了 CPU-hotplug 操作。
[scftorture.shutdown_secs = \[KNL\]]{.term}
:   使用这个参数，您可以指定测试开始后的秒数。测试后，系统关闭。
    如果默认值为零，您可以避免关闭系统。非零值对自动测试很有用。
[scftorture.stat_interval = \[KNL\]]{.term}
:   使用这个参数，您可以指定输出当前测试统计信息到控制台之间的秒数。
    值为零可禁用统计输出。
[scftorture.stutter_cpus = \[KNL\]]{.term}
:   使用这个参数，您可以指定要在每次更改到正在测试的 CPU 集合之间等待的
    jiffies 数量。
[scftorture.use_cpus_read_lock = \[KNL\]]{.term}
:   使用这个参数，您可以在调用其中一个
    `smp _call_function*（）功能时，使用 use_cpus_read_lock`{.literal}
    （）系统调用来禁用默认的 preempt_disable``{=html}
    （）``{=html} 系统调用。
[scftorture.verbose = \[KNL\]]{.term}
:   使用这个参数，您可以启用额外的 `printk（）`{.literal} 语句。
[scftorture.weight_single = \[KNL\]]{.term}
:   这个参数指定 `smp_call_function_single（）`{.literal}
    函数使用零\"wait\"参数的可能性权重。
    如果所有其他权重均为 -1，则值为 -1
    选择默认值。但是，如果至少一个权重具有其他值，则值为 -1 时选择 0
    权重。
[scftorture.weight_single_wait = \[KNL\]]{.term}
:   这个参数指定 `smp_call_function_single（）`{.literal} 函数使用非零
    \"wait\" 参数的可能性权重。如需更多信息，请参阅
    `weight_single`{.literal}。
[scftorture.weight_many = \[KNL\]]{.term}
:   这个参数指定 `smp_call_function_many（）`{.literal}
    函数使用零\"wait\"参数的可能性权重。
    请注意，为这种权重设置高的可能性可能会给系统带来严重的进程间中断(IPI)负载。
    如需更多信息，请参阅 `weight_single`{.literal}。
[scftorture.weight_many_wait = \[KNL\]]{.term}
:   这个参数指定 `smp_call_function_many（）`{.literal} 函数使用非零
    \"wait\" 参数的可能性权重。
    如需更多信息，请参阅 `weight_single`{.literal} 和
    `weight_many`{.literal}。
[scftorture.weight_all = \[KNL\]]{.term}
:   这个参数指定对 `smp_call_function_all（）`{.literal}
    函数使用零\"wait\"参数的可能性权重。
    如需更多信息，请参阅 `weight_single`{.literal} 和
    `weight_many`{.literal}。
[scftorture.weight_all_wait = \[KNL\]]{.term}
:   这个参数指定 `smp_call_function_all（）`{.literal} 函数使用非零
    \"wait\" 参数的可能性权重。
    如需更多信息，请参阅 `weight_single`{.literal} 和
    `weight_many`{.literal}。
[torture.disable_onoff_at_boot = \[KNL\]]{.term}
:   使用这个参数，您可以防止在 `init`{.literal} 任务生成前进行入侵的
    CPU-hotplug 组件。
[torture.ftrace_dump_at_shutdown = \[KNL\]]{.term}
:   通过这个参数，您可以在组群-test 关闭时转储 `ftrace`{.literal}
    缓冲区，即使没有错误也是如此。
    当许多测试同时运行时，这可能会非常昂贵，特别是在有旋转规则存储的系统上。
:::
## []{#kernel_parameters_changes.html#_updated_kernel_parameters}更新的内核参数
::: variablelist
[IOMMU.forcedac = \[ARM64, X86\]]{.term}
:   使用这个参数，您可以控制 PCI 设备的输入输出虚拟地址(IOVA)分配。
    格式：{ 0 \| 1 }
    ::: itemizedlist
    -   `0`{.literal} - 若有需要，先尝试分配 32
        位直接内存访问(DMA)地址，然后再回退到完整范围。
    -   `1`{.literal} - 从所有可用范围直接分配.选项强制为 PCI
        卡（支持大于 32 位寻址）的双地址周期。
    :::
[page_poison = \[KNL\]]{.term}
:   通过这个 boot-time 参数，您可以更改 buddy 分配器上的投毒状态，并附带
    `CONFIG_PAGE_POISONING=y`{.literal} 配置。
    ::: itemizedlist
    -   `off`{.literal} ：关闭投毒（默认）
    -   `开启`{.literal} ：打开投毒
    :::
[rcuscale.gp_async = \[KNL\]]{.term}
:   通过这个参数，您可以测量异步宽松(prima-period
    `)原语的性能，如 call_rcu(`{.literal} )。
[rcuscale.gp_async_max = \[KNL\]]{.term}
:   使用这个参数，您可以指定每个作者线程的最大未完成的回调数。当写入器线程超过这个限制时，它会调用对应的
    `rcu_barrier（）`{.literal} 类别，以允许之前发布的回调排空。
[rcuscale.gp_exp = \[KNL\]]{.term}