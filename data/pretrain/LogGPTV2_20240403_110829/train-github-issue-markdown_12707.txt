Let's say we have two pages: PageA, PageB, and they have pageA.js and
pageB.js. Both of them depdends on a common bunch of stuffs, which can be
packed into a file called "common.js".  
pageA.js:  
`require(['common', 'someOtherThingsANeeds'], function(){//do sth.})`  
pageB.js:  
`require(['common', 'someOtherThingsBNeeds'], function(){//do sth.})`
I want to load chunks when the page runs, so I use a config like this:
        new CommonsChunkPlugin({
          name: "pageA",
          async: true,
        }),
        new CommonsChunkPlugin({
          name: "pageB",
          async: true,
        })
But it comes out that both chunks of pageA and pageB have the same content of
module "common", which are duplicated and should be extracted to a single
module called "common"
In this example, we can just specify something like this:
            new CommonsChunkPlugin({
                name: "commons.js",
                chunks: ["pageA", "pageB", "admin-commons.js"],
                minChunks: 2
            }),
However, I have to declare the reference of "common.js" in the html file. In
addition, I can't control when my "common.js" should be loaded by js. And I
can't control my dependencies in my js only. I have to remember to write it
and I have to ordering the declarations in an old way.
In r.js of require.js, there's such a config that we can customize which of
the modules should be seperated into individual ones, like this:
    modules:[ { name:"common",
          include:[ "allThingsCommonNeeds" ] }, 
    { name:"pageA",
          include:[ "blabla ],
        exclude:["common"] }]
So how could I achieve this by webpack? Do you guys have any suggestions or
ideas? Thank you very much.