---
author: Floyd Smith
category: 系统运维
comments_data:
- date: '2016-04-11 08:34:32'
  message: 有一个足够宽的水管才是硬道理
  postip: 153.150.178.8
  username: 来自日本的 Chrome 49.0|Windows 10 用户
- date: '2016-04-13 18:37:08'
  message: 看看，涨涨知识。
  postip: 60.175.130.2
  username: hello_linux [Firefox 43.0|Windows 7]
- date: '2016-04-27 10:33:38'
  message: "足够宽的时候,会有更多的数据想要传输.导致还是不够宽.\r\n根源在于数据量.或者双管齐下"
  postip: 140.207.79.150
  username: 来自上海的 Chrome 49.0|Mac 10.11 用户
count:
  commentnum: 3
  favtimes: 10
  likes: 0
  sharetimes: 0
  viewnum: 20502
date: '2016-04-11 08:00:00'
editorchoice: true
excerpt: 想要提高效率很简单，但是看到实际结果很难。为了在你的探索之旅上帮助到你，这篇文章会给你提供10条最高可以提升10倍网站性能的建议。
fromurl: https://www.nginx.com/blog/10-tips-for-10x-application-performance/
id: 7206
islctt: true
largepic: /data/attachment/album/201604/09/232202t6f6der3g68eb0og.jpg
permalink: /article-7206-1.html
pic: /data/attachment/album/201604/09/232202t6f6der3g68eb0og.jpg.thumb.jpg
related: []
reviewer: ''
selector: ''
summary: 想要提高效率很简单，但是看到实际结果很难。为了在你的探索之旅上帮助到你，这篇文章会给你提供10条最高可以提升10倍网站性能的建议。
tags:
- NGINX
- 性能
- Web
- nginx
thumb: false
title: 将 Web 应用性能提高十倍的10条建议
titlepic: false
translator: Ezio
updated: '2016-04-11 08:00:00'
---
提高 web 应用的性能从来没有比现在更重要过。网络经济的比重一直在增长；全球经济超过 5% 的价值是在因特网上产生的（数据参见下面的资料）。这个时刻在线的超连接世界意味着用户对其的期望值也处于历史上的最高点。如果你的网站不能及时的响应，或者你的 app 不能无延时的工作，用户会很快的投奔到你的竞争对手那里。
举一个例子，一份亚马逊十年前做过的研究可以证明，甚至在那个时候，网页加载时间每减少100毫秒，收入就会增加1%。另一个最近的研究特别强调一个事实，即超过一半的网站拥有者在调查中承认它们会因为应用程序性能的问题流失用户。
网站到底需要多快呢？对于页面加载，每增加1秒钟就有4%的用户放弃使用。顶级的电子商务站点的页面在第一次交互时可以做到1秒到3秒加载时间，而这是提供最高舒适度的速度。很明显这种利害关系对于 web 应用来说很高，而且在不断的增加。
想要提高效率很简单，但是看到实际结果很难。为了在你的探索之旅上帮助到你，这篇文章会给你提供10条最高可以提升10倍网站性能的建议。这是一系列介绍提高应用程序性能的第一篇文章，包括充分测试的优化技术和一点 NGINX 的帮助。这个系列也给出了潜在的提高安全性的帮助。
![](/data/attachment/album/201604/09/232202t6f6der3g68eb0og.jpg)
### Tip #1: 通过反向代理来提高性能和增加安全性
如果你的 web 应用运行在单个机器上，那么这个办法会明显的提升性能：只需要换一个更快的机器，更好的处理器，更多的内存，更快的磁盘阵列，等等。然后新机器就可以更快的运行你的 WordPress 服务器, Node.js 程序, Java 程序，以及其它程序。（如果你的程序要访问数据库服务器，那么解决方法依然很简单：添加两个更快的机器，以及在两台电脑之间使用一个更快的链路。）
问题是，机器速度可能并不是问题。web 程序运行慢经常是因为计算机一直在不同的任务之间切换：通过成千上万的连接和用户交互，从磁盘访问文件，运行代码，等等。应用服务器可能会 抖动   （    thrashing    ） -比如说内存不足、将内存数据交换到磁盘，以及有多个请求要等待某个任务完成，如磁盘I/O。
你可以采取一个完全不同的方案来替代升级硬件：添加一个反向代理服务器来分担部分任务。[反向代理服务器](https://www.nginx.com/resources/glossary/reverse-proxy-server) 位于运行应用的机器的前端，是用来处理网络流量的。只有反向代理服务器是直接连接到互联网的；和应用服务器的通讯都是通过一个快速的内部网络完成的。
使用反向代理服务器可以将应用服务器从等待用户与 web 程序交互解放出来，这样应用服务器就可以专注于为反向代理服务器构建网页，让其能够传输到互联网上。而应用服务器就不需要等待客户端的响应，其运行速度可以接近于优化后的性能水平。
添加反向代理服务器还可以给你的 web 服务器安装带来灵活性。比如，一个某种类型的服务器已经超载了，那么就可以轻松的添加另一个相同的服务器；如果某个机器宕机了，也可以很容易替代一个新的。
因为反向代理带来的灵活性，所以反向代理也是一些性能加速功能的必要前提，比如：
* **负载均衡** (参见 Tip #2) – 负载均衡运行在反向代理服务器上，用来将流量均衡分配给一批应用。有了合适的负载均衡，你就可以添加应用服务器而根本不用修改应用。
* **缓存静态文件** (参见 Tip #3) – 直接读取的文件，比如图片或者客户端代码，可以保存在反向代理服务器，然后直接发给客户端，这样就可以提高速度、分担应用服务器的负载，可以让应用运行的更快。
* **网站安全** – 反向代理服务器可以提高网站安全性，以及快速的发现和响应攻击，保证应用服务器处于被保护状态。
NGINX 软件为用作反向代理服务器而专门设计，也包含了上述的多种功能。NGINX 使用事件驱动的方式处理请求，这会比传统的服务器更加有效率。NGINX plus 添加了更多高级的反向代理特性，比如应用的[健康度检查](https://www.nginx.com/products/application-health-checks/)，专门用来处理请求路由、高级缓冲和相关支持。
![NGINX Worker Process helps increase application performance](/data/attachment/album/201604/11/132505e96qqu9jk6c4u3rw.jpg)
### Tip #2: 添加负载平衡
添加一个[负载均衡服务器](https://www.nginx.com/solutions/load-balancing/) 是一个相当简单的用来提高性能和网站安全性的的方法。与其将核心 Web 服务器变得越来越大和越来越强，不如使用负载均衡将流量分配到多个服务器。即使程序写的不好，或者在扩容方面有困难，仅是使用负载均衡服务器就可以很好的提高用户体验。
负载均衡服务器首先是一个反向代理服务器（参见Tip #1）——它接受来自互联网的流量，然后转发请求给另一个服务器。特别是负载均衡服务器支持两个或多个应用服务器，使用[分配算法](https://www.nginx.com/resources/admin-guide/load-balancer/)将请求转发给不同服务器。最简单的负载均衡方法是 轮转法   （    round robin    ） ，每个新的请求都会发给列表里的下一个服务器。其它的复制均衡方法包括将请求发给活动连接最少的服务器。NGINX plus 拥有将特定用户的会话分配给同一个服务器的[能力](https://www.nginx.com/blog/load-balancing-with-nginx-plus/)。
负载均衡可以很好的提高性能是因为它可以避免某个服务器过载而另一些服务器却没有需要处理的流量。它也可以简单的扩展服务器规模，因为你可以添加多个价格相对便宜的服务器并且保证它们被充分利用了。
可以进行负载均衡的协议包括 HTTP、HTTPS、SPDY、HTTP/2、WebSocket、[FastCGI](https://www.digitalocean.com/community/tutorials/understanding-and-implementing-fastcgi-proxying-in-nginx)、SCGI、uwsgi、 memcached 等，以及几种其它的应用类型，包括基于 TCP 的应用和其它的第4层协议的程序。分析你的 web 应用来决定你要使用哪些以及哪些地方性能不足。
相同的服务器或服务器群可以被用来进行负载均衡，也可以用来处理其它的任务，如 SSL 末端服务器，支持客户端的 HTTP/1.x 和 HTTP/2 请求，以及缓存静态文件。
NGINX 经常被用于进行负载均衡；要想了解更多的情况，可以下载我们的电子书《[选择软件负载均衡器的五个理由](https://www.nginx.com/resources/library/five-reasons-choose-software-load-balancer/)》。你也可以从 《[使用 NGINX 和 NGINX Plus 配置负载均衡，第一部分](https://www.nginx.com/blog/load-balancing-with-nginx-plus/)》中了解基本的配置指导，在 NGINX Plus 管理员指南中有完整的 [NGINX 负载均衡](https://www.nginx.com/resources/admin-guide/load-balancer//)的文档。。我们的商业版本 [NGINX Plus](https://www.nginx.com/products/) 支持更多优化了的负载均衡特性，如基于服务器响应时间的加载路由和 Microsoft’s NTLM 协议上的负载均衡。
### Tip #3: 缓存静态和动态的内容
缓存可以通过加速内容的传输速度来提高 web 应用的性能。它可以采用以下几种策略：当需要的时候预处理要传输的内容，保存数据到速度更快的设备，把数据存储在距离客户端更近的位置，或者将这几种方法结合起来使用。