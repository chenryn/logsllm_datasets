al. [5] as one of the potential downsides of Git mining and analysis.
However, capturing all Git histories, continuously, is infeasible. To
at least understand the impact of these issues, we analyzed our
(b) Number of types captured in September 2017
Figure 9: Comparison of the number of types in same period
of time captured in different time
snapshot of the Android repository before and after the “Oreo” An-
droid releases in August 2017, where we observed more than 1,500
commits added in the span of a few days.
Figure 9 shows the two different curves with the number of
SEAndroid types for the same period of time from January 2017 to
May 2017, but reflecting the “pre-Oreo” and “post-Oreo” repository
states. In Figure 9(a), we plot the “pre-Oreo” (late “Nougat”) data
from the end May 2017; in Figure 9(b), we plot the same time period
from the AOSP repository as of September 2017. These two curves
show the same upward trends but Figure 9(b) shows significantly
more noise. This is the result of a merge in the repository, performed
at the end of July, with the merged commits originally committed in
early 2017; these new commits only appeared on the master branch
after the “Oreo” release, despite predating it. Since the graph uses
the commit time as its x-axis, it shows fluctuations between the
pre- and post-Oreo branch merger. Needless to say, branch merge
events add additional complexity and noise to our data.
Most of the time-series graphs we derived in this paper have a
similar square-shaped noise, likely due to merged branches. Because
we cannot track private branches prior to their merger, it is not
possible to distinguish which stream of the commit was the main-
stream of the master branch before the merge. The timestamps are
all we have, and thus we’re stuck looking at interleaved time-series
data, and thus the square-shaped noise. We can at least visually
interpret the tops and bottoms of the square-shapes as representing
the two original pre-merger commit streams.
This pattern shows that Google is continuing to develop Android
internally, with mergers into the publicly visible AOSP only hap-
pening on major releases. While Android OEMs will hopefully have
a more granular view of Google’s efforts, any external developer
trying to work with the SEAndroid security policy will observe
these giant shifts and will have to debug and merge their changes
with every Android release. Even for an Android OEM, Google’s
 05001,0001,5002,0002,500Jan/12Jan/14Jan/16Jan/18Jan/20Jan/22 02,0004,0006,0008,00010,000Jan/12Jan/14Jan/16Jan/18Jan/20Jan/22 0200,000400,000600,000800,0001,000,000Jan/15Jan/16Jan/17Jan/18Jan/19Jan/20 600650700750800850900Jan-17Feb-17Mar-17Apr-17May-17Number of typesDate 600650700750800850900Jan-17Feb-17Mar-17Apr-17May-17Number of typesDate636An Historical Analysis of the SEAndroid Policy Evolution
ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
Figure 10: Number of boxes related to media.
large changes presumably make it difficult for vendors to deviate
from AOSP’s SEAndroid policies in any meaningful way, as they
would still have to rebase and/or merge their changes. For example,
as we can see from the arrows in Figure 7, a single commit could
introduce many new types, which would represent a significant
integration challenge for an OEM trying to maintain a custom
policy.
Takeaway #7: The existence of multiple Git branches and merges
introduce significant measurement challenges, as well as signifi-
cantly impacting any third-party attempt to do their own work in
SEAndroid.
5.4 Case study: Stagefright
We now turn to examine a newsworthy security event in Android’s
history and see if we can observe evidence in the evolution of the
SEAndroid policy to respond to it.
To select the most suitable security events, we looked at 234
high-scoring Android CVEs in a third-party study [53]. 128 of them
are related to hardware and driver issues, which are beyond the
scope of SEAndroid. Next up are 62 vulnerabilities with the media
framework. There are also 22 Adobe Flash vulnerabilities, but we
cannot observe any artifacts of these in the SEAndroid policy, as
Flash is not part of AOSP. Therefore, media framework vulnera-
bilities seem like a good place for a case study. The most widely
publicized security event in the media framework, in particular,
was the “Stagefright” vulnerability.
Stagefright was found and reported to Google by security re-
searcher Joshua Drake in April 2015 [52]. Google shared the issue
with device manufacturers in May 2015, and the vulnerability was
publicly disclosed in August of that year. This vulnerability is a
simple integer overflow bug in the libstageflight library which
is used by the media framework. The attacker can inject carefully
crafted malicious code, in a media file, via any application which
uses Android’s media API, allowing the attacker to have arbitrary
malicious code execution in a context with elevated security priv-
ileges relative to any regular user-installed Android application.
Google patched the integer overflow bug and distributed the patch
in May 2015.
Figure 10 shows the number of the boxes and the number of the
rules, in log scale, with media-related subjects and objects from Jan-
uary 2015 to September 2017. Red vertical bars indicate significant
events in the history of the Stagefright vulnerability. The SEAn-
droid policy did not change much during the initial period when the
vulnerability was discovered, patched, and the fix was distributed.
Figure 11: Number of commits contributed by each organi-
zation.
However, both the number of boxes and the number of the rules
dramatically increased in early 2016, shown at arrow “A”. This was
a result of separating the media server into multiple distinct ser-
vices [10] such as mediaextractor, camera_server, mediadrm_server,
and mediacodecservice, each with more limited privileges than the
original monolithic service. Of note, all the media related services
lost the permissions to write a normal file. Additionally, they lost
the memexec permission.
Another jump, shown at arrow “B”, is related to the addition of
rules related to a new audio_server service. While the number of
rules changed was small, the number of boxes changed was much
larger, indicating the importance and reach of the changes.
Takeaway #8: SEAndroid policies are an essential mechanism for
implementing privilege separation, refactoring monolithic services
into smaller cooperating services with more limited permissions.
These policy changes are more visible in our “box” metrics than
when just looking at the number of rules.
5.5 Contributor comparison
Lastly, we perform a measurement to understand the composition
of contributors to the SEAndroid policy. The Git history associates
an email address with every commit. Ignoring the username and
focusing on the domain name, we can then associate each commit
with the author’s organization. In Figure 11, we show the number
of commits applied to each major Android release, as authored
by each organization. As might be expected, the vast bulk of the
commits are authored by Google, and Google’s commit frequency is
increasing over time, mirroring the exponentially growing numbers
of rule and boxes.
The NSA is the second most frequent committer, with a spike
of commits in the earlier Lollipop release, indicating some degree
of NSA assistance as Google moved away from the “unconfined”
domain design toward a more rigorous security policy.
We also see device and hardware manufacturers (Samsung, Intel,
LG, Sony). Each of these vendors maintains its own private policies
that they ship with their own devices. It is in a manufacturer’s
interest to contribute patches back to Google to avoid too much
drift between Google’s codebase and their own. Samsung stands
out, in this regard, for having zero visible commits in the latest
four versions of Android. (Perhaps Samsung contributed its policies
 505005,00050,000Number of rules and boxesDateBug reportedAnnouncedto publicABNumer of rulesNumer of boxes 1101001,00010,000GoogleNSASamsungTresysIntelLGLinaroMitreSonyNumber of commitsOrganization4.34.45.06.07.08.09.0637ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
B. Im et al.
to Google without sending Git pull requests. If so, a Google engi-
neer would have merged their changes by hand, and the resulting
commits would appear with a Google email address.)
The remaining organizations, Tresys, Linaro, and Mitre, repre-
sent two commercial consultancies and a Federally Funded Research
and Development Center (FFRDC) that works extensively with the
U.S. government. Tresys notably offers SELinux policy customiza-
tion as a service for paying customers [46].
Takeaway #9: Even though there are a number of non-Google con-
tributors, most of their commits are simply fixing typos or adding
missing simple rules which imply that only Google is leading the
project. In addition, all the important policy changes such as all the
arrow marks in Figures 3 and 7 are authored only by Google.
6 DISCUSSION
Next, we discuss three items related to our measurement study:
the Tizen system, the new Android Treble release, and Android for
Work.
6.1 SEAndroid vs. Smack
As we have seen, the SEAndroid policy is getting more complex
over time. Sophisticated policies may promise better security, but
they also make it challenging to reason about the configuration,
allowing innocent mistakes to creep into the design.
As a point of contrast, Tizen [28] uses a very different approach.
Just like Android, Tizen is a Linux-based operating system targeted
for mobile devices, and it uses a similar access control mechanism
to SEAndroid called Smack [40]. The biggest difference is that Tizen
doesn’t overload Unix user IDs to separate applications from one
another. Instead, all the apps for the same user use the same Unix
user ID, but with Smack labels to isolate the applications.
We performed a small-scale experiment by counting the number
of Smack rules in Tizen from its Git repository, and Figure 12 shows
the result. We have removed the Smack rules related to specific
applications to make a fair comparison with SEAndroid. We can see
that the number of rules fluctuates across versions, but it stabilizes
at roughly 2,000 in Tizen 3.0, which is radically smaller than the
number of rules in SEAndroid.
Figure 12: Number of Smack rules in Tizen releases
In Tizen 2.x, Smack is used for all the access control mechanisms
including application isolation and API permissions, with the num-
ber of rules tightly related to the number of features. Consequently,
the policy complexity is relatively high. The decrease in 2.3.1 and
increase in 2.4 in Figure 12 is simply due to the removal and addi-
tion of many OS features [25]. Tizen 3.0 [26] featured a complete
redesign of the Smack policy, providing only a minimal privilege
separation for the system resources and each application [24]: Unix
user IDs and Linux namespaces are used to isolate system services,
and a new module called Cynara [23] was added to manage per-
app API permissions (i.e., as in Android, users’ grants of specific
permissions to Tizen apps is no longer managed by the underlying
Smack system but is instead managed in a separate system). The
number of the rules in Tizen 3.0 and Tizen 4.0 is exactly the same:
2,134 rules, despite the otherwise significant changes between the
two major releases, including support for IoT devices, and coding
in C#/.NET [27].
Although there is no “correct” approach to access control config-
uration, and we take no position on whether Tizen is fundamentally
more or less secure than Android, Tizen demonstrates that MAC
policies can be deployed without the staggering complexity of mod-
ern SEAndroid policies. Of course, the very lack of fine-grained
permissions expressed in Tizen could as much represent the bene-
fits of simplicity as the pitfalls of over-simplification. Regardless,
the fact that both Android and Tizen are attempting to solve quite
similar problems in radically different ways suggests that there may
be lessons to draw from each to the benefit of the other.
6.2 Android Treble
In Android 8.0, Google introduced Treble [11] as a framework to
separate platform and manufacturer features. Treble’s main goal is
to make it easier for Google to ship updated Android systems by
creating a stable abstraction boundary between vendor features and
the Android distributions from Google. If done properly, we should
see a higher fraction of Android devices running recent releases of
Android, improving security for Android users and simplifying the
release engineering process for Android OEMs.
While a full summary of Treble is beyond the scope of this paper,
Treble does have an impact on SEAndroid. In prior releases, Android
vendors would start with Google’s AOSP SEAndroid policy and
make suitable modifications to support device-specific features,
perhaps porting changes forward from release to release. Treble
separates “vendor policies” from Google’s own system policy. Both
policies are separately compiled to a new common intermediate
language (CIL), and are then combined into a single policy as part
of the boot process. This allows Google to update its SEAndroid
policy without vendor intervention.
The AOSP version of the SEAndroid policy is effectively the same
as before, so it doesn’t impact the continuing growth of SEAndroid
policy complexity over time. But, now that vendor policies will be
separated out, as more vendors ship devices with Android 8.0 or
later, follow-on research to this paper will be able to look at vendor-
specific firmware images as opposed to AOSP releases, and such
future work will be able to make interesting comparisons between
vendors. Some vendors will inevitably make huge changes while
others change little or nothing. And, inevitably, some vendors will
introduce security flaws by enabling too many permissions. Also,
the new CIL format retains some macro and grouping structures,
allowing it to be far more amenable to analysis than the compiled
binary policies of earlier Android releases, where macros have been
completely expanded.
 05,00010,00015,0002.32.3.12.43.04.0Number of rulesVersion638An Historical Analysis of the SEAndroid Policy Evolution
ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
6.3 Android for Work
Android for Work is an enterprise security solution for “Bring-
Your-Own-Device” (BYOD) environment, which was introduced in
Android 5 and is still under active development. Android for Work
supports separated runtime environments between work applica-
tions and personal applications. This requires extensive resource
isolation, access control, and policy configuration. Knox, a similar
BYOD solution introduced by Samsung [37], also used SELinux
policies to support such access control. Android for Work would
certainly be amenable for the same sort of analysis that we did in
this paper, but the source code for it is not made available as part
of AOSP. If it does become available in the future, its evolution
over time would be an interesting subject to study, particularly as
the Android for Work developers must necessarily respond to and
integrate with changes in the larger SEAndroid policy.
7 RELATED WORK
Our work is most related to two lines of existing work: analyses