certain situations. The key idea is to abuse the fact that com-
pilers often rely on correct multiplication results for pointer
arithmetic and memory allocation sizes. One example for this
would be indexing into an array a of type elem_t: according
to the C standard, accessing element a[i] requires calculating
the address at offset i * sizeof(elem_t). Clearly, out-of-
bounds accesses arise if an attacker can fault such multipli-
cations to produce address offsets that are larger or smaller
than the architecturally deﬁned result (cf. Section III). Note
that Plundervolt ultimately breaks the processor’s ISA-level
guarantees, i.e., we assume perfectly secure code that has
been guarded against both traditional buffer overﬂows [16] as
well as state-of-the-art Spectre-style [42] transient execution
attacks.
In this section, we explore two distinct scenarios where
faulty multiplications impair memory safety guarantees in
seemingly secure code. First, we fault imul instructions
transparently emitted by the compiler to reliably produce
out-of-bounds array accesses. Next, we analyze trusted SGX
runtime libraries and locate several sensitive multiplications in
allocation size computations that could lead to heap corruption
by allocating insufﬁcient memory.
A. Faulting Array Index Addresses
We ﬁrst focus on the case where a multiplication is used
for computing the effective memory address of an array
element as follows: &a[i] = &a[0] + i * sizeof(elem_t).
However, we found that, in most cases, when the respective
type has a size that is a power of two, compilers will use left
bitshifts instead of explicit imul instructions. Furthermore,
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:04:35 UTC from IEEE Xplore.  Restrictions apply. 
1473
a) Launch Enclave Application Scenario: To illustrate
that our attack requirements can be realistically met and
exploited in compiler-generated enclave code, we constructed
an example enclave application. Our application scenario takes
advantage of the “ﬂexible launch control” [39] features in
the latest SGX processors via a custom Launch Enclave that
decides which other enclaves are allowed to be loaded on the
platform. We loosely based our implementation on the open-
source reference launch enclave code (psw/ae/ref_le) pro-
vided by Intel as part of its SGX SDK [35]. For completeness,
we refer to Appendix G for full source code and disassembly
of the relevant functions.
Our custom Launch Enclave maintains a global ﬁxed-length
array of white-listed enclave authors. Each element in this
array is a composite struct data type specifying the white-
listed enclave author’s MRSIGNER hash, plus whether or not
her enclaves are allowed access to the special platform “pro-
visioning key”. The latter restriction relates to CPU tracking
privacy concerns [14]. Speciﬁcally, the provisioning key is
the only SGX key which is directly derived from a long-term
platform-speciﬁc cryptographic secret, without ﬁrst including
an internal OWNEREPOCH register. Hence, the provisioning
key remains constant as a processor changes owners, and is
normally only available to privileged architectural enclaves
that establish long-term platform attestation key material.
as concluded from the micro-benchmark analysis presented
in Section III, we found it difﬁcult (though not impossible) to
consistently produce multiplication faults where both operands
are ≤ 0xFFFF without crashing the CPU (cf. Section V-B).
Hence, here we only consider cases in this section where si
zeof(elem_t) (cid:4)= 2x and i > 216.
The security objective of our example scenario is to en-
force a simple launch control policy: only enclave authors
whose MRSIGNER value is present in the global white list
are allowed to run production enclaves on the system (poten-
tially with an additional restriction on the provisioning key
attribute). For this, our sample Launch Enclave repeatedly
calls a check_wl_entry() function in a for loop to look
up and compare to every element in the global white list
array. Note that our sample Launch Enclave merely returns a
non-zero value if access is allowed, as we omitted the actual
computation of the cryptographic launch token for simplicity.
Evidently, after the global white list has been initialized to
all zeroes, our Launch Enclave should never return 1 when
looking up the adversary’s non-zero MRSIGNER value.
b) Launch Enclave Exploitation: Figure 5 visualizes the
high-level attack ﬂow in our application scenario. For exploita-
tion, we ﬁrst turn our attention to the check_wl_entry()
function 1 which indexes into the global white list array.
As evident from Appendix G,
this array access compiles
to an imul $0x21, %rdi, %rdi instruction, which calculates
the required offset to be added to the array base address
afterwards. In order to reliably fault 2 this product, the array
index speciﬁed in the %rdi parameter needs to be sufﬁciently
large (cf. Section III). Speciﬁcally, we experimentally estab-
lished that a white list of about 530,000 entries sufﬁces to
Attacker-controlled memory page
MRSIGNER_ADV
...
6
Page fault handler
3 AEX
4 mmap(...)
Enclave virtual memory range
1
check_wl_entry:
...
entry = wl_base + idx * 0x21
2
5 ERESUME
i
d
x
MRSIGNER_A
MRSIGNER_B
...
Fig. 5. Example scenario of a custom launch enclave where erroneous
multiplication bitﬂips allow to redirect a trusted white list array lookup to
attacker-controlled memory outside the enclave.
reliably induce predictable faults in the multiplication result
(the victim Launch Enclave almost always hits an exploitable
fault in under 100 invocations). We noticed that Plundervolt
frequently causes the higher-order bits to be ﬂipped in the
faulty product. For example, 0x80D36 * 0x21 = 0x109b3f6
predictably faults to 0xffffffffe109b417 at 2 GHz and
undervolting of -118 mV on the i3-7100U-C. Notice that ﬂip-
ping the most-signiﬁcant bits effectively causes the resulting
product to be interpreted as a large negative offset (in the order
of magnitude of the computed number) relative to the trusted
array base address. Hence, after adding the faulty product,
the resulting address now points in the large untrusted 48-bit
address space outside the enclave.
In the next stage of the attack, the victim enclave unknow-
ingly dereferences the erroneous white list element pointer
as if it was in-enclave memory. Since the virtual memory
region before the enclave base has not been allocated, this
access causes a page fault 3 to be delivered to the un-
trusted operating system. We installed a custom signal handler
4 which subsequently mmap()s the required memory page
on demand. At this point, the adversary can setup a bogus
white list entry with her own MRSIGNER hash and provision-
ing key attribute in attacker-controlled memory outside the
enclave. Note, however, that SGX clears the least signiﬁcant
12 bits in the reported page fault address to limit page fault
side-channel exposure [78]. Hence, for a successful attack,
we should still determine at which offset within the allocated
page to place the bogus MRSIGNER value. To overcome this
challenge, we observe that the multiplication bit-ﬂips induced
by Plundervolt are often very deterministic and predictable.
That is, we noticed that frequently the exact same bits are
ﬂipped by applying a constant XOR mask to the expected
product (e.g., 0xffffffffe00007e1 in the above example).
We thus conveniently pre-compute the expected fault mask by
running identical code in our own debug enclave, so that we
can afterwards accurately predict the page offset of the faulty
address by XORing the precomputed mask with the correct
product. As a ﬁnal challenge for this to work, we still require
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:04:35 UTC from IEEE Xplore.  Restrictions apply. 
1474
i.e.,
the architecturally
knowledge of the correct product,
expected array offset depending on the current loop iteration
in the enclave. However, this is actually a standard scenario in
classical side-channel attack works, which accurately recon-
struct enclave control ﬂow by, for instance, monitoring page
table access patterns [78, 73], cache accesses [58] or interrupt
counts [71, 72]. To improve reproducibility, we disclose the
current loop iteration in our current proof-of-concept attack
code (Appendix G) providing the same information without
noise.
Finally, after the bogus white list entry has been constructed
in untrusted memory, the adversary merely resumes 5 the
victim enclave. The latter will now proceed and unknowingly
dereferences 6 the attacker-controlled memory page instead
of the trusted white list entry in enclave memory. The attack
is successfully concluded when the benign Launch Enclave
eventually returns one after the adversary’s MRSIGNER and
provisioning key values were successfully matched.
B. Faulting Memory Allocation Sizes
Apart from array indices, we identiﬁed size computations
for dynamic memory allocations as another common program-
ming pattern that relies on correct multiplication results. We
showed in Section III that imul can also be faulted to produce
results that are smaller than the correct value. Clearly, heap
corruption may arise when such a faulty multiplication result
is used to allocate a contiguous chunk of heap memory that
is smaller than the expected size. Since Plundervolt corrupts
i.e., without failing the respective
multiplications silently,
malloc() library call,
the client code has no means of
determining the actual size of the allocated buffer and will
subsequently read or write out-of-bounds.
a) edger8r-generated Code: To ease secure enclave
development, the ofﬁcial Intel SGX-SDK comes with a dedi-
cated edger8r tool that generates trusted proxy bridge code to
transparently copy user arguments to and from enclave private
heap memory [35, 70]. The tool automatically generates C
code based on the ECALL function’s prototype and explicit
programmer annotations that specify pointer directions and
sizes. Consider the following (simpliﬁed) example enclave
code, where the [in,count] attributes are used to specify
that arr is an input array with cnt elements:
void vuln_ecall([in, count=cnt] struct_foo_t *arr,
size_t cnt, size_t offset)
{
}
if (offset >= cnt) return;
arr[offset].foo1 = 0xdeadbeef;
The edger8r tool will generate the following (simpliﬁed)
trusted wrapper code for parameter checking and marshalling:
...
size_t _tmp_cnt = ms->ms_cnt;
size_t _len_arr = _tmp_cnt * sizeof(struct_foo_t);
...
_in_arr = (struct_foo_t*)malloc(_len_arr);
...
vuln_ecall(_in_arr, _tmp_cnt);
The above code ﬁrst computes the expected size _len
_arr of the input array, allocates sufﬁcient space on the
enclave heap, and ﬁnally copies the input array into the
enclave before invoking the programmer’s vuln_ecall()
function. Crucially,
if a multiplication fault occurs during
calculation of the _len_arr variable, a potentially smaller
buffer will be allocated and passed on to the actual ECALL
function. Any subsequent writes or reads to the allocated buffer
may cause inadvertent enclave heap corruption or disclosure.
For example, the above vuln_ecall() implementation is
safeguarded against overﬂows in a classical sense, but can
trigger a heap overﬂow when the above multiplication is
faulted and arr is smaller than expected.
For
the
in
this
type
used
example, we
performed
have
sizeof(struct_foo_t) = 0x64. We
initial
testing based on our micro-benchmark from Section III,
established a predictable fault for this parameter, and veriﬁed
that the enclave indeed corrupts trusted heap memory when
computing on a buffer with the faulty size. Speciﬁcally, we
found that the multiplication 0x08b864 * 0x64 = 0x36807
10 reliably faults to a smaller result 0x1680710 with an
undervolting of -250 mV on our i3-7100U-A system.
For convenience during exploit development, we artiﬁcially
injected the same fault at compile time by changing the
generated edger8r code from the Makeﬁle.
b) calloc() in SGX Runtime Libraries: Another pos-
sible target for fault injection is the hidden multiplication
involved in calls to the prevalent calloc() function in the
standard C library. This function is commonly used to allocate
memory for an array where the number of elements and the
size of each element are provided as separate arguments.
According to the calloc() speciﬁcation, the resulting buffer
will have a total size equal to the product of both arguments
if the allocation succeeds. Note that optimizations of power-
of-two sizes to shifts are not applicable in this case, since the
multiplication happens with generic function parameters.
Consider the following calloc() implementation from
musl-libc, an integral part of the SGX-LKL [54] library
OS for running unmodiﬁed C applications inside enclaves5:
void *calloc(size_t m, size_t n)
{
if (n && m > (size_t)-1/n) {
errno = ENOMEM;
return 0;
}
n *= m;
void *p = malloc(n);
...
}
In this case, if the product n *= m can be faulted to produce
a smaller result, subsequent code may trigger a heap overﬂow,
eventually leading to memory leakage, corruption, or possibly
even control ﬂow redirection when neighbouring heap chunks
contain function pointers e.g., in a vtable. Based on practical
experiments with the i3-7100U-A, we artiﬁcially injected a
realistic fault for the product 0x2bffc0 * 0x8 = 0x15ffe00
5https://github.com/lsds/sgx-lkl-musl/blob/db8c09/src/malloc/malloc.c#L352
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:04:35 UTC from IEEE Xplore.  Restrictions apply. 
1475
via code rewriting in SGX-LKL’s musl-libc to cause an
insufﬁcient allocation of 0x5ffe00 bytes and a subsequent
heap overﬂow in a test enclave.
We also investigated calloc() implementations in Intel’s
SGX SDK [35] and Microsoft’s OpenEnclave [48], but inter-
estingly found that their implementations are hardened against
(traditional) integer overﬂows as follows:
if (n_elements != 0) {
req = n_elements * elem_size;
if (((n_elements | elem_size) & ˜(size_t)0xffff)
&& (req / n_elements != elem_size))
req = MAX_SIZE_T; /* force downstream failure on
overflow */
}
Note how the above code triggers a division (that would
detect the faulty product) if at least one of n_elements and
elem_size is larger than 0xFFFF. Producing faults where
both operands are ≤ 0xFFFF (cf. Section III) is possible, e.g.,
we got a fault for 0x97b5 * 0x40 on the i3-7100U-A. How-
ever, in the majority of attempts, this leads to a crash because
the CPU has to be undervolted to the point of becoming
unstable. The above check (without the restriction on only
being active for at least operand being > 0xFFFF) serves as
an example of possible software hardening countermeasures,
as discussed in Section VII.
VI. DISCUSSION AND RELATED WORK
Compared to widely studied fault injection attacks in cryp-