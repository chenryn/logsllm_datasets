  name                  VARCHAR(255),
  algorithm             VARCHAR(50),
  secret                VARCHAR(255),
  PRIMARY KEY (id)
) Engine=InnoDB CHARACTER SET 'latin1';
CREATE UNIQUE INDEX namealgoindex ON tsigkeys(name, algorithm);
exit;
```
安装 PowerDNS
```bash
apt install -y pdns-recursor pdns-server pdns-backend-mysql
```
Ubuntu 18.04 附带 systemd-resolve，你需要禁用它，并删除 resolv.conf 文件，因为它绑定到端口 53 ，这将与 PowerDNS 端口冲突。
```bash
systemctl disable systemd-resolved
systemctl stop systemd-resolved
rm /etc/resolv.conf
```
```vim
vim /etc/powerdns/pdns.d/pdns.local.gmysql.conf
launch=gmysql
gmysql-host=localhost
gmysql-dbname=powerdns      # 改成之前创建的数据库
gmysql-user=powerdns        # 改成之前创建的用户
gmysql-password=123456      # 改成之前创建的密码
```
```
sed -i "s|# local-port=.*|local-port=5300|" /etc/powerdns/pdns.conf
sed -i "s|# config-dir=.*|config-dir=/etc/powerdns|" /etc/powerdns/pdns.conf
sed -i "s|# daemon=.*|daemon=yes|" /etc/powerdns/pdns.conf
sed -i "s|# guardian=.*|guardian=yes|" /etc/powerdns/pdns.conf
sed -i "s|# master=.*|master=yes|" /etc/powerdns/pdns.conf
sed -i "s|# max-tcp-connections=.*|max-tcp-connections=20|" /etc/powerdns/pdns.conf
service pdns restart
```
此时记得将 /etc/resolv.conf 中的 nameserver 改为 127.0.0.1
```bash
cat /etc/resolv.conf
# Generated by NetworkManager
search localdomain
nameserver 127.0.0.1
```
测试
```
dig @127.0.0.1
dig www.baidu.com
pdnsutil create-zone test-zone-1
pdnsutil list-zone test-zone-1
```
#### PowerDNS-Admin
> PowerDNS-Admin 是一个具有以下高级功能的 PowerDNS Web 界面
**项目地址**
- https://github.com/ngoduykhanh/PowerDNS-Admin
**安装**
设置数据库
```sql
mysql -u root -p
CREATE DATABASE powerdnsadmin;
GRANT ALL PRIVILEGES ON powerdnsadmin.* TO 'pdnsadminuser'@'%' IDENTIFIED BY '123456';
FLUSH PRIVILEGES;
quit
```
> 注意 : 此处只是为了方便演示,生产环境下请不要使用类似 123456 这类弱口令
```bash
# Install Python 3 devevelopment package
apt install -y python3-dev
# Install required packages for building python libraries from requirements.txt file
apt install -y libmysqlclient-dev libsasl2-dev libldap2-dev libssl-dev libxml2-dev libxslt1-dev libxmlsec1-dev libffi-dev pkg-config apt-transport-https virtualenv build-essential
# Install NodeJs
curl -sL https://deb.nodesource.com/setup_10.x | bash -
apt install -y nodejs
# Install yarn to build asset files
curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add -
echo "deb https://dl.yarnpkg.com/debian/ stable main" > /etc/apt/sources.list.d/yarn.list
apt update -y
apt install -y yarn
# Checkout source code and create virtualenv
git clone https://github.com/ngoduykhanh/PowerDNS-Admin.git /opt/web/powerdns-admin
cd /opt/web/powerdns-admin
virtualenv -p python3 flask
# Activate your python3 environment and install libraries
source ./flask/bin/activate
pip install -r requirements.txt
```
Running PowerDNS-Admin
```vim
vim configs/development.py
SQLA_DB_USER = 'powerdns'   # 改成之前创建的数据库
SQLA_DB_PASSWORD = '123456' # 改成之前创建的用户
SQLA_DB_HOST = '127.0.0.1'  # 改成之前创建的密码
SQLA_DB_NAME = 'powerdns'
```
```bash
export FLASK_CONF=../configs/development.py
export FLASK_APP=powerdnsadmin/__init__.py
flask db upgrade
# generate asset files
yarn install --pure-lockfile
flask assets build
# run PowerDNS-Admin by command
./run.py
```
现在访问 ip:9191
> 注: 这对于测试环境很有效，但是对于生产环境，应该使用 gunicorn 或 uwsgi
---
### proxychains-ng
> 通过 DLL 注入,使目标程序走代理
**项目地址**
- https://github.com/rofl0r/proxychains-ng
**安装**
```bash
git clone https://github.com/rofl0r/proxychains-ng.git
cd proxychains-ng
./configure
make && make install
cp ./src/proxychains.conf /etc/proxychains.conf
cd .. && rm -rf proxychains-ng
```
**编辑配置**
```bash
vim /etc/proxychains.conf
socks5 127.0.0.1 1080   # 改成你懂的
```
**使用**
在需要代理的命令前加上 proxychains4 ,如 : `proxychains4 wget https://www.google.com/`
---
### ss5
> Socks5 代理服务器
**centos7**
```bash
yum -y install gcc gcc-c++ automake make pam-devel openldap-devel cyrus-sasl-devel openssl-devel vim
wget http://jaist.dl.sourceforge.net/project/ss5/ss5/3.8.9-8/ss5-3.8.9-8.tar.gz
tar -vzx -f ss5-3.8.9-8.tar.gz
cd ss5-3.8.9/
./configure && make && make install
chmod +x /etc/init.d/ss5
echo "auth 0.0.0.0/0 - u" > /etc/opt/ss5/ss5.conf
echo "permit u 0.0.0.0/0 - 0.0.0.0/0 - - - - -" >> /etc/opt/ss5/ss5.conf
cat /etc/opt/ss5/ss5.conf
# 自定义用户名密码
echo "test1 123456" > /etc/opt/ss5/ss5.passwd
# 自定义端口
echo 'SS5_OPTS=" -u root -b 0.0.0.0:1080"' > /etc/sysconfig/ss5
cd /root
service ss5 start
ss -tnlp
```
```
curl https://ipinfo.io --proxy socks5://test1:123456@ip:port
```
**一键安装脚本**
- [wyx176/Socks5](https://github.com/wyx176/Socks5)
- [Lozy/danted](https://github.com/Lozy/danted)
---
### SSH
> Secure Shell 是一种加密的网路传输协定，可在不安全的网路中为网路服务提供安全的传输环境。
**官网**
- https://www.ssh.com
一般主机安装完毕后 SSH 是默认开启的,使用 `/etc/init.d/ssh status` 查看主机 SSH 状态
> 注: ssh_config 为客户端连接到服务端的配置文件；sshd_config 为服务端的配置。
**Kali/Manjaro**
安装完毕后会自动启动,但是没有配置配置文件会无法登录,修改下配置文件
```vim
echo "PermitRootLogin yes" >> /etc/ssh/sshd_config
echo "PasswordAuthentication yes" >> /etc/ssh/sshd_config
```
```bash
systemctl start ssh     # 启动ssh
systemctl enable ssh    # 设置为开机自启
# 或
/etc/init.d/ssh start   # 启动ssh
update-rc.d ssh enable  # 设置为开机自启
```
若在使用工具登录时,当输完用户名密码后提示 SSH 服务器拒绝了密码,就再试一遍.
这时不要着急,只需要在 Kali 控制端口重新生成两个秘钥即可.
```bash
ssh-keygen -t dsa -f /etc/ssh/ssh_host_dsa_key
ssh-keygen -t dsa -f /etc/ssh/ssh_host_rsa_key
```
**Ubuntu**
如果没有就装一下,如果你只是想登录别的机器的 SSH 只需要安装 openssh-client (ubuntu 有默认安装,如果没有则 `apt install -y openssh-client`) ,如果要使本机开放 SSH 服务就需要安装 openssh-server
```bash
apt remove -y openssh-server
apt remove -y ssh
apt install -y openssh-client
apt install -y openssh-server
apt install -y ssh
```
```bash
service ssh restart     # 启动ssh
systemctl enable ssh    # 设置为开机自启
```
配置允许 root 远程登录
```vim
echo "PermitRootLogin yes" >> /etc/ssh/sshd_config
echo "PasswordAuthentication yes" >> /etc/ssh/sshd_config
```
**Debian**
```
apt install -y openssh-client=1:7.9p1-10+deb10u1
apt install -y openssh-server=1:7.9p1-10+deb10u1
apt install -y ssh
```
```bash
service ssh restart
systemctl enable ssh
```
配置允许 root 远程登录
```vim
echo "PermitRootLogin yes" >> /etc/ssh/sshd_config
echo "PasswordAuthentication yes" >> /etc/ssh/sshd_config
```
**配置文件**
详细的配置文件内容见 [ssh](./实验/ssh.md)
**加固**
本部分内容移步[Secure-Linux](./Secure-Linux#SSH) SSH 部分
**排错**
0. 先排查是不是客户端(自己)的问题,再排查是不是服务端(对面)的问题,最后在排查是不是传输中(中间)的问题.
1. ping 试试,如果网络层可通,那么大概率是应用层的问题,检查 SSH 配置,是否有白名单限制,或者你他娘的意大利防火墙或 selinux 就没放行
2. 假设这么一种情况,应用层配置正常,主机一切正常,但路由器/交换机在 ACL 上禁用了 SSH 的流量,这样就是传输层的问题了.内网 IPS/IDS 阻断同理.
4. 麻烦你看下账号密码是不是写错了谢谢.或者是不是限制只使用密钥登录的.
5. 注意下是不是配置文件或服务看错了是 sshd 不是 ssh
**motd**
- [Mithrilwoodrat/FBI-WARNING-in-console](https://github.com/Mithrilwoodrat/FBI-WARNING-in-console)
- [abcfy2/motd](https://github.com/abcfy2/motd)
- `vim /etc/motd`
```
                   _ooOoo_
                  o8888888o
                  88" . "88
                  (| -_- |)
                  O\  =  /O
               ____/`---'\____
             .'  \\|     |//  `.
            /  \\|||  :  |||//  \
           /  _||||| -:- |||||-  \
           |   | \\\  -  /// |   |
           | \_|  ''\---/''  |   |
           \  .-\__  `-`  ___/-. /
         ___`. .'  /--.--\  `. . __
      ."" '_/___.'  >'"".
     | | :  `- \`.;`\ _ /`;.`/ - ` : | |
     \  \ `-.   \_ __\ /__ _/   .-` /  /
======`-.____`-.___\_____/___.-`____.-'======
                   `=---='
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
           佛祖保佑       永不死机
           心外无法       法外无心
```
```
  _      `-._     `-.     `.   \      :      /   .'     .-'     _.-'      _
   `--._     `-._    `-.    `.  `.    :    .'  .'    .-'    _.-'     _.--'
        `--._    `-._   `-.   `.  \   :   /  .'   .-'   _.-'    _.--'
  `--.__     `--._   `-._  `-.  `. `. : .' .'  .-'  _.-'   _.--'     __.--'
  __    `--.__    `--._  `-._ `-. `. \:/ .' .-' _.-'  _.--'    __.--'    __
    `--..__   `--.__   `--._ `-._`-.`_=_'.-'_.-' _.--'   __.--'   __..--'
  --..__   `--..__  `--.__  `--._`-q(-_-)p-'_.--'  __.--'  __..--'   __..--
        ``--..__  `--..__ `--.__ `-'_) (_`-' __.--' __..--'  __..--''
  ...___        ``--..__ `--..__`--/__/  \--'__..--' __..--''        ___...
        ```---...___    ``--..__`_( 用于在 web 上访问终端
**项目地址**
- https://github.com/tsl0922/ttyd
**安装**
```bash
apt-get install -y cmake g++ pkg-config git vim-common libwebsockets-dev libjson-c-dev libssl-dev
git clone https://github.com/tsl0922/ttyd.git
cd ttyd && mkdir build && cd build
cmake ..
make && make install
```
**运行**
```bash
ttyd -p 8080 bash
```
现在访问 http://localhost:8080 即可
---
### vnc4server
> 为主机提供 VNC 服务
**安装**
```bash
apt-get install -y vnc4server
vncpasswd                                 # 设置vncserver密码
vncserver :1 -geometry 1024x768 -depth 24 # 设置vnc连接时窗口的大小
netstat -tnl | grep 5901                  # 查看vnc激活状态
```
windows 使用 tightVNC 测试连接,连接地址: IP:5901
---
## web服务-中间件
### ActiveMQ
> Apache ActiveMQ 是 Apache 软件基金会所研发的开放源代码消息中间件;由于 ActiveMQ 是一个纯 Java 程序,因此只需要操作系统支持 Java 虚拟机,ActiveMQ 便可执行.
**官网**
- http://activemq.apache.org/
**安装**
安装依赖 JDK
```bash
cd /
tar xzf jdk-8u212-linux-x64.tar.gz
```
```vim
vim /etc/profile
export JAVA_HOME=/root/jdk1.8.0_212
export PATH=$PATH:$JAVA_HOME/bin
```
```bash
source /etc/profile
java -version
```
下载 activemq 压缩包,这里以 5.14.5 为例
```
wget http://archive.apache.org/dist/activemq/5.14.5/apache-activemq-5.14.5-bin.tar.gz
tar -zxvf apache-activemq-5.14.5-bin.tar.gz
mv apache-activemq-5.14.5 activemq
cd activemq/bin/
./activemq start
ps -ef| grep activemq
```
```
firewall-cmd --zone=public --add-port=8161/tcp --permanent
firewall-cmd --reload