# Title: On Spatio-Temporal Constraints and Inheritance in Role-Based Access Control

## Authors
- Liang Chen
- Jason Crampton

## Affiliation
Information Security Group and Department of Mathematics  
Royal Holloway, University of London

## Abstract
Pervasive computing environments have created a need for spatial- and temporal-aware access control systems. Although several temporal, spatial, and spatio-temporal role-based access control (RBAC) models have been developed, there is currently no family of simple, expressive, and flexible models that effectively address the interaction between spatio-temporal constraints and inheritance in RBAC.

In this paper, we define three spatio-temporal models based on RBAC96, the de facto standard for RBAC, and extend these models to include activation and usage hierarchies. These models provide different authorization semantics, varying in the extent to which RBAC entities and relations are constrained by spatio-temporal restrictions. We introduce the concept of trusted entities, which can selectively override certain spatio-temporal restrictions. We also demonstrate that our spatio-temporal models are consistent and compatible with RBAC96 and the ANSI-RBAC standard, in contrast to existing models. Finally, we propose four approaches to encoding spatio-temporal requirements in practical applications, allowing access requests to be answered efficiently.

## Categories and Subject Descriptors
- D.4.6 [Security and Protection]: Access controls
- K.6.5 [Management of Computing and Information Systems]: Security and Protection

## General Terms
- Security, Theory

## Keywords
- ERBAC, RBAC, Spatio-temporal domain

## 1. Introduction
Role-based access control (RBAC) has been the subject of considerable research over the past decade and is widely accepted as an alternative to traditional discretionary and mandatory access controls. The emergence of mobile and ubiquitous computing environments poses new demands on access control mechanisms, as the decision to grant access may depend on contextual information such as the location of the user and the time at which access requests are made. For example, it may be appropriate to limit the times and places at which a particular role can be activated.

Several context-based RBAC models have been defined in recent years, each introducing extensions to the basic role-based model where components may be associated with general contextual constraints, temporal constraints, spatial constraints, or spatio-temporal constraints. However, none of these models accurately capture the interaction between spatio-temporal constraints and inheritance in RBAC. Specifically, existing models have one or more of the following limitations:
- Lack clear semantics for inheritance in the role hierarchy in the presence of spatio-temporal constraints.
- Are extremely complicated, making it difficult to design algorithms for deciding access requests.
- May contain conflicts and ambiguities among the constraints.
- Lack compatibility with RBAC96 and the closely related ANSI-RBAC standard.

In summary, existing models focus too much on syntax and too little on semantics. In this paper, we rigorously analyze spatio-temporal requirements in RBAC models. We use a graph-based formalism to define the semantics of RBAC96 and ERBAC07, providing the basis for the semantics of our subsequent models. We then define three different spatio-temporal RBAC models, motivated by simple scenarios. These models extend the basic RBAC96 model with minimal additional syntax. We also introduce the idea of trusted entities, for which spatio-temporal constraints may be ignored to handle specific scenarios. These simple, expressive, and flexible spatio-temporal RBAC models have clear, well-defined semantics and are designed to be compatible with RBAC96 and the ANSI-RBAC standard.

We extend our models to include spatio-temporal requirements for ERBAC07, which separates the role activation hierarchy and the permission usage hierarchy. We consider the implementation of our spatio-temporal RBAC models in practical applications, showing how to encode most spatio-temporal requirements using one of our models if there is no role hierarchy. If a role hierarchy is required, we demonstrate how to eliminate spatio-temporal constraints on roles by imposing restrictions on outer nodes and edges, such as users and user-role assignments. Additionally, we show how to improve the efficiency of access request checking by pre-computing spatio-temporal constraints over the transitive closure of (part of) the RBAC graph. We believe our models can be efficiently and easily implemented, in contrast to existing models.

All existing models tend to focus on the syntax of temporal and spatial constraints rather than the semantics of the model. While the syntax of such constraints will generally be application-dependent, we consider the representation of spatio-temporal constraints, distinguishing between concrete and symbolic domains. Concrete domains comprise a set of points defined by some numerically-encoded reference system, while symbolic domains comprise sets of labels, each corresponding to one or more points in a concrete domain. Our approach is considerably simpler and more general than existing work, such as GTRBAC.

The rest of the paper is organized as follows. In the next section, we recall the basic features of RBAC96 and ERBAC07 and introduce a novel graph-based formalism to define their semantics. In Section 3, we formally define the RBAC=ST and RBAC−ST models, introduce the notion of trusted entities, and demonstrate the use of RBAC96-style syntax to encode spatio-temporal RBAC models. We also illustrate how to integrate our spatio-temporal functions into the ANSI-RBAC standard. In Section 4, we introduce the ERBAC=ST and ERBAC+ST models for ERBAC07. In Section 5, we consider practical considerations in spatio-temporal RBAC models, focusing on the interaction between spatio-temporal constraints and the role hierarchy. In Section 6, we discuss possible representations of spatial and temporal domains and give concrete examples of spatial RBAC=ST and spatio-temporal ERBAC=ST. Section 7 compares our work with related work in the literature. Section 8 concludes the paper with suggestions for future work.

## 2. Preliminaries

### 2.1 RBAC96 Syntax
The RBAC96 family of models is the most well-known model for RBAC and provides the basis for the recent ANSI RBAC standard. RBAC0, the simplest RBAC96 model, introduces a set of users U, a set of sessions S, a set of roles R, a set of permissions P, a user-role assignment relation UA ⊆ U × R, and a permission-role assignment relation PA ⊆ P × R. A user u may activate a role r in a session s if there exists r ∈ R such that (u, r) ∈ UA. A user u is authorized for permission p if there exists r ∈ R such that u may activate r and (p, r) ∈ PA.

RBAC1 introduces the concept of a role hierarchy, modeled as a partial order on the set of roles (R, ≤). The role hierarchy (RH ⊆ R × R) reduces the administrative burden by reducing the number of explicit assignments in UA and PA. That is, a user u may activate a role r in session s if there exists r' ∈ R such that (u, r') ∈ UA and r ≤ r'. A user u is authorized for permission p if there exists r, r' ∈ R such that u may activate r', (p, r) ∈ PA, and r ≤ r'.

RBAC2 extends RBAC0 through the addition of access control constraints, such as separation of duty constraints and cardinality constraints. RBAC3 incorporates the features of RBAC1 and RBAC2, although it has long been known that the features of those two models are somewhat incompatible. From now on, we write RBAC96 to mean RBAC1 only; note that RBAC0 is a special case of RBAC1 in which the hierarchy relation is empty.

### 2.2 RBAC96 Semantics
We introduce a novel graph-based formulation of RBAC96, which we believe to be a simple and intuitive specification of the basic components of the RBAC96 model. This formulation can be readily extended to include spatio-temporal restrictions. We construct an acyclic, directed graph G = (V, E), where V = U ∪ R ∪ P, and E = UA ∪ PA ∪ RH. Each vertex v represents an entity, such as a user u, a role r, or a permission p in an RBAC96 system, and each directed edge e = (vi, vj) represents a relationship between two entities vi and vj. Specifically, (vi, vj) ∈ E if and only if one of the following conditions holds:
- (vi, vj) ∈ UA,
- (vj, vi) ∈ RH,
- (vj, vi) ∈ PA.

An authorization path (or au-path) between v1 and vn is a sequence of vertices v1, ..., vn such that (vi, vi+1) ∈ E, i = 1, ..., n − 1. Hence, a user u can activate a role r if there is an au-path between u and r; a role r is authorized for permission p if there is an au-path between r and p; and a user u is authorized for permission p if there is an au-path between u and p. For simplicity, we introduce the following definition.

**Definition 1.** An entity v ∈ U ∪ R is RBAC96-authorized for v' ∈ R ∪ P if and only if there exists an au-path v = v1, v2, ..., vn = v'.

### 2.3 ERBAC07 Syntax
It has been observed that there are situations where it is necessary to distinguish between role activation and permission usage. In particular, it solves certain issues that arise when there is a role hierarchy and separation of duty constraints (as in RBAC3). The ERBAC96 (extended RBAC96) model introduces a separate role activation hierarchy, a relation which is a superset of the (permission) usage hierarchy. This means that it is necessary for a user to explicitly activate certain roles to obtain authorization for the permissions associated with those roles.

Chen and Crampton recently introduced ERBAC07, which defines the activation and usage hierarchies by replacing the standard role hierarchy relation with a new relation RH = R × R × {a, u}. The activation hierarchy is denoted by RH_a = {(r, r') : (r, r', a) ∈ RH}, and the permission usage hierarchy is denoted by RH_u = {(r, r') : (r, r', u) ∈ RH}. We write ≤_a to denote the reflexive transitive closure of RH_a and ≤_u to denote the reflexive transitive closure of RH_u. In other words, the usage and activation hierarchies are modeled as two partial orderings on the set of roles R. ERBAC07 does not require that RH_u ⊆ RH_a; otherwise, it is semantically equivalent to ERBAC96.

### 2.4 ERBAC07 Semantics
We construct an acyclic, directed graph G = (V, E), where V = U ∪ R ∪ P, and E = UA ∪ PA ∪ RH_a ∪ RH_u. An activation path (or a-path) between v1 and vn is defined to be a sequence of vertices v1, ..., vn such that (v1, v2) ∈ UA and (vi+1, vi) ∈ RH_a for i = 2, ..., n − 1. A usage path (or u-path) between v1 and vn is defined to be a sequence of vertices v1, ..., vn such that (vi+1, vi) ∈ RH_u (i = 1, ..., n − 2) and (vn, vn−1) ∈ PA. In ERBAC07:
- v ∈ U may activate role v' ∈ R if and only if there exists an a-path v = v1, v2, ..., vn = v'.
- v ∈ R is authorized for permission v' ∈ P if and only if there exists a u-path v = v1, v2, ..., vn = v'.
- v ∈ U is authorized for permission v' ∈ P if and only if there exists a path v = v1, v2, ..., vi, ..., vn = v' such that vi ∈ R for some i, v1, ..., vi is an a-path, and vi, ..., vn is a u-path.

We say v1, ..., vn is an au-path in ERBAC07 if v1, ..., vn is either an a-path, or a u-path, or the concatenation of an a-path and a u-path.

**Definition 2.** An entity v ∈ U ∪ R is ERBAC07-authorized for v' ∈ R ∪ P if and only if there exists an au-path v = v1, ..., vn = v'.

## 3. Spatio-Temporal RBAC
We assume the existence of the usual RBAC96 entities: U, R, P, UA, PA, and RH. We write V to denote U ∪ R ∪ P and E to denote UA ∪ PA ∪ RH. We also assume the existence of a spatio-temporal domain D, where d ∈ D represents a point in space-time, and D' ⊆ D represents a collection of points in space-time.

### 3.1 The Standard Model
The standard spatio-temporal RBAC model (or RBAC=ST) augments the standard RBAC96 model with a function λ : V → 2^D. For v ∈ V, λ(v) ⊆ D denotes the set of points in space-time at which v is "enabled." Specifically:
- If u ∈ U, then λ(u) denotes the set of points in space-time at which u may create a session.
- If r ∈ R, then λ(r) denotes the set of points in space-time at which a role may be activated in a session.
- If p ∈ P, then λ(p) denotes the set of points in space-time at which a permission may be granted.

Given a path v1, ..., vn in the labeled graph G = (V, E, λ), we write bλ(v1, ..., vn) ⊆ D to denote the intersection of λ(vi) for all i from 1 to n. In other words, bλ(v1, ..., vn) is the set of points at which every vertex vi is enabled. When the context is clear, we will write bλ(v1, vn) for bλ(v1, ..., vn).

**Definition 3.** An entity v ∈ U ∪ R is RBAC=ST-authorized for v' ∈ R ∪ P at point d ∈ D if and only if there exists an au-path v = v1, v2, ..., vn = v' and d ∈ bλ(v, v').