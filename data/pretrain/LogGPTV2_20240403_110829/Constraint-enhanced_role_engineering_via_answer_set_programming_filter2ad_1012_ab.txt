two steps of an emergency procedure; this constraint ensures that
proper measures could be taken in an emergency by at least one
user.
Given a set C of constraints, we say γ satisﬁes C if it satisﬁes
all constraints in C.
Example 5. We give more examples to show how this language can
express a wide range of constraint idioms in the context of Example
1.
con1 Students can receive grades: {rec} ⊆ perm[stu]. This ex-
empliﬁes a constraint on roles’ permission range.
con2 If allowed to change grades, a role can also view grades:
role[chg] ⊆ role[view]. Anyone with such a role can view
grades before s/he changes them. Constraints of this type are
often meant to guarantee roles’ job functions.
con3 The capabilities to change grades are conﬁned to carl and
dave: user[chg] ⊆ {carl, dave}. This is an example
of the assignment range policy [19].
Its general form,
user[p1] ∪ ··· ∪ user[pm] ⊆ {u1,··· , un}, requires that
the permissions {p1,··· , pm} be possessed only by users
in {u1,··· , un}. A similar constraint user[p1] ∩ ··· ∩
user[pm] ⊆ {u1 ··· , un} enforces bounded safety [18], i.e.,
the users that can have all permissions {p1,··· , pm} are lim-
ited to users {u1 ··· , un}.
con4 No students can assign grades: |user[stu] ∩ user[asg]| = 0.
Note that the constraint |perm[stu] ∩ {asg}| = 0 does not
capture this requirement.
con4 is an instance of safety policy [18], as it denies the
students the permission asg. More generally, a safety pol-
icy prohibits a set of users from certain roles or permissions.
Correspondingly, the constraint |user[p] ∩ set| = 0 (respec-
tively, |user[r] ∩ set| = 0) speciﬁes that users in set ought
not to acquire the permission p (respectively, to take the role
r).
con5 All faculty members can both assign and view grades:
user[fac] ⊆ user[asg] ∩ user[view]. Note that this constraint
is different from {view, asg} ⊆ perm[fac], which is a sufﬁ-
cient condition for con5 though.
con5 is an example of availability containment policy [18],
for it assures users of permissions. A general form of this
policy, user[r] ⊆ user[p1] ∩ ··· user[pn], says that a set of
permissions {p1,··· , pn} is available to members of a role
r. On the other hand, a safety containment policy, user[p] ⊆
user[r1]∩···∩ user[rm], states that every user having a per-
mission p is assigned to a set of roles {r1,··· , rm}. For
example, the constraint user[chg] ⊆ user[dean] requires that
the permission to change grades be available to the dean.
con6 No user can both receive and assign grades. This is an in-
stance of a simple but widely used form of separation-of-
duty (sod) policy.
It can be interpreted either statically or
dynamically, corresponding to static sod (ssod) and dynamic
sod (dsod). In line with the ssod policy, a user can not have
both permissions (via any combination of roles). By contrast,
the dsod policy allows users to obtain both permissions; but
it forbids users from activating them both [9].
Consider a constraint con6 d : |role[rec] ∩ role[asg]| = 0;
it demands that any role be assigned to at most one of rec
and asg. This constraint sets the basis for the dsod policy en-
forcement. With con6 d in effect, what remains is to prevent
a user from activating both a role assigned to rec and a role
assigned to asg; this is beyond the scope of this paper.
Another constraint con6 s : |user[rec] ∩ user[asg]| = 0 is
needed to enforce the ssod policy. It states that no user has
both rec and asg, as required by the ssod policy exactly.
It can be veriﬁed that γuni satisﬁes con1 , con3 , con5 , and
con6 d, but not con2 , con4 , or con6 s.
3.2 The Problem
RCP is to, given a set C of constraints and a set Γ of conﬁgu-
rations, ﬁnd a conﬁguration that satisﬁes C and is also close to Γ.
First of all, we list and explain the assumptions.
AS1 We assume that U1 = U2 and P1 = P2 for any γ1, γ2 ∈ Γ.
As conﬁgurations in Γ are usually made for the same system,
it is safe to assume that the system has ﬁxed sets of users and
of permissions during problem solving stage. Hence, this
assumption is commonly met.
AS2 We assume that R1 = R2 for any γ1, γ2 ∈ Γ. This assump-
tion simpliﬁes the presentation of our approach. We lift this
assumption in Section 6.2.
Therefore, we may simply assume that conﬁgurations in Γ build
atop the ﬁxed sets U, R, and P. Let space(U,R,P) be the set
of all conﬁgurations that may be formed based on them; formally,
space(U,R,P) = {(cid:104)U,R,P, UA, PA(cid:105) | UA ⊆ R × U ∧ PA ⊆
R × P}.
AS3 We assume that if a conﬁguration γ0 is a solution then it
belongs to space(U,R,P).
3Given two sets A and B, A\B = {a ∈ A | a (cid:54)∈ B}.
With AS3, we only search in space(U,R,P) for a solution γ0.
Note that, despite AS3, γ0 may contain dangling roles, those not
associated with any user or permission; one can remove these roles
In other words, AS3 only requires R0 ⊆ R but not
from γ0.
R0 = R. AS3 will also be discussed in Section 6.2.
Second, given the set C of constraints, it is likely that many con-
ﬁgurations satisfy C. There has to be a measurement of conﬁgura-
tions’ quality in order to select among them. Suppose that γ0 is one
of the conﬁgurations satisfying C. The evaluation of γ0’s quality
ought to take Γ into account, as the conﬁgurations in Γ go through
changes to make γ0. Intuitively, the fewer changes are made, the
less perturbation is caused and the more cost-effective the whole
process is.
We use a measurement of closeness between Γ and γ0 to as-
sess its quality. Observe that conﬁgurations differ in their user-
role relations, role-permission, and user-permission relations. For
γ1 ∈ Γ, deﬁne the difference between γ0 and γ1 as diﬀ(γ1, γ0) =
(γ0 − γ1) ∪ (γ1 − γ0), where3
γ0 − γ1 = (UA0\UA1) ∪ (PA0\PA1) ∪ (UPA0\UPA1)
γ1 − γ0 = (UA1\UA0) ∪ (PA1\PA0) ∪ (UPA1\UPA0).
Hence, γ0 differs from γ1 in |diﬀ(γ1, γ0)| many places. We deﬁne
the distance between Γ and γ0 as
dist(Γ, γ0) =
|diﬀ(γi, γ0)|
(cid:88)
γi∈Γ
Finally, we are able to deﬁne the problem.
Deﬁnition 6. Given a constraint set C and a conﬁguration set Γ,
ﬁnd a conﬁguration γ0 such that γ0 satisﬁes C and dist(Γ, γ0) is
minimized. Denote this problem as RCP(cid:104)C, Γ(cid:105).
Example 7. Suppose that an RE tool discovers the conﬁguration
γuni in Example 1 for the university. Suppose further that secu-
rity ofﬁcers of the university require the constraints in Cuni =
{con1 , con2 , con3 , con4 , con5 , con6 s}, among which γuni sat-
isﬁes only con1 , con3 , and con5 . In this case, one may resolve
RCP(cid:104)Cuni ,{γuni}(cid:105) to reach a qualiﬁed conﬁguration, if any.
Example 8. For another example, suppose that γuni is the running
conﬁguration in the university. But an RE tool suggests that the
university migrate to another conﬁguration γ(cid:48)
uni, whose user-role
and role-permission relations are shown below.
uni = {(ta, alice), (stu, bob), (fac, carl), (dean, dave)}
(cid:48)
UA
uni = {(stu, rec), (ta, asg), (fac, asg),
(cid:48)
PA
(dean, asg), (dean, view), (dean, chg)}
Suppose again that security ofﬁcers need to enforce all constraints
in Cuni (see Example 7). Neither γuni nor γ(cid:48)
uni meets the require-
ments (as γ(cid:48)
uni does not satisfy con5 ). However, they may some-
how capture the access control policy of the university. Rather than
working out a conﬁguration from scratch, we could try to resolve
RCP(cid:104)Cuni ,{γuni , γ(cid:48)
3.3 Computational Complexity
uni}(cid:105).
RCP is NP-hard.
To show this, we will prove the NP-
completeness of its corresponding decision problem. Given a pos-
itive integer K, the decision problem of RCP(cid:104)C, Γ(cid:105), denoted as
D-RCP(cid:104)C, Γ, K(cid:105), decides whether there is a conﬁguration γ0
such that γ0 satisﬁes C and dist(Γ, γ0) ≤ K. We ﬁrst consider
a subclass where constraints in C are all quantity ones, then a sub-
class with constraints being structural, and ﬁnally a special subclass
in light of [27].
Theorem 9. D-RCP(cid:104)C, Γ, K(cid:105) is NP-complete, where constraints
in C are quantity constraints.
See Appendix A for the proof.
To show its NP-harness,
we reduce the NP-complete problem satisﬁability (SAT)
to
D-RCP(cid:104)C, Γ, K(cid:105). The idea is to use user-role assignments to
model truth assignments of Boolean variables, and quantity con-
straints to model clauses of SAT.
Theorem 10. D-RCP(cid:104)C, Γ, K(cid:105) is NP-complete, where con-
straints in C are structural constraints.
The proof is omitted due to space limits. When constraints only
take the form perm[u] = {p1,··· , pn}, the complexity result re-
mains. This implies that the problem is hard, even when set expres-
sions are limited to simple ones, which do not use ∩ or ∪ and are
semi-static.4 These constraints actually model the user-permission
relation of the role mining problem [28].
Sun et al. [27] prove NP-hardness results of several subclasses of
the Assignment Feasibility Problem (AFP); the most of them have
a counterpart of RCP with the same complexity. However, while a
subclass of AFP ([27, Lemma 11]) is in P, its counterpart subclass
of RCP is NP-hard.
Theorem 11. D-RCP(cid:104)C, Γ, K(cid:105) is NP-complete, where con-
straints in C have one of the forms: (1) |role[u] ∩ {r}| = 0, (2)
4A structural constraint s1 ⊆ s2 is semi-static if either s1 or s2
evaluates to a set of constants.
|user[r(cid:48)]| > 0, (3) user[r] ⊆ user[r(cid:48)], and (4) user[r] = U, where
{r, r(cid:48)} ⊆ R, u ∈ U, and U ⊆ U.
The theorem can be proved by adapting the proof of [27, Lemma
19]. This implies that RCP is a different problem than AFP. Fur-
ther comparison will be discussed in Section 7.
Faced with such a problem as RCP(cid:104)C, Γ(cid:105), we choose to encode
it in answer set programming (ASP). The main reasons are two-
fold. First, modern ASP solvers provide us with highly efﬁcient
inference engines, which work well in practice. Second, ASP has
a rich modeling language, including programming constructs such
as variables and aggregate operations. Consequently, the encod-
ing is easy to understand and to explain to security ofﬁcers how a
conﬁguration is selected. Moreover, it is straightforward to extend
the encoding of RCP to handle its variants, as will be discussed in
Section 6.1. We present such an encoding in Section 4.
4. REPRESENTATION IN ASP
4.1 ASP Preliminaries
ASP is a recent form of declarative programming approach to
search problems. The idea is to ﬁrst represent a search problem in a
logic program, then employ ASP solvers to compute stable models
(i.e., answer sets) of the program, and ﬁnally extract solutions of the
search problem from the answer sets. Compared with other declar-
ative approaches like SAT (SATisﬁability problem), ASP features
in its expressive modeling language. This advantage often leads to
concise representation of problems. We review the main concepts
of ASP. Readers are referred to [3, 13] for details.
An answer set program (or program for short) is a ﬁnite set of
rules of the form
a ← b1,··· , bm, not c1,··· , not cn.
(1)
where a is either an atom or ⊥, bi and cj are atoms, and not
denotes (default) negation. Besides, a is called the head of the rule
and {b1,··· , bm, not c1,··· , not cn} the body of the rule. We
say that a rule is a fact if m = 0 and n = 0. For simplicity, we
omit ← when writing facts.
In programs, variables are used to abbreviate rules of the same
pattern. The ground instantiation of a program Π, denoted as
G(Π), is a program obtained by replacing the variables with terms
from the underlying Herbrand universe of the program. An in-
terpretation A is a subset of the Herbrand base of Π. We say
that A satisﬁes a rule of the form (1) if A satisﬁes its head (i.e.,
a ∈ A) whenever A satisﬁes its body (i.e., {b1,··· , bm} ⊆ A and
{c1,··· , cn} ∩ A = ∅), and that A is an answer set of Π if A is
the minimal set (in the sense of set inclusion) that satisﬁes all rules
in G(Π)A, which is obtained from G(Π) by
• ﬁrst deleting all rules of form (1) where cj ∈ A for some
j ∈ [1, n], and
• then deleting not cj in the bodies of the remaining rules.
We use two statements of the ASP solver Clingo [13]. One is an
aggregate of the form l #count{l1,··· , ln} u. This aggregate is
true if the number of true literals in the set {l1,··· , ln} is between
l and u, inclusively. The other is an optimization statement of the
form #minimize [l1,··· , ln]. It requires that the number of true
literals in the multiset [l1,··· , ln] be minimal.
4.2 Overview
RCP(cid:104)C, Γ(cid:105) can be encoded in at least two ways. With the as-
sumptions in Section 3.2, we only search in space(U,R,P) for a
Π(Γ) = {conﬁg(γ) | γ ∈ Γ} ∪ {conﬁg(γ0)}
∪ {hold (asg(r, u, ua), γ) | (r, u) ∈ UA ∧ γ ∈ Γ}
∪ {hold (asg(r, p, pa), γ) | (r, p) ∈ PA ∧ γ ∈ Γ}
∪ {urp(x) | x ∈ U ∪ R ∪ P} ∪ {role(r) | r ∈ R}
∪ {type(ua), type(pa)}
Figure 3: Deﬁnition of Π(Γ).
solution. Since each conﬁguration therein can be seen as a subset
of R × U ∪ R × P, we can use ASP rules to guess such a subset
and thus obtain a conﬁguration denoted as γ0. Next, we deﬁne ASP
rules to check if γ0 satisﬁes C. Finally we calculate the distance
between γ0 and Γ. We use an alternative deﬁnition of distance: it
is now calculated on the basis of assignments. Denote the set of all
possible assignments R × U ∪ R × P ∪ U × P as A. For each
a ∈ A, if a holds in γ0 (i.e., a ∈ UA0 ∪ PA0 ∪ UPA0), then the
distance with respect to a is the number of conﬁgurations in Γ in
which a does not hold; otherwise, it is the number of conﬁgurations
in which a holds. For instance, suppose that Γ = {γ1, γ2, γ3} and
that a holds in γ1 and γ2, but not γ3. If a holds in γ0, then the dis-
tance with respect to a is 1 as only γ3 does not contain a; otherwise
it is 2, as both γ1 and γ2 contain a. Then, dist(Γ, γ0) is the sum of
this number for all a ∈ A. In other words, the set Γ actually puts
a price at γ0 including an assignment and at its lacking the assign-
ment. The distance is then the sum of γ0’s cost for each a ∈ A.
This encoding is concise; it uses two ASP rules for guessing and
minimizing distance. Also, it is irrelevant to |Γ|. However, it may
contain |A| many facts (before grounding), which is overwhelming
for large deployments.
Another encoding is done by modeling changes to one conﬁgu-
ration of Γ. We ﬁrst select a conﬁguration γ1 from Γ and guess a
set of changes to it; the changes would take γ1 to another conﬁgura-
tion, say γ0. We then test if γ0 satisﬁes C. Recall that the distance
between Γ and γ0 is the sum of the distance between γ and γ0 for
γ ∈ Γ. Here, the latter distance is calculated by counting the as-
signments that hold in exactly one of γ0 and γ. We minimize the