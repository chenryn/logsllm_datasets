1.  安装：
    下载地址：
    下载压缩包解压即可，Src为源码
    Tomcat要运行必须得安装jdk环境
2.  Tomcat目录结构
     bin：目录存放一些启动运行Tomcat的可执行程序和相关内容。    
     conf：存放关于Tomcat服务器的全局配置。      
       lib：
    目录存放Tomcat运行或者站点运行所需的jar包，所有在此Tomcat上的站点共享这些jar包。    
       logs：存放日志文件
       temp: 存放临时文件
     wabapps：目录是默认的站点根目录，可以更改。      
     work：目录用于在服务器运行时过度资源，简单来说，就是存储jsp、servlet翻译、编译后的结果。     
3.  启动与停止
    Windows: 双击bin/startup.bat启动， 双击bin/shutdown.bat停止
    Linux：运行bin/startup.sh启动， 运行bin/shutdown.sh停止
    启动之后产生的进程
    ![](media/image1.png){width="7.2625in"
    height="0.4701388888888889in"}
4.  
5.  
6.  
7.  
8.  
# Tomcat 核心：
## Servlet容器工作流程
![截图_20200306104709](media/image2.png){width="6.033333333333333in"
height="2.55625in"}
## Tomcat整体架构
我们知道如果要设计一个系统，首先是要了解需求，我们已经了解了
Tomcat要实现两个核心功能
1）处理 Socke连接，负责网络字节流与 Request和 Response对象的转化。
2）加载和管理servlet，以及具体处理 Request请求。
Tomcat设计了两个核心组件**连接器组件Connector（coyote实现）**和**容器组件container（catalina实现）**来分别做这两件事情。连接器（
Connector）负责对外交流，容器（ Container）负责内部处理。
![截图_20200306110610](media/image3.png){width="7.2625in"
height="3.7118055555555554in"}
## 连接器：coyote
-   coyote负责协议的解析
-   Coyote是 Tomcat的连接器框架的名称，是
    Tomcat服务器提供的供客户端访问的外部接口。客户端通过c.yote与服务器建立连接、发送请求并接受响应
-   Coyote封装了底层的网络通信（
    Socket请求及响应处理），为catalina容器提供了统一的接口，使catalina容器与具体的请求协议及工操作方式完全解耦。
-   Coyote将 Socket输入转换封装为
    Request对象，交由catalina容器进行处理，处理请求完成后，catalina通过
    Coyote提供的 Response对象将结果写入输出流。
```{=html}
```
-   Coyote作为独立的模块，只负责具体协议和IO的相关操作，与servlet规范实现没有直接关系，因此即便是
    Request和Response对象也并未实现
    Servlet规范对应的接口，而是在catalina中将他们进一步封装为ServletRequest和ServletResponse
    ![截图_20200306111329](media/image4.png){width="5.720138888888889in"
    height="3.2805555555555554in"}
## 容器：catalina
Tomcat是一个由一系列可配置的组件构成的Web容器，而catalina是
Tomcat的servlet容器。
catalina是
Servlet容器实现，后续涉及到的安全、会话、集群、管理等servlet容器
架构的各个方面。它通过松耦合的式集成
Coyote，以完成按照请求协议进行数据读写。同时，它还包括我们的启动入口、shell程序等
![截图_20200306113635](media/image5.png){width="3.8152777777777778in"
height="2.8270833333333334in"}
![截图_20200306113852](media/image6.png){width="3.040277777777778in"
height="2.5840277777777776in"}
Tomcat本质上就是一款servlet容器，因此catalina才是
Tomcat的核心，其他模块都是为catalina提供支撑的。比如通过
Coyote模块提供链接通信，Jasper模块提供Jsp引擎，
Naming提供JNDI服务，Juli提供日志服务。
catalina结构
![截图_20200306114218](media/image7.png){width="6.968055555555556in"
height="4.28125in"}
如上图所示，catalina负责管理 server，而 Server表示着整个服务器。
Server下面有多个服务 Service，每个服务都包含着多个连接器组件 Connector（
Coyote实现）和一个容器组件
Container。在Tomcat启动的时候，会初始化一个catalina的实例。
![截图_20200306115655](media/image8.png){width="7.2659722222222225in"
height="2.3333333333333335in"}
## Container结构
Tomcat设计了4种容器，分别是
Engine(引擎)、Host(主机)、Context(上下文应用)和Wrapper(具体的servlet)。这4种容器不是平行关系，而是父子关系。，
Tomcat通过一种分层的架构，使得 Servlet容器具有很好的灵活性。
![截图_20200306120158](media/image9.png){width="4.509027777777778in"
height="1.88125in"}
各个组件的含义
-   Engine(引擎)：表示整个catalina的servlet引擎，用来管理多个虚拟站点，一个
    service最多只能有一个
    ngine，但是一个引擎可包含多个Host(多个虚拟主机)
-   Host：代表一个虚拟主机，或者说一个站点，可以给tomcat配置多个虚拟主机地址，而一个虚拟主机下可包含多个
    Context。
-   Context：表示一个web应用程序，一个web应用可包含多个 Wrapper
-   Wrapper：表示一个servlet,
    Wrapper作为容器中的最底层，不能包含子容器,可以包含多个servlet
    ![](media/image7.png){width="4.439583333333333in"
    height="2.7284722222222224in"}\
    \
    \
    \
    \
    \
    \\
    \\
    \
    \
    \\
    \
    \
    \
    \
    \
    \
    \
    \
    \\
    \
    \
    \\
    \
    \
    \
    \
## Tomcat请求流程Mapper组件： 
这么多层次的容器，Tomcat是怎么确定每一个请求应该由哪个wrapper容器里的
Servlet来处理的呢？答案是， Tomcat是用
Mapper组件来完成这个任务的。Mapper组件的功能就是将用户请求的URL定位到一个servlet。
Mapper组件工作原理是：保存了web应用的配置信息，其实就是容器组件与访问路径的映射关系，比如Hst容器里配置的域名、
Context容器里的web应用路径，以及 Wrapper容器里
Servlet映射的路径，你可以想象这些配置信息就是一个多层次的Map
当一个请求到来时，
Mapper组件通过解析请求URL里的域名和路径，再到自己保存的Map里去查找，就能定位到一个servlet。请你注意，一个请求URL最后只会定位到一个
Wrapper容器，也就是一个serv1et。
下面的示意图中，就描述了当用户请求链接http://www.itcast.cn/bbs/findalt之后，是如何找到最终处理业务逻辑的servlet
![截图_20200306010019](media/image10.png){width="7.268055555555556in"
height="3.06875in"}
Tomcat目录结构
 bin：目录存放一些启动运行Tomcat的可执行程序和相关内容。    
 conf：存放关于Tomcat服务器的全局配置。      
   lib：
目录存放Tomcat运行或者站点运行所需的jar包，所有在此Tomcat上的站点共享这些jar包。    
   logs：存放日志文件
   temp: 存放临时文件
 wabapps：目录是默认的站点根目录，可以更改。      
 work：目录用于在服务器运行时过度资源，简单来说，就是存储jsp、servlet翻译、编译后的结果。 
## Tomcat 访问定位1：
将写好的java
工程servlet_demo01放入tomcat的webapps目录中![截图_20200306025743](media/image11.png){width="2.3833333333333333in"
height="0.20416666666666666in"}
文件夹Servlet_demo01中文件内容：![截图_20200306025633](media/image12.png){width="1.1875in"
height="0.1625in"}
文件夹WEB-INF中文件内容：![截图_20200306025721](media/image13.png){width="2.3493055555555555in"
height="0.4534722222222222in"}
Web.xml文件内容：![截图_20200306010404](media/image14.png){width="5.322222222222222in"
height="2.5631944444444446in"}
Tomcat 访问定位：
\
\
\
\
\
\
\
\
\
访问http://localhost:8080/servlet_demo01/bbs/findAll:
1.  根据访问地址localhost寻找服务器主机，本案例为本主机
2.  根据端口8080找到service 和connector（连接器）,
3.  根据域名localhost寻找Engine中配置了name="localhost"的Host配置
4.  该Host中定义了appBase="webapps"的参数，那么该地址的应用就去webapps目录中去寻找
5.  访问http://localhost:8080/servlet_demo01即就是访问tomcat/webapps/servlet_demo01
    1.  前面已经将写好的java 工程servlet_demo01放入tomcat的webapps目录中
    2.  servlet_demo01为java开发好的项目
6.  访问http://localhost:8080/servlet_demo01/bbs/findALL，即就是访问
    tomcat/webapps/servlet_demo01/web/WEB-INF/web.xml文件中的java类，
7.  Java类中再写了别的功能与页面
## Jasper
**Jasper简介:**对于基于JSP的web应用来说，我们可以直接在JSP页面中编写Java代码，添加第三方的标签库，以及使用EL表达式。但是无论经过何种形式的处理，最终输出到客户端的都是标准的HTML页面（包含js,css..），并不包含任何的java相关的语法。也就是说，我们可以把JSP看做是一种运行在服务端的脚本。那么服务器是如何将JSP页面转换为HTML页面的呢？
**Jasper模块：**是Tomcat的JSP核心引擎，我们知道JSP本质上是一个Servlet。Tomcat使用
Jasper对JSP语法进行解析，生成servlet并生成class字节码，用户在进行访问JSP时，会访问servlet，最终将访问的结果直接响应在浏览器端。另外，在运行的时候，Jasper还会检测JSP文件是否修改，如果修改，则会重新编译JSP文件。
**JSP（全称JavaServer Pages）：**是由Sun
Microsystems公司主导创建的一种动态网页技术标准。JSP部署于网络服务器上，可以响应客户端发送的请求，并根据请求内容动态地生成HTML、XML或其他格式文档的Web网页，然后返回给请求者。JSP技术以Java语言作为脚本语言，为用户的HTTP请求提供服务，并能与服务器上的其它Java程序共同处理复杂的业务需求。
JSP将Java代码和特定变动内容嵌入到静态的页面中，实现以静态页面为模板，动态生成其中的部分内容。JSP引入了被称为"JSP动作"的XML标签，用来调用内建功能。另外，可以创建JSP标签库，然后像使用标准HTML或XML标签一样使用它们。标签库能增强功能和服务器性能，而且不受跨平台问题的限制。JSP文件在运行时会被其编译器转换成更原始的Servlet代码。JSP编译器可以把JSP文件编译成用Java代码写的Servlet，然后再由Java编译器来编译成能快速执行的二进制机器码，也可以直接编译成二进制码。
**EL（Expression
Language）表达式：**是为了使JSP写起来更加简单。表达式语言的灵感来自于
ECMAScript 和 XPath 表达式语言，它提供了在 JSP
中简化表达式的方法，让Jsp的代码更加简化。
**Jasper作用**：
![截图_20200306044350](media/image15.png){width="5.322916666666667in"
height="2.342361111111111in"}
**运行时编译：**
Tomcat并不会在启动web应用的时候自动编译JsP文件，而是在客户端第一次请求时，才编译需要访问的Jsp文件。
**预编译**
除了运行时编译，我们还可以直接在Web应用启动时，一次性将Web应用中的所有的JSP页面一次性编译完成。在这种情况下，Web应用运行过程中，便可以不必再进行实时编译，而是直接调用JSP页面对应的
Servlet完成请求处理，从而提升系统性能
Tomcat提供了一个shell程序JspC，用于支持JSP预编译，而且在
tomcat的安装目录下提供了一个cata1ina-
tasks.xml文件声明了tomcat支持的Ant任务，因此，我们很容易使用Ant来执行Jsp预编译。（要想使用这种方式，必须得确保在此之前已经下载并安装了Apache
Ant）。
**编译：详细JSP编译源码解析了解就好，未深入研究**
编译结果文件所在地：
1.  如果在 tomcat/conf/web,xml中配置了参数
    scratchdir，则Jsp编译后的结果，就存储在该目录下
    \
    \scratchdir\
    \D:/tmp/isp/\
    \
2.  如果没有配置该选项，则会将编译后的结果，存储在tomcat安装目录下的
    work/catalina（ Engine名称）/localhost（Host名称）/
    Context名称。假设项目名称为
    jsp_demo_01，默认的目录为：work/catalina/localhost/ jsp_demo_01
    （work目录就是存储jsp、servlet翻译、编译后的结果）
3.  如果使用的是IDEA开发工具集成Tomcat访问web工程中的Jsp，编译后的结果，存放在
    C:\\Users\\Administrator\\.IntelliJIdea2019.1\\system\\tomcat\\\_project_tomcat\\work\\Catalina\\localhost\\jsp_demo_01_war_exploded\\org\\apache\\jsp
# Tomcat 服务器配置：
Tomcat服务器的配置主要集中于 tomcat/conf下的 catalina.
policy、catalina.oroperties、context.xml、 server.xml、tomcat-
users.xml、web.xml文件。
重点介绍： server.xml、tomcat- users.xml、web.xml三个文件
## server. xml文件配置
server.xml是 tomcat服务器的核心配置文件，包含了 Tomcat的
Servlet容器（catalina）的所有配置。由于配置的属性特别多，我们在这里主要讲解其中的部分更要配置
Server是server.xml的根元素，用于创建一个server实例，
默认使用的实现类是:org. apache.catalina.core. StandardServer。
Server内嵌的子元素为
Listener、GlobalNamingResources（全局命名服务）、Service（可多个）。
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--Server.xml文件配置详情\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--