        `private_key`{.literal}，则会将其复制到该位置。
    [`tls`{.literal}]{.term}
    :   使用此参数可以确保通过网络安全传输日志。如果您不需要安全打包程序，可以设置
        `tls: true`{.literal}。
    :::
2.  验证 playbook 语法：
    ``` screen
    # ansible-playbook --syntax-check playbook.yml
    ```
3.  在清单文件上运行 playbook:
    ``` screen
    # ansible-playbook -i inventory_file playbook.yml
    ```
:::
:::
::: section
::: titlepage
# []{#assembly_using-the-logging-system-role-with-tls.html#configuring-server-logging-with-tls_assembly_using-the-logging-system-role-with-tls}使用 TLS 配置服务器日志 {.title}
:::
您可以使用日志记录系统角色将 RHEL 系统登录配置为服务器，并通过运行
Ansible playbook 从带有 TLS 的远程日志记录系统接收日志。
此流程在 Ansible 清单的服务器组所有主机上配置 TLS。
::: itemizedlist
**先决条件**
-   您有权限在要在其上配置 TLS 的受管节点上运行 playbook。
-   受管节点列在控制节点上的清单文件中。
-   `ansible`{.literal} 和 `rhel-system-roles`{.literal}
    软件包安装在控制节点上。
:::
::: orderedlist
**流程**
1.  使用以下内容创建一个 `playbook.yml`{.literal} 文件：
    ``` screen
    ---
    - name: Deploying remote input and remote_files output with certs
      hosts: server
      roles:
        - rhel-system-roles.logging
      vars:
        logging_pki_files:
          - ca_cert_src: /local/path/to/ca_cert.pem
            cert_src: /local/path/to/cert.pem
            private_key_src: /local/path/to/key.pem
        logging_inputs:
          - name: input_name
            type: remote
            tcp_ports: 514
            tls: true
            permitted_clients: ['clients.example.com']
        logging_outputs:
          - name: output_name
            type: remote_files
            remote_log_path: /var/log/remote/%FROMHOST%/%PROGRAMNAME:::secpath-replace%.log
            async_writing: true
            client_count: 20
            io_buffer_size: 8192
        logging_flows:
          - name: flow_name
            inputs: [input_name]
            outputs: [output_name]
    ```
    playbook 使用以下参数：
    ::: variablelist
    [`logging_pki_files`{.literal}]{.term}
    :   您可以使用此参数配置 TLS，并且必须传递
        `ca_cert_src`{.literal}、cert`_src`{.literal} 和
        `private_key_src`{.literal} 参数。
    [`ca_cert`{.literal}]{.term}
    :   表示 CA 证书的路径。默认路径为
        `/etc/pki/tls/certs/ca.pem`{.literal}，文件名由用户设置。
    [`cert`{.literal}]{.term}
    :   表示证书路径.默认路径为
        `/etc/pki/tls/certs/server-cert.pem`{.literal}，文件名由用户设置。
    [`private_key`{.literal}]{.term}
    :   表示到私钥的路径。默认路径为
        `/etc/pki/tls/private/server-key.pem`{.literal}，文件名由用户设置。
    [`ca_cert_src`{.literal}]{.term}
    :   Reprents 本地 CA 证书文件路径，复制到目标主机上。如果指定了
        `ca_cert`{.literal}，则会将其复制到该位置。
    [`cert_src`{.literal}]{.term}
    :   修复复制到目标主机的本地证书文件路径。如果
        `指定了证书`{.literal}，则会将其复制到该位置。
    [`private_key_src`{.literal}]{.term}
    :   表示复制到目标主机上的本地密钥文件路径。如果指定了
        `private_key`{.literal}，则会将其复制到该位置。
    [`tls`{.literal}]{.term}
    :   使用此参数可以确保通过网络安全传输日志。如果您不需要安全打包程序，可以设置
        `tls: true`{.literal}。
    :::
2.  验证 playbook 语法：
    ``` screen
    # ansible-playbook --syntax-check playbook.yml
    ```
3.  在清单文件上运行 playbook:
    ``` screen
    # ansible-playbook -i inventory_file playbook.yml
    ```
:::
:::
:::
[]{#assembly_introduction-to-python.html}
::: chapter
::: titlepage
# []{#assembly_introduction-to-python.html#assembly_introduction-to-python}第 39 章 Python 简介 {.title}
:::
Python
是一款高级编程语言，支持多种编程模式，如面向对象、必备性、功能性以及流程模式。Python
具有动态语义，可用于通用编程。
通过 Red Hat Enterprise
Linux，系统中安装的许多软件包（如提供系统工具的软件包、数据分析工具或
Web 应用程序）都使用 Python 编写。要使用这些软件包，您必须安装
`python*`{.literal} 软件包。
::: section
::: titlepage
# []{#assembly_introduction-to-python.html#con_python-versions_assembly_introduction-to-python}Python 版本 {.title}
:::
两种不兼容的 Python 版本被广泛使用：Python 2.x 和 Python 3.x。RHEL 8
提供以下 Python 版本。
::: table
[]{#assembly_introduction-to-python.html#idm140142125062272}
**表 39.1. RHEL 8 中的 Python 版本**
::: table-contents
  版本                        要安装的软件包         命令示例                                    自该日期起可用   生命周期
  --------------------------- ---------------------- ------------------------------------------- ---------------- -------------
  [**Python 3.6**]{.strong}   `python3`{.literal}    `python3`{.literal}, `pip3`{.literal}       RHEL 8.0         完整 RHEL 8
  [**Python 2.7**]{.strong}   `python2`{.literal}    `python2`{.literal}, `pip2`{.literal}       RHEL 8.0         短
  [**Python 3.8**]{.strong}   `python38`{.literal}   `python3.8`{.literal}, `pip3.8`{.literal}   RHEL 8.2         短
  [**Python 3.9**]{.strong}   `python39`{.literal}   `python3.9`{.literal}, `pip3.9`{.literal}   RHEL 8.4         短
:::
:::
有关支持长度的详情，请查看 [Red Hat Enterprise Linux
生命周期](https://access.redhat.com/support/policy/updates/errata){.link}
和 [Red Hat Enterprise Linux 8 Application Streams
生命周期](https://access.redhat.com/support/policy/updates/rhel8-app-streams-life-cycle){.link}。
每个 Python
版本都以单独的模块分发，根据设计，您可以在同一个系统上并行安装多个模块。
`python38`{.literal} 和 `python39`{.literal} 模块不包含为
`python36`{.literal} 模块提供的系统工具（RPM、DNF 和 SELinux
等）的绑定。
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
安装时始终指定 Python
版本，调用它，或者与之交互。例如，在软件包和命令名称中使用
` python`{.literal} 3``{=html} 而不是 python。所有与 Python
相关的命令还应包含 version，如
`pip3`{.literal}、pip`2`{.literal}、p`ip3.8`{.literal} 或
`pip3.9`{.literal}。
默认情况下，RHEL 8 不提供未指定版本的 `python`{.literal}
命令(`/usr/bin/python`{.literal})。您可以使用 `alternatives`{.literal}
命令配置它; 具体步骤 [请查看 配置未指定版本的
Python](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/configuring_basic_system_settings/index#assembly_configuring-the-unversioned-python_configuring-basic-system-settings){.link}。除使用
`alternatives`{.literal} 命令所做的更改外，对
`/usr/bin/python`{.literal} 的任何手动更改都可能会覆盖更新。
:::
作为系统管理员，出于以下原因使用 Python 3：
::: itemizedlist
-   Python 3 代表 Python 项目的主要开发方向。
-   上游社区中的 Python 2 支持于 2020 年结束。
-   常见的 Python 库正在上游停止支持 Python 2。
-   Red Hat Enterprise Linux 8 中的 Python 2
    将具有较短的生命周期，并旨在使客户能够更加顺畅地过渡到
    `Python 3`{.literal}。
:::
对于开发人员，Python 3 比 Python 2 有以下优势：
::: itemizedlist
-   Python 3 可让您更轻松地编写表达式、可维护和正确的代码。
-   使用 Python 3 编写的代码将具有更长的寿命。
-   Python 3 具有新功能，包括
    `asyncio`{.literal}、f-strings、高级解包、仅限关键字的参数和连锁异常。
:::
但是，传统软件可能需要将 `/usr/bin/python`{.literal} 配置为 Python
2。因此，Red Hat Enterprise Linux 8 中没有发布默认的 `python`{.literal}
软件包，您可以选择将 Python 2 和 3 用作 `/usr/bin/python`{.literal}，如
[配置未指定版本的
Python](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/configuring_basic_system_settings/index#assembly_configuring-the-unversioned-python_configuring-basic-system-settings){.link}
所述。
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
Red Hat Enterprise Linux 8 中的系统工具使用内部
`platform-python`{.literal} 软件包提供的 Python 版本
3.6。红帽建议客户改为使用 `python36`{.literal} 软件包。
:::
:::
:::
[]{#assembly_installing-and-using-python.html}
::: chapter
::: titlepage
# []{#assembly_installing-and-using-python.html#assembly_installing-and-using-python}第 40 章 安装和使用 Python {.title}
:::
在 Red Hat Enterprise Linux 8 中，Python 3 分发到版本 3.6、3.8 和
3.9，由 AppStream 存储库中的
`python36`{.literal}、python38``{=html} 和 `python39`{.literal}
模块提供。
::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
### 警告 {.title}
由于模糊不清，使用未指定版本的 `python`{.literal} 命令安装或运行 Python
命令在默认情况下不起作用。始终指定 Python 版本，或使用
`alternatives`{.literal} 命令配置系统默认版本。
:::
::: section
::: titlepage
# []{#assembly_installing-and-using-python.html#proc_installing-python-3_assembly_installing-and-using-python}安装 Python 3 {.title}
:::
按照设计，您可以并行安装 RHEL 8 模块，包括
`python27`{.literal}、python`36`{.literal}、`python38`{.literal} 和
`python39`{.literal} 模块。请注意，单个模块中的多个流不支持并行安装。
您可以安装 Python 3.8 和 Python 3.9，包括为任一版本构建的软件包，与
Python 3.6 在同一系统上并行安装，但 `mod_wsgi`{.literal} 模块除外。由于
Apache HTTP 服务器的限制，系统上只能安装其中一个
`python3-mod_wsgi`{.literal}、`python38-mod_wsgi`{.literal} 或
`python39-mod_wsgi`{.literal} 软件包。
::: itemizedlist
**流程**
-   要从 `python36`{.literal} 模块安装 Python 3.6，请使用：
    ``` literallayout
    # yum install python3
    ```
    `python36:3.6`{.literal} 模块流是自动启用的。
-   要从 `python38`{.literal} 模块安装 Python 3.8，请使用：
    ``` literallayout
    # yum install python38
    ```
    `python38:3.8`{.literal} 模块流是自动启用的。
-   要从 `python39`{.literal} 模块安装 Python 3.9，请使用：
    ``` literallayout
    # yum install python39
    ```
    `python39:3.9`{.literal} 模块流是自动启用的。
:::
::: itemizedlist
**验证步骤**
-   要验证您的系统上安装的 Python 版本，请使用 `--version`{.literal}
    选项以及特定于您所需 Python 版本的 `python`{.literal} 命令。
    ::: itemizedlist
    -   对于 Python 3.6：
        ``` literallayout
        $ python3 --version
        ```
    -   对于 Python 3.8：
        ``` literallayout
        $ python3.8 --version
        ```
    -   对于 Python 3.9：
        ``` literallayout
        $ python3.9 --version
        ```
    :::
:::
::: itemizedlist
**其它资源**
-   [安装、管理和删除用户空间组件](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/installing_managing_and_removing_user-space_components/){.link}
:::
:::
::: section
::: titlepage
# []{#assembly_installing-and-using-python.html#proc_installing-additional-python-3-packages_assembly_installing-and-using-python}安装其他 Python 3 软件包 {.title}
:::
带有 Python 3.6 附加组件模块的软件包通常使用 `python3-`{.literal}
前缀，Python 3.8 的软件包包括 `python38-`{.literal} 前缀，Python 3.9
的软件包包括 `python39-`{.literal} 前缀。安装其他 Python
软件包时始终包含前缀，如下例所示。
::: itemizedlist
**流程**
-   要安装 Python 3.6 的 `Requests`{.literal} 模块，请使用：
    ``` literallayout
    # yum install python3-requests
    ```
-   要将 `Cython`{.literal} 扩展安装到 Python 3.8，请使用：
    ``` literallayout
    # yum install python38-Cython
    ```
-   要从 Python 3.9 安装 `pip`{.literal} 软件包安装程序，请使用：
    ``` literallayout
    # yum install python39-pip
    ```
:::
:::
::: section
::: titlepage
# []{#assembly_installing-and-using-python.html#proc_installing-additional-python-3-tools-for-developers_assembly_installing-and-using-python}为开发人员安装其他 Python 3 工具 {.title}