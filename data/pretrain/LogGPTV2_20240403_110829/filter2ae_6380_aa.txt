# 概述：
本篇文章主要学习有关TLS（Thread Local Storage，线程局部存储）回调函数（CallBack
Function），这种回调函数由于其特殊的特性通常会被运用于反调试技术中。本篇文章将通过分析代码，直接调试和手动创建TLS回调函数三个部分来学习有关TLS回调函数的知识。
# TLS：
首先简单了解一下有关于TLS的基础知识，根据TLS的英文全称的翻译其实可以粗略的看出来一些特性。TLS实际上是一块存储空间，这块存储空间是各个线程的独立的数据存储空间。也可以说TLS是一种变量的存储方式，这个
**变量所在的线程内是全局可访问的（可以修改进程的全局数据和静态变量）** ，但是这个变量不能被其它的线程所访问（保证数据的线程独立性）。
## IMAGE_DATA_DIRECTORY TLSDirectory：
在启用了TLS功能的PE文件中，会设置有关于TLS的TLS Table（TLS表），这个表的位置信息可以在IMAGE_OPTION_HEADER中找到：
这里的VirtualAddress指向的RVA是0x9310（对应RAW为0x7910）这个指针实际上是指向一个结构体：IMAGE_TLS_DIRECTORY
这个结构体中存储了有关于TLS模板的各个数据，根据程序编译时的位数不同分为32位和64位两种结构，具体如下：
    typedef struct _IMAGE_TLS_DIRECTORY32 {
        DWORD   StartAddressOfRawData;
        DWORD   EndAddressOfRawData;
        DWORD   AddressOfIndex;             // PDWORD
        DWORD   AddressOfCallBacks;         // PIMAGE_TLS_CALLBACK *
        DWORD   SizeOfZeroFill;
        union {
            DWORD Characteristics;
            struct {
                DWORD Reserved0 : 20;
                DWORD Alignment : 4;
                DWORD Reserved1 : 8;
            } DUMMYSTRUCTNAME;
        } DUMMYUNIONNAME;
    } IMAGE_TLS_DIRECTORY32;
    typedef IMAGE_TLS_DIRECTORY32 * PIMAGE_TLS_DIRECTORY32;
    typedef struct _IMAGE_TLS_DIRECTORY64 {
        ULONGLONG StartAddressOfRawData;
        ULONGLONG EndAddressOfRawData;
        ULONGLONG AddressOfIndex;         // PDWORD
        ULONGLONG AddressOfCallBacks;     // PIMAGE_TLS_CALLBACK *;
        DWORD SizeOfZeroFill;
        union {
            DWORD Characteristics;
            struct {
                DWORD Reserved0 : 20;
                DWORD Alignment : 4;
                DWORD Reserved1 : 8;
            } DUMMYSTRUCTNAME;
        } DUMMYUNIONNAME;
    } IMAGE_TLS_DIRECTORY64;
结构体中各个参数的意义大致如下：
  * StartAddressOfRawData：TLS模板的起始位置的VA，这个所谓的模板其实就是用于初始化TLS函数的数据
  * EndAddressOfRawData：TLS模板终止位置的VA
  * AddressOfIndex：存储TLS索引的位置
  * **AddressOfCallBacks：指向TLS注册的回调函数的函数指针(地址)数组**
  * SizeOfZeroFill：用于指定非零初始化数据后面的空白空间的大小
  * Characteristics：属性
在这些成员中最为重要的是AddressOfCallBacks，这个成员是一个指向函数地址数组的指针，这里的函数的地址就是TLS需要调用的回调函数的实际地址
# TLS回调函数：
首先简单介绍一下什么是TLS回调函数。前面有说到，在IMAGE_TLS_DIRECTORY中有一个成员AddressOfCallBacks中存储这指向TLS回调函数具体地址数组的指针，这里的的回调函数具体地址指的就是TLS回调函数。
TLS回调函数是指，每当创建/终止线程时会自动调用执行的函数（
**创建进程的主线程时也会自动调用回调函数，且回调函数的执行顺序是先于EP代码的执行，所以TLS回调函数的这个特性通常被用于反调试技术**
）由于是创建和终止线程时都会调用，所以在程序从打开到结束这个TLS回调函数会被执行两次。
## TLStest1.cpp：
下面先来看一段代码，初步了解一下TLS回调函数在编程中具体是如何使用的：
    #include 
    #pragma comment(linker, "/INCLUDE:__tls_used") //告知链接器将要使用TLS功能
    void NTAPI TLS_CALLBACK(PVOID DllHandle, DWORD Reason, PVOID Reserved) //TLS回调函数
    {
        if( IsDebuggerPresent() )
        {
            MessageBoxA(NULL, "Debugger Detected!", "TLS Callback", MB_OK);
            ExitProcess(1);
        }
    }
    #pragma data_seg(".CRT$XLX") //注册TLS回调函数
        PIMAGE_TLS_CALLBACK pTLS_CALLBACKs[] = { TLS_CALLBACK, 0 };
    #pragma data_seg()
    int main(void)
    {
        MessageBoxA(NULL, "Hello :)", "main()", MB_OK);
    }
首先要说的是TLS回调函数定义的具体模板写法，如下：
    typedef VOID (NTAPI *PIMAGE_TLS_CALLBACK)
        (
            PVOID DllHandle,
            DWORD Reason,
            PVOID Reserved
        );
这是回调函数的定义写法，但也可以向示例代码中那样直接写。
这里仔细观察回到函数的参数，会发现这个参数组成与DllMain的参数组成非常相似：
    BOOL WINAPI DllMain(
        HINSTANCE hinstDLL,
        DWORD fdwReason,
        LPVOID lpvReserved
    )
这两个函数参数的意义其实都是一样的：
  * DllHandle（hinstDLL）：模块加载地址
  * Reason（fdwReason）：TLS回调函数被调用的原因（DLL模块被加载的原因）
  * Reserved（lpvReserved）：保留字段
这里的reason组成如下：
    #define DLL_PROCESS_ATTACH  1
    #define DLL_THREAD_ATTACH   2
    #define DLL_THREAD_DETACH   3
    #define DLL_PROCESS_DETACH  0
然后就是关于这个使用组合：
    #pragma comment(linker, "/INCLUDE:__tls_used")
    '
    '
    '
    #pragma data_seg(".CRT$XLX")
        PIMAGE_TLS_CALLBACK pTLS_CALLBACKs[] = { TLS_CALLBACK, 0 };
    #pragma data_seg()
这个就是在编程时启用TLS功能并注册TLS回调函数的具体操作步骤，其中：
    #pragma comment(linker, "/INCLUDE:__tls_used")
这一句是固定句式，告知链接器该程序将要启动TLS功能，后面的：
    #pragma data_seg(".CRT$XLX")
        PIMAGE_TLS_CALLBACK pTLS_CALLBACKs[] = { TLS_CALLBACK, 0 };
    #pragma data_seg()
这一段中的data_seg告知链接器将TLS_CALLBACK放置于data数据段（共享数据段），而PIMAGE_TLS_CALLBACK是一个数组指针，这就是在设置前面提到的IMAGE_TLS_DIRECTORY结构体中AddressOfCallBacks的具体数值。
还有就是这个CRT，这个标识将采用C Runtime机制（运行时机制，具体可以再去了解），X表示名随机，L表示TLS callback
section，X可以替换为B~Y的任意字符。
上面这个写法其实在上一篇[文章](https://xz.aliyun.com/t/12018)中也有提到，也就是设置两个程序间可以进行交流的共享数据节区：
    #pragma comment(linker,"/SECTION:.SHARE,RWS")
    .
    .
    .
    #pragma data_seg(".SHARE")
        TCHAR g_szProcName[MAX_PATH] = { 0, };
    #pragma data_seg()
## 调试测试1：
现在来调试测试一下TLStest1.cpp这个程序，首先是直接运行：
这里只有这样一个窗口，但是当我们在调试器中运行这个程序时：
步进跟随这个程序，会发现程序出现的窗口与之前的窗口并不一样：
这是由于程序中的回调函数中有一个简单的反调试手段，程序调用了API函数IsDebuggerPresent判断程序当前是否处于调试状态，如果是的话就会弹出另一个窗口并退出程序。