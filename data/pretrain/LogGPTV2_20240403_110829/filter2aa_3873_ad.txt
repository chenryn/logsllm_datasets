.Vb 10
\&    use IPC::Open3;
\&    use Symbol qw(gensym);
\&    use IO::File;
\&    local *CATCHOUT = IO::File->new_tempfile;
\&    local *CATCHERR = IO::File->new_tempfile;
\&    my $pid = open3(gensym, ">&CATCHOUT", ">&CATCHERR", "cmd");
\&    waitpid($pid, 0);
\&    seek $_, 0, 0 for \e*CATCHOUT, \e*CATCHERR;
\&    while(  ) {}
\&    while(  ) {}
.Ve
.PP
But there's no real need for *both* to be tempfiles... the following
should work just as well, without deadlocking:
.PP
.Vb 9
\&    use IPC::Open3;
\&    use Symbol qw(gensym);
\&    use IO::File;
\&    local *CATCHERR = IO::File->new_tempfile;
\&    my $pid = open3(gensym, \e*CATCHOUT, ">&CATCHERR", "cmd");
\&    while(  ) {}
\&    waitpid($pid, 0);
\&    seek CATCHERR, 0, 0;
\&    while(  ) {}
.Ve
.PP
And it'll be faster, too, since we can begin processing the program's
stdout immediately, rather than waiting for the program to finish.
.PP
在上述方法中，你可以在呼叫前更改文件描述符 (file descriptor) 名称：
.PP
.Vb 2
\&    open(STDOUT, ">logfile");
\&    system("ls");
.Ve
.PP
或者使用 Bourne shell 的文件描述符重导功能：
.PP
.Vb 2
\&    $output = `$cmd 2>some_file`;
\&    open (PIPE, "cmd 2>some_file |");
.Ve
.PP
也可以用档案描述元重导功能将 STDERR 复制为 STDOUT：
.PP
.Vb 2
\&    $output = `$cmd 2>&1`;
\&    open (PIPE, "cmd 2>&1 |");
.Ve
.PP
注意你 不能 光是将 STDERR 开成 STDOUT 的复制，而不呼叫 shell来做这个 重导的工作。这样是不行的：
.PP
.Vb 2
\&    open(STDERR, ">&STDOUT");
\&    $alloutput = `cmd args`;  # stderr still escapes
.Ve
.PP
失败的原因是，open() 让 STDERR 在呼叫 open() 时往 STDOUT的方向走。然后反 向引号让 STDOUT的内容跑到一个字串变数里，但是没有改变 STDERR 的去向（它 仍然往旧的 STDOUT那里跑）。
.PP
注意，在反向引号里你 必须 使用 Bourne shell (sh(1)) 重导的语法而非 csh(1)的！至于为何 Perl 的 system()、反向引号和开管道都用 Bourne shell语法的原因，可在下址找到：\*(L"Far More Than You Ever Wanted To Know\*(R"， http://www.cpan.org/misc/olddoc/FMTEYEWTK.tgz .  要同时捕捉一个命令的 \s-1STDERR\s0 和 \s-1STDOUT\s0:
.PP
.Vb 3
\&    $output = `cmd 2>&1`;                       # either with backticks
\&    $pid = open(PH, "cmd 2>&1 |");              # or with an open pipe
\&    while () { }                            #    plus a read
.Ve
.PP
To capture a command's \s-1STDOUT\s0 but discard its \s-1STDERR:\s0
.PP
.Vb 3
\&    $output = `cmd 2>/dev/null`;                # either with backticks
\&    $pid = open(PH, "cmd 2>/dev/null |");       # or with an open pipe
\&    while () { }                            #    plus a read
.Ve
.PP
To capture a command's \s-1STDERR\s0 but discard its \s-1STDOUT:\s0
.PP
.Vb 3
\&    $output = `cmd 2>&1 1>/dev/null`;           # either with backticks
\&    $pid = open(PH, "cmd 2>&1 1>/dev/null |");  # or with an open pipe
\&    while () { }                            #    plus a read
.Ve
.PP
To exchange a command's \s-1STDOUT\s0 and \s-1STDERR\s0 in order to capture the \s-1STDERR\s0
but leave its \s-1STDOUT\s0 to come out our old \s-1STDERR:\s0
.PP
.Vb 3
\&    $output = `cmd 3>&1 1>&2 2>&3 3>&-`;        # either with backticks
\&    $pid = open(PH, "cmd 3>&1 1>&2 2>&3 3>&-|");# or with an open pipe
\&    while () { }                            #    plus a read
.Ve
.PP
To read both a command's \s-1STDOUT\s0 and its \s-1STDERR\s0 separately, it's easiest
and safest to redirect them separately to files, and then read from those
files when the program is done:
.PP
.Vb 1
\&    system("program args 1>/tmp/program.stdout 2>/tmp/program.stderr");
.Ve
.PP
Ordering is important in all these examples.  That's because the shell
processes file descriptor redirections in strictly left to right order.
.PP
.Vb 2
\&    system("prog args 1>tmpfile 2>&1");
\&    system("prog args 2>&1 1>tmpfile");
.Ve
.PP
The first command sends both standard out and standard error to the
temporary file.  The second command sends only the old standard output
there, and the old standard error shows up on the old standard out.
.Sh "为何当管道开启失败时 open()不会传回错误讯息？"
.IX Subsection "Why doesn't open() return an error when a pipe open fails?"
If the second argument to a piped \fIopen()\fR contains shell
metacharacters, perl \fIfork()\fRs, then \fIexec()\fRs a shell to decode the
metacharacters and eventually run the desired program.  If the program
couldn't be run, it's the shell that gets the message, not Perl. All
your Perl program can find out is whether the shell itself could be
successfully started.  You can still capture the shell's \s-1STDERR\s0 and
check it for error messages.  See \*(L"How can I capture \s-1STDERR\s0 from an external command?\*(R" elsewhere in this document, or use the
IPC::Open3 module.
.PP
If there are no shell metacharacters in the argument of \fIopen()\fR, Perl
runs the command directly, without using the shell, and can correctly
report whether the command started.
.Sh "在忽略返回值的上下文里使用反向引号有何不对？"
.IX Subsection "What's wrong with using backticks in a void context?"
严格说起来，没啥不对。但从程式写作严谨与否来说，这样无法写出较易维护的程式码。Perl 有多种方法可以运行外部命令。反引号只是其中一个；它收集命令的输出，在程序中加以应用。 \f(CW\*(C`system\*(C'\fR 函数是另一个，它不这样做
.PP
Writing backticks in your program sends a clear message to the readers
of your code that you wanted to collect the output of the command.
Why send a clear message that isn't true?
.PP
再看看下列这一行：
.PP
.Vb 1
\&    `cat /etc/termcap`;
.Ve
.PP
你还没有指定输出，所以它会浪费记忆体（就那么一下子)。另外你也忘了检查 \f(CW$?\fR 看看程式是否正确的执行。即使你写成
.PP
.Vb 1
\&    print `cat /etc/termcap`;
.Ve
.PP
但在大部份情况下，这本来可以、而且也应该写成
.PP
.Vb 2
\&    system("cat /etc/termcap") == 0
\&        or die "cat program failed!";
.Ve
.PP
这样可快速地得到输出（一产生出来就会得到，不用等到最后），并且检查传回值。
.PP
\&\fIsystem()\fR 同时具有直接决定是否先做 shell 万用字元 (wildcard)处理的功能， 反向引号就不行。
.Sh "如何不经过 shell处理来呼叫反向引号？"
.IX Subsection "How can I call backticks without shell processing?"
这需要些技巧。不能写成这样：
.PP
.Vb 1
\&    @ok = `grep @opts '$search_string' @filenames`;
.Ve
.PP
在 Perl 5.8.0 中，你可以使用有多个参数的 \fIopen()\fR。类似 \fIsystem()\fR 和 \fIexec()\fR 的列表形式，不会进行 shell 转义。
.PP
.Vb 3
\&   open( GREP, "-|", 'grep', @opts, $search_string, @filenames );
\&   chomp(@ok = );
\&   close GREP;
.Ve
.PP
也可以这样：
.PP
.Vb 10
\&    my @ok = ();
\&    if (open(GREP, "-|")) {
\&        while () {
\&            chomp;
\&            push(@ok, $_);
\&        }
\&        close GREP;
\&    } else {
\&        exec 'grep', @opts, $search_string, @filenames;
\&    }
.Ve
.PP
一如 system()，当你 exec() 一个序列时不会有 shell 解译的情况发生。更多示例可以从 perlipc 的 \*(L"Safe Pipe Opens\*(R" 中找到。
.PP
Note that if you're use Microsoft, no solution to this vexing issue
is even possible.  Even if Perl were to emulate \fIfork()\fR, you'd still
be stuck, because Microsoft does not have a argc/argv\-style \s-1API\s0.
.Sh "为何给了 EOF（Unix上是 ^D，MS-DOS上是 ^Z）后我的程式就不能从 STDIN 读取东西了呢？"
.IX Subsection "Why can't my script read from STDIN after I gave it EOF (^D on Unix, ^Z on MS-DOS)?"
因为某些 stdio 的 set error 和 eof 旗标需要清除。你可以用 POSIX 模组里定 义的clearerr()。这是在技术上正确的解决之道。还有一些较不保险的方法：
.IP "1" 4
.IX Item "1"
试着保存搜寻指标然后去找它，例如：
.Sp
.Vb 2
\&    $where = tell(LOG);
\&    seek(LOG, $where, 0);
.Ve
.IP "2" 4
.IX Item "2"
如果那样行不通，试着去 seek() 档案的另一部份然后再找回来。
.IP "3" 4
.IX Item "3"
如果还是行不通，试着 seek() 档案另一个相异的的部份，读点东西，再回去找。
.IP "4" 4
.IX Item "4"
如果依然不行，放弃使用 stdio 改用 sysread。
.Sh "如何把 shell程式转成 perl？"
.IX Subsection "How can I convert my shell script to perl?"
学习 Perl 然后重写。说真的，没有简单的转换方式。用 shell 做起来很笨的工 作可以用 Perl 很轻松的做到，而就是这些麻烦之处使得 shell->perl 转换程式 非常不可能写得出来。在重新撰写程式的过程里，你会认清自己真正要做的工作为 何，也希望能够跳脱 shell 的管线资料流机制 [pipeline datastream paradigm]， 这东西虽对某些事情很方便，但也常造成低效率。
.Sh "perl能处理 telnet或 ftp 会话吗？"
.IX Subsection "Can I use perl to run a telnet or ftp session?"
试试 Net::FTP、TCP::Client 和 NET::Telnet 模组（CPAN 有）。 http://www.perl.com/CPAN/scripts/netstuff/telnet.emul.shar 也有助于模拟 telnet 协定，但是 Net::Telnet 可能较容易使用。
.PP
如果你所要做的只是假装 telnet 但又不要起始 telnet 时的沟通程序，那么以下这个标准的双程序方式就可以满足你的需要了：
.PP
.Vb 12
\&    use IO::Socket;             # new in 5.004
\&    $handle = IO::Socket::INET->new('www.perl.com:80')
\&            || die "can't connect to port 80 on www.perl.com: $!";
\&    $handle->autoflush(1);
\&    if (fork()) {               # XXX: undef means failure
\&        select($handle);
\&        print while ;    # everything from stdin to socket
\&    } else {
\&        print while ;  # everything from socket to stdout
\&    }
\&    close $handle;
\&    exit;
.Ve
.Sh "如何在 Perl里达到 Expect的功能？"
.IX Subsection "How can I write expect in Perl?"
很久很久以前，有个叫做 chat2.pl 的程式库（perl 标准配备之一），但一直没 真正完工。如果遇到它的话，不要去用它。现在，你的最佳选择就是从 CPAN 来的 Expect 模块，同时它需要 CPAN 的另两个模块， IO::Pty 和 IO::Stty.