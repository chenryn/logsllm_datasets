nC · output(s7, k32 . . . k5)
output(s35, k4 . . . k0 · 015)
←−−−−−−−−−−−−−−−−−−−−
Figure 8: Megamos Crypto authentication protocol
4 Cipher Properties
This section describes several properties of the Megamos
Crypto cipher which will be later used in the attacks.
4.1 Rollback
Given a cipher state it is possible to recover its previous
state when this exists. Rolling-back the cipher is non-
trivial due to the non-linear operations in the suc func-
tion. Next we describe precisely how to rollback the ci-
pher to recover a predecessor state.
We start by rolling-back registers g and h. This com-
putation is straightforward as described in the following
deﬁnitions.
Deﬁnition 4.1. The predecessor function for the non-
linear feedback shift register H−1 : F13
2 is deﬁned
as
H−1(h0 . . . h12) = h1 . . . h11((h2 ∧ h9) ⊕ (h10 ∧ h12) ⊕ h0)
2 → F13
Deﬁnition 4.2. The predecessor function for the Galois
linear feedback shift register G−1 : F23
2 × F2 × F2 → F23
2
is deﬁned as
G−1(g0 . . . g22, i, j) = g1g2(g3⊕b)(g4⊕i)(g5⊕b)(g6⊕b)
g7 . . . g12(g13⊕b)g14g15(g16⊕b)g17 . . . g22b
where b = g0 ⊕ j
Next we describe how to rollback registers l, m and
r. A difﬁculty in doing that arises from the fact that m6
in the predecessor state is not determined. To circumvent
this issue, we need to ﬁrst guess the bit m6 and then check
whether this guess is consistent with the rest of the state.
For 18.75% of the states this condition is not met for nei-
ther m6 = 0 nor m6 = 1, which means that the state has
no predecessor. For 62.5% of the states there is only one
value of m6 satisfying this condition, which means that
they have only one predecessor state. Finally, 18.75%
of the states have two possible predecessor states, one
for m6 = 0 and one for m6 = 1. In this case both states
have to be considered as potentially being the predeces-
sor state. Given the fact that the average probability of
having two predecessors equals the probability of having
none the list of candidate predecessor states remains of a
constant size.
A precise description of how to compute a predecessor
state follows.
4.3
(Predecessor
s′ =
Deﬁnition
⟨g′, h′, l′, m′, r′⟩ be a cipher state and i ∈ F2 be an
input bit. Then, s = ⟨g, h, l, m, r⟩ is a predecessor cipher
state of s′ if it satisﬁes
state).
Let
h = H−1(h′)
g = G−1(g′, i, h12 ⊕ h8 ⊕ h2 ⊕ l′
l = l′
m6 = r′
m = m′
r = r′
1 . . . l′
0 ⊕ fr(g2(g3⊕i)g9g14g16h1) ⊕ m′
1 . . . m′
6m6
0 ⊕ fl(g0g4g6g13g18h3) ⊕ r′
1 . . . r′
6(l′
0 ⊕ fm(g1g5g10g15h0h7h) ⊕ l′
4 ⊕ m′
1
2 ⊕ m6)
6(m′
3 ⊕ g22).
4 ⊕ l′
1)
4.2 Undoing cipher initialization
In this section we show that the cipher initialization pro-
cedure can be reverted. This means that given an initial
state it is possible to recover the part of the secret key that
was used for initialization. The following describes ex-
actly how this can be achieved. We ﬁrst introduce some
auxiliary functions.
Deﬁnition 4.4. Let init−1 : F23
ﬁned as
2 × Fn+1
2 → Fn+1
2
be de-
init−1(g, x0) := g
init−1(g, x0 . . . xn) := b · init−1(G−1(g, 0, b), x1 . . . xn)
where b = g0 ⊕ x0
Deﬁnition 4.5. Let Q−1 : Fn+12
2 → Fn
2 be deﬁned as
Q−1(p0 . . . p11) := ε
Q−1(p0 . . . pn) := (p2 ⊕ p8 ⊕ p12) · Q−1(p1 . . . pn)
Proposition 4.6. Given an initial state s0 = ⟨g, h, l, m, r⟩
it is possible to compute secret key bits k40 . . . k95.
The computation of the key bits is as follows.
t := g · l · m · r
q := init−1(t0 . . .t22,t23 . . .t42) · t43
p := h · Q−1(h · q)
k40 . . . k95 := p − nC mod 256.
4.3 Entropy of the non-linear feedback shift register
First and foremost, the initialization of the 13-bit non-
linear feedback shift register (NLFSR) h is far from ideal.
The NLFSR is initialized with only 12 bits by an almost
linear function of the random nonce and the secret key.
Adding upon the fact that, naturally, as the NLFSR h is
not affected by other registers and the input, it is trivial
to compute all successor states for a given h. Therefore,
the search space for the 13-bit h register drops down to
212. Moreover, careful observation of the nC value on the
communication channel can leak information on whether
the same value has been previously used for initializing
h. For instance if the ﬁrst 13 bits of nC is the same for
two different authentication attempts, depending on the
USENIX Association  
22nd USENIX Security Symposium  711
9
rest of the bits, the attacker can conclude with a certain
conﬁdence that the same state is used for initializing h.
This weakness can be later exploited in a differential at-
tack.
5 Cryptanalysis of Megamos Crypto
This section describes a cryptanalysis of the Megamos
Crypto cipher. We ﬁrst introduce a simple cryptanaly-
sis which is easier-to-grasp and recovers the 96-bit se-
cret key with a computational complexity of 256. Then,
in Section 5.1 we reduce its computational complexity
down to 248.
traces
T
requires
two
C, output(s′
7, k32 . . . k5), output(s′
analysis
authentication
internal states s40 ∈ F56
2
suc-
This
=
cessful
⟨nC, output(s7, k32 . . . k5), output(s35, k4 . . . k0 · 015)⟩ and
T ′ = ⟨n′
35, k4 . . . k0 · 015)⟩.
Discarding from all
those
guesses which produce different 15 output bits than the
trace T which leaves 256−15 = 241 candidate states for
s40. Rolling the cipher backwards for each candidate
up to state s7, as shown in Section 4.1,
leaves—on
average—the same number of candidate states for s7,
namely 241. Each step requires guessing one input bit
ki but at the same time the output provides one bit of
information. Note that this determines a guess for key
bits k0 . . . k32. Rolling further the cipher backwards up to
state s0 requires guessing of k33 . . . k39 while no output
bits are produced. This brings the number of candidate
states for s0 to 241+7 = 248. For each candidate s0,
the remaining key bits k40 . . . k95 can be recovered by
undoing the initialization of the cipher as described in
Section 4.2. This produces 248 candidate keys k0 . . . k95.
On average,
there is only one candidate secret key
k0 . . . k95 that together with n′
C produces the trace T ′.
This is because there are only 248 candidates keys and
48 bits of information on the trace.
Time complexity on average, the aforementioned al-
gorithm has a computational complexity of approxi-
mately 256 encryptions. We have simulated an FPGA
implementation of the algorithm on a Xilinx ISE 10.1
for synthesis and place & route. The results show that
our implementation of a Megamos Crypto core covers
approximately 1% of the Xilinx Spartan 3-1000 FPGA,
the exact same chip that is employed in the COPA-
COBANA [42]. The maximum frequency that the core can
run at is 160.33 MHz, which means we can test a single
bit output in 6.237ns. Given this performance and area
ﬁgures, a rough estimation suggests we can ﬁt at least
50 Megamos Crypto cores in a Spartan 3-1000 FPGA.
Considering that there are 120 such FPGA in a COPA-
COBANA, and since we can run them at 160.33MHz, we
can run approximately 239.8 tests per second. After every
cycle, half of the candidate states are discarded, which
means that a search takes less than two days on a COPA-
COBANA.
5.1 Reducing the computational complexity
Most of the computational complexity of the cryptanal-
ysis described in Section 5 comes from iterating over all
256 internal states s40. In the following analysis we lower
this complexity to 248 by splitting the cipher state into
two and using a time-memory trade-off. The main idea
behind this optimization is to exploit the fact that com-
ponents g and h are quite independent from components
l, m and r. In fact, at each cipher step, there is only one
bit of information from l, m, r which affects g, h, namely
l1 ⊕ m6. Conversely, there are only three bits of infor-
mation from g, h that have an inﬂuence on components
l, m, r.
In order reduce the complexity of the cryptanalysis an
adversary A proceeds as follows.
2 and j ∈ F8
1. Pre-computation: only once, and for each 212 possi-
ble values of h, the adversary computes a table Th as
follows. For each g ∈ F23
2 the adversary
runs cipher components g and h one step forward.
For this, A uses j0 as a guess for l1 ⊕ m6. At this
stage A computes f0 := fl(·) fm(·) fr(·). From the
resulting g and h, A repeats this procedure another
7 times, using ji as a guess at step i and computing
a three bit value fi. At the end, she creates an entry
in the table Th of the form .
When the table is completed A sorts the table (on
f , j).
2. As before A ﬁrst eavesdrops one authentication
trace between a legitimate transponder and an im-
mobilizer. Thus A learns nC, output(s7, k32 . . . k5)
and output(s35, k4 . . . k0 · 015).
3. Choose h.
4. Next the adversary will try to recover state s40. For
each l, m, r ∈ F7
2 the adversary runs these compo-
nents 8 steps forward. At each step i she needs
to guess 3 bits fi := fl(·) fm(·) fr(·) but she will be
able to immediately discard half of these guesses
as they will not produce the correct output bit
output(s40+i, 0). At each step A will also compute
ji : l1 ⊕m6. At the end A has 221+16 = 237 bitstrings
of the form .
5. For each of these bitstrings A performs a lookup on
f0 . . . f7, j0 . . . j7 in the table Th and recovers g. On
average, half of these lookups will not have a match
in Th. In that case the candidate state is discarded,
leaving only 236 full candidate states.
6. Each of these candidate states are then rolled for-
ward another 7 steps. Only 236−7 = 229 of these
states will produce the correct output(s48, 07) bits
and the rest are discarded.
712  22nd USENIX Security Symposium 
USENIX Association
10
7. For each of these 229 states the adversary proceeds
as in Section 5, undoing the initialization and check-
ing against a second trace.
Time and resource complexity
• Pre-computation:
for building the tables Th the
adversary needs to run components g and h of
the cipher 8 steps.
This has a computational
complexity of 223+12+3 = 238 cipher steps. The
generated tables can be conveniently stored in
memory using a structure for compression like
/n/ f0/ f1/ . . . / f7/ j/g.dat. Storing all these ta-
bles require 12 terabyte of memory.
• As before, this cryptanalysis requires two success-
ful authentication traces to recover the secret key.
The most time intensive operation of this analysis is
performing the 237 lookups in the table for each of
the 212 values of h, i.e., 249 table lookups.
The time-memory trade-off proposed in this section re-
quires many indirect memory lookups and is therefore
difﬁcult to mount in practice with ordinary consumer
hardware.
6 Partial Key-Update Attack
As it was described in Section 3.2, when the transponder
is not locked, the Megamos Crypto transponder does not
require authentication in order to write to memory. This
makes it vulnerable to a trivial denial of service attack.
An adversary just needs to ﬂip one bit of the secret key
of the transponder to disable it.
Besides this obvious weakness, there is another weak-
ness regarding the way in which the secret key is written
to the transponder. The secret key of Megamos Crypto is
96 bits long. As described in Section 3.1, these 96 bits
are stored in 6 memory blocks of 16 bits each (blocks 4
to 9), see Figure 4. It is only possible to write one block
at a time to the transponder. This constitutes a serious
weakness since a secure key-update must be an atomic
operation.
Next, we mount an attack which exploits this weak-
ness to recover the secret key. For this attack we assume
that an adversary A is able communicate with the car
and transponder. She proceeds as follows.
1. The adversary ﬁrst eavesdrops a successful authen-
tication trace, obtaining nC and aC from the car.
2. Then, for k = 0 to 216 − 1 the adversary writes k
on memory block 4 of the transponder, where key
bits k0 . . . k15 are stored. After each write com-
mand A initiates an authentication attempt with the
transponder, replaying nC and aC (remember that
the transponder does not challenge the car). For one
value of k the transponder will accept aC and give
an answer. Then A knows that k0 . . . k15 = k.
3. The adversary proceeds similarly for blocks 5 . . . 9
thus recovering the complete secret key.
Attack complexity this attack requires 6 × 216 key-
updates and the same amount of authentication attempts.
This takes approximately 25 minutes for each block
which adds up to a total of two and a half hours.
6.1 Optimizing the attack
The above attack is very powerful, in the worst case, the
attacker needs to update the key on the transponder and
make an authentication attempt 216 times. However, the
same attack can be applied with only one key-update and
216 authentication attempts, by choosing carefully the
value of nC. The optimized attack can be mounted as
follows:
1. As before, the adversary ﬁrst eavesdrops a success-