This finding is significant anDd indicates that stephanie is a powerful account.
When we enumerated the Management Group, we discovered that jen was its only member. As an
experiment to show the power of misconfigured object permissions, let’s try to use our
permissions as stephanie to add ourselves to this group with net.exe.
PS C:\Tools> net group "Management Department" stephanie /add /domain
The request will be processed at a domain controller for domain corp.com.
The command completed successfully.
Listing 773 - Using “net.exe” to add ourselves to domain group
Based on the output, we should now be a member of the group. We can verify this with Get-
NetGroup.
PS C:\Tools> Get-NetGroup "Management Department" | select member
member
------
{CN=jen,CN=Users,DC=corp,DC=com, CN=stephanie,CN=Users,DC=corp,DC=com}
Listing 774 - Running “Get-NetGroup” to enumerate “Management Department”
This reveals that jen is no longer the sole member of the group and that we have successfully
added our stephanie user in there as well.
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 724
Made in Morocco
Penetration Testing with Kali Linux
Now that we have abused the GenericAll permission, let’s use it to clean up after ourselves by
removing our user from the group:
PS C:\Tools> net group "Management Department" stephanie /del /domain
The request will be processed at a domain controller for domain corp.com.
The command completed successfully.
Listing 775 - Using “net.exe” to remove ourselves from domain group
Once again we can use PowerView to verify that jen is the sole member of the group:
PS C:\Tools> Get-NetGroup "Management Department" | select member
member
------
CN=jen,CN=Users,DC=corp,DC=com y
Listing 776 - Running “Get-NetGroup” to verify that our user is removed from domain group
Great, the cleanup was successful. k
From a system administrator perspective, managing permissions in Active Directory can be a
s
tough task, especially in complex environments. Weak permissions such as the one we saw here
are often the go-to vectors for attackers since it can often help us escalate our privileges within
the domain. o
In this particular case, we enumerated the Management Group object specifically and leveraged
n
stephanie’s GenericAll to add our own user to the group. Although it didn’t grant us additional
domain privileges, this exercise demonstrated the process of discovering and abusing the vast
array of permissions that we can levierage in real-world engagements.
z
21.3.5 Enumerating Domain Shares
D
To wrap up our manual enumeration discussion, we’ll shift our focus to domain shares. Domain
shares often contain critical information about the environment, which we can use to our
advantage.
We’ll use PowerView’s Find-DomainShare function to find the shares in the domain. We could
also add the -CheckShareAccess flag to display shares only available to us. However, we’ll skip
this flag for now to return a full list, including shares we may target later. Note that it may take a
few moments for PowerView to find the shares and list them.
PS C:\Tools> Find-DomainShare
Name Type Remark ComputerName
---- ---- ------ ------------
ADMIN$ 2147483648 Remote Admin DC1.corp.com
C$ 2147483648 Default share DC1.corp.com
IPC$ 2147483651 Remote IPC DC1.corp.com
NETLOGON 0 Logon server share DC1.corp.com
SYSVOL 0 Logon server share DC1.corp.com
ADMIN$ 2147483648 Remote Admin web04.corp.com
backup 0 web04.corp.com
C$ 2147483648 Default share web04.corp.com
IPC$ 2147483651 Remote IPC web04.corp.com
ADMIN$ 2147483648 Remote Admin FILES04.corp.com
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 725
Made in Morocco
Penetration Testing with Kali Linux
C 0 FILES04.corp.com
C$ 2147483648 Default share FILES04.corp.com
docshare 0 Documentation purposes FILES04.corp.com
IPC$ 2147483651 Remote IPC FILES04.corp.com
Tools 0 FILES04.corp.com
Users 0 FILES04.corp.com
Windows 0 FILES04.corp.com
ADMIN$ 2147483648 Remote Admin client74.corp.com
C$ 2147483648 Default share client74.corp.com
IPC$ 2147483651 Remote IPC client74.corp.com
ADMIN$ 2147483648 Remote Admin client75.corp.com
C$ 2147483648 Default share client75.corp.com
IPC$ 2147483651 Remote IPC client75.corp.com
sharing 0 client75.corp.com
Listing 777 - Domain Share Query
y
Listing 777 reveals shares from three different servers. Although some of these are default
domain shares, we should investigate each of them in search of interesting information.
k
In this instance, we’ll first focus on SYSVOL,1055 as it may include files and folders that reside on
the domain controller itself. This particular share is typically used for various domain policies and
s
scripts. By default, the SYSVOL folder is mapped to %SystemRoot%\SYSVOL\Sysvol\domain-
name on the domain controller and every domain user has access to it.
o
PS C:\Tools> ls \\dc1.corp.com\sysvol\corp.com\
n
Directory: \\dc1.corp.com\sysvol\corp.com
Mode LastWriteTime Length Name
i
---- ------------- ------ ----
z
d----- 9/21/2022 1:11 AM Policies
d----- 9/2/2022 4:08 PM scripts
DListing 778 - Listing contents of the SYSVOL share
During an assessment, we should investigate every folder we discover in search of interesting
items. For now, let’s examine the Policies folder:
PS C:\Tools> ls \\dc1.corp.com\sysvol\corp.com\Policies\
Directory: \\dc1.corp.com\sysvol\corp.com\Policies
Mode LastWriteTime Length Name
---- ------------- ------ ----
d----- 9/21/2022 1:13 AM oldpolicy
d----- 9/2/2022 4:08 PM {31B2F340-016D-11D2-945F-
00C04FB984F9}
d----- 9/2/2022 4:08 PM {6AC1786C-016F-11D2-945F-
00C04fB984F9}
Listing 779 - Listing contents of the “SYSVOLshare”
All the folders are potentially interesting, but we’ll explore oldpolicy first. Within it, as shown in
Listing 780, we find a file named old-policy-backup.xml:
1055 (Microsoft, 2015), https://social.technet.microsoft.com/wiki/contents/articles/24160.active-directory-back-to-basics-sysvol.aspx
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 726
Made in Morocco
Penetration Testing with Kali Linux
PS C:\Tools> cat \\dc1.corp.com\sysvol\corp.com\Policies\oldpolicy\old-policy-
backup.xml
s
Listing 780 - Checking contentso of old-policy-backup.xml file
Due to the naming of the folder and the name of the file itself, it appears that this is an older
domain policy file. This is a common artifanct on domain shares as system administrators often
forget them when implementing new policies. In this particular case, the XML file describes an old
policy (helpful for learning more about the current policies) and an encrypted password for the
i
local built-in Administrator account. The encrypted password could be extremely valuable for us.
z
Historically, system administrators often changed local workstation passwords through Group
Policy Preferences (GPP).105D6
However, even though GPP-stored passwords are encrypted with AES-256, the private key for the
encryption has been posted on MSDN.1057 We can use this key to decrypt these encrypted
passwords. In this case, we’ll use the gpp-decrypt1058 ruby script in Kali Linux that decrypts a
given GPP encrypted string:
kali@kali:~$ gpp-decrypt "+bsY0V3d4/KgX3VJdO/vyepPfAN1zMFTiQDApgR92JE"
P@$$w0rd
Listing 781 - Using gpp-decrypt to decrypt the password
As indicated in Listing 781, we successfully decrypted the password and we will make a note of
this in our documentation.
Listing 777 also revealed other shares of potential interest. Let’s check out docshare on
FILES04.corp.com (which is not a default share).
1056 (Microsoft, 2016), https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-r2-and-
2012/dn581922(v=ws.11)
1057 (Microsoft, 2019), https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-gppref/2c15cbf0-f086-4c74-8b70-
1f2fa45dd4be?redirectedfrom=MSDN#endNote2
1058 (Kali.orc, 2022), https://www.kali.org/tools/gpp-decrypt/
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 727
Made in Morocco
Penetration Testing with Kali Linux
PS C:\Tools> ls \\FILES04\docshare
Directory: \\FILES04\docshare
Mode LastWriteTime Length Name
---- ------------- ------ ----
d----- 9/21/2022 2:02 AM docs
Listing 782 - Listing the contents of docsare
Farther in the folder structure, we find a do-not-share folder that contains start-email.txt:
PS C:\Tools> ls \\FILES04\docshare\docs\do-not-share
Directory: \\FILES04\docshare\docs\do-not-share
Mode LastWriteTime Length Name y
---- ------------- ------ ----
-a---- 9/21/2022 2:02 AM 1142 start-email.txt
k
Listing 783 - Listing the contents of do-not-share
Although this is a very strange name for a folder that is in fact shared, let’s check out the content
s
of the file:
PS C:\Tools> cat \\FILES04\docshare\docs\do-noot-share\start-email.txt
Hi Jeff,
We are excited to have you on the team nhere in Corp. As Pete mentioned, we have been
without a system administrator
since Dennis left, and we are very happy to have you on board.
i
Pete mentioned that you had sozme issues logging in to your Corp account, so I'm
sending this email to you on your personal address.
D
The username I'm sure you already know, but here you have the brand new auto generated
password as well: HenchmanPutridBonbon11
As you may be aware, we are taking security more seriously now after the previous
breach, so please change the password at first login.
Best Regards
Stephanie
...............
Hey Stephanie,
Thank you for the warm welcome. I heard about the previous breach and that Dennis left
the company.
Fortunately he gave me a great deal of documentation to go through, although in paper
format. I'm in the
process of digitalizing the documentation so we can all share the knowledge. For now,
you can find it in
the shared folder on the file server.
Thank you for reminding me to change the password, I will do so at the earliest
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 728
Made in Morocco
Penetration Testing with Kali Linux
convenience.
Best regards
Jeff
Listing 784 - Checking the “start-email.txt” file
According to the text in this file, jeff stored an email with a possible cleartext password:
HenchmanPutridBonbon11! Although the password may have been changed, we will make a note
of it in our documentation. Between this password and the password we discovered earlier, we’re
building a rough profile of the password policy used for both users and computers in the
organization. We could use this to create specific wordlists that we can use for password
guessing and brute force, if needed.
21.4 Active Directory - Automated Enumeration
y
This Learning Unit covers the following Learning Objectives:
• Collect domain data using SharpHound k
• Analyze the data using BloodHound
s
As we’ve seen so far in this Module, our manual enumeration can be relatively time consuming
and can generate a wealth of information that cano be difficult to organize.
Although it is important to understand the concepts of manual enumeration, we can also leverage
automated tools to speed up the enumerantion process and quickly reveal possible attack paths,
especially in large environments. Manual and automated tools each have their merits, and most
professionals leverage a combination of the two in real-world engagements.
i
Some automated tools, like PingCzastle,1059 generate gorgeous reports although most require paid
licenses for commercial use. In our case, we will focus on BloodHound,1060 an excellent free tool
that’s extremely useful for aDnalyzing AD environments.
It’s worth noting that automated tools generate a great deal of network traffic and many
administrators will likely recognize a spike in traffic as we run these tools.
21.4.1 Collecting Data with SharpHound
We’ll use BloodHound in the next section to analyze, organize and present the data, and the
companion data collection tool, SharpHound1061 to collect the data. SharpHound is written in C#
and uses Windows API functions and LDAP namespace functions similar to those we used
manually in the previous sections. For example, SharpHound will attempt to use
NetWkstaUserEnum1062 and NetSessionEnum1063 to enumerate logged-on sessions, just as we did
earlier. It will also run queries against the Remote Registry service, which we also leveraged
earlier.
1059 (PingCastle, 2022), https://www.pingcastle.com/
1060 (Specter Ops, 2022), https://bloodhound.readthedocs.io/en/latest/
1061 (Specter Ops, 2022), https://bloodhound.readthedocs.io/en/latest/data-collection/sharphound.html
1062 (Microsoft, 2021), https://learn.microsoft.com/en-us/windows/win32/api/lmwksta/nf-lmwksta-netwkstauserenum
1063 (Microsoft, 2022), https://learn.microsoft.com/en-us/windows/win32/api/lmshare/nf-lmshare-netsessionenum
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 729
Made in Morocco
Penetration Testing with Kali Linux
It’s often best to combine automatic and manual enumeration techniques when
assessing Active Directory. Even though we could theoretically gather the same
information with a manual approach, graphical relationships often reveal
otherwise unnoticed attack paths.
Let’s get SharpHound up and running.
SharpHound is available in a few different formats. We can compile it ourselves, use an already
compiled executable, or use it as a PowerShell script. In our case, we will use the PowerShell
script that is located in C:\Tools on CLIENT75. First, let’s open a PowerShell window and import
the script to memory:
PS C:\Tools> Import-Module .\Sharphound.ps1 y
Listing 785 - Importing the SharpHound script to memory
k
With SharpHound imported, we can now start collecting domain data. However, in order to run
SharpHound, we must first run Invoke-BloodHound. This is not intuitive since we’re only running
SharpHound at this stage. Let’s invoke Get-Help to learn smore about this command.
PS C:\Tools> Get-Help Invoke-BloodHound
o
NAME
Invoke-BloodHound
n
SYNOPSIS
Runs the BloodHound C# Ingesitor using reflection. The assembly is stored in this
file.
z
SYNTAX D
Invoke-BloodHound [-CollectionMethod ] [-Domain ] [-
SearchForest] [-Stealth] [-LdapFilter ] [-DistinguishedName
] [-ComputerFile ] [-OutputDirectory ] [-OutputPrefix
] [-CacheName ] [-MemCache] [-RebuildCache]
[-RandomFilenames] [-ZipFilename ] [-NoZip] [-ZipPassword ] [-
TrackComputerCalls] [-PrettyPrint] [-LdapUsername ]
[-LdapPassword ] [-DomainController ] [-LdapPort ] [-
SecureLdap] [-DisableCertVerification] [-DisableSigning]
[-SkipPortCheck] [-PortCheckTimeout ] [-SkipPasswordCheck] [-ExcludeDCs] [-
Throttle ] [-Jitter ] [-Threads ]