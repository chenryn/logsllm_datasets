**作者：VLab扫地僧@墨云科技VLab Team  
原文链接：**
## **漏洞概述**
Spring Cloud Function 是基于Spring Boot
的函数计算框架（FaaS），该项目提供了一个通用的模型，用于在各种平台上部署基于函数的软件，包括像 Amazon AWS Lambda 这样的
FaaS（函数即服务，function as a
service）平台。它抽象出所有传输细节和基础架构，允许开发人员保留所有熟悉的工具和流程，并专注于业务逻辑。
在版本3.0.0到当前最新版本3.2.2(commit dc5128b)，默认配置下，都存在Spring Cloud Function
SpEL表达式注入漏洞。
## **漏洞复现**
在IDEA中选择新建项目，然后选择`Spring Initializr`，输入随机项目名称，然后选择java版本和jdk版本后点击下一步。
选择`Spring Web`和`Function`作为依赖项，点击完成。
漏洞环境就搭建完成。因当前官方还未发布新版本，所以最新版本3.2.2也是存在漏洞的，若在官方出新版本后想要复现此漏洞，那么需要修改pom中`spring-cloud-function-web`的版本为3.2.2，如下图所示：
确认项目中的`spring-cloud-function-web`是存在漏洞版本后，就可以直接启动项目了，无需进行任何修改。
然后对本地8080端口发送payload即可。
## **漏洞分析**
先看git提交记录，
，在提交描述中，明确指出修复了`RoutingFunction` SpEL代码注入漏洞，并且可以看到目前只更新了两个文件，其中一个文件仅为单元测试。
在测试用例中也清楚写明了漏洞位置以及相关测试Payload。
通过测试用例可知，在给`Spring Cloud
Function`的web服务发送包的时候，加一个相关的Header信息，然后附上SpEL表达式即可执行命令。
在文件`org.springframework.cloud.function.context.config.RoutingFunction`中，请求进入到`apply`方法，接着调用了`route`方法，然后通过判断特定的消息头信息是否为空，如果不为空则调用`functionFromExpression`方法。
因调用到了SpEL对`routingExpression`进行解析，从而导致了SpEL表达式注入。
整个逻辑中由于完全信任从最开始传入的header信息，并且在解析SpEL表达式时候的`evalContext`使用的是功能更强同时安全隐患较大的`StandardEcalutionContext`
在官方最新的修补文件中，可以看到新增了`headerEvalContext`对象，该对象所对应的是使用了仅支持最基本功能的`SimpleEvaluationContext`。
且在调用`functionFromExpression`方法的时候新增了一个`isViaHead`布尔类型的参数，用来判断该值是否是取自消息的`header`中，如果是则使用`headerEvalContext`对象来解析SpEL表达式。
## **修复建议**
建议您在升级前做好数据备份工作，避免出现意外。目前SpringCloud
Function官方已针对此漏洞进行修复，但还没有发布正式版本，可拉取最新修复代码重新编译打包进行临时修补。
官方已发布修复补丁参考地址：
* * *