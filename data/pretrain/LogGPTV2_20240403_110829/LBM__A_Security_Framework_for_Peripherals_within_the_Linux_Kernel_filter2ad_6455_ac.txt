12
13
14
15
16
17
18
19 RET:
20
if (kmod(subsys, dir, pkt) == DROP) {
} else { /* Ditto for the RX */ }
for_each_kmod_in_db[subsys][dir] {
res = DROP;
goto RET;
res = DROP;
goto RET;
}}
}}
return res; }
Figure 4: Pseudo-code of lbm_filter_pkt.
Subsystem
# of Fields
# of BPF-helpers
# of Lines
USB
Bluetooth-HCI
Bluetooth-L2CAP
TOTAL
34
30
28
92
31
29
27
87
621
683
744
2048
Table III: LBM statistics per subsystem, including # of ﬁelds
exposed to the user space, # of BPF helpers implemented, and
# of lines of code changes.
by RCU. The pseudo code of lbm_filter_pkt, previously
mentioned in Section III-C, is presented in Figure 4.
To ease the management of LBM ﬁlters and modules, we
expose ten entries under /sys/kernel/security/lbm/,
including a global switch to enable/disable LBM; per-
subsystem switches to enable/disable debugging, proﬁling, and
statistics; and per-subsystem-per-path controls to view/remove
loaded ﬁlters and modules. The whole implementation of
LBM core is around 1.6K lines of code.
LBM USB: As shown in Figure 2, LBM hooks into
the Host Controller Device (HCD) core implementation to
cover both TX and RX paths. These hooks eventually call
lbm_filter_pkt before the packet reaches the USB core,
as demonstrated below:
lbm_filter_pkt(LBM_SUBSYS_INDEX_USB, LBM_DIR_TX,
(void *)urb);
lbm_filter_pkt(LBM_SUBSYS_INDEX_USB, LBM_DIR_RX,
(void *)urb);
Every USB packet (urb) then needs to go through the LBM
core for ﬁltering before being sent to or received from USB
peripherals.
To support writing rules in LBMTOOL, we expose packet
metadata maintained by the kernel and packet ﬁelds deﬁned
by the USB speciﬁcation to the user space. To achieve this,
a naive approach would be to mirror the urb structure
to the userspace, while providing every ﬁeld explicitly in
the ﬁlter DSL. Unfortunately, exposing raw kernel structures
(cid:26)(cid:24)(cid:19)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:52:45 UTC from IEEE Xplore.  Restrictions apply. 
to the userspace is a security risk, as doing so will leak
sensitive kernel pointer values, which can be used to break
KASLR [24]. Explicitly supporting every ﬁeld is infeasible as
well, given the complexity of the protocol suites. As a trade-
off, we expose the most commonly recognized and used ﬁelds,
while providing special BPF helpers for accessing the rest of
the ﬁelds. These helpers allow LBM ﬁlters to support array
accesses to urb structures, thus enabling them to access every
ﬁeld within a USB packet.
As shown in Table III, we expose 34 ﬁelds and implement
31 BPF helpers for the USB subsystem. Besides the special
BPF helpers mentioned above for accessing packet ﬁelds,
additional helpers are implemented for returning the length
of a buffer or string, or for providing access to the indirect
members of the urb structure. For ﬁelds that are direct
members, no helper is needed since we can access them using
an offset from within the urb. We group these ﬁelds together
in a struct and expose it to the user space, as listed below:
struct __lbm_usb {
__u32 pipe;
__u32 stream_id;
__u32 status;
__u32 transfer_flags;
__u32 transfer_buffer_length;
__u32 actual_length;
__u32 setup_packet;
__u32 start_frame;
__u32 number_of_packets;
__u32 interval;
__u32 error_count; };
Instead of exposing urb itself to the user space and using
the corresponding offsets, LBMTOOL only needs to know the
__lbm_usb struct and use offsets against it to directly access
these ﬁelds. LBM handles the translation of struct member
access within __lbm_usb into one within the kernel urb.
To help the BPF veriﬁer understand the security constraints
of LBM and the scope of the USB subsystem, we implement
three callbacks within the bpf_verifier_ops struct used
by the veriﬁer. We ﬁrst explicitly enumerate all legal BPF
helpers for the veriﬁer, including the 31 LBM USB BPF
helpers mentioned above as well as other common BPF
map helpers. We exclude any existing BPF helpers designed
for the networking subsystem. Therefore, the veriﬁer would
reject any LBM USB ﬁlters that use BPF helpers besides
the ones speciﬁed. We then validate every member access
of __lbm_usb within the range, and forbid any memory
write operations. Finally, we rewrite the instructions accessing
__lbm_usb and map them into corresponding urb accesses.
LBM Bluetooth: The implementation for Bluetooth follows
the same procedure as for USB. We place hooks into the
Host Control Interface (HCI) layer of the Bluetooth subsystem,
as HCI talks to the Bluetooth hardware directly. While HCI
provides the lowest-level of packet abstraction for the upper
layers, it is not easy for normal users to interact with this layer
since it lacks support for high-level protocol elements, such as
connections and device addresses, which are better known to
Bluetooth users. To bridge this semantic gap, we add another
L2CAP
LBM RX
SCO
ACL
LBM TX
Bluetooth Core
LBM TX
LBM RX
Host Controller Interface
Bluetooth Module
Bluetooth Peripherals
Figure 5: LBM hooks inside the Bluetooth subsystem.
set of hooks into the Logical Link Control and Adaptation
Protocol (L2CAP) layer right above HCI, as shown in Figure 5.
These hooks are effectively calls to lbm_filter_pkt, as
demonstrated below:
lbm_filter_pkt(LBM_SUBSYS_INDEX_BLUETOOTH,
LBM_DIR_TX, (void *)skb);
lbm_filter_pkt(LBM_SUBSYS_INDEX_BLUETOOTH,
LBM_DIR_RX, (void *)skb);
lbm_filter_pkt(LBM_SUBSYS_INDEX_BLUETOOTH_L2CAP,
LBM_DIR_TX, (void *)skb);
lbm_filter_pkt(LBM_SUBSYS_INDEX_BLUETOOTH_L2CAP,
LBM_DIR_RX, (void *)skb);
The Bluetooth packet is encapsulated in a socket buffer,
or skb in kernel parlance, for both the HCI and the L2CAP
layers. During development, we encountered two challenges
while hooking the TX path of L2CAP. Unlike for the RX path,
the L2CAP layer provides multiple functions for sending out
L2CAP packets. Even worse, because of different Maximum
Transmission Unit (MTU) sizes between HCI and L2CAP,
an L2CAP packet is usually fragmented during packet con-
struction before being sent to the lower layer. One possible
solution would be to place LBM hooks inside every function
on the TX path and reassemble the packet there. Besides the
resulting code duplication, the major fault in this solution is
the maintenance burden of adding hooks to new TX functions.
To solve these challenges, we deploy only one LBM hook
at the Asynchronous Connection-Less (ACL) layer within HCI
and reassemble the original L2CAP packet there, while fully
covering all TX cases used by the L2CAP layer. Note that the
RX path still has the LBM hook inside the L2CAP layer, as
the kernel has already handled the packet reassembly.
As shown in Table III, we expose 30 and 28 protocol ﬁelds
from the HCI and L2CAP layers, respectively. Note that both
layers share the same 12 ﬁelds related with connections. For a
HCI packet, a BPF helper is provided to check if a connection
is established (indicated by the availability of these ﬁelds). For
L2CAP, a connection is always established. We also implement
29 and 27 BPF helpers for HCI and L2CAP, respectively,
which can retrieve the value of exposed ﬁelds. As with the
(cid:26)(cid:24)(cid:20)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:52:45 UTC from IEEE Xplore.  Restrictions apply. 
USB subsystem, we enumerate all the legal BPF helpers that
can be called within the Bluetooth subsystem, and restrict the
memory write operations in the veriﬁer.
B. LBM User Space
LBMTOOL is responsible for compiling LBM rules to eBPF
programs and loading them into the kernel. Rules/ﬁlters pass
through standard compilation stages before ending up in the
kernel as compiled eBPF. To begin, we tokenize and parse the
input LBM ﬁlter. To simplify these initial steps we use Lark, a
dependency-free Python library that supports LALR(1) gram-
mars written in EBNF syntax. Lark processes our LBM rule
grammar and creates a working standalone parser. Once ﬁlters
are lexed, they are parsed into a Concrete Syntax Tree (CST),
also known as a parse tree [4]. The raw parse tree is then
shaped and canonicalized over multiple steps into a friendlier
representation known as an Abstract Syntax Tree (AST). These
steps include symbol (e.g., usb.idProduct) resolution, type
checking, and expression ﬂattening. After processing, the AST
more accurately represents the LBM language semantics and
is ﬂattened into a low-level Intermediate Representation (IR)
for backend processing.
Our IR is modeled on Three-Address Code (TAC) [4], and
it has a close mapping to the DSL semantics. Additionally,
we ensure that our IR conforms to Static Single Assignment
(SSA) form to simplify register allocation and any late IR
optimization passes. Once we have optimized our IR, it moves
to the eBPF instruction generator. There, we allocate registers
and translate each IR instruction into corresponding eBPF
instructions. Our register allocator maps an inﬁnite number
of virtual registers from our SSA IR to a ﬁxed number of
eBPF physical registers. To do this, it builds an interference
graph [22] of the IR statements in the program. This graph
encodes the lifetime of each virtual register throughout the
program and aids in quickly selecting appropriate physical reg-
isters during the allocation process. With registers allocated,
each IR statement is processed in order by the eBPF instruction
generation backend to produce assembly instructions. With
machine code produced, any remaining control transfer labels
are resolved by a ﬁnal two-pass assembly step. The resulting
eBPF instructions are packaged into a LBM object ﬁle with
metadata for loading into the kernel. For an example of the
compiler’s output at each stage, visit Appendix B.
V. EVALUATION
To evaluate LBM, we ﬁrst demonstrate how users can write
simple LBM rules to protect protocol stacks and defend against
known attacks through case studies. These case studies center
around the USB and Bluetooth stacks, ending with an proof-
of-concept implementation of NFC support in LBM. We divide
the cases between speciﬁc attacks from malicious peripherals
and general host system hardening against potential peripheral
threats. The next part of our evaluation focuses on benchmark-
ing the performance of LBM. We divide the benchmarking into
our testing setup, micro-benchmark, (providing LBM overhead
per packet), macro-benchmark (showing LBM overhead on the
application and system level), and scalability (covering 100
LBM rules and comparing LBM with previous solutions).
A. Case Studies
Kernel Protocol Stack Protection: To protect the kernel’s
USB protocol stack similar to USBFirewall, we extract proto-
col constraints from the USB speciﬁcation and translate them
to LBM rules for loading via LBMTOOL. For example, to
ensure the response of a Get_Descriptor request is well-
formed during the enumeration phase, we write:
((usb.setup_packet != 0) && /* For enumeration */
(usb.request[0] == 0x80) && /* Get_Descriptor */
(usb.request[1] == 0x06) &&
/* Make sure response contains at least 2 bytes
*/
((usb.actual_length < 2) ||
/* Make sure the descriptor type matches */
((usb.request[3] != usb.data[1]) ||
/* Device descriptor */
((usb.request[3] == 1) && ((usb.data[0] != 18)
|| (usb.actual_length != 18))) ||
/* Configuration descriptor */
((usb.request[3] == 2) && ((usb.data[0] < 9)
|| (usb.actual_length < 9))) ||
/* String descriptor */
((usb.request[4] == 3) && ((usb.data[0] < 4)
|| (usb.actual_length < 4))))))
the packet
We ﬁrst make sure the response has at least 2 bytes, for extract-
ing the length (usb.data[0]) and type (usb.data[1])
of the response. We reject
if there is a type
mismatch between request and response. Depending on the
descriptor type, we then make sure the response has the
minimum length required by the speciﬁcation. To fully cover
all the responses during USB enumeration, we also check the
response returned by Get_Status in a similar fashion. We
use FaceDancer [30] and umap2 [57] to emulate a malicious
hub device fuzzing the host USB stack. Our stack protection
ﬁlters are able to drop all malformed packets during USB
enumeration.
To protect the Bluetooth stack within the kernel, we extract
the constraints from the Bluetooth speciﬁcation and rewrite
them using LBMTOOL as follows:
/* HCI-CMD */
((bt.hci.type == 1) && (bt.hci.len < 3)) ||
/* HCI-ACL */
((bt.hci.type == 2) && (bt.hci.len < 4)) ||
/* HCI-SCO */
((bt.hci.type == 3) && (bt.hci.len < 3)) ||
/* HCI-EVT */
((bt.hci.type == 4) && (bt.hci.len < 2)))
layer.
This rule provides basic protection for
Depending on the packet type, we make sure the response
has the minimum length required by the speciﬁcation. We
also implemented similarly styled protection for the L2CAP
layer.
the HCI
Preventing Data Leakage: In addition to propagating mal-
ware, USB storage devices are also used to steal sensitive
information from a computer. To tackle this threat, USBFIL-
TER implemented a plugin to drop the SCSI write command
(cid:26)(cid:24)(cid:21)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:52:45 UTC from IEEE Xplore.  Restrictions apply. 
on the TX path, thus preventing any data from being written
into a connected USB storage device; this plugin mechanism
is referred to as Linux USBFILTER Module (LUM).
Recall LBM is designed to support the features of existing
solutions. We are able to port the SCSI-write-drop LUM to
LBM with only around 10 lines of code changes (primarily
adjusting naming of callbacks and header ﬁles). In fact, any
LUM can be ported to LBM with similarly minimal changes,
because LUMs can be treated as a special case on USB in
LBM. As they are essentially kernel modules, neither LUMs
nor LBM module extensions are as constrained as the LBM
ﬁlter DSL, given that they are written in C and call kernel
APIs directly.
Trusted Input Devices: One of the most common BadUSB
attacks relies on the Human Interface Device (HID) class,
in which a malicious USB device behaves like a keyboard,
injecting keystrokes into the host machine. With LBM, we
can write a rule specifying a trusted input device, such that
keystrokes from all other input devices are dropped, as follows:
((usb.pipe == 1) && /* INT (Keystroke) */
((usb.manufacturer != "X") ||
(usb.product != "Y") ||
(usb.serial != "Z") ||
(usb.plugtime != 12345)))
check against
the
For
all keystrokes, we
expected
manufacturer, product, and serial number of the trusted input
device. This rules out any devices from different vendors or
different device models, and only permits keystrokes from
the trusted input device without completely disabling the
USB keyboard functionality. Similarly to writing udev rules,
system administrators can plug in their trusted input devices
to collect the device information before writing and loading
LBM ﬁlters into the kernel. In case of a BadUSB device
spooﬁng its identity, we extend the USB hub thread to report
the initial
timestamp when a device was plugged in, and
expose this ﬁeld to user space. Sysadmins can discover this
timestamp in dmesg and include it as part of a LBM rule.2
As such, even if a malicious device were able to mimic the
identity of the trusted input device, the malicious keystrokes
would be dropped because the initial timestamp would differ.
Securing USB Charging: A well-known defense against
BadUSB attacks by USB chargers is the “USB condom” [75],