    Mdl=ffffcc8bdd351330: No System Buffer: Thread ffffcc8bd9c4f2c0:  Irp stack trace.  
         cmd  flg cl Device   File     Completion-Context
    [N/A(0), N/A(0)]
                0  0 00000000 00000000 00000000-00000000    
                Args: 00000000 00000000 00000000 00000000
    >[IRP_MJ_WRITE(4), N/A(0)]
                0  0 ffffcc8bdbee7b20 ffffcc8bdcea4ef0 00000000-00000000    
               \Driver\condrv
                Args: 0000000d 00000000 00000000 00000000
重点关注其中的Mdl=ffffcc8bdd351330这行，来继续追踪下数据，这里稍微拓展下，MDL的全称是Memory Descriptor
List，即内存 描述链表，是内核里常用来维护缓冲区内存用的一种结构，是个单项链表，借此我们正好来看下数据：
    1: kd> dt _mdl ffffcc8bdd351330
    nt!_MDL
       +0x000 Next             : (null)
       +0x008 Size             : 0n56
       +0x00a MdlFlags         : 0n266
       +0x00c AllocationProcessorNumber : 1
       +0x00e Reserved         : 0
       +0x010 Process          : 0xffffcc8b`dacf9200 _EPROCESS
       +0x018 MappedSystemVa   : 0xffff9401`ce12f940 Void
       +0x020 StartVa          : 0x00000000`00bee000 Void
       +0x028 ByteCount        : 0xd
       +0x02c ByteOffset       : 0x3a4
各个字段的解释如下：
Next： 指向下一个MDL结构，从而构成链表，有时一个IRP会包含多个MDL；  
Size： MDL本身的大小，注意包含了定长部分和变长两部分的size；  
MdlFlags：属性标记，如所描述的物理页有没有被lock住等；  
Process： 顾名思义，指向该包含该虚拟地址的地址空间的对应进程结构；  
MappedSystemVa：内核态空间中的对应地址；  
StartVa： 用户或者内核地址空间中的虚拟地址，取决于在哪allocate的，该值是页对齐的；  
ByteCount：MDL所描述的虚拟地址段的大小，byte为单位；  
ByteOffset：起始地址的页内偏移，因为MDL所描述的地址段不一定是页对齐的；  
MdlFlags标志取值如下图，而这里的取值是0n266=0x10a；
参照下图可知，内核虚拟地址空间还没有分配，没关系，先看下用户态的数据是啥，先弥补下前边查看nt!NtWriteFile不方便而导致的没能查看数据的不快；
    1: kd> db 0x00000000`00bee000+0x3a4 ld
    00000000`00bee3a4  68 65 6c 6c 6f 20 77 6f-72 6c 64 0d 0a           hello world..
正好是我们printf输出的字符串，“hello
world\n”,到目前为止一切还在掌控中；那内核总会不一直不分配内核空间吧，因为只要进程切换了，CR3就换了，页表就换了，用户态的数据就有可能访问不到了，所以下一步我们就看下内核合适给MDL.MappedSystemVa
字段挂上数据；指向合适的内核内存空间；方法如下：
    1: kd> ba r8 ffffcc8bdd351330+18
    1: kd> g
    Breakpoint 1 hit
    nt!MmMapLockedPagesSpecifyCache+0x16a:
    fffff802`14a58fea 83e601          and     esi,1
    1: kd> dt _mdl ffffcc8bdd351330
    nt!_MDL
       +0x000 Next             : (null)
       +0x008 Size             : 0n56
       +0x00a MdlFlags         : 0n267
       +0x00c AllocationProcessorNumber : 1
       +0x00e Reserved         : 0
       +0x010 Process          : 0xffffcc8b`dacf9200 _EPROCESS
       +0x018 MappedSystemVa   : 0xffff9401`cea433a4 Void
       +0x020 StartVa          : 0x00000000`00bee000 Void
       +0x028 ByteCount        : 0xd
       +0x02c ByteOffset       : 0x3a4
数据设置好了，除了MappedSystemVa 字段被安排了合适的值，MdlFlags
字段也发生了改变；即多了项MDL_MAPPED_TO_SYSTEM_VA；赶紧来看下数据对不对：
    1: kd> db 0xffff9401`cea433a4
    ffff9401`cea433a4  68 65 6c 6c 6f 20 77 6f-72 6c 64 0d 0a ea be 00  hello world.....
    ffff9401`cea433b4  c0 ea be 00 50 00 00 00-d4 e3 be 00 cc 30 11 03  ....P........0..
顺便提一下，大家看下下图，最后一级的pfn居然一样，奇不奇怪？一点都不奇怪，本来就是两个虚拟地址映射到同一份物理页：
OK了，到目前为止，我们知道了printf———>WriteFile——->NtWriteFile———>DriverObject.Write例程；下边我们需要知道，谁来读取这个数据呢？
## 4、分析部分之内核调试分析——读
    接着上边的，在MappedSystemVa所指向的虚拟内存地址设置一个访问断点，看看谁来处理该数据的，如下：
    1: kd> ba r4 0xffff9401`cea433a4
    1: kd> g
    Breakpoint 2 hit
    fffff802`14531424 48ffc9          dec     rcx
    1: kd> kb
    # RetAddr           : Args to Child                                                           : Call Site
    00 fffff802`1453991d : 00000000`00000000 fffff802`14aac8e9 ffffcc8b`00000000 ffffcb80`4ec076f8 : 0xfffff802`14531424
    01 00000000`00000000 : fffff802`14aac8e9 ffffcc8b`00000000 ffffcb80`4ec076f8 ffffb68d`6aa157c0 : 0xfffff802`1453991d
栈不完美，没关系，我们来看看当前的进程是哪个。要查看当前的进程是哪个，方法有很多，下边就给出两种方法，看官自取：
方法1：
    1: kd> dt _EPROCESS @$proc -yn ImageF
    nt!_EPROCESS
       +0x448 ImageFilePointer : 0xffffcc8b`dea4ad10 _FILE_OBJECT
       +0x450 ImageFileName : [15]  "work.exe"
方法2：
    1: kd> !pcr
    KPCR for Processor 1 at ffff9401cdcc0000:
        Major 1 Minor 1
        NtTib.ExceptionList: ffff9401cdcd0fb0
            NtTib.StackBase: ffff9401cdccf000
           NtTib.StackLimit: 0000000000aeead8
         NtTib.SubSystemTib: ffff9401cdcc0000
              NtTib.Version: 00000000cdcc0180
          NtTib.UserPointer: ffff9401cdcc0870
              NtTib.SelfTib: 0000000000cac000
                    SelfPcr: 0000000000000000
                       Prcb: ffff9401cdcc0180
                       Irql: 0000000000000000
                        IRR: 0000000000000000
                        IDR: 0000000000000000
              InterruptMode: 0000000000000000
                        IDT: 0000000000000000
                        GDT: 0000000000000000
                        TSS: 0000000000000000
              CurrentThread: ffffcc8bd9c4f2c0
                 NextThread: ffffcc8bdb76d380
                 IdleThread: ffff9401cdcccb40
                  DpcQueue: Unable to read nt!_KDPC_DATA.DpcListHead.Flink @ ffff9401cdcc2f80
    1: kd> !thread ffffcc8bd9c4f2c0
    THREAD ffffcc8bd9c4f2c0  Cid 2744.1ea8  Teb: 0000000000cac000 Win32Thread: 0000000000000000 RUNNING on processor 1
    IRP List:
        ffffcc8bdc6addc0: (0006,0238) Flags: 00060a00  Mdl: ffffcc8bdd351330
    Not impersonating
    DeviceMap                 ffffb68d596246e0
    Owning Process            ffffcc8bdacf9200       Image:         work.exe
    Attached Process          N/A            Image:         N/A
    Wait Start TickCount      146715         Ticks: 3 (0:00:00:00.046)
    Context Switch Count      1518           IdealProcessor: 1             
    UserTime                  00:00:00.046
    KernelTime                00:00:00.640
    Win32 Start Address work!ILT+110(_wmainCRTStartup) (0x0000000000841073)
    Stack Init ffffcb804ec07c10 Current ffffcb804ec069a0
    Base ffffcb804ec08000 Limit ffffcb804ec01000 Call 0000000000000000
    Priority 8 BasePriority 8 PriorityDecrement 0 IoPriority 2 PagePriority 5
    Child-SP          RetAddr           : Args to Child                                                           : Call Site
    ffffcb80`4ec07698 fffff802`1453991d : 00000000`00000000 fffff802`14aac8e9 ffffcc8b`00000000 ffffcb80`4ec076f8 : 0xfffff802`14531424
    ffffcb80`4ec076a0 00000000`00000000 : fffff802`14aac8e9 ffffcc8b`00000000 ffffcb80`4ec076f8 ffffb68d`6aa157c0 : 0xfffff802`1453991d
嗯，还是work.exe自己，看看是不是复制之类的操作；看汇编下附近的代码：
    1: kd> ?rdx+rcx-1
    Evaluate expression: -118739493964889 = ffff9401`cea433a7
    1: kd> db ffff9401`cea433a7
    ffff9401`cea433a7  6c 6f 20 77 6f 72 6c 64-0d 0a ea be 00 c0 ea be  lo world........
    1: kd> db rcx
    ffff9401`cea44d54  6f 20 77 6f 72 6c 64 0d-0a 00 00 00 9c eb be 00  o world.........
确实是在复制字符串，这个不管，多几次g，断下来之后，看下进程名，调整断点如下：
    1: kd> ba r4 0xffff9401`cdf953a4 "dt @$proc _EPROCESS -yn Image"
多执行机制g命令之后，如下图所示，出现了另一个进程也来读取这个数据：
简单看下这个进程当前的线程信息，如下：
可以知道的信息有线程的ID，线程的Teb信息，有了这些，直接用用户态调试器直接调试即可，但已经用到了内核调试器，那就简单看下当前的线程在干啥吧，看下他的用户态栈；大致浏览下信息，看看有没有什么特别的API调用；
好，接下来转战用户态调试器；如果大家对内核调试熟悉的话，完全可以直接用内核态调试器直接调试用户态程序，也没多麻烦；
## 5、分析部分之用户态conhost.exe进程行为分析
先来看下DeviceIoControl()函数原型：
    BOOL DeviceIoControl(
      HANDLE       hDevice,
      DWORD        dwIoControlCode,
      LPVOID       lpInBuffer,
      DWORD        nInBufferSize,
      LPVOID       lpOutBuffer,
      DWORD        nOutBufferSize,
      LPDWORD      lpBytesReturned,
      LPOVERLAPPED lpOverlapped
    );
    参数解释请见https://docs.microsoft.com/zh-cn/windows/win32/api/ioapiset/nf-ioapiset-deviceiocontrol
x64下，函数参数传递前4个参数是通过cd89寄存器传递的，剩余的通过栈传递，下边来找一下这几个参数：
下边来简单看下传输的缓冲区数据，看不出啥，这个需要去逆向分析通信协议了，不是我们关注的重点，那就让这个函数执行完，我们看看输出的内容吧：
    0:000> dd 000000cbe9a7fcd0
    000000cb`e9a7fcd0  011c5524 00000000 00000000 00000000
    000000cb`e9a7fce0  00000000 00000000 e9a7fd58 000000cb
    000000cb`e9a7fcf0  00000004 00000000
原来conhost.exe是通过这个DeviceIoControl()API通过500006这个控制码跟驱动要的数据；  
至此整够过程全部分析完毕；
## 6、总结
本文从printf的源码层层深入分析，到驱动的调试逆向分析，再到conhost.exe进程的数据获取过程的详细分析；本文涉及到的知识点比较多；总结起来有以下几点：
1、printf源码的调试跟踪，如何定位观点点；  
2、内核对象管理，设备对象，驱动对象及主要的例程；  
3、MDL；  
4、内核调试；  
5、用户态调试；  
6、用户态程序通过DeviceIoControl()与内核驱动交互，获取特定数据；  
7、printf实现的多进程架构；涉及的内容比较多，希望读者花点时间好  
6、用户态程序通过DeviceIoControl()与内核驱动交互，获取特定数据；  
7、printf实现的多进程架构；
好整理总结；