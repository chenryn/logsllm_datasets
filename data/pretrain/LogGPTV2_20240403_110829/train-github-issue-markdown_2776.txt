    struct Vector3(S, S, S);
    // passes type checking
    fn into_vec3_arg([x, y, z]: [S, ..3]) -> Vector3 {
        Vector3(x, y, z)
    }
    fn into_vec3_let(v: [S, ..3]) -> Vector3 {
        let [x, y, z] = v; // error: use of moved value: `v[..]`
        Vector3(x, y, z)
    }
    fn into_vec3_match(v: [S, ..3]) -> Vector3 {
        match v {
            // error: use of moved value: `v[..]`
            [x, y, z] => Vector3(x, y, z),
        }
    }
http://is.gd/bc1U2v
Note that it is impossible to work around this using transmute, because:
    struct Vector3(S, S, S);
    fn into_vec3_transmute(v: [S, ..3]) -> Vector3 {
        // error: cannot transmute from a type that contains type parameters
        unsafe { mem::transmute(v) }
    }
http://is.gd/BeSWOs