## 十、DockerSwarm
现在我们知道了如何安装 Docker、拉取映像和使用容器，接下来我们需要的是一种大规模处理事物的方法。这就是 Docker Swarm 发挥作用的地方。
像往常一样，我们将把这一章分为三个部分:
*   TLDR
*   深潜
*   命令
### 对接者 swarm-tldr
Docker Swarm 主要是两件事:
1.  Docker 主机的企业级安全集群
2.  一个编排微服务应用的引擎
在集群前端，Swarm 将一个或多个 Docker 节点分组，并允许您将它们作为集群进行管理。开箱即用，您可以获得加密的分布式集群存储、加密的网络、相互 TLS、安全的集群加入令牌，以及使管理和轮换证书变得轻而易举的 PKI。您甚至可以无中断地添加和删除节点。这是一件美好的事情。
虽然我们在本章中讨论了 Swarm 安全性的一些方面，但在第 15 章中我们将深入讨论。
在流程编排方面，Swarm 公开了一个丰富的应用编程接口，允许您轻松部署和管理复杂的微服务应用。您可以在声明性清单文件中定义您的应用，并使用本机 Docker 命令将它们部署到 Swarm。您甚至可以执行滚动更新、回滚和缩放操作。同样，都是用简单的命令。
Docker Swarm 直接与 Kubernetes 竞争——它们都编排了容器化的应用。虽然 Kubernetes 确实有更大的发展势头和更活跃的社区和生态系统，但 Docker Swarm 是一项出色的技术，并且更容易配置和部署。对于中小型企业和应用部署来说，这是一项出色的技术。
### DockerSwarm-深潜
我们将把这一章的深潜部分分成如下几部分:
*   Swarm 第一个
*   构建安全的 Swarm 集群
*   部署一些集群服务
*   解决纷争
#### Swarm 第一个
在集群前端，一个*群*由一个或多个 Docker *节点*组成。这些可以是物理服务器、虚拟机、树莓 Pi 或云实例。唯一的要求是所有节点都安装了 Docker，并且可以通过可靠的网络进行通信。
节点配置为*经理*或*工人*。*管理人员*负责管理集群的控制平面，这意味着类似集群状态和将任务分派给*工作人员*这样的事情。*工人*接受*经理*的任务并执行。
*群*的配置和状态保存在位于所有管理器上的分布式 *etcd* 数据库中。它被保存在内存中，并且是最新的。但是它最好的一点是它不需要配置——它是作为群体的一部分安装的，只需要照顾好自己。
在集群领域改变游戏规则的是安全方法。TLS 集成如此紧密，没有它是不可能建立一个群体的。在今天的安全意识世界里，像这样的事情应该得到所有的喝彩。 *Swarm* 使用 TLS 来加密通信、认证节点和授权角色。自动旋转按键也是锦上添花。最棒的是……这一切发生得如此顺利，以至于你甚至不知道它就在那里。
在应用编排方面，群调度的原子单元是*服务*。这是 API 中的一个新对象，与 swarm 一起引入，是一个更高级的构造，它将一些高级特性包装在容器周围。其中包括扩展、滚动更新和简单回滚。将*服务*视为增强的容器是有用的。
群的高级视图如图 10.1 所示。
![Figure 10.1 High-level swarm](img/figure10-1.png)
Figure 10.1 High-level swarm
这就足够了。我们举几个例子来说明一下。
#### 构建安全的群集
在本节中，我们将构建一个安全的 Swarm 集群，其中有三个*管理节点*和三个*工作节点*。您可以使用不同数量的*经理*和*工人*以及不同名称和 IPs 的不同实验室，但是下面的示例将使用图 10.2 中的值。
![Figure 10.2](img/figure10-2.png)
Figure 10.2
节点可以是虚拟机、物理服务器、云实例或树莓皮系统。唯一的要求是他们安装了 Docker，并且可以通过可靠的网络进行通信。如果配置了名称解析，这也是有益的—它可以更容易地识别命令输出中的节点，并在故障排除时提供帮助。
在网络方面，您需要在节点之间的路由器和防火墙上打开以下端口:
*   `2377/tcp:`用于安全的客户端到群组通信
*   `7946/tcp and udp:`为控制平面八卦
*   `4789/udp:`用于基于 VXLAN 的覆盖网络
Mac 和 Windows 的 Docker 桌面仅支持单个 Docker 节点。您可以初始化一个单节点集群，并遵循大多数示例。或者，你可以试试在 https://labs.play-with-docker.com 玩 Docker。
一旦你满足了先决条件，你就可以继续建立一个群体。
建立群的过程叫做*初始化群*，高级过程是这样的:初始化第一个管理节点>加入额外的管理节点>加入工作节点>完成。
##### 初始化新的群
不属于集群的 Docker 节点被称为处于*单引擎模式*。一旦它们被加入蜂群，就会自动切换到*蜂群模式*。
在 Docker 主机上以*单引擎模式*运行`docker swarm init`会将该节点切换到*群模式*，创建一个新的*群*，并使该节点成为群的第一个*管理器*。
然后，其他节点可以作为工作人员和管理人员加入群。作为操作的一部分，将 Docker 主机加入现有集群会将它们切换到*集群模式*。
以下步骤将使 **mgr1** 进入*蜂群模式*并初始化一个新的蜂群。然后，它将加入 **wrk1** 、 **wrk2** 和 **wrk3** 作为工作节点，作为流程的一部分，自动将它们置于*集群模式*。最后会增加 **mgr2** 和 **mgr3** 作为额外的管理者，切换到*集群模式*。在程序结束时，所有 6 个节点将处于*群模式*，并作为同一群的一部分运行。
这个例子将使用如图 10.2 所示的节点的 IP 地址和域名。你的可能不一样。
1.  Log on to **mgr1** and initialize a new swarm (don’t forget to use backticks instead of backslashes if you’re following along with Windows in a PowerShell terminal).
    ```
    $ docker swarm init \
      --advertise-addr 10.0.0.1:2377 \
      --listen-addr 10.0.0.1:2377
    Swarm initialized: current node (d21lyz...c79qzkx) is now a manager. 
    ```
     `该命令可以分解如下:
    *   `docker swarm init`:这告诉 Docker 初始化一个新的群，并使这个节点成为第一个管理器。它还在节点上启用集群模式。
    *   `--advertise-addr`:顾名思义，这是群 API 端点，会向群内其他节点进行通告。它通常是节点的 IP 地址之一，但也可以是外部负载平衡器地址。这是一个可选标志，除非您想在具有多个接口的节点上指定负载平衡器或特定的 IP 地址。
    *   `--listen-addr`:这是节点将接受群集流量的 IP 地址。如果未明确设置，则默认为与`--advertise-addr`相同的值。如果`--advertise-addr`是负载均衡器，您必须使用`--listen-addr`为集群流量指定本地 IP 或接口。
    我建议你具体一点，始终使用两个标志。
    群组模式运行的默认端口是 **2377** 。这是可定制的，但是习惯上使用`2377/tcp`进行安全的(HTTPS)客户端到群的连接。` 
`*   List the nodes in the swarm.
    ```
    $ docker node ls
    ID            HOSTNAME   STATUS  AVAILABILITY  MANAGER STATUS
    d21...qzkx *  mgr1       Ready   Active        Leader 
    ```
     `注意 **mgr1** 是当前群中唯一的节点，被列为*领袖*。我们一会儿再谈这个。` `*   From **mgr1** run the `docker swarm join-token` command to extract the commands and tokens required to add new workers and managers to the swarm.
    ```
    $ docker swarm join-token worker
    To add a manager to this swarm, run the following command:
       docker swarm join \
       --token SWMTKN-1-0uahebax...c87tu8dx2c \
       10.0.0.1:2377
    $ docker swarm join-token manager
    To add a manager to this swarm, run the following command:
       docker swarm join \
       --token SWMTKN-1-0uahebax...ue4hv6ps3p \
       10.0.0.1:2377 
    ```
     `请注意，除了加入令牌(`SWMTKN...`)之外，加入工作者和管理器的命令是相同的。这意味着节点是作为工作者还是作为管理者加入完全取决于您在加入它时使用的令牌。**您应该确保您的加入令牌保持安全，因为它们是将节点加入群所需的唯一东西！**` `*   Log on to **wrk1** and join it to the swarm using the `docker swarm join` command with the worker join token.
    ```
    $ docker swarm join \
        --token SWMTKN-1-0uahebax...c87tu8dx2c \
        10.0.0.1:2377 \
        --advertise-addr 10.0.0.4:2377 \
        --listen-addr 10.0.0.4:2377
    This node joined a swarm as a worker. 
    ```
     ``--advertise-addr`和`--listen-addr`标志可选。我已经添加了它们，因为我认为在网络配置方面最好尽可能具体。` `*   在 **wrk2** 和 **wrk3** 上重复上一步，让他们作为工人加入群体。如果您指定了`--advertise-addr`和`--listen-addr`标志，请确保您使用了 **wrk2** 和 **wrk3 的**各自的 IP 地址。*   登录到 **mgr2** 并使用带有管理器加入令牌的`docker swarm join`命令将其作为管理器加入群。
    ```
    $ docker swarm join \
        --token SWMTKN-1-0uahebax...ue4hv6ps3p \
        10.0.0.1:2377 \
        --advertise-addr 10.0.0.2:2377 \
        --listen-addr 10.0.0.2:2377
    This node joined a swarm as a manager. 
    ```
    `*   在 **mgr3** 上重复上一步，记住将 **mgr3 的** IP 地址用于`advertise-addr`和`--listen-addr`标志。*   通过从群中的任何管理器节点运行`docker node ls`，列出群中的节点。
    ```
    $ docker node ls
    ID               HOSTNAME     STATUS  AVAILABILITY  MANAGER STATUS
    0g4rl...babl8 *  mgr2         Ready   Active        Reachable
    2xlti...l0nyp    mgr3         Ready   Active        Reachable
    8yv0b...wmr67    wrk1         Ready   Active
    9mzwf...e4m4n    wrk3         Ready   Active
    d21ly...9qzkx    mgr1         Ready   Active        Leader
    e62gf...l5wt6    wrk2         Ready   Active 
    ```
    ````` 
 ```恭喜你。您刚刚创建了一个由 3 名经理和 3 名员工组成的 6 节点集群。作为该过程的一部分，每个节点上的 Docker 引擎自动进入*集群模式*，而*集群*则由 TLS 自动保护。
如果您查看`MANAGER STATUS`列，您将看到三个管理器节点显示为“可达”或“领导者”。我们将很快了解更多关于领导者的信息。`MANAGER STATUS`列中没有任何内容的节点是*工作人员*。还要注意显示 **mgr2** 的行上的标识后面的星号(`*`)。这将告诉您登录到哪个节点并从哪个节点执行命令。在这种情况下，命令是从 **mgr2** 发出的。
> **注意:**每次加入群节点时指定`--advertise-addr`和`--listen-addr`标志是一件痛苦的事情。然而，如果你把你的群的网络配置弄错了，这可能是一个更大的痛苦。此外，手动向群中添加节点不太可能是一项日常任务，因此使用标志是值得的。尽管这是你的选择。在实验室环境或只有一个 IP 的节点中，您可能不需要使用它们。
现在您已经有一群*启动并运行，让我们来看看管理器高可用性(HA)。*
 *#### 群集管理器高可用性
到目前为止，我们已经为一个集群添加了三个管理器节点。为什么是三个？他们是如何合作的？
Swarm *管理器*具有对高可用性(HA)的本地支持。这意味着一个或多个可以失败，幸存者将保持群体运行。
从技术上讲，swarm 实现了一种主动-被动多管理器 HA 的形式。这意味着，尽管您有多个*经理*，但在任何给定时刻，只有其中一个*处于活动状态*。这位活跃的经理被称为“T4”领袖，这位领袖是唯一一个会对*虫群*发出实时命令的人。所以，只有领导者才会改变配置，或者给员工分配任务。如果一个跟随者管理器(被动)接收到群体的命令，它会将其代理给领导者。
这个过程如图 10.3 所示。步骤`1`是来自远程 Docker 客户端的*管理器*的命令。第二步是非领导者经理接收命令并将其代理给领导者。第三步是领导者在群体上执行命令。
![Figure 10.3](img/figure10-3.png)
Figure 10.3
如果你仔细看图 10.3，你会注意到经理要么是*领导者*要么是*追随者*。这是 Raft 术语，因为 swarm 使用 [Raft 共识算法](https://raft.github.io/)的实现来跨多个高可用性管理器保持一致的集群状态。
关于高可用性主题，以下两种最佳实践适用:
1.  部署奇数个经理。
2.  不要部署太多经理(建议部署 3 或 5 名)
拥有奇数个*经理*会降低大脑分裂的几率。例如，如果您有 4 个管理器，并且网络被分区，那么您可能会在分区的每一侧剩下两个管理器。这就是所谓的大脑分裂——每一方都知道过去有 4 个，但现在只能看到 2 个。但至关重要的是，双方都无法知道其他两人是否还活着，以及是否拥有多数(法定人数)。群集群集在裂脑条件下继续运行，但您不再能够更改配置或添加和管理应用工作负载。
但是，如果您有 3 个或 5 个管理器，并且出现相同的网络分区，则不可能在分区的两侧有相同数量的管理器。这意味着一侧达到法定人数，完整的群集管理服务仍然可用。图 10.4 右侧的示例显示了一个分区集群，其中拆分的左侧知道它拥有大多数管理器。
![Figure 10.4](img/figure10-4.png)
Figure 10.4
与所有共识算法一样，更多的参与者意味着达成共识需要更多的时间。这就像决定去哪里吃饭——3 个人做出快速决定总是比 33 个人更快更容易！考虑到这一点，最佳做法是为高可用性配备 3 或 5 名经理。7 可能有用，但普遍认为 3 或 5 是最佳选择。你肯定不希望超过 7 个，因为达成共识所需的时间会更长。
关于医院管理局的最后一点警告。虽然将您的管理人员分散到网络内的可用性区域显然是一种好的做法，但是您需要确保连接他们的网络是可靠的，因为网络分区可能是一个很难排除和解决的问题。这意味着，在撰写本文时，跨多个云提供商(如 AWS 和 Azure)托管您的活动生产应用和基础架构的涅槃有点白日梦。花时间和精力确保您的经理和员工通过可靠的高速网络连接在一起。
##### 内置群组安全
Swarm 集群具有大量内置的安全性，这些安全性是用合理的默认值现成配置的——CA 设置、加入令牌、相互 TLS、加密集群存储、加密网络、加密节点 ID 等等。详见**第 15 章:Docker** 中的安全性。
##### 锁定一群
尽管有所有这些内置的本机安全性，重新启动旧的管理器或恢复旧的备份仍有可能危及群集。重新加入群的老经理会自动解密并获得对 Raft 日志时间序列数据库的访问权限，这可能会带来安全问题。恢复旧备份也可以擦除当前的群集配置。
为了防止这种情况，Docker 允许您使用自动锁定功能锁定群。这将强制重新启动的管理器在允许重新进入群集之前出示群集解锁密钥。
通过将`--autolock`标志传递给`docker swarm init`命令，可以将锁直接应用于新的群体。然而，我们已经建立了一个蜂群，所以我们将使用`docker swarm update`命令锁定我们现有的蜂群。