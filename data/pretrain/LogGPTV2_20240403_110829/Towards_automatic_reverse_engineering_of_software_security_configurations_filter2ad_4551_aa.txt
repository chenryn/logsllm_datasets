title:Towards automatic reverse engineering of software security configurations
author:Rui Wang and
XiaoFeng Wang and
Kehuan Zhang and
Zhuowei Li
Towards Automatic Reverse Engineering of Software
Security Conﬁgurations
Rui Wang,XiaoFeng Wang
Indiana University
Kehuan Zhang
Indiana Univ. & Hunan Univ.
Zhuowei Li
CSE, Microsoft
fwang63,PI:EMAIL
PI:EMAIL
PI:EMAIL
Abstract
The speci(cid:2)cations of an application’s security con(cid:2)guration are
crucial for understanding its security policies, which can be very
helpful in security-related contexts such as miscon(cid:2)guration de-
tection. Such speci(cid:2)cations, however, are often ill-documented,
or even close because of the increasing use of graphic user inter-
faces to set program options. In this paper, we propose ConﬁgRE,
a new technique for automatic reverse engineering of an applica-
tion’s access-control con(cid:2)gurations. Our approach (cid:2)rst partitions
a con(cid:2)guration input into (cid:2)elds, and then identi(cid:2)es the semantic
relations among these (cid:2)elds and the roles they play in enforcing an
access control policy. Based upon such knowledge, Con(cid:2)gRE au-
tomatically generates a speci(cid:2)cation language to describe the syn-
tactic relations of these (cid:2)elds. The language can be converted into a
scanner using standard parser generators for scanning con(cid:2)guration
(cid:2)les and discovering the security policies speci(cid:2)ed in an applica-
tion. We implemented Con(cid:2)gRE in our research and evaluated it
against real applications. The experiment results demonstrate the
ef(cid:2)cacy of our approach.
Categories and Subject Descriptors
K.6.5 [Security and Protection]: Unauthorized access
General Terms
Security
Keywords
Reverse Engineering, Con(cid:2)guration, Access Control, Taint Analy-
sis, Context-Free Language
1.
INTRODUCTION
Software security con(cid:2)guration describes the security policies
an application enforces. Speci(cid:2)cations for such con(cid:2)guration can
be highly useful to many security-related utilizations. A promi-
nent example is detection of misconﬁgurations, a major operator
error with serious security implication [20, 23]. Miscon(cid:2)gura-
tions can only be found by evaluating the security policies de(cid:2)ned
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for pro(cid:2)t or commercial advantage and that copies
bear this notice and the full citation on the (cid:2)rst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speci(cid:2)c
permission and/or a fee.
CCS’08, October 27(cid:150)31, 2008, Alexandria, Virginia, USA.
Copyright 2008 ACM 978›1›59593›810›7/08/10 ...$5.00.
within applications, and identi(cid:2)cation of these policies relies on
the information about how these applications are con(cid:2)gured. Actu-
ally, existing con(cid:2)guration checkers such as the Microsoft Baseline
Security Analyzer (MBSA) [3] detect common miscon(cid:2)gurations
through parsing the con(cid:2)gurations of operating systems and service
programs. Knowledge of security con(cid:2)guration could also be used
to circumvent software manufacturers’ restrictions on use of their
products. For example, one might alter the con(cid:2)guration of trial
software to get the functionalities of the full edition.
Tools like MBSA are provided by software manufacturers, who
have the knowledge about their products’ con(cid:2)gurations, in par-
ticular, the formats of con(cid:2)guration (cid:2)les. It becomes much more
dif(cid:2)cult to acquire the con(cid:2)guration information for the software
developed by the third party. Applications may not come with
well-documented speci(cid:2)cations: for example, Linux programs usu-
ally have nothing but a few examples to explain their con(cid:2)guration
options, and as a result, many settings can be left undocumented.
The tendency to use graphic user interfaces for setting and revising
con(cid:2)gurations further reduces the need for publishing con(cid:2)gura-
tion (cid:2)le formats. Moreover, software manufacturers may have the
intentions to hide some con(cid:2)guration settings from their customers,
for the purposes of controlling the way in which their applications
can be used.
In the absence of speci(cid:2)cations, one may have to analyze an ap-
plication to reverse engineer its security con(cid:2)guration. To avoid
intensive human efforts during this process, automated tools need
to be developed. As a (cid:2)rst step towards this end, we propose Con-
ﬁgRE, a novel technique that automatically analyzes an applica-
tion’s binary executables to generate a speci(cid:2)cation for its access-
control con(cid:2)gurations. A program’s security con(cid:2)guration usually
concerns access control, which describes whether a subject (e.g., a
client) is permitted to access an object (e.g., a (cid:2)le) in a particular
manner (e.g., ‘read’, ‘write’ or ‘execute’). Con(cid:2)gRE aims
at automatically discovering the con(cid:2)guration syntaxes that de(cid:2)ne
subjects, objects, and their permissions, which requires semanti-
cally identifying these correlated components from an application’s
execution. This is achieved in our approach through an instruction-
level taint analysis that automatically examines how the informa-
tion (cid:3)ow from con(cid:2)guration (cid:2)les affects the information (cid:3)ow from
the client’s request for accessing an object.
As an example, consider an HTTP server whose con(cid:2)guration
de(cid:2)nes a policy that allows the client from an IP address to read the
(cid:2)les under a directory. Con(cid:2)gRE (cid:2)rst partitions the input from the
server’s con(cid:2)guration (cid:2)le into (cid:2)elds and then uses individual (cid:2)elds
as taint sources to analyze a transaction, the process for serving a
request. This analysis reveals the semantic relations among these
(cid:2)elds, in particular, how a (cid:2)eld affects the use of another one. It
also detects the (cid:2)eld that represents the subject, the client, from
Inputs
Taint Source 1:
Configuration Files
Code
Taint Source 2:
Test Requests
Analysis Steps
1. Extraction of 
Configuration 
Fields
2. Semantic 
Analysis
3. Detection of 
Permission 
Structures
4. Generation 
of Specification 
Languages
Outputs
Fields
Semantic Tree
K-Tree
Convert
Language
Figure 1: Analysis steps.
the operation that compares its IP with a value tainted by the con-
(cid:2)guration (cid:2)le, and the (cid:2)eld for the object, the directory, from the
filename parameter of the API call fopen() also tainted by the
(cid:2)le. Suppose the permission is formatted as Read = Yes. The
(cid:2)eld that accommodates ‘Yes’ can be detected to be a permission
(cid:2)eld through identifying its legitimate values, ‘Yes’ and ‘No’, and
rerunning the program on them to (cid:2)nd out whether the success of
the transaction actually depends on these values. These (cid:2)elds are
correlated according to their semantic relations. Based upon such
knowledge, our approach can automatically create a speci(cid:2)cation
language, which can be converted to a scanner for discovering the
security policies de(cid:2)ned in the con(cid:2)guration (cid:2)les of other instances
of the HTTP server.
At a high level, Con(cid:2)gRE bears some similarity with recent work
on automatic protocol reverse engineering [7, 17, 31], which aims
at producing the speci(cid:2)cation for a closed network protocol. How-
ever, these approaches focus on parsing an application-level mes-
sage into (cid:2)elds, whereas Con(cid:2)gRE needs to semantically under-
stand the in(cid:3)uence of the con(cid:2)guration input on the processing of a
transaction. Serving our objective are a suite of new techniques for
automatically detecting semantic relations among different (cid:2)elds,
and recognizing subjects, objects and the permissions that corre-
late them. These techniques were developed in our research and
evaluated against real applications. They were demonstrated to be
effective in generating con(cid:2)guration speci(cid:2)cations.
We outline the contributions of this paper as follows:
(cid:15) Novel techniques for identifying access control conﬁgura-
tions. We propose a suite of new techniques for detecting
the semantic relations among con(cid:2)guration (cid:2)elds that affect
the processing of a transaction, and the roles they play in en-
forcing an application’s access control policies. These tech-
niques are built upon an innovative approach that takes a dif-
ferent look at the traditional taint analysis: not only did we
study the control (cid:3)ows among con(cid:2)guration (cid:2)elds to iden-
tify their semantic relations, but we also examined how the
information (cid:3)ows are tainted by two different sources, con-
(cid:2)guration (cid:2)les and a service request, and interact with each
other, which reveals the key components of the policies such
as subjects and objects. We also developed a technique that
automatically discovers (cid:2)elds’ alternative values and reruns
the application on these values to detect permission struc-
tures and generate regular expressions to represent them.
(cid:15) Automatic generation of speciﬁcation languages and scan-
ners. We present a technique that automatically generalizes
the information regarding policy-related (cid:2)elds and their rela-
tions into a speci(cid:2)cation language. The language describes
how to syntactically identify subjects, objects and the per-
mission structures that bind them.
It can be conveniently
converted into a scanner through standard parser generators
for recognizing the security policies de(cid:2)ned in an applica-
tion’s con(cid:2)guration (cid:2)les.
(cid:15) Implementation and evaluations. We implemented a proto-
type system of Con(cid:2)gRE and evaluated it using real appli-
cations, including HTTP servers, FTP servers and P2P soft-
ware. Our experimental study demonstrates that Con(cid:2)gRE
can effectively generate con(cid:2)guration speci(cid:2)cations related
to access control and use them to detect security policies
from an application’s con(cid:2)guration (cid:2)les.
The rest of the paper is organized as follows. Section 2 gives
an overview of the general design of Con(cid:2)gRE. Section 3 elabo-
rates the detailed design and implementation of our prototype sys-
tem. Section 4 reports an empirical study of our technique using
the prototype. Section 6 discusses the limitations of our current de-
sign. Section 5 presents the related prior research, and Section 7
concludes the paper.
2. OVERVIEW
The general idea of Con(cid:2)gRE comes from the insight that how
data are used by an application can actually reveal the semantic
meanings of the data. For example, use of a character string as an
input to the function gethostbyname() unambiguously points
to the fact that the string actually represents a host name. Our ap-
proach utilizes this observation to identify security-related con(cid:2)g-
uration data and their relations, and then converts such knowledge
into a speci(cid:2)cation. In this section, we (cid:2)rst present the key steps
for this analysis, and then survey Con(cid:2)gRE using an example. We
also introduce taint analysis, a technique intensively used in our
approach.
Analysis steps. Con(cid:2)gRE takes four steps to reverse engineer an
application’s security con(cid:2)gurations, as described in Figure 1. In
the (cid:2)rst step, it monitors the initialization process of the applica-
tion to identify its con(cid:2)guration (cid:2)les, and extract the structure in-
formation of these (cid:2)les, in particular, con(cid:2)guration (cid:2)elds. Then,
our approach performs an instruction-level taint analysis on the ap-
plication using individual (cid:2)elds and a test request as taint sources.
This analysis acquires the semantic information of the con(cid:2)gura-
tion structure, such as the semantic relations among the (cid:2)elds, the
(cid:2)elds that de(cid:2)ne subjects and objects, and those that could be re-
lated to permissions. The possible permission (cid:2)elds are further
studied in the third step, which detects their alternative values, and
reruns the application over these values to generate the conditions
for permitting or denying a request. The last step generalizes the
knowledge about subjects, objects and permissions into a speci(cid:2)-
cation language.
An example. We use the example in Figure 2 to illustrate our
approach. The example includes the code fragments of an HTTP
server for parsing and initializing its con(cid:2)guration settings, and for
Taint Source 1:
Configuration Files
httpd .conf
...
C1   Directory "/usr/www/" {
C2       IPPrefix=192.168.1.0/24
C3       FileAccess=Yes
C4   }
        ...
Taint Source 2:
Test Requests
GET /filename HTTP/1.1
Semantic Tree
Directory
IPPrefix
FileAccess
/usr/www
192.168.1.0/24
Yes
Code
1. Initialization
...
I1   parseLine(line,&keyword,&value);
I2   if (keyword == "Directory") {
I3     directory = value;
I4     if (strchr(line, "{"))
I5        getRelatedField(file);
I6   }    
         ...         