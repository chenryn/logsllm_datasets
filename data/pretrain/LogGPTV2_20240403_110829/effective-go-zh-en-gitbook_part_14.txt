继续运行而不是终止整个程序。一个可能的反例就是初始化： 若某个库真的不能让自己工
作，且有足够理由产生 Panic，那就由它去吧。
107
错误
var user = os.Getenv("USER")
func init() {
if user == "" {
panic("no value for $USER")
}
}
Recover
恢复
When panic is called, including implicitly for run-time errors such as indexing a slice out of
bounds or failing a type assertion, it immediately stops execution of the current function and
begins unwinding the stack of the goroutine, running any deferred functions along the way. If
that unwinding reaches the top of the goroutine's stack, the program dies. However, it is
possible to use the built-in function recover to regain control of the goroutine and resume
normal execution.
当 panic 被调用后（包括不明确的运行时错误，例如切片检索越界或类型断言失败）， 程序
将立刻终止当前函数的执行，并开始回溯 Go 程的栈，运行任何被推迟的函数。 若回溯到达
Go 程栈的顶端，程序就会终止。不过我们可以用内建的 recover 函数来重新或来取回 Go 程
的控制权限并使其恢复正常执行。
A call to recover stops the unwinding and returns the argument passed to panic. Because
the only code that runs while unwinding is inside deferred functions, recover is only useful
inside deferred functions.
调用 recover 将停止回溯过程，并返回传入 panic 的实参。 由于在回溯时只有被推迟函数中
的代码在运行，因此 recover 只能在被推迟的函数中才有效。
One application of recover is to shut down a failing goroutine inside a server without killing
the other executing goroutines.
recover 的一个应用就是在服务器中终止失败的 Go 程而无需杀死其它正在执行的 Go 程。
108
错误
func server(workChan 
QR Link Generator
{{if .}}
{{.}}
{{end}}
`
The pieces up to main should be easy to follow. The one flag sets a default HTTP port for
our server. The template variable templ is where the fun happens. It builds an HTML
template that will be executed by the server to display the page; more about that in a
114
一个Web服务器
moment.
main 之前的代码应该比较容易理解。我们通过一个标志为服务器设置了默认端口。 模板变量
templ 正式有趣的地方。它构建的 HTML 模版将会被服务器执行并显示在页面中。 稍后我们
将详细讨论。
The main function parses the flags and, using the mechanism we talked about above, binds
the function QR to the root path for the server. Then http.ListenAndServe is called to start
the server; it blocks while the server runs.
main 函数解析了参数标志并使用我们讨论过的机制将 QR 函数绑定到服务器的根路径。然后
调用 http.ListenAndServe 启动服务器；它将在服务器运行时处于阻塞状态。
QR just receives the request, which contains form data, and executes the template on the
data in the form value named s.
QR 仅接受包含表单数据的请求，并为表单值 s 中的数据执行模板。
The template package html/template is powerful; this program just touches on its
capabilities. In essence, it rewrites a piece of HTML text on the fly by substituting elements
derived from data items passed to templ.Execute, in this case the form value. Within the
template text (templateStr), double-brace-delimited pieces denote template actions. The
piece from {{if .}} to {{end}} executes only if the value of the current data item, called .
(dot), is non-empty. That is, when the string is empty, this piece of the template is
suppressed.
模板包 html/template 非常强大；该程序只是浅尝辄止。 本质上，它通过在运行时将数据项中
提取的元素（在这里是表单值）传给 templ.Execute 执行因而重写了 HTML 文本。 在模板文
本（templateStr）中，双大括号界定的文本表示模板的动作。 从 到 的
{{if .}} {{end}}
代码段仅在当前数据项（这里是点 .）的值非空时才会执行。 也就是说，当字符串为空时，此
部分模板段会被忽略。
The two snippets {{.}} say to show the data presented to the template—the query string—
on the web page. The HTML template package automatically provides appropriate escaping
so the text is safe to display.
其中两段 {{.}} 表示要将数据显示在模板中 （即将查询字符串显示在 Web 页面上）。
HTML 模板包将自动对文本进行转义， 因此文本的显示是安全的。
The rest of the template string is just the HTML to show when the page loads. If this is too
quick an explanation, see the documentation for the template package for a more thorough
discussion.
余下的模板字符串只是页面加载时将要显示的 HTML。如果这段解释你无法理解，请参考 文
档 获得更多有关模板包的解释。
115
一个Web服务器
And there you have it: a useful web server in a few lines of code plus some data-driven
HTML text. Go is powerful enough to make a lot happen in a few lines.
你终于如愿以偿了：以几行代码实现的，包含一些数据驱动的HTML文本的Web服务器。 Go
语言强大到能让很多事情以短小精悍的方式解决。
116