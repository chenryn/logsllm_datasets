(around 1024 bits), we could solve the equations with an 8-bit
leak. This demonstrates that it is generally possible to perform
the Raccoon secret recovery attack against TLS, and therefore
compute the PMS and decrypt the session. Currently deployed
TLS servers also commonly use 2048-bit moduli. Solving the
HNP for those sizes and an 8-bit leak is yet unsolved, and it
is still an open question how hard it actually is. Nevertheless,
note that an attacker can potentially leak more than 8 bits,
making the attack feasible against bigger moduli.
7 Alexa Top 100k Scan
To estimate the impact of the vulnerability on currently de-
ployed servers, we conducted a scan among the Alexa Top
100k on port 443. We evaluated how common static-DH
cipher suites are by trying to negotiate them. Addition-
ally, we evaluated how prevalent key reuse is in TLS-DHE
and evaluated the used modulus sizes. We also tried to
ﬁnd servers that are vulnerable to a direct oracle by send-
ing ClientKeyExchange messages, which either resulted in
a PMS with a leading zero byte or not and by observing
the server’s behavior. For this purpose, we used techniques
from [16,45] and carefully observed the TCP connection state
and tried omitting messages. We performed each handshake
three times to rule out inconsistencies in the server behavior.
If a server showed at least occasionally different behavior, we
performed additional handshakes (97 each) to collect more
data on the issue.
DH & DHE support. The results of our scan are shown
in Table 4. In total, 86607 servers of the scanned servers
supported SSL/TLS. A total of 32% of the scanned servers
supported DHE cipher suites. Only a single server advertised
support for static DH cipher suites.
Key reuse. Although typically servers reuse ephemeral keys
until they are restarted, it is not enough to monitor the
ephemeral key in two consecutive handshakes in order to
validate if a server reuses ephemeral keys, as many hosts are
using load balancing setups in which multiple different TLS
servers are handling incoming connections. Usually, each
server manages its own ephemeral keys, and these keys are
not shared across servers. Since we do not know how many
potential servers are within a load balancing setup, we do
not know how many handshakes we have to perform to make
sure that we can detect key reuse. To overcome this issue, we
observed all public keys which were transmitted to us during
the whole scanning process. If we observed at least one reuse,
we considered the server as a server reusing ephemeral keys.
We did not evaluate for how long these servers reused their
public keys, as this would require a longitudinal study that is
outside the scope of this work.
Our scans showed that a total of 3.33% of the scanned
servers reused their ephemeral DH keys. This is slightly
lower than the 4.4% reported by Springall et al. in 2016 [61],
but note that Springall et al. scanned the Alexa Top 1 Million,
whereas we scanned the Alexa Top 100K. Furthermore, DHE
USENIX Association
30th USENIX Security Symposium    223
DH group
n
ε
RFC 5114
1024
0.532
LibTomCrypt
1036
0.000
SKIP
2048
0.056
RFC 3526
3072
0.000
RFC 7919
4096
0.000
24
20
β = 40, d = 50
T = 6s± 0s
β = 40, d = 50
T = 6s± 0s
β = 40, d = 100
T = 112s± 5s
β = 40, d = 150
T = 1243s± 59s
β = 40, d = 200
T = 3601s± 6s
β = 40, d = 60
T = 10s± 1s
β = 40, d = 60
T = 10s± 1s
β = 40, d = 120
T = 207s± 18s
β = 40, d = 190
T = 2390s± 65s
β = 60, d = 250
T = 30023s± 85s
k
16
β = 40, d = 80
T = 26s± 4s
β = 40, d = 80
T = 28s± 1s
β = 60, d = 160
T = 977s± 46s
β = 60, d = 250
T = 27192s± 312s
12
8
β = 40, d = 100
T = 111s± 4s
β = 40, d = 100
T = 52s± 5s
β = 60, d = 250
T = 13792s± 47s
β = 60, d = 200
T = 9295s± 467s
β = 60, d = 180
T = 5613s± 205s
Table 3: Our parameter choices and calculation costs to recover gab in a Raccoon attack for ﬁve well-known DH groups, using
BKZ 2.0 with block size β, number of equations d and average calculation time T . We aborted the BKZ reductions as soon as the
hidden number was found (up to BKZ loop completion). Each simulation was repeated 8 times with random secrets on a vCPU
with 2 GHz clock speed. The bit-size n of the modulus and its bias ε = n− log2 (p) are also given. Note that for k = 8, we had to
use more equations for the RFC 5114 group than for the LibTomCrypt group, mainly due to the larger bias ((cid:96) = 7.468 (cid:28) 8).
support by major clients declined during this period, and
OpenSSL removed ephemeral key reuse in 2016. Springall et
al. did measure the time period for key reuse, and found that
1.3% of servers supporting DHE reused values for at least one
day, and 1.2% for at least 7 days.
Key lengths. The key lengths used by the scanned servers
can be seen in Table 4. The data shows that servers that
reuse ephemeral keys generally tend to use weaker keys than
servers who do not.
Modulus sizes
1024 bits
2048 bits
4096 bits
8192 bits
Other
Total
# Domains
5310
23428
3045
1
277
32061
# With key reuse
2213
1116
4
0
0
3333
Table 4: The observed key lengths for DHE cipher suites in
the Alexa Top 100k scan. Units denote the number of domains
with the corresponding key length.
Perfect direct oracles. A total of 87 servers were exhibiting
a perfect direct oracle as described in Subsection 3.4, mean-
ing that they were reliably showing different behavior based
on the leading zero byte of the PMS. Almost all of these
servers (84) were reusing their ephemeral keys. We ﬁnger-
printed this vulnerability and were able to attribute most of
the discovered oracles to F5. F5 conﬁrmed the vulnerability
and released a patch on the 9th of September 2020 in Security
Advisory K91158923 (CVE-2020-5929). These servers were
sending either one or two handshake failure alerts depending
on whether the PMS started with a zero byte or not. The vul-
nerability was not present on all supported cipher suites. Note
that an attacker could still use any vulnerable cipher suite to
attack the connection of a non-vulnerable cipher suite.
Imperfect direct oracles. We found 815 servers which did
not show a perfect oracle, meaning that they did not allow for
a distinction with every executed handshake, but only occa-
sionally showed a distinguishing behavior. We assume that
we observe this behavior because of another factor that we did
not control (or cannot control) that inﬂuences the behavior dif-
ference. These factors may include CDN setups, where only
parts of the CDN are vulnerable, internal memory allocations,
network issues, or resource shortages. We did not exclude
these hosts from our study but investigated if the behavior
difference correlates with a leading zero byte in the PMS or
not. Any behavior difference unrelated to a leading zero byte
is expected to happen with roughly the same probability on all
executed handshakes. If the difference is somehow related to
a leading zero byte, we should see a non-uniform distribution
of the responses, which can be used by an attacker to distin-
guish if the PMS for a given ClientKeyExchange message
will start with a zero byte or not. To check if the behavior
difference is sufﬁciently correlating, we used Fisher’s Exact
test [32] in the cases where we observed only two different
responses, while we used the Chi-square [33] test if we had
more than two different responses from a server. These tests
compute a p-value, which indicates whether a null hypoth-
esis is correct. In our case, the null hypothesis was that the
observed behavior difference was appearing by chance, and
is unrelated to a leading zero byte. For each host, we tested
each cipher suite in each protocol version individually and
accepted all hosts as vulnerable for which the p-value on one
of the executed tests was smaller than 10−9. Given these tests,
224    30th USENIX Security Symposium
USENIX Association
we discovered that a total of 815 servers (excluding perfect
oracles) showed an observable difference based on a leading
zero byte in the PMS, however, none of these servers were
reusing ephemeral public keys. As of the time of writing,
we do not know which implementation is responsible for this
behavior.
Conclusion The evaluation shows that a non-negligible
amount of servers are reusing ephemeral keys, and there-
fore are generally vulnerable to Raccoon attack. Over 66% of
those servers use keys that can be exploited by us with k = 8,
while the remaining servers require more bits to be leaked in
order to practically solve the HNP with our approach. The
data also shows that OD is found in real TLS implementations.
8 Impact on TLS and Beyond
Exploitability. The Raccoon attack is generally hard to ex-
ploit, since the prerequisites for the attack are quite rare
nowadays. Parallel to the disclosure of this vulnerability,
the last major browser (Firefox) stopped supporting DHE ci-
pher suites. Even if the conditions of the attack are met, the
attack still requires precise timing measurements, which are
hard to perform in real networks.
Stronger attackers in a co-located setup may be able to use
more advanced techniques like cache side channels to avoid
timing measurements. We consider these stronger attacker
models outside the scope of this work.
Attacking ECDH and ECDHE Cipher Suites. ECDH(E)
cipher suites are generally not affected by the Raccoon at-
tack, as TLS mandates that leading zero bytes are preserved.
However, we identiﬁed some implementations which strip
leading zero bytes from the coordinates, and then add those
bytes back. This may result in a small timing side channel
that leaks the MSB of the x-coordinate of the shared point.
The EC-HNP [37] is related to the HNP and could potentially
be applied here. However, a full analysis of this potential
vulnerability is outside the scope of this work.
Downgrading TLS Sessions to DHE. Typical TLS connec-
tions are established with TLS ECDHE cipher suites. If an
attacker can perform the complete attack within the hand-
shake timeout, the attacker could perform a downgrade at-
tack, and target TLS sessions that would otherwise not use
Difﬁe-Hellman. The attacker acts as a MitM, and removes
any non-DHE cipher suites from the cipher suite list in the
ClientHello message. Assuming both the client and server
support at least one common DHE cipher suite, they will then
attempt to handshake with it. The primary defense mechanism
in TLS against such attacks is the Finished message, which
includes a hash over the entire session transcript. But since
the attacker learns the shared secret within the handshake
timeout, the attacker can forge a valid Finished message,
leading to a full break in security.
However, performing the attack fast enough is likely in-
feasible. The typical handshake timeout is around 30 sec-
onds. The attacker needs to handshake with the victim server
millions of times within this short period while performing
accurate timing measurements for each server response. Fur-
thermore, the attacker then needs to solve an instance of the
HNP problem, which we were only able to accomplish with
hours of computation time for small leaks.
One caveat is that some TLS libraries exhibit behavior that
allows an attacker to stall TLS handshakes indeﬁnitely [2].
Such behavior would make the online downgrade plausible.
Moreover, TLS False Start [43] allows the client to send
encrypted application-layer data before receiving the server’s
Finished message. In principle, if the client is willing to
use DHE with False Start, the attacker does not need to learn
the shared secret within the handshake timeout, but rather
at any point in the future. The data sent under False Start is
typically particularly sensitive, such as authentication cookies;
compromise of this data at any point in the (short) future
typically leads to a full break in security. The False Start
standard explicitly allows DHE cipher suites, but only with
well-known groups with 3072-bit modulus or larger; however,
typical TLS client implementations disallow DHE use with
False Start altogether. To summarize, this concern is mostly
theoretical.
TLS 1.3. In TLS 1.3 the leading zero bytes are preserved