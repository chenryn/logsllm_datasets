                    $class   =  'Think\\Template\\Driver\\'.ucwords($engine);                
                }            
                if(class_exists($class)) {
                    $tpl   =  new $class;
                    $tpl->fetch($_content,$_data['var']);
                }else {  // 类没有定义
                    E(L('_NOT_SUPPORT_').': ' . $class);
                }
            }
        }
从代码中知道第一次解析模板时（即模板文件没有缓存），调用了`fetch()`方法：
    $tpl = Think::instance('Think\\Template');
    // 编译并加载模板文件
    $tpl->fetch($_content,$_data['var'],$_data['prefix']);
跟进文件`/ThinkPHP/Library/Think/Template.class.php`73 行左右：
    /**
         * 加载模板
         * @access public
         * @param string $templateFile 模板文件   
         * @param array  $templateVar 模板变量
         * @param string $prefix 模板标识前缀
         * @return void
         */
        public function fetch($templateFile,$templateVar,$prefix='') {
            $this->tVar         =   $templateVar;
            $templateCacheFile  =   $this->loadTemplate($templateFile,$prefix);
            Storage::load($templateCacheFile,$this->tVar,null,'tpl');
        }
    /**
         * 加载主模板并缓存
         * @access public
         * @param string $templateFile 模板文件
         * @param string $prefix 模板标识前缀
         * @return string
         * @throws ThinkExecption
         */
        public function loadTemplate ($templateFile,$prefix='') {
            if(is_file($templateFile)) {
                $this->templateFile    =  $templateFile;
                // 读取模板文件内容
                $tmplContent =  file_get_contents($templateFile);
            }else{
                $tmplContent =  $templateFile;
            }
             // 根据模版文件名定位缓存文件
            $tmplCacheFile = $this->config['cache_path'].$prefix.md5($templateFile).$this->config['cache_suffix'];
            // 判断是否启用布局
            if(C('LAYOUT_ON')) {
                if(false !== strpos($tmplContent,'{__NOLAYOUT__}')) { // 可以单独定义不使用布局
                    $tmplContent = str_replace('{__NOLAYOUT__}','',$tmplContent);
                }else{ // 替换布局的主体内容
                    $layoutFile  =  THEME_PATH.C('LAYOUT_NAME').$this->config['template_suffix'];
                    // 检查布局文件
                    if(!is_file($layoutFile)) {
                        E(L('_TEMPLATE_NOT_EXIST_').':'.$layoutFile);
                    }
                    $tmplContent = str_replace($this->config['layout_item'],$tmplContent,file_get_contents($layoutFile));
                }
            }
            // 编译模板内容
            $tmplContent =  $this->compiler($tmplContent);
            Storage::put($tmplCacheFile,trim($tmplContent),'tpl');
            return $tmplCacheFile;
        }
可以看到`fetch()`方法调用了`loadTemplate`方法，然后在`loadTemplate`方法中，`$templateFile`被赋值给了`$tmplContent`，然后在编译模板内容时，进入了`compiler`方法，依旧是`/ThinkPHP/Library/Think/Template.class.php`文件，在120
行左右：
    /**
         * 编译模板文件内容
         * @access protected
         * @param mixed $tmplContent 模板内容
         * @return string
         */
        protected function compiler($tmplContent) {
            //模板解析
            $tmplContent =  $this->parse($tmplContent);
            // 还原被替换的Literal标签
            $tmplContent =  preg_replace_callback('//is', array($this, 'restoreLiteral'), $tmplContent);
            // 添加安全代码
            $tmplContent =  ''.$tmplContent;
            // 优化生成的php代码
            $tmplContent = str_replace('?>compiler($tmplContent);
     Storage::put($tmplCacheFile,trim($tmplContent),'tpl');
     return $tmplCacheFile;
将编译好的模板进行缓存处理，然后返回缓存的文件名
返回到`fetch()`方法，可以看到`loadTemplate`方法返回的缓存文件名进入了
`Storage::load($templateCacheFile,$this->tVar,null,'tpl');`
跟进该方法，在`/ThinkPHP/Library/Think/Storage/Driver/File.class.php`，69 行左右：
    /**
         * 加载文件
         * @access public
         * @param string $filename  文件名
         * @param array $vars  传入变量
         * @return void        
         */
        public function load($_filename,$vars=null){
            if(!is_null($vars)){
                extract($vars, EXTR_OVERWRITE);
            }
            include $_filename;
        }
进行非空判断后，直接进行了文件包含。
这样一来整个漏洞的流程就很清楚了，流程图如下所示：
### 0x03 漏洞复现
首先在前台注册一个普通用户，然后更新简历：
完成简历更新后，上传照片：
在上传图片马后，会生成图片地址：
复制路径，通过 a 方法调用assign_resume_tpl函数，再通过 POST 的方式提交该路径，即可包含成功
    http://192.168.159.208/index.php?m=home&a=assign_resume_tpl
    POST:
    variable=1&tpl=../../../../var/www/html/data/upload/resume_img/2011/13/5fae95e469e05.jpg
如下图所示：
值得一提的是，通过上面的分析我们可以知道，在解析模板的时候，不是解析原生的 PHP 代码，因此如果图片马是纯 PHP 代码是无法利用成功的，必须要包括骑士
CMS
模板文件的标签，我们可以随便打开一个原有模板，然后复制一句话即可，如：`/Application/Home/View/tpl_company/default/com_jobs_list.html`
因此最终的图片马所要包含的内容应该是：
另外一点，骑士 CMS 对于图片上传是有过滤的，所以需要绕过技巧，具体可以自行研究，当然你也可以考虑上传 docx
或者其他类型的文件，对于包含的结果是没有影响的
### 0x04 漏洞修复
官方虽然给了修复的方法，如下：
`BaseController.class.php`文件中169行`assign_resume_tpl`方法中添加判断
    $view = new \Think\View;
            $tpl_file = $view->parseTemplate($tpl);
            if(!is_file($tpl_file)){
                return false;
            }
文件2
路径：`/ThinkPHP/Library/Think/View.class.php`，
`View.class.php`文件中106行`fetch`方法中修改，将110行
    if(!is_file($templateFile)) E(L('_TEMPLATE_NOT_EXIST_').':'.$templateFile);
代码注释替换为
    if(!is_file($templateFile)) E(L('_TEMPLATE_NOT_EXIST_'))
但其实这种修复方式是没有用的，我们依旧可以执行命令，如下图所示：
这里提供一个个人的临时修复方案：
`BaseController.class.php`文件中`assign_resume_tpl`方法中添加判断
    $pattern = "\.\/|\.\.\/|:|%00|%0a|=|~|@|file|php|filter|resource";
        if(preg_match("/".$pattern."/is",$tpl)== 1){
            return $this->_empty();
        }
如下所示：
在此执行命令时，发现已经失败了：
### 0x05 总结
本漏洞其实也是寻常的模板注入漏洞，由可控参数传入`fetch()`函数，这个漏洞产生的方式相信很多人已经很熟悉了，前段时间分析的 fastadmin 前台
RCE 也是由这个原因，但上次偷懒没有分析具体传入的流程，本次分析的比较具体，有不足或错误之处希望师傅们指出，共同学习。最后感谢续师傅的指点（抱大腿）
### 0x06 参考