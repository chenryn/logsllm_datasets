(elevation of privilege) is the most common one with a total of 954
(43.8%) vulnerabilities. ID (information disclosure) and the most
dangerous RCE (remote code execution) rank second and third with
313 and 254 vulnerabilities, respectively. DoS (denial of service),
unsurprisingly, is the least affected vulnerability type with 160
vulnerabilities. Additionally, there are 498 vulnerabilities marked
as “N/A” by Google, which are because of the closed-source driver
components of which the vulnerability details are not ready to be
made public at the time of our crawling. Despite this, we estimate
that the “N/A” type of vulnerabilities would mainly cause EoP and
RCE issues by correlating with the severity (i.e., via the 402 high
and 82 critical vulnerabilities in the “N/A” category).
Table 2: Vulnerability metadata: type and severity
Critical
High
Moderate
Low
RCE
200
47
6
1
254
EoP
156
641
156
1
954
ID
0
112
197
4
313
DoS
0
133
19
8
160
N/A
82
402
14
0
498
438
1,335
392
14
Notes:
RCE = Remote Code Execution; EoP = Elevation of Privilege;
ID = Information Disclosure; DoS = Denial of Service.
N/A = Not Available, due to closed-source driver components.
Regarding the vulnerability severity, high-level severity accounts
for the largest proportion with 1,335 (61.3%) vulnerabilities. The
critical- and the moderate-level severity hold the remaining 38%
portions, with only 14 vulnerabilities being rated as at low-level
severity. By correlating the severity with the vulnerability type, we
further find that the critical-level severity is mostly related to RCE
issues, and similarly, high severity appears the most significantly in
EoP, the moderate and low severity are for ID and DoS, respectively.
Such a one-to-one relationship is also almost true when correlating
the vulnerability type with the severity except that most of the DoS
vulnerabilities result in high-level severity.
Key Takeaway: Most of Android vulnerabilities are dangerous, with
81% (1,773/2,179) rated as the high severity or above. Moreover, most
of them could lead to a serious elevation of privilege and remote code
execution. These suggest that Android vulnerabilities could make
severe security impacts and require better understanding.
4.2 Analysis of Vulnerable Modules
In this subsection, we present our analysis of vulnerable modules.
We first depict the layered map of vulnerable Android modules in
Figure 5, with the percentage counted for each Android layer and
with the vulnerability number marked behind each module name.
By inspecting the vulnerability percentage of different Android
layers, we can observe that layers with modules mainly coded in
Java (i.e., the Application Framework and the System Applications
layers) have significantly fewer vulnerabilities than those mainly
coded in C/C++ at 7.25% v.s. 92.75%. In particular, the Linux Kernel
layer itself already accounts for 65.7% of all the 2,179 Android
vulnerabilities studied, and the Native Libraries layer also holds
23.9%. Both layers introduce many third-party drivers or libraries,
the code quality of which might be worse than Android’s own code.
Generally, there are more vulnerabilities in C/C++ code than Java
due to the potential memory corruption issues (e.g., buffer overflow).
This could be supported by the evidence that in our dataset of 1,349
patches, only 154 patches involve Java code while that number for
C/C++ is 1,164.
We then study the vulnerable modules across different layers and
obtain the following observations. First, the media-related modules
are the high-risk modules from the Native Libraries layer down
to the Linux Kernel, including the media framework (code in the
frameworks/av [11]), the media libraries (e.g., libstagefright
and libmpeg2), the media components in the hardware abstract
layer (e.g., hardware/qcom/media [12]), and the sound and video
Session 4A: Mobile SecurityAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand300Figure 6: CDF plot of # patched code files per vulnerability.
at least ten vulnerabilities. We have the following observations.
First, a third of the 14 high-risk code is located in the “decoder”
directory with six pieces of frequently vulnerable code. In par-
ticular, the “ih264d” related decoder code was affected the most,
which deserves more security attention. Moreover, several media
libraries were also frequently reported, e.g., the libstagefright
and libeffects. In particular, the file MPEG4Extractor.cpp in
the libstagefright even appears in 26 patches — the riskiest
code. Besides that related to media, we find that code for WLAN
(wlan_hdd_cfg80211.c), bootloader (aboot.c), and Activity Man-
ager is also in the high-risk list. Finally, among all the listed code,
only ActivityManagerService.java is written in Java. This pro-
vides another evidence that C/C++ code in Android could be less
secure than Java code.
Key Takeaway: 92% of the Android vulnerabilities are located in
low-level modules that are mainly coded in C/C++, especially native
libraries and kernel drivers. Moreover, media, Wi-Fi, and telephony
related modules are at high risk as they introduce hundreds of vulnera-
bilities across different layers. We also study code frequently reported
as vulnerable. Overall, our analysis sheds light on susceptible Android
system modules.
4.3 Analysis of Patch Code Complexity
In this subsection, we study the complexity of patch code by measur-
ing the number of code changes required to fix each vulnerability.
We use all the 1,349 patches (from 1,158 unique vulnerabilities) for
analysis and draw the CDF (cumulative distribution function) plots
of their patch code complexity.
We first analyze the number of code files needs to be patched
for each vulnerability. Figure 6 shows the CDF plot of the number
of patched code files per vulnerability. We can see that over 60%
Android vulnerabilities require a code change in only one file, and
this percentage goes up to over 80% if we count the vulnerabilities
with no more than two files changed. This suggests that most of the
Android vulnerabilities are quite dedicated and involve minimal
code files to be patched. However, there are also a few vulnerabilities
requiring an exceptional number of files changed, which are due
to either system library updates or fixing common root causes in
different files. For example, CVE-2014-9675 upgrades the FreeType
library from 2.6.0 to 2.6.2, and thus adjusts a total of 112 files [2], the
Figure 5: The layered map of vulnerable Android modules.
Table 3: The code that was frequently reported as vulnerable
in terms of appearing in at least ten vulnerabilities.
Code
media/libstagefright/MPEG4Extractor.cpp
decoder/ih264d_parse_pslice.c
decoder/ih264d_api.c
decoder/ih264d_parse_slice.c
drivers/misc/qseecom.c
media/libeffects/lvm/wrapper/Bundle/EffectBundle.cpp
CORE/HDD/src/wlan_hdd_cfg80211.c
app/aboot/aboot.c
decoder/ihevcd_parse_headers.c
services/audioflinger/Effects.cpp
decoder/impeg2d_dec_hdr.c
decoder/ih264d_parse_headers.c
com/android/server/am/ActivityManagerService.java
post_proc/equalizer.c
#
26
23
20
17
17
17
15
14
14
14
13
11
11
10
drivers in the kernel. Second, the vulnerable Wi-Fi modules appear
in not only the kernel layer but also the framework and application
layers. In particular, the Wi-Fi driver and the Wi-Fi framework are
the mostly affected module in the corresponding layers, with 142
and 25 vulnerabilities, respectively. Third, the telephony-related
modules are also of high risk with 12 vulnerabilities in the appli-
cation layer, five vulnerabilities in the framework, and one vul-
nerability in the hardware abstract layer. Additionally, some other
hardware-related modules, e.g., camera, also appear in both the
native libraries and the kernel.
We further take a close look at the code that was frequently
reported as vulnerable. Table 3 lists the top one that appears in
Linux KernelHardware Abstract Layer (HAL)Native LibrariesAndroidRuntimeApplication FrameworkSystem Applications65.7%0.96%2.20%23.9%4.82%2.43%Hardware Drivers: 734Media: 20Telephony: 1Dalvik/ART: 6Core Libs: 42Wi-Fi: 25Activity Manager: 11System Server: 9System UI: 6Telephony: 5Location Manager: 3Package Manager: 3Sync Mgr: 3Lock Setting: 2Account Manager: 2Window Manager: 2Webkit: 2Others: 32Media Frame-work: 230Media Libs: 166Bluetooth: 43SSL: 13LibXML2: 8LibC: 6LibGDX: 6Camera: 13SEPolicy: 3FreeType: 2SQLite: 2Others: 38Telephony: 12Bluetooth: 5Setting: 8Email: 7Messaging: 6Setup Wizard: 6Wi-Fi: 2NFC: 2Others: 5Wi-Fi: 142Linux: 80Sound: 62Video: 61Boot Loader: 53Camera: 47Network: 39TouchScreen: 28File System: 25USB: 19GPU: 52Crypto: 17Memory: 16Power: 11Trustzone: 8Others: 370246810# Patched Code Files0.00.20.40.60.81.0CDFSession 4A: Mobile SecurityAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand301each automatically generated cluster. Moreover, most of the pat-
terns correspond to only one cluster, with just five patterns merged
from multiple clusters each. In the second last column, we further
determine whether these patterns were previously known in the
literature and identify six new ones (marked with ✗). Additionally,
there are three patterns not fully covered by the literature (marked
with(cid:72)(cid:35)).
We now explain all the 16 patterns in details. We first analyze six
new patterns one by one, and then introduce two more Android-
specific patterns and eight traditional patterns.
P1 (new): Kernel address leakage due to %p. This vulnerabil-
ity originates from a type of security bugs exposed recently in the
Linux kernel (Kernel 4.14 and earlier), where printing kernel ad-
dresses to user space using %p can leak sensitive information about
kernel memory layout. Timely mitigation is to replace %p with %pK
to print only Zeros as address (see code example C5 in Table 4).
One year later in late 2017, a fundamental fix [5] was released by
printing only hashed addresses via %p. With the pattern %p -->
%pK, we identify a total of 28 such vulnerabilities in our entire patch
code dataset of 1,158 distinct vulnerabilities.
P2 (new): Mis-retrieving Android service by reference. This
vulnerability is quite specific to Android, where system processes
need to retrieve various Android system services, e.g., camera ser-
vice as shown in code C4. Android system developers previously
obtained these services by reference (i.e., sp<>&); however, such ser-
vice pointers can be cleared out by another thread or system Binder
death callback. Therefore, a safe way is to retrieve these services
by value (i.e., sp<>). In our patch code dataset, 10 vulnerabilities
suffered from this issue.
P3 (new): Inconsistent Android Parcelable serialization. This
vulnerability is also specific to Android, where structured data shar-
ing across different processes requires serializing and deserializing
custom Parcelable objects. Inconsistency happens if data types in
writeToParcel() and readFromParcel() are not symmetric, and
an adversary could exploit such inconsistency to elevate privileges.
For example, in code C1, a long integer was written but a nor-
mal integer was read. Other data types, e.g., byte and string, could
also be misused. Moreover, different control-flow branches could
make it easier for developers to make mistakes, and therefore we
also see fixes like adding writeInt() in the else branch. Seven
inconsistent serialization bugs were identified.
P9 (new): Incomplete C++ destruction. This type of vulnera-
bilities appears in some Android media encoders, where the C++
destruction is not fully finished and some memory buffers could
still be controlled by attackers. To make the destruction more fo-
cused and clearer, a standalone onReset() is added to destruct all
relevant member variables.
P12 (new): Missing certain parameter, causing logic flaws.
Mitigating this type of vulnerabilities requires adding certain pa-
rameters and their handling logic. For example, in code C7 (CVE-
2015-3865), a new parameter called zygote was added. Code was
also added to check fir this parameter to enable debugging only
for apps forked from zygote. Detailed logic flaws in this vulnerabil-
ity pattern could be different, but they all relate to the missing of
certain parameters and the corresponding handling logic.
P14 (new): Forgetting to set certain variable const/tran-
sient. The last new pattern is about the use of const and transient
Figure 7: CDF plot of # code lines changed per vulnerability.
largest number of code files patched among all vulnerabilities. In
another instance, CVE-2017-13177 adds the push-pop instructions
in around 60 different ARM Neon 32-bit functions [3].
We further study at the granularity of code lines and draw the
CDF of the number of code lines changed per vulnerability in Fig-
ure 7. We find that half of the vulnerabilities can be fixed in fewer
than 10 lines of code, with the median being nine. Moreover, a third
of the vulnerabilities are patchable with no more than five lines,
and around one fifth require no more than two lines of changes.
In particular, 110 out of 1,158 vulnerabilities can be patched with
only one line code change. All these indicate that many Android
vulnerabilities are likely implementation bugs.
Key Takeaway: A significant portion of the Android vulnerabilities
involves non-complex patch fixes, with 60% requiring only one file
change and with 50% fixable in fewer than 10 lines of code. This
indicates that many Android issues are likely implementation bugs.