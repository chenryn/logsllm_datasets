title:Detecting Android Root Exploits by Learning from Root Providers
author:Ioannis Gasparis and
Zhiyun Qian and
Chengyu Song and
Srikanth V. Krishnamurthy
Detecting Android Root Exploits by  
Learning from Root Providers
Ioannis Gasparis, Zhiyun Qian, Chengyu Song, and Srikanth V. Krishnamurthy,  
University of California, Riverside
https://www.usenix.org/conference/usenixsecurity17/technical-sessions/presentation/gasparis
This paper is included in the Proceedings of the 26th USENIX Security SymposiumAugust 16–18, 2017 • Vancouver, BC, CanadaISBN 978-1-931971-40-9Open access to the Proceedings of the 26th USENIX Security Symposium is sponsored by USENIXDetecting Android Root Exploits by Learning from Root Providers
Ioannis Gasparis
University of California, Riverside
PI:EMAIL
Chengyu Song
University of California, Riverside
PI:EMAIL
Zhiyun Qian
University of California, Riverside
PI:EMAIL
Srikanth V. Krishnamurthy
University of California, Riverside
PI:EMAIL
Abstract
Malware that are capable of rooting Android phones are
arguably, the most dangerous ones. Unfortunately, de-
tecting the presence of root exploits in malware is a very
challenging problem. This is because such malware typ-
ically target speciﬁc Android devices and/or OS versions
and simply abort upon detecting that an expected run-
time environment (e.g., speciﬁc vulnerable device driver
or preconditions) is not present; thus, emulators such
as Google Bouncer fail in triggering and revealing such
root exploits. In this paper, we build a system RootEx-
plorer, to tackle this problem. The key observation that
drives the design of RootExplorer is that, in addition to
malware, there are legitimate commercial grade Android
apps backed by large companies that facilitate the root-
ing of phones, referred to as root providers or one-click
root apps. By conducting extensive analysis on one-
click root apps, RootExplorer learns the precise precon-
ditions and environmental requirements of root exploits.
It then uses this information to construct proper analysis
environments either in an emulator or on a smartphone
testbed to effectively detect embedded root exploits in
malware. Our extensive experimental evaluations with
RootExplorer show that it is able to detect all malware
samples known to perform root exploits and incurs no
false positives. We have also found an app that is cur-
rently available on the markets, that has an embedded
root exploit.
1
Introduction
Android is currently the most popular mobile operating
system in the world, with 1.4 billion users worldwide and
87.5% of the market share [65]. Google, contrary to Ap-
ple (wrt iPhone), do not have complete control over ei-
ther the hardware or the software of Android phones. On
the positive side, this allows many hardware and other
third-party vendors to build a competitive, customized,
and diverse ecosystem. But on the other hand, the diver-
sity of Android devices also introduces security issues.
First, the OS update process varies from vendor to ven-
dor (some are faster than others). For example, at the
time of writing, only 29.6% of Android devices on the
market have Marshmallow [40], which was introduced
nearly 2 years ago. Second, the vendor customization of
Android often introduces vulnerabilities at different lev-
els of the software stack including application, OS ker-
nel, and drivers [81, 85, 75, 7, 82]. Consequently, mil-
lions of users are exposed to various critical security vul-
nerabilities that plague such customized, typically older
and unpatched devices [19, 27, 68].
Among all vulnerabilities, arguably the most perni-
cious are privilege escalation vulnerabilities that would
allow attackers to obtain the root privilege – the high-
est privilege on Android. Such attacks are usually re-
ferred to as root exploits. Once it has acquired the root
privilege, an attacker/malware can bypass the Android
sandbox, perform many kinds of malicious activities, and
even erase evidence of compromise. For this reason,
malware with embedded root exploits are on the rise. In-
deed, as apparent in recent news, it has become more
and more common that malware found in third party An-
droid markets or even in the ofﬁcial Google Play store,
contain root exploits. For instance, in June 2016, Trend
Micro reported GODLESS [55] , an Android malware
family that uses multiple root exploits to target a variety
of devices, affecting over 850,000 devices that were run-
ning Android 5.1 or earlier, worldwide. One month later
(July), another Android malware dubbed HummingBad
was reported to have infected more than 85 million de-
vices and was found in 46 different applications, 20 of
which were found on Google Play [45]. In September
2016, a Pokemon Go Guide app spotted in Google’s Play
Store, was found to contain root exploits as well [63];
the app had accumulated over 500,000 downloads by the
time it was spotted and taken down. Considering that
Google has already deployed a cloud-based app vetting
USENIX Association
26th USENIX Security Symposium    1129
service viz.,“Google Bouncer” [39], these repeated in-
stances demonstrate that it is both important and chal-
lenging to detect malware that carry out root exploits.
An even more concerning fact is that the number
of newly discovered privilege escalation vulnerabilities
(e.g.,, kernel vulnerabilities) is also on the rise [2]. Many
of such vulnerabilities, such as DirtyCow [27], can even
be used to root the latest versions of Android. So it is
simply a matter of time before they are leveraged by mal-
ware to attack (potentially a large number of) unpatched
devices.
In this paper, we aim to tackle the challenging prob-
lem of detecting malware that employ a variety of root
exploits. The key observation that drives our approach
is that, in the Android world, it is not just the malware
that carry root exploits. There are legitimate and pop-
ular Android applications, often called root providers
or one-click root apps, that root phones on behalf of
users [81]. Many of these apps are commercial-grade
and backed by large companies such as Tencent, Qihoo,
and Baidu. They are capable of rooting tens of thou-
sands of different Android devices using a hundred or
more root exploits [81]. Note that rooting (as well as jail-
break) is considered legal [21], and users do want to root
their phones to remove bloatware or unlock new features
that were otherwise not available. These root exploits
can serve as valuable resources towards aiding detection
since they are highly customized (towards speciﬁc de-
vices), reliable, and more importantly are likely to be
used as is, by malware developers (discussed later). This
means we can take advantage of these exploits to build
a system (RootExplorer) that automatically extracts sig-
natures from root exploits, and use those signatures for
runtime malware detection.
Unfortunately, this seemingly simple strategy is not
easy to realize in practice. The big obstacle is that al-
most all exploits are tailored towards speciﬁc Android
devices, models, and/or OS versions. Screening apps
in an emulator is unlikely to trigger and reveal the ex-
ploit, unless the environment matches exactly what the
exploit expects. This in turn means that one may need
tens of thousands of real Android devices to cover just
all known root exploits. To overcome this obstacle, Roo-
tExplorer also learns the environment requirements from
the aforementioned commercial root exploits and uses
this knowledge to create the “expected” runtime environ-
ment so that it is capable of interacting with the exploits
to drive their execution (e.g., by pretending that a partic-
ular vulnerable device exists).
We design, prototype and extensively evaluate Root-
Explorer to detect root exploits present in malware. It
consists of (a) an ofﬂine training phase where it extracts
useful information about root exploits from one-click
root apps using behavior analysis, and (b) an online de-
tection phase where it dynamically analyzes apps in spe-
cially tailored environments to detect root exploits. We
test our prototype with a large set of benign apps, known
malware, and apps from third-party app marketplaces.
Our evaluations show that RootExplorer yields an almost
perfect true positive rate with no false positives. RootEx-
plorer also found an app that is currently available on the
markets, that contains root exploits.
In summary, the contributions are as follows:
• We identify and address the fundamental challenge of
detecting Android root exploits that target a diverse
set of Android devices. In particular, we learn from
commercial one-click root apps which have done the
“homework” for us with regards to (a) what environ-
mental features are sought and (b) what pre-conditions
need to be met, for a root exploit to be triggered.
• We design and implement RootExplorer, a fully auto-
mated system that uses the learning from commercial
one-click root apps to detect malware carrying root
exploits. Speciﬁcally, in an ofﬂine phase, it conducts
extensive static analysis to understand the precise en-
vironment requirements and the attack proﬁle of the
exploits.
It then utilizes the learned information to
construct proper analysis environments and detects at-
tempted exploits.
• We evaluate RootExplorer via extensive experiments
and ﬁnd that it can successfully detect all known mal-
ware that contain root exploits, including very recently
discovered exploits and the ones that are used in other
one-click root apps; RootExplorer results in no false
positives with our test set. Using RootExplorer, we
also ﬁnd an app which is currently available on an An-
droid market, that contains root exploits.
2 Background & Related Work
2.1 Root Exploits and One-Click Root
Apps
As mentioned, one-click root apps are very popular
among users and they are competing against each other
to be able to root more phones and offer more reliable
results. One of the reasons that companies develop these
apps is that they also develop security apps or app man-
agement tools that also require the root privilege to func-
tion correctly (e.g., antivirus software must have higher
privileges than any malware [13]);
Interestingly, the competition between these one-click
root apps have driven them to include the most com-
prehensive and advanced root exploits. For example, in
2015, it was reported that there are 39 families of di-
rectly usable root exploits that can be found publicly
(with source code or binaries); in contrast, there were
1130    26th USENIX Security Symposium
USENIX Association
59 families of root exploits found in a popular commer-
cial one-click root apps, including exploits against pub-
licly unknown or zero-day vulnerabilities [81], and ex-
ploits that can bypass advanced defense mechanisms like
SELinux [41], Veriﬁed Boot [42], etc. On the contrary,
although researchers have detected several malware fam-
ilies with root exploits, none of them contain previously
unknown exploits [86]. We believe this is because most
malware authors, except the so-called state sponsored,
do not have the capability to develop new root exploits;
hence, they typically only embed exploits that are devel-
oped by others (e.g., one-click root apps).
While detecting malicious behaviors has been the fo-
cus of many prior efforts in the literature, detecting An-
droid root exploits faces unique challenges. One such
challenge is that speciﬁc preconditions (e.g., environ-
ment constraints) need to be satisﬁed in order for such
exploits to be triggered; this is hard because of the highly
fragmented Android hardware and software. Speciﬁ-
cally, not only do different phones have different de-
vice(s) and corresponding driver(s), even with respect
to a universal kernel vulnerability such as the futex
bug [31], the root exploit has to be tailored for differ-
ent phones. This is because the actual kernels on differ-
ent phones are different (e.g., each has a different mem-
ory layout). As a matter of fact, one commercial one-
click root app contains 89 different exploit payloads for
the same underlying futex bug [81]. Consequently, mal-
ware carrying root exploits typically have speciﬁc en-
vironment checks to determine (1) what kinds of vul-
nerabilities are available and (2) how the attack should
be launched. Thus, in order to detect a root exploit, an
analysis environment must satisfy the necessary precon-
ditions.
We categorize these preconditions into two corre-
sponding types: (1) environment checks and (2) prepa-
ration checks. Environment checks gather information
with regards to the environment such as the device type,
model, and operating system versions. For instance,
many times a particular malware will check whether it
has a matching exploit for the current environment. If
so, the speciﬁc exploit is selected from either a set of lo-
cal exploits or a remote exploit database. This process
is in fact also used by one-click root apps [81]. Prepara-
tion checks verify that the interactions with the underly-
ing operating system are as expected, (e.g., a vulnerable
device ﬁle exists on the system and the driver returns ex-
pected results in response to speciﬁc commands). The
number of preparation checks can be large, depending
on the nature and complexity of the root exploits. This
makes it difﬁcult to manually prepare the right environ-
ment for each root exploit and detect them.
2.2 Android Malware Analysis
A relatively large chunk of Android related literature, is
on malware analysis and malicious behavior detection.
However, most of this literature focuses on detecting ma-
licious behaviors like leaking/stealing private informa-
tion and ﬁnancial charging [86]. Unfortunately, no ex-
isting work tackles root exploit detection. We roughly
categorize such work into three types: static analysis, dy-
namic analysis, and hybrid analysis.
Static Analysis: Static analysis is used to analyze an
Android app’s byte code and/or native code without run-
ning it inside an emulator or a real device. To detect
information/privilege leaks, a set of tools [52, 10, 59, 50,
72, 18, 43] has been developed to perform information-
ﬂow analysis. Another popular direction is to model
and detect malicious behaviors that are unique to An-
droid. Pegasus [20] uses “Permission Event Graphs” to
detect sensitive operations performed without the user’s
consent. Apposcopy [29] uses “Inter-Component Call
Graphs” to detect Android malware. AppContext [79]
uses contextual information (UI events and environmen-
tal triggers) to check access to sensitive operations. The
advantage of static analysis is coverage and efﬁciency; it
may however face problems when analyzing apps with
heavy obfuscation. In fact, it has been shown that sim-
ple obfuscation techniques or transformations applied to
known malware samples can often easily evade static de-
tection by anti-virus software [62].
Dynamic Analysis: Dynamic analysis analyzes an An-
droid app by running it inside an emulator or a real de-
vice. Similar to static analysis, many dynamic malware