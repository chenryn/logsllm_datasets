码对不同测试分层
中自动化测试用例
进行规划和设计，自
动化覆盖比较完整 
自动化测试脚本开发采
用数据驱动、关键字驱
动等方法；使用版本控
制系统对自动化测试脚
本进行有效管理 
从代码级、接口级到 UI
级测试实现了端到端的
自动化测试打通；自动化
测试执行效率较高，代码
级测试分钟级，UI 级测
试小时级 
对自动化测试结果具备较
强的自动判断能力，误报
少，可信度高 
4 
对性能、稳定性、可
自动化测试用例脚本间
有组织级的统一自动化
自动化测试数据模型标准
8 
靠性、安全性等非功
能性测试中自动化
用例进行规划和设
计，自动化覆盖完整 
具备独立性和大批量执
行的健壮性 
测试平台，和上下游需
求、故障系统打通；可以
根据需求针对性自动关
联选择自动化测试用例
脚本执行；可以将由于版
本原因导致的失败用例
和故障关联 
化，和上下游需求、故障
等研发数据关联，可以对
自动化测试效果进行度量
分析。例如：需求测试覆
盖率、测试通过率和测试
效率等。 
5 
对故障和测试进行
复盘，对遗漏的测试
用例进行补充，不断
优化和完善，持续提
升覆盖率 
自动化脚本是测试用
例设计的活文档，自动
化脚本开发和测试用
例设计完全统一 
采用企业级统一的自动
化测试平台，以云化的方
式提供测试服务，进行分
布式测试调度执行，提高
测试执行效率和资源利
用率；定期验证自动化执
行策略,持续优化 
对自动化测试结果可以智
能分析，自动分析失败用
例的失败类型及原因，可
以自动向故障管理系统提
交故障，可信度高 
9 部署与发布管理 
部署与发布泛指软件生命周期中，将软件应用系统对用户可见，并提供服务的一系列活动，包括系
统配置，发布，安装等。整个部署发布过程复杂，涉及多个团队之间的协作和交付，需要良好的计划和
演练保证部署发布的正确性。 
其中部署偏向技术实践，即将软件代码，应用，配置和数据库变更应用到测试环境、准生产环境和
生产环境的过程。发布偏向于业务实践，指将部署完成的应用软件功能和服务正式对用户可见，提供线
上服务的过程。部署和发布的有机结合，实现了软件价值向最终用户的交付。  
9.1 部署与发布模式 
部署和发布模式关注交付过程中的具体实践，将部署活动自动化并前移到研发阶段，通过频繁的演
练和实践部署活动，成为研发日常工作的一部分，从而减少最终部署的困难和不确定性，可靠可重复的
完成部署发布任务。部署发布模式通过合理规划，分层实施，一方面减少软件最终上线交付风险，同时
可及时获取用户信息反馈，帮助持续改善整个软件交付过程和软件功能定义。 
级
别 
部署方式 
部署活动 
部署策略 
部署质量 
1 
运维人员手工完成
所有环境的部署 
部署过程复杂不可控，
伴随大量问题和较长的
停机时间 
采用定期大批量部署策
略 
部署整体失败率较高，并
且无法实现回滚，生产问
题只能在线上修复，修复
时间不可控 
2 
运维人员通过自动
化脚本实现部署过
程部分自动化 
部署过程通过流程文档
定义实现标准化整体可
控 
应用作为部署的最小单
位，应用和数据库部署实
现分离，实现测试环境的
自动化部署 
实 现 应 用 部 署 的 回 滚 操
作，部署失败率中等，问
题可及时修复 
3 
部署和发布实现全
使用相同的过程和工具
可运行的环境作为部署
部署活动集成自动化测试
9 
自动化，同时支持数
据库自动化部署 
完成所有环境部署，一
次部署过程中使用相同
的构建产物 
的最小单位，应用和配置
进行分离  
功能，并以测试结果为部
署前置条件 
每次部署活动提供变更对
象范围报告和测试报告 
4 
部署发布服务化，实
现交付团队自助一
键式多环境自动化 
部署过程可灵活响应
业务需求变化，通过合
理组合高效编排 
通过多种部署发布策略
保证流程风险可控，如：
蓝绿部署，金丝雀发布 
建立监控体系跟踪和分析
部署过程，出现问题自动
化降级回滚，失败率较低 
5 
持续优化的部署发
布模式和工具系统
平台 
持续部署，每次变更都
触发一次自动化生产环
境部署过程 
软件交付团队自主进行
安全可靠的部署和发布
活动 
持续优化的部署监控体
系和测试体系，部署失败
率维持在极低水平 
9.2 持续部署流水线 
持续部署流水线是DevOps的核心实践，通过可靠可重复的流水线，打通端到端价值流交付，实现交
付过程中各个环节活动的自动化和可视化。部署流水线通过将复杂的软件交付流程细分为多个阶段，每
个阶段层层递进，提升软件交付质量信心，并且在流水线过程中提供快速反馈，减少后端环节浪费。 
可视化流水线可以增强跨组织的协同效率，提供有效的信息共享平台，从而统一组织目标，并且不
断识别流水线中的约束点和瓶颈，以及潜在的自动化及协作场景，通过持续改进而不断提升软件交付效
率。 
级别 
协作模式 
流水线过程 
过程可视化 
1 
整个软件交付过程严格遵循
预先计划，存在复杂的部门
间协作和等待，只有在开发
完成后才进行测试和部署 
软件交付过程中的大部分工作通
过手工方式完成 
交付过程中的信息是封闭的，交付
状态不可追溯 
2 
通过定义完整的软件交付过
程和清晰的交付规范，保证
团队之间交付的有序 
软件交付过程中的各个环节建立
自动化能力以提升处理效率 
交付过程在团队内部可见，信息在
团队间共享，交付状态可追溯 
3 
团队间交付按照约定由系统
间调用完成，仅在必要环节
进行手工确认 
打通软件交付过程中的各个环
节，建立全流程的自动化能力，
并根据自动化测试结果控制软件
交付质量 
交付过程组织内部可见，团队共享
度量指标 
4 
团队间依赖解耦，可实现独
立安全的自主部署交付 
建立可视化部署流水线，覆盖整
个软件交付过程，每次变更都会
触发完整的自动化部署流水线 
部署流水线全员可见，对过程信息
进行有效聚合分析展示趋势 
5 
持续优化的交付业务组织
灵活响应业务变化改善发
布效率 
持续部署流水线驱动持续改进 
部署流水线过程信息进行数据价
值挖掘，推动业务改进 
10 环境管理 
10 
环境作为DevOps持续敏捷交付过程中最终的承载，环境的生命周期管理、一致性管理、环境的版本
管理都变得非常重要。环境管理是用最小的代价来达到确保一致性的终极目标。 
级
别 
环境类型 
环境构建 
环境依赖与配置管理 
1 
环境类型只有生产环境和
非生产环境的划分 
环境的构建通过人工创建完成 
无依赖管理，环境的管理就是一
个 OS 的交付 
2 
IT 交付过程意识到部分测
试环境的重要性，开始提供
功能测试环境。 
环境构建通过一键化的脚本或者虚
拟机来完成的，构建过程完全黑盒
化完成。 
以应用为中心有 OS 级别的依赖
和配置管理能力，比如说操作系
统版本、组件版本、程序包版本
等等 
3 
持续交付过程意识到研发
环境的重要性，开始提供面
向各类开发者独立的研发
工作区。 
环境的构建通过资源交付平台来
完成，并且底层是由云来交付 
以应用为中心，有服务级依赖的
配置管理能力，比如说依赖的关
联服务，Mysql 服务、cache 服
务、关联应用服务等等 
4 
全面的测试与灰度环境对于
质 量 交 付 过 程 来 说 非 常 重
要，有各类的环境类型划分，
区分了开发者，技术测试及
业务测试环境以及灰度发布
环境等等 
环境的构建可以通过 Docker 容器
化快速交付，低成本构建一个新
的环境 
环境和依赖配置管理可以资源
化描述，类似 dockerfile，大大
提升其配置管理能力 
5 
根据业务与应用的需要，弹
性分配各类环境 
环境的构建结合底层 IT 资源状
况，采用了各类混合 IT 技术，根
据业务及应用架构弹性构建 
环境依赖和配置可以做到实例
级的动态配置管理能力，根据业
务和应用架构的变化而变化 
11 数据管理 
系统开发过程中为了满足不同环境的测试需求，以及保证生产数据的安全，需要人为准备数量庞大
的测试数据，需保证数据的有效性以适应不同的应用程序版本。另外应用程序在运行过程中会产生大量
数据，这些数据天生有状态，同应用程序本身的生命周期不同，作为应用最有价值的内容需要妥善保存，
并随应用程序的升级和回滚进行迁移。 
11.1 测试数据管理 
测试数据需要满足多种测试类型的需求（手工测试，自动化测试），覆盖正常状态，错误状态和边
际状态，测试数据需同时满足测试效率和数据量的要求。测试数据的输入需要受控，并运行在受控环境
中，保证输出的有效性，同时由于持久数据的必要行，要避免数据被未授权的篡改，以影响测试结果的
客观一致性。为了模拟类生产环境系统运行情况，常采用仿生产环境数据，此类测试数据在使用时需要
注意数据安全，避免敏感用户数据泄露，及时进行数据清洗和漂白。 
级
别 
数据来源 
数据覆盖 
数据独立性 
数据安全 
11 
1 
每次测试时手工创
建数据，测试数据都
是临时性的 
测试数据覆盖率低，仅
支持部分测试场景，无
法有效支持测试工作 
测试数据没有版本控制
和备份恢复机制 
测试数据来源复杂，混入
核心生产数据，带来信息
安全风险 
2 
从生产环境导出一
个子集并进行清洗
后，形成基准的测试
数据集，满足部分测
试用例执行要求 
测 试 数 据 覆 盖 主 要 场
景，包括正常类型，错
误类型以及边界类型，
并 进 行 初 步 的 分 类 分
级，满足不同测试类型
需要 
测试数据有明确备份恢
复机制，实现测试数据
复用和保证测试一致性 
测试数据经过清洗，不包