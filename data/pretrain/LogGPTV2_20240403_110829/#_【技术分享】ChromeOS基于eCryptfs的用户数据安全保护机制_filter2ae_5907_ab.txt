使用eCryptfs前，首先需要通过内核的配置选项“CONFIG_ECRYPT_FS=y”使能eCryptfs，因为加解密时使用到内核的crypto和keystore接口，所以要确保“CONFIG_CRYPTO=y”，“CONFIG_KEYS=y”，“CONFIG_ENCRYPTED_KEYS=y”，同时使能相应的加解密算法，如AES等。重新编译内核启动后会自动注册eCryptfs，其init的代码如清单六所示。
**清单六 eCryptfs init过程**
    static int __init ecryptfs_init(void)
    {
    int rc;
    //eCryptfs的extent size不能大于page size
    if (ECRYPTFS_DEFAULT_EXTENT_SIZE > PAGE_CACHE_SIZE) {
    rc = -EINVAL;  ecryptfs_printk(KERN_ERR，…); goto out;
    }
    /*为上文列举到的eCryptfs重要的数据结构对象申请内存，如eCryptfs的auth token、superblock、inode、dentry、file、key等*/
    rc = ecryptfs_init_kmem_caches(); 
    …
     //建立sysfs接口，该接口中的version各bit分别代表eCryptfs支持的能力和属性
    rc = do_sysfs_registration(); 
    …
    //建立kthread，为后续eCryptfs读写lower file时能借助内核函数得到rw的权限
    rc = ecryptfs_init_kthread();
    …
    //在chromeos中该函数为空，直接返回0
    rc = ecryptfs_init_messaging();
    …
    //初始化kernel crypto
    rc = ecryptfs_init_crypto();
    …
    //注册eCryptfs文件系统
    rc = register_filesystem(&ecryptfs_fs_type);
    …
    return rc;
    }
**eCryptfs mount过程**
在使能了eCryptfs的内核，当用户在应用层下发“mount –t ecryptfs src dst
options”指令时触发执行上文清单一中的ecryptfs_mount函数进行文件系统的挂载安装并初始化auth
token，成功执行后完成对src目录的eCryptfs属性的指定，eCryptfs开始正常工作，此后任何在src目录下新建的文件都会被自动加密处理，若之前该目录已有加密文件，此时会被自动解密。
ecryptfs_mount涉及的代码比较多，篇幅有限，化繁为简，函数调用关系如图五所示。
图五 eCryptfs mount的函数调用关系图
从图五可看到mount时首先利用函数ecryptfs_parse_options()对传入的option参数做解析，完成了如下事项：
1\. 调用函数ecryptfs_init_mount_crypt_stat()初始化用于保存auth token相关的 struct
ecryptfs_mount_crypt_stat 对象；
2\. 调用函数ecryptfs_add_global_auth_tok()将从option传入的分别用于FEK和FNEK（File Name
Encryption Key，用于文件名加解密）的auth token的signature保存到struct
ecryptfs_mount_crypt_stat 对象；
3\. 分析option传入参数，初始化struct ecryptfs_mount_crypt_stat
对象的成员，如global_default_cipher_name、global_default_cipher_key_size、flags、global_default_fnek_sig、global_default_fn_cipher_name、global_default_fn_cipher_key_bytes等；
4\. 调用函数ecryptfs_add_new_key_tfm()针对FEK和FNEK的加密算法分别初始化相应的kernel crypto tfm接口；
5\. 调用函数ecryptfs_init_global_auth_toks()将解析option后得到key
sign做为参数利用keyring的request_key接口获取上层应用传入的auth token，并将auth token添加入struct
ecryptfs_mount_crypt_stat 的全局链表中，供后续使用。
接着为eCryptfs创建superblock对象并初始化，具体如下：
通过函数sget()创建eCryptfs类型的superblock；
调用bdi_setup_and_register()函数为eCryptfs的ecryptfs_sb_info 对象初始化及注册数据的回写设备bdi；
初始化eCryptfs superblock对象的各成员，如s_fs_info、s_bdi、s_op、s_d_op等；
然后获取当前挂载点的path并判断是否已经是eCryptfs，同时对执行者的权限做出判断；
再通过ecryptfs_set_superblock_lower()函数将eCryptfs的superblock和当前挂载点上底层文件系统对应的VFS
superblock产生映射关系；
根据传入的mount option参数及VFS映射点superblock的值初始化eCryptfs
superblock对象flag成员，如关键的MS_RDONLY属性；
根据VFS映射点superblock的值初始化eCryptfs superblock对象的其他成员
，如s_maxbytes、s_blocksize、s_stack_depth；
最后设置superblock对象的s_magic为ECRYPTFS_SUPER_MAGIC。这可看出eCryptfs在Linux
kernel的系统架构中，其依赖于VFS并处于VFS之下层，实际文件系统之上层。
下一步到创建eCryptfs的inode并初始化，相应工作通过函数ecryptfs_get_inode()完成，具体包括：
首先获取当前挂载点对应的VFS的inode；
然后调用函数iget5_locked()在挂载的fs中获取或创建一个eCryptfs的inode，并将该inode与挂载点对应的VFS的inode建立映射关系，与superblock类似，eCryptfs的inode对象的部分初始值从其映射的VFS
inode中拷贝，inode
operation由函数ecryptfs_inode_set()发起初始化，根据inode是符号链接还是目录文件还是普通文件分别进行不同的i_op
赋值，如ecryptfs_symlink_iops/ecryptfs_dir_iops/ecryptfs_main_iops；
同时对i_fop file_operations进行赋值，如ecryptfs_dir_fops/ecryptfs_main_fops 。
然后调用d_make_root()函数为之前创建的superblock设置eCryptfs的根目录s_root。
最后通过ecryptfs_set_dentry_private()函数为eCryptfs设置dentry。
****
**加密文件creat过程**
creat过程特指应用层通过creat系统调用创建一个新的加密文件的流程。以应用程序通过creat()函数在以eCryptfs挂载的目录下创建加密文件为例，其函数调用流程如图六所示，creat()通过系统调用进入VFS，后经过层层函数调用，最终调用到eCryptfs层的ecryptfs_create()函数，该部分不属于eCryptfs的重点，不详述。
图六 create经由VFS调用ecryptfs_create的流程
图七 eCryptfs创建加密文件的函数调用过程
eCryptfs层通过ecryptfs_create() 函数完成最终的加密文件的创建，关键代码的调用流程如图七所示，以代码做为视图，分为三大步骤：
一、通过ecryptfs_do_create()函数创建eCryptfs 文件的inode并初始化；
二、通过函数ecryptfs_initialize_file()将新创建的文件初始化成eCryptfs加密文件的格式，添加入诸如加密算法、密钥信息等，为后续的读写操作初始化好crypto接口；
三、通过d_instantiate()函数将步骤一生成的inode信息初始化相应的dentry。具体如下：
**一．为新文件创建inode**
首先借助ecryptfs_dentry_to_lower()函数根据eCryptfs和底层文件系统（在chromeos里就是ext4）的映射关系获取到底层文件系统的dentry值。然后调用vfs_create()函数在底层文件系统上创建inode，紧接着利用__ecryptfs_get_inode()函数创建eCryptfs的inode
对象并初始化以及建立其与底层文件系统inode间的映射关系，之后通过fsstack_copy_attr_times()、fsstack_copy_inode_size()函数利用底层文件系统的inode对象的值初始化eCryptfs
inode的相应值。
**二．初始化eCryptfs新文件**
经过步骤一完成了在底层文件系统上新建了文件，现在通过函数ecryptfs_initialize_file()将该文件设置成eCryptfs加密文件的格式。
1\. ecryptfs_new_file_context()函数完成初始化文件的context，主要包括加密算法cipher、auth
token、生成针对文件加密的随机密钥等，这里使用的关键数据结构是struct
ecryptfs_crypt_stat，具体如清单五所示，初始化文件的context基本可以看成是初始化struct
ecryptfs_crypt_stat对象，该对象的cipher、auth token、key sign等值从mount
eCryptfs传入的option并保存在struct ecryptfs_mount_crypt_stat （详见清单四）对象中获取。具体是：
首先由ecryptfs_set_default_crypt_stat_vals()函数完成flags、extent_size、metadata_size、cipher、key_size、file_version、mount_crypt_stat等ecryptfs_crypt_stat对象的缺省值设置；
然后再通过ecryptfs_copy_mount_wide_flags_to_inode_flags()函数根据mount时设置的ecryptfs_mount_crypt_stat的flags重新设置ecryptfs_crypt_stat对象flags；
接着由ecryptfs_copy_mount_wide_sigs_to_inode_sigs()函数将mount时保存的key
sign赋值给ecryptfs_crypt_stat对象的keysig_list中的节点对象中的keysig；
然后继续将ecryptfs_mount_crypt_stat的cipher、key_size等值赋给ecryptfs_crypt_stat对象中的相应值；再调用函数ecryptfs_generate_new_key()生成key并保存到ecryptfs_crypt_stat对象的key；最后通过ecryptfs_init_crypt_ctx()函数完成kernel
crypto context的初始化，如tfm，为后续的写操作时的加密做好准备。
2\.
ecryptfs_get_lower_file()通过调用底层文件系统的接口打开文件，需要注意的是ecryptfs_privileged_open()，该函数唤醒了上文清单六提到kthread，借助该内核线程，eCryptfs巧妙避开了底层文件的读写权限的限制。
3\. ecryptfs_write_metadata()完成关键的写入eCryptfs文件格式到新创建的文件中。
关键函数ecryptfs_write_headers_virt()的代码如清单七所示，eCryptfs保存格式如清单七的注释（也可参考上文的图四），其格式传承自OpenPGP，最后在ecryptfs_generate_key_packet_set()完成EFEK的生成，并根据token_type的类型是ECRYPTFS_PASSWORD还是ECRYPTFS_PRIVATE_KEY生成不同的OpenPGP的Tag，之后保存到eCryptfs文件头部bytes
26开始的地方。这里以ECRYPTFS_PASSWORD为例，因此bytes 26地址起存放的内容是Tag3和Tag11，对应着EFEK和Key
sign。否则保存的是Tag1，即EFEK。Tag3或Tag1的具体定义详见OpenPGP的描述文档RFC2440.  
之后将生成的eCryptfs文件的头部数据保存到底层文件系统中，该工作由ecryptfs_write_metadata_to_contents()完成。
4\. 最后通过ecryptfs_put_lower_file()将文件改动的所有脏数据回写入磁盘。
**三．通过d_instantiate()函数将步骤一生成的inode信息初始化相应的dentry方便后续的读写操作**
**清单七 写入eCryptfs格式文件的关键函数**
    /* Format version: 1
    *   Header Extent:
     *     Octets 0-7:        Unencrypted file size (big-endian)
     *     Octets 8-15:       eCryptfs special marker
     *     Octets 16-19:      Flags
     *      Octet 16:         File format version number (between 0 and 255)
     *      Octets 17-18:     Reserved
     *      Octet 19:         Bit 1 (lsb): Reserved
     *                        Bit 2: Encrypted?
     *                        Bits 3-8: Reserved
     *     Octets 20-23:      Header extent size (big-endian)
     *     Octets 24-25:      Number of header extents at front of file (big-endian)
     *     Octet  26:        Begin RFC 2440 authentication token packet set
     *   Data Extent 0:        Lower data (CBC encrypted)
     *   Data Extent 1:        Lower data (CBC encrypted)
     *   ...
    */
    static int ecryptfs_write_headers_virt(char *page_virt, size_t max,
           size_t *size,
           struct ecryptfs_crypt_stat *crypt_stat,
           struct dentry *ecryptfs_dentry)
    {
    int rc;
    size_t written;
    size_t offset;
    offset = ECRYPTFS_FILE_SIZE_BYTES;
    write_ecryptfs_marker((page_virt + offset), &written);
    offset += written;
    ecryptfs_write_crypt_stat_flags((page_virt + offset), crypt_stat,
    &written);
    offset += written;
    ecryptfs_write_header_metadata((page_virt + offset), crypt_stat,
           &written);
    offset += written;
    rc = ecryptfs_generate_key_packet_set((page_virt + offset), crypt_stat,
          ecryptfs_dentry, &written,
          max - offset);
    …
    return rc;
    }
**加密文件open过程**
这里open过程主要指通过open系统调用打开一个已存在的加密文件的流程。当应用程序在已完成eCryptfs挂载的目录下open一个已存在的加密文件时（这里以普通文件为例），其系统调用流程如图八所示，经由层层调用后进入ecryptfs_open()函数，由其完成加密文件的metadata分析，然后取出EFEK并使用kernel
crypto解密得到FEK。另外在文中”create过程”分析时，着重介绍了创建eCryptfs格式文件的过程，省略了在完成lookup_open()函数调用后的vfs_open()的分析，它与这里介绍的vfs_open()流程是一样的。需要特别指出的是在do_dentry_open函数里初始化了struct
file的f_mapping成员，让其指向inode->i_mapping；而在上图五的inode的创建函数ecryptfs_inode_set中存在”inode->i_mapping->a_ops
= &ecryptfs_aops”的赋值语句，这为后续的加密文件的页读写时使用的关键对象struct address_space_operations
a_ops做好了初始化。
下面重点介绍ecryptfs_open()函数，其主要的函数调用关系如图九所示。eCryptfs支持Tag3和Tag1的形式保存EFEK，这里的分析默认是采用了Tag3的方式。
图八 create经由VFS调用ecryptfs_create的流程
图九 eCryptfs创建加密文件的函数调用过程
ecryptfs_open()函数的完成的主要功能包括读取底层文件，分析其文件头部的metadata，取出关键的EFEK及key sign，之后根据key
sign从ecryptfs_mount_crypt_stat对象中匹配到相应的auth token，再调用kernel
crypto解密EFEK得到FEK，最后将FEK保存到ecryptfs_crypt_stat的key成员中，完成ecryptfs_crypt_stat对象的初始化，供后续的文件加解密使用。具体如下：
1\. ecryptfs_set_file_private()巧妙的将struct ecryptfs_file_info保存到struct
file的private_data中，完成VFS和eCryptfs之间的链式表达及映射；
2\. ecryptfs_get_lower_file()借助kthread 内核线程巧妙的获取到底层文件的RW权限；
3\. ecryptfs_set_file_lower()完成struct
ecryptfs_file_info的wfi_file和底层文件系统文件lower_file之间的映射；
4\.
read_or_initialize_metadata()完成了ecryptfs_open的大部分功能，首先通过ecryptfs_copy_mount_wide_flags_to_inode_flags()从文件对应的ecryptfs_mount_crypt_stat中拷贝flags对ecryptfs_crypt_stat的flags进行初始化；之后使用函数ecryptfs_read_lower()读取文件的头部数据，紧接着利用ecryptfs_read_headers_virt()进行数据分析和处理，包括：
1)
利用ecryptfs_set_default_sizes()初始化ecryptfs_crypt_stat对象的extent_size、iv_bytes、metadata_size等成员的默认值;
2) 使用ecryptfs_validate_marker()校验文件的marker标记值是否符合eCryptfs文件格式；
3)
通过ecryptfs_process_flags()取出文件metadata保存的flag并修正ecryptfs_crypt_stat对象成员flags的值,同时初始化对象成员file_version；
4)
在parse_header_metadata()分析文件的metadata的大小并保存到ecryptfs_crypt_stat对象成员metadata_size；