title:Are These Pairing Elements Correct?: Automated Verification and Applications
author:Susan Hohenberger and
Satyanarayana Vusirikala
Are These Pairing Elements Correct? Automated Veriﬁcation and
Applications
Susan Hohenberger∗
Satyanarayana Vusirikala†
December 2, 2019
Abstract
Using a set of pairing product equations (PPEs) to verify the correctness of an untrusted set of
pairing elements with respect to another set of trusted elements has numerous cryptographic applications.
These include the design of basic and structure-preserving signature schemes, building oblivious transfer
schemes from “blind” IBE, ﬁnding new veriﬁable random functions and keeping the IBE/ABE authority
“accountable” to the user.
A natural question to ask is: are all trusted-untrusted pairing element groups in the literature PPE
testable? We provide original observations demonstrating that the answer is no, and moreover, it can be
non-trivial to determine whether or not there exists a set of PPEs that can verify some pairing elements
with respect to others. Many IBE schemes have PPE-testable private keys (with respect to the public
parameters), while others, such as those based on dual-system encryption, provably do not.
To aid those wishing to use PPE-based element veriﬁcation in their cryptosystems, we devised rules to
systematically search for a set of PPEs that can verify untrusted elements with respect to a set of trusted
elements. We prove the correctness of each rule and combine them into a main searching algorithm for
which we also prove correctness. We implemented this algorithm in a new software tool, called AutoPPE.
Tested on over two dozen case studies, AutoPPE found a set of PPEs (on schemes where they exist)
usually in just a matter of seconds. This work represents an important step towards the larger goal of
improving the speed and accuracy of pairing-based cryptographic design via computer automation.
1 Introduction
Computer automation is showing great potential to improve the speed and accuracy of the cryptographic
design process. Over the past several years, a host of new software tools, e.g., [7, 6, 5, 15, 18, 16, 12, 13, 11, 17],
were made public for handling a variety of cryptographic tasks, including design, proof generation, and proof
veriﬁcation. Automation is particularly compelling for these tasks, which are often both complex and tedious,
and where a single error can compromise the entire system.
Many of these tools focus on the pairing-based algebraic setting, since it is popular both for its eﬃciency
and functionality. In this work, we focus on automating a novel cryptographic design task in this setting,
which we call pairing-product equation (PPE) testability. Let G1, G2 and GT be groups of prime order
p. Recall that a pairing is an eﬃcient map e : G1 × G2 → GT , such that for all g ∈ G1, h ∈ G2 and
a, b ∈ Zp, it holds that e(ga, hb) = e(g, h)ab. Following [33], a pairing product equation (PPE) over variables
Z,{Xi}m
i=1 is an equation of the form
i=1,{Yi}n
Z · n(cid:89)
e(Ai, Yi) · m(cid:89)
e(Xi, Bi) · m(cid:89)
n(cid:89)
e(Xi, Yj)γij = 1,
i=1
i=1
i=1
j=1
∗Johns Hopkins University. Email: susan@cs.jhu.edu. Supported by Oﬃce of Naval Research contract N00014-19-1-2294,
NSF Frontier CNS-1414023, NSF Medium CNS-1908181, a Microsoft Faculty Fellowship and a Packard Foundation subaward
via UT Austin.
†University of Texas at Austin. Email: satya@cs.utexas.edu. Supported by a UT Austin Provost Fellowship, NSF grants
CNS-1908611 and CNS-1414082, DARPA SafeWare and the Packard Foundation.
1
where Ai, Xi ∈ G1, Bi, Yi ∈ G2, Z ∈ GT , γij ∈ Zp.
Informally, PPE testability captures the commonplace task of ﬁguring out a method of verifying one set
of group elements with respect to another set using the pairing map. This is extremely useful when designing
new pairing-based constructions. For instance, the need to verify a signature with respect to a public key
and message; or to verify a veriﬁable random function output and proof with respect to a public key. Let’s
see more examples after formalizing this concept more crisply.
In a nutshell, our research discovered examples illustrating that deciding whether a given cryptographic
scheme supports PPE testability is highly non-trivial. There are natural examples where the answer is
yes, provably no and even unknown. Our contributions in this work are: (1) formalizing the concept of
PPE testability, (2) developing novel techniques to search for a PPE-based veriﬁcation procedure (which we
will call a PPE testing set), (3) proving the correctness of this searching algorithm, (4) implementing this
algorithm as an open source software tool called AutoPPE, (5) reporting on the performance and accuracy
of AutoPPE on over two dozen case studies and (6) documenting provably non-PPE-testable instances.
1.1 Deciding PPE Testability is Non-Trivial
αj
α1
, . . . , gfm(u)
Let’s explore our objective in more detail. Let a PPE problem instance be a set of pairing parameters, a
set of multivariate polynomials f = (f1, . . . , fm) over variables u = (u1, . . . , un) in Zp, a sequence of pairing
group identiﬁers α = (α1, . . . , αm), a set Fixed ⊆ [1, n] and a set Trusted ∈ [1, m]. This instance corresponds
αm ), where the variables ui ∈ u for i ∈ Fixed are
to a set of group elements of the form F = (gf1(u)
chosen by the “trusted” source and the polynomials fi ∈ F for i ∈ Trusted are only over these ﬁxed variables.
The goal of our work is that given a PPE problem instance, is there an eﬃcient algorithm for deciding
, for all j (cid:54)∈ Trusted,
the existence of (and if yes, producing) a set of PPEs that will verify that Fj = gfj (u)
for any setting of u. Intuitively, if we assume the trusted elements are correctly formed, can we verify that
the untrusted ones are correctly formed too, using PPEs? (We will not concern ourselves with the case
that the trusted elements are not well formed.) If the answer is yes, then we say that this PPE problem
instance is PPE testable. In Section 2, we will provide formal deﬁnitions for a PPE problem instance and
PPE testability.
Let’s explore these notions with some examples set in the Type I pairing setting, where G1 = G2. Suppose
we have public parameters (g, ga, gb) and want to verify if a value T is gab or not. Can we do this with
a PPE? Easy: check that e(ga, gb) = e(T, g). Here, we’d have f = (f1 = 1, f2 = u1, f3 = u2, f4 = u1u2)
with α = (G1, G1, G1, G1), u = (u1, u2), Fixed = {1, 2} and Trusted = {1, 2, 3}. Here’s another PPE
testable example with some variables not in Fixed. Suppose the public parameters are (g, ga) and we want
to test the elements (T1, T2) = (gr, gar). Here, we’d have f = (f1 = 1, f2 = u1, f3 = u2, f4 = u1u2) with
α = (G1, G1, G1, G1), u = (u1, u2), Fixed = {1} and Trusted = {1, 2} and the PPE as e(ga, T1) = e(T2, g).
Next, let’s see a simple example that is not PPE testable. Suppose we have public parameters (g, ga, gb, gc)
and want to verify if a value T is gabc or not. Here, we’d have f = (f1 = 1, f2 = u1, f3 = u2, f4 = u3, f5 =
u1u2u3) with α = (G1, G1, G1, G1, G1), u = (u1, u2, u3), Fixed = {1, 2, 3} and Trusted = {1, 2, 3, 4}. However,
this problem is the Decisional Bilinear Diﬃe-Hellman (DBDH) problem, so this would not be a PPE testable
instance in any group where the DBDH assumption holds.
There are many encryption systems where an authority distributes private keys to users, and the user
would like to verify that their key was correctly formed (i.e., per the key generation procedure). This
comes up in IBE to signature design [22], realizing “blind IBE” to build oblivious transfer [32], and keep-
ing the IBE authority “accountable” to the user [30, 31]. We discuss these applications in more detail
soon, but think a moment about how the reader would approach PPE testing for the Waters dual system
IBE [46]. Set in a Type I group, the Setup algorithm chooses random generators g, v, v1, v2, w, u, h and
exponents a1, a2, b, α ∈ Zp, sets τ1 = vva1
2 , and then publishes the public parameters as
2 , w, u, h, e(g, g)αa1b). How would one then verify a private key for
pp = (gb, ga1, ga2, gba1 , gba2, τ1, τ2, τ b
1 and τ2 = vva2
1 , τ b
2
identity id of the form (D1, . . . , D7, K, t), where r1, r2, z1, z2, t ∈ Zp, r = r1 + r2 and
D1 = gαa1 vr D2 = g−αvr
D4 = v2gz2 D5 = (gb)−z2 D6 = gr2b
1gz1 D3 = (gb)−z1
D7 = gr1 K = (uidwth)r1
This is just the IBE scheme and not the HIBE! And lest the reader shrug this oﬀ as too complicated to
actually be of interest for PPE testability, we counter that there are documented examples, e.g., Abe et
al. [1], verifying derivatives of these private keys with PPEs to use as the base of a structure-preserving
signature scheme. Indeed, when looking at IBEs of this complexity and even more advanced attribute-based
encryption schemes, etc., we hope to persuade the reader to appreciate the value of having a software tool
do this work rather than a human.
So, ultimately, why did Abe et al. [1] settle for a (less secure) derivative scheme instead of devising PPEs
to test the Waters09 IBE private keys? To our surprise, we have the following:
Claim 1.1 (Informal). The public parameters and private keys for the Waters09 IBE [46] are not PPE
testable, under the DBDH and Decision Linear assumptions.
Waters proves this IBE system secure under the DBDH and Decision Linear assumptions. However, as
part of his dual system security proof, he argues that under these assumptions no polynomial-time adversary
can distinguish a real private key (generated by the key generation algorithm) from a “semi-functional”
private key (used in the proof of security). In his construction, there is no overlap between the real and
semi-functional key spaces. Thus, to be PPE testable, there must exist a PPE testing set that accepts all real
private keys, but rejects all semi-functional keys. However, Waters argues that, under DBDH and Decision
Linear, there is no eﬃcient algorithm capable of making this bifurcation.
This is certainly a curious counterexample to the thinking that this problem would be easy, and it was
not the only curious example we discovered (see the discussion of the Boyen-Waters anonymous IBE and the
Dodis VRF in Section 5.6). However, we were encouraged by our results that show that the vast majority
of our test cases were PPE testable and, moreover, that our searching algorithm was able to ﬁnd them in
usually a matter of seconds. We describe how we systemically search for a PPE testing set in Section 4.
1.2 Applications of PPE Testability
Pairing-based schemes are prevalent for their eﬃciency and functionality. There are a host of applications
where one wants to verify some Untrusted pairing elements with respect to a set of Trusted elements. For
starters, this is the basic goal of a signature scheme where the purported signature is Untrusted and the
veriﬁcation key and message are Trusted. Likewise, in a veriﬁable random function, one is given a function
output with a proof that are Untrusted and one needs to verify them with respect to a Trusted public key.
One can see expanding this to verifying anonymous credentials, e-cash and more.
There are also several interesting applications for this when using identity-based encryption (IBE)
schemes. First, per Naor’s observation in [22], any identity-based encryption (IBE) scheme gives rise to
a signature scheme, where the veriﬁcation key is the public parameters and the signature on message m is
a private key for identity m. Naor’s suggested veriﬁcation procedure is to encrypt a random message under
identity m and then try to decrypt it using the purported signature as the private key. This randomized and
rather ineﬃcient veriﬁcation procedure is often replaced in practice by a direct veriﬁcation of the signature
elements using a set of pairing-product equations. The signature schemes derived from IBEs with PPE-
veriﬁcation often possess a “structure-preserving” feature that make them particularly useful and eﬃcient
as a building block in larger systems, such as anonymous credentials.
A second example is the Blind IBE used to build adaptive oblivious transfer schemes by Green and
Hohenberger [32]. In their oblivious transfer scheme, the Sender acts as the master authority in an IBE
scheme and encrypts each message mi under identity i. To retrieve a message mj, the Receiver engages in a
“blind” key extraction protocol with the Sender, so that at the end of the protocol the Receiver obtains the
3
private key for identity j and the Sender does not learn j. As part of this blind key extraction protocol, the
Receiver uses a set of PPEs to verify the correctness of the private key for identity j.
A third example is Accountable Authority IBE introduced by Goyal [30] and expanded on by Goyal, Lu,
Sahai and Waters [31], where should a decryption key or program for that user’s identity be found online,
there exists a mechanism for the user to prove to a judge that it was the authority and not her that leaked
this information. Again, since the user does not fully trust the authority that provides her with a private
key, the authors require an eﬃcient method (via a set of PPEs) to verify the well-formedness of the key she
obtains.
Finally, this goal of having the user verify the private key given by a master authority translates over
nicely as well to the ciphertext-policy attribute-based encryption setting, where the authority purports to
give the user a key representing a set of attributes. As the complexity of the system increases (to ABE and
beyond), the ability to derive the set of PPEs automatically becomes increasingly attractive.
1.3 Related Work
The eﬀort to automate cryptographic design and veriﬁcation tasks has been gaining momentum and enjoying
much success in the last few years.
In 2014, Barthe, Fagerholm, et al. [13] put forward the GGA tool for automatically analyzing (bounded)
cryptographic assumptions in the generic group model. This tool was extended to unbounded assumptions
by Ambrona, Barthe and Schmidt [10]. Shortly thereafter, Ambrona, Barthe, Gay and Wee [9] showed
how to apply this computer-aided reasoning to the design of complex cryptographic constructions, such as
attribute-based encryption systems. We use the GGA tool as one piece of the AutoPPE tool.
In other related work, Barthe, Fagerholm, Fiore, Scedrov, Schmidt and Tibouchi [14] built an automated
tool to design optimal structure-preserving signatures in Type II pairing groups. As they state [14], their
“tool can generate automatically and exhaustively all valid structure-preserving signatures within a user-
speciﬁed search space, and analyze their (bounded) security in the generic group model.” Interestingly, some
of the logic they employ in their synthesis algorithm closely resembles our Rule 1 presented in Section 4.2.1.
The AutoPPE tool is designed to be interoperable with several existing open source automation tools,
built by a community of authors, such as: AutoBatch [7, 8] (for batching the veriﬁcation of PPEs), Au-
toStrong [6] (for compiling a signature scheme secure under the standard deﬁnition into one that is strongly
secure), AutoGroup+ [6, 5] (for translating a Type-I pairing scheme into a Type-III pairing scheme; we
also note some nice work on alternative methods for this translation including IPConv [2, 3], although these
are not available as open source at this time), AutoG&P [17] (for automatically proving security of cryp-
tographic constructions based on pairing-based assumptions), and AutoLWE [15] (for semi-automatically
proving security of cryptographic constructions based on the Learning with Errors assumption).
Most of the above examples are for the public key setting, although there have also been elegant automa-
tion results for blockciphers [41] and authenticated encryption [35] as well.
There is also a large-body of impressive work on machine-based cryptographic proof veriﬁcation, such as
Cryptoverif [18], CertiCrypt [16], EasyCrypt [12] and other tools, e.g. [11]. Tying these two bodies of work
together, Barthe et al. [17] provided a tool that translates the proofs output by AutoG&P into a format
veriﬁable by EasyCrypt and similarly Akinyele et al. [4] showed that the proofs output by AutoBatch can
be automatically veriﬁed by EasyCrypt.
2 Preliminaries
We deﬁne the algebraic setting and notation used in throughout this work.
4
2.1 Pairings
Let G1, G2 and GT be groups of prime order p1. A map e : G1 × G2 → GT is an admissible pairing (also
called a bilinear map) if it satisﬁes the following three properties:
1 , gb
1, ga
2) = e(gb
1. Bilinearity: for all g1 ∈ G1, g2 ∈ G2, and a, b ∈ Zp, it holds that e(ga
2 ) = e(g1, g2)ab.
2. Non-degeneracy: if g1 and g2 are generators of G1 and G2, resp., then e(g1, g2) is a generator of GT .
3. Eﬃciency: there exists an eﬃcient method that given any g1 ∈ G1 and g2 ∈ G2, computes e(g1, g2).
A pairing generator PGen is an algorithm that on input a security parameter 1λ, outputs the parameters
for a pairing group (p, g1, g2, gT , G1, G2, GT , e) such that G1, G2 and GT are groups of order p ∈ Θ(2λ) where