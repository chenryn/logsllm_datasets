2.2 w/GPU
2.3.3
2.3.3 w/GPU
4.2.2
4.2.2 w/GPU
Figure 6: GPU-Accelerated Emulator (Windows): Using the
GPU (NVidia 545 GT - 1GB RAM) in Windows did not have a
signiﬁcant effect Note: the scale of this graph is much different
than other FPS graphs in this section.
3.3.1 Hardware components
With errors in hardware design, such as CPU bugs, indistinguish-
able emulation of a processor is an arduous task. Emulation of
a complete hardware system is even more difﬁcult. Since emu-
lated environments must appear similar to a physical device, other
components such as I/O ports, memory management chips and net-
working devices must all somehow be made available to emulated
software. Similar to virtual IDE/SCSI devices exhibiting certain
characteristics that facilitate PC emulator detection [33], differ-
ences can be observed in the Android emulator. We focus on two
classes of differences, those observable due to emulated hardware
(or lack of) and those observable due to omitted software.
Hardware components.
Much like speciﬁc hardware values present in PC components,
values for various hardware components are observable in An-
droid. For example, the CPU serial number is world-readable
as part of /proc/cpuinfo. Emulator CPUs always show a
value of sixteen 0’s, while real ARM CPUs return a unique
16-character hexadecimal string.
Similarly, current CPU fre-
quencies can be retrieved from /sys/devices/system/cpu-
Sensor
Accelerometer
Ambient Temperature
Gravity
Gyroscope
Light
Linear Acceleration
Magnetic Field
Orientation
Pressure
Proximity
Relative Humidity
Rotation Vector
Temperature
Total
d
i
o
r
d
n
A
n
o
i
s
r
e
V
.
o
t
o
M
d
i
o
r
D
g
n
u
s
m
a
S
e
g
r
a
h
C
G
4
O
V
E
C
T
H
y
x
a
l
a
G
s
u
x
e
N
1.5
4.0
2.3
1.5
1.5
2.3
1.5
1.5
1.5
1.5
4.0
2.3
1.5
1
-
-
0
1
-
1
1
0
1
-
-
1
6
1
-
1
1
1
1
1
1
0
1
-
1
0
9
1
-
1
0
1
1
1
1
0
1
-
1
0
8
1
0
2
2
1
2
1
2
1
1
0
2
0
15
Table 5: Sensor types, the earliest version of Android to sup-
port each type, and observed sensor counts on four devices.
/cpu0/cpufreq/cpuinfo_min_f req and max_freq on
a Galaxy Nexus, but these ﬁles are not present in a 4.2.2 emulator.
In addition to board-level design decisions such as the use of
different memory types [38], devices employ a myriad of motion,
environmental and positional hardware sensors often not found on
PCs. Even budget devices often have GPS receivers, Bluetooth,
accelerometers, temperature sensors, ambient light sensors, gravity
sensors, etc. More recent or expensive devices often have addi-
tional capabilities perceived as market-differentiators such as Near
Field Communication (NFC) chips, air pressure sensors, or humid-
ity sensors.
The sensor types supported as of API 14 (Android 4.x) are shown
in Table 5. Some types of sensors are not natively supported on
older devices. Observing the type and quantity of sensors on a
particular device can easily be performed via an the Sensor-
Manager API. The size of the list returned from getSensor-
List() for each type of sensor shown in Table 5 reveals the quan-
tity of each type. Even early devices such as the Motorola Droid
have many types of sensors.
Simply observing the number of devices may be sufﬁcient for
emulator detection, but this metric is relatively easy to spoof by
modifying the SDK. A modiﬁed emulator may simply return lists of
an appropriate size for each sensor type. More advanced emulator
detection could be performed by interacting with each sensor. This
type of emulator detection would require signiﬁcant modiﬁcation to
the emulator, such as emulating the entire functionality of a sensor
along with synthetic data.
Recent versions of the SDK facilitate adding some virtual hard-
ware to an emulator instance. Figure 7 enumerates the conﬁgura-
tion settings for several supported device types, one of each may
be added to an emulator instance. However, this support is limited
to later versions of Android, and the degree to which the virtual
device emulates a physical device varies.
As an example, we implemented an application to continuously
monitor the accelerometer, a very common sensor that requires
no permission to be accessed. Since we are interested gathering
data as close as possible to the real-time readings we poll using
the fastest setting (SENSOR_DELAY_FASTEST). Since the ac-
celerometer measures acceleration (m/s2) along all three axes, we
subtract the acceleration force of gravity (9.81) from the vertical
4521 hw . s e n s o r s . t e m p e r a t u r e = y e s
2 hw . c a m e r a . b a c k = e m u l a t e d
3 hw . gpu . e n a b l e d = y e s
4 hw . gsmModem= y e s
5 hw . s e n s o r s . m a g n e t i c _ f i e l d = y e s
6 hw . a c c e l e r o m e t e r = y e s
7 hw . a u d i o O u t p u t = y e s
8 hw . b a t t e r y = y e s
9 hw . s e n s o r s . p r o x i m i t y = y e s
10 hw . l c d . b a c k l i g h t = y e s
11 hw . s e n s o r s . o r i e n t a t i o n = y e s
12 hw . c a m e r a . f r o n t = e m u l a t e d
13 hw . g p s = y e s
Figure 7: Android Virtual Device (AVD) conﬁguration settings
to add emulated hardware. These settings can be added to the
device ini ﬁle in order to indicate the virtual presence of hard-
ware sensors such as the accelerometer, or temperature sensor.
axis to normalize the recorded values. In this way, an accelerome-
ter of a stationary device should register 0 for all three axes.
Figure 9 shows measurements for a physical device are closely
coupled, but are neither always constant for any axis nor 0. A vir-
tual device with an emulated accelerometer yields exactly the same
value on every axis for every sampled data point. Regardless of
Android version in the emulator or the host OS on which the em-
ulator is used, the values are always 0.0, 9.77622, 0.813417 (x, y,
and z). A device that is actually being used will show a drastically
wider distribution along all axes.
Similar detections can be created for other sensors, either to de-
tect an emulator exactly, via known emulator values, or by deter-
mining a heuristic for detect a physical device based on hardware
ranges. Furthermore, similar detections can be created for other
hardware subsystems such as Bluetooth which is often found on
physical devices but is not present at all in the emulator. Simply
testing to see if a valid handle is returned from Bluetooth-
Adapter.getDefaultAdapter() will indicate that the de-
vice has a Bluetooth capability and is thus a physical device.
Software components relating to hardware.
Detection techniques very similar to the sensor detections dis-
cussed above can be created for the camera(s) and for readings akin
to sensors such as the battery level. The battery could be monitored
over time to ensure the battery level changes or depletes. The ex-
ception, of course, is if the device is plugged in and is thus con-
stantly at 100%. The level and charging status can be observed us-
ing the BatteryManager API as shown in Figure 8. The battery
level on the emulator is exclusively set at 50% or the two compo-
nents are two known constants (level is 0 and scale is 100).
Another detection relates to special software added by manufac-
tures in order to support certain hardware. Manufacturers often
add special hardware to device as a market-differentiator to con-
sumers or in order to take advantage of hardware not natively sup-
ported by Android. Such support is added via kernel modules, and
like many Linux-based systems, Android detections could consist
of looking at what might be loaded from /sys/module or the
/lib/modules directory and what is currently inserted via the
lsmod command or /proc/modules interface. As with other
detection techniques, kernel module detection can take a high-
level approach by counting (a 4.2.2 emulator shows 26, a physical
Galaxy Nexus shows 72), or a more granular approach.
One speciﬁc example of such software is kernel modules added
by Samsung in order to take advantage of Samsung memory and
the proprietary RFS (Robust FAT File System) [38] instead of
y
c
n
e
u
q
e
r
f
 1200
 1000
x
y
z
 800
 600
 400
 200
 0
−2
−1.5
−1
−0.5
 0
 0.5
 1
 1.5
 2
accelerometer value
Figure 9: Accelerometer values: Measurements from 5000 data
points gathered as quickly as possible from a Samsung Galaxy
Nexus (4.2.2) (vertical value adjusted for gravity).
the common Linux Memory Technology Device (MTD) system.
Simply listing /proc/modules on the Samsung Charge reveals
that modules for RFS are loaded on the device. To improve de-
tection, the compiled modules (/lib/modules/rfs_fat.ko
and rfs_glue.ko) can be inspected for modinfo-like informa-
tion or for speciﬁcally known byte sequences.
3.3.2
Software components
In addition to the software that speciﬁcally supports hardware,
consumer Android devices are shipped with a variety of additional
software. This software ranges from pre-installed applications to
services designed speciﬁcally to interface with “cloud” resources
or enable Digital Rights Management (DRM). Clear omissions
from the emulator are the applications and supporting software for
Google’s Internet services. The marketplace application, Google
Play, the Google Maps API, Google Talk, the Google services
used to handle authentication and session information, and other
similar software are found on nearly every consumer Android de-
vice, but are not included in the emulator. Observing Google-
LoginService.apk, GoogleServicesFramework.apk,
Phonesky.apk or Vending.apk in /system/app likely in-
dicates a real device. Carrier-added applications such as Veri-
zon’s backup software (VZWBackupAssistant.apk) can be
observed the same way and similarly indicate real device.
Instead of or in addition to inspecting ﬁles, an API can be used
to query the installed applications in an instance. The Pack-
ageManager’s getInstalledPackages(0) interface can
be used to obtain a list of all installed applications. The list can
then be queried for the Java-style package names such as com.go-
ogle.android.gsf or com.android.vending. The asso-
ciated application for each list item can also be located indirectly
through applicationInfo.sourceDir which will provide
the full path to the APK.
Android’s ContentResolver can also be used to query
the system for the presence of a software service. For instance,
the Google Services Framework identiﬁer can be queried with
ContentResolver.query(content: //com.go-
ogle.android.gsf.services, null,null,"an-
droid_id",null). The emulator does not support this service
and will always return null for this query.
In addition to observing the presence (or absence) of software
services, variations in software component behavior can be ob-
served. For instance, when establishing an interactive shell to an
instance via ADB, the behavior is different between an emulator
453l e v e l = b a t t e r y S t a t u s . g e t I n t E x t r a ( B a t t e r y M a n a g e r . EXTRA_LEVEL , −1) ;
s c a l e = b a t t e r y S t a t u s . g e t I n t E x t r a ( B a t t e r y M a n a g e r . EXTRA_SCALE , −1) ;
1 i n t
2 i n t
3 f l o a t b a t t e r y P c t = l e v e l
4
5 b o o l e a n i s C h a r g i n g = s t a t u s == B a t t e r y M a n a g e r . BATTERY_STATUS_CHARGING | |
6
s t a t u s == B a t t e r y M a n a g e r . BATTERY_STATUS_FULL ;
( f l o a t ) s c a l e ;
/
Figure 8: Battery level emulator detection example. The battery level is obtained via two Android Intents [8]. If batteryPct is exactly
50% or the level is exactly 0 and the scale is exactly 100, the device in question is likely an emulator. The level could be monitored
over time to ensure it varies, and the charging status could be used to determine if the battery should be constant (at 100%).
and a physical device. In particular, in an emulator shell the effec-
tive Linux user id is root (0). This difference is caused by a check in
ADB called should_drop_privileges which inspects two
“read-only” system properties: ro.kernel.qemu and ro.se-
cure. The inspection veriﬁes that the instance is running the em-
ulated kernel and that the “secure” setting is zero meaning that the
root shell should be permitted.1
for
properties
such as