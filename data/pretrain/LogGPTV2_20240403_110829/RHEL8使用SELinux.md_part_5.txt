    ``` screen
    # setsebool -P ssh_sysadm_login on
    ```
2.  创建新用户，将用户添加到 `wheel`{.literal} 用户组中，并将用户映射到
    `sysadm_u`{.literal} SELinux 用户：
    ``` screen
    # adduser -G wheel -Z sysadm_u example.user
    ```
3.  可选：将现有用户映射到 `sysadm_u`{.literal} SELinux
    用户，并将该用户添加到 `wheel`{.literal} 用户组中：
    ``` screen
    # usermod -G wheel -Z sysadm_u example.user
    ```
:::
::: orderedlist
**验证**
1.  检查 `example.user`{.literal} 是否已映射到 `sysadm_u`{.literal}
    SELinux 用户：
    ``` screen
    # semanage login -l | grep example.user
    example.user     sysadm_u    s0-s0:c0.c1023   *
    ```
2.  以 `example.user`{.literal} 身份登录（例如使用
    SSH），并显示用户的安全上下文：
    ``` screen
    [example.user@localhost ~]$ id -Z
    sysadm_u:sysadm_r:sysadm_t:s0-s0:c0.c1023
    ```
3.  切换到 `root`{.literal} 用户：
    ``` screen
    $ sudo -i
    [sudo] password for example.user:
    ```
4.  验证安全性上下文是否保持不变：
    ``` screen
    # id -Z
    sysadm_u:sysadm_r:sysadm_t:s0-s0:c0.c1023
    ```
5.  试用管理任务，例如重启 `sshd`{.literal} 服务：
    ``` screen
    # systemctl restart sshd
    ```
    如果没有输出结果，则代表命令可以成功完成。
    如果该命令没有成功完成，它会输出以下信息：
    ``` screen
    Failed to restart sshd.service: Access denied
    See system logs and 'systemctl status sshd.service' for details.
    ```
:::
:::
::: section
::: titlepage
# []{#managing-confined-and-unconfined-users_using-selinux.html#confining-an-administrator-using-sudo-and-the-sysadm_r-role_managing-confined-and-unconfined-users}使用 sudo 和 sysadm_r 角色限制管理员 {.title}
:::
您可以将具有管理权限的特定用户映射到 `staff_u`{.literal} SELinux
用户，并配置 `sudo`{.literal} 以便用户获得 `sysadm_r`{.literal} SELinux
管理员角色。这个角色允许用户在不拒绝 SELinux
的情况下执行管理任务。当用户登录时，会话会在
`staff_u:staff_r:staff_t`{.literal} SELinux 上下文中运行，当用户使用
`sudo`{.literal} 运行一个命令时，会话会更改为
`staff_u:sysadm_r:sysadm_t`{.literal} 上下文。
默认情况下，Red Hat Enterprise Linux 中的所有 Linux
用户，包括有管理特权的用户，都映射到未限制的 SELinux 用户
`unconfined_u`{.literal}。您可以通过将用户分配给受 SELinux
限制的用户来提高系统安全性。这对遵守 [V-71971
安全技术实施指南](https://rhel7stig.readthedocs.io/en/latest/medium.html#v-71971-the-operating-system-must-prevent-non-privileged-users-from-executing-privileged-functions-to-include-disabling-circumventing-or-altering-implemented-security-safeguards-countermeasures-rhel-07-020020){.link}非常有用。
::: itemizedlist
**先决条件**
-   `root`{.literal} 用户运行没有限制。这是 Red Hat Enterprise Linux
    的默认设置。
:::
::: orderedlist
**流程**
1.  创建新用户，将用户添加到 `wheel`{.literal} 用户组中，并将用户映射到
    `staff_u`{.literal} SELinux 用户：
    ``` screen
    # adduser -G wheel -Z staff_u example.user
    ```
2.  可选：将现有用户映射到 `staff_u`{.literal} SELinux
    用户，并将该用户添加到 `wheel`{.literal} 用户组中：
    ``` screen
    # usermod -G wheel -Z staff_u example.user
    ```
3.  要允许 [*example.user*]{.emphasis} 获取 SELinux 管理员角色，请在
    `/etc/sudoers.d/`{.literal} 目录中创建新文件，例如：
    ``` screen
    # visudo -f /etc/sudoers.d/example.user
    ```
4.  在新文件中添加以下行：
    ``` screen
    example.user  ALL=(ALL) TYPE=sysadm_t ROLE=sysadm_r ALL
    ```
:::
::: orderedlist
**验证**
1.  检查 `example.user`{.literal} 是否已映射到 `staff_u`{.literal}
    SELinux 用户：
    ``` screen
    # semanage login -l | grep example.user
    example.user     staff_u    s0-s0:c0.c1023   *
    ```
2.  以 [*example.user*]{.emphasis} 身份登录（例如使用 SSH），切换到
    `root`{.literal} 用户：
    ``` screen
    [example.user@localhost ~]$ sudo -i
    [sudo] password for example.user:
    ```
3.  显示 `root`{.literal} 安全上下文：
    ``` screen
    # id -Z
    staff_u:sysadm_r:sysadm_t:s0-s0:c0.c1023
    ```
4.  试用管理任务，例如重启 `sshd`{.literal} 服务：
    ``` screen
    # systemctl restart sshd
    ```
    如果没有输出结果，则代表命令可以成功完成。
    如果该命令没有成功完成，它会输出以下信息：
    ``` screen
    Failed to restart sshd.service: Access denied
    See system logs and 'systemctl status sshd.service' for details.
    ```
:::
:::
::: section
::: titlepage
# []{#managing-confined-and-unconfined-users_using-selinux.html#additional_resources}其它资源 {.title}
:::
::: itemizedlist
-   `unconfined_selinux(8)`{.literal}、`user_selinux(8)`{.literal}、`staff_selinux(8)`{.literal}
    和 `sysadm_selinux(8)`{.literal} man page
-   [如何使用 SELinux
    受限用户设置系统](https://access.redhat.com/articles/3263671){.link}
:::
:::
:::
[]{#configuring-selinux-for-applications-and-services-with-non-standard-configurations_using-selinux.html}
::: chapter
::: titlepage
# []{#configuring-selinux-for-applications-and-services-with-non-standard-configurations_using-selinux.html#configuring-selinux-for-applications-and-services-with-non-standard-configurations_using-selinux}第 4 章 为使用非标准配置的应用程序和服务配置 SELinux {.title}
:::
当 SELinux 处于 enforcing
模式时，默认策略是目标（targeted）策略。以下小节提供有关在更改默认配置后为各种服务设置和配置
SELinux 策略的信息，比如端口、数据库位置或者用于进程的文件系统权限。
您了解如何更改非标准端口的 SELinux
类型，识别并修复默认目录更改的不正确的标签，以及使用 SELinux
布尔值调整策略。
::: section
::: titlepage
# []{#configuring-selinux-for-applications-and-services-with-non-standard-configurations_using-selinux.html#customizing-the-selinux-policy-for-the-apache-http-server-in-a-non-standard-configuration_configuring-selinux-for-applications-and-services-with-non-standard-configurations}在非标准配置中为 Apache HTTP 服务器自定义 SELinux 策略 {.title}
:::
您可以将 Apache HTTP
服务器配置为在不同端口中侦听，并在非默认目录中提供内容。要防止 SELinux
拒绝带来的后果，请按照以下步骤调整系统的 SELinux 策略。
::: itemizedlist
**先决条件**
-   已安装 `httpd`{.literal} 软件包，并将 Apache HTTP 服务器配置为侦听
    TCP 端口 3131，并使用 `/var/test_www/`{.literal} 目录而不是默认的
    `/var/www/`{.literal} 目录。
-   在系统中安装了 `policycoreutils-python-utils`{.literal} 和
    `setroubleshoot-server`{.literal} 软件包。
:::
::: orderedlist
**流程**
1.  启动 `httpd`{.literal} 服务并检查状态：
    ``` screen
    # systemctl start httpd
    # systemctl status httpd
    ...
    httpd[14523]: (13)Permission denied: AH00072: make_sock: could not bind to address [::]:3131
    ...
    systemd[1]: Failed to start The Apache HTTP Server.
    ...
    ```
2.  SELinux 策略假设 `httpd`{.literal} 在端口 80 上运行：
    ``` screen
    # semanage port -l | grep http
    http_cache_port_t              tcp      8080, 8118, 8123, 10001-10010
    http_cache_port_t              udp      3130
    http_port_t                    tcp      80, 81, 443, 488, 8008, 8009, 8443, 9000
    pegasus_http_port_t            tcp      5988
    pegasus_https_port_t           tcp      5989
    ```
3.  更改 SELinux 类型端口 3131 使其与端口 80 匹配：
    ``` screen
    # semanage port -a -t http_port_t -p tcp 3131
    ```
4.  再次启动 `httpd`{.literal}：
    ``` screen
    # systemctl start httpd
    ```
5.  但是，内容仍无法访问：
    ``` screen
    # wget localhost:3131/index.html
    ...
    HTTP request sent, awaiting response... 403 Forbidden
    ...
    ```
    使用 `sealert`{.literal} 工具查找原因：
    ``` screen
    # sealert -l "*"
    ...
    SELinux is preventing httpd from getattr access on the file /var/test_www/html/index.html.
    ...
    ```
6.  使用 `matchpathcon`{.literal} 工具比较标准 SELinux 类型和新路径：
    ``` screen
    # matchpathcon /var/www/html /var/test_www/html
    /var/www/html       system_u:object_r:httpd_sys_content_t:s0
    /var/test_www/html  system_u:object_r:var_t:s0
    ```
7.  将新 `/var/test_www/html/`{.literal} 内容目录的 SELinux 类型改为默认
    `/var/www/html`{.literal} 目录的类型：
    ``` screen
    # semanage fcontext -a -e /var/www /var/test_www
    ```
8.  递归重新标记 `/var`{.literal} 目录：
    ``` screen
    # restorecon -Rv /var/
    ...
    Relabeled /var/test_www/html from unconfined_u:object_r:var_t:s0 to unconfined_u:object_r:httpd_sys_content_t:s0
    Relabeled /var/test_www/html/index.html from unconfined_u:object_r:var_t:s0 to unconfined_u:object_r:httpd_sys_content_t:s0
    ```
:::
::: orderedlist
**验证**
1.  检查 `httpd`{.literal} 服务是否正在运行：
    ``` screen
    # systemctl status httpd
    ...
    Active: active (running)
    ...
    systemd[1]: Started The Apache HTTP Server.
    httpd[14888]: Server configured, listening on: port 3131
    ...
    ```
2.  验证 Apache HTTP 服务器提供的内容是否可以访问：
    ``` screen
    # wget localhost:3131/index.html
    ...
    HTTP request sent, awaiting response... 200 OK
    Length: 0 [text/html]
    Saving to: ‘index.html’
    ...
    ```
:::
::: itemizedlist
**其它资源**
-   `semanage(8)`{.literal}、`matchpathcon(8)`{.literal} 和
    `sealert(8)`{.literal} man page。