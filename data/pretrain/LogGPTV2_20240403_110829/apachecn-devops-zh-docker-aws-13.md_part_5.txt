    Properties:
      # ClusterName: todobackend-cluster
      ClusterName: !Sub: ${AWS::StackName}-cluster
  ...
  ...
  MigrateTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      # Family: todobackend-migrate
      Family: !Sub ${AWS::StackName}-migrate
      ...
      ...
  ApplicationTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      # Family: todobackend
      Family: !Ref AWS::StackName
  ...
  ...
```
在前面的示例中，我对以前的配置进行了注释，然后突出显示了所需的新配置。在所有情况下，我们用对栈名的引用替换对 todobackend 的硬编码引用。考虑到 CloudFormation 栈名称在给定的 AWS 帐户和区域内必须是唯一的，这确保了修改后的资源将具有唯一的名称，该名称不会与同一帐户和区域中的其他栈冲突。
为了简单起见，生产环境的云信息栈将使用我们在*管理机密*一章中创建的相同机密。在现实场景中，您将为每个环境维护单独的机密。
有了新的配置文件和模板更改后，在继续下一部分之前，请确保您已经提交并将更改推送到 GitHub:
```
> git add -A
> git commit -a -m "Add prod environment support"
[master a42af8d] Add prod environment support
 2 files changed, 12 insertions(+), 3 deletions(-)
 create mode 100644 prod.json
> git push
...
...
```
# 向管道添加创建变更集操作
我们现在准备向我们的管道添加一个新阶段，将我们的应用部署到生产中。我们将创建这个阶段的第一个动作，创建一个云信息变更集。
在管道的管道详细信息视图中，单击“编辑”按钮，在开发阶段之后添加名为“生产”的新阶段，然后向新阶段添加操作:
![](img/709983ae-b16b-4beb-8387-94be2f9b2b00.png)
Adding a production stage to the pipeline
在“添加操作”对话框中，您需要创建一个类似于为开发阶段创建的部署操作的操作，但有一些变化:
![](img/1b96f366-2196-493a-af18-a12ece18dcb5.png)
Adding a create change set action to the pipeline
如果您将开发阶段的部署操作配置与前面屏幕截图中显示的新的创建更改集操作配置进行比较，除了以下主要区别之外，配置非常相似:
*   动作模式:你将其配置为`create`或`replace`一个变更集，这将只是创建一个新的变更集，而不是部署栈。
*   栈名:因为这个动作与我们的生产环境有关，所以需要配置一个新的栈名，我们称之为`todobackend-prod`。
*   变更集名称:这定义了变更集的名称。我通常只是将其命名为与栈名称相同，因为该操作将在每次执行时创建或替换变更集。
*   模板配置:在这里，您需要引用在前面示例中添加到`todobackend-aws`存储库中的新`prod.json`文件，因为它保存了特定于您的生产环境的输入参数。该文件通过从`todobackend-aws`存储库中创建的`DeploymentRepository`工件提供。
接下来，您需要向下滚动，展开高级部分，使用`Fn::GetParam`语法配置参数覆盖属性，最后，将`ApplicationVersion`和`DeploymentRepository`工件配置为输入工件。这与您之前执行的`dev` / `deploy`动作的配置相同。
# 向管道添加手动批准操作
完成变更集操作的配置后，您需要添加一个位于变更集操作之后的新操作:
![](img/8e665d07-b1fc-496e-aa77-9f0d637f6c89.png)
Adding an approval action to the pipeline
在“添加操作”对话框中，为“操作”类别选择“批准”，然后配置“批准操作集”的操作名称。选择手动审批的审批类型后，请注意，您可以向手动审批请求添加社交网站主题 ARN 和其他信息。然后，这可以用于向审批者发送电子邮件，或者触发 lambda 函数来执行一些自定义操作，例如将消息发布到像 Slack 这样的消息传递工具中。
# 向管道添加部署更改集操作
一旦批准了 ApproveChangeSet 操作，您需要创建的最后一个操作是部署在变更集中创建的变更集:
![](img/8e4948db-2942-4902-9e0b-1ef79d3935f1.png)
Adding an execute change set action to the pipeline
在前面的截图中，我们选择了执行变更集的操作模式，然后在变更集操作中配置了栈名称和变更集名称，它们必须与您之前配置的值相同。
# 部署到生产
在点击前面截图中的添加操作后，新生产阶段的管道配置应该如下所示:
![](img/04e63fe0-ea86-4462-8481-35d21211f1e4.png)
Adding a create change set action to the pipeline
此时，您可以通过单击“保存管道更改”按钮来保存管道更改，并通过单击“释放更改”按钮来测试新的管道阶段，这将强制执行新的管道。管道成功执行构建和开发阶段后，将首次调用生产阶段，由变更集操作创建 CloudFormation 变更集，之后将触发批准操作:
![](img/fe4dfcc1-0aef-4ddd-998c-946d30339bd9.png)
Adding a create change set action to the pipeline
管道现在将等待批准，在这里，批准者通常会通过单击变更集操作的详细信息链接来查看以前创建的变更集:
![](img/ba618105-d503-4550-91a1-8173242461a1.png)
CloudFormation change set
正如您在前面的截图中所看到的，变更集指示将创建栈中的所有资源，假设生产环境当前不存在。考虑到栈将会到位，后续的部署应该几乎没有变化，典型的变化是部署一个新的 Docker 映像。
查看变更集并返回到代码管道详细信息视图后，您现在可以通过单击“查看”按钮来批准(或拒绝)变更集。这将显示“批准或拒绝修订”对话框，您可以在其中添加注释并批准或拒绝更改:
![](img/2af34076-a505-4017-b38f-120ab29e1f8b.png)
Approving or rejecting a manual approval action
如果您单击“批准”，管道将进行下一个操作，即部署与早期变更集操作关联的变更集。对于第一次执行，将部署一个名为`todobackend-prod`的新栈，一旦完成，您就已经使用 CodePipeline 成功部署了一个全新的生产环境！
此时，您应该按照*使用 ECS* 部署应用一章的*部署应用负载平衡器*部分中的步骤，测试并验证您的新栈和应用是否按预期工作，以获取将为您的生产应用端点提供服务的应用负载平衡器端点的域名。我还鼓励您手动触发管道，或者向任一存储库提交测试，然后查看为现有环境的应用部署生成的后续更改集。请注意，您可以选择何时部署到生产环境中。例如，在您选择将下一个版本部署到生产环境之前，您的开发人员可能会多次提交应用更改，每次更改都会自动部署到您的非生产环境中。当您选择部署到生产环境时，您的生产阶段将采用已成功部署到非生产环境的最新版本。
完成生产部署测试后，如果您使用的是免费层帐户，请记住，您现在有多个 EC2 实例和 RDS 实例正在运行，因此您应该考虑拆除您的生产环境，以避免产生费用。
# 摘要
在本章中，您创建了一个端到端的连续交付管道，该管道自动为您的应用测试、构建和发布 Docker 映像，将新的应用更改持续部署到非生产环境中，并允许您在生产环境中执行受控发布，这些发布会生成更改集，并且需要手动批准才能开始部署到生产环境中。
您学习了如何通过将 GitHub 存储库定义为源阶段中的源操作来将它们与 CodePipeline 集成，然后创建了一个构建阶段，使用 CodeBuild 为您的应用测试、构建和发布 Docker 映像。您将构建规范添加到 todobackend 存储库中，CodeBuild 使用它来执行您的构建，并且您创建了一个能够在 Docker 中运行 Docker 的自定义 CodeBuild 容器，以允许您在 Docker Compose 环境中构建 Docker 映像并执行集成和验收测试。
接下来，您在 CodePipeline 中创建了一个部署阶段，它会自动将应用更改部署到现有的 todobackend 栈中，我们在本书中一直在使用该栈。这要求您在源阶段为`todobackend-aws`存储库添加一个新的源操作，这使得云信息栈文件和环境配置文件可以作为工件用于后续的云信息部署操作。您还需要为 todobackend 存储库创建一个输出工件，在这种情况下，它只是捕获在构建阶段构建和发布的 Docker 映像标记，并使其可用于后续阶段。然后，您将该工件作为参数覆盖引用到您的开发阶段部署操作中，用构建操作版本工件中的 Docker 映像标记输出覆盖`ApplicationImageTag`参数。
最后，您扩展了管道以支持生产环境中的受控发布，这需要创建云信息变更集的创建变更集操作、允许某人检查变更集并批准/拒绝它的手动批准操作，以及执行先前生成的变更集的部署操作。
在下一章中，我们将更改轨道并介绍 AWS Fargate 服务，该服务允许您部署 Docker 应用，而无需部署和管理您自己的 ECS 集群和 ECS 容器实例。我们将借此机会通过使用 Fargate 部署 X 射线守护程序来增加对 AWS X 射线服务的支持，并将通过使用 ECS 服务发现来发布守护程序端点。
# 问题
1.  您通常在应用存储库的根目录下包含什么文件来支持 AWS 代码构建？
2.  对/错:AWS CodeBuild 是一个构建服务，它使用 AWS CodeDeploy 加速虚拟机并运行构建脚本。
3.  您需要运行什么 Docker 配置来支持构建 Docker 映像和多容器构建环境？
4.  您希望在部署云信息模板之前查看对其所做的更改。您会使用云信息的什么特性来实现这一点？
5.  当使用代码管道云信息部署操作部署云信息栈时，您为这些操作指定的服务角色必须信任哪个服务？
6.  您设置了一个新的代码构建项目，该项目包括一个发布到弹性容器注册表的构建任务。当您尝试发布映像时，第一次构建会失败。您确认目标 ECR 存储库存在，并且您可以自己手动将映像发布到存储库。这个问题的可能原因是什么？
7.  您为发布到 ECR 的代码构建创建一个自定义构建容器，并创建一个存储库策略，允许 ECR 从您的 AWS 帐户进行拉取访问。执行生成时，您会收到指示代码生成无法重试自定义映像的失败。你会如何解决这个问题？
8.  您可以创建一个自定义构建容器，该容器使用 Docker 中的 Docker 来支持 Docker 映像构建。当构建容器启动并且您尝试启动 Docker 守护程序时，会出现权限错误。你会如何解决这个问题？
# 进一步阅读
有关本章所涵盖主题的更多信息，您可以查看以下链接:
*   CodePipeline 用户指南:[https://docs . AWS . Amazon . com/CodePipeline/latest/User Guide/welcome . html](https://docs.aws.amazon.com/codepipeline/latest/userguide/welcome.html)
*   CodeBuild 用户指南:[https://docs . AWS . Amazon . com/CodeBuild/latest/User Guide/welcome . html](https://docs.aws.amazon.com/codebuild/latest/userguide/welcome.html)
*   代码构建的构建规范参考:[https://docs . AWS . Amazon . com/code build/latest/user guide/build-spec-ref . html](https://docs.aws.amazon.com/codebuild/latest/userguide/build-spec-ref.html)
*   使用带有代码构建的 AWS 代码管道:[https://docs . AWS . Amazon . com/code build/latest/user guide/如何创建管道. html](https://docs.aws.amazon.com/codebuild/latest/userguide/how-to-create-pipeline.html)
*   AWS CodePipeline 管道结构参考:[https://docs . AWS . Amazon . com/CodePipeline/latest/user guide/Reference-Pipeline-Structure . html](https://docs.aws.amazon.com/codepipeline/latest/userguide/reference-pipeline-structure.html)
*   将参数覆盖函数用于 AWS 代码管道管道:[https://docs . AWS . Amazon . com/AWS cloudinformation/latest/user guide/continuous-delivery-code pipeline-Parameter-Override-Functions . html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/continuous-delivery-codepipeline-parameter-override-functions.html)