due to the real network latency are not considered in our
theoretical calculation.
Result 4. OBLIVP2P-1 is subject to several optimiza-
tions due to its highly parallelizable design.
6 OBLIVP2P-1 Analysis
In this section, we present the theoretical analysis on
computation / communication overhead of tracker / peers
and security analysis for OBLIVP2P-1.
6.1 Performance
We report OBLIVP2P-1 computation and communica-
tion overhead for the tracker and the network in Table 2.
In particular, OBLIVP2P-1’s tracker transmits a number
of bits independent of the block size, the tracker does not
perform any computation on the blocksize or store any
block locally.
Tracker overhead. To fetch a block, the tracker invokes
OblivSel twice. While for the eviction, the tracker per-
ﬁcient to ﬁrst analyze OblivSel overhead and than just
conclude for the overall tracker overhead.
forms OblivSel(cid:31)L· z +|stash|(cid:30) times. That is, it is suf-
Within one instance of OblivSel, the tracker computes
an IT− PIR.Query that outputs m vectors for m peers,
each of size L· z +|stash|. Each IT− PIR.Query vector
costs logq(L· z +|stash|) bits, where q is the group or-
der. The tracker also needs to generate shares for the key,
where the shares are in Zq. That is, one OblivSel costs
the tracker O(cid:31)m· logq· (L· z +|stash|)(cid:30).
That is, the tracker has to transmit O(cid:31)m· logq· (L· z +
|stash|)2(cid:30) bits. Considering L,|stash| ∈ O(logN), q the
group order in poly(N), m the number of peers and z the
bucket size as constants, then the tracker needs to send
O(log3 N) bits independently of the block size. That is,
if block ∈ Ω(log3 N), the tracker has a constant commu-
nication work per block. Moreover, the tracker is very
lightweight as it does not perform any heavy computa-
tion such as encryption, decryption of blocks, which per-
mits the tracker to handle frequent accesses.
Peers overhead. Considering the communication be-
tween the peers,
the main communication overhead
comes from block transfer from the peers holding the
path to the selected m peers. The m peers are se-
lected uniformly at random. Each peer receives (z· L +
|stash|) blocks from the peers in the selected path and the
stash. That is, in terms of communication overhead, the
peers sends on average ∑L
N blocks
per peers in the network. Considering z constant and
L,|stash| ∈O(log N), implies that every peer is expected
to transmit O( logN
In terms of computation, the main computational bot-
tleneck consists of the scalar multiplication from the
seed homomorphic PRG. For every OblivSel, every peer
needs to perform (z· L +|stash|)· B
logq scalar multiplica-
B
tions per block. The second term,
logq, represents the
number of points that a block contains. We also have
(z· L +|stash|) instances of OblivSel during the eviction.
That is, the total number of scalar multiplication equals
logq(cid:30). Finally, the amortized com-
O(cid:31)(z· L +|stash|)2 · B
putation over the total number of peers in the network
equals O( log4 N
N ) multiplications per eviction, consider-
ing B ∈ Ω(log3 N) and q ∈ poly(N).
N ) blocks per access.
i=0
z
2i + (z·L+|stash|)
N
+ z
958  25th USENIX Security Symposium 
USENIX Association
14
6.2 Security Analysis
We show that OBLIVP2P-1 is an oblivious P2P as stated
by Deﬁnition 2.2. For this, it is sufﬁcient to show that an
adversary cannot distinguish between a randomly gener-
ated string and the access pattern leaked by any peer’s
real access. This underlines the fact that the access pat-
tern is independent of the address of the requested block.
In our threat model, the adversary can have access to the
content of buckets, monitors the communication between
the peers, and has a total view of the internal state of dis-
honest peers. Buckets’ content is assumed to be trans-
mitted without any additional layer of encryption.
We present our address-tag experiment AT that
captures our security deﬁnition.
Let OBLIVP2P
= (Setup, Upload, Fetch, Sync) represents an oblivi-
ous P2P protocol.
Let E = (Gen, Enc, Dec) be an
IND$− CPA encryption scheme. Let G be a secure
pseudo-random generator. ATOblivP2P
refers to the in-
stantiation of the address-tag experiment by algorithms
OBLIVP2P, E , G , and adversary A . We denote by Col
the event that m peers in the network collude and set
Pr[Col] = δm, by Bδm the Bernoulli distribution, and λ
the security parameter.
A ,E ,G
Since all Xi’s are independent,
In the following, we ﬁx the number of colluding peers
c ∈ O(Nε ), for 0  1, and ∀ε  1 s.t.
Theorem 6.1.
2logN·m·(1−ε) ∈ negl(λ ), G is a secure pseudo-random
generator, E is IND$− CPA secure, then OBLIVP2P-1
is an oblivious P2P as in Deﬁnition 6.1.
A ,E ,G (λ ,1) = 1]−Pr[ATOblivP2P
Proof. To prove our theorem, we proceed with a succes-
sion of games as follows:
• Game0 is exactly the same as ATOblivP2P
• Game1 is the same as Game0 except that the blocks
in the buckets P(tag,i) are replaced with random
points from G
A ,E ,G (λ ,1)
• Game2 is the same as Game1 except that the the en-
crypted IT− PIR queries are replaced with random
strings
From games’ description, we have
Pr[Game0 = 1] = Pr[ATOblivP2P
A ,E ,G (λ ,1) =1],
(1)
For Game1, we can build a distinguisher B1 that reduces
security of G to PRG security such that:
Pr[Game0 = 1]− Pr[Game1 = 1] ≤ AdvPRG
B1,G (λ ),
(2)
Similarly for Game1, we can build a distinguisher B2 that
reduces E to IND$− CPA security such that:
Pr[Game1 = 1]− Pr[Game2 = 1] ≤ AdvIND$−CPA
B2,E
We need now to compute Pr[Game2].
(λ ),
(3)
Pr[Game2] =Pr[Col]· Pr[Game2 = 1| Col]+
Pr[Col]· Pr[Game2 = 1| Col]
=δm + (1− δm)
1
N
USENIX Association  
25th USENIX Security Symposium  959
A ,E ,G (λ ,0) =1] = 1
N , since the
On the other side Pr[ATOblivP2P
tag is generated uniformly at random for every access.
Pr[Game2]−Pr[ATOblivP2P
From equations 1, 2, 3, and 4 we obtain:
A ,E ,G (λ ,1)]− Pr[ATOblivP2P
) +Adv IND$−CPA
A ,E ,G (λ ,0) =1] ≤
B2,E
A ,E ,G (λ ,0) = 1] = δm(1−
δm(1−
+ AdvPRG
B1,G .
Since δm ∈ O(2logN·m·(ε−1)), this ends our proof.
1
N
) (4)
Pr[ATOblivP2P
1
N
Quantitatively, if the number of peers in the network
equals 220, number of colluding peers in the network is
c = N 1
2 and m = 12, then δ12 = 2−120. Given the number
of colluding peers and total number of peer, the value of
m can always be adjusted to handle the desired colluding
probability δm. In case of churn, the fraction c can vary
and therefore the length of the circuit m has to be adapted
to the new value. Furthermore, we implicitly assumed so
far that no peer among the m selected leaves in the middle
of the OblivSel process. If that occurs, the entire process
has to abort, re-calculates the number of required peers
m, and perform the OblivSel from scratch.
7 Discussion
Existing approaches. A valid question to investigate is
whether existing solutions such as unlinkability or path
non-correlation techniques can be extended to handle
global adversaries and therefore prevent trafﬁc analysis
at the cost of providing more resources. It is easy to see
that unlinkability techniques (e.g., mixnet) can provide
better security in a P2P network under some assump-
tions. As an instance, assuming the case where a large
number of peers behave as senders and issue requests that
will be mixed by sufﬁcient network peers before being
answered by corresponding receivers’ peers. Also, as-
suming that there is at least one honest peer in the mixing
network, this solution would provide slightly the same
level of security as OBLIVP2P where a global adver-
sary cannot distinguish the senders’ peers access pattern.
However, this solution suffers from two downsides. First,
there is a need to have sufﬁcient number of senders’ peers
on-line in order to prevent intersection attacks. That is,
in order to prevent trafﬁc analysis, the number of senders
represents a security parameter of the system that has
to be maintained throughout the entire run of the sys-
tem. Second, as the receivers’ contents are theirs and are
not encrypted, plus, all peers are considered honest-but-
curious, a global adversary can easily ﬁnd out what con-
tent is being accessed independently of the sender iden-
tity. This therefore does not achieve obliviousness as de-
ﬁned in our work but only a weaker version of it. On
the other hand, path non-correlation techniques concep-
tually cannot prevent against global adversary as we have
detailed in Section 2. To sum up, it is not clear if existing
techniques, even if given enough resources, can provide
similar security insurances as those in OBLIVP2P.
Does better network & computation help? As em-
pirically demonstrated in our evaluation section,
the
throughput of OBLIVP2P is around 3.19 MBps while
considering only one tracker in the network. In a plain-
text version of P2P system such as BitTorrent, the net-
work leverages multiple trackers in order to handle more
queries, and therefore increase the overall throughput. In
OBLIVP2P, if we consider multiple copies of the entire
network, we can also handle multiple trackers, and the
throughput is expected to increase linearly with the num-
ber of trackers. However, as we delegate computation to
the peers in OBLIVP2P, increasing the number of track-
ers beyond a particular threshold might turn out to be
useless as the computation would represent a bottleneck
of the system. As future work, we plan to investigate
the asymptotic and empirical implications of including