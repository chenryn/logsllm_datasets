常重要。
持对云服务的访问，用户对数据的访问能力是最重要的，所以这种访问能力的完整性非
那么，将上文的数据完整性定义重新修改一下之后成为，数据完整性意味着用户可以维
整性要求。
这样，从用户的视角来看，即使没有明确写出，每个服务都有独立的在线时间和数据完
问题大多数情况下将会是毁灭性的一
200KB会被损坏），不管它们是文档、可执行文件，还是数据库。这么小的损失带来的
但是，假设我们针对一个2GB的用户数据提供99.99%的数据完整性SLO（也就是有
标准其实很高，很有可能会超出绝大多数互联网用户，甚至是企业用户的预期。
如果某个服务的在线时间SLO是99.99%，那么一整年只能岩机1个小时。这个SLO的
们有另外一种更好的方法来比较数据完整性与系统可用性。
们可能可以接受等待四天时间（肯定会有很多怨言）来恢复自己的历史邮件。然而，我
完整性要求更严格。例如，用户可能无法忍受一个小时的E-mail服务岩机时间，但是他
当考量一个系统的可靠性要求时，系统的“在线时间”（可用性）可能看起来会比数据
数据完整性的强需求
现在，
，假设某个用户数据每年会损坏或者丢失一次。如果这种丢失是无法恢复的，那么
第26章数据完整性：读写一致
。在数据丢失之后才想起来和用户争论对数据完整性的定义是没有意义的！
The service is up.
No it'snot.
一可执行文件会乱码，数据库会彻底无法加载。
Yesit is!
mgoat'sgenet
---
## Page 339
API，而不一定是最优的。
当创新速度压倒一切其他需求时，最终的应用程序肯定会依赖于开发者最熟悉的一系列
的可用性。BASE仅仅保障在某一个数据停止更新之后，在不同的数据存储位置（可能
述5个要求的。
隐私
创新速度
规模
延迟
在线时间
以下是这5个名词的详细定义。
大多数云计算应用都是优化以下5项的某种组合：在线时间、延迟、规模、创新速度和隐私。
寻找。
更复杂的工程力量的投入。在这么多可选项中如何取舍？答案要从我们的服务的定位中
数据在线时间以及数据完整性两者之间取舍。有些策略效果更好，有些策略则需要更多、
针对快速检测及恢复丢失数据有很多可用的策略。
提供超高的数据完整性的策略
注3
注2
注1
下面这个例子，描述了上述5个方面是如何在实际中互相影响的。
是分布各地的）中达到“最终一致”。
用户删掉服务中的数据后，数据必须在合理时间内被真正摧毁。
这个名词的定义比较复杂。简单来说，本章将隐私的定义限制为仅仅针对数据删除：
某个服务能够在合理成本下，为用户提供更好的服务的创新速度。
某个服务的用户数量，以及能够维持正常服务水平的最高负载。
服务对用户的响应时间。
经常也用“可用率（availability）”指代，代表着某个服务可以被用户使用的时间比率。
有关ACID和BASE的更多讨论，请参见文献[Gol14]和[Bai13]。
基本上可用、软状态和最终一致性，
SQL数据库是满足这些条件的例子。
原子性、
一致性、
。注3BASE相比ACID来说，使用更软性的分布式一致性要求来换取更高
隔离和持久性，
可参见https:/len.wikipedia.org/wiki/ACID。MySQL、PostgreSQL等
可参见https://en.wikipedia.org/wiki/Eventual_consistency。Bigtable
。所有这些策略都是在针对用户可见的
数据完整性的强需求
297
342
---
## Page 340
343
298
注4大二进制对象，BinaryLarge Object，可参见htps:/len.wikipedia.org/wiki/Binary_large_object。
人真的想要备份数据，他们只想恢复数据。
点其实是数据恢复，这是区分备份与存档的重要区别。就像一句流行语说的那样：没有
备份与存档
什么地方投入才合适呢？
由于这种依赖关系和复杂交互的存在，我们应该向数据完整性投入多少精力呢？具体向
Megastore内容进行对比，这中间还需要考虑到客户端缓存的数据。
的Megastore 内容与可访问的二进制对象进行对比，或者将复原的二进制对象与复原的
据恢复时，必须将复原的二进制对象与线上Megastore的内容进行对比，或者将恢复
在的复杂数据关系会使数据恢复变得无比复杂。如上述这个例子，该应用程序进行数
除此之外，如果这样一个应用程序依赖的数据存储的备份是独立进行的，而不是彼此
论了一个这样的系统。
平衡各种数据存储的系统就很有必要了。本章后面的“第三层：早期预警”
为了避免应用程序的数据出现问题，影响到最终用户，
环境，没有一个工程师能够理解其中各块数据之间的关系。
功能的不断累积、与其他应用程序整合点的不断增多，最后一定会产生一个极为复杂的
客户端缓存三者之间的一致性。为了追求更快的创新速度，数据结构的改变、数据迁移、
间的“引引用完整性”（referential integrity），如上述例子中的Blobstore、Megastore以及
这种云应用程序会在运行时面临各种各样的数据完整性挑战，例如，不同的数据存储之
要求。为了在一致性方面进行补救：
其实是强调高负载下的可扩展性、高在线率、低延迟和低成本而忽略了分布式一致性的
一般来说，公司会采用某种备份策略来“预防”数据丢失。然而，真正应该被关注的重
·该应用程序必须保证一小块、权威性的元数据存放在某种延迟较高、在线率稍低、
发者对Bigtable更熟悉，而没有考虑到Bigtable在分布式强一致性上的弱点。
其他应用程序可能会简单地将元数据存放在Bigtable中，仅仅是因为应用程序开
对象，从而降低用户可见的延迟。
该应用的某些客户端必须将一部分元数据信息缓存在本地，以便直接访问二进制
和[Lam98]。
成本更高的服务中，例如基于Paxos协议的Megastore中，可参见文献[Bakl1]
第26章数据完整性：读写一致
一个带外系统、专门负责检查和
一节详细讨
---
## Page 341
云计算环境下的需求
备份应该同时使用完整备份、增量备份，或者甚至是流式持续备份手段。
相对存档，当灾难来临的时候，数据必须从真实的备份中快速恢复，最好能维持服务在
数据恢复通常不需要满足服务的在线率要求。例如，我们可能需要将财务交易数据保存
备份与存档最重要的区别就是，备份是可以直接被应用程序重新加载的。因此备份和存
那么，如何评判你的备份是不是只是一个存档，而不是灾难恢复中的可用的“备份”呢？
云计算环境引人了一系列独特的技术难点
少最新数据。
因此，当选择备份策略时，
着备份（而不是存档）应该至少每天进行一次，或者每小时，甚至更短时间内进行一次
尤其考虑到大多数最新产生的数据直到安全备份结束之前都存在丢失的风险，这就意味
复过程完成。
线率的要求。否则的话，受影响的用户将由于数据问题无法使用应用程序，直到数据恢
务审核过程中，这是可以接受的。
的长期存档存储系统上。读取和恢复这样的信息可能需要一周时间，在长达一个月的财
七年时间。为了达到这个目标，我们可以每个月将累积的审核日志迁移到离线的、异地
存档的目的是将数据长时间安全保存，以满足审核、
档的使用场景非常不同。
·如果该环境使用了混合交易型和非交易型的备份和恢复方案，那么最终恢复的数
Areourbackups
率。
同版本之间可能会有多种组合，那么就更加增大了数据意外丢失和损坏发生的概
如果所有其他有交互关系的服务不是同步更新的，那么在更新过程中各服务的不
作数据。
如果某个服务必须在不停机的情况下更新，那么不同版本的逻辑可能同时并行操
据不一定是正确的。
一定要考虑针对某个问题需要的恢复时间，以及可以丢失多
Are they empty
口
Ndoer thkso
、取证和合规要求。在这些情况下的
数据完整性的强需求
Dorestoreswork?
Noideranobd
299
344
---
## Page 342
345
300
但是，故事还没有完！在宣布数据彻底丢失的数天之后，提供商又宣布了用户的个人信
有备份资料都无法用于恢复。愤怒的用户只有两个选择，要么长期使用之前的临时解决
资料确实丢失了一消失了，无法再恢复。一系列保障数据完整性的系统错误导致了所
的解决方案来继续进行业务，同时期待他们可以很快取回他们现有的邮件地址、联系资
达10天的时间内，用户无法访问数据，这就意味着他们需要寻找到某种其他的、临时
始，一直到数据被访问的时候，数据应该保持正确，不会以某种未预知的方式改变。但是，
数据完整性是手段，
来衡量我们运维的系统和流程的能力边界。同时在真实事故发生时，跟踪这些系统和流
需要一些更具体的，易于衡量的目标。SRE会定义一些关键指标，制定对应的测试，用
保障数据完整性和可用性：GoogleSRE的目标
些问题，那么遇到这些问题的应用程序就必须要自己识别和解决这些问题。
前述的API在某种组合使用场景下也会造成某些问题。如果服务提供商没有预先解决这
为复杂，将会由于需要使用不同的、更复杂的API而进行完全重写。
否则的话，复杂应用将没有办法迁移到云上，而简单的应用程序，随着时间推移变得更
特性：
须简单易用，否则就没有人会使用它们。但是同时这些API又必须可靠，以及支持以下
方案，要么彻底抛弃该服务商。
然后，最糟糕的消息来临了：服务提供商宣布之前的预期有误，过去的历史信息和联系
料以及累积的历史信息。
以一个E-mail服务提供商经历的长达一周的数据故障为例（参见文献[Kinc09]）。在长
这样就够了吗？
数据完整性指的是在其生命周期中，数据的准确性和一致性。从数据被记录的那一刻开
程的表现。
更多的是，为了保证扩展性，每个服务提供商都需要提供一定数量的API。这些API必
“保障持久性数据的完整性”是SRE的一个目标。这是一个很好的大方向，但是我们还
数据持久性、备份与灾难恢复。
数据本地性和缓存。
强一致性与/或最终一致性
本地和全局的数据分布。
第26章
数据完整性：读写一致
数据可用性是目标
---
## Page 343
影响范围
如图26-1所示，从很高的角度来看，可以将事故分类为3个因子的24种组合。我们应
造成数据丢失的事故类型
供什么服务：数据可用性的保障。因此，我们不会强迫团队进行“备份”，而是要求：
对整个服务、整个产品，甚至整个公司来说，都是生死攸关的。