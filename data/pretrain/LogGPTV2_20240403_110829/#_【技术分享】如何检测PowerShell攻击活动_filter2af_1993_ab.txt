### 钓鱼攻击中的PowerShell行为及其检测

在钓鱼攻击中，用户经常会被诱导点击并打开嵌有宏（如VBS脚本）的Word文档。这些文档会启动PowerShell进程，从Web端下载恶意数据。以下是几种需要警惕的情况：

1. **PowerShell由`winword.exe`启动**：父进程为`winword.exe`。
2. **PowerShell由`cmd.exe`启动**：父进程为`cmd.exe`，且`cmd.exe`的父进程为`winword.exe`（即PowerShell的祖父进程为`winword.exe`）。
3. **PowerShell由其他进程启动**：父进程为`mshta.exe`、`wscript.exe`、`wuapp.exe`或`tasking.exe`。

例如，执行以下简单脚本后，可以使用PowerMonitor工具观察到进程创建顺序：
```javascript
shell = new ActiveXObject('WScript.Shell');
shell.Run("powershell.exe -Command Invoke-Item c:\\windows\\system32\\calc.exe");
```
在这个例子中，`Wscript.exe`是PowerShell的父进程，而PowerShell则是`conshost.exe`的父进程，最终启动了`calc.exe`。

### 攻击指示器 (IOC)

上述特征可以作为攻击指示器 (Indicator of Compromise, IOC) 使用。通过记录和分析这些特征，可以在实际环境中检测可疑的PowerShell活动。

### 命令行参数的重要性

监控传递给PowerShell进程的命令行参数是检测许多PowerShell攻击活动的关键。例如，如果攻击活动中使用了`DownloadFile()`方法，可以通过命令行参数确定恶意文件的存储路径和来源网站。这有助于进一步评估攻击的操作过程和影响范围。

### Windows安全日志的作用

根据PowerShell版本和操作系统，可以使用多种方法记录相关日志。特别是4688事件（对应进程创建操作），可以帮助识别前文提到的IOC。

#### 启用进程创建审计

默认情况下，进程创建审计功能处于禁用状态。可以通过组策略对象 (GPO) 启用这一功能。更多细节请参考[此处链接](https://docs.microsoft.com/en-us/windows-server/identity/ad-ds/manage/component-updates/command-line-process-auditing)。

#### 记录命令行参数

从Windows 8.1及Windows Server 2012 R2起，Windows系统开始提供命令行审计功能。可以通过GPO启用“Include command line in process creation events”选项来记录命令行参数。更多细节请参考[此处链接](https://docs.microsoft.com/en-us/windows-server/identity/ad-ds/manage/component-updates/command-line-process-auditing)。

对于Windows 7、Server 2008以及Server 2008 R2系统，可以通过系统更新添加这一功能。更多细节请参考这两处链接[[1]](https://technet.microsoft.com/library/security/3004375)[[2]](https://support.microsoft.com/en-in/help/3004375/microsoft-security-advisory-update-to-improve-windows-command-line-aud)。

4688事件提供了三个关键元素，可用于生成警告信息以检测攻击行为：

1. **创建的进程**：通过`New_Process_Name`字段了解创建的是哪个进程。
2. **命令行参数**：通过`Process_Command_Line`字段了解新创建的进程（如PowerShell）使用的命令行参数。
3. **父进程**：Windows 10/Server 2016及更高版本的系统会在`Creator_Process_Name`字段中包含父进程的进程名，之前的版本则在`Creator_Process_ID`字段中包含父进程的进程ID。

#### 示例搜索语句

在Splunk中，可以通过以下搜索语句筛选相关事件：

```spl
index=win_sec EventCode=4688 New_Process_Name="C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe"
```

接下来，分析PowerShell进程初始化过程中传递的命令行参数：

```spl
index=win_sec EventCode=4688 New_Process_Name="C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe" Process_Command_Line=*-c* OR *-Encode* OR *-e* OR *-windowstyle*
```

更好的方法是根据已知的可疑命令行参数构建输入查找清单，并在警告信息中匹配这个清单。

从Windows 10及Windows Server 2016开始，4688事件中添加了`Creator_Process_Name`字段，包含父进程的进程名信息。利用这个字段，可以根据可疑父进程创建警告信息：

```spl
index=win_sec EventCode=4688 New_Process_Name="C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe" Creator_Process_Name="C:\\Program Files\\Microsoft Office\\Office15\\winword.exe" OR Creator_Process_Name="C:\\Windows\\System32\\mshta.exe" OR Creator_Process_Name="C:\\Windows\\System32\\cmd.exe"
```

### 注意事项

PowerShell命令或脚本容易被混淆，攻击者可以使用各种方法绕过静态匹配机制。赛门铁克在其白皮书《THE INCREASED USE OF POWERSHELL IN ATTACKS》中讨论了几种常见的混淆技术：

1. **混用大小写字母**：命令对大小写不敏感。
   ```powershell
   (neW-oBjEct system.NeT.WeBclieNT). dOWNloadfiLe
   ```

2. **拼接字符串**：变量中也可以使用这种技术。
   ```powershell
   (New-Object Net.WebClient). DownloadString("ht" + 'tp://' + $url)
   ```

3. **转义字符**：除了14种特殊场景外，转义字符（`）可以放在某个字符前，不会改变程序执行结果。
   ```powershell
   (new-object net. webclient). "d`o`wnl`oa`dstr`in`g"($url)
   ```

4. **使用数字表示法**：某些变量可以使用其对应的数字表示法替代。
   ```powershell
   -window 1  # 替代 -window hidden
   ```

在实际环境中，监控PowerShell的执行情况非常重要。如果涉及的命令行经过混淆处理，那么这种情况与网络攻击活动挂钩的可能性很大。因此，必须启用4688事件的记录功能，并应用过滤器梳理出与PowerShell进程创建有关的事件，监控PowerShell进程创建过程中传递的命令行参数。

下次遇到类似场景时，请保持冷静，仔细检查。