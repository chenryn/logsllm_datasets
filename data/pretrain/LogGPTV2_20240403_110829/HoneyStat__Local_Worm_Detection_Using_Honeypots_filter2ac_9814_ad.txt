# Infected Number in Honeynet

## (a) D = 216
- **D=210, tr=10, γ=0.7**
- **D=210, tr=10, γ=0.9**
- **D=210, tr=100, γ=0.7**
- **D=210, tr=100, γ=0.9**

## (b) D = 210
- **Effect of HoneyStat Network Size (D), Maximum Percentage of Vulnerable Hosts (γ), and Time to Redeploy After First Victim (tr) on the Victim Count:**
  - These graphs, drawn with α = 0.25, N=500,000, scan rate=20 per time tick, and hit list=1, show that a larger IP space monitored by HoneyStat (D) significantly improves detection time as a percentage of the infected Internet. Even with only 210 IPs monitored, the detection time is quick, requiring only a little more than 1% of the Internet to be infected.

When the first HoneyStat node becomes infected, the other nodes switch to the vulnerable OS. This transition takes time \( tr \), after which there will be \( u_1 = D\gamma \) vulnerable hosts. After redeployment, the probability of getting the next victim increases, as shown in Equation (4). The effect of \( D \), \( \gamma \), and \( tr \) is illustrated in Figure 4. 

From the figure, it is evident that after redeployment, we can quickly obtain enough victims even when the overall infection percentage of the Internet is low. This is because the HoneyStat array switches to match the OS of the first victim, resulting in more vulnerable honeypots and a higher chance of being hit by the worm. For example, with \( \alpha = 0.25 \), \( D = 216 \), \( \gamma = 0.7 \), and \( tr = 10 \), it is still very early to have 4 victims in the HoneyStat network, with only 0.013% of the Internet's vulnerable hosts infected. To have 10 victims, only 0.0261% of the Internet's vulnerable hosts need to be infected. The values of \( tr \) and \( \gamma \) do not significantly affect the outcome; instead, the size of the honeynet \( D \) is the most critical factor. Thus, the delay in switching HoneyStat nodes does not play a significant role in the overall worm detection time.

## Effect of α and D on Time (Infection Percentage)
- **N=500,000, Scan rate=20 per time tick.**
  - In section 4, we noted that machines can be massively multihomed, allowing one piece of hardware to handle hundreds of IP addresses in multiple virtual machines. From the discussion above, 211 is already a reasonable number of IP addresses for local early worm detection. Assuming we have a few computers sufficient to allow \( D = 211 \) and \( \alpha = 0.25 \), the first victim appears when, on average, 0.1959% of the Internet's vulnerable hosts are infected. If \( \gamma = 0.75 \) and \( tr = 10 \), then to have 5 victims in our honeynet (or enough to have a minimal number of data points as suggested in Section 6), it is still very early when only 0.4794% of the Internet's vulnerable hosts are infected. When one IP is infected, we reset the OS so that it can be re-infected. This "replacement" policy ensures the honeynet functions effectively, even with, say, 64 virtual machines running on every GSX server.

## Conclusion
Local detection systems deserve further exploration. We have suggested that in addition to increasing the quantity of data used by alert systems, the quality can also be improved. It has been said that if intrusion detection is like finding a needle in a haystack, then a honeypot is like a stack of needles. Every event from a honeypot is noteworthy, making them highly accurate for generating alert streams. Using logistic regression, we have shown how a honeypot alert stream can detect worm outbreaks. We define three classes of events to capture memory, disk, and network activities of worms. The logit analysis can eliminate noise sampled during these events and identify a likely list of causes. Using extensive data traces of previous worm events, we have demonstrated that HoneyStat can identify worm activity. An analytical model suggests that, with enough multihomed honeypots, this provides an effective way to detect worms early.

While participation in global monitoring efforts is valuable, we believe local network strategies also require exploration. Further work could include identifying additional logistic models to sort through large sets of data, coordinating shared honeypot events, integrating with other intrusion detection techniques, and response.

## Acknowledgments
We thank Christian Kreibich at the University of Cambridge for his helpful comments. This work is supported in part by NSF grants CCR-0133629 and CCR-0208655 and Army Research Office contract DAAD19-01-1-0610. The contents of this work are solely the responsibility of the authors and do not necessarily represent the official views of NSF and the U.S. Army.

## References
[AFV95] D. Anderson, T. Frivold, and A. Valdes. Next-generation intrusion detection expert system (NIDES): A summary. Technical Report SRI-CSL-95-07, Computer Science Laboratory, SRI International, Menlo Park, California, May 1995.
...
[Other references follow in a similar format]

This optimized text is more structured, coherent, and professional, with clear headings and subheadings to guide the reader through the content.