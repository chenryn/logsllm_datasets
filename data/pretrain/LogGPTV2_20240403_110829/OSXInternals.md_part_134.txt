### 10.4.2. Kernel Extension Initialization and Finalization

The `KMOD_EXPLICIT_DECL` macro, defined in `osfmk/mach/kmod.h`, is used to declare the start and stop functions for a kernel extension (kext). For example:

```c
KMOD_EXPLICIT_DECL(com.osxbook.driver.DummyDriver, "1.0.0d1", _start, _stop)
```

In C++ kexts, virtual function calls are dispatched through the vtable because the actual subclass that overrides a virtual function cannot be determined at compile time. The loading mechanism may patch vtables to maintain ABI compatibility between the running system and the kext.

#### C++ Runtime Initialization and Finalization

- **OSRuntimeInitializeCPP**:
  - Calls `preModLoad()` of `OSMetaClass`, passing the module's name.
  - Scans the Mach-O header for segments with sections named `__constructor`.
  - Invokes constructors if found.
  - If initialization fails, it calls the destructors for the segments that had their constructors successfully invoked.
  - Finally, calls `postModLoad()` of `OSMetaClass` to perform bookkeeping and release the lock.

- **OSRuntimeFinalizeCPP**:
  - Ensures no instances of objects represented by `OSMetaClass` are associated with the module being unloaded.
  - Checks all metaclasses associated with the module's string name and examines their instance counts.
  - If there are outstanding instances, the unload attempt fails.
  - Calls `OSRuntimeUnloadCPP()` to iterate over the module's segments and call the corresponding destructor functions.

#### C-only Kext Initialization and Finalization

For C-only kexts, the `_realmain` and `_antimain` symbols are used to point to the start and stop entry points, respectively. The `libkmod.a` library provides the implementation for these entry points:

```c
// libkmod.a: c_start.c
extern kmod_start_func_t *_realmain;
__private_extern__ kern_return_t _start(kmod_info_t *ki, void *data) {
    if (_realmain)
        return (*_realmain)(ki, data);
    else
        return KERN_SUCCESS;
}

// libkmod.a: c_stop.c
extern kmod_stop_func_t *_antimain;
__private_extern__ kern_return_t _stop(kmod_info_t *ki, void *data) {
    if (_antimain)
        return (*_antimain)(ki, data);
    else
        return KERN_SUCCESS;
}
```

In the case of a C-only kext, the `_info.c` file sets `_realmain` and `_antimain` to point to the module's start and stop entry points, respectively. For example:

```c
KMOD_EXPLICIT_DECL(com.osxbook.driver.DummyKExt, "1.0.0d1", _start, _stop)
__private_extern__ kmod_start_func_t *_realmain = DummyKExtStart;
__private_extern__ kmod_stop_func_t *_antimain = DummyKExtStop;
```

### 10.4.3. Management of Kernel Extensions

Kernel extension management is implemented across several Darwin packages, including `xnu`, `IOKitUser`, `kext_tools`, `cctools`, and `extenTools`. The primary command-line programs for managing kexts are:

- **kextd**: Loads kexts on demand.
- **kextload**: Loads kexts, validates them, and generates debugging symbols.
- **kextunload**: Unloads kext code and terminates associated I/O Kit objects.
- **kextstat**: Displays the status of currently loaded kexts.
- **kextcache**: Creates or updates kext caches.
- **mkextunpack**: Extracts the contents of a multikext (mkext) archive.

**kextd** is the kernel extension daemon and is the focal point for kext loading and unloading. During early boot, `libsa` handles kexts until `kextd` starts. `kextd` registers as `com.apple.KernelExtensionServer` with the Bootstrap Server and processes signals, kernel requests, and client requests in its run loop. It uses the `KXKextManager` interface, part of the I/O Kit framework, to manage kexts.

### 10.4.4. Automatic Loading of Kernel Extensions

To load a kext every time the system boots, place it in `/System/Library/Extensions/`. The kext bundle must have root and wheel as the owner and group, and directories and files must have mode bit values of 0755 and 0644, respectively. The system maintains a cache of installed kexts, which is updated when changes are detected in the `/System/Library/Extensions/` directory.

A kext can be declared as a boot-time kext by setting the `OSBundleRequired` property in its `Info.plist` file. Valid values include `Root`, `Local-Root`, `Network-Root`, `Safe Boot`, and `Console`.

### 10.5. Communicating with the Kernel

User programs communicate with kernel components through system calls and other mechanisms like the I/O Kit Device Interface. A device interface is a user-space entity (e.g., a library) that user programs can call to access a device. Communication goes through the device interface to a kernel-resident user client, which dispatches it to the device. User clients are not supported by all drivers.

#### I/O Kit Device Interface

- **Device Matching**: User programs create a matching dictionary containing properties of the device they wish to access. The I/O Kit compares these properties against the I/O Registry nodes.
- **Key-Value Pairs**: Encapsulated in a `CFMutableDictionary` object, key-value pairs identify devices or services. Functions like `IOServiceMatching()`, `IOServiceNameMatching()`, `IOOpenFirmwarePathMatching()`, and `IOBSDNameMatching()` create matching dictionaries.
- **I/O Kit Master Port**: Required for communication with the I/O Kit, it can be retrieved using `IOMasterPort()` or specified as `kIOMasterPortDefault`.

#### Device Files

The I/O Kit supports the device file mechanism for mass-storage and serial communications devices. On discovering such a device, it creates an instance of a user client object (`IOMediaBSDClient` or `IOSerialBSDClient`) and calls the device file system (devfs) to create the appropriate device file nodes under `/dev/`.

### 10.6. Creating Kernel Extensions

Apple recommends avoiding kernel programming unless absolutely necessary. A legitimate reason for a device driver to reside in the kernel is if it handles primary interrupts or if its primary client is kernel resident.

#### A Generic Kernel Extension

To create a trivial kext, we start with an Xcode project instantiated from the template for generic kernel extensions. The `Info.plist` file should specify the kext's dependencies, such as `com.apple.kpi.bsd` and `com.apple.kpi.libkern`.

Example `Info.plist`:

```xml
<key>CFBundleExecutable</key>
<string>DummySysctl</string>
<key>CFBundleIdentifier</key>
<string>com.osxbook.kext.DummySysctl</string>
<key>OSBundleLibraries</key>
<dict>
    <key>com.apple.kpi.bsd</key>
    <string>8.0.0</string>
    <key>com.apple.kpi.libkern</key>
    <string>8.0.0</string>
</dict>
```

#### Source Code for DummySysctl

```c
// DummySysctl.c
#include <libkern/printf.h>

kern_return_t
DummySysctl_start(kmod_info_t *ki, void *d) {
    printf("DummySysctl_start\n");
    return KERN_SUCCESS;
}

kern_return_t
DummySysctl_stop(kmod_info_t *ki, void *d) {
    printf("DummySysctl_stop\n");
    return KERN_SUCCESS;
}
```

#### Compilation and Testing

Use Xcode to compile the kext:

```sh
$ xcodebuild -configuration Debug -target DummySysctl
```

After successful compilation, copy the kext bundle to a temporary location and set the correct ownership and permissions:

```sh
$ sudo rm -rf /tmp/DummySysctl.kext
$ cp -pr build/Debug/DummySysctl.kext /tmp/
$ sudo chown -R root:wheel /tmp/DummySysctl.kext
```

This completes the creation and testing of a simple kernel extension.