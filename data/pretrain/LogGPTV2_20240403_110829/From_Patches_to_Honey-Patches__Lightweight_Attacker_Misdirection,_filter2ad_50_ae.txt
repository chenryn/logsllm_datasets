diversiﬁcation has also been proposed as an eﬃcient protection
against patch-based attacks [15].
Honeypots for Attack Analysis. Honeypots are infor-
mation systems resources conceived to attract, detect, and
gather attack information. They are designed such that any
interaction with a honeypot is likely to be malicious. Although
the concept is not new [50], there has been growing interest
in protection and countermeasure mechanisms using honey-
pots [7, 34, 37]. Honeypots traditionally employ virtualization
to trap and investigate attacks [46, 61]. By leveraging VM
monitors, honeypots adapt and seamlessly integrate into the
network infrastructure [35], monitoring attacker activities
within a compromised system [7, 19, 26, 37]. Nowadays, large
honeyfarms, supporting on-demand loading of resources, enable
large-scale defense scenarios [32, 56].
Shadow honeypots [1, 2] are a hybrid approach in which
a front-end anomaly detection system forwards suspicious
requests to a back-end instrumented copy of the target applica-
tion, which validates the anomaly prediction and improves the
anomaly detector’s heuristics through feedback. Although the
target and instrumented programs may share similar states
for detection purposes, shadow honeypots make no eﬀort to
deceive attackers into thinking the attack was successful.
In contrast, OpenFire [10] uses a ﬁrewall-based approach
to forward unwanted messages to decoy machines, making it
appear that all ports are open and inducing attackers to target
false services. Our work adopts an analogous strategy for
software vulnerabilities, making it appear that vulnerabilities
are unpatched and inducing attackers to target them.
Cloning for Security Purposes. Our work beneﬁts from
research advances on live cloning [51], which VM architectures
are increasingly using for load balancing and fault-tolerance [36,
63]. In security contexts, VM live cloning can also be used to
automate the creation of on-demand honeypots [8, 56]. For
instance, dynamic honeypot extraction architectures [8] use a
modiﬁed version of the Xen hypervisor to detect potential
attacks based on analysis of request payload data, and delay
their execution until a modiﬁed clone of the original system
has been created. To fool and distract attackers, sensitive data
is removed from the clone’s ﬁle-system. However, no steps
are taken to avoid leaking conﬁdential information contained
within the cloned process memory image, and the detection
strategy is purely system-level, which cannot reliably detect
the language-level exploits redirected by honey-patches.
9. CONCLUSION
This paper proposed, implemented, and evaluated honey-
patching as a strategy for elegantly reformulating many vendor-
supplied, source-level patches as equally secure honey-patches
that raise attacker risk and uncertainty. A light-weight,
resource-eﬃcient, and ﬁne-grained implementation approach
based on live cloning transparently forks attacker connections
to sandboxed decoy environments in which in-memory and ﬁle
system secrets have been redacted or replaced with honey-data.
Our implementation and evaluation for the Apache HTTP
web server demonstrate that honey-patching can be realized
for large-scale, performance-critical software with minimal
overheads for legitimate users. If adopted on a wide scale,
we conjecture that honey-patching could signiﬁcantly impede
certain attacker activities, such as vulnerability probing, and
oﬀers defenders a new, potent tool for attacker deception.
10. REFERENCES
[1] K. G. Anagnostakis, S. Sidiroglou, P. Akritidis,
M. Polychronakis, A. D. Keromytis, and E. P. Markatos.
Shadow honeypots. Int. J. Computer and Network
Security (IJCNS), 2(9):1–15, 2010.
[2] K. G. Anagnostakis, S. Sidiroglou, P. Akritidis, K. Xinidis,
E. Markatos, and A. D. Keromytis. Detecting targeted
attacks using shadow honeypots. In Proc. USENIX
Security Sym., 2005.
[3] J. Ansel, K. Arya, and G. Cooperman. DMTCP:
Transparent checkpointing for cluster computations and
the desktop. In Proc. IEEE Int. Parallel and Distributed
Processing Sym. (IPDPS), pages 1–12, 2009.
[4] Apache. Apache HTTP server project. http://httpd.
apache.org, 2014.
[5] W. A. Arbaugh, W. L. Fithen, and J. McHugh. Windows
of vulnerability: A case study analysis. IEEE Computer,
33(12), 2000.
[6] T. Avgerinos, S. K. Cha, B. L. T. Hao, and D. Brumley.
AEG: Automatic exploit generation. In Proc. Network &
Distributed System Security Sym. (NDSS), 2011.
[7] M. Beham, M. Vlad, and H. P. Reiser. Intrusion detection
and honeypots in nested virtualization environments. In
Proc. IEEE/IFIP Int. Conf. Dependable Systems and
Networks (DSN), pages 1–6, 2013.
[8] S. Biedermann, M. Mink, and S. Katzenbeisser. Fast
dynamic extracted honeypots in cloud computing. In Proc.
ACM Cloud Computing Security Work. (CCSW), pages
13–18, 2012.
In Proc. ACM Conf. Computer and Communications
Security (CCS), pages 833–844, 2012.
[10] K. Borders, L. Falk, and A. Prakash. OpenFire: Using
deception to reduce network attacks. In Proc. Int. Conf.
Security and Privacy in Communications Networks
(SecureComm), pages 224–233, 2007.
[11] B. M. Bowen, S. Hershkop, A. D. Keromytis, and
S. J. Stolfo. Baiting inside attackers using decoy
documents. In Proc. Int. ICST Conf. Security and
Privacy in Communication Networks (SecureComm),
pages 51–70, 2009.
[12] D. Brumley, P. Poosankam, D. Song, and J. Zheng.
Automatic patch-based exploit generation is possible:
Techniques and implications. In Proc. IEEE Sym.
Security & Privacy (S&P), pages 143–157, 2008.
[13] C. Clark, K. Fraser, S. Hand, J. G. Hansen, E. Jul,
C. Limpach, I. Pratt, and A. Warﬁeld. Live migration
of virtual machines. In Proc. Sym. Networked Systems
Design & Implementation (NSDI), volume 2, pages
273–286, 2005.
[14] Codenomicon. The Heartbleed bug. http://heartbleed.
com, Apr. 2014.
[15] B. Coppens, B. D. Sutter, and K. D. Bosschere.
Protecting your software updates. IEEE Security &
Privacy, 11(2):47–54, 2013.
[16] J. Corbet. TCP Connection Repair. http://lwn.net/
Articles/495304, 2012.
[17] S. Crane, P. Larsen, S. Brunthaler, and M. Franz. Booby
trapping software. In Proc. New Security Paradigms
Work. (NSPW), pages 95–106, 2013.
[18] CRIU. Checkpoint/Restore In Userspace. http://criu.org,
2014.
[19] D. Dagon, X. Qin, G. Gu, W. Lee, J. Grizzard, J. Levine,
and H. Owen. Honeystat: Local worm detection using
honeypots. In Proc. Int. Sym. Recent Advances in
Intrusion Detection (RAID), pages 39–58, 2004.
[20] J. Duell. The design and implementation of Berkeley
Lab’s Linux checkpoint/restart. Technical Report
LBNL-54941, U. California at Berkeley, 2002.
[21] J. Finkle. U.S. government failed to secure Obamacare
site – experts. Reuters, Jan. 16, 2014.
[22] G. H. Friedman. Evaluation report: The Department of
Energy’s unclassiﬁed cyber security program. Technical
Report DOE/IG-0897, U.S. Dept. of Energy, Oct. 2013.
[23] J. Fritz, C. Leita, and M. Polychronakis. Server-side
code injection attacks: A historical perspective. In
Proc. Int. Sym. Research in Attacks, Intrusions and
Defenses (RAID), pages 41–61, 2013.
[24] X. Fu, W. Yu, D. Cheng, X. Tan, and S. Graham. On
recognizing virtual honeypots and countermeasures.
In Proc. IEEE Int. Sym. Dependable, Autonomic and
Secure Computing (DASC), pages 211–218, 2006.
[25] Z. Gadot, M. Alon, L. Rozen, M. Atad, and Y. S. V.
Shrivastava. Global application & network security report
2013. Technical report, Radware, 2014.
[26] T. Garﬁnkel and M. Rosenblum. A virtual machine
introspection based architecture for intrusion detection.
In Proc. Network & Distributed Systems Security Sym.
(NDSS), pages 191–206, 2003.
[9] L. Bilge and T. Dumitras. Before we knew it: An
empirical study of zero-day attacks in the real world.
[27] B. Geroﬁ, H. Fujita, and Y. Ishikawa. An eﬃcient process
live migration mechanism for load balanced distributed
virtual environments. In Proc. IEEE Int. Conf. Cluster
Computing (CLUSTER), pages 197–206, 2010.
[28] Google. Protocol Buﬀers. https://code.google.com/p/
protobuf, 2014.
[29] Google. Web metrics. https://developers.google.com/
speed/articles/web-metrics, 2014.
[30] T. Jackson, B. Salamat, A. Homescu, K. Manivannan,
G. Wagner, A. Gal, S. Brunthaler, C. Wimmer, and
M. Franz. Compiler-generated software diversity. In
S. Jajodia, A. K. Ghosh, V. Swarup, C. Wang, and
X. S. Wang, editors, Moving Target Defense – Creating
Asymmetric Uncertainty for Cyber Threats, pages 77–98.
Springer, 2011.
[31] J. Jang, A. Agrawal, and D. Brumley. ReDeBug: Finding
unpatched code clones in entire OS distributions. In Proc.
IEEE Sym. Security & Privacy (S&P), pages 48–62,
2012.
[32] X. Jiang, D. Xu, and Y.-M. Wang. Collapsar: A
VM-based honeyfarm and reverse honeyfarm architecture
for network attack capture and detention. J. Parallel
and Distributed Computing – Special Issue on Security
in Grid and Distributed Systems, 66(9):1165–1180, 2006.
[33] W. Kandek. Year closing – December 2013 patch Tuesday.
Qualys: Laws of Vulnerabilities, Dec. 2013.
[34] S. Kulkarni, M. Mutalik, P. Kulkarni, and T. Gupta.
Honeydoop – a system for on-demand virtual high
interaction honeypots. In Proc. Int. Conf. for Internet
Technology and Secured Transactions (ICITST), pages
743–747, 2012.
[35] I. Kuwatly, M. Sraj, Z. A. Masri, and H. Artail. A
dynamic honeypot design for intrusion detection. In Proc.
IEEE/ACS Int. Conf. Pervasive Services (ICPS), pages
95–104, 2004.
[36] H. A. Lagar-Cavilla, J. A. Whitney, A. M. Scannell,
P. Patchin, S. M. Rumble, E. de Lara, M. Brudno, and
M. Satyanarayanan. SnowFlock: Rapid virtual machine
cloning for cloud computing. In Proc. ACM European
Conf. Computer Systems (EuroSys), pages 1–12, 2009.
[37] T. K. Lengyel, J. Neumann, S. Maresca, B. D. Payne,
and A. Kiayias. Virtual machine introspection in a hybrid
honeypot architecture. In Proc. USENIX Work. Cyber
Security Experimentation and Test (CSET), 2012.
[38] Lighttpd. Lighttpd server project. http://www.lighttpd.
net, 2014.
[39] LXC. Linux containers. http://linuxcontainers.org, 2014.
[40] M. Maurer and D. Brumley. Tachyon: Tandem execution
for eﬃcient live patch testing. In Proc. USENIX Security
Sym., pages 617–630, 2012.
[41] D. S. Milo´iˇci´c, F. Douglis, Y. Paindaveine, R. Wheeler,
and S. Zhou. Process migration. ACM Computing
Surveys, 32(3):241–299, 2000.
[42] Netcraft. Are there really lots of vulnerable Apache web
servers? http://news.netcraft.com/archives/2014/02/07,
2014.
[43] Nginx. Nginx server project. http://nginx.org, 2014.
[44] Ohloh. Apache HTTP server statistics. http://www.
ohloh.net/p/apache, 2014.
[45] V. S. Pai, P. Druschel, and W. Zwaenepoel. Flash: An
eﬃcient and portable web server. In Proc. Conf. USENIX
Annual Technical Conference (ATEC), pages 15–15,
1999.
[46] N. Provos and T. Holz. Virtual Honeypots: From
Botnet Tracking to Intrusion Detection. Addison-Wesley
Professional, 2007.
[47] A. Sabelfeld and A. C. Myers. Language-based in-
formation ﬂow security. IEEE J. Selected Areas in
Communications, 21(1):5–19, 2003.
[48] M. B. Salem and S. J. Stolfo. Decoy document
deployment for eﬀective masquerade attack detection. In
Proc. Int. Conf. Detection of Intrusions and Malware,
and Vulnerability Assessment, pages 35–54, 2011.
[49] S. Souders. The performance golden rule. http://www.
stevesouders.com/blog/2012/02/10/the-performance-
golden-rule, Feb. 2012.
[50] L. Spitzner. Honeypots: Tracking Hackers. Addison-
Wesley Longman, 2002.
[51] Y. Sun, Y. Luo, X. Wang, Z. Wang, B. Zhang, H. Chen,
and X. Li. Fast live cloning of virtual machine based on
Xen. In Proc. IEEE Conf. High Performance Computing
and Communications (HPCC), pages 392–399, 2009.
[52] The 111th United States Congress. An act entitled the
patient protection and aﬀordable care act. Public Law
111-148, 124 Stat. 119, Mar. 2010.
[53] The Economic Times. New technique Red Herring ﬁghts
‘Heartbleed’ virus. The Times of India, Apr. 15, 2014.
[54] J. Voris, N. Boggs, and S. J. Stolfo. Lost in translation:
Improving decoy documents via automated translation.
In Proc. IEEE Sym. Security & Privacy Workshops
(S&PW), pages 129–133, 2012.
[55] J. Voris, J. Jermyn, A. D. Keromytis, and S. J. Stolfo.
Bait and snitch: Defending computer systems with
decoys. In Proc. Conf. Cyber Infrastructure Protection
(CIP), 2012.
[56] M. Vrable, J. Ma, J. Chen, D. Moore, E. Vandekieft,
A. C. Snoeren, G. M. Voelker, and S. Savage. Scalability,
ﬁdelity, and containment in the Potemkin virtual
honeyfarm. In Proc. ACM Sym. Operating Systems
Principles (SOSP), pages 148–162, 2005.
[57] C. Wang, F. Mueller, C. Engelmann, and S. L. Scott.
Proactive process-level live migration in HPC envi-
ronments. In Proc. ACM/IEEE Conf. Supercomputing,
2008.
[58] J. Wang, X. Liu, and A. A. Chien. Empirical study of
tolerating denial-of-service attacks with a proxy network.
In Proc. USENIX Security Sym., pages 51–64, 2005.
[59] R. Wartell, V. Mohan, K. W. Hamlen, and Z. Lin. Binary
stirring: Self-randomizing instruction addresses of legacy
x86 binary code. In Proc. ACM Conf. Computer and
Communications Security (CCS), pages 157–168, 2012.
[60] A. Whitaker, R. S. Cox, M. Shaw, and S. D. Gribble.
Constructing services with interposable virtual hard-
ware. In Proc. Sym. Networked Systems Design and
Implementation (NSDI), pages 169–182, 2004.
[61] V. Yegneswaran, P. Barford, and D. Plonka. On the
design and use of internet sinks for network abuse
monitoring. In Proc. Int. Sym. Recent Advances in
Intrusion Detection (RAID), pages 146–165, 2004.
[62] J. Yuill, D. Denning, and F. Feer. Using deception to
hide things from hackers: Processes, principles, and
techniques. J. Information Warfare, 5(3):26–40, 2006.
[63] W. Zheng, R. Bianchini, G. J. Janakiraman, J. R.
Santos, and Y. Turner. JustRunIt: Experiment-based
management of virtualized data centers. In Proc.
USENIX Annual Technical Conf., 2009.