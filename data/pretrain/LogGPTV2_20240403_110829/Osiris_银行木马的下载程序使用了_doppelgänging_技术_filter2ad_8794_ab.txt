### NTFS事务及其在恶意软件中的应用

NTFS事务通常用于数据库操作，但在NTFS文件系统中也以类似的方式存在。NTFS事务将一系列操作封装到一个单元中。当在事务内部创建文件时，直到提交事务之前，该文件不会接受任何外部访问。ProcessDoppelgänging利用这一特性来创建不可见的投放载荷文件。

#### 实现细节

通过分析案例可以发现，不同实现使用NTFS事务的方法基本相同，只是所用的API有细微差别。加载程序会创建一个新事务，在该事务中创建一个新文件。最初的实现使用了来自Kernel32的`CreateTransaction`和`CreateFileTransacted`函数。而在另一种实现中，这些函数被低级别的其他方法取代：

1. **创建事务**：调用`NTDLL`库中的`ZwCreateTransaction`函数。
2. **打开事务处理文件**：使用`RtlSetCurrentTransaction`和`ZwCreateFile`函数打开事务处理文件（例如，创建的文件是`%TEMP%\Liebert.bmp`）。
3. **写入文件**：dropper将缓冲区写入文件，使用`RtlSetCurrentTransaction`和`ZwWriteFile`函数。写入的缓冲区包含了第二阶段的新PE载荷。

在此过程中，文件仅在事务中可见，无法由其他进程（如防病毒扫描程序）打开。

#### 创建section并执行

事务文件会创建一个section，而要执行功能，则需要使用低级API `ZwCreateSection`或`NtCreateSection`。创建section后，文件不再需要。事务通过`ZwRollbackTransaction`回滚，对文件的更改不会保存在磁盘上。

#### ProcessDoppelgänging与Osiris dropper

上述部分与ProcessDoppelgänging的对应部分相同。为了更加隐秘，dropper的作者使用从`NTDLL`的自定义副本调用的低级函数。此时，Osiris dropper创建了两个完全不相关的元素：

1. 一个进程（包含映射的合法可执行文件`wermgr.exe`）。
2. 一个section（从事务处理文件创建并包含恶意载荷）。

如果这是典型的ProcessDoppelgänging，则会直接根据带有映射载荷的部分创建进程。

#### 函数调用跟踪

在回滚事务之后，调用了以下函数：

- `4b1e6; ntdll_1.ZwQuerySection`
- `4b22b; ntdll.NtClose`
- `4b239; ntdll.NtClose`
- `4aab8; ntdll_1.ZwMapViewOfSection`
- `4af27; ntdll_1.ZwProtectVirtualMemory`
- `4af5b; ntdll_1.ZwWriteVirtualMemory`
- `4af8a; ntdll_1.ZwProtectVirtualMemory`
- `4b01c; ntdll_1.ZwWriteVirtualMemory`
- `4b03a; ntdll_1.ZwResumeThread`

#### 执行重定向

新创建的section作为附加模块映射到新进程中。将载荷写入内存并设置必要的补丁（例如入口点重定向）后，恢复进程。这种重定向方式类似于Process Hollowing的变体。远程进程的PEB被打补丁，新模块库被设置为需添加的部分。如果修补入口点失败，则使用经典技术（`ZwGetThreadContext` -> `ZwSetThreadContext`）在线程上下文中设置新地址。

#### 两种技术的结合

Process Hollowing的弱点在于注入载荷的内存空间上的保护权限。Process Hollowing通过`VirtualAllocEx`在远程进程中分配内存页，然后在那里写入载荷。这会导致访问权限（`MEM_PRIVATE`）与正常加载的可执行文件（`MEM_IMAGE`）不同。将有效负载加载为映像的主要障碍是需要将其加载到磁盘上，但这样做容易被杀毒软件发现。

Doppelgänging提供了一种解决方案：不可见的事务处理文件，可以安全地放入载荷而不会被发现。此技术假定事务处理文件将用于创建section（`MEM_IMAGE`），然后此section将成为新进程的基础（使用`NtCreateProcessEx`）。此解决方案运行良好，但要求所有流程参数必须手动加载，这在WoW64进程中较为复杂。

如果我们像Process Hollowing那样创建流程，那么ProcessDoppelgänging的问题就可以轻松解决。作者使用来自Kernel32的文档化API，从合法文件中创建了一个进程。载有载荷的部分由于加载了适当的访问权限（`MEM_IMAGE`），可以在后续中被添加，并且执行时重定向到它。

#### 第二阶段装载

这里的Kernel32的DLL文件（哈希：`8d58c731f61afe74e9f450cc1c7987be`）并非核心部分，仅是加载器的下一个阶段。它唯一的作用是加载最终的有效载荷。步骤是将Osiris核心逐块解压缩，并将其依赖项手动加载到加载器进程中新分配的内存区域。在这次自注入之后，加载器跳转到有效负载的入口点。

有趣的是，应用程序的入口点与标头中保存的入口点不同。因此，如果转储载荷并相互依赖地运行它，则无法执行相同的代码。原始的Kronos（哈希：`2a550956263a22991c34f076f3160b49`）也使用了隐藏入口点这种技巧，Kronos最终的载荷被注入进了`svchost`。通过修补`svchost`的入口点将执行重定向到核心部分。

#### IOC信息

- **第1阶段（原始样本）**：
  - 哈希：`e7d3181ef643d77bb33fe328d1ea58f512b4f27c8e6ed71935a2e7548f2facc0`
- **第2阶段（第二阶段装载机）**：
  - 哈希：`40288538ec1b749734cb58f95649bd37509281270225a87597925f606c013f3a`
- **Osiris（核心病毒）**：
  - 哈希：`d98a9c5b4b655c6d888ab4cf82db276d9132b09934a58491c642edf1662e831e`