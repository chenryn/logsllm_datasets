### AdventureWorksService Class and Constructors

The `AdventureWorksServicennnnnnnnn` class provides protected constructors that do not require authentication information. While it may be tempting to change the access level of these constructors to public, this is not recommended because any changes will be lost if you regenerate the REST API client code. Instead, you should create a new class that extends `AdventureWorksServicennnnnnnnn` and add a public constructor to this new class, which calls the appropriate protected constructor in the base class.

### Azure API App Security

By default, when you deploy an Azure API app, authentication is disabled, meaning that the web service is available for use by anyone. You can verify this in the Azure portal by navigating to your API app and checking the Authentication/Authorization settings.

To enable authentication, simply switch the authentication setting to "On." You will then have the option to choose from various authentication providers, such as Microsoft, Facebook, Twitter, or Google. For corporate applications, Azure Active Directory (AAD) is often the preferred choice. In each case, you need to register your application with the chosen authentication provider and configure the authorization settings.

For more detailed information, refer to the official documentation: [Authentication and Authorization in Azure App Service](https://docs.microsoft.com/en-gb/azure/app-service/app-service-authentication-overview#what-is-app-service-authentication--authorization).

Once authentication is configured, users will be prompted to provide their credentials via the chosen authentication provider when they connect to the web service. If you are building a Universal Windows Platform (UWP) app, you can pass these credentials to the constructor of the `AdventureWorksServicennnnnnnnn` class.

### Creating a New Service Class

1. **Add a New Class:**
   - In Solution Explorer, right-click the `Customers` project, point to `Add`, and then click `Class`.
   - In the `Add New Item â€“ Customers` dialog box, enter the name `AdventureWorksService.cs` and click `Add`.

2. **Modify the New Class:**
   - In the Code and Text Editor window, modify the `AdventureWorksService` class to inherit from `AdventureWorksServicennnnnnnnn`:

     ```csharp
     class AdventureWorksService : AdventureWorksServicennnnnnnnn
     {
     }
     ```

3. **Add a Public Constructor:**
   - Add the following public constructor to the `AdventureWorksService` class:

     ```csharp
     class AdventureWorksService : AdventureWorksServicennnnnnnnn
     {
         public AdventureWorksService() : base()
         {
         }
     }
     ```

   This constructor invokes the following protected constructor in the `AdventureWorksServicennnnnnnnn` class:

     ```csharp
     protected AdventureWorksServicennnnnnnnn(params DelegatingHandler[] handlers) : base(handlers)
     {
         this.Initialize();
     }
     ```

   The `params` keyword allows you to pass an array of `DelegatingHandler` objects. If you pass an empty parameter list, the `params` array will be empty. The `Initialize` method in the `AdventureWorksServicennnnnnnnn` class sets up the connection to the web service.

### Updating the ViewModel

1. **Open the ViewModel:**
   - In Solution Explorer, double-click `ViewModel` to open it in the Code and Text Editor window.

2. **Update the ViewModel Constructor:**
   - In the `ViewModel` constructor, comment out the code that sets the `customers` field to the `DataSource.Customers` list and add the following code:

     ```csharp
     public ViewModel()
     {
         ...
         // this.customers = DataSource.Customers;
         try
         {
             AdventureWorksService service = new AdventureWorksService();
             this.customers = service.CustomersOperations.GetCustomers().ToList();
         }
         catch
         {
             this.customers = null;
         }
     }
     ```

   The `customers` list now contains the customers fetched from the web service. If an exception occurs, the `customers` list is set to `null`.

3. **Run the Application:**
   - On the Debug menu, click `Start Debugging` to build and run the app.
   - Verify that the app fetches the data from the web service and displays the first customer, Orlando Gee.

### Implementing CRUD Operations

Many applications require the ability to insert, update, and delete data. The ASP.NET Web API supports these operations through HTTP PUT, POST, and DELETE requests. Conventions dictate that a PUT request modifies an existing resource, a POST request creates a new resource, and a DELETE request removes a resource.

#### Idempotency in REST Web Services

In a REST web service, PUT requests should be idempotent, meaning that performing the same update multiple times should yield the same result. For example, if you update a customer's telephone number to "888-888-8888" multiple times, the effect should be the same. This design makes the web service robust against concurrent requests and network failures.

#### Adding and Editing Functionality

1. **Update the Customer Class:**
   - In Solution Explorer, double-click `Customer.cs` to open it in the Code and Text Editor window.
   - Add the following properties to the `Customer` class:

     ```csharp
     public class Customer : INotifyPropertyChanged
     {
         ...
         public string Phone
         {
             ...
         }
         public System.Guid rowguid { get; set; }
         public System.DateTime ModifiedDate { get; set; }
         ...
     }
     ```

   These properties are important for updating data and resolving conflicts.

2. **Reorganize the ViewModel:**
   - Delete the `ViewModel.cs` file and replace it with the updated version from the provided folder.
   - The updated `ViewModel` class includes Boolean properties to manage different modes (Browsing, Adding, Editing) and methods for fetching and updating data.

3. **Add Methods and Commands:**
   - Add the `Add` method to create a new customer and put the form into Adding mode.
   - Add the `Edit` method to save the existing details of the current customer and put the form into Editing mode.
   - Add the `Discard` method to discard changes made while in Adding or Editing mode and return the form to Browsing mode.
   - Instantiate the `AddCustomer`, `EditCustomer`, and `DiscardChanges` commands in the `ViewModel` constructor.

### Example Code Snippets

#### Add Method

```csharp
private void Add()
{
    Customer newCustomer = new Customer { CustomerID = 0 };
    this.customers.Insert(currentCustomer, newCustomer);
    this.IsAdding = true;
    this.OnPropertyChanged(nameof(Current));
}
```

#### Edit Method

```csharp
private Customer oldCustomer;
private void Edit()
{
    this.oldCustomer = new Customer();
    this.CopyCustomer(this.Current, this.oldCustomer);
    this.IsEditing = true;
}
```

#### Discard Method

```csharp
private void Discard()
{
    if (this.IsAdding)
    {
        this.customers.Remove(this.Current);
        this.OnPropertyChanged(nameof(Current));
    }
    if (this.IsEditing)
    {
        this.CopyCustomer(this.oldCustomer, this.Current);
    }
    this.IsBrowsing = true;
}
```

By following these steps, you can effectively manage the creation, editing, and discarding of customer data in your application.