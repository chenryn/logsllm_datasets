    mad.lo.s32     %nIndex, %nBlockDim, %nBlockID, %nTid;
    setp.ge.s32    %p1, %nIndex, %nTotal;
    @%p1 bra       TAG_EXIT;
    mul.wide.s32     %u64Offset, %nIndex, 4;
    add.s64     %pA, %pA, %u64Offset;
    ld.global.f32     %fA, [%pA];
    sin.approx.f32     %fB, %fA;
    add.s64     %pB, %pB, %u64Offset;
    st.global.f32     [%pB], %fB;
TAG_EXIT:
    ret;
}
清单9-1中包含的PTX汇编函数名叫doSin，它接受三个参数：传递
输入值的浮点数组A，存放输出值的数组B，以及数组的元素个数
nNum。函数的功能是根据当前线程的ID计算出数组的索引值i，然后求
sin(A[i])，把结果赋给B[i]，对应的C代码如下。
__global__ void
doSin(const float *A, float *B, int numElements)
{
    int i = blockDim.x * blockIdx.x + threadIdx.x;
    if (i  ptxas -v -o sin.o geptxmanual.ptx
ptxas info    : 4 bytes gmem
ptxas info    : Compiling entry function 'doSin' for 'sm_30'
ptxas info    : Function properties for doSin
    0 bytes stack frame, 0 bytes spill stores, 0 bytes spill loads
ptxas info    : Used 6 registers, 340 bytes cmem[0]
如果想查看目标文件里的信息，那么可以用nvdisasm来反汇编。
nvdisasm sin.o
默认的输出是控制台，加上“> disasm32.txt”可以将输出重定向到文
本文件。反汇编出来的机器码非常短小精悍，值得细细品味，如清单9-
2所示。
清单9-2 反汇编得到的doSin函数机器码
.text.doSin:
        /*0008*/                   MOV R1, c[0x0][0x44];
        /*0010*/                   S2R R0, SR_CTAID.X;
        /*0018*/                   S2R R3, SR_TID.X;
        /*0020*/                   IMAD R0, R0, c[0x0][0x28], R3;
        /*0028*/                   ISETP.GE.AND P0, PT, R0, c[0x0][0x150],
 PT;
        /*0030*/               @P0 EXIT;
        /*0038*/                   ISCADD R2.CC, R0, c[0x0][0x140], 0x2;
        /*0048*/                   MOV32I R5, 0x4;
        /*0050*/                   IMAD.HI.X R3, R0, R5, c[0x0][0x144];
        /*0058*/                   LD.E R2, [R2];
        /*0060*/                   ISCADD R4.CC, R0, c[0x0][0x148], 0x2;
        /*0068*/                   IMAD.HI.X R5, R0, R5, c[0x0][0x14c];
        /*0070*/                   RRO.SINCOS R0, R2;
        /*0078*/                   MUFU.SIN R0, R0;
        /*0088*/                   ST.E [R4], R0;
        /*0090*/                   EXIT;
.L_2:
        /*0098*/                   BRA `(.L_2);
.L_21:
对比清单9-1和清单9-2，可以发现很多官方文档秘而不宣的有趣细
节，比如代表线程块大小的blockDim内置变量是以常量形式存放的，清
单9-2中的c[0x0][0x28]就是blockDim.x。此外，函数的参数也是以常量
形式传递的。清单9-2中的c[0x0][0x144]和c[0x0][0x140]代表的便是参数
A，c[0x0][0x148]和c[0x0][0x14c]代表的便是参数B。因为参数A、B是
数组指针，都是64位，所以各以两个32位整数的形式存放。
清单9-2末尾的分支跳转指令让人困惑，看起来它没有任何意义，
因为上面的指令已经指定了两种情况下的EXIT，逻辑完备。另外，这
个跳转指令就跳转到本条指令，真是难以理解。作者推测它是用来占位
的。为了提高执行速度，GPU会提前读取当前指令后面的指令到缓存
中。为了防止预取指令时访问到无效内存，一种简单的解决方案就是在
有效代码的后面附加上一定长度的“无用”指令。
值得说明的是，手工写PTX汇编程序只是出于探索和教学目的。在
实际工程中，我们通常让编译器产生PTX指令，可以在NVCC的编译选
项中加上-ptx，让其输出PTX清单文件，比如以下指令。
nvcc -I=d:\apps\cuda91\common\inc  -ptx c:\dbglabs\ptx\geptx.cu
如果希望看到同时包含源代码和PTX汇编的输出，那么可以加上--
source-in-ptx选项。不过，在写作本内容时，这个功能似乎还存在瑕
疵，必须同时增加调试（-G）选项它才可以正常工作。
nvcc -I=d:\apps\cuda91\common\inc -ptx --source-in-ptx -G c:\dbglabs\ptx\g
eptx.cu
加入-ptx选项后便不再生成EXE了。如果不希望影响正常编译，那
么可以增加-keep选项，让NVCC保留编译过程中产生的PTX文件。
9.4.2 状态空间
在PTX中，把用于存放数据的各种空间统称为状态空间，并根据其
特性不同细分为多个类别，见表9-6。
表9-6 状态空间
名称
描  述
访问速度
.reg
寄存器
0
.sreg
特殊寄存器，只读的，预定义的，且与平台相关
0
.const
常量，位于共享的只读内存中
0
.global 全局内存，所有线程共享
>100个时
钟周期
.local
局部内存，每个线程私有
>100个时
钟周期
.param 参数，分为两类。一类是算核（kernel）的参数，按线程网格
（grid）定义；另一类是函数参数，按线程定义
0
.shared 可寻址的共享内存，同一个CTA中的线程共享
0
.tex
全局纹理内存（不鼓励使用）
>100个时
钟周期
在PTX代码中，状态空间修饰常常出现在变量类型之前，代表这个
变量所处的状态空间，比如清单9-1中，故意定义了一个全局变量。
.global .u32 gOptions = 0;
在PTXAS的输出中，报告了这个变量使用了4字节的全局内存（4
bytes gmem）。
9.4.3 虚拟寄存器
在PTX中，使用.reg声明的寄存器变量就是所谓的虚拟寄存器。寄
存器变量可以自由取名字，名字前贯以“%”作为标志。比如在清单9-1
中，函数一开头便定义了很多个寄存器变量。
    .reg .f32     %fA, %fB;
    .reg .b64     %pA, %pB, %u64Offset;
    .reg .pred    %p;
    .reg .b32     %nTotal,%nIndex,%nBlockDim,%nBlockID,%nTid;
第1行和第2行分别定义了两个32位浮点数和3个64位寄存器变量。
第3行定义了两个谓词寄存器变量，p这样的写法相当于p1和p2，这
是定义多个寄存器的快捷方法。
在生成硬件指令时，PTXAS会把虚拟寄存器与硬件寄存器绑定，也
就是从寄存器文件空间中分配物理寄存器。
如果定义的寄存器变量太多，那么寄存器空间可能不够用，这时会
自动使用内存来替补，称为溅出到内存（spilled to memory）。
寄存器可以是有类型的，也可以是无类型的。比如上面第1行定义
的是浮点类型的寄存器变量，第2行定义的便是无类型的寄存器变量，
长度为64位。
寄存器的大小（size）是有限制的。谓词寄存器（通过.reg .pred定
义）的大小是一位，标量寄存器的大小可以是8位、16位、32位或者64
位，向量寄存器的大小可以为16位、32位、64位或者128位。
9.4.4 数据类型
在PTX汇编代码中，可以经常见到数据类型修饰。除了定义变量
外，很多指令也带有数据类型后缀，比如mov.u32表示操作的是32位无
符号整数。表9-7列出了PTX汇编代码中所有的基本数据类型。
表9-7 基本类型
基 本 类 型
指 示 符
有符号整数
.s8, .s16, .s32, .s64
无符号整数
.u8, .u16, .u32, .u64
浮点数
.f16, .f16x2, .f32, .f64
二进制位（无类型）
.b8, .b16, .b32, .b64
谓词
.pred
除了基本类型之外，在PTX汇编代码中，还可以很方便地使用向量
和数组。
向量的长度是有限制的，支持的长度一般为两个或者4个元素，分
别用.v2和.v4来表示，例如以下代码。
.global .v4 .f32 V;  // a length-4 vector of floats
.shared .v2 .u16 uv; // a length-2 vector of unsigned ints
.global .v4 .b8 v;   // a length-4 vector of bytes
长度限制是所有元素加起来不能超过128位，因此.v4 .f64是不可以
的。
定义数组的方法和C语言很类似，比如以下代码。
.local .u16 kernel[19][19];
.shared .u8 mailbox[128];
.global .u32 index[] = { 0, 1, 2, 3, 4, 5, 6, 7 };
.global .s32 offset[][2] = { {-1, 0}, {0, -1}, {1, 0}, {0, 1} };
9.4.5 指令格式
PTX指令以可选的谓词开始，然后是操作码，后面跟随0个或者最
多3个操作数，其用法如下。
[@p] opcode [d, a, b, c];
比如清单9-1中的如下两条指令。
setp.ge.s32    %p1, %nIndex, %nTotal;
@%p1 bra     TAG_EXIT;
上面一条指令不带谓词，无条件执行。下面一条指令是带谓词的
（总是以@符号开始），只有谓词变量%p1为1时才会执行后面的操
作。
另外，上面一条指令有三个操作数，第一个操作数是目标操作数，
后面两个操作数是源操作数。整条指令用于对两个源操作数做大于等于
（ge）比较。如果第1个源操作数大于等于第2个操作数，那么便将谓词
寄存器%p1置位；否则，清零。
一般情况下，目标操作数只有一个，但也可以多于1个，比如以下
代码。
setp.lt.s32 p|q, a, b; // p = (a < b); q = !(a < b);
这条指令中，p和q都是目标操作数，使用“|”分隔。
个别情况下，目标操作数是可选的。如果不提供目标操作数，那么
可以使用(_)来占位，写成以下形式。
opcode (_), a, b, c;
9.4.6 内嵌汇编
可以使用asm{}关键字在CUDA程序中嵌入PTX汇编。比如，可以
用下面的语句来插入一个全局的内存屏障（memory barrier）。