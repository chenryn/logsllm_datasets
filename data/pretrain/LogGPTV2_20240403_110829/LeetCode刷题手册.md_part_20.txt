 return nums[0]
 return 0
L
---
## Page 149
Example 2: 
Example 1: 
order.
Given a matrix of m x n elements (m rows, n columns), return all elements of the matrix in spiral 
题目
54. Spiral Matrix
Output: [1,2,3,6,9,8,7,4,5]
Input:
func maxSubArrayl(nums []int) int {
//解法二模拟 
return maxsum
for p maxsum {
res += nums[p] 
res = max(res, dp[i]]
} else{
if dp[i-1]> 0 {
8，9
res = 0 
maxSum = res
 dp[i] = nums[i]
[-]dp + []sunu = []dp 
5，6］
---
## Page 150
代码
解题思路
给定一个包含 m×n个元素的矩阵（m行,n列），
题目大意
·解法一：需要注意的是特殊情况，比如二维数组退化成一维或者一列或者一个元素。注意了这些情
·给出一个二维数组，
func spiralorder(matrix[][]int)[]int 
0utput: [1,2,3,4,8,12,11,10,9,5,6,7]
len(matrix[o])，0,0,0,
//解法 1
package leetcode
Input:
visit, m, n,
if len(matrix[o]) == 1 {
if len(matrix) == 0 {
if len(matrix) == 1 { 
res := []int{}
== sum)
解法二：提前算出一共多少个元素，一圈一圈地遍历矩阵，停止条件就是遍历了所有元素（count
况，基本就可以一次通过了。
[9,10,11,12]
[5, 6, 7, 8],
[1， 2, 3， 4],
 return []int{}
[]int{0，-1}，// 朝左
[]int{l,0},
[]int{0,1},
for i := O; i = 0 && visit[x-1][y] == 1 {
if y-l >= 0 && visit[x][y-1] == 1 {
if x+l = left && count  top && count  maxJump { 
maxJump = max(maxJump, i+v)
return false
区间有重叠的要进行区间合并。
---
## Page 155
func partitionsort(a []Interval, lo, hi int) int {
func min(a int,b int) int {
func max(a int, b int) int {
func merge56(intervals []Interval) []Interval { 
type Interval struct {
// Interval define 
pivot := a[hi] 
ifa>b{
i := lo - 1 
if len(intervals) == 0 { 
for j := lo; j  res[curIndex].End {
 return intervals
res[curIndex].End = max(intervals[i].End, res[curIndex] .End)
else { 
res = append(res,
curIndex++ 
End 
Start int
 int
int
 intervals[i]]
len(intervals)-1)
---
## Page 156
进行合并。
这一题是第 56 题的加强版。给出多个没有重叠的区间，然后再给一个区间，要求把如果有重叠的区间
题目大意
Example 2: 
Example 1: 
You may assume that the intervals were initially sorted according to their start times.
necessary).
 Given a set of non-overlapping intervals, insert a new interval into the intervals (merge if 
题目
57. Insert Interval
']''a]''1]  sa ['] , 3   1
Output: [[1,5],[6,9]] 
output: [[1,2],[3,10],[12,16]]
Input: interva]s = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterva] = [4,8]
Input: intervals = [[1,3],[6,9]], newInterva] = [2,5]
func quicksort(a []Interval, lo, hi int)
pivot.End) {
quicksort(a, p+l, hi)
quicksort(a, lo,p-l)
p := partitionsort(a, lo, hi)
return i + 1 
a[i+l], a[hi] = a[hi], a[i+l]
if (a[j].start n- >n- ×= 0 && visit[x-1][y] == 1 {
if y-1 >= 0 && visit[x][y-1] == 1 {
if x+l <= n-1 && visit[x+1][y] == 1 { 
if y+l <= n-1 && visit[x][y+l] == 1 { 
res[x][y] = i
visit[x][y] =
return res 
 round++
 round++ 
continue