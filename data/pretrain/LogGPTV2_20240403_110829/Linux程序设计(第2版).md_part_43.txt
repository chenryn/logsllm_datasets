为我们感兴趣的文件封锁问题准备了三条命令，它们是：
加入jaVa编程群：524621833
---
## Page 226
208
8Linux程序设计
·F_GETLK命令。
F_SETLK命令
·F_SETLKW命令
在使用这些命令时，还必须加上第三个参数，这是--个指向“structflock”的指针，最终的
函数定义如下所示：
int fentl(1nt fildes,int command,struct flock *flock_structure );
flock（文件封锁）结构在不同版本有不同的实现方法，但至少包含以下儿个成员：
* short
1_type 
oqs .
1_whence:
•off_t
I_start:
*off_t
1_lene
* pid_t
1_pid。
I_type成员的取值是下表中的一个，它们也是在fentl.h文件里定义的见表7-1。它们是：
表7-1
1
取值
说明
F_RDLCK
一个其享（读操什）锁，许多不同的进程可以拥有文件同一（或者重叠）区域上的
共享锁，只要有--个进程拥有一把共享锁。最么，任何进程都不可能再拥有一把该区
F_UNLCK
解除封锁用来请除各种封锁
F.,WH:CK
--个独占（操作）镇。一个文件的一个区城只能由一个进程拥有一把独占锁：只
要有个进程拥有--把这样的顿，其她仟何进程都不可能再获得该区域上任间类的
锁。为了获得一把独占锁，文件必须以“”或“读/写”权限被打开
1_whence、1_start和l_len这几个成员定义了文件中的--个区域，即一个连续的字节集合。
1_whence必须是SEEK_SET、SEEK_CUR或SEEK_END（它们的定义在unistd.h文件里）这几个
值中的一个，这儿个值分别对应着文件头、当前位置和文件尾。它定义了相对于_stant的偏移值，
而il_start是该区域的第一个字节。在实际应用中，L_whence最常见的取值是SEEK_SET，这样
_start就是从文件头开始计算的。I_len参数定义了该区域里的字节个数。
L_pid参数的作用是指出哪个进程正施行若封锁，参见下面对F_GETLK的介绍。
文件中的每个字节在任一时间只能拥有一种类型的锁，可以（不能同时）有共享访问顿、
独占访问锁、和解除封锁三种状态。
fentl调用的命令和选项组合还真不少，我们将在下面依次对它们进行介绍：
1.F_GETLK命令
先来看看F_GETLK命令。它的作用是获取ildes（fcnd调用的第一个参数）打开的那个文件
的封锁信息，它不会对文件进行封锁。调用者进程把白己想创建的封锁类型信息传递给fcntl
fcnt再把这些信息和F_GETLK命令做为参数开始执行，它返网的信息告诉调用者进挥有哪些4
紫会阻止进人封锁状态。
加入jaVa编程群：524621833
---
## Page 227
第7章数据营理
209
flock结构中使用的取值见表7-2：
襄7-2
取领
说明
1_type
如渠是共享（只读）锁则取值为F_RDLCK：如果是独占（写操作）锁则取值为F_WRLCK
i_whence
SEEK_SET、SEEK_CUR或SEEK_END-个值中的个
1_start
文件预定封锁区的起始字节
1_1en
文件预定封锁区的字节个数
1_pid
拥有锁的进程的标识代码
进程可以通过F_GETLK调用查看文件某个区城的当前封锁状态。它必须对flock结构进行设
置，给出它想申请的封锁类型并定义好它准备封锁的区域。fcnti调用在操作成功时将返回一个
不是“1”的值。如果文件目前的封锁状态不允许调用者申请的封锁成功设置，它将用有关的信
息覆盖掉原来的flock结构：如果调用者申请的封锁能够被成功设置，flock结构保持不变。如果
F_GETLK调用无法获得文件预定封锁区的信息，就会返回“-1”表示操作失败。
如果F_GETLK调用成功了（即它返回了一个不是“-1”的值），调用者进程必须检查flock结
构的内容，看它是否发生了变化。因为l_pid值被设置为封锁进程（如果有的话）的标识代码，
所以查看这个数据域就可以方便地判断flock结构是否发生了变化。
2.F_SETLK命
这个命令的作用是对fldes指定的文件的某个区域施行或者解除封锁状态。此时，flock结构
中使用的值（与F_GETLK命令下的取值不一样了）见表7-3：
表7-3
取值
说明
1_type
如果是只读或共享锁则取债为F_RDLCK：如果是独占或写操作锁则取值为F_WRLCK：如果
是解除文件区域的封续状志则取值为F_UNLCK
1_pid
不使用
如果封锁成功，fcntl将返回一个不是“-1”的值：失败时将返回“-1”。fcntl的这一调用总
是会立刻返回。
3.F_SETLKW命令
它与刚才介绍的F_SETLK命令作用相同，但在无法进行封锁的情况下，它会一直等待直到
它能够施行封锁为止。一旦这个调用开始了等待，就只有在能够施行封锁或者收到信号时才会
返回。我们将在第10章介绍信号。
程序对某个文件拥有的各种锁将在相应的文件描述符被关闭时自动清除。各种封锁在程序
运行结束时也会自动清除。
7.2.3封锁状态下的读写操作
在对文件中的区域进行了封锁之后，访问文件中的数据时最好使用底层的read和write调用面
不是高级的fread和fwrite函数这是因为fread和fwrite会把被读写的数据缓冲保存在函数库里，
加入jaVa编程群：524621833
---
## Page 228
210
Linux程序设计
所以，读取一个文件前100个字节的fread调用在执行时会（事实上是肯定如此）读取多于100个
的字节，多出来的字符将被缓冲保存到所数库里去。如果程序继续用fread读取接下来的100个字
符，它实际是在读取缓冲保存在函数库里的数据，不会引起一个底层的read调用从文件里取出更
多的数据。
我们用希望对同一个文件进行修改的两个程序来说明这为什么会是一个问题。假设文件是
由200个字节组成的，字节的取值全部是“0”。第一个程序先开始运行，并且获得了文件前100
个字节的写封锁。接下来，它使用fread读取了那100个字节。可正如我们在第3章里看到的那样，
fread一次会读取多达BUFSIZ个字节，所以实际上它把整个文件都读进内存里了，但它只把前
100个字节传递给程序。
这时候，第二个程序开始运行了。它获得了文件后100个字节的写封锁。这肯定是成功的，
因为第一个程序只封锁了文件的前100个字节。第二个程序把字节100到199全部写成“2"，关闭
文件，解除封锁并退出运行。这时候第一个程序又封锁了文件的后100个字符并调用fread读取它
们。因为这些数据已经被缓冲保存了，所以程序实际看到的将是100个字节的“0"，而不是文件
里实际存在的100个“2”。面使用rcad和write就不会出现这样的问题。
这样看来文件封锁好象挺复杂的，可事实上，这件事是说起来难，做起来倒容易些。我们
用下面的lock3.c程序为例来说明文件封锁是如何工作的。
解释封锁概念需要两个程序，一个用来封锁，另-个用来测试。第一个程序的任务是进行
封锁。
动手试试：用fcntl封锁一个文件
1)程序开始是各种include语句和变量声明：
#include 
include 
#include 
include
const char *test_file = */tnp/test_lock*;
int main()
int file_dese;
int byte_count;
struct flock region_1;
struct fiock region_2:
int res;
2）打开一个文件描述符：
fi1e_desc = open{test_file, 0_RDKR 1 O_CREAT. 0666):
if(!file_desc）（
fprintf(stderr. "Unable to open es for readwrite\n*. test_filel;
exit (EXIT_FAILURE).
3）给文件里加上一些数据：
for (byte_count = 0:byte_count 
#include 
#include 
include 
const char *test_file、*/tmp/test_lock*;
define SIzE_TO_TRY 5
void show_lock_info(struct flock *to_show):
int nain()
int file_desc;
struct flock region_to_test:
int res;
int start_byte;
2)打开一个文件描述符：
file_desc = open(test_ti1e, 0_RDNR | 0_cREAr, 0666);
if（!file_descl
fprintf(stderr.*Unable to open hs for read/write*, test_file);
exit(EXIT_FAILURE):
for 1start_byte = 0; start_byte < 99: start_byte += SI2s_70_TRY} {
3）设置准备测试的文件区域：
region_to_test.1_whence = SEEx_SET;
region_to_test.l_type = F_wRLcK:
region_co_test.l_start-start_byte;
region_to_test.1_len = SIzE_To_rRY:
printfi*Testing F_wRLcK on region from ed to &d\n*,
start_byte,start_byte +STzE_TO_TRY);
4）现在，测试文件的封锁情况：
res ·fcnt1(file_desc,F_GETLx. &region_to_test);
if （res=-1）（
fprintf(stderr.*F_GErLK failed\n*1;
exit(EXIT_FAILURE):
if (region_to_test.1_pid=-1){
printf(*Lock would fail.F_GsTix returned:\n*):
show_lock_info(kregion_to_test);
else {
1
printf(*F_wRLCK - Lock would succeed\n*):
5)用共享锁再测试一次。再次设置准备测试的文件区域：
region_to_test.1_type = F_RDucK;
region_to_test.1_whence = SEEK_SET:
region_to_test.1_start =start_byte;
region_to_test.1_len = SIzE_To_TRY;
region_to_test.1_pid=-1;
加入jaVa编程群：524621833
---
## Page 231
第7章数据管理
213
printf(*Testing F_RDLCK on region from ed to ld\n*,
start_byte. start_byte + SIzE_TO_TRY);
6）再次测试文件的封锁情况：
res = fcntl(file_desc, F_GETLK, &region_to_test}: