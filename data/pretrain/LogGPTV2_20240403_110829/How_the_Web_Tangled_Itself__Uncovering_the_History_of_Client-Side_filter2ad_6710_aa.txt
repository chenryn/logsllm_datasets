# How the Web Tangled Itself: Uncovering the History of Client-Side Web (In)Security

**Authors:**
- Ben Stock, CISPA, Saarland University
- Martin Johns, SAP SE
- Marius Steffens, CISPA, Saarland University
- Michael Backes, CISPA, Saarland University

**Abstract:**
The evolution of the web from a static platform to a full-fledged technology stack has not followed a security blueprint, leading to numerous vulnerabilities specific to the web. Although much of the early server-side code is no longer accessible, the Internet Archive provides a unique perspective on the historical development of the web's client side and its (in)security. This study aims to uncover insights that can provide both a historical perspective on client-side web security and better practices for the future.

We analyzed the code and header information of the most significant web sites for each year between 1997 and 2016, totaling 659,710 different web documents. From this data, we identified key trends in client-side technologies, such as the increasing complexity of client-side web code and the rise of multi-origin application scenarios. We then assessed the emergence of corresponding vulnerability classes, their prevalence over time, and the security mechanisms developed to mitigate them.

Our findings reveal that with the advent of JavaScript-driven applications in the early 2000s, the likelihood of client-side injection vulnerabilities increased. There is a noticeable gap in adoption speed between easy-to-deploy security headers and more complex measures like Content Security Policy (CSP). Surprisingly, our data shows that sites using HTTPOnly cookies are more likely to have Cross-Site Scripting (XSS) issues. Finally, we observe that rising security awareness and the introduction of dedicated security technologies did not immediately improve the overall security of the client-side web.

## 1. A Historical Perspective on Web Security

The web platform is one of the most significant technological successes in popular computing. What began in 1991 as a simple mechanism for transporting hypertext documents has become the driving force behind many of today's dominant technologies. However, from a security standpoint, the web's track record is less impressive, often leading to the joke among security professionals that "web security" is an oxymoron.

Over the years, web technologies have given rise to numerous novel, web-specific vulnerability classes, such as XSS and Clickjacking, which primarily manifest on the client side. The constant change and expansion of the client side, from simple hypertext documents to complex applications with thousands of lines of JavaScript, have contributed to these ongoing developments. The trend is also reflected in the increase in client-side APIs in browsers, from 12 in 2006 to 93 in recent versions, including features like accurate timing and virtual reality interaction. This unrestricted growth led to what Zalewski [41] called "The Tangled Web."

Revisiting the development of web security over the past 25 years allows us to gain a historical perspective on the security aspects of an evolving computing platform and to anticipate future trends. While most web code is commercial and not publicly available, the client-side code, which is pushed to the browser as HTML or JavaScript, is public. The Internet Archive has been preserving this public face of the web since 1996, making it possible to study the historical security of the client side.

## 2. Methodology

### 2.1 Mining the Internet Archive for Historical Evidence

To gain insight into the client-side web's past, we utilized the Internet Archive, which has been archiving HTML pages, including all resources such as images, stylesheets, and scripts, since 1996. For each HTML page, the archive also stores the header information sent by the remote server, allowing us to investigate the prevalence of certain headers over time.

For a comprehensive view of the web's client-side evolution, we selected the 500 most relevant pages for each year from 1997 to 2016. These were the most frequently visited sites, and thus had a strong interest in securing their platforms against attacks. We used the first working Internet Archive snapshot of each domain for each year and followed the first level of links to get a broader coverage of the sites.

### 2.2 Technical Infrastructure

#### Custom Proxy and Crawlers
To reduce the load on the Wayback Archive, we set up a custom proxy infrastructure. This proxy removed artifacts added by Archive.org to each cached page, ensuring that our analysis results were not tainted. The proxy allowed access only to archived pages, and we collected all scripts and headers sent from the Archive servers. The original headers at the time of archiving were prefixed with X-Archive-Orig-, providing accurate original header information.

#### Data Storage and Parsing
All information gathered by our crawlers was stored in a central database. We developed several tools for data analysis, including parsing header information and analyzing HTML and JavaScript. For HTML, we used Pythonâ€™s BeautifulSoup to parse and analyze elements. For JavaScript, we developed a lightweight tool based on esprima and node.js to extract features such as called APIs and statements in each file.

#### Dynamic Dataflow Analysis
To automatically verify the existence of client-side XSS issues, we used techniques developed for CCS 2013 [17]. We ran a modified version of Chromium on the cached pages to gather data flows from attacker-controllable sources to dangerous sinks, such as `document.write` or `eval`. We then generated exploit URLs and visited these candidates to verify the presence of vulnerabilities.

## 3. Evolution of Client-Side Code

In this section, we discuss the evolution of client-side active content over time, showing that JavaScript remains the primary programming language on the web's client side. In the early days, web content was static, but with the advent of server-side languages like PHP, interactive applications became possible. By the mid-2000s, client-side technology, particularly JavaScript, became increasingly important.

We analyzed the HTML pages retrieved from the Internet Archive, focusing on the most relevant technologies, to understand how client-side technology evolved. Our findings highlight the increasing complexity and diversity of client-side code, which directly impacts the likelihood of vulnerabilities.

---

This optimized version of the text is more structured, clear, and professional, with improved flow and coherence.