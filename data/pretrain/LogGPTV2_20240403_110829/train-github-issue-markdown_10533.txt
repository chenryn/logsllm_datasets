Given the new `this` return type and F-bounded polymorphism I was a little
surprised that I still could not express a functor interface
**Example of Problem**
    interface IFunctor {
      /** Maps `A` into `B` */
      map(f: (a: A) => B): IFunctor;
    }
    // A class with more than just IFunctor in it.
    class Maybe implements IFunctor {
      constructor(init: A) { this.value = init; }
      isEmpty(): boolean { return false; }
      map(f: (a: A) => B): IFunctor { return new Maybe(f(this.value)); }
    }
    function toString>(a: F) { 
      return a.map((v: any) => '' + v); // no way to define that this returns F
    }
    let a: Maybe = new Maybe(100);
    let b: Maybe = toString(a);
    // error TS2322: Type 'IFunctor' is not assignable to type 'Maybe'.
**Ideal Solution:**  
Ideally we should be able to define that F needs to have a generic type, which
we can change
    interface IFunctor extends IFunctor<> {
      /** Maps `A` into `B` */
      map(f: (a: A) => B): F;
    }
or we can define the functions generics
    function toString extends IFunctor>(a: F): F { ... }