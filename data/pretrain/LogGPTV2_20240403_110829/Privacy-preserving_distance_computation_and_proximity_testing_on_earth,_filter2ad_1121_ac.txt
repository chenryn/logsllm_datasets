higher the e, the more digits after the decimal point are
preserved.
5. OUR PROTOCOLS
In this section, we present our PP-UTM, PP-ECEF and
PP-HS protocols. These protocols privately compute the
distance between two points in the UTM, ECEF and WGS84
coordinate systems, respectively.
5.1 PP-UTM Protocol
Our PP-UTM protocol computes Euclidean distance be-
tween two points laying on the same UTM zone. (Due to this
limitation, and as mentioned earlier, we consider this protocol
103Input: Alice: her position, expressed as coordinates CA = (xA, yA) with respect to a speciﬁc UTM zone; her public/private
keypair. Bob: his position, expressed as coordinates CB = (xB, yB) in the same zone as Alice; Alice’s public key pkA.
Output: Alice learns DUTM(CA, CB), deﬁned as the Euclidean distance between CA and CB.
Protocol steps:
1. Alice computes(cid:74)x2
2. Bob computes:
A + y2
A(cid:75),(cid:74)−2xA(cid:75),(cid:74)−2yA(cid:75) and sends these ciphertexts to Bob.
A(cid:75) ·(cid:74)−2xA(cid:75)xB ·(cid:74)−2yA(cid:75)yB ·(cid:74)x2
B − 2yAyB)(cid:75)
B − 2xAxB) + (y2
=(cid:74)DUTM(CA, CB)2(cid:75)
(cid:74)a(cid:75) =(cid:74)x2
=(cid:74)(x2
A + y2
A + x2
A + y2
B + y2
B(cid:75)
and sends(cid:74)a(cid:75) back to Alice.
3. Alice decrypts(cid:74)a(cid:75) and outputs DUTM(CA, CB) as
√
a.
Figure 2: PP-UTM Protocol
Input: Alice: her position, expressed as coordinates CA = (xA, yA, zA) in the ECEF coordinate system; her public/private
keypair. Bob: his position, expressed as coordinates CB = (xB, yB, zB) in the same coordinate system; Alice’s public key
pkA.
Output: Alice learns DECEF(CA, CB), deﬁned as the Euclidean distance between CA and CB.
Protocol steps:
A + y2
A + z2
2. Bob computes:
1. Alice computes(cid:74)x2
(cid:74)a(cid:48)(cid:75) =(cid:74)x2
=(cid:74)(x2
and sends(cid:74)a(cid:48)(cid:75) back to Alice.
3. Alice decrypts(cid:74)a(cid:48)(cid:75), computes a = a(cid:48)/4R2 and outputs DECEF(CA, CB) as 2R atan
A(cid:75),(cid:74)−2xA(cid:75),(cid:74)−2yA(cid:75),(cid:74)−2zA(cid:75) and sends these ciphertexts to Bob.
B(cid:75) ·(cid:74)−2zA(cid:75)zB
B − 2zAzB)(cid:75)
(cid:17)
(cid:16)(cid:112)a/(1 − a)
A(cid:75) ·(cid:74)−2xA(cid:75)xB ·(cid:74)−2yA(cid:75)yB ·(cid:74)x2
B + y2
B − 2yAyB) + (z2
A + z2
B − 2xAxB) + (y2
A + y2
A + x2
B + z2
A + y2
A + z2
.
Figure 3: PP-ECEF Protocol
as a baseline for evaluating both accuracy and performance
of our PP-ECEF and PP-HS protocols.)
Alice and Bob must determine whether their coordinates
lay on the same zone, prior to running the PP-UTM protocol.
To do so, they can assign a unique identiﬁer to each zone, and
then compare their respective identiﬁers using any protocol
that implements private equality test. As an example, they
can use the following simple algorithm:
Let zA represent Alice’s zone, and zB – Bob’s
zone. Alice sends (cid:74)zA(cid:75) to Bob, who computes
(cid:74)d(cid:75) = ((cid:74)zA(cid:75) ·(cid:74)−zB(cid:75))r = (cid:74)r · (zA − zB)(cid:75), where
message space. (cid:74)d(cid:75) is sent back to Alice, who
r is a random value uniformly chosen from the
decrypts it. If Alice and Bob belong to the same
zone (i.e., zA = zB), then d = 0. Otherwise,
d is uniformly distributed in the message space,
and does not reveal any additional information
about zB.
Even if Alice and Bob are not in the same zone, Alice may
still participate in the UTM protocol – although the result of
the computation will be unrelated to their correct distance.
This will prevent Bob from learning the output of the private
equality test.
Alice and Bob discretize their coordinates, as discussed in
Section 4, prior to using them in the protocol. The PP-UTM
protocol is shown in Figure 2.
5.2 PP-ECEF Protocol
Our PP-ECEF protocol computes the distance between
Alice and Bob in the ECEF coordinate system. Computation
of distance is divided in two phases:
1. Alice and Bob interact to privately compute the straight-
line (Euclidean) distance between their respective in-
puts; only Alice learns the results (i.e., variable a in
Section 3.2).
2. Then Alice converts this straight-line distance to the
corresponding distance on Earth’s surface (i.e., variable
d in Section 3.2).
Since Earth is represented as a sphere, step 2. is independent
from the absolute locations of Alice and Bob, and therefore
does not require any private input from the parties.
Similarly to the PP-UTM protocol, Alice and Bob’s coordi-
nates are discretized as discussed in Section 4. The PP-ECEF
is detailed in Figure 3.
5.3 PP-HS Protocol
The PP-HS protocol involves private computation of haver-
sine formula over Alice and Bob’s private input. However, if
the formula is used as is for the construction of a privacy-
preserving protocol, it requires Alice and Bob to interactively
compute sin2((lat A − lat B)/2) and sin2((lon A − lon B)/2).
While both can be computed within a privacy-preserving
framework (e.g., by implementing Taylor series expansion as
shown in [31]), the cost of the resulting protocol would be
prohibitive, especially on resource-constrained devices such
as smartphones and tablets.
However, this can be avoided by simply using the following
well-known trigonometric identity:
sin(ϕ − ψ) = sin(ϕ) cos(ψ) − cos(ϕ) sin(ψ).
After we apply this identity to the haversine formula from
Section 3.3, we can rewrite a as:
a =(sin(lat A/2) cos(lat B/2) − cos(lat A/2) sin(lat B/2))2
+ cos(lat A) cos(lat B)
· (sin(lon A/2) cos(lon B/2) − cos(lon A/2) sin(lon B/2))2
104Input: Alice: her position, expressed as coordinates CA = (lat A, lon A) as deﬁned in Section 3 and her public/private
keypair; Bob: his position, expressed as coordinates CB = (lat B, lon B) and Alice’s public key.
Output: Alice learns DHS(CA, CB) as deﬁned in Section 3.
Protocol steps:
1. Let α, . . . , µ deﬁned as in Section 3. Alice computes:
(cid:74)α2(cid:75),(cid:74)−2αγ(cid:75),(cid:74)γ2(cid:75),(cid:74)ζηθ2λ2(cid:75),(cid:74)−2ζηθλ(cid:75),(cid:74)ζη(cid:75)
and sends the ciphertexts to Bob.
2. Bob computes:
(cid:74)a(cid:75) =(cid:74)α2(cid:75)β2 ·(cid:74)−2αγ(cid:75)βδ ·(cid:74)γ2(cid:75)δ2 ·(cid:74)ζηθ2λ2(cid:75) ·(cid:74)−2ζηθλ(cid:75)µν ·(cid:74)ζη(cid:75)µ2ν2
(cid:16)(cid:112)a/(1 − a)
=(cid:74)α2β2 − 2αβγδ + γ2δ2 + ζηθ2λ2 − 2ζηθλµν + ζηµ2ν2(cid:75)
3. Bob sends(cid:74)a(cid:75) to Alice, which decrypts it and outputs DHS(CA, CB) as 2R atan
(cid:17)
.
Figure 4: PP-HS Protocol
Let us denote the cosine/sine values with greek letters, for
more concise notation, as:
α = cos(lat A/2)
β = sin(lat B/2)
γ = sin(lat A/2)
δ = cos(lat B/2)
ζ = cos(lat A)
η = cos(lat B)
θ = sin(lon A/2)
λ = cos(lon B/2)
µ = cos(lon A/2)
ν = sin(lon B/2)
We can then rewrite and expand a as:
a = α2β2 − 2αβγδ + γ2δ2 + ζηθ2λ2 − 2ζηθλµν + ζηµ2ν2
With this formulation, computing a does not involve joint
evaluation of any trigonometric function on private input. In
fact, each party can separately compute their share of the
formula, and combine their shares using only operations over
encrypted data.
Similarly to the PP-ECEF protocol, computing the dis-
tance between Alice and Bob given a does not require any
private input from either party. (Moreover, a can be easily
reconstructed from the distance between the protocol partic-
ipants.) For this reason, our PP-HS protocol allows Alice to
learn a, and to subsequently convert it to the actual distance
on Earth’s surface – in the unencrypted domain.
Instead of discretizing their coordinates, Alice and Bob
discretize values α, . . . , ν. The protocol is illustrated in
Figure 4.
5.4 Privacy-Preserving Proximity Testing
with Unconditional Response
We extend the protocols presented in sections 5.1-5.3 to
perform privacy-preserving proximity testing (PPPT). PPPT
reveals a single bit of information to Alice, which represents:
(cid:18)
(cid:19)
PPPTD(·,·)(CA, CB, ε) (cid:44)
D(CA, CB)
?
 a − aε). Given(cid:74)a(cid:75),(cid:74)aε(cid:75), encryption of w is computed
by Bob as(cid:74)w(cid:75) =(cid:74)2l(cid:75)·(cid:74)a(cid:75)·(cid:74)aε(cid:75)−1. Encryption of the l-th bit
of w is then computed as (cid:74)wl(cid:75) = (cid:74)2−l · (w − (w mod 2l))(cid:75).
action between Alice and Bob: Bob “masks”(cid:74)w(cid:75) by selecting
a random value r and computing (cid:74)w(cid:48)(cid:75) = (cid:74)w(cid:75) ·(cid:74)r(cid:75). Then,
Bob sends (cid:74)w(cid:48)(cid:75) to Alice, who decrypts it and returns the
(cid:74)c(cid:75) by computing (cid:74)c(cid:75) ·(cid:74)r(cid:75)−1 = (cid:74)w mod 2l(cid:75). We refer the
After Bob computes (cid:74)a(cid:75) in our distance protocols ((cid:74)a(cid:48)(cid:75)
computes – with Alice’s help – value(cid:74)w − (w mod 2l)(cid:75), which
encryption of c = w(cid:48) mod 2l to Alice. Next, Bob “unmasks”
for PP-ECEF), he does not return it to Alice. Instead, he
is 0 if and only if D(CA, CB)  aε.
When using the garbled circuit for comparison, Bob’s
input to the circuit is 0 for unconditional negative (0  a always
holds.)
The security of the comparison protocols guarantees that
Alice cannot distinguish between a correct result and an
unconditional response.
6. SECURITY ANALYSIS
Security of our protocols relies on the security of the un-
derlying building blocks. In particular, we need to assume
that the underlying homomorphic encryption scheme is se-
mantically secure.
We instantiate (cid:74) ·(cid:75) using the DGK encryption scheme,
which has been shown to be semantically secure under a
hardness assumption that uses subgroups of an RSA mod-
ulus [7, 6]. The privacy-preserving comparison protocol of
Erkin et al. was shown to be secure in [10], and therefore we
do not include it in our analysis.
To show the security of the protocols, we informally sketch
how to simulate the view of each party using its inputs and
outputs alone. If such simulation is indistinguishable from
the real execution of the protocol, for semi-honest parties
this implies that the protocols do not reveal any unintended
information to the participants (i.e., they learn only the
output and what can be deduced from their respective inputs
and outputs).
√
√
a. Simulator SA
Security of PP-UTM. Alice’s view of the protocols con-
sists of the encryption and decryption keys for (cid:74) ·(cid:75), and