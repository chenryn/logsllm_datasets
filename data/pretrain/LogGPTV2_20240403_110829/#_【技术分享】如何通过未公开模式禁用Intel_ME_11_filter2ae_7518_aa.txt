# 【技术分享】如何通过未公开模式禁用Intel ME 11

##### 译文声明
本文为翻译文章，原文来源：blog.ptsecurity.com
原文地址：[请提供具体链接]
译文仅供参考，具体内容及含义以原文为准。
译者：[兴趣使然的小胃](http://bobao.360.cn/member/contribute?uid=2819002922)
预估稿费：260 RMB
投稿方式：发送邮件至linwei#360.cn，或登录网页版在线投稿

## 一、前言
Positive Technologies研究团队对英特尔管理引擎（Intel Management Engine, Intel ME）11的内部结构进行了深入研究，并发现了一种在硬件初始化及主处理器启动后禁用Intel ME的方法。本文将详细介绍这一未公开模式的发现过程及其与美国政府高保证平台（High Assurance Platform, HAP）之间的关系。

**免责声明**：本文介绍的方法存在一定的风险，可能会损坏或损毁您的计算机。我们不对任何实验行为承担任何责任，也不保证整个过程能顺利完成。如果您了解相关风险并希望继续尝试，请在串行外设接口（Serial Peripheral Interface, SPI）编程器的帮助下进行。

## 二、简介
Intel ME是一项专有技术，由集成在平台控制单元（Platform Controller Hub, PCH）中的一个微控制器和一组内置外部设备组成。PCH负责处理器与外部设备之间的大部分通信，因此，Intel ME可以访问计算机上的几乎所有数据。如果攻击者能够在Intel ME上执行第三方代码，他们就能完全控制整个平台。世界各地的研究人员对Intel ME的内部结构越来越感兴趣，其中一个原因是该子系统已经迁移到新的硬件（x86）和软件（基于修改版MINIX的操作系统）平台上。在x86平台上，研究人员可以使用熟悉的二进制代码分析工具。在此之前，由于早期版本的ME使用了ARCompact微控制器，指令集完全不同，相关固件的分析非常困难。

不幸的是，我们之前无法分析Intel ME 11，因为其中的可执行模块经过霍夫曼编码压缩，使用了未知的压缩表。尽管如此，我们的研究团队（Dmitry Sklyarov、Mark Ermolov 和 Maxim Goryachy）成功恢复了这些压缩表，并开发了一个工具来解压镜像。您可以在 [GitHub](https://github.com/ptresearch/unME11) 上下载这个工具。

解压可执行模块后，我们继续研究Intel ME的内部软件和硬件结构。我们的团队一直在这方面开展研究，并积累了大量成果，这些成果将在未来逐步公开。本文是分析Intel ME内部结构及禁用ME核心功能系列文章的第一篇。长期以来，研究人员致力于找到禁用该功能的具体方法，以减轻Intel ME中任何零日漏洞可能带来的数据泄露风险。

## 三、如何禁用ME
一些x86计算机用户曾问过这样一个问题：如何禁用Intel ME？包括Positive Technologies专家在内的许多人已经多次提出这个问题。最近，基于Intel ME的英特尔主动管理技术（Intel Active Management Technology, AMT）出现了一个严重漏洞（评分为9.8/10），随着这个漏洞的披露，找到这个问题的答案变得愈加紧迫。

令人失望的是，在现代计算机上，我们无法完全禁用ME。主要原因在于这项技术负责初始化、电源管理和启动主处理器。另一个复杂因素是某些数据被集成在PCH芯片内部，而PCH正是现代主板上的南桥。一些爱好者尝试在维持计算机可操作性的前提下，移除ME镜像中的所有“冗余”部分，实现对ME的禁用，这是之前采用的主要方法。但这种方法并不简单，因为如果内置的PCH代码没有在闪存中找到ME模块，或者检测到相关模块处于损坏状态，系统将无法启动。

经过多年研发，[me_cleaner](https://github.com/corna/me_cleaner) 项目已经开发了一个实用工具，可以删除ME镜像中的大部分组件，只保留对主系统至关重要的组件。但这样处理后，即使系统成功启动，留给我们的时间也非常短，大约30秒后系统就可能自动关机。原因在于，一旦出现故障，ME会进入恢复模式（Recovery Mode），在这个模式下，系统只能运行一段时间。这样一来，“瘦身”过程变得非常复杂。例如，在早期版本的Intel ME中，我们可以将镜像大小缩小到90KB，但在Intel ME 11中，镜像只能缩小到650KB。

## 四、隐藏在QResource中的秘密
Intel允许主板制造商设置少量ME参数。为此，Intel提供了特殊的软件，包括用于配置ME参数的闪存镜像工具（Flash Image Tool, FIT）和通过内置SPI控制器直接对闪存进行编程的闪存编程工具（Flash Programming Tool, FPT）。这些程序并未提供给最终用户，但我们很容易在网上找到它们的下载地址。

从这些工具中，我们可以提取出大量XML文件（详细过程请点击[此链接](https://www.troopers.de/downloads/troopers17/TR17_ME11_Static.pdf)）。这些文件包含许多有趣的信息，包括ME固件的结构、PCH strap的描述以及集成在PCH芯片中的各种子系统的特殊配置信息。其中名为“reserve_hap”的字段引起了我们的注意，因为它后面紧跟着一行注释：“启用高保证平台（HAP）”。

通过Google搜索，我们很快找到了一些相关信息。根据搜索结果，该字段与美国国家安全局（NSA）的可信平台计划有关。关于这个计划，大家可以访问[此链接](http://fm.csl.sri.com/LAW/2009/dobry-law09-HAP-Challenges.pdf) 了解详细信息。首先，我们决定设置一下这个比特位，看看会发生什么情况。只要掌握SPI编程器或能够访问闪存描述符（Flash Descriptor），我们就可以设置这个比特（许多主板通常没有正确设置对闪存区域的访问权限）。

平台加载后，MEInfo工具报告了一个非常奇怪的状态：“Alt Disable Mode”。经过快速检查，我们发现ME没有响应命令，也没有对操作系统发出的请求做出反应。我们决定找出系统进入这种模式的原因以及当前这种情况的具体意义。当时，我们已经分析了BUP模块的主要部分，这个模块用于平台的初始化，并设置了MEInfo所显示的状态。为了了解BUP的工作机制，我们需要详细介绍Intel ME的软件环境。

## 五、Intel ME 11架构概览
从PCH 100系列开始，Intel彻底重新设计了PCH芯片。嵌入式微控制器的架构从ARC的ARCompact切换到了x86架构。Intel选择了Minute IA (MIA) 32位微控制器作为基础单元，该微控制器在Intel Edison微机和SoC Quark上使用，结合了Intel 486微处理器和奔腾处理器的一组指令集（ISA）。然而，对于PCH来说，Intel使用22纳米半导体技术制造了核心组件，使得微控制器具备更高的能效。在新的PCH中有三个这样的核心组件：管理引擎（ME）、集成传感器中心（Integrated Sensors Hub, ISH）和创新引擎（Innovation Engine, IE）。后两者可以根据PCH型号和目标平台启用或禁用，而ME核心始终处于启用状态。

这种大规模的修改也涉及到ME软件的修改。具体来说，MINIX被选为基础操作系统（以前使用的是ThreadX RTOS）。现在的ME固件包含全功能版的操作系统，包括进程、线程、内存管理、硬件总线驱动、文件系统以及其他许多组件。ME还集成了一个硬件加密处理器，支持SHA256、AES、RSA和HMAC。用户进程可以通过本地描述符表（Local Descriptor Table, LDT）访问硬件。进程的地址空间由LDT管理，该空间只是内核全局地址空间的一部分，内核全局地址空间也由本地描述符指定。因此，与Windows或Linux系统不同，内核不需要在不同进程的内存之间进行切换（修改页表目录）。

了解了Intel ME软件的背景知识后，我们现在可以分析操作系统和模块的具体加载过程。

## 六、Intel ME加载过程的各个阶段

[此处继续原文内容]

---

通过上述优化，文本更加清晰、连贯和专业。希望这对你有所帮助！