# 【技术分享】如何通过未公开模式禁用Intel ME 11
|
##### 译文声明
本文是翻译文章，文章来源：blog.ptsecurity.com
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
译者：[兴趣使然的小胃](http://bobao.360.cn/member/contribute?uid=2819002922)
预估稿费：260RMB
投稿方式：发送邮件至linwei#360.cn，或登陆网页版在线投稿
**一、前言**
Positive Technologies研究团队对 **英特尔管理引擎** （Intel Management Engine，Intel
ME）11的内部构造深入研究后，找到了在硬件初始化及主处理器启动后禁用Intel
ME的一种方法。在本文中，我们会介绍发现这个未公开模式的详细过程，也会介绍这一模式与美国政府的 **高保证平台** （High Assurance
Platform，HAP）之间的具体关系。
免责声明：本文介绍的方法存在一定的风险，可能会损坏或损毁你的计算机。我们对用户的任何实验行为不承担任何责任，也不保证整个过程能顺利完成。如果有人了解相关风险后想继续实验，建议在
**SPI** （Serial Peripheral Interface，串行外设接口）编程器的帮助下进行。
**  
**
**二、简介**
Intel ME是一项专有技术，由集成在平台控制单元（Platform Controller
Hub，PCH）中的一个微控制器以及一组内置的外部设备所组成。PCH承担了处理器与外部设备之间的绝大部分通信，因此，Intel
ME可以访问计算机上的几乎所有数据。如果攻击者可以在Intel ME上执行第三方代码，他就能完全控制整个平台。世界各地的研究人员对Intel
ME的内部构造越来越感兴趣，其中一个原因在于这个子系统已经迁移到了新的硬件（x86）以及软件（操作系统为修改版的MINIX）平台上。在x86平台上，研究者可以使用得心应手的二进制代码分析工具。在此之前，对相关固件的分析非常困难，因为早期版本的ME使用了ARCompact微控制器，指令集完全不同。
不幸的是，之前我们无法分析Intel ME
11，因为其中的可执行模块经过霍夫曼（Huffman）编码的压缩，使用了未知的压缩表。尽管如此，我们的研究团队（Dmitry Sklyarov、Mark
Ermolov以及Maxim
Goryachy三名成员）还是成功恢复了这些压缩表，开发了一个工具来解压镜像。大家可以在[GitHub](https://github.com/ptresearch/unME11)上下载这个工具。
解压可执行模块之后，我们继续研究Intel
ME的内部软件及硬件结构。我们的团队一直在这方面开展研究，也累积了大量研究成果，这些成果将于未来逐步公开。本文也是分析Intel
ME内部构造及禁用ME核心功能系列文章的第一篇文章。一直以来，研究人员致力于找到禁用该功能的具体方法，以减轻Intel
ME中的任何零日漏洞可能带来的数据泄露风险。
**  
**
**三、如何禁用ME**
某些x86计算机用户曾经问过这样一个问题：如何禁用Intel ME？包括[Positive
Technologies专家](https://hardenedlinux.github.io/firmware/2016/11/17/neutralize_ME_firmware_on_sandybridge_and_ivybridge.html)在内的许多人已经多次提出过这个问题。基于Intel
ME的[英特尔主动管理技术（Intel Active Management
Technology，AMT）](https://nvd.nist.gov/vuln/detail/CVE-2017-5689)最近出现了一个严重漏洞（评分为9.8/10），随着这个漏洞的披露，找到这个问题的答案也愈加紧迫。
令人失望的是，在现代计算机上，我们无法完全禁用ME。原因主要是因为这项技术负责初始化、管理电源以及启动主处理器。另一个复杂原因在于，某些数据被集成在PCH芯片内部，而PCH正是现代主板上的南桥。某些爱好者尝试在维持计算机可操作性的前提下，移除了ME镜像中的所有“冗余”部分，实现对ME的禁用，这也是之前采用的主要方法。但这种方法没有那么简单，因为如果内置的PCH代码没有在闪存中找到ME模块，或者检测到相关模块处于损坏状态，那么系统将无法启动。
经过多年的研发，[me_cleaner](https://github.com/corna/me_cleaner)项目已经开发了一个实用工具，可以删掉ME镜像中的大部分组件，只保留对主系统来说至关重要的组件。但这样处理后，即使系统成功启动，留给我们的时间也非常短，大约30秒之后系统就可能会自动关机。原因在于，一旦出现故障，ME就会进入恢复模式（Recovery
Mode），在这个模式下，系统只能运行一段时间。这样一来，“瘦身”过程就会变得非常复杂。比如，在早期版本的Intel
ME中，我们可以将镜像大小缩小到90KB，但Intel ME 11的镜像只能缩小到650KB。
**四、隐藏在QResource中的秘密**
Intel允许主板厂商设置少量ME参数。Intel为硬件厂商提供了特殊的软件来实现这一点，这些软件包括用于配置ME参数的闪存镜像工具（Flash Image
Tool，FIT），以及通过内置的SPI控制器来直接对闪存进行编程的闪存编程工具（Flash Programming
Tool，FPT）。这些程序并没有提供给最终用户，但我们很容易就能在网上找到这些工具的下载地址。
我们可以从这些工具中提取出大量XML文件（详细过程请点击[此链接](https://www.troopers.de/downloads/troopers17/TR17_ME11_Static.pdf)）。这些文件包含许多有趣的信息，包括ME固件的结构、PCH
strap的描述以及集成在PCH芯片中的各种子系统的特殊配置信息。其中名为“reserve_hap”的某个字段引起了我们的注意，因为这个字段后紧跟着一行注释：“启用高保证平台（HAP）”。
使用Google搜索后，我们很快就找到了一些信息。根据搜索结果，该字段与美国国家安全局（NSA）的可信平台计划（trusted platform
program）有关。关于这个计划，大家可以访问[此链接](http://fm.csl.sri.com/LAW/2009/dobry-law09-HAP-Challenges.pdf)了解详细信息。首先，我们第一反应是设置一下这个比特位，看设置完毕后会发生什么情况。只要掌握SPI编程器或者可以访问闪存描述符（Flash
Descriptor），我们就可以设置这个比特（许多主板通常没有正确设置对闪存区域的访问权限）。
平台加载后，MEInfo工具报告了一个非常奇怪的状态：“Alt Disable
Mode.（Alt禁用模式）”。经过快速检查，我们发现ME没有响应命令，也没有对操作系统发出的请求做出反应。我们决定找出系统进入这个模式的原因，以及当前这种情况的具体意义。当时，我们已经分析了BUP模块的主要部分，这个模块用于平台的初始化，也用于设置MEInfo所显示的状态。为了了解BUP的工作机制，我们需要详细介绍一下Intel
ME软件环境的具体信息。
**  
**
**五、Intel ME 11架构概览**
从PCH 100系列开始，Intel完全重新设计了PCH芯片。嵌入式微控制器的架构由ARC的ARCompact切换到x86架构。Intel选择Minute
IA（MIA）32位微控制器作为基础单元，该微控制器在Intel Edison微机以及SoC Quark上使用，结合使用了Intel
486微处理器以及奔腾处理器的一组指令集（ISA）。然而，对于PCH来说，Intel使用22纳米半导体技术制造了核心组件，使得微控制器具备更高的能效。在新的PCH中有三个这样的核心组件：管理引擎（ME）、集成传感器中心（Integrated
Sensors Hub，ISH）以及创新引擎（Innovation
Engine，IE）。后两者可根据PCH模型以及目标平台启用或者禁用，而ME核心始终处于启用状态。
这种大范围的修改同样涉及到ME软件的修改。具体说来，MINIX被选择作为基础操作系统（之前使用的是ThreadX
RTOS）。现在的ME固件包含全功能版的操作系统，包括进程、线程、内存管理、硬件总线驱动、文件系统以及其他许多组件。ME中也集成了一个硬件加密处理器，支持SHA256、AES、RSA以及HMAC。用户进程可以通过本地描述符表（local
descriptor table
，LDT）来访问硬件。进程的地址空间由LDT进行管理，该空间只是内核的全局地址空间的一部分，内核全局地址空间也由本地描述符来指定。因此，与Windows或Linux系统不同的是，内核不需要在不同进程的内存之间进行切换（修改页表目录）。
了解Intel ME软件的背景知识后，现在我们可以分析操作系统以及模块的具体加载过程。
**  
**
**六、Intel ME加载过程的各个阶段**