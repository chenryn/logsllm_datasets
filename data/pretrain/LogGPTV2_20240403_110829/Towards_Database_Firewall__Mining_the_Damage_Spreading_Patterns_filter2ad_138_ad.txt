s
y
S
0.95
0.9
0.85
BN
DR
BN-Repair
DR-Repair
1
0.8
0.6
0.4
0.2
e
t
a
R
y
t
i
l
i
b
a
l
i
a
v
A
BN-Repair
DR-Repair
1
0.8
0.6
0.4
0.2
e
t
a
R
y
t
i
l
i
b
a
l
i
a
v
A
0.8
0
50
100
150
Time (s)
200
250
300
Figure 4. System Integrity Estimation Pro-
cess. Real System Integrity SIr=0.8
BN
DR
1
0.8
0.6
0.4
0.2
e
t
a
R
y
t
i
l
i
b
a
l
i
a
v
A
BN
DR
1
0.8
0.6
0.4
0.2
e
t
a
R
y
t
i
l
i
b
a
l
i
a
v
A
0
0
50
100
150
Time (s)
200
250
300
0
0
50
100
150
Time (s)
200
250
300
(a) Synthetic Dataset
(b) Real Syn Dataset
Figure 5. System Availability without Repair-
ing Procedure
sessing the system integrity. We can also observe that the
estimation accuracy of our approach is relative high when
the new attack is similar to previous attacks. When the re-
call of the pattern mining is high, the estimation accuracy is
also high because more knowledge of patterns can be used.
However, when a different attack is launched, the accuracy
will be low because the previous knowledge is no longer
useful to estimate the integrity level of damaged objects.
More efforts are needed to study this issue.
6.4 System Availability Analysis
System availability is an important metric to evaluate the
performance of the database ﬁrewall framework. For con-
ventional methods, e.g. rolling back, even if there are only
a few damaged data objects, since the system is not acces-
sible while re-executing, the system availability is zero. It
is crucial to the database ﬁrewall to reduce this time period
and maintain the system availability on a certain level. In
our framework, we deﬁne two kinds of availabilities. The
maximum system availability is deﬁned as the rate of the
number of good data objects to the number of the total data
objects in the database Amax = ng
N . The real-time system
availability is deﬁned as the rate of the number of good data
objects discovered at time t to the number of the total data
objects in the database Ar = nt
N .
Figure 6.4 illustrates the results of the system availabil-
ity with respect to time from both the synthetic and the real
histories. The repairing procedure is not included in this
testing. The approach based on the dependency relation [1]
(denoted as DR, Bayesian network denoted as BN) is also
0
0
50
100
150
Time (s)
200
250
300
0
0
50
100
150
Time (s)
200
250
300
(a) Synthetic Dataset
(b) Real Syn Dataset
Figure 6. System Availability with Repairing
Procedure
implemented to compare with our approach. Let ε be a user
speciﬁed parameter. If the estimated integrity of data ob-
jects is equal to ε or higher, the repairing procedure is ﬁred
up instead of waiting until it is 100 percent sure that the
data objects are damaged. Let Q be the differential quality
of information assurance required by different applications.
It may vary from an application to another. If the estimated
integrity of data objects is equal to Q or lower, these data
objects are available to be accessed. Given Amax = 0.8,
Q = 0.15 and ε = 0.6, it can be seen in ﬁgure 6.4 that the
database ﬁrewall approach can maintain a relative higher
system availability Ar and also reach the maximum system
availability Amax = 0.8 faster than the dependency rela-
tion based approach. Figure 6 demonstrates the results of
the system availability when the repairing procedure [1] is
introduced. Given Q = 0.15 and ε = 0.6, it can be seen that
the maximum system availability Amax = 1 can be reach
earlier than the dependency relation based approach. Note,
we assume the repairing rate is constant.
6.5 System Throughput Analysis
System throughput in terms of continuously providing
data access while ﬁltering out potential damage spread-
ing transactions when the data system is under an attack
is an important metric to measure the performance of the
database ﬁrewall framework.
In practice, the system throughput is deﬁned as a ratio of
the number of served transactions to the number of trans-
actions requiring service: T r = ns
N . We assume that the
arrival rate of the transactions is constant. Figure 7 demon-
strates the performance of the system throughput from both
the synthetic and the real dataset without taking into consid-
eration the damage leakage. To ﬁlter out potential damage
spreading transactions, we assume the transaction depen-
dence is tight. For instance, if transaction T2 does not access
compromised data but rely on the result of transaction T1,
transaction T2 will still be discarded if transaction T1 is ﬁl-
tered out due to accessing compromised data. This assume
is reasonable because the result directly from transaction T1
is dirty.
Given Amax = 0.8, Q = 0.15 and ε = 0.6 ,it can
be seen that, in ﬁgure 7(a), the system throughput reaches
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 20061
0.8
0.6
0.4
0.2
e
t
a
R
t
u
p
h
g
u
o
r
h
T
1
0.8
0.6
0.4
0.2
e
t
a
R
t
u
p
h
g
u
o
r
h
T
0
0
50
100
150
Time (s)
200
250
300
0
0
50
100
150
Time (s)
200
250
300
T_Throughput
T_Throughput
(a) Synthetic Dataset without Re-
pairing Procedure
(b) Real Syn Dataset with Re-
pairing Procedure
Figure 7. System Throughput
nearly zero at time t = 75s. The reason is that the data
objects required by the transactions are all contained, and
ﬁltering policy does not allow those data objects being ac-
cessed by the transactions. In addition, in both ﬁgure 7(a)
and (b), although the system throughput vibrates up and
down along the time axis, the average ratio of the system
throughput is above 50%. Moreover, if the repairing pro-
cess is introduced in ﬁgure 7(b), the system throughput can
be even higher.
7 Conclusion and Future Work
In this paper, we study the problem of mining frequent
damage spreading patterns from the previous attack histo-
ries, of using Bayesian network constructed upon the mined
damage spreading patterns to predict the damage probabili-
ties and the system integrity on the ﬂy. With this feature, a
database ﬁrewall framework is devised to dynamically en-
force a policy of transaction ﬁltering to ﬁlter out the poten-
tial spreading transactions. In the meanwhile, the database
ﬁrewall continuously provides data services in the face of
attack. The experimental results demonstrate that it is satis-
factory that the database ﬁrewall can continuously provide
quality data in accordance with the differential service re-
quirement when the system is detected under an attack.
At this early stage of the work, we do not study the
impact of the detection latency. Constructing Bayesian
network over small amount of patterns in general does not
have signiﬁcant impact on the performance of the database
ﬁrewall system. However, the computation overhead could
increase when discovered spreading patterns accumulate.
In our immediate future work, we will further evaluate
our model to address above issues and extend the idea of
database ﬁrewall to a distributed environment. Several
other problems are interesting as well, such as how the
performance is impacted by heavy attack, how can the
estimation accuracy be improved, and what is the condition
under which mining spreading pattern can be superior.
Acknowledgement This work was
supported in
part by NSF CCR-TC-0233324. And we wish to thank
Elisa Bertino, Ashish Kamra and Xiangji Huang very much
for kindly sharing the clinic OLTP data with us.
References
[1] P. Ammann, S. Jajodia, and P. Liu, “Recovery from malicious trans-
actions,” in IEEE Transactions on Knowledge and Data Engineering,
vol. 15, no. 5, pp. 1167–1185, 2002.
[2] P. Liu and S. Jajodia, “Multi-phase damage conﬁnement in database
systems for intrusion tolerance,” in Proc. 14th IEEE Computer Secu-
rity Foundations Workshop, Nova Scotia, Canada, June 2001.
[3] P. Liu, P. Ammann, and S. Jajodia, “Rewriting histories: Recovery
from malicious transactions”. Distributed and Parallel Database 8, 1,
7-40.
[4] P. Ammann, S. Jajodia, C. McCollum, and B. Blaustein, “Surviv-
ing information warfare attacks on databases,” in Proceedings of the
IEEE Symposium on Security and Privacy, Oakland, CA, May 1997,
pp. 164–174.
[5] P. Liu, “Architectures for intrusion tolerant database systems,” in
Twenty-ﬁrst Annual Computer Security Applications Conference
(ACSAC’02), 2002, pp. 311–320.
[6] D. Barbara, R. Goel, and S. Jajodia, “Using checksums to detect data
corruption,” in Proceedings of the 2000 International Conference on
Extending Data Base Technology, Mar 2000.
[7] P. W. P. J. Grefen and P. M. G. Apers, “Integrity control in relational
database systems: an overview,” Data Knowl. Eng., vol. 10, no. 2,
pp. 187–223, 1993.
[8] E. Bertino and A. Kamra and E. Terzi and A. Vakali, “Intrusion De-
tection in RBAC-administered Databases,” 21st Annual Computer
Security Applications Conference (ACSAC 2005), 5-9 December
2005, Tucson, AZ, USA
[9] P. A. Bernstein, V. Hadzilacos, and N. Goodman, Concurrency Con-
trol and Recovery in Database Systems. Addison-Wesley, Reading,
MA, 1987.
[10] J. Pearl, Causality: Models, Reasoning and Inference. Cambridge
University Press.
[11] T. Chiueh and D. Pilania, “Design, implementation, and evaluation
of an intrusion resilient database system,” in Proc. International Con-
ference on Data Engineering, 1024-1035, 2005.
[12] S. Sekar, M. Bendre, and P. Bollineni, “A fast automaton-based
method for detecting anomalous program behaviors,” in 2001 IEEE
Symposium on Security and Privacy. Oakland, CA.
[13] S.-P. Shieh, and V. Glogor, “On a pattern-oriented model for intrusion
detection,” IEEE Trans. On Knowledge and Data Engineering 9, 4,
661-667
[14] R. Sobhan and B. Panda, “Reorganization of the database log for
information warfare data recovery,” in Proc. of the ﬁfteenth annual
working conference on Database and application security, Niagara,
Ontario, Canada, 121-134, 2001.
[15] R. Agrawal and R. Srikant, “Fast algorithms for ming association
rules,” in Proc. of the VLDB Conference, Santiago, Chile, 1994.
[16] Q. Yao, A. An, and X. Huang, “Finding and analyzing database user
sessions,” in Proc. of the 10th International Conference on Database
System for Advanced Applications, 2005.
[17] Owasp top ten most critical web application security vulnerabilities.
http://www.owasp.org/documentation/topten.html, 2004
[18] S. Y. Lee, W. L. Low, and P. Y. Wong, “Learning ﬁngerprints for a
database intrusion detection system,” in 7th European Symposium
on Research in Computer Security (ESORICS), 2002.
[19] F. Valeur, D. Mutz, and G. Vigna, “A learning-based approach to
the detection of SQL attacks,” in Proceedings of the Conference on
Detection of Intrusions and Malware & Vulnerability Assessment
(DIMVA), July 2005.
[20] C. Kruegel, and G. Vigna, “Anomaly detection of web-based at-
tacks,” in CCS’03. Washingtion, DC, USA, 251-261.
[21] B. Panda, and J. Giordano, “ Reconstructing the database after
electronic attacks,” in the 12th IFIP 11.3 Working Conference on
Database Security, 1998.
[22] J.-L. Lin, and M. H. Dunham, “A survey of distributed database
checkpointing,” in Distributed and Parallel Databases 5, 3, 289-319.
[23] Y. Lin, and E. D. Lazowska, “A study of time warp rollback macha-
nisms,” ACM Transactions on Modeling and Computer Simulations
1, 1, 51-72.
[24] D. R. Jefferson, “Virtual time,” ACM Transactions on Programming
Languages and Systems 7, 3, 404-425.
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006