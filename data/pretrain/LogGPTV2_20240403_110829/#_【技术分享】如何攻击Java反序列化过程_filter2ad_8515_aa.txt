# 【技术分享】如何攻击Java反序列化过程
|
##### 译文声明
本文是翻译文章，文章来源：nickbloor.co.uk
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
****
****
译者：[兴趣使然的小胃](http://bobao.360.cn/member/contribute?uid=2819002922)
预估稿费：200RMB
投稿方式：发送邮件至linwei#360.cn，或登陆网页版在线投稿
**一、前言**
****
现在反序列化（deserialization）漏洞早已不是新鲜事物（如这几处参考资料[[1]](https://heine.familiedeelstra.com/security/unserialize)[[2]](http://www.pwntester.com/blog/2013/12/16/cve-2011-2894-deserialization-spring-rce/)[[3]](https://foxglovesecurity.com/2015/11/06/what-do-weblogic-websphere-jboss-jenkins-opennms-and-your-application-have-in-common-this-vulnerability/)[[4]](https://www.insomniasec.com/downloads/publications/Practical%20PHP%20Object%20Injection.pdf)），但与其他类别漏洞相比，反序列化漏洞的利用过程涉及更多方面的因素。在应邀对客户进行渗透测试时，我成功利用Java反序列化漏洞获得了某台服务器的权限，利用这台服务器，我获得了数十台服务器的root访问权限，这些服务器横跨多个数据中心，部署了各种预生产以及生产环境。在之前多次渗透测试中，安全人员都没有发现过这个漏洞，如果我之前没接触过Java序列化及反序列化方面的知识，我肯定也会错过这个漏洞。
在本文中，我会尝试理清大家对反序列化漏洞的一些误解及困扰，希望能通过工具的使用来降低反序列化漏洞利用的技术门槛。我主要针对的是Java语言，但所涉及的原理同样也适用于其他语言。此外，我会重点分析命令执行的利用方法，以保持主题的简洁性。
今年早些时候，我在[SteelCon](https://www.steelcon.info/)上讨论过这个话题，后面我还会在[BSides
Manchester](https://www.bsidesmcr.org.uk/)以及BSides
Belfast上讨论同一话题，此外，在今年的[44con](https://44con.com/)上，我会讨论另一个Java后门。
**二、序列化及反序列化**
****
简而言之，序列化就是将运行时的变量和程序对象转换为可被存储或传输形式的一种过程。反序列化是一个相反的过程，可以将序列化形式的数据转换回内存中的变量及程序对象。
**经过序列化的数据可以存储为文本格式的数据，如JSON或者XML，也可以存储为二进制格式的数据** 。包括 **C#** 、 **Java** 以及
**PHP**
在内的许多高级语言本身就支持数据序列化，操作起来非常便捷，使开发者不必自己去实现这一过程，大大减轻开发者的工作量。在本文中，我重点分析的是Java内置的序列化格式，但其他数据格式也可能面临类似的风险（大家可以参考Alvaro
Muñoz和Oleksandr Mirosh在Black Hat USA 2017以及Def Con
25上关于JSON攻击的[演讲](https://www.blackhat.com/us-17/briefings.html#friday-the-13th-json-attacks)来了解更多技术细节）。
**2.1 问题所在**
序列化和反序列化的应用本身并不存在问题。 **但当用户（或者攻击者）可以控制正在反序列化的数据时，问题则随之出现** 。比如，
**如果数据使用网络渠道投递给反序列化处理过程，那么当攻击者可以控制被反序列化的数据时，此时内存中的变量及程序对象就会受到一定程度的影响。随后，如果攻击者可以影响内存中的变量以及程序对象，与这些变量及程序对象有关的代码执行流程就会受到影响**
。我们来看一下Java反序列化的例子：
    public class Session { 
        public String username; 
        public boolean loggedIn;
        public void loadSession(byte[] sessionData) throws Exception { 
            ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(sessionData)); 
            this.username = ois.readUTF(); 
            this.loggedIn = ois.readBoolean(); 
            } 
        }
上述代码中，“loadSession”方法接受一个字节数组作为参数，反序列化一个字符串，将处理结果赋值给对象的“username”以及“loggedIn”属性。
**如果攻击者可以控制“sessionData”字节数组的内容，那么当该数组被传递给此方法时，攻击者就能控制对象的这些属性**
。这个Session对象的某个使用场景如下所示：
    public class UserSettingsController { 
        public void updatePassword(Session session, String newPassword) throws Exception { 
            if(session.loggedIn) { 
                UserModel.updatePassword(session.username, newPassword); 
            } else { 
                throw new Exception("Error: User not logged in."); 
                } 
            } 
        }
如果登录会话建立成功，那么会话所对应的那个用户的密码就会同步更新为输入的那个密码。这是“POP（Property-Oriented
Programming，面向属性编程）利用点”的一个简单示例，根据这段代码，我们可以利用对象的属性值来控制某些用户数据。
**2.2 面向属性编程**
当我们可以控制对象的属性值，并利用这些属性值影响代码的执行过程时，这一过程就称之为“面向属性编程（ **property-oriented
programming，POP** ）”。 **POP利用点指的是一个代码片段，我们可以修改某些对象的属性来影响这个代码片段，使其满足我们的特定需求**
。许多情况下，我们需要串联多个利用点才能形成完整的利用程序。我们可以将其看成高级ROP（return-oriented
programming，面向返回编程）技术，只不过ROP需要将某个值推送到栈上，而我们通过POP利用点可以将某些数据写入到文件中。
这里非常重要的一点是，反序列化漏洞利用过程不需要将类或者代码发送给服务器来执行。我们只是简单发送了类中的某些属性，服务器对这些属性比较敏感，通过这些属性，我们就能控制负责处理这些属性的已有代码。因此，
**漏洞利用成功与否取决于我们对代码的熟悉程度** ， **我们需要充分了解通过反序列化操作能被操控的那部分代码**
。这也是反序列化漏洞利用过程中的难点所在。
**2.3 有趣的利用点**
程序中任何地方都可能存在POP利用点，唯一的要求是，我们可以利用反序列化对象的属性来操控程序代码，且攻击者可以控制正在被反序列化的数据。还有一些利用点更值得我们注意，因为它们的执行过程预测起来更为方便。在Java中，可序列化的类可以定义名为“readObject”的一种方法，在反序列化过程中，这个方法可以用来执行某些特定的操作（比如支持向后兼容特性）。当该类所属的某个对象正在被反序列化时，可以用这种方法来响应这类事件。比如，当某个数据库管理器对象被反序列化到内存中时，利用这种方法可以自动化建立与数据库的连接。大多数Java序列化漏洞利用技术使用的正是readObject方法中的代码，因为反序列化过程中肯定会执行这些代码。
**三、利用反序列化漏洞**
****