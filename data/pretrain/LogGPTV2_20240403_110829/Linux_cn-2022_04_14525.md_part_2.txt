```
$ go run -work hello.go
WORK=/tmp/go-build3209320645
Hello World
$ find /tmp/go-build3209320645
/tmp/go-build3209320645
/tmp/go-build3209320645/b001
/tmp/go-build3209320645/b001/importcfg.link
/tmp/go-build3209320645/b001/exe
/tmp/go-build3209320645/b001/exe/hello
$ /tmp/go-build3209320645/b001/exe/hello
Hello World
```
### 其他编译选项
如果说，你想手动编译程序，而不是使用 Go 的 `build` 和 `run` 这两个方便的命令，最后得到一个可以直接由你的操作系统（这里指 Linux）运行的可执行文件。那么，你该怎么做呢？这个过程可以分为两部分：编译和链接。你可以使用 `tool` 选项来看看它是如何工作的。
首先，使用 `tool compile` 命令产生结果的 `ar` 归档文件，它包含了 `.o` 中间文件。接下来，对这个 `hello.o` 文件执行 `tool link` 命令，产生最终的可执行文件，然后你就可以运行它了。
```
$ go tool compile hello.go
$ file hello.o
hello.o: current ar archive
$ ar t hello.o
__.PKGDEF
_go_.o
$ go tool link -o hello hello.o
$ file hello
hello: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), statically linked, not stripped
$ ./hello
Hello World
```
如果你想进一步查看基于 `hello.o` 文件产生可执行文件的链接过程，你可以使用 `-v` 选项，它会搜索每个 Go 可执行文件中包含的 `runtime.a` 文件。
```
$ go tool link -v -o hello hello.o
HEADER = -H5 -T0x401000 -R0x1000
searching for runtime.a in /usr/lib/golang/pkg/linux_amd64/runtime.a
82052 symbols, 18774 reachable
        1 package symbols, 1106 hashed symbols, 77185 non-package symbols, 3760 external symbols
81968 liveness data
```
### 交叉编译选项
现在我已经解释了 Go 程序的编译过程，接下来，我将演示 Go 如何通过在实际的 `build` 命令之前提供 `GOOS` 和 `GOARCH` 这两个环境变量，来允许你构建针对不同硬件架构和操作系统的可执行文件。
这有什么用呢？举个例子，你会发现为 ARM（arch64）架构制作的可执行文件不能在英特尔（x86\_64）架构上运行，而且会产生一个 Exec 格式错误。
下面的这些选项使得生成跨平台的二进制文件变得小菜一碟：
```
$ GOOS=linux GOARCH=arm64 go build hello.go
$ file ./hello
./hello: ELF 64-bit LSB executable, ARM aarch64, version 1 (SYSV), statically linked, not stripped
$ ./hello
bash: ./hello: cannot execute binary file: Exec format error
$ uname -m
x86_64
```
你可以阅读我之前的博文，以更多了解我在 [使用 Go 进行交叉编译](https://opensource.com/article/21/1/go-cross-compiling) 方面的经验。
### 查看底层汇编指令
源代码并不会直接转换为可执行文件，尽管它生成了一种中间汇编格式，然后最终被组装为可执行文件。在 Go 中，这被映射为一种中间汇编格式，而不是底层硬件汇编指令。
要查看这个中间汇编格式，请在使用 `build` 命令时，提供 `-gcflags` 选项，后面跟着 `-S`。这个命令将会显示使用到的汇编指令：
```
$ go build -gcflags="-S" hello.go
# command-line-arguments
"".main STEXT size=138 args=0x0 locals=0x58 funcid=0x0
        0x0000 00000 (/test/hello.go:5) TEXT    "".main(SB), ABIInternal, $88-0
        0x0000 00000 (/test/hello.go:5) MOVQ    (TLS), CX
        0x0009 00009 (/test/hello.go:5) CMPQ    SP, 16(CX)
        0x000d 00013 (/test/hello.go:5) PCDATA  $0, $-2
        0x000d 00013 (/test/hello.go:5) JLS     128
>
```
你也可以使用 `objdump -s` 选项，来查看已经编译好的可执行程序的汇编指令，就像下面这样：
```
$ ls
hello  hello.go
$ go tool objdump -s main.main hello
TEXT main.main(SB) /test/hello.go
  hello.go:5            0x4975a0                64488b0c25f8ffffff      MOVQ FS:0xfffffff8, CX                  
  hello.go:5            0x4975a9                483b6110                CMPQ 0x10(CX), SP                       
  hello.go:5            0x4975ad                7671                    JBE 0x497620                            
  hello.go:5            0x4975af                4883ec58                SUBQ $0x58, SP                          
  hello.go:6            0x4975d8                4889442448              MOVQ AX, 0x48(SP)                       
>
```
### 分离二进制文件以减少其大小
Go 的二进制文件通常比较大。例如, 一个简单的 “Hello World” 程序将会产生一个 1.9M 大小的二进制文件。
```
$ go build hello.go
$
$ du -sh hello
1.9M    hello
$
$ file hello
hello: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), statically linked, not stripped
$
```
为了减少生成的二进制文件的大小，你可以分离执行过程中不需要的信息。使用 `-ldflags` 和 `-s -w` 选项可以使生成的二进制文件略微变小为 1.3M。
```
$ go build -ldflags="-s -w" hello.go
$
$ du -sh hello
1.3M    hello
$
$ file hello
hello: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), statically linked, stripped
$
```
### 总结
我希望这篇文章向你介绍了一些方便的 Go 编译选项，同时帮助了你更好地理解 Go 编译过程。关于构建过程的其他信息和其他有趣的选项，请参考 Go 命令帮助：
```
$ go help build
```
*题图由 [Ashraf Chemban](https://pixabay.com/zh/users/ashrafchemban-11099338/?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=3916956) 在 [Pixabay](https://pixabay.com/zh/?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=3916956) 上发布。* 
---
via: 
作者：[Gaurav Kamathe](https://opensource.com/users/gkamathe) 选题：[lkxed](https://github.com/lkxed) 译者：[lkxed](https://github.com/lkxed) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出