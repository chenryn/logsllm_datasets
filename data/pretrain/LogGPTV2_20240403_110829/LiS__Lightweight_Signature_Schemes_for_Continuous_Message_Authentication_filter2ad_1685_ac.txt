Table 1, we summarize sequence of games to present the main ideas
of the proof.
Table 1: Sequence of games for LiS1
Game Description & Modification
0
1
2
3
4
Real experiment following original algorithms
Replace each output of the universal hash function UHF with a
uniform random value
Randomly generate a signature xi for each message mi instead of
running CHColl. The output of CHColl is statistically close to a
uniform random value
Reduce the security to that of the chameleon hash function CHF
Reduce the security to the false positive error of Bloom Filter BF
4.2 Security Analysis of LiS2
Theorem 4.2. We assume the chameleon hash function CHF is
secure as defined in Section 2, and the hash function h is modeled as
a random oracle. Then LiS2 with given parameters κ and ℓ is secure
against adaptive chosen message attacks with advantage
+ 2−ϵ
AdvSIGA,LiS2(κ, ℓ) ≤ AdvCHA,CHF(κ) +
2
ℓ
2ℓr
i , r′
.
The proof of this theorem is similar to that of Theorem 4.1.
Here we mainly explain why the random oracle h and nonce N
can work to provide adaptive security. Recall that, to reduce the
security of LiS1 to that of chameleon hash in the proof of Theorem
4.1, we generated ℓ dummy random messages and random values
{(m′
i)}i∈[ℓ]. The key point in the reduction is how to use the
random oracle to map a message m∗ chosen by the adversary to
the pre-sampled m′
with
a random value Ni so that the string m∗
i
i ||Ni is unique unless a
2/2ℓr . Due to this
collision happens with a collision probability ℓ
fact, we can establish a unique connection between each string
m∗
i ||Ni and m′
as h(m∗
. Hence we can reduce the security
of LiS2 to that of chameleon hash function with a similar proof
strategy of that of LiS1.
. By design, we attach each message m∗
i
i ||Ni) = m′
i
i
Session 14: CPS Security ASIA CCS ’20, October 5–9, 2020, Taipei, Taiwan724$← R2
LiS2.Sign(skidC , m):
N
y := h1(m||N)
x := CHColl(skCH, r′
cnt := cnt + 1
r′
cnt
Return x, N
:= h2(k||cnt)
cnt , M, y)
LiS2.Verify(vkidC ,(m, N), x):
vr := 0
t := CHF(h1(m||N), x)
vr := BF.Check(t)
Return vr
LiS1.KGen(1κ , ℓ, aux):
(skCH, pkCH) $← CHKGen(1κ)
$← RCH; ϵ ← aux
k
BF.Init(ℓ, ϵ)
$← MCH
M
For i ∈ [ℓ]:
r′
:= h2(k||i)
ti := CHF(M, r′
i
i)
BF.Insert(ti)
cnt := 1;
:= (skCH, k, M)
skidC
:= (BF, pkCH)
vkidC
Return (skidC , vkidC)
Figure 5: Algorithms of LiS2.
5 INSTANTIATIONS AND OPTIMIZATIONS
In this section, we show the concrete instantiations and optimiza-
tions of our generic building blocks, i.e., chameleon hash func-
tion CHF, universal hash function UHF, and the hash functions
h1 and h2. Let p and q be two large prime numbers, such that
p = u · q + 1 where u is a small integer. We particularly have
that KCH = MCH = RCH = KUH = MUH = SSIG = Zq, and
YCH = Zp.
The Hash Functions h1 and h2. Our choice for both hash func-
tions h1 and h2 is the standardized cryptographic hash function
SHA2 [22]. Since the range of h1 is identical to that of h2, we can
instantiate h1 and h2 by the same functions.
Universal Hash Function UHF. We instantiate UHF by Multiply-
modular scheme proposed in [17]. The key k = (k0, k1) of UHF
consists of two group elements k0
q. Given
a message m, the hash function evaluates the hash value y :=
UHF(k, m) = k0 · m + k1 (mod q). Some optimizations can be
adopted by following [23].
Instantiation of Chameleon Hash Function. We review the
original discrete logarithm based chameleon hash function [15] in
Appendix A. To have a better performance in the collision algorithm,
we slightly modify the hash evaluation algorithm, and we describe
our modified version as follows:
q and k1
$← Z∗
$← Z∗
$← Z∗
• CHKGen(1κ): The key generation algorithm samples ran-
dom group generator д of order q in Z∗
p and a secret key
q, and computes the public key pkCH := дskCH
skCH
(mod p).
• CHF(pkCH, m, r): The evaluation algorithm takes as input a
public key pkCH ∈ Z∗
q and a randomness
r ∈ Z∗
CH (mod p). In
q, and outputs a hash value y := дr pkm
contrast to the algorithm in [15], we just switch the places
of m and r, and this change is only conceptual.
• CHColl(skCH, r′, M, m): An efficient deterministic collision
algorithm CHColl takes as input the secret key skCH, and
p, a message m ∈ Z∗
(r′, M, m) ∈ Z∗
(mod q).
q, outputs a value x := M ·skCH +r′−m·skCH
We stress that the signer idC can pre-compute M ·skCH and store
it instead of M. Due to the modification in this scenario, we have
the following major performance optimization:
• We reduce one big-number division (comparing to [15])
due to our modification on the chameleon hash evaluation
algorithm. The improvement is significant for a resource-
constrained device since the cost of a big-number modular
division is close to a hash operation.
Lemma 5.1. The modified chameleon hash function CHF is secure
if the discrete logarithm problem is hard relative to Zp.
m′−m (mod q).
Proof. Comparing with the algorithm in [15], we only switched the
places of the message m and the randomness r. If the adversary can
output two message/randomness pairs (m, r) and (m′, r′) that lead
to the same hash value, then we can use them to solve the discrete
logarithm problem, i.e., skCH := r−r′
6 VERIFICATION KEY REPLENISHMENT
Obviously, one limitation of the pre-computation strategy is that
the pre-computed verification keys will be used up eventually. To
overcome this limitation and support unlimited message authentica-
tion, we need to design a mechanism to re-initialize the verification
key. We stress that it is sufficient to only refresh the verification key
without modifying the secret/public key pair (pkCH, skCH), so the
services running on the signer will not be interrupted at all. The
first naïve solution is to let the signer initialize a new Bloom filter
instance BF′ with ℓ chameleon hash values which are generated
based on the initial seed r′
and M as in LiS1.KGen. To this end, it
has to send BF′ to the verifiers together with a signature that can
be verified by the current verification key. However, this solution
requires the signer to run the expensive key generation algorithm,
and thus, it is not favorable in practice.
To free the signer from updating the verification key, we develop
ℓ
two solutions as follows.
Session 14: CPS Security ASIA CCS ’20, October 5–9, 2020, Taipei, Taiwan725Server-aided Replenishment (SAR): The signer can outsource
the re-initialization job of the new Bloom filter instance BF′ to a
trusted server (which is not the verifier). Then, the outsourcing
server who knows the dummy randomness/message pair (r′, pkM
CH)
and the key k of the universal hash function can compute those
chameleon hash values for the signer without any interaction. The
signer does not need to get involved in the verification key update,
and it can keep using its signing key to sign future messages con-
tinuously. The outsourcing server (the key generation center) only
needs to periodically publish a new BF′ together with the server’s
signature to a public bulletin, which can be downloaded by the
public. Nothing needs to be changed on the signer side. Hence, the
signer and the verifier can run in parallel as long as the replenish-
ment of the verification key is in time before the old verification
key becomes invalid. The system of SAR is depicted in Figure 6.
Figure 6: System Overview of Server-aided Replenishment
(SAR). Verifiers can be malicious. The singer and the trusted key
generation center (KGC) do not need any interactions during the
replenishment procedure.
Verifier Self-replenishment (VSR): If the verifier is trustworthy
(not controlled or compromised by an adversary), then we can allow
CH, r′, k) for signature verification. In this
the verifier to possess (pkM
way, the verifier can replenish its own verification keys regularly.
In particular, in a cyber-physical system, it is common that the
messages are sent on a regular basis with a fixed time period. Thus,
we can actually exploit this fact and develop a simplified verification
algorithm. In the model, we can consider all messages are associated
with a monotonically increasing time-stamp, and we simplify the
verification algorithm (to reduce the storage cost) to enable the
verifier to have a small and constant storage cost. Besides, we use
Tm to denote a time-stamp that is in the message m, and let Tl be
the time when the last valid signature is received. ∆s stands for the
fixed time slot between two consecutive messages sent from the
signer. We show the system overview and the modified algorithm
of VSR in Figure 7 and 8. Note that the Bloom filter is not needed
in both Setup and Verify algorithms anymore, and thus the size of
the verification key does not depend on ℓ and becomes a constant.
Furthermore, to modify LiS2, we require the signer to include the
counter cnt as part of the message, and it computes h1(m||N ||cnt)
in the Sign algorithm. Since r′ or k needs to be kept secret, the
modified algorithms will not be able to provide public verifiability,
and it can only be verified by a group of trusted verifiers.
Figure 7: Overview of Verifier Self-replenishment (VSR). Ver-
ifiers should be trusted. KGC only needs to send the tuple (M ·
CH, r′, k) to verifier
skCH, skCH, r′, k) to the signer and the tuple (pk M
only once respectively after key generation. r′ = ∅ in LiS2.
The modified algorithm well fits a cyber-physical system sce-
nario (e.g., smart grid and manufacturing systems) where the ver-
ifier needs to continuously monitor the status (and data) of the
signer (e.g., a sensor), and the verifiers are only a few pre-known
and trusted machines. We stress that in this scenario, ℓ can be con-
sidered as the maximum number of signature failures (including
signature loss and signature verification fails) that the verifier can
tolerate between the last valid time Tl and the current time Tc. For a
real-time monitoring system in a CPS, ℓ should be small. Note that
we modified the KGen algorithm to let the KGC and the verifier
store pkM
instead of pkCH for both security and efficiency rea-
CH
sons. This change can hide the value of M from the adversary, and
therefore, an adversary who compromised the KGC or the verifier
cannot extract the secret key skCH with knowing M.
Remarks. The first replenishment solution SAR is more appealing
and practical than the naïve solution since it does not need to
interact with the signer for replenishment. For example, a maritime
transport company can periodically replenish the verification keys
for ships in the sea every day. The second replenishment solution
VSR can be used when the signature schemes are deployed within
a factory or enterprise, which has trustworthy verifiers and does
not need public verifiability.
Based on the above replenishment scenarios, the message au-
thentication power of the signer in our signature schemes can be
unlimited. Besides, due to this replenishment property, we can use
a smaller ℓ to reduce the size of the verification key.
7 APPLICATIONS
LiS can be widely used in cyber-physical systems. It enables resource-
constrained signers to (continuously) authenticate messages. In the
following, we just name a few examples of suitable applications.
Satellite Navigation Systems. Satellite-dependent positioning
systems, such as GPS and GNSS, can provide navigation and time
synchronization features, which have a significant impact on daily
life. The users of such systems just periodically (e.g., every 1 second)
receive signals and navigation messages from the satellites, without
transmitting any data back to the satellites. Such a widely used and
convenient system becomes an attractive target of various attackers.
For example, by launching a spoofing attack [24, 25], attackers
can effectively coerce GPS/GNSS receivers into concluding false
Session 14: CPS Security ASIA CCS ’20, October 5–9, 2020, Taipei, Taiwan7261
.Verify(vkidC , m, x):
LiSVSR
CH,Tl) = vkidC
(k, pkM
r′ ← private storaдe
If Tm < Tl : OUTPUT 0
r′
0 := r′; vr := 0; t := CHF(m, x)
ℓ := ⌊ Tm−Tl
For i ∈ [ℓ]:
r′
i
i−1)
∆s
⌋
:= UHF(k, r′
CH · дr′
tℓ := pkM
ℓ ;
If tℓ = t:
vr := 1; r′ := r′
OUTPUT vr
ℓ
; Tl := Tm
.Verify(vkidC ,(m, N , cnt), x):
LiSVSR
2
CH,Tl) = vkidC
(pkM
k ← private storaдe
If Tm < Tl : OUTPUT 0
0 := r′; vr := 0; t := CHF(h1(m||N ||cnt), x)
r′
r′
cnt
tcnt := pkM
If tcnt = t:
:= h2(k||cnt)
CH · дr′
vr := 1; Tl := Tm
cnt ;
OUTPUT vr
Figure 8: The Modified Verification Algorithms.
location and navigation solutions. To prevent spoofing attacks, LiS1
can be used to authenticate GPS/GNSS signals and messages. In
this application, the verification key of the satellite can be refreshed
using server-aided replenishment (SAR). For example, the satellite
control center on the ground can periodically (say every week)
publish a new Bloom Filter instance for the GPS/GNSS devices on
the ground to verify the signatures.
Maritime Systems. One of the most important systems used on
ships is the automatic identification system (AIS). It can show some
information about vessels such as unique identification, position,
course, and speed. AIS is intended to assist watch-standing officers
on a vessel and allow maritime authorities to track and monitor
vessel movements. The AIS information provided by those vessels
is the primary method of collision avoidance for water transports.
In practice, we need a very accurate position of a ship when it is in