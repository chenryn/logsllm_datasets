### Service Continuity Management, Strategy Generation, and Interface Design

#### Introduction
The interface of a component describes its behavior by focusing on the interactions it has with other components while hiding all other internal interactions. This concept is fundamental to Service Continuity Management and Strategy Generation. According to [6], "the interface describes the behavior of a component that is obtained by considering only the interactions of that interface and by hiding all other interactions."

Taking this into account, we propose the following definitions:

**Definition 7.** "A contract, in the form of a collection of operation definitions, provides a mechanism for separating an external and internal view of a determined element and allows establishing a 'client-provider' relationship mediated by the notion of 'contract.'" [11]

**Definition 8.** "An interface is the description of the signatures of a set of operations available to the service client for invocation." [10]

In light of these definitions, we consider an interface to be:

**Definition 9.** An abstraction and description of the service behavior, specifically the operations (in the form of signatures) regarding a software component, providing a clear separation between the external and internal views.

#### ITSM Interfaces and Information Objects

ITSM interfaces should provide information based on Fry’s [9] activities, transmissions, work instructions, and quality metrics. Each ITIL interface is specified using a standard template for specific ITIL components (Abstract IT Component), which includes information about the ITIL component transmissions (inputs and outputs), also known as ITIL information objects.

**ITIL Information Object:** As Sommerville states, "The services offered by a component are made available through an interface, and all interactions are through that interface. The component interface is expressed in terms of parameterized operations, and its internal state is never exposed." [5]

These interactions, or transmissions, can be performed as inputs or outputs. Kempter & Kempter [12] refer to such input and output flows as ITIL Information Objects, a term later reused by Wang [13].

#### Interface Design Methodology

The interface design methodology is divided into the following steps:

1. **Build the ITSM Process**
2. **Specify the ITSM Process Flow**
3. **Identify Operations, Inputs, Outputs, and Data Types**
4. **Discuss and Revise the Specification**

##### A. Build the ITSM Processes

When implementing processes specific to some ITSM practice, a formalized process is necessary. For ITIL, some processes are already explicitly presented in ITIL publications, such as Incident Management, Problem Management, and Request Fulfillment. If a specific process is not defined, the person developing the interface should use a methodology to build such a process.

Fry [9] provides a method for building ITIL (or ITSM) processes, which involves answering five key questions (Figure 2) and then following a process to build the ITIL (or ITSM) process (Figure 3).

##### B. Specify the ITSM Process Flow

Once a diagram is provided by ITIL publications or as a result of Fry’s process design methodology, it should be documented. Notations like BPMN [17], EPC, or UML activity diagrams can be used to represent the process, which consists of tasks (activities) and conditions determining the order of the tasks [16].

For example, in the ITIL Incident Management process, it might make sense to subdivide the "Incident Prioritization" activity into "Assess Impact" and "Assess Urgency" (Figure 4).

##### C. Identify Operations, Inputs, Outputs, and Data Types

To get an operation-centric view of ITSM activities within an ITSM process model, it is important to look at the activities present in the process diagram and think about how they can be subdivided into logical operations and how they are organized and ordered within a specific activity.

For instance, in the ITIL Incident Management and Problem Management processes, almost every attribute for the main record types (Incident and Problem records) is listed. It is also important to analyze what needs to be inputted and outputted from the operations.

Cross-functional diagrams should be developed to help map and subdivide ITSM activities into operations. Some data types, such as incident or problem records, have a solid base common to all of them, including an ID, summary, categorization, urgency, impact, priority, and description. These data types can be specified via an ontology, such as OWL.

##### D. Discuss and Revise the Specification

During the final period of this work, specifications for the Incident Management and Problem Management were developed, discussed, and reviewed with the SAPO S.D.B. Team. A specification was developed and served as the basis for the Request Fulfillment internal implementation at the company, consisting of an API to address the ITSM needs of the company.

#### Evaluation

The methodology was continually evaluated from a stakeholders and User eXperience (UX) point of view. The user interfaces were also evaluated against requirements from the UX team within the company. Feedback from the UX team was needed, and every aspect that would structurally change or impact an interface or its design was discussed and, if needed, implemented.

#### Conclusions

This scientific approach to ITSM interface design can take the development of ITSM interfaces (and the solutions they are part of) to a new level. Not only from an organizational costs perspective but also by promoting the reuse of ITSM interfaces, contradicting the paradigm that each organizational entity should develop or buy its own ITSM solution silo. Reusable ITSM interfaces allow companies to improve and enhance the functionality of their ITSM processes, benefiting all consumers.

#### Acknowledgements

We would like to thank SAPO Labs [5] and the CISUC IS Group [6], who supported this work, as well as the S.D.B. team that made each and every part of this work a reality.

#### References

1. OGC - Office of Government Commerce, “The official introduction to the ITIL Service Lifecycle,” The Stationery Office, UK, 2007.
2. OGC - Office of Government Commerce, “ITIL Service Operation,” Stationery Office, UK, 2011.
3. R. Pereira and M. M. da Silva, “ITIL maturity model,” CISTI, pp. 1–6, 2010.
4. R. England, “Review of recent ITIL studies,” APM Group Ltd, 2011.
5. I. Sommerville, “Software engineering,” International Computer Science Series, Pearson Books, 2010.
6. G. T. Heineman and W. T. Councill, “Definition of a software component and its elements,” Chap. 1 in “Component-Based Software Engineering: Putting the Pieces Together,” Addison-Wesley, Boston, MA, 2001, pp. 5-20.
7. C. Szyperski, D. Gruntz, and S. Murer, “Component software: beyond object-oriented programming,” Component software series. ACM Press, 2002.
8. S. Dudek, F. Uebernickel, and W. Brenner, “Explicating technological and organizational interfaces of modular IT service components to support the process of IT service composition,” Procs. Intl. Workshop on Advances in IT Service Process Engineering, pp. 7—12, 2011.
9. M. Fry, “ITIL Lite - A road map to full or partial ITIL implementation,” The Stationery Office, UK, 2010.
10. M. Papazoglou and J. Yang, “Design methodology for web services and business processes,” Technologies for E-Services, LNCS, Springer Berlin Heidelberg, vol. 2444, pp. 175–233, 2002.
11. C. Videira A. Silva, “UML, Metodologias e Ferramentas CASE,” vol. 2, Edições Centro Atlântico, 2005.
12. S. Kempter and A. Kempter, “ITIL implementation,” It Process Maps - http://en.itprocessmaps.com, 2008.
13. J. Wang, “How to implement ITIL successfully?” MSc Thesis, JÖNKÖPING INTERNATIONAL BUSINESS SCHOOL, 2010.
14. J. Huang, “Should you be bi-lingual as an IT outsourcing service provider?” eTOM and ITIL, BPTrends, January 2005.
15. W. van der Aalst and K. M. van Hee, “Workflow Management: Models, Methods, and Systems,” MIT Press - Cooperative Information Systems, 2004.
16. The Object Management Group, “Business Process Model and Notation,” http://www.omg.org/spec/BPMN/2.0/PDF/, 2011.
17. D. de Champeaux and P. Faure, “Object-Oriented System Development,” 1993.
18. M. Nüttgens, T. Feld, and V. Zimmermann, “Business Process Modeling with EPC and UML: Transformation or Integration?”

**Links:**
- XML: http://www.w3.org/XML/
- JSON: http://www.json.org/
- SAPO Labs: http://labs.sapo.pt/
- CISUC IS Group: https://www.cisuc.uc.pt/groups/show/is