restarted or terminated. 
If there are other tasks, which do not belong to 
any  of  the  terminated/restarted  applications, 
these  tasks  might  be  terminated  and  restarted 
with  the  services  provided  by  the  operating 
system. 
(cid:131) 
(cid:131) 
(cid:131) 
4. Validation 
Before  we  explore  the  concept  validation  of  the 
Software Watchdog in detail, a brief introduction to the 
EASIS  validation  activities,  development  process, 
methodology and prototyping tool chain will be given. 
4.1. Brief introduction to EASIS validator 
in 
The  EASIS  architecture  validator  [14][15]  focuses 
on the prototyping and validation of some of the most 
the  EASIS  architecture, 
relevant  properties  of 
including 
fault-tolerant 
hardware, 
dependability 
software  architecture  and  services.  The  EASIS  HIL 
(Hardware-in-the-Loop)  validator  hosts  a  number  of 
ISS-applications,  such  as 
the  driver  assistance 
applications  SafeLane  and  SafeSpeed  with  Steer-by-
Wire technology. SafeLane is a lane departure warning 
application, and SafeSpeed is a system to automatically 
limit  the  vehicle  speed  to  an  externally  commanded 
maximum  value.  The  nodes 
the  architecture 
validator  include  fault-tolerant  actuator  and  sensor 
nodes,  driving  dynamics 
environment 
simulation,  light  control  node  and  a  gateway  node, 
which  connects  different  vehicle  domains  of  TCP/IP, 
CAN  (Controller  Area  Network)  [16]  and  FlexRay 
[16]. 
4.2. Brief introduction to validation process 
control, 
The  validation  of 
the  central  node  of 
the  Software  Watchdog 
is 
performed  on 
the  EASIS 
architecture validator. The central node is an AutoBox, 
a  rapid  prototyping  platform  from  dSPACE  [17], 
where  the  safety  applications  of  SafeSpeed  with 
control algorithms and dependability software services 
e.g. the Software Watchdog are integrated. 
1
2
Functional Model
(MATLAB/Simulink)
Functional Model 
mapped on System 
Architecture
Virtual Prototype
3
4
FleyRay Schedule
Generated C-Code
(DECOMSYS)
dSpace
Prototyping
Platform
Figure 3: Tool chain and development process 
As shown in Figure 3, the validation process of the 
Software Watchdog follows the model- and simulation 
based  development  process,  in  which a  sub-system  is 
developed  and  tested  in  a  pure  software  environment 
with  the  help  of  simulation  tools  (Software-in-the-
Loop  test).  The  implementation  of  software  on  a 
particular hardware platform will only be initiated after 
a successful test of the functionalities with the help of 
simulation models. In the first step after requirements 
analysis of the applications, system functional design is 
initiated  by  building  and  modeling  the  whole  system 
with  Matlab/Simulink,  in  particular  the  modeling  of 
runnables. The  Software  Watchdog  is  prototyped  and 
simulated  on  a  PC  as  a  virtual  prototype  in  the  third 
step. In the next step, based on the knowledge gained 
from  the  virtual  prototype  and  other  automotive 
constraints  such  as  memory  and  timing requirements, 
the  AutoBox  was  chosen  for  the  validation  and 
evaluation  of  the  concepts  in  the  EASIS  architecture 
validator.  The  virtual  prototype  of 
the  Software 
Watchdog  and  the  modeled  safety  application  will  be 
mapped  onto  tasks  and  scheduled  on  the  system 
architecture.  Individual  hardware  specific  C-codes  
were  generated,  compiled  and  loaded  onto  the  rapid 
prototyping platform.  
4.3. Modeling, simulation and prototyping of 
the Software Watchdog 
of 
runnables 
in  OSEK,  Stateflow 
For  the  modeling  of  task dispatching  and program 
flow 
in 
Matlab/Simulink  was  applied.  Stateflow  is  a  design 
and  development  tool  used  for  modeling  complex 
system  behavior  based  on  finite  state  machines. 
Runnables are modeled  with  function-call  subsystems 
and triggered by events sent by Stateflow in a defined 
execution  sequence.  A  function-call  subsystem  is  a 
block  in  Matlab/Simulink  which  can  be  invoked  as  a 
function  by  another  block.  For  instance,  as  illustrated 
in Figure 4, the application SafeSpeed can be divided 
into 
in 
GetSensorValue, 
in 
SAFE_CC_process  and  setting  of  the  actuator  in 
runnables:  sensor  value 
algorithm 
reading 
control 
three 
the 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:51:24 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007Speed_process.  These  are  triggered  as  function-call 
subsystems by the Stateflow chart SafeSpeed, in which 
the  execution  sequence  of  runnables  is  implemented. 
To  indicate  the  aliveness  of  the  runnables,  further 
function-call subsystems to simulate the glue code are 
also  implemented,  which  report  the  execution  of  the 
runnables.  
Figure 4: Modeling of runnables and program flow 
The 
time-triggered  behavior  of 
the  heartbeat 
monitoring  unit  and  task  state  indication  unit  was 
modeled with time counters. Thus, in order to simulate 
the  mechanism  of  task  scheduling  with  different 
periods in the operating system, different time counters 
can  be  assigned  to the  Stateflow  charts.  On  the  other 
hand,  the  program  flow  checking  unit  was  modeled 
using an event-triggered Stateflow chart. 
4.4. Integration of the Software Watchdog in 
the EASIS software platform 
to 
faults 
Following  the  layered  architecture  of  the  EASIS 
software  platform  (see  Figure  1), 
the  Software 
Watchdog  service  is  integrated  into  L3  as  a  separate 
module  with  defined  interfaces  to  other  software 
modules. There are two main interfaces to the Software 
Watchdog.  The  first  interface  serves  for  application 
software  components  in  L1  to  report  their  aliveness 
indications  to  the  Software  Watchdog.  The  other 
interface is used for the Software Watchdog to report 
the  Fault  Management 
the  detected 
Framework.  Fault  Management  Framework 
is  a 
general  fault 
the 
information  on  the  detected  faults,  and  informs  the 
applications  about 
fault  detection.  Lastly, 
coordinated fault treatment can be carried out with the 
help  of  the  Operating  System  and  Fault  Management 
Framework. 
4.5. Evaluation of the Software Watchdog in 
EASIS validator 
treatment  system 
that  gathers 
The  evaluation  of 
the  Software  Watchdog  is 
performed  based  on  the  fault/error  definition  in  the 
design  phase.  Since  different  faults  can  result  in  the 
same error, error injection is applied for the evaluation 
the  Software 
of 
the  design  and  prototyping  of 
the 
the 
the 
[17] 
Watchdog.  Such  an  approach  has  the  advantage  that 
the dependability requirements can be tested in a front-
loading  manner  of  system  development.  The  concept 
can be validated independently from the specific fault-
types. Faults, which are difficult to inject into the test 
bench or on-road test, can be relatively easily emulated 
with errors.  
timing  parameter  of 
Here  again  Stateflow  is  used  to  manipulate  the 
execution  frequency  and  sequence  of  runnables  by 
changing 
runnables, 
manipulation  of  loop  counters  and  building  invalid 
execution  branches,  etc.  The  experiment  environment 
ControlDesk 
the 
possibility  to  manipulate  the  data  assigned  to  the 
timing  parameter  of  runnables  to  the  condition  that 
determine 
in  the 
runtime.  Therefore,  it  is  used  to  trigger  the  error 
injection  during the  execution  of  the  applications and 
visualize the results as well. 
invalid  execution  branches 
from  dSPACE  provides 
By  building  different  evaluation  cases,  the  three 
chief functionalities of the Software Watchdog, i.e. the 
detection  of  the  aliveness  error,  the  arrival  rate  error 
and the program flow error, are successfully validated. 
The  following  screenshots  demonstrate  some  of  the 
evaluation  cases  generated  by  injecting  heartbeat  or 
program  flow  errors.  The  x-axes  of  each  plot  in  the 
diagram indicate the time lapse, which has a scalar of 
10ms. The y-axes indicate the value of the counter and 
number of detected error.  
to  a  slider  instrument 
In  order  to  inject heartbeat  errors,  a  time  scalar is 
connected 
to  change  the 
execution frequency, For example, Figure 5 shows the 
test with an injected aliveness error. Similar test with 
arrival rate error and control flow error were performed 
as  well.  The  increase  in  the  y-value  in  the  last  plot 
“AM  Result”  (Aliveness  Monitoring  Result) indicates 
the detection of the errors. 
Figure 5: Test with injected aliveness error 
Figure 6 shows the case in which the real cause of 
the  erroneous 
the 
collaboration  of  the  units  of  the  Software  Watchdog. 
Here,  the  aliveness  errors  detected  by  the  heartbeat 
identified 
through 
state 
is 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:51:24 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007monitoring  unit  are  actually  caused  by  program  flow 
errors, which are reported with the plot “PFC Result” 
(Program  Flow  Checking  Result).  After  the  detection 
of three program flow errors (which here is set as the 
threshold),  the  task  state  is  set  to  “faulty”.  Only  one 
accumulated aliveness error is reported. 
Figure 6: Collaboration of fault detection units 
5. Conclusions and outlook 
Conclusions 
2003. 
References 
[1]  M.  Broy, 
"Automotive  Software 
and  Systems 
Engineering,"  Proc.  25th  International  Conference  on 
Software Engineering, pp. 719 – 720, 2003 
[2]  AUTOSAR partnership, http://www.autosar.org/ 
[3]  Z.T.  Kalbarczyk,  et  al.,  Chameleon:  A  Software 
Infrastructure  for  Adaptive  Fault  Tolerance,  IEEE 
Transaction  on  parallel  and  distributed  systems,  Vol. 
10, No. 6, June 1999 
[4]  K.  Tindell,  F.  Wolf,  R.  Ernst,  "Safe  Automotive 
Software Development," presented at Proceedings of the 
Design, Automation and Test in Europe Conference and 
IEEE  Computer  Society, 
Exhibition 
Munich, Germany, March 2003. 
(DATE’03), 
[5]  D.  Lantrip,  "General  Purpose  Watchdog  Timer 
Component  for  a  Multitasking  System,"  embedded 
world, 1997. 
[6]  J. Ganssle, "Watching the Watchdog," embedded world, 
pp. 
2006 
33-35, 
System," 
[7]  OSEK,  "OSEK/VDX  Operating  System  Specification 
2.2.3,"  2005,  http://portal.osek-vdx.org/files/pdf/specs/ 
os223.pdf 
[8]  OSEK,  "OSEK/VDX  time  triggered  operating  system 
1.0,"  2001,  http://portal.osek-vdx.org/files/pdf/specs/ 
ttos10.pdf 
[9]  The AUTOSAR Consortium, "AUTOSAR Specification 
: 
of  Operating 
http://www.autosar.org/download/AUTOSAR_SWS_O
S.pdf 
[10] Nahmsuk  Oh,  P.  Shirvani,  E.  McCluskey,  "Control-
IEEE 
Flow  Checking  by  Software  Signatures," 
Transaction on Reliability, vol. 51, Mar-2002, pp. 111-
121. 
[11] M. Hiller, et al., "Dependability Services in the EASIS 
Software  Platform,"  DSN  2006  Workshop  on 
Architecting  Dependable  Systems,  http://www.easis-
online.org/wEnglish/img/pdf-files/wads_2006_easis.pdf 
"Fault 
http://www.easis-
Management 
online.org/wEnglish/download/Deliverables/EASIS_ 
Deliverable_D1.2-8_V1.0.pdf 
[12] EASIS  Deliverable 
document  D1.2-8, 
Framework", 
[13] T.  Michel,  et  al.,  "A  New  Approach  to  Program  Flow 
Checking  without  Program  Modification",  Proc.  21st 
Symposium on Fault-Tolerant Computing, pp. 334-341, 
1991 
[14] EASIS,  "Specification  of  EASIS  Validator  with 
Telematics  Gate-way,  WT5.1  Deliverable,"  EASIS 
Consortium 2006. 
[15] EASIS,  Work  Package  5  Validation,  http://www.easis-
online.org/wEnglish/workpackages/wp5.shtml?navid=9 
[16] G. Leen, D. Heffernan, A. Dunne, “Digital Networks in 
the Automotive Vehicle,” IEEE Computer and Control 
Eng. J., Dec-1999, pp. 262-264. 
[17] M.  Eckmann,  F.  Mertens, 
"Close-to-Production 
in  ATZ 
Prototyping,  Flexible  and  Cost-efficient," 
electronic, vol. 01/2006, 2006, pp. 22-27. 
The concepts and design of the Software Watchdog 
proposed  in  this  paper  reflects  the  current  trends  in 
automotive software development. 
The  Software  Watchdog,  a  software-implemented 
dependability  service,  monitors  the  individual  timing 
constraints of application runnables and their program 
flow.  It  demonstrates  the  functional  potential  for 
improving  dependability 
in-vehicle 
embedded  systems.  The  interface  of  the  Software 
Watchdog  provides 
information  for  further  fault 
treatments  and  variants  for  fault  containment  and 
tolerance. 
in  distributed 
Many valuable experiences were gained during the 
modeling,  simulation  and  rapid  prototyping  of  ISS 
applications and dependability software services using 
the concept of runnables.  
Outlook 
In the EASIS architecture validator, further analysis 
of  fault  detection  coverage  can  be  of  interest  for  the 
mapping and application of the Software Watchdog to 
meet  the  individual  dependability  requirements  of 
different  safety  systems.  The  functionalities  and 
performance of the Software Watchdog with regard to 
fault  handling 
strategies,  especially  concerning 
dynamic 
and 
collaboration of monitoring units are further evaluated 
on  an  evaluation  microcontroller  S12XF 
from 
Freescale. 
reconfiguration 
applications 
of 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:51:24 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007