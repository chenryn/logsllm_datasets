**作者：seaii@知道创宇404实验室  
时间：2018/08/23**  
**英文版本：**
### 0x01 前言
通常我们在利用反序列化漏洞的时候，只能将序列化后的字符串传入unserialize()，随着代码安全性越来越高，利用难度也越来越大。但在不久前的Black
Hat上，安全研究员`Sam Thomas`分享了议题`It’s a PHP unserialization vulnerability Jim, but
not as we know it`，利用phar文件会以序列化的形式存储用户自定义的meta-data这一特性，拓展了php反序列化漏洞的攻击面。该方法在
**文件系统函数** （file_exists()、is_dir()等）参数可控的情况下，配合 **phar://伪协议**
，可以不依赖unserialize()直接进行反序列化操作。这让一些看起来“人畜无害”的函数变得“暗藏杀机”，下面我们就来了解一下这种攻击手法。
### 0x02 原理分析
#### 2.1 phar文件结构
在了解攻击手法之前我们要先看一下phar的文件结构，通过查阅手册可知一个phar文件有四部分构成：
##### 1\. a **stub**
可以理解为一个标志，格式为`xxx`，前面内容不限，但必须以`__HALT_COMPILER();?>`来结尾，否则phar扩展将无法识别这个文件为phar文件。
##### 2\. a **manifest** describing the contents
phar文件本质上是一种压缩文件，其中每个被压缩文件的权限、属性等信息都放在这部分。这部分还会以 **序列化** 的形式存储用户自定义的meta-data，这是上述攻击手法最核心的地方。
##### 3\. the file **contents**
被压缩文件的内容。
##### 4\. [optional] a **signature** for verifying Phar integrity (phar file
format only)
签名，放在文件末尾，格式如下：
#### 2.2 demo测试
根据文件结构我们来自己构建一个phar文件，php内置了一个Phar类来处理相关操作。
注意：要将php.ini中的`phar.readonly`选项设置为`Off`，否则无法生成phar文件。
`phar_gen.php`
    startBuffering();
        $phar->setStub(""); //设置stub
        $o = new TestObject();
        $phar->setMetadata($o); //将自定义的meta-data存入manifest
        $phar->addFromString("test.txt", "test"); //添加要压缩的文件
        //签名自动计算
        $phar->stopBuffering();
    ?>
可以明显的看到meta-data是以序列化的形式存储的：
有序列化数据必然会有反序列化操作，php一大部分的[文件系统函数](http://php.net/manual/en/ref.filesystem.php)在通过`phar://`伪协议解析phar文件时，都会将meta-data进行反序列化，测试后受影响的函数如下：
来看一下php底层代码是如何处理的：
`php-src/ext/phar/phar.c`
通过一个小demo来证明一下：
`phar_test1.php`
其他函数当然也是可行的：
`phar_test2.php`
当文件系统函数的参数可控时，我们可以在不调用unserialize()的情况下进行反序列化操作，一些之前看起来“人畜无害”的函数也变得“暗藏杀机”，极大的拓展了攻击面。
#### 2.3 将phar伪造成其他格式的文件
在前面分析phar的文件结构时可能会注意到，php识别phar文件是通过其文件头的stub，更确切一点来说是`__HALT_COMPILER();?>`这段代码，对前面的内容或者后缀名是没有要求的。那么我们就可以通过添加任意的文件头+修改后缀名的方式将phar文件伪装成其他格式的文件。
    startBuffering();
        $phar->setStub("GIF89a".""); //设置stub，增加gif文件头
        $o = new TestObject();
        $phar->setMetadata($o); //将自定义meta-data存入manifest
        $phar->addFromString("test.txt", "test"); //添加要压缩的文件
        //签名自动计算
        $phar->stopBuffering();
    ?>
采用这种方法可以绕过很大一部分上传检测。
### 0x03 实际利用
#### 3.1 利用条件
任何漏洞或攻击手法不能实际利用，都是纸上谈兵。在利用之前，先来看一下这种攻击的利用条件。
  1. phar文件要能够上传到服务器端。
  2. 要有可用的魔术方法作为“跳板”。
  3. 文件操作函数的参数可控，且`:`、`/`、`phar`等特殊字符没有被过滤。
#### 3.2 wordpress
wordpress是网络上最广泛使用的cms，这个漏洞在2017年2月份就报告给了官方，但至今仍未修补。之前的任意文件删除漏洞也是出现在这部分代码中，同样没有修补。根据利用条件，我们先要构造phar文件。
首先寻找能够执行任意代码的类方法：
`wp-includes/Requests/Utility/FilteredIterator.php`
    class Requests_Utility_FilteredIterator extends ArrayIterator {
        /**
        * Callback to run as a filter
        *
        * @var callable
        */
        protected $callback;
        ...
        public function current() {
            $value = parent::current();
            $value = call_user_func($this->callback, $value);
            return $value;
        }
    }
这个类继承了`ArrayIterator`，每当这个类实例化的对象进入`foreach`被遍历的时候，`current()`方法就会被调用。下一步要寻找一个内部使用`foreach`的析构方法，很遗憾wordpress的核心代码中并没有合适的类，只能从插件入手。这里在
**WooCommerce** 插件中找到一个能够利用的类：
`wp-content/plugins/woocommerce/includes/log-handlers/class-wc-log-handler-file.php`
    class WC_Log_Handler_File extends WC_Log_Handler {
        protected $handles = array();
        /*......*/
        public function __destruct() {
            foreach ( $this->handles as $handle ) {
                if ( is_resource( $handle ) ) {
                    fclose( $handle ); // @codingStandardsIgnoreLine.
                }
            }
        }
        /*......*/
    }
到这里pop链就构造完成了，据此构建phar文件：
    callback = $callback;
            }
        }
        class WC_Log_Handler_File {