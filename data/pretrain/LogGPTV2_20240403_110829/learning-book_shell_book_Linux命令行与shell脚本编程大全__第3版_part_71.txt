bat
20
$ echo *bet* I gavk /b[ae]+t/ (pxint $0}′
$ echo *beat* I gawk */b[ae] +t/(pzint $0)*
be t
beat
$ echo *beet* I gawk */b[ae] +t/(pzint $0)*
$echo
beet
*beeat* 1 gawk */b[ae]+t/ (print $0) *
beeat
这次如果字符组中定义的任一字符出现了，文本就会匹配指定的模式。
20.3.3使用花括号
ERE中的花括号允许你为可重复的正则表达式指定一个上限。这通常称为间隔（interval）。
可以用两种格式来指定区间。
=：正则表达式准确出现m次。
=，n：正则表达式至少出现m次，至多n次。
这个特性可以精确调整字符或字符集在模式中具体出现的次数。
警告默认情况下，gawk程序不会识别正则表达式间隔。必须指定gawk程序的--re-interval
命令行选项才能识别正则表达式间隔。
这里有个使用简单的单值间隔的例子。
$ echo *bt* 1 gawk --re-interval •/be(1)t/(print $0)*
---
## Page 453
438
第20章正则表达式
$ echo *bet* I gawk --re1nterval */be(1)t/ (print $0)*
. 0$ 2u.xd) /a(1)ea/. [esxequTox-- xme6 1oeg, oupe $
bet
通过指定间隔为1，限定了该字符在匹配模式的字符串中出现的次数。如果该字符出现多次，
模式匹配就不成立。
很多时候，同时指定下限和上限也很方使。
$ echo *bet* I gawk -=ze1nterval */be(1, 2)t/ (pzint $0) *
(0$ utxd) /2[z*t)eq/。 tes.xeauT-ox-- xme6 1eg, ooe $
bet
beet
$ echo
*beeet* 1 gavkc =-re1nterval */be(1,2)t/ (pr1nt $0) *
在这个例子中，字符e可以出现1次或2次，这样模式就能匹配：否则，模式无法匹配。
间隔模式匹配同样适用于字符组。
$ echo *bt* I gavk --reinterval /b[ae](1,2)t/ [prlnt $0)
 {0$ uxd) /(z) [ee]a/. tesxeuTx- xme6 1 .aeq, oue $
, [0$ uxd) /(z') [ee]q/. [e△xeu8x-- xe 1 ,eg, oe $
bat
bet
$ecno
(0$ 2uxd) /(z^t][e]q/ . [exou-ox-- xme6 1 eg。
beat:
$ echo
. [0$ utxd) /(z] [e]a/ . [esxeuT-x-- xme6 1 eg
beet
acho
(0$ u.xd] /{z*1 [e]a/。 [eAxuTx-2yne6 1ee,
(0$ autxd) /{z*t) [oe]a/。 [eAxeaut-x-- xyne6 1 eoeq, oqoe
echi0
(0$ utd) /{z*1) [e]a/ , te/xux- xpe6 1 eeseq
如果字母a或e在文本模式中只出现了1-2次，则正则表达式模式匹配；否则，模式匹配失败。
20.3.4管道符号
管道符号允许你在检查数据流时，用逻辑OR方式指定正则表达式引擎要用的两个或多个模
式。如果任何一个模式匹配了数据流文本，文本就通过测试。如果没有模式匹配，则数据流文本
匹配失败。
使用管道符号的格式如下：
expzI| expr2 | . . *
这里有个例子。
$ echo *The cat 1a asleep* I gavk */cat |dog/(pxint $0)*
---
## Page 454
20.4正则表达式实战
439
The cat 1a asleep
(0s uxd) /6op|aeo/ , xne61dootre s 6op ,oo$
The dog la asleep
$ echo *The sheep 1a asleep* I gawk */cat IGog/(pzint $0)*
这个例子会在数据流中查找正则表达式cat或dog。正则表达式和管道符号之间不能有空格，
否则它们也会被认为是正则表达式模式的一部分。
管道符号两侧的正则表达式可以采用任何正则表达式模式（包括字符组）来定义文本。
(o$ autad] /6op|ae[uo]/, xne6 1 .*zeq e seq eg. ouoo s
*aeu e 8tu 9H
这个例子会匹配数据流文本中的cat、hat或dog。
20.3.5表达式分组
正则表达式模式也可以用圆括号进行分组。当你将正则表达式模式分组时，该组会被视为一
个标准字符。可以像对普通字符一样给该组使用特殊字符。举个例子：
20
 (os auTxd) /2 (∧epxn) aeg/, xyne6 1 aeg。 ouoo $
，[0$ 2uad /z(Aepxn) es/, xne6 1,tpxngtg。 ouoo $
Sat
Saturday
结尾的urday分组以及问号，使得模式能够匹配完整的Saturday或缩写Sat。
将分组和管道符号一起使用来创建可能的模式匹配组是很常见的做法。
， (0$ 2utxd)/ [1|q)e(q|o)/。 xne6 1 ,1eo, og0s $
$ echo *cab* I gavk */ (cIb)a (b|t1/ (prlnt $0) *
cac
， (0$ 2uTd)/ [2|g)e(q|o)/。 xne6 1 ,1eg, og0s $
cab
$ echo *bab* I gavk */ (c|b) a (b|t1 / (prlnt $0) *
bat
$ echo *tab* I gavk */ (c Ib)a (b|t1/ (prlnt $0)*
bab
$ echo *tac*Igavk */ (c |b)a (b|t1 / (prlnt $0) *
模式（c|b)a(b|t]会匹配第一组中字母的任意组合以及第二组中字母的任意组合。
20.4正则表达式实战
现在你已经了解了使用正则表达式模式的规则和一些简单的例子，该把理论用于实践了。随
后几节将会演示shell脚本中常见的一些正则表达式例子。
---
## Page 455
440
第20章正则表达式
20.4.1目录文件计数
让我们先看一个shell脚本，它会对PATH环境变量中定义的目录里的可执行文件进行计数。要
这么做的话，首先你得将PATH变量解析成单独的目录名。第6章介绍过如何显示PATH环境变量。
$ echo $PATH
/uax/Local/abin:/usr/Local/bin:/uar/gbin: /usr/bin:/abin: /bin:/usr/games:/usx/
Loca1/games
根据Linux系统上应用程序所处的位置，PATH环境变量会有所不同。关键是要意识到PATH中
的每个路径由冒号分隔。要获取可在脚本中使用的目录列表，就必须用空格来替换冒号。现在你
会发现sed编辑器用一条简单表达式就能完成替换工作。
,6/ /:/s, pes 1 Hards oqoe $
/usr/games/uar/Loca1/ganes
/uar/Local/sbin /usr/Local/bin /usr/sbin /usr/bin /αbin /bin
分离出目录之后，你就可以使用标准for语句中（参见第13章）来遍历每个目录。
nypath=S (echo $PATH 1 ned *α/=/ /g*1
for dlrectory in Smypath
Go
done
- -·
一旦获得了单个目录，就可以用1s命令来列出每个目录中的文件，并用另一个for语句来遍
历每个文件，为文件计数器增值。
这个脚本的最终版本如下。
$ cat countfi1es
#1/bin/bash
nypath=S (echo $PATH 1 ned *α/=/ /g*1
count nunber of filea in your PATH
for dlrectory in Smypath
count= 0
do
check=S(1a $dlxectozy)
for iten in $check
do
[ + qumoos 1$=qunoo
echo *sdlrectory - $count*
Gone
Gone
count=
. /countE1Les /usr/Local/sbin - 0
/usr/Local/bin - 2
/usr/abin - 213
/usr/b1n - 1427
/sbin - 186
/bin - 152
/ugx/games
-5
---
## Page 456
20.4正则表达式实战
441
/usx/1oca1 /games  D
现在我们开始体会到正则表达式背后的强大之处了！
20.4.2验证电话号码
前面的例子演示了在处理数据时，如何将简单的正则表达式和sed配合使用来替换数据流中
的字符。正则表达式通常用于验证数据，确保脚本中数据格式的正确性。
一个常见的数据验证应用就是检查电话号码。数据输入表单通常会要求填入电话号码，而用
户输人格式错误的电话号码是常有的事。在美国，电话号码有几种常见的形式：
123) 4567890
(123) 4567890
123 , 456.7890
1.23 4567890
这样用户在表单中输入的电话号码就有4种可能。正则表达式必须足够强大，才能处理每一
种情况。
20
在构建正则表达式时，最好从左手边开始，然后构建用来匹配可能遇到的字符的模式。在这
个例子中，电话号码中可能有也可能没有左圆括号。这可以用如下模式来匹配：
^\, (7
脱字符用来表明数据的开始。由于左圆括号是个特殊字符，因此必须将它转义成普通字符。
问号表明左圆括号可能出现，也可能不出现。
紧接着就是3位区号。在关国，区号以数字2开始（没有以数字0或1开始的区号），最大可到9。
要匹配区号，可以用如下模式。
[29] [09] (2)
这要求第一个字符是2-9的数字，后跟任意两位数字。在区号后面，收尾的右圆括号可能存
在，也可能不存在。
> ?
在区号后，存在如下可能：有一个空格。没有空格，有一条单破折线或一个点。你可以对它
们使用管道符号，并用圆括号进行分组。
(*\1 - 1 1)
第一个管道符号紧跟在左圆括号后，用来匹配没有空格的情形。你必须将点字符转义，否则
它会被解释成可匹配任意字符。
紧接看是3位电话交换机号码。这里没什么需要特别注意的。
[09] (3)
在电话交换机号码之后，你必须匹配一个空格、一条单破折线或一个点（这次不用考虑匹配
没有空格的情况，因为在电话交换机号码和其余号码间必须有至少一个空格）。
---
## Page 457
442
第20章正则表达式
(1 1 -)
最后，必须在字符串尾部匹配4位本地电话分机号。
[09](4)$
完整的模式如下。
^ (+ [291 [091 (2.)) 2(111 ) [09](3) (11 [09] (4) 
你可以在gawk程序中用这个正则表达式模式来过滤掉不符合格式的电话号码。现在你只需要
在gawk程序中创建一个使用该正则表达式的简单脚本，然后用这个脚本来过滤你的电话薄。记住，
在gawk程序中使用正则表达式间隔时，必须使用--re-interval命令行选项，否则就没法得到
正确的结果。
脚本如下。
$ cat laphone
acript to filtez out bad phone nunberg
#1/bin/bash
gawk --re-1nterva1
1*/~([29[09(2111
[09](3) (1 -1< .1[091(4)/(pznt$0) *
虽然从上面的清单中看不出来，但是shell脚本中的gawk命令是单独在一行上的。可以将电话
号码重定向到脚本来处理。
s0oudieT/- 1+21-555-。oo9 $
$ echo *0005551234* 1 -/1aphone
3175551234
312 555-1234
或者也可以将含有电话号码的整个文件重定向到脚本来过滤掉无效的号码。
$ cat phonellst
000-0000000
1.2.3 4567890
2125551234
(317) 5551234
9.86-555 (202)
33523
1234567890
234.123, 4567
$ cat phonellst 1 ./lsphone
21.2 5551234
(317) 5551234
9286-555 (202)
234.123, 4567
只有匹配该正则表达式模式的有效电话号码才会出现。
---
## Page 458
20.4正则表达式实战
443
20.4.3解析邮件地址
如今这个时代，电子邮件地址已经成为一种重要的通信方式。验证邮件地址成为脚本程序员
的一个不小的挑战，因为邮件地址的形式实在是千奇百怪。邮件地址的基本格式为：
username@hostnane
username值可用字母数字字符以及以下特殊字符：
口点号
口单破折线
加号
口下划线
在有效的邮件用户名中，这些字符可能以任意组合形式出现。邮件地址的hostname部分由
数字字符以及以下特殊字符：
口点号
口下划线
20
服务器名和域名都用点分隔，先指定服务器名，紧接着指定子域名，最后是后面不带点号的
顶级域名。
顶级域名的数量在过去十分有限，正则表达式模式编写者会尝试将它们都加到验证模式中。
然而遗憾的是，随着互联网的发展，可用的顶级域名也增多了。这种方法已经不再可行。
从左侧开始构建这个正则表达式模式。我们知道，用户名中可以有多个有效字符。这个相当
^ [[a zA2.0 9_1 ^ -+] + ) 
这个分组指定了用户名中允许的字符，加号表明必须有至少一个字符。下一个字符很明显是
，没什么意外的。
hostname模式使用同样的方法来匹配服务器名和子域名。
( [a2AZ0  9_1\ . J +)
这个模式可以匹配文本。
server
server .subdonain.subdona.in
gerver ,gubdonain
对于顶级域名，有一些特殊的规则。顶级域名只能是字母字符，必须不少于二个字符（国家
或地区代码中使用），并且长度上不得超过五个字符。下面就是顶级域名用的正则表达式模式。
  [αzAz](2, 5）$
将整个模式故在一起会生成如下模式。
* ↑[a zAz0 9_、\+] +) é([αzAz09_\ ] +)\  ([azAz] (2 , 5}) $
---
## Page 459
444
第20章正则表达式
这个模式会从数据列表中过滤掉那些格式不正确的邮件地址。现在可以创建脚本来实现这个
正则表达式了。
$ echo *richghere.nov* I./isenai1
$ echo *richehere,nov.* I. /isenai1
richehere.now
$ echo *rich@here,n* l./isemail
$ echo *richghere-nov* | ./isenai]
$ echo *rich,blun8here.nov* l./isenai]
PI:EMAIL
PI:EMAIL