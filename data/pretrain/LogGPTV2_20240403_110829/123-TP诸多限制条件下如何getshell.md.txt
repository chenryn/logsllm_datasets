诸多限制条件下如何
TP
getshell - SecPulse.COM |
安全脉搏
“ 前⾔
前⾔
先说说 2020_n1CTF 的 web 题 Easy_tp5 复现问题。
这个题在保留 thinkphp 的 RCE 点的同时，并且 RCE
中 ban 掉许多危险函数，只能允许单参数的函数执⾏。
对于现在在⽹络中流传的⽂件包含的点也增加了限制。
smile yyds!
先说⼀下这个题限制条件：
thinkphp 版本：5.0.0
php 版本：7
对于包含⽂件增加了限制
ban 掉所有的单参数危险函数
设置 open_basedir 为 web ⽬录
设置仅在 public ⽬录下可写
在 TP5.0.0 的中，⽬前公布的只是存在利⽤ Request 类
其中变量被覆盖导致 RCE 如果 ban 掉单参数可利⽤函
其中变量被覆盖导致 RCE。如果 ban 掉单参数可利⽤函
数那么只能⽤⽂件包含，但是⽂件包含做了限制不能包含
log ⽂件，所以只能从别的⽅⾯⼊⼿。
这些限制都太⼤了，所以需要想办法去上传⼀个 shell 来
完成后续绕 disable_function。
⾸先 TP5.0.0 ⽬前只存在通过覆盖 Request 中的某些变
量导致 RCE，其余细节不再赘述，我们看看⼤概代码执
⾏点在哪⾥。
call_user_func 是代码执⾏点，我们基本上所有 PHP ⾃
带的可利⽤函数基本被 ban 掉，所以我们需要从⾃写的
函数调⽤来⼊⼿，⾸先我们需要看下这个点。可回调函数
不仅仅指的是简单函数，还可以是⼀些对象的⽅法，包括
静态⽅法。
⽅法⼀ thinkphplibrarythinkBuild::module
我们可以这样通过调⽤这个类的静态⽅法 module，来实
现写⽂件的操作。
我们先看看这个该怎么⾛，我们看到这个 mkdir 是在
application 创建⽬录，但是由于权限问题肯定⽆法创
建。根据 TP 报错即退出的机制从⽽中断执⾏。那么我们
可以通过 来创建⽬录。
../public/test
我们会进⼊到 buildhello 函数中。
⾛完流程发现我们可以在 public 创建了⼀个 test 模块，
同样看到 中我们所写
test/controller/Index.php
的 保存了下来那么我们就绕过，但是执
../public/test
⾏完之后会发现⼀些语法错误导致代码不能执⾏。
由于这部分内容可控那我们就把他变得符合语法执⾏，我
们可以这么做
，这样就符
test;eval($_POST[a]);#/../../public/test;
合语法。
但是还有⼀个问题需要解决，就是我们这样的 payload
会设置⼀个不存在⽬录从⽽可以符合语法并且加⼊ eval
函数。但是现在还存在⼀个跨越不存在⽬录的问题。
linux 环境
win 环境
在 Linux 中不能创建不存在的⽬录，但是在 win 下就可
以。但是报错是 warning，并不会中断执⾏，并且在
bindhello 函数中我们会看到：
其中 mkdir 函数存在 recursive 参数为 true，允许递归
创建多级嵌套的⽬录。这样就可以使 mkdir 中使⽤不存
在的⽬录就可以进⾏绕过。但是现在有个问题：前⾯的
mkdir 中的 warning 报错被 TP 捕获到直接会退出⽆法
执⾏后⾯的内容，那么我们就需要使⽤⼀些办法进⾏抑制
报错。我们经常做题会⽤到⼀个函数 ，
error_reporting
我们可以使⽤ 抑制报错。
error_reporting(0)
我们再回到代码执⾏点，我们发现 call_user_func 函数
执⾏完的值会执⾏循环再次回到 call_user_func() 中当回
调函数的参数进⾏使⽤。因此需要考虑⼀下怎么调整才能
让我们执⾏并且抑制报错。
1. 如果我们将 放在前⾯执⾏，⽆论参数
error_reporting
是什么都会返回 0 从⽽导致后⾯执⾏代码不可控。
2. 如果我们将 放前⾯，那么
thinkBuild::module
thinkphp 报错也不能执⾏成功。
但是如果我们放⼊⼀个中间值，在第⼀次执⾏能够成功创
建⽬录，并且 还能成功执⾏，这时候就
error_reporting
需要⽤到 PHP 弱类型⽐较，PHP 中 0 == null，0 == ⾮
数字开头的字符串。
payload 如下可示：
⽅法⼆ 使⽤注释符绕过语法产⽣的错误
payload 如下：
这样就会使⽤注释符注释掉后⾯的语法错误，然后使⽤
?
包裹住，后⾯跟上⾃⼰⽤的 payload 即可。但是这样
>
会产⽣⼀个问题，⽆法在 win 环境下使⽤，win 下⽂件
夹中不能带这些字符
/ : * ? "  |
⽅法三 ⽂件包含 & php 伪协议
这种操作就是，我们通过之前的 写
thinkBuild::module
⽂件进去，写⼊的内容是我们 rot13 编码过的。然后通
过 调⽤我们写⼊⽂件的内容，因为
think__include_file
这个过滤不够完全，可以让我们包含我们所写的内容。
⽅法四 覆盖⽇志路径写⼊
因为题⽬将 error_log 函数 ban 掉了，所以这个⾮预期
解是在不 ban 掉 error_log 函数的情况下所实现的。
payload 具体如下：
1. 通过 使得我们传⼊的
json_decode {"type":"File",
转换成内置类
"path":"/var/www/html/null/public/logs"}
stdClass 的⼀个对象。
2. 再通过 将其转换成数组传⼊到
get_object_vars
中。
thinkLog::init
3. 在其中会 new 了⼀个 ，并且传⼊
thinklogdriverFile
的参数是我们
的 ，那么会触
'path'=>/var/www/html/null/public/logs
发类中的__construct，将其默认的 path 给覆盖掉。
4. 最后因为我们触发漏洞点的特殊性，肯定会报错使得
报错信息可以被计⼊到 log ⽂件⾥。
5. 之后再通过 包含。
thinkLang::load
⽅法五 :: 竟然可以调⽤⾮静态⽅法
下⾯是个简单的例⼦。
b = $a;
echo "test3".$this->b;
}
}
call_user_func("A::test1","x");
echo "";
call_user_func("A::test2","x");
echo "";
call_user_func("A::test3","x");
echo "";
//$xxx=new A();
//call_user_func(array($xxx,'test3'),"x");
我们看看会怎么执⾏。
会发现使⽤:: 调⽤了 public 类的⽅法并且能够成功执
⾏，但是会报错。并且:: 仅仅适合在⽅法中没有写
的情况 因为 指代的是这个对象 找不到
$thi $thi
的情况，因为 指代的是这个对象，找不到
$this $this
对象⾃然会报错。那么我们看⼀下下⾯的 payload 就会
⼀眼明⽩，payload 其实⽤了跟上⾯预期解抑制错误的另
⼀种⽅法，然后抑制报错让 TP 不会遇错停⽌执⾏。
这个题解的 payload 如下：
1. 因为 PHP 本身的错误处理被 thinkphp 所替代进⾏处
理，所以上⾯就是将 thinkphp 所替代错误进⾏处理的⽅
法给覆盖掉导致没有办法正常执⾏。
2. 调⽤ ⽅法，可以抛弃掉我们上⼀个执⾏的
self::path
返回值 并且返回我们所输⼊的 。为什么会返回
path
返回值，并且返回我们所输⼊的 。为什么会返回
path
path，path 为什么是我们输⼊的值，这个就是之前提到
的代码执⾏点他是覆盖了 Request 类的参数，所以⽅法
返回的是 ，这个我们可以控制。
$this->path
3. 之后调⽤ base64_decode，返回值就是我们 base64
解码的内容。
4. 解码后的返回值就会进⼊
中，然后进⼊ eval 执⾏代
thinkviewdriverPhp::Display
码。
全⽂完
本⽂由 简悦 SimpRead 优化，⽤以提升阅读体验
使⽤了 全新的简悦词法分析引擎 beta，点击查看详细说明