Bitcoin
Litecoin
Bitcoin Cash
Dogecoin
Dash
Ethereum Classic
Zcash
Abbr.
ETH
BTC
LTC
BCH
DOGE
DASH
ETC
ZEC
Total
1,385,509
1,286,772
720,047
284,514
245,255
187,869
179,998
154,142
curIn
curOut
892,971
456,703
459,042
75,774
119,532
113,272
103,177
111,041
492,538
830,069
261,005
208,740
125,723
74,597
76,821
43,101
Table 1: The eight most popular coins used on ShapeShift, in terms
of the total units traded, and the respective units traded with that
coin as curIn and curOut.
and Ethereum are the most heavily used currencies, which
is perhaps not surprising given the relative ease with which
they can be exchanged with ﬁat currencies on more traditional
exchanges, and their rank in terms of market capitalization.
4.3 Blockchain data
For the cryptocurrencies we were interested in exploring fur-
ther, it was also necessary to download and parse the respec-
tive blockchains, in order to identify the on-chain transac-
tional behavior of ShapeShift and Changelly. It was not feasi-
ble to do this for all 65 currencies used on ShapeShift (not to
mention that given the low volume of transactions for many
of them, it would likely not yield additional insights anyway),
so we chose to focus instead on just the top 8, as seen in
Table 1. Together, these account for 95.7% of all ShapeShift
transactions if only one of curIn and/or curOut is one of the
eight, and 60.5% if both are.
For each of these currencies, we ran a full node in order
to download the entire blockchain. For the ones supported
by the BlockSci tool [5] (Bitcoin, Dash and Zcash), we used
it to parse and analyze their blockchains. BlockSci does not,
however, support the remaining ﬁve currencies. For these we
thus parsed the blockchains using Python scripts, stored the
data as Apache Spark parquet ﬁles, and analyzed them using
custom scripts. In total, we ended up working with 654 GB of
raw blockchain data and 434 GB of parsed blockchain data.
5
Identifying Blockchain Transactions
In order to gain deeper insights about the way these trading
platforms are used, it is necessary to identify not just their
internal transactions but also the transactions that appear on
the blockchains of the traded currencies. This section presents
heuristics for identifying these on-chain transactions, and the
next section explores the additional insights these transactions
can offer.
Recall from Section 3.2 that an interaction with ShapeShift
results in the deposit of coins from the user to the service on
the curIn blockchain (which we refer to as “Phase 1”), and
Figure 1: The total number of transactions per day reported via
ShapeShift’s API, and the numbers broken down by cryptocurrency
(where a transaction is attributed to a coin if it is used as either curIn
or curOut). The dotted red line indicates the BTC-USD exchange
rate, and the horizontal dotted black line indicates when KYC was
introduced into ShapeShift.
either complete, to mean the transaction was successful;
error, to mean an issue occurred with the transaction
or the queried address was not a ShapeShift address; or
no_deposits, to mean a user initiated a transaction but did
not send any coins. The error ﬁeld appears when an error is
returned and gives a reason for the error. The address ﬁeld is
the same address addrs used by ShapeShift, and withdraw
is the address addru (i.e., the user’s recipient address in the
curOut blockchain). inType and outType are the respective
curIn and curOut currencies and inCoin is the amt received.
outCoin is the amount sent in the curOut blockchain. Finally,
tx is the transaction hash in the curOut blockchain and
txURL is a link to this transaction in an online explorer.
Using a simple Web scraper, we downloaded the transac-
tions and rates every ﬁve seconds for close to thirteen months:
from November 27 2017 until December 23 2018. This re-
sulted in a set of 2,843,238 distinct transactions. Interestingly,
we noticed that several earlier test transactions we did with the
platform did not show up in their list of recent transactions,
which suggests that their published transactions may in fact
underestimate their overall activity.
4.2.1 ShapeShift currencies
In terms of the different cryptocurrencies used in ShapeShift
transactions, their popularity was distributed as seen in Fig-
ure 1. As this ﬁgure depicts, the overall activity of ShapeShift
is (perhaps unsurprisingly) correlated with the price of Bitcoin
in the same time period. At the same time, there is a decline
in the number of transactions after KYC was introduced that
is not clearly correlated with the price of Bitcoin (which is
largely steady and declines only several months later).
ShapeShift supports dozens of cryptocurrencies, and in our
data we observed the use of 65 different ones. The most com-
monly used coins are shown in Table 1. It is clear that Bitcoin
840    28th USENIX Security Symposium
USENIX Association
the withdrawal of coins from the service to the user on the
curOut blockchain (“Phase 2”). To start with Phase 1, we thus
seek to identify the deposit transaction on the input (curIn)
blockchain. Similarly to Portnoff et al. [15], we consider two
main requirements for identifying the correct on-chain trans-
action: (1) that it occurred reasonably close in time to the
point at which it was advertised via the API, and (2) that the
value it carried was identical to the advertised amount.
For this ﬁrst requirement, we look for candidate transac-
tions as follows. Given a ShapeShift transaction with times-
tamp t, we ﬁrst ﬁnd the block b (at some height h) on the
curIn blockchain that was mined at the time closest to t. We
then look at the transactions in all blocks with height in the
range [h−δb,h +δa], where δb and δa are parameters speciﬁc
to curIn. We looked at both earlier and later blocks based
on the observation in our own interactions that the times-
tamp published by ShapeShift would sometimes be earlier
and sometimes be later than the on-chain transaction.
For each of our eight currencies, we ran this heuristic for
every ShapeShift transaction using curIn as the currency in
question, with every possible combination of δb and δa rang-
ing from 0 to 30. This resulted in a set of candidate transac-
tions with zero hits (meaning no matching transactions were
found), a single hit, or multiple hits. To rule out false posi-
tives, we initially considered as successful only ShapeShift
transactions with a single candidate on-chain transaction, al-
though we describe below an augmented heuristic that is able
to tolerate multiple hits. We then used the values of δb and
δa that maximized the number of single-hit transactions for
each currency. As seen in Table 2, the optimal choice of these
parameters varies signiﬁcantly across currencies, according to
their different block rates; typically we needed to look further
before or after for currencies in which blocks were produced
more frequently.
In order to validate the results of our heuristic for Phase 1,
we use the additional capability of the ShapeShift API de-
scribed in Section 4.2. In particular, we queried the API on the
recipient address of every transaction identiﬁed by our heuris-
tic for Phase 1. If the response of the API was afﬁrmative,
we ﬂagged the recipient address as belonging to ShapeShift
and we identiﬁed the transaction in which it received coins as
the curIn transaction. This also provided a way to identify the
corresponding Phase 2 transaction on the curOut blockchain,
as it is just the tx ﬁeld returned by the API. As we proceed
only in the case that the API returns a valid result, we gain
ground-truth data in both Phase 1 and Phase 2. In other words,
this method serves to not only validate our results in Phase 1
but also provides a way to identify Phase 2 transactions.
The heuristic described above is able to handle only single
hits; i.e., the case in which there is only a single candidate
transaction. Luckily, it is easy to augment this heuristic by
again using the API. For example, assume we examine a
BTC-ETH ShapeShift transaction and we ﬁnd three candi-
date transactions in the Bitcoin blockchain after applying the
Currency
BTC
BCH
DASH
DOGE
ETH
ETC
LTC
ZEC
δa
1
4
5
4
0
0
2
3
Parameters Basic % Augmented %
δb
0
9
5
1
5
5
1
1
65.76
76.96
84.77
76.94
72.15
76.61
71.61
86.94
76.86
80.23
88.65
81.69
81.63
78.67
76.97
90.54
Table 2: For the selected (optimal) parameters and for a given cur-
rency used as curIn, the percentage of ShapeShift transactions for
which we found matching on-chain transactions for both the basic
(time- and value-based) and the augmented (API-based) Phase 1
heuristic. The augmented heuristic uses the API and thus also repre-
sents our success in identifying Phase 2 transactions.
basic heuristic described above. To identify which of these
transactions is the right one, we simply query the API on all
three recipient addresses and check that the status ﬁeld is
afﬁrmative (meaning ShapeShift recognizes this address) and
that the outType ﬁeld is ETH. In the vast majority of cases
this uniquely identiﬁes the correct transaction out of the can-
didate set, meaning we can use the API to both validate our
results (i.e., we use it to eliminate potential false positives, as
described above) and to augment the heuristic by being able
to tolerate multiple candidate transactions. The augmented
results for Phase 1 can be found in the last column of Ta-
ble 2 and clearly demonstrate the beneﬁt of this extra usage
of the API. In the most dramatic example, we were able to
go from identifying the on-chain transactions for ShapeShift
transactions involving Bitcoin 65.75% of the time with the
basic heuristic to identifying them 76.86% of the time with
the augmented heuristic.
5.1 Accuracy of our heuristics
False negatives can occur for both of our heuristics when there
are either too many or too few matching transactions in the
searched block interval. These are more common for the basic
heuristic, as described above and seen in Table 2, because it
is conservative in identifying an on-chain transaction only
when there is one candidate. This rate could be improved by
increasing the searched block radius, at the expense of adding
more computation and potentially increasing the false positive
rate.
False positives can occur for both of our heuristics if some-
one sends the same amount as the ShapeShift transaction at
roughly the same time, but this transaction falls within our
searched interval whereas the ShapeShift one doesn’t. In the-
ory, this should not be an issue for our augmented heuristic,
since the API will make it clear that the candidate transaction
USENIX Association
28th USENIX Security Symposium    841
is not in fact associated with ShapeShift. In a small number
of cases (fewer than 1% of all ShapeShift transactions), how-
ever, the API returned details of a transaction with different
characteristics than the one we were attempting to identify;
e.g., it had a different pair of currencies or a different value
being sent. This happened because ShapeShift allows users to
re-use an existing deposit address, and the API returns only
the latest transaction using a given address.
If we blindly took the results of the API, then this would
lead to false positives in our augmented heuristic for both
Phase 1 and Phase 2. We thus ensured that the transaction
returned by the API had three things in common with the
ShapeShift transaction: (1) the pair of currencies, (2) the
amount being sent, and (3) the timing, within the interval
speciﬁed in Table 2. If there was any mismatch, we discarded
the transaction. For example, given a ShapeShift transaction
indicating an ETH-BTC shift carrying 1 ETH and occurring at
time t, we looked for all addresses that received 1 ETH at time
t or up to 5 blocks earlier. We then queried the API on these
addresses and kept only those transactions which reported
shifting 1 ETH to BTC. While our augmented heuristic still
might produce false positives in the case that a user quickly
makes two different transactions using the same currency pair,
value, and deposit address, we view this as unlikely, especially
given the relatively long wait times we observed ourselves
when using the service (as mentioned in Section 4.2).
5.2 Alternative Phase 2 identiﬁcation
Given that our heuristic for Phase 2 involved just querying the
API for the corresponding Phase 1 transaction, it is natural
to wonder what would be possible without this feature of
the API, or indeed if there are any alternative strategies for
identifying Phase 2 transactions. Indeed, it is possible to use a
similar heuristic for identifying Phase 1 transactions, by ﬁrst
looking for transactions in blocks that were mined close to
the advertised transaction time, and then looking for ones in