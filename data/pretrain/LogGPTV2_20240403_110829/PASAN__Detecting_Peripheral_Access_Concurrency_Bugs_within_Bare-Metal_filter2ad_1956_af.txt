260    30th USENIX Security Symposium
USENIX Association
SelectSlaveDataRWSelectCMDPacketWriteWaitSPISD Card ControllerInitBus-LevelPeripheral-LevelBus LockPeripheralLockWriteStartReadStartEraseStartCMDDonePacketReadFigure 9: Simpliﬁed code with enforced and ideal lock spans
for multiple devices.
Figure 11: Simpliﬁed MS5611 device handler.
Figure 12: Simpliﬁed ICM20789 device handler.
Figure 10: Iterative state machine transitions and operations
for both sensors.
5.6 Case Study II: Sensor Value Corruption
An RAV is controlled by a remote control interface such as
MAVLink [5]. This interface is known to be insecure [59, 71]
because it does not employ fundamental network security fea-
tures of encryption and authentication due to its computational
constraints and limited hardware resources. Surprisingly, we
found that this remote interface also allows direct access to
I2C. As a result, anyone can potentially send instructions to
any peripheral attached to I2C via MAVLink [18]. In fact, an
RAV platform employs multiple sensors to accurately mea-
sure the physical state which is critical for its safe operation.
Speciﬁcally, for controlling movements along vertical axis,
an RAV employing ArduPilot [11] measures various physical
states including the altitude (measured by barometers such as
MS5611) and the three dimensional angles and accelerations
(measured by an inertia sensor such as MPU6000). Hence, the
corrupted altitude or angle values can cause sudden vertical
movements or loss of the angular control of the vehicle, which
may eventually lead to a crash. Here, we focus on the altitude
corruption case.
Figure 9 shows a pseudo code corresponding to the device
driver of a peripheral. This code has two-layered nested loops
denoted as inner and outer loops. Those loops (outer + inner)
are iteratively executed with the following three states as
described in Figure 10.
• S1 (read): In this state, read the sensor value whose mea-
surement was scheduled in the previous iteration (e.g., a
sensor value from MS5611 is read at Iteration 905. This
value was scheduled to be measured at Iteration 904).
• S2 (measure): In this state, schedule a command to measure
sensor value(s) for the next iteration (e.g., a sensor value
from MS5611 scheduled to be measured at Iteration 905 will
be read at Iteration 906).
• S3 (wait): In this state, sleep to wait for job completion
before the next iteration.
While the operations corresponding to the read and
measure states are performed in the inner loop, those cor-
responding to the wait state are performed in the outer loop.
For example, in ArduPilot [11], we found two barometers,
MS5611 and ICM20789, attached to I2C. These barometers
are widely used to calculate the altitude using the pressure
and temperature measurements. The code for MS5611 and
ICM20789 are presented in Figure 11 and Figure 12 respec-
tively. Speciﬁcally and interestingly, ICM20789 reads both
pressure and temperature values at each iteration and sched-
ules their measurements for the next iteration. In contrast,
MS5611 reads one of the pressure and temperature measure-
ments in one iteration, and the other one in the next iteration.
In this case, PASAN found that while Bus Lock is enforced,
Peripheral Lock is only partially enforced. Speciﬁcally, as
shown in Figure 9, since the existing lock does not cover the
code corresponding to the wait state, a different transaction
can execute in a different thread during the wait state of the
ongoing transaction. As such, both barometers might map the
temperature measurement to the pressure variable and vice
versa, or have sensor values corrupted due to the concurrent
access to these sensors from the remote control interface, e.g.,
MAVLink. As a ﬁx, each driver should employ its own lock to
protect the transaction with its sensor, and the remote control
interface needs to respect these peripheral locks too.
Real-world Attack Scenario. As we mentioned earlier, the
remote communication interface (i.e., MAVLink in this case)
is insecure, but allows interfaced users to directly access I2C
or SPI. As such, if an attacker abuses the insecure remote
USENIX Association
30th USENIX Security Symposium    261
while (true) {DeviceBus:: callback_info*cb;...for(cb= callbacks; cb; cb= cb->next) {binfo->semaphore.take() {   // Lockcb->cb() ; // S1-2: To handle devicesbinfo->semaphore.give() ;   // Unlock}...// Code snippet to determine the sleep timedelay(t); // S3: To wait for job completion}Inner LoopOuter LoopIteration NumberMS5611ICM20789…905S1.Read T904S2.Measure P905S3.Wait                         S1.Read T904&P904S2.Measure T905&P905S3.Wait906S1.Read P905S2.Measure T906S3.Wait                        S1.Read T905&P905S2.Measure T906&P906S3.Wait   T : Temperature                       P : Pressure: Inner Loop                       : Outer Loopvoid MS5611::run() {...state++;if(state % 2) { // for odd iteration number (e.g., 905, 907..)temp =read_temp();    // S1measure_press();        // S2}else {  // even iteration number (e.g., 906, 908..)press =read_press();  // S1measure_temp();         // S2}altitude = conversion(temp, press);...}Inner LoopInner Loopvoid ICM20789::run() {...temp = read_temp();    // S1press = read_press();   // S2measure();…altitude = conversion(temp, press);...}interface and exploits this concurrency bug, it can corrupt the
measured sensor values. We experimented with two differ-
ent sensors measuring different states and attached them to
I2C: MS5611 and MPU6000 attached to Pixhawk 1 [23] that
is part of the 3DR IRIS+ RAV [3]. In the case of MS5611 (a
barometer), we launched a denial-of-service-like attack via
MAVLink by alternately issuing temperature and pressure
reading commands while the device was in the middle of exe-
cuting one of measurement transactions. When a concurrency
bug is triggered, MS5611 fails to complete the ongoing mea-
suring transaction; consequently, MS5611 reports an abnormal
altitude value. For example, if the current altitude is ﬁve me-
ters, it generates a corrupted value (ranging from -3,200 to
3,200 meters) and records it in the ﬂight log. In our exper-
iments, the absolute values of the corrupted measurements
were always larger than 200 meters. Hence, this attack led to
corrupted altitude measurements and caused mission failures
by triggering “safe landing” at an unexpected location.
We also carried out a similar attack targeting MPU6000
(which is used as an accelerometer and gyroscope). The
concurrency bug exploitation causes MPU6000 to generate
corrupted acceleration and gyro values. In our experiments,
MPU6000 produced the three-axe acceleration values in the
range between -120 and -160 m/s/s, where the normal values
should have been between -10.0 and 10.0 m/s/s. Due to ab-
normally large acceleration values, this exploitation caused
the RAV to trigger safe landing or even crash due to severe
control instability.
We believe that the demonstrated concurrency bug exploita-
tion is a meaningful attack vector because of its stealthiness
into ArduPilot (and other autonomous vehicle control soft-
ware) and RTOSes. ArduPilot is one of the most popular RAV
control programs [56, 57]. As such, its source code is widely
adopted by various RAV vendors, such as Intel Aero [4], Par-
rot [6] and 3DR [3]. To support debugging and crash investi-
gation, ArduPilot also provides plentiful logging information
including those corresponding to sensor and control states,
and mission tasks. However, ArduPilot does not provide any
meaningful network system logging that requires the sup-
port of full-ﬂedged operating systems (e.g., Linux). Instead,
ArduPilot uses a lightweight RTOS (i.e., ChibiOS) without
such features. Furthermore, ArduPilot’s logging system does
not record any information on MMIO accesses including
I2C and SPI. Besides, due to their nondeterminism, concur-
rency bugs are tricky to debug even in the environments with
powerful debugging tools [55]. Overall, due to the absence
of MMIO access and network traces, and difﬁculty in con-
currency bug debugging, concurrency bug exploitation is a
meaningful attack vector. It will remain an attractive attack
vector (from attackers’ perspective) – even more so after the
improvement of the MAVLink protocol security in the (near)
future.
Why peripheral access concurrency bugs are complex?
While PASAN detects the missing Peripheral Lock, cautious
readers might have found out that while a peripheral lock
within ICM20789 driver protects its transaction to the sensor,
a similar peripheral lock within MS5611 driver still fails to
protect its transaction. Due to the unique code structure within
the MS5611 driver, its de facto transaction with its sensor spans
into two iterations within the outer loop, e.g., calling the driver
twice, which is the only way to get both temperature and
pressure measurements to fulﬁll the computation of altitude.
Currently, PASAN extracts transaction spans covered by a
single lock span. If one transaction involves two outer itera-
tions of the loop as in MS5611’s transaction (i.e., subset trans-
action span case introduced in Section 5.2), PASAN partially
covers one outer iteration and could not extend to multiple
iterations because the driver itself does not implement the
whole transaction but relies on callees to accomplish it.
6 Discussion
Limitations Inherited from Existing Static Analysis Em-
ployed.
PASAN requires call graphs to generate possible
thread call stacks (e.g., “Thread 1 and 2 Call Stack” in Fig-
ure 6). It also needs to identify aliases of function pointers for
indirect calls, lock objects, and accessed MMIO addresses.
As such, PASAN utilizes points-to analysis [76] for identify-
ing call graphs (including indirect function calls) and alias
variables. The current tools that PASAN relies on have two
well-known limitations in tracking aliases, which can cause
inaccuracy in our concurrency bug detection.
One of the common limitations of points-to analysis is to
over-approximately resolve possible pointers [37] by encom-
passing infeasible function calls or aliases. This may result
in false positives in identifying aliases. Speciﬁcally, points-
to analysis may mistakenly identify different MMIO access
variables as identical aliases (causing false positives in con-
currency bug detection), different lock object variables as
identical aliases (causing false negatives), and infeasible indi-
rect call targets (causing false positives). We did not observe
such inaccurate results in our experiments.
The other common limitation of points-to analysis is fail-
ure in tracking aliases to mitigate state explosion of points-to
analysis [52, 64]. Speciﬁcally, points-to analysis can fail to
identify the aliases of MMIO access variables (causing false
negatives in concurrency bug detection) and aliases of lock ob-
ject variables (causing false positives). Furthermore, missing
indirect call targets (e.g., device drivers) can cause PASAN
to miss transaction spans (causing false negatives).
Moreover, lockset analysis cannot take into consideration
the timeout locks that are automatically unlocked after a given
time at run time to prevent deadlocks. However, it is challeng-
ing for static analyses to estimate the lock spans affected
by the timing behavior of the timeout locks. Hence, PASAN
conservatively considers the timeout locks as typical locks.
This might cause false negatives in concurrency bug detection
262    30th USENIX Security Symposium
USENIX Association
although we did not observe any in our experiments.
To alleviate the above limitations, we could employ either
(1) more advanced static analysis works [63,86] that could re-
duce false positives in alias identiﬁcation or improve points-to
analysis algorithm to reduce false negatives in alias identiﬁ-
cation as DR. CHECKER [64] pointed out, or (2) dynamic
analysis with peripheral modeling as proposed in the prior
work [41, 51]. Especially, dynamic analysis can overcome
limitations in handling special lock operations (e.g., timeout
locking) with emulated boards [41,51]. However, dynamic ap-
proaches may not be directly applicable because they cannot
model various peripheral devices. Furthermore, they suffer
from a limited analysis coverage as they can only analyze
executed code. Further improvement in this direction will be
our future work.
Using Incorrectly Inferred Transaction Spans. Achiev-
ing perfect accuracy on the inference of transaction spans is
not the main goal for our project. However, we point out that
even the incorrectly inferred transaction spans can be useful.
There are three categories of such transaction spans: subset,
superset, and mixed, as explained in Section 5.2. Thanks to
these transaction spans, PASAN did not miss the concurrency
bugs in the MS5611 case (Section 5.6). On the ﬂip side, we
did have several false positive cases caused by inaccurate
transaction extraction.
Validity of Protection for All Peripheral Devices. We
cannot ascertain whether a peripheral device is tolerant to
buggy concurrent accesses without manual veriﬁcation due
to its black-box nature. However, we observe that device
drivers often perform read-only accesses to the concurrency-
tolerant peripherals. Based on this observation, we employ
“write-access-inclusion” heuristic in PASAN to exclude those
read-only accesses, which helps remove (false-positive) trans-
actions of those concurrency-tolerant peripherals. As a result,
we observed only one false-positive case with LSM9DS0 (de-
tailes in Section 5.3) due to the concurrency bug-tolerant
peripheral.
Validity of “Write-Access-Inclusion” Heuristic. PASAN
analyzes all transactions involving at least one write access
to an MMIO address, which is the most common case based
on our experience. We found that including read-only transac-
tions would cause many false positives because the status of
some peripherals (e.g., timer and USART) are concurrency-
tolerant and hence not vulnerable to unprotected concurrent
reads as they maintain their own internal states. Instead, this
heuristic can introduce false negatives by missing read-only
transactions that are not tolerant to concurrency bugs.
Limitation in Handling Individual Interrupts.
PASAN
does not support individual interrupt requests (IRQ) as it
would require non-trivial manual efforts to map into IRQs
and their corresponding bit masks which enable/disable in-
dividual interrupts. Also, one mask can be related to multi-
ple IRQs [51]. Furthermore, some interrupts are enabled/dis-
abled dynamically. These challenges can only be addressed
through a dynamic analysis tool with access to the target
device. PASAN, as a static analysis tool, cannot support in-
dividual IRQs, and may lead to false-positives. Fortunately,
we have manually conﬁrmed that, in our evaluation, no false
positive was caused by individual IRQs.
Binary Firmware Support. While we evaluate PASAN
on the source code of ﬁrmware in this paper, the fundamen-
tal mechanism may become applicable to binary ﬁrmware,
after addressing the following technical challenges. We iden-
tify two speciﬁc challenges in obtaining necessary inputs
from binary ﬁrmware: (1) A binary ﬁrmware needs to be
lifted into compatible LLVM bitcode. Although there are mul-
tiple approaches to doing this [27, 48, 80, 81], their lifting
results are either incompatible or immature for embedded
systems. For example, the results for ARM 32bit architecture
(which is dominant on embedded systems) are not mature
enough8. (2) PASAN must identify key functions, such as
locks, multi-threads and multi-process management functions.
If a ﬁrmware is stripped, this information needs to be supple-
mented by other sources such as pattern-based function iden-
tiﬁcation [34], and binary-based code similarity search [49]
to identify these key functions.
Automatic Lock Enhancement. Since PASAN detects in-
valid concurrency lock behavior, it is a promising idea to use
this information to correct or enhance locks automatically.
Such an automated approach demands very high accuracy on
the extracted lock spans. Otherwise, it may introduce unstable
behavior. We reserve this direction as our future work after
we achieve higher accuracy in lock span extraction.
7 Related Work
Concurrency Bug Detection. The concurrency detection
techniques in the prior art can be broadly classiﬁed based on
their analysis methodologies which include static [13, 15, 19–
21, 24, 32, 33, 40, 50, 69, 79], dynamic [67, 83, 84], and hybrid
(static and dynamic) analysis [54, 55, 62, 67, 73]. There are
also some algorithmic [60, 66] and manual detection tech-
niques [32, 36, 42, 65].
Prior static analysis-based schemes are limited to analyzing
single memory objects without considering transactions for
MMIO accesses. Hence, unlike PASAN, they cannot discover
transaction- and address-range-aware concurrency bugs. The
dynamic analysis-based approaches are applicable to binary-
only programs, they require the aid of specialized hardware,
and they handle only limited types of concurrency bugs. Re-
searchers have also proposed hybrid analysis approaches to
perform dynamic analysis on top of the static analysis results.
8Out of the four cited tools, only RetDec [27] and mctoll [81] support
ARM 32bit architecture. In our experience, RetDec generates severely incor-
rect control ﬂow results and mctoll generates empty bitcode.
USENIX Association
30th USENIX Security Symposium    263
However, these hybrid analysis approaches require direct ac-
cess to the target peripheral devices. We note that it is not
practical to ﬁnd concurrency bugs individually in each em-
bedded platform. Development of theoretical algorithms and
manual techniques require non-trivial efforts and instrumen-
tation in identifying transactions of peripherals. In summary,
unlike PASAN which discovers concurrency issues for periph-
erals, the scope of the approaches in the prior art is limited to
memory object-level concurrency bugs.
Device Driver Vulnerability Detection. Vulnerabilities
hidden in the device driver have been discovered statically [58,
64, 70] as well as dynamically [7, 44, 72, 75, 77, 85]. Tradi-
tionally, static analysis relied on symbolic execution [58, 70]
to ﬁnd bugs and vulnerabilities. In a more recent work,
DR.CHECKER [64] leveraged compiler-level program analy-
sis (e.g., points-to analysis and data ﬂow analysis) to ﬁnd bugs.
Moreover, Charm [77] carried out dynamic analysis of de-
vice drivers in mobile systems. PeriScope [75] wisely hooked
into the page fault handler in the kernel to detect vulnera-
bilities while fuzzing the Wi-Fi drivers. While vUSBf [72]
fuzzed the USB device drivers, Syzkaller [7] integrated multi-
ple kernel fuzzing systems (such as DIFUZE [44]) to fuzz the
kernel functionality including kernel drivers. However, none
of these vulnerability detection approaches can discover bus-
and peripheral-level concurrency issues.
Embedded Firmware Analysis Framework.
Both,
static [43,45,46,74] and dynamic [35,38,39,41,51,53,82,87],
approaches have been employed for analyzing embedded
platforms. Following the static analysis approach, Costin et
al. [45], Firmalice [74], and PIE [43] found several network
security vulnerabilities and imperfect API implementations.
FIE [46] was speciﬁcally designed to ﬁnd memory corruption
bugs. To discover bugs such as memory corruption or program
crash, IOTFuzzer [39] was designed to fuzz the bare metal
Internet of Things (IoT) devices. To enable instrumentation
and monitoring, schemes in the existing literature rely on de-
vice emulators [35] or speciﬁc hardware interfaces. Moreover,
researchers have also analyzed a limited number of platforms
(e.g., Linux-based platforms) on the emulated environments