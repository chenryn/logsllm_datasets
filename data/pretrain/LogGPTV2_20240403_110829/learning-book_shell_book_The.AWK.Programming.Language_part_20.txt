P
d
T
1eft
last
right
Now we apply the same process to the left and the right subarrays.
8163524 7
At the first step we might select 4 as the partition element. The partition step
would then rearrange the array around this element like this:
2 1 31415 6 8 7
We would then sort each of the subarrays 213 and 5687 recursively. The
recursion ceases when a subarray has less than two elements.
The function qsort that implements quicksort is shown below. This pro-
gram can be tested using the same testing routines that we gave for insertion
sort.
quicksort
{A[NR]= $0 }
END ( q8ort(A, 1,NR)
for (1 =1;1=1;1--)#phase 1
for （i = n;i>1；;i--）{
(heapify（A,i，n)}
phase 2
{swap（A,1,1）}
{heapify（A,1,i-1)}
}
function heapify（A,left,right,p,c)(
for （p=1eft;（c=2p）A[c])
if （A[p]\"prof.cnts\"0）cnt[++i]=$1}
/(/
{printf（"x5d"，cnt[++j]）}
(printf（"\t%s\n°，s0）}
As an example, consider profiling the heapsort program from the end of
Section 7.1. To create the profiling version of this program, type the command
line
awk -f makeprof heapsort >heapsort.p
The resulting program heapsort .p looks like this:
heapsort
{_LBcnt[1]++;A[NR]=$0 }
END(
_LBcnt[2]++;hsort（A,NR)
For（1=1;1= 1;i--）phase 1
for（i=n;i>1;i--）（_LBcnt[6]++;
（_LBcnt[5]++;heapify（A,i，n）}
_LBcnt[7]++;
swap（A,1,1）)
phase 2
(LBcnt[8]++;
heapify（A,1,i-1)}
function heapify(A,left,right,
for（p=left;（c=2p）A[c])
（_LBcnt[11]++;c++}
if （A[p]“prof.cnts”
}
As you can see, thirteen counting statements have been inserted into the original
program, along with a second END section that writes the counts into
---
## Page 179
SECTION 7.2
PROFILING
169
prof.cnts. Multiple END actions are treated as if they were just combined
into one in the order in which they appear.
Now, suppose we run heapsort.p on 100 random integers. We can create
a listing of the original program with the statement counts resulting from this
run by typing the command line
awk -f printprof heapsort
The result is:
heapsort
100
{A[NR]=$0}
END ( hsort(A, NR)
for （1= 1;1=1;i--)phase 1
50
99
for（i=n;i>1;i--)（#phase 2
(heapify（A,i，n)
66
{swap（A,1,i）}
99
(heapify（A,1,i-1)}
149
function heapify（A,left,right,p,c)(
521
for（p=left;（c=2+p）A[c])
232
if （A[p]<A[c])
（c++}
485
（swap（A，c，p）}
1
584
function swap(A,i,3,
1
t=A[1]:A[1]=A[5]:A[5]=t
t）(
Simplicity, the greatest strength of this implementation, is also its greatest
weakness. The program makeprof blindly inserts a counting statement after
the first left brace it sces on each line; a more careful makeprof would not put
counting statements inside string constants, regular expressions, or comments.
feasible with this approach.
It would also be nice to report execution times as well as counts, but that's not
Exercise 7-7. Modify the profiler so that counting statements will not be inserted into
file the profiler?
-od o non sd uosn sno  suo o sossda sen suesu Sus
Exercise 7-8. The profiler doesn’t work if there is an exit statement in the END action.
Why? Fix it.口
---
## Page 180
170EXPERIMENTS WITH ALGORITHMS
CHAPTER 7
7.3TopologicalSorting
In a construction project, some jobs must be done before others can begin.
We would like to list them so that each job precedes those that must be done
after it. In a program library, a program a may call program h. Program h in
turn may call programs d and e, and so on. We would like to order the pro-
grams so that a program appears before all the programs it calls. (The Unix
program lorder does this.) These problems and others like them are instances
jo s e sss te uapo ue supuy :uos joodon jo d su jo
constraints of the form “x must come before y. In a topological sort any
lincar ordering that satisfies the partial order represented by the constraints is
sufficient.
The constraints can be represented by a graph in which the nodes are labeled
by the names, and there is an edge from node x to node y if x must come before
y. The following graph is an example:
b
C
d
e
h）
?
If a graph contains an edge from x to y, then x is called a predecessor of y.
and y is a successor of x.Suppose the constraints come in the form of
predecessor-successor pairs where each input line contains x and y representing
an edge from node x to node y, as in this description of the graph above:
b
h
C
C
h
d
1
e
b
d
f
h
f
P
9
h
e
i
b
If there is an edge from x to y, then x must appear before y in the output.
Given the input above, one possible output is the list
acfhedibg
There are many other linear orders that contain the partial order depicted in the
graph; another is
cahedifbg
The problem of topological sorting is that of ordering the nodes of a graph so
---
## Page 181