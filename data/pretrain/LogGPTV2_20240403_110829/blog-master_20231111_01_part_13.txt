- [《PostgreSQL varlena field upto 1GB and large object upto 4TB(8KB block_size)(>=9.3) 2GB(./test.txt  
```  
1、将数据库服务器上的文件导入数据库大对象      
```  
postgres=# SELECT lo_import('/var/lib/postgresql/test.txt');  
 lo_import   
-----------  
     41017  
(1 row)  
create table t (id int, info text, lo oid);  
insert into t values (1,'test.txt', 41017);  
```  
2、将数据库服务器上的文件导入数据库bytea      
```  
postgres=# select pg_read_binary_file('/var/lib/postgresql/test.txt');  
           pg_read_binary_file              
------------------------------------------  
 \x68656c6c6f2c206920616d206469676f616c0a  
(1 row)  
create table t1 (id int, info text, b bytea);  
insert into t1 values (1, 'test.txt', pg_read_binary_file('/var/lib/postgresql/test.txt'));  
```  
3、将客户端的文件导入数据库大对象      
```  
psql  
\?  
  以下采用客户端接口封装, 不需要超级用户. 但数据库服务端的接口需要超级用户权限.  就像copy和psql \copy一样.  
Large Objects  
  \lo_export LOBOID FILE  
  \lo_import FILE [COMMENT]  
  \lo_list  
  \lo_unlink LOBOID      large object operations  
postgres=# \lo_import /var/lib/postgresql/test.txt   
lo_import 41028  
postgres=# \lo_list  
         Large objects  
  ID   |  Owner   | Description   
-------+----------+-------------  
 41028 | postgres |   
(1 row)  
```  
4、将客户端的文件导入数据库bytea      
```  
postgres=# \df lo_*  
                                List of functions  
   Schema   |     Name      | Result data type |    Argument data types    | Type   
------------+---------------+------------------+---------------------------+------  
 pg_catalog | lo_close      | integer          | integer                   | func  
 pg_catalog | lo_creat      | oid              | integer                   | func  
 pg_catalog | lo_create     | oid              | oid                       | func  
 pg_catalog | lo_export     | integer          | oid, text                 | func  
 pg_catalog | lo_from_bytea | oid              | oid, bytea                | func  
 pg_catalog | lo_get        | bytea            | oid                       | func  
 pg_catalog | lo_get        | bytea            | oid, bigint, integer      | func  
 pg_catalog | lo_import     | oid              | text                      | func  
 pg_catalog | lo_import     | oid              | text, oid                 | func  
 pg_catalog | lo_lseek      | integer          | integer, integer, integer | func  
 pg_catalog | lo_lseek64    | bigint           | integer, bigint, integer  | func  
 pg_catalog | lo_open       | integer          | oid, integer              | func  
 pg_catalog | lo_put        | void             | oid, bigint, bytea        | func  
 pg_catalog | lo_tell       | integer          | integer                   | func  
 pg_catalog | lo_tell64     | bigint           | integer                   | func  
 pg_catalog | lo_truncate   | integer          | integer, integer          | func  
 pg_catalog | lo_truncate64 | integer          | integer, bigint           | func  
 pg_catalog | lo_unlink     | integer          | oid                       | func  
(18 rows)  
-- 先入大对象, 再转换为bytea  
postgres=# select lo_get(41028);  
                  lo_get                    
------------------------------------------  
 \x68656c6c6f2c206920616d206469676f616c0a  
(1 row)  
```  
5、将数据库大对象导出到数据库服务器上      
```  
postgres=# select lo_export(41028, '/var/lib/postgresql/test.txt.bak');  
 lo_export   
-----------  
         1  
(1 row)  
postgres=# \q  
postgres@3501de034e72:~$ cat /var/lib/postgresql/test.txt.bak  
hello, i am digoal  
```  
6、将数据库bytea导出到数据库服务器上      
```  
先把bytea转换为大对象, 再使用大对象接口导出  
postgres=# select lo_from_bytea(0, b) from t1 where id=1;  
 lo_from_bytea   
---------------  
         41029  
(1 row)  
postgres=# select lo_export(41029, '/var/lib/postgresql/test.txt.bak1');  
 lo_export   
-----------  
         1  
(1 row)  
postgres=# \q  
postgres@3501de034e72:~$ cat /var/lib/postgresql/test.txt.bak1  
hello, i am digoal  
```  
7、将数据库大对象导出到客户端     
```  
postgres=# \lo_export 41028 /var/lib/postgresql/test.txt.client  
lo_export  
postgres=# \q  
postgres@3501de034e72:~$ cat /var/lib/postgresql/test.txt.client  
hello, i am digoal  
```  
8、将数据库bytea导出到客户端      
```  
先把bytea转换为大对象, 再使用psql大对象接口导出  
postgres=# \lo_export 41029 /var/lib/postgresql/test.txt.client1  
lo_export  
postgres=# \q  
postgres@3501de034e72:~$ cat /var/lib/postgresql/test.txt.client1  
hello, i am digoal  
```  
9、读取大对象片段内容      
```  
lo_lseek  
lo_lseek64  
lo_get  
```  
10、删除大对象      
```  
postgres=# select lo_unlink(41017);  
 lo_unlink   
-----------  
         1  
(1 row)  
postgres=# select lo_unlink(41017);  
ERROR:  large object 41017 does not exist  
```  
11、检查未被引用的大对象      
```  
postgres@3501de034e72:~$ vacuumlo -nv postgres  
Connected to database "postgres"  
Test run: no large objects will be removed!  
Checking lo in public.t  
Would remove 2 large objects from database "postgres".  
```  
12、安全的清理未被引用的大对象      
```  
postgres@3501de034e72:~$ vacuumlo postgres  
postgres@3501de034e72:~$ psql  
psql (14.9 (Debian 14.9-1.pgdg110+1))  
Type "help" for help.  
postgres=# \lo_list  
      Large objects  
 ID | Owner | Description   
----+-------+-------------  
(0 rows)  
```  
#### 61 将“远程数据库数据表/query结果”导出到“客户端本地文件”  
使用psql客户端 将“远程数据库数据表/query结果”导出到“客户端本地文件”  
```  
postgres@6f60081d4ace:~$ pwd  
/var/lib/postgresql  
postgres@6f60081d4ace:~$ psql  
psql (14.9 (Debian 14.9-1.pgdg110+1))  
Type "help" for help.  
db1=> \c db1 r1  
You are now connected to database "db1" as user "r1".  
db1=> create table t_1 (id int, info text, ts timestamp);  
CREATE TABLE  
db1=> insert into t_1 select generate_series(1,10), md5(random()::text), now();  
INSERT 0 10  
db1=> \copy t_1 to '/var/lib/postgresql/t_1.csv' with (format csv);  
COPY 10  
db1=> \q  
postgres@6f60081d4ace:~$ cat t_1.csv   
1,9b924a12d5d6de3b28d1e0b33e13ec57,2023-11-11 05:16:03.577032  
2,4b6bc380cfd558dfa9f5928561a13272,2023-11-11 05:16:03.577032  
3,ca7c478b9e577d5b1f46e8294bf7dd92,2023-11-11 05:16:03.577032  
4,ca049d84a42858ef46bc12545c2202a6,2023-11-11 05:16:03.577032  
5,58730344f8c2c46b4410a83047050978,2023-11-11 05:16:03.577032  
6,5eeb084c6c88adcc878fba2fb6b16185,2023-11-11 05:16:03.577032  
7,222ac6a77aefab5c80ad2851b53cfedc,2023-11-11 05:16:03.577032  
8,6357795ae8684fe574ff2e015cec5999,2023-11-11 05:16:03.577032  
9,67ef87e1c126c864987e547d57f23c0f,2023-11-11 05:16:03.577032  
10,61821e0f94e7a95e6cd9d88bd0d881af,2023-11-11 05:16:03.577032  
```  
使用管道 将“远程数据库数据表/query结果”导出到“客户端本地文件”  
```  
postgres@6f60081d4ace:~$ psql -U r1 -d db1  -c "copy t_1 to stdout with (format csv);" > ./nt1.csv  
postgres@6f60081d4ace:~$ cat nt1.csv   
1,9b924a12d5d6de3b28d1e0b33e13ec57,2023-11-11 05:16:03.577032  
2,4b6bc380cfd558dfa9f5928561a13272,2023-11-11 05:16:03.577032  
3,ca7c478b9e577d5b1f46e8294bf7dd92,2023-11-11 05:16:03.577032  
4,ca049d84a42858ef46bc12545c2202a6,2023-11-11 05:16:03.577032  
5,58730344f8c2c46b4410a83047050978,2023-11-11 05:16:03.577032  
6,5eeb084c6c88adcc878fba2fb6b16185,2023-11-11 05:16:03.577032  
7,222ac6a77aefab5c80ad2851b53cfedc,2023-11-11 05:16:03.577032  
8,6357795ae8684fe574ff2e015cec5999,2023-11-11 05:16:03.577032  
9,67ef87e1c126c864987e547d57f23c0f,2023-11-11 05:16:03.577032  
10,61821e0f94e7a95e6cd9d88bd0d881af,2023-11-11 05:16:03.577032  
```  
#### 62 将“客户端本地文件”导入“远程数据库”  
使用psql客户端 将“客户端本地文件”导入“远程数据库”  
```  
postgres@6f60081d4ace:~$ psql -U r1 -d db1  
psql (14.9 (Debian 14.9-1.pgdg110+1))  
Type "help" for help.  
db1=> select count(*) from t_1;  
 count   
-------  
    10  
(1 row)  
db1=> \copy t_1 from '/var/lib/postgresql/t_1.csv' with (format csv)  
COPY 10  
db1=> select count(*) from t_1;  
 count   
-------  
    20  
(1 row)  
```  
使用管道 将“客户端本地文件”导入“远程数据库”  
```  
postgres@6f60081d4ace:~$ cat nt1.csv|psql -U r1 -d db1 -c "copy t_1 from stdin with (format csv)" -f -  
COPY 10  
```  
#### 63 将“远程数据库数据表/query结果”导出到“远程数据库服务器上某文件”  
使用超级用户调用COPY命令 将“远程数据库数据表/query结果”导出到“远程数据库服务器上某文件”  
```  
postgres@6f60081d4ace:~$ psql -U postgres -d db1  
psql (14.9 (Debian 14.9-1.pgdg110+1))  
Type "help" for help.  
db1=# copy s1.t_1 to '/tmp/t_1.csv' with (format csv);  
COPY 30  
db1=# copy (select * from s1.t_1 limit 10) to '/tmp/t_1.csv' with (format csv);  
COPY 10  
```  
#### 64 将“远程数据库服务器上某文件”导入“数据库”  
使用超级用户调用COPY命令 将“远程数据库服务器上某文件”导入“数据库”  
```  
postgres@6f60081d4ace:~$ psql -U postgres -d db1  
psql (14.9 (Debian 14.9-1.pgdg110+1))  
Type "help" for help.  
db1=# copy s1.t_1 from '/tmp/t_1.csv' with (format csv);  
COPY 10  
```  
#### 65 通过系统表查看对象类型  
https://www.postgresql.org/docs/14/catalog-pg-class.html  
```  
r = ordinary table,   
i = index,   
S = sequence,   