            case  0 {
            if _, err := tee.Write(zero16[:16-padding]); err != nil {
                return err
            }
        }
        // write frame MAC. egress MAC hash is up to date because
        // frame content was written to it as well.
        fmacseed := rw.egressMAC.Sum(nil)
        mac := updateMAC(rw.egressMAC, rw.macCipher, fmacseed)
        _, err := rw.conn.Write(mac)
        return err
    }
结合以太坊 RLPX 的文档[2]和上述代码，可以分析出 `RLPXFrameRW` 帧的结构。在一般情况下，发送一次数据将产生五个数据包：
    header          // 包含数据包大小和数据包源协议
    header_mac      // 头部消息认证
    frame           // 具体传输的内容
    padding         // 使帧按字节对齐
    frame_mac       // 用于消息认证
接收方按照同样的格式对数据包进行解析和验证。
### 0x06 RLP 编码
RLP编码 (递归长度前缀编码)提供了一种适用于任意二进制数据数组的编码，RLP 已经成为以太坊中对对象进行序列化的主要编码方式，便于对数据结构的解析。比起
json 数据格式，RLP 编码使用更少的字节。
在以太坊的网络模块中，所有的上层协议的数据包要交互给 p2p 链路时，都要首先通过 RLP 编码；从 p2p 链路读取数据，也要先进行解码才能操作。
以太坊中 RLP 的编码规则[3]。
### 0x07 LES 协议层
这里以 LES 协议为上层协议的代表，分析在以太坊网络架构中应用协议的工作原理。
LES 服务由 Geth 初始化时启动，调用源码 les 下的 `NewLesServer()` 函数开启一个 LES 服务并初始化，并通过
`NewProtocolManager()` 实现以太坊子协议的接口函数。其中 `les/handle.go` 包含了 LES 服务交互的大部分逻辑。
回顾上文 p2p 网络架构，最终 p2p 底层通过 `p.Run()` 启动协议，在 LES 协议中，也就是调用 LES 协议的 `Run()` 函数：
    [./les/handle.go#NewProtocolManager()]
    Run: func(p *p2p.Peer, rw p2p.MsgReadWriter) error {
        ...
        select {
            case manager.newPeerCh   
联系电话：(086) 136 8133 5016(沈经理，工作日:10:00-18:00)
欢迎扫码咨询：
* * *
References:  
[1] WIKI.DH：   
[2] Github.rlpx：   
[3] WIKI.RLP：   
[4] Github.ZtesoftCS：   
[5] CSDN：   
[6] CSDN：   
[7] ETHFANS：   
[8] BITSHUO：   
[9] Github.go-ethereum： 
* * *