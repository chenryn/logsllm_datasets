title:Ensuring Authorized Updates in Multi-user Database-Backed Applications
author:Kevin Eykholt and
Atul Prakash and
Barzan Mozafari
Ensuring Authorized Updates in Multi-user 
Database-Backed Applications
Kevin Eykholt, Atul Prakash, and Barzan Mozafari, University of Michigan Ann Arbor
https://www.usenix.org/conference/usenixsecurity17/technical-sessions/presentation/eykholt
This paper is included in the Proceedings of the 26th USENIX Security SymposiumAugust 16–18, 2017 • Vancouver, BC, CanadaISBN 978-1-931971-40-9Open access to the Proceedings of the 26th USENIX Security Symposium is sponsored by USENIXEnsuring Authorized Updates in Multi-user Database-Backed Applications
Kevin Eykholt
University of Michigan Ann Arbor
Atul Prakash
University of Michigan Ann Arbor
Barzan Mozafari
University of Michigan Ann Arbor
Abstract
Database-backed applications rely on access control
policies based on views to protect sensitive data from
unauthorized parties. Current techniques assume that
the application’s database tables contain a column that
enables mapping a user to rows in the table. This as-
sumption allows database views or similar mechanisms
to enforce per-user access controls. However, not all
database tables contain sufﬁcient information to map a
user to rows in the table, as a result of database normal-
ization, and thus, require the joining of multiple tables.
In a survey of 10 popular open-source web applications,
on average, 21% of the database tables require a join.
This means that current techniques cannot enforce secu-
rity policies on all update queries for these applications,
due to a well-known view update problem.
In this paper, we propose phantom extraction, a tech-
nique, which enforces per user access control policies on
all database update queries. Phantom extraction does not
make the same assumptions as previous work, and, more
importantly, does not use database views as a core en-
forcement mechanism. Therefore, it does not fall victim
to the view update problem. We have created SafeD as
a practical access control solution, which uses our phan-
tom extraction technique. SafeD uses a declarative lan-
guage for deﬁning security policies, while retaining the
simplicity of database views. We evaluated our system
on two popular databases for open source web appli-
cations, MySQL and Postgres. On MySQL, which has
no built-in access control, we observe a 6% increase in
transaction latency. On Postgres, SafeD outperforms the
built-in access control by an order of magnitude when
security policies involved joins.
1
Stateful (server-side) applications often rely on a back-
end database to manage their state. When sensitive data
is involved, these databases become prime targets for
attackers. Web applications, especially, are subject to
Introduction
attacks due the large number of users and easy access
through the Internet. To protect the sensitive data these
web application store in thee database, proper access
control is required. Unfortunately, securing web applica-
tions has remained a challenge, mainly for three reasons:
(i) the incompatibility of modern web architecture and
the security mechanisms of database systems, (ii) limi-
tations of the automated techniques for enforcing a se-
curity policy, and (iii) failure to write secure, non-buggy
code when implementing access contol logic within the
application.
1. Architectural Incompatibility — Some database
systems provide vendor-speciﬁc syntax for ﬁne-grained
access control [13, 16, 18, 23, 24] with support for se-
curity policies that involve joins. However, use of a spe-
ciﬁc database’s access control mechanism makes the ap-
plication DBMS-speciﬁc. A larger problem is that exist-
ing the web application architecutre is incompatible with
the database access control architecture. Most modern
web applications use an over-privileged database account
with the authority to access and modify any information
stored in the database [19, 21]. This setup is popular
because it avoids the performance overhead of creating
(and tearing down) new database connections on-the-ﬂy
for possibly millions of end users. Using an overprivi-
leged account, the web application can simply maintain
a pool of active database connections that can execute
queries on behalf of any end user.
To use a DBMS’ mechnisms, (1) each application user
must be assigned a unique database account, and (2)
a separate database connection (using the assigned ac-
count) must be used for processing each user’s requests.1
Making such changes to web applications would prevent
1This is because most databases, for security reasons, disallow [31]
or limit [20, 23, 41] a connection’s ability to switch its user context
once it is created. Databases that allow but limit context switching
for existing connections are still vulnerable to (1) application bugs in
switching users, and (2) SQL injection whereby malicious users ma-
nipulate the functionality to switch to previous user contexts.
USENIX Association
26th USENIX Security Symposium    1445
them from using a connection pool, and result in perfor-
mance degradation [33, 48].
2. Limitations of Existing Techniques — The incom-
patability of DBMS access control with modern web ap-
plication has resulted in numerous access control solu-
tions, which exist as a security layer between the appli-
cation and the database. These solutions restrict each ap-
plication user to a portion of the database [39, 43, 36].
Before issuing a query, the application rewrites the query
to use the restricted portion of the datbase based on
the authenticated user. Often, database views are the
central mechnism these systems rely on [39, 43]. Al-
though current techniques can fully restrict database
reads [43, 45], they do not support database updates (i.e.,
INSERT, DELETE, and UPDATE queries) due to the view
update problem [27]. The view update probem states that
write queries cannot execute on a view when there is not
a “one-to-one relationship between the rows in the view
and those in the underlying table” [22]. Such a problem
can occur when a view deﬁnition contains a join query.
Consider OsCommerce, an open-source e-commerce
web application, which allows customers to leave re-
views on products. The metadata for reviews is stored
in the reviews table.
In OsCommerce, customers can
only review products they have purchased. The follow-
ing query represents the allowable set of rows that con-
form to this access control policy:
SELECT R .*
FROM review R , o r d e r s _ p r o d u c t s OP ,
orders O
WHERE
O . c u s t o m e r _ i d = c u r r e n t _ i d
AND
O . o r d e r s _ i d = OP . o r d e r s _ I D
AND
OP . p r o d u c t _ i d = R . p r o d u c t _ I D
AND
R . c u s t o m e r _ I D = c u r r e n t _ i d ;
The ﬁrst three conditions in the WHERE clause obtain
the set of products a customer has ordered, and the last
condition ensures that the customer and the current user
are the same. Although this view deﬁnition correctly
captures the intended access control policy, it cannot be
enforced with existing query re-writing techniques, as
such a view is not updatable. This is because there is no
one-to-one mapping between the rows in the view and
those in the base tables, e.g., a user can purchase a prod-
uct multiple times across different orders.
Previous work has largely ignored the view update
problem by assuming that any table on which a security
policy is deﬁned contains the user id, thus joins are not
required to map a user to rows in the table [36, 39, 43].
Unfortunately, as our survey of popular open-source web
applications in this paper reveals, on average, 21% (and
up to 50%) of the tables do not contain sufﬁcient infor-
mation to map a user to rows in the table due to a lack of
a user id ﬁeld or similar, thus a join query is required. In
other words, existing access control solutions would not
be able to fully support database updates for any of these
popular applications.
3. Unsecure and Buggy Code — In today’s web appli-
cation architecture, developers cannot rely on databases
to enforce access control policies due to the reliance
of the applications on a pool of persistent connections.
They cannot use existing access control solutions either,
due to the lack of support for write queries when tables
that do not contain user information. As a result, de-
velopers often implement their own access control login
within the application and such implementations must be
secure [47]. In theory, the application will only issues
queries in accordance with the access control rules for
the authenticated user.
In practice, however, most implementations have se-
curity ﬂaws. According to a ﬁve-year study of 396 open-
source web applications, over 200 security vulnerabili-
ties were discovered [26]. Likewise, a study of vulner-
abilities in open-source Java projects [12] found 8.61
defects for every 100,000 lines of code. Unsecure or
buggy code leave web applications vulnerable to numer-
ous access control bypass attacks, such as SQL injec-
tion [8, 25, 28, 34, 35, 38, 42] and insecure direct ob-
ject reference attacks [14, 44]. These issues allow at-
tackers to cause the application to issue unauthorized
queries with respect to the current user and leak sensitive
data. For example, a vulnerability in Symantec’s web-
based management console allowed authenticated low-
privileged users to execute arbitrary SQL queries on the
backend database, and change their account privileges to
administrator level [25]. Data leaks have also occurred
in mobile apps, such as Uber and SwiftKey, that use a
database-backed web service [15, 30].
Such vulernerabilities occur because there is not a
declarative way to deﬁne an access control policy within
the application. Rather, developers have an idea of what
the security policy should be and attempt to implement
in code whenever database queries are issued. A proper
access control solution should exist between the appli-
cation and the database and allow a devloper to declar-
atively deﬁne an access control policy in a centralized
location. Furthermore, the solution should meet the fol-
lowing key criteria:
C1. Generality: The access control policy can be en-
forced for all read (SELECT) and write (UPDATE,
INSERT, and DELETE) queries on any table (whether
it contains the user id as a column or not);
C2. Correctness: The application user should only be
able to access and modify authorized information as
1446    26th USENIX Security Symposium
USENIX Association
deﬁned by the developer’s policy;
C3. Database Independence: The mechanism should
not rely on vendor-speciﬁc features of the backend
database; and
C4. Connection Sharing: For compatibility with ex-
isting web applications, the solution should allow
for reusing a set of persistent and over-privileged
database connections to serve requests of multiple
end users.
Our Approach — We introduce the phantom extrac-
tion technique for enforcing access control on write
queries, while being robust to policies that involve joins.
Before executing a write query, we copy the rows from
the target table that the user is authorized to modify into
a temporary table. The query is then copied and modi-
ﬁed to operate on the temporary table. We refer to mod-
iﬁed copy as the query’s phantom. Once SafeD deems
the phantom’s modiﬁcations on the temporary table to
be safe, the changes are copied over to the original table.
The view update problem does not apply to phantom ex-
tractions because database views are not used in any part
of the process. The correctness of phantom extraction
is established with a formal notion of query safety that
guarantees a query is compliant with a given security pol-
icy (see Section 5). We present necessary and sufﬁcient
conditions to achieve that guarantee.
With phantom extraction, we created SafeD (Safe
Driver), a pratical access control solution that supports
policy enforcement for both read and write queries.
SafeD extends existing database drivers, such as JDBC
and ODBC, and transparently enforces an application’s
access control policy. Policies are deﬁned by a set of
declarative statements which use a syntax similar to dat-
base views. Since the access control is evaluated at the
driver level, SafeD does not require a new database con-
nection to establish a new user context, nor is it tied to
a particular database backend. The user context is estab-
lished when users authenticate themselves to the appli-
cation, and SafeD enforces the access control policy for
all database connections in the application’s connection
pool.
Contributions —
1. We surveyed 10 popular open-source web applica-
tions and show that complex row-level access con-
trol policies with joins queries are required for, on
average, 21% of the tables to deﬁne per-user poli-
cies (Section 3).
2. We establish a formal notion of query safety and
prove the necessary and sufﬁcient conditions for
the safety of all database operations, i.e., SELECT,
DELETE, INSERT, and UPDATE (Section 5).
3. We present a new technique, phantom extraction,
which ensures the safety of database updates with
full generality (Section 6).
4. We present SafeD as a practical solution for en-
forcing per-user access control policies within the
database. On MySQL (which lacks built-in support
for row-level access control for read/write queries),
a 6% increase in transaction latency is observed
(Section 8.1). On Postgres, SafeD provides com-
parable performance to Postgres’ access control for
simple policies, but outperforms it by an order of
magnitude for row-level access control policies with
joins in terms of transaction latency and throughput
(Section 8.2).
2 Related Work
The related work on access control can be categorized
into application-centered versus database-centered ap-
proaches.
2.1 Application Access Control
CLAMP[43] and Nemesis [36] have similarities to SafeD
in that each deﬁnes a per-user access policy in terms of
views on the underlying tables. However, both works as-
sume the underlying tables contain a column, such as a
user id, which enables mapping a user to rows in the ta-
ble. If the underlying table does contain a column, such
as a user id [column], a join with one or more additional
tables is necessary. For example, in OsCommerce, the
security policy for reviews requires joining reviews with
orders and orders products to map a user to the set of re-
views they can update (see Section 1). A view deﬁned by
a join query can result in the view update problem [27]. A
database view is updatable only when there is a one-to-
one mapping of rows in the view to rows in the underly-
ing table. Therefore, CLAMP does not support per-user
access control for write queries when the database view
is not updatable. SafeD does not use database views to
deﬁne per-user access control policies. Rather, SafeD
rewrites queries to conform to the deﬁned access control
policy and executes the modiﬁed queries on tables in the
database, thus avoiding the view update problem entirely.
In addition to assuming a table contain a column that
enables mapping a user to rows in the table, Nemesis [36]
also assumes that INSERT statements do not read exist-
ing rows in the database. However, this may not hold in
many cases (e.g., consider INSERT INTO T1 AS SELECT
* FROM T2). This query reads information from table T2
and copies it into T1. In contrast, SafeD makes no such
assumption and can handle both blind and nested INSERT
queries.