### 优化后的文本

```c
while (va < vme_end) {
    ...
    m = vm_page_lookup(object, offset);
    ...
    vm_fault_enter(m,                      // Calls pmap_enter_options()
                   dst_map->pmap,          // to map m->vmp_phys_page.
                   va,
                   prot,
                   prot,
                   VM_PAGE_WIRED(m),
                   FALSE,                  // change_wiring
                   VM_KERN_MEMORY_NONE,    // tag - not wiring
                   &fault_info,
                   NULL,                   // need_retry
                   &type_of_fault);
    ...
    offset += PAGE_SIZE_64;
    va += PAGE_SIZE;
}
...
vm_map_copy_insert(dst_map, last, copy);
...
vm_map_unlock(dst_map);
...
```

接下来，我们将逐步完成这个过程。首先处理其他 `vm_map_copy` 类型：

```c
if (copy->type == VM_MAP_COPY_OBJECT) {
    ...
}

if (copy->type == VM_MAP_COPY_KERNEL_BUFFER) {
    ...
}
```

确保 `vm_map` 是加锁的：

```c
vm_map_lock(dst_map);
```

遍历 `vm_map_entry(fake)` 对象链表：

```c
for (entry = vm_map_copy_first_entry(copy);
     entry != vm_map_copy_to_entry(copy);
     entry = entry->vme_next) {
    
    if (entry->wired_count != 0) {
        object = VME_OBJECT(entry);
        offset = VME_OFFSET(entry);

        while (va < vme_end) {
            m = vm_page_lookup(object, offset);
            
            vm_fault_enter(m,                      // Calls pmap_enter_options()
                           dst_map->pmap,          // to map m->vmp_phys_page.
                           va,
                           prot,
                           prot,
                           VM_PAGE_WIRED(m),
                           FALSE,                  // change_wiring
                           VM_KERN_MEMORY_NONE,    // tag - not wiring
                           &fault_info,
                           NULL,                   // need_retry
                           &type_of_fault);
            
            offset += PAGE_SIZE_64;
            va += PAGE_SIZE;
        }
    }
}
```

`vm_fault_enter()` 的调用较为复杂，通过适当设置伪造对象中的字段，可以使用伪造的 `vm_page` 对象来调用 `pmap_enter_options()`，从而使用任意物理页码进行映射：

```c
kern_return_t
pmap_enter_options(
    pmap_t pmap,
    vm_map_address_t v,
    ppnum_t pn,
    vm_prot_t prot,
    vm_prot_t fault_type,
    unsigned int flags,
    boolean_t wired,
    unsigned int options,
    __unused void *arg)
```

`pmap_enter_options()` 负责修改目标页表，以插入转换表条目，该条目将建立从虚拟地址到物理地址的映射。类似于 `vm_map` 如何管理地址空间的虚拟映射状态，`pmap` 结构管理地址空间的物理映射（即页表）状态。根据 `osfmk/arm/pmap.c` 中的源代码，在添加转换表条目之前，不会对提供的物理页码进行进一步验证。

因此，我们破坏的 `vm_map_copy` 对象实际上为我们提供了一个非常强大的原语：将任意物理内存直接映射到用户空间中的进程中！

我决定在 iOS 13.3 的 oob_timestamp 漏洞所提供的内核读/写原语之上构建一个 POC，主要原因有两个：
1. 我没有更好的漏洞来开发完整的 exploit。尽管最初是在尝试利用 oob_timestamp 漏洞时发现这个想法，但很快发现该漏洞不适合这种技术。
2. 我希望独立实现该技术所使用的漏洞来评估其效果。似乎有可能使该技术具有确定性（即没有故障案例）；在一个不可靠的漏洞上实施它会使得单独评估变得困难。

这种技术适用于 kalloc.80 至 kalloc.32768 任何分配器区域中的可控一字节堆溢出（即 65 到 32768 字节的通用分配）。为了便于参考，我将其称为“单字节利用技术”。

我们已经列出了上述技术的基本要素：创建一个 KERNEL_BUFFER 类型的 `vm_map_copy`，其中包含指向伪造的 `vm_map_entry` 列表的指针，将类型破坏为 ENTRY_LIST，使用 `vm_map_copyout_internal()` 接收它，并将任意物理内存映射到我们的地址空间中。然而，成功的利用要复杂得多：
- 1. 我们还没有处理伪造的 `vm_map_entry`、`vm_object` 和 `vm_page` 将被构造在哪里。
- 2. 我们需要确保在映射物理页面后，调用 `vm_map_copyout_internal()` 的内核线程不会崩溃、死机或死锁。
- 3. 映射一个物理页面是好的，但这本身可能还不足以实现任意内核读/写。因为：
  - kernelcache 在物理内存中的加载地址是未知的，因此我们不能直接映射它的任何特定页面，而应该首先定位它。