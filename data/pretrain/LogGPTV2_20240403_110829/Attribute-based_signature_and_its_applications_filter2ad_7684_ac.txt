e((cid:104)gri(cid:105) ,(cid:104)hri(cid:105)) = e((cid:104)gri(cid:105) , h);
e((cid:104)gτi(cid:105) , h) = e(g,(cid:104)hτi(cid:105));
e((cid:104)gτi(cid:105) ,(cid:104)hτi(cid:105)) = e((cid:104)gτi(cid:105) , h).
Next, observe that the pairing equation e(BCτ(cid:107)mDr, Sv) = e(gv, h) is logically equivalent to
the expression v (cid:54)= 0 ⇒ DS.Ver(vk, τ(cid:107)m, (S, r)) = 1, which we need to prove. However, the prover
cannot directly compute BCτ(cid:107)mDr or Sv given the committed values. Thus the prover commits to
some additional intermediate values Sv ∈ H and Cτ , Dr ∈ G, and proves the following equations:
e((cid:104)Dr(cid:105) , h) =(cid:81)
e((cid:104)Cτ(cid:105) , h) =(cid:81)
i e(D2i,(cid:104)hri(cid:105));
i e(C2i,(cid:104)hτi(cid:105));
e((cid:104)gv(cid:105) ,(cid:104)S(cid:105)) = e(g,(cid:104)Sv(cid:105));
e((cid:104)gv(cid:105) , h) = e(BC2|τ|m,(cid:104)Sv(cid:105)) e((cid:104)Cτ(cid:105) ,(cid:104)Sv(cid:105)) e((cid:104)Dr(cid:105) ,(cid:104)Sv(cid:105)).
Note that since m and |τ| are public, all the coeﬃcients in these equations can be publicly computed.
This completes the description of how we encode the required logic into the Groth-Sahai proof
system.
5We remark that the proof need not be a proof of knowledge with respect to (cid:126)v, so it was safe to use these values
directly in Zp.
10
There are two instantiations of the Groth-Sahai proof system over prime order groups, based
on the DLIN and SXDH assumptions, both of which are suitable for our purposes. Using these we
obtain the following (a more detailed analysis of the eﬃciency is given in Appendix C.2).
Theorem 2. Under the q-SDH and either DLIN or SXDH assumptions, there is an ABS scheme
supporting claim-predicates represented as monotone span programs, with signatures consisting of
O(ks) group elements, where s is the size of the monotone span program.
4.4 Practical Instantiation 2
We can also instantiate our framework using the same approach as above, but with the signature
scheme of Waters [36]. Signatures in Waters’ scheme do not include any elements of Zp. This
fact allows us to avoid the ineﬃciency of committing to many components of the Boneh-Boyen
signatures in a bitwise fashion. Furthermore, Waters signatures are secure under the much weaker
BDH assumption, which is implied by the assumptions required for Groth-Sahai proofs. Thus this
instantiation does not require the additional q-SDH assumption. However, as a tradeoﬀ, the Waters
instantiation requires larger public parameters: a linear (in the security parameter) number of group
elements, not the constant number of group elements needed by the Boneh-Boyen instantiation.
The details of this instantiation follow a similar approach as the previous one, incorporating
the veriﬁcation equation of the Waters signature. In Appendix C.3 we prove the following:
Theorem 3. Under either the DLIN or SXDH assumptions, there is an ABS scheme supporting
claim-predicates represented as monotone span programs, with signatures consisting of O(k + s)
group elements, where s is the size of the monotone span program.
4.5 Practical Instantiation 3
We now present an ABS scheme which is our most practical. Signatures in the scheme consist of
exactly s + 2 group elements, where s is the size of the claim-predicate’s monotone span program.
This scheme does not use the Groth-Sahai proof system; we use our own randomization techniques
to blind the attributes that are used in signing. One additional advantage of avoiding a NIZK proof
system is that the privacy of the signers is provided even against a malicious signature trustee; in
contrast the above NIZK-based constructions rely on the signature trustee to set up a common
reference string honestly.
This construction supports all claim-predicates whose monotone span programs have width at
p as the universe of attributes,
Our approach is motivated by the construction of mesh signatures [11], but incorporates
the eﬃcient credential bundles of the previous construction, as well as the concept of “pseudo-
attributes” to bind a message to the signature. In Appendix D, we give a high-level motivation of
the details of this scheme. Below we give a description of the construction:
most tmax, where tmax is an arbitrary parameter. We treat A = Z∗
where p is the size of the cyclic group used in the scheme.6
ABS.TSetup: Choose suitable cyclic groups G and H of prime order p, equipped with a bilinear
pairing e : G × H → GT . Choose a collision-resistant hash function H : {0, 1}∗ → Z∗
p.
h0, . . . htmax ← H. The trustee public key is
Choose random generators:
T P K = (G, H,H, g, h0, . . . , htmax).
g ← G;
6As always, the universe of attributes can be further extended to {0, 1}∗ by applying a collision-resistant hash
having range Z∗
p. For simplicity of presentation, we do not include this modiﬁcation.
11
ABS.ASetup: Choose random a0, a, b, c ← Z∗
p and set:
C = gc;
A0 = ha0
0 ;
Aj = ha
j and Bj = hb
j
(∀j ∈ [tmax]).
The master key is ASK = (a0, a, b). The public key AP K is (A0, . . . , Atmax, B1, . . . , Btmax, C)
ABS.AttrGen: On input ASK as above and attribute set A ⊆ A, Choose random generator
Kbase ← G. Set:
Ku = K1/(a+bu)
The signing key is then SKA = (Kbase, K0,{Ku | u ∈ A}).
K0 = K1/a0
base ;
base
(∀u ∈ A)
ABS.Sign: On input (P K, SKA, m, Υ) such that Υ(A) = 1, ﬁrst convert Υ to its corresponding
monotone span program M ∈ (Zp)(cid:96)×t, with row labeling u : [(cid:96)] → A. Also compute the vector
(cid:126)v that corresponds to the satisfying assignment A. Compute µ = H(m(cid:107)Υ).
Pick random r0 ← Z∗
p and r1, . . . r(cid:96) ← Zp and compute:
base;
Si = (Kvi
Y = Kr0
W = Kr0
0 ;
Pj =
u(i))r0 · (Cgµ)ri
(cid:96)(cid:89)
)Mij·ri
(AjBu(i)
j
(∀i ∈ [(cid:96)]);
(∀j ∈ [t]).
We note that the signer may not have Ku(i) for every attribute u(i) mentioned in the claim-
predicate. But when this is the case, vi = 0, and so the value is not needed. The signature is
σ = (Y, W, S1, . . . , S(cid:96), P1, . . . , Pt).
i=1
ABS.Ver: On input (P K, σ = (Y, W, S1, . . . , S(cid:96), P1, . . . , Pt), m, Υ), ﬁrst convert Υ to its corre-
sponding monotone span program M ∈ (Zp)(cid:96)×t, with row labeling u : [(cid:96)] → A. Compute
µ = H(m(cid:107)Υ). If Y = 1, then output reject. Otherwise check the following constraints:
e(W, A0) ?= e(Y, h0)
(cid:40)
(cid:17) ?=
Si, (AjBu(i)
j
)Mij
e(Y, h1) e(Cgµ, P1),
e(Cgµ, Pj),
j = 1
j > 1,
(cid:16)
e
(cid:96)(cid:89)
i=1
for j ∈ [t]. Return accept if all the above checks succeed, and reject otherwise.
The security proof of this scheme is given in Appendix D.1.
Theorem 4. In the generic group model, there is an ABS scheme supporting claim-predicates
represented as monotone span programs, with signatures consisting of s + 2 group elements, where
s is the size of the monotone span program.
5 Multiple Attribute-Authorities
Our ﬁrst two intantiations of ABS (indeed, our general framework) can be easily extended
for use in an environment with multiple attribute-issuing authorities. Except in a centralized
enterprise setting, a single user would acquire her attributes from diﬀerent authorities (e.g., diﬀerent
government agencies, diﬀerent commercial services she has subscribed to, diﬀerent social networks
she is registered with and so on). These diﬀerent attribute authorities may not trust each other,
nor even be aware of each other. Indeed, some attribute authorities may be untrustworthy, and
this should not aﬀect the trustworthiness of attributes acquired from other authorities, or of ABS
signatures involving trustworthy attributes.
12
Apart from these mutually distrusting attribute authorities, we still require a (possibly separate)
signature trustee to set up the various public parameters of the ABS signature scheme itself. A
signature trustee does not have to trust any attribute authority. The attribute authorities use only
the public keys from the signature trustee. As long as the signature trustee is trusted, then the ABS
signatures are secure and leak no information about the identity or attributes of the signer. The
only requirement for compatibility among attribute authorities is that they all have a mechanism
for agreeing on a user’s userid (say, an email address) so that a user’s bundle of credentials may
contain compatible attributes from several authorities.
Finally, the claim-predicate in the ABS signature must carry the identity of the attribute-
authorities who own the various attributes (possibly as meta-data attached to the attribute
description). Given this information, the statement proven in the non-interactive proof can be
modiﬁed to refer to the appropriate digital signature veriﬁcation keys corresponding to each
attribute, including the pseudo-attribute. If one attribute authority’s signatures are compromised,
then an ABS veriﬁer should not give much importance to attributes from that authority. However,
the ABS signatures themselves are still valid (in that they indeed attest to the given claim-predicate
being satisﬁed) as long as the trustee is uncorrupted.
6 Applications
We identify several natural applications of ABS schemes:
Attribute-based messaging Attribute-Based Messaging, or ABM, (e.g., [5]) provides an exam-
ple of a quintessential attribute-based system. In an ABM system, messages are addressed not by
the identities of the recipients, but by a predicate on users’ attributes which the recipients must
satisfy. The users need not be aware of each other’s identities or attributes. To provide end-to-
end message privacy (against users whose attributes do not satisfy the sender’s policy), one can
use ciphertext-policy attribute-based encryption, as proposed by Bethencourt, Sahai and Waters [4].
However, there was no satisfactory way to achieve authentication (i.e., for the receiver to verify
that the sender also satisﬁed a particular policy) in an ABM system until now. Existing crypto-
graphic technology, including certiﬁcates and mesh signatures, would not provide an adequate level
of anonymity for the senders while simultaneously preventing collusions.
In a typical ABM system, a certain degree of authorization is required to send messages to
certain groups of users. That is, an attribute-based access control mechanism must decide whether
to allow a messaging attempt from a sender, depending on both the attributes of the sender and
the attribute-based address attached to the message. ABS can be used to authenticate a sender
to the ABM system itself (as opposed to the scenario above, where the sender was authenticating
to the message recipient). As the messaging system can publicly verify the ABS signature, this
solution eliminates the need for the messaging system to query the attribute database to determine
the sender’s authorization. Indeed, the messaging system need not know the sender’s identity at
all.
Finally, because our construction is so readily suited for multi-authority settings, ABS is
a natural choice for inter-domain ABM systems. However, there are many engineering and
cryptographic challenges involved in other aspects of a truly inter-domain ABM system. For
example, Chase’s proposal [14] for multi-authority attribute-based encryption (originally for the
schemes in [33, 20], but can be extended to the one in [4]) requires all the attribute-authorities to
share secret keys with a central authority, thereby requiring the central authority to trust all the
attribute authorities. In contrast, our ABS system requires no such trust between the signature
13
trustee and attribute authorities. As such, ABS is much better suited to practical inter-domain
attribute-based systems than its encryption counterparts.
Attribute-based authentication and trust-negotiation ABS can also be used as a more
general ﬁne-grained authentication mechanism. For instance, a server can publish its access policy
for a particular resource along with its encryption public key. When a client wishes to access the
resource, the server issues a random challenge string. The client can then generate a session key
for (private-key) communication, generate an ABS signature of (challenge, sessionkey) under the
server’s policy, and send these to the server encrypted under the server’s public key. Thereafter,
the client and server can communicate using the shared session key. This simple protocol is robust
even against a man in the middle.
This technique can be extended to multiple rounds as a simple trust negotiation protocol, in
which two parties progressively reveal more about their attributes over several rounds of interaction.
Several recent works also consider cryptographic approaches to trust negotiation that give more
privacy to users than is achieved when they simply take turns revealing their attributes [29, 19].
Instead of these techniques, ABS can provide a sophisticated way to reveal partial information
about one’s attributes that is natural for this setting. Being able to bind a message to such a proof
about one’s attributes, as ABS permits, also allows one to protect the trust negotiation from outside
attack, using an approach as above. At each step of the negotiation, the active party can choose
an “ephemeral key” for secure (private-key) communication and sign it using ABS. This approach
prevents a man-in-the-middle attacks by an adversary who has enough attributes to intercept the
ﬁrst few steps of the negotiation.
Leaking secrets The classical application for which the notion of ring-signatures was developed
by Rivest, Shamir and Tauman [30] is “leaking secrets,” that we used as the motivating example
in the opening of this paper. Ring signatures support only claim-predicates which are disjunctions.
Mesh signatures are an extension of this concept which allow more sophisticated claim-predicates,
but permit multiple parties to pool their attributes (atomic signatures). This is not necessarily the
intended semantics in natural secret-leaking environment. ABS, on the other hand, provides the
semantics that a single user (not a coalition) whose attributes satisfy the stated predicate attests
to the secret.
References
[1] M. Belenkiy, M. Chase, M. Kohlweiss, and A. Lysyanskaya. P-signatures and noninteractive anonymous
credentials. In R. Canetti, editor, TCC, volume 4948 of Lecture Notes in Computer Science, pages 356–
374. Springer, 2008.
[2] M. Bellare, D. Micciancio, and B. Warinschi. Foundations of group signatures: Formal deﬁnitions,
In E. Biham, editor,
simpliﬁed requirements, and a construction based on general assumptions.
EUROCRYPT, volume 2656 of Lecture Notes in Computer Science, pages 614–629. Springer, 2003.
[3] M. Bellare, C. Namprempre, and G. Neven. Security proofs for identity-based identiﬁcation and
signature schemes. Journal of Cryptology, 22(1):1–61, January 2009. Preliminary version appeared
in Eurocrypt 2004.
[4] J. Bethencourt, A. Sahai, and B. Waters. Ciphertext-policy attribute-based encryption.
Symposium on Security and Privacy, pages 321–334, 2007.
In IEEE
[5] R. Bobba, O. Fatemieh, F. Khan, C. A. Gunter, and H. Khurana. Using attribute-based access control