Ghost in the Droid
Possessing Android Applications with ParaSpectre
Jeﬀ Dileo (chaosdata)
DEFCON 25
Hi!
I’m Jeﬀ, and I have a problem.
I like to do bad things to worse programming languages.
*audience says*
Hiiiiiiiiiiiiiiiiii Jeﬀ
Outline
• Introduction
• Motivation
• Original Plan
• Android Function Hooking 102
• ParaSpectre
• Demos
• Future Work
Introduction
What is this about?
• Injecting JRuby into Android applications to hook functionality
Why should you care?
• You reverse Android apps
• You develop Android apps, but realize the debugging stack sucks
• You like Ruby and/or REPLs
$ irb
irb (main):001:0> puts ” this
is a REPL”
this
is a REPL
=> n i l
irb (main):002:0>
$ python
Python 2.7.11 ( default , Mar
1 2016, 18:47:52)
[GCC 4.2.1 Compatible Apple LLVM 6.1.0 (clang-602.0.53)] on darwin
Type ”help” , ”copyright ” , ”credits” or ”license” for more information .
>>> print ” this
is
also a REPL”
this
is
also a REPL
>>>
Motivation
• Was reversing multiple complex Android apps
• Including a screwy Korean chat app used primarily by Japanese people
• Writing hooks for it was tedious and it was tricky to figure out what all of the nested
obfuscated objects were
Original Plan
REPL-ize
• Take the interesting functions
...and wrap them in REPLs!
• REPLs are great
• They give you an interactive shell
• And let you poke around at stuﬀ
Android Function Hooking — LD_PRELOAD
Shim to Win
LD_PRELOAD:
• Old-school function hooking
• setprop wrap. LD_PRELOAD=/path/to/file.so
• Override dynamically linked native functions
• Inject a native function to run early in app startup
• Requires root access
Android Function Hooking — LD_PRELOAD
Example
#include 
#include 
#include 
static int (*_real_rand)(void) = NULL;
__attribute__((constructor))
static void setup() {
_real_rand = (int(*)(void))dlsym(RTLD_NEXT, "rand");
}
int rand() {
if(access(".ps3mode", F_OK) != -1 ) {
return 4;
}
return (*_real_rand)();
}
Android Function Hooking — Debugging
”Seems,” madam? Nay, it is; I know not ”seems.”
Java Debug Wire Protocol (JDWP):
• Actual debugging... with a debugger
• Exposed via ADB
• ”Usable” from several diﬀerent frontends, e.g. Android Studio, jdb, JSwat
• Can list all Java object instances
• Can set breakpoints
• Within a paused breakpoint frame, can access fields and invoke methods via
”expressions”
• Requires app to be debuggable (can be forced via several means)
• Massively slows down the app
Android Function Hooking — Debugging
Example (Target)
package trust . nccgroup .debugme;
import
. . .
public class MainActivity extends AppCompatActivity {
@Override
protected void onCreate(Bundle savedInstanceState ) {
super . onCreate( savedInstanceState ) ;
setContentView(R. layout . activity_main ) ;
Button b = (Button) findViewById (R. id . button) ;
b. setOnClickListener (new View. OnClickListener () {
String msg = Utils .getMsg() ;
@Override
public void onClick (View v) {
Toast .makeText( MainActivity . this , msg, Toast .LENGTH_LONG) .show() ;
}
}) ;
}
}
Android Function Hooking — Debugging
Example (GUI)
Android Function Hooking — Debugging
Example (GUI)
Android Function Hooking — Debugging
Example (CLI)
$ adb jdwp
23817
^C
$ adb forward tcp:23817 jdwp:23817; jdb -attach 127.0.0.1:23817 # fights w/ Android Studio
Set uncaught java.lang.Throwable
Set deferred uncaught java.lang.Throwable
Initializing jdb ...
> stop in trust.nccgroup.debugme.MainActivity$1.onClick
Set breakpoint trust.nccgroup.debugme.MainActivity$1.onClick
>
Breakpoint hit: "thread=main", trust.nccgroup.debugme.MainActivity$1.onClick(), line=20 bci=0
main[1] eval android.os.Process.myUid()
android.os.Process.myUid() = 10167
main[1] set msg = "Hello, world! " + msg
msg = "Hello, world! " + msg = "Hello, world! These but the trappings and the suits of woe."
main[1] ^[[A
Unrecognized command: ''.
Try help...
main[1] cont
Android Function Hooking — Debugging
Example (Result)
Android Function Hooking — Frida
J-J-J-JavaScript!
Frida:
• Stomps over instruction memory to add hooks
• Scans for and can inspect all active Java object instances
• Function hooks (for native code and Java) implemented in JavaScript (or native code
using frida-gum)
• Injected via root daemon, LD_PRELOAD, modifying an APK, or debugging an app
• Requires root access (if not modifying an APK or debugging)
Android Function Hooking — Frida
Example
Java.perform(function() {
var File = Java.use('java.io.File');
File.exists.implementation = function() {
if(this.path.value == '/system/xbin/su') {
return false;
}
return this.exists();
}
});
Android Function Hooking — Xposed
Monkey-patching zygote is safe, right?
Xposed Framework
• Modifies Zygote to allow for hook code from other packages to be loaded early in the
boot of a target application
• Provides an API to register further hooks within an application
• Due to hook code and target application code having diﬀerent classloaders, hooks
generally require a lot of reflection to manipulate instances of classes defined in the
target application
• Write hooks in anything that compiles into Java/Dalvik bytecode
• Hooks are easily applied across multiple apps at app start
• Requires the ability to modify the system image
Android Function Hooking — Xposed
Example (top-level scaﬀolding)
public class XposedEntry implements IXposedHookLoadPackage {
@Override
public void handleLoadPackage(XC_LoadPackage.LoadPackageParam lpp)
throws Throwable {
if (!lpp.packageName.equals("...")) {
return;
}
ClassLoader singledexcl = lpp.classLoader;
try {
} catch (Throwable t) {...}
}
}
Android Function Hooking — Xposed
Example (multidex scaﬀolding)
XposedHelpers.findAndHookMethod("android.app.Application",
singledexcl, "attach", Context.class, new XC_MethodHook() {
@Override
protected void afterHookedMethod(
XC_MethodHook.MethodHookParam param) throws Throwable {
Context context = (Context) param.args[0];
ClassLoader multidexcl = context.getClassLoader();
try {
} catch (NoSuchMethodError nsme) {
//pass
} catch (Throwable t) {...}
}
}
);
Android Function Hooking — Xposed
Example (main hook)
XposedHelpers.findAndHookMethod("...", multidexcl, "...",
....class, new XC_MethodHook() {
@Override
protected void beforeHookedMethod(
MethodHookParam param) throws Throwable {
super.beforeHookedMethod(param);
...
}
@Override
protected void afterHookedMethod(
MethodHookParam param) throws Throwable {
super.afterHookedMethod(param);
...
}
}
);
Android Function Hooking — Xposed
Example (actual hook)
XposedHelpers.findAndHookMethod(File.class, multidexcl, "exists", new XC_MethodHook() {
@Override
protected void beforeHookedMethod(MethodHookParam param) throws Throwable {
String path = ((File) param.thisObject).getAbsolutePath();
if (path.equals("/system/xbin/su")) {
param.setResult(new Boolean(false));
}
}
});
Note: Bootstrap/Android framework classes don’t require multidex scaﬀolding to hook.
Parasect
The ”Mushroom Pokémon”
Pokédex entries:
• Red/Blue
• A host-parasite pair in which the parasite mushroom has taken over the host bug.
Prefers damp places.
• Yellow
• The bug host is drained of energy by the mushrooms on its back.
They appear to do all the thinking.
• Gold/Stadium 2
• It stays mostly in dark, damp places, the preference not of the bug,
but of the big mushrooms on its back.
• Crystal
• When nothing’s left to extract from the bug,
the mushrooms on its back leave spores on the bug’s egg.
• Diamond/Platinum/Black(2)/White(2)/X
• A mushroom grown larger than the host’s body controls Parasect.
It scatters poisonous spores.
ParaSpectre
”There are only two hard things in Computer Science: cache invalidation and naming things.” -Phil Karlton
• para-, from Ancient Greek παρά (pará, ”beside; next to, near, from; against, contrary
to”)
• in(tro)spection, from Middle French, from Old French inspeccion, from Latin inspectiō
(”examination, inspection”), from the verb inspectō (“I inspect”), from spectō
(”I observe, I watch”), frequentive of speciō (”I look at”)
• spectre, from French spectre, from Latin spectrum (”appearance, apparition”)
• Parasect, from parasite and insect
• ParaSpectre, from all of the above
He was an original X11 designer/implementer, so you know he’s seen some shit.
ParaSpectre
OK, but seriously, what is it?
• A function/method hooking tool for Android
• Injects a JRuby interpreter into a target process