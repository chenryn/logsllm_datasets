# Ghost in the Droid: Possessing Android Applications with ParaSpectre
**Presenter:** Jeff Dileo (chaosdata)  
**Event:** DEFCON 25

## Introduction
Hello, I'm Jeff, and I have a unique interest: I enjoy finding creative ways to exploit poorly designed programming languages.

### Outline
- Introduction
- Motivation
- Original Plan
- Android Function Hooking 102
- ParaSpectre
- Demos
- Future Work

## Introduction
### What is This About?
- Injecting JRuby into Android applications to hook functionality.
- Why should you care?
  - If you reverse-engineer Android apps.
  - If you develop Android apps and are dissatisfied with the current debugging stack.
  - If you appreciate Ruby and/or REPLs (Read-Eval-Print Loops).

```ruby
$ irb
irb(main):001:0> puts "This is a REPL"
This is a REPL
=> nil
irb(main):002:0>
```

```python
$ python
Python 2.7.11 (default, Mar 1 2016, 18:47:52)
[GCC 4.2.1 Compatible Apple LLVM 6.1.0 (clang-602.0.53)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
>>> print "This is also a REPL"
This is also a REPL
>>>
```

## Motivation
- I was reverse-engineering multiple complex Android applications.
- One of these was a quirky Korean chat app primarily used by Japanese users.
- Writing hooks for this app was tedious, and it was challenging to decipher the nested, obfuscated objects.

## Original Plan
### REPL-ize
- Extract interesting functions and wrap them in REPLs.
- REPLs provide an interactive shell, allowing you to explore and manipulate the application's environment.

## Android Function Hooking 102
### LD_PRELOAD
- **Overview**: A traditional method for function hooking.
- **Usage**: `setprop wrap.LD_PRELOAD=/path/to/file.so`
- **Functionality**: Overrides dynamically linked native functions.
- **Requirements**: Root access.

#### Example
```c
#include <dlfcn.h>
#include <stdio.h>
#include <unistd.h>

static int (*_real_rand)(void) = NULL;

__attribute__((constructor))
static void setup() {
    _real_rand = (int(*)(void))dlsym(RTLD_NEXT, "rand");
}

int rand() {
    if (access(".ps3mode", F_OK) != -1) {
        return 4;
    }
    return (*_real_rand)();
}
```

### Debugging with JDWP
- **Java Debug Wire Protocol (JDWP)**: Provides actual debugging capabilities with a debugger.
- **Accessibility**: Exposed via ADB and usable from various frontends like Android Studio, jdb, and JSwat.
- **Features**: Lists all Java object instances, sets breakpoints, and allows field access and method invocation.
- **Requirements**: The app must be debuggable, which can be forced through various means.
- **Drawback**: Significantly slows down the app.

#### Example (Target)
```java
package trust.nccgroup.debugme;

import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.Toast;
import androidx.appcompat.app.AppCompatActivity;

public class MainActivity extends AppCompatActivity {
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        Button b = findViewById(R.id.button);
        b.setOnClickListener(new View.OnClickListener() {
            String msg = Utils.getMsg();

            @Override
            public void onClick(View v) {
                Toast.makeText(MainActivity.this, msg, Toast.LENGTH_LONG).show();
            }
        });
    }
}
```

#### Example (CLI)
```sh
$ adb jdwp 23817
^C
$ adb forward tcp:23817 jdwp:23817; jdb -attach 127.0.0.1:23817
Set uncaught java.lang.Throwable
Set deferred uncaught java.lang.Throwable
Initializing jdb ...
> stop in trust.nccgroup.debugme.MainActivity$1.onClick
Set breakpoint trust.nccgroup.debugme.MainActivity$1.onClick
>
Breakpoint hit: "thread=main", trust.nccgroup.debugme.MainActivity$1.onClick(), line=20 bci=0
main[1] eval android.os.Process.myUid()
android.os.Process.myUid() = 10167
main[1] set msg = "Hello, world! " + msg
msg = "Hello, world! " + msg = "Hello, world! These but the trappings and the suits of woe."
main[1] cont
```

### Frida
- **Overview**: Hooks functions by overwriting instruction memory.
- **Features**: Inspects active Java object instances, supports JavaScript or native code for function hooks.
- **Injection Methods**: Root daemon, LD_PRELOAD, modifying APK, or debugging.
- **Requirements**: Root access (unless modifying APK or debugging).

#### Example
```javascript
Java.perform(function() {
    var File = Java.use('java.io.File');
    File.exists.implementation = function() {
        if (this.path.value == '/system/xbin/su') {
            return false;
        }
        return this.exists();
    }
});
```

### Xposed Framework
- **Overview**: Modifies Zygote to load hook code early in the boot process.
- **API**: Registers further hooks within an application.
- **Challenges**: Requires reflection due to different classloaders.
- **Language**: Any language that compiles to Java/Dalvik bytecode.
- **Application**: Easily applied across multiple apps at startup.
- **Requirements**: Ability to modify the system image.

#### Example (Top-Level Scaffolding)
```java
public class XposedEntry implements IXposedHookLoadPackage {
    @Override
    public void handleLoadPackage(XC_LoadPackage.LoadPackageParam lpp) throws Throwable {
        if (!lpp.packageName.equals("...")) {
            return;
        }
        ClassLoader singledexcl = lpp.classLoader;
        try {
            // Hook logic here
        } catch (Throwable t) {
            // Handle exception
        }
    }
}
```

#### Example (Multidex Scaffolding)
```java
XposedHelpers.findAndHookMethod("android.app.Application",
    singledexcl, "attach", Context.class, new XC_MethodHook() {
    @Override
    protected void afterHookedMethod(XC_MethodHook.MethodHookParam param) throws Throwable {
        Context context = (Context) param.args[0];
        ClassLoader multidexcl = context.getClassLoader();
        try {
            // Additional hook logic
        } catch (NoSuchMethodError nsme) {
            // Pass
        } catch (Throwable t) {
            // Handle exception
        }
    }
});
```

#### Example (Main Hook)
```java
XposedHelpers.findAndHookMethod("...", multidexcl, "...",
    ...class, new XC_MethodHook() {
    @Override
    protected void beforeHookedMethod(MethodHookParam param) throws Throwable {
        super.beforeHookedMethod(param);
        // Pre-hook logic
    }

    @Override
    protected void afterHookedMethod(MethodHookParam param) throws Throwable {
        super.afterHookedMethod(param);
        // Post-hook logic
    }
});
```

#### Example (Actual Hook)
```java
XposedHelpers.findAndHookMethod(File.class, multidexcl, "exists", new XC_MethodHook() {
    @Override
    protected void beforeHookedMethod(MethodHookParam param) throws Throwable {
        String path = ((File) param.thisObject).getAbsolutePath();
        if (path.equals("/system/xbin/su")) {
            param.setResult(new Boolean(false));
        }
    }
});
```

## ParaSpectre
### Etymology
- **Para-**: From Ancient Greek παρά (pará), meaning "beside; next to, near, from; against, contrary to."
- **Introspection**: From Middle French, from Old French inspeccion, from Latin inspectiō ("examination, inspection"), from the verb inspectō ("I inspect"), from spectō ("I observe, I watch"), frequentive of speciō ("I look at").
- **Spectre**: From French spectre, from Latin spectrum ("appearance, apparition").
- **Parasect**: From parasite and insect.
- **ParaSpectre**: Combines all the above meanings.

### Overview
- **Definition**: A function/method hooking tool for Android.
- **Functionality**: Injects a JRuby interpreter into a target process, enabling dynamic and interactive function hooking.

Thank you for your attention. Let's dive into some demos and discuss future work.