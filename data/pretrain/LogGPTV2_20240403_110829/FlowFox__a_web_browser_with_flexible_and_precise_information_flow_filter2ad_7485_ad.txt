cost of FlowFox. During the compatibility experiment,
where FlowFox was browsing to 500 diﬀerent websites,
we measured the memory consumption for each site via
about:memory after the onload event. On average, Flow-
Fox incurred a memory overhead of 88%.
6. RELATED WORK
We discuss related work on (i) information ﬂow security
and speciﬁc enforcement mechanisms and (ii) general web
script security countermeasures.
Information Flow Security.
Information ﬂow security is an established research area,
and too broad to survey here. For many years, it was dom-
inated by research into static enforcement techniques. We
point the reader to the well-known survey by Sabelfeld and
Myers [38] for a discussion of general, static approaches to
information ﬂow enforcement.
Dynamic techniques have seen renewed interest in the last
decade. Le Guernic’s PhD thesis [28] gives an extensive sur-
vey up to 2007, but since then, signiﬁcant new results have
been achieved. Recent works propose run time monitors for
information ﬂow security, often with a particular focus on
JavaScript, or on the web context. Sabelfeld et al. have
proposed monitoring algorithms that can handle DOM-like
structures [37], dynamic code evaluation [3] and timeouts
[36]. In a very recent paper, Hedin and Sabelfeld [21] pro-
756pose dynamic mechanisms for all the core JavaScript lan-
guage features. Austin and Flanagan [4] have developed
alternative, sometimes more permissive techniques. These
run time monitoring based techniques are likely more eﬃ-
cient than the technique proposed in this paper, but they
lack the precision of secure multi-execution: such monitors
will block the execution of some non-interferent programs.
Secure multi-execution (SME) is another dynamic tech-
nique that was developed independently by several re-
searchers. Capizzi et al. [13] proposed shadow executions:
they propose to run two executions of processes for the H
(secret) and L (public) security level to provide strong con-
ﬁdentiality guarantees. They applied their technique also
to Mozilla Firefox but they multi-execute the entire browser
and hence can’t enforce the same script policies as Flow-
Fox can, as we discussed in Section 3.3. Devriese and
Piessens [18] were the ﬁrst to prove the strong soundness
and precision guarantees that SME oﬀers. They also report
on a JavaScript implementation that requires a modiﬁed vir-
tual machine, but without integrating it in a browser.
These initial results were improved and extended in sev-
eral ways: Kashyap et al. [27], generalize the technique of
secure multi-execution to a family of techniques that they
call the scheduling approach to non-interference, and they
analyze how the scheduling strategy can impact the secu-
rity properties oﬀered. Jaskelioﬀ and Russo [24] propose a
monadic library to realize secure multi-execution in Haskell,
and Barthe et al.
[9] propose a program transformation
that simulates SME. Bielova et al. [10] propose a variant
of secure multi-execution suitable for reactive systems such
as browsers. This paper develops the theory of SME for
reactive systems, but the implementation is only for a sim-
ple browser model written in OCaml. Finally, Austin and
Flanagan [5] develop a more eﬃcient implementation tech-
nique. Their multi-faceted evaluation technique could lead
to a substantial improvement in performance for FlowFox,
especially for policies with many levels.
Also static or hybrid techniques speciﬁcally for informa-
tion ﬂow security in JavaScript or in browsers have been
proposed, but these techniques either are quite restrictive
and/or can not handle the full JavaScript language. Bo-
hannan et al. [12, 11] deﬁne a notion of non-interference
for reactive systems, and show how a model browser can
be formalized as such a reactive system. Chugh et al. [14]
have developed a novel multi-stage static technique for en-
forcing information ﬂow security in JavaScript. BFlow [44]
provides a framework for building privacy-preserving web
applications and includes a coarse-grained dynamic infor-
mation ﬂow control monitor.
Other Web Script Security Countermeasures.
Information ﬂow security is one promising approach to
web script security, but two other general-purpose ap-
proaches have been applied to script security as well: isola-
tion and taint-tracking.
Isolation or sandboxing based approaches develop tech-
niques where scripts can be included in web pages with-
out giving them (full) access to the surrounding page and
the browser API. Several practical systems have been pro-
posed,
including ADSafe [15], Caja [31] and Facebook
JavaScript [19]. Maﬀeis et al. [29] formalize the key mech-
anisms underlying these sandboxes and prove they can be
used to create secure sandboxes. They also discuss several
other existing proposals, and we point the reader to their
paper for a more extensive discussion of work in this area.
Isolation is easier to achieve than non-interference, but it
is also more restrictive: often access needs to be denied to
make sure the script can not leak the information, but it
would be perfectly ﬁne to have the script use the informa-
tion locally in the browser.
Taint tracking is an approximation to information ﬂow
security, that only takes explicit ﬂows into account.
It
can be implemented more eﬃciently than dynamic infor-
mation ﬂow enforcement techniques, and several authors
have proposed taint tracking systems for web security. Two
representative examples are Xu et al. [43], who propose
taint-enhanced policy enforcement as a general approach to
mitigate implementation-level vulnerabilities, and Vogt et
al. [41] who propose taint tracking to defend against cross-
site scripting.
Besides these general alternative approaches, many ad-hoc
countermeasures for speciﬁc classes of web script security
problems have been proposed – because of space constraints,
we don’t provide a full list. We discussed the examples of
AdJail [40], SessionShield [33] and history sniﬃng [42] in the
paper.
7. CONCLUSIONS
We have discussed the design, implementation and evalu-
ation of FlowFox, a browser that extends Mozilla Firefox
with a general, ﬂexible and sound information ﬂow control
mechanism. FlowFox provides evidence that information
ﬂow control can be implemented in a full-scale web browser,
and that doing so, supports powerful security policies with-
out compromising compatibility.
All our research material – including the prototype imple-
mentation and the Selenium test cases – is available online at
http://distrinet.cs.kuleuven.be/software/FlowFox/.
8. ACKNOWLEDGMENTS
The authors thank Andrei Sabelfeld, Nataliia Bielova,
Fabio Massacci and the anonymous reviewers for their feed-
back on draft versions of this paper. The development of
FlowFox was strongly inﬂuenced by discussions with and
feedback from the WebSand and SPION project teams.
This research is partially funded by the Research Fund
KU Leuven, the EU-funded FP7 projects NESSoS and Web-
Sand and by the IWT-SBO project SPION. Dominique De-
vriese holds a Ph.D. fellowship of the Research Foundation
- Flanders (FWO).
With the ﬁnancial support from the Prevention of and
Fight against Crime Programme of the European Union
European Commission – Directorate-General Home Aﬀairs.
This publication reﬂects the views only of the authors, and
the European Commission cannot be held responsible for
any use which may be made of the information contained
therein.
9. REFERENCES
[1] D. Akhawe, A. Barth, P. E. Lam, J. Mitchell, and
D. Song. Towards a Formal Foundation of Web
Security. In Proceedings of the IEEE Computer
Security Foundations Symposium, pages 290–304,
2010.
757[2] P. Akritidis, M. Costa, M. Castro, and S. Hand.
[18] D. Devriese and F. Piessens. Noninterference Through
Baggy Bounds Checking: An Eﬃcient and
Backwards-Compatible Defense against
Out-of-Bounds Errors. In Proceedings of the USENIX
Security Symposium, pages 51–66, 2009.
Secure Multi-Execution. In Proceedings of the IEEE
Symposium on Security and Privacy, pages 109–124,
2010.
[19] Facebook. Fbjs.
[3] A. Askarov and A. Sabelfeld. Tight Enforcement of
http://developers.facebook.com/docs/fbjs/, 2011.
Information-Release Policies for Dynamic Languages.
In Proceedings of the IEEE Computer Security
Foundations Symposium, pages 43–59, 2009.
[4] T. H. Austin and C. Flanagan. Permissive Dynamic
Information Flow Analysis. In Proceedings of the ACM
SIGPLAN Workshop on Programming Languages and
Analysis for Security, pages 3:1–3:12, 2010.
[5] T. H. Austin and C. Flanagan. Multiple Facets for
Dynamic Information Flow. In Proceedings of the
ACM SIGPLAN-SIGACT Symposium on Principles of
Programming Languages, 2012.
[6] L. D. Baron. Preventing attacks on a user’s history
through css :visited selectors.
http://dbaron.org/mozilla/visited-privacy, 2010.
[7] A. Barth, C. Jackson, and J. C. Mitchell. Robust
Defenses for Cross-Site Request Forgery. In
Proceedings of the ACM Conference on Computer and
Communications Security, pages 75–88, 2008.
[8] A. Barth, C. Jackson, and J. C. Mitchell. Securing
Frame Communication in Browsers. In Proceedings of
the USENIX Security Symposium, 2008.
[9] G. Barthe, J. M. Crespo, D. Devriese, F. Piessens, and
E. Rivas. Secure Multi-Execution through Static
Program Transformation. Proceedings of the
International Conference on Formal Techniques for
Distributed Systems, pages 186–202, 2012.
[10] N. Bielova, D. Devriese, F. Massacci, and F. Piessens.
Reactive non-interference for a browser model. In
Proceedings of the International Conference on
Network and System Security, 2011.
[11] A. Bohannon and B. C. Pierce. Featherweight Firefox:
Formalizing the Core of a Web Browser. In
Proceedings of the USENIX Conference on Web
Application Development, pages 123–135, 2010.
[12] A. Bohannon, B. C. Pierce, V. Sj¨oberg, S. Weirich,
and S. Zdancewic. Reactive Noninterference. In
Proceedings of the ACM Conference on Computer and
Communications Security, pages 79–90, 2009.
[13] R. Capizzi, A. Longo, V. Venkatakrishnan, and
A. Sistla. Preventing Information Leaks through
Shadow Executions. In Proceedings of the Annual
Computer Security Applications Conference, pages
322–331, 2008.
[14] R. Chugh, J. A. Meister, R. Jhala, and S. Lerner.
Staged Information Flow for JavaScript. ACM
SIGPLAN Notices, 44(6):50–62, 2009.
[15] D. Crockford. Adsafe. http://www.adsafe.org/,
December 2009.
[16] M. Daniel, J. Honoroﬀ, and C. Miller. Engineering
Heap Overﬂow Exploits with JavaScript. In
Proceedings of the USENIX Workshop on Oﬀensive
Technologies, 2008.
[17] P. De Ryck, L. Desmet, P. Philippaerts, and
F. Piessens. A Security Analysis of Next Generation
Web Standards. Technical report, European Network
and Information Security Agency (ENISA), 2011.
[20] D. Flanagan. JavaScript: The Deﬁnitive Guide.
O’Reilly Media, Inc., 6th edition, 2011.
[21] D. Hedin and A. Sabelfeld. Information-Flow Security
for a Core of JavaScript. In Proceedings of the IEEE
Computer Security Foundations Symposium, 2012.
[22] W3c: Html5.
http://dev.w3.org/html5/spec/Overview.html.
[23] D. Jang, R. Jhala, S. Lerner, and H. Shacham. An
Empirical Study of Privacy-Violating Information
Flows in JavaScript Web Applications. In Proceedings
of the ACM Conference on Computer and
Communications Security, pages 270–283, 2010.
[24] M. Jaskelioﬀ and A. Russo. Secure Multi-Execution in
Haskell. In Proceedings of Andrei Ershov International
Conference on Perspectives of System Informatics,
2011.
[25] M. Johns. On JavaScript Malware and related threats
- Web page based attacks revisited. Journal in
Computer Virology, 4(3):161 – 178, August 2008.
[26] R. W. M. Jones and P. H. J. Kelly.
Backwards-compatible bounds checking for arrays and
pointers in C programs. In Proceedings of the
International Workshop on Automatic Debugging,
pages 13–26, 1997.
[27] V. Kashyap, B. Wiedermann, and B. Hardekopf.
Timing- and Termination-Sensitive Secure Information
Flow: Exploring a New Approach. In Proceedings of
the IEEE Conference on Security and Privacy, pages
413–428, 2011.
[28] G. Le Guernic. Conﬁdentiality Enforcement Using
Dynamic Information Flow Analyses. PhD thesis,
Kansas State University, 2007.
[29] S. Maﬀeis, J. C. Mitchell, and A. Taly. Object
Capabilities and Isolation of Untrusted Web
Applications. In Proceedings of the IEEE Symposium
on Security and Privacy, pages 125–140, 2010.
[30] J. Magazinius, A. Askarov, and A. Sabelfeld. A
Lattice-based Approach to Mashup Security. In
Proceedings of the ACM Symposium on Information,
Computer and Communications Security, pages 15–23,
2010.
[31] M. S. Miller, M. Samuel, B. Laurie, I. Awad, and
M. Stay. Caja: Safe active content in sanitized
javascript. http://google-caja.googlecode.com/
files/caja-spec-2008-01-15.pdf, January 2008.
[32] N. Nikiforakis, L. Invernizzi, A. Kapravelos,
S. Van Acker, W. Joosen, C. Kruegel, F. Piessens, and
G. Vigna. You Are What You Include: Large-scale
Evaluation of Remote JavaScript Inclusions. In
Proceedings of the ACM Conference on Computer and
Communications Security, 2012.
[33] N. Nikiforakis, W. Meert, Y. Younan, M. Johns, and
W. Joosen. SessionShield: Lightweight protection
against session hijacking. In Proceedings of the
International Symposium on Engineering Secure
Software and Systems, pages 87–100, 2011.
758[34] N. Provos, P. Mavrommatis, M. A. Rajab, and
F. Monrose. All Your iFRAMEs Point to Us. In
Proceedings of the USENIX Security Symposium,
pages 1–15, 2008.
[35] N. Provos, D. McNamee, P. Mavrommatis, K. Wang,
and N. Modadugu. The Ghost In The Browser
Analysis of Web-based Malware. In Proceedings of the
USENIX Workshop on Hot Topics in Understanding
Botnets, 2007.
[36] A. Russo and A. Sabelfeld. Securing Timeout
Instructions in Web Applications. In Proceedings of
the IEEE Computer Security Foundations Symposium,
pages 92–106, 2009.
[37] A. Russo, A. Sabelfeld, and A. Chudnov. Tracking
Information Flow in Dynamic Tree Structures. In
Proceedings of the European Symposium on Research
in Computer Security, pages 86–103, 2009.
[38] A. Sabelfeld and A. C. Myers. Language-Based
Information-Flow Security. IEEE Journal on Selected
Areas of Communications, 21(1):5–19, January 2003.
[39] K. Singh, A. Moshchuk, H. J. Wang, and W. Lee. On
the Incoherencies in Web Browser Access Control
Policies. In Proceedings of the IEEE Symposium on
Security and Privacy, pages 463–478, 2010.
[40] M. Ter Louw, K. T. Ganesh, and V. Venkatakrishnan.
Adjail: Practical Enforcement of Conﬁdentiality and
Integrity Policies on Web Advertisements. In
Proceedings of the USENIX Security Symposium,
pages 24–24, 2010.
APPENDIX
A. SCENARIOS
[41] P. Vogt, F. Nentwich, N. Jovanovic, E. Kirda,
C. Kr¨ugel, and G. Vigna. Cross Site Scripting
Prevention with Dynamic Data Tainting and Static
Analysis. In Proceedings of the Annual Network &
Distributed System Security Symposium, 2007.
[42] Z. Weinberg, E. Y. Chen, P. R. Jayaraman, and
C. Jackson. I Still Know What You Visited Last
Summer: User interaction and side-channel attacks on
browsing history. In Proceedings of the IEEE
Symposium on Security and Privacy, 2011.
[43] W. Xu, S. Bhatkar, and R. Sekar. Taint-Enhanced
Policy Enforcement: A Practical Approach to Defeat a
Wide Range of Attacks. In Proceedings of the USENIX
Security Symposium, pages 121–136, 2006.
[44] A. Yip, N. Narula, M. Krohn, and R. Morris.
Privacy-preserving browser-side scripting with BFlow.
In Proceedings of the ACM European Conference on
Computer Systems, pages 233–246. ACM, 2009.
[45] Y. Younan, W. Joosen, and F. Piessens. Runtime
countermeasures for code injection attacks against C
and C++ programs. ACM Computing Surveys,
44(3):17:1–17:28, 2012.
[46] Y. Younan, P. Philippaerts, L. Cavallaro, R. Sekar,
F. Piessens, and W. Joosen. PAriCheck: An Eﬃcient
Pointer Arithmetic Checker for C Programs. In
Proceedings of the ACM Symposium on Information,
Computer and Communications Security, pages
145–156, 2010.
Category
Site
Rank Use Case Scenario
Search Engine
Google
Social Network Site
Facebook
Web Mail
Yahoo!
Wiki
Wikipedia
Blogging
Blogspot
1
2
4
6
8
Online Sales
Amazon
11
Tracking
Microsoft
31
Tracking
The Sun
547
The user types – through keyboard simulation – in a keyword, clicks on a
random search term in the auto-completed result list and waits for the result
page.
The user clicks on a friend in friends list and types – through keyboard simu-
lation – a multi-line private message. Next, the user clicks on the send button.
The user click on the ’Compose Message’ button and ﬁlls in the to and subject
ﬁelds. Next, he types in the message body and ends with clicking on the send
button. The user waits until he gets conﬁrmation by the web mail provider
that the message is sent successfully.
The user opens the main page and clicks on the search bar. Next, the user
types – through keyboard simulation – the ﬁrst characters of a keyword. The
user clicks on the ﬁrst result and waits until a speciﬁc piece of text is found on
the page (i.e. the page successfully loaded).
The user opens the dashboard and create a new blog post. The user waits until
the interface is completely loaded and types – through keyboard simulation –
a title and a message. Next, the user saves the message and closes the editor.
The user clicks in the search bar and types – through keyboard simulation –
the beginning of a book title. The user clicks on the ﬁrst search result within
the auto-completed result list and adds the book to the shopping cart. Finally
the user deletes the book again from the cart.
The user selects random pieces of text from within the home page and clicks on
several objects (e.g. menu items). The tracking library will leak the selected
locations.
The user selects random pieces of text from within the home page. The tracking
library will leak the document title and selected text.
759