                    -1008, 1784, -1878, -1504, 74, 1702, -1138, 1118, -1654, 446, -418, 1364, -2446, -664, -1402, -2316,
                    1148, -3186, -1228, 1892, -1120, -736, 14, -1852, 2680, -814, 2716, -676, -316, 542, -124, -2652, -960,
                    -1342, 968, 1238, 2224, -460, 488, -66, 128, 776, -1180, 2110, 314, 782, 74, 1922, 2188, -2166, 1646,
                    -1956, -382, 1496, -1632, 182, -1920, 284, 1100, -1218, -1560, -496, -412, -570, 1814, -948, -310, 38,
                    -630, -490, 350, -2850, -2910, 290, 1070, 1286, 1720, 2296, -382, 302, -1470, -2964, -2076, -2682,
                    -1224, -2238, -982, -1404, 2242, -496, -2958, -2220, -2520, -544, -2148, -112, -460, 146, -1914, -2982,
                    1124, -2514, 566, -840, -940, -1188, -2238, 284, -3012, 1316, 398, 740, -136, 1936, -984, -420, 1502,
                    -2304, 164, -192, -1126, 1088, 206, 1462, -1884, 1930, -340, -2658, -324, 506, 1118, -862, 1280, -286,
                    -2220, -118, -118, -2046, 194, 440, 2152, 122, -3060, 224, -274, 848, 2422, -2508, -1728, -172, -868,
                    -534, -1536, 602, 254, -352, 2050, 1028, -3018, -912, -2244, -2346, -1380, 872, 920, -76, 782, -244,
                    -2670, -3030, -1080, 1894, -432, 692, -1980, -1102, -3402, 812, 1984, 182, -154, -654, -688, -3144,
                    2014, -2658, -1242, 218, 1936, -1006, 2002, -106, 2014, -2382, 1408, 1858, -942, -3066, -1156, -1212,
                    86, -358, 1462, -634, -1248, 188, -1014, -2658, -390, 1498, 2308, -1078, -1200, -1122, -1230, -1426,
                    -952, 1796, 1348, 1582, 2206, -1392, -3408, 578, -478, -3360, -76, -1534, -250, -1552, 1034, -1480, 308,
                    -418, 1190, 386, 2, 1930, 134, 1978, -106, -1074, -1596, -316, 2668, -2316, -1014, 2008, -2202, -1378,
                    44, 38, 380, -2976, 362, -2466, -2400, -2028, 1732, -1378, -556, -46, -1726, 1238, 974, -1378, 818,
                    -1726, 1432, -1750, -106, 758, 1798, 1294, -2502, -898, 1046, -1270, -1534, -2622, -1324, -376, -1600,
                    1154, -1168, 656, -100, -1036, 2116, 1864, 356, -1000, -1266, 1720, 1546, 140, 428, -826, -322, -1182,
                    1570, -226, 1792, -538, -364, -490, -16, 260, 872, -538, 50, 1868, -844, 602, -772, -1054, -484, 8,
                    -1360, -1144, -1780, 1240, 116, -1240, 2062, -1498, -16, -1816, 500, 1132, -640, -942, 134, -3228, -964,
                    380, 820, 428, -1828, 1252]
    cond_offsets = [658, 1342, 1348, 2170, 2838, 394, 1642, 3612, 1138, 2254]
    cond_targets = [[-196, -76], [1076, 2302], [2284, 692], [-1348, -580], [-630, -1116], [3016, 2584], [-1600, 1528],
                    [-2916, -1368], [-142, 2212], [-1510, 904]]
    # 读原始程序
    repair = open(r"E:\Ctf\XNUCA2020\repair\repair\repair", 'rb')
    repair_bytes = repair.read()
    repair.close()
    # 寻找桩
    stub = bytes([0xbf, 0xb4, 0x01, 0xde])
    stub_pos = 0
    stubs = [] 
    while True:
        stub_pos = repair_bytes.find(stub, stub_pos)
        if stub_pos == -1:
            break
        stubs.append(stub_pos)
        stub_pos += len(stub)
    # 把所有桩之间的代码存起来
    codes = {0xA64: repair_bytes[0xA64: 0xA66]}
    for i in range(len(stubs) - 1):
        code_start = stubs[i] + 4
        code_len = stubs[i + 1] - code_start
        codes[code_start] = repair_bytes[code_start: code_start + code_len] 
    # 指令类型
    class inst_type(Enum):
        UNK = 0
        INS = 1, # 原指令
        COND = 2, # 条件跳转
        B = 3 # 跳转
    # 自定义指令
    class instruction(object):
        def __init__(self):
            self.address = None
            self.code = None
            self.type = inst_type.UNK
            self.tag = False
    # 在所有指令里寻找某地址
    def ins_find(ins, pc):
        for inst in ins:
            if inst.type == inst_type.INS and inst.address == pc:
                return inst
        return None
    # 提取程序流
    def extract_procedures(pc, ins):
        while True:
            if pc in stubs: 
                # 如果是桩
                sig_addr = pc + 2
                sig_offset = sig_addr - 0xA64
                if sig_offset in jump_offsets:
                    # 指向下一步
                    pc = jump_targets[jump_offsets.index(sig_offset)] + sig_addr