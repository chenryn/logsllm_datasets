### 16.4 Wrapping Up

In this module, we covered various methods for performing privilege escalation attacks on Windows systems. We began by exploring both manual and automated enumeration techniques to identify sensitive information and establish situational awareness. We then discussed three different methods to elevate our privileges by abusing Windows services. In the final learning unit, we explored how to abuse scheduled tasks and discussed the types of exploits that can lead to privilege escalation.

The methods covered in this module are some of the most common for privilege escalation on Windows. However, there are numerous other vectors we can leverage to elevate our privileges, such as privileged file writes. Privilege escalation is an ever-evolving landscape, with new vectors and vulnerabilities continuously being discovered and developed. Nevertheless, in penetration tests, we may encounter situations where successful privilege escalation is not possible due to a strong security posture or advanced security technologies on the target system. In these cases, we should leverage the methods and techniques learned in other modules and try to attack other systems and services.

**References:**
- (jlajara Gitlab, 2020), https://jlajara.gitlab.io/Potatoes_Windows_Privesc
- (Github, 2022), https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation.md#eop---privileged-file-write

---

### 17 Linux Privilege Escalation

In this learning module, we will cover the following learning units:
- Enumerating Linux
- Exposed Confidential Information
- Insecure File Permissions
- Abusing System Linux Components

As with many other attack techniques, escalating privileges requires us to collect knowledge about the target. This is accomplished by enumerating the operating system for any kind of misconfiguration or software vulnerability that can be leveraged for our purposes.

According to the MITRE ATT&CK Framework, privilege escalation is a tactic comprising different techniques aimed at leveraging user permissions to access restricted resources. In this module, we will focus on Linux-based targets. We will explore how to enumerate Linux machines and understand Linux privileges. We will then demonstrate common Linux-based privilege escalation techniques based on insecure file permissions and misconfigured system components.

#### 17.1 Enumerating Linux

This learning unit covers the following objectives:
- Understand files and users' privileges on Linux
- Perform manual enumeration
- Conduct automated enumeration

In this unit, we will start with a refresher on the Linux privilege scheme, followed by performing manual and automated enumeration techniques.

##### 17.1.1 Understanding Files and Users Privileges on Linux

Before discussing specific privilege escalation techniques, let's recap Linux privileges and access controls. One of the defining features of Linux and other UNIX derivatives is that most resources, including files, directories, devices, and even network communications, are represented in the filesystem. Colloquially, "everything is a file."

Every file (and by extension, every element of a Linux system) abides by user and group permissions based on three primary properties: read (symbolized by `r`), write (symbolized by `w`), and execute (symbolized by `x`). Each file or directory has specific permissions for three categories of users: the owner, the owner group, and others.

Each permission (`rwx`) allows the designated collection of users to perform different actions depending on whether the resource is a file or a directory. For files, `r` allows reading the file content, `w` allows changing its content, and `x` allows the file to be run. A directory is handled differently from a file. Read access gives the right to consult the list of its contents (files and directories). Write access allows creating or deleting files. Finally, execute access allows crossing through the directory to access its contents (using the `cd` command, for example). Being able to cross through a directory without being able to read it gives the user permission to access known entries, but only by knowing their exact name.

Let's examine a simple combination of these file permissions using a real-world example on our local Kali machine, which is based on the Linux Debian distribution.

```bash
kali@kali:~$ ls -l /etc/shadow
-rw-r----- 1 root shadow 1751 May 2 09:31 /etc/shadow
```

**Listing 456 - Inspecting file permissions and users ownership**

For each user category, the three different access permissions are displayed. The very first hyphen describes the file type, which we can safely ignore. The next three characters display the file owner (root) permissions, which are `rw-`, meaning the owner has read and write, but no execute privileges. Next, the `shadow` group owner has only been given read access, as the write and execute flags are unset. Finally, the others group has not been granted any access rights for this file.

We can now apply this introductory knowledge about Linux file permissions while performing privilege escalation enumeration in the next section.

##### 17.1.2 Manual Enumeration

Manually enumerating Linux systems can be time-consuming, but this approach allows for a more controlled outcome because it helps identify more peculiar privilege escalation methods that are often overlooked by automated tools. Automated enumeration cannot replace manual investigation because the customized settings of our target environments are likely to be exactly those that are misconfigured.

Some of the commands in this module may require minor modifications depending on the target operating system version. Additionally, not all the commands presented in this section will be reproducible on the dedicated clients.

When gaining initial access to a target, one of the first things we should identify is the user context. We can use the `id` command to gather user context information. We can do so by connecting through SSH as the `joe` user to our Debian lab machine.

```bash
joe@debian-privesc:~$ id
uid=1000(joe) gid=1000(joe)
groups=1000(joe),24(cdrom),25(floppy),29(audio),30(dip),44(video),46(plugdev),109(netdev),112(bluetooth),116(lpadmin),117(scanner)
```

**Listing 457 - Getting information about the current user**

The output reveals that we are operating as the `joe` user, which has a User Identifier (UID) and Group Identifier (GID) of 1000. The user `joe` is also part of other groups that are out of scope for this module.

To enumerate all users, we can simply read the contents of the `/etc/passwd` file.

```bash
joe@debian-privesc:~$ cat /etc/passwd
root:x:0:0:root:/root:/bin/bash
daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin
bin:x:2:2:bin:/bin:/usr/sbin/nologin
sys:x:3:3:sys:/dev:/usr/sbin/nologin
...
www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin
...
dnsmasq:x:106:65534:dnsmasq,,,:/var/lib/misc:/usr/sbin/nologin
usbmux:x:107:46:usbmux daemon,,,:/var/lib/usbmux:/usr/sbin/nologin
rtkit:x:108:114:RealtimeKit,,,:/proc:/usr/sbin/nologin
sshd:x:109:65534::/run/sshd:/usr/sbin/nologin
...
Debian-gdm:x:117:124:Gnome Display Manager:/var/lib/gdm3:/bin/false
joe:x:1000:1000:joe,,,:/home/joe:/bin/bash
systemd-coredump:x:999:999:systemd Core Dumper:/:/usr/sbin/nologin
eve:x:1001:1001:,,,:/home/eve:/bin/bash
```

**Listing 458 - Getting information about the users**

The `passwd` file lists several user accounts, including accounts used by various services on the target machine such as `www-data` and `sshd`. This indicates that a web server and an SSH server are likely installed on the system.

We can now zoom in on our current user’s data:
- **Login Name**: “joe” - Indicates the username used for login.
- **Encrypted Password**: “x” - This field typically contains the hashed version of the user’s password. In this case, the value `x` means that the entire password hash is contained in the `/etc/shadow` file.
- **UID**: “1000” - Aside from the root user that has always a UID of 0, Linux starts counting regular user IDs from 1000. This value is also called the real user ID.
- **GID**: “1000” - Represents the user’s specific Group ID.
- **Comment**: “joe,,,” - This field generally contains a description about the user, often simply repeating username information.
- **Home Folder**: “/home/joe” - Describes the user’s home directory prompted upon login.
- **Login Shell**: “/bin/bash” - Indicates the default interactive shell, if one exists.

In addition to the `joe` user, we also notice another user named `eve`, and we can infer this is a standard user since it has a configured home folder `/home/eve`. On the other hand, system services are configured with the `/usr/sbin/nologin` home folder, where the `nologin` statement is used to block any remote or local login for service accounts.

Enumerating all users on a target machine can help identify potential high-privilege user accounts we could target in an attempt to elevate our privileges.

Next, a machine’s hostname can often provide clues about its functional roles. More often than not, the hostnames will include identifiable abbreviations such as `web` for a web server, `db` for a database server, `dc` for a domain controller, etc.

On most Linux distributions, we can find the hostname embedded in the command prompt. However, we should rely only on system commands to retrieve the target’s information, as sometimes the prompt’s text can be deceiving. We can discover the hostname with the aptly-named `hostname` command.

```bash
joe@debian-privesc:~$ hostname
debian-privesc
```

**Listing 459 - Getting information about the hostname**

Enterprises often enforce a naming convention scheme for hostnames, so they can be categorized by location, description, operating system, and service level. In our case, the hostname is comprised of only two parts: the OS type and the description.

Identifying the role of a machine can help us focus our information gathering efforts by increasing the context surrounding the host.

At some point during the privilege escalation process, we may need to rely on kernel exploits that specifically exploit vulnerabilities in the core of a target’s operating system. These types of exploits are built for a very specific type of target, specified by a particular operating system and version combination. Since attacking a target with a mismatched kernel exploit can lead to system instability or even a crash, we must gather precise information about the target.

Any system instability caused by our penetration testing activity would likely alert system administrators prior to any SOC team. For this reason, we should be twice as careful when dealing with kernel exploits and, when possible, test the exploits in a local environment beforehand.

The `/etc/issue` and `/etc/*-release` files contain information about the operating system release and version. We can also run the `uname -a` command:

```bash
joe@debian-privesc:~$ cat /etc/issue
Debian GNU/Linux 10 \n \l

joe@debian-privesc:~$ cat /etc/os-release
PRETTY_NAME="Debian GNU/Linux 10 (buster)"
NAME="Debian GNU/Linux"
VERSION_ID="10"
VERSION="10 (buster)"
VERSION_CODENAME=buster
ID=debian
HOME_URL="https://www.debian.org/"
SUPPORT_URL="https://www.debian.org/support"
BUG_REPORT_URL="https://bugs.debian.org/"

joe@debian-privesc:~$ uname -a
Linux debian-privesc 4.19.0-21-amd64 #1 SMP Debian 4.19.249-2 (2022-06-30) x86_64 GNU/Linux
```

**Listing 460 - Getting the version of the running operating system and architecture**

The `issue` and `os-release` files located in the `/etc` directory contain the operating system version (Debian 10) and release-specific information, including the distribution codename (buster). The `uname -a` command outputs the kernel version (4.19.0) and architecture (x86_64).

Next, let’s explore which running processes and services may allow us to elevate our privileges. For this to occur, the process must run in the context of a privileged account and must either have insecure permissions or allow us to interact with it in unintended ways.

We can list system processes (including those run by privileged users) with the `ps` command. We’ll use the `a` and `x` flags to list all processes with or without a TTY and the `u` flag to list the processes in a user-readable format.

```bash
joe@debian-privesc:~$ ps aux
USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
root         1  0.0  0.4 169592 10176 ?        Ss   Aug16   0:02 /sbin/init
...
colord     752  0.0  0.6 246984 12424 ?        Ssl  Aug16   0:00 /usr/lib/colord/colord
Debian-+   753  0.0  0.2 157188  5248 ?        Sl  Aug16   0:00 /usr/lib/dconf/dconf-service
root       477  0.0  0.5 179064 11060 ?        Ssl  Aug16   0:00 /usr/sbin/cups-browsed
root       479  0.0  0.4 236048  9152 ?        Ssl  Aug16   0:00 /usr/lib/policykit-1/polkitd --no-debug
root       486  0.0  1.0 123768 22104 ?        Ssl  Aug16   0:00 /usr/bin/python3 /usr/share/unattended-upgrades/unattended-upgrade-shutdown --wait-for-signal
root       510  0.0  0.3 13812   7288 ?        Ss   Aug16   0:00 /usr/sbin/sshd -D
root       512  0.0  0.3 241852  8080 ?        Ssl  Aug16   0:00 /usr/sbin/gdm3
root       519  0.0  0.4 166764  8308 ?        Sl  Aug16   0:00 gdm-session-worker [pam/gdm-launch-environment]
root       530  0.0  0.2 11164   4448 ?        Ss   Aug16   0:03 /usr/sbin/apache2 -k start
root      1545  0.0  0.0 0 0 ?        I    Aug16   0:00 [kworker/1:1-events]
root      1653  0.0  0.3 14648   7712 ?        Ss  01:03   0:00 sshd: joe [priv]
root      1656  0.0  0.0 0 0 ?        I    01:03   0:00 [kworker/1:2-events_power_efficient]
joe       1657  0.0  0.4 21160   8960 ?        Ss  01:03   0:00 /lib/systemd/systemd --user
joe       1658  0.0  0.1 170892  2532 ?        S    01:03   0:00 (sd-pam)
joe       1672  0.0  0.2 14932   5064 ?        S    01:03   0:00 sshd: joe@pts/0
joe       1673  0.0  0.2 8224    5020 pts/0    Ss   01:03   0:00 -bash
root      1727  0.0  0.0 0 0 ?        I    03:00   0:00 [kworker/0:0-ata_sff]
root      1728  0.0  0.0 0 0 ?        I    03:06   0:00 [kworker/0:2-ata_sff]
joe       1730  0.0  0.1 10600   3028 pts/0    R+   03:10   0:00 ps axu
```

**Listing 461 - Getting a list of running processes on Linux**

The output lists several processes running as root that are worth researching for possible vulnerabilities. We’ll notice the `ps` command we ran is also listed in the output, owned by the current user. We can also filter the specific user-owned process from the output with the appropriate username.

The next step in our analysis of the target host is to review available network interfaces, routes, and open ports. This information can help us determine if the compromised target is connected to multiple networks and therefore could be used as a pivot. The presence of specific virtual interfaces may also indicate the existence of virtualization or antivirus software.

**References:**
- (MITRE, 2021), https://attack.mitre.org/tactics/TA0004
- (Arch Linux, 2022), https://wiki.archlinux.org/index.php/users_and_groups
- (Peter Tobias, 2003), https://linux.die.net/man/1/hostname
- (David MacKenzie, 2003), https://linux.die.net/man/1/uname
- (Linus Åkesson, 2018), https://www.linusakesson.net/programming/tty/
- (Wikipedia, 2022), https://en.wikipedia.org/wiki/Kernel_(operating_system)

---

**PWK - Copyright © 2023 OffSec Services Limited. All rights reserved.**
Made in Morocco
Penetration Testing with Kali Linux