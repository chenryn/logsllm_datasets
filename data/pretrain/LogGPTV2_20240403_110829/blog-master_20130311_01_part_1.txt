## PostgreSQL 触发器 用法详解 1    
### 作者                                       
digoal                                        
### 日期                                      
2013-03-11                                         
### 标签                                      
PostgreSQL , trigger , 触发器 , 用法详解                                                                           
----                                      
## 背景               
触发器在数据库中的应用非常广泛，例如在发生insert, update, delete, truncate时触发，调用事先写好的触发器函数。    
触发器函数可以使用plpgsql , c , python , perl , java等语言编写。     
触发器函数中支持很多内置的变量，可以干很多事情。    
本文将以PostgreSQL 9.2为例, 介绍触发器的使用. 分两部分.   
第二部分链接 :   
[《PostgreSQL 触发器 用法详解 2》](20130311_02.md)     
## 内容简介  
一、  
1\. 什么是触发器? 触发器有什么用? 创建触发器的语法?  
2\. 什么是触发器函数, 触发器函数可以用哪些语言编写?  
3\. 触发器有哪些分类?  
4\. 同一个表或视图上可以建多少个触发器? 如果一个表或视图上有多个触发器, 调用顺序如何决定?  
5\. 同一个触发器函数可以被多个触发器调用吗? 触发器函数的返回类型时什么? 触发器函数的返回值是否会影响下一个触发器函数或者被操作的行的数据? NEW 或者OLD record修改后会带来什么影响? 哪些触发器函数的返回值没有意义?  
6\. 触发器函数的返回值与返回行数的关系, 与变量FOUND, ROW_COUNT, RETURNING的关系.  
7\. 触发器的延时属性和状态.  
8\. 可以在系统表或系统视图上创建触发器吗?  
二、  
以plpgsql语言为例, 讲解触发器函数.  
9\. 触发器函数的返回值.  
10\. 触发器函数的参数.  
11\. 触发器函数中的变量与传递.  
12\. 触发器函数的数据可视与什么有关?  
13\. 触发器会无限递归吗? 如何避免?  
14\. 触发条件与性能.  
15\. 加入触发器后的事务特性.  
16\. 触发器的返回值是如何影响returning的结果的?  
## 正文  
### 一、  
## 1. 什么是触发器? 触发器有什么用? 创建触发器的语法?  
定义还是用原文比较好 :   
```
A trigger is a specification that the database should automatically execute a particular function whenever a certain type of operation is performed.   
Triggers can be attached to both tables and views.   
```
创建触发器的语法如下 :   
```
Command:     CREATE TRIGGER  
Description: define a new trigger  
Syntax:  
CREATE [ CONSTRAINT ] TRIGGER name { BEFORE | AFTER | INSTEAD OF } { event [ OR ... ] }  
    ON table_name  
    [ FROM referenced_table_name ]  
    { NOT DEFERRABLE | [ DEFERRABLE ] { INITIALLY IMMEDIATE | INITIALLY DEFERRED } }  
    [ FOR [ EACH ] { ROW | STATEMENT } ]  
    [ WHEN ( condition ) ]  
    EXECUTE PROCEDURE function_name ( arguments )  
where event can be one of:  
    INSERT  
    UPDATE [ OF column_name [, ... ] ]  
    DELETE  
    TRUNCATE  
```
## 2. 什么是触发器函数? 触发器函数可以用哪些语言编写?  
给表或者视图创建触发器时需要指定这个触发器被触发时执行的函数, 这个函数就是触发器函数.  
触发器函数的返回类型为trigger, 如果需要给触发器函数传入参数, 不能定义在触发器函数的参数列表中, 而是通过其他方式传入(TriggerData数据结构).  
例如使用plpgsql写的触发器函数, 通过变量TG_ARGV[]来接收传入的变量值.   
```
The trigger function must be defined before the trigger itself can be created.   
The trigger function must be declared as a function taking no arguments and returning type trigger.   
(The trigger function receives its input through a specially-passed TriggerData structure, not in the form of ordinary function arguments.)  
```
TriggerData数据结构 :   
```
00029 typedef struct TriggerData  
00030 {  
00031     NodeTag     type;  
00032     TriggerEvent tg_event;  
00033     Relation    tg_relation;  
00034     HeapTuple   tg_trigtuple;  
00035     HeapTuple   tg_newtuple;  
00036     Trigger    *tg_trigger;  
00037     Buffer      tg_trigtuplebuf;  
00038     Buffer      tg_newtuplebuf;  
00039 } TriggerData;  
```
Trigger数据结构, 传入的参数数据结构 :   
```
00023 typedef struct Trigger  
00024 {  
00025     Oid         tgoid;          /* OID of trigger (pg_trigger row) */  
00026     /* Remaining fields are copied from pg_trigger, see pg_trigger.h */  
00027     char       *tgname;  
00028     Oid         tgfoid;  
00029     int16       tgtype;  
00030     char        tgenabled;  
00031     bool        tgisinternal;  
00032     Oid         tgconstrrelid;  
00033     Oid         tgconstrindid;  
00034     Oid         tgconstraint;  
00035     bool        tgdeferrable;  
00036     bool        tginitdeferred;  
00037     int16       tgnargs;  
00038     int16       tgnattr;  
00039     int16      *tgattr;  
00040     char      **tgargs;  
00041     char       *tgqual;  
00042 } Trigger;  
```
触发器函数可以使用系统自带的过程语言(例如plpgsql, pltcl, plperl, plpython)来写, 也可以使用C来写.  
后面的实例将使用plpgsql来写.  
## 3. 触发器有哪些分类?  
3\.1 表  
```  
-- On tables, triggers can be defined to execute either before or after any INSERT, UPDATE, or DELETE operation, either once per modified row, or once per SQL statement.   
UPDATE triggers can moreover be set to fire only if certain columns are mentioned in the SET clause of the UPDATE statement.   
Triggers can also fire for TRUNCATE statements.   
If a trigger event occurs, the trigger's function is called at the appropriate time to handle the event.  
```  
表触发器的创建分类 :   
```  
(before | after) (INSERT | UPDATE | DELETE) (FOR EACH ROW) (WHEN NEW.? and,or OLD.? ... other boolean express ....)  
(before | after) (INSERT | UPDATE | DELETE | TRUNCATE) (FOR EACH STATEMENT) (WHEN BOOLEAN express except NEW or OLD or columns)  
```  
3\.2 视图  
```  
-- On views, triggers can be defined to execute instead of INSERT, UPDATE, or DELETE operations.   
INSTEAD OF triggers are fired once for each row that needs to be modified in the view.   
It is the responsibility of the trigger's function to perform the necessary modifications to the underlying base tables and, where appropriate, return the modified row as it will appear in the view.   
Triggers on views can also be defined to execute once per SQL statement, before or after INSERT, UPDATE, or DELETE operations.  
```  
视图触发器的创建分类 :   
```  
(INSTEAD OF) (INSERT | UPDATE | DELETE) (FOR EACH ROW) (WHEN NEW.? and,or OLD.? ... other boolean express ....)  
(before | after) (INSERT | UPDATE | DELETE) (FOR EACH STATEMENT) (WHEN BOOLEAN express except NEW or OLD or columns)  
```  
分类总结如下 :   
When|	Event|	Row-level|	Statement-level  
---|---|---|---  
BEFORE	|INSERT/UPDATE/DELETE|	Tables|	Tables and views  
TRUNCATE|	—	|Tables| -   
AFTER|	INSERT/UPDATE/DELETE|	Tables|	Tables and views  
TRUNCATE|	—	|Tables| -  
INSTEAD OF|	|INSERT/UPDATE/DELETE|	Views|	—  
TRUNCATE|	|—|	—| -   
## 4. 同一个表或视图上可以建多个触发器吗? 如果一个表或视图上有多个触发器, 调用顺序如何决定?  
同一个表或视图上可以创建多个触发器, 调用的顺序和触发器的类型有关.   
4\.1 表上各种触发器的调用先后顺序如下 :   
```  
1. before for each statement  
2. before for each row  
3. after for each row  
4. after for each statement  
```  
4\.2 视图上各种触发器的调用先后顺序如下 :   
```  
1. before for each statement  
2. instead for each row  
3. after for each statement  
```  
4\.3 同类触发器如果有多个, 调用顺序则和触发器的名字有关, 按照名字的排序进行调用.  
举例, 使用raise notice TG_NAME跟踪调用顺序 :   
4\.3\.1 表举例  
-- 创建测试表  
```  
postgres=# create table digoal (id int);  
CREATE TABLE  
```  
-- 创建触发器函数  
```  
postgres=# create or replace function debug() returns trigger as $$  
declare   
begin    
  raise notice '%', TG_NAME;  
  return new;  
end;  
$$ language plpgsql;  
CREATE FUNCTION  
```  
-- 创建4种类型的触发器  
```  
postgres=# create trigger tg1 before insert on digoal for each statement execute procedure debug();  
CREATE TRIGGER  
postgres=# create trigger tg2 before insert on digoal for each row execute procedure debug();  
CREATE TRIGGER  
postgres=# create trigger tg3 after insert on digoal for each row execute procedure debug();  
CREATE TRIGGER  
postgres=# create trigger tg4 after insert on digoal for each statement execute procedure debug();  
CREATE TRIGGER  
```  
-- 创建多个同类型的触发器  
```  
postgres=# create trigger tg01 before insert on digoal for each statement execute procedure debug();  
CREATE TRIGGER  
postgres=# create trigger tg02 before insert on digoal for each row execute procedure debug();  
CREATE TRIGGER  
postgres=# create trigger tg03 after insert on digoal for each row execute procedure debug();  
CREATE TRIGGER  
postgres=# create trigger tg04 after insert on digoal for each statement execute procedure debug();  
CREATE TRIGGER  
```  
-- 插入测试 :   
```  
postgres=# insert into digoal values (1);  
NOTICE:  00000: tg01  -- 第1被触发的是tg01, before for each statement, 同类触发器tg01按字母顺序排在tg1的前面.  
LOCATION:  exec_stmt_raise, pl_exec.c:2840  
NOTICE:  00000: tg1  -- 第2被触发的是tg1, before for each statement  
LOCATION:  exec_stmt_raise, pl_exec.c:2840  
NOTICE:  00000: tg02  -- 第3被触发的是tg02, before for each row, 同类触发器tg02按字母顺序排在tg2的前面.  
LOCATION:  exec_stmt_raise, pl_exec.c:2840  
NOTICE:  00000: tg2  -- 第4被触发的是tg2, before for each row  
LOCATION:  exec_stmt_raise, pl_exec.c:2840  
NOTICE:  00000: tg03  -- 第5被触发的是tg03, after for each row, 同类触发器tg03按字母顺序排在tg3的前面.  
LOCATION:  exec_stmt_raise, pl_exec.c:2840  
NOTICE:  00000: tg3  -- 第6被触发的是tg3, after for each row  
LOCATION:  exec_stmt_raise, pl_exec.c:2840  
NOTICE:  00000: tg04  -- 第7被触发的是tg04, after for each statement, 同类触发器tg04按字母顺序排在tg4的前面.  
LOCATION:  exec_stmt_raise, pl_exec.c:2840  
NOTICE:  00000: tg4  -- 第8被触发的是tg4, after for each statement  
LOCATION:  exec_stmt_raise, pl_exec.c:2840  
INSERT 0 1  
```  
4\.3\.2 视图举例  
-- 创建测试视图  
```  
postgres=# create view v_digoal as select * from digoal;  
CREATE VIEW  
```  
-- 创建触发器  
```  
postgres=# create trigger tg1 before insert on v_digoal for each statement execute procedure debug();  
CREATE TRIGGER  
postgres=# create trigger tg2 instead of insert on v_digoal for each row execute procedure debug();  
CREATE TRIGGER  