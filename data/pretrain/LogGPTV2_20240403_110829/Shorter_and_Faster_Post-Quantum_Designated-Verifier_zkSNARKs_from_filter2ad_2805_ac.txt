the lattice dimension 𝑛 needs to be at least 104 at the 128-bit secu-
rity level (based on [1]). A single ciphertext is over 350 KB in this
setting. This is a lower bound on the proof size since in the basic
instantiation, the proof contains at least one ciphertext for each
linear PCP response.
Alternatively, instead of working over a large field, we can work
over a small field F𝑝 where 𝑝 ≈ 𝑁 and amplify soundness through
parallel repetition. For instance, if we take 𝑝 ≈ 220 and 𝑞 ≈ 2100,
then a single Regev ciphertext is roughly 45 KB. However, sound-
ness amplification increases the proof size (and all other metrics),
again leading to parameter sizes that are significantly worse than
non-lattice-based zkSNARKs. The scheme of Gennaro et al. [65]
considers a finite field of size 232 without soundness amplification,
and so their concrete instantiation provides very few bits of prov-
able soundness (see Appendix E and Remark E.4). But even with
this choice of parameters, the proof size in their construction is
already 640 KB.
1.2 Technical Overview
The primary enablers of our concretely-efficient lattice-based zk-
SNARK are (1) using vector encryption [89] instead of vanilla Regev
encryption as our linear-only encryption scheme; and (2) work-
ing over extension fields of moderate characteristic. We provide an
overview of our techniques and construction here.
Vector encryption. Our starting point in this work is the adapta-
tion of the Bitansky et al. compiler using linear-only vector encryp-
tion introduced by Boneh et al. [31]. As the name suggests, a vector
encryption scheme (over a field F) supports encrypting a vector
of field elements. Instead of encrypting each entry in the linear
PCP query matrix Q ∈ Fℓ×𝑘 separately, the Boneh et al. compiler
encrypt rows of Q. The proof then consists of a single ciphertext
encrypting the vector of linear PCP responses. The advantage of
this approach is that we can take advantage of amortization to
Session 1C: Zero Knowledge I CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea215reduce the ciphertext expansion for lattice-based vector encryption.
In more detail, with vanilla Regev encryption, the overhead of en-
crypting a single Z𝑝 value is 𝑂(𝑛), where 𝑛 is the lattice dimension.
Using the extension by Peikert et al. [89], we can encrypt a vector of
ℓ Z𝑝-values with a ciphertext containing (𝑛 + ℓ) Z𝑞-elements. This
approach confers several improvements for concrete efficiency:
• Soundness amplification: We can now amplify soundness of
the linear PCP using parallel repetition (i.e., using multiple inde-
pendent sets of linear PCP queries). This increases the dimensions
of the vectors we encrypt, but using the Peikert et al. vector en-
cryption scheme, the overhead is additive in the dimension rather
than multiplicative (as with vanilla Regev encryption).
• Number of lattice ciphertexts: For an encryption scheme to
plausibly satisfy the “linear-only” property, the ciphertext space
must be sparse, and in particular, the adversary should not be
able to obliviously sample a valid ciphertext without knowledge
of the corresponding plaintext value. The heuristic from earlier
works [30, 31, 64] is to use “double encryption” where a valid ci-
phertext encrypting a message 𝑥 consists of a pair of independent
ciphertexts encrypting 𝑥 (Gennaro et al. [65] also use a variant of
this encoding method). In Section 3.3, we describe an alternative
approach to sparsify the ciphertext space by first embedding the
𝑝 within a (secret) subspace 𝑇 ⊆ Zℓ+𝜏
plaintext vector v ∈ Zℓ
𝑝
and then encrypting the embedded vector v′ ∈ Zℓ+𝜏
𝑝 . Here, 𝜏
is a “sparsification” parameter. A ciphertext is valid only if it
encrypts an element of the subspace 𝑇 . When 𝑇 has negligible
density in Zℓ+𝜏
𝑝 , we conjecture that an adversary (that does not
know 𝑇 ) cannot obliviously sample a valid ciphertext without
knowledge of the corresponding plaintext vector. The advan-
tage of this approach is that it incurs a small additive overhead
on ciphertext/proof size rather than a multiplicative one. Thus,
using vector encryption, we can encrypt a vector of plaintext
values using a single lattice ciphertext (and still plausibly prevent
oblivious sampling of ciphertexts).
Reducing ciphertext size with modulus switching. Homomorphic
operations on lattice ciphertexts increase the noise in the cipher-
texts. To ensure decryption correctness, the ciphertext modulus 𝑞
must be large enough to accommodate the accumulated noise from
the homomorphic operations. The modulus switching technique
developed in the context of fully homomorphic encryption [3, 40,
41, 52, 56] provides a way to reduce the size of the ciphertexts after
performing homomorphic operations. Specifically, modulus switch-
ing takes a ciphertext with respect to a modulus 𝑞 and scales it
down to a new ciphertext with respect to a modulus 𝑞′ < 𝑞 (while
preserving decryption correctness). This technique applies to most
Regev-based encryption schemes, including the vector encryption
scheme we use. In our specific setting, after the prover homomor-
phically computes the encrypted vector of linear PCP responses, the
prover applies modulus switching to the resulting ciphertext. For
our parameter settings, this yields a 2× to 3× reduction in ciphertext
size (and correspondingly, in proof size).
Instantiating our vector encryption scheme over F𝑝 using a
23-bit characteristic 𝑝 yields a zkSNARK where the proof size is
27 KB and the CRS size is 9.6 GB (for verifying R1CS instances
with 220 constraints). Using a larger 28-bit characteristic, the proof
size increases to 29 KB and the CRS size decreases to 2.7 GB for
the same setting. Without modulus switching, the proof sizes for
these two settings are 66 KB and 72 KB, respectively. While these
basic instantiations already improve on previous post-quantum
zkSNARKs in terms of proof size, the improvements come at the
expense of needing a very large CRS. Below, we show how to use
extension fields to obtain instantiations with a shorter CRS and a
shorter proof.
Extension fields of moderate characteristic. The second ingredi-
ent in our construction is a way to reduce the lattice parameters
themselves by considering linear PCPs over extension fields of
moderate characteristic. The key observation we make is that the
size of the modulus 𝑞 (and other lattice parameters) scale with the
plaintext modulus (i.e., the field characteristic) but not necessarily
the size of the field. To take advantage of this, we first note that
linear PCPs based on QAPs are agnostic to the choice of the field,
and work equally well over extension fields F𝑝𝑘 . We develop two
instantiations of this approach:
• Compile linear PCPs over F𝑝𝑘 to F𝑝: Our first instantiation
shows how to compile a linear PCP over F𝑝𝑘 to a zkSNARK using
linear-only vector encryption over the base field F𝑝 (i.e., the same
encryption scheme from above). To do so, we first show how to
transform a linear PCP over F𝑝𝑘 to a linear PCP over F𝑝. The
transformation increases the query length and the number of
queries by a factor of 𝑘, and relies on the fact that F𝑝𝑘 -operations
correspond to linear transformations over the vector space F𝑘
𝑝. We
describe our construction in Section 3.1. For concrete efficiency
reasons, we focus exclusively on quadratic extensions. Using one
instantiation of this approach, we obtain a construction with
shorter proofs (21 KB) and a shorter CRS (3.8 GB) compared to
working over the prime field.2 With a longer CRS (10.5 GB), we
can bring the proof size down to just 16 KB.
• Vector encryption over extension fields. We next consider a
direct compilation from linear PCPs over the extension field to a
zkSNARK using a linear-only vector encryption scheme whose
plaintext space coincides with the extension field. To do so, we
generalize our variant of the Peikert et al. [89] encryption scheme
to operate over the cyclotomic ring 𝑅 = Z[𝑥]/(𝑥2 + 1). In this
case, the plaintext space is 𝑅𝑝 = 𝑅/𝑝𝑅. When 𝑝 = 3 mod 4, 𝑅𝑝 (cid:27)
F𝑝2. Under the conjecture that the vector encryption scheme is
linear-only over 𝑅𝑝, this gives a direct compilation from a linear
PCP over a quadratic extension F𝑝2 to a zkSNARK over F𝑝2. By
relying on linear PCPs and linear-only vector encryption over
the quadratic extension, we obtain a zkSNARK with similar proof
size as the above construction, but with a 2× reduction in the CRS
size (previously incurred by transforming the linear PCP from
F𝑝2 to F𝑝). We show the concrete performance in Table 1 and in
Section 4.3. Leveraging encryption schemes over extension fields
and higher-rank modules has also been useful for improving
the asymptotic and concrete efficiency of other lattice-based
constructions [66–68].
Parameter selection. In this work, we consider quadratic exten-
sion fields with two different characteristics: (1) 𝑝 = 213 − 1 which
2Even though the linear PCP transformation doubles the query length of the linear
PCP, working over the extension field allows us to achieve the same level of soundness
with fewer parallel repetitions, and reduces the overall size of the CRS.
Session 1C: Zero Knowledge I CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea216yields a construction with shorter proofs but a longer CRS; and (2)
𝑝 = 219 − 1 which yields a construction with a shorter CRS and
slightly longer proofs. We choose 𝑝 of the form 2𝑡 − 1 so that F∗
𝑝2
has a multiplicative subgroup of order 2𝑡+1 (i.e., the subgroup of
2𝑡+1-th roots of unity). This enables us to take advantage of fast
Fourier transforms (FFT) to implement the linear PCP prover [20].
Note that when 𝑝 is sufficiently small (e.g., 𝑝 = 213 − 1), the exten-
sion field does not contain a sufficiently-large subgroup of roots
of unity to directly leverage power-of-two FFTs for the linear PCP.
In Section 4.1, we describe a simple approach using multiple small
power-of-two FFTs on different cosets of the roots of unity that still
enables an efficient implementation of the linear PCP prover.
Working over extension fields also allows us to use a smaller
ciphertext modulus 𝑞 in the lattice-based encryption scheme. When
𝑞 < 2128, we can use compiler intrinsic types for 128-bit integer
arithmetic for our computations. This is significantly faster than
using multi-precision arithmetic or even fixed-precision arithmetic
over slightly larger integers. We provide more discussion and mi-
crobenchmarks in Section 4.2.
Zero knowledge and circuit privacy. As noted above, the Bitan-
sky et al. compiler yields a zero-knowledge SNARK if the underlying
linear PCP is honest-verifier zero knowledge and the linear-only
encryption scheme is re-randomizable. However, the lattice-based
schemes are not directly re-randomizable (due to the accumula-
tion of noise through homomorphic operations). In this work, we
show that a weaker notion of circuit privacy [66] suffices to argue
zero knowledge for the SNARK (i.e., the ciphertext obtained from
taking a linear combination of ciphertexts hide the coefficients
of the linear combination). Using noise smudging [7, 66, 85] and
the module learning with errors assumption (MLWE) [40, 80], it
is straightforward to augment our linear-only vector encryption
scheme to provide circuit privacy. We give the details in Section 3.3.
We additionally note in the full version of this paper [78] that even
without circuit privacy, a direct compilation from a linear PCP
satisfying honest-verifier zero knowledge to a zkSNARK can still
provide full zero knowledge if the underlying linear PCP remains
zero knowledge given some additional information on the linear
PCP coefficients. This variant without provable zero knowledge
enables a further 30-40% reduction in prover time and a 45-50%
reduction in proof size.
Implementation and evaluation. In Section 4, we describe our
implementation of our lattice-based zkSNARK. We provide a com-
prehensive evaluation of the different trade-offs in parameter sizes
and computational costs for the different settings described here.
We also give fine-grained microbenchmarks of the different com-
ponents of our system in Section 4.3. Finally, we conclude with
additional comparisons against other zkSNARK candidates in Sec-
tion 5.
2 PRELIMINARIES
Throughout this work, we write 𝜆 (oftentimes implicitly) to denote
the security parameter. For a positive integer 𝑛 ∈ N, we write
[𝑛] to denote the set {1, . . . , 𝑛}. We write {𝑥𝑖}𝑖∈[𝑛] to denote the
ordered multi-set of values 𝑥1, . . . , 𝑥𝑛. We will typically use bold
lowercase letters (e.g., v, w) to denote vectors and bold uppercase
letters (e.g., A, B) to denote matrices. For a vector v ∈ Z𝑛
𝑝, we will
use non-boldface letters to refer to its components; namely, we
write v = (𝑣1, . . . , 𝑣𝑛). For a vector v ∈ R𝑛, we write ∥v∥∞ to
r← 𝑆 to
denote the ℓ∞ norm of v. For a finite set 𝑆, we write 𝑥
denote that 𝑥 is sampled uniformly from 𝑆. For a distribution D,
we write 𝑥 ← D to denote that 𝑥 is sampled from D.
We say that a function 𝑓 is negligible in 𝜆 if 𝑓 (𝜆) = 𝑜(1/𝜆𝑐)
for all 𝑐 ∈ N; we denote this 𝑓 (𝜆) = negl(𝜆). We write poly(𝜆) to
denote a function bounded by a fixed polynomial in 𝜆. We say an
event happens with negligible probability if the probability that the
event occurs is negligible, and that it happens with overwhelming
probability if its complement occurs with negligible probability. We
say an algorithm A is efficient if it runs in probabilistic polyno-
mial time in the length of its input. We say that two families of
distributions D1 = {D1,𝜆}𝜆∈N and D2 = {D2,𝜆}𝜆∈N are computa-
tionally indistinguishable if no efficient adversary can distinguish
samples from D1 and D2 except with negligible probability. We
say that D1 and D2 are statistically indistinguishable if the sta-
tistical distance between D1 and D2 is negligible; we denote this
by writing D1
𝑠≈ D2. For an algorithm A, we write A(𝑥; 𝑟) to
denote the output of running A on input 𝑥 and randomness 𝑟. In
settings where we do not need to specify the randomness explicitly,
we write A(𝑥) to denote the output distribution of A on input 𝑥
where the randomness is drawn from the uniform distribution. We
recall additional preliminaries, including the formal definition of
linear PCPs and zkSNARKs in Appendix A.
3 LATTICE-BASED SUCCINCT ARGUMENTS
In this section, we introduce the main information-theoretic build-
ing block (linear PCPs over extension fields) and the cryptographic
compiler (linear-only vector encryption) that underlie our lattice-
based zkSNARK. We then show how to combine these ingredients
to obtain our designated-verifier zkSNARK by invoking the Bitan-
sky et al. [30, 31] compiler (see Section 1.2).
3.1 Linear PCPs over Extension Fields
Claim A.6 gives a linear PCP for R1CS over any (sufficiently-large)
field F. In our work, we consider linear PCPs over quadratic ex-
tensions F𝑝2. As discussed in Section 1.2, we consider compilers