and from ICE to the Rich OS, respectively. Table I shows the
switching time for our two prototype ICEs.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:53:17 UTC from IEEE Xplore.  Restrictions apply. 
Fig. 9: Absolute time of code execution
Fig. 10: Relative time of code execution
study the performance in ICE, and then use it as a baseline
to compare the other two environments. Then we evaluate
the performance of Android in the secure domain and the
normal domain, respectively. Also, we compare the power
consumption in these three cases.
We run a piece of self-contained code in TDC, ICE, and the
Rich OS, respectively, to compare their execution performance.
The code is shown in Listing 1. We run the code with
ﬁve different scales, namely, 0x1, 0xF, 0xFF, 0xFFF, and
0xFFFF. In each scale, we run the code in each environment
100 times and show the average results in Figure 9.
Listing 1: The Self-Contained Code
unsigned int i,j,scale;
const char* msg="!!!Hello World!!!";
char dest[17];
for(j=0;j<scale);j++){
for(i=0;i<17;i++)
dest[i]=msg[i];
}
From the ﬁgure, we can see that the code running in the
TDC is the fastest. The average execution time ranges from
950 ns to 0.03 s. Hence, we use the time in ICE as the standard
time, and generate two ratios by dividing the other two times
with the standard time. The comparison result is shown in
Figure 10. We can see that the Rich OS is faster than the ICE
when the scale is small, and ICE is faster when the scale is
larger than 0xF F F . This is because when the execution time
is small, no interrupts in the Rich OS will break the execution
of the self-contained code. However, as the scale increases, the
execution in the Rich OS will be interrupted more frequently
and the execution time thus increases.
Since there are devices that can only be accessed in the
secure domain, the Rich OS is designed to run in the secure
domain when only the Rich OS is deployed on i.MX53
QSB. In TrustICE, when the Rich OS needs to access those
devices that are only open to the secure domain, it issues a
request to switch to the secure domain by calling the SMC
instruction. Then the secure domain helps access the devices
and returns the result back to the Rich OS. To evaluate the
impact of moving the Rich OS from the secure domain to
the normal domain, we measure the benchmarks of Android
in both the normal domain and the secure domain. We install
Quadrant [25], a benchmark app for mobile devices, to run on
both domains to compare their performance. The app available
on Google Play is capable of measuring CPU, memory, I/O,
and 3D graphics performance. The overall and categorical
Quadrant benchmark scores are shown in Figure 11. The higher
the score is, the better the performance is. The results show
that ICE has little impact on the Rich OS. The performance
of CPU and memory is barely affected. The I/O performance
in the secure domain is better than that in the normal domain.
This is due to the existence of those I/O devices that are open
only in the secure domain. Thus, there is no direct access to
those I/O devices in the normal domain while we can directly
access all the I/O devices in the secure domain.
We also measure the system power consumption in the
three different environments. As the input DC voltage of
i.MX53 QSB is approximately ﬁxed at 5 V , we measure the
input current to the board and multiply it with the 5 V voltage
to derive the power consumption. We record the current data
when the current keeps constant. From Table IV, we can see
that the system power consumption in three cases are almost
the same. Due to the constrained functions and operations in
the TDC and the ICE, the power consumptions of these two
cases are slightly lower than that in the normal domain.
TABLE IV: Comparison on Power Consumption
System
Power (W )
The Rich OS
TDC
ICE
2.49
2.47
2.47
374374
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:53:17 UTC from IEEE Xplore.  Restrictions apply. 
VII. SECURITY ANALYSIS
As we point out in the threat model, the Rich OS may be
compromised by an adversary exploiting known or unknown
OS vulnerabilities. Therefore, we must prevent the malicious
OS from compromising the code and data in TDC and ICEs.
Data Exﬁltration Attack. TDC is the only trusted computing
base in our system, which is always protected by the TrustZone
hardware security mechanism. We trust the TrustZone hard-
ware design and implementation to protect TDC from being
tampered by a malicious Rich OS. TDC guarantees that all
ICEs are securely isolated from the Rich OS. When the system
switches to ICE, the Rich OS has been suspended and cannot
be resumed to run until the system exits ICE. When the Rich
OS is running, all ICE’s memory regions are protected by
the watermark region that can only be conﬁgured by TDC.
Therefore, even if an adversary can compromise the Rich OS,
it still cannot access the code and data in ICEs.
Similarly, TDC guarantees that one ICE cannot access
the memory content of another ICE. One ICE may contain
malicious code targeting at stealing sensitive information from
other ICEs. However, when one ICE is running in the normal
domain,
it cannot access other ICEs’ memory spaces that
are protected by the watermark region, which can only be
conﬁgured by TDC in the secure domain. Due to the limited
number and the size of watermark regions on i.MX53 QSB,
we cannot prevent an ICE from accessing the resources in the
Rich OS. However, it is a minor issue as our goal is to protect
the secure code in ICEs.
Secure Boot. TrustICE ensures a trusted path when booting the
system and switching between different computing environ-
ments. i.MX53 QSB includes a High Assurance Boot (HAB)
to ensure the authenticity and integrity of an image that will be
loaded on the processor chips [13], [22]. Through validating
the signature of image code, HAB can assure that the code
is originated from a trusted authority and the code is in its
original form. Therefore, if the Rich OS tampers with the
images of TDC, ICEs, or the secure code on the non-volatile
storage, TrustICE can detect it and refuse to load them into
memory.
Spooﬁng ICE Attack. When the Rich OS is requested to
switch to an ICE, it may fake an ICE and deceive a user to
input secret credentials such as password in the faked ICE. We
use an exclusive hardware signal such as an LED that can only
be controlled by TDC in the secure domain to prevent this kind
of fake ICE attacks. When the system switches from the Rich
OS to one ICE, it is not required to check the integrity of the
ICE again. This is because the ICE memory is protected by
watermark that can only be controlled by the trusted TDC.
Denial-of-Service Attack. A malicious Rich OS may launch
denial-of-service (DoS) attacks to prevent the system from
switching into one ICE; however, such attacks can be easily
detected by a user. When the ICE cannot be entered, the
LED light will not be turned on and the user can notice it
immediately. The user then can launch further investigation or
reinstall the system.
Side-Channel Attack. The Rich OS can hardly use side-
channel to steal sensitive data from ICEs. Though the Rich
OS and ICEs all run in the normal domain, when one ICE
Fig. 11: Android Benchmark
C. Comparison with Other Solutions
Emulated hardware platforms with TrustZone support
have been developed [26], [27]; however,
those emulation
frameworks do not contain many useful security features of
TrustZone. Besides, the real platform devices are not very
“friendly” [10]. This is because there is little open-source
software system for TrustZone, and the security datasheet of
hardware is not fully open to the public. This prevents users
from utilizing the security features of TrustZone to develop
comprehensive TrustZone-based software systems.
TrustZone has been proposed to be used in many ARM ar-
chitectures [28], [29], [30]; however, there are no detailed per-
formance evaluations available for public access. Some archi-
tectures have been proposed in commercial use [12], [20], but
they are not open-source. The open-source SierraT EE [19]
must be loaded on the emulated Fast Models or on pro-
grammable Zynq-7000 AP SOC [31]. Since those experimental
results are not collected on real platforms, it is difﬁcult for us
to compare our system to their solutions.
D. Performance Comparison between One and Multiple ICEs
We have different memory maps of TrustICE when we
load only one ICE or multiple ICEs in the system. Since the
memory maps have impacts on setting the watermark regions,
we conduct experiments to study and compare their perfor-
mance. Our experimental results show that the only difference
is the switching time when the system switches from the Rich
OS to ICE. In one-ICE and two-ICE scenarios, the switching
time from the Rich OS to ICE is almost the same, since
we only need to reconﬁgure the watermark registers in TDC.
However, in the more-than-two-ICE scenario, the switching
time is much larger. In our prototype with 2 encryption ICEs
and one interface ICE, it takes 2.85 ms to copy the encryption
ICE and 68.44 ms to copy the interface ICE to the runtime
environment. This overhead can be reduced if the hardware
platforms can provide a ﬂexible watermark solution to protect
a large number of memory regions for ICEs.
375375
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:53:17 UTC from IEEE Xplore.  Restrictions apply. 
the Rich OS is suspended and cannot obtain
is running,
the system status information. Before the Rich OS resumes
execution, TDC has cleaned up the CPU context information.
Therefore, it is difﬁcult for the Rich OS to launch side-channel
attacks.
Our design can reduce the attack surface in the secure
domain and the size of the system’s TCB; however, since we
run the secure code in the normal domain, our system may not
provide equivalent isolation that ARM TrustZone guarantees
in the secure domain. ARM TrustZone can ensure isolation
on CPU, memory, and I/O devices. We use the hardware-
assisted watermark mechanism to successfully ensure the
memory isolation between ICEs and the Rich OS. However,
for the CPU and I/O devices, we have to rely on the careful
design of TDC to clean up the CPU states and control the
interrupts for the ICEs. Our design can be integrated with
the traditional TrustZone architecture to provide a three-level
trusted execution environments, where the secure domain is for
the highest-level secure code, the ICE is for the medium-level
secure code, and the Rich OS is for the normal code.
VIII. RELATED WORK
A number of research efforts have been attempted to solve
the data leaking problem, and they can be classiﬁed into
two general categories: access control policy based solutions
(e.g., [32], [33], [34], [35], [36], [37], [38]) and isolated com-
puting environment based solutions (e.g., [10], [29], [9], [39],
[40], [41], [8]). Current Android relies on Linux discretionary
access control (DAC) to achieve application isolation [32]. Fur-
thermore, mandatory access control (MAC) has been integrated
into mobile OS kernel to achieve a stronger isolation [33], [34].
An isolated computing environment can be accommodated
on mobile devices to protect the execution of secure code.
For instance, the SIM card in our cellphones is actually a
small computer, with its own memory and even an operating
system to protect the credentials stored in the card. Square [7]
is another example that processes the credit card sensitive data
in an isolated chip that can be connected to the smart phone
through the audio interface. ARM processors are extended
with a new hardware security support called TrustZone [9]
to help construct an ICE using the application processor.
TrustZone can isolate a secure OS from a Rich OS into two
isolated computing domains. Thus, untrusted applications in
a compromised Rich OS cannot access secure applications in
the secure OS [10], [9], [11], [12]. Texas Instruments (TI)
developed its own TrustZone solution and named it M-Shield
[8].
TrustZone has been adopted to secure a number of appli-
cations. For instance, a location-based second-factor authen-
tication for mobile payments uses TrustZone to protect its
secure enrollment schemes [42]. A TrustZone-based memory
acquisition mechanism called TrustDump is capable of reliably
obtaining the RAM memory and CPU registers of the mobile
OS even if the Rich OS has crashed or has been compro-
mised [43]. Santos et al. [44] took advantage of TrustZone to
construct a Trusted Language Runtime (TLR). TLR protects
the secure code of .NET mobile applications from the rest of
the application, and isolates it from the OS and other apps. It
also provides runtime support for the secure code.
Several TrustZone-based systems (e.g., Mobicore/Truston-
ics [12], Trusted Logic [11], ObCs [29], [40], and KNOX [45])
have been developed to enhance the security of mobile de-
vices. MobiCore [12] is a secure OS for TrustZone enabled
ARM controllers including ARM1176 or CortexA8/A9. It
provides development
tools called Trustlets for third-party
application developers. For all existing TrustZone-based so-
lutions, a customized secure OS runs in TrustZone’s secure
domain to execute secure applications. This type of TrustZone
architecture has two major problems. First, the system attack
surface increases along with the number of installed trusted
applications. Second, it is difﬁcult for third-party developers
to get their code into the secure domain. Our solution can
mitigate these problems by running the secure code in trusted
ICEs in the normal domain.
Virtualization has been adopted to provide isolated virtual
machines on mobile devices [46]. Also, there emerges hard-
ware virtualization supports on ARM processors [47], [48],
[4]. KVM/ARM [5] utilizes recent ARM hardware virtual-
ization extensions to run virtual machines with comparable
performance to native execution. Secure code can be protected
in an isolated virtual machine that is protected by a trusted
hypervisor. However, due to the size of the Linux kernel,
the trusted computing base (TCB) of the hypervisor is still
quite large and may contain unknown vulnerabilities that may
be exploited to compromise the hypervisor and the virtual
machines.
Researchers have investigated on how to use speciﬁc
hardware supports to create an isolated execution environ-
ment from an untrusted operating system on x86 processors
(e.g.,Inktag [49], Overshadow [50], TrustVisor [51], SICE [52],
and SGX [53]). However, these hardware supports are only
available on x86 architecture.
IX. CONCLUSIONS
Based on the ARM TrustZone technology, we design
a novel TrustICE framework to create isolated computing
environments for executing secure code in the normal domain.
Contrast to traditional TrustZone solutions, TrustICE has a
small TCB that only consists of a Boot ROM and a Trusted
Domain Controller (TDC), which are protected by TrustZone.