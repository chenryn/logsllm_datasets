(cid:104) + {K +
− {{K +
+ Na,−x(cid:105)
a · K +
a · K +
b · M · hash(Na)}K
b · M · hash(Na)}K
−
a
,
, hash(x)}K
−
b
,
−
a
where x is instantiated to Nb in a normal protocol run.
We associate strand (cid:126)s with a ground term set (cid:126)s[0] to de-
scribe its initial knowledge, and use Ki((cid:126)s) to denote the
knowledge of a principal (at step i) taking the role speciﬁed
by (cid:126)s. That is,
Ki((cid:126)s) =
Ki−1((cid:126)s) ∪ {t}
Ki−1((cid:126)s)
if i = 0
if i > 0 and (cid:126)s[i] = −t
otherwise
To account for ambiguous messages, we inductively deﬁne
(cid:126)Ki((cid:126)s) as follows
(cid:104)(cid:126)s[0], [](cid:105)
(cid:104) (cid:126)Ki−1((cid:126)s) ↓ts ∪{x}, (cid:126)Ki−1((cid:126)s) ↓subs ◦[t/x](cid:105)
where x is a fresh variable, if i > 0 and (cid:126)s[i] = −t
if i = 0
(cid:126)Ki((cid:126)s) =
(cid:126)s[0]
(cid:126)Ki−1((cid:126)s)
otherwise
The subscript i will be omitted if i = length((cid:126)s).
4.2 Execution Traces
In this subsection, we use execution traces to describe real
protocol executions and formalize the meaning of “a protocol
execution is in compliance with the protocol narration”.
An execution trace or simply a trace tr is a strand contain-
ing no variable (i.e., ground strand). Clearly, every protocol
execution can be described by a set of execution traces. It is
natural to parse a protocol narration into a set of traces; we
will always assume that such traces are obtained, and refer
to those traces as narrative traces.
We say that two strands (cid:126)s1 and (cid:126)s2 are isomorphic iﬀ
(cid:126)K((cid:126)s1) ↓ts and (cid:126)K((cid:126)s2) ↓ts are identical up to variable renam-
ing, that is, there exists a variable renaming substitution η
that (cid:126)K((cid:126)s1) ↓ts η = (cid:126)K((cid:126)s2) ↓ts. For simplicity, we assume that
(cid:126)K((cid:126)s1) ↓ts= (cid:126)K((cid:126)s2) ↓ts whenever they are isomorphic. We say
that (cid:126)s1 and (cid:126)s2 are operationally equivalent in equational the-
ory E, written as (cid:126)s1 ≈E (cid:126)s2, iﬀ (cid:126)K((cid:126)s1) ↓subs≈E,T (cid:126)K((cid:126)s2) ↓subs
where T = (cid:126)K((cid:126)s1) ↓ts= (cid:126)K((cid:126)s2) ↓ts.
Deﬁnition 4.1. Given an equational theory E, we say that
an execution trace tr is in compliance with a set of strands
(cid:126)S, written as (cid:126)S (cid:32)E tr, iﬀ tr ≈E (cid:126)s for some (cid:126)s ∈ (cid:126)S. Two
sets of strands (cid:126)S1 and (cid:126)S2 are equivalent, written (cid:126)S1 ≈E (cid:126)S2,
if all, and only, execution traces in compliance with (cid:126)S1 are
in compliance with (cid:126)S2.
4.3 Semantics
To obtain an ideal semantics of a protocol narration, it is
essential to capture all possible execution traces that are in
compliance with the narration.
Deﬁnition 4.2 (Ideal Semantics). Let (cid:126)S be a set of strands
and T R0 be a set of narrative traces. Given an equational
theory E, we say that (cid:126)S is an ideal semantics of T R0 iﬀ
(cid:126)S ≈E T R0.
Unfortunately, there is often an inﬁnite number of execu-
tion traces that are in compliance with the set of narrative
traces T R0. So, it is preferable to use “patterns” to capture
those execution traces thanks to fully ﬂedged interpretations
of incoming messages. For example, in an arbitrary success-
ful run of the Otway-Reese protocol the last message should
look like {Na, x}Kas , because Kab is recognized as  and is
thus replaced by a free variable x. This approach resem-
bles the “pattern-matching” technique widely-used in formal
protocol analysis [34, 10, 16, 7].
Our deﬁnition of “recognized as” (Deﬁnition 3.4) ﬁts the
intuitive understanding of “patterns”. Given a narrative
trace tr0, we can use the MCS of (cid:126)K(tr0) to characterize
all possible incoming messages in a succesful protocol run.
Altogether, we obtain Algorithm 1 to extract an ideal se-
mantics from a protocol narration. The algorithm takes an
input set of narrative traces T R0 and an equational theory
E, and produces an ideal semantics of T R0.
The main loop of the algorithm selects an arbitrary nar-
rative trace tr and obtain a set of operationally equivalent
strands. It has two stages. In the ﬁrst stage, from line 3
to line 9, it construct an abstract strand by replacing each
incoming message with a fresh variable and replacing each
outgoing message with its corresponding recipe. In the sec-
ond stage, it ﬁrst computes a MCS Θ of (cid:126)K(tr) in line 10.
We see that each θ ∈ Θ corresponds to an interpretation
of the incoming messages, because, by Deﬁnition 3.3, it is
operationally equivalent to (cid:126)K(tr) and is in its most general
Algorithm 1
Extract-Ideal-Semantics
We assume that the initial knowledge of A and B as follows.
a set of narrative traces T R0, equational theory E
Input:
Output: a set of strands (cid:126)S
1:
2:
3:
(cid:126)S ← ∅
for each tr0 ∈ T R0
(cid:126)sp ← (cid:104)(cid:105), S ← ∅
/* specify initial knowledge */
append strand (cid:126)sp with tr0[0]
/* obtain a markup term set representing the
4:
5:
6:
7:
8:
9:
principal’s knowledge upon protocol completion */
for j = 1 to length(tr0)
if tr0[j] = +t for some term t then
append strand (cid:126)sp with node +t(cid:48)
if tr0[j] = −t for some term t then
append strand (cid:126)sp with node −x
where t(cid:48) is a recipe of t
where x is a fresh variable
obtain a MCS Θ of (cid:126)K(tr0)
S ← S ∪ {(cid:126)spθ} for each θ ∈ Θ
10:
11:
12: (cid:126)S ← (cid:126)S ∪ S
13: return (cid:126)S
form. So, in line 11, we include all strands associated with
those interpretations in output ideal semantics.
Theorem 4.3. Let T R0 be a set of narrative traces. Then,
Extract-Ideal-Semantics(T R0, E) returns an ideal seman-
tics of T R0.
Proof. Let (cid:126)SI = Extract-Ideal-Semantics(T R0, E).
It
suﬃces to show that (cid:126)SI ≈E T R0. That is, an arbitrary
execution trace tr is in compliance with (cid:126)SI if and only if it
is in compliance with T R0.
(“If” part) By T R0 (cid:32)E tr, there exists a trace tr0 ∈ T R0
such that tr ≈E tr0. That is, (cid:126)K(tr) ↓subs≈E,T (cid:126)K(tr0) ↓subs
where T = (cid:126)K(tr) ↓ts= (cid:126)K(tr0) ↓ts. By Deﬁnition 3.3, there
exists a θ ∈ Θ such that θ •≤X
(cid:126)K(tr) ↓subs and θ ≈E,T
(cid:126)K(tr0) ↓subs, where Θ is a MCS of (cid:126)K(tr0) and X = f v(T ).
We note from Algorithm 1 that (cid:126)K((cid:126)spθ) ↓ts= T and (cid:126)K((cid:126)spθ) ↓subs
= θ. So, tr ≈E (cid:126)spθ ∈ (cid:126)S, that is, (cid:126)SI (cid:32)E tr.
(“Only if” part) By (cid:126)SI (cid:32)E tr, we see from Algorithm 1
that there exists a strand (cid:126)spθ ∈ (cid:126)S such that tr ≈E (cid:126)spθ. That
is, (cid:126)K(tr) ↓subs≈E,T (cid:126)K((cid:126)spθ) ↓subs= θ where T = (cid:126)K(tr) ↓ts=
(cid:126)K((cid:126)spθ) ↓ts. On the other hand, we notice that there exists a
trace tr0 ∈ T R0 such that (cid:126)K(tr0) ↓ts= (cid:126)K((cid:126)spθ) ↓ts. Besides,
since θ is an E-solver of (cid:126)K(tr0), we have (cid:126)K(tr0) ↓subs≈E,T θ.
Consequently, we obtain tr ≈E tr0 for some tr0 ∈ T R0 and
thus T R0 (cid:32)E tr.
E
We stress that a protocol could be executed in a hostile
environment. A principal may intentionally abort a protocol
before completion. So, in Algorithm 1 the narrative traces
must include all partial protocol runs [15]. To highlight the
eﬀect of partial runs on the ideal semantics, let us consider
an example.
Example 4. We consider the following contrived protocol:
1. A → B : M1
2. B → A : M2
3. A → B : M3
4. B → A : M4
Ta0 = {M1, M3}
Tb0 = {M2, M4,{M1}M3}
The narrative trace of role B is
(cid:126)s1 = (cid:104){M2, M4,{M1}M3},−M1, +M2,−M3, +M4(cid:105)
It is not hard to see that another possible partial run is
(cid:126)s2 = (cid:104){M2, M4,{M1}M3},−M1, +M2(cid:105)
At ﬁrst, for both strands we get
(cid:126)K4((cid:126)s1) = (cid:104){M2, M4,{M1}M3 , x1, x3}, [M1/x1, M3/x3](cid:105)
(cid:126)K2((cid:126)s2) = (cid:104){M2, M4,{M1}M3 , x1}, [M1/x1](cid:105)
Let Θ1 and Θ2 be the MCS for (cid:126)K4((cid:126)s1) and (cid:126)K2((cid:126)s2), re-
spectively. Note that {x1}x3 [M1/x1, M3/x3] =Edy {M1}M3 .
Then, it can be shown that
Θ1 = {[M1/x1, M3/x3]}, Θ2 = {[]}
Thus, in a normal protocol run the ﬁrst and third messages
are interpreted as M1 and M3, respectively, whereas in a
partial protocol run the ﬁrst message is interpreted as free
variable x1. That is to say, if the protocol execution suc-
ceeds, B only accepts M1 as the ﬁrst message, otherwise
any message will be accepted.
For now, it is not hard to see the ideal semantics (of role
B) contains the following two strands:
1 = {M2, M4,{M1}M3},−M1, +M2,−M3, +M4(cid:105)
(cid:48)
(cid:126)s
2 = {M2, M4,{M1}M3},−x1, +M2(cid:105)
(cid:48)
(cid:126)s
5. FROM IDEAL IMPLEMENTATION TO
REFINED IMPLEMENTATION
In this section, we turn our attention to protocol imple-
mentations. First, we extend the deﬁnition of a strand to
allow for specifying internal actions. Next, we deﬁne an ideal
implementation according to the ideal semantics of a proto-
col. Since the ideal implementation may not exist, we then
use prudent and reﬁned implementations to approximate it.
Unlike the ideal semantics where messages are regarded as
symbolic expressions, in real protocol implementation every
message is merely a bit string which has potentially ambigu-
ous interpretations. That’s why an ideal semantics high-
lights external patterns of an incoming message, whereas an
implementation emphasizes the internal actions of protocol
participants. Initially, in a protocol implementation, every
incoming message is ambiguous and thus should be indicated
by a fresh variable. Only after performing some condition
checks on messages, the recipient would gain some certainty.
For example, in the ASW protocol (see Example 3) A ought
to check whether fst(pdec(x2, K +
b )) equals to the ﬁrst sent
message, where x2 signiﬁes the received message.
To specify internal actions, we deﬁne a check event as
check(u = v) or check(u (cid:54)= v), where both u and v are
terms. We will use “equality check” and “inequality check” to
discriminate them. An implementation strand (cid:126)p is a strand
that allows check events, and all receive events contain only
free variables that are pairwise distinct. We say that an
implementation strand (cid:126)p is feasible under equational theory
E iﬀ the following conditions hold:
(i). Ki((cid:126)p) (cid:96)E t whenever (cid:126)p[i] = +t, and
(ii). Ki((cid:126)p) (cid:96)E {u, v} whenever (cid:126)p[i] is check(u = v) or
check(u (cid:54)= v).
This coincides with the deﬁnitions of executability and fea-
sibility in [10].
Since an implementation strand makes internal checks ex-
plicit, it can be easily mapped to a practical implementation.
For this reason, we deﬁne protocol implementation P as a set
of implementation strands; each corresponds to a role of the
protocol. For convenience, we use (cid:126)p ↓ to denote a strand
obtained from (cid:126)p by removing all nodes representing check
events.
Deﬁnition 5.1 (In Compliance with). An execution trace tr
is in compliance with a protocol implementation P iﬀ there
exists an implementation (cid:126)p ∈ P and a substitution θ such
that tr = (cid:126)p ↓ θ and for each check(u = v) (resp. check(u (cid:54)=
v)) event in (cid:126)p we have uθ =E vθ (resp. uθ (cid:54)=E vθ).
Let P1 and P2 be two protocol implementations. We say
that P1 encompasses P2, and write P1 ⊆E P2, if all exe-
cution traces in compliance with P2 are also in compliance
with P1; and P1 and P2 are equivalent, written P1 ≈E P2,
iﬀ P1 ⊆E P2 and vice versa. As usual, we write P1 ⊂E P2
for P1 ⊆E P2 and P1 (cid:54)≈E P2. These notations are extended
in the obvious way to sets of strands.
5.1
Ideal Implementation
Deﬁnition 5.2 (Ideal Implementation). Let (cid:126)S be an ideal
protocol semantics. An ideal implementation of (cid:126)S is deﬁned
as a protocol implementation P such that P ≈E (cid:126)S.
Theorem 5.3. Let (cid:126)S be an ideal protocol semantics of pro-
tocol narration T R0. The ideal implementation of (cid:126)S exists
if and only if (cid:126)S does not contain any free variable.
Proof. (Sketch) (“If” part) As we will see in the next sub-
section, Algorithm 2 gives an implementation P. To prove
P ≈E (cid:126)S, by Deﬁnition 4.2 it suﬃces to show that P ≈E
T R0. That is, P (cid:32)E tr ⇔ (cid:126)S (cid:32)E tr.
We begin with the “⇒” direction. By P (cid:32)E tr, we have
tr = (cid:126)p ↓ σ for some implementation (cid:126)p and substitution σ.
Let C be the set of constraints checked in (cid:126)p and C (cid:32)E Θ.
E σ for some θ ∈ Θ and
We see from Deﬁnition 5.1 that θ •≤X
X = f v( (cid:126)K(tr) ↓ts). Notice that there exists a narrative
trace tr0 ∈ T R0 such that C is a constraint base of (cid:126)K(tr0).
It follows from Proposition 3.6 that (cid:126)K(tr0) (cid:32)E Θ. By Def-
inition 3.3, we get θ ≈E,T
(cid:126)K(tr0) ↓subs. Moreover, since
(cid:126)S does not contain any free variable, we know Θ contains