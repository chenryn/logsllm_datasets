title:Unexpected Data Dependency Creation and Chaining: A New Attack to
SDN
author:Feng Xiao and
Jinquan Zhang and
Jianwei Huang and
Guofei Gu and
Dinghao Wu and
Peng Liu
2020 IEEE Symposium on Security and Privacy
Unexpected Data Dependency Creation and
Chaining: A New Attack to SDN
Feng Xiao, Jinquan Zhang, Jianwei Huang†, Guofei Gu†, Dinghao Wu, Peng Liu
The Pennsylvania State University
† SUCCESS Lab, Texas A&M University
Abstract—Software-Deﬁned Networking (SDN) is an emerging
network architecture that provides programmable networking
through a logically centralized controller. As SDN becomes more
prominent, its security vulnerabilities become more evident than
ever. Serving as the “brain” of a software-deﬁned network, how
the control plane (of the network) is exposed to external inputs
(i.e., data plane messages) is directly correlated with how secure
the network is. Fortunately, due to some unique SDN design
choices (e.g., control plane and data plane separation), attackers
often struggle to ﬁnd a reachable path to those vulnerable logic
hidden deeply within the control plane.
it
In this paper, we demonstrate that
is possible for a
weak adversary who only controls a commodity network device
(host or switch) to attack previously unreachable control plane
components by maliciously increasing reachability in the con-
trol plane. We introduce D2C2 (data dependency creation and
chaining) attack, which leverages some widely-used SDN protocol
features (e.g., custom ﬁelds) to create and chain unexpected data
dependencies in order to achieve greater reachability. We have
developed a novel tool, SVHunter, which can effectively identify
D2C2 vulnerabilities. Till now we have evaluated SVHunter
on three mainstream open-source SDN controllers (i.e., ONOS,
Floodlight, and Opendaylight) as well as one security-enhanced
controller (i.e., SE-Floodlight). SVHunter detects 18 previously
unknown vulnerabilities, all of which can be exploited remotely
to launch serious attacks such as executing arbitrary commands,
exﬁltrating conﬁdential ﬁles, and crashing SDN services.
I. INTRODUCTION
In contrast to traditional computer networks, where switches
are a “melting pot” of control plane and data plane, Software-
Deﬁned Networks (SDNs) keep control plane and data plane
separated. While the data plane (of a network) still stays
inside switches, the control plane is detached from the data
plane and moved to a dedicated server called an SDN con-
troller. This separation enables ﬂexible and dynamic network
functionalities, makes troubleshooting easier, and leads to the
development of an open network programming interface that
accelerates the growth of network applications.
As SDN becomes more prominent, the security vulnera-
bilities become more evident than ever. Serving as the core
of SDN networks, the security of SDN control plane [37],
[42], [39], [16], [19] receives the most attention from security
researchers. In particular, the data-to-control plane attacks,
which enable adversaries remotely attack the control plane,
are found to have severe attack effects. Most data-to-control
plane attacks involve two stages: (i) inject malicious network
events into the SDN control channel via protocol interactions;
(ii) exploit vulnerable control plane designs/logic with ma-
licious network events. For example, ConGuard [42] gener-
ates asynchronous network events in unexpected schedules to
exploit vulnerable asynchronous logic of SDN control plane.
The “reachability” (i.e., the set of execution paths triggered
by the network events) in the control plane decides which
logic can be abused. However, the SDN design principles
such as control plane and data plane separation greatly limit
such reachabilities. As a result, attackers located in the data
plane usually target at one or two control plane logic that
closely relates to the malicious network events. Increasing
such reachability to attack more logic in the control plane
may have tremendous promise. Unfortunately, it is difﬁcult to
do so due to the following two unique SDN design choices:
• First, the decoupled SDN control plane (i.e., software
controller) and the data plane (i.e., network devices) only
communicate with each other via pre-deﬁned protocols
(e.g., OpenFlow, NetConf). As a result, attackers (usually
located in the data plane) can only input data in restricted
and pre-deﬁned forms into the control plane.
• Second, only a few components (i.e., message-handling
components) in the controller directly handle protocol
messages from the data plane. Hence, even though an
attacker can inject malicious data into these message-
handling components, it is still very difﬁcult to attack
other components (the components that run important
network services) in the controller unless a very special
data dependency (i.e., the data dependency which can
directly send malicious protocol messages to the target
sensitive method) exists between the target component
and message-handling components.
Because of these SDN design choices, attackers often
struggle to ﬁnd a reachable path to those vulnerable logic
hidden deeply within the SDN control plane. In this work,
we propose a new attack, D2C2 (data dependency creation
and chaining), which effectively breaks the security guards
brought by the two SDN design choices mentioned above.
The new attack provides an unexpected, seemingly-unlikely
way to exploit sensitive methods/APIs hidden in the control
plane. By creating malicious data dependencies, D2C2 is able
to connect previously unreachable sensitive methods to the
data plane in order to increase the reachability. The D2C2
attack succeeds due to two ﬁndings. First, we found that some
widely-used SDN protocol features can help an attacker to
violate the security property provided by the ﬁrst SDN design
© 2020, Feng Xiao. Under license to IEEE.
DOI 10.1109/SP40000.2020.00017
1512
Authorized licensed use limited to: UNIVERSITY OF CONNECTICUT. Downloaded on August 16,2020 at 09:22:58 UTC from IEEE Xplore.  Restrictions apply. 
Control Plane
Data Plane
Control Plane Data Items
Flow Rules
...
FlowRule
Store
Target Component
WEB UI
Device 
Objects
OpenFlow
Provider
Entry Component
Fig. 1. A real exploit chain of the D2C2 attack in ONOS Controller.
choice (control plane and data plane separation). Southbound
protocols (e.g., OpenFlow, NetConf) introduce custom ﬁelds
to enrich the semantics of SDN network states. By abusing
this feature, adversaries are now able to input customized
malicious data in various forms (e.g., long string or XML) into
the control plane through southbound protocol interactions.
However, due to the guard brought by the second design choice
mentioned above, only the methods in the message-handling
components are being exposed to the attackers even though
they can abuse the custom ﬁelds in the SDN protocols. Hence,
we also need to create our own malicious data dependencies in
order to increase the reachability. Our second ﬁnding is that it
is actually possible to create such malicious data dependencies
to attack more sensitive methods in the control plane if the
attackers ﬁrstly exploit a few sensitive methods in those
message-handling components by employing a smart strategy
(i.e., dependency creation by control plane data poisoning).
Such strategies can be illustrated with a real-world exploit
chain that we discovered in ONOS [7], one of the most
widely used controllers. As shown in Fig. 1, instead of directly
introducing a speciﬁc attack effect, the attacker ﬁrst chooses
to poison a control plane data item which will be used by
another component (WEB UI). With the same strategy, the
attacker poisons the data item used by the target component.
As a result, when the poisoned data is handled by the target
component, the attacker successfully attacks the previously
unreachable target method.
The key idea of the D2C2 attack is to abuse reachable
sensitive methods/APIs with existing data dependencies (e.g.,
data dependencies created by custom ﬁeld) to create new
data dependencies to abuse previously unreachable sensitive
methods/APIs in controllers. To achieve this goal, we designed
and implemented a tool, SVHunter, to automatically construct
such exploit chains. Constructing a successful exploit chain,
however, needs to address the following three challenges:
• First, in order to ﬁgure out which data dependencies can
be created, how to represent and model the preconditions
and postconditions of abusing sensitive methods/APIs?
• Second, how to chain the newly created data dependen-
cies with the existing ones together to construct a D2C2
exploit chain?
• Third, how to craft a concrete D2C2 attack payload?
The ﬁrst challenge arises from the fact that it is difﬁcult
to decide how much abstraction (generalization) is needed
to model the behavior of sensitive methods/APIs. In order
to access previously unreachable sensitive methods/APIs, we
ﬁrst need to represent the precondition (the data dependencies
needed to abuse the methods/APIs) and postcondition (the data
dependencies that can be created after abusing the method-
s/APIs) of accessing these sensitive methods/APIs. However,
it is challenging to ﬁnd the appropriate model to represent
such casualty relationships. If our model is too abstract, the
generated representation might be too coarse to describe the
correct data dependencies of each method. If we choose a
very concrete model to represent the relationships, it is likely
that we cannot identify enough information needed by the
ﬁne-grained representation with the state-of-the-art program
analysis techniques. To address this challenge, we employ a
declarative logic language model to represent data dependen-
cies. Unlike an imperative language model that focuses on
the details of program state changes, the declarative model
provides a ﬂexible representation which expresses the logic of
the computation, which is exactly what we are looking for.
The second challenge is about how to analyze and reason
the relationships we identiﬁed in the previous steps. Since we
might identify a large number of sensitive methods/APIs, it
is very tedious and error-prone to manually reason and chain
their relationships. Hence, we design a reasoning engine to
automatically reason the causality relationships of abusing
sensitive methods.
The third challenge is daunting because it is complex and
time-consuming to craft concrete D2C2 attack payloads even
for an SDN expert. To craft such a payload, the attacker has
to (i) manually emulate the protocol interactions to inject
malicious protocol messages, and (ii) fully understand the
complex causality relationships within a D2C2 chain in order
to prepare the proper payload for every sensitive method. To
address this challenge, we design an exploit engine to ease the
process of synthesizing D2C2 exploits.
In summary, the main contributions of this paper are as
follows:
leverage legitimate protocol
• We propose a new D2C2 attack against SDN controllers
that
interactions to abuse
sensitive methods in multiple SDN control plane compo-
nents. By creating malicious data dependencies, the attack
enables a data plane attacker abuse previously inaccessi-
ble sensitive methods/APIs in the controller while only
controlling a normal network device in the data plane.
• We design SVHunter, a novel tool to pinpoint a wide
range of sensitive methods in SDN controllers and cre-
ate data dependencies to attack these methods. It is a
practical tool since it not only leverages program anal-
ysis techniques to identify sensitive method usages in
the control plane but also semi-automatically constructs
exploit chains to introduce various attack effects. We will
open source SVHunter at https://github.com/xiaofen9/
SVHunter.
• We present a comprehensive evaluation of SVHunter on
the mainstream SDN controllers. SVHunter successfully
constructed 18 exploit chains to attack previously un-
known security risks in the control plane. We have made
Authorized licensed use limited to: UNIVERSITY OF CONNECTICUT. Downloaded on August 16,2020 at 09:22:58 UTC from IEEE Xplore.  Restrictions apply. 
1513
TABLE I
CUSTOM FIELDS IN OPENFLOW
Name
mfr desc
hw desc
serial num
dp desc
Purpose
Manufacturer description
Hardware description
Serial number
Human readable description of datapath
Length
256
256
32
256
responsible disclosure and notiﬁed each vendor. By the
time of writing, vendors have already patched 9 of them.
II. BACKGROUND
Software-Deﬁned Networking (SDN) is a new network
architecture with a decoupled control plane and data plane.
Here we introduce some background on SDN: the protocols
that bridge the decoupled planes, the software components and
internal data in the control plane.
A. Protocols
To bridge the decoupled control plane and data plane,
SDN introduces several southbound protocols [27] such as
OpenFlow (OF), Open vSwitch Database Management Pro-
tocol (OVSDB), and NetConf. Most message ﬁelds in these
southbound protocols are limited to a ﬁnite set of pre-deﬁned
values (e.g., 0x00000001∼0x000000e0). However, some ﬁelds
have no constraint and can be customized by the sender. We
denote them as custom ﬁelds in the subsequent text. Custom
ﬁelds are used to enrich the semantics of SDN network states.
For example, to allow SDN controllers to better support the
vendor-dependent features, network devices in the data plane
use the custom ﬁeld of OpenFlow to claim their software/hard-
ware information. Table I demonstrates some default custom
ﬁelds and their intended purposes in OpenFlow, one of the
most important SDN protocols.
B. Control Plane Components
The SDN control plane contains many software compo-
nents [17], including core services and applications. Core ser-
vices provide services to other components, while applications
use these services to provide functionalities to the network
[18]. When a protocol message reaches the control plane,
a certain service will parse the message and store it in the
controller for further usages [14]. For example, when a new
switch connects to the network, a networking event will be
sent to the control plane, which contains hardware information
about
the switch. Then a speciﬁc service will update the
network states so that other components, such as a topology
tracking app, can better understand the network environment
with such information.
C. Internal Data
There are mainly two kinds of internal data in the SDN
controller, conﬁgurational data and runtime data. Important
network parameters, such as administrator credentials and
the access control
list, are stored as conﬁgurational data.
These data items are usually set by the administrators and
stored persistently in the ﬁle system or relational databases
in the controller. They are critical since the control plane
components rely on them to make important decisions such
as routing. Runtime data stores the network status information
such as network topology, device state, and trafﬁc statistics.
The information is mainly collected from the data plane and
is usually stored as runtime data structures of the controller.
III. THREAT MODEL
A. Scenario
As the brain of the entire network, it is clear that compro-
mising the controller is much more effective to attackers [42]
than just to compromise a single or partial network device(s).1
In this paper, we do not assume that attackers can have direct
access to the SDN controller or SDN applications, which can
be well protected. In addition, the control channels between the
controller and switches as well as the administrative channels
between administrators and SDN UI migtht be protected by
secure cryptographic protocols like SSL/TLS. In this paper, we
consider scenarios where a vulnerable network device (e.g., a
switch or a host) exists in the network, and an attacker in
the data plane wants to launch D2C2 attacks by abusing the
device to interact with the controller using legitimate protocol
interactions.
We believe that this attack scenario is realistic. First, net-
work switches (including software switches) can be com-
promised. Actually, many serious vulnerabilities have been
found in SDN-enabled switches [3], [2], [36], [26]. Second,
in many cases, attackers might not need to compromise
network switches; instead, they just compromise normal hosts
or virtual machines to launch attacks. When SDN networks
are conﬁgured as in-band control [12], the control plane and
data plane share the same physical links.2 As a result, normal
hosts could interact with the controller as long as the control
channel does not enforce SSL/TLS3.
B. Attack Effects
A data plane attacker who wants to impact the network
security will seek to introduce one or several attack effects
to the controller. In Table II, we summarize three categories
of common attack effects against the controller. (a) Denial
of Service. The attack effects in this category can disrupt
the availability of a speciﬁc network service in the controller.
(b) Data leakage. Such attack effects aim at stealing valuable
information from the controller (e.g., the network topology).