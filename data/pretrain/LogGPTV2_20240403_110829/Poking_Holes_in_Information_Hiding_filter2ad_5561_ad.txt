ephemeral allocation primitive by using an arbitrary read
to navigate the pointer chain until she determines the ad-
dress of ls->pool_size. At this point, she can effect
a call to posix_memalign() with a size of her choos-
ing by overwriting ls->pool_size and then opening a
connection to the server.
If the allocation request was
successful, the attacker can issue an HTTP request over
that new connection (positive side effect). If the alloca-
tion cannot be accommodated, the connection is forcibly
closed by the server (negative side effect).
Using the same procedure, the attacker can craft a PAP
by simply keeping the connection open in the last step.
To conduct the complete attack, the attacker ﬁrst employs
the EAP to determine the size of the larger of the two
holes around the hidden object (for simplicity, we only
discuss the case when the hidden object is placed in the
largest contiguous pre-existing hole; other scenarios are
investigated in Section 4.3). Having determined the max-
imum allocation (i.e., hole) size, she relies on the PAP to
allocate the exact size of the larger hole, taking it out
of the picture. She then proceeds to conduct the EAP-
based attack against the smaller hole around S. Finally,
she simply probes at address vm.mmap_min_addr+S to
complete the attack, as described in Section 4.3.
7.3 Timing-based attack on lighttpd
Next, we focus on the execution of an EAP-only attack
which relies on a timing side channel. To demonstrate
such an attack, we rely on the config_context->used
primitive in lighttpd.
In order craft this primitive, we
conﬁgured lighttpd to use worker processes by setting the
server.max-worker conﬁguration variable to a non-
zero value. With no loss of generality, we limit our anal-
ysis to one worker process, as an arbitrary memory ac-
cess primitive makes it a matter of book-keeping to tag
the workers (e.g. by writing a different value for each
worker to an unused memory location), so that the attack
code can target a single process.
Again using our primitive discovery methodology, we
easily determined that srv->config_context->used
to calloc() in the body
is used as an argument
of connection_init().
Similarly, we showed
to srv are available in the stack
that pointers
renders
frames
accessi-
srv->config_context->used
loop, which
trivially
above
the
event
ble to an attacker equipped with arbitrary memory
read/write primitives.
The second argument to calloc() at this call site is
sizeof(cond_cache_t), which amounts to 144 bytes.
Since that is less than the default page size on x86, we
can always ﬁnd a value that will result in the allocation
of any given number of pages.
failure.
Therefore,
Crucially, the return value from calloc() is never
the only way to
checked for
determine whether the allocation succeeded or not
is to send a simple request so as to drive the
server to a path which will dereference the pointer.
That path is simply http_response_prepare() ->
config_cond_cache_reset(), which will iterate over
all elements of the array. As a result, if the allocation
fails, the worker process immediately crashes on trying to
access the ﬁrst element, resulting in a closed connection
for the client. If the allocation succeeds but the allocated
size is much larger than the amount of physical mem-
ory on the system, this allocation incurs several lengthy
page faults before causing an out-of-memory (OOM)
condition—on which Linux’ “OOM killer” terminates,
with high reliability, the worker process.
If the sys-
tem can survive faulting in all the allocated pages (pre-
sumably because the allocation was “small”), the server
eventually sends back a response. Using either the tim-
ing or the reception of an HTTP response, we can infer
whether the attempted allocation succeeded or failed.
When the worker process crashes or is terminated by
the OOM killer, the parent is notiﬁed and forks a new
child in replacement (indeed one of the motivations for
using worker processes in server software is for crash re-
covery purposes). Each new worker process inherits the
address space of the parent; hence, all memory regions
(including the hidden object) remain at stable virtual ad-
dresses across worker restart events.
Given the several page faults incurred before a crash,
the timing side channel we rely on yields a very strong
signal. In our testing, we performed the attack 40 times
and were able to reliably differentiate between a success-
ful and a failed allocation in all of them. By using the
same primitive as a PAP (as is possible in this conﬁgura-
tion), we were able to persistently allocate the recovered
size for the largest hole and then repeat the EAP attack
on the smaller hole as done earlier. In summary, by re-
lying on EAP+PAP primitives and a strong timing side
channel we could successful recover the address of the
hidden object and bypass information hiding in all cases
in our experiments.
7.4 EAP-only attack
We evaluated the accuracy and performance of the EAP
in defeating the information-hiding properties of ASLR
130  25th USENIX Security Symposium 
USENIX Association
10
y
c
n
e
u
q
e
r
F
350
300
250
200
150
100
50
0
68
69
70
71
72
73
Number of allocation attempts
Figure 2: Histogram of the number of operations for re-
covering the exact hole sizes around a hidden object in
an nginx executable [n=1000]
by preallocating a hidden object of a size of 2MiB in
the address space of nginx (compiled as a position-
independent executable) and then trying to determine the
sizes of the larger and smaller holes on either side of it,
as described in Section 7.2. Taking into account the com-
plications and workarounds described in Section 4.6, we
were able to exactly determine the size of both the larger
and smaller hole and subsequently uncover the exact lo-
cation of the hidden object, without incurring any invalid
memory accesses.
Figure 2 depicts the number of required allocation at-
tempts over 1000 runs (using different random conﬁgura-
tions). On localhost and using gdb to effect the arbitrary
memory access, the attack completed after an average of
28.20s with a median of 28.21s.
7.5 PAP-only attack
When the only primitive available to the attacker is
the PAP, she needs to consider a number of tradeoffs.
Clearly, the attacker is interested in reducing her entropy
with respect to the position of the hidden region in the
targeted address space. At the same time, different con-
siderations might cause her to strive for minimal or rapid
interaction with the target process. For example, a very
large number of requests to a remote server might very
well increase the chance that the attack will be noticed
by network intrusion detection systems. Similarly, as the
duration of the attack increases, so does the chance that
unrelated process activities, such as servicing requests
for other clients or periodically scheduled work, may in-
terfere with the workings of the algorithm.
There exist two tunable parameters that affect the be-
havior of our PAP-only attack. One selects between the
number of allocation attempts and the entropy reduction
obtained, the other between entropy reduction and risk of
failure.
)
s
t
i
b
(
y
p
o
r
t
n
E
n
a
i
d
e
M
24
22
20
18
16
14
0
200 400 600 800 1000 1200 1400 1600 1800
Number of operations
Figure 3: Parameter space exploration for the PAP-only
attack
Figure 3 presents the number of allocation attempts
versus the median of the residual entropy in the size of
the largest hole after the completion of the attack, for ev-
ery pair of parameter values that we explored. We can
observe that extreme choices of the parameter values re-
sult in pathological behavior, either in the number of op-
erations or in the residual entropy or both.
Conversely, there exist better parameter choices which
do reasonably well for both metrics. Appendix C goes
into more depth on the parameter values and their effect
on the behavior of the attack.
Observe that, in attack scenarios where a number of
requests on the order of a thousand is acceptable, there
exist several parameters for which the median residual
entropy is reduced to 15 bits. Notice also that when the
size of the hidden region can be expected to be compa-
rable to the residual entropy, the chances of successfully
probing for the region are signiﬁcantly increased.
For a round-trip time of 1s, even the PAP-only attack
would take at most half an hour (12 minutes on average),
which is still an eminently practical amount of time in
many real-world settings.
7.6 Effectiveness against modern defenses
The presented attacks change the picture for the protec-
tion offered by state-of-the-art defense mechanisms that
rely on information hiding. CPI’s safe area [3] and many
other prior solutions [4, 23, 19, 24] rely on information
hiding to protect a single hidden region. For all such so-
lutions, our attacks in Section 4 apply directly and can
USENIX Association  
25th USENIX Security Symposium  131
11
locate the hidden region with little or no crashes. Prior
work has demonstrated a memory probing-based crash-
free CPI bypass with roughly 110,000,000 operations on
nginx [12]. Using our combined EAP and PAP crash-free
attack, we can replicate their attack needing only 74 op-
erations in the worst case (Fig. 2). This is a 1,400,000x
improvement in attack efﬁciency, which, projected on the
request time reported in [12], translates to 0.23s (rather
than 97 hours) to locate the hidden region. In addition,
our crash-free attack is even faster than the fast crash-
prone attack presented in [12] (6s with 13 crashes).
More recent client-side probing attacks [11] offer
similar guarantees (i.e., locating CPI’s safe area in 32
probes), but their probing strategy relies on exception
handling rather than crash recovery, ultimately improv-
ing the attack efﬁciency. We note that both existing prob-
ing attacks [12, 11] exploit assumptions on CPI’s huge
hidden region size (on the order of 242 bytes when using
a sparse table and 230.4 when utilizing a hash table [11])
to reduce the entropy and make the attack practical. In
stark contrast, our attacks make no assumptions on the
region size, and doing so would allow even a PAP-only
attack to succeed without crashes.
Other solutions, such as ASLR-Guard [6], SafeS-
tack [3], and other shadow stack implementations [25],
rely on information hiding to protect multiple hidden re-
gions. For example, all the shadow stack solutions need
to maintain a per-thread hidden region. We note that
our attacks generalize to multi-region information hid-
ing with essentially the same impact. In particular, while
multi-threaded programs disqualify the simple EAP-only
attack, our best (EAP+PAP) attack naturally extends to
multi-region solutions and can quickly bypass them (al-
though more allocations may be required).
Finally, many leakage-resilient defenses [26, 27,
28, 29] enforce execute-only memory to protect the
hidden (code) region from read-based disclosure at-
tacks [1]. However, such defenses are susceptible to
execution-based disclosure attacks in crash-tolerant ap-
plications [10]. To counter such attacks, some solutions
deploy booby traps in out-of-band trampolines [26, 27].
With allocation oracles, an attacker can sidestep the
booby-trapped trampolines and quickly ﬁnd the hidden
region, enabling more practical and guided execution-
based disclosure attacks against such defenses.
8 Mitigations
One strategy to defend against allocation oracles is to en-
force an upper limit on the maximum amount of virtual
memory that a process can allocate. This mechanism is
already available on Linux (and other POSIX-compatible
operating systems) via the RLIMIT_AS resource limit
(adjustable via setrlimit). Setting this limit to a small,
though still sufﬁcient for most current applications, value
would thwart any attempts to probe the sizes of the larger
holes in the address space. The resource limit can be set
by the application itself (in which case, a defense mech-
anism could intercept it and adjust it to accommodate its
own needs for virtual addresses) or it can be hard-capped
by the administrators without any need for program ad-
justments. The main difﬁculty lies in predicting the max-
imum virtual address space usage under all conceivable
conditions so as to never deny legitimate allocation re-
quests for production applications. Nonetheless, its wide
availability, straightforward deployment, and robustness
(see below) make RLIMIT_AS our primary recommenda-
tion for compatible workloads and conﬁgurations.
For some classes of applications (especially those re-
lying on memory overcommit), limiting the amount of
virtual address space available may be problematic, e.g.,
when memory-mapping huge ﬁles.
In such cases, one
could switch to a strict overcommit policy and have
the applications always use mmap’s MAP_NORESERVE
ﬂag for huge—but known to be benign—allocations.
MAP_NORESERVE instructs the kernel not to count the
corresponding allocations towards the overcommit limit.
However, this mitigation strategy would still allow an at-
tacker to inject the MAP_NORESERVE ﬂag in mmap calls
using memory-resident arguments and craft our primi-
tives. Another issue with such a strict overcommit strat-
egy is that it is incompatible with memory-hungry ap-
plications that rely on fork and cannot simply switch to
vfork (the redis server being a prime example). This
problem can only be directly mitigated with the addition
of a new ﬂag to the clone system call to mimic the se-
mantics of MAP_NORESERVE.
In some setups, one may deploy an IDS looking for
anomalous events (i.e., allocations) in a given applica-
tion [30]. However, this approach generally requires per-
application policies (e.g., only allow huge allocations of
a speciﬁc size). A policy looking for frequent huge al-
locations in arbitrary applications is more generic but
problematic, as an attacker can easily dilute the very few
probing attempts required by our attacks over time [30].
Finally, defense mechanisms could bracket their hid-
den regions with randomly-sized trip hazard areas [31] to
deter in-region memory probing. This is the immediate
systemwide mitigation we recommend for information-
hiding-based solutions already deployed in produc-
tion [32]. Albeit still probabilistic (and thus prone to at-
tacks), such solution can also provide efﬁcient protection
against other (known) side-channel attacks [31].
9 Related work
We distinguish between approaches that that aim at
breaking ASLR in general and approaches that try to
12