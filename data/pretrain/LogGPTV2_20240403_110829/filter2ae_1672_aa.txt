**作者：昏鸦@知道创宇404区块链安全研究团队  
时间：2020年8月18日 **
### 前言
以太坊（Ethereum）是一个开源的有智能合约功能的公共区块链平台，通过其专用加密货币以太币（ETH）提供去中心化的以太坊虚拟机（EVM）来处理点对点合约。EVM（Ethereum
Virtual
Machine），以太坊虚拟机的简称，是以太坊的核心之一。智能合约的创建和执行都由EVM来完成，简单来说，EVM是一个状态执行的机器，输入是solidity编译后的二进制指令和节点的状态数据，输出是节点状态的改变。
以太坊短地址攻击，最早由Golem团队于2017年4月提出，是由于底层EVM的设计缺陷导致的漏洞。ERC20代币标准定义的转账函数如下：
`function transfer(address to, uint256 value) public returns (bool success)`
如果传入的`to`是末端缺省的短地址，EVM会将后面字节补足地址，而最后的`value`值不足则用0填充，导致实际转出的代币数值倍增。
本文从以太坊源码的角度分析EVM底层是如何处理执行智能合约字节码的，并简要分析短地址攻击的原理。
### EVM源码分析
#### evm.go
EVM的源码位于`go-ethereum/core/vm/`目录下，在`evm.go`中定义了EVM结构体，并实现了`EVM.Call`、`EVM.CallCode`、`EVM.DelegateCall`、`EVM.StaticCall`四种方法来调用智能合约，`EVM.Call`实现了基本的合约调用的功能，后面三种方法与`EVM.Call`略有区别，但最终都调用`run`函数来解析执行智能合约
###### EVM.Call
    // Call executes the contract associated with the addr with the given input as
    // parameters. It also handles any necessary value transfer required and takes
    // the necessary steps to create accounts and reverses the state in case of an
    // execution error or failed value transfer.
    //hunya// 基本的合约调用
    func (evm *EVM) Call(caller ContractRef, addr common.Address, input []byte, gas uint64, value *big.Int) (ret []byte, leftOverGas uint64, err error) {
        if evm.vmConfig.NoRecursion && evm.depth > 0 {
            return nil, gas, nil
        }
        // Fail if we're trying to execute above the call depth limit
        if evm.depth > int(params.CallCreateDepth) {
            return nil, gas, ErrDepth
        }
        // Fail if we're trying to transfer more than the available balance
        if !evm.Context.CanTransfer(evm.StateDB, caller.Address(), value) {
            return nil, gas, ErrInsufficientBalance
        }
        var (
            to       = AccountRef(addr)
            snapshot = evm.StateDB.Snapshot()
        )
        if !evm.StateDB.Exist(addr) {
            precompiles := PrecompiledContractsHomestead
            if evm.chainRules.IsByzantium {
                precompiles = PrecompiledContractsByzantium
            }
            if evm.chainRules.IsIstanbul {
                precompiles = PrecompiledContractsIstanbul
            }
            if precompiles[addr] == nil && evm.chainRules.IsEIP158 && value.Sign() == 0 {
                // Calling a non existing account, don't do anything, but ping the tracer
                if evm.vmConfig.Debug && evm.depth == 0 {
                    evm.vmConfig.Tracer.CaptureStart(caller.Address(), addr, false, input, gas, value)
                    evm.vmConfig.Tracer.CaptureEnd(ret, 0, 0, nil)
                }
                return nil, gas, nil
            }
            evm.StateDB.CreateAccount(addr)
        }
        evm.Transfer(evm.StateDB, caller.Address(), to.Address(), value)
        // Initialise a new contract and set the code that is to be used by the EVM.
        // The contract is a scoped environment for this execution context only.
        contract := NewContract(caller, to, value, gas)
        contract.SetCallCode(&addr, evm.StateDB.GetCodeHash(addr), evm.StateDB.GetCode(addr))
        // Even if the account has no code, we need to continue because it might be a precompile
        start := time.Now()
        // Capture the tracer start/end events in debug mode
        // debug模式会捕获tracer的start/end事件
        if evm.vmConfig.Debug && evm.depth == 0 {
            evm.vmConfig.Tracer.CaptureStart(caller.Address(), addr, false, input, gas, value)
            defer func() { // Lazy evaluation of the parameters
                evm.vmConfig.Tracer.CaptureEnd(ret, gas-contract.Gas, time.Since(start), err)
            }()
        }
        ret, err = run(evm, contract, input, false)//hunya// 调用run函数执行合约
        // When an error was returned by the EVM or when setting the creation code
        // above we revert to the snapshot and consume any gas remaining. Additionally
        // when we're in homestead this also counts for code storage gas errors.
        if err != nil {
            evm.StateDB.RevertToSnapshot(snapshot)
            if err != errExecutionReverted {
                contract.UseGas(contract.Gas)
            }
        }
        return ret, contract.Gas, err
    }
###### EVM.CallCode
    // CallCode executes the contract associated with the addr with the given input
    // as parameters. It also handles any necessary value transfer required and takes
    // the necessary steps to create accounts and reverses the state in case of an
    // execution error or failed value transfer.
    //
    // CallCode differs from Call in the sense that it executes the given address'
    // code with the caller as context.
    //hunya// 类似solidity中的call函数，调用外部合约，执行上下文在被调用合约中
    func (evm *EVM) CallCode(caller ContractRef, addr common.Address, input []byte, gas uint64, value *big.Int) (ret []byte, leftOverGas uint64, err error) {
        if evm.vmConfig.NoRecursion && evm.depth > 0 {
            return nil, gas, nil
        }
        // Fail if we're trying to execute above the call depth limit
        if evm.depth > int(params.CallCreateDepth) {
            return nil, gas, ErrDepth
        }
        // Fail if we're trying to transfer more than the available balance
        if !evm.CanTransfer(evm.StateDB, caller.Address(), value) {
            return nil, gas, ErrInsufficientBalance
        }
        var (
            snapshot = evm.StateDB.Snapshot()
            to       = AccountRef(caller.Address())
        )
        // Initialise a new contract and set the code that is to be used by the EVM.
        // The contract is a scoped environment for this execution context only.
        contract := NewContract(caller, to, value, gas)
        contract.SetCallCode(&addr, evm.StateDB.GetCodeHash(addr), evm.StateDB.GetCode(addr))
        ret, err = run(evm, contract, input, false)//hunya// 调用run函数执行合约
        if err != nil {
            evm.StateDB.RevertToSnapshot(snapshot)
            if err != errExecutionReverted {
                contract.UseGas(contract.Gas)
            }
        }
        return ret, contract.Gas, err
    }
###### EVM.DelegateCall
    // DelegateCall executes the contract associated with the addr with the given input
    // as parameters. It reverses the state in case of an execution error.
    //
    // DelegateCall differs from CallCode in the sense that it executes the given address'
    // code with the caller as context and the caller is set to the caller of the caller.
    //hunya// 类似solidity中的delegatecall函数，调用外部合约，执行上下文在调用合约中
    func (evm *EVM) DelegateCall(caller ContractRef, addr common.Address, input []byte, gas uint64) (ret []byte, leftOverGas uint64, err error) {
        if evm.vmConfig.NoRecursion && evm.depth > 0 {
            return nil, gas, nil
        }
        // Fail if we're trying to execute above the call depth limit
        if evm.depth > int(params.CallCreateDepth) {
            return nil, gas, ErrDepth
        }
        var (
            snapshot = evm.StateDB.Snapshot()
            to       = AccountRef(caller.Address())
        )
        // Initialise a new contract and make initialise the delegate values
        contract := NewContract(caller, to, nil, gas).AsDelegate()
        contract.SetCallCode(&addr, evm.StateDB.GetCodeHash(addr), evm.StateDB.GetCode(addr))
        ret, err = run(evm, contract, input, false)//hunya// 调用run函数执行合约