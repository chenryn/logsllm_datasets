User: Assuming you're using Ansible automation tools to manage a group of servers, how about writing an Ansible Playbook that automates the installation and configuration of a MySQL database?
Assistant: Here is a simple Ansible Playbook example for installing and configuring a MySQL database: --- - hosts: all become: yes tasks: - name: Install MySQL apt: name: mysql-server state: latest - name: Secure MySQL Installation mysql_user: name: root password: "{{ mysql_root_password }}" login_unix_socket: /var/run/mysqld/mysqld.sock check_implicit_admin: yes - name: Create Database mysql_db: name: "{{ db_name }}" state: present - name : Create Database User mysql_user: name: "{{ db_user }}" password: "{{ db_password }}" priv: "{{ db_name }}.*:ALL" state: present In the above Playbook, we first use apt The module installs the MySQL server, and then uses the mysql_user module to set the root user's password for security. Then we created a database using the mysql_db module, and finally created a database user. Among them, the variables mysql_root_password, db_name, db_user and db_password need to be set in the Inventory file or host variable in advance.