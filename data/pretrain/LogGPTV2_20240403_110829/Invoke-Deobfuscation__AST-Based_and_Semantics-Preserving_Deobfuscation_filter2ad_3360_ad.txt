types obfuscation techniques [30] and even come from manual
generation [19]. Compared with the previous datasets, the
obfuscation techniques, malicious functionalities and content
structures of scripts in our dataset are more diverse. The ﬁle
size of these scripts is from 8 bytes to 26 MB and the total
size of the dataset is 7.75 GB.
2) Quantiﬁcation of Obfuscation: We quantify the obfus-
cation of a sample by scoring the known obfuscation in the
sample. In Section II-B, we divide the different obfuscation
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:14:55 UTC from IEEE Xplore.  Restrictions apply. 
6300
TABLE II: Comparison of deobfuscation ability of different tools.
Level
Type
Subtype
Ticking
PowerDrive
Alias
-
Concatenate
1
2
3
String-related
Randomization Whitespacing
Random Case
Random Name
(cid:88)
×
×
×
×
(cid:88)
×
×
×
×
×
×
×
×
×
×
(cid:13) Can only successfully handle partial obfuscation.
Binary/Octal
ASCII/Hex
SecureString
Compress
Base64
Whitespace
Specialchar
Reorder
Replace
Reverse
DeﬂateStream
Bxor
-
Encoding
PSDecode
(cid:88)
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
PowerDecode
×
×
×
×
×
(cid:88)
×
(cid:88)
×
×
×
×
×
×
×
×
Li et al. Our tool
(cid:88)
×
×
×
×
(cid:13)
(cid:13)
×
×
×
(cid:13)
×
×
×
×
×
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
×
(cid:88)
(cid:88)
(cid:88)
(cid:88)
techniques into three levels, namely, L1, L2 and L3. For all
obfuscation techniques that appear in a script, we score them
according to their level of obfuscation. For example, if an
obfuscation technique is at the L1 level, its score is one. We
only score once for each type of obfuscation that appears in the
script. Finally, we sum these scores to get the ﬁnal obfuscation
score of the script. Based on regular expression matching,
tokens and AST of PowerShell scripts, we can identify all
known obfuscation techniques shown in Table II.
C. Evaluation Results
1) Deobfuscation Ability: Deobfuscation ability is deter-
mined by precisely identifying obfuscation and correctly deal-
ing with obfuscation. We consider that a deobfuscation tool has
the ability to deal with a certain type of obfuscation technique
only if it can recover the script pieces obfuscated using
only that technique. Therefore, we utilize known obfuscation
techniques to obfuscate the command write-host hello
and put the obfuscated script pieces in three different po-
sitions, i.e., separate line, assignment expression, and part
of a pipe. For example, the results of 'a'+'b' in three
different positions are 'a'+'b', $tmp = 'a'+'b' and
'a'+'b'|out-null, respectively. For a speciﬁc obfusca-
tion technique, we consider a tool having complete deobfusca-
tion ability if it can identify and recover all obfuscated script
pieces in the three positions.
We make a little change to the previous works for compar-
ison. PSDecode, PowerDrive and PowerDecode use different
layers to store their deobfuscation results at different stages.
We only keep the last layers as their ﬁnal result. Li et al. use
a classiﬁer to identify the obfuscated subtree of AST, we are
not able to obtain the model from the authors. Furthermore, Li
et al. only deal with the subtrees whose root are PipelineAst
in their source code. Therefore, we delete the classiﬁcation
module and make their tool traverse all subtrees whose root
are PipelineAst, which only affects a little bit of run time.
Result. As shown in Table II, our tool can handle almost all
known obfuscation in all positions. Because our tool identiﬁes
obfuscated script pieces through tokens and recoverable nodes
of AST, which is robust enough to identify obfuscation in
different positions. With variable tracing and executing the
obfuscated pieces, we can correctly recover the script pieces.
Moreover, our tool is capable of handling complex multi-layer
obfuscation. Due to the limitation of our variable tracing, we
cannot deal with the whitespace encoding obfuscation which
often has a loop statement. However, whitespace encoding
obfuscation only accounts for 0.1% in the dataset.
In comparison, PSDecode, PowerDrive and PowerDecode
can only deal with a few obfuscation techniques. Because
they use regular expression to match speciﬁc obfuscation
techniques, ignoring the syntax of scripts. Moreover, regular
expression needs to design different patterns to match different
obfuscation techniques, which is not robust and cannot identify
complex obfuscation script pieces. Li et al. only deal with
obfuscation on PipelineAst node, which is coarse-grained
and will miss many obfuscated script pieces. They cannot
identify and handle the obfuscated script pieces in the last
two positions. Besides, due to the lack of context, they cannot
deal with obfuscated script pieces with variables. Because the
four tools do not parse tokens of the scripts, they cannot deal
with most obfuscation at the token level.
2) Deobfuscation Effectiveness and Efﬁciency: We com-
pare the deobfuscation effectiveness of different tools by the
number of key information in their deobfuscation results.
Meanwhile, we record the deobfuscation time of these tools for
efﬁciency evaluation. We sample 100 obfuscated PowerShell
scripts whose sizes are between 97 bytes and 2 KB. We select
four types of key information, namely, ps1 ﬁles, PowerShell
command, URLs and IP, which are valuable in malicious script
analysis. Ps1 ﬁles often represent malicious script paths, and
PowerShell command can execute its parameter as a script. For
better comparison, we use the manual deobfuscation results as
the benchmark. Then we extract four types of key information
from their deobfuscation results, respectively. Besides, there
are 12 scripts with multi-layer obfuscation. Therefore, we
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:14:55 UTC from IEEE Xplore.  Restrictions apply. 
7301
compare the ability of different tools to handle multi-layer
obfuscation.
TABLE III: Comparison of the ability to handle multiple
layers of obfuscation.
#Samples
Proportion
PSDecode
PowerDrive
PowerDecode
Li et al.
Our tool
2
1
8
0
12
16.7%
8.3%
66.7%
0%
100%
deal with a single layer obfuscation. PowerDecode designs
Unary Syntax Tree Model to handle multi-layer obfuscation so
that it performs better than the other three previous works. As
shown in Table II, the deobfuscation ability of PowerDecode
is limited so that it may fail to get the correct ﬁnal results. Li
et al. cannot deal with multi-layer obfuscation.
3) Behavioral Consistency: Semantic consistency is a very
important
indicator of deobfuscation. If the deobfuscation
process changes the semantics of scripts, the deobfuscation
results cannot be used for further analysis. For quantitative
analysis, we use behavioral consistency instead of semantic
consistency. If two scripts have the same semantics, they will
have the same behavior. Here we use the same samples as
in section IV-C2. To simplify the analysis, we only compare
the network behavior, like DNS query and TCP connection,
between the original samples and deobfuscated samples. In
this experiment, we utilize the TianQiong sandbox [33] to
collect the network behavior of the samples. Because some
deobfuscation tools [16], [18] may sometimes return the
original scripts as the results of deobfuscation, we do not
consider them to be effective deobfuscation results.
TABLE IV: Comparison with state-of-the-art
tools in
behavior consistency. Effective represents the number of
effectively deobfuscated scripts that have the same behavior
as the original scripts.
#Samples with Network
#Effective
Proportion
OriginData
PSDecode
PowerDrive
PowerDecode
Li et al.
Our tool
32