Chapter 6 n Fuzzing iOS Applications 143
| “DELETE” ; Section 9.7
| “TRACE” ; Section 9.8
| “CONNECT” ; Section 9.9
| extension-method
extension-method = token
This continues on for quite a while, but eventually, the RFC specifi es the
possible layout of every HTTP message. You can write a program that will create
/valid/ but /malformed/ HTTP messages if the program understands this RFC
specifi cation. For example, it could generate a completely valid R equest-URI but
choose a particularly long method name.
The disadvantage of generation-based fuzzing is that it requires a lot of work!
You have to understand the protocol (which may be proprietary) and have a
program that can generate inputs that are malformed but mostly compliant. You
see later how to use a fuzzing framework to help with this. Clearly, this is much
more work than simply fi nding a valid HTTP message and making random
changes to it. However, the advantage should be equally obvious. In this case, if
there is a vulnerability in the way the server handles HTTP TRACE requests, the
mutation-based fuzzing approach doesn’t uncover it because it makes only GET
requests (or randomly named request methods). A generation-based approach
constructs fuzzed REQUEST-LINEs for each of the possible methods, which reveals
this theoretical bug. As they say, you get what you pay for, and the same is true
here. The more effort you put into fuzzing, the more likely you’ll have something
to show for it. Later in this chapter, you see how to create generation-based test
cases using the Sulley fuzzing framework.
Submitting and Monitoring the Test Cases
At this point in the process you have a large set of inputs you’d like to send to
the program and you have to fi gure out how to get them there. For fi les, this
might require launching the program over and over with a particular command-
line argument. For network servers, you may need to have a program that can
repeatedly connect and send one of the test cases. This is normally one of the
easiest steps in the fuzzing process, but can be diffi cult sometimes in iOS because
this operating system is not designed to be a fully functioning computer, but
rather just a phone or other such device. So, for example, MobileSafari was never
designed to be launched from the command line and thus cannot accept URLs
that way. Alternative methods must be investigated in this case.
The fi nal step is to monitor the application being fuzzed for any faults. This
is a really crucial step in fuzzing that is often overlooked. You may create the
cleverest test cases in the world, but if you can’t tell when something has gone
wrong, it does no good to perform the testing. Likewise, if you cannot replicate
faults, by saving the test cases for example, it does no good to discover a problem.
cc0066..iinndddd 114433 44//1166//22001122 55::4455::1199 PPMM
144 Chapter 6 n Fuzzing iOS Applications
The simplest way to monitor applications is to attach a debugger to them and
watch for exceptions or signals. When a program dies, it generates a signal that
the debugger can act upon. This generally isn’t necessary in Mac OS X or in iOS,
which you see shortly. More sophisticated methods can also be used to moni-
tor the application. You can monitor what fi les are opened by the application,
memory usage, and so on. Overall, the more you monitor, the more types of
problems you can notice when the right test case is input into the application.
It is time to put this introduction to fuzzing to use.
Fuzzing Safari
iOS runs a stripped-down version of Mac OS X. In fact, there is a large portion
of the code that is identical, simply recompiled for ARM instead of x86 (or
PowerPC). Therefore, one option when looking for bugs in iOS is to look for
bugs in the code for Mac OS X that is shared with iOS. This is easier said than
done, and it is possible you’ll be wasting time looking in code that isn’t even in
iOS. The advantage of looking for Mac OS X bugs is that everything is simpler
on the desktop. You can run multiple fuzzing instances against many comput-
ers, all the desktops will have superior hardware compared to the iOS devices,
more utilities are available for use, and so on. In other words, it is easier to set
up a fuzzing run and you can fuzz many more test cases in a given amount of
time on Mac OS X desktops compared to iOS devices. The only real drawback is
that you might end up discovering vulnerabilities that are in Mac OS X and not
in iOS, which isn’t the end of the world. I talk about more iOS-specifi c options
later in this chapter.
Choosing an Interface
First off, you need to choose something to fuzz. Because both Safari and
MobileSafari run WebKit, there is a lot of shared code to fuzz there. For
simplicity, the example in this section fuzzes the Portable Document Format
(PDF). Both Safari and MobileSafari render these documents. This document
format is a nice target because it is a binary format, which is pretty complex.
Because Adobe announces many vulnerabilities in Acrobat Reader every few
months, and the Mac OS X libraries need to handle similar documents, it is
reasonable to think there might be vulnerabilities lurking in this code as well.
Generating Test Cases
One of the great things about fuzzing fi le formats is that it is easy to generate
a large number of test cases. To use mutation-based fuzzing, simply fi nd a
sample PDF fi le (or many) and make random mutations to it. The quality of the
cc0066..iinndddd 114444 44//1166//22001122 55::4455::1199 PPMM
Chapter 6 n Fuzzing iOS Applications 145
test cases will depend on the PDF you use. If you use a very simple fi le, it will
not test much of the PDF parsing code. A complex fi le will work better. Ideally,
you should generate test cases from many different initial PDFs, each exercising
different features present in the PDF specifi cation.
The following Python function adds random mutations to a buffer. You can
imagine reading in a PDF and repeatedly calling this function on its contents
to generate different mutated fi les:
def fuzz_buffer(buffer, FuzzFactor):
buf = list(buffer)
numwrites=random.randrange(math.ceil((fl oat(len(buf)) /
FuzzFactor)))+1
for j in range(numwrites):
rbyte = random.randrange(256)
rn = random.randrange(len(buf))
buf[rn] = “%c”%(rbyte);
return “”.join(buf)
Although this code is extremely naive, it has been used in the past to fi nd a
large number of vulnerabilities in Mac OS X and iOS.
Testing and Monitoring the Application
You can combine testing and monitoring because the tool you’re writing will be
responsible for both. The fuzzed inputs generated by the fuzz_buffer function
need to be sent to the application under test. Equally importantly, you need
to monitor the application to see if the inputs cause it some trouble. After all,
it doesn’t do any good to craft the perfect malicious input and send it to the
program being tested if you don’t know that it caused a crash!
Crash Reporter, available on Mac OS X as well as iOS, is an excellent mechanism
for determining when something has crashed. This isn’t totally ideal for fuzzing,
because the results of Crash Reporter are fi les in a directory that show up a
short time after a crash and disappear after some number of crashes occurs.
Therefore, for monitoring it may be better to imitate the crash.exe application
for Windows. crash.exe, written by Michael Sutton, can be found as part of
FileFuzz (http://labs.idefense.com/software/fuzzing.php.) This simple
program takes as command-line arguments a program to launch, the number
of milliseconds required to run the fi le, and a list of command-line arguments
to the program being tested.
crash.exe then launches the program and attaches to it so it can monitor
for crashes or other bad behavior. If the application crashes, it prints some
information about the registers at the time of the crash. Otherwise, after
the number of milliseconds specified, it kills the program and exits (see
Figure 6-1).
cc0066..iinndddd 114455 44//1166//22001122 55::4455::1199 PPMM
146 Chapter 6 n Fuzzing iOS Applications
Figure 6.1: Finding crashes with crash.exe on Windows
Basically, crash.exe has the following features that are ideal for executing a
target program multiple times in succession. It launches the target program with
a specifi ed argument. It is guaranteed to return after a specifi ed period of time.
It identifi es when a crash occurs and gives some information about the crash, in
this case, a context dump of the registers. Otherwise, it prints that the process
has terminated. Finally, you know that the target process is not running after
crash.exe ends. This last piece is important because programs often act differ-
ently if they are started while another occurrence of them is already running.
The following example shows that it is pretty straightforward to imitate this
behavior on Mac OS X with a simple shell script named crash, taking advantage
of the way Crash Reporter works. (This script is written in bash instead of
Python so you can use it on iOS later, and it’s best to avoid Python in iOS, since
it runs a bit slow there.)
#!/bin/bash
mkdir logdir 2>/dev/null
app=$1
url=$2
sleeptime=$3
filename=~/Library/Logs/CrashReporter/$app*
mv $filename logdir/ 2> /dev/null
/usr/bin/killall -9 “$app” 2>/dev/null
open -a “$app” “$url”
sleep $sleeptime
cat $filename 2>/dev/null
This script takes the name of the program to be launched as a command-line
argument, a command-line argument to pass to the program, and the number
of seconds to sleep before returning. It moves any existing crash reports for the
cc0066..iinndddd 114466 44//1166//22001122 55::4455::1199 PPMM
Chapter 6 n Fuzzing iOS Applications 147
application in question to a logging directory. It then kills off any existing target
processes and calls open to launch the application with the specifi ed argument. open
is a good way to launch processes because, for example, it allows you to specify a
URL as a command-line argument to Safari. If you just launch the Safari application,
it expects only a fi lename. Finally, it sleeps for the number of seconds requested
and prints out the crash report, if there is one. Here are two examples of its use:
$ ./crash Safari http://192.168.1.182/good.html 10
$
$ ./crash Safari http://192.168.1.182/bad.html 10
Process: Safari [57528]
Path: /Applications/Safari.app/Contents/MacOS/Safari
Identifier: com.apple.Safari
Version: 5.1.1 (7534.51.22)
Build Info: WebBrowser-7534051022000000~3
Code Type: X86-64 (Native)
Parent Process: launchd [334]
Date/Time: 2011-12-05 09:15:27.988 -0600
OS Version: Mac OS X 10.7.2 (11C74)
Report Version: 9
Crashed Thread: 10
Exception Type: EXC_BAD_ACCESS (SIGBUS)
Exception Codes: KERN_PROTECTION_FAILURE at 0x000000010aad5fe8
...
Thread 0:: Dispatch queue: com.apple.main-thread
0 libsystem_kernel.dylib 0x00007fff917b567a
mach_msg_trap + 10
1 libsystem_kernel.dylib 0x00007fff917b4d71 mach_msg
+ 73
...
With this handy little script, you can easily automate the process of launching
an application and detecting if there is a crash by parsing it’s standard out. The
other good thing is that it works for a variety of applications, not just Safari.
Examples like these work just as well:
$ ./crash TextEdit toc.txt 3
$ ./crash “QuickTime Player” good.mp3 3
So, you have a way to generate inputs and a way to launch a program for
testing and to monitor it. All that remains is to tie it all together:
import random
import math
import subprocess
cc0066..iinndddd 114477 44//1166//22001122 55::4455::2200 PPMM
148 Chapter 6 n Fuzzing iOS Applications
import os
import sys
def fuzz_buffer(buffer, FuzzFactor):
buf = list(buffer)
numwrites=random.randrange(math.ceil((float(len(buf)) /
FuzzFactor)))+1
for j in range(numwrites):
rbyte = random.randrange(256)
rn = random.randrange(len(buf))
buf[rn] = “%c”%(rbyte);
return “”.join(buf)
def fuzz(buf, test_case_number, extension, timeout, app_name):
fuzzed = fuzz_buffer(buf, 10)
fname = str(test_case_number)+”-test”+extension
out = open(fname, “wb”)
out.write(fuzzed)
out.close()
command = [“./crash”, app_name, fname, str(timeout)]
output = subprocess.Popen(command,
stdout=subprocess.PIPE).communicate()[0]
if len(output) > 0:
print “Crash in “+fname
print output
else:
os.unlink(fname)
if(len(sys.argv)  
”
sys.exit(0)
else:
f = open(sys.argv[3], “r”)
inbuf = f.read()
f.close()
ext = sys.argv[3][sys.argv[3].rfind(‘.’):]
for j in range(int(sys.argv[4])):
fuzz(inbuf, j, ext, sys.argv[2], sys.argv[1])
Adventures in PDF Fuzzing
If you run the fuzzer outlined in the previous section with PDFs on an old
version of Mac OS X (
cc0066..iinndddd 114488 44//1166//22001122 55::4455::2200 PPMM
Chapter 6 n Fuzzing iOS Applications 149
AutoSubmitted
SysInfoCrashReporterKey
c81dedd724872cf57fb6a432aa482098265fa401
bug_type
109
description
Incident Identifier: E38AB756-D3E6-43D0-9FFA-
427433986549
CrashReporter Key: c81dedd724872cf57fb6a432aa482098265fa401
Process: MobileSafari [20999]
Path: /Applications/MobileSafari.app/MobileSafari
Identifier: MobileSafari
Version: ??? (???)
Code Type: ARM (Native)
Parent Process: launchd [1]
Date/Time: 2009-06-15 12:57:07.013 -0500
OS Version: iOS OS 2.2 (5G77)
Report Version: 103
Exception Type: EXC_BAD_ACCESS (SIGSEGV)
Exception Codes: KERN_INVALID_ADDRESS at 0xc000000b
Crashed Thread: 0
Thread 0 Crashed:
0 libJBIG2.A.dylib 0x33c88fa8 0x33c80000 + 36776
1 libJBIG2.A.dylib 0x33c89da0 0x33c80000 + 40352
2 libJBIG2.A.dylib 0x33c8a1b0 0x33c80000 + 41392
...
This bug justifies using desktop fuzzing to find iOS bugs, because it
demonstrates that bugs found in the desktop operating system are also present
(sometimes) in iOS. However, things aren’t always so straightforward. It turns
out that even though both the Mac OS X desktop and iOS web browsers render
and display PDF fi les, the iOS version is not as full featured and doesn’t handle
all the intricacies of PDF fi les as well as the Mac OS X version. One prominent
example is the bug Charlie Miller used to win Pwn2Own in 2009 (http://
dvlabs.tippingpoint.com/blog/2009/03/18/pwn2own-2009-day-1---safari-
internet-explorer-and-firefox-taken-down-by-four-zero-day-exploits).
This bug was in the way Mac OS X handled malicious Compact Font Format
(CFF). This vulnerability could be triggered directly in the browser with the
@font-face HTTP tag, but at the contest Miller embedded the font in a PDF.
The heap overfl ow caused by this vulnerability was a little hard to exploit, but
was obviously possible! Things were different in iOS. iOS seemed to ignore
the embedded font completely and was not susceptible to the same fi le. This is
an example of where a bug in OS X, which you might think would be in iOS,
cc0066..iinndddd 114499 44//1166//22001122 55::4455::2200 PPMM
150 Chapter 6 n Fuzzing iOS Applications