记一次受限制的文件下载
其实这个操作比较简陋主要是减少了很多其他功夫
首先在 app 中发现这个功能
可以下载合同信息，里边有很多敏感信息等 且可以下载导出的
点击下载 然后分享一下
手机登录
qq
然后就可以分享到 qq 好友
就可以查看文件了
就能获取到这个合同的详细信息了
这里有一个点
有几个数据包 是能看到
合同 的内容 ，合同的下载地址两个信息
这里的 frameurl 需要留意一下
但是 有签名校验 ，无法越权等操作（这里的签名之前绕过所以加了两层 不太好去跟 也是
后边直接 hook 的原因）
其中发现有一个数据包泄露了合同地址
于是直接 curl 下载一下看看
发现无响应
然后我解析了一下域名发现
这时候在考虑它是怎么下载的
所以推测是利用 app 本身重组数据包调用它其他的接口下载
然后上 jadx 查看 app 代码
查看数据包 通过上述有几个数据包 泄露的返回包信息的 几个特殊字段
就是上边的 frameurl 这种比较唯一的字段能很快的帮助我们定位到比较准确的位置
然后搜了一下索引，在根据 函数的声明和引用 最后定位到了这里
发现这个关键词 download
和 filepath 感觉很像这里
上 objection hook 一下这个函数
然后去下载合同功能 点一下
发现成功打印出参数
返回值 调用栈
发现确实 这个合同的地址 走到了这里
所以 想到 我可以通过 frida 直接 hook 这个函数。 因为它的参数校验比较多，去跟的话
太费时间了。
我去传入合同地址 让他去下载。然后我再导出即可。
发现这个文件名构造非常简单
合同地址后边是时间戳
然后通过它的 web 端 找到了一处可以越权查看所有合同的创建时间（这里是之前测试发现
一处没啥用的越权 没在意就留着了）
遍历这个点
就可以获取到 所有合同的生效时间了
这样对于后边我们批量获取合同文件名
结合 就完成了攻击链
碰到没啥用的漏洞可以先留着 说不定后边就用到了。。。
开始 hook 登录进去点击我的合同
直接重复之前的下载过程
成功 hook 完整下载
其实这个 后边 还能 玩一下 ssrf 到内网的。
因为我们文件的下载地址也是本地局域网的。同理找一下内网的地址试一下
跟一下这个函数完整的流程也能找到它去处理这个地址构造发包的逻辑，
如果要跟 sign 的不知道要花多少时间，这个点前后 10 分钟就梭哈完成了。危害厂商也是拉
满了