### Line 15 and Selector(p, φ)
At line 15, the function can be set to `Selector(p, φ)`. In this case, the process uses its timestamp. If the function is defined for phases φ (lines 7 and 19), it holds true for each process. The same applies when dealing with benign faults, where `p` and all processes on each process, `φ`, are involved. At line 21, `Selector(p, φ)` is the process from which the validation round message is received.

### Validation Rounds
The validation rounds, `P cons`, are defined in [17] for rounds in which all processes do not require a trivial message exchange. We assume here a variant of the function `FLV(iI;)` for all-to-all message sending. Line 26 is not mandatory but simplifies the instantiation of `FLV(iI;)`.

### Properties of FLV(iI;)
The function `FLV(iI;)` must satisfy the following three properties:
- **FLV-Validity**: If `FLV(iI;)` returns a value `v` and `v ≠ null`, then `v ∈ {vote: (vote, -, -) ∈ iI;}`.
- **FLV-Agreement**: If a value `v` is locked in round `r`, only `v` or `null` can be returned.
- **FLV-Liveness**: If there exists a process `q` such that `iI;[q] ≠ ⊥`, then `null` cannot be returned.

### Correctness of the Generic Algorithm
For a process to start, two criteria must be met:
1. **FLAG = φ**: Only validated votes must be considered.
2. **FLAG = ***: All votes are considered.

#### Decision Round (r = 3φ)
The decision round determines the conditions under which a process decides by sending its vote and timestamp. If a process receives a threshold number `TD` of identical votes, it decides. This is defined by the flag `FLAG`. To our knowledge, in the current round, all votes are considered. 

**Optimization**: 
- The validation round of phase `φ` can be executed concurrently with the selection round of phase `φ + 1`.
- The set `tsp` and `historyp` can be suppressed.
- The decision round can be suppressed if the validation round has been considered.

### Parameters
We identify two categories of parameters:
1. **First Category**: Includes `TD` and `FLAG`, which influence the properties of the instantiated algorithm.
   - **TD**: Defines the number of identical votes required to decide.
   - **FLAG**: Determines whether all votes (`FLAG = *`) or only validated votes (`FLAG = φ`) are considered.

2. **Second Category**: Contains the functions `Selector(p, φ)` and `FLV(iI;)`, which define the selection and validation processes.

### Instantiations and Classification
We present three instantiations of the `FLV` and `Selector` functions, leading to three classes of consensus algorithms. Each class is characterized by different values of `FLAG` and `TD`.

#### Table 1: Three Classes of Consensus Algorithms
| FLAG | TD | n | Process State | Rounds per Phase | Examples |
|------|----|---|---------------|------------------|----------|
| *    | > 2 | > 5b + 3f | (votep) | 2 | OneThirdRule [6] (b = 0), FaBPaxos [16] (f = 0) |
| φ    | > 3b + 1 | > 4b + 2f | (votep, tsp) | 3 | Paxos [11], CT [5] (b = 0), MQB (f = 0) (newalg) |
| φ    | > 2b + 1 | > 3b + 2f | (votep, tsp, historyp) | 3 | Paxos, PBFT [4] (f = 0) |

### Comments
- **Classes 2 and 3**: Are identical for benign faults (b = 0) since `historyp` can be ignored.
- **Class 1**: Requires the largest `n` (n > 5b + 3f).
- **New Algorithm**: We introduce a new algorithm, `MQB` (Masking Quorum Byzantine), which belongs to class 3 for the case b = 0.

### Instantiations of FLV(iI;)
We provide the intuition behind the instantiations, ensuring the properties defined in Section 3.2 hold. The proofs can be found in [19].

#### Class 1: FLV(iI;)
```algorithm
Algorithm 2: FLV(iI;) for class 1
1: correctVotes = {(v, -, -) ∈ iI;} | v ≠ ?}
2: if |correctVotes| > 2(n - TD + b) then
3:   return ?
4: else
5:   return null
```
- **Line 1**: Ensures `FLV-Agreement`.
- **Line 2**: Prevents returning `?` if more than 2(n - TD + b) messages are received.
- **Line 3**: Returns `?` if the condition in line 2 holds.
- **Line 4**: Returns `null` otherwise.

This ensures that `FLV` returns `?` only when necessary and maintains the properties of validity, agreement, and liveness.