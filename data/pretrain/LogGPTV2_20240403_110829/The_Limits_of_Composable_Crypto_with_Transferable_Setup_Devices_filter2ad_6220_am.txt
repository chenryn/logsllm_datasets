(cid:20)2N (cid:17){
}
}
it holds that
{
}
c(cid:25){
Claim 5.18
View(cid:5)H7 ;S7;Z ((cid:20))
(cid:20)2N
View(cid:5)H8 ;S8;Z ((cid:20))
(cid:20)2N:
Finally, we note that hybrid H8 is identical to the simulated execution which concludes the proof.
On relying on one-way functions.
In this protocol the only place where one-way permutations are used is
in the commitments made by the sender in the second round of the protocol via a non-interactive perfectly-
binding commitment. This protocol can be easily modiﬁed to rely on statistically-binding commitments
which have two-round constructions based on one-way functions [Nao91]. Speciﬁcally, since the sender
commits to its messages only in the second-round, the receiver can provide the ﬁrst message of the two-
round commitment scheme along with the ﬁrst message of the protocol.
5.1 Two-Round 2PC Using Stateless Tokens
In [IKO+11], the authors provide a two-round UC secure protocol in the OT-hybrid between a sender and a
receiver where the receiver obtains the output of the computation at the end of the second round. First, we
observe that we can repeat our OT protocol in parallel. Then, obtaining UC secure two-party computation
using tokens is carried out by running the two-round protocol of [IKO+11] in parallel with our OT protocol.
45
Namely, upon receiving the second message for the [IKO+11] and OT protocols, the receiver computes the
OT outcome and uses these to compute the outcome of the [IKO+11] protocol.
In more details, in order to achieve simulation when the sender is corrupted, we rely on the receiver
simulation for both our OT protocol and the [IKO+11] protocol. Next, we observe that, after the simulation
submits the receiver’s ﬁrst message, it can extract the sender’s input by extracting the sender’s input to the
OT tokens. To achieve simulation when the receiver is corrupted, the simulator ﬁrst extracts the receiver’s
input by extracting the receiver’s input to the OT tokens. Then the simulation queries the ideal functionality
to obtain the output of the function evaluation on their private inputs. Using the output, the simulator next
sets up the OT part of the sender’s message using the OT simulation and submits the [IKO+11] sender’s
message using the [IKO+11] simulation. Thus, we obtain the following theorem:
Theorem 5.2 Assuming one-way functions, there exists a two-round two-party protocol for any well-formed
functionality that is GUC secure in the presence of static malicious adversaries.
5.2 GUC-Secure MPC using Stateless Tokens from One-Way Functions
From the work of [IPS08], we know that assuming one-way functions, there exists a multiparty protocol
in the OT-hybrid to securely realize any well-formed functionality with UC-security. Since, we realize the
GUC-OT functionality combining with the works of [IPS08] we obtain the following corollary:
Theorem 5.3 Assuming one-way functions, there exists a O(df ) multi-party protocol for any well-formed
functionality f that is GUC secure in the presence of static malicious adversaries where df is the depth of
the circuit implementing the function f.
5.3 On Reusability
As in our protocol from Section 4, we discuss below how to handle exchange tokens just once and reusing
them for an unbounded number of oblivious transfers. Recall that the sender sends two sets of tokens: PRF
tokens in the ﬁrst message and OT tokens in the second message whose codes depend on the ﬁrst message
of the receiver. We handle each of these sets in a different way, where reducing the number of PRF tokens
is as discussed in Section 4.3. More concretely, we consider the following modiﬁed tokens.
PRF Tokens:
1. fTKPRF;l
S
gl2[6(cid:20)2]: S chooses 3(cid:20) random PRF keys f(cid:13)l′g[l′23(cid:20)] for family F . Let PRF(cid:13)l′ : f0; 1g5(cid:20) !
′ 2 [3(cid:20)], S creates the sequence of tokens
by sending the message fCreate; sid; ssid; R; S; mid1+(l′(cid:0)1)2(cid:20)+j; M1gj2[2(cid:20)],
; : : : ; TKPRF;l
f0; 1g(cid:20) denote the pseudorandom function. Then for each l
TKPRF;l
that on input x, outputs PRF(cid:13)l′ (x), where M1 is the functionality.
′
2(cid:20)
′
1
S
S
2. Similarly, R generates the tokens fTKPRF;^l
g^l2[16(cid:20)3] which are analogous to the sender’s PRF tokens
by sending fCreate; sid; ssid; S; R; mid6(cid:20)2+1+(^l(cid:0)1)2(cid:20)+j; M2gj2[2(cid:20)] for all ^l
′ 2 [8(cid:20)2].
R
OT Tokens:
1. fTKjgj2[2(cid:20)]: S chooses a random PRF key (cid:13)
: f0; 1g5(cid:20) ! f0; 1g(cid:20)
denote the pseudorandom function. Then, for each j 2 [2(cid:20)], S creates a token TKj by sending
(Create; sid; ssid; R; S; mid6(cid:20)2+16(cid:20)3+1+j; M3), where M3 is the functionality that on input ((cid:27); sid; ssid;
′ for family F
′. Let PRF
′
(cid:13)′
46
bj; combj ; decombj ), aborts if decombj is not veriﬁed correctly or (cid:27) is not (the unique) valid signa-
ture of combj , corresponding to the veriﬁcation key vk(cid:28) , where vk(cid:28) is the key generated for (cid:28) =
∥j.
sid∥ssid∥combi
(cid:13)′(sid∥ssid) and secret shares them
′
If both the checks pass then the token computes (x0; x1) = PRF
GUC. Finally, it outputs (Abj [(cid:1); j]; decomAbj [(cid:1);j]; Bbj [(cid:1); j]; decomBbj [(cid:1);j]).
using SS as in (cid:5)OT
′
(cid:13)′
2. fcTKigi2[(cid:20)]: S chooses a PRF key (cid:13)
f0; 1g(cid:20) denote the pseudorandom function. Then, for each i 2 [(cid:20)], S creates a token cTKi by send-
′ (same key as above). Let PRF
′ for family F
: f0; 1g(cid:3) !
ing (Create; sid; ssid; R; S; mid16(cid:20)2+6(cid:20)2+1+2(cid:20)+i; M4), where M4 is the functionality that on input
((cid:27); sid; ssid; ci; comci; decomci) aborts if decomci is not veriﬁed correctly or (cid:27) is not (the unique)
valid signature of comci, corresponding to the veriﬁcation key vk(cid:28) , where vk(cid:28) is the key generated for
(cid:28) = sid∥ssid∥comci
(cid:13)′(sid∥ssid) and secret
′
If both the checks pass then the token picks two random strings (x0; x1) = PRF
shares them using SS as in (cid:5)OT
GUC. Finally, it outputs
∥i.
(A0[i;(cid:1)]; decomA0[i;(cid:1)]; A1[i;(cid:1)]; decomA1[i;(cid:1)]), if c = 0
(B0[i;(cid:1)]; decomB0[i;(cid:1)]; B1[i;(cid:1)]; decomB1[i;(cid:1)]), if c = 1
Condition on the event that none of the parties successfully forges a signature, then our proof for Theo-
rem 5.1 follows similarly (with the modiﬁcations that involve extraction from 2(cid:20) tokens per commitment).
6 Three-Round Token-Based GUC Secure Multi-Party Computation
In this section, we show how to compile an arbitrary round semi-honest protocol (cid:5) to a three-round protocol
using stateless tokens. As discussed in the introduction, the high-level of our approach is borrowing the
compressing round idea from [GGHR14] which proceeds in three steps. In the ﬁrst step, all parties commit
to their inputs via an extractable commitment and then in the second step, each party provides a token
to emulate their actions with respect to (cid:5) given the commitments. Finally, each party runs the protocol
(cid:5) locally and obtains the result of the computation. For such an approach to work, it is crucial that an
adversary, upon receiving the tokens, is not be able to “rewind” the computation and launch a resetting
attack. This is ensured via zero-knowledge proofs that are provided in each round. In essence, the zero-
knowledge proofs validates the actions of each party with respect to the commitments made in the ﬁrst step.
Such a mechanism is also referred to as a commit-and-prove strategy. In Section 6.1.1, we will present a
construction of a commit-and-prove protocol in the FgWRAP-hybrid and then design our MPC protocol using
this protocol. We then take a modular approach by describing our MPC protocol in an idealized version of
the commit-and-prove functionality analogous to [CLOS02] and then show how to realize this functionality.
As we mentioned before we then rely on the approach of Garg et al. [GGHR14] to compress the rounds of
our MPC protocol compiled with our commit and prove protocol in 3 rounds. Due to space constraints we
present this in the full version [?].
6.1 One-Many Commit-and-Prove Functionality
The commit and prove functionality FCP introduced in [CLOS02] is a generalization of the commitment
functionality and is core to constructing protocols in the GUC-setting. The functionality parameterized by
47
an NP-relation R proceeds in two stages: The ﬁrst stage is a commit phase where the receiver obtains a
commitment to some value w. The second phase is a prove phase where the functionality upon receiving a
statement x from the committer sends x to the receiver along with the value R(x; w). We will generalize the
FCP-functionality in two ways. First, we will allow for asserting multiple statements on a single committed
value w in the FgWRAP-hybrid. Second, we will allow a single party to assert the statement to many parties.
In an MPC setting this will be useful as each party will assert the correctness of its message to all parties in
each step. Our generalized functionality can be found in Figure 5 and is parameterized by an NP relation R
and integer m 2 N denoting the number of statements to be proved.
Functionality F 1:M
CP
Functionality F 1:M
CP is parameterized by an NP-relation R, an integer m and an implicit security parameter
(cid:20), and runs with set of parties P = fP1; : : : ; Png.
Commit Phase: Upon receiving a message (commit; sid;P; w) from Pi, where w 2 f0; 1g(cid:20), record the
tuple (sid; Pi;P; w; 0) and send (receipt; Pi;P; sid) to all parties in P.
Prove Phase: Upon receiving a message (prove; sid;P; x) from Pi, where w 2 f0; 1gpoly((cid:20)), ﬁnd the
record (sid; Pi;P; w; ctrsid). If no such record is found or ctrsid (cid:21) m then ignore. Otherwise,
send (proof; sid;P; (x;R(x; w))) to all parties in P. Replace the tuple (sid; Pi;P; w; ctrsid) with
(sid; Pi;P; w; ctrsid + 1).
Figure 5: The one-many multi-theorem commit and prove functionality [CLOS02].
To realize this functionality, we will rely on the so-called input-delayed proofs [LS90, CPS+16a, CPS+16b,
HV16]. In particular, we rely on the recent work of Hazay and Venkitasubramaniam [HV16], who showed
how to obtain a 4-round commit-and-prove protocol where the underlying commitment scheme and one-
way permutation are used in a black-box way, and requires the statement only in the last round. Below,
we extend their construction and design a protocol (cid:5)CP that securely realizes functionality F 1:M
CP , and then
prove the following theorem.
Theorem 6.1 Assuming the existence of one-way functions, then protocol (cid:5)CP securely realizes the F 1:M
CP -
functionality in the FgWRAP-hybrid.
6.1.1 Realizing F 1:M
In the following section we extend ideas from [HV16] in order to obtain a one-many commit-and-prove
protocol with negligible soundness using a specialized randomized encodings (RE) [IK00, AIK04], where
the statement is only known at the last round. Loosely speaking, RE allows to represent a “complex”
function by a “simpler” randomized function. Given a string w0 2 f0; 1gn, the [HV16] protocol considers
a randomized encoding of the following function:
CP in the FgWRAP-Hybrid
fw0(x; w1) = (R(x; w0 (cid:8) w1); x; w1)
where R is the underlying NP relation and the function has the value w0 hardwired in it. The RE we consider
needs to be secure against adaptively chosen inputs and robust. Loosely speaking, an RE is secure against
adaptive chosen inputs if both the encoding and the simulation can be decomposed into ofﬂine and online
algorithms and security should hold even if the input is chosen adaptively after seeing the ofﬂine part of the
48
encoding. Moreover, an ofﬂine/online RE is said to be robust if no adversary can produce an ofﬂine part
following the honest encoding algorithm and a (maliciously generated) online part that evaluates to a value
outside the range of the function. Then the ZK proof follows by having the prover generate the ofﬂine phase
of the randomized encoding for this functionality together with commitments to the randomness r used for
this generation and w1. Next, upon receiving a challenge bit ch from the veriﬁer, the prover completes the
proof as follows. In case ch = 0, then the prover reveals r and w1 for which the veriﬁer checks the validity
of the ofﬂine phase. Otherwise, the prover sends the online part of the encoding and a decommitment of w1
for which the veriﬁer runs the decoder and checks that the outcome is (1; x; w1).
A concrete example based on garbled circuits [Yao86] implies that the ofﬂine part of the randomized
encoding is associated with the garbled circuit, where the randomness r can be associated with the input
key labels for the garbling. Moreover, the online part can be associated with the corresponding input labels
that enable to evaluate the garbled circuit on input x; w1. Clearly, a dishonest prover cannot provide both a
valid garbling and a set of input labels that evaluates the circuits to 1 in case x is a false statement. Finally,
adaptive security is achieved by employing the construction from [HJO+15] (see [HV16] for a discussion
regarding the robustness of this scheme).
We discuss next how to extend Theorem 5.5 from [HV16] by adding the one-many multi-theorem fea-
tures. In order to improve the soundness parameter of their ZK proof Hazay and Venkitasubramaniam re-
peated their basic proof sufﬁciently many times in parallel, using fresh witness shares each time embedding
the [IKOS09] approach in order to add a mechanism that veriﬁes the consistency of the shares. Consider a
parameter N to be the number of repetitions and let m denote the number of proven theorems. Our protocol
employs two types of commitments schemes: (1) Naor’s commitment scheme [Nao91] denoted by Com. (2)
Token based extractable commitment scheme in the FgWRAP-hybrid denoted by ComgWRAP and deﬁned as
follows. First, the receiver R in the commitment scheme will prepare a token that computes a PRF under a
randomly chosen key k and send it to the committer in an initial setup phase, incorporated with the session
identiﬁer sid. Such that on input (x; sid) the token outputs PRF evaluated on the input x. More, precisely,
the receiver on input sid creates a token TKPRFk with the following code:
(cid:15) On input (x;fsid): Iffsid = sid output PRFk(x). Otherwise, output ?.
Then, to commit to a bit b, the committer C ﬁrst queries the token TKPRFk on input (u; sid) where u 2
f0; 1g5(cid:20) is chosen at random and sid is the session identiﬁer. Upon receiving the output v from the token, it
sends (Ext(u) (cid:8) b; v) where Ext is a randomness extractor as used in Section 5. We remark here that if the
tokens are exchanged initially in a token exchange phase, then the commitment scheme is non-interactive.
Protocol 3 Protocol (cid:5)CP - one-many commit-and-prove protocol.
(cid:15) Input: The prover holds a witness w, where the prover is a designated party P(cid:28) for some (cid:28) 2 [n].
(cid:15) The Protocol:
1. Each party Pk for k ̸= (cid:28) plays the role of the veriﬁer and picks random m t-subsets I k
j of [N ] for each
j 2 [m] and k 2 [n (cid:0) 1] where m is the number of proven statements. It also picks t random challenge
bits fchk
gWRAP. It further sends the ﬁrst message of the Naor’s
commitment scheme.
and commits to them using Comk
g
i2I k
j
i;j
2. The prover then continues as follows:
(a) It ﬁrst generates N (cid:2) m (cid:2) (n (cid:0) 1) independent XOR sharings of the witness w, say
fw0
i;j;k; w1
i;j;k
g(i(cid:2)j(cid:2)k)2[N(cid:2)m(cid:2)(n(cid:0)1)]:
49
(b) Next, for each j 2 [m] and k 2 [n (cid:0) 1], it generates the views of 2N parties P 0
i;j;k has input wb
i;j;k be the view of party P b
i;j;k and P 1
i;j;k for all
i;j;k, that realizes the
(c) Next, for each j 2 [m] and k 2 [n (cid:0) 1], it computes N ofﬂine encodings of the following set of
i 2 [N ] executing a t-robust t-private MPC protocol, where P b
functionality that checks if w0
i;j;k are all equal. Let V b
(cid:8) w1
i;j;k.
i;j;k