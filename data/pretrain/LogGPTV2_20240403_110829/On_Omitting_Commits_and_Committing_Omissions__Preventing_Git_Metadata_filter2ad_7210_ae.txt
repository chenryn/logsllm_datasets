Table 10: Average end-to-end delay per fetch for the last 10 fetch
operations, expressed in seconds.
the end-to-end delay incurred by fetch operations. We
can see that a securefetch incurs on average be-
tween 1.74 and 2.08 seconds more than a regular fetch,
whereas our defense (light) only adds between 0.65 and
0.8 seconds.
The time Git uses to do a fetch or push is dominated by
the network latency when talking with the remote reposi-
tory. Since our defense is designed to be backwards com-
patible, it uses multiple Git commands per push or fetch.
This explains the additional time incurred by our imple-
mentation. If our defense scheme is integrated into Git
so that additional commands (and hence network con-
nections) are not needed, we expect the additional delay
to be negligible.
8 Conclusions
In this work, we present a new class of attacks against
Git repositories. We show that, even when existing Git
protection mechanisms such as Git commit signing, are
used by developers, an attacker can still perform ex-
tremely impactful attacks, such as removing security
patches, moving experimental features into production
software, or causing a user to install a version of soft-
ware with known vulnerabilities.
To counter this new class of attacks, we devised a
backwards compatible solution that prevents metadata
manipulation attacks while not obstructing regular Git
usage scenarios. Our evaluation shows that our solution
incurs less than 1% storage overhead when applied to
popular Git repositories, such as the five most popular
repositories in GitHub.
We performed responsible disclosure of these issues to
the Git community. We have been working with them to
address these issues. Some of our patches have already
been accepted into Git version 2.9. We are continuing to
work with the Git community to fix these problems.
Acknowledgements
We would like to thank Junio C. Hamano, Jeff King,
Eric Sunshine, and the rest of the Git community for
their valuable feedback and insight regarding these at-
tacks and their solutions as well as their guidance when
exploring Git’s internals. Likewise, we thank Lois A.
DeLong, Vladimir Diaz, and the anonymous reviewers
for their feedback on the writing on this paper.
This research was supported by the Defense Ad-
vanced Research Projects Agency (DARPA) and the Air
Force Research Laboratory (AFRL) under Contract No.
A8650-15-C-7521, and by the National Science Foun-
dation (NSF) under Grants No. CNS 1054754, DGE
1565478, and DUE 1241976. Any opinions, findings,
and conclusions or recommendations expressed in this
material are those of the authors and do not necessar-
ily reflect the views of DARPA, AFRL, and NSF. The
United States Government is authorized to reproduce and
distribute reprints notwithstanding any copyright notice
herein.
References
[1] Apso: Secrecy for Version Control Systems. http://
aleph0.info/apso/.
[2] Git signed push.
http://thread.gmane.org/
gmane.comp.version-control.git/255520.
[3] Github. https://github.com.
[4] Kernel.org Linux repository rooted in hack attack.
[5] 365 Git.
http://www.theregister.co.uk/2011/08/
31/linux_kernel_security_breach/.
Adding a GPG key to a
reposi-
http://365git.tumblr.com/post/
tory.
2813251228/adding-a-gpg-public-key-
to-a-repository.
[6] Ars Technica.
“flame malware was signed by rogue
http://arstechnica.com/
certificate”.
ca
security/2012/06/flame-malware-
was-signed-by-rogue-microsoft-
certificate/.
392  25th USENIX Security Symposium 
USENIX Association
14
[7] Ars Technica.
Lenovo pcs
that breaks https
ship with man-in-
connections.
adware
the-middle
http://arstechnica.com/security/2015/02/lenovo-pcs-
ship-with-man-in-the-middle-adware-that-breaks-https-
connections/.
[8] Beta News.
Has SSL become pointless?
suspect
state-sponsored
searchers
http://betanews.com/2010/03/25/has-
ssl-become-pointless-researchers-
suspect-state-sponsored-ca-forgery/.
Re-
CA forgery.
[9] Briarproject.
Development Workflow.
https:
//code.briarproject.org/akwizgran/
briar/wikis/development-workflow.
[10] Bundler.io. Bundler: the best way to manage your appli-
cation’s GEMS. http://bundler.io/git.html.
[11] Code in the hole.
Using pip and requirements.txt
to install from the head of a github branch. http:
//codeinthehole.com/writing/using-pip-
and-requirementstxt-to-install-from-
the-head-of-a-github-branch/.
[12] Delicious Brains.
Install wordpress site with Git.
https://deliciousbrains.com/install-
wordpress-subdirectory-composer-git-
submodule/.
risk of being modified or deleted.
[13] Extreme Tech. GitHub Hacked, millions of projects
at
http:
//www.extremetech.com/computing/120981-
github-hacked-millions-of-projects-
at-risk-of-being-modified-or-deleted.
[14] A. J. Feldman, W. P. Zeller, M. J. Freedman, and E. W.
Felten. Sporc: Group collaboration using untrusted cloud
resources.
In Proc. of the 9th USENIX Symposium on
Operating Systems Design & Implementation (OSDI ’10),
2010.
[15] gamasutra. Cloud source host Code Spaces hacked, de-
velopers lose code. http://www.gamasutra.com/
view/news/219462/Cloud_source_host_
Code_Spaces_hacked_developers_lose_
code.php.
[16] Geek.com.
Major Open Source Code Repos-
http:
itory Hacked for months,
//www.geek.com/news/major-open-source-
code-repository-hacked-for-months-
says-fsf-551344/.
says FSF.
[17] M. Gerwitz. A Git Horror Story: Repository Integrity
With Signed Commits. http://mikegerwitz.com/
papers/git-horror-story.
[18] Gigaom. Adobe source code breach; it’s bad, real bad.
https://gigaom.com/2013/10/04/adobe-
source-code-breech-its-bad-real-bad/.
[19] Git SCM.
Signing your work.
https:
//git-scm.com/book/en/v2/Git-Tools-
Signing-Your-Work.
[20] M. Gunderloy.
dency Management with Giternal.
Easy Git External Depen-
http:
//www.rubyinside.com/giternal-easy-
git-external-dependency-management-
1322.html.
[21] E. Homakov.
How I hacked GitHub again.
http://homakov.blogspot.com/2014/02/
how-i-hacked-github-again.html.
[22] How To Node.
Managing module dependencies.
http://howtonode.org/managing-module-
dependencies.
[23] L. S. Huang, A. Rice, E. Ellingsen, and C. Jackson. An-
alyzing forged ssl certificates in the wild. In Proceedings
of the 2014 IEEE Symposium on Security and Privacy,
SP ’14, pages 83–97, Washington, DC, USA, 2014. IEEE
Computer Society.
[24] I2P.
Setting trust evaluation hooks.
https:
//geti2p.net/en/get-involved/guides/
monotone#setting-up-trust-evaluation-
hooks.
[25] B. H. Kim and D. Lie. Caelus: Verifying the consis-
tency of cloud services with battery-powered devices. In
Proc. of the 36th IEEE Symposium on Security and Pri-
vacy (S&P ’15), 2015.
[26] J. Li, M. Krohn, DMazi`eres, and D. Shasha. Secure
untrusted data repository (sundr).
In Proc. of the 6th
USENIX Symposium on Operating Systems Design & Im-
plementation (OSDI ’04), 2004.
[27] LWN. Linux kernel backdoor attempt. https://
lwn.net/Articles/57135/.
[28] P. Mahajan, S. Setty, S. Lee, A. Clement, L. Alvisi,
M. Dahlin, and M. Walfish. Depot: Cloud storage with
minimal trust. ACM Trans. Comput. Syst., 29(4):12:1–
12:38, 2011.
[29] J. Pellegrini. Secrecy in concurrent version control sys-
tems. In Presented at the Brazilian Symposium on Infor-
mation and Computer Security (SBSeg 2006), 2006.
[30] RubyGems.org.
Data
verification.
http:
//blog.rubygems.org/2013/01/31/data-
verification.html.
[31] Schneier on Security.
Forging SSL Certificates.
https://www.schneier.com/blog/archives/
2008/12/forging_ssl_cer.html.
[32] R. Shirey, K. Hopkinson, K. Stewart, D. Hodson, and
B. Borghetti. Analysis of implementations to secure git
for use as an encrypted distributed version control sys-
tem. In 48th Hawaii International Conference on System
Sciences (HICSS ’15), pages 5310–5319, 2015.
[33] Stack Overflow. How to install from specific branch
https://stackoverflow.com/
with OPAM?
questions/25277599/how-to-install-
from-a-specific-git-branch-with-opam.
[34] Stack Overflow.
Loading Maven dependencies from
https://stackoverflow.com/
GitHub.
questions/20161602/loading-maven-
dependencies-from-github.
USENIX Association  
25th USENIX Security Symposium  393
15
[35] Stack Overflow. Where does Cargo put the Git re-
https://stackoverflow.com/
quirements?
questions/28069678/where-does-cargo-
put-the-git-requirements.
[36] The Art of Simplicity. TFS Build: Build from a tag.
http://bartwullems.blogspot.com/2014/
01/tfs-build-build-from-git-tag.html.
godaddy
could
google,
users.
[37] ThreatPost.
Certificates
spoofing
facebook,
https://threatpost.com/certificates-
spoofing-google-facebook-godaddy-
could-trick-mobile-users/104259/.
trick mobile
[38] US-CERT. “SSL 3.0 Protocol Vulnerabilty and POODLE
attack”. http://arstechnica.com/security/
2012/06/flame-malware-was-signed-by-
rogue-microsoft-certificate/.
[39] D. A. Wheeler.
Software Configuration Manage-
ment (SCM) Security. http://www.dwheeler.com/
essays/scm-security.html.
[40] D. A. Wheeler.
“The Apple goto fail vulnerabil-
ity: lessons learned”. http://www.dwheeler.com/
essays/apple-goto-fail.html.
[41] Wired. Behind iphones critical security bug, a sin-
gle bad goto. http://www.wired.com/2014/02/
gotofail/.
[42] Wired.
’Google’ Hackers had ability to alter
source code’. https://www.wired.com/2010/03/
source-code-hacks/.
[43] ZDNet. Gogo in-flight wi-fi serving spoofed ssl certifi-
cates. http://www.zdnet.com/article/gogo-
in-flight-wi-fi-serving-spoofed-ssl-
certificates/.
[44] ZDNet.
Open-source ProFTPD hacked, backdoor
planted in source code. http://www.zdnet.com/
article/open-source-proftpd-hacked-
backdoor-planted-in-source-code/#!
[45] ZDNet.
Red Hat’s Ceph and Inktank code reposi-
http://www.zdnet.com/
tories were cracked.
article/red-hats-ceph-and-inktank-
code-repositories-were-cracked/#!
A Man In The Middle Example
This appendix contains a proof of concept of a Git
metadata manipulation attack against a GitHub reposi-
tory with the intention of showing how an attack could
be carried out in practice.
To perform an attack of this nature, an attacker con-
trols a server, compromises a server, or acts as a man-
in-the-middle between a server and a developer. Hav-
ing done this, the attacker is able to provide erroneous
metadata to trick a developer into committing a tampered
repository state.
We simulated a repeated line scenario, in which a Git
merge accidentally results a repeated line. This can be
devastating as it can completely alter the flow of a pro-
gram — some researchers argue that the ”goto fail;” [41]
vulnerability that affected Apple devices [40] might have
been caused by a VCS mistakenly repeating the line
while merging.
A.1 Simulating the attack
To simulate the attack, we created a repository with
a minimal working sample that resembles Figure 5(c).
Also, we configured two Linux machines under the same
network: one functioned as the malicious server pro-
viding tampered metadata information, while the other
played the role of the victim’s client machine. The spe-
cific setup is described below.
Setup. To simulate the malicious server, we set up Git
server on port 443 with no authentication enabled. Then,
we created an SSL certificate and installed it in the victim
machine. Finally, we a bare clone (using the --bare
parameter) of the repository hosted on GitHub is created
and placed on the pertinent path.
In order to redirect the user to the new branch, we
modified the packed-refs file on the root of the repository
so that the commit hash in the master branch matches the
one for the experimental branch. Refer to Table 11 for an
example.
On the client side, a clone of the repository is cre-
ated before redirecting the traffic. After cloning, the at-
tacker’s IP address is added to the victim’s /etc/hosts file
as “github.com” to redirect the traffic.
As such, both the server and the developer are config-
ured to instigate the attack the next time the developer
pulls.
A.2 The attack
When the developer pulls, he or she is required to
either merge or rebase the vulnerable changes into the
working branch. These merged or rebased changes are
not easy to identify as malicious activity, as they just
resemble work performed by another developer on the
394  25th USENIX Security Symposium 
USENIX Association
16
“Initial 
Commit”
Adds auth
master
Initial 
Commit
Adds auth
Initial 
Commit
Adds auth
Merge
master
master
Repeated 
goto
experimental
Repeated 
goto
experimental
master
Repeated 
goto
experimental
(a) Original repository state (as cloned
by the developer)
(b) The attacker changes the master
branch pointer
(c) The developer pulled and, unknowingly, merged the
experimental commit
Figure 5: Maliciously merging vulnerable code
Original file
# pack-refs with: peeled fully-peeled
00a5c1c2f52c25fe389558ea8117b7914ca2351e refs/heads/experimental
3a1db2295a5f842d0223088447bc7b005df86066 refs/heads/master
Tampered file
# pack-refs with: peeled fully-peeled
00a5c1c2f52c25fe389558ea8117b7914ca2351e refs/heads/experimental
00a5c1c2f52c25fe389558ea8117b7914ca2351e refs/heads/master
Table 11: The edited packed-refs file
same branch. Due to this, the user is likely to merge and
sign the resulting merge commit.
Aftermath. Once the user successfully merges the vul-
nerable change, the attacker can stop re-routing the user’s
traffic to the malicious server. With the malicious piece
of code in the local repository, the developer is now ex-
pected to pollute the legitimate server the next time he or
she pushes. In this case, the attacker was able to merge a
vulnerable piece of code into production. Even worse,
there is no trace of this happening, for the target devel-
oper willingly signed the merge commit object.
Setting up an environment for this attack is straightfor-
ward; the metadata modification is easy to perform with
a text editor and requires no sophistication.
USENIX Association  
25th USENIX Security Symposium  395
17