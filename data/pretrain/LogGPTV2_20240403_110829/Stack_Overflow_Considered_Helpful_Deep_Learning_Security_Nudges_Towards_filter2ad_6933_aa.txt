title:Stack Overflow Considered Helpful! Deep Learning Security Nudges Towards
Stronger Cryptography
author:Felix Fischer and
Huang Xiao and
Ching-yu Kao and
Yannick Stachelscheid and
Benjamin Johnson and
Danial Razar and
Paul Fawkesley and
Nat Buckley and
Konstantin B&quot;ottinger and
Paul Muntean and
Jens Grossklags
Stack Overflow Considered Helpful! Deep Learning 
Security Nudges Towards Stronger Cryptography
Felix Fischer, Technical University of Munich; Huang Xiao, Bosch Center for Artificial 
Intelligence; Ching-Yu Kao, Fraunhofer AISEC; Yannick Stachelscheid, Benjamin Johnson, 
and Danial Razar, Technical University of Munich; Paul Fawkesley and Nat Buckley, Projects 
by IF; Konstantin Böttinger, Fraunhofer AISEC; Paul Muntean and Jens Grossklags, Technical 
University of Munich
https://www.usenix.org/conference/usenixsecurity19/presentation/fischer
This paper is included in the Proceedings of the 
28th USENIX Security Symposium.
August 14–16, 2019 • Santa Clara, CA, USA
978-1-939133-06-9
Open access to the Proceedings of the 28th USENIX Security Symposium is sponsored by USENIX.Stack Overﬂow Considered Helpful!
Deep Learning Security Nudges Towards Stronger Cryptography
Felix Fischer, Huang Xiao†, Ching-Yu Kao∗, Yannick Stachelscheid, Benjamin Johnson, Danial Razar
Paul Fawkesley(cid:5), Nat Buckley(cid:5), Konstantin B¨ottinger∗, Paul Muntean, Jens Grossklags
Technical University of Munich, †Bosch Center for Artiﬁcial Intelligence
{ﬂx.ﬁscher, yannick.stachelscheid, benjamin.johnson, danial.razar, paul.muntean, jens.grossklags}@tum.de
{huang.xiao}@de.bosch.com, {nat, paul}@projectsbyif.com, {ching-yu.kao, konstantin.boettinger}@aisec.fraunhofer.de
∗Fraunhofer AISEC, (cid:5)Projects by IF
Abstract
Stack Overﬂow is the most popular discussion platform for
software developers. However, recent research identiﬁed a
large amount of insecure encryption code in production sys-
tems that has been inspired by examples given on Stack
Overﬂow. By copying and pasting functional code, de-
velopers introduced exploitable software vulnerabilities into
security-sensitive high-proﬁle applications installed by mil-
lions of users every day.
Proposed mitigations of this problem suffer from usability
ﬂaws and push developers to continue shopping for code
examples on Stack Overﬂow once again. This motivates
us to ﬁght the proliferation of insecure code directly at the
root before it even reaches the clipboard. By viewing Stack
Overﬂow as a market, implementation of cryptography be-
comes a decision-making problem. In this context, our goal
is to simplify the selection of helpful and secure examples.
More speciﬁcally, we focus on supporting software develop-
ers in making better decisions on Stack Overﬂow by apply-
ing nudges, a concept borrowed from behavioral economics
and psychology. This approach is motivated by one of our
key ﬁndings: For 99.37% of insecure code examples on
Stack Overﬂow, similar alternatives are available that serve
the same use case and provide strong cryptography.
Our system design that modiﬁes Stack Overﬂow is based on
several nudges that are controlled by a deep neural network.
It learns a representation for cryptographic API usage pat-
terns and classiﬁcation of their security, achieving average
AUC-ROC of 0.992. With a user study, we demonstrate that
nudge-based security advice signiﬁcantly helps tackling the
most popular and error-prone cryptographic use cases in An-
droid.
1 Introduction
Informal documentation such as Stack Overﬂow outperforms
formal documentation in effectiveness and efﬁciency when
helping software developers implementing functional code.
The fact that 78% of software developers primarily seek help
on Stack Overﬂow on a daily basis1 underlines the usability
and perceived value of community and example-driven doc-
umentation [2].
Reuse of code examples is the most frequently observed
user pattern on Stack Overﬂow [17]. It reduces the effort for
implementing a functional solution to its minimum and the
functionality of the solution can immediately be tested and
veriﬁed. However, when implementing encryption, its secu-
rity, being a non-functional property, is difﬁcult to verify as
it necessitates profound knowledge of the underlying crypto-
graphic concepts. Moreover, most developers are unaware of
pitfalls when applying cryptography and that misuse can ac-
tually harm application security. Instead, it is often assumed
that mere application of any encryption is already enough
to protect private data [13, 14]. Stack Overﬂow users also
cannot rely on the community to correctly verify the secu-
rity of available code examples [9]. Security advice given
by community members and moderators is mostly missing
and oftentimes overlooked. This is due to only a few se-
curity experts being available as community moderators and
a feedback system which is not sufﬁcient to communicate
security advice effectively. Consequently, highly insecure
code examples are frequently reused in production code [17].
Exploiting these insecure samples, high-proﬁle applications
were successfully attacked, leading to theft of user creden-
tials, credit card numbers and other private data [13].
While mainly focused on the negative impact of Stack
Overﬂow on code security, recent research has also reported
that there is a full range of code snippets providing strong
security for symmetric, asymmetric and password-based en-
cryption, as well as TLS, message digests, random number
generation, and authentication [17]. However, it was previ-
ously unknown whether useful alternatives can be found for
most use cases. In our work, we show that for 99.37% of in-
secure encryption code examples on Stack Overﬂow a sim-
ilar secure alternative is available that serves the same use
1https://insights.stackoverflow.com/survey/2016#
community
USENIX Association
28th USENIX Security Symposium    339
case. So, why are they not used in a consistent fashion?
We take a new perspective and see implementation of
cryptography as a decision-making problem between avail-
able secure and insecure examples on Stack Overﬂow.
In
order to assist developers in making better security deci-
sions, we apply nudges, a concept borrowed from experi-
mental economics and psychology to attempt altering indi-
viduals’ behaviors in a predictable way without forbidding
any options or signiﬁcantly changing their economic incen-
tives. Nudging interventions typically address problems as-
sociated with cognitive and behavioral biases, such as an-
choring, loss aversion, framing, optimism, overconﬁdence,
post-completion errors, and status-quo bias [5, 31]. They
have been applied in the security and privacy domain in a
successful fashion [4,5,7,19,22,32]. In contrast to these ap-
proaches, which focused on systems for end-users, we trans-
late the concept of nudges to the software developer domain
by modifying the choice architecture of Stack Overﬂow. It
nudges developers towards reusing secure code examples
without interfering with their primary goals.
Our designed security nudges are controlled by a code
analysis system based on deep learning. It learns general fea-
tures that allow the separation of secure and insecure crypto-
graphic usage patterns, as well as their similarity-based clus-
tering and use-case classiﬁcation. Applying this system, we
can directly derive a choice architecture that is based on pro-
viding similar, secure, and use-case preserving code exam-
ples for insecure encryption code on Stack Overﬂow.
In summary, we make the following contributions:
• We present a deep learning-based representation learn-
ing approach of cryptographic API usage patterns that
encodes their similarity, use case and security.
• Our trained security classiﬁcation model which uses the
learned representations achieves average AUC-ROC of
0.992 for predicting insecure usage patterns.
• We design and implement several security nudges on
Stack Overﬂow that apply our similarity, use case and
security models to help developers make better deci-
sions when reusing encryption code examples.
• We demonstrate the effectiveness of nudge-based secu-
rity advice within a user study where participants had to
implement the two most popular and error-prone cryp-
tographic use cases in Android [13, 17]: nudged par-
ticipants provided signiﬁcantly more secure solutions,
while achieving the same level of functionality as the
control group.
We proceed as follows. After reviewing related work (Sec-
tion 2), we present our system design that combines deep
learning-based representation learning with nudge-based se-
curity advice (Sections 3 – 6). Then, we present our model
evaluation and user study (Sections 7 & 8), as well as limita-
tions, future work, and conclusions (Sections 9 – 11).
2 Related Work
2.1 Getting Cryptography Right
Acar et al. [2] have investigated the impact of formal and in-
formal information sources on Android application security.
With a lab study, they found that developers prefer informal
documentation such as Stack Overﬂow over ofﬁcial Android
documentation and textbooks when implementing encryp-
tion code. Solutions based on advice from Stack Overﬂow
provided signiﬁcantly more functional – but less secure –
solutions than those based on formal documentation. Work
by Fischer et al. [17] showed that 30% of cryptographic code
examples on Stack Overﬂow were insecure. Many severely
vulnerable samples were reused in over 190,000 Android ap-
plications from Google Play including high-proﬁle applica-
tions from security-sensitive categories. Moreover, they have
shown that the community feedback given on Stack Over-
ﬂow was not helpful in preventing reuse of insecure code.
Chen et al. studied the impact of these community dynam-
ics on Stack Overﬂow in more detail [9]. Based on manual
inspection of a subset of posts, they found that (on average)
posts with insecure snippets garnered higher view counts and
higher scores, and had more duplicates compared to posts
with secure snippets. Further, they demonstrated that a siz-
able subset of posts from trusted users were insecure. Taken
together, these works show that developers (by copying and
pasting insecure code) are imposing negative externalities on
millions of users who eventually bear the cost of apps harbor-
ing vulnerabilities [8].
Oliveira et al. focus on developers’ misunderstandings of
ambiguities in APIs (including cryptography), which may
contribute to vulnerabilities in the developed code [26]. They
studied the impact of personality characteristics and con-
textual factors (such as problem complexity), which impact
developers’ ability to identify such ambiguities. Likewise,
Acar et al. [1] investigated whether current cryptographic
API design had an impact on cryptographic misuse. They
selected different cryptographic APIs; including some par-
ticularly simpliﬁed APIs in order to prevent misuse. How-
ever, while indeed improving security, these APIs produced
signiﬁcantly less functional solutions and oftentimes were
not applicable to speciﬁc use cases at all. As a consequence,
developers searched for code examples on Stack Overﬂow
again.
Nguyen et al. [25] developed FixDroid, a static code anal-
ysis tool integrated in Android Studio which checks crypto-
graphic code ﬂaws and suggests quick ﬁxes.
2.2 Security Nudges
Wang et al. [32] implemented privacy nudges on Facebook
in order to make users consider the content and audience
of their online publications more carefully, as research has
340    28th USENIX Security Symposium
USENIX Association
shown that users eventually regret some of their disclosure
decisions. They found that a reminder nudge about the au-
dience effectively and non-intrusively prevents unintended
disclosure. Almuhimedi et al. [6] implemented an app per-
missions manager that sends out nudges to the user in order
to raise awareness of data collected by installed apps. With
the help of a user study they were able to show that 95% of
the participants reassessed their permissions, while 58% of
them further restricted them. Liu et al. [23] created a per-
sonalized privacy assistant that predicts personalized privacy
settings based on a questionnaire. In a ﬁeld study, 78.7% of
the recommendations made by the assistant were adopted by
users, who perceived these recommendations as usable and
useful. They were further motivated to review and modify
the proposed settings with daily privacy nudges.
2.3 Deep Learning Code
Fischer et al. [17] proposed an approach based on machine
learning to predict the security score of encryption code snip-
pets from Stack Overﬂow. They used tf-idf to generate fea-
tures from source code and trained a support vector machine
(SVM) using an annotated dataset of code snippets. The re-
sulting model was able to predict the security score of code
snippets with an accuracy of 0.86, with precision and recall
of 0.85 and 0.75, respectively. However, security predictions
were only available for the complete code snippet. It did not
allow indicating and marking speciﬁc code parts within the
snippet to be insecure. This lack of explainability is detri-
mental for security advice.
Xiaojun et al. [33] introduced neural network-based rep-
resentation learning of control ﬂow graphs (CFGs) gener-
ated from binary code. Using a Siamese network archi-
tecture they learned similar graph embeddings using Struc-
ture2vec [11] from similar binary functions over different
platforms. These embeddings were used to detect vulnera-
bilities in binary blobs by applying code-similarity search.
Their approach signiﬁcantly outperformed the state-of-the-
art [16] in both, efﬁciency and effectiveness, by provid-
ing shorter training times and higher area under the curve
(AUC) on detecting vulnerabilities. The approach does not
allow identiﬁcation and description of code parts within bi-
nary functions that cause the vulnerabilities. To allow better
explainability, we depend on our new approach to provide
statement-level granularity. It enables identifying and classi-
fying multiple code patterns within a single function.
Li et al. [21] developed VulDeePecker, a long short-
term memory (LSTM) neural network that predicts buffer
overﬂows and resource management error vulnerabilities of
source code gadgets. Code gadgets are backward and for-
ward slices, considering data and control ﬂow, that are gen-
erated from arguments used in library function calls. Fur-
ther, they use word2Vec to create embeddings for the sym-
bolic representation of code gadgets. These embeddings
Figure 1: Learn-to-Nudge Loop Overview
are then used together with their security label to train
a bi-directional LSTM. VulDeePecker outperforms several
pattern-based and code similarity-based vulnerability detec-
tion systems with respect to false positive and false negative
rates. However, their LSTM model has a very long training
time. Our convolutional approach leverages transfer learning
to achieve much faster training.
3 Overview
We present an overview of our system design for nudge-
and deep learning-based security advice on Stack Overﬂow
in Figure 1. It depicts a learn-to-nudge loop that represents
the interaction and interference of the community behavior,
classiﬁcation models and proposed security nudges on Stack
Overﬂow. The community behavior on Stack Overﬂow (1)
triggers the loop by continuously providing and reusing code
examples that introduce new use cases and patterns of cryp-
tographic application programming interfaces (APIs). In the
initial step (2), a representative subset of these code exam-
ples is extracted and annotated by human experts. The an-
notations provide ground truth about the use cases and secu-
rity of cryptographic patterns in the given code. Then (3),
a representation for these patterns is learned by an unsuper-
vised neural network based on open source projects provided
by GitHub. In combination with the given annotations, the
pattern embeddings are used to train an additional model to
predict their use cases and security (4). Based on these pre-
dictions, we can apply security nudges on Stack Overﬂow by
providing security warnings, reminders, recommendations
and defaults for encryption code examples (5). Further, we
allow assigned security moderators2 within the community
to annotate unknown patterns and provide feedback to pre-
dictions of our models (6). Therefore, our system creates a
2https://stackexchange.com/about/moderators
USENIX Association
28th USENIX Security Symposium    341
CodeCommunityUse  Cases and PatternsPattern NetUse Case and Security NetPattern EmbeddingAnnotationFeedbackHuman ExpertsNudges1.2.3.4.5.6.learn-to-nudge loop that is supposed to iteratively improve
the classiﬁcation models, which in turn help improving the
security decisions made by the community and the security
of code provided on Stack Overﬂow.
or corporate wellness programs, or double-sided printing
which can promote environmental protection [5]. We apply
this nudge by up-ranking posts that only contain secure code
examples in Stack Overﬂow search results by default.
4 Nudge-Based System Design
We apply ﬁve popular nudges [30, 31] and describe their
translation to security advice in this section.