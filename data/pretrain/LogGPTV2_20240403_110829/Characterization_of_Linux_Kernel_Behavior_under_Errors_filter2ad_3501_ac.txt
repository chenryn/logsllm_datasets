Crash/Hangs  correspond  to  the  sum  of  (Dumped  Crash  +  Hang/Unknown 
Crash) in the pie-charts. 
•  Given that a faulted instruction is executed (i.e. the error 
is activated), the pie-charts show that for the random branch 
error, nearly half (47.5%) of the activated errors have no ef-
fect (i.e., Not Manifested). This, while at first surprising, is 
understandable  on  a  close  examination  of  the  error  scenar-
ios (cid:326) most often the injected error does not change the con-
trol  path.  What  is  least  intuitive  is  why  an  error  that  alters 
the control path also has no effect. This happens 33% of the 
time,  as  indicated  in  the  Figure  4  (Valid  but  Incorrect 
Branch).  While  no  single  dominant  reason  can  be  clearly 
identified, here for the most part this reflects an inherent re-
dundancy  in  the  kernel  code.  Representative  examples  are 
provided in Section 8. 
•  Fail  silence  violations  are  relatively  high  for  errors  in 
campaign  A  (e.g.,  6.1%  for  the  arch  subsystem),  and  in 
campaign C, the fail silence violations are the highest (e.g., 
nearly 18% in the arch subsystems). Representative exam-
ples for each of these cases are provided in Section 6.5.  
•  The percentage of Not Manifested Errors in campaign B
is  much  higher  than  that  of  campaigns  A  and  C.  Memory 
management  (mm)  is  the  most  sensitive  subsystem,  fol-
lowed by kernel and fs, while arch is the least sensitive sub-
system.  
•  Although  overall  the  mm  and  kernel  subsystems  are  the 
most sensitive in terms of the percentage of activated errors, 
in  practice  three  functions,  namely  do_page_fault  (page 
fault  handler  from  arch  subsystem),  schedule  (process 
scheduler  from  kernel  subsystem),  and  zap_page_range
(function  from  the  mm  subsystem  for  removing  user  pages 
in  given  range),  in  random  injection  cause  70%,  50%,  and 
30%  of  crashes  in  the  corresponding  subsystems,  respec-
tively. 
•  Nine errors in the kernel result in crashes, which require 
reformatting the file system. The process of bringing up the 
system can take nearly an hour.  
7  Experimental Results: Crash Analysis 
Crash is one of the most severe situations caused by injected 
errors because it makes the whole system unavailable. In this 
section,  crashes  are  analyzed  from  the  perspective  of  their 
severity, causes, and error propagation.  
7.1  Crash Severity  
The  severity  of  the  crash  failures  resulting  from  the  injected 
errors is categorized into three levels according to the system 
downtime  due  to  the  failure.  The  three  identified  levels  are: 
(1) most severe – rebooting the system after an error injection 
requires  a  complete  reformatting  of  the  file  system  on  the 
disk  and  the  process  of  bringing  up  the  system  can  take 
nearly an hour, (2) severe – rebooting the system requires the 
user (interactively) to run fsck facility/tool to recover the par-
tially corrupted  file  system, and although reformatting is  not 
needed,  the  process  can  take  more  than  5  minutes  and  re-
quires user intervention, and (3) normal – at this least-severe 
level,  the  system  automatically  reboots,  and  the  rebooting 
usually  takes  less  than  4  minutes,  depending  on  the  type  of 
machine and the configuration of Linux.  
Proceedings of the 2003 International Conference on Dependable Systems and Networks (DSN’03) 
0-7695-1959-8/03 $17.00 (c) 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:05:58 UTC from IEEE Xplore.  Restrictions apply. 
Subsystem 
[# of Injected 
Functions]
Error 
Injected 
Activated 
(Percentage)
Not 
Manifested
Fail Silence
Violation Crash/Hang 
Activated 
Any Random Error (Activated)
arch[6] 
fs[18] 
kernel[8] 
mm[19] 
4559   1508(33.1%)  511(33.9%)
92(6.1%) 
905(60.0%) 
10999  4503(40.9%) 1463(32.5%)
58(1.3%) 
2982(66.2%) 
4375 
2478(56.6%)  762(30.8%)
0(0.0%) 
1716(69.2%) 
9044 
4881(54.0%) 1330(27.2%) 141(2.9%) 
3410(69.9%) 
Total[51] 
28977 
13370 
(46.1%) 
Any Random Error
4066(30.4%) 291(2.2%) 
9013(67.4%) 
Subsystem 
[# of Injected 
Functions]
Injected 
Activated 
Error 
Activated 
(Percentage)
Not 
Manifested
Fail Silence
Violation Crash/Hang 
arch[10] 
428 
242(56.5%)  151(62.4%)
6(2.5%) 
85(35.1%) 
fs[23] 
1486  848(57.1%)  419(49.4%)
7(0.8%) 
422(49.8%) 
kernel[18] 
1296  982(75.8%)  442(45.0%)
6(0.6%) 
534(54.4%) 
mm[30] 
1177  727(61.8%)  317(43.6%)
4(0.6%) 
406(55.8%) 
Total[81] 
4387 
2779
(63.8%) 
Random Branch Error
1329(47.5)
23(0.8%)  1447(51.7%)
Subsystem 
[# of Injected 
Functions]
Injected 
Activated 
Error 
Activated 
(Percentage) 
Not 
Manifested
Fail Silence 
Violation Crash/Hang 
arch[22] 
121 
58(48.9%)  22(37.9%) 10(17.2%)
26(44.8%) 
fs[69] 
943 
530(56.2%)  200(37.7%) 62(11.7%)
268(50.6%) 
kernel[43] 
mm[42] 
Total 
[176] 
582 
542 
2188
317(57.2%)  100(31.5%) 23(7.3%) 
194(61.2%) 
323(59.6%)  87(26.9%)
27(8.4%) 
209(64.7%) 
1228
(56.1%) 
409(33.3%) 122(9.9%)
697(56.8%) 
Valid but Incorrect Branch
Hang / Unknown 
Crash
16.9%
Dumped Crash
50.6%
Not Manifested
30.4%
Fail Silent 
Violation
2.2%
Random Branch Error (Activated)
Hang / Unknown 
Crash
6.9%
Dumped Crash
44.8%
Not Manifested
47.5%
Fail Silent 
Violation
0.8%
Valid but Incorrect Branch (Activated)
Hang / Unknow n 
Crash
22.9%
Dumped Crash
33.9%
Not Manifested
33.3%
Fail Silent 
Violation
9.9%
Figure 4: Statistics on Error Activation and Failure Distribution 
In  all  but  34  of  9,600  dumped  crashes  cases,  the  system  re-
boots  automatically.  There  are  25  cases  in  the  severe  level 
category,  and  9  cases  require  reformatting  the  file  system. 
Table  5  reports  the  9  cases,  4  of  which  are  repeatable  and 
could  be  traced  using  kdb.  A  detailed  analysis  of  one  of  the 
repeatable crashes (case 9 in Table 5) is provided in Figure 5. 
A catastrophic (most  severe)  error is injected in the function 
do_generic_file_read()  from  the  memory  subsystem.  The 
restored (using the kdb tool) function calling sequence before 
the  error  injection,  shown  at  the  bottom  right  in  Figure  5,
indicates  that  do_generic_file_read()  is  invoked  by  the  file 
system  as  a  read  routine  for  transferring  the  data  from  the 
disk to the page cache in the memory. A single bit error in the 
mov  instruction  of  the  do_generic_file_read()  results  in  re-
versing  the  value  assignment  performed  by  the  mov  (see  the 
assembly  code  at  address  0xc0130a33  in  Figure  5).    As  a 
result,  the  contents  of  the  eax  register  remain  0x00000080 
instead of 0x0000b728, and after executing 12-bit shift (shrd
instruction in Figure 5), the eax is set to 0.
This  is  equivalent  to  corruption  of  the  C-code  level  variable 
end_index  corresponding  to  the  eax  register;  end_index  is 
assigned value 0 instead of 0b. Tracing the C-code shows that 
another  variable  (index)  in  do_generic_file_read()  is  initial-
ized to 0 at the beginning of the for-loop. However, due to the 
injected error, the for-loop breaks and do_generic_file_read()
returns  prematurely  causing  subsequent  file  system  corrup-
tion;  Linux  reports:  INIT:  ID  “1”  respowning  too  fast,  263 
Bus error. Rebooting the system requires reinstallation of the 
OS.
Additionally, we note that (i) most of the severe crashes hap-
pen  under  campaign  C,  i.e.,  reversing  the  condition  of  a 
branch instruction can have a catastrophic impact on the sys-
tem and (ii) although most often a severe damage to the sys-
tem usually results in a crash, we observed one case in which 
the system did not crash after an injected error but could not 
reboot. The availability impact of the most  severe crashes is 
clearly of concern. While a “valid but incorrect branch” error 
is  rare  –  it  is,  in  our  experience,  plausible.  For  example,  to 
achieve  5  nines  of  availability  (5  min/yr  downtime)  one  can 
only  afford  one  such  failure  in  12  years,  severe  crash  –  no 
more than one in two years, and a crash – no more than once 
a year.  
void do_generic_file_read(struct file * filp, loff_t *ppos, read_descriptor_t * desc, read_actor_t actor)
{  …index = *ppos >> PAGE_CACHE_SHIFT; 
offset = *ppos & ~PAGE_CACHE_MASK;  … 
for (;;) {
Finish 
read?
Read page 
from disk 
to page 
cache
struct page *page, **hash;
unsigned long end_index, nr, ret;
end_index = inode->i_size >> PAGE_CACHE_SHIFT;
if (index > end_index)
break;
…
ret = actor(desc, page, offset, nr); 
offset += ret; 
index += offset >> PAGE_CACHE_SHIFT; 
offset &= ~PAGE_CACHE_MASK; …
Copy to 
user
} /* end of for loop */
*ppos = ((loff_t) index f_reada = 1;
if (cached_page)
page_cache_release(cached_page);
UPDATE_ATIME(inode);
}
Assembly code:
c0130a33:
8b 46 44
mov    0x44(%esi),%eax
c0130a36:    8b 56 48
mov 0x48(%esi),%edx
c0130a39:  0f ac d0 0c
shrd   $0xc,%edx,%eax
---------------------- change to ------------------------
c0130a33:
89 46 44
mov %eax,0x44(%esi)
c0130a36:    8b 56 48
mov    0x48(%esi),%edx
c0130a39:    0f ac d0 0c
shrd $0xc,%edx,%eax
Subsystem
Subsystem
Function Calling Sequence
Function Calling Sequence
kernel
kernel
schedule(), reschedule()
schedule(), reschedule()
arch
arch
arch
arch
fs
fs
fs
fs
fs
fs
mm
mm
mm
mm
system_call()
system_call()
sys_execve()
sys_execve()
do_execve()
do_execve()
prepare_binprm()
prepare_binprm()
kernel_read()
kernel_read()
generic_file_read()
generic_file_read()
do_generic_file_read()
do_generic_file_read()
One bit error reverses the assignment direction of mov instruction
Figure 5: Case Study of a Most Severe Crash 
Proceedings of the 2003 International Conference on Dependable Systems and Networks (DSN’03) 
0-7695-1959-8/03 $17.00 (c) 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:05:58 UTC from IEEE Xplore.  Restrictions apply. 
7.2  Crash Causes 
The distributions of causes of all dumped crashes are given in 
Figure  6,  where  each  pie-chart  represents  an  error  injection 
campaign. Major observations are summarized below. 
•  Regardless of error injection campaign, 95% of the crash 
causes are due to four major errors: unable to handle kernel 
null pointer dereference (null pointer failure), unable to han-
dle  kernel  paging  request  (paging  failure),
invalid  oper-
and/opcode fault, and general protection fault.
• 
In  campaign  C,  the  crash  causes  are  dominated  by  the 
invalid operand category (74.7%). Many of those crashes are 
generated by the assertions inside the Linux kernel. The as-
sertions  check  the  correctness  of  some  specific  conditions. 
At  the  end  of  the  assertion  code,  there  is  a  branch  instruc-
tion.  If  the  check  is  passed,  the  branch  will  follow  the  nor-
mal  control  flow.  Otherwise,  it  will  raise  the  exception  of 
invalid  operand  by  executing  a  special  instruction  of  ud2a.
This is illustrated in the Table 7 (example 4). 
•  Comparing  distributions  of  crash  causes  observed  in 
campaigns A and B with the distribution obtained from cam-
paign C, one can see the significant difference in the number 
of  paging  failures:  35.5%,  36.7%  for  campaigns  A  and  B,
respectively,  versus  3.1%  for  the  campaign  C.  A  detailed 
case analysis Table 7 (example 2) indicates that paging fail-
ures  are  usually  due  to  random  errors  leading  to  corruption 
of  register  values.  In  campaign  C,  since  only  one  particular 
bit  of  a  branch  instruction  is  flipped,  and  therefore,  the 
chance of a paging failure is much smaller. 
•  The distribution of crash causes in campaign A is similar 
to  that  of  campaign  B.  This  phenomenon  indicates  that,  as 
far as random injections are concerned, the impact of an er-
ror in a branch instruction does not differ significantly from 
the impact of an error in a non-branch instruction.  
7.3  Crash Latency  
Figure  7  reports  the  crash  latency  (in  terms  of  CPU  cycles) 
with  respect  to  target  subsystems.  The  key  observations  are 
outlined below. 
•  The distributions of crash latencies for campaigns A and 
B are similar: 40% of the crashes are within 10 cycles from 
executing the corrupted instruction.  
• 
In  all  campaigns,  around  20%  of  crashes  have  longer 
latency  (>100,000  cycles).  This  shows  that  it  is  fairly  com-
mon  for  a  crash  to  happen  sometime  after  an  error  is  in-
jected,  indicating  the  possibility  of  error  propagation  (ana-
lyzed in the next section). 
•  For campaign C, the percentage of longer latency errors 
increases,  compared  with  the  other  two  campaigns.  For  fs,
kernel, and mm subsystems (the cases in arch subsystem are 
statistically  insignificant),  40-60%  of  crash  latencies  are 
within  10  cycles.  Overall,  the  crash  latencies  in  this  cam-
paign  are  longer  than  latencies  observed  in  the  other  two 
campaigns.  Detailed  tracing  of  crash  dumps  indicates  that 
random  error  injections  (campaigns  A and  B)  can  corrupt 
several instructions in a sequence Table 7 (examples 2, and 
3).  As  a  result,  the  system  executes  an  invalid  sequence  of 
instructions,  which  is  very  likely  to  cause  quick  (i.e.,  short 
latency) crash Table 7 (example 1). In campaign C, we only 
reverse  the  condition  of  a  single  branch  instruction  without 
affecting any other instructions In this case the system exe-
cutes incorrect but valid sequence of instructions and thus, a 