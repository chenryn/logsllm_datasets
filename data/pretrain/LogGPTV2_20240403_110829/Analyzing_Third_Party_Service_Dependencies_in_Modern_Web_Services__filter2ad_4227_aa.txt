title:Analyzing Third Party Service Dependencies in Modern Web Services:
Have We Learned from the Mirai-Dyn Incident?
author:Aqsa Kashaf and
Vyas Sekar and
Yuvraj Agarwal
Analyzing Third Party Service Dependencies in Modern Web
Services: Have We Learned from the Mirai-Dyn Incident?
Aqsa Kashaf
Carnegie Mellon University
PI:EMAIL
Vyas Sekar
Carnegie Mellon University
PI:EMAIL
Yuvraj Agarwal
Carnegie Mellon University
PI:EMAIL
Abstract
Many websites rely on third parties for services (e.g., DNS, CDN,
etc.). However, it also exposes them to shared risks from attacks
(e.g., Mirai DDoS attack [24]) or cascading failures (e.g., GlobalSign
revocation error [21]). Motivated by such incidents, we analyze
the prevalence and impact of third-party dependencies, focusing
on three critical infrastructure services: DNS, CDN, and certificate
revocation checking by CA. We analyze both direct (e.g., Twitter
uses Dyn) and indirect (e.g., Netflix uses Symantec as CA which
uses Verisign for DNS) dependencies. We also take two snapshots
in 2016 and 2020 to understand how the dependencies evolved. Our
key findings are: (1) 89% of the Alexa top-100K websites critically
depend on third-party DNS, CDN, or CA providers i.e., if these
providers go down, these websites could suffer service disruption;
(2) the use of third-party services is concentrated, and the top-3
providers of CDN, DNS, or CA services can affect 50%-70% of the
top-100K websites; (3) indirect dependencies amplify the impact
of popular CDN and DNS providers by up to 25X; and (4) some
third-party dependencies and concentration increased marginally
between 2016 to 2020. Based on our findings, we derive key impli-
cations for different stakeholders in the web ecosystem.
CCS Concepts
• Security and privacy → Denial-of-service attacks; • Networks
→ Network measurement; Public Internet; • Computer systems
organization → Redundancy; Availability.
Keywords
DDoS, redundancy, third-party dependency, DNS, CDN, OCSP
ACM Reference Format:
Aqsa Kashaf, Vyas Sekar, and Yuvraj Agarwal. 2020. Analyzing Third Party 
Service Dependencies in Modern Web Services: Have We Learned from the 
Mirai-Dyn Incident?. In ACM Internet Measurement Conference (IMC ’20), 
October 27–29, 2020, Virtual Event, USA. ACM, New York, NY, USA, 14 pages. 
https://doi.org/10.1145/3419394.3423664
1 
Today, the web ecosystem has an increased reliance on third-party
services such as DNS, CDN as also echoed in an IETF working
group [28]. While many of these providers are well provisioned,
history suggests that they are not entirely immune to failures; e.g.,
Introduction
This work is licensed under a Creative Commons Attribution International 4.0 License.
IMC ’20, October 27–29, 2020, Virtual Event, USA 
© 2020 Copyright held by the owner/author(s). 
ACM ISBN 978-1-4503-8138-3/20/10.
https://doi.org/10.1145/3419394.3423664
the Mirai Dyn attack [24], GlobalSign revocation error incident in
2016 [21] and the Amazon DNS DDoS attack in 2019 [50] affected
a significant number of popular web services. These incidents raise
broader questions about the robustness of the web ecosystem:
• Are these singular occurrences or are there other types of third-
party services that are also potential Achilles’ heels for affecting
popular web-services? For example, as services are concentrated,
is there a single provider whose failure will have a significant
impact on many websites critically dependent on it?
• Are there hidden transitive or indirect dependencies between
websites and their third-party providers concerning concentra-
tion and the extent of third party dependencies; e.g., loading
academia.edu involves a third-party CDN MaxCDN, which in
turn depends on AWS DNS!
• If, and how, did websites adapt, after the Dyn incident? Did they
reduce their critical dependency on third party services? Did
they become redundantly provisioned using multiple third-party
providers for the same service?
We address these questions by carrying out a measurement study
using Alexa’s top-100K websites [49]. We focus on three infrastruc-
tural services that most modern websites critically rely on when
servicing web requests: DNS, SSL certificate revocation checking
by CAs, and content delivery (CDN). We analyze two kinds of de-
pendencies: (1) direct dependencies such as the ones in the Dyn
incident where a website like Spotify used Dyn as its DNS provider,
and (2) indirect or transitive dependencies that consider “multi-hop”
effects; e.g., loading academia.edu entails third-party CDN Max-
CDN, which depends on AWS DNS. We take two snapshots in 2016
and 2020 to analyze trends in the dependency landscape of the web.
Our work is complementary to other concurrent efforts that
study concentration in the web [28, 57]. First, we differ from other
inter-website (e.g., JavaScript, fonts inclusion) dependency anal-
ysis [29, 35, 43, 47, 48, 62] as we study third-party dependency
from an infrastructure standpoint. Second, compared to other ef-
forts [9, 15, 55], we analyze both direct and indirect dependencies
across websites and service providers, and find that these hidden
indirect dependencies have significant impact. Third, we also do an
evolution analysis by comparing two snapshots in 2016 and 2020
to highlight changes in the dependency landscape.
Our key findings are as follows:
• We show that 89% of the top-100K websites critically depend
on third-party DNS, CDN, or CA providers, hence potentially
compromising their availability.
• The use of third-party services is highly concentrated. Conse-
quently, if the top-3 providers of CDN (Cloudflare, Incapsula,
Cloudfront), DNS (Cloudflare, AWS DNS, DNSMadeEasy) or
CA (Digicert, Let’s Encrypt, Sectigo) services go down, then
50%-70% of the most popular websites will become unavailable.
634
IMC ’20, October 27–29, 2020, Virtual Event, USA
Aqsa Kashaf, Vyas Sekar, and Yuvraj Agarwal
• Many service providers such as DNS, CDNs, and CAs critically
depend on other third-party service providers. This critical de-
pendence ranges from 17% to 35% across various inter-services
dependencies. For instance, the largest CA DigiCert, critically
depends on DNS provider, DNSMadeEasy. This dependency
amplifies the impact of DNSMadeEasy from impacting 1% of
websites directly to 25%.
• There is only a minor change in the dependencies of websites
from 2016 to 2020 despite the highly publicized Dyn outage. In
fact, critical dependency on third-party providers increased by
1% to 4.7%. Concentration also increased in DNS providers and
CAs.
Our work has some limitations; e.g., we do not have capacity es-
timates for third-party services, we cannot infer third-party depen-
dencies that are not visible to end hosts, etc. Our work is nonetheless
a useful step towards establishing actionable metrics that can assist
websites and service providers in making informed choices about
their service dependencies. This in turn helps to mitigate the effects
of large-scale incidents, improve resiliency, and minimize overall
exposure to risk. Based on our findings, we derive implications for
different stakeholders. Specifically, we recommend that: (1) web-
services seek to increase their robustness by adding redundancy
regarding the third-party services they use directly, while also de-
termining the hidden dependencies (2) Third-party services should
provide a quantitative understanding of their infrastructure and
dependencies to the web services and should mitigate inter-service
critical dependencies.
2 Motivation and Problem Scope
We discuss three motivating incidents that affected many websites
and their users. We then define the types of dependencies we focus
on to scope our analysis.
Dyn DDoS Attack 2016: In 2016, a DNS provider Dyn suffered
a Distributed Denial of Service (DDoS) attack launched using the
Mirai botnet. As a result, many popular sites were inaccessible for a
few hours including Amazon, Netflix, Twitter, etc., since they used
Dyn as their authoritative DNS provider. Furthermore, Fastly a con-
tent distribution network (CDN), also used Dyn as its authoritative
nameserver. As a result, websites which did not use Dyn directly,
but used Fastly, were also affected [24].
GlobalSign Certificate Revocation Error 2016: In 2016, the On-
line Certificate Status Protocol (OCSP) service of a certificate au-
thority (CA) GlobalSign which provides the revocation status of
a certificate, mistakenly marked valid certificates as revoked due
to a misconfiguration [21]. This denied HTTPS access to many
web-services e.g., Dropbox, the Guardian, and SoundCloud. This
error persisted and affected websites for over a week, because of the
caching of revocation responses. While caching may reduce impact
of attacks on shorter time scales, but in incidents as mentioned
above, it also extends the impact.
Amazon Route 53 DDoS Attack 2019: In 2019, Amazon’s DNS
service Route 53 suffered a DDoS attack lasting for 8 hours. As a
result, other Amazon services such as S3, CloudFront, EC2, which
relied on route 53 were also disrupted [50]. The attack also affected
all the websites and service providers that used these Amazon ser-
vices, e.g., Digital Ocean, a US-based cloud infrastructure provider.
Figure 1: The figure shows the life cycle of a web request and the
different services it interacts with.
Motivated by the impact of these incidents, and by the increasing
popularity of third-party services, our goal is to analyze third-party
dependencies of websites to assess the attack surface of modern
websites and provide recommendations to increase their robustness.
2.1 Problem Scope
We look at the life cycle of a typical web request to highlight various
services on its critical path illustrated in Figure 1. When a user
requests a website, e.g. example.com, it is resolved to an IP address
by contacting the authoritative nameserver (NS) of example.com. An
NS (private or third party) of a website is the authority for the DNS
records of that website. The request is then routed to the IP address
of example.com’s webserver. If the website uses HTTPS, it presents
the client with its SSL certificate issued by a certificate authority
(CA). The client additionally verifies the validity of the certificate
by contacting servers that provide a Certificate Revocation List
(CRL) called CRL distribution points or CDP, or uses the Online
Certificate Status Protocol (OCSP) to ask the status of the certificate
from an OCSP server. CDP and OCSP servers are managed by
the certificate authority (CA). The addresses of CDPs and OCSP
servers are included in the certificate. If the certificate is valid, the
client requests the content of example.com, which may be hosted
from a CDN. The website may also load content on its webpage
from other content providers e.g., javascript libraries, fonts, etc.
Our goal is to analyze dependencies with respect to third-party
providers of services such as DNS, CDN, and certificate revocation
checking by CAs. We do not analyze other dependencies on routing
infrastructure or content providers. Regarding DNS, we do not look
at DNS-over-TLS (DoT) and DNS-over-HTTPs (DoH) because of
their currently low adoption [41].
2.2 Preliminaries
Before we formally define our measurement goals, we define action-
able metrics that we use throughout our analysis. In the following,
635
Analyzing Third Party Service Dependencies in Modern Web Services: Have We Learned from the Mirai-Dyn Incident?
IMC ’20, October 27–29, 2020, Virtual Event, USA
consider a set of websites 𝑊 = {𝑤1, 𝑤2, ..., 𝑤𝑛}, and a set of ser-
vices used by these websites 𝑆 = {𝑠1, 𝑠2, ..., 𝑠𝑚}. Let 𝑃𝑠 be a set of
all providers of service type 𝑠 e.g., CDN, DNS and CA.
• Third-party dependency: This occurs if the website 𝑤 ∈ 𝑊 is
using a service from an entity different from itself. For instance,
in the Dyn incident, Dyn is a third-party provider owned by Dyn
Inc, and it serves websites for entities like Twitter (twitter.com)
and Spotify (spotify.com), etc.
• Direct dependency: This exists when a website 𝑤 ∈ 𝑊 uses a
provider 𝑝 ∈ 𝑃𝑠1 for getting the service 𝑠1, e.g., in the Dyn
incident, twitter.com had a direct dependency on Dyn, since it
used Dyn as its authoritative nameserver. Similarly, a provider
p’ ∈ 𝑃𝑠2 may also have a direct dependency on 𝑝 to get the ser-
vice 𝑠1; e.g., Fastly also used Dyn as its authoritative nameserver
in 2016.
• Indirect dependency: This occurs when there is a direct depen-
dency between a website 𝑤 ∈ 𝑊 or a provider 𝑝 ∈ 𝑃𝑠1, and the
provider 𝑝′ ∈ 𝑃𝑠2. Then if provider 𝑝′ has a direct dependency
on another provider 𝑝′′ ∈ 𝑃𝑠3 for getting the service 𝑠3, we say
that 𝑤 or 𝑝 has an indirect dependency on 𝑝′′. For example, in
2016 pinterest.com used Fastly CDN, while Fastly used Dyn for
DNS services, leading to Pinterest being unreachable during the
Dyn incident [20]. It can also exist in providers e.g., Certum CA
uses MaxCDN which uses AWS DNS.
• Critical Dependency: When a website 𝑤 ∈ 𝑊 or a service provider
𝑝 ∈ 𝑃𝑠1 uses another third-party provider p’ ∈ 𝑃𝑠2 for getting
the service 𝑠2, such that if p’ is unavailable then service 𝑠2 is de-
nied to 𝑤 or 𝑝, then we say that 𝑤 or 𝑝 has a critical dependency
on p’ for service 𝑠2. In the Dyn incident, twitter.com was critically
dependent on Dyn for DNS. In contrast, if a website 𝑤 ∈ 𝑊 , or
a service provider 𝑝 ∈ 𝑃𝑠1, uses multiple providers for service
𝑠2 they are not critically dependent on any one provider and
have redundancy. For example, twitter.com added redundancy
by deploying a private DNS in addition to Dyn as we will see in
Section 4.
• Concentration of a service provider: This counts the number of
websites directly/indirectly dependent on a given provider. For
example, if 100 websites use Dyn directly and 50 use it indirectly,
we say that Dyn has a concentration of 150. Formally, let 𝐷𝑝
𝑤
be the set of websites having direct dependencies on provider
𝑝 ∈ 𝑃𝑠1 and let 𝐷𝑝
𝑠 be the set of all providers of service type 𝑠 ∈ 𝑆
which have a direct dependency on 𝑝. Consider a function 𝑓𝑐
of 𝐷𝑝
𝑠 , that gives the set of websites directly/indirectly
dependent on 𝑝 then the concentration of the service provider
𝐶𝑝 is defined as:
𝑤 and 𝐷𝑝
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)
𝑓𝑐(𝐷𝑘
𝑤, 𝐷𝑘
𝑠 \ {𝑝})
(cid:12)(cid:12)(cid:12)𝑓𝑐(𝐷𝑝