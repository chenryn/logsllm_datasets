Question: Consider a software application where several modules need to process user information. Which of the following design approaches is the most secure and adheres to best practices to mitigate the risk of excessive reliance on global variables?
"A": "Creating a singleton UserContext class that holds the user information as static members and is accessible from any point in the application.",
"B": "Passing user information as arguments to functions and methods that require it, thereby avoiding the use of global state.",
"C": "Storing user information in a global dictionary object that is updated and accessed by various functions throughout the application.",
"D": "Utilizing a global User object that is updated in the main module and imported as needed in other parts of the application."
Answer: B