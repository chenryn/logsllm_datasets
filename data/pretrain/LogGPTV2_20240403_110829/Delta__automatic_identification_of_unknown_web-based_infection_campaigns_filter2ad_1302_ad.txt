### Observations on Cluster Sizes and Outliers

We observe that the total sum of all cluster sizes is less than the number of distinct tags we have analyzed. This discrepancy occurs because any remaining tags are considered outliers and do not yet form a discernible trend. The close resemblance to a power law function, along with a non-negligible number of outliers, is expected. Some changes are made to only a limited number of websites, such as very similar articles being posted to fewer sites than our threshold for constituting a trend. Additionally, our view of changes is constrained by the seed and link expansion of the web crawler, meaning we may only observe a subset of the true instances of each unique trend.

### Understanding Clusters and Their Significance

It is crucial to understand what a single cluster represents. We provide different examples of tags that have been clustered together and investigate two clusters in detail. Although both clusters are low-count (i.e., relatively small), their size demonstrates that the ∆-system can detect when a trend reaches a significant distribution without requiring an unreasonably large number of observations of a single trend.

#### Example 1: Infection Campaign
The first example is an actual infection campaign observed in the wild, specifically a redirection to a Cool Exploit Kit installation. This cluster illustrates the ∆-system's ability to identify significant trends even with a small number of observations.

#### Example 2: Cross-Site Request Forgery Tokens
The second example is a cluster describing changes in cross-site request forgery (CSRF) tokens. This cluster models variations in CSRF tokens in deployments of the Django web application framework. Despite the random nature of the token values, the ∆-system correctly clusters them together due to the nearly constant entropy of the value attribute.

### Selection and Filtering of Clusters
We manually selected these two clusters using simple heuristics that suggest malicious behavior, such as external scripts with random components or JavaScript with a high ratio of digits to characters (indicating obfuscation). These heuristics can also be used to order clusters by "levels of interest" or to filter out uninteresting clusters that do not require manual analysis.

### Other Observed Trends
Other trends we observed but will not discuss in detail include:
- Modifications to Facebook Like buttons (changes in backlink URLs)
- Version updates for the jQuery library served on WordPress.com blogs
- Insertion of user-tracking tokens

### Detailed Analysis of the Cool Exploit Kit Infections

#### Infection Vector and Affected Websites
One of the most interesting clusters describes an infection vector used to redirect to a specific campaign utilizing the Cool Exploit Kit. This in-the-wild infection campaign was discovered in April 2013 on 15 different websites from 10 unique URLs, including:
- http://att.kafan.cn
- http://frozen-fs.net
- http://jses40813.ibbt.tw
- http://ppin888.com
- http://www.dv3.com.cn
- http://www.kxxwg.com
- http://www.ruadapalma.com
- http://www.sdchina.cn
- http://www.wlanwifi.net
- http://www.yysyuan.com

#### Commonalities and Root Cause
Upon verification, we found that all affected websites were using the discussion platform "Discuz!X," a popular Internet forum software written in PHP. This strong commonality suggests that the infections likely stem from a security vulnerability in the Discuz!X software, providing support for identifying the cause and a removal method.

#### Signature of the Infection
Listing 3 shows the generated signature of the infection. For this campaign, no differences were observed in the tags that were clustered together.

```plaintext
Listing 3: Cool Exploit Kit infection vector.
```

#### Additional Infection Vectors
One website, http://frozen-fs.net, also included an infection vector pointing to an installation of the Blackhole exploit kit. The domain "frozen-fs.net" was suspended by the provider 27 days after we detected the infection.

### Detailed Analysis of Cross-Site Request Forgery Tokens

#### Cluster Characteristics
A second interesting low-count cluster models variations in CSRF tokens in Django web applications. We identified similar modifications among 17 different pairs of websites. Each site used form-based CSRF tokens with the same identifier, "csrfmiddlewaretoken." The name attribute remained consistent across all pairs, while the value attribute varied. However, the ∆-system correctly clustered them due to the nearly constant entropy of the value attribute.

#### Signature of the CSRF Token
The exact identifying signature for this cluster is shown in Listing 4.

```plaintext
name = "csrfmiddlewaretoken"
value = "(JhD3IwCXcnnpRtvE42MN6r8dOBOWRoxG
| hH4f6eOMCOTEYF0RYoXFRDaTLzym61O2
[...]
| DNczWjeN1nK6nq3whXYpSSnZGdxx0Og
| F9yLS0jNUXIRsxXRqS5NVW7qXfWsgf)"
<input
```

#### Limitations and Robustness
This cluster highlights the robustness of the ∆-system in clustering changes correctly, despite the limitations of the signature generation. While the signature can detect all observed instances, it would fail to identify new, unobserved random values when matching new versions of a website.

### Performance Analysis

To assess the practical applicability of our system, we conducted a performance analysis. Figure 5 shows that the ∆-system's performance is suitable for real-world deployments. However, corner cases exist where the difference between the base and current version of a website is particularly large. Our in-depth analysis revealed that BeautifulSoup, a Python library used to parse HTML, is a significant performance bottleneck, accounting for nearly 80% of the time spent analyzing two versions of a website.

#### Performance Metrics
- Median time to analyze a single pair: 0.340 seconds
- Average time: 2.232 seconds
- Maximum time: 20 seconds

These results support the claim that the ∆-system can rely on public archives like the Internet Archive or a web cache by a search engine, although keeping a local version is strongly recommended to prevent delays and potential issues with outdated or non-existent versions in public archives.

### Limitations

#### Step-by-step Injection
An attacker could circumvent the ∆-system by adding malicious code in small, benign steps. However, this attack is limited because:
- It requires server-side code injection, which is difficult to achieve.
- Client-side detection can impede the attack.
- Analyzing the website on every mutation event can help detect such incremental changes.

#### Evolution of Infection Vectors
Malware developers continuously evolve their techniques to evade detection. While dynamic analysis systems can complement static analysis, the ∆-system's static approach is effective at detecting trends and infections early, before they become active.

### Related Work

No prior work exists that actively searches for and finds previously unknown infection campaigns. The ∆-system complements dynamic analysis systems by detecting trends and forwarding them for further dynamic analysis.

### Conclusion

The ∆-system effectively detects trends and infections in web content, even with a small number of observations. By understanding the characteristics of clusters and addressing performance and evasion challenges, the system can be a valuable tool in the ongoing effort to secure web environments.