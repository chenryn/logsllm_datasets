3.参考代码工程redis
春风阁讲堂出品
Z6
---
## Page 93
6.6.Redis中的Lua编程
6.6.1.Lua编程简介
Redis从2.6版本开始引入使用Lua编程语言进行的服务器端脚本编程功能，这个功能可以让用户直接在Redis内部执行各种操作，从而达
到简化代码并提高性能的作用
lua是一种轻量小巧的脚本语言，用标准C语言编写并以源代码形式开放，其设计目的是为了嵌入应用程序中，从而为应用程序提供灵活的扩
展和定制功能
我们可以理解Redis中的Lua脚本为数据库上的存储过程，通过Redis脚本，我们极少了减少了RTT时间，提升了效率
由于Redis中lua脚本的原子性，它被广泛的应用于分布式设计、分布式锁设计
学习网址：
ht tps : / /wmw, runoob. com/ lua/luatutorial. html
春风阁讲堂出品
6
---
## Page 94
6.6.2.Lua编程演示
1.执行一段脚本
EVAL ~return (KEYS[1], KEYS[2], ARGV[1], ARGV[2]] ” 2 key1 key2 first second
2.缓存脚本
3.判断脚本是否存在
SCRIPT EXISTS a42059b356c875f0717db19a51f6aaca9ae659ea
4.从缓存中移除所有脚本
SCRIPT FLUSH
5.执行缓存脚本
EVALSHA a42059b356c875f0717db19a51f6aaca9ae659ea 2 k1 k2
6.lua脚本中可以执行redis命令
eval ~redis. cal1 (' set’, KEYS[1], KEYS[2]) redis. cal1(′ incr', KEYS[1]) return redis. call ( get’, KEYS[1]) ” 2 a1 1
春风阁讲堂出品
6
---
## Page 95
6.7.Redis中的事务
6.7.1.Redis事务的定义
Redis事务的主要作用就是串联多个命令防止别的命令插队
6.7.2.Redis事务三特性
1.单独的隔离操作：
事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。
2.没有隔离级别的概念：
队列中的命令没有提交之前都不会实际被执行，因为事务提交前任何指令都不会被实际执行
3.不保证原子性：
事务中如果有一条命令执行失败，其后的命令仍然会被执行，不会回滚（但如果是组队时失败会回滚）
Redis事务与我们传统数据库的事务含义相差非常大
提示信息：
传统事务有4大特性，分别是：原子性（Atomicity）、一致性（Consistency）、隔离性（Isolation）、持久性（Durability）
数据库隔离的四个级别分别是：1、读取未提交内容：2、读取提交内容：3、可重读：4、可串行化
春风阁讲堂出品
93
---
## Page 96
6.7.3.Redis事务三阶段
（1）开始事务
multi命令标志着Redis事务开始
（2）命令入队
mult与exec中间的命令类似打包的方式，统一入队
（3）执行事务
exec命令标志着事务正式执行
6.7.4.Redis事务相关命令
行号
命令说明
DISCARD取消事务，放弃执行事务块内的所有命令
2
EXEC执行所有事务块内的命令
3
MULTI标记一个事务块的开始
A
UNWATCH 取消WATCH命令对所有key的监视
5
WATCHkey[key..]监视一个（或多个）key
如果在事务执行之前key被其他命令所改动，那么事务将被打断
春风阁讲堂出品
96
---
## Page 97
6.7.5.场景演示-正常提交
127.0.0.1:6379>
multi
事务开始
OK
127.0.0.1:6379(TX)>setk1val1
QUEUED
127.0.0.1:6379（TX)>setk2val2
命令打包
QUEUED
127.0.0.1:6379(TX)>getk1
QUEUED
127.0.0.1:6379(TX)>
exec
事务执行
1）0K
2）
OK
3)"val1"
127.0.0.1:6379>
在事务multi开始之后到exec结束之前，我们可以开启其它窗口查看并修改相关值，不难看出：
Redis中的事务是一个原子操作，不会被其它命令插队执行
春风阁讲堂出品
---
## Page 98
6.7.6.场景演示-取消事务
127.0.0.1:6379>multi
OK
127.0.0.1:6379(TX)>set k1v1
QUEUED
127.0.0.1:6379(TX)>set k2v2
事务在最后发生取消
QUEUED
k1,k2值未被修改
127.0.0.1:6379(TX)>get k1
QUEUED
127.0.0.1:6379（TX)>discard
OK
127.0.0.1:6379>
getkl
"vall"
我们可以看到，k1的值未发生变
127.0.0.1:6379>
化
春风阁讲堂出品
---
## Page 99
6.7.7.场景演示-语法错误
127.0.0.1:6379>multi
OK
127.0.0.1:6379（TX)> set k1v1
QUEUED
127.0.0.1:6379（TX)> set k2v2
QUEUED
发生语法错误，所以均不会执行
127.0.0.1:6379(TX)>get k1
QUEUED
127.0.0.1:6379(TX)>
setl
(error)ERRunknowncommand
setl，with args beginning with:
127.0.0.1:6379(TX)> exec
(error)EXECABoRT Transaction discarded because of previous errors.
127.0.0.1:6379>
春风阁讲堂出品
66
---
## Page 100
6.7.8.场景演示-运行错误
127.0.0.1:6379>multi
OK
127.0.0.1:6379(TX)>set k1v1
QUEUED
127.0.0.1:6379(TX)> set k2v2
运行期命令，不影响前后命令的执
QUEUED
行
127.0.0.1:6379(TX)>
incr kl
QUEUED
127.0.0.1:6379(TX)> set k3 v3
QUEUED
127.0.0.1:6379(TX)>mget k1k2k3
QUEUED
127.0.0.1:6379(TX)>exec
1）0K
2）
OK
3)
（error）E
ERRvalue is not anintegeroroutofrange
4）
OK
5）
1)
"v1"
2)
"v2"
3）"v3"
127.0.0.1:6379>
春风阁讲堂出品
001
---
## Page 101
6.8.Redis中的锁介绍
6.8.1.锁的概念与分类
1.悲观锁
(PessimisticLock)，顾名思义，就是很悲观：每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数
据就会block直到它拿到锁。
传统的关系型数据库里边就用到了很多这种锁机制，比如行锁，表锁等，读锁，写锁等，都是在做操作之前先上锁
接下来的实例我们会采用mysql进行演练
2.乐观锁
乐观锁（OptimisticLock)，顾名思义，就是很乐观：每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在
此期间别人有没有去更新这个数据，可以使用版本号等机制
Redis采用的是乐观锁实现，接下来的实例我们会采用watch进行演练
春风阁讲堂出品
101
---
## Page 102
6.8.2.数据库的悲观锁
1.
我们设计这么一个简单的表
desc
t_amount
信息
结果1
概况
状态
Field
Type
Null
Key
Default
Extra
P!
int(11)
NO
PRI
(Null)
val
bigint(20) VES
(Null)
2.
新增
一条测试记录
select
from
t_amount
信息
解释
结果1
概况
状态
id
val
100
春风阁讲堂出品
102
---
## Page 103
3.打开三个窗口，分别执行如下命令（注意：每次执行一条）
窗口1:
set autocommit=0;
update t_amount set val=val-10;
commit;
窗口2
set autocommit=0;
update t_amount set val=val-20;
commit;
窗口3
set autocommit=0;
update t_amount set val=val-30;
commit;
4.大家会发现，第一个窗口如果没有提交，那么第二、第三个窗口是被锁住，也就是说在传统数据的事务中，更新是悲观锁的实现
具体过程参考视频演示
春风阁讲堂出品
103
---
## Page 104
6.8.3.数据库中经典轮询
1.场景需求
数据库表table1中有1000W记录，程序开户10个线程进行取数，要求线程之间取数不能重复（顺序不要求），并且以最快的算法处理完
这是数据库一个非常经典的轮询问题，也是悲观锁的典型应用
2.典型错误代码实现1
A: update table1 set batch_no='l' where batch_no='0′
B: select * from tablel where batch_no='l'
3.典型错误代码实现1
A: select * from tablel where batch_no='0’
B：每处理一条把数据更新成batch_no=1
4.正确算法代码实现
A：线程生成唯一序列号batch_no
B:update tablel set batch_no=# {batch_no} where batch_no=′0
C:select *from tablel where batch_no=#batch_no}
5.当然该场景本身还有其它方法实现，比如取模、表加锁等等，但总体上不如前一种优雅
其实整个算法的核心就是利用了数据库中update语句的悲观锁行为，保证B步骤在执行的时候永不重复
春风阁讲堂出品
104
---
## Page 105
6.8.4.Redis中的乐观锁
1.
在第一个窗口中执行1，2，3步
127.0.0.1:6379>
127.0.0.1:6379>
watchk1
OK
127.0.0.1:6379>multi
OK
127.0.0.1:6379(TX)>incrk1
QUEUED
127.0.0.1:6379(TX)>exec
(nil)
127.0.0.1:6379>
在第个窗口中执行第4步
127.0.0.1:6379>incr kl
(integer)4
127.0.0.1:6379>
3.然后再在第一个窗口中执行5步
大家发现没有，第一个窗口执行结果为空，也就是相当于是失败
这是因为watch命令是一种乐观锁的实现，Redis在修改的时候会检测数据是否被更改，如果更改了，则执行失败
春风阁讲堂出品
105
---
## Page 106
6.8.5.Redis之分布式锁
在很多业务场景中，比如秒杀下单、抢红包等等业务场景，都需要用到分布式锁
程序的分布式锁的实现方式有多种，比如有Redis、Zookeeper、数据库
一
互斥性
任意时刻，只有一个客户端能持有锁
锁超时释放
持有锁超时，可以释放，防止不必要的资源浪费，也可以防止死锁
分布式锁特征
一
可重入性
一个线程如果获取了锁之后可以再次对其请求加锁
高性能和高可用
加锁和解锁需要开销尽可能低，同时也要保证高可用，避免分布式锁失效
安全性
锁只能被持有的客户端删除，不能被其他客户端删除
“互斥性”：任意时刻，只有一个客户端能持有锁。
“锁超时释放”：持有锁超时，可以释放，防止不必要的资源浪费，也可以防止死锁。
“可重入性”：一个线程如果获取了锁之后，可以再次对其请求加锁。
“高性能和高可用”：加锁和解锁需要开销尽可能低，同时也要保证高可用，避免分布式锁失效。
“安全性”：锁只能被持有的客户端删除，不能被其他客户端删除
在场景应用举例中，我们专门有一章节来介绍Redis的分布式锁实现，这里我们仅作了解
春风阁讲堂出品
106
---
## Page 107
6.9.Redis客户端缓存
6.9.1.客户端缓存背景
无缓存模式
Redis模式
应用程序
应用程序
1.查询
2.Redis
Redis
失效
1.数据
2.数据
3.查询
数据库
加载
更新
Redis缓存
数据库
数据库
春风阁讲堂出品
107
---
## Page 108
普通本地缓存模式+Redis模式
Redis客户端模式
应用程序
应用程序
1.查询
2.查询
3.Redis
1.查询
2.查询
3.Redis
本地缓存
Redis缓存
失效
5.缓存更新时
本地缓存
Redis缓存
失效
处理其它节点
本地级缓存
4.查询
本地级缓存
应用节点1、
数据库
应用节点2、
5.更新
本地缓存
Redis缓存
4.查询