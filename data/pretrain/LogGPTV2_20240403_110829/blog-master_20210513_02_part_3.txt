+char *dym_sql = "SELECT current_database()";  
+EXEC SQL END DECLARE SECTION;  
+  
+int main(){  
+  EXEC SQL CONNECT TO postgres AS con1;  
+  EXEC SQL CONNECT TO testdb AS con2;  
+  EXEC SQL AT con1 DECLARE stmt STATEMENT;  
+  EXEC SQL PREPARE stmt FROM :dym_sql;  
+  EXEC SQL EXECUTE stmt INTO :dbname;  
+  printf("%s\n", dbname);  
+  
+  EXEC SQL DISCONNECT ALL;  
+  return 0;  
+}  
```
### 详见  
1、Building upon its existing support for range types, PostgreSQL 14 adds the new multirange type that lets you specify an ordered list of noncontiguous ranges, e.g.:  
SELECT datemultirange( daterange('2021-07-01', '2021-07-31'), daterange('2021-09-01', '2021-09-30'), daterange('2021-11-01', '2021-11-30'), daterange('2022-01-01', '2022-01-31'), daterange('2022-03-01', '2022-04-07') );  
The new multirange type supports the existing operations available to range types.  
- [《PostgreSQL 14 preview - multirange type》](../202012/20201224_01.md)      
2、PostgreSQL 14 now adds a general subscripting framework for retrieving information in nested objects.   
For example, you can now retrieve nested info in the JSONB data type using subscript syntax, e.g.:  
SELECT ('{ "this": { "now": { "works": "in postgres 14!" }}}'::jsonb)['this']['now']['works'];  
- [《PostgreSQL 14 preview - 支持 jsonb 下标语法, 支持set原子操作, 类似array下标》](../202102/20210201_02.md)      
3、PostgreSQL 14 also adds support for OUT parameters in stored procedures,   
4、and allows for the GROUP BY clause to use the DISTINCT keyword to remove duplicate  combinations.    
- [《PostgreSQL 14 preview - 支持 GROUP BY GROUPING SET DISTINCT》](../202103/20210319_01.md)      
5、For recursive common table expressions (WITH queries), PostgreSQL 14 adds the syntactic conveniences of SEARCH and CYCLE to help with ordering and cycle detection respectively.   
- [《PostgreSQL 14 preview - SQL标准增强 (SEARCH and CYCLE clauses), 递归(CTE)图式搜索增加广度优先、深度优先语法, 循环语法 - breadth- or depth-first search orders and detect cycles》](../202102/20210201_03.md)        
6、There is also the new date_bin function in PostgreSQL 14 that can align timestamps with specified intervals, a technique known as "binning."  
- [《PostgreSQL 14 preview - date_bin 任意起点, 任意bucket(interval) split bucket align 统计 - 时序场景(iot, 金融等), 关联timescaledb》](../202103/20210325_01.md)        
7、ctid range scan 扫描方法  
- [《PostgreSQL 14 preview - tid range scan方法, 一种page级别应用可自控的并行扫描、处理方法, 结合RR snapshot export功能》](../202102/20210228_01.md)         
8、[《PostgreSQL 14 preview - ECPG 语法增强 - 兼容Oracle PRO\*C declare statement 语法》](../202105/20210522_02.md)     
## 三、管理  
1、垃圾回收增强  
concurrently模式创建索引不会引起垃圾膨胀,   
- 场景: OLTP业务  
- 价值: 降低膨胀概率  
- DEMO:
```
create index CONCURRENTLY abc ...
reindex CONCURRENTLY xxx ...
以上操作不管持续多久, 不影响vacuum回收这之间产生的垃圾  
```
增加一个全速vacuum模式在触发后会忽略索引和sleep参数执行vacuum以最快速度完成vacuum freeze,   
- 场景: OLTP业务  
- 价值: 加速vacuum freeze, 降低xid wrapped风险  
- DEMO:
```
postgres=# select * from pg_settings where name ~ 'failsafe';
-[ RECORD 1 ]---+------------------------------------------------------------------------------------
name            | vacuum_failsafe_age
setting         | 1600000000
unit            | 
category        | Client Connection Defaults / Statement Behavior
short_desc      | Age at which VACUUM should trigger failsafe to avoid a wraparound outage.
extra_desc      | 
context         | user
vartype         | integer
source          | default
min_val         | 0
max_val         | 2100000000
enumvals        | 
boot_val        | 1600000000
reset_val       | 1600000000
sourcefile      | 
sourceline      | 
pending_restart | f
-[ RECORD 2 ]---+------------------------------------------------------------------------------------
name            | vacuum_multixact_failsafe_age
setting         | 1600000000
unit            | 
category        | Client Connection Defaults / Statement Behavior
short_desc      | Multixact age at which VACUUM should trigger failsafe to avoid a wraparound outage.
extra_desc      | 
context         | user
vartype         | integer
source          | default
min_val         | 0
max_val         | 2100000000
enumvals        | 
boot_val        | 1600000000
reset_val       | 1600000000
sourcefile      | 
sourceline      | 
pending_restart | f
```
在表里的垃圾占用的PAGE较少时跳过index vacuum从而提高vacuum 效率  
- 场景: OLTP业务  
- 价值: 加速垃圾回收效率  
2、analyze 提升(支持父表的全局视角统计信息, 支持IO prefetch加速analyze)  
- 场景: 通用场景  
- 价值: 提高统计信息数据采集速度  
3、系统视图和管理函数增强  
新增pg_stat_progress_copy视图 , 支持COPY 导入数据进度监控 , 导入多少行, 排除多少行(where filter)  
- 场景: DBA效能  
- 价值: 掌握copy倒入进度和速度  
- DEMO:
```
postgres=# \d pg_stat_progress_copy
           View "pg_catalog.pg_stat_progress_copy"
      Column      |  Type   | Collation | Nullable | Default 
------------------+---------+-----------+----------+---------
 pid              | integer |           |          | 
 datid            | oid     |           |          | 
 datname          | name    |           |          | 
 relid            | oid     |           |          | 
 command          | text    |           |          | 
 type             | text    |           |          | 
 bytes_processed  | bigint  |           |          | 
 bytes_total      | bigint  |           |          | 
 tuples_processed | bigint  |           |          | 
 tuples_excluded  | bigint  |           |          | 
```
新增pg_stat_wal统计信息视图, 跟踪wal日志统计信息  
- 场景: DBA效能  
- 价值: 掌握数据库WAL日志相关的统计信息  
- DEMO:
```
postgres=# \d pg_stat_wal
                        View "pg_catalog.pg_stat_wal"
      Column      |           Type           | Collation | Nullable | Default 
------------------+--------------------------+-----------+----------+---------
 wal_records      | bigint                   |           |          | 
 wal_fpi          | bigint                   |           |          | 
 wal_bytes        | numeric                  |           |          | 
 wal_buffers_full | bigint                   |           |          | 
 wal_write        | bigint                   |           |          | 
 wal_sync         | bigint                   |           |          | 
 wal_write_time   | double precision         |           |          | 
 wal_sync_time    | double precision         |           |          | 
 stats_reset      | timestamp with time zone |           |          | 
```
新增 replication slot 统计信息视图 - pg_stat_replication_slots  
- 场景: DBA效能  
- 价值: 掌握每个SLOT的统计信息  
- DEMO:
```
postgres=# \d pg_stat_replication_slots
               View "pg_catalog.pg_stat_replication_slots"
    Column    |           Type           | Collation | Nullable | Default 
--------------+--------------------------+-----------+----------+---------
 slot_name    | text                     |           |          | 
 spill_txns   | bigint                   |           |          | 
 spill_count  | bigint                   |           |          | 
 spill_bytes  | bigint                   |           |          | 
 stream_txns  | bigint                   |           |          | 
 stream_count | bigint                   |           |          | 
 stream_bytes | bigint                   |           |          | 
 total_txns   | bigint                   |           |          | 
 total_bytes  | bigint                   |           |          | 
 stats_reset  | timestamp with time zone |           |          | 
```
pg_locks 增加 wait_start 字段, 跟踪锁等待开始时间  
- 场景: DBA效能  
- 价值: 掌握更多锁等待细节, 例如等待时长  
- DEMO:
```
postgres=# \d pg_locks
                           View "pg_catalog.pg_locks"
       Column       |           Type           | Collation | Nullable | Default 
--------------------+--------------------------+-----------+----------+---------
 locktype           | text                     |           |          | 
 database           | oid                      |           |          | 
 relation           | oid                      |           |          | 
 page               | integer                  |           |          | 
 tuple              | smallint                 |           |          | 
 virtualxid         | text                     |           |          | 
 transactionid      | xid                      |           |          | 
 classid            | oid                      |           |          | 
 objid              | oid                      |           |          | 
 objsubid           | smallint                 |           |          | 
 virtualtransaction | text                     |           |          | 
 pid                | integer                  |           |          | 
 mode               | text                     |           |          | 
 granted            | boolean                  |           |          | 
 fastpath           | boolean                  |           |          | 
 waitstart          | timestamp with time zone |           |          | 
```
pg_stat_database 增加 active_time, idle_in_transaction_time, sessions, sessions_abandoned, sessions_fatal, sessions_killed统计 指标, 指导如何分析数据库有没有性能瓶颈, 瓶颈是什么? top瓶颈是什么? 如何优化?  
- 场景: DBA效能  
- 价值: 掌握更多数据库级别的活跃时间、空闲时间、会话量等统计信息, 了解数据库是否达到瓶颈  
- DEMO:
```
postgres=# \d pg_stat_database
                          View "pg_catalog.pg_stat_database"
          Column          |           Type           | Collation | Nullable | Default 
--------------------------+--------------------------+-----------+----------+---------