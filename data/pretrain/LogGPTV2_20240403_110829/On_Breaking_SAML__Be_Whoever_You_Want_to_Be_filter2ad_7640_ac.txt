was that OpenSAML compared the Id used by the signa-
ture validation with the Id of the processed assertion. If
these identiﬁers were different (based on a string compar-
ison), the signature validation failed. Additionally, XML
messages including more than one element with the same
Id were also rejected. Both mechanisms are handled in
OpenSAML by using the Apache Xerces library and its
XML Schema validation method [34]. Nevertheless, it
was possible to overcome these countermeasures with a
more sophisticated XSW attack.
As mentioned before,
in OpenSAML the Apache
Xerces library performs a schema validation of every in-
coming XML message. Therefore, the Id of each el-
ement can be deﬁned by using the appropriate XML
Schema ﬁle. This allows the Xerces library to iden-
tify all included Ids and to reject messages with Id
values which are not unique (e.g. duplicated). How-
ever, a bug in this library caused that XML elements
deﬁned with xsd:any content were not processed cor-
rectly. More concretely, the content of the elements
deﬁned as  were
not checked using the deﬁned XML Schema. Therefore,
it was possible to insert elements with arbitrary – also
duplicated – Ids inside an XML message. This created a
good position for our wrapped content.
It is still the question which of the extensible elements
could be used for the execution of our attacks. This de-
pends on two processing properties:
1. Which element is used for assertion processing?
2. Which element is validated by the security module,
if there are two elements with the same Id?
Interestingly,
the two existing implementations of
Apache Xerces (Java and C++) handled element deref-
erencing differently.
For C++, the attacker had to ensure that the original
signed assertion was copied before the evil assertion. In
the Java case, the legitimate assertion had to be placed
within or after the evil assertion.
In summary, if two
elements with the same Id values occurred in an XML
message, the XML security library detected only the ﬁrst
(for C++) or the last (for Java) element in the message.
This property gave the attacker an opportunity to use
Figure 10: XSW attack on OpenSAML library.
Figure 11: XML Schema deﬁnition of the Extensions
element.
e.g. the Extensions element for the C++ library, whose
XML Schema is deﬁned in Figure 11. However, the
Extensions element is not the only possible position for
our wrapped content. The schemas of SAML and XML
Signature allow more locations (e.g. the Object element
of the Signature, or the SubjectConfirmationData
and Advice elements of the Assertion).
The previously described behavior of
the XML
schema validation forced OpenSAML to use the wrapped
original assertion for signature validation.
In contrast,
the application logic processed the claims of the evil as-
sertion. In Figure 10, we present the concrete attack mes-
sages of this novel XSW variant.
The successful attack on OpenSAML shows that coun-
tering the XSW attack can become more complicated
than expected. Even when applying several countermea-
sures, the developer should still consider vulnerabilities
in the underlying libraries. Namely, one vulnerability in
the XML Schema validating library can lead to the exe-
cution of a successful XSW attack.
5.4 Various Implementation Flaws
While reviewing the OneLogin Toolkit, we discovered
another interesting ﬂaw: the implementation did not care
about what data was actually signed. Therefore, any con-
tent signed by the IdP was sufﬁcient to launch a XSW
attack. In our case we used the metadata of the IdP 4 and
created our own self-made response message to success-
fully attack OneLogin.
4The SAML Metadata [12] describes properties of SAML entities
in XML to allow the easy establishment of federations. Typically, the
metadata is signed by the issuer and publicly available.
SignedProcessedResponseAssertionExtensionsAssertionC++JavaSignatureSignedInfoReferenceURI=“#123“ID=“123“ResponseAssertionAssertionSignatureSignedInfoReferenceURI=“#123“ID=“123“ID=“123“ID=“123“ObjectBesides the fact that a SAML system has to check
what data is signed, it is also essential to verify by whom
the signature was created. In an early version of Sim-
pleSAMLphp, which applied Type 3 messages, we ob-
served that an attacker could forge the outer signature of
the response message with any arbitrary key. In short,
the SimpleSAMLphp RP did not verify if the included
certiﬁcate in the KeyInfo element is trustworthy at all.
The key evaluation for the signed assertion was correctly
handled.
5.5 Secure Frameworks
In our evaluation of real-world SAML implementations
we observed that Microsoft Sharepoint 2010 and Simple-
SAMLphp were resistant to all applied test cases. Based
on these ﬁndings the following questions arise: How
do these systems implement signature validation?
In
which way do signature validation and assertion process-
ing work together? Due to the fact that the source code of
Sharepoint 2010 is not publicly available, we were only
able to analyze SimpleSAMLphp.
According to this investigation the main signature
validation and claims processing algorithm of Simple-
SAMLphp performs the following ﬁve steps to counter-
act XSW attacks:
1. XML Schema validation: First,
the whole re-
sponse message is validated against the applied
SAML schemas.
2. Extract assertions: All included assertions are ex-
tracted. Each assertion is saved as a DOM tree in
a separate variable. The following steps are only
applied on these segregated assertions.
3. Verify what is signed: SimpleSAMLphp checks, if
each assertion is protected by an enveloped signa-
ture. In short, the XML node addressed by the URI
attribute of the Reference element is compared to
the root element of the same assertion. The XML
Signature in the assertion is an enveloped signature
if and only if both objects are identical.
4. Validate signature: The veriﬁcation of every en-
veloped signature is exclusively done on the DOM
tree of each corresponding assertion.
5. Assertion processing: The subsequent assertion
processing is solely done with the extracted and suc-
cessfully validated assertions.
When not considering the signature exclusion bug
found in the OpenAthens implementation and its Java-
based assertions’ processing, this framework was also
resistant to all the described attacks. The analysis of its
implementation showed that it processes SAML asser-
tions similarly to the above described SimpleSAMLphp
framework.
e
p
y
t
g
n
i
n
g
i
Frameworks / Providers S
1)
Apache Axis 2
Guanxi
2)
1)
Higgins 1.x
1)
IBM XS40
2)
JOSSO
1)
WIF
1)
OIOSAML
1)
OpenAM
OneLogin
1)
1)
OpenAthens
1)
OpenSAML
1)
Salesforce
3)
SimpleSAMLphp
WSO2
2)
e
r
u
t
a
n
g
i
S
n
o
i
s
u
l
c
x
e
X
X
X
d
e
t
a
c
i
t
s
i
h
p
o
S
W
S
X
X
e
l
b
a
r
e
n
l
u
v
t
o
N
X
X
W
S
X
d
e
n
ﬁ
e
R
X
X
X
X
X
X
X
X
X
X
Table 2: Results of our practical evaluation show that a
majority of the analyzed frameworks were vulnerable to
the reﬁned wrapping techniques.
5.6 Summary
We evaluated 14 different SAML-based systems. We
found 11 of them susceptible to XSW attacks, while the
majority were prone to reﬁned XSW. One prevalently
used framework (OpenSAML) was receptive to a new,
more subtle, variant of this attack vector.
In addition,
three out of the tested frameworks were vulnerable to
Signature Exclusion attacks. We found two implemen-
tations, which were resistant against all test cases. The
results obtained from our analysis are summarized in Ta-
ble 2.
6 XSW Penetration Test Tool for SAML
Motivated on our crucial ﬁndings from the extensive
frameworks’ analysis and the vast amount of possible
attack permutations, we implemented the ﬁrst fully au-
tomated penetration test tool for XSW attacks in SAML-
based frameworks.
In this section we brieﬂy describe
the basic design decisions for our tool. Afterwards, we
motivate its usage by revisiting the Salesforce SAML in-
terface. This interface yielded a new possibility for an
interesting XSW attack even after a deep investigation
with different handcrafted messages.
Our tool will be integrated into the WS-Attacker
framework5 and offered as open source to support the
huge Web Services and SSO developers’ community.
6.1 Penetration Test Tool
According to the theoretical and practical analysis of dif-
ferent SAML frameworks (see Section 4, 5), we gained
the following general knowledge about XSW attacks:
5http://ws-attacker.sourceforge.net
• XML Schema validation: Some of the SAML
frameworks check message conformance to the un-
derlying XML schema. Therefore, it is necessary to
use XML schema extension points for placing the
wrapped content. If the extension elements are not
provided in the message, they have to be explicitly
included.
• Order and position: The order and position of
signed and executed elements in the message tree
can force the different processing modules to have
inconsistent data views.
• Processing of the Ids: Several SAML frameworks
explicitly check, if the Id in the handled assertion
is also used in the Reference of the XML Signa-
ture. Application of this countermeasure alone does
not work, as there is still the option to use more el-
ements with equal Ids.
• Placement of
the Signature element: The
Signature element can be placed in the newly cre-
ated evil assertion or stay in the original assertion
(cf. the attacks on Higgins, Apache Axis2 and IBM
XS40 in Figure 8). Both cases must be considered.
• Signature exclusion: In three out of 14 frameworks
implementation bugs caused that the signature vali-
dation step was omitted.
• Untrusted signatures: It is essential to check that
the signature was created with a trustworthy key.
Otherwise, the attacker can forge a signature with
any arbitrary key and embed the corresponding cer-
tiﬁcate in the KeyInfo element.
Based on this knowledge, we developed a library,
which allows the systematic creation of a vast amount
of different SAML attack vectors.
Its processing can
be summarized in the following steps. First, the library
takes a signed XML document containing a SAML as-
sertion and analyzes the usage of XML Signature. The
element referenced by the signature is stored as a string.
Subsequently, it creates a new malicious message includ-
ing an evil assertion with modiﬁed content (e.g.
the
NameID and/or Timestamp element). Then, it searches
dynamically for extension points in the XML Schema
documents (e.g. XML Schemas for SAML, HTTP bind-
ing, XML Signature, or SOAP). It places the extension
elements into the malicious message (e.g. a new Object
element is created and placed into the given Signature
element). Afterwards, the library embeds the stored orig-
inal referenced element into each of the possible mali-
cious message elements. For each position, a combina-