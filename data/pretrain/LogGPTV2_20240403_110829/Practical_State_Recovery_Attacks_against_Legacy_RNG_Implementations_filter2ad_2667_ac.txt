ter the publication of SP800-90 in 2006. The first SP800-90
CMVP certifications were issued in 2008, yet 47% of FIPS cer-
tificates issued 2008-2016 were for X9.31.
Once a device has been certified under the CMVP, it is added to a list
of approved devices that US federal agencies and other regulated
bodies may use.
FIPS 140-2 Annex C: Approved Random Number Generators listed
the ANSI X9.31 Random Number Generator with AES and three-
key 3DES between January 31, 2005 and the most recent revision
on January 4, 2016; variants of the X9.17/X9.31 PRG using different
block ciphers have been listed as approved random number genera-
tors in FIPS and NIST standards since at least 1992. In January 2011,
NIST deprecated the X9.31 PRG in a transition away from smaller
key lengths and weaker cryptographic algorithms [7]. Currently,
the only approved PRGs are from NIST SP 800-90A, which was
updated in June 2015 to remove Dual EC DRBG.
3.2 Certified unsafe usage of the X9.31 PRG
We examined the security policy documents of all devices certified
under the CMVP that documented previous or current use of the
X9.31 PRG. NIST provides a historical list of implementations cer-
tified for random number generators [1]. A single FIPS validation
certificate may cover multiple products and versions. The scope
of these certificates varied: in some cases they validated a crypto-
graphic module or a single product and version, and in others they
covered entire product lines and operating systems. According to
this list, FIPS has issued 2,516 certificates in total for products that
implemented X9.31. Of these, on July 13, 2017, 997 listed current
support for X9.31 despite its official deprecation in January 2016.
The remaining certificates were only available in updated versions
that had removed details of historical X9.31 implementations. Of
the 997 that indicated support for X9.31, 682 certificates from 288
vendors were validated for random number generation.
The security policy documents each contain a list of Critical Se-
curity Parameters (CSPs), which includes access control, key and
parameter generation, and zeroization policies. We also looked for
discussion elsewhere in the documentation of seed key generation.
127 of the vendors did not mention the AES key in the list of CSPs
or elsewhere in the documentation. Since we are unable to deter-
mine whether the key was generated securely, we exclude these
from further study. This left 161 vendors who mention seed key
generation in some capacity.
We counted an X9.31 implementation as secure if the documen-
tation stated that the key and the seed were user-generated, the
output of another random number generator, contained any discus-
sion of specifying sufficient entropy for the seed key, or a strategy
Vendor
BeCrypt Ltd.
Cisco Systems Inc
Deltacrypt Technologies Inc
Fortinet Inc
MRV Communications
Neoscale Systems Inc
Neopost Technologies
Renesas Technology America
Product Line
BeCrypt Cryptographic Library
Aironet
DeltaCrypt FIPS Module
FortiOS v4
LX-4000T/LX-8020S
CryptoStor
Postal Security Devices
AE57C1
Language Used
“Compiled into binary”
“statically stored in the code”
“Hard Coded’
“generated external to the module”
“Stored in flash”
“Static key, Stored in the firmware”
“Entered in factory (in tamper protected memory)”
“With the exception of DHSK and the
RNG seed, all CSPs are loaded at factory.”
“Generation: NA/Static”
“Embedded in FLASH”
“Injected During Manufacture”
“Hard-coded in the module”
TechGuard Security
Tendyron Corporation
ViaSat Inc
Vocera Communications Inc.
Table 2: FIPS 140-2 Security Policies Documenting Potential X9.31 State Recovery Vulnerabilities. Since the X9.31 RNG was
removed from FIPS 140-2 in January 2016, many vendors have published software updates to remove X9.31 and updated their
security policies accordingly.
PoliWall-CCF
OnKey193
FlagStone Core
Vocera Cryptographic Module
to generate keys uniquely per device or per boot. In the case of
a user-generated key, the onus would fall on the user to ensure
that the key is securely generated and rotated as necessary. We
did not study these cases further. The largest class of devices we
evaluated as safe, generated the AES key on boot by seeding from
a non-FIPS approved random number generator, most commonly
the Linux random number generator. As an example of language
indicating what we considered to be safe X9.31 key generation, the
InZero Gateway security policy states that the “PRNG is seeded
from /dev/urandom...this provides the PRNG with 256 bits of en-
tropy for the seed key” [2]. The text includes additional commentary
on the risk involved in using a weak random number generator for
the purpose of FIPS validation. While urandom has had known vul-
nerabilities stemming from failure to properly seed on first boot of
some classes of devices [34], we considered such usage safe for the
purposes of this analysis. As another example, the 2012 FIPS 140-2
security policy for the Juniper SSG 140 [37], which was certified for
the X9.31 generator, states that for the “PRNG Seed and Seed Key”
“Initial generation via entropy gathered from a variety of internal
sources.” There were 149 certificates (93% of the 161) in this class.
We counted an implementation as potentially vulnerable to a state
recovery attack if the documentation stated that a single key was
used for the lifetime of a device, particularly in cases where an
external attacker would be able to learn this key. Unsafe devices
had documentation indicating that the AES key was stored statically
in the firmware or flash memory and loaded at runtime into the
PRG. There were 12 vendors in this class, covering 40 product lines.
We list these products together with the language used to describe
seed key generation in Table 2.
3.3 Device-specific analysis
We were only able to gain access to the binary image for one of
the products we identified as potentially vulnerable, a Fortinet
operating system. We give more details on our investigation in the
next section.
Cisco confirmed to us that X9.31 was used in Aironet 12.4-based
branches for access points, Wireless Service Modules (WiSMs) and
4400 controllers using version 7.0. They were unable to locate the
source code or confirm use of a hardcoded key, although they agreed
with our interpretation of the certification language. They informed
us that the 4400 controllers reached end of support in 2016, the
WiSM modules reached end of support in 2017, and the 12.4-based
branch of Cisco IOS software that supported X9.31 reached end
of support at an unknown date. Another family of access points
used the 15.3 branch of IOS, which uses NIST 800-90 and not X9.31.
Cisco informed us that they no longer ship products using X9.31.
The BeCrypt Cryptographic Library Version 2.0 documentation
states that the “RNG seed key” is “pre-loaded during the manufac-
turing process” and stored as “compiled in the binary”. Version 3.0
of the BeCrypt library no longer includes the X9.31 PRG. BeCrypt
stated to us that “Except in one case when we use the RNG key
creation routine we do not recycle the strong entropy output from
one usage to be the input to the next usage. Instead, we use fresh
entropy. In the one case where we recycle the strong entropy input,
Figure 3: Counting vulnerable implementations. We exam-
ined the security policy documents from 288 vendors who
had been FIPS 140-2 certified for the X9.31 PRG for informa-
tion on how the seed key for the random number generator
was generated. 12 vendors, or 4% of the total, documented a
hard-coded key vulnerability.
05010015020025030012149127Noinformation|Notvulnerable|VulnerableTable 3: Affected Implementation Versions
Product Line
BeCrypt Cryptographic Library
Aironet
DeltaCrypt FIPS Module
FortiOS v4
LX-4000T/LX-8020S
CryptoStor
Postal Security Devices
AE57C1
PoliWall-CCF
OnKey193
FlagStone Core
Vocera Cryptographic Module
Version
2.0
7.2.115.2
N/A
4.3.17
v5.3.8
2.6
v28.0
v2.1012
v2.02.3101
v122.102
v2.0.5.5
v1.0
X9.31 Removed
3.0
v8.0
4.3.18
v5.3.9
v30.0
v2.0
the weak entropy input is actually strong entropy and the key is
generated programmatically at startup” and additionally that the
fixed RNG key inside the FIPS module is for self-test purposes.
The ViaSat’s FlagStone Core documentation states that the key
was “injected during manufacture”. The documentation does not
specify whether this key is device specific, although it recommends
that “RNG Keys and Seeds that are imported into the FlagStone
Core are generated or established using a FIPS 140-2 approved or a
FIPS 140-2 allowed method.” A device-specific key would require a
targeted attack.
The certification documentation for Neopost devices specifies that
the hardcoded key is entered in the factory and stored in tamper
proof memory. A device-specific hardcoded key stored in tamper-
proof memory would be quite difficult to attack.
3.4 Open source implementations
We also examined the X9.31 implementations in OpenSSL and the
Linux kernel, but did not find evidence of hard-coded keys other
than for testing.
4 DECRYPTING VPN TRAFFIC ON FORTIOS
V4.3
The FIPS certification for FortiOS 4.3 states that the X9.31 key is
“generated external to the module”. We reverse engineered two
versions of FortiOS and found that they used the same hard-coded
key for their X9.31 implementation, which was then used as the
system-wide random number generator.
We demonstrate that knowledge of this key allows an attacker
to passively decrypt IPsec traffic from FortiOS v4. A PRG state
recovery attack is feasible using only the IKE or TLS handshake
nonces, and typically takes less than a second of computation time
on our hardware, after which the attacker is able to guess the
secret keys used to generate encryption keys. We performed an
Internet-wide scan for affected hosts, and were able to carry out
state recovery and private key recovery on handshakes from our
scan data.
4.1 History of FortiOS 4.x
FortiOS is a network operating system created by Fortinet Inc. for
their network security hardware devices and virtual appliances. In
2016, Fortinet was the fourth largest vendor by market share [3].
Fortigate primarily specializes in firewalls, intrusion detection sys-
tems and VPN gateways. FortiOS is used widely across their product
suite.
FortiOS 4.0, released on February 20, 2009, included the X9.31 PRG.
It was also included in the final major FortiOS v4 version, 4.3,
released on March 18, 2011. It was not included in FortiOS 5, released
in November 2012. Prior to our disclosure of the PRG vulnerability
in October 2016, the last release of FortiOS v4 was 4.3.18, released
August 6, 2014, with an end of support date of March 19, 2014 for
devices compatible with FortiOS v5. In response to our disclosure of
the random number generation vulnerability [5], Fortigate released
version 4.3.19 of FortiOS in November 2016.
4.1.1 Vulnerabilities in FortiOS. On January 15, 2016, the MITRE
corporation posted CVE-2016-1909 [4] revealing the presence of a
hardcoded passphrase present in FortiOS 4.1.x and FortiOS 5.x as of
October 2009, and all subsequent releases. This passphrase gave a
remote attacker SSH access to the Fortimanager_Access account for
remote administration. In a blog post in January 2016 [26], Fortinet
stated that “This was not a ‘backdoor’ vulnerability issue but rather
a management authentication issue... After careful analysis and
investigation, we were able to verify this issue was not due to any
malicious activity by any party, internal or external” and that the
vulnerability had been patched in July 2014.
In August of 2016, a group calling themselves “The Shadow Bro-
kers” released a collection of malware tools and documentation pur-
portedly from an actor they termed“The Equation Group”. Among
other things, the leak contained a remote code execution exploit
for FortiOS v3 and v4 titled EGREGIOUSBLUNDER. The exploit
included code to identify FortiOS versions using HTTP response
headers. The collection also included a malware payload for For-
tiOS (codename BLATSTING), containing a module ‘tadaqueous’
that disables random number generation by hooking the function
get_random_bytes, the entry point to FortiOS’s X9.31 implementa-
tion [57]. We did not find any evidence in the Shadow Brokers leak
that The Equation Group was aware of the vulnerability we found
in the PRG.
4.2 Static Analysis
We analyzed two implementations of FortiOS v4, the embedded
operating system for Fortigate’s network devices. The first was a
firmware dump from a FortiGate 100D Firewall, and the second was
a ‘virtual appliance’ (VM) running a different build of the operating
system. The two firmware images were nearly identical, with minor
variations due to the lack of hardware in the virtual appliance, and
minor variations in supported TLS cipher suites. These differences
would not have affected the measurements described in Section 5.
FortiOS is a GNU/Linux variant, with a customized shell that has
kernel modules implementing hardware interfaces and crypto-
graphic functions. The kernel is Linux 2.4.37, the last release of the
2.4.x series released in December 2008, which reached end of life in
December 2011. FortiOS v5 still uses the Linux 2.4.37 kernel.
4.3 The X9.31 Implementation
The X9.31 random number generator is implemented within a ker-
nel module that exports a Linux character device. At boot time, the
init process loads the module and replaces /dev/urandom with a
filesystem node corresponding to the X9.31 character device.
We reverse engineered the kernel module providing the X9.31 imple-
mentation and found the hard-coded AES key used for the PRG. (See
Appendix A for the reverse engineered code.) The same key was
used in both the firmware dump and virtual appliance. Although the
documentation stated that the key was “generated external to the