Definition A.3 (Homomorphic Time-Lock Puzzles). Let C =
{C𝜆}𝜆∈N be a class of circuits and let 𝑆 be a finite domain. A homo-
morphic time-lock puzzle scheme HTLP with respect to C and with
solution space 𝑆 is tuple of four algorithms (PSetup, PGen, Solve,
PEval) defined as follows.
pp ← PSetup(1𝜆, T): a probabilistic algorithm that takes as input a
security parameter 1𝜆 and a time hardness parameter T, and outputs
public parameters pp.
𝑍 ← PGen(pp, 𝑠): a probabilistic algorithm that takes as input public
parameters pp, and a solution 𝑠 ∈ 𝑆, and outputs a puzzle 𝑍.
𝑠 ← Solve(pp, 𝑍): a deterministic algorithm that takes as input public
parameters pp and a puzzle 𝑍 and outputs a solution 𝑠.
𝑍 ′ ← PEval(𝐶, pp, 𝑍1, . . . , 𝑍𝑛): a probabilistic algorithm that takes
as input a circuit 𝐶 ∈ C𝜆, public parameters pp and a set of 𝑛 puzzles
(𝑍1, . . . , 𝑍𝑛) and outputs a puzzle 𝑍 ′.
Security requires that the solution of the puzzles is hidden for all
adversaries that run in (parallel) time less than T. We additionally
require compactness that requires that the size of the homomor-
phically evaluated puzzles does not depend on the function that is
evaluated.
Definition A.4 (Security of HTLP [55]). An HTLP scheme con-
sisting of (PSetup, PGen, Solve, PEval), is secure with gap 𝜀 < 1 if
there exists a polynomial ˜T(·) such that for all polynomials T(·) ≥
˜T(·) and every polynomial-size adversary A = {(A1, A2)𝜆}𝜆∈N
where the depth of A2 is bounded from above by T𝜀(𝜆), there exists
a negligible function negl, such that for all 𝜆 ∈ N it holds that
 ≤ 1
2 + negl(𝜆)
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)
𝑏 = 𝑏′
Pr
and (𝑠0, 𝑠1) ∈ 𝑆2.
pp ← PSetup(1𝜆, T(𝜆))
(𝜏, 𝑠0, 𝑠1) ← A1(1𝜆, pp)
𝑏 ←$ {0, 1}
𝑍 ★ ← PGen(pp, 𝑠𝑏)
𝑏′ ← A2(pp, 𝑍 ★, 𝜏)
Definition A.5 (Compactness [55]). Let C = {C𝜆}𝜆∈N be a
class of circuits (along with their respective representations). An HTLP
scheme (PSetup, PGen, Solve, PEval) is compact (for the class C) if
for all 𝜆 ∈ N, all polynomials T in 𝜆, all circuits 𝐶 ∈ C𝜆 and respective
inputs (𝑠1, . . . , 𝑠𝑛) ∈ 𝑆𝑛, all pp in the support of PSetup(1𝜆, T), and
all 𝑍𝑖 in the support of PGen(pp, 𝑠𝑖), the following two conditions are
satisfied:
• There exists a fixed polynomial 𝑝(·) such that |𝑍| = 𝑝(𝜆, |𝐶(𝑠1,
˜𝑝(·) such that the runtime of
• There exists a fixed polynomial
. . . , 𝑠𝑛)|), where 𝑍 ← PEval(𝐶, pp, 𝑍1, . . . , 𝑍𝑛).
PEval(𝐶, pp, 𝑍1, . . . , 𝑍𝑛) is bounded by ˜𝑝(𝜆, |𝐶|).
Non-Interactive Zero-Knowledge Proofs. A NIZK proof [9] al-
lows a prover to convince a verifier about the validity of a certain
statement without revealing anything beyond that. We recall the
syntax in the following.
Definition A.6 (NIZK). Let L be an NP-language with relation
R. A NIZK system for R consists of the following efficient algorithms.
crs ← Setup(1𝜆): On input the security parameter 1𝜆, the setup al-
gorithm returns a common reference string crs.
𝜋 ← Prv(crs, stmt, wit): On input the common reference string crs,
a statement stmt, and a witness wit, the prover algorithm returns a
proof 𝜋.
0/1 ← Vfy(crs, stmt, 𝜋): On input the common reference string crs,
a statement stmt, and a proof 𝜋, the verifier algorithm returns a bit
𝑏 ∈ {0, 1}.
Correctness requires that for all 𝜆 ∈ N and all pairs (stmt, wit) ∈
R it holds that
Pr[Vfy(crs, stmt, Prv(crs, stmt, wit)) = 1] = 1
where crs ←$ Setup(1𝜆).
We recall the definition of zero-knowledge in the following.
Definition A.7 (Zero-Knowledge). A NIZK system for R is
zero-knowledge if there exists a PPT algorithm (Sim0, Sim1) such
Session 10C: Foundations CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2677(cid:16)
that for all pairs (stmt, wit) ∈ R and for all PPT distinguishers the
following distributions are computationally indistinguishable
crs ← Setup(1𝜆), 𝜋 ← Prv(crs, stmt, wit)(cid:17) ≈
(cid:0)crs∗, 𝜋 ← Sim1(crs, stmt, td)(cid:1)
where (crs∗, td) ← Sim0(1𝜆).
We require that the protocol satisfies the strong notion of simu-
lation soundness [67].
Definition A.8 (Simulation Soundness). A NIZK system for R
is simulation-sound if there exists a negligible function negl(·) such
that for all 𝜆 ∈ N and all PPT algorithms A it holds that
(cid:20) 1 = Vfy(crs, stmt, 𝜋)
∧ stmt ∉ 𝑄 ∧ stmt ∉ L
Pr
(cid:12)(cid:12)(cid:12)(cid:12) (crs, td) ← Sim0(1𝜆)
(𝜋, stmt) ← AO(·)(crs)
(cid:21)
= negl(𝜆)
where O takes as input a (possibly false) statement stmt and returns
Sim1(crs, stmt, td) and we denote by 𝑄 the list of queries issued by
A.
B ASSUMPTIONS
We give the formal definition of a DDH-hard prime order group.
Definition B.1 (DDH-hard prime order group). We say that
a group generation algorithm ˜GGen is DDH hard if there exists a
negligible function negl, such that for all 𝜆 ∈ N, all PPT adversaries
A the following holds:
We can extend the above definition to the case of a class group
where the order of the group is not known. In this case, the values
𝑥, 𝑦, 𝑧 are sampled uniformly at random from a domain exponen-
tially larger than the upper bound on the group order.
Definition B.2 (DDH-hard unknown order group). We say
that a group generation algorithm CGGen is DDH hard if there exists
a negligible function negl, such that for all 𝜆 ∈ N all 𝜆 bit primes 𝑞,
and all PPT adversaries A the following holds:
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)
Pr
𝑏′ = 𝑏
(G, 𝐺, 𝐹, 𝛾, 𝛾𝑞, ˜𝑞) ← CGGen(1𝜆, 𝑞)
𝑥, 𝑦, 𝑧 ← Z∗
˜𝑞
𝑋0 := 𝑋1 = 𝐺𝑥
𝑌0 := 𝑌1 = 𝐺 𝑦
𝑏 ← {0, 1}
𝑍0 := 𝐺𝑥 𝑦 and 𝑍1 := 𝐺𝑧
𝑏′ ← A(G, 𝐺, 𝐹, 𝛾, 𝛾𝑞, ˜𝑞, 𝑋𝑏, 𝑌𝑏, 𝑍𝑏)
We also recall the subgroup membership assumption.
≤ 1
2 + negl(𝜆)
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)
Pr
𝑏′ = 𝑏
( ˜G, ˜𝐺, ˜𝑞) ← ˜GGen(1𝜆)
𝑥, 𝑦, 𝑧 ← Z∗
˜𝑞
˜𝑋0 := ˜𝑋1 = ˜𝐺𝑥
˜𝑌0 := ˜𝑌1 = ˜𝐺 𝑦
𝑏 ← {0, 1}
˜𝑍0 := ˜𝐺𝑥 𝑦 and ˜𝑍1 := ˜𝐺𝑧
𝑏′ ← A( ˜G, ˜𝑞, ˜𝐺, ˜𝑋𝑏, ˜𝑌𝑏, ˜𝑍𝑏)
≤ 1
2 + negl(𝜆)
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)
𝑏′ = 𝑏
Pr
Definition B.3 (Hard Subgroup Membership ([28])). We say
that a group generation algorithm CGGen is HSM𝐶𝐿 hard if there
exists a negligible function negl, such that for all 𝜆 ∈ N, all 𝜆 bit
primes 𝑞, and all PPT adversaries A, the following holds:
(G, 𝐺, 𝐹, 𝛾, 𝛾𝑞, ˜𝑞) ← CGGen(1𝜆, 𝑞)
𝑟0 ← Z𝑞 ˜𝑞 and 𝑟1 ← Z ˜𝑞
𝛿0 := 𝛾𝑟0 and 𝛿1 := 𝛾𝑟1
𝑞
𝑏 ← {0, 1}
𝑏′ ← A(G, 𝐺, 𝐹, 𝛾, 𝛾𝑞, ˜𝑞, 𝛿𝑏, SolveDL)
≤ 1
2 + negl(𝜆)
We recall the strong root assumption for class groups.
Definition B.4 (Strong root assumption [26]). We say that
the strong root assumption holds for the class group generation CGGen
if there exists a negligible function negl, such that for all 𝜆 ∈ N, all
PPT adversaries A the following holds:
 𝐺 = 𝑈 ℓ
ℓ ≠ 1, 2𝑘,∀𝑘
Pr
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(G, 𝐺, 𝐹, 𝛾, 𝛾𝑞, ˜𝑞) ← CGGen(1𝜆, 𝑞)
(𝑈 , ℓ) ← A(G, 𝐺, 𝐹, 𝛾, 𝛾𝑞, ˜𝑞, 𝐻)
𝐻 ← G
≤ negl(𝜆)
We recall the 2𝜆-low order assumption for class groups.
Definition B.5 (𝛾-Low order assumption [26]). We say that
the 𝛾-low order assumption holds for the class group generation
CGGen for a given 𝛾 if there exists a negligible function negl, such
that for all 𝜆 ∈ N, all PPT adversaries A the following holds:
 𝑈 ℓ = 1
𝑈 ≠ 1
1 < ℓ < 𝛾
Pr
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(G, 𝐺, 𝐹, 𝛾, 𝛾𝑞, ˜𝑞) ← CGGen(1𝜆, 𝑞)
(𝑈 , ℓ) ← A(G, 𝐺, 𝐹, 𝛾, 𝛾𝑞, ˜𝑞)
 ≤ negl(𝜆)
C CL FAST VARIANT
We describe here a slightly modifed version of the faster variant
of CL encryption which is sketched in [27], and provide a clean
security proof under the hard subroup membership assumption,
HSM𝐶𝐿, introduced in [28] (cf. Definition B.3).
The main difference with the scheme from [27] is the fact that
instead of choosing 𝜑𝑞(𝛾) as a generator of G we choose 𝐺 as the
𝑞-th power of this element (so G = 𝜑𝑞(𝛾)𝑞) in order for the IND-CPA
proof to go through. Thanks to this slight modification, we are able
to prove the security of this scheme under the HSM𝐶𝐿 assumption
(see Theorem C.1), instead of the “non-standard” assumption stated
in [27]. Remark that 𝑠 is the (unknown) order of 𝐺 and of 𝛾𝑞 =
𝜓𝑞(𝐺), since 𝜓𝑞 is an injective homomorphism.
Theorem C.1. Let CGGen be a HSM𝐶𝐿-hard group generator,
then the above cryptosystem is IND-CPA-secure.
Proof. We describe a sequence of games whose transitions
are then analysed to show that our fast variant of CL is secure
under the HSM𝐶𝐿 assumption. Recall that 𝐺 = 𝜑𝑞(𝛾)𝑞 so that
𝐺 = 𝜑𝑞(𝜓𝑞(𝑅))𝑞 = 𝑅𝑞2 and 𝑞 is prime to 𝑠 and 𝐹 is in the kernel of
𝜑𝑞. The fact that the composition of 𝜑𝑞 and 𝜓𝑞 is the exponentiation
to the 𝑞 is crucial in the proof.
Session 10C: Foundations CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2678set ˜𝑞 = 2𝜆𝐵
that 𝑝𝑞 ≡ −1 (mod 4) and (𝑞/𝑝) = −1
Setup(1𝜆, 𝑞):
• Let 𝜇 be the bit size of 𝑞. Pick 𝑝 a 𝜂(𝜆) − 𝜇 bits prime such
• Δ𝐾 := −𝑝𝑞, Δ𝑞 := 𝑞2Δ𝐾
• Compute 𝐵 an upper bound on the order of 𝐶𝑙(Δ𝐾) and
• Generate a random square 𝑅 ∈ 𝐶𝑙(Δ𝐾)
• Compute 𝛾𝑞 = 𝜓𝑞(𝑅)
• Set 𝐹 := (𝑞2, 𝑞) in 𝐶𝑙(Δ𝑞)
• Set 𝛾 := 𝛾𝑞 · 𝐹 and compute 𝐺 = 𝜑𝑞(𝛾)𝑞