-- with io function    
SELECT  ARRAY[2, 1, 1]::float4[]        '3,1,1'::pase       AS distance;    
SELECT  ARRAY[2, 1, 1]::float4[]        '3,1,1:0'::pase    AS distance;    
SELECT  ARRAY[2, 1, 1]::float4[]        '3,1,1:0:1'::pase  AS distance;   -- 欧式距离  
SELECT  ARRAY[2, 1, 1]::float4[]        '3,1,1:0:0'::pase  AS distance;   -- 内积  
```    
### 测试    
创建测试表  
```  
create table if not exists t_pase_80(  
    id serial PRIMARY KEY,  
    vec float4[]  
);  
```  
创建生成随机float4数组的函数  
```  
create or replace function gen_float4_arr1(int,int) returns float4[] as $$  
  select array_agg(trunc(random()*$1)::float4) from generate_series(1,$2);  
$$ language sql strict volatile;  
```  
创建基于数组生成随机附近数组的函数
```
create or replace function gen_float4_arr(float4[], int) returns float4[] as $$  
  select array_agg( (u + (u*$2/2.0/100) - u*$2/100*random())::float4 ) from unnest($1) u;
$$ language sql strict volatile;  
db1=# select gen_float4_arr(array[1,2,3,4,5,6],30);
                      gen_float4_arr                       
-----------------------------------------------------------
 {1.1196012,2.0348334,2.6535597,4.263746,5.31588,6.832792}
(1 row)
db1=# select gen_float4_arr(array[1,2,3,4,5,6],30);
                       gen_float4_arr                        
-------------------------------------------------------------
 {1.0108379,1.8903302,2.9218354,4.365448,5.0403333,6.785039}
(1 row)
```
写入100万随机80维向量，    
```  
do language plpgsql $$
declare
  v_cent float4[];
begin
  for i in 1..100 loop  -- 100个中心点
    v_cent := gen_float4_arr1(10000,80);   -- 取值范围10000, 80个维度
    insert into t_pase_80 (vec) select gen_float4_arr(v_cent, 20) from generate_series(1,10000);   -- 1万个点围绕一个中心点, 每个维度的值随机加减20% 
  end loop;
end;
$$;
```  
创建ivfflat索引。  
```  
CREATE INDEX idx_t_pase_80_2 ON t_pase_80    
USING    
  pase_ivfflat(vec)    
WITH    
  (clustering_type = 1, distance_type = 0, dimension = 80, clustering_params = "100,1001");    
采样记录数：100万记录乘以100/1000=10万。  中心点：生成1001个中心点  
NOTICE:  vector dimension is huge, parameter (clustering_sample_ratio) should be set to ensure the clustering count lower than 983040  
NOTICE:  parse clustering parameters succeed, clustering_sample_ratio[100], k[1001]  
```  
查询一条真实记录，略微修改几个维度  
```  
select * from t_pase_80 limit 1;  
```  
使用ivfflat索引查询  
```  
SELECT id,   
vec   '1841,9512,8870,4345,3829,9005,738,2568,2564,6642,2455,7807,1666,4880,9195,6239,788,2804,301,6808,8182,1271,9446,1324,7230,7868,3294,9092,4189,6227,2400,6029,5739,1271,375,9568,277,1114,2137,2841,7756,4593,649,9422,9473,9844,5662,262,2650,5964,7071,831,7235,6518,2156,4466,4386,5450,3558,8576,1677,5959,4606,7417,7230,4981,6985,7508,6095,9123,349,3852,3716,998,3275,3190,843,8938,3462,3499:0:0'::pase  as distance    
FROM t_pase_80    
ORDER BY    
vec  '1841,9512,8870,4345,3829,9005,738,2568,2564,6642,2455,7807,1666,4880,9195,6239,788,2804,301,6808,8182,1271,9446,1324,7230,7868,3294,9092,4189,6227,2400,6029,5739,1271,375,9568,277,1114,2137,2841,7756,4593,649,9422,9473,9844,5662,262,2650,5964,7071,831,7235,6518,2156,4466,4386,5450,3558,8576,1677,5959,4606,7417,7230,4981,6985,7508,6095,9123,349,3852,3716,998,3275,3190,843,8938,3462,3499:0:0'::pase  
LIMIT 10;    
   id   |  distance     
--------+-------------  
      1 |         139  
 620286 | 6.78452e+08  
 365838 | 1.62702e+09  
 365885 |   1.667e+09  
 988412 | 1.57742e+09  
  17530 | 1.58652e+09  
 821096 | 1.57582e+09  
 820902 | 1.57803e+09  
 128421 | 1.57324e+09  
 127295 | 1.80574e+09  
(10 rows)  
Time: 4.523 ms  
```  
创建hnsw索引。  
```  
CREATE INDEX idx_t_pase_80_1 ON t_pase_80    
USING    
  pase_hnsw(vec)    
WITH    
  (dim = 80, base_nb_num = 16, ef_build = 40, ef_search = 200, base64_encoded = 0);    
```  
使用hnsw索引查询  
```  
SELECT id,   
vec   '1841,9512,8870,4345,3829,9005,738,2568,2564,6642,2455,7807,1666,4880,9195,6239,788,2804,301,6808,8182,1271,9446,1324,7230,7868,3294,9092,4189,6227,2400,6029,5739,1271,375,9568,277,1114,2137,2841,7756,4593,649,9422,9473,9844,5662,262,2650,5964,7071,831,7235,6518,2156,4466,4386,5450,3558,8576,1677,5959,4606,7417,7230,4981,6985,7508,6095,9123,349,3852,3716,998,3275,3190,843,8938,3462,3499:40:0'::pase  as distance    
FROM t_pase_80    
ORDER BY    
vec  '1841,9512,8870,4345,3829,9005,738,2568,2564,6642,2455,7807,1666,4880,9195,6239,788,2804,301,6808,8182,1271,9446,1324,7230,7868,3294,9092,4189,6227,2400,6029,5739,1271,375,9568,277,1114,2137,2841,7756,4593,649,9422,9473,9844,5662,262,2650,5964,7071,831,7235,6518,2156,4466,4386,5450,3558,8576,1677,5959,4606,7417,7230,4981,6985,7508,6095,9123,349,3852,3716,998,3275,3190,843,8938,3462,3499:40:0'::pase  
LIMIT 10;      
Time: 1.367 ms
```  
### ivfflat索引参数介绍    
```    
CREATE INDEX ${index_name} ON ${TABLE_NAME}    
USING    
pase_ivfflat(vector)    
WITH    
(clustering_type = 0, distance_type = 0, dimension = 256,    
base64_encoded = 1, clustering_params =    
"/data/centroid_path/centroids.v45.20190802");      
```    
说明：    
- 这一步100万数据耗时大概7分钟，其中index_name随意起，不重复即可。    
- clustering_type：0，表示外部聚类，加载外部提供的中心点；1， 内部聚类。    
- distance_type：0，欧式距离；1， 内积；2，余弦。  目前暂时只支持欧式距离，对于归一化的向量，余弦值的序和欧氏距离的序是反序关系。    
    - （目前索引build索引时：仅支持欧式距离。默认认为数据是归一化(向量原点归一)处理的。  查询时（计算distance）支持三种距离算法。 排序只支持欧式距离，因为索引顺序是固定的（因为建索引时认为数据是归一化的））    
- dimension：向量维度。    
- base64_encoded：数据输出输出格式是否采用base64编码。    
- clustering_params：  
    - 1、对于外部聚类，该项配置为中心点文件路径。    
    - 2、对于内部聚类，该项配置为聚类参数，格式为：clustering_sample_ratio,k，     
        - clustering_sample_ratio为库内数据用作聚类的采样比例，范围(0, 1000]内的整数，  
        - k为聚类中心数。     
    - ps: 中心点个数可以理解为桶的个数，向量点根据它离中心点的距离被聚类到对应的桶。    
    - 当使用内部聚类时，clustering_sample_ratio表示从原始表数据的千分之多少来构建k个中心点。然后生成这些中心点的k个桶。     
### hnsw索引参数介绍    
```    
CREATE INDEX ${index_name} ON  ${TABLE_NAME}    
USING    
pase_hnsw(vector)     
WITH    
(dim = 256, base_nb_num = 32, ef_build = 80, ef_search    
= 100, base64_encoded = 1);    
```    
说明：    