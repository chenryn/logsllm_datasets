# 请参见
查看`docker run`的`help`选项:
```
    $ docker container run --help
```
Docker 网站上的文档可以在这里找到:[https://docs . Docker . com/engine/reference/command line/container _ run/](https://docs.docker.com/engine/reference/commandline/container_run/)。
# 列出容器
我们可以列出运行和停止的容器。
# 准备好
确保 Docker 守护程序正在主机上运行，并且可以通过 Docker 客户端进行连接。您还需要一些运行和/或停止的容器。
# 怎么做...
要列出容器，请运行以下命令:
```
    docker container ls [OPTIONS]
```
或者运行以下旧命令:
```
    docker ps [OPTIONS]
```
![](img/bed65afa-64cd-4043-8273-f994e6d31312.png)
# 它是如何工作的...
Docker 守护程序将查看与容器相关联的元数据并列出它们。默认情况下，该命令返回以下内容:
*   容器标识
*   创建它的映像
*   启动容器后运行的命令
*   创建时间的详细信息
*   当前状态
*   从容器露出的端口
*   容器的名称
# 还有更多...
要列出正在运行和已停止的容器，请使用-a 选项，如下所示:
![](img/af651cdd-24af-428c-bf68-42365ed16f14.png)
要返回所有容器的容器标识，请使用如下的`-aq`选项:
![](img/2be2193d-abd8-4f42-90e0-df8e3685f750.png)
要显示上次创建的容器，包括未运行的容器，请运行以下命令:
```
    $ docker container ls -l
```
使用`--filter/-f`选项到`ps`，我们可以列出带有特定标签的容器。详见本章*标签和过滤容器*配方。
# 请参见
查看`docker container ls`的`help`选项:
```
    $ docker container ls --help
```
Docker 网站上的文档可以在这里找到:[https://docs . Docker . com/engine/reference/command line/container _ ls/](https://docs.docker.com/engine/reference/commandline/container_ls/)。
# 查看容器日志
如果容器在`STDOUT` / `STDERR`上发出日志或输出，那么我们无需登录容器就可以获取。
# 准备好
确保 Docker 守护程序正在主机上运行，并且可以通过 Docker 客户端进行连接。您还需要一个运行容器，在`STDOUT`上发出日志/输出。
# 怎么做...
要从容器中获取日志，请运行以下命令:
```
    docker container logs [OPTIONS] CONTAINER
```
或者运行以下旧命令:
```
    docker logs [OPTIONS] CONTAINER
```
让我们举一个前面的例子，我们运行了一个后台容器并查看了日志:
```
    $ docker container run -d  ubuntu \
           /bin/bash -c  \
           "while [ true ]; do date; sleep 1; done"
```
![](img/417b5e08-b824-472b-a23c-81ec1986cb1e.png)
# 它是如何工作的...
Docker 将从`/var/lib/docker/containers//-json.log`开始查看容器的特定日志文件并显示结果。
# 还有更多...
使用`-t`选项，我们可以获得每个日志行的时间戳，使用`-f`我们可以获得类似尾部的行为。
# 请参见
查看`docker container logs`的`help`选项:
```
    $ docker container logs --help
```
Docker 网站上的文档可以在这里找到:[https://docs . Docker . com/engine/reference/command line/container _ logs/](https://docs.docker.com/engine/reference/commandline/container_logs/)。
# 停止容器
我们可以一次停止一个或多个容器。在这个食谱中，我们将首先启动一个容器，然后停止它。
# 准备好
确保 Docker 守护程序正在主机上运行，并且可以通过 Docker 客户端进行连接。您还需要一个或多个运行容器。
# 怎么做...
要停止容器，请运行以下命令:
```
    docker container stop [OPTIONS] CONTAINER [CONTAINER...]
```
或者运行以下旧命令:
```
    docker stop [OPTIONS] CONTAINER [CONTAINER...]
```
如果你已经有正在运行的容器，那么你可以继续并停止它们；否则，我们可以创建一个，然后按如下方式停止它:
```
    $ ID=$(docker run -d -i ubuntu /bin/bash)
    $ docker stop $ID
```
# 它是如何工作的...
这将通过停止容器内运行的进程，将容器从运行状态移动到停止状态。如果需要，停止的容器可以再次启动。
# 还有更多...
要在等待一段时间后停止容器，请使用`--time/-t`选项。
要停止所有正在运行的容器，请运行以下命令:
```
    $ docker stop $(docker ps -q)
```
# 请参见
查看`docker container stop`的`help`选项:
```
    $ docker container stop --help
```
Docker 网站上的文档可以在这里找到:[https://docs . Docker . com/engine/reference/command line/container _ stop/](https://docs.docker.com/engine/reference/commandline/container_stop/)。
# 移除容器
我们可以永久移除容器，但在此之前，我们必须停止容器或使用强制选项。在这个食谱中，我们将创建和删除一个容器。
# 准备好
确保 Docker 守护程序正在主机上运行，并且可以通过 Docker 客户端进行连接。您还需要一些处于停止或运行状态的容器来删除它们。
# 怎么做...
使用以下命令:
```
    $ docker container rm [OPTIONS] CONTAINER [CONTAINER]
```
或者运行以下旧命令:
```
    $ docker rm [OPTIONS] CONTAINER [CONTAINER]
```
让我们首先创建一个容器，然后使用以下命令将其删除:
```
    $ ID=$(docker container create ubuntu /bin/bash)
    $ docker container stop $ID
    $ docker container rm $ID
```
![](img/dba08a7b-40f7-4c2a-bbe2-14a1a5c5d64c.png)
从前面的截图中我们可以看到，容器并没有出现，只是被停止后进入了`docker container ls`命令。为了列出它，我们必须提供`-a`选项。
# 还有更多...
要移除正在运行的容器，必须先使用`docker container stop`命令停止容器，然后使用`docker container rm`命令移除容器。
使用`docker container rm`命令的`-f`选项，强制移除没有中间停止的容器。
要移除所有容器，我们首先需要停止所有正在运行的容器，然后移除它们。运行这些命令之前要小心，因为它们会删除正在运行和已停止的容器:
```
    $ docker container stop $(docker container ls -q)
    $ docker container rm $(docker container ls -aq)
```
有一些选项可以删除与容器相关联的指定链接和卷，我们将在后面探讨。
# 它是如何工作的...
Docker 守护程序将删除在启动容器时创建的读/写层。
# 请参见
查看`docker container rm`的`help`选项:
```
    $ docker container rm --help
```
Docker 网站上的文档可以在这里找到:[https://docs . Docker . com/engine/reference/command line/container _ RM/](https://docs.docker.com/engine/reference/commandline/container_rm/)。
# 移除所有停止的容器
我们可以用一个命令删除所有停止的容器。在这个食谱中，我们将创建一堆处于停止状态的容器，然后删除它们。
# 准备好
确保 Docker 守护程序 1.13(及以上版本)在主机上运行，并且可以通过 Docker 客户端进行连接。您还需要一些处于停止或运行状态的容器来删除它们。
# 怎么做...
使用以下命令:
```
    $ docker container prune [OPTIONS]
```
让我们首先创建一个容器，然后使用以下命令将其删除:
```
    $ docker container create --name c1 ubuntu /bin/bash
    $ docker container run --name c2 ubuntu /bin/bash
    $ docker container prune
```
![](img/f363af7e-94da-421d-b8f0-958b007b491c.png)
# 还有更多...
默认情况下，`docker container prune`命令确认提示用户确认，然后移除未处于运行状态的容器。
您可以使用`docker container prune`命令的`-f`或`--force`选项来避免上述确认。
# 它是如何工作的...
Docker 守护程序将遍历没有运行的容器，并将它们移除。
# 请参见
查看`docker container prune`的`help`选项:
```
    $ docker container prune --help
```
Docker 网站上的文档可以在这里找到:[https://docs . Docker . com/engine/reference/command line/container _ prune/](https://docs.docker.com/engine/reference/commandline/container_prune/)。
# 在容器上设置重启策略
在 Docker 1.2 之前，当容器因任何原因退出或 Docker 主机重新启动时，必须使用`restart`命令手动重新启动容器。随着 Docker 1.2 的发布，基于策略的重启功能被添加到 Docker 引擎中，以自动重启容器。该功能使用`run`命令的`--restart`选项激活，它支持在 Docker 主机启动时以及当容器出现故障时重新启动容器。
# 准备好
确保 Docker 守护程序正在主机上运行，并且可以通过 Docker 客户端进行连接。
# 怎么做...
您可以使用以下语法设置重启策略:
```
    $ docker container run --restart=POLICY [OPTIONS] IMAGE[:TAG]  [COMMAND] [ARG...] 
```
下面是使用上述命令的示例:
```
    $ docker container run --restart=always -d -i -t ubuntu /bin/bash
```
有三种重启策略可供选择:
*   `no`:如果容器死亡，这不会启动容器