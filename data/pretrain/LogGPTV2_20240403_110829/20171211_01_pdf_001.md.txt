# PL/pgSQL vs. PL/SQL: A Comparative Analysis

## Presenter
**Pavel StÄ›hule**
- **Roles**: Developer, Designer, Consultant, Teacher, Instructor
- **Experience**: PL/pgSQL developer since 2005 (PostgreSQL 8.1)
- **Contributions**:
  - Variadic and default parameters
  - `RETURN QUERY`, `CONTINUE`, `FOREACH SLICE`, `GET STACKED DIAGNOSTICS`, `ASSERT`
  - `USAGE` clause in `EXECUTE`
  - Enhanced `RAISE` statement
  - Tools: `plpgsql_check`, `Orafce` functions (`greatest`, `least`, `format`, `string_agg`, `left`, `right`)
  - Commands: `\sf`, `\ef`, `\gset`

## Example Function in PL/pgSQL

```sql
CREATE OR REPLACE FUNCTION new_customer(name text, surname text) RETURNS int AS $$
DECLARE 
    uid int;
BEGIN
    IF NOT EXISTS (SELECT * FROM customers c WHERE c.name = name AND c.surname = surname) THEN
        INSERT INTO customers(name, surname) VALUES(name, surname) RETURNING id INTO uid;
        RETURN uid;
    ELSE
        RAISE EXCEPTION 'Customer already exists';
    END IF;
END;
$$ LANGUAGE plpgsql STRICT;
```

## PL/pgSQL Overview

### Language Characteristics
- **Basis**: Ada (PL/SQL) based language
- **Family**: Algol-like (Pascal, Modula, Ada, Visual Basic) - verbose languages
- **Reductions**: No I/O, packages, or procedures
- **Enhancements**: SQL is part of the language
- **Benefits**:
  - Reduces network overhead
  - Aids in application decomposition
  - Enhances security

### Comparison with PL/SQL
- **Similarities**:
  - Some exact matches (e.g., `FOR i IN 1 .. 10 LOOP`)
  - Some partial matches (e.g., `FOR r IN SELECT * FROM ...`)
- **Differences**:
  - Zero match (e.g., `dbms_output.put_line(...)`, `RAISE NOTICE '...'`)
  - Opposite defaults (e.g., `SECURITY INVOKER` in PostgreSQL, `SECURITY DEFINER` in Oracle)

### Implementation
- **Original**: Primitive PL/SQL clone
- **Current**:
  - Bison parser, AST interpreter, smart integration with SQL parser/analyzer, in-process execution

### Best Practices
- **Editing**: Use a preferred editor, deploy files, and use version control (e.g., git)
- **Automation**: Use `make` and `Makefile` for automation
- **Testing**: Regress tests are crucial

### Validation and Execution
- **PostgreSQL**:
  - **Function Storage**: `pg_proc` table, `prosrc` column
  - **Compilation**: Parsing to AST, interpretation in session memory
- **Oracle**:
  - **Function Storage**: System catalog
  - **Compilation**: Multiple stages (binary code, DIANA M-CODE)
  - **Execution**: Shared memory, virtual machine

### Design Principles
- **Simplicity**: No compile-time dependencies, native stored procedures supported
- **Integration**: Strong integration with SQL engine
- **Performance**: Efficient evaluation using optimized C code

### New Features and Challenges
- **Implemented Features**:
  - `CASE`, rich exception handling, variadic and default parameters
  - Detection of ambiguous identifiers, enhanced `GET DIAGNOSTICS`, `ASSERT`
- **Future Plans**:
  - Global temp tables, autonomous transactions, static local variables
  - Better dynamic type handling, basic scheduler, and workflow system

### Recommendations
- **Do**:
  - Use PL for data manipulation
  - Write procedures, not methods
  - Separate client, communication server, and database layers
- **Don't**:
  - Migrate poorly designed code
  - Implement interactivity or multilingual support in procedures
  - Use the database as a communication server

### Tools
- **plpgsql_check**:
  - **Modes**:
    - Passive: `LOAD 'plpgsql_check'` (disabled by default)
    - Active: `plpgsql_check_function()`
  - **Example**:
    ```sql
    SELECT * FROM plpgsql_check_function('f1()', fatal_errors := false);
    ```

### Example Output
- **Error Reporting**:
  - Column "c" does not exist in relation "t1"
  - Missing FROM-clause entry for table "r"
  - Too few parameters specified for `RAISE`

- **AST Dump**:
  - Function's data area and statements
  - Execution tree of the function

This document provides a comprehensive overview of PL/pgSQL, its features, and how it compares to PL/SQL, along with best practices and future directions.