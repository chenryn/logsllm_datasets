---
author: Girish Managoli
category: 软件开发
comments_data: []
count:
  commentnum: 0
  favtimes: 0
  likes: 0
  sharetimes: 0
  viewnum: 4589
date: '2021-07-21 11:56:00'
editorchoice: false
excerpt: 进一步学习自然语言处理的基本概念
fromurl: https://opensource.com/article/20/8/nlp-python-nltk
id: 13602
islctt: true
largepic: /data/attachment/album/202107/21/115633k8l9nkqowqkowpwm.jpg
permalink: /article-13602-1.html
pic: /data/attachment/album/202107/21/115633k8l9nkqowqkowpwm.jpg.thumb.jpg
related: []
reviewer: wxy
selector: lujun9972
summary: 进一步学习自然语言处理的基本概念
tags:
- NLP
- 自然语言处理
thumb: false
title: 进阶教程：用 Python 和 NLTK 进行 NLP 分析
titlepic: true
translator: tanloong
updated: '2021-07-21 11:56:00'
---
> 
> 进一步学习自然语言处理的基本概念
> 
> 
> 
![](/data/attachment/album/202107/21/115633k8l9nkqowqkowpwm.jpg "Brain on a computer screen")
在 [之前的文章](https://opensource.com/article/20/8/intro-python-nltk) 里，我介绍了 自然语言处理   natural language processing （NLP）和宾夕法尼亚大学研发的 自然语言处理工具包   Natural Language Toolkit  ([NLTK](http://www.nltk.org/))。我演示了用 Python 解析文本和定义 停顿词   stopword 的方法，并介绍了 语料库   corpus 的概念。语料库是由文本构成的数据集，通过提供现成的文本数据来辅助文本处理。在这篇文章里，我将继续用各种语料库对文本进行对比和分析。
这篇文章主要包括以下部分：
*  词网   WordNet 和 同义词集   synset 
*  相似度比较   Similarity comparison 
*  树   Tree 和 树库   treebank 
*  命名实体识别   Named entity recognition 
### 词网和同义词集
   词网    WordNet  是 NLTK 里的一个大型词汇数据库语料库。词网包含各单词的诸多 认知同义词   cognitive synonyms （认知同义词常被称作“ 同义词集   synset ”）。在词网里，名词、动词、形容词和副词，各自被组织成一个同义词的网络。
词网是一个很有用的文本分析工具。它有面向多种语言的版本（汉语、英语、日语、俄语和西班牙语等），也使用多种许可证（从开源许可证到商业许可证都有）。初代版本的词网由普林斯顿大学研发，面向英语，使用 类 MIT 许可证   MIT-like license 。
因为一个词可能有多个意义或多个词性，所以可能与多个同义词集相关联。每个同义词集通常提供下列属性：
| **属性** | **定义** | **例子** |
| --- | --- | --- |
|  名称   Name  | 此同义词集的名称 | 单词 `code` 有 5 个同义词集，名称分别是 `code.n.01`、 `code.n.02`、 `code.n.03`、`code.v.01` 和 `code.v.02` |
|  词性   POS  | 此同义词集的词性 | 单词 `code` 有 3 个名词词性的同义词集和 2 个动词词性的同义词集 |
|  定义   Definition  | 该词作对应词性时的定义 | 动词 `code` 的一个定义是：（计算机科学）数据或计算机程序指令的 象征性排列   symbolic arrangement  |
|  例子   Example  | 使用该词的例子 | `code` 一词的例子：We should encode the message for security reasons |
|  词元   Lemma  | 与该词相关联的其他同义词集（包括那些不一定严格地是该词的同义词，但可以大体看作同义词的）；词元直接与其他词元相关联，而不是直接与 单词   word 相关联 | `code.v.02` 的词元是 `code.v.02.encipher`、`code.v.02.cipher`、`code.v.02.cypher`、`code.v.02.encrypt`、`code.v.02.inscribe` 和 `code.v.02.write_in_code` |
|  反义词   Antonym  | 意思相反的词 | 词元 `encode.v.01.encode` 的反义词是 `decode.v.01.decode` |
|  上义词   Hypernym  | 该词所属的一个范畴更大的词 | `code.v.01` 的一个上义词是 `tag.v.01` |
|  分项词   Meronym  | 属于该词组成部分的词 | `computer` 的一个分项词是 `chip` |
|  总项词   Holonym  | 该词作为组成部分所属的词 | `window` 的一个总项词是 `computer screen` |
同义词集还有一些其他属性，在 `/Lib/site-packages` 下的 `nltk/corpus/reader/wordnet.py`，你可以找到它们。
下面的代码或许可以帮助理解。
这个函数：
```
from nltk.corpus import wordnet
def synset_info(synset):
    print("Name", synset.name())
    print("POS:", synset.pos())
    print("Definition:", synset.definition())
    print("Examples:", synset.examples())
    print("Lemmas:", synset.lemmas())
    print("Antonyms:", [lemma.antonyms() for lemma in synset.lemmas() if len(lemma.antonyms()) > 0])
    print("Hypernyms:", synset.hypernyms())
    print("Instance Hypernyms:", synset.instance_hypernyms())
    print("Part Holonyms:", synset.part_holonyms())
    print("Part Meronyms:", synset.part_meronyms())
    print()
synsets = wordnet.synsets('code')
print(len(synsets), "synsets:")
for synset in synsets:
    synset_info(synset)
```
将会显示：
```
5 synsets:
Name code.n.01
POS: n
Definition: a set of rules or principles or laws (especially written ones)
Examples: []
Lemmas: [Lemma('code.n.01.code'), Lemma('code.n.01.codification')]
Antonyms: []
Hypernyms: [Synset('written_communication.n.01')]
Instance Hpernyms: []
Part Holonyms: []
Part Meronyms: []
...
Name code.n.03
POS: n
Definition: (computer science) the symbolic arrangement of data or instructions in a computer program or the set of such instructions
Examples: []
Lemmas: [Lemma('code.n.03.code'), Lemma('code.n.03.computer_code')]
Antonyms: []
Hypernyms: [Synset('coding_system.n.01')]
Instance Hpernyms: []
Part Holonyms: []
Part Meronyms: []
...
Name code.v.02
POS: v
Definition: convert ordinary language into code
Examples: ['We should encode the message for security reasons']
Lemmas: [Lemma('code.v.02.code'), Lemma('code.v.02.encipher'), Lemma('code.v.02.cipher'), Lemma('code.v.02.cypher'), Lemma('code.v.02.encrypt'), Lemma('code.v.02.inscribe'), Lemma('code.v.02.write_in_code')]
Antonyms: []
Hypernyms: [Synset('encode.v.01')]
Instance Hpernyms: []
Part Holonyms: []
Part Meronyms: []
```
 同义词集   synset 和 词元   lemma 在词网里是按照树状结构组织起来的，下面的代码会给出直观的展现：
```
def hypernyms(synset):
    return synset.hypernyms()
synsets = wordnet.synsets('soccer')
for synset in synsets:
    print(synset.name() + " tree:")
    pprint(synset.tree(rel=hypernyms))
    print()
```
```
code.n.01 tree:
[Synset('code.n.01'),
 [Synset('written_communication.n.01'),
   ...
code.n.02 tree:
[Synset('code.n.02'),
 [Synset('coding_system.n.01'),
   ...
code.n.03 tree:
[Synset('code.n.03'),
   ...
code.v.01 tree:
[Synset('code.v.01'),
 [Synset('tag.v.01'),
   ...
code.v.02 tree:
[Synset('code.v.02'),
 [Synset('encode.v.01'),
   ...
```
词网并没有涵盖所有的单词和其信息（现今英语有约 17,0000 个单词，最新版的 词网 涵盖了约 15,5000 个），但它开了个好头。掌握了“词网”的各个概念后，如果你觉得它词汇少，不能满足你的需要，可以转而使用其他工具。或者，你也可以打造自己的“词网”！
#### 自主尝试
使用 Python 库，下载维基百科的 “[open source](https://en.wikipedia.org/wiki/Open_source)” 页面，并列出该页面所有单词的 同义词集   synset 和 词元   lemma 。
### 相似度比较
相似度比较的目的是识别出两篇文本的相似度，在搜索引擎、聊天机器人等方面有很多应用。
比如，相似度比较可以识别 `football` 和 `soccer` 是否有相似性。
```
syn1 = wordnet.synsets('football')
syn2 = wordnet.synsets('soccer')
# 一个单词可能有多个 同义词集，需要把 word1 的每个同义词集和 word2 的每个同义词集分别比较
for s1 in syn1:
    for s2 in syn2:
        print("Path similarity of: ")
        print(s1, '(', s1.pos(), ')', '[', s1.definition(), ']')
        print(s2, '(', s2.pos(), ')', '[', s2.definition(), ']')
        print("   is", s1.path_similarity(s2))
        print()
```
```
Path similarity of:
Synset('football.n.01') ( n ) [ any of various games played with a ball (round or oval) in which two teams try to kick or carry or propel the ball into each other's goal ]
Synset('soccer.n.01') ( n ) [ a football game in which two teams of 11 players try to kick or head a ball into the opponents' goal ]
   is 0.5
Path similarity of:
Synset('football.n.02') ( n ) [ the inflated oblong ball used in playing American football ]
Synset('soccer.n.01') ( n ) [ a football game in which two teams of 11 players try to kick or head a ball into the opponents' goal ]
   is 0.05
```
两个词各个同义词集之间 路径相似度   path similarity 最大的是 0.5，表明它们关联性很大（[ 路径相似度   path similarity ](https://www.nltk.org/howto/wordnet.html)指两个词的意义在 上下义关系的词汇分类结构   hypernym/hypnoym taxonomy 中的最短距离）。
那么 `code` 和 `bug` 呢？这两个计算机领域的词的相似度是：
```
Path similarity of:
Synset('code.n.01') ( n ) [ a set of rules or principles or laws (especially written ones) ]
Synset('bug.n.02') ( n ) [ a fault or defect in a computer program, system, or machine ]
   is 0.1111111111111111
...
Path similarity of:
Synset('code.n.02') ( n ) [ a coding system used for transmitting messages requiring brevity or secrecy ]
Synset('bug.n.02') ( n ) [ a fault or defect in a computer program, system, or machine ]
   is 0.09090909090909091
...
Path similarity of:
Synset('code.n.03') ( n ) [ (computer science) the symbolic arrangement of data or instructions in a computer program or the set of such instructions ]
Synset('bug.n.02') ( n ) [ a fault or defect in a computer program, system, or machine ]
   is 0.09090909090909091
```
这些是这两个词各同义词集之间 路径相似度   path similarity 的最大值，这些值表明两个词是有关联性的。
NLTK 提供多种 相似度计分器   similarity scorers ，比如：
* path\_similarity
* lch\_similarity
* wup\_similarity
* res\_similarity
* jcn\_similarity
* lin\_similarity
要进一步了解这些 相似度计分器   similarity scorers ，请查看 [WordNet Interface](https://www.nltk.org/howto/wordnet.html) 的 Similarity 部分。
#### 自主尝试
使用 Python 库，从维基百科的 [Category: Lists of computer terms](https://en.wikipedia.org/wiki/Category:Lists_of_computer_terms) 生成一个术语列表，然后计算各术语之间的相似度。
### 树和树库
使用 NLTK，你可以把文本表示成树状结构以便进行分析。
这里有一个例子：
这是一份简短的文本，对其做预处理和词性标注：
```
import nltk
text = "I love open source"
# Tokenize to words
words = nltk.tokenize.word_tokenize(text)
# POS tag the words
words_tagged = nltk.pos_tag(words)
```