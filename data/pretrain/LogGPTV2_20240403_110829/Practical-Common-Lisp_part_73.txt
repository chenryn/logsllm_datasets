当的关键字名从一个行中解出的值上。这样，你可以将下面的写法：
值。因此你可以提供一点儿语法糖，即宏with-column-values，它将一组变量绑定到通过适
的内部表示，那么column-value的用户可以不必受到影响。
并返回对应的值。再一次，这只是对你本该自行编写的代码的简单封装。但如果你以后改变了表
可以构造出一个列表，含有将一个函数应用在表的每一行时所得到的结果。
可以提供两种方式在一个表的行上迭代：宏do-rows用来提供基本的循环构造，函数map-rows
① 在Common Lisp被标准化以前，MIT.实现的LoOP版本含有一种机制来扩展LoOP语法以支持在新数据结构上的选
(defun table-size (table)
最后，你应当提供--种抽象方法来获取--个表中所有行的个数，并通过数值索引来访问指
(defun column-bindings (vars row)
再一次，如果你使用第8章的once-only宏，实际的实现并不复杂。
(do-rows (row table)
(do-rows (row table)
尽管column-value对于获取列的值来说已经足矣，但你会经常想要一次性得到多个列的
(defun column-value (row column-name)
(defun map-rows (fn table)
(defmacro do-rows ((row table) &body body)
map-rows变得不再是必需的了。
代。一些从该代码树上继承了LoOP实现的Common Lisp实现可能仍然支持这--功能，从而使do-rows和
(intern (symbol-name symbol) :keyword))
(defun as-keyword (symbol)
(length (rows table)))
(loop for v in vars collect 
(with-column-values (song artist album) row
(getf row column-name))
(loop for row across (rows table) collect (funcall fn row)))
(let ((song (column-value row :song))
(loop for ,row across (rows ,table) do ,@body))
(formatt
(let ,(column-bindings vars row) ,@body)))
(album (column-value row :album)))
(artist (column-value row :artist))
^(,v (column-value ,row ,(as-keyword v)))))
www.TopSage.com
song artist album)))
 song artist album)))
27.6获取结果
345
---
## Page 363
讨论过的Donald Knuth的《计算机程序设计艺术，卷2：半数值算法（第3版)》中的算法S。
它也用到了nshuffle-vector，另外还有一个版本的random-sample，后者基于我在第20章里
 23章的nshuffle-vector。
用。首先是一个在表中直接排序所有行的函数。
传递的表。
和:where关键字参数。和select不同的是，它并不返回新表一
27.7
346
(defun random-selection (table n)
最后，再一次为了MP3浏览器，你应当编写一个函数来选择n个随机行，然后作为新表返回。
(defun shuffle-table (table)
另一方面，在MP3浏览器应用中，你需要一个直接在表中打乱所有的行的函数，它用到了第
其余的表操作并没有映射到正常的关系型数据库操作中，但它在MP3浏览器应用中非常有
(defun delete-all-rows (table)
出于对效率的兴趣，你可能想要编写一个单独的函数来从表中删除所有的行。
(defun delete-rows (&key from where)
最后，我们来实现其他一些将在第29章里用到的数据库操作。前两个类似于SQL DELETE语
(defun sort-rows (table &rest column-names)
(defun nth-row (n table)
table)
(nshuffle-vector (rows table))
table)
(setf (rows table) (make-rows *default-table-size*)))
(make-instance
floop
(aref (rows table) n))
:rows (nshuffle-vector 
:schema (schema table)
'table
其他数据库操作
finally
unless (funcall where row) do
with rows = (rows from)
第27章实践：MP3数据库
(setf
or read-idx from 0
(incf
row across rows
(aref rows store-idx) row
(setf
(fill-pointer rows) store-idx)))
rows
 read-idx} nil
www.TopSage.com
(random-sample (rows table) n)/))
一它实际修改了作为：from参数
---
## Page 364
之前，你还需要实现服务器中使用Shoutcast协议流式播放MP3的部分，这正是下一章的主题。
有了这些代码，你就可以在第29章里构建一个用于浏览MP3文件集合的Web接口了。但在此
(defun random-sample (vector n)
when (= (length selected) n) return selected))
do
for idx f
(vector-push (aref vector idx)selected)
(loop
do (incf idx))
while (>= (* remaining (random 1.0)) to-select)
with to-select =
from0
www.TopSage.com
TAOCP,
idx)
27.7
其他数据库操作 
347
---
## Page 365
中，但Nullsoft的人们还是决定走他们自己的路线，从头发明了一种在服务器和客户端都相当容
格式本身并不提供对编码元数据的支持。）尽管ID3v2的一个设计目标是使其更适合用在流式MP3
一首新歌时与客户端沟通新的标题信息，这样客户端就可以将其显示在UI里。（第25章讲过MP3
的数据中。Shoutcast设计者面临的问题是要提供一种方式让Shoutcast服务器可以在每次开始播放
流式发送无穷尽的MP3数据。
现在正常HTTP版本字符串的位置上并带有不同的头。在发送了头和一个空行之后，服务器开始
分，
务器文件系统中的歌曲。
Shoutcast服务器一样的协议来传送流式MP3给听众，但你的服务器将只能提供那些已经保存在服
服务器上，继而把它以流的形式发送到任何连网听众那里。
支持Internet音频广播——ShoutcastDJ从他们的个人电脑上将音频数据发送到一个中央Shoutcast
28.1
关于Shoutcast协议唯一的难点是，正在流式发送的歌曲的元数据如何被嵌人到发送给客户端
，Shoutcast服务器发送了ICY回执，它看起来就像是一个HTTP回执，只是字符串“ICY”°出
①RedHat8.0和9.0以及Fedora中附带的XMMS版本已不能如何播放MP3了，这是因为RedHat的人对MP3相关的解码
其中包括将当前正在播放歌曲的元数据嵌入到流中的机制。
你只需关注Shoutcast协议的两部分：客户端开始接收一个流时所产生的请求，以及回执的格
你即将构建的服务器实际上只能算半个真正的Shoutcast服务器，尽管你可以使用通常的
②
从MP3客户端到Shoutcast服务器的初始请求被格式化成了一个正常的HTTP请求。在回应部
Shoutcast协议是由Nullsoft的人发明的，他们也是WinampMP3软件的开发者。它被设计用来
明显的关联。
代码并自行编译它。或者，对于其他可能性可以参见http://www.fedorafaq.org/#xmms-mp3上的信息。
更让人困惑的是，还存在另一个称为Icecast的流协议。看起来在Shoutcast和Icecast协议所使用的ICY头之间不存在
器存在版权忧虑。为了在这些版本的Linux上得到带有MP3支持的XMMS，你需要从http://www.xmms.org上获取源
Shoutcast协议
第28章
www.TopSage.com
op
age.com
---
## Page 366
曲源。然后它可以对歌曲源做三件事：
Web应用接口。
来获得播放的歌曲。现在你可以编写一个该接口的简单实现，然后在第29章里构建一个更复杂的
Web接口管理的播放列表。但考虑到为了避免过度耦合，应当定义一个接口让Shoutcast服务器用
提供一个进行操作的歌曲来源。在基于Web的应用中，每个连接的客户端都将拥有一个可以通过
28.2
的MP3数据。
据，那么它可以发送这样的一个空片段，但它必须至少发送一个字节才能让客户端不会丢掉实际
中最后一个块使用必要的空字节作为补白。
接下来有多少个16字节的块，然后再发送这些块。它们含有作为ASCII字符串的字符串载荷，其
歌曲的标题并且不能带有单引号。这一载荷采用定长的字节数组来编码：先发送一个单字节指示
值为在每个相邻的元数据片段之间发送的MP3数据的字节数。
发送元数据。并且为了让客户端知道元数据的发送频率，服务器必须发回一个Icy-Metainit头，其
元数据将导致杂音的出现，服务器仅在客户端的原始请求中包含一个特殊的Icy-Metadata头时才
客户端有义务分离出这些元数据，使其不被视为MP3数据。由于发送到不支持该格式的客户端的
易实现的新格式。这对他们来说也是理想的，因为他们也是自己的MP3客户端的开发者。
该接口背后的思想是，Shoutcast服务器将根据从AllegroServe请求对象中解出的ID来查找歌
这样，最小的合法元数据片段是单个字节零，代表没有后续块。如果服务器不需要更新元数
由于Shoutcast服务器必须在客户端连接上的情况下始终保持流式发送歌曲，你需要为服务器
口获得歌曲源中的当前歌曲
你将在本章里用于开发代码的包如下所示：
(:use:common-1isp
歌曲源
export
:com.gigamonkeys.id3v2)
*song-source-type*）)
net.ase
:maybe-move-
id3-size
:title
buos:
www.TopSage.com
28.2歌曲源
349
---
## Page 367
个实例的全局变量*songs*。
个可从REPL管理的歌曲对象的简单队列。一开始先定义类simple-song-queue和保存该类的一
需的任何信息取出用来检测应返回哪个源。
一个歌曲源。其方法将特化在type参数上以便返回不同类型的歌曲源，并且从请求对象中将所
数）返回的值将是一个song的实例。
ID3标签的大小。
保存MP3文件的名字，在Shoutcast元数据中发送的标题，以及使你在发送文件时跳过标签部分的
个不同线程来管理的歌曲源时，这种设计会很重要。
前歌曲，如果是的话，它就将歌曲源移向下一首歌曲。下一章里当需要实现一个可以安全地从两
之外管理歌曲源。可以用下列广义函数来表达Shoutcast服务器所需的操作：
为了表示Shoutcast服务器所需要的关于一首歌曲的信息，你可以定义一个类song。其槽用来
350
① 从技术上来讲，本章的实现也可以从两个线程来管理，即运行着Shoutcast服务器的AllegroServe线程和REPL线程。
不过，对于本章的目标，可以使用该接口的一个简单实现，让其总是使用相同的对象，即一
此外，你需要定义一个广义函数，以使服务器可以基于想要的歌曲源类型和请求对象来查找
(defclass simple-song-queue ()
由current-song（也就是still-current-p和maybe-move-to-next-song的第一个参
(defclass song ()
函数maybe-move-to-next-song如此定义可以允许用单一操作来检查一首歌曲是否为当
returned by current-song."))
(defgeneric current-song (source)
最后一个操作是必要的，因为可能存在某种方式（第29章里就会这样做）在Shoutcast服务器
(defgeneric still-current-p (song source)
(defgeneric maybe-move-to-next-song (song source)
口询问歌曲源之前给出的某个歌曲是否仍是当前歌曲
告诉歌曲源当前歌曲结束
但目前你可以接受竞争状况。我将在下一章里讨论如何用锁来确保代码是线程安全的。
(:documentation "Find the song-source of the given type for the given request."))
(:documentation
(:documentation 
(:documentation "Return the currently playing song or NIL."))
Isongs
(id3-size :reader id3-size :initarg :id3-size)))
(title
"Return true if the song given is the same as the current-song."))
"If the given song is still the current one update the value
(index