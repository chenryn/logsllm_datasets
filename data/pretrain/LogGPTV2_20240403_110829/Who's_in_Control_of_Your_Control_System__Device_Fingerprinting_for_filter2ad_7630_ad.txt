¨θ = I−1(Fpl cos θ + Fcl cos θ + kθ)
(9)
where I is the moment of inertia of the armature about
the hinge point. Physical measurements of the device can
be used to provide values for r, R, l, L, k, and I. Five other
parameters must be identiﬁed to simulate the time response of
the latch relay mechanism, namely cp, cc, β, γ, and τ. These
parameters may be estimated based on material composition
of the magnets.
(a) Distribution of open and close Op-
eration times based on SER responses
for Vendor 1
(b) Distribution of open and close Op-
eration times based on SER responses
for Vendor 2
Fig. 19. Difference between open and close
again showed clear distinctions and similar conclusions can be
drawn as to the underlying causes. Therefore, even though
the Open operation does not help distinguish between two
vendors in this case, the results suggest that in the general
case operations are distinguishable from one another and could
potentially be used in other scenarios.
V. SYNTHETIC FINGERPRINT GENERATION
While the results obtained in the previous section for
both ﬁngerprinting techniques (cross-layer ﬁngerprinting and
physical ﬁngerprinting) are promising, the ﬁngerprints were
generated using black box methods that assume some access
to the target devices. The ﬁrst proposed technique based on
monitoring of data packets requires a black box modeling
approach as neither the internal circuitry nor the device source
code is usually available (and thus there is no basis for
constructing a white box model). Alternatively, physical ﬁn-
gerprinting technique may leverage a white box, black box, or
gray box modeling approach since the mechanical composition
of a device can usually be obtained from manual inspection,
available drawings/pictures, or manufacturer’s speciﬁcations.
The ability to construct white box model ﬁngerprints for
physical ﬁngerprinting is crucial due to the rare operation of
some devices, and the prohibitive cost of performing black
box modeling on all of the available devices on the market.
To illustrate this technique, this section describes construction
of the same ﬁngerprint for the latch relay mechanism discussed
in Section IV-B2 using white box modeling only and then
validates it against the black box model results obtained for
the device in Section IV-B3. However, a gray box modeling
approach could be pursued as a general methodology for
physical signature generation.
Modeling and Fingerprinting of a Latch Relay. To
demonstrate the physical ﬁngerprinting process, we consider
a standard latch relay such as the Potter and Brumﬁeld KUL
Series relay shown in Figure 20 (Vendor 1 from the previous
section). This latch relay operates using the principle of re-
manent magnetization in which a coil magnetizes a permanent
magnet in either direction during opening and closing opera-
tions. To construct a dynamic model for the device, the latch
relay was disassembled and its basic components modeled
as shown in Figure 20. A magnetic armature of length L is
connected to the base assembly by a torsional spring of spring
constant k. The torsional spring is preloaded so that it applies
a torque which pushes the armature to the open position by
10
(a) Armature displacement vs time
(b) Armature angular velocity vs time
Fig. 21. Armature displacement and angular velocity
(a) Simulated response times
(b) Experimental
(from Section IV-B3)
response
times
Fig. 22.
Potter and Brumﬁeld KUL series latch relay
Comparison of simulated and experimental distributions for the
Figure 21 shows armature displacement and angular veloc-
ity time histories for an example opening and closing sequence,
where displacement is measured at the contacts. Experimental
data showed that the average opening time is longer than the
average closing time which is reﬂected in simulation model
outputs. Note that the simulation predicts that the opening and
closing operations will take approximately 28 ms and 24 ms
respectively under nominal conditions.
To generate a physical ﬁngerprint (PDF), a Monte Carlo
simulation was performed randomly perturbing the nominal
values of the τ parameter using a Gaussian distribution. This
data was compared with experimental results obtained using
the setup described in Section IV-B2. Figure 22 shows a
histogram of the response times for approximately 1200 runs,
with simulated and experimental data shown on the left and
right respectively. The similarity in these distributions demon-
strates that
the mechanical response characteristics can be
adequately captured with this parameterized dynamic model.
We extend this notion of white box modeling to a much larger
and realistic power system device in Appendix B.
To test how well this white box modeled “synthetic sig-
nature” could be used in ﬁngerprinting, the same machine
learning techniques were applied as before, but trained from
the simulated distribution for one device and experimental
measurements from the other device. The FF-ANN was trained
using the same number of samples for each device, and then
performance was tested using an equal number experimental
measurements for each device. With classiﬁcation accuracy
leveling off around 80% as shown in Figure 23, the white
box model expectedly does not perform quite as well as
the black box method based on true measurements due to
the various simpliﬁcations and estimations made during the
modeling process. However, the results are still very promising
11
Fig. 23.
modeling
Performance using a combination of white box and black box
for this new class of ﬁngerprinting. Furthermore, in a real
world scenario the white box model approach would be limited
to scenarios where there is not enough experimental data or the
integrity of the experimental data is in question. The white box
approach can then be combined with the black box approach
to enable gray box modeling where appropriate to achieve
higher accuracy. While there are a variety of techniques to
approach this problem, Bayesian learning being one, intuitively
it is similar to simply replacing synthetic samples in the white
box distribution with real samples over time as they become
available. Additional discussion of the limitations of white box
modeling is provided in Section VI-C1.
VI. DISCUSSION
A. Performance
In order for a ﬁngerprinting method to be useful for any
situation, whether it is for intrusion detection, surveillance,
or network management, the techniques should be relatively
accurate and scalable.
Accuracy While neither method was able to obtain the
near-perfect classiﬁcation accuracy needed for an effective
stand-alone intrusion detection system, both achieved high
enough accuracy to prove useful in a defense-in-breadth strat-
egy as a supplement to traditional IDS approaches. The CLRT
method achieved impressive classiﬁcation accuracies as high
as 99% in some cases and the physical ﬁngerprinting method
was able to accurately classify measurements from two nearly
identical devices around 92% of the time. For reference, all
of the previous passive ﬁngerprinting methods described in
Section II achieved classiﬁcation accuracies ranging from 86%
to 100%, so these performances are quite comparable.
Scalability The FF-ANN algorithm used in training the two
ﬁngerprinting techniques only had one hidden layer and 200
input features, resulting in reasonable scalability for computa-
tional complexity, and the alternate Bayes classiﬁer algorithm
is also very efﬁcient. Furthermore, our results suggest that the
accuracy for the methods scales as well. The CLRT method
was already tested above on a full scale power substation
network and was able to achieve high accuracies. Although
the physical ﬁngerprinting method only achieved an accuracy
of 92% for two similarly rated devices, it would be expected to
achieve even higher accuracy as more diverse types of devices
are added to the test set, resulting in more clear differences in
distributions.
B. Robustness Against Forgery
When using device ﬁngerprinting to augment traditional
IDS methods, it is also desired that the ﬁngerprints be non-
trivial to forge (i.e., resistant to mimicry attacks). Fortunately
there are several reasons as to why the proposed methods
are not so easily broken. First, there is always going to be
inherent randomness in the attacker’s machine that makes it
non-trivial to perfectly reproduce anything based on precision
timing. Second, for the physical ﬁngerprinting method the
adversary machine’s clock must stay synchronized with the
target device’s clock to millisecond precision. While this may
not be very difﬁcult with modern computers and networks,
most devices in legacy control system networks have much
lower powered processors and experience signiﬁcant clock
drift. For example in the observed dataset, the RTU (SCADA
master for the ﬁeld devices) drifted away from our network
sniffer’s clock at a rate of 6ms per hour.
To evaluate the proposed methods against forgery, we
consider two different classes of adversary. First, we consider
the case where an adversary is unable to gain physical access
to the target network but instead is able to compromise one
of the low powered devices on an air-gapped network, as in
the case of Stuxnet [15]. Her goal is to watch the network
long enough to generate black box ﬁngerprints and spoof the
responses of another device while matching their ﬁngerprint.
To model this adversary, we use a BeagleBone Black with
512MB of RAM and its ARM processor clocked down to
300MHz to simulate the resources available on a high-end
PLC. Second, we consider a stronger adversary that has gained
physical access to the network and is able to use her own,
more powerful, machine to spoof the responses. This stronger
adversary was modeled by a standard desktop with a 3.4
GHz quad-core i7 processor and 16GB of RAM. In both
scenarios, the adversary is assumed to have gathered accurate
samples and therefore has perfect knowledge of the signature
she must try to mimic. However, in reality there are several
difﬁculties that would make this perfect knowledge unlikely.
First, since the ICS environment contains an abundance of
legacy devices, it is not certain that the compromised device
would even have a network card that supports promiscuous
mode for network snifﬁng. Additionally, any snifﬁng code
installed on a low powered, compromised device would most
likely be computationally expensive enough to skew timing
measurements on the system. Furthermore, since it was found
in Figure 11 that network architecture does have some effect
on the ﬁngerprint, this suggests that the adversary would have
to sniff the network in the same location as the ﬁngerprinter to
get a completely accurate distribution, or be able to determine
the effects of the network by other means.
1) Cross-Layer Response Time Forgery: To test the cross-
layer ﬁngerprinting method, an open source implementation
of DNP3 (OpenDNP3 version 2.0.1) was modiﬁed to have
microsecond precision sleep statements using the known CLRT
distribution of one of the Vendor A Type 1b devices. The
forgery attempt by the weaker adversary in Figure 24a shows
very clear differences in the distributions due to the limited
resources slowing the distribution down and adding its own
(a) Forgery Attempt for CLRT Fingerprinting
Under Weak Adversary
(b) Forgery Attempt for CLRT Fingerprinting
Under Strong Adversary
Fig. 24. Forgery attempts against the CLRT technique
randomness. The stronger adversary’s forgery attempt can be
seen in Figure 24b. Compared with the original,
the two
distributions are very similar but the forged one is slightly
slower due to the adversary’s own processing time.
When the Bayes classiﬁer was applied to distinguish be-
tween the real device’s distribution and the attacker’s forged
distribution, the results in Figure 26 suggest high accuracy
detection of the forgery can be achieved.
2) Physical Fingerprinting Operation Time Forgery: To
study the forgery of the physical ﬁngerprinting technique, a
DNP3 master was conﬁgured to send operate commands every
second, and the adversary machine’s modiﬁed OpenDNP3
code was programmed to send responses with timestamps
calculated from the machine’s current time, added with the
known distribution of operation times. The resulting forgery
attempt by the weaker adversary can be seen in Figure 25a.
The distributions appear completely different due to the Bea-
gleBone’s clock quickly drifting from the SCADA master’s,
thus making the forgery attempt easily detected. The forgery
attempt by the stronger adversary, illustrated in Figure 25b, is
similar to the original, but still has noticeable differences most
likely due to the high-end PC timestamping the operations
faster than the original device.
The results from the Bayes classiﬁer in this scenario in
Figure 26 also suggest high accuracy detection of forgery is
possible.
Even though both ﬁngerprinting techniques exhibit re-
sistance to these na¨ıve forgery attacks, we admit it is still
possible that an attacker could more intelligently shape her
response times to more closely match the true ﬁngerprint and
implement a method of keeping better clock synchronization
with the target. However, this would require a signiﬁcantly
12
of piggybacking). For example, modern Linux systems use
quick ACKs to accelerate TCP slow start at the beginning of
connections and after retransmissions, but every vendor in the
observed power substation dataset used quick ACKs for every
packet, presumably to reduce latency. Therefore, the amount
of quick ACKs used by a device would determine how quickly
a ﬁngerprint could be generated.
The physical ﬁngerprinting method requires high resolution
timing of when operations take place, so it must be used with
protocols that include operation timestamps in their responses.
Not all SCADA protocol support this functionality, but the
ones used in time-critical environments, such as the power
grid, do include such timestamps. Requiring timestamps in
the network trafﬁc is a limitation in the sense that it can
make it easier for an adversary to generate and forge the
device ﬁngerprints, but it can also be a defensive strength
in another. If the network trafﬁc is encrypted, an adversary
would have to resort to white box modeling to attempt to
generate any ﬁngerprints, which is non-trivial and becomes
more difﬁcult as the devices modeled become more complex
(e.g., Appendix B gives a coarse model of a more complex
mechanical operation).
The highest classiﬁcation accuracies achieved in this work,
99% and 92% for CRLT and physical ﬁngerprinting respec-
tively, are impressive but would result in an impractical number
of false alarms (1% and 8%) if each mis-classiﬁcation was
treated directly as an intrusion. Therefore, any practical appli-
cation of these ﬁngerprinting techniques to detect intrusions
would leverage the signiﬁcant body of work [22] [8] on IDS
alert correlation to manage the number of alarms.
1) Limitations of White Box Modeling: Clearly, the pro-
posed white box modeling approach requires detailed knowl-
edge of the mechanical construction of the ICS device. To
construct a physics-based model, the devices basic mechanical
functionality must be derived from either available schematics,
drawings, or a physical example of the device itself. In some
cases, the material composition of certain components (i.e.,
magnetic materials, etc) may also be important in the modeling
process. For many devices this information is widely available
and thus building a model is feasible. However, in some cases
it is possible that mechanical design data will be difﬁcult to
obtain, for instance due to intellectual property concerns. For
a given device, there is certain device-speciﬁc mechanical data
that is required to build a physical model, and if this data is
not available then white box modeling is likely infeasible.
Another consideration in white box modeling arises from
process variation or model error. If the white box model
exhibits parametric error only, Monte Carlo simulation can be
used as in the above examples to generate a realistic response
distribution by randomly varying model parameters. However,
non-parametric modeling errors (or structural modeling errors)
may pose signiﬁcant problems as these can lead to bias errors
in the resulting response distributions. Non-parametric errors
may stem from unmodeled components or incorrect modeling
assumptions. These biases in the model response can in turn