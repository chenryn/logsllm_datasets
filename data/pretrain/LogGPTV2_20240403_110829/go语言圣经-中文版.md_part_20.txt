"Steve McQueen",
"Jacqueline Bisset"
]
}
]
在编码时，默认使用Go语言结构体的成员名字作为JSON的对象（通过reflect反射技术，我们
将在12.6节讨论）。只有导出的结构体成员才会被编码，这也就是我们为什么选择用大写字
母开头的成员名称。
细心的读者可能已经注意到，其中Year名字的成员在编码后变成了released，还有Color成员
编码后变成了小写字母开头的color。这是因为构体成员Tag所导致的。一个构体成员Tag是和
在编译阶段关联到该成员的元信息字符串：
Year int `json:"released"`
Color bool `json:"color,omitempty"`
结构体的成员Tag可以是任意的字符串面值，但是通常是一系列用空格分隔的key:"value"键值
对序列；因为值中含义双引号字符，因此成员Tag一般用原生字符串面值的形式书写。json开
头键名对应的值用于控制encoding/json包的编码和解码的行为，并且encoding/...下面其它的
包也遵循这个约定。成员Tag中json对应值的第一部分用于指定JSON对象的名字，比如将Go
JSON 153
gopl
语言中的TotalCount成员对应到JSON中的total_count对象。Color成员的Tag还带了一个额外
的omitempty选项，表示当Go语言结构体成员为空或零值时不生成JSON对象（这里false为零
值）。果然，Casablanca是一个黑白电影，并没有输出Color成员。
编码的逆操作是解码，对应将JSON数据解码为Go语言的数据结构，Go语言中一般叫
unmarshaling，通过json.Unmarshal函数完成。下面的代码将JSON格式的电影数据解码为一
个结构体slice，结构体中只有Title成员。通过定义合适的Go语言数据结构，我们可以选择性
地解码JSON中感兴趣的成员。当Unmarshal函数调用返回，slice将被只含有Title信息值填
充，其它JSON成员将被忽略。
var titles []struct{ Title string }
if err := json.Unmarshal(data, &titles); err != nil {
log.Fatalf("JSON unmarshaling failed: %s", err)
}
fmt.Println(titles) // "[{Casablanca} {Cool Hand Luke} {Bullitt}]"
许多web服务都提供JSON接口，通过HTTP接口发送JSON格式请求并返回JSON格式的信
息。为了说明这一点，我们通过Github的issue查询服务来演示类似的用法。首先，我们要定
义合适的类型和常量：
gopl.io/ch4/github
JSON 154
gopl
// Package github provides a Go API for the GitHub issue tracker.
// See https://developer.github.com/v3/search/#search-issues.
package github
import "time"
const IssuesURL = "https://api.github.com/search/issues"
type IssuesSearchResult struct {
TotalCount int `json:"total_count"`
Items []*Issue
}
type Issue struct {
Number int
HTMLURL string `json:"html_url"`
Title string
State string
User *User
CreatedAt time.Time `json:"created_at"`
Body string // in Markdown format
}
type User struct {
Login string
HTMLURL string `json:"html_url"`
}
和前面一样，即使对应的JSON对象名是小写字母，每个结构体的成员名也是声明为大写字母
开头的。因为有些JSON成员名字和Go结构体成员名字并不相同，因此需要Go语言结构体成
员Tag来指定对应的JSON名字。同样，在解码的时候也需要做同样的处理，GitHub服务返回
的信息比我们定义的要多很多。
SearchIssues函数发出一个HTTP请求，然后解码返回的JSON格式的结果。因为用户提供的
查询条件可能包含类似 和 之类的特殊字符，为了避免对URL造成冲突，我们用
? &
url.QueryEscape来对查询中的特殊字符进行转义操作。
gopl.io/ch4/github
JSON 155
gopl
package github
import (
"encoding/json"
"fmt"
"net/http"
"net/url"
"strings"
)
// SearchIssues queries the GitHub issue tracker.
func SearchIssues(terms []string) (*IssuesSearchResult, error) {
q := url.QueryEscape(strings.Join(terms, " "))
resp, err := http.Get(IssuesURL + "?q=" + q)
if err != nil {
return nil, err
}
// We must close resp.Body on all execution paths.
// (Chapter 5 presents 'defer', which makes this simpler.)
if resp.StatusCode != http.StatusOK {
resp.Body.Close()
return nil, fmt.Errorf("search query failed: %s", resp.Status)
}
var result IssuesSearchResult
if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
resp.Body.Close()
return nil, err
}
resp.Body.Close()
return &result, nil
}
在早些的例子中，我们使用了json.Unmarshal函数来将JSON格式的字符串解码为字节slice。
但是这个例子中，我们使用了基于流式的解码器json.Decoder，它可以从一个输入流解码
JSON数据，尽管这不是必须的。如您所料，还有一个针对输出流的json.Encoder编码对象。
我们调用Decode方法来填充变量。这里有多种方法可以格式化结构。下面是最简单的一种，
以一个固定宽度打印每个issue，但是在下一节我们将看到如何利用模板来输出复杂的格式。
gopl.io/ch4/issues
JSON 156
gopl
// Issues prints a table of GitHub issues matching the search terms.
package main
import (
"fmt"
"log"
"os"
"gopl.io/ch4/github"
)
func main() {
result, err := github.SearchIssues(os.Args[1:])
if err != nil {
log.Fatal(err)
}
fmt.Printf("%d issues:\n", result.TotalCount)
for _, item := range result.Items {
fmt.Printf("#%-5d %9.9s %.55s\n",
item.Number, item.User.Login, item.Title)
}
}
通过命令行参数指定检索条件。下面的命令是查询Go语言项目中和JSON解码相关的问题，
还有查询返回的结果：
$ go build gopl.io/ch4/issues
$ ./issues repo:golang/go is:open json decoder
13 issues:
#5680 eaigner encoding/json: set key converter on en/decoder
#6050 gopherbot encoding/json: provide tokenizer
#8658 gopherbot encoding/json: use bufio
#8462 kortschak encoding/json: UnmarshalText confuses json.Unmarshal
#5901 rsc encoding/json: allow override type marshaling
#9812 klauspost encoding/json: string tag not symmetric
#7872 extempora encoding/json: Encoder internally buffers full output
#9650 cespare encoding/json: Decoding gives errPhase when unmarshalin
#6716 gopherbot encoding/json: include field name in unmarshal error me
#6901 lukescott encoding/json, encoding/xml: option to treat unknown fi
#6384 joeshaw encoding/json: encode precise floating point integers u
#6647 btracey x/tools/cmd/godoc: display type kind of each named type
#4237 gjemiller encoding/base64: URLEncoding padding is optional
GitHub的Web服务接口 https://developer.github.com/v3/ 包含了更多的特性。
练习 4.10： 修改issues程序，根据问题的时间进行分类，比如不到一个月的、不到一年的、
超过一年。
JSON 157
gopl
练习 4.11： 编写一个工具，允许用户在命令行创建、读取、更新和关闭GitHub上的issue，当
必要的时候自动打开用户默认的编辑器用于输入文本信息。
练习 4.12： 流行的web漫画服务xkcd也提供了JSON接口。例如，一个
https://xkcd.com/571/info.0.json 请求将返回一个很多人喜爱的571编号的详细描述。下载每
个链接（只下载一次）然后创建一个离线索引。编写一个xkcd工具，使用这些离线索引，打
印和命令行输入的检索词相匹配的漫画的URL。
练习 4.13： 使用开放电影数据库的JSON服务接口，允许你检索和下载 https://omdbapi.com/
上电影的名字和对应的海报图像。编写一个poster工具，通过命令行输入的电影名字，下载对
应的海报。
JSON 158
gopl
4.6. 文本和HTML模板
前面的例子，只是最简单的格式化，使用Printf是完全足够的。但是有时候会需要复杂的打印
格式，这时候一般需要将格式化代码分离出来以便更安全地修改。这写功能是由text/template
和html/template等模板包提供的，它们提供了一个将变量值填充到一个文本或HTML格式的模
板的机制。
一个模板是一个字符串或一个文件，里面包含了一个或多个由双花括号包含的 对
{{action}}
象。大部分的字符串只是按面值打印，但是对于actions部分将触发其它的行为。每个actions
都包含了一个用模板语言书写的表达式，一个action虽然简短但是可以输出复杂的打印值，模
板语言包含通过选择结构体的成员、调用函数或方法、表达式控制流if-else语句和range循环
语句，还有其它实例化模板等诸多特性。下面是一个简单的模板字符串：
gopl.io/ch4/issuesreport
const templ = `{{.TotalCount}} issues:
{{range .Items}}----------------------------------------
Number: {{.Number}}
User: {{.User.Login}}
Title: {{.Title | printf "%.64s"}}
Age: {{.CreatedAt | daysAgo}} days
{{end}}`
这个模板先打印匹配到的issue总数，然后打印每个issue的编号、创建用户、标题还有存在的
时间。对于每一个action，都有一个当前值的概念，对应点操作符，写作“.”。当前值“.”最初被
初始化为调用模板时的参数，在当前例子中对应github.IssuesSearchResult类型的变量。模板
中 对应action将展开为结构体中TotalCount成员以默认的方式打印的值。模
{{.TotalCount}}
板中 和 对应一个循环action，因此它们直接的内容可能会被展开多
{{range .Items}} {{end}}
次，循环每次迭代的当前值对应当前的Items元素的值。
在一个action中， 操作符表示将前一个表达式的结果作为后一个函数的输入，类似于UNIX
|
中管道的概念。在Title这一行的action中，第二个操作是一个printf函数，是一个基于
fmt.Sprintf实现的内置函数，所有模板都可以直接使用。对于Age部分，第二个动作是一个叫
daysAgo的函数，通过time.Since函数将CreatedAt成员转换为过去的时间长度：
func daysAgo(t time.Time) int {
return int(time.Since(t).Hours() / 24)
}
需要注意的是CreatedAt的参数类型是time.Time，并不是字符串。以同样的方式，我们可以通
过定义一些方法来控制字符串的格式化（§2.5），一个类型同样可以定制自己的JSON编码和
解码行为。time.Time类型对应的JSON值是一个标准时间格式的字符串。
文本和HTML模板 159
gopl
生成模板的输出需要两个处理步骤。第一步是要分析模板并转为内部表示，然后基于指定的
输入执行模板。分析模板部分一般只需要执行一次。下面的代码创建并分析上面定义的模板
templ。注意方法调用链的顺序：template.New先创建并返回一个模板；Funcs方法将
daysAgo等自定义函数注册到模板中，并返回模板；最后调用Parse函数分析模板。
report, err := template.New("report").
Funcs(template.FuncMap{"daysAgo": daysAgo}).
Parse(templ)
if err != nil {
log.Fatal(err)
}
因为模板通常在编译时就测试好了，如果模板解析失败将是一个致命的错误。template.Must
辅助函数可以简化这个致命错误的处理：它接受一个模板和一个error类型的参数，检测error
是否为nil（如果不是nil则发出panic异常），然后返回传入的模板。我们将在5.9节再讨论这个
话题。
一旦模板已经创建、注册了daysAgo函数、并通过分析和检测，我们就可以使用
github.IssuesSearchResult作为输入源、os.Stdout作为输出源来执行模板：
var report = template.Must(template.New("issuelist").
Funcs(template.FuncMap{"daysAgo": daysAgo}).
Parse(templ))
func main() {
result, err := github.SearchIssues(os.Args[1:])
if err != nil {
log.Fatal(err)
}
if err := report.Execute(os.Stdout, result); err != nil {
log.Fatal(err)
}
}
程序输出一个纯文本报告：
文本和HTML模板 160
gopl
$ go build gopl.io/ch4/issuesreport
$ ./issuesreport repo:golang/go is:open json decoder
13 issues:
----------------------------------------