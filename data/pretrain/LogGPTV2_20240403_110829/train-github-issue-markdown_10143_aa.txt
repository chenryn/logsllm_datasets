In Julia master (but not in Julia 0.6) this apparently harmless function:
    using StaticArrays
    const v1 = SVector(1)
    const v2 = SVector(2)
    const v3 = SVector(3)
    const v4 = SVector(4)
    function foo()
        a, b, c, d = 1:4
        arg = @. v1 * a + v2 * b + v3 * c + v4 * d
    end
is type-unstable:
    julia> @code_warntype foo()
    Variables:
      #1::getfield(Main, Symbol("##1#2"))
      a::Int64
      b::Int64
      c::Int64
      d::Int64
      #temp#@_7::Int64
      arg
      #temp#@_9::Tuple{Int64,Int64}
      #temp#@_10::Tuple{Int64,Int64}
      #temp#@_11::Tuple{Int64,Int64}
      #temp#@_12::Tuple{Int64,Int64}
    Body:
      begin
          SSAValue(0) = $(Expr(:new, UnitRange{Int64}, 1, :((Base.select_value)((Base.sle_int)(1, 4)::Bool, 4, (Base.sub_int)(1, 1)::Int64)::Int64)))
          #temp#@_7::Int64 = (Core.getfield)(SSAValue(0), :start)::Int64
          # meta: location tuple.jl indexed_next 60
          unless (#temp#@_7::Int64 === (Base.add_int)((Core.getfield)(SSAValue(0), :stop)::Int64, 1)::Int64)::Bool goto 7
          #temp#@_9::Tuple{Int64,Int64} = (Base.throw)($(Expr(:invoke, MethodInstance for BoundsError(::Any, ::Int64), :(Base.BoundsError), SSAValue(0), 1))::BoundsError)::Union{}
          goto 9
          7: 
          #temp#@_9::Tuple{Int64,Int64} = (Core.tuple)(#temp#@_7::Int64, (Base.add_int)(#temp#@_7::Int64, 1)::Int64)::Tuple{Int64,Int64}
          9: 
          # meta: pop location
          SSAValue(1) = #temp#@_9::Tuple{Int64,Int64}
          a::Int64 = (Core.getfield)(SSAValue(1), 1)::Int64
          #temp#@_7::Int64 = (Core.getfield)(SSAValue(1), 2)::Int64
          # meta: location tuple.jl indexed_next 60
          unless (#temp#@_7::Int64 === (Base.add_int)((Core.getfield)(SSAValue(0), :stop)::Int64, 1)::Int64)::Bool goto 18
          #temp#@_10::Tuple{Int64,Int64} = (Base.throw)($(Expr(:invoke, MethodInstance for BoundsError(::Any, ::Int64), :(Base.BoundsError), SSAValue(0), 2))::BoundsError)::Union{}
          goto 20
          18: 
          #temp#@_10::Tuple{Int64,Int64} = (Core.tuple)(#temp#@_7::Int64, (Base.add_int)(#temp#@_7::Int64, 1)::Int64)::Tuple{Int64,Int64}
          20: 
          # meta: pop location
          SSAValue(2) = #temp#@_10::Tuple{Int64,Int64}
          b::Int64 = (Core.getfield)(SSAValue(2), 1)::Int64
          #temp#@_7::Int64 = (Core.getfield)(SSAValue(2), 2)::Int64
          # meta: location tuple.jl indexed_next 60
          unless (#temp#@_7::Int64 === (Base.add_int)((Core.getfield)(SSAValue(0), :stop)::Int64, 1)::Int64)::Bool goto 29
          #temp#@_11::Tuple{Int64,Int64} = (Base.throw)($(Expr(:invoke, MethodInstance for BoundsError(::Any, ::Int64), :(Base.BoundsError), SSAValue(0), 3))::BoundsError)::Union{}
          goto 31
          29: 
          #temp#@_11::Tuple{Int64,Int64} = (Core.tuple)(#temp#@_7::Int64, (Base.add_int)(#temp#@_7::Int64, 1)::Int64)::Tuple{Int64,Int64}
          31: 
          # meta: pop location
          SSAValue(3) = #temp#@_11::Tuple{Int64,Int64}
          c::Int64 = (Core.getfield)(SSAValue(3), 1)::Int64
          #temp#@_7::Int64 = (Core.getfield)(SSAValue(3), 2)::Int64
          # meta: location tuple.jl indexed_next 60
          unless (#temp#@_7::Int64 === (Base.add_int)((Core.getfield)(SSAValue(0), :stop)::Int64, 1)::Int64)::Bool goto 40
          #temp#@_12::Tuple{Int64,Int64} = (Base.throw)($(Expr(:invoke, MethodInstance for BoundsError(::Any, ::Int64), :(Base.BoundsError), SSAValue(0), 4))::BoundsError)::Union{}
          goto 42
          40: 
          #temp#@_12::Tuple{Int64,Int64} = (Core.tuple)(#temp#@_7::Int64, (Base.add_int)(#temp#@_7::Int64, 1)::Int64)::Tuple{Int64,Int64}
          42: 
          # meta: pop location
          SSAValue(4) = #temp#@_12::Tuple{Int64,Int64}
          d::Int64 = (Core.getfield)(SSAValue(4), 1)::Int64
          #temp#@_7::Int64 = (Core.getfield)(SSAValue(4), 2)::Int64
          #= line 11 =#
          #1::getfield(Main, Symbol("##1#2")) = $(Expr(:new, :(Main.##1#2)))
          # meta: location broadcast.jl broadcast 434
          # meta: location /home/mose/.julia/v0.7/StaticArrays/src/broadcast.jl broadcast_c 33
          SSAValue(10) = (Core._apply)(Core.tuple, (Size(1,),), $(Expr(:invoke, MethodInstance for broadcast_sizes(::Int64, ::SVector{1,Int64}, ::Vararg{Any,N} where N), :(StaticArrays.broadcast_sizes), :(a), :(Main.v2), :(b), :(Main.v3), :(c), :(Main.v4), :(d)))::Tuple{StaticArrays.Size{()},StaticArrays.Size{(1,)},Vararg{Any,N} where N})::Tuple{StaticArrays.Size{(1,)},StaticArrays.Size{()},StaticArrays.Size{(1,)},Vararg{Any,N} where N}
          # meta: pop locations (2)
          SSAValue(9) = (StaticArrays._broadcast)(#1::getfield(Main, Symbol("##1#2")), SSAValue(10), Main.v1, a::Int64, Main.v2, b::Int64, Main.v3, c::Int64, Main.v4, d::Int64)::Any
          return SSAValue(9)
      end::Any
It is instead stable if broadcast is not used (remove the `@.`):
    julia> function foo()
               a, b, c, d = 1:4
               arg = v1 * a + v2 * b + v3 * c + v4 * d
           end
    foo (generic function with 1 method)
    julia> @code_warntype foo()
    Variables:
      a::Int64
      b::Int64
      c::Int64
      d::Int64
      #temp#@_6::Int64
      arg
      #temp#@_8::Tuple{Int64,Int64}
      #temp#@_9::Tuple{Int64,Int64}
      #temp#@_10::Tuple{Int64,Int64}
      #temp#@_11::Tuple{Int64,Int64}
      #temp#@_12::SVector{1,Int64}
      #temp#@_18::SVector{1,Int64}
    Body:
      begin
          SSAValue(0) = $(Expr(:new, UnitRange{Int64}, 1, :((Base.select_value)((Base.sle_int)(1, 4)::Bool, 4, (Base.sub_int)(1, 1)::Int64)::Int64)))
          #temp#@_6::Int64 = (Core.getfield)(SSAValue(0), :start)::Int64
          # meta: location tuple.jl indexed_next 60
          unless (#temp#@_6::Int64 === (Base.add_int)((Core.getfield)(SSAValue(0), :stop)::Int64, 1)::Int64)::Bool goto 7
          #temp#@_8::Tuple{Int64,Int64} = (Base.throw)($(Expr(:invoke, MethodInstance for BoundsError(::Any, ::Int64), :(Base.BoundsError), SSAValue(0), 1))::BoundsError)::Union{}