needed to provide sufﬁciently good service and frees them
when unneeded.
Fig. 3: CDN-on-Demand deployed over two clouds
B. Components and Deployment
Figure 3 illustrates CDN-on-Demand deployment, using
two IaaS providers, Amazon Elastic Compute Cloud (EC2) and
Google Compute Engine (GCE). The ﬁgure shows the main
components involved in the system’s operation: managers and
proxies, which are deployed on IaaS-cloud instances, and the
origin-gateway, which is deployed at the content-origin.
The managers perform four basic functions: resource man-
agement, authoritative DNS, monitor/watchdog and second-
level cache. (1) The manager manages CDN-on-Demand’s
resources, by invoking and discarding CDN-on-Demand’s
cloud instances (for proxy services), to minimize costs while
ensuring desired service level. To manage cloud instances, the
manager receives (in conﬁguration) the website administrator’s
credentials for using IaaS clouds. (2) The manager provides
the authoritative DNS service for the content-origin’s domain,
mapping clients directly to the content-origin (under normal
conditions, when CDN-on-Demand is dormant) or to CDN-
on-Demand proxy nodes (when CDN-on-Demand is active,
typically due to attack). (3) The manager monitors the avail-
ability of the content-origin, by running a ‘watchdog’ service
(we describe this service as part of the bootstrapping process
below). (4) Finally, the manager keeps an updated copy of all
static, public objects in the content-origin, allowing CDN-on-
Demand to provide this content even when the content-origin is
under attack or otherwise unreachable. Notice that objects are
stored using the clientless secure-objects mechanism, which
ensures security even if cloud machines are corrupt.
For robustness, and to improve reliability and quality of
monitoring, CDN-on-Demand supports deployment of more
than one manager (as illustrated in Figure 3). In this case,
one of the managers performs the resource management func-
tion; we refer to that manager as the resource-manager, and
the others provide backup in case that manager fails. The
other services, namely authoritative DNS, caching and origin-
monitoring, are performed by all managers to distribute load
and reduce latency. (DNS allows to specify multiple name-
server addresses and proxies use the cache near them.)
Simple deployment and automated operation. CDN-on-
Demand is easy to deploy and operates automatically, without
requiring the site administrator to modify web-server conﬁgu-
ration or website content. In particular, CDN-on-Demand does
not require client-side installation and works with current IaaS-
clouds infrastructure.
The origin-gateway module is a software component that
transparently implements the system’s mechanisms at
the
content-origin’s side, without requiring changes to the web-
server or site’s content. This simpliﬁes deployment of CDN-
on-Demand with existing websites. In contrast to proxies and
managers, which are deployed on third party IaaS clouds,
3
ClientContent deliveryContent updates, monitoring & controlProxyContent-originAmazonEC2Google Compute      EngineLegendOrigin-gatewayManagertypically on machines shared with other applications,
the
origin-gateway is deployed at the content-origin by the website
administrator and handles client requests (or relays them to
the content-origin). Hence, the origin-gateway is trusted with
private keys and content.
C. System Bootstrap and Teardown
The managers’ watchdog service periodically tests the
content-origin’s availability, by exchanging messages with the
origin-gateway. These messages are exchanged over UDP,
to avoid congestion control mechanisms (e.g., of TCP) and
allow estimating the loss-rate and latency for communicating
with the content-origin. Under normal conditions (i.e., no
attack), watchdogs receive responses in a timely fashion. In
this case clients connect directly to the content-origin, i.e.,
CDN-on-Demand is ‘dormant’ (proxies are not deployed), with
negligible overhead and costs; the origin-gateway relays HTTP
requests and responses between clients and the content-origin.
When the manager identiﬁes that multiple responses are
delayed or do not arrive (over a threshold), it activates CDN-
on-Demand. The resource-manager deploys proxy servers, and
changes the DNS mapping of the site’s domain, directing
clients to a nearby proxy (and also informs other managers, if
deployed). While the system is active, the resource-manager
adjusts the number of proxies based on trafﬁc rates, in order
to ensure sufﬁciently good service. When trafﬁc rates are back
to normal (e.g., below the capacity of the content-origin link),
and the content-origin is available, the system goes back to
the ‘dormant’ state. Namely, the manager changes the DNS
mapping to point clients directly to the content-origin and
removes the proxies. We describe the proxy-deployment and
client-to-proxy mapping procedures in Section VI.
III. CLIENTLESS SECURE-OBJECTS
CDN-on-Demand is designed to work with any IaaS cloud
provider to deploy proxies, in particular lower cost ones which
are typically less trusted. Hence, we do not entrust the provider
or cloud instances with the content-origin’s private key or
private user-data. In this section we introduce the clientless
secure-objects mechanism, which ensures security for the
data exchanged between the browser and CDN-on-Demand.
This mechanism allows utilization of multiple IaaS providers,
thus improving geo-coverage and reducing system cost, yet
it does not necessitate trusting those providers and compro-
mising on security. The clientless secure-objects mechanism
is complementary to TLS/SSL, which we use to protect the
communication links between clients, proxies and the content-
origin.
We ﬁrst describe the RootJS client-side agent, the key com-
ponent of the clientless secure-objects mechanism, and present
a simple yet important application of clientless secure-objects,
which can be viewed as a simpliﬁed case of untrusted CDN:
secure software downloads using mirror sites. We then describe
the use of clientless secure-objects in CDN-on-Demand. We
conclude this section by discussing the implementation of this
module and its evaluation.
Fig. 4: Supplying the RootJS to new clients
A. Trusted Client-Side Agent
The Root JavaScript (RootJS) is the client-side agent of our
system. This static and short (10KB) script is responsible for
presenting web content to the user. In particular, the RootJS
includes the website’s public signature-veriﬁcation key and
validates the authenticity of objects that the client retrieves
from untrusted repositories (mirror sites or CDN proxies).
Supplying the RootJS to new clients. Figure 4 illustrates
a new client connecting to a website (site.com) that employs
clientless secure-objects, securely loading the RootJS and then
using it to display secure-objects. To ensure the authenticity of
the RootJS, clients obtain a tiny Loader script from the content-
origin over a secure (TLS) connection when they connect to
the website for the ﬁrst time. The origin-gateway ‘injects’ the
Loader script into the website’s HTML page in the content-
origin response (i.e., ‘inline script’);
the script contains a
hash function implementation (SHA1) and a hard-coded hash
value of the RootJS. The Loader retrieves the RootJS from the
repository, veriﬁes the hash and then loads the script. The size
of the Loader script is only 870Bytes; this is signiﬁcant since
the Loader is provided from the origin’s site. To allow validation
of objects stored in the repository, we send them with the Cross
Origin Resource Sharing (CORS) header:
Access-Control-Allow-Origin: site.com
Specifying that the content-origin website (and only that
website), site.com, may access objects from its repository,
site-cdn.com.
When CDN-on-Demand is active, the manager (operating
the authoritative DNS server) maps the website’s domain name
to proxy IP addresses. The client then opens a secure connec-
tion to the proxy machine in order to retrieve the website’s
homepage, which includes the Loader script and imports the
RootJS. Since in our design the CDN does not hold the content-
origin’s private TLS key, it cannot handle the communication;
the proxy merely relays the raw TLS communication to and
from the content-origin. As we explain in Section IV, CDN-
on-Demand’s origin-connectivity mechanism leverages the sys-
tem’s control of both communication endpoints (proxies and
origin-gateway) to establish a robust communication channel
between them.
Caching, updating and revoking the RootJS. Because the
RootJS is static, we use the browser’s caching mechanism to
4
Content-Origin site.comClientGet webpage (secure connection)Repository(mirror, HTTP proxy)site-cdn.comhomepage with inline Loader script, max-age = one monthRootJS retrieves secure-objects from repositoryRootJS, max-age = one monthRootJS decapsulates & presentsLoader retrieves RootJS from repositoryLoader validates and loads RootJSOriginGatewayhomepageminimize latency and communication with the origin site in
future connections. Speciﬁcally, the website’s homepage with
the Loader script and the RootJS are sent with the following
HTTP header, to cache them at the client:
Cache-Control: public, max-age = one month
The clientless secure-objects mechanism allows forcing the
Loader and RootJS out of the client’s cache to facilitate code
patches or revoke the website’s private key if it was exposed.
The mechanism works by distributing a small ‘timestamp’
object, via the repository, that approves use of the current
RootJS version. This timestamp object
is cached (both by
the repository and at the client’s browser) for a short period
of time, much shorter than the RootJS (e.g., one day). The
origin-gateway signs the ‘timestamp’ object and updates it
on the repository (e.g., daily). To sign this sensitive object,
the origin-gateway uses a dedicated private key (e.g., kept on
an ofﬂine machine). The RootJS veriﬁes the signature with
the corresponding public key. If the client does not have the
‘timestamp’ object in the cache, the RootJS tries to fetch it
from the repository. If it fails or the signature is invalid, then
the RootJS circumvents the browser’s caching mechanism (by
specifying the Cache-Control: max-age = 0 HTTP header in the
request) and retrieves a new version of the Loader from the
content-origin as well as a new RootJS from the repository.
B. Securely-using Mirror Sites
Mirror sites may be viewed as a limited and inexpensive
alternative to CDNs: a website peers with other sites to allow
its clients to download ﬁles (typically software) from a server
near them. Malicious or insecure mirror sites may modify
the ﬁles hosted on their servers, e.g., to distribute malware.
To address this threat, many websites using mirrors publish
the hash of the download software ﬁle, and instruct users to
validate authenticity of the ﬁle by computing the hash over
its content and comparing with the published hash-value. In
practice, however, only a small portion of savvy users perform
such validation; many users do not, e.g., due to unwillingness
or inability to install or use the validation tools [12]. We
next explain how clientless secure-objects mechanism allows to
protect users of software mirror sites. This simple application,
limited to ﬁle downloads, helps understand the more involved
application to CDN-on-Demand (distributing rich web con-
tent).
Instead of relying on users to validate the content of
download ﬁles, the clientless secure-objects mechanism uses
the RootJS to automate the validation. The content-origin signs
the ﬁle together with an expiration date and its Uniform
Resource Identiﬁer (URI), which are ‘linked’ in the content-
origin website. This ensures that a malicious mirror cannot
change the ﬁle content, including change to obsolete version
or another mirrored ﬁle. The website stores on the mirror the
encapsulated version of the ﬁle, which includes the content
(in plain-text), metadata such as URI, and a signature over
all these ﬁelds. When users click on the download link at the
website, they invoke the RootJS which fetches the ﬁle from the
mirror site and validates its content. If successful, the RootJS
calls the saveAs command which prompts to the user to save
the original ﬁle’s content.
(a) Public object
(b) Private object
Fig. 5: Encapsulated objects (stored on repository)
C. Securely-using Untrusted Web Proxies
CDN-on-Demand ensures authenticity and conﬁdentiality
of web-content by storing encapsulated web-objects on its
proxies. The origin-gateway performs the encapsulation auto-
matically, when proxies retrieve web-objects from the content-
origin (see details in Section V).
In order to support decapsulation of dynamic objects
(AJAX), and avoid changing the original website, the RootJS
‘hooks’ the XMLHttpRequest’s OnReadyStateChange method.
Namely, the RootJS replaces the callback method that is in-
voked to handle dynamic objects to be the object-decapsulation
method. If decapsulation is successful, the hook method passes
the content
to the original handler method, otherwise the
RootJS discards the object.
In the following two subsections, we discuss the encapsu-
lation and rendering procedures, for public and then for private
web-objects.
D. Public Objects
All users may access the website’s public objects, which
comprise much of the content in many sites such as online
newspapers and stores. We ensure that public objects are
not modiﬁed by malicious or compromised caching service.
Figure 5a illustrates the encapsulated public object structure,
which generalizes encapsulation of ﬁles stored on mirrors (see
above) to support HTML rendering and HTTP caching options.
Each encapsulated object speciﬁes the parameters required to
render its content (e.g., type and height/width parameters). The
origin-gateway signs the object with its URI and HTTP caching
directives (‘Last-Modiﬁed’, ‘Expires’ and ‘max-age’). The content
is stored in plain-text on the proxy along with the signature.
Decapsulation and Rendering. To display a web-page, the
RootJS retrieves it from one of the CDN proxies, decapsulates
it and validates its authenticity by verifying the content-origin’s
signature. Next, the RootJS displays the page to the user (by
updating document.documentElement.innerHTML) and continues to
retrieve the objects embedded in that page from the proxy,
using the secure-objects’ rendering information to display them
on the page.