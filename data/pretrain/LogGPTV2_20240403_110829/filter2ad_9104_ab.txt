## 解码
图7: 通过Invoke-Obfuscation编码的Powershell Script
如果知道编码映射和应用该逻辑的时间，解码就非常简单了。这也正是PowerShell翻译器的工作，重新应用也是一种有效的方法。
研究人员在这里选择正则表达式来进行模式匹配：
    ascii_char_reg = r'([0-9]{1,3})[, \)]+'
    ascii_chars = re.findall(ascii_char_reg, file_text)
    chars = [chr(int(ac)) for ac in ascii_chars]
    file_text = ''.join(chars)
## 反混淆
反混淆的大部分可以通过简单逻辑来处理：连接字符串，移除`’s`，替换变量等。  
其中一些转化非常简单：
    def remove_ticks(line):
        line = line[:-1].replace('`', '') + line[-1]
        return line
    def splatting(line):
        splat_reg = r"""(&\( *['"]{1}(.+)?['"]{1} *?\))"""
        matches = re.findall(splat_reg, line)
        for match in matches:
            line = line.replace(match[0], match[1])
        return line
    def string_by_assign(line):
        match_reg = r'(?:(\[[sS][tT][rR][iI][nN][gG]\])([\[\]A-Za-z0-9]+)[\)\,\.]+)'
        matches = re.findall(match_reg, line)
        for match in matches:
            replace_str = match[0] + match[1]
            line = line.replace(replace_str, "'" + match[1] + "'")
        return line
一些数据是比较复杂的。为了对基于`-f`的字符串进行重新排序，格式处理器：
  1. 找出-f或-F；
  2. 找出所有-f之前的{[0-9]+}类型的占位符
  3. 找出所有-f之后的所有的字符串和有效的非字符串值；
  4. 用值替换占位符
  5. 在同一行进行多次循环
将这些反混淆技术结合起来，并顺序应用，就可以知道研究人员的代码工作效果如何了。  
应用前：
    param
    (
        [Parameter(MANdAtORy=${FA`L`SE})] ${dO`m`AiN} = ("{2}{1}{0}{3}" -f 'a','rtr','ai','n.com'),
        [Parameter(MandatOrY=${tr`UE})]  ${Sr`NUM`BER},
        [Parameter(mAnDATORY=${F`AL`SE})] ${targET`p`Ath} = ("{10}{11}{1}{2}{9}{14}{3}{12}{5}{7}{4}{0}{8}{13}{6}" -f'=a','=Airtr','a','ir',',DC','a','C=com','n','i','n','OU=Disab','led,OU','tr','rtran,D',' Users,OU=A'),
        [Parameter(ManDAtOrY=${T`RUe})]  ${us`er}
    )
    if (&("{2}{1}{0}"-f'Path','est-','T') ${US`eR})
    {
        ${USER`li`sT} = &("{0}{2}{3}{1}" -f'Ge','nt','t-','Conte') -Path ${u`SEr}
    }
    else
    {
        ${usER`L`ISt} = ${Us`Er}
    }
    ${c`oNT`AIneR} = ("{3}{11}{4}{8}{5}{0}{7}{10}{6}{2}{1}{9}" -f'ir','irtran,',',DC=a','OU','a',',OU=A','an','tran Users,OU=Air','bled','DC=com','tr','=Dis')
    ${D`eS`CrIP`TIon} = ('Term'+'ina'+'ted '+'per'+' '+"$SrNumber")
    foreach (${uS`eR} in ${U`S`E`RList})
    {
        .("{2}{0}{1}" -f'et','-ADUser','S') -Identity ${Us`ER} -Server ${D`OM`AIN} -Enabled ${FA`LsE} -Description ${D`eSCrI`P`TION}
        ${UsE`RHan`dlE} = &("{2}{0}{1}"-f'U','ser','Get-AD') -Identity ${us`eR} -Server ${Do`M`AiN}
        &("{3}{1}{2}{0}" -f't','je','c','Move-ADOb') -Identity ${uSe`Rh`AnD`Le} -Server ${doM`A`In} -TargetPath ${C`O`Nt`Ainer}
    }
图8: 混淆的样本
应用后：
    param
    (
        [Parameter(MANdAtORy=${FALSE})] ${dOmAiN} = "airtran.com",
        [Parameter(MandatOrY=${trUE})]  ${SrNUMBER},
        [Parameter(mAnDATORY=${FALSE})] ${targETpAth} = "OU=Disabled,OU=Airtran Users,OU=Airtran,DC=airtran,DC=com",
        [Parameter(ManDAtOrY=${TRUe})]  ${user}
    )
    if ("Test-Path" ${USeR})
    {
        ${USERlisT} = "Get-Content" -Path ${uSEr}
    }
    else
    {
        ${usERLISt} = ${UsEr}
    }
    ${coNTAIneR} = "OU=Disabled,OU=Airtran Users,OU=Airtran,DC=airtran,DC=com"
    ${DeSCrIPTIon} = ('Terminated per $SrNumber")
    foreach (${uSeR} in ${USERList})
    {
        "Set-ADUser" -Identity ${UsER} -Server ${DOMAIN} -Enabled ${FALsE} -Description ${DeSCrIPTION}
        ${UsERHandlE} = "Get-ADUser" -Identity ${useR} -Server ${DoMAiN}
        "Move-ADObject" -Identity ${uSeRhAnDLe} -Server ${doMAIn} -TargetPath ${CONtAiner}
    }
图9: 部分反混淆的样本
部分反混淆得到的结果仍然有很多错误， 大多数的模型都是：
    (MAndatoRy=${fAlSe})] ${dOMAiN}
这会让文本更难理解，但没有对PowerShell函数进行混淆。
## 逆向不可逆函数
研究人员使用神经网络来学习和记忆变量：  
以`MOdULEDiRectORy`为例：  
基于对英语和编程的理解，可以找出配置文件，可能包含以下：
    ModuleDirectory
    moduleDirectory
    moduledirectory
为了模拟认知的过程，需要训练Seq2Seq网络。Seq2Seq表示序列到序列，是一种用于机器翻译的网络模型。
Seq2Seq用LSTM来创建编码网络来改变开始的文本，解码网络会使用编码的输出和解码器的内存。将这些结合起来可以一个字母一个字母进行分析并预测输出。研究人员尝试用该网络来翻译整行。因为Seq2Seq网络是基于输入字符和最后一个预测的输出字符来构建输出字符的，因此可以了解输入得出的结果。
输入：
变成：
然后：
最终生成：
为了解决错误的预测结果，研究人员对该问题进行了限制，并将`words`限制到每行来处理：
  1. 找出obf和非obf文件中对应的单词；
  2. 找出可能被混淆的变量和关键词；
  3. 用obf单词作为输入，非obf单词作为期望输出；
  4. 用之前的预测和新的输入数据预测下一个字符。
重新训练的网络得出的结果：
总的来说，运行的结果还是不错的：
# 结合在一起
研究人员将File Status Classifier、Decoder、Deobfuscator和Cleanup网络结合起来打包为一个函数并进行测试：