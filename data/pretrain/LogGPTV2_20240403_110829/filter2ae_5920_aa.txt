> 翻译:CoolCat  
>  原文地址： Into-Unmanaged-Processes>
**本文将详细分析如何注入运行中的.NET 程序，以及如何将任意.NET程序注入到非托管和托管的进程中；并在这些进程中执行托管代码。**
[源代码下载](https://www.codeproject.com/KB/cpp/607352/FrameworkInjection.zip)
# 0x1 简介
.NET
是一种易上手且可靠的编程语言。然而它并不适合用于每个场景。本文将重点介绍了其中一种特殊的情况，即DLL注入。.NET的无法在其运行时在从未加载的远程进程中进行注入。此外，如果.NET运行时要注入的其他进程中，该如何调用.NET
DLL中的方法呢？架构需要考虑么? 64位进程是否不同于32位进程的?本文将展示如何使用文档化的api执行所有这些任务。
### 目标
  * 不考虑架构在任意进程中启动.NET CLR（公共语言运行时）。
  * 在任意进程中加载自定义.NET程序。
  * 在任意进程中执行托管代码。
# 0x2 过程
篇幅问题、文章将分为五小段做精简介绍：
  1. 加载CLR（初级）-介绍如何在非托管进程内部启动.NET Framework。
  2. 加载 CLR（高级）-如何加载自定义.NET 程序集，并从非托管代码中调用受管理的方法。
  3. DLL注入（基础）-介绍如何在远程过程中执行非托管代码。
  4. DLL 注入（高级）-介绍如何在远程进程中执行任意导出的功能。
  5. 综合利用。
**1\. 加载 CLR（初级）**  
目标:写一个可以同时加载运行中的.NET程序和其他任意程序集的非托管程序的程序
示例中将演示如何利用C++程序将运行中.NET加载到自身中：
    #include 
    #pragma comment(lib, "mscoree.lib")
    #import "mscorlib.tlb" raw_interfaces_only \
        high_property_prefixes("_get","_put","_putref") \
        rename("ReportEvent", "InteropServices_ReportEvent")
    int wmain(int argc, wchar_t* argv[])
    {
        char c;
        wprintf(L"Press enter to load the .net runtime...");
        while (getchar() != '\n');  
        HRESULT hr;
        ICLRMetaHost *pMetaHost = NULL;
        ICLRRuntimeInfo *pRuntimeInfo = NULL;
        ICLRRuntimeHost *pClrRuntimeHost = NULL;
        // build runtime
        hr = CLRCreateInstance(CLSID_CLRMetaHost, IID_PPV_ARGS(&pMetaHost));
        hr = pMetaHost->GetRuntime(L"v4.0.30319", IID_PPV_ARGS(&pRuntimeInfo));
        hr = pRuntimeInfo->GetInterface(CLSID_CLRRuntimeHost, 
            IID_PPV_ARGS(&pClrRuntimeHost));
        // start runtime
        hr = pClrRuntimeHost->Start();
        wprintf(L".Net runtime is loaded. Press any key to exit...");
        while (getchar() != '\n');
        return 0;
    }
上述代码需要关注：
  * `CLRCreateInstance`  
指定`CLSID_CLRMetaHost`,获取指向一个实例的指针`ICLRMetaHost`
  * `ICLRMetaHost::GetRuntime`  
获取类型的指针`ICLRRunTimeInfo`指向特定.NET 运行时
  * `ICLRRunTimeInfo::GetInterface`  
将 CLR 加载到当前进程中，然后获取一个`ICLRRuntimeHost`指针
  * `ICLRRuntimeHost::Start`  
显式启动 CLR，在首次加载托管代码时隐式调用 CLR
PS:需要注意，`ICLRMetaHost::GetRuntime`以下版本中中有效
    V1.0.3705
    V1.1.4322
    V2.0.50727
    V4.0.30319
在最新的版本中运行会出现null  
在所需系统上安装运行时 版本号可以在下列两个目录其中之一找到
    %WinDir%\Microsoft.NET\Framework 
    %WinDir%\Microsoft.NET\Framework64
上述代码编译后在Process Hacker控制台中运行可以看到的:  
回车后，可以通过 Process Hacker看到.NET运行时已加载。请注意 “properties” （属性）窗口中 “.NET Performance
”（.NET偏好）选项  
示例代码未打包。建议读者自行动手编译并运行。  
**2\. 加载 CLR（高级）**  
完成初级的加载 CLR后，下一步是将任意的.NET程序集加载到其他进程中，并调用.NET中的方法。
继续修改上面的示例，把CLR加载到进程中。可以通过获得一个指向CLR接口的指针来实现;该指针存储在变量`pClrRuntimeHost`中。使其调用`ICLRRuntimeHost::Start`将CLR加载到进程中。
此时CLR已经初始化，`pClrRuntimeHost`可以调用`ICLRRuntimeHost::ExecuteInDefaultAppDomain`来加载和调用任意.NRY程序中的方法。该函数具有以下签名:
    HRESULT ExecuteInDefaultAppDomain (
        [in] LPCWSTR pwzAssemblyPath,
        [in] LPCWSTR pwzTypeName, 
        [in] LPCWSTR pwzMethodName,
        [in] LPCWSTR pwzArgument,
        [out] DWORD *pReturnValue
    );
参数说明:
  * `pwzAssemblyPath`：  
.NET程序的完整路径;这里可以是exe或dll文件
  * `pwzTypeName` ： 要调用的方法的完整类名
  * `pwzMethodName`： 要调用的方法的名称
  * `pwzArgument`： 可选的参数传递到方法中
  * `pReturnValue`： 方法的返回值
并不是.NET程序中的每个方法都可以通过`ICLRRuntimeHost::ExecuteInDefaultAppDomain`来调用。可用的方法必须具有以下签名:
    static int pwzMethodName (String pwzArgument);
补充说明：访问修饰符(如`public`、`protected`、`private`和`internal`)不会影响方法的可见性;因此，被排除在签名之外。
下面的.NET程序将被用于接下来的所有示例，用于注入到托管进程.NET程序:
    using System;
    using System.Windows.Forms;
    namespace InjectExample
    {
        public class Program
        {
            static int EntryPoint(String pwzArgument)
            {
                System.Media.SystemSounds.Beep.Play();
                MessageBox.Show(
                    "I am a managed app.\n\n" + 
                    "I am running inside: [" + 
                    System.Diagnostics.Process.GetCurrentProcess().ProcessName + 
                    "]\n\n" + (String.IsNullOrEmpty(pwzArgument) ? 
                    "I was not given an argument" : 
                    "I was given this argument: [" + pwzArgument + "]"));
                return 0;
            }
            static void Main(string[] args)
            {
                EntryPoint("hello world");
            }
        }
    }
上面的示例代码的编法可以选择调用`ICLRRuntimeHost::ExecuteInDefaultAppDomain`，也可以独立运行;两种方法运行的结果都差不多。最终目标是当注入到非托管远程进程中时，上面的示例代码在该进程的上下文中执行，并显示显示远程进程名称的消息框。
在初级部分示例代码的基础上，下面的c++程序将加载上面的.NET程序并执行EntryPoint方法:
    #include 
    #pragma comment(lib, "mscoree.lib")
    #import "mscorlib.tlb" raw_interfaces_only \
        high_property_prefixes("_get","_put","_putref") \
        rename("ReportEvent", "InteropServices_ReportEvent")
    int wmain(int argc, wchar_t* argv[])
    {
        HRESULT hr;
        ICLRMetaHost *pMetaHost = NULL;
        ICLRRuntimeInfo *pRuntimeInfo = NULL;
        ICLRRuntimeHost *pClrRuntimeHost = NULL;
        // build runtime
        hr = CLRCreateInstance(CLSID_CLRMetaHost, IID_PPV_ARGS(&pMetaHost));
        hr = pMetaHost->GetRuntime(L"v4.0.30319", IID_PPV_ARGS(&pRuntimeInfo));
        hr = pRuntimeInfo->GetInterface(CLSID_CLRRuntimeHost, 
            IID_PPV_ARGS(&pClrRuntimeHost));
        // start runtime
        hr = pClrRuntimeHost->Start();
        // execute managed assembly
        DWORD pReturnValue;
        hr = pClrRuntimeHost->ExecuteInDefaultAppDomain(
            L"T:\\FrameworkInjection\\_build\\debug\\anycpu\\InjectExample.exe", 
            L"InjectExample.Program", 
            L"EntryPoint", 
            L"hello .net runtime", 
            &pReturnValue);
        // free resources
        pMetaHost->Release();
        pRuntimeInfo->Release();
        pClrRuntimeHost->Release();
        return 0;
    }
运行结果如图所示:  
到目前为止，这部分的两个目标都已实现。现在我们将继续尝试如何从非托管代码中加载CLR并执行任意方法。但是如何在任意过程中实现呢?
**3\. DLL注入（初级）**  
DLL注入是一种在远程进程中加载DLL来执行远程进程内部代码的技术。很多DLL注入策略集中于DllMain内部的代码执行。缺陷是从DllMain中启动CLR会导致Windows加载器锁死。写一个在DllMain中启动CLR的DLL就可以验证。参考以下MSDN文章:
  * [loaderLock MDA](http://msdn.microsoft.com/en-us/library/ms172219\(v=VS.100).aspx)
  * [Initialization of Mixed Assemblies](http://msdn.microsoft.com/en-us/library/ms173266.aspx)
  * [Preventing Hangs in Windows Applications](http://msdn.microsoft.com/en-us/library/windows/desktop/dd744765\(v=vs.85).aspx)
难以避免的是当Windows加载程序初始化另一个模块时，CLR无法启动。每个锁都是特定于进程的，由Windows托管且一个锁已经被获取时，任何试图在加载器上获取多个锁的模块都会锁死。
上述关于问题似乎很麻烦;那么我们将问题分解开来，比如从将一个最起码的DLL注入到远程进程中作为开始。示例代码:
    #define WIN32_LEAN_AND_MEAN
    #include 
    BOOL APIENTRY DllMain(HMODULE hModule, DWORD  ul_reason_for_call, LPVOID lpReserved)
    {
        switch (ul_reason_for_call)
        {
        case DLL_PROCESS_ATTACH:
        case DLL_THREAD_ATTACH:
        case DLL_THREAD_DETACH:
        case DLL_PROCESS_DETACH:
            break;
        }
        return TRUE;
    }
上面的代码实现了一个简单的DLL。要想把这个DLL注入到远程进程中，需要以下Windows api:
  * `OpenProcess`：获取进程的句柄
  * `GetModuleHandle`：获取给定模块的句柄
  * `LoadLibrary`：在调用进程的地址空间中加载库
  * `GetProcAddress`：从库中获取导出函数的虚拟地址
  * `VirtualAllocEx`：在给定进程中分配空间
  * `WriteProcessMemory`：在给定地址将字节写入进程
  * `CreateRemoteThread`：在远程进程中派生一个线程
    DWORD_PTR Inject(const HANDLE hProcess, const LPVOID function, 
        const wstring& argument)
    {
        // allocate some memory in remote process
        LPVOID baseAddress = VirtualAllocEx(hProcess, NULL, GetStringAllocSize(argument), 
            MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
        // write argument into remote process   
        BOOL isSucceeded = WriteProcessMemory(hProcess, baseAddress, argument.c_str(), 
            GetStringAllocSize(argument), NULL);
        // make the remote process invoke the function
        HANDLE hThread = CreateRemoteThread(hProcess, NULL, 0, 
            (LPTHREAD_START_ROUTINE)function, baseAddress, NULL, 0);
        // wait for thread to exit
        WaitForSingleObject(hThread, INFINITE);
        // free memory in remote process
        VirtualFreeEx(hProcess, baseAddress, 0, MEM_RELEASE);
        // get the thread exit code
        DWORD exitCode = 0;
        GetExitCodeThread(hThread, &exitCode);
        // close thread handle
        CloseHandle(hThread);
        // return the exit code
        return exitCode;
    }
本节的目的是在远程进程中加载库。下一个问题是如何利用上述函数在远程进程中注入DLL
?假设kernel32.dll映射在每个进程的地址空间内。LoadLibrary是kernel32的导出函数。它有一个与`LPTHREAD_START_ROUTINE`匹配的函数签名，所以它可以作为开始例程传递给CreateRemoteThread。LoadLibrary的目的是在调用进程的地址空间中加载一个库，而CreateRemoteThread的目的是在远程进程中生成一个线程。下面的代码片段演示了如何在进程id为2432的程序内部加载我们的测试DLL:
    // get handle to remote process with PID 2432
    HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, 2432);
    // get address of LoadLibrary