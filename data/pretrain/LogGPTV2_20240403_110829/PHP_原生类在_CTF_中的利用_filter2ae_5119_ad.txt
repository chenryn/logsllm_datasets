### 优化后的文本

SPL（Standard PHP Library）是一组旨在解决常见问题的接口和类的集合。根据官方文档，SPL扩展了PHP引擎的功能，提供了如 `ArrayAccess`、`Countable` 和 `SeekableIterator` 等接口，这些接口使得对象可以像数组一样进行操作。此外，SPL还包含了一些迭代器，例如 `RecursiveIterator` 和 `ArrayObject`，用于数据遍历。它还提供了一系列内置的对象和辅助函数，如 `Exceptions`、`SplObserver`、`SplStorage` 以及 `spl_autoload_register`、`spl_classes` 和 `iterator_apply` 等，以实现特定功能的重载。整体而言，SPL就像是一个多功能工具箱，合理利用它可以显著提高PHP代码的质量和效率。

由于SPL致力于处理典型问题，因此包含了一些专门用于文件处理的类。接下来，我们将简要介绍几种常用的SPL文件处理原生类，并在后续章节中补充更多内容。

#### 可遍历目录类
以下是几个可遍历目录的类：
- `DirectoryIterator` 类
- `FilesystemIterator` 类
- `GlobIterator` 类

##### DirectoryIterator 类
`DirectoryIterator` 提供了一个简单接口来查看文件系统中的目录内容。该类的构造函数会创建一个指向指定目录的迭代器。
**类摘要：**
```php
class DirectoryIterator extends SplFileInfo implements SeekableIterator {
    // 构造方法
    public function __construct(string $path);
    
    // 其他常用方法
    public function current(): DirectoryIterator;
    public function getATime(): int;
    public function getBasename(?string $suffix = null): string;
    public function getCTime(): int;
    public function getExtension(): string;
    public function getFilename(): string;
    public function getGroup(): int;
    public function getInode(): int;
    public function getMTime(): int;
    public function getOwner(): int;
    public function getPath(): string;
    public function getPathname(): string;
    public function getPerms(): int;
    public function getSize(): int;
    public function getType(): string;
    public function isDir(): bool;
    public function isDot(): bool;
    public function isExecutable(): bool;
    public function isFile(): bool;
    public function isLink(): bool;
    public function isReadable(): bool;
    public function isWritable(): bool;
    public function key(): string;
    public function next(): void;
    public function rewind(): void;
    public function seek(int $position): void;
    public function __toString(): string; // 以字符串形式获取文件名
    public function valid(): bool;
}
```
**示例：使用 DirectoryIterator 遍历目录**
```php
$dir = new DirectoryIterator('/path/to/directory');
foreach ($dir as $file) {
    if (!$file->isDot()) {
        echo $file . "\n";
    }
}
```

##### FilesystemIterator 类
`FilesystemIterator` 类与 `DirectoryIterator` 类相似，也提供了一个简单的接口来查看文件系统中的目录内容。其用法与 `DirectoryIterator` 类基本相同。
**示例：使用 FilesystemIterator 遍历目录**
```php
$dir = new FilesystemIterator('/path/to/directory');
foreach ($dir as $file) {
    if (!$file->isDot()) {
        echo $file . "\n";
    }
}
```

##### GlobIterator 类
`GlobIterator` 类类似于前两个类，但其行为类似于 `glob()` 函数，可以通过模式匹配来查找文件路径。
**类摘要：**
```php
class GlobIterator extends FilesystemIterator implements SeekableIterator, Countable {
    // 构造方法
    public function __construct(string $pattern, int $flags = FilesystemIterator::KEY_AS_PATHNAME | FilesystemIterator::CURRENT_AS_FILEINFO);
    
    // 其他常用方法
    public function count(): int;
    // 继承自 FilesystemIterator 的方法
    public function current(): mixed;
    public function getFlags(): int;
    public function key(): string;
    public function next(): void;
    public function rewind(): void;
    public function setFlags(?int $flags): void;
}
```
**示例：使用 GlobIterator 遍历目录**
```php
$dir = new GlobIterator('/path/to/directory/*');
foreach ($dir as $file) {
    echo $file . "\n";
}
```

#### 可读取文件类
目前发现的可读取文件类包括：
- `SplFileObject` 类

##### SplFileObject 类
`SplFileObject` 类为单个文件的信息提供了一个高级的面向对象接口，可用于文件内容的遍历、查找和操作等。
**示例：使用 SplFileObject 读取文件**
```php
$file = new SplFileObject('/path/to/file.txt');
while (!$file->eof()) {
    echo $file->fgets();
}
```

通过合理使用这些SPL提供的类，我们可以更高效地处理文件和目录，从而提升PHP应用程序的整体性能。