china-blocks-vpn-services-let-internet-users-get-\around-censorship. Online
Article.
Internet users
that
get
let
[12] Roger Dingledine and Nick Mathewson. Design of a Blocking-Resistant
https://svn.torproject.org/svn/projects/design-paper/
Anonymity System.
blocking.html.
[13] Roger Dingledine, Nick Mathewson, and Paul Syverson. 2004. Tor: The Second-
generation Onion Router. In USENIX Security.
[14] Kevin P Dyer, Scott E Coull, Thomas Ristenpart, and Thomas Shrimpton. 2013.
Protocol misidentification made easy with format-transforming encryption. In
ACM CCS. ACM, 61–72.
[15] Daniel Ellard, Christine Jones, Victoria Manfredi, W Timothy Strayer, Bishal
Thapa, Megan Van Welie, and Alden Jackson. 2015. Rebound: Decoy routing on
asymmetric routes via error messages. In Local Computer Networks (LCN), 2015
IEEE 40th Conference on. IEEE, 91–99.
[16] Roya Ensafi, Philipp Winter, Abdullah Mueen, and Jedidiah R Crandall. 2015.
Analyzing the Great Firewall of China over space and time. PoPETs 2015, 1 (2015),
61–76.
[17] David Fifield, Chang Lan, Rod Hynes, Percy Wegmann, and Vern Paxson. 2015.
Blocking-resistant Communication through Domain Fronting. In PETS.
[18] John Geddes, Max Schuchard, and Nicholas Hopper. 2013. Cover your ACKs:
Pitfalls of covert channel censorship circumvention. In ACM CCS. ACM, 361–372.
[19] John Holowczak and Amir Houmansadr. 2015. CacheBrowser: Bypassing Chinese
Censorship without Proxies Using Cached Content. In ACM CCS.
[20] Amir Houmansadr, Chad Brubaker, and Vitaly Shmatikov. 2013. The Parrot is
Dead: Observing Unobservable Network Communications. In IEEE S&P.
[21] Amir Houmansadr, Giang TK Nguyen, Matthew Caesar, and Nikita Borisov. 2011.
Cirripede: Circumvention Infrastructure Using Router Redirection with Plausible
Deniability. In ACM CCS.
[22] Amir Houmansadr, Edmund L Wong, and Vitaly Shmatikov. 2014. No Direction
Home: The True Cost of Routing Around Decoys. In NDSS.
[23] Amir Houmansadr, Wenxuan Zhou, Matthew Caesar, and Nikita Borisov. 2017.
SWEET: Serving the Web by Exploiting Email Tunnels. IEEE/ACM Transactions
on Networking 25, 3 (June 2017), 1517–1527.
[24] Jeffrey Jia and Patrick Smith. Psiphon: Analysis and Estimation. http://www.cdf.
toronto.edu/~csc494h/reports/2004-fall/psiphon_ae.html.
[25] Josh Karlin, Daniel Ellard, Alden W Jackson, Christine E Jones, Greg Lauer,
David P Mankins, and W Timothy Strayer. 2011. Decoy routing: Toward unblock-
able internet communication. In USENIX FOCI.
[26] Ethan Katz-Bassett, Harsha V Madhyastha, Vijay Kumar Adhikari, Colin Scott,
Justine Sherry, Peter Van Wesep, Thomas E Anderson, and Arvind Krishnamurthy.
2010. Reverse traceroute. In NSDI, Vol. 10. 219–234.
[27] Ethan Katz-Bassett, Colin Scott, David R Choffnes, Ítalo Cunha, Vytautas Valan-
cius, Nick Feamster, Harsha V Madhyastha, Thomas Anderson, and Arvind
Krishnamurthy. 2012. LIFEGUARD: Practical repair of persistent route failures.
ACM SIGCOMM Computer Communication Review 42, 4 (2012), 395–406.
[28] Sheharbano Khattak, Laurent Simon, and Steven J Murdoch. 2014. Systemization
of Pluggable Transports for Censorship Resistance. arXiv preprint arXiv:1412.7448
(2014).
[29] Donghyun Kim, Glenn R Frye, Sung-Sik Kwon, Hyung Jae Chang, and Alade O
Tokuta. 2013. On combinatoric approach to circumvent internet censorship using
decoy routers. In MILCOM.
[30] Lantern. https://getlantern.org/.
[31] Christopher S. Leberknight, Mung Chiang, and Felix Ming Fai Wong. 2012. A
Taxonomy of Censors and Anti-Censors Part II: Anti-Censorship Technologies.
Int. J. E-Polit. 3, 4 (Oct. 2012), 20–35. https://doi.org/10.4018/jep.2012100102
[32] Colin Lecher. How Iran Censors The Internet.
http://www.popsci.com/
technology/article/2013-03/how-iran-censors-internet-infographic. Online Arti-
cle.
Internet
Lecher.
in
Turkey.
els
internet-censorship-reaching-dangerous-levels-in-turkey_393727.html.
Online Article.
censorship
lev-
http://www.todayszaman.com/national_
dangerous
reaching
[34] Matthew Lepinski. 2015. BGPSEC protocol specification. (2015).
[35] Zhen Ling, Junzhou Luo, Wei Yu, Ming Yang, and Xinwen Fu. 2012. Exten-
sive analysis and large-scale empirical evaluation of Tor bridge discovery. In
INFOCOM. IEEE, 2381–2389.
[36] Frank J Massey Jr. 1951. The Kolmogorov-Smirnov test for goodness of fit. Journal
[33] Colin
of the American statistical Association 46, 253 (1951), 68–78.
[37] MaxMind GeoIP Databases & Services: Industry Leading IP Intelligence. http:
//www.maxmind.com.
meek.
[38] meek Pluggable Transport. https://trac.torproject.org/projects/tor/wiki/doc/
[39] Summary of meek’s costs, July 2016. https://lists.torproject.org/pipermail/
tor-project/2016-August/000690.html.
[40] Steven J Murdoch and Stephen Lewis. 2005. Embedding covert channels into
TCP/IP. In International Workshop on Information Hiding. Springer, 247–261.
[41] Milad Nasr and Amir Houmansadr. 2016. GAME OF DECOYS: Optimal Decoy
Routing Through Game Theory. In ACM CCS. 1727–1738.
[42] Daiyuu Nobori and Yasushi Shinjo. 2014. VPN Gate: A Volunteer-Organized
Public VPN Relay System with Blocking Resistance for Bypassing Government
Censorship Firewalls.. In NSDI. 229–241.
[43] Vasile C Perta, Marco V Barbera, Gareth Tyson, Hamed Haddadi, and Alessandro
Mei. 2015. A glance through the VPN looking glass: IPv6 leakage and DNS
hijacking in commercial VPN clients. PoPETs 2015, 1 (2015), 77–91.
[44] PhantomJS, scripted headless browser. http://phantomjs.org/.
[45] Bruno Quoitin and Steve Uhlig. 2005. Modeling the routing of an autonomous
system with C-BGP. Network, IEEE 19, 6 (2005), 12–19.
[46] Phil Sands. Syria Tightens Control over Internet. http://www.thenational.ae/
news/world/middle-east/syria-tightens-control-over-internet. Online Article.
[47] Scapy, Python Packet Manipulation Library. https://github.com/secdev/scapy.
[48] Max Schuchard, John Geddes, Christopher Thompson, and Nicholas Hopper.
2012. Routing around decoys. In ACM CCS.
[49] Selenium, browser automator. http://www.seleniumhq.org/.
[50] Michael Carl Tschantz, Sadia Afroz, Vern Paxson, et al. 2016. SoK: Towards
Grounding Censorship Circumvention in Empiricism. In IEEE S&P. 914–933.
[51] Michael Tuexen, Robin Seggelmann, and Michael Williams. 2012. Transport
Layer Security (TLS) and Datagram Transport Layer Security (DTLS) Heartbeat
Extension. Transport (2012).
[52] Twisted, Python Networking Framework. https://twistedmatrix.com/trac/.
[53] Tao Wan and Paul C Van Oorschot. 2006. Analysis of BGP prefix origins during
Google’s May 2005 outage. In IPDPS. IEEE, 8–pp.
[54] Liang Wang, Kevin P Dyer, Aditya Akella, Thomas Ristenpart, and Thomas
Shrimpton. 2015. Seeing through network-protocol obfuscation. In ACM CCS.
57–69.
[55] Waterfall’s Implementation. https://github.com/ha-D/waterfall.
[56] Tim Wilde. Knock Knock Knockin’ on Bridges’ Doors. https://blog.torproject.
org/blog/knock-knock-knockin-bridges-doors.
[57] Philipp Winter and Stefan Lindskog. 2012. How the Great Firewall of China Is
Blocking Tor. In FOCI.
[58] Eric Wustrow, Colleen M Swanson, and J Alex Halderman. 2014. TapDance:
End-to-middle anticensorship without flow blocking. In USENIX Security.
[59] Eric Wustrow, Scott Wolchok, Ian Goldberg, and J Alex Halderman. 2011. Telex:
Anticensorship in the Network Infrastructure.. In USENIX Security.
[60] Zheng Zhang, Ying Zhang, Y Charlie Hu, and Z Morley Mao. 2007. Practical
defenses against BGP prefix hijacking. In ACM CoNEXT. ACM, 3.
[61] Hadi Zolfaghari and Amir Houmansadr. 2016. Practical Censorship Evasion
Leveraging Content Delivery Networks. In ACM CCS.
Session I5:  Communication PrivacyCCS’17, October 30-November 3, 2017, Dallas, TX, USA2050A STEP-BY-STEP OPERATION OF OUR
WATERFALL IMPLEMENTATION
In Section 8.1 we overviewed the main components of our im-
plementation of Waterfall. To better illustrate the details of our
implementation we will go through the steps taken for a browser
to access a given censored website, covert.com, using the non-
censored website overt.com as the overt destination.
Waterfall Startup
(1) The client establishes a TLS connection to overt.com using
a pre-negotiated nonce value.
(2) The HTTP Redirect channel is selected to be used for sending
upstream covert data for this overt destination.
Establishing a Tunnel
(3) The browser connects to the SOCKS server requesting to cre-
ate a tunnel to covert.com. A new CCH (Covert Connection
Handler) is created for this connection.
(4) The CCH creates a new covert message, cm1, which contains
a command to establish a new tunnel with covert.com. It
forwards the message to the overt connection component.
(5) The overt connection buffers the covert message in the up-
stream buffer.
(6) The OUS sends an HTTP request for the homepage of overt.com.
(7) The overt channel receives the overt request and observes
that there is data available in the upstream buffer. It reads
the message cm1 from the buffer and replaces the overt re-
quest with a request to https://overt.com/. It then
sends the new HTTP request on the overt connection.
(8) The overt website’s server responds with an HTTP 301 mes-
sage asking the user to redirect to www.overt.com/.
(9) The decoy router intercepts and observes a covert message
in the HTTP response. It reads the message and creates a
tunnel to covert.com as instructed. The decoy router also
assigns an identifier to the tunnel, which the client may use
later to specify which tunnel it wishes to send data on.
(10) Once the client receives the tunnel’s identifier, the CCH noti-
fies the browser that the tunnel has been successfully created
and it may start sending upstream data.
Sending Covert Upstream Data
(11) The user makes a request for the covert.com homepage in
the browser.
(12) The CCH receives the TCP data for this request. It creates
a covert message cm2 containing the request data and the
identifier of the tunnel. It forwards the message to the Overt
Connection that buffers the message in the upstream buffer.
(13) The OUS sends an HTTP request for an object in overt.com.
The overt channel replaces the request with a request to
overt.com/.
(14) The overt website responds with a redirect allowing again
for the decoy router to receive the covert message cm2. The
decoy router reads the upstream TCP data from the message
and forwards it on the specified tunnel to covert.com.
Receiving Downstream Data
(15) The covert website receives the client’s request through the
tunnel and sends the response back to the decoy router. The
decoy router buffers the response.
(16) The OUS sends a request for an image in overt.com and the
overt channel forwards the request on the overt connection
without any modification.
(17) The overt destination responds with an HTTP response con-
taining the image data. The decoy router intercepts this
response and replaces the image data with buffered down-
stream data received from covert.com.
(18) The client receives the HTTP response, but instead of con-
taining image data it contains covert downstream data. The
CCH sends this downstream data to the browser over the
SOCKS connection.
B SAMPLE WEBSITE-SPECIFIC OVERT
CHANNEL IMPLEMENTATION
The following is an example covert channel class implementation
for using Google as the overt destination with HTTP Redirects. The
make_message method is used by the Waterfall client to create
a request containing covert data which will be responded with a
HTTP 301 Redirect from the Google server. The extract_message
is used by the decoy router to extract the covert data embedded in
the HTTP Redirect response received from the overt website.
c l a s s GoogleRedirectChannel :
host = "google.com"
p r e f i x = "/ waterfall "
def make_message ( s e l f , overt_req ,
c o v e r t _ b u f ) :
l e n g t h = s e l f . c a l c _ c o v e r t _ l e n g t h ( o v e r t _ r e q )
data = c o v e r t _ b u f . read ( l e n g t h )
encoded_data = base64 . b64encode ( data )
r e q u e s t = Request ( )
r e q u e s t . s e t _ p a t h ( s e l f . p r e f i x + encoded_data )
r e q u e s t . s e t _ h e a d e r ( "Host" ,
s e l f . host )
return r e q u e s t
def e x t r a c t _ m e s s a g e ( s e l f ,
r e q u e s t ) :
l o c = r e q u e s t . get_header ( " Location " )
reg = re . se arc h ( "%s/(.+)" % s e l f . p r e f i x ,
data = reg . group ( 1 )
return data
l o c )
C POTENTIAL QUESTIONS
Here we present some of the useful questions raised during the
reviwing process.
What if the censors disrupt Waterfall’s registration by block-
ing Waterfall email messages? First, previous work [23] has
studied censorship resistant emails that can be leveraged by Wa-
terfall. Second, as discussed earlier, Waterfall registration does not
fundamentally depend on emails, and any latency-insensitive chan-
nel can be used for its registration (one can even deploy multiple
registration mechanisms in parallel). Given the small size of reg-
istration packages, Waterfall operators can even set up a resilient
Session I5:  Communication PrivacyCCS’17, October 30-November 3, 2017, Dallas, TX, USA2051Domain Fronting [17] registration server at very low operational
costs.
Can censors disable Waterfall by normalizing TCP ISN fields?
We believe no! First, the use of ISNs only helps the decoy routers to
filter out non-Waterfall traffic to reduce their traffic loads. Even if
we eliminate ISNs from its design, Waterfall will still work: decoy
routers will have to check every connection of a registered user
to identify and serve Waterfall connections, as opposed to doing
so only for flows the with specific, registered ISNs. Second, we
believe that normalizing ISNs at large scale (e.g., by China) is not
practical. As the upstream and downstream flows of a connection
may take asymmetric routes, censoring ASes will need to share the
ISN mappings for different flows among themselves in real-time.
Does a Waterfall client need to frequently probe for proper
overt destinations? Would not this affect unobservability?
Previous work [21] shows that the number of probes needed to
identify such overt destinations is reasonably small. Also, given that
routes do not change frequently, identified overt destinations can
be used for long intervals. The Waterfall client software can also
include a BGP path simulator to infer potential overt destinations,
therefore minimizing the number of such probes. Nonetheless, this
is not specific to Waterfall and applies to all decoy routing systems.
Session I5:  Communication PrivacyCCS’17, October 30-November 3, 2017, Dallas, TX, USA2052