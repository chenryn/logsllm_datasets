# China Blocks VPN Services: Internet Users Seek Ways to Circumvent Censorship

## Online Article

### Introduction
Internet users in China are facing increasing challenges as the government tightens its control over the internet. One of the primary methods used by the government to enforce this control is through the blocking of Virtual Private Network (VPN) services, which many users rely on to access censored content. This article explores various techniques and technologies that can help users circumvent these restrictions.

### Related Research

1. **Roger Dingledine and Nick Mathewson.** "Design of a Blocking-Resistant Anonymity System." [Link](https://svn.torproject.org/svn/projects/design-paper/blocking.html)
2. **Roger Dingledine, Nick Mathewson, and Paul Syverson.** "Tor: The Second-Generation Onion Router." In USENIX Security, 2004.
3. **Kevin P Dyer, Scott E Coull, Thomas Ristenpart, and Thomas Shrimpton.** "Protocol Misidentification Made Easy with Format-Transforming Encryption." In ACM CCS, 2013, pp. 61–72.
4. **Daniel Ellard, Christine Jones, Victoria Manfredi, W Timothy Strayer, Bishal Thapa, Megan Van Welie, and Alden Jackson.** "Rebound: Decoy Routing on Asymmetric Routes via Error Messages." In IEEE 40th Conference on Local Computer Networks (LCN), 2015, pp. 91–99.
5. **Roya Ensafi, Philipp Winter, Abdullah Mueen, and Jedidiah R Crandall.** "Analyzing the Great Firewall of China over Space and Time." PoPETs 2015, 1 (2015), pp. 61–76.
6. **David Fifield, Chang Lan, Rod Hynes, Percy Wegmann, and Vern Paxson.** "Blocking-Resistant Communication through Domain Fronting." In PETS, 2015.
7. **John Geddes, Max Schuchard, and Nicholas Hopper.** "Cover Your ACKs: Pitfalls of Covert Channel Censorship Circumvention." In ACM CCS, 2013, pp. 361–372.
8. **John Holowczak and Amir Houmansadr.** "CacheBrowser: Bypassing Chinese Censorship without Proxies Using Cached Content." In ACM CCS, 2015.
9. **Amir Houmansadr, Chad Brubaker, and Vitaly Shmatikov.** "The Parrot is Dead: Observing Unobservable Network Communications." In IEEE S&P, 2013.
10. **Amir Houmansadr, Giang TK Nguyen, Matthew Caesar, and Nikita Borisov.** "Cirripede: Circumvention Infrastructure Using Router Redirection with Plausible Deniability." In ACM CCS, 2011.
11. **Amir Houmansadr, Edmund L Wong, and Vitaly Shmatikov.** "No Direction Home: The True Cost of Routing Around Decoys." In NDSS, 2014.
12. **Amir Houmansadr, Wenxuan Zhou, Matthew Caesar, and Nikita Borisov.** "SWEET: Serving the Web by Exploiting Email Tunnels." IEEE/ACM Transactions on Networking 25, 3 (June 2017), pp. 1517–1527.
13. **Jeffrey Jia and Patrick Smith.** "Psiphon: Analysis and Estimation." [Link](http://www.cdf.toronto.edu/~csc494h/reports/2004-fall/psiphon_ae.html)
14. **Josh Karlin, Daniel Ellard, Alden W Jackson, Christine E Jones, Greg Lauer, David P Mankins, and W Timothy Strayer.** "Decoy Routing: Toward Unblockable Internet Communication." In USENIX FOCI, 2011.
15. **Ethan Katz-Bassett, Harsha V Madhyastha, Vijay Kumar Adhikari, Colin Scott, Justine Sherry, Peter Van Wesep, Thomas E Anderson, and Arvind Krishnamurthy.** "Reverse Traceroute." In NSDI, Vol. 10, 2010, pp. 219–234.
16. **Ethan Katz-Bassett, Colin Scott, David R Choffnes, Ítalo Cunha, Vytautas Valancius, Nick Feamster, Harsha V Madhyastha, Thomas Anderson, and Arvind Krishnamurthy.** "LIFEGUARD: Practical Repair of Persistent Route Failures." ACM SIGCOMM Computer Communication Review 42, 4 (2012), pp. 395–406.
17. **Sheharbano Khattak, Laurent Simon, and Steven J Murdoch.** "Systemization of Pluggable Transports for Censorship Resistance." arXiv preprint arXiv:1412.7448 (2014).
18. **Donghyun Kim, Glenn R Frye, Sung-Sik Kwon, Hyung Jae Chang, and Alade O Tokuta.** "On Combinatoric Approach to Circumvent Internet Censorship Using Decoy Routers." In MILCOM, 2013.
19. **Lantern.** [Link](https://getlantern.org/)
20. **Christopher S. Leberknight, Mung Chiang, and Felix Ming Fai Wong.** "A Taxonomy of Censors and Anti-Censors Part II: Anti-Censorship Technologies." Int. J. E-Polit. 3, 4 (Oct. 2012), pp. 20–35. [Link](https://doi.org/10.4018/jep.2012100102)
21. **Colin Lecher.** "How Iran Censors The Internet." [Link](http://www.popsci.com/technology/article/2013-03/how-iran-censors-internet-infographic)
22. **Colin Lecher.** "Internet Censorship Reaching Dangerous Levels in Turkey." [Link](http://www.todayszaman.com/national_internet-censorship-reaching-dangerous-levels-in-turkey_393727.html)
23. **Matthew Lepinski.** "BGPSEC Protocol Specification." 2015.
24. **Zhen Ling, Junzhou Luo, Wei Yu, Ming Yang, and Xinwen Fu.** "Extensive Analysis and Large-Scale Empirical Evaluation of Tor Bridge Discovery." In INFOCOM, 2012, pp. 2381–2389.
25. **Frank J Massey Jr.** "The Kolmogorov-Smirnov Test for Goodness of Fit." Journal of the American Statistical Association 46, 253 (1951), pp. 68–78.
26. **MaxMind GeoIP Databases & Services: Industry Leading IP Intelligence.** [Link](http://www.maxmind.com)
27. **meek Pluggable Transport.** [Link](https://trac.torproject.org/projects/tor/wiki/doc/meek)
28. **Summary of meek’s costs, July 2016.** [Link](https://lists.torproject.org/pipermail/tor-project/2016-August/000690.html)
29. **Steven J Murdoch and Stephen Lewis.** "Embedding Covert Channels into TCP/IP." In International Workshop on Information Hiding, 2005, pp. 247–261.
30. **Milad Nasr and Amir Houmansadr.** "GAME OF DECOYS: Optimal Decoy Routing Through Game Theory." In ACM CCS, 2016, pp. 1727–1738.
31. **Daiyuu Nobori and Yasushi Shinjo.** "VPN Gate: A Volunteer-Organized Public VPN Relay System with Blocking Resistance for Bypassing Government Censorship Firewalls." In NSDI, 2014, pp. 229–241.
32. **Vasile C Perta, Marco V Barbera, Gareth Tyson, Hamed Haddadi, and Alessandro Mei.** "A Glance Through the VPN Looking Glass: IPv6 Leakage and DNS Hijacking in Commercial VPN Clients." PoPETs 2015, 1 (2015), pp. 77–91.
33. **PhantomJS, Scripted Headless Browser.** [Link](http://phantomjs.org/)
34. **Bruno Quoitin and Steve Uhlig.** "Modeling the Routing of an Autonomous System with C-BGP." Network, IEEE 19, 6 (2005), pp. 12–19.
35. **Phil Sands.** "Syria Tightens Control over Internet." [Link](http://www.thenational.ae/news/world/middle-east/syria-tightens-control-over-internet)
36. **Scapy, Python Packet Manipulation Library.** [Link](https://github.com/secdev/scapy)
37. **Max Schuchard, John Geddes, Christopher Thompson, and Nicholas Hopper.** "Routing around Decoys." In ACM CCS, 2012.
38. **Selenium, Browser Automator.** [Link](http://www.seleniumhq.org/)
39. **Michael Carl Tschantz, Sadia Afroz, Vern Paxson, et al.** "SoK: Towards Grounding Censorship Circumvention in Empiricism." In IEEE S&P, 2016, pp. 914–933.
40. **Michael Tuexen, Robin Seggelmann, and Michael Williams.** "Transport Layer Security (TLS) and Datagram Transport Layer Security (DTLS) Heartbeat Extension." Transport (2012).
41. **Twisted, Python Networking Framework.** [Link](https://twistedmatrix.com/trac/)
42. **Tao Wan and Paul C Van Oorschot.** "Analysis of BGP Prefix Origins during Google’s May 2005 Outage." In IPDPS, 2006, pp. 8–pp.
43. **Liang Wang, Kevin P Dyer, Aditya Akella, Thomas Ristenpart, and Thomas Shrimpton.** "Seeing through Network-Protocol Obfuscation." In ACM CCS, 2015, pp. 57–69.
44. **Waterfall’s Implementation.** [Link](https://github.com/ha-D/waterfall)
45. **Tim Wilde.** "Knock Knock Knockin’ on Bridges’ Doors." [Link](https://blog.torproject.org/blog/knock-knock-knockin-bridges-doors)
46. **Philipp Winter and Stefan Lindskog.** "How the Great Firewall of China Is Blocking Tor." In FOCI, 2012.
47. **Eric Wustrow, Colleen M Swanson, and J Alex Halderman.** "TapDance: End-to-Middle Anticensorship without Flow Blocking." In USENIX Security, 2014.
48. **Eric Wustrow, Scott Wolchok, Ian Goldberg, and J Alex Halderman.** "Telex: Anticensorship in the Network Infrastructure." In USENIX Security, 2011.
49. **Zheng Zhang, Ying Zhang, Y Charlie Hu, and Z Morley Mao.** "Practical Defenses against BGP Prefix Hijacking." In ACM CoNEXT, 2007, p. 3.
50. **Hadi Zolfaghari and Amir Houmansadr.** "Practical Censorship Evasion Leveraging Content Delivery Networks." In ACM CCS, 2016.

### Waterfall Implementation

#### Overview
In Section 8.1, we provided an overview of the main components of our Waterfall implementation. To better illustrate the details, we will walk through the steps taken for a browser to access a censored website, `covert.com`, using a non-censored website, `overt.com`, as the overt destination.

#### Waterfall Startup
1. **Establish TLS Connection:** The client establishes a TLS connection to `overt.com` using a pre-negotiated nonce value.
2. **Select HTTP Redirect Channel:** The HTTP Redirect channel is selected to send upstream covert data for this overt destination.

#### Establishing a Tunnel
3. **SOCKS Server Request:** The browser connects to the SOCKS server, requesting to create a tunnel to `covert.com`. A new Covert Connection Handler (CCH) is created for this connection.
4. **Create Covert Message:** The CCH creates a new covert message, `cm1`, containing a command to establish a new tunnel with `covert.com`. It forwards the message to the overt connection component.
5. **Buffer Covert Message:** The overt connection buffers the covert message in the upstream buffer.
6. **Send Overt Request:** The Overt Upstream Sender (OUS) sends an HTTP request for the homepage of `overt.com`.
7. **Replace Overt Request:** The overt channel receives the overt request and observes that there is data available in the upstream buffer. It reads the message `cm1` from the buffer and replaces the overt request with a request to `https://overt.com/`. It then sends the new HTTP request on the overt connection.
8. **Receive HTTP 301 Response:** The overt website’s server responds with an HTTP 301 message asking the user to redirect to `www.overt.com/`.
9. **Intercept and Create Tunnel:** The decoy router intercepts and observes a covert message in the HTTP response. It reads the message and creates a tunnel to `covert.com` as instructed. The decoy router also assigns an identifier to the tunnel, which the client may use later to specify which tunnel it wishes to send data on.
10. **Notify Tunnel Creation:** Once the client receives the tunnel’s identifier, the CCH notifies the browser that the tunnel has been successfully created and it may start sending upstream data.

#### Sending Covert Upstream Data
11. **Request Covert Homepage:** The user makes a request for the `covert.com` homepage in the browser.
12. **Create Covert Message:** The CCH receives the TCP data for this request. It creates a covert message `cm2` containing the request data and the identifier of the tunnel. It forwards the message to the Overt Connection, which buffers the message in the upstream buffer.
13. **Send Overt Request:** The OUS sends an HTTP request for an object in `overt.com`. The overt channel replaces the request with a request to `overt.com/`.
14. **Receive Covert Message:** The overt website responds with a redirect, allowing the decoy router to receive the covert message `cm2`. The decoy router reads the upstream TCP data from the message and forwards it on the specified tunnel to `covert.com`.

#### Receiving Downstream Data
15. **Forward Response to Decoy Router:** The covert website receives the client’s request through the tunnel and sends the response back to the decoy router. The decoy router buffers the response.
16. **Send Overt Request:** The OUS sends a request for an image in `overt.com`, and the overt channel forwards the request on the overt connection without any modification.
17. **Intercept and Replace Image Data:** The overt destination responds with an HTTP response containing the image data. The decoy router intercepts this response and replaces the image data with buffered downstream data received from `covert.com`.
18. **Receive Covert Data:** The client receives the HTTP response, but instead of containing image data, it contains covert downstream data. The CCH sends this downstream data to the browser over the SOCKS connection.

### Sample Website-Specific Overt Channel Implementation

The following is an example of a covert channel class implementation for using Google as the overt destination with HTTP Redirects. The `make_message` method is used by the Waterfall client to create a request containing covert data, which will be responded to with an HTTP 301 Redirect from the Google server. The `extract_message` method is used by the decoy router to extract the covert data embedded in the HTTP Redirect response received from the overt website.

```python
class GoogleRedirectChannel:
    host = "google.com"
    prefix = "/waterfall"

    def make_message(self, overt_req, covert_buf):
        length = self.calc_covert_length(overt_req)
        data = covert_buf.read(length)
        encoded_data = base64.b64encode(data)
        request = Request()
        request.set_path(self.prefix + encoded_data)
        request.set_header("Host", self.host)
        return request

    def extract_message(self, request):
        loc = request.get_header("Location")
        reg = re.search("%s/(.+)" % self.prefix, loc)
        data = reg.group(1)
        return data
```

### Potential Questions

Here are some useful questions raised during the reviewing process:

1. **What if the censors disrupt Waterfall’s registration by blocking Waterfall email messages?**
   - Previous work [23] has studied censorship-resistant emails that can be leveraged by Waterfall. Additionally, Waterfall registration does not fundamentally depend on emails, and any latency-insensitive channel can be used for its registration. Given the small size of registration packages, Waterfall operators can set up a resilient Domain Fronting [17] registration server at very low operational costs.

2. **Can censors disable Waterfall by normalizing TCP ISN fields?**
   - We believe not. First, the use of ISNs only helps the decoy routers to filter out non-Waterfall traffic to reduce their traffic loads. Even if ISNs are eliminated from the design, Waterfall will still work; decoy routers will have to check every connection of a registered user to identify and serve Waterfall connections. Second, normalizing ISNs at a large scale (e.g., by China) is not practical. As the upstream and downstream flows of a connection may take asymmetric routes, censoring ASes will need to share the ISN mappings for different flows among themselves in real-time.

3. **Does a Waterfall client need to frequently probe for proper overt destinations? Would this affect unobservability?**
   - Previous work [21] shows that the number of probes needed to identify such overt destinations is reasonably small. Also, given that routes do not change frequently, identified overt destinations can be used for long intervals. The Waterfall client software can include a BGP path simulator to infer potential overt destinations, thereby minimizing the number of such probes. Nonetheless, this is not specific to Waterfall and applies to all decoy routing systems.

---

This revised version aims to provide a clear, coherent, and professional presentation of the information, making it easier to understand and follow.