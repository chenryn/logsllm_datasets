d 0.
Similarly, we obtain ψk ◦ τ = τ ◦ ψk for k > 0.
Now let us deﬁne a d × d matrix ¯A containing (d/(cid:96)) copies of A in a vertical direction (i.e., ¯A =
(A; . . . ; A)). Lemma 1 implies that
(φi ◦ σ( ¯A))j·(cid:96):(j+1)·(cid:96) = φi ◦ (σ( ¯A)j·(cid:96):(j+1)·(cid:96))
= φi ◦ σ ◦ φj·(cid:96)(A)
= φj·(cid:96)+i ◦ σ(A).
10
Similarly, using the commutative property of τ and ψ, it follows
(ψi ◦ τ (B))j·(cid:96):(j+1)·(cid:96) = (ψj·(cid:96)+i ◦ τ (B))0:(cid:96).
Therefore, the matrix product AB is written as follows:
j·(cid:96):(j+1)·(cid:96)
.
(cid:88)
 (cid:88)
0≤j<d/(cid:96)
0≤i<(cid:96)
A · B =
(φi ◦ σ( ¯A)) (cid:12) (ψi ◦ τ (B))
4.2.2 Homomorphic Rectangular Matrix Multiplication
in Section 3.3.3. Next, we can securely compute (cid:80)(cid:96)−1
ﬁnal result:(cid:80)d/(cid:96)−1
Suppose that we are given two ciphertexts ct. ¯A and ct.B that encrypt matrices ¯A and B, respectively.
We ﬁrst apply the baby-step/giant-step algorithm to generate the encryptions of σ( ¯A) and τ (B) as
i=0 (φi ◦ σ( ¯A)) (cid:12) (ψi ◦ τ (B)) in a similar way to
Algorithm 2, say the output is ct. ¯AB. Finally, we perform aggregation and rotation operations to get the
j=0 Rot(ct. ¯AB; j · (cid:96) · d). This step can be evaluated using a repeated doubling approach,
yielding a running time of log(d/(cid:96)) additions and rotations. See Algorithm 3 for an explicit description
of homomorphic rectangular matrix multiplication.
Algorithm 3 Homomorphic rectangular matrix multiplication
procedure HE-RMatMult(ct. ¯A, ct.B)
[Step 1]
1: ct.A(0) ← LinTrans(ct. ¯A; U σ)
2: ct.B(0) ← LinTrans(ct.B; U τ )
[Step 2]
3: for k = 1 to (cid:96) − 1 do
4:
ct.A(k) ← LinTrans(ct.A(0); V k)
ct.B(k) ← LinTrans(ct.B(0); W k)
5:
6: end for
[Step 3]
7: ct. ¯AB ← Mult(ct.A(0), ct.B(0))
8: for k = 1 to (cid:96) − 1 do
9:
10: end for
ct. ¯AB ← Add(ct. ¯AB, Mult(ct.A(k), ct.B(k)))
[Step 4]
11: ct.AB ← ct. ¯AB
12: for k = 0 to log(d/(cid:96)) − 1 do
13:
14: end for
15: return ct.AB
ct.AB ← Add(ct.AB, Rot(ct.AB; (cid:96) · d · 2k))
Table 3 summarizes the total complexity of Algorithm 3. Even though we need additional computation
for Step 4, we can reduce the complexities of Step 2 and 3 to O((cid:96)) rotations and (cid:96) multiplications,
respectively. We also note that the ﬁnal output ct.AB encrypts a d × d matrix containing (d/(cid:96)) copies of
the desired matrix product AB in a vertical direction.
This resulting ciphertext has the same form as a rectangular input matrix of Algorithm 3, so it can
be reusable for further matrix computation without additional cost.
11
Table 3: Complexity of Algorithm 3
Step
1
2
3
4
Add
3d
(cid:96)
(cid:96)
log(d/(cid:96))
CMult
3d
2(cid:96)
-
-
Total
3d + 2(cid:96) + log(d/(cid:96))
3d + 2(cid:96)
Rot
√