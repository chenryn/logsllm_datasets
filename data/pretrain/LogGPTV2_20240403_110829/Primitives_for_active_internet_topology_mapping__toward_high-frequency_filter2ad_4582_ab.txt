### 优化后的文本

#### 子网中心探测策略
我们采用子网划分（subnetting）来选择在每个BGP宣告的前缀内进行探测的地址。这一策略旨在根据前缀内的子网划分程度调整探测数量，以避免不必要的探测。我们将此策略称为“子网中心”策略。当前的Ark策略假设一个固定的子网边界，这可能导致过于细化（浪费探测资源）或过于粗略（遗漏信息）。相比之下，我们的方法确保在一个前缀中的后续目标地址在其最高有效位上尽可能不同，即这些地址可能属于不同的子网前缀。我们称这种目标选择为“最少公共前缀原则”。例如，对于前缀192.168.0.0/16，我们的算法最初从四个不同的子网前缀中选择四个地址：192.168.0.0/18, 192.168.64.0/18, 192.168.128.0/18, 和192.168.192.0/18。

随着探测的进行，我们使用成对的ED度量来确定在一个前缀内的更细粒度的目标是否提供了有用的附加信息。当一对路径返回的ED值低于预先设定的经验阈值τ = 3时，该前缀将停止进一步探测。

#### 接口集覆盖
DoubleTree [8]提出了一种方法，在测量周期进行过程中实时调整探测。通过从启发式选择的中点开始，同时向观察点（减小TTL）和目标（增加TTL）方向进行探测，DoubleTree通过在发现先前已知接口时提前终止跟踪来节省数据包。然而，这种方法部分解决了我们在§2中的发现，但需要确定路径的中点，并且在处理负载均衡方面表现不佳。更重要的是，它独立处理每个周期，忽略了从前一周期学到的信息。我们的目标是利用这些知识减少后续周期中的跟踪数据包数量。

我们假设一种贪婪的接口集覆盖（ISC）方案，该方案基于前一周期的接口级拓扑结构选择一部分探测数据包。具体来说，接口级拓扑包括有向边，其中边的方向记录了探测的方向。（如果一条边是双向的，在接口级图中应视为异常情况。）ISC方案迭代地从前一轮的有向接口级拓扑中选择路径和子路径，以便探测尚未被选定路径覆盖的接口。初始的“引导”目标集合可以使用我们的子网中心探测算法选择。我们注意到，识别最小路径子集以覆盖已发现接口的问题是一个著名的NP完全问题——最小集合覆盖问题。然而，高效的贪婪解决方案已被证明可以达到最优解的ln n近似 [9]。

形式上，设P是从观察点到目的地的一组路径。每条路径 (cid:3)pi ∈ P 是一个路由器接口的向量。令I表示所有接口的集合，I = ∪i,j pi[j]。子路径 pi[n : m] 是路径 (cid:3)pi 的第n到第m跳，包括完整路径的情况。子路径的大小 |pi[n : m]| 是 m − n + 1，即探测第n到第m跳所需的数据包数量。ISC问题是要找到具有最小总大小的子路径集合，使其覆盖I。因此，我们对比ISC与全集覆盖问题，后者找到覆盖I的最小路径集合 (cid:3)pi。

我们观察到，在减少探测流量和捕获动态转发路径这两个冲突目标之间存在一种张力。许多网络部署了流量工程和负载均衡。因此，无论使用完整的路径还是子路径，我们预计探测会揭示与前一周期的偏差。在这种情况下，我们用“变化驱动”的逻辑增强ISC：在接口验证阶段，如果发现了一个意外的接口，ISC将开始类似于DoubleTree的策略，从意外接口向外双向探测。这使得ISC不仅能学习多个周期中的负载均衡，还能适应基础拓扑的变化。

#### 观察点分布
互联网规模的映射涉及从数十个不同的观察点（VPs）进行探测。如何在VPs之间分配探测任务是另一个机会，可以通过自适应策略减少探测流量。然而，正如我们在§2中的分析所示，额外的观察点能提供更多接口信息。此外，在下一节中我们发现，添加额外VPs对同一目的地的信息增益缓慢衰减。因此，由于额外观察点的巨大价值，我们采用了一种简单的策略来分配目的地到VPs。

我们的观察点分布算法简单地使用尽可能多的不同VPs来探测给定BGP前缀内的目标集合。结合子网中心探测，当从确定的子网前缀中选择额外目标时，观察点分布算法将尽可能将其分配给尚未用于原始BGP前缀的VPs，或者在有更多的目标要探测而VPs不足时，尽可能均匀地分配它们。

#### 结果
定义了三种智能拓扑测量原语后，本节通过一系列Ark实验评估它们各自的性能。

##### 子网中心探测
我们将子网中心探测策略与一个完整的Ark探测周期进行比较，作为基准。请注意，这个基准是一个相对的度量，而不是实际的拓扑结构，后者仍然是未知的。我们通过过滤一个周期的完整Ark探测数据来模拟各种策略，即通过选择性地使用不同的可用Ark路径来模拟不同的结果拓扑。我们的性能指标考察了探测负载与探测所得拓扑结构之间的平衡。

为了直观了解使用外部BGP数据来驱动探测选择的效果，我们首先遵循一种类似于[14]的朴素策略。我们从可用的Ark跟踪中随机选择每个BGP前缀的一个目标；实际上假定这个单一目标代表整个前缀内的所有目标。类似地，我们尝试了一种更粗糙的技术，将跟踪目标按其AS聚类，并认为AS中的一个目标代表整个AS。我们构建了由原始Ark数据、每个前缀一个目标和每个AS一个目标推断出的接口级图。结果推断图的度分布如图3(a)所示。虽然这两种朴素策略捕捉到的结构与完整Ark数据的基准相似，但有大量的接口和边缺失（如图3(b)所示，占总数的40-80%）。然而，如图3(c)所示，前缀聚类方法所需的探测负载大约为完整探测负载的五分之一，而AS聚类方法则进一步减少了探测负载。

有了对潜在探测节省的直观理解，我们询问子网中心探测算法是否能在消耗的探测负载与生成的拓扑保真度之间取得更好的平衡。我们观察到生成的拓扑没有质的区别[2]。

[2] 我们省略了其他图论度量[24, 16]以简洁起见，但注意到这些度量显示出与基准的相似性。