optimistic state merging – a state merging technique that lever-
ages domain-speciﬁc knowledge of oblivious execution in the
presence of unobservable state.
Shortcomings of Traditional State Merging.
In Listing 1,
the code is oblivious under the deﬁnition in §3.3 assum-
ing the data length is public. The algorithm always sends
the buffer with a length n regardless of the secret values in
secretInputRecords. To check this condition, a checker
should conﬁrm the length of encrypted is the same across
any possible pairs of secretInputRecords. Naïvely run-
ning symbolic execution leads to path explosion because the
branch is inside the for loop. Since it is common to iterate
over elements in the input data set within unobservable space,
we need a way to prevent path explosion in this case.
To mitigate the path explosion problem, state merging tech-
niques merge two different symbolic states of a variable. As
we discussed in § 2.3, this can prevent unnecessary explo-
ration. However, conventional state merging techniques do
not effectively reduce the paths to explore when two merged
states are different from each other. For example, Table 4
shows the symbolic states after the execution in Listing 2.
With traditional state merging, the true and false paths
of the if statement at Line 4 cannot get combined because
buf[i] has different state in each path. In other words, tra-
ditional state merging techniques are sound and complete
with regard to symbolic execution and explore the same set
of program behaviors as regular symbolic execution.
Merging Paths Using Domain Speciﬁc Knowledge of
Oblivious Algorithms. ObliCheck is able to apply state
merging more aggressively through a domain speciﬁc insight.
Optimistic state merging leverages the observation that, in
oblivious algorithms, the attacker is unable to distinguish be-
tween different unobservable states because the plaintext data
only resides in unobservable space, and is later encrypted
when written to observable space. For example, buf[i] in
Listing 2 is encrypted when the buf is sent over network at
Line 10. Therefore, at branching statements, ObliCheck ex-
plores both true and false blocks immediately and merges the
corresponding states into a new symbolic variable without
divergence.
ObliCheck simpliﬁes path conditions by introducing a new
variable when merging two different symbolic expressions.
For example, the algorithm in Listing 2 exhibits different
state of buf[i] in the then and else branches after Line
4 (Pair(x0,0) and Pair(x0,1) respectively; Table 4). Hence,
traditional state merging cannot merge these two states. In
contrast, ObliCheck introduces a new unconstrained symbolic
variable, z. Now, buf[i][1] becomes the same z, so those
two states can get combined as in Table 5.
Line
2-4
5
5
buf.length (cid:55)→ {(true,0)}, i (cid:55)→ {(true,0)}, buf[i] (cid:55)→ {(true,unde f ined)}
Value Summary
buf.length (cid:55)→ {(x0, f irst )}i ∪× φ {(φb
i , )}i ∪× {(φ∧ φb
j >)} j = {(¬φ∧ φa
CONSTANT
Σ −→ Σ[x (cid:55)→ Σ(x)∪× φ {(true, )}][ pc (cid:55)→ NextPC(Σ,φ, (cid:96))]
(φ, (cid:96)) ∈ Σ( pc )
Pgm((cid:96)) = (x = c)
j >)} j
j , )}][ pc (cid:55)→ NextPC(Σ,φ, (cid:96))][PublicSet (cid:55)→ Σ(PublicSet)∪{s}]
SYMBOLIC SECRET INPUT
(φ, (cid:96)) ∈ Σ( pc )
Σ −→ Σ[x (cid:55)→ Σ(x)∪× φ {(true, )}][ pc (cid:55)→ NextPC(Σ,φ, (cid:96))][SecretSet (cid:55)→ Σ(SecretSet)∪{s}]
s is a fresh symbolic value from S
s is a fresh symbolic value from S
Pgm((cid:96)) = (x = readSecretInput )
BINARY OPERATION
(φ, (cid:96)) ∈ Σ( pc )
Pgm((cid:96)) = (z = x (cid:46)(cid:47) y)
i ∧ φy
φx(cid:46)(cid:47)y
i j = φx
j
Σ −→ Σ[z (cid:55)→ Σ(z)∪× φ {(φx(cid:46)(cid:47)y
i j
i , )}i j][ pc (cid:55)→ NextPC(Σ,φ, (cid:96))]
,tx(cid:46)(cid:47)y
, )}i
i ,tx
tx(cid:46)(cid:47)y
i j = tx
Σ(y) = {(φy
i ∨ty
i j
j
j, )} j
CONDITIONAL
(φ, (cid:96)) ∈ Σ( pc )
Pgm((cid:96)) = ( if x goto y)
i ∧ φy
y
j, (cid:96)
s = {(φx
i ∧ vx
Σ(x) = {(φx
j)}i j (cid:93){((φx
i , )}i
i ), (cid:96) + 1)}i
Σ −→ Σ[ pc (cid:55)→ (Σ( pc )\{(φ, (cid:96))})(cid:93)φ s
Σ(y) = {(φy
y
j, (cid:96)
j)} j
LOAD
(φ, (cid:96)) ∈ Σ( pc )
Pgm((cid:96)) = (y = ∗x)
Σ −→ Σ[y (cid:55)→ Σ(y)∪× φ {(φx
Σ(x) = {(φx
i ∧ φi j, )}i j][ pc (cid:55)→ NextPC(Σ,φ, (cid:96))]
Σ(y) = {(φy
i , )} j)]i[ pc (cid:55)→ NextPC(Σ,φ, (cid:96))]
Figure 3: The semantics of symbolic execution and state merging techniques of ObliCheck. The semantics incorporates the taint tag into the
MultiSE semantics [63] in order to track the propagation of secret input through merged symbolic values.
Σ(x) = {(φx
i {(φy
j,ty
i ) = {(φi j, )} j
STORE
(φ, (cid:96)) ∈ Σ( pc )
Pgm((cid:96)) = (∗x = y)
Σ −→ Σ[vx
i (cid:55)→ Σ(vx
i )∪× φ∧φx
i ,· >)}i
i ,· >)}i
j >)} j
j, < vy
j, < vy
i , < vx
Σ(vx
j,ty
Listing 3 is a benign oblivious algorithm but is reported
as not oblivious if our optimistic state merging is used. At
Lines 6 and 8, the i−th position of buf is updated to either
0 or 1 depending on the value of secretInput[i]. Since
0 (cid:54)= 1, our optimistic state merging operation introduces a
new symbolic variable and puts it in the value summary
of buf[i].second. At Lines 16 and 18, the predicates in
the branches contain record.second, where each record
points to the value stored at buf[i]. Since ObliCheck over-
approximated buf[i].second, it has no way to know 0 and
1 are the only possible values for record.second and thus
the algorithm is reported as not oblivious.
Our merging technique does not affect the soundness of
ObliCheck, but sacriﬁces the completeness due to the overap-
proximation for merging. In fact, if we merge every variable,
any algorithm that has a secret dependent branch that affects
the access sequence is classiﬁed as not oblivious, the same
way as a taint analysis based checker does. For better preci-