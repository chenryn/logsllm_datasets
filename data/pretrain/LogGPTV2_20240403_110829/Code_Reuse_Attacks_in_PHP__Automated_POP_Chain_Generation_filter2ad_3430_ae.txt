-
2
1
-
6
2
5
-
-
-
2
9
1
-
-
-
1
-
2
code. The least frequent magic methods are callStatic()
and __invoke() which we did not ﬁnd in any of our selected
applications. Based on the low number of gadgets, we ex-
pected the POI in Vanilla Forums (14), LiveZilla (21), and
Open Web Analytics (24) to be less likely exploitable com-
pared to, for example, Contao CMS (136) or Piwik (111).
Note that the number of available gadgets does not sig-
niﬁcantly inﬂuence the overall performance. That is, ﬁrst of
all, due to the fact that the code size of magic methods is
often rather small. Furthermore, some of them are already
included in our normal OOP analysis. Second, all further
gadgets in a chain are user-deﬁned methods. These are ana-
lyzed for POI vulnerabilities by our prototype. Because the
analysis results are stored in the method’s summary, they
can be re-used when building a chain with little eﬀort.
4.3 Detected POP Gadget Chains
Next, we evaluated the reported POP gadget chains of
our prototype. For Wordpress and Open Web Analytics, we
simpliﬁed the POI vulnerability so that our prototype was
capable of detecting the vulnerability after which we can
include the applications in our gadget chain evaluation.
The total number of exploitable gadget chains reported
by our prototype is compared to the known gadget chains
from security advisories in the column Chains in Table 1.
In total, 36 exploitable gadget chains were reported. Our
prototype successfully detected a gadget chain in 6 out of
10 applications, whereas 28 gadget chains were previously
unknown. Starting from the initial gadget to the sensitive
sink, the length of detected gadget chains ranges from 1
up to 8 gadgets with an average chain length of 3 gadgets.
Table 2 highlights the magic methods used as an initial gad-
get with a bold number. The most abused magic method
was __destruct(), used by 86% of the gadget chains. Only
four gadget chains initially exploited __toString() and one
chain exploited __wakeup().
The number of diﬀerent vulnerability types detected in
each application through POP is listed in Table 3. The
most prominent vulnerability types are ﬁle delete (FD), ﬁle
create (FC), and ﬁle modiﬁcation (FM) vulnerabilities. Fur-
thermore, SQL injection (SQLi) and local ﬁle inclusion (LFI)
vulnerabilities were detected, as well as one XML external
entity injection (XXE).
Surprisingly, 9 chains were found in Open Web Analyt-
ics, although only 24 initial gadgets are available. However,
one call to a method with a frequently used name is enough
to jump to a large portion of the application’s code. Due
to one dynamic class invocation (refer to Section 4.1) also
10 false positives occurred. For LiveZilla, Wordpress, and
GLPI, no gadget chain was detected by our tool. However,
since no gadget chain is publicly documented, we assume
that the POI vulnerability is not exploitable with the appli-
cation’s core code. A false negative occurred in Piwik and
in Vanilla Forums. Here, our prototype analyzed dynamic
OOP features imprecisely.
5. RELATED WORK
Code reuse attacks and OOP analysis were extensively
studied over the last years. However, both techniques have
not been applied to PHP-based web applications before. In
this section, we review related work of both ﬁelds.
5.1 Code Reuse Techniques
The idea of reusing existing code instead of injecting shell-
code goes back to Solar Designer, who was the ﬁrst to pub-
licly documented such an attack to bypass a non-executable
stack [32]. The idea is that the adversary constructs a
fake call stack which contains the necessary parameters and
meta-information (i.e., a return address that points to a li-
brary function). After a successful exploit, the vulnerable
function attempts to return, but the fake call stack leads to
a diversion of the control ﬂow. While an adversary can re-
turn to an arbitrary location, she typically returns to one of
the functions provided by the C standard library and thus
such attacks are called return-to-libc.
This basic idea was extended in the following years, lead-
ing to the technique nowadays referred to as return-oriented
programming (ROP) [21, 27].
Instead of reusing complete
functions, an adversary can also chain small code fragments
and build a malicious payload. There are ROP compil-
ers [16,29] capable of automatically converting a given piece
of code into an application-speciﬁc ROP chain and Snow
et al. demonstrated how such chains can be built on-the-
ﬂy [31]. Another technique closely related to ROP leverages
51gadgets not ending in return instructions but some kind of
indirect jumps [3, 5].
Back in 2009/2010, Esser gave two presentation in which
he described the idea of applying code reuse attacks in the
context of PHP-based web applications [9, 10]. He demon-
strated the practical feasibility of such an approach and
coined the term property-oriented programming (POP). We
build upon this work and propose a static analysis approach
to detect PHP object injection vulnerabilities and POP gad-
get chains in an automated way.
5.2 Analysis of Web Applications
Due to the practical importance of PHP-based web appli-
cations, a large number of techniques to analyze such ap-
plications for potential (injection) vulnerabilities were de-
veloped (e.g., [1, 6, 7, 15, 18, 20, 33, 44–46]). Our static code
analysis is based on block and function summaries, a concept
ﬁrst introduced by Xie and Aiken [46]. Previously, we ex-
tended it for precise analysis of PHP built-in features [6] and
for second-order vulnerability detection [7]. In this work, we
extended our procedural data ﬂow analysis with support for
relevant object-oriented features for POI detection. To the
best of our knowledge, none of the existing approaches is
able to analyze object-oriented PHP code.
The challenges we address to perform an eﬃcient OOP
analysis on large applications is a research topic addressed
for other kinds of programming languages. A broad overview
on diﬀerent approaches to perform object-sensitivity analy-
sis was performed by Smaragdakis et al. [30]. They introduce
type-sensitive analysis as a more scalable solution that picks
its context based on types instead of objects. Although their
approach looks promising, it is not applicable to a weakly-
typed language such as PHP.
Several static code analysis approaches have been pro-
posed to perform points-to analysis for the weakly-typed
JavaScript language [2, 11, 12, 17, 35]. Similar work was also
performed for the Java language [23, 25, 40]. For example,
Livshits and Lam proposed a static analysis approach to de-
tect security vulnerabilities in Java applications [23]. Tripp
et al. designed static taint analysis for Java and imple-
mented their approach in the TAJ system [40]. In general,
these approaches cannot be adopted to the PHP language
due to missing type information in PHP.
6. CONCLUSION AND FUTURE WORK
Code reuse attacks are not only a threat for memory cor-
ruption vulnerabilities in binary executables, but also for
the web application domain. In this paper, we studied the
nature of PHP object injection vulnerabilities that can be
exploited via property-oriented programming. In such code
reuse attacks, an object with modiﬁed properties is injected
into the application. Through PHP’s magic methods, the
control ﬂow is diverted and an adversary can perform mali-
cious computations. We proposed and implemented an au-
tomated approach for eﬃcient gadget chain detection. An
empirical evaluation demonstrates that our method can ﬁnd
new POI vulnerabilities and diﬀerent kinds of gadget chains.
Our prototype models only relevant OOP features for POP
detection. False positives and negatives can occur by impre-
cise handling of dynamic OOP features [14]. Future work
will extend the support of OOP features and address the
challenge of framework analysis [24, 34].
7. REFERENCES
[1] Balzarotti, D., Cova, M., Felmetsger, V.,
Jovanovic, N., Kirda, E., Kruegel, C., and
Vigna, G. Saner: Composing Static and Dynamic
Analysis to Validate Sanitization in Web Applications.
In IEEE Symposium on Security and Privacy (2008).
[2] Barth, A., Weinberger, J., and Song, D.
Cross-Origin JavaScript Capability Leaks: Detection,
Exploitation, and Defense. In USENIX Security
Symposium (2009), pp. 187–198.
[3] Bletsch, T., Jiang, X., Freeh, V. W., and Liang,
Z. Jump-oriented Programming: A New Class of
Code-reuse Attack. In ACM Symposium on
Information, Computer and Communications Security
(ASIACCS) (2011).
[4] Bodden, E., Sewe, A., Sinschek, J., Oueslati, H.,
and Mezini, M. Taming Reﬂection: Aiding Static
Analysis in the Presence of Reﬂection and Custom
Class Loaders. In Proceedings of the 33rd International
Conference on Software Engineering (2011), ICSE ’11,
pp. 241–250.
[5] Checkoway, S., Davi, L., Dmitrienko, A.,
Sadeghi, A.-R., Shacham, H., and Winandy, M.
Return-oriented programming without returns. In
ACM Conference on Computer and Communications
Security (CCS) (2010).
[6] Dahse, J., and Holz, T. Simulation of Built-in PHP
Features for Precise Static Code Analysis. In
Symposium on Network and Distributed System
Security (NDSS) (2014).
[7] Dahse, J., and Holz, T. Static Detection of
Second-Order Vulnerabilities in Web Applications. In
USENIX Security Symposium (2014).
[8] Dean, J., Grove, D., and Chambers, C.
Optimization of Object-oriented Programs using
Static Class Hierarchy Analysis. In ECOOP’95
Object-Oriented Programming, 9th European
Conference, ˚Aarhus, Denmark, August 7–11, 1995
(1995), Springer, pp. 77–101.
[9] Esser, S. Shocking News in PHP Exploitation. In
Power of Community (POC) (2009).
[10] Esser, S. Utilizing Code Reuse Or Return Oriented
Programming in PHP Applications. In BlackHat USA
(2010).
[11] Guarnieri, S., and Livshits, V. B.
GATEKEEPER: Mostly Static Enforcement of
Security and Reliability Policies for JavaScript Code.
In USENIX Security Symposium (2009), pp. 151–168.
[12] Guarnieri, S., Pistoia, M., Tripp, O., Dolby, J.,
Teilhet, S., and Berg, R. Saving the World Wide
Web from Vulnerable JavaScript. In Proceedings of the
2011 International Symposium on Software Testing
and Analysis (2011), ACM, pp. 177–187.
[13] Halfond, W. G., Viegas, J., and Orso, A. A
Classiﬁcation of SQL Injection Attacks and
Countermeasures. In Proceedings of the IEEE
International Symposium on Secure Software
Engineering (2006).
[14] Hills, M., Klint, P., and Vinju, J. An Empirical
Study of PHP Feature Usage. In International
Symposium on Software Testing and Analysis (ISSTA)
(2013).
52[15] Huang, Y.-W., Yu, F., Hang, C., Tsai, C.-H.,
Lee, D.-T., and Kuo, S.-Y. Securing Web
Application Code by Static Analysis and Runtime
Protection. In International Conference on the World
Wide Web (WWW) (2004).
[16] Hund, R., Holz, T., and Freiling, F. C.
Return-oriented Rootkits: Bypassing Kernel Code
Integrity Protection Mechanisms. In USENIX Security
Symposium (2009).
[31] Snow, K. Z., Monrose, F., Davi, L., Dmitrienko,
A., Liebchen, C., and Sadeghi, A.-R. Just-in-Time
Code Reuse: On the Eﬀectiveness of Fine-grained
Address Space Layout Randomization. In IEEE
Symposium on Security and Privacy (2013).
[32] Solar Designer. Getting around non-executable
stack (and ﬁx).
http://seclists.org/bugtraq/1997/Aug/63, as of
May 2014.
[17] Jang, D., and Choe, K.-M. Points-to analysis for
[33] Son, S., and Shmatikov, V. SAFERPHP: Finding
JavaScript. In Proceedings of the 2009 ACM
Symposium on Applied Computing (2009), ACM,
pp. 1930–1937.
[18] Jovanovic, N., Kruegel, C., and Kirda, E. Pixy:
A Static Analysis Tool for Detecting Web Application
Vulnerabilities (Short Paper). In IEEE Symposium on
Security and Privacy (2006).
[19] Klein, A. Cross-Site Scripting Explained. Sanctum
White Paper (2002).
[20] Kneuss, E., Suter, P., and Kuncak, V. Phantm:
PHP Analyzer for Type Mismatch. In ACM SIGSOFT
Symposium on the Foundations of Software
Engineering (FSE) (2010).
[21] Krahmer, S. x86-64 Buﬀer Overﬂow Exploits and the
Borrowed Code Chunks Exploitation Technique.
http://users.suse.com/~krahmer/no-nx.pdf, 2005.
[22] Livshits, B., Whaley, J., and Lam, M. S.
Reﬂection Analysis for Java. In Proceedings of the
Third Asian Conference on Programming Languages
and Systems (2005), APLAS’05, pp. 139–160.
[23] Livshits, V. B., and Lam, M. S. Finding Security
Vulnerabilities in Java Applications with Static
Analysis. In USENIX Security Symposium (2005).
[24] Madsen, M., Livshits, B., and Fanning, M.
Practical Static Analysis of JavaScript Applications in
the Presence of Frameworks and Libraries. In
Proceedings of the 2013 9th Joint Meeting on
Foundations of Software Engineering (2013),
ESEC/FSE 2013, ACM, pp. 499–509.
[25] Milanova, A., Rountev, A., and Ryder, B. G.
Parameterized Object Sensitivity for Points-to and
Side-eﬀect Analyses for Java. ACM SIGSOFT
Software Engineering Notes 27, 4 (2002), 1–11.
[26] MITRE. Common Vulnerabilities and Exposures
(CVE). http://cve.mitre.org/, as of May 2014.
[27] Roemer, R., Buchanan, E., Shacham, H., and
Savage, S. Return-Oriented Programming: Systems,
Languages, and Applications. ACM Transactions on
Information and System Security 15, 1 (Mar. 2012).
[28] Schwartz, E. J., Avgerinos, T., and Brumley, D.
All You Ever Wanted to Know About Dynamic Taint
Analysis and Forward Symbolic Execution (but Might
Have Been Afraid to Ask). In IEEE Symposium on
Security and Privacy (2010).
[29] Schwartz, E. J., Avgerinos, T., and Brumley, D.
Q: Exploit Hardening Made Easy. In USENIX
Security Symposium (2011).
[30] Smaragdakis, Y., Bravenboer, M., and Lhot´ak,
O. Pick Your Contexts Well: Understanding
Object-sensitivity. ACM SIGPLAN Notices 46, 1
(2011), 17–30.
Semantic Vulnerabilities in PHP Applications. In
ACM SIGPLAN Workshop on Programming
Languages and Analysis for Security (PLAS) (2011).
[34] Sridharan, M., Artzi, S., Pistoia, M.,
Guarnieri, S., Tripp, O., and Berg, R. F4F: Taint
Analysis of Framework-based Web Applications. ACM
SIGPLAN Notices 46, 10 (2011), 1053–1068.
[35] Sridharan, M., Dolby, J., Chandra, S., Sch¨afer,
M., and Tip, F. Correlation Tracking for Points-to
Analysis of JavaScript. In ECOOP
2012–Object-Oriented Programming. Springer, 2012,
pp. 435–458.
[36] Sundaresan, V., Hendren, L., Razafimahefa, C.,
Vall´ee-Rai, R., Lam, P., Gagnon, E., and Godin,
C. Practical Virtual Method Call Resolution for Java.
ACM SIGPLAN Notices 35, 10 (2000), 264–280.
[37] Szekeres, L., Payer, M., Wei, T., and Song, D.
SoK: Eternal War in Memory. In IEEE Symposium on
Security and Privacy (2013).
[38] The PHP Group. PHP: Autoloading Classes. http:
//php.net/manual/language.oop5.autoload.php, as
of May 2014.
[39] The PHP Group. PHP: Magic Methods.
http://php.net/manual/language.oop5.magic.php,
as of May 2014.
[40] Tripp, O., Pistoia, M., Fink, S. J., Sridharan,
M., and Weisman, O. TAJ: Eﬀective Taint Analysis
of Web Applications. ACM Sigplan Notices 44, 6
(2009), 87–97.
[41] van der Veen, V., Dutt-Sharma, N., Cavallaro,
L., and Bos, H. Memory Errors: The Past, the
Present, and the Future. In Symposium on Recent
Advances in Intrusion Detection (RAID) (2012).
[42] W3Techs. Usage of Content Management Systems
for Websites. http://w3techs.com/technologies/
overview/content_management/all, as of May 2014.
[43] W3Techs. Usage of Server-side Programming
Languages for Websites. http://w3techs.com/
technologies/overview/programming_language/all,
as of May 2014.
[44] Wasserman, G., and Su, Z. Static Detection of
Cross-Site Scripting Vulnerabilities. In International
Conference on Software Engineering (ICSE) (2008).
[45] Wassermann, G., and Su, Z. Sound and Precise
Analysis of Web Applications for Injection
Vulnerabilities. In ACM SIGPLAN Conference on
Programming Language Design and Implementation
(PLDI) (2007).
[46] Xie, Y., and Aiken, A. Static Detection of Security
Vulnerabilities in Scripting Languages. In USENIX
Security Symposium (2006).
53