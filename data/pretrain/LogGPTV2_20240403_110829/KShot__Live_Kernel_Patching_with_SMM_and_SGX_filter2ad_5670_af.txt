ysis of the technique against a suite of indicative kernel
vulnerabilities. We demonstrate that our approach incurs an
average downtime of 50μs for a 1KB binary kernel patch,
but consumes only 18MB of extra state for patch analysis,
a substantial reduction over previous work. In an empirical
evaluation on 30 randomly-selected indicative, critical
kernel CVEs, KSHOT live-patched each one successfully
with low overhead and a small trusted code base.
Acknowledgments. We would like to thank our shepherd,
Miguel Correia, and the anonymous reviewers for their in-
sightful comments that improved the paper. This work is partly
supported by National Science Foundation Grant No. CCF
1763674, Air Force Grant No. FA8750-19-2-0006, National
Natural Science Foundation of China Grant No. 61632009,
and Guangdong Provincial Natural Science Foundation Grant
No. 2017A030308006. Opinions, ﬁndings, conclusions and
recommendations expressed in this material are those of the
authors and do not necessarily reﬂect the views of the agencies.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:26:38 UTC from IEEE Xplore.  Restrictions apply. 
11
REFERENCES
[1] S. Farhang, J. Weidman, M. M. Kamani, J. Grossklags, and P. Liu, “Take
It or Leave It: A Survey Study on Operating System Upgrade Practices,”
in Proceedings of
the 34th Annual Computer Security Applications
Conference, 2018.
[2] F. Vitale, J. Mcgrenere, A. Tabard, M. Beaudouin-Lafon, and W. E.
Mackay, “High Costs and Small Beneﬁts: A Field Study of How Users
Experience Operating System Upgrades,” in Proceedings of the 2017
CHI Conference on Human Factors in Computing Systems, 2017.
[3] T. Dumitras¸ and P. Narasimhan, “Why do upgrades fail and what can we
do about it?: toward dependable, online upgrades in enterprise system,”
in Proceedings of the 10th ACM/IFIP/USENIX International Conference
on Middleware, 2009.
[4] Gartner, “Ensure Cost Balances With Risk in High-Availability Data
Centers,” https://www.gartner.com/en/documents/3906266/ensure-cost-
balances-with-risk-in-high-availability-data, 2019.
[5] H. Chen, J. Yu, R. Chen, B. Zang, and P.-C. Yew, “Polus: A powerful
live updating system,” in 29th International Conference on Software
Engineering (ICSE’07).
IEEE, 2007, pp. 271–281.
[6] M. Nabi, M. Toeroe, and F. Khendek, “Rolling upgrade with dynamic
batch size for iaas cloud,” in Cloud Computing (CLOUD), 2016 IEEE
9th International Conference on.
IEEE, 2016.
[7] A. Ramaswamy, S. Bratus, S. W. Smith, and M. E. Locasto, “Katana:
A hot patching framework for elf executables,” in 2010 International
Conference on Availability, Reliability and Security.
IEEE, 2010, pp.
507–512.
[8] S. Kashyap, C. Min, B. Lee, T. Kim, and P. Emelyanov, “Instant
OS updates via userspace checkpoint-and-restart.” in USENIX Annual
Technical Conference, 2016.
[9] Y. Chen, Y. Zhang, Z. Wang, L. Xia, C. Bao, and T. Wei, “Adaptive
Android kernel live patching,” in Proceedings of the 26th USENIX
Security Symposium, 2017.
[10] J. Poimboeuf and S. Jennings, “Introducing kpatch: dynamic kernel
patching,” Red Hat Enterprise Linux Blog, vol. 26, 2014.
[11] SUSE,
“Live
Patching
the
Linux Kernel Using
kGraft,”
https://www.suse.com/documentation/sles-15/book sle admin/data/
cha kgraft.html, 2018.
[12] ORACLE, “Ksplice,” http://www.ksplice.com/, 2018.
[13] Ubuntu,
“Canonical Livepatch Service,” https://www.ubuntu.com/
livepatch, 2018.
[14] Checkpoint, “Restore in Userspace,” https://criu.org/Main Page, 2018.
[15] Github, “Kpatch bugs,” https://github.com/dynup/kpatch/issues, 2019.
[16] Windows Defender ATP,
supply chain cyberattack,”
“Software
https://www.microsoft.com/security/blog/2017/05/04/windows-
defender-atp-thwarts-operation-wilysupply-software-supply-chain-
cyberattack/?source=mmpc, 2017.
[17] GitHub,
“APT/APT-GET RCE vulnerability,”
https://github.com/
freedomofpress/securedrop/issues/4058, 2019.
ShadowHammer,”
“Operation
[18] Kaspersky,
operation-shadowhammer/89992/, 2019.
[19] GitHub, “Syscall Hijacking on Linux Kernel,” https://github.com/
crudbug/simple-rootkit/, 2014.
[20] I. Khalil, A. Khreishah, and M. Azeem, “Cloud computing security: A
survey,” Computers, vol. 3, no. 1, pp. 1–35, 2014.
S.
[21] F. Schuster, M. Costa, C. Fournet, C. Gkantsidis, M. Peinado, G. Mainar-
Ruiz, and M. Russinovich, “VC3: Trustworthy data analytics in the cloud
using SGX,” in 2015 IEEE Symposium on Security and Privacy.
IEEE,
2015, pp. 38–54.
[22] Z. Yin, D. Yuan, Y. Zhou,
and L. N.
Bairavasundaram, “How do ﬁxes become bugs?” in Foundations
of Software Engineering, 2011, pp. 26–36.
[Online]. Available:
https://doi.org/10.1145/2025113.2025121
Pasupathy,
[23] C. M. Hayden, K. Saur, E. K. Smith, M. Hicks, and J. S. Foster,
“Kitsune: Efﬁcient, general-purpose dynamic software updating for C,”
ACM Transactions on Programming Languages and Systems (TOPLAS),
vol. 36, no. 4, p. 13, 2014.
[24] W. R. Williams, X. Meng, B. Welton, and B. P. Miller, “Dyninst and
mrnet: Foundational infrastructure for parallel tools,” in Tools for High
Performance Computing 2015. Springer, 2016, pp. 1–16.
[25] Github, “Libcare – patch userspace code on live processes,” https:
//github.com/cloudlinux/libcare, 2019.
[26] C. Giuffrida, A. Kuijsten, and A. S. Tanenbaum, “Safe and automatic live
update for operating systems,” in ACM SIGARCH Computer Architecture
News, vol. 41, no. 1. ACM, 2013, pp. 279–292.
https://securelist.com/
assistedintegrity monitor,” 2014.
[27] V. Costan and S. Devadas, “Intel SGX Explained.” IACR Cryptology
ePrint Archive, 2016.
[28] J. Seo, B. Lee, S. M. Kim, M.-W. Shih, I. Shin, D. Han, and T. Kim,
“Sgx-shield: Enabling address space layout randomization for sgx pro-
grams.” in NDSS, 2017.
[29] H. Liang, M. Li, Y. Chen, L. Jiang, Z. Xie, and T. Yang, “Establishing
trusted i/o paths for sgx client systems with aurora,” IEEE Transactions
on Information Forensics and Security, 2019.
[30] E. M. Koruyeh, K. N. Khasawneh, C. Song, and N. Abu-Ghazaleh,
“Spectre returns! speculation attacks using the return stack buffer,” in
Proceedings of the 12th USENIX Workshop on Offensive Technologies
(WOOT 18), 2018.
[31] M. Lipp, M. Schwarz, D. Gruss, T. Prescher, W. Haas, A. Fogh, J. Horn,
S. Mangard, P. Kocher, D. Genkin et al., “Meltdown: Reading kernel
memory from user space,” in Proceedings of the 27th USENIX Security
Symposium, 2018.
[32] O. Weisse, J. Van Bulck, M. Minkin, D. Genkin, B. Kasikci, F. Piessens,
M. Silberstein, R. Strackx, T. F. Wenisch, and Y. Yarom, “Foreshadow-
NG: Breaking the virtual memory abstraction with transient out-of-order
execution,” Technical report, Tech. Rep., 2018.
[33] S. Embleton, S. Sparks, and C. C. Zou, “SMM rootkit: a new breed
of OS independent malware,” Security and Communication Networks,
2013.
[34] L. Duﬂot, O. Levillain, B. Morin, and O. Grumelard, “Getting into the
SMRAM: SMM Reloaded,” CanSecWest, Vancouver, Canada, 2009.
[35] A. Zavou, G. Portokalidis, and A. D. Keromytis, “Taint-exchange:
A generic system for cross-process and cross-host taint tracking,” in
Advances in Information and Computer Security - 6th International
Workshop,
IWSEC 2011, Tokyo, Japan, November 8-10, 2011.
Proceedings, 2011, pp. 113–128. [Online]. Available: https://doi.org/
10.1007/978-3-642-25141-2\ 8
[36] K. Nikitin, E. Kokoris-Kogias, P. Jovanovic, N. Gailly, L. Gasser,
I. Khofﬁ, J. Cappos, and B. Ford, “CHAINIAC: proactive software-
update transparency via collectively signed skipchains and veriﬁed
builds,” in 26th USENIX Security Symposium, USENIX Security
2017, Vancouver, BC, Canada, August 16-18, 2017., 2017, pp.
[Online]. Available: https://www.usenix.org/conference/
1271–1287.
usenixsecurity17/technical-sessions/presentation/nikitin
[37] R. Strackx and F. Piessens, “Ariadne: A minimal approach to
state continuity,” in 25th USENIX Security Symposium, USENIX
2016,
Security
pp. 875–892. [Online]. Available: https://www.usenix.org/conference/
usenixsecurity16/technical-sessions/presentation/strackx
16, Austin, TX, USA, August
10-12,
2016.,
[38] I. Neamtiu, M. Hicks, G. Stoyle, and M. Oriol, “Practical dynamic
software updating for c,” in Proceedings of the 27th ACM SIGPLAN
Conference on Programming Language Design and Implementation,
ser. PLDI ’06. New York, NY, USA: ACM, 2006, pp. 72–83. [Online].
Available: http://doi.acm.org/10.1145/1133981.1133991
[39] F. Zhang, J. Wang, K. Sun, and A. Stavrou, “Hypercheck: A hardware-
[40] F. Zhang, K. Leach, K. Sun, and A. Stavrou, “SPECTRE: A De-
pendable Introspection Framework via System Management Mode,” in
Proceedings of the 43rd Annual IEEE/IFIP International Conference on
Dependable Systems and Networks (DSN’13), 2013.
[41] T. Bao, J. Burket, M. Woo, R. Turner, and D. Brumley, “BYTEWEIGHT:
Learning to Recognize Functions in Binary Code,” in Proceedings of the
23th USENIX Security Symposium, 2014.
[42] H. Zhang and Z. Qian, “Precise and accurate patch presence test for
binaries,” in Proceedings of the 27th USENIX Security Symposium, 2017.
[43] S. L. Graham, P. B. Kessler, and M. K. Mckusick, “Gprof: A call graph
execution proﬁler,” in ACM Sigplan Notices, 1982.
[44] S. Poznyakoff, “GNU cﬂow,” http://www.gnu.org/software/cﬂow/, 2005.
[45] K. Mgebrova, “CodeViz: a callgraph visualizer,” http://www.csn.ul.ie/
-mel/projects/codeviz, 2012.
[46] H. Rays, “IDA Tools,” https://www.hex-rays.com, 2018.
[47] J. Ming, M. Pan, and D. Gao, “iBinHunt: Binary hunting with inter-
procedural control ﬂow,” in International Conference on Information
Security and Cryptology. Springer, 2012, pp. 92–109.
[48] S. Rostedt, “Ftrace Linux Kernel Tracing,” in Linux Conference Japan,
2010.
[49] E. Bresson, O. Chevassut, D. Pointcheval, and J.-J. Quisquater, “Prov-
ably authenticated group Difﬁe-Hellman key exchange,” in Proceedings
of the 8th ACM conference on Computer and Communications Security,
2001.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:26:38 UTC from IEEE Xplore.  Restrictions apply. 
12
[50] A. M. Azab, P. Ning, Z. Wang, X. Jiang, X. Zhang, and N. C. Skalsky,
“HyperSentry: Enabling Stealthy In-Context Measurement of Hypervisor
Integrity,” in Proceedings of the 17th ACM Conference on Computer and
Communications Security (CCS’10), 2010.
[51] A. Ghosn, J. R. Larus, and E. Bugnion, “Secured routines: Language-
trusted execution environments,” in 2019
based construction of
{USENIX} Annual Technical Conference ({USENIX}{ATC} 19), 2019,
pp. 571–586.
[52] S. Zhao, Q. Zhang, Y. Qin, W. Feng, and D. Feng, “Sectee: A
software-based approach to secure enclave architecture using tee,” in
Proceedings of the 2019 ACM SIGSAC Conference on Computer and
Communications Security. ACM, 2019, pp. 1723–1740.
[53] Coreboot, “Open-Source BIOS,” http://www.coreboot.org/, 2018.
[54] SeaBIOS, http://www.coreboot.org/SeaBIOS, 2018.
[55] MITRE CVE Team, “CVE Details: The ultimate security vulnerability
datasource,” https://www.cvedetails.com/, 2019.
[56] Z. Huang, D. Lie, G. Tan, and T. Jaeger, “Using safety properties
to generate vulnerability patches,” in Proceedings of the 40th IEEE
Symposium on Security and Privacy, 2019.
[57] A. Partow, “General Purpose Hash Function Algorithms,” http://
www.partow.net/programming/hashfunctions, 2018.
[58] GitHub, “Sysbench,” https://github.com/akopytov/sysbench, 2016.
[59] C. M. Hayden, S. Magill, M. Hicks, N. Foster, and J. S. Foster,
“Specifying and verifying the correctness of dynamic software updates,”
in International Conference on Veriﬁed Software: Tools, Theories, Ex-
periments. Springer, 2012, pp. 278–293.
[60] Rapid7,
https://blog.rapid7.com/2018/08/22/whats-going-on-in-
production-application-security-2018/, August 2018.
[61] P. Kotzias, L. Bilge, P.-A. Vervier, and J. Caballero, “Mind your
own business: A longitudinal study of threats and vulnerabilities in
enterprises.” in NDSS, 2019.
[62] R. A. Grimes, “Zero-days aren’t
the problem – patches are,”
[65] Y. Wang, Y. Shen, C. Su, K. Cheng, Y. Yang, A. Faree, and Y. Liu,
[63] Intel,
https://www.csoonline.com/article/3075830/zero-days-arent-the-
problem-patches-are.html, June 2016.
“64
and
IA-32
Devel-
oper’s Manual,” http://www.intel.com/content/www/us/en/processors/
architectures-software-developer-manuals.html, 2018. [Online]. Avail-
able: http://www.intel.com/content/www/us/en/processors/architectures-
software-developer-manuals.html
Architectures
Software
I. Alexandrovich, A. Berenzon, C. Rozas, H. Shaﬁ,
V. Shanbhogue, and U. Savagaonkar, “Innovative Instructions and
Software Model for Isolated Execution,” in Proceedings of the 2nd
Workshop on Hardware and Architectural Support for Security and
Privacy (HASP’13), 2013.
[64] F. Mckeen,
“Cfhider: Control ﬂow obfuscation with intel sgx,” in IEEE INFOCOM
2019-IEEE Conference on Computer Communications, 2019.
[66] D. Kaplan, J. Powell, and T. Woller, “AMD Memory Encryption, White
http://amd-dev.wpengine.netdna-cdn.com/wordpress/media/
Paper,”
2013/12/AMD Memory Encryption Whitepaper v7-Public.pdf, April
2016.
[67] ARM Ltd.,
“ARM Security Technology - Building a Secure
System using TrustZone Technology,” http://infocenter.arm.com/help/
topic/com.arm.doc.prd29-genc-009492c/PRD29-GENC-009492C\
trustzone\ security\ whitepaper.pdf, 2009.
[68] K. Leach, F. Zhang, and W. Weimer, “Scotch: Combining Software
Guard Extensions and system management mode to monitor cloud
resource usage,” in International Symposium on Research in Attacks,
Intrusions, and Defenses, 2017.
[69] S. Mechtaev, J. Yi, and A. Roychoudhury, “Angelix: Scalable multiline
program patch synthesis via symbolic analysis,” in Proceedings of the
38th international conference on software engineering. ACM, 2016,
pp. 691–701.
[70] Z. Xu, B. Chen, M. Chandramohan, Y. Liu, and F. Song, “Spain:
security patch analysis for binaries towards understanding the pain and
pills,” in Proceedings of the 39th International Conference on Software
Engineering.
IEEE Press, 2017, pp. 462–472.
[71] P. W. McBurney and C. McMillan, “Automatic source code summa-
rization of context for Java methods,” IEEE Transactions on Software
Engineering, vol. 42, no. 2, pp. 103–119, 2016.
[72] B. S. Baker, “Parameterized duplication in strings: Algorithms and an
application to software maintenance,” in SIAM Journal on Computing,
1997.
[73] S. Kim, S. Woo, H. Lee, and H. Oh, “Vuddy: A scalable approach for
vulnerable code clone discovery,” in 2017 IEEE Symposium on Security
and Privacy (SP).
IEEE, 2017, pp. 595–614.
[74] B. A. Galitsky, “Generalization of parse trees for iterative taxonomy
learning,” Information Sciences, vol. 329, pp. 125–143, 2016.
[75] N. L. Petroni Jr and M. Hicks, “Automated detection of persistent kernel
control-ﬂow attacks,” in Proceedings of the 14th ACM conference on
Computer and communications security. ACM, 2007, pp. 103–115.
[76] D. Gao, M. K. Reiter, and D. Song, “Binhunt: Automatically ﬁnding
semantic differences in binary programs,” in International Conference
on Information and Communications Security.
Springer, 2008, pp.
238–255.
[77] F. Brasser, U. M¨uller, A. Dmitrienko, K. Kostiainen, S. Capkun, and
A.-R. Sadeghi, “Software grand exposure:{SGX} cache attacks are
practical,” 2017.
[78] M. Harman, A. Lakhotia, and D. W. Binkley, “Theory and algorithms
for slicing unstructured programs,” Information & Software Technology,
vol. 48, no. 7, pp. 549–565, 2006.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:26:38 UTC from IEEE Xplore.  Restrictions apply. 
13