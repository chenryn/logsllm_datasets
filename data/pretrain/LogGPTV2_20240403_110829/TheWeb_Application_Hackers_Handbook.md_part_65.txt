occurred#
Here, the fragment string is still part of the URL. Therefore, it is stored
in the DOM and will be processed by the vulnerable client-side script.
However, because browsers do not submit the fragment portion of the
URL to the server, the attack string is not even sent to the server and
therefore cannot be blocked by any kind of server-side fi lter. Because the
client-side script extracts everything after message=, the payload is still
copied into the HTML page source.
TRY IT!
http://mdsec.net/error/76/
http://mdsec.net/error/82/
COMMON MYTH
“We check every user request for embedded script tags, so no XSS attacks are
possible.”
Aside from the question of whether any fi lter bypasses are possible, you
have now seen three reasons why this claim can be incorrect:
n In some XSS fl aws, the attacker-controllable data is inserted directly into
an existing JavaScript context, so there is no need to use any script tags
or other means of introducing script code. In other cases, you can inject
an event handler containing JavaScript without using any script tags.
cc1122..iinndddd 449900 88//1199//22001111 1122::1122::3344 PPMM
Stuttard c12.indd V2 - 08/10/2011 Page 491
Chapter 12 n Attacking Users: Cross-Site Scripting 491
n If an application receives data via some out-of-band channel and renders
this within its web interface, any stored XSS bugs can be exploited with-
out submitting any malicious payload using HTTP.
n Attacks against DOM-based XSS may not involve submitting any malicious
payload to the server. If the fragment technique is used, the payload
remains on the client at all times.
Some applications employ a more sophisticated client-side script that performs
stricter parsing of the query string. For example, it may search the URL for the
parameter name followed by the equals sign but then extract what follows only
until it reaches a relevant delimiter such as & or #. In this case, the two attacks
described previously could be modifi ed as follows:
http://mdsec.net/error/79/Error.ashx?foomessage=&message=Sorry%2c+an+error+occurred
http://mdsec.net/error/79/Error.ashx#message=
In both cases, the fi rst match for message= is followed immediately by the
attack string, without any intervening delimiter, so the payload is processed
and copied into the HTML page source.
TRY IT!
http://mdsec.net/error/79/
In some cases, you may fi nd that complex processing is performed on DOM-
based data. Therefore, it is diffi cult to trace all the different paths taken by user-
controllable data, and all the manipulation being performed, solely through static
review of the JavaScript source code. In this situation, it can be benefi cial to use
a JavaScript debugger to monitor the script’s execution dynamically. The FireBug
extension to the Firefox browser is a full-fl edged debugger for client-side code
and content. It enables you to set breakpoints and watches on interesting code
and data, making the task of understanding a complex script considerably easier.
COMMON MYTH
“We’re safe. Our web application scanner didn’t fi nd any XSS bugs.”
As you will see in Chapter 19, some web application scanners do a rea-
sonable job of fi nding common fl aws, including XSS. However, it should be
evident at this point that many XSS vulnerabilities are subtle to detect, and
creating a working exploit can require extensive probing and experimentation.
At the present time, no automated tools can reliably identify all these bugs.
cc1122..iinndddd 449911 88//1199//22001111 1122::1122::3344 PPMM
Stuttard c12.indd V2 - 08/10/2011 Page 492
492 Chapter 12 n Attacking Users: Cross-Site Scripting
Preventing XSS Attacks
Despite the various manifestations of XSS, and the different possibilities for
exploitation, preventing the vulnerability itself is in fact conceptually straightfor-
ward. What makes it problematic in practice is the diffi culty of identifying every
instance in which user-controllable data is handled in a potentially dangerous
way. Any given page of an application may process and display dozens of items
of user data. In addition to the core functionality, vulnerabilities may arise in
error messages and other locations. It is hardly surprising, therefore, that XSS
fl aws are so hugely prevalent, even in the most security-critical applications.
Different types of defense are applicable to refl ected and stored XSS on the one
hand, and to DOM-based XSS on the other, because of their different root causes.
Preventing Refl ected and Stored XSS
The root cause of both refl ected and stored XSS is that user-controllable data is
copied into application responses without adequate validation and sanitization.
Because the data is being inserted into the raw source code of an HTML page,
malicious data can interfere with that page, modifying not only its content but
also its structure — breaking out of quoted strings, opening and closing tags,
injecting scripts, and so on.
To eliminate refl ected and stored XSS vulnerabilities, the fi rst step is to iden-
tify every instance within the application where user-controllable data is being
copied into responses. This includes data that is copied from the immediate
request and also any stored data that originated from any user at any prior time,
including via out-of-band channels. To ensure that every instance is identifi ed,
there is no real substitute for a close review of all application source code.
Having identifi ed all the operations that are potentially at risk of XSS and
that need to be suitably defended, you should follow a threefold approach to
prevent any actual vulnerabilities from arising:
n Validate input.
n Validate output.
n Eliminate dangerous insertion points.
One caveat to this approach arises where an application needs to let users
author content in HTML format, such as a blogging application that allows
HTML in comments. Some specifi c considerations relating to this situation are
discussed after general defensive techniques have been described.
Validate Input
At the point where the application receives user-supplied data that may be cop-
ied into one of its responses at any future point, the application should perform
cc1122..iinndddd 449922 88//1199//22001111 1122::1122::3344 PPMM
Stuttard c12.indd V2 - 08/10/2011 Page 493
Chapter 12 n Attacking Users: Cross-Site Scripting 493
context-dependent validation of this data, in as strict a manner as possible.
Potential features to validate include the following:
n The data is not too long.
n The data contains only a certain permitted set of characters.
n The data matches a particular regular expression.
Different validation rules should be applied as restrictively as possible to
names, e-mail addresses, account numbers, and so on, according to the type of
data the application expects to receive in each fi eld.
Validate Output
At the point where the application copies into its responses any item of data that
originated from some user or third party, this data should be HTML-encoded
to sanitize potentially malicious characters. HTML encoding involves replacing
literal characters with their corresponding HTML entities. This ensures that
browsers will handle potentially malicious characters in a safe way, treating
them as part of the content of the HTML document and not part of its structure.
The HTML encodings of the primary problematic characters are as follows:
n “ —&quot;
n ‘ —&apos;
n & —&amp;
n  —&gt;
In addition to these common encodings, any character can be HTML-encoded
using its numeric ASCII character code, as follows:
n % —&#37;
n * —&#42;
It should be noted that when inserting user input into a tag attribute value, the
browser HTML-decodes the value before processing it further. In this situation,
the defense of simply HTML-encoding any normally problematic characters may
be ineffective. Indeed, as we have seen, for some fi lters the attacker can bypass
HTML-encoding characters in the payload herself. For example:
As described in the following section, it is preferable to avoid inserting user-
controllable data into these locations. If this is considered unavoidable for some
reason, great care needs to be taken to prevent any fi lter bypasses. For example,
cc1122..iinndddd 449933 88//1199//22001111 1122::1122::3355 PPMM
Stuttard c12.indd V2 - 08/10/2011 Page 494
494 Chapter 12 n Attacking Users: Cross-Site Scripting
if user data is inserted into a quoted JavaScript string in an event handler, any
quotation marks or backslashes in user input should be properly escaped with
backslashes, and the HTML encoding should include the & and ; characters to
prevent an attacker from performing his own HTML encoding.
ASP.NET applications can use the Server.HTMLEncode API to sanitize com-
mon malicious characters within a user-controllable string before this is copied
into the server’s response. This API converts the characters “& into their
corresponding HTML entities and also converts any ASCII character above 0x7f
using the numeric form of encoding.
The Java platform has no equivalent built-in API; however, it is easy to con-
struct your own equivalent method using just the numeric form of encoding.
For example:
public static String HTMLEncode(String s)
{
StringBuffer out = new StringBuffer();
for (int i = 0; i  0x7f || c==’”’ || c==’&’ || c==’’)
out.append(“&#” + (int) c + “;”);
else out.append(c);
}
return out.toString();
}
A common mistake developers make is to HTML-encode only the characters
that immediately appear to be of use to an attacker in the specifi c context. For
example, if an item is being inserted into a double-quoted string, the applica-
tion might encode only the “ character. If the item is being inserted unquoted
into a tag, it might encode only the > character. This approach considerably
increases the risk of bypasses being found. As you have seen, an attacker can
often exploit browsers’ tolerance of invalid HTML and JavaScript to change
context or inject code in unexpected ways. Furthermore, it is often possible to
span an attack across multiple controllable fi elds, exploiting the different fi ltering
being employed in each one. A far more robust approach is to always HTML-
encode every character that may be of potential use to an attacker, regardless
of the context where it is being inserted. To provide the highest possible level
of assurance, developers may elect to HTML-encode every nonalphanumeric
character, including whitespace. This approach normally imposes no measur-
able overhead on the application and presents a severe obstacle to any kind of
fi lter bypass attack.
The reason for combining input validation and output sanitization is that this
involves two layers of defenses, either one of which provides some protection
if the other one fails. As you have seen, many fi lters that perform input and
cc1122..iinndddd 449944 88//1199//22001111 1122::1122::3355 PPMM
Stuttard c12.indd V2 - 08/10/2011 Page 495
Chapter 12 n Attacking Users: Cross-Site Scripting 495
output validation are subject to bypasses. By employing both techniques, the
application gains some additional assurance that an attacker will be defeated
even if one of its two fi lters is found to be defective. Of the two defenses, the
output validation is the most important and is mandatory. Performing strict
input validation should be viewed as a secondary failover.
Of course, when devising the input and output validation logic itself, great
care should be taken to avoid any vulnerabilities that lead to bypasses. In par-
ticular, fi ltering and encoding should be carried out after any relevant canoni-
calization, and the data should not be further canonicalized afterwards. The
application should also ensure that the presence of any NULL bytes does not
interfere with its validation.
Eliminate Dangerous Insertion Points
There are some locations within the application page where it is just too inher-
ently dangerous to insert user-supplied input, and developers should look for
an alternative means of implementing the desired functionality.
Inserting user-controllable data directly into existing script code should be
avoided wherever possible. This applies to code within  tags, and also
code within event handlers. When applications attempt to do this safely, it is
frequently possible to bypass their defensive fi lters. And once an attacker has
taken control of the context of the data he controls, he typically needs to per-
form minimal work to inject arbitrary script commands and therefore perform
malicious actions.
Where a tag attribute may take a URL as its value, applications should gener-
ally avoid embedding user input, because various techniques may be used to
introduce script code, including the use of scripting pseudo-protocols.
A further pitfall to avoid is situations where an attacker can manipulate the
character set of the application’s response, either by injecting into a relevant
directive or because the application uses a request parameter to specify the
preferred character set. In this situation, input and output fi lters that are well
designed in other respects may fail because the attacker’s input is encoded
in an unusual form that the fi lters do not recognize as potentially malicious.
Wherever possible, the application should explicitly specify an encoding type
in its response headers, disallow any means of modifying this, and ensure that
its XSS fi lters are compatible with it. For example:
Content-Type: text/html; charset=ISO-8859-1
Allowing Limited HTML
Some applications need to let users submit data in HTML format that will be
inserted into application responses. For example, a blogging application may
cc1122..iinndddd 449955 88//1199//22001111 1122::1122::3355 PPMM
Stuttard c12.indd V2 - 08/10/2011 Page 496
496 Chapter 12 n Attacking Users: Cross-Site Scripting
allow users to write comments using HTML, to apply formatting to their com-
ments, embed links or images, and so on. In this situation, applying the preceding
measures across the board will break the application. Users’ HTML markup will
itself be HTML-encoded in responses and therefore will be displayed on-screen
as actual markup, rather than as the formatted content that is required.
For an application to support this functionality securely, it needs to be robust
in allowing only a limited subset of HTML, which does not provide any means
of introducing script code. This must involve a whitelist approach in which only
specifi c tags and attributes are permitted. Doing this successfully is a nontrivial
task because, as you have seen, there are numerous ways to use seemingly
harmless tags to execute code.
For example, if the application allows the  and  tags and does not
consider any attributes used with these tasks, the following attacks may be
possible:
Click here
Furthermore, if the application allows the apparently safe combination of the
 tag with the href attribute, the following attack may work:
Cl
ick here
Various frameworks are available to validate user-supplied HTML markup
to try to ensure that it does not contain any means of executing JavaScript, such
as the OWASP AntiSamy project. It is recommended that developers who need
to allow users to author limited HTML should either use a suitable mature
framework directly or should closely examine one of them to understand the
various challenges involved.
An alternative approach is to make use of a custom intermediate markup
language. Users are permitted to use the limited syntax of the intermediate
language, which the application then processes to generate the corresponding
HTML markup.
Preventing DOM-Based XSS
The defenses described so far obviously do not apply directly to DOM-based
XSS, because the vulnerability does not involve user-controlled data being
copied into server responses.
Wherever possible, applications should avoid using client-side scripts to
process DOM data and insert it into the page. Because the data being processed
is outside of the server’s direct control, and in some cases even outside of its
visibility, this behavior is inherently risky.
cc1122..iinndddd 449966 88//1199//22001111 1122::1122::3355 PPMM
Stuttard c12.indd V2 - 08/10/2011 Page 497
Chapter 12 n Attacking Users: Cross-Site Scripting 497
If it is considered unavoidable to use client-side scripts in this way, DOM-based
XSS fl aws can be prevented through two types of defenses, corresponding to
the input and output validation described for refl ected XSS.
Validate Input
In many situations, applications can perform rigorous validation on the data being
processed. Indeed, this is one area where client-side validation can be more effec-
tive than server-side validation. In the vulnerable example described earlier, the
attack can be prevented by validating that the data about to be inserted into the
document contains only alphanumeric characters and whitespace. For example:
In addition to this client-side control, rigorous server-side validation of URL
data can be employed as a defense-in-depth measure to detect requests that may
contain malicious exploits for DOM-based XSS fl aws. In the same example just
described, it would actually be possible for an application to prevent an attack
by employing only server-side data validation by verifying the following:
n The query string contains a single parameter.
n The parameter’s name is message (case-sensitive check).
n The parameter’s value contains only alphanumeric content.
With these controls in place, it would still be necessary for the client-side
script to parse the value of the message parameter properly, ensuring that any
fragment portion of the URL was not included.
Validate Output
As with refl ected XSS fl aws, applications can perform HTML encoding of user-
controllable DOM data before it is inserted into the document. This enables
all kinds of potentially dangerous characters and expressions to be displayed