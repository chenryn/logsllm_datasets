    {
        v4 = 0x101
    }
    if(cod2)
    {
        v4 = 0x303;
    }
    if(cod4)
    {
        v4 = 0x202;
    }
    some_func(v4 - 1, 0)
对于这样的代码如果直接使用第一种方式实际只会得到 `v4 = 0x201`，会漏掉两种可能值。
为了缓解这种情况，实现了一个基于IDA伪代码的参数值识别脚本，功能实现于`decompile_tracer`函数。
其主要思路也是类似，首先定位需要获取的参数，然后提取参数字符串，分别跟踪参数的每个组成部分，找到赋值点，然后求出每个部分的值，从而得到参数的所有取值.
还是以上面的为例，假设需要获取参数1的值，处理流程如下
  1. 首先提取得到参数1的组成部分为 `v4` 和 1，1为常量，只需要追踪`v4`
  2. 然后往上追踪，找到`v4`的可能值为`0x202`， `0x303`， `0x101`
  3. 最后得到`v4 - 1`的所有可能值为`0x201`， `0x302`， `0x100`
### 任务自动化识别
首先找到`ke_task_create`的交叉引用，然后利用`ArgumentTracker`中基于汇编的参数获取模式来提取参数的值
    def dump_ke_task_create():
        retsult = {}
        logger = CustomLogger()
        m = CodeEmulator()
        at = ArgumentTracker()
        ke_task_create_addr = idaapi.get_name_ea(idaapi.BADADDR, "ke_task_create")
        for xref in XrefsTo(ke_task_create_addr, 0):
            frm_func = idc.get_func_name(xref.frm)
            ret = at.track_register(xref.frm, "r1")
            if ret.has_key("target_ea"):
                if m.emulate(ret['target_ea'], xref.frm):
                    reg = m.mu.reg_read(UC_ARM_REG_R1)
                    retsult[xref.frm] = reg
首先获取`ke_task_create`的地址，然后查找其交叉引用
  1. 对于每个交叉引用使用`track_register`来追踪`r1`寄存器（即参数二）
  2. `ret['target_ea']`表示赋值点，然后使用`CodeEmulator`从赋值点执行到函数调用的位置（`xref.frm`）
  3. 执行成功后读取`r1`的值，即可得到任务描述符的地址
拿到任务描述符的地址后下面需要定义描述符的类型，首先看看`ke_task_desc`的定义
    /// Task descriptor grouping all information required by the kernel for the scheduling.
    struct ke_task_desc
    {
        /// Pointer to the state handler table (one element for each state).
        const struct ke_state_handler* state_handler;
        /// Pointer to the default state handler (element parsed after the current state).
        const struct ke_state_handler* default_handler;
        /// Pointer to the state table (one element for each instance).
        ke_state_t* state;
        /// Maximum number of states in the task.
        uint16_t state_max;
        /// Maximum index of supported instances of the task.
        uint16_t idx_max;
    };
这里主要关注`ke_state_handler`，该结构中有一个`msg_table`，里面是一些函数指针和其对应的消息`id`
    /// Element of a message handler table.
    struct ke_msg_handler
    {
        /// Id of the handled message.
        ke_msg_id_t id;
        /// Pointer to the handler function for the msgid above.
        ke_msg_func_t func;
    };
    /// Element of a state handler table.
    struct ke_state_handler
    {
        /// Pointer to the message handler table of this state.
        const struct ke_msg_handler *msg_table;
        /// Number of messages handled in this state.
        uint16_t msg_cnt;
    };
我们也就按照结构体定义使用相应的`IDApython`的接口即可（注意：使用`idapython`设置结构体前要确保对应的结构体已经导入到IDB中）
    for k, v in retsult.items():
            frm_func = idc.get_func_name(k)
            task_desc_ea = v
            task_desc_name = "{}_task_desc".format(frm_func.split("_init")[0])
            define_ke_task_desc(task_desc_ea, task_desc_name)
            handler = idaapi.get_dword(task_desc_ea + 4)
            define_ke_state_handler(handler)
## 识别消息和回调函数的交叉引用
Riviera
Waves系统中任务之间使用消息来传递消息，中断处理程序做了简单处理后就会通过发送消息交给对应的消息处理函数进行处理，常用方式是使用`ke_msg_alloc`分配消息，然后使用`ke_msg_send`将消息发送出去。
ke_msg_alloc的定义如下
    /**
     ****************************************************************************************
     * @brief Allocate memory for a message
     *
     * @param[in] id        Message identifier
     * @param[in] dest_id   Destination Task Identifier
     * @param[in] src_id    Source Task Identifier
     * @param[in] param_len Size of the message parameters to be allocated
     *
     */
    void *ke_msg_alloc(ke_msg_id_t const id, ke_task_id_t const dest_id,
                       ke_task_id_t const src_id, uint16_t const param_len);
其中第一个参数为消息ID，在系统中有很多消息处理回调函数表，回调函数表大体结构都是由消息ID和函数指针组成，在处理消息发送出去后，系统会根据消息中的其他参数（比如dest_id）找到相应的回调函数表，然后根据消息ID去表中找到对应的回调函数，最后调用回调函数处理消息数据。
那我们就可以找到所有`ke_msg_alloc`的调用点，然后提取出id，就可以知道每个函数使用了哪些消息id，然后根据消息id去二进制里面搜索，找到消息处理函数，最后将两者建立交叉引用，这样在逆向分析的时候就很舒服了。
示例
    rom_ble:07F17C4E                 LDR             R0, =0x805 ; id
    rom_ble:07F17C50
    rom_ble:07F17C50 loc_7F17C50                             ; DATA XREF: sub_7F06B94↑r
    rom_ble:07F17C50                                         ; sub_7F0CE30↑r ...
    rom_ble:07F17C50                 BL              ke_msg_alloc
建立完交叉引用后在调用`ke_msg_alloc`的位置，可以看的其事件消息的处理函数可能为`sub_7F06B94`和`sub_7F0CE30`。
下面介绍根据消息ID搜索消息处理函数的实现
    def search_msg_handler(msg_id):
        ret = []
        data = " ".join(re.findall(".{2}", struct.pack("H", msg_id).encode("hex")))
        addr = 0x07F00000
        find_addr = idc.find_binary(addr, SEARCH_DOWN, data)
        while find_addr != idaapi.BADADDR:
            func_addr = idaapi.get_dword(find_addr + 4)
            if is_func_ea(func_addr):
                print "  msg_id 0x{:X} @ 0x{:X}, handler: 0x{:X}".format(msg_id, find_addr, func_addr)
                ret.append(func_addr)
            # custom_msg_handler
            func_addr = idaapi.get_dword(find_addr + 2)
            if is_func_ea(func_addr):
                print "  [custom_msg_handler] msg_id 0x{:X} @ 0x{:X}, handler: 0x{:X}".format(msg_id, find_addr, func_addr)
                ret.append(func_addr)
            find_addr = idc.find_binary(find_addr + 1, SEARCH_DOWN, data)
        return ret
经过逆向分析，发现消息处理函数和消息id的关系主要有两种情况
  1. `消息id起始地址 + 2`的位置是函数地址
  2. `消息id起始地址 + 4`的位置是函数地址
两种情况分别对应`custom_msg_handler`和`ke_msg_handler`两种定义消息回调函数的结构体
    /// Custom message handlers
    struct custom_msg_handler 
    {
        ke_task_id_t task_id;
        ke_msg_id_t id;
        ke_msg_func_t func;
    };
    /// Element of a message handler table.
    struct ke_msg_handler
    {
        ke_msg_id_t id;
        ke_msg_func_t func;
    };
脚本也是这样的逻辑，分别尝试这两个位置，如果是函数的话就认为是对应的回调函数，这样处理的坏处是没有考虑消息的其他参数，可能导致有的消息处理函数对于某些场景实际是调用不了的，但是还是会被我们的脚本建立交叉引用，所以只能说是
**可能的消息处理函数** ，不过这样也可以简化很多分析流程了。
最后使用IDA函数设置交叉引用即可
    def add_ref(frm, to):
        idaapi.add_dref(frm, to, idaapi.dr_R)
        idaapi.add_dref(to, frm, idaapi.dr_R)
## 脚本使用方式
首先使用argument_tracker.py获取固件中每个函数的msg id的使用情况，然后将结果导出到文件中
    https://github.com/hac425xxx/BLE-DA145XX/blob/main/argument_tracker.py#L610
然后使用search_msg_handler.py导入之前获取到的结果，并搜索消息ID对应的回调函数，最后为两者建立交叉引用。
    https://github.com/hac425xxx/BLE-DA145XX/blob/main/search_msg_handler.py#L70
## 总结
本文介绍开始分析一个芯片的一些流程，介绍一些辅助人工的脚本的实现原理。