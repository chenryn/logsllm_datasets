would require a more sophisticated matching process.
5.1.2 Updating Function Pointers. We first scan the stack,
heap, and registers for values in the range of the code section
addresses. We replace all pointers we find with the addresses
of the corresponding functions in the new binary. This heuris-
tic might misidentify constants as function pointers, but all
pointers it identifies correctly will also be updated correctly,
as long as the new binary has the same functions. Run-
timeASLR implements a similar strategy, but complements it
with an offline pointer tracking analysis to distinguish actual
function pointer values from constant values [35]. One could
add such an analysis to CoDaRR to improve its function
pointer updating precision if desired.
5.2 Optimizations
One of the main challenges (C-3) we set out to meet was
to minimize the impact of our rerandomization mechanism
on the program’s run-time performance. As part of our so-
lution, we chose to update masks by removing the entire
code segment of the original program and to map in the
code segment from a different pre-compiled binary. On top
of this, our monitor does extensive caching of metadata and
pre-computes most data structures involved in the rerandom-
ization process. Specifically, CoDaRR caches the metadata
sections containing the Mask Table and Static Mask Mapping
(see Sections 4.4 and 4.5) and the debug metadata sections
# Equivalence
Classes
Nginx
Thttpd
886
508
Allocation Count
Max
2,947
569
Avg
7.3
2.94
Table 1: Total number of static equivalence classes
and number of allocations per class.
Globals Heap
Nginx
Thttpd
10,586
4,597
4,320
136
Registers
and Stack
Spills
38
16
Table 2: Average number of bytes rewritten at
dynamic rerandomization time. Globals and Heap
columns show bytes re-encrypted; Registers and
Stack Spills are in-flight masks replaced.
containing the DSR mask metadata (see Section 4.4), for
the binary being rerandomized, as well as those of other po-
tential variants. We also pre-compute the ReturnAddressMap
structures ahead of time (see Section 5.1.1). Finally, to read
and write the protected program’s memory efficiently, we
map the relevant parts of its address space directly into the
monitor using the /proc/pid/mem/ interface.
6 EVALUATION
We evaluated and analyzed the performance and security of
CoDaRR in depth using standard benchmark suites, server
applications, as well as real-world application scenarios. For
all our experiments, we used an Intel Core i7-8700K machine
with 32GB of RAM.
6.1 Performance
We evaluated the performance impact of our rerandomiza-
tion in the context of two popular and widely used web
server applications, Thttpd and Nginx, and the impact of
our instrumentation using standard benchmarks.
For context, Table 1 shows the number of equivalence
classes as determined by the DSR analysis for each server
application, along with the average and maximum number
of allocation sites in each class.
6.1.1
Impact of Rerandomization. To assess the performance
impact under realistic conditions we tested the version
1.12.0 of the Nginx web server with our rerandomization
enabled for different rerandomization intervals. We then ran
ApacheBench version 2.3 to generate web traffic, configuring
it to send a total of 5, 000, 000 web page requests over 200
concurrent network connections, serving a static web page
for each of these requests.
The average throughput of the Nginx process due to
rerandomization in those experiments is shown in Figure 4.
Figure 4: Average throughput of Nginx when pro-
tected by CoDaRR. We plot the median transfer rate
for 5M requests against different rerandomization
intervals going from 500ms to 10s. The green line
shows throughput for baseline DSR without reran-
domization.
Figure 5: Average throughput of Thttpd using the
same configuration as in Figure 4.
As expected, the overall transfer rate (i.e., KB/sec) due
to rerandomization drops as rerandomization is triggered
more frequently. However, throughput stabilizes between
2.5s and 3s, approaching average baseline DSR throughput
(i.e., 40774.81 KB/s depicted as the green line in Figure 4).
Notably, the throughput degradation due to CoDaRR’s reran-
domization is 3.85% at around 2.3s intervals, the minimum
time required to execute a JIT-ROP attack. As we discuss
in more detail in Section 6.2, the fastest JIT-ROP attack
takes 2.3s, while successful BROP and side-channel attacks
would take in the order of minutes. This means that CoDaRR
provides practical performance at rerandomization intervals
that would effectively mitigate these types of attacks. We
conducted the same experiment for Thttpd and observed sim-
ilar results as shown in Figure 5. This shows that CoDaRR
Figure 6: SPEC 2006 performance of CoDaRR in-
strumentation (without rerandomization). Each col-
umn shows the median run time of the benchmark
with CoDaRR, normalized to the median run time
without our tool.
can handle even complex server applications such as Nginx
and Thttpd, while offering practical performance despite fre-
quent rerandomization. The measurements faster than DSR
baseline for long rerandomization intervals in Figures [ 4, 5]
are simply noisy measurements of throughput.
Table 2 shows the average amount of data, in bytes, rewrit-
ten by CoDaRR during the rerandomization process in the
preceding experiments. Nginx, a larger service, naturally
required re-encrypting more data than Thttpd, a minimal
service. The Registers and Stack Spills column shows the
average number of bytes of live mask values that CoDaRR
had to replace in registers or stack slots (see Section 4.4).
In our experiments we observed no dynamic stack allocated
values that needed to be re-encrypted, which is simply a
consequence of these particular applications not storing any
encryptable objects on the stack at the random program
locations where the monitor triggered rerandomization.
6.1.2 Impact of Dynamic Metadata Tracking. Compared to
static DSR approaches, CoDaRR’s instrumentation should
not add observable performance overhead for running appli-
cations since most of our metadata is produced at compile
time; this does not affect the application’s run-time behavior.
The only part that affects the program’s run-time behavior is
metadata tracking for heap and dynamic local variables. To
assess the overall run-time overhead of our dynamic metadata
tracking, we instrumented and ran the SPEC CINT 2006
benchmark suite, including all C and C++ benchmarks. We
ran all benchmarks three times in their standard configuration
on reference inputs, and report CoDaRR’s run-time overhead
in Figure 6. The run-time overhead is normalized to baseline
performance (without DSR instrumentation), and depicts
the impact of dynamic metadata tracking (i.e., not rerandom-
ization, which we evaluate separately in Section 6.1.1). The
average overhead added by CoDaRR instrumentation was
0.98% (of the 42.12% total overhead, 41.14% was incurred
500950140018502300275032003650410045505000545059006350680072507700815086009050950099503000032000340003600038000400004200044000460004800050000Rerandomization Interval (ms)Transfer Rate (kb/s)5001200175021502700310035004050445048505500590063006700710075007900830088509250965080000850009000095000100000105000110000115000120000125000130000Rerandomization Interval (ms)TransferRate(kb/s)Overhead (%)perlbenchbzip2gccmcfgobmkhmmersjenglibquantumh264refomnetppastarxalancbmkMean0255075100125baseline DSRCoDaRRby the baseline DSR itself [7] without CoDaRR). Although
prior DSR implementations did not run SPEC 2006, these
results are consistent with the overheads reported in the prior
work [7]. Note that, to thoroughly measure the impact of
CoDaRR with a large workload, we experimented upon the
DSR approach that encrypts all data in memory [7]. Thus,
the baseline DSR overhead would be much lower if we base
other DSR approaches that encrypt only a limited set of
data [8, 11]. Moreover, recent research shows that this DSR
instrumentation overhead can be reduced significantly with
dedicated hardware support to about 6% [7].
6.2 Security Analysis
We now turn towards the security guarantees of CoDaRR.
Recall, that in our threat model (Section 3.1) we assume
a strong adversary with two fundamentally different ways
of disclosing data, (i) exploiting a memory-corruption vul-
nerability or (ii) exploiting a remote side channel such as
NetSpectre [43].
6.2.1 Memory Corruption Attacks. By XOR-encrypting all
program data with per-equivalence class keys, DSR schemes
offer strong protection against adversaries that leak or cor-
rupt data using memory corruption bugs. As we showed in
Section 3.2, however, DSR does not completely rule out suc-
cessful memory corruption attacks, since adversaries may be
able to infer encryption keys through known plaintext at-
tacks. Inferred keys can then be used to adapt the subsequent
exploit and circumvent the defense. This strategy of leaking
randomization secrets to adapt the subsequent exploit has
been used successfully to circumvent code-centric defenses in
the past [10, 44]. These attacks can, however, be very slow.
For instance, the fastest JIT-ROP attack succeeded within
2.3s [44], while a successful BROP attack takes in the order
of minutes time (i.e., up to 20 minutes for yaSSL) [10].
CoDaRR counters adaptive data-oriented exploits in two
ways. First, we enable explicit rerandomization of the applica-
tion at run time by exposing an API to application developers.
This way, CoDaRR can leverage expert knowledge about the
program structure, e.g., to enforce rerandomization for secu-
rity sensitive parts of server applications such as refreshing
keys before handling new client connections or upon receiving
certain trigger events (e.g., SIGSEGV). From the perspective
of the attacker this disrupts any attempts of correlating dis-
closed information between separate connections. As a result,
CoDaRR mitigates adaptive strategies like BROP which rely
on correlation between connections. Second, we additionally
employ a continuous rerandomization with an adjustable tim-
ing window of at most 2 seconds. This puts a significant time
constraint on the attacker, successfully thwarting JIT-ROP
style attacks.
6.2.2 Side Channel Attacks. In contrast
to memory-
corruption based attacks, side channel attacks are limited
to information disclosure. This is why, in the context of
DSR-based defenses, an adversary has to use the side channel
to leak the DSR key data in the first step. We demonstrated
one example of such an attack in Section 3. We were able to
leak a DSR key from a register by mistraining the branch
predictor with Spectre V2 [30]. This attack succeeded within
25 seconds, although we believe that further optimization
could lower this time somewhat. Still, with our default
setting of at least one rerandomization event every 2 seconds,
CoDaRR should be able to defend against Spectre-style
attacks.
Furthermore, this attack required a local attacker process
pinned to the same physical CPU core as the DSR-protected
process. In a more realistic scenario, the attacker would not
have control over a local process, and would have to resort to
remote side channel attacks such as NetSpectre instead [43].
NetSpectre leaks bits from the application memory at a much
slower rate of about 1 bit per minute. Leaking a single byte
of a DSR key would therefore take 8 minutes, which is much
longer than our periodic rerandomization interval.
Finally, we would like to point out that (contrary to the pro-
tected application) the monitor component does not expose
any external interface, and hence, would not be vulnerable
to such exploits based on speculative execution.
7 DISCUSSION
7.1 Generating Variants
For our research prototype, we pre-compiled binaries with
randomized DR keys and code layouts for our variants. Alter-
natively, it would be straightforward to use binary rewriting
to produce new variants at runtime as part of the rerandom-
ization process. This rewriter would simply need to know
where DR key constants are located in the binary and replace
these constants. Previous work [16, 25, 50, 51] has shown
binary rewriting approaches can be employed for fine-grained
code layout rerandomization.
7.2 Attack Against Heap Metadata
In order not to introduce another attack surface, we keep
metadata out of the protected process memory as much as
possible. We must store heap metadata in memory at run
time (Section 4.5), and thus we need to consider the security
implications of this in-process metadata. The attacker may
try to leak the content of this metadata. This would allow an
adversary to read heap object addresses and the associated
indices into the Data Randomization key table. Using this
information, the attacker could infer what heap allocations
are in the same equivalent class. Knowing these indices, how-
ever, will not allow the attacker to learn the actual DR keys
that used to encrypt the heap data because the key table
itself is never loaded into process memory. Recall that we
assume DR keys used in masking operations are embedded
as constants into code memory without read permissions.
An active attacker may attempt to corrupt this in-
memory metadata to manipulate the Monitor’s heap data
re-encryption process. Corrupting an address entry of this
metadata, for example, the attacker may trick CoDaRR into
re-encrypting unintended heap data, leaving the original
data unchanged after rerandomization. However, this still
does not allow the attacker to manipulate the program
in the intended way because after rerandomization, the
program will decrypt this data with a new encryption key.
This incorrect decryption of data will lead to incorrect,
unpredictable program behavior, since the correct plaintext
value cannot be recovered.
8 RELATED WORK
Rerandomization has been proposed in several prior works,
but has so far only been applied to the protected program’s
memory layout and to pointers [9, 15, 16, 23, 25, 35, 50, 51].
These techniques rerandomize the memory layout of the pro-
tected application and update all references that exist in
the program accordingly. Whereas code references in exe-
cutable code are easy to identify and update, code references
in data sections are not. OS-level ASR [25] and TASR [9]
therefore modify the compiler to emit location information
for code pointers in data sections. Remix only applies intra-