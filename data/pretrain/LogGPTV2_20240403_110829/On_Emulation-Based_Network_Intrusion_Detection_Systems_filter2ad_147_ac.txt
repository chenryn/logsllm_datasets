CPU when executing four diﬀerent types of operations (see Section 3.2 for a
description of the operations).
We create a shellcode encoder which consists of XORing the shellcode with a
random key and prepending a decoder armored with emulator detection code.
In more detail, the value of the decryption key is determined by the emulator
detection code: in case the shellcode is being emulated, the key will be incorrect
and the decoding will fail. Both Libemu and Nemu are unable to detect the
modiﬁed shellcodes.
Limitations of Existing Heuristics
Evasion of Kernel32.dll Base Address Resolution Heuristics. We design
two techniques to bypass the Kernel32.dll base address resolution heuristics of Nemu.
An attacker only needs to use one of the following techniques to bypass Nemu.
The ﬁrst technique consists of walking the Safe Exception Handler (SEH) chain
until a pointer to ntdll.dll is found (see Figure 2). We scan the entire stack until
we ﬁnd a frame with value 0xFFFFFFFF, which precedes the pointer to the OS
SEH record lying in ntdll.dll. To make sure a valid OS SEH pointer is found (and
not some random 0xFFFFFFFF value) we compare the pointer value against the
frame located 16 bytes away from it, which is always the return address of the top
stack frame. Depending on the windows version, this address points either into nt-
dll.dll or kernel32.dll. Once we ﬁnd an address in ntdll.dll, we do a backward scan
from the discovered location until we encounter the PE header structure. We rec-
ognize this structure because its starting bytes are 0x4D, 0x5A (MZ in ASCII).
The address of the PE header structure is the base address of any mapped library.
Therefore, we now have a pointer to the base address of ntdll.dll. By using this
information we can call the LdrLoadDLL function inside ntdll.dll. We use the Ldr-
LoadDLL function to load Kernel32.dll and from there calling the LoadLibraryA
function inside Kernel32.dll. It is worth mentioning that within diﬀerent versions
of the Windows OS, the distance between functions is static (even in existence of
enabled ASLR, and that holds for all global return addresses).
Emulation Based NIDS
395
Fig. 2. SEH scanning technique for resolving the base address of Kernel32.dll
The second technique works in a more reliable way. In the x86 architecture
the EBP register points to the current stack frame. Each stack frame starts
with a pointer to the previous stack frame, all the way to the top stack frame.
In Windows processes are created by the operating system using the NtCre-
ateProcess API, which stores on the top stack frame as return address a pointer
to ntdll.dll. Therefore, by walking the stack frames from the current stack frame
to the top stack frame we have a pointer to ntdll.dll. We use this information in
the same way described for the previous technique.
We use these two techniques to create two shellcodes that call the LoadLibrary
function inside kernel32.dll and get the kernel32.dll base address. We then feed
these shellcodes to Nemu, which does not trigger any alert. The reason why Nemu
fails in the detection is that none of the eight diﬀerent Kernel32.dll base address
resolution heuristics in Nemu trigger on the operations we carry out. In more
detail, we do not access any of the FS addresses (which are Nemu triggers), we
do not perform memory reads on kernel32.dll (which is also a trigger for Nemu)
and we do not access or modify any of the SEH handlers. Finally, we also notice
that Nemu does not even seem to properly implement stack frames. In fact, EBP
always points to unreadable memory.
Evasion of GetPC Code Heuristics. Both Libemu and Nemu use the GetPC
code heuristic to identify a shellcode. Both Libemu and Nemu approach GetPC
code detection in the same way, by checking whether the program counter is
somehow stored in a memory location by means of a so-called seeding instruction
subsequently read from that memory location. In practice, this means scanning
for seeding instructions (for both systems only CALL and FSTENV/FSAVE are
396
A. Abbasi et al.
considered seeding instructions), emulating the trace and seeing if the stored
address is somehow read and used.
We implement two diﬀerent techniques to get the start address of the shell-
code without triggering these GetPC heuristics. Our ﬁrst technique, called stack
scanner, only works with exploits where the shellcode ends up on the stack
(and therefore is limited in scope). It works by scanning upwards from the stack
pointer (into used stack space) until a randomized marker is recognized. When
the randomized marker is recognized, its address is saved and serves as the
start address of the shellcode. The second technique, called stack constructor,
works in all exploit scenarios and involves converting any given payload to a
stack-constructed payload. The payload is divided in blocks of 4 bytes which are
pushed onto the stack in reverse order before a jump is taken to the ESP register
(thus executing the instructions pushed on the stack). Since the shellcode is now
located on the stack, this means that the ESP register (which points to the top
of the stack) also is the current EIP, hence we know the shellcode starting ad-
dress without resorting to any seeding instruction or reading a pushed/modiﬁed
address from a memory location. We use these two techniques to create two shell-
codes capable of performing a GetPC operation. We then feed these shellcodes
to both Libemu and Nemu. As expected, none of them triggers any alert.
Evasion of Payload Read Heuristics. Nemu includes a heuristic for detect-
ing self-modifying code called Payload Read Threshold (PRT). The heuristic
consist of imposing a threshold on the number of unique read operations exe-
cuted by the payload, combined with the presence of GetPC code. To circumvent
this heuristic [17] proposes to use syscalls to execute read operations instead of
reading directly in the payload shellcode. We implement a shellcode using this
approach and notice that despite the fact that the technique has been public
since 2009, the Nemu heuristic has not been updated to detect this technique.
Note that Nemu has another heuristic, which imposes a threshold on the number
of syscalls and could in principle trigger when this kind of evasion is used. How-
ever, the heuristic was designed to detect egg hunting, and as such the threshold
imposed on the number of syscalls is way higher than the number of syscalls
needed in the evasion payload. For this reason, even this second heuristic is
ineﬀective against our implementation.
Evasion of WX Instructions Heuristics. A threshold of WX instructions
is proposed as a heuristic in [9]. When a given piece of suspect input exceeds
this threshold, a heuristic-ﬂag is triggered. As stated by Skape in [18], Virtual
Mapping can be used as a method to circumvent this heuristic. It involves map-
ping the same physical address to two diﬀerent virtual addresses, using one for
writing operations whilst using the other for execution thus disqualifying the
code as being composed of WX instructions. In order to be able to do virtual
mapping, the shellcode needs to invoke OS APIs, and this step could trigger the
Kernel32.dll heuristic. However, an attacker can combine this technique with the
technique to resolve the Kernel32.dll base address proposed above, which avoids
triggering the corresponding heuristic.
Emulation Based NIDS
397
Evasion of Process Memory Scanning Heuristics. An attacker could scan
for a known fragment of instructions from the target code. Linn et. al. in [19]
already introduced an attack which scans for a 17-byte sequence which forms
the ﬁrst basic block of the execve system call. Also, an attacker could generate
a hash and then iterate through the suitable code-region and check the retrieved
data against the hash. In this way, an emulator would have to brute-force the
hash in order to determine what code fragment to prepare, something that can-
not be done in a reasonable amount of time. Additionally, an attacker could
construct (part of) the decryption key from code fragments obtained through
hash-based searching.
3.2 Evasions Exploiting on Intrinsic Limitations
Limitations of the Emulator
Fragmentation. So-called Swarm or fragmentation attacks [20] are a class of
attacks in which an attacker can create the shellcode decoder in the target pro-
cess memory space using multiple instances of the attack, with each instance
writing a small segment of the decoder at a designated location. After building
the decoder in this fashion, the last attack instance hijacks the control of the
attacked process to start the execution of the decoder while simultaneously in-
cluding the shellcode cipher text. As such, swarm attacks could be considered
a form of fragmented egg-hunting attacks. Swarm attacks can defeat all three
components of EBNIDSes. It will be a severely complicated task to do static
analysis for part of the decoder, in the pre-processor stage. Additionally, due
to the fact that there is no fully valid shellcode present in any of the attack
instances, the emulator is never capable of emulating the decoder and hence no
heuristics are triggered. Attackers should take care, though, to keep the attack
instances small and/or polymorphic enough to avoid triggering signature match-
ing. Swarm attacks present a challenge to EBNIDSes but have the downside of
being applicable only in speciﬁc exploitation scenarios (e.g., the application must
keep all the diﬀerent pieces of the shellcode in memory until the last piece of the
shellcode is sent). Because of this we could not easily build a test to evaluate
this evasion technique.
Limitations of faithful emulation
Non-self-contained Shellcode. It is possible for a shellcode to use code or
data of the target system as execution instructions, and hence become dependent
upon the state of the target machine. Such code is called non-self-contained and
can involve the absence of classic heuristic triggers such as GetPC code or Pay-
load Reads. Such code poses a problem for EBNIDSes which lack knowledge of
the target machine state. Code depending on a particular machine state for suc-
cessful execution not only requires full emulation of instructions, but also access
398
A. Abbasi et al.
to a potentially unknown amount of host-based information. While this might be
relatively easy to implement on host-based IDSes, for EBNIDSes it is unscalable
to keep up-to-date information about all possible target hosts in a network. The
approaches in [1, 9, 8, 2–4] are all susceptible to armoring techniques involving
some form of non-self-contained shellcode.
In addition, it is possible to generalize the principle of non-self-contained
shellcode to the idea of Return-Oriented-Programming (ROP). ROP involves
the re-using instructions or data in the memory of the target application in a
way to compose an instruction sequence which performs the operations required
by the attacker. Program data or code preceding a RET instruction is often
chained to execute the desired behavior. As such, an attacker can seek out a
sequence of instructions terminated by a RET instruction and note down their
addresses. The actual shellcode would then consist of a series of PUSH operations
pushing these addresses on the stack, followed by a ﬁnal RET transferring control
to the ﬁrst ROP-chain segment. Thus, the actual shellcode transferred of the
network would not contain any of the malicious instructions the attacker intends
to execute.
The increasing proliferation of randomization techniques complicates mat-
ters and potentially renders non-self-contained shellcode fragile, something men-
tioned in [8]. An example of these techniques are Address-Space Layout Ran-
domization (ASLR), which randomize the base address of loaded libraries and
Position Independent Executables (PIE), which are compiled to be executable
regardless of the base address they are loaded at and thus have a randomized
image base. ASLR is enabled by default in modern operating systems. This how-
ever presents no problem when the ROP code is located in a program loaded at
a static image base.
Even the latest eﬀorts to address code reuse techniques in EBNIDSes [9] intro-
duced in Nemu are unable to fully cope with non-self-contained shellcode. Nemu
is outﬁtted with the program image of a real, albeit arbitrary, windows process
in order to enable more faithful emulation. However, this only partially miti-
gates the problem, since attackers can craft shellcodes targeting only a speciﬁc
OS version (and e.g., language pack) or a speciﬁc application.
In order to test the performance of Libemu and Nemu in detecting non-self-
contained shellcode we modify our test shellcodes by dynamically building the
entire GetPC code and the shellcode decoder out of ROP gadgets. Since these
gadgets are only present at the target addresses on particular versions of a sys-
tem (e.g. they vary from OS versions, service packs and language packs) any
emulator that does not supply the correct image should not be able to execute
this code. The fact that addresses vary between versions does not constitute a
problem as addresses are static within each version. An attacker could build a
database of addresses with the desired gadgets for each target platform much
like Metasploit modules often do. Since ASLR is enabled in most operating sys-
tems for many libraries which are compiled with ASLR-compatible support, we
ensure shellcode stability by leveraging the fact that ASLR varies the base ad-
dresses but not oﬀsets of instructions from the base address. We therefore build a
Emulation Based NIDS
399
database of oﬀsets, instead of addresses, and have the shellcode resolve the base
address of the target library ﬁrst. We gather the gadgets from ntdll.dll on x86
under Windows 7 and resolve the base address through the stackframe-walking
technique explained in Section 3.1 to avoid triggering heuristics. We gather these
gadgets using the RP++ tool [21]. It should be noted that our shellcode does
not fully consist of ROP gadgets (only the GetPC and decoder stub) and as
such the shellcode is still faced with traditional diﬃculties when dealing with an
ASLR+DEP protected system. However, though most major applications and
system libraries are compiled with ASLR support this is not always the case
and often an attacker can still rely on static addresses from either the non-
ASLR enabled target application image itself or from libraries compiled without
ASLR support loaded by the target application. In order to bypass ASLR/DEP
our shellcode would need to be modiﬁed by having the address-resolving stub
consist of ROP-gadgets located in a non-ASLR-enabled image or library and
subsequent ROP-gadgets derived from oﬀsets to the resolved base address, or by
resolving the library base address by using the SEH walk technique described in
Section 3.1 . Neither Libemu nor Nemu we found capable of detecting our non-
self-contained shellcode. In principle, recent approaches proposed for detecting
ROP-based shellcode [23] could be more eﬀective than Nemu and Libemu in de-
tecting our bypasses. However we are still left with the open question of verifying
the eﬀectiveness of such new approach.
Execution Threshold. Real-time intrusion detection imposes the need to eval-
uate whether input is malicious or not within a reasonable amount of time. Shell-
codes which take a large amount of time to be emulated pose a problem. Long
loops have been used as an anti-debugging technique for a long time, and some
of the detection techniques [1, 3, 4] use inﬁnite loop detection and smashing or
pruning to reduce the impact of execution threshold exceeding code. However,
it is possible to employ techniques which force any emulator to spend a certain
amount of time before being able to execute the actual shellcode.
One such technique is the use of Random Decryption Algorithms (RDAs) as
described by Kharn [24]. RDAs essentially consist of employing encryption rou-
tines without supplying the decryption key and forcing the self-decrypting code
to perform a brute-force attack on itself, thus creating a time-consuming decryp-
tion loop. An attacker could employ strong cryptographic algorithms and use a
reduced key-space which can be brute forced in a timeframe which is acceptable
for execution but not for detection. A more sophisticated approach, albeit more
complex and implementationally limited, is the use of Time Lock Puzzles (TLPs)
[25, 26]. TLPs, are cryptographic problems consisting of a cipher-text encrypted
using a strong cipher and a puzzle, which requires a series of sequential, non
parallelizable operations in order to retrieve the key. The authors of EBNIDS
approaches almost invariably state that if attackers would start to employ eva-
sion techniques aimed at exceeding execution thresholds, their method would
still be useful as a ﬁrst-stage anomaly detector since the appearance of loops
exceeding the threshold in random code is rare. However, even if all streams