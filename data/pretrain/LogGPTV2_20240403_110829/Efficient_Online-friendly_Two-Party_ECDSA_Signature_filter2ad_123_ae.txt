𝛼′ ← Z𝐾
𝑐𝐴 = 𝑎 ⊙ 𝑐𝐵 ⊕ Enc(𝑝𝑘, 𝛼′)
𝛼 = −𝛼′ mod 𝑞
𝑃2
𝑁 ,𝜋𝑃
←−−−−−−−− 𝑝𝑘 = 𝑁 , 𝑠𝑘 = 𝜙(𝑁)
𝑐𝐵,𝜋𝐵
←−−−−−−−− 𝑐𝐵 = Enc(𝑝𝑘, 𝑏)
𝑐𝐴,𝜋𝐴
−−−−−−−−→ 𝛽′ = Dec(𝑠𝑘, 𝑐𝐴)
𝛽 = 𝛽′ mod 𝑞
𝑠2(𝑟1 + 𝑘2)
Since
?
= ℎ + 𝑟(𝑥2 − 𝑡𝐵 − 𝑐𝑐) mod 𝑞.
(2)
Figure 4: The Paillier-based MtA from [19]. 𝐾 is the parameter
to be determined.
(3)
𝑠2 · (𝑟1 · 𝑃 + 𝑅2) = ℎ · 𝑃 + 𝑟(𝑥2 − 𝑡𝐵 − 𝑐𝑐) · 𝑃
holds if and only if Equation 2 is correct, the condition to output
(𝑟, 𝑠) in both the real and simulated case is identical.
This implies that the advantage of any PPT adversary who cor-
rupts 𝑃2 to distinguish the real execution and simulated execution
given by S is negligible.
4 INSTANTIATIONS OF MTA AND THEIR
APPLICATIONS TO 2ECDSA
There are several constructions of MtA which could be directly
applied to our 2ECDSA.
4.1 MtA from Oblivious Transfer
Following Gilboa’s semi-honest oblivious transfer [21], and moti-
vated by two-party ECDSA, Doerner et al. [15] proposed a MtA
against malicious adversary. Their construction is based upon Sim-
plest OT [10] and KOS [23] OT-extension protocols. Please refer
to Appendix C for a detailed description. Their MtA is computa-
tionally very efficient, while the communication is rather large. To
compute a MtA, at least 8𝜅2 bits must be transferred. Concretely,
when 𝜅 = 256, the communication of a single execution of MtA is
≈ 90 KB.
Their OT-based MtA could be applied to 2ECDSA. The online
phase of both [15] and our protocols are extremely lightweight:
sending a single field element and computing two elliptic curve
point multiplications. In our protocol, a single MtA is required
while the two-party ECDSA of [15] needs two. Thus, our solution
requires roughly half of the communication and computation of
[15]. A concrete comparison is given in Sec. 5.
4.2 MtA from Paillier
Gennaro and Goldfeder [19] presented a Multiplicative-to-Additive
conversion protocol from Paillier encryption, which has appeared
many times before [12, 25, 27]. Lindell et al. [26] also proposed a
similar protocol and call it private multiplication. We recall it and
explain its application to our 2ECDSA.
Let 𝑝𝑘 = 𝑁 and 𝑠𝑘 = 𝜙(𝑁) be the public and secret keys of Pail-
lier encryption. Denote the encryption of message 𝑚 by Enc(𝑝𝑘, 𝑚),
the decryption of ciphertext 𝑐 by Dec(𝑠𝑘, 𝑐). Denote by 𝑐1⊕𝑐2 = 𝑐1𝑐2
mod 𝑁 2 the addition of the plaintext in ciphertexts 𝑐1 and 𝑐2, and
by 𝑎 ⊙ 𝑐 = 𝑐𝑎 mod 𝑁 2 the multiplication of the plaintext in 𝑐 by a
scalar 𝑎.
The Paillier-based MtA between 𝑃1 with input 𝑎 and 𝑃2 with
input 𝑏 works in Figure 4 where
• 𝜋𝑃 is a ZKPoK for {(𝑁 ; 𝜙(𝑁))| gcd(𝑁 , 𝜙(𝑁)) = 1};
• 𝜋𝐵 is a ZKPoK for {(𝑐𝐵; 𝑏)|𝑐𝐵 = Enc(𝑝𝑘, 𝑏) ∧ 𝑏 ∈ Z𝑞};
• 𝜋𝐴 is a ZKPoK for {(𝑐𝐴, 𝑐𝐵; 𝑎, 𝛼′)|𝑐𝐴 = 𝑎⊙𝑐𝐵 ⊕Enc(𝑝𝑘, 𝛼′)∧
𝑎 ∈ Z𝑞 ∧ 𝛼′ ∈ Z𝐾}.
Please refer to Appendix D for the full description of Paillier-based
MtA and these ZKPoK protocols (w/o slack regarding soundness).
As noted by previous works [6, 19, 25, 26], 𝜋𝐴 and 𝜋𝐵 are very
expensive. Several works have been done to reduce or even remove
these proofs. Lindell [25], Gennaro and Goldfeder [19] suggested to
eliminate 𝜋𝐴 by relying on a non-standard Paillier-EC assumption
(Appendix D.3). Lindell et al. [26], Gennaro and Goldfeder [19], and
Canetti et al. [6] found that it is enough to use proofs with a lot of
slack regarding soundness. The slack version of 𝜋𝐴 and 𝜋𝐵 roughly
cost computing 6 Paillier exponentiations and sending 6 log 𝑁 bits.
Thus, the overall cost of Paillier-based MtA is computing approxi-
mately 14 Paillier exponentiations and sending 16 log 𝑁 bits. Under
the Paillier-EC assumption, it could be further reduced to 8 Paillier
exponentiations and 10 log 𝑁 bits respectively.
4.2.1 Applying Paillier-based MtA to 2ECDSA. We propose two
versions of Paillier-based 2ECDSA depending on whether or not
MtA relies on Paillier-EC assumption. When applying Paillier-EC
assumption, a proof-of-knowledge for the discrete logarithm of 𝑄′1
should be added against corrupted 𝑃1. (In order to extract 𝑥′1 to
querying the oracle in Paillier-EC assumption.) Actually, Gennaro
and Goldfeder [19] also proposed another non-standard assumption
to further eliminate 𝜋𝐵, and their technique could also be applied
to our protocol. Nevertheless, to simplify the analysis, we do not
include it in this paper and just analyze Gennaro and Goldfeder’s
scheme based on Paillier-EC.
Lindell’s two-party protocol [25] has the best overall perfor-
mance. Nevertheless, their online phase is comparatively expensive,
i.e., sending a Paillier ciphertext and computing Paillier decryp-
tion. The online phase of the two-party case of Lindell’s threshold
scheme [26] is worst, since 14 Paillier exponentiations are required.
The online phase of [19] is fast, while their offline phase requires at
Session 2D: Secure Multiparty Computation CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea566𝑃1(pk, 𝑎)
𝑃2(pk, sk; 𝑏)
𝑐𝐵,𝜋𝐶𝐿
←−−−−−−−− 𝑐𝐵 = Enc𝑐𝑙 (pk, 𝑏)
−−−−−−−−→ 𝛽′ = Dec𝑐𝑙 (𝑠𝑘, 𝑐𝐴)
𝛼′ ← Z𝑞
𝑐𝐴 = 𝑎 ⊙ 𝑐𝐵 ⊕ Enc𝑐𝑙 (𝑝𝑘, 𝛼′)
𝛼 = −𝛼′ mod 𝑞
Figure 5: The CL-based MtA extracted from [7, 8].
𝛽 = 𝛽′ mod 𝑞
𝑐𝐴
least computing 18 Paillier exponentiations and sending 16 ℓ𝑁 bits
depending on Paillier-EC is required or not. The online phase of the
two-party case of Canetti et al. [6] and our scheme are extremely
lightweight. However, the offline phase of [6] needs 204 Paillier ex-
ponentiations. Our scheme relies on 8 or 14 Paillier exponentiations
and sending 10 ℓ𝑁 or 16 ℓ𝑁 bits depending on whether Paillier-EC
is required. A concrete comparison is given in Sec. 5.
4.3 MtA with CL-encryption Achieving
Game-based Security
To address the problem of non-standard assumption in Paillier-
based MtA, Castagnos et al. [7, 8] replaces Paillier with CL encryp-
tion [9] which allows instantiations where the message space is
exactly Z𝑞.
Let (˜𝑠, 𝑓 , ˆ𝑔𝑞, 𝑔𝑞, ˆ𝐺, 𝐹, 𝑞) be public parameters of CL encryption
(as defined in [8]), where 𝐹 = ⟨𝑓 ⟩ is the subgroup of ˆ𝐺 with order
𝑞, 𝑔𝑞 is a random element in ⟨ ˆ𝑔𝑞⟩. Denote by sk, pk = 𝑔sk𝑞 secret-
public key pair. CL encryption Enc𝑐𝑙 (pk, 𝑚, 𝑟) computes (𝑐1, 𝑐2) =
𝑞, pk𝑟 𝑓 𝑚) as the encryption of 𝑚 ∈ Z𝑞 with randomness 𝑟 ←
(𝑔𝑟
[0, 𝑆] (for some 𝑆), and Dec𝑐𝑙 (sk, 𝑐1, 𝑐2) computes log𝑓 (𝑐2/𝑐sk
1 ) to
decrypt. We also denote by ⊕ the addition of the plaintext in two
ciphertexts, and by ⊙ the scalar multiplication on ciphertext.
We abstract CL-based MtA from Castagnos et al.’s protocol [8].
𝑃2 generates public-secret keypair and sends pk to 𝑃1 in the setup
phase. The CL-based MtA protocol is presented in Fig. 5, where
𝜋𝐶𝐿 is a ZKPoK for relation
𝑟
𝑞 ∧ 𝑐2 = pk𝑟
𝑓
𝑚}.
{(pk, 𝑐1, 𝑐2; 𝑚, 𝑟)|pk ∈ ˆ𝐺, 𝑟 ∈ [0, 𝑆], 𝑐1 = 𝑔
Please refer to Appendix E for the proof 𝜋𝐶𝐿.
The CL-encryption requires 2 exponentiations on the class group
while the decryption requires 1. The prover of 𝜋𝐶𝐿 needs 2 expo-
nentiations while the verifier computes 4 exponentiations. The size
of 𝜋𝐶𝐿 is about a CL ciphertext. Thus, the overall cost of CL-based
MtA is sending 3 CL ciphertexts and computing 9 exponentiations
over the class group.
Note that the scheme of Figure 5 dose not provide full simulation-
based security when 𝑃1 is corrupted. We remark that simulation
based security could be achieved by adding an expensive ZKPoK for
the affine operation of 𝑐𝐴 on 𝑐𝐵. In our specific usage, we choose the
same strategy as Castagnos et al. [8, Sec. 2.2] to achieve a weaker
game-based threshold unforgeability given in Appendix E.2, thus
do not add this ZKPoK.
4.3.1 Applying CL-based MtA to 2ECDSA. Instantiating MtA by
CL will result in a CL-based 2ECDSA1. In both [7, 8] and our pro-
tocol, CL encryption/decryption and/or 𝜋𝐶𝐿 dominate the overall
complexity.
Although the overall cost of [7] is best, a CL ciphertext should be
transferred and a decryption computation is required making the
online phase computationally expensive. In particular, it is more
than 50 times slower compared with [8, 33], and nearly 1000 times
slower than ours in the online phase. The online phase of two-party
case of [8, 33] is fast (although it is interactive), while it costs 28
exponentiations and 140𝜅 bits (when 𝜅 = 256). Our online phase is
non-interactive and extremely fast, and our offline cost is just 11
exponentiations and 53𝜅 bits. A concrete comparison is given in
Sec. 5.
5 IMPLEMENTATION AND COMPARISON
In this section, we give a comprehensive implementation and com-
parison of two-party ECDSA from Paillier, OT and CL-encryption.
Although [6, 8, 16, 19, 26] support threshold larger than two, we
only consider their performance in two-party case.
We benchmark our implementation using Rust on a MacBook
Pro 13-inch 2019 with Intel Core i5 @ 1.4 GHz CPU and 16 GB 2133
MHz LPDDR3 RAM running macOS Mojave v10.14.5. For simplicity,
we evaluate the protocols in a single laptop and consider only the
computation time. We remark that the comparison will further
favor our scheme if latency is taken into account. The reason is, as
shown in Sec. 1.4, our scheme has fewer communication rounds
than other schemes. The results are the median time of running 100
times. All benchmarks were taken over curve secp256k1 which is
recommended by NIST [24] and is the curve used in Bitcoin, among
many other blockchains and cryptocurrencies. We use SHA-256 to
instantiate the hash functions, random oracles and/or the PRG.
Overall comparison is shown in Figure 6 and Table 2. The detailed
comparisons are given in the following subsections.
5.1 Paillier-based Schemes
We set security parameters 𝜅 = 256 (achieving 128-bits computa-
tional security), 80 bits statistical security, and 80 bits soundness
error for our Paillier-based 2ECDSA. The underlying MtA is that in
Appendix D. Lin17 [25] uses 40-bits statistical security and sound-
ness error. LNR18 [26] and CGGMP20 [6] set the same statistical
and soundness parameters with us. GG18 [19] sets 128-bits compu-
tational security, 256-bit statistical security and 128-bits soundness
error. We note that these works recommend 2048-bit module 𝑁 . To
make a fair comparison with CL and OT-based schemes, we set a
3072-bit module in the implementation and comparison.
We implement two versions of 2ECDSA and GG18 (one with
and one without Paillier-EC), LNR18, and CGGMP20 based on the
elementary code of ZenGo [32] and run ZenGo’s code on Lin17. The
results of computation and communication on signing are presented
in Table 3. The key generation of our scheme has a similar cost
with GG18, LNR18, and CGGMP20.
Without Paillier-EC assumption, our scheme improves GG18’s
offline complexity by a factor of 5 for computation and a factor of 2
1𝜋𝐶𝐿 requires a setup step to guarantee that 𝑔𝑞 is a random element of the subgroup
⟨ ˆ𝑔𝑞⟩. It is executed in the key generation phase.
Session 2D: Secure Multiparty Computation CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea567Figure 6: Cost comparison of all two-party schemes. For every scheme, the south-west point is the offline cost, while north-east
point is the overall cost. Thus, the distance between these two points indicates the online complexity. The dashed red rectangles
share the same area.
for communication. Our implementation outperforms CGGMP20’s
work by a factor of 9 for computation and a factor of 8 for com-
munication. Without Paillier-EC assumption, we improve GG18’s
computation by a factor of 2 and its communication by a factor of
1.6.
5.2 OT-based Schemes
We set security parameters 𝜅 = 256 (achieving 128-bits computa-