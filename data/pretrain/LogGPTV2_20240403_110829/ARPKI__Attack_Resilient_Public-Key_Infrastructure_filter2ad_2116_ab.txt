P.com
S.com
Z.com
Figure 2: Integrity Tree in i-th ILS_UP period.
low bandwidth, then delays will occur during the certiﬁcate
registration and validation processes, contradicting AKI’s
claimed eﬃciency.
Second, parts of AKI’s design are not speciﬁed in suﬃcient
detail for a realistic implementation.
In particular, it is
unclear how ILSes interact during the AKICert registration
and update processes, how validators monitor the ILSes, and
how entities handle malicious events.
Third, AKI’s security properties have not been proven in
detail, and additional validation would help gain assurance
in AKI’s security claims.
In particular, with no mature
implementation available, certain edge cases are likely to
have been missed which may impact the security claims.
For instance, without synchronizing ILSes, an adversary can
register malicious AKICerts. To attribute misbehavior, all
ILSes and CAs must include the triggering messages (which
are signed by the sender) for any action they perform. If the
triggering requests are omitted, the ILSes and CAs will not be
able to prove their correct operation to others when needed.
In addition, the validators must consider both the updated
entries in the Integrity Tree of the ILSes and the original
request leading to the update (including its timestamp) to
monitor ILSes’ update handling.
Finally, AKI fails to prevent clients from accepting a com-
promised AKICert when an adversary successfully compro-
mises two out of three signing entities because CAs are not
actively involved in monitoring ILS or validator misbehav-
ior. Consequently, if an adversary compromises an ILS and
a validator, the compromised AKIcert stays valid until it
expires, even if the domain updates its key and acquires new
certiﬁcates from trusted CAs.
3. DESIRED PROPERTIES
In this section we state the adversary model and main
security properties that all PKIs should ideally provide.
3.1 Adversary Model
Ideally, PKIs achieve security with respect to the strongest
possible adversary (threat) model. Since PKIs operate over
a possibly untrusted network, the adversary, in the worst
case, can control the network. That is, we assume that the
adversary can eavesdrop, modify, and insert messages at will.
We also assume that the adversary can compromise some
entities, eﬀectively obtaining their long-term secrets. How-
ever, for a PKI to satisfy any nontrivial security property,
the adversary must not be able to compromise all entities.
We therefore assume that the adversary can compromise the
long-term secrets of some, but not all, parties.
3.2 Security Properties
In general PKIs should provide security, availability, and
be eﬃcient when clients authenticate domains, and these
properties should hold even under the threat model described
above.
Core security property. We ﬁrst highlight the core
security property that any PKI must satisfy, which prevents
impersonation attacks.
● Connection integrity. If a client establishes a connec-
tion based on a certiﬁcate, the client must be communicat-
ing with the legitimate owner of the associated domain.
Other security properties. Besides the core property,
PKIs should also satisfy the following security properties.
● Legitimate initial certiﬁcate registration. The in-
frastructure should register a domain’s certiﬁcate only if
the certiﬁcate satisﬁes the requirements speciﬁed by the
infrastructure’s policy. For example, CA-centric infras-
tructures allow the use of a certiﬁcate as long as it is
signed by a non-revoked CA in the client browser’s root
CA list. As a second example, domain-centric infrastruc-
tures accept an initial certiﬁcate that is signed by (a set
of) designated entities that the domain owner explicitly
states to be trustworthy.
● Legitimate certiﬁcate updates. The infrastructure
● Visibility of attacks. If an adversary successfully launches
should update a domain’s certiﬁcate only if the new certiﬁ-
cate satisﬁes the requirements speciﬁed in the previously
registered certiﬁcate.
an attack against the infrastructure by compromising enti-
ties, the attack should become publicly visible for detec-
tion.
Figure 3: Basic communication ﬂow of ARPKI.
Solid numbered lines represent the message ﬂows
to register an ARCert, and dotted arrows represent
optional ﬂows. 10 and 11 represent a TLS connection
after registration is complete.
3.3 Performance Properties
PKIs should have the following performance properties.
● Low overhead. The infrastructure should not substan-
● Minimal additional latency over TLS. The infrastruc-
tially increase the TLS handshake message size and should
have negligible impact on processing time.
ture should induce minimal (ideally zero) additional round
trip latencies, possibly due to extra network requests, to
the TLS handshake.
4. ARPKI: ATTACK RESILIENT PKI
We now present ARPKI, the end result of our co-design of
model, veriﬁcation, and implementation. We return to the
modeling, veriﬁcation and co-design aspects in Section 5 and
present the implementation in more detail in Section 6.
ARPKI achieves strong security guarantees using three
entities for the certiﬁcate operation: two CAs and an ILS.
In particular, ARPKI’s CAs conduct active on-line conﬁrma-
tions with validator-like capabilities. Consequently, ARPKI
prevents compromise attacks such that even when n− 1
of n= 3, but we explain its extension to arbitrarily many
trusted entities are compromised, the security guarantees
still hold. The description in this section is for the case
trusted entities in Section 4.5.
Before we go into the details, let us ﬁrst give a high-
level summary of the actors and their responsibilities in this
scheme: a domain registers an ARPKI certiﬁcate (ARCert)
for itself with the ARPKI infrastructure, and can afterwards
use the resulting ARCert to securely serve webpages to clients.
The CAs check the identity of the domain owner on regis-
tration and then sign and give guarantees for the presented
certiﬁcate. Throughout the lifetime of the ARCert, the CAs
are responsible for checking the logs for this ARCert and
assuring the correct operation of other entities involved in
creating the ARCert. To check the ILSes behavior, the CAs
download all accepted requests from the ILSes and compare
them to the published integrity trees. The ILSes keep a log
of all ARCerts registered with them, in a publicly veriﬁable
way, and provide proofs of existence for ARCerts that are
then used by CAs and domains. The set of ILSes synchro-
nizes with each other in a secure and accountable manner.
Optionally there can be additional validators, that execute
checks similar to those made by CAs, but without issuing
ARCerts themselves.
that entity E signed message M by{M}K−1
We illustrate the process in Figures 3 and 4. We denote
, and H(⋅) stands
E
for a cryptographic hash function. All signatures include
timestamps and unique tags such that they cannot be mis-
taken for one another.
4.1
Initial ARCert Registration Process
ARCert generation. ARPKI supports trust agility, mean-
ing that the domain owners can select their roots of trust
and modify their trust decisions using extension parameters.
A domain owner creates an ARPKI certiﬁcate (ARCert) by
combining multiple standard certiﬁcates from trusted CAs.
Note that in this step each CA checks the identity of the
domain owner to authenticate domains correctly. We now
consider the owner of domain A registering her domain.
ARCert registration request (Steps 1–2).
In ARPKI,
three designated entities are actively involved in monitoring
each other’s operations. The core idea behind a Registra-
tion Request (RegReq) message is to let the domain
owner explicitly designate the trusted entities, namely two
CAs and one ILS (CA1, CA2, and ILS1 in Figure 3).
ARPKI requires the domain owner to contact just one CA
(CA1). The main responsibilities of CA1 are to validate the
correctness of the other two entities’ operations and act as a
messenger between the domain owner and ILS1 and CA2.
The domain owner also designates ILS1 to ensure that
ARCertA is synchronized among all ILSes. CA2 mainly
takes the validator’s role and ensures that ILS1 as well as
other ILSes operate accordingly, e.g., add ARCertA to their
Integrity Trees as promised.
ILS synchronization (Steps 3–6).
Ideally the same
ARCertA should be publicly visible among all ILSes. How-
ever, synchronizing all ILSes may be ineﬃcient, incurring
signiﬁcant time delay, and unrealistic. Instead, in ARPKI
ILS1 takes responsibility on behalf of the domain owner to
synchronize ARCertA among at least a quorum of all existing
Client (C)Validators (optional)ILSes12789561011ILS134CA2CA1TLSDomain (A)ARCert Generation
A
ARCert Registration Request
: Set X.509 extensions
: Contact trusted CAs, get authenticated
: Combine multiple certiﬁcates into ARCertA
: RegReq={ARCertA, CA1 , ILS1 , CA2}K−1
: Ensure CA1∈ ARCertA’s CA_LIST
: Verify signatures in RegReq
A
: Add ARCertA into a pending request list
1. A→ CA1
CA1→ ILS1 : RegReq
2. CA1
: Ensure ILS1, CA1, and CA2 are diﬀerent entities
: Ensure no ARCert was registered for A’s domain
: Verify signatures in RegReq
: Ensure no ARCert was registered for A’s domain
: Collect SynResp from at least a quorum of ILSes
: Collect SynAck from at least a quorum of ILSes
ILS Synchronization
3. ILS1
: Ensure ILS1∈ ARCertA’s ILS_LIST
: Verify signatures in RegReq
ILSn
ILSn
ILS1
ILS1
5. ILS1
7. ILS1
4. ILSn
Registration Conﬁrmation
ILS1→ CA2 : RegResp=
ILS1→ ILSn: SynReq={RegReq}K−1
ILSn→ ILS1: SynResp={H(RegReq)}K−1
ILS1→ ILSn: SynCommit={H(RegReq)}K−1
6. ILSn→ ILS1: SynAck={H(RegReq)}K−1
: Accept={H(ARCertA)}K−1
{Accept, RegReq, List(SynAck)}K−1
: Ensure CA2∈ ARCertA’s CA_LIST
CA2→ CA1 : RegConf=
{{Accept}K−1
, List(SynAck)}K−1
}K−1
CA1→ A : {{Accept}K−1
10. C→ A
11. A→ C
: ARCertA,{{Accept}K−1
: Verify signatures in RegResp
: TLS connection request
}K−1
TLS Connection
8. CA2
9. CA1
ILS1
CA2
CA1
CA2
CA2
CA2
CA1
ILS1
: Ensure ILS1, CA1, and CA2 are diﬀerent entities
: Verify signatures in RegConf
: Ensure ILS1, CA1, and CA2 are diﬀerent entities
: Remove ARCertA from the pending request list
A
: Ensure ILS1, CA1, and CA2 are diﬀerent entities
Figure 4: Message ﬂows for the initial ARCert reg-
istration process in Figure 3.
ILSes.1 This ensures that only one ARCertA is registered
for the domain A, and the majority of the world maintains
a consistent certiﬁcate entry for the domain A in order to
prevent impersonation attacks.
Registration conﬁrmation (Steps 7–9). When the
majority of ILSes agree to add ARCertA to their public
Integrity Trees, ILS1 schedules domain A’s ARCert to appear
in its Integrity Tree during its next update (i.e., at the end of
the current ILS_UP time interval), which is stated and signed
in an Acceptance Confirmation (Accept) message. ILS1
then sends to CA2 a Registration Response (RegResp)
message, which serves as a proof to CA2 that ILS1 (and a
quorum of ILSes) indeed accepted domain A’s RegReq.
1The required quorum is one ILS more than 50% of all ILSes
to allow detection, and n ILSes more than 50% of all ILSes
to prevent inconsistent states. Here the security parameter
n= 3 is used, but generalized to arbitrary n in Section 4.5.
A
Proof Generation
ILS Conﬁrmation Request
: CCReq={A, CA1 , ILS1 , CA2}K−1
1. A→ CA1
2. CA1→ ILS1 : CCReq
7. ILS1→ CA2 : Proof={List(HashVal)}K−1
8. CA2→ CA1 : {{Root}K−1
}K−1
}K−1
9. CA1→ A : {{{Root}K−1
}K−1
10. C→ A
}K−1
: ARCert,{{{Root}K−1
11. A→ C
: TLS connection request
TLS Connection
, Proof
, Proof
ILS1
ILS1
ILS1
CA1
CA2
CA2
ILS1
CA2
,{Root}K−1
ILS1
}K−1
CA1
, Proof
Figure 5: Message ﬂows for obtaining ARCert’s log
proof. Upon receiving any signed message, all en-
tities verify the signatures (we omit these steps, fo-
cusing on the message ﬂows).
CA2 now takes the validator’s role to monitor and ensure
that ILS1 indeed made the majority of ILSes agree to accept
ARCertA for their next update time. CA1 also takes the
validator’s role to monitor that CA2 correctly monitors ILS1.
4.2 Clients Visiting a Domain using ARCert
TLS connection (Steps 10–11). The domain A now has