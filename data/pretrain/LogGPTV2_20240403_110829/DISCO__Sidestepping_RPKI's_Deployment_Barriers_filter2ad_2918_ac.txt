mitigated, and recertiﬁcation is guaranteed to succeed.
DISCO must ensure that an attacker cannot prevent is-
suance of a certiﬁcate by hijacking the preﬁx. To accommodate
initial certiﬁcation and the interim where most ASes do not
perform ROV, registrars certify an organization who receives
trafﬁc for an IP address block throughout almost all of the
certiﬁcation interval (owner control in Table II).
4) Setting certiﬁcation parameters: Table II summarizes
DISCO’s certiﬁcation parameters. To set
the certiﬁcation
threshold, we use real-world experiments and simulations in
§VII. To set the certiﬁcation interval and what portion of it
an announcement must be visible for to establish de facto
ownership, we consider the length of past widespread preﬁx
hijacking incidents, which typically last up to a few hours [63].
Finally, the fraction of system registrars that should approve a
certiﬁcate reﬂects the high availability we expect from these
services and expected security against malicious registrars.
5) Certiﬁcates with exclusions: Since DISCO validates de
facto ownership, we must handle the case where a preﬁx
is allocated to organization A, but its sub-preﬁx belongs to
organization B. In that case, A should not be certiﬁed as the de
facto owner of the entire preﬁx it advertises in BGP, but rather
as the owner of all IP addresses in that preﬁx except those in
the sub-preﬁx announced by B. DISCO supports this scenario
by extending RPKI’s resource certiﬁcate format to specify
excluded sub-preﬁxes, making it possible for A’s certiﬁcate
to exclude B’s IP addresses. This encoding is efﬁcient; the
number of IP preﬁxes speciﬁed in all certiﬁcates is no more
than twice that of all preﬁxes announced through BGP (every
preﬁx can only be included once in an owner’s certiﬁcate
and once as an exclusion). DISCO registrars generate the
5
exclusions automatically, based on sub-preﬁxes visible at their
vantage points. A preﬁx and list of subpreﬁx exclusions deﬁne
an IP block in DISCO certiﬁcates.
6) Revocation: If a private key is exposed, an AS may
need to revoke its certiﬁcate and not wait until it expires so
as to prevent the attacker from issuing ROAs. In this case, the
owner issues a “revocation request” signed with the private key
associated with the certiﬁcate being revoked. Repositories store
revocations until the certiﬁcate that is being revoked expires,
and the short-lived certiﬁcates mean that revocation lists do not
need to be stored for long. They distribute revocations to agents
along with DISCO’s certiﬁcates and ROAs, so any agent that
syncs with a repository would discard revoked certiﬁcates it
received in the past.
The distributed nature of trust in DISCO allows registrar
keys to be revoked without invalidating certiﬁcates. Similarly
to certiﬁcate revocation, a registrar can also sign a message
that revokes its public key, and store the revocation at the
system’s repositories. Importantly, revocation of a registrar’s
key does not imply invalidation of DISCO-issued certiﬁcates.
If a certiﬁcate still has a number of signing registrars higher
than the certiﬁcate threshold, it can still be considered valid.
The short certiﬁcate lifetime also means that the owner will
refresh its certiﬁcate soon after a registrar changes its key
(obtaining a new signature and updated registrar keys). So
DISCO allows to gradually replace registrar keys (routinely
or in case of compromise).
7) Preﬁx transfers and delegations: DISCO supports se-
cure preﬁx transfers and delegations by allowing the previous
preﬁx owner (with a DISCO certiﬁcate) to generate a ROA
allowing the new owner to announce the transferred preﬁx or
delegated subpreﬁx. This ROA would allow the new owner
to announce the preﬁx and obtain a DISCO certiﬁcate. In
the case of transfers, a revocation request (§V-A6) against
the previous owner’s certiﬁcate is possible but optional as
certiﬁcates expire quickly. In the case of subpreﬁx delegations,
DISCO ultimately issues a new certiﬁcate for the delegator
with a hole for the delegated subpreﬁx (§V-A5).
8) Illegitimate certiﬁcates for IP preﬁxes that are adver-
tised in BGP: Our simulation results in §VII show that for
IP preﬁxes that are advertised in BGP by legitimate owners,
an attacker is highly unlikely to succeed in falsely certifying
these preﬁxes (an expected success rate of 3%). Moreover, in
the vast majority of successful attacks (81%), the attacker is the
sole upstream provider of the victim, and can thus observe and
intercept all of the victim’s trafﬁc without attacking DISCO
(and risking exposure). In scenarios where an attacker that is
not the sole ISP of the victim succeeds in false certiﬁcation
(0.6% in our simulations), measures such as those discussed
in §VIII for revoking certiﬁcates for IP preﬁxes not advertised
in BGP can be applied.
9) Addressing conﬂicts between DISCO and RPKI certiﬁ-
cates: To accommodate fast and incremental deployability,
DISCO, as described here, does not rely on RPKI certiﬁcation
and can be deployed in parallel as an independent certiﬁcation
system. We believe that
the question of which policy to
apply when conﬂicts arise between DISCO-issued and existing
RPKI certiﬁcates merits further discussion. This question is
particularly relevant in scenarios in which de facto certiﬁcation
Fig. 3. Origin validation with DISCO. The agent issues a ROA, and
fetches ROAs issued by others.
is inherently limited (see §III-B). In such scenarios, DISCO
adopters could possibly automatically ignore ROAs that are
incompatible with existing RPKI certiﬁcates.
B. Origin Authorization
DISCO uses its certiﬁcates to create route origin autho-
rizations (ROAs), as illustrated in Figure 3. DISCO’s ROAs
are conceptually similar to those of RPKI: they are signed
by the owner’s private key, and include a list of approved IP
preﬁxes with maximum length and an authorized origin AS
number for each preﬁx. The ROAs in DISCO extend RPKI’s
format to allow for the exclusion of sub-preﬁxes which belong
to others (as indicated by corresponding exclusions deﬁning
the IP block in the certiﬁcate). These exclusions conform with
the “wildcard-ROA” format previously suggested to address
some of RPKI’s deployment problems [21]. Exclusions are
necessary since in many cases an RPKI ROA issued for one
organization may invalidate legitimate BGP advertisements by
other organizations (§II).
it computes the ROA that
1) Reducing human involvement: The DISCO agent can
operate under two modes. In the ﬁrst mode the agent does
not have access to the private key (e.g., the network operator
may want
to keep the private key ofﬂine). In this mode,
the agent automates ROA generation to the extent possible
(without signing it using the private key). When the agent
observes a new certiﬁcate in DISCO’s repositories for one
of its IP blocks,
the network
operator then needs to sign using the certiﬁed private key.
The agent creating the ROA conﬁgures the maximum length
for each preﬁx automatically to avoid the pitfalls of manual
conﬁgurations. More precisely, the agent gathers all preﬁxes
that the AS advertises and computes the shortest list of preﬁxes
and maxLength combination that exactly covers the IP block
(by running Algorithm 1 from [24]). The agent speciﬁes this
preﬁx list in the ROA, and each preﬁx in the list is potentially
followed by excluded sub-preﬁxes (not owned by the AS).
The agent then sends the proposed ROA to the operator (e.g.,
via email), and the operator may edit it before signing with
the private key and returning to the agent. For example, the
operator may edit the ROA to allow for a not-yet-announced
subpreﬁx which supports trafﬁc engineering. DISCO also
supports an automated mode, where the agent stores the private
key and signs the ROA without involving the operator at all.
Under both modes of operation, DISCO’s agent automates
ROA generation to the largest extent possible. Compared to
RPKI, DISCO frees the operator from deciding which preﬁxes
6
should be listed, which maxLength to allow for each preﬁx,
and what are the origin ASes. Once the agent has the signed
ROA, it stores the ROA on DISCO’s public repositories which
verify that the ROAs are valid by checking the signature.
2) Route origin validation: The agent periodically checks
for new ROAs and certiﬁcates at DISCO’s repositories. Since
DISCO repositories are untrusted, the agent also validates that
the new ROAs are valid, corresponding to registrar certiﬁcates.
For each preﬁx in a ROA, the agent conﬁgures the corre-
sponding new ﬁlter at the AS’s border routers. We describe
the implementation details involved in conﬁguring these rules
into existing routers in §VI.
VI.
IMPLEMENTATION
We built a prototype implementation of DISCO. Our
implementation consists of less than 200 lines of non-library
Python code for each of the agent and registrar. The prototype
code is available online [30]. Our prototype attaches to BGP
announcements an optional transitive attribute which consists
of a 32-byte ED25519 public key. The number identifying
this attribute is conﬁgurable in our implementation. Our tests
running DISCO (§VII) use the 0xFF attribute which is re-
served for experimental use to avoid interference with another
standardized or squatted attribute types (see [56], [55]) during
experiments. We acknowledge the need for standardizing the
use of this BGP attribute type before DISCO can be widely
adopted.
A. Agent
The system’s design ofﬂoads the certiﬁcation logic from the
border routers to a local machine running a software agent. A
network operator installs the agent to certify ownership over
its preﬁxes through DISCO and to enforce validation of other
preﬁx origins. We next discuss how the agent communicates
with the AS’s border routers to achieve these goals.
Running certiﬁcation using iBGP. Our implementation uses
iBGP to interface the agent with the AS’s border routers.
The network operator conﬁgures the agent with the AS’s
public key (the network operator may keep the corresponding
private key ofﬂine for security). Through iBGP,
the agent
takes over generating the announcement from the router and
appends DISCO’s attribute. This approach decouples the exist-
ing routing architecture from DISCO, which saves complex-
ity at the router and makes DISCO readily deployable.The
following example shows a conﬁguration on a border router
of AS65535 that runs the DISCO agent on a server with
IP address 192.168.10.10, conﬁgured to announce preﬁx
172.16.0.0/24 with the proper key in the optional transi-
tive attribute:
router bgp 65535
// DISCO agent connection
neighbor 192.168.10.10 remote-as 65535
// disable local announcement
no network 172.16.0.0 mask 255.255.255.0
Enforcing origin validation. In addition to certifying the AS’s
IP blocks, the agent is also responsible for conﬁguring the AS’s
border routers to enforce route origin validation. The agent has
a list of public repositories from which it periodically syncs.
Once it observes a new DISCO ROA, it validates its certiﬁcate
and then creates a ﬁltering rule for each preﬁx in the ROA.
The agent conﬁgures the border routers to enforce ROV using
a standard access list interface. For example, enforcing a ROA
for IP preﬁx 10.0.0.0/22 with maxlength 24 and origin
AS number 1 is achieved through the following access list:
// allow 10.0.0.0/22 maxlen 24, enforce last AS number is 1
ip as-path access-list rov seq 1 permit 10.0.0.0/22 le 24 1$
After all of DISCO’s rules (for all preﬁxes), the agent adds
another rule that denies advertisements for 10.0.0.0/22
and its subpreﬁxes that were not captured by earlier rules:
// deny other advertisements for 10.0.0.0/22
// or its subprefixes
ip as-path access-list rov seq 100 deny 10.0.0.0/22 le 32
Supporting address blocks. Assume that, in addition, the
ROA covering 10.0.0.0/22 has an exclusion for subpreﬁx
10.0.2.0/23, and no ROA covers that subpreﬁx. DISCO’s
ﬁltering rule would exclude that preﬁx by adding the following
“permit” access control entry between the permit and deny
ﬁlters above:
// allow 10.0.2.0/23 from any origin and set maxlen 32
// to allow any subprefix of any length
ip as-path access-list rov seq 2 permit 10.0.2.0/23 le 32
We view the above implementation through the BGP
router’s access control list interface as a temporary bridge
that allows using DISCO with today’s routers. For the longer
term, we expect a protocol similar to RPKI-to-Router [11] to
allow conﬁguring ﬁlters according to DISCO’s ROAs. Such
a protocol provides a simple interface allowing the operator
to conﬁgure a local machine that provides origin validation
rules. RPKI’s RTR protocol only needs a modest extension
for subpreﬁx exclusions in order to support DISCO.
B. Registrars
DISCO’s registrars are machines operated by different
organizations, e.g., RIRs or reputable network providers, to
decentralize trust
in the system. A registrar receives BGP
feeds from vantage points at different locations on the Internet.
The vantage points that each registrar uses are conﬁgurable
and may reﬂect the registrar’s administrator trust assumptions.
DISCO requires a threshold of registrars to agree on a
certiﬁcate, so, even if a few registrars are malicious or make
a bad decision choosing their vantage points, the certiﬁed
information recorded in DISCO’s repositories maintains in-
tegrity. We note that if a registrar discloses its list of vantage
points and certiﬁcation threshold, and if the vantage points
provide public feeds, then anyone can verify the certiﬁcates
issued by that registrar. This effectively limits a malicious
registrar’s capability to issue multiple incorrect certiﬁcates,
as a malicious (or misbehaving) registrar can be identiﬁed
immediately after it incorrectly issues a certiﬁcate. Lying about
the set of vantage points used or the certiﬁcation threshold
is futile, as it still deﬁnes (and allows veriﬁcation of) what
certiﬁcates the registrar should issue. Finally, if the list of
vantage points or the certiﬁcation threshold used by a registrar
are untrustworthy, it may be removed from the list of registrars.
7
Our implementation’s vantage points. We focused on cre-
ating a readily deployable system. Therefore, we opted to use
as vantage points 262 routers that peer with RouteViews and
RIPE RIS [50], [62], two publicly accessible BGP advertise-
ment collection systems. RouteViews and RIS provide the con-
tent of the full BGP advertisements they receive (including the
optional transitive attributes) in the MRT [9] data format. The
list of vantage points is conﬁgurable in our implementation,
so operators running the registrars can add new vantage points
to improve the visibility of the Internet.
Incentives for adoption. Our implementation runs on com-
modity hardware, relies entirely on open source components,
and uses only public data. We argue that the low adoption
cost, large number of interested parties, and potential positive
impact may be sufﬁcient to drive deployment of registrars.
We note that even a handful of registrars would be enough to
provide reliability against registrar failures in DISCO (as long
as the fraction of honest registrars is higher than the registrar
consensus threshold).