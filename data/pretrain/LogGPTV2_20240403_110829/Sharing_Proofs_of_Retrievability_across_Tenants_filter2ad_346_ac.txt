2. We assume here that global values such as the security parameter are
ﬁxed.
of the metadata does not further increase as Store
formally holds
[U : (cid:102)M ; S : Dataﬁle, Datausers]
Store
→ [U : vkU; S : M, Data
ﬁle| ≤ |Dataﬁle|.
with |Data
∗
∗
∗
ﬁle, Data
users].
∗
:
∗. It
Notice that Store
but not the ﬁle itself.
∗ updates the metadata associated to a ﬁle
3. SPORT: Sharing POR across
Tenants
In this section, we detail SPORT, an efﬁcient publicly
veriﬁable instantiation of tag sharing MTPOR. We start by
outlining the main intuition behind our scheme.
3.1. Overview
One straightforward approach to realize a tag sharing
MTPOR from existing single-tenant POR schemes would
consist of sharing the keys required to verify the POR
among all tenants deduplicating the same ﬁle. However, this
approach would not resist malicious tenants who can share
the secret material used to construct the POR with the cloud
provider. Namely, in case the secret material is leaked to the
provider (e.g., by means of a malicious/colluding tenant),
then the provider may be able to correctly answer all POR
challenges, without the need to store the ﬁle. This equally
applies to existing public-veriﬁable POR schemes; if the
original creator leaks the private keys used to construct the
POR, the underlying security of the POR is invalidated. This
also rules out the possibility to derive the secret material to
instrument POR from the ﬁle content itself (e.g., in a way
similar to message-locked encryption [10]). In this case,
the entropy of the secret material will be dependent on
the predictability of messages; providers can acquire the
material e.g., by means of brute-force search, and/or by
colluding with malicious tenants.
To overcome these challenges, SPORT extends the pub-
licly veriﬁable POR scheme of SW [32] based on BLS
signatures. Here, tags were essentially signatures of com-
bination of message blocks. Unlike [32] which exploits
the message-homomorphism of BLS signatures to allow for
compact batch veriﬁcation of multiple blocks, SPORT goes
one step further and leverages key-homomorphism of BLS
signatures to combine different tags (protected by different
keying material) constructed by multiple untrusted tenants
into one tag—thus resulting in tremendous storage savings.
Key-homomorphism here ensures that the underlying secret
material of the combined tag depends on the contribution of
each of the users registered to the same content. As a result,
SPORT support public veriﬁability and provides security
against a collusion between tenants/service provider as long
as there is one single honest tenant storing the content (and
not compromising his own secret material).
SPORT achieves this without requiring any trusted entity
(e.g., an identity manager or a proxy) to mediate the update
of tags shared by different tenants. In SPORT, this is realized
∗ protocol—a variant of the
using the (decentralized) Store
standard Store POR protocol—that is executed by tenants
∗
deduplicating the same content. Unlike Store, the Store
routine in SPORT only involves updating the tags; we show
that the tags can be efﬁciently veriﬁed in a single batch
(for the entire ﬁle) by the provider. Moreover, we show
that tenants only need to verify the inclusion of their own
private keys within the updated keys—while the correctness
of the tags is implicitly ensured during the POR protocol.
Observe that
the service provider does not have to be
trusted when creating or updating the tags. This is the main
reason why cryptographic accumulators could not be used in
our setting.3 However, most efﬁcient accumulator constricts
assume a trusted setup, meaning that the party who setups
the accumulator needs to be trusted. Although a number
accumulators can deal with untrusted setup case [21], [30],
these proposals are either inefﬁcient or exhibit other imped-
ing drawbacks.
∗ protocol incurs compu-
tational load on the clients, we argue that SPORT offers
tremendous economic beneﬁts to the clients and the service
provider. Namely, SPORT allows clients to trade the per-
manent storage costs associated with the additional storage
of ﬁle tags, with the one-time use of their computational
resources to update the tags—thus reducing the total costs
borne on users. Moreover, SPORT enables the provider to
offer differentiated services, such as proving the integrity of
stored ﬁles, with minimal additional storage overhead.
In SPORT, although the Store
In the following subsections, we go into greater detail
on the various parts of SPORT, starting with the protocol
speciﬁcation, then moving on to the security analysis of our
scheme.
3.2. Protocol Speciﬁcation
We now detail the speciﬁcations for the procedures of
SPORT.
Speciﬁcation of the Setup protocol
SPORT makes use of the multi-signature scheme based on
BLS signatures described in [31]. To this end, it deploys a
group G of prime order p with generator g, and a computable
efﬁcient bilinear map e : G × G → GT . In addition, we
require three independent secure hash functions h0, h1, h2 :
{0, 1}∗ → G from the set of bit strings into the group G
(e.g., the BLS hash function). We refer the readers to [31]
for more details.
Each user U that participates in the scheme is required to
setup a key pair of signature key and veriﬁcation key. More
precisely, the user chooses a private key skU ∈ Zp, and the
corresponding public key is then given by pkU = gskU ∈ G.
Moreover, U also needs to provide a proof of possession
pop = pop(skU) to prove possession of the secret key skU.
3. Recall that an accumulator is a cryptographic technique that allows
to represent a set S of elements by a single value w, the witness, such
that membership for any element x ∈ S can be proved using w and an
according membership proof.
As we show later, proofs of possession prevent the provider
from replacing/creating tags using other keys whose secret-
keys are known to him. In a nutshell, our proof of possession
(adapted from [31]) is constructed as follows: pop(skU) =
h0((cid:104)pkU(cid:105))skU and (cid:104)pkU(cid:105) denotes an encoding of pkU as a
bit string. As we show later, such a proof of possession
is required to protect against a rogue-key attack, where an
adversary forges the multi-signature of a group using an
invalid key (i.e., a public key whose private key is unknown
to the adversary).
Speciﬁcation of the Store protocol
To store a new ﬁle (cid:102)M, the user ﬁrst has to encode the
ﬁle with a deterministic erasure code as required by the
utilized POR (in order to provide extractability guarantees).
As mentioned earlier, we assume that prior to this step
the ﬁle is encrypted with a deterministic ﬁle-key securely
obtained, e.g., using the schemes of [6], [10], in order to
support deduplication of encrypted content across different
users. The result is denoted by M.
Next, the user creates a unique ﬁle identiﬁer ﬁd for M,
e.g., by hashing the encrypted ﬁle, or by computing the root
of the Merkle tree of the ﬁle [6]. The server checks if the
corresponding ﬁle with identiﬁer ﬁd has already been stored
by another tenant. Now, we distinguish between two cases:
(i) the ﬁle has not been stored previously, and (ii) the ﬁle
is already stored. In the latter case, the user will continue
with the Store
∗ protocol (see below).
We start by discussing the former case where the out-
sourced ﬁle has not been stored previously at S. Similar
to [32], the ﬁle is interpreted as n blocks, each is s sectors
long. A sector is an element of Zp with p being the order of
G and is denoted by mij with 1 ≤ i ≤ n, 1 ≤ j ≤ s. That
is, the overall number of sectors in the ﬁle is n· s. For each
1 ≤ j ≤ s a group element uj ∈ G is pseudo-randomly
extracted from the ﬁle as uj = h1(H(M )||j) where H
denotes a cryptographic hash function.
i ∈ {1, . . . , n} a ﬁle tag σi is computed as follows:
Similar to the BLS scheme of [32], for each block index
(cid:33)skU
umij
j
.
(5)
σi =
(cid:32)
h2(H(M )||i) · s(cid:89)
wi = h2(H(M )||i) · s(cid:89)
j=1
Observe that σi effectively represents a BLS signature under
the key skU of the following value:
umij
j
,
(6)
j=1
The user uploads the ﬁle M, the public key pkU along
with the proof of possession pop(skU), and the ﬁle tags
τ = (σ1, . . . , σn) to the provider S. The user stores locally
pkM = pkU as the veriﬁcation key for the ﬁle and the hash
value H(M ) to be able to reconstruct the values {uj}j=1...m
later on.
Upon receiving (M, pkU, pop(skU), τ ), the provider S
ﬁrst veriﬁes the validity of U’s key using pop(skU). Fur-
thermore, S checks that the tags σi in τ are indeed valid
for the key pkU. A straightforward approach would be to
check that each tag σi
indeed represents a signature of
wi, incurring an effort to evaluate n pairings, which incurs
considerable computational overhead on the provider. In
SPORT, we exploit the fact that the signature scheme is
homomorphic and verify all the signatures in a single batch
veriﬁcation. More precisely, S samples for each block index
i a random exponent ri ∈ Z∗
p and checks whether the
following veriﬁcation holds:
(cid:32)(cid:89)
e
(cid:33)
(cid:32)(cid:89)
(cid:33)
σri
i , g
?= e
wri
i , pkU
.
(7)
i
i
Observe that this reduces the effort from n bilinear pairings
to n exponentiations and one pairing. In Section 4, we show
that this veriﬁcation considerably reduces the computational
overhead borne by the provider in verifying the tags.
If the key and tags are correct, S sets pkM := pkU,
being the public key associated to a secret key skM := skU.
Moreover, the provider creates a log ﬁle, pklog, that will
provide the necessary information needed for any other user
to verify that the keys are well formed. Here, pklog is initial-
ized with {(pkU, pop(skU))}. Following the notation from
Section 2.5, the provider stores the ﬁle M, the metadata
Datausers = (pkM , pklog), and ﬁle metadata Dataﬁle = τ.
∗ Protocol
In Store
∗ protocol
Speciﬁcation of the Store
In case the ﬁle M is already stored and will be deduplicated,
the Store
is executed in order to update the
ﬁle tags τ on the ﬂy, allowing the new user U to obtain
guarantees from the POR protocol without the need to trust
the correctness of the already stored tags (created by other
tenants).
∗, the user proceeds analogously to Store in
order to compute the ﬁle M, its hash value H(M ), and
the ﬁle tags τ = {σi}i=1...n. Here, U also computes M and
the hash value H(M ) and stores the same values as in Store.
The main difference is that the user does not upload the ﬁle
M but only (pkU, pop(skU), τ ) to S.
Upon reception of (pkU, pop(skU), τ ), S checks the va-
lidity of pkU using pop(skU). Moreover, he veriﬁes the
correctness of the newly uploaded tags σi. In principle,
one could apply the same veriﬁcation given in Equation 7.
However, this would require the provider to recompute or
store the values wi. To avoid this, we leverage the bilinear
map to combine the two veriﬁcations (in the signature) and
the fact that the already stored ﬁle tags σ∗
j are correct (as
they have been previously validated by S).
Namely, let τ = (σi)1≤i≤n denote the ﬁle tags uploaded
by the user and τ∗ = (σ∗
i )1≤i≤n be the tags stored by
the provider. SPORT applies cross-veriﬁcation between the
uploaded tags τ and the stored tags τ∗. More precisely, an
uploaded tag σi is correct if and only if it holds that:
e (σi, pkM ) ?= e (σ∗
i , pkU) ,
(8)
exponent ri ∈ Z∗
(cid:32)(cid:89)
i
e
p and checks whether Equation 9 holds:
i , pk(cid:102)M
i )ri , pkU
(σ∗
?= e
σri
(9)
(cid:33)
(cid:33)
(cid:32)(cid:89)
i
If the veriﬁcation succeeds, S updates pkM with pkM · pkU,
and likewise the already stored tags σ∗
i by replacing them
i · σi. Due to the homomorphic properties of the
with σ∗
BLS signature, the new tags will still be correct signatures
under the updated key pkM with respect to an updated
secret key skM → skM + skU. The metadata about the
ﬁle, Dataﬁle, is hence updated to the new tags τ∗—observe
that the size of Dataﬁle remains unchanged. Moreover, the
key pkM is updated in Datausers while the public key
and the corresponding proof of possession of the new user
(pkU, pop(skU)) are appended to pklog.
pass the veriﬁcation, U sets pkM :=(cid:81)
secret key (cid:80)
Finally,
the provider sends to the user the log ﬁle
pklog. Then, U proceeds to check the validity of each pair
(cid:48) (cid:54)= pkU. In case all these keys
, pop(cid:48)) ∈ pklog with pk
(cid:48)
(pk
(cid:48).
(pk(cid:48),pop(cid:48))∈pklog pk
The core idea here is that, at each point in time, the
public key pkM associated to a ﬁle M corresponds to a
U skU, which captures the sum of all secret
keys belonging to the users who uploaded M (see also the
discussion in Section 3.3.2). This ensures that the secret key