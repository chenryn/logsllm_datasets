---
**作者**: Daniel Huigens  
**类别**: 技术  
**评论数据**: 无  
**统计**:  
- 评论数: 0
- 收藏次数: 0
- 点赞数: 0
- 分享次数: 0
- 阅读量: 3073  
**日期**: 2021年10月16日 11:57:31  
**编辑推荐**: 否  
**摘要**: OpenPGP.js 是一个实现了 OpenPGP 标准的密码学库，最常用于电子邮件加密。  
**来源网址**: <https://opensource.com/article/21/10/openpgpjs>  
**ID**: 13888  
**是否精选**: 是  
**大图**: /data/attachment/album/202110/16/115721k1vi1ekzip1kpqkg.jpg  
**永久链接**: /article-13888-1.html  
**图片**: /data/attachment/album/202110/16/115721k1vi1ekzip1kpqkg.jpg.thumb.jpg  
**相关文章**: 无  
**审阅者**: wxy  
**选择者**: lujun9972  
**总结**: OpenPGP.js 是一个实现了 OpenPGP 标准的密码学库，最常用于电子邮件加密。  
**标签**:  
- OpenPGP
- 邮件  
**缩略图**: 否  
**标题**: 最新 OpenPGP.js 版本的 3 个新功能  
**标题图片**: 是  
**翻译者**: geekpi  
**更新时间**: 2021年10月16日 11:57:31  
---

### 引言
OpenPGP.js 是一个实现了 [OpenPGP 标准](https://tools.ietf.org/html/rfc4880) 的密码学库，广泛应用于电子邮件加密。ProtonMail、Mailvelope 和 FlowCrypt 等知名服务均使用该库，为数百万用户提供信息加密。

![](/data/attachment/album/202110/16/115721k1vi1ekzip1kpqkg.jpg "email or newsletters via inbox and browser")

OpenPGP 标准首次发布于上世纪 90 年代，随着技术的发展，需要不断维护和更新以确保其安全性和可用性。当前正在进行的“加密刷新”工作旨在引入现代加密算法并淘汰过时的算法。此外，各种电子邮件应用程序现在允许用户无缝加密通信，无需手动管理密钥。

OpenPGP.js 自 2014 年首次发布以来，经历了多次重大更新。最初的版本基于 GPG4Browsers 原型，并在 2016 年进行了完全重构，采用了 Uint8Arrays 和 ES6 模块。随后的版本分别在 2018 年增加了对椭圆曲线加密（ECC）和流的支持。

我和我的团队继续致力于改进 OpenPGP.js，使其成为一个易于使用的强大加密库。

### 新功能介绍

#### 1. 默认采用椭圆曲线加密
在 OpenPGP.js 第 4 版中，默认生成的新密钥是 RSA 类型。尽管 ECC 更快且更安全，但 Curve25519 尚未在 OpenPGP 规范中标准化。最新的加密刷新草案已包含 Curve25519，预计将在下一版规范中正式采用。因此，第 5 版默认使用 ECC 生成密钥。

#### 2. 按需导入模块
虽然 OpenPGP.js 内部早已采用 ES6 模块，但之前的版本仅发布了一个通用模块定义 (UMD)，可在浏览器和 Node.js 上运行。第 5 版改变了这一情况，为不同平台提供了独立的模块（包括 ES6 和非 ES6），使用户能够根据需求灵活导入所需部分。这是通过将构建系统切换到 [rollup](https://rollupjs.org/) 实现的。

#### 3. 拒绝弱加密
为了提高安全性，第 5 版默认拒绝了被认为不安全的算法，如 1024 位 RSA 密钥、ElGamal 和 DSA 密钥。此外，即使公钥声称只支持较弱的算法，新版也会默认使用 AES 进行加密，假设所有 OpenPGP 实现均已支持 AES。

### 未来展望
未来计划进一步增强安全性。例如，密钥指纹仍使用 SHA-1，但在即将发布的加密刷新中会予以修复。同时，建议采用其他方法验证公钥的真实性，比如直接从接收者的域名获取整个密钥（即 Web Key Directory, WKD 标准）。WKD 支持已在第 4 版中内置，但在第 5 版中被拆分为独立模块以保持主库简洁。

当用密码而非公钥加密数据时（这种情况在电子邮件加密中较少见，但在备份加密中更为常见），目前使用的密钥衍生函数 (KDF) 较弱。建议应用先通过 Argon2 或 scrypt 等强 KDF 转换用户的密码后再传递给 OpenPGP.js。希望未来的加密刷新草案能纳入这些算法之一，以便后续版本实现。

### 如何开始使用
OpenPGP.js 第 5 版现已发布至 npm 仓库。欢迎试用并在 GitHub 讨论区提供反馈。请注意，尽管这是一个通用加密库，但它主要用于需要与 OpenPGP 规范兼容的场景（如 PGP 加密邮件）。对于其他用途，可能有更适合或性能更高的替代方案。无论如何，在使用任何加密技术时都应谨慎行事。

感谢您的阅读！让我们共同守护电子邮件的安全未来！

---
**作者**: [Daniel Huigens](https://opensource.com/users/twiss)  
**选题**: [lujun9972](https://github.com/lujun9972)  
**译者**: [geekpi](https://github.com/geekpi)  
**校对**: [wxy](https://github.com/wxy)  
**本文由 LCTT 原创编译，[Linux中国](https://linux.cn/) 荣誉推出**

---