title:Addressing the shortcomings of one-way chains
author:Roberto Di Pietro and
Luigi V. Mancini and
Antonio Durante and
Vishwas Patil
Addressing the Shortcomings of One-Way Chains∗
Roberto Di Pietro†‡
PI:EMAIL
Luigi V. Mancini
PI:EMAIL
Antonio Durante
PI:EMAIL
Vishwas Patil
PI:EMAIL
Dipartimento di Informatica
Universit`a degli Studi di Roma - La Sapienza
Via Salaria 113, 00198 Roma, Italy
ABSTRACT
One-way hash chains have been the preferred choice, over
the symmetric and asymmetric key cryptography, in secu-
rity setups where eﬃciency mattered; despite the ephemeral
conﬁdentiality and authentication they assure. Known con-
structions of one-way chains (for example, SHA-1 based),
only ensure the forward secrecy and have limitations over
their length i.e., a priori knowledge of chain’s length is nec-
essary before constructing it. In this paper, we will see how
our approach, based on chameleon functions, leads to the
generation of practically unbounded one-way chains with
constant storage and computational requirements. We pro-
vide the construction and advantages of our proposal with
the help of a secure group communication setup. We also
provide the implementation details of our construction and
argue its suitability for security setups, where one cannot a
priori determine the longevity of the setup.
Categories and Subject Descriptors
E.3 [Data Encryption]: Public key cryptosystems; D.4.6
[Operation System]:
security and protection—Authen-
tication, Cryptographic controls; K.6.5 [Management of
Computing and Information Systems]: Security and
Protection; H.4 [Information Systems Applications]:
Miscellaneous
†Authors are listed alphabetically.
‡The author is also associated with CNR-ISTI, WNLab-Pisa
and he is partially supported by the European Commission
in the framework of the “SatNEx” NoE project (contract N.
507052).
∗This work was partially funded by the WEB-MINDS
project supported by the Italian MIUR under the FIRB pro-
gram.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ASIACCS’06, March 21-24, 2006, Taipei, Taiwan.
Copyright 2006 ACM 1-59593-272-0/06/0003 ... 5.00.
General Terms
Security, Design, Management
Keywords
one-way chain, chameleon hash, secure group management
for multicast
1.
INTRODUCTION
Entity authentication is one of the core primitives that is
required to build dependable and secure systems [11]. Sev-
eral cryptographic protocols have been proposed to reach
this goal. These protocols use cryptographic primitives
based on symmetric or asymmetric key crypto-system. The
appropriateness of a cryptographic protocol for an applica-
tion also depends on the storage and computational costs it
incurs. In general, entity authentication is achieved through
asymmetric cryptography leading to data conﬁdentiality us-
ing computationally less expensive symmetric cryptography.
But, to realize such a mechanism, an underlying security
framework is required, called PKI (Public Key Infrastruc-
ture).
Integration of PKI in computationally constrained
environment or in dynamically changing setups is not prac-
tical due to the cost and complexity of the framework [7,
12].
A widely accepted approach is the use of SHA-1 or MD5
based one-way hash chains [16, 14] (alternatively referred as
Lamport chain, in this paper), that provides veriﬁable data
authentication in an eﬃcient way. Much recent work [20],
even tries to achieve the characteristics provided by asym-
metric cryptography with the help of one-way hash chains
and loose time synchronization between the communicating
principals [19], where ephemeral data conﬁdentiality (for-
ward) is ensured but backward secrecy (i.e., conﬁdentiality
of previously communicated data) is absent. Though these
approaches try to address a particular domain of applica-
tions (e.g., [19]), the philosophy can be extended to much
complex scenarios (e.g., group membership, secure multi-
cast communication and key management, etc.,),
in dis-
tributed environment. Lamport chains achieve these objec-
tives eﬃciently, but with few limitations, such as: bounded
chain length and no support for backward secrecy.
In this paper, we propose a construction of one-way chain
that provides all the properties supported under traditional

SHA-1 based one-way chain, apart from unbounded length
and support for backward secrecy. Our construction is based
on chameleon functions [15, 4, 9, 21], that were originally
proposed for undeniable signatures.
In comparison with
the traditional one-way chain schemes, our solution: allows
to generate practically un-bounded one-way chain, whose
length is only limited by the ﬁnite-ness of the ﬁeld over which
the values are generated; has constant storage and compu-
tation requirement; provides forward as well as backward
secrecy of communications; and does not require generation
of complete chain before starting its use, since generation
and usage of the chain proceed in same direction, where the
generation process is at least one step ahead of the later.
The paper is organized as follows: In the next section, we
brieﬂy provide a background and related work, followed by
the properties of the basic building block of our construction,
chameleon functions, and their use in constructing one-way
chains of any length in Section 3. In Section 4, we argue the
importance of the additional properties (unbounded length
and backward secrecy) provided by our construction in a
secure group communication setup. The implementation
details of three diﬀerent ways to construct the chameleon
chains are organized in Section 5, followed by conclusions in
Section 7.
2. BACKGROUND AND RELATED WORK
The chameleon hash functions stem from a non-interactive
chameleon-commitment scheme [8]. An implementation of
the chameleon hash, based on the discrete logarithm, is pro-
vided in [6]. The ﬁrst implementation of a chameleon hash
function designed with the goal of computational eﬃciency
is given in [15], which is a speciﬁc and eﬃcient implemen-
tation of a general claw-free permutation introduced in [13].
These algorithms have been employed with digital signature
to build not transferable signature. The non-transferability
property is convenient in many scenarios in which the signer
has a legitimate interest in controlling subsequent disclo-
sures of the signed information. One application suggested
in [3] is private auctions. However, that ﬁrst eﬀective pro-
posal of chameleon hash functions [15] suﬀered from a key
exposure problem: revealing two colliding chameleon hash
values would reveal the trapdoor, the chameleon hash func-
tion is built upon. To address this problem an identity-
based scheme was proposed in [3], while a key-exposure free
construction, based on the elliptic curves with pairings, ap-
peared later in [9]. The much recent work in [4] provides
several constructions of exposure-free chameleon hash func-
tions based on diﬀerent cryptographic assumptions, such as
RSA and the discrete logarithm assumptions. These algo-
rithms also show an improvement in their computational
eﬃciency. The rising interest in chameleon functions will
probably bring forward more eﬃcient constructions.
As for authentication in multicast communication, the
proposals [19, 20] are eﬃcient; however they work under
the assumption of loose time synchronization between the
sender and the receiver. Relaxing these assumptions results
in possible violation of the packet authenticity. Whereas
in our proposal, violating the loose time synchronization as-
sumption results in the violation of fresh-ness, without com-
promising on the key’s authenticity. Related work address-
ing these problems of authentication over a lossy channel
appeared in [18, 17]. These proposals are mainly based over
the amortization of a signature over several packets. Sim-
0
ilar analogy can be exploited in our approach. However,
addressing issues related with the transmission over unreli-
able channels is not our main concern in this paper.
3. CONSTRUCTION OF CHAMELEON
CHAIN
In this section, we provide a brief overview of chameleon
functions [15, 3, 9, 4] and their properties followed by our
construction of chameleon one-way chain. We shall also ex-
plain functioning of our construction in contrast to the tra-
ditional SHA-1 based one-way chains.
Assume that a principal chooses an asymmetric key-
pair, where HKR denotes the public-key and CKR denotes
its corresponding private-key (also called trap-door). A
chameleon hash function is associated with a unique public-
key. Let CHR(., .) be the chameleon hash function derived
from public-key HKR.
Given a message mi and a random seed ri, CHR(mi, ri)
provides an image (hash value) satisfying the following prop-
erties:
• Collision resistance: There is no eﬃcient algo-
rithm that on input the public key HKR can ﬁnd
pairs m1, r1 and m2, r2 where m1 = m2, such that
CHR(m1, r1) = CHR(m2, r2), except with negligible
probability.
• Trapdoor Collision: There is an eﬃcient algorithm
that on input the secret key CKR, any pair m1, r1,
and any additional message m2, ﬁnds a value r2 such
that CHR(m1, r1) = CHR(m2, r2).
• Uniformity: All messages m induce the same proba-
bility distribution on CHR(m, r) for a given r chosen
uniformly at random [15].
Therefore,
1. the knowledge of public key HKR allows a user to
derive the corresponding chameleon hash function
CHR(., .)
2. only the owner of HKR’s corresponding private
key/trap-door, i.e., CKR, can eﬃciently ﬁnd a colli-
sion for any given output, and
3. for others,
the function CHR(., .) oﬀers
strong
collision-resistance, i.e., it is computationally infeasi-
ble to ﬁnd two inputs with the same image.
Traditional constructions of one-way hash chains us-
ing SHA-1 like cryptographic primitives involves randomly
choosing a seed value and successively applying the one-
way hash function (SHA-1) on the seed value until a desired
length of one-way chain is achieved [16]. Thus, a chain of
length n is:
H n(k), ..., H(H(H(k))), H(H(k)), H(k), k.
(1)
given H n−i(k),
it
Therefore,
is easy to compute
H n−i+1(k), where i = 1, . . . , n − 1; but not vice versa. To
use this chain values as encryption keys for secure communi-
cation, the owner of the chain at ﬁrst communicates H n(k),
called anchor, securely (generally, using asymmetric crypto-
graphic mechanism) to the recipient of the intended commu-
nication. Let us refer to the owner of the chain as “Sender”
k0
...
ki−1
SHA−1 chain
ki+1
ki
generation sequence
...
kn
spending sequence
Chameleon chain
[bounded]
k0
...
ki−1
ki
ki+1
...
kn
kn+1
generation sequence
spending sequence
[un−bounded]
Figure 1: Life spans of SHA-1 and chameleon one-way chains
and as “Receiver” to the recipient of key and data. Once
after providing the anchor to the “Receiver”, “Sender” uses
subsequent values in the chain as encryption keys for data
communication. The authenticity of new encryption key can
be checked by “Receiver” by performing one hash applica-
tion on this new encryption key and checking it against the
old encryption key [16, 19]. As mentioned in previous sec-
tions, this approach suﬀers from the bounded length of the
chain and requires generation of new chains and communi-
cating the anchor to the “Receiver.” The drawback of this
approach is more starking if one uses it in group communica-
tion where backward secrecy is necessary to restrain newly
added members from knowing past communications among
the group members.
Generation of chameleon chain - Generating each
value that constitutes chameleon chain involves, computing
a chameleon hash (cf. Appendix A for discrete-log based ap-
proach), such that the new value collides with the old value
in the chain. Unlike SHA-1 based one-way chain, we do
not need to compute the whole chain a priori to use it. As
shown in Figure 1, in our construction, the chain generation
and spending sequence proceed in same direction. The crux
of our chain construction and its use is enumerated below,
with the help of Figure 2, in step-wise fashion:
• Sender:
1. randomly chooses mi+1 and ri+1, and creates new
key ki+1 = CHR(mi+1, ri+1),
2. chooses si+1 such that;
ki = CHR(mi, ri) = CHR(ki+1, si+1), and
3. sends the message p = {ki+1, si+1} to the user.
• Receiver:
CHR
CHR
CHR
ki−1
ki, si
ki+1, si+1
CHR
CHR
CHR
(mi−1, ri−1)
(mi, ri)
(mi+1, ri+1)
Figure 2: Generation of chameleon one-way chain
by the sender

1. receives the message packet p,
2. authenticates ki+1 by checking if
ki = CHR(ki+1, si+1), otherwise discards ki+1.
Complexity - Our construction, based on schemes
proposed in [15, 21], achieves key authenticity in (stor-
age*computation) complexity O(1), since;
• on sender side:
– it only needs to store the values of current key
ki, next generated key ki+1, the public key HKR
and corresponding secret key CKR, and
– needs to compute O(max{|mi+1|, |ri+1|}) modu-
lar multiplications to perform
ki+1 = CHR(mi+1, ri+1), and O(max{|mi|, |ri|})
modular multiplications to ﬁnd a collision
ki = CHR(mi, ri) = CHR(ki+1, si+1). Note that,
|mi+1| and |ri+1| are constants irrespective of the
chain length.
• on receiver side:
– needs to store the values of public key HKR, cur-
rent key ki, and ki+1 sent by the server;
– needs to compute O(max{|ki+1|, |si+1|}) modular
multiplications to verify ki = CHR(ki+1, si+1).
Note that, |ki+1| and |si+1| are also constants.
Use of SHA-1 based one-way hash chains as a tool for
improving the eﬃciency of a variety of practical and valu-
able security applications is well rooted. The fact that
SHA-1 based chains have to be a priori computed before
starting their use forces its user (the sender) to settle for
a storage versus computation trade-oﬀ. For example, given
the anchor of the chain and an intermediate value ki, the
task to compute next value ki+1 in the chain either takes
(i + 1) SHA-1 computations, or has a storage requirement
of O(n) of a chain of length n. All straightforward com-
binations of these two techniques can be shown to have
a (storage*computation) complexity of O(n), which can
be a substantial computational burden for many resource-
constrained devices, such as wireless sensor networks or
hand-held devices [11]. We have provided a detailed per-
formance analysis of our implementation in Section 5. Let
us bring forward other advantages of our construction, i.e.,
unbounded chain length and backward secrecy with the help
of a typical application setup. In next section we provide an
application of chameleon chain in key management for LKH
(Logical Key Hierarchy) setups.