# 不规范的依赖管理:我如何入侵苹果，微软和数十家公司(新型供应链攻击的故事)
自从我开始学习如何编程，我一直对执行如下一条简单命令的信任程度所吸引。
    pip install package_name
某些编程语言，如Python，附带一种简单，接近官方的方法用于为项目安装依赖项。这些安装程序通常与公开代码存储库绑定，在哪里任何人都可以自由上传代码包供他人使用。
你可能已经听说过这些工具-比如Node有`npm`和npm注册表,Python的`pip`使用PyPI(Python包索引)，和Ruby的gem可以在RubyGems找到。
当下载和使用来自任何资源的包，你基本是信任它的发行者在你的机器上运行代码的。那么这种盲目的信任会被恶意行为者利用吗？
答案是: 当然可以
任何程序包托管服务都无法保证其用户上传的所有代码都是无害的。[过去的研究](https://incolumitas.com/2016/06/08/typosquatting-package-managers/)表明， _typosquatting_
(利用流行软件包名称的错字版本进行攻击)能够非常有效地获取来自全世界各地的随机PC的访问权限。
其他众所周知的依赖项链条攻击路径，包括使用各种方法去破坏现存的软件包，或以不再存在的依赖项名称上传恶意代码。
## 想法
在2020年夏季，Justin
Gardner（[@Rhynorater](https://twitter.com/Rhynorater)）尝试与我入侵PayPal时，分享了在Github上发现有趣的Node.js源码。
该代码旨在供内部PayPal使用，在它的的`package.json`文件中，出现了包含公共依赖和私有依赖混合的情况-公共的软件包来自npm,而非公共的软件包名称，很有可能由PayPal内部托管。这些名称当时在公共npm注册表并不存在。
由于此处不清楚从何处导入包的逻辑，因此产生了几个问题：
  * 如果以这些名称将恶意代码上传到npm会发生什么？PayPal的一些内部项目是否有可能开始默使用新的公共软件包而不是私有软件包？
  * 开发人员甚至自动化系统会开始在库中运行代码吗？
  * 如果这行得通，我们可以从中获得赏金吗？
  * 这种攻击还会对其他公司起作用吗？
事不宜迟，我开始制定计划来回答这些问题。
这个想法是将我自己的“恶意”
Node程序包以无人使用的名称上传到npm注册表中，这将会导致从安装它们的计算机"打电话回家"(PS.发送敏感信息到达我自己建立的DNS服务器)。如果最终将任何软件包安装在PayPal拥有的服务器上（或其他任何地方），就此而言，其中的代码会立即发送信息通知我。
在这一点上，我觉得很重要的一点是，必须明确指出，在此研究过程中所针对的每个组织都已允许通过公共漏洞赏金计划或通过私人协议来对其安全性进行测试。
**未经授权，请勿尝试这种测试** 。
## DNS 永远滴神
值得庆幸的是，npm允许在安装软件包时自动执行任意代码，这使我可以轻松创建一个Node软件包，该软件包通过其`preinstall`脚本收集有关所安装的每台计算机的一些基本信息。
为了在基于数据识别组织的能力与避免收集太多敏感信息之间取得平衡，我决定只记录用户名，主机名和每个唯一安装的当前路径。与外部IP一起使用的数据就足够了，可以帮助安全团队根据我的报告确定可能受到攻击的系统，同时避免将我的测试误认为是实际的攻击。
现在剩下一件事了—我该如何得到这些返回的数据？
众所周知，大多数可能的目标都将位于受到良好保护的企业网络内部，我认识到DNS窃取是解决的好方法，值得尝试。
## 多多益善
有了攻击的基本计划，现在是时候发现更多可能的目标了。
第一个策略是寻找替代生态系统进行攻击。因此，我将代码移植到了Python和Ruby上，以便能够分别将相似的软件包上传到PyPI（Python软件包索引）和RubyGems。
但是，该测试最重要的部分可以说是找到尽可能多的相关依赖项的名称。
在搜索了一些目标公司的私有软件包名称的整整几天后，发现可以在GitHub以及主要软件包托管服务（偶然发布的内部软件包内部）内部的主要软件包托管服务中找到许多其他名称
--甚至在各种互联网论坛上的帖子。
但是，到目前为止，找到私有程序包名称的最佳位置竟然是…在javascript文件中。
显然，`package.json`包含javascript项目依赖项名称的内部文件在构建过程中会嵌入到公共脚本文件中，从而暴露内部程序包名称，这是很常见的。同样，这些文件中泄漏的内部路径或`require()`调用也可能包含依赖项名称。苹果，Yelp和特斯拉只是以这种方式公开内部名称的公司的一些例子。
在2020年下半年，由于[@streaak](https://twitter.com/streaak)的帮助和他出色的侦察技能，我们能够自动扫描属于目标公司的数百万个域，并提取数百个尚未npm注册表声明的javascript程序包名称。
然后，我将代码上传到所有找到的名称下的包托管服务中，并等待回调。
## **结果**
成功率简直是惊人的。
从开发人员在自己的计算机上犯下的一次性错误，到内部配置不当或基于云的构建服务器，再到系统易受攻击的开发管道，结论很明显：抢占正当的内部软件包名称几乎是一种肯定的方法去进入一些最大的科技公司的网络，然后可以远程执行代码，并且可能允许攻击者在构建过程中添加后门。
迄今为止，这类型的漏洞，我已经开始称其为,且在超过35个组织的所有三种测试的编程语言中检测到该类型问题。绝大多数受影响的公司属于1000多名员工类别，这很可能反映了大型组织内部使用内部私有库的普遍性。
由于更容易找到javascript依赖项名称，几乎所有已记录的回调中有75％来自npm软件包-但这并不一定意味着Python和Ruby不太容易受到攻击。实际上，尽管在我的搜索过程中只能识别属于八个组织的内部Ruby