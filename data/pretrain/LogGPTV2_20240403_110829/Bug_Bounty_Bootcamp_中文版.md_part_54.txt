鉴于竞态条件攻击的成功取决于运气，请确保包括再次尝试的指令，如果第一次测试失败。如果存在漏洞，则经过几次尝试后攻击最终应该会成功。
## Escalating Race Conditions {#c12.xhtml#h1-123456c12-0005}
The severity of race conditions depends on the impacted functionality.
When determining the impact of a specific race condition, pay attention
to how much an attacker can potentially gain in terms of monetary reward
or social influence.
竞争条件的严重性取决于受影响的功能。在确定特定竞争条件的影响时，要注意攻击者在货币奖励或社交影响方面可能获得的利益有多大。
For example, if a race condition is found on a critical functionality
like cash withdrawal, fund transfer, or credit card payment, the
vulnerability could lead to infinite financial gain for the attacker.
Prove the impact of a race condition and articulate what attackers will
be able to achieve in your report.
例如，如果发现了一个竞争条件（race
condition），并且它影响到现金提取、资金转移或信用卡支付这样的关键功能，那么这个漏洞可能会给攻击者带来无限的财务利益。在报告中证明竞争条件的影响，并明确攻击者将能够实现什么。
## Finding Your First Race Condition! {#c12.xhtml#h1-123456c12-0006}
Now you're ready to find your first race condition. Follow these steps
to manipulate web applications using this neat technique:
现在你已经准备好了找到你的第一个竞争条件。按照以下步骤使用这种巧妙的技巧操作网页应用程序：
1.  Spot the features prone to race conditions in the target application
    and copy the corresponding requests.
2.  Send multiple of these critical requests to the server
    simultaneously. You should craft requests that should be allowed
    once but not allowed multiple times.
3.  Check the results to see if your attack has succeeded. And try to
    execute the attack multiple times to maximize the chance of success.
4.  Consider the impact of the race condition you just found.
5.  Draft up your first race condition report!
:::
[]{#c13.xhtml}
::: section
# [ [ ]{#c13.xhtml#Page_213 .pagebreak title="213"} 13 ]{.ChapterNumber} [ Server-Side Request Forgery ]{.ChapterTitle} {.chapter}
![](image_fi/book_art/chapterart.png)
*Server-side request forgery (* *SSRF)* is a vulnerability that lets an
attacker send requests on behalf of a server. During an SSRF, attackers
forge the request signatures of the vulnerable server, allowing them to
assume a privileged position on a network, bypass firewall controls, and
gain access to internal services.
服务器端请求伪造（SSRF）是一种漏洞，能让攻击者代表服务器发送请求。在SSRF期间，攻击者伪造易受攻击的服务器的请求签名，使他们能够在网络上扮演特权角色，绕过防火墙控制，并访问内部服务。
In this chapter, we'll cover how SSRF works, how to bypass common
protections for it, and how to escalate the vulnerability when you find
one.
在本章中，我们将介绍SSRF的工作原理，如何绕过常见的保护措施，以及在发现漏洞时如何升级漏洞。
## Mechanisms {#c13.xhtml#h1-123456c13-0001}
SSRF vulnerabilities occur when an attacker finds a way to send requests
as a trusted server in the target's network. Imagine a public-facing web
server on *example.com* 's network named *public.example.com* . This
server hosts a proxy service, located at *public.example.com/proxy* ,
that fetches the web page specified [ ]{#c13.xhtml#Page_214 .pagebreak
title="214"} in the `      url     ` parameter and displays it back to
the user. For example, when the user accesses the following URL, the web
application would display the *google.com* home page:
SSRF漏洞是当攻击者找到一种方式以目标网络中的可信服务器发送请求时发生的。想象一下，example.com网络上有一个公共面向Web的服务器，名为public.example.com。该服务器提供一个代理服务，位于public.example.com/proxy处，可以获取url参数中指定的Web页面并将其显示给用户。例如，当用户访问以下URL时，Web应用程序将显示google.com主页：
    https://public.example.com/proxy?url=https://google.com
Now let's say *admin.example.com* is an internal server on the network
hosting an admin panel. To ensure that only employees can access the
panel, administrators set up access controls to keep it from being
reached via the internet. Only machines with a valid internal IP, like
an employee workstation, can access the panel.
现在假设admin.example.com是网络上托管管理面板的内部服务器。为确保只有员工可以访问该面板，管理员设置了访问控制，以防止从互联网访问该面板。只有具有有效内部IP地址（如员工工作站）的计算机才能访问该面板。
Now, what if a regular user accesses the following URL?
现在，如果普通用户访问以下网址会怎样？
    https://public.example.com/proxy?url=https://admin.example.com
Here, the `      url     ` parameter is set to the URL of the internal
admin panel. With no SSRF protection mechanism in place, the web
application would display the admin panel to the user, because the
request to the admin panel is coming from the web server,
*public.example.com* , a trusted machine on the network.
在这里，URL参数设置为内部管理面板的URL。如果没有SSRF保护机制，Web应用程序将向用户显示管理面板，因为对管理面板的请求来自于网络中被信任的机器public.example.com的Web服务器。
Through SSRF, servers accept unauthorized requests that firewall
controls would normally block, like fetching the admin panel from a
non-company machine. Often, the protection that exists on the network
perimeter, between public-facing web servers and internet machines, does
not exist between machines on the trusted network. Therefore, the
protection that hides the admin panel from the internet doesn't apply to
requests sent between the web server and the admin panel server.
通过SSRF，服务器接受未经授权的请求，这些请求通常会被防火墙控制所拦截，例如从非公司机器获取管理员面板。通常，位于公共面向的Web服务器和互联网机器之间的网络边缘上存在的保护并不存在于信任网络中的机器之间。因此，将管理员面板从互联网上隐藏的保护措施不适用于Web服务器之间和管理员面板服务器之间发送的请求。
By forging requests from trusted servers, an attacker can pivot into an
organization's internal network and conduct all kinds of malicious
activities. Depending on the permissions given to the vulnerable
internet-facing server, an attacker might be able to read sensitive
files, make internal API calls, and access internal services.
通过伪造来自受信任服务器的请求，攻击者可以在组织的内部网络中转并进行各种恶意活动。根据易受攻击的面向互联网的服务器获得的权限，攻击者可能能够读取敏感文件、进行内部API调用以及访问内部服务。
SSRF vulnerabilities have two types: regular SSRF and blind SSRF. The
mechanisms behind both are the same: each exploits the trust between
machines on the same network. The only difference is that in a blind
SSRF, the attacker does not receive feedback from the server via an HTTP
response or an error message. For instance, in the earlier example, we'd
know the SSRF worked if we see *admin.example.com* displayed. But in a
blind SSRF, the forged request executes without any confirmation sent to
the attacker.
SSRF漏洞有两种类型：正常的SSRF和盲目SSRF。两者背后的机制相同：都是利用同一网络上机器之间的信任。唯一的区别在于盲目SSRF，攻击者无法通过HTTP响应或错误消息从服务器获得反馈。例如，在之前的例子中，如果我们看到了admin.example.com的显示，那么我们就知道SSRF已经生效了。但是，在盲目的SSRF中，伪造的请求会执行，而没有任何确认发送给攻击者。
Let's say that on *public.example.com* another functionality allows
users to send requests via its web server. But this endpoint does not
return the resulting page to the user. If attackers can send requests to
the internal network, the endpoint suffers from a blind SSRF
vulnerability:
假设在public.example.com上，另一个功能允许用户通过其Web服务器发送请求。但是，该端点不会将结果页面返回给用户。如果攻击者能够向内部网络发送请求，则该端点会遭受盲SSRF漏洞的影响。
    https://public.example.com/send_request?url=https://admin.example.com/delete_user?user=1
[ ]{#c13.xhtml#Page_215 .pagebreak title="215"} Although blind SSRFs are
harder to exploit, they're still extremely valuable to an attacker, who
might be able to perform network scanning and exploit other
vulnerabilities on the network. We'll get more into this later.
虽然无法看到的 SSRFs
更难被利用，但对攻击者来说仍然极其有价值，因为攻击者可能能够在网络上执行网络扫描并利用其他漏洞。我们稍后会深入探讨这个问题。
## Prevention {#c13.xhtml#h1-123456c13-0002}
SSRFs happen when servers need to send requests to obtain external
resources. For example, when you post a link on Twitter, Twitter fetches
an image from that external site to create a thumbnail. If the server
doesn't stop users from accessing internal resources using the same
mechanisms, SSRF vulnerabilities occur.
当服务器需要发送请求以获取外部资源时，就会发生SSRF。例如，当您在Twitter上发布链接时，Twitter将从外部站点获取图像以创建缩略图。如果服务器未通过相同的机制阻止用户访问内部资源，就会发生SSRF漏洞。
Let's look at another example. Say a page on *public.example.com* allows
users to upload a profile photo by retrieving it from a URL via this
POST request:
让我们看另一个例子。假设公共示例网站上的一个页面允许用户通过通过此POST请求从URL检索上传个人资料照片。
    POST /upload_profile_from_url
    Host: public.example.com
    (POST request body)
    user_id=1234&url=https://www.attacker.com/profile.jpeg
To fetch *profile.jpeg* from *attacker.com* , the web application would
have to visit and retrieve contents from *attacker.com.* This is the
safe and intended behavior of the application. But if the server does
not make a distinction between internal and external resources, an
attacker could just as easily request a local file stored on the server,
or any other file on the network. For instance, they could make the
following POST request, which would cause the web server to fetch the
sensitive file and display it as the user's profile picture:
从攻击者.com获取profile.jpeg，Web应用程序必须访问并检索攻击者.com的内容。这是应用程序的安全和预期行为。但是，如果服务器不区分内部和外部资源，则攻击者可以轻松请求存储在服务器上的本地文件或网络上的任何其他文件。例如，他们可以发起以下POST请求，这将导致Web服务器获取敏感文件并将其显示为用户的个人资料图片。
    POST /upload_profile_from_url
    Host: public.example.com
    (POST request body)
    user_id=1234&url=https://localhost/passwords.txt
Two main types of protection against SSRFs exist: blocklists and
allowlists. *Blocklists* are lists of banned addresses. The server will
block a request if it contains a blocklisted address as input. Because
applications often need to fetch resources from a variety of internet
sources, too many to explicitly allow, most applications use this
method. Companies blocklist internal network addresses and reject any
request that redirects to those addresses.
防止SSRF的两种主要保护类型：封锁列表和白名单。封锁列表是被禁止的地址列表。如果请求包含封锁列表中的地址作为输入，服务器将阻止该请求。由于应用程序通常需要从各种互联网源获取资源，这些源太多了以至于无法明确允许它们，因此大多数应用程序使用此方法。公司会封锁内部网络地址并拒绝任何重定向到这些地址的请求。
On the other hand, when a site implements *allowlist* protection, the
server allows only requests that contain URLs found in a predetermined
list and rejects all other requests. Some servers also protect against
SSRFs by requiring special headers or secret tokens in internal
requests.
另一方面，当一个站点实施白名单保护时，服务器仅允许包含预定列表中的URL的请求，并拒绝所有其他请求。一些服务器还通过要求内部请求中包含特殊标头或秘密令牌来防止SSRF。
## [ ]{#c13.xhtml#Page_216 .pagebreak title="216"} Hunting for SSRFs {#c13.xhtml#h1-123456c13-0003}
The best way to discover SSRF vulnerabilities is through a review of the
application's source code, in which you check if the application
validates all user-provided URLs. But when you can't obtain the source
code, you should focus your efforts on testing the features most prone
to SSRF.
发现SSRF漏洞的最佳方法是通过审查应用程序的源代码，您可以检查应用程序是否验证了所有用户提供的URL。但如果您无法获取源代码，则应将重点放在最容易受到SSRF攻击的功能测试上。
### Step 1: Spot Features Prone to SSRFs {#c13.xhtml#h2-123456c13-0001}
SSRFs occur in features that require visiting and fetching external
resources. These include webhooks, file uploads, document and image
processors, link expansions or thumbnails, and proxy services. It's also
worth testing any endpoint that processes a user-provided URL. And pay
attention to potential SSRF entry points that are less obvious, like
URLs embedded in files that are processed by the application (XML files
and PDF files can often be used to trigger SSRFs), hidden API endpoints
that accept URLs as input, and input that gets inserted into HTML tags.
SSRF通常发生在需要访问和获取外部资源的功能中，包括网络挂接、文件上传、文档和图片处理器、链接扩展或缩略图以及代理服务。还应该测试任何处理用户提供的URL的端点。并且要注意潜在的SSRF入口点，如嵌入在应用程序中处理的文件中的URL（XML文件和PDF文件通常可用于触发SSRF），接受URL作为输入的隐藏API端点以及插入到HTML标记中的输入。
*Webhooks* are custom HTTP callback endpoints used as a notification
system for certain application events. When an event such as new user
sign-up or application error occurs, the originating site will make an
HTTP request to the webhook URL. These HTTP requests help the company
collect information about the website's performance and visitors. It
also helps organizations keep data in sync across multiple web
applications.
Webhooks是自定义的HTTP回调端点，用作特定应用程序事件的通知系统。当发生诸如新用户注册或应用错误之类的事件时，来源网站将向Webhook
URL发出HTTP请求。这些HTTP请求有助于公司收集有关网站性能和访问者的信息。它还帮助组织在多个Web应用程序之间保持数据同步。
And in the event that one action from an application needs to trigger an
action on another application, webhooks are a way of notifying the
system to kick-start another process. For example, if a company wants to
send a welcome email to every user who follows its social media account,
it can use a webhook to connect the two applications.
当一个应用程序的某个操作需要触发另一个应用程序的操作时，Webhooks
可以通知系统启动另一个进程。例如，如果一个公司想要向每个关注其社交媒体账户的用户发送欢迎邮件，它可以使用
Webhook 来连接这两个应用程序。
Many websites allow users to set up their webhook URLs, and these
settings pages are often vulnerable to SSRF. Most of the time, an
application's webhook service is in its developers' portal. For example,
Slack allows application owners to set up a webhook via its app
configuration page (
[https://api.slack.com/apps/](https://api.slack.com/apps/){.LinkURL} ).
Under the Event Subscriptions heading, you can specify a URL at which
Slack will notify you when special events happen ( [Figure
13-1](#c13.xhtml#figure13-1){#c13.xhtml#figureanchor13-1} ). The Request
URL field of these webhook services is often vulnerable to SSRF.
许多网站允许用户设置其Webhook
URL，并且这些设置页面经常容易受到SSRF的攻击。大多数情况下，应用程序的Webhook服务在其开发者门户中。例如，Slack允许应用程序所有者通过其应用配置页面设置Webhook（https://api.slack.com/apps/）。在事件订阅标题下，您可以指定一个URL，Slack将在特殊事件发生时通知您（图13-1）。这些Webhook服务的请求URL字段经常容易受到SSRF的攻击。
On the other hand, *proxy services* refer to services that act as an
intermediary between two machines. They sit between the client and the
server of a request to facilitate or control their communication. Common