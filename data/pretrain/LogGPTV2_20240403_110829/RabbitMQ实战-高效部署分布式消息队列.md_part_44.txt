queue_not_found_error(QName)->
rabbit_misc:protocol_error(
internal_error,
"could-not_find queue'~s'",
[QName]).
现在你的交换器正在运行，该对它进行测试了。让我们编写发布者和消费者来
试试看吧。
12.3.4测试你的插件
为了测试自定义交换器，你将创建一对PHP脚本：其中一个是消费者，另一个
是生产者。你的测试内容包括：开启消费者，然后在不同的终端窗口运行生产者，
发布100条消息到最近历史交换器。期望的结果是消费者接收并消费了所有消息。
在普通的AMQP场景下，你应该无法在服务器上再看到这些消息了。在我们的示例
中，你使用了自定义交换器，在其缓存中应该仍有最近20条消息可用。为了证明这
一点，你将在不同的窗口启动另一个消费者，并将队列绑定到交换器上。之后，你
期望接收最近20条消息。让我们创建recent_history_consumer.php文件，并
添加以下代码。
清单12.12RecentHistoryExchange消费者
dude>
require_once('../path/to/lib/php-amqplib/amqp.inc');
define('HosT'，'localhost'）;
define（'PORT',5672）;
define('USER'，'guest'）;
define('PASS'，'guest');
define（'VHOsT'，'/'）;
$exchange ='rh-exchange';
---
## Page 290
268
第12章聪明的Rabbit：扩展RabbitMQ
$conn = new AMQPConnection(HOST，PORT，USER，PASS,VHOST);
$ch=$conn->channel();
$ch->exchange_declare($exchange,
'x-recent-history',
声明最
false,
近历史
true,
①交换器
false);
list($queue,,）=$ch->queue_declare('');
$ch->queue_bind($queue,$exchange);
将队列绑
$consumer =function($msg）(
定到交换
②器上
echo $msg->body,"\t";
）
$ch->basic_consume(
squeue,
3订阅队列
false,
true,
false,
false,
$consumer);
function shutdown($conn,$ch){
$ch->close();
$conn->close();
4等待发来
register_shutdown_function('shutdown'，$conn,$ch);
的消息
while(count($ch->callbacks)){
$ch->wait();
？>
这里的代码和之前你在本书中见到的消费者很相似。重要的细节之处在于当你
声明交换器时，你通过指定类型为x-recent-history来告诉RabbitMQ你想要
使用自定义交换器。记住如果你运行的服务器没有安装该插件的话，那么这段代码
将会抛出异常并失败。这是因为RabbitMQ无法找到对应该交换器类型的模块。在
创建交换器后，你声明了匿名队列并将其绑定到交换器上②。然后你将$consume
传递给basic_consume方法，开始从队列中消费消息3。你的回调函数会将接收
到的消息内容回显（echo）到STD_OUT上。最后，你在信道上等待发来的消息4。
让我们继续编写生产者代码。创建recent_history_producer·php文件，
并添加以下内容。
---
## Page 291
12.3创建自定义交换器模块
269
清单12.13RecentHistoryExchange生产者
dude>
require_once('../path/to/lib/php-amqplib/amqp.inc');
define('HosT'，'localhost'）;
define('PORT'，5672）;
define('UsER'，'guest');
define('PAsS'，'guest'）;
define（'VHOsT'，'/"）;
$conn = new AMQPConnection(HOST, PORT, USER, PASS,VHOST);
$channel = $conn->channel();
for($i=0;$ibasic_publish($msg,'rh-exchange');
发布100条
消息
$channel->close();
$conn->close();
？>
与消费者一样，这段代码和你在本书中创建的其他生产者很相似。在这里，你
发送100条消息①到之前脚本中创建的rh-exchange交换器。为了能够识别每一
条消息，你使用循环变量来对消息进行标记。现在让我们开启三个终端窗口来测试
这段代码。注意，由于之前调用了makerun-in-broker，此时RabbitMQ应该还
运行着。
开启一个终端窗口，进人到保存之前PHP代码的文件夹，并输人
$ php recent_history_consumer.php
consuming from queue:amq.gen-C56UdaXBTQdIeSEkiUPiZQ==
这样就开启了一个消费者，并输出了在哪个队列上进行消费。注意，你机器上
的队列名称可能会不太一样。
然后，开启另一个终端，启动生产者并向RabbitMQ发送100条消息。输人下
列命令：
$ php recent_history_producer.php
如果一切正常，并且消息从交换器路由到了消费者的话，那么在第一个窗口你
应见到如下输出：
---
## Page 292
270
第12章聪明的Rabbit：扩展RabbitMQ
$php recent_history_consumer.php
consuming from queue:amq.gen-nipi9vrRRoEOr/ZKI1kuaw==
msg_0msg_1msg_2msg_3msg_4msg_5msg_6
msg_7msg_8msg_9msg_10msg_1lmsg_12msg_13
msg_14 msg_15 msg_16 msg_17 msg_18 msg_19
...omitted output
msg_71 msg_72 msg_73msg_74msg_75 msg_76 msg_77
msg_78 msg_79 msg_80 msg_81 msg_82 msg_83 msg_84
msg_85 msg_86 msg_87 msg_88 msg_89 msg_90 msg_91
msg_92 msg_93msg_94msg_95msg_96 msg_97 msg_98
msg_99
现在，如果你切回最后的那个窗口，并启动第二个消费者，就应该可以获取最
近20条消息。让我们试试吧：
$php recent_history_consumer.php
msg_80 msg_81msg_82msg_83msg_84msg_85msg_86msg_87
msg_88 msg_89msg_90msg_91msg_92msg_93msg_94msg_95
msg_96msg_97msg_98msg_99msg_80msg_81msg_82msg_83
msg_84 msg_85msg_86msg_87msg_88msg_89msg_90msg_91
msg_92 msg_93msg_94msg_95msg_96msg_97msg_98msg_99
喔。试验成功了！让我们看看发生了什么。首先，你启动了消费者，它声明了
rh-exchange交换器；然后消费者将一个匿名队列绑定到该交换器上，并订阅了
该队列。之后你启动了单独的窗口，发送了100条消息，并如期望的那样，那些消
息投递到了最初的那个消费者。最后，你在单独的窗口启动了另一个消费者，无须
发送任何新的消息，最近20条消息就会投递给该消费者。让我们看一下图12.3，观
察一下当同时运行的时候，这两个测试的输出。
你完成了创建自己插件的练习，也就是自定义交换器。现在该来停止用于测试
插件的RabbitMQ实例了。为了做到这一点，在Erlang命令行上输人q（）·。注意，
语句中最后的这个点“：”是必需的。如果没有包含该点的话，Erlang解释器就会继
续等待输人。当回到shell命令行上的时候，你可以输人lsdist/来看看辛勤工作
的产物：插件的.ez文件。
$ ls dist/
amqp_client-0.0.0.ez
rabbit_common-0.0.0.ez
rabbitmq_recent_history_exchange-0.1.0-rmq.ez
---
## Page 293
12.4总结
271
Terminal-php-104x11
mrhyde:chapter-12 mrhydes php recent_history_consumer.php
consuming from queue:amq.gen-nipi9vrRRoE0r/ZKI1kuaw=s
065
msg_1
msg_2msg_3msg_4msg_5msg_6msg_7msg_8msg_9msg_10msg_11
msg_12m
$9_13
msg_14msg_15
5msg_16msg_17 msg_18msg_19
msg_20msg_21
m5g_22msg_23
msg_24
msg_25m
sg_26
msg_27msg_28
ms9_29
msg_30 msg_31msg_32
msg34
msg_35
9E6sW
msg_37
6-65
msg_40msg_41
msg_42msg_43
msg_44msg_45
5msg_46msg_47
7msg_48msg_49
sg_52
4msg_55msg_56msg_57msg_58msg_59 msg.60msg.61msg.62
sg_65
msg_66msg_67
msg_68
695s
msg_70
msg_71
msg_72
msg_73
msg_74
msg_75
msg_76
m59_77m
sg_78
msg_79msg_80
0msg_81 msg_82 msg_83 msg.84
msg_85msg_86
msg_87msg_88msg_89msg_90m
sg_91
msg_92msg_93msg_94msg_95msg_96msg_97msg_98.msg_99
Terminal-bash-104x12
mrhyde:chapter-12mrhydes php recent_history_producer.php
mrhyde:chapter-12 mrhydes
Terminalphp-104x11
mrhyde:chapter-12 mrhydes php recent_history_consumer.php
msg_80msg_81
msg_82msg_83msg_84msg_85msg_86
msg_87 msg_88msg_89
066sW
msg_91
msg_92m
sg_93
msg_94 msg_95 msg_96 msg_97 msg_98 msg_99
msg_80msg_81
msg_82
86s
msg__84
586sm
sg_86
msg._97
w866sw
sg_99
图12.3测试RecentHistoryExchange
如果你想要将插件安装到服务器上的话，那么就将文件rabbitmq_recent
historY_exchange-0.0.O.ez复制到RabbitMQ安装目录下的plugins文件夹
下7，然后运行下列命令并重启服务器：
rabbitmq-plugins enable rabbitmq_recent_history_exchange
如果你希望移除插件的话，则首先要做的是删除用x-recent-history类型
声明的所有交换器，然后你就能禁用插件并重启服务器了。如果需要的话，你可以
从plugins文件夹中移除rabbitmq_recent_history_exchange插件文件。
12.4总结
如果你认为会被RabbitMQ默认出厂设置限制住的话，那么本章就向你证
明了事实并非如此。市面上有很多RabbitMQ的插件，包括官方支持的如管理
7rabbit_common-0.0.0.ez和amqp_client-0.0.0.ez这两个文件仅在构建你的插件时才需
要。由于这两个文件中的内容已经随RabbitMQ一起发布了，因此它们不需要部署到服务器的plugins
文件夹下。
---
## Page 294
272
第12章聪明的Rabbit：扩展RabbitMQ
（Management）插件和STOMP插件，它们能够向服务器添加额外的功能和新的协议，
以及社区提供的插件（如Riak交换器）。你也将RabbitMQ探了个究竟，并实现了
自己的插件。当然，我们想带给你的不仅仅是HelloWorld之类的项目，所以你能创
建自定义交换器。一路下来，你快速浏览了Erlang编程，之后如果你想要更深入地
了解RabbitMQ源代码以学习它的内部行为的话，这对你很有帮助。为了创建插件，
你学习了RabbitMQ公伞构建系统，它可以帮助你从源代码编译服务器和其他插件。
总之，现在你可以按自己的想法来打造RabbitMQ了。
通过使用自定义代码来将RabbitMQ按照你的意愿进行打造的这种能力代表了
Rabbit这座“大山”的巅峰，同时也为我们的旅程画上了圆满的句号。你从最简单