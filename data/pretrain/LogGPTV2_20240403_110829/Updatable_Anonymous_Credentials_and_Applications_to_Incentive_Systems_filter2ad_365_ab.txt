double-spending.
Hartung et al. [HHNR17] present an improved framework of black-box accumulation (BBA+)
based on the framework introduced in [JR16]. In [HHNR17], BBA is extended with oﬄine double-
spending prevention (on which we base our oﬄine double-spending mechanism) and other desirable
features. Because of eﬃciency reasons, users needs to reveal their point count whenever they spend
points. Their eﬃciency problems mainly stem from the use of Groth-Sahai proofs. Note that the use
of Groth-Sahai is inherent in their approach (because their proof statements are mostly about group
elements). It is unclear whether their construction can be made more eﬃcient by exchanging the
proof system without changing the approach. In contrast, our incentive system can be instantiated
in a Schnorr proof setting (with proof statements mostly about discrete logarithms). Because the
Schnorr setting allows for very eﬃcient proofs [BBB+18, CCs08], our incentive system is also very
eﬃcient.
What prior work does not handle is the conjunction of oﬄine-double spending prevention and
partial spending (even when disregarding eﬃciency concerns). If a spend operation is later detected
as double-spending, the remainder token still remains valid in prior constructions. Our construction
solves this, allowing the provider to trace all tokens derived from double-spent transactions to a
user. The price of this solution is forward and backward privacy as deﬁned in [HHNR17], which our
scheme does not oﬀer.
Overall, with the UACS-based incentive system approach, we improve upon the current state-of-
the-art [HHNR17] (from 2017 ACM CCS) in two ways: (1) eﬃciency (mostly because our approach
allows us to avoid Groth-Sahai proofs), and (2) we enable the combination of oﬄine double-spending
prevention and partial spending. It is an interesting open question whether or not our remainder
token tracing mechanism can be combined with forward and backward privacy as in [HHNR17].
A basic version of the idea of using updates on credentials for incentive systems has been informally
considered in a 2005 technical report [DDD05] before.
Our contribution and structure of this paper. We introduce UACS formally in Section 3
and deﬁne its security properties. In Section 4, we construct UACS generically from blind signature
schemes and in Section 5, we sketch how to eﬃciently instantiate UACS using the generic framework.
We deﬁne formal requirements for incentive systems in Section 6, modeling our double-spend
prevention mechanism and deﬁning security. In Section 7, we construct an incentive system from a
UACS. Finally, we practically evaluate our incentive system in Section 8.
2 Preliminaries
Throughout the paper, we refer to a public-parameter generation ppt G that outputs public parameters
pp given unary security parameter 1λ. A function f : N → R is negligible if for all c > 0 there is
an x0 such that f(x)  x0. We refer to a negligible function as negl. We write
outputA[A ↔ B] for interactive algorithms A, B to denote the output of A after interacting with B.
The support of a probabilistic algorithm A on input x is denoted by [A(x)] := {y | Pr[A(x) = y] > 0}.
The expression ZKAK[(w); (x, w) ∈ R] denotes a zero-knowledge argument of knowledge protocol
where the prover proves knowledge of w such that (x, w) is in some NP relation R. The zero-
knowledge argument of knowledge can be simulated perfectly given a trapdoor [Dam00] and there
5
exists an expected polynomial-time extractor that, given black-box access to a successful prover,
computes a witness w with probability 1 [Dam00].
We deﬁne security with an oracle-based notation, where an adversary A gets oracle access to
some methods or protocols. Some oracles are interactive, i.e. they may send and receive messages
during a call. We distinguish between the oracle’s (local) output, which is generally given to the
adversary, and the oracle’s sent and received messages. The notation Oracle(·) denotes that A
chooses x, then oracle Oracle(x) is run interacting with A. A is given the output of the oracle
(if any). The notation (x, y) 7→ Oracle0(x) ↔ Oracle1(y) denotes that the adversary A chooses
inputs x, y, then Oracle0(x) ↔ Oracle1(y) are run, interacting with one another. A is given the
output of both oracles, but not the messages sent or received by the oracles.
For blind signatures, we require that the blind signing protocol is of the form “commit to the
message(s) to sign, then jointly compute the signature“. As such, we model the commitment step
and the “receive a signature on the committed value” step separately.
Deﬁnition 1. A blind signature scheme for signing committed values Πsig consists of the following
(ppt) algorithms:
KeyGensig(pp, 1n) → (pk, sk) generates a key pair (pk, sk) for signatures on vectors of n messages.
We assume n can be eﬃciently derived from pk.
Commitsig(pp, pk, ~m, r) → c given messages ~m ∈ Mn and randomness r, deterministically computes
a commitment c.
BlindSignsig(pp, pk, sk, c) ↔ BlindRcvsig(pp, pk, ~m, r) → σ with
common input pp, pk is an interactive protocol. The signer’s input is sk, c. The receiver’s input
consists of the messages ~m and commitment randomness r. The receiver outputs a signature σ.
Vrfysig(pp, pk, ~m, σ) → b deterministically checks signature σ and outputs 0 or 1.
A blind signature scheme is correct if for all λ, n ∈ N and all pp ∈ [G(1λ)], (pk, sk) ∈ [KeyGen(pp, 1n)],
all ~m ∈ Mn, and for every commitment randomness r, it holds that
Pr[BlindSign(pp, pk, sk, Commit(pp, pk, ~m, r))
↔ BlindRcv(pp, pk, ~m, r) → σ :
Vrfy(pp, pk, ~m, σ) = 1] = 1
(cid:5)
We require for a blind signature scheme unforgeability and perfect message privacy, cf. Appendix A,
Deﬁnitions 17 and 18. Deﬁnition 1 can be instantiated by Pointcheval Sanders signatures [PS16].
We furthermore need public-key encryption with the property that the key generation KeyGenenc
ﬁrst generates a secret key sk, from which the corresponding public key pk = ComputePK(pp, sk)
can be deterministically computed. For example, for ElGamal encryption with ﬁxed base g, we have
that sk ← Zp and the public key is ComputePK(pp, sk) = gsk.
Deﬁnition 2. A public-key encryption scheme Πenc consists of four ppt algorithms KeyGenenc,
ComputePKenc, Encryptenc, Decryptenc such that Decryptenc and ComputePKenc are deterministic and
for all pp ∈ [G(1λ)], all sk ∈ [KeyGenenc(pp)], and all messages m it holds that Pr[Decryptenc(pp, sk,
(cid:5)
Encryptenc(pp, ComputePKenc(pp, sk), m)) = m] = 1.
For the sake of privacy in our constructions, we will later demand key-indistinguishable CPA
security. This notion requires that, in addition to CPA-security, ciphertexts cannot be linked to
their public key (cf. Appendix A, Deﬁnition 19). This is the case for ElGamal encryption. Finally,
we use an additively malleable commitment scheme.
6
Deﬁnition 3. A malleable commitment scheme Πcmt consists of four ppt algorithms (KeyGen,
for all pp ∈ [G(1λ)], all pk ∈ [KeyGen(pp)], all m ∈ Mpp, and all (c, o) ∈
Commit, Vrfy, Add) s.t.
[Commit(pp, pk, m)]
• The message space Mpp is an (additive) group,
• Vrfy and Add are deterministic,
• Vrfy(pp, pk, c, o, m) = 1, and
• For c0 = Add(pp, pk, c, k), it holds that (c0, o) ∈ [Commit(pp, pk, m + k)].
We require the commitment to be perfectly binding and computationally hiding, cf. Appendix A,
Deﬁnitions 20 and 21. Deﬁnition 3 can be instantiated by ElGamal encryption.
3 Updatable Anonymous Credentials
In UACS, there are three roles: issuers, users, and veriﬁers. Each role can be instantiated arbitrarily
many times. Issuers hold keys to issue credentials to users. Credentials are certiﬁcates that are
parameterized with attributes. Users can prove possession of a credential to veriﬁers. Users can
interact with their credential’s issuer to change its attributes.
3.1 Algorithms of UACS
A UACS consists of ppt algorithms Setup, IssuerKeyGen, and interactive protocols Issue ↔ Receive,
Update ↔ UpdRcv, and ShowPrv ↔ ShowVrfy. We explain them in the following:
Setup We assume that some trusted party has already generated public parameters pp ← G(1λ).
pp may, for example, contain a description of a group, which can also be used for any number
of other cryptographic applications. To set up a UACS, a trusted party generates UACS-speciﬁc
parameters cpp ← Setup(pp). cpp may, for example, contain pp and parameters for a zero-knowledge
proof system. The distinction between G and Setup is made to enable formal compatibility of UACS
with other primitives, as long as they use the same pp. cpp is published and we assume that an
attribute universe A is encoded in cpp (e.g., A = Zp).
Key generation Whenever a new issuer wants to participate in the UACS, he ﬁrst chooses an
attribute vector length n ∈ N and then generates a key pair (pk, sk) ← IssuerKeyGen(cpp, 1n). The
secret key sk will be used to issue and update credentials, the public key pk will be used to identify
the issuer and to verify credentials issued by him. Credentials by this issuer will be parameterized
with a vector ~A ∈ An.
In a UACS, users do not generally need keys. This is in contrast to the usual deﬁnitions of
anonymous credentials, in which users explicitly generate a secret identity. We generalize that
approach for UACS and leave the implementation of user identities to the application, if desired (see
Section 3.3).
Issuing and updating credentials Users have two ways to receive new credentials: receive a
fresh credential from an issuer, or update an old one.
Assume the user holds a credential cred with attributes ~A and wants to update it. User and issuer
ﬁrst agree on an update function ψ : An × {0, 1}∗ → An ∪ {⊥}, and the user secretly chooses a
hidden parameter α s.t. ψ( ~A, α) 6=⊥. The issuer and user then engage in an interactive protocol:
the issuer runs Update(cpp, pk, ψ, sk) while the user runs UpdRcv(cpp, pk, ψ, α, cred). Afterwards,
7
UpdRcv outputs a new credential cred∗ with attributes ~A∗ = ψ( ~A, α) or the failure symbol (e.g., if
ψ( ~A, α) =⊥).
Furthermore, Update outputs a bit b to the issuer, which informally serves as an indicator whether
or not the update was successful. In particular b = 1 guarantees that ψ( ~A, α) 6=⊥. This eﬀectively
means that, with an appropriately chosen ψ, a credential update implicitly includes a check of the
old credential’s attributes.
We model issuing a new credential essentially as an update of an “empty” credential: User and
issuer ﬁrst agree on an update function ψ : {⊥} × {0, 1}∗ → An ∪ {⊥}, and the user secretly chooses
a hidden parameter α s.t. ψ(⊥, α) 6=⊥. Then the issuer runs Issue(cpp, pk, ψ, sk) while the user runs
Receive(cpp, pk, ψ, α). Afterwards, Receive outputs a credential cred with attributes ~A = ψ(⊥, α) or
the failure symbol (e.g., if ψ(⊥, α) =⊥).
In contrast to the usual deﬁnition of anonymous credentials, the issuer does not necessarily know
the exact attributes he is issuing (he does not know the input to the update function ψ). To issue
attributes ~A fully known to the issuer, the update function ψ can be set to ψ(⊥, α) = ~A (i.e. ψ
ignores α and outputs a constant). An example for an update function hiding some attributes from
the issuer is ψ(⊥, α = (a, b)) = (0, a, b, a + b), where the user’s ﬁrst attribute would be 0 (which the
issuer knows), but the user may freely choose a, b. To restrict the user’s choice of α, the update
function ψ(⊥, α) can output ⊥, in which case the issuance should fail (e.g., deﬁne ψ(⊥, α = (a, b)) =⊥
if a + b > 20).
Showing credentials To prove possession of a credential cred with attributes ~A from some
issuer with public key pk, the user and the veriﬁer ﬁrst agree on a predicate φ : An × {0, 1}∗ →
{0, 1}. The user chooses a hidden parameter α such that φ( ~A, α) = 1. Then the user runs
ShowPrv(cpp, pk, φ, α, cred), interacting with the veriﬁer running ShowVrfy(cpp, pk, φ). Afterwards,
ShowVrfy outputs a bit b. If b = 1, the veriﬁer knows that the user possesses a credential, issued by
pk, with attributes ~A s.t. ∃α : φ( ~A, α) = 1.
Formal deﬁnition We now formally deﬁne UACS. First, we need the notion of valid credentials:
the predicate ValidCred(cpp, pk, cred, ~A) deﬁnes whether cred is considered a valid credential with
attributes ~A for issuer pk under UACS public parameters cpp. Intuitively, we want all credentials out-
put by Receive and UpdRcv to be valid with the attributes the user expects. Formally, ValidCred(cpp,
pk, cred, ~A) is recursively deﬁned as follows:
• if ⊥6= cred ∈ [Receive(cpp, pk, ψ, α)], then ValidCred(cpp, pk, cred, ψ(⊥, α)) = 1.
• if ⊥6= cred∗ ∈ [UpdRcv(cpp, pk, ψ, α, cred)], and ValidCred(cpp, pk, cred, ~A) = 1, then it holds
that ValidCred(cpp, pk, cred∗, ψ( ~A, α)) = 1.
In all other cases, ValidCred(. . . ) = 0. ValidCred is not necessarily eﬃciently computable, but serves
a purpose in our deﬁnitions.
Deﬁnition 4 (Updatable anonymous credential system). An updatable anonymous credential system
Πuacs (UACS) consists of the ppt algorithms Setup, IssuerKeyGen, Issue, Receive, Update, UpdRcv,
ShowPrv, and ShowVrfy. Let Φ be a set of supported predicates φ, and let Ψ be a set of supported
update functions ψ (Φ and Ψ may depend on cpp and pk).
A UACS is correct, if whenever ValidCred((cpp, pk, ~A, cred)) = 1:
• if φ ∈ Φ and φ( ~A, α) = 1, then ShowVrfy(cpp, pk, φ) accepts after interacting with algorithm
ShowPrv(cpp, pk, φ, α, cred).
• if ψ ∈ Ψ, α ∈ {0, 1}∗ and ψ( ~A, α) 6=⊥, then after interacting with one another, Update(cpp, pk,
(cid:5)
ψ, sk) outputs 1, and UpdRcv(cpp, pk, ψ, α, cred) does not output ⊥.
8
3.2 Security of UACS
On a high level, a UACS has two security goals: (1) Anonymity: honest users’ privacy should
be protected (even against malicious issuers and veriﬁers), meaning that user actions should be
unlinkable and hide as much data as possible. (2) Soundness: malicious users should not be able to
show or update a credential they have not obtained by the issuer. These are explained next.
3.2.1 Anonymity
Our anonymity deﬁnition follows a simulation approach. This means that we require existence of
simulators that can simulate the user’s role of the show, issue, and update protocols. For this, the
input for the simulators is exactly the information that the issuer/veriﬁer should learn from the
interaction (plus a trapdoor to enable simulation). The issuer/veriﬁer cannot learn the user’s private
information because the protocols can be simulated without it, hence its transcripts eﬀectively do
not contain information about private information. This makes it easy to succinctly express exactly
what the issuer/veriﬁer learns and enables use of the UACS in larger contexts (for example, for our
incentive system, an indistinguishability deﬁnition would not suﬃce).
More speciﬁcally, for an anonymous UACS, there exists an eﬃcient algorithm SSetup(pp) that
outputs cpp (like Setup) and a simulation trapdoor td. Then the following simulators simulate a
user’s protocols: SReceive(td, pk, ψ) simulates receiving a credential (note that this means that the
issuer learns only ψ, but not α). SUpdRcv(td, pk, ψ) simulates having a credential updated (meaning
the issuer only learns ψ, but not α or the old attributes ~A, nor any information about the speciﬁc
credential-to-be-updated). Finally, SShowPrv(td, pk, φ) simulates showing a credential (the veriﬁer
only learns φ, not ~A or α).
In the real world, the issuer will usually learn whether or not a credential issuing or update has
worked, meaning whether or not the user’s protocol side outputs a non-error value 6=⊥ (e.g., because
the user would immediately ask to run failed protocols again). To make sure that the issuer cannot