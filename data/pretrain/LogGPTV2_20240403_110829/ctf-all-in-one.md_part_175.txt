Analyze and Associate Android Malware
paper
What is your take-away message from this
paper
The authors present DroidAnalytics, an Android malware analytic system for
malware collection, signature generation, information retrieval, and malware
association based on similarity score. Furthermore, DroidAnalytics can efficiently
detect zero-day repackaged malware.
What are motivations for this work
An effective analytic system needs to address the following questions:
How to automatically collect and manage a high volume of mobile malware?
How to analyze a zero-day suspicious application, and compare or associate
it with existingmalware families in the database?
How to perform information retrieval so to reveal similar malicious logic with
existing malware, and to quickly identify the new malicious code segment?
What is the proposed solution
1740
8.20 DroidAnalytics: A Signature Based Analytic System to Collect, Extract,
Analyze and Associate Android Malware
The system consists these modules:
Extensible Crawler: systematically build up the mobile applications database
for malware analysis and association.
Dynamic Payload Detector: to deal with malware which dynamically
downloads malicious codes via Internet or attachment files.
scans the package, identifies files using their magic numbers instead of
file extension.
use the forward symbolic execution technique to trigger the download
behavior.
Android App Information (AIS) Parser: it is used to represent .apk information.
Signature Generator: use a three-level signature generation scheme to
identify each application, which is based on the mobile application, classes,
methods. We generate a method's signature using the API call sequence,
and given the signature of a method, create the signature of a class which
composes of different methods, finally, the signature of an application is
composed of all signatures of its classes.
Android API calls table: use the Java reflection to obtain all descriptions
of the API calls.
Disassembling process: takes the Dalvik opcodes of the .dex file and
transforms them to methods and classes.
1741
8.20 DroidAnalytics: A Signature Based Analytic System to Collect, Extract,
Analyze and Associate Android Malware
Generate Lev3 signature: extracts the API call ID sequence as a string in
each method, then hashes this string value to produce the method's
signature.
Generate Lev2 signature: generate the Lev2 signature for each class
based on the Lev3 signature of methods within that class.
Generate Lev1 signature: based on the Lev2 signatures.
1742
8.20 DroidAnalytics: A Signature Based Analytic System to Collect, Extract,
Analyze and Associate Android Malware
What is the work's evaluation of the proposed
solution
We conduct three experiments and show how analysts can study malware,
carry out similarity measurement between applications, as well as perform
class association among 150,368 mobile applications in the database.
analyzing malware repackaging
analyzing malware which uses code obfuscation
analyzing malware with attachement files or dynamic payloads
we have used DroidAnalyt- ics to detect 2,494 malware samples from 102
families, with 342 zero-day malware samples from six different families.
What is your analysis of the identified problem,
idea and evaluation
1743
8.20 DroidAnalytics: A Signature Based Analytic System to Collect, Extract,
Analyze and Associate Android Malware
DroidAnalytics's signature generation is based on the following observation: For
any functional application, it needs to invoke various Android API calls, and
Android API calls sequence within a methods is difficult to modify.
Traditional Hash vs Three-level Signature:
Traditional hash
Hackers can easily mutate a malware
Not flexible for analysis
Three-level signature
App, classes and methods
Defend against obfuscation
Facilitate analysis
Zero-day malware
What are the contributions
The authors present the design and implementation of DroidAnalytics:
DroidAnalytics automates the processes of malware collection, analysis and
management.
DroidAnalytics uses a multi-level signature algorithm to extract the malware
feature based on their semantic meaning at the opcode level.
DroidAnalytics associates malware and generates signatures at the
app/class/method level.
Show how to use DroidAnalytics to detect zero-day repackaged malware.
What are future directions for this research
What questions are you left with
1744
8.21 Micro-Virtualization Memory Tracing to Detect and Prevent Spraying Attacks
8.21 Micro-Virtualization Memory Tracing
to Detect and Prevent Spraying Attacks
paper
简介
1745
8.22 Practical Memory Checking With Dr. Memory
8.22 Practical Memory Checking With Dr.
Memory
paper
简介
1746
8.23 Evaluating the Effectiveness of Current Anti-ROP Defenses
8.23 Evaluating the Effectiveness of
Current Anti-ROP Defenses
paper
简介
1747
8.24 How to Make ASLR Win the Clone Wars: Runtime Re-Randomization
8.24 How to Make ASLR Win the Clone
Wars: Runtime Re-Randomization
paper
简介
1748
8.25 (State of) The Art of War: Offensive Techniques in Binary Analysis
8.25 (State of) The Art of War: Offensive
Techniques in Binary Analysis
paper slides video source
简介
这篇文章提出了一个二进制分析框架，并实现了许多现有的分析技术。通过将这些
技术系统化地实现，可以让其他研究人员直接利用并开发新的技术。此外，在统一
框架中实现这些技术可以更直接地进行比较，并确定各自的优缺点。
自动化二进制分析
为了保持程序分析的可行性，往往需要在可重现性和语义理解两个方面需要进行权
衡：
可重现性：由于分析系统做出的权衡，特定的分析所发现的漏洞可能无法重
现。这可能是分析操作的覆盖范围导致的，一些分析从头执行整个应用程序，
因此可以推断出触发漏洞的原因，而其他一些分析只是分析了程序的某个部
分，这样做可以在特定模块中发现漏洞，但无法完整地推断出触发漏洞的原
因，于是无法重现。
语义理解：一些分析缺乏对程序语义的理解。例如，动态分析能够追踪程序执
行的代码，但不能理解为什么这些代码被执行或者程序输入的哪些部分导致了
这样的执行。
为了得到可重现的输入或者语义理解的能力，就需要对分析技术进行权衡。例如，
高可重现性往往和低覆盖率相关，因为要想生成可重现的输入必须知道如何到达任
何想要分析的代码，那么它将不能分析尽可能多的代码。另一方面，如果不能通过
重现来验证漏洞，那么会产生高误报率（即并不存在漏洞）。在缺乏可重现性的情
况下，这些误报必须通过启发式的方法进行过滤，反过来又会引入高漏报率。同样
的，为了实现语义理解，必须存储和处理大量的数据。例如，具有语义理解能力的
动态分析必须保存下程序分支的条件，而具有语义理解能力的静态分析需要适时地
调整数据域。但由于系统资源有限，在分析中必须做出取舍。
下面是一个例子，可以对不同分析技术的能力有个简单的认识：
1749
8.25 (State of) The Art of War: Offensive Techniques in Binary Analysis
对于静态分析，它可能会将全部 3 个 memcpy 调用都标记为漏洞（即使 16 行的调
用其实是安全的），因为静态分析没有足够的信息来确定漏洞是否真的会发生。另
外，静态分析可以得到漏洞的地点，但不能得到触发漏洞的输入。对于动态分析
（例如 fuzzing），它通过制造输入来触发漏洞，所以通常有很大可能会漏掉需要
精确输入的漏洞，例如第 10 行的漏洞。动态符号执行能够检测出第 10 行的错误并
通过约束求解得到输入，也能判断出第 16 行没有漏洞，但是它很可能会漏掉第 30
行，因为有多个潜在的路径不会触发该漏洞。另外，在符号执行进行到循环时，可
能存在路径爆炸的问题。
静态漏洞挖掘
1750
8.25 (State of) The Art of War: Offensive Techniques in Binary Analysis
Static analyses can be split into two paradigms: those that model program
properties as graphs and those that model the data itself.
控制流图恢复
CFG recovery is implemented as a recursive algorithm that disassembles and
analyzes a basic block, identifies its possible exits and adds them to the CFG, and
then repeats the analysis recursively until no new exits are identified.
CFG recovery has one fundamental challenge: indirect jumps. Specifically, indirect
jumps fall into several categories:
Computed. The target of a computed jump is determined by the application
by carrying out a calculation specified by the code. This calculation could
further rely on values in other registers or in memory. A common example of
this is a jump table.
Context-sensitive. An indirect jump might depend on the context of an
application. The common example is qsort() in the standard C library.
Object-sensitive. A special case of context sensitivity is object sensitivity. In
object-oriented languages, object polymorphism requires the use of virtual
functions, often implemented as virtual tables of function pointers that are
consulted, at runtime, to determine jump targets.
The goal of CFG recovery is to resolve the targets of as many of these indirect
jumps as possible, in order to create a CFG. Depending on how well jump targets
are resolved, the CFG recovery analysis has two properties:
Soundness. A CFG recovery technique is sound if the set of all potential
control flow transfers is represented in the graph generated.
Completeness. A complete CFG recovery builds a CFG in which all edges
represent actually possible control flow transfers.
值集分析
At a high level, VSA attempts to identify a tight over-approximation of the program
state at any given point in the program. This can be used to understand the
possible targets of indirect jumps or the possible targets of memory write
operations.
1751
8.25 (State of) The Art of War: Offensive Techniques in Binary Analysis
动态漏洞挖掘
Dynamic techniques here are split into two main categories: concrete and
symbolic execution.
动态具体执行
The most relevant application of dynamic concrete execution to vulnerability
discovery is fuzzing.
Coverage-based fuzzing. Such fuzzers attempt to produce inputs that
maximize the amount of code executed in the target application based on the
insight that the more code is executed, the higher the chance of executing
vulnerable code.
Coverage-based fuzzing suffers from a lack of semantic insight into the
target application.
Taint-based fuzzing. Such fuzzers analyze how an application processes
input to understand what parts of the input to modify in future runs.
While a taint-based fuzzer can understand what parts of the input should
be mutated to drive execution down a given path in the program, it is still
unaware of how to mutate this input.
动态符号执行
Dynamic symbolic execution executes a program in an emulated environment with
an abstract domain of symbolic variables. They track the state of registers and
memory throughout program execution and the constraints on those variables.
Whenever a conditional branch is reached, execution forks and follows both
paths, saving the branch condition as a constraint on the path in which the branch
was taken and the inverse of the branch condition as a constraint on the path in
which the branch was not taken.
Classical dynamic symbolic execution. These engines analyze an application
by performing path exploration until a vulnerable state is identified.
Symbolic-assisted fuzzing. Such fuzzers modify inputs identified by the
fuzzing component by processing them in a dynamic symbolic execution
engine. Dynamic symbolic execution uses a more in-depth understanding of
1752
8.25 (State of) The Art of War: Offensive Techniques in Binary Analysis
the analyzed program to properly mutate inputs, providing additional test
cases that trigger previously-unexplored code and allow the fuzzing
component to continue making progress.
Under-constrained symbolic execution. These engines execute only parts of
an application in order to increase the tractability of dynamic symbolic
execution.
angr 分析引擎
设计目标
Cross-architecture support
Cross-platform support
Support for different analysis paradigms
Usability
子模块：Intermediate Representation
We leveraged libVEX , the IR lifter of the Valgrind project. libVEX produces an
IR, called VEX, that is specifically designed for program analysis. We used PyVEX
to expose the VEX IR to Python.
子模块：Binary Loading
The task of loading an application binary into the analysis system is handled by a
module called CLE . CLE abstracts over different binary formats to handle
loading a given binary and any libraries that it depends on, resolving dynamic
symbols, performing relocations, and properly initializing the program state.
子模块：Program State Representation/Modification
The SimuVEX module is responsible for representing the program state. The
state, named SimState in SimuVEX terms, is implemented as a collection of state
plugins, which are controlled by state options specified by the user or analysis
when the state is created.
1753
8.25 (State of) The Art of War: Offensive Techniques in Binary Analysis
Registers. SimuVEX tracks the values of registers at any given point in the
program as a state plugin of the corresponding program state.
Symbolic memory. To enable symbolic execution, SimuVEX provides a
symbolic memory model as a state plugin.
Abstract memory. The abstract memory state plugin is used by static
analyses to model memory. Unlike symbolic memory, which implements a
continuous indexed memory model, the abstract memory provides a region-
based memory model.
POSIX. When analyzing binaries for POSIX-compliant environments,
SimuVEX tracks the system state in this state plugins.
Log. SimuVEX tracks a log of everything that is done to the state in this
plugin.
Inspection. SimuVEX provides a powerful debugging interface, allowing
breakpoints to be set on complex conditions, including taint, exact expression
makeup, and symbolic conditions. This interface can also be used to change
the behavior of SimuVEX.
Solver. The Solver is a plugin that exposes an interface to different data
domains, through the data model provider.
Architecture. The architecture plugin provides architecturespecific information
that is useful to the analysis. The information in this plugin is sourced from the
archinfo module, that is also distributed as part of angr.
子模块：Data Model
Claripy abstracts all values to an internal representation of an expression that
tracks all operations in which it is used. These expressions are represented as
“expression trees” with values being the leaf nodes and operations being non-leaf
nodes.
At any point, an expression can be translated into data domains provided by
Claripy’s backends. User-facing operations, such as interpreting the constructs
provided by the backends into Python primitives are provided by frontends. A
frontend augments a backend with additional functionality of varying complexity.
FullFrontend. This frontend exposes symbolic solving to the user, tracking
constraints, using the Z3 backend to solve them, and caching the results.
CompositeFrontend. Splitting constraints into independent sets reduces the
1754
8.25 (State of) The Art of War: Offensive Techniques in Binary Analysis
load on the solver. The CompositeFrontend provides a transparent interface
to this functionality.
LightFrontend. This frontend does not support constraint tracking, and simply
uses the VSA backend to interpret expressions in the VSA domain.