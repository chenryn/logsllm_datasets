)
((
( ((( 
)()()
Alibaba Security
1 
• Xiaolong Bai
• Alibaba Security Engineer
• Ph.D. graduated from Tsinghua University
• Published papers on the top 4: S&P, Usenix Security, CCS, NDSS
• Twitter, Weibo, Github: bxl1989
• Min (Spark) Zheng
• Alibaba Security Expert
• Ph.D. graduated from The CUHK
• Twitter@SparkZheng Weibo@spark
Alibaba Security
Self Introduction
Agenda
• Overview
• Drivers in Kernel
• Userland Perspective
• New Vulns in Drivers on macOS
• Two new vulnerabilities
• New exploitation strategies
• Privilege escalation on the latest macOS
• Obstacles when analyzing Apple drivers
• Ryuk: a new tool to analyze Apple drivers
• Design
• Effects
• Implementation
• Benefits
Alibaba Security
Overview
• Every driver is a kernel extension (.kext) sharing the same space 
with the kernel
• System daemon kextd is responsible for loading and unloading 
drivers
• Location of driver binaries:
• On macOS: /System/Library/Extensions
• On iOS: integrated with kernel in kernelcache
Alibaba Security
Drivers in Kernel
• Programmed in C or C++
• Info.plist: configuration file in drivers for their property and usage
Kernel libs used in the driver
Class name to provide service to userspace
Class name of the driver
Alibaba Security
Drivers in Kernel
• Kernel APIs (KPI): APIs can be used by drivers to live in kernel
• /System/Library/Frameworks/Kernel.framework/Resources/SupportedKPI
s-all-archs.txt (on macOS)
• Basic KPI Modules:
• com.apple.kpi.iokit: For programming drivers, Apple provides an open-
source framework called iokit, which includes basic driver classes
• com.apple.kpi.libkern: a restricted c++ runtime lib in the kernel
• excluded features—exceptions, multiple inheritance, templates
• an enhanced runtime typing system: every class has an OSMetaClass object which 
describes the class’s name, size, parent class, etc.
Alibaba Security
Drivers in Kernel
• A sample driver
Header File
Code File
Alibaba Security
Drivers in Kernel
• A sample driver
Header File
Code File
Parent of all drivers
Declare Con/Destructors
Callback methods of IOService
to be overriden by the driver
Auto Gen Con/Destructors
Class name of the driver
Alibaba Security
Drivers in Kernel
• In order to provide service to programs in userspace, drivers need 
to implement userclients
• Userclient: Kernel objects to provide service to programs in 
userspace
• Create in two ways:
Info.plist
Callback Method of Driver
Alibaba Security
Drivers in Kernel
• A sample UserClient
Unique callbacks of UserClient
Alibaba Security
Drivers in Kernel
• IOUserClient provides services through several callback methods:
• externalMethod: Provide methods that can be called in userspace
• clientMemoryForType: Share memory with programs in userspace
• registerNotificationPort: When userspace register to receive notification
• clientClose: When userspace program close connection with the 
userclient
• clientDied: When program in userspace connected to the userclient is 
dead
• getTargetAndMethodForIndex: Similar to externalMethod, but old fashion
• getAsyncTargetAndMethodForIndex: Similar to above, but async
• getTargetAndTrapForIndex: Similar to externalMethod, but seldom used
Alibaba Security
Drivers in Kernel
• externalMethod: Callback to provide methods to userspace
program
• IOReturn IOUserClient::externalMethod(uint32_t selector, 
IOExternalMethodArguments *arguments, 
IOExternalMethodDispatch *dispatch, 
OSObject *target, void *reference);
• selector: to select method in userclient
• arguments: arguments passed to the selected method
• dispatch: a struct representing the method to be called
• target: the target userclient for the method to be called on
• reference: reference to send results back to userspace program
Alibaba Security
Userland Perspective
• Apple provides IOKit.framework for programs in user space to 
interact with kernel drivers
• Though public, explicit invocation in iOS will be rejected by App Store
• Important APIs in IOKit.framework:
• IOServiceGetMatchingService, IOServiceGetMatchingServices
• IOServiceOpen, IOServiceClose
• IOConnectCall…Method, IOConnectCallAsync…Method
• IORegistryEntryCreateCFProperty, IORegistryEntrySetCFProperty
• IOConnectMapMemory, IOConnectUnmapMemory
• IOConnectSetNotificationPort
Alibaba Security
Userland Perspective
• The calling sequence to interact with a driver
IOServiceGetMatchingService à Get the service of the the target driver
IORegistryEntryCreateCFProperty à Get the driver’s property
IORegistryEntrySetCFProperty à Set the driver’s property
IOServiceOpen à Connect to the target driver 
IOConnectCall…Method à Call the driver’s method through the connection
IOConnectCallAsync…Method à Call method, asynchronously
IOConnectMapMemory à Get a memory mapped by the driver
IOConnectSetNotificationPort à Prepare to receive notification from driver
IOServiceClose à Close the connection
Alibaba Security
Userland Perspective
• Sample code of using service of IOKit driver
Get the service of IOFireWireLocalNode
Set property hello’s value as hello
Connect to the target service, open IOFireWireUserClient
Call the driver’s method, through the connection
Close connection with the target driver
Alibaba Security
Userland Perspective
• APIs in IOKit.framework are wrappers of Mach Traps (kinda syscall) , 
which are generated by Mach Interface Generator (MIG) and 
eventually call into callback methods implemented by userclients
API
Mach trap
MIG generated
implementation
Real Implementation
of Mach trap in kernel
Callback methods
of userclients
IOConnectCallMethod
io_connect_method
_Xio_connect_method
is_io_connect_method
IOUserClient::externalMethod
Userspace
Kernel
Alibaba Security
Userland Perspective
• Despite of strict sandbox restriction, some userclients in IOKit
drivers can still be accessed by sandboxed apps on iOS. 
• Through experiments, we confirm these available userclients and 
their correponding IOKit device driver names on iOS 11
• IOHIDLibUserClient: AppleSPUHIDDevice, AppleCSHTDCodecMikey
• IOMobileFramebufferUserClient: AppleCLCD
• IOSurfaceAcceleratorClient: AppleM2ScalerCSCDriver
• AppleJPEGDriverUserClient: AppleJPEGDrive
• IOAccelDevice2, IOAccelSharedUserClient2, IOAccelCommandQueue2: 
AGXAccelerator
• AppleKeyStoreUserClient: AppleKeyStore
• IOSurfaceSendRight, IOSurfaceRootUserClient: IOSurfaceRoot
Alibaba Security
New Vulns in Drivers on macOS – Current Secure Status
• Though within kernel, drivers are always blamed for poor quality, 
which make them frequently be used to exploit the kernel
• Vulns in drivers used in JailBreaks:
• 11 (v0rtex | electra): IOSurfaceRoot (CVE-2017-13861)
• 9 (pangu): IOMobileFrameBuffer (CVE-2016-4654)
• 8 (TaiG): IOHIDFamily (CVE-2015-5774)
• 7 (pangu): AppleKeyStore (CVE-2014-4407)
• With the help of Ryuk, we found and confirmed some new vulns on 
macOS
Alibaba Security
New Vulns in Drivers on macOS – New Vuln 1
• Information Leakage due to uninitialized stack variable in 
IOFirewireFamily driver (CVE-2017-7119) – To defeat kaslr
Alibaba Security
New Vulns in Drivers on macOS – New Vuln 1
• Information Leakage due to uninitialized stack variable in 
IOFirewireFamily driver (CVE-2017-7119) – To defeat kaslr
Alibaba Security
New Vulns in Drivers on macOS – New Vuln 1
• Information Leakage due to uninitialized stack variable in 
IOFirewireFamily driver (CVE-2017-7119) – To defeat kaslr
Alibaba Security
New Vulns in Drivers on macOS – New Vuln 1
• Information Leakage due to uninitialized stack variable in 
IOFirewireFamily driver (CVE-2017-7119) – To defeat kaslr
Kernel slide = 0x4ebc0b6-0x8bc0b6 = 0x4600000
Though outChannelHandle is only 32bit, but enough since
the high 32bit is always 0xffffff80 here
Alibaba Security
• CVE-2018-4135: UAF in 
IOFirewireFamily driver –
To control PC
• There is no locking or 
serialization when 
releasing and using a 
member variable
• fMem is a member of class 
IOFWUserReadCommand
New Vulns in Drivers on macOS – New Vuln 2
Alibaba Security
• CVE-2018-4135: UAF in 
IOFirewireFamily driver –
To control PC
• Exploit: race two threads 
to call this function on the 
same userclient
New Vulns in Drivers on macOS – New Vuln 2
Alibaba Security
• CVE-2018-4135: UAF in 
IOFirewireFamily driver –
To control PC
• Exploit: race two threads 
to call this function on the 
same userclient
New Vulns in Drivers on macOS – New Vuln 2
Alibaba Security
New Vulns in Drivers on macOS – New EXP strategies: Heap Spray
• A new heap spray strategy utilizing OSUnserializeXML on macOS
• io_registry_entry_set_properties: set properties of device, eventually call 
is_io_registry_entry_set_properties in kernel
• Some drivers keep any properties set by userspace, e.g., IOHIDEventService
• Pros: the sprayed data can be read; the head of sprayed data is controllable
Alibaba Security
New Vulns in Drivers on macOS – New EXP strategies: ROP
• After controlling PC, we can gain privilege through ROP chain
• ROP chain (most employed from tpwn)
Stack Pivot
_current_proc
_proc_ucred
_posix_cred_get
_bzero
_thread_exception_return
Get ptr to 
struct proc of 
current process
Get ucred from 
struct proc, i.e., 
process 
owner's 
identity
Get ptr to struct
cr_posix
Exit kernel, return to 
userspace
Alibaba Security
New Vulns in Drivers on macOS – New EXP strategies: ROP
• After controlling PC, we can gain privilege through ROP chain
• Key step: Stack Pivot
In tpwn (on 10.10)
In rootsh (on 10.11)
New
Alibaba Security
New Vulns in Drivers on macOS – New EXP strategies: ROP
• After controlling PC, we can gain privilege through ROP chain
• Key step: Stack Pivot
New
Alibaba Security
Addr of Gadget P2
New Stack: RAX+0x50
RAX
Addr of Gadget “NOP; RET;”
_current_proc, MOV RDI, RAX
RAX (Controlled or Known)
RAX+0x30
Gadget
P1
Gadget
P2
_proc_ucred, MOV RDI, RAX
_posix_cred_get, MOV RDI, RAX
_bzero
_thread_exception_return
RAX+0x40: New Stack Start
RAX+0x38
RAX+0x8
New Vulns in Drivers on macOS – Whole EXP Process
Alibaba Security
high space of heap 
possessed by heap spray
Heap Spray
Trigger Vuln