# Alibaba Security Team

## Team Members
- **Xiaolong Bai**
  - **Role**: Security Engineer at Alibaba
  - **Education**: Ph.D. from Tsinghua University
  - **Publications**: Top-tier security conferences (S&P, Usenix Security, CCS, NDSS)
  - **Social Media**: Twitter, Weibo, Github: bxl1989

- **Min (Spark) Zheng**
  - **Role**: Security Expert at Alibaba
  - **Education**: Ph.D. from The Chinese University of Hong Kong (CUHK)
  - **Social Media**: Twitter: @SparkZheng, Weibo: @spark

## Agenda
1. Overview
2. Drivers in Kernel
3. Userland Perspective
4. New Vulnerabilities in macOS Drivers
5. Obstacles in Analyzing Apple Drivers
6. Ryuk: A Tool for Analyzing Apple Drivers
   - Design
   - Effects
   - Implementation
   - Benefits

## Overview
- **Driver Structure**: Each driver is a kernel extension (.kext) that shares the same memory space as the kernel.
- **System Daemon**: `kextd` is responsible for loading and unloading drivers.
- **Driver Locations**:
  - macOS: `/System/Library/Extensions`
  - iOS: Integrated with the kernel in `kernelcache`

## Drivers in Kernel
- **Programming Languages**: C or C++
- **Configuration File**: `Info.plist` contains properties and usage details.
- **Kernel Libraries**:
  - `com.apple.kpi.iokit`: For driver programming, using the iokit framework.
  - `com.apple.kpi.libkern`: A restricted C++ runtime library in the kernel, excluding features like exceptions, multiple inheritance, and templates.

### Sample Driver
- **Header File**:
  - Parent of all drivers
  - Declare constructors and destructors
  - Callback methods of `IOService` to be overridden by the driver
- **Code File**:
  - Auto-generated constructors and destructors
  - Class name of the driver

### UserClients
- **Purpose**: Provide services to user-space programs.
- **Creation Methods**:
  - Via `Info.plist`
  - Through callback methods in the driver

### Sample UserClient
- **Unique Callbacks**:
  - `externalMethod`: Provides methods callable from user space.
  - `clientMemoryForType`: Shares memory with user-space programs.
  - `registerNotificationPort`: Registers for notifications.
  - `clientClose`: Closes the connection.
  - `clientDied`: Handles the death of a connected user-space program.
  - `getTargetAndMethodForIndex`: Similar to `externalMethod`.
  - `getAsyncTargetAndMethodForIndex`: Asynchronous version.
  - `getTargetAndTrapForIndex`: Seldom used, similar to `externalMethod`.

### UserClient Method Example
- **Method**: `externalMethod`
- **Signature**:
  ```c
  IOReturn IOUserClient::externalMethod(uint32_t selector, 
                                         IOExternalMethodArguments *arguments, 
                                         IOExternalMethodDispatch *dispatch, 
                                         OSObject *target, void *reference);
  ```
- **Parameters**:
  - `selector`: Selects the method in the user client.
  - `arguments`: Arguments passed to the selected method.
  - `dispatch`: Struct representing the method to be called.
  - `target`: Target user client for the method.
  - `reference`: Reference to send results back to the user-space program.

## Userland Perspective
- **IOKit Framework**: Provided by Apple for user-space programs to interact with kernel drivers.
- **Important APIs**:
  - `IOServiceGetMatchingService`, `IOServiceGetMatchingServices`
  - `IOServiceOpen`, `IOServiceClose`
  - `IOConnectCall…Method`, `IOConnectCallAsync…Method`
  - `IORegistryEntryCreateCFProperty`, `IORegistryEntrySetCFProperty`
  - `IOConnectMapMemory`, `IOConnectUnmapMemory`
  - `IOConnectSetNotificationPort`

### Calling Sequence
1. `IOServiceGetMatchingService`: Get the service of the target driver.
2. `IORegistryEntryCreateCFProperty`: Get the driver’s property.
3. `IORegistryEntrySetCFProperty`: Set the driver’s property.
4. `IOServiceOpen`: Connect to the target driver.
5. `IOConnectCall…Method`: Call the driver’s method through the connection.
6. `IOConnectCallAsync…Method`: Call the method asynchronously.
7. `IOConnectMapMemory`: Get a memory mapped by the driver.
8. `IOConnectSetNotificationPort`: Prepare to receive notifications from the driver.
9. `IOServiceClose`: Close the connection.

### Sample Code
- **Get Service**: `IOFireWireLocalNode`
- **Set Property**: `hello` value to `hello`
- **Connect**: Open `IOFireWireUserClient`
- **Call Method**: Through the connection
- **Close Connection**: With the target driver

### Mach Traps
- **APIs in IOKit.framework**: Wrappers for Mach Traps (similar to syscalls).
- **Mach Interface Generator (MIG)**: Generates implementation for Mach Traps, which eventually call into callback methods implemented by user clients.

### Accessible UserClients on iOS
- Despite strict sandbox restrictions, some user clients can still be accessed by sandboxed apps on iOS 11:
  - `IOHIDLibUserClient`: `AppleSPUHIDDevice`, `AppleCSHTDCodecMikey`
  - `IOMobileFramebufferUserClient`: `AppleCLCD`
  - `IOSurfaceAcceleratorClient`: `AppleM2ScalerCSCDriver`
  - `AppleJPEGDriverUserClient`: `AppleJPEGDrive`
  - `IOAccelDevice2`, `IOAccelSharedUserClient2`, `IOAccelCommandQueue2`: `AGXAccelerator`
  - `AppleKeyStoreUserClient`: `AppleKeyStore`
  - `IOSurfaceSendRight`, `IOSurfaceRootUserClient`: `IOSurfaceRoot`

## New Vulnerabilities in macOS Drivers
- **Current Secure Status**: Drivers are often blamed for poor quality, leading to frequent exploitation.
- **Known Vulnerabilities**:
  - **Jailbreaks**:
    - `IOSurfaceRoot` (CVE-2017-13861): Used in v0rtex | electra (iOS 11)
    - `IOMobileFrameBuffer` (CVE-2016-4654): Used in pangu (iOS 9)
    - `IOHIDFamily` (CVE-2015-5774): Used in TaiG (iOS 8)
    - `AppleKeyStore` (CVE-2014-4407): Used in pangu (iOS 7)

### New Vulnerability 1
- **CVE-2017-7119**: Information leakage due to an uninitialized stack variable in `IOFirewireFamily` driver.
- **Exploit**: Defeat KASLR by calculating the kernel slide.

### New Vulnerability 2
- **CVE-2018-4135**: Use-after-free (UAF) in `IOFirewireFamily` driver.
- **Exploit**: Race two threads to call the function on the same user client, allowing control of the PC.

### New Exploitation Strategies
- **Heap Spray**:
  - Utilize `OSUnserializeXML` to set properties of devices, eventually calling `is_io_registry_entry_set_properties` in the kernel.
  - Pros: Sprayed data can be read, and the head of the sprayed data is controllable.

- **ROP Chain**:
  - After controlling the PC, gain privileges through a ROP chain.
  - Key steps: Stack pivot, get process credentials, and return to user space.

### Whole Exploitation Process
- **Heap Spray**: High heap space possessed by the spray.
- **Trigger Vulnerability**: Execute the exploit.

This document provides a comprehensive overview of the Alibaba Security team's work on analyzing and exploiting vulnerabilities in macOS drivers.