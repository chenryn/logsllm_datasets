        for (int a1 = 0; a1 > (24 - 8 * i);
        result = i + 1;
      }
      return result;
    }
`sub_40103c` 和`sub_401019` 是大端序的“pack” 和 “unpack”
函数。`sub_401005`是一个函数，他传入已知参数，得到的返回值与`v3[i]`异或得到加密值，写exp时需要用到这个函数，但是由于这个函数内部流程稍微比较复杂，这里我们可以用远线程注入的方法调用此函数，拿到返回值。
    DWORD GetRemoteCallValue(HANDLE hProcess,DWORD v)
    {
        HANDLE hThread = CreateRemoteThread(hProcess, NULL, NULL, (LPTHREAD_START_ROUTINE)0x4011e0, (LPVOID)v, 0, 0);
        WaitForSingleObject(hThread, -1);
        DWORD ret = 0;
        GetExitCodeThread(hThread, &ret);
        CloseHandle(hThread);
        return ret;
    }
所以最终的exp如下
    #include 
    #include 
    void __cdecl sub_401790(char* a1, char* a2)
    {
        DWORD v2[56]; // [esp+4Ch] [ebp-FCh] BYREF
        int v3; // [esp+12Ch] [ebp-1Ch]
        int v4; // [esp+130h] [ebp-18h]
        int v5; // [esp+134h] [ebp-14h]
        int j; // [esp+138h] [ebp-10h]
        int v7; // [esp+13Ch] [ebp-Ch]
        int v8; // [esp+140h] [ebp-8h]
        int i; // [esp+144h] [ebp-4h]
        for (i = 0; i = 0; --j)
            {
                v2[7 * i + 28 + j] = v8 % 2;
                v8 /= 2;
                v2[7 * i + j] = v2[7 * i + 28 + j];
            }
        }
        v5 = 0;
        v4 = 0;
        for (i = 0; i < 4; ++i)
        {
            for (j = 0; j < 7; ++j)
            {
                v3 = v2[7 * v5 + v4];
                v2[7 * i + 28 + j] = v3;
                v5 = (v5 + 1) % 4;
                v4 = (v4 + 2) % 7;
            }
        }
        for (i = 0; i < 4; ++i)
        {
            v7 = 0;
            for (j = 0; j < 6; ++j)
            {
                v7 = 2 * (v7 + v2[7 * i + 28 + j]);
                if (v2[7 * i + 29 + j] == 1 && j == 5)
                    ++v7;
            }
            *(BYTE*)(i + a2) = v7;
        }
    }
    void baopo()
    {
        char table[] = { "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
                "abcdefghijklmnopqrstuvwxyz"
                "0123456789+/_-" };
        char key[5] = { "" };
        for (int a1 = 0; a1 < strlen(table); a1++)
            for (int a2 = 0; a2 < strlen(table); a2++)
                for (int a3 = 0; a3 < strlen(table); a3++)
                    for (int a4 = 0; a4 < strlen(table); a4++) {
                        key[0] = table[a1];
                        key[1] = table[a2];
                        key[2] = table[a3];
                        key[3] = table[a4];
                        char test[5] = { 0 };
                        lstrcpynA(test, key, 5);
                        char result[20] = { 0 };
                        for (int i = 0; i < 4; i++) {
                            sub_401790(key, result);
                            lstrcpynA(key, result, 5);
                        }
                        if (!strcmp(key, "Lroo")) {
                            printf("%s", test);
                            system("pause");
                        }
                    }
    }
    unsigned char Enc[] = { 0x5C, 0x89, 0xEE, 0xF5, 0x6F, 0xC5, 0x44, 0x92, 0xDB, 0xE3,
           0xAE, 0x9C, 0xB5, 0x4F, 0x4A, 0xF4, 0xE7, 0xA3, 0x5E, 0x0F,
           0xFC, 0x93, 0xFC, 0x76, 0x6C, 0xFB, 0x29, 0xE0, 0x16, 0x2F,
           0xA5, 0x67
    };
    unsigned long key[] = {
            0xCBD6C588, 0x03F17D27, 0x1C18E9CC, 0xFE024DB3, 0xD71737EB, 0x7B9B1EAB, 0x2776BBA4, 0xBD2018C0,
            0x356D0553, 0x0C825513, 0xCAAFF094, 0x9DFBCBA1, 0x7EB6B878, 0x47630F35, 0x4B494BBE, 0x34FD620A,
            0x14CF85EF, 0xD754E93A, 0x338B4918, 0xC0846091, 0xD526F236, 0xB9CE1FC7, 0xCB537B6A, 0x25FDD8EA,
            0x7221094B, 0xA1F73ABF, 0x2473D8CC, 0x8FA4F2F2, 0x1E7CAC59, 0xEC581806, 0x425D33C3, 0xBEB16ED4,
            0xE5C0CA70, 0x02B60624, 0x3011744F, 0xF73A6E51
    };
    DWORD pack(const char * a)
    {
        int r = 0;
        for(int i = 0;i<4;i++){
            r <<= 8;
            r |= (BYTE)a[i];
        }
        return r;
    }
    // char* unpack()
    // {
    // }
    DWORD GetRemoteCallValue(HANDLE hProcess,DWORD v)
    {
        HANDLE hThread = CreateRemoteThread(hProcess, NULL, NULL, (LPTHREAD_START_ROUTINE)0x4011e0, (LPVOID)v, 0, 0);
        WaitForSingleObject(hThread, -1);
        DWORD ret = 0;
        GetExitCodeThread(hThread, &ret);
        CloseHandle(hThread);
        return ret;
    }
    int main(void)
    {
        for(int x = 0;x<2;x++){
            unsigned v1 = pack((const char*)Enc + 12 + 16 *x);
            unsigned v2 = pack((const char*)Enc + 8 + 16*x);
            unsigned v3 = pack((const char*)Enc + 4 + 16 *x);
            unsigned v4 = pack((const char*)Enc + 16 *x);
            unsigned Temp[36] = { 0 };