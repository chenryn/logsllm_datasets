title:Correlation of Intrusion Symptoms: An Application of Chronicles
author:Benjamin Morin and
Herv&apos;e Debar
Correlation of Intrusion Symptoms:
An Application of Chronicles
Benjamin Morin and Herv´e Debar
{benjamin.morin,herve.debar}@rd.francetelecom.com
France T´el´ecom R&D, Caen, France
Abstract. In this paper, we propose a multi-alarm misuse correlation
component based on the chronicles formalism. Chronicles provide a high
level declarative language and a recognition system that is used in other
areas where dynamic systems are monitored. This formalism allows us
to reduce the number of alarms shipped to the operator and enhances
the quality of the diagnosis provided.
1 Introduction
The diagnosis provided by current intrusion detection systems is spread over
numerous ﬁne-grained alarms. As a result, the overall number of alarms is over-
whelming. Moreover, their content is so poor that it requires the operator to go
back to the original data source to assess the actual severity of the alarms.
Being able to express phenomena involving several alarms1 is essential in
diagnosis applications because using several observations i) strengthens the di-
agnosis, ii) reduces the overall number of alarms and iii) improves the content
of the alarms. Strengthening the diagnosis enables to invalidate or conﬁrm the
alarms, which is very important in intrusion detection where false positives are
prominent. The number of alarms is reduced because alarms (symptoms) are
presented to the operator as labeled groups instead of being presented individ-
ually. The content is enhanced because the information of the symptoms are
combined. Our approach implies a multi-event correlation component using as
input IDS alerts.
The correlation component we propose is a misuse based. The deﬁnition of
misuse correlation is similar to misuse intrusion detection: known malicious or
undesired sequences of events are searched in the data stream. In our approach,
the alarms are checked against a set of multi-events patterns (or signatures)
expressed in a dedicated language. Several approaches have been proposed in
the research ﬁeld to provide signatures languages involving many events. In [2],
Eckmann et al classify languages in six categories: event languages, response
languages, reporting languages, correlation languages, exploit languages and de-
tection languages. We are interested here in correlation languages. Correlation
1 or events – in the remainder of this paper, we will either speak of events and alarms
because alarms triggered by IDSes are input events of the correlation system
G. Vigna, E. Jonsson, and C. Kruegel (Eds.): RAID 2003, LNCS 2820, pp. 94–112, 2003.
c(cid:1) Springer-Verlag Berlin Heidelberg 2003
Correlation of Intrusion Symptoms: An Application of Chronicles
95
languages rely on alarms provided by IDSes to recognize ongoing attack sce-
narios. Examples of existing correlation languages are Statl [2], P-Best [4] and
Lambda [24].
We propose to use the chronicle formalism proposed by Dousson [11] to corre-
late alarms. Chronicles are used in many distinct areas [14]. They were primarily
designed to analyze sequences of alarms issued by equipments in a telecommu-
nication network and a voltage distribution network. They are now also used in
some subtasks of a project aimed at representing car ﬂows in road traﬃc. In the
medical domain, they are being looked at for hepatitis symptoms tracking, in-
telligent patient monitoring or cardiac arrhythmia detection. We propose to use
chronicles to correlate alarms issued by intrusion detection analyzers. Our corre-
lation component uses Dousson’s chronicle recognition system (CRS), available
at http://crs.elibel.tm.fr.
In this paper, we ﬁrst introduce the chronicles formalism. We then show how
chronicles are applied to intrusion detection and illustrate how it solves some
intrusion detection issues. We also describe in what extent chronicles integrate
with an existing alarm correlation infrastructure. Before concluding and evoking
future works, we compare our research with related work.
2 Chronicles
Chronicles provide a framework for modeling dynamic systems. They include
an evolution monitoring mechanism to track changes in the modeled system.
Recognition of chronicles is based on a formalism in which time is fundamental.
This is in contrast with classical expert systems, which base their reasoning on
rules, relegating time information to the background.
Chronicles are temporal patterns that represent possible evolutions of the ob-
served system. A chronicle is a set of events, linked together by time constraints,
whose occurrence may depend on the context. The available time information
allows ordering and the speciﬁcation of time spans between two occurrences of
events. In the AI literature, chronicles are related to other approaches such as
plan recognition and event calculus (see [12]).
In the remainder of this section, we present the essential features of the
chronicles, and brieﬂy sketch the recognition process. Detailed description can
be found in [11, 13].
2.1 Representation
In the AI literature, a natural approach to the representation of temporal in-
formation consists in associating assertions with particular times. Chronicles
representation relies on the reiﬁed temporal logic formalism [5, 7, 16]. In this for-
malism, propositional terms are related to times or other propositional terms
through additional truth predicates, like hold. For example, in a reiﬁed logic,
one may use hold (is(light, on), T ) to represent the assertion “light is on over
time T ”.
96
B. Morin and H. Debar
Time Representation For algorithm complexity reasons, time representation re-
lies on the time points algebra and time is considered as a linearly ordered
discrete set of instants whose resolution is suﬃcient for the environment dynam-
ics.
It should be noticed that in the chronicle formalism, if several identical events
occur at the same time point, only one is taken into account. As a consequence,
the time resolution is very important because in domains like intrusion detection,
many identical events may occur within a small time window.
A time interval I is expressed as pair I = (t1, t2) corresponding to the lower
and upper bound on the temporal distance between two time points t1 and t2.
Domain Attributes In the reiﬁed logic formalism, the environment is described
through domain attributes. Domain attributes are the atemporal propositions
of the modeled environment.
A domain attribute is a couple P (a1, . . . , an) : v, where P is the attribute
name, a1, . . . , an its arguments and v its value. For example, Load(host) can be
a measure of a server load, and the possible values {low,medium,high}. Special
attributes, called messages, are attributes without any associated value.
Reifying Predicates Reifying predicates are used to temporally qualify the set of
domain attributes. Their syntax and informal semantics are sketched in Figure 1.
The predicates used in chronicles are hold, event, noevent and occurs.
hold(P : v, (t1, t2))
event(P : (v1, v2), t)
event(P, t)
noevent(P, (t1, t2))
occurs((n1, n2), P, (t1, t2))
(0 (cid:1) n1 (cid:1) n2)
The domain attribute P must keep the value v over the
interval [t1, t2[.
The attribute P changed its value from v1 to v2 at t.
Message P occurs at t.
The chronicle would not be recognized if any change of
the value of the domain attribute P occurs between t1
and t2.
the event that matches the pattern P occurred exactly
N times between the two time points t1 and t2, and
n1 (cid:1) N (cid:1) n2. The value ∞ can be used for n2.
noevent(P, (t1, t2)) ≡ occurs((0, 0), P, (t1, t2))
event(P, t1) ≡ occurs((1, ∞), P, (t1, t1 + 1))
(cid:1)
occurs is unifying because
Fig. 1. Reifying Predicates
– The hold predicate models chronicle assertions (assertions for short). Asser-
tions represent persistence of the value of a domain attribute over an interval,
without knowing when this value was reached.
– The event predicate expresses a time stamped instance of a pattern. An
event has no duration. Events denote a change of the value of a domain
attribute.
Correlation of Intrusion Symptoms: An Application of Chronicles
97
– The noevent predicate expresses forbidden events, i.e. events whose occur-
rence leads to the invalidation of a chronicle instance during the recognition
process.
– The occurs is a counting predicate.
Chronicle Model A chronicle model (or chronicle) represents a piece of evolution
of the world. Chronicles are made of i) a set of time points, ii) a set of temporal
constraints between the time points, iii) a set of event patterns which represent
relevant changes of the world for this chronicle, iv) a set of assertions patterns
which represent the context of the occurrences of events, and v) a set of external
actions which will be performed by the system when a chronicle is recognized.
Actions are not limited to report generation: the system can generate events
and assertions. Both of them can later interact with other chronicles instances.
Reinserting previously recognized chronicles in the ﬂow of input events is referred
to as “looping” functionality in the remainder (see section 3.4).
Chronicle models are expressed in the chronicle language. After a compilation
stage during which the consistency of the chronicle constraints is tested, the
chronicles are coded into eﬃcient data structures used for the recognition process
described thereafter.
2.2 Chronicle Recognition
After the chronicle models compilation, the recognition system is initialized by
creating an empty chronicle instance for each chronicle model. A chronicle in-
stance is a chronicle for which a complete match is not found yet. The chronicle
recognition system then processes the stream of input events in one shot and
on-line.
An event whose atemporal state uniﬁes with a pattern of a chronicle is always
considered for integration in a chronicle; the integration solely depends on the
suitability of the chronicle temporal constraints, the previously integrated events
and the event’s timestamp. Events may be shared by many chronicles and the
system is able to manage all the concurrent instances. The recognition process
manages a set of partial instances of chronicles as a set of time windows (one
for each forthcoming event) that is gradually constrained by each new matched
event.
An event occurrence may also lead chronicle instances to be destroyed be-
cause an expected event’s deadline is reached, and so all chronicles waiting for
any event before this deadline are destroyed. Outdated assertions can also be
suppressed after an event occurence.
If an assertion is violated or if a deadline expires, then a chronicle instance
is destroyed.
When integrating an event occurence in a chronicle instance, the system
cannot a priori be sure that the event will integrate well in the chronicle with
regard to the forthcoming events. It is not possible to integrate an event inside
a chronicle without maintaining the hypothesis that it is not necessarily this
chronicle instance that will be recognized. As a result, every chronicle instance
98
B. Morin and H. Debar
1
2
3
4
5
6
7
8
chronicle example1 {
event(e1,t1);
event(e2,t2);
event(e3,t3);
t1<t2<t3
t3-t2 <= 4
}
Fig. 2. A Chronicle Example
(e1,2’)
(e2,5’)
9’
(e2,10’) (e3,13’)
15’
(e1,2’)
(e1,2’)
(e1,2’)
(e1,2’)
(e1,2’)
(e1,2’)
(e1,2’)
(e2,5’)
(e1,2’)
(e2,10’)
(e1,2’)
(e2,10’)
(e3,13’)
Fig. 3. Duplication example
C1
C2
C3
C4
is duplicated before the integration of an event. The systems maintains parallel
hypothesis so that all event sequences satisfying the constraints are recognized.
We illustrate duplication of chronicles with the example in Figure 3. Let us
consider the following chronicle:
event(e1, t1) ∧ event(e2, t2) ∧ event(e3, t3) ∧ (t1 < t2 < t3) ∧ t3 − t2 (cid:1) 4
which is equivalent to the one represented in the chronicle language in Figure 2.
The event stream is made of e1 at 2’, followed by e2 at 5’ followed by another
e2 at 10’ and a e3 at 13’. When e1 arrives, a chronicle instance (C1) of chronicle
model C is created. When e2 arrives, a duplicate of C1 is created (C2), and e2 is
integrated in C2. At 9’, C2 dies because the constraint te3 − te2 (cid:1) 4 is not true
anymore. When the second e2 arrives, a duplicate of C1 (C3) is created. When e3
occurs , a duplicate of C3 (C4) is created and the chronicle is recognized (shaded
box on ﬁgure). At 15’, C3 dies.
This mechanism imposes the chronicle recognition system to be exhaustive,
i.e. all the possible instances of the deﬁned chronicles are identiﬁed by the system.
For example, if we consider the chronicle
event(a, t1) ∧ event(b, t2) ∧ event(c, t3) ∧ t2 < t3
and the event stream2,
then the chronicle is recognized three times: {a1, b1, c1}, {a2, b1, c1}, {a3, b1, c1}.
2 indices are only used to distinguish event instances and we do not provide timestamps
a1, a2, b1, c1, a3
because we do not need them for the example
Correlation of Intrusion Symptoms: An Application of Chronicles
99
Chronicles duplication imposes chronicle models to be written with care.
As a matter of fact, if no chronicle invalidation mechanism is speciﬁed in a
chronicle model, the chronicle instances tree may grow up indeﬁnitely because of
chronicles living forever. Chronicles may be invalidated either with an assertion
violation or a deadline being reached. As a result, in order to prevent chronicle
instances to live forever, assertions (like hold or noevent) and/or quantitative
time constraints (like (t2 − t1) < 2) should be speciﬁed inside chronicle models.
When a complete match is found, a chronicle is recognized, and the associated
action is performed by the system.
3 Using Chronicles to Correlate Intrusion Alarms
The current three major issues in intrusion detection are alarm overload, poor-
ness of the alarms semantics and false negatives. In our approach, we explicitly
address the ﬁrst two. The false negative issue is partly solved by making comple-
mentary sensors cooperate to provide an appropriate coverage of the monitoring
of the environment. Cooperation is a kind of correlation that involves fusion of
redundant alarms and synthesis of complementary alarms, and can be achieved
by chronicles because we are not restricted to using a single input stream. Co-
operation is indeed all the more essential as the multiplication of analyzers also
multiplies the alarms. However, contrary to Cuppens in [24] whose correlation
process infers unobserved alarms from attack scenarios, we solely rely on avail-
able alarms. We do not generate almost recognized 3 chronicles because this would
imply that optional events are used inside chronicles models which could conse-
quently be removed.
In the remainder of this section, we ﬁrst brieﬂy discuss the informal semantics
of the chronicles used in intrusion detection. Then, we give examples to illustrate
how chronicles can be used to enhance the content of the alarm and reduce the
amount of alarms.
The domain attribute used in the following chronicle models is a triplet
alarm(name, src, trg) where name is the attack identiﬁer (e.g “cmd.exe
access”), src is the attack source (e.g an IP address) and trg is the attack
target (e.g an IP address). In fact, the alarm term may denote real attacks
or benign events. Using the chronicle language, the alarm domain attribute is
declared as follows:
message alarm[?name,?src,?trg]
{
}
Constraints on the parameter values can be speciﬁed inside the brackets.
The ? is used to inform the system that attributes are variables that should be
instantiated by the chronicle recognition system when an event occurs.
3 i.e chronicles whose expected event set is not complete
100
B. Morin and H. Debar
3.1 Informal Semantics of the Chronicles Applied
to Intrusion Detection
Chronicles model phenomena which involve more than one event. This deﬁnition
does not presume the semantic of a chronicle. Actually, in the intrusion detection
context, the modeled phenomena may either be normal or malicious. In this
section, we describe these two kinds of chronicles.
Normal Phenomena. False alarms (false positives) are the primary cause of
alarm overload. Although many false positives could be avoided by using more
sophisticated signatures and detection mechanisms, it should be noted that some
attacks can only be characterized by a single event. As a result, legitimate actions
can be confused with attacks.
To solve this, it is possible to discriminate legitimate actions from attacks
instead of discriminating attacks from legitimate actions. In this case, chronicles
represent normal phenomena which involve an alarm as well as other peripheral
and innocuous events which are indicative of normal activity. Paragraph 3.2 il-
lustrates this situation. The recognition of such a chronicle invalidates the alarm;
a chronicle invalidation (i.e a chronicle which is not recognized) means that the
alarm is indicative of a real attack. In the former case, the alarm is not directly
shown to the security operator (it is included in a recognized chronicle); in the
latter case, the alarm is directly provided to the operator.