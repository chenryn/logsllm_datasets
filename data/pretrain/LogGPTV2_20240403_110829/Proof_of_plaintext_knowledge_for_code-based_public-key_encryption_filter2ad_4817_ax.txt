i ∈ Zm,
Encot(pk, eki, xi) + x′
i), with probability 1 over the choice of
(pk, (eki)i∈[n]) ← Setupot(1λ, F m,L
). This property will be used when using the one-time
scheme MIFE ot from Figure 5.1 as a building block to obtain a full-ﬂedged many-AD-
IND MIFE.
i mod L = Encot(pk, eki, xi + x′
n
Our Transformation for Inner Product over ZL
We present our multi-input scheme MIFE for the class F m,L
in Figure 5.3. The construction
relies on the one-time scheme MIFE ot of Figure 5.1, and any single-input, public-key FE for
n
5.1 From Single to Multi-Input FE for Inner Product
105
the functionality F m,L
y ∈ K, x ∈ X , we have:
IP
: K × X → Z, with K := Zm, X := Zm, Z := ZL, such that for any
F m,L
IP (y, x) = hx, yi mod L.
n
i, msk′
):
Setup(1λ, F m,L
i }i∈[n]) ← Setupot(1λ, F m,L
(pkot, mskot,{ekot
(cid:0)ek′
i}i∈[n](cid:1), msk :=(cid:0)mskot,{msk′
pk :=(cid:0)pkot, gpk′,{ek′
Return(cid:0)pk, msk{eki}i∈[n](cid:1)
i(cid:1) ← Setup′(1λ, gpk′, F m,L
)
IP
n
Enc(pk, eki, xi):
wi := Encot(pkot, ekot
Return Enc′(gpk′, ek′
i , xi)
i, wi)
), gpk′ ← GSetup′(1λ, F m,L
i}i∈[n](cid:1), for all i ∈ [n], eki := (ekot
IP
i , ek′
i)
). For all i ∈ [n],
i, yi), z := KeyGenot(pkot, mskot, y1k···kyn)
KeyGen(msk, y1k···kyn):
For all i ∈ [n], dk′
i ← KeyGen′(gpk′, msk′
i}i∈[n], z(cid:1)
dky1k···kyn :=(cid:0){dk′
Return dky1k···kyn
Dec(cid:0)pk, dky1k···kyn, ct1, . . . , ctn):
Parse dky1k···kyn := ({dk′
ReturnPi∈[n] di − z mod L
Figure 5.3: Private-key multi-input FE scheme MIFE := (Setup, Enc, KeyGen, Dec) for the function-
from a public-key single-input FE FE := (Setup′, Enc′, KeyGen′, Dec′) for the functionality
ality F m,L
F m,L
, and the one-time multi-input FE MIFE ot = (Setupot, Encot, KeyGenot, Decot) for the functional-
from Figure 5.1.
ity F m,L
i}i∈[n], z). For all i ∈ [n], di := Dec′(gpk′, dk′
i, cti)
IP
n
n
Correctness of MIFE follows from the correctness properties of the single-input scheme
FE and the multi-input scheme MIFE ot. Indeed, correctness of the former implies that, for
all i ∈ [n], di = hwi, yii mod L, while correctness of MIFE ot implies that Pi∈[n] di − z =
Decot(z, w1, . . . , wn) =Pi∈[n]hxi, yii mod L.
Theorem 13: many-AD-IND security
If FE is many-AD-IND secure, and MIFE ot is one-AD-IND-weak secure, then MIFE
described in Figure 5.3 is many-AD-IND-secure.
Since the proof of the above theorem is almost the same as the one for the case of bounded-
norm inner product, we only provide an overview here, and defer to the proof of Theorem 14
for further details.
Proof overview. First, we use Theorem 2 which prove that many-AD-IND security follows
from many-AD-IND-weak and many-AD-IND-zero of MIFE, using an extra layer of sym-
metric encryption on top of the decryption keys (see Figure 2.1). The many-AD-IND-zero
of MIFE follows directly from the many-AD-IND security of FE for n instances (which is
implied by many-AD-IND security of FE for one instance, see Lemma 5). Thus, it remains to
prove many-AD-IND-weak security of MIFE.
To do so, we ﬁrst switch encryptions of x1,0
n , using the one-
AD-IND security of MIFE ot. For the remaining ciphertexts, we switch from an encryption of
xj,0
i = (xj,0
. In this step we use the fact that one can
n to those of x1,1
to that of (xj,0
1 , . . . , x1,1
1 , . . . , x1,0
) + x1,0
) + x1,1
i
i
i − x1,0
i
i − x1,0
i
106
Chapter 5. Multi-Input Inner-Product Functional Encryption without Pairings
) from an encryption Encot(u, i, x1,0
compute an encryption of Encot(u, i, (xj,0
),
because the encryption algorithm Encot of MIFE ot is linearly homomorphic (see Remark 13).
Finally, we use the many-AD-IND security of FE for n instance (which is implied by many-
AD-IND security of FE for one instance, see Lemma 5) to switch encryptions of
i − x1,0
) + x1,0
i
i
i
(x2,0
i − x1,0
i
) + x1,1
, . . . , (xQi,0
i
i − x1,0
i
) + x1,1
i
to those of
i − x1,1
(x2,1
i
) + x1,1
i
, . . . , (xQi,1
i − x1,1
i
) + x1,1
i
.
Instantiations. The construction in Figure 5.3 can be instantiated using the single-input
public-key FE schemes from [ALS16] that are many-AD-IND-secure and allow for computing
inner products over a ﬁnite ring. Speciﬁcally, we obtain:
• A MIFE for inner product over Zp for a prime p, based on the LWE assumption. This is
obtained using the LWE-based scheme of Agrawal et al. [ALS16, Section 4.2].
• A MIFE for inner product over ZN where N is an RSA modulus, based on Paillier’s
Decisional Composite Residuosity assumption. This is obtained using the DCR-based
scheme of Agrawal et al. [ALS16, Section 5.2].
We note that since both these schemes in [ALS16] have a stateful key generation, our MIFE
inherits this stateful property. Stateless MIFE instantiations are obtained from the transfor-
mation in the next section.
Our Transformation for Inner Product over Z
Here we present our transformation for the case of bounded-norm inner product. In particular,
in Figure 5.4 we present a multi-input scheme MIFE for the set of functionalities {F m,X,Y
}n∈N
deﬁned as F m,X,Y
: Kn ×X1 ×···×Xn → Z, with Kn := [0, Y ]mn, for all i ∈ [n], Xi := [0, X]m,
Z := Z, such that for any (y1k···kyn) ∈ Kn, xi ∈ Xi, we have:
n
n
F m,X,Y
n
(cid:0)(y1k···kyn), x1, . . . , xn(cid:1) =
nXi=1hxi, yii.
IP
Our transformation builds upon the one-time scheme MIFE ot of Figure 5.1, and a single-input,
public-key scheme FE for the class F m,3X,Y
.2 We require FE to satisfy two properties. The
ﬁrst one, that we call two-step decryption, intuitively says that the FE decryption algorithm
works in two steps: the ﬁrst step uses the decryption key to output an encoding of the result,
while the second step returns the actual result hx, yi provided that the bounds kxk∞  X, yet correctness is guaranteed as long as the encrypted inputs are
within the bound at the moment of invoking the second step of decryption.
Two-step decryption is formally deﬁned as follows.
Property 1: Two-step decryption
An FE scheme FE = (GSetup, Setup, Enc, KeyGen, Dec) satisﬁes two-step decryption if it
admits PPT algorithms GSetup⋆, Dec1, Dec2 and an encoding function E such that:
1. For all λ, m, n, X, Y ∈ N, GSetup⋆(1λ, F m,X,Y
IP
, 1n) outputs gpk which includes a
2The reason why we need 3X instead of X is due to maintain a correct distribution of the inputs in the
security proof.
5.1 From Single to Multi-Input FE for Inner Product
107
bound B ∈ N, and the description of a group G (with group law ◦) of order L >
n · m · X · Y , which deﬁnes the encoding function E : ZL × Z → G.
2. For all gpk ← GSetup⋆(1λ, F m,X,Y
, 1n), (ek, msk) ← Setup(1λ, gpk, F m,X,Y
ctx ← Enc(gpk, ek, x), y ∈ Zm, and dky ← KeyGen(gpk, msk, y), we have
IP
IP
), x ∈ Zm,
Dec1(gpk, ctx, dky) = E(hx, yi mod L, noise),
for some noise ∈ N that depends on ctx and dky. Furthermore, it holds that for
all x, y ∈ Zm, Pr[noise < B] = 1 − negl(λ), where the probability is taken over the
random coins of GSetup⋆, Setup, Enc and KeyGen. Note that there is no restriction
on the magnitude of hx, yi here, and we are assuming that Enc accepts inputs x
whose norm may be larger than the bound.
3. Given any γ ∈ ZL, and gpk, one can eﬃciently compute E(γ, 0).
4. The encoding E is linear, that is: for all γ, γ′ ∈ ZL, , noise, noise′ ∈ Z, we have
E(γ, noise) ◦ E(γ′, noise′) = E(γ + γ′ mod L, noise + noise′).
5. For all γ < n · m · X · Y , and noise < n · B, Dec2(cid:0)gpk,E(γ, noise)(cid:1) = γ.
The second property is as follows.
Property 2: Linear encryption
For any FE scheme FE = (GSetup, Setup, Enc, KeyGen, Dec) satisfying the two-step prop-
erty, we deﬁne the following additional property. There exists a deterministic algorithm
Add that takes as input a ciphertext and a message, such that for all x, x′ ∈ Zm, the
following are identically distributed:
Add(Enc(gpk, ek, x), x′), and Enc(cid:0)gpk, ek, (x + x′ mod L)(cid:1),
), (ek, msk) ← Setup(1λ, gpk, F m,X,Y
where gpk ← GSetup⋆(1λ, F m,X,Y
). Note that the
value L ∈ N is deﬁned as part of the output of the algorithm Setup⋆ (see the two-step
property above). We later use a single input FE with this property as a building block
for a multi-input FE (see Figure 5.4); this property however is only used in the security
proof of our transformation.
IP
IP
It is not hard to check that these two properties are satisﬁed by known
Instantiations.
functional encryption schemes for (bounded-norm) inner product. In particular, in Section 5.2,
we show that this is satisﬁed by the many-AD-IND secure FE schemes from [ALS16]. This
allows us to obtain MIFE schemes for bounded-norm inner product based on a variety of
assumptions such as plain DDH, Decisional Composite Residuosity, and LWE. In addition to
obtaining the ﬁrst schemes without the need of pairing groups, we also obtain schemes where
decryption works eﬃciently even for large outputs. This stands in contrast to the previous
result in the previous chapter, where decryption requires to extract discrete logarithms.
Correctness. The correctness of the scheme MIFE follows from (i) the correctness and
Property 1 (two-step decryption) of the single-input scheme, and (ii) from the correctness of
MIFE ot and the linear property of its decryption algorithm Decot.
X, kyk∞ < Y , and let (pk, msk,{eki}i∈[n]) ← Setup(1λ, F m,X,Y
More precisely, consider any vector x := (x1k···kxn) ∈ (Zm)n, y ∈ Zmn, such that kxk∞ <
), dky ← KeyGen(pk, msk, y),
IP
108
Chapter 5. Multi-Input Inner-Product Functional Encryption without Pairings
i, msk′
(cid:0)pkot, mskot,{ekot
(cid:0)ek′
pk := (gpk,{ek′
Return(cid:0)pk, msk,{eki}i∈[n](cid:1)
i }i∈[n](cid:1) ← Setupot(1λ, F m,X,Y
i}i∈[n]), msk :=(cid:0)mskot,{msk′
i(cid:1) ← Setup′(1λ,F m,3X,Y
n
1
, 1n), eki := ekot
i
), gpk′ ← GSetup⋆(1λ, F m,3X,Y
i}i∈[n](cid:1),
IP
Setup(1λ, F m,X,Y
):
n
Enc(pk, eki, xi):
wi := Encot(pkot, ekot
Return Enc′(gpk′, ek′
i , xi)
i, wi)
, 1n), for all i ∈ [n],
KeyGen(pk, msk, y1k···kyn):
i ← KeyGen′(gpk′, msk′
For all i ∈ [n], dk′
i}i∈[n], z(cid:1)
dky1k···kyn :=(cid:0){dk′
Return dky1k···kyn
i, yi), z ← KeyGenot(pkot, mskot, y1k···kyn)
Dec(dky1k···kyn, ct1, . . . , ctn):
Parse dky1k···kyn := ({dk′
i}i∈[n], z). For all i ∈ [n], E(hxi + ui, yii mod L, noisei) ← Dec1(dk′
Return Dec2(cid:0)E(hx1 + u1, y1i mod L, noise1) ◦ ··· ◦ E(hxn + un, yni mod L, noisen) ◦ E(−z, 0)(cid:1)
Figure 5.4: Private-key multi-input FE scheme MIFE = (Setup, Enc, KeyGen, Dec) for the functional-
from public-key single-input FE scheme FE = (GSetup′, Setup′, Enc′, KeyGen′, Dec′) for the
ity F m,X,Y
functionality F m,3X,Y
and the one-time multi-input FE MIFE ot = (Setupot, Encot, KeyGenot, Decot)
IP
from Figure 5.1.
i, cti)
n
and cti ← Enc(pk, eki, xi) for all i ∈ [n].
L, noisei) ← Dec1(dk′
By (2) of Property 1, the decryption algorithm Dec(dky, ct1, . . . , ctn) computes E(hwi, yii mod
By (4) of Property 1 (linearity of E), and the correctness of MIFE ot we have:
i, cti) where for all i ∈ [n], noisei < B, with probability 1 − negl(λ).
E(hw1, y1i mod L, noise1) ◦ ··· ◦ E(hwn, yni mod L, noisen) ◦ E(−z, 0)
= EDecot(z, w1, . . . , wn), Xi∈[n]