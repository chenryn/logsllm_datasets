operation, since it offers the facility of reading and writing.
(If this is used for actual updates — which allow read and
write in the same operation — and if the data being written
depends on the date being read, then care should be taken
to avoid observable delays that can lead to a timing attack.)
C. Security Analysis
We sketch a proof of security that our construction is a se-
cure realization of the deal blind storage functionality FSTORE,
for the adversary model in which the server is corrupted only
passively. The proof follows the standard real/ideal paradigm
in cryptography (see [12], for instance), and uses some of the
standard conventions and terminology.
Roughly, the proof involves demonstrating a simulator S
which interacts with a client only via the ideal functionality
FSTORE (the ideal experiment), yet can simulate the view of the
server in an actual interaction with the client in an instance of
our scheme (the real experiment). The simulated view would
be indistinguishable from the real view of the server, even
when combined with the inputs to the client. Further — and
this is the adaptive nature of our security guarantee — the
inputs to the client at any point in either experiment can be
arbitrarily inﬂuenced by the view of the server till then.
Before describing our simulator, we describe the main
reason for security. Suppose the client makes a read access to a
ﬁle f for the ﬁrst time. In the ideal experiment, the server learns
this ﬁle’s size from FSTORE, and nothing about the other ﬁles.
In the real experiment, the server sees one or two downloads
f and a set of blocks Sf \ S0
from D— a set of κ blocks S0
f
(with the possibility that Sf = S0
f , in which case there is only
one download). Thanks to the encryption, it is easy to enforce
that the contents of these downloaded blocks give virtually
no information to the server (beyond the size of f). But we
need to ensure that the location of these blocks also do not
reveal anything more. For instance, it should not reveal how
many other ﬁles are present in the system. In our construction,
this is ensured by the fact that the pseudorandom subsets S0
f
and Sf are determined by a process that is independent of the
645
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:59:56 UTC from IEEE Xplore.  Restrictions apply. 
The simulator S interacts with the functionality FSTORE on the one hand, and interacts with the server on the other, translating each message
it receives from FSTORE into a set of simulated messages in the interaction between the client and the server in our scheme.
1) When it receives the initial message from FSTORE with the system parameters, S can calculate the size of D; it simulates the contents
2) S initializes a map with entries of the form (j; Λj, sizej), which maps an integer j (indicating the sequence number of accesses) to a
of the blocks in D by picking uniformly random bit strings, with the version number in each block set to 0.
sequence of blocks in D and the size of the ﬁle accessed (in blocks).
The maps are initialized to be empty, and is ﬁlled up as FSTORE reports ﬁle accesses to S.
3) For access number j∗, ﬁrst the table entry (j∗; Λj∗ , sizej∗ ) is created as described below.
Let the triple reported by FSTORE to S for access number j∗ be (op, j, size). Recall that if j > 0, then the ﬁle being accessed has already
been accessed (as the jth access).
a) If op = delete, then let sizej∗ = 0. Else, set sizej∗ = size. Let (cid:96) = max((cid:100)α · sizej∗(cid:101), κ).
b) If j = 0, then S samples a random sequence of (cid:96) distinct integers in the range [nD], uniformly randomly, and sets Λj∗ to be this
c) Else (j > 0), if |Λj| ≥ (cid:96), set Λj∗ = Λj; else (j > 0, and |Λj|  κ, this is followed by a request to download blocks indexed by the next (cid:96) − κ entries of Λj∗. For operations other than read,
this is followed by an upload consisting of new versions (with the blocks’ version numbers incremented, and with fresh random strings
as contents) of the blocks indexed by the ﬁrst (cid:96) entries of Λj∗.
(without duplicates). Set Λj∗ to be this extended sequence.
sequence.
Fig. 5: Description of the simulator S used in the proof of Theorem 1.
other ﬁles in the system – they are chosen randomly (or rather,
pseudorandomly) for each ﬁle independently. The other ﬁles in
the system inﬂuence the subset (cid:98)Sf ⊆ Sf of blocks that actually
the encryption, the server does not learn anything about (cid:98)Sf
carries the data (because these blocks must not be shared with
the data-carrying blocks of any other ﬁle). However, due to
(beyond the fact that it must be a subset of Sf).
Formally, a simulator can simulate the view of the adver-
sary randomly, based only on the size of the ﬁle f being
accessed. The only difference between this simulation and
the real execution (beyond what is hidden by the encryption
and the security of pseudorandomness) is the following: in
the real execution, there is a small probability that an update
could fail, if there are not enough free blocks within the
pseudorandom subset S0
f or Sf. In the simulation, no failure
occurs. Thus the crucial argument in proving security is to
show that it is only with negligible probability that the client
would be left without adequate number of free blocks in such
a pseudorandom set, forcing it to abort the protocol. We will
give a standard probabilistic argument to prove that this is
indeed the case.
In the proof below we describe our simulator S more
formally, and then discuss the main combinatorial argument
used to show that the simulation is indistinguishable from the
real execution. For the sake of clarity, we leave out some of
the routine details of this proof, and focus on aspects speciﬁc
to our construction.
The following theorem statement is in terms of the “storage
slack ratio” in a Blind Storage system, which is the ratio of the
number of blocks nD in the system to the number of blocks
of (formatted) data in the ﬁles stored in the system. Note
that the storage slack ratio decreases as ﬁles are added (or
updated to become longer) and increases as ﬁles are deleted
(or updated to become shorter). The security guarantee below
uses the standard security deﬁnition in cryptography literature
(see, for instance, [12]), which assures that the security “error”
(statistical distance between the simulated execution and the
646
real execution) is negligible,8 as a function of the security
parameter. Later, we discuss the choice of concrete parameters.
Theorem 1: Protocol SCATTERSTORE securely realizes the
functionality FSTORE against honest-but-curious adversaries,
provided the storage slack ratio at all times is at least
1−1/α
and nD ≥ κ = ω(log k).
2
Proof: The non-trivial case is when the server is corrupt
(honest-but-curious) and the client is honest. We describe a
simulator for this setting in Figure 5. The simulator essentially
maintains the indices of the sets of blocks seen by the server.
It need not maintain the subsets within these sets that carry
actual data for the ﬁle being accessed. The maps are used to
maintain consistency in terms of the pattern (same subsets are
used if the same ﬁle is accessed) and the size of the ﬁles.
There are two differences between this simulation and
the real execution. Firstly, the simulated execution uses truly
random strings instead of the outputs from Φ, Φ and Γ. To
handle this we can consider a “hybrid experiment” in which
the real execution is modiﬁed so that instead of Φ, Ψ and Γ,
truly random functions are used. By the security guarantees
of the PRF, the FD-PRF and the PRG (applied one after the
other), this causes only an indistinguishable difference.
The second difference is in aborting: in the real protocol,
the client aborts when it cannot ﬁnd enough free blocks in
a pseudorandom subset, whereas the simulation never aborts.
Conditioned on the protocol never aborting in the hybrid
execution, the server’s view in that execution is identical to
that in the simulated execution.
To complete our proof, therefore it remains to show that
the probability of the client aborting in the hybrid (or real)
protocol
is negligible. We denote this probability by perr.
Before proceeding, we remark that our goal here is to give an
asymptotic proof of security (showing that perr goes down as
a negligible function of the security parameter). The concrete
8A function ν : N → R+ is said to be negligible if, for every c > 0,
there exists a sufﬁciently large k0 ∈ N such that for all k ≥ k0, ν(k) < 1
kc .
That is, ν(k) becomes smaller than 1/poly(k) eventually, for any polynomial
poly.
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:59:56 UTC from IEEE Xplore.  Restrictions apply. 
parameters from this analysis are overly pessimistic and an
actual implementation can use less conservative parameters.
The key message is that perr provides a bound on the extent
of insecurity, and this probability can be quickly driven down
by modestly large parameters that scale linearly with the size
of the data stored.
To analyze perr, recall that we are analyzing a modiﬁed
execution in which the output of the PRG Γ on pseudorandom
seeds (used to deﬁne the pseudorandom subsets) have been
replaced with truly random strings. Suppose there has been no
abort so far, and a new ﬁle f of sizef blocks is to be inserted into
the system (either during the BSTORE.Build stage of during an
update or write operation). Let d out of the nD blocks in D
be ﬁlled. These blocks were ﬁlled by picking random subsets,
and then within these subsets, choosing random subsets with
free blocks. The net effect is of choosing a random subset
of d blocks out of the nD blocks. Now, when f is being
inserted, we pick a random subset S0
f of size κ and a random
set Sf ⊇ S0
f of size |Sf| = max((cid:100)α · sizef(cid:101), κ). The expected
· |Sf|. By a
number of occupied blocks within this set is d
nD
standard application of Chernoff bound,9 the probability that
|Sf| blocks are occupied is 2−Ω(|Sf|), provided
more than 2 d
nD
is upperbounded by a constant less than 1. Since |Sf| ≥ κ,
d
nD
this probability is 2−Ω(κ), and since κ is super-logarithmic
in k (for e.g., log2 k), this probability is 2−ω(log k) which is
negligible in k. Thus except with negligible probability, of the
|Sf| blocks chosen, at least |Sf|(1− 2 d
) ≥ α· sizef · (1− 2 d
)
are free.
nD
nD
nD
nD
≥ 1
d ≥ 2
By the hypothesis in the theorem statement, the storage
1−1/α, or equivalently, 1 − 2 d
slack ratio nD
α. Thus,
except with negligible probability, of the |Sf| blocks chosen
) ≥ sizef blocks are free. The same analysis
α· sizef · (1− 2 d
shows that S0
f will have at least one free block (in fact, at
least (cid:98)κ/α(cid:99) free blocks), except with negligible probability.
If both these conditions hold, the client will not abort when
adding this ﬁle. By a union bound, the probability that it aborts
remains negligible as long as it adds only polynomially many
ﬁles.
On the choice of parameters. There are a few parameters that
one can set in an implementation of our blind storage scheme
to optimize security levels and performance. For simplicity we
treat perr (which measures the probability that any illegitimate
information is revealed to the server) as ﬁxed at either 2−40
or 2−80. The other important parameters are the following:
• γ, an upperbound on the storage slack ratio — i.e., nD
,
d0
where d0 is an upperbound on the total number of blocks
of all the ﬁles (formatted correctly);
the ratio between the number of blocks in a (large
enough) ﬁle and the number of blocks in the pseudorandom
• α,
9In choosing a random subset of blocks,
the blocks are not chosen
independent of each other. So in order to apply Chernoff bound, we ﬁrst
consider the experiment in which the blocks are selected independent of each
other with the same ﬁxed probability, so that the expected number of blocks
chosen is, say 3/2d. Then, by an application of Chernoff bound, except with
2−Ω(nD) probability, at least d blocks are occupied. Now, in this experiment,
|Sf| blocks in Sf, again using
we bound the probability that more than 2 d
nD
Chernoff bound. This probability is an upperbound on the corresponding
probability in the original experiment.
647
subset which is downloaded/uploaded when that ﬁle is
accessed; and
the minimum number of blocks in a pseudorandom
• κ,
subset.
The higher these parameters, the better the security level would
be. However, they also reﬂect higher storage and communica-
tion costs. One can ﬁnd different combinations of (γ, α, κ)
to meet a security level (probability of “error” in simulation)
using the following explicit upperbound, which is tighter than
the Chernoff bound used for asymptotic analysis above.10
(cid:18)(cid:100)αn(cid:101)
(cid:19)(cid:18) γ − 1
(cid:19)i(cid:18) 1
(cid:19)(cid:100)αn(cid:101)−i
n−1(cid:88)
perr(γ, α, κ) ≤ max
n≥ κ
α
i