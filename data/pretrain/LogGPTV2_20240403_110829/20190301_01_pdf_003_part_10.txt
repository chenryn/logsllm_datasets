Built-in Package Guide
Examples
The following example uses the PUT procedure to display a comma-delimited list of
employees from the emp table.
DECLARE
CURSOR emp_cur IS SELECT * FROM emp ORDER BY empno;
BEGIN
FOR i IN emp_cur LOOP
DBMS_OUTPUT.PUT(i.empno);
DBMS_OUTPUT.PUT(',');
DBMS_OUTPUT.PUT(i.ename);
DBMS_OUTPUT.PUT(',');
DBMS_OUTPUT.PUT(i.job);
DBMS_OUTPUT.PUT(',');
DBMS_OUTPUT.PUT(i.mgr);
DBMS_OUTPUT.PUT(',');
DBMS_OUTPUT.PUT(i.hiredate);
DBMS_OUTPUT.PUT(',');
DBMS_OUTPUT.PUT(i.sal);
DBMS_OUTPUT.PUT(',');
DBMS_OUTPUT.PUT(i.comm);
DBMS_OUTPUT.PUT(',');
DBMS_OUTPUT.PUT(i.deptno);
DBMS_OUTPUT.NEW_LINE;
END LOOP;
END;
7369,SMITH,CLERK,7902,17-DEC-80 00:00:00,800.00,,20
7499,ALLEN,SALESMAN,7698,20-FEB-81 00:00:00,1600.00,300.00,30
7521,WARD,SALESMAN,7698,22-FEB-81 00:00:00,1250.00,500.00,30
7566,JONES,MANAGER,7839,02-APR-81 00:00:00,2975.00,,20
7654,MARTIN,SALESMAN,7698,28-SEP-81 00:00:00,1250.00,1400.00,30
7698,BLAKE,MANAGER,7839,01-MAY-81 00:00:00,2850.00,,30
7782,CLARK,MANAGER,7839,09-JUN-81 00:00:00,2450.00,,10
7788,SCOTT,ANALYST,7566,19-APR-87 00:00:00,3000.00,,20
7839,KING,PRESIDENT,,17-NOV-81 00:00:00,5000.00,,10
7844,TURNER,SALESMAN,7698,08-SEP-81 00:00:00,1500.00,0.00,30
7876,ADAMS,CLERK,7788,23-MAY-87 00:00:00,1100.00,,20
7900,JAMES,CLERK,7698,03-DEC-81 00:00:00,950.00,,30
7902,FORD,ANALYST,7566,03-DEC-81 00:00:00,3000.00,,20
7934,MILLER,CLERK,7782,23-JAN-82 00:00:00,1300.00,,10
3.9.8 PUT_LINE
The PUT_LINE procedure writes a single line to the message buffer including an end-of-
line character sequence.
PUT_LINE(item VARCHAR2)
Parameters
item
Text to be written to the message buffer.
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 105
Database Compatibility for Oracle® Developers
Built-in Package Guide
Examples
The following example uses the PUT_LINE procedure to display a comma-delimited list
of employees from the emp table.
DECLARE
v_emprec VARCHAR2(120);
CURSOR emp_cur IS SELECT * FROM emp ORDER BY empno;
BEGIN
FOR i IN emp_cur LOOP
v_emprec := i.empno || ',' || i.ename || ',' || i.job || ',' ||
NVL(LTRIM(TO_CHAR(i.mgr,'9999')),'') || ',' || i.hiredate ||
',' || i.sal || ',' ||
NVL(LTRIM(TO_CHAR(i.comm,'9990.99')),'') || ',' || i.deptno;
DBMS_OUTPUT.PUT_LINE(v_emprec);
END LOOP;
END;
7369,SMITH,CLERK,7902,17-DEC-80 00:00:00,800.00,,20
7499,ALLEN,SALESMAN,7698,20-FEB-81 00:00:00,1600.00,300.00,30
7521,WARD,SALESMAN,7698,22-FEB-81 00:00:00,1250.00,500.00,30
7566,JONES,MANAGER,7839,02-APR-81 00:00:00,2975.00,,20
7654,MARTIN,SALESMAN,7698,28-SEP-81 00:00:00,1250.00,1400.00,30
7698,BLAKE,MANAGER,7839,01-MAY-81 00:00:00,2850.00,,30
7782,CLARK,MANAGER,7839,09-JUN-81 00:00:00,2450.00,,10
7788,SCOTT,ANALYST,7566,19-APR-87 00:00:00,3000.00,,20
7839,KING,PRESIDENT,,17-NOV-81 00:00:00,5000.00,,10
7844,TURNER,SALESMAN,7698,08-SEP-81 00:00:00,1500.00,0.00,30
7876,ADAMS,CLERK,7788,23-MAY-87 00:00:00,1100.00,,20
7900,JAMES,CLERK,7698,03-DEC-81 00:00:00,950.00,,30
7902,FORD,ANALYST,7566,03-DEC-81 00:00:00,3000.00,,20
7934,MILLER,CLERK,7782,23-JAN-82 00:00:00,1300.00,,10
3.9.9 SERVEROUTPUT
The SERVEROUTPUT procedure provides the capability to direct messages to standard
output of the command line or to the message buffer. Setting SERVEROUTPUT(TRUE)
also performs an implicit execution of ENABLE.
The default setting of SERVEROUTPUT is implementation dependent. For example, in
Oracle SQL*Plus, SERVEROUTPUT(FALSE) is the default. In PSQL,
SERVEROUTPUT(TRUE) is the default. Also note that in Oracle SQL*Plus, this setting is
controlled using the SQL*Plus SET command, not by a stored procedure as implemented
in Advanced Server.
SERVEROUTPUT(stdout BOOLEAN)
Parameters
stdout
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 106
Database Compatibility for Oracle® Developers
Built-in Package Guide
Set to TRUE if subsequent PUT, PUT_LINE, or NEW_LINE commands are to send
text directly to standard output of the command line. Set to FALSE if text is to be
sent to the message buffer.
Examples
The following anonymous block sends the first message to the command line and the
second message to the message buffer.
BEGIN
DBMS_OUTPUT.SERVEROUTPUT(TRUE);
DBMS_OUTPUT.PUT_LINE('This message goes to the command line');
DBMS_OUTPUT.SERVEROUTPUT(FALSE);
DBMS_OUTPUT.PUT_LINE('This message goes to the message buffer');
END;
This message goes to the command line
If within the same session, the following anonymous block is executed, the message
stored in the message buffer from the prior example is flushed and displayed on the
command line as well as the new message.
BEGIN
DBMS_OUTPUT.SERVEROUTPUT(TRUE);
DBMS_OUTPUT.PUT_LINE('Flush messages from the buffer');
END;
This message goes to the message buffer
Flush messages from the buffer
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 107
Database Compatibility for Oracle® Developers
Built-in Package Guide
3.10 DBMS_PIPE
The DBMS_PIPE package provides the capability to send messages through a pipe within
or between sessions connected to the same database cluster.
The procedures and functions available in the DBMS_PIPE package are listed in the
following table:
Function/Procedure Return Description
Type
CREATE_PIPE(pipename [, INTEGER Explicitly create a private pipe if private is
maxpipesize ] [, private ])
“true” (the default) or a public pipe if private
is “false”.
NEXT_ITEM_TYPE INTEGER Determine the data type of the next item in a
received message.
PACK_MESSAGE(item) n/a Place item in the session’s local message buffer.
PURGE(pipename) n/a Remove unreceived messages from the specified
pipe.
RECEIVE_MESSAGE(pipename [, INTEGER Get a message from a specified pipe.
timeout ])
REMOVE_PIPE(pipename) INTEGER Delete an explicitly created pipe.
RESET_BUFFER n/a Reset the local message buffer.
SEND_MESSAGE(pipename [, timeout INTEGER Send a message on a pipe.
] [, maxpipesize ])
UNIQUE_SESSION_NAME VARCHAR2 Obtain a unique session name.
UNPACK_MESSAGE(item OUT) n/a Retrieve the next data item from a message into
a type-compatible variable, item.
Pipes are categorized as implicit or explicit. An implicit pipe is created if a reference is
made to a pipe name that was not previously created by the CREATE_PIPE function. For
example, if the SEND_MESSAGE function is executed using a non-existent pipe name, a
new implicit pipe is created with that name. An explicit pipe is created using the
CREATE_PIPE function whereby the first parameter specifies the pipe name for the new
pipe.
Pipes are also categorized as private or public. A private pipe can only be accessed by the
user who created the pipe. Even a superuser cannot access a private pipe that was created
by another user. A public pipe can be accessed by any user who has access to the
DBMS_PIPE package.
A public pipe can only be created by using the CREATE_PIPE function with the third
parameter set to FALSE. The CREATE_PIPE function can be used to create a private pipe
by setting the third parameter to TRUE or by omitting the third parameter. All implicit
pipes are private.
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 108
Database Compatibility for Oracle® Developers
Built-in Package Guide
The individual data items or “lines” of a message are first built-in a local message buffer,
unique to the current session. The PACK_MESSAGE procedure builds the message in the
session’s local message buffer. The SEND_MESSAGE function is then used to send the
message through the pipe.
Receipt of a message involves the reverse operation. The RECEIVE_MESSAGE function is
used to get a message from the specified pipe. The message is written to the session’s
local message buffer. The UNPACK_MESSAGE procedure is then used to transfer the
message data items from the message buffer to program variables. If a pipe contains
multiple messages, RECEIVE_MESSAGE gets the messages in FIFO (first-in-first-out)
order.
Each session maintains separate message buffers for messages created with the
PACK_MESSAGE procedure and messages retrieved by the RECEIVE_MESSAGE function.
Thus messages can be both built and received in the same session. However, if
consecutive RECEIVE_MESSAGE calls are made, only the message from the last
RECEIVE_MESSAGE call will be preserved in the local message buffer.
3.10.1 CREATE_PIPE
The CREATE_PIPE function creates an explicit public pipe or an explicit private pipe
with a specified name.
status INTEGER CREATE_PIPE(pipename VARCHAR2
[, maxpipesize INTEGER ] [, private BOOLEAN ])
Parameters
pipename
Name of the pipe.
maxpipesize
Maximum capacity of the pipe in bytes. Default is 8192 bytes.
private
Create a public pipe if set to FALSE. Create a private pipe if set to TRUE. This is
the default.
status
Status code returned by the operation. 0 indicates successful creation.
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 109
Database Compatibility for Oracle® Developers
Built-in Package Guide
Examples
The following example creates a private pipe named messages:
DECLARE
v_status INTEGER;
BEGIN
v_status := DBMS_PIPE.CREATE_PIPE('messages');
DBMS_OUTPUT.PUT_LINE('CREATE_PIPE status: ' || v_status);
END;
CREATE_PIPE status: 0
The following example creates a public pipe named mailbox:
DECLARE
v_status INTEGER;
BEGIN
v_status := DBMS_PIPE.CREATE_PIPE('mailbox',8192,FALSE);
DBMS_OUTPUT.PUT_LINE('CREATE_PIPE status: ' || v_status);
END;
CREATE_PIPE status: 0
3.10.2 NEXT_ITEM_TYPE
The NEXT_ITEM_TYPE function returns an integer code identifying the data type of the
next data item in a message that has been retrieved into the session’s local message
buffer. As each item is moved off of the local message buffer with the UNPACK_MESSAGE
procedure, the NEXT_ITEM_TYPE function will return the data type code for the next
available item. A code of 0 is returned when there are no more items left in the message.
typecode INTEGER NEXT_ITEM_TYPE
Parameters
typecode
Code identifying the data type of the next data item as shown in Table 7-3-1.
Table 7-3-1 NEXT_ITEM_TYPE Data Type Codes
Type Code Data Type
0 No more data items
9 NUMBER
11 VARCHAR2
13 DATE
23 RAW
Note: The type codes list in the table are not compatible with Oracle databases. Oracle
assigns a different numbering sequence to the data types.
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 110
Database Compatibility for Oracle® Developers
Built-in Package Guide
Examples
The following example shows a pipe packed with a NUMBER item, a VARCHAR2 item, a
DATE item, and a RAW item. A second anonymous block then uses the NEXT_ITEM_TYPE
function to display the type code of each item.
DECLARE
v_number NUMBER := 123;
v_varchar VARCHAR2(20) := 'Character data';
v_date DATE := SYSDATE;
v_raw RAW(4) := '21222324';
v_status INTEGER;
BEGIN
DBMS_PIPE.PACK_MESSAGE(v_number);
DBMS_PIPE.PACK_MESSAGE(v_varchar);
DBMS_PIPE.PACK_MESSAGE(v_date);
DBMS_PIPE.PACK_MESSAGE(v_raw);
v_status := DBMS_PIPE.SEND_MESSAGE('datatypes');
DBMS_OUTPUT.PUT_LINE('SEND_MESSAGE status: ' || v_status);
EXCEPTION
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('SQLERRM: ' || SQLERRM);
DBMS_OUTPUT.PUT_LINE('SQLCODE: ' || SQLCODE);
END;
SEND_MESSAGE status: 0
DECLARE
v_number NUMBER;
v_varchar VARCHAR2(20);
v_date DATE;
v_timestamp TIMESTAMP;
v_raw RAW(4);
v_status INTEGER;
BEGIN
v_status := DBMS_PIPE.RECEIVE_MESSAGE('datatypes');
DBMS_OUTPUT.PUT_LINE('RECEIVE_MESSAGE status: ' || v_status);
DBMS_OUTPUT.PUT_LINE('----------------------------------');
v_status := DBMS_PIPE.NEXT_ITEM_TYPE;
DBMS_OUTPUT.PUT_LINE('NEXT_ITEM_TYPE: ' || v_status);
DBMS_PIPE.UNPACK_MESSAGE(v_number);
DBMS_OUTPUT.PUT_LINE('NUMBER Item : ' || v_number);
DBMS_OUTPUT.PUT_LINE('----------------------------------');
v_status := DBMS_PIPE.NEXT_ITEM_TYPE;
DBMS_OUTPUT.PUT_LINE('NEXT_ITEM_TYPE: ' || v_status);
DBMS_PIPE.UNPACK_MESSAGE(v_varchar);
DBMS_OUTPUT.PUT_LINE('VARCHAR2 Item : ' || v_varchar);
DBMS_OUTPUT.PUT_LINE('----------------------------------');
v_status := DBMS_PIPE.NEXT_ITEM_TYPE;
DBMS_OUTPUT.PUT_LINE('NEXT_ITEM_TYPE: ' || v_status);
DBMS_PIPE.UNPACK_MESSAGE(v_date);
DBMS_OUTPUT.PUT_LINE('DATE Item : ' || v_date);
DBMS_OUTPUT.PUT_LINE('----------------------------------');
v_status := DBMS_PIPE.NEXT_ITEM_TYPE;
DBMS_OUTPUT.PUT_LINE('NEXT_ITEM_TYPE: ' || v_status);
DBMS_PIPE.UNPACK_MESSAGE(v_raw);
DBMS_OUTPUT.PUT_LINE('RAW Item : ' || v_raw);
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 111
Database Compatibility for Oracle® Developers
Built-in Package Guide
DBMS_OUTPUT.PUT_LINE('----------------------------------');
v_status := DBMS_PIPE.NEXT_ITEM_TYPE;
DBMS_OUTPUT.PUT_LINE('NEXT_ITEM_TYPE: ' || v_status);
DBMS_OUTPUT.PUT_LINE('---------------------------------');
EXCEPTION
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('SQLERRM: ' || SQLERRM);
DBMS_OUTPUT.PUT_LINE('SQLCODE: ' || SQLCODE);
END;
RECEIVE_MESSAGE status: 0
----------------------------------
NEXT_ITEM_TYPE: 9
NUMBER Item : 123
----------------------------------
NEXT_ITEM_TYPE: 11
VARCHAR2 Item : Character data
----------------------------------
NEXT_ITEM_TYPE: 13
DATE Item : 02-OCT-07 11:11:43
----------------------------------
NEXT_ITEM_TYPE: 23
RAW Item : 21222324
----------------------------------
NEXT_ITEM_TYPE: 0
3.10.3 PACK_MESSAGE
The PACK_MESSAGE procedure places an item of data in the session’s local message
buffer. PACK_MESSAGE must be executed at least once before issuing a SEND_MESSAGE
call.
PACK_MESSAGE(item { DATE | NUMBER | VARCHAR2 | RAW })
Use the UNPACK_MESSAGE procedure to obtain data items once the message is retrieved
using a RECEIVE_MESSAGE call.
Parameters
item
An expression evaluating to any of the acceptable parameter data types. The value
is added to the session’s local message buffer.
3.10.4 PURGE
The PURGE procedure removes the unreceived messages from a specified implicit pipe.
PURGE(pipename VARCHAR2)
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 112
Database Compatibility for Oracle® Developers
Built-in Package Guide
Use the REMOVE_PIPE function to delete an explicit pipe.
Parameters
pipename
Name of the pipe.
Examples
Two messages are sent on a pipe:
DECLARE
v_status INTEGER;
BEGIN
DBMS_PIPE.PACK_MESSAGE('Message #1');
v_status := DBMS_PIPE.SEND_MESSAGE('pipe');
DBMS_OUTPUT.PUT_LINE('SEND_MESSAGE status: ' || v_status);
DBMS_PIPE.PACK_MESSAGE('Message #2');
v_status := DBMS_PIPE.SEND_MESSAGE('pipe');
DBMS_OUTPUT.PUT_LINE('SEND_MESSAGE status: ' || v_status);
END;
SEND_MESSAGE status: 0
SEND_MESSAGE status: 0
Receive the first message and unpack it:
DECLARE
v_item VARCHAR2(80);
v_status INTEGER;
BEGIN
v_status := DBMS_PIPE.RECEIVE_MESSAGE('pipe',1);
DBMS_OUTPUT.PUT_LINE('RECEIVE_MESSAGE status: ' || v_status);
DBMS_PIPE.UNPACK_MESSAGE(v_item);
DBMS_OUTPUT.PUT_LINE('Item: ' || v_item);
END;
RECEIVE_MESSAGE status: 0
Item: Message #1
Purge the pipe:
EXEC DBMS_PIPE.PURGE('pipe');
Try to retrieve the next message. The RECEIVE_MESSAGE call returns status code 1
indicating it timed out because no message was available.
DECLARE
v_item VARCHAR2(80);
v_status INTEGER;
BEGIN
v_status := DBMS_PIPE.RECEIVE_MESSAGE('pipe',1);
DBMS_OUTPUT.PUT_LINE('RECEIVE_MESSAGE status: ' || v_status);
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 113
Database Compatibility for Oracle® Developers
Built-in Package Guide
END;
RECEIVE_MESSAGE status: 1
3.10.5 RECEIVE_MESSAGE
The RECEIVE_MESSAGE function obtains a message from a specified pipe.
status INTEGER RECEIVE_MESSAGE(pipename VARCHAR2
[, timeout INTEGER ])
Parameters
pipename
Name of the pipe.
timeout
Wait time (seconds). Default is 86400000 (1000 days).
status
Status code returned by the operation.
The possible status codes are:
Table 7-3-2 RECEIVE_MESSAGE Status Codes
Status Code Description
0 Success
1 Time out
2 Message too large .for the buffer
3.10.6 REMOVE_PIPE
The REMOVE_PIPE function deletes an explicit private or explicit public pipe.
status INTEGER REMOVE_PIPE(pipename VARCHAR2)
Use the REMOVE_PIPE function to delete explicitly created pipes – i.e., pipes created
with the CREATE_PIPE function.
Parameters
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 114
Database Compatibility for Oracle® Developers
Built-in Package Guide
pipename
Name of the pipe.
status