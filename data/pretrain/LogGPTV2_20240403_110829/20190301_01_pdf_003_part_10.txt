# Built-in Package Guide

## 3.9 DBMS_OUTPUT

### 3.9.1 PUT Procedure
The `PUT` procedure is used to write a string to the message buffer without appending an end-of-line character.

#### Syntax
```sql
DBMS_OUTPUT.PUT(item VARCHAR2)
```

#### Parameters
- `item`: The text to be written to the message buffer.

#### Example
The following example uses the `PUT` procedure to display a comma-delimited list of employees from the `emp` table.

```sql
DECLARE
    CURSOR emp_cur IS SELECT * FROM emp ORDER BY empno;
BEGIN
    FOR i IN emp_cur LOOP
        DBMS_OUTPUT.PUT(i.empno);
        DBMS_OUTPUT.PUT(',');
        DBMS_OUTPUT.PUT(i.ename);
        DBMS_OUTPUT.PUT(',');
        DBMS_OUTPUT.PUT(i.job);
        DBMS_OUTPUT.PUT(',');
        DBMS_OUTPUT.PUT(NVL(TO_CHAR(i.mgr, '9999'), ''));
        DBMS_OUTPUT.PUT(',');
        DBMS_OUTPUT.PUT(TO_CHAR(i.hiredate, 'DD-MON-RR HH24:MI:SS'));
        DBMS_OUTPUT.PUT(',');
        DBMS_OUTPUT.PUT(TO_CHAR(i.sal, '9990.99'));
        DBMS_OUTPUT.PUT(',');
        DBMS_OUTPUT.PUT(NVL(TO_CHAR(i.comm, '9990.99'), ''));
        DBMS_OUTPUT.PUT(',');
        DBMS_OUTPUT.PUT(i.deptno);
        DBMS_OUTPUT.NEW_LINE;
    END LOOP;
END;
/
```

#### Output
```
7369,SMITH,CLERK,7902,17-DEC-80 00:00:00,800.00,,20
7499,ALLEN,SALESMAN,7698,20-FEB-81 00:00:00,1600.00,300.00,30
7521,WARD,SALESMAN,7698,22-FEB-81 00:00:00,1250.00,500.00,30
7566,JONES,MANAGER,7839,02-APR-81 00:00:00,2975.00,,20
7654,MARTIN,SALESMAN,7698,28-SEP-81 00:00:00,1250.00,1400.00,30
7698,BLAKE,MANAGER,7839,01-MAY-81 00:00:00,2850.00,,30
7782,CLARK,MANAGER,7839,09-JUN-81 00:00:00,2450.00,,10
7788,SCOTT,ANALYST,7566,19-APR-87 00:00:00,3000.00,,20
7839,KING,PRESIDENT,,17-NOV-81 00:00:00,5000.00,,10
7844,TURNER,SALESMAN,7698,08-SEP-81 00:00:00,1500.00,0.00,30
7876,ADAMS,CLERK,7788,23-MAY-87 00:00:00,1100.00,,20
7900,JAMES,CLERK,7698,03-DEC-81 00:00:00,950.00,,30
7902,FORD,ANALYST,7566,03-DEC-81 00:00:00,3000.00,,20
7934,MILLER,CLERK,7782,23-JAN-82 00:00:00,1300.00,,10
```

### 3.9.2 PUT_LINE Procedure
The `PUT_LINE` procedure writes a single line to the message buffer, including an end-of-line character sequence.

#### Syntax
```sql
DBMS_OUTPUT.PUT_LINE(item VARCHAR2)
```

#### Parameters
- `item`: The text to be written to the message buffer.

#### Example
The following example uses the `PUT_LINE` procedure to display a comma-delimited list of employees from the `emp` table.

```sql
DECLARE
    v_emprec VARCHAR2(120);
    CURSOR emp_cur IS SELECT * FROM emp ORDER BY empno;
BEGIN
    FOR i IN emp_cur LOOP
        v_emprec := i.empno || ',' || i.ename || ',' || i.job || ',' ||
                    NVL(LTRIM(TO_CHAR(i.mgr, '9999')), '') || ',' || 
                    TO_CHAR(i.hiredate, 'DD-MON-RR HH24:MI:SS') || ',' ||
                    TO_CHAR(i.sal, '9990.99') || ',' ||
                    NVL(LTRIM(TO_CHAR(i.comm, '9990.99')), '') || ',' || i.deptno;
        DBMS_OUTPUT.PUT_LINE(v_emprec);
    END LOOP;
END;
/
```

#### Output
```
7369,SMITH,CLERK,7902,17-DEC-80 00:00:00,800.00,,20
7499,ALLEN,SALESMAN,7698,20-FEB-81 00:00:00,1600.00,300.00,30
7521,WARD,SALESMAN,7698,22-FEB-81 00:00:00,1250.00,500.00,30
7566,JONES,MANAGER,7839,02-APR-81 00:00:00,2975.00,,20
7654,MARTIN,SALESMAN,7698,28-SEP-81 00:00:00,1250.00,1400.00,30
7698,BLAKE,MANAGER,7839,01-MAY-81 00:00:00,2850.00,,30
7782,CLARK,MANAGER,7839,09-JUN-81 00:00:00,2450.00,,10
7788,SCOTT,ANALYST,7566,19-APR-87 00:00:00,3000.00,,20
7839,KING,PRESIDENT,,17-NOV-81 00:00:00,5000.00,,10
7844,TURNER,SALESMAN,7698,08-SEP-81 00:00:00,1500.00,0.00,30
7876,ADAMS,CLERK,7788,23-MAY-87 00:00:00,1100.00,,20
7900,JAMES,CLERK,7698,03-DEC-81 00:00:00,950.00,,30
7902,FORD,ANALYST,7566,03-DEC-81 00:00:00,3000.00,,20
7934,MILLER,CLERK,7782,23-JAN-82 00:00:00,1300.00,,10
```

### 3.9.3 SERVEROUTPUT Procedure
The `SERVEROUTPUT` procedure provides the capability to direct messages to the standard output of the command line or to the message buffer. Setting `SERVEROUTPUT(TRUE)` also performs an implicit execution of `ENABLE`.

#### Syntax
```sql
DBMS_OUTPUT.SERVEROUTPUT(stdout BOOLEAN)
```

#### Parameters
- `stdout`: Set to `TRUE` if subsequent `PUT`, `PUT_LINE`, or `NEW_LINE` commands are to send text directly to the standard output of the command line. Set to `FALSE` if text is to be sent to the message buffer.

#### Examples
The following anonymous block sends the first message to the command line and the second message to the message buffer.

```sql
BEGIN
    DBMS_OUTPUT.SERVEROUTPUT(TRUE);
    DBMS_OUTPUT.PUT_LINE('This message goes to the command line');
    DBMS_OUTPUT.SERVEROUTPUT(FALSE);
    DBMS_OUTPUT.PUT_LINE('This message goes to the message buffer');
END;
/
```

#### Output
```
This message goes to the command line
```

If within the same session, the following anonymous block is executed, the message stored in the message buffer from the prior example is flushed and displayed on the command line as well as the new message.

```sql
BEGIN
    DBMS_OUTPUT.SERVEROUTPUT(TRUE);
    DBMS_OUTPUT.PUT_LINE('Flush messages from the buffer');
END;
/
```

#### Output
```
This message goes to the message buffer
Flush messages from the buffer
```

## 3.10 DBMS_PIPE

### Overview
The `DBMS_PIPE` package provides the capability to send messages through a pipe within or between sessions connected to the same database cluster.

### Available Procedures and Functions
| Function/Procedure | Return Type | Description |
|--------------------|-------------|-------------|
| `CREATE_PIPE(pipename [, maxpipesize ] [, private ])` | INTEGER | Explicitly create a private pipe if `private` is `TRUE` (the default) or a public pipe if `private` is `FALSE`. |
| `NEXT_ITEM_TYPE` | INTEGER | Determine the data type of the next item in a received message. |
| `PACK_MESSAGE(item)` | n/a | Place `item` in the session’s local message buffer. |
| `PURGE(pipename)` | n/a | Remove unreceived messages from the specified pipe. |
| `RECEIVE_MESSAGE(pipename [, timeout ])` | INTEGER | Get a message from a specified pipe. |
| `REMOVE_PIPE(pipename)` | INTEGER | Delete an explicitly created pipe. |
| `RESET_BUFFER` | n/a | Reset the local message buffer. |
| `SEND_MESSAGE(pipename [, timeout ] [, maxpipesize ])` | INTEGER | Send a message on a pipe. |
| `UNIQUE_SESSION_NAME` | VARCHAR2 | Obtain a unique session name. |
| `UNPACK_MESSAGE(item OUT)` | n/a | Retrieve the next data item from a message into a type-compatible variable, `item`. |

### Pipe Categorization
Pipes can be categorized as:
- **Implicit** or **Explicit**: An implicit pipe is created if a reference is made to a pipe name that was not previously created by the `CREATE_PIPE` function. An explicit pipe is created using the `CREATE_PIPE` function.
- **Private** or **Public**: A private pipe can only be accessed by the user who created the pipe. A public pipe can be accessed by any user who has access to the `DBMS_PIPE` package.

### Message Handling
- Messages are built in a local message buffer, unique to the current session, using the `PACK_MESSAGE` procedure.
- The `SEND_MESSAGE` function is then used to send the message through the pipe.
- To receive a message, use the `RECEIVE_MESSAGE` function to get the message from the specified pipe and write it to the session’s local message buffer.
- The `UNPACK_MESSAGE` procedure transfers the message data items from the message buffer to program variables.

### 3.10.1 CREATE_PIPE
The `CREATE_PIPE` function creates an explicit public or private pipe with a specified name.

#### Syntax
```sql
status INTEGER CREATE_PIPE(pipename VARCHAR2
[, maxpipesize INTEGER ] [, private BOOLEAN ])
```

#### Parameters
- `pipename`: Name of the pipe.
- `maxpipesize`: Maximum capacity of the pipe in bytes. Default is 8192 bytes.
- `private`: Create a public pipe if set to `FALSE`. Create a private pipe if set to `TRUE` (default).
- `status`: Status code returned by the operation. `0` indicates successful creation.

#### Examples
The following example creates a private pipe named `messages`:

```sql
DECLARE
    v_status INTEGER;
BEGIN
    v_status := DBMS_PIPE.CREATE_PIPE('messages');
    DBMS_OUTPUT.PUT_LINE('CREATE_PIPE status: ' || v_status);
END;
/
```

#### Output
```
CREATE_PIPE status: 0
```

The following example creates a public pipe named `mailbox`:

```sql
DECLARE
    v_status INTEGER;
BEGIN
    v_status := DBMS_PIPE.CREATE_PIPE('mailbox', 8192, FALSE);
    DBMS_OUTPUT.PUT_LINE('CREATE_PIPE status: ' || v_status);
END;
/
```

#### Output
```
CREATE_PIPE status: 0
```

### 3.10.2 NEXT_ITEM_TYPE
The `NEXT_ITEM_TYPE` function returns an integer code identifying the data type of the next data item in a message that has been retrieved into the session’s local message buffer.

#### Syntax
```sql
typecode INTEGER NEXT_ITEM_TYPE
```

#### Parameters
- `typecode`: Code identifying the data type of the next data item as shown in Table 7-3-1.

#### Table 7-3-1: NEXT_ITEM_TYPE Data Type Codes
| Type Code | Data Type |
|-----------|-----------|
| 0         | No more data items |
| 9         | NUMBER |
| 11        | VARCHAR2 |
| 13        | DATE |
| 23        | RAW |

#### Example
The following example shows a pipe packed with a `NUMBER` item, a `VARCHAR2` item, a `DATE` item, and a `RAW` item. A second anonymous block then uses the `NEXT_ITEM_TYPE` function to display the type code of each item.

```sql
DECLARE
    v_number NUMBER := 123;
    v_varchar VARCHAR2(20) := 'Character data';
    v_date DATE := SYSDATE;
    v_raw RAW(4) := '21222324';
    v_status INTEGER;
BEGIN
    DBMS_PIPE.PACK_MESSAGE(v_number);
    DBMS_PIPE.PACK_MESSAGE(v_varchar);
    DBMS_PIPE.PACK_MESSAGE(v_date);
    DBMS_PIPE.PACK_MESSAGE(v_raw);
    v_status := DBMS_PIPE.SEND_MESSAGE('datatypes');
    DBMS_OUTPUT.PUT_LINE('SEND_MESSAGE status: ' || v_status);
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('SQLERRM: ' || SQLERRM);
        DBMS_OUTPUT.PUT_LINE('SQLCODE: ' || SQLCODE);
END;
/
```

#### Output
```
SEND_MESSAGE status: 0
```

The following anonymous block retrieves the message and displays the type code of each item:

```sql
DECLARE
    v_number NUMBER;
    v_varchar VARCHAR2(20);
    v_date DATE;
    v_raw RAW(4);
    v_status INTEGER;
BEGIN
    v_status := DBMS_PIPE.RECEIVE_MESSAGE('datatypes');
    DBMS_OUTPUT.PUT_LINE('RECEIVE_MESSAGE status: ' || v_status);
    DBMS_OUTPUT.PUT_LINE('----------------------------------');
    
    v_status := DBMS_PIPE.NEXT_ITEM_TYPE;
    DBMS_OUTPUT.PUT_LINE('NEXT_ITEM_TYPE: ' || v_status);
    DBMS_PIPE.UNPACK_MESSAGE(v_number);
    DBMS_OUTPUT.PUT_LINE('NUMBER Item : ' || v_number);
    DBMS_OUTPUT.PUT_LINE('----------------------------------');
    
    v_status := DBMS_PIPE.NEXT_ITEM_TYPE;
    DBMS_OUTPUT.PUT_LINE('NEXT_ITEM_TYPE: ' || v_status);
    DBMS_PIPE.UNPACK_MESSAGE(v_varchar);
    DBMS_OUTPUT.PUT_LINE('VARCHAR2 Item : ' || v_varchar);
    DBMS_OUTPUT.PUT_LINE('----------------------------------');
    
    v_status := DBMS_PIPE.NEXT_ITEM_TYPE;
    DBMS_OUTPUT.PUT_LINE('NEXT_ITEM_TYPE: ' || v_status);
    DBMS_PIPE.UNPACK_MESSAGE(v_date);
    DBMS_OUTPUT.PUT_LINE('DATE Item : ' || v_date);
    DBMS_OUTPUT.PUT_LINE('----------------------------------');
    
    v_status := DBMS_PIPE.NEXT_ITEM_TYPE;
    DBMS_OUTPUT.PUT_LINE('NEXT_ITEM_TYPE: ' || v_status);
    DBMS_PIPE.UNPACK_MESSAGE(v_raw);
    DBMS_OUTPUT.PUT_LINE('RAW Item : ' || v_raw);
    DBMS_OUTPUT.PUT_LINE('----------------------------------');
    
    v_status := DBMS_PIPE.NEXT_ITEM_TYPE;
    DBMS_OUTPUT.PUT_LINE('NEXT_ITEM_TYPE: ' || v_status);
    DBMS_OUTPUT.PUT_LINE('---------------------------------');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('SQLERRM: ' || SQLERRM);
        DBMS_OUTPUT.PUT_LINE('SQLCODE: ' || SQLCODE);
END;
/
```

#### Output
```
RECEIVE_MESSAGE status: 0
----------------------------------
NEXT_ITEM_TYPE: 9
NUMBER Item : 123
----------------------------------
NEXT_ITEM_TYPE: 11
VARCHAR2 Item : Character data
----------------------------------
NEXT_ITEM_TYPE: 13
DATE Item : 02-OCT-07 11:11:43
----------------------------------
NEXT_ITEM_TYPE: 23
RAW Item : 21222324
----------------------------------
NEXT_ITEM_TYPE: 0
```

### 3.10.3 PACK_MESSAGE
The `PACK_MESSAGE` procedure places an item of data in the session’s local message buffer. `PACK_MESSAGE` must be executed at least once before issuing a `SEND_MESSAGE` call.

#### Syntax
```sql
PACK_MESSAGE(item { DATE | NUMBER | VARCHAR2 | RAW })
```

#### Parameters
- `item`: An expression evaluating to any of the acceptable parameter data types. The value is added to the session’s local message buffer.

### 3.10.4 PURGE
The `PURGE` procedure removes the unreceived messages from a specified implicit pipe.

#### Syntax
```sql
PURGE(pipename VARCHAR2)
```

#### Parameters
- `pipename`: Name of the pipe.

#### Example
Two messages are sent on a pipe:

```sql
DECLARE
    v_status INTEGER;
BEGIN
    DBMS_PIPE.PACK_MESSAGE('Message #1');
    v_status := DBMS_PIPE.SEND_MESSAGE('pipe');
    DBMS_OUTPUT.PUT_LINE('SEND_MESSAGE status: ' || v_status);
    
    DBMS_PIPE.PACK_MESSAGE('Message #2');
    v_status := DBMS_PIPE.SEND_MESSAGE('pipe');
    DBMS_OUTPUT.PUT_LINE('SEND_MESSAGE status: ' || v_status);
END;
/
```

#### Output
```
SEND_MESSAGE status: 0
SEND_MESSAGE status: 0
```

Receive the first message and unpack it:

```sql
DECLARE
    v_item VARCHAR2(80);
    v_status INTEGER;
BEGIN
    v_status := DBMS_PIPE.RECEIVE_MESSAGE('pipe', 1);
    DBMS_OUTPUT.PUT_LINE('RECEIVE_MESSAGE status: ' || v_status);
    DBMS_PIPE.UNPACK_MESSAGE(v_item);
    DBMS_OUTPUT.PUT_LINE('Item: ' || v_item);
END;
/
```

#### Output
```
RECEIVE_MESSAGE status: 0
Item: Message #1
```

Purge the pipe:

```sql
EXEC DBMS_PIPE.PURGE('pipe');
```

Try to retrieve the next message. The `RECEIVE_MESSAGE` call returns status code `1` indicating it timed out because no message was available.

```sql
DECLARE
    v_item VARCHAR2(80);
    v_status INTEGER;
BEGIN
    v_status := DBMS_PIPE.RECEIVE_MESSAGE('pipe', 1);
    DBMS_OUTPUT.PUT_LINE('RECEIVE_MESSAGE status: ' || v_status);
END;
/
```

#### Output
```
RECEIVE_MESSAGE status: 1
```

### 3.10.5 RECEIVE_MESSAGE
The `RECEIVE_MESSAGE` function obtains a message from a specified pipe.

#### Syntax
```sql
status INTEGER RECEIVE_MESSAGE(pipename VARCHAR2
[, timeout INTEGER ])
```

#### Parameters
- `pipename`: Name of the pipe.
- `timeout`: Wait time (seconds). Default is 86400000 (1000 days).
- `status`: Status code returned by the operation.

#### Possible Status Codes
- `0`: Success
- `1`: Time out
- `2`: Message too large for the buffer

### 3.10.6 REMOVE_PIPE
The `REMOVE_PIPE` function deletes an explicit private or explicit public pipe.

#### Syntax
```sql
status INTEGER REMOVE_PIPE(pipename VARCHAR2)
```

#### Parameters
- `pipename`: Name of the pipe.
- `status`: Status code returned by the operation.

---

Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved.