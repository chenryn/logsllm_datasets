●如果由于Python是一门强大的语言,，代码长度大大缩短，平均每个打印任务的页数减少,
又会怎样?
这些问题全都可以通过修改以上的模拟程序来解答。然而重要的是知道这些模拟的好坏取决于
用于建立模拟的假设,良好的模拟需要真实的每小时任务数量和每小时学生数量等数据。
牛刀小试
1. 如何修改打印模拟程序以反映学生数目增加时的情况?假设学生数目加倍,你需要做一些合理的、
有关如何整合这些模拟情况的假设。如何实现呢?修改代码!同样地，假设平均每个打印任务的页
数减半，也可以修改代码来反映这种变化。最后，如何把学生数量参数化?比起修改代码我们可
以将学生数目变成模拟程序的一个参数。
3.5.双端队列
3.5.1. 什么是双端队列
双端队列（deque 或 double-ended queue）与队列类似，也是一系列元素的有序组合。其两端
称为队首（front）和队尾（rear），元素在到达两端之前始终位于双端队列中。与队列不同的是，双
端队列对元素添加和删除的限制不那么严格，元素可以从两端插入，也可以从两端删除。可以说，
双端队列这种混合的线性数据结构拥有栈和队列各自拥有的所有功能。图3.7是一个由 Python 数据
对象构成的双端队列。 应当指出，双端队列虽然具备栈和队列的许多特征，但其中的数据项不满足
严格的“后进先出”或“先进先出”顺序，这使得插入和删除操作的规律性需要由用户自己维持。
图 3.7 一个由 Python 数据对象构成的双端队列
3.5.2. 抽象数据类型
Deque 抽象数据类型双端队列(Deque)由以下一些结构和操作来定义。如前文所述，双端队列由
一系列有序的元素组织而成，元素可以从队首或队尾插入、删除。下面是双端队列的一些操作。
· Deque() 创建一个空双端队列，无参数，返回值为 Deque 对象。
· addFront(item) 在队首插入一个元素，参数为待插入元素，无返回值。
· addRear(item) 在队尾插入一个元素，参数为待插入元素，无返回值
· removeFront() 在队首移除一个元素，无参数，返回值为该元素。双端队列会被改变。
· removeRear() 在队尾移除一个元素，无参数，返回值为该元素。双端队列会被改变。
· isEmpty() 判断双端队列是否为空，无参数，返回布尔值。
· size() 返回双端队列中数据项的个数，无参数，返回值为整型数值。
下面举例说明。假定d是创建的一个空双端队列，下表给出了对其进行一系列操作后的结果。注意
靠近队首的元素在右侧。由于双端队列两端均可插入、删除，在添加和移除数据项时有时容易造成
混乱，所以时刻关注队首、队尾的状态是非常重要的。
双端队列操作 双端队列内容 返回值
d=Deque() [] Deque 对象
d.isEmpty() [] True
d.addRear(4) [4]
d.addRear(‘dog’) [‘dog’,4]
d.addFront(‘cat’) [‘dog’,4, ‘cat’]
d.addFront(True) [‘dog’,4, ‘cat’,True]
d.size() [‘dog’,4, ‘cat’,True] 4
d.isEmpty() [‘dog’,4, ‘cat’,True] False
d.addRear(8.4) [8.4,‘dog’,4, ‘cat’,True]
d.removeRear() [‘dog’,4, ‘cat’,True] 8.4
d.removeFront() [‘dog’,4, ‘cat’] True
表 3.3 双端队列操作
3.5.3 在 PYTHON 中实现双端队列 DEQUE
就像我们在之前的章节中所做的一样，我们将建立一个新的类来实现抽象数据类型Deque。再
一次地，我们可以通过Python中列表提供的一套非常好的方法来实现Deque 的细节。我们实现的
Deque（代码1)假设尾队尾在列表的0 位置。
class Deque:
def __init__(self):
self.items = []
def isEmpty(self):
return self.items == []
def addFront(self, item):
self.items.append(item)
def addRear(self, item):
self.items.insert(0,item)
def removeFront(self):
return self.items.pop()
def removeRear(self):
return self.items.pop(0)
def size(self):
return len(self.items)
代码 3.
在removeFront中我们用pop方法删除列表中的最后一个元素。而在removeRear 中我们用
pop(0)来删除列表中的第一个元素。同样地，我们需要在addRear 中用insert 方法（第12 行）因为
append 方法只能在列表的尾端添加新元素。
代码2 所示的操作就是表1 中对Deque 进行的一系列操作。
class Deque:
def __init__(self):
self.items = []
def isEmpty(self):
return self.items == []
def addFront(self, item):
self.items.append(item)
def addRear(self, item):
self.items.insert(0,item)
def removeFront(self):
return self.items.pop()
def removeRear(self):
return self.items.pop(0)
def size(self):
return len(self.items)
d=Deque()
print(d.isEmpty())
d.addRear(4)
d.addRear('dog')
d.addFront('cat')
d.addFront(True)
print(d.size())
print(d.isEmpty())
d.addRear(8.4)
print(d.removeRear())
print(d.removeFront())
代码 3. Deque 运行实例
你可以看出这里与描述队列和栈的代码有许多相似的地方。你也应该可以看到在执行过程中从
头头添加或删除项目是O(1)，而从尾部添加或删除是O(n)。
3.5.4 “回文词”判定
一个能用双端队列数据结构轻松解决的问题是经典的“回文词”问题。回文词指的是正读和反
读都一样的词，如：radar、toot 和madam。我们想要编写一个算法来检查放入的字符串是否为回文
词。
这个问题的解决方案是用一个双端队列来存储这个字符串。我们遍历这个字符串并把它的每个
字母添加到双端队列的尾端。现在这个双端队列看起来非常像一个普通队列，但我们可以利用双端
队列两端的对称性。双端队列的首端用来存储第一个字符，尾端用来存储最后一个字符。（见图
3.8）
图 3.8 双端队列
因为我们能够同时取出两端的字符，所以我们可以比较它们是否相同，如果相同就继续比较剩
下的双端队列的首尾字符。如果我们持续比较首尾字符并发现它们相同，最后字符串要么被比较
完，要么只剩下一个字符，这取决于字符串的原始长度是奇数还是偶数。不管哪种情况，这个字符
串都是一个回文词。回文词判断函数的实现在函数palchecker（代码3）中。
from pythonds.basic.deque import Deque
def palchecker(aString):
chardeque = Deque()
for ch in aString:
chardeque.addRear(ch)
stillEqual = True
while chardeque.size() > 1 and stillEqual:
first = chardeque.removeFront()
last = chardeque.removeRear()
if first != last:
stillEqual = False
return stillEqual
print(palchecker("lsdkjfskf"))
print(palchecker("radar"))
代码3 通过双端队列实现的回文词判断函数(palchecker)
3.6 列表 LIST
在整个基本数据结构的讨论中，我们使用了Python 列表来实现抽象数据类型。列表是一个功能
强大而简单的收集容器，并为程序员提供了各种各样的操作。然而， 并非所有的编程语言都有内置
的list 列表类型。在这些情况下，程序员必须自己来实现列表。
列表是一些元素的集合，每个元素拥有一个与其它元素不同的相对位置。更具体地说，我们把
这种类型的列表称为一个无序列表。我们可以认为列表有第一项、第二项、第三项……也可以索引
到列表的开始（第一项）或列表的最后（最后一项）。为简单起见，我们假设列表不能包含重复
项。
例如，由整数54，26，93，17，77，31 组成的集合可能是一个简单的无序列表的考试成绩。注
意，我们已经把它们写入了用逗号分隔的值的列表（一种表示结构的常用方法）。当然，Python 会
把此列表显示为[ 54,26,93,17,77,31 ]。
3.6.1. 抽象数据类型无序列表 UNORDEREDLIST
如上面所描述的，无序列表结构是一个由各个元素组成的集合，在其中的每个元素拥有一个不
同于其它元素的相对位置。一些可用的无序列表的方法如下。
* list() 创建一个新的空列表。它不需要参数，而返回一个空列表。
*add(item) 将新项添加到列表，没有返回值。假设元素不在列表中。
*remove(item) 从列表中删除元素。需要一个参数，并会修改列表。此处假设元
素在列表中。
*search(item) 搜索列表中的元素。需要一个参数，并返回一个布尔值。
*isEmpty() 判断列表是否为空。不需要参数，并返回一个布尔值。
*size() 返回列表的元素数。不需要参数，并返回一个整数。
*append(item) 在列表末端添加一个新的元素。它需要一个参数，没有返回值。
假设该项目不在列表中。
*index(item) 返回元素在列表中的位置。它需要一个参数，并返回位置索引值。
此处假设该元素原本在列表中。
*insert(pos,item) 在指定的位置添加一个新元素。它需要两个参数，没有返回值。
假设该元素在列表中并不存在，并且列表有足够的长度满足参数提供的索引需要。
*pop() 从列表末端移除一个元素并返回它。它不需要参数，返回一个元素。假
设列表至少有一个元素。
*pop(pos) 从指定的位置移除列表元素并返回它。它需要一个位置参数，并返回
一个元素。假设该元素在列表中。
3.6.2.采用链表实现无序列表
为了实现无序列表，我们将构建一个链表。回想一下，我们需要确保元素的相对位置正确。然
而，我们无需使用连续的内存来定位链表中的元素。例如，考虑图3.9中显示的项的集合。看起来这
些值已被随机放置。如果我们可以在每个项目保持一些明确的信息，即下一个项目的位置（见图
3.10），那么每个项目的相对位置就可以通过以下简单的链接从一个项目到下一个来确定。
图3.9 不受其物理位置约束的项目
图3.10 使用显示链接确定的相对位置
需要注意的是，该列表的第一项的位置必须被明确指出。一旦我们知道第一项是什么，第一项
就可以告诉我们第二项是什么，以此类推。从外部指向的第一项通常被称为链表的头。同样地，链
表的最后一项需要告诉我们有没有下一个项目。
3.6.2.1. 类：节点 NODE
用链表实现的基本模块是节点。每个节点对象必须持有至少两条信息。首先，节点必须包含列
表元素本身。我们将这称为该节点的“数据区”（data field）。此外，每个节点必须保持到下一个节
点的引用。代码1 显示了Python 的实现方法。如构造一个节点”93”（见图3.11）。需要指出，我们
将通常以如图3.12 所示的方式代表一个节点对象。节点类还包括访问和修改的常用方法：返回节点
数据和引用到下一项。
class Node:
def __init__(self,initdata):
self.data = initdata
self.next = None
def getData(self):
return self.data
def getNext(self):
return self.next
def setData(self,newdata):
self.data = newdata
def setNext(self,newnext):
self.next = newnext
代码 3.
我们以常见的方式创建了节点类。
>>> temp = Node(93)
>>> temp.getData()
93