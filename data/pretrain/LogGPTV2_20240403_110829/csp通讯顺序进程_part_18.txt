那么（μX.F(X))sat（Vn.S(n))
并且(X sat S(n))>(F(X) sat S(n+ 1))
我们解释一下法则L7结论中的子句refUC。由于有如下事
((-)()#=A10N
X=c-→(x\{c})+(e1
3.8发散性
μX.X
一个明显的卫式递
109
---
## Page 133
这个进程与CHAOS是不同的，因为在它崩溃到CHAOS状态之
之，它是最糟的进程，让我们给它一个恰如其分的名字，称作浑
我们知道，每个进程都是递归方程
单的情形往往也是最坏的情形，即无穷递归式
式中的F可以使用本书中引入的任何算子（但/除外)，而且服从
为μX.F（X)的每个表达式以一个（可能是非确定的)含义，表达
仅能把递归式必须是卫式的这个限制条件甩掉，而且可以给形式
就允许在所有其它的解中做非确定性的选择。这样一来，我们不
所求的解呢？我们约定最不确定的那个解是所求的解，因为这样
潜在的非卫式定义，而且其解也可能不止一个。那么哪个解才是
方程就能检验出来，它们确实是解。
(μX:A.(c-→x))\(e}=μx:(A-{c}).(c-→X)\{c}
是最糟的情形，就是我们前面在3.5.1节结尾引远的立即发散进
沌，且定义
程中最不确定的，最难预测，也是最不容易控制的进程，简而言
的解。因此μX.X可如任何进程般动作。
有关字母表的一切约束条件。
(e→STOP)和（e→a→STOP)都是该方程的解：只要把它们代人
程。
进程连续执行屏蔽事件构成的无穷序列所造成的结局。最简单也
前，它至少还可以执行初始事件。
因此，凡是涉及在屏蔽算子下递归的那种递归方程组，都是
为了解释μ算子的新含义，我们从最简单的情形入手。最简
110
进程CHAOS除了给无穷递归式赋予一个含义之外，还表示
我们前面给出的递归式的情形稍好些
CHAOSA=μX:A.X
μX.x
X=X
。这样它就成了所有进
---
## Page 134
3.8.2发散集
程。因此简直没有它不能做的事；甚至于也没有任何它不能拒绝
它执行事件α。
等式不成立的原因是，在右端变得完全不可靠之前，还可以指望
进程都等干CHAOS。
格的。进程CHAOS实在是太糟了，以致于凡用CHAOS定义的
个函数值就是CHAOS。以上法则（再加上对称性）说明了是严
称进程函数是严格的，如果其自变量中有一个是CHAOS时，整
L1PICHAOS = CHAOS
选择，也不能改变它；于是它就成了的零元案，即有
3.8.1
迹的集合定义如下
态，我们就定义这个迹为该进程一个发散迹。进程P的所有发散
执行的事件！即有如下法则
L3 CHAOS≠(a→CHAOS)
但是前缀运算不是严格的，因为
L2以下各个运算都是严格的
5
divergences(P)= {s|s∈traces(P)A(P/s)=CHAOS。p)
由于CHAOS是最不确定的进程，因而附加更多的非确定性
refusals(CHAOSA)=A的全部子集。
traces(CHAOSA)= A*
我们前面提到过，CHAOS是最难预测、最不容易控制的进
如果一个进程执行完它的某一个迹之后，其行为进入浑沌状
法则
/s,l,f,\C,，μx
= CHAOS A-(0!
=μX:(A-{c}).X
= μX:(A-{c}).(X\{c})
CHAOS定义
3.5,1节 L5
111
---
## Page 135
组成的迹开始，但这个迹会导致P或Q发散(或使两者都发散)，
L7 divcrgences(PQ) = divergences(PUQ)
L6 divergences(x:B-P(x))={~s}
由于I是严格算子，（PIQ)的发散迹可能以P和Q的非发散动作
P的任何一个发散迹也是（PQ)和（PDQ)的发散迹
成第一步动作之后的进程来确定
以选择定义的进程，第一步并不发散。因此它的发散迹集要由完
L5 divergences(CHAOSA)= A*
而另一个极端情形是，进程CHAOS的每一个迹都导致CHAOS
L4 divergences(STOP)={}
部分的发散迹和正常迹来确定的。首先，进程STOP决不会发
因为CHAOSA可以拒绝其字母表A的任何一个子巢，就有
L2 s∈divergences(P)At∈(aP)*→(s^t)∈divergences(P)
从而得出，一个进程的发散迹集（简称发散集）是延展封闭的，即
双由于是严格的，因此有
L1divergences(P)≤traces(P)
由此定义立刻可得
散，
L3
112
即
s∈divergences(P)AXCaP>X∈refusals(P/s)
divergences(P]Q) =
以上给出的三条法则陈述了任何进程的发散集的一般性质。
{st}t∈(aPUaQ)*A((saP∈divergences(P)AsaQ
GHAOS/t= CHAOS
= divergences(P)Udivergences(Q)
∈traces(Q))V(s}aP∈traces(P)
AstaQ∈divergences(Q)))}
xEBAs∈diuergences(P(x)))
---
## Page 136
L11 divergences(f(P))= {f*(s)|sEdivergences(P))
仅当原进程的迹发散时，经符号变换所得到的进程迹才会发散，故
L10 divergences(P\C) =
屏蔽一个无穷的符号序列所得到的新的发散迹，故有
由屏蔽运算造成的进程的发散迹，包含原进程的发散迹，与试图
L9 divergences(PQ) = 
同理可以解释算子的发散迹集
服了。所以，
致本章中这些法则的非形式证明及有关例子也相应地难以合人信
种有关此事发生的数学理论！
种问题不会发生。但是为了证明某件事不会发生，我们却需要一
散，因而系统设计者的任务之一就是证明在他的其体设计中，这
果。不论是屏蔽运算，还是非卫式递归式，都可以引起进程的发
是实施进程的任何有效的或甚至可计算的方法之不可避免的结
么大精力去讨论它，似乎很不应该。但不幸的是，发散现象似乎
其中！是一一对应函数。
有
要知道，发散现象是我们所不希望的东西，可我们却花费这
{ul3s,t. u interleaves(s,t)
本章给出的法则比前两章中的那些法则要复杂得多；从而导
{(s(aP-C))~|t∈(aP-C)*
，构造非确定性进程概念的恰当的数学定义，以及依
V(s∈traces(P)At∈divergences(Q))))
A((s∈divergences(P)At∈traces(Q))
3.9非确定性进程的数学理论
A(s∈divergences(P)
V(n.u∈C* #u>n 
A(s^u)∈traces(P)))}
113
---
## Page 137
D0一个进程就是一个三元组(A,F,D)，其中
因此，进程的迹集的各种性质(1.8.1节L6,L7,L8)，以及拒绝集
相比，更能说明该进程的行为，而且后两者均可用绝境集来定义
做好执行X中任何事件的准备。进程的绝境集与其迹集和拒绝集
迹8记录的事件序列，然后就拒绝再做更多的事情，尽管环境已
如果(3,X)是进程P的一个绝境，则它的含意是，P可以执行由
集(3.8节)也属于这类性质。而且在除了进程P初启时的拒绝集
表在内；但是对非确定性进程来说，它的拒绝集(3.4节)和发散
观察到的有关性质为基础的。这些性质当然包括进程的迹和字母
据各个算子的定义严格证明给出法则的正确性就显得更为重要
的集合。合，
程。给出新定义之前，我们先定义A的幂集，这是A的所有子集
这样的集合，只要满足有关的条件，也就唯一地确定了一个进
境集以及发散集的三个集合唯一地确定的，反过来说，任何三个
新形式表示（参看下面定义D0中的条件C0，C1，C2，C3）。
的各种性质（3.4节L8,L9,L10,L11)就可以很容易地用绝境集重
（二元对集合）
它的可能的拒绝集。为此我们定义进程的绝境集，这是一种关系
之外，我们还需考虑到当它执行完其行为的一个任意迹&之后，
failures(P)={(s,X)!s∈traces(P)AX∈refusals(P/s)}
现在我们可以大胆地断论：一个进程是由描述其字母表、绝
我们在2.8.1节中讲过，数学模型是以进程的可直接或间接
114
F是A*和PA之间的某种对应关系
A是符号的集合（为简单起见我们规定它为有限集）
refusals(P)={X|(,X)∈failures(P)}
traces(P)={si 3X.(s,X)∈failures(P)}
=domain(failures(P))
PA={X|X≤A}
---
## Page 138
D3
用。其定义为
多其它算子一样，它的定义只对具有相同字母表的运算对象适
算对象是满足那六个条件的。
这样一个假设的基础之上的，即构造结果进程所依据的算子的运
由算子的运算对象的三个集合演变而来的。当然还有必要说明这
这个进程不仅从不动作，而且拒绝一切，也不发散。
既是进程的一个正常迹，也是它的一个发散迹，而且A的每个子
该进程是所有字母表为A的进程中最大的，因为A*的每个元素
其中A*×PA是笛卡尔积
D1 CHAOSA=(A,(A*xPA),A*)
集，
（后三个条件即3.8.2节中法则L1,L2,L3）。
D2
C6 s∈DAXCA>(s,X)∈F
3
C0 (,{ })∈F
它们满足以下条件
要定义的最简单的进程运算是非确定性的或运算(厂)。象许
为定义进程算子，就需要说明结果进程的那三个集合是怎样
，都是继进程的任意迹之后的一个拒绝集。
(1)=()
STOPA=(A,{)xPA,{ })
满足这个定义的最简单的进程就是那个最精的进程
另一个简单的进程是
SEDAIEA"→SIED
(s^t,x)∈F>(s,{ D)∈F
D是A*的一个子巢
DCdomain(F)
(s,X)∈FAxEA>(s,XU{x})∈FV(s,{ )∈F
(S,Y)EFAXY>(S,X)EF
{s,X|seA"AXePA}
116
---
## Page 139
D13 failures(PQ)= {s,X} t,u. s interleaves(t,u)
D10 failures(P|Q)= {s,(XUY)|s∈(aPUaQ)*
D9
D4如果αP(x)=A
是定义字母表和绝境集了。
3.8.2节中我们已经给出了发散集的定义，因此剩下的工作就只
的字母表、绝境集及发散迹集的各自的定义，似乎就更优美些。
定义的直接推论。
结果进程的可能绝境或发散迹。3.2.1节中的法则L1,L2,L3是本
该算子的两个运算对象中的任何一个的可能绝境或发散迹，都是
D12
D11
8
4
类似地可以给出所有其它算子的定义，可是如果能写出进程
116
α(P\C)=aP-C
α(P[Q) =a(P I Q) =αP
a(f(P))=f(aP)
α(P|Q) =(aPUαQ)
那么α(x:B→P(x))=A
{(g-)x|x'<>}=（(x)+x)sanf
设B≤aP，
且
failures(PLQ) =
failures(f(P))={f*(s),f(X)(s,X)∈failures(P)}
B≤A
{s,X|(s,X)∈failures(P)∩failures(Q)
V(s≠<>A(s,X)∈(failures(P)Ufailures(Q))))
U{s,X|s∈ divergences(P[Q)}
（对-切x）
A(t,X)∈failures(P)
U[s, X |sE4ivergences(PIO))
A(s}aP,X)∈ failures(P)
A(sFaQ,Y)∈failures(Q))
要求αP=aQ
(s,X)∈failures(P(x)))
Uf*s,x|xeBA
---
## Page 140
有关上式为某个相关方程的解(其实是最不确定的解)的证明与我
μ操作的定义方法与确定性进程的定义方法(2.8.2节L7)相同，
D16 如果(Vn≥0.Fn+1≤F,ADn+1≤Dn),
这个次序关系很显然是一种偏序关系。事实上它是个完圣偏序，
拒绝执行某件该做的事的话，P也可以拒绝。如说进程CHAOS，
因为Q可能做的不该做的事情，P也同样可以做；而且Q如果能
更不容易发散，也不易陷于绝境。
PEQ说明Q与P相等或Q比P更好。这样说是因为，相比之下
D15 (A,F1,D1)E(A,F2,D2)=(F2CF1AD2≤D1)
个处理方法基于2.8.2节中的不动点理论，只是次序关系三的定
手，并借助于算子/的有关法则。
在解释以上的这些法则时，可从解释其中相应的迹集和拒绝集入
D14 failures(P\C)= [s(aP-C),X|(s,XUC)∈failures(P)}
D17 μX:A.F(X)=|
以CHAOS代替STOP,即
它们的区别仅在于对次序关系的定义上。在现在的次序关系下，要
其序列的极限是以递降的绝境集和发散集的交集定义的
L1 CHAOSEP