the distribution L from which L is picked, the veriﬁcation
predicate V applied to z, and the MPC protocol ΠMPC for
(client-assisted) computation of V on the shares of z. See
Figure 2 for a formal description of a veriﬁcation protocol
following this template. In Section 4.3 we will instantiate
the sketching distribution L and in Section 4.4 we will in-
stantiate the MPC protocol ΠMPC.
4.3 Instantiating the Sketching Scheme (L,V)
In this section we propose several eﬃcient instantiations
of the sketching scheme (L,V) that apply to useful classes F
and support very eﬃcient MPC protocols for V. All instan-
tiations rely on the standard Schwartz-Zippel (SZ) lemma,
bounding the number of zeros of a low-degree polynomial.
Due to space constraints we defer proofs to the full version.
DPF fα,β with β ∈ {0, 1} and F of characteristic > 2.
This is the most useful case for applications that involve
voting or counting, where each client can increment a single
counter by 1 or “abstain” by using β = 0. Here we use Lsq
that picks random ﬁeld elements r1, . . . , rN and outputs the
matrix L ∈ F2×N deﬁned by L1,j = rj and L2,j = r2
j . That
is, each column of L contains a random ﬁeld element and
the square of this element. (In an actual implementation, L
can be generated using a short PRF key picked by one of
the parties and sent to all others.) The veriﬁcation predicate
Vsq, which will be realized by ΠMPC, checks that the sketch
z = (z1, z2) satisﬁes the condition Vsq(z1, z2) = z2
1 − z2 = 0.
1299FSS Veriﬁcation Template Ver(i, k∗
i )
Common inputs:
- Security parameter 1λ;
- Input length 1n, of FSS input domain D = {0, 1}n;
- FSS output group G ⊆ F, where F is a ﬁnite ﬁeld and
|F| ≥ 2λ;
// Here λ can be taken to be a statistical
security parameter.
- Subset D(cid:48) ⊆ D of size N . An empty D(cid:48) is interpreted
as D(cid:48) = D; // Running time is linear in N .
Given algorithms:
- FSS evaluation algorithm Eval;
- Matrix sampler L(F, N ), outputting a matrix L ∈
Fd×N (for some constant d ≥ 1);
- Veriﬁcation predicate V : Fd → Fd(cid:48)
- Client-assisted MPC protocol ΠMPC for V.
;
1: Picking matrix: Let L ← L(F, N ) using common ran-
domness;
// Same L is used by all parties; L can be reused as long
as it is independent of all k∗
i .
i , x))x∈D(cid:48) ; //yi ∈ FN
2: Applying Eval: yi ← (Eval(i, k∗
3: Local compression: Let zi ← L · yi; //zi ∈ Fd
4: Interactive veriﬁcation: Run ΠMPC on input zi using
i to evaluate V(z) and accept
correlated randomness in k∗
if and only if the output of ΠMPC is the all-0 vector.
Figure 2: Template for FSS veriﬁcation protocol for a given
(Gen, Eval).
Claim 4.2. Let F be a ﬁnite ﬁeld of characteristic p > 2.
If y ∈ FN is neither a unit vector nor the all-0 vector, then
Pr(cid:2)L ← Lsq(F, N ); (z1, z2) ← L · y : z2 = z2
(cid:3) ≤ 2/|F|.
1
DPF fα,β with β ∈ {0, 1} and general F. We can elim-
inate the restriction on F by using a sketch of d = 3 ﬁeld
elements: Lprod picks L ∈ F3×N as a random matrix whose
third row is the product of the ﬁrst two. That is, L1,j = rj,
L2,j = sj, and L3j = rjsj where the rj and sj are random
and independent ﬁeld elements. The veriﬁcation predicate
is Vprod(z1, z2, z3) = z1z2 − z3.
Claim 4.3. Let F be any ﬁnite ﬁeld. Suppose y ∈ FN is
neither a unit vector nor the all-0 vector. Then
Pr [L ← Lprod(F, N ); (z1, z2, z3) ← L · y : z3 = z1z2] ≤ 2/|F|.
DPF fα,β with β ∈ {1,−1} and general F. Our next
sketching procedure applies to general ﬁelds and, like the
ﬁrst procedure, only requires a sketch of d = 2 ﬁeld ele-
ments. An additional diﬀerence is that the set of possible
β values is {1,−1} instead of {0, 1}. In the case of ﬁelds of
characteristic 2, this is equivalent to requiring that β = 1.
Over other ﬁelds, one can either view the extra possibility
as a feature, e.g., for votes that involve “liking” or “disliking”
a candidate, or enforce the requirement that β = 1 as de-
scribed below. Here we use Linv that picks random nonzero
ﬁeld elements r1, . . . , rN and deﬁne L ∈ F2×N by L1,j = rj
−1
j
and L2,j = r
. That is, each column of L contains a ran-
dom ﬁeld element and its inverse. The veriﬁcation predicate
is Vinv(z1, z2) = z1z2 − 1 = 0. While generating L using Linv
is computationally more expensive than Lsq, its cost can be
amortized since the same L can be used to verify many DPF
keys.
Claim 4.4. Let F be any ﬁnite ﬁeld. If y ∈ FN is neither
a unit vector nor the negation of a unit vector, then
Pr [L ← Linv(F, N ); (z1, z2) ← L · y : z1z2 = 1] ≤ N/(|F|−1).
DPF fα,β with β = 1. The above sketching schemes allow β
to take two possible values. If we want to ensure that β = 1,
it suﬃces to additionally check that the sum of all entries
in y is equal to 1. Using our linear sketching framework,
this can be done in both cases by adding to L an additional
all-1 row and extending the veriﬁcation predicate V. For
instance, for d = 2, we extend V(z1, z2) into V(cid:48)(z1, z2, z3) =
(V(z1, z2), z3 − 1).
Note that the above two sketching schemes are only useful
when D(cid:48) = D. When D(cid:48) is a strict subset of D, the resulting
veriﬁable FSS would fail to be complete in the case α (cid:54)∈ D(cid:48),
because in this case y is the all-0 vector which is rejected by
the above sketching schemes.
DPF fα,β with unrestricted β ∈ F. The above sketch-
ing schemes natively support useful restrictions of β, namely
either β ∈ {0, 1}, β ∈ {1,−1}, or β = 1. However, in some
applications, such as “writing” applications in which a client
is free to overwrite the entire contents of a single entry of an
array, it is useful to support a DPF fα,β where β can be an
arbitrary ﬁeld element. To this end, we augment the general
template in Figure 2 by allowing the veriﬁcation predicate
V to be non-deterministic. That is, V may depend an addi-
tional input w ∈ F that is secret-shared by the client as part
of Gen. Given an honestly generated w, the veriﬁcation suc-
ceeds, and even a maliciously generated w cannot increase
the probability of accepting an invalid y.
To verify an arbitrary point function fα,β, we augment
the previous veriﬁcation predicates as follows:
• V(cid:48)
1 − z2w, where an honest client uses
sq(z1, z2, w) = z2
w = β.
prod(z1, z2, z3, w) = z1z2−z3w, where an honest client
uses w = β.
inv(z1, z2, w) = z1z2 − w, where an honest client uses
w = β2.
• V(cid:48)
• V(cid:48)
Completeness is easy to verify. To argue soundness, one can
modify the previous case analysis to show that for any y
with at least two nozero entries and for any ﬁxed w ∈ F,
the polynomial V(cid:48) still contains a monomial with a nonzero
coeﬃcient.
FSS for intervals.
In the full version, we present an
extension of the above techniques to the class of interval
functions f[a,b] that evaluate to 1 on all x ∈ [a, b] (where x
is interpreted as an integer in [0, 2n − 1]) and evaluates to 0
on all other inputs.
4.4 Instantiating the MPC Protocol ΠMPC
The previous sketching schemes reduce the veriﬁcation
that a long vector y is “well formed” (i.e., belongs to some
1300set B ⊆ FN deﬁned by F and D(cid:48)), to computing a simple,
low-degree predicate V on a short vector z given an additive
sharing z1, . . . , zm of z.
Given the simple nature of the predicates V we use, the
parties could compute V on their own. For instance, if there
is an honest majority of parties (t < m/2) they could use a
“BGW-style” protocol [4], or if there is no honest majority
they could use a “GMW-style” protocol [19] or an arith-
metic variant of this protocol [17, 23]. However, in the lat-
ter case, and in particular in the 2-party case, such protocols
make use of public-key cryptography and involve a consider-
able computation and communication overhead. While this
overhead can be amortized to some extent over multiple in-
stances (e.g., using OT extension techniques [2, 21]), we can
obtain better asymptotic and concrete eﬃciency by using
the help of correlated randomness provided by the client as
part of its key generation.
We present two diﬀerent MPC techniques that apply to
diﬀerent scenarios. The ﬁrst applies to the basic scenario
of verifying predicates V for the simple sketching schemes
described above. It relies on Beaver’s circuit randomization
technique [1] and its soundness exploits the fact that if y
is invalid, then the output of V is not only nonzero with
high probability but it also has a lot of entropy that can-
not be eliminated even if the client provides badly formed
correlated randomness. The second technique is based on
so-called linear PCPs and applies to a more specialized ver-
iﬁcation scenario in which such entropy is not present.
Using shared products. Originating from Beaver’s cir-
cuit randomization technique [1], a common technique for
speeding up MPC protocols is by employing correlated ran-
domness provided by a trusted dealer (or securely imple-
mented using input-independent preprocessing). In the case
of semi-honest parties, Beaver’s technique is very eﬃcient:
it requires the dealer to send 3 ﬁeld elements to each party
for each multiplication gate, and requires each party to com-
municate to all other parties just a single ﬁeld element for
every input or multiplication gate.
Naturally, when the dealer is malicious, the security guar-
antees of the protocol break down. (The goal of protecting
such protocols against a malicious dealer is orthogonal to
the goal of protecting them against malicious parties; see,
e.g., [5, 12] for eﬃcient solutions to the latter.) In [16] it was
observed that in natural protocols of this type, the eﬀect of
a malicious dealer corresponds precisely to an additive at-
tack on the circuit computed by the protocol, namely an
attack that can “blindly” add a ﬁeld element to every inter-
nal wire in the arithmetic circuit computed by the protocol.
To protect against this type of attacks, the solution proposed
in [16] is to protect the computation against additive attack
by using a special type of fault-tolerant circuit called “AMD
circuit.” While this approach can be used protect against a
malicious dealer with a constant overhead, this constant is
quite large and the resulting protocols are fairly complex.
Our main observation is that for the purposes of securely
verifying V, the additive attacks induced by badly formed
correlated randomness are harmless, because the soundness
of the sketching scheme holds even in the presence of such
attacks. As noted above, the high level reason for this is that
the attack cannot reduce the entropy of V(z) for a sketch z
computed from a badly formed y.
More concretely, the predicates V deﬁned above only re-
quire either one or two multiplications, where each multipli-
cation of additively shared secrets a and b is implemented
using Beaver’s technique as follows:
• Inputs: Additive shares [a] = ([a]1, . . . , [a]m) and [b] =
([b]1, . . . , [b]m) of secrets a, b ∈ F.
• Outputs: Additive shares [c] = ([c]1, . . . , [c]m) of c =
ab.
• Correlated randomness: Random additive shares
[a(cid:48)], [b(cid:48)] of random and independent secrets a(cid:48), b(cid:48) ∈ F,
and random additive shares [c(cid:48)] of c(cid:48) = a(cid:48)b(cid:48).
// This correlated randomness is included in the keys
output by Gen.
• Communication: Party i locally computes [∆a]i =
[a]i − [a(cid:48)]i and [∆b]i = [b]i − [b(cid:48)]i and sends [∆a]i and
[∆b]i to all other parties.
• Computing output: Party i computes ∆a =(cid:80)m
and ∆b = (cid:80)m
j=1[∆b]j, and outputs [c]i = ∆a∆b +
j=1[∆a]j
∆b[a]i + ∆a[b]i + [c(cid:48)]i.
To evaluate V on the shared sketch [z], we use the above
procedure for evaluating each multiplication, where addi-
tions are implemented non-interactively, and the output is
reconstructed by simply exchanging shares of the output.
We now brieﬂy analyze the security of the FSS veriﬁcation
protocol obtained by combining the above client-aided MPC
protocol with the sketching schemes proposed above. First,
since we assume the parties to be semi-honest, the secrecy
property follows from the semi-honest security of the MPC
protocol (i.e., the only information learned by the parites is
that V(z) = 0, which is always the case for an honest client).
Consider the case of correlated randomness generated by a
malicious client. Since all predicates V we consider include
only a single level of multiplications, the eﬀect of such bad
randomness is limited to adding some χ ∈ F to each output.
Indeed, since every possible choice of [a(cid:48)] and [b(cid:48)] is valid, an
inconsistency can always be viewed as an error in the choice
of c(cid:48), which is only added to the output. (If the computation
involves two multiplications followed by an addition, which
is needed for some of the predicates V we propose, the two
errors χ1 and χ2 are added.)
The crucial point is that the additive error χ introduced
by bad randomness is independent of the randomness of L.
Hence, it suﬃces to observe that the soundness of the sketch-
ing schemes (L,V) we propose holds also if the constant χ
is added to the output of V. This follows from the fact
that soundness is argued via the Schwartz-Zippel Lemma
applied to polynomials whose degree is greater than 1, for
which adding a constant does not change the degree.
Using linear PCPs for specially structured β. The