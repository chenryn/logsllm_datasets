title:POSTER: Undetectable Task Bypassing OS Scheduler via Hardware
Task Switching
author:Kyeong Joo Jung and
Bang Hun Lee and
Yeon Nam Gung and
Jun Seok Kim and
Hyung Suk Kim and
Ju Seong Han and
Tomaspeter Kim and
Bong Jun Choi
POSTER: Undetectable Task Bypassing OS Scheduler via
Hardware Task Switching
Kyeong Joo Jung
Stonybrook University
Incheon, Republic of Korea
PI:EMAIL
Jun Seok Kim
Ahnlab Inc.
Seongnam, Republic of Korea
PI:EMAIL
Bang Hun Lee
Woosuk University
Jeonju, Republic of Korea
PI:EMAIL
Hyung Suk Kim
BoB(Best of the Best) KITRI
Seongnam, Republic of Korea
PI:EMAIL
Yeon Nam Gung
BoB(Best of the Best) KITRI
Seoul, Republic of Korea
PI:EMAIL
Ju Seong Han
Bluehole Inc.
Seongnam, Republic of Korea
PI:EMAIL
Tomaspeter Kim
BoB(Best of the Best) KITRI
Seongnam, Republic of Korea
PI:EMAIL
Bong Jun (David) Choi
Stonybrook University
Incheon, Republic of Korea
PI:EMAIL
ABSTRACT
Recently, malicious mining using CPUs has become a trend - min-
ing which the task is not detected by the users is even more of
a threat. In this paper, we focused on discovering a new IA-321
vulnerability and found an undetectable task using hardware task
switching method. The created task is undetectable by the operating
system and thus hidden from the system user. Although hardware
task switching methods are replaced by more convenient software
switching methods in the recent years, they still exist on mod-
ern computer systems. By manually manipulating hardware task
switching, which is directly managed by the CPU, we show that it
is possible to create a hidden scheduler aside from the ones created
by the operating system. We demonstrate using a simple CPU con-
sumption example that these hidden tasks have potential to evolve
into more sophisticated malicious attacks that can go unnoticed by
users.
CCS CONCEPTS
• Security and privacy → Operating systems security;
KEYWORDS
Hiding task; Hardware task switching; CPU usage
ACM Reference Format:
Kyeong Joo Jung, Bang Hun Lee, Yeon Nam Gung, Jun Seok Kim, Hyung
Suk Kim, Ju Seong Han, Tomaspeter Kim, and Bong Jun (David) Choi. 2018.
POSTER: Undetectable Task Bypassing OS Scheduler via Hardware Task
1It stands for Intel Architecture-32bit. It is the 32-bit version of the x86 instruction set
architecture which supports 32-bit computing.
Permission to make digital or hard copies of part or all of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for third-party components of this work must be honored.
For all other uses, contact the owner/author(s).
ASIA CCS ’18, June 4–8, 2018, Incheon, Republic of Korea
© 2018 Copyright held by the owner/author(s).
ACM ISBN 978-1-4503-5576-6/18/06.
https://doi.org/10.1145/3196494.3201582
Switching. In ASIA CCS ’18: 2018 ACM Asia Conference on Computer and
Communications Security, June 4–8, 2018, Incheon, Republic of Korea. ACM,
New York, NY, USA, Article 4, 3 pages. https://doi.org/10.1145/3196494.
3201582
1 INTRODUCTION
Recently, cryptocurrencies have become a center of attention, and
malicious mining cases are being newly discovered. Also, mining
can be even a bigger threat in terms of CPU usage if not detected
by the user.
In this paper, we propose a new method to create a task using
hardware task switching which cannot be traced by the operating
systems (OS). This task can be hidden from the user because the
current method, based on software switching, is under OS boundary.
Software task switching method is used over the hardware task
switching, which directly uses CPU, for its convenience and faster
performance. However, we manually use hardware task switching
method in this paper. This means that the OS task management
cannot display the task from hardware task switching method as the
task will be executed outside the OS boundary. In other words, with
hardware task switching, we can execute another task separate from
the OS scheduler and use it to execute tasks undetectable by the
OS. The proposed method can evolve into real attacks. For example,
when we experience slowing down of our system, we often think
that the problem is due to the overuse of CPU or virus/rootkit
running on the background. We naturally check the CPU usage by
running task management and run anti-virus tools. Our method is
hidden from the OS and cannot be detected by these tools.
We manually operate the hardware task switching in the fol-
lowing way. First, we implement a new driver that has a ring 0
authority, which is the highest privilege level of a computer. Then,
the driver is used to modify values of GDT [5], and TSS [5]. Then,
it can switch tasks between normal task and a malicious task.
The paper is outlined as follows. In section 2, we present the
proposed method in relation to existing works. In section 3, we
Poster SessionASIACCS’18, June 4–8, 2018, Incheon, Republic of Korea801present our proposed method and show that a task can be hidden
from the OS. In section 4, we conclude the paper.
2 PROPOSED METHOD
The proposed method can have two key features: (1) hiding tasks
and (2) using CPU resource without being noticed.
First, a hidden task is one of the most dangerous behaviors that
a system can experience. This behavior can be seen from a rootkit
as well. A rootkit is a set of malicious programs and codes that are
undetectable on a computer [4] by hiding from the user and the
OS [9]. There are various methods to create a rootkit, such as LKM
(Loadable Kernel Module) [3], Hooking, DKOM (Direct Kernel Ob-
ject Manipulation) [2], AL-DKOM (All Link - Direct Kernel Object
Manipulation) [6], and Kernel Mode rootkit [7]. Most of the rootkits
are implemented using the clandestine programs or inserting the
rootkit process in the OS scheduler. No matter which method is
used to create a rootkit, the rootkit is still inside the OS manag-
ing boundary. Therefore, any tasks executed by the rootkit will be
traced by the OS scheduler because the OS scheduler shows every
running process. Therefore, using the existing detection method,
existence of the rootkits can be detected.
However, the proposed method is fundamentally different from
the existing rootkit. This is because it uses the hardware task switch-
ing from outside of the OS boundary. Furthermore, it is not detected
by the detection method since there is no detection approach to
find malicious hardware task switching. Prior to this work, there
was no attempt to sue the task switching for creating rootkits nor
hiding tasks in general. In addition, existing rootkits tried to handle
just the address or the link state of the processes [2]. Therefore, the
proposed approach of manually using the hardware task switching
is fundamentally different and can lead to further research on more
sophisticated attacks and countermeasures.
Second, the proposed method uses CPU resources from others
secretly. A similar work was done previous in [10]. However, [10] is
fundamentally different from our method that it used the hypervisor
authority to use the CPU and it is for the virtual machine environ-
ment. In addition, hypervisor authority is an authority which is
hard to achieve while the proposed method needs the ring 0 author-
ity. Ring 0 authority can be easily achieved by installing a driver
which is also known as ’.sys’ files. In this paper, we modify the
system to operate hardware task switching method manually by
installing a ’.sys’ file
Followings are the contributions of this research:
• First to propose a new hiding attack using hardware task
• Expose a new threat that uses ring 0 authority to modify
• Made a recommendation to reduce the permissions of ring 0
GDT and TSS values that have not been done before
switching method
authority.
Following is the limitation of this research:
• Currently, the proposed method has been implemented and
tested under 32-bit Windows - extension to 64-bit Windows
and other operating systems is in progress.
(a) Normal task function call shows 55% of CPU usage.
(b) Hardware task switching call shows 2% of CPU usage.
Figure 1: Normal function call and hardware task switching
function call.
3 PRELIMINARY RESULTS
In this section, we demonstrate how hardware task switching
method is used as an undetected task. To prove that the created task
is undetectable, we created two different scenarios where tasks are
executed either with or without the proposed hardware task switch-
ing. The task can be referred to as a function in a code. The task
in both scenarios repeatedly prints lines until the task switching
happens. Next, we verify through Windbg program to see whether
the function was working properly or not and checked the CPU
usage by running the task management tool provided by the OS.
As shown in Figure 1, the normal function call in (a) prints ’Func-
tion Calling number’ which is a normal task and hardware task
switching function call in (b) prints ’Task Switching number’ which
is a task operated through hardware task switching method. The
result show that normal function call shows 55% of CPU usage and
the hardware task switching function call shows almost no CPU
usage below 2%. The small CPU usage is due to some other normal
system tasks running in the background. In summary, execution
of normal task call shows the usage of CPU but the execution of
the same function through hardware task switching shows no CPU
usage from the viewpoint of OS. This shows that the task through
Poster SessionASIACCS’18, June 4–8, 2018, Incheon, Republic of Korea802Table 1: Result of task execution.
Number of printed lines in task in hardware
CPU utilization of task in hardware (%)
CPU utilization of task in OS (%)
Required CPU utilization of both tasks (%)
Execution time of task using OS time (sec)
Execution time of task using online (sec)
Time difference of both time (sec)
0
0
55
55
13.99
13.96
-0.04
1
9
55
64
14.03
13.99
-0.04
5
14
55
69
14.44
15.56
1.12
10
18
55
73
14.13
15.58
1.45
30
38
55
93
14.55
17.81
3.26
50
46
55
101
14.07
20.55
6.48
100
57
55
112
14.21
36.8
22.58
150
81
55
136
14.42
50.27
35.85
200
96
55
151
13.93
58.45
44.52
250
100
55
155
13.36
69.53
56.17
hardware task switching method can use the CPU’s resources with-
out OS noticing about it.
Next, we discuss how the proposed method can be further used
in the real world. The key feature of the proposed method is that it
executes tasks secretly from the OS. We show how the OS works
on the proposed method by measuring the execution time and CPU
usage. To be specific, as shown in Table 1, we measured the execu-
tion time of a task of approximately 55% of CPU usage executed in
OS scheduler. At the same time, we made hardware task switching
happen simultaneously for many cases. For each case, we made the
task of hardware task switching more complicate to increase the
CPU utilization by simply adding more printed lines. When mea-
suring the time, we calculated the total time of execution counted
by the OS timer and the online timer. This is because we assumed
that if the total amount of CPU utilization of tasks in both (OS and
hardware schedulers) goes above 100%, then the OS might stop at
that moment. In addition, this explains why OS timer stops as well,
and this makes the actual time (online time) different from the OS
time. Then, we calculate the average time of each OS times and
online times from 100 trials.
In Table 1, the required CPU utilization of both tasks affects the
time difference between OS time and the online time. Required CPU
utilization can be calculated by adding the results from executing
the tasks from both the OS and hardware schedulers. If the sum of
CPU usage of both (Required CPU utilization) tasks become over
100%, it would make the user feel that the computer is becoming
slow. This is because as the required CPU utilization reaches over
100%, the time difference of the execution time between the OS
timer and the online timer increases. In this case, the user will
become suspicious about the computer and will start to actively seek
solutions. However, this is not the behavior of the user that attacker
wants. Therefore, as long as the CPU usage stays below 100%, it
will not change the user’s quality of experience. Moreover, this
approach can be extended to dominate the CPU resource of servers.
Since many users share a server, it will become more difficult to
detect as the users may think that the resource is simply occupied
by other users. Another approach is to use low CPU resources from
many computers, such as Zombies, so that users are completely
unsuspecting the attack.
4 CONCLUSION
In this paper, we proposed a new way to create an undetectable task
using hardware task switching. The ring 0 authority can be achieved
easily by installing a newly created driver. Being able to create a
new scheduler outside of the OS management boundary can make
the system vulnerable and can give rise to various new attacks.
Attacks can dominate server’s CPU usage or mine cryptocurrencies
from the users’ computers without being noticed. Therefore, further
research effort is needing to detect such attacks by designing more
sophisticated detection methods that also examines the GDT and
TSS structure. We also recommend that the authority of ring 0
needs to be reduced or be redesigned to consider various prevailing
scenarios.
ACKNOWLEDGMENTS
This research was funded by the MSIT, Korea, under the "ICT Con-
silience Creative Program" (IITP-2017-R0346-16-1007) supervised
by the IITP, by the KEIT, Korea, under the "Global Advanced Tech-
nology Center" (10053204), and by the NRF, Korea, under the "Basic
Science Research Program" (NRF-2015R1C1A1A01053788). In addi-
tion, special thanks to people from Ahnlab Inc., and Bluehole Inc.,
and researchers from Ajae.dll who participated in this research.
REFERENCES
[1] Z. Bazrafshan, H. Hashemi, S. M. H. Fard, and A. Hamzeh. 2013. A survey on
heuristic malware detection techniques. In The 5th Conference on Information
and Knowledge Technology. 113–120.
http:
//www.blackhat.com/presentations/win-usa-04/bh-win-04-butler.pdf.
[2] J. Butler. 2004. DKOM (Direct Kernel Object Manipulation).
(2004).
Software 16, 1 (Jan 1999), 65–71. https://doi.org/10.1109/52.744571.
Addison-Wesley Professional.
[3] J. M. De Goyeneche and E. A. F. De Sousa. 1999. Loadable kernel modules. IEEE
[4] Greg Hoglund and Jamie Butler. 2005. Rootkits: Subverting the Windows Kernel.
[5] Intel 2016. Intel 64 and IA-32 Architectures Developer’s Manual, chapter 6, chapter 7.
Intel. https://www.intel.com/content/www/us/en/architecture-and-technology/
64-ia-32-architectures-software-developer-vol-3a-part-1-manual.html.
[6] Seong-Jin Byeon Dongho Kim Ji-Won Choi, Sang-Jun Park. 2017. Dual-Mode
Kernel Rootkit Scan and Recovery with Process ID Brute-Force. Advanced Science
Letters 23, 3 (March 2017), 1573–1577. https://doi.org/10.1166/asl.2017.8624.
[7] Jestin Joy, Anita John, and James Joy. 2011. Rootkit Detection Mechanism: A Survey.
Springer Berlin Heidelberg, Berlin, Heidelberg, 366–374. https://doi.org/10.1007/
978-3-642-24037-9_36.
[8] Jamie Butler Sherri Sparks. 2005. SHADOW WALKER Raising The Bar For
Rootkit Detection. (2005). http://www.blackhat.com/presentations/bh-jp-05/
bh-jp-05-sparks-butler.pdf.
[9] John Harrison Spencer Smith. 2012. Rootkits. (2012). https://www.symantec.com/
content/dam/symantec/docs/security-center/white-papers/rootkits-12-en.pdf.
[10] F. Zhou, M. Goel, P. Desnoyers, and R. Sundaram. 2011. Scheduler Vulnerabilities
and Coordinated Attacks in Cloud Computing. In 2011 IEEE 10th International
Symposium on Network Computing and Applications. 123–130. https://doi.org/10.
1109/NCA.2011.24.
Poster SessionASIACCS’18, June 4–8, 2018, Incheon, Republic of Korea803