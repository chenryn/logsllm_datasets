metavar="REMOTE FILE NAME")
metavar="REMOTE FTP HOST")
help=
HTTP connection closed successfully
response status:404
request for /foo successful
第5章
 options.remote_host_address):
"REMOTE
FTP HOST."
"--password", dest="password",
"--local_file", dest="local_file",
"--remote_host_address", dest="remote_host_address",
www.TopSage.com
一定要使用高级库。使用httplib而不是单独
DG
---
## Page 175
之前试图清除文件。附录提供了一个对回调函数的简明介绍，仅供参考。
程存在着一些疏漏：我们在FTP服务器上获取文件的代码中建立了一个try块，在关闭本
给它的任何回调函数。回调函数可以对数据进行任何处理。这里，该回调函数仅对它从
调用write(）。retribinary()会连同传递给它的从FTP服务器上获得的数据块调用传递
用write()方法。我们将write方法传入retrbinary()方法，这样retrbinary(）可以
函数是在前一步骤中创建的文件对象的write方法。值得注意的是，在本示例中没有调
法，正如其名称所表达的含义，表示从FTP服务器上获得一个二进制文件。该方法需要
FTP服务器上的文件数据。之后，调用FTP对象的retrbinary()方法。retrbinary()方
户名和密码登录。如果没有提供，则使用匿名登录。接下来，·创建了一个文件对象保存
指定FTP服务器地址。之后，登录到FTP服务器。如果提供了用户名和密码，则以该用
象，但不向构造器传递参数，创建之后再调用connect()方法，而connect()方法需要
代码的起始部分（跳过所有的命令行解析）创建了一个FTP对象，该对象通过将FTP服务
finally:
else:
地文件和FTP连接的代码中使用了finally块。这样，如果有错误发生，就会在脚本结束
务器上获得的文件内容写入到file对象中。最后，关闭文件对象和FTP连接。这一处理过
FTP服务器收到的字节数进行记录。传递一个file对象的write方法能够将脚本从FTP服
两个参数：FTP的retrieve命令和一个回调（callback）函数。你或许注意到，这里的回调
器的地址传递给FTP构造器（constructor）来实现。另一种可选择的方法是，创建FTP对
if options.username and not options.password:
try:
parser.error('PASSWORD is mandatory if USERNAME is present')
local_file.close()
ftp.retrbinary('RETR %s' % options.remote_file, local_file.write)
local_file = open(options.local_file,‘wb')
ftp.close()
try:
try:
parSer.eIror('REMOTE HOST, LOCAL FILE NAME, '\
except
ftp.login(options.username, options.password)
sys.exit(1)
print "Anonymous login failed: %s" % e
ftp.login()
sys.exit(1)
ftpl
'and REMOTE FILE NAME are mandatory')
.error_perm, e:
www.TopSage.com
网络丨161
---
## Page 176
url_retrieve_urllib.py URL FILENAME
#!/usr/bin/env python
例5-5：使用urllib实现FTPURLretriever
里使用了urllib。
FTP资源，但它的确具备这一功能。例5-5与之前的ftplib示例实现的功能相同，只是这
了FTP资源也是可以通过URL来识别的。因此，或许你从没有想过使用ur1lib来获取
urllib位于标准库模块的更高层。看到urllib时，我们很容易会想到HTTP库，而忘记
效代码行如下所示：
过程。由于两个选项是必须的，因此我们需要指定具体的参数。在该示例中，仅有的有
档而并非代码，甚至注释都比代码多。我们使用该脚本完成了一个非常简单的参数解析
这一段脚本简短而且亲切，它展示了urllib的强大之处。事实上，其间有很多是使用文
if '-h' in sys.argv or '--help' in sys.argv:
Notice the'%2F'
If you want to use absolute paths to the file to download,
If the URL is an FTP URL the format should be:
Usage:
urlretriever
urllib
162
urllib.urlretrieve(url,
import sys
import urllib
FILENAME:
URL:
urllib.urlretrieve(url, filename)
sys.exit(1)
print
sys.exit(1)
print
print
第5章
'URL and FILENAME are mandatory
doc
doc
at the beginning of the path to the file.
filename)
www.TopSage.com
Y
---
## Page 177
 #!/usr/bin/env python
def ls(directory):
import SimpleXMLRPCServer
例5-6：简单 XML-RPC 服务器
是一个简单的XML-RPC服务器。
现。此外，XML-RPC在大多数编程语言中都可以使用，而且使用起来非常简单。例5-6
式。要使用XML-RPC，只需要知道在Python标准库中已经有了客户端和服务器端的实
不需要考虑XML的问题，很可能你根本就不需要知道两个进程间所交换的文档的具体格
XML-RPC在两个进程之间交换指定格式的XML文档，以实现远程过程调用。但是这里
XML-RPC
有许多能够执行RPC（远程过程调用）功能的工具可供使用。
就可以更容易地进行处理，而不是返回一大堆文本后再进行手工解析。值得高兴的是，
Python程序中远程执行一些代码，你或许会希望远程调用可以返回Python对象，这样你
执行代码，这时，IPC能够让你有在同一进程中执行代码的感觉。事实上，如果可以在
HTTP或是socket就足够用了。但是，有些时候，需要在不同进程或者是不同计算机之间
网络编程的典型目的就是实现进程间的通信（IPC）。
远程过程调用
任务时，应该查看一下urllib2，看看它是否能够满足需要。
展。例如，urllib2能够更好地支持认证和cookie。因此，当你发现urllib无法完成一些
另外一个高级库是urllib2。urllib2包含了很多与urllib相似的功能，是对urllib的扩
urllib2
python.org/pypi提供的Python包索引（PyPI）。
有时候，Python标准库可能不能满足需要，但可以找到其他的Python资源，如htp://pypi.
而在本示例中，urllib已经能够准确地执行我们想做的事，因此，无须使用更多的库。
法，的确如此。在Python标准中应该会有一些更高级的库，可以完成经常要做的工作。
需要强调的一点是，你有可能认为应该有比使用其他语言完成这些功能更容易一些的方
HTTPURL和FTPURL都可以，甚至在URL中包含用户名和密码也可以。
在获得sys.argv选项之后，代码下载指定的URL，并保存为指定的本地文件名。使用
importos
try:
return os.listdir(directory)
www.TopSage.com
。通常情况下，简单的IPC使用
网络丨163
PDC
---
## Page 178
serve_forever(）循环，该循环等待可以处理的连接。下面是上述代码在IPython shell中
任何0SError异常。1s_boom()可以将异常返回到xML-RPC客户端。接下来，程序进人
os.listdir()传递给它的目录中的所有内容，并且以列表的方式返回结果。1s()会屏蔽
ls_boom()和cb()进行注册。稍后我们会对cb()函数进行介绍。1s()函数会列出使用
端口8765上，这使得该对象只能访问指定机器上的进程。然后对已定义的函数1s()、
该代码创建了一个新的SimpleXMLRPCServer对象，并将其绑定到回环地址127.0.0.1的
if_
def cb(obj):
def ls_boom(directory):
使用的示例。
164
aweu
return os.listdir(directory)
s.register_function(ls_boom)
s = SimpleXMLRPCServer.SimpleXMLRPCServer(('127.0.0.1', 8765))
return obj.cb()
print "OBJECT.
except OSError:
In [3]: x.1s('.')
In [2]: x = xmlrpclib.ServerProxy('http://localhost:8765')
In [1]: import xmlrpclib
s.serve_forever()
s.register_function(cb)
s.register_function(ls)
print
In [6]: x.1s_boom('/foo')
Out[5]:[]
In [5]: x,ls('/foo')
Out[3]:
'web_server_checker_tcp.py']
'web_server_checker_httplib.py',
'subprocess_arp.py',
'subprocess_arp.py',
'web_server_checker_httplib.py',
return[]
第5章
"OBJECT::"， obj
main_
class_.:", obj._class_
www.TopSage.com
Traceback (most recent call last)
---
## Page 179
#1/usr/bin/env python
例5-7：简单的Pyro服务器
的ls()功能。
以与Python一起使用，也可以与其他语言一起使用。例5-7实现了与XML-RPC示例相同
Python中不包含Pyro。值得注意的是，Pyro仅能够与Python一起使用，而XML-RPC既可
化。在传递数据时，它能够保持其原有类型。如果确定要使用Pyro，必需独立安装它。
对象，首字母缩写）。Pyro能完成任何XML-RPC能够实现的功能，而不需将对象字典
Pyro是能够避免XML-RPC缺点的框架。Pyro代表Python Remote Objects（Python远程
Pyro
同样需要根据需要进行选择。
数据的代码。实际上也可以直接使用RPC服务器上的对象。因此，是否使用XML-RPC,
再将其串行化为XML，然后进行传递。这样，你需要写一些从字典的XML版本中提取
如，如果传入了一个自定义的Python对象，XML-RPC库会将该对象转换为Python字典，
但是，XML-RPC也不是完全没有限制的，关键在于你是否把这些限制看作麻烦。例
在多台机器上运行的代码，并根据需要远程执行。
XML-RPC带来了交互操作的可能性，非常有意义。但更有意义的是，可以写一个能够
常处理，可以看到异常从服务器传回了客户端。我们甚至在客户端也可以进行追踪。
户端的线程将数据返回。这里也对ls_boom()进行了测试。由于ls_boom()缺少ls()的异
集合：XML-RPC服务器代码可以用XML格式来表示创建的列表或数组，并通过连接客
的，也会有相同情况。实现服务器的语言可以执行列目录，创建列表，数组或是文件名
录下运行，因此，你可以从该目录列表中看到这些文件。真正有趣的事是在客户端这一
用.1s('.')来查看服务器当前工作目录中有哪些文件。服务器在保存有示例代码的目
首先，通过传递XML-RPC服务器地址来创建一个ServerProxy()对象。然后，调
边
，x.ls('.')返回一个Python列表。如果服务器是由Java、Perl、Ruby或是C#来实现
-->
>
.%
return tuple(seif._stack)
raise Fault(**self._stack[o])
www.TopSage.com
'/foo''
网络丨165
---
## Page 180
接下来，将PSAExample与daemon关联。最后，通知daemon开始服务请求。
ls_boom()和cb()方法。然后通过Pyro的内部管道（internal plumbing）创建了daemon。
Pyro示例与XML-RPC示例相似。首先，创建了PSAExample类，该类具有ls()、
if
class PSAExample(Pyro.core.ObjBase):
from xmlrpc_pyro_diff import PSACB
import os
import Pyro.core
166
下面的示例演示如何在IPython提示符下访问Pyro服务器：
def ls(self, directory):
In [2]: psa = Pyro.core.getProxyForURI("pYROLOC://localhost:7766/psaexample")
In [1]: import Pyro.core
print "The daemon runs on port:",daemon.port
uri=daemon.connect(PSAExample(),"psaexample")
daemon=Pyro:core,Daemon()
def cb(self, obj):
['pyro_server.py',
Out[3]:
In [3]: psa.ls(".")
Pyro Client Initialized.UsingPyro V3.5
def1
'pyro_server.py',
'web_server_checker_tcp.py']
'web_server_checker_tcp.py']
subprocess_arp-py',
'subprocess_arp.py',
return os.listdir(directory)
ls_boom(self,directory):
except OSError:
try:
第5章
print
return[]
return os.listdir(directory)
"OBJECT.
"OB3ECT:", obj
main..
www.TopSage.com
X
---
## Page 181
class PSACB:
import Pyro.core
import xmlrpclib
例5-8：XML-RPC与Pyro的区别
cb（)方法。例5-8显示了我们将要执行的代码段。
的类，创建一个属于该类的对象，然后传递给XML-RPC的cb()函数以及Pyro示例中的
果。但是，当传递一个自定义对象时，会是什么情况呢？下面，我们将要定义一个新
非常不错！该示例返回了与XML-RPC示例相同的输出结果。这正是我们所期望的结
psaxmlrpc = xmlrpclib.ServerProxy('http://localhost:8765')
print "XML-RPC SECTION"
print "PYRO SECTION"
def cb(self):
def
: [Errno 2] No such file or directory: '/foo'
print "*"
print
print
print
>
/home/jmjones/local/Projects/psabook/oreilly/ in ()
In [6]: psa.ls_boom("/foo")
Out[5]:[]
In [5]: psa.ls("/foo")
->
return
117
116
115
*20
"PSA callback"
,psapyro.cb(cb)
_main_
20
raise self.excobj
www.TopSage.com
Traceback (most recent call last)
网络丨167