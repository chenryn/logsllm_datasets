Non-persistent message MQPUT count 1
Persistent message MQPUT count 0
290 Monitoring and Performance for IBM MQ
Failed MQPUT count 0
Non-persistent message MQPUT1 count 0
Persistent message MQPUT1 count 0
Failed MQPUT1 count 0
Put non-persistent messages - byte count 524 52/sec
Put persistent messages - byte count 0
MQSTAT count 0
Results
You used the amqsrua sample application interactively to look at statistics that queue managers publish
on the system topics under the metadata prefix $SYS/MQ/INFO/QMGR.
Note: Classes and types of resource publications that are available for queue managers might be different
depending on their configuration, version, and platform. Use amqsrua interactively to find the classes,
types, and elements that are available for your specific queue manager.
What to do next
To develop your own monitoring application, see “Developing your own resource monitoring application”
on page 291.
Related tasks
“Monitoring the IBM MQ Bridge to Salesforce” on page 296
You can use the amqsrua sample C program to subscribe to topics and display publications for queue
managers that are used by the IBM MQ Bridge to Salesforce.
Preparing and running sample programs on Windows
Preparing and running sample programs on UNIX and Linux
Developing your own resource monitoring application
You can develop your own application to monitor system resources.
Each queue manager publishes resource usage data to topics. This data is consumed by subscribers
to those topics. When a queue manager starts, the queue manager publishes a set of messages on
meta-topics. These messages describe which resource usage topics are supported by the queue manager,
and the content of the messages published to those topics. Administrative tools can subscribe to
the metadata to discover what resource usage information is available, and on what topics, and then
subscribe to the advertised topics.
The topic tree for the metadata has the following structure:
$SYS/MQ/INFO/QMGR/QMGR-NAME/Monitor/class[/instance]/type]
From IBM MQ 9.1.5 use the following structure for the metadata of the topic tree:
$SYS/MQ/INFO/QMGR/QMGR-NAME/Monitor/class[/resourceid]/type]
to clarify that you are specifying the resource being monitored, which has the maximum of 28 character
application name, and to avoid confusion with internal metadata type attributes.
For a list of possible classes, see “Monitoring system resource usage by using the amqsrua command” on
page 288.
The source code for the amqsrua application is provided as an IBM MQ sample. You can use this sample
application as a guide for creating your own monitoring application. You can retrieve the source for the
sample from an IBM MQ client installation. The source file is named amqsruaa.c and is located in the
samples directory:
• On AIX and Linux platforms, MQ_INSTALLATION_PATH/samp/
• On Windows platforms, MQ_INSTALLATION_PATH\tools\c\Samples\
IBM MQ Monitoring and performance 291
The amqsrua application subscribes to IBM MQ resource usage topics and formats the resulting published
PCF data. The application source provides a basic example of how to subscribe to and consume this type
of administrative data. The amqsrua application completes the following tasks:
• Creates a non-durable subscription to the topics identified by the input parameters.
• Calls MQGET repeatedly to get messages from the topics, and writes to stdout.
• Writes a message for each MQI reason (other than MQRC_NONE).
• Stops if there is a MQI completion code of MQCC_FAILED, or when the requested number of resource
usage publications have been consumed.
Metrics published on the system topics
Metrics are categorized into classes, and sub-categorized into types. There are various metrics published
under each metric class and type.
Index
• “CPU (platform central processing units)” on page 292
• “DISK (platform persistent data stores)” on page 292
• “STATMQI (API usage statistics)” on page 293
• “STATQ (API per-queue usage statistics)” on page 295
• “STATAPP (per-application usage statistics)” on page 296
• “NHAREPLICA (per-instance Native HA statistics)” on page 296
CPU (platform central processing units)
SystemSummary (CPU performance - platform wide)
User CPU time percentage X%
System CPU time percentage X%
CPU load - one minute average X
CPU load - five minute average X
CPU load - fifteen minute average X
RAM free percentage X%
RAM total bytes XMB
QMgrSummary (CPU performance - running queue manager)
User CPU time - percentage estimate for queue manager X%
System CPU time - percentage estimate for queue manager X%
RAM total bytes - estimate for queue manager XMB
DISK (platform persistent data stores)
SystemSummary (disk usage - platform wide)
MQ errors file system - bytes in use XMB
MQ errors file system - free space X%
MQ FDC file count X
MQ trace file system - bytes in use XMB
MQ trace file system - free space X%
QMgrSummary (disk usage - running queue managers)
Queue Manager file system - bytes in use XMB
Queue Manager file system - free space X%
292 Monitoring and Performance for IBM MQ
Log (disk usage - queue manager recovery log)
Log - bytes in use X
Log - bytes max X
Log file system - bytes in use X
Log file system - bytes max X
Log - physical bytes written X
Log - logical bytes written X
Log - write latency X uSec
Log - write size X
Log - bytes occupied by extents waiting to be archived X
Log - bytes required for media recovery X
Log - bytes occupied by reusable extents X
Log - current primary space in use X%
Log - workload primary space utilization X%
STATMQI (API usage statistics)
CONNDISC (MQCONN and MQDISC)
MQCONN/MQCONNX count X
Failed MQCONN/MQCONNX count X
Concurrent connections - high water mark X
MQDISC count X
OPENCLOSE (MQOPEN and MQCLOSE)
MQOPEN count X Y/sec
Failed MQOPEN count X
MQCLOSE count X Y/sec
Failed MQCLOSE count X
INQSET (MQINQ and MQSET)
MQINQ count X
Failed MQINQ count X
MQSET count X
Failed MQSET count X
PUT (MQPUT)
Interval total MQPUT/MQPUT1 count X
Interval total MQPUT/MQPUT1 byte count X Y/sec
Non-persistent message MQPUT count X
Persistent message MQPUT count X
Failed MQPUT count X
Non-persistent message MQPUT1 count X
Persistent message MQPUT1 count X
Failed MQPUT1 count X
Put non-persistent messages - byte count X Y/sec
Put persistent messages - byte count X
MQSTAT count X
GET (MQGET)
Interval total destructive get- count X
IBM MQ Monitoring and performance 293
Interval total destructive get - byte count X Y/sec
Non-persistent message destructive get - count X
Persistent message destructive get - count X
Failed MQGET - count X
Got non-persistent messages - byte count X Y/sec
Got persistent messages - byte count X
Non-persistent message browse - count X
Persistent message browse - count X
Failed browse count X
Non-persistent message browse - byte count X Y/sec
Persistent message browse - byte count X
Expired message count X
Purged queue count X
MQCB count X
Failed MQCB count X
MQCTL count X
SYNCPOINT (commit and rollback)
Commit count X
Rollback count X
SUBSCRIBE (subscribe)
Create durable subscription count X
Alter durable subscription count X
Resume durable subscription count X
Create non-durable subscription count X
Failed create/alter/resume subscription count X
Delete durable subscription count X
Delete non-durable subscription count X
Subscription delete failure count X
MQSUBRQ count X
Failed MQSUBRQ count X
Durable subscriber - high water mark X
Durable subscriber - low water mark X
Non-durable subscriber - high water mark X
Non-durable subscriber - low water mark X
PUBLISH (publish)
Topic MQPUT/MQPUT1 interval total X
Interval total topic bytes put X Y/sec
Published to subscribers - message count X
Published to subscribers - byte count X
Non-persistent - topic MQPUT/MQPUT1 count X
Persistent - topic MQPUT/MQPUT1 count X
Failed topic MQPUT/MQPUT1 count X
294 Monitoring and Performance for IBM MQ
STATQ (API per-queue usage statistics)
GENERAL (General)
messages expired X (moved from GET for IBM MQ 9.3.0 and later CD versions)
queue purged count X (moved from GET for IBM MQ 9.3.0 and later CD versions)
average queue time X uSec (moved from GET for IBM MQ 9.3.0 and later CD versions)
Queue depth X (moved from GET for IBM MQ 9.3.0 and later CD versions)
OPENCLOSE (MQOPEN and MQCLOSE)
MQOPEN count X
MQCLOSE count X
INQSET (MQINQ and MQSET)
MQINQ count X
MQSET count X
PUT (MQPUT and MQPUT1)
MQPUT/MQPUT1 count X
MQPUT byte count X
MQPUT non-persistent message count X
MQPUT persistent message count X
rolled back MQPUT count X
MQPUT1 non-persistent message count X
MQPUT1 persistent message count X
non-persistent byte count X
persistent byte count X
lock contention X%
queue avoided puts X%
queue avoided bytes X%
GET (MQGET)
MQGET count X
MQGET byte count X
destructive MQGET non-persistent message count X
destructive MQGET persistent message count X
rolled back MQGET count X
destructive MQGET non-persistent byte count X
destructive MQGET persistent byte count X
MQGET browse non-persistent message count X
MQGET browse persistent message count X
MQGET browse non-persistent byte count X
MQGET browse persistent byte count X
messages expired X (moved to GENERAL from IBM MQ 9.3)
queue purged count X (moved to GENERAL from IBM MQ 9.3)
average queue time X uSec (moved to GENERAL from IBM MQ 9.3)
Queue depth X (moved to GENERAL from IBM MQ 9.3)
destructive MQGET fails X
destructive MQGET fails with MQRC_NO_MSG_AVAILABLE X
destructive MQGET fails with MQRC_TRUNCATED_MSG_FAILED X
IBM MQ Monitoring and performance 295
MQGET browse fails X
MQGET browse fails with MQRC_NO_MSG_AVAILABLE X
MQGET browse fails with MQRC_TRUNCATED_MSG_FAILED X
STATAPP (per-application usage statistics)
INSTANCE (instance statistics)
Instance count X
Movable instance count X
Instance shortfall count X
Instances started X
Initiated outbound instance moves X
Completed outbound instance moves X
Instances ended during reconnect X
Instances ended X
NHAREPLICA (per-instance Native HA statistics)
REPLICATION (replication statistics)
Synchronous log bytes sent X
Catch-up log bytes sent X
Log write average acknowledgement latency X uSec
Log write average acknowledgement size X
Backlog bytes X
Backlog average bytes X
Monitoring the IBM MQ Bridge to Salesforce
You can use the amqsrua sample C program to subscribe to topics and display publications for queue
managers that are used by the IBM MQ Bridge to Salesforce.
About this task
At queue manager startup, the queue manager publishes a set of messages about itself to system
topics under the metadata prefix $SYS/MQ/INFO/QMGR. The messages indicate what performance data
is available for queue managers. Administrative tools can subscribe to topics to discover which resource
usage information is available so that they can consume the resource usage data. See “Monitoring system
resource usage by using the amqsrua command” on page 288 for more information.
By default, the amqsrua program looks for statistics that are published by the queue manager under
the topic tree $SYS/MQ/INFO/QMGR. Other components or applications can use a similar mechanism
to publish under a different topic starting point. For example, the IBM MQ Bridge to Salesforce that is
available on x86-64 Linux platforms, publishes statistics under $SYS/Application/runmqsfb.
You can use the -p parameter to specify where amqsrua looks for the statistics for these other
components on both Linux and Windows.
You can run the command with just the queue manager name and interactively step through to choose the
CLASS, then TYPE and then object parameters that are available for the queue manager at each step.
If you know the CLASS, TYPE and object names for which you want to see information, you can specify
them when you run the amqsrua command.
-m
Queue manager name. The queue manager must be running. If you do not specify a queue manager
name, statistics for the default queue manager are displayed.
296 Monitoring and Performance for IBM MQ
-c
CLASS name. IBM MQ resource usage publications are associated with a class. The classes represent
the top level in the tree of metadata that describes the available resource usage information.
You can use the CHANNEL and STATUS classes only to see publications that are received for queue
managers that are used with the IBM MQ Bridge to Salesforce. You must specify the -p parameter
with the metadata prefix "\$SYS/Application/runmqsfb" when you run the amqsrua command
to see the information for the CHANNEL and STATUS classes.
STATUS
Returns information about the status of the IBM MQ Bridge to Salesforce.
CHANNEL
Returns information about Salesforce events.
-t
TYPE name. IBM MQ resource usage publications are associated with a type within a class. Each
publication includes the class and type that allows the class/type/element definitions to be found
and the resulting publications to be handled. The class/type/element descriptions are published
as metadata at queue manager startup.
The STATUS and CHANNEL classes are available when you run the amqsrua program for a queue
manager that is used with the IBM MQ Bridge to Salesforce.
For the STATUS class.
PUSHTOPIC
Salesforce push topics.
EVENTS
Salesforce platform events.
MQPE
With this option, you can see information for IBM MQ created platform events. When you select
this option, the following data is shown:
• Total number of IBM MQ created platform events that are processed in an interval (under the
STATUS/MQPE tree).
• Unique number of IBM MQ created platform events that are seen in this interval.
• Failed number of publications of IBM MQ created platform events that are seen in this interval.
For the CHANNEL class.
EVENTS
Total number of publications for a specific Salesforce push topic or platform event. You
need to specify the object name for class(CHANNEL) type(EVENTS), for example /topic/
push_topic_name or /event/platform_event_name.
-o
Object name. Resource usage publications are PCF messages that consist of a sequence of PCF
elements. The PCF elements that are published for each class/type pair are advertised in the
metadata. A leaf is stored in the tree that describes each element, thus allowing the elements to
be processed.
-p
Metadata prefix. Specify a topic tree starting point where amqsrua can look for statistics that are
published by queue managers. The default topic tree is $SYS/MQ/INFO/QMGR but other components
or applications might publish statistics under a different topic tree starting point, for example, the IBM
MQ Bridge to Salesforce publishes statistics under $SYS/Application/runmqsfb.
-n
Publication count. You can specify how many reports are returned before the command ends. The
data is published approximately every ten seconds, so if you enter a value of 50, the command returns
50 reports over 500 seconds. If you do not specify this parameter, the command runs until either an
error occurs, or the queue manager shuts down.
IBM MQ Monitoring and performance 297
-h
Usage
Procedure
1.Change to the samples directory MQ_INSTALLATION_PATH/samp/bin.
2.Issue the amqsrua command with the -p parameter to point to the topic "\$SYS/Application/
runmqsfb" where the queue manager publishes IBM MQ Bridge to Salesforce push topic and platform
event monitoring information:
./amqsrua -m QM1 -p "\$SYS/Application/runmqsfb"
STATUS : Bridge Status
CHANNEL : Salesforce Event Name
Enter Class selection
==>
3.Enter the class selection CHANNEL
==> CHANNEL
STATUS : Bridge Status
CHANNEL : Salesforce Event Name
Enter Class selection
==> CHANNEL
EVENTS : Events
Enter Type selection
==>
4.Enter the type selection EVENTS
==> EVENTS
STATUS : Bridge Status
CHANNEL : Salesforce Event Name
Enter Class selection
==> CHANNEL
EVENTS : Events
Enter Type selection
==> EVENTS
An object name is required for Class(CHANNEL) Type(EVENTS)
Enter object name
==>
5.Enter the object name, for example
==> /topic/push_topic_name
STATUS : Bridge Status
CHANNEL : Salesforce Event Name
Enter Class selection
==> CHANNEL
EVENTS : Events
Enter Type selection