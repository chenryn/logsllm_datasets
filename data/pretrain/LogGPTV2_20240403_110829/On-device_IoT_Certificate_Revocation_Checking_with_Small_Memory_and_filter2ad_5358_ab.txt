∆-msg size
per update
∆-msg size
per day
Push
model
CA
compat.
Sync.
latency
≫ 250 ms
-
✕
✕
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
✕
(cid:88)
2 RELATED WORK
Existing approaches for checking CR status are mainly based on
either remote or local queries. A typical remote querying protocol
is the Online Certificate Status Protocol (OCSP) [11, 22]. In OCSP,
an authorized OCSP server returns the signed revocation status
for every single certificate validation request from the client. An
important weakness of this on-demand remote checking protocol
is that the OCSP clients suffer from privacy leakage of their visiting
history and trace pattern to the OCSP servers, as the server knows
the exact time when one device builds an SSL session with another.
In addition, it requires the devices to have access to the OCSP
servers when validating the certificate and introduces additional
network latency for each query.
On-device CR checking preserves user privacy by allowing them
to check CR status locally through a compact data structure model,
such as CRLSets[18], OneCRL[13], CRLite[19] and CRV[29], which
is periodically synchronized from the CAs or device management
servers. These methods are also known as the push-based models.
For these methods, the protocol designers need to consider the
on-device memory cost and query/updating efficiency of the data
oracle, as the CRLs are usually large. For example, CRLSets[18]
and OneCRL[13], which have been used in web browsers including
Chrome and Firefox, trade checking accuracy for efficiency by
maintaining a subset of the CRLs.
Recent methods of SSL/TLS CR checking, such as CRLite [19]
and Let’s Revoke [29], have been designed to achieve both query or
memory efficiency and accuracy on the client-side. The key idea of
the two methods is utilizing an efficient set-query data structure as
a compact summary of the large CRLs. Our proposed TinyCR also
adopts a similar design framework to enable efficient on-device
error-free CR checking. However, existing methods do not meet the
requirements of IoT CR checking as listed in Sec. 1. For example,
CRLite [19] uses a data structure called filter cascade to check CR
status with small memory costs. The cost of CRLite delta message
updated is high as any revocation will cause a reconstruction of the
filter cascade. Hence CRLite is designed for 1-4 updates per day and
could have more with significantly higher bandwidth cost. The low
updating frequency yields a longer unprotected time, during which
the attackers can abuse the revoked certificates in IoT applications.
Let’s Revoke [29] resolves the high bandwidth cost of CRLite, but
it requires a new Revocation Numbers (RN) extension filed in the
certificate. CAs are required to issue the RNs and maintain/update
the revocation checking structure. Thus, the protocol cannot be
supported by the existing X.509 certificates and the current CA’s
workflow to revoke a certificate. Since the RN filed is generated
based on how many certificates have been issued by this CA for a
given expiration date, it also leaks additional behavior information
of the CAs. For example, anyone who sees a few certificates may
infer how many certificates issued by this CA will expire on a
particular date. Let’s Revoke is also updated daily.
A comparison of CR checking methods is shown in Table 1,
where the results of Let’s Revoke [29], CRL [15] and OCSP [22]
are from the original papers or a measurement paper [21]. We
mainly concern with the on-device memory cost, query efficiency,
updating message size, extra synchronization latency (excluding
network latency), whether the model leaks user’s accessing history
and whether the model is back-compatible with the existing X.509
certificates. Note that all the methods are required to provide zero
error assuming the on-device data models are synchronized with the
latest CRLs provided by the CAs. However, for push-based methods,
when the local data models are not consistent with the newest CRLs,
revoked certificates may still be accepted by the checking model.
Of the compared methods in the table, only Othello [37] and our
proposed TinyCR can support real-time synchronization of the
on-device data model, whereas Othello requires significantly more
on-device memory than TinyCR in practice.
In addition, other methods such as OCSP Stapling [11, 14], Revo-
cation in the Middle (RITM) [31] and Certificate Revocation Guard
(CRG) [16]offload the CR checking process to the server (the re-
sponder of the connection) or a middle-box intercepting TLS traffic.
However, the responder-based checking is not a scalable solution
when the responder is another IoT device, due to its high cost on
the device and the CA side. In addition, if the accessed server fail to
provide a valid OCSP Staple in the handshake, the connect cannot
be established or can never be secure.
3 SYSTEM AND THREAT MODELS
3.1 System Model
Secure communication in an IoT network requires that the devices
can authenticate each other, which is nowadays achieved by dig-
ital certificates based on the Public Key Infrastructure (PKI). The
TinyCR system enables the IoT devices to maintain a compact rep-
resentation of the CRL with 100% query accuracy through a data
structure named Dynamic Asymmetric Set Separator (DASS). Fig. 1
illustrates the system model of TinyCR. The CR checking protocol
is designed on top of the current IoT/Mobile device management
Session 4B: Wireless, Mobile, and IoT CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea11201. The IDM server and the CAs are trusted and they communicate
via a secure channel with integrity. Each device also maintains a
channel from/to the IDM server with integrity.
2. The attacker can acquire a set of time- and signature-valid
certificates. But this behavior could be detected by the CA and those
certificates are revoked.
3. The attacker can obtain all information of the shared DASS,
but is not able to tamper it.
4. The size of the certificate universe in IoT is large. Note that the
current number of web server certificates is on a scale of 100 million
[19, 29]. It is a reasonable estimate that the future IoT devices should
be much more than the number of web servers.
5. The number of revoked certificates is smaller than that of
legitimate ones in an IoT network by at least an order of magnitude.
Otherwise, the CA who issues many revoked certificates will not
be trusted. This assumption is validated by measurements [34].
6. IoT devices have limited memory and computing resources,
while the IDM server and attackers can be powerful. The IDM
server knows all time- and signature-valid certificates.
7. We do not consider deny-of-service attacks.
4 DASS DESIGN
CR checking can be modeled as a binary set query problem.
Definition 4.1 (Binary set query problem). Let U be a finite set
of keys that can be divided into two disjoint subsets P and N , and
U = P ∪ N . The binary set query problem is that given k ∈ U ,
determine if k ∈ P or k ∈ N .
All certificates that are checked for CR status are both time-valid
and signature-valid, otherwise they will be rejected in expiration
and signature checks. The IDM server knows all time- and signature-
valid certificates (U ) and they can be classified into to two finite
sets: one for the legitimate certificates (‘negatives’ N ) and the other
for the revoked ones (‘positives’ P). Hence the CR checking result
can be either 0 (not revoked) or 1 (revoked).
TinyCR achieves binary set queries by a compact data structure
called DASS. We design DASS using an innovative combination of
existing algorithmic tools. We first briefly introduce these tools.
Filter tools. A filter data structure is used for approximate mem-
bership queries. The most well-known tools are the Bloom filters
[8] and Cuckoo filters [12]. For a given set S of keys, a filter F
answers each query of key k and returns F .Query(k) = 1 if k ∈ S.
However, filters introduce a small number of false positives: for a
key k (cid:60) S, the filter returns 0 in most cases but may also return 1.
The space cost of a filter is proportional to |S|.
Using filters cannot meet the requirements of IoT CR. If
we set N as S, then a revoked certificate may be determined as le-
gitimate. If we set P as S, a legitimate certificate may be determined
as revoked, which also brings problems. CRLite [19] uses a filter
cascade to eliminate false positives. However, the cost to update a
filter cascade is high as shown in Sec. 6.
Existing set query tools are not ideal. A set query tool can
do exactly what we want for binary set queries of CR checking.
It returns 1 if k ∈ P and 0 if k ∈ N for any k ∈ P ∪ N . Recent
compact set query tools include Bloomier filters [9, 10], Othello
hashing [37], SetSep[40], and Coloring Embedder [33]. The space
cost of a set query data structure is proportional to |U | = |P| + |N |.
Figure 1: System model of TinyCR
system (MDM) [2], where an IoT device management (IDM) server
requests the certificates from CAs for users and delivers the cer-
tificates (usually through a patch file for installation) to the end
devices when the devices are registered to the service. Note that
the CA could be the world-wide issuers or the PKI service that is
managed by the service provider (such as Symantec Managed PKI
Service [2]). The CA issues new certificates at the request of IDM
and actively sends updated CRLs to the IDM server when a new
revoke happens (Operation 1). The IDM server constructs and up-
dates DASS based on the global certificate database and the newest
CRLs (Operation 2). For each device, the IDM server will install
DASS on it (Operation 3) when the device is enrolled to the service.
The DASS installation process could be conducted together with
the certificate installation on the device. Whenever the CRLs have
changed, the IDM server would send update messages if necessary
in a pushing way (Operation 4). In the system, each device can
check the CR status of any certificate completely based on DASS
and perform local updates to DASS (Operation 5). The model fits
or can be easily extended to most IoT management systems.
We define two types of latencies in the whole process: 1) syn-
chronization latency is defined as from the time of the CA revok-
ing a certificate to that of a device being able to find this revocation
event from its local state; 2) query latency is defined as the time
used to get the CR status on a device. TinyCR aims to minimize
these two latencies. There is another type: revoking latency, de-
fined as from the time a certificate being hacked to that of the CA
revoking the certificate, which is out of scope of this work.
3.2 Threat Model
Since the certificates issued by the CA might be revoked, an at-
tacker can effectively abuse the revoked certificates. The security
vulnerability in this process is apparent: the revoked certificate
are still valid if a device only verifies the expiration dates and CA
signatures (called time- and signature-valid). Hence the on-device
maintenance of all revoked certificates is necessary. We are mainly
concerned about the attacker who can obtain a set of time- and
signature- valid but revoked certificates and the corresponding pri-
vate keys, such that the attacker can masquerade as legitimate users
in the IoT to perform Man-in-the-Middle (MITM) attacks during
TLS setups or tamper with the sensing data. We summarize the
threat model and assumptions in this paper:
Session 4B: Wireless, Mobile, and IoT CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1121Figure 2: DASS Construction
Figure 3: DASS Query
However these methods still introduce non-trivial memory cost for
CR checking because |N | is usually extremely large.
The key reason that DASS can further optimize the memory cost
of existing set query tools is that we utilize the important obser-
vation: practical measurements show that the revoked certificates
only contribute to 1% of all certificates [19, 34], hence |N | ≫ |P|.
DASS is particularly designed based on this fact.
Recall P is the set of revoked certificates and N is the set of
legitimate certificates, and |N | ≫ |P|. We construct DASS as shown
in Fig. 2. DASS has two levels. The first level is a filter implemented
by a Cuckoo filter [12] with S = P. Hence we create a Cuckoo filter
F based on set P and insert all keys in P to it (Step 1) – each key is
a certificate and is represented as a small number of bits in F. In
Step 2, we test set N against the filter F. Most certificates of N will
be tested ‘negative’ and they are true negatives (set T N ). However
a few certificates of N are tested ‘positive’ due to the fundamental
limitation of a filter, and they are false positives (set F P). In Step 3,
we construct an Othello data structure O for binary set classification
and use F P as set 0 and P as set 1. Note both F P and P are very
small sets compared N , hence DASS saves the majority memory
cost compared to simply using Othello.
The query of DASS about a certificate k is executed as shown
in Fig. 3. In Step 1, k is tested by the filter F. If F .Query(k) = 0, we
must have k ∈ N and k is legitimate. If F .Query(k) = 1 then k is
either revoked or false positive. Then it is tested by Othello O. If
O.Query(k) = 0, k is legitimate. If O.Query(k) = 1, k is revoked.
Compared to CRLite [19], DASS can be easily updated for a new
certificate insertion or certificate revocation. Both the update time
and message cost is very small. We will show this in later sections.
Tool Choices in DASS. As discussed in Sec.1, for CR checking,
we majorly concern with the memory/computing efficiency for
query and updating cost when the CRL changes. Although most of
the state-of-the-art filter tools and set query tools mentioned above
use similar resources for lookups when appropriately configured,
their updating cost varies significantly. For example, Cuckoo Filter
can support key deletion at a low cost, whereas standard Bloom
Filter has to be rebuilt to remove a key from the membership set. We
choose to use a (2, 4)-Cuckoo Filter for the first filter layer, namely,
each item has two candidate bucket positions and each bucket has 4
available slots. The setting of two candidate positions is optimal for
efficient query and updating, as the minimal numbers of hashing
and memory read operations are required. Four slots per bucket
Figure 4: Othello for binary set query. The value of the key
is stored by the edge between the two hash positions.
j
(cid:16)
j
b
can yields the minimal or close to minimal memory cost when the
expected false positive rate ε is between 0.001% to 1% [12].
Among the above set query tools, Othello[37] is a dynamic data
structure that supports new key-value pair insertion and value-
flipping of existing keys at O(1) cost, while the other methods are