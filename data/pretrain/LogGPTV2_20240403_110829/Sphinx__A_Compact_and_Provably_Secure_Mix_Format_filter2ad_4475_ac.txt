ﬁnally sends the right message to the right destination.
4.2. Integrity
The second requirement of [5] is that an adversary
cannot construct a mix message that will travel through
a path of more than N honest nodes, for some ﬁxed
bound N , except with negligible probability. We show
that Sphinx satisﬁes this requirement, with N = r + 1,
even if we allow the adversary to know all private keys
xn in the system. (Note that the adversary knows the
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:19:04 UTC from IEEE Xplore.  Restrictions apply. 
nodes’ private keys, but the nodes still behave honestly,
according to the protocol.) This last adversarial power
is what necessitates modelling μ and ρ as something
stronger than the usual PRF and PRG notions. Again,
for the purposes of this section, we treat them as
random oracles.
Note that although the Sphinx protocol speciﬁes that
no more than r node identiﬁers get embedded into a
Sphinx header, it is in fact possible to embed up to r+1
such identiﬁers, as long as the embedded Δ = ∗ and is
very short (less than κ bits). This means an adversary
can indeed construct a mix message that will have path
length r + 1. This is not a problem for our proof, since
the proof only requires that there is some upper bound
on the path length. We show that an adversary cannot
construct a mix message that results in a path length
greater than N = r + 1, and that is sufﬁcient.
We assume the adversary does signiﬁcantly less than
2κ work, and show that the probability of producing a
requisite mix message is negligible.
Let a mix message constructed by the adversary
be ((α0, β0, γ0), δ0), and sent to node n0. That node
processes it to produce ((α1, β1, γ1), δ1), which is sent
to n1, etc.
Node ni will successfully process a message and
send it on to the next node if and only if the following
all hold:
• ni has never before (during the life of its current
private key xni) processed a mix message with the
same αi (since the map αi (cid:13)→ α
is bijective
and hτ is collision-resistant)
• γi = μ
• there is a preﬁx of Bi = {βi(cid:10)02κ}⊕ ρ(hρ(α
))
which is in N ∪ D; this will be ni+1 if it is in
N .
(cid:8)
xni
α
i
(cid:8)
hμ
xni
i
xni
i
, βi
(cid:9)
(cid:9)
(cid:10)
(cid:3)
xni
i
xni
i
))[2κ..(2r+1)κ−1]
(cid:3)
))[(2r+1)κ..(2r+3)κ−1]
If these hold, then the ﬁrst κ bits of Bi will be ni+1
itself, the next κ bits will be γi+1, and the remaining
(cid:2)
(2r + 1)κ bits will be βi+1. Note that βi+1 =
βi[2κ..(2r+1)κ−1] ⊕ ρ(hρ(α
(cid:2)
ρ(hρ(α
. In particular, the
leftmost 2κ bits of βi are used to construct ni+1 and
the MAC γi+1; the remaining (2r − 1)κ bits of βi are
shifted left to form (after decryption by XORing with
a substring of an output of ρ) the leftmost (2r − 1)κ
bits of βi+1; the rightmost 2κ bits of βi+1 are simply
a substring of an output of ρ.
following
Let
f0, f1, . . . , f2κ−1 be a family of
random oracles
with range {0, 1}κ. Let ˆρ and ρ0 be other random
oracles with range {0, 1}κ. (The domains do not
matter.) The problem is to ﬁnd x and y such that
ˆρ(x) = fρ0(x)(y). We claim that an adversary has
problem P:
Consider
the
only a negligible chance of solving problem P if he
performs signiﬁcantly less than 2κ work.
Proof: For each i ∈ {0, 1}m, let ri be the number of
times the adversary called ρ0 and had it output i, and
let Fi be the number of times he called fi. (We can
assume the adversary never calls ˆρ on an input unless
(cid:10)
he also calls ρ0 on that input.) Then the adversary has
i riFi chances to solve problem P, and each chance
is successful with probability 2−κ. Let A be the total
number of calls the adversary makes to ρ0, and let
∗
of the A
i
i(ri+Fi)
times. To maximize
constant, the adversary should only query fi∗, and not
any of the other fi. Suppose he does so B times. Then
his probability of success is bounded above by A∗·B
2κ ,
having done A + B work.
∗
(cid:10)
be the most common output, occurring A
i riFi while holding
(cid:10)
If A = B ≈ 2κ(1− 1
w )
κ
for some w, then we expect to
ﬁnd w-collisions in the A outputs of ρ0, but not w+1-
∗ = w. Then the success
collisions [17], so we expect A
probability is bounded above by A∗·B
w . If
A = B ≈ 2m, then w = κ
κ−m , and this probability
bound is
κ−m · 2m−κ, as required.
2κ = w · 2− κ
Note the difference between this problem and a
standard collision problem (such as ˆρ(x) = f(y)),
which would have success probability 22m−κ for doing
2m work, and to a standard search problem (such as
ˆρ(x) = f(x, y)), which would have success probability
2m−κ for doing 2m work.
(cid:2)
Now suppose an adversary can construct a mix mes-
sage ((α0, β0, γ0), δ0) which is successfully processed
by mix nodes n0, n1, . . . , nN , whose private keys xi
are known to the adversary. We will show that this
means that the adversary can solve the above problem
P.
is,
N ), βN ).
xN
Given such a message,
the adversary can pro-
in the manner of each mix node in turn,
cess it
to generate ((α1, β1, γ1), δ1), ((α2, β2, γ2), δ2),
. . . ,
((αN , βN , γN ), δN ). Now since node nN successfully
processes this last message, it must be the case that
γN = μ(hμ(α
For notational convenience, for 0 ≤ i ≤ r, de-
ﬁne ρi(x) to be ρ(x)[(2(r−i)+2)κ..(2r+3)κ−1](cid:10)02(r−i)κ;
the last (2i + 1)κ bits of ρ(x), followed
that
by 2(r − i)κ bits of zeros. Also deﬁne ˆρi(x) to be
ρ(x)[(2(r−i)+1)κ..(2(r−i)+2)κ−1]; that is, the block of κ
bits of ρ(x) immediately preceding the bits selected
for ρi(x). Finally, for 1 ≤ i ≤ r + 1, deﬁne ˜ρi(x) to
be ρ(x)[(2i−1)κ..(2i+1)κ−1].
A careful, but straightforward, calculation shows
that γN = a0 ⊕ a1 ⊕ ··· ⊕ aN−1, where aj =
ˆρj(hρ(α
Similarly, βN = b0 ⊕ b1 ⊕ ··· ⊕ bN−1, where bj =
xj
j )).
ρj(hρ(α
xj
j )).
276
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:19:04 UTC from IEEE Xplore.  Restrictions apply. 
(p
cause
(cid:4)
1, k
(cid:4)
0, k
. We
consider
the
(cid:7)(cid:7)
(cid:4)
N−1, k
(cid:4)
2, . . . , k
i=1 ρi(ki)
(cid:6)(cid:11)N−1
function
Now
(cid:6)
(cid:6)(cid:11)N−1
=
g(p0, k1, k2, . . . , kN−1, kμ)
kμ, (p0(cid:10)02rκ) ⊕
claim
μ
the adversary who does less than 2κ work
that
cannot distinguish this g from a truly random
function which takes the same inputs. Why is this?
Since μ is a random oracle,
the only way the
adversary could distinguish the situations is if it could
generate a pair of inputs (p0, k1, k2, . . . , kN−1, kμ)
(cid:4)
μ) which
and
the
corresponding arguments of the call to μ to be equal.
(cid:4)
(cid:6)(cid:11)N−1
(cid:7)
Clearly we must have kμ = k
μ.
Let B = (p0(cid:10)02rκ) ⊕
(cid:4) =
i=1 ρi(ki)
(cid:7)
0(cid:10)02rκ) ⊕
(cid:4)
(cid:4)
(p
. Note that the last 2κ
i)
i=1 ρi(k
bits of B are just ˜ρN−1(kN−1),
the last 2κ bits.
then ˜ρN−1(kN−1) =
of ρ(kN−1).
(cid:4)
˜ρN−1(k
N−1). Since the adversary has done less than
2κ work, he has only a negligible chance of ﬁnding
kN−1 (cid:14)= k
(cid:4)
N−1 with the last 2κ bits of ρ(kN−1) and
(cid:4)
ρ(k
N−1) equal. Thus, except with negligible probabil-
ity, kN−1 = k
Now consider the block of 2κ bits before the ﬁnal
block of 2κ bits of B. This is just ˜ρN−2(kN−1) ⊕
(cid:4)
˜ρN−1(kN−2). So if B = B
N−1
as above, then we must have that ˜ρN−1(kN−2) =
(cid:4)
˜ρN−1(k
N−2. Continu-
ing in this way, we get that (k1, k2, . . . , kN−1, kμ) =
(cid:4)
(cid:4)
(cid:4)
(k
μ) except with negligible proba-
1, k
2, . . . , k
bility.
(cid:4)
N−2), and as above, kN−2 = k
, and kN−1 = k
If B = B
(cid:4)
N−1, k
(cid:4)
N−1.
and B
(cid:4)
(cid:4)
,
(k
(cid:4)
2, . . . , k
Note that this logic would not have extended to k0,
had it been included, since only κ, and not 2κ, bits of
ρ(hρ(α
0 )) are included in βN .
x0
and (k1, k2, . . . , kN−1, kμ) =
(cid:4)
Finally, if B = B
(cid:4)
(cid:4)
(cid:4)
μ), then clearly p0 = p
N−1, k
1, k
Let k = (k1, . . . , kN−1, kμ). Then we just showed
that the function g(p0, k) is indistinguishable from a
true random oracle with less than 2κ work. Now let
fp0(k) = g(p0, k)⊕ ˆρ1(k1)⊕···⊕ ˆρN−1(kN−1). Since
the ˆρi do not call the random oracle μ, this is also
indistinguishable from a true random oracle.
(cid:4)
0.
But
if the adversary constructed a mix message
which was successfully processed by n0, . . . , nN ,
then he has a solution to ˆρ0(k0) = fρ(cid:3)
0(k0)(k),
(cid:4)
0(x) = ρ(x)[(2r+2)κ..(2r+3)κ−1]; namely, ki =
where ρ
hρ(α
N ). But this is just problem
i ) and kμ = hμ(α
xi
xN
P.
Therefore, since he has only a negligible probability
of ﬁnding a solution to problem P with considerably
less than 2κ work, he also has only a negligible
chance of constructing a mix message which will be
successfully processed by N + 1 nodes, and the result
277
is proven.
It
that N > r. The key is that
is instructive to note where this proof relies
for
(cid:7)
the computation of γi contains bits from
⊕
xj
j ))
j=0 ˆρj+1(hρ(α
[Compare this to γN , above,
xj
j )), with no compo-
j=0 ˆρj(hρ(α
on the fact
i ≤ r,
β0. For example, γr =
(cid:11)N−1
β0[(2r+1)κ..(2r+2)κ].
which equalled
nent from β0.]
(cid:6)(cid:11)r−1