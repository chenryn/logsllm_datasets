图8-1
换言之，类C和D间接派生于A。在这种情况下，在
A、B、C或D之间唯一合法的自定义类型强制转换就是类
C和D之间的转换，因为这些类并没有互相派生。对应的
代码如下所示（假定希望类型强制转换是显式的，这是在
用户定义的类之间定义类型强制转换的通常情况）：
    public static explicit operator D(C value)
    {
      //...
    }
    public static explicit operator C(D value)
    {
      //...
    }
对于这些类型强制转换，可以选择放置定义的地方——在C的类定义内部，或者在D
的类定义内部，但不能在其他地方定义。C#要求把类型强制转换的定义放在源类（或结
构）或目标类（或结构）的内部。这一要求的副作用是不能定义两个类之间的类型强制转
换，除非至少可以编辑其中一个类的源代码。这是因为，这样可以防止第三方把类型强制
转换引入类中。
一旦在一个类的内部定义了类型强制转换，就不能在另一个类中定义相同的类型强制
转换。显然，对于每一种转换只能有一种类型强制转换，否则编译器就不知道该选择哪个
类型强制转换了。
2．基类和派生类之间的类型强制转换
要了解这些类型强制转换是如何工作的，首先看看源和目标数据类型都是引用类型的
情况。考虑两个类MyBase和MyDerived，其中MyDerived直接或间接派生自MyBase。
首先是从MyDerived到MyBase的转换，代码如下（假定提供了构造函数）：
    MyDerived derivedObject = new MyDerived();
    MyBase baseCopy = derivedObject;
在本例中，是从MyDerived隐式地强制转换为MyBase。这是可行的，因为对类型
MyBase的任何引用都可以引用MyBase类的对象或派生自MyBase的对象。在OO编程中，
派生类的实例实际上是基类的实例，但加入了一些额外的信息。在基类上定义的所有函数
和字段也都在派生类上得到定义。
下面看看另一种方式，编写如下的代码：
    MyBase derivedObject = new MyDerived();
    MyBase baseObject = new MyBase();
    MyDerived derivedCopy1 = (MyDerived) derivedObject;  // OK
    MyDerived derivedCopy2 = (MyDerived) baseObject;     // Throws exception
上面的代码都是合法的C#代码（从语法的角度来看是合法的），它说明了把基类强
制转换为派生类。但是，在执行时最后一条语句会抛出一个异常。在进行类型强制转换
时，会检查被引用的对象。因为基类引用原则上可以引用一个派生类的实例，所以这个对
象可能是要强制转换的派生类的一个实例。如果是这样，强制转换就会成功，派生的引用
设置为引用这个对象。但如果该对象不是派生类（或者派生于这个类的其他类）的一个实
例，强制转换就会失败，并抛出一个异常。
注意，编译器已经提供了基类和派生类之间的强制转换，这种转换实际上并没有对讨
论的对象进行任何数据转换。如果要进行的转换是合法的，它们也仅是把新引用设置为对
对象的引用。这些强制转换在本质上与用户定义的强制转换不同。例如，在前面的
SimpleCurrency示例中，我们定义了Currency结构和float数之间的强制转换。在float型到
Currency型的强制转换中，实际上实例化了一个新的Currency结构，并用要求的值初始化
它。在基类和派生类之间的预定义强制转换则不是这样。如果实际上要把MyBase实例转
换为真实的MyDerived对象，该对象的值根据MyBase实例的内容来确定，就不能使用类型
强制转换语法。最合适的选项通常是定义一个派生类的构造函数，它以基类的实例作为参
数，让这个构造函数完成相关的初始化：
    class DerivedClass: BaseClass
    {
      public DerivedClass(BaseClass base)
      {
        // initialize object from the Base instance
      }
      // etc.
3．装箱和拆箱类型强制转换
前面主要讨论了基类和派生类之间的类型强制转换，其中，基类和派生类都是引用类
型。类似的原则也适用于强制转换值类型，尽管在转换值类型时，不可能仅仅复制引用，
还必须复制一些数据。
当然，不能从结构或基本值类型中派生。所以基本结构和派生结构之间的强制转换总
是基本类型或结构与System.Object之间的转换（理论上可以在结构和System.ValueType之
间进行强制转换，但一般很少这么做）。
从结构（或基本类型）到object的强制转换总是一种隐式的强制转换，因为这种强制
转换是从派生类型到基本类型的转换，即第2章简要介绍的装箱过程。例如，使用
Currency结构：
    var balance = new Currency(40,0);
    object baseCopy = balance;
在执行上述隐式的强制转换时，balance的内容被复制到堆上，放在一个装箱的对象
中，并且baseCopy对象引用被设置为该对象。在后台实际发生的情况是：在最初定义
Currency结构时，.NET 
Framework隐式地提供另一个（隐藏的）类，即装箱的Currency
类，它包含与Currency结构相同的所有字段，但它是一个引用类型，存储在堆上。无论定
义的这个值类型是一个结构，还是一个枚举，定义它时都存在类似的装箱引用类型，对应
于所有的基本值类型，如int、double和uint等。不能也不必在源代码中直接通过编程访问
某些装箱类，但在把一个值类型强制转换为object型时，它们是在后台工作的对象。在隐
式地把Currency转换为object时，会实例化一个装箱的Currency实例，并用Currency结构中
的所有数据进行初始化。在上面的代码中，baseCopy对象引用的就是这个已装箱的
Currency实例。通过这种方式，就可以实现从派生类型到基本类型的强制转换，并且值类
型的语法与引用类型的语法一样。
强制转换的另一种方式称为拆箱。与在基本引用类型和派生引用类型之间的强制转换
一样，这是一种显式的强制转换，因为如果要强制转换的对象不是正确的类型，就会抛出
一个异常：
    object derivedObject = new Currency(40,0);
    object baseObject = new object();
    Currency derivedCopy1 = (Currency)derivedObject;  // OK
    Currency derivedCopy2 = (Currency)baseObject;     // Exception thrown
上述代码的工作方式与前面关于引用类型的代码一样。把derivedObject强制转换为
Currency会成功执行，因为derivedObject实际上引用的是装箱Currency实例——强制转换
的过程是把已装箱的Currency对象的字段复制到一个新的Currency结构中。第二种强制转
换会失败，因为baseObject没有引用已装箱的Currency对象。
在使用装箱和拆箱时，这两个过程都把数据复制到新装箱或拆箱的对象上，理解这一
点非常重要。这样，对装箱对象的操作就不会影响原始值类型的内容。
8.7.2 多重类型强制转换
在定义类型强制转换时必须考虑的一个问题是，如果在进行要求的数据类型转换时没
有可用的直接强制转换方式，C#编译器就会寻找一种转换方式，把几种强制转换合并起
来。例如，在Currency结构中，假定编译器遇到下面几行代码：
    var balance = new Currency(10,50);
    long amount = (long)balance;
    double amountD = balance;
首先初始化一个Currency实例，再把它转换为long型。问题是没有定义这样的强制转
换。但是，这段代码仍可以编译成功。因为编译器知道我们已经定义一个从Currency到
float的隐式强制转换，而且它知道如何显式地从float强制转换为long。所以它会把这行代
码编译为中间语言（IL）代码，IL代码首先把balance转换为float型，再把结果转换为long
型。把balance转换为double型时，在上述代码的最后一行中也执行了同样的操作。因为从
Currency到float的强制转换和从float到double的预定义强制转换都是隐式的，所以可以在
编写代码时把这种转换当作一种隐式转换。如果要显式地指定强制转换过程，则可以编写
如下代码：
    var balance = new Currency(10,50);
    long amount = (long)(float)balance;
    double amountD = (double)(float)balance;
但是在大多数情况下，这会使代码变得比较复杂，因此是不必要的。相比之下，下面
的代码会产生一个编译错误：
    var balance = new Currency(10,50);
    long amount = balance;
原因是编译器可以找到的最佳匹配转换仍是首先转换为float型，再转换为long型。但
需要显式地指定从float型到long型的转换。
并非所有这些转换都会带来太多的麻烦。毕竟转换的规则非常直观，主要是为了防止
在开发人员不知情的情况下丢失数据。但是，在定义类型强制转换时如果不小心，编译器
就有可能指定一条导致不期望结果的路径。例如，假定编写Currency结构的其他小组成员
要把一个uint数据转换为Currency型，其中该uint数据中包含了美分的总数（是美分而非美
元，因为我们不希望丢失美元的小数部分）。为此应编写如下代码来实现强制转换：
    // Do not do this!
    public static implicit operator Currency (uint value) =>
      new Currency(value/100u, (ushort)(value%100));
注意，在这段代码中，第一个100后面的u可以确保把value/100u解释为一个uint值。如
果写成value/100，编译器就会把它解释为一个int型的值，而不是uint型的值。
在这段代码中清楚地标注了“Do not do it（不要这么做）”。下面说明其原因。看看下
面的代码段，它把包含值350的一个uint数据转换为一个Currency，再转换回uint型。那么
在执行完这段代码后，bal2中又将包含什么？
    uint bal = 350;
    Currency balance = bal;
    uint bal2 = (uint)balance;
答案不是350，而是3！而且这是符合逻辑的。我们把350隐式地转换为Currency，得
到的结果是balance.Dollars=3和balance.Cents=50。然后编译器进行通常的操作，为转换回
uint型指定最佳路径。balance最终会被隐式地转换为float型（其值为3.5），然后显式地转
换为uint型，其值为3。
当然，在其他示例中，转换为另一种数据类型后，再转换回来有时会丢失数据。例
如，把包含5.8的float数值转换为int数值，再转换回float数值，会丢失数字中的小数部分，
得到5，但原则上，丢失数字的小数部分和一个整数被大于100的数整除的情况略有区别。
Currency现在成为一种相当危险的类，它会对整数进行一些奇怪的操作。
问题是，在转换过程中如何解释整数存在冲突。从Currency型到float型的强制转换会
把整数1解释为1美元，但从uint型到Currency型的强制转换会把这个整数解释为1美分，这
是很糟糕的一个示例。如果希望类易于使用，就应确保所有的强制转换都按一种互相兼容
的方式执行，即这些转换直观上应得到相同的结果。在本例中，显然要重新编写从uint型
到Currency型的强制转换，把整数值1解释为1美元：
    public static implicit operator Currency (uint value) =>
      new Currency(value, 0);
偶尔你也会觉得这种新的转换方式可能根本不必要。但实际上，这种转换方式可能非
常有用。没有这种强制转换，编译器在执行从uint型到Currency型的转换时，就只能通过
float型来进行。此时直接转换的效率要高得多，所以进行这种额外的强制转换会提高性
能，但需要确保它的结果与通过float型进行转换得到的结果相同。在其他情况下，也可以
为不同的预定义数据类型分别定义强制转换，让更多的转换隐式地执行，而不是显式地执
行，但本例不是这样。
测试这种强制转换是否兼容，应确定无论使用什么转换路径，它是否都能得到相同的
结果（而不是像在从float型到int型的转换过程中那样丢失数据）。Currency类就是一个很
好的示例。看看下面的代码：
    var balance = new Currency(50, 35);
    ulong bal = (ulong) balance;
目前，编译器只能采用一种方式来完成这个转换：把Currency型隐式地转换为float
型，再显式地转换为ulong型。从float型到ulong型的转换需要显式转换，本例就显式指定
了这个转换，所以编译是成功的。
但假定要添加另一种强制转换，从Currency型隐式地转换为uint型，就需要修改
Currency结构，添加从uint型到Currency型的强制转换和从Currency型到uint型的强制转
换。这段代码可以用作SimpleCurrency2示例（代码文件CastingSample/Currency.cs）：
    public static implicit operator Currency (uint value) =>
        new Currency(value, 0);
    public static implicit operator uint (Currency value) =>
        value.Dollars;
现在，编译器从Currency型转换到ulong型可以使用另一条路径：先从Currency型隐式
地转换为uint型，再隐式地转换为ulong型。该采用哪条路径？C#有一些严格的规则（本书
不详细讨论这些规则，有兴趣的读者可参阅MSDN文档），告诉编译器如何确定哪条是最
佳路径。但最好自己设计类型强制转换，让所有的转换路径都得到相同的结果（但没有精
确度的损失），此时编译器选择哪条路径就不重要了（在本例中，编译器会选择
Currency→uint→ulong路径，而不是Currency→float→ulong路径）。
为了测试SimpleCurrency2示例，给SimpleCurrency测试程序中的Main（）方法添加如
下代码（代码文件CastingSample/Program.cs）：
    static void Main()
    {
      try
      {
        var balance = new Currency(50,35);
        WriteLine(balance);
        WriteLine($"balance is {balance}");
        uint balance3 = (uint) balance;
        WriteLine($"Converting to uint gives {balance3}");
      }
      catch (Exception ex)
      {
        WriteLine($"Exception occurred: {e.Message}");
      }
    }
运行这个示例，得到如下所示的结果：
    50
    balance is $50.35
    Converting to uint gives 50
这个结果显示了到uint型的转换是成功的，但在转换过程中丢失了Currency的美分部
分（小数部分）。把负的float类型强制转换为Currency型也产生了预料中的溢出异常，因
为float型到Currency型的强制转换本身定义了一个checked环境。
但是，这个输出结果也说明了进行强制转换时最后一个要注意的潜在问题：结果的第
一行没有正确显示余额，显示了50，而不是$50.35。
这是为什么？问题是在把类型强制转换和方法重载合并起来时，会出现另一个不希望
的错误源。
WriteLine（）语句使用格式字符串隐式地调用Currency.ToString（）方法，以确保
Currency显示为一个字符串。
但是，第1行的Console.WriteLine（）方法只把原始Currency结构传递给
Console.WriteLine（）。目前Console.WriteLine（）有许多重载版本，但它们的参数都不
是Currency结构。所以编译器会到处搜索，看看它能把Currency强制转换为什么类型，以
便与Console.WriteLine（）的一个重载方法匹配。如上所示，Console.WriteLine（）的一
个重载方法可以快速而高效地显示uint型，且其参数是一个uint值。因此应把Currency隐式
地强制转换为uint型。
实际上，Console.WriteLine（）有另一个重载方法，它的参数是一个double值，结果
显示该double的值。如果仔细看看第一个SimpleCurrency示例的结果，就会发现该结果的
第1行就是使用这个重载方法把Currency显示为double型。在这个示例中，没有直接把
Currency强制转换为uint型，所以编译器选择Currency→float→double作为可用于
Console.WriteLine（）重载方法的首选强制转换方式。但在SimpleCurrency2中可以直接强
制转换为uint型，所以编译器会选择该路径。
结论是：如果方法调用带有多个重载方法，并要给该方法传送参数，而该参数的数据
类型不匹配任何重载方法，就可以迫使编译器确定使用哪些强制转换方式进行数据转换，
从而决定使用哪个重载方法（并进行相应的数据转换）。当然，编译器总是按逻辑和严格
的规则来工作，但结果可能并不是我们所期望的。如果存在任何疑问，最好指定显式地使
用哪种强制转换。
8.8 小结
本章介绍了C#提供的标准运算符，描述了对象的相等性机制，讨论了编译器如何把
一种标准数据类型转换为另一种标准数据类型。本章还阐述了如何使用运算符重载在自己
的数据类型上实现自定义运算符。最后，讨论了运算符重载的一种特殊类型，即类型强制
转换运算符，它允许用户指定如何将自定义类型的实例转换为其他数据类型。
第9章将介绍委托、lambda表达式和事件。
第9章
委托、Iambda表达式和事件
本章要点
● 委托
● lambda表达式
● 闭包
● 事件
● 弱事件
本章源代码下载地址（wrox.com）：
打开网页http://www.wrox.com/go/professionalcsharp6，单击Download Code选项卡即可
下载本章源代码。本章代码分为以下几个主要的示例文件：
● 简单委托（Simple Delegates）
● 冒泡排序（Bubble Sorter）
● lambda表达式（lambda Expressions）
● 事件示例（Events Sample）
● 弱事件（Weak Events）
9.1 引用方法
委托是寻址方法的.NET版本。在C++中，函数指针只不过是一个指向内存位置的指
针，它不是类型安全的。我们无法判断这个指针实际指向什么，像参数和返回类型等项就
更无从知晓了。而.NET委托完全不同；委托是类型安全的类，它定义了返回类型和参数
的类型。委托类不仅包含对方法的引用，也可以包含对多个方法的引用。
lambda表达式与委托直接相关。当参数是委托类型时，就可以使用lambda表达式实现
委托引用的方法。
本章介绍委托和lambda表达式的基础知识，说明如何通过lambda表达式实现委托方法
调用，并阐述.NET如何将委托用作实现事件的方式。
9.2 委托
当要把方法传送给其他方法时，就需要使用委托。要了解具体的含义，可以看看下面
一行代码：
      int i = int.Parse("99");
我们习惯于把数据作为参数传递给方法，如上面的例子所示。所以，给方法传递另一
个方法听起来有点奇怪。而有时某个方法执行的操作并不是针对数据进行的，而是要对另
一个方法进行调用。更麻烦的是，在编译时我们不知道第二个方法是什么，这个信息只能
在运行时得到，所以需要把第二个方法作为参数传递给第一个方法。这听起来很令人迷
惑，下面用几个示例来说明：
● 启动线程和任务 ——在C#中，可以告诉计算机并行运行某些新的执行序列，同时
运行当前的任务。这种序列就称为线程，在一个基类System.Threading.Thread的实
例上使用方法Start（），就可以启动一个线程。如果要告诉计算机启动一个新的
执行序列，就必须说明要在哪里启动该序列；必须为计算机提供开始启动的方法
的细节，即Thread类的构造函数必须带有一个参数，该参数定义了线程调用的方
法。
● 通用库类 ——许多库包含执行各种标准任务的代码。这些库通常可以自我包含，
这样在编写库时，就会知道任务该如何执行。但是有时在任务中还包含子任务，
只有使用该库的客户端代码才知道如何执行这些子任务。例如，假设要编写一个
类，它带有一个对象数组，并把它们按升序排列。但是，排序的部分过程会涉及
重复使用数组中的两个对象，比较它们，看看哪一个应放在前面。如果要编写的
类必须能对任何对象数组排序，就无法提前告诉计算机应如何比较对象。处理类
中对象数组的客户端代码也必须告诉类如何比较要排序的特定对象。换言之，客
户端代码必须给类传递某个可以调用并进行这种比较的合适方法的细节。
● 事件 ——一般的思路是通知代码发生了什么事件。GUI编程主要处理事件。在引发
事件时，运行库需要知道应执行哪个方法。这就需要把处理事件的方法作为一个
参数传递给委托。这些将在本章后面讨论。
在C和C++中，只能提取函数的地址，并作为一个参数传递它。C没有类型安全性，
可以把任何函数传递给需要函数指针的方法。但是，这种直接方法不仅会导致一些关于类
型安全性的问题，而且没有意识到：在进行面向对象编程时，几乎没有方法是孤立存在
的，而是在调用方法前通常需要与类实例相关联。所以.NET 
Framework在语法上不允许