如 test5.c，Valgrind 还能检测出内存的双重释放。
内存双重释放
下面指出了访问所在的位置。
270 1 第 6 章  高手们的调试技术
4236==
4236==
--4236== Address 0x4C36030 is 0 bytes inside a block of size 4 free'd
-4236=-
4236=
=4236= Invalid free() / delete / delete[]
int main(void)
[test5.c]
4134==
4134=
=4134= Address Ox4C36030 is 0 bytes inside a block of size 4 free'd
4134== at 0x4004DB: main (test4.c:8)
-4134== Invalid read of size 1
return EXIT_SUCCESS;
free(x);
free(x);
char *x = malloc(sizeof(int);
return a;
at ox4A0541E: free (vg_replace_malloc.c:233)
at ox4A0541E: free (vg_replace_malloc.c:233)
by 0x4004DF: main (test5.c:8)
at 0x4A0541E: free (vg_replace_malloc.c:233)
by ox4004D6: main (test5.c:7)
by 0x4004D6: main (test4.c:7)
www.TopSage.com
/*双重释放同一地址*/
/*释放内存*/
/*分配内存*/
---
## Page 289
对栈上生成的内存区域的非法访问就无法检测到。
Valgrind 在检测非法使用内存方面效果非凡，但并不是万能的。例如，下面这种
无法检测的错误
写入 1，Valgrind 就会检测出该行为并输出信息。
到几十个字节的地址，因此，p-=0x20得到的地址（从a的地址偏移θx80个字节，
量，因此栈的下限（栈指针指向的值）就是a的地址本身，或是比它小几个字节
test6 中发生的问题如下。首先在栈上创建变量 a。main 函数中只有 a和 p两个变
器，因此不同环境下输出内容也可能不尽相同。
利用 GCC 编译后用 Valgrind 检查，输出结果如下。但是，具体行为依赖于编译
int main(void)
test_a.c
 --workaround-gcc296-bugs=yes
=5928= Address Ox7FF000024 is just below the stack ptr. To suppress, use:
=5928==
=5928== Invalid write 0f size 4
=5928=
int main(void)
[test6.c] 
return EXIT_SUCCESS;
p[100] = l;
char p[10];
at 0x40043D: main (test6.c:9)
return EXIT_sUCCESS;
*p =1;
p -= 0x20;
int* p = &a;
int a;
/*向错误的内存地址写入*/
/*错误的指针操作*/
/*创建指向a 的地址的指针*/
/*在栈上分配变量（内存）*/
www.TopSage.com
HACK#45 Valgrind 的使用方法（基本篇）
1271
278
---
## Page 290
279
VIRT中包含了被交换（swap）出的空间，而RES不包含。
使用量（VIRT和RES）就会随着时间增长（如下所示）。VIRT和RES的区别是，
可以发现内存泄漏的征兆。例如，现在foo程序内存泄漏的话，进程的虚拟内存
使如此，内存泄漏大到一定程度后，利用top等命令长时间监视内存使用量，也
内存泄漏的危险之一就是，即使发生，很多情况下也不会立即引发什么问题。即
检测内存泄漏
存区域、访问已释放内存区域、内存双重释放、非法栈空间操作的方法。
本 hack介绍了利用Valgrind检测内存泄漏、访问非法内存地址、读取未初始化内
总结
272|第6章高手们的调试技术
PIDUSERPRNIVIRTRESSHRSCPUMEMTIME+COMMAND
[40分钟之后]
2512ro0t2503108423m284R1006.21:08.65foo
PIDUSERPR NIVIRTRESSHRS%CPU%MEMTIME+COMMAND
[10分钟之后]
PIDUSERPRNIVIRTRESSHRS%CPUMEM
[刚开始]
6284=All heap blocks were freed --noleaks are possible.
=6284=For countsof detected errors,rerunwith:-v
6284=malloc/free:0allocs,0frees,0bytes allocated.
=6284=malloc/free:inuse at exit:0bytes in0 blocks.
=6284=ERROR SUMMARY:0errors from0 contexts (suppressed:4from 1)
Valgrind的使用方法（实践篇）
本hack介绍使用Valgrind检测出难以发现的内存泄漏的实例。
www.TopSage.com
TIME+COMMAND
一大和一洋
---
## Page 291
调用了共享库中的函数，函数不再需要时才关闭。
由于下面只是代码片段，因此打开共享库后就直接关闭了，而实际上，打开后还
运行时加载库的函数，而 dlclose()与 dlopen()相反，是将已加载的库关闭的函数。
过该程序发现了内存泄漏，而这段代码就是内存泄漏的相关部分。dlopen()是在
像这种长时间运行的程序，建议用 Valgrind 检查一次。下面是个实际的例子，通
（参见“HACK#56OOM Killer 的行为和原理"），导致不可预料的后果。
几年长时间执行的程序，内存资源也会被慢慢消耗，某天就会发生 OOM Killer
相反，如果内存泄漏量很小，用前面说的方法就很难检测。但是，如果是几个月、
很难发现的内存泄漏
int main(){
#include 
#include 
2512 r0ot 25 0 121m 114m 284 R 100 30.9 5:38.63 fo0
return 0;
while(1){
void *p = NULL;
sleep(100);
dlclose(p);
if(NULL= p){
p = dlopen("./lib1.so",RTLD_LAZY);
请求的 glibc 在内部会分配更多的内存，之后执行 free()也不会立即将内存区域
当做缓存使用，保持内存占用。例如，用户程序中malloc()几个字节时，接受
内存时，为了提高效率而多分配内存，或是内存不再需要时也不释放而是继续
在VIRT 或 RES 逐渐增加的情况下，有时并不是内存泄漏。比如库函数中分配
printf("Error: dlopen()\n");
但最多只有几MB而已。
return 1;
还给内核。但是，这种多余分配的内存的大小虽然各个函数库和版本不尽相同，
www.TopSage.com
HACK#46 Valgrind 的使用方法（实践篇）
1273
280
---
## Page 292
用的malloc()分配的内存发生了泄漏。实际上源代码dl-load.c:1473（这行代码实
的使用方法（基本篇 Y。这里①处报告 main.c 的第 8行 dlopen()被调用，其中调
Ctrl-C 键将其强制结束。输出内容的详细阅读方法请参见“HACK#45Valgrind
此外，该程序像守护程序一样，是个不会结束的程序，因此我们在执行后不久按
使用 Valgrind 后就显示了以下信息。
单从代码来看，一眼看上去似乎没有问题，实际上这段代码的确没有问题。但是，
274 1
 $ valgrind --leak-check=full prog
--2370-- To see them, rerun with: --show-reachable=yes
=2370= Reachable blocks (those to which a pointer was found) are not shown.
=2370==
=2370=
2370==
=2370==
==2370== LEAK SUMMARY:
2370
2370
=2370=
=2370=s
=2370=
=2370=
=2370=
=2370==
=2370=
=2370=
==2370=-
2370=
=2370==
=2370=
=2370=
=2370= searching for pointers to 1 not-freed blocks.
=2370= For counts of detected errors, rerun with: -v 
==2370== malloc/free: 6 allocs, 5 frees, 1,454 bytes allocated.
=2370==
(   ) s  w sa    
（执行后输入Ctrl-C)
第6章高手们的调试技术
1 Jo T puol ssn u ison Alantutap ae syoa I ut saq 8 =
: checked 68,368 bytes.
malloc/free: in use at exit: 8 bytes in 1 blocks.
 still reachable: 0 bytes in 0 blocks.
definitely lost: 8 bytes in 1 blocks.
by 0x4005c6: main (main.c:8)
by 0x37D8A014EC: _dlerror_run (dlerror.c:164)
g
g
by
by 0x37D7E067EF: _dl_map_object_from_fd (dl-load.c:1473)
at 0x4A05809: malloc (vg_replace_malloc.c:149)
 possibly lost: 0 bytes in 0 blocks.
suppressed: 0 bytes in 0 blocks.
0x37DBA00EF0: dlopen@@GLIBC_2.2.5 (dlopen.c:87)
ox37D7E0cc35: _dl_catch_error (dl-error.c:178)
0x37D8A00F79: dlopen_doit (dlopen.c:66)
0x37D7E1036B: _dl_open (dl-open.c:551)
0x37D7Eocc35: _dl_catch_error (dl-error.c:178)
0x37D7E1088E: dl_open_worker (dl-open.c:252)
0x37D7E07CAB: _dl_map_object (dl-load.c:2232)
www.TopSage.com
---
## Page 293
用 printk 显示变量等方法，是有效的内核调试方法之一，但是这种方法必须重新
kprobes
#
HACR
的内存泄漏的方法。
本hack介绍了利用Valgrind检测到操作系统提供的函数库中的问题一
总结
参考文献
加。这种状况可以通过 Valgrind 发现问题。
hack 前半部分介绍的 top 命令监视内存使用量，几小时之内也看不出有显著的增
不可能发现。此外，dlopen()每次调用都会泄漏几个字节的内存，因此即使用本
统函数库的 bug。像这种函数库出问题的情况，当然对用户的代码审查多少遍也
dlopen()是 glibc 提供的函数，因此本例并不是用户应用程序的 bug，而是操作系
里分配的内存的代码。
际上换了行，应该是1474行）中，malloc()是这样使用的。另外，没找到释放这
glibc/efl/dl-load.c 的 CVS 
1471
=1.290&cvsroot=glibc&f=h
http://sourceware.org/cgi-bin/cvsweb.cgi/libc/elf/dl-load.c.diff? 1=1.249.2.31&r2
 l->l_symbolic_searchlist.r_list =
/* Create an appropriate searchlist. It contains only this map.
利用kprobes获取内核内部信息
该问题的修正方法参见参考文献。
(( deu yu ns) yozt) 3oleu (** deu yutl 4os) 
本 hack 介绍利用内核调试功能之-
This is the definition of DT_SYMBOLIC in SysVr4. */
(probe）获取内核内部信息的方法。
www.TopSage.com
HACK#47利用kprobes 获取内核内部信息.|275
-kprobes，动态插入侦测器
—难以发现
一大和一洋
282
---
## Page 294
283
用 unregister_kprobe()函数可以撤销侦测器。
样在执行指定的地址时（严格来说是在执行之前)，会先调用侦测器函数。此外，
接下来在 pre_handler 成员中设置侦测器函数，并调用register_kprobe()函数，这
另外，如下使用/proc/kallsyms 也可以求出直接地址。
设置了 symbol_name 的话，addr 成员就无须再设置。
kprobes的symbol_name成员中设置要侦测的函数的符号名称(参见下面的源代码）。
函数的符号了，模块也就无法再使用它。内核版本 2.6.19 以上版本可以在 struct
kallsyms_lookup_name()。但是，内核版本 2.6.19以后就不再导出（EXPORT）该
设置要插入侦测器的地址，有很多方法可以获取该地址，其中一种就是使用
kprobe 结构的变量供 kprobes 运行时使用。接下来，在 kprobe 结构的 addr 成员中
下面这个例子在do_execve()函数开头进行侦测。要注册侦测器，首先要分配一个
简单的例子
重新构建内核，也无须重启。
在任意地址插入侦测器（probe)，执行包括 printk在内的各种调试工作，而无须
构建并用新内核启动，调试效率很低。以内核模块的方式使用 kprobes，就可以
276|第6章高手们的调试技术
int handler_pre(struct kprobe *p, struct pt_regs *regs)
struct kprobe kp；/*分配kprobe 结构的变量*/
#include 
ffff8003elb4 T do_execve
# cat /proc/kallsyms | grep "\ doexecve$"
#include 
#include 
return 0;
'a i! pa pd 'd iha id. ONI N)d
 symbol_name。
RHEL5等某些发行版中，即使是2.6.18之前的内核也可能可以使用
 regs, current->tgid, jiffies);
www.TopSage.com
---
## Page 295
由于该函数用于生成进程，
编译上述示例并insmod，
pt_regs:ffffff80414f58,
pt_regs:ffff810009189f58,
ptregs: ffff8041458,
MODULE_LICENSE("GPL");
module_exit(cleanup_kprobe_sample);
static__exit void cleanup_kprobe_sample(void)
module_init(init_kprobe_sample);
static __init int init_kprobe_sample(void)
unregister_kprobe(&kp);
/*撤销侦测器注册*/
return0;
register_kprobe(&kp);
kp.pre_handler =handler_pre;
/*在设置地址的命令执行之前，设置侦测器*/
kp.addr = (kprobe_opcodet *) 0xf8003e1b4;
/*设置do_execve(）地址*/
/*注册侦测器*/
/*kp.symbol_name="do_execve";*/
*
/*kp.addr=(kprobe_opcode_t *)kallsyms_lookup_name("do_execve");*/
/*kernelversion在2.6.18以下时*/
/*如果不想直接给addr成员设置地址，也可以使用符号名*/
kernelversion在2.6.19以上时*/
，那么在do_execve（）执行之前就会输出下面的内核信息。
因此执行ls等命令时应该会显示一次。
www.TopSage.com
pid:6903,jiffies:
pid:6902,jiffies:
pid:6899,jiffies:
4405656851
4405656864
4405656857
284
---
## Page 296
285
例如，显示 filename 和 argv 的侦测器的代码如下所示。
首先显示一下参数信息。do_execve()接收如下参数。
但用该结构可以显示变量等更为详细的信息。
址的命令执行时的寄存器信息。当然，不同架构下该结构的成员变量不尽相同，
指定变量名，因此必须给侦测器函数提供一个 pt_regs 结构，其中保存了指定地
示某个函数的局部变量的值，需要一些技巧，原因是在 printk的参数中无法直接
但是实际调试中经常需要调查函数使用的变量的值。要在 kprobes 的侦测器内显
用上例的方法可以在指定函数执行时方便地显示全局变量 current、jiffies 等，
调查参数
278|第6 章高手们的调试技术
；
struct pt_regs {
unsigned long ss;
unsigned long rsp;