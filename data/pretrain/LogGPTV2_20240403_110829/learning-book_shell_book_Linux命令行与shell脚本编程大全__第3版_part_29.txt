### fsck命令

`fsck` 命令能够检查和修复大多数类型的 Linux 文件系统，包括本章早些时候讨论过的 ext、ext2、ext3、ext4、ReiserFS、JFS 和 XFS。该命令的基本格式如下：

```
fsck [选项] [文件系统]
```

你可以在命令行上列出多个要检查的文件系统。文件系统可以通过设备名、虚拟目录中的挂载点或分配给文件系统的唯一 UUID 来引用。

尽管日志式文件系统的用户通常需要使用 `fsck` 命令，但对于 COW（Copy-on-Write）文件系统的用户是否也需要使用该命令仍存在争议。实际上，ZFS 文件系统甚至没有提供 `fsck` 工具的接口。

`fsck` 命令使用 `/etc/fstab` 文件来自动决定正常挂载到系统上的存储设备的文件系统类型。如果存储设备尚未挂载（例如，你刚刚在新的存储设备上创建了一个文件系统），你需要用 `-t` 命令行选项来指定文件系统类型。表 8-4 列出了其他可用的命令行选项。

#### 表 8-4: fsck 的命令行选项

| 选项 | 描述 |
| --- | --- |
| -a | 如果检测到错误，自动修复文件系统 |
| -A | 检查 `/etc/fstab` 文件中列出的所有文件系统 |
| -c | 给支持进度条功能的文件系统显示一个进度条（仅限 ext2 和 ext3） |
| -C | 不进行检查，只显示哪些检查会执行 |
| -f | 即使文件系统看起来干净也强制检查 |
| -R | 使用 `-A` 选项时跳过根文件系统 |
| -s | 检查多个文件系统时，依次进行检查 |
| -t | 指定要检查的文件系统类型 |
| -T | 启动时不显示头部信息 |
| -v | 在检查时产生详细输出 |
| -y | 检测到错误时自动修复文件系统 |

请注意，有些命令行选项是重复的。这是由于多个命令实现通用前端带来的部分问题。某些文件系统修复命令可能还有一些额外的可用选项。如果需要进行更高级的错误检查，请查看相应文件系统修复工具的手册页面，以确定是否有该文件系统专用的扩展选项。

### 只能在未挂载的文件系统上运行 fsck 命令

对于大多数文件系统，只需卸载文件系统即可进行检查，检查完成后重新挂载即可。但因为根文件系统包含所有核心的 Linux 命令和日志文件，所以无法在处于运行状态的系统上卸载它。

此时正是体验 Linux Live CD 的好时机！只需用 Live CD 启动系统，然后在根文件系统上运行 `fsck` 命令。

### 逻辑卷管理 (LVM)

如果使用标准分区在硬盘上创建了文件系统，为已有文件系统添加额外空间可能会非常麻烦。你只能在同一个物理硬盘的可用空间范围内调整分区大小。如果硬盘上没有足够的空间，就必须购买更大的硬盘，并手动将现有的文件系统移动到新的硬盘上。

通过将另一个硬盘上的分区加入现有文件系统，可以动态地添加存储空间。Linux 逻辑卷管理器 (LVM) 软件包正好可以实现这一功能。LVM 允许你在无需重建整个文件系统的情况下轻松管理磁盘空间。

#### 逻辑卷管理布局

逻辑卷管理的核心在于如何处理安装在系统上的硬盘分区。在 LVM 中，硬盘称为物理卷 (PV)，每个物理卷映射到硬盘上的特定物理分区。

多个物理卷可以集中形成一个卷组 (VG)。LVM 将卷组视为一个物理硬盘，但实际上卷组可能由分布在多个物理硬盘上的多个物理分区组成。卷组提供了创建逻辑分区的平台，这些逻辑分区包含了文件系统。

整个结构的最后一层是逻辑卷 (LV)。逻辑卷为 Linux 提供了创建文件系统的分区环境，类似于我们之前讨论的物理硬盘分区。Linux 系统将逻辑卷视为物理分区。

可以使用任意一种标准的 Linux 文件系统来格式化逻辑卷，然后再将其挂载到 Linux 虚拟目录中的某个挂载点。

图 8-1 显示了典型 Linux 逻辑卷管理环境的基本布局。

#### 图 8-1: 逻辑卷管理环境

![逻辑卷管理环境](https://example.com/logical-volume-management.png)

在图 8-1 中，卷组跨越了三个不同的物理硬盘，覆盖了五个独立的物理分区。卷组内部有两个独立的逻辑卷。Linux 系统将每个逻辑卷视为一个物理分区。每个逻辑卷可以被格式化为 ext4 文件系统，然后挂载到虚拟目录中的特定位置。

注意，在图 8-1 中，第三个物理硬盘有一个未使用的分区。通过 LVM，你可以轻松地将这个未使用的分区分配到现有的卷组中，要么创建一个新的逻辑卷，要么在需要更多空间时扩展现有的逻辑卷。

类似地，如果你给系统添加了一块新硬盘，LVM 允许你将它添加到现有的卷组中，为某个现有的卷组创建更多空间，或者创建一个新的可挂载的逻辑卷。这种扩展文件系统的方法更为灵活和高效。

#### Linux 中的 LVM

Linux LVM 由 Heinz Mauelshagen 开发，并于 1998 年发布到 Linux 社区。它允许你在 Linux 上使用简单的命令行命令来管理完整的逻辑卷管理环境。

Linux LVM 有两个可用版本：

- **LVM1**：最初的 LVM 包于 1998 年发布，只能用于 Linux 内核 2.4 版本。它仅提供了基本的逻辑卷管理功能。
- **LVM2**：LVM 的更新版本，可用于 Linux 内核 2.6 版本。它在标准的 LVM1 功能之外还提供了额外的功能。

大多数采用 2.6 或更高内核版本的现代 Linux 发行版都支持 LVM2。除了标准的逻辑卷管理功能外，LVM2 还提供了一些有用的功能，如快照、条带化和镜像。

##### 快照

最初的 Linux LVM 允许你在逻辑卷在线状态下将其复制到另一个设备，这个功能称为快照。快照在备份高可靠性需求的重要数据时非常有用。传统的备份方法在将文件复制到备份介质时通常会锁定文件。快照允许你在复制的同时保持关键任务的 Web 服务器或数据库服务器继续工作。遗憾的是，LVM1 只允许创建只读快照，一旦创建就不能再写入。

LVM2 允许你创建在线逻辑卷的可读写快照。有了可读写的快照，就可以删除原始逻辑卷并将快照作为替代挂载。这对于快速故障转移或涉及修改数据的程序测试（如果失败，需要恢复修改的数据）非常有用。

##### 条带化

LVM2 提供的另一个引人注目的功能是条带化（striping）。通过条带化，可以在多个物理硬盘上创建逻辑卷。当 Linux LVM 将文件写入逻辑卷时，文件中的数据块会被分散到多个硬盘上。每个后续数据块会被写入下一个硬盘。

条带化有助于提高硬盘性能，因为 Linux 可以同时将一个文件的多个数据块写入多个硬盘，而无需等待单个硬盘移动读写头到多个不同位置。这同样适用于顺序访问文件的读取，因为 LVM 可以同时从多个硬盘读取数据。

需要注意的是，LVM 条带化不同于 RAID 条带化。LVM 条带化不提供用于创建容错环境的校验信息。实际上，LVM 条带化会增加文件因硬盘故障而丢失的概率。单个硬盘故障可能会导致多个逻辑卷无法访问。

##### 镜像

通过 LVM 安装文件系统并不意味着文件系统就不会出问题。与物理分区一样，LVM 逻辑卷也容易受到断电和磁盘故障的影响。一旦文件系统损坏，可能再也无法恢复。

LVM 快照功能提供了一些安慰，可以随时创建逻辑卷的备份副本，但这对某些环境来说可能还不够。对于涉及大量数据变动的系统，比如数据库服务器，自上次快照之后可能已经存储了成百上千条记录。

解决这个问题的一个方法是 LVM 镜像。镜像是一个实时更新的逻辑卷的完整副本。当你创建镜像逻辑卷时，LVM 会将原始逻辑卷同步到镜像副本中。根据原始逻辑卷的大小，这可能需要一些时间才能完成。

一旦初始同步完成，LVM 会对文件系统的每次写操作执行两次写入——一次写入主逻辑卷，一次写入镜像副本。可以想象，这个过程会降低系统的写入性能。但如果原始逻辑卷因某些原因损坏，你手头已经有了一个完整的最新副本！

### 使用 Linux LVM

现在你已经知道 Linux LVM 可以做什么了，本节将讨论如何创建 LVM 来帮助组织系统上的硬盘空间。Linux LVM 包只提供了命令行程序来创建和管理逻辑卷管理系统中的所有组件。虽然有些 Linux 发行版提供了图形化前端，但为了完全控制你的 LVM 环境，最好习惯直接使用这些命令。

#### 1. 定义物理卷

创建过程的第一步是将硬盘上的物理分区转换为 Linux LVM 使用的物理卷段。我们的朋友 `fdisk` 命令可以帮忙。在创建了基本的 Linux 分区后，你需要通过 `t` 命令更改分区类型。

```bash
Command (m for help): t
[...]
Selected partition 1
Hex code (type L to list codes): 8e
Changed system type of partition 1 to 8e (Linux LVM)
Command (m for help): p
Disk /dev/sdb: 5368 MB, 5368709120 bytes
255 heads, 63 sectors/track, 652 cylinders
Units = cylinders of 16065 * 512 = 8225280 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disk identifier: 0xa8661341
Device Boot      Start         End      Blocks   Id  System
/dev/sdb1               1          2104    16838400   8e  Linux LVM
The partition table has been altered!
Command (m for help): w
Calling ioctl() to re-read partition table.
Syncing disks.
```

分区类型 `8e` 表示这个分区将被用作 Linux LVM 系统的一部分，而不是直接的文件系统（如前面看到的 `83` 类型的分区）。

下一步是用分区创建实际的物理卷。这可以通过 `pvcreate` 命令完成。`pvcreate` 定义了用于物理卷的物理分区，只是简单地将分区标记为 Linux LVM 系统中的分区。

```bash
sudo pvcreate /dev/sdb1
Physical volume "/dev/sdb1" successfully created
```

说明：不要被吓人的消息 `dev_is_mpath: failed to get device for 8:17` 或类似的消息吓到。只要看到了 `successfully created` 就没问题。`pvcreate` 命令会检查分区是否为多路径 (multi-path, mpath) 设备。如果不是，则会发出上述消息。

如果你想查看创建进度，可以使用 `pvdisplay` 命令来显示已创建的物理卷列表。

```bash
sudo pvdisplay /dev/sdb1
"/dev/sdb1" is a new physical volume of "2.01 GiB"
--- NEW Physical volume ---
PV Name               /dev/sdb1
VG Name
PV Size               2.01 GiB
Allocatable           NO
PE Size
Total PE
Allocated PE
Free PE
PV UUID               0FIuq2LBodIOwt8VeNtg1nQ2ikrGU2v7
```

`pvdisplay` 命令显示 `/dev/sdb1` 现在已被标记为物理卷。注意，输出中的 `VG Name` 内容为空，因为物理卷还不属于某个卷组。

#### 2. 创建卷组

下一步是从物理卷中创建一个或多个卷组。究竟要为系统创建多少卷组并没有既定规则，你可以将所有可用的物理卷加到一个卷组中，也可以结合不同的物理卷创建多个卷组。

要从命令行创建卷组，需要使用 `vgcreate` 命令。`vgcreate` 命令需要一些命令行参数来定义卷组名以及用于创建卷组的物理卷名。

```bash
sudo vgcreate Vol1 /dev/sdb1
Volume group "Vol1" successfully created
```

输出结果平淡无奇。如果你想查看新创建的卷组的细节，可以使用 `vgdisplay` 命令。

```bash
sudo vgdisplay Vol1
--- Volume group ---
VG Name               Vol1
System ID
Format                lvm2
Metadata Areas        1
Metadata Sequence No  1
VG Access             read/write
VG Status             resizable
MAX LV                0
Cur LV                0
Open LV               0
Max PV                0
Cur PV                1
Act PV                1
VG Size               2.00 GiB
PE Size               4.00 MiB
Total PE              513
Alloc PE / Size       0 / 0
Free  PE / Size       513 / 2.00 GiB
VG UUID               oe4I7e5RA9G9tiANoIQKLzqkX458wj6e
```

这个例子使用 `/dev/sdb1` 分区上创建的物理卷，创建了一个名为 `Vol1` 的卷组。

创建一个或多个卷组后，就可以创建逻辑卷了。

#### 3. 创建逻辑卷

Linux 系统使用逻辑卷来模拟物理分区，并在其中保存文件系统。Linux 系统会像处理物理分区一样处理逻辑卷，允许你定义逻辑卷中的文件系统，然后将文件系统挂载到虚拟目录上。

要创建逻辑卷，使用 `lvcreate` 命令。虽然你通常不需要在其他 Linux LVM 命令中使用命令行选项，但 `lvcreate` 命令要求至少输入一些选项。表 8-5 显示了可用的命令行选项。

#### 表 8-5: lvcreate 的选项

| 选项 | 新 | 长选项名 | 描述 |
| --- | --- | --- | --- |
| -c |  | --chunksize | 指定快照逻辑卷的单位大小 |
| -C |  | --contiguous | 设置或重置连续分配策略 |
| -i |  | --stripes | 指定条带数 |
| -I |  | --stripesize | 指定条带大小 |