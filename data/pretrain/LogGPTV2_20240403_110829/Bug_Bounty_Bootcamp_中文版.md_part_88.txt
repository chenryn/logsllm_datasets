organization's web applications first, before you dive into its mobile
applications, since a mobile application is often a simplified version
of its web counterpart. Search for IDORs, SQL injections, XSS, and other
common web vulnerabilities by using the skills you've already learned.
You can also look for common web vulnerabilities by analyzing the source
code of the mobile application.
我建议先测试组织的Web应用程序，再深入其移动应用程序，因为移动应用程序通常是其Web同类产品的简化版本。通过使用您已经学习的技能搜索IDOR、SQL注入、XSS和其他常见Web漏洞。您还可以通过分析移动应用程序的源代码来查找常见的Web漏洞。
In addition to the vulnerabilities that you look for in web
applications, search for some mobile-specific vulnerabilities.
*AndroidManifest.xml* contains basic information about the application
and its functionalities. This file is a good starting point for your
analysis. After you've unpacked the APK file, read it to gain a basic
understanding of the application, including its components and the
permissions it uses. Then you can dive into other files to look for
other mobile-specific vulnerabilities.
除了在网络应用程序中搜索的漏洞外，还要搜索一些移动特定的漏洞。AndroidManifest.xml
包含有关应用程序及其功能的基本信息。该文件是您分析的良好起点。解压 APK
文件后，阅读文件以基本了解应用程序的组件和使用的权限。然后您可以深入其他文件以寻找其他移动特定的漏洞。
The source code of mobile applications often contains hardcoded secrets
or API keys that the application needs to access web services. The
*res/values/strings.xml* file stores the strings in the application.
It's a good place to look for hardcoded secrets, keys, endpoints, and
other types of info leaks. You can also search for secrets in other
files by using `      grep     ` to search for the keywords mentioned in
[ Chapter 22 ]{.xref itemid="xref_target_Chapter 22"} .
移动应用程序的源代码通常包含硬编码的秘密或 API 密钥，应用程序需要访问
Web 服务。res/values/strings.xml
文件存储应用程序中的字符串。这是查找硬编码的秘密、密钥、端点和其他类型的信息泄漏的好地方。您还可以使用
grep 搜索关键字来查找其他文件中的秘密，这些关键字在第 22 章中提到。
If you find files with the *.db* or *.sqlite* extensions, these are
database files. Look inside these files to see what information gets
shipped along with the application. These are also an easy source of
potential secrets and sensitive information leaks. Look for things like
session data, financial information, and sensitive information belonging
to the user or organization.
如果你在文件中发现.db或.sqlite扩展名的文件，那么这些是数据库文件。在这些文件中查找信息，看它们与应用程序一起发送了什么信息。这些也是潜在秘密和敏感信息泄露的容易来源。查找session数据、财务信息和属于用户或组织的敏感信息。
Ultimately, looking for mobile vulnerabilities is not that different
from hacking web applications. Closely examine the interactions between
the client and the server, and dive into the source code. Keep in mind
the special classes of vulnerabilities, like hardcoded secrets and the
storage of sensitive data in database files, that tend to manifest in
mobile apps more than in web applications.
寻找移动漏洞与黑客攻击Web应用程序并没有太大的区别，需要仔细检查客户端和服务器之间的交互，并深入源代码。请记住，移动应用程序比Web应用程序更容易出现硬编码的秘密和在数据库文件中存储敏感数据等特殊漏洞类型。
:::
[]{#c24.xhtml}
::: section
# [ [ ]{#c24.xhtml#Page_355 .pagebreak title="355"} 24 ]{.ChapterNumber} [ API Hacking ]{.ChapterTitle} {.chapter}
![](image_fi/book_art/chapterart.png)
*Application programming interfaces (* *APIs)* are a way for programs to
communicate with each other, and they power a wide variety of
applications. As applications become more complex, developers are
increasingly using APIs to combine components of an application or
multiple applications belonging to the same organization. And more and
more, APIs have the ability to execute important actions or communicate
sensitive information.
应用程序接口（API）是程序之间通信的一种方式，可以为各种应用程序提供支持。随着应用程序变得越来越复杂，开发人员越来越多地使用API来组合应用程序的组件或同一组织中的多个应用程序。而且，API越来越具有执行重要操作或通信敏感信息的能力。
In this chapter, we'll talk about what APIs are, how they work, and how
you can find and exploit API vulnerabilities.
在这一章中，我们将讨论API是什么，它们如何工作以及您如何找到并利用API漏洞。
## What Are APIs? {#c24.xhtml#h1-501546c24-0001}
In simple terms, an API is a set of rules that allow one application to
communicate with another. They enable applications to share data in a
controlled way. Using APIs, applications on the internet can take
advantage of other applications' resources to build more complex
features.
简单来说，API
是一组规则，允许一个应用程序与另一个应用程序进行通信。它们使应用程序以控制的方式共享数据。使用
API，互联网上的应用程序可以利用其他应用程序的资源来构建更复杂的功能。
[ ]{#c24.xhtml#Page_356 .pagebreak title="356"} For example, consider
Twitter's API (
[https://developer.twitter.com/en/docs/twitter-api/](https://developer.twitter.com/en/docs/twitter-api/){.LinkURL}
). This public API allows outside developers to access Twitter's data
and actions. For example, if a developer wants their code to retrieve
the contents of a tweet from Twitter's database, they can use a Twitter
API endpoint that returns tweet information by sending a GET request to
the Twitter API server located at *api.twitter.com* :
例如，考虑Twitter的API（https://developer.twitter.com/en/docs/twitter-api/）。这个公共API允许外部开发人员访问Twitter的数据和操作。例如，如果开发人员希望他们的代码从Twitter的数据库中检索一条推文的内容，他们可以使用Twitter
API端点，通过向位于api.twitter.com的Twitter
API服务器发送GET请求返回推文信息：
    GET /1.1/statuses/show.json?id=210462857140252672
    Host: api.twitter.com
This URL indicates that the developer is using Twitter's API version 1.1
and requesting the resource called `      statuses     ` (which is what
Twitter calls its tweets) with the ID 210462857140252672. The
`      id     ` field in the URL is a request parameter required by the
API endpoint. API endpoints often require certain parameters to
determine which resource to return.
此 URL 表示开发者正在使用 Twitter API 版本 1.1 并请求名为 statuses
的资源 (这是 Twitter 称其推文的内容)，并带有 ID 210462857140252672。URL
中的 id 字段是 API 连接点所需的请求参数。API
端点通常需要特定参数以确定要返回的资源。
Twitter's API server would then return the data in JSON format to the
requesting application (this example is taken from Twitter's public API
documentation):
Twitter的API服务器将以JSON格式将数据返回给请求应用程序（此示例摘自Twitter的公共API文档）：
    1 {
    2 "created_at": "Wed Oct 10 20:19:24 +0000 2018",
      "id": 1050118621198921728,
      "id_str": "1050118621198921728",
      "text": "To make room for more expression, we will now count all emojis 
    as equal—including those with gender... and skin t... https://t.co/MkGjXf9aXm",
      "truncated": true,
      "entities": {
      3 "hashtags": [],
        "symbols": [],
        "user_mentions": [],
        "urls": [
          {
            "url": "https://t.co/MkGjXf9aXm",
            "expanded_url": "https://twitter.com/i/web/status/1050118621198921728",
            "display_url": "twitter.com/i/web/status/1...",
            "indices": [
              117,
              140
            ]
          }
        ]
      },
      4 "user": {
        "id": 6253282,
        "id_str": "6253282",
        "name": "Twitter API",
        "screen_name": "TwitterAPI",
        "location": "San Francisco, CA",
        "description": "The Real Twitter API. Tweets about API changes, service issues and our Developer Platform. 
    Don't get an answer? It's on my website.",
    [...]
    1 }
APIs usually return data in JSON or XML format. JSON is a way to
represent data in plaintext, and it's commonly used to transport data
within web messages. You'll often see JSON messages when you're testing
applications, so it's helpful to learn how to read them.
API通常以JSON或XML格式返回数据。JSON是一种以纯文本形式表示数据的方式，常用于在Web消息中传输数据。在测试应用程序时，您经常会看到JSON消息，因此学习如何阅读它们很有帮助。
JSON objects start and end with a curly bracket [ 1 ]{.CodeAnnotation
aria-label="annotation1"} . Within these curly brackets, the properties
of the represented object are stored in key-value pairs. For example, in
the preceding data block representing a tweet, the
`      created_at     ` property has the value
`      Wed Oct 10 20:19:24 +0000 2018     ` . This indicates that the
tweet was created on Wednesday, October 10, 2018 at 8:19 PM [ 2
]{.CodeAnnotation aria-label="annotation2"} .
JSON对象以左右花括号开始和结束。在这些花括号内，表示对象的属性以键值对的形式存储。例如，在上面的推文数据块中，created_at属性的值为Wed
Oct 10 20:19:24 +0000
2018。这表示推文创建于2018年10月10日星期三晚上8:19。
JSON objects can also contain lists or other objects. Curly brackets
denote objects. The preceding tweet contains a `      user     ` object
indicating the user who created the tweet [ 4 ]{.CodeAnnotation
aria-label="annotation4"} . Lists are denoted with square brackets.
Twitter returned an empty list of hashtags in the preceding JSON block,
which means no hashtags were used in the tweet [ 3 ]{.CodeAnnotation
aria-label="annotation3"} .
JSON对象还可以包含列表或其他对象。花括号表示对象。上一个推文包含一个用户对象，表示创建推文的用户。
4.列表用方括号表示。Twitter在前面的JSON块中返回了一个空的hashtag列表，这意味着该推文中没有使用hashtag。
3.
You might be wondering how the API server decides who can access data or
execute actions. APIs often require users to authenticate before
accessing their services. Typically, users include access tokens in
their API requests to prove their identities. Other times, users are
required to use special authentication headers or cookies. The server
would then use the credentials presented in the request to determine
which resources and actions the user should access.
API服务器是如何决定谁可以访问数据或执行操作的，你可能会感到困惑。API通常要求用户在访问其服务之前进行身份验证。通常，用户在API请求中包含访问令牌以证明其身份。其他情况下，用户需要使用特殊的身份验证头或Cookie。服务器会利用请求中提供的凭据来确定用户应该访问哪些资源和操作。
### REST APIs {#c24.xhtml#h2-501546c24-0001}
There are multiple kinds of APIs. The Twitter API discussed here is
called a *Representational State Transfer (* *REST* *)* API. REST is one
of the most commonly used API structures. Most of the time, REST APIs
return data in either JSON or plaintext format. REST API users send
requests to specific resource endpoints to access that resource. In
Twitter's case, you send GET requests to
*https://api.twitter.com/1.1/statuses/show/* to retrieve tweet
information, and GET requests to
*https://api.twitter.com/1.1/users/show/* to retrieve user information.
有多种类型的API。在这里讨论的Twitter API被称为Representational State
Transfer（REST）API。REST是最常用的API结构之一。大多数情况下，REST
API会以JSON或纯文本格式返回数据。REST
API用户发送请求到特定的资源端点来访问该资源。在Twitter的情况下，您发送GET请求到https://api.twitter.com/1.1/statuses/show/以检索推文信息，并发送GET请求到https://api.twitter.com/1.1/users/show/以检索用户信息。
REST APIs usually have defined structures for queries that make it easy
for users to predict the specific endpoints to which they should send
their requests. For example, to delete a tweet via the Twitter API,
users can send a POST request to
*https://api.twitter.com/1.1/statuses/destroy/* , and to retweet a
tweet, users can send a POST request to
*https://api.twitter.com/1.1/statuses/retweet/* . You can see here that
all of Twitter's API endpoints are structured in the same way (
*https://api.twitter.com/1.1/RESOURCE/ACTION* ):
REST
API通常具有定义良好的查询结构，使用户可以轻松预测应该将请求发送到哪些特定端点。例如，通过Twitter
API删除推文，用户可以发送POST请求至https://api.twitter.com/1.1/statuses/destroy/，而转发推文，则可以发送POST请求至https://api.twitter.com/1.1/statuses/retweet/。可以看到，所有Twitter的API端点都以相同的方式结构化（https://api.twitter.com/1.1/RESOURCE/ACTION）。
    https://api.twitter.com/1.1/users/show
    https://api.twitter.com/1.1/statuses/show
    https://api.twitter.com/1.1/statuses/destroy
    https://api.twitter.com/1.1/statuses/retweet
[ ]{#c24.xhtml#Page_358 .pagebreak title="358"} REST APIs can also use
various HTTP methods. For example, GET is usually used to retrieve
resources, POST is used to update or create resources, PUT is used to
update resources, and DELETE is used to delete them.
REST
API也可以使用不同的HTTP方法。例如，GET通常用于检索资源，POST用于更新或创建资源，PUT用于更新资源，DELETE用于删除它们。
### SOAP APIs {#c24.xhtml#h2-501546c24-0002}
*SOAP* is an API architecture that is less commonly used in modern
applications. But plenty of older apps and IoT apps still use SOAP APIs.
SOAP APIs use XML to transport data, and their messages have a header
and a body. A simple SOAP request looks like this:
SOAP是一种API架构，现代应用程序中不常用。但许多老应用程序和物联网应用程序仍然使用SOAP
API。SOAP
API使用XML来传输数据，它们的消息具有头和正文。一个简单的SOAP请求如下：
    DELETE / HTTPS/1.1
    Host: example.s3.amazonaws.com
      quotes
       AKIAIOSFODNN7EXAMPLE