very eﬃcient; see Section A.3. By summing all of these resulting ciphertexts, the parties obtain an
encryption of a · b mod q that is provably a · b and nothing else (due to the zero-knowledge proofs).
Unfortunately, since the encryption is ElGamal in-the-exponent, the parties cannot decrypt, since
this would yield (a · b) · G and not a · b mod q. Thus, in parallel to the above, the parties run
a private multiplication subprotocol πpriv
In addition, nothing
forces the parties from inputting the correct ai, bi values. However, given that they hold a proven
encryption of a· b, and now hold shares c1, . . . , cn that are supposed to sum to a· b, they can reveal
these shares to each other and verify their correctness against the proven encrypted value. This
is the main observation that enables us to replace Paillier encryption used in previous protocols
with ElGamal in the exponent. The actual implementation of this is more diﬃcult since the parties
cannot reveal c1, . . . , cn until after they have veriﬁed that the values are correct, or else this can leak
mult that is not necessarily correct.
14
private information of the honest parties. This therefore requires a method of verifying equality
without revealing anything.
PROTOCOL 4.7 (Mult Subprotocol of Fmult)
Upon input (mult, sid1, sid2),
(sid2, (X, Y ), bi, ti,{(X(cid:96), Y(cid:96))}n
(otherwise it ignores the input):
if Pi has some (sid1, (U, V ), ai, si,{(U(cid:96), V(cid:96))}n
(cid:96)=1) and some
(cid:96)=1) stored, then it deﬁnes sid = sid1(cid:107)sid2 and proceeds as follows
0. In parallel to the below, the parties run a private multiplication protocol πpriv
mult. Party Pi inputs
(ai, bi); denote Pi’s output by ci. (In fact, this can even be run in parallel to (input, sid1, ai)
and/or (input, sid2, bi).)
1. Round 1:
(a) Pi chooses a random s(cid:48)
i and computes
(Ei, Fi) = (ai · X + s(cid:48)
i · G, ai · Y + s(cid:48)
i · P).
(b) Pi sends (proof, sid, i, (P, X, Y, Ui, Vi, Ei, Fi), (si, s(cid:48)
i, ai)) to F Rprod
zk
parties.
2. Round 2:
, and sends (Ei, Fi) to all
(a) Pi receives (proof, sid, j, (P, X, Y, Uj, Vj, Ej, Fj), βj) from F Rprod
some βj = 0 (meaning that a proof is not valid), then it aborts.
zk
(b) Pi sets (E, F ) = ((cid:80)n
(cid:96)=1 E(cid:96),(cid:80)n
(cid:96)=1 F(cid:96)).
, for all j ∈ [n]\{i}. If
(c) Pi chooses a random ˆsi ← Zq and computes (Ai, Bi) = EGexpEncP (ci; ˆsi), where ci is its
output from πpriv
mult.
(d) Pi sends (proof, sid, i, (P, Ai, Bi), (ci, ˆsi)) to F REG
zk
, and sends (Ai, Bi) to all parties.
3. Round 3:
(a) Pi receives (proof, sid, j, (P, Aj, Bj), β(cid:48)
j ∈ [n]\{i}. If some β(cid:48)
(b) Pi computes A = E −(cid:80)n
j = 0, then Pi aborts.
(cid:96)=1 A(cid:96) and B = F −(cid:80)n
j) from F REG
zk
(cid:96)=1 B(cid:96).
(c) Pi sends (check, i, A, B, di) to FcheckDH.
, and (Aj, Bj) from Pj, for every
4. Round 4:
(a) If Pi receives reject from FcheckDH, then it aborts.
(b) Pi sends (proof, sid, i, (P, Ai, Bi − ci · G), ˆsi) to F RDH
zk
, and sends ci to all parties.
5. Output: Pi receives (proof, sid, j, (P, Aj, Bj − cj · G), β(cid:48)(cid:48)
Aj, Bj from Step 3a), then Pi aborts. Otherwise, Pi computes c =(cid:80)n
, and cj from Pj, for every
j = 0 (where Pi veriﬁes the proof using the cj value received here, and
(cid:96)=1 c(cid:96) mod q and outputs
j ∈ [n]\{i}. If some β(cid:48)(cid:48)
j ) from F RDH
zk
c.
We achieve this by having each party encrypt its ci value; the parties then sum these encryptions
together and subtract the result from the proven encryption of a · b. If the ci values were correct,
then this would become an encryption of 0; stated diﬀerently, the result would be a Diﬃe-Hellman
15
tuple. Thus, the parties run a subprotocol that checks if a tuple is a Diﬃe-Hellman tuple without
revealing anything else. Informally, this is achieved by each party rerandomizing the tuple so that
if it is a Diﬃe-Hellman then it remains one, but if it is not then it becomes purely random. This
subprotocol is formalized in the FcheckDH functionality and presented in Section 7. Finally, if the
check passes, then the parties can send ci to each other, sum the result and output it. Of course, this
last step must also be veriﬁed, but this is easy to do since the parties already provided encryptions
of ci in order to check the result, and they can therefore prove that the ci provided is the one that
they previously encrypted.
The full proof of security of Protocols 4.3–4.7 is presented in Appendix B and follows the
intuition given above.
5 Securely Computing ECDSA
(cid:96)=1 xi and k =(cid:80)n
to choose random xi, ki values (to deﬁne x =(cid:80)n
In this section, we present our protocol for distributed ECDSA signing. We separately describe the
key generation phase (which is run once) and the signing phase (which is run multiple times). In
the description of the protocol, we denote by Pi the party carrying out the instructions, by Pj the
other parties, and we use (cid:96) as a running index from 1 to n.
5.1 The Protocol for Fecdsa
Given Fmult, it is very easy to construct a protocol for securely computing Fecdsa. In particular,
Fmult provides the ability to securely multiply values together. Thus, it is possible for the parties
(cid:96)=1 ki) and use Fmult to obtain
R = k · G (using element-out), to compute H(m) + r · x mod q using aﬃne, and ﬁnally to multiply
this with k to obtain k · (H(m) + r · x) mod q. (Note that all operations are modulo q already and
so all computations are correct.) However, this is not the computation needed! Rather, ECDSA
signing requires computing k−1·(H(m) + r · x), with k-inverse. Note that Fmult does not enable
securely inverting an element that was input, and this is not an operation that is typically eﬃcient
in MPC. We overcome this problem by having the parties input an addition random masking
element ρ and then use mult to reveal τ = ρ · k. Given this value in the clear, each party can
locally compute τ−1 = ρ−1 · k−1. In addition, the parties can use mult a second time to compute
β = ρ · (H(m) + r · x). The key observation is that the product of these values β and τ−1 (which
party can locally compute) is exactly ρ−1 · k−1 · ρ · (H(m) + r · x) = k−1 · (H(m) + r · x) which is
the s-part of a valid signature. By using Fmult, all of the above operations are guaranteed to be
correct, and so the adversary cannot cheat. In addition, since ρ is random, the values τ and β reveal
nothing more than the signature; as we will show, they are random values under the constraint
that β
τ equals the valid signature. This can therefore be simulated.
We remark that key generation here merely involves running init for Fmult and input for values
x1, . . . , xn in order to deﬁne a random x that is the ECDSA private key. By calling element-out, the
parties also obtain Q = x · G which is the ECDSA public key. As such, distributed key generation
is very eﬃcient, and scales easily to a large number of parties.
Observe also that all operations in Fmult are modulo q, where q is the order of the ECDSA
group itself, by the fact that we use ElGamal in-the-exponent over the same Elliptic curve as
deﬁned for the signing algorithm. This signiﬁcantly simpliﬁes the protocol. See Protocol 5.1 for a
full speciﬁcation.
16
PROTOCOL 5.1 (Securely Computing Fecdsa)
Auxiliary input: Each party has the description (G, G, q) of a group, and the number of parties
n.
Key generation: Upon input KeyGen(G, G, q), each party Pi works as follows:
1. Pi sends (init, G, G, q) to Fmult to run the initialization phase.
2. Pi sends (input, sidgen) to Fmult, and receives back (input, sidgen, xi). (Denote x = (cid:80)n
(cid:96)=1 x(cid:96)
and Q = x · G.)
3. Pi waits to receive (input, 0) to Fmult.
4. Pi sends (element-out, 0) to Fmult.
5. Pi receives (element-out, 0, Q) from Fmult.
6. Output: Pi locally stores Q as the ECDSA public-key.
Signing: Upon input Sign(sid, m), where sid is a unique session id sid, each party Pi works as
follows:
1. Pi sends (input, sid(cid:107)1) and (input, sid(cid:107)2) to Fmult, and receives back (input, sid(cid:107)1, ki) and
(input, sid(cid:107)2, ρi). (Denote k =(cid:80)n
(cid:96)=1 k(cid:96) and ρ =(cid:80)n
2. After receiving (input, sid(cid:107)1) and (input, sid(cid:107)2) from Fmult, Pi sends (mult, sid(cid:107)1, sid(cid:107)2) and
(cid:96)=1 ρ(cid:96).)
(element-out, sid(cid:107)1) to Fmult.
and R = k · G).
3. Pi receives (mult-out, sid(cid:107)1, sid(cid:107)2, τ ) and (element-out, sid(cid:107)1, R) from Fmult (note that τ = k·ρ
4. Pi computes R = (rx, ry) and r = rx mod q.
5. Pi sends (aﬃne, 0, sid(cid:107)3, r, m(cid:48)) to Fmult (recall that identiﬁer 0 is associated with the private-
key x, and thus sid(cid:107)3 will be associated with m(cid:48) + x · r mod q).
6. Pi sends (mult, sid(cid:107)2, sid(cid:107)3) to Fmult.
7. Pi receives (mult-out, sid(cid:107)2, sid(cid:107)3, β) from Fmult (note that β = ρ · (m(cid:48) + x · r) mod q).
8. Pi computes s(cid:48) = τ−1 · β mod q and s = min{s, q − s}.
9. Output: Pi outputs (r, s).
Output to all parties. As we have described above, our protocol as described is not secure with
unanimous abort, since some honest parties may abort while others receive output. However, in
this case of ECDSA signing, it is easy to transform the protocol so that if one honest party receives
output then so do all. This is achieved by having any party who receives (r, s) as output send it to
all other parties. Then, if a party who otherwise aborted receives (r, s), it can check that (r, s) is
a valid signature on m and output it if yes.
In order to validate correctness, observe that τ is the product of k =(cid:80)n
ρ =(cid:80)n
(cid:96)=1 ρi, and that β is the product of the same ρ with α =(cid:80)n
Thus, (r, s) is a valid ECDSA signature with private-key x =(cid:80)n
(cid:96)=1 ki and
(cid:96)=1 αi. Furthermore, R = k · G
n + xi · r, it follows that
for the same k as above. Given the above, and noting that αi = m(cid:48)
s(cid:48) = τ−1 · β = k−1 · ρ−1 · ρ · α = k−1 · (m(cid:48) + x · r), where r = rx mod q for R = k · G = (rx, ry).
Correctness.
(cid:96)=1 xi.
17
Security. Since Fmult is used for all the operations, the adversary cannot deviate from the protocol
at all. Thus, all that is required is to show that the τ and β values revealed leak no information
beyond the signature itself. This follows from the fact that ρ is random. We show this formally in
the proof of security in Section 5.3.
Assumptions. As pointed out in [13], requiring Paillier as an additional assumption for ECDSA
signing can be viewed as a disadvantage. If this is a concern, then the private multiplication protocol
πpriv
mult in Protocol 4.7 can be instantiated with the OT-based protocol of Section 6.1 with the result
that the only assumption required is DDH (since oblivious transfer can also be instantiated under
this assumption). Although this is not strictly a minimal assumption (since ECDSA does not
strictly require DDH), it is a much closer assumption than Paillier.
5.2 Eﬃciency and Experimental Results
In this section, we analyze the theoretical complexity of our protocol, and describe its concrete
running time based on our implementation. For the cost, we count the number of exponentiations
and communication of group elements (we don’t count the cost of commitments since this involves
only computing a hash function, and sending small bandwidth; we count the cost of sending an
element of Zq as the same as a group element even though it’s less).
mult; note that πpriv
5.2.1 Theoretical Complexity
The Fmult protocol is comprised of subprotocols for init, input, element-out and mult (aﬃne is a
local computation only). In addition, it includes a call to FcheckDH and to πpriv
mult. Recall that we
have two instantiations of πpriv
mult, one based on OT and the other on Paillier; see Section 6. The
costs of each of these subprotocols is summarized in Table 1 (where mult of Fmult includes the cost
of FcheckDH and πpriv
mult is run in parallel to the rest and so does not add rounds).
We also remark that the base OT computations for πpriv
mult based on OT are run in the ECDSA
key generation phase, as is the Paillier key-generation and proof of correctness of the key for the
Paillier-based protocol. We count these under init of Fmult. For this, we use the OT protocol of [8]