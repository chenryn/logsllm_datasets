Ruleset: The set of policy rules that deﬁne how the mixing
points among data from different capsules (contexts) should
be handled. Data owners could deﬁne capsules with a set
of possible policy actions in the case of any data mixing
occurrence: the request may be allowed, allowed and logged,
denied, or denied and logged. SWIRLS’s policy enforcement
engine prioritizes deny over allow in the case of conﬂicting
capsule policies. We consider more advanced system-wide
policy consistency analyses outside the scope of this paper.
B. Secure Capsule Distribution
SWIRLS addresses the issue of policy distribution along
with data to be protected with the following framework. Such
a system improves on SEAndroid policies distribution scheme
since it does not require to be integrated into the application
or the system development. The capsule embeds all the data
sources that require protection along with optional ﬁles that
are pushed to the device.
Data owners ship a capsule in the form of an encrypted
compressed archive signed by the data owner’s private key.
The capsule distribution in SWIRLS is done through either
direct ﬁle exchange between the parties or via the Google Play
market. In the latter, the encrypted capsule can be downloaded
as a part of an app or as an Android expansion ﬁle [2]: the
capsule is packed in an app wrapper before the distribution.
Fig. 3. SWIRLS Capsule Installation via Google Play
system-wide hash-based ﬁle integrity checking. For veriﬁca-
tion, SWIRLS makes use of a centralized trusted remote server,
so-called SWIRLS server, that stores the device capsule’s en-
cryption keys. SWIRLS authenticates the device to the SWIRLS
server, and compares the phone’s system assets, e.g., ﬁles, with
their genuine counterparts on SWIRLS server. Once the device
is veriﬁed, the SWIRLS server sends back the key to decrypt
the content of the capsule.
SWIRLS’s capsule installation begins with the capsule
policy processing in order to register the new set of objects
and rules. The capsule ﬁles are copied and the capsule apps
are installed. The capsule registration process is handled by the
SWIRLS system application. This application keeps a database
of all known capsules and tainted objects in the system.
When modiﬁcations are performed (capsule installation or
deletion), SWIRLS synchronizes the capsules policies and
objects with SWIRLS’s kernel security module policy cache.
The taint database allows SWIRLS to keep track of the capsule
boundaries over time and ensures the policy’s persistence. At
the device boot time, SWIRLS reads the capsule policies from
the database and updates SWIRLS’s kernel module accordingly
through a communication channel. Once the installation is
complete, SWIRLS allows the capsule’s corresponding app to
execute while SWIRLS traces the capsule’s boundary through-
out the system (Section V-C).
C. Capsule Boundary Tracking
SWIRLS uses the capsule objects as context sources, and
considers any objects from other capsules as data sinks where
potential mixing of data from two capsules may violate the
installed policies. The contexts correspond to the the capsule
ID. SWIRLS tracks context data ﬂows throughout the system
while running apps. Apps are categorized in two groups:
Unmanaged apps. They represent all the legacy apps that
have been developed without the capsule considerations and
may not comply with the capsule policies. They may merge
sensitive data from various sources despite the policies deﬁned
in their corresponding capsules.
Figure 3 describes the capsule distribution and installation
procedure. The capsule is ﬁrst downloaded. Then, SWIRLS
performs a platform veriﬁcation. Eventually, the capsule is in-
stalled on the device. The capsule app wrapper calls SWIRLS’s
system application. SWIRLS’s system application notiﬁes the
SWIRLS server about the capsule name (ID). SWIRLS veriﬁes
the integrity of the user platform and the capsule through a
Managed apps. By introducing a new development
paradigm and speciﬁc API methods, SWIRLS enables devel-
opers to create BYOD managed apps that can handle multiple
contexts simultaneously by design, e.g., a single email client
app that views emails from different sources (taints) simulta-
neously while keeping their corresponding data separate in the
background.
530
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:42:45 UTC from IEEE Xplore.  Restrictions apply. 
SWIRLS does not require currently existing apps to be mod-
iﬁed to run. SWIRLS disallows unauthorized mixing that vio-
lates a policy irrespective of app attempts (SWIRLS monitors
data-ﬂow and enforces policies outside of the app). Unmodiﬁed
apps can run on SWIRLS as long as they manipulate data from
multiple contexts without causing data mixing that violates
the capsule policies. For unmanaged applications that cause
policy violations while handling multiple contexts, SWIRLS
provides an app runtime isolation mechanism, discussed in
Section V-D. The mechanism ensures that data from different
contexts will be accessed sequentially so that the application
handles only one context data at a time and avoids over-
tainting. In case of a policy violation or an app exception, the
user is notiﬁed by the OS. SWIRLS enables the modiﬁcation
of apps to make them context-aware in order to i) provide
an enhanced context-aware UI, e.g., different context for
different emails in an email client app; ii) change behavior
based on capsule policies; and iii) provide more user-friendly
policy violation responses. Our SWIRLS-enabled email client
app demo [33] shows a typical SWIRLS usage, and only
required 320 LOC changes to a 183,076-line app to turn the
original app (unmanaged) into a context-aware (managed) app.
To facilitate managed app development, SWIRLS provides a
context-aware API that allows developers to query variable
taints and check the capsule policies before variable value as-
signments (Section V-D). The API contains two main methods:
gettaint(Object o) returns the taint of a speciﬁc vari-
able or resource (ﬁle, socket, account); isAllowed(Object
o1, Object o2) checks if data ﬂow from o1 to o2 is
compliant with the installed capsule policies. It is noteworthy
that there is almost no sensitive system information leakage as
the result of API function calls to apps because taint IDs are
opaque identiﬁers assigned to a capsule at its installation time
and cannot be created or manipulated by apps.
SWIRLS’s design includes several components that are
deployed throughout the system to provide user-transparent
BYOD capabilities. SWIRLS implements its capsule boundary
tracking agents in the kernel and the Dalvik VM. SWIRLS
deploys a kernel Linux Security Module (LSM) as a reference
monitor for the capsule policies. SWIRLS also implements a
Dalvik layer-based capsule data propagation analysis using
intra-app semantic information, e.g., variables. Consequently,
an app may contain data from several contexts as a whole
while SWIRLS maintains their separation through its ﬁne-
grained analysis. SWIRLS provides an interface to LSM via
a character device in order to allow context data propagation
reporting from the app-level. The character device provides an
interface to the Dalvik machine to report ﬁle context to LSM
via IO control ioctl syscall. SWIRLS’s capsule boundary
tracing within the kernel has two major advantages: it provides
a centralized and privileged domain to monitor system-wide
capsule data ﬂow, and it enables SWIRLS to keep track of
native code operations on OS objects (Section V-D).
The majority of apps (according to our studies, 85.9%)
request Internet permission to open network sockets. How-
ever, Android system treats network sockets similarly and
does not distinguish between them based on their external
endpoints. SWIRLS treats each secure network connection
speciﬁcally based on the remote endpoint determined by the
corresponding valid SSL certiﬁcates. We decided to limit
the incoming data sources that SWIRLS considers to secure
sockets because it requires a validation of the endpoint origin
through SSL/TLS certiﬁcate veriﬁcation. This follows our
observations that all of the sensitive data in our manual
experiments with the top 271 free Google Play store apps
were transferred through SSL/TLS sockets. SWIRLS looks up
context information for each SSL/TLS connection during the
handshake phase. SWIRLS extracts the common name [19]
that matches the fully qualiﬁed domain name. SWIRLS com-
pares the common name to the installed capsule connection
objects, and labels the SSL/TLS socket with the taint of the
matching capsule. The connection is set context-free if no
matching capsule is found. SWIRLS instruments the socket’s
read and write calls to respectively mark data contexts or check
policies to block unauthorized outgoing ﬂows, e.g., different
outgoing data and socket contexts. SWIRLS enhances the
following functions in Android Apache Harmony framework:
NativeCrypto SSL do handshake() to extract the
certiﬁcate common name and attach a context corresponding
to the matching capsule, and NativeSSLSocket read()
to mark the incoming data with their capsule context once the
connection is established.
According to our experiments, 13.0% of apps read and/or
write all account credentials2 (Section VI-D). SWIRLS solves
the lack of discrepancy among the accounts through its app-
level context analysis that is aware of the account semantics.
Monitoring such activities from within the kernel (lower over-
head) is unfeasible as it requires high-level semantic infor-
mation. Regarding the persistent data repositories, Android’s
structured data storage enables SWIRLS to provide intra-
ﬁle context-aware granularity. SWIRLS instruments Android
ContentProvider to store the context information along
with the content of each individual entry. Many Android
components, such as Android contacts list, use content
providers for their data storage, and SWIRLS’s instrumentation
turns them into context-aware entities. Thus, SWIRLS can save
the user’s contacts from different contexts within the same
contacts list database on the phone.
D. Capsule Policy Enforcement
Given the capsule boundaries at each time point, SWIRLS
controls the next boundary extensions through data ﬂows for
their compliance with the installed capsule policies. SWIRLS’s
policy enforcement engine consists of several components to
completely cover all potential policy violations. Generally,
Android assigns every installed app with a unique user ID
(UID). Android uses UIDs and deploys discretionary access
control (DAC) to prevent unauthorized data accesses between
apps. However, DAC does not(Section VI-B) ensure data
isolation within an app, a system service, or a shared storage
space such as the SD-card. SWIRLS’s ensures system-wide
data isolation through kernel-level data ﬂow control of ﬁles
and inter-process communications (IPC) as well as its Dalvik-
level data ﬂow based policy enforcement. At the ﬁlesystem
level, SWIRLS monitors the ﬁles capsule origin and data ﬂows
by intercepting ﬁlesystem related syscalls such as open, read
and write. Policy lookups are implemented on read and write
calls. SWIRLS also enforces capsule policies between inter-
app communications. Our manual investigation of 271 Google
Play store apps showed that such IPC-based policy violations,
especially through inter-app and app-service communications,
occur frequently.
For managed apps, SWIRLS leaves all the work to devel-
opers to ensure policy-compliant data mixings using SWIRLS
API. To protect sensitive capsule data in the presence of poten-
tially careless developers who do not check for policies sufﬁ-
ciently, SWIRLS’s Dalvik-based taint analysis engine monitors
intra-app capsule data propagation and blocks unauthorized
data mixing.
2Using
appropriate permissions,
AUTHENTICATE ACCOUNTS and MANAGE ACCOUNTS.
the Android AccountManagerService after
acquiring
i.e., GET ACCOUNTS, USE CREDENTIALS,
531
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:42:45 UTC from IEEE Xplore.  Restrictions apply. 
ANDROID FRAMEWORK ENHANCEMENTS BY SWIRLS
TABLE I
Component
Linux kernel (Grouper 3.1.10)
System services: ActivityManager, Clipboard, Accounts
SSL native interface
Taintdroid (AOSP v.4.1.1 r6)
Zygote and Process class
Content Provider framework
Changes or Added Feature
Policy cache, interface through IOCTLs, LSM hooks for ﬁles, binder hook
Check caller context on requests
Assign variable context according to data received from socket
Data sources rediﬁned, policy enforcement support on capsules’ data merging
Context assignment on process fork
Store data context for each database table row system-wide
For unmanaged apps that do not support an intra-app data
ﬂow policy, SWIRLS implements an app container mecha-
nism. When an unmanaged app is launched,
the Android
Zygote process forks and executes the app code. SWIRLS
enhances the Android Zygote to query the capsule ID that
the launched app is running with. Based on this capsule
ID, SWIRLS isolates unmanaged app ﬁles and tracks IPC
calls. For ﬁle isolation, SWIRLS uses mount namespaces to
separate unmanaged app ﬁles per capsule. Instead of storing
app data under /data/data, the capsule ﬁles are stored
under /data/swirls/ and this directory
is mounted over the original path with a bind mount. SWIRLS
avoids duplicating app resources and libraries initially installed
in the default app path through the copy-on-write support of
the stackable Unionfs ﬁlesystem [28]. SWIRLS then sets up
the mount namespace to make the change transparent for the
app.
SWIRLS prevents unmanaged apps from data exchanges
through the Binder IPC according to their corresponding poli-
cies. SWIRLS uses Android’s LowMemoryKiller (initially
intended to silently kill the apps over-consuming memory) to
kill the target application and prevent unauthorized IPC data
exchanges. SWIRLS implements Binder LSM hooks to evaluate
the capsules ID associated with unmanaged apps performing
the binder call. If the capsule policy does not allow the
call, SWIRLS transparently restarts the target app in the right
context (Section VI-C). Processes that run system services3
cannot be simply restarted; SWIRLS whitelists the processes
and implements per-service context-aware data ﬂow control.
Managed apps with multiple contexts bypass such kernel-level
enforcement and are addressed using SWIRLS Dalvik-based
ﬁne-grained enforcement modules.
SWIRLS also enhances the Android activity manager that
is a system service used for inter-app component call resolu-
tion. It is a critical component to monitor since the indirect
calls relayed by the activity manager would not be visible
by SWIRLS’s Binder policy enforcement module. SWIRLS
implements an enforcement agent within the activity manager