be  sent  to  both  target  interpreters,  whereas  normal 
application data will have been reexpressed.  
address 
attacks 
by 
on 
As  shown  in  Figure  2,  each  variant  has  a  different 
reexpression  function  (R0,  R1),  and  hence  will  operate 
on  different  data.  Trusted  data  embedded  in  P  is 
transformed using these functions in the corresponding 
variants.  To  preserve  program  semantics,  the  target 
Figure 2. N-Variant Systems with Data Diversity. 
International Conference on Dependable Systems & Networks: Anchorage, Alaska, June 24-27 20081-4244-2398-9/08/$20.00 ©2008 IEEE189DSN 2008: Nguyen-Tuong et al.Variation 
Target Type 
Reexpression Functions 
Inverse Functions 
Address Space 
Partitioning [16] 
Extended Address Space  
Partitioning [9] 
Instruction Set  
Tagging [16] 
Address 
Address 
Instruction 
UID Variation (this paper) 
UID 
R0(a) = a 
R1(a) = a + 0x80000000 
R0(a) = a 
R1(a) = a + 0x80000000 + offset 
R0(inst)= 0 || inst 
R1(inst)= 1 || inst 
R0(u)= u 
R1(u)= u ⊕ 0x7FFFFFFF 
R-1
R-1
R-1
R-1
R-1
R-1
R-1
R-1
0(a) = a 
1(a) = a – 0x80000000 
0(a) = a 
1(a) = a – 0x80000000 – offset 
0(0 || inst) = inst 
1(1 || inst) = inst  
0(u)= u 
1(u)= u ⊕ 0x7FFFFFFF 
Table 1. Reexpression Functions. 
compromised, the other must be in a state that indicates 
an  attack.  This  requires  that  any  injected  data  of  the 
target type will be detected when the target interpreters 
compare their input data. This is achieved if the inverse 
reexpression functions are disjoint:  
∀x: R-1
0(x) ≠ R-1
1 (x) (disjointedness property).  
Hence,  any  time  an  identical  value  is  sent  to  both 
interpreters an alarm is raised, since the inverted values 
must be different. 
that 
the 
Detection  is  only  guaranteed  by  this  property  if  all 
transformations 
interpreter 
performs on input data are identical in the two variants. 
Otherwise,  an  attacker  may  be able to craft an input Z 
that is transformed by P0 into Z′ and P1 into Z′′ (where 
Z′ ≠ Z′′) before it is sent to the target interpreter.  
application 
The  detection  property  also  requires  that  an  attack 
must  inject  complete  values  of  the  targeted  type.  For 
example, address space partitioning provides protection 
only against attacks that inject complete addresses. It is 
vulnerable  to  an  attack  that  can  corrupt  just  the  three 
low-order  bytes  of  an  address,  leaving  the  high-order 
byte unchanged. The extended version of address space 
partitioning  is  (probabilistically)  resilient  to  a  byte-
overwriting  attack  since  the  low  order  bytes  will  also 
differ between variants.  
2.4  Examples 
Table  1  summarizes  four  variations  using  our  model. 
The  first  three  variations  were  developed  in  previous 
papers;  we  introduce  the  fourth  variation  in  the  next 
section.  For  the  previous  variations,  the  target  type  is 
broad:  for  the  first  two,  it  is  all  addresses,  and  for 
instruction  set  tagging  it  is  all  instructions.  Hence, 
creating  the  variations  to  satisfy  the  needed  normal 
equivalence  property  is  fairly  straightforward  and 
requires no analysis of the program. 
3.  UID Data Variation 
We  now  examine  a  data  diversification  designed  to 
thwart  attacks that corrupt user ID data. This is a type 
of non-control data attack as described by Chen et al. in 
which an attacker corrupts a data value that causes the 
original program to execute maliciously [12].  
We  focus  on  the  corruption  of  user  and  group 
identification  data  (UID/GID),  although  data  diversity 
techniques  could  be  designed  to  provide  protection 
against  other  data  attacks.  In  the  rest  of  the  paper,  we 
use the term UID to denote both UID and GID values.  
To test the idea of data variation, we implemented a 
UID  variation  on  the  Apache  web  server  [2].  A  com-
mon pattern for servers is to drop their privileges when 
handling  client  requests.  However,  there  will  be 
instances when accessing critical system resources that 
require the escalation of privileges to the root account. 
If an attacker can corrupt the UID value used to drop or 
escalate privileges, then the attacker can masquerade as 
root  (or  any  other  user)  in  the  system.  Chen  et  al. 
describe one example of such an attack [12]. 
3.1  N-Variant Framework 
Before  describing  our  variation  strategy  and its imple-
mentation, we review the existing N-variant framework 
prototype  [16].  Our  implementation  is  a  Linux  kernel 
modified  to  execute  the  variants  using  system  call 
boundaries  for  both  synchronization  and  monitoring 
purposes. To run a program as an N-variant system, the 
variant  executables  are  created.  Then,  a  script  is  used 
to  launch  the  N-variant  system  with  the  selected 
variants, e.g., nvexec prog1 prog2.  
We  updated  kernel  data  structures  to  keep  track  of 
variant  processes  and  implemented  wrappers  around 
system  calls.  System  calls  are  used  as  synchronization 
points: once one variant makes a system call, it will not 
proceed  until  all  other  variants  make  the  same  system 
call. We wrap input system calls so that the actual input 
operation is only performed once and the same data is 
sent to all variants.  
This  removes  most  sources  of  non-determinism 
since  each  variant  receives  the  same  result  for  system 
calls. However, our implementation does not yet handle 
issues  involving  scheduling  divergences  that  can  be 
caused by signals and threading [16]. For example, if a 
International Conference on Dependable Systems & Networks: Anchorage, Alaska, June 24-27 20081-4244-2398-9/08/$20.00 ©2008 IEEE190DSN 2008: Nguyen-Tuong et al.signal is delivered to variants at different points in their 
execution, their behaviors may diverge. This leads to a 
false attack detection. Bruschi et. al. have developed a 
different implementation of a similar redundant execu-
tion  framework  that  provides  some  steps  towards 
simultaneous signal delivery [9].  
The  wrappers  also  act  as  monitors  and  check  for 
divergent behavior by making sure that all system calls 
receive equivalent arguments before allowing the actual 
system call to proceed.  For output related system calls, 
we  also  check  that  the  variants  are  making  equivalent 
system calls, and issue the actual call only once.  
3.2  Reexpression Functions 
To defend against this attack class, we adopted a reex-
pression  function  that  is  resilient  to  partial  data  value 
corruptions.  For P0, the reexpression function (and its 
inverse) is the identity function.  Hence, UID = 0 corre-
sponds to root as normal. For P1, we use:  
R1(u) = u ⊕ 0x7FFFFFFF   
R-1
1(u) = u ⊕ 0x7FFFFFFF 
Hence, 0x7FFFFFFF represents root. The reexpression 
functions  satisfy  both  the  inverse  property  (the  XORs 
cancel  out)  and  the  disjointedness  property  (flipping 
bits always changes the value).  
some 
implementation 
causes 
This  reexpression  function  is  susceptible  to  a  high 
bit  overwrite,  since  the  high  bit  is  not  flipped.  Ideally 
we  would  have  used  a  reexpression  function  that  flips 
all  bits  in  the  data  value  (XOR  with  0xFFFFFFFF). 
This 
difficulties.  
Although the UID datatype is normally unsigned.  The 
kernel  internally  treats  negative  UID  values  as  special 
cases  so  flipping  the  high  bit  (sign)  would  cause  
difficulties.  
Although 
individual  bit  attacks  are  certainly 
possible  in  theory,  the  lowest  level  of  granularity 
reported for partial memory overwriting attacks under a 
remote attacker threat model is at the byte-level so we 
do not consider this a likely threat. While bit flips have 
been  reported  for  other  threat  models,  e.g.,  the  heat 
lamp attack on the Java virtual machine [3], no known 
realistic  attack  allows  an  attacker  to  reliably  target  a 
specific bit to flip. 
3.3  Applying Reexpression Functions 
To  create  the  variants  we  must  transform  the  program 
to  incorporate  our  reexpression  function.  Since  the 
reexpression function for P0 is the identity function, the 
original  program  can  be  used  unchanged  for  the  first 
variant.  To  create  the  second  variant,  we  perform  a 
source-to-source  program  transformation. For our case 
study,  the  transformation  was  done  manually,  but  in  a 
way  that  could  be  readily  automated  (as  discussed  in 
Section  5).  To  apply 
transformations,  our 
transformer must be able to determine which values in 
a program are UID values. For a well-typed C program, 
all  values  used  as  UIDs  are  typed  uid_t,  and  the 
uid_t type is never used to hold non-UID values.  
the 
For the second variant, we need to establish the first 
two  properties  required  for  normal  equivalence  from 
Section  2.2:  (1)  all  UID  values  in  P1  must  be  trans-
formed  using  R1;  and  (2)  all  instructions  in  P1  that 
operate directly on UID values must be transformed to 
preserve  the  original  semantics  when  operating  on  re-
expressed values. 
For the first property, we identify all UID constants 
using the C data type, and replace these values with the 
result  of  applying  R1  to  them.  In  some  situations, 
constants are used implicitly.  For example, an if state-
ment  such  as  if(!getuid())  contains  an  implied 
comparison to the constant 0. The statement is replaced 
with  if(getuid()==0).  This  is  to  have  the  UID 
constant  explicitly  stated,  after  which  the  constant 
value is transformed.  
The  second  property  requires  modifying  code  that 
manipulates  UID  values.  We  assume  that  only  assign-
ment  and  comparison  operations  are  applied  to  UID 
values.  Programs  do  not  typically  perform  other 
operations  on  UID  values,  but  if a program uses other 
operations  on  UID  values  additional  transformations 
would  be  needed.  Handling  assignments  and  equality 
comparisons requires no code changes; if the operation 
involves  a  constant  value,  it  was  already  transformed 
by  the  data  transformation.  Inequality  comparisons 
must  be  logically  reversed,  however,  to  preserve  the 
original  semantics  on  transformed  values  (where  all 
bits except the high bit have been flipped).  
3.4  Support for External Data 
Our data variation requires that all trusted data used by 
the variants is transformed using the reexpression func-
tion.  Otherwise,  untransformed  data  will  have  the 
wrong  representation  when  it  reaches  the  target  inter-
preter.  The  transformations  in  the  previous  section 
transform  data  in  the  program  itself,  but  many  servers 
also rely on external data such as configuration files for 
their proper operations. For example, Apache uses UID 
values in the /etc/passwd and /etc/group files.  
We thus needed to develop a mechanism for the two 
variants to receive varied data originating from trusted 
external  sources.  One  approach  would  be  to  apply  the 
reexpression  functions  as  data  is  read  from  external 
sources.  This  seems  risky,  however,  since  an  attacker 
may  be  able  to  corrupt  data  by  using  this  same  path.   
The alternative is to provide two versions of the trusted 
International Conference on Dependable Systems & Networks: Anchorage, Alaska, June 24-27 20081-4244-2398-9/08/$20.00 ©2008 IEEE191DSN 2008: Nguyen-Tuong et al.files and extend the framework to support file variants 
for  the  program  variants.  This  approach  is  more 
general, and opens other interesting possibilities based 
on diversity of data in configuration files. 
Function Signature 
uid_t uid_value(uid_t) 
Description 
Compares parameter 
value (across 
variants) and returns 
passed value. 
Checks conditional 
value given between 
variants is the same.  
Compares 
parameters and 
returns the truth 
value for 
comparison. 
bool cond_chk(bool) 
bool cc_eq(uid_t, uid_t) 
bool cc_neq(uid_t, uid_t) 
bool cc_lt(uid_t, uid_t) 
bool cc_leq(uid_t, uid_t) 
bool cc_gt(uid_t, uid_t) 
bool cc_geq(uid_t, uid_t) 
To  enable  this,  we  created  the  notion  of  unshared 
files. Previously, all files were shared since all variants 
operated  on  identical  data.  I/O  system  calls  were  per-
formed  once  and  the  result  was  passed  to  all  variants. 
Now,  when  the  variants  make  a  request  to  open  an 
unshared file, the kernel opens a different file for each 
variant  that  contains  data  specific  to  that  variant.  For 
example,  when 
that 
/etc/passwd  be  opened,  P0  will  actually  open 
/etc/passwd-0  and  P1  will  open  /etc/passwd-1. 
The  diversified  password  files  are  identical  except  the 