total number of primitive and encryption queries is bounded as
𝑝 + 𝑞𝑒 ≤ ℓ𝑚
𝑑 · 2153, even if 𝑞𝑣 = 1 (when, e.g., applying the bound
to a rekeying connection of a reliable-transport Internet security
protocol like TLS [29] which terminates upon the first verification
error).
≥ 𝑑(𝑝+𝑞𝑒)
2𝑘
Improving the nonce-randomizer bound. When moving from the
basic multi-user security result for restricted, 𝑑-repeating adver-
saries to general adversaries, the analysis of the nonce-randomizer
transform XN by [15] introduces an additive loss term of 2−𝑏/2 for
nonce length 𝑏. Through our improved balls-into-bins lemma, we
instead obtain a parameterized term 2−𝛿𝑏, for which 𝛿 = 1/2 as
in [15] is just one instantiation. Indeed, choosing 𝛿 = 2 allows us to
ensure that this term is not dominant in the bound of Theorem 7.8
for nonce-randomized ChaCha20-Poly1305 for adversaries making
up to even around 𝑞𝑒 ≈ 2𝑏 = 296 encryption queries.3
Notably, our improved result for the XN also readily improves
the multi-user security for nonce-randomized GCM [15, Theorem
4.3], allowing improvements to IETF/IRTF draft AEAD limits [14,
Section 6.1]: while the advantage bound in [15] cannot become
smaller than 2−𝑏/2 = 2−48 (for the GCM nonce length of 𝑏 = 96),
our result entirely lifts this restriction, similar to the ChaCha20-
Poly1305 case.
Improving over the standard hybrid loss in real-world settings.
The only prior multi-user security bound for ChaCha20-Poly1305
is outlined in [20] and is based on a standard hybrid security loss
in the number of user 𝑢 over the single-user bound [26]. This hy-
brid bound is reflected in IETF/IRTF draft documents on AEAD
limits [14, Section 6.2.1] as 𝑢·𝑞𝑣/𝑢 ·𝑐·ℓ𝑚
, where 𝑞𝑣/𝑢 is the maximum
failed verification attempts per user. In comparison, our bound is
more fine-grained, bounding the total number 𝑞𝑣 of verification
attempts across all users, where always 𝑞𝑣 ≤ 𝑢·𝑞𝑣/𝑢; this gap can be-
come relatively large when no tight upper bounds for attempts per
user can be derived. Our multi-user bound confirms the approach
taken in DTLS 1.3 [30, Section 4.5.3] and QUIC [31, Section 6.6]
to derive integrity limits from summing the number of forgery at-
tempts across multiple keys in a connection to counter the security
degradation of repeated forgeries over unreliable transports [12].
2𝑡
7.4 Increasing the Hash Size
As discussed in Section 7.3, the dominant term in the multi-user
security bounds for ChaCha20-Poly1305 in essentially all practical
scenarios is 𝑞𝑣·𝑐·ℓ𝑚2𝑡
, making—relatively speaking—the tag length
the scheme’s weakest point. The natural question then is whether
we can improve this term and obtain a stronger bound by increasing
the tag size of ChaCha20-Poly1305. An obvious solution would be
to use a wider almost Δ-universal hash function. This appears as an
even more appealing solution when considering that, in ChaCha20
-Poly1305, twice as much key material is computed than is used
(namely, only half of the first CC_block call output), leaving the
other half available as possible extra key material without needing
any extra computation. To illustrate one potential approach, we
give a construction doubling the tag size and then discuss how this
affects the security of ChaCha20-Poly1305.
To double the tag size, we propose as easy solution the following
almost Δ-universal hash function that reuses the almost Δ-universal
hash function 𝐻 component of the Poly1305_Mac one-time MAC
𝑐 in
of ChaCha20-Poly1305. The main idea of our construction 𝐻
3Observe that Theorem 7.8 for 𝛿 = 2 allows the adversary to make up to 𝑞𝑒 ≤ 𝑏 · 2𝑏
encryption queries while ensuring, via Theorem 7.7, that 𝑑 ≤ ⌈𝑏 · (𝛿 + 1)⌉ − 1 =
287 ≤ 2128 = 2𝑡 as required for Theorem 6.1.
Session 6D: Authentication and Privacy CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1992Definition 7.9 below is to concatenate two instantiations of the
hash function 𝐻 using two independent hash keys. This new hash
𝑐, when augmented with a 2𝑡-bit blinding value, creates a
function 𝐻
one-time MAC that we call cPoly1305 in reference to it arising from
concatenation. This one-time MAC cPoly1305 takes a 2𝑡-bit hash
key and a 2𝑡-bit blinding value. Note again that due to the unused
key material we can obtain the needed key and blinding value
for this new almost Δ-universal hash function in the ChaCha20-
Poly1305 construction without additional computation and with
little modification to the original scheme.
Definition 7.9 (cPoly1305 Hash). Let 𝑟, 𝑢 be two 𝑡-bit strings, 𝐻
be the 𝑐-almost Δ-universal hash function of Poly1305_Mac and
(𝐴𝐷, 𝐶) be a pair of byte strings. Define the hash function used in
cPoly1305 as
𝑐
𝑟 ∥𝑢(𝐴𝐷, 𝐶) = 𝐻𝑟 (𝐴𝐷, 𝐶)∥𝐻𝑢(𝐴𝐷, 𝐶).
𝐻
𝑐.
We now give a bound on the almost Δ-universal property of 𝐻
Theorem 7.10 (cPoly1305 Hash AΔU). Let 𝑐 = 3 · 224 and 𝑠 be
a 2𝑡-bit string. If (𝐴𝐷, 𝐶) and (𝐴𝐷′, 𝐶′) are distinct pairs of byte
strings, then:
(cid:104)𝐻
≤ 𝑐2 · max(cid:0)(|𝐴𝐷|𝑡 + |𝐶|𝑡)2, (|𝐴𝐷′|𝑡 + |𝐶′|𝑡)2(cid:1)
𝑟 ∥𝑢(𝐴𝐷′, 𝐶′) (𝑡)+ 𝑠(cid:105)
𝑟 ∥𝑢(𝐴𝐷, 𝐶) = 𝐻
Pr𝑟 ∥𝑢 ←$ {0,1}2𝑡
𝑐
𝑐
.
22𝑡
Proof. Let 𝐻 be the 𝑐-almost Δ-universal hash function of
Poly1305_Mac. Let (𝐴𝐷, 𝐶) and (𝐴𝐷′, 𝐶′) be distinct pairs of byte
strings. If 𝐻
𝑐
𝑐
𝑟 ∥𝑢(𝐴𝐷′, 𝐶′) (𝑡)+ 𝑠 then
𝑟 ∥𝑢(𝐴𝐷, 𝐶) = 𝐻
𝐻𝑟 (𝐴𝐷, 𝐶) = 𝐻𝑟 (𝐴𝐷′, 𝐶′) (𝑡)+ 𝑠[1:𝑡]
𝐻𝑢(𝐴𝐷, 𝐶) = 𝐻𝑢(𝐴𝐷′, 𝐶′) (𝑡)+ 𝑠[𝑡 + 1:2𝑡].
and
Thus if we sample two keys 𝑟, 𝑢 independently and uniformly at
random, then
(cid:104)𝐻
𝑐
𝑟 ∥𝑢(𝐴𝐷, 𝐶) = 𝐻
𝑟 ∥𝑢(𝐴𝐷′, 𝐶′) (𝑡)+ 𝑠(cid:105)
(cid:104)𝐻𝑟 (𝐴𝐷, 𝐶) = 𝐻𝑟 (𝐴𝐷′, 𝐶′) (𝑡)+ 𝑠[1:𝑡](cid:105)
(cid:104)𝐻𝑢(𝐴𝐷, 𝐶) = 𝐻𝑢(𝐴𝐷′, 𝐶′) (𝑡)+ 𝑠[𝑡 + 1:2𝑡](cid:105) .
=
𝑐
Pr𝑟 ←$ {0,1}𝑡
· Pr𝑢 ←$ {0,1}𝑡
Pr𝑟 ∥𝑢 ←$ {0,1}2𝑡
The final bound is obtained by applying Theorem 3.4 to each factor
of this product.
□
We now discuss how using this almost Δ-universal function
𝑐 in the ChaCha20-Poly1305 construction impacts the security
𝐻
of the scheme (the argument can be generalized to any universal
function doubling the tag size). Applying Theorem 6.1 (with a slight
modification), we obtain the following upper bound on the multi-
user security of ChaCha20-cPoly1305, the AEAD scheme obtained
using 𝐻
𝑐 in place of 𝐻 in ChaCha20-Poly1305:
ChaCha20-cPoly1305[𝜋](A) ≤ 𝑞𝑣((𝑐ℓ𝑚)2 + 3)
muAE
+ 𝑑(𝑝 + 𝑞𝑒)
Adv
2𝑘
+2𝑝 · (𝑛 − 𝑘)
+ 2𝑞𝑣 · (𝑛 − 𝑘 + 8𝑡)
2𝑘
22𝑡
+ (𝜎𝑒 + 𝑞𝑒)2
2𝑛+1
2𝑘
1
+
1
24𝑡−2 +
2𝑛−𝑘−2 .
The first observation on this changed bound is that by doubling
the tag size, we obtain a more uniform bound, with denominators
in each term being at least 22𝑡 = 2𝑘 = 2256, increasing the security
by 𝑡 − log2(𝑐ℓ𝑚) bits. The second and perhaps more interesting
observation is that the most significant term in the bound would
likely become 𝑑·𝑝
2𝑘 , making offline computation the most probable
attack against the scheme. This term corresponds to a key recov-
ery attack (see Proposition 7.2) and is most likely inherent to any
nonce based scheme against 𝑑-repeating adversaries (see [4] for the
equivalent attack in GCM and [8] for block ciphers). Thus choosing
a tag size equal to the key length as we have done is probably the
best tradeoff in terms of selecting the smallest tag size with the best
security.
Our construction ChaCha20-cPoly1305 for doubling the tag size
and increasing security allows parallelization and reuse of current
implementations of Poly1305. However, it would most likely not
have optimal efficiency given the tag size, as it processes each
message block twice. A dedicated construction similar in structure
to Poly1305 but with a bigger prime number would likely result
in a more efficient hash function. A good candidate would be the
pseudo-Mersenne prime 𝑝 = 2255 − 19. We leave the development
of such an alternative construction to future work.
8 CONCLUSIONS
We have given a detailed security analysis of ChaCha20-Poly1305,
an increasingly important AEAD scheme. Our analysis is in the
multi-user setting and assumes the permutation underlying the
scheme is ideal. This enables us to capture offline computation in
our model and make a detailed comparison with the correspond-
ing analysis of GCM by Hoang, Tessaro, and Thiruvengadam [15].
Amongst other things, our analysis surfaces that the security limits
for ChaCha20-Poly1305 are dominated by the limits of its MAC
component. This is in contrast to GCM, where the limiting fac-
tor is the AES block size. We have proposed a lightweight way to
strengthen ChaCha20-Poly1305 by doubling its MAC tag length. In
future work, we plan to investigate alternative MAC constructions
and their performance/security characteristics. We will also bring
our work to the attention of the TLS and QUIC working groups
of the IETF and collaborate with them to establish safe data limits
for ChaCha20-Poly1305 in the context of the TLS, DTLS and QUIC
protocols.
ACKNOWLEDGMENTS
Jean Paul Degabriele and Jérôme Govinden were supported by the
German Federal Ministry of Education and Research and the Hessen
State Ministry for Higher Education, Research and the Arts within
their joint support of the National Research Center for Applied
Cybersecurity ATHENE. Felix Günther has been supported in part
by Research Fellowship grant GU 1859/1-1 of the German Research
Foundation (DFG). Kenneth G. Paterson’s research is supported in
part by a gift from VMware.
REFERENCES
[1] Mohamed Ahmed Abdelraheem, Peter Beelen, Andrey Bogdanov, and Elmar
Tischhauser. 2015. Twisted Polynomials and Forgery Attacks on GCM. In EURO-
CRYPT 2015, Part I (LNCS, Vol. 9056), Elisabeth Oswald and Marc Fischlin (Eds.).
Springer, Heidelberg, 762–786. https://doi.org/10.1007/978-3-662-46800-5_29
Session 6D: Authentication and Privacy CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1993[2] Divesh Aggarwal and Priyanka Mukhopadhyay. 2018. Improved Algorithms for
the Shortest Vector Problem and the Closest Vector Problem in the Infinity Norm.
In 29th International Symposium on Algorithms and Computation (ISAAC 2018)
(Leibniz International Proceedings in Informatics (LIPIcs), Vol. 123), Wen-Lian Hsu,
Der-Tsai Lee, and Chung-Shou Liao (Eds.). Schloss Dagstuhl–Leibniz-Zentrum
fuer Informatik, Dagstuhl, Germany, 35:1–35:13. https://doi.org/10.4230/LIPIcs.
ISAAC.2018.35
[3] Mihir Bellare and Phillip Rogaway. 1996. The Exact Security of Digital Signatures:
How to Sign with RSA and Rabin. In EUROCRYPT’96 (LNCS, Vol. 1070), Ueli M.
Maurer (Ed.). Springer, Heidelberg, 399–416. https://doi.org/10.1007/3-540-68339-
9_34
[4] Mihir Bellare and Björn Tackmann. 2016. The Multi-user Security of Authenti-
cated Encryption: AES-GCM in TLS 1.3. In CRYPTO 2016, Part I (LNCS, Vol. 9814),
Matthew Robshaw and Jonathan Katz (Eds.). Springer, Heidelberg, 247–276.
https://doi.org/10.1007/978-3-662-53018-4_10
[5] Daniel J Bernstein. 2005. The Poly1305-AES message-authentication code. In
International Workshop on Fast Software Encryption. Springer, 32–49.
[6] Daniel J Bernstein. 2005. Salsa20 specification. eSTREAM Project algorithm
description, http://www.ecrypt.eu.org/stream/salsa20pf.html (2005).
[7] Daniel J Bernstein. 2008. ChaCha, a variant of Salsa20. In Workshop Record of
SASC, Vol. 8. 3–5.
[8] Eli Biham. 2002. How to decrypt or even substitute DES-encrypted messages in
228 steps. Inform. Process. Lett. 84, 3 (2002), 117–124. https://doi.org/10.1016/
S0020-0190(02)00269-7
Improved
Time-Memory Trade-Offs with Multiple Data. In Selected Areas in Cryptography,
Bart Preneel and Stafford Tavares (Eds.). Springer Berlin Heidelberg, Berlin,
Heidelberg, 110–127.
[9] Alex Biryukov, Sourav Mukhopadhyay, and Palash Sarkar. 2006.
[10] Priyanka Bose, Viet Tung Hoang, and Stefano Tessaro. 2018. Revisiting AES-
GCM-SIV: Multi-user Security, Faster Key Derivation, and Better Bounds. In
EUROCRYPT 2018, Part I (LNCS, Vol. 10820), Jesper Buus Nielsen and Vincent
Rijmen (Eds.). Springer, Heidelberg, 468–499. https://doi.org/10.1007/978-3-319-
78381-9_18
[11] Shan Chen and John P. Steinberger. 2014. Tight Security Bounds for Key-
Alternating Ciphers. In EUROCRYPT 2014 (LNCS, Vol. 8441), Phong Q. Nguyen