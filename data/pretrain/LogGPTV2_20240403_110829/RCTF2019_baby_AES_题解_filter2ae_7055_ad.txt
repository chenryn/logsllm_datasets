                return x> i) & 0x01) * rr[i])
            return t&0xff
        lst = [[8,5,7,9],[9,8,5,7],[7,9,8,5],[5,7,9,8]]
        for i in range(4):
            cache = {}
            for a1 in range(0x100):
                for a2 in range(0x100):
                    (t1,t2,t3,t4) = FFmul(lst[0][0],a1)^FFmul(lst[0][1],a2), FFmul(lst[1][0],a1)^FFmul(lst[1][1],a2), FFmul(lst[2][0],a1)^FFmul(lst[2][1],a2), FFmul(lst[3][0],a1)^FFmul(lst[3][1],a2)
                    if (t1,t2,t3,t4) not in cache:
                        cache[(t1,t2,t3,t4)] = (a1,a2)
            flag = 0
            for a3 in range(0x100):
                for a4 in range(0x100):
                    (t1,t2,t3,t4) = FFmul(lst[0][2],a3)^FFmul(lst[0][3],a4)^res[0][i], FFmul(lst[1][2],a3)^FFmul(lst[1][3],a4)^res[1][i], FFmul(lst[2][2],a3)^FFmul(lst[2][3],a4)^res[2][i], FFmul(lst[3][2],a3)^FFmul(lst[3][3],a4)^res[3][i]
                    if (t1,t2,t3,t4) in cache:
                        res[0][i],res[1][i],res[2][i],res[3][i] = cache[(t1,t2,t3,t4)]+(a3,a4)
                        flag = 1
                        break
                if flag:
                    break
        return res
    class AES128:
        Sbox = [147, 67, 93, 110, 158, 230, 2, 61, 72, 101, 156, 57, 234, 28, 95, 1, 38, 159, 43, 236, 109, 181, 141, 132, 127, 241, 197, 130, 75, 0, 85, 227, 194, 178, 99, 143, 65, 163, 47, 77, 146, 8, 139, 79, 9, 54, 252, 22, 51, 120, 123, 118, 53, 19, 115, 107, 5, 195, 42, 126, 239, 55, 34, 78, 237, 186, 58, 116, 204, 177, 45, 89, 16, 35, 160, 125, 218, 15, 63, 62, 233, 76, 212, 17, 102, 161, 144, 40, 250, 196, 213, 223, 96, 24, 50, 104, 247, 36, 148, 11, 249, 246, 149, 185, 207, 154, 41, 37, 49, 124, 100, 203, 90, 12, 119, 113, 18, 48, 206, 134, 164, 66, 114, 94, 202, 251, 25, 106, 39, 240, 140, 243, 91, 184, 69, 86, 80, 97, 191, 199, 220, 215, 103, 117, 176, 84, 226, 21, 87, 29, 188, 30, 44, 128, 245, 145, 244, 46, 201, 238, 253, 187, 211, 68, 52, 224, 232, 7, 92, 182, 6, 13, 111, 219, 189, 255, 171, 157, 32, 168, 136, 108, 200, 190, 229, 165, 20, 208, 138, 27, 155, 64, 129, 225, 26, 209, 137, 216, 180, 254, 192, 235, 31, 121, 98, 231, 152, 170, 248, 135, 81, 214, 112, 88, 166, 150, 131, 169, 133, 142, 153, 162, 33, 23, 56, 173, 14, 83, 70, 179, 73, 105, 82, 210, 74, 193, 183, 217, 198, 3, 242, 167, 228, 174, 172, 4, 221, 59, 71, 60, 10, 151, 175, 222, 122, 205]
        Sbox_r = [29, 15, 6, 239, 245, 56, 170, 167, 41, 44, 250, 99, 113, 171, 226, 77, 72, 83, 116, 53, 186, 147, 47, 223, 93, 126, 194, 189, 13, 149, 151, 202, 178, 222, 62, 73, 97, 107, 16, 128, 87, 106, 58, 18, 152, 70, 157, 38, 117, 108, 94, 48, 164, 52, 45, 61, 224, 11, 66, 247, 249, 7, 79, 78, 191, 36, 121, 1, 163, 134, 228, 248, 8, 230, 234, 28, 81, 39, 63, 43, 136, 210, 232, 227, 145, 30, 135, 148, 213, 71, 112, 132, 168, 2, 123, 14, 92, 137, 204, 34, 110, 9, 84, 142, 95, 231, 127, 55, 181, 20, 3, 172, 212, 115, 122, 54, 67, 143, 51, 114, 49, 203, 254, 50, 109, 75, 59, 24, 153, 192, 27, 216, 23, 218, 119, 209, 180, 196, 188, 42, 130, 22, 219, 35, 86, 155, 40, 0, 98, 102, 215, 251, 206, 220, 105, 190, 10, 177, 4, 17, 74, 85, 221, 37, 120, 185, 214, 241, 179, 217, 207, 176, 244, 225, 243, 252, 144, 69, 33, 229, 198, 21, 169, 236, 133, 103, 65, 161, 150, 174, 183, 138, 200, 235, 32, 57, 89, 26, 238, 139, 182, 158, 124, 111, 68, 255, 118, 104, 187, 195, 233, 162, 82, 90, 211, 141, 197, 237, 76, 173, 140, 246, 253, 91, 165, 193, 146, 31, 242, 184, 5, 205, 166, 80, 12, 201, 19, 64, 159, 60, 129, 25, 240, 131, 156, 154, 101, 96, 208, 100, 88, 125, 46, 160, 199, 175]
        RC = [0x00,0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36]
        def __init__(self, key):
            self.subkey = self.key_get(key,)
        def permute(self, lst, tb):
            return [tb[(i>>4) * 16 + (i&0x0f)] for i in lst]
        def key_get(self, key):
            def g(lst,lk):
                lstt = bit_rot_left(lst, 1)
                lstt = self.permute(lstt, self.Sbox)
                lstt[0] ^= self.RC[lk//4]
                return lstt
            tmpK = [[0] * 4 for i in range(44)]
            for i in range(4):
                for j in range(4):
                    tmpK[i][j] = ord(key[4*i+j])
            for i in range(4,44):
                if i % 4:
                    tmpK[i] = lst_xor(tmpK[i-4], tmpK[i-1])
                else:
                    tmpK[i] = lst_xor(tmpK[i-4], g(tmpK[i-1],i))
            return tmpK
        def SubBytes(self):
            self.tmp = [self.permute(i, self.Sbox) for i in self.tmp]
            return
        def SubBytesInv(self):
            self.tmp = [self.permute(i, self.Sbox_r) for i in self.tmp]
            return
        def ShiftRows(self):
            self.tmp = [bit_rot_left(self.tmp[i], i) for i in range(4)]
            return
        def ShiftRowsInv(self):
            self.tmp = [bit_rot_right(self.tmp[i], i) for i in range(4)]
            return
        def MixColumns(self):
            def FFmul(a,b):
                rr = [a]
                def xtime(x):
                    return x> i) & 0x01) * rr[i])
                return t&0xff
            lst = [[8,5,7,9],[9,8,5,7],[7,9,8,5],[5,7,9,8]]