Script attempted to create global variable 'x'
redis> EVAL "x = 10" 0
$ redis-cli --eval wrong-command.lua
call
(error)
保护 Lua 的全局环境
_df1ad3745c2d2f078f0f41377a92bb6f8ac79af0):
running script
图 20-1服务器状态中的 Lua 环境
redisServer
lua
1
第20章Lua脚本327
Lua环境
---
## Page 332
328·第四部分独立功能的实现
器三者之间的通信过程（调用redis.pcall 函数时产生的通信过程也是一样的）。
返回值返回给脚本中的调用者。
pcall 函数。
完成以下步骤：
脚本中包含的所有 Redis 命令。
命令，Redis 服务器专门为Lua 环境创建了一个伪客户端，并由这个伪客户端负责处理Lua
20.2.1伪客户端
lua_scripts 字典。
6）接收到结果的 redis.call函数或者 redis.pcall 函数会将命令结果作为函数
Lua 脚本使用redis.call 函数或者 redis.pcall 函数执行一个 Redis 命令，需要
图 20-2 展示了Lua 脚本在调用redis.call 函数时，Lua 环境、伪客户端、命令执行
因为执行 Redis 命令必须有相应的客户端状态，
5）Lua 环境在接收到命令结果之后，将该结果返回给redis.call 函数或者redis，
4）伪客户端接收命令执行器返回的命令结果，并将这个命令结果返回给Lua环境。
3）命令执行器执行伪客户端传给它的命令，并将命令的执行结果返回给伪客户端。
2）伪客户端将脚本想要执行的命令传给命令执行器。
1）Lua环境将 redis.call 函数或者redis.pcall函数想要执行的命令传给伪客户端。
接下来的两个小节将分别介绍这两个组件。
Lua环境、
举个例子，图20-3展示了Lua脚本在执行以下命令时：
(integer) 10086
a环境
n
、伪客户端、命令执行器三者之间的通信过程。
a环境
4) 将命令结果 10086 传回给 Lua 环境
n
L
4）将命令结果传回给Lua环境
想要执行的Redis命令
1)传送redis.call函数
图 20-3Lua 脚本执行 DBSIZE 命令时的通信步骤
1)传送DBSIZE请求
图 20-2
Lua 脚本执行 Redis 命令时的通信步骤
伪客户端
伪客户
2)将DBSIZE 命令传给执行器执行
3)返回命令的执行结果10086
2) 将命令传给执行器执行
3）返回命令的执行结果
所以为了执行Lua脚本中包含的 Redis
命令执行器
命令执行器
---
## Page 333
20.3
本复制功能，本章稍后将详细说明 lua_scripts 字典在这两个功能中的作用。
20-4所示。
令载人过的 Lua 脚本都保存到lua_sCripts 字典里面。
校验和对应的 Lua脚本：
字典，这个字典的键为某个Lua 脚本的 SHA1 校验和（checksum），而字典的值则是 SHA1
20.2.2
除了伪客户端之外，Redis 服务器为 Lua 环境创建的另一个协作组件是lua_scripts
1）根据客户端给定的 Lua 脚本，在Lua 环境中定义一个Lua 函数。
EVAL命令的执行过程可以分为以下三个步骤：
lua_scripts字典有两个作用，一个是实现 SCRIPT EXISTS命令，另一个是实现脚
那么服务器的 lua_scripts 字典将包含被 SCRIPT LOAD 命令载人的三个 Lua脚本，如图
举个例子，如果客户端向服务器发送以下命令：
Redis 服务器会将所有被 EVAL 命令执行过的 Lua 脚本，以及所有被 SCRIPT LOAD 命
"4475bfb5919b5ad16424cb50f74d4724ae833e72"
redis> SCRIPT LOAD "return I+1"
"2f31ba2bb6d6a0f42cc159d2e2dad55440778de3"
struct redisServer
'a27e7e8a43702b7046d4f6a7ccf5b60cef6b9bd9"
EVAL 命令的实现
！.··
dict *lua_scripts;
lua_scripts 字典
"4475bfb5919b5ad16424cb50f74d4724ae833e72"
"a27e7e8a43702b7046d4f6a7ccf5b60cef6b9bd9"
"2f31ba2bb6d6a0f42cc159d2e2dad55440778de3"
图20-4
lua_scripts
lua_scripts 字典示例
> "return 1+1"
"return 2*2"
"return 'hi""
第20章Lua脚本·329
---
## Page 334
330·第四部分独立功能的实现
SHA1 校验和：
里面。举个例子，对于命令：
20.3.2将脚本保存到 lua_scripts 字典
6b470dc5a0dd9b4bf2030dea6d65de91， 而函数的体则为 return 'he1lo world'。
5332031c6b470dc5a0dd9b4bf2030dea6d65de91，所以函数的名字为f_5332031c
是脚本本身。
的名字由f_前缀加上脚本的 SHA1校验和（四十个字符长）组成，而函数的体（body）则
就是在Lua 环境中，为传人的脚本定义一个与这个脚本相对应的Lua 函数，其中，Lua 函数
20.3.1定义脚本函数
来说，服务器将在lua_sCripts 字典中新添加一个键值对，其中键为 Lua 脚本的
EVAL 命令要做的第二件事是将客户端传入的脚本保存到服务器的 lua_scripts 字典
举个例子，对于命令：
当客户端向服务器发送EVAL命令，要求执行某个Lua脚本的时候，服务器首先要做的
口 如果某个脚本所对应的函数在Lua 环境中被定义过至少一次，那么只要记得这个脚
口通过函数的局部性来让Lua环境保持清洁，减少了垃圾回收的工作量，并且避免了
口执行脚本的步骤非常简单，只要调用与脚本相对应的函数即可。
使用函数来保存客户端传人的脚本有以下好处：
function f_5332031c6b470dc5a0dd9b4bf2030dea6d65de91()
来说，服务器将在Lua环境中定义以下函数：
EVAL "return 'hello worla'" 0
命令为示例，分别介绍EVAL命令执行的三个步骤。
以下三个小节将以：
3）执行刚刚在 Lua 环境中定义的函数，以此来执行客户端给定的Lua 脚本。
2）将客户端给定的脚本保存到lua_scripts 字典，等待将来进一步使用。
end
使用全局变量。
现时就会说到这一点。
函数来执行脚本，这是EVALSHA命令的实现原理，稍后在介绍EVALSHA命令的实
本的 SHA1校验和，服务器就可以在不知道脚本本身的情况下，直接通过调用Lua
'hello world'
---
## Page 335
"helloworld"保存到客户端状态的输出缓冲区里面。
数组或 ARGV 数组这一步。
果返回给客户端。
让客户端通过SCRIPTKILL命令停止脚本，或者通过SHUTDOWN命令直接关闭服务器。
ARGV 数组，然后将这两个数组作为全局变量传人到Lua 环境里面。
一些设置钩子、传入参数之类的准备动作，才能正式开始执行脚本。
20.3.3
2）为Lua 环境装载超时处理钩子（hook），这个钩子可以在脚本出现超时运行情况时
在为脚本定义函数，并且将脚本保存到 lua_scripts 字典之后，服务器还需要进行
0 u.PIaom ottou, uInsai, Tha?
至此，命令：
6）对 Lua 环境执行垃圾回收操作。
5）将执行 f_5332031c6b470dc5a0dd9b4bf2030dea6d65de91函数所得的结果
4）移除超时钩子。
3）在 Lua 环境中执行f_5332031c6b470dc5a0dd9b4bf2030dea6d65de91函数。
2）为Lua环境装载超时处理钩子。
1）因为这个脚本没有给定任何键名参数或者脚本参数，所以服务器会跳过传值到KEYS
EVAL "return 'hello world'" 0
举个例子，对于如下命令：
6）对 Lua环境执行垃圾回收操作。
5）将执行脚本函数所得的结果保存到客户端状态的输出缓冲区里面，等待服务器将结
4）移除之前装载的超时钩子。
3）执行脚本函数。
1）将EVAL命令中传人的键名（key name）参数和脚本参数分别保存到 KEYS 数组和
服务器将执行以下动作：
整个准备和执行脚本的过程如下：
添加新键值对之后的 lua_scripts 字典如图 20-5 所示。
return 'hello world'
而值则为 Lua 脚本本身：
5332031c6b470dc5a0dd9b4bf2030dea6d65de91
执行脚本函数
"5332031c6b470dc5a0dd9b4bf2030dea6d65de91"
图 20-5添加新键值对之后的 lua_scripts字典
lua_scripts
".PIzom otTeu. urnzat, 
第20章
Lua脚本331
---
## Page 336
332·第四部分独立功能的实现
并将结果"helloworld"返回给客户端。
服务器执行Lua环境中的f_5332031c6b470dc5a0dd9b4bf2030dea6d65de91函数,
9b4bf2030dea6d65de91是否存在于Lua环境中，得到的回应是该函数确实存在，于是
就是EVALSHA命令的实现原理。
户端也可以根据脚本的SHA1校验和来调用脚本对应的函数，从而达到执行脚本的目的，这
长的 SHA1 校验和组成，例如 f_5332031c6b470dc5a0dd9b4bf2030dea6d65de91。
Lua 环境里面都有一个与这个脚本相对应的 Lua函数，函数的名字由f_前缀加上 40 个字符
20.4EVALSHA 命令的实现
命令的客户端就可以了。
执行算是告一段落，之后服务器只要将保存在输出缓冲区里面的执行结果返回给执行EVAL
只要脚本对应的函数曾经在Lua 环境里面定义过，那么即使不知道脚本的内容本身，
本章前面介绍 EVAL 命令的实现时说过，每个被 EVAL 命令成功执行过的 Lua 脚本，在
服务器首先根据客户端输人的 SHA1校验和，检查函数f_5332031c6b470dc5a0dd
当客户端执行以下EVALSHA命令时：
举个例子，当服务器执行完以下EVAL命令之后：
可以用伪代码来描述这一原理：
"hello world"
end
function f_5332031c6b470dc5a0dd9b4bf2030dea6d65de91()
Lua环境里面就定义了以下函数：
def EVALSHA(shal):
return
else:
if function_exists_in_lua_env(func_name) :
业查看这个函数在 Lua 环境中是否存在
#拼接出函数的名字
 send_script_error("SCRIPT NOT FOUND")
#如果函数不存在，那么返回一个错误
execute_lua_function(func_name)
#如果函数存在，那么执行它
'hello world'
+ shal
客
---
## Page 337
的，以下是该命令的实现伪代码：
器中。
20.5.2
重建 lua_scripts 字典，关闭现有的 Lua 环境并重新创建一个新的 Lua 环境。
20.5.1 SCRIPT FLUSH 
KILL命令。
们分别是 SCRIPT FLUSH 命令、SCRIPT EXISTS 命令、SCRIPT LOAD 命令、以及 SCRIPT
20.5脚本管理命令的实现
SCRIPT EXISTS命令根据输人的 SHA1校验和，检查校验和对应的脚本是否存在于服务
SCRIPT FLUSH命令用于清除服务器中所有和Lua脚本有关的信息，这个命令会释放并
SCRIPT EX7STS 命令是通过检查给定的校验和是否存在于 lua_scripts 字典来实现
接下来的四个小节将分别对这四个命令的实现原理进行介绍。
除了EVAL 命令和 EVALSHA 命令之外，Redis 中与 Lua 脚本有关的命令还有四个，它
def SCRIPT_EXISTS (*shal_list):.
def SCRIPT_FLUSH():
以下为SCRIPTFLUSH命令的实现伪代码：
for shal in sha1_list:
鲁遍历输入的所有 SHA1 校验和
resuit_list = [] 
鲁结巢列表 
 SCRIPT EXISTS
server.lua
#初始化--个新的 Lua 环境
lua_close(server.lua)
鲁关闭Lua 环境  
server.lua_scripts = dictcreate(...)
#重建脚本字典
dictRelease(server.lua_scripts)
#释放脚本字典
else:
存在用1表示
init_Iua_env()
交验和对应的脚本存在
第20章Lua脚本·333
---
## Page 338
334·第四部分独立功能的实现
首先在 Lua 环境中为脚本创建相对应的函数，然后再将脚本保存到 lua_scripts 字典里面。
20.5.3
实现原理的介绍。
又保存脚本本身的原因是为了实现脚本复制功能，详细的情况请看本章稍后对脚本复制功能
就可以了，并不需要保存Lua 脚本本身。lua_scripts字典既保存脚本的 SHA1校验和
字典只用于实现SCRIPT EXISTS命令的话，那么字典只需要保存Lua脚本的SHA1校验和
以示例里分开多次来进行测试。
注意
SCRIPT LOAD 命令所做的事情和 EVAL 命令执行脚本时所做的前两步完全一样：命令
举个例子，如果我们执行以下命令：
实现 SCRIPT EXISTS 实际上并不需要 lua_scripts 字典的值。如果lua_scripts
SCRIPTEXISTS命令允许一次传入多个 SHA1 校验和，不过因为 SHAI 校验和太长，所
"2f31ba2bb6d6a0f42cc159d2e2dad55440778de3"
从测试结果可知，除了最后一个校验和之外，其他校验和对应的脚本都存在于服务器中。
1）（integer）1
举个例子，对于图 20-6 所示的 lua_scripts 字典来说，我们可以进行以下测试:
1）（integer)0
 SCRIPT LOAD
send_list_reply(result_list)
#向客户端返回结果列表
"475bfb5919b5ad16424cb50f74d4724ae833e72"
"2f31ba2bb6d6a0f42cc159d2e2dad55440778de3"
result_list.append(0)
#不存在用0表示
lua_scripts
→ "return l+1"
"return 2*2"
"return 'hi"
---
## Page 339
来停止服务器，
可以继续运行。
本，并向执行该脚本的客户端发送一个错误回复。处理完 SCRIPT KILL 命令之后，服务器
KILL命令来指示服务器停止执行这个脚
写入操作，那么客户端可以通过SCRIPT
脚本的运行过程。
SHUTDOWN命令到达服务器。
中，查看是否有SCRIPTKILL命令或者
时长，钩子将定期在脚本运行的间
过
一旦钩子发现脚本的运行时间已经
定期检查脚本已经运行了多长时间，
设置一个超时处理钩子（hook）。
脚本之前，服务器都会在 Lua 环境里面
limit 配置选项，那么在每次执行 Lua
20.5.4
命令载人的脚本了：
‘hi‘"的键值对添加到服务器的 lua_scripts 字典里面，如图 20-7所示。
另一方面，
如果超时运行的脚本未执行过任何
超时处理钩子在脚本运行期间，会
图 20-8展示了带有超时处理钩子的
了lua-time-limit选项设置！
如果服务器设置了lua-time-
完成了这些步骤之后，客户端就可以使用EVALSHA命令来执行前面被 SCRIPTLOAD
并将键为"2f31ba2bb6d6a0f42cc159d2e2dad55440778de3",
end
那么服务器将在Lua 环境中创建以下函数：
 return
 SCRIPT KILL