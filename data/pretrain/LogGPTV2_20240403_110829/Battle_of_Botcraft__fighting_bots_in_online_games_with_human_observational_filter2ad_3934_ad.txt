r
T
 0.99
 0.98
 0.97
 0.96
 0.95
 0.94
 0.93
 0.92
 0.91
 0.9
 0.89
 0.88
2 actions
4 actions
6 actions
8 actions
 60
 70
 20
 30
 40
 50
# of Nodes
2 actions
4 actions
6 actions
8 actions
 60
 70
(a) True Positive Rate
(b) True Negative Rate
Figure 9: True Positive and Negative Rates versus # of Accumulated Actions and # of Nodes
Table 2: True Positive and Negative Rates versus Thresholds and # of Accumulated Outputs
Threshold
0.25
0.5
0.75
0.9
0.95
0.975
# of Accumulated Outputs
1
0.978
0.959
0.961
0.976
0.926
0.985
0.859
0.991
0.775
0.994
0.624
0.996
3
0.995
0.977
0.991
0.990
0.980
0.995
0.935
0.998
0.856
0.999
0.668
0.999
5
0.997
0.983
0.997
0.994
0.992
0.997
0.964
0.999
0.895
0.999
0.700
0.999
7
0.999
0.987
0.998
0.996
0.997
0.998
0.980
0.999
0.922
0.999
0.723
0.999
9
0.999
0.990
0.999
0.998
0.998
1.000
0.985
1.000
0.940
1.000
0.737
1.000
11
1.000
0.992
1.000
0.998
0.998
0.999
0.996
0.999
0.947
0.999
0.757
0.999
13
1.000
0.994
1.000
0.998
0.998
0.999
0.995
0.999
0.958
0.999
0.770
0.999
15
1.000
0.994
1.000
0.998
1.000
1.000
0.996
1.000
0.969
1.000
0.776
1.000
17
1.000
0.996
1.000
0.999
1.000
1.000
0.995
1.000
0.976
1.000
0.792
1.000
19
1.000
0.996
1.000
0.998
1.000
0.999
0.998
0.999
0.975
0.999
0.796
0.999
21
1.000
0.997
1.000
0.999
1.000
1.000
0.998
1.000
0.983
1.000
0.804
1.000
action varies. The average time cost per action, ignoring idle
periods longer than 10 seconds, is 1.10 seconds. If a player
is idle, strictly speaking, no one is “operating” the game,
so no decision can be made. Of course, idle players (bots
or humans) are not performing any actions and should not
be a concern. Based on the total number of actions and
the average time cost per action, Figure 10 illustrates the
decision time distribution for bots and humans. From the
decision time distribution, we can see that our HOP system
is able to make decisions for capturing bots within 39.60
seconds on average.
Note that we perform the same experiments with BP neu-
ral networks and observe that the cascade neural network is
more accurate in bot classiﬁcation than BP neural networks
that use incremental, quick propagation, or resilient propa-
gation method. The results for BP neural networks are not
included in the paper due to space limit.
5.3 Detection of Other Game Bots
To further test our HOP system, without retraining the
neural network, we perform a smaller experiment on a dif-
ferent game bot from a diﬀerent game. While Diablo 2 is not
an MMOG, it has an MMOG-like economy (items may be
traded with thousands of other players) and is also plagued
by game bots. This set of experiments studies MMBot, a
popular free bot for Diablo 2 that is built using the AutoIt
scripting language [4]. Similar to Glider, MMBot automates
various tasks in the game to accumulate treasure or expe-
rience. However, unlike Glider, MMBot does not read the
memory space of the game, but instead is based entirely on
keyboard/mouse automation, and pixel scanning. As Diablo
2 has a much diﬀerent interface (top-down isometric view
rather than ﬁrst person view like World of Warcraft) and
much diﬀerent controls, the purpose of these experiments is
to test how general our system is and to show that it is not
limited to any speciﬁc bot or game.
We collect a total of 20 hours of Diablo 2 traces, both bot
and human. We run MMBot for 10 hours and have 5 humans
play Diablo 2 for a total of 10 hours. We then reuse our
existing neural network (40 nodes, 4 action-input, 9 inputs
per block) with the adjusted threshold value to optimize our
detection results. Without retraining, the neural network
achieves a true positive rate of 0.864 on the bot and a true
negative rate of 1.0 on the human players. This result shows
that our HOP system is able to capture certain invariants in
the behavior of bots across diﬀerent games and diﬀerent bot
implementations, indicating the possible potential of HOP-
based systems for other applications.
264Table 3: True Positive Rates for Bots
Bots
#1
0.988
#2
1.000
#3
0.998
#4
1.000
#5
1.000
#6
1.000
#7
1.000
#8
1.000
#9
0.998
#10
1.000
 0.07
 0.06
 0.05
 0.04
 0.03
 0.02
 0.01
n
o
i
t
r
o
p
o
r
P
 0
 0
 0.07
 0.06
 0.05
 0.04
 0.03
 0.02
 0.01
n
o
i
t
r
o
p
o
r
P
 0
 0
 20
 40
 60
 80
 100
Decision Time (sec.)
(b) Human
 20
 40
 60
 80
 100
Decision Time (sec.)
(a) Bot
5.4 System Overhead
6. LIMITATIONS
Figure 10: Decision Time Distribution
Our proposed system at the server side (i.e., the server-
side analyzer) is required to process thousands of users si-
multaneously in real-time, so it must be eﬃcient in terms of
memory and computation. Now we estimate the overhead
of the analyzer for supporting 5,000 users, far more than
the regular workload of a typical World of Warcraft server.
The analyzer process, which includes the neural network, is
proﬁled using valgrind and consumes only 37 KBytes of
memory during operation. The prototype of our system is
designed to use a single-thread multiple-client model with
time-multiplexing, and thus only one process is used. Of
course, additional processes could be used to process in par-
allel.
The primary memory requirement is to accommodate the
accumulated user-input actions and neural network outputs
for each online user. A single user-input action consumes 16
bytes, 4 bytes each for distance, duration, and displacement,
and 2 bytes each for virtual key and angle. A block of 4 user-
input actions consumes 64 bytes. A block of up to 16 neural
network outputs requires 2 bytes as a bit-array. The per-
user memory requirement is approximately 66 bytes, barely
more than the maximum length of account names on World
of Warcraft, which is 64 bytes. If 66 bytes is scaled to 5,000
online users, this is only 330 KBytes in total, which is neg-
ligible considering that the game currently stores the posi-
tion, level, health, and literally dozens of other attributes
and items for each user.
The computational overhead is also very low. The compu-
tation time for processing all 95 hours of traces is measured
using the Linux time command. The analyzer can process
the full set of traces, over 286,626 user-input actions, in only
385 milliseconds on a Pentium 4 Xeon 3.0Ghz.
In other
words, the analyzer can process approximately 296 hours of
traces per second using a single CPU. A server with 5,000
users would generate approximately 1.38 hours of traces per
second, a tiny fraction of the above processing rate.
The limitations of this research work are mainly in two as-
pects: experimental limitations and potential evasion against
the HOP system. In the following, we give a detailed de-
scription of these limitations.
6.1 Experimental Limitations
The size of our player group, 30, is insuﬃcient to cover
all kinds of human playing behaviors. It would be better to
have a larger group size for characterizing the human play-
ing behaviors in MMOGs. In addition, our study is mainly
conducted in a lab environment, which limits the possible
variations in hardware, as well as other environmental fac-
tors. Although lab settings allow for greater control, they
are less ecologically valid than natural settings, where people
play games on their home computers. In our future work, we
plan to recruit a larger number of players with more players
playing at home.
Our analysis is limited to one type of bots in one game.
Although Glider is a typical World of Warcraft bot, there
are a number of other bots [39,41,44,54] and their behaviors
may vary. Moreover, other games may be quite diﬀerent
from World of Warcraft in terms of game plays, controls,
and so on. A further study across multiple MMOGs with
multiple bots is needed to conﬁrm whether our HOP system
is eﬀective for broader applications. Additionally, while the
bot and human characters in our study overlap in levels
and classes, a more controlled experiment with the exact
matchings in levels, classes, items, and skills, could lead to
more accurate experimental results.
A few details of our experiments cannot be fully described
due to limited space, which could hinder the reproduction of
our work. In particular, the exact waypoints that the game
bots followed and the monsters they fought are not included
in the paper. To compensate for this limitation, we have
made our bot proﬁles and our detection system available
online at http://www.cs.wm.edu/~hnw/hop/.
2656.2 Potential Evasion
7. RELATED WORK
Like other intrusion detection systems, HOPs are open to
future evasions. Upon the adoption of the proposed HOP
system, the bot creators will seek various ways to evade it.
The focus of the following discussion is on two main potential
evasions: (1) bots could either interfere with the user-input
collection or manipulate the user-input stream at the client
side; and (2) bots could mimic human behaviors to evade
detection.