the two parties may be interleaved. deliver-A checks that A cor-
rectly decrypts the original plaintext, enforcing correctness (other-
wise win reveals b to the adversary).
At the end of the game, the predicate 2SM-safe in Figure 12
is evaluated on the sequence of queries q1, . . . , qq made by the
adversary, and if it is false, the adversary loses. This is to prevent
trivial attacks, in which the adversary compromises a user’s state
Session 6D: Authentication and Privacy CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2040init
1 : b ←$ {0, 1}
(pkA , skA) ←$ PKE-Gen()
2 :
(pkB , skB) ←$ PKE-Gen()
3 :
4 : σA ← 2SM-Init(skA , pkB)
5 : σB ← 2SM-Init(skB , pkA)
6 : public ciphertextsA[·], ciphertextsB[·] ← ε
7 : plaintextsA[·], plaintextsB[·] ← ε
8 : nextSendA , nextSendB ← 1
9 : nextDeliveredA , nextDeliveredB ← 1
10 :
return (pkA , pkB)
compromise-A
1 :
return σA
send-A(m)
1 : plaintextsA[nextSendA] ← m
2 :
3 : nextSendA + +
(σA , ciphertextsA[nextSendA]) ← 2SM-Send(σA , m)
require nextDeliveredB  j ∧ (qk’s ciphertext was delivered
Figure 12: Safety predicate 2SM-safe. Note the similarity to safe
in Figure 10.
and then uses it directly to decrypt a message. Specifically, 2SM-safe
says that a compromise is allowed so long as for each challenged
ciphertext c, one of the following holds.
Forward secrecy The compromised user had already received c
before being compromised.
Per-message PCS After being compromised, the compromised
user sent a message, and the other user had received that
message before sending c.
An adversary wins the 2SM security game if it correctly guesses
the random bit b in the end and the safety predicate 2SM-safe in
Figure 12 evaluates to true on the queries made by the adversary.
Definition 6. A non-adaptive (t, q)-adversary is an adversary A
that runs in time t, makes at most q queries, and must specify the
sequence of queries it plans to make in advance, before seeing the
result of any queries. The advantage of A against a 2SM scheme
2SM is
(cid:12)(cid:12)(cid:12)(cid:12)Pr[A wins] − 1
2
(cid:12)(cid:12)(cid:12)(cid:12) .
Adv2SM2sm-na(A) := 2
Definition 7. A 2SM scheme is non-adaptively (t, q, ϵ)-secure if for
all (t, q)-adversaries A,
Adv2SM2sm-na(A) ≤ ϵ .
C DCGKA SECURITY PROOF
We now prove the security of our DCGKA protocol (Theorem 4).
As described in Section 7, we achieve slightly suboptimal PCS in
the face of concurrent updates. We formalize the weakened security
property that we do achieve by replacing the predicate safe in the
DCGKA security game with the predicate dom-safe defined in
Figure 13. Like safe, dom-safe says that a challenge is allowed so
long as each compromise falls into one of three cases (the cases in
the disjunction): forward secrecy, PCS, or group membership.
Forward secrecy is unchanged from safe. For PCS, dom-safe
differs from safe in that for each challenge qi, all update messages
message(qk) providing PCS must be causally prior to a “dominat-
ing” update (or remove or create) message message(qd) that is
itself causally prior to the challenged message. If multiple group
members are compromised and then update concurrently, but no
such dominating message has been sent, then we do not guarantee
security. Indeed, the adversary can decrypt each of the concurrent
updates’ seed secrets by using a different compromised member’s
state. Such a dominating message always exists if there are multiple
sequential updates (the last one dominates), but it does not exist if
multiple group members update concurrently and no subsequent
updates have been sent.
For group membership, instead of allowing the adversary to com-
promise users who should not decrypt the challenged message, we
only allow the adversary to compromise users who should also not
decrypt the dominating message message(qd). This is because if
multiple users are removed concurrently without a subsequent dom-
inating message, then the adversary (or the users in collusion) can
decrypt each of the concurrent remove messages’ seed secrets by
using a different removed user’s state. Similarly, if a user is removed
as a side-effect of an add message due to the DGM scheme, that add
message does not actually include a fresh secret, so confidentiality
is not guaranteed until the next update or remove message. We also
do not allow the adversary to compromise users who are added to
the group in between the dominating message and the challenged
message, except as permitted by the usual forward secrecy and PCS,
since those users may be able to decrypt the challenged message.
Given this safety predicate, the basic idea of our security proof
is that all 2SM instances used by message(qd) are uncompromised,
hence qd’s seed secret is unknown to the adversary. The same then
holds for the challenged update secret, since that secret factors
Session 6D: Authentication and Privacy CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2041dom-safe(q1, . . . , qq) :=
(cid:1)
∃d
create-group(−)(cid:1)∧
∀(cid:0)i s.t. qi = challenge(ID, c) for some ID, c(cid:1)
(cid:18)(cid:0)qd = send-update(−), remove-user(−), or
(cid:0)message(qd) ⪯ controlMsgs[ID, c](cid:1)∧
∀(cid:0)j s.t. qj = compromise(ID′) for some ID′(cid:1)
(cid:16)(cid:0)delivered[ID, c, ID′] was true at the time of qj
∃k(cid:0)qk = send-update(ID′) ∧ k > j ∧
message(qk) ⪯ message(qd)(cid:1)
(cid:0)¬should-decrypt(message(qd), ID′) ∧
∄a(cid:0)qa = add-user(−, ID′)∧
message(qa) ⪯ controlMsgs[ID, c](cid:1)(cid:1)(cid:17)(cid:19)
message(qa) ⊀ message(qd)
Figure 13: Safety predicate dom-safe for our protocol.
message(q) denotes the control message generated during q.
into qd’s seed secret via the key ratchet. Later compromises by the
adversary are foiled by forward secrecy, which we guarantee by
using the key ratchet and deleting secrets after use.
Lemma 8 (Correctness). Let DGM be a DGM protocol satisfying
the restrictions in Section 6.2, and assume user additions are unique.
Then our DCGKA protocol is correct. That is, for any adversary, none
of the win clauses in the security game will ever be triggered. This
holds even if we relax the requirement of causally ordered delivery to
the weaker ordering requirement described in Section 8.1, by replacing
the causal order ≺ in the security game with the partial order ≺ack
defined by the transitive closure of the rules:
• controlMsgs[ID, c] ≺ack controlMsgs[ID, c′] for all ID and
all c < c′.
• T ≺ack T ′ whenever T ′ is an ack or add-ack message acknowl-
edging T .
Proof. Claim 1: All 2SM protocol messages decrypt correctly.
This claim follows from the correctness of the 2SM protocol, since
for each pair of users ID, ID′, all 2SM messages from ID to ID′ are
delivered in order. Note that we initialize the 2SM protocol instances
γ .2sm[·] as needed in functions encrypt-to and decrypt-from.
Claim 2: All calls to member-view are correct in the following
sense: whenever a user ID calls member-view(γ , ID′) for some ID′
(possibly ID′ = ID) while processing a control message T , the returned
set of group members is
′ | in-history(T ′, ID′) was true immediately
after ID′ generated T(cid:9)(cid:1).
DGM(cid:0)(cid:8)T
A single exception is the call on line 2 of remove, in which case
the removed user’s removal is not reflected in the return value of
member-view, but they are correctly removed by line 2 (this is correct
by the DGM restriction requiring removes to be have as expected at
their sender).
To prove this claim, it suffices to prove that in the claim’s scenario,
ID’s γ .history contains at least the metadata of all suchT ′ that affect
group membership (create, add, and remove messages, plus acks
and add-acks of such messages). The claim follows since lines 1–2
of member-view serve to pick out precisely the given set of T ′ from
γ .history.
First suppose ID has not sent or received any messages prior
to sending or receiving T . There are only three possibilities: ID
is processing their own create message (via line 3 of create); ID
is processing another user’s create message; or ID is processing a
welcome message. (The valid-member checks on line 1 of oracles
add-user, remove-user, and send-update rule out their correspond-
ing protocol functions, and the causally-ready ∨ add-ready check
on lines 4–5 of oracle deliver only permit create or welcome mes-
sages in this scenario.) In the first and second possibilities, the claim
holds due to lines 1–2 of process-create. In the third possibility, the
claim holds by line 1 of process-welcome and by inductively ap-
plying our claim to the adding user; note in this case that the add
message is included in adderHistory due to lines 3–4 of add.
Now suppose ID has sent or received at least one message prior
to T . By our assumption that ID is added at most once, T is not a wel-
come message. Thus either ID is the author of T , or causally-ready(
T , ID) was true on line 4 of oracle deliver. In both cases, it fol-
lows inductively that all desired T ′ except T itself are contained
in γ .history. Finally, if T affects group membership, then one can
check that in every case, it is added to γ .history before the call to
member-view (e.g., lines 1–2 of process-remove), with the permit-
ted exception of line 2 in function remove.
Claim 3: We have the invariant: for each pair of users ID, ID′
with states γ , γ ′, respectively, at any time, letting T be the most re-
cent control message sent by ID′ that ID has received and such that
should-decrypt(T , ID) holds, γ .ratchet[ID′] has the same value that
γ ′.ratchet[ID′] had immediately after generating T .
Initially, this invariant is true as all users’ ratchet states are all
ε. Subsequently, we break into cases depending on T . It suffices to
prove that ID calls update-ratchet(γ , ID, input) with the same input
as ID′ did when processing T , since only calls to update-ratchet(γ ,
ID,−) update γ .ratchet[ID′], such calls only occur while processing
messages from ID′, and such messages are delivered in order due
to line 4 in oracle deliver and the definition of ≺ack.
If T is a create, update, remove, or ack message, except for acks
generated by process-welcome, then both ID and ID′ derive the
same member secret for ID′, hence update the ratchet states identi-
cally. Note that for an ack message, we make use of the assumption
that ID received the acknowledged message before the ack, hence
ID has the member secret available. We also use the fact that if T is
an ack and ID could not decrypt the acknowledged message, then
ID′ forwards their member secret to ID in the direct message, due
to lines 16–19 of process-seed (this fact depends on Claim 2). Add
and add-ack messages, and acks generated by process-welcome,
are similar, noting that all recipients ratchet their states forward
even if they were not intended recipients of an add message, but
with some special cases concerning the added user:
Session 6D: Authentication and Privacy CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2042• All group members in the added user’s view of the group (af-
ter processing the addition) receive the added user’s member
secret: they can compute it directly from the adder’s ratchet.
Here we use our DGM restriction that the add message be-
haves as expected at its sender, which implies that the added
user’s view of the group, DGM(adderHistory), equals the
adder’s view of the group plus the added user.
• The added user knows all other group member’s previous
ratchet states when processing their add/add-ack: these are
forwarded to the added user in the add message (in the
adder’s case) or in the add-ack messages (all others).
Using these claims, we are now ready to prove that none of the
win clauses in the security game are ever activated.
The win clauses outside of deliver mandate that the protocol
always returns non-ε control messages and update secrets from
create, add, remove, and update. Non-ε control messages are ob-
vious. For create, remove, and update, the update secret is non-ε
because process-seed will always take the return path on line
12 with Isender (cid:44) ε. For add, the update secret is non-ε because
γ .myId ∈ member-view(γ , γ .myId) on line 5 of process-add. (It is
always the case that γ .myId ∈ member-view(γ , γ .myId), due to
Claim 2: the should-receive check in oracle deliver, plus the se-
quential semantics DGM restriction and the ID (cid:44) ID′ check in
oracle remove-user, together ensure that a user can never have a
history that makes them not a group member.)
We next consider the win clause on line 16 of oracle deliver,
which mandates nontrivial response messages and update secrets
Ime after receiving a decryptable create, remove, or update mes-
sage, or any add message. This is easily checked for add mes-
sages. For decryptable create, remove, and update messages, their
process- functions all use the response message and its update se-
cret returned by process-seed. Claim 2 guarantees that because
should-decrypt holds, recipients on line 1 of process-seed must
contain γ .myId. Hence lines 4–5 are activated. Also, line 2 of oracle
deliver ensures that users are not delivered their own messages,
so line 12 of process-seed is not activated. Thus process-seed re-
turns a nontrivial response message. Furthermore, lines 8–9 of
process-seed set γ .memberSecret[sender, seq, γ .myId], so that its
call to process-ack on lines 20–21 returns nontrivial Ime. Hence
process-seed returns a nontrivial response update secret as well.
Finally, from the proof of Claim 3, it is easy to see that for each
message T considered in that claim, ID also outputs the correct
update secret when processing T . Indeed, the proof shows that each
call to update-ratchet gets the correct inputs, so it obviously out-
puts the correct updateSecret. It is easy to check that this output
is always used correctly to output update secrets by the calling func-
tion, using Claim 2 to justify that γ .myId ∈ member-view(γ , sender)
if and only if should-decrypt holds. Likewise, when should-decrypt
does not hold, these functions return ε for the update secret. Thus
the win conditions on lines 10–11 of oracle deliver are never trig-
gered.
□
Proof of Theorem 4. By the correctness lemma, it suffices to
prove security in a modified security game with all win clauses
removed. We will prove security with the causal order replaced by
the relaxed order ≺ack.
Fix a non-adaptive (t, q, n) adversary A. Let q1, . . . , qq be the
sequence of queries made by A. Without loss of generality these
queries satisfy dom-safe. Similarly, we assume the adversary never
fails a require clause. Then in terms of the bit b sampled at the
beginning of the game,
AdvDCGKA,dom-safe,DGM
(cid:12)(cid:12)(cid:12) Pr[A outputs 1 | b = 1] − Pr[A outputs 1 | b = 0](cid:12)(cid:12)(cid:12).
dcgka-na
=
1
We now proceed with a hybrid argument. Let H
0 denote the
original game, and let c ≤ q be the number of challenge queries. At
the top level, we pass through c hybrid games H
, . . . , Hc, where
in the i-th hybrid, the first i challenge queries return a random
value regardless of b (among other changes). Then Hc does not
depend on b, so the adversary’s advantage is 0. Thus it remains
to bound the adversary’s ability to distinguish between the games
0
, . . . , Hc (i.e., between the distributions corresponding to these
H
games with each fixed value of b).
0 to H
1; the remaining steps are
We explain the step from H
analogous, giving ϵ a factor of 2c ≤ 2q.