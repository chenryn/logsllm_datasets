### Describe the bug
See the reproduction source code. I select two same columns in Core. Result
column descriptions are drastically different when compiled with SQLite
dialect. That leads to crashes in the downstream projects that rely on
`_result_columns`, for example, encode/databases. The subsequent crash is
        metadata = CursorResultMetaData(context, cursor.description)
    /usr/local/lib/python3.8/dist-packages/sqlalchemy/engine/cursor.py:180: in __init__
        raw = self._merge_cursor_description(
    /usr/local/lib/python3.8/dist-packages/sqlalchemy/engine/cursor.py:415: in _merge_cursor_description
        return [
    /usr/local/lib/python3.8/dist-packages/sqlalchemy/engine/cursor.py:415: in 
        return [
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    self = 
    context = 
    cursor_description = (('pr_node_id', None, None, None, None, None, ...), ('repository_full_name', None, None, None, None, None, ...), ('rel...e, None, None, ...), ('author', None, None, None, None, None, ...), ('merger', None, None, None, None, None, ...), ...)
    result_columns = [('pr_node_id', 'pr_node_id', (Column('pr_node_id', BigInteger(), table=, primary_key=True, n...(), table=), 'merger', 'merger', 'github.done_pull_request_facts_merger'), BigInteger()), ...]
        def _merge_textual_cols_by_position(
            self, context, cursor_description, result_columns
        ):
            num_ctx_cols = len(result_columns) if result_columns else None
            if num_ctx_cols > len(cursor_description):
                util.warn(
                    "Number of columns in textual SQL (%d) is "
                    "smaller than number of columns requested (%d)"
                    % (num_ctx_cols, len(cursor_description))
                )
            seen = set()
            for (
                idx,
                colname,
                untranslated,
                coltype,
            ) in self._colnames_from_description(context, cursor_description):
                if idx                if obj[0] in seen:
    E               IndexError: tuple index out of range
    /usr/local/lib/python3.8/dist-packages/sqlalchemy/engine/cursor.py:503: IndexError
### To Reproduce
    from sqlalchemy import Column, Integer, select
    from sqlalchemy.dialects.sqlite import pysqlite
    from sqlalchemy.engine import ExecutionContext
    from sqlalchemy.ext.declarative import declarative_base
    class Foo(declarative_base()):
        __tablename__ = "whatever"
        bar = Column(Integer(), primary_key=True)
    class CompilationContext:
        def __init__(self, context: ExecutionContext):
            self.context = context
    def main():
        query = select([Foo.bar, Foo.bar])
        compiled = query.compile(dialect=pysqlite.dialect(paramstyle="qmark"))
        print(compiled._result_columns[0])
        print(compiled._result_columns[1])
    if __name__ == "__main__":
        main()
### Error
The provided code prints:
    ('bar', 'bar', (Column('bar', Integer(), table=, primary_key=True, nullable=False), 'bar', 'bar', 'whatever_bar'), Integer())
    ('bar__1', '%(575564119221534721 bar_)s', (), Integer())
The third tuple element in the second item is an empty tuple instead of a
proper pointer to Column.
### Versions
  * OS: Ubuntu 20.04
  * Python: 3.8.10
  * SQLAlchemy: 1.4.29
  * Database: SQLite
  * DBAPI (eg: psycopg, cx_oracle, mysqlclient): pysqlite
### Additional context
This code works differently on 1.3.x, it prints:
    ('bar', 'bar', (Column('bar', Integer(), table=, primary_key=True, nullable=False), 'bar', 'bar'), Integer())
    Traceback (most recent call last):
      File "reproduce.py", line 26, in 
        main()
      File "reproduce.py", line 22, in main
        print(compiled._result_columns[1])
    IndexError: list index out of range
In other words, 1.3.x does not generate the second element for the duplicate.