输出限于相关部分，如下所示。
```
...
Data
====
alerts:
----
{} 
prometheus.yml:
----
global:
  evaluation_interval: 1m
  scrape_interval: 1m
  scrape_timeout: 10s 
rule_files:
- /etc/config/rules
- /etc/config/alerts
scrape_configs:
- job_name: prometheus
  static_configs:
  - targets:
    - localhost:9090
- bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
  job_name: kubernetes-apiservers
  kubernetes_sd_configs:
  - role: endpoints
  relabel_configs:
  - action: keep
    regex: default;kubernetes;https
    source_labels:
    - __meta_kubernetes_namespace
    - __meta_kubernetes_service_name
    - __meta_kubernetes_endpoint_port_name
  scheme: https
  tls_config:
    ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
    insecure_skip_verify: true
...
```
我们可以看到`alerts`仍然是空的。我们很快就会改变。
再往下是`prometheus.yml`配置，`scrape_configs`占据了大部分空间。我们可以花一整章的时间来解释当前的配置以及修改的方法。我们不会那样做，因为你面前的配置近乎疯狂。这是一个很好的例子，说明了事物是如何变得比它应该变得更复杂的。在大多数情况下，你应该保持现状。如果你想摆弄它，请查阅官方文件。
接下来，我们将快速浏览一下普罗米修斯的屏幕。
A note to Windows users
Git Bash might not be able to use the `open` command. If that's the case, replace `open` with `echo`. As a result, you'll get the full address that should be opened directly in your browser of choice.
```
 1  open "http://$PROM_ADDR/config"
```
配置屏幕反映了我们已经在`prometheus-server`配置图中看到的相同信息，因此我们将继续。
接下来，让我们看看目标。
```
 1  open "http://$PROM_ADDR/targets"
```
该屏幕包含七个目标，每个目标提供不同的指标。普罗米修斯定期从这些目标中提取数据。
All the outputs and screenshots in this chapter are taken from AKS. You might see some differences depending on your Kubernetes flavor. You might notice that this chapter contains much more screenshots than any other. Even though it might look like there are too many, I wanted to make sure that you can compare your results with mine, since there will be inevitable differences that might sometimes look confusing if you do not have a reference (my screenshots).
![](img/f207a763-f021-4f45-966b-948bae855230.png)
Figure 3-2: Prometheus' targets screen A note to AKS users
The *kubernetes-apiservers* target might be red indicating that Prometheus cannot connect to it. That's OK since we won't use its metrics. A note to minikube users
The *kubernetes-service-endpoints* target might have a few sources in red. There's no reason for alarm. Those are not reachable, but that won't affect our exercises.
我们无法从屏幕上找到每个目标提供了什么。我们将尝试用普罗米修斯拉他们的同样方式询问出口商。
要做到这一点，我们需要找到我们可以联系出口商的服务。
```
 1  kubectl -n metrics get svc
```
AKS 的输出如下。
```
NAME                          TYPE      CLUSTER-IP    EXTERNAL-IP PORT(S)  AGE
prometheus-alertmanager       ClusterIP 10.23.245.165       80/TCP   41d
prometheus-kube-state-metrics ClusterIP None                80/TCP   41d
prometheus-node-exporter      ClusterIP None                9100/TCP 41d
prometheus-pushgateway        ClusterIP 10.23.244.47        9091/TCP 41d
prometheus-server             ClusterIP 10.23.241.182       80/TCP   41d
```
我们对`prometheus-kube-state-metrics`和`prometheus-node-exporter`感兴趣，因为它们提供了从我们将在本章中使用的出口商处获取数据的途径。
接下来，我们将创建一个临时 Pod，通过它我们可以访问这些服务背后的出口商提供的数据。
```
 1  kubectl -n metrics run -it test \
 2      --image=appropriate/curl \
 3      --restart=Never \
 4      --rm \
 5      -- prometheus-node-exporter:9100/metrics
```
我们基于`appropriate/curl`创建了一个新的 Pod。该映像的唯一目的是提供`curl`。我们指定`prometheus-node-exporter:9100/metrics`作为命令，相当于用那个地址运行`curl`。结果，输出了许多指标。它们都是相同的`key/value`格式，可选标签用花括号(`{`和`}`)括起来。在每个指标的顶部，都有一个`HELP`条目，解释其功能以及`TYPE`(例如`gauge`)。其中一个指标如下。
```
 1  # HELP node_memory_MemTotal_bytes Memory information field
    MemTotal_bytes.
 2  # TYPE node_memory_MemTotal_bytes gauge
 3  node_memory_MemTotal_bytes 3.878477824e+09
```
我们可以看到它提供`Memory information field MemTotal_bytes`，类型为`gauge`。`TYPE`下方是实际公制，带键(`node_memory_MemTotal_bytes`)和值`3.878477824e+09`。
大多数节点导出器指标都没有标签。所以，我们必须在`prometheus-kube-state-metrics`出口商中寻找一个例子。
```
 1  kubectl -n metrics run -it test \
 2      --image=appropriate/curl \
 3      --restart=Never \
 4      --rm \
 5      -- prometheus-kube-state-metrics:8080/metrics
```
如您所见，Kube 状态度量遵循与节点导出器相同的模式。主要的区别是，他们中的大多数确实有标签。一个例子如下。
```
 1  kube_deployment_created{deployment="prometheus-
    server",namespace="metrics"} 1.535566512e+09
```
该指标表示在`metrics`命名空间内创建部署`prometheus-server`的时间。
我将让您更详细地探索这些指标。我们很快会用到很多。
现在，请记住，通过结合来自节点导出器、Kube 状态度量和来自 Kubernetes 本身的度量，我们可以满足大多数需求。或者，更准确地说，它们提供了大多数基本和常见用例所需的数据。
接下来，我们将查看警报屏幕。
```
 1  open "http://$PROM_ADDR/alerts"
```
屏幕是空的。不要绝望。我们会多次回到那个屏幕。随着我们的进展，警报会越来越多。现在，请记住，您可以在那里找到您的警报。
最后，我们将打开图形屏幕。
```
 1  open "http://$PROM_ADDR/graph"
```
这是您花时间调试通过警报发现的问题的地方。
作为我们的第一个任务，我们将尝试检索关于我们的节点的信息。我们将使用`kube_node_info`所以让我们看看它的描述(帮助)和类型。
```
 1  kubectl -n metrics run -it test \
 2      --image=appropriate/curl \
 3      --restart=Never \
 4      --rm \
 5      -- prometheus-kube-state-metrics:8080/metrics \
 6      | grep "kube_node_info"
```
仅限于`HELP`和`TYPE`条目的输出如下。
```
 1  # HELP kube_node_info Information about a cluster node.
 2  # TYPE kube_node_info gauge
 3  ...
```
You are likely to see variations between your results and mine. That's normal since our clusters probably have different amounts of resources, my bandwidth might be different, and so on. In some cases, my alerts will fire, and yours won't, or the other way around. I'll do my best to explain my experience and provide screenshots that accompany them. You'll have to compare that with what you see on your screen.
现在，让我们尝试在普罗米修斯中使用这个度量。
请在表达式字段中键入以下查询。
```
 1  kube_node_info
```
单击执行按钮检索`kube_node_info`度量的值。
Unlike previous chapters, the Gist from this one (`03-monitor.sh` ([https://gist.github.com/vfarcic/718886797a247f2f9ad4002f17e9ebd9](https://gist.github.com/vfarcic/718886797a247f2f9ad4002f17e9ebd9))) contains not only the commands but also Prometheus expressions. They are all commented (with `#`). If you're planning to copy and paste the expressions from the Gist, please exclude the comments. Each expression has `# Prometheus expression` comment on top to help you identify it. As an example, the one you just executed is written in the Gist as follows. `# Prometheus expression` `# kube_node_info`
如果你查看`kube_node_info`的`HELP`条目，你会发现它提供了`information about a cluster node`，并且是一个`gauge`。A **规**([https://prometheus.io/docs/concepts/metric_types/#gauge](https://prometheus.io/docs/concepts/metric_types/#gauge))是一个表示单个数值的公制，可以任意上下。
这对于有关节点的信息很有意义，因为它们的数量会随着时间的推移而增加或减少。
A Prometheus gauge is a metric that represents a single numerical value that can arbitrarily go up and down.
如果我们关注输出，您会注意到集群中的条目和工作节点一样多。值(`1`)在这个上下文中没有用。另一方面，标签可以提供一些有用的信息。比如我这个例子，操作系统(`os_image`)就是`Ubuntu 16.04.5 LTS`。通过这个例子，我们可以看到，我们不仅可以使用这些指标来计算值(例如，可用内存)，还可以了解我们系统的细节。
![](img/f2eea74f-64b6-4499-887d-fa8f42a957ef.png)
Figure 3-3: Prometheus' console output of the kube_node_info metric
让我们看看是否可以通过将该指标与普罗米修斯的一个函数相结合来获得更有意义的查询。我们将`count`集群中工作节点的数量。`count`是普罗米修斯的*聚合运算符*之一。
请执行下面的表达式。
```
 1  count(kube_node_info)
```
输出应该显示集群中工作节点的总数。就我而言(AKS)有`3`。乍一看，这可能没什么帮助。您可能认为，如果没有普罗米修斯，您应该知道集群中有多少节点。但这可能不是真的。其中一个节点可能出现故障，并且没有恢复。如果您在不扩展组的情况下运行集群，这一点尤其正确。或者集群自动缩放器增加或减少节点数量。一切都会随着时间的推移而改变，要么是因为失败，要么是因为人类的行为，要么是因为一个自我适应的系统。不管波动的原因是什么，当某件事达到阈值时，我们可能希望得到通知。我们将使用节点作为第一个例子。
我们的任务是定义一个警报，如果集群中的节点多于三个或少于一个，该警报将通知我们。我们会想象这些是我们的极限，我们想知道是由于故障还是集群自动缩放达到了下限还是上限。
我们将看看普罗米修斯图表价值的新定义。既然定义很大，而且会随着时间增长，从现在开始，我们只看区别。
```
 1  diff mon/prom-values-bare.yml \
 2      mon/prom-values-nodes.yml
```
输出如下。
```
> serverFiles:
>   alerts:
>     groups:
>     - name: nodes
>       rules:
>       - alert: TooManyNodes
>         expr: count(kube_node_info) > 3