x into a Cuckoo hash table, we place it in bin hi(x), if this bin is
empty for any i. Otherwise, choose a random i ∈R [k], place x in
bin hi(x), evict the item currently in hi(x), and recursively insert
the evicted item. After a fixed number of evictions, give up and
place the current item in the stash.
3 PROGRAMMABLE OPRF
Our PSI approach builds heavily on the concept of oblivious PRFs
(OPRF). We review the concepts here and also introduce our novel
programmable variant of an OPRF.
3.1 Definitions
Oblivious PRF. An oblivious PRF (OPRF) [11] is a 2-party pro-
tocol in which the sender learns a PRF key k and the receiver learns
F(k, q1), . . . , F(k, qt), where F is a PRF and (q1, . . . , qt) are inputs
chosen by the receiver. Note that we are considering a variant of
OPRF where the receiver can obtain several PRF outputs on stati-
cally chosen inputs. We describe the ideal functionality for an OPRF
in Figure 2.
Instantiation and Security Details. While many OPRF proto-
cols exist, we focus on the protocol of Kolesnikov et al. [26]. This
protocol has the advantage of being based on oblivious-transfer
(OT) extension. As a result, it uses only inexpensive symmetric-key
cryptographic operations (apart from a constant number of initial
public-key operations for base OTs). The protocol efficiently gener-
ates a large number of OPRF instances, which makes it a particu-
larly good fit for our eventual PSI application that uses many OPRF
instances. Concretely, the amortized cost of each OPRF instance
costs roughly 500 bits in communication and a few symmetric-key
operations.
Technically speaking, the protocol of [26] achieves a slightly
weaker variant of OPRF than what we have defined in Figure 2. In
particular, (1) PRF instances are are generated with related keys,
and (2) the protocol reveals slightly more than just the PRF output
F(k, q). We stress that in the resulting PRF of [26] the construction
Session F1:  Private Set IntersectionCCS’17, October 30-November 3, 2017, Dallas, TX, USA1259Parameters: The number of parties n, and the size of the parties’
sets m.
Functionality:
1
i , . . . , xm
i } ⊆ {0, 1}∗ from each
• Wait for an input Xi = {x
party Pi.
• Give output n
Xi to all parties.
i =1
Figure 1: PSI ideal functionality.
Parameters: A PRF F and bound t.
Behavior: Wait for input (q1, . . . , qt) from the receiver ℛ. Sam-
ple a random PRF seed k and give it to the sender 𝒮. Give
(F(k, q1), . . . , F(k, qt)) to the receiver.
Figure 2: The OPRF ideal functionality ℱ F,t
oprf
Parameters: A programmable PRF F, and upper bound n on
the number of points to be programmed, and bound t on the
number of queries.
sender 𝒮
Behavior: Wait
receiver ℛ, where
and input
{(x1, y1), . . . ,(xn, yn)} is a set of points. Run
𝒫
(k, hint) ← KeyGen(𝒫) and give (k, hint) to the sender.
Give (hint, F(k, hint, q1), . . . , F(k, hint, qt)) to the receiver.
Figure 3: The OPPRF ideal functionality ℱ F,t,n
opprf
input 𝒫 from the
from the
for
(q1, . . . , qt)
=
remains secure even under these restrictions. More formally, let
leak(k, q) denote the extra information that the protocol leaks to
the receiver. [26] gives a security definition for PRF that captures
the fact that outputs of F, under related keys k1, . . . , kn, are pseu-
dorandom even given leak(ki , qi). Our OPPRF constructions are
built on this OPRF, and as a result our constructions would inherit
analogous properties as well.
For ease of presentation and reasoning, we work with the cleaner
security definitions that capture the main spirit of programmable
OPRF. We emphasize that, although cumbersome, it is possible to
incorporate all of the [26] relaxations into the definitions. We stress
that our eventual application of PSI is secure in the standard sense
when built from such relaxed OP[P]RF building blocks.
Programmable PRF. We introduce a new notion of a programmable
oblivious PRF. Intuitively, the functionality is similar to OPRF, with
the additional feature that it allows the sender to program the
output of the PRF on a set of points chosen by the sender. Before
presenting the definition of this functionality, we discuss a PRF that
supports being programmed in this way.
A programmable PRF consists of the following algorithms:
• KeyGen(1κ ,𝒫) → (k, hint): Given a security parameter and
set of points 𝒫 = {(x1, y1), . . . ,(xn, yn)} with distinct xi-
values, generates a PRF key k and (public) auxiliary informa-
tion hint. We often omit the security parameter argument
when it is clear from context.
• F(k, hint, x) → y: Evaluates the PRF on input x, giving out-
put y. We let r denote the length of y.
A programmable PRF satisfies correctness if (x, y) ∈ 𝒫, and
(k, hint) ← KeyGen(𝒫), then F(k, hint, x) = y. For the security
guarantee, we consider the following experiment/game:
Exp𝒜(X , Q, κ):
for each xi ∈ X, chose random yi ← {0, 1}r
(k, hint) ← KeyGen(1κ , {(xi , yi) | xi ∈ X})
hint, {F(k, hint, q) | q ∈ Q}(cid:17)
return 𝒜(cid:16)
(cid:12)(cid:12)(cid:12) Pr[Exp𝒜(X1, Q, κ) ⇒ 1] − Pr[Exp𝒜(X2, Q, κ) ⇒ 1](cid:12)(cid:12)(cid:12)
We say that a programmable PRF is (n, t)-secure if for all |X1| =
|X2| = n, all |Q| = t, and all polynomial-time 𝒜:
is negligible in κ
Intuitively, it is hard to tell what the set of programmed points
was, given the hint and t outputs of the PRF, if the points were
programmed to random outputs. Note that this definition implies
that unprogrammed PRF outputs (i.e., those not set by the input to
KeyGen) are pseudorandom.
The reason for including a separate “hint” as part of the syntax
is that our protocol constructions will naturally leak this hint to
the receiver (in addition to the receiver’s PRF output). We propose
a definition that explicitly models this leakage and ensures that it
is safe.
Oblivious Programmable PRF (OPPRF). The formal defini-
tion of an oblivious programmable PRF (OPPRF) functionality is
given in Figure 3. It is similar to the plain OPRF functionality except
that (1) it allows the sender to initially provide a set of points 𝒫
which will be programmed into the PRF; (2) it additionally gives
the “hint” value to the receiver.
We now give several constructions of an OPPRF, with different
tradeoffs in parameters.
3.2 A Construction Based on Polynomials
Our polynomial-based construction is presented in Figure 4. We
first describe the underlying programmable PRF. Let F be a PRF
• KeyGen(𝒫 = {(x1, y1), . . . ,(xn, yn)}): Choose a random key
k for F. Interpolate a degree n−1 polynomial p over the points
{(x1, y1 ⊕ F(k, x1)), . . . ,(xn, yn ⊕ F(k, xn))}. Let hint be the
coefficients of p.
and define our new programmable PRF(cid:98)F as follows:
• (cid:98)F(k, hint, q) = F(k, q) ⊕ p(q).
It is not hard to see that(cid:98)F satisfies correctness since for xi ∈ 𝒫
it holds that(cid:98)F(k, hint, xi) = F(k, xi) ⊕ p(xi) = F(k, xi) ⊕ yi ⊕
Finally, the OPPRF protocol for(cid:98)F is straightforward if there is an
, can compute its output(cid:98)F(k, hint, qi) = F(k, qi) ⊕ p(qi). The
OPRF protocol for F: the parties simply invoke ℱ F,t
on their inputs.
oprf
The sender obtains k and uses it to generate the hint as above,
and sends it to the receiver. The receiver, obtaining F(k, qi) from
ℱ F,t
oprf
description of the OPPRF protocol is given in Figure 4. Simulation
is trivial, as the parties’ views in the protocol are exactly the OPPRF
output.
F(k, xi). Security follows from the fact that when the yi values are
distributed uniformly, so is the hint p. This is true regardless of the
number of queries the receiver makes.
Session F1:  Private Set IntersectionCCS’17, October 30-November 3, 2017, Dallas, TX, USA1260Input of 𝒮: n points 𝒫 = {(x1, y1), . . . ,(xn, yn)}, where xi ∈
{0, 1}∗, xi (cid:44) xj; and yi ∈ {0, 1}r
Input of ℛ: Q = (q1, . . . , qt) ∈ ({0, 1}∗)t .
Protocol:
(1) ℛ sends Q to ℱ F,t
. The sender receives k and receiver
oprf
receives F(k, q) for q ∈ Q.
(2) 𝒮 interpolates the unique polynomial p of degree n −
1 over the points {(x1, y1 ⊕ F(k, x1)), . . . ,(xn, yn ⊕
F(k, xn))}.
(3) 𝒮 sends the coefficients of p to ℛ.
(4) ℛ outputs (p, F(k, q1) ⊕ p(q1), . . . , F(k, qt) ⊕ p(qt)).
Figure 4: Polynomial-based OPPRF protocol
Costs. The main advantage of this construction is that the only
message that needs to be sent in addition to the ℱoprf
protocol is the
polynomial p whose length is exactly that of n values. This seems
the minimal communication overhead that is needed to achieve
OPPRF from OPRF. On the other hand, the interpolation of the
polynomial takes time 𝒪(n
2) which can be expensive for large n.
k
3.3 A Construction Based on Bloom Filters
Garbled Bloom filters (GBF) were introduced in [9] in the context of
PSI protocols. A GBF is an array GBF[1 . . . N] of strings, associated
with a collection of hash functions h1, . . . , hk : {0, 1}∗ → [N]. The
GBF implements a key-value store, where the value associated with
key x is:
j=1 GBF[hj(x)].
(⋆)
A GBF can be programmed to map specific keys to chosen values:
(1) Initialize array GBF with all entries equal to ⊥
(2) For each key-value pair (x, v), let J = {hj(x) | GBF[hj(x)] =
⊥} be the relevant positions of GBF that have not yet been
set. Abort if J = ∅. Otherwise, choose random values for
GBF[J] subject to the lookup equation (⋆) equaling the de-
sired value v.
(3) For any remaining GBF[j] = ⊥, replace GBF[j] with a ran-
domly chosen value.
It is clear that, unless this procedure aborts, it produces a GBF
with the desired key-value mapping. In [9] it was observed that the
procedure aborts when processing item x if and only if x is a false
positive for a plain Bloom filter containing the previous items (think
of the plain Bloom filter obtained by interpreting a ⊥ in GBF as 0
and anything else as 1). The false-positive probability for a plain
Bloom filter has been well analyzed. In particular, to bound the
probability by 2−λ, one can use a table with N = nλ log2 e entries
to store n items. In that case, the optimal number of hash functions
is λ. If we set λ = 40, we get that the table size is about 60n and
the number of hash functions is k = 40. In addition, by doing less
hashing[21], each insert only requires two hash functions h1(x)
and h2(x). The additional k − 2 hash functions hi(x), i ∈ [3, k], is
simulated by hi(x) = h1(x) + i × h2(x).
Given the GBF construction, an OPPRF construction is relatively
straightforward and similar to the polynomial-based construction.
Input of 𝒮: n points 𝒫 = {(x1, y1), . . . ,(xn, yn)}, where xi ∈
{0, 1}∗, xi (cid:44) xj and yi ∈ {0, 1}r
Input of ℛ: Q = (q1, . . . , qt) ∈ ({0, 1}∗)t .
Protocol:
. The sender receives k and receiver
(1) ℛ sends Q to ℱ F,t
oprf
(2) 𝒮 inserts the n pairs
receives F(k, q) for q ∈ Q.
{(x1, y1 ⊕ F(k, x1)), . . . ,(xn, yn ⊕ F(k, xn))}
into a garbled Bloom filter denoted as G, with entries
which are each r bits long. It fills the remaining empty
entries with random values.
(3) 𝒮 sends G to ℛ as well as the k hash functions (the
functions need not be sent explicitly, and can be defined
by setting some context dependent prefixes to inputs of
a known hash function).
j=1 G[hj(qi)].
(4) For i = 1 to t, ℛ computes zi = F(k, qi)⊕k
Finally ℛ outputs (G, z1, . . . , zt).
Figure 5: Bloom-filter-based OPPRF protocol
Instead of the mappings xi (cid:55)→ yi ⊕ F(k, xi) being stored in a poly-
nomial, they are stored in a GBF. The construction is defined in
Figure 5. Security holds naturally, since if the yi points are chosen
randomly, all positions in the GBF are uniformly distributed.
Costs. The advantage of the Bloom filter based construction,
compared to the polynomial-based construction, is that the inser-
2), and is also very
tion algorithm runs in time 𝒪(n) rather 𝒪(n
efficient in practice. The communication is still 𝒪(n) but the con-
stant coefficient is high (the actual communication is 60n items
rather than n) and therefore communication might be a bottleneck,
especially on slow networks.
3.4 Table-Based Construction
The previous OPPRF constructions can be instantiated with any
underlying OPRF that allows the receiver to evaluate the PRF on
any number t of points. The resulting OPPRF constructions will
inherit the same t. Meanwhile, our most efficient OPRF building
block from [26] only supports t = 1. In this section we describe a
construction tailored for the case of t = 1, and for small values of n
(the number of programmed points).
The main idea behind this construction is as follows. For each
pair (xi , yi) the sender 𝒮 uses F(k, xi) as an encryption key to
encrypt the corresponding value yi. Let T be the collection of these
encryptions; then T comprises the OPPRF hint. At a high level,
the receiver can obtain F(k, q) and use it as a key to decrypt the
appropriate ciphertext from T .
The main challenges are: (1) ℛ should not know whether he is
getting random or programmed output values (i.e. whether x = xi
for some i), and (2) ℛ must learn which ciphertext fromT to decrypt.
We achieve both properties by using F(k, q) to derive a pointer into
the table T . In order to achieve property (1), ℛ must always decrypt
some ciphertext of T , even if x (cid:44) xi.
Concretely, suppose n is 20, so that 𝒮 needs to program only
20 points. 𝒮 will make a table T of size 25 = 32 (next power of 2
Session F1:  Private Set IntersectionCCS’17, October 30-November 3, 2017, Dallas, TX, USA1261Input of 𝒮: n points 𝒫 = {(x1, y1), . . . ,(xn, yn)}, where xi ∈
{0, 1}∗, xi (cid:44) xj; and yi ∈ {0, 1}r
Input of ℛ: q ∈ {0, 1}∗.
Parameters: random oracle H : {0, 1}∗ → {0, 1}m, where
m = 2⌈log(n+1)⌉.
Protocol:
receives F(k, q).
are all distinct.
(1) ℛ sends q to ℱ F,t
. The sender receives k and receiver
oprf
(2) 𝒮 samples v ← {0, 1}κ until {H(F(k, xi)∥v) | i ∈ [n]}
(3) For i ∈ [n], 𝒮 computes hi = H(F(k, xi)∥v), and sets
(4) For j ∈ {0, 1}m \ {hi | i ∈ [n]}, 𝒮 sets Tj ← {0, 1}r .
(5) 𝒮 sends T and v to ℛ.
(6) ℛ computes h = H(F(k, q)∥v), and outputs (T , v,Th ⊕
= F(k, xi) ⊕ yi.
F(k, q)).
Figure 6: Basic table-based OPPRF protocol.
Thi
greater than 20). 𝒮 will choose a random nonce v ∈ {0, 1}κ until
{H(F(k, xi)∥v) | i ≤ 20} are all distinct, where H : {0, 1}∗ (cid:55)→
{0, 1}5 is a hash function modeled as a random oracle. For each
i ∈ [n], 𝒮 computes hi = H(F(k, xi)∥v), and sets Thi
= F(k, xi)⊕yi.
The remaining entries of T (32 − 20 = 12 of them in this case) are
chosen uniformly. 𝒮 sends this nonce v together with the table T
to the the receiver as part of the hint.
From the receiver’s point of view, on input x he will use F(k, q)
to decrypt the ciphertext in position H(F(k, q)∥v) of the table. The
distinctness of the H(F(k, xi)∥v) values allows the sender to place
encryptions of the yi values at appropriate positions in T without
any conflicts. The details are given in Figure 6. Note that the OPPRF
protocol is restricted to the case of t = 1. Because of that, it suffices
to use one-time pad encryption for the table entries.
Security & parameters. The underlying programmable PRF
satisfies security based on two observations: The easy observation
is that table T itself is uniformly distributed when the yi values
are uniformly distributed (as in the security definition for pro-
grammable PRF).
Next, we must argue that the nonce v leaks no information
about the set of programmed points. Fix a candidate v and define
zi = H(F(k, xi)∥v). The sender tests this candidate v by seeing
whether there is a collision among {zi} values. The receiver sees
at most one value of the form F(k, xi). So by the PRF security of F,
at least n − 1 of the other F outputs are distributed randomly from
the receiver’s perspective. Since H is a random oracle, it follows
that at least n − 1 of the zi values are distributed independent of
the receiver’s view (even when the receiver has oracle access to H).
Finally, the condition of a collision among randomly chosen {zi}
values is independent of any single zi. Hence, the probability of a
candidate v being chosen (and thus the overall distribution of v) is
the same regardless of whether the receiver queried F on one of