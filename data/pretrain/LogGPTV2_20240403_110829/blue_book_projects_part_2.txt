ones. I think it's better to prioritize tags over categories to avoid hierarchy
problems. For example, we can track a headache with the tags `health` and
`head`.
The activation/deactivation of warnings will change with the warning type:
* Manual: User triggers the state change through the program's command line
* Script: A python or bash script that automatically gathers the data and
    decides if the warning is still active or inactive.
    This method can give a huge boost in the motivation of self logging through
    [quantified self](#quantified-self).
## Pomodoro command line
Command line to help with the [pomodoro workflow](life_review.md#pomodoro), besides the basic stuff it will
interact with the task manager, [activitywatch](activitywatch.md) and the
notifications system so that:
* If you are in focus mode, the notifications will be deactivated, once the
    pomodoro cycle ends, the notifications will show up.
* If you are in focus mode, and you check the notification applications,
    a notification warning will be shown.
* As you'll check the notification systems between pomodoro cycles, unless you
    start the pomodoro cycle in focus mode, it's assumed that you may need to
    interact with them, but if X amount of minutes has passed since the start of
    the cycle and you haven't seen them, then it's assumed that you are in focus
    mode, and therefore the notifications will be deactivated.
* When you start a pomodoro cycle it will let you activate one of the task
    manager tasks, so it will track the time spent in that task. If you change
    the window manager focus to a window that is not related to the task at hand
    it will stop recording and show you a warning.
## Version Update Manager
Keeping software updated is not easy because:
* There are many technologies involved: package managers (apt, yum, pip, yarn,
    npm, ...), programming languages (python, java, ruby, ...), operative
    systems (Debian, Ubuntu, ...), deployment technologies (OS install, Docker,
    Kubernetes, Ansible, Helm), template software (cruft).
* Each software maintainers use a different version system.
* Even a small increase in a version may break everything.
* Sometimes only the latest version is the supported version.
* It's not easy to check if the update went well.
* You not only need the desired package to be updated, but also it's
    dependencies.
I'd like to find a solution that:
* Gives an overall insight of the update status of a system.
* Automates the update process.
* Support both single system installation or aggregator of multiple systems.
## Shared accounting
I use [beancount](beancount.md) for my personal accounting, I'd like to have
a system that integrates more less easily with beancount and let's do a shared
accounting with other people, for example in trips. I've used [settle
up](https://settleup.io/) in the past but it requires access to their servers,
and an account linked to google, facebook or one you register in their servers.
I've looked at [facto](https://github.com/nymanjens/facto) but it uses a logic
that doesn't apply to my case, it does a heavy use on a common account, instead
of minimizing the transactions between the people. I also tried
[tabby](https://github.com/bertvandepoel/tabby#installation), even though they
still [don't support Docker](https://github.com/bertvandepoel/tabby/issues/13),
but it doesn't suit my case either :(.
Until a new solution shows up, I'll go with [Tricky
Tripper](https://github.com/koelleChristian/trickytripper) available in F-Droid,
and manage the expenses myself and periodically send the html reports to the
rest of the group.
## Improve the reliability of the Open Science collections
The current [free knowledge efforts](free_knowledge.md) are based on the health
of a collection of torrents.
Something that is needed is a command line tool that reads the [list of ill
torrents](https://phillm.net/torrent-health-frontend/seeds-needed.php), and
downloads the ones that have a low number of seeders and DHT peers. The
number of torrents to download could be limited by the amount the user wants to
share. A second version could have an interaction with the torrent client so
that when a torrent is no longer ill, it's automatically replaced with one that
is.
Once the tool is built:
* Update the [Free knowledge post](free_knowledge.md).
* Promote the tool in the relevant reddit posts
    [1](https://www.reddit.com/r/DataHoarder/comments/nc27fv/rescue_mission_for_scihub_and_open_science_we_are/)
    and
    [2](https://www.reddit.com/r/DataHoarder/comments/ed9byj/library_genesis_project_update_25_million_books/),
    try to add it to the [freeread.org wiki](https://freeread.org/torrents/)
    ([source](https://github.com/freereadorg/freeread)), and to the
    [awesome-libgen list](https://github.com/freereadorg/awesome-libgen).
## Monitor and notify on disk prices
[Diskprices.com](https://diskprices.com/) sorts the prices of the disks on the
different amazon sites based on many filters. It will be interesting to have
a service that monitors the data on this site and alerts the user once there is
a deal that matches its criteria.
Once it's done, promote it in the [DataHoarder
reddit](https://www.reddit.com/r/DataHoarder/).
## Switch to a better browser
Firefox + Trydactil has it's limits, and Firefox has been following an ill path
for a while, [qutebrowser](https://github.com/qutebrowser/qutebrowser) looks
like the perfect replacement.
I've just stumbled upon [nyxt](https://nyxt.atlas.engineer/)
([code](https://github.com/atlas-engineer/nyxt)), and it looks superb.
## Automating computer file management
Today I've stumbled upon [organize](https://organize.readthedocs.io/en/latest/)
looks good for automating processes on files. Maybe it's interesting to run it
with [inotifywait](https://askubuntu.com/a/819290) instead of with a [cron
job](https://github.com/tfeldmann/organize/issues/18).
## Self hosted search engine
It would be awesome to be able to self host a personal search engine that
performs prioritized queries in the data sources that I choose.
This idea comes from me getting tired of:
* Forgetting to search in my gathered knowledge before going to the internet.
* Not being able to prioritize known trusted sources.
Some sources I'd like to query:
* Markdown brains, like my blue and red books.
* Awesome lists.
* My browsing history.
* Blogs.
* [learn-anything](https://learn-anything.xyz).
* [Musicbrainz](https://musicbrainz.org).
* [themoviedb](https://themoviedb.org).
* [Wikipedia](https://wikipedia.com)
* [Reddit](https://reddit.com).
* [Stackoverflow](https://stackoverflow.com).
* [Startpage](https://startpage.com).
Each source should be added as a plugin to let people develop their own.
I'd also like to be able to rate in my browsing the web pages so they get more
relevance in future searches. That rating can also influence the order of the
different sources.
It will archive the rated websites to avoid [link
rot](https://www.gwern.net/Archiving-URLs#link-rot) maybe with
[ipwb](https://github.com/oduwsdl/ipwb).
If we use a knowledge graph, we could federate to ask other nodes and help
discover or prioritize content.
The browsing could be related with knowledge graph tags.
We can also have integration with Anki after a search is done.
A possible architecture could be:
* A flask + Reactjs frontend.
* An elasticsearch instance for persistence.
* A Neo4j or knowledge graph to get relations.
It must be open sourced and Linux compatible. And it would be awesome if
I didn't have to learn how to use another editor.
Maybe [meilisearch](https://github.com/meilisearch/meilisearch) (follow their
[blog](https://blog.meilisearch.com/)) or
[searx](https://github.com/asciimoo/searx) could be a solution. Following
another approach, [archivy](https://archivy.github.io/) looks good too.
Or I could use [Jina](https://github.com/jina-ai/jina) is a search library
linked to pydantic, or maybe
[quickwit](https://github.com/quickwit-inc/quickwit) if they're more stable and
mature than right now.
If I've already started the [quantified self](#quantified-self) project, maybe
[adri's memex](https://github.com/adri/memex)  is a good solution.
## Quantified self
I've been gathering data about myself for a long time, but I don't have
a centralized solution that lets me extract information.
There are already good solutions to start with, being the best
[HPI](https://beepb00p.xyz/hpi.html):
* [bionic](https://github.com/bionic-dev/bionic) or [their explanations on how to
export data](https://github.com/bionic-dev/how-to-export-personal-data) can be
useful too.
* [rsarai hq](https://github.com/rsarai/hq)
For the interface [adri's memex](https://github.com/adri/memex) looks awesome!
It's inspired in the Andrew Louis [talk Building
a Memex](https://www.youtube.com/watch?v=DFWxvQn4cf8&t=1616s) whose [blog
posts](https://hyfen.net/memex/) seems to be a gold mine.
Also look at [hpi's compilation](https://github.com/hpi/hpi) and the
[awesome-quantified-self](https://github.com/woop/awesome-quantified-self)
resources.
## Improve the way of launching applications with i3wm
In the past I tried installing [rofi](https://github.com/davatorium/rofi)
without success, I should try again. If the default features are not enough,
check [adi1090x's custom resources](https://github.com/adi1090x/rofi).
## Improve the notification management in Linux
I want to be able to group and silence the notifications under a custom logic.
For example:
* If I want to focus on a task, only show the most important ones.
* Only show alerts once every X minutes. Or define that I want to receive them
    the first 10 minutes of every hour.
* If I'm not working, silence all work alerts.
From what I see [dunst](https://dunst-project.org/) notification manager
supports rules and filters, if it's not powerful enough, I may use it with
a custom script that uses [apprise](https://github.com/caronc/apprise).
Check [Archlinux dunst wiki page](https://wiki.archlinux.org/index.php/Dunst) and the [source
code](https://github.com/dunst-project/dunst) too.
## Improve the hard drive monitor system
Use something like [scrutiny](https://github.com/AnalogJ/scrutiny) (there's
a [linuxserver image](https://docs.linuxserver.io/images/docker-scrutiny)) to
collect and display the information. For alerts, use one of their [supported
providers](https://github.com/AnalogJ/scrutiny#notifications).
## Improve the periodic tasks and application metrics monitoring
Setup an [healthchecks](https://healthchecks.io/) instance with the [linuxserver
image](https://docs.linuxserver.io/images/docker-healthchecks) to monitor
cronjobs.
For the notifications either use the [prometheus
metrics](https://healthchecks.io/docs/configuring_prometheus/) or an
[apprise](https://github.com/healthchecks/healthchecks/issues/271) compatible
system.
See the source code [here](https://github.com/healthchecks/healthchecks).
## Aggregate all notifications
Instead of reading the email, github, gitlab, discourse, reddit notifications,
aggregate all in one place and show them to the user in a nice command line
interface.
For the aggregator server, my first choice would be
[gotify](https://gotify.net/).
## Decentralized encrypted end to end VOIP and video software
I'd like to be able to make phone and video calls keeping in mind that:
* Every connection must be encrypted end to end.
* I trust the security of a linux server more than a user device. This rules out
  distributed solutions such as [tox](https://tox.chat/) that exposes the client
  IP in a DHT table.
* The server solution should be self hosted.
* It must use tested cryptography, which again rolls out tox.
These are the candidates I've found:
* [Riot](https://about.riot.im/). You'll need to host your own [Synapse
  server](https://github.com/matrix-org/synapse).
* [Jami](https://jami.net). I think it can be configured as decentralized if you
  host your own DHTproxy, bootstrap and nameserver, but I need to delve further
  into [how it makes
  a call](https://git.jami.net/savoirfairelinux/ring-project/wikis/technical/2.4.%20Let's%20do%20a%20call).
  I'm not sure, but you'll probably need to use [push
  notifications](https://git.jami.net/savoirfairelinux/ring-project/wikis/tutorials/Frequently-Asked-Questions#advanced-3)
  so as not to expose a service from the user device.
* [Linphone](https://www.linphone.org). If we host our
  [Flexisip](https://www.linphone.org/flexisip-server) server, although it asks
  for a lot of permissions.
[Jitsi Meet](https://jitsi.org/jitsi-meet/) it's not an option as it's not [end
to end encrypted](https://github.com/jitsi/jitsi-meet/issues/409). But if you
want to use it, please use [Disroot service](https://call.disroot.org) or host
your own.
## Self hosted voice assistant
Host a [virtual assistant](virtual_assistant.md) in my servers to help me
automate repetitive stuff.
For offline voice recognition, [vosk-api](https://github.com/alphacep/vosk-api)
can be used. Or [voiceliner](https://github.com/maxkrieger/voiceliner/issues/37)
once it supports offline voice recognition.
## Others
* A tool or service to follow the updates of software, right now I subscribe to
    the releases of the github repositories, but I'd like it to be provider
    agnostic, and cleaner than the emails github sends.
* Movie/serie/music rating self hosted solution that based on your ratings
  discovers new content.
* Hiking route classifier and rating self hosted web application.
* A command line friendly personal CRM like
    [Monica](https://github.com/monicahq/monica) that is able to
    [register the time length and rating of
    interactions](https://github.com/monicahq/monica/issues/4186) to do data
    analysis on my relations.
* Digital e-ink note taking system that is affordable, self hosted and performs
  character recognition.
* A git issue tracker that keeps the context of why I subscribed to them. Until
    I find one, I'll use the [issues](issues.md#vim-workflow-improvements) document.
* An easy way of creating markdown links to other file's sections. Similar to
    [mkdx](https://github.com/SidOfc/mkdx#insert-mode-fragment-completion)
    functionality. I tried using it but it didn't work for me, and I don't know
    if it works for other files.
* A markdown formatter that fixes the indentation of lists.
* An e-reader support that could be fixed to the wall.
# Dying plants
## mep
I started  [life logging](https://en.wikipedia.org/wiki/Lifelog) with `mep`. One
of the first programs I wrote when learning
[Bash](https://en.wikipedia.org/wiki/Bash_%28Unix_shell%29).
It is a [mplayer](https://en.wikipedia.org/wiki/MPlayer) wrapper that allows me
to control it with [i3](https://en.wikipedia.org/wiki/I3_%28window_manager%29)
key bindings and store metadata of the music I listen.
I don't even publish it because it's a horrible program that would make your
eyes bleed. 600 lines of code, only 3 functions, 6 levels of nested ifs, no
tests at all, but hey, the functions have docstrings! `(ｏ・_・)ノ”(ᴗ_ ᴗ。)`
The thing is that it works, so I everyday close my eyes and open my ears,
waiting for a solution that gives me the same features with
[mpd](https://en.wikipedia.org/wiki/Music_Player_Daemon).
## [faker-optional](https://lyz-code.github.io/faker-optional/)
Wrapper over other Faker providers to return their value or `None`. Useful to
create data of type `Optional[Any]`.
Not needed anymore as I use [pydantic factories](pydantic_factories.md) now.