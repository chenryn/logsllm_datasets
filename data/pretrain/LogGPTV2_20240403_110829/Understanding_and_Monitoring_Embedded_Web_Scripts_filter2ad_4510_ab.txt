### Node Access and Ancestor Nodes

The initial line specifies a particular node, but the script accesses all of its ancestor nodes. The APIs called on these nodes typically do not provide much information, such as `GetID` or `GetClientWidth`. We suspect this behavior is due to the script using a JavaScript library helper like jQuery. To capture this pattern, the root matching mode can be used to match all three accesses to `GetClientWidth` in Listing 1, as shown here:

```
/BODY[1]/DIV[3]/DIV[4]/DIV[1]:AppendChild
root:/BODY[1]/DIV[3]/DIV[4]/DIV[1]:GetClientWidth
```

### Permission Interference

Attribute-based selectors can lead to permission interference, undesirably extending the collection of matched nodes and allowed APIs. For example, consider the following two permissions:

```
// DIV[@class='tracker']:SetId
// DIV[@id='adPos']:AppendChild
```

The first permission allows setting the `id` attribute on any `DIV` node with a specific class, while the second allows calling `appendChild` on any `DIV` node with a specific `id`. Combined, they allow the script to set the `id` attribute of any `DIV` with the class `tracker`, thus gaining permission to call `appendChild` on those nodes.

Manually-created policies need to be carefully examined to exclude the use of certain attributes as selectors if other policies from the same third party allow them to be set freely. The `PolicyGenerator` tool is designed to automatically avoid such conflicts (Section 7.1).

### Wildcard Actions and Special Permissions

Sometimes, site owners want to grant third-party scripts permission to call any API on certain nodes, such as placeholder nodes for ads or widgets. However, enabling a wildcard action that matches all DOM APIs is dangerous due to possible interference scenarios. To support this, we created a special action denoted by an exclamation mark to indicate all API calls except those that may cause policy interferences.

For example, the permission:

```
// DIV[@class='content']:!
```

allows the script to call any API on any `DIV` node with the class `content`, except those that may set the `class` attribute to prevent self-interference. Similarly, the permission:

```
// DIV[@id='adPos']:!
```

allows any API on the `DIV` with the `id` `adPos`, except for ones that may set its `id` attribute. When these two permissions coexist for a script, they will forbid API calls to both `setClass` and `setID` to prevent self and mutual interference. This feature proved to be extremely helpful in our evaluation (Section 7.2).

### Inspecting Script Behavior

**ScriptInspector** is a tool for inspecting the behavior of scripts, focusing on monitoring how they manipulate resources and detecting violations of the permissions defined in Section 2. Next, we explain how ScriptInspector records third-party script behavior. Section 3.2 discusses how the records are checked against policies or output to logs for admin's inspection.

#### 3.1 Recording Accesses

ScriptInspector is implemented by modifying Firefox to add hooks to JavaScript API calls. It records all API calls made by scripts that involve any of the critical resources mentioned in Section 2.1. Modifications are primarily made in the DOM-JS binding section, with approximately 2000 lines of code added. The modified browser retains the same functionality as a normal browser, with the addition of access recording capability.

- **DOM Access Recording:** We modified Firefox’s C++ implementations of relevant DOM APIs such as `insertBefore`, `setAttribute`, and `document.write` to record DOM accesses. Complete mediation is ensured as Firefox uses a code generator to generate the C++ implementation according to the defined interfaces, and our modifications are inserted into the code generator, rather than individual implementations.
- **Script-Injected Nodes:** To support the `[o]` tag (Section 2.1), ScriptInspector tracks the ownership of a node by augmenting node-creation APIs such as `document.write` and `document.createElement`. If a third-party script creates a node and inserts it into the document, we record the responsible party as that node’s owner.
- **Attribution:** Correctly attributing actions to scripts is important, as policies are applied based on the domain hosting the script. ScriptInspector leverages existing error handling mechanisms in Firefox to obtain the identity of the caller. Additionally, a site administrator can provide a list of whitelist domains. When a call takes place, ScriptInspector records all third-party domains on the stack, except for the host domain and whitelisted domains.

#### 3.2 Checking Policies

To check recorded accesses against a given policy, ScriptInspector introduces the `checkPolicy` function. When this function is called, ScriptInspector walks the DOM tree, collects all DOM accesses and other accesses stored in the document node, and checks them against the policy. Violating accesses can be used for visualization by the Visualizer (Section 4) or as input to PolicyGenerator for automatic policy generation (Section 6). A log file is also produced for site administrators to inspect manually.

Our design only records accesses at access time but collects and serializes the access records when the page unloads. This delay is important for improving the robustness of DOM permissions. For example, a third-party script may obtain the height of a node before the host script sets its `id` to `adPos`. In this case, the permission `// DIV[@id='adPos']:GetHeight` cannot cover this access if the policy is checked immediately, since its `id` is yet to be set to `adPos`.

However, this leaves opportunities to evade mediation if a script reads content of a node and later removes that node. To eliminate this leak, we tweak the APIs that directly (e.g., `removeChild`) or implicitly (e.g., `setInnerHTML`) remove DOM nodes: ScriptInspector automatically performs `checkPolicy` on the to-be-removed nodes and stores the violations into the hidden field of its owner document before they are actually removed.

### Visualization

To visualize access violations and permission candidates, we built **Visualizer**, a ScriptInspector extension that takes the instrumented DOM and accesses as input and offers a user interface to display the page content read or modified by the third party. Figure 2 shows a screenshot of visualized accesses at foxnews.com. The left sidebar displays the domains of all third-party scripts embedded on the page, and the site administrator can click a domain to expand it and highlight the nodes accessed by scripts from that domain.

Visualizer classifies DOM accesses into three subcategories:
- `getContentRecords` (reading the content of a node, e.g., `getInnerHTML`)
- `setterRecords` (modifying the attribute or content of the node)
- `getterRecords` (reading properties of a node other than the content itself)

These categories help administrators quickly locate the accesses of interest. Users can hover over each entry to highlight the accessed node on the right side and click on a category to see all nodes that were accessed that way.

### Findings

We used ScriptInspector and Visualizer to examine the top 200-ranked US websites from Alexa.com. Assuming the role of their administrators, we aimed to understand how resources are accessed by embedded scripts. We created accounts at these sites and logged into them if possible, and attempted typical user actions such as adding merchandise to the cart for e-commerce websites and visiting user profile pages for sites that support login.

- **Browser Properties:** Almost all tested third-party scripts access generic properties of the browser, including the `navigator`, `screen` object, and some properties of root DOM nodes such as `document` and `body` element. This behavior is reasonable for most scripts as they determine what content to serve based on the browser’s vendor and version (`navigator.userAgent`) and user’s screen size (`screen.height` or `body.clientHeight`).
- **Network:** Most scripts send out network requests, at least to their own host servers. Some advertising scripts (e.g., `googleadservices.com`, `moatads.com`) also send requests to many other destinations (mostly affiliate networks).
- **Modifying Page Content:** Advertising and social widget scripts often modify the container page by injecting or replacing placeholders with content. Multiple tracking scripts insert tracking pixels and scripts from other tracking companies, and advertising scripts may inject other scripts from affiliate programs.
- **Reading Page Content:** Scripts reading specific page content were less common but observed for several scripts. The content read ranges from a specific element to the full document. Reading page content may compromise user privacy. Visualizer alerts site administrators to such scripts, especially when network access also happens in the same session.

### Developing Base Policies

The base policy for each script is intended to be used across all sites that embed that script. Obtaining a script’s base policy requires a one-time effort, with additional work required to update the policy when the script is significantly modified. Hence, it is not necessary to automate developing base policies. In deployment, the base policies could be centrally maintained and distributed, either by the script’s service provider or by a trusted security service.

We report on our experience using the logs generated by ScriptInspector to develop base policies for 25 popular third-party scripts. The manual effort required to develop these policies limits the number of scripts we can examine. However, the scripts we examined are the most popular ones among their respective categories, and our experience indicates that their behavior is a good representation of extant third-party scripts.

To select the 25 scripts, we took the 1000 highest-ranked websites from Alexa.com and visited their homepages repeatedly over a week, crawling pages to collect embedded scripts. We extracted all third-party scripts seen in this process, sorted them based on the number of occurrences, and took the top 25. We manually visited 100 sites that embed each script, sampled randomly from the 1000 sites on the Alexa.com list. Of those 100 sites, 77 include user registration and login functionality. For each of these, we manually created a test account and logged in to mimic a typical user’s experience. After preparing user sessions, we visited each site’s homepage, followed links to navigate to several subpages, and called `document.checkPolicy` to output an access report. We repeated this process until no new accesses were seen in five consecutive requests. We then manually extracted the most commonly observed accesses to form the base policy.

### Base Policy Examples

For clearer presentation, we discuss base policies organized by grouping scripts into four categories: analytics, advertising, social widgets, and web development.