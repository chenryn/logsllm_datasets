Detection and defense agenda
• Headless/automated Browser Detection
• Detect invisible mobile native/webview ad click 
• Detect android simulator and mobile key press genius
• Detect malware PC browser extension hijack
Detection and defense
#BHUSA @BlackHatEvents
Information Classification: General
Headless/automated Browser Detection
• Headless/automated Chrome is based on CDP（Chrome DevTools Protocol）
ref
Python
Java
Ruby
nodejs
Puppeteer
Playwright
Chrome
Script program language
Headless browser library
Browser process
use library
CDP
Websocket
http
PhantomJS
Selenium
Firefox
Edge
Safari
Detection and defense
#BHUSA @BlackHatEvents
Information Classification: General
Headless/automated Browser Detection
• Previously public disclosed detection methods list
Headless Browser
UserAgent
incl. “Headless”
AppVersion
incl. “Headless”
Webdriver
true
Chrome
window.chrome
Plugins
don’t have plugins
MimeType
don‘t have mime type
Language
has no language
Devtools
devtools protocol
Headless Browser
Permission
contradictory values
Time elapse
alert closed fast
Broken image
image width & height is 0
Mouse move
movementX & movementY is 0
WebGL
WebGL Vendor & Renderer
OuterDim
outerWidth & outerHeight is 0
RTT
navigator.connection.rtt is 0
...
...
• https://github.com/infosimples/detect-headless
• https://github.com/berstend/puppeteer-extra/tree/master/packages/puppeteer-extra-plugin-stealth/evasions
Detection and defense
#BHUSA @BlackHatEvents
Information Classification: General
Headless/automated Browser Detection
• The shortcoming of previously public disclosed detection methods 
shortcoming
UserAgent
Easy to bypass
AppVersion
Easy to bypass
Webdriver
Can be closed by set args
Chrome
Diff chrome vs chromium
Plugins
Seems not work
MimeType
Diff chrome vs chromium
Language
Diff chrome vs chromium
Devtools
Seems not work
shortcoming
Permission
Seems not work
Time elapse
affect user experience
Broken image
Seems not work
Mouse move
Need to wait, not stable
WebGL
Easy to hook bypass
OuterDim
Seems not work
RTT
Seems not work
...
...
Detection and defense
#BHUSA @BlackHatEvents
Information Classification: General
Headless/automated Browser Detection
• From security researcher's perspective
• How to analysis:
- The different between Headless Chrome and Normal Chrome
-- the different characteristics are important
- An in-depth look at the implementation of headless browser
-- The key to find stable features to detect
Detection and defense
#BHUSA @BlackHatEvents
Information Classification: General
Headless/automated Browser Detection
• A new stable method to detect all headless browsers
- The key is to detect the hidden opened Devtools instance in browser
Cpu: AMD 5900x, 4.3Ghz
x86 release build
Copy used 33 milliseconds
Detection and defense
#BHUSA @BlackHatEvents
Information Classification: General
Headless/automated Browser Detection
• A new stable method to detect all headless browsers
- The key is to detect the hidden opened Devtools instance in browser
After test ( ad.jar
DexClassLoader.loa
dClass(“com.ad”)
http://xxx.xx/task.html
Js  Java
Task list:
Click url: a.com/id=xxx
Log url: log.a.com/xxx
Random click
Click(x,y) from task
Click by special
element
xxx
Detect invisible mobile native/webview ad click  
invisible mobile ad click results in: the mobile phone becomes hot, lost 
power, increase traffic fee, and becomes a control terminal of the 
underground industry. The advertising effect is poor, and the 
advertisements on the APP may no longer deliver their budget.
Detection and defense
#BHUSA @BlackHatEvents
Information Classification: General
Code protection 
mechanism
Code loading 
mechanism
Anti-detection 
mechanism
data transfer 
mechanism
Code obfuscation
Most use apk shells, 
such as bangbang, 
360 apk shiled
Most use dynamic 
dex, jar loading
All detect root, proxy, 
hook framework, 
developer mode, 
emulator, etc.
Even is there a light 
sensor, is there a 
baseband, current 
battery level, etc.
Most of them use 
AES and RSA for 
encrypted 
transmission of task 
acquisition and 
information upload.
Detect invisible mobile native/webview ad click  
• The malware is skilled in anti-analysis, anti-debugging, anti-VM, difficult to analyze
Detection and defense
#BHUSA @BlackHatEvents
Information Classification: General
The key technical points for achieving malicious clicks on advertisements
WebView Renderer
Js Bridge Communication
Simulate Click
Single http get/post, no buried data 
reporting, no conversionIt is valid only 
if the page is displayed, browsed, and 
clicked by similar real users.Rendering
only via WebView
Js: use WebView.evaluateJavascript()
control the pages
Inject new TouchEvent(), Click(x,y)、
Click(random)
Java: MotionEvent ACTION_DOWN x,y
SDK: add JavascriptInterface(“xxBridge”) 
in webview, load target url
Js: use xxBridge.send(tasklist) to 
communicate with APP’s java code.
Javascript tells java to click where.
Detect invisible mobile native/webview ad click  
Detection and defense
#BHUSA @BlackHatEvents
Information Classification: General
Detect invisible mobile native/webview ad click  
Detection and defense
#BHUSA @BlackHatEvents
Information Classification: General
2. Hook the key point : proxy、developer、adb、okhttp、WebView、ssl unpinning ……
• The hook forces the WebView debuggable to be enabled, and uses the CDP protocol to remotely debug 
pages, networks, js, dom, etc.
•
chrome：inspect
tools：chrome-remote-interface
• If you only want to monitor WebView, AOSP modify the WebView method
• Unpack: Using FART Technology
tools
advantage
root
Magisk
As long as you can unlock the bootloader, you can root
Root check bypass
Shamiko white list
Remounting method, most scenarios cannot be detected
Hook framework
lsposed
Stable, no xposed features, can hide icons, package names
A phone that doesn’t 
appear to be rooted
Detect invisible mobile native/webview ad click  
1. Using no rooted signature phone、using hook to bypass environment check：
Detection and defense
#BHUSA @BlackHatEvents
Information Classification: General
the first run
the second run
coordinates
interval
Detect android simulator and mobile key press genius
Detection and defense
#BHUSA @BlackHatEvents
Information Classification: General
Traditional detection methods：
1. Detect whether the resource file exists. 
- Disadvantages: The ID of the extension must be known, web_accessible_resources must be satisfied.
1. 2. DOM sharing, detection of special variables, special cookies, disadvantages: plug-ins 
modify the source code of the page and insert special tags
Detect malware PC browser extension hijack
Detection and defense
#BHUSA @BlackHatEvents
Information Classification: General
Traditional detection methods：
3. The page js sends a message to the plugin to judge the returned information. 
- Disadvantage: Need to solve the externally_connectable URL matching problem
Detect malware PC browser extension hijack
Detection and defense
#BHUSA @BlackHatEvents
Information Classification: General
In many cases, the plug-in id and file characteristics are unknown
we think of CSP ：
Content-Security-Policy-Report-Only: policy
• Report js url and extension name
Detect malware PC browser extension hijack
Detection and defense
#BHUSA @BlackHatEvents
Information Classification: General
Agenda
• Background
• Advertising fraud and anti-fraud
• In-depth analysis of typical cases
• Crowd and key tech analysis 
• Detection and defense
• Summary and recommendations
#BHUSA @BlackHatEvents
Information Classification: General
Summary of this talk
•
Background 
- introduction to advertising-related terms, ad types, and industry scale
•
Advertising fraud and anti-fraud
- where ad-fraud occurs in the industry based on the background image
•
In-depth analysis of typical cases 
- including mobile SDK malware, browser trojans, multiple hacking tools/library
•
Summary of key technologies and make a crowd analysis
- what‘s the most important problems we need to solve
•
Detection and defense 
- introduce our innovative detection methods for 4 type of scenes
•
Summary of Project Heracles results
- hundreds of underground industry practitioners *
- fraud or illegal control of computer information systems
Summary and recommendations
#BHUSA @BlackHatEvents
Information Classification: General
Advice to the upstream and downstream of the 
advertising industry
• Advice for ad network platforms
- Perhaps an anti underground industry alliance can be established between ad platforms
- Share intelligence information with each other, as they often cheat on multiple platforms at the same time
• Advice for Antivirus Software Manufacturers
- Discovery and blocking of ad anti-fraud may be a good direction for cooperation with Internet companies
• Advice for App developers
- Carefully review when incorporating third-party SDKs, Choose a big advertising alliance platform to monetize
- Avoid being apprehended by law enforcement agencies for helping cybercriminals, or removed from app stores
• Advice for browser developers
- Strengthen the security check of browser extensions loaded with tampered configuration files
- prevent traffic hijacking, remove the malware crx browser extensions
Summary and recommendations