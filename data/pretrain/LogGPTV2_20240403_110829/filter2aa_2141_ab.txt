# Angr 符号执行框架概述与使用指南

## 1. Angr 概述
- **集成符号执行**：Angr 是一个强大的符号执行框架，集成了多种工具和库。
- **主要组件**：
  - `path`, `path_group`, `factory` 等核心类
  - `CLE` 和 `archinfo` 用于处理二进制文件和架构信息
  - `PyVEX` 和 `SimuVEX` 用于中间表示 (IR) 转换
  - `Claripy` 作为约束求解引擎
  - `analysis` 和 `surveyors` 用于路径探索和分析

## 2. Hello Angr 脚本示例
### 2.1 初体验
```python
import angr

# 创建项目
p = angr.Project("test")

# 使用 Explorer 进行路径探索
ex = p.surveyors.Explorer(find=(0x400844,), avoid=(0x400855,))
ex.run()

# 打印找到的输入
print(ex.found[0].state.posix.dumps(0))
```

### 2.2 使用 path_group
```python
import angr

# 创建项目
p = angr.Project("test")

# 创建初始状态
initial_state = p.factory.entry_state()

# 创建路径组
pg = p.factory.path_group(initial_state)

# 探索路径
pg.explore(find=(0x4005d1,))

# 打印结果
print(pg)
print(pg.found[0])
print(pg.found[0].state.posix.dumps(0))
```

### 2.3 SimState 的使用
- **entry_state**：初始化为程序入口点的状态
- **blank_state**：几乎未初始化的状态对象
- **符号内存、寄存器和约束**：
  ```python
  import angr

  b = angr.Project('/bin/true')
  s = b.factory.blank_state(addr=0x08048591)
  s = b.factory.entry_state()
  print(s.memory.load(b.loader.min_addr(), 5))
  ```

## 3. 参数设置
### 3.1 设置命令行参数
```python
import angr
import claripy

# 创建项目
p = angr.Project("test")

# 创建符号变量
args = claripy.BVS('args', 8*16)

# 创建初始状态
initial_state = p.factory.entry_state(args=["./vul", args])

# 创建路径组并探索
pg = p.factory.path_group(initial_state)
pg.explore(find=(0x4005d1,))

# 打印结果
print(pg)
print(pg.found[0])
print(pg.found[0].state.posix.dumps(0))
```

### 3.2 Claripy 前端
- **创建符号变量**：
  ```python
  >>> claripy.BVS('x', 32)  # 创建 32 位符号变量
  >>> claripy.BVV(0x12345678, 32)  # 创建 32 位具体值
  ```

## 4. 内存访问
### 4.1 在内存地址上放置符号变量
```python
import angr

# 创建项目
p = angr.Project('./vul')

# 创建空白状态
s = p.factory.blank_state(addr=0x80485c8)

# 创建符号变量
bvs = s.se.BVS('to_memory', 8*4)
s.se.add(bvs > 1000)

# 存储符号变量到内存
s.memory.store(0x08049b80, bvs, endness='Iend_LE')

# 创建路径组并探索
pg = p.factory.path_group(s, immutable=False)
...
```

### 4.2 访问数据
- **求解器引擎**：
  ```python
  # 获取整数
  print(s.se.any_int(s.regs.rax))

  # 获取字符串
  print(s.se.any_str(s.memory.load(0x1000, 10, endness='Iend_LE')))

  # 存储数据
  aaaa = claripy.BVS('aaaa', 32)
  s.regs.rax = aaaa
  s.memory.store(0x1000, aaaa, endness='Iend_LE')
  s.memory.store(s.regs.rax, aaaa, endness='Iend_LE')
  ```

## 5. Posix 文件系统
### 5.1 对 stdin 的内容加上限制
```python
import angr

# 创建项目
p = angr.Project('./vul')

# 创建完整初始化状态
st = p.factory.full_init_state(args=['./vul'])

# 限制前 28 个字节为非空且非换行符
for _ in range(28):
    k = st.posix.files[0].read_from(1)
    st.se.add(k != 0)
    st.se.add(k != 10)

# 限制最后一个字节为换行符
k = st.posix.files[0].read_from(1)
st.se.add(k == 10)

# 重置符号 stdin 的属性并设置长度
st.posix.files[0].seek(0)
st.posix.files[0].length = 29
...
```

## 6. 优化
### 6.1 实际问题
- **长时间运行**：可能几个小时都找不到目标路径
- **崩溃**：运行过程中可能会出现错误

### 6.2 环境配置
- **共享库**：复杂的 libc 函数可能导致分析停滞
- **模拟过程**：使用 `SimProcedure` 和 `hook_symbol` 避免进入复杂函数
  ```python
  p = angr.Project('./vul',
                    load_options={'auto_load_libs': True},
                    use_sim_procedures=True,
                    exclude_sim_procedures_func='strcmp')

  class MyStrcmp(angr.SimProcedure):
      def run(self):
          ...
          return ...

  p.hook_symbol('strcmp', MyStrcmp)
  ```

### 6.3 未知系统调用
```python
def check1(state):
    state.regs.eax = 20

p.hook(0x080485d7, check1, length=5)
initial_state = project.factory.entry_state(
    args=[project.filename, arg1],
    add_options={'BYPASS_UNSUPPORTED_SYSCALL'})
```

### 6.4 探索策略
- **广度优先搜索 (BFS)** 和 **深度优先搜索 (DFS)**
  ```python
  pg = p.factory.path_group(initial_state, immutable=False)
  pg.use_technique(angr.exploration_techniques.DFS())
  pg.run(step_func=my_find_func)
  ```

### 6.5 路径爆炸
- **Veritesting**：结合静态和动态符号执行，减少路径爆炸
  ```python
  pg = p.factory.path_group(initial_state, immutable=False, veritesting=True)
  ```

- **LAZY_SOLVES**：延迟检查路径的可满足性
  ```python
  initial_state = project.factory.entry_state(args=[project.filename, arg1])
  initial_state.options.discard('LAZY_SOLVES')
  ```

- **动态路径剪枝**：根据已检查路径推估 unsatisfiable path 的比例，调整后续路径的检查概率

## 7. 其他调试选项
- **REVERSE_MEMORY_NAME_MAP**：保留对内存地址的信息
- **TRACK_ACTION_HISTORY**：记录模拟执行的历史动作

## 8. 结论
- **自动 CTF**：Angr 可以用于自动化 CTF 解题
- **脚本写法和优化技巧**：掌握 Angr 的各种脚本写法和优化技巧
- **局限性**：仅靠符号执行进行自动分析还不够

## 9. 参考资料
- **Symbolic Execution**：
  - [Angr](http://angr.io/)
  - [KLEE](https://klee.github.io/)
  - [Triton](http://triton.quarkslab.com/)
- **我的博客**：[YSC21's Blog](http://ysc21.github.io/)

## 10. Q & A