# 前言
发现自己对tp的底层不太熟悉，看了@phpoop师傅文章有所启发，于是有此文，记录自己的分析过程  
希望大师傅们嘴下留情，有分析不对的地方还请师傅们指出orz
# Thinkphp3.2.3
首先开启调试  
在  
`/Application/Home/Conf/config.php`加上
    'SHOW_PAGE_TRACE' => true,
并且添加数据库配置
    //数据库配置信息
    'DB_TYPE'   => 'mysql', // 数据库类型
    'DB_HOST'   => 'localhost', // 服务器地址
    'DB_NAME'   => 'thinkphp', // 数据库名
    'DB_USER'   => 'root', // 用户名
    'DB_PWD'    => '123456', // 密码
    'DB_PORT'   => 3306, // 端口
    'DB_PREFIX' => 'think_', // 数据库表前缀 
    'DB_CHARSET'=> 'utf8', // 字符集
    'DB_DEBUG'  =>  TRUE, // 数据库调试模式 开启后可以记录SQL日志 3.2.3新增
测试数据如下  
添加实例代码  
用I函数进行动态获取参数
## field
field方法属于模型的连贯操作方法之一，主要目的是标识要返回或者操作的字段，可以用于查询和写入操作
    field('username,age')->where(array('age'=>$age))->find();
        }
    }
执行语句相当于  
## where
    where(array('age'=>$age))->select();
        }
    }
接着请求  
`http://127.0.0.1/thinkphp3/index.php?m=Home&c=index&a=index&age=1`
## 转义代码分析
当我们请求`age=1'`尝试注入的时候
被自动转义了  
find函数里，会解析出options  
跟入  
继续跟进  
在`parseSql`里会依此执行函数  
发现在`ThinkPHP/Library/Think/Db/Driver.class.php`的函数`parseWhere`里
    protected function parseWhere($where) {
            $whereStr = '';
            if(is_string($where)) {
                // 直接使用字符串条件
                $whereStr = $where;
            }else{ // 使用数组表达式
                $operate  = isset($where['_logic'])?strtoupper($where['_logic']):'';
                if(in_array($operate,array('AND','OR','XOR'))){
                    // 定义逻辑运算规则 例如 OR XOR AND NOT
                    $operate    =   ' '.$operate.' ';
                    unset($where['_logic']);
                }else{
                    // 默认进行 AND 运算
                    $operate    =   ' AND ';
                }
                foreach ($where as $key=>$val){
                    if(is_numeric($key)){
                        $key  = '_complex';
                    }
                    if(0===strpos($key,'_')) {
                        // 解析特殊条件表达式
                        $whereStr   .= $this->parseThinkWhere($key,$val);
                    }else{
                        // 查询字段的安全过滤
                        // if(!preg_match('/^[A-Z_\|\&\-.a-z0-9\(\)\,]+$/',trim($key))){
                        //     E(L('_EXPRESS_ERROR_').':'.$key);
                        // }
                        // 多条件支持
                        $multi  = is_array($val) &&  isset($val['_multi']);
                        $key    = trim($key);
                        if(strpos($key,'|')) { // 支持 name|title|nickname 方式定义查询字段
                            $array =  explode('|',$key);
                            $str   =  array();
                            foreach ($array as $m=>$k){
                                $v =  $multi?$val[$m]:$val;
                                $str[]   = $this->parseWhereItem($this->parseKey($k),$v);
                            }
                            $whereStr .= '( '.implode(' OR ',$str).' )';
                        }elseif(strpos($key,'&')){
                            $array =  explode('&',$key);
                            $str   =  array();
                            foreach ($array as $m=>$k){
                                $v =  $multi?$val[$m]:$val;
                                $str[]   = '('.$this->parseWhereItem($this->parseKey($k),$v).')';
                            }
                            $whereStr .= '( '.implode(' AND ',$str).' )';
                        }else{
                            $whereStr .= $this->parseWhereItem($this->parseKey($key),$val);
                        }
                    }
                    $whereStr .= $operate;
                }
                $whereStr = substr($whereStr,0,-strlen($operate));
            }
            return empty($whereStr)?'':' WHERE '.$whereStr;
        }
继续跟进`parseWhereItem`
    protected function parseWhereItem($key,$val) {
            $whereStr = '';
            if(is_array($val)) {
                if(is_string($val[0])) {
                    $exp    =   strtolower($val[0]);
                    if(preg_match('/^(eq|neq|gt|egt|lt|elt)$/',$exp)) { // 比较运算
                        $whereStr .= $key.' '.$this->exp[$exp].' '.$this->parseValue($val[1]);
                    }elseif(preg_match('/^(notlike|like)$/',$exp)){// 模糊查找
                        if(is_array($val[1])) {
                            $likeLogic  =   isset($val[2])?strtoupper($val[2]):'OR';
                            if(in_array($likeLogic,array('AND','OR','XOR'))){
                                $like       =   array();
                                foreach ($val[1] as $item){
                                    $like[] = $key.' '.$this->exp[$exp].' '.$this->parseValue($item);
                                }
                                $whereStr .= '('.implode(' '.$likeLogic.' ',$like).')';                          
                            }
                        }else{
                            $whereStr .= $key.' '.$this->exp[$exp].' '.$this->parseValue($val[1]);
                        }
                    }elseif('bind' == $exp ){ // 使用表达式
                        $whereStr .= $key.' = :'.$val[1];
                    }elseif('exp' == $exp ){ // 使用表达式
                        $whereStr .= $key.' '.$val[1];
                    }elseif(preg_match('/^(notin|not in|in)$/',$exp)){ // IN 运算
                        if(isset($val[2]) && 'exp'==$val[2]) {
                            $whereStr .= $key.' '.$this->exp[$exp].' '.$val[1];
                        }else{
                            if(is_string($val[1])) {
                                 $val[1] =  explode(',',$val[1]);
                            }
                            $zone      =   implode(',',$this->parseValue($val[1]));
                            $whereStr .= $key.' '.$this->exp[$exp].' ('.$zone.')';
                        }
                    }elseif(preg_match('/^(notbetween|not between|between)$/',$exp)){ // BETWEEN运算
                        $data = is_string($val[1])? explode(',',$val[1]):$val[1];
                        $whereStr .=  $key.' '.$this->exp[$exp].' '.$this->parseValue($data[0]).' AND '.$this->parseValue($data[1]);
                    }else{
                        E(L('_EXPRESS_ERROR_').':'.$val[0]);
                    }
                }else {
                    $count = count($val);
                    $rule  = isset($val[$count-1]) ? (is_array($val[$count-1]) ? strtoupper($val[$count-1][0]) : strtoupper($val[$count-1]) ) : '' ; 
                    if(in_array($rule,array('AND','OR','XOR'))) {
                        $count  = $count -1;
                    }else{
                        $rule   = 'AND';
                    }
                    for($i=0;$iparseWhereItem($key,$val[$i]).' '.$rule.' ';
                        }
                    }
                    $whereStr = '( '.substr($whereStr,0,-4).' )';
                }
            }else {
                //对字符串类型字段采用模糊匹配
                $likeFields   =   $this->config['db_like_fields'];
                if($likeFields && preg_match('/^('.$likeFields.')$/i',$key)) {
                    $whereStr .= $key.' LIKE '.$this->parseValue('%'.$val.'%');
                }else {
                    $whereStr .= $key.' = '.$this->parseValue($val);
                }
            }
            return $whereStr;
        }
此时我们的key是age，val是1，于是执行
    }else {
                    $whereStr .= $key.' = '.$this->parseValue($val);
                }
继续跟进`parseValue`
    protected function parseValue($value) {
            if(is_string($value)) {
                $value =  strpos($value,':') === 0 && in_array($value,array_keys($this->bind))? $this->escapeString($value) : '\''.$this->escapeString($value).'\'';
            }elseif(isset($value[0]) && is_string($value[0]) && strtolower($value[0]) == 'exp'){
                $value =  $this->escapeString($value[1]);
            }elseif(is_array($value)) {
                $value =  array_map(array($this, 'parseValue'),$value);
            }elseif(is_bool($value)){
                $value =  $value ? '1' : '0';
            }elseif(is_null($value)){
                $value =  'null';
            }
            return $value;
        }
可以发现这里就执行了`escapeString`  
返回了转义后的结果  
调用栈如下  
## 如何注入
既然如此，那么怎么去注入呢，底层就调用了`escapeString`  
我们看到`parseWhereItem`函数
在绿色标记的几个判断语句里，是没有调用`parseValue`函数的，也就不会调用到`escapeString`  
然后我们又可以看到，exp就是val数组的第一个值
那么我们是不是就能注入了呢  
我们修改代码如下
    field('username,age')->where(array('age'=>$age))->find();
        }
    }
这里暂时不用I函数接收参数  
传入payload  
`  
我们进入了判断  
返回值并没有转义，页面上也能够直接看出来
为什么用exp不用bind呢，因为bind执行后的结果
会拼接一个 `= :` 这显然是对我们注入不利的  
那么 我们利用报错注入
    http://127.0.0.1/thinkphp3/index.php?m=Home&c=index&a=index&age[0]=exp&age[1]==%271%27%20and%20(extractvalue(1,concat(0x7e,(select%20user()),0x7e)))%20%23
成功造成了注入
不过我们接收参数修改为I函数
## I函数
修改代码
    field('username,age')->where(array('age'=>$age))->find();
        }
    }
同样的请求发现报错了
在
我们跟进调试一下
    function I($name,$default='',$filter=null,$datas=null) {
        static $_PUT    =   null;
        if(strpos($name,'/')){ // 指定修饰符
            list($name,$type)   =   explode('/',$name,2);
        }elseif(C('VAR_AUTO_STRING')){ // 默认强制转换为字符串
            $type   =   's';
        }
        if(strpos($name,'.')) { // 指定参数来源
            list($method,$name) =   explode('.',$name,2);
        }else{ // 默认为自动判断
            $method =   'param';
        }
        switch(strtolower($method)) {
            case 'get'     :   
                $input =& $_GET;
                break;
            case 'post'    :   
                $input =& $_POST;
                break;
            case 'put'     :   
                if(is_null($_PUT)){
                    parse_str(file_get_contents('php://input'), $_PUT);
                }
                $input  =   $_PUT;        
                break;
            case 'param'   :
                switch($_SERVER['REQUEST_METHOD']) {
                    case 'POST':
                        $input  =  $_POST;
                        break;
                    case 'PUT':
                        if(is_null($_PUT)){
                            parse_str(file_get_contents('php://input'), $_PUT);
                        }
                        $input  =   $_PUT;
                        break;
                    default:
                        $input  =  $_GET;
                }
                break;
            case 'path'    :   
                $input  =   array();
                if(!empty($_SERVER['PATH_INFO'])){
                    $depr   =   C('URL_PATHINFO_DEPR');