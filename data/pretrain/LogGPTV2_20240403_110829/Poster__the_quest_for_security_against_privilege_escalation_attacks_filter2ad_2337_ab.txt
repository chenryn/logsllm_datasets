### 34 Role Initialization and Assignment

Our model categorizes applications into 34 distinct roles. During initialization, at least 34 roles are predefined, and users can assign one or more of these roles to an application after installation. Additionally, a role can be assigned to multiple applications once it is defined. The "SYSTEM" role is automatically assigned to all system applications by default. Users have the flexibility to define or delete any new roles as needed.

Consider two applications, A and B, where A initiates an Inter-Component Communication (ICC) or attempts to access a file created by B. 

**Case 1:** Application A has the SYSTEM role. No further action is required.

**Case 2:** Applications A and B are third-party applications. In this scenario, a detailed inspection of the assigned roles is necessary.

### 2.2.5 Policy Creation and Management

We propose a model called ARBAC (Attribute-Role-Based Access Control) that integrates Role-Based Access Control (RBAC) and Attribute-Based Access Control (ABAC). In ARBAC, access privileges to resources (files, applications, etc.) are dynamically assigned based on attribute values (permissions, roles, etc.) at the kernel level. At the middleware level, privileges for performing operations (e.g., establishing ICCs) and accessing resources (e.g., the content of ICCs) are also dynamically assigned based on the same attribute values.

Each policy is encapsulated as an independent atomic policy to ensure the compatibility and scalability of ARBAC. The final decision is made by combining all these atomic policies. Policies have different priorities for access control. A single policy can be described as follows:

\[ \text{Policy}_i ::= \{ \text{Rule}_1, \text{Rule}_2, \ldots, \text{Rule}_n, \text{pri}_i \} \]

where \( n > 0 \), \(\text{Rule}_i\) is an expression composed of attribute values with logical operators, and \(\text{pri}_i\) is the priority of the policy. The final decision is determined by the combination function:

\[ \text{Decision} \leftarrow f_{\text{combine}} (\text{Policy}_1, \text{Policy}_2, \ldots, \text{Policy}_n) \]

### 2.3 Component Interaction

The architecture is illustrated in Figure 2. In the following paragraphs, we will describe the interactions among the various modules of the framework. The main processes include handling ICC calls (steps 1-10), creating or writing a file (steps a-d), and file read access (steps i-v).

#### Figure 1: Privacy Type Based Access Control (PTBAC)

As shown in Figure 1, when Application A writes data to a file, the privacy check model verifies whether the data contains confidential information. When Application B attempts to access the file, PTBAC checks if the file is tainted and enforces access control accordingly.

#### Figure 2: Interactions Among Components

1. **ICC Call Handling:**
   - All ICC calls are intercepted by the ReferenceMonitor (step 1).
   - The PackageManager is invoked (step 2) to query the database and validate permission assignments for the caller and callee.
   - The PackageManager calculates the permission escalation (Pescalation) of the two intercepting components and records it in the Android permission database (step 3). This reduces the callee's permission set during the first lifecycle.
   - The PackageManager returns the validated results (steps 4-5).
   - If the ReferenceMonitor allows the call, it invokes the DecisionEngine (step 6) to ensure the communication complies with other security policies.
   - The DecisionEngine then interacts with the PrivacyChecker (step 7) to handle the Intent parcel and obtain the tainted tag provided by TaintDroid.
   - If the Intent parcel contains tainted data, the DecisionEngine requests a corresponding policy from the policy database (step 8).
   - If a matching policy is found, it indicates that the user allows this specific type of ICC call. The DecisionEngine informs the ReferenceMonitor about its decision (step 9), and the ReferenceMonitor either allows (step 10) or denies the call.

2. **File Operations:**
   - Files and sockets are commonly used to establish channels for colluding applications to interact.
   - When an application writes to a file (step a), the PrivacyChecker continuously monitors the process.
   - If the taint tracking system detects that specific privacy data is written to the file (step b), the file becomes tainted, and the taint information is analyzed and stored in the policy database (step c).
   - When another application attempts to access the file or connect to a local socket (step i), the PTBAC mechanism checks the application's permissions and queries the policy database (steps ii-iii).
   - If a matching policy is found, it means the access request is allowed by the user. The DecisionEngine informs the mandatory access control (MAC) module in the Linux kernel about its decision (step iv), and the MAC module either allows (step v) or denies the access request.

### 3. Evaluation

We conducted a series of tests to evaluate our framework, which was installed on a HUAWEI T8808D running a modified version of Android 4.1.

1. **Default Case:**
   - We evaluated the default case without any security settings. Attacks published in [7, 9, 10] were all prevented by the framework, but some third-party applications that need to work together failed to do so.
   
2. **Role Assignment:**
   - Assigning roles to these applications resolved the issues, and they worked normally.

3. **Collusion Attacks:**
   - Collusion attacks using covert channels with Single Setting, Multiple Settings, and Automatic Intents were tested and detected. However, channels using /proc/stat and Threads Enumeration could not be blocked until additional policies were enforced.

4. **Comparison:**
   - Our framework was compared to previous solutions, as shown in Table 1.

| **Framework** | **Privilege Escalation Attack** | **Confused Deputy Attacks (50 samples)** | **Collusion Attacks (7 samples)** | **Tracking Privacy Flow** |
|---------------|---------------------------------|------------------------------------------|-----------------------------------|---------------------------|
| XManDroid     | Effective and flexible          | Ineffective                              | High false positives              | Effective and flexible    |
| TaintDroid    | No false positives              |                                          |                                   |                           |
| Our Design    | Effective and flexible          | No false positives                       |                                   |                           |

We did not conduct quantitative performance overhead tests, but in our evaluation, the performance overhead was below human perception, and no noticeable delays were observed. The primary cause of performance overhead is the dynamic taint tracking.

### 4. Conclusion

We presented a new extension to the Android platform to prevent privilege escalation attacks. This framework improves upon XManDroid and is policy-centered. It analyzes application communication in terms of permissions and content to ensure compliance with the design principles. Unlike XManDroid, our framework incorporates a role-based management model, enabling users to set a whitelist and maintain call-chains or accesses that the system allows. This architecture preserves the advantages of a policy-centered framework and reduces false positives in preventing collusion attacks. Test results show that the framework is efficient and does not require extra work from application developers.

### Acknowledgments

Our work was supported by Google's Academic Cooperation Program and the Natural Science Foundation of China under Grant No. 61272481.

### References

[1] Google Android. http://www.android.com/.

[2] W. Enck, P. Gilbert, B.-G. Chun et al., TaintDroid: an information-flow tracking system for real-time privacy monitoring on smart phones. In Proc. of the 9th USENIX conference on Operating systems design and implementation, Vancouver, British Columbia, Canada, pages 1–6. USENIX Association, October 2010.

[3] S. Bugiel, L. Davi, A. Dmitrienko et al. Towards taming conflicting traditions. In Proc. of the 2011 Workshop on Governance of Technology, Information, and Policies (GTIP’11), New York, USA, pages 5–12. ACM, Dec. 2011.

[4] N. Husted, H. Sa ̈di et al., Smartphone security limitations: privilege escalation attacks on android. In Proc. of the 19th Annual Network & Distributed System Security Symposium (NDSS’12), San Diego, CA, USA, February 2012.

[5] Y. Zhou and X. Jiang. Dissecting android malware: Characterization and evolution. In Proc. of the 33rd IEEE Symposium on the Security and Privacy, San Francisco, California, USA, pages 95–109. IEEE, May 2012.

[6] Claudio Marforio et al. Application Collusion Attack on the Permission-Based Security Model and its Implications for Modern Smartphone Systems. Tech. Report 724, Apr. 2011.

[7] Roman Schlegel et al. Soundcomber: A Stealthy and Context-Aware Sound Trojan for smart phones. In Proceedings of the 18th Annual Network and Distributed System Security Symposium (NDSS), Feb. 2011.

[8] S. Bugiel, L. Davi et al. XManDroid: A new android evolution to mitigate privilege escalation attacks. Technical Report 04, Technische University at Darmstadt, 2011.

[9] W. Enck, M. Ongtang, and P. McDaniel. Mitigating Android software misuse before it happens. Technical Report NAS-TR-0094-2008, Penn. State University, 2008.

[10] L. Davi, A. Dmitrienko, A.-R. Sadeghi, and M. Winandy. Privilege escalation attacks on Android. In Proceedings of the 13th Information Security Conference (ISC), 2010.

[11] M. Dietz et al. Quire: Lightweight provenance for smart phone operating systems. In Proc. of the 20th USENIX Security Symposium (USENIX Security’11), San Francisco, California, USA, pages 51–58, August 2011.