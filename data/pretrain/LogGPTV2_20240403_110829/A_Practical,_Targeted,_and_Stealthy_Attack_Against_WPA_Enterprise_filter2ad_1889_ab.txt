appear being issued by APN using standard tools such
as aircrack-ng [2].
2. C sends Probe Request frames to scan for active ac-
cess points in order to reassociate with a suitable wire-
less network.
3. APA reacts to every Probe Request frame from C by
jamming it and broadcasting Probe Response to C
with SSID SA. This has the effect of preventing recep-
tion of C’s Probe Request frames at APN , allowing
APA to impersonate APN .
4. C connects to SA advertised by APA, thereby creating
4
Figure 4. An example of reactive jamming,
where an attacker conditionally jams a target
based upon the contents of a wireless frame.
In this example, the attacker detects that a
target is issuing a Probe Request frame. Be-
fore the target ﬁnishes transmitting the frame,
the attacker issues a Probe Response frame to
jam the target. Note that because the attacker
can conditionally apply this jamming tech-
nique, the attack can be precisely targeted at
a particular client and type of transmission.
a new network entry in the client’s wireless network
conﬁguration database. In effect, the attacker abuses
the user’s trust in the legitimate SSID SN .
5. RA presents C with a certiﬁcate signed by a trusted
CA to avoid arousing suspicion.1
6. Normal authentication proceeds, such that C discloses
a hash of his authentication credentials to RA.
7. A transfers the captured hash to cloud-based password
cracker to recover the plaintext authentication creden-
tials.
In the following sections, we elaborate upon each of the
steps of the attack outlined here. In particular, we describe
the jamming strategy required to coerce C to communicate
with APA. We then provide a procedure for choosing a suit-
able value for SA and the properties necessary for RA’s TLS
certiﬁcate. Finally, we outline a procedure for efﬁciently re-
covering authentication credential plaintext.
3.3 Reactive Jamming
Jamming a radio signal is often described as a physi-
cal operation where the jammer’s transmitter outputs energy
into the medium to disrupt communication without further
knowledge of the data it is trying to disrupt. In the context
of our attack, however, the jammer needs additional higher-
layer knowledge of the victim’s transmitted data in order
to react properly. For the purposes of our work, a reactive
jammer is a device that is capable of A) examining higher-
level network protocol data contained in wireless frames,
1We discuss issues surrounding obtaining trustworthy certiﬁcates later
in the section.
and B) conditionally jamming a target based on intercepted
data prior to that frame’s end of transmission. A depiction
of this technique is shown in Figure 4.
In our attack, the access point APA operates by waiting
for Probe Request frames from a client. Once a frame is
detected, but before transmission ends, APA sends a con-
tinuous train of Probe Response frames that do not obey
SIFS, DIFS, or PIFS timings in the 802.11 standard and
lasts long enough to ensure that C receives it.2 If the orig-
inal frame is jammed before it reaches APN , there will be
no response from it, removing its entry from the SSID list
at the client C.
Successful jamming requires that the attacker is able to
respond quickly to transmissions from C. Let t0 be the
transmission time of C’s Probe Request frames, TC the
time required to transmit one Probe Request frame, TT
the radio turnaround time of APA, Tb the transmission time
of 1 bit, and td the time at which APA detects a Probe
Request frame from C. To successfully jam the Probe
Request frame, TT must satisfy the inequality
td + TT < t0 + TC − Tb.
(1)
For instance, with a rate of 1.0 Mbps and frame size of ≈
600 bits, TC < 600µs.
Even though this technique only works for a ﬁxed chan-
nel, Section 3.7 discusses the case where other channels
must be jammed. Elimination of competing access points
in the client’s SSID list serves as the ﬁrst step of the attack.
3.4 SSID Selection
As alluded to in Section 2.2, wireless network conﬁgura-
tion interfaces provided by common operating systems can
render maliciously-named networks indistinguishable from
legitimate networks to the average user.
In the simplest
case, all that is needed to exploit this shortcoming is to use
an SSID with a trailing or leading non-printable character
in its name – e.g., “Enterprise” vs. “Enterprise ”.
However, as in the case of browser URL spooﬁng, substitu-
tion of similar glyphs can produce spoofed network names.
The standard deﬁnes SSIDs as an arbitrary string of up to 32
characters, and leaves the interpretation open to the imple-
mentation [26]. Given the abundance of glyphs available,
especially in extended character sets, this implies that the
set of possible spoofed SSIDs available for use by an at-
tacker is potentially large.
When the victim client receives a Probe Response
frame with a spoofed SSID, a new network proﬁle will be
2SIFS, DIFS, and PIFS are inter-frame spaces of different magnitudes.
Shorter inter-frame spacing gives a transmitter greater transmission pri-
ority on a wireless channel. By necessity, reactive jammers ignore such
inter-frame spacing standards.
5
created. None of the security settings for the legitimate net-
work will apply to the new proﬁle. Creation of a new net-
work proﬁle is a critical step of the attack, and it illustrates
how subtleties in user interface designs can enable serious
attacks despite the use of theoretically strong authentication
protocols.
3.5 Authentication Server Certiﬁcates
Once a new proﬁle exists in the client for the spoofed
network, the attacker’s authentication server must present
a valid certiﬁcate to the client. To accomplish this task,
the attacker can register a domain that appears similar to
a trusted domain, or one that is related to wireless net-
working in some way (e.g., in our experiments, we regis-
tered the domain openinfrastructures.net). Since
many wireless security products ship with self-signed cer-
tiﬁcates, users may be conditioned to accept any certiﬁcate
that has a semblance of validity. We test this conjecture in
Section 5 with user experiments, and show that it holds in
practice.
The attacker uses the same CA used by RN to sign her
own certiﬁcate and bind it to a name in the registered do-
main. For instance, a deployment that uses VeriSign to sign
its certiﬁcates can be targeted by an attacker registering a
domain, and signing her own certiﬁcate with VeriSign as
well.
Choosing a certiﬁcate may even be made simpler if a
deployment chooses to use its own internal CA to sign cer-
tiﬁcates. If this is the case, then any CA in the client’s trust
store that is willing to sign certiﬁcates – e.g. VeriSign – is
enough to prevent the operating system from reporting an
error to the user.
Once the user accepts the attacker’s certiﬁcate for the
new network proﬁle,
the TLS tunnel between the vic-
tim client and the attacker’s authentication server is estab-
lished, and authentication commences. Crafting a reason-
able certiﬁcate constitutes the ﬁnal step in giving the at-
tacker access to the less secure authentication protocol –
e.g., MSCHAPv2 – that is encapsulated by TLS.
3.6 Recovering Authentication Credentials
Once the client starts MSCHAPv2 authentication, the at-
tacker can record every frame exchanged, or even act as
a full man-in-the-middle, forwarding frames between the
client and the victim network. In both cases, the attacker
can intercept the victim client’s authentication credentials.
Breaking MSCHAPv2 is well documented [41], and
tools such as asleap [50], mschapv2acc [11], and John
the Ripper [37] can recover the plaintext secret given
the conversation handshake. The speedup over brute-force
search claimed by exploiting MSCHAPv2 weaknesses is
216, and this can be improved in practice by distributing the
search over a pool of high-speed computation nodes. For
instance, GPU computing platforms such as CUDA [35] al-
low the attacker to massively parallelize the key search.
To summarize the classic attack against NTLM, given a
key K = K1||K2||K3, the attacker must ﬁrst obtain the
values for either K1 or K2; obtaining K3 is trivial, and only
provides 2 bytes. Cracking DES once yields one of K1 or
K2, giving a total of 9 out of the 16 bytes of the NTLM
hash. The last 7 bytes of the hash can be obtained by run-
ning a dictionary attack against NTLM. In Section 5, we
show how we were able to crack real-world passwords in a
short period of time, and also empirically evaluate the com-
putational effort required to completely execute this step of
our attack.
3.7 Optimizations
While the basic procedure outlined above contains the
essential details of the attack against WPA Enterprise,
a number of optimizations are useful to consider when
mounting this attack in the real-world. We consider pos-
sible improvements in the following.
The basic version of the attack might require the attacker
to be in close proximity to the victim. Depending on the
target, this may not be possible without arousing suspicion
in the victim’s activities. However, inexpensive directional
antennas can make a remote attack possible from great dis-
tances. We examine the performance of one such antenna
in Section 5.
The version of the attack presented above can only target
a single wireless channel, and is limited in practice as wire-
less deployments move towards higher access point den-
sity; this has the effect of making more channels available
to clients. For these scenarios, the attacker could use an
additional jamming device for each of the available chan-
nels, using the same principle of operation as the basic at-
tack. Another strategy would involve jamming the non-
overlapping channels not targeted by the reactive jammer,
essentially forcing the victim client to use the desired chan-
nel covered by the reactive jammer.
In order to convince more security-minded users to ac-
cept the rogue certiﬁcate, other social engineering tech-
niques are possible. Consider an attacker AP that contains
its own certiﬁcate and the one the legitimate authentication
server presents. In the ﬁrst iteration, APA uses the legiti-
mate certiﬁcate and advertises S(cid:48)
N is a visually
equivalent variation of SN . The user can inspect this cer-
tiﬁcate and since it will be the one expected, he will accept
it. TLS session establishment will fail, and APA switches
SSID to S(cid:48)(cid:48)
N , another visually similar variation of SN , cre-
ating yet another network. At this point the user may be
more likely to accept the rogue certiﬁcate, as he has already
N , where S(cid:48)
6
inspected and approved one.
Using arrays of GPUs to parallelize the computation can
shorten the time needed to crack DES. Buying and manag-
ing such an array can be costly, but our evaluation in Sec-
tion 5 demonstrates that current offerings such as Amazon
EC2 [3] can greatly reduce these costs.
We explored four separate approaches for recovering
plaintext from captured authentication hashes. We evalu-
ated the use of a 9800GT card, a GTX280 card, a Tesla
S870 cluster with 8 GPU boards, and an Amazon EC2 Clus-
ter GPU Quadruple Extra Large Instance with two M2060
Fermi CPUs. We evaluate the relative impact of each ap-
proach on the efﬁciency of our attack in Section 5.
4 Attack Prototype Design and Implementa-
tion
5 Evaluation
In the current section, we describe our implementation
of the advanced, targeted evil twin attack. Our proto-
type, shown in Figure 5, uses a desktop computer run-
ning Gentoo Linux for coordination. The machine con-
tains an Intel Core 2 Quad Q9650 3GHz processor, 4GB of
RAM, and an NVIDIA GeForce 9800GT graphics card with
GTX280 GPUs. The reactive jammer is implemented using
two USRP2 software-deﬁned radio boards from Ettus Re-
search [17], each with one RFX2400 daughterboard. A Buf-
falo WZR-HP-300NH wireless router provides the rogue
wireless network, and two HyperGain HG2419G 2.5GHz
19dBi parabolic grid antennas are used to increase the range
of the attack.
The reactive jamming component is a GNURadio-based
software-deﬁned radio (SDR) [20], running an 802.11b
module developed by BBN [5] on our desktop host. The
two USRP2 boards and daughterboards, one for reception
and one for transmission, connect to the host through Gi-
gabit Ethernet adapters. The USRP2s are connected to the
directional antennas.
The reactive jammer is provided with the target client
and access point MAC addresses, and the desired spoofed
SSID. With these parameters, the jammer builds a Probe
Response frame that is then passed to the modulation
blocks for 802.11. The returning data is the train of signals
to repeat on the sender, which is stored in memory. Once
the receiver thread starts, the frame decoding function ﬁlls
the received data buffer from the incoming signals, check-
ing for the target client MAC address. When the desired
Probe Request frame is encountered, the jammer trans-
mits the stored Probe Response train.
For our rogue authentication server, we use the “Wire-
less Pwnage Edition” [51] of FreeRADIUS [18], a patch
that maintains a challenge and response authentication log.
Also connected to the host is the Buffalo router running the
OpenWrt 10.03 ﬁrmware [38]. The router connects to the
desktop computer, and is conﬁgured for WPA Enterprise
using our desktop as a RADIUS server. We registered the
domain openinfrastructures.net, and generated a
certiﬁcate for radius.openinfrastructures.net
signed with a well-known certiﬁcation authority trusted by
all common operating systems.
In this section, we report on an evaluation of our attack
prototype. First, we establish bounds on the reaction time
of our jammer, and the computational overhead required
to recover authentication credential plaintexts. We evalu-
ate the overall effectiveness of our prototype against a pro-
duction WPA Enterprise-protected wireless network of our
own. We quantify the range of our prototype in a sepa-
rate experiment conducted using high-gain antennas in an
urban environment. We report on the real-world effective-
ness of the attack with user experiments with 17 technically-
sophisticated participants. Finally, we present an economic,
worst-case analysis of the attack in terms of the cost of the
hardware and the software required to guarantee the success
of the attack in practice against a particular victim.
5.1 Ethical Considerations
All of the experiments described in this section only tar-
get devices under our control, or ones for which we have ob-
tained prior consent for testing. The experiments were per-
formed in a wired environment whenever possible. How-
ever, to demonstrate the effectiveness of the attack, it was
also necessary to perform it over the air. Note that ﬁne-
grained control of the attack is possible due to the nature
of our jammer implementation that reacts only to speciﬁc
MAC addresses. For test devices that we did not control,
we obtained prior consent from the targeted users, and de-
briefed them after the experiments.
5.2
Jamming Speed
Recall from Section 3.3 that for the reactive jammer to
successfully block transmission of the victim client’s Probe
Request frames, the radio turnaround time of the jammer
must satisfy Eq. (1). This turnaround time effectively de-
termines the maximum reaction speed to detected signals.
Therefore, we performed the following experiment to mea-
sure the reaction time of our jammer.
In this experiment, we RF-wired a USB wireless don-
gle with an external antenna adapter to our jammer through
a pair of 30dB attenuators. The output of the dongle and
jammer transmitter is displayed on our signal analyzer.
7
Figure 5. Overview of hardware used in the prototype implementation of the attack. From left:
desktop, antenna, router, USRP2 software-deﬁned radio, victim client, signal analyzer (for evaluation),
and attenuators.
long to allow for reliable jamming of 802.11n-based wire-
less networks, hardware is available that would render the
attack possible in that context as well.
5.3 Plaintext Recovery
Figure 6. A demonstration of the reaction time
of our jammer. On the left, the signal analyzer
shows an uninterrupted 800µs frame transmit-
ted by a wireless client. On the right, the sig-
nal analyzer shows a Probe Response frame
jammed at 300µs. The horizontal grid width
denotes 200µs divisions.
Figure 6 illustrates the reaction time of our jammer. On
the left panel, a single Probe Request frame lasting 800µs
is shown while no jammer is active. On the right panel, the
same Probe Request frame is interrupted by the jammer
300µs after transmission starts, establishing an upper bound
on the reactive jamming capability of our prototype.
Because 802.11g network management packets are sent
at the lowest rate (1 Mbps) to ensure delivery [26], our pro-
totype’s minimum response time of 300µs means that our
reactive jammer is able to jam 802.11g management packets
at around byte 38 using our software-radio implementation.