as the region for our simulation, which provides a mix of both
highly urban areas as well as rural areas. For gNodeB location
information, we use OpenCellID [45], an open database that
includes tower locations and carrier information. To simplify
the simulation, we select base stations from the database that
are listed as providing LTE from AT&T, the provider with
the most LTE eNodeBs (22,437) in the region. We use LTE
eNodeBs as the number of gNodeBs deployed remains small.
Given their geographic coordinates, we estimate coverage
areas for every gNodeB using a Voronoi diagram. During the
simulation, a UE is assigned to the gNodeB that corresponds
to the region the UE is located within. While such discretiza-
tion is not likely in reality as UEs remain associated with
an gNodeB based on received signal strength, this technique
provides us with a tractable mobility simulation. A partial
map of the simulation region is shown in Figure 2. GNodeB
regions are shaded based on the tracking area value in the
OpenCellID database.
Mobility traces. To simulate realistic mobility patterns
(i.e., users must follow available paths), we generate mobil-
ity traces using the Google Places [31] and Directions [30]
APIs. First, we use the Places API to ﬁnd locations in the
simulation region that are available when searching for “post
ofﬁce6.” Each place is associated with latitudinal and lon-
gitudinal coordinates. We then generate mobility traces by
6Our use of post ofﬁces as endpoints is arbitrary. We chose them as they
Figure 2: Partial simulation map. Cells are shaded by AT&T
tracking area.
Figure 3: gNodeBs visited by simulated mobile users.
randomly selecting start and end points, and use the Direc-
tions API to obtain a polyline with coordinates along with
estimated times to reach points along the line. We generate
50,000 mobility traces: 25,000 cars and 25,000 pedestrians.
We then use ns-3 to process the mobility traces and generate
coordinates for each trace at 5-second intervals, in a method
similar to [10]. We use this output, along with the gNodeB
Voronoi diagram to assign each simulated UE to an gNodeB
for every 5-second interval in the mobility trace. Figure 3
shows the distribution of the number of gNodeBs visited by
UEs in the simulation. As expected, car trips result in a signif-
icantly higher number of gNodeBs for a UE compared with
pedestrian trips.
Synthetic trafﬁc. We simulate one hour. To create control
trafﬁc, at every 5-second interval we randomly select 5% of
the user population to receive a “call.” We select such a high
trafﬁc load in order to perform a conservative analysis. A call
results in a paging message that is sent to all gNodeBs in
the UE’s tracking area. Each paged user enters a 3-minute
“call” if it is not already in one, at which point further paging
messages are suppressed for that user until the call is complete.
We run the simulation with PGPP enabled as well as with the
conventional infrastructure setup.
Custom TAs. As we detail further in Section 5.3, large TALs
increase control trafﬁc loads, which lowers the network’s user
capacity. Therefore, we generate new tracking areas in the
underlying network in order to mitigate the control trafﬁc bur-
are societally-important and ubiquitous, allowing us to generate random
trajectories over the entire simulation area.
USENIX Association
30th USENIX Security Symposium    1745
0102030gNodeBs VisitedCarsPedestrianslog2(1)
a victim could possibly be connected to. This is because a
cellular carrier can know the exact base station that a user is
connected to once the UE enters an active state. As a baseline,
the anonymity set for traditional cellular is
log2(22,437) = 0, as
each SUPI is a unique value. With PGPP, SUPIs are identical,
so from the perspective of the carrier, the victim could be
connected to any gNodeB that has at least one PGPP client
connected to it. Using our simulated environment we collect,
for each paging message, the number of gNodeBs that had
users within their range and use the median value to calculate
the degree of anonymity. Figures 4a and 4b show the degree of
anonymity using different conﬁgurations of TALs and custom
TAs, respectively. We see that high degrees of anonymity are
attainable despite an attacker’s global visibility. For instance,
with TALs of length 8, the degree of anonymity is 0.748.
Local-bulk attacks. PGPP’s use of identical SUPIs reduces
the importance of SUPIs, and by extension the usefulness of
local bulk attacks on user identity. An attacker that can view
trafﬁc at the gNodeB(s) can gain insight into nearby SUPIs.
In traditional cell networks, each user has a globally unique
SUPI (S = 1), resulting in a degree of anonymity of zero as
the victim could only be one user. The subset S in PGPP, on
the other hand, is the size of the population of PGPP users in
a given location, as all SUPI values are identical and a local
bulk attacker cannot know the true identity of a single user.
To get an idea of S, we can calculate the number of PGPP
users connected to each gNodeB in the simulation. Over the
course of the simulation, we ﬁnd a mean value of 223.09 users
connected to each gNodeB that has users, which results in a
degree of anonymity log2(223.09)
log2(50,000) = 0.50. While this value is
somewhat low compared to the ideal value of 1, it is a drastic
improvement over conventional cellular architecture, and is
dependent on the overall user population in the network. As
more PGPP users exist, the degree of anonymity increases.
Local-targeted attacks.
In PGPP, local-targeted attacks to
discover a user’s location are diminished in two ways: ﬁrst,
SUPIs are no longer a useful identiﬁer, so identifying an
individual among all users is challenging; and second, we use
TALs to increase the paging broadcast domain for a given UE.
From an attacker’s point of view, this broadens the scope of
where the target UE may be located.
In Figure 5a, we plot the CDF of geographic areas in which
pages are broadcast as we increase TAL lengths using the
base map consisting of 113 tracking areas. We calculate the
area by generating a bounding box around all gNodeBs that
are included in the broadcast domain. As shown, large TALs
result in drastically higher area anonymity compared with
TALs disabled, particularly considering the number of UEs
that could potentially be located in the larger geographic areas.
For instance, the median area for the conventional simulation
is 378.09 km2 whereas TAL lengths of 8 and 16 result in
(a) TALs.
(b) Custom TAs.
Figure 4: Degree of anonymity using TALs and custom TAs.
den. As tracking areas normally consist of groups of adjacent
gNodeBs, we need a method by which we can cluster nearby
gNodeBs into logical groupings. To do so, we use k-means
clustering with the gNodeB geographic coordinates allowing
for Euclidean distance to be calculated between gNodeBs. We
generate several underlying tracking area maps, with the num-
ber of TAs (i.e., k-means centers) ranging from 25 to 1,000.
For comparison, the AT&T LTE network in the simulation is
composed of 113 TAs.
5.2 Cellular privacy attack analysis
Given the taxonomy we presented in Section 3.1, we ana-
lyze the identity and location privacy beneﬁts of PGPP in the
simulated environment.
Global-bulk attacks. By nullifying the value of SUPIs,
separating authentication with connectivity, and increasing the
broadcast domain for users, we increase user identity privacy
even with an adversary that is capable of bulk surveillance
over an entire network (e.g., operators, governments).
Anonymity analysis We measure the anonymity of a user
when under bulk attacks using degree of anonymity [22]. The
degree of anonymity value ranges from zero to one, with
ideal anonymity being one, meaning the user could be any
member of the population with equal probability. In this case,
we consider the SUPI value to be the target identity. The size
of the anonymity set for a population of N users will result in
a maximum entropy of:
HM = log2(N)
(1)
The degree of anonymity is determined based on the size of
the subset of user identities S that an attacker could possibly
believe the victim to be:
d =
H(X)
HM
=
log2(S)
log2(N)
(2)
Given global visibility into the network, we can reason
about the anonymity set using the number of gNodeBs that
1746    30th USENIX Security Symposium
USENIX Association
05000100001500020000S0.00.20.40.60.81.0Degree of AnonymityN=22,437ConventionalTAL Length 4TAL Length 8TAL Length 12TAL Length 1605000100001500020000S0.00.20.40.60.81.0Degree of AnonymityN=22,437ConventionalTAs 25TAs 50TAs 100TAs 200TAs 500TAs 1000(a) TALs.
(b) Custom TAs.
(a) Control trafﬁc with TALs.
(b) Capacity with TALs.
Figure 5: Area anonymity using TALs and custom TAs.
Figure 6: Control trafﬁc and system capacities leveraging
PGPP TALs in the simulated environment.
median areas of 5,876.96 and 9,585.17 km2, respectively.
We analyze anonymity with TALs of length 16 while the
underlying map is varied using custom TAs. Figure 5b shows
our results. We observe that as the number of tracking areas in-
crease, resulting in smaller tracking areas, the area anonymity
decreases. However, despite the decrease, the area anonymity
remains considerably larger than anonymity with TALs dis-
abled as TALs include additional tracking areas. For instance,
the median area for the conventional case is 378.09 km2
whereas the median area for a base map of 500 tracking areas
with TAL 16 is 4891.08 km2, a nearly 13-fold increase from
the perspective of a local targeted attacker.
5.3
Impact of PGPP on network capacity
From an operational perspective, the privacy beneﬁts de-
livered by PGPP must coincide with feasibility in terms of
control overhead in order for it to be deployable. Control traf-
ﬁc determines network capacity in terms of the number of
users that are serviceable in a given area. In this section, we
explore control trafﬁc load when using TALs.
5.3.1 Control overhead with PGPP TALs
We ﬁrst seek to quantify control message overhead while
we leverage tracking area lists to provide location anonymity
against local-targeted attacks. Recall from Section 4.2 that we
randomly select additional tracking areas from the simulated
coverage area to create TALs, which increases the broadcast
domain for a page. Increased control trafﬁc impacts both
gNodeBs and AMFs, however, from our experience with real
cellular networks the control trafﬁc capacity at gNodeBs is
the bottleneck as AMFs have much higher capacity. Thus, we
focus on gNodeB control load.
Figure 6a shows a cumulative distribution function (CDF)
for the number of pages broadcast by the simulated gNodeBs.
In the ﬁgure, “Conventional” corresponds to disabling TAL
functionality. As expected, larger TAL lengths result in in-
creased control trafﬁc for gNodeBs as they are more likely to
be included in the paging broadcast domain for a given UE.
To gain insight into the control limitations of real gNodeBs,
we consider the capabilities of a Huawei BTS3202E eN-
odeB [34], which is limited to 750 pages per second. When
(a) Custom TAs: Control trafﬁc.
(b) Custom TAs: Capacity.
Figure 7: Control trafﬁc and system capacities with custom
tracking areas in the simulated environment.
capacity planning, it is commonplace to budget paging trafﬁc
headroom; accordingly, we estimate the maximum paging
capacity for an gNodeB to be 525 pages per second (70% of
the BTS3202E capacity). This value is depicted in the vertical
red line in the ﬁgure (525 pages × 3600 seconds = 1,890,000
pages/hour). The simulation allows us to illustrate the user
population that could be supported by the network, provided a
population with similar mobility and trafﬁc proﬁles as deﬁned
in Section 5.1. Recall that we simulate 50,000 users, both
pedestrians and cars. We consider the paging load for the net-
work and select the gNodeBs with the maximum paging load,
the 95th percentile, and the median to estimate the number of
users each could theoretically support by taking into account
the max page limitation of the BS3202E. Figure 6b shows the
user capacity as TAL lengths are increased. A TAL length of
one shows the conventional network, as the TAL is composed
of a single tracking area. As expected, larger TALs result in
a reduction in the number of users the gNodeBs can handle
compared with performance when TALs are disabled, due to
increased paging load.
5.3.2 Control overhead with custom tracking areas
As we’ve demonstrated, large TALs result in gNodeBs
with higher control trafﬁc load, effectively reducing the user
USENIX Association
30th USENIX Security Symposium    1747
05000100001500020000Page Area Anonymity (km^2)0.00.20.40.60.81.0CDFConventional(TAL disabled)TAL Length: 4TAL Length: 8TAL Length: 12TAL Length: 1605000100001500020000Page Area Anonymity (km^2)0.00.20.40.60.81.0CDFConventional(TAL disabled)# TAs: 25# TAs: 50# TAs: 100# TAs: 200# TAs: 500# TAs: 10000100101102103104105106Control Traffic (pages)0.00.20.40.60.81.0CDFConventionalTAL Length: 4TAL Length: 8TAL Length: 12TAL Length: 16Max pages/s1246810121416TAL Length0510152025User Capacity (millions)Median95th percentileMax0100101102103104105106Control Traffic (pages)0.00.20.40.60.81.0CDFConventional# TAs: 25# TAs: 50# TAs: 100# TAs: 200# TAs: 500# TAs: 1000Max pages/s02004006008001000# of TAs in Underlying Map0510152025User Capacity (millions)Median95th percentileMaxFigure 8: PGPP prototype test hardware.
capacity the network. To explore whether we can re-gain
control trafﬁc we again consider new, custom tracking area
maps that are generated using k-means where we vary the
number of unique tracking areas in the simulated network.
We run the simulation with various custom tracking area
maps, with all UEs using TAL lengths of 16. The results
are shown in Figures 7a and 7b. We observe that a basemap
consisting of 25 tracking areas leads to even higher control
trafﬁc compared with the conventional (i.e., AT&T) tracking
area map. A map consisting of more tracking areas results
in TAs with fewer gNodeBs, thus reducing the paging load.
We see that a map of 500 TAs, even with a TAL of length 16,
results in similar paging load compared with the conventional
map with TAL disabled. Correspondingly, the user capacity
of the network with a higher number of tracking areas nears
the conventional capacity from Figure 6b.
5.4 Testbed analysis
We study our PGPP design on a lab testbed in order to
understand potential drawbacks. We implement a software-
based NGC and connect commodity phones to the software-
deﬁned radio-based gNodeB.
Prototype. We create our prototype code on srsLTE [29],
an open-source platform that implements LTE-compliant base
station and core network functionality and can be run using
software-deﬁned radios7. Our testbed, shown in Figure 8,
consists of an Intel Core i7 machine running Linux and a
USRP B210 radio. We use off-the-shelf commodity phones
(Moto X4, Samsung Galaxy S6, and two OnePlus 5s) with
programmable SIM cards installed to allow the phones to
connect to the PGPP network.
SrsLTE maintains contexts for each connected UE related
to mobility and connectivity. The contexts are stored as structs
that include the UE SUPI in a simple key-value store, with the
SUPI serving as the key. When the AMF receives mobility-
related messages, it checks against the appropriate contexts
7We build our prototype on a 4G LTE platform as we are not aware
of any platforms that fully implement 5G and are sufﬁciently mature for
experimentation with real hardware.
Figure 9: Connection delays due to sync_failure.
to handle the requests. We add an additional value, a PGPP-
SUPI, into the context structs. The PGPPSUPI is generated
by combining the SUPI with a temporary value that is unique
to the individual UE-gNodeB-AMF connection. Accordingly,
each UE has a unique PGPPSUPI, which then allows us to
look up the correct context when managing states.
Identical SUPIs and Shared Keys. Given identical SUPI
values for all users, the PGPP attach procedure can result in
additional steps compared with the traditional attach. This
is caused by sequence number synchronization checks dur-
ing the authentication and key agreement (AKA) procedure,
which is designed to allow the UE and the network to authen-
ticate each other. The fundamental issue is that the AUSF and
the SIM maintain a sequence number (SQN) value that both
entities increment with each successful attach. As multiple
devices use the same SUPIs, the sequence numbers held at
the AUSF and on individual devices will no longer match,
causing an authentication failure (known as a sync_failure).