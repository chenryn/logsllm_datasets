### Maximizing System Lifetime by Battery Scheduling

**Authors:**
- Marijn R. Jongerden
- Boudewijn R. Haverkort
- Henrik C. Bohnenkamp
- Joost-Pieter Katoen

**Publication Information:**
- 978-1-4244-4421-2/09/$25.00 Â© 2009 IEEE
- Authorized licensed use limited to: Tsinghua University. Downloaded on March 20, 2021, at 09:56:40 UTC from IEEE Xplore. Restrictions apply.

**Affiliations:**
- **Marijn R. Jongerden and Boudewijn R. Haverkort:**
  - University of Twente, Centre for Telematics and Information Technology, 7500 AE Enschede, The Netherlands
  - Email: {jongerdenmr, brh}@ewi.utwente.nl
  - Phone/Fax: +31 53 489 8041 / 4524

- **Boudewijn R. Haverkort:**
  - Embedded Systems Institute, Eindhoven, The Netherlands
  - Email: boudewijn.haverkort@esi.nl
  - Phone: +31 40 247 4720

- **Henrik C. Bohnenkamp and Joost-Pieter Katoen:**
  - RWTH Aachen University, Software Modeling and Verification, 52056 Aachen, Germany
  - Email: {henrik, katoen}@cs.rwth-aachen.de
  - Phone/Fax: +49 241 802 1201 / 22217

**Abstract:**
The operational duration of mobile devices is often constrained by the battery lifetime. Some devices can extend their operational time by connecting an extra battery or using smart battery packs with multiple cells. In these cases, scheduling the batteries to exploit recovery properties can significantly extend the system's lifetime. Simple scheduling schemes, such as round-robin or choosing the best available battery, already provide substantial improvements over sequential discharge. This paper compares these straightforward schemes with an optimal scheduling scheme generated using a priced-timed automaton battery model (implemented and evaluated in Uppaal Cora). Our results show that, in some cases, the performance of simple scheduling schemes is close to optimal. However, the optimal schedules also indicate significant room for further improvement in battery lifetimes.

**Keywords:**
Scheduling, Embedded Systems, Batteries, Lifetime Optimization, Kinetic Battery Model, Priced-Timed Automata

### 1. Introduction

Mobile devices typically rely on batteries for power. The finite capacity of these batteries limits the device's operational duration. The battery's lifetime, defined as the time from full to empty charge, depends primarily on its capacity and the load applied. Another critical factor, which we focus on in this paper, is the usage pattern of the battery [10].

When a battery is continuously discharged, a high current reduces the total energy it can provide compared to a lower current. This phenomenon is known as the rate-capacity effect. Conversely, during periods of low or no discharge, the battery can partially recover, a process termed the recovery effect. These two effects are modeled in the Kinetic Battery Model (KiBaM) developed by Manwell and McGowan [17, 18, 19].

One approach to improve system lifetime is to connect one or more additional batteries, which are used according to a scheduling policy. In most systems, batteries are used sequentially, meaning only one battery is used until it is depleted. By switching between batteries, one can leverage the recovery effect and extend the overall system lifetime. Research on battery scheduling has been conducted by Chiasserini et al. [9] and Benini et al. [7], comparing various straightforward scheduling schemes like round-robin and best-battery policies. While these studies show that battery scheduling can extend system lifetime, the maximum possible lifetime remains unclear.

In this paper, we propose an approach to find optimal battery schedules for a given load. We model the behavior of batteries based on a discretized version of the KiBaM using linear priced-timed automata (LPTA) [2, 4]. We use the model checker Cora, part of the UPPAAL family [22], to generate optimal schedules using well-developed model-checking techniques for LPTA. Our results demonstrate that the priced-timed automaton model of the KiBaM accurately captures the rate-capacity and recovery effects. The generated optimal schedules show that, in certain cases, round-robin and best-battery policies come close to the maximal system lifetime, but in other cases, they fall short.

### 2. Kinetic Battery Model

#### 2.1 Introduction

We use the Kinetic Battery Model (KiBaM) [17, 18, 19], which is intuitive and the simplest model that includes the two important non-linear battery properties: the rate-capacity effect and the recovery effect [16]. The rate-capacity effect means that less charge can be drawn from the battery when the discharge current is increased. However, some of the charge left behind in the battery after a period of high discharge current will become available for use after a period of no or low current, which is the recovery effect.

In the KiBaM, the battery charge is distributed over two wells: the available-charge well and the bound-charge well (see Figure 1). A fraction \( c \) of the total capacity is placed in the available-charge well, and a fraction \( 1 - c \) in the bound-charge well. The available-charge well directly supplies electrons to the load \( i(t) \), where \( t \) denotes time, while the bound-charge well supplies electrons only to the available-charge well. The charge flows from the bound-charge well to the available-charge well through a "valve" with fixed conductance \( k \).

In addition to this parameter, the rate at which charge flows between the wells depends on the height difference between the two wells. The heights of the two wells are given by:
\[ h_1 = \frac{y_1}{c} \quad \text{and} \quad h_2 = \frac{y_2}{1 - c} \]

The change in charge in both wells is described by the following system of differential equations:
\[
\begin{cases}
\frac{dy_1}{dt} = -i(t) + k(h_2 - h_1) \\
\frac{dy_2}{dt} = -k(h_2 - h_1)
\end{cases}
\]
with initial conditions \( y_1(0) = c \cdot C \) and \( y_2(0) = (1 - c) \cdot C \), where \( C \) is the total battery capacity. The battery is considered empty when there is no charge left in the available-charge well, i.e., when \( y_1(t) = 0 \).

#### 2.2 Coordinate Transformation

Although the differential equations (1) describe the discharge process of the battery, and an analytical solution can be obtained for constant discharge currents [17], the equations can be simplified by applying a coordinate transformation. This transformation provides deeper insight into the model's behavior.

From (1), it is evident that the height difference between the two wells (\( h_2 - h_1 \)) plays a major role in the model. This is one of the coordinates after the transformation, and the other is the total charge in the battery. The transformation changes the coordinates from \( y_1 \) and \( y_2 \) to \( \delta = h_2 - h_1 \) and \( \gamma = y_1 + y_2 \). This transformation changes the differential equations to:
\[
\begin{cases}
\frac{d\delta}{dt} = \frac{i(t)}{c} - k' \delta \\
\frac{d\gamma}{dt} = -i(t)
\end{cases}
\]
where \( k' = \frac{k}{(1 - c)c} \). The initial conditions change to \( \delta(0) = 0 \) and \( \gamma(0) = C \). In the new coordinate system, the condition for the battery to be empty is:
\[
\gamma(t) = (1 - c) \delta(t)
\]

#### 2.3 Discretization of the KiBaM

To use the KiBaM in the timed automata setting, we need to discretize the model, particularly in terms of time, charge, and height difference. We refer to the discretized version of the KiBaM as the dKiBaM.

From (2), it is clear that the total charge only changes when a current is drawn from the battery. The height difference changes due to two processes: it increases when a current is drawn and decreases when charge flows from the bound-charge well to the available-charge well. In the discretization of the model, we separate these two processes.

We discretize time in steps of size \( T \). Within each time step, the discharge current is assumed to be constant. For a constant current \( i(t) \), the height difference and total charge can be updated as follows:

\[
\begin{cases}
\delta(t + T) = \delta(t) + \left( \frac{i(t)}{c} - k' \delta(t) \right) T \\
\gamma(t + T) = \gamma(t) - i(t) T
\end{cases}
\]

This discretization allows us to model the battery behavior in a timed automata framework, enabling the generation of optimal scheduling policies.