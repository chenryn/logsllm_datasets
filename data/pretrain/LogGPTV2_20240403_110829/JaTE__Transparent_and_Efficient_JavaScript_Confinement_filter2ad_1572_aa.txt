# JaTE: Transparent and Efficient JavaScript Confinement

**Authors:**
- Tung Tran, Stony Brook University, PI:EMAIL
- Riccardo Pelizzi, Stony Brook University, PI:EMAIL
- R. Sekar, Stony Brook University, PI:EMAIL

## Abstract
The inclusion of third-party scripts is a common practice, even among major websites that handle sensitive data. Default browser security policies are inadequate for protecting these sites from vulnerable or malicious third-party scripts, as they offer only two extremes: full privileges or complete isolation. Most use cases, such as advertisements, libraries, and analytics, require the former. Previous attempts to bridge this gap have been plagued by issues such as incompatibility, excessive performance overhead, and lack of support for object-level policies. Our solution, JaTE, overcomes these limitations. It can be deployed on existing websites with a relatively low overhead of about 20%, even on pages with up to a megabyte of minified JavaScript code.

## 1. Introduction
A recent study [26] found that nearly 90% of websites include third-party scripts. This practice poses serious security threats to first-party websites, compromising their integrity and confidentiality. Vulnerabilities in third-party code can expose first-party sites to attacks like cross-site scripting, or the third-party server may be malicious or compromised. Major websites such as Yahoo and The New York Times [8, 6] have exposed their users to malware through third-party content. Therefore, there is an urgent need for methods to protect websites from third-party scripts while preserving their functionality.

To protect first-party code, it is essential to isolate third-party code from accessing (sensitive) first-party data or functions. There are two main approaches:

- **Frame-based Isolation:** The browser's Same-Origin Policy (SOP) isolates code running in different frames, providing a controlled means of communication through the `postMessage` API. AdJail [34], Mashic [17], and Pivot [23] use this approach. While COWL [32] extends the SOP to support a MAC policy, it still relies on frame-based isolation. The main drawback is that it limits interactions between first- and third-party code using familiar means like passing objects or calling functions, reducing compatibility with existing code.

- **Language-based Isolation:** This approach aims to isolate individual objects, allowing them to be shared between parties with controlled interactions through function calls. Early works like Caja [20] and BrowserShield [29] rewrote code to introduce runtime checks, but this often led to significant performance overheads. Static analysis techniques, such as ADsafe [11], GateKeeper [13], SES [24], and JSand [9], aim to eliminate the need for most runtime checks. However, full JavaScript is not amenable to static analysis, leading to severe language restrictions. For example, SES and JSand, which place the fewest restrictions, still fail to support 80% of the Alexa Top 500 websites.

### Our Goals
We seek a secure, object-granularity policy enforcement infrastructure that is compatible with existing browsers and websites, including all their first- and third-party code. Specifically, we aim for:

- **Transparency:** The enforcement infrastructure should not change the execution semantics of benign code, except for a few rare corner cases.
- **Object-granularity Policy:** The infrastructure should allow third-party code to access any subset of objects deemed safe by a policy developer, while preventing access to others. Even on permitted objects, access to individual operations can be sandboxed.
- **Deployability on Existing Browsers:** The approach must not require modifications to the browser (specifically, its JavaScript engine) and should not impose unreasonable performance overheads.

### Our Approach
We present JaTE, a new approach that satisfies the above requirements. Every object is associated with a principal, and this principal has direct access to the object, while the access of other principals is mediated using a wrapper object that enforces a policy. The set of all objects belonging to a principal is held within the principal’s compartment [41].

Many key challenges in JaTE, including complete mediation and the realization of a secure multi-principal compartment model, arise from the complexity and highly dynamic nature of JavaScript. We discuss these challenges in Section 2, followed by an overview and illustration of how our design overcomes them in Section 3. The design and implementation of JaTE are described in Sections 4 and 5, respectively. A detailed experimental evaluation is presented in Section 6, followed by a discussion of related work (Section 7) and concluding remarks (Section 8). Below, we summarize the technical contributions of this paper.

### Contributions
- **Object-capability environment for full JavaScript:** Object capability ensures that only objects explicitly given to third-party code can be reached by it, providing the basis for complete mediation. Ours is the first work to realize this feature without placing significant restrictions on the JavaScript language.
- **Secure and transparent multi-principal JavaScript confinement without browser modifications:** Our solution is ready for deployment on any website because existing code does not need to be modified. It can support policies that protect mutually untrusting principals, e.g., two advertisers.
- **Efficient fine-grained object-level access control.**
- **Large-scale experimental evaluation of compatibility, performance, and functionality:** When enforcing an allow-all policy, our implementation demonstrates full compatibility with all sites from the Alexa Top 500, while incurring an average overhead of about 20%.

## 2. Challenges
### Complete Mediation
To ensure complete mediation, all mechanisms for object access must be handled. This is challenging in JavaScript due to several unusual ways to reference objects:

- **Global Object Access:** Securing global object access is critical because all other objects are reachable from it. In addition to the explicit mechanism of accessing the `window` variable, JavaScript provides implicit access to the global object via free variables and the `this` keyword.
- **Native Prototype Access:** JavaScript relies on prototypes for object inheritance. Prototypes of native objects are shared, providing a mechanism for third-party code to affect the semantics of first-party use of native objects. Controlling this access is complex because third-party code can use both direct and indirect access.
- **Call Stack Access:** JavaScript allows third-party code to travel up the call stack, potentially accessing sensitive first-party data such as the arguments of the first-party function that invoked it.

### Dynamic Code
Dynamic code poses a well-recognized challenge to security. Previous works either forbade most dynamic code (ADSafe, GateKeeper) or replaced `eval(s)` with a safe wrapper, say, `safeeval(s)` (Caja, SES, JSand). Unfortunately, using a wrapper function can change the semantics of `s`, altering the behavior of code like:
```javascript
var x = 0; eval("alert(x)");
```

### 2.1 Discussion
Using an object-capability runtime is a well-established approach for achieving complete mediation [21, 24, 9, 18]. Secure ECMAScript (SES) [24], an object-capability language based on ES5, relies on strict mode to prevent the use of `caller` and implicit accesses to the global object via `this`. It also prevents modification of native prototypes and replaces `eval` with a safe wrapper. These restrictions tend to break existing code, and indeed, backward compatibility was not their focus. As a result, we found that the vast majority of Alexa Top 500 websites experience compatibility problems with SES.

JSand [9] uses the object-capability environment of SES to build a policy enforcement framework for third-party JavaScript code. JSand exposes permitted objects to third-party code using Miller’s membrane pattern [25]. A membrane consists of policy-enforcing wrappers around these objects. If any operation on a wrapped object returns another object, the membrane is extended to wrap the returned object as well.

A second major goal of JSand is to achieve compatibility with existing websites. In addition to handling implicit access to `window` via `this`, JSand addresses frequent incompatibilities posed by SES. It performs a simple analysis to identify global variables in the third-party code and transforms the code to explicitly synchronize their values with the corresponding attributes of `window`. While properties referenced statically can be synchronized this way, dynamic property accesses (e.g., `window[p]`) pose a challenge. Other incompatibilities, including the remaining restrictions of strict mode, the use of an `eval` wrapper, and the use of native prototype extensions, continue to affect JSand. We found that over 80% of Alexa Top 500 websites fail to "compile" due to strict mode violations, while 30% and 49% violate the other two restrictions.

Instead of first denying access to the global object using SES and then partially mitigating these restrictions, JaTE is designed from the ground up with a single goal: intercept every access to protected objects so that a policy can be applied to each of those accesses. JaTE exploits the dynamic and reflection features of JavaScript, together with a simple lexical analysis and transformation of third-party code, to ensure that all object accesses are mediated at runtime. It does not place any significant restrictions on JavaScript, a fact confirmed by our evaluation on Alexa Top 500 sites. (See Section 6.2 for details.)

Unlike JSand, JaTE does not require full parsing of JavaScript but only a lexical analysis. All rewriting is done Just-In-Time and cannot be circumvented through obfuscation.

## 3. Overview
This section provides a high-level overview of how the compartment model confines third-party scripts using code transformation and runtime checking. We illustrate this using an example of a first-party (also called host) web page that includes sensitive content in an inline script:
```javascript
data = { secret: 'xxx', getSecret: function() { return this.secret } };
```
Assume the page includes a Facebook “Like” button, but Facebook’s servers have been compromised to replace the button with malicious code that attempts to steal the value of `secret`.

The scenario begins with an HTTP request (1) in Figure 1 for retrieving the first-party web page. The JaTE Network Module intercepts this request and modifies the page to add an object `jate` that contains our confinement library. This module could be implemented as a client-side proxy, a browser extension, or a server-side proxy. Our implementation relies on a browser extension.

In step (2), the “Like” script included in the page is fetched from Facebook. It is transformed by the network module to enable secure policy enforcement. To illustrate the main elements of this rewriting step, consider the malicious “Like” script shown in Listing 2. It includes four distinct mechanisms to access the `secret` value:

1. **Direct Property Access:**
   ```javascript
   var stolen = data["se" + "cret"];
   ```
2. **Function Call:**
   ```javascript
   function s() { var stolen = this.data.secret; }
   s();
   ```
3. **Method Invocation:**
   ```javascript
   stolen = data.getSecret();
   ```
4. **Eval:**
   ```javascript
   eval("stolen = this.data.secret;");
   ```

JaTE intercepts and mediates each of these access attempts, ensuring that the `secret` value remains protected. An important feature of JaTE is that it supports multiple mutually-distrusting principals, which arise in web pages that integrate content from multiple sources, e.g., several advertisers.