Enumeration e = request.getHeaderNames(); 
while (e.hasMoreElements()) { 
String name = (String) e.nextElement();//获取key 
String value = request.getHeader(name);//得到对应的值 
out.println(name + "=" + value + "");//输出如cookie=123 
} 
第 22 页 
 源码下载：http://pan.baidu.com/share/link?shareid=166499&uk=2332775740 
使用 Moify Headers 自定义的修改 Headers: 
第 23 页 
修改请求头的作用是在某些业务逻辑下程序猿需要去记录用户的请求头信息到数据库，
而通过伪造的请求头一旦到了数据库可能造成 xss，或者在未到数据库的时候就造成了 SQL
注入，因为对于程序员来说，大多数人认为一般从 Headers 里面取出来的数据是安全可靠
的，可以放心的拼 SQL(记得好像 Discuz 有这样一个漏洞)。今年一月份的时候我发现 xss.tw
也有一个这样的经典案例，Wdot 那哥们在记录用户的请求头信息的时候没有去转意特殊的
脚本，导致我们通过伪造的请求头直接存储到数据库。 
XSS.tw 平台由于没有对请求头处理导致可以通过 XSS 屌丝逆袭高富黑。 
刚回来的时候被随风玩爆菊了。通过修改请求头信息为 XSS 脚本，xss 那平台直接接收并信
任参数，因为很少有人会蛋疼的去怀疑请求头的信息，所以这里造成了存储型的 XSS。只要
别人一登录 xss 就会自动的执行我们的 XSS 代码了。 
Xss.tw 由于 ID 很容易预测，所以很轻易的就能够影响到所有用户： 
第 24 页 
于是某一天就有了所有的 xss.tw 用户被随风那 2 货全部弹了 www.gov.cn: 
Java 里面伪造 Http 请求头： 
代码就不贴了，在发送请求的时候设置setRequestProperty 就行了，如： 
URL realUrl = new URL(url); 
第 25 页 
URLConnection connection = realUrl.openConnection(); 
connection.setConnectTimeout(5000);//连接超时 
connection.setReadTimeout(5000);// 读取超时 
connection.setRequestProperty("accept", "*/*"); 
connection.setRequestProperty("connection", "Keep-Alive"); 
(………………………..) 
Test Servlet: 
2、Session 
Session 是存储于服务器内存当中的会话，我们知道 Http 是无状态协议，为了支持客户
端与服务器之间的交互，我们就需要通过不同的技术为交互存储状态，而这些不同的技术就
是 Cookie 和 Session 了。 
第 26 页 
设置一个 session: 
session.setAttribute("name",name);//从请求中获取用户的 name 放到 session 当中 
session.setAttribute("ip",request.getRemoteAddr());//获取用户请求 Ip 地址 
out.println("Session 设置成功."); 
直接获取 session 如下图可以看到我们用 FireFox 和 Chrome 请求同一个 URL 得到的
SessionId 并不一样，说明 SessionId 是唯一的。一旦 Session 在服务器端设置成功那么我
们在此次回话当中就可以一直共享这个 SessionId 对应的 session 信息，而 session 是有
有效期的，一般默认在 20-30 分钟，你会看到 xss 平台往往有一个功能叫 keepSession，
每过一段时间就带着 sessionId 去请求一次，其实就是在保持 session 的有效不过期。 
Session 生命周期(从创建到销毁)： 
1、session 的默认过期时间是 30 分钟，可修改的最大时间是 1440 分钟（1440 除以 60=24
小时=1 天）。 
2、服务器重启或关闭 Session 失效。 
第 27 页 
注： 
浏览器关闭其实并不会让 session 失效！因为 session 是存储在服务器端内存当中的。
客户端把浏览器关闭了服务器怎么可能知道？正确的解释或许应该是浏览器关闭后不会去
记忆关闭前客户端和服务器端之间的 session 信息且服务器端没有将 sessionId 以
Cookie 的方式写入到客户端缓存当中，重新打开浏览器之后并不会带着关闭之前的
sessionId 去访问服务器 URL，服务器从请求中得不到 sessionId 自然给人的感觉就是
session 不存在（自己理解的）。 
    当我们关闭服务器时Tomcat 会在安装目录\work\Catalina\localhost\项目名目录下建立
SESSIONS.ser 文件。此文件就是 Session 在 Tomcat 停止的时候 持久化到硬盘中的文件. 所
有当前访问的用户Session 都存储到此文件中. Tomcat 启动成功后.SESSIONS.ser  又会反序
列化到内存中,所以启动成功后此文件就消失了. 所以正常情况下 从启 Tomcat 用户是不需
要登录的. 注意有个前提.就是存储到 Session 里面的 user 对象所对应的 User 类必须要序列
化才可以。（摘自：http://alone-knight.iteye.com/blog/1611112） 
SessionId 是神马？有什么用？ 
我们不妨来做一个偷取 sessionId 的实验： 
首 先 访 问 ： http://localhost/Test/SessionTest?action=setSession&name=selina 完 成
session 的创建，如何建立就不解释了如上所述。 
同时开启 FireFox 和 Chrome 浏览器设置两个 Session： 
我们来看下当前用户的请求头分别是怎样的： 
第 28 页 
我们依旧用 TamperData 来修改请求的 Cookie 当中的 jsessionId，下面是见证奇迹的时刻： 
    我要说的话都已经在图片当中的文字注释里面了，伟大的 Xss 黑客们看明白了吗？你盗
取的也许是 jsessionId(Java 里面叫 jsessionId)，而不只是 cookie。那么假设我们的 Session
被设置得特别长那么这个 SessionId 就会长时间的保留，而为 Xss 攻击提供了得天独厚的条
件。而这种 Session 长期存在会浪费服务器的内存也会导致：SessionFixation 攻击！ 
如何应对 SessionFixation 攻击： 
1、用户输入正确的凭据，系统验证用户并完成登录，并建立新的会话 ID。 
2、Session 会话加 Ip 控制 
3、加强程序员的防范意识：写出明显 xss 的程序员记过一次，写出隐晦的 xss 的程序员警
告教育一次，连续查出存在 3 个及其以上 xss 的程序员理解解除劳动合同(哈哈，开玩笑了。)。 
3、Cookie 
Cookie 是以文件形式[缓存在客户端]的凭证(精简下为了通俗易懂)，cookie 的生命周期
主要在于服务器给设置的有效时间。如果不设置过期时间，则表示这个 cookie 生命周期为
浏览器会话期间，只要关闭浏览器窗口，cookie 就消失了。 
这次我们以 IE 为例： 
第 29 页 
我们来创建一个 Cookie： 
if(!"".equals(name)){ 
       Cookie cookies = new Cookie("name",name);//把用户名放到 cookie 
       cookies.setMaxAge(60*60*60*12*30) ;//设置 cookie 的有效期 
//     c1.setDomain(".ahack.net");//设置有效的域 
       response.addCookie(cookies);//把 Cookie 保存到客户端 
       out.println("当前登录:"+name); 
}else { 
       out.println("用户名不能为空!"); 
} 
    有些大牛级别的程序员直接把帐号密码明文存储到客户端的 cookie 里面去，不得不佩
服其功力深厚啊。客户端直接记事本打开就能看到自己的帐号密码了。 
第 30 页 
继续读取 Cookie： 
    我想 cookie 以明文的形式存储在客户端我就不用解释了吧？文件和数据摆在面前！ 
盗取 cookie 的最直接的方式就是 xss，利用 IE 浏览器输出当前站点的 cookie：
javascript:document.write(document.cookie) 
首先我们用 FireFox 创建 cookie： 
第 31 页 
然后 TamperData 修改 Cookie： 
    一般来说直接把 cookie 发送给服务器服务器，程序员过度相信客户端 cookie 值那么我
们就可以在不用知道用户名和密码的情况下登录后台，甚至是 cookie 注入。jsessionid 也会
放到 cookie 里面，所以拿到了 cookie 对应的也拿到了 jsessionid，拿到了 jsessionid 就拿到
了对应的会话当中的所有信息，而如果那个 jsessionid 恰好是管理员的呢？ 
4、HttpOnly 
上面我们用 javascript:document.write(document.cookie)，通过 document 对象能够拿
到存储于客户端的 cookie 信息。HttpOnly 设置后再使用 document.cookie 去取 cookie 值就
不行了。 
通过添加 HttpOnly 以后会在原 cookie 后多出一个 HttpOnly; 
普通的 cookie 设置： 
Cookie: jsessionid=AS348AF929FK219CKA9FK3B79870H; 
加上HttpOnly后的Cookie： 
Cookie: jsessionid=AS348AF929FK219CKA9FK3B79870H; HttpOnly; 
（参考 YearOfSecurityforJava） 
在 JAVAEE6 的 API 里面已经有了直接设置 HttpOnly 的方法了： 
第 32 页 
API 的对应说明： 
大致的意思是：如果 isHttpOnly 被设置成 true，那么 cookie 会被标识成 HttpOnly.能够
在一定程度上解决跨站脚本攻击。 
Since:  
Servlet 3.0  
也就是说在 servlet3.0 开始才支持直接通过 setHttpOnly 设置,其实就算不
是 JavaEE6 也可以在 set Cookie 的时候加上 HttpOnly; 让浏览器知道你的 cookie
需要以 HttpOnly 方式管理。而在新的 Servlet 当中不只是能够通过手动的去
setHttpOnly 还可以通过在 web.xml 当中添加 cookie-config(HttpOnly 默认开
第 33 页 
启,注意配置的是 web-app_3_0.xsd): 
true 
true 
index.jsp 
还可以设置下session有效期(30分)：30 
5、CSRF (跨站域请求伪造) 
CSRF（Cross Site Request Forgery, 跨站域请求伪造）用户请求伪造，以受害人的身份构造恶意请
求。(经典解析参考：http://www.ibm.com/developerworks/cn/web/1102_niugang_csrf/ ) 
CSRF 攻击的对象 
在讨论如何抵御 CSRF 之前，先要明确 CSRF 攻击的对象，也就是要保护的对象。从以上的例子
可知，CSRF 攻击是黑客借助受害者的 cookie 骗取服务器的信任，但是黑客并不能拿到 cookie，也看不
到 cookie 的内容。另外，对于服务器返回的结果，由于浏览器同源策略的限制，黑客也无法进行解析。
因此，黑客无法从返回的结果中得到任何东西，他所能做的就是给服务器发送请求，以执行请求中所描述
的命令，在服务器端直接改变数据的值，而非窃取服务器中的数据。所以，我们要保护的对象是那些可以
直接产生数据改变的服务，而对于读取数据的服务，则不需要进行 CSRF 的保护。比如银行系统中转账
的请求会直接改变账户的金额，会遭到 CSRF 攻击，需要保护。而查询余额是对金额的读取操作，不会
改变数据，CSRF 攻击无法解析服务器返回的结果，无需保护。\ 
Csrf 攻击方式： 
对象：A：普通用户，B：攻击者 
1、假设 A 已经登录过 xxx.com 并且取得了合法的 session，假设用户中心地址为：
http://xxx.com/ucenter/index.do 
2、B 想把 A 余额转到自己的账户上，但是 B 不知道 A 的密码，通过分析转账功能发现 xxx.com 网站存在
CSRF 攻击漏洞和 XSS 漏洞。 
第 34 页 
3、B 通过构建转账链接的 URL 如：http://xxx.com/ucenter/index.do?action=transfer&money=100000 
&toUser=(B 的帐号)，因为 A 已经登录了所以后端在验证身份信息的时候肯定能取得 A 的信息。B 可以通
过 xss 或在其他站点构建这样一个 URL 诱惑 A 去点击或触发 Xss。一旦 A 用自己的合法身份去发送一个
GET 请求后 A 的 100000 元人民币就转到 B 账户去了。当然了在转账支付等操作时这种低级的安全问题一
般都很少出现。 
防御 CSRF： 
1、 验证 HTTP Referer 字段 
2、 在请求地址中添加 token 并验证 
3、 在 HTTP 头中自定义属性并验证 
4、加验证码 
 (copy 防御 CSRF 毫无意义，参考上面给的 IBM 专题的 URL) 
Token 
最常见的做法是加 token,Java 里面典型的做法是用 filter：https://code.google.com/p/csrf-filter/(链接
由 plt 提供，源码什么的在：http://ahack.iteye.com/blog/1900708) 
第 35 页 
攻击 JavaWeb 应用[3] -SQL 注入[1] 
-园长 MM 
注:本节重点在于让大家熟悉各种 SQL 注入在 JAVA 当中的表现，本想带点 ORM 框架实例，但是与其几乎无异，最近在学
习 MongoDb，挺有意思的，后面有机会给大家补充相关。 
1、JDBC 和 ORM 
JDBC： 
JDBC（Java Data Base Connectivity,java 数据库连接）是一种用于执行 SQL 语句的 Java API，
可以为多种关系数据库提供统一访问。 
JPA： 
JPA 全称 Java Persistence API.JPA 通过 JDK 5.0 注解或 XML 描述对象－关系表的映射关系，
并将运行期的实体对象持久化到数据库中。是一个 ORM 规范。Hibernate 是 JPA 的具体
实现。但是 Hibernate 出现的时间早于 JPA（因为 Hibernate 作者很狂，sun 看不惯就叫
他去指定 JPA 标准去了哈哈）。 
ORM： 
对象关系映射（ORM）目前有 Hibernate、OpenJPA、TopLink、EclipseJPA 等实现。 
JDO： 
JDO(Java Data Object )是 Java 对象持久化的新的规范，也是一个用于存取某种数据仓库
中的对象的标准化 API。没有听说过 JDO 没有关系，很多人应该知道 PDO,ADO 吧？概念一
样。 
关系: 