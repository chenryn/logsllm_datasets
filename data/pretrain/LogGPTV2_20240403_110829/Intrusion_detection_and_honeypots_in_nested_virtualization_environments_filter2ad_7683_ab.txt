yet, it is possible that it achieves better performance.
Summarizing these measurements, we observe that nested
virtualization can have a signiﬁcant performance impact.
While this is negligible for CPU performance in the best case
(KVM/KVM), the overhead for I/O is more problematic.
Paravirtualized drivers should be used for network and disk,
as doing so signiﬁcantly reduces the amount of virtualization
overhead. Based on these experiments, we decided to focus
on KVM/KVM for the following experiments with virtual-
machine introspection and nested virtualization.
III. VMI AND NESTED VIRTUALIZATION
A. VMI-based IDS and honeypots
Intrusion detection systems (IDS) have a long history
in research and practice and are classiﬁed, according to
the type of data collection, into network-based (NIDS) and
host-based (HIDS) intrusion detection systems. They are
deﬁned as a software component that targets malicious or
unauthorised activity by monitoring and analysing operating
system behaviour (HIDS) or network trafﬁc (NIDS).
Open-source products such as OSSEC4 implement HIDS
by running a monitor agent on the machine under observa-
tion to analyse logs, operating system events, and ﬁle sys-
tems. Approaches such as the one described by Warrender et
al. [12] make use of different patterns to detect attacks based
on system calls. Such host-based intrusion detection systems
3http://www.hdtune.com/
4http://www.ossec.net/
are faced with the problem that an attacker can modify the
monitor agent and subvert the information acquired from the
system.
Virtualization-based IDS have ﬁrst been proposed by
Garﬁnkel et al. [13]. This approach is a great opportunity to
solve the above-mentioned problem of host-based IDS, but it
comes with the cost of interpreting guest memory contents in
a host environment. This issue has been named the semantic
gap and is subject to on-going research [14]. Some practical
implementations for virtual-machine introspection (VMI) are
available5.
The main focus of honeypots is to capture and analyse ma-
licious behaviour. They can be classiﬁed into low-interaction
honeypots, which partially simulate the behaviour of some
service, and high-interaction honeypots (HiH), which are
complete, vulnerable systems. While low-interaction hon-
eypots are easier to deploy, HiH have the advantage of
accurately reproducing the complete behaviour of a real
production system, allowing for a better study of attacks.
Although host-based intrusion detection systems and high-
interaction honeypots take a different approach in terms of
action, we can identify that both systems exhibit shared
attributes when dealing with unknown attacks. As a common
design feature, HIDS and HiH should be able to detect
abnormal behaviour, and depending on the implementation,
events triggered by malicious actions can be routed to a
human agent to further analyse and investigate the attack.
Due to these similarities, we decided to use a honeypot
framework in the following evaluation, as a representative
example for HiH-honeypots and IDS systems.
B. VMI-Honeymon
VMI-Honeymon [5] is a virtualization-based hybrid hon-
eypot framework built on open-source tools (libVMI, libvirt,
libguestfs and Volatility). It uses full virtualization, which
means that it can be used with any guest operating system
for the HiH. No modiﬁcations to the underlying hypervisor
are necessary. Unlike traditional HIDS systems, it does not
need any in-guest agent in the honeypot system.
As Figure 2 shows, it uses Honeybrid [15], a hybrid
honeypot system that provides components for controlling
network trafﬁc. It offers attack-ﬁltering functionality and
controls the combined use of a low-interaction honeypot
(Nepenthes) and a high-interaction honeypot (for exam-
ple, a complete, vulnerable WinXP installation). Honeybrid
controls connections to the high-interaction honeypot and
notiﬁes Honeymon as soon as the HiH should be inspected
using VMI and disk snapshots.
C. Experiences with the real system
In order to evaluate a real VMI-based honeypot system in
nested virtualization environments, we have decided to use
5http://code.google.com/p/vmitools/
Figure 2. VMI-Honeymon has a hybrid architecture that combines a low-
interaction honeypot (Nepenthes) with a high-interaction honeypot (Win
XP VM) controlled by Honeybrid. [15]
VMI-Honeymon on a single-level KVM system, as well as
on a nested KVM/KVM environment. As we used a Win-
dows XP operating system in the high-interaction honeypot,
we could not use hypervisors that use paravirtualization at
the inner level (L2). The standard network conﬁguration
provided by VMI-Honeymon was used in single-level vir-
tualization, but for handling network communication on a
nested system additional work was required. When using
nested (two-level) virtualization, network address translation
(NAT) was used at both hypervisor levels.
Whenever an attack to the HiH happens, Honeybrid
triggers Honeymon to analyze the attack and revert the HiH
back to its original state. In our experiments, we measured
the time needed by Honeymon to complete its operation.
Figure 3 shows the results of our experiments, which was
repeated for single-level virtualization (with KVM) and
nested virtualization (with KVM/KVM). The ﬁgure shows
the time needed for analzing the HiH, the time needed for
reverting the HiH VM, and the total time between start of
the check until Honeymon signals Honeybrid that a clean,
reverted HiH is available again. The results show that there
is almost no impact on the revert operation. On the other
hand, the HiH introspection and analysis suffers from an
approx. 69% increase of execution time.
D. Going to the cloud
Current major cloud providers do not support nested vir-
tualization. Upon direct inquiry, some providers (Rackspace,
vServer Center) replied that they do not plan to support
nested virtualization. So at least currently, the presented
approach for implementing a Nested-IDS in a public cloud
environment is not possible due to restrictions of the cloud
provider. On a technical basis, one reason for this problem
is that most of the providers are running custom versions
Figure 3. Performance impact of nested virtualization on VMI-Honeymon
operation on the high-level honeypot
of hypervisors. For example, Amazon6 uses a modiﬁed Xen
that differs a lot from the standard Xen hypervisor. A big ob-
stacles for cloud providers are the necessary modiﬁcations to
their environments, which might require costly adaptations.
In a long-term perspective, however, we expect that sup-
port for nested virtualization will become available in public
clouds. It will be a great beneﬁt for implementing security
and dependability mechanisms. With nested virtualization
every cloud user is able to set up his own hypervisor for
implementing a Nested-IDS. So the cloud user is able to
increase the security of his virtual instances in the cloud
without the need for support from the cloud provider.
IV. RELATED WORK
XenBlanket [16] takes a different approach to nested
virtualization in public clouds. The goal of XenBlanket is
to implement nested virtualization, without having support
for it at the lower-level hypervisor. As current public cloud
providers do not provide HVM features to guest virtual
machines, such an approach requires either paravirtuali-
zation or binary translation at the L2 level. The authors
presented a working paravirtualized Xen as L2 hypervisor,
which supports paravirtualized guest systems. Using non-
paravirtualized guest operating would be possible only with
additional binary translation at
the L2. The authors of
XenBlanket did not evaluate this option, but state that the
“performance implications of such a system is a subject
of future research” [16]. As we planned to use a (non-
paravirtualized) Windows XP-based high-interaction honey-
pot, we excluded XenBlanket in our study.
Multiple approaches have been taken towards intrusion
detection systems in the cloud. The CIDS (Could Intrusion
Detection System) [17] offers HIDS and NIDS functionality.
It is integrated into the cloud infrastructure at the VMM
level, which means that CIDS components are isolated from
the guest VMs. However, this means that it can by deployed
only by the cloud provider, not by a cloud customer. This
6http://aws.amazon.com/ec2/
Honeybrid- Decision Engine- Redirection EngineNepentheslow-interaction honeypotsimple interaction with many attackersWin XPhigh-interaction honeypotdetailed information collection forselected attackerInternetlibguestfsVolatilityVMI-HoneymonlibVMIDiskRAMVMMHostOS [KVM] / Dom0 [Xen]VMVMVM 0 5 10 15 20Check (scan)Revert (VM)TotalTime (seconds)single-level KVMnested KVM/KVMlimitation could be eliminated by combining CIDS with
nested virtualization.
IDSaaS (Intrusion Detection System as a Service) [18]
gives the cloud user the possibility to use an IDS in the cloud
without requiring support of the cloud provider. IDSaaS
is a signature-based network intrusion detection system
that works by establishing a virtual network environment
between cloud-hosted services and the IDS with the help of
VPC (Virtual Private Cloud) Amazon service. While such an
approach is possible for NIDS, it is not possible for VMI-
based HIDS, which require support at the VMM level.
V. CONCLUSION
In this paper, we have presented our experiences with
nested virtualization and its application to the domain of
intrusion detection and honeypots. Nested virtualization on
x86 hardware is still in its infancy, but more and more
products are supporting nested virtualization or at least claim
to do so. We have shown that in practice there are huge
impacts on performance, so a careful choice of solutions
and conﬁguration options is important.
Nested virtualization is highly useful for complementing
production systems in the cloud with intrusion detection and
for deploying honeypot infrastructures on IaaS clouds. Even
if current major cloud providers do not plan to support
nested virtualization, we conclude that
this is likely to
change in the future. Nested virtualization is a promising
generic approach that allows cloud users to enhance the
security and dependability of their cloud-based applications,
without being tied to speciﬁc security and dependability
mechanisms offered by the cloud provider.
REFERENCES
[1] C. Clark, K. Fraser, S. Hand, J. G. Hansen, E. Jul,
C. Limpach, I. Pratt, and A. Warﬁeld, “Live migration of vir-
tual machines,” in Proc. of the 2nd Symposium on Networked
Systems Design & Implementation (NSDI’05).
USENIX
Association, 2005, pp. 273–286.
[2] A. Seshadri, M. Luk, N. Qu, and A. Perrig, “Secvisor: a
tiny hypervisor to provide lifetime kernel code integrity for
commodity oses,” SIGOPS Oper. Syst. Rev., vol. 41, no. 6,
pp. 335–350, Oct. 2007.
[3] T. Distler, R. Kapitza, I. Popov, H. P. Reiser, and W. Schr¨oder-
Preikschat, “SPARE: Replicas on hold,” in Proc. of the 18th
Network and Distributed System Security Symposium (NDSS
’11), 2011, pp. 407–420.
[4] X. Jiang, X. Wang, and D. Xu, “Stealthy malware detection
through vmm-based ”out-of-the-box” semantic view recon-
struction,” in Proc. of the 14th ACM Conf. on Computer and
Communications Security (CCS’07). ACM, 2007, pp. 128–
138.
[5] T. K. Lengyel, J. Neumann, S. Maresca, B. D. Payne, and
A. Kayias, “Virtual machine introspection in a hybrid hon-
eypot architecture,” in Proc. of the 5th Workshop on Cyber
Security Experimentation and Test. USENIX Association,
2012.
[6] K. Adams and O. Agesen, “A comparison of software and
hardware techniques for x86 virtualization,” SIGOPS Oper.
Syst. Rev., vol. 40, no. 5, pp. 2–13, Oct. 2006.
[7] A.
Graf
and
J.
Roedel,
“Add
svm (kernel),” Website,
nested
http://thread.gmane.org/gmane.comp.emulators.kvm.devel/21119;
accessed 2012-08-13.
online
support
for
available:
[8] M. Ben-Yehuda, M. D. Day, Z. Dubitzky, M. Factor,
N. Har’El, A. Gordon, A. Liguori, O. Wasserman, and B.-
A. Yassour, “The Turtles project: design and implementation
of nested virtualization,” in Proc. of the 9th USENIX Conf.
on Operating Systems Design and Implementation (OSDI’10).
USENIX Association, 2010, pp. 423–436.
[9] I. Campbell, “Xen 4.2 nested virtualization,” Website, online
available at http://lists.xen.org/archives/html/xen-users/2012-
10/msg00314.html; accessed 2012-02-28.
[10] O. Berghmans, “Nesting Virtual Machines in Virtualization
Test Frameworks,” Master’s thesis, Universit¨at Antwerpen,
2010.
[11] R. Russell, “virtio: towards a de-facto standard for virtual i/o
devices,” SIGOPS Oper. Syst. Rev., vol. 42, no. 5, pp. 95–103,
2008.
[12] C. Warrender, S. Forrest, and B. A. Pearlmutter, “Detecting
intrusions using system calls: Alternative data models,” in
Proc. of the IEEE Symposium on Security and Privacy, 1999,
pp. 133–145.
[13] T. Garﬁnkel and M. Rosenblum, “A virtual machine intro-
spection based architecture for intrusion detection,” in Proc.
of the Network and Distributed Systems Security Symposium,
2003, pp. 191–206.
[14] B. Dolan-Gavitt, T. Leek, M. Zhivich, J. Gifﬁn, and W. Lee,
“Virtuoso: Narrowing the semantic gap in virtual machine
introspection,” In Proc. of the 2011 IEEE Symposium on
Security and Privacy, pp. 297–312, 2011.
[15] T.
K.
Lengyel,
framework,”
http://honeybrid.sourceforge.net/; accessed: 2012-09-21.
Website,
“Honeybrid:
2012,
Hybrid
online
honeypot
available:
[16] D. Williams, H. Jamjoom, and H. Weatherspoon, “The Xen-
Blanket: virtualize once, run everywhere,” in Proc. of the
7th ACM European conference on computer systems (Eu-
roSys’12). ACM, 2012, pp. 113–126.
[17] H. A. Kholidy and F. Baiardi, “CIDS: A framework for
intrusion detection in cloud systems,” in In 9th Int. Conf.
on Information Technology: New Generations (ITNG), 2012,
pp. 379–385.
[18] T. Alharkan and P. Martin, “IDSaaS: Intrusion detection
system as a service in public clouds,” in Proc. of the 12th
IEEE/ACM Int. Symp. on Cluster, Cloud and Grid Computing
(CCGrid 2012), 2012, pp. 686–687.