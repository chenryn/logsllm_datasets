of output ﬁles and veriﬁcation of independent signatures;
such veriﬁcation enables decentralized trust. Thus, a user
can simply compare the hashes of her copy of the applica-
tion against the independently signed hashes, and identify
whether she has been subject to a targeted attack.
Untrusted authors. We assume that an untrusted open-
source developer (coerced or malicious) in charge of compil-
ing the oﬃcial build, provides backdoored binaries for dis-
tribution through the oﬃcial channel (e.g., website or up-
date server), but leaves the available source untouched. If
targeted attacks on binaries are addressed, developers can
no longer provide binaries that do not match the source,
since the oﬃcial signatures would diﬀer from any indepen-
dent ones generated by recompiling the application from its
source. Addressing targeted attacks on binaries hence pro-
vides the side eﬀect of protecting against untrusted authors.
Targeted attacks on the source. We assume that an
attacker can alter the source obtained by a targeted user.
Such type of attackers can include the developers of an ap-
plication, who wish to mislead a source reviewer (as in the
case of a security audit). If targeted attacks on binaries are
addressed, a user wishing to recompile the application from
the source beneﬁts from an additional feature: she can also
verify that the source code she obtained corresponds to the
oﬃcial binaries that have been independently signed.
In-
deed, if the hashes of the recompiled binaries do not match
the ones that are independently signed, the user will detect
that she has obtained a diﬀerent source. The granularity of
the detection of mismatching inputs may vary (i.e., a single
ﬁle or a group of ﬁles), since mismatching binaries can be
compiled from several input ﬁles.
Targeted attacks on both the source and binary ﬁles.
In a particular case of targeted attack, we assume an at-
tacker can alter both the source and binaries for a speciﬁc
user through a man-in-the-middle attack, or through the of-
ﬁcial delivery channel. Such a user could then be tricked
into thinking that she has veriﬁed the oﬃcial build by re-
compiling the source herself and matching her build with the
oﬃcial downloaded binaries. Even though a TLS-encrypted
channel provides better security against a man-in-the-middle
attack, it does not fully prevent against this threat (e.g., if
altered ﬁles are made available through the oﬃcial chan-
nel for a particular user). Multiple independent signatures,
enabled by deterministic builds, reduce the probability of
such attacks, since the diﬃculty to compromise several keys
would also increase.
A deterministic build thus bridges the gap between sources
and binaries in both directions, i.e., it allows any user to
match binaries to reference sources, and to match sources to
reference binaries. Also, it does so without involving average
users into any technical details of the compilation process.
2.4 Verifying non-deterministic build
Context. Supposing that all future open-source software
follow a deterministic build process, one may still be con-
cerned about past software packages that provide compiled
binaries but were not compiled with veriﬁability in mind.
In this case, the problem is to match the sources with the
available binaries that are (ideally) signed by the developer,
or provided through an integrity-protected channel to con-
sider them as oﬃcial. TrueCrypt falls in this category, which
relates to the untrusted authors threat.
Feasibility. A naive approach to achieve the veriﬁcation
of past software is by manually inspecting each version of a
selected application and replicating a close match, then ex-
plaining any remaining diﬀerences. A custom build process
could be created for a speciﬁc software instance to make it
deterministically buildable. It would probably be version-
speciﬁc, as supporting several versions and handling many
potential environments would require designing a univer-
sal deterministic builder. However, manual review of past
software is painstaking, as illustrated by our case study in
Section 3, and adapting a deterministic build that exactly
matches the oﬃcial binaries may be sometimes impossible.
Automated veriﬁcation of past software can also be very
challenging. In case the required resources (e.g., the com-
piler information, project conﬁguration or building steps)
are unavailable or not properly identiﬁed, one would need to
leverage compiler ﬁngerprinting techniques (cf. FLIRT [21])
to identify the optimization level and other options passed to
the compiler, along with the correct dependencies. In addi-
tion, software-speciﬁc diﬀerences (e.g., TrueCrypt installer’s
custom checksum, see Section 3.3.3) may prevent general-
ization of an automated veriﬁcation technique for such non-
deterministic builds.
Note that verifying future deterministic builds and past
software packages do not share the same requirements. For
packages whose output is not deterministic, the equivalence
with the oﬃcial build needs to be proven for every build,
while waiting for newer versions that will hopefully leverage
a deterministic build process. This situation also highlights
the fact that a build does not need to lead to an output that
is byte-by-byte identical with the oﬃcial build to be veriﬁ-
able. Superﬁcially variable areas (e.g., timestamps) can be
ignored by a high-level comparison, as opposed to a simple
ﬁle hash comparison. As we observed in our analysis of True-
Crypt in Section 3, the remaining diﬀerences we faced after
setting up a proper environment were found to be legitimate
and explainable, as opposed to malicious diﬀerences.
3. CASE STUDY: TRUECRYPT
TrueCrypt does not provide any explicit way to verify its
compiled binaries as made available for Windows, Linux and
Mac OS X. Anyone wishing to compile the sources will get
binaries diﬀerent than the oﬃcial ones, as identiﬁed by oth-
ers in the past (see e.g., [37]). This has led to some specu-
lations regarding the possibility of having backdoors in the
oﬃcial binaries that cannot be found easily as they would
not be apparent from the source. This concern has also been
raised in a security analysis of TrueCrypt by the Ubuntu
Privacy Remix Team [45], in which the authors conclude
that they cannot link the result of their code analysis to the
oﬃcial binaries because it would require “a very expensive
reverse engineering”.
In this section, we present the challenges we faced to com-
pare all the oﬃcial releases of TrueCrypt for Windows since
February 5, 2008, including versions 5.0, 5.0a, 5.1, 5.1a (and
its second release), 6.0, 6.0a, 6.1, 6.1a, 6.2, 6.2a, 6.3, 6.3a,
7.0, 7.0a, 7.1 and 7.1a (February 7, 2012) with the alleged
corresponding sources. An analysis of version 7.1a was also
documented by the ﬁrst author in an online report [8];2 we
reuse parts of that report here. We present the challenges
in the order as we faced, to highlight the diﬃculties posed
by the sources of non-determinism, and the reasoning we
followed to get down to the root cause of them.
3.1 Our test environment
To replicate a clean environment with the control over
which compiler and tools are installed, we leverage the snap-
shot feature of VMware Workstation. It enables the creation
of virtual machines snapshots that we can later fork to a dif-
ferent path. This feature is useful when installing multiple
applications in a series, as we can take a snapshot after the
installation of each of them, and later backtrack to a partic-
ular snapshot to continue installing diﬀerent versions of the
remaining tools in the toolchain. We conﬁgured three virtual
machines: one running Windows 7 Professional 64-bit edi-
tion and the two others running Windows XP Professional
32-bit edition; in total, we created 45 snapshots, which took
about 175GB of disk space. For our experiments, we mostly
use a PC with an Intel Core i5-2400 processor; we also per-
formed some tests on another machine with an AMD FX-
8350 processor to conﬁrm the origin of yet another source of
non-determinism involving the CPU manufacturer.
3.2 Preparing the environment
3.2.1 Prerequisites
In the latest version of TrueCrypt’s source package, the
readme ﬁle speciﬁes the following list of software, tools, SDK
and additional ﬁles as requirements (as quoted from the ﬁle):
(a) Microsoft Visual C++ 2008 SP1 (Professional Edition
or compatible); (b) Microsoft Visual C++ 1.52 (available
from MSDN Subscriber Downloads); (c) Microsoft Windows
SDK for Windows 7 (conﬁgured for Visual C++); (d) Mi-
crosoft Windows Driver Kit 7.1.0 (build 7600.16385.1); (e)
RSA Security Inc. PKCS #11 Cryptographic Token Inter-
face (Cryptoki) 2.20 header ﬁles; (f) NASM assembler 2.08
or compatible; and (g) gzip compressor.
For the older versions of TrueCrypt we studied, older
versions of similar tools are required. Going back to ver-
sion 5.0, we need to gather Microsoft Windows Driver Kit
(WDK) for Windows Vista (build 6000) and version 7.0.0
(build 7600.16385.0), Microsoft WDK for Windows Server
2The article was discussed in a Slashdot post; see: http://
it.slashdot.org/story/13/10/24/169257/how-i-compiled-
truecrypt-for-windows-and-matched-the-oﬃcial-binaries.
2008 SP0/SP1 (build 6001.18001/2), Microsoft Visual C++
2005 SP1 Professional Edition, NASM assembler 0.99 and
2.06, along with Yasm assembler (no version speciﬁed).
The ﬁrst problem in creating the build environment is that
it requires compilers and resources that can be diﬃcult to
ﬁnd or are non-free; notably, Visual C++ 1.52 that was re-
leased 20 years ago (in 1994) and is only available to MSDN
subscribers (which membership costs at least US$1, 200 at
the time of the writing), or for Microsoft Certiﬁed Trainers
(MCT). In our case, we ﬁrst had to search for copies online
before being provided with the original ﬁle by an anony-
mous contributor with an MSDN subscription, in reaction
to our online report. Indeed, the academic access to MSDN
(MSDNAA) of our university was not privileged enough to
access such old software. For Microsoft Visual C++ 2008
(Visual Studio), one also needs to have an MSDN subscrip-
tion since it is now an old version that is no longer publicly
available as a trial version on Microsoft’s website (although
a direct link to the ISO ﬁle on Microsoft’s servers can be
found by crawling the web). This software was accessible
via our MSDNAA access.
Second, Microsoft WDK 7.0.0 and below are no longer
available at Microsoft at the time of the writing (May 2014)
because of newer versions that superseded the previous ones,
but was available at the time of the ﬁrst analysis (October
2013). This also highlights a general problem for verifying
even relatively new software, as current dependencies may
become permanently unavailable at any time. Additionally,
there exist three versions of the Windows 7 SDK: version
7.0 for .NET Framework 3.5 SP1, v7.0A included in Visual
Studio 2010 only, and v7.1 for .NET Framework 4.0. Also,
we do not know a priori to any test whether a diﬀerent ver-
sion than the one in the authors’ environment can lead to
changes in the compiled output. Fortunately, is it still pos-
sible to ﬁnd direct links to download old SDKs at Microsoft.
For old WDKs though, only MSDN subscribers can obtain
legal copies, which pushed us to search for other channels
due to limitations of our academic access to MSDN. We wish
to thank anonymous contributors for providing us with the
missing pieces that we could not ﬁnd. We veriﬁed the hashes
of the ﬁles we received against the oﬃcial hashes published
on the MSDN website.
Finally, the RSA PKCS #11 Cryptographic Token Inter-
face (Cryptoki) 2.20 header ﬁles and NASM assembler 2.08
are freely available online. The gzip compressor is also avail-
able for Windows thanks to the GnuWin project [18]. The
version number used by the developers is not mentioned.
However the latest GnuWin’s gzip version (1.3.12-1) dates
back to 2007, so we assumed that this version or a compati-
ble one was used by the original developers. A diﬀerent com-
pressor or version of that compressor can lead to a diﬀerent
compression algorithm or ﬁle format and result in a diﬀerent
output. The GnuWin’s version of gzip (1.3.12-1) fortunately
worked for our purpose. We later found in the source code
that gzip.org’s release was suggested by the developers.
Although not mentioned in the TrueCrypt’s project readme
ﬁle but pointed out in [39], the dd tool [22] is also required
during the build process. Some dd ports for Windows do not
behave correctly during the compilation process (e.g., dif-
ferent arguments are expected and no output is generated).
We ﬁrst used an incompatible version (from chrysocome.net)
that achieved incomplete builds. We later found a working
version in the CoreUtils package for Windows [18].
Table 1: File names and sizes from our ﬁrst compilation
attempt (VS2008 SP1 without updates) vs. the original ones
File name
TrueCrypt.exe
TrueCrypt Format.exe
truecrypt.sys
truecrypt-x64.sys
TrueCrypt Setup.exe
TrueCrypt Setup 7.1a.exe
Sizes in bytes
Our build Oﬃcial build
1,516,496
1,507,840
1,610,704
1,602,048
231,760
224,128
223,744
231,376
1,056,768
N/A