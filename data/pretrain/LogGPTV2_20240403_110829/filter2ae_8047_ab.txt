命令监控我们用了两种方法，一种是bash命令监控，一种是基于auditd的命令监控  
Bash的命令监控网上很多是更改bash源码来实现，这里提供一个简单一点的方案，修改/etc/profile增加以下内容即可将命令打入到syslog中
    export HISTTIMEFORMAT="%Y.%m.%d %H:%M:%S "
    export PROMPT_COMMAND="history -a"
    export GREP_OPTIONS=--color=auto
    readonly export PROMPT_COMMAND='{ msg=$(history 1 | { read x y; echo $y; });logger -i -t "command-tag" "#!#whoami=$(whoami)"#!#who am i=$(who am i)#!#pwd=$(pwd)#!#history="$msg"#!#; }'
配置了rsyslog的话，可以在接收服务器端做如下配置来将command-tag标签来单独保存到/data/log/bashlog文件里（记得按天数分割，否则文件过大不方便查看）  
:rawmsg, contains, "command-tag[" /data/log/bashlog  
这里再提一个命令监控的小技巧，一般出现一个内核级别的提权漏洞，绝大多数企业都很难做到及时修复，这个时候你可以收集一些提权工具的默认文件名加到黑名单里，还是会有人直接下载不改文件名的。
Auditd的命令监控在webshell监控部分提到的第一篇文章有写，其实auditd的监控是可以完全包含bash监控结果的，只是目前我们这边auditd的日志处理效果还不是特别理想，所以是作为了bash监控的一个补充，
大多数的审核还是使用bash监控的日志。这里说几个使用auditd需要注意的问题  
1.这个问题是由tm3yshell7师傅发现的，auditd里面有这样一段代码，导致backlog数量超过backlog_limit后会等待处理，这样一来系统就hang住了  
因此在配置中建议一定要加-r参数配置速率并且将backlog_limit配的大一点，我们这边的命令监控规则配置如下  
-a exclude.never -F msgtype=xxxx可以过滤掉你不想看到的类型，不过测试发现在一行中如果指定多个-F会实效，所以要分开写多行
2.如果将auditd的记录结果全部保存的话文件会很大，可以通过在auditd.conf配置如下内容来控制本地日志大小，同时使用filebeat等程序将内容及时打入到日志存储服务器  
max_log_file = 20 #以MB为单位即单个日志文件最大为20M  
max_log_file_action = ROTATE #打到20M之后的动作，这里配置为切割操作  
num_logs = 3 #最多存储3个日志文件  
具体的值大家可以根据自己企业的环境来更改
3.直接记录所有内容会有特别多的垃圾数据，比如很多监控程序就是不断执行某个命令来检验状态，或者一些频繁执行的计划任务，也可能是业务中某个用户动作会触发的命令执行等等，这些数据会占据绝大部分内容且审计起来也会特别不便，这里我们的一个做法是根据每天不同机器的bin文件绝对路径去做行数统计，如果达到一定阈值，则过滤掉后面该bin文件的内容（注意要按不同机器单独做统计，比如企业的调度机器可能会执行N多条ssh记录，那你就只能排除掉调度机器的ssh命令，如果在全部结果中排除就可能会错过某台机器ssh暴力破解其他主机的报警）
4.auditd的日志无法直接显示执行命令的用户名，可以通过getent passwd auid值来查询，如getent passwd
1001可查询auid为1001的用户名（这里查询auid而不是uid的原因是当一个用户切换到其他用户去执行命令时，uid为切换后的用户信息，而auid则对应原始用户）
**DDOS防护**  
这块不做过多描述，我们直接接入了百度云加速，因为公司行业问题，暂时还没有很大的流量攻击，真有的话也是比较被动，经验不是很多，就不误导大家了，欢迎各位大牛补充
**主机安全客户端**  
我们agent的早期就是几个不同功能的python脚本，比如上面提到的sssd自修复，命令监控，还有两个只适用于我们企业自身情况的监控脚本，脚本写的比较粗糙，自身没有做监控，挂掉也不知道，后来考虑整合到一起并且加上一些新的功能，发现ossec就可以满足需求，且比自己开发的脚本性能上更好。Ossec的部署以及扩展使用可以参考[【企业安全实战】开源HIDS
OSSEC部署与扩展使用](https://xianzhi.aliyun.com/forum/topic/2003 "【企业安全实战】开源HIDS
OSSEC部署与扩展使用")，这里提一个小的使用技巧，ossec更多是通过匹配某个结果中的内容来做检测，然而有些结果输出的本身要依赖我们开发的脚本来输出，这个时候我们可以在ossec.conf中添加如下内容来定时调用我们自己的脚本配合使用
        full_command
        /usr/bin/python /etc/seccheck.py
        5
Frequency标签表示执行的间隔，默认单位是秒，因此本例中就是每隔5秒执行一次/etc/seccheck.py脚本，这样只要ossec的进程存活，就可以保证我的脚本成功执行，同时放到/etc下是因为ossec默认对/etc目录的文件有个hash检测，文件发生变更会有报警，避免其他人篡改我们的安全脚本。
**端口扫描检测**  
入侵者获得内网主机权限的时候，总会多多少少的做些端口扫描探测，因此对端口扫描的检测可以增加及时发现入侵事件的可能性，目前是使用opencanary（
做了一版，不过这东西有个问题就是比如像mysql这种端口，只是端口连接不会报警，而是要输入密码测试才行，因此后续计划自己实现一款对连接伪造端口行为做报警的程序，思路基本同
个人觉得端口扫描的检测很重要，在内网安全建设中有很大的作用。
**内容安全策略CSP**  
提到CSP，大家的第一反应可能都是用来提升xss利用难度的，对我们公司来说，CSP最大的作用是防劫持，目前很多运营商劫持的方法是在网页中注入js来实现，https是个比较彻底的方法，但是如果公司目前情况完全实现https有较高难度的情况下，就可以试试CSP策略了，只需要在nginx配置中增加
    add_header Content-Security-Policy:’script-src \'self\' \'unsafe-inline\' \'unsafe-eval\' *.xxx.com’;
就可以  
如果你需要更多起到提升xss利用难度的作用，还得多深入研究下csp策略，不过nginx层面添加要比代码里添加方便快捷的多。需要注意的是添加前开着抓包尽量把网站功能都访问一遍，避免拦截掉正常业务的资源调用，同时可以通过在csp策略中增加report-uri记录拦截记录，通过拦截记录去审核是否有误拦的正常站点资源调用。
差不多把可以写出来的都写了，以上内容除了企业邮箱需要花钱外，其余都是免费的，且实现起来都不复杂，除了统一后台登录系统由其他小伙伴开发外，其余都是我一个人在一个月内就可以完成从设计到试点部署，基本几十行代码就可以实现一个初级版本。大企业规模大，数据量大，一个日志的安全规则匹配可能要flume+kafka+storm+mysql这些东西还得考虑负载均衡、灾备等等，小企业先走文本grep也可以做，重要的是先保证东西有用且不影响业务，剩下的后期可以慢慢去完善。同时结合自己企业的实际环境，可以做一些只适用于某个点但是却有效果的东西，例如我们有套phpcms搭建的系统，被黑过两次，后来我把平时用不到的功能全干掉了，全部php文件做了标记，只要文件有变动就会报警。这种套路不太可能会通用，但是对我们来说很有效果且不影响正常业务，这就够了。另外说一些安全工作的心得，首先是要摆正自己的心态，一定是抱着解决问题的心态去做，出了问题不要先去抱怨说我已经提过这事了，他们自己不做或者他们自己意识不足等等，把你提到的问题让别人去改正也是工作本身的一部分，否则你技术再牛逼，挖出成千上万个漏洞，一个都没推动修复，那么你的工作跟没做是一样的，因为并没有解决丝毫问题。其次是推动工作中，如果比较困难，自己先思考下是否把自己能协助做的事情全部做完了，让别人付出最小的成本，去做的意愿才会比较高，实在帮不上忙的，自己也要多去了解事情进展，让别人始终想着有这么件事需要做......  
对文章内容有问题的小伙伴可以发邮件到我的邮箱PI:EMAIL  
我的blog也会偶尔更新内容，欢迎大家关注 