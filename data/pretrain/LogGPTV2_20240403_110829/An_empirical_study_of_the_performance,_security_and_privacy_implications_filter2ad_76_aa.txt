title:An empirical study of the performance, security and privacy implications
of domain name prefetching
author:Srinivas Krishnan and
Fabian Monrose
An Empirical Study of the Performance, Security and Privacy
Implications of Domain Name Prefetching
Srinivas Krishnan and Fabian Monrose
University of North Carolina at Chapel Hill, Chapel Hill, NC, 27599, USA
Department of Computer Science,
{krishnan, fabian}@cs.unc.edu
Abstract—An increasingly popular technique for
decreasing user-perceived latency while browsing the
Web is to optimistically pre-resolve (or prefetch) do-
main name resolutions. In this paper, we present
a large-scale evaluation of this practice using data
collected over the span of several months, and show
that it leads to noticeable increases in load on name
servers—with questionable caching beneﬁts. Further-
more, to assess the impact that prefetching can have
on the deployment of security extensions to DNS
(DNSSEC), we use a custom-built cache simulator
to perform trace-based simulations using millions
of DNS requests and responses collected campus-
wide. We also show that the adoption of domain
name prefetching raises privacy issues. Speciﬁcally,
we examine how prefetching ampliﬁes information
disclosure attacks to the point where it is possible to
infer the context of searches issued by clients.
Keywords-Domain Name System; Measurements;
Security; Privacy
I. Introduction
Most savvy Internet users would probably not
be surprised if told that detailed dossiers of their
browsing habits were being kept by the online
merchants they do business with. In fact, many
people understand that getting better personaliza-
tion on the Web often means divulging information
about themselves. This sentiment has not gone
unnoticed, and today, new markets for tracking
and sharing online activities are blossoming [1]. As
the surreptitious collection of personal information
becomes more rampant, however, we are “losing
our ability to understand and control those trade-
oﬀs to choose, consciously and with awareness of the
consequences, what information about ourselves we
disclose and what we don’t” [2].
This loss of control is exacerbated by several
recent optimizations within modern browsers and
monolithic search engines, all of which are geared
towards improving responsiveness on the world’s
largest distributed system — i.e., the Web. To help
people ﬁnd the answers to the questions they
seek (e.g., directions to a weekend getaway, rec-
ommendations for that restaurant they just drove
by, etc.) more readily, designers of such systems
are constantly ﬁddling with new ways to improve
responsiveness on the Web.
The soup du jour for decreasing user perceived
latency is to optimize the use of the domain name
system by pre-resolving (or prefetching) names in
hyperlinks. Since DNS is responsible for trans-
lating human-readable names into IP addresses,
nearly every initial visit to a website involves a
name resolution. Thus, by proactively resolving
hyperlinks in pages a user visits, the sites being
referred to can be immediately contacted if, and
when, the user decides to click on one of the links.
At ﬁrst blush, this seems like a relatively neat
idea. DNS itself was designed with high availabil-
ity in mind, but because of its distributed nature,
resolving a domain name often involves commu-
nication with at least one remote server, and in
some cases, might require following referral chains
across many servers—a process that could take sec-
onds to complete. Prefetching, therefore, can lead
to a much faster browsing experience for clients.
As of April 2011, four of the top ﬁve browsers
support prefetching (some more aggressively than
others), and one major search engine (Google) em-
ploys an “Instant Search” feature wherein prefetch-
ing of links in the results page is performed while
the user types in the search bar.
This trend is sure to continue, but as is the case
with many of the classic trade-oﬀs that arise in
the design of any highly distributed system, this
increase in speed does come at a cost. Indeed, one
contribution of this paper is in raising awareness
that DNS prefetching introduces signiﬁcant perfor-
mance overheads on name servers; we observed
decreases in throughput of over 15% in our trace-
based evaluations, high volumes of requests to
non-existent domain names, and limited caching
beneﬁts overall. Moreover, we believe that the
current state of the practice has dire implications
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:43:14 UTC from IEEE Xplore.  Restrictions apply. 
978-1-4244-9233-6/11/$26.00 ©2011 IEEE61for the deployment of security extensions (called
DNSSEC) aimed at making DNS more resilient [3].
These security extensions have witnessed a recent
resurgence in interest, partly because of highly vis-
ible cache poisoning attacks [4]—that take advan-
tage of the lack of security protections in DNS—to
deceive unsuspecting users.
We also show that current practices for DNS
prefetching enable new privacy threats that are
ripe for abuse.
In particular, we believe that
prefetching introduces new ways for infringing on
users’ privacy, to the extent that the context of their
searches can be gleaned simply by inspecting DNS
queries. The success of these attacks relies on the
fact that prefetching inserts a signiﬁcant amount
of information into the cache of the name servers
contacted by clients, allowing domain name oper-
ators to glean far more detailed insights than when
this feature is turned oﬀ.
The rest of the paper is outlined as follows.
Related work is presented in Section II. Section III
covers our experimental setup and the data used
in our large-scale evaluation. In Section IV, we
provide an empirical study of the eﬀect of prefetch-
ing, followed by an analysis of its impact on
DNSSEC in Section V. In Section VI, we show
how prefetching enables new disclosure attacks
that unveil the context of searches performed by
clients. We conclude in Section VII.
II. Related Work
The domain name system plays a critical role
in the operation of Internet applications, and so
it is not surprising that understanding its perfor-
mance has been the topic of much research (e.g.,
[5, 6]). These works all share the common goal of
understanding how to improve DNS performance
bottlenecks. In particular, Jung et al. [7, 8] pro-
vide extensive analysis of DNS performance and
the eﬀectiveness of caching. Additionally, several
studies (e.g., [9, 10]) explore performance charac-
teristics of DNSSEC. Unlike this paper, however,
none of these work focus on DNS prefetching as
it is a very recent practice. Also, to the best of our
knowledge, the dataset and evaluation presented
in this paper is the largest study on this subject.
More closely related to this paper is the work
on DNS cache snooping. Grangeia [11] provides
an excellent review of how to remotely inspect
a cache for evidence of a speciﬁc lookup (e.g.,
www.nytimes.com). Remote cache inspection of
this type has been used for a number of measure-
ment studies that include, for example, inferring
the relative popularity of websites [12] and track-
ing malware infections [13]. In contrast, in this
paper we explore how DNS prefetching ampliﬁes
new privacy threats, allowing one to gain far more
insights than these prior techniques envisioned.
To date, a few proposals have been suggested
for improving the responsiveness of connection es-
tablishment by optimistically issuing DNS queries.
These ideas include prefetching of domain names
based on popularity, prefetching of related do-
main names using piggyback schemes, and pre-
caching of records based on several renewal poli-
cies (e.g., [14, 15]). However, none of these works
perform large scale analyses or study the privacy
and security implications for any of their pre-
scribed prefetching policies.
Lastly, this paper signiﬁcantly extends our pre-
liminary work [16] to include a large-scale empir-
ical evaluation on campus-wide data, new tech-
niques for applying instance-based learning ap-
proaches to boost the accuracy of our search re-
construction process, as well as the design and im-
plementation of a cache simulator. The simulator
is used to study the impact that prefetching can
have on the deployment of DNSSEC [3].
III. Overview
To aid in our pursuit of understanding the impli-
cations of browser-based DNS pre-resolution, we
collected and analyzed two DNS datasets from
several name servers at our campus. The ﬁrst
dataset (Summer) was collected from June to Au-
gust 2010, and spans the summer break. The sec-
ond dataset (Fall) was collected from September to
November 2010. The trace collection was planned
to span these two periods to allow for trend es-
timation as the population on campus increased.
The monitored campus servers included the pri-
mary name servers for the entire wireless network,
as well as the authoritative name servers for the
University. This pool of servers was used by over
26,000 internal clients per day during the summer,
over 44,000 internal clients in the Fall, and serviced
an average of 42 and 63 million queries per day,
respectively. Next, we ﬁrst present our collection
infrastructure and the techniques we used for iso-
lating prefetching events.
A. Data Collection Infrastructure
Our data collection conﬁguration consists of two
core components, namely: i) a DNS trace collector
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:43:14 UTC from IEEE Xplore.  Restrictions apply. 
62synchronized with a common NTP server.
Data Generation Framework: Apart from the
real-world data we collected, we also required
the ability to instrument and collect data from
browsers in a controlled manner. To do so, we
built a framework that allows us to fully auto-
mate our data generation process. This framework
provides the basic functionality needed to inject
keystrokes into several browsers and to automat-
ically collect the resulting DNS data. To simulate
user interaction, our framework accepts a set of
terms, actions, and a desired typing rate, and
injects keystrokes into a given browser. The ac-
tions dictate how the framework interacts with
the browser, e.g., whether it enters keystrokes into
the location bar or search engine. This framework
is used for injecting the queries used as ground
truth in our analysis in Section VI. We note that
all subsequent performance results presented in
this paper excludes any queries/responses resulting
from the data generation framework.
B. Finding Prefetching Events
Recall that our main goal is to study the eﬀects of
browser-based DNS pre-resolution. To eﬀectively
ﬁlter DNS traﬃc not relevant to the study at
hand, we apply heuristics to select only those
queries that are created in response to browsing
events; i.e., as a precursor to a web connection.
To ﬁnd the queries of interest, we take advan-
tage of the fact that browsers rarely make non-
recursive queries, i.e., they delegate the task of
discovering the internet addess of a qualiﬁed name
to an external name server. Hence, the Recursion-
Desired (RD) ﬂag in DNS query packets for inter-
nal source addresses can be used to discard extra-
neous (i.e., non-browser related) DNS queries. Sec-
ondly, we ﬁlter address ranges for known services
that use DNS (e.g., Active Directory and mail)
within the university. Lastly, using the campus
network traces, we discard DNS queries that result
in ensuing connections to non-http/https servers
(e.g., itunes.apple.com).
Having isolated the browser-related queries, the
next challenge is in determining whether or not the
queries belong to a pre-fetching event. Recall that
pre-resolution of domain names is implemented as
a means to reduce response latency on a potential
click of a link on a website. This is realized in
the browsers by extracting the (cid:104)href(cid:105) tags from
each rendered page, and automatically performing
lookups for the resulting domains. This implies
Figure 1. Campus-wide data collection and control framework.
and ii) a campus network trace collector (see Fig-
ure 1). The campus network is served by a single
upstream provider, and is connected via a pair
of optical links. The server pool we monitored is
situated behind a load-balancer, and all wireless
clients using the campus network are assigned a
name server from this pool during their initial
DHCP registration. DHCP leases on this network
are bound to the client’s MAC address, and remain
in eﬀect for at least a few weeks. The DNS traces
are collected via a mirrored port on the load-
balancer switch, using CoralReef’s [17] engine to
process and anonymize [18] the client IPs. The
payloads are stored at a secure location housing
the collection server.
To quantify the utility of a prefetching event, we
also require access to network traces of connections
to the resolved domains. To obtain this insight,
we tapped the optical links from the campus to
the upstream provider and mirrored the traﬃc
to a network monitoring system. The network
monitoring system is a Linux server with a spe-
cialized Data Acquisition and Generation (DAG)
card that allows us to capture network traces
at line rate with negligible loss and nanosecond