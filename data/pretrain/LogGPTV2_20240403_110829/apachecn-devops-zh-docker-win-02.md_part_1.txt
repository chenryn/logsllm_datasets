# 二、将应用打包并作为 Docker 容器运行
Docker 将基础架构的逻辑视图简化为三个核心组件:主机、容器和映像。主机是运行容器的服务器，每个容器都是应用的独立实例。容器是从映像创建的，映像是打包的应用。Docker 容器映像在概念上非常简单:它是一个包含完整、独立应用的单一单元。映像格式非常高效，映像和容器运行时之间的集成非常智能，因此掌握映像是您有效使用 Docker 的第一步。
您已经在[第 1 章](01.html)、*中看到了一些映像，通过运行一些基本容器来检查您的 Docker 安装是否正常工作，从而开始在 Windows 上使用 Docker*、*、*，但是我没有仔细检查映像或 Docker 如何使用它。在本章中，您将全面了解 Docker 映像，了解它们的结构，了解 Docker 如何使用它们，并了解如何将自己的应用打包为 Docker 映像。
首先要了解的是映像和容器之间的区别，通过从同一个映像运行不同类型的容器，可以非常清楚地看到这一点。
在本章中，您将了解更多关于 Docker 的基础知识，包括:
*   从映像运行容器
*   从 Dockerfiles 构建映像
*   将您自己的应用打包为 Docker 映像
*   处理映像和容器中的数据
*   将传统的 ASP.NET 网络应用打包为 Docker 映像
# 技术要求
您将需要在更新为 18.09 的 Windows 10 或 Windows Server 2019 上运行 Docker 来完成示例。本章代码可在[https://github . com/six eyes/docker-on-window/tree/第二版/ch02](https://github.com/sixeyed/docker-on-windows/tree/second-edition/ch02) 获得。
# 从映像运行容器
`docker container run`命令从映像创建一个容器，并启动容器内的应用。这实际上相当于运行两个单独的命令，`docker container create`和`docker container start`，这表明容器可以有不同的状态。您可以在不启动容器的情况下创建容器，并且可以暂停、停止和重新启动正在运行的容器。容器可以处于不同的状态，您可以以不同的方式使用它们。
# 使用任务容器做一件事
`dockeronwindows/ch02-powershell-env:2e`映像是打包应用的一个例子，该应用打算在一个容器中运行并执行一个任务。该映像基于微软视窗服务器核心，设置为启动时运行一个简单的 PowerShell 脚本，打印当前环境的详细信息。让我们看看当我直接从映像运行容器时会发生什么:
```
> docker container run dockeronwindows/ch02-powershell-env:2e
Name                           Value
----                           -----
ALLUSERSPROFILE                C:\ProgramData
APPDATA                        C:\Users\ContainerAdministrator\AppData\Roaming
CommonProgramFiles             C:\Program Files\Common Files
CommonProgramFiles(x86)        C:\Program Files (x86)\Common Files
CommonProgramW6432             C:\Program Files\Common Files
COMPUTERNAME                   8A7D5B9A4021
...
```
在没有任何选项的情况下，容器运行一个内置在映像中的 PowerShell 脚本，该脚本打印出一些关于操作系统环境的基本信息。我称之为**任务容器**，因为容器执行一个任务，然后退出。
如果运行列出所有活动容器的`docker container ls`，将看不到这个容器。但是如果你运行`docker container ls --all`，它显示所有州的容器，你会看到它处于`Exited`状态:
```
> docker container ls --all
CONTAINER ID  IMAGE       COMMAND    CREATED          STATUS
8a7d5b9a4021 dockeronwindows/ch02-powershell-env:2e "powershell.exe C:..."  30 seconds ago   Exited
```
任务容器在自动化重复性任务方面非常有用，例如运行脚本来设置环境、备份数据或收集日志文件。您的容器映像打包了要运行的脚本，以及该脚本所需的所有需求的确切版本，因此任何安装了 Docker 的人都可以运行该脚本，而不必安装先决条件。
这对于 PowerShell 尤其有用，因为脚本可能依赖于几个 PowerShell 模块。模块可能是公开可用的，但是您的脚本可能依赖于特定的版本。您不必共享需要用户安装许多不同模块的正确版本的脚本，而是构建一个已经安装了模块的映像。那么您只需要 Docker 来运行脚本任务。
映像是独立的单元，但您也可以将它们用作模板。一个映像可能被配置为做一件事，但是您可以用不同的方式从一个映像运行容器来做不同的事情。
# 连接到交互式容器
一个**交互容器**是一个与 Docker 命令行有开放连接的容器，所以你使用这个容器就像你连接到一个远程机器一样。通过指定交互选项和容器启动时要运行的命令，可以从同一 Windows Server Core 映像运行交互容器:
```
> docker container run --interactive --tty dockeronwindows/ch02-powershell-env:2e `
 powershell
Windows PowerShell
Copyright (C) Microsoft Corporation. All rights reserved.
PS C:\> Write-Output 'This is an interactive container'
This is an interactive container
PS C:\> exit
```
`--interactive`选项运行一个交互式容器，`--tty`标志将终端连接附加到容器。容器映像名称后的`powershell`语句是容器启动时运行的命令。通过指定一个命令，您可以替换映像中设置的启动命令。在这种情况下，我启动了一个 PowerShell 会话，该会话代替配置的命令运行，因此环境打印输出脚本不会运行。
只要内部的命令在运行，交互式容器就会一直运行。当您连接到 PowerShell 时，在主机上的另一个窗口中运行`docker container ls`将显示容器仍在运行。当您在容器中键入`exit`时，PowerShell 会话结束，因此没有进程运行，容器也退出。
当您构建自己的容器映像时，交互式容器非常有用，它们允许您首先交互式地完成各个步骤，并验证一切都将如您所期望的那样工作。它们也是很好的探索工具。您可以从 Docker 注册表中提取其他人的映像，并在运行应用之前浏览其内容。
当您通读这本书时，您会看到 Docker 可以在虚拟网络中托管复杂的分布式系统，每个组件都在自己的容器中运行。如果您想检查系统的某些部分，您可以在网络中运行一个交互式容器并检查单个组件，而不必公开这些部分。
# 让进程在后台容器中运行
最后一种容器是您在生产中最常用的容器，即后台容器，它使一个长期运行的进程在后台运行。它是一个行为类似于 Windows 服务的容器。在 Docker 术语中，它被称为**分离容器**，是 Docker 引擎让它在后台运行。在容器内部，进程在前台运行。该进程可能是一个网络服务器或一个控制台应用轮询消息队列进行工作，但是只要该进程保持运行，Docker 就会保持容器活动。
我可以从同一个映像再次运行一个背景容器，指定`detach`选项和运行几分钟的命令:
```
> docker container run --detach dockeronwindows/ch02-powershell-env:2e `
 powershell Test-Connection 'localhost' -Count 100
bb326e5796bf48199a9a6c4569140e9ca989d7d8f77988de7a96ce0a616c88e9
```
在这种情况下，当容器已经启动时，控制返回到终端；长随机字符串是新容器的 ID。可以运行`docker container ls`看到容器在运行，`docker container logs`命令显示容器的控制台输出。对于在特定容器上操作的命令，您可以通过容器名称或容器标识的一部分来引用它们——标识是随机的，在我的例子中，这个容器标识以`bb3`开头:
```
> docker container logs bb3
Source        Destination     IPV4Address      IPV6Address
------        -----------     -----------      -----------
BB326E5796BF  localhost       127.0.0.1        ::1
BB326E5796BF  localhost       127.0.0.1        ::1
```
`--detach`标志分离容器，使其移动到后台，这种情况下的命令只是反复 ping`localhost`一百次。几分钟后，PowerShell 命令完成，因此没有进程运行，容器退出。
This is a key thing to remember: if you want to keep a container running in the background, the process that Docker starts when it runs the container has to keep running.
现在，您已经看到容器是从映像创建的，但是它可以以不同的方式运行。因此，您可以完全按照准备的方式使用映像，或者将映像视为内置默认启动模式的模板。接下来，我将向您展示如何构建该映像。
# 构建 Docker 映像
Docker 映像是分层的。底层是操作系统，可以是 Windows Server Core 这样的完整操作系统，也可以是微软 Nano Server 这样的最小操作系统。最重要的是，在构建映像时，通过安装软件、复制文件和运行命令，对基本操作系统所做的每一项更改都有相应的层。从逻辑上讲，Docker 将映像视为单个单元，但从物理上讲，每一层都作为单独的文件存储在 Docker 的缓存中，因此具有许多共同特征的映像可以共享缓存中的层。
映像是使用 Dockerfile 语言的文本文件构建的–指定要开始的基本操作系统映像以及要添加到其上的所有步骤。语言非常简单，只需要掌握几个命令就可以构建生产级映像。我将从本章到目前为止使用的基本 PowerShell 映像开始。
# 理解 Docker 文件
Dockerfile 只是一个将软件打包到 Docker 映像中的部署脚本。PowerShell 映像的完整代码只有三行:
```
FROM mcr.microsoft.com/windows/servercore:ltsc2019
COPY scripts/print-env-details.ps1 C:\\print-env.ps1
CMD ["powershell.exe", "C:\\print-env.ps1"]
```
即使你以前从未见过 Dockerfile，也很容易猜到发生了什么。按照惯例，指令(`FROM`、`COPY`、`CMD`)是大写的，参数是小写的，但这不是强制性的。同样按照惯例，您将文本保存在名为`Dockerfile`的文件中，但这也不是强制性的(没有扩展名的文件在 Windows 中看起来很奇怪，但请记住 Docker 的传统是在 Linux 中)。
让我们一行一行地看看 Dockerfile 中的说明:
*   `FROM mcr.microsoft.com/windows/servercore:ltsc2019`使用名为`windows/servercore`的映像作为该映像的起点，指定该映像的`ltsc2019`版本及其所在的注册表。
*   `COPY scripts/print-env-details.ps1 C:\\print-env.ps1`将 PowerShell 脚本从本地计算机复制到映像中的特定位置。
*   `CMD ["powershell.exe", "C:\\print-env.ps1"]`指定容器运行时的启动命令，在本例中是运行 PowerShell 脚本。
这里有几个明显的问题。基础映像来自哪里？Docker 内置了映像注册表的概念，它是容器映像的存储。默认注册中心是一个名为 **Docker Hub** 的免费公共服务。微软在 Docker Hub 上发布了一些映像，但 Windows 基础映像托管在**微软容器注册中心** ( **MCR** )上。
2019 年发布的 Windows Server Core 映像名为`windows/servercore:ltsc2019`。第一次使用映像时，Docker 会将其从 MCR 下载到您的本地机器上，然后将其缓存以供进一步使用。
Docker Hub is where all the Microsoft images are listed for discovery, as MCR doesn't have a web UI. Even if images are hosted on MCR, they will be listed on Docker Hub, so that's the place to go when you're looking for images.
PowerShell 脚本从哪里复制的？构建映像时，包含 Dockerfile 的目录用作构建的上下文。当您从这个 Docker 文件构建映像时，Docker 将期望在上下文目录中找到一个名为`scripts`的文件夹，其中包含一个名为`print-env-details.ps1`的文件。如果找不到该文件，构建将会失败。
Dockerfiles use the backslash as an escape character in order to continue instructions onto a new line. This clashes with Windows file paths, so you have to write `C:\print.ps1` as `C:\\print.ps1` or `C:/print.ps1`. There is a nice way to get around this, using a processor directive at the start of the Dockerfile, which I'll demonstrate later in the chapter.
您如何知道 PowerShell 可供使用？它是 Windows Server Core 基础映像的一部分，因此您可以依赖它的存在。您可以使用附加的 Dockerfile 指令安装任何不在基本映像中的软件。您可以添加 Windows 功能、设置注册表值、将文件复制或下载到映像中、提取 ZIP 文件、部署 MSIs 以及执行您需要的任何其他操作。
这是一个非常简单的 Dockerfile，但即使如此，其中两个指令也是可选的。只有`FROM`指令是强制的，所以如果你想构建一个微软 Windows Server Core 映像的精确克隆，你可以在你的 Dockerfile 中只用一个`FROM`语句就可以做到，并且可以随意调用克隆的映像。
# 从 Dockerfile 构建映像
现在您有了一个 Dockerfile，您可以使用`docker`命令行将其构建成一个映像。像大多数 Docker 命令一样，`image build`命令很简单，所需选项很少，更喜欢约定。
要构建映像，请打开命令行并导航到 Dockerfile 所在的目录。然后，运行`docker image build`并给你的映像一个标签，这是将识别映像的名称:
```
docker image build --tag dockeronwindows/ch02-powershell-env:2e .
```
每个映像都需要一个标签，用`--tag`选项指定，它是本地映像缓存和映像注册表中映像的唯一标识符。标签是您在运行容器时引用映像的方式。完整的标记指定要使用的注册表:存储库名称，它是应用的标识符，以及后缀，它是该版本映像的标识符。
当您为自己构建一个映像时，您可以称它为任何东西，但是惯例是将您的存储库命名为您的注册表用户名，后跟应用名:`{user}/{app}`。您也可以使用标签来识别应用版本或变体，例如`sixeyed/git`和`sixeyed/git:2.17.1-windowsservercore-ltsc2019`，这是我在 Docker Hub 上的两张图片。
`image build`命令末尾的句点告诉 Docker 要用于映像的上下文的位置。`.`是当前目录。Docker 将目录树的内容复制到构建的临时文件夹中，因此上下文需要包含您在 Dockerfile 中引用的任何文件。复制上下文后，Docker 开始执行 Docker 文件中的指令。
# 检查 Docker 如何构建映像
了解 Docker 映像是如何构建的将有助于您构建高效的映像。`image build`命令会产生大量输出，它会告诉您 Docker 在构建的每一步都做了什么。Dockerfile 中的每个指令都是作为一个单独的步骤执行的，它会生成一个新的映像层，最终的映像将是所有层的组合栈。下面的代码片段是构建我的映像的输出:
```
> docker image build --tag dockeronwindows/ch02-powershell-env:2e .