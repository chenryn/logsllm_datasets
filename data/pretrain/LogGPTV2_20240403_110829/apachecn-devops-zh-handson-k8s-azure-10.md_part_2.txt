### 作为环境变量的机密
您可以通过将 Kubernetes 中的一个机密作为环境变量引用来使用它。机密可以在容器**容器**和**环境**部分的容器定义中引用。您将使用之前在 pod 中创建的机密，并学习如何在应用中使用它们:
1.  You can configure a pod with environment variable secrets like the definition provided in **pod-with-env-secrets.yaml**:
    1 堆叠版本:v1
    2 个孩子:Pod
    3 元数据:
    4 名称:机密使用-env
    5 规格:
    6 个容器:
    7 -名称:nginx
    8 映像:nginx
    9 环境:
    10 -名称:SECRET_URL
    11 valueFrom:
    12 secretKeyRef:
    13 名称:myapi URL 标记
    14 键：机密网址.txt
    15 -姓名:SECRET_TOKEN
    16 valueFrom:
    17 secretKeyRef:
    18 名称:myapi URL 标记
    19 键:secrettoken.txt
    20 重启策略:永不
    让我们检查一下这个文件:
    *   **第 9 行**:这里是设置环境变量。
    *   **第 11-14 行**:这里，您可以参考 **myapi-url-token** secret 中的**secret turl . txt**文件。
    *   **第 16-19 行**:这里，你可以参考 **myapi-url-token** secret 中的 **secrettoken.txt** 文件。
    当 Kubernetes 在需要使用机密的节点上创建 pod 时，它会将该机密存储在该主机上的 **tmpfs** 中，这是一个不写入磁盘的临时文件系统。当引用该机密的最后一个 pod 不再在该节点上运行时，该机密将从该节点的 **tmpfs** 中删除。如果一个节点关闭或重新启动， **tmpfs** 总是被擦除。
2.  Let's now create the pod and see whether you can access the secrets:
    kube CTL create-f-pod-with-env-secrets . YAML
3.  Check whether the environment variables are set correctly:
    kube CTL exec-it secret-use-env-sh
    echo $SECRET_URL
    echo $SECRET_TOKEN
    这将向您显示类似于图 10.10 的结果:
    ![Accessing the Secret inside the pod](img/B17338_10_10.jpg)
    图 10.10:你可以在 PODS 里找到机密
4.  现在，您可以使用**退出**命令退出外壳，进入容器。
在这个例子中有几件事需要注意。首先，请注意，当您访问环境变量时，您得到的是机密的实际值，而不是 base64 编码的值。这是意料之中的，因为 base64 编码只应用于 Kubernetes API 级别，而不是应用级别。
需要注意的第二件事是，您可以通过在运行的容器中打开一个外壳并响应这个机密来访问这个机密。对 Kubernetes 中的 pods 应用正确的 RBAC 级别非常重要，这样不是每个集群用户都能运行 **exec** 命令并打开外壳。
还要注意，容器映像形式的应用和 pod 定义都没有硬编码的机密。这些机密是由 Kubernetes 的动态配置提供的。
最后要注意的是，任何应用都可以通过引用适当的 **env** 变量来使用机密值。没有办法限制容器中的哪些进程可以访问哪些环境变量。
关于用作环境变量的机密，需要知道的一件重要事情是，当机密本身被更新时，环境变量的值不会被更新。这可能会导致您最终处于这样一种状态，即在机密更新后创建的 pods 与机密更新前创建的 pods 具有不同的环境变量值。
在本节中，您探讨了如何使用环境变量从运行的 pod 中访问机密。在下一节中，您将探索如何使用文件来实现这一点。
### 作为档案的机密
让我们来看看如何挂载与文件相同的机密，而不是环境变量:
1.  You will use the following pod definition to demonstrate how this can be done. It is provided in the **pod-with-vol-secrets.yaml** file:
    1 堆叠版本:v1
    2 个孩子:Pod
    3 元数据:
    4 名称:机密使用卷
    5 规格:
    6 个容器:
    7 -名称:nginx
    8 映像:nginx
    9 卷安装:
    10 -名称:secretvolume
    11 安装路径:“/etc/secrets”
    12 只读:真
    13 卷:
    14 -名称:secretvolume
    15 个机密:
    16 secret name:myapi URL 令牌
    让我们仔细看看这个文件:
    *   **第 9-12 行**:这里提供挂载细节。您可以将 **/etc/secrets** 目录中的机密装载为只读。
    *   **第 13-16 行**:这里，你指的是机密。请注意，机密中的两个值都将装入容器中。您可以选择(尽管此处未显示)指定应该将机密的哪些部分装入卷中。
    请注意，这比 **env** 定义更简洁，因为您不必为每个机密定义名称。然而，应用需要有特殊的代码来读取文件的内容，以便正确地加载它。
2.  Let's see whether the secrets made it through. Create the pod using the following command:
    kube CTL create-f-pod-with-vol-secret . YAML
3.  Echo the contents of the files in the mounted volume:
    kube CTL exec-it-secret-use-volume-sh
    cd /etc/secrets/
    cat secreturl . txt
    cat secrettoken . txt
    正如你在*图 10.11* 中看到的，机密存在于 Pod 中:
    ![Echoing the contents of the files containing the secrets in the mounted volume ](img/B17338_10_11.jpg)
    图 10.11:机密在我们的窗格中作为文件提供
4.  现在，您可以使用**退出**命令退出外壳，进入容器。
这里还有几件事需要注意。首先，请注意，机密同样是纯文本形式，而不是 base64。
其次，由于机密是作为文件装载的，文件系统权限适用于这些机密。这意味着您可以限制哪些进程可以访问这些文件的内容。
最后，作为文件装载的机密将随着机密的更新而动态更新。
现在，您已经学习了两种将机密传递给正在运行的容器的方法。在下一节中，将解释为什么最好使用 file 方法。
### 为什么机密作为文件是最好的方法
虽然使用机密作为环境变量是一种常见的做法，但是将机密装载为文件更安全。Kubernetes 将机密安全地视为环境变量，但是容器运行时并不安全地对待它们。要验证这一点，您可以运行以下命令，在 Docker 运行时中以纯文本形式查看机密:
1.  Start by getting the node that the pod using environment variables from the earlier example is running on with the following command:
    描述 pod 机密使用-env | grep 节点
    这将向您显示实例标识，如图 10.12 所示:
    ![Fetching the Instance ID of the node by describing the pod](img/B17338_10_12.jpg)
    图 10.12:获取实例标识
2.  Next, get the Docker ID of the running pod:
    描述容器机密-使用-env | grep '容器标识'
    这将为您提供容器标识:
    ![Fetching the Docker ID of the running pod](img/B17338_10_13.jpg)
    图 10.13:获取 Docker 标识
3.  Finally, you will execute a command on the node running your container to show the secret that was passed as an environment variable. First, let's set a couple of variables you'll use later:
    实例=
    停靠=
    VMSS=$(az vmss 列表-查询'[]。名称'-o tsv)
    RGNAME=$(az vmss 列表-查询'[]'。resourceGroup' -o tsv)
    #### 注意
    前面的命令假设您的订阅中有一个带有一个节点池的 AKS 集群。如果不是这种情况，请将 **VMSS** 和 **RGNAME** 的值更改为运行集群的比例集和资源组的值的名称。
4.  Depending on your node version, you will run either of the following commands. For clusters running on Kubernetes version 1.18.x or earlier, run the following command:
    az vmss 运行-命令调用-g $RGNAME -n $VMSS -命令-id \
    RunShellScript-INSTANCE-id $ INSTANCE-scripts \
    " dock inspection-f ' { . config . env } } ' $ docked ' "
    yaml | grep secret
    这将返回类似于图 10.14 的输出:
![Output showing the decoded secret in the Docker runtime ](img/B17338_10_14.jpg)
图 10.14:机密在 Docker 运行时被解码
对于运行 1.19 或更高版本的集群，运行以下命令:
az vmss 运行-命令调用-g $RGNAME -n $VMSS -命令-id \
RunShellScript-INSTANCE-id $ INSTANCE-scripts \
“crictl inspection-YAML $ docked 输出”
yaml | grep secret
这将向您显示类似于图 10.15 的输出:
![Output showing the decoded secret in the containerd runtime ](img/B17338_10_15.jpg)
图 10.15:机密在容器运行时被解码
这将在容器运行时以纯文本的形式向您展示两个机密，无论是 Docker(1.19 之前的 AKS 版本)还是 containerd(1.19 及以上的 AKS 版本)。
如您所见，机密在容器运行时命令中被解码。这意味着大多数记录系统将记录这些敏感的机密。因此，建议使用机密作为文件，因为它们不是以纯文本形式传递的，除非传递给 pod 和应用。
让我们确保清理我们在此示例中创建的资源:
kubectl delete pod --all
忽必烈删除机密 myapi URL 令牌\
myapi token-literal myapi token-YAML
现在，您已经使用默认的机密机制在 Kubernetes 中探索了机密，让我们继续使用一个更安全的选项，即 Azure Key Vault。
## 安装机密存储 CSI 驱动程序的 Azure 密钥库提供程序
在前一节中，您探索了存储在 Kubernetes 中的机密。这意味着它们是在 Kubernetes API 服务器上进行 base64 编码的。您在上一节中看到 base64 编码的机密根本不安全。对于高度安全的环境，您会希望使用更好的机密存储。