before sorting” idea, which means that if a vector has
already been randomly permuted,
information leaked
about the outcome of comparisons does not leak infor-
mation about the initial and ﬁnal position of any element
of the vector. More speciﬁcally, the variant of quick-
sort proposed in [33], needs on average O(logn) rounds
and a total of O(nlogn) oblivious comparisons. Com-
plete privacy is guaranteed when the input vector con-
tains no equal sorting keys, and in the case of equal keys,
their number leaks. Furthermore, performance of the al-
gorithm is data-dependent and generally depends on the
number of equal elements, with the optimal case being
that no equal pairs exist. Practical results have shown
[13] that this quicksort variant is the most efﬁcient obliv-
ious sorting algorithm available, when the input keys are
constructed in a way that makes them unique.
In our algorithms, we utilize the Quicksort algorithm
together with a secret-shared index vector as described
in [13]. This way, each sortable element becomes a
unique value-index pair, providing us the optimal Quick-
sort performance and complete privacy. In addition, it
has the added beneﬁt of making the sorting algorithm
stable.
USENIX Association
26th USENIX Security Symposium    1219
Identity-Based Key Agreement Protocols. Like in [39],
we make use of identity-based cryptography [45] to cir-
cumvent the need for a Public Key Infrastructure (PKI),
here, for the computation of the dead drops3. In identity-
based cryptography, a Key Generation Center (KGC) us-
ing a master secret key, generates the users’ secret keys,
while the users’ public keys are a deterministic function
of their identity. In an identity-based key agreement (ID-
KA) protocol (e.g. [32, 44, 47, 18, 52, 29, 50]), any pair
of users can execute a GenerateKey algorithm to agree
on a shared key value, on input their obtained secret keys
and the other user’s identity.
In our setting, we will apply ID-KA for the compu-
tation of the dead drops, where now the users compute
their secret keys by combining partial secret keys issued
by the MPC servers. Therefore, we adjust ID-KA to a
multiple KGC setting where each MPC server plays the
role of a KGC. In general, we can manage distributed
key generation in a fault tolerant manner, using thresh-
old secret-sharing techniques. However, since our threat
model considers a passive (semi-honest adversary), we
consider an m-out-of-m instantiation, keeping protocol
description simple. In particular, we can naturally extend
a single KGC ID-KA protocol to a setting with m KGCs
denoted by KGC1, . . . , KGCm. In the full version of our
paper, we present at length two multiple KGC ID-KA
constructions based on ID-KA protocols that use crypto-
graphic pairings.
In the ﬁrst construction, we build upon the SOK
ID-KA protocol introduced in [44] and proven secure
in [42]. The key agreement in SOK is non-interactive
and the shared key between two ﬁxed users is ﬁxed and
can be computed only by knowing the other user’s iden-
tity.
In the second construction, we build upon the ID-
KA protocol introduced in [47] as modiﬁed in [18] that
achieves security and forward secrecy as proven in [17].
In this construction, the users must additionally exchange
some additional random values in every new session that
is necessary for forward secure key agreement.
Both constructions match the original single ID-KA
protocols, when m = 1. Therefore, it is straightforward
that the ﬁrst construction (resp. the second construction)
preserves security (resp. security and forward secrecy)
against any polynomially bounded semi-honest adver-
sary that corrupts all-but-one of the m KGCs.
In the current version of MCMix, we do not focus
on forward security. Hence, our system’s description
(cf. Dialing protocol in Section 5) is based on the sim-
pler ﬁrst ID-KA construction, where knowledge of the
users’ usernames is enough for shared key computation.
3If users’ public keys have been distributed in a PKI setting, then we
can turn to the easier solution of classic Difﬁe-Hellman key exchange
for dead drop computation.
Nonetheless, in Section 7 (cf. Remark 5), we brieﬂy dis-
cuss on how the second construction could be adopted to
a forward-secure version of our system, leaving detailed
description for future work.
3
Ideal Anonymous Messaging
We formalize the concept of anonymous messaging in
line with standard MPC security modeling. In particu-
lar, we capture the notion of an ideal MPC functionality
F that in presence of an ideal adversary S receives inputs
from a number of n users and computes the desired result
w.r.t. some program f . An MPC protocol is said to be
secure w.r.t. a class of programs, if its execution running
in the presence of a real-world adversary results in in-
put/output transcripts that are indistinguishable from the
ideal setting that F speciﬁes for program f .
Subsequently, inspired by Tor, Vuvuzela and other re-
lated systems, we make use of the “rendezvous points”
idea. Speciﬁcally, we instantiate F w.r.t.
two distinct
“abstract” programs DLNabs and CNVabs that reﬂect the
Dialing and Conversation functionalities respectively;
the two programs are abstract in the sense that, in this
section, they will be described at a high level algorith-
mic way that we will make concrete in the coming sec-
tions. The use of a random rendezvous point in the es-
tablishment of a communication channel between two
users averts any denial of service attacks targeting spe-
ciﬁc users by other users at the conversation phase.
Notation. We write x $← X to denote that x is sam-
pled uniformly at random from set X. For a positive
integer n, the set {1, . . . ,n} is denoted by [n]. The j-
th component of n-length tuple a is denoted by a[ j],
i.e. a := (a[1], . . . ,a[n]). We use c≈ to express indis-
tinguishability between transcripts, seen as random vari-
ables. By negl(·) we denote that a function is negligible,
i.e. asymptotically smaller than the inverse of any poly-
nomial. We use λ as the security parameter.
Let x = (cid:104)x1, . . . ,xn(cid:105) be a vector of users’ inputs. We
denote by EXECF, f
S,x (λ ) the transcript of input/outputs in
an ideal MPC execution of F interacting with the ideal
P, f
A,x(λ ) the transcript of in-
adversary S, and by EXEC
puts/outputs in a real-world execution of MPC protocol
P w.r.t.
f under the presence of adversary A. By PPT,
we mean that A runs in probabilistic polynomial time.
Entities and threat model. We consider a client-server
MPC setting. Namely, the entities involved in an MPC
protocol P are (i) a number of n users u1, . . . ,un that
provide their inputs (cid:104)x1, . . . ,xn(cid:105) and (ii) a number of m
servers Ser1, . . . , Serm that collectively compute an eval-
uation on the users’ inputs w.r.t. a program f . The users
engaged in a speciﬁc MPC execution round form an ac-
1220    26th USENIX Security Symposium
USENIX Association
tive set Uact. We consider an ad-hoc setting [8] of secure
computation, where the program f is known in advance,
but not the active user set Uact.
An adversary against P is allowed to have a global
view of the protocol network. In addition, it may cor-
rupt up to a ﬁxed subset of θ servers and has limited
computational resources preventing it from breaking the
security of the underlying cryptographic primitives.
In standard MPC cryptographic modeling, the security
of P is argued w.r.t. the functionality F that speciﬁes an
“ideal” evaluation of f , where the privacy leakage is the
minimum possible for the honest users. Thus, indistin-
guishability between the ideal and the real world setting
implies that an adversary against P obtains essentially
no more information than this minimum leakage. In our
description, F merely leaks whether an honest user is on-
line or not. This information is impossible to hide against
a network adversary and hence it is a minimum level of
leakage. On the other hand, information that can be typ-
ically inferred by trafﬁc analysis, is totally protected by
F. This level of anonymity, sometimes referred to as un-
observability, requires the participation of all online par-
ties and the generation of “dummy trafﬁc” independently
of whether or not they wish to send a message in a par-
ticular round. As a result, any protocol P that securely
realizes F where f represents a dialing or conversation
program, should incorporate such a methodology. As we
demonstrate, using MPC to realize P is a natural way
to determine the appropriate level and form of “dummy
trafﬁc” needed to realize this level of anonymity.
An ideal MPC functionality for a family of programs.
In a messaging system, dialing and conversation among
users are operations where conﬂicts are likely to appear,
e.g. two users may dial the same person, or conversation
may be accidentally established on colluding communi-
cation channels (three equal rendezvous points are com-
puted). One can think several other examples of opera-
tions where conﬂicts are possible, such as election tally
where exactly one out of multiple ballots per voter must
be counted, or deciding on the valid sequence of transac-
tions on a blockchain ledger when forking occurs. Any
program implementing this type of an operation must be
able to resolve these conﬂicts. The way that conﬂict res-
olution is achieved, may depend on parameters like com-
putation efﬁciency, communication complexity or user
priority, yet in any case, a set of programs that imple-
ment the same operation are in some sense equivalent
and may be clustered under the same family. A plausible
requirement is that the choice of the family member that
will be utilized should not affect the security standards
of the operation implementation.
Consequently, in an MPC setting that supports the re-
alization of any program in the family, it is desirable that
security is preserved w.r.t.
to the entire family, so that
one can choose the family member that suits their cus-
tom requirements. To express this formally, we introduce
a relaxation of the usual MPC functionality. Namely,
the relaxed ideal MPC functionality F is for a family of
programs { fz}z in the presence of an ideal adversary S
that chooses the index z (this is the relaxation), where z
can be parsed as the “code” that determines the family
member fz. The program fz accepts as input a vector
x = (cid:104)x1, . . . ,xn(cid:105) of (i) valid messages from some domain
D or (ii) ⊥, if the user is inactive, i.e. not in Uact. In our
description, computation takes place even when a subset
of users abstain from the speciﬁc execution by not pro-
viding inputs. To formalize the abstain behavior of user
ui, for every i ∈ [n] we deﬁne an ‘abstaini(·)’ predicate
over D∪{⊥} as follows:
(cid:26) 1,
0,
abstaini(xi) :=
if xi = ⊥
if xi ∈ D
(1)
The ideal MPC functionality F is presented in Fig. 1.
Note that the relaxation suggests that the users will re-
ceive output from a program fz for z that will be the ideal
adversary’s choosing.
it sends (i) (cid:0)send input,ui, abstaini(xi)(cid:1) to S, where
Ideal MPC functionality F for programs { fz}z
– Upon receiving ‘start’ from S, it sets the status to
‘input’ and initializes two lists Linput and Lcorr as empty.
– Upon receiving (corrupt,ui) from S, it adds ui to Lcorr.
– Upon receiving (send input,xi) from ui, if ui ∈ Lcorr,
then it sends (send input,ui,xi) to S. If ui /∈ Lcorr, then
abstaini(·) is deﬁned in Eq. (1).
– Upon receiving (receive input,ui, ˜xi) from S, if (i) the
status is ‘input’ and (ii) (ui,·) /∈ Linput, then if ui /∈ Lcorr,
it adds (ui,xi) to Linput, else it adds (ui, ˜xi) to Linput.
– Upon receiving (compute,z) from S, if Linput contains
records for all users in Uact, it executes the following
steps: ﬁrst, then it computes the value vector
y = (cid:104)y1, . . . ,yn(cid:105) ← fz(x1, . . . ,xn) .
Then, it sends yi to ui for i, . . . ,n, (hence, S obtains
{yi}ui∈Lcorr).
programs { fz :(cid:0)D∪{⊥}(cid:1)n −→ Y}z, interacting with the
Figure 1: The ideal MPC functionality F for family of
ideal adversary S.
The security of a real-world MPC protocol P is deﬁned
w.r.t. a class of programs F as well as a family selected
from F as follows:
Deﬁnition 1. Let P be an MPC protocol with n users and
m servers and let F be a class of programs. We say that
USENIX Association
26th USENIX Security Symposium    1221
P is a (θ ,m)-secure MPC protocol w.r.t. { fz}z ⊆ F, if for
every active user set Uact ∈ U, every program fz, every
input vector x = (cid:104)x, . . . ,xn(cid:105) and every PPT adversary A
corrupting up to θ out of m servers, there is an ideal
adversary S s.t.
EXECF
S,x(λ )
c≈ EXEC
P, fz
A,x(λ ) .
The family of programs DLNabs and CNVabs. An anony-
mous messaging scheme comprises the following two
functionalities: (i) the Dialing functionality, which con-
sists of the computation of a rendezvous point for a given
pair of users who want to communicate, and (ii) the Con-
versation functionality, which represents the actual ex-
change of messages. For the families DLNabs and CNVabs,
the parameter z, enables the adversary to choose (i) how
to handle collisions between multiple dialers in the case
of DLNabs, and (ii) how to handle the presence of three
or more equal dead drops in the case CNVabs (which hap-
pens only in the case of malicious users). We note that
this minimum level of adversarial manipulation does not
affect the security features of the anonymity system, yet
it allows for substantial performance gains in terms of
the implementation.
We formally express the above functionalities by in-
stantiating the generic MPC functionality F w.r.t. the Di-
aling program family DLNabs and the Conversation pro-
gram family CNVabs (i.e. we set f as DLNabs and CNVabs).
We note that for both the dialing and conversation pro-
gram families, the veriﬁcation that the parameter z has
the proper structure can be suitably restricted so that it is
tested efﬁciently by the program. For brevity, we omit
further details.
The Dialing program family DLNabs. In the Dialing func-
tionality, a rendezvous point for users ui and u j
is
set when two requests of the form (DIAL,ui,u j) and
(DIALCHECK,u j) have been produced. Thus, the Di-
aling program family DLNabs receives inputs that are vec-
tors of (DIAL,·,·) or (DIALCHECK,·) requests, as well
as ⊥ to denote user inactivity. That is, Uact is the set
of users that do not provide a ⊥ input. The program
DLNabs is parameterized by z, that speciﬁes a determin-
DLN(·,·) over pairs of inputs to resolve the
istic program Rz
case where more than one dial requests address the same
user/dial checker. The Dialing program family DLNabs is
presented formally in Figure 2.
By the deﬁnition of DLNabs, two active users ui,u j
that have submitted matching dialing and dial check re-
quests are going to be provided the same random integer
ti = t j ∈ {ti, j,t j,i}, which establishes a rendezvous point.
We will refer to these non-⊥ values in t1, . . . ,tn as dead