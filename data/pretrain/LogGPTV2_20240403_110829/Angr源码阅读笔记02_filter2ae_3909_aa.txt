# Angr源码阅读笔记02
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
上一回我们从angr的`__init__.py`文件入手，到解析了`project.py`文件的内容，了解了一个基本的angr项目是怎么一步一步初始化到建立完成开始可以执行操作的，现在我们把目光放回到所有angr项目的基石-CLE类与angr的中间语言VEX-IR语言上，更进一步的理解整个angr系统的工作情况
## 一、一切的基石-CLE
​ angr 中的 CLE 模块用于将二进制文件载入虚拟地址空间，而CLE 最主要的接口就是 loader
类。loader类加载所有的对象并导出一个进程内存的抽象。生成该程序已加载和准备运行的地址空间
​
这里需要注意的是CLE模块本身的代码实现并不在Angr的源码里面，在Angr的源码里面它是已经以一个二进制包的形式调用，它真正的源码实现在另外一个仓库里面：
    https://github.com/angr/cle
​ 里面的README文件里面也介绍了CLE包的基础用法
    >>> import cle
    >>> ld = cle.Loader("/bin/ls")
    >>> hex(ld.main_object.entry)
    '0x4048d0'
    >>> ld.shared_objects
    {'ld-linux-x86-64.so.2': ,
     'libacl.so.1': ,
     'libattr.so.1': ,
     'libc.so.6': ,
     'libcap.so.2': }
    >>> ld.addr_belongs_to_object(0x5000000)
    >>> libc_main_reloc = ld.main_object.imports['__libc_start_main']
    >>> hex(libc_main_reloc.addr)       # Address of GOT entry for libc_start_main
    '0x61c1c0'
    >>> import pyvex
    >>> some_text_data = ld.memory.load(ld.main_object.entry, 0x100)
    >>> irsb = pyvex.lift(some_text_data, ld.main_object.entry, ld.main_object.arch)
    >>> irsb.pp()
    IRSB {
       t0:Ity_I32 t1:Ity_I32 t2:Ity_I32 t3:Ity_I64 t4:Ity_I64 t5:Ity_I64 t6:Ity_I32 t7:Ity_I64 t8:Ity_I32 t9:Ity_I64 t10:Ity_I64 t11:Ity_I64 t12:Ity_I64 t13:Ity_I64 t14:Ity_I64
       15 | ------ IMark(0x4048d0, 2, 0) ------       16 | t5 = 32Uto64(0x00000000)
       17 | PUT(rbp) = t5
       18 | t7 = GET:I64(rbp)
       19 | t6 = 64to32(t7)
       20 | t2 = t6
       21 | t9 = GET:I64(rbp)
       22 | t8 = 64to32(t9)
       23 | t1 = t8
       24 | t0 = Xor32(t2,t1)
       25 | PUT(cc_op) = 0x0000000000000013
       26 | t10 = 32Uto64(t0)
       27 | PUT(cc_dep1) = t10
       28 | PUT(cc_dep2) = 0x0000000000000000
       29 | t11 = 32Uto64(t0)
       30 | PUT(rbp) = t11
       31 | PUT(rip) = 0x00000000004048d2
       32 | ------ IMark(0x4048d2, 3, 0) ------       33 | t12 = GET:I64(rdx)
       34 | PUT(r9) = t12
       35 | PUT(rip) = 0x00000000004048d5
       36 | ------ IMark(0x4048d5, 1, 0) ------       37 | t4 = GET:I64(rsp)
       38 | t3 = LDle:I64(t4)
       39 | t13 = Add64(t4,0x0000000000000008)
       40 | PUT(rsp) = t13
       41 | PUT(rsi) = t3
       42 | PUT(rip) = 0x00000000004048d6
       43 | t14 = GET:I64(rip)
       NEXT: PUT(rip) = t14; Ijk_Boring
    }
###  1.1 CLE包的用法
​ 按照Angr官方文档的说法，分析一个没有源码的二进制文件需要克服很多的困难，主要包含以下几种：
  * 如何加载一个二进制文件到一个合适的分析器中
  * 如何将二进制转化为中间表示形式(intermediate representation)
  * 执行分析，可以是： 
    * 对二进制文件局部或整体的静态分析（比如依赖分析，程序切片）
    * 对程序状态空间的符号化探索（比如“我们可以执行这个程序直到我们找到一个溢出吗？”）
    * 上述两种分析在某些程度上的结合（比如“我们只执行程序中对内存写的程序片段来找到一个溢出。”）
​ 而Angr均提供了应对上述挑战的组件，我们的CLE包就是为了解决第一个问题，关于第二个问题我们将在之后的VEX
IR的介绍里面提到。这一章节我们将根据官方文档的视角进行学习
​ CLE
loader（`cle.Loader`）表示整个加载的二进制对象集合，加载并映射到单个内存空间。每个二进制对象都由一个可以处理其文件类型（`cle.Backend`）的加载器后端加载。例如，`cle.ELF`用于加载ELF二进制文件
​ 一般情况下，CLE 会自动选择对应的 backend，也可以自己指定。有的 backend 需要 同时指定架构
名称 | 描述  
---|---  
elf | ELF文件的静态加载器 (基于PyELFTools)  
pe | PE文件静态加载器 (基于PEFile)  
mach-o | Mach-O文件的静态加载器  
cgc | CGC (Cyber Grand Challenge)二进制的静态加载器  
backedcgc | CGC 二进制的静态加载器，允许指定内存和寄存器  
elfcore | ELF 核心转储的静态加载器  
blob | 将文件作为平面镜像加载到内存中  
####  1.1.1 加载对象及其地址空间
​ 我们可以通过loader来查看二进制文件加载的共享库，以及执行对加载地址空间相关的基本查询，按照官方文档例如：
    # All loaded objects
    >>> proj.loader.all_objects
    [    ,
        ,
        ,
           ,
           ,
    # This is the "main" object, the one that you directly specified when loading the project
    >>> proj.loader.main_object
    # This is a dictionary mapping from shared object name to object
    >>> proj.loader.shared_objects
    {     'libc.so.6': 
        'ld-linux-x86-64.so.2': }
    # Here's all the objects that were loaded from ELF files
    # If this were a windows program we'd use all_pe_objects!
    >>> proj.loader.all_elf_objects
    [    ,
        ,
        ]
    # Here's the "externs object", which we use to provide addresses for unresolved imports and angr internals
    >>> proj.loader.extern_object
    # This object is used to provide addresses for emulated syscalls
    >>> proj.loader.kernel_object
    # Finally, you can to get a reference to an object given an address in it
    >>> proj.loader.find_object_containing(0x400000)
  * `proj.loader.all_objects`：可以查看这个程序加载的所有对象对应内存的加载地址
  * `proj.loader.main_object`：这个可以查看我们项目里选择分析的程序的相应信息，也就是我们自己手动选择加载的程序，例如我们之前测试的程序`test`之类的
  * `proj.loader.shared_objects`：查看二进制文件加载的共享库，以及执行对加载地址空间相关的基本查询
  * `proj.loader.all_elf_objects`：这个是查看所有ELF格式的对象及其加载地址空间，在Windows里面我们就要使用`all_pe_objects`而不是`all_elf_objects`
  * `proj.loader.extern_object`：这个也就是加载所有的`extern`对象及其加载地址空间
  * `proj.loader.kernel_object`：这个就是加载系统内核加载地址空间
  * `proj.loader.find_object_containing(0x400000)`：这个我们可以通过提供地址空间内存返回处于这个内存加载地址空间的对象名称，也就是个反查询的功能
​ 我们可以直接与这些对象进行交互以从中提取元数据：
    >>> obj = proj.loader.main_object
    # The entry point of the object
    >>> obj.entry
    0x400580
    >>> obj.min_addr, obj.max_addr
    (0x400000, 0x60105f)
    # Retrieve this ELF's segments and sections
    >>> obj.segments
    ,
    ]>
     >>> obj.sections
     ,
                ,
                ,  
                ...etc
    # You can get an individual segment or section by an address it contains:
    >>> obj.find_segment_containing(obj.entry)         
    >>> obj.find_section_containing(obj.entry)
    # Get the address of the PLT stub for a symbol
    >>> addr = obj.plt['abort']
    >>> addr
    0x400540
    >>> obj.reverse_plt[addr]
    'abort'
    # Show the prelinked base of the object and the location it was actually mapped into memory by CLE
    >>> obj.linked_base
    0x400000
    >>> obj.mapped_base
    0x400000
####  1.1.2 符号和重定位
​
还可以在使用CLE时使用符号，这里的符号是编译程序中的符号的概念，我们这里也可以简单认为就是函数的名称也是一种符号，也就是提供了一种将名称映射到地址的方式
​ 从CLE获取符号的最简单方法是使用`loader.find_symbol`，它接受名称或地址并返回Symbol对象，一个最简单例子就是：
    >>> malloc = proj.loader.find_symbol('malloc')
    >>> malloc
​
这里我们就通过函数名`malloc`查找到了其对应的共享库和加载地址空间。符号上最有用的属性是其名称，所有者和地址，但符号的“地址”可能不明确。Symbol对象有三种报告其地址的方式：
  * `.rebased_addr`：是它在所有地址空间中的地址。这是打印输出中显示的内容
  * `.linked_addr`：是它相对于二进制的预链接基础的地址
  * `.relative_addr`：是它相对于对象库的地址。这在文献（特别是Windows文献）中称为RVA（相对虚拟地址）
​ 一个简单的使用例子就是：
    >>> malloc.name
    'malloc'
    >>> malloc.owner_obj
    >>> malloc.rebased_addr
    0x1054400
    >>> malloc.linked_addr
    0x54400
    >>> malloc.relative_addr
    0x54400
​ 我们还可以判断一个符号是导入符号还是导出符号，根据官方文档的例子：
    >>> malloc.is_export
    True
    >>> malloc.is_import
    False
    # On Loader, the method is find_symbol because it performs a search operation to find the symbol.
    # On an individual object, the method is get_symbol because there can only be one symbol with a given name.
    >>> main_malloc = proj.loader.main_object.get_symbol("malloc")
    >>> main_malloc
    >>> main_malloc.is_export
    False
    >>> main_malloc.is_import
    True
    >>> main_malloc.resolvedby