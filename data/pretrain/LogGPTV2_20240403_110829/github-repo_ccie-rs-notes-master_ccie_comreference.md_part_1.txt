# Ethernet Basics
### Basic switch port config
```
speed { auto | 10 | 100 | 1000 }
duplex { auto | half | full }
```
## Basic SPAN Configuration
```
monitor session 1 source interface 
monitor session 1 destination interface 
```
## Complex SPAN configuration
```
monitor session 1 source interface Fa0/18 rx
monitor session 1 source interface Fa0/19 tx
monitor session 1 filter vlan 1-3, 229
monitor session 1 destination interface Fa0/24 encapsulation replicate
```
## RSPAN Configuration
### Source switch
```
vlan 199
 remote span
monitor session 3 source vlan 66-68 rx
monitor session 3 destination remote vlan 199
```
### Destination switch
```
vlan 199
 remote span
monitor session 63 source remote vlan 199
monitor session 63 destination interface fa0/24
```
## ERSPAN configuration
### Source ASR
```
monitor session 1 type erspan-source
 source interface gig0/1/0 rx
 no shutdown
 destination
  erspan-id 101
  ip address 10.1.1.1
  origin ip address 172.16.1.1
```
### Destination 6509
```
monitor session 2 type erspan-destination
 destination interface Gi2/2/1
 no shutdown
 source
  erspan-id 101
  ip address 10.1.1.1
```
### Verification
```
show monitor session 1
```
## Basic VSS configuration
Same virtual switch domain needs creating, referenced by a number between 1 and 255. One switch must be switch 1, another switch 2.
### Switch 1:
```
switch virtual domain 10
switch 1
```
### Switch 2:
```
switch virtual domain 10
switch 2
```
### Switch VSL Port Channel
Switch 1
```
int port-channel 5
 switchport
 switch virtual link 1
```
Switch 2
```
int port-channel 10
 switchport
 switch virtual link 2
```
* Afterwards, interface will be up/down until reboot
Next, convert switches with
```
switch convert mode virtual
```
### VSS Verification
* show switch virtual - will show switch domain number, switch number and role
* show switch virtual role - Peer 0 is local switch
* show switch virtual link - Shows VSL info
* show switch virtual link port-channel - Show port channel info
# Virtual LANs and VLAN Trunking
## VLAN Database Mode
```
vlan database
 vlan 21
```
* show current - VLANs availble to IOS when switch in VTP server mode
* show proposed - VLANs waiting
* apply - Applies changes
* abort - Aborts changes
* reset - Don't make changes but stay in VLAN DB mode
## Config mode
````
int fa0/3
 switchport access vlan 22
```
* show vlan brief - Shows ports in VLANs (access only)
* switchport access vlan 31 would create VLAN 31
* vlan 32 - creates vlan 32
## Operational state of VLANs
* state suspend - Valid in db and config, suspends VLAN globally (i.e. vtp)
* shutdown - Shuts down locally
## Private VLANs
```
vlan 199
 private-vlan isolated
vlan 101
 private-vlan community
vlan 100
 private-vlan primary
 private-vlan association 101,199
show vlan private-vlan shows types of VLANs
int Fa0/1
 switchport mode private-vlan host
 switchport private-vlan host-association 100,101
int Fa0/13
 switchport mode private-vlan promiscuous
 switchport private-vlan mapping 100,101,199
int vlan 100
 private-vlan mapping 101,199
 ip address 10.1.1.1 255.255.255.0
 ```
## VLAN Trunking
### ISL and 802.1q config
* switchport - toggles and interface to be switched or routed
* switchport mode - sets DTP negotiation parameters
* switchport trunk - Sets trunking parameters
* switchport access - Sets nontrunk parameters
* show int trunk - Summary of trunk info
* show int  trunk - Trunking details for particular interface
* show int  switchport - Trunking and nontrunking details for interface
* show dtp - Shows DTP information
### Allowd, Active and Pruned VLANs
* switchport trunk allowed - allows vlans
* VTP can prune VLANs
* show int trunk lists vlans that are:
* Allowed - Admistratively configured to be allowed (or all by default)
* Allowed and active - must be allowed, VLAN configured on switch and in active state. With PVST+, STP instance actively running on this trunk for VLANs in this list
* Active and not pruned - Subset of above, with any VTP pruned or VLANs considered blocked by PVST+ removed.
### Trunking config
* switchport mode and switchport nonegotiate define whether DTP attempts to trunk, and what rules when attempts made.
* switchport mode trunk - Always trunks this side, uses DTP to help other side trunk
* switchport mode trunk; switchport nonegotiate - Always trunks, no DTP send
* switchport mode dynamic desirable - Sends DTP messages hoping to trunk
* switchport mode dynamic auto - Prefers access but will trunk based on other side
* switchport mode access - Never trunks, sends DTP to help other side
* switchport mode access; switchport nonegotiate - Never trunks, no DTP sent
* switchport trunk encapsulation - sets trunking type, also includes option for negotiating the type
### Configuring trunks on routers
Use encapsulation dot1q vlan-id native on sub-int, allows to recognise both untagged and cos-marked frames with particular vlan-id
## QinQ Tunneling
```
int Fa0/1
 switchport mode dot1q-tunnel
 switchport access vlan 5
 l2protocol-tunnel cdp
 l2protocol-tunnel lldp
 l2protocol-tunnel stp
 l2protocol-tunnel vtp
```
show int fa0/1 would then show admin and operational mode of tunnel
## VLAN Trunking Protocol
* vtp domain 
* show vtp status - shows domain, pruning mode, version, last updated etc
* vtp password - sets password, taken into account for MD5 hash of the VLAN database
* vtp mode - Server, transparent, client, off (v3 only)
* vtp version - 1 and 2 will apply to all switches in domain. v3 has to be done on each switch, and must have domain name set
* vtp pruning - enables/disables pruning
* vtp interface - Specifies identifier of updates, by default lowest number VLAN SVI
## Configuring PPPoE
```
int Fa0/0
 ip address 192.168.100.1 255.255.255.0
 ip nat inside
int Fa0/1
 no shutdown
 pppoe-client dial-pool-number 1
int dialer1
 mtu 1492
 ip tcp adjust-mss 1452
 encapsulation ppp
 ip address negotiated
 ppp chap hostname Username@ISP
 ppp chap password Password4ISP
 ip nat outside
 dialer pool 1
ip nat inside source list 1 interface dialer 1 overload
access-list 1 permit 192.168.100.0 0.0.0.255
ip route 0.0.0.0 0.0.0.0 dialer1
```
Verify with show pppoe session, debug with debug pppoe data/errors/events/packets
# Spanning Tree Protocol
## STP Config and Analysis
* show spanning-tree root - shows the root bridge, will also show "This bridge is the root" if on root switch
* spanning-tree vlan 1 priority 28672 - Changes root priority
```
int Fa0/1
 spanning-tree vlan 1 cost 100 - Changes port cost when done in port context
```
* Can also use the spanning-tree vlan vlan-id root { primary | secondary } [ diameter diameter] command. Diameter lowers Hello, ForwardDelay and MaxAge timers. This command is a macro though, not something placed into config.
Above command sets priority to 24576 if current root priority is larger than 24576 (or 24576 but higher mac). If current priority lower, set switches priority to 4096 below root. Secondary priority is always 28672
### MST configuration
```
spanning-tree mst configuration
 name 
 revision 
 instance  vlan 
```
* show current will show current MST config when in this context, show pending shows future.
```
spanning-tree mode mst
spanning-tree mst 0 priority 0
spanning-tree mst 1 priority 4096
```
* change cost on port with spanning-tree cost mst
If VTPv3 used, domain and MST region can match.
```
vtp mode server mst
vtp primary mst
```
Above two commands mean that commands in spanning-tree mst config are mirrored on all switches in VTPv3 domain
### PortFast
```
spanning-tree portfast
spanning-tree portfast default
spanning-tree portfast disable
spanning-tree portfast trunk (For trunks connected to hosts)
```
### Root Guard, BPDU Guard, BPDU Filter
```
spanning-tree bpduguard enable
spanning-tree portfast bpduguard default
spanning-tree guard root
spanning-tree portfast bpdufilter default
spanning-tree portfast bpdufilter disable
```
Be careful with per port and global bpdufilter, global 10 hellos sent first then stopped. Port can still receive BPDUs. On an interface, bpdus stopped and received
### UDLD
```
udld { enable | aggressive } - global command
udld port [ aggressive] - per port
show udld neighbors
```
### Loop Guard
```
spanning-tree loopguard default
spanning-tree guard loop - Per port
```
### Bridge Assurance
```
spanning-tree bridge assurance - global
spanning-tree portfast network - per port
```
### Load Balancing across Port Channels
port-channel load-balance type - Set type of load balancing
### Port-Channel Discovery and Config
Must have same of the following: -
- Same speed and duplex settings
- Same operating mode (trunk, access, dynamic)
- If not trunking, same access VLAN
- If trunking, same trunk type, allowed VLANs and native VLAN
- No span ports
int Port Channel automatically added to config when Port Channel created. Inherits config of first interface added.
Config changes on Port Channel int only take effect on non-suspended members.
Following guidelines recommended: -
- Do not create port channel manually before bundling physical ports under it, let switch do it automatically
- Make sure to remove port channel interface from config so no issues when port channel with same number recreated later
- Physical port config needs to be identical
- Correct physical port config first, not port channel
- Port Channel int can be l2 or l3, depending on whether physical bundled ports configured as L2 or L3. Once port channel created, not possible to change it to other mode without recreating. Possible to combine L2 and L3 ports in a port channel
- When sorting out err-disable, shut down physical interfaces and port channel interface. Only then try to reactivate. If problem persists, remove port channel config altogether and recreate it
Configure ports to be in manual port channel with "channel-group number mode on"
```
 channel-group number auto/desirable - PAgP
 channel-group number active/passive - LOOPBACK0-IP
channel-protocol pagp/lacp makes only protocol psecific commands available
```
### LLDP
```
lldp run - globally enable
lldp transmit - per port
lldp receive - per port
lldp holdtime
lldp reinit
lldp timer
```
# IP Addressing
## Static NAT
```
int E0/0
 ip address 10.1.1.3 255.255.255.0
 ip nat inside
int S0/0
 ip address 200.1.1.251 255.255.255.0
 ip nat outside
ip nat inside source static 10.1.1.2 200.1.1.2
ip nat inside source static 10.1.1.1 200.1.1.1
```
## Dynamic NAT
```
int E0/0
 ip address 10.1.1.3 255.255.255.0
 ip nat inside
 int Se0/0
  ip address 200.1.1.251 255.255.255.0
  ip nat outside
ip nat pool fred 200.1.1.1 200.1.1.2 netmask 255.255.255.252
ip nat inside source list 1 pool
access-list 1 permit 10.1.1.0 0.0.0.255
```
## Dynamic PAT
As above but...
```
no ip nat inside source list 1 pool fred
ip nat inside source list 1 pool fred overload
```
## Dynamic v6 Tunneling config
```
R2
int tun23
 ipv6 address 23::2/64
 tunnel source lo0
 tunnel destination 3.3.3.3
 tunnel mode ipv6ip
R3
int tun32
 ipv6 address 23::3/64
 tunnel source lo0
 tunnel destination 2.2.2.2
 tunnel mode ipv6ip
```
# IP Services
## DHCP Helper
```
ip helper-address 10.1.2.202
```
## DHCP Server
```
int Eth1
 ip address 10.1.1.1 255.255.255.0
 ip helper-address 10.1.2.202
ip dhcp excluded-address 10.1.1.0 10.1.1.20
ip dhcp pool subnet1
 network 10.1.1.0 255.255.255.0
 dns-server 10.1.2.203
 default-router 10.1.1.1
 lease 0 0 20 # 0 days, 0 hours, 20 minutes
```
## HSRP
```
track 13 interface Se0/0.1 line-protocol
int Fa0/0
 ip address 10.1.1.1 255.255.255.0
  standby 21 ip 10.1.1.21
  standby 21 priority 105
  standby 21 preempt
  standby 21 track 13
  standby 22 ip 10.1.1.22
  standby 22 track 13
show standby shows state
```
## NTP