                    defaultConstructor = constructor;
                    break;
                }
            }
        }
    }
    return defaultConstructor;
    }
综上代码，可以清晰的得到，Fastjson对于大部分这些类的反序列化时，优先通过获取无参构造方法实例化，如果没有无参构造方法，则选择一个参数（参数类型和自身一致）的构造方法，并放到defaultConstructor中（后续会用于区分）。但如果都获取不到，那么就会走到下面的逻辑：
    } else if (!isInterfaceOrAbstract) {
        String className = clazz.getName();
        String[] paramNames = null;
        if (kotlin && constructors.length > 0) {
            paramNames = TypeUtils.getKoltinConstructorParameters(clazz);
            creatorConstructor = TypeUtils.getKoltinConstructor(constructors, paramNames);
            TypeUtils.setAccessible(creatorConstructor);
        } else {
            for (Constructor constructor : constructors) {
            ...
                paramNames = lookupParameterNames;
                creatorConstructor = constructor;
            }
        }
    }
可以看到，若是没有无参和一参（和自身class类型一致）构造方法的话，就会遍历构造方法，取最后一个，但是，构造方法会放在creatorConstructor，将会导致在com/alibaba/fastjson/parser/ParserConfig.java:1325，即：
方法com.alibaba.fastjson.parser.ParserConfig#checkAutoType(java.lang.String,
java.lang.Class, int)中
    JavaBeanInfo beanInfo = JavaBeanInfo.build(clazz, clazz, propertyNamingStrategy);
    if (beanInfo.creatorConstructor != null && autoTypeSupport) {
        throw new JSONException("autoType is not support. " + typeName);
    }
可以看到，如果creatorConstructor不为空，并且autoTypeSupport为true，就会直接抛异常.
而不开启autoType，后续判断到没开启autoType，也会抛出异常
    if (!autoTypeSupport) {
        throw new JSONException("autoType is not support. " + typeName);
    }
但在其抛异常的判断之前，/Users/xuanyh/.ideaLibSources/fastjson-1.2.59-sources.jar!/com/alibaba/fastjson/parser/ParserConfig.java:1154，还是在方法com.alibaba.fastjson.parser.ParserConfig#checkAutoType(java.lang.String,
java.lang.Class, int)中
    boolean autoTypeSupport = this.autoTypeSupport
            || (features & mask) != 0
            || (JSON.DEFAULT_PARSER_FEATURE & mask) != 0;
    if (clazz == null && (autoTypeSupport || jsonType || expectClassFlag)) {
        boolean cacheClass = autoTypeSupport || jsonType;
        clazz = TypeUtils.loadClass(typeName, defaultClassLoader, cacheClass);
    }
只要开启了autoType，都会调用TypeUtils.loadClass去加载class，观察其内部代码实现可以发现，会把class放到mappings缓存中
    public static Class loadClass(String className, ClassLoader classLoader, boolean cache) {
        if(className == null || className.length() == 0 || className.length() > 128){
            return null;
        }
        Class clazz = mappings.get(className);
        if(clazz != null){
            return clazz;
        }
        if(className.charAt(0) == '['){
            Class componentType = loadClass(className.substring(1), classLoader);
            return Array.newInstance(componentType, 0).getClass();
        }
        if(className.startsWith("L") && className.endsWith(";")){
            String newClassName = className.substring(1, className.length() - 1);
            return loadClass(newClassName, classLoader);
        }
        try{
            if(classLoader != null){
                clazz = classLoader.loadClass(className);
                if (cache) {
                    mappings.put(className, clazz);
                }
                return clazz;
            }
        } catch(Throwable e){
            e.printStackTrace();
            // skip
        }
        try{
            ClassLoader contextClassLoader = Thread.currentThread().getContextClassLoader();
            if(contextClassLoader != null && contextClassLoader != classLoader){
                clazz = contextClassLoader.loadClass(className);
                if (cache) {
                    mappings.put(className, clazz);
                }
                return clazz;
            }
        } catch(Throwable e){
            // skip
        }
        try{
            clazz = Class.forName(className);
            if (cache) {
                mappings.put(className, clazz);
            }
            return clazz;
        } catch(Throwable e){
            // skip
        }
        return clazz;
    }
从上面的代码，得到一个非常重要的信息，通过这个缓存，我们可以得到一个构造方法判断绕过方式：一个需要反序列化的class，如果不存在上面所说的无参、一参构造方法，那么在第一次反序列化时，会通过TypeUtils.loadClass存到mappings缓存，然后再到后面的抛异常报错，但是这个时候，class已经加到mappings缓存了，那么，只要再发起一次反序列化，就能从最早最早的地方从mappings缓存加载，从而避免了后续的构造方法和autoType判断
    if (clazz == null) {
        clazz = TypeUtils.getClassFromMapping(typeName);
    }
    if (clazz == null) {
        clazz = deserializers.findClass(typeName);
    }
    if (clazz == null) {
        clazz = typeMapping.get(typeName);
    }
    if (clazz != null) {
        if (expectClass != null
                && clazz != java.util.HashMap.class
                && !expectClass.isAssignableFrom(clazz)) {
            throw new JSONException("type not match. " + typeName + " -> " + expectClass.getName());
        }
        return clazz;
    }
那么也就是说，对于Fastjson，不管存不存在无参或自身类型一致的一参构造方法，都能被反序列化。
PS：而关于注解部分，大部分第三方依赖都不会用到Fastjson的注解，这部分我们暂且不加入，因为gadgetinspector对于方法扫描的时候还没有做到存储注解，如果需要做这样的改造的话，需要做一部分的改造，这篇文章暂且不提。
#### 反序列化可被触发执行的方法特征
因为Fastjson反序列化时，并不是直接反射Field设值，而是智能的提取出相应的setter、getter方法等，然后通过这些方法提取得到字段名称，接着进行设值
对于反序列化时会调用哪个特征的方法，由于网络上有一部分博文已经描述总结得很详细了，故而，我这边也不再贴代码了。
setter：
  1. 方法名长度大于3
  2. 非静态方法
  3. 返回类型为Void.TYPE
  4. 返回类型为自身class类型
  5. 显式入参只有一个
getter：
  1. 对于提取名称（getName->name），setter未存在的
  2. 方法名长度大于3，并且第4个字符为大写
  3. 非静态方法
  4. 没有入参
  5. 返回值类型是Collection.class、Map.class、AtomicBoolean.class、AtomicInteger.class、AtomicLong.class或是其子孙类
### 0x04 编写Fastjson三件套
#### SerializableDecider->FastjsonSerializableDecider
由上一节分析得出，只要存在构造方法，就能被Fastjson反序列化，因此，对于SerializableDecider的apply方法的逻辑实现，全部返回true就可以了。
    public class FastjsonSerializableDecider implements SerializableDecider {
        public FastjsonSerializableDecider(Map methodMap) {
        }
        @Override
        public Boolean apply(ClassReference.Handle handle) {
            return Boolean.TRUE;
        }
    }
考虑到Fastjson具有反序列化黑名单的机制，如果各位想要减少已被禁用链的输出，可以在这里加入黑名单。
#### SourceDiscovery->FastjsonSourceDiscovery
根据前面列出的规则，创建Fastjson的SourceDiscovery
    public class FastjsonSourceDiscovery extends SourceDiscovery {
      @Override
      public void discover(Map classMap,
          Map methodMap,
          InheritanceMap inheritanceMap) {
        final FastjsonSerializableDecider serializableDecider = new FastjsonSerializableDecider(
            methodMap);
        for (MethodReference.Handle method : methodMap.keySet()) {
          if (serializableDecider.apply(method.getClassReference())) {
            if (method.getName().startsWith("get") && method.getDesc().startsWith("()")) {
              if (method.getDesc().matches("\\(L[^;]*;\\)L.+?;")) {
                String fieldName =
                    method.getName().charAt(3) + method.getName().substring(4);
                String desc = method.getDesc()
                    .substring(method.getDesc().indexOf(")L") + 2, method.getDesc().length() - 1);
                MethodReference.Handle handle = new MethodReference.Handle(
                    method.getClassReference(), "set" + fieldName, desc);
                if (!methodMap.containsKey(handle) &&
                    method.getDesc().matches("\\(L[^;]*;\\)Ljava/util/Collection;") ||
                    method.getDesc().matches("\\(L[^;]*;\\)Ljava/util/Map;") ||
                    method.getDesc().matches("\\(L[^;]*;\\)Ljava/util/concurrent/atomic/AtomicBoolean;") ||
                    method.getDesc().matches("\\(L[^;]*;\\)Ljava/util/concurrent/atomic/AtomicInteger;") ||
                    method.getDesc().matches("\\(L[^;]*;\\)Ljava/util/concurrent/atomic/AtomicLong;")){
                  addDiscoveredSource(new Source(method, 0));
                }
              }
            }
            if (method.getName().startsWith("set") && method.getDesc().matches("\\(L[^;]*;\\)V")) {
              addDiscoveredSource(new Source(method, 1));
            }
          }
        }
      }
    }
#### ImplementationFinder->FastjsonImplementationFinder
因为该Finder类，基本都是用到SerializableDecider决策者就可以了，那么这个实现就非常简单
    public class FastjsonImplementationFinder implements ImplementationFinder {
        private final SerializableDecider serializableDecider;
        public FastjsonImplementationFinder(SerializableDecider serializableDecider) {
            this.serializableDecider = serializableDecider;
        }
        @Override
        public Set getImplementations(MethodReference.Handle target) {
            Set allImpls = new HashSet<>();
            // For jackson search, we don't get to specify the class; it uses reflection to instantiate the
            // class itself. So just add the target method if the target class is serializable.
            if (Boolean.TRUE.equals(serializableDecider.apply(target.getClassReference()))) {
                allImpls.add(target);
            }
            return allImpls;
        }
    }
#### 配置Fastjson以及添加到配置仓库ConfigRepository
    public class FastjsonDeserializationConfig implements GIConfig {
        @Override
        public String getName() {
            return "fastjson";
        }
        @Override
        public SerializableDecider getSerializableDecider(Map methodMap, InheritanceMap inheritanceMap) {
            return new FastjsonSerializableDecider(methodMap);
        }
        @Override
        public ImplementationFinder getImplementationFinder(Map methodMap,
                                                            Map> methodImplMap,
                                                            InheritanceMap inheritanceMap) {
            return new FastjsonImplementationFinder(getSerializableDecider(methodMap, inheritanceMap));
        }
        @Override
        public SourceDiscovery getSourceDiscovery() {
            return new FastjsonSourceDiscovery();
        }
    }
    public class ConfigRepository {
        private static final List ALL_CONFIGS = Collections.unmodifiableList(Arrays.asList(
                new JavaDeserializationConfig(),
                new JacksonDeserializationConfig(),
                new XstreamDeserializationConfig(),
                new FastjsonDeserializationConfig()));
        public static GIConfig getConfig(String name) {
            for (GIConfig config : ALL_CONFIGS) {
                if (config.getName().equals(name)) {
                    return config;
                }
            }
            return null;
        }
    }
### 0x05 优化slink-加入jndi-lookup
因为Fastjson反序列化RCE很多的打法，基本都是jndi-lookup实现，但是我看到gadgetinspector中并没有该slink的判断，因此，加入该slink的判断，以对其进行优化
gadgetinspector.GadgetChainDiscovery#isSink
在该方法末尾添加jndi-lookup判断即可
    if (inheritanceMap.isSubclassOf(method.getClassReference(), new ClassReference.Handle("javax/naming/Context"))
            && method.getName().equals("lookup")) {
        return true;
    }
至此，gadgetinspector的改造就完成了，那么接下来，我们以一个已有gadget chain的jar进行扫码挖掘，测试一下效果
例：HikariCP-3.4.1.jar
扫码挖掘结果：
    sun/usagetracker/UsageTrackerClient.setup(Ljava/io/File;)V (1)
      java/io/FileInputStream.(Ljava/io/File;)V (1)
    org/apache/log4j/jmx/LayoutDynamicMBean.setAttribute(Ljavax/management/Attribute;)V (1)
      java/lang/reflect/Method.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object; (0)
    com/sun/org/apache/xml/internal/serializer/ToStream.setOutputFormat(Ljava/util/Properties;)V (1)
      com/sun/org/apache/xml/internal/serializer/ToStream.init(Ljava/io/Writer;Ljava/util/Properties;ZZ)V (2)
      com/sun/org/apache/xml/internal/serializer/CharInfo.getCharInfo(Ljava/lang/String;Ljava/lang/String;)Lcom/sun/org/apache/xml/internal/serializer/CharInfo; (0)
      com/sun/org/apache/xml/internal/serializer/CharInfo.(Ljava/lang/String;Ljava/lang/String;Z)V (1)
      java/net/URL.openStream()Ljava/io/InputStream; (0)
    com/sun/management/jmx/TraceListener.setFile(Ljava/lang/String;)V (1)
      java/io/FileOutputStream.(Ljava/lang/String;Z)V (1)
    com/zaxxer/hikari/HikariConfig.setMetricRegistry(Ljava/lang/Object;)V (1)
      com/zaxxer/hikari/HikariConfig.getObjectOrPerformJndiLookup(Ljava/lang/Object;)Ljava/lang/Object; (1)
      javax/naming/InitialContext.lookup(Ljava/lang/String;)Ljava/lang/Object; (1)
    org/apache/log4j/jmx/AppenderDynamicMBean.setAttribute(Ljavax/management/Attribute;)V (1)
      org/apache/log4j/jmx/AppenderDynamicMBean.getAttribute(Ljava/lang/String;)Ljava/lang/Object; (1)
      java/lang/reflect/Method.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object; (0)
    org/apache/log4j/varia/LevelMatchFilter.setLevelToMatch(Ljava/lang/String;)V (1)
      org/apache/log4j/helpers/OptionConverter.toLevel(Ljava/lang/String;Lorg/apache/log4j/Level;)Lorg/apache/log4j/Level; (0)
      java/lang/reflect/Method.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object; (0)
    org/apache/log4j/jmx/LayoutDynamicMBean.setAttribute(Ljavax/management/Attribute;)V (1)
      org/apache/log4j/jmx/LayoutDynamicMBean.getAttribute(Ljava/lang/String;)Ljava/lang/Object; (1)
      java/lang/reflect/Method.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object; (0)
    org/apache/log4j/jmx/AppenderDynamicMBean.setAttribute(Ljavax/management/Attribute;)V (1)
      java/lang/reflect/Method.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object; (0)
可以看到，其中我们新加入的jndi-lookup的slink，顺利的挖掘到一个可用的gadget chain：
    com/zaxxer/hikari/HikariConfig.setMetricRegistry(Ljava/lang/Object;)V (1)
      com/zaxxer/hikari/HikariConfig.getObjectOrPerformJndiLookup(Ljava/lang/Object;)Ljava/lang/Object; (1)
      javax/naming/InitialContext.lookup(Ljava/lang/String;)Ljava/lang/Object; (1)
当然，这个gadget chain早在1.2.60就被黑名单禁了，哈哈！还有就是，文章难免某个地方会搞错，希望各位dalao阅读之后可以不吝指教。
新年将至，也祝各位小伙伴能挖到好洞，过一个愉快的肥年，谢谢！