get finalPrice(） {
get finalPrice(）{
discountedPrice(basePrice, discountLevel) {
switch （this.discountLevel）{
 switch (this.discountLevel)
 return this.discountedPrice(basePrice, this.discountLevel);
 const
 switch (discountLevel)
case 2: return basePrice * 0.9;
在简化函数逻辑时，我总是热衷于使用以查询取代临时变量（178），于是
case 1:
然后用改变函数声明（124）手法移除该参数。
因此，我把discountedPrice函数中用到这个参数的地方全都改为直接调
后者可以自己调用discountLevel函数，不会增加任何难度。
到这一步，
' .  = 
return
已经不需要再把discountLevel的计算结果传给discountedPrice
basePrice * 0.95;
0.95;
this.discountLevel);
---
## Page 402
从中受益。
所以“能够可靠地改变决定"就显得尤为重要，这样随着我的理解加深，程序也能
作用域之间的共享太多，
要注意权衡：如果把所有依赖关系都变成参数，会导致参数列表长重复；如果
者。
用，我需要将其替换为函数参数，
个全局变量，或者引用另一个我想要移除的元素。
动机
targetTemperature(aPlan, thermostat.currentTemperature)
targetTemperature(aPlan) 
Parameter)
// rest of function..
11.6
在浏览函数实现时，
需要使用本重构的情况大多源于我想要改变代码的依赖关系-
反向重构：以查询取代参数（324)
以参数取代查询（Replace Query with
又会导致函数间依赖过度。我一向不善于微妙的权衡，
我有时会发现一些令人不快的引用关系，
，从而将处理引用关系的责任转交给函数的调用
。为了解决这些令人不快的引
↑
例如，
-为了让目标
引用一
---
## Page 403
class HeatingPlan...
允许的范围内。
（thermostat）指定温度，但指定的目标温度必须在温度控制计划（heating plan）
·对新函数改名，改回原来函数的名字。
·对原来的函数使用内联函数（115）
·现在函数体代码已经不再执行查询操作（而是使用前一步提炼出的变量），对
·对执行查询操作的代码使用提炼变量（119），
本重构（及其反向重构）的原因。
的问题，
时通常更愿意让接口的消费者更容易使用。归根到底，这是关于程序中责任分配
须弄清如何提供正确的参数值，这会增加函数调用者的复杂度，
我可以提纯程序的某些组成部分，使其更容易测试、更容易理解。
函数，其外再包裹处理I/O和其他可变元素的逻辑代码。借助以参数取代查询，
性的模块能带来很多益处。有一个常见的模式：在负责逻辑处理的模块中只有纯
重获引用透明性。虽然这样就把责任转移给了函数的调用者，但是具有引用透
就失去了引用透明性。
一个函数使用了另一个元素，而后者不具引用透明性，那么包含该元素的函数也
有“引用透明性”（referential transparency），这样的函数理解起来更容易。如果
范例
做法
使用内联变量（123）：
这部分代码使用提炼函数（106）。
我们想象一个简单却又烦人的温度控制系统。
不过以参数取代查询并非只有好处。把查询变成参数以后，
给提炼出的新函数起一个容易搜索的名字，以便稍后改名 
，而这方面的决策既不容易，
，只要把“不具引用透明性的元素"变成参数传入，函数就能
，消除刚才提炼出来的变量。
，也不会一劳永逸-
，将其从函数体中分离出来。
。用户可以从一个温控终端
-这就是我需要非常熟悉
而我在设计接口
就迫使调用者必
---
## Page 404
class HeatingPlan...
参数值"的逻辑还在原地。
class HeatingPlan...
对该对象的依赖。
的thermostat对象。我可以把需要这个对象提供的信息作为参数传入，从而打破
感到很烦恼。不过作为程序员，
调用方..
xxNEwtargetTemperature(selectedTemperature) {
else setoff();
get targetTemperature()
else if 
const
else return selectedTemperature;
else if 
else return thermostat.selectedTemperature;
 else if (thermostat.selectedTemperature  this._max） I
(selectedTemperature
selected
Temper
rature
this
max)
 return this._max;
作为这样一个系统的用户，
我可能会
---
## Page 405
回给调用者。这是为了降低耦合度而付出的代价。
况。
class HeatingPlan..
调用方...
名字，现在只要把前缀去掉就行。
调用方...
class HeatingPlan..
else
elseif
else
 else return selectedTemperature;
else if (
setoff();
setToCool();
setToHeat();
setoff();
setToCool();
，将一个依赖关系从一个模块中移出，就意味着将处理这个依赖关系的责任推
再把新函数改名，
但是，去除对thermostat对象的耦合，并不是本重构带来的唯一收
调用方的代码看起来比重构之前更笨重了，
thermostat.currentTemperature)
(thePlan.targetTemperature(thermostat.selectedTemperature） >
 thermostat.currentTemperature)
现在可以对其使用内联函数（115)
(thePlan.xxNEwtargetTemperature(thermostat.selectedTemperature) >
 thermostat.currentTemperature)
F (thePlan.targetTemperature(thermostat selectedTemperature)<
 thermostat.currentTemperature)
(selectedT
 用回旧函数的名字。得益于之前给它起了一个容易搜索的
this._min) return this._min;
this._max) return this._max;
 这是使用本重构手法的常见情
---
## Page 406
询则是达成这一策略的利器。
性，通常也就足够了。尽量让类保持不可变通常是一个好的策略，以参数取代查
修改对象的内部数据。
同样的结果。如果HeatingPlan的所有函数都具有引用透明性，这个类会更容易测
个HeatingPlan对象上用同样的参数调用targetTemperature函数，我会始终得到
都不会修改它们。（不用费心去查看整个类的代码，相信我就好。）在不可变的
其行为也更容易理解。
。HeatingPlan类本身是不可变的一
 JavaScript的类模型有一个问题：无法强制要求类的不可变性-
 尽管如此，在编写一个类的时候明确说明并鼓励不可变
-字段的值都在构造函数中设置，任何函数
只要在同一
-始终有办法
---
## Page 407
一使用者。若果真如此，我更愿意去除设值函数，清晰地表达“构造之后不应该
读写字段值，包括在构造函数内也是如此。这会导致构造函数成为设值函数的唯
能性往往是非常大的。
让它被修改"的意图会更加清晰，并且可以排除其值被修改的可能性一
该字段声明为不可变）。
望在对象创建之后此字段还有机会被改变，
动机
class Person 
get name()
11.7移除设值函数
set
有两种常见的情况需要讨论。
 如果为某个字段提供了设值函数，
这样一来，
((Remove Setting Method)
一种情况是，
该字段就只能在构造函数中赋值，我“不想
这就暗示这个字段可以被改变。
，那就不要为它提供设值函数（同时将
 有些人喜欢始终通过访问函数来
，如果不希
-这种可
---
## Page 408
class Person...
·测试。
·使用内联函数（115）消去设值函数。如果可能的话，把字段声明为不可变。
·移除所有在构造函数之外对设值函数的调用，改为使用新的构造函数。每次修
·如果构造函数尚无法得到想要设入字段的值，
程中调用。对于这种情况，我也会想办法去除设值函数，更清晰地表达我的意
部分（乃至全部）字段就不应该再被修改。设值函数只应该在起初的对象创建过
值函数的调用，共同完成新对象的构造。创建脚本执行完以后，这个新生对象的
单的构造函数调用。
再更新字段值"的意图。
范例
个多处共享引用的对象），请放弃本重构。
简化后续步骤。
做法
改之后都要测试。
这个值以参数的形式传入构造函数。在构造函数中调用设值函数，对字段设
 另一种情况是,
我有一个很简单的Person类。
如果不能把“调用设值函数"替换为“创建一个新对象”（例如你需要更新一
 如果想移除多个设值函数，可以一次性把它们的值都传入构造函数，这能
 对象是由客户端通过创建脚本构造出来，
所谓“创建脚本”，首先是调用构造函数，
，就使用改变函数声明（124）将
 然后就是一系列设
而不是只有一次简
---
## Page 409
class Person...
class Person...
get name() {return this._name;}
const martin = new Person("1234");
中添加对应的参数。
个设计意图，我希望移除对应id字段的设值函数。
get
get name() {return this._name;}
set
nar
但id字段还得设置初始值，所以我首先用改变函数声明（124）在构造函数
id()
然后调整创建脚本，改为从构造函数设值id字段值。
对象创建之后，
全部修改完成后，就可以用内联函数（115）消去设值函数。
所有创建Person对象的地方都要如此修改，每次修改之后要执行测试。
目前我会这样创建新对象:
{return this._id;}
(arg)
 name字段可能会改变，但id字段不会。为了更清晰地表达这
 arg;}
 arg;}
---
## Page 410
·新建一个工厂函数，让它调用现有的构造函数。
以换成别的方式实现。
以使用。
操作符来调用（在很多语言中是new关键字），
是固定的，因此无法使用比默认名字更清晰的函数名；构造函数需要通过特殊的
就是说，我无法根据环境或参数信息返回子类实例或代理对象；构造函数的名字
一个对象时，
leadEngineer = createEngineer(document.leadEngineer);
leadEngineer = new Employee(document.leadEngineer, 'E');
Method)
做法
动机
with Factory Function)
11.8
工厂函数就不受这些限制。工厂函数的实现内部可以调用构造函数，但也可
曾用名：以工厂函数取代构造函数（Replace Constructor with Factory
很多面向对象语言都有特别的构造函数，
以工厂函数取代构造函数（ReplaceConstructor
，所以在要求普通函数的场合就难
专门用于对象的初始化。
构造函数又常
需要新建
---
## Page 411
顶层作用域...
数
调用方...
调用方...
const leadEngineer = new Employee(document.leadEngineer, 'E');
candidate = new Employee(document.name, document.empType);
class Employee...
get name() {return this._name;}
constructor (name,
H
·尽量缩小构造函数的可见范围。
·每修改一处，就执行测试。
·将调用构造函数的代码改为调用工厂函数。
get
范例
return Employee.legalTypeCodes[this._typeCode];
this._typecode = typecode;
this.
重构的第一步是创建工厂函数，其中把对象创建的责任直接委派给构造函
也有这样的:
使用它的代码有这样的:
又是那个单调乏味的例子：员工薪资系统。我还是以Employee类表示“员
name
name;
typecode）{
---
## Page 412
function createEngineer(name) {
顶层作用域..
调用方...
名里体现。
都是坏味道。所以我更愿意再新建一个工厂函数，把“员工类别"的信息嵌在函数
const leadEngineer = createEmployee(document.leadEngineer, 'E');
调用方...
candidate = createEmployee(document.name, document.empType);
调用方...
function createEmployee(name, typeCode) {
return new Employee(name, 
return
但我不喜欢这里的类型码一
第二处则可以这样使用工厂函数。
第一处的修改很简单。
然后找到构造函数的调用者，并逐一修改它们，令其使用工厂函数。
new Employee(name， typeCode);
一以字符串字面量的形式传入类型码，
一般来说