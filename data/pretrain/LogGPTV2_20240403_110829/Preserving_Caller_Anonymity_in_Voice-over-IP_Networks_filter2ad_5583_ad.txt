to the broadcast initiator q. Now, one can use a similar
statistical inference attack described in Section IV-A to
determine the caller. The key difference in the inference
attack is that the parameter γ reduces the probability that
a random walker starting from node v reaches node u in
v[u]) by a factor γd (in Equation 1). Clearly, a
d hops (prd
small value for γ indicates that the actual caller is close
to node p and thus improves the efﬁcacy of a statistical
inference attack.
2) Multi-Agent Random Walk: The second solution
is to use a multi-agent random walk search protocol.
This solution is very similar to the random walk search
protocol except that the caller src sends out ω > 1
random walkers. As soon as the ﬁrst random walker
reaches the receiver dst, the route is established. Hence,
sending out a large number of random walkers reduces
both the route set up latency and the route latency. Indeed
as ω increases, the route latency asymptotically tends to
the optimal (shortest) route latency.
However, if all the random walkers were sent out by
src at time t = 0, then this algorithm is vulnerable
to triangulation based timing attacks. Let p(rw) denote
the ﬁrst malicious node visited by random walker rw.
The key idea here is that two colluding malicious nodes
p(rw1) and p(rw2) can estimate rwdistsrc[p(rw1)] −
rwdistsrc[p(rw2)] when they receive their ﬁrst random
walk request from two different random walkers rw1 and
rw2. As discussed earlier, if the same random walker rw
visits both p1 and p2 (in that order), then the adversary
does not gain any additional information from p2 because
of the Markovian property of the random walk algo-
rithm. However, the attacker can glean additional infor-
mation, namely, rwdistsrc[p(rw1)]−rwdistsrc[p(rw2)]
from two different random walkers rw1 and rw2. Given
an estimate of rwdistsrc[p(rw1)]−rwdistsrc[p(rw2)], this
attack is very similar to the differential triangulation at-
tack wherein we use random walk distance rwdist in-
stead of the shortest distance dist (see Section III). How-
ever, rwdist has more uncertainty built into it because
of the probabilistic nature of the random walk search
algorithm; thus a triangulation attack on rwdist is likely
to be less effective than a triangulation attack on dist. As
the number of random walkers ω increases, we may have
ω malicious nodes p(rwi) (1 ≤ i ≤ ω) such that random
walker rwi visited malicious node p(rwi) ﬁrst. Hence, a
large ω increases the efﬁcacy of the triangulation based
timing attack.
V. EXPERIMENTAL EVALUATION
In this section we present an implementation sketch
followed by experimental results on various route set up
protocols: broadcast (broadcast), latency perturbation
(lp), random walk (rw), controlled random walk (crw)
and multi-agent random walk (marw). All our experi-
ments were performed on a 1024 node synthetic VoIP
network topology using NS-2. Our experiments are di-
vided into two parts. The ﬁrst part measures the perfor-
mance and QoS properties of these protocols. The QoS
properties are intrinsically related to the parameters used:
noise parameters (µnoise, σ2
noise) for lp, probability of
random walk (γ) for crw, and number of random walkers
(ω) for marw. We determine parameter settings for these
protocols such that 99% of VoIP calls have a one-way
route latency smaller than maxLat = 250ms. The second
part of our evaluation uses these parameter settings to
evaluate the efﬁcacy of these algorithms in defending
against caller identiﬁcation attacks. In the rest of this
section, we assume that the attacker uses differential
triangulation attacks (Section III-C) on broadcast pro-
tocol; the timing analysis on random walk protocols are
as described in Section IV-B.
A. Implementation Sketch
In this section, we brieﬂy describe an implementation
of our algorithms using Phex [4]: an open source Java
59
based implementation of peer-to-peer broadcast based
route set up protocol. We have implemented our algo-
rithms as pluggable modules that can be weaved into
the Phex client code using AspectJ [14]. Our imple-
mentation is completely transparent to the VoIP protocol
that operates on top of the peer-to-peer infrastructure.
Below we sketch our implementation of three proto-
cols: latency perturbation, controlled random walk and
multi-agent random walk. As described in Section II, a
broadcast search protocol has four parts: initSearch,
processSearch, processResult and finSearch. Our
algorithms require changes only to the processSearch
part. This part is implemented in the client using sev-
eral methods of which we are interested in only the
following: receiveRequest, checkDuplicate, and
requestForward.
The protocol header is modiﬁed to include our route
set up protocols. Latency perturbation is implemented by
intercepting an incoming route set up request delaying
it for delay ∼ Gaussµnoise,σ2
noise time units using the
receiveRequest method. The random walk protocol
requires a request to be processed even if its searchId
has been seen in the past; this is accomplished by bypass-
ing the call to duplicateCheck method. Processing
a request and setting up the route is identical for both
the random walk protocols and the broadcast protocol.
Finally, we need to change the request forwarding step
using the requestForward method. In the broadcast
algorithm, the requestForward method on node p re-
turns all the nodes in ngh(p); instead, we return only one
randomly chosen neighbor. When using the controlled
random walk protocol, the requestForward method
changes the protocol header to broadcast with proba-
bility 1 − γ.
B. Caller Identiﬁcation Guards
Performance. The performance of an on-demand route
set up protocol can be characterized by its messaging
cost. Figure 18 shows the average messaging costs of
different route set up protocols (using 100 randomly
chosen pairs of callers and receivers), where N denotes
the number of nodes in the network. The messaging cost
for broadcast and lp is about E (E is the number of
1−γ + E; the
edges in the network); and that for crw is
rw and marw protocols incur a average messaging cost of
N log N. While the number of edges E can be as large
as N (N−1)
, in an Internet-like topology the number of
edges E is roughly βN, where β is a constant between 2
and 3. Fortunately, route set up requests are signiﬁcantly
smaller than the amount of data transferred in the voice
1
2
)
s
m
t
(
y
c
n
e
a
L
e
u
o
R
t
dist=50
dist=100
dist=150
dist=200
 300
 250
 200
 150
 100
 50
 0
 5
 10
Noise
 15
 20
)
s
m
t
(
y
c
n
e
a
L
e
u
o
R
t
 300
 250
 200
 150
 100
 50
dist=50
dist=100
dist=150
dist=200
 0  0.1  0.2  0.3  0.4  0.5  0.6  0.7  0.8  0.9  1
Probability r
)
s
m
t
(
y
c
n
e
a
L
e
u
o
R
t
 16384
 8192
 4096
 2048
 1024
 512
 256
 128
 64
 32
dist=50
dist=100
dist=150
dist=200
 0
 2
 4
 6
 8  10  12  14  16  18  20
Number of Random Walkers
Fig. 15. Latency Perturbation
Fig. 16. Controlled Random Walk
Fig. 17. Multi-Agent Random Walk
N
256
1024
broadcast
563
2560
lp
563
2560
crw: γ = 0.75
crw: γ = 0.9
567
2564
573
2570
rw
945
5089
marw: ω = 10
marw: ω = 20
1001
5213
1036
5287
Fig. 18. Messaging Cost
99% 95% 90%
20
14
0.76
0.83
12
20
15
0.79
18
σnoise
γ
ω
Fig. 19. Optimal Parameter Setting
y
t
i
l
i
b
a
b
o
r
P
k
c
a
t
t
A
0
1
-
p
o
T
 1
 0.1
 0.01
 0.001
 1
’lp’
’crw’
’marw’
’rw’
’broadcast’
 10
 100
 1000
Number of Malicious Nodes
Fig. 20. Top-10 Probability
 1
 0.1
 0.01
y
t
i
l
i
b
a
b
o
r
P
k
-
p
o
T
 0.001
 1
Fig. 21.
nodes
’lp’
’crw’
’marw’
’rw’
’broadcast’
 10
k
 100
Top-k Probability: 10 malicious
session; hence, an increase in messaging cost by a factor
log N
(in the rw and marw protocols) does not cause
discernible changes to VoIP’s aggregate messaging cost.
β
QoS Guarantees. The QoS property of an on-demand
route set up protocol can be characterized by route la-
tency and route set up latency. Figures 15, 16 and 17
show the route latency under various parameter settings.
Note that all routes with latency smaller than 250ms
satisfy the QoS requirement. In the ﬁgures, ’dist’ denotes
the latency of the shortest path between the caller and the
receiver in milliseconds. Route set up latency determines
the time period between a caller initiating a route set
up request and the establishment of a route between the
caller and the receiver. Larger route set up latency causes
an initial delay in session set up but does not affect the
quality of the voice conversation. We observed that the
route set up latency seldom exceeded the route latency
by 20%.
Optimal Parameter Settings. We randomly chose 1024
pairs of callers and receivers. We vary algorithm param-
60
2 . If σnoise = l+u
eters: increase σ2
noise, γ and decrease w until X% of
the pairs have a route latency under maxLat. We use a
binary search strategy to identify the optimal parameter
values. For instance, we determine σ2
noise that satisﬁes
the X% latency constraint as follows. We start with
a range (0, 100), where σnoise = 0 satisﬁes the X%
latency constraint, while σnoise = 100 does not satisfy
the constraint. Given a range (l, u), we experiment with
σnoise set to l+u
satisﬁes the X% la-
2 , u);
tency constraint, then the new range is set to ( l+u
otherwise the new range is set to (l, l+u
2 ). We repeat
this binary search until the size of the range (u − l) is
acceptably small. When the search terminates, we have
the optimal parameter setting σopt
noise = l. Figure 19 sum-
marizes our parameter settings for different percentile
latency constraints. Our goal is to study the resilience
of these algorithms under the constraint that the route
latency is smaller than maxLat. Note that the resilience
to caller identiﬁcation attacks monotonically increases
with σ2
noise and γ and monotonically decreases with ω.
Hence, studying attack resilience under the parameter
2
settings in ﬁgure 19 is sufﬁcient.
Attack Resilience. In this section, we compare the attack
resilience of our route set up protocols. Giving at most
importance to the quality of the voice session, we use
the 99% optimal parameter setting from ﬁgure 19 in this
experiment. We use ω = 1 random walker (rw) and the
broadcast based shortest route set up protocol for base
line comparison. However, one should keep in mind that
the random walk search algorithm (rw) violates the la-
tency constraint. Figure 20 shows the top-10 probability
using different route set up protocols. Figure 21 shows
the top-κ probability with 10 malicious nodes using dif-
ferent route set up protocols. These ﬁgures indicate that
the latency perturbation does not offer much resilience
to caller identiﬁcation attacks. The multi-agent random
walk algorithm performs the best achieving a top-10
probability of 0.075 with 10 malicious nodes. Note that