# Aggregated Machine Learning on Indicators of Compromise in Android Devices

**Authors:**
- John M. San Miguel
- Megan E.M. Kline
- Roger A. Hallman
- Johnny Phan
- Scott M. Slayback
- Christopher M. Weeden
- Jose V. Romero-Mariona

**TECHNICAL DOCUMENT 3390**
**July 2019**

**Distribution Statement A: Approved for public release; distribution is unlimited.**

**NIWC Pacific**
**San Diego, CA 92152-5001**

---

## Administrative Notes
This document was approved through the Release of Scientific and Technical Information (RSTI) process in June 2018 and formally published in the Defense Technical Information Center (DTIC) in July 2019. The content represents work performed under Space and Naval Warfare Systems Center Pacific (SSC Pacific), which changed its name to Naval Information Warfare Center Pacific (NIWC Pacific) in February 2019.

**Administrative Information:**
The work described in this report was performed by the Cyber / Science & Technology Branch (Code 58230) and Advanced Electromagnetics Technology Branch (Code 58230) of the Cybersecurity Engineering Division (Code 58220), Space and Naval Warfare Systems Center Pacific (SSC Pacific), San Diego, CA. The Naval Innovative Science and Engineering (NISE) Program at SSC Pacific funded this Applied Research project.

**Released by:**
- Jose Romero-Mariona, Head, Cyber / Science & Technology
- Under authority of Jara D. Tripiano, Head, Cybersecurity Engineering

This is a work of the United States Government and therefore is not copyrighted. This work may be copied and disseminated without restriction. The citation of trade names and names of manufacturers is not to be construed as official government endorsement or approval of commercial products or services referenced in this report.

MATLAB® is a registered trademark of The MathWorks, Inc.

---

## Executive Summary
The increasing ubiquity of mobile computing technology has led to new trends in many different sectors. "Bring Your Own Device" (BYOD) is one such growing trend in the workplace, allowing enterprise organizations to benefit from the power of distributed computing and communications equipment that their employees have already purchased. However, the integration of a diverse set of mobile devices (e.g., smartphones, tablets) presents new challenges, including new attack vectors for malware. Malware mitigation for mobile technology remains a significant problem. In this paper, we focus on identifying malicious applications and verifying the absence of malicious or vulnerable code in applications that enterprises and their users seek to utilize. Our analysis toolbox includes static analysis and permissions risk scoring, pre-installation vetting techniques designed to ensure that malware is never installed on devices within an enterprise network. However, dynamic code-loading techniques and changing security requirements mean that apps previously verified and installed may no longer meet security standards and may become malicious. To identify these apps and prevent future installation, we propose a crowd-sourced behavioral analysis technique using machine learning to identify malicious activity through anomalies in system calls, network behavior, and power consumption. These techniques are effective for single user devices over time and for individual devices within an enterprise network.

---

## Contents
1. **Introduction**
   - 1.1 Contribution
   - 1.2 Background
     - 1.2.1 Crowd-sourced Behavioral Analysis
     - 1.2.2 Related Work
2. **Mobile Technology in the Context of the Navy**
   - 2.1 Mobile Ecosystem Security Gaps
   - 2.2 How the Navy is Implementing Mobile
     - 2.2.1 How the Navy is Handling Mobile Security
3. **The MAVeRiC Approach to Dynamic Analysis for Mobile (Android) Application Security**
   - 3.1 Feature Sets
     - 3.1.1 Rationale for Collecting Power Consumption
     - 3.1.2 Rationale for Collecting Network Activity
     - 3.1.3 Rationale for Collecting Sequences of System Calls
   - 3.2 Data Analysis
4. **Execution Plan**
   - 4.1 Power Consumption
   - 4.2 Network Activity
   - 4.3 Sequence of System Calls
   - 4.4 Application Set
   - 4.5 Machine Learning Methodology
5. **Conclusion and Future Work**
6. **References**

---

## 1. Introduction
Mobile technology has become ubiquitous in society, leading to new trends in many different sectors. "Bring Your Own Device" (BYOD) is a trend that has entered many workplaces, accommodating employees' comfort and familiarity with their personal devices. The benefits of BYOD policies include cost savings for companies and the creation of a distributed computing and communications network. Estimates in 2011 suggested that nearly 75% of employers allowed employees to connect their personal devices to enterprise networks, and this trend has only increased since then. BYOD can be found in diverse sectors such as business, education, and healthcare. Even government bodies and military organizations are exploring the adoption of BYOD policies, where personal devices may interact with critical cyber-physical systems and environments containing sensitive information.

In light of this, military and other government organizations must determine ways to keep malicious applications on personal devices from infecting corporate networks. To this end, we propose Mobile Application Vetting and Risk-Estimation Capability (MAVeRiC), a program that uses both static and dynamic analysis to vet Android applications. Specifically, MAVeRiC offers the ability to vet Android applications for the absence of malice both pre- and post-installation. Post-installation vetting is accomplished by comparing data from running applications between users on enterprise networks. MAVeRiC’s overall architecture is shown in Figure 1.

### 1.1 Contribution
Our main contribution in this paper is the description of an approach for verifying the absence of malice in Android applications using a conglomeration of machine learning techniques on crowd-sourced behavioral data. We also provide background information on how enterprise networks, particularly those with sensitive information and critical systems, handle the BYOD phenomenon, which informs our approach in MAVeRiC.

### 1.2 Background
Static (or code) analysis provides an analysis of an application without actually executing it. One such analysis technique is to create "feature vectors" that characterize a given application’s characteristic actions (e.g., permissions requests). Benign applications within each category that have similar functions are expected to have similar permissions requests, while malicious ones deviate. The extent of deviation is measured and used for risk assessment. Almost all static analysis for risk assessment of Android applications use permission calls as their main criteria. One weakness of static analysis techniques is their vulnerability to code obfuscation. Dynamic (or behavioral) analysis is not vulnerable to code obfuscation or other evasion techniques that can bypass static analysis because it observes malicious behavior during execution. Our prior work provides a brief survey of static and dynamic analysis tools for Android Applications.

#### 1.2.1 Crowd-sourced Behavioral Analysis
The Crowd-Sourced Behavioral Analysis (CSBA) approach outlined in this paper is part of a larger framework of technology and policy that the MAVeRiC team is developing. MAVeRiC employs both a pre-installation vetting procedure and post-installation dynamic analysis. The pre-installation vetting includes triage, data flow analysis, and permissions risk analysis, which all feed into an overall risk score.

The triage and data flow analysis portion of the vetting process is built around Artemis, which utilizes DroidSafe’s static analysis capabilities, the best-of-breed solution to the DARPA Automated Program Analysis for Cybersecurity (APAC) program provided by Raytheon BBN. Triage does a quick comparison of short sequences of machine language instructions against sequence lists from Android Packages (apks) that are known to be malicious. Data Flow analysis lifts apk binaries to an intermediate representation (IR) called Jimple, and the framework generates a listing of the possible execution paths of the program. This listing can be shown to analysts in the form of a control-flow-graph (CFG) or a class-call-graph (CCG) with the ability to query results for specific data flows. Permissions risk analysis is based on the likelihood of a given application’s category requesting a certain set of permissions. The overall risk score is a quantification of the individual analyses to provide analysts with an aggregate overview of an application’s risk. The goal is to support non-specialized IT personnel in quickly evaluating the risk involved with installing a given app on a DoD device.

The focus of this paper is to describe the Crowd-Sourced Behavioral Analysis (CSBA) approach used to develop MAVeRiC’s post-installation dynamic analysis. MAVeRiC crowd-sources data and uses a machine learning approach to analyze sequences of system calls, network behavior, and power consumption data to identify malicious activities both from a single user’s device over time and within a trusted network of users.

#### 1.2.2 Related Work
Other related efforts have validated the approach MAVeRiC has taken. One paper suggests that there are limitations to utilizing purely static or dynamic approaches to analyzing Android malware. They point out that standard static malware analysis is inadequate and ineffective against techniques that evade or obfuscate such analysis. They propose an approach that detects Android malware by fingerprinting the behavior of system calls and incorporating machine learning to associate malicious behaviors. The approach is validated using a real device and experiments on 20,000 execution traces across 2,000 applications with 97% accuracy. Our approach to analyzing sequences of system calls will closely mirror theirs by being run on an emulator but then validated with real device metrics. Additionally, we incorporate other types of data for analysis, including network activity and power consumption.

Another paper discusses the use of power consumption as a mechanism to create an energy footprint to determine a baseline. Along with the baseline, they propose the use of energy consumption measurement from seven covert channels, including type of intent, file lock, system load, volume settings, Unix socket discovery, file size, and memory load.

Inspired by Burguera et al., we also make use of the crowd-sourcing paradigm. By collecting data from multiple users within a network that is semi-trusted, we have a more robust picture of how apps are used and can better understand typical behaviors. This supports our analytics by allowing quick identification of unusual behaviors. This work expands on that of Burguera et al. by working in a larger test environment with more features. We are also applying the approach to a Navy-relevant environment with Navy security concerns in mind.

The remainder of this paper is laid out as follows: Section 2 provides a high-level overview of how the United States Navy is approaching the incorporation of mobile technologies and adjusting to the realities of BYOD. We detail our approach to MAVeRiC dynamic analysis in Section 3 and our plan for executing the approach in Section 4. Finally, concluding remarks and directions for possible future work are given in Section 5.

---

## 2. Mobile Technology in the Context of the Navy
Mobile devices are transforming the way the Navy operates. By leveraging the computing power, small form factor, and many integrated sensors, the Navy can be more responsive and interactive with its environment. There is great potential in the operational use of distributed computing resources to enhance situational awareness, share data, build a better picture of the operating environment, and decrease out-of-pocket time. The Navy has the option to leverage this computing and communications ability at a substantially reduced cost through the use of BYOD policies.

The mobile ecosystem is constructed around the use of dedicated single-purpose applications (apps), which interface with a device’s onboard sensors and network communications to provide services to the device user. Since each user has different roles and needs, they will need the ability to install different apps. To meet warfighter needs, the Navy can develop its own apps and simultaneously leverage Commercial Off-the-Shelf (COTS) apps. In either case, it is essential to ensure that these apps do not leak sensitive personal or mission-related information.

### 2.1 Mobile Ecosystem Security Gaps
While the Play Store and the associated mobile ecosystem have been active for almost 9 years, there are still significant security gaps. The open nature of the Android platform and the ease of app development and distribution present unique challenges. Malicious apps can exploit vulnerabilities, and the rapid evolution of malware techniques means that traditional security measures often fall short. The Navy must address these gaps to ensure the security and integrity of its mobile ecosystem.

### 2.2 How the Navy is Implementing Mobile
#### 2.2.1 How the Navy is Handling Mobile Security
The Navy is taking a multi-faceted approach to mobile security. This includes:

- **Policy and Guidelines:** Establishing clear policies and guidelines for the use of personal devices in the workplace.
- **Device Management:** Implementing Mobile Device Management (MDM) solutions to manage and secure devices.
- **Application Vetting:** Using tools like MAVeRiC to vet and monitor applications for malicious activity.
- **User Education:** Educating users about the risks and best practices for using mobile devices securely.
- **Network Segmentation:** Segmenting the network to isolate and protect critical systems and data.

By combining these strategies, the Navy aims to balance the benefits of mobile technology with the need for robust security.

---

## 3. The MAVeRiC Approach to Dynamic Analysis for Mobile (Android) Application Security
MAVeRiC’s approach to dynamic analysis involves monitoring known good and bad applications for power consumption, network activity, and system calls. Both supervised and unsupervised machine learning techniques are utilized for detecting Indicators of Compromise (IOCs).

### 3.1 Feature Sets
#### 3.1.1 Rationale for Collecting Power Consumption
Power consumption can be a useful indicator of malicious activity. Malicious apps often consume more power than benign ones due to their continuous, unauthorized activities. By monitoring power consumption, we can detect anomalies that may indicate the presence of malware.

#### 3.1.2 Rationale for Collecting Network Activity
Network activity is another key indicator of malicious behavior. Malicious apps often communicate with command-and-control servers, exfiltrate data, or perform other network-based attacks. By analyzing network traffic, we can identify suspicious patterns and connections.

#### 3.1.3 Rationale for Collecting Sequences of System Calls
System calls are the fundamental interactions between an application and the operating system. Malicious apps often exhibit abnormal system call patterns, such as frequent access to sensitive files or excessive use of network resources. By analyzing sequences of system calls, we can detect deviations from normal behavior and identify potential threats.

### 3.2 Data Analysis
The collected data is analyzed using a combination of statistical and machine learning techniques. This includes feature extraction, dimensionality reduction, and model training. The goal is to build a robust model that can accurately distinguish between benign and malicious behavior.

---

## 4. Execution Plan
### 4.1 Power Consumption
We will collect power consumption data from a variety of Android devices running different applications. This data will be used to establish a baseline for normal power usage and to detect anomalies that may indicate malicious activity.

### 4.2 Network Activity
Network activity will be monitored using packet capture tools. We will analyze the data for suspicious patterns, such as unexpected connections, large data transfers, and communication with known malicious IP addresses.

### 4.3 Sequence of System Calls
Sequences of system calls will be collected and analyzed to identify abnormal behavior. This will involve creating a comprehensive list of system calls and their frequencies, and then using machine learning algorithms to detect deviations from the norm.

### 4.4 Application Set
We will use a diverse set of applications, including both benign and malicious ones, to train and test our models. This will ensure that our approach is robust and can generalize well to new, unseen applications.

### 4.5 Machine Learning Methodology
Our machine learning methodology will involve the following steps:

- **Data Preprocessing:** Cleaning and normalizing the collected data.
- **Feature Extraction:** Identifying and extracting relevant features from the data.
- **Model Selection:** Choosing appropriate machine learning algorithms, such as decision trees, random forests, and neural networks.
- **Training and Validation:** Training the models on a labeled dataset and validating their performance using cross-validation.
- **Evaluation:** Evaluating the models using metrics such as accuracy, precision, recall, and F1-score.

---

## 5. Conclusion and Future Work
In conclusion, the MAVeRiC approach to dynamic analysis for mobile (Android) application security leverages crowd-sourced behavioral data and machine learning to detect malicious activities. By monitoring power consumption, network activity, and sequences of system calls, we can identify and mitigate threats to enterprise networks. Future work will focus on refining the machine learning models, expanding the dataset, and integrating the approach into existing security frameworks.

---

## References
[1] Android Robot logo is licensed under the terms of the Creative Commons Attribution 2.5 license.
[2] https://www.darpa.mil/program/automated-program-analysis-for-cybersecurity
[3] Raytheon is a registered trademark of the Raytheon Company.
[4] Burguera et al., "Crowd-Sourced Behavioral Analysis."
[5] Paper on limitations of static and dynamic analysis for Android malware.
[6] Paper on using power consumption for malware detection.
[7] Military organizations and BYOD.
[8] Government bodies and BYOD.
[9] BYOD in the workplace.
[10] BYOD in business.
[11] Prior work on static and dynamic analysis tools for Android applications.
[12] Artemis tool for static analysis.
[13] DroidSafe’s static analysis capabilities.
[14] DARPA APAC program.
[15] Raytheon BBN.
[16] Jimple intermediate representation.
[17] Control-flow-graph (CFG) and class-call-graph (CCG).
[18] BYOD in healthcare.
[19] BYOD in education.
[20] MATLAB® is a registered trademark of The MathWorks, Inc.
[21] Critical cyber-physical systems.
[22] BYOD in education.
[23] BYOD in government.
[24] Mobile Device Management (MDM) solutions.
[25] User education for mobile security.
[26] Network segmentation.
[27] Jimple intermediate representation.
[28] BYOD adoption estimates.
[29] Weaknesses of static analysis techniques.