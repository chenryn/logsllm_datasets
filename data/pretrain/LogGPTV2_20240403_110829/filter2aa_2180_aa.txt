Exploiting Windows 
Exploit Mitigation 
for ROP Exploits
Omer Yair
DEF CON 27
• Omer Yair
• TDAD Endpoint Team Lead at Symantec
• Speaker at DerbyCon, Virus Bulletin, Zero Nights
• Photography BFA Graduate
• Exhibited at multiple exhibitions
• Photo book in the makings
• @yair_omer
Who Am I?
Vote Sloth by Grant Shepley
“A concept is a brick. It can be used 
to build a courthouse of reason. Or 
it can be thrown through the 
window.”
Gilles Deleuze
Return Oriented Programming 101
Windows Exploit Mitigations
and how to abuse them
ROP Mitigations
and how to bypass them
Demo
Agenda
Return Oriented Programming - Timeline
Smashing 
The Stack 
For Fun And 
Profit
1996
Smashing the Stack 
For Fun And Profit
Aleph One (Elias Levy)
1996
Street fight against British soldiers, Northern Ireland.
Bruno Barbey, 1971
FuncFirst:
...
0x7F200100
push 0x22002200
0x7F200101 
push 0x00110011
0x7F200102 
call FuncSecond
0x7F200107 
...
FuncSecond:
0x7F204C00 
sub esp, 0x8
0x7F204C03 
...
0x7F204D19 
add esp, 0x8
0x7F204D1C
ret
Stack Semantics (x86)
0x00802000
0x00804000
0x00000000
0x00000000
0x00000000
0x00000000
0x00000000
0x00000000
0x7F400123
0x00C0FFEE
0x00000000
0x00000000
0x00000000
FuncFirst:
...
0x7F200100
push 0x22002200
0x7F200101 
push 0x00110011
0x7F200102 
call FuncSecond
0x7F200107 
...
FuncSecond:
0x7F204C00 
sub esp, 0x8
0x7F204C03 
...
0x7F204D19 
add esp, 0x8
0x7F204D1C
ret
Stack Semantics (x86)
0x00802000
0x00804000
0x00000000
0x00000000
0x00000000
0x00000000
0x00000000
0x22002200
0x7F400123
0x00C0FFEE
0x00000000
0x00000000
0x00000000
FuncFirst:
...
0x7F200100
push 0x22002200
0x7F200101 
push 0x00110011
0x7F200102 
call FuncSecond
0x7F200107 
...
FuncSecond:
0x7F204C00 
sub esp, 0x8
0x7F204C03 
...
0x7F204D19 
add esp, 0x8
0x7F204D1C
ret
Stack Semantics (x86)
0x00802000
0x00804000
0x00000000
0x00000000
0x00000000
0x00000000
0x00110011
0x22002200
0x7F400123
0x00C0FFEE
0x00000000
0x00000000
0x00000000
FuncFirst:
...
0x7F200100
push 0x22002200
0x7F200101 
push 0x00110011
0x7F200102 
call FuncSecond
0x7F200107
...
FuncSecond:
0x7F204C00 
sub esp, 0x8
0x7F204C03 
...
0x7F204D19 
add esp, 0x8
0x7F204D1C
ret
Stack Semantics (x86)
0x00802000
0x00804000
0x00000000
0x00000000
0x00000000
0x00110011
0x22002200
0x7F400123
0x00C0FFEE
0x00000000
0x00000000
0x00000000
0x7F200107
FuncFirst:
...
0x7F200100
push 0x22002200
0x7F200101 
push 0x00110011
0x7F200102 
call FuncSecond
0x7F200107 
...
FuncSecond:
0x7F204C00 
sub esp, 0x8
0x7F204C03 
...
0x7F204D19 
add esp, 0x8
0x7F204D1C
ret
Stack Semantics (x86)
0x00802000
0x00804000
0x00000000
0x00000000
0x00000000
0x7F200107
0x00110011
0x22002200
0x7F400123
0x00C0FFEE
0x00000000
0x00000000
0x00000000
FuncFirst:
...
0x7F200100
push 0x22002200
0x7F200101 
push 0x00110011
0x7F200102 
call FuncSecond
0x7F200107 
...
FuncSecond:
0x7F204C00 
sub esp, 0x8
0x7F204C03 
...
0x7F204D19 
add esp, 0x8
0x7F204D1C
ret
Stack Semantics (x86)
0x00802000
0x00804000
0x00000000
0x00000000
0x00000000
0x7F200107
0x00110011
0x22002200
0x7F400123
0x00C0FFEE
0x00000000
0x00000000
0x00000000
FuncFirst:
...
0x7F200100
push 0x22002200
0x7F200101 
push 0x00110011
0x7F200102 
call FuncSecond
0x7F200107 
...
FuncSecond:
0x7F204C00 
sub esp, 0x8
0x7F204C03 
...
0x7F204D19 
add esp, 0x8
0x7F204D1C
ret
Stack Semantics (x86)
0x00802000
0x00804000
0x00000000
0x00000000
0x00000000
0x00110011
0x22002200
0x7F400123
0x00C0FFEE
0x00000000
0x00000000
0x00000000
0x7F200107
FuncFirst:
...
0x7F200100
push 0x22002200
0x7F200101 
push 0x00110011
0x7F200102 
call FuncSecond
0x7F200107 
...
FuncSecond:
0x7F204C00 
sub esp, 0x8
0x7F204C03 
...
0x7F204D19 
add esp, 0x8
0x7F204D1C
ret
Stack Semantics (x86)
0x00802000
0x00804000
0x00000000
0x00000000
0x00000000
0x00000000
0x00110011
0x22002200
0x7F400123
0x00C0FFEE
0x00000000
0x00000000
0x00000000
int QueryUser()
{
char buffer[512];
gets(buffer);
...
return 1;
}
Stack Overflow
0x00803E00
0x00804000
0x00000000
0x00000000
0x00000000
0x00000000
0x00000000
0x00000000
0x00000000
0x00C0FFEE
0x00000000
0x00000000
0x00000000
int QueryUser()
{
char buffer[512];
gets(buffer);
...
return 1;
}
Stack Overflow
0x00803E00
0x00804000
0x00000000
0x00000000
0x00000000
0x00000000
0x00000000
0x00000000
0x00000000
0x00C0FFEE
0x00000000
0x00000000
0x00000000
int QueryUser()
{
char buffer[512];
gets(buffer);
...
return 1;
}
Stack Overflow
0x00803E00
0x00804000
0x00000000
0x00000000
0x00000000
0x00000000
0x00000000
0x00000000
0x00000000
0x00C0FFEE
0x00000000
0x00000000
0x00000000
int QueryUser()
{
char buffer[512];
gets(buffer);
...
return 1;
}
Stack Overflow
0x00803E00
0x00804000
0x00000000
0x00000000
0x00000000
0x00000000
0x00000000
0x00000000
0x00000000
0x00C0FFEE
0x00000000
0x00000000
0x00000000
int QueryUser()
{
char buffer[512];
gets(buffer);
...
return 1;
}
Stack Overflow
0x00803E00
0x00804000
0x00000000
0x00000000
0x00000000
0x00000000
0x00000000
0x00000000
0x00000000
0x00C0FFEE
0x7279614f
0x2044656e
0x50617a20
int QueryUser()
{
char buffer[512];
gets(buffer);
...
return 1;
}
Stack Overflow
0x00803E00
0x00804000
0x00000000
0x00000000
0x00000000
0x00000000
0x00C0FFEE
0x7279614f
0x2044656e
0x50617a20
0x7279614f
0x2044656e
0x50617a20
int QueryUser()
{
char buffer[512];
gets(buffer);
...
return 1;
}
Stack Overflow
0x00803E00
0x00804000
0x00000000
0x00C0FFEE
0x7279614f
0x2044656e
0x50617a20
0x7279614f
0x2044656e
0x50617a20
0x7279614f
0x2044656e
0x50617a20
int QueryUser()
{
char buffer[512];
gets(buffer);
...
return 1;
}
Stack Overflow
0x00803E00
0x00804000
0x7279614f
0x2044656e
0x50617a20
0x7279614f
0x2044656e
0x50617a20
0x7279614f
0x2044656e
0x50617a20
0x2044656e
0x50617a20
int QueryUser()
{
char buffer[512];
gets(buffer);
...
return 1;
}
Stack Overflow
0x00803E00
0x00804000
0x7279614f
0x2044656e
0x50617a20
0x7279614f
0x2044656e
0x50617a20
0x7279614f
0x2044656e
0x50617a20
0x2044656e
0x50617a20
int QueryUser()
{
char buffer[512];
gets(buffer);
...
return 1;
}
Stack Overflow
0x00803E00
0x00804000
call execv
nop
nop
nop
nop
nop
nop
push ‘/sh’
push ‘/bin’
push esp
0x00803E00
int QueryUser()
{
char buffer[512];
gets(buffer);
...
return 1;
}
Stack Overflow
0x00803E00
0x00804000
call execv
nop
nop
nop
nop
nop
nop
0x00803E00
push ‘/sh’
push ‘/bin’
push esp
int QueryUser()
{
char buffer[512];
gets(buffer);
...
return 1;
}
Stack Overflow
0x00803E00
0x00804000
call execv
nop
nop
nop
nop
nop
nop
0x00803E00
push ‘/sh’
push ‘/bin’
push esp
Return Oriented Programming - Timeline
Morris 
Worm
Smashing The 
Stack For Fun 
And Profit
1988
1996
• Developed by Robert T. Morris
• Exploited stack overflow on fingerd process
• Affected 10% of internet (estimation)
• Prompted the formation of the CERT 
Coordination Center
Morris Worm, 1988
New York City (dog legs)
Elliott Erwitt, 1974
• Author Skape (Matt Miller)
• Affected IE 5, 5.5, 6.0
CVE-2003-0344
Sir Winston Churchill
Yousuf Karsh, 1941
CVE-2003-0344
0x00803E00
0x00804000
_/_/_/_/_/_/
abcd
efgh
0x77d1f92f
push ‘calc’
push ‘.exe’
push esp
call WinExec
_/_/_/_/_/_/
_/_/_/_/_/_/
_/_/_/_/_/_/
CVE-2003-0344
0x00803E00
0x00804000
_/_/_/_/_/_/
abcd
efgh
0x77d1f92f
push ‘calc’
push ‘.exe’
push esp
call WinExec
_/_/_/_/_/_/
_/_/_/_/_/_/
_/_/_/_/_/_/
CVE-2003-0344
0x00803E00
[Ret Address]
0x00804000
_/_/_/_/_/_/
abcd
efgh
0x77d1f92f
push ‘calc’
push ‘.exe’
push esp
call WinExec
_/_/_/_/_/_/
_/_/_/_/_/_/
_/_/_/_/_/_/
CVE-2003-0344
0x00803E00
[Ret Address]
[Shellcode]
0x00804000
_/_/_/_/_/_/
abcd
efgh
0x77d1f92f
push ‘calc’
push ‘.exe’
push esp
call WinExec
_/_/_/_/_/_/
_/_/_/_/_/_/
_/_/_/_/_/_/
CVE-2003-0344
0x00803E00
[Ret Address]
0x00804000
_/_/_/_/_/_/
abcd
efgh