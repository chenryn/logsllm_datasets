# Exploiting Windows: Exploit Mitigation for ROP Exploits
## Omer Yair
### DEF CON 27

**About the Speaker:**
- **Omer Yair**
  - Team Lead, TDAD Endpoint at Symantec
  - Speaker at DerbyCon, Virus Bulletin, Zero Nights
  - BFA in Photography
  - Exhibited in multiple exhibitions
  - Currently working on a photo book
  - Twitter: @yair_omer

**Quote:**
- "A concept is a brick. It can be used to build a courthouse of reason. Or it can be thrown through the window." â€” Gilles Deleuze

**Agenda:**
1. Introduction to Return-Oriented Programming (ROP)
2. Timeline of ROP and related exploits
3. Windows exploit mitigations and how to abuse them
4. ROP mitigations and bypass techniques
5. Demonstration

## Return-Oriented Programming (ROP) 101

### Timeline of ROP and Related Exploits

- **1988: Morris Worm**
  - Developed by Robert T. Morris
  - Exploited stack overflow in the `fingerd` process
  - Affected approximately 10% of the internet
  - Led to the formation of the CERT Coordination Center

- **1996: Smashing the Stack for Fun and Profit**
  - Authored by Aleph One (Elias Levy)
  - Detailed the mechanics of stack-based buffer overflows

### Stack Semantics (x86)

Consider the following example:

```assembly
FuncFirst:
...
0x7F200100   push 0x22002200
0x7F200101   push 0x00110011
0x7F200102   call FuncSecond
0x7F200107   ...

FuncSecond:
0x7F204C00   sub esp, 0x8
0x7F204C03   ...
0x7F204D19   add esp, 0x8
0x7F204D1C   ret
```

Stack before `call FuncSecond`:
```
0x00802000
0x00804000
0x00000000
0x00000000
0x00000000
0x00000000
0x00000000
0x00000000
0x7F400123
0x00C0FFEE
0x00000000
0x00000000
0x00000000
```

Stack after `push 0x22002200`:
```
0x00802000
0x00804000
0x00000000
0x00000000
0x00000000
0x00000000
0x00000000
0x22002200
0x7F400123
0x00C0FFEE
0x00000000
0x00000000
0x00000000
```

Stack after `push 0x00110011`:
```
0x00802000
0x00804000
0x00000000
0x00000000
0x00000000
0x00000000
0x00110011
0x22002200
0x7F400123
0x00C0FFEE
0x00000000
0x00000000
0x00000000
```

Stack after `call FuncSecond`:
```
0x00802000
0x00804000
0x00000000
0x00000000
0x00000000
0x00110011
0x22002200
0x7F400123
0x00C0FFEE
0x00000000
0x00000000
0x00000000
0x7F200107
```

### Stack Overflow Example

Consider the following vulnerable function:

```c
int QueryUser() {
    char buffer[512];
    gets(buffer);
    ...
    return 1;
}
```

Initial stack:
```
0x00803E00
0x00804000
0x00000000
0x00000000
0x00000000
0x00000000
0x00000000
0x00000000
0x00000000
0x00C0FFEE
0x00000000
0x00000000
0x00000000
```

After overflowing the buffer with shellcode:
```
0x00803E00
0x00804000
0x7279614f
0x2044656e
0x50617a20
0x7279614f
0x2044656e
0x50617a20
0x7279614f
0x2044656e
0x50617a20
0x2044656e
0x50617a20
```

Final stack with overwritten return address:
```
0x00803E00
0x00804000
call execv
nop
nop
nop
nop
nop
nop
0x00803E00
push '/sh'
push '/bin'
push esp
```

## Windows Exploit Mitigations and How to Abuse Them

### Common Mitigations

1. **Data Execution Prevention (DEP)**
2 - **Address Space Layout Randomization (ASLR)**
3. **Stack Canaries**
4. **Control Flow Guard (CFG)**

### Bypassing DEP and ASLR

- **Return-Oriented Programming (ROP)**
  - Use existing code snippets (gadgets) to construct the payload.
  - Overwrite the return address with the address of a gadget.

### Example: CVE-2003-0344

Vulnerable function:
```c
int QueryUser() {
    char buffer[512];
    gets(buffer);
    ...
    return 1;
}
```

Exploit:
```assembly
0x00803E00
[Ret Address]
[Shellcode]
0x00804000
_/_/_/_/_/_/
abcd
efgh
0x77d1f92f
push 'calc'
push '.exe'
push esp
call WinExec
_/_/_/_/_/_/
_/_/_/_/_/_/
_/_/_/_/_/_/
```

### Conclusion

- **Understanding ROP and its history** is crucial for both attackers and defenders.
- **Windows exploit mitigations** have evolved, but so have the techniques to bypass them.
- **Practical demonstration** will follow to illustrate these concepts in action.

Thank you for your attention!