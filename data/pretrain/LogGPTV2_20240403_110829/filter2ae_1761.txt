# 初探 Windows Fuzzing 神器——Winafl

#### 译文声明
本文为翻译文章，原文来源于同程安全应急响应中心。
原文地址：[https://mp.weixin.qq.com/s?__biz=MzI4MzI4MDg1NA==&mid=2247483695&idx=1&sn=1de5db39d6986560d80ab604aae88467&scene=1&srcid=0809LR0yEgkq6U2DLBdpRKAT#wechat_redirect](https://mp.weixin.qq.com/s?__biz=MzI4MzI4MDg1NA==&mid=2247483695&idx=1&sn=1de5db39d6986560d80ab604aae88467&scene=1&srcid=0809LR0yEgkq6U2DLBdpRKAT#wechat_redirect)
译文仅供参考，具体内容以原文为准。
**作者: k0shl**
**转载自: 同程安全应急响应中心**

这是一篇由乌云二进制漏洞挖掘白帽子 k0shl 撰写的客座文章。实际上，这篇文章在上个月的17号就已经完成，但一直等到今天才发布，作为对二进制方向白帽子们的七夕礼物。

### 0x01 什么是 Winafl？

AFL-Fuzz 是一款在 Linux 平台上用于 fuzz 文件格式和协议等二进制漏洞的强大工具，而 Winafl 则是 AFL-Fuzz 的 Windows 版本。最近我对 Winafl 进行了一些初步研究。由于之前主要依赖手工挖掘二进制漏洞，我越来越体会到自动化工具的强大，并且这些经验也为我今后开发自己的 fuzz 工具提供了重要参考。

**Winafl 是什么？**

Winafl 是一种在 Windows 平台上用于挖掘文件格式和协议漏洞的半自动化工具。之所以说是半自动化，是因为它并不提供全面的样本库。虽然 Winafl 提供了一些测试样本，但在实际 fuzz 过程中，许多文件仍需手动构造。此外，与全自动 fuzz 相比，Winafl 需要用户手动定位需要 fuzz 的函数地址偏移，从而确定具体要进行 fuzz 的函数位置。

那么，Winafl 的优势在哪里呢？我认为其核心在于通过代码扩展来确定输入输出，以此判断是否存在漏洞。这个原理类似于 PIN 插件（微软提供的一种汇编指令扩展插件）。简单来说，就是在函数进入和返回时插入一些额外指令，检查程序输入输出是否符合预期，从而更精准地定位崩溃位置并降低误报率。

**如何开始学习 fuzz？**

对于刚开始接触二进制漏洞挖掘的人来说，可能会感到迷茫。随着软件安全性不断提高，fuzz 的难度也在增加。为了挖掘高级漏洞，需要掌握一些基础知识。以下是我的一些心得，希望能帮助大家更好地利用 Winafl 进行 fuzz。

在入门阶段，最重要的是关注程序中的脆弱点，如 strcpy、memcpy、sprintf、read 等函数，以及指针传递和赋值操作。例如，通过 IDA 分析一个软件，发现一处有趣的 strcpy 调用，我们可以在该位置下断点，然后通过 Windbg 或 OllyDBG 附加调试，观察程序执行情况，判断样本是否会导致程序崩溃或存在可利用的漏洞。

### 0x02 使用 Winafl 前的准备

我们将使用 VUPlayer 软件来演示如何利用 Winafl 进行简单的漏洞挖掘。尽管这一过程可能耗时较长，但可以通过指令扩展提高效率。首先，我们需要找到一个潜在的脆弱点。通过 IDA 分析 VUPlayer 的函数结构，我们发现了一个调用 lstrcpyA 函数的位置，其入口偏移为 0x532a0。

**DynamoRIO 是什么？**

在使用 Winafl 进行 fuzz 之前，必须了解 DynamoRIO。这是一个实现指令动态插桩的核心工具，Winafl 在很大程度上依赖于 DynamoRIO 来实现其功能。关于 DynamoRIO 的详细信息可以参考网上资源。

**使用 DynamoRIO 测试过程**

我们可以使用 DynamoRIO 的 drrun.exe 工具来进行测试。命令如下：
```bash
path_to_DynamoRIO\bin64\drrun.exe -c winafl.dll -debug -target_module VUPlayer.exe -target_offset 0x532a0 -fuzz_iterations 10 -- VUPlayer.exe
```
这里需要解释一下参数：`-D` 用于与 AFL-Fuzz 链接，主要是调用 `winafl.dll`；`-target_module` 是测试目标模块；`-target_offset` 是偏移量。运行后，如果程序崩溃，会在目标目录生成一个日志文件，记录加载的模块和偏移函数位置的变化情况。

### 0x03 Winafl fuzz 与核心源码浅析

**使用 Winafl 进行 fuzz**

了解了 DynamoRIO 和 Winafl 的基本工作流程后，我们可以使用 Winafl 进行漏洞挖掘。Winafl 需要多个样本来对目标程序进行测试。以下是使用 Winafl 进行 fuzz 的命令示例：
```bash
C:\Program Files\VUPlayer>afl-fuzz.exe -i in -o out -D C:\Users\Administrator\Desktop\DynamoRIO-Windows-6.1.1-3\DynamoRIO-Windows-6.1.1-3\bin32 -t 20000 -- -fuzz_iterations 5000 -target_module VUPlayer.exe -target_offset 0x532a0 -nargs 2 -- VUPlayer.exe @@
```
参数说明：`-i` 用于记录输入样本；`-o` 用于保存输出数据；`-D` 是 DynamoRIO 的路径；`-t` 是样本测试延时；`-target_offset` 是要测试函数的偏移。

**结果分析**

当 Winafl 检测到崩溃场景时，会在 `-o` 设定的文件夹下生成一系列文件，记录指令扩展中的各种信息。`Crashes` 文件夹记录了崩溃样本，`queue` 记录了指令扩展中的各种信息，`cur_input` 是当前输入信息。通过分析这些文件，可以清晰地了解函数输入输出的情况。

**源代码中的关键点**

在 Winafl 的源代码中，有很多部分都体现了 DynamoRIO 的重要性。例如，定义 DynamoRIO 路径以便后续调用其中的工具，构造指令插桩的关键语句，以及记录进程崩溃信息的部分。

作为一名初学者，我在文章中可能有许多描述不当或遗漏之处，希望各位大牛多多指正，共同交流进步。这次我只是对 Winafl 进行了一些粗浅分析，源码有上万行，很多细节尚未深入研究。如果有兴趣一起探讨的朋友，欢迎联系我，共同学习进步。希望未来能带来更多关于 Winafl 的深入研究分享。谢谢大家！