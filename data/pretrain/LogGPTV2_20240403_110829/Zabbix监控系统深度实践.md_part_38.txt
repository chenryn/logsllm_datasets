clock=%d and ns=%d"
Zabbix监控系统深度实践
结合出问题SQL的“select value”,可以判断：传入DBget_history的function参数的值是“ZBX_
可以看见，如果传递给DBget_history的参数中，“clock_from”的值为“0"，那么就不会有
switch（function)
再看db.c中的一段代码。
else
case ZBX_DB_GET_HIST_DELTA:
offset += zbx_snprintf（sql + offset,
default:
caSe ZBX_DB_GET_HIST_VALUE:
case
CaSe ZBX_DB_GET_HIST_SUM:
case ZBX_DB_GET_HIST_MAX:
CaSe ZBX_DB_GET_HIST_AVG:
CaSeZBX_DB_GET_HIST_MIN:
assert（o）;
offset = zbx_snprintf (sql, sizeof(sql), "select %s", field_name) ;
break;
field_name）;
break;
offset = zbx_snprintf(sql, sizeof(sql), "select max(%s)-min(%s)",
break;
break;
offset = zbx_snprintf (sql, sizeof(sql), "select %s(*)", func
ZBX_DB_GET_HIST_COUNT:
offset = zbx_snprintf(sql, sizeof(sql), "select %s(%s)", func
,ts->sec,ts->ns）;
"sizeof（sql)-offset,
---
## Page 326
NULL，NULL，O）；
表示为网络出口总流量。那我们的 SQL会不会是这里出现的呢？答案是“否”，因为checks
Item。比如监控了5个IDC的网络出口流量，那么就需要一个Item将这5个Item的值聚合起来，
即为 Item 的一种计算方式。aggregate类型的Items，是把多个 Items 的结果聚合起来的一个
的地方，evalfunction 和expression是一个功能，所以它们是一组。
估”），function 和 Trigger 有关。看这4个文件，db.c已经排除了，因为这是定义 DBget_history
能在同一个事务中执行的 SQL,却有“limit”,说明,执行出问题SQL的时候，"last_n”的值为“0"
libs/zbxdb/db.c中，发现zbx_db_select_n就是拼接 limit的地方，代码如下。
仔细看看DBget_history这个方法，找到了这样一条代码：
while（NULL !=（row= DBfetch（result）))
可以把db.c先排除,evalfunc.c是计算function的地方（“eval”是“evaluate”的意思，译为“评
zabbix_server/poller/checks_aggregate.c
接着看，是什么地方调用了 DBget_history。
#elif defined（HAVE_MYSQL）
看看 DBselectN 的代码，发现它是调用了“rc= zbx_db_select_n（query, n）;”，果然，在
libs/zbxserver/expression.c
libs/zbxserver/evalfunc.c
$ grep -rl'DBget_history'
result = DBselectN(sql, last_n -h_num);
libs/zbxdbhigh/db.c
大家不要忽略了，出问题的 SQL中,有一个限制，即“limit 1",这是什么地方拼接的 SQL呢？
h_value = DBget_history(itemid, value_type, item_func, clock_from, 0,
value_type=（unsigned char）atoi（row[1]）;
第21章典型案例分析
·311°
---
## Page 327
·312°
NULL, NULL, arg1 ) ;
now,NULL, NULL,0);
寻找这样的调用，结果如下。
DBget_history 的时候，“clock_from”为“0”，而“clock_to”不为“o"，现在要在evalfunc.c中
int function, int clock_from, int clock_to,
比如类似“DBget_item_value”的方法，并没有实际操作。
以先从expression开始看。expression.c的代码的主要工作就是在 DBget_history上又封装了一层，
aggregate 的操作，但是事务中没有这样的 SQL，所以排除 checks_aggregate.c 的嫌疑。
代码。
将多个Item 的 history值查出来，然后汇总出 aggregate item的值。笔者把这段代码翻译成如下
Zabbix监控系统深度实践
( 1） DBget_history ( item->itemid, item->value_type, ZBX_DB_GET_HIST_COUNT,now - argl,
看来嫌疑已经锁定在expression.c和evalfunc.c中了，由于function是属于expression 的，所
char
在看evalufunc.c之前，先回顾下DBget_history的定义。
所以，如果出问题的SQL是在这里出现的，那么在事务的最后，
update_history(aggregate_value)
aggreagate_value+=value
if value != NULL:
value =DBget_history()
while:
其中，有一个 while 循环，再结合 agregate item 的特性，可以判断，这里在做的事情，是
DBfree_history(h_value) ;
if (NULL !=h_value[0])
evaluate_one (item, &value, &num, grp_func, h_value[O], value_type);
**DBget_history(zbx_uint64_t itemid,unsigned char value_type
，一定会有一步是更新
---
## Page 328
出的参数。
FLAG_VALUES"，否则，会被置为“ZBX_FLAG_SEC"。而 argl、args2就是function 中解析
function_parameter_unit”方法就是做这个事情的，当以“#”开头时，flag会被置为“ZBX
“#”开头，表示时间。在拼接 SQL 的时候，这两个是要区别对待的。在evalfunc.c 中，“get
所以在配置trigger 的时候，使用了“#0”这种写法。
function的参数是“ZBX_DB_GET_HIST_VALUE"，那么就很容易找代码了。
由于 DBget_history 的“last_n”参数是“0"，所以 argl就是“0"。再结合之前已经判断出，
to=now",
DB_GET_HIST_SUM"。
now,NULL,NULL,O) ;
now, NULL, NULL, 0) ;
那么fag就肯定是“ZBX_FLAG_VALUES”。并且其中argl=0。只有这样，才会出现这种问题。
我们再反过来理一下思路，function 参数为“#0”时候，代码中逻辑是怎样的。
在设置function中的时间范围时有两种方式：一种以“#”开头，表示次数的：一种不以
DBget_history(item->itemid,
（3） field_name=NULL
(2） last_n= 0，即 argl=0 
(1） clock_from=0
到此为止，我们整理下，出问题的 SQL 调用 DBget_history 的参数如下：
（1)传给 DBget_history 的方法不同，即上面代码中的“ZBX_DB_GET_HIST_VALUE"和"ZBX_
( 4） DBget_history ( item->itemid, item->value_type, ZBX_DB_GET_HIST_SUM,now - arg1,
从看到的代码来看，有可能出现问题的SQL只可能是：
还有一些代码类似就不一一贴出来了。不同在于以下几点。
item->value_type, ZBX_DB_GET_HIST_VALUE,O,
第21章典型案例分析
·313°
---
## Page 329
314°
zbxdbhigh/db.c中已经没有DBget_history方法了，使用最新版本 Zabbix 2.2的读者不用担心。
从代码来看，如果用的是“#1”，那么last_n就不等于0，从而就会加上clock>×××的逻辑，
hisotry where itemid= x × x”
value”开头，加上从history 取数据（history_unit类似），那么 SQL就是“select value fom
代码如下。
Zabbix监控系统深度实践
（2）因为last_n=0，clock_from=0，clock_to=now，所以会加上clock%d", clock_to - steps[retry] ) ;
if（4!= retry)
if（o !=retry)
const int
offset += zbx_snprintf (sql + offset, sizeof(sql)- offset, " and
clock_to -= steps[retry-1];
果然如此，
Steps[] ={SEC_PER_HOUR, SEC_PER_DAY, SEC_PER_WEEK, SEC_PER _MONTH);
Expression
Name
，如图24-4所示。
{HOST.NAME}#IFNAME}NetworkTraffic(in）mo]
图24-4
---
## Page 330
题，而不是一小时前。这样就能沿着正确的方向解决问题了
节点是否有不同；再纵向比较—这个节点现在和之前比较，有什么不同，为什么现在要出问
我一个集群中的一台节点突然出问题了。这时，我们先横向比较—这个节点和集群中的其他
起来很简单，但真的能把这个思想融会贯通、在处理问题中真正使用的，不多。我举个例子
于变化引起的。可能是外部环境，可能是服务器本身。从“变”去分析系统异常的原因。
分析出现这个问题的可能。
先Google,如果有答案最好，如果没有。那么直接从源代码入手，grep 找到抛出这个错误的代码，
经验，先要从问题本身收集详细的数据，最重要的就是日志。如果要报错日志，是最简单的，
是之前没有接触过的，并且国内做的人还不多。对于碰到的问题如何去研究呢？我分享下我的
些自己能力以内的问题，完全可以调动自己的潜力去解决，这样才能带来技术上的不断进步。
者说懒得去刨根问底解决这个问题，而是希望去通过“问”的方式，快速获取答案。我觉得一
21.4解决问题的思路
Zabbix2.2中已经用不到了，但排查的思路还是值得分享的。
，而出问题的原因却找不到。针对这种诡异的问题，只要记住一点，所有系统的异常都是由
从我自己的经验来说，之前在PPTV 做Zabbix和现在在唯品会做数据科学的基础架构，都
在和网上朋友交流Zabbix的时候，我发现大家对一个问题，没有一个很清晰的思路，或
从上一点的“找变化”总结一下，我考虑问题的思路是“横向比较，纵向比较”。这个说
另一点我想谈的是，很多时候我们的问题是这样的一
这个问题，算是本书中最复杂的一个从代码级别分析、解决问题的例子了，虽然说在
一个好好运行的系统，突然出问题
第21章典型案例分析
315°
---
## Page 331
·316°
zabbix_server/zabbix_server() [0x808f534]
zabbix_server/zabbix_server（print_fatal_info+0x333)[0x8090927]
DCsync_hostsO方法异常，从而导致Zabbix异常退出。出错的堆栈信息如下。
com/browse/ZBX-4045。ZBX-4045 提出的 bug，是因为有重复名字的 Host或者Proxy会导致
Proxy时，Zabbix就会自动退出。大家是不是觉得这个设计非常的奇怪呢？
22.1
信大家对Zabbix的内部实现会有更深人的了解。
没有关闭。虽然现在已经是Zabbix 2.2时代了，但是如果大家能理解透彻我们遇到的问题，相
nextid 问题，一个是数据库拼接 SQL问题，还有一个是代码的bug——一个 connection 使用后
Zabbix代码问题和解决
第22章
13235:20110812:180024.050 8: /home/rudolfs/zabbix/branches/18/src/
13235:20110812:180024.050 7:[0x3de40c]
13235:20110812:180024.050 9: /home/rudo1fs/zabbix/branches/18/src/
13235:20110812:180024.049 === Backtrace: ===
说到这个问题的起因，是因为另一个bug一
13235:20110812:180024.050 6: /home/rudo1fs/zabbix/branches/18/src/
这是1.8.8时代的一个问题，当Zabbix中出现两个hostname相同的Host或者名字相同的
笔者在使用Zabbix1.8的过程中，一共提交了三个Patch，都是和性能相关的。一个是
Duplicated Host问题
—ZBX-4045，具体内容见https://support.zabbix
---
## Page 332
出现，则Zabbix会自动退出。
zabbix_server/zabbix_server(）[0x8051481]
main+0xe7）[0x3f5e37]
zabbix_server/zabbix_server(main+0x1fc） [0x80563ba]-
zabbix_server/zabbix_server（daemon_start+0x428)[0x808fcd9]
zabbix_server/zabbix_server（MAIN_ZABBIX_ENTRY+0x54f） [0x805690b]
zabbix_server/zabbix_server(main_dbconfig_loop+0x8b) [0x8057f57]
zabbix_server/zabbix_server (DCsync_configuration+0x116) [0x8088208]
13235:20110812:180024.050 5: /home/rudolfs/zabbix/branches/18/src/
这个 ZBX-4045的解决方案，是在代码中增加了对于重复名字 Host 和Proxy的判断，一旦
13235:20110812:180024.051 0:/home/rudolfs/zabbix/branches/18/src/
13235:20110812:180024.051 1:/lib/i386-1inux-gnu/1ibc.so.6(_1ibc_start
13235:20110812:180024.051 2:/home/rudo1fs/zabbix/branches/18/src/
13235:20110812:180024.051 3:/home/rudo1fs/zabbix/branches/18/src/
13235:20110812:180024.050 4:/home/rudolfs/zabbix/branches/18/src/
if （NULL != host_ph）
代码的位置在 src/libs/zbxdbcache/dbconfig.c中，具体如下。
当时使用的版本是1.8.8，因为我们不敢贸然升级，所以想在代码层把这个逻辑给解决。
host_ph->sync_num = sync_num;
host_ph->host_ptr =host;
Exiting...",
if (0 == found 11 sync_num == host_ph->sync_num)
exit（FAIL）;
zabbix_log (LOG_LEVEL_CRIT, "Error: duplicate %s [%s] found.
/*duplicate hostsor proxies found*/
host_ph->host);
HOST_STATUS_MONITORED == host _ph->status ? "hosts" : "proxies",
第 22章Zabbix代码问题和解决
·317°
---
## Page 333
318°
offset)
放到一个事务里让数据库处理，具体处理的代码逻辑如下。
并且数据库是Oralce时，Zabbix会在一批SQL的开始加上“begin"，末尾加上“end"，将它们
end”的大SQL执行，影响性能，如果能将这些SQL分成一条一条SQL去执行，性能会好很多。
22.2拼接大SQL问题
功能：
Zabbix监控系统深度实践
void
在 PPTV 时,Zabbix后端的数据库是 Oracle。DBA 发现,Zabbix会将 SQL拼成一个“begin
#endif
#ifdef HAVE_ORACLE
#endif
#ifdef HAVE_MULTIROW_INSERT
这是Zabbix本身在处理SQL时的一个方式。当执行的 SQL长度超过Zabbix设定的阈值，
The shutdown upon detection of duplicate hosts, introduced in 1.8.8, has been removed.
For version 1.8.9
这个奇怪的功能只存在了一个小版本一
我们把中间的一个判断全部注释掉，相当于把这个功能关闭了。
zbx_snprintf_alloc(sql, sql_allocated, sql_offset, 6, "end;\n");
zabbix_log(LOG_LEVEL_WARNING,"OverFlow SQL: %s",*sql);
if（',==（*sql）[*sql_offset - 1]）
 zbx_snprintf _alloc(sql, sql_allocated, sql_offset, 3, ";\n");
（*sql_offset)--;
一正好是我们使用的1.8.8，在1.8.9就移除了这个
---
## Page 334
何实现 nextid 算法的。
EPS 是VPS 的数倍。而 Zabbix 对于 nextid 的分配算法，问题非常大，我们先看下 Zabbix是如
（events per seconds）=VPS*N,其中N是一个 Item平均和多少个Trigger关联的数字，可以这样说，
每一个 Item 有新的数据时，如果有Trigger 和这个Item 关联，都会生成一个Event。那么EPS
别是eventid。每一个Event的生成，都需要一个eventid。而Event的生成又特别频繁，因为
22.3
看这一次commit的dif，就知道具体的变动了。
commit/57dc865555e3224118e9b0daf6018c95266a0c95#diff-becfbeb5e63bc27ff1669364a34b1f6b 查
割成一条一条小的SQL去执行。有兴趣的同学可以到https://github.com/baniuyao/Zabbix_PPTV/
在数据库中有一张表叫 ids，它记录了每一个资源下一个id是什么，形如：
nextid是当时影响性能最大的一个问题。Zabbix的各个资源在数据库里都有自己的id，特
我们解决的方案是在执行 SQL的人口处，判断SQL是否带有“begin”，如果有，就将它分
可以看到，这个机制是针对Oralce的，所以我们又中招了。
#endif
#ifdef HAVE ORACLE
nodeid | table_name
zbx_snprintf_alloc(sql, sql_allocated, sql_offset, 7, "begin\n");
nextid问题
*sql_offset=0;
0lacknowledges
0
|auditlog_details
auditlog
applications
application_template
actions
1 acknowledgeid
|field_name
applicationid
application_templateid
auditdetailid
auditid
actionid
第22章Zabbix代码问题和解决
Inextid
-1---
140
431
501
189
71
2
●319°
---
## Page 335
·320·
*******
列。增加的方法非常简单，代码如下。
ret2是否等于retl+1，如果相等，说明这一次获取 nextid是成功的，如果不相等，就再从来一遍。
后再从ids表中取出最新的event表的nextid作为ret2。在得到ret1和ret2后，Zabbix会判断
的插人失败，那么就会更新这条记录，将nextid更新为nextid+1。继续下一次循环。
Zabbix监控系统深度实践