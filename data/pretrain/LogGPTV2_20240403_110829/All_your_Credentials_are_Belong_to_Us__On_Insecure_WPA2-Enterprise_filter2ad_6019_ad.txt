in those profiles with the CA certificates in /etc/ssl/certs, we
determined 7 of them to be vulnerable (see Table E3 in Appendix).
Because their hostname matching constraints are quite permissive,
by purchasing a strategically chosen domain, an attacker can ob-
tain a certificate chain from the corresponding anchoring CA while
satisfying the hostname constraint relatively easily, and then a tar-
geted ET attack can be launched using that certificate. This attack is
made even easier if one considers the substring hostname matching
logic used by Chrome OS (Section 4.2.2). However, even if Chrome
OS fixes its matching logic in the future, these hostname constraints
still need to be tightened to secure the supplicant configurations.
For the other 13 Chrome OS profiles with permissive hostname
constraints, the difficulty of mounting the attack once again de-
pends upon the issuing policies of their anchoring CAs (which are
not part of /etc/ssl/certs, and most of them are internal CAs).
The same also applies to the macOS, Windows 10, and Android 10
profiles with permissive hostname constraints, as none of them use
commonly trusted root CA certificates as trust anchors.
6.4 Large number of certificates in profiles
Another interesting observation is that some profiles contain a large
number of certificates. About two-thirds of the profiles embed only
Table 4: Certificates in CAT profiles
mac / Chrome / Android 10
Parameter
Count
RSA Public Key = 1024 bits
188 (331)
RSA Public Key > 1024 bits 1255 (5682)
Unique = 1469
(Overall = 6060)
Perc.
12.8%
85.4%
1.8%
Windows 10
Unique = 1355
(Overall = 5734)
Count
Perc.
13.7%
186 (320)
1161 (5399) 85.7%
0.6%
8 (15)
29 (30)
2.1%
636 (2860) 46.9%
628 (2102) 46.4%
2.1%
28 (695)
2.1%
29 (38)
0.4%
5 (9)
200 (528)
14.7%
1318 (5693) 97.3%
2.7%
37 (41)
1186 (5554) 87.5%
12.5%
169 (180)
Elliptic-curve Public Key
MD5-RSA Signature
SHA1-RSA Signature
SHA256-RSA Signature
SHA384-RSA Signature
SHA512-RSA Signature
SHA256-ECDSA Signature
26 (47)
29 (35)
676 (3032)
678 (2207)
31 (704)
32 (41)
23 (41)
Expired Certificates
210 (563)
Version 3 Certificates
Version 1 Certificates
CA Certificate
Non-CA Certificate
1430 (6007)
39 (53)
1298 (5868)
171 (192)
2.0%
46.0%
46.2%
2.1%
2.1%
1.6%
14.3%
97.3%
2.7%
88.4%
11.6%
one anchoring certificate, and about 30% of the profiles embed 2− 5
certificates, but there are a few cases where the total number of
certificates embedded in a profile goes beyond a hundred.
Depending on the OS concerned, importing certificates from pro-
files would have different effects. For Chrome OS, these certificates
will be offered in a drop-down menu as possible trust anchors if
one configures another WPA2-Enterprise network in the future, so
the large number of imported certificates would cause a UI pollu-
tion but not detrimental to security, as they will not be counted in
the system CA store. On macOS, however, this is a major cause of
concern, because the imported CA certificates will be counted in
the system CA store, affecting the certificate validation of other
WPA2-Enterprise networks in the future. More importantly, the
self-signed root CA certificates imported would be given full trusts
for many different purposes, which can then be used to launch
other attacks, as discussed in Section 4.4.2.
6.5 Quality of certificates in CAT profiles
Finally, we also analyze the quality of the certificates embedded in
the CAT profiles. The results can be found in Table 4. We found that
short RSA modulus (e.g. ≤ 1024 bits) is not yet extinct in the WPA2-
Enterprise ecosystem, with about 5% of the certificates embedded
in CAT profiles still use one. Interestingly, despite the known weak-
ness in collision resistance [54, 57, 63], MD5-based signatures can
still be found on a few certificates. Similarly, SHA1 is also collision-
prone under various settings [44, 55, 56], but nearly half of the
certificates embedded in the CAT profiles have SHA1-based signa-
tures. The use of SHA256-based signatures is also prominent, but
SHA512-based signatures are very rare. Moreover, RSA is still the
overwhelmingly popular choice when it comes to digital signature,
and only a tiny portion of the certificates are signed using ECDSA.
Curiously, there are a few Version 1 certificates, and given that
certificate extensions were only introduced since version 3 of X.509,
whether these can actually be used as CA certificates would require
verification through out-of-band means [21]. Finally, about 3% of
the certificates are non-CA, and to our surprise, about 10% of the
certificates are expired. Embedding non-CA or expired certificates
in the profiles is counterproductive, as they do not help in building
a valid chain of trust.
Session 4B: Wireless, Mobile, and IoT CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1109Table 5: TLS Session and Certificate parameters
Session Stats
Total Domains = 3637
EAP Count Perc.
94.3%
PEAP
67.4%
TTLS
Both
60.5%
3430
2451
2202
TLS Support
Version Count Perc.
SSLv3
0.4%
98.3%
TLSv1
70.9%
TLSv1.1
72.7%
TLSv1.2
TLSv1.3
1.6%
15
3577
2579
2643
59
TLS by Default
Leaf Cert. Stats
CA Cert. Stats
Unique = 2701
Unique = 652
(Overall = 3637)
(Overall = 5300)
Count ‡ Perc. Count ‡ Perc.
RSA Public Key = 1024 bits
3.8%
158 (223)
RSA Public Key > 1024 bits 2535 (3406) 93.8% 621 (5201) 95.3%
0.9%
Elliptic-curve Public Key
Parameter
25 (87)
6 (12)
5.9%
0.3%
8 (8)
MD5-RSA Signature
SHA1-RSA Signature
SHA256-RSA Signature
SHA384-RSA Signature
SHA512-RSA Signature
SHA256-ECDSA Signature
7 (8)
3 (3)
0.3%
0.5%
12.0% 204 (1320) 31.3%
324 (412)
2092 (2791) 77.4% 401 (2252) 61.5%
3.2%
200 (341)
2.6%
71 (78)
0.9%
7 (7)
7.4% 21 (1698)
2.6%
17 (18)
0.3%
6 (9)
118 (162)
Expired Certificate
979
13
2586
59
26.9%
0.4%
71.1%
1.6%
TLSv1
TLSv1.1
TLSv1.2
TLSv1.3
Only TLSv1 Support = 968
Only TLSv1.1 Support = 1 Chain Verification Success 1635 (2280) 60.5%
Only TLSv1.2 Support = 47 Chain Verification Failure 1066 (1357) 39.5%
Version 3 Certificate
Version 1 Certificate
‡ Count for overall certificates are in ()
N/A
N/A
4.4% 67 (161)
10.3%
2669 (3598) 98.8% 650 (5298) 99.7%
0.3%
32 (39)
1.2%
2 (2)
7 ANALYZING THE TLS PARAMETERS USED
BY AUTHENTICATION SERVERS
In this section, we collect and evaluate the different TLS parameters
used by the authentication servers in the context of eduroam.
7.1 Data Collection
Taking advantage of the roaming nature of eduroam, we used the
local eduroam access offered by our universities to perform this
measurement study. From multiple sources (see [40]) including the
public list of IdPs, the national/regional eduroam list of participants,
and results of Section 5, we curated a list of domains conjectured
to be providing authentication services for eduroam. We then tried
a collection of generic usernames (e.g., anonymous, admissions,
etc.) combined with possible subdomain prefixes (e.g., ad, mail),
and in a few cases actual email addresses. In the end, we found
usable usernames that allowed us to establish TLS tunnels via PEAP
or TTLS for 3637 domains. Since we are only interested in the
TLS parameters, we modified wpa_supplicant v2.9 [3] so that it
terminates the TLS handshake after receiving and archiving the
ServerHello and Certificate messages, which is also how we
determine whether an attempt was successful. Notice that for this
data collection, no actual user log-ins (phase-2 authentication)
were performed. Modifying wpa_supplicant also allows us to
extract and archive the encrypted certificate chains in TLSv1.3. In
order to test for deprecated versions of SSL, we also used older
versions of wpa_supplicant and OpenSSL whenever necessary.
7.2 Traffic Evaluation
We captured the TLS traffic from the authentication servers of 3637
eduroam domains worldwide (see Table F4 in Appendix for the top
20 contributing TLDs). Table 5 shows the overview of our results.
7.2.1 Analysis of Session parameters. We found that PEAP has
better support than EAP-TTLS (see the left side of Table 5). 94.3%
of the 3637 domains support PEAP whereas only 67.4% support
EAP-TTLS. We also thoroughly investigated the list of TLS versions
supported by the authentication servers of eduroam domains by
enforcing different TLS versions in the Client Hello message (see
TLS Support in Table 5). Legacy versions of TLS are susceptible
to various attacks under different models [15, 28, 51], and many
of them have been proposed to be deprecated by standardization
bodies [11, 46, 47, 59]. Much to our surprise, we encountered many
domains that still support older and/or deprecated versions of TLS
(e.g., from SSLv3 to TLSv1.1). However, when we offered all the TLS
versions in Client Hello packet (see TLS by Default in Table 5),
71.1% selected TLSv1.2 and 26.9% (979 domains) selected TLSv1 for
their sessions. Further investigation revealed 26.6% (968) domains
support only TLSv1. These statistics revealed that many of the
authentication servers of eduroam domains surveyed in our analysis
are still relying on old and weak versions of TLS.
7.2.2 Analysis of Certificate parameters. We also checked the pa-
rameters of X.509 certificates to evaluate the quality of the certifi-
cate chains used in the eduroam ecosystem. The rationale behind
this analysis is that if a remote authentication server sends an X.509
certificate chain consisting of weak/insecure parameters, it might
be possible for an attacker to compromise the all-important TLS
tunnel and steal user credentials. We collected in total 3637 X.509
certificate chains, which include 3637 leaf and 5300 (intermediate
and root) CA certificates. While many of them are reused across
different domains, we identified some certificates that are unique:
2701 leaf and 652 CA. Surprisingly, a significant number of these
certificates rely on some weak parameters that are prone to exploita-
tion (see Table 5). For instance, 5.9% of the unique leaf certificates
use short RSA moduli (e.g., 1024 bits), which are not recommended
[10]. 12% of the unique leaf certificates are signed with SHA1-RSA,
and 7 leaf certificates are signed with MD5-RSA, both of which
are susceptible to potential collision attacks [43, 44, 54–57, 63, 64].
Additionally, we found that a few domains use expired or version
1 certificates, both of which cannot provide an adequate level of
trust to the given certificate chains.
Chain verification status: We verified each X.509 certificate
chain using OpenSSL and observed that 39.5% of them were rejected
with different reason codes. Out of the rejected chains, 5.3% have
expired certificates, and 1% have CA certificates that are invalid due
to incorrect X.509 extension values. 35.2% of the rejected chains are
missing some issuer certificates (code 20), 50.8% were built correctly
but the root is self-signed (code 19), and 7.7% are single-certificate
chains that are self-signed (code 18). The fact that so many chains
cannot be easily verified might be a reason why many TEIs instruct
their users to disable certificate validation completely.
Certificate lifespan: We also investigated the lifespan (in years)
of the 2701 unique leaf certificates and 652 unique CA certificates.
While most of the lifespans are typical (53.2% of the leaf certificates
are valid for 2-5 years and 69.2% of the CA certificates are valid
for 5-20 years), much to our surprise, we discovered a few domains
(1.5%) using leaf certificates with more than 20 years of validity and
1 domain with a negative lifespan. Similarly, 2.1% of CA certificates
have unusually long validity of more than 50 years, most of which
appears to be from self-signed CAs used by Identity and Access
Management (IAM) products.
Suspected cases of key reuse. By examining certificates and
7.2.3
public keys that are used by multiple TEIs, we identified several
Session 4B: Wireless, Mobile, and IoT CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1110cases of suspected key reuse, which are reminiscent of the practice
embraced by some TLS-intercepting anti-virus software [24]. We
found clusters of TEIs in 3 countries (i.e., KR, CN, FR) that appear
to be using certificates or public keys generated by vendors of IAM
products. If the corresponding private keys are indeed shared across
different instances of the same product, an attacker might also
purchase such products and abuse the shared keys for launching
targeted ET attacks. To protect the organizations involved, we
redact the names of TEIs and vendors in the rest of this section.
University (
First, we computed clusters based on identical certificate chains.
The largest cluster we found has 219 universities in Korea, all sent
the exact same chain, with the leaf certificate issued to *.
.ac.kr.
It could be that
.ac.kr) is in
charge of providing authentication service to all these universi-
ties. The other large clusters with more than 20 domains are all
made of sibling/child subdomains that belong to the same organi-
zation (e.g., different academic departments or affiliated colleges
of a university, or different universities in a national alliance), and
thus they might reasonably share the same authentication server.
However, we found a cluster made of 18 universities in China, with
the same server certificate issued to C=FR;ST=Radius;O=Example
Inc.;CN=Example Server Certificate, and both the CA and
server certificates had expired back in 2017. It is not clear to us
whether these schools are simply sharing the same authentication
server or reusing the same private key.
;O=
Additionally, we noticed a cluster made of 17 universities in
China, with the leaf certificate issued to
.com.cn, which
is a domain owned by a Chinese vendor of networking equipment.
Based on the vendor’s documentation, this certificate seems to be
coming from one of its IAM software packages. Similarly, there is
a cluster made of 12 universities in Korea, with the leaf certificate
issued to C=KR;ST=Seoul;L=
;OU=network;
Root CA, which seems to be coming from an IAM
CN=
server product developed by a Korean vendor. We suspect these are
cases of key reuse, but cannot prove them definitively at this point.
If our suspicion turns out to be correct, the staffs and students of
these 29 schools could be susceptible to ET attacks, regardless of
their supplicant configurations.
Finally, we also computed clusters of domains that had the same
public key on the leaf certificate, and compared them with the clus-
ters that had identical certificate chains. Different certificate chains
that have the same leaf public key is highly indicative of possible
cases of key reuse, as the same authentication server would most
likely send the same chain every time. In the end, we found 3 inter-
esting cases. The largest cluster among the 3 is made of 10 Korean
universities, where the CA certificate remains the same (which lasts
till year 2111), and the leaf certificates were all issued to the same en-
tity (C=KR;ST=Seoul;L==Seoul;O=