1.5
29
210
211
212
213
214
N (# of preprocessed signatures)
Fig. 7. PCG seed size in N, the number of ECDSA tuples we generate ofﬂine.
The x-axis uses a logarithmic scale.
)
c
e
s
m
(
e
m
T
i
2,500
2,000
1,500
1,000
500
0
0
two parties
three parties
40000
20000
N (# of preprocessed signatures)
60000
80000
Fig. 8. Ofﬂine computation time per signature (amortised).
benchmarks, we used an AWS t3.large machine with 8GB of
memory.
One unique feature of our construction is that the storage
costs for the PCG preprocessing are only logarithmic in
N, the number of preprocessed signatures, unlike previous
constructions. We show this property in Figure 7 for 2 and
3-party computation (the graph is drawn using theoretical
values). Note that this feature is only suitable for the amortised
setting, when preprocessing many signatures in advance. This
can be useful, for instance, in applications where several pow-
erful, independently located servers may be used to perform
threshold signing on behalf of a large number of clients (who
cannot run full MPC nodes themselves).
For the running costs, we measured the time it takes for
the parties to produce one signature. The online signing phase
in our protocol (Round 2 in Figure 4) is simple: it involves
one message, after which each party can run a local linear
computation, which is dependent in the number of parties, to
compute the full signature and verify it. In our implementation,
the operation takes on average 5ms in the 2-party case and
11ms for three parties.
Finally, we measured the local computation time for the
PCG seed expansion in the ofﬂine protocol (Round 1 in
Figure 4). Since the seed expansion is fully non-interactive,
local computation time is the main bottleneck. One additional
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:21:08 UTC from IEEE Xplore.  Restrictions apply. 
132566
cost is that after seed expansion, the ECDSA tuples for N
signatures must be stored in memory. However, for 3 parties
and N = 94019, this is only around 24MB, so insigniﬁcant.
Figure 8 shows the amortised runtime of the seed expansion,
per signature. From proﬁling the pre-signing stage, we can say
that on average, 98% of the time goes on step 2 – retrieving
shares of the next ECDSA tuple, which includes expanding the
stored data. This is also where the dependence in N comes
into play, since the FFT algorithm is super-linear. While we did
not implement the protocol for distributing the PCG seeds, we
believe this would not signiﬁcantly change the overall costs,
since seed expansion is the bottleneck.
d) Future work: The main bottleneck in our code is the
execution of an NTT/FFT over Secp256k1, which is needed for
polynomial arithmetic in the ring-LPN assumption, as well as
polynomial evaluation when converting the ring-ECDSA tuple
into N tuples over Fp. This is particularly challenging due to
the order of Secp256k1, which has no large enough power of 2
factor needed for typical FFT algorithms. Improvements to the
FFT algorithm for such curves may dramatically reduce the
computation time of the preprocessing [BCKL21]. In addition,
another possibility is to use ring-LPN with a more structured,
regular error distribution [BCG+20], which would reduce the
runtime of DPF evaluation (however, this is not currently the
bottleneck). Moreover, our preprocessing protocol to setup the
PCG seeds uses generic MPC primitives, and its implementa-
tion is left as future work.
e) Comparison with previous approaches: In Figure 4,
we gave benchmarks for the non-interactive expansion phase
of the PCG which our protocol uses. While we did not
implement the full protocol to setup the seeds, we believe this
would not signiﬁcantly change computational costs, since seed
expansion is the bottleneck. Without properly implementing
and benchmarking all protocols on the same machines,
it
is hard to do an accurate comparison with previous works.
However, we can get a rough idea by comparing numbers
from existing work for the 1-out-of-2 case: [LN18] takes 100–
300ms per signature, [GG18] take 30–90ms and [CCL+20]
takes 400–700ms. For comparison, our amortized computa-
tional cost of PCG expansion is around 1–2s per signature,
however, our bandwidth complexity is 1–2 orders of magnitude
smaller than these (see Table I), because of our PCG-based
approach.
Acknowledgments: We would like to thank Matan
Hamilis for helping out with the implementation of the proto-
col. Work supported partially by: the Concordium Blockhain
Research Center, Aarhus University, Denmark; the Carlsberg
Foundation under the Semper Ardens Research Project CF18-
112 (BCM); the European Research Council (ERC) under
the European Unions’s Horizon 2020 research and innova-
tion programme under grant agreement No 803096 (SPEC);
ERC Project NTSC (742754); the Aarhus University Research
Foundation (AUFF); and the Independent Research Fund
Denmark (DFF) under project number 0165-00107B. Claudio
Orlandi is a co-founder of Partisia Infrastructure and has been
advising Concordium and ZenGo.
REFERENCES
[AF21]
[AHS20]
[AS21]
Robert Annessi and Ethan Fast. Improving security for users of
decentralized exchanges through multiparty computation. CoRR,
abs/2106.10972, 2021.
Jean-Philippe Aumasson, Adrian Hamelink, and Omer Shlo-
movits. A survey of ECDSA threshold signing. Cryptology
ePrint Archive, Report 2020/1390, 2020. https://eprint.iacr.org/
2020/1390.
Damiano Abram and Peter Scholl. Low-Communication Multi-
party Triple Generation for SPDZ from Ring-LPN. Cryptology
ePrint Archive, 2021, 2021.
[BCG+19a] Elette Boyle, Geoffroy Couteau, Niv Gilboa, Yuval Ishai, Lisa
Kohl, Peter Rindal, and Peter Scholl. Efﬁcient two-round OT
extension and silent non-interactive secure computation. In ACM
CCS 2019. ACM Press, November 2019.
[BCG+19b] Elette Boyle, Geoffroy Couteau, Niv Gilboa, Yuval Ishai, Lisa
Kohl, and Peter Scholl. Efﬁcient pseudorandom correlation
generators: Silent OT extension and more. In CRYPTO 2019,
Part III, LNCS. Springer, Heidelberg, August 2019.
[BCGI18]
[BCG+20] Elette Boyle, Geoffroy Couteau, Niv Gilboa, Yuval Ishai, Lisa
Kohl, and Peter Scholl. Efﬁcient pseudorandom correlation
generators from ring-LPN. In CRYPTO 2020, Part II, LNCS.
Springer, Heidelberg, August 2020.
Elette Boyle, Geoffroy Couteau, Niv Gilboa, and Yuval Ishai.
In ACM CCS 2018. ACM Press,
Compressing vector OLE.
October 2018.
Eli Ben-Sasson, Dan Carmon, Swastik Kopparty, and David
Levit.
Elliptic curve fast fourier transform (ECFFT) part
I: fast polynomial algorithms over all ﬁnite ﬁelds. CoRR,
abs/2107.08473, 2021.
[BCKL21]
[BGI15]
[BDOZ11] Rikke Bendlin, Ivan Damg˚ard, Claudio Orlandi, and Sarah
Zakarias. Semi-homomorphic encryption and multiparty com-
putation. In EUROCRYPT 2011, LNCS. Springer, Heidelberg,
May 2011.
Elette Boyle, Niv Gilboa, and Yuval Ishai. Function secret
In EUROCRYPT 2015, Part II, LNCS. Springer,
sharing.
Heidelberg, April 2015.
Elette Boyle, Niv Gilboa, and Yuval Ishai. Function secret
In ACM CCS 2016.
sharing: Improvements and extensions.
ACM Press, October 2016.
[BGI16]
[CCL+19] Guilhem Castagnos, Dario Catalano, Fabien Laguillaumie, Fed-
erico Savasta, and Ida Tucker. Two-party ECDSA from hash
In CRYPTO 2019,
proof systems and efﬁcient instantiations.
Part III, LNCS. Springer, Heidelberg, August 2019.
[CCL+20] Guilhem Castagnos, Dario Catalano, Fabien Laguillaumie, Fed-
erico Savasta, and Ida Tucker. Bandwidth-efﬁcient threshold
EC-DSA. In PKC 2020, Part II, LNCS. Springer, Heidelberg,
May 2020.
[DJN+20]
[DKL+13]
[CGG+20] Ran Canetti, Rosario Gennaro, Steven Goldfeder, Nikolaos
Makriyannis, and Udi Peled. UC non-interactive, proactive,
In ACM CCS 20.
threshold ECDSA with identiﬁable aborts.
ACM Press, November 2020.
Ivan Damg˚ard, Thomas Pelle Jakobsen, Jesper Buus Nielsen,
Jakob Illeborg Pagter, and Michael Bæksvang Østergaard. Fast
In SCN 20, LNCS.
threshold ECDSA with honest majority.
Springer, Heidelberg, September 2020.
Ivan Damg˚ard, Marcel Keller, Enrique Larraia, Valerio Pastro,
Peter Scholl, and Nigel P. Smart. Practical covertly secure
MPC for dishonest majority - or: Breaking the SPDZ limits. In
ESORICS 2013, LNCS. Springer, Heidelberg, September 2013.
Jack Doerner, Yashvanth Kondi, Eysa Lee, and abhi shelat.
Secure two-party threshold ECDSA from ECDSA assumptions.
In 2018 IEEE Symposium on Security and Privacy. IEEE
Computer Society Press, May 2018.
Jack Doerner, Yashvanth Kondi, Eysa Lee, and abhi shelat.
Threshold ECDSA from ECDSA assumptions: The multiparty
case. In 2019 IEEE Symposium on Security and Privacy. IEEE
Computer Society Press, May 2019.
[DKLs18]
[DKLs19]
[DOK+20] Anders P. K. Dalskov, Claudio Orlandi, Marcel Keller, Kris
Shrishak, and Haya Shulman. Securing DNSSEC keys via
In ESORICS 2020,
threshold ECDSA from generic MPC.
Part II, LNCS. Springer, Heidelberg, September 2020.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:21:08 UTC from IEEE Xplore.  Restrictions apply. 
142567
[DPSZ12]
[FKP16]
[GG18]
[GGN16]
[GI14]
[GS21]
Ivan Damg˚ard, Valerio Pastro, Nigel P. Smart, and Sarah Za-
karias. Multiparty computation from somewhat homomorphic
In CRYPTO 2012, LNCS. Springer, Heidelberg,
encryption.
August 2012.
Manuel Fersch, Eike Kiltz, and Bertram Poettering. On the
provable security of (EC)DSA signatures. In ACM CCS 2016.
ACM Press, October 2016.
Rosario Gennaro and Steven Goldfeder. Fast multiparty thresh-
old ECDSA with fast trustless setup. In ACM CCS 2018. ACM
Press, October 2018.
Rosario Gennaro, Steven Goldfeder, and Arvind Narayanan.
Threshold-optimal DSA/ECDSA signatures and an application
In ACNS 16, LNCS. Springer,
to bitcoin wallet security.
Heidelberg, June 2016.
Niv Gilboa and Yuval Ishai. Distributed point functions and
In EUROCRYPT 2014, LNCS. Springer,
their applications.
Heidelberg, May 2014.
Jens Groth and Victor Shoup. On the security of ecdsa with
additive key derivation and presignatures. Cryptology ePrint
Archive, Report 2021/1330, 2021. https://ia.cr/2021/1330.
[LN18]
[Lin17]
[LNR18]
[KMOS21] Yashvanth Kondi, Bernardo Magri, Claudio Orlandi, and Omer
Shlomovits. Refresh when you wake up: Proactive threshold
In 42nd IEEE Symposium on
wallets with ofﬂine devices.
Security and Privacy, SP 2021, San Francisco, CA, USA, 24-27
May 2021, pages 608–625. IEEE, 2021.
In
Yehuda Lindell. Fast secure two-party ECDSA signing.
CRYPTO 2017, Part II, LNCS. Springer, Heidelberg, August
2017.
Yehuda Lindell and Ariel Nof. Fast secure multiparty ECDSA
with practical distributed key generation and applications to
In ACM CCS 2018. ACM Press,
cryptocurrency custody.
October 2018.
Yehuda Lindell, Ariel Nof, and Samuel Ranellucci. Fast secure
multiparty ECDSA with practical distributed key generation
and applications to cryptocurrency custody. Cryptology ePrint
Archive, Report 2018/987, 2018. https://eprint.iacr.org/2018/
987.
Philip D. MacKenzie and Michael K. Reiter. Two-party gener-
ation of DSA signatures. In CRYPTO 2001, LNCS. Springer,
Heidelberg, August 2001.
Jesper Buus Nielsen, Peter Sebastian Nordholt, Claudio Or-
landi, and Sai Sheshank Burra. A new approach to practical
active-secure two-party computation. In CRYPTO 2012, LNCS.
Springer, Heidelberg, August 2012.
Nigel P. Smart and Younes Talibi Alaoui. Distributing any
elliptic curve based protocol. In 17th IMA International Confer-
ence on Cryptography and Coding, LNCS. Springer, Heidelberg,
December 2019.
[NNOB12]
[MR01]
[ST19]
APPENDIX A
PROOF OF THEOREM 1
Proof: Let S be the ideal world adversary and let A be
the real world adversary. To prove UC-security, we assume
that an external environment gives S the commands to invoke
each step of the execution and also controls A. The simulation
works as follows:
a) Key Generation: Upon receiving the command (Init)
from the external environment, S sends the command KeyGen
to the trusted party computing FECDSA to receive back the
public key PK. Then, upon receiving (αi)i∈C from A, it sends
PK to A. Finally, upon receiving OK from A, the simulator
S stores (PK, (αi)i∈C).
b) Presigning: Upon receiving a command Presign(sid)
from the external environment, S works as follows:
1) S sends Presign(sid) to FECDSA to receive back r.
2) If
the
new ECDSA tuples
S
needed,
the
are
receives
of F R
role
playing
tuples
Prep,
(cid:0)(cid:98)xi, (Mi,j, Kj,i)j∈H,(cid:98)yi,(cid:98)di,(cid:98)zi
(cid:1)
i∈C
from A.
i∈H Ri +(cid:80)
(cid:80)
i∈C(cid:98)xi · G. Finally, for each honest party
If A
sent abort, then S sends abort to FECDSA, simulates
the honest parties aborting in the real execution and
outputs whatever A outputs.
3) S chooses a point R in (cid:104)G(cid:105) such that r = π(R). Note
that there is more than one point on the curve that
satisﬁes it. Finding such R is however efﬁcient when
the cofactor of (cid:104)G(cid:105) is small (as it usually is in ECDSA
instantiations, including the Bitcoin curve).
4) S chooses a random Ri ∈ (cid:104)G(cid:105) for each i ∈ H (i.e.,
Pi is an honest party), under the constraint that R =
Pj and corrupted party Pi, it computes M j,i = Kj,i ·
G + αi · Rj (this is enabled since S received Kj,i and
αi from A).
5) S sends Rj and M j,i for each honest Pj and corrupted
Pi to A.
corrupted Pi and honest Pj, S checks that A sent the
abort to FECDSA, simulates the honest parties aborting
and outputs whatever A outputs. If the correct values
were sent, then it sends continue to FECDSA.
c) Signing: Upon receiving a command Sign(sid, m)
from the external environment, S works as follows:
6) Upon receiving Mi,j · G and (cid:98)xi · G from A for each
correct Mi,j · G and(cid:98)xi · G to all parties. If not, it sends
i∈H zi +(cid:80)
1) S sends Sign(sid, m) to FECDSA, to receive back s.
2) S computes m(cid:48) ← H(m). Then, for each corrupted Pi,
random zj ∈ Fq for each j ∈ H, sets τ ← s · z where
it computes (cid:98)τi ← (cid:98)yi · m(cid:48) + r · (cid:98)di. Then, S chooses a
z =(cid:80)
i∈C(cid:98)zi and chooses a random τj for
each honest party Pj such that τ =(cid:80)
i∈C(cid:98)τi.
i sent by each i ∈ C.
(cid:80)
j∈H τj +(cid:80)
(cid:80)
j∈H zj +(cid:80)
3) S sends τj and zj for each j ∈ H to A, to receive back
4) S computes
j∈H τj +(cid:80)
from A the messages τ(cid:48)
i∈C τ(cid:48)