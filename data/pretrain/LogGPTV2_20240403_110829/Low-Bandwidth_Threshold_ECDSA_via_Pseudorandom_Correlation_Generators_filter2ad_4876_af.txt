### Optimized Text

#### Figure 7: PCG Seed Size in N
- **Description**: This figure illustrates the size of the PCG seed in relation to \( N \), the number of ECDSA tuples generated offline. The x-axis is on a logarithmic scale.
- **Data Points**:
  - 1.5
  - 29
  - 210
  - 211
  - 212
  - 213
  - 214
- **Note**: The graph is drawn using theoretical values for 2 and 3-party computation.

#### Figure 8: Offline Computation Time per Signature (Amortized)
- **Description**: This figure shows the amortized offline computation time per signature.
- **Data Points**:
  - 0
  - 500
  - 1,000
  - 1,500
  - 2,000
  - 2,500
- **Parties**:
  - Two parties
  - Three parties
- **N (# of preprocessed signatures)**:
  - 0
  - 20,000
  - 40,000
  - 60,000
  - 80,000

### Benchmarks
- **Platform**: AWS t3.large machine with 8GB of memory.
- **Storage Costs**: A unique feature of our construction is that the storage costs for the PCG preprocessing are only logarithmic in \( N \), the number of preprocessed signatures. This is shown in Figure 7 for 2 and 3-party computation.
- **Applicability**: This feature is particularly useful in the amortized setting when preprocessing many signatures in advance, such as in applications where several powerful, independently located servers may be used to perform threshold signing on behalf of a large number of clients.

### Running Costs
- **Signature Production Time**: We measured the time it takes for the parties to produce one signature. The online signing phase (Round 2 in Figure 4) involves one message, followed by a local linear computation dependent on the number of parties to compute and verify the full signature.
  - **2-Party Case**: 5ms on average
  - **3-Party Case**: 11ms on average

### Local Computation Time for PCG Seed Expansion
- **Offline Protocol (Round 1 in Figure 4)**: Since the seed expansion is fully non-interactive, local computation time is the main bottleneck.
- **Memory Usage**: For 3 parties and \( N = 94019 \), the memory usage is around 24MB, which is insignificant.
- **Figure 8**: Shows the amortized runtime of the seed expansion per signature. Profiling the pre-signing stage indicates that 98% of the time is spent on step 2, which involves retrieving shares of the next ECDSA tuple and expanding the stored data. The dependence on \( N \) comes into play due to the super-linear nature of the FFT algorithm.

### Future Work
- **Bottleneck**: The main bottleneck in our code is the execution of an NTT/FFT over Secp256k1, needed for polynomial arithmetic in the ring-LPN assumption and polynomial evaluation when converting the ring-ECDSA tuple into \( N \) tuples over \( F_p \). This is challenging due to the order of Secp256k1, which lacks a large enough power of 2 factor for typical FFT algorithms.
- **Improvements**:
  - Enhancements to the FFT algorithm for such curves could significantly reduce the computation time of the preprocessing [BCKL21].
  - Using ring-LPN with a more structured, regular error distribution [BCG+20] could reduce the runtime of DPF evaluation.
  - Implementing the protocol to set up the PCG seeds using generic MPC primitives is left as future work.

### Comparison with Previous Approaches
- **Non-Interactive Expansion Phase**: We provided benchmarks for the non-interactive expansion phase of the PCG in Figure 4. While we did not implement the full protocol to set up the seeds, we believe this would not significantly change computational costs, as seed expansion is the bottleneck.
- **Comparison**:
  - [LN18]: 100–300ms per signature
  - [GG18]: 30–90ms per signature
  - [CCL+20]: 400–700ms per signature
  - Our amortized computational cost: 1–2s per signature
  - Our bandwidth complexity is 1–2 orders of magnitude smaller than these, thanks to our PCG-based approach (see Table I).

### Acknowledgments
- **Contributors**: We thank Matan Hamilis for helping with the implementation of the protocol.
- **Support**: This work was partially supported by:
  - Concordium Blockchain Research Center, Aarhus University, Denmark
  - Carlsberg Foundation under the Semper Ardens Research Project CF18-112 (BCM)
  - European Research Council (ERC) under the European Union’s Horizon 2020 research and innovation programme (grant agreement No 803096, SPEC; ERC Project NTSC, 742754)
  - Aarhus University Research Foundation (AUFF)
  - Independent Research Fund Denmark (DFF) under project number 0165-00107B
  - Claudio Orlandi is a co-founder of Partisia Infrastructure and has been advising Concordium and ZenGo.

### References
- [AF21], [AHS20], [AS21], [BCG+19a], [BCG+19b], [BCGI18], [BCG+20], [BCKL21], [BDOZ11], [BGI15], [BGI16], [CCL+19], [CCL+20], [CGG+20], [DJN+20], [DKL+13], [DKLs18], [DKLs19], [DOK+20], [DPSZ12], [FKP16], [GG18], [GGN16], [GI14], [GS21], [LN18], [Lin17], [LNR18], [KMOS21], [MR01], [NNOB12], [ST19]

### Appendix A: Proof of Theorem 1
- **Proof**:
  - **Key Generation**:
    - Upon receiving the (Init) command from the external environment, the simulator \( S \) sends the KeyGen command to the trusted party computing FECDSA to receive the public key \( PK \).
    - Upon receiving \( (\alpha_i)_{i \in C} \) from the real-world adversary \( A \), \( S \) sends \( PK \) to \( A \).
    - Upon receiving OK from \( A \), \( S \) stores \( (PK, (\alpha_i)_{i \in C}) \).
  - **Presigning**:
    - Upon receiving a Presign(sid) command from the external environment, \( S \) works as follows:
      1. Sends Presign(sid) to FECDSA to receive back \( r \).
      2. If new ECDSA tuples are needed, \( S \) receives the role-playing tuples from \( A \).
      3. Chooses a point \( R \) in \( \langle G \rangle \) such that \( r = \pi(R) \).
      4. Chooses a random \( R_i \in \langle G \rangle \) for each honest party \( P_i \), under the constraint that \( R = \sum_{i \in H} R_i + \sum_{i \in C} \hat{x}_i \cdot G \).
      5. Computes \( M_{j,i} = K_{j,i} \cdot G + \alpha_i \cdot R_j \) for each honest \( P_j \) and corrupted \( P_i \).
      6. Sends \( R_j \) and \( M_{j,i} \) to \( A \).
      7. Checks if \( A \) sent the correct values; if not, simulates the honest parties aborting and outputs whatever \( A \) outputs.
  - **Signing**:
    - Upon receiving a Sign(sid, m) command from the external environment, \( S \) works as follows:
      1. Sends Sign(sid, m) to FECDSA to receive back \( s \).
      2. Computes \( m' \leftarrow H(m) \).
      3. For each corrupted \( P_i \), computes \( \hat{\tau}_i \leftarrow \hat{y}_i \cdot m' + r \cdot \hat{d}_i \).
      4. Chooses a random \( z_j \in F_q \) for each honest party \( P_j \) and sets \( \tau \leftarrow s \cdot z \) where \( z = \sum_{i \in C} \hat{z}_i \).
      5. Sends \( \tau_j \) and \( z_j \) for each \( j \in H \) to \( A \).
      6. Receives back \( \tau'_i \) from \( A \) and computes \( \tau = \sum_{j \in H} \tau_j + \sum_{i \in C} \tau'_i \).

This optimized text provides a clearer, more professional, and coherent presentation of the original content.