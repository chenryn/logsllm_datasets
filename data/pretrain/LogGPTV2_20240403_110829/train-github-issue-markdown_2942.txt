At the moment we have a single major blocker to compiling scipy on Windows:
  * Python.org Windows binaries are compiled against an MS Visual C++ runtime, which differs with different Python versions: see https://matthew-brett.github.io/pydagogue/python_msvc.html
  * It is dangerous and error-prone to pass objects (such as file-handles) that are created using one run-time, into code linked against another run-time;
  * There is currently Fortran compiler with a BSD-compatible run-time license that can link against all the MSVC runtimes we need to support. In particular mingw-w64 cannot currently link against MSVC 2015 runtimes, used by Pythons 3.5 and 3.6.
Here we are exploring another option, which is to compile the Fortran code to
link against the generic MSVCRT runtime, on the basis that the Fortran code
does not use any of the objects (such as file-handles) that get created by the
Python (and Numpy) linked MSVC run-times. The plan is therefore:
  * Compile scipy C code with the MSVC compiler matching the version of Python;
  * Compile scipy Fortran code with gfortran linking against the generic MSVCRT runtime;
  * Hope for the best.
There's some discussion of this over at #7551 \- starting at #7551 (comment).
Appveyor scripting at https://github.com/matthew-brett/build-scipy . Builds at
https://ci.appveyor.com/project/matthew-brett/build-scipy
The procedure so far is the following (see: https://github.com/matthew-
brett/build-scipy/blob/master/appveyor.yml):
  * Download and install mingwpy into Python 2.7 matching the bitness (32 or 64) of the Python we're building in;
  * Patch mingwpy to link to the the default msvcrt.dll rather than the specific MSVC 9 runtime;
  * Unpack built OpenBLAS, and point scipy install to that build;
  * Patch numpy distutils to avoid linking to some mingw-specific libraries;
  * Build scipy.
Current errors are for missing math symbols such as `_sinf` \- see this report
and Pauli's suggestion.
Current participants @matthew-brett @rgommers @pv @carlkl .