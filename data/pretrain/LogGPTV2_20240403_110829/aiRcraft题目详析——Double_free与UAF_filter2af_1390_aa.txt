# aiRcraft题目详析——Double free与UAF
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## Introduction
aiRcraft是RCTF-2017（CTFTIME评分24.13）中的一道pwn题， 分值为606。
这道题主要涉及的知识点有：
1\. Double Free
2\. Use After Free
虽然知识点并不复杂，利用方法也中规中矩，但是题目对于菜单的某些设置使我们在利用时会遇到一些困难——不同于普通菜单题所提供的操作，本题所提供的操作耦合度较高（相对于heap的原子操作，如malloc，free），所以我们进行exploit时的每一个操作都必须充分考虑到它所带来的边际效应，并恰当地进行拼凑，达到get
shell的目的。因此这道题对我们的调试提出了较高的要求。
这篇writeup的目的在于以一个初学者的视角（我本人确实也是初学者），对这道题进行一个详尽的分析，并尝试从这道题中总结某种做题的模式，顺便总结在exploit过程中可能遇到的坑，为之后的工作带来一些启发。深谙ctf的老手可以选择感兴趣的部分阅读，欢迎批评指正。
## Reverse & Static Analysis
这道题目提供了一个Binary以及libc，它们的二进制文件可以在我的github中找到：
Binary:
libc:
### 1\. 首先我们对题目简单的运行，对它有一个基本的了解：
    (pwn) kongjiadongyuan in ~/aiRcraft λ checksec aiRcraft
    [*] '/home/kongjiadongyuan/aiRcraft/aiRcraft'
    Arch: amd64-64-little
    RELRO: Full RELRO
    Stack: Canary found
    NX: NX enabled
    PIE: PIE enabled
从这里我们可以得到以下信息：
1\. 64位程序；
2\. got表无法修改（这比较重要，因为修改got表是我们的一个重要手段）；
3\. Stack Canary防止栈溢出，虽然这不是这一题的重点；
4\. NX，意味着我们无法进行shellcode的运行；
5\. PIE意味着这一题的代码段位置随机化了，我们无法将执行流劫持到某一特定的代码段位置了，除非我们泄露了地址。
现在我们尝试运行一下程序：
    (pwn) kongjiadongyuan in ~/aiRcraft λ ./aiRcraft
    Welcome to aiRline!
    what do you want to do?
    1. Buy a new plane
    2. Build a new airport
    3. Enter a airport
    4. Select a plane
    5. Exit
    Your choice:
在进行了进一步的测试之后，我们就会大致理清楚这道题的逻辑：（这里只是粗略地了解，之后在代码分析中再细致地分析）
这道题存在两种逻辑上的实体：airport，plane；plane具有**Company**，**Name**的属性，并且可以飞往各个airport，airport有**Name**的属性，并且可以承载各个plane。
这里应该特别指出，这道题具有时间限制，当预设的时间到达时，程序会自动退出：
    [1] 27244 alarm ./aiRcraft
这也是一种菜单题中比较常见的做法，目的是为了防止在选手做题时保持长时间的连接虚耗资源（如果需要出题可以效仿这种做法）
在使用gdb调试时，接收到alarm的信号时只会提醒，不会退出程序，因此在进行实际调试时，只需要gdb attach到相应的进程号就可以避免接收到信号退出。
### 2\. 现在我们开始对题目进行逆向
配合ida的反编译功能，并对一些变量进行重新命名，同时将一些结构体进行自定义，我手动写出了题目的源码（不是原始代码），相对来说可读性比较高了，在这里进行展示，以供大家参考。
    //先展示两个结构体
    struct airport{
    	char* airport_name;
    	plane* planes[16];
    };
    struct plane{
    	char plane_name[32];
    	char* company_name;
    	struct airport* airport;
    	struct plane* ubk;
    	struct plane* ufd;
    	/*
    		这两个指针是为了维护plane的双链表管理结构的指针。
    		为了避免发生混淆，这里需要特别指出，这里的ubk，ufd并不是libc中chunk结构的fd与bk，而是由这个程序自己维护的双链表指针。
    	*/
    	void* free_pointer;
    	/*
    		这里的指针指向了一个函数的入口，这个入口后来被证实是一个包装过的free()函数，在程序中，如果释放plane结构体，会选择调用这个指针所指向的函数，而不是libc的free()函数（虽然实际上就是调用free()函数）。
    		这显然是一种面向对象的思想，虽然在c程序中这样写显得很愚蠢而且很刻意——改写这个指针就是我们exploit的最后一步，但是在实际场景中，面向对象的思想确实会写出这种代码，因此还是有一定的指导意义的。
    	*/
    };
    /*
    	为了方便之后的分析，在这里放上结构体中各个成员的偏移量：
    struct airport:
    00000000 airport         struc ; (sizeof=0x88, align=0x8, mappedto_13)
    00000000 airport_name    dq ?                    ; offset
    00000008 planes          dq 16 dup(?)            ; offset
    00000088 airport         ends
    struct plane:
    00000000 plane           struc ; (sizeof=0x48, align=0x8, mappedto_10)
    00000000                                         ; XREF: .bss:plane_header/r
    00000000 plane_name      db 32 dup(?)
    00000020 company_name    dq ?                    ; offset
    00000028 airport         dq ?
    00000030 ubk              dq ?                    ; offset
    00000038 ufd              dq ?                    ; XREF: select_plane+52/r ; offset
    00000040 free_pointer    dq ?                    ; offset
    00000048 plane           ends
    ！！！！！！这里需要注意，plane结构实际上只使用了结构体的前0x40个字节的位置，但是在申请时申请了0x48的空间。
    */
    //再强调几个全局变量，这几个全局变量在整道题目中有重要意义
    /*
    airports，用来管理所有airport的一个指针数组：
    .bss:0000000000202080 ; airport *airports[16]
    .bss:0000000000202080 airports        dq 10h dup(?)
    */
    airport *airports[16];
    /*
    plane_header，是管理所有plane的结构，本质上是plane链表的链表头
    .bss:0000000000202100 ; plane plane_header
    .bss:0000000000202100 plane_header    plane 
    在初始化后与plane具有相同大小，同样是0x48
    */
    plane plane_header;//在usr_init函数中会初始化为0
    /*
    companies, 这是一个指针数组，每个元素都指向一个公司名字字符串，我们的exploit核心之一就在这里，后面会详细介绍。
    .data:0000000000202020 ; char *companies[]
    .data:0000000000202020 companies       dq offset aBoeing       ; DATA XREF: buy_plane+2A↑o
    .data:0000000000202020                                         ; buy_plane+B4↑o
    .data:0000000000202020                                         ; "Boeing"
    .data:0000000000202028                 dq offset aAirbus       ; "AirBus"
    .data:0000000000202030                 dq offset aLockheed     ; "Lockheed"
    .data:0000000000202038                 dq offset aBombardier   ; "Bombardier"
    .data:0000000000202038 _data           ends
    */
    char *companies[4];
    char aBoeing[7] = "Boeing\0"
    char aAirbus[7] = "AirBus\0";
    char aLockheed[9] = "Lockheed\0";
    char aBombardier[11] = "Bombardier\0";
    companies[0] = aBoeing;
    companies[1] = aAirbus;
    companies[2] = aLockheed;
    companies[3] = aBombardier;
    //main函数，offset=0x0000000000001530
    int main(){
    	usr_init();
    	operate();
    }
    //usr_init函数，offset=0x000000000000147C
    airport* usr_init(){
    	struct airport* result;
    	signed int i;
    	setvbuf(stdin, 0, 2, 0);
    	setvbuf(stdout, 0, 2, 0);
    	setvbuf(stderr, 0, 2, 0);
    	alarm(0x3C);
    	result = memset(&plane_header, 0, 0x48);
    //将plane_header的0x48个字节全部初始化为0，链表头不指向任何下一个节点，即现在并没有任何一架飞机
    	for(i = 0; i = 0)
    		result = (unsigned int)v1;
    	else
    		result = 0xFFFFFFFFLL;
    	return result;
    }
    /*
    	这个函数的逻辑相对来说也比较清晰，其中嵌套的函数input2addr()稍后再分析，现在我们来理清这个函数的某些特点：
    	1.我们注意到虽然input_choice()函数确实会返回一个值，但是在operate()函数中并没有对返回值进行接收，返回值凭空出现在了savedreg变量中，实际上在这里（这道题目中只有operate()中的这个地方是这样）变量的值是由寄存器传递的，因此在反编译中并不能体现出来。这一点只需要好好看一看汇编代码就可以明白。
    	2.这个函数只接受正值输入，如果输入负值就会返回-1，这个特性在之后会用到。
    */
    //input2addr函数，offset=0x0000000000000AA0
    int input2addr(char *maddr, int length){
    	char buf;
    	usigned int i;
    	for( i = 0; i  0; ++i ){
    		maddr[i] = buf;
    		if( maddr[i] = '\n' ){
    			maddr[i] = 0;
    			return i;
    		}
    	}
    	return i;
    }
    /*
    	像这样的输入函数一直是我们乐于分析的对象，因为这种函数一不小心就会存在越界情况，无论是严重的overflow，还是单字节的off-by-one都能对我们解题带来难以想象的帮助；并且对于录入方法的分析，可以让我们了解哪些字符会截断我们的输入，这对我们之后地址和shellcode的选择有重要的指导。
    	1.这个函数采用read方法进行录入，则不会被截断，交给程序进行手动截断；
    	2.当程序进行录入时会严格检查边界，当录入长度到达length时，就会强行截断，同时在检测到输入'\n'时也会截断，并将'\n'改为'\0'作为字符串的结尾。这里需要注意，当输入超过了length时，并不会将最后一个字符改为'\0'，因此在这里是有可能触发非法读的（非法写是不会出现的），在后面的函数中给我们会看到，每当调用了这个函数，之后调用者会手动将 maddr[length-1] 更改为'\0'，因此在这个上下文中，这个函数是比较安全的。
    */
    //接下来分析四个一级菜单函数
    //buy_plane函数，offset=0x0000000000000BED
    plane* buy_plane(){
    	struct plane *result;
    	int tmp;
    	int choice;
    	struct plane *plane;
    	puts("which company? ");//其实这句话的单词被出题人拼错了:p
    	tmp = 0;
    	while(tmp company_name = companies[choice - 1];
    	//这个题目的关键漏洞之一，这里并没有进行越界检查
    	printf("Input the plane's name: ");
    	input2addr(plane->plane_name, 0x20);
    	/*
    		这里为了避免读者在看源码时存在疑问，需要解释一下，根据ida的反编译结果，这个语句本来应该是这样：
    		input2addr(plane, 0x20);
    		但是根据之前的input2addr()函数的分析，可以知道这个函数只关心第一个参数所指向的地址，而在plane结构体中plane_name[0x20]数组的偏移量为0x00，因此这里传入plane参数或是plane_name参数本质上是没有任何区别的，这里我为了增加逻辑上的可读性，将第一个参数改为了plane->plane_name,对结果没有任何影响。特此说明。
    	*/
    	plane->plane_name[0x1F] = 0;
    	/*
    		这里就是之前所提到的，在调用了input2addr()函数之后，调用者将最后一个字节手动改为了'\0'，保证了程序的鲁棒性。
    		虽然这样做保证了安全，但是却给了我们启发——我们不可能永远都记得这个函数调用之后需要手动将最后一个字节清零，因此在稍大一点的工程中这里是一定会出现漏洞的，因此我们在编程时应该注意在函数中做好维护工作，保证函数的功能在逻辑上的严密性以及完整性。
    	*/
    	plane->airport = 0;
    	add_plane_to_linklist(plane);
    	result = plane;
    	plane->free_pointer = wrapped_free;
    	return result;
    }
    /*
    	这里出现了本题中第一个关键漏洞，在 plane->company_name = companies[choice -1] 这一条语句中并没有考虑到choice超过4的情况（从逻辑上说，companies数组只存在4个元素，因此 choice >= 4 的情形应该一律算作越界），所以我们可以在这里将plane->company_name数组尽情地赋值为我们想要的地址。
    	choice是之前调用input_choice()函数的返回值，而在之前的分析我们已经知道，这个函数只会返回正的值，负的值一律变为-1，因此从大方向来说，我们只能将plane->company_name赋值为比companies数组更高的地址（offset >= 0x0000000000202020）。
    	我们的第一反应是如果能够将它指向got表，也许就可以泄露libc的地址，但是很可惜，我们的got表位于更低的地址，因此无法这么做。让我们将眼光向广袤的高地址区域探索，我们发现了一个引起我们兴趣的地方——plane_header,offset = 0x0000000000202100，而plane_header->ufd的地址为offset(plane_header)+0x30+0x10（这里需要解释一下，0x30是ufd成员在plane_header结构体的偏移量，而0x10是堆管理结构中的prev_size以及size域的空间），换算成与companies数组的索引为 (offset(plane_header) + 0x30 + 0x10 - offset(companies))/0x8 = 36，即companies[36]的值就是一个指向某plane结构体的指针！（注意这里的指针并不是指向chunk的头部，而是指向chunk头部地址加0x10，因为在malloc时返回的是可用空间的地址） 
    	在这里，我们不妨将正在创建的plane结构体的名字叫做op_plane，一旦我们将plane_header->ufd的值赋值给了这里的op_plane->company_name,并且在赋值之前plane_header->ufd已经指向了一个plane结构体（我们不妨把它叫做old_plane），那么此时的op_plane->company_name就正好指向old_plane->plane_name。下面是一个简单的示意图：
                                 plane_header                                          
                          +-----------------------+                                    
                          |       prevsize        |                                    
                          +-----------------------+                                    
                          |         size          |                                    
                          +-----------------------+                   old_plane        
                          |                       |           +-----------------------+
                          |        ......         |           |       prevsize        |
                          |                       |           +-----------------------+
    equivalent to         +-----------------------+           |         size          |
    companies[36] ---+--->|          ufd          |-----+---->+-----------------------+