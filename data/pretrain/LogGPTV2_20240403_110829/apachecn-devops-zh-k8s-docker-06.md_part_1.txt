# 六、服务、负载平衡和外部域名系统
当您将一个应用部署到 Kubernetes 集群时，我们的豆荚会被分配短暂的 IP 地址。由于分配的地址可能会随着 pod 的重新启动而改变，因此您永远不应该使用 pod IP 地址来定位服务；相反，您应该使用服务对象，它将根据标签将服务 IP 地址映射到后端 pods。如果您需要为外部请求提供服务访问，您可以部署一个入口控制器，它将根据每个网址向外部流量公开您的服务。对于更高级的工作负载，您可以部署负载平衡器，它为您的服务提供外部 IP 地址，允许您向外部请求公开任何基于 IP 的服务。
我们将解释如何通过在我们的 KinD 集群上部署它们来实现这些。为了帮助我们理解入口如何工作，我们将向集群部署一个 NGINX 入口控制器，并公开一个网络服务器。由于入口规则基于传入的网址名称，我们需要能够提供稳定的域名。在企业环境中，这将使用标准的域名系统来完成。由于我们使用的是没有 DNS 服务器的开发环境，因此我们将使用 nip.io 的流行服务。
在这一章的最后，我们将解释如何使用 ETCD 集成 dns 区域和 Kubernetes 孵化器项目“外部 DNS”来动态注册服务名称。
在本章中，我们将涵盖以下主题:
*   将工作负载暴露给请求
*   负载平衡器简介
*   第 7 层负载平衡器
*   第 4 层负载平衡器
*   使服务名对外可用
# 技术要求
本章有以下技术要求:
*   一台新的 Ubuntu 18.04 服务器，内存至少为 4 GB。
*   使用第 4 章 中的配置配置的 KinD 集群，使用 KinD 部署 Kubernetes。
您可以在 GitHub 资源库[中访问本章的代码。](https://github.com/PacktPublishing/Kubernetes-and-Docker-The-Complete-Guide)
# 将工作负载暴露给请求
Kubernetes 中最容易被误解的三个对象是服务、入口控制器和负载平衡器。为了展示您的工作负载，您需要了解每个对象是如何工作的，以及您可以使用的选项。让我们详细看看这些。
## 了解服务如何工作
正如我们在介绍中提到的，任何运行工作负载的 pod 在 pod 启动时都会被分配一个 IP 地址。许多事件会导致部署重新启动 pod，当 pod 重新启动时，它可能会收到一个新的 IP 地址。由于分配给 pod 的地址可能会改变，因此您永远不要直接针对 pod 的工作负载。
Kubernetes 提供的最强大的功能之一是能够扩展您的部署。当扩展部署时，Kubernetes 将创建额外的单元来处理任何额外的资源需求。每个 pod 都有一个 IP 地址，您可能知道，大多数应用只针对一个 IP 地址或名称。如果您的应用从单个吊舱扩展到十个吊舱，您将如何利用额外的吊舱？
服务使用 Kubernetes 标签在服务本身和运行工作负载的 pods 之间创建动态映射。运行工作负载的单元在启动时会被标记。每个 pod 都有部署中定义的相同标签。例如，如果我们在部署中使用 NGINX web 服务器，我们将创建一个部署，其清单如下:
```
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    run: nginx-frontend
  name: nginx-frontend
spec:
  replicas: 3
  selector:
    matchLabels:
      run: nginx-frontend
  strategy: {}
  template:
    metadata:
      labels:
        run: nginx-frontend
    spec:
      containers:
      - image: bitnami/nginx
        name: nginx-frontend
```
该部署将创建三个 NGINX 服务器，每个 pod 都标有`run=nginx-frontend`。我们可以通过使用 kubectl 列出豆荚，添加`the --show-labels`选项`kubectl get pods --show-labels.`来验证豆荚是否被正确标记
这将列出每个 pod 和任何相关标签:
```
nginx-frontend-6c4dbf86d4-72cbc           1/1     Running            0          19s    pod-template-hash=6c4dbf86d4,run=nginx-frontend
nginx-frontend-6c4dbf86d4-8zlwc           1/1     Running            0          19s    pod-template-hash=6c4dbf86d4,run=nginx-frontend
nginx-frontend-6c4dbf86d4-xfz6m           1/1     Running            0          19s    pod-template-hash=6c4dbf86d4,run=nginx-frontend
```
从前面的输出中可以看到，每个吊舱都有一个标签`run=nginx-frontend`。当您为应用创建服务时，您将使用此标签，将服务配置为使用标签来创建端点。
### 创建服务
现在您已经知道了服务将如何使用标签来创建端点，让我们讨论一下我们在 Kubernetes 中拥有的服务选项。
本节将介绍每种服务类型，并向您展示如何创建服务对象。每种类型将在一般性介绍后的单独章节中详细介绍。
Kubernetes 服务可以使用以下四种类型之一来创建:
![Table 6.1: Kubernetes service types ](img/Table_1.jpg)
表 6.1:固定服务模式
要创建一个服务，您需要创建一个服务对象，该服务对象包括`kind`、一个`selector`、一个`type`以及将用于连接到该服务的任何`ports`。对于我们的 NGINX 部署，我们希望在端口 80 和 443 上公开该服务。我们用`run=nginx-frontend`标记部署，因此当我们创建清单时，我们将使用该名称作为我们的选择器:
```
apiVersion: v1
kind: Service
metadata:
  labels:
    run: nginx-frontend
  name: nginx-frontend
spec:
  selector:
    run: nginx-frontend
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: 80
  - name: https
    port: 443
    protocol: TCP
    targetPort: 443
  type: ClusterIP
```
如果服务清单中没有定义类型，Kubernetes 将分配一个默认类型`ClusterIP`。
现在已经创建了一个服务，我们可以使用几个`kubectl`命令来验证它是否被正确定义。我们将执行的第一项检查是验证服务对象是否已创建。要检查我们的服务，我们使用`kubectl get services`命令:
```
NAME                   TYPE          CLUSTER-IP    EXTERNAL-IP   PORT(S)                  AGE nginx-frontend   ClusterIP   10.43.142.96              80/TCP,443/TCP   3m49s
```
在验证服务已经创建之后，我们可以验证端点已经创建。使用 kubectl，我们可以通过执行`kubectl get ep `来验证端点:
```
NAME                  ENDPOINTS                                                                                            AGE
nginx-frontend   10.42.129.9:80,10.42.170.91:80,10.42.183.124:80 + 3 more...   7m49s
```
我们可以看到服务显示了三个端点，但是它也在端点列表中显示了一个`+3 more`。由于输出被截断，get 的输出是有限的，它不能显示所有的端点。由于我们无法看到整个列表，如果我们描述端点，我们可以获得更详细的列表。使用 kubectl，您可以执行`kubectl describe ep `命令:
```
Name:         nginx-frontend
Namespace:    default
Labels:       run=nginx-frontend
Annotations:  endpoints.kubernetes.io/last-change-trigger-time: 2020-04-06T14:26:08Z
Subsets:
  Addresses:          10.42.129.9,10.42.170.91,10.42.183.124
  NotReadyAddresses:  
  Ports:
    Name   Port  Protocol
    ----         ----    --------
    http      80      TCP
    https  443   TCP
Events:  
```
如果您比较我们的`get`和`describe`命令的输出，可能会出现端点不匹配的情况。`get`命令总共显示了六个端点:它显示了三个 IP 端点，因为它被截断了，它还列出了一个`+3`，总共六个端点。`describe`命令的输出只显示了三个 IP 地址，而不是六个。为什么两个输出显示不同的结果？
`get`命令将列出地址列表中的每个端点和端口。由于我们的服务被定义为公开两个端口，每个地址将有两个条目，每个公开的端口一个。地址列表将始终包含服务的每个套接字，这可能会多次列出端点地址，每个套接字一次。
`describe`命令以不同的方式处理输出，在一行列出地址，所有端口都列在地址下面。乍一看，它可能看起来像`describe`命令缺少三个地址，但由于它将输出分成多个部分，它将只列出一次地址。所有端口都在地址列表下面；在我们的示例中，它显示了端口 80 和 443。
这两个命令显示相同的数据，但是呈现的格式不同。
现在服务暴露给集群，您可以使用分配的服务 IP 地址连接到应用。虽然这是可行的，但是如果删除并重新创建服务对象，地址可能会改变。您应该使用创建服务时分配给该服务的 DNS，而不是以 IP 地址为目标。在下一节中，我们将解释如何使用内部域名解析服务。
### 使用域名系统解析服务
在物理机和虚拟服务器的世界中，你可能已经瞄准了一个 DNS 记录来与服务器进行通信。如果服务器的 IP 地址发生了变化，那么假设您启用了动态 DNS，它不会对应用产生任何影响。这就是使用名称而不是 IP 地址作为端点的优势。
创建服务时，会创建一个内部 DNS 记录，集群中的其他工作负载可以查询该记录。如果所有的 pods 都在同一个名称空间中，那么我们可以使用一个简单、简短的名称来定位服务，比如，`mysql-web`；但是，您可能有一些服务将被多个命名空间使用，当工作负载需要与它们自己的命名空间之外的服务通信时，您必须使用全名来定位该服务。下面是一个示例表，显示了如何从名称空间中定位服务:
![Table 6.2: Internal DNS examples ](img/Table_2.jpg)
表 6.2:内部域名系统示例
从上表中可以看到，您可以使用标准命名约定*来定位另一个命名空间中的服务。 .svc. * 。在大多数情况下，当访问不同名称空间的服务时，您不需要添加集群名称，因为它应该自动追加。
为了构建一般服务概念，让我们深入了解每种类型的细节，以及如何使用它们来访问我们的工作负载。
## 了解不同的服务类型
创建服务时需要指定服务类型。分配的服务类型将配置服务如何暴露给集群或外部流量。
### 集群 IP 服务
最常用，也最容易被误解的服务类型是集群 IP。如果您回顾我们的表格，您可以看到集群 IP 类型的描述指出服务允许从集群内部连接到服务。ClusterIP 类型不允许任何外部流量进入公开的服务。
将服务仅暴露给内部集群工作负载的想法可能是一个令人困惑的概念。为什么要公开只能由集群中的工作负载使用的服务？
一分钟，让我们完全忘记外部流量。我们需要专注于我们当前的部署以及每个组件如何交互来创建我们的应用。使用 NGINX 示例，我们将扩展部署，以包括一个为 web 服务器服务的后端数据库。
我们的应用将有两个部署，一个用于 NGINX 服务器，一个用于数据库服务器。NGINX 部署将创建五个副本，而数据库服务器将由一个副本组成。NGINX 服务器需要连接到数据库服务器来为网页提取数据。
到目前为止，这是一个简单的应用:我们已经创建了我们的部署，一个名为网络前端的 NGINX 服务器服务，以及一个名为`mysql-web`的数据库服务。为了从 web 服务器配置数据库连接，我们决定使用一个以数据库服务为目标的配置图。我们在配置映射中使用什么作为数据库的目标？
你可能会想，既然我们使用的是单个数据库服务器，我们可以简单地使用 IP 地址。虽然这在最初是可行的，但是对 pod 的任何重启都会改变地址，并且网络服务器将无法连接到数据库。应该始终使用服务，即使您只针对单个 pod。由于数据库部署称为 mysql-web，因此我们的 ConfigMap 应该使用该名称作为数据库服务器。
通过使用服务名称，当 pod 重新启动时，我们将不会遇到问题，因为服务的目标是标签而不是 IP 地址。我们的网络服务器将简单地向 Kubernetes DNS 服务器查询服务名称，该名称将包含具有匹配标签的任何 pod 的端点。
### 节点端口服务
节点端口服务将向集群内部以及网络外部公开您的服务。乍一看，当你想要公开一个服务时，这可能看起来像是进入服务。它向所有人公开您的服务，但是它是通过使用一种叫做节点端口的东西来实现的，并且使用它进行外部服务访问可能变得难以维护。当用户需要通过网络访问服务时，使用节点端口或记住它们也非常令人困惑。
要创建使用节点端口类型的服务，您只需要在清单中将类型设置为节点端口。我们可以使用与之前公开集群 IP 示例中的 NGINX 部署相同的清单，只是将`type`更改为`NodePort`:
```
apiVersion: v1
kind: Service
metadata:
  labels:
    run: nginx-frontend
  name: nginx-frontend
spec:
  selector:
    run: nginx-frontend
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: 80
  - name: https
    port: 443
    protocol: TCP
    targetPort: 443
  type: NodePort
```
我们可以使用 kubectl 来查看端点，就像我们查看集群 IP 服务的一样。运行`kubectl get services`将向您显示新创建的服务: