The Trusted Signature Creation (TSC) protocol is designed to facilitate a secure interaction between the Signing Entity (SE) and the Service Provider (SP). The SE, an independent party, uses the application reader and a PIN pad. The primary goal of the TSC protocol is to establish a secure channel between the SE and SP, transmit the data to be signed to the smartcard held by the SE, and deliver the signed document first to the SP and then to the Application Provider (AP) to complete the transaction.

### UML Model of the TSC Protocol
The UML model of the TSC protocol is illustrated in Figure 8. For clarity, the AP has been omitted from the model, as its role is limited to receiving the signed data in the final message. Similarly, any additional notes present in the full model have been removed for simplicity. The notation used in the model is explained in Figure 9.

### Notation
- **SE**: Signing Entity
- **SP**: Service Provider
- **PK_AUT(A)**, **SK_AUT(A)**: Public and private keys for authentication
- **PK_SIG(A)**, **SK_SIG(A)**: Public and private keys for signatures
- **SM_KEY**: Shared session key
- **PIN**: SE's private identification number
- **RND(A)**, **PART_KEY(A)**: Random numbers generated by A
- **DTBS**: Data to be signed by SE
- **TRANS_ID**: Transaction (session) identification number

### TSC Subprotocol A
1. **Initialization**:
   - SE sends `{SE, PK_AUT(SE)}{SK_SIG(CA)}, TRANS_ID` to SP.
   - SP responds with `RND(SP)`.

2. **Key Exchange**:
   - SE sends `RND(SP), PART_KEY(SE), RND(SE)` to SP.
   - SP responds with `{{PART_KEY(SE), RND(SP), SP}{SK_AUT(SE)}}{PK_AUT(SP)}, RND(SE)`.

3. **Session Key Establishment**:
   - SE sends `{{PART_KEY(SP), RND(SE), SE}{SK_AUT(SP)}}{PK_AUT(SE)}, RND(SP)` to SP.
   - Both parties compute `SM_KEY = f1(PART_KEY(SE), PART_KEY(SP))` and `SM_KEY_MAC = f2(PART_KEY(SE), PART_KEY(SP))`.

### TSC Subprotocol B
4. **PIN Verification**:
   - SE sends `{PIN}{SK}, {SK}{PK_AUT(SP)}` to SP.
   - SP responds with `{PIN}{SM_KEY}, h(PIN, SM_KEY_MAC)`.

5. **Data Signing**:
   - SE sends `{g(DTBS)}{SM_KEY}, h(g(DTBS), SM_KEY_MAC)` to SP.
   - SE sends `{{g(DTBS)}{SK_SIG(SE)}}{SM_KEY}, h({g(DTBS)}{SK_SIG(SE)}, SM_KEY_MAC)` to SP.

### Formal Modeling with FOCUS
The FOCUS formal method, along with its supporting tool AutoFocus, was used to model the TSC protocol. The AutoFocus tool, originally intended for developing reliable embedded systems, was adapted for cryptographic protocol analysis due to its ability to model all relevant cryptographic operations and functions.

#### Components of the FOCUS Model
- **System Structure Diagrams (SSD)**: Represent agents and communication channels.
- **State Transition Diagrams (STD)**: Illustrate the internal behavior of agents.
- **Extended Event Traces Diagrams (EET)**: Show how a protocol session is run.
- **Data Type Definition (DTD) Specifications**: Declare types of messages, variables, and functions.

#### Decomposition of the TSC Protocol
Due to the complexity of the protocol, it was divided into two subprotocols:
- **TSC Subprotocol A**: Establishes secret keys `SM_KEY` and `SM_KEY_MAC`.
- **TSC Subprotocol B**: Provides the AP and SP with a properly signed hash of the document to be signed, `g(DTBS)`.

### Verification and Results
The properties of the formal models were analyzed using a model checker. For Subprotocol A, it was verified that the secret keys `SM_KEY` and `SM_KEY_MAC` are correctly exchanged and authenticated without compromising their secrecy.

For Subprotocol B, a potential flaw was discovered: the intruder can intercept the user's PIN number. This attack can be performed by:
1. Intercepting and storing message five: `{PIN}{SK}, {SK}{PK_AUT(SP)}`.
2. Replaying the captured message during the intruder's own session.
3. Receiving a message `{PIN}{SM_KEY_A}`, where `SM_KEY_A` is known only by SP and the intruder.
4. Retrieving the PIN as the intruder knows `SM_KEY_A`.

To mitigate this, including `TRANS_ID` in the fifth message, encrypted with the session key `SK`, alongside the PIN, could prevent the replay attack.

### Conclusion
The TSC protocol was analyzed using the FOCUS formal method, and a potential vulnerability was identified and addressed. No further anomalies were found in the other protocols designed for the distributed digital signatures system.