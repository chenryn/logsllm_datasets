level, either one packet at a time or considering several packets
together.
Malicious client attacks. The ﬁrst set of basic attacks we
developed interfere with packet delivery or packet content.
Packet delivery attacks model a malicious client who either
ignores certain packets entirely or who delays processing
packets in order to interfere with the protocol. Packet content
attacks model a malicious client who sends packets that contain
unexpected or invalid values.
We consider the following packet delivery attacks: drop,
duplicate, delay, and batch.
Drop: The attack proxy intercepts and drops a packet with
a given probability speciﬁed as a parameter in percent. This
attack may impact many of the core features of transport
protocols from connection establishment to congestion control,
depending on when it is applied.
Duplicate: The attack proxy intercepts a packet and then
sends multiple copies of it to the destination. The number
of duplicates to inject is speciﬁed as a parameter. This at-
tack could impact many features of a transport protocol, but
fairness and congestion control are particularly vulnerable.
Acknowledgment duplication, in particular, can cause fairness
problems [11].
Delay: The attack proxy intercepts a packet and then inserts
a delay before sending it on. The delay is speciﬁed as a
parameter in seconds. Depending on the length of the delay,
this attack may cause reordering or retransmission situations.
It may also interfere with RTT estimation, which is usually a
key component of retransmission algorithms.
Batch: The attack proxy intercepts packets and waits some
amount of time before sending them all at once. The wait
time is a parameter speciﬁed in seconds. This attack is de-
signed to ﬁnd attacks similar to the Shrew and Induced-Shrew
attacks [9], [8].
We also consider the following packet content manipula-
tion attacks: reﬂect and lie.
Reﬂect: The attack proxy intercepts a packet and sends
it back to its originating host. This attack models sending
an unexpected, but potentially valid, packet. It is particularly
likely to disrupt connection establishment and termination.
Consider, for example, the TCP Simultaneous Open Attack
where an attacker responds to a SYN packet with another SYN
packet [7].
Lie: The attack proxy intercepts a packet and modiﬁes a
speciﬁed ﬁeld before sending it on. Modiﬁcations supported
include setting particular values, setting random values, or
adding/subtracting/multiplying/dividing the current value by
some factor. The ﬁeld and the type of modiﬁcation are pa-
rameters. We use a list of modiﬁcations chosen based on the
ﬁeld-type to be likely to cause unexpected behavior. These
include setting values like 0, the maximum value a ﬁeld can
handle, and the minimum value a ﬁeld can handle. This attack
may impact all of the core features of transport protocols from
connection establishment to congestion control, depending on
when and where it is applied.
Off-path attacks. The second set of attacks we developed
are attacks on a connection by an off-path third party. These
attacks spoof packets such that they appear to come from the
client or the server in a target connection. We consider the
following off-path attacks: inject and hitseqwindow.
Inject: The attack proxy injects a new packet into the net-
work. This attack contains a number of parameters describing
the ﬁelds in the packet, its source and destination, and when
it should be injected (in seconds from emulation start). Many
parts of a transport protocol may be affected by such an attack,
from reliability to connection tear down.
HitSeqWindow: This attack is very similar to inject. Instead
of injecting just one packet, the attack proxy injects a whole
series of packets with their sequence numbers spanning the
whole possible sequence range. This attack is designed to
look for attacks similar to the Reset and Syn-Reset attacks
on TCP [12], [3].
Note that one can also consider more complex attack
strategies that combine the basic attacks described above into
strategies consisting of sequences of actions. We currently
support only the basic attacks described above.
V.
IMPLEMENTATION
In this section, we discuss how we implement SNAKE.
We ﬁrst present an overview of the whole platform and then
discuss our attack proxy, state tracking, and parallelism in more
detail. See also Figure 2.
66
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:11:45 UTC from IEEE Xplore.  Restrictions apply. 
virtual machines from snapshots, starts the network emulator,
conﬁgures the attack proxy, and starts the test. Once the test
completes, it collects the performance data and any feedback
from the attack proxy and sends this back to the controller.
The controller is implemented in a combination of C and
Perl and is responsible for choosing strategies to execute and
determining attacks based on the performance data returned by
the executor. Instead of generating all of the attack strategies at
once, we implement our controller to generate them a few at a
time in response to feedback about packet types and protocol
states observed by the state tracking component of our attack
proxy. This is equivalent to generating all the strategies at once
but is a little more ﬂexible.
B. Attack Proxy
Our attack proxy intercepts all packets along the ingress
and egress paths in NS-3. We modify NS-3 to allow us to
designate malicious nodes and only intercept packets to or
from those nodes. The interception is done in NS-3’s tap-
bridge module, which connects NS-3 to outside tap-devices
serving the virtual machines.
When the attack proxy receives a packet, it examines it to
determine the protocol. Protocols not of interest are returned
to the tap-bridge for normal processing. For packets of the
target protocol, the type of the packet is examined and the
sender’s protocol state is identiﬁed from the state tracking
system. If there is a matching strategy, the basic attack is
performed on the packet. To accomplish this, our proxy needs
a description of the protocol packet header format. We use
a simple language to describe the header structure and then
automatically generate C++ code to parse and modify this
header.
Our malicious proxy is also capable of injecting packets
into the network. Proper packet headers are generated from
the protocol description using our automatically generated C++
protocol processing code, and the resulting packet can then be
sent using standard NS-3 packet send mechanisms.
C. State Tracking
We implement our protocol state machine tracking inside
the attack proxy. The tracker takes a description of the protocol
state machine, written in the dot language [27], as input. This
description contains the state transitions, including the packets
or actions that cause these transitions or result from them. The
use of a standardized graph language like dot to represent the
state machine enables the use of SNAKE on a variety of two-
party protocols simply by swapping out the state machine and
packet header descriptions.
Our state machine tracker watches the packets that pass
through the proxy and uses the state machine transition rules
to infer what state the client and server are currently in. The
state machine tracker also collects some useful statistics about
each state in the protocol. This includes what packet types and
how many packets were sent and received during each state. It
also includes the amount of time the host spent in each state
and the number of times it visited that state. These statistics
are extracted from the attack proxy by the executor at the end
of each test and then sent to the controller along with the
performance information.
Fig. 3. Test Network Topology
A. Overview
We separate the functionality of SNAKE into two compo-
nents: a controller that generates attack strategies and one or
more executors that test the strategies.
The controller generates and selects the attack strategies
based on the packet formats and the state machine transitions
obtained from the protocol speciﬁcation supplied by the user.
An executor ﬁrst runs a non-attack test and then, for each
strategy, runs the attack scenario and reports performance
information back to the executor, who determines whether
an attack took place or not. SNAKE uses parallelism to run
multiple executors concurrently and speed up the attack ﬁnding
process.
The executor controls the execution of a testing scenario
consisting of a set of four virtual machines each running
an unmodiﬁed instance of the protocol under test. These
virtual machines are connected in a dumbbell topology using
a network emulator and tap devices. We use KVM as the
virtualization environment and NS-3 for network emulation.
A dumbbell topology consists of two machines on each
side of a bottleneck link as shown in Figure 3. In our setup,
the two machines on one side act as servers while the two
on the other act as clients. We conﬁgured our attack proxy to
be between one of the clients and the bottleneck link. The
other client makes a connection to a server that we refer to as
competing connection, as it will compete with our proxy for
bandwidth on the bottleneck link. This topology allows us to
test both attacks that impact a connection to which the attacker
is a party and attacks where the attacker is an off-path third
party. The ﬁrst type of attack often represents an attack on
the fairness of the transport protocol or a resource-exhaustion-
based denial of service attack against a server. The second type
of attack often represents an off-path attacker who wishes to
terminate or slow a connection between two other hosts. See
Section III-C and Figure 1 for a more detailed discussion of
these types of attacks.
To determine successful attacks, the controller examines
the performance of the client without the attack proxy (Client
2 in Figure 3) and the number of connections the server
is maintaining at
the end of the test. This information is
obtained by the executor. Speciﬁcally, the executor calculates
performance as the quantity of data transferred during the test
and queries the OS to determine the number of connections
maintained by the server, for example by using the netstat
command on UNIX-based systems. After the test completes,
the executor sends these metrics to the controller, which
compares the received metrics observed after the tested attack
with the metrics observed in a non-attack test run.
The executor is implemented as a Perl script that listens
for strategies from the controller and then initializes the
77
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:11:45 UTC from IEEE Xplore.  Restrictions apply. 
D. Parallelism
We have implemented SNAKE as separate controller and
executor modules to enable parallelism. These modules can
even reside on separate systems, as all communication is done
via TCP. Because testing each strategy takes about two minutes
this becomes a highly parallel problem, with linear speedup
limited only by the amount of processing power that can be
thrown at the problem.
Each executor requires signiﬁcant resources, as it will
start four virtual machines and an NS-3 instance. In prac-
tice, we found that running about one executor for every
six hyperthreads resulted in good performance. The memory
requirements per executor depend primarily on the demands
of the implementation and operating system under test. In our
tests, they ranged around 4-8GB per executor.
Our controller requires little processing power since its
primary responsibility is to identify attacks based on the per-
formance information returned by the executors and to supply
new attack strategies to the executors. In our experiments, we
did not ﬁnd it necessary to dedicate a core to the controller.
VI. RESULTS
We applied SNAKE to test two protocols and a total of ﬁve
transport protocol implementations on four different operating
systems. The two protocols we tested were TCP and DCCP.
For TCP, we tested implementations in Linux 3.0.0, Linux
3.13, Windows 8.1, and Windows 95. For DCCP, we focused
on the implementation in Linux 3.13. We were able to ﬁnd
attacks on all implementations, including several previously
unknown attacks. We discuss these protocols and present our
ﬁndings below, and summarize them in Tables I and II.
All of these tests were run on a hyperthreaded 16 core
Intel R(cid:2) Xeon R(cid:2) 2.3GHz system with 94GB of RAM. We ran
ﬁve separate executors simultaneously. Testing each imple-
mentation required about 60 hours, but this duration could be
decreased by running more executors.
We deﬁne successful attacks as strategies that result in an
increase or decrease in achieved throughput of at least 50%
compared to the non-attack case or that cause the server-
side socket to not be released normally after the connection
is closed. This throughput
threshold is based roughly on
the notion that reasonable competition for network ﬂows is
achieving throughput within a factor of two of each other [23],
[24] as well as on experience.
A. TCP
TCP [26] is the most common transport protocol today,
underlying the majority of all Internet trafﬁc. Its goal is to
provide a reliable byte-stream between end hosts. As a result,
it implements reliability, in-order delivery, and ﬂow control.
It also attempts to ensure fairness and prevent congestion
collapse by implementing congestion control.
A TCP connection is started by a handshake between the
two end hosts [26]. This allows both endpoints to inform
each other of their initial sequence numbers and any important
options. A similar handshake is performed at the end of the
connection to make sure that all data has been delivered before
the connection terminates.
Reliability is achieved by using sequence numbers and ac-
knowledgments. The sender assigns a sequence number to each
byte of data and then the receiver acknowledges the highest
consecutive byte of data it has received [26]. Retransmissions
are triggered either by a retransmission timeout (RTO) or
by receiving three duplicate acknowledgments, indicating the
reception of packets above some missing bytes [29].
TCP uses several ﬂags in its header to indicate certain types
of packets. The packets in the initial handshake are marked
with the SYN ﬂag; those in the ﬁnal handshake with the FIN
ﬂag. Reset packets use the RST ﬂag to abruptly terminate
a connection after an error. An ACK ﬂag indicates a valid
acknowledgment ﬁeld and is set on every packet after the initial
SYN. An important side-effect of using a set of ﬂags instead
of a single packet-type ﬁeld is that TCP implementations
have to decide how to handle unusual or nonsensical ﬂag
combinations, for example SYN+FIN+ACK.
TCP congestion control is a complex research area in its
own right; however, the basic scheme is Additive Increase,
Multiplicative Decrease [29] where TCP slowly increases its
sending rate by one packet per RTT in steady state and cuts
the sending rate in half on packet loss.
Testing. We tested TCP in one of its most popular settings.
Speciﬁcally, we utilized a large HTTP download with Apache
or IIS running on the servers and wget for clients.
For each of our TCP implementations, SNAKE tried be-
tween ﬁve and six thousand strategies and determined that be-
tween 128 and 163 of these (depending on the implementation)
resulted in signiﬁcant performance degradation or potential for
resource exhaustion. These attack strategies represent around
3% of the tested strategies.
On-path attacks. Some of the attacks we found, while
possible, require an on-path attacker. Strategies like modifying
the source or destination ports or the header size do prevent
a connection from being established, but these strategies are
not possible for off-path attackers and a malicious client
could simply not initiate a connection. These attacks can be
conducted by an on-path attacker. However, as TCP was not
designed to handle such attackers, we are not interested in
these types of attacks.
False positives. We found a few attacks that were false
positive strategies for each implementation. These were related
to the hitseqwindow basic attack. This attack injects numerous
packets in an attempt to get one packet into the sequence
window of a target connection. Unfortunately, the injection of
such a large number of packets tends to slow down the target