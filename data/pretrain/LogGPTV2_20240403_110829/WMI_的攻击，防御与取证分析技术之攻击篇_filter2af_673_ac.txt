    ROOTCIMV2:Win32_ThreadStartTrace
    ROOTCIMV2:Win32_VolumeChangeEvent
    ROOTCIMV2: Msft_WmiProvider*
    ROOTDEFAULT:RegistryKeyChangeEvent
    ROOTDEFAULT:RegistryValueChangeEvent
以下外部事件查询形式可以用来捕获每一个进程已加载的所有可执行模块(用户模式和内核模式):  
SELECT * FROM Win32_ModuleLoadTrace
事件消费者
事件消费是一个派生自 __EventConsumer 系统类的类,它表示了在事件触发时的动作。系统提供了以下有用的标准事件消费类:
    LogFileEventConsumer - 将事件数据写入到指定的日志文件
    ActiveScriptEventConsumer - 执行嵌入的 VBScript 或 JScript 脚本 payload
    NTEventLogEventConsumer - 创建一个包含事件数据的事件日志条目
    SMTPEventConsumer - 发送一封包含事件数据的电子邮件
    CommandLineEventConsumer - 执行一个命令行程序
攻击者在响应他们的事件时,大量使用 ActiveScriptEventConsumer 和 CommandLineEventConsumer
类。这两个事件消费者为攻击者提供了极大的灵活性去执行他们想要执行的任何 payload 并且无需写入一个恶意的可执行文件或脚本到磁盘。
恶意的 WMI 持久化示例
图 5 中的 PowerShell 代码是修改过的存在于 [SEADADDY](https://github.com/pan-unit42/iocs/blob/master/seaduke/decompiled.py#L887) 恶意软件家族中的 WMI
持久性代码实例。该事件筛选器取自 PowerSploit 的持久性模块,目的是在系统启动后不久触发,事件消费者只需执行一个具有系统权限的可执行文件。图 5
中的事件筛选器在系统启动后的 200 和 320 秒之间被当作一个触发器。在事件被触发时事件消费者会执行已指定好的可执行文件。通过指定筛选器和一个
__FilterToConsumerBinding 实例将筛选器和消费者注册并将二者绑定在一起。
图 5 :SEADADDY 恶意软件的 WMI 持久性 PowerShell 代码
**0x08 WMI 攻击技术**
在攻击者的各个阶段的攻击生命周期中,WMI 都是极其强大的工具。系统提供了丰富的 WMI
对象、方法和事件,它们的功能极其强大,可以执行很多东西,从系统侦察、反病毒、虚拟机检测、代码执行、横向运动、隐蔽存储数据到持久性。它甚至可以打造一个纯粹的
WMI 后门且无需写入文件到磁盘。  
攻击者使用 WMI 有很多优势:
    它被默认安装在所有的 Windows 操作系统中,并且可以追溯到 Windows 98 和 NT4.0。
    对于执行代码,它可以隐蔽的运行 PSEXEC。
    WMI 永久事件订阅是作为系统权限运行的。
    防御者通常没有意识到 WMI 可以作为一个多用途的攻击向量。
    几乎每一个系统操作都能够触发一个 WMI 事件。
    除了在 WMI 存储库中存储之外不会对磁盘进行任何操作。
以下列表显示了几个如何使用 WMI 在攻击的各个阶段执行操作的例子。
系统侦察
许多恶意软件操纵者和渗透测试人员所做的第一件事情就是系统侦察, WMI 包含有大量的类可以帮助攻击者去感知他们的目标的环境。  
下面的 WMI 类是在攻击的侦察阶段可以收集数据的子集:
    主机/操作系统信息:Win32_OperatingSystem, Win32_ComputerSystem
    文件/目录列举: CIM_DataFile
    磁盘卷列举: Win32_Volume
    注册表操作: StdRegProv
    运行进程: Win32_Process
    服务列举: Win32_Service
    事件日志: Win32_NtLogEvent
    登录账户: Win32_LoggedOnUser
    共享: Win32_Share
    已安装补丁: Win32_QuickFixEngineering
反病毒/虚拟机检测
杀毒引擎检测
已安装的 AV 产品通常会将自己注册在 WMI 中的 AntiVirusProductclass 类中的 rootSecurityCenter 或者是
rootSecurityCenter2 命名空间中,具体是哪一个命名空间则取决于操作系统的版本。
一个 WMI 客户端可以通过执行下面的 WQL 查询示例来获取已安装的 AV 产品:
SELECT * FROM AntiVirusProduct
如下图所示:
通用的虚拟机/沙盒检测
恶意软件可以使用 WMI 对通用的虚拟机和沙盒环境进行检测。例如,如果物理内存小于 2 GB 或者是单核 CPU ,那么很可能操作系统是在虚拟机中运行的。
WQL 查询示例如下:
    SELECT * FROM Win32_ComputerSystem WHERE TotalPhysicalMemory < 2147483648
    SELECT * FROM Win32_ComputerSystem WHERE NumberOfLogicalProcessors < 2
图 6 显示了使用 WMI 和 PowerShell 对通用的虚拟机进行检测的操作:
图 6 :检测通用的虚拟机的 PowerShell 代码
VMware 虚拟机检测
下面的查询示例试图查找 VMware 字符串是否出现在某些 WMI 对象中并且检查 VMware tools 的守护进程是否正在运行:
    SELECT * FROM Win32_NetworkAdapter WHERE Manufacturer LIKE "%VMware%"
    SELECT * FROM Win32_BIOS WHERE SerialNumber LIKE "%VMware%"
    SELECT * FROM Win32_Process WHERE Name="vmtoolsd.exe"
    SELECT * FROM Win32_NetworkAdapter WHERE Name LIKE "VMware%"
图 7 演示的是使用 WMI 和 PowerShell 对 VMware 虚拟机进行检测的操作:
图 7 :检测 VMware 虚拟机的 PowerShell 代码
代码执行和横向运动
有两种常用的方法可以实现 WMI 的远程代码执行: Win32_Process 的 Create 方法和事件消费者。
Win32_Process 的 Create 方法
Win32_Process 类包含一个名为 Create 的静态方法,它可以在本地或远程创建进程。这种情况下 WMI 就等同于运行 psexec.exe
一样,只是没有了不必要的取证操作,如创建服务。下面的示例演示了在远程机器上执行进程:
一个更切实可行的的恶意使用案例是调用 Create 方法并且使用 powershell.exe 调用包含嵌入的恶意脚本。
事件消费者
实现代码执行的另外一个方法是创建一个 WMI 永久事件订阅。通常情况下, WMI 永久事件订阅被设计为对某些事件持续的做出响应。然而,如果攻击者想要执行一个
payload ,他们可能只需要配置事件消费者去删除其相应的事件筛选器、消费者和绑定到消费者的筛选器。这种技术的优点是 payload
是作为系统进程运行的并且避免了以明文方式在命令行审计中显示 payload。例如,如果采用了一个 VBScript 的
ActiveScriptEventConsumer payload,那么唯一创建的进程是以下 WMI 脚本宿主进程:
    %SystemRoot%system32wbemscrcons.exe -Embedding
作为攻击者,为了使用这个类作为攻击向量,将会遇到的挑战是去选择一个智能的事件筛选器。如果他们只是想要在几秒钟后触发运行 payload,那么可以使用
__IntervalTimerInstruction类。攻击者可能会选择在用户的屏幕锁定后执行 payload,在这种情况下,可以使用外部的
Win32_ProcessStartTrace 事件作为创建 LogonUI.exe 的触发器。攻击者可以在他们选择的一个适当的事件筛选器中获得创意。
隐蔽存储数据
攻击者巧妙的利用了 WMI 存储库本身作为一种来存储数据的手段。其中一种方法是可以通过动态创建 WMI 类并可以将任意数据存储作为该类的静态属性的值。图 8
演示了将一个字符串存储为静态的 WMI 类属性的值:
图 8 :创建 WMI 类的 PowerShell 代码示例
前面的示例演示了创建本地的 WMI 类。然而,也有可能可以创建远程的 WMI
类,这个将会在下一节进行说明。远程的创建和修改类的能力将使攻击者能够存储和检索任意数据,并将 WMI 变成 C2 的有效通道。
这取决于攻击者决定他们想用 WMI 存储库中存储的数据来做什么。接下来的几个例子阐述了攻击者如何利用此攻击机制的几个切实可行的例子。
使用 WMI 作为 C2 通道
使用 WMI 作为一种来存储和检索数据的机制,同样也可以使得 WMI 能作为一个纯粹的 C2 通道。这种使用 WMI 的聪明想法是由 Andrei
Dumitrescu 在他[ WMI Shell
](http://2014.hackitoergosum.org/slides/day1_WMI_Shell_Andrei_Dumitrescu.pdf)工具中被首次公开——利用创建和修改
WMI 的命名空间作为 C2 的通道。
实际上还有很多 C2 暂存机制可以采用, 如刚才讨论过的 WMI 类的创建。同样也有可能使用注册表进行数据转储作为 WMI C2
的通道。下面的示例演示了一些利用 WMI 作为 C2 通道的 POC 代码。
“Push” 攻击
图 9 演示了如何远程创建 WMI 类来存储文件数据。之后可以远程使用 powershell.exe 将该文件数据写入到远程文件系统。
图 9 : 远程创建 WMI 类并写入到远程文件系统的 PowerShell 代码
“Pull” 攻击
图 10 演示了如何使用注册表来收取 PowerShell 命令的结果。此外,许多恶意工具试图捕捉只是将输出转换为文本的 PowerShell
命令的输出。本示例利用了 PowerShell 对象序列化和反序列化方法来保持目前在 PowerShell 对象中丰富的类型信息。
图 10 : 从 WMI 类属性拉回命令数据的 PowerShell 代码
**0x09 WMI 提供程序**
提供程序是 WMI 的主干部分。几乎所有 WMI 类以及他们各自的方法都是在提供程序中实现的。提供程序是一个用户模式的 COM DLL
或者是一个内核驱动程序。每个提供程序都具有各自的 CLSID 用于在注册表中区别相关联的 COM 。此 CLSID 用于查找实现该提供程序的真正的 DLL
。此外,所有已注册的提供程序都有各自的 __Win32Provider WMI 类实例。例如,请思考以下已注册的处理注册表操作的 WMI 提供程序:
通过引用以下注册表值来找到 RegistryEventProvider 提供程序对应的 DLL:
HKEY_CLASSES_ROOTCLSID{fa77a74e-e109-11d0-ad6e-00c04fd8fdff}InprocServer32 :
(Default)
恶意的 WMI 提供程序
WMI 提供程序仅用来向用户提供合法的 WMI 功能,因此,恶意的 WMI 提供程序就可以被攻击者用于扩展 WMI 的功能。
[Casey Smith](https://github.com/jaredcatkinson/EvilNetConnectionWMIProvider)
和 [Jared Atkinson](https://github.com/davehull/Kansa/) 两人发布了恶意的 WMI 提供程序的 POC
,这些恶意的提供程序能够远程执行 Shellcode 和 PowerShell 脚本。恶意的 WMI
提供程序作为一种有效的持久性机制,它允许攻击者远程执行代码,只要攻击者拥有有效的用户凭据。