ble. This ﬂaw was recognized and diagnosed inde-
pendently by Mark Miller and Chris Riley prior to
the ﬁrst code release. Miller provided the solution,
which is to include the mutable’s name (including the
repository name) as part of its signed content. This
solution is incorporated in the ﬁrst OpenCM release.
7.3 Server Compromise
It is of course possible for a repository server to be
compromised. If the repository’s private signing key
is stolen, false content can be introduced in the repos-
itory or existing content can be destroyed. While
OpenCM cannot eliminate this vulnerability, it does
provide a means for recovery. Mutual replication be-
tween two repositories can ensure that deleted con-
tent is recoverable. Audit can, with some pain, de-
termine what has been changed improperly, allowing
it to be removed or recovered. Registry updates can
then be used to introduce a new signing key while
preserving the repository identity.
8 Future Plans
OpenCM is currently working, and has been in use in
our lab for several months on a number of software
projects. While it is meeting our needs for ﬁle-based
development, a number of opportunities exist for fu-
ture enhancement. Of these, the most pressing is the
need for a secure scripting language.
Scripting is needed in OpenCM for two reasons.
First, various transformations on data streams can
usefully be done on checkout and commit. It would
be useful if the implementation of these transforms
can be accomplished in a machine-independent way
but outside of the OpenCM TCB (which is already
too large for comfort). Second, there are automatable
consistency, access control, and process enforcement
policies whose enforcement we would like to em-
bed in the tool, but in many cases these policies
are project-speciﬁc. Use of a safe scripting lan-
guage seems like a reasonable approach. For this
application we are considering integration of W7, a
Scheme-derived security kernel created by Jonathan
Rees [Ree96]. We are also considering integra-
tion of a native implementation of the E capability-
secure scripting langage [MMF00], whose syntax
may prove more approachable to many users.
We are also interested in creating an OpenCM client
for workspace-oriented programming languages, as
has been done for (among others) VisualAge Java
and SmallTalk.
9 Related Work
9.1 CM Systems
There is a great deal of related prior work on con-
ﬁguration management in general. As this paper fo-
cuses on access control, we synopsize it only brieﬂy
here.
Interested readers may wish to examine the
more detailed treatment in the original OpenCM pa-
per [Sha02] or various other surveys on this subject.
RCS and SCCS
provide ﬁle versioning and
branching for individual ﬁles. Both provide lock-
ing mechanisms and a limited form of access con-
trol on locks (compromisable by modifying the ﬁle).
Neither provides either conﬁguration management or
substantive archival access control features. Further,
each ties the client name of the object to its content,
making them an unsuitable substrate for conﬁgura-
tion management.
NUCM uses an information architecture that is su-
perﬁcially similar to that of OpenCM [dHHW96].
NUCM “atoms” correspond roughly to OpenCM
frozen objects, but atoms cannot reference other ob-
jects within the NUCM store. NUCM collections
play a similar role to OpenCM mutables, but the
analogy is not exact: all NUCM collections are mu-
table objects. The NUCM information architecture
includes a notion of “attributes” that can be associ-
ated with atoms or collections. These attributes can
be modiﬁed independent of their associated object,
which effectively renders every object in the repos-
itory mutable. NUCM does not provide signiﬁcant
support for archival access controls or replication.
Subversion is a successor to CVS currently un-
der development by Tigris.org [CS02]. Unlike CVS,
Subversion provides ﬁrst-class support for conﬁgu-
rations. Like CVS, Subversion does not directly sup-
port replication. Subversion’s access control model
is based on usernames, and is therefore unlikely to
scale gracefully across multi-organizational projects
without centralized administration.
WebDAV The “Web Documents and Versioning”
[WG] initiative is intended to provide integrated doc-
ument versioning to the web. It provides branching,
versioning, and integration of multiple versions of a
single ﬁle. When the OpenCM project started, Web-
DAV provided no mechanism for managing conﬁg-
urations, though several proposals were being eval-
uated. Given the current function of OpenCM,
OpenCM could be used as an implementation vehi-
cle for WebDAV.
BitKeeper
incorporates a fairly elegant design for
repository replication and delta compression. To
our knowledge,
it does not incorporate adequate
(i.e. cryptographic) provenance controls for high-
assurance development. Further, it does not address
the trusted path problem introduced by the presence
of untrusted intermediaries in the software distribu-
tion chain.
9.2 Other
Various object repositories, most notably Objectiv-
ity and ObjectStore, would be suitable as supporting
systems for the OpenCM repository design. This is
especially true in cases where an originating reposi-
tory is to be run as a distributed, single-image repos-
itory federation. Neither directly provides an access
control mechanism similar to OpenCM.
Both Microsoft’s “Globally Unique Identiﬁers” and
Lotus Notes object identiﬁers are generated using
strong random number generators. Miller et al.’s
capability-secure scripting language E [MMF00]
uses strong random numbers as the basis for secure
object capabilities. The Droplets system [Clo98]
by Tyler Close has adapted this idea to cryptographic
capabilities encoded in URLs.
The Xanadu project was probably the ﬁrst system
to make a strong distinction between mutable and
frozen objects (they referred to them respectively
as “works” and “editions”) and leverage this dis-
tinction as a basis for replication [SMTH91].
In
hindsight, the information architecture of OpenCM
draws much more heavily from Xanadu ideas than
was initially apparent. The OpenCM access con-
trol design is closely derived from the Xanadu
Clubs architecture[SMTH91], originally conceived
by Mark Miller.
OpenCM’s use of cryptographic names was most di-
rectly inﬂuenced by Waterken, Inc’s Droplets system
[Clo98]. Related naming schemes are used in Lotus
Notes and in the GUID generation scheme of DCE.
10 Acknowledgements
The Xanadu Clubs architecture [SMTH91] was orig-
inally conceived by Mark Miller and subsequently
reﬁned by Jonathan Shapiro. Comments and feed-
back on this paper were provided by David Chiz-
madia, Mike Hilsdale, Mark Miller, Chris Riley, and
Anshumal Sinha.
Mark Miller’s diagnosis of the mutable substitution
problem came at a critical and fortuitous moment be-
fore we shipped the ﬁrst release. At a minimum, it
saved us the embarassment of an incompatible ver-
sion 2 shipping weeks after version 1.
11 Conclusions
OpenCM supports
requirements of high-
the
assurance development in an open-source environ-
ment.
It uses cryptographic naming and authenti-
cation to achieve distributed, disconnected, access-
controlled conﬁguration management across multi-
ple administrative domains and to provide strong
integrity guarantees.
OpenCM supports multi-
organizational project teams through use of domain-
agnostic cryptographic authentication and discon-
nected commit.
It also provides delegation and
strong provenance tracking.
While there are many interdependencies in the de-
sign, there are no clever or excessively complicated
algorithms or techniques in the system. The funda-
mental insight, such as it is, is that successful distri-
bution and conﬁguration management can be built on
only two primitive concepts – naming and identity
– and that cryptographic hashes provide an elegant
means to unify these concepts and provide a basis
for integrity checks.
The OpenCM schema is not limited to conﬁguration
management applications. It is a general-purpose in-
formation model that provides wide-area, integrity-
checked distribution and naming system for online
archival content. Further,
it is relatively neutral
with respect to demands on the underlying storage-
system. The one serious “missing link” in the exist-
ing OpenCM architecture as a general-purpose con-
tent substrate is the absence of a self-assuring, even-
tually consistent collection mechanism; we believe
we see a means to realize such collections. It is our
plan to pursue the use of the underlying architecture
for other information spaces.
The core OpenCM system, including command line
client, two local ﬁle system repository implementa-
tions, and remoting support, consists of 19,134 lines
of code. Roughly 20% of this code is serializa-
tion support that could be automatically generated.
In contrast, the corresponding CVS core is 52,055
lines (both sets of numbers omit the diff/merge, RCS,
compression libraries, comments, and blank lines).
In spite of this simplicity, OpenCM works reliably,
efﬁciently, and effectively.
It also provides greater
functionality and performance than its predecessor.
One of the signiﬁcant surprises in this effort has been
the degree to which a straightforward, naive imple-
mentation has proven to be reasonably efﬁcient.
OpenCM was released at the USENIX 2002 confer-
ence. Software is available from the OpenCM web
site at http://www.opencm.org or the EROS
project web site at http://www.eros-os.org.
References
[Ber90]
B. Berliner. CVS II: Parallelizing soft-
ware development.
In Proceedings
of the USENIX Winter 1990 Technical
Conference, pages 341–352, Berkeley,
CA, 1990. USENIX Association.
[Clo98]
Tyler Close. Droplets, 1998.
[MT79]
[CS02]
[DA99]
[Dav01]
Ben Collins-Sussman. The subversion
project: Building a better cvs. The Linux
Journal, February 2002.
T. Dierks and C. Allen. The TLS proto-
col version 1.0, January 1999. Internet
RFC 2246.
Don Davis. Defective sign & encrypt in
S/MIME, PKCS7, MOSS, PEM, PGP,
and XML. In Proc. 2001 USENIX Tech-
nical Conference, Boston, MA, June
2001. USENIX Association.
[Pol96]
[Ree96]
[Sha02]
Robert Morris and Ken Thompson.
Password security: A case history.
CACM, 22(11):594–597, 1979.
J. Polstra. Program source for cvsup,
1996.
Jonathan A. Rees. A security kernel
based on the lambda-calculus. Techni-
cal Report AIM-1564, 1996.
Jonathan S. Shapiro. CPCMS: A con-
ﬁguration management system based
on cryptographic names.
In Proc.
FREENIX Track of the 2002 USENIX
Annual Technical Conference. USENIX
Association, 2002.
[dHHW96] A. Van der Hoek, D. Heimbigner, and
A. Wolf. A generic peer-to-peer reposi-
tory for distributed conﬁguration man-
agement.
In Proc. 18th International
Conference on Software Engineering,
Berlin, Germiny, March 1996.
[FK89]
[Hal94]
[ISO98]
David C. Feldmeier and Philip R. Karn.
UNIX password security - ten years
later. In CRYPTO, pages 44–63, 1989.
Neil M. Haller. The S/KEY one-time
password system. In Proceedings of the
Symposium on Network and Distributed
System Security, pages 151–157, 1994.
Common Criteria for Information Tech-
nology Security. International Standards
Organization, 1998. International Stan-
dard ISO/IS 15408, Final Committee
Draft, version 2.0.
[MAM95] Daniel L. Mcdonald, Randall J. Atkin-
son, and Craig Metz. One time pass-
words in everything (opie): Experiences
with building and using stronger authen-
tication. In Proc. 5th USENIX Security
Symposium, Salt Lake City, UT, 1995.
[MMF00] Mark S. Miller, Chip Morningstar, and
Bill Frantz. Capability-based ﬁnancial
instruments.
In Proc. Financial Cryp-
tography 2000, Anguila, BWI, 2000.
Springer-Verlag.
[SMTH91] Jonathan S. Shapiro, Mark Miller, Dean
Tribble, and Chris Hibbert. The Xanadu
Developer’s Guide.
Palo Alto, CA,
USA, 1991.
[SSF99]
[WG]
[Wu99]
Jonathan S. Shapiro,
Jonathan M.
Smith, and David J. Farber. EROS: A
fast capability system.
In Proc. 17th
ACM Symposium on Operating Systems
Principles, pages 170–185, Kiawah Is-
land Resort, near Charleston, SC, USA,
December 1999. ACM.
E. James Whitehead, Jr. and Yaron Y.
Goland. WebDAV: A network pro-
tocol for remote collaborative author-
ing on the web.
the
Sixth European Conf. on Computer Sup-
ported Cooperative Work (ECSCW’99),
Copenhagen, Denmark, September 12-
16, 1999, pages 291–310.
In Proc. of
Thomas Wu. A real-world analysis of
kerberos password security.
In Proc.
1999 Internet Society Network and Dis-
tributed System Security Symposium,
February 1999.
[Ylo96]
Tatu Ylonen. SSH — secure login con-
nections over the Internet. pages 37–42,
1996.