                from[4]              KerberosTime OPTIONAL,
                till[5]              KerberosTime,
                rtime[6]             KerberosTime OPTIONAL,
                nonce[7]             INTEGER,
                etype[8]             SEQUENCE OF INTEGER, -- EncryptionType,
                             -- in preference order
                addresses[9]         HostAddresses OPTIONAL,
                enc-authorization-data[10]   EncryptedData OPTIONAL,
                             -- Encrypted AuthorizationData encoding
                additional-tickets[11]       SEQUENCE OF Ticket OPTIONAL
    }
    AS-REQ ::=         [APPLICATION 10] KDC-REQ
    KDC-REQ ::=        SEQUENCE {
               pvno[1]               INTEGER,
               msg-type[2]           INTEGER,
               padata[3]             SEQUENCE OF PA-DATA OPTIONAL,
               req-body[4]           KDC-REQ-BODY
    }
    PA-DATA ::=        SEQUENCE {
               padata-type[1]        INTEGER,
               padata-value[2]       OCTET STRING,
                             -- might be encoded AP-REQ
    }
    KDC-REQ-BODY ::=   SEQUENCE {
                kdc-options[0]       KDCOptions,
                cname[1]             PrincipalName OPTIONAL,
                             -- Used only in AS-REQ
                realm[2]             Realm, -- Server's realm
                             -- Also client's in AS-REQ
                sname[3]             PrincipalName OPTIONAL,
                from[4]              KerberosTime OPTIONAL,
                till[5]              KerberosTime,
                rtime[6]             KerberosTime OPTIONAL,
                nonce[7]             INTEGER,
                etype[8]             SEQUENCE OF INTEGER, -- EncryptionType,
                             -- in preference order
                addresses[9]         HostAddresses OPTIONAL,
                enc-authorization-data[10]   EncryptedData OPTIONAL,
                             -- Encrypted AuthorizationData encoding
                additional-tickets[11]       SEQUENCE OF Ticket OPTIONAL
    }
此外，Wireshark也是一个非常不错的工具。我们可以利用它进行正常的Kerberos交换，导出Kerberos数据包字节，并使用JavaScript
ASN.1解码器来可视化数据：
接下来，我们介绍如何使用Bouncy Castle通过PowerShell构建一个ASN.1编码的AS-REQ。在处理几个标记并找到正确的数据结构之后，我构造了一个New-ASReq，它可以接受用户/域名，构建正确的嵌套组件，并返回请求的原始字节。
由于上面这些东西都是手工构造的，所以可以包含或省略任何我们想要的内容。因此，我们可以只包括ARCFOUR-HMAC-MD5，而不是支持的所有加密类型。此类型的介绍及其在Windows
Kerberos认证中的用法，在RFC4757中有详细的说明。特别是，在第3节介绍了该算法不同用途的消息类型。虽然AS-REP票据就像TGS-REP票据（即kerberoasting）一样也使用类型2，但是响应中的这部分使用了服务密钥（在这种情况下是krbtgt哈希值）进行过加密处理，因此无法破解。然而，AS-REP的加密部分，基本可以“降级”为RC4-HMAC的部分，虽然使用了相同的算法，不过使用的是消息类型8。这对今后的破解是非常有帮助的。
ASREPRoast中的第二个函数Get-ASREPHash用来对New-ASReq进行包装，为特定用户/域生成适当的AS-REQ，枚举所传递域的域控制器，发送精心设计的AS-REQ，并接收响应字节。 Bouncy Castle用于解码响应，从而确定是一个KRB-ERROR响应还是一个正确的AS-REP。如果请求成功，我们可以提取出使用指定用户的哈希值加密的RC4-HMAC的加密部分，并以一个特定的格式返回：
ASREPRoast中，最后一个有用的函数是Invoke-ASREPRoast。在Windows
Kerberos环境中，如果该函数从通过了域验证但未有其他特权的用户上下文中运行的话，这个函数首先会枚举所有在其用户帐户控制设置中使用LDAP过滤器（userAccountControl：
1.2.840.113556.1.4.803：= 4194304）设置了“不需要Kerberos预身份验证”的用户。对于返回的每个用户，可以通过Get-ASREPHash得到其可破解的哈希值：
**破解哈希值**
现在，我们得到了使用RC4-HMAC算法取得的AS-REP的哈希值，它们都用用户的密码进行了加密处理。下面，我们将通过离线方式对其进行破解，但是请记住，尽管使用了与现有TGS-REP格式相同的算法和方法，但是此处的消息类型为8而不是2。
但是这就意味着，现有的插件无法使用，不过问题不大，我们只需将这一行中的2改为8，删除一些特定的TGS
ASN.1加速设置，并更改格式命名方法即可。在ASREPRoast项目中，我提供了一个调整过的krb5_asrep_fmt_plug.c插件，只需将其放到Magnumripper的源文件夹中，运行正常的构建指令，就可以破解ASREPRoast.ps1的输出了：
我相信，通过类似方式，可以轻松修改Hashcat的现有TGS-REP格式，但我还没有进行相关试验。此外，因为这是与krb5tgs /
Kerberoasting格式相同的算法，只需进行适当调整，性能应与现有模块不相上下。
**小结**
正如我在开始时提到的，这显然不如Kerberoasting攻击那么有用，因为帐户必须显式地设置DONT_REQ_PREAUTH，并且攻击成功与否严重依赖于密码的复杂程度。但是，此设置有时的确会出现在某些环境中，通常是出于向后兼容性考虑而出现在一些老帐户上，所以，我们认为该工具集至少在某些情况下还是很有用的。
关于防护措施，其实与Kerberoasting有关的保护措施同样适用于这种攻击，特别是让设置DONT_REQ_PREAUTH的账户使用长密码，并且当异常主机为这些帐户发送AS-REP时要发出警报。此外，还要检查哪些账户进行了此项设置，为此，可以借助于PowerView（Get-DomainUser
-PreauthNotRequired），或其他LDAP工具集，只要使用（userAccountControl：1.2.840.113556.1.4.803：=
4194304）过滤器即可。最后，还要慎重考虑是否真的需要含有此设置的帐户。