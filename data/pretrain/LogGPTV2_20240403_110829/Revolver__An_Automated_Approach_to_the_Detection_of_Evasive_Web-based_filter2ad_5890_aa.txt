title:Revolver: An Automated Approach to the Detection of Evasive Web-based
Malware
author:Alexandros Kapravelos and
Yan Shoshitaishvili and
Marco Cova and
Christopher Kruegel and
Giovanni Vigna
Revolver: An Automated Approach to the 
Detection of Evasive Web-based Malware
Alexandros Kapravelos and Yan Shoshitaishvili, University of California, Santa Barbara; 
Christopher Kruegel and Giovanni Vigna, University of California, Santa Barbara
Marco Cova, University of Birmingham;  
Open access to the Proceedings of the 22nd USENIX Security Symposium is sponsored by USENIXThis paper is included in the Proceedings of the 22nd USENIX Security Symposium.August 14–16, 2013 • Washington, D.C., USAISBN 978-1-931971-03-4Revolver: An Automated Approach to the
Detection of Evasive Web-based Malware
Alexandros Kapravelos
UC Santa Barbara
PI:EMAIL
Yan Shoshitaishvili
UC Santa Barbara
PI:EMAIL
Marco Cova
University of Birmingham
PI:EMAIL
Christopher Kruegel
UC Santa Barbara
PI:EMAIL
Giovanni Vigna
UC Santa Barbara
PI:EMAIL
Abstract
In recent years, attacks targeting web browsers and their
plugins have become a prevalent threat. Attackers deploy
web pages that contain exploit code, typically written in
HTML and JavaScript, and use them to compromise un-
suspecting victims.
Initially, static techniques, such as
signature-based detection, were adequate to identify such
attacks. The response from the attackers was to heavily
obfuscate the attack code, rendering static techniques insuf-
ﬁcient. This led to dynamic analysis systems that execute
the JavaScript code included in web pages in order to expose
malicious behavior. However, today we are facing a new
reaction from the attackers: evasions. The latest attacks
found in the wild incorporate code that detects the presence
of dynamic analysis systems and try to avoid analysis and/or
detection.
In this paper, we present Revolver, a novel approach to au-
tomatically detect evasive behavior in malicious JavaScript.
Revolver uses efﬁcient techniques to identify similarities be-
tween a large number of JavaScript programs (despite their
use of obfuscation techniques, such as packing, polymor-
phism, and dynamic code generation), and to automatically
interpret their differences to detect evasions. More precisely,
Revolver leverages the observation that two scripts that are
similar should be classiﬁed in the same way by web malware
detectors (either both scripts are malicious or both scripts
are benign); differences in the classiﬁcation may indicate
that one of the two scripts contains code designed to evade a
detector tool.
Using large-scale experiments, we show that Revolver
is effective at automatically detecting evasion attempts in
JavaScript, and its integration with existing web malware
analysis systems can support the continuous improvement
of detection techniques.
1
Introduction
In the last several years, we have seen web-based malware—
malware distributed over the web, exploiting vulnerabilities
in web browsers and their plugins—becoming a prevalent
threat. Microsoft reports that it detected web-based exploits
against over 3.5 million distinct computers in the ﬁrst quarter
of 2012 alone [22]. In particular, drive-by-download attacks
are the method of choice for attackers to compromise and
take control of victim machines [12,29]. At the core of these
attacks are pieces of malicious HTML and JavaScript code
that launch browser exploits.
Recently, a number of techniques have been proposed
to detect the code used in drive-by-download attacks. A
common approach is the use of honeyclients (specially in-
strumented browsers) that visit a suspect page and extract
a number of features that help in determining if a page is
benign or malicious. Such features can be based on static
characteristics of the examined code [5,7], on speciﬁcs of its
dynamic behavior [6, 20, 25, 28, 32, 40], or on a combination
of static and dynamic features [34].
Drive-by downloads initially contained only the code
that exploits the browser. This approach was defeated by
static detection of the malicious code using signatures. The
attackers started to obfuscate the code in order to make the
attacks impossible to be matched by signatures. Obfuscated
code needs to be executed by a JavaScript engine to truly
reveal the ﬁnal code that performs the attack. This is why
researchers moved to dynamic analysis systems which exe-
cute the JavaScript code, deobfuscating this way the attacks
regardless of the targeted vulnerable browser or plugin. As a
result, the attackers have introduced evasions: JavaScript
code that detects the presence of the monitoring system and
behaves differently at runtime. Any diversion from the origi-
nal targeted vulnerable browser (e.g., missing functionality,
additional objects, etc.) can be used as an evasion.
As a result, malicious code is not a static artifact that, after
being created, is reused without changes. To the contrary,
attackers have strong motivations to modify the code they
use so that it is more likely to evade the defense mechanisms
employed by end-users and security researchers, while con-
tinuing to be successful at exploiting vulnerable browsers.
For example, attackers may obfuscate their code so that it
USENIX Association  
22nd USENIX Security Symposium  637
does not match the string signatures used by antivirus tools
(a situation similar to the polymorphic techniques used in
binary malware). Attackers may also mutate their code with
the intent of evading a speciﬁc detection tool, such as one of
the honeyclients mentioned above.
This paper proposes Revolver, a novel approach to auto-
matically identify evasions in drive-by-download attacks.
In particular, given a piece of JavaScript code, Revolver
efﬁciently identiﬁes scripts that are similar to that code,
and automatically classiﬁes the differences between two
scripts that have been determined to be similar. Revolver
ﬁrst identiﬁes syntactic-level differences in similar scripts
(e.g., insertion, removal, or substitution of snippets of code).
Then Revolver attempts to explain the semantics of such dif-
ferences (i.e., their effect on page execution). We show that
these changes often correspond to the introduction of eva-
sive behavior (i.e., functionality designed to evade popular
honeyclient tools).
There are several challenges that Revolver needs to ad-
dress to make this approach feasible in practice. First, typical
drive-by-download web pages serve malicious code that is
heavily obfuscated. The code may be mutated from one visit
to the page to the next by using simple polymorphic tech-
niques, e.g., by randomly renaming variables and functions
names. Polymorphism creates a multitude of differences
in two pieces of code. From a superﬁcial analysis, two
functionally identical pieces of code will appear as very
different. In addition, malicious code may be produced on-
the-ﬂy, by dynamically generating and executing new code
(through JavaScript and browser DOM constructs such as
the eval() and setTimeout() functions). Dynamic
code generation poses a problem of coverage; that is, not
all JavaScript code may be readily available to the analyzer.
Therefore, a naive approach that attempts to directly com-
pare two malicious scripts would be easily thwarted by these
obfuscation techniques and would fail to detect their similar-
ities. Instead, Revolver dynamically monitors the execution
of JavaScript code in a web page so that it can analyze both
the scripts that are statically present in the page and those
that are generated at runtime. In addition, to overcome poly-
morphic mutations of code, Revolver performs its similarity
matching by analyzing the Abstract Syntax Tree (AST) of
code, thereby ignoring superﬁcial changes to its source code.
Another challenge that Revolver must address is scala-
bility. For a typical analysis of a web page, Revolver needs
to compare several JavaScript scripts (more precisely, their
ASTs) with a repository of millions of ASTs (potential
matches) to identify similar ones. To make this similarity
matching computationally efﬁcient, we use a number of ma-
chine learning techniques, such as dimensionality reduction
and clustering algorithms.
Finally, not all code changes are security-relevant. For
example, a change in a portion of the code that is never exe-
cuted is less interesting than one that causes a difference in
the runtime behavior of the script. In particular, we are inter-
ested in identifying code changes that cause detection tools
to misclassify a malicious script as benign. To identify such
evasive code changes, Revolver focuses on modiﬁcations
that introduce control ﬂow changes in the program. These
changes may indicate that the modiﬁed program checks
whether it is being analyzed by a detector tool (rather than
an unsuspecting visitor) and exhibits a different behavior
depending on the result of this check.
By automatically identifying code changes designed to
evade drive-by-download detectors, one can improve detec-
tion tools and increase their detection rate. We also leverage
Revolver to identify benign scripts (e.g., well-known li-
braries) that have been injected with malicious code, and,
thus, display malicious behavior.
This paper makes the following contributions:
1. Code similarity detection: We introduce techniques
to efﬁciently identify JavaScript code snippets that are
similar to each other. Our tool is resilient to obfuscation
techniques, such as polymorphism and dynamic code
generation, and also pinpoints the precise differences
(changes in their ASTs) between two different versions
of similar scripts.
2. Detection of evasive code: We present several tech-
niques to automatically classify differences between two
similar scripts to highlight their purpose and effect on
the executed code. In particular, Revolver has identiﬁed
several techniques that attackers use to evade existing
detection tools by continuously running in parallel with
a honeyclient.
2 Background and Overview
To give the reader a better understanding of the motivation
for our system and the problems that it addresses, we start
with a discussion of malicious JavaScript code used in drive-
by-download attacks. Moreover, we present an example of
the kind of code similarities that we found in the wild.
Malicious JavaScript code. The web pages involved
in drive-by-download attacks typically include malicious
JavaScript code. This code is usually obfuscated, and it
ﬁngerprints the visitor’s browser, identiﬁes vulnerabilities
in the browser itself or the plugins that the browser uses, and
ﬁnally launches one or more exploits. These attacks target
memory corruption vulnerabilities or insecure APIs that,
if successfully exploited, enable the attackers to execute
arbitrary code of their choice.
Figure 1 shows a portion of the code used in a recent
drive-by-download attack against users of the Internet Ex-
plorer browser. The code (slightly edited for the sake of
clarity) instantiates a shellcode (Line 8) by concatenating
the variables deﬁned at Lines 1–7; a later portion of the
code (not shown in the ﬁgure) triggers a memory corruption
638  22nd USENIX Security Symposium 
USENIX Association
1 var nop="%uyt9yt2yt9yt2";
2 var nop=(nop.replace(/yt/g,""));
3 var sc0="%ud5db%uc9c9%u87cd...";
4 var sc1="%"+"yutianu"+"ByutianD"+ ...;
5 var sc1=(sc1.replace(/yutian/g,""));
6 var sc2="%"+"u"+"54"+"FF"+...+"8"+"E"+"E";
7 var sc2=(sc2.replace(/yutian/g,""));
8 var sc=unescape(nop+sc0+sc1+sc2);
Figure 1: Malicious code that sets up a shellcode.
vulnerability, which, if successful, causes the shellcode to
be executed.
A common approach to detect such attacks is to use hon-
eyclients, which are tools that pose as regular browsers, but
are able to analyze the code included in the page and the side-
effects of its execution. More precisely, low-interaction hon-
eyclients emulate regular browsers and use various heuris-
tics to identify malicious behavior during the visit of a web
page [6, 13, 25]. High-interaction honeyclients consist of
full-featured web browsers running in a monitoring environ-
ment that tracks all modiﬁcations to the underlying system,
such as ﬁles created and processes launched [28, 38, 40].
If any unexpected modiﬁcation occurs, it is considered to
be a manifestation of a successful exploit. Notice that this
sample is difﬁcult to detect with a signature, as strings are
randomized on each visit to the compromised site.
Evasive code. Attackers have a vested interest in crafting
their code to evade the detection of analysis tools, while
remaining effective at exploiting regular users. This allows
their pages to stay “under the radar” (and actively malicious)
for a longer period of time, by avoiding being included in
blacklists such as Google’s Safe Browsing [11] or being
targeted by take-down requests.
Attackers can use a number of techniques to avoid detec-
tion [31]: for example, code obfuscation is effective against
tools that rely on signatures, such as antivirus scanners;
requiring arbitrary user interaction can undermine high-
interaction honeyclients; probing for arcane characteristics
of browser features (likely not correctly emulated in browser
emulators) can thwart low-interaction honeyclients.
An effective way to implement this kind of circumventing
techniques consists of adding some specialized “evasive
code” whose only purpose is to cause detector tools to fail
on an existing malicious script. Of course, the evasive code
is designed in such a way that regular browsers (used by
victims) effectively ignore it. Such evasive code could, for
example, pack an exploit code in an obfuscation routine,
check for human interaction, or implement a test for detect-
ing browser emulators (such evasive code is conceptually
similar to “red pills” employed in binary malware to detect
and evade commonly-used analysis tools [10]).
Figure 2 shows an evasive modiﬁcation to the original
exploit of Figure 1, which we also found used in the wild.
More precisely, the code tries to load a non-existent ActiveX
1 try {
2
3 } catch (e) {
4
5
6
7
8
9
10
11
12 }
new ActiveXObject("yutian");
var nop="%uyt9yt2yt9yt2";
var nop=(nop.replace(/yt/g,""));
var sc0="%ud5db%uc9c9%u87cd...";
var sc1="%"+"yutianu"+"ByutianD"+ ...;
var sc1=(sc1.replace(/yutian/g,""));
var sc2="%"+"u"+"54"+"FF"+...+"8"+"E"+"E";
var sc2=(sc2.replace(/yutian/g,""));
var sc=unescape(nop+sc0+sc1+sc2);
Figure 2: An evasion using non-existent ActiveX controls.
control, named yutian (Line 2). On a regular browser,
this operation fails, triggering the execution of the catch
branch (Lines 4–11), which contains an identical copy of
the malicious code of Figure 1. However, low-interaction
honeyclients usually emulate the ActiveX API by simulating
the presence of any ActiveX control. In these systems, the
loading of the ActiveX control does not raise any exception;
as a consequence, the shellcode is not instantiated correctly,
which stops the execution of the exploits and causes the
honeyclient to fail to detect the malicious activity.
Detecting evasive code using code similarity. Code simi-
larity approaches have been proposed in the past, but none of
them has focused speciﬁcally on malicious JavaScript. There