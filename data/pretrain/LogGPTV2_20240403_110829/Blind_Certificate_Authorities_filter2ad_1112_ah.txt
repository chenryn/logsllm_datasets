### Secure Channel Injection Protocol for TLS with AES-GCM

In this section, we present a secure channel injection (SCI) protocol for TLS using AES-GCM. For simplicity and clarity, we assume that the blocks of the proxy and the client are multiples of 128 bits.

#### Encryption Process

The encryption process in AES-GCM is as follows:
- **Key Sharing**: Let \( K \) be the shared key between the client and the server.
- **Client Messages**: Let \( t = (M_1, M_2, \ldots, M_{\ell}) \) be the messages from the client.
- **Proxy Messages**: Let \( M_p = (M_{\ell+k+1}, \ldots, M_m) \) be the messages from the proxy, and let \( M^* = (M_{\ell+1}, \ldots, M_{\ell+k}) \) be the private messages to be injected by the proxy.

#### Secure Channel Injection Protocol

The SCI protocol proceeds as follows:

1. **Initialization Vector (IV)**: The client selects a random IV of 96 bits.
2. **Encryption**:
   - The client and proxy use 2P-CTR (two-party counter mode) for encryption.
   - The client inputs \( IV \) and the key \( K \), while the proxy inputs \( M^* \).
   - The output ciphertexts are:
     - Client: \( (C_1, C_2, \ldots, C_q) \) and \( (C_{q+r+1}, \ldots, C_t) \)
     - Proxy: \( (C_{q+1}, C_{q+2}, \ldots, C_{q+r}) \)

3. **Authentication**:
   - Let \( A \) be the data to be authenticated but not encrypted, where \( |A| = u \leq 128 \) (e.g., \( u = 104 \) in TLS 1.2).
   - Define \( A' = A || 0^{128-u} \).
   - The parties engage in 2P-GMAC (two-party Galois/Counter Mode) where:
     - The client inputs \( IV \), \( K \), \( A' \), \( (C_1, \ldots, C_q) \), and \( (C_{q+r+1}, \ldots, C_t, \text{len}(A) || \text{len}(C)) \).
     - The proxy inputs \( (C_{q+1}, \ldots, C_{q+r}) \).
   - The proxy receives an authentication tag \( T \).

4. **Transmission**:
   - The client sends the IV and all ciphertexts to the proxy.
   - The proxy forwards \( IV \), \( (C_1, \ldots, C_t) \), and the tag \( T \) to the server.

#### Security Analysis

**Theorem 8**: Assuming AES is modeled as an ideal cipher, the SCI-TLS protocol is a secure channel injection protocol for TLS with AES-GCM mode, satisfying the required security definitions.

### Security Proofs for SCI-TLS Protocols

We follow the standard definition of secure computation protocols in the presence of a malicious adversary, both in standalone and hybrid models. For detailed formal definitions, refer to [13, 28].

#### Modeling AES and f

- **CBC with HMAC**: We model \( f \) as a random oracle and AES as an ideal cipher.
- **AES-GCM**: There is no function \( f \), but AES is still modeled as an ideal cipher.

#### Security Proof for SCI-TLS with CBC and HMAC

**Theorem 9**: The SCI-TLS protocol is a secure channel injection protocol for TLS with AES-CBC and HMAC-SHA-256, assuming \( f \) is a random oracle and AES is an ideal cipher.

**Proof Sketch**:
- **Corrupted Client**:
  - The client cannot learn \( M^* \) during the protocol interaction.
  - A simulator \( S \) is constructed to simulate the view of the client without knowing \( M^* \).
  - The simulator interacts with the adversary \( A \) and simulates the TLS handshake, choosing a random message \( M^*_0 \) and simulating the proxy's interactions.
  - The simulator extracts plaintexts and verifies the MAC, ensuring the client's input is consistent with the simulated execution.

- **Corrupted Proxy**:
  - The proxy does not learn any information about other messages except \( M^* \).
  - The simulator plays the role of the client and server, running an honest execution with arbitrary inputs.
  - The simulator checks the integrity of the messages and ensures they are well-formed according to the TLS protocol.
  - If all verifications pass, the simulator sends the extracted messages to the trusted party.

#### Security Proof for SCI-TLS with AES-GCM

Due to space constraints, we provide a high-level overview of the proof:
- **Corrupted Client**: The client's view is the output of an oblivious polynomial evaluation, which is uniformly random due to the proxy's masking.
- **Corrupted Proxy**: The proxy runs an honest execution with arbitrary messages, ensuring transport privacy and integrity. The simulator verifies the decrypted messages and authenticates them using AES-GCM.

For a detailed proof, refer to the full version of the paper.

---

This revised text provides a clear, coherent, and professional explanation of the SCI-TLS protocol and its security proofs.