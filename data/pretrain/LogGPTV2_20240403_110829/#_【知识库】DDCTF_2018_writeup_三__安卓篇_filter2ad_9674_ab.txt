### **0x04 ECC**
反编译发现使用的第三方包被混淆过，包名和方法名完全无法辨认
反编译发现使用的第三方包被混淆过，包名和方法名完全无法辨认
主函数很简单
根据题目和字符串”secp256k1″可以猜到是ECC椭圆曲线加密算法
按照题目的连接去学了一波ECC，大概了解了公私钥的生成方法
这里是在secp256k1曲线上把输入作为私钥生成公钥的两个数，然后拼接起来并hex_decode与this.m进行对比
ECC作为一种安全的加密算法显然不可能有从公钥反推私钥的攻击方法，因此只可能爆破了,问题在于怎么爆破?
既然知道它是ECC，曲线也已知了，那么爆破用C++当然是最快的
找了一下午的实现，大多数都是随机生成的密钥对，最后好不容易找到一个给定私钥生成公钥的，结果跑了一下发现跟动调得到的生成结果不同，也就意味着算法不同……OTZ血崩
后来用了下python的ECC库，生成的公钥跟本程序也不一样
纠结了很久，尝试动调、逆整个程序，找到哪里不同，结果因为变量名混淆导致根本不清楚自己跟到哪里去了233333
后来想着直接导出反编译的代码和库去运行，结果因为包名和方法名混淆后相同，java编译器辨认不清而作罢
最后翻到某一个方法的时候偶然发现
抛出异常的字符串真是天使
拿着这个去谷歌，终于找到了第三方库`bouncycastle`
还好这库是开源的，在github一个一个类根据字符串去比对，最后完全还原整个函数调用过程，一运行发现公钥得到的两个数还是不同，心态爆炸
突然发现IDE给了提示，这个函数被废弃了
于是找到getXCoord，结果终于相同
开始爆破，安心睡觉
第二天起来发现结果43458080
    package me.company;  
    import java.math.BigInteger;  
    import java.security.spec.ECParameterSpec;  
    //import java.security.spec.ECPoint;  
    import java.security.spec.ECPrivateKeySpec;  
    import java.security.spec.ECPublicKeySpec;  
    import org.bouncycastle.asn1.nist.NISTNamedCurves;  
    import org.bouncycastle.asn1.x9.X962NamedCurves;  
    import org.bouncycastle.asn1.x9.X9ECParameters;  
    import org.bouncycastle.crypto.ec.CustomNamedCurves;  
    import org.bouncycastle.jce.spec.ECNamedCurveParameterSpec;  
    import org.bouncycastle.asn1.x9.ECNamedCurveTable;  
    import org.bouncycastle.math.ec.ECPoint;  
    import org.bouncycastle.asn1.sec.SECNamedCurves;  
    public class Main {  
        public static void main(String[] args)  
        {  
            long n = 43450000;  
            while (true) {  
                if (c(n)) {  
                    break;  
                }  
                else{  
                    n++;  
                    if(n%10000==0)System.out.println(n);  
                }  
            }  
            System.out.println("find it");  
            System.out.println(n);  
             // 43458080  
        }  
        public static boolean c(long i)  
        {  
            String m = "00AF576186553CC4B9224B738D89162F723BCFBF589CEF072A2C0ADA7B3443B5DC21D75144B89C87E3AC0BE030A1F5CE90E86F635D3E86271FB71375F5F581E9A2";  
            //getParameterSpec("secp256k1").;  
            String input = String.valueOf(i);  
            BigInteger test = new BigInteger(input.getBytes());  
            //BigInteger test = new BigInteger("1");  
            //System.out.println(test);  
            X9ECParameters ecP = SECNamedCurves.getByName("secp256k1");  
            ECPoint g = ecP.getG();  
            //System.out.println(g);  
            ECPoint p = g .multiply(test);  
            p.getX();  
            BigInteger x = p.getXCoord().toBigInteger();  
            BigInteger y = p.getYCoord().toBigInteger();  
            //System.out.println(x);  
            //System.out.println(y);  
            byte[] v3 = x.toByteArray();  
            byte[] v4 = y.toByteArray();  
            byte[] v5 = new byte[v3.length + v4.length];  
            int v0_3;  
            for(v0_3 = 0; v0_3 RegisterNatives)(v3, v4, off_5F358004, 1) < 0 )
即这个结构体
(方法名, 类, 函数地址)
进去反编译，整个结构看起来很简单
input接到以后直接拿下来到最后与某个数组异或比较
问题就是这个数组怎么生成的了233
静态分析实在搞不来，认输orz
sha256的表、读取了libc的几个函数头部还有各种乱七八糟的操作，太复杂了 _(:з”∠)_
动态调试的时候注意有两处反调
`sub_3c54`
这里读取了本进程的status，利用了”TracerPid:t0″这个字符串来取SHA256表的值来异或 ，当它读到的时候手动更改内存即可
还有一处`sub_3a6c`，一样是利用了status中的”TracerPid”字段
BinCrack师傅是通过自己魔改的内核直接使所有status中的TracerPid都显示0从而直接过反调，不过有一个弊端就是如果程序通过ptrace
ME来检查
将会发现这点问题
在52的一篇精华（https://www.52pojie.cn/thread-733981-1-1.html）中有师傅们的教程和讨论
。一般来说Hook也是可以解决这个反调试的，不过这个程序有自校验读取libc，所以Hook并不可行。
两处简单的反调修改内存通过以后，Dump出两个异或的数组即可得到flag
纯做题角度而言这题应该算是最简单的，虽然算法比较恐怖但是最终与输入交互的形式比较简单，存在一条很近的捷径 。
**本周 安卓篇的writeup到此结束啦，下周发** **杂项篇** **writeup** **哦~**
**比赛平台地址：http://ddctf.didichuxing.com**