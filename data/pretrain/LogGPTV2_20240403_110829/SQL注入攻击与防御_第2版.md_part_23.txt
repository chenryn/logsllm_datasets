-- Horks against: Oracle 9i, 10g and 11g
-- Author: Alexander Kornbrust of Red-Database-Security GmbH
select distinct a.owner, a.name,b,authid,a.text SQLTEXT
from all_source a,all_procedures b
lower (text) 1ike *sexecutelimmediate%($11) *
or lower(text) 1ike *8dbms_sq1%*
or
lower (text) 1ike sgrant&to*
or lower (text) like *$alterluseridentifiedlby*
or
lower(text) like 'lexecutelimmediatel*'%I1%'
or
lower (text) like *$dbms_utility.exec_ddl_statement$*
or
lower (text) like 'sdbms_ddl.create_wrapped%'
or
1ower (text) like *$dbms_hs_passthrough.execute_immediate? *
or
lower (text) like *idbms_hs_passthrough.parse%*
or
lower (text) like *towa_uti1.bind_variables%'
or
lower(text) like *lowa_util.listprintl*
or 
lower(text) like '$owa_uti1.tableprint%*
lower(text) like *sdbms_sys_sql.s*
or
Or
lower (text) like 'sdbms_prvtaqim.execute_stmt$*
or
1ower (text) 1ike *$dbms_streams_rpc.execute_stmt$*
or lower(text) like *&dbms_aqadm_sys.execute_stmt*
1ower (text) 1ike *4dbms_streams_adm_ut1,execute_sql_stringg*
or lower(text) like 'sinitjvmaux,exec*
or
1ower (text) 1ike *4dbms_repcat_sql_ut1.do_sql*
or lower (text) 1ike *&dbms_aqadm_syscalls.kwqa3_g1_executestmt$*
and lower (a,text) not like *% wrapped%*
and a. owner=b.owner
and a.name=b.object_name
and a.owner not in
(*OLAPSYS′, *ORACLE_OCM′, *CTXSYS′,*OUTLN′, *SYSTEX′, *EXFSYS′,
*MDSYS′,′SYS′,*SYSMAN′, *WKSYS′,*XDB′,*FLOWS_040000*, *FLOWS_030000*,
*FLOWS_030100*,*FLOWS_020000*, *FLOWS_020100′, *FLOWS020000*,
‘FLOWS_010600*, *FL0WS_010500*,*FLOWS_010400*)
order by 1, 2, 3
要想分析 SQL Server 2008之前版本中的T-SQL存储过程的源代码，可以使用 sp_helptext
存储过程。sp_helptext存储过程会显示用于在多行中创建对象的定义。每一行均包含了T-SQL
定义的 255个字符。该定义位于sys.sql_modules 目录视图的 definition列中。例如，可使用下
列SQL语句查询一个存储过程的源代码：
EXEC sp_helptext SP_StoredProcedure;
CREATE PROCEDURE SP_StoredProcedure @input varchar (400) = NULL AS
DECLARE @sql nvarchar (4000)
SELECT @sql = *SELECT field FROM table WHERE field - *"+ + @input + ""
EXEC (@sql)
在上述例子中，@input变量直接来自用户输入并与SQL字符串（@sql)相连。该SQL字符
串作为参数传递给了EXEC函数并被执行。即便用户输入是作为参数传递的，上述SQLServer
96
---
## Page 111
第3章复查代码中的SQL注入
存储过程也还是易受到SQL注入攻击。
可以使用sp_executesql和EXECO两条命令来调用动态SQL。EXECO从SQL6.0开始就一
直在使用，sp_exccutesql则从 SQL7才被添加进来。sp_cxecutesql是一个内置存储过程，接收
两个预定义的参数和任意多个用户定义参数。第一个参数@stmt是强制参数，包含一条或一批
SQL语句。在SQL7和 SQL2000 中，@stmt 的数据类型是ntext，在 SQLServer 2005及之后
的版本中是nvarchar(MAX)。第二个参数@params是可选参数，EXECO接收一个参数，该参数
是一条要执行的SQL语句。它可以由字符串变量和字符串常量连接而成。下面是一个使用了
sp_executesql存储过程且易受到攻击的存储过程示例：
EXEC sp_helptext SP_StoredProcedure_II;
CREATE PROCEDURE SP_StoredProcedure_II (@input nvarchar (25))
DECLARE 8sql nvarchar (255)
AS
SET @sql = *sELECT field FROM table WHERE field = +"+ + @input + *
tbsg tbsesnoaxads oax3
可以使用下列T-SQL命令列出数据库中所有的存储过程：
可以使用下列T-SQL脚本搜索所有位于SQLServer数据库服务器（注意，该脚本不适用于
SQLServer2008）上的存储过程，以便找到易受潜在SQL注入攻击的T-SQL代码。您需要仔细
检查输出结果，因为这样有助于缩小搜索范围：
-- Description: A T-SQL script to search the DB for potentially vulnerable
== T-SQL code
Etext - search string 'stext'
-- Bdbnane - database name, by default all databases ￥i1l be searched
ALTER PROCEDURE [dbo] . [grep_sp]@text varchar (250),
edbname varchar (64) = nul1
AS BEGIN
SET NOCOUNT ON;
if @dbname is nu11
begin
--enumerate all databases,
DECLARE #db CURSOR FOR Select Name from master...Sysdatabases
declare 8c_dbname varchar (64)
OPEN +db FETCH #db INTO 8c_dbname
while @eFETCH_STATUS <> -1
begin
execute grep_sp @text, 8c_dbname
FETCH db INTO 8c_dbnane
end
CLOSE #db DEALLOCATE #db
end
else
begin
declare @sql varchar (250)
--create the find 1ike command
g1
---
## Page 112
SQL注入攻击与防御（第2版）
select @sql = 'select *"+ + @dbname + *"* as db, o.name,m.
definition*
 satnpou tbs*ss*,+aweuqpe+, woxg , + tbsg = tbsg qoates
m,object_id=o.id*
execute (esql)
end
END
请记住，完成后要删除该存储过程！可以像下面这样来调用该存储过程：
r, tbsenoexe ds, de"dex6 onoexa
1,o3x3, dsdaib anoaxa
可以使用下列T-SQL命令列出SQLServer2008数据库中所有的存储过程：
SELECT name FROM sys.procedures ORDER BY name asc
可以使用下列T-SQL脚本搜索所有位于SQLServer2008数据库服务器上的存储过程并打
印其源代码（如果源代码中的各行未被注释的话）。您需要仔细检查输出结果，因为这样有助于
缩小搜索范围：
DECLARE @name VARCHAR (50) -- database name
DECLARE db_cursor CURSOR FOR
SELECT name FROM sys-procedures;
OPEN db_cursor
FETCH NEXT FROM db_cursor INTO @name
WHILE 88FETCH_STATUS = 0
NISG8
print @nane
uncomment the line below to print the source
-- sp_helptext **+ @name + *
FETCH NEXT FROM db_cursor INTO @name
END
CLOSE db_cursor
DEALLoCATE db_cursor
可以通过两条MySQL专用的语句来获取有关存储过程的信息。第一条是SHOWPROCEDURE
STATUS，该语句可输出一系列的存储过程以及与它们相关的一些信息(Db、Name、Type、
Definer、Modified、Created、Security_type、Comment)。为便于阅读，我们已经对下列命令的
输出结果进行了修改：
mysql> SHOW procedure STATUS;
I victimDB 1 SP_StoredProcedure_I
I  PROCEDURE 1 rootelocalhost I  DEFINER
IvictimDB 1 SP_StoredProcedure_II I PROCEDURE I rootQlocalhost I DEFINER
1 victimDB 1 SP_StoredProcedure_III I PROCEDURE 1 rootelocalhost 1 DEFINER
第二条命令是SHOWCREATEPROCEDURE sp_name，该语句输出存储过程的源代码：
mysql> SHOw CREATE procedure SP_StoredProcedure_I \G
98
---
## Page 113
第3章复查代码中的SQL注入
Procedure: SP_ StoredProcedure
sq1_mode:
CREATE Procedure: CREATE DEFINER=′root*&′localhost′ PROCEDURE
SP_
StoredProcedure (input varchar (400))
SET @param = input/
PREPARE stmt FROM @sq1;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
End
当然，也可以通过查询information_schema database 来获取与所有存储程序（stored routine)
相关的信息。例如，对于名为dbname的数据库，可以在INFORMATION_SCHEMA.ROUTINES
表上应用下列查询：
SELECT ROUTINE_TYPE,ROUTINE_NAME
FROM INFORMATION_SCHEMA , ROUTINES
WHERE ROUTINE_SCHEMA=*dbname * ;
3.3自动复查源代码
前面讲过，进行手动代码复查是一项耗时长且单调费力的工作，这要求对应用的源代码非
常熟悉并且要了解所复查应用的复杂性。本章我们学习了如何以系统的方式来完成该任务，以
及如何通过扩展使用命令行搜索工具来缩小复查关注的范围以节省宝贵的时间。不过，我们仍
然要花费很多时间以便在文本编辑器或选择的IDE中查看源代码。即使非常精通某种免费的命
令行工具，源代码复查也仍然是一项令人畏惧的任务。所以，如果能将该过程自动化（哪怕只
是使用一种能产生令人舒服的报告的工具)，是不是一件很关好的事情呢？当然，如果是的话，
我们应该意识到：自动工具会产生很多误判（false positive，误判是指工具错误地报告存在某个
漏洞，但实际上该漏润并不存在）或漏判(false negative，漏判是指工具未报告存在某个漏润，但
实际上存在该漏洞）。误判会导致对工具的不信任并且要花费很多时间来验证结果：漏判则会
导致某些漏洞不被发现，让人对安全性产生误解。
有些自动工具只是使用正则表达式字符串匹配来识别渗入点（安全敏感函数），其他则什么
也不做。有些工具能够识别直接将易受感染的（不可信的）数据作为参数传递的那些渗入点。有
些工具则将上述几种功能集成到一起，从而能够识别渗入源（应用中产生不可信数据的位置点)。
在这些工具中，有几种只是简单地依赖我们前面讨论的策略，即主要依靠类似grep的语法搜索
和正则表达式来定位危险函数的使用。有些情况下，它们只是突出那些包含了动态SQL字符
串构造技术的代码。这些静态字符串匹配工具无法准确地映射数据流或跟踪执行路径。字符串
模式匹配会导致误判，因为一些执行模式匹配的工具无法区分代码中的注释和真正的渗入点。
此外，有些正则表达式可能匹配出那些与目标渗入点命名相似的代码。例如，尝试将
mysql_queryO函数匹配成渗入点的正则表达式可能将下列代码行标记成匹配行：
//如果使用了mysq1_query（），就对输入进行检验
Sresult = MyCustomFunctionToExec_mysql_query($sql) )
(tbss)AxenbbsAm = atnsaxs
99
---
## Page 114
SQL注入攻击与防御（第2版）
为克服该问题，有些工具实现了词法分析（lexicalanalysis)方法。词法分析接收一个由很多
字符（比如计算机程序的源代码）构成的输入字符串，经过处理之后产生一个更容易被解析器处
理的符号序列（称为词法标记（lexical token）或标记（token))。这些工具对源文件进行预处理和识
别单词符号操作（跟编译器的第一步相同），之后再根据一个安全敏感函数库来匹配这些标志。
执行词法分析的程序通常被称为词法分析器（lexical analyzer)。要想准确区分函数中的变量并识
别函数参数，词法分析是必不可少的。
有些源代码分析器（比如作为IDE插件运行的源代码分析器）通常会使用抽象语法树（Abstract
Syntax Tree，AST）。AST是一种表示简化的源代码语法结构的树。可以使用AST对源代码元
素执行深层分析以帮助跟踪数据流并识别渗入点和渗入源。
有些源代码分析器还会实现另一种方法一数据流分析。数据流分析负责收集程序中与数
据使用、定义和依赖关系有关的信息。数据流分析算法运行在AST产生的控制流图（Control
FlowGraph，CFG)之上。可以使用CFG来确定程序中将特定值分配给变量后，该变量所能传
播到的代码块。CFG使用图形标记来表示程序执行过程中可能遍历到的所有路径。
截至本书写作时，自动工具集成了三种不同的分析方法：基于字符串的模式匹配、词法标
记匹配以及借助AST和（或)CFG的数据流分析。自动静态分析工具对安全顾问非常有用，它能
帮助识别集成在安全敏感函数或渗入点中的危险编码行为，使通过跟踪受感染数据至其产生源
（入口点）来识别渗入源的任务更为容易。但我们不能盲目依赖这些工具产生的结果。虽然它们
在某些方面对手动技术做了改进，但还是应该由富有安全责任心的开发人员或者熟练且知识丰
富的安全顾问来使用它们，这些人员能够结合具体的发现来对结论的有效性做出明确判断。建
议在使用自动工具时，至少结合一种其他的工具并使用本章前面介绍的技术对代码进行手动审
查。这种复合方法将使我们对所做的发现拥有最大的自信，还可以根除大多数误判并有助于识
别漏判。工具无法替代人的复查。要想正确使用这些工具，您需要有一定的安全敏锐性。Web