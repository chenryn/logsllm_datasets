I have studied Python and Django and am interested in building a homepage. I have been using a virtual server on Ubuntu (Apache 2.4.18, PHP 7.0, MariaDB 10.0.28 with phpMyAdmin, and FTP) provided for developers. Initially, the server did not allow users to use Python, but I requested permission from the server administrator, and it was granted.

However, I am still restricted from using `sudo` commands and basic commands like `apt-get` and `python`. Only the administrator has these privileges, which means I cannot install necessary tools such as `virtualenv` and Django by myself.

To test if Python files work, I included `<?php include_once "test.py" ?>` in the header of `index.php`, where `test.py` simply prints "python test" (indicating that only Python 2 is installed on this server). This setup works, suggesting that my only option might be to upload `.py` files via FileZilla.

Given these constraints, I am unsure if I can efficiently create a homepage using Python on this server. I considered using the Bottle Framework, but I am not certain if it is a viable solution. I am also contemplating whether I should use PHP on this server and Python on PythonAnywhere instead.

As a beginner, I would greatly appreciate any advice. 

---

**Advice:**

1. **Request Virtual Environment Setup:**
   - Ask the server administrator to set up a virtual environment (e.g., using `virtualenv`) and grant you the necessary permissions to work within that environment. This way, you can install and manage your Python packages without needing `sudo` or `apt-get`.

2. **Use Lightweight Frameworks:**
   - If the administrator can set up a virtual environment, consider using lightweight frameworks like Flask or Bottle. These frameworks are easy to set up and require fewer dependencies compared to Django.

3. **Alternative Hosting Solutions:**
   - If setting up a virtual environment is not possible, you might want to explore alternative hosting solutions like PythonAnywhere, Heroku, or even a VPS (Virtual Private Server) where you have more control over the environment.

4. **Hybrid Approach:**
   - If you decide to stick with the current server, you could use PHP for the front-end and backend tasks that require database access, while using Python for specific functionalities. You can call Python scripts from PHP and vice versa.

5. **Learning and Practice:**
   - Since you are a beginner, it might be beneficial to practice and build your project locally first. Once you are comfortable, you can deploy it to a more suitable hosting environment.

I hope this helps! Let me know if you have any further questions.