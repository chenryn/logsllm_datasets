it then checks whether the set of mirrors contains all in-
stances required for normal dependency graph equivalence.
If this holds, it reports that veriﬁcation is successful; other-
wise it returns the dependency graph that lacks a mirroring
instance as a counterexample. Note that these instances are
counterexamples to dependency graph equivalence, but not
necessarily to observational equivalence because of the ap-
proximation requiring that each rule is simulated by itself.
1: function Verify(S)
RU ← L(S) ∪ R(S) ∪ IF ∪ Env
2:
while RU (cid:54)= ∅ do
3:
4:
5:
6:
7:
8:
choose r ∈ RU , RU ← (RU \ {r})
compute DG← dgraphs(r) by constraint solving
if ∃dg∈DG s.t.mirrors(dg) lacks ground instances
then return “potential attack found: ”, dg
return “veriﬁcation successful”
Figure 4: Pseudocode of our veriﬁcation algorithm.
This is due to the undecidability of the initial problem, and
all related tools [9, 11, 8, 7, 25] also have this limitation.
We now explain how we adapt and use this algorithm in
Tamarin. We provide examples of its use in Section 5.
4.3 Tamarin
The Tamarin prover [24, 22] is a security protocol ver-
iﬁcation tool that supports both the falsiﬁcation and un-
bounded veriﬁcation of security protocols speciﬁed as multi-
set rewriting systems with respect to trace-based properties.
In Tamarin, a security protocol P ’s executions are mod-
eled by its set of traces, deﬁned as the concatenation of the
sets of action labels at each step. A trace is a sequence of
facts denoting the sequence of actions taken during a proto-
col’s execution. The trace of an execution
S0, (l1
a1−−−→
rec1
r1), S1, . . . , Sk−1, (lk
ak−−−→
reck
rk), Sk
is the sequence of the multisets of its action labels [a1, . . . , ak] .
We now brieﬂy recall the Tamarin prover’s adversary
message derivation rules M D. To deﬁne the protocol and
adversary rules, we assume that ΣFact includes the persistent
fact symbol K modeling messages known to the adversary,
the linear fact symbol Out modeling messages sent by the
protocol, and the linear fact symbol In modeling messages
sent by the adversary. The adversary’s message deduction
capabilities are captured by the following set of rules.
MD = { Out(t)−−[]→K(t), K(t)−−[ K(t) ]→In(t),
Fr(x : fr)−−[]→K(x : fr), []−−[]→K(x : pub) }
∪ { K(t1), . . . , K(tn)−−[]→K(f (t1, . . . , tn)) | f ∈ Σn
Fun }
The adversary learns all messages that are sent and it can
send any message it knows (i.e., it learns or can derive) to
the protocol. It can generate fresh values and it knows all
public values. Additionally, the adversary can apply all op-
erators to terms it knows. When using an equational the-
ory, each of the equations gives rise to a deconstruction
rule that lets the intruder derive the result. For example
for symmetric encryption and decryption, with the equation
sdec(senc(m, k), k) = m, Tamarin automatically generates
the rule K(senc(m, k)), K(k)−−[]→K(m), which the adversary
uses to decrypt messages.
We also add one new adversary deduction rule to M D,
which we call IEquality, which allows the adversary to com-
pare two values for equality:
↓
IEquality : K
(x)−−[]→ .
↑
(x), K
The use of K↓ and K↑ in this rule restricts how the adver-
sary can derive the terms.1 Here, this annotation is crucial
1In all other rules K is actually also either K↓ or K↑. How-
ever, this distinction is required only for automation (namely
as we want to compare two terms that are derived separately.
Moreover, it also prevents immediate non-termination: oth-
erwise, once two values are successfully compared, one could
compare their hashes, followed by their hashes, etc.
The IEquality rule is applicable whenever one side of a
bi-system can construct the same value twice (but in dif-
ferent ways), that is it has dependency graphs as premises
for both instances of x. Note that the other bi-system side
trivially has the mirroring dependency graph if an output
is compared with itself (same dependency graph twice), for
example. But, if on one side the adversary can decrypt
a message and compare it with the content, while on the
other side that is not possible, then the IEquality rule will
expose this. The analysis of the IEquality rule presented in
Examples 10 and 11 illustrates this point in more detail.
For the details of our modiﬁcation to the Tamarin prover
we refer the reader to the extended version of this paper [1].
There we show how our model can be instantiated for
Tamarin, and present an implementation of the above algo-
rithm for verifying observational equivalence with Tamarin.
Note that just like the algorithm outlined in Figure 4 (line
4), Tamarin carries out a rule-by-rule analysis.
The main challenges in implementing our algorithm in the
Tamarin prover relate to limiting the size of the state-space,
which requires ﬁne-tuning Tamarin’s internal heuristic. To
aid termination, we restrict traces to normal forms as much
as possible. Moreover, compared to the original Tamarin
prover, we needed to remove some of its normal form condi-
tions because they are sound for trace properties, but not for
observational equivalence. One such example is the normal
form condition prohibiting repeated adversarial derivation
of a term. However, equality comparison with previous val-
ues must be possible, e.g., to test whether the output equals
the input in the protocol In(x), Fr(y)−−[]→Out(diﬀ(x, y)).
5. CASE STUDIES
We now present four case studies. We ﬁrst apply Tamarin
to two standard examples that have been analyzed using
other tools. Afterwards we present two examples: one that
is outside the scope of previous work and one that veri-
ﬁes a practical RFID protocol that had previously received
manual analysis only. Note that all proofs are constructed
in our tool completely automatically, with the exception of
the attack on TPM Envelope. For this protocol, interac-
tion was limited to human input at a few key choice points
and the remainder was automated. We provide a ﬁle con-
taining the steps necessary to derive the identiﬁed attack
for TPM Envelope. For the other protocols, we just give
their speciﬁcation as Tamarin’s built-in strategy ﬁnds the
proofs. All example ﬁles can be loaded into our extension of
Tamarin and are available at [1], together with Tamarin.
From now on, we use Tamarin to refer to our extension,
instead of the original Tamarin.
5.1 Motivating examples
We start with two well-known examples from [7, 10]. For
each example, we explain how Tamarin determines obser-
vational equivalence using the algorithm Verify, presented
in Figure 4.
state-space reduction and improving termination) so we have
omitted it for ease of presentation. Full details can be found
in the extended version [1].
Example 10
(Probabilistic encryption). Consider
the equational theory:
pdec(penc(m, pk(k), r), k) (cid:39) m .
This equation gives rise to the following decryption rule for
probabilistic encryption for the adversary, which is automat-
ically generated by Tamarin:
Dpenc : K(penc(m, pk(k), r)), K(k)−−[]→K(m) .
We now express, as a bi-system, that a probabilistic en-
cryption cannot be distinguished from a random value:
S = { GEN : Fr(k)−−[]→Key(k), Out(pk(k))
EN C : Key(k), Fr(r1), Fr(r2), In(x)−−[]→
Out(diﬀ[r1, penc(x, pk(k), r2)])
} .
We summarize below how Tamarin automatically proves
this property. The algorithm Verify (line 2) ﬁrst constructs
the set RU of rules to be analyzed,
RU = { L(GEN ), R(GEN ), L(EN C), R(EN C),
FreshSys, FreshEnv, IEquality, Dpenc} ,
together with the remaining rules in IF and Env. Recall
that L(name) represents the rule name instantiated with
the left side of the diﬀ-term, and likewise for R(name) with
the right side. Then Verify iterates over all rules (lines
3–4) until either an attack is found (line 7) or all rules have
been checked and the veriﬁcation is complete (line 8), which
happens in this example.
We now describe, for each rule, how Verify processes
it. Verify ﬁrst generates dependency graphs with the rule
as the root (line 5). Afterwards, for each resulting depen-
dency graph, it looks for a mirror (line 6) that contains all
instances required by the deﬁnition of normal dependency
graph equivalence. In this example, it always ﬁnds a mirror
and veriﬁcation therefore succeeds. Due to space and read-
ability constraints, we present the left-diﬀ instantiation and
right-diﬀ instantiation of each rule together, even though
Tamarin analyzes them independently. Due to space con-
straints, we also do not explicitly present the dependency
graphs; however, we do explain how they are mirrored in
each case so that the veriﬁcation succeeds.
• As rule GEN does not contain a diﬀ-term, the left
diﬀ-instantiation of this rule is identical to the right
diﬀ-instantiation. The rule has only a single fresh fact
as its premise and thus any dependency graph with this
rule at its root contains only those two rule instances
and is trivially mirrored by itself.
• The rule EN C has the same premises in the left- and
right-hand side system and is therefore identical for
the purpose of dependency graph computation with
the EN C rule as root. (Note that outputs will be con-
sidered using the equality rule below.) The two fresh
premises will result in identical dependency graphs,
while the key and message reception input are inde-
pendent. Hence both of them will have identical de-
pendency graphs as premises, and the resulting de-
pendency graphs are identical (up to the outputs) and
therefore mirror each other.
• The fresh rules FreshSys and FreshEnv have no pre-
mises. Hence the dependency graphs with them as
root are just their instances, which mirror each other
in the left- and right-hand system.
• For an equality rule instance of IEquality as the root
of a dependency graph, the two premises are the same
instance of a variable x. If both of the premises are
adversary generated, then the resulting dependency
graphs are the same in the left- and right-hand sys-
tem, and thus will mirror themselves trivially. Alter-
natively, if one of the premises uses the output of an
instance of either the EN C rule or the GEN rule,
then there is no dependency graph with a matching
second premise. This is because all system outputs,
pk(k) for GEN and r1 or penc(x, pk(k), r2) for EN C,
contain a fresh value, k, r1, respectively r2, that is
never available to the intruder. As this will never al-
low a complete dependency graph to be derived, no
mirroring dependency graph is needed.
• For the decryption rule generated for the probabilis-
tic encryption, this rule is never applicable on either
side as the adversary never receives the keys needed
for decrypting system generated encryptions. As there
is no dependency graph, no mirroring one is needed.
(One might mistakenly think that this rule might apply
to intruder-generated terms. However, this is not the
case due to the restrictions on how the adversary may
combine its knowledge (K↓ vs K↑) and, in any case,
both sides would use the same dependency graphs as
premise, so the result would be the same.)
• For all other adversary rules, it is obvious that they
result in identical dependency graphs on both sides.
More precisely:
construction rules have adversary
knowledge input and thus the same dependency graphs
as premises. For the deconstruction rules, the only rel-
evant one is the previous decryption rule, as that is the
only one that can use information coming out of the
system; all other rules can only be used on adversary-
generated terms and thus have the same dependency
graphs as premises.
This completes our summary of Tamarin’s veriﬁcation of
observational equivalence for this example. Tamarin auto-
matically constructs the proof in under 0.2 seconds.
Our next example is Decisional Diﬃe-Hellman as discussed
in [7, Example 2]. Tamarin veriﬁes the expected result that
the adversary cannot distinguish a Diﬃe-Hellman tuple from
a random tuple. Note that in contrast to [7], which uses
an equational theory restricted just to the commutativity
of two exponents, Tamarin supports a substantially more
comprehensive model of Diﬃe-Hellman exponentiation.
Example 11
(Decisional Diffie-Hellman). We use
the equational theory for Diﬃe-Hellman exponentiation with
an abelian group of exponents as provided by Tamarin.
Hence no additional adversary rules are needed.
We consider a single rule, which outputs the two half-keys
and challenges the adversary to distinguish the actual key
from an unrelated randomly generated key:
Fr(a1), Fr(a2), Fr(a3)−−[]→
Out(ba1 , ba2 , diﬀ[ba3 , (ba1 )a2 ]) .
GEN :
Using the Verify algorithm, Tamarin collects the rules
RU = { L(GEN ), R(GEN ),
FreshSys, FreshEnv, IEquality} ,
together with the remaining rules in IF and Env. We con-
sider the processing of these rules below, where we again
combine the treatment of left-diﬀ instantiations and right-
diﬀ instantiations of system rules to improve readability.
• The rule GEN has only fresh facts as premise and
thus any dependency graph with this rule at its root
contains at most four rule instances, three of fresh rules
and one of GEN itself. Thus, it is mirrored trivially
by itself. The mirror is actually identical (up to the
output).
• The fresh rules FreshSys and FreshEnv do not have
premises. Hence the dependency graphs with them as
roots are just their instances, which mirror each other
on the left- and right-hand side.
• For an equality rule instance of IEquality as the root
of a dependency graph, the two premises are the same
instance of a variable x. If both of the premises are
adversary generated, then the resulting dependency
graphs are the same in the left- and right-hand sys-
tem, and thus will mirror themselves trivially. Alter-
natively, if one of the premises uses the output of an
instance of the GEN rule, then there is no dependency
graph with a matching second premise, except the one
using the same source twice. This is because all of
the system outputs cannot be related in meaningful
fashion within the Diﬃe-Hellman exponentiation the-
ory as it does not allow the extraction of exponents,
which corresponds to computing discrete logs. As this
will never allow a complete dependency graph to be
derived, no mirroring dependency graph is needed. In
the case of the same source being used twice, i.e., a
value being compared with itself, the same premise
dependency graphs work for both systems.
Additionally, note that multiple instances of the GEN
rule are entirely unrelated and do not provide any ad-
vantage for the adversary. Tamarin analyzes this and
computes all possible variants, determining that no
combination is useful.
• For all other adversary rules, it is obvious that they
result in identical dependency graphs on both sides.
Namely, the construction rules have adversary knowl-
edge input and thus the same dependency graphs as
premises.
The Verify algorithm therefore returns that veriﬁcation is
successful. Tamarin veriﬁes this, completely automatically,
in 15.2 seconds.
This concludes our two motivating examples. They were
small enough that we could give relatively detailed descrip-
tions of Verify’s workings. For subsequent examples, we
will be more concise. Readers interested in the full gory de-
tails may generate them themselves by using Tamarin and
running the ﬁles for each case study.