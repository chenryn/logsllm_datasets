by scheduler. Similar to the case of PTE-ATRA, the at-
tacker can copy the saved-CR3 value into another memory
location and change the mm pointer instead. In addition,
there exists a set of paging data structure entries that are ref-
erenced by the MMU for each pointer traversal. Hence, these
paging data structures need to be monitored along with the
pointers themselves to detect Memory-bound ATRA. Fig-
ure 2 depicts such an example.
We used LXR [25] tools to inspect the kernel source code
for enumerating every pointer paths and the associated data
structures between kernel scheduler and the saved-CR3. We,
Figure 2: Additional Regions to be Monitored for Memory-bound ATRA Mitigation: The intermediate
pointers between the kernel scheduler and the PGD form a convoluted linked list structure depending on the
scheduling algorithm implemented in the kernel scheduler. Each of the PGD and PTE needed for translating
virtual address of these pointers should also be monitored for mitigating Memory-bound ATRA. The solid
arrow line represents the virtual address pointer referencing. The dotted arrow indicates the virtual to
physical address translation.
then, checked each pointer manually and veriﬁed the ex-
ploitability for ATRA. Table 1 shows the proﬁled results
regarding these data structures and pointers, types of which
are categorized into global, or per-CPU or per-process spe-
ciﬁc.
Global data structures uniquely exist throughout the en-
tire system, whereas per-CPU, per-process data structures
exist for each CPU core and processes respectively. Global
and per-CPU data structure are statically allocated during
boot time, and they can be proﬁled beforehand so that they
can be monitored. On the other hand, per-process data
structures are created as a new process or thread is created,
hence locations of these per-process data structures cannot
be known in advance. Note that all these data structures
are subject to the aforementioned race condition issue be-
tween the monitor and the attacker as the monitor scans
the currently present processes and their data structures.
Therefore, monitoring per-process data structures is a non-
trivial task at best.
4.2 Register-bound ATRA Mitigation
As discussed, the mitigation of Memory-bound ATRA
seems to be diﬃcult, but there is no architectural limita-
tion. That is, all modiﬁcations are made to the memory
region where the location is in the view of the external mon-
itor. However, this is not the case for Register-bound ATRA
because the modiﬁcations on the registers are invisible to the
hardware-based external monitor.
There has been a theoretical suggestion in the previous
work for possible mitigation of relocation attacks. The idea
is to scan the pages from the physical memory and search
for the duplicate copy of kernel data structure which should
uniquely exists throughout the entire memory [11]. For
example, if there exists more than one system call table data
structure, such case can be suspected as result of a relocation
attack. However, the use of such heuristics would be limited
and unreliable for many reason. First, it requires a signature
for identifying the data structure from memory dump, since
the semantic is not known to the memory scanner. Also, the
heuristics can only be used for data structures whose number
of instances are ﬁxed. If a certain type of data structures
are constantly allocated and deallocated, as the task struct
data structure for each process in Linux, such heuristics are
simply not applicable.
One may argue that analysis of memory access pattern
can be used as a countermeasure. As ATRA is applied
to the victimized process, the original page tables of the
process and the physical page frames that contain the tar-
get data structures are no longer referenced by the system.
Hence, a sudden disappearance of memory traﬃcs on the
abandoned page tables and the original memory regions can
be observed by hardware-based external monitors. A sud-
den drop in read accesses on the monitored critical kernel
memory would certainly seem abnormal. Similarly, a dis-
continuity in bursty write traﬃc to dynamic kernel regions
can also be distinguished from the normal kernel memory
access patterns.
Nevertheless, such memory access pattern analysis can-
not be a fundamental mitigation for ATRA. Register-bound
ATRA can be selectively applied to victim processes, thus it
is rather an uncomplicated task for the attacker to synthet-
ically generate memory access patterns to the monitored
regions. The memory pattern analysis will be completely
hindered, if the attacker creates some non-ATRA-aﬀected
dummy processes that use the abandoned page tables and
perform meaningless system calls to generate both read and
write traﬃc to the once abandoned page tables and the mem-
ory regions. Likewise, even without a dummy process, non-
task_struct*pgdmm_structPGDentrypgdPage TableData structure for locating PGDMemory region to be monitoredto prevent ATRA…*pgdmm_structPGDentrypgd……Virtual address referencingVirtual to physical address translationstructsched_classpick_next_table()structsched_entitystructcfs_rqstructrqKernelSchedulerPer-CPU*mmtask_structPGD…PTE*mmPGDPTEPGDPTEPGDPTESource File
include/asm/page.h
include/linux/mm types.h
include/linux/sched.h
include/linux/sched.h
kernel/sched/core.c
kernel/sched/core.c
include/asm-generic.h
Data Structure
pgd t
struct mm
struct task struct
struct sched entity
struct sched class
struct rq
per cpu oﬀset
# of Instance Property Description
per process
per process
per process
per process
global
per cpu
per cpu
saved-CR3 value used by scheduler
contains pointer of PGD
contains pointer of mm struct
dynamic
dynamic
dynamic
dynamic member of task struct, referenced by scheduler
static
static
static
contains function pointer of enqueue task()
selects next task struct to be scheduled
contains the oﬀset of percpu area which has rq
Table 1: The potentially exploitable data structures for ATRA from Linux kernel 3.8.1. If any of these data
structures can be maliciously modiﬁed, the kernel scheduler will use attacker’s saved-CR3 value. Note that
each PGD, PTE entries for translating the virtual address of these data structures are also exploitable.
ATRA-aﬀected processes will continue to access the origi-
nal data structures, making the pattern analysis diﬃcult.
Moreover, the ATRA code when invoked can also be used
to generate synthetic read/write traﬃc to the original mem-
ory region.
Also remind that the addresses of the regions to which the
data structures are relocated by ATRA cannot be known,
and they are anonymous among many other seemingly be-
nign memory regions. Therefore, we conclude that the
current hardware-based external monitors that cannot ac-
cess the CPU processor states of the host are vulnerable to
Register-bound ATRA.
5.
IMPLEMENTATION
In this section, we present our implementation of ATRA.
The current prototype is implemented and evaluated on a
system running 32-bit x86 Linux operating system. We uti-
lized two representative known rootkits which perform sys-
tem call table hooking and loadable kernel module (LKM)
hiding attack. The functionality of ATRA is implemented
on top of these rootkits for demonstrating the capabilities
and strengths against both static and dynamic kernel data
structures.
We implemented ATRA attack as a Loadable Kernel Mod-
ule (LKM) type of rootkit running in Linux kernel 2.6.28-11.
The pseudocode of the ATRA attack are shown in Algo-
rithm 1. The implementation mainly consists of two parts.
First part is the installation of ATRA ISR through IDT
hooking by IDTR modiﬁcation. By modifying the IDTR reg-
ister to point to a copy of IDT which contains ATRA ISR,
we let all existing and newly spawning processes to execute
our code in ATRA ISR. The second part of the implemen-
tation in ATRA ISR is invoked by the victim process, as it
enters kernel mode. ATRA ISR induces the victimized pro-
cess to modify the CR3 value within its own context so that
ATRA will be in eﬀect every time the process enters kernel
mode.
The attack process consists of three phases: (i) Attacker’s
preparation; (ii) Victim’s execution of the attacker’s pre-
pared ATRA code; (iii) Victim’s access to the relocated ker-
nel data structure. Note that in Step 5, the attacker needs
to ﬂush the corresponding TLB entry to force the MMU to
walk the relocated page table. Otherwise, the MMU will
keep using the original address mapping that is recorded in
the TLB cache.
Step 1 - Relocate KObj: Relocate the original kernel ob-
ject (KObj) into non-monitored memory region, then ma-
nipulate the copied data structure. The relocate routine al-
locates a new page from non-monitored memory region with
Algorithm 1 Pseudocode for ATRA
Global: Interrupt Descriptor Table (IDT), IDT Register (IDTR)
Input: Kernel Object (KObj) to be manipulated
(cid:46) Step 1
KObj’ ← relocate(KObj) (cid:46) Copy KObj into a non-monitored
memory region
manipulate(KObj’)
(cid:46) Step 2
IDT’ ← relocate(IDT)
redirect pointer(IDTR, IDT’) (cid:46) Replace the IDTR value with
the address of IDT’
overwrite IDT entry(original ISR, ATRA ISR)
handler ATRA ISR
(cid:46) Step 3 - PTE-ATRA
PTE’ ← relocate(PTE)
redirect pointer(PTE’, KObj’)
(cid:46) replace
the entry of the PTE’ which points the original KObj with the
address of the KObj’
(cid:46) Step 4 - PGD-ATRA
PGD’ ← relocate(PGD)
redirect pointer(PGD’, PTE’)
(cid:46) replace
the entry of the PGD’ which points the original PTE with the
address of the PTE’
(cid:46) Step 5 - Register-bound (CR3) ATRA
redirect pointer(CR3, PGD’) (cid:46) Replace the CR3 value with
the address of PGD’
ﬂush tlb()
original ISR()
end handler
alloc page() then obtains the corresponding virtual address
via page address(). Then, it copies the original page into
the newly allocated page using memcpy() function. After
this relocation is complete, the manipulate routine modiﬁes
the relocated kernel data structure as a typical rootkit does
(in case of the system call table, we can hook the function
pointer).
Step 2 - Relocate IDT: Relocate the original interrupt de-
scriptor table into non-monitored memory region, then ma-
nipulate the copied table. The relocate routine duplicates
the IDT using the SIDT instruction to fetch the virtual ad-
dress of the IDT. Then, the redirect pointer routine updates
the IDTR to point the relocated IDT by using the LIDT
instruction. Lastly, the overwrite IDT entry routine over-
writes the IDT entries to point the manipulated handler
called ATRA ISR.
Step 3 - PTE-ATRA: Launch PTE-ATRA. The relocate
routine duplicates the page table which contains the virtual
to physical address mapping of the KObj. It can obtain the
virtual address of page directory from current→mm→pgd
and the physical address of the page table by indexing the
page directory with upper 10 bits of the virtual address of
KObj. Then it converts the physical address of the page
table into virtual address by using
va() macro. The redi-
rect pointer routine manipulates the virtual to physical ad-
dress mapping in the relocated page table (PTE’ ) to map
the physical address of relocated KObj (KObj’ ).
Step 4 - PGD-ATRA: Launch PGD-ATRA. Details of this
step is the same as Step 3, except for relocating PGD and
making it to point the manipulated PTE instead of the orig-
inal.
Step 5 - CR3-ATRA: Replace the value of CR3 with the
address of PGD’. The attacker needs to ﬂush the correspond-
ing TLB entry to force the MMU to walk the relocated copy
of the page table. Any further memory access to the orig-
inal kernel object will be redirected to the relocated one.
After this step, it releases the execution ﬂow to the original
Interrupt Service Routine (ISR).
Immediately after the attacker inserts the ATRA-enabled
rootkit module, all processes including newly created ones
will be aﬀected each time when an interrupt is triggered.
More precisely, the eﬀect of ATRA persists while a process
is in the kernel mode and vanishes when the process is sched-
uled out (and the changed TLB entry is ﬂushed out). The
kernel preemption could rarely aﬀect this situation. We will
discuss this further in Section 7.
It is important to note that when a process is scheduled
out, the changed value in CR3 register is not saved back to
the process’s memory descriptor (e.g., mm struct). This is
because the kernel expects that the CR3 value is not mod-
iﬁed while the process is running. When a context switch
occurs, the value of CR3 is simply replaced with the saved-
CR3 value of the next scheduled process.
In addition, since Register-bound ATRA includes addi-
tional steps in the interrupt handler, it can degrade the sys-
tem performance when a process enters the kernel mode.
In fact, the external monitor may not be able to measure
the host system’s performance change induced by ATRA,
however if this change is noticeable enough for the system
administrator we cannot say ATRA is practical attack. We
will discuss this issue in Section 6.