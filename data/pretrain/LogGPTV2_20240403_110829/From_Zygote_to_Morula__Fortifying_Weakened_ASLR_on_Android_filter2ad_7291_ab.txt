knowledge about the memory layout of a target process and
have no better way to gain such knowledge than brute force.
Naturally, the evasion efforts in various types of OSes so
far have all focused on defeating the protection by either
stealing the secretive memory layout
information through
information leaks and side channels [25], or brute forcing
on those platforms that cannot randomize memory allocations
with enough entropy [39]. However, either direction is by
no means easy to pursue; exploitable vulnerabilities that leak
memory address information are fairly hard to come by, and
a single failure on brute force attempts often results in an
application crash that is easily detectable by users. Therefore,
successful ASLR evasions have only been seen occasionally
in real world attack incidents. As for Android, there has not
been a single incident known to the public where its ASLR
was bypassed and a ROP exploit was mounted consequently.
However, we believe that it will not take long before attackers
start exploiting the uniform memory layout among apps for
ASLR evasions as it signiﬁcantly eases the prerequisites and
difﬁculties of launching such attacks on Android.
To explain how much easier evasions have become on the
Zygote-forked app processes, we ﬁrst show the major obstacles
that an attacker has to face in order to bypass ASLR on
other platforms but are weakened on Android by Zygote. We
then systematically discuss the negative impact of Zygote on
ASLR. By demonstrating our attacks on real apps, we present
two general scenarios where the negatively impacted ASLR
can be defeated either remotely or locally, both archiving
ROP capabilities. In the end of the section, we provide a
quantitative analysis to show that the advantage gained by
attackers through exploiting the uniform address space layout
is indeed signiﬁcant enough to carry out realistic attacks.
A. ASLR Bypasses Made (Relatively) Easy
Attempts to bypass ASLR usually serve as the ﬁrst step of
a bigger attack plan with the end goal of launching ROP or
other types of control-ﬂow hijacks. This is because exploits
that solely obtain the memory mapping information of a
process do not yield much gain for attackers, unless the
mapping information, such as the load address of a library, can
advance another concurrent exploit within the same process
context, such as a buffer overﬂow. Together, two or even more
coordinating exploits eventually diverge the original control-
ﬂow of the vulnerable program in a way to carry out malicious
or unexpected activities.
In reality, such attacks involving chained exploits on dif-
ferent types of vulnerabilities are extremely difﬁcult to design
and execute, mostly for two reasons:
•
•
It is quite rare to ﬁnd an address information leak
vulnerability and a memory corruption vulnerability
within the same program;
Even if such vulnerabilities do exist, a hard-to-craft
exploit is needed to sequentially trigger the vulnera-
bilities and simultaneously channel the leaked address
information to the second exploitation phase, without
crashing the target process.
427
These two obstacles have maintained a very high bar
to prevent ASLR bypasses. As a result, the rare events of
successful ASLR bypasses have always drawn the security
community’s attention and have been seriously handled by
software vendors [44].
However, we found that both obstacles on Android are
no longer as difﬁcult
to circumvent as they are on other
platforms, due to the system-wide uniform address layout
resulting from the Zygote process creation model. In fact, both
obstacles have been weakened to an extent where bypassing
ASLR through information leakage becomes not only realistic
but also practical. Since the memory addresses of all shared
libraries and code, despite the presence of ASLR, are identical
among all Android app processes running concurrently on the
same device, the memory layout information of one app can be
easily inferred from that of any other app or a different run of
the same app. This cross-app and cross-run sharing of critical
memory layout paves the way to bypass the aforementioned
obstacles and further facilitates the crafting of exploits that
streamline ASLR compromise and control-ﬂow hijacking.
First of all,
the search for the required vulnerabilities
no longer need to be conﬁned within a single app. The
relaxed search criteria dramatically increases the chance of
satisfying the exploit prerequisites,
to the level of ﬁnding
apps that contain either address information leaks or control-
ﬂow hijack vulnerabilities—both types are retrievable from
vulnerability disclosure lists. Furthermore, an attacker who
already managed to gain a footprint on the victim’s device
(e.g., installed a trojan or controlled an app) can launch a
control-ﬂow hijacking attack at any vulnerable app without
having to ﬁnd any address information leakage. Second, the
exploitation process can now span several temporally separated
stages, which obviate the need to craft a single master exploit
that has to drive the entire attack continuously. Therefore,
rather than taking the complicated path that involves chaining
two or more individual exploits together and ﬁnding an explicit
communication channel within the victim process, attackers
now can proceed progressively by executing disconnected
exploits within different vulnerable apps and coordinating
them off-site. Finally, the uniform memory layout among apps
allows for multiple exploit attempts as well as reuse of the
leaked information. Less stable exploits are given multiple
chances to succeed, even at the cost of crashing the targets.
Moreover, once the address information is obtained, it can be
reused by future exploits (as long as the device does not reboot)
to resume an attack.
We also observed that the side effect of the Zygote process
creation model, in addition to directly undermining ASLR
security, has created a rich source of ROP gadgets in every
app process on Android. Figure 2 shows the size of the .text
section (i.e., executable code) in each shared library loaded by
the Zygote process (tested on Android 4.2 with Galaxy Nexus),
which translates into a total of 27 MB of executable code that
is identically located in all app processes.
B. Attacks on Real Apps
We now propose two attack scenarios where Android’s
negatively impacted ASLR can be exploited to carry out
ROP under separate threat models. For each scenario, we ﬁrst
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:58:51 UTC from IEEE Xplore.  Restrictions apply. 
i
e
z
s
n
o
l
i
t
c
e
s
e
b
a
u
c
e
x
E
t
10 MB
1 MB
128 KB
1 KB
0
libchromium net.so
libc.so
libdvm.so
libssl.so
10
20
30
40
50
60
70
Shared Libraries in Zygote (sorted in a size)
Chrome 
③ 
① 
② 
④  
Attacker’s 
web server 
Fig. 2. The size of each shared library’s executable section in the Zygote
process. The x-axis represents the indices of the shared libraries and the y-axis
represents the .text section size, at logarithmic scale.
VLC player 
Victim’s Android 
discuss its assumptions, setup, and attack workﬂow. We then
demonstrate a concrete attack against popular apps that are
found to be vulnerable, emphasizing the power of the attack
and the realistic nature of the corresponding scenario.
Remote Coordinated Attacks: In this scenario, attackers do
not have any prior presence on the targeted device, that is, the
entire attack is carried out remotely. Two vulnerabilities are
required: one memory address information leakage and one
control-ﬂow hijack. These can exist in different apps and must
be remotely exploitable. The attacker needs to either actively or
passively provide input, serving as exploits, to the vulnerable
apps.
The general workﬂow of attacks in this category resembles
that of the existing efforts to bypass ASLR on other platforms,
but is signiﬁcantly easier to realize for the reasons discussed in
Section III-A. The workﬂow starts with exploiting an address
information leakage in an app. Once the ﬁrst exploit succeeds
and the conditions to initiate the second exploit are met, the
attacks can then hijack the control-ﬂow of another app. Unlike
exploiting ASLR on other platforms, this attack lowers the bar
for exploiting the vulnerabilities, lasts through disconnected
stages, and can survive unstable exploits.
To verify the feasibility of this attack scenario, we set
out
to design and execute an attack on real world apps.
We used two popular Android apps: Chrome Browser
(com.android.chrome, version 25.0.1364.123)
and VLC media player
(com.overoz.vlc, version
0.1.0), which contain the vulnerabilities that satisfy the
requirements of our attack: an information leak on the Chrome
Browser and a control-ﬂow hijack on VLC. In particular, we
found a known vulnerability in Chrome Browser (CVE-2013-
0912 [4]) and built an exploit to retrieve part of the memory
layout of the browser process. Our exploit triggers a type
confusion error inside Chrome’s SVG parser, leading to an
out-of-bound memory read that leaks the memory addresses
of the loaded libraries. This exploit is embedded inside a
piece of JavaScript code that is served to vulnerable browsers
when they connect to a web server under our control, which
follows a typical and effective setup of remote exploits. The
second vulnerability was found in the H.263 decoder in
VLC Media Player [16], through which our exploit triggers a
buffer overﬂow with a malformed .swf ﬁle and hijacks the
control-ﬂow of the media player in a ROP fashion thereafter.
Fig. 3.
A remote coordinated attack for the Chrome browser and VLC
Media Player on Android. Each numbered step represents: 1) a malformed
html ﬁle exploiting the information leak vulnerability, 2) leaked memory
layout information, 3) URI intent, and 4) a malformed video ﬁle exploiting
the control-ﬂow hijack vulnerability which bypasses ASLR.
Figure 3 illustrates the detailed workﬂow of our attack,
which is similar to that of drive-by download attacks on desk-
tops. When a vulnerable Chrome Browser requests a webpage
from a compromised server, the attacker pushes the JavaScript
exploit to the browser as part of the requested HTML page ().
The exploit coerces the browser’s SVG parser to mistakenly
convert the type of an attacker-supplied data object into one
with a larger size than the original type. As a result, the
effective scope of the newly converted object expands into
the subsequent memory region, which contains a pointer to a
core system library that is preloaded by the Zygote process and
shared by all app processes (libchromium_net.so). The
exploit then simply reads the raw address in its new type object
and sends the leaked address information back to the remote
server (). Next, a second exploit is dynamically generated at
the server-side with the address information as an input. It can
carry out an ROP attack using the VLC Media Player using
the gadgets constructed from libchromium_net.so. The
JavaScript exploit running inside the browser now initiates the
second stage of the attack by issuing a request for opening
the remote .swf ﬁle, which is dispatched to the VLC Media
Player by the OS through an Intent (). In this step, the
VLC Media Player will be automatically launched by the
Intent even if it was not running on the device. Finally,
the media player downloads and starts rendering the exploit-
loaded media ﬁle (), during which the call stack is smashed
with return addresses to ROP gadgets and the program counter
is then hijacked.
Since designing sophisticated ROP attacks is out of
the scope of this work, our proof-of-concept attack stops
when the call stack is compromised and control-ﬂow is hi-
jacked, which represents an ideal starting point for launching
meaningful ROP attacks. Given a huge .text section in
libchromium_net.so (1.57 MB of executable code), we
estimate the task of searching for ROP gadgets to be fairly
easy, even if a large variety and amount of gadgets are desired.
As shown in the above proof-of-concept, remote coordi-
nated attacks do not involve any user interaction except for the
initial contact and can stay stealthy during the entire lifecycle,
428
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:58:51 UTC from IEEE Xplore.  Restrictions apply. 
a process similar to drive-by download attacks. Leveraging the
signiﬁcantly reduced difﬁculty of bypassing ASLR, our attacks
demonstrate that launching purely remote attacks on Android
platforms are not as hard as assumed by previously proposed
attacks on mobile devices, most of which require a locally
installed app to begin with. Our extended search for other
suitable target apps for this attack suggests that the vulnerable
apps are not uncommon on users’ devices. A large number of
apps either use old legacy code that have known vulnerabilities
or implement error-prone features (e.g., media decoders and
input parsers) using native code.
Note that Android’s permission model may limit the ca-
pability of this ASLR bypass attack. If the permissions are
enforced appropriately for an app, no meaningful malicious
activities can be done given the limited permissions of the
app. In practice, however, it is known that the least privi-
lege principle is difﬁcult to enforce as we have seen from
over-privileged apps in Android [20]. Furthermore, low-level
code executions in control-ﬂow hijacking attacks could allow
attackers to bypass permission checks by exploiting kernel
vulnerabilities.
Local Trojan Attacks: Unlike the ﬁrst scenario, local trojan
attacks bypass ASLR by obtaining the memory address infor-
mation via an unprivileged trojan app, rather than exploiting
an information leakage remotely. The trojan app needs to
be installed on the victim’s device beforehand, most likely
through social engineering means. To be appealing to the
targeted user or to infect a large number of users, the trojan
app may provide bogus features and does not ask for any
permissions. In this case,
the goal of the attackers is to
bypass ASLR and hijack the control of another app, eventually
escalating its privilege (e.g., the target app is privileged) or
stealing protected data (e.g., the target app manages private or
conﬁdential data).
The workﬂow of this type of an attack is fairly straightfor-
ward. The local trojan app reads the address layout information
using a simple native function. It can then attack any neighbor
apps through locally exploitable control-ﬂow hijacking vulner-
abilities. In principle, the attack surface in this case is much
larger than that of the previous attack scenario, due to the fact
that not only network sockets but also all means of performing
IPC on Android can be used for delivering exploits. Finally, the
exploit uses a memory corruption error as a window through
which the attack-supplied logic can be executed using ROP
under the identity of the target app.
We built a simple trojan app for demonstration. It ﬁrst
ﬁnds out the base address of libc.so in its own process
through a JNI call that returns a function pointer value. It then
exploits the aforementioned vulnerability in the VLC Media
Player through two separate attack vectors—an Intent and
a Binder message, both requesting VLC to render a crafted
media ﬁle. Once the ROP code starts executing in the process
context of VLC, it effectively gives the trojan app (and the
attacker) access to not only all granted permissions of the
player, but also the victim app’s private data in the ﬁle system,
database, and even memory (where sensitive data exists in
decrypted form).
In general, because of the uniform memory layout across
all apps, local trojan attacks on Android can easily bypass
ASLR to perform malicious activities, e.g., stealing permis-
sions, peeking into another app’s data, and even exploiting the
system apps or the OS.
C. Quantitative Analysis of Attackers’ Advantage
Without using our attack, bypassing fully effective ASLR
requires two independent vulnerabilities, namely, a control-
ﬂow hijacking and an address information leak, in the same
app. Therefore, the difﬁculty of exploiting ASLR via an app
x can be represented by the probability of ﬁnding these two
vulnerabilities simultaneously inside x:
Prexploit(x) = Prα(x) ∗ Prβ(x),
where Prα(x) is the probability of ﬁnding a control-ﬂow hijack
vulnerability in x, and Prβ(x) is the probability of ﬁnding an
address information leak vulnerability in x.
Next, we derive the difﬁculty of bypassing ASLR for both
of the attack scenarios we discussed earlier, in terms of the
probability of ﬁnding for the exploitable vulnerabilities.
Remote Coordinated Attack Analysis: Since the two inde-
pendent vulnerabilities can now exist in separated apps, the
difﬁculty of exploiting the app x becomes:
(cid:2)
Prcoordinated
exploit
(x) = Prα(x) ∗
Prβ(y),
y∈S
where S is the set of apps running on the same device as
x. Note that apps in S must have the proper permissions
to interact with the app x so that the information leak and
control-ﬂow hijacking attacks can be chained together (i.e.,
using Intent in our shown attack).
Thus, the advantage of the adversary A who chooses re-
mote coordinated attacks over the conventional ASLR exploits
can be deﬁned as the difference between the difﬁculty of each
exploitation:
Advcoordinated(A) = Prcoordinated
= Prα(x) ∗
exploit
(x) − Prexploit(x)
⎧⎨