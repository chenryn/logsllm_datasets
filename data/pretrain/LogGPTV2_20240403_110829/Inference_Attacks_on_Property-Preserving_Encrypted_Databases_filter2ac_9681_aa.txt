title:Inference Attacks on Property-Preserving Encrypted Databases
author:Muhammad Naveed and
Seny Kamara and
Charles V. Wright
Inference Attacks on
Property-Preserving Encrypted Databases
Muhammad Naveed
PI:EMAIL
UIUC∗
Seny Kamara
Microsoft Research
PI:EMAIL
Charles V. Wright
Portland State University
PI:EMAIL
ABSTRACT
Many encrypted database (EDB) systems have been pro-
posed in the last few years as cloud computing has grown
in popularity and data breaches have increased. The state-
of-the-art EDB systems for relational databases can handle
SQL queries over encrypted data and are competitive with
commercial database systems. These systems, most of which
are based on the design of CryptDB (SOSP 2011 ), achieve
these properties by making use of property-preserving en-
cryption schemes such as deterministic (DTE) and order-
preserving encryption (OPE).
In this paper, we study the concrete security provided by
such systems. We present a series of attacks that recover the
plaintext from DTE- and OPE-encrypted database columns
using only the encrypted column and publicly-available aux-
iliary information. We consider well-known attacks, includ-
ing frequency analysis and sorting, as well as new attacks
based on combinatorial optimization.
We evaluate these attacks empirically in an electronic med-
ical records (EMR) scenario using real patient data from
200 U.S. hospitals. When the encrypted database is oper-
ating in a steady-state where enough encryption layers have
been peeled to permit the application to run its queries,
our experimental results show that an alarming amount of
sensitive information can be recovered. In particular, our at-
tacks correctly recovered certain OPE-encrypted attributes
(e.g., age and disease severity) for more than 80% of the pa-
tient records from 95% of the hospitals; and certain DTE-
encrypted attributes (e.g., sex, race, and mortality risk) for
more than 60% of the patient records from more than 60%
of the hospitals.
Categories and Subject Descriptors
H.2.7 [Database Management]: Database Administra-
tion—Security, integrity, and protection; K.6.5 [Management
of Computing and Information Systems]: Security and
Protection
∗Work done in part at Microsoft Research.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from Permissions@acm.org.
CCS’15, October 12 - 16, 2015, Denver, CO, USA
Copyright is held by the owner/author(s). Publication rights licensed to ACM.
ACM 978-1-4503-3832-5/15/10...$15.00.
DOI: http://dx.doi.org/10.1145/2810103.2813651
General Terms
Security, Experimentation
Keywords
inference attacks; encrypted databases; property-preserving
encryption; deterministic encryption; order-preserving en-
cryption
1.
INTRODUCTION
As an increasing amount of private data is being collected
and stored by corporations and governments, database se-
curity has become a critical area in both research and in-
dustry. High-proﬁle data breaches like the Anthem breach
in which a database of 80 million healthcare records was
compromised or the Community Health Systems breach in
which 4.5 million HIPAA protected (non-medical) records
were stolen have fueled interest in database encryption tech-
niques.
While encryption could oﬀer some protections—particularly
when the database is exﬁltrated from disk—it also has seri-
ous limitations. In particular, since an encrypted database
cannot be queried, it has to be decrypted in memory which
means the secret key and the database are vulnerable to
adversaries with memory access.
In cloud settings, where
a customer outsources the storage and management of its
database, encryption breaks any service oﬀered by the provider.
Encrypted search. Motivated by these limitations of tra-
ditional encryption, the area of encrypted search has emerged
as one of the most active and potentially impactful areas
of cryptography research. Encrypted search is concerned
with the design and analysis of cryptographic techniques for
searching on encrypted data; including both structured and
unstructured data. There are various approaches to search
on encrypted data including searchable symmetric encryp-
tion (SSE) [20, 37], fully-homomorphic encryption (FHE)
[23], oblivious RAMs (ORAM) [24], functional encryption
[15], and property-preserving encryption (PPE) [11, 12]. All
these approaches achieve diﬀerent trade-oﬀs between secu-
rity, query expressiveness, and eﬃciency.
Leakage and inference attacks. The most secure en-
crypted search solutions are based on FHE and ORAM but
are currently too ineﬃcient to be of practical interest. There-
fore, all known practical solutions leak some information.
This leakage comes in two forms: setup leakage, which is
revealed by the encrypted database (EDB) itself; and query
644leakage which is revealed from the EDB and the query pro-
tocol.
To better understand the impact of this leakage, an im-
portant research direction in encrypted search, initiated by
Islam, Kuzu and Kantarcioglu [25], is the design of inference
attacks which try to recover information about the data or
queries by combining leakage with publicly-available infor-
mation (e.g., census data or language statistics). The most
well-known example of an inference attack is frequency anal-
ysis which is used to break classical ciphers. Another ex-
ample is the query-recovery attack of Islam et al. against
searchable symmetric encryption (SSE) schemes [25].
PPE-based EDBs.
In the context of structured data
and, in particular, of relational databases, the state-of-the-
art encrypted search solutions are based on PPE schemes
like deterministic and order-preserving encryption. Roughly
speaking, a PPE scheme is an encryption scheme that leaks
a certain property of the plaintext. For example, an order-
preserving encryption (OPE) scheme encrypts a set of mes-
sages in such a way that their ciphertexts reveal the order
of the messages (i.e., the order property). A deterministic
encryption (DTE) scheme encrypts a set of messages in such
a way that their ciphertexts reveal whether they are equal
or not (i.e., the equality property).
The CryptDB system [35] ﬁrst showed how to use PPE
to construct an encrypted database system that supports
a subset of SQL. The CryptDB design was adopted in the
more recent Cipherbase [10] and Encrypted BigQuery sys-
tems [2]. The former uses a combination of trusted hardware
and cryptography to eﬃciently support full SQL. At a very
high-level, each DB operation can be either done in a secure
co-processor or over encrypted data using the same approach
as CryptDB. In this work, when referring to Cipherbase, we
implicitly mean the variant where the operations in question
are not executed in the secure co-processor.
These CryptDB-like systems have several advantages. In
particular, they are competitive with real-world relational
database systems and they require a minimal number of
changes to the standard/legacy database infrastructure. The
key to their eﬃciency and “legacy-friendliness” is the use of
PPE which, roughly speaking, allows them to operate on
encrypted data in the same way as they would operate on
plaintext data. This enables fast operations on encrypted
data and the use of standard database algorithms and opti-
mizations.
1.1 Our Contributions
The use of PPE has important consequences on the se-
curity of encrypted database systems. Speciﬁcally, since
PPE schemes leak a non-trivial amount of information, it
is well-known that PPE-based designs like CryptDB and its
variants are vulnerable to inference attacks. The extent to
which these systems are vulnerable, however, has never been
investigated.
In this work, we study concrete inference attacks against
EDBs based on the CryptDB design. At a very high-level,
these systems encrypt each DB column with layers of diﬀer-
ent encryption schemes. When queried, the system decrypts
the layers until it reaches a layer that supports the neces-
sary operation. In particular, this means that columns that
support either range or equality queries are left encrypted
with OPE or DTE, respectively. With this in mind, we
consider inference attacks that take as input an OPE- or
DTE-encrypted column and an auxiliary and public dataset
and return a mapping from ciphertexts to plaintexts.
We stress that EDB systems are not designed to provide
privacy but the much stronger requirement of conﬁdentiality.
As such, for an attack to be successful against an EDB it is
not required to de-identify the records of the DB as would
be the case, say, against a diﬀerentially-private DB [21]. In
the setting of EDBs, an attack is successful if it recovers
even partial information about a single cell of the DB. As
we will see later, our attacks recover a lot more.
Concrete attacks. We study the eﬀectiveness of four
diﬀerent attacks. Two are well-known and two are new:
• frequency analysis: is a well-known attack that decrypts
DTE-encrypted columns given an auxiliary dataset that
is “well-correlated” with the plaintext column. The extent
of the correlation needed, however, is not signiﬁcant and
many publicly-available datasets can be used to attack
various kinds of encrypted columns with this attack.
• (cid:96)p-optimization: is a new family of attacks we introduce
that decrypts DTE-encrypted columns. The family is pa-
rameterized by the (cid:96)p-norms and is based on combinato-
rial optimization techniques.
• sorting attack: is an attack that decrypts OPE-encrypted
columns. This folklore attack is very simple but, as we
show, very powerful in practice. It is applicable to columns
that are “dense” in the sense that every element of the mes-
sage space appears in the encrypted column. While this
may seem like a relatively strong assumption, we show
that it holds for many real-world datasets.
• cumulative attack: is a new attack we introduce that de-
crypts OPE-encrypted columns. This attack is applicable
even to low-density columns and also makes use of com-
binatorial optimization techniques.
Evaluating inference attacks. As discussed above, most
inference attacks need an auxiliary source of information and
their success depends on how well-correlated the auxiliary
data is with the plaintext column. The choice of auxiliary
data is therefore an important consideration when evalu-
ating an inference attack. A strongly correlated auxiliary
dataset may yield better results but access to such a dataset
may not be available to the adversary. On the other hand,
misjudging which datasets are available to the adversary can
lead to overestimating the security of the system. An addi-
tional diﬃculty is that the “quality” of an auxiliary dataset
is application-dependent. For example, census data may be
well-correlated with a demographic database but poorly cor-
related with a medical database.
So the question of how to empirically evaluate inference
attacks is non-trivial.
In this work, we use the following
methodology: (1) we choose a real-world scenario where the
use of EDBs is well-motivated ; (2) we consider encrypted
columns from real-world data for the scenario under consid-
eration; and (3) we apply the attack on the encrypted col-
umn using any relevant publicly-available auxiliary dataset.
Empirical results. For our empirical analysis, we chose
databases for electronic medical records (EMRs) as our mo-
tivating scenario. Such medical DBs store a large amount of
645private and sensitive information about both patients and
the hospitals that treat them. As such they are a primary
candidate for the real-world use of EDBs and appear fre-
quently as motivation in prior work.
To evaluate our attacks, we consider DTE- and OPE-
encrypted columns for several attributes using real patient
data from the U.S. hospitals provided by the National In-
patient Sample (NIS) database of the Healthcare Cost and
Utilization Project (HCUP). 1
Following are the highlights of our results:
• (cid:96)2-optimization (vs. DTE-encrypted columns): the attack
recovered the mortality risk and patient death attributes
for 100% of the patients for at least 99% of the 200 largest
hospitals. It recovered the disease severity for 100% of the
patients for at least 51% of those same hospitals.
• frequency analysis (vs. DTE-encrypted columns): the at-
tack had the same results as (cid:96)2-optimization.
• sorting attack (vs. OPE-encrypted columns): the attack
recovered the admission month and mortality risk of 100%
of patients for at least 90% of the 200 largest hospitals.
• cumulative attack (vs. OPE-encrypted columns): the at-
tack recovered disease severity, mortality risk, age, length
of stay, admission month, and admission type of at least
80% of the patients for at least 95% of the largest 200
hospitals. For 200 small hospitals, the attack recovered
admission month, disease severity, and mortality risk for
100% of the patients for at least 99.5% of the hospitals.
Discussion. Our experiments show that the attacks con-
sidered in this work can recover a large fraction of data
from a large number of PPE-based medical EDBs. In light
of these results it is clear that these systems should not be
used in the context of EMRs. One may ask, however, how
the attacks would perform against non-medical EDBs, e.g.,
against human resource DBs or accounting DBs. We leave
this as important future work but conjecture that the at-
tacks would be at least as successful considering that much
of the data stored in such DBs is also stored in medical DBs
(e.g., demographic information).
We also note that even though the attacks can already re-
cover a considerable amount of information from the EDBs,
the results presented in this work should be viewed as a lower
bound on what can be extracted from PPE-based EDBs.
The ﬁrst reason is that the attacks only make use of leakage
from the EDB and do not exploit the considerable amount
of leakage that occurs from the queries to the EDB. The sec-
ond reason is that our attacks do not even target the weakest
encryption schemes used in these systems (e.g., the schemes
used to support equi- and range-joins).
2. RELATED WORK
Deterministic encryption was ﬁrst formally studied by Bel-
lare, Boldyreva and O’Neill in [11], where a security deﬁni-
tion as well as various constructions were provided. OPE
was introduced by Agrawal, Kiernan, Srikant and Xu [7] and
1We stress that we strictly adhered to the HCUP data
use agreement.
In particular, our study is not concerned