W(H1) D(H3)
F(H2) D(H3)
All
All
Service
http
ftp
ftp
Oracle
ftp
All
Action
Allow
Allow
Allow
Allow
Allow
Deny
TABLE II
REFERENCED EXPLOITS
ID Bugtraq Vulnerability
Target
Host
Pre-con on
source Host
Post-con on
target Host
prob.
ap
5033
wu 8668
tru 126
tns 4033
Apache
Chunked-
Enc. buff.
Wu-Ftpd
SockPrintf()
buff.
FTP
Bounce.
Oracle TNS
Listener.
W(H1)
user
W(H1)
user
W(H1)
F(H2)
D(H3)
D(H3)
user
user
root
root
user
root
0.3
0.7
0.95
0.6
B. result attack graphs
Since there are four hosts in our example, we may need to
generate 12 host-pair attack graphs at most. While some pairs
of hosts have the same network scenarios, including network
reachability, vulnerabilities and conﬁgurations, we need only
to generate 7 host-pair attack graphs, which are shown as the
Figure 4. The corresponding relationships between host-pairs
and host-pair attack graph are shown in Table III.
A
 ap
0.3
wu
0.7
F
 tru
0.95
ap
0.3
wu
0.7
W, user
wu
0.7
ap
0.3
W, root
W, root
W
 tru
0.95
F, user
(a) HPAG1
(b) HPAG2
(c) HPAG3
F
 tru
0.95
D, user
tns
0.6
D, root
W
 tru
0.95
tns
0.6
D, user
tns
0.6
W, user
D, user
ap
0.3
wu
0.7
tns
0.7
D, root
W, root
D, root
(d) HPAG4
(e) HPAG5
(f) HPAG6
(g) HPAG7
Fig. 4.
result host-pair attack graphs
RELATIONSHIPS BETWEEN HPAG AND HOST-PAIRS
TABLE III
host-pair
A→W
A→F
A→D
W→W
W→F
W→D
HPAG ID
HPAG1
unreachable
unreachable
HPAG6
HPAG3
HPAG5
host-pair
F→W
F→F
F→D
D→W
D→F
D→D
HPAG ID
HPAG2
unreachable
HPAG4
unreachable
unreachable
HPAG7
Using the method proposed in section III-B, we calculate
the probabilities of obtaining user and root privileges through
the structure of graphs in every host-pair attack graph. Then,
we get a hosts access graph as shown in Figure 5. We redraw
relations result graphs in Figure 6, where Figure 6(a) shows the
access graph generated by Ammann in [12], and Figure 6(b)
shows the host-centric attack graph generated by R. Hewett
and P. Kijsanayothin in [10].
A (H0)
(HPAG1,0.7,0.7)
W(H1)
(H PA G3,0.95,0)
(HPA G2,0.95,0.7)
F(H2)
(
H
P
A
G
5,0.9
5,0.6
)
D(H3)
(HPAG 4,0.95,0.57)
Fig. 5.
result hosts access graphs
(W_W,ap,
root,W_D)
W
(W_F ,tru,user,-)
(F _W,ap,root,-)
(
A
_
W
,a
p,r
o
o
t,-)
)
-
,
t
o
o
r
,
s
n
t
,
D
_
W
(
)
-
,
t
o
o
r
,
p
a
W
_
D
,
(
(A_D,tns,root,A_ W)
D
(D_D,tns,
root,D_W)
A
(
A
_
F
,tr
u,u
s
er,
A
(D_F ,tru,user,D_W)
(F_D,tns,root,F _W)
_
W
)
F
(F _F,tru,
user,F _W)
wu, ap
(W,root)
tns
(D,root)
(A)
tru
wu, ap
tru
wu, ap
(F,user)
tns
tns
tru
tru
(W,user)
tru
tru
(D,user)
(a) host-based access graph
(b) host-centric attack graph
Fig. 6.
host-based access graph and host centric attack graph
There are 4 nodes and 12 edges in Ammann’s access graph,
and there are 6 nodes and 12 edges in R. Hewett and P.
Kijsanayothin’s host-centric attack graph. In contrast to their
results, our hosts access graph have only 4 nodes and 5 edges.
As a result, our hosts access graph is much simpler and clearer
than theirs.
With the hosts access graph in Figure 5 and color graphs in
Figure 7, we know that if attackers want to penetrate host H3
from H0, they will choose Host H1 as stepping stones, rather
than H2. In the network administrator’s view, the safest host
in network is H3, and two edges, H0 → H1 and H2 → H1,
are the key edges to be checked in hardening network, because
133
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:06:04 UTC from IEEE Xplore.  Restrictions apply. 
they have higher probabilities of success than the others. As a
conclusion, the ﬁrst recommendation is to patch vulnerabilities
on Host H1 (W).
C. network security evaluation
Then, we get the corresponding user adjacency matrix U
and root adjacency matrix R, which are
0
0.95
0.95
1
0
0.95
1
0
0.7
1
0.95
0
⎛
⎜⎜⎝
U =
⎞
⎟⎟⎠
1
0
0
0
⎛
⎜⎜⎝
R =
⎞
⎟⎟⎠
0
0
0.6
0
0
0.57
0 0.6
1 0.7
0 0.7
0 0.7
0 0
⎛
⎜⎜⎝
So, we could calculate Usucc as
1 0.7
0 1
0 0.95
0 0
Usucc = F 3(U) =
⎞
⎟⎟⎠
0.665
0.95
1
0
0.665
0.95
0.95
1
As there are four hosts in our network, the max length of
paths without loops is 3, so we compute function F 3 times
to get Usucc.
And the maximum probability matrix of obtain root privi-
lege Rsucc is
Rsucc = F (Usucc, R) =
⎛
⎜⎜⎝
1 0.7
0 0.7
0 0.7
0 0
0.42
0
0.6
0
0
0.57
0 0.6
⎞
⎟⎟⎠
Each row in the matrixes Usucc and Rsucc represents a
source host, and each column represents a destination host.
Each cell of the matrixes holds a probability value, indicating
the likelihood for the source host to compromise destination
host. For example, the probability of obtaining root privilege
at host H3 (W) from an attacker host H0 (A) is 0.42.
As large attack graphs are complex and difﬁcult
to be
understood visually, we look matrixes Usucc and Rsucc as