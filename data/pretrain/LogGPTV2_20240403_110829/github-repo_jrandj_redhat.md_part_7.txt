        ```shell
        vi /etc/chrony.conf
        # modify the pool directive at the top of the file
        ```
    * Modify GRUB to boot a different kernel:
        ```shell
        grubby --info=ALL # list installed kernels
        grubby --set-default-index=1
        grubby --default-index # verify it worked
        ```
1. Linux Academy - Managing Users in Linux
    * Create the superhero group:
        ```shell
        groupadd superhero
        ```
    * Add user accounts for Tony Stark, Diana Prince, and Carol Danvers and add them to the superhero group:
        ```shell
        useradd tstark -G superhero
        useradd cdanvers -G superhero
        useradd dprince -G superhero
        ```
    * Replace the primary group of Tony Stark with the wheel group:
        ```shell
        usermod tstark -ag wheel
        grep wheel /etc/group # to verify
        ```
    * Lock the account of Diana Prince:
        ```shell
        usermod -L dprince 
        chage dprince -E 0
        ```
1. Linux Academy - SELinux Learning Activity
    * Fix the SELinux permission on `/opt/website`:
        ```shell
        cd /var/www # the default root directory for a web server
        ls -Z # observe permission on html folder
        semanage fcontext -a -t httpd_sys_content_t '/opt/website(/.*)'
        restorecon /opt/website
        ```
    * Deploy the website and test:
        ```shell
        mv /root/index.html /opt/website
        curl localhost/index.html # receive connection refused response
        systemctl start httpd # need to start the service
        setenforce 0 # set to permissive to allow for now
        ```
    * Resolve the error when attempting to access `/opt/website`:
        ```shell
        ll -Z # notice website has admin_home_t
        restorecon /opt/website/index.html
        ```
1. Linux Academy - Setting up VDO
    * Install VDO and ensure the service is running:
        ```shell
		dnf install vdo -y
		systemctl start vdo && systemctl enable vdo
        ```
    * Setup a 100G VM storage volume:
        ```shell
		vdo create --name=ContainerStorage --device=/dev/nvme1n1 --vdoLogicalSize=100G --sparseIndex=disabled
		# spareIndex set to meet requirement of dense index deduplication
		mkfs.xfs -K /dev/mapper/ContainerStorage
		mkdir /mnt/containers
		mount /dev/mapper/ContainerStorage /mnt/containers
		vi /etc/fstab # add line /dev/mapper/ContainerStorage /mnt/containers xfs defaults,_netdev,x-systemd.device-timeout=0,x-systemd.requires=vdo.service 0 0
        ```
    * Setup a 60G website storage volume:
        ```shell
		vdo create --name=WebsiteStorage --device=/dev/nvme2n1 --vdoLogicalSize=60G --deduplication=disabled
		# deduplication set to meet requirement of no deduplication
		mkfs.xfs -K /dev/mapper/WebsiteStorage
		mkdir /mnt/website
		mount /dev/mapper/WebsiteFiles /mnt/website
		vi /etc/fstab # add line for /dev/mapper/WebsiteStorage /mnt/website xfs defaults,_netdev,x-systemd.device-timeout=0,x-systemd.requires=vdo.service 0 0
        ```
1. Linux Academy - Final Practise Exam
    * Start the guest VM:
        ```shell
		# use a VNC viewer connect to IP:5901
		virsh list --all
		virsh start --centos7.0
		# we already have the VM installed, we just needed to start it (so we don't need virt-install)
		dnf install virt-viewer -y
		virt-viewer centos7.0 # virt-manager can also be used
		# now we are connected to the virtual machine
		# send key Ctrl+Alt+Del when prompted for password, as we don't know it
		# press e on GRUB screen
		# add rd.break on the linux16 line
		# now at the emergency console
		mount -o remount, rw /sysroot
		chroot /sysroot
		passwd
		touch /.autorelabel
		reboot -f # needs -f to work for some reason
		# it will restart when it completes relabelling
        ```
    * Create three users (Derek, Tom, and Kenny) that belong to the instructors group. Prevent Tom's user from accessing a shell, and make his account expire 10 day from now:
        ```shell
		groupadd instructors
		useradd derek -G instructors
		useradd tom -s /sbin/nologin -G instructors
		useradd kenny -G instructors
		chage tom -E 2020-10-14
		chage -l tom # to check
		cat /etc/group | grep instructors # to check
        ```
    * Download and configure apache to serve index.html from `/var/web` and access it from the host machine:
        ```shell
		# there is some setup first to establish connectivity/repo
		nmcli device # eth0 shown as disconnected
		nmcli connection up eth0
		vi /etc/yum.repos.d/centos7.repo
        # contents of centos.repo
        #####
        #[centos7]
        #name = centos
        #baseurl = http://mirror.centos.org/centos/7/os/x86_64/
		#enabled = 1
		#gpgcheck = 1
        #gpgkey = file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7
        #####
		yum repolist # confirm
		yum install httpd -y
		systemctl start httpd.service
		mkdir /var/web
		vi /etc/httpd/conf/httpd.conf
		# change DocumentRoot to "/var/web"
		# change Directory tag to "/var/web"
		# change Directory tag to "/var/web/html"
		echo "Hello world" > /var/web/index.html
		systemctl start httpd.service
		ip a s # note the first inet address for eth0 # from the guest VM
		curl http://192.168.122.213/ # from the host 
		# note that no route to host returned
		firewall-cmd --list-services # notice no http service
		firewall-cmd --add-service=http --permanent
		firewall-cmd --reload
		firewall-cmd --list-services # confirm http service
		curl http://192.168.122.255/ # from the host 
		# note that 403 error is returned
		# ll -Z comparision between /var/web and /var/www shows that the SELinux type of index.html should be httpd_sys_context_t and not var_t
		yum provides \*/semanage # suggests policycoreutils-python
		yum install policycoreutils-python -y
		semanage fcontext -a -t httpd_sys_content_t "/var/web(/.*)?"
		restorecon -R -v /var/web
		curl http://192.168.122.255/ # from the host - success!
        ```
    * Configure umask to ensure all files created by any user cannot be accessed by the "other" users:
        ```shell
		umask 0026 # also reflect change in /etc/profile and /etc/bashrc
		# default for files is 0666 so will be 0640 after mask
        ```
    * Find all files in `/etc` (not including subdirectories) that are older than 720 days, and output a list to `/root/oldfiles`:
        ```shell
		find /etc -maxdepth 1 -mtime +720 > /root/oldfiles 
        ```
    * Find all log messages in `/var/log/messages` that contain "ACPI", and export them to a file called `/root/logs`. Then archive all of `/var/log` and save it to `/tmp/log_archive.tgz`:
        ```shell
		grep "ACPI" /var/log/messages > /root/logs
		tar -czf /tmp/log_archive.tgz /var/log/ # note f flag must be last!
        ```
    * Modify the GRUB timeout and make it 1 second instead of 5 seconds:
        ```shell
		find / -iname grub.cfgreboot
		# /etc/grub.d, /etc/default/grub and grub2-mkconfig referred to in /boot/grub2/grub.cfg
		vi /etc/default/grub # change GRUB_TIMEOUT to 1
		grub2-mkconfig -o /boot/grub2/grub.cfg
		reboot # confirm timeout now 1 second
        ```
    * Create a daily cron job at 4:27PM for the Derek user that runs `cat /etc/redhat-release` and redirects the output to `/home/derek/release`:
        ```shell
		cd /home/derek
		vi script.sh
		# contents of script.sh
        #####
        ##!/bin/sh
		#cat /etc/redhat-release > /home/derek/release
        #####
		chmod +x script.sh
		crontab -u derek -e
		# contents of crontab
        #####
        #27 16 * * * /home/derek/script.sh
        #####
		crontab -u derek -l # confirm
        ```
    * Configure `time.nist.gov` as the only NTP Server:
        ```shell
		vi /etc/chrony.conf
		# replace lines at the top with server time.nist.gov
        ```
    * Create an 800M swap partition on the `vdb` disk and use the UUID to ensure that it is persistent:
        ```shell
		fdisk -l # note that we have one MBR partitions
		fdisk /dev/vdb
		# select n
		# select p
		# select default
		# select default
		# enter +800M
		# select w
		partprobe
		lsblk # confirm creation
		mkswap /dev/vdb1
		vi /etc/fstab
		# add line containing UUID and swap for the next 2 columns
		swapon -a
		swap # confirm swap is available
        ```
    * Create a new logical volume (LV-A) with a size of 30 extents that belongs to the volume group VG-A (with a PE size of 32M). After creating the volume, configure the server to mount it persistently on `/mnt`:
        ```shell
		# observe through fdisk -l and df -h that /dev/vdc is available with no file system
		yum provides pvcreate # lvm2 identified
		yum install lvm2 -y
		pvcreate /dev/vdc
		vgcreate VG-A /dev/vdc -s 32M
		lvcreate -n LV-A -l 30 VG-A
		mkfs.xfs /dev/VG-A/LV-A
		# note in directory /dev/mapper the name is VG--A-LV--A
		# add an entry to /etc/fstab at /dev/mapper/VG--A-LV--A and /mnt (note that you can mount without the UUID here)
		mount -a
		df -h # verify that LV-A is mounted
        ```
    * On the host, not the guest VM, utilise ldap.linuxacademy.com for SSO, and configure AutoFS to mount user's home directories on login. Make sure to use Kerberos:
        ```shell
		# this objective is no longer required in RHCSA 8
        ```
    * Change the hostname of the guest to "RHCSA":
        ```shell
		hostnamectl set-hostname rhcsa
        ```
1. Asghar Ghori - Exercise 3-1: Create Compressed Archives
	* Create tar files compressed with gzip and bzip2 and extract them:
	    ```shell
		# gzip
		tar -czf home.tar.gz /home
		tar -tf /home.tar.gz # list files
		tar -xf home.tar.gz
		# bzip
		tar -cjf home.tar.bz2 /home
		tar -xf home.tar.bz2 -C /tmp
        ```
1. Asghar Ghori - Exercise 3-2: Create and Manage Hard Links
	* Create an empty file *hard1* under */tmp* and display its attributes. Create hard links *hard2* and *hard3*. Edit *hard2* and observe the attributes. Remove *hard1* and *hard3* and list the attributes again:
	    ```shell
		touch hard1
		ln hard1 hard2
		ln hard1 hard3
		ll -i
		# observe link count is 3 and same inode number
		echo "hi" > hard2
		# observe file size increased to the same value for all files
		rm hard1
		rm hard3
		# observe link count is 1
        ```
1. Asghar Ghori - Exercise 3-3: Create and Manage Soft Links
	* Create an empty file *soft1* under `/root` pointing to `/tmp/hard2`. Edit *soft1* and list the attributes after editing. Remove *hard2* and then list *soft1*:
	    ```shell
		ln -s /tmp/hard2 soft1
		ll -i
		# observe soft1 and hard2 have the same inode number
		echo "hi" >> soft1
		# observe file size increased
		cd /root
		ll -i 
		# observe the soft link is now broken
        ```
1. Asghar Ghori - Exercise 4-1: Modify Permission Bits Using Symbolic Form
	* Create a file *permfile1* with read permissions for owner, group and other. Add an execute bit for the owner and a write bit for group and public. Revoke the write bit from public and assign read, write, and execute bits to the three user categories at the same time. Revoke write from the owning group and write, and execute bits from public:
	    ```shell
		touch permfile1
		chmod 444 permfile1
		chmod -v u+x,g+w,o+w permfile1
		chmod -v o-w,a=rwx permfile1
		chmod -v g-w,o-wx permfile1
        ```
1. Asghar Ghori - Exercise 4-2: Modify Permission Bits Using Octal Form
	* Create a file *permfile2* with read permissions for owner, group and other. Add an execute bit for the owner and a write bit for group and public. Revoke the write bit from public and assign read, write, and execute permissions to the three user categories at the same time:
	    ```shell
		touch permfile2
		chmod 444 permfile2
		chmod -v 566 permfile2
		chmod -v 564 permfile2
		chmod -v 777 permfile2
        ```
1. Asghar Ghori - Exercise 4-3: Test the Effect of setuid Bit on Executable Files
	* As root, remove the setuid bit from `/usr/bin/su`. Observe the behaviour for another user attempting to switch into root, and then add the setuid bit back:
	    ```shell
		chmod -v u-s /usr/bin/su
		# users now receive authentication failure when attempting to switch
		chmod -v u+s /usr/bin/su
        ```
1. Asghar Ghori - Exercise 4-4: Test the Effect of setgid Bit on Executable Files
	* As root, remove the setgid bit from `/usr/bin/write`. Observe the behaviour when another user attempts to run this command, and then add the setgid bit back:
	    ```shell
		chmod -v g-s /usr/bin/write
		# Other users can no longer write to root
		chmod -v g+s /usr/bin/write
        ```
1. Asghar Ghori - Exercise 4-5: Set up Shared Directory for Group Collaboration
	* Create users *user100* and *user200*. Create a group *sgrp* with GID 9999 and add *user100* and *user200* to this group. Create a directory `/sdir` with ownership and owning groups belong to *root* and *sgrp*, and set the setgid bit on */sdir* and test:
	    ```shell
		groupadd sgrp -g 9999
		useradd user100 -G sgrp 
		useradd user200 -G sgrp 
		mkdir /sdir
		chown root:sgrp sdir
		chmod g+s,g+w sdir
		# as user100
		cd /sdir
		touch file
		# owning group is sgrp and not user100 due to setgid bit
		# as user200
		vi file
		# user200 can also read and write
        ```
1. Asghar Ghori - Exercise 4-6: Test the Effect of Sticky Bit
	* Create a file under `/tmp` as *user100* and try to delete it as *user200*. Unset the sticky bit on `/tmp` and try to erase the file again. Restore the sticky bit on `/tmp`:
	    ```shell
		# as user100
		touch /tmp/myfile
		# as user200
		rm /tmp/myfile
		# cannot remove file: Operation not permitted
		# as root
		chmod -v o-t tmp
		# as user200
		rm /tmp/myfile
		# file can now be removed
		# as root
		chmod -v o+t tmp
        ```
1. Asghar Ghori - Exercise 4-7: Identify, Apply, and Erase Access ACLs
	* Create a file *acluser* as *user100* in `/tmp` and check if there are any ACL settings on the file. Apply access ACLs on the file for *user100* for read and write access. Add *user200* to the file for full permissions. Remove all access ACLs from the file:
	    ```shell
		# as user100
		touch /tmp/acluser
		cd /tmp
		getfacl acluser
		# no ACLs on the file