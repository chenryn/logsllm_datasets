backward compatibility by choosing larger exponents, but
requires that only a factor of the public exponent is low.
The hardness of the RSA problem and its efﬁcient cousin,
RSA with low public exponent, is the subject of an exten-
sive body of work. CSProp is different from traditional low
public exponent RSA in that the public exponent consists of
two factors in which one of them is small (i.e., not the full
public key, which is the exponent e), with important implica-
tions that make it not vulnerable to some of the attacks on
low public exponents. CSProp’s resilience to these attacks
results is due to: (1) CSProp uses a small public factor, rather
than a small public exponent, making its security properties
equivalent to RSA before propagation; and (2) Low public
exponent security problems arise primarily due to incorrect
usage: since the propagation scheme is automated and not
typically directly accessible to users, we make sure that it
does not have implementation issues. In fact, Section 3 shows
that CSProp’s security depends on the security of traditional
RSA. Next, we review some of published attacks against low
public exponent RSA.
Partial Key/Message Exposure Attacks. Coppersmith [36]
showed an attack on RSA with low public exponents when
the attacker knows two-thirds of the bits of the message.
While “message guessing” attacks can easily be avoided
if proper padding is used, Boneh, Durfee and Frankel [27]
extended Coppersmith’s technique to give an attack on RSA
with low public exponents when the adversary knows at least
a quarter of the bits of the secret key. Other works [18, 50,
87] demonstrate that in some circumstances it is possible to
recover bits of the key via side-channel attacks. CSProp is not
vulnerable to this attack since the full public exponent is large
and only the propagated factor is small (e.g., elow = 3). Thus,
the security of CSProp depends on the security of traditional
RSA.
Broadcast Attacks. Håstad [54] described a factorization al-
gorithm (thus breaking RSA) if the adversary gets access to 3
USENIX Association
30th USENIX Security Symposium    611
ciphertexts which encrypt the same message under 3 different
low public exponent public keys (N1,3), (N2,3), (N3,3). His
technique generalizes to larger values of elow and requires
roughly elow different encryptions. Other works [11, 37] gen-
eralize this method to attack RSA when related (as supposed
to the exact same) messages are encrypted multiple times un-
der different low exponent public keys. In our case, since the
strength of our propagation procedure (Prop) holds depending
on the hardness of the standard RSA ciphertext encryption
procedure (Enc), these attacks do not apply to CSProp (see
Section §3 for more details).
3 Ciphertext and Signature Propagation
In this section, we formally introduce ciphertext and signature
propagation, CSProp. Recall that this primitive provides end-
to-end security since it does not need a stateful and trusted
proxy. We provide the instantiation of CSProp based on the
RSA cryptosystem and present a proof of CSProp’s security.
3.1 Deﬁnitions
Notation. Throughout this section, we let n denote a security
parameter, and let P and P (cid:48) be computational problems rep-
resenting the cryptographic problems facing the adversary in
the original and propagated signature domains respectively.
3.1.1 Signature Propagation
Deﬁnition. A P−to−P (cid:48) signature propagation scheme of
rate R is a set of efﬁcient algorithms:
(cid:0)KeyGen, Sign, Verify, Prop, VerifyProp)
satisfying the following syntax, efﬁciency, correctness, and
security requirements.
• Syntax:
- KeyGen: this algorithm is used to generate the keys nec-
essary for signature propagation. Its syntax is as follows:
KeyGen(1n) outputs (vk, vk(cid:48), sk).
- Sign and Verify: the syntax for these algorithms is the
same as for standard public-key signing and verifying:
Sign(M, sk, vk) outputs σ; and Verify(M, vk,σ) outputs a bit.
- Prop: is used by the stateless and untrusted propagator to
generate the propagated signature: Prop(M, vk, vk(cid:48),σ) out-
puts σ(cid:48).
- VerifyProp:
to verify the
propagated signature, completing the validation process:
VerifyProp(M, vk, vk(cid:48),σ(cid:48)) outputs a bit.
• Efﬁciency: We have R· T(cid:48) = O(T ) where T and T(cid:48) denote
the running times of Verify and VerifyProp, respectively.
• Correctness: Fix a message M arbitrarily. Consider the
random procedure:
1) draw (vk, vk(cid:48), sk) ← KeyGen(1n);
2) draw σ ← Sign(M, sk, vk);
is used by the client
3) draw σ(cid:48) ← Prop(M, vk, vk(cid:48),σ).
Then,
Verify(M, vk,σ) = VerifyProp(M, vk, vk(cid:48),σ(cid:48)) = 1
holds with probability 1.
• Security: There are efﬁcient reductions from an adversary
who wins the standard existential unforgeability game for
(KeyGen, Sign, Verify) (resp. G, below) to an adversary who
solves P (resp. P (cid:48)). The game G is between a challenger C
and adversary A and works as follows:
The Signature Propagations Game G:
1. C draws (vk, vk(cid:48), sk) ← KeyGen(1n) and sends (vk, vk(cid:48))
to A.
2. For i = 1, . . . , poly(n): A sends query messages, Mi, to
C ; C computes σi ← Sign(Mi, sk, vk) and sends σi back
to A.
3. Finally, A sends a pair (M∗,σ∗) and wins if:
VerifyProp(M∗, vk, vk(cid:48),σ∗) = 1 and M∗ (cid:54)= Mi ∀ i.
Remark. So in a P−to−P (cid:48) signature propagation scheme,
(KeyGen, Sign, Verify) is a standard signature scheme assum-
ing the hardness of the problem P ; and (KeyGen, Prop ◦
Sign, VerifyProp) is a signature scheme assuming hardness
of P (cid:48); moreover, VerifyProp is R−times faster than Verify.
Thus, signature propagation gives a way to improve veriﬁ-
cation efﬁciency while still maintaining security assuming
hardness of P (cid:48) (a possibly stronger assumption, which we
will demonstrate for RSA).
Propagation for ciphertexts (used for to propagate encryption)
is deﬁned similarly.
3.1.2 Ciphertext Propagation
Deﬁnition. A P−to−P (cid:48) ciphertext propagation scheme of
rate R is a set of efﬁcient algorithms:
(cid:0)KeyGen, Enc, Dec, Prop, DecProp)
satisfying the following syntax, efﬁciency, correctness, and
security requirements.
• Syntax:
- KeyGen: this algorithm is used to generate the keys nec-
essary for ciphertext propagation. Its syntax is as follows:
KeyGen(1n) outputs (pk, pk(cid:48), sk).
- Enc and Dec:
the syntax for these algorithms is the
same as for standard public-key encryption and decryption:
Enc(M, pk) outputs C; and Dec(C, sk) outputs a message M.
- Prop: is used to generate the propagated ciphertext, complet-
ing the encryption: Prop(C, pk, pk(cid:48)) outputs C(cid:48).
- DecProp: standard public-key decryption is used to decrypt
the propagated ciphertext: DecProp(C(cid:48), sk) outputs a message
M.
612    30th USENIX Security Symposium
USENIX Association
• Efﬁciency: We have R· T = O(T(cid:48)) where T and T(cid:48) denote
the running times of Enc and Prop, respectively.
• Correctness and Security: (KeyGen, Enc, Dec) is a stan-
dard encryption scheme assuming the hardness of P (cid:48);
(KeyGen, Prop◦ Enc, DecProp) is an encryption scheme as-
suming the hardness of P ; correctness and security are inher-
ited.
3.2 Propagating with RSA
In this section, we provide the instantiation of CSProp based
on RSA.
3.2.1 Propagating RSA Signatures
We instantiate a P−to−P (cid:48) signature propagation scheme
where P is standard RSA and P (cid:48) is RSA with low public
exponent, speciﬁcally with exponent elow. Our construction
uses a hash function H, modeled as a random oracle.
• KeyGen(1n) generates an RSA modulus N = p· q for
secret primes p and q and draws a random e such that
elow|e; ﬁnd d such that e· d = 1 (mod φ(N)). Output:
(vk, vk(cid:48), sk) =(cid:0)(N,e), (N,elow), (N,d)(cid:1).
• Sign(M, sk, vk) computes h = H(M, vk), and outputs
σ = hd (mod N).
• Verify(M, vk,σ) computes h = H(M, vk) and outputs 1
if σe = h (mod N), 0 otherwise.
• Prop(M, vk, vk(cid:48),σ) outputs σ(cid:48) = σe/elow (mod N).
• VerifyProp(M, vk, vk(cid:48),σ(cid:48)) computes h = H(M, vk) and
outputs 1 if (σ(cid:48))elow = h (mod N), 0 otherwise.
Theorem. Let R = |e|/|elow|, where |e| and |elow| are the bit-
lengths of e and elow, respectively. Then,
(KeyGen, Sign, Verify, Prop, VerifyProp)
is a P−to−P (cid:48) signature propagation scheme with rate R, in
the random oracle model [20]. The random oracle is a stan-
dard strong assumption on perfectly random hash functions
supporting the collision resistance property, which we inherit
from the use of RSA. Such hash functions require that for
every unique input the function generates a unique output
chosen with equal probability from the output domain.
3.2.2 Propagating RSA Ciphertexts
We instantiate a P (cid:48)−to−P ciphertext propagation scheme,
where P (cid:48) (P ) correspond to the RSA problem with low-public
exponent and standard RSA respectively.
• The KeyGen(1n) algorithm is the same as
for
(pk, pk(cid:48), sk) =
(cid:0)(N,e), (N,elow), (N,d)(cid:1).
signature
propagation. Output:
• The Enc and Dec algorithms are RSA encryption and
decryption with low public exponent:
– Enc(M, pk(cid:48)) outputs C = M
elow (mod N), where M
denotes a padded version of M.
– Dec(C, sk) computes M = Cde/elow (mod N), and
recovers M from M.
• Prop(C, pk, pk(cid:48)) outputs C(cid:48) = Ce/elow (mod N).
• DecProp(C(cid:48), sk) computes M = (C(cid:48))d (mod N), and re-
covers M from M.
3.2.3 How to choose elow
Choosing the value of elow is an implementation issue that can
either be standardized or can be chosen by the origin server.
In both cases, the lowest possible exponent recommended
is e = 3 [26], but e = 5, e = 17, and e = 216 + 1 = 65,537
are also common. For example, RFC3110 [45] recommends
choosing e = 3 in order to optimize signature veriﬁcation
in DNSSEC, and Ferguson and Schneier [49] suggest using
e = 3 for signatures and e = 5 for encryption. As discussed
in Section 2.2, the security of σ(cid:48) and C(cid:48) depends on the RSA
assumption with low public exponent which is a widely stud-
ied hardness assumption. The consensus in the community
is that RSA with low public exponent is a stronger assump-
tion than plain RSA (since any algorithm which breaks RSA
would also presumably break RSA with low public exponent).
However, RSA with low public exponent is a commonly used
assumption. There is no currently known method to break
RSA with low public exponent, such a method would be a
major breakthrough.
3.3 Security Proof
In this section, we present the security proof of the P−to−P (cid:48)
signature propagation scheme under the RSA-based instan-
tation. We omit the security proof for ciphertext propagation
since it is analogous. We ﬁrst prove that the existential un-
forgeability property of (KeyGen, Sign, Verify) holds, which
implies security with respect to signatures. We also discuss
the security of the scheme relative to attacks on low public
exponents. Finally, using cryptographic game theory, we show
that the security of the signature propagation game depends
on the security of the standard RSA game only (i.e., CSProp is
secure if RSA is secure). Note that the proof is also applied to
the instantiation of P−to−P (cid:48) ciphertext propagation scheme
using RSA.
Proof. Correctness follows from verifying the equation:
(cid:0)(hd)e/elow(cid:1)elow = (hd·(e/elow)·elow = hd·e = h (mod N)
using d · e = 1 (mod φ(N)). The subroutines Verify and
VerifyProp are dominated by computing e−th and elow−th
powers mod N, which require executing the “square mod N”
function O(|e|) and O(|elow|) times, respectively; thus, the
efﬁciency property holds. Note that (KeyGen, Sign, Verify)
is the standard RSA signature scheme, except that the expo-
nent e is chosen randomly subject to the condition that elow|e.
USENIX Association
30th USENIX Security Symposium    613
This event naturally occurs with probability roughly 1/elow
in the plain RSA scheme, and so existential unforgeability of
(KeyGen, Sign, Verify) holds since the standard RSA problem
is hard [26].
Similarly, attacks on RSA with low public exponent do not
apply to our propagation scheme. In particular, because the
strength of VerifyProp(M, vk, vk(cid:48),σ(cid:48)) holds depending on the
hardness of the standard RSA signature veriﬁcation proce-
dure: Verify(M, vk,σ) the attacks do not apply to CSProp. In
other words, the original signature σ is veriﬁed using both
exponents e/elow and elow, and so VerifyProp(M, vk, vk(cid:48),σ(cid:48))
holds iff σ(cid:48) is generated using the propagation procedure:
Prop(M, vk, vk(cid:48),σ). Technically, this means that a malicious
proxy that attempts to forge a propagated signature fails by
the construction of VerifyProp (Section 3.2) assuming the
standard RSA problem to solve subroutine Verify is hard.
Note that the proof of security also applies to the RSA cipher-
text propagation scheme. Thus, a malicious proxy can cause
denial of service but cannot forge a signature on falsiﬁed or
incorrect data. We elaborate on this case to show how to use
an adversary who wins the signature propagation game to
solve the RSA problem with public exponent elow, implying
the impossibility of this attack provided RSA is secure. The
security proof is as follows:
So suppose A is an efﬁcient adversary who wins the sig-
nature propagation game with probability ε > 0. We design
another adversary A(cid:48) which, given (N,elow) and a random h∗
(mod N), outputs (h∗)dlow (mod N) also with probability ε,
where dlow is such that dlow · elow = 1 (mod φ(N)). A(cid:48) works
as follows:
• Upon receiving (N,elow,h∗), A(cid:48) chooses a large random
integer e(cid:48) and sends (N,e,elow) to A where e = elow · e(cid:48).
• Instantiate Q, a set of queries of A to Q = { }. Each time
A(cid:48) queries a signature of a message M do:
– check if M has been asked by A; if so return σ to
– otherwise, choose a random number σ (mod N)
A(cid:48) where (M,σ) is the pair appearing in Q;
and return σ to A(cid:48);
– add (M,σ) to Q;
– set h = σe (mod N) and program the input/output
pair(cid:0)(M,N,e),h(cid:1) into H, so that if H(M,N,e) is
computed again at any point in the experiment, h
will be returned.
• Finally, when A is ready to return its forgery of the
message M∗, A(cid:48) works as follows:
– if M∗ appears as the ﬁrst coordinate of some pair
in Q, A(cid:48) aborts giving no output;
(M∗,N,e), A(cid:48) returns h∗;
– otherwise, when A queries H on the input
– ﬁnally A sends (M∗,σ∗), A(cid:48) outputs σ∗ and halts.
Notice that A(cid:48) answers the queries of A correctly because
σe = H(M,N,e) holds for them all. Furthermore, if h∗ is a
random number (mod N) then the response to A’s hash query
H(M∗,N,e) is uniformly distributed. These two observations
mean that A(cid:48) properly simulates the signature propagation
game for A, and so by assumption, A wins this game with
probability ε. Finally, note that whenever A wins the signa-
ture propagation game, (σ∗)elow = h∗ (mod N) holds, which
implies σ∗ = (h∗)dlow (mod N), and so A(cid:48) breaks low public
(cid:4)
exponent RSA.
4 Applications of CSProp
We illustrate the use and advantages of CSProp on two im-
portant Internet protocols: DNSSEC and TLS, which are core
protocols with respect to securely connecting end devices to
the Internet. Both DNSSEC and TLS are used extensively
to provide integrity, conﬁdentiality, and/or authentication for
critical data. Such operations are computationally expensive,
for instance, Miranda et al. [78] analyzes the energy con-
sumption of the Transport Layer Security (TLS) protocol
transactions on a mobile device and found that more than
60% of total energy is consumed by TLS overhead. Often
real-world conﬁgurations force end devices to rely on third
parties (e.g., DNS resolver and default gateway) to perform
cryptographic functionality such as decryption or veriﬁcation
on their behalf. Although such a setup reduces the require-
ment on the energy-constrained end devices, it compromises
security: if the third party is compromised or spoofed, the
end devices are completely compromised. Moreover, the last
hop between the third party and the end devices becomes
vulnerable to attacks (e.g., a recent client-side attack on DNS
bypasses DNSSEC [9]). In this section, we show how we can
use CSProp to extend DNSSEC and TLS veriﬁcation to the
end devices, providing security with acceptable overhead.
4.1 CSProp over DNSSEC