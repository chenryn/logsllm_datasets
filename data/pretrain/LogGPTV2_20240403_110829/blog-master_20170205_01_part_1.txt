## 宝剑赠英雄 - 任意组合字段等效查询, 探探PostgreSQL多列展开式B树 (GIN)      
##### [TAG 15](../class/15.md)  
### 作者          
digoal            
### 日期                    
2017-02-05          
### 标签          
PostgreSQL , 多列索引 , btree , gin , gist , brin , btree_gist , btree_gin , 复合索引 , composite index , 任意字段等效查询           
----          
## 背景         
很多人小时候都有一个武侠梦，独孤求败更是金庸武侠小说里的一位传奇人物。      
纵横江湖三十余载，杀尽仇寇奸人，败尽英雄豪杰，天下更无抗手，无可奈何，惟隐居深谷，以雕为友。 呜呼，生平求一敌手而不可得，诚寂寥难堪也。      
独孤老前辈的佩剑描写非常有意思，从使用的佩剑，可以看出一个人的武功修为。      
第一柄是一柄青光闪闪的无名利剑。“凌厉刚猛，无坚不摧，弱冠前以之与河朔群雄争锋。”      
第二柄是紫薇软剑，“三十岁前所用，误伤义士不祥，乃弃之深谷。”      
第三柄是玄铁重剑，“重剑无锋，大巧不工，四十岁之前恃之横行天下。”      
第四柄是柄已腐朽的木剑，原因是独孤求败“四十岁后，不滞于物，草木竹石均可为剑。”      
个人感觉和我们现在搞IT的也很相似，开发语言有C, python, java, ....各式各样的可选，数据库有Oracle, PostgreSQL, MySQL等等，也是各式各样的产品可选。          
宝剑赠英雄，美玉配佳人。      
不管你是李逍遥、还是杨过、小龙女，希望你也能找到合适你的武器。      
![pic](20170205_01_pic_002.jpg)        
![pic](20170205_01_pic_003.jpg)        
进入正题。      
多列的组合查询在实际的应用中也较为常见，比如淘宝购物网站的商品搜索        
![pic](20170205_01_pic_001.jpg)        
有发货地、分类、是否包邮、是否货到付款、是否天猫、二手、等等许多选项，这些选项在设计时可能使用多个字段来表示（当然，有些可能会使用BIT合并成单个字段来表述）。          
举个非常简单的例子        
```        
CREATE TABLE test2 (        
  major int,        
  minor int,        
  name varchar        
);        
```        
查询条件中，包含test2表的两个字段的检索        
```        
SELECT name FROM test2 WHERE major = constant AND minor = constant;        
```        
这种情况下，我们可以使用两个索引，也可以使用一个复合索引（多列索引）。        
```        
CREATE INDEX test2_mm_idx ON test2 (major, minor);        
```        
以上例子可以转化为对多个字段的任意组合查询需求(任意单一、任意两个、任意三个，任意若干个字段的查询需求)。          
看过我写的文档的童鞋，可能会联想到我在之前写过一篇文档        
[《PostgreSQL 9.6 黑科技 bloom 算法索引，一个索引支撑任意列组合查询》](../201605/20160523_01.md)          
不过本文并不是要讲bloom，本文要讲一讲另一种技术（gin索引的暗藏功能，多列展开式B树）。          
在开始正文之前，大家有没有想过这些问题呢？        
1\. 哪些索引方法支持多列索引?        
PostgreSQL目前支持btree, hash, gin, gist, sp-gist, brin, bloom, rum等众多索引访问方法，哪些访问方法支持多列索引呢？        
2\. 多列索引的内部存储结构如何?        
比如b-tree单列索引很好理解，就是以被索引列值为KEY的类B-Tree(nbtree)结构。但是当使用多列索引时，内部是如何组织的呢？        
不同的索引方法，内部组织有什么差异呢？        
3\. 多列索引支持哪些查询组合        
比如index on (a,b,c)三列，那么哪些查询条件能用上多列索引呢？比如where a=? and b>?        
不同的索引方法，适用的查询条件是不是都一样呢？        
4\. 不同的查询组合，使用多列索引的效率如何，效率是否一样（是否与索引访问方法有关？）        
比如b-tree index on (a,b,c)三列，where a=? and b>? 以及 where b>? and c=? 效率一样吗？        
5\. 多列索引，每个列的顺序是否可以指定        
比如，是不是所有的索引方法都可创建这样的索引   index on (a,b desc, c desc nulls first)          
6\. 同样的查询组合，使用什么索引方法更高效        
比如 where a=? and b=? and c=? 这样的查询，适用gin好还是b-tree好呢？        
7\. 如何选择合适的索引方法，与查询条件，数据分布有关系吗？        
要回答这些问题，需要对索引方法，内部存储结构有一定的了解。        
本文将以gin和btree为例，讲解一下multi column index，它们的内部存储结构，适应的场景。        
## 一 单列索引的内部结构        
建议读者先了解一下单列索引的内部结构，本文就不展开了，可以参考我之前写的一些文章。          
[《深入浅出PostgreSQL B-Tree索引结构》](../201605/20160528_01.md)        
[《B-Tree和B+Tree》](../201606/20160610_01.md)          
[《PostgreSQL GIN索引实现原理》](../201702/20170204_01.md)        
[《从难缠的模糊查询聊开 - PostgreSQL独门绝招之一 GIN , GiST , SP-GiST , RUM 索引原理与技术背景》](../201612/20161231_01.md)         
## 二 PostgreSQL use bitmap combine single column indexs        
在没有multi column index时，如果我们有多个列的查询条件，通常可以使用选择性好的列，或者多个列索引的组合。        
PostgreSQL 使用多个列索引组合查询时，可以使用多列查询结果的ctid bitmap and or ，筛选出最终符合多列条件的ctid。        
不仅适用于多列的查询条件，也适用于单列的多个查询条件。        
例如        
```        
WHERE x = 42 OR x = 47 OR x = 53 OR x = 99        
WHERE x = 5 AND y = 6        
```        
https://www.postgresql.org/docs/9.6/static/indexes-bitmap-scans.html        
Combining Multiple Indexes        
```        
A single index scan can only use query clauses that use the index's columns with operators of its operator class and are joined with AND.         
For example, given an index on (a, b) a query condition like WHERE a = 5 AND b = 6 could use the index, but a query like WHERE a = 5 OR b = 6 could not directly use the index.        
Fortunately, PostgreSQL has the ability to combine multiple indexes (including multiple uses of the same index) to handle cases that cannot be implemented by single index scans.         
The system can form AND and OR conditions across several index scans.         
For example, a query like WHERE x = 42 OR x = 47 OR x = 53 OR x = 99 could be broken down into four separate scans of an index on x, each scan using one of the query clauses.         
The results of these scans are then ORed together to produce the result.         
Another example is that if we have separate indexes on x and y,         
one possible implementation of a query like WHERE x = 5 AND y = 6 is to use each index with the appropriate query clause and then AND together the index results to identify the result rows.        
支持单列组合条件，也支持多列组合条件。        
To combine multiple indexes, the system scans each needed index and prepares a bitmap in memory giving the locations of table rows that are reported as matching that index's conditions.         
The bitmaps are then ANDed and ORed together as needed by the query. Finally, the actual table rows are visited and returned.         
注意bitmap扫描是按CTID顺序输出，而非KEY的顺序输出，所以如果对列有ORDER BY的需求，那么会需要额外的sort，优化器会根据实际情况选择合适的执行计划（bitmap 或 单个索引filter但是不用sort）        
The table rows are visited in physical order, because that is how the bitmap is laid out;         
this means that any ordering of the original indexes is lost, and so a separate sort step will be needed if the query has an ORDER BY clause.         
For this reason, and because each additional index scan adds extra time, the planner will sometimes choose to use a simple index scan even though additional indexes are available that could have been used as well.        
In all but the simplest applications, there are various combinations of indexes that might be useful, and the database developer must make trade-offs to decide which indexes to provide.         
Sometimes multicolumn indexes are best, but sometimes it's better to create separate indexes and rely on the index-combination feature.         
For example, if your workload includes a mix of queries that sometimes involve only column x, sometimes only column y, and sometimes both columns,         
you might choose to create two separate indexes on x and y, relying on index combination to process the queries that use both columns.         
You could also create a multicolumn index on (x, y).         
This index would typically be more efficient than index combination for queries involving both columns,         
but as discussed in Section 11.3, it would be almost useless for queries involving only y, so it should not be the only index.         
A combination of the multicolumn index and a separate index on y would serve reasonably well. For queries involving only x, the multicolumn index could be used,         
though it would be larger and hence slower than an index on x alone. The last alternative is to create all three indexes,         
but this is probably only reasonable if the table is searched much more often than it is updated and all three types of query are common.         
If one of the types of query is much less common than the others, you'd probably settle for creating just the two indexes that best match the common types.        
在选择单列还是多列索引时，请根据查询需求选择。如果查询很多，更新插入删除很少，那么如果查询条件有a, b, a and b这类的，可以建立3个索引，分别是(a), (b), (a,b)。          
```        
## 三 哪些索引方法支持multi column index        
Currently, only the B-tree, GiST, GIN, and BRIN index types support multicolumn indexes.         
Up to 32 columns can be specified. (This limit can be altered when building PostgreSQL; see the file pg_config_manual.h.)        
目前PostgreSQL的B-tree, GiST, GIN, and BRIN索引方法，支持多列索引。        
目前支持最多32个列的多列索引，实际上可以更大（通过调整pg_config_manual.h可以做到更大，但是还有另一个限制，indextuple不能超过约1/4的数据块大小，也就是说复合索引列很多的情况下，可能会触发这个限制）。           
## 四 multi column index的查询组合与效率解读        
Multicolumn Indexes        
https://www.postgresql.org/docs/current/static/indexes-multicolumn.html        
由于b-tree, gin , gist, brin都支持multi column索引，但是这几种索引的内部存储方式不一样，所以不同的组合查询的效率也不一样。        
例如a,b,c三列的组合索引，select * from tbl where a=? and b>? 以及 where b=?，这两种查询组合，哪个效率高？和索引方法有大大的关系。        
### btree 查询组合与效率        
b-tree多列索引支持任意列的组合查询        
A multicolumn B-tree index can be used with query conditions that involve any subset of the index's columns, but the index is most efficient when there are constraints on the leading (leftmost) columns.         
虽然b-tree多列索引支持任意列的组合查询，但是最有效的查询还是包含驱动列条件的查询。        
The exact rule is that equality constraints on leading columns, plus any inequality constraints on the first column that does not have an equality constraint, will be used to limit the portion of the index that is scanned.         
对于b-tree的多列索引来说，一个查询要扫描索引的哪些部分呢？        
从驱动列开始算，按索引列的顺序算到非驱动列的第一个不相等条件为止（没有任何条件也算）。        
Constraints on columns to the right of these columns are checked in the index, so they save visits to the table proper, but they do not reduce the portion of the index that has to be scanned.         
For example, given an index on (a, b, c) and a query condition WHERE a = 5 AND b >= 42 AND c = 42 AND c = 77 would be skipped, but they'd still have to be scanned through.         
其他例子        
（WHERE b >= 42 AND c = 5 AND b=1 and c < 77），从a=5开始的所有索引条目，都会被扫描。        
This index could in principle be used for queries that have constraints on b and/or c with no constraint on a — but the entire index would have to be scanned, so in most cases the planner would prefer a sequential table scan over using the index.        
建议有频繁的复合查询，并且复合查询带有驱动列以及其他列的查询时，可以考虑使用多列索引。          
### gist 查询组合与效率        
gist多列索引支持任意列的组合查询。        
A multicolumn GiST index can be used with query conditions that involve any subset of the index's columns.         
Conditions on additional columns restrict the entries returned by the index, but the condition on the first column is the most important one for determining how much of the index needs to be scanned.         
注意与b-tree不一样的地方，驱动列的选择性决定了需要扫描多少索引条目，扫描多少条目与非驱动列无关（而b-tree是与非驱动列也有关的）。        
A GiST index will be relatively ineffective if its first column has only a few distinct values, even if there are many distinct values in additional columns.         
如果驱动列的选择性不好、其他列的选择性很好，即使查询条件同时包含了 驱动列以及其他列 ，也需要扫描很多索引条目，因为扫描多少索引条目和其他列无关。        
这么说，并不建议使用gist多列索引。        
如果一定要使用GIST多列索引，请一定要把选择性好的列作为驱动列。        
### gin 查询组合与效率        
gin多列索引支持任意列的组合查询。        
并且任意查询条件的查询效率都是一样的。        
A multicolumn GIN index can be used with query conditions that involve any subset of the index's columns.         
Unlike B-tree or GiST, index search effectiveness is the same regardless of which index column(s) the query conditions use.        
### brin 查询组合与效率        
brin多列索引支持任意列的组合查询。        
并且任意查询条件的查询效率都是一样的。        
如果有brin组合查询的必要(比如多个与ctid线性相关的列的范围查询，无所谓线性的方向)，任何时候都建议使用BRIN的multi column index，除非想针对不同的列使用不同的pages_per_range（比如有些列10个块的范围和另外一些列100个块的范围覆盖差不多，那么建议它们使用不同的pages_per_range）        
A multicolumn BRIN index can be used with query conditions that involve any subset of the index's columns.         
Like GIN and unlike B-tree or GiST, index search effectiveness is the same regardless of which index column(s) the query conditions use.         
The only reason to have multiple BRIN indexes instead of one multicolumn BRIN index on a single table is to have a different pages_per_range storage parameter.        
## 五 multi column使用建议        
多列索引每个列的operator class必须和实际查询匹配，在创建索引时可以指定。         
Of course, each column must be used with operators appropriate to the index type; clauses that involve other operators will not be considered.        
Multicolumn indexes should be used sparingly.         
In most situations, an index on a single column is sufficient and saves space and time.         
Indexes with more than three columns are unlikely to be helpful unless the usage of the table is extremely stylized.         
## 六 多列索引，在不同组合下的查询效率差异，原理剖析 - 从索引内部结构说起        
前面分析了b-tree, gin都支持任意组合查询。        
但是b-tree推荐使用包含驱动列的查询条件，如果查询条件未包含驱动列，则需要扫描整个复合索引。        