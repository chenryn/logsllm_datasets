 bpt_t bpt; 
return getn_bpt(n, &bpt) ? bpt.ea : -1; 
GetBptQty
return get_bpt_qty();
GetCharPrm
If (offset &lt= 191)
   return * (unsigned char* )(offset + (char*)&inf); 
GetColor
if (what == CIC_ITEM)
   return get_color(ea);
else if (what == CIC_FUNC)
   return get_func(ea)->color;
else if (what == CIC_SEGM)
   return get_seg(ea)->color;
return 0xFFFFFFFF; 
GetConstBmask
return get_const_bmask(const_id);
GetConstByName
return get_const_by_name(name);
GetConstCmt
get_const_cmt(const_id, repeatable, buf, sizeof(buf));
return qstrdup(buf); 
GetConstEnum
return get_const_enum(const_id);
GetConstEx
return get_const(enum_id, value, serial, bmask);
GetConstName
get_const_name(const_id, buf, sizeof(buf));
return qstrdup(buf); 
GetConstValue
return get_const_value(const_id);
GetCurrentLine
tag_remove(get_curline(), buf, sizeof(buf))
return qstrdup(buf); 
GetCurrentThreadId
return get_current_thread();
GetCustomDataFormat
return find_custom_data_format(name);
GetCustomDataType
return find_custom_data_type(name);
GetDebuggerEvent
return wait_for_next_event(wfne, timeout);
GetDisasm
generate_disasm_line(ea, buf, sizeof(buf));
tag_remove(buf, buf, 0);
return qstrdup(buf); 
GetEntryName
get_entry_name(ordinal, buf, sizeof(buf));
return qstrdup(buf); 
GetEntryOrdinal
return get_entry_ordinal(index);
GetEntryPoint
return get_entry(ordinal);
GetEntryPointQty
return get_entry_qty();
GetEnum
return get_enum(name);
GetEnumCmt
get_enum_cmt(enum_id, repeatable, buf, sizeof(buf));
return qstrdup(buf); 
GetEnumFlag
return get_enum_flag(enum_id);
GetEnumIdx
return get_enum_idx(enum_id);
GetEnumName
 get_enum_name(enum_id,  buf, sizeof(buf));
return qstrdup(buf); 
GetEnumQty
return get_enum_qty();
GetEnumSize
return get_enum_size(enum_id);
GetEnumWidth
if (enum_id > 0xff000000)
   netnode n(enum_id);
   return (n.altval(0xfffffffb) >> 3) & 7;
else
   return 0; 
GetEventBptHardwareEa
return get_debug_event()->bpt.hea;
GetEventEa
return get_debug_event()->ea;
GetEventExceptionCode
return get_debug_event()->exc.code;
GetEventExceptionEa
return get_debug_event()->exc.ea;
GetEventExceptionInfo
return qstrdup(get_debug_event()->exc.info);
GetEventExitCode
return get_debug_event()->exit_code;
GetEventId
return get_debug_event()->eid;
GetEventInfo
return qstrdup(get_debug_event()->info);
GetEventModuleBase
return get_debug_event()->modinfo.base;
GetEventModuleName
return qstrdup(get_debug_event()->modinfo.name);
GetEventModuleSize
return get_debug_event()->modinfo.size;
GetEventPid
return get_debug_event()->pid;
GetEventTid
return get_debug_event()->tid;
GetExceptionCode
excvec_t  *ev = retrieve_exceptions();
return idx size() ? ( *ev)[idx].code : 0; 
GetExceptionFlags
excvec_t  *ev = retrieve_exceptions();
for (excvec_t::iterator i = ev->begin(); i != ev->end(); i++)
   if ((* i).code == code)
      return (*i).flags;
return -1; 
GetExceptionName
excvec_t  *ev = retrieve_exceptions();
for (excvec_t::iterator i = ev->begin(); i != ev->end(); i++)
   if ((* i).code == code)
      return new qstring((* i).name);
return NULL; 
GetExceptionQty
return retrieve_exceptions()->size();
GetFchunkAttr
func_t  * f = get_func(ea);
return internal_get_attr(f, attr); 
GetFchunkReferer
func_t  * f = get_fchunk(ea);
func_parent_iterator_t fpi(f);
return n refqty ? f->referers[n] : BADADDR; 
GetFirstBmask
return get_first_bmask(enum_id);
GetFirstConst
return get_first_const(enum_id, bmask);
GetFirstHashKey
netnode n(id).hash1st(buf, sizeof(buf));
return qstrdup(buf); 
GetFirstIndex
return netnode n(id).sup1st(tag);
GetFirstMember
return get_struc_first_offset(get_struc(id));
GetFirstModule