### Intermediate Representation (IR): A Directed Acyclic Graph (DAG) of Operators

Musketeer generates code for multiple parallel backend execution engines from this IR, enabling flexible workflow execution by dynamically choosing and combining these engines. To support secure Multi-Party Computation (MPC), we have added prototype support for MPC to Musketeer.

### Implementation

We extended Musketeer to allow input columns to be marked as private and introduced a set of MPC operators into the IR. With these two enhancements, Musketeer can automatically generate Python code for VIFF's secret sharing-based MPC when given a clique of MPC operators. In the generated code, private columns are secret-shared among parties, and computations on them use MPC constructs. Additionally, we integrated initial code generation support for the VIFF MPC framework as a Musketeer backend. To ensure that secure computations run in MPC, we assigned infinite costs for combining them with non-MPC operators and mapping them to non-MPC backends. We chose VIFF due to its open-source nature and flexibility, offering both active and passive security options and adjustable corruption thresholds. Future plans include integrating more recent and efficient MPC frameworks as backends. Our Musketeer extensions are open-source and available at:

- [https://github.com/hicsail/Musketeer](https://github.com/hicsail/Musketeer)

### Initial Results

We prototyped the market concentration use case using our implementation. Specifically, we computed the Herfindahl-Hirschman Index (HHI) over the market shares of several vehicle-for-hire (VFH) companies. This computation allows regulators to assess the long-term impact of changing market environments, such as the emergence of ride-sharing services like Uber and Lyft, on market concentration.

The workflow, as shown in Figure 1, proceeds as follows: each company first computes its local aggregate fare revenue from private trip data using their preferred big data analytics stack. The per-company revenues are then passed into the secure part of the workflow, where they are summed under MPC to determine the aggregate revenue. Market shares are computed by dividing each per-company revenue by the total revenue. Finally, the HHI is computed by squaring the market shares and summing the results.

We used six years of public NYC taxi trips' fare information, dividing the data across five imaginary taxi companies (50%/20%/10%/10%/10%). Each company privately computed the initial revenue on between 16 and 80 GB of trip data in their own Hadoop cluster running on Amazon EC2. The results were automatically passed into a shared VIFF cluster with three compute parties, also running on EC2.

Table 1 shows our preliminary results, comparing:
1. The runtime of the workflow on a single Hadoop cluster operated by a trusted third party.
2. The runtime of the same workflow implemented entirely in Python and VIFF.
3. The end-to-end runtime for our integrated, mixed-mode MPC Musketeer workflow.

Using a trusted third party is impractical and contentious, but it serves as a performance baseline. Our results show that the integrated Musketeer workflow only takes 8.3% longer than this baseline (1,051s vs. 970s), as the data-intensive parts of the computation run in companies' private Hadoop clusters and parallelize well. In contrast, executing the entire computation in Python and VIFF would not have finished within two hours and required substantial MPC expertise.

### Demo

In our demo, we showcase a Musketeer-based implementation and live execution of the market concentration use case. First, we illustrate how an analyst or regulator specifies the joint computation in a SQL-like Musketeer front-end language. Second, we visualize the decomposition into a Musketeer IR DAG, highlighting input ownership, boundaries between local computations, and joint MPC. Third, we demonstrate the generated code executing on real Hadoop and VIFF clusters, reproducing our evaluation results from §5.

### Future Directions

We are extending Musketeer to support other MPC frameworks such as Sharemind. Musketeer’s scheduler can automatically choose the system for executing a particular operator based on a simple performance model. We plan to leverage static analysis and optimization techniques to help Musketeer select the most performant MPC implementation for a given workflow. These techniques can also assist in partitioning and selecting appropriate MPC protocols.

We will also explore how end-users specify their security and privacy requirements. In real-world scenarios, the authors of an analytics algorithm may not know the privacy requirements of input data contributors. Analysts might require a framework that supports policy-agnostic programming, where security and privacy properties are abstracted away from the programmer and specified independently. We are currently working on initial support for this approach by extending Musketeer to automatically detect operations for which data must cross trust domain boundaries and automatically use MPC for these operations.

### Acknowledgements

This research was supported by NSF awards #1414119 and #1430145.

### References

1. VIFF, the Virtual Ideal Functionality Framework. [http://viff.dk/](http://viff.dk/). Accessed 01/08/2016.
2. E. A. Abbe, A. E. Khandani, and A. W. Lo. Privacy-preserving methods for sharing financial risk exposures. American Economic Review, 102(3):65–70, May 2012.
3. D. Bogdanov, S. Laur, and J. Willemson. Sharemind: A Framework for Fast Privacy-Preserving Computations. In ESORICS, volume 5283 of LNCS, pages 192–206. Springer, 2008.
4. I. Gog, M. Schwarzkopf, N. Crooks, M. P. Grosvenor, A. Clement, and S. Hand. Musketeer: all for one, one for all in data processing systems. In EuroSys, Apr. 2015.
5. A. O. Hirschman. The paternity of an index. The American Economic Review, 54(5):761–762, 1964.
6. F. Kerschbaum. Automatically optimizing secure computation. In CCS, pages 703–714. ACM, 2011.
7. F. Kerschbaum, T. Schneider, and A. Schröpfer. Automatic protocol selection in secure two-party computations. In ACNS, pages 566–584. 2014.
8. E. Meijer, B. Beckman, and G. Bierman. LINQ: Reconciling Object, Relations and XML in the .NET Framework. In SIGMOD, pages 706–706, 2006.
9. A. Narayan, A. Papadimitriou, and A. Haeberlen. Compute globally, act locally: Protecting federated systems from systemic threats. In HotDep, Oct. 2014.
10. A. Rastogi, M. A. Hammer, and M. Hicks. Wysteria: A programming language for generic, mixed-mode multiparty computations. In IEEE S&P, pages 655–670, 2014.
11. T. W. Schneider. NYC taxi trip data. [https://github.com/toddwschneider/nyc-taxi-data](https://github.com/toddwschneider/nyc-taxi-data). Accessed 03/08/2016.
12. A. Shamir. How to share a secret. Communications of the ACM, 22(11):612–613, 1979.
13. N. Volgushev, A. Lapets, and A. Bestavros. Programming Support for an Integrated Multi-Party Computation and MapReduce Infrastructure. In HotWeb, Nov. 2015.
14. J. Yang, T. Hance, T. H. Austin, A. Solar-Lezama, C. Flanagan, and S. Chong. End-to-end policy-agnostic security for database-backed applications. CoRR, abs/1507.03513, 2015.
15. A. C. Yao. Protocols for secure computations. In FOCS, pages 160–164, 1982.