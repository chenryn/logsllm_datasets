## Bug Report
**Current Behavior**  
I upgraded to Babel 7.4.0 and core-js 3.  
I need to include some global Polyfills due to dependencies requiring them
(for example React requires `Symbol`).  
I am using `useBuiltIns: "usage"` in my `env` config.
Many polyfills end up being duplicated in my Webpack bundle because they get
imported once from `core-js@3` due to my globally-polluting imports, and once
again from `core-js-pure@3` from the `preset-env` imports.
![image](https://user-
images.githubusercontent.com/42070/54722378-b232d780-4b64-11e9-816b-28681d402c56.png)
**Expected behavior/code**  
I am not really sure what the expected behaviour would be here, but I expect
my bundle to now grow in size because I am using `core-js@3`.
**Babel Configuration (.babelrc, package.json, cli command)**
    presets = [
      "@babel/preset-typescript",
      "@babel/preset-react",
      [
        "@babel/preset-env",
        {
          useBuiltIns: "usage",
          corejs: 3,
        },
      ],
    ]
    plugins = [
      "@babel/plugin-syntax-dynamic-import",
      "@babel/plugin-proposal-object-rest-spread",
      "@babel/plugin-proposal-class-properties",
      ["@babel/plugin-transform-runtime", { regenerator: false, corejs: 3 }],
    ]
    module.exports = { presets, plugins }
**Environment**
  * Babel version(s): 7.4.0
  * Node/npm version: 11.11.0 / 6.7.0
  * OS: OSX 10.14.2
  * Monorepo: no
  * How you are using Babel: `loader`