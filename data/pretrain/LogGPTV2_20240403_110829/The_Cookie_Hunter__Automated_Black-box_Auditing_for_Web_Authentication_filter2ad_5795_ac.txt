to them actually being designed as (or intended for) authentication.
Nonetheless, our goal is not to infer the developers’ intention but
to identify which cookies lead to (full or partial) authentication.
3.3 Privacy Leakage Auditor
Apart from automatically detecting flaws that expose authentica-
tion cookies, our goal is to also identify what personal or sensitive
user data attackers can obtain. We develop PrivacyAuditor for lo-
cating leaked user information following a differential analysis
methodology. Our framework first effectively replicates a session
hijacking attack; it creates a fresh browser instance and includes all
stolen cookies, i.e., the ones that are not protected with the corre-
sponding cookie attributes. If our system has labelled a specific web
app as susceptible to both eavesdropping and JS cookie stealing
attacks we only simulate the eavesdropping attack to demonstrate
the privacy threat posed by attackers that are less sophisticated due
to space constraints. Our system also deploys a logged-out browser
alongside the authenticated browser and then proceeds with col-
lecting links of interest. The module focuses on URLs that match
account related keywords (e.g. profile, settings) and also collects
the top 30 links that appear in the main browser but not in the
logged-out one (or less if not that many exist). Typically, we expect
those links to point to restricted areas of the website where user
information, possibly sensitive, will be stored.
We check each page for user information that was supplied dur-
ing the signup process. If SSO was used, our system also checks
for information that the web app might have pulled from the IdP
(we have populated our Facebook and Google profiles with ad-
ditional information). We inspect the rendered page source once
JavaScript-generated content has finished loading. Since user data
can be leaked in ways that are not directly visible to the attacker,
our system also inspects other potential leakage points, including
cookies, local and session storage, and the page’s URL (we do not
look at outgoing connections since we are not interested in what
information is shared with third parties, and leaked identifiers will
already be present in one of the locations we search). To account for
Session 6D: Web Security CCS '20, November 9–13, 2020, Virtual Event, USA1958cases where user information may be “obfuscated”, we also check
for encoded values of all the identifiers using common encoding
(base64, base32, hex, URL encodings) and hashing techniques (MD5,
SHA1, SHA256, SHA512). While we are able to capture obfuscated
values of all user-specific information, in our experimental evalua-
tion we only discuss obfuscated passwords and emails; this is due
to their sensitive nature and because hashed emails can constitute
PII and in certain cases are easily reversible [3, 37, 61].
3.4 Browser Automation
At the heart of any web app auditing framework lies the browser
and, thus, it is imperative that our framework is orchestrated by a
robust browser automation component. In practice, while Selenium
is a powerful tool, it is better suited for testing scenarios when the
web app’s structure and behavior are known in advance. However,
when conducting a complex, large-scale analysis there is no a priori
knowledge of either. There are also numerous scenarios where un-
expected behavior, structure changes, or software crashes impact
browser automation functionality. For instance, at any moment
during the execution of a module there might be an unexpected
popup (e.g., an alert). This can block all other functionality, such
as fetching and interacting with elements in the page. Moreover,
current error raising and handling support can lead to ambiguous
states; e.g., when Selenium’s Chromedriver crashes (which is a
common issue) a TimeoutException might be raised, which is also
what happens when a website actually times out. Thus, we need a
way to handle such obstacles efficiently whenever they occur with-
out aborting and restarting the whole process. Finally, while other
well-designed options exist, e.g., Selenium-based OpenWPM [40],
we find that they focus on the browser setup, management and
synchronization parts of automation, with little focus on dynamic
interaction (e.g., element clicking, form submission) which is a
critical aspect of our study. In addition, while Puppeteer [16] does
offer interaction functionality, it suffers from the same robustness
issues as Selenium, which our system tackles (e.g., element stale-
ness, crash recovery, robust error handling). Moreover, Puppeteer is
specifically designed for Chrome/Chromium, while we aim to make
our automation component compatible with different browsers.
To address these limitations we develop XDriver, a custom browser
automation tool designed for security-oriented tasks that offers im-
proved fault-tolerance during prolonged black-box interactions
with web apps. XDriver is built on top of Selenium and the official
Chrome and Firefox WebDrivers [11, 13], and will be made open
source. We extend Selenium’s high level WebDriver class to en-
hance our system’s robustness by addressing the aforementioned
challenges in a way that is transparent to the caller scripts. Due to
space limitations here we present the most prominent exceptions
and how our system handles them, as well as a number of useful
auxiliary mechanisms we implement. Our extensions amount to
approximately 1,500 lines of code.
Invocation. XDriver extends Selenium’s WebDriver class and
declares a custom invoke method which accepts a parent class
method as an argument (e.g., WebDriver.find_element) and an
arbitrary number of named and unnamed arguments. Invoke then
calls the passed method in a try-except block, catches any raised
exception and either calls the appropriate exception handler or
returns a default value. XDriver then overrides all of WebDriver’s
methods to call their parent class counterparts via invoke.
Element staleness. As our auditing requires prolonged, multi-
phase interaction with web apps, page elements frequently become
“stale”, which creates complications and can lead to crashes. XDriver
is designed to handle such cases transparently and robustly. All
interactions start by fetching a page element, e.g., based on the
id attribute, and proceed with processing that element. If in the
meantime this element is deleted or, more commonly, an asynchro-
nous page load or redirection occurs, a StaleElementReference-
Exception is raised when interacting with the element, indicating
that it is no longer attached to the DOM. However, while from a
user’s perspective the element might still be present in the page,
from Selenium’s point of view it is a new element under a new ob-
ject reference, with no relation to the previously returned element.
To handle this, when a find_element_by method is invoked, the
returned element’s object reference is stored as the key in a hash ta-
ble, with a tuple containing the invoked method and its arguments
as the value. Then, whenever such an exception occurs, the given
element’s reference is retrieved from that hash table and XDriver
attempts to re-fetch it by invoking the stored method. If the element
is found, the old element’s object is updated transparently with the
newly returned element, and the initial requested operation that
raised the exception is retried. Otherwise, the exception is raised
since the element truly does not appear in the page.
Handling crashes and timeouts. When Chromedriver or some
other component (e.g., intermediate proxy) crashes and a Timeout-
Exception is raised, our XDriver module detects the crash, trans-
parently restores the browser instance and state and eventually
fulfills any module’s request that was interrupted by the crash.
Specifically, it launches a new browser instance, reloads the cur-
rent browser profile to maintain state and updates its own object
reference with that of the new one, so as to transparently update
all references of the driver held by the framework modules. It also
obtains the last known URL and retries the interrupted operation.
The StaleElementReferenceException handler is extremely use-
ful in this case, since all retrieved web element objects will have
become stale due to the browser reboot.
Auxiliary mechanisms. Several other mechanisms have been
implemented in XDriver, which further aid our main framework’s
functionality, such as a retry mode, a configurable built-in crawler
and our form-filling functionality described previously. Due to
space constraints we provide more details in the Appendix. Overall,
all of the above enhancements allow for more fault-tolerant inter-
action with web apps, reduce code complexity, and allow our main
framework modules to focus on their specific tasks.
Security mechanisms. Another important feature is the de-
tection and evaluation of security mechanisms pertinent to our
study. HTTP Strict Transport Security (HSTS) instructs a user’s
browser to connect to the HSTS-enabled domain only over HTTPS
for a specified amount of time, even if an explicit HTTP URL is
followed or typed in the address bar by the user. While this seems
fairly straightforward to deploy, domains often do so incorrectly or
partially [52, 76, 77]). To evaluate deployment and detect miscon-
figurations, our module first checks whether the domain is in the
Chromium preload list [12] and, if not, uses a passive proxy to cap-
ture the target website’s redirection flow from its HTTP endpoint
Session 6D: Web Security CCS '20, November 9–13, 2020, Virtual Event, USA1959to HTTPS. For each redirection, it stores the HSTS policy (if one
is sent) and assesses whether the (sub)domain is indeed protected.
Our module detects all the misconfigurations and errors presented
in [52]. We note that while we implement mechanisms that are
relevant to this work, XDriver’s modular design streamlines the
addition of other security mechanisms.
4 EXPERIMENTAL EVALUATION
We experimentally evaluate our black-box auditing framework
and present our findings from the largest study on cookie-based
authentication and authorization flaws in the wild.
Datasets. We use two different versions of the Alexa Top 1 mil-
lion list. The first dataset was fetched on 09/14/2017; this dataset was
useful for guiding the design and implementation of our framework.
However, since recent work has revealed that domain ranking lists
exhibit significant fluctuation even within short periods of time [74],
we also obtained a second up-to-date version on 05/07/2019, when
it was time to conduct the final evaluation. All the experiments
presented here were conducted between May-October 2019 on a
combined dataset that included a total of 1,585,964 unique domains.
Workflow statistics. One of our main goals is the ability to
conduct automated black-box auditing of modern web apps with-
out knowledge of their structure, access to the source code, or input
from developers. The complexity and often ad-hoc nature of web
development render this a challenging task, and various obstacles
can prevent the successful completion of a given module. Figure 4
in the Appendix provides statistics on the number of domains for
which each phase of our workflow was successful. In general, our
auditing modules are highly effective, successfully completing their
analysis for 93-98% of the domains they handle. Automated account
creation presents the most considerable obstacle; namely, out of
the 168,594 domains for which we identified a signup option, we
successfully registered and logged into 13.7% of them, while in 2,066
cases our system managed to login via SSO, out of which 346 were
a fallback after a failed signup attempt. It is worth noting that for
domains where we detected a signup option but were not able to
create an account, 19,491 (∼13.8%) embedded Google’s reCaptcha.
Yet our framework is still able to create accounts on 25,242 domains,
accounting for almost 12% of the domains for which we have identi-
fied a signup option – for comparison, prior related studies analyzed
25 [77] and 149 [64] domains. In studies with a different focus, Zhou
and Evans used SSO to audit 1,621 domains for SSO implementation
flaws, while DeBlasio et al. [36] explored the risk of password reuse
by creating accounts in over 2,300 domains. In other words, our
study is several orders of magnitude larger than prior studies with
a similar focus, and at least one order of magnitude larger than
studies that employed some form of automated account creation.
We provide more details on our system’s effectiveness and false
negative rates in the Appendix.
Cookies. Audited domains set an average of 14.02 cookies, while
susceptible domains set 1.21 authentication cookies and have 1.1
authentication combinations on average. In Table 1, we show the
number of domains that expose their authentication cookies, i.e.,
do not protect them with the corresponding cookie attributes.
Eavesdropping. We find that 12,014 unique domains do not pro-
tect their authentication cookies with the secure flag, even though
Table 1: Number of unique domains that do not adequately
protect their cookies from specific attacks.
Attack
Eavesdropping
No HSTS
HSTS Preloaded
Full HSTS
Faulty HSTS
- Protected
- Vulnerable
Final Vulnerable
JS cookie stealing
Total
# of Domains (%)
12,014 (48.43%)
10,495 (87.36%)
64 (0.53%)
188 (1.56%)
736 (6.13%)
426 (3.55%)
10,921 (90.9%)
5,680 (22.9%)
12,484 (50.33%)
1,815 of those set the flag for at least one of their cookies. How-
ever, web apps might make use of HTTP-Strict-Transport-Security
(HSTS), which can prevent the leakage of those, otherwise exposed
cookies. Merely checking for the presence of HSTS headers in the
web app’s responses is not sufficient, since prior studies have found
that developers often deploy HSTS incorrectly [52, 76] or do not ad-
equately protect their entire domain [77]. As such, our framework
includes a module for evaluating the correctness and coverage of
HSTS deployment for domains that are vulnerable to eavesdropping
(the other attacks are not affected by HSTS).
We find that the situation has not improved much compared to
prior studies, as the vast majority of domains do not deploy HSTS.
While flawed HSTS deployment remains common, we find that
63.3% of the domains that have a faulty deployment do manage
to prevent our cookie hijacking attacks. This is because the set of
(sub)domains the auth cookies are sent to are protected by HSTS.
For instance, if example.com deploys HSTS properly on the www
subdomain, but leaves the base domain unprotected, and at least
one auth cookie has its domain attribute set to www.example.com,
then there is no way for an eavesdropper to retrieve this cookie.
The most common misconfiguration is not enabling HSTS on the
base domain (696 domains), out of which 143 attempted to set
HSTS over HTTP. The remaining domains, while properly setting
HSTS on their main domain, did not use the includeSubdomains
directive, thus potentially leaving certain subdomains exposed. We
also find that out of the remaining domains only 99 employ CSP’s
upgrade-insecure-requests directive. While this reduces the at-
tack surface, these domains remain vulnerable since this mechanism
does not upgrade top-level navigational requests from third-party
sites or the initial request (e.g., when a user opens a new tab and
visits a site). Overall, 10,921 domains are vulnerable and expose
cookies to eavesdroppers even when accounting for the presence of
relevant security mechanisms. We further correlate these domains
with the Single Sign On data released by [44] and found that four
of these domains are also SSO identity providers (Amazon, Bitly,
DeviantArt, GoodReads) and have at least 1,346 unique relying
parties, out of which 138 have been audited by our system; 87 were
found secure and 51 vulnerable to at least one of our attacks.
JS cookie stealing. We find that users face a considerable threat
due to their authentication cookies being accessible via (malicious)
JavaScript, as a total of 5,680 domains do not protect them with
Session 6D: Web Security CCS '20, November 9–13, 2020, Virtual Event, USA1960Table 2: Number of domains for different values of authenti-
cation cookies and combinations of authentication cookies.
Table 3: Personal user data that can be obtained by attackers.
Auth combos
Auth cookies
1
10,878
9,912
2
1,110
1,700
3
39
364
4
10
54
5
3
7
6
-
2
7
-
1
Data
Email
Email hash
Fullname
Firstname
Lastname
Username
Password
Pswd hash
Phone
Address
VAT
Workplace
Total (%)
urce
o