当于原始投资的10%）。Deirdre以 5%的复合利息投资了 100 美元（也就是
说，利息是当前余额的 5%，包含之前的利息）。编写一个程序，计算需要
405
多少年Deirdre的投资额才会超过Daphne，并显示那时两人的投资额。
17.Chuckie Lucky赢得了100万美元（税后），他把奖金存入年利率8%的
账户。在每年的最后一天， Chuckie取出10万美元。编写一个程序，计算多
少年后Chuckie会取完账户的钱？
18.Rabnud博士加入了一个社交圈。起初他有5个朋友。他注意到他的朋
友数量以下面的方式增长。第1周少了1个朋友，剩下的朋友数量翻倍；第2
周少了2个朋友，剩下的朋友数量翻倍。一般而言，第N周少了N个朋友，剩
下的朋友数量翻倍。编写一个程序，计算并显示Rabnud博士每周的朋友数
量。该程序一直运行，直到超过邓巴数（Dunbar’s number）。邓巴数是粗略
估算一个人在社交圈中有稳定关系的成员的最大值，该值大约是150。
[1].其实num的最终值不是6，而是7。虽然最后一次循环打印的num值是6，
但随后num++使num的值为7，然后num
int main(void)
{
const int FREEZING = 0;
float temperature;
int cold_days = 0;
int all_days = 0;
printf("Enter the list of daily low temperatures.\n");
printf("Use Celsius, and enter q to quit.\n");
while (scanf("%f", &temperature) == 1)
{
all_days++;
408
if (temperature 
y 或 c == 6）。如果expression为真（即x大于y，或c == 6），则执行
statement。否则，忽略statement。概括地说，可以使用任意表达式，表达式
的值为0则为假。
410
statement部分可以是一条简单语句，如本例所示，或者是一条用花括号
括起来的复合语句（或块）：
if (score > big)
printf("Jackpot!\n"); // 简单语句
if (joe > ron)
{              // 复合语句
joecash++;
printf("You lose, Ron.\n");
}
注意，即使if语句由复合语句构成，整个if语句仍被视为一条语句。
411
7.2 if else语句
简单形式的if语句可以让程序选择执行一条语句，或者跳过这条语句。
C还提供了if else形式，可以在两条语句之间作选择。我们用if else形式修正
程序清单7.1中的程序段。
if (all_days != 0)
printf("%d days total: %.1f%% were below freezing.\n",
all_days, 100.0 * (float) cold_days / all_days);
if (all_days == 0)
printf("No data entered!\n");
如果程序发现all_days不等于0，那么它应该知道另一种情况一定是
all_days等于0。用if else形式只需测试一次。重写上面的程序段如下：
if (all_days!= 0)
printf("%d days total: %.1f%% were below freezing.\n",
all_days, 100.0 * (float) cold_days / all_days);
else
printf("No data entered!\n");
如果if语句的测试表达式为真，就打印温度数据；如果为假，就打印警
告消息。
注意，if else语句的通用形式是：
if ( expression )
412
statement1
else
statement2
如果expression为真（非0），则执行statement1；如果expression为假或
0，则执行else后面的statement2。statement1和statement2可以是一条简单语句
或复合语句。C并不要求一定要缩进，但这是标准风格。缩进让根据测试条
件的求值结果来判断执行哪部分语句一目了然。
如果要在if和else之间执行多条语句，必须用花括号把这些语句括起来
成为一个块。下面的代码结构违反了C语法，因为在if和else之间只允许有一
条语句（简单语句或复合语句）：
if (x > 0)
printf("Incrementing x:\n");
x++;
else   // 将产生一个错误
printf("x  0)
{
printf("Incrementing x:\n");
x++;
413
}
else
printf("x 
#define SPACE ' '        // SPACE表示单引号-空格-单引号
int main(void)
{
char ch;
ch = getchar();       // 读取一个字符
while (ch != '\n')     // 当一行未结束时
{
if (ch == SPACE)    // 留下空格
putchar(ch);    // 该字符不变
else
putchar(ch + 1);  // 改变其他字符
ch = getchar();    // 获取下一个字符
}
putchar(ch);        // 打印换行符
416
return 0;
}
（如果编译器警告因转换可能导致数据丢失，不用担心。第8章在讲到
EOF时再解释。）
下面是该程序的输入示例：
CALL ME HAL.
DBMM NF IBM/
把程序清单7.1中的循环和该例中的循环作比较。前者使用scanf()返回的
状态值判断是否结束循环，而后者使用输入项的值来判断是否结束循环。这
使得两程序所用的循环结构略有不同：程序清单7.1中在循环前面有一条“读
取语句”，程序清单7.2中在每次迭代的末尾有一条“读取语句”。不过，C的
语法比较灵活，读者也可以模仿程序清单7.1，把读取和测试合并成一个表
达式。也就是说，可以把这种形式的循环：
ch = getchar();    /* 读取一个字符 */
while (ch != '\n')  /* 当一行未结束时 */
{
...       /* 处理字符 */
ch = getchar();  /* 获取下一个字符 */
}
替换成下面形式的循环：
while ((ch = getchar()) != '\n')
417
{
...       /* 处理字符 */
}
关键的一行代码是：
while ((ch = getchar()) != '\n')
这体现了C特有的编程风格——把两个行为合并成一个表达式。C对代
码的格式要求宽松，这样写让其中的每个行为更加清晰：
while (
(ch = getchar())       // 给ch赋一个值
!= '\n')  // 把ch和\n作比较
以上执行的行为是赋值给ch和把ch的值与换行符作比较。表达式ch 
=
getchar()两侧的圆括号使之成为!=运算符的左侧运算对象。要对该表达式求
值，必须先调用getchar()函数，然后把该函数的返回值赋给 ch。因为赋值表
达式的值是赋值运算符左侧运算对象的值，所以 ch = getchar()的值就是 ch
的新值，因此，读取ch的值后，测试条件相当于是ch != '\n'（即，ch不是换
行符）。
这种独特的写法在C编程中很常见，应该多熟悉它。还要记住合理使用
圆括号组合子表达式。上面例子中的圆括号都必不可少。假设省略ch 