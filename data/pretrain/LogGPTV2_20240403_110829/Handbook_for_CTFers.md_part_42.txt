dp [get_pos (1, J)] = max (dp [get_pos (1-1, j11 , dp [get_pos (1-1,
m = 0 
idx = 0
for i in range [100) :
if dp [get_pos (99, 1)] >= m:
m = dp [get_pos (99, i)]
idx = 1
for 1 in range (99, 0, -1) :
flag = '
flag = chx (tb1 [get_pos (1, Ldx) 1 1 + flag
if dp [get_pos (1-1, idx-1)] > dp [get_pos (11, idx) ] :
flag = chz (tb1 [o] ) + flag
1dx -= 1
if_name__-- .__nain_':
print (flag)
solve ()
Run the solution script in Python, we can get the following output.
α1gna1_vm_2> python . \dp py
triangle~1a-a-polygon-de1ct:f {no~n33d~70~c41cu1473~3v3ry-p47h)
vith-three~edges-and-three-vertices-*
That's the solution to this VM reverse engineering problem. Note that not all VM
challenges in CTFs require this method. For those with a small number of virtual
bytecodes and simple VM executor logic, an extremely efficient method is to trace
-So, st umouq  (&CMFCApplication1D1g: :
OnBnClickedButton1);
SetTimer (1, 1oo, TimerProc) :
- . ·
This code will detect software breakpoints set within the first 200 bytes of the
OnBnClickedButton1 function and software breakpoints set at the beginning of the
(ndu sosn so) Axomopa pue (xoq essou e dn sdod) Axogaess
APIs and will call the TerminateProcess to exit the program upon detection. The 
---
## Page 386
372
5 Reverse Engineering
code uses the self-written MyGetProcAddress, which is actually a lower version of
the function. Because its implementation in higher versions has compatibility con-
cerms in mind, and the return address is no longer the real API entry point that we see
in the debugger.
To bypass this detection, we can reverse engineer the program to find the
appropriate detection logic and remove it. We can also try to use hardware
breakpoints for debugging when the need for breakpoints is low.
For x86 architectures, hardware breakpoints are implemented by setting the
Debug Registers (DR0 to DR7). When we need to use a hardware breakpoint, we
need to set the address of the breakpoint to DR0-DR3 (so only up to 4 hardware
‘XI ol sauadond qonuo suos 1as pue (pouoddns ane sjusodxeanq
#include 
#include 
boo1 CheckHNBP () (
CONrExT ctx = ():
If (GetThreadContext (GetCuzrentThread (1 , &ctx))(
ctx. ContextFlags = CONTEXT_D&BUG_REGISTERS ;
return ctx.Dr0 != 0 I| ctx.Dr1 != 0II ctx.Dr2 1= 0 |I ctx.Dr3 1= 0;
return false;
int main () {
/ *
Sone codes
if(CheckHWBP () (
printf ("HW breakpoint detected!\n*) :
exit (0);
/ *
Some other codes
return 0;
Compiling this code, debugging the main function with x64dbg, and set a
hardware breakpoint before the program begins its detection. We can see that the
program successfully detects the existence of this hardware breakpoint, see
Fig. 5.79.
Since this detecting mechanism also relies on a system API (GetThreadContext),
we can bypass it using Hook. Based on a similar principle, the tool ScyllaHide
mentioned earlier provides a DRx Protection option to counter hardware breakpoint
detection.
---
## Page 387
5.5 Binary Code Protection and Obfuscation
373
24 64 90
E24 70 09
C24 74 99
新
CHW breakpoint detected!
Fig, 5.79  HW breakpoint detected
3. Time Interval Detection
When we are debugging by single-stepping over instructions, the time taken for the
instructions to run differs greatly from what it would have taken if it had not been
single stepped. Based on this principle, it is easy to write anti-debugging code, but
this anti-debugging method is too obvious and is generally not very useful, and it is
easy to bypass. For example, there is a 64-bit register called TSC (Time Stamp
Counter) in the x86 CPU. The CPU counts each clock cycle and saves it to the TSC.
The RDTSC instruction is used to read the TSC value into the EDX:EAX register, so
the RDTSC instruction can be used for time interval detection. In general, to achieve
this kind of reverse debugging, we only need to detect the change of the low 32-bit of
TSC (i.e., the change of EAX). When the program is not detecting the lower bound
of the change, we can simply replace all relevant RDTSC (0F 31) instructions in the 
program with XOR EAX, EAX (33 CO) instructions to bypass this detection
mechanism.
4. Exception-based Anti-debugging
In Windows, if a process is being debugged by another process, exceptions are first
handled by its debugger, otherwise, they are handled directly by the SEH (Structured
Exception Handling) function registered in the process. SEH is a mechanism that
 jo as u uon oeo pup-asn e o o wss udo o ss
exception in a thread. Therefore, we can write code that deliberately throws an
---
## Page 388
374
5 Reverse Engineering
eso! jo aoad t sussae no uons eo ue unoo se qons) uogdaoxa
memory, etc.) and then ry to catch the exception in our registered SEH handling
function to handle the exception. The SEH handler (callback function) has the
following form.
typedef
_Function_class_(EXCErTION_ROUrINE)
_IRQL_requires_same_
EXCEPTION_DISPOSITION
NTAPI
EXCEPTION_ROVTINE (
_In_ PVOID EstablishexFrame,
_Inout_ struct _EXCEPTION_RECORD *ExceptionRecord,
_Inout_ struct _CoNrexT +ContextRecord,
_In_ PVOID Di spatcherContext
It contains a lot of useful information, including all the information in the thread
context state (such as general registers, segment selectors, IP registers, etc.) when an
exception is generated, which can be used to casily control the exception handling.
For example, if you need to increase the value of EIP by 1 to continue execution
when an exception occurs, you can use the following callback function.
EXCEPTION_DISPOSITION Handler (PEXCEPTION_RECORD ExceptionRecord,
PVOID EstablisherFrane,
PCONTEXT ContextRecord,
PVOID DispatcherContext) {
return ExceptionContinueExecut ion;
ContextRecord- >Eip += 1 ;
This function returns an ExceptionContinueExecution to tell the operating system
to resume execution of the thread that generated the exception. When the callback
function fails to handle the corresponding exception, it needs to returm an
ExceptionContinueSearch to tell the operating system to continue to look for the
next callback function. If there is no next callback function, the operating system will
decide whether to terminate the application or call a debugger to attach to the
Knsilau aq ui sas angea ureuao e uo Supuadap *ssaod
How do we register the SEH callback function? In principle, we can simply add
the function to be registered to the SEH chain, whose elements are of the following
structure.
typedef struct _EXCEPTION_REGISTRATION_RECORD {
struct _EXCEPTION_REGISTRATION_RECORD *Next ;
}EXCEFTION_REGISTRATION_R&CORD;
PEXCEPTION_ROUTINE Handler ;
---
## Page 389
5.5 Binary Code Protection and Obfuscation
375
Next is a pointer to the next item in the chain and Handler is a pointer to the
corresponding callback function. In 32-bit assembly codes, we often see the follow-
ing operation, which serves to construct an EXCEPTION_REGISTRATION_
RECORD structure on the stack.
PUSH handler
PUSH FS : [0]
After
these
IWO
instructions,
EXCEPTION_REGISTRATION_RECORD structure on the stack, often followed
an
8-byte
by an instruction like the following that links the constructed to the current SEH
chain.
MOV FS: [0] , ESP
This operation makes the ExceptionList entry in the thread information block
(i.e., TIB, at the start of the Thread Environment Block TEB) point to the new
EXCEPTION_REGISTRATION_RECORD structure (i.e., the head of the new
SEH chain). The TEB of the current thread is accessible via the FS register. Its
linear address is stored in FS:[ Ox18]. TEB and TIB’s partial definitions are as
follows.
1 e3L qomxas gapad
NT_TIB Tib;
PVOID EnvironmentPointer;
PVoID ActiveRpcHandle;
CLIENT_ID Cid;
/ / --
} TEB, *PTEB;
J I4Ln aoxas gopd
struct _EXCEPTION_REGISTRATION_RECORD +ExceptionLi st ;
PVOID StackBase;
PVOID StackLimit ;
PVOID SubSystemTib;
} NT_TIB;
/ / - - -
For anti-debugging techniques based on exceptions, we generally need to con-
e os uesond o q peu suodaxa syds aout o sssnqap au an
the exception will still be handled by the program itself. For x64dbg, you can ignore
 s n doo S q odxapsse 
Exceptions  Add Last". The same goes for other debuggers. In addition, in CTF or
in actual reverse analysis, we may encounter more complex exception-based anti-
debugging methods, such as in 0CTF/TCTF 2020 Quals where there is a reverse
challenge “J" where all conditional jump instructions inside the key routine are
---
## Page 390
376
5 Reverse Engineering
replaced with INT 3. A self-registered exception function simulates the execution of
these conditional jump instructions based on the RFLAGS state and the address of
the exception, thus achieving anti-debugging and obfuscation purposes. In fact, this
type of protection has been used in shellsoftware for a long time (e.g., Amadillo),
and is commonly known as *CC protection". Faced with such protection, we need to
be patient and carefully reverse engineer the logic of the exception handling function
to recover the original instructions.
5. TLS Anti-debugging
0] sse sos os o u e s! (  [p
 sap oe o po u ssod e  se u q s o
perform some additional initialization or destruction of data objects in TLS, Win-
dows provides a mechanism called TLS callback functions. Usually, these callback
functions will be called by the operating system before the EntryPoint of the
program. Due to this secrecy, many developers prefer to write debugger detection
code in the TLS callback function to achieve anti-debugging purposes. We can use
IDA to statically analyze the program. IDA is very good at identifying a program’s
TLS callback function and then reverse-engineering its anti-debugging logic. For
dynamic debugging, take x64dbg as an example, you can check the *TLS Callbacks"
 qap u pe sg  sd  sodo   do, u xoo
program. The debugger will pause before calling the TLS function, thus we can do
further analysis.
6. Specific Debugger Detection
One of the rudimentary ways of anti-debugging techniques is to detect a particular
debugger according to its characteristics. For example, we can detect whether there
ap on ,axafqpx, peu ssaood t no Sqp9x, Suuuoo mopm e s!
whether x64dbg is running. API calls such as EnumWindows are often used for this
kind of detection. They are easy to be seen by a reverser, and therefore they are easy
to bypass.
There also exists some other interesting detection methods, for example:
uns8nqandno q uas ssus pendruu Sqo jo suorsi soeg (1)
with a format string operation, introducing a vulnerability that could be
exploited to crash the debugger directly.
(2) Earlier versions of OllyDbg had problems with the logic of handling hardware
breakpoints, which caused the DRx actively set by the program to be reset in
some scenarios so that we could detect OllyDbg.
(3) WinDbg will set some unique environment variables of the debugging process
whenit startsthe
debugging.
such  as  WINDBG_DIR,
SRCSRV_SHOW_TF_PROMPT, etc. Detecting the existence of these environ-