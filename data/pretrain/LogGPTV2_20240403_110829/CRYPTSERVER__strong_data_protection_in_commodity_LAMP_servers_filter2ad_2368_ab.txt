### Information Leakage and Security Measures

The pre-encrypted values in our system minimize information leakage to attackers, as the number of such values is very small for each web application we study. While our solution effectively limits explicit information leakage, it does not address potential side-channel attacks, such as timing, length, and power monitoring attacks.

### Analysis Engine

To assist developers in migrating their existing web applications to the CryptServer architecture, we have developed a dynamic analysis engine that automatically identifies Potential Sensitive Locations (PSLs) in the PHP engine. The engine takes two inputs: developer annotations of sensitive data and a test harness for the web application. It then performs dynamic taint analysis to identify operations that require access to the plaintext of the sensitive data, marking these as PSLs. Not all operations that process sensitive data need decryption; for example, the ASSIGN operation copies encrypted data without requiring access to the plaintext, and thus is not marked as a PSL.

Before execution, PHP code is pre-compiled into PHP opcodes, with each opcode corresponding to a set of handling functions in the PHP engine. Variables in PHP scripts are compiled into an internal representation (the zval structure). Additionally, all constant and static variables mentioned in Section 2 can be automatically identified at compilation time as zvals. Our analysis engine currently identifies PSLs at the PHP opcode level, intercepting all operations on data in zvals and converting them into a standard "source->dest" propagation formula. This allows the engine to dynamically track the data flow of sensitive data and mark operations that require plaintext information. The engine outputs all marked operations as PSLs.

We implemented this engine as a PHP extension in 9,000 lines of C code. All identified PSLs are manually inspected and instrumented to request operations provided by the Secure Operating System (SOS).

### Evaluation

To evaluate the applicability, adoption effort, and Trusted Computing Base (TCB) reduction of our solution, we applied it to six open-source PHP applications. Our preliminary results show that our proposed solution is applicable to these popular applications with moderate adoption costs, and the TCB reduction is significant.

For each application, we manually annotated sensitive fields, as shown in the last column of Table 1. We filled in these fields in the web pages and submitted the sensitive data to the server. For each web application, it took one author approximately three hours to understand the application's functionality and annotate the sensitive fields. In real-world deployment, this identification effort can be reduced with developer assistance.

Table 1 shows the number of pages containing PSLs in each application. PSLs primarily consist of computation opcodes (e.g., arithmetic operation opcodes) and PHP functions (e.g., string, array, and regular expression operations). We calculated the number of opcodes executed during the execution compared to the number of identified PSLs. As shown in Column 3 of Table 1, the number of executed PSLs is much smaller than the total executed opcodes, especially for large PHP applications (less than 1%). This indicates that the CryptServer is applicable to existing PHP applications. After eliminating duplicate operations, the number of unique PSLs (Column 5) accounts for a very small portion (less than 18%).

In fact, the PSLs code isolated in the SOS is small, with 30,000 lines of PHP interpreter logic for the corresponding PHP applications. For instrumentation, we identified the unique opcodes from dynamic runs with the test harness, which need to be tunneled back to the trusted SOS VM. Given the identified unique opcodes for PSLs, it takes less than five minutes to instrument each of them to request the corresponding operation from the SOS. Once an opcode, such as ZEND CONCAT, is instrumented in one application, it can be directly applied to all other applications. Overall, our manually instrumented work requires only a one-time effort for developers to migrate the existing application to CryptServer.

### Acknowledgments

This research is partially supported by research grant R-252-000-495-133 from the Ministry of Education (MOE), Singapore. Any opinions, findings, and conclusions or recommendations expressed in this paper are those of the authors and do not necessarily reflect the views of MOE, Singapore.

### References

1. Portableapps.com launcher. <http://portableapps.com/apps/development/portableapps.com_launcher>
2. Paul Barham, Boris Dragovic, Keir Fraser, Steven Hand, Tim Harris, Alex Ho, Rolf Neugebauer, Ian Pratt, and Andrew Warfield. Xen and the art of virtualization. In Proceedings of the 9th ACM Symposium on Operating Systems Principles, SOSP '03, 2003.
3. Adrienne Porter Felt, Matthew Finifter, Joel Weinberger, and David Wagner. Diesel: Applying privilege separation to database access. In Proceedings of the 6th ACM Symposium on Information, Computer and Communications Security, ASIACCS '11, 2011.
4. Taesoo Kim and Nickolai Zeldovich. Making Linux protection mechanisms egalitarian with UserFS. In Proceedings of the 19th USENIX Security Symposium, 2010.
5. Bryan Parno, Jonathan M. McCune, Dan Wendlandt, David G. Andersen, and Adrian Perrig. Clamp: Practical prevention of large-scale data leaks. In Proceedings of the 2009 IEEE Symposium on Security and Privacy, 2009.
6. Raluca Ada Popa, Catherine M. S. Redfield, Nickolai Zeldovich, and Hari Balakrishnan. CryptDB: Protecting confidentiality with encrypted query processing. In Proceedings of the 23rd ACM Symposium on Operating Systems Principles, SOSP '11, 2011.
7. Krishna P. N. Puttaswamy, Christopher Kruegel, and Ben Y. Zhao. Silverline: Toward data confidentiality in storage-intensive cloud applications. In Proceedings of the 2nd ACM Symposium on Cloud Computing, SOCC '11, 2011.
8. Shruti Tople, Shweta Shinde, Prateek Saxena, and Zhaofeng Chen. AutoCrypt: Enabling homomorphic server computation to protect sensitive web content. In Proceedings of the 20th ACM Conference on Computer and Communications Security, CCS '13, 2013.
9. Amit Vasudevan, Sagar Chaki, Limin Jia, Jonathan M. McCune, James Newsome, and Anupam Datta. Design, implementation, and verification of an extensible and modular hypervisor framework. In Proceedings of the 2013 IEEE Symposium on Security and Privacy, 2013.
10. Verizon. 2013 Data Breach Investigation Report. <http://www.verizonenterprise.com/DBIR/2013/>
11. Wei Xu, Sandeep Bhatkar, and R. Sekar. Taint-enhanced policy enforcement: A practical approach to defeat a wide range of attacks. In Proceedings of the 15th USENIX Security Symposium, 2006.