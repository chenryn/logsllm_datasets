the pre-encrypted values allow little information leakage to
attackers, as their numbers are very small for each web ap-
plication we study. Although our solution tightly limits ex-
plicit information leakage, side channels are still possible,
such as timing, length, and power monitoring attacks, etc.
Our current solution does not address these issues.
3. ANALYSIS ENGINE
To aid developers to migrate their existing web applica-
tions to the CryptServer architecture, we build a dynam-
ical analysis engine to automatically identify PSLs in the
PHP engine. It takes developer annotations of sensitive data
and a test harness of the web application as input. It then
performs dynamic taint analysis to identify the operations
that require access to the plaintext of the sensitive data,
and ﬁnally marks them as PSLs as output. Note that not
all operations that process sensitive data require decryption
of the data. For example, the ASSIGN operation copies the
encrypted data, but it does not require access to the plain-
text of the data. Thus this kind of operation is not marked
as PSL.
Before execution, PHP code is pre-compiled into PHP op-
codes. Each opcode corresponds to a set of handling func-
tions the PHP engine. Variables in PHP scripts are compiled
into an internal presentation (the zval structure). Besides,
all the constant and static variables mentioned in Section 2
can be automatically identiﬁed at the compilation time as
zvals. Presently, we identify PSLs at the granularity of the
PHP opcode level. Our analysis engine intercepts all oper-
ations on data in zvals and converts them into a standard
“source->dest” propagation formula. It dynamically tracks
Authentication Access Control CRYPTSERVER Proxy Enc/Dec With Per-User key Untrusted  PHP Sever  VM Sensitive Operation  Service  (small TCB) Zend Engine Trusted VM Sensitive Logic Non-sensitive Logic Hypervisor Secret Key Management 1458Application
#Pages
w/ PSLs
#PSLs vs. Total
#OPs
342/131808 (0.26%)
46/59474 (0.08%)
#Constant/Static PSL
Arguments vs. Total
#PSL Arguments
20/635 (3.15%)
3/86 (3.49%)
phpBB3
OpenEMR
AjaxRPG
Roundcubemail
Wordpress
HotCRP
16
6
1
13
15
8
28/2044 (1.37%)
72/68541 (0.11%)
111/440504 (0.03%)
97/76980 (0.13%)
2/61 (3.28%)
0/161 (0.00%)
1/209 (0.48%)
4/131 (3.05%)
#Uniq PSLs
#Uniq Total OPs
vs.
Names of Sensitive Fields
41/234 (17.52%)
17/137 (12.41%)
9/86 (10.47%)
30/237 (12.66%)
38/236 (16.10%)
13/153 (8.50%)
subject, message, keywords
reason, form ss, form body, note,
issues
inputText
subject, message
post title, content
paperSummary, commentsToAu-
thor, commentsToPC
Table 1: Percentage of PSLs in PHP applications
the data ﬂow of sensitive data and marks operations in this
ﬂow that requires arguments’ plaintext information. Finally
the analysis engine outputs all marked operations as PSLs.
We implement this engine as a PHP extension in 9K lines
of C code. All these identiﬁed PSLs are inspected manu-
ally and instrumented to request operations provided by the
SOS.
4. EVALUATION
To evaluate the applicability, adoption eﬀort, and TCB
reduction of our solution, we apply our solution to 6 open-
source PHP applications. Our preliminary results demon-
strate that our proposed solution applies to these popular
applications with moderate adoption cost. The experiments
also show that the reduction in TCB that has access to sen-
sitive data is also signiﬁcant.
For each application, we manually annotate sensitive ﬁelds,
shown in the last column in Table 1. For analysis we ﬁll in
these ﬁelds in the web pages, and submit the sensitive data
to the server. For each web application we study, it takes
one author about 3 hours to understand the functionality
of the application, and further annotate the sensitive ﬁeld.
In real-world deployment, this identiﬁcation eﬀort can be
reduced with developer assistance.
Column 2 in Table 1 shows the number of pages containing
PSLs in each application. The PSLs mainly consist of com-
putation opcodes (e.g. arithmetic operation opcode) and
PHP functions (e.g. operations for string, array and regular
expression). We calculate the number of opcodes executed
during the execution, compared with number of identiﬁed
PSLs. As shown in Column 3 of Table 1, the number of ex-
ecuted PSLs is much smaller than total executed opcodes,
especially for large PHP applications (less than 1%). This
indicates that the CryptServer is applicable to existing
PHP applications. After eliminating the duplicate opera-
tions, the number of unique PSLs (Column 5) accounts for
a very small portion (less than 18%).
In fact, the PSLs
code isolated in the SOS is small, with 30K lines of PHP
interpreter logic for corresponding PHP applications.
For instrumentation, we identify the unique opcodes from
dynamic runs with the test harness, which need to be tun-
neled back to the trusted SOS VM. Given the identiﬁed
unique opcodes for PSLs, it takes less than 5 minutes to
instrument each of them to request the corresponding op-
eration from the SOS. In addition, once an opcode, for ex-
ample ZEND CONCAT, is instrumented in one application,
it can be directly applied to all other applications. In all,
our manually instrumented work only requires one-time ef-
fort for developers to migrate the existing application to
CryptServer.
5. ACKNOWLEDGMENTS
This research is partially supported by research grant R-
252-000-495-133 from Ministry of Education (MOE), Singa-
pore. Any opinions, ﬁndings, and conclusions or recommen-
dations expressed in this paper are those of the authors and
do not necessarily reﬂect the views of MOE, Singapore.
6. REFERENCES
[1] Portableapps.com launcher. http://portableapps.com/
apps/development/portableapps.com_launcher.
[2] Paul Barham, Boris Dragovic, Keir Fraser, Steven Hand,
Tim Harris, Alex Ho, Rolf Neugebauer, Ian Pratt, and
Andrew Warﬁeld. Xen and the art of virtualization. In
Proceedings of the 9th ACM Symposium on Operating
Systems Principles, SOSP ’03, 2003.
[3] Adrienne Porter Felt, Matthew Finifter, Joel Weinberger,
and David Wagner. Diesel: applying privilege separation to
database access. In Proceedings of the 6th ACM
Symposium on Information, Computer and
Communications Security, ASIACCS ’11, 2011.
[4] Taesoo Kim and Nickolai Zeldovich. Making linux
protection mechanisms egalitarian with userfs. In
Proceedings of the 19th USENIX Security Symposium,
2010.
[5] Bryan Parno, Jonathan M. McCune, Dan Wendlandt,
David G. Andersen, and Adrian Perrig. Clamp: Practical
prevention of large-scale data leaks. In Proceedings of the
2009 IEEE Symposium on Security and Privacy, 2009.
[6] Raluca Ada Popa, Catherine M. S. Redﬁeld, Nickolai
Zeldovich, and Hari Balakrishnan. Cryptdb: Protecting
conﬁdentiality with encrypted query processing. In
Proceedings of the 23rd ACM Symposium on Operating
Systems Principles, SOSP ’11, 2011.
[7] Krishna P. N. Puttaswamy, Christopher Kruegel, and
Ben Y. Zhao. Silverline: toward data conﬁdentiality in
storage-intensive cloud applications. In Proceedings of the
2nd ACM Symposium on Cloud Computing, SOCC ’11,
2011.
[8] Shruti Tople, Shweta Shinde, Prateek Saxena, and
Zhaofeng Chen. Autocrypt: Enabling homomorphic server
computation to protect sensitive web content. In
Proceedings of the 20th ACM Conference on Computer and
Communications Security, CCS ’13, 2013.
[9] Amit Vasudevan, Sagar Chaki, Limin Jia, Jonathan M.
McCune, James Newsome, and Anupam Datta. Design,
implementation and veriﬁcation of an extensible and
modular hypervisor framework. In Proceedings of the 2013
IEEE Symposium on Security and Privacy, 2013.
[10] Verizon. 2013 data breach investigation report.
http://www.verizonenterprise.com/DBIR/2013/.
[11] Wei Xu, Sandeep Bhatkar, and R. Sekar. Taint-enhanced
policy enforcement: a practical approach to defeat a wide
range of attacks. In Proceedings of the 15th USENIX
Security Symposium, 2006.
1459