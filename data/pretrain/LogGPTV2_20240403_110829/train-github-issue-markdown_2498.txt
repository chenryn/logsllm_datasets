 **Is your feature request related to a problem? Please describe.**
My company is currently happily using SQLAlchemy (thank you!), and mostly
happily using https://github.com/dropbox/sqlalchemy-stubs. However, the latter
is unmaintained and thus we're regularly hitting issues (and submitting fixes)
that don't get fixed or land. Thus, I'd love to switch to the first-party mypy
support.
I've tried doing the switch, but found, among other issues, that annotating
every foreign key column and relationship property was frustrating.
For instance, previously:
    from sqlalchemy import Column, Integer, ForeignKey
    from sqlalchemy.orm import relationship
    from sqlalchemy.ext.declarative import as_declarative
    @as_declarative()
    class Base:
        pass
    class Foo(Base):
        id = Column(Integer(), primary_key=True)
        bars = relationship("Bar", uselist=True)
    class Bar(base):
        id = Column(Integer(), primary_key=True)
        foo_id = Column(ForeignKey(Foo.id))
        foo = relationship("Foo")
With sqlalchemy2-stubs:
    from sqlalchemy import Column, Integer, ForeignKey
    from sqlalchemy.orm import relationship
    from sqlalchemy.ext.declarative import as_declarative
    from typing import List, Optional
    @as_declarative()
    class Base:
        pass
    class Foo(Base):
        id = Column(Integer(), primary_key=True)
        bars: "Bar" = relationship("Bar", back_populates="foo", uselist=True)
    class Bar(base):
        id = Column(Integer(), primary_key=True)
        foo_id: Optional[int] = Column(ForeignKey(Foo.id))
        foo: Optional[Foo] = relationship("Foo", back_populates="bars")
I find this problematic for a few reasons:
  * it's error-prone: a mistake in the annotation (like `bars: "Bar"` above: it should be `bars: List["Bar"]`), despite the information presumably being known (e.g. the sqlalchemy-mypy plugin can infer the types correctly)
  * it's redundant
  * it's more verbose
**Describe the solution you'd like**  
It would be great if the mypy plugin could infer more types for these foreign
key and relationship properties.
**Describe alternatives you've considered**
Another option would be to require the annotations, but validate that they
match the relationship/foreign key targets. This resolves our main concern
that the annotations are error prone, but I'm not sure this redundancy is
useful (unlike some cases with type annotations).
**Additional context**
I tested the code above using the following versions:
    greenlet==1.0.0
    mypy==0.812
    mypy-extensions==0.4.3
    SQLAlchemy==1.4.11
    sqlalchemy2-stubs==0.0.1a4
    typed-ast==1.4.3
    typing-extensions==3.7.4.3