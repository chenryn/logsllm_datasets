title:HyperDex: a distributed, searchable key-value store
author:Robert Escriva and
Bernard Wong and
Emin G&quot;un Sirer
HyperDex: A Distributed, Searchable Key-Value Store
Robert Escriva
Computer Science
Department
Cornell University
PI:EMAIL
Bernard Wong
Cheriton School of Computer
Science
University of Waterloo
PI:EMAIL
Emin Gün Sirer
Computer Science
Department
Cornell University
PI:EMAIL
ABSTRACT
Distributed key-value stores are now a standard component
of high-performance web services and cloud computing ap-
plications. While key-value stores oﬀer signiﬁcant perfor-
mance and scalability advantages compared to traditional
databases, they achieve these properties through a restricted
API that limits object retrieval—an object can only be re-
trieved by the (primary and only) key under which it was
inserted. This paper presents HyperDex, a novel distributed
key-value store that provides a unique search primitive that
enables queries on secondary attributes. The key insight
behind HyperDex is the concept of hyperspace hashing in
which objects with multiple attributes are mapped into a
multidimensional hyperspace. This mapping leads to eﬃ-
cient implementations not only for retrieval by primary key,
but also for partially-speciﬁed secondary attribute searches
and range queries. A novel chaining protocol enables the
system to achieve strong consistency, maintain availability
and guarantee fault tolerance. An evaluation of the full sys-
tem shows that HyperDex is 12-13× faster than Cassandra
and MongoDB for ﬁnding partially speciﬁed objects. Ad-
ditionally, HyperDex achieves 2-4× higher throughput for
get/put operations.
Categories and Subject Descriptors
D.4.7 [Operating Systems]: Organization and Design
Keywords
Key-Value Store, NoSQL, Fault-Tolerance, Strong Consis-
tency, Performance
1.
INTRODUCTION
Modern distributed applications are reshaping the land-
scape of storage systems. Recently emerging distributed
key-value stores such as BigTable [11], Cassandra [32] and
Dynamo [19] form the backbone of large commercial appli-
cations because they oﬀer scalability and availability prop-
erties that traditional database systems simply cannot pro-
vide. Yet these properties come at a substantial cost: the
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
SIGCOMM’12, August 13–17, 2012, Helsinki, Finland.
Copyright 2012 ACM 978-1-4503-1419-0/12/08 ...$15.00.
data retrieval API is narrow and restrictive, permitting an
object to be retrieved using only the key under which it
was stored, and the consistency guarantees are often quite
weak. Queries based on secondary attributes are either not
supported, utilize costly secondary indexing schemes or enu-
merate all objects of a given type.
This paper introduces HyperDex, a high-performance, scal-
able, consistent and distributed key-value store that provides
a new search primitive for retrieving objects by secondary
attributes. HyperDex achieves this extended functionality
by organizing its data using a novel technique called hyper-
space hashing. Similar to other hashing techniques [23, 29,
36,47], hyperspace hashing deterministically maps objects to
servers to enable eﬃcient object insertion and retrieval. But
it diﬀers from these techniques because it takes into account
the secondary attributes of an object when determining the
mapping for an object. Speciﬁcally, it maps objects to co-
ordinates in a multi-dimensional Euclidean space – a hyper-
space – which has axes deﬁned by the objects’ attributes.
Each server in the system is mapped onto a region of the
same hyperspace, and owns the objects that fall within its
region. Clients use this mapping to deterministically insert,
remove, and search for objects.
Hyperspace hashing facilitates eﬃcient search by signiﬁ-
cantly reducing the number of servers to contact for each
partially-speciﬁed search. The construction of the hyper-
space mapping guarantees that objects with matching at-
tribute values will reside on the same server. Through geo-
metric reasoning, clients can restrict the search space for a
partially-speciﬁed query to a subset of servers in the system,
thereby improving search eﬃciency. Speciﬁcity in searches
works to the clients’ advantage: a fully-speciﬁed search con-
tacts exactly one server.
A naive hyperspace construction, however, may suﬀer from
a well-known problem with multi-attribute data known as
“curse of dimensionality [6].” With each additional secondary
attribute, the hyperspace increases in volume exponentially.
If constructed in this fashion, each server would be respon-
sible for a large volume of the resulting hyperspace, which
would in turn force search operations to contact a large num-
ber of servers, counteracting the beneﬁts of hyperspace hash-
ing. HyperDex addresses this problem by partitioning the
data into smaller, limited size subspaces of fewer dimensions.
Failures are inevitable in all large-scale deployments. The
standard approaches for providing fault tolerance store ob-
jects on a ﬁxed set of replicas determined by a primary
key. These techniques, whether they employ a consensus
algorithm among the replicas and provide strong consis-
tency [18, 46], or spray the updates to the replicas and only
achieve eventual consistency [19, 32, 45, 49], assume that the
replica sets remain ﬁxed even as the objects are updated.
Such techniques are not immediately suitable in our setting
because, in hyperspace hashing, object attributes determine
the set of servers on which an object resides, and conse-
quently, each update may implicitly alter the replica set.
Providing strong consistency guarantees with low overhead
is diﬃcult, and more so when replica sets change dynami-
cally and frequently. HyperDex utilizes a novel replication
protocol called value-dependent chaining to simultaneously
achieve fault tolerance, high performance and strong con-
sistency. Value-dependent chaining replicates an object to
withstand f faults (which may span server crashes and net-
work partitions) and ensures linearizability, even as replica
sets are updated. Thus, HyperDex’s replication protocol
guarantees that all get operations will immediately see the
result of the last completed put operation – a stronger con-
sistency guarantee than those oﬀered by the current gener-
ation of NoSQL data stores.
Overall, this paper describes the architecture of a new key-
value store whose API is one step closer to that of traditional
RDBMSs while oﬀering strong consistency guarantees, fault-
tolerance for failures aﬀecting a threshold of servers and
high performance, and makes three contributions. First,
it describes a new hashing technique for mapping struc-
tured data to servers. This hashing technique enables ef-
ﬁcient retrieval of multiple objects even when the search
query speciﬁes both equality and range predicates. Second,
it describes a fault-tolerant, strongly-consistent replication
scheme that accommodates object relocation. Finally, it re-
ports from a full implementation of the system and deploy-
ment in a data center setting consisting of 64 servers, and
demonstrates that HyperDex provides performance that is
comparable to or better than Cassandra and MongoDB, two
current state-of-the-art cloud storage systems, as measured
using the industry-standard YCSB [15] benchmark. More
speciﬁcally, HyperDex achieves 12-13× higher throughput
for search workloads than the other systems, and consis-
tently achieves 2-4× higher throughput for traditional key-
value workloads.
The rest of this paper is structured as follows: Section
2 describes hyperspace hashing. Section 3 speciﬁes how to
deal with spaces of high dimensionality through data parti-
tioning. Section 4 speciﬁes the value-dependent replication
protocol used in HyperDex. Section 5 outlines our full im-
plementation of HyperDex. Section 6 evaluates HyperDex
under a variety of workloads. Section 7 discusses related
work for hyperspace hashing and HyperDex. We discuss
how our system relates to the CAP Theorem in Section 8
and conclude with a summary of our contributions.
2. APPROACH
In this section, we describe the data model used in Hyper-
Dex, outline hyperspace hashing, and sketch the high-level
organization and operation of the system.
2.1 Data Model and API
HyperDex stores objects that consist of a key and zero or
more secondary attributes. As in a relational database, Hy-
perDex objects match an application-provided schema that
deﬁnes the typed attributes of the object and are persisted in
tables. This organization permits straightforward migration
from existing key-value stores and database systems.
HyperDex provides a rich API that supports a variety of
datastructures and a wide range of operations. The system
natively supports primitive types, such as strings, integers
and floats, as well as composite types, such as lists, sets
or maps constructed from primitive types. The dozens of op-
erations that HyperDex provides on these datatypes fall into
three categories. First, basic operations, consisting of get,
put, and delete, enable a user to retrieve, update, and de-
stroy an object identiﬁed by its key. Second, the search op-
eration enables a user to specify zero or more ranges for sec-
ondary attributes and retrieve the objects whose attributes
fall within the speciﬁed, potentially singleton, ranges. Fi-
nally, a large set of atomic operations, such as cas and
atomic-inc, enable applications to safely perform concur-
rent updates on objects identiﬁed by their keys. Since com-
posite types and atomic operations are beyond the scope of
this paper, we focus our discussion on the get, put, delete,
and search operations that form the core of HyperDex.
2.2 Hyperspace Hashing
HyperDex represents each table as an independent multi-
dimensional space, where the dimensional axes correspond
directly to the attributes of the table. HyperDex assigns ev-
ery object a corresponding coordinate based on the object’s
attribute values. An object is mapped to a deterministic
coordinate in space by hashing each of its attribute values
to a location along the corresponding axis.
Consider, for the following discussion, a table containing
user information that has the attributes ﬁrst-name, last-
name, and telephone-number. For this schema, Hyper-
Dex would create a three dimensional space where the ﬁrst-
name attribute comprises the x-axis, the last-name attribute
comprises the y-axis, and the telephone-number attribute
comprises the z-axis. Figure 1 illustrates this mapping.
Hyperspace hashing determines the object to server map-
ping by tessellating the hyperspace into a grid of non-over-
lapping regions. Each server is assigned, and is responsible
for, a speciﬁc region. Objects whose coordinates fall within
a region are stored on the corresponding server. Thus, the
hyperspace tessalation serves like a multi-dimensional hash
bucket, mapping each object to a unique server.
The tessalation of the hyperspace into regions (called the
hyperspace mapping), as well as the assignment of the re-
gions to servers, is performed by a fault-tolerant coordinator.
The primary function of the coordinator is to maintain the
hyperspace mapping and to disseminate it to both servers
and clients. The hyperspace mapping is initially created by
dividing the hyperspace into hyperrectangular regions and
assigning each region to a virtual server. The coordinator
is then responsible for maintaining this mapping as servers
fail and new servers are introduced into the system.
The geometric properties of the hyperspace make object
insertion and deletion simple. To insert an object, a client
computes the coordinate for the object by hashing each of
the object’s attributes, uses the hyperspace mapping to de-
termine the region in which the object lies, and contacts
that server to store the object. The hyperspace mapping
obviates the need for server-to-server routing.
2.3 Search Queries
The hyperspace mapping described in the preceding sec-
tions facilitates a geometric approach to resolving search
Phone Number
John
Smith
hyperspace
k
v1 v2 v3 v4 v5
. . . vD-1 vD-1 vD
k
v1 v2 v3
v4 v5
. . . vD-1 vD-1 vD
subspace 0
subspace 1 subspace S
key subspace
First Name
Figure 2: HyperDex partitions a high-dimensional
hyperspace into multiple low-dimension subspaces.
Last Name
Figure 1: Simple hyperspace hashing in three di-
mensions. Each plane represents a query on a sin-
gle attribute. The plane orthogonal to the axis for
“Last Name” passes through all points for last_name
= ‘Smith’, while the other plane passes through all
points for first_name = ‘John’. Together they rep-
resent a line formed by the intersection of the two
search conditions; that is, all phone numbers for
people named “John Smith”. The two cubes show
regions of the space assigned to two diﬀerent servers.
The query for “John Smith” needs to contact only
these servers.
operations.
In HyperDex, a search speciﬁes a set of at-
tributes and the values that they must match (or, in the case
of numeric values, a range they must fall between). Hyper-
Dex returns objects which match the search. Each search
operation uniquely maps to a hyperplane in the hyperspace
mapping. A search with one attribute speciﬁed maps to
a hyperplane that intersects that attribute’s axis in exactly
one location and intersects all other axes at every point. Al-
ternatively, a search that speciﬁes all attributes maps to
exactly one point in hyperspace. The hyperspace mapping
ensures that each additional search term potentially reduces
the number of servers to contact and guarantees that addi-
tional search terms will not increase search complexity.
Clients maintain a copy of the hyperspace mapping, and
use it to deterministically execute search operations. A
client ﬁrst maps the search into the hyperspace using the
mapping. It then determines which servers’ regions intersect
the resulting hyperplane, and issues the search request to
only those servers. The client may then collect matching
results from the servers. Because the hyperspace mapping
maps objects and servers into the same hyperspace, it is
never necessary to contact any server whose region does not
intersect the search hyperplane.
Range queries correspond to extruded hyperplanes. When
an attribute of a search speciﬁes a range of values, the cor-
responding hyperplane will intersect the attribute’s axis at
every point that falls between the lower and upper bounds of
the range. Note that for such a scheme to work, objects’ rela-
tive orders for the attribute must be preserved when mapped
onto the hyperspace axis.
Figure 1 illustrates a query for first_name = ‘John’ and
last_name = ‘Smith’. The query for first_name = ‘John’
corresponds to a two-dimensional plane which intercepts the
first_name axis at the hash of ‘John’. Similarly, the query
for last_name = ‘Smith’ creates another plane which inter-
sects the last_name axis. The intersection of the two planes
is the line along which all phone numbers for John Smith re-
side. Since a search for John Smith in a particular area code
deﬁnes a line segment, a HyperDex search needs to contact
only those nodes whose regions intersect that segment.
3. DATA PARTITIONING
HyperDex’s Euclidean space construction signiﬁcantly re-
duces the set of servers that must be contacted to ﬁnd match-
ing objects.
However, the drawback of coupling the dimensionality of
hyperspace with the number of searchable attributes is that,
for tables with many searchable attributes, the hyperspace
can be very large since its volume grows exponentially with
the number of dimensions. Covering large spaces with a grid
of servers may not be feasible even for large data-center de-
ployments. For example, a table with 9 secondary attributes
may require 29 regions or more to support eﬃcient searches.
In general, a D dimensional hyperspace will need O(2D)