the tool is unable to run on current versions of Android,
and we therefore reimplemented the system to work on
current Android versions with the same heuristics as are
described in the AppsPlayground paper. Furthermore, instead
of using HiearchyViewer for getting the current UI hierarchy
of the application, we used UIAutomator, which is based on
the accessibility service of Android. This had a signiﬁcant
and positive effect on the speed of execution. The graphics
algorithms used for button detection were provided by the
OpenCV library and appropriate thresholds were chosen after
repeated testing.
To improve speed of dynamic analysis, we take advantage
of KVM-accelerated virtualization. To use this, we use Android
images that can run on the x86 architecture. About 70% Android
applications have no native code and so can run without problem
on such targets. Other applications contain ARM native code
and cannot run on x86 architecture without proprietary library
support. We therefore excluded applications containing native
code. Despite this we believe the study results are generally
representative. Furthermore, not being able to run ARM native
code is not a fundamental limitation of our approach: third-
party Android emulators, e.g., Genymotion, or the use of
a dynamic ARM-to-x86 code translation library (libhoudini)
can allow running ARM code on hardware-accelerated x86
architectures [11], [12].
6
For post-trigger analysis, our entire framework is managed
through Celery [13], which provides job management with the
ability to deploy in a distributed setting. In our implementation
the app UI exploration as well as the recording of redirection
chains with a real browser happens in tandem. Once this stage is
completed, any recorded redirection chains are queued through
a REST API into the Celery-managed queue together with
information about the application and part of the code that
was responsible for the triggering of the intent that led to the
redirection chain. Tasks are pulled from the queue to perform
further analysis on the landing pages and scan the ﬁles and
URLs with VirusTotal as described above. The whole system
has proper retry and timeout mechanisms in place and could
run for multiple months without signiﬁcant need of human
attention.
All the resulting analysis data is stored in MySQL and
MongoDB databases. Since the framework works in a dis-
tributed, concurrent manner, server-based SQL engines such as
MySQL were more appropriate than serverless implementations
like SQLite. SQL commands are additionally wrapped with
SQLAlchemy, a library that provides object-relational mapping
(ORM), generally easing the programming.
We implemented the analysis of the landing pages or the
ﬁnal URLs in the redirection chains on top of Chromium web
browser using Watir and the Selenium Webdriver framework.
We use Watir and Webdriver to script browser actions for auto-
matically loading web pages, clicking on links, automatically
download content that is available on clicking links, as well
as going back to the original page if a new page loads after
clicking on links. All the processing is done headlessly (i.e.,
without any GUI) using the Xvfb display server, which is an
X server implementation that does not present a screen output.
Applications are run in the virtualized environment for a
maximum of ﬁve minutes, with the average running time less
than two minutes. The post-trigger analysis, especially the
analysis of landing pages, is allowed to run for a maximum of
ﬁfteen minutes. We allow for such a long time as our crawler
may traverse many links and each link may have complex
redirection mechanisms that may trigger only after a short
wait.
V. RESULTS
A. Application Collection
Our application dataset consists of 492,534 applications
from Google Play and 422,505 applications from four Chi-
nese Android application stores: 91, Anzhi, AppChina, and
Mumayi. Google Play has a proprietary API for searching
and downloading applications from the store and it further
requires Google account credentials to do these tasks. We
used PlayDrone, which is an open source project to crawl
Google Play [14]. Google implements rate limiting based on
Google accounts and IP addresses and bans accounts and IP
addresses if there are two many requests in a given period of
time. PlayDrone mitigates this problem by seamlessly allowing
the use of multiple Google accounts and deploying the crawler
over multiple machines in a distributed manner. We used the
multiple Google accounts feature but simpliﬁed the system
by using a single machine and setting multiple IP addresses
for that machine. In our deployment, every new connection to
Google’s servers randomly chooses from among twenty source
IP addresses. To crawl applications from Chinese application
stores, we used our own in-house tool. These third-party stores
have a much simpler API than Google Play and typically have
a public http/https URL associated with each application. While
there can be sophisticated ways to search for each application,
the technique we employed was based on the observation that
applications in all these stores have identiﬁers in a small integer
range. Requesting URLs constructed for each possible identiﬁer
sufﬁced to completely scrap these applications stores. After
removing applications that were redundant among these stores,
the total number amounts to 422,505. About 30% applications
have native code and due to implementation reasons mentioned
in Section IV cannot be tested on our system. Our entire usable
application dataset therefore consists of a little over 600,000
applications.
B. Deployment
We deployed our system to gather results over a period of
about two months from mid-April 2015 to mid-June 2015 in
two locations, one at Northwestern University campus in the
US and the other at Zhejian University campus in China. The
deployment ran continuously with little manual intervention,
and restarts were necessary only when we needed to update the
system for ﬁxing bugs or adding features. To have a realistic
setting, the Northwestern University location ran applications
from Google Play (only the applications available from the US)
while the Chinese university location ran applications from
Chinese application stores. The location where the apps are run
is important because much of advertising, which forms bulk
of the app-web interaction we are studying, is targeted based
on location. The advertisements that are seen in one location
may not be shown in another location.
C. Overall Findings
Overall, we recorded a total of slightly over 1 million
launches of app-to-web links in the US deployment. In the
Chinese deployment, this number was 415,000. Note that this
is not a direct correspondence with the applications: some
applications may result in more than one launch while others
may not result in any. In the US, we detected a total of 948
malicious URLs coming from 64 unique domains. For the
Chinese deployment we detected 1,475 malicious URLs that
came from 139 unique domains. We also downloaded several
thousands of ﬁles of which many were simple text ﬁles or
docx ﬁles. As for the number of Android applications, the
US deployment collected 468 unique applications (from the
Web, outside Google Play) of which 271 were found to be
malicious. A large chunk (244) of these malicious applications
comes from the antivirus scam reported in Section VI-A.
Excluding this anomalous number of 244, we ﬁnd that one in
six applications downloaded from the Web (outside Google
Play) are malicious. The ﬁle numbers above do not include the
applications hosted on Google Play. We accounted for such
applications separately: there were 433,000 landing Google Play
landing URLs, i.e., http URLs with play.google.com domain
or URLs with market scheme (beginning with “market://”).
These Google Play landing URLs led to a little over 19,000
applications on Google Play. About 5% of these labels are
labeled as malicious (based on our criterion of being ﬂagged
7
Fig. 4. Malicious ﬁles downloaded through ad libraries and through other links
not afﬁliated with any ad libraries in US deployment. Libraries not resulting
in malware downloads are not shown. Tapcontext malware numbers are not
shown here as they are too high.
Fig. 5. Malicious ﬁles downloaded through ad libraries and through other
links not afﬁliated with any ad libraries in Chinese deployment. Tapcontext
and libraries not resulting in malware downloads are not shown.
Fig. 6. Redirection Chain lengths in US Deployment
Fig. 7. Redirection Chain lengths in Chinese Deployment
by at least 3 antiviruses) on VirusTotal. Based on our manual
check of the antivirus labels, however, all of these appear to be
adware. On the Chinese deployment side, we collected 1,097
unique ﬁles of which 435 are malicious. 102 of these ﬁles are
from the antivirus scam of Section VI-A.
Figures 4 and 5 present
the distribution of malware
downloads through various ad libraries in the US deployment
and in the Chinese deployment respectively. The “others” bar
presents the downloads through web links not embedded in
advertisements. Both the higher diversity and higher number of
malicious downloads in the Chinese deployment are noteworthy.
This is likely because the North American Android ecosystem
is centered around Google Play and application downloads
outside it are rare. However, the Chinese ecosystem depends
much more on the Web and third-party Android application
stores.
We also plot the length of redirection chains in both North
American and Chinese Deployments. Note as the length of the
chains increases, the two curves come closer, i.e., we have a
greater fraction of malicious chains when they are longer. This
was also observed by [5] and can possibly used to enhance our
detection in future work.
VI. CASE STUDIES
In this section we describe some interesting cases of scams
and malicious applications.
A. Antivirus Scam
We discuss here an antivirus scam campaign. We found the
antivirus, Armor for Android, to be heavily campaigned for
8
subscription fee of 0.99 GBP a day. While the application was
also hosted on Google Play during the time of our experiments
(it was subsequently removed from Google Play without our
involvement), the advertisements we saw directed users to
download applications from outside Google Play.
Our detection of this campaign was through the “Scan-For-
Viruses-Now.apk” ﬁles that were detected by antiviruses on
VirusTotal. Manual analysis after these detections led us to
also discover how the web page with the appearance of an
Android dialog box was designed to phish users. We note that
we had already detected this scam campaign and identiﬁed
this phishing behavior at least twenty days prior to Google
Safebrowsing and a few other URL blacklists on VirusTotal
incorporating www.fastermobile.org URLs as phishing URLs.
The above highlights the importance of running such
frameworks on a continuous basis. It is likely that the phishing
web pages we detected are not discoverable directly through
the Web and hence inaccessible to either search engines or
URL safety evaluation infrastructures like those of Google
Safebrowsing (unless submitted through channels other than
web crawling). By exploring the Web that is reachable from
mobile applications, the doors for further analysis are opened
and it becomes easier to identify and blacklist phishing websites
leading to previously known malware and thus protecting the
users.
This case study also offers a good example of how
frameworks such as ours can be used to understand and expose
scamming ad networks such as Tapcontext. The Tapcontext ad
network is being used by more than 1,800 applications in our
dataset. Application developers incorporate ad networks for
making money; however, such scam networks jeopardize the
applications’ reputation and are likely to do more harm than
good to the developers’ revenue. Furthermore, such evidence
may also be used by application markets and law enforcement
groups to hold ad networks more accountable for the content
they present.
B. Free iPad Scams
In our experiments, we encountered several instances of
win-free-iPhone or win-free-iPad advertisements. In our traces,
these advertisements had a few landing pages with domains such
as com-00-usa5.com and 1.cdna.com, possibly from unrelated
parties (based on Whois records). These landing pages present
the user in ﬂashy language that they have been lucky, an
iPhone (or some other electronic) is theirs if they go to the
next step. Examples are shown in Figures 9 (a) and (b). In
Figure 9 (a) all the users seeing the particular page are “lucky”
and “randomly selected to qualify for the special offer”. The
tricked users upon continuing are lead to a page like that in
Figure 9 (c). This same page may itself come from different
URLs such as http://www.electronicpromotion.com/Flow.aspx
and http://www.promotionalsurveys.com/Flow.aspx. The page
collects the users’ personal information such as name, email
address, physical address, and phone number and then leads to
a website called http://www.amarktﬂow.com/. The user ends up
answering lengthy surveys, conﬁrming the personal information
already provided, and then prompted to install an app or a
browser toolbar.
(a)
(b)
Fig. 8.
Armor for Android antivirus scam. (a) Application conducting
gratuitous virus scan; (b) A web page imitating Android dialog box asking
user to install the antivirus.
through multiple applications in both the US and the Chinese
experiments. In our traces, the entire campaign is running off
an ad network known as Tapcontext. In fact, based on our
observation lasting a few months, the entire ad inventory of
this ad network appears to be related to Armor for Android
only.
Applications show the antivirus advertisements as any
normal advertisement. In addition, they also sometimes au-
tomatically begin scanning for malware on the device (Figure 8
(a)). Our investigations on the Web seemed to clarify this: an
apparent Tapcontext representative admits that the ad library
has a tie up with an antivirus company that conducts a real scan
of the device (perhaps by gathering application checksums and
getting information about them from their server) [15]. The
scan does show real results but labels minor adware also as
threats while still not revealing additional information to the
user what threats were found unless a purchase is made.
The next aspect to the scam-like operation is that when the
user clicks on an advertisement to download the application,
the ad library launches a web page that looks very similar in
appearance to a native Android dialog box prompting the user
to download and install the antivirus application through the
“Download & Scan FREE Now” button. Upon clicking this
button, a ﬁle by the name of “Scan-For-Viruses-Now.apk” is
downloaded. We note that Tapcontext embeds a unique identiﬁer
to each click so that the URL of the web page is different
every time while the appearance is the same. However, all the
URLs come from two domains only: www.fastermobile.org
and www.fastermobiles.com. Furthermore, each downloaded
Scan-For-Viruses-Now.apk ﬁle is the same application (has the
same functionality) but is slightly different so that their MD5
and SHA digests never match.
The antivirus application is considered a scam by several
antiviruses and some Internet outlets [16] and is variously called
as FakeApp, Fakealert, Fakepay, and FakeDoc by antiviruses
in their malware labellings. The application charges a hefty
9
(a)
(b)
(c)
Fig. 9. Free iPad and iPhone scams. Figures (a) and (b) are typical landing pages shown to the users when they click on related advertisements in the apps.
Both these landing pages lead to the page shown in Figure (c). Note the language: the user is assured of getting an iPad or iPhone on answering a few questions.
What is likely is that the user hands over signiﬁcant personal information without getting anything in return.
None of the above websites themselves are ﬂagged by URL
blacklists on VirusTotal. WOT, a crowd-sourced reputation
system for websites, however presents a “very poor” reputation
for http://www.amarktﬂow.com/ and considers it a possible
scam [17]. The users are simply enticed to give away their
personal information, which could be sold or abused, and it is
not clear if even a single iPhone or iPad is distributed out to
any of the users. Similar scams have been covered in the past