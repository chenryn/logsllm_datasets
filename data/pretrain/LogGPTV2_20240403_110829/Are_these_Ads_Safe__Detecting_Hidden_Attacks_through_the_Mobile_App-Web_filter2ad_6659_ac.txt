### Tool Compatibility and System Reimplementation

The tool was incompatible with the latest versions of Android, necessitating a reimplementation to ensure compatibility. The new system maintains the same heuristics as described in the AppsPlayground paper. Instead of using HierarchyViewer to obtain the current UI hierarchy of the application, we opted for UIAutomator, which leverages the accessibility service of Android. This change significantly improved the execution speed.

### Button Detection and Graphics Algorithms

For button detection, we utilized the OpenCV library, with appropriate thresholds determined through repeated testing. This approach ensures accurate and efficient button identification.

### Speed Optimization with KVM-Accelerated Virtualization

To enhance the speed of dynamic analysis, we employed KVM-accelerated virtualization. We used Android images compatible with the x86 architecture, which can run approximately 70% of Android applications that do not contain native code. Applications with ARM native code were excluded due to the lack of proprietary library support. Despite this, we believe our study results are generally representative. Additionally, third-party emulators like Genymotion or dynamic ARM-to-x86 code translation libraries (e.g., libhoudini) can facilitate running ARM code on x86 architectures, addressing this limitation.

### Post-Trigger Analysis Framework

Our post-trigger analysis framework is managed using Celery, which provides job management and distributed deployment capabilities. The app UI exploration and recording of redirection chains occur simultaneously. Upon completion, recorded redirection chains are queued via a REST API into the Celery-managed queue, along with information about the application and the code responsible for triggering the intent. Tasks are then pulled from the queue for further analysis, including scanning landing pages and URLs with VirusTotal. The system includes robust retry and timeout mechanisms, enabling it to run for extended periods with minimal human intervention.

### Data Storage and Concurrency

All analysis data is stored in MySQL and MongoDB databases. Given the distributed and concurrent nature of the framework, server-based SQL engines like MySQL were more suitable than serverless implementations such as SQLite. SQL commands are wrapped with SQLAlchemy, an object-relational mapping (ORM) library that simplifies programming.

### Landing Page and URL Analysis

We implemented the analysis of landing pages and final URLs in redirection chains using the Chromium web browser, Watir, and the Selenium Webdriver framework. These tools enable automated browser actions, such as loading web pages, clicking links, downloading content, and navigating back to the original page. All processing is performed headlessly using the Xvfb display server, which does not present a screen output.

### Application Execution Time

Applications are run in the virtualized environment for a maximum of five minutes, with an average running time of less than two minutes. Post-trigger analysis, particularly the analysis of landing pages, is allowed to run for up to fifteen minutes to accommodate complex redirection mechanisms.

### Results

#### Application Collection

Our dataset includes 492,534 applications from Google Play and 422,505 applications from four Chinese Android stores: 91, Anzhi, AppChina, and Mumayi. We used PlayDrone, an open-source project, to crawl Google Play, mitigating rate limiting by using multiple Google accounts and IP addresses. For Chinese stores, we developed an in-house tool, exploiting the observation that application identifiers fall within a small integer range. After removing redundancies, the total number of unique applications is 422,505. Approximately 30% of these applications have native code and were excluded from testing. Our usable dataset consists of over 600,000 applications.

#### Deployment

We deployed the system over two months, from mid-April to mid-June 2015, at Northwestern University in the US and Zhejiang University in China. The US location ran applications from Google Play, while the Chinese location ran applications from Chinese stores. This setup reflects the targeted advertising based on location.

#### Overall Findings

In the US deployment, we recorded over 1 million launches of app-to-web links, detecting 948 malicious URLs from 64 unique domains. In the Chinese deployment, we recorded 415,000 launches and detected 1,475 malicious URLs from 139 unique domains. We also downloaded several thousand files, many of which were simple text or docx files. In the US, 271 out of 468 unique applications (from the Web, outside Google Play) were found to be malicious. Excluding an anomalous number of 244, one in six applications downloaded from the Web (outside Google Play) are malicious. For Google Play, there were 433,000 landing URLs leading to over 19,000 applications, with about 5% labeled as malicious (adware) on VirusTotal.

### Case Studies

#### Antivirus Scam

We identified an antivirus scam campaign promoting "Armor for Android," which charged a daily subscription fee of 0.99 GBP. The advertisements directed users to download the application outside Google Play. We detected this scam through "Scan-For-Viruses-Now.apk" files and discovered phishing behavior on the web page. This highlights the importance of continuous monitoring, as we detected the scam before it was flagged by other systems.

#### Free iPad Scams

We encountered several instances of win-free-iPhone or win-free-iPad advertisements. These scams lured users with flashy language, promising free devices in exchange for personal information. The landing pages often led to lengthy surveys and prompts to install apps or browser toolbars. None of the involved websites were flagged by URL blacklists on VirusTotal, but WOT, a crowd-sourced reputation system, flagged some as potential scams.

These case studies demonstrate the value of our framework in identifying and exposing malicious and scamming activities, thereby protecting users and holding ad networks accountable.