a set of interfaces, each with a unique ID, that can connect
to neighboring ADs. ADs agree on an inter-domain routing
protocol Θ, e.g., the Border Gateway Protocol (BGP). Upon
receiving a packet destined to dest, an ADx evaluates
Θx(dest) to determine the next hop of the packet.
Each AD maintains a master secret key, perhaps stored
in a secure ofﬂine server, and derives short-term secret
keys, each associated with a certain time period, from the
508
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:49:13 UTC from IEEE Xplore.  Restrictions apply. 
master key. The actual encryption and authentication keys
are derived from the short-term key and a nonce speciﬁed
by the sender. We assume every gateway router in an AD
has a copy of the short-term keys and knows how to process
and route LAP packets within the AD.
LAP overview.
At a high level, LAP has two phases,
as shown in Figures 2 and 3. Suppose Alice wants to
communicate anonymously with Bob without revealing her
identity and precise location.
e-path
segment
offset
❶-➀ request
b
i-1
c
ADi
a
bd
bd
i
d
i
❶-➁ reply
Figure 2. Operations within an AD. Step ❶-➀: upon receiving a request
packet, an AD encodes its ingress (b) and egress (d) interfaces, extends the
e-path in the packet, and forwards the packet (e.g., through interface d in
this ﬁgure). Step ❶-➁: an AD retrieves the interfaces from the e-path in
the reply packet and forwards it (e.g., to interface b).
AD1
a
A
AD2
a
c
b
AD3
d
a
b
a
AD4
B
❶-➀ A → B: request
A
B
B
O1
Aa
O1
Aa
O2
bd
B
O1
Aa
O2
bd
O3
ab
B
O1
Aa
O2
bd
O3O4
ab
aB
B
❶-➁ B ← A: reply
Aa
bd
ab
aB
0
Aa
bd
ab
aB
1
Aa
bd
ab
aB
2
Aa
bd
ab
aB
3
❷ A ↔ B: data
0
Aa
bd
ab
aB
Aa
bd
ab
aB
1
Aa
bd
ab
aB
2
Aa
bd
ab
aB
3
address
e-path
segment
offset
payload
Figure 3. Operations between ADs. Step ❶-➀: A sends a request to
B, which is routed by B’s address. Step ❶-➁: B replies e-path to A along
the reverse path. An AD locates its segment by the offset pointer. Phase ❷:
A and B send data to each other along the e-path.
Phase ❶ Establishing e-paths:
This phase enables Alice
to obtain an e-path — a bi-directional routing path consisting
of encrypted forwarding decisions by intermediate ADs on
the path.
• Step ❶-➀ Request. To set up an e-path as shown in
Figure 3, Alice creates a request packet to reach
Bob. When her request packet reaches a gateway
router inside AD1, it creates a segment which contains
Alice’s address along with the egress interface, encrypts
the segment to anonymize Alice’s origin address, and
509
forwards the encrypted segment (O1) to AD2. Upon
receiving the request, as shown in Figure 2, AD2
encrypts its own forwarding decision in O2 (i.e., the
request packet from ingress interface b is forwarded
to egress interface d to reach Bob), appends O2 to
the request packet, and forwards it to the next AD.
This process continues until
the request reaches
AD4, where Bob resides. Note that encryption and
authentication of Oi use secret keys that are only known
to ADi so that only ADi can later decrypt and verify
Oi.
• Step ❶-➁ Reply. The resulting e-path enables Bob
to send packets to Alice without knowing her origin
address, because the e-path encodes the forwarding
decisions made by ADs on the routing path. We lever-
age packet-carried forwarding state, where the network
forwards packets solely based on the state contained in
the header (i.e., e-path). More speciﬁcally, Bob retrieves
the e-path from the request and puts the e-path in the
header of a reply packet, which is a special type of
data packet without payload. As shown in Figures 2
and 3, upon receiving the reply, AD3 decrypts the
segment O3 that it encrypted during Step ❶-➀, retrieves
the egress interface a, and forwards the reply to
the next hop. This process continues until the reply
reaches the intended end-host Alice. If an AD fails to
correctly decrypt or verify the segment, the reply is
dropped.
Phase ❷ Forwarding: When Alice obtains the e-path
from the reply packet, she can start sending data packets
anonymously along this e-path using packet-carried forward-
ing state, as described above.
With LAP, Alice achieves sender topological anonymity
and location privacy with respect to a LAP-setting adversary
(e.g., Bob), because only her local AD knows her identity
and address. In the following sections, we describe LAP in
detail, and validate it using a real Internet topology. We also
address the challenges of instantiating LAP in the current IP
network and future Internet architectures.
IV. LAP: LIGHTWEIGHT ANONYMITY AND PRIVACY
In this section, we describe in detail how e-paths are
constructed, and present additional mechanisms to achieve
receiver anonymity and controllable privacy. We start with
the packet header formats.
A. LAP Packet Header Format
Figure 4 illustrates the format of a LAP packet header. The
header contains a 8-bit TYPE ﬁeld to distinguish request,
reply, forward data (from Alice to Bob), and backward
data (from Bob to Alice) packets (six bits of the TYPE ﬁeld
are reserved for future extensions). The header also contains
a 32-bit NONCE ﬁeld to assist session unlinkability.
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:49:13 UTC from IEEE Xplore.  Restrictions apply. 
Request
8
0
TYPE
Reply/Data
8
0
TYPE
64+
LENGTH
DESTIP
24
HTE
96+
E-PATH
LENGTH
24
OFFSET
E-PATH
NONCE
NONCE
63
63
A segment
in e-path
0
16
INGRESS
EGRESS
32
SIZE
RESERVED
MAC
127
63
}
e
n
c
r
y
p
t
e
d
Figure 4.
LAP packet header formats. In a segment, the ﬁrst 64 bits
are encrypted, and the RESERVED ﬁeld can be used to store additional
information of an AD.
Request. A request packet indicates Alice’s intent to
anonymously communicate with Bob. To initiate a request,
Alice speciﬁes Bob’s address in a 32-bit DESTIP ﬁeld and
her desired privacy/performance tradeoff, expressed in a
8-bit HOP-TO-ENCRYPT (HTE) ﬁeld (to be discussed in
Section IV-C). As the request travels through ADs until
it reaches Bob, each intermediate AD appends its own
encrypted path segment to the E-PATH ﬁeld (to be described
later).
Reply. A reply/data header contains no IP address
since reply/data packets can be forwarded using the
bi-directional e-path that is copied from the corresponding
request packet. The header also contains a LENGTH ﬁeld
to indicate the size of the packet, and an OFFSET ﬁeld to
indicate the appropriate segment from the E-PATH ﬁeld
that the receiving AD can decrypt. ADi adjusts the OFFSET
ﬁeld based on the direction of the packet (e.g., for reply,
OFFSET is decreased by 1).
Segments in e-path.
The E-PATH ﬁeld comprises
a sequence of segments, each of which is 128 bits by
default. As shown in Figure 4, an AD creates each segment
consisting of INGRESS and EGRESS interfaces, size of the
segment, RESERVED to store additional information (e.g.,
source AD can store the source IP address which does not
ﬁt in the INGRESS ﬁeld), and MAC to store the Message
Authentication Code over all segments in the E-PATH ﬁeld
(including its own). Note that LAP can support variable-size
segments in multiples of 128 bits (and thus a SIZE ﬁeld is
needed in a segment) to defend against size-based passive
trafﬁc analysis, as discussed in Section IV-E.
B. LAP Protocol Description
We now describe Phases ❶ and ❷ in detail.
Encrypted path establishment.
To construct an e-path,
Alice sends a request to Bob (Step ❶-➀), and by default,
LAP requires each AD to append its encrypted routing
decision to the received request packet.
Suppose Alice resides in AD1 and Bob resides in ADn,
and the request packet moves along a path AD1, AD2, . . .,
ADn. As shown in Figure 3, ADi generates a segment Oi,
which contains the encrypted ingress and egress interfaces
for bi-directional forwarding, and appends to the packet. As
a result, a resulting e-path OA,B consisting of {O1, . . . , On}
is constructed as follows: Let O0 = ∅. For i = 1 · · · n,
χi = Encke
(Mi),
Oi = χi(cid:3)M ACks
i
(χi(cid:3)Oi−1)
i
(1)
where Mi contains an AD’s routing decision (i.e., the ingress
and egress interfaces), Enck(m) means encrypting m using
key k, and M ACk(m) is the Message Authentication Code
of m using k. ke
i are symmetric keys derived from
the nonce and the ADi’s current short-term key, known only
to ADi.
i and ks
We include the previous segment in the MAC computation
to enforce the routing decision while preventing attackers
from crafting an arbitrary path. Without MACs, an adversary
can easily ﬁnd a ciphertext decrypted to some meaningful
egress/ingress interfaces. Simply adding a regular MAC is
insufﬁcient because an adversary may be able to craft an
invalid path by combining segments obtained from two
separate requests. Hence, in LAP, we use layered MACs
to prevent arbitrary combinations of segments.
ADi appends Oi to the E-PATH ﬁeld of the request,
and forwards it to ADi+1 (via egress interface) until the
request reaches Bob.
Packet-Carried Forwarding State.
For successful packet
forwarding using packet-carried state, end-hosts copy the E-
PATH ﬁeld from the preceding packet. For example, upon
receiving the request, Bob copies the E-PATH ﬁeld to the
reply packet. Similarly, when Alice receives the reply,
she copies the E-PATH to the data packet, and Alice and
Bob copy the E-PATH for succeeding data packets.
Using the e-path in a reply packet (Step ❶-➁) and a
data packet (Phase ❷), ADs can forward the reply/data
packet along the encrypted path bi-directionally without ac-
tually knowing Alice’s or Bob’s address. Suppose a reply
packet enters an ADi from interface d, as shown in Figure 2.
The AD proceeds as follows: