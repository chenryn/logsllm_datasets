time performance also confers a security beneﬁt, since
access control changes can propagate quickly.)
2.3 Security Goals
A trivial solution that provides all of the above functionality
would make all AR content public by default. However, in-
teraction between multiple users may not always be positive.
For example, a malicious or careless user may attempt to:
1. Share unwanted or undesirable AR content with an-
other user. For example, in Multi-Team Whiteboards,
a user may plaster a wall with offensive messages, or in
Community Art, violate another user’s personal space
by attaching virtual objects to them as a practical joke.
Such behavior has already manifested in shared VR set-
tings [1, 66].
2. See private AR content belonging to another user. For
example, in Multi-Team Whiteboards, a user may at-
tempt to read another user’s private whiteboard.
3. Perform unwanted manipulations on AR content cre-
ated by or belonging to another user. For example,
in Community Art or Multi-Team Whiteboards, a user
may delete or vandalize another user’s virtual creations.
Such behavior has already appeared in the wild, with
vandalism of AR art in Snapchat [38].
In response to such multi-user threats, we develop the fol-
lowing security and privacy goals for an AR sharing module.
Control of outbound content. Sharing of AR content in-
volves two parties: the originator of the content and the re-
cipient. We decompose our security goals along this dimen-
sion, beginning with control of outbound content, i.e., man-
aging the permissions of other users to access shared content.
Three canonical access control rights are “read,” “write,”
and “execute.” Extending “read” and “write” to the AR do-
main (and deferring “execute” to Section 7):
• Support granting/revoking per-user permissions.
The multi-user AR platform should support setting edit
and view permissions for different users. A user of
Paintball may wish to share a game session only among
a speciﬁed friend group instead of allowing any nearby
user to join, and may wish to retain full control of game
administration even among the set of players.
• Support granting/revoking per-object permissions.
A user of Community Art may wish to leave one piece of
art publicly visible while working privately on another.
Thus, regulating permissions at the granularity of the
app is not sufﬁcient to cover all use cases; object-level
permissions must be supported as well.
The consequence of the above goals is that users in the
same physical space may not share the same view of the vir-
tual space. This is in sharp contrast to current technologies,
where the physical presence of a device — e.g., a smartphone
or a television set — enables the user of that device both
(1) to signal to others that they are busy with that device,
and (2) to establish a dedicated spatial region upon which
their use of the device depends. The physicality of the de-
vice, then, serves as a scaffold around which interpersonal
norms have developed. For instance, a person might avoid
standing in front of a television set when a user is watching
it, and might refrain from blocking the line of sight from a
user to the smartphone they are holding.
AR content has no such physicality. Consider, for in-
stance, Multi-Team Whiteboards: as thus far stated, a user
looking at or interacting with a private whiteboard will ap-
pear to a nearby user as staring into or manipulating empty
space. There is no mechanism by which the user can ex-
ercise agency over their working space in the presence of
other users, and no mechanism by which other users pass-
ing by can determine whether the object is ﬁve feet away
from its owner or up against a more distant wall. As a result,
one user may inadvertently stand in front of content that a
second user is interacting with. Further adding to this is-
sue, prior work has also shown that people can be uncom-
fortable with the presence of AR users due to not knowing
what the AR user is doing [14,35], and private content causes
this rift even between users of the same AR platform. The
Meta developer guidelines [40] thus recommend that devel-
opers build public-by-default content in accordance with hu-
man intuition about a shared physical world. Indeed, novice
users in the same physical space may expect to also see the
same virtual content [35]. It is possible that social behaviors
144    28th USENIX Security Symposium
USENIX Association
will adapt to this physicality disconnect over time, particu-
larly around the current social discomfort of bystanders. But
although social norms may change, and although mitigating
these issues for bystanders — non-AR users, or AR users of a
different and non-compatible platform — is difﬁcult and be-
yond the scope of this work, we still seek to address this
physical-world disconnect at least in the near term for multi-
ple AR users of compatible platforms. Speciﬁcally, we wish
to achieve the above content privacy goals while at least par-
tially supporting a shared-world physical intuition:
• Support physically intuitive access control. An app
may wish to signal to a nearby user that another user is
(for example) drawing on a whiteboard, without reveal-
ing the content being drawn.
Control of inbound content. We next consider security
properties from the perspective of the recipients of shared
content. Since shared content can have serious implications
for the receiver, such as spam that obscures important real-
world information [34], we derive the following goals:
• Support user control of incoming virtual content.
For instance, users of Community Art may wish to ﬁl-
ter content to only that which is age-appropriate or that
does not contain foul language.
• Support user control of owned physical space. In the
case of Community Art, a user may not want arbitrary
other users to attach content to their heads without con-
sent, a homeowner may wish to prevent house guests
from placing virtual content inside private rooms, and
the keepers of a public monument may not want the
monument to be vandalized with virtual grafﬁti. We
note that users may want control over their physical
space even when they cannot see the object in question:
for instance, an app may wish to prevent a virtual “kick
me” sign from being attached to a user’s back such that
the user cannot see and cannot control the sign. We con-
sider the question of determining who controls a partic-
ular physical space to be out of scope for the design we
present in Section 4 (see Section 4.4 for further discus-
sion), and instead focus on enforcing owned physical
space; however, we urge future work to also address
this complementary issue.
2.4 Supporting Flexibility
Stepping back, in deﬁning the above functionality and secu-
rity goals, we observe that not all multi-user AR apps will
have the same needs. For example, AR content that is shared
with all users by default is suitable for some apps (e.g., Com-
munity Art) but not others (e.g., Multi-Team Whiteboards).
Likewise, not all security and privacy goals are relevant in all
cases: for instance, enforcing personal space for shared AR
content may conﬂict with the functionality needs of Paint-
ball, which requires that virtual paint stick to players upon
a hit. Even in an app that is otherwise simple from a shar-
ing control perspective, user needs may warrant a degree of
added sharing control complexity: for instance, an AR assis-
tive technology object that transcribes spoken words for deaf
users may be exempt from the app’s general rules for the en-
forcement of owned physical space so that it always remains
visible to the deaf user who needs it.
Because the right sharing control model is app-speciﬁc,
AR app developers will need the ability to implement multi-
user features with their chosen model. To that end, we iden-
tify the need for a ﬂexible AR sharing control module that
can be leveraged by app developers. We envision this mod-
ule as either an app-level library or an OS interface (i.e., set
of APIs) that provides sharing control features. The advan-
tage of an app-level library is that it does not require explicit
changes to the platform. That is, an app developer could
create an app that runs on different AR platforms and, by in-
cluding the platform-appropriate version of a library, support
interactions among users with different types of AR devices.
For example, although we prototype our design as an app-
level library for HoloLens, in principle it could be adapted
for compatibility with Meta or Magic Leap apps.
3 Threat Model and Non-Goals
We aim to design a ﬂexible module that helps app develop-
ers create multi-user AR apps that incorporate shared AR
content while mitigating the risk of undesirable interactions
between multiple users. We focus on the case of a devel-
oper building a single app and mediating the interactions of
its multiple users, deferring to future work the problem of
cross-app communication. We now present the threat model
under which we develop our design in Section 4, as well as
specify non-goals of this work.
Threat Model. Our primary focus in this work is on untrust-
worthy users. That is, we aim to help app developers create
multi-user AR apps that are resilient to security and privacy
threats between multiple users of the same app. In that con-
text, we assume that two or more users are using the same
AR app, written by the same developer and incorporating
our sharing module. We thus assume that users trust both the
developers of the apps that they install as well as their AR op-
erating system, but that users may not trust each other. This
trust dynamic is akin to traditional desktop environments —
e.g., where two users of a Unix operating system might both
trust the underlying system and installed apps, but might not
trust each other and hence might not make their home direc-
tories world readable or world writable. A key difference, as
noted earlier, is that in our model we only consider sharing
of content between users of the same app.
Under this threat model, we do not consider malicious
apps that omit or misuse our sharing module. We explic-
itly trust app developers to incorporate our module (e.g., as
an app-level library) into their apps; a malicious app de-
veloper might choose to simply not use our sharing mod-
ule, implementing their own adversarially-motivated sharing
functionality, or use our module but violate security or pri-
USENIX Association
28th USENIX Security Symposium    145
vacy properties through out-of-band means. Though a user
may install malicious apps alongside legitimate ones that use
our module, these malicious apps cannot interfere via our
module: we consider (and our module supports) AR content
sharing only among multiple users of the same app, rather
than also considering sharing across apps. This is consis-
tent with the capabilities of current AR technologies, which
are either single-app or do not allow multiple concurrently
running apps to communicate [33]. We also assume that all
users are running legitimate, uncompromised versions of the
app; strategies for verifying [36,75] or enforcing [73,74] this
assumption are signiﬁcant research challenges of their own.
Finally, we assume that communication between devices
is secured with today’s best practices, e.g., end-to-end en-
crypted. Thus, we rule content eavesdropping and content
modiﬁcation attacks as out of scope. Current network best
practices still suffer from denial-of-service attacks and traf-
ﬁc analysis attacks, but we do not aim to protect against such
attacks in this work, focusing instead on the app-level secu-
rity and privacy issues.
Non-Goals. We consider the following design questions to
be non-goals of our present effort:
• Non-goal: UI/UX design. Although we propose un-
derlying mechanisms for the sharing control needs of
app logic, and although those mechanisms in some in-
stances have implications for what developers are em-
powered to surface at the UI level, we do not aim to de-
ﬁne exactly how those mechanisms should manifest to
users in the speciﬁc interaction modality or look-and-
feel of an app. Thus, we leave the design of speciﬁc
interfaces — including how much of our module’s con-
trol should be surfaced directly to users versus shoul-
dered by the app — to future efforts by researchers and
app developers. Our work is similar in spiritspirit to
work on user interface toolkits (e.g., [25, 27]) in that
our goal is to enable app developers to easily create and
innovate on a range of user interfaces and experiences,
rather than to design and iterate on these interfaces di-
rectly.
• Non-goal: Network architecture design. It remains
an open question whether multi-user AR will ultimately
be enabled by client-server, peer-to-peer, or other net-
work architectures; we thus design our platform to be
agnostic to network architecture. Additionally, we do
not consider how two AR devices initially bootstrap
communication; prior, complementary work considers
how to securely pair two HoloLens devices [60].
• Non-goal: App-speciﬁc choices about sharing con-
trol properties. We do not aim to recommend to
apps which sharing control properties and functional-
ities might make sense in the context of the app, instead
enabling app developers to choose the appropriate sub-
set of properties for their speciﬁc use cases.
Figure 2: Basic object sharing ﬂow: Alice creates the blue and
green boxes and then chooses to share the green box with Bob. See
Section 4.1 for details.
• Non-goal: Accurate spatial localization of AR users
and content. We do not aim to design a system by
which the location of an AR user can be accurately and
securely determined. Prior work has studied how to
localize devices accurately [23, 31], how to verify lo-
cation claims [10, 69], and how to verify co-location
claims [21, 55]. We note that even without further shar-
ing controls, future location-based AR apps will beneﬁt
from secure location and co-location veriﬁcation meth-
ods. Thus, we consider this topic to be orthogonal and
of independent in.
4 Design
We now present the design of a module that AR developers
can use to support secure and private sharing of AR content
among multiple users. Compatible with our threat model of
untrusted users but trusted developers, we envision this mod-
ule as an app-level library or an OS interface.
4.1 Module Design Overview
To illustrate the relationships between the OS, the sharing
control module, the app, and multiple users, we begin by
walking through a simple case of Alice creating two objects
and sharing one with Bob (Figure 2).
1. Precondition: Alice and Bob are both running an app
that incorporates the sharing module and, as such, al-
ready have an open communications channel between
their devices.
2. Object creation: Alice creates two AR objects, a small
blue box and a large green box. Her app calls the shar-
ing module’s InstantiateShared() API for both ob-
jects, allowing the module to track permissions at the
granularity of those objects (in this case, beginning with
view and edit permissions for only Alice).
3. Outbound sharing (app-level): Through some user in-
terface provided by the app, Alice chooses to share the
green box with Bob.
4. Outbound sharing (module-level): On Alice’s device,
the app calls the sharing module’s SetPermission()
146    28th USENIX Security Symposium
USENIX Association
API. As a result, the module updates its internal per-
mission map, adding Bob to the list of users with view
permissions for the green box.
5. Communication: The sharing module sends a message
(via the device’s OS and networking stack) containing
object content and metadata to Bob’s device, whose OS
and networking stack dispatch it to the sharing module
in Bob’s instance of the app.
6. Inbound sharing (module-level): The sharing module
surfaces a SetPermission event to Bob’s app.
7. Inbound sharing (app-level): On Bob’s device, the app
shows some user interface to allow Bob to accept or
deny the shared object. (Other apps may skip this step
and show the object to Bob automatically, and/or re-
spect Bob’s previously-set preferences for shared ob-
jects from Alice.) Bob chooses to accept the shared ob-
ject from Alice; the app updates his view of the world
to include the green box.
8. State update and communication: The app calls the
sharing module’s AcceptObject() API, which in turn
transmits that message back to Alice’s device.
Following this transaction, Bob can now see a shared copy
of Alice’s green box and, depending on the sharing settings,
can manipulate that box in ways that are also visible to Alice.
This sharing ﬂow might seem simple: the sharing control
module provides APIs that help an app keep track of which
users can access which AR objects — i.e., view and edit per-
missions — and syncs this information across the devices of
all users of the app. However, as surfaced in Section 2, shar-
ing in the AR context requires thoughtful consideration —
particularly in the face of users’ expectations of and interac-
tions within the physical world.
Key design challenges. While striving to achieve the func-
tionality and security goals identiﬁed in Section 2, our design
space exploration surfaced several key questions which do
not arise for sharing and access control in traditional systems
(e.g., ﬁle systems). These challenges are deeply connected
with AR’s integration with the physical world, and although
they do not on the surface appear to be security-centered
questions, they affect the security and privacy mechanisms
we design, and so we must address them:
• Integration of shared AR objects with the physical world
(Section 4.2): How is a shared object integrated into the