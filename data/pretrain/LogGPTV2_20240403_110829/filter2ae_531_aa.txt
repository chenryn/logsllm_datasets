# 代码审计
    const express = require('express')
    const router = express.Router()
    const axios = require('axios')
    const isIp = require('is-ip')
    const IP = require('ip')
    const UrlParse = require('url-parse')
    const {sha256, hint} = require('./utils')
    const salt = 'nooooooooodejssssssssss8_issssss_beeeeest'
    const adminHash = sha256(sha256(salt + 'admin') + sha256(salt + 'admin'))
    //hash加盐加密
    const port = process.env.PORT || 3000
    //表示监听端口
    function formatResopnse(response) {
      if(typeof(response) !== typeof('')) {
        return JSON.stringify(response) 
        // stringify 将 JavaScript 值转换为 JSON 字符串。
      } else {
        return response
      }
    }
    function SSRF_WAF(url) {
      const host = new UrlParse(url).hostname.replace(/\[|\]/g, '')
    ///全局删除“[”,“]”
      return isIp(host) && IP.isPublic(host)
      //isPublic就能看出来是公网还是内网了
    }
    function FLAG_WAF(url) {
      const pathname = new UrlParse(url).pathname
      //提取一部分路径
      return !pathname.startsWith('/flag')
      //判断是否路径开始为/flag
    }
    function OTHER_WAF(url) {
      return true;
    }
    const WAF_LISTS = [OTHER_WAF, SSRF_WAF, FLAG_WAF]
    router.get('/', (req, res, next) => {
      if(req.session.admin === undefined || req.session.admin === null) {
        res.redirect('/login')
      } else {
        res.redirect('/index')
      }
    })
    router.get('/login', (req, res, next) => {
      const {username, password} = req.query;
      if(!username || !password || username === password || username.length === password.length || username === 'admin') {
        res.render('login')
        //没有绕过就回到login页面
      } else {
        const hash = sha256(sha256(salt + username) + sha256(salt + password))
        req.session.admin = hash === adminHash
    //用户名和密码的加密，验证成功你就是管理员的session
        //如果hash===adminHash，则session.admin被赋值。（运算符优先级）
        res.redirect('/index')
      }
    })
    router.get('/index', (req, res, next) => {
      if(req.session.admin === undefined || req.session.admin === null) {
        res.redirect('/login')
        //session验证
      } else {
        res.render('index', {admin: req.session.admin, network: JSON.stringify(require('os').networkInterfaces())})
      }
    })
    router.get('/proxy', async(req, res, next) => {
      if(!req.session.admin) {
        return res.redirect('/index')
      }
      //session.admin验证通过后才可以访问proxy
      const url = decodeURI(req.query.url);
      console.log(url)
      const status = WAF_LISTS.map((waf)=>waf(url)).reduce((a,b)=>a&&b)
      if(!status) { //waf验证
        res.render('base', {title: 'WAF', content: "Here is the waf..."})