### 5.2 Web Clients

#### 5.2.1 The Process

1. **Filter TCP Traffic:**
   Use the following command to filter TCP traffic with an ACK flag and at least four packets, targeting specific ports. This will help identify legitimate web clients.
   ```sh
   $ rwfilter sample.rw --type=out,outweb \
   --protocol=6 --ack-flag=1 --packets=4- \
   --dport=80,8000,8080,443,1935,1755,554 \
   --pass=stdout \
   | rwset --sip-file=tcp_clients.set
   ```

2. **Add UDP Traffic:**
   Add in the UDP traffic to the specified ports using the following command:
   ```sh
   $ rwfilter sample.rw --type=out,outweb \
   --protocol=17 --dport=1755,554 \
   --pass=stdout \
   | rwset --sip-file=udp_clients.set
   ```

3. **Combine TCP and UDP Lists:**
   Combine the lists of TCP and UDP clients for analysis. This step helps to account for both types of traffic and provides a more comprehensive view.
   ```sh
   $ rwsettool --union tcp_clients.set udp_clients.set \
   --output-path=web_clients.set
   $ rwsetcat --count web_clients.set
   31
   ```
   The output shows that there are 31 web clients in the sample network. Focus on hosts with at least 1% of the client web traffic, as most hosts will have some minimal web traffic due to updates or configuration changes.

4. **Filter Incoming Traffic:**
   Filter incoming traffic if possible, as the bulk of the packets for client web traffic will be inbound.
   ```sh
   $ rwfilter sample.rw --type=in,inweb \
   --dipset=web_clients.set --sport=80,8080,8000,443,1935,1755,554 \
   --pass=stdout \
   | rwstats --fields=dip --bytes --percentage=1
   ```
   Example Output:
   ```plaintext
   INPUT: 2973484 Records for 31 Bins and 168273056846 Total Bytes
   OUTPUT: Top 2 bins by Bytes (1% == 1682730568)
   dIP| Bytes| %Bytes| cumul_%|
   203.0.113.33| 154723380928| 91.947804| 91.947804|
   203.0.113.220| 12334655077| 7.330143| 99.277947|
   ```

5. **Filter Outbound Traffic:**
   If it is not possible to filter inbound traffic, use the following filter on outbound traffic. This filter checks traffic going from the web clients to external web servers.
   ```sh
   $ rwfilter sample.rw --type=out,outweb \
   --sipset=web_clients.set --dport=80,8080,8000,443,1935,1755,554 \
   --pass=stdout \
   | rwstats --fields=sip --percentage=1
   ```
   Example Output:
   ```plaintext
   INPUT: 2921867 Records for 32 Bins and 2921867 Total Records
   OUTPUT: Top 2 bins by Records (1% == 29218)
   sIP| Records| %Records| cumul_%|
   203.0.113.33| 2625228| 89.847621| 89.847621|
   203.0.113.220| 274448| 9.392898| 99.240520|
   ```

6. **Associate IP Addresses with Ports and Protocols:**
   Use the following command to associate each IP address with the ports and protocols it is interacting with.
   ```sh
   $ rwfilter sample.rw --type=out,outweb \
   --sipset=web_clients.set --dport=80,8000,8080,443,1935,1755,554 \
   --pass=stdout \
   | rwuniq --fields=sip,dport,protocol
   ```
   Example Output:
   ```plaintext
   sIP|dPort|pro| Records|
   203.0.113.220| 80| 6| 235334|
   203.0.113.220| 443| 6| 38733|
   203.0.113.220| 554| 6| 5|
   203.0.113.220| 8080| 6| 95|
   203.0.113.220| 1935| 6| 281|
   203.0.113.33| 1935| 6| 128|
   203.0.113.33| 443| 6| 251473|
   203.0.113.33| 8000| 6| 1|
   203.0.113.33| 8080| 6| 895|
   203.0.113.33| 80| 6| 2372731|
   ```

   Table 9: Potential Web Clients for the Sample Network
   | Internal IP | Internal Port | External IP | External Port | Protocol |
   |-------------|---------------|-------------|---------------|----------|
   | 203.0.113.220 | * | * | 80, 443, 554, 1935, 8080 | 6 |
   | 203.0.113.33 | * | * | 80, 443, 1935, 8000, 8080 | 6 |

#### 5.2.2 How to Validate Findings

Web clients are more challenging to validate than web servers. Look for three types of web clients: proxy servers, NAT gateways, and directly connected workstations. This requires analyzing both inbound and outbound traffic. Some addresses might not be actual web clients.

**Characteristics to Consider:**

1. **Traffic Volume and Timing:**
   - Directly connected workstations typically have traffic patterns that match the organization's schedule.
   - Web gateways (NAT servers) have high traffic volume.
   - Web proxy servers have medium to high traffic volume.

   Example Command:
   ```sh
   $ rwfilter sample.rw --type=out,outweb \
   --sipset=web_clients.set --dport=80,8080,8000,443,1935,1755,554 \
   --pass=stdout \
   | rwstats --fields=sip --bytes --count=2
   ```
   Example Output:
   ```plaintext
   INPUT: 3029615 Records for 15228 Bins and 168278493869 Total Bytes
   OUTPUT: Top 2 Bins by Bytes
   sIP| Bytes| %Bytes| cumul_%|
   203.0.113.33| 154723380928| 91.944833| 91.944833|
   203.0.113.220| 12334655077| 7.329906| 99.274739|
   ```

   Based on traffic volume, it can be inferred that 203.0.113.33 is likely a web gateway, and 203.0.113.220 is a web proxy server.

2. **Running Services:**
   - Client workstations usually do not run any services.
   - Web gateways often appear to host multiple services.
   - A client running many services could be a VPN gateway.

   Example Command:
   ```sh
   $ rwfilter sample.rw --type=out,outweb \
   --sipset=web_clients.set --sport=20,21,22,25,53,80,8000,8080,443 \
   --pass=stdout \
   | rwuniq --fields=sip,sport
   ```
   Example Output:
   ```plaintext
   sIP|sPort| Records|
   203.0.113.220| 8080| 7|
   203.0.113.220| 8000| 7|
   203.0.113.33| 20| 1|
   203.0.113.33| 443| 492|
   203.0.113.33| 21| 27|
   203.0.113.33| 8000| 44|
   203.0.113.33| 8080| 58|
   203.0.113.33| 22| 7|
   203.0.113.33| 80| 42|
   ```

   Since 203.0.113.33 makes connections over many ports, it is likely a multipurpose gateway or a VPN gateway. It was removed from the web clients list.

3. **Ephemeral Port Usage:**
   - Most client operating systems use ephemeral ports in a sequential fashion within a certain range.
   - Plotting software can help visualize ephemeral port usage over time.

   After validating traffic volume, services, and port usage, the remaining client (203.0.113.220) was confirmed as a web proxy server.

#### 5.2.3 Anomalies

- **Directly Connected Workstations Hosting Services:**
  - Some services may be left on by default. Check the specific service and traffic volume.

- **Servers with Client Web Traffic:**
  - Servers sometimes use web traffic for updates, but this is usually minimal and from a few external addresses.

- **Other Types of Traffic Over Web Ports:**
  - Any service can be configured to use typical web ports. This is often done for ease of use or to bypass firewall policies.

#### 5.2.4 Results

The sample network had one web client added to the profile:

Table 10: Final Web Clients for the Sample Network
| Proto. | Internal IP | Internal Port | External IP | External Port | External Name | Comments |
|--------|-------------|---------------|-------------|---------------|---------------|----------|
| 6      | 203.0.113.220 | * | * | 80, 443, 554, 1935, 8080 | * | Web gateway |

### 5.3 Email

Email services are provided through several protocols, with SMTP being the most common for sending mail. Email clients typically use different protocols for submitting and receiving messages.

#### 5.3.1 The Process

1. **Identify Email Servers:**
   Use the following command to look for email servers sending traffic from the specified ports.
   ```sh
   $ rwfilter sample.rw --type=out \
   --protocol=6 --ack-flag=1 --packets=4- --sport=25,465,110,995,143,993 \
   --pass=stdout \
   | rwset --sip-file=smtp_servers.set
   ```

   Table 12: Potential Email Servers for the Sample Network
   | Internal IP | Internal Port | External IP | External Port |
   |-------------|---------------|-------------|---------------|
   | 203.0.113.231 | 25 | * | * |
   | 203.0.113.195 | 25 | * | * |
   | 203.0.113.221 | 25 | * | * |
   | 203.0.113.220 | 25 | * | * |
   | 203.0.113.222 | 25 | * | * |

2. **Identify Email Clients:**
   Filter outbound traffic for ports used by desktop email clients.
   ```sh
   $ rwfilter sample.rw --type=out \
   --protocol=6 --packets=4- --ack-flag=1 --dport=110,143,587,995,993 \
   --pass=stdout \
   | rwset --sip-file=email_clients.set
   ```

   The sample network did not have any visible email clients, indicating that internal hosts are correctly set up to use the network’s email servers.

#### 5.3.2 How to Validate Findings

1. **Validate Email Servers:**
   - Servers sending mail out of the network to TCP port 25 are likely to be servers.
   - Use `nslookup` to validate the MX records and DNS names.
   - Telnet to each IP address at port 25 to check for banner messages.

   Example Command:
   ```sh
   $ rwfilter sample.rw --type=out \
   --protocol=6 --packets=4- --ack-flag=1 --dport=25,465 \
   --pass=stdout \
   | rwuniq --fields=sip
   ```
   Example Output:
   ```plaintext
   sIP| Records|
   203.0.113.222| 10479|
   203.0.113.231| 74852|
   ```

   All but one of the addresses were verified as email servers. The address 203.0.113.220, previously listed as a web gateway, may also be proxying email traffic.

2. **Test for Web Mail Applications:**
   - Test each email server for a running web mail application by accessing the server’s address in a web browser on ports 80 and 443.

#### 5.3.3 Anomalies

- **Non-Dedicated Email Servers:**
  - Email servers can run alongside other services, such as web services.

- **Clients Acting as Servers:**
  - Any host can run an email server, even a client. These servers will have low SMTP traffic volume compared to dedicated servers.

- **Desktop Clients Sending SMTP Messages:**
  - Investigate clients configured to send messages directly to port 25 (SMTP) instead of port 587 (MSA).

---

This optimized text provides a clearer, more structured, and professional approach to the instructions and processes described.