我们可以试着将这些信息与捕捉到的初始挑战数据包相对比：  
我们已经知道，这段数据中包含十六进制编码的SUPER_PASSWORD：
根据拦截到的多个挑战数据，我们可以从中挑出随机的数据：
其余数据是静态数据，移动设备每次生成挑战时这些数据都不会改变。你是否还记得MsgRequestVerify消息格式，其中提到MSG_STX =
161;，而十进制的161对应十六进制的a1。a1是数据包的第一个字节，对应的应该是消息的“header（头部）”字段。现在，我们又从数据包中解码出了一部分内容：
MsgRequestVerify中还提到MSG_CMD = 5，这代表的是命令ID：
剩下的静态数据同样也可以在MsgRequestVerify类中找到对应的定义代码：con1 = 120（十六进制为78）以及con2 =
-102（十六进制为9a）。现在，我们已经可以解码整段数据包：
接下来，我就不带你具体分析源码了，可以告诉你的是，应用程序收到设备返回的响应数据包时，会使用简单的CRC算法来校验这个数据包：
    public boolean isSuccessFirstVerify()
    {
      return getFirstRandomDataCRC().equals(getFirstReceiverPayloadString());
    }
移动应用会根据这个响应包（mFirstReceiver）计算第二个挑战数据包：
    public void genSecondSendPayload()
    {
      for (int i = 0;; i++)
      {
        if (i >= 6) {
          return;
        }
        byte[] arrayOfByte = new byte[6];
        arrayOfByte[0] = mFirstReceiverMacData[i];
        arrayOfByte[1] = mFirstReceiverPayload[1];
        arrayOfByte[2] = mFirstReceiverPayload[3];
        arrayOfByte[3] = mFirstReceiverPayload[5];
        arrayOfByte[4] = mFirstReceiverPayload[7];
        arrayOfByte[5] = mFirstReceiverPayload[9];
        int[] arrayOfInt = strToToHexByte(CRC16Util.getHex(arrayOfByte));
        mSecondSendPayload[(i * 2)] = ((byte)arrayOfInt[0]);
        mSecondSendPayload[(1 + i * 2)] = ((byte)arrayOfInt[1]);
      }
    }
事实证明，对于我们测试的这个智能锁而言，“挑战-响应”过程中交换的数据并不依赖于与特定设备有关的密码，而是使用硬编码形式的静态密码“SUPER_PASSWORD”。这个字符串可以适用于所有设备。如果这是设备使用的唯一“认证”方式，显然会导致非常严重的问题。但我们已经知道，实际上设备会在随后的命令中发送明文密码。我们不知道为什么这款设备会使用握手机制，可能只是将其当成必要的“识别”过程（用来判断我们是否与正确的设备通信），但这个过程绝对与“认证”无关。  
接下来，我们可以分析其他命令，应用程序在初始化握手过程后会通过BLE将这些命令发往设备。
**5.2 分析协议命令**
进一步分析源代码，你可以看到“message”子目录：
其中，“MsgRequestLockInfo”经过反编译后结果如下：
    public class MsgRequestLockInfo
      extends CommMessage
    {
      public static final int MSG_CMD = 6;
      public static final int MSG_LENGTH = 8;
      public static final int MSG_STX = 161;
      (...)
我们可以再次在GATTacker拦截到的数据包中比对这个信息：  
我们已经知道，这段数据包的核心部分为十六进制编码的密码（666666字符串的十六进制ascii编码对应363636363636）：
其中，你应该能够识别MSG_STX（头）以及MSG_CMD（命令ID）字段：
还记得解锁过程中发送的那条命令吗？那条命令的尾部为“01”而不是“06”。看一下MsgRequestOpenLock类的源码，你可以知道为什么会出现这个区别。
    public static final int MSG_CMD = 1;
    public static final int MSG_LENGTH = 8;
    public static final int MSG_STX = 161;
恭喜你，你已经成功逆向出这个私有协议。现在，还有什么信息可以继续挖掘吗？  
**5.3 发起“Cancer（癌症）”攻击**
我们仍然在寻找不需要提前嗅探数据包的攻击方法。
还是回到SUPER_PASSWORD这一点。我们知道初始握手（识别）过程中会用到这串数字。那么其他命令呢？如果我们在OpenLock命令中直接使用SUPER_PASSWORD，而不使用当前密码，会出现什么情况？为此，我们修改了导出文件，在初始握手包之后，写入a1
373431363839 01（即“头部+SUPER_PASSWORD+OpenLock命令ID”），然后重放这段数据：
    2017.10.24 10:50:54.531 |  R | ffe0 | fff1 | a20500f0c77f162e8bd21110841e641e641480 (       .      d d  )
    2017.10.24 10:50:54.980 |  R | ffe0 | fff1 | a20900 (   )
    2017.10.24 10:50:55.610 |  R | ffe0 | fff1 | a20500f0c77f162e8bd21110841e641e641480 (       .      d d  )
    2017.10.24 10:50:54.980 |  R | ffe0 | fff1 | a20900 (   )
    2017.10.24 10:50:55.610 | < C | ffe0 | fff1 | a137343136383908 
    2017.10.24 10:50:55.610 | < C | ffe0 | fff1 | a131323334353601
这里我们再解释一下攻击过程：  
现在，攻击脚本首先会重置密码，然后自动开锁：
当然，你也可以使用nRF
Connect移动应用来执行这种攻击，我们已经在“重放攻击”那部分内容中介绍过具体操作过程。我已经为你准备了转换好的[XML宏文件](https://smartlockpicking.com/img/2017/10/smartlock_reset_unlock.xml)，你可以直接导入这个文件，下次如果你碰到这种智能锁，你可以使用自己的移动手机，打开这个应用，点击“播放”按钮，运行这个宏，就可以解锁了：
最后谈一下“cancer（癌症）”方面的事情。一旦密码被重置，默认的密码与手机中保存的密码不一致，应用程序会向合法用户打招呼，弹出如下错误对话框：
**六、总结**
在本文中，我们介绍了分析BLE设备的几个步骤：从拦截通信数据包开始，到重放攻击、私有协议逆向分析，最后找到了这个协议中存在的一个严重漏洞。当然，这些内容并没全部覆盖所有可能的攻击场景以及设备评估检查场景。未来我会在这个[教程](https://smartlockpicking.com/categories/tutorial)中带来更多内容。
你可能会好奇，为什么一个设备中会包含这么多安全漏洞？好吧，请注意这句话：智能门锁（包括本文的实验对象）其实比大多数BLE设备更加安全。其他许多设备，比如BLE羞羞玩具、灯泡或者传感器等，通常没有实现任何安全机制，甚至没有使用简单的静态明文密码用于身份认证。因此，“攻击者”可以使用原版应用程序，连接附近的设备，然后就可以直接使用这个设备。或者，攻击者可以拦截通信数据，使用各种工具或者一个智能手机来篡改、模糊测试或者重放通信数据。根据设备的不同，攻击可能导致的安全风险也会有所不同。
我非常鼓励你探索附近BLE设备的安全性，你可能会得到让你大吃一惊的结果。你也可以看一下我的蓝牙脆弱性开源项目：[BLE
HackmeLock](https://smartlockpicking.com/hackmelock)。你可以在Linux主机或者虚拟机上，配合蓝牙4
USB适配器或者内置BLE适配器的树莓派3来运行这个项目。
**  
**
**七、演示视频**
在Android平台上，只需要在[nRF
Connect](https://play.google.com/store/apps/details?id=no.nordicsemi.android.mcp)应用中导入这个[宏文件](https://smartlockpicking.com/img/2017/10/smartlock_reset_unlock.xml)，连接到这个智能门锁，点击“播放”按钮即可完成攻击过程。不要忘了捂住耳朵，因为攻击过程会将门锁密码重置为“123456”，随后门锁会神奇地自动打开，同时发出非常刺耳的嘟嘟声：
[1](http://v.youku.com/v_show/id_XMzExMjkyNjk5Mg==.html)