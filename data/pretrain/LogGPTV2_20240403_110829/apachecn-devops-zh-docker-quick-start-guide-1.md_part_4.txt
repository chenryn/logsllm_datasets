```
# allow remote signed scripts to run
Set-ExecutionPolicy RemoteSigned
```
现在，您可以关闭管理员命令窗口，并打开一个普通用户的 PowerShell 命令窗口。要安装`DockerCompletion`模块，发出以下命令:
```
# install Docker completion
Install-Module DockerCompletion -Scope CurrentUser
```
最后，要激活当前 PowerShell 窗口中的模块，请使用以下命令:
```
# enable Docker completion
Import-Module DockerCompletion
```
现在，您可以对所有 Docker 命令使用命令完成功能。这是一个伟大的击键保护程序！
Note that the Import-Module command is only active in the current PowerShell command window. If you want to have it available to all future PowerShell sessions, you will need to add the `Import-Module DockerCompletion` to your PowerShell profile. 
您可以使用以下命令轻松编辑您的 PowerShell 配置文件(或者创建一个新的配置文件，如果您还没有这样做的话):
```
# update your user profile to enable docker completion for every PowerShell command prompt
notepad $PROFILE
```
输入`Import-Module DockerCompletion`命令，保存配置文件。现在，您的 Docker 命令行完成功能将在以后的所有 PowerShell 会话中处于活动状态。
# 在 OS X 工作站上安装 Docker
近年来，Docker on Mac 的故事有了很大的发展，现在它是一个真正的、可用于您的 Mac 工作站的开发解决方案。Mac 的 Docker CE 需要 OS X El Capitan 10.11 或更高版本的 macOS。Docker CE 应用与 OS X 内置的虚拟机管理程序、网络和文件系统集成在一起。安装过程很简单:下载 Docker 安装程序映像并启动它。您可以从 Docker 商店下载安装程序映像。您必须登录 Docker 商店才能下载安装映像，因此，如果您还没有帐户，请在那里创建一个帐户。
Be sure to save your credentials securely as you will need them later.
在[https://store . Docker . com/editions/community/Docker-CE-desktop-Mac](https://store.docker.com/editions/community/docker-ce-desktop-mac)浏览到 Docker CE for Mac 的 Docker 商店页面。请记住，您必须登录 Docker 存储才能下载安装程序映像。
一旦登录到 Docker 商店，就可以点击“获取 Docker”按钮。请点击它开始下载。Mac 安装映像的 Docker CE 可能需要一些时间来下载。下载完成后，双击`Docker.dmg`镜像文件挂载并打开:
![](img/b5757407-1b67-4886-96a8-7857bf6cd463.png)
一旦苹果电脑的 Docker CE 镜像安装并打开，点击`Docker`图标并将其拖动到`Applications`图标上完成安装。将启动将`Docker`复制到`Applications`的操作。当复制过程完成时，Docker 应用将可以从您的`Applications`文件夹运行。双击您的`Docker`图标启动它。首次启动 Docker 将提醒您，您正在运行从互联网下载的应用，以确保您真的想要打开它。当 Docker 应用打开时，您将收到友好的欢迎 Docker 消息。
单击欢迎消息上的下一步将警告您 Docker 需要提升的权限才能运行，并将通知您必须提供凭据才能安装 Docker 的网络和应用链接。输入您的用户名和密码。Docker 应用将启动，在菜单通知区域添加一个鲸鱼图标。
还会提示您输入 Docker 商店凭据，以允许 Mac 的 Docker 登录到商店。输入您的凭证并点击`Log In`按钮。您将获得确认，显示您当前已登录。
为了验证我们的安装是否成功并确认我们安装的功能，我们将发出版本命令，然后运行 Docker 的 hello-world 容器:
```
# validate install and functionality docker --version
docker run hello-world
```
您的 macOS 工作站现已设置为创建 Docker 映像和运行 Docker 容器。您已经准备好将您的应用容器化了！您可以轻松地使用终端窗口完成所有 Docker 工作，但您可能会对 Mac 可用的图形用户界面工具感兴趣，该工具名为 **Kitematic** 。接下来让我们安装 Kitematic。
# 您可能需要考虑的安装后步骤
以下是我为您的 Docker OS X 工作站推荐的几个安装后步骤。
# 安装 Kitematic
虽然您可以在您的 OS X 终端窗口中使用 Docker CLI，并且可能会在您的大部分 Docker 开发工作中使用它，但是您可以选择使用一个名为 Kitematic 的图形用户界面工具。要安装 Kitematic，右键单击 OS X 菜单-通知区域中的鲸鱼图标，打开 Mac Docker 菜单。单击 Kitematic 菜单选项下载(稍后运行)Kitematic 应用。如果你还没有安装 Kitematic，当你点击它的 Docker for Mac 菜单时，你会看到一条包含下载链接的消息。该消息还提醒您必须将 Kitematic 安装到您的`Applications`文件夹中，以启用 Docker 菜单集成。单击此处链接下载 Kitematic 应用:
![](img/dbf3a805-51e9-448a-9656-e50c242ad008.png)
下载完成后，按照前面的指示，将下载的应用移动到您的`Applications`文件夹中。然后，使用 Docker for Mac 菜单，再次单击 Kitematic 菜单选项。这次它将运行 Kitematic 应用。第一次运行应用时，您会收到标准警告，提示您正在运行从互联网下载的东西，询问您是否真的要打开它。单击打开按钮进行操作。
将 Kitematic 安装在 Mac 工作站上后，您可以在菜单栏通知区域中单击 Docker whale 图标，然后再次选择 Kitematic 选项。
系统将提示您输入 Docker 凭据，以便将 Kitematic 连接到 Docker 集线器。你可以跳过这一步，但我建议你现在就登录。登录后(或跳过登录步骤)，您将看到 Kitematic 用户界面。这允许您在工作站上下载和运行 Docker 容器。继续尝试一个，比如 *hello-world-nginx* 容器，或者如果你想玩游戏，试试《我的世界》容器。
恭喜你！您现在可以使用 Docker 命令行界面和 Kitematic 图形用户界面来运行您的 Docker 容器和管理您的 Docker 映像。但是，您将使用 OS X 终端和您最喜欢的代码编辑器来创建 Docker 映像。
# 安装 Docker 命令行完成
安装自制程序。你可能(可能)已经在你的苹果电脑上安装了自制程序，但是如果没有，你应该现在就安装。下面是安装它的命令:
```
# install homebrew
/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
```
接下来，使用自制程序安装`bash-completion`。下面是命令:
```
# use homebrew to install bash completion 
brew install bash-completion
```
`bash-completion`的安装将指示您将以下行添加到您的`~/.bash_profile`文件中:
```
# update the bash profile to enable bash completion for every terminal session 
[ -f /usr/local/etc/bash_completion ] && . /usr/local/etc/bash_completion
```
现在，创建启用 Docker 命令行完成功能所需的链接。每个 Docker 工具集都有一个链接。下面是 bash 的链接命令(如果使用`zsh`，请检查链接命令的下一个代码块):
```
# create links for bash shell
ln -s /Applications/Docker.app/Contents/Resources/etc/docker.bash-completion $(brew --prefix)/etc/bash_completion.d/docker
ln -s /Applications/Docker.app/Contents/Resources/etc/docker-machine.bash-completion $(brew --prefix)/etc/bash_completion.d/docker-machine
ln -s /Applications/Docker.app/Contents/Resources/etc/docker-compose.bash-completion $(brew --prefix)/etc/bash_completion.d/docker-compose
```
请注意，如果您使用的是`zsh`而不是 bash，则链接命令是不同的。以下是`zsh`的链接命令:
```
# create links for zsh shell
ln -s /Applications/Docker.app/Contents/Resources/etc/docker.zsh-completion /usr/local/share/zsh/site-functions/_docker
ln -s /Applications/Docker.app/Contents/Resources/etc/docker-machine.zsh-completion /usr/local/share/zsh/site-functions/_docker-machine
ln -s /Applications/Docker.app/Contents/Resources/etc/docker-compose.zsh-completion /usr/local/share/zsh/site-functions/_docker-compose
```
最后，重新启动您的终端会话—您现在可以使用 Docker 命令完成了！通过键入`docker`并按两次*选项卡*键来尝试。
# 参考
*   Docker 企业版数据:[https://www.docker.com/enterprise-edition](https://www.docker.com/enterprise-edition)
*   Docker 社区版数据:[https://www.docker.com/community-edition](https://www.docker.com/community-edition)
*   下载 dock ce for centos:https://store . docker . com/versions/community/docker-ce-server-centes
*   下载 Ubuntu ce Docker:https://store . docker . com/versions/community/docker-ce-server-Ubuntu
*   下载 dock ce for windows:t1]https://store . docker . com/versions/community/docker-ce-desktop-windows
*   下载 Mac 的 ce dock:t1]https://store . docker . com/versions/community/docker-ce-desktop MAC
*   CentOS 的 Docker CE Stable RPM 下载站点:[https://download . Docker . com/Linux/CentOS/7/x86 _ 64/Stable/Packages](https://download.docker.com/linux/centos/7/x86_64/stable/Packages)
*   Docker 安装报告:[https://github.com/docker/docker-install](https://github.com/docker/docker-install)
*   the docker ce deb package download site for Ubuntu:t1]https://download . docker . com/Linux/Ubuntu/dists/
*   在 Windows 上运行 Windows Docker 容器:[https://blog . Docker . com/2016/09/build-your-first-Docker-Windows-server-container/](https://blog.docker.com/2016/09/build-your-first-docker-windows-server-container/)
*   PowerShell 的完成日期:[https://github.com/matt9ucci/DockerCompletion](https://github.com/matt9ucci/DockerCompletion)
*   ce docker for MAC:https://store . docker . com/versions/community/docker-ce-desktop MAC
*   Mac 的命令行完成:[https://docs . docker . com/docker-for-Mac/# install-shell-completion](https://docs.docker.com/docker-for-mac/#install-shell-completion)
*   在你的苹果电脑上安装自制软件:https://brew.sh/
# 操作系统之间需要注意哪些差异
根据设计，Docker 映像是独立的包，包含运行应用所需的一切。Docker 的一大优势是 Docker 映像几乎可以在任何操作系统上运行。也就是说，在不同的操作系统上运行 Docker 映像的体验存在一些差异。Docker 是在 Linux 上创建的，并与一些关键的 Linux 构造深度集成。因此，正如您所料，当您在 Linux 上运行 Docker 时，一切都与操作系统直接无缝集成。Docker 原生地利用了 Linux 内核和文件系统。
不幸的是，当你运行 Docker for Windows 或 Docker for Mac 时，Docker 不能利用它在 Linux 上固有的相同结构，因为它们不存在于这些其他操作系统上。Docker 通过在虚拟机管理程序中为非 Linux 操作系统创建一个小型、高效的 Linux 虚拟机来处理这个问题。借助于 Windows Docker，这个 Linux 虚拟机是在 Hyper-V 中创建的。在 macOS 上，该虚拟机是在一个名为 **hyperkit** 的定制虚拟机管理程序中创建的。
如您所料，助手虚拟机会带来性能开销。但是，如果您确实将 Windows 或 OS X 用于您的开发工作站，您会很高兴知道 Docker 在这两个平台上都取得了许多积极的进展，随着每个新的主要版本的发布，降低了开销并显著提高了性能。有很多关于 OS X hyperkit 虚拟机管理程序的高 CPU 利用率的报告，但我个人没有遇到过这个问题。有了目前稳定的 Docker CE 版本，相信 Windows 和 OS X 都可以成功用于 Docker 开发。
尽管如此，除了处理性能之外，还有其他差异需要考虑。您应该注意两个方面:文件装载和端点。
Linux 操作系统上的 Docker CE 能够直接使用文件系统在运行的容器中装载文件，这提供了本机磁盘性能级别。您还可以更改用于实现不同性能级别的文件系统驱动程序。这不适用于 Windows 上的 Docker 或 Mac 上的 Docker。对于 Windows 和 OS X，还有一个额外的文件系统工具来处理文件装载。在 Windows 上，您将使用 Windows 共享文件，而在 OS X，它是 **osxfs** 。不幸的是，对于 Windows 和 OS X 用户来说，文件装载的性能损失是巨大的。尽管 Docker 在改进 Windows 和 OS X 版本 17 及更高版本的文件装载方面取得了长足的进步，但与在 Linux 操作系统上运行相比，这两个版本仍然明显较慢。特别是对于 Windows，文件装载选项非常严格。如果您正在开发一个磁盘利用率很高的应用，这种差异可能足以让您立即考虑切换到 Linux 开发工作站。
Linux 上的 Docker 和 Windows 上的 Docker 或 Mac 上的 Docker 的另一个不同之处是端点端口的利用率。Windows 的 Docker 就是一个例子；您不能使用 localhost 从容器的主机访问容器的端点。这是一个已知的错误，但是唯一的解决方法是从不同于运行它们的主机访问容器的端点。使用 Docker for Mac，还存在其他端点限制，例如无法 ping 通容器(因为 Docker for Mac 无法将 ping 流量路由到容器或从容器路由出)，并且您不能拥有每个容器的 IP 寻址(因为无法从 macOS 到达 Docker 桥网络)。
这些限制中的任何一个都足以让您考虑将您的开发工作站切换到 Ubuntu 或 CentOS 操作系统。这是给我的，你会发现这本书里的大多数例子都会在我的 Ubuntu 工作站上执行。如果您使用的是 Windows 或 OS X，我将尝试指出任何可能有显著不同的领域。
# 摘要
哇哦！我们在第一章中讲了很多。您现在应该能够在您的工作站上安装 Docker，而不管它运行的是什么操作系统。您应该能够使用三种不同的方法将 Docker 安装到 Linux 工作站上，并且知道在基于 RPM 的系统和基于 DEB 的系统上安装之间的一些区别。
我们还介绍了一些非常重要的原因，为什么您可能会考虑使用 Linux 工作站进行开发，而不是使用 Windows 或 macOS 工作站。到目前为止，您应该能够通过检查安装的 Docker 版本来轻松验证 Docker 的成功安装。
通过运行 hello-world 容器，您应该能够轻松地确认 Docker 正在按预期工作。对你的第一章来说还不错，对吧？好了，有了这个基础，以及您新准备好的 Docker 工作站，让我们直接进入[第 2 章](2.html)、*学习 Docker 命令*，在这里我们将了解您每天都会使用的许多 Docker 命令。
# 参考
*   Windows 限制的 docker:[https://docs . docker . com/docker-for-Windows/疑难解答/#限制-Windows-containers-for-localhost-and-published-port](https://docs.docker.com/docker-for-windows/troubleshoot/#limitations-of-windows-containers-for-localhost-and-published-ports)
*   Mac 限制的 docker:[https://docs . docker . com/v 17.09/docker-for-Mac/networking/#已知限制-用例和变通办法](https://docs.docker.com/v17.09/docker-for-mac/networking/#known-limitations-use-cases-and-workarounds)