# Unfucking Forensics: A Comprehensive Guide

## Speaker
- **K2 / Director @ IOACTIVE**
- **GitHub**: [https://github.com/K2](https://github.com/K2)

## About Me
- Hacker with extensive experience.
- Creator of inVtero.net, a memory analysis framework for Windows.
- Features include:
  - Super-fast GBPS throughput.
  - Memory integrity checking for VMs, crash dumps, and memory.
  - Type-aware memory hacking tool.
  - EhTrace, a binary trace tool using hook/patch-less techniques for in-process debugging.
  - Various other tools and projects.

## Outline
1. **Forensic Fundamentals and Anti-Forensic Techniques**
   - How to conduct forensics, how to disrupt it, and how to recover from such disruptions.
   - Intx80 AF technique on header wipe, non-resident code, and trim().
   - Strategies to handle these issues.

2. **Return-Oriented Programming (RoP) Background**
   - RoP in the context of attacks.
   - Gargoyle backdoors and protection against them.

3. **CloudLeech and DMA Attacks**
   - CloudLeech: A twist on Ulf Frisk's DMA attacks and PCILeech.
   - Demonstration of an open-source memory integrity platform for Windows.

4. **Forensic Capabilities and Artifact Sources**
   - Determining what happened and creating a timeline of known events.
   - Using disk and memory artifacts (often incomplete or fragmented) to build a timeline.
   - Evaluating the reliability of artifact sources.
   - Utilizing timestamps from various sources (event logs, syslog, firewall, filesystem time, etc.).
   - Tools like Wevtutil for configuring more than 1189 event log sources.
   - SysMon from SysInternals/Mark Russinovich for enhanced logging.
   - Linux tools like osquery for system monitoring.

5. **Memory Handling in Forensics**
   - Intersection of forensics and reverse engineering.
   - Dumping and disassembling to determine the extent of an attacker's capabilities.
   - Clearing out the attacker and assessing the damage.
   - Tools like Volatility/Rekall for Python-based forensic engines.
   - Stephen Ridley’s RE memory hacking tool: [SandKit](https://github.com/s7ephen/SandKit)
   - Paper: "Escaping the Sandbox"
   - Game hacking techniques and how people cheat.

6. **Anti-Forensic Techniques**
   - Hiding and destroying logs, leaving no trace, steganography, encryption.
   - Misdirection, flooding, obfuscation, spoofing, and direct backdoors.
   - Reference: DefCon 15 - Breaking Forensics: Socware: Weaknesses in Critical Evidence Collection by Chris Palmer and Alex Stamos.
   - Antiforensics: Furthering digital forensic science through a new extended, granular taxonomy.

7. **Foreshadowing: Normalizing Operations**
   - Operating undetected by ensuring you are not an anomaly.
   - Using the target's resources for operations.
   - Configuration backdoors.
   - Enabling IPv6 tunneling and VPN access.
   - Attacker having trusted CA capability.
   - Making methods as normal as possible to evade detection.

8. **Intx80’s AF Counter**
   - Backdoor against Rekall to prevent dumping.
   - Techniques to achieve this:
     - Use VAD (kernel source).
     - Use PageTable (ABI).
     - Use inVtero.net.
     - dump.py for VADDump (VAD) or Dump (PageTable).

9. **RoP: More Normal**
   - RoP is a widely discussed topic, primarily used for exploitation.
   - RoP uses CPU stack semantics to execute a large set of return statements.
   - This approach leverages existing code, making it more normalized than injecting an executable payload.
   - Example: Gargoyle (Josh Lospinoso) uses RoP for persistence that evades memory analysis systems.
   - Detection: Call chain evaluation can help detect RoP attacks.

10. **RoP is Not Perfect**
    - Reference: [Thesis by Vasileios Pappas](https://www.cs.columbia.edu/~angelos/Papers/theses/vpappas_thesis.pdf)

11. **Gargoyle Persistence**
    - Uses a timer and blocking wait to move into the active state.
    - Once active, stages page protection.
    - Invokes primary payload using the protected page.
    - Masks the X bit and goes inactive.

12. **Tools to Defend Against RoP Attacks**
    - Analysis: ROPEMU: A Framework for the Analysis of Complex Code-Reuse Attacks.
    - Dumping complex RoP execution traces into an ELF file.
    - Detection: inVtero.net for stack checking against memory dumps.
    - Other tools for monitoring RoP at runtime (EhTrace, RoPGuard, etc.).
    - Avoiding Gargoyle gadgets or stack pivots in inVtero output.

13. **Injection Techniques**
    - Various methods to achieve the same goal.
    - 10 Process Injection Techniques (Ashkan Hosseini/Endgame).
    - Examples: LoadLibrary, Hollowing, Thread hijacking, Windows Hooks, Registry keys, APC, SetWindowLong, Shims & IAT shims.
    - Flame: A type of hollowing attack that remained undetected for years by hiding inside ntdll.

14. **DMA with PCILeech**
    - Ulf Frisk's Direct-Memory-Attack-the-Kernel.
    - PCILeech for forensic (memory) collection.
    - Uses various techniques to execute payloads.
    - Simplest method: "unlock" functionality.
    - Hard to detect without manual reversing.

15. **Integrity Validation**
    - Full validation at any point in time.
    - System state should be static.
    - CPU execution can allow attackers to evade reads.
    - RDMA, LiveMigration, and Snapshotting.

16. **Tie It Together: Unfucking Memory Forensics**
    - Remove guesswork by leveraging a wide range of information sources.
    - Have a comprehensive global view of the data set.
    - Appropriate countermeasures for most attackers (e.g., RoP).
    - Integrity checking of memory (inline patch protection).
    - Symbols and context for pointer analysis.
    - Pointer tracking for significant address/vector qualification.

## Demos and Thank You
- Check out the tools: [GitHub.com/K2](https://github.com/K2)

Thank you for your attention!