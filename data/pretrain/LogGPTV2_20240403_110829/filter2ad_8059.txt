# 使用Apple开发工具创建自签名macOS应用程序并插入自定义后门
##### 译文声明
本文为翻译文章，原文作者为Adam Toscher，来源：medium.com。
译文仅供参考，具体内容及含义请以原文为准。

## 前言
本文将介绍如何将Empire payload嵌入可信的PKG安装程序中，并使用苹果官方开发工具来帮助完成任务并绕过Gatekeeper。在红队操作中，你可能需要创建一个看似真实的安装程序来进行鱼叉式网络钓鱼（Spear Phishing），该程序不仅模拟真实软件，还能成功安装有效应用程序以避免引起怀疑。

## 了解开发者证书
macOS Developer ID Installer证书用于对PKG文件进行签名，从而帮助绕过Gatekeeper。理论上，只需一个正确签名的PKG文件即可绕过Gatekeeper。然而，通过命令行查找并使用正确的证书可能会很麻烦且耗时。下图中的蓝色文本说明了在签署你的后门应用程序时应使用的正确MacOS “Developer ID Installer”证书。

![MacOS Developer ID Installer](https://p2.ssl.qhimg.com/t019fb305366c4ac67c.png)

第三方开发人员证书信息不可见。

## Empire
Empire GitHub地址：[链接]

以下摘录解释了PKG安装程序结构以及如何用Empire创建payload：

> PKG文件是OSX安装包，可用于部署新应用程序或更新。要了解包目录结构，请参阅[这里](http://s.sudre.free.fr/Stuff/Ivanhoe/FLAT.html)。在三种包文件结构中，带有安装文件的包最适合我们的目的。PKG安装程序的内容包括Payload、Scripts、Bom (Bill-Of-Materials/材料清单) 和PkgInfo文件。Payload文件是一个cpio压缩文件，包含希望复制到文件系统的文件/应用程序。脚本文件也是一个cpio压缩文件，包含安装前或安装后的bash脚本。安装前脚本在安装过程开始时执行，而安装后脚本则在安装过程结束时执行。Bom文件详细说明了包的内容。为了武器化，我们最好使用Empire应用程序包作为payload，并让安装后脚本执行应用程序。但是，我们可以将Empire启动程序存储在安装后脚本中，并将应用程序用作诱饵，从而将其混在一起。[这里](http://bomutils.dyndns.org/tutorial.html)有一个很好的教程，可以在Linux上为OSX创建包安装程序。Empire将这一整个过程自动化了！让我们简要回顾一下stager选项。

资料地址：[链接]

## 将PackageMaker应用于后门应用程序
PackageMaker允许“受信任的”Apple开发人员将两个PKG安装程序合并到一个文件中，或将.app和PKG安装程序文件合并到一个统一的、签名的Mac OS PKG文件中。我们可以添加我们的Payload，改进安装程序的外观和感觉，并使用GUI完成大部分繁重的工作。

下面的示例仅用于演示目的。我们将解压一个合法的1Password PKG安装程序，并通过Empire payload将其作为后门：

```sh
pkgutil --expand 1Password-7.0.4.pkg 1Password-expanded/
pushd 1Password-expanded/
ls
tar xvf Payload | cpio -id
```

解压后，你会看到类似以下内容：

```sh
x ./1Password 7.app/Contents/Frameworks/OnePasswordUI.framework/Versions/A/Resources/Info.plist
x ./1Password 7.app/Contents/Frameworks/OnePasswordUI.framework/Versions/A/Modules
x ./1Password 7.app/Contents/Frameworks/OnePasswordUI.framework/Versions/A/Modules/OnePasswordUI.swiftmodule
x ./1Password 7.app/Contents/Frameworks/OnePasswordUI.framework/Versions/A/Modules/OnePasswordUI.swiftmodule/x86_64.swiftdoc
x ./1Password 7.app/Contents/Frameworks/OnePasswordUI.framework/Versions/A/Modules/OnePasswordUI.swiftmodule/x86_64.swiftmodule
x ./1Password 7.app/Contents/Frameworks/OnePasswordUI.framework/Versions/A/Modules/module.modulemap
x ./1Password 7.app/Contents/Frameworks/OnePasswordUI.framework/Versions/Current
x ./1Password 7.app/Contents/Frameworks/OnePasswordUI.framework/Modules
x ./1Password 7.app/Contents/Frameworks/libswiftsimd.dylib
x ./1Password 7.app/Contents/Info.plist
x ./1Password 7.app/Contents/PkgInfo
```

现在，我们可以获取我们的1Password.app文件和Empire .pkg payload，并使用PackageMaker将它们合并，创建一个后门1Password安装程序，该安装程序可以绕过Gatekeeper，执行我们的payload并安装1Password。

![选择Developer ID Installer证书](https://p1.ssl.qhimg.com/t012bad6946cf92358c.png)
![未隐藏Payload](https://p1.ssl.qhimg.com/t01434d78a26f555ac7.png)
![隐藏包名称](https://p5.ssl.qhimg.com/t016f86c00b7ccfde70.png)
![Apple官方](https://p3.ssl.qhimg.com/t011a6bf56bab51cd98.png)

通过使用有效的开发者证书，使用Empire创建一个包，并用PackageMaker签署Payload，我们就可以绕过Gatekeeper，在不引起怀疑的情况下轻松弹出一个shell。接下来的步骤是[持久化](https://attack.mitre.org/wiki/MacOS_Techniques)和[后渗透](http://n00py/pOSt-eX%20pOSt-eX%E2%80%8A-%E2%80%8APost-exploitation%20scripts%20for%20OS%20X%20persistence%20and%20privescgithub.com)。祝你黑客行动愉快！

## 修复
在公司环境中，不允许在Mac上执行第三方开发人员程序，并且在执行下载的任何内容时，始终遵循最佳安全实践。像TaskExplorer这样的程序可以帮助确保所有安装的软件都是合法的。

![谨慎执行来自'已识别的开发人员'的应用程序](https://p0.ssl.qhimg.com/t011a08450909f20785.png)

## 更多工作
如上文所示，有可能滥用第三方开发人员证书机制本身使虚假应用程序看起来像是来自Apple而非合法的开发人员。将这两个攻击向量结合起来将使PKG文件与合法的Apple PKG安装程序无法区分。

## 参考
审核人：yiwang 编辑：边边