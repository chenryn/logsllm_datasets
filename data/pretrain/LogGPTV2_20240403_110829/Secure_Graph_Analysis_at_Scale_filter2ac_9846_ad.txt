Note that 𝑋1 ⊕ 𝑌1 is a shuffle of 𝑇 . We can directly confirm the
correctness of the protocol as ˜𝐴⊕ ˜𝐵 ⊕ ˜𝐶 = 𝑋3 ⊕ 𝑌3 = 𝜋23(𝑋2 ⊕ 𝑌2) =
𝜋23 ◦ 𝜋31(𝑋1 ⊕ 𝑌1) = 𝜋23 ◦ 𝜋31 ◦ 𝜋12(𝐴 ⊕ 𝐵 ⊕ 𝐶).
As for semi-honest security, examine the messages received
in the protocol: S2 receives 𝑋2 and ˜𝐶2, which are totally masked,
respectively, by 𝑍31 and ˜𝐴 which it does not know. S3 receives 𝑌1
and ˜𝐶1, which are totally masked, respectively, by 𝑍12 and ˜𝐵 which
it does not know. Therefore it is easy for these parties to simulate
the messages that they receive.
5.3 Semi-Honset Secure Sorting
Our approach for implementing a secure sort is based on ideas
from [26, 33]. In a first phase, the input rows/elements were ran-
domly shuffled. In the next phase, a comparison-based sorting pro-
tocol is applied to the shuffled table, and outputs a mapping which
moves the rows to a sorted order. This mapping is public, but reveals
no information about the order of items in the original input.
Functionality definition The input to this operation is a sharing
of a single table 𝑇 of 𝑛 rows, and a definition of a field 𝑐 inside each
row, that is used as a key. We assume that the input 𝑇 is the result
of applying a random shuffle to the original table. The output of the
sort protocol is a mapping from the indexes of rows in 𝑇 to their
location in a table 𝑇𝑂 that is sorted by the field 𝑐.
Session 2D: Secure Multiparty Computation CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea617Inputs We assume all keys to be different. If this is not the case then
this property can be ensured by adding log 𝑛 bits to the key field
𝑐, where in each entry the new field is equal to the original entry
concatenated with the row number. Since the keys are different,
any sort operation results in an output which is a stable sort.5
MPC sorting The MPC protocol can use any comparison-based
sorting algorithm, namely a sorting algorithm which decides on
the placement of the sorted items based only on the results of
comparisons of items. Examples of such sorting algorithms are
bubble sort and quicksort.
In the MPC setting, the comparisons can be implemented using
an MPC protocol which outputs the result of the comparison and
hides the values which are compared (namely, a protocol solving
the millionaires problem). Since we assume all keys to be different,
the comparisons can be implemented using either the “≤” or “<”
operations, which will be equivalent.
The comparison step only involves comparing the keys which
are used for sorting. This provides a substantial gain if the key field
is much shorter than the entire row.
A natural choice for the underlying comparison-based sort algo-
rithm is a variant of quicksort. The well-known quicksort algorithm
chooses a pivot item, which is ideally the median value, compares it
to all other items, and divides the set to two subsets which respec-
tively include the items which are smaller than, and the items which
are larger than, the pivot. The algorithm then continues recursively.
If the median value is chosen as the pivot then quicksort runs in
log 𝑛 steps, each with 𝑂(𝑛) comparisons. Computing the median
in MPC is rather complicated, and therefore we use a simplified
quicksort algorithm which chooses a random item and uses its key
as the pivot. (Since the input is already randomly shuffled, we can
simply choose the key of the first row.) This algorithm is expected
to run in 𝑂(log 𝑛) steps [16] and can be further improved, as is
described below.
To sum up, MPC sorting is implemented by the servers running a
quicksort algorithm, where each comparison is implemented using
an MPC protocol that outputs a single bit indicating which input is
larger.
Performance improvements Our implementation of the sort-
ing protocol makes use of the following optimizations, which are
further described in Appendix A.1:
• The implementation is multi-threaded and uses vectorization
for implementing multiple bit-operations in a single word.
• Instead of using the key of a random row as the pivot, the
implementation samples a small number of row keys and
chooses the pivot as the median among these values. The
result is expected to be closer to the median of all keys, and
thus reduce the number of rounds.
• The secure comparisons can be computed using a circuit
which is shallow (of depth log 𝑘 rather than depth 𝑘, for 𝑘
bit keys). On the other hand, this circuit has more gates than
5The requirement that the keys are unique is due to the fact that the servers learn the
results of the comparisons. The distribution of these results leaks information about
the number of keys which are equal to each other, and therefore we require that all
keys are always unique. (To demonstrate this, observe that if all keys are different
and randomly shuffled then in expectation in half of the comparisons the first item is
smaller. On the other hand, if all keys are equal then all comparisons output the same
result even if the keys are randomly shuffled.)
the circuit of depth 𝑘. The implementation seeks to choose
the best tradeoff of using these two circuits.
• Naive quicksort continues the recursion until the set contains
a single item. It is preferable to stop the recursion when the
set is reduced to a size 𝑠 that is smaller than some threshold,
2(cid:1) comparisons to sort the items in this set.
and then run(cid:0)𝑠
Security against semi-honest adversaries A security proof in
the semi-honest setting appears in [26] and is based on the fact that
the input to the protocol is a random permutation of different keys.
In short, the view of a server in the sort protocol can be simulated
in the following way: (1) Set random shares as the output of the
shuffle step. (2) Choose a random permutation of the values [1, 𝑛]
and associate them as the (virtual) keys to the rows of the table
that is output by the shuffle step. (3) Run the quicksort algorithm
implemented by the protocol, where in any comparison of two rows
you output the result of comparing the corresponding virtual keys.
6 FULL SECURITY
6.1 Set-Equality Verification
The set equality procedure is needed in order to verify that the
input and output sets of a shuffle protocol, which we will denote
as 𝑇 and 𝑇 ′, are equal. The procedure runs a protocol whose input
consists of (shares of) a table. The protocol computes a hash of the
table, which must satisfy the following two requirements:
• If two tables 𝑇 ,𝑇 ′ have the same sets of rows (namely, the
rows of 𝑇 ′ are a permutation of the rows of 𝑇 ) then the
protocol has equal outputs on inputs 𝑇 ,𝑇 ′.
• If two tables 𝑇 ,𝑇 ′ have different sets of rows then the outputs
of the protocol on inputs 𝑇 ,𝑇 ′ are different whp.
In order to run the full set-equality protocol it is insufficient
to only run a verification that the input and output of the shuffle
protocol are equal. It is also needed to ensure that any attempt to
change the run of the protocol is detected with an overwhelming
probability. If this is not the case then, for example, an adversary
that knows that there exist two records which differ only in their
least significant bit might attempt to guess the locations of these
two records and change the messages it sends in the protocol so that
the least significant bits of these two records are flipped. The output
table of the protocol has the same set of rows/records as the input
table if and only if this guess was correct (which is an event that
2(cid:1)). The result of the set-equality test
happens with probability 1/(cid:0)𝑛
therefore leaks information to the adversary. The full analysis of
the set-equality protocol, which is presented in Appendix C, shows
that it can detect any such attempted change with an overwhelming
probability.
The basic unit of the set-equality protocol works by choosing
random subsets of rows and columns. These subsets essentially
define a generalized rectangle inside the table. The protocol verifies
that the exclusive-or of all bits in this subset of the table has the
same value in 𝑇 and 𝑇 ′, i.e. before and after the shuffle protocol.
This check is repeated multiple times. There are two technical
challenges: ensuring that the same subset of rows is chosen both
in 𝑇 and in 𝑇 ′ (even though the shuffle changes the location of the
rows), and ensuring that any change of data, even in rows which
differ by a single bit, is detected with high probability.
Session 2D: Secure Multiparty Computation CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea618The protocol works by extending each row of 𝑇 , before the
shuffle, with a random and secret suffix of 𝜅 random bits (where 𝜅
depends on a statistical security parameter). The protocol runs 𝜅
tests. In each test a different column of the row extension chooses a
subset of the rows. The servers also choose a random subset, which
can be public, of the columns (of both the original and extension
columns), and compute the exclusive-or of all bits in the generalized
rectangle defined by these choices of rows and columns.
The 𝜅 added bits serve two purposes. First, the decision whether
a row is chosen for the sum depends on the bits which are appended
to it. These bits are part of the row and are therefore moved with it
during the shuffle. Consequently, the decision whether to choose a
row is independent of its location (which changes in the shuffle),
and is the same in 𝑇 and in 𝑇 ′. In addition, the added bits ensure
that each pair of rows is likely to differ in many locations: Each row
contains 𝜅 random bits and as a result the probability of flipping
bits in one row and obtaining the other row is at most 2−𝜅.
Notation We use the following notation. Let the original matrix 𝑇
be of size 𝑛 × 𝑚, and let 𝜅 be a statistical security parameter. Each
row in 𝑇 is extended by 𝜅 random bits. Let the original bits of a
row be 𝑑𝑖,1, . . . , 𝑑𝑖,𝑚, and the 𝜅 added random bits be 𝑟𝑖,1, . . . , 𝑟𝑖,𝜅.
In the same manner, the rows in 𝑇 ′, which is a row permutation
of 𝑇 , are of the form 𝑑′
𝑖,1, . . . , 𝑑′
𝑖,𝑗 = 𝑑𝜋 (𝑖),𝑗
and 𝑟′
𝑖,𝑗 = 𝑟𝜋 (𝑖),𝑗 for some permutation 𝜋. Denote the width of the
extended rows as 𝑚′ = 𝑚 + 𝜅.
A toy test with a single column Let us assume first that 𝜅 = 1.
The test works as follows: After the shuffle protocol, the parties
choose random and public bits 𝑐1, . . . , 𝑐𝑚′, and compare
𝑖,𝜅, where 𝑑′
𝑖,1 . . . , 𝑟′
𝑖,𝑚, 𝑟′
𝑛∑︁
𝑖=1
𝑟𝑖,1 · 𝑚′∑︁
𝑗=1
𝑑𝑖,𝑗𝑐 𝑗
to
𝑛∑︁
𝑖=1
𝑖,1 · 𝑚′∑︁
𝑟′
𝑗=1
𝑑′
𝑖,𝑗𝑐 𝑗 .
In other words, denote 𝑐1, . . . , 𝑐𝑚′ as the 𝐶 vector. This vector de-
fines a subset of the columns. Denote 𝑟1,1, . . . , 𝑟𝑛,1 as the 𝑅 vec-
tor. This vector defines a subset of the rows. The test compares
the exclusive-or of the values in the intersection of the rows and
columns defined by these vectors in 𝑇 and 𝑇 ′.
Another way to look at the test is that it first reduces each row to
a single bit which is the result of the inner product of the row with
the 𝐶 vector. This gives an 𝑛-bit vector of one bit per row. Denote
it as the “row-hash vector”. The test computes the inner product
of the row-hash vector with the 𝑅 vector. (In the protocol, the 𝐶
vector is public, and therefore the reduction of the matrix to the
𝑛-bit row-hash vector can be independently done by each server
without interaction with other servers.)
The set equality protocol The full set equality protocol repeats
the single column protocol 𝜅 times. The input to the protocol is
a binary table 𝑇 with 𝑛 rows and 𝑚 columns. The protocol sets a
parameter 𝜅 (number of random additional random columns), for
example 𝜅 = 48 (which is the value we use in our experiments).
The protocol works in the following way, where all MPC protocols
used within it are implemented with full security against malicious
behavior:
(1) All servers are given [𝑇].
(2) All servers randomly generate shares [𝑅𝑖,ℓ] of random
bits 𝑅𝑖,ℓ for 𝑖 = 1, . . . , 𝑛 and ℓ = 1, . . . , 𝜅 such that no
server knows these values.
(3) We use the following notation. Let 𝑚′ = 𝑚 + 𝜅. An 𝑛 × 𝑚′
bit table ¯𝑇 is defined by setting [ ¯𝑇𝑖,𝑗] to be [𝑇𝑖,𝑗] for 𝑗 =
1, . . . , 𝑚 and to be equal to [𝑅𝑖,𝑗−𝑚] for 𝑗 = 𝑚+1, . . . , 𝑚+𝜅.
(4) All servers run a semi-honest secure (partial) shuffle gen-
erating [ ¯𝑇 ′
𝑖,𝑗] = [ ¯𝑇𝜋 (𝑖),𝑗] for a permutation 𝜋 : [1, 𝑛] →
[1, 𝑛]. (This is formally not part of the set equality pro-
tocol, but rather a shuffle, where the equality-check is
applied to the input and output of this shuffle.)
(5) All servers generate together random bits 𝐶 𝑗,ℓ for 𝑗 =
1, . . . , 𝑚′ and ℓ = 1, . . . , 𝜅. (These bits are made public,
and will be interpreted as 𝜅 vectors of length 𝑚′.)
(6) For ℓ = 1, . . . , 𝜅, all servers engage in secure MPC of the
following function: The bits 𝐶 𝑗,ℓ for 𝑗 = 1, . . . , 𝑚′ define
an 𝑚′-bit vector. For each row, compute the inner product
of this vector with the row, and multiply the resulting bit
by the bit in location 𝑚 + ℓ in the row. Finally, for each of
the two tables compute the sum modulo 2 of the results
of all rows, and subtract the two results. In other words,
the following computation is implemented (modulo 2):
𝑛∑︁
𝑖,𝑚+ℓ] · 𝑚′∑︁
[𝑉ℓ] =
𝑖,𝑗] − 𝑛∑︁
[ ¯𝑇𝑖,𝑚+ℓ] · 𝑚′∑︁
𝑖=1
𝑗=1
[ ¯𝑇 ′
𝐶 𝑗,ℓ · [ ¯𝑇 ′
𝐶 𝑗,ℓ · [ ¯𝑇𝑖,𝑗]
𝑖=1
Note that if 𝑇 ′ is a permutation of 𝑇 then 𝑉ℓ = 0. If 𝑇 ′ ≠ 𝑇
then 𝑉ℓ ≠ 0 with probability that is analyzed in Claim 6.
With regards to efficiently, since the 𝐶 𝑗,ℓ values are public,
the computation itself is very efficient: in each of the 𝜅
rounds it involves only 2𝑛 secure multiplications.
𝑗=1
(7) Run an MPC protocol, secure against malicious adver-
saries, to compute the OR of the bits 𝑉ℓ for ℓ = 1, . . . , 𝜅.
Open the result. If the result is 1 then conclude that the
tables are different. Otherwise conclude that the tables
are equal.a
aInstead of this last step, the servers can do the following: They randomly
generate shares [𝐷𝛼,𝛽 ] of random bits 𝐷𝛼,𝛽 for 𝛼, 𝛽 = 1, . . . , 𝜅 (where the bits
ℓ=1[𝐷𝛼,ℓ ] · [𝑉ℓ ]). If 𝑍𝛼 = 0 for all 𝛼 = 1, . . . , 𝜅, the servers
are kept hidden from the servers). They then engage in secure MPC of
𝑍𝛼 = Open(𝑛
accept the shuffle.
In Appendix C we prove (in Claim 7) that if one of the servers
deviates from the shuffle protocol then the deviation is identified
with probability of at least 1 − (3/4)𝜅.
6.2 Full Security for Shuffle and Sort
Intuition. An obvious property of the secure shuffle protocol,
6.2.1
proved in Claim 2, is that it preserves privacy even against malicious
servers. The basic shuffle protocol does not ensure correctness, but
running the equality-check protocol after the shuffle can guarantee
that the input and output of the shuffle protocol are equal.
The approach for achieving full security for the sort protocol
against malicious behavior, includes implementing all comparisons
of the sort protocol using generic fully-secure three-party MPC,
such as the protocols of of [2, 20]. In addition, the correctness of
the shuffle protocol must be verified. A first (incorrect) attempt
at constructing a secure sort protocol implements the set equality
Session 2D: Secure Multiparty Computation CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea619verification at the end of the shuffle phase, executing the following