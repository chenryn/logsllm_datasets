User: I fully recognize that the answer to this question may be "No."
I am writing the client portion of a client-server program that will run on potentially thousands of computers and will periodically report back to the server with system settings and configurations. When the computer first initiates, currently the client code independently generates a UUID value, and reports back to the server with that ID to uniquely identify itself. The server uses this ID number for identify a machine, even when the IP address and other associated data changes.
While each session is protected via TLS, a hacker could trivially identify the protocol and spam the server with thousands of new UUID values, tricking the server into thinking there are an exponential number of new machines on the network - which would eventually fill up the DB and trigger a DoS condition.
Any ideas on how to uniquely identify a server/workstation such that even a hacker could not create "phantom" machines?
Any ideas? Again, I fully understand that the answer may very well be "No".
Using the TPM chip is not an option, primarily because not all machines, architectures or OSs will allow for this option.
Assistant: There are probably far simpler and more effective ways to DOS / DDOS your server.  Bear that in mind when you decide home much effort to expend on this. 
Here are a couple of ideas that may be (partially) effective.

Rate limit the creation of UUIDs ... globally.  If you do this, and monitor how close you are to the point where your DB is full, you can keep ahead of that potential DOS vector.
Severely rate limit the UUIDs created by any given client IP address.  However, you need to be careful with this.  In many / most cases you won't see the real client IP address because of HTTP proxies, NATing and so on.

There are actually a number of ways to rate limit requests. 

You can count the requests, and refuse them when the count in a given interval exceeds a given threshold.
You can record the time since the last request, and refuse requests when the interval is too small.  (This is a degenerate version of the previous one.)
You can simply service the requests slowly; e.g. put them into a queue and process them at a fixed rate.

However, you also need to beware that your defenses don't create an alternative DDOS mechanism; e.g. hammering the server with UUID requests to prevent real users from getting UUIDs.