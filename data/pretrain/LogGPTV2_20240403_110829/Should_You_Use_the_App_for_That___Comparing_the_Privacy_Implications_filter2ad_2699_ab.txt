### Domain Categorization
The final step in our methodology involves labeling all network flows based on their destination. We manually identified first-party flows by examining domain names associated with the chosen services (e.g., weather.com and imwx.com for the Weather Channel). For the remaining third-party flows, we further categorized them as advertisers or analytics by comparing the destination domains to EasyList [2] and manually verifying the results.

### Defining a PII "Leak"
We focus on Personal Identifiable Information (PII) that reduces users' privacy either because:
1. It is transmitted over the Internet unencrypted, exposing the data to eavesdroppers.
2. It is sent to third parties (whether encrypted or in plaintext) and is not required for logging into the service, thus exposing users to profiling.

We label network flows containing PII under these two conditions as PII leaks. If a username, password, or email address (often used as a username) is transmitted to a first-party site over HTTPS, we do not consider them to be leaks. All other cases of transmitted PII are classified as leaks. For example, a birthday sent to a first party using encryption is a leak; the same is true if an email address is sent to a third party, regardless of encryption.

While many first-party "leaks" may be intentional and acceptable to the user, we err on the side of identifying all PII sharing beyond login credentials to provide a broad view of data collection when using online services. This information can help users evaluate (and re-evaluate) the implications of sharing their PII over time and across services and platforms.

### Experiment Limitations
Our experiments are limited to detecting PII leaks that occur directly to first and third parties and are detectable using common encodings (i.e., not obfuscated). Identifying cases of users' PII shared indirectly by other parties is an important research topic beyond the scope of this short paper. We were unable to measure services that use TLS certificate pinning, such as Facebook and Twitter, because they prevent us from decrypting network traffic with Meddle.

We found no evidence of PII leaks from browsers themselves or from apps to browsers (or vice versa). However, this was by design and is a limitation of our work. In this paper, we are primarily concerned with the PII that apps and websites directly gather from users. To achieve this, we took several steps to eliminate leakages across media, including using factory-reset operating systems and their respective default browsers for each session, using private mode to browse, and different credentials for each test. Properly identifying browser (or cross-site) leaks is an open and challenging question, one that is outside the scope of this short paper.

### 3.3 Dataset
We manually tested online services over app and web versions in the Boston area between March 23 and May 11, 2016. Table 1 summarizes the services that leaked PII by OS, medium (app vs. web), and by category. In addition to the number of services tested under each OS and service category (first column), we show the average popularity rank of the apps we tested (second column) using data from App Annie [1]. We observe that most apps are within the top-40 for their category. We will discuss the information exposed by these services (third and fourth columns) in Section 4.2.

### 4. Results
This section summarizes our key findings regarding the privacy implications of using apps or websites for online services. We first focus on requests to third parties, then analyze the PII exposed by these services, and finally conclude with how effectively online services can track users across app and web platforms.

#### 4.1 Third-Parties
In this section, we focus on the third parties contacted by online services, specifically advertising and analytics (A&A) domains, because it is well-known that they track users to serve targeted ads.

Figure 1a depicts a cumulative distribution function (CDF) of the difference in the number of unique A&A domains contacted by app- and web-based versions of each online service. We present one curve for each OS. Negative values indicate that the web version of the service contacts more domains than the app version.

Figure 1a shows that the vast majority (86% on Android, 84% on iOS) of online services contact more third parties via their website than their app. Some of the greatest disparities come from services like Accuweather, BBC News, and Starbucks, which contact ≤ 4 third parties in-app but contact tens of A&A domains on their websites.

A&A domains are also responsible for the different amounts of network traffic required to use the service. Figure 1b shows a CDF of the difference in the number of network flows between app- and web-based versions of each online service. The key takeaway is that the inclusion of additional A&A sites in web versions of a service is often responsible (for 74% of Android services and 80% of iOS) for hundreds and sometimes thousands of extra TCP connections. Services that trigger over thousands of TCP connections include All Recipes Dinner Spinner, BBC News, and CNN News, over the course of four-minute interactions in our experiments. These connections can further be wasteful in terms of bandwidth, sometimes leading to several MB of data consumption during only 4 minutes of interaction time (see Figure 1c).

To summarize, based on the pervasiveness of direct tracking from A&A sites, we find it is nearly always better to use an app than a web version of a service. In the next section, we include PII leak information to better understand how much information is exposed by each service.

#### 4.2 PII Leaks
This section focuses on what PII is leaked, how this differs between app- and web-based versions of services, which third parties receive leaked PII, and the amount of overlap between PII leaked from apps and websites.

**Aggregate View:** We begin with PII leaks aggregated by platform and category (second and third column groups in Table 1). The second column group shows the fraction of services that leak PII and the average number of domains receiving PII leaks per service.

A few clear trends emerge. First, we observe that 14% more services leak PII via apps than via websites (first two rows), though the overall fraction of leaky services is high in both cases. Next, we see that while similar fractions of Android and iOS apps leak PII, 28% fewer websites leak PII when loaded in Chrome on Android vs. Safari on iOS. However, we also see that websites leak comparable types of PII regardless of whether they are loaded in Chrome or Safari (with phone number being the sole exception).

When grouping services by category, we find that apps leak an equal or greater amount of PII compared to the corresponding websites. The categories leaking PII to the most domains are Education and Weather, while Entertainment (which is dominated by streaming video apps) is least likely to leak.

Focusing now on the leaked identifiers in the last column group in Table 1, we find that every category leaks unique identifiers (column UID), and almost all web and apps leak location (column L, either GPS coordinate or ZIP code). Some services leak gender and birthdays, even though that is not something entered by the user during tests (they were entered at account creation before testing).

Importantly, we found four cases of password leaks to third parties over HTTPS connections. Specifically, we found that Grubhub sent passwords to taplytics.com, JetBlue to usablenet.com, and The Food Network and NCAA Sports sent passwords to Gigya, a third-party identity management service.

We reported the first two cases to Grubhub and JetBlue, respectively, according to responsible disclosure principles. We did not report the Gigya cases because they were clearly intentional behavior and not a security vulnerability per se, even though users were likely unaware that a third-party credential-management service was used.

### Table 1: Summary of PII Leaks by Service Category
| # of Services | Avg. Rank | PII Leaks: % Services | Domains Receiving PII | Leaked Identifiers |
|---------------|-----------|----------------------|-----------------------|--------------------|
| All           | 32.0      | 90.0%                | 4.9 ± 4.7             | B, D, E, G, L, N, P#, U, PW, UID |
| Android       | 50        | 76.0%                | 3.5 ± 3.2             | B, D, E, G, L, N, P#, U, PW, UID |
| iOS           | 50        | 82.0%                | 2.5 ± 3.4             | B, D, E, G, L, N, P#, U, PW, UID |
| Business      | 2         | 100.0%               | 3.0 ± 0.0             | B, D, E, G, L, N, P#, U, PW, UID |
| Education     | 4         | 75.0%                | 12.3 ± 14.0           | B, D, E, G, L, N, P#, U, PW, UID |
| Entertainment | 6         | 66.7%                | 2.0 ± 1.0             | B, D, E, G, L, N, P#, U, PW, UID |
| Lifestyle     | 6         | 50.0%                | 6.0 ± 2.5             | B, D, E, G, L, N, P#, U, PW, UID |
| Music         | 4         | 50.0%                | 1.3 ± 0.5             | B, D, E, G, L, N, P#, U, PW, UID |
| News          | 6         | 100.0%               | 4.2 ± 2.3             | B, D, E, G, L, N, P#, U, PW, UID |
| Shopping      | 2         | 100.0%               | 3.3 ± 2.1             | B, D, E, G, L, N, P#, U, PW, UID |
| Social        | 12        | 91.7%                | 4.5 ± 3.5             | B, D, E, G, L, N, P#, U, PW, UID |
| Travel        | 3         | 100.0%               | 3.3 ± 0.9             | B, D, E, G, L, N, P#, U, PW, UID |
| Weather       | 12        | 91.7%                | 4.3 ± 4.2             | B, D, E, G, L, N, P#, U, PW, UID |

- **B**: Birthday
- **D**: Device ID
- **E**: Email
- **G**: Gender
- **L**: Location
- **N**: Name
- **P#**: Phone Number
- **U**: Username
- **PW**: Password
- **UID**: Unique Identifier

This table provides a comprehensive overview of the PII leaks across different service categories, highlighting the prevalence and nature of the data being shared.