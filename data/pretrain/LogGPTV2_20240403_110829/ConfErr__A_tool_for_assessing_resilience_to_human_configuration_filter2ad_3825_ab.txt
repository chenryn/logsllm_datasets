3.1. Design Overview
At a high level, ConfErr takes in configuration
files, mutates them, and then tests the system-under-test
(SUT) with the new configurations. The operation is
illustrated in Figure 1.
1-4244-2398-9/08/$20.00 ©2008 IEEE
159
DSN 2008: Keller et al.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:20:49 UTC from IEEE Xplore.  Restrictions apply. 
International Conference on Dependable Systems & Networks: Anchorage, Alaska, June 24-27 2008
Fault injection
Abstract
reps ,----__
c-::J ~ L . - -__
+
Abstract
reps ,----_----,
Figure 1. Overview of ConfErr
In order to generate a resilience profile for a given
systems S, ContErr takes as input a set of initial con(cid:173)
figuration files for S (e.g., httpd.conf and 881. conf
for Apache), system-specific parsing and serialization
plugins, an error generator plugin, and domain-specific
functional tests (e.g., database tests, web server tests,
etc.). ConfErr then iterates through each configura(cid:173)
tion file, using the parser plugin to generate the corre(cid:173)
sponding abstract representations. Error generator plu(cid:173)
gins synthesize fault scenarios, which are essentially
functions that mutate sets of abstract representations of
configuration files. The error generator plugins decide
where in the configuration(s) and what type of faults to
inject. Since the transformation is applied to the entire
set of configuration files, it allows for the injection of
cross-file errors in addition to errors localized in a sin(cid:173)
gle file.
After each mutation, the corresponding serializer
plugin generates a new set of(faulty) configuration files
from the mutated abstract representations. The newly(cid:173)
generated configuration files are used in place of the
original ones; ContErr starts the SUT and tests its be(cid:173)
havior. There are three possible outcomes:
The resilience profile is ConfErr's sole output, and
it indicates the result of each synthesized injection test,
containing the injected error and the corresponding sys(cid:173)
tem behavior. The functional tests executed by ConfErr
are based on a set of system-specific scripts; their exit
values are used to establish the result of the test, along
with recording all the output.
ContErr can be extended with new error models
and system-specific configuration parsers/serializers, as
needed.
3.2. Configuration Representation
Configuration files are modeled internally as XML
information sets [5], which represent configurations as
a collection of information items with a set of associ(cid:173)
ated properties. Some of these properties can point to
other information sets, so the model can be seen as a
tree of information items.
In the rest of the paper we
will refer to information sets as trees and to information
items as nodes. We chose this data model because it is
a good match for the structure of configuration files and
it allows us to reuse robust, already-developed libraries
and languages for manipulating the configurations.
[section!]
directive! = value!
directive2 = value2
(a)
(b)
~
~
VI
<@'
2:!.;:+
C Vl
~:~
~o'
:::J
:::J
3
tD
<~
Ql"O
~!1!
a
n::J
O'::J
::JQl
~3
tD
~
"Q
~
~[
CVl
~~
:tt
'-::0
-::J
::J
<~
QJ"Q
c~
~Q.
~~.
~~
ntD
<' ::J
tDQl
3 ~3
tD
tD
~
"Q
~!1!
-ge:
. ~ fa
<n
2:!.~.
~tD
1-'<
:Ql
C
tD
<~
QJ"Q
c~
~Q.
~~.
~~
ntD
<' ::J
tDQl
~3
tD
~
~~
CVl
tDtD
""0
0Ql
11-'
a!!:.
Q
~
'0
~!1!
~§;
:tD
< n
Ql!:!'.
~~
~~
C
tD
~
<"0
QJ~
C VI
~.~
11-'
a!!:.
Q
(c)
• SUT failed to start; output is recorded in the re(cid:173)
silience profile (most likely the SUT has detected
a configuration error)
• SUT started but could not complete the functional
tests; record failed tests in profile (most likely SUT
did not detect a configuration error)
• All tests passed; we record this result as the SUT
having successfully handled the configuration mu(cid:173)
tation
Figure 2. Representations of SUT configura(cid:173)
tion: (a) original configuration, (b) tree suitable
for structural error injection and (c) tree suit(cid:173)
able for typo injection
The exact structure and semantics of configuration
trees depends on the error plugin that is used (see Fig(cid:173)
ure 2). For instance, when creating typos, it is best to
represent configuration files as lists ofwords grouped in
lines. On the other hand, when injecting structural er-
1-4244-2398-9/08/$20.00 ©2008 IEEE
160
DSN 2008: Keller et al.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:20:49 UTC from IEEE Xplore.  Restrictions apply. 
International Conference on Dependable Systems &Networks: Anchorage, Alaska, June 24-27 2008
rors, a better representation is one that groups directives
into sections.
To enable flexible injection scenarios, ConfErr di(cid:173)
vides the parsing process into two stages.
First, a
configuration file is parsed into a tree with a (system(cid:173)
specific) XML representation that is independent of the
desired error generator plugin; this representation con(cid:173)
tains all the information required to recreate a serializa(cid:173)
tion of the configuration in the system-specific format.
As input files, ConfErr currently supports traditional
line-oriented configuration files, generic XML config(cid:173)
uration files, as well as the formats specific to Apache,
BIND, and djbdns.
In the second step, the system-specific representa(cid:173)
tion is mapped to the format required by the error plugin
using XSLT [18], a standard transformation language.
In order to enable the reverse operation, the mapping
function creates some additional information that com(cid:173)
plements the representation specific to the error plugin.
Since different systems use different ways to ex(cid:173)
press the same configuration, it is not possible to use a
single representation that can accommodate all systems
and fault types. Mapping to multiple representations
permits different types of faults to be defined in terms
of different views of the system configuration. Fortu(cid:173)
nately, the same representation can be reused across
multiple types of faults, and the transformation func(cid:173)
tion from the system specific representation to the one
suitable for fault injection is usually very simple.
After the fault has been injected in the plugin(cid:173)
specific representation ofthe configuration, ConfErr has
first to check that it is possible to transform this tree
into the system-specific representation-differences in
the expressiveness of the two representations can pre(cid:173)
vent this operation from completing successfully (for an
example, see Section 5.4). If the configuration can be
expressed in the system-specific XML representation, it
is then possible to serialize it to the system-specific file
format.
3.3. Error Templates
With ConfErr, error models are expressed by in(cid:173)
stantiating and composing a set ofbase templates. Tem(cid:173)
plates describe a transformation of a configuration tree,
such as deletion or duplication ofa node. The templates
are parameterized, allowing the user to specify which
transformation to apply and under which conditions.
Given a template, its parameters, and the input config(cid:173)
uration files, ConfErr can generate a set of fault scenar(cid:173)
ios. ConfErr already provides a collection of templates
for generating common transformations, and users can
add other custom templates.
The simplest class oftemplates describes mutations
they take as parameter a de(cid:173)
of nodes and subtrees;
scription of the nodes that should undergo the template(cid:173)
specific mutation. Since configuration files are repre(cid:173)
sented as XML information sets, target nodes are easily
specified via an XPath [17] query. Examples ofthis type
oftemplates include the node deletion template and one
that specifies the duplication of part of a configuration
tree. A particularly important template is the abstract
modify template, that can be specialized to generate sets
of fault scenarios that modify the content of nodes; we
used this template in the spelling mistakes plugin (§4.1).
ConfErr also provides a collection ofcomplex tem(cid:173)
plates, that take as parameters sets of fault scenarios de(cid:173)
fined with other templates. Among these we find, for
instance, a template that returns the union of the fault
scenario sets given as parameters, as well as one that
selects a random subset of fault scenarios of a given
size. These special templates can be used to compose
multiple error models or limit the number of faults that
a given model can return.
4. Error Generator Plngins
ConfErr error generators are in charge of specify(cid:173)
ing the sequence of mutations to perform on configura(cid:173)
tions in order to generate a meaningful resilience pro(cid:173)
file. Besides aiming for realistic errors (§2), we also
wanted the error generator plugins to be portable across
the configurations of a wide variety of applications and
systems. Thus, error models are translated into a se(cid:173)
quence ofparameterized operations on the abstract rep(cid:173)
resentation of the system configuration. In this section
we describe the implementation of plugins for spelling
mistakes (§4.1), structural errors (§4.2), and semantic
errors (§4.3).
4.1. Spelling Mistakes Plugin
For the injection of spelling mistakes, we represent
the configuration files as a list of tokens with associated
types, as shown in Figure 2.c. The token type is used to
restrict the injection to a specific part of the configura(cid:173)
tion (e.g. mis-spell directive names only).
The plugin implements a collection of submodels,
one for each particular type of error (see §2.l): omis(cid:173)
sions,
insertions, substitutions, case alterations, and
transpositions. Each submodel extends the abstract
modify template. The plugin generates errors by choos(cid:173)
ing random subsets of typos.
In order to mimic real spelling errors, we use an
encoding of a true keyboard. For insertions and substi(cid:173)
tutions, we first find the position on the keyboard of the
key that generates the character currently in the posi(cid:173)
tion where the substitution/insertion is to happen. Then
we find which modifiers (Shift, Alt, etc.) are necessary
1-4244-2398-9/08/$20.00 ©2008 IEEE
161
DSN 2008: Keller et al.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:20:49 UTC from IEEE Xplore.  Restrictions apply. 
International Conference on Dependable Systems & Networks: Anchorage, Alaska, June 24-27 2008
to generate that character. Finally, based on the key(cid:173)
board representation, we find all characters that could
be generated by a human mistakenly pressing nearby
keys with the same combination of modifiers.
4.2. Structural Errors Plugin
For the injection of structural errors, we represent