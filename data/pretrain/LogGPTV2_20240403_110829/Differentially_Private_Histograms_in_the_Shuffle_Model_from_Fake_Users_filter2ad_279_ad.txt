P
(cid:126)f∼M(m,q)
(cid:105) ≤ δ
(cid:104) (cid:126)f /∈ F
(cid:16) eε+1
(cid:17)2
Claim III.13. Fix any ε > 0 and δ  0, δ  n, let yi,j be the
j-th bit of the (cid:100)i/n(cid:101)-th message produced by user u(i, n) (the
output of Rd,q(0d)).
1−2q ·
(yi,j − q). Let zhon
i,j ) denote the random
variables from an honest (resp. corrupted) execution of the
protocol. Theorem III.4 ensures that
·
Recall that the analyzer computes zj ← 1
(cid:80)nk+n
(cid:114) 264
|zhon
j − histj((cid:126)x)|  0, δ < 1/100, and n ∈ N,
choose q, k as in Theorem III.4. For any input (cid:126)x ∈ X n
d and
any coalition of m corrupt users, the max error of PFLIP is
(cid:33)
ln
4
δ
ln 20d,
2
n
5
· ln 20d
· f (k)
(cid:114) 264
(cid:32)
max
·
1
n
· eε + 1
eε − 1
· (k + 1) · f (k)
m
n
+
with 90% probability. The bias rate (k + 1) · f (k) is O(1) for
n = Ω( 1
ε2 log 1
δ + log d)
We note that the resilience of the protocol stems from an
implicit assumption that every user—both honest and corrupt—
sends exactly k + 1 messages to the shufﬂer. In principle, a
corrupt user could ﬂood the network with misleading messages
(for example, a thousand messages that increment each of
the analyzer’s d counters). But in practice, the analyzer can
enforce5 the communication constraint via a blind signature
scheme [8]: in a setup stage, each user interacts with the
analyzer to sign exactly k + 1 random strings. Each of the
signed strings will serve as a tag of a message sent to the
shufﬂer. The analyzer can limit its computation to messages
with signed tags.
Comparison with PHAD (and other prior work): A highlight of
[11] is that two locally private protocols for mean estimation
can have the same accuracy absent manipulation but one can
be more robust to manipulation than the other. In the same
spirit, we show that another shufﬂe protocol for histograms
has roughly the same accuracy as PFLIP absent manipulation
but is less robust to manipulation.
We will consider PHAD = (RHAD,AHAD) from Ghazi et al.
[16]. We provide formal pseudocode in Appendix B but sketch
the ideas here. Each of the k + 1 messages sent by a user is
either an encoding of some value j ∈ [d] or a sample from a
distribution that serves to hide the encodings of user values.
The encodings are based upon a public Hadamard matrix to
optimize communication complexity (total number of bits sent
by a user). When it encounters an encoding of j, the analyzer
increments a counter for j. The approximate histogram is
constructed by applying a linear function to the counters.
Ghazi et al. give the following result concerning accuracy
and privacy. When ε = Θ(1), the bound on maximum error is
asymptotically identical with that of PFLIP.
Theorem III.16 (From [16]). Fix any ε, δ < 1 and n ∈ N.
There exist parameter choices k = Θ( 1
εδ ) and τ =
Θ(log n) such that PHAD is (ε, δ)-shufﬂe private for inputs
ε2 log 1
5By placing the veriﬁcation responsibility on the analyzer, we keep the
shufﬂer lightweight. In particular, the shufﬂer does not have to keep track of
the number of messages sent by users, which can be a sensitive attribute.
(cid:113)
εn
log 1
from Xd and reports an approximate histogram with maximum
error O( log d
εδ log d) with probability 9/10.
n + 1
n · 1
n · (k + 1) = Ω( m
In both PFLIP and PHAD, m corrupt users can only shift
counters by a function linear in m. But it turns out that the
rate is larger in PHAD than in PFLIP:
Claim III.17. Choose k, τ as in Theorem III.16. If there is a
coalition of m < n corrupt users M ⊂ [n], then for any target
value j ∈ [d] there is an input (cid:126)x such that PHAD produces an
estimate of histj((cid:126)x) with bias m
εδ ).
ε2 log 1
Unlike Theorem III.15, the above bias rate k + 1 is not
improved when n is large. We defer the proof to Appendix B
for space. The attack introduces bias by sending messages that
are interpreted by the analyzer as increment signals to the same
counter. We remark that any other histogram protocol which
translates messages to increments are vulnerable to essentially
the same attack, with the vulnerability worsening with the
message complexity. For instance, the protocol by Balcer &
Cheu [2] has users send up to d + 1 messages, where each
message is an index j ∈ [d]. As before, each j received by the
analyzer causes a counter for j to increment. A corrupt user
could send up to d + 1 copies of the same index, skewing the
counters by a large degree.
D. Approximating Top-t from PFLIP
Given an approximate histogram—as guaranteed by PFLIP—
one can easily approximate the top-t items: output the top-t in
the approximate histogram. If the maximum error is α/2, then
the rank of elements with frequency < hist[t]((cid:126)x) − α in the
approximate histogram cannot exceed t. Thus, the following
is immediate from our earlier results.
Corollary III.18. For any (cid:126)x ∈ X n
d and parameters k, q such
nk+n ln 20d ≤ q < 1/2, if we compute (cid:126)z ← PFLIP((cid:126)x),
that
then topt((cid:126)z) α-approximates the top-t items in (cid:126)x with proba-
bility ≥ 9/10, where
1
(cid:114)
α = 4
(cid:19)
(cid:18) 1
1 − 2q
k + 1
q(1 − q) ln 20d ·
n
IV. EXPERIMENTS
In this section, we evaluate the accuracy of our protocol on
natural language data. To give context for these results, we
repeat the experiment on two prior protocols that have some
similarities. The histogram protocol by Balcer & Cheu [2]
has communication complexity O(d log d), close to the O(d)
bound of PFLIP (assuming k = O(1)). The protocol by Ghazi,
Kumar, Manurangsi, and Pagh [17]—GKMP for short—has an
expected message complexity that vanishes with n, a property
also present in PFLIP (Theorem III.4).
We acquire a list of d ≈ 4.7 · 105 English words from a
publicly accessible repository and ≈ 3.7· 106 tweets on Twitter
from ≈ 104 users in the United States previously used in
work by Cheng, Caverlee, and Lee [9].6 Because we wanted to
6The word list was downloaded from https://github.com/dwyl/english-
from
downloaded
words.
https://archive.org/details/twitter_cikm_2010
Meanwhile,
tweets