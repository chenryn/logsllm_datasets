0.4
0.2
0
Eviction
Fail
Kill
Finish
e
t
a
r
t
n
e
v
E
0.5
0.4
0.3
0.2
0.1
Eviction
Fail
Kill
Finish
[ 1 m i n , 2 m i n )
[ 2 m i n , 4 m i n )
 = 1 d a y
1
[2,3]
[4,5]
[6,7]
[8,9]
[10,11]
[12,13] >=14
(b) Event execution time.
Machine concurrency
(c) Machine concurrency.
Fig. 7. Event rates vs. task priority, event execution time, and machine concurrency.
event/job rates as the probability that events/jobs end with
certain types of outcomes.
A. Events
1) Task Priority: The key question here is how does the
task priority inﬂuence different event types and to what extent.
In total, there are 12 priorities associated to tasks, but with
very uneven distributions among them. We partially follow the
convention described on the trace and group priorities into
four ranges, namely “free” (0-1), “low” (2-4), “high” (5-8)
and “production” (9-11). We present the event rate per type
relative to the different priority ranges in Figure 7(a).
One can see that the eviction rate shows a clear decreasing
trend3, meaning that eviction tends to happen on low-priority
tasks, in particular priorities 0 and 1. As the eviction decision
is made directly at the cluster scheduler, this observation indi-
cates that task priority is one of the crucial factors considered
in the underlying scheduling policies. Fail rate is high either for
very low and very high priorities, but is almost negligible for
priorities 2 to 8. Consequently, ﬁnish rate is very high, i.e.,
above 0.6, for priorities 2 to 8. Lastly, the kill rate remains
constant, i.e., roughly 0.2, across all priorities. As a result,
priority 0-1 tasks are subject to all types of events with fairly
equal probabilities; priority 2-8 tasks are dominated by ﬁnish
events, while priority 9-11 tasks often experience fail events.
Priorities have a clear impact on eviction, fail and ﬁnish
events. In particular, the eviction rate decreases with increasing
priorities, evidence of the use of priority scheduling. Fail and
ﬁnish always show opposite trends.
2) Event Execution Time: In this section, we assess whether
the execution time of events inﬂuences the trends of event rates
and to what extent. We conduct this analysis in two steps. We
consider only the event running time in the ﬁrst one, while
we include also the event queue time in the second step. As
analyses in both steps show very similar event rates, we present
only the analysis for the ﬁrst step and deliberately use the
term execution time to refer indifferently to the time between
scheduling and completion or the one between submission and
completion.
The event execution time spans a wide range of possible
values. To compare different values, we consider 7 ranges
of execution times. Owing to the unbalanced distribution of
execution time among events, the ﬁrst 5 ranges consider small
temporal intervals, while the last 2 ranges are much longer.
We summarize the event rate per type with respect to the
3Note that eviction rate is 0 only for priority 11 tasks.
execution time in Figure 7(b). The ﬁnish event rate trend shows
an “inverse U” shape: events with execution time between 2
minutes and 1 hour have very high success rate, i.e., as high
as 0.7. As for trends of unsuccessful events, two opposite
trends can be found for different types. The fail rate strictly
and quickly decreases with execution time, dropping from 0.76
for very short events to an average value of 0.05 for any event
longer than 2 min. This observation implies that fail events tend
to happen in the early stages of tasks, and thus the resource
waste due to failures is rather mild, compared to unsuccessful
events happening on older tasks. This result supports our
previous ﬁnding that fail events consume a low amount of
machine time with respect to other unsuccessful executions.
Actually, kill and eviction are observed more frequently on
events with longer execution times, indicated by the increasing
trends over time. This results in a high percentage of resource
waste due to kill events, according to our previous results, even
though the number of kill events is lower than the number of
fail events. Overall, the shape of unsuccessful events follows
the well-known bathtub curve of reliability [19], frequently
used to show that both younger and older hardware have lower
reliability.
Combining the aforementioned observations, we ﬁnd that
events can be completed with a high rate of successful ﬁnish
when execution time is between 2 min and one day. However,
unfortunately, very short events are prone to fail, and users (the
scheduler) tend(s) to kill (evict) very long events. Therefore,
to mitigate the resource waste, the scheduler could also evict
younger events of low priorities, without focusing predomi-
nantly on long-running events.
3) Machine Concurrency: With the advancement of hard-
ware and software technology, tasks are executed simulta-
neously, resulting into high concurrency levels on machines.
Here, we are interested in uncovering the dependency between
machine concurrency and different event types. To such an end,
we collect values of machines’ concurrency, i.e., the number
of co-executed tasks, upon happenings of events. We report
the event rate, relative to different ranges of concurrency,
in Figure 7(c). Note that concurrency can be viewed as an
alternative indicator of machine load. The median value of
concurrency observed is 11, computed among all events, and
the majority of events take place on machines with concurrency
greater than 7.
Overall, eviction and ﬁnish show opposite trends. Finish
rate ﬁrst increases sharply, then slowly decreases for concur-
rency values greater than 5, resulting in a difference of 2.9X
between the maximum and the initial values. Eviction exhibits
a decreasing trend, resulting in the maximum eviction rate
214214
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:48:35 UTC from IEEE Xplore.  Restrictions apply. 
e
t
a
r
t
n
e
v
E
0.5
0.4
0.3
0.2
0.1
0
e
t
a
r
t
n
e
v
E
0.6
0.5
0.4
0.3
0.2
0.1
0
Eviction
Fail
Kill
Finish
0.5
0.4
0.3
0.2
0.1
e
t
a
r
t
n
e
v
E
Eviction
Fail
Kill
Finish
e
t
a
r
t
n
e
v
E
0.5
0.4
0.3
0.2
0.1
Eviction
Fail
Kill
Finish
=0.075
=1
=1
Eviction
Fail
Kill
Finish
=0.075
=1
<0.2
[0.2,0.4)
[0.4,0.6)
RAM utilization
[0.6,0.8)
[0.8,1)
(b) Requested RAM.
(d) RAM reservation.
(f) RAM utilization.
Fig. 8. Event rates vs. requested resources, resource reservation, and resource utilization.
being 4.8X higher than the minimum one. Fail shows a mildly
increasing trend with a 2.2X difference. When focusing on
concurrency values greater than 7, fail rate clearly increases,
ﬁnish rate decreases, while both eviction and kill rates stay
rather stable. This observation implies that a high concurrency
level indeed can jeopardize task execution by increasing the
probability of task failure.
Another observation worth noting is that the eviction rate
is very high when concurrency is low, i.e., less than 3. This
suggests that the scheduler prefers to evict tasks in machines
with few running tasks, so as to maximize the probability to
free enough resources for the new scheduled tasks.
Key messages. The task priority and the event execution time
have a strong impact on the event types. In particular, the priority
affects eviction events, and the execution time affects fail and kill
events. Tasks are completed successfully with higher probability
when few tasks, i.e., from 4 to 7, are co-executed in a single
machine.
B. Resource Matters
In this section, we zoom into the dependency between
resources, particularly CPU and memory, and different event
outcomes. To this end, we investigate how resources requested
by tasks and resource reservation/utilization on machines affect
the event type.
1) Task-Requested Resources: It is a common practice that
users specify requested resources for their tasks, particularly
CPU and memory, upon submitting their jobs to the system.
Here, we aim to identify whether requested resources can serve
as a good indicator for the event types, particularly for the
unsuccessful ones. We split resources requested into 4 ranges,
and show our results in Figures 8(a) and 8(b). Among all
events, the median values of requested CPU and memory are
0.025 and 0.016, respectively, and thus the majority of events
fall in the ﬁrst three ranges in Figures 8(a) and 8(b).
One can see that the eviction trend is rather ﬂat across
different ranges of requested resources, showing that eviction
events have no particular dependency on requested CPU and
requested RAM. As for the kill trend, it increases with CPU
as well as RAM, with the difference between the maximum
and minimum values being around 2X. Interestingly, fail and
ﬁnish show opposite trends, for both CPU and memory. In
particular, fail (ﬁnish) rate drops (surges) at a moderate range
of requested resources, i.e., from 0.025 to 0.05 CPU and RAM.
Essentially, a particular range of resources requested can cause
a spiky behavior for fail and ﬁnish events.
2) Resource Reservation: The question addressed here is
whether resources reserved by tasks on machines can affect
the ﬁnal event type. To such an end, we study the resource
reservation on machines at event time, deﬁned as follows.
For each event, we compute the summation of the resources
requested by all co-executed tasks, divided by the amount of
equipped resources on the machine. Note that resource reserva-
tion can be greater than 1, as resources can be overcommitted
by the scheduler. We analyze the dependency of event types on
CPU and RAM reservation levels, summarized in Figures 8(c)
and 8(d), respectively. The median values of CPU and RAM
reservation computed among all events are 1.13 and 0.99,
respectively.
In terms of CPU reservation, we observe from Figure 8(c)
that ﬁnish is rather constant across different reservation levels,
including values greater than 1. Moreover, ﬁnish remains
stable with respect to different levels of RAM reservation, as
shown in Figure 8(d). Particularly, ﬁnish always dominates
other types, with values above 0.4 regardless of the level of
resource reservation. These observations indicate that ﬁnish
events are not jeopardized by resource overcommitment. On
the contrary, rates of unsuccessful executions ﬂuctuate with
different resource reservation levels. In particular, fail shows
an increasing trend with increasing CPU reservation levels,
while kill shows a decreasing trend with respect to increasing
CPU reservation levels. Interestingly, eviction rate is high, i.e.,
around 0.2, for mid-range CPU reservation. We speculate that
the scheduler implements proactive eviction policies, so as to
evict tasks before shortage of resources takes place.
About RAM reservation, one can see from Figure 8(d) that
all event types exhibit slightly more stable trends than the ones
for CPU, particularly for kill and eviction, as indicated by the
215215
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:48:35 UTC from IEEE Xplore.  Restrictions apply. 
1
0.8
e
t
a
r
b
o
J
0.6
0.4
0.2
0
Eviction
Fail
Kill
Finish
1
[2,10]
[11,50]
[51,100]
101+
Job size
(a) Job size.
e
t
a
r
b
o