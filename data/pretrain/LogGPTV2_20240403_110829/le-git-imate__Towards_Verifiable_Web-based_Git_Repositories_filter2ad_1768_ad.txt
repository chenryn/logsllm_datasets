that GitHub is providing consistent repository views between the web UI and the GitHub API (or
any other API used by the Git hosting provider). For the manual checks, the background script
allows the user to check the accuracy of the commit ﬁelds by displaying it inside a seperated pop-
up window. If the user is satisﬁed, she hits a button called “ﬁnalize commit”. Upon pushing the
button, the following steps are performed.
• for the lightweight design:
∗ the background script transfers the signed veriﬁcation record to the content script;
∗ the content script includes the signed veriﬁcation record into the GitHub commit message and
triggers the commit button on the GitHub webpage. As a result, the signed veriﬁcation record
is embedded into the GitHub repository as part of the commit message;
• for the main design:
∗ the background script creates a signed commit object and pushes it to the server (as described
in Section 5.4.3);
H. Afzali et al. / Towards adding veriﬁability to web-based Git repositories
421
∗ the content script triggers the commit button on the GitHub webpage to reload the page and
notify the user about the changes.
Performing a commit using GitHub’s web UI requires the user to push one button. With le-git-imate in
place, the user can commit with two clicks while browsing GitHub’s commit webpage (one to activate
the extension, and one to transfer the signed commit to the server and reload the GitHub’s web page).
Based on this design, we argue that le-git-imate achieves design goal #4.
The extension consists of a total of 4,095 and 4,467 lines of Javascript code for the two designs, re-
spectively, excluding HTML/CSS templates, JSON manifests and third-party libraries. All operations to
compute commits, signing and veriﬁcation are done in pure browser-capable Javascript, which required
the re-implementation of some fundamental Git functions (such as git commit, git merge-file
and git push) in JavaScript-only versions. The code to fetch arbitrary information and objects from
the repository uses the GitHub API [34], but it could use Git’s pack protocol [35] to work with other
hosting providers just as well.
At the time of developing the le-git-imate extension, previous attempts to implement various Git func-
tions in JavaScript did not offer all the needed functionalities [22,36–39]. le-git-imate provides the ﬁrst
implementation of Git’s merge commit in JavaScript, which is of independent interest.4 In addition, it
implements the git commit and git push commands without needing access to the entire repos-
itory and without creating a working directory on the client side, which is not possible in the standard
Git. Although we implemented le-git-imate as an extension for the Chrome browser, it relies purely on
JavaScript and can be instantiated in other browsers with minimal effort. We have released le-git-imate
as free and open-source software [21].
5.4.2. Computing the “tree hash” ﬁeld
The extension can populate most of the ﬁelds of the new commit by extracting them from the GitHub
commit webpage, except for the “tree hash” ﬁeld which needs to be computed independently. We now
describe how to compute this ﬁeld, which is expected to have the same value as the “tree” ﬁeld of the
commit object (i.e., the hash of the contents of the tree object associated with the commit object that is
about to be created).
To compute the tree hash, the background script needs the following information, which is collected
by the content script and passed to the background script:
• for regular commits: branch name on which the commit
ﬁle/directory information depending on the user’s operation that is being committed:
∗ add: the name and content of added ﬁle(s);
∗ edit: the name and updated content of edited ﬁle(s);
∗ delete: the name of deleted ﬁle(s).
The background script also needs the name of the directory(es) that might have been affected by
the ﬁle operation;
• for merge commits and squash-and-merge commits: branch names of the branches that are being
merged.
is performed, and the following
Basic approach 1. The background script can delegate the computation of the tree hash ﬁeld to a script
that runs on the user’s local system (outside the browser). The local script runs a local Git client that
4We note that isomorphic-git [22] released its ﬁrst implementation of the git merge command based on the diff3 algorithm
on September 4, 2019 [40].
422
H. Afzali et al. / Towards adding veriﬁability to web-based Git repositories
Fig. 10. An example object tree.
clones the branch(es) involved in the commit from the GitHub repository into a local repository. The Git
client simulates locally the user’s operation and performs the commit in a local repository, from where
the needed tree hash is then extracted.
Basic approach 2. The previous approach is inefﬁcient for large repositories, as cloning the entire
branch can be time consuming. To address this drawback, the client could cache the local repository in
between commits. That helps the local Git client to retrieve only new objects that were created since the
previous commit.
Optimized approach for regular commits. Delegating the computation of the tree hash ﬁeld to a local
script is convenient since a local Git client will be responsible to compute the necessary Git objects.
However, whenever GitHub’s web UI is preferred for commits, this usually implies that the user does
not have a local Git client. Moreover, assuming that the repository is cached in between commits is a
rather strong assumption.
We explore an approach in which the tree hash is computed exclusively using JavaScript in the
browser. For this, we have re-implemented in JavaScript the regular and the merge commit function-
ality of a Git client. As such, both designs are implemented exclusively in the browser, without the need
to rely on any software outside of the browser, and without assuming any locally-cached repository data.
Design goal #3 is thus achieved.
Instead of cloning entire branches, we propose an optimized approach. An analysis of the top 50 most
starred GitHub projects reveals that for a regular commit performed using GitHub’s web UI, only one
ﬁle is edited on average and the median size of the changes is 76.5 bytes. For merge commits, the median
number of changed ﬁles in the pull request branch is 2. The median number of commits in the master
branch and in the pull request branch after the common ancestor of these branches are 10.2 and 3.7,
respectively. This raises the possibility to compute the tree object without retrieving the entire branch.
Instead, we only retrieve a small number of objects and recompute some of the objects in order to obtain
the needed tree object.
Our optimized algorithm leverages the fact that GitHub provides an API to retrieve individual Git
objects (blob, tree, or commit). We illustrate the optimized algorithm with an example for the object
tree shown in Fig. 10. Assume the user performs an operation on a ﬁle under Dir2 and then commits.
To compute the tree object for the commit, the background script ﬁrst retrieves the tree object TDir2
corresponding to Dir2, followed by the following steps which depend on the performed operation:
• add a ﬁle under Dir2: compute a blob entry for the newly added ﬁle; re-compute TDir2 by adding
the blob entry to the list of entries in TDir2;
• edit a ﬁle under Dir2: compute a blob entry for the edited ﬁle; re-compute TDir2 by replacing the
blob entry corresponding to the edited ﬁle with the newly computed blob entry;
H. Afzali et al. / Towards adding veriﬁability to web-based Git repositories
423
• delete a ﬁle under Dir2: re-compute TDir2 by removing the blob entry corresponding to the deleted
ﬁle.
The change in the TDir2 tree object needs to be propagated to its parent tree object TDir1 (i.e., the
tree object corresponding to Dir1). To do this, the background script retrieves the TDir1 tree object using
GitHub’s API, and then updates it by changing the tree entry for TDir2 to reﬂect the new value of TDir2.
In general, the propagation of changes to the parent tree object continues up until we update the “root”
tree object which corresponds to the commit object that will be created by the server. This “root” tree
object is the tree object that we need to compute.
Unlike the basic approach 1 presented earlier, this optimized approach proves to be much faster (as
shown by our evaluation in Section 7) and does not require a Git client installed on the user’s local
system. We note that all Git objects retrieved through the API are veriﬁed for correctness before being
used (they need to either have a valid le-git-imate veriﬁcation record or a valid standard Git commit
signature).
Optimized approach for merge and squash-and-merge commits. We now describe our optimized al-
gorithm to compute the tree object for merge commits and squash-and-merge commits. The algorithm
is described for the case of merging two branches: the pull request branch feature is merged into
the master branch. However, it can be extended in a straightforward manner to handle the merging of
multiple branches.
Just like in the optimization for regular commits, we leverage the GitHub API for retrieving a minimal
set of repository objects that are needed to compute the tree object for the merge commit.
The merge commit is a complex procedure that reconciles the changes in the two branches into a
merge commit object. At a high level, the tree of the merge commit (i.e. the merge tree) is obtained by
merging the trees of the head commits of the two branches. We do by initializing the merge tree with
the tree of the master branch, and then add/update/remove its entries to reﬂect the fact that blobs were
added, modiﬁed, or deleted in the feature branch.
To determine the lists of added, modiﬁed, and deleted blobs in the feature branch, we use the
following algorithm:
(1) Retrieve the tree of the head commit of the feature branch. Let L1 be the list of all the blob
entries in this tree.
(2) Retrieve the tree of the commit that is the common ancestor of the two branches. Let L2 be the list
(3) Given lists L1 and L2:
of all the blob entries in this tree.
• if a blob entry exists in both lists (i.e., same blob path), but the blob has different contents (i.e.,
different SHA1 hash), then add the blob entry to the list of modiﬁed blobs;
• if a blob entry exists in L1 and does not exist in L2, then add it to the list of added blobs;
• if a blob entry exists in L2 and does not exist in L1, then add it to the list of deleted blobs.
Since the entries in the trees retrieved from the GitHub API are already ordered lexicographically
based on the paths of the blobs, this algorithm can be executed efﬁciently (execution time is linear in the
number of tree entries).
Having obtained the lists of blobs that were added, modiﬁed and deleted in the feature branch, we
add to the merge tree the entries for the blobs that were added, and remove the entries for the blobs that
were deleted. For modiﬁed blobs, we update the corresponding entries as follows: We use the GitHub
424
H. Afzali et al. / Towards adding veriﬁability to web-based Git repositories
API to retrieve the corresponding blobs from the two branches and then compute the modiﬁed blob via
a three-way merge.
We note that changes in the tree of a subdirectory have to be propagated up to the tree of the subdirec-
tory’s parent directory. Similarly to our optimization for regular commits, the propagation of changes to
the parent tree object continues up until we update the “root” tree object which corresponds to the merge
commit object that will be created by the server. This “root” tree object is the tree object that we need to
compute.
5.4.3. Creating and sending the commit object to the server
le-git-imate’s main design gives the user the ability to sign the web UI commits in the browser. To do
so, the extension creates the signed commit object and pushes it to the server by reimplementing the
functionality of the git commit command and git send-pack command, respectively. We note
that, unlike other existing libraries [22], we implement this functionality without needing access to the
entire repository and without creating a working directory on the client side.
Create the signed commit object. Once the deterministic ﬁelds of the new commit are extracted from
the GitHub page, le-git-imate simulates the git commit command to create the commit object as
follows.
(1) determine the commit timestamp locally;
(2) compute the “tree hash” ﬁeld, as detailed in Section 5.4.2;
(3) compute a Git standard commit signature over the commit’s ﬁelds;
(4) create the commit object and insert the commit signature into it;
(5) create all new blob and tree objects related to the new commit.
Push the commit object. Git provides transferring data between repositories using two types of pro-
tocols: the “dump” protocol and the “smart” protocol [41]. The ﬁrst one only allows to read data from
the server (i.e., no writing data to the server). The “smart” protocol, however, supports both reading and
writing data from/to the server. This protocol uses two sets of processes for transferring data: a pair for
pushing data from the client to the server, and a pair for fetching data from the server. To push data to
a remote server, Git uses the “send-pack” and “receive-pack” processes. The send-pack process runs on
the client and connects to a receive-pack process on the server. These processes help the client to ﬁnd
what is the server’s state, and then to negotiate the smallest amount of data that should be sent to the
server. As a result, the client can publish what is being updated locally to a remote repository on the
server.
The transferred data between client and server is sent over a custom ﬁle called “Packﬁle”, which is
a ﬁle used to store Git objects in a highly compressed format. Git objects are normally stored in the
“Loose” format, in which each version of a ﬁle is stored in its entirety. Unlike the Loose format, the
Packﬁle stores a single version of a ﬁle, and maintains different patches to derive the other versions of
the ﬁle.
When the user wants to update a remote repository, Git runs the send-pack process to initiate a connec-
tion to the server. The receive-pack process on the server immediately responds with the server’s state,
specifying the head of each branch. Using the server’s response, the client determines what commits it
has that the server does not. Then the send-pack process tells the server which branches are going to
be updated. For each branch, the client sends the old head and the new head. Next, the client sends a
packﬁle of all the objects the server does not have. Finally, the server replies with a success (or failure)
message.
H. Afzali et al. / Towards adding veriﬁability to web-based Git repositories
425
To run the protocol depicted above, le-git-imate could simply invoke the CLI git push command.
However, design goal #3 prevents us from leaving the browser. le-git-imate tackles this challenge by
simulating the entire protocol in the browser. Essentially, le-git-imate re-implements the following func-
tionalities of a Git client in the browser, using Javascript:
(1) execute the git send-pack functionality to contact the server and get the state of the remote
repository;
(2) create the packﬁle of all the objects (i.e, commit, blob, tree) that the server does not have;
(3) send the packﬁle to the server;
(4) get the server’s response (success or failure).
5.4.4. Key management
Key management can be either performed manually or in an automated fashion. le-git-imate provides
users with both options to manage the private key that is used to sign their commits.
• Automatic (Private key store): le-git-imate asks the user to log into a third-party private key store.
Upon successful login, the user’s private key is retrieved from the third-party server. Then the key
is stored locally to avoid asking it every time that the user wants to perform a commit. However, if
the user prefers not to cache the private key locally, she must authenticate to the third-party server
once per commit.
• Manual (Import local keys): The extension supports manual key management for those users who
dislike storing even a passphrase-protected private key on a third-party server. Such users have
options to either load an existing private key or generate a new one.
Out of several key management systems ([42–44]), we leverage Keybase [42] as a private key store
based on its relatively high popularity (over 300,000 active users) and on its rich set of APIs. It al-
lows users to store passphrase-protected private keys on Keybase servers, without trusting the Keybase
servers. This system simpliﬁes the private key management by allowing users to retrieve their private
key from a server anywhere anytime, and even use one private key across different devices. We note that