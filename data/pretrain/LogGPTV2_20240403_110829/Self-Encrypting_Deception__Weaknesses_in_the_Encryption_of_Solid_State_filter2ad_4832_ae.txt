mode.
(v) Power up the drive by sending the DEVSLP signal again.
(vi) The execution is stuck at the point where the inﬁnite loop
is inserted. Halt the execution and verify that the magic
numbers in DRAM are present.
(vii) Power down the drive by removing the power plug.
(viii) Power it up again. The execution is stuck at the same
point. In case the magic numbers still exist in DRAM,
they must have originated from non-volatile storage. If
absent, either the non-volatile storage device is erased
during (v), or volatile storage is used.
(ix) Use the emergency mode to ﬂash an unmodiﬁed version
of the ﬁrmware, repeat all previous steps and omit (v)
and (vi). Absence of the magic values in DRAM conﬁrms
that volatile storage is used.
By pursuing the above steps, we conﬁrmed that the secret key
information is indeed kept in volatile storage. The reason for
encrypting it with a hardcoded key remains unclear.
Security evaluation: The implementations of full-disk en-
cryption in the 850 EVO and the 840 EVO are very similar.
Using the ATA security mode the drive can be tricked into
granting access to its contents, in case the MASTER PASSWORD
CAPABILITY bit is set to High, just as with the 840 EVO.
Since TCG Opal implementation is mostly identical to its
predecessor, no weaknesses have been identiﬁed. As is the case
with the 840 EVO, the 850 EVO features a hardware RNG,
with the added possibility to use a PRNG based on AES.
Wear leveling Unfortunately, despite numerous efforts, we
were unable to identify the routines responsible for storing/re-
trieving the crypto blob from NAND ﬂash. However, during
the responsible disclosure trajectory, a contact at Samsung
informed us that from the 850 EVO series onward, the crypto
blob storage is no longer wear leveled. Instead, a ﬁxed
physical address in NAND is used for the crypto blob storage.
Therefore, contrary to its predecessor, the 850 EVO is not
vulnerable to the crypto blob recovery attack (see 840 EVO).
Attack strategy: The attack strategy is identical to that of
the 840 EVO, with the exception of the wear leveling issue
not being present. See Section VI-E for further details.
G. Samsung 950 PRO
The Samsung 950 PRO is an NVMe SSD released in late
2015. It supports TCG Opal version 2. The controller is, again,
developed in-house: the Samsung UBX. Except for the switch
from SATA to NVMe, the controller and ﬁrmware share many
commonalities with the 850 EVO. As such, the move to NVMe
does not seem to provoke any other major revision to the
architecture of an SSD.
The ﬁrmware image ﬁle format is also similar to that of
the 850 EVO, however, besides the host-side obfuscation, an
additional layer of encryption is applied, which is removed
by the drive itself during the ﬁrmware update process. The
(cid:25)(cid:19)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:42:15 UTC from IEEE Xplore.  Restrictions apply. 
drive has a JTAG debugging interface, thus the ﬁrmware can
be extracted from RAM.
Findings and Attack strategy: We found that the implemen-
tation of the cryptography is very similar, if not identical,
to that of the 850 EVO. This entails all the points listed
in section IV,
including the vulnerable implementation of
ATA security. As such, the attack strategy is also the same.
Interestingly, ATA security can be used through NVMe, even
though it is an extension of ATA. However, we believe it is
unlikely that a substantial share of 950 PRO users are affected,
since for full disk encryption, TCG Opal is likely the preferred
solution, and legacy implementations do not exist since NVMe
was standardized later than Opal.
H. Samsung T3 portable
The Samsung T3 portable SSD is an external drive con-
nected through USB-3.1 Gen 1. It offers optional password
protection through a proprietary command set. The drive
comes with a tool that allows the user to set or remove a
password, lock and unlock.
Physically opening the drive uncovers that it is essentially an
850 EVO mSATA behind a USB to mSATA bridge, albeit ﬁtted
with a special ﬁrmware supporting the proprietary command
set. No ﬁrmware update for this drive is available. Fortunately,
the ﬁrmware can be extracted from RAM through JTAG.
Capturing USB packets with the help of Wireshark during
locking and unlocking of the drive reveals that
the ATA
opcode 8Eh (vendor-speciﬁc) is used for both operations.
Analysis of the ﬁrmware reveals that the implementation of
the operations is built upon the ATA security functionality of
the 850 EVO. However, it resembles the behavior observed
when the MASTER PASSWORD CAPABILITY bit is set to High.
Thus, the password is not cryptographically linked to the DEK.
Attack strategy: Similar to an 850 EVO set up using ATA
security with the MASTER PASSWORD CAPABILITY bit set to
High. The password validation routine can be crippled through
JTAG, allowing one to unlock the drive with any password.
I. Samsung T5 portable
The Samsung T5 portable SSD is the successor of the T3. It
uses the same MGX controller found in the 850 EVO and the
T3. A notable difference between the T5 and its predecessor is
that its USB to mSATA converter support for USB-3.1 Gen 2.
Another important difference is that the JTAG feature is
disabled. Additionally, the emergency pin is also no longer
functional. Finally, no ﬁrmware updates for the T5 are avail-
able for download. Hence, for this drive, we do not have a
ﬁrmware image at our disposal.
The T5 features the same vendor-speciﬁc commands found
in all other Samsung SSDs (Appendix B). Thus, despite the
lack of a ﬁrmware image and debugging capabilities,
the
crypto blob can still be transferred from/to the device.
We retrieved a copy of the crypto blob by means of the
vendor command both before and after setting a password,
and inspected the differences. We refer to these blobs as
B0 and B1, respectively. The crypto blobs are encrypted
(obfuscated) with a per-device one-time-programmable key
stored within the controller. As such, it can not be extracted
without JTAG or unsigned code execution, both of which
we do not have. However, since XTS mode is used, we can
observe whether or not the two blobs differ on a per-block (16
bytes) granularity. By studying the T3 ﬁrmware, and assuming
the implementation is broadly the same, we found that the
differences between B0 and B1 are explained by the following
modiﬁcations to the plain-text crypto blob:
(i) The crypto blob revision number.
(ii) A data allocation bitmap determining for each slot
whether or not it is in use.
(iii) The key storage data structure (Fig. 3).
(iv) The so-called ‘security state’ byte (referred to in the
ﬁrmware as such).
In the absence of proper derivation of the disk encryption key,
the security state byte alone likely determines the locking state
of the drive, and reverting it to its previous state will result
in the drive being unlocked. We create a new crypto blob B(cid:3)
1,
which is constructed by taking B1 and selectively reverting
the 16-byte block containing the security state byte by taking
its ciphertext value from B0. Subsequently we upload the B(cid:3)
1
crypto blob to the drive through the designated vendor-speciﬁc
command. We found that the drive successfully unlocks after
pursuing the steps above, conﬁrming that the password is
indeed not used to derive the DEK.
Attack strategy: Although the steps given above conﬁrm
that the T5 lacks derivation of the DEK from the password,
the steps themselves do not serve as an attack strategy, as
(a portion of) the crypto blob from a previous state, B0, is
needed. However, as we conﬁrmed, protection of the user data
is not cryptographically enforced. Hence, a means of low level
control over the device, e.g. unsigned code execution, will
allow us to bypass it.
Acquiring unsigned code execution on the device is con-
siderably time-consuming and labor-intensive. Given that we
exploited the issue in practice on the T5’s predecessor, the T3,
and given that the exact same issue is conﬁrmed to exist in the
T5, it is in our opinion justiﬁed to skip the act of acquiring
code execution on the T5, solely for the purpose of developing
an exploit for this issue.
For completeness: unsigned code execution may by accom-
plished via one of the methods described in Section V-B2.
Once accomplished, one can deploy the same strategy as
with the T3 (Section VI-H),
i.e. modifying the password
validation routine in RAM so that it accepts any password, and
subsequently unlocking the drive as normal with any password.
VII. DISCUSSION
A non-exhaustive overview of possible ﬂaws in hardware-
based full-disk encryption was given, categorized in speciﬁca-
tion, design and implementation issues (Section IV). We have
analyzed the hardware full-disk encryption of several SSDs
by reverse engineering their ﬁrmware, focussing on ﬁnding
these possible ﬂaws. These drives were produced by three
manufacturers and sold between 2014 and 2018, have a SATA,
(cid:25)(cid:20)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:42:15 UTC from IEEE Xplore.  Restrictions apply. 
1


2


3




Probably compromised
(cid:2) (cid:2)
4
6
9
5




(cid:2)
(cid:2)
(cid:2)
8
7
(cid:2) (cid:2)
Compromised
Compromised
 (cid:2) 
 (cid:2) (cid:2)
 (cid:2) (cid:2)
 (cid:2) (cid:2)
 (cid:2) (cid:2)
(cid:2) (cid:2) (cid:2)
(cid:2) (cid:2) (cid:2)
Impact
Compromised
Drive
Crucial MX100
(all)
Crucial MX200
(all)
Crucial MX300
(all)
Sandisk X600
(SATA)
Samsung 840
EVO (SATA)
Samsung 850
EVO (SATA)
Samsung 950
PRO (NVMe)
Samsung T3
(USB)
Samsung T5
(USB)
1 Derivation of the DEK from the password in ATA Security (High mode)
2 Derivation of the DEK from the password in ATA Security (Max mode)
3 Derivation of the DEK from the password in TCG Opal
4 Derivation of the DEK from the password in proprietary standard
5 No single key for entire disk
6 Not vulnerable to ATA Master password re-enabling (only if derivation is present)
7 Randomized DEK on sanitize and sufﬁcient random entropy
8 No wear leveling related issues
9 No DEVSLP related issues
(cid:2)
(cid:2) Depends
(cid:2) (cid:2) (cid:2) Depends
(cid:2) (cid:2) (cid:2) Probably safe
(cid:2) (cid:2)
Compromised
Compromised
(cid:2) (cid:2)
TABLE I
OVERVIEW OF CASE STUDY FINDINGS.
NVMe, or USB interface, and have a M.2, traditional 2.5", or
external form factor. The analysis uncovers a pattern of critical
issues across vendors, due to problems in all three categories.
For multiple models, it is possible to bypass the encryption
entirely, allowing for a complete recovery of the data without
any knowledge of passwords or keys. Table I gives an overview
of the models studied, and the ﬂaws found.
The situation is worsened by software solutions delegating
encryption to the drive. As a primary example, BitLocker does
this delegation for supported drives and disables its software
encryption, relying entirely on the hardware implementation.
As this is the default policy, many BitLocker users are unin-
tentionally using hardware encryption, exposing them to the
same threats as when using a hardware encryption only setup.
The results presented in this paper show that one should
not rely solely on hardware encryption as offered by SSDs for
conﬁdentiality. Since the encryption in these drives is always
performed, disabling hardware encryption (equaling to storing
the DEK unprotected) offers no performance beneﬁts. Thus,
users currently relying on these features may continue using
them. However, we strongly encourage users that depend on
hardware encryption implemented in SSDs to install an open
source, preferably audited, disk encryption software solution
as soon as possible. In particular, VeraCrypt allows for in-
place encryption while the operating system is running, and
can co-exist with hardware encryption. Based on our vulnera-
bility disclosure, additional information has been released by
Microsoft [26] and Samsung [27], however Crucial did not.
Sandisk (Western Digital) may release information in a later
stage (when their disclosure period ends).
As for recommendations, we have structured them accord-
ing to the categories of issues we have found. Based on early
feedback we have received, we want to make clear these issues
are not exhaustive but are exemplary of the underlying issues.
The speciﬁcation issues found can be addressed by making
simpler standards, with a clearer guide on how to implement
them correctly. From a security perspective, standards should
favor simplicity over a high number of features. The com-
plexity of storage standards such as TCG Opal contributes
vastly to the difﬁculty of implementing the cryptography
in SEDs. A modern standard for self-encrypting drives that
is simpler to implement is highly preferable over Opal. In
particular, the requirement of multiple ranges is a needlessly
complex feature and should be removed. Doing so implies
that a scheme supporting a many-to-many relation is no
longer necessary. In fact, such a standard already exists today.
Opalite [28] deﬁnes a subset of Opal’s features and it is also
authored by the Trusted Computing Group. Unfortunately, to
the best of our knowledge, drives that support it are extremely
rare. Standard organizations such as TCG should publish a
reference implementation of their standards (such as Opal)
to aid implementors of the standard, which should be made
available for public scrutiny. If additional requirements are
needed (such as multiple ranges), they should be implemented
as an additional layer.
We found several design issues. There is not much public in-
formation available on how to design crypto schemes with the
requirements as set out in the standards. Therefore, hardware
encryption currently comes with the drawback of having to
rely on proprietary, non-public, hard-to-audit crypto schemes
designed by their manufacturers. Designs should be audited
and subject to as much public scrutiny as possible. Manufac-
turers that take data conﬁdentiality and security seriously want
to publish their crypto schemes (and corresponding code) so
that security claims can be veriﬁed. Any design should take
into account that wear-leveling is applied to the storage.
We did not ﬁnd any implementation issues in the analyzed
drives. However, we do note that any compliance tests that are
made available for standards should also cover the implemen-