0.83 (0.05)
0.83 (0.06)
98.7
97.4
93.1
80.2
57.0
34.1
26.8
20.0
91.2
73.3
47.3
34.9
17.4
13.6
0.73
0.63
0.47
0.37
0.30
0.15
0.15
0.06
0.67
0.48
0.25
0.19
0.16
0.24
Avg proﬁle
size (bits)
294.0
3784.5
7273.2
10763.3
14253.9
17743.1
21232.6
24722.6
1183.3
1773.9
2366.2
3252.3
4727.5
6197.9
TABLE II: Personalization, privacy and efﬁciency tradeoffs for RAND and HYBRID when varying the noise level f (1000
users, 264,615 queries). For personalization, the table reports the difference between avg rankU RL (computed using
exact proﬁles, ﬁrst row in the table) and the average rank obtained with URL-based noisy proﬁles. For privacy, it reports
unlinkability as avg (stdev) entropy-based unlinkability, linkable users percentage and max probability with top 1%
outliers removed. For efﬁciency, it reports the size of the noisy proﬁle.
the results in Table I. Personalization results are reported as
loss compared to the average rank obtained with exact proﬁles;
later we also consider generalized proﬁles and compare results
in Table I and Table II. Finally, note that for RAND and
HYBRID f varies on a different range of values. As we will
show below, this is necessary because the algorithms work in
a different manner, so that to obtain the same performance
different amounts of noise are required.
Both noise addition techniques are able to provide higher
unlinkability than exact proﬁles. Compared to exact proﬁles
where 98.7% of user proﬁles were correctly linked, noise
addition lowers the percentage to 20% (with RAND) or 5.8%
(with HYBRID). Notice that although the average unlinkability
is generally better for RAND, in practice HYBRID makes users
less linkable, as shown by the linkable users percentage and
the max probability metrics, which are both smaller than with
RAND. The reason for this behavior is what we discussed in
§III-B and this is why we do not consider the average entropy-
based metric alone.13
13Even when entropy-based unlinkability is high (e.g., 0.88 for RAND
with f = 40 vs. 0.81 for HYBRID with f = 30, a larger number of proﬁles
(57% vs. 40%) may be linked correctly because of the probability distribution.
This behavior is captured by the max probability metric (0.30 vs. 0.19)–the
higher the max probability, the more likely proﬁles are correctly linked.
The two algorithms have distinct behaviors. RAND is a
conservative algorithm that provides only moderate unlink-
ability but keeps the personalization loss relatively small.
To achieve levels of unlinkability comparable to HYBRID,
RAND requires much larger amounts of noise (this is why
for RAND we consider up to the case of f = 70), thus
signiﬁcantly increasing the network overhead. HYBRID is a
more aggressive and efﬁcient algorithm which achieves high
levels of unlinkability with smaller amounts of noise, but with
a big loss in personalization. The reason behind this is that in
HYBRID the added noise relates to true interests of the user
(i.e., it has the same ODP categories as the true URLs) thus
having a probability of collusion with the URLs that interest
the user higher than with RAND.
Comparison with generalized proﬁles. Although HYBRID
causes a decrease in personalization, this is still much smaller
than with interest-based proﬁles. We can combine Table I
(second row) and Table II to directly compare noisy proﬁles
to generalized proﬁles. For HYBRID with f=20, for instance,
the personalization loss for “all” is 4% compared to the
personalization quality of exact proﬁles, while interest-based
proﬁles have a decrease of 24% compared to the same exact
proﬁles. For ”expanded” queries the difference is even larger:
a loss of 7% with HYBRID-20 and a loss of 82% with interest-
based proﬁles. Summarizing, the comparison shows that noisy
8
proﬁles, RAND with f ≥ 50 and HYBRID with f ≥ 10
can simultaneously provide better personalization and better
unlinkability than generalized proﬁles. For example, HYBRID
with f = 10 links 35% users at the cost of a personalization
loss of < 4%, while generalized proﬁles link 44% people at
the cost of a personalization loss of 24–82%.
Costs of noisy proﬁles. Adding noise to proﬁles inﬂates
their sizes and requires a noise dictionary. Although HYBRID
requires less noise, the network overhead these noise addition
techniques cause is substantial. As an example, a web cookie
is typically a few hundred bytes in size, and no more than
4kB. With a modest level of noise such as f = 30, the size
of the proﬁle is more than 30 times the noise-free proﬁle
and several times the size of a typical web cookie. HYBRID,
however, requires a larger dictionary as it needs both URLs
and categories of the URLs. In our evaluation, the dictionary
sizes of RAND and HYBRID were a few MBs. The dictionaries
require a trusted third party (as mentioned in §II-C), and their
network and memory footprints are signiﬁcant.
V. BLOOM COOKIES
We now describe our solution for building noisy proﬁles
that have similar unlinkability and personalization advantages
to RAND and HYBRID, but without their costs. Our solution,
which we call Bloom cookies, is signiﬁcantly smaller in size
than RAND and HYBRID and does not require any noise
dictionary. In this section, we discuss the design of Bloom
cookies, compare their performance with RAND and HYBRID,
and present an algorithm to automatically tune their parameters
for target privacy and personalization goals.
A. Bloom cookies design
Bloom cookies are based on Bloom ﬁlters [9], a well-
known probabilistic data structure. A Bloom ﬁlter is used to
store elements from a set E, and is implemented as a bit-
string of size m with k hash functions. When querying if an
element exists in the Bloom ﬁlter, false positives are possible
but false negatives are not. The probability p of false positives
can be controlled by varying m and k; according to [10],
k = m/n · ln2 minimizes p, where n = |E|.
One straightforward way to use Bloom ﬁlters is to insert the
URLs from the noisy proﬁle generated by RAND or HYBRID
into a Bloom ﬁlter, which the client sends to the server along
with his queries. For personalization, the server simply queries
the Bloom ﬁlter for all the URLs contained in the search
results for the submitted search query and re-ranks the results
accordingly. The number of search results to be re-ranked is
commonly in the range 10–100, which makes the number of
Bloom ﬁlter queries acceptable. As the Bloom ﬁlter size can
be signiﬁcantly smaller than the actual list of URLs, this can
reduce the communication overhead. However, this approach
still does not remove the need for a noise dictionary required
by RAND and HYBRID.
To avoid the need for a noise dictionary and reduce even
further the communication overhead, we introduce noise at the
bit-level of a Bloom ﬁlter. More speciﬁcally, we start with the
exact proﬁle of the client, encode the URLs present in the exact
proﬁle into a Bloom ﬁlter, and then set a random set of fake
bits in the ﬁlter to 1. We call this data structure, consisting
of a Bloom ﬁlter of an exact proﬁle and a set of fake bits,
a Bloom cookie. The presence of fake bits increases the false
positive rate of the ﬁlter and acts as noise. The number of fake
bits acts as a tuning knob to control the magnitude of noise.
The above use of Bloom ﬁlters to generate Bloom cookies
is relatively simple. However, unlike almost all previous work
that adopted Bloom ﬁlters for network and storage efﬁciency
reasons [10], [39], Bloom cookies use them as a privacy-
preserving data structures. To the best of our knowledge,
we are the ﬁrst to use Bloom ﬁlters for a practical privacy
mechanism and to evaluate its privacy-personalization tradeoff.
The only other work in this direction we are aware of is [8],
which is discussed in §VI.
We argue that there are at least ﬁve beneﬁts that make
Bloom ﬁlters interesting for proﬁle obfuscation.
1)
2)
3)
4)
5)
Efﬁciency: In terms of size, Bloom ﬁlters are much
more compact than a bag of URLs used by noise
addition techniques such as RAND and HYBRID.
This reduces the communication overhead of sending
noisy proﬁles to the server.
Noisy by design: Bloom ﬁlters’ false positives, typi-
cally considered as drawbacks, are an advantage for
us. In fact, the false positives in a Bloom ﬁlter act as
natural noise that can be controlled via various design
parameters such as the number of hash functions.
Non-deterministic noise: The level of noise intro-
duced by Bloom ﬁlters changes automatically as the
content of the ﬁlter changes. This makes it harder for
an adversary to predict the level of noise utilized. As
discussed in [5], noise determinism is a signiﬁcant
problem for standard noise addition techniques.
Dictionary-free: By adding noise by setting random
fake bits, Bloom cookies can work without any noise
dictionary. As discussed in §II-C, the requirement of
a noise dictionary introduces additional overhead and
privacy threats.
Expensive dictionary attacks: Unlike most proﬁle
obfuscation techniques that represent noisy proﬁles
as a list of proﬁle items, Bloom ﬁlters represent them
as an array of bits. To build a complete user proﬁle,
a potential adversary would need to query the Bloom
ﬁlter for all possible elements.
In addition to false positives naturally occurring in Bloom
ﬁlters, we inject noise by setting random bits in the ﬁlter. The
level of noise is controlled by the parameter l (different from
the noise level f used in RAND and HYBRID) which represents
the fraction of bits set in a Bloom ﬁlter, either corresponding
to the original proﬁle items or to noise. Note that l is used
to control only the number of fake bits that we need to set
after we insert the original proﬁle items. If the number of bits
set by the original proﬁle items is already greater than the
target value of l, we do not add any noisy bits. In our tests,
we did not face this situation except for l = 0. The reason
for conﬁguring noise as a fraction of the total number of bits
(rather than as a constant number of bits) is to keep the number
of bits observed by the server constant. To understand let us
consider the case of two proﬁles A and B each containing
n = 10 element. When stored in a Bloom ﬁlter (with k = 1),
let us assume A sets 7 unique bits and B sets 10 unique bits.
9
Noise addition mechanism
Exact proﬁle (URLs)
BloomCookies
noise level
f=0
l=0
l=5
l=10
l=15
l=20
l=25
l=30
l=35
l=40
l=50
one-word
expanded
Personalization loss (%)
compared to exact proﬁles
all
0.00
0.16
0.17
0.25
0.57
1.00
1.77
3.30
4.68
6.81
11.94
0.00
0.04
0.08
0.42
1.02
1.61
2.42
6.75
6.50
11.75
19.68
0.00
0.35
0.37
0.51
1.07
1.83
3.01
5.70
7.73
11.62
20.66
Unlinkability
entropy-based % linkable users max prob (1%)
0.66 (0.12)
0.65 (0.11)
0.66 (0.10)
0.73 (0.08)
0.80 (0.07)
0.90 (0.05)
0.95 (0.01)
0.97 (0.00)
0.98 (0.00)
0.99 (0.00)
0.99 (0.01)
98.7
93.8
91.5
91.1
80.0
44.7
15.6
2.3
2.5
1.0
0.3
0.73
0.71
0.68
0.55
0.41
0.29
0.08
0.01
0.02
0.00
0.05