Server socket = 9876
After:
Client socket = 5432
Problem30
Yes, you can configure many browsers to open multiple simultaneous connections to a
Web site. The advantage is that you will you potentially download the file faster. The
disadvantage is that you may be hogging the bandwidth, thereby significantly slowing
down the downloads of other users who are sharing the same physical links.
Problem 31
For an application such as remote login (telnet and ssh), a byte-stream oriented protocol
is very natural since there is no notion of message boundaries in the application. When a
user types a character, we simply drop the character into the TCP connection.
In other applications, we may be sending a series of messages that have inherent
boundaries between them. For example, when one SMTP mail server sends another
SMTP mail server several email messages back to back. Since TCP does not have a
mechanism to indicate the boundaries, the application must add the indications itself, so
that receiving side of the application can distinguish one message from the next. If each
message were instead put into a distinct UDP segment, the receiving end would be able to
---
## Page 39
distinguish the various messages without any indications added by the sending side of the
application.
Problem32
To create a web server, we need to run web server software on a host. Many vendors sell
web server software. However, the most popular web server software today is Apache,
which is open source and free. Over the years it has been highly optimized by the open-
source community.
---
## Page 40
Chapter3ReviewQuestions
a) Call this protocol Simple Transport Protocol (STP). At the sender side, STP accepts
from the sending process a chunk of data not exceeding 1196 bytes, a destination host
address, and a destination port number. STP adds a four-byte header to each chunk
and puts the port number of the destination process in this header. STP then gives the
destination host address and the resulting segment to the network layer. The network
layer delivers the segment to STP at the destination host. STP then examines the port
number in the segment, extracts the data from the segment, and passes the data to the
process identified by the port number.
b)The segment now has two header fields: a source port field and destination port field.
At the sender side, STP accepts a chunk of data not exceeding 1192 bytes, a
destination host address, a source port number, and a destination port number. STP
creates a segment which contains the application data, source port number, and
destination port number. It then gives the segment and the destination host address to
the network layer. After receiving the segment, STP at the receiving host gives the
c)No, the transport layer does not have to do anything in the core; the transport layer
"lives' in the end systems.
2.
1.For sending a letter, the family member is required to give the delegate the letter
itself, the address of the destination house, and the name of the recipient. The
delegate clearly writes the recipient's name on the top of the letter. The delegate then
puts the letter in an envelope and writes the address of the destination house on the
envelope. The delegate then gives the letter to the planet's mail service. At the
receiving side, the delegate receives the letter from the mail service, takes the letter
out of the envelope, and takes note of the recipient name written at the top of the
letter. The delegate then gives the letter to the family member with this name.
2. No, the mail service does not have to open the envelope; it only examines the address
on the envelope.
3.Source port number y and destination port number x.
control, which can throttle the application’s sending rate at times of congestion
Often, designers of IP telephony and IP videoconference applications choose to run
their applications over UDP because they want to avoid TCP's congestion control.
Also, some applications do not need the reliable data transfer provided by TCP.
---
## Page 41
5. Since most firewalls are configured to block UDP traffic, using TCP for video and
voice traffic lets the traffic though the firewalls.
6.Yes. The application developer can put reliable data transfer into the application layer
protocol. This would require a significant amount of work and debugging, however.
7.Yes, both segments will be directed to the same socket. For each received segment, at
the socket interface, the operating system will provide the process with the IP
addresses to determine the origins of the individual segments.
8.For each persistent connection, the Web server creates a separate “connection
socket". Each connection socket is identified with a four-tuple: (source IP address.
source port number, destination IP address, destination port number). When host C
receives and IP datagram, it examines these four fields in the datagram/segment to
determine to which socket it should pass the payload of the TCP segment. Thus, the
requests from A and B pass through different sockets. The identifier for both of these
sockets has 80 for the destination port; however, the identifiers for these sockets have
different values for source IP addresses. Unlike UDP, when the transport layer passes
a TCP segment's payload to the application process, it does not specify the source IP
address, as this is implicitly specified by the socket identifier.
9.  Sequence numbers are required for a receiver to find out whether an arriving packet
contains new data or is a retransmission.
10. To handle losses in the channel. If the ACK for a transmitted packet is not received
within the duration of the timer for the packet, the packet (or its ACK or NACK) is
assumed to have been lost. Hence, the packet is retransmitted.
11. A timer would still be necessary in the protocol rdt 3.0. If the round trip time is
known then the only advantage will be that, the sender knows for sure that either the
packet or the ACK (or NACK) for the packet has been lost, as compared to the real
scenario, where the ACK (or NACK) might still be on the way to the sender, after the
timer expires. However, to detect the loss, for each packet, a timer of constant
duration will still be necessary at the sender.
12.
a)The packet loss caused a time out after which all the five packets were retransmitted.
b) Loss of an ACK didn’t trigger any retransmission as Go-Back-N uses cumulative
acknowledgements.
c)The sender was unable to send sixth packet as the send window size is fixed to 5.
---
## Page 42
13.
a)When the packet was lost, the received four packets were buffered the receiver. After
the timeout, sender retransmitted the lost packet and receiver delivered the buffered
packets to application in correct order.
b)Duplicate ACK was sent by the receiver for the lost ACK.
c) The sender was unable to send sixth packet as the send window size is fixed to 5
When a packet was lost, GO-Back-N retransmitted all the packets whereas Selective
Repeat retransmitted the lost packet only. In case of lost acknowledgement, selective
repeat sent a duplicate ACK and as GO-Back-N used cumulative acknowledgment, so
that duplicate ACK was unnecessary.
14. a) false b) false c) true d) false e) true f) false g) false
15. a) 20 bytes b) ack number = 90
Third segment; seq = 44, ack = 81
17. R/2
18. False, it is set to half of the current value of the congestion window.
19. Let X = RTTre, Y = RTTsE and ST = Search time. Consider the following timing
diagram.
Client
FrontEndServer
BackEnd Server
TCP
Handshake
= X
Y+ST
ST
2x+y+ST
IS+A+xE
3 Windows
4x+y+ST
---
## Page 43
TCP packet exchange diagram between a client and a server (Back End) with a proxy
(Front End) between them.
From this diagram we see that the total time is 4X + Y+ ST = 4*RTTFE + RTTBE +
Search time
Chapter3Problems
Problem 1
source port
destination port
numbers
numbers
a) A →S
467
23
b) B →S
513
23
c) S→A
23
467
α←s(p
23
513
e) Yes.
f) No.
Problem 2
Suppose the IP addresses of the hosts A, B, and C are a, b, c, respectively. (Note that a, b,
c are distinct.)
To host A: Source port =80, source IP address = b, dest port = 26145, dest IP address = a
To host C, left process: Source port =80, source IP address = b, dest port = 7532, dest IP
address = c
To host C, right process: Source port =80, source IP address = b, dest port = 26145, dest
IP address = c
Problem3
Note, wrap around if overflow.
01010011
01100110+
10011101
---
## Page 44
10011101
00101110+
00101110
One's complement = 1 1 0 1 0 0 0 1.
To detect errors, the receiver adds the four words (the three original words and the
checksum). If the sum contains a zero, the receiver knows there has been an error. All
one-bit errors will be detected, but two-bit errors can be undetected (e.g., if the last digit
of the first word is converted to a O and the last digit of the second word is converted to a
1).
Problem4
a) Adding the two bytes gives 11000001. Taking the one’s complement gives 00111110
b) Adding the two bytes gives 01000000; the one’s complement gives 10111111
c) First byte = 01010100; second byte = 01101101.
Problem5
No, the receiver cannot be absolutely certain that no bit errors have occurred. This is
because of the manner in which the checksum for the packet is calculated. If the
corresponding bits (that would be added together) of two 16-bit words in the packet were
0 and 1 then even if these get flipped to 1 and 0 respectively, the sum still remains the
same. Hence, the 1s complement the receiver calculates will also be the same. This
means the checksum will verify even if there was transmission error.
Problem6
Suppose the sender is in state “Wait for call 1 from above” and the receiver (the receiver
shown in the homework problem) is in state “Wait for 1 from below." The sender sends
a packet with sequence number 1, and transitions to *Wait for ACK or NAK 1,” waiting
for an ACK or NAK. Suppose now the receiver receives the packet with sequence
number 1 correctly, sends an ACK, and transitions to state “Wait for 0 from below,
waiting for a data packet with sequence number 0. However, the ACK is corrupted.
When the rdt2.1 sender gets the corrupted ACK, it resends the packet with sequence
number 1. However, the receiver is waiting for a packet with sequence number 0 and (as
shown in the home work problem) always sends a NAK when it doesn't get a packet with
sequence number 0. Hence the sender will always be sending a packet with sequence
number 1, and the receiver will always be NAKing that packet. Neither will progress
forward from that state.
---
## Page 45
Problem7
To best answer this question, consider why we needed sequence numbers in the first
place. We saw that the sender needs sequence numbers so that the receiver can tell if a
data packet is a duplicate of an already received data packet. In the case of ACKs, the
sender does not need this info (i.e., a sequence number on an ACK) to tell detect a
duplicate ACK. A duplicate ACK is obvious to the rdt3.0 receiver, since when it has
received the original ACK it transitioned to the next state. The duplicate ACK is not the
ACK that the sender needs and hence is ignored by the rdt3.0 sender.
Problem8
The sender side of protocol rdt3.0 differs from the sender side of protocol 2.2 in that
timeouts have been added. We have seen that the introduction of timeouts adds the
possibility of duplicate packets into the sender-to-receiver data stream. However, the
receiver in protocol rdt.2.2 can already handle duplicate packets. (Receiver-side
duplicates in rdt 2.2 would arise if the receiver sent an ACK that was lost, and the sender
then retransmitted the old data). Hence the receiver in protocol rdt2.2 will also work as
the receiver in protocol rdt 3.0.
Problem9
Suppose the protocol has been in operation for some time. The sender is in state “Wait
for call from above” (top left hand corner) and the receiver is in state "Wait for 0 from
below". The scenarios for corrupted data and corrupted ACK are shown in Figure 1.
---
## Page 46
Sender sends M0 
M0 corrupted
A1
Packet garbled, receiver
Sender ignores A1 
resends last ACK (A1)
Corrupted
Timeout: sender
M0
data
resends M0
A0
M1
A1
sender sends M0
M0
A0
sender sends M1
M1
Corrupted
A1 corrupted
ACK
Ignore ACK
Timeout: sender
M1
resends M1
A1
M0
Figure 1: rdt 3.0 scenarios: corrupted data, corrupted ACK
Problem 10
Here, we add a timer, whose value is greater than the known round-trip propagation
delay. We add a timeout event to the “Wait for ACK or NAKO" and "Wait for ACK or
NAK1 states.If the timeout event occurs, the most recently transmitted packet is
retransmitted. Let us see why this protocol will still work with the rdt2.1 receiver.
●Suppose the timeout is caused by a lost data packet, i.e., a packet on the sender-
to-receiver channel.
In this case, the receiver never received the previous
transmission and, from the receiver's viewpoint, if the timeout retransmission is
received, it looks exactly the same as if the original transmission is being
received.
Suppose now that an ACK is lost. The receiver will eventually retransmit the
packet on a timeout. But a retransmission is exactly the same action that if an
ACK is garbled. Thus the sender's reaction is the same with a loss, as with a
garbled ACK. The rdt 2.1 receiver can already handle the case of a garbled ACK.
---
## Page 47
Problem 11
If the sending of this message were removed, the sending and receiving sides would
deadlock, waiting for an event that would never occur. Here's a scenario:
•Sender sends pktO, enter the “Wait for ACK0 state”, and waits for a packet back
from the receiver
Receiver is in the "Wait for O from below” state, and receives a corrupted packet
from the sender. Suppose it does not send anything back, and simply re-enters the
“wait for O from below" state.
Now, the ender is awaiting an ACK of some sort from the receiver, and the receiver is
waiting for a data packet form the sender  a deadlock!
Problem 12
The protocol would still work, since a retransmission would be what would happen if the
packet received with errors has actually been lost (and from the receiver standpoint, it
never knows which of these events, if either, will occur).
To get at the more subtle issue behind this question, one has to allow for premature
timeouts to occur. In this case, if each extra copy of the packet is ACKed and each
received extra ACK causes another extra copy of the current packet to be sent, the
number of times packet n is sent will increase without bound as I approaches infinity.
Problem13
M0
AQ
M1
AL
_M0
A0
old version of Mo
accepted!
M1
AL
---
## Page 48
Problem 14
In a NAK only protocol, the loss of packet x is only detected by the receiver when packet
x+/ is received. That is, the receivers receives x-/ and then x+I, only when x+/ is
received does the receiver realize that .x was missed. If there is a long delay between the
transmission of x and the transmission of x+I, then it will be a long time until x can be
recovered, under a NAK only protocol.
On the other hand, if data is being sent often, then recovery under a NAK-only scheme
could happen quickly. Moreover, if errors are infrequent, then NAKs are only
occasionally sent (when needed), and ACK are never sent  a significant reduction in
feedback in the NAK-only case over the ACK-only case.
Problem15
It takes 12 microseconds (or 0.012 milliseconds) to send a packet, as 1500*8/10°=12
microseconds. In order for the sender to be busy 98 percent of the time, we must have
util = 0.98 = (0.012n)/30.012
or n approximately 2451 packets.
Problem16
Yes. This actually causes the sender to send a number of pipelined data into the channel.
Yes. Here is one potential problem. If data segments are lost in the channel, then the
sender of rdt 3.0 won't re-send those segments, unless there are some additional
mechanism in the application to recover from loss.
---
## Page 49
Problem 17
rdt_send(data)
packet=make_pkt(data)
udt_send(packet)
Wait: send
A
Wait: receive
toB
from B
rdt_send(data)
rdt_send(data)
Rdt_unable_to_send(data)
rdt_receive(packet)
(etep)puasoalqeun1p
extract(packet,data)
deliver_data(data)
rdt_send(data)
packet=make_pkt(data)
udt_send(packet)
Wait: send
B
Wait: receive
to A
fromA
rdt_send(data)
rdt_send(data)
Rdt_unable_to_send(data)
rdt_receive(packet)
rdt_unable_to_send(data)
extract(packet,data)
deliver_data(data)
Problem 18
In our solution, the sender will wait until it receives an ACK for a pair of messages
(seqnum and seqnum+1) before moving on to the next pair of messages. Data packets
have a data field and carry a two-bit sequence number. That is, the valid sequence
numbers are 0, 1, 2, and 3. (Note: you should think about why a 1-bit sequence number
space of 0, 1 only would not work in the solution below.) ACK messages carry the
sequence number of the data packet they are acknowledging.
The FSM for the sender and receiver are shown in Figure 2. Note that the sender state
records whether (i) no ACKs have been received for the current pair, (i) an ACK for
seqnum (only) has been received, or an ACK for seqnum+1 (only) has been received. In
this figure, we assume that the seqnum is initially O, and that the sender has sent the first
---
## Page 50