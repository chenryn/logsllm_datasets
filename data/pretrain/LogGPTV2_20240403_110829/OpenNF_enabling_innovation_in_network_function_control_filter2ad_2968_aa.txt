title:OpenNF: enabling innovation in network function control
author:Aaron Gember-Jacobson and
Raajay Viswanathan and
Chaithan Prakash and
Robert Grandl and
Junaid Khalid and
Sourav Das and
Aditya Akella
OpenNF: Enabling Innovation in Network Function Control
Aaron Gember-Jacobson, Raajay Viswanathan, Chaithan Prakash, Robert Grandl,
Junaid Khalid, Sourav Das, and Aditya Akella
University of Wisconsin-Madison
{agember,raajay,cprakash,rgrandl,junaid,souravd,akella}@cs.wisc.edu
http://opennf.cs.wisc.edu
ABSTRACT
Network functions virtualization (NFV) together with software-
deﬁned networking (SDN) has the potential to help operators sat-
isfy tight service level agreements, accurately monitor and manipu-
late network trafﬁc, and minimize operating expenses. However, in
scenarios that require packet processing to be redistributed across
a collection of network function (NF) instances, simultaneously
achieving all three goals requires a framework that provides efﬁ-
cient, coordinated control of both internal NF state and network
forwarding state. To this end, we design a control plane called
OpenNF. We use carefully designed APIs and a clever combina-
tion of events and forwarding updates to address race conditions,
bound overhead, and accommodate a variety of NFs. Our evalua-
tion shows that OpenNF offers efﬁcient state control without com-
promising ﬂexibility, and requires modest additions to NFs.
Categories and Subject Descriptors
C.2.1 [Computer Communication Networks]: Network Archi-
tecture and Design; C.2.3 [Computer Communication Networks]:
Network Operations
Keywords
Network functions, middleboxes, software-deﬁned networking
1.
INTRODUCTION
Network functions (NFs), or middleboxes, are systems that ex-
amine and modify packets and ﬂows in sophisticated ways: e.g.,
intrusion detection systems (IDSs), load balancers, caching prox-
ies, etc. NFs play a critical role in ensuring security, improving
performance, and providing other novel network functionality [37].
Recently, we have seen a growing interest in replacing dedicated
NF hardware with software-based NFs running on generic com-
pute resources—a trend known as network functions virtualization
(NFV) [12]. In parallel, software-deﬁned networking (SDN) is be-
ing used to steer ﬂows through appropriate NFs to enforce policies
and jointly manage network and NF load [17, 20, 22, 26, 32].
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
SIGCOMM’14, August 17–22, 2014, Chicago, IL, USA.
Copyright 2014 ACM 978-1-4503-2836-4/14/08 ...$15.00.
http://dx.doi.org/10.1145/2619239.2626313.
Together, NFV and SDN can enable an important class of man-
agement applications that need to dynamically redistribute packet
processing across multiple instances of an NF—e.g., NF load bal-
ancing [32] and elastic NF scaling [21]. In the context of such ap-
plications, “NFV + SDN” can help achieve three important goals:
(1) satisfy tight service level agreements (SLAs) on NF perfor-
mance or availability; (2) accurately monitor and manipulate net-
work trafﬁc, e.g., an IDS should raise alerts for all ﬂows containing
known malware; and (3) minimize NF operating costs. However,
simultaneously achieving all three goals is not possible today, and
fundamentally requires more control than NFV + SDN can offer.
To see why, consider a scenario where an IDS is overloaded and
must be scaled out in order to satisfy SLAs on throughput (Fig-
ure 1). With NFV we can easily launch a new IDS instance, and
with SDN we can reroute some in-progress ﬂows to the new in-
stance [17, 32]. However, attacks may go undetected because the
necessary internal NF state is unavailable at the new instance. To
overcome this problem, an SDN control application can wait for
existing ﬂows to terminate and only reroute new ﬂows [22, 38], but
this delays the mitigation of overload and increases the likelihood
of SLA violations. NF accuracy may also be impacted due to some
NF-internal state not being copied or shared.
In this example, the only way to avoid a trade-off between NF ac-
curacy and performance is to allow a control application to quickly
and safely move the internal IDS state for some ﬂows from the orig-
inal instance to the new instance, and update network forwarding
state alongside. Similar needs arise in the context of other applica-
tions that rely on dynamic reallocation of packet processing: e.g.,
rapid NF upgrades and dynamic invocation of remote processing.
In this paper, we present OpenNF, a control plane architecture
that provides efﬁcient, coordinated control of both internal NF state
and network forwarding state to allow quick, safe, and ﬁne-grained
reallocation of ﬂows across NF instances. Using OpenNF, opera-
tors can create rich control applications that redistribute processing
to optimally meet their performance, availability, security and cost
objectives, thus avoiding the need to make undesirable trade-offs.
We address three major challenges in designing OpenNF:
C1: Addressing race conditions. This is the most basic issue that
arises when reallocating in-progress ﬂows: When some internal NF
state is being moved, packets may arrive at the source instance after
the move starts, or at the destination instance before the state trans-
fer ﬁnishes. Unless care is taken, updates to NF state due to such
packets may either be lost or happen out of order, violating move
safety. Similarly, when state is copied across NF instances, updates
occurring contemporaneously may cause state to become inconsis-
tent. Depending on the NF, these issues may hurt its accuracy.
To account for race conditions, we introduce two novel con-
structs: (1) an event abstraction to externally observe and prevent
163dated/unpatched NFs are used to process ﬂows should be less than
10 minutes per year; (2) accurately monitor and manipulate net-
work trafﬁc—e.g., an IDS should raise alerts for all HTTP ﬂows
containing known malware packages, and a redundancy elimina-
tion (RE) decoder should correctly restore redundancy removed by
an RE encoder; and (3) operate with minimal cost—e.g., resources
are shutdown when the extra capacity is not needed.
Simultaneously achieving all three goals is not possible today.
In particular, we need additional control mechanisms, beyond those
offered by combining NFV [12] and SDN [29]. Below, we describe
several concrete examples and highlight how the aforementioned
triumvirate of goals translate into control plane requirements. We
also discuss how current NFV and SDN control frameworks, and
simplistic enhancements to them, fall short in satisfying these needs.
2.1 Motivating Examples
Always up-to-date NFs. For maximum security, a cellular provider
may want trafﬁc to always be processed by the latest NF software.
For example, an SLA may require that trafﬁc is never processed by
outdated NF instances for more than 10 minutes per year (goal #1).
Fortunately, NFV allows us to launch an updated instance in a mat-
ter of milliseconds [28], and SDN allows us to reroute trafﬁc to that
instance just as quickly [17, 32]. However, this simple rerouting of
trafﬁc can compromise NF accuracy (goal #2) due to the absence of
internal NF state at the new instance: e.g., rerouting active HTTP
ﬂows to a new IDS instance can cause the IDS to miss detecting
some malware due to the lack of metadata for earlier packets in
the ﬂows. To overcome this issue, we can wait for existing ﬂows
to terminate and only reroute new ﬂows [22, 38]. However, since
ﬂow durations are unbounded, this approach cannot guarantee the
SLA will be satisﬁed: e.g., up to 40% of ﬂows in cellular networks
last longer than 10 minutes [36].1 The only way to both satisfy the
SLA and maintain NF accuracy is for the control plane to offer the
ability to move NF state alongside updates to network forwarding
state. Furthermore, the operation must complete in bounded time.
To guarantee NF accuracy (goal #2) during and after state trans-
fer, it may be important that no packets or updates to state are lost
and no re-ordering of updates happens. For example, IDS instances
operating on a copy of trafﬁc have no opportunity to request a
packet retransmission if the copied trafﬁc is dropped during state
move; this can lead to missed alerts because only part of the data
sent over a connection is checked for malware.2 Likewise, the IDS
may raise false alerts if it receives and processes SYN and data
packets out of order. Thus, the control plane must offer support
for key guarantees such as loss-freedom and order preservation.
(We formally deﬁne loss-freedom and order-preservation in §5.1.)
High performance network monitoring. Performance is also a
crucial concern for cellular providers. For example, an SLA may
require NF deployment throughput to exceed 1Gbps most of the
time. Meeting this SLA with a single NF instance can be chal-
lenging due to the complexity of packet processing. Fortunately,
NFV enables NFs to be dynamically scaled-out as network load in-
creases, and SDN enables ﬂows to be rerouted to leverage the new
capacity. However, as in the ﬁrst scenario, ﬂows must be rerouted
quickly—waiting for ﬂows to terminate can cause NF overload to
persist and violate the SLA (goal #1)—and safely—rerouting ﬂows
without moving internal NF state (in a loss-free and order-preser-
1Prematurely terminating ﬂows also violates SLAs.
2Is loss-free important given the network already can drop pack-
ets? Note that end points recover from network-induced drops us-
ing retransmissions, and the IDS can eventually get a copy; but
the IDS can never recover packets dropped during state transfer. A
similar argument applies to order-preserving.
Figure 1: A scenario requiring scale-out and load balancing to sat-
isfy SLAs on throughput are and minimize operating expenses. The
IDS [31] processes a copy of network trafﬁc to detect port scans and
malware in HTTP ﬂows. For each active ﬂow, the IDS maintains a
connection object with src/dst IPs, ports, etc. and several analyzer ob-
jects with protocol-speciﬁc state (e.g., current TCP seq # or partially
reassembled HTTP payloads). It also maintains host-speciﬁc connec-
tion counters. If the red (darker) ﬂow is reassigned to the second IDS
instance to avoid SLA violations, then the SDN switch’s ﬂow table must
be updated, the ﬂow-speciﬁc state must be moved, and the host-speciﬁc
state must be copied or shared to ensure no attacks go undetected.
local state changes inside NFs, and (2) a clever two-phase scheme
for updating network forwarding state. We show how to combine
the two to provably ensure state updates are not lost or reordered
during state moves and shared state remains consistent.
C2: Bounding overhead. The second issue is ensuring that real-
location can be efﬁcient. Moving and sharing state between NF in-
stances consumes both NF CPU and network resources. Moreover,
avoiding loss, reordering, and state inconsistency requires packet
buffering, which introduces both latency and memory overhead. If
these performance and resource overheads are unbounded, then we
cannot satisfy tight SLAs or constrain operating costs.
To bound overhead, we propose a ﬂexible northbound API that
control applications use to precisely specify which state to move,
copy, or share, and which guarantees to enforce (e.g., loss-free).
C3: Accommodating a variety of NFs with minimal changes.
The ﬁnal issue is ensuring that our framework is capable of accom-
modating a wide range of NFs in a largely non-intrusive fashion.
Providing APIs for NFs to create/update state [34] is one approach,
but it restricts how internal NF state is structured and may not ac-
commodate the state allocation/access needs of some packet pro-
cessing logic. Instead, we design a novel southbound API for NFs
that allows a controller to request the export or import of NF state
without changing how NFs internally manage state.
We have implemented our northbound API using Floodlight [6],
and we have constructed several control applications that use this
API. We have also augmented four NFs—Bro [31], Squid [15], ipt-
ables [9], and PRADS [13]—to support our southbound API (§7).
Our evaluation of OpenNF shows that: (1) OpenNF can elim-
inate spurious alerts and cut NF scale-in time by tens of minutes
compared to using current control frameworks; (2) state can be
moved, copied, and shared efﬁciently even when certain guaran-
tees are requested—e.g., a loss-free move involving state for 500
ﬂows takes only 215ms and imposes only 50ms of additional la-
tency on packets received during the operation; and (3) additions
to NFs to support OpenNF’s southbound API increase code size by
at most 9.8%, and packet processing time at NFs increases by less
than 6% during state export or import.
2. WHY OpenNF?
When packet processing is being collectively handled by multi-
ple instances of an NF, the NF deployment as a whole must typi-
cally meet three important goals: (1) satisfy tight NF service level
agreements (SLAs) on performance or availability—e.g., aggregate
throughput should exceed 1Gbps most of the time, and the time out-
164ving manner) can compromise NF accuracy (goal #2). Similarly,
when network load decreases the NF should be scaled-in, with
ﬂows rerouted quickly and safely beforehand, to minimize oper-
ating costs (goal #3). To achieve this, we again need the ability to
move NF state alongside updates to network forwarding state, and
the move must occur within bounded time and with key guarantees.
When rebalancing load, we must also account for the fact that
NFs may depend on state that applies to more than one ﬂow: e.g.,
an IDS maintains connection counters for each end-host. If trafﬁc
is balanced at the granularity of hosts or subnets, all ﬂows for a
host will traverse the same IDS instance, and the counters can be
moved to that instance. However, when ﬂows involving the same
host are balanced to different instances, both instances must have
the relevant counters. Furthermore, if one instance is later termi-
nated and ﬂows for a given host are re-routed to the same remaining
instance, the counters from both instances should be merged. Thus,
the control plane must offer the ability to move, copy or share, and
combine NF state that applies to multiple ﬂows.
Fast failure recovery with low resource footprint. When an NF
instance fails, we can minimize downtime (goal #1) by rerouting
in-progress (and new) ﬂows to a non-failed instance. For these
ﬂows to be accurately processed (goal #2), critical NF state must
be available at the selected instance. One way to fulﬁl this is to
periodically create a backup of all NF state; this consumes non-
negligible CPU and memory bandwidth at the NF (violating goal
#3), and the delay between copies will result in the backup contain-
ing signiﬁcant amounts of stale state. A second approach would be
to back up pieces of NF state as they are updated. This eliminates
the stale state problem, and the resource footprint is proportional to
the frequency of state updates and the amount of state being backed
up. To support this, we need the ability to copy NF state, as well as
the ability to track when/how state is updated.
Selectively invoking advanced remote processing. Based on pre-
liminary observations made by a local NF, an enterprise may want
to employ deeper and more advanced processing of a subset of in-
progress ﬂows (variant of goal #2). For example, when an IDS de-
tects that internal hosts are making HTTP requests for a blacklisted
domain, the enterprise invokes additional packet processing to have
the corresponding replies analyzed for malware. Due to limited
resources at the local IDS instance, the enterprise may leverage
a more powerful remote cloud-resident IDS. Further, to avoid the
cost of redirecting all trafﬁc to the cloud (goal #3), trafﬁc from
the remaining hosts should continue to be processed locally. This
requires the support highlighted in earlier examples (e.g., moving
ﬂow-speciﬁc state with a loss-free guarantee). Additionally, more
advanced processing typically requires maintaining more detailed
state: e.g., the cloud-resident IDS may create additional state for
the new ﬂows to compare signatures to a large corpus of known
attacks. Thus, the NF control plane should not restrict an NF’s
ability to create additional state. Further, it should automatically
capture this additional state if the processing of the ﬂow is later
transferred back to the original NF instance.
2.2 Related Work
Existing NF control planes such as PLayer [26], SIMPLE [32],
Stratos [21], FlowTags [20], and connection acrobatics [30] only