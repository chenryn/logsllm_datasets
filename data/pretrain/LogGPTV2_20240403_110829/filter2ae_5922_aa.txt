### 背景
CVE-2021-40449是卡巴斯基实验室在2021年8月下旬到9月上旬在Windows服务器上捕获的恶意样本利用的提权漏洞，该漏洞存在于win32kfull.sys驱动内，利用该漏洞可以在windows中完成从users到system的权限提升。
#### 基本概念
**内核对象** ：内核对象即在内核空间存在的对象，只能由内核分配，内核访问。
**内核对象的引用计数**
：在操作系统中，可能有多个进程访问同一个内核对象，如果没有进程需要使用该对象内核就应该释放该对象，所以为了准确的释放该对象就有了引用计数。当内核对象被创建时，引用计数被标记为1，调用CloseHandle()时内核对象的引用计数就-1，这可以类比Java
GC的引用计数法：
> 在对象中添加一个引用计数器，每当一个地方引用它时，计数器就加一；当引用失效时，计数器值就减一；任何时刻计数器为零的对象就是不可能再被使用的。
**句柄** ：由于内核对象只能由内核分配、访问、修改，当ring
3层的应用程序想要操作这些内核对象的时候，并不能直接操控内核对象。当内核对象创建好后，操作系统会使用一个句柄来标识该对象并返回给应用程序，应用程序通过操作系统提供的ring
3层API来操作句柄，ring3层API经过系统调用进入内核。在内核处句柄对应着具体的内核对象，这样ring3层的应用程序就可以通过操作句柄来间接操作内核对象。
**句柄表**
：当一个进程初始化的时候，系统会给该进程分配一个句柄表，当进程创建内核对象的时候，内核创建对应内核对象，并遍历该进程的句柄表，在句柄表的空闲位置设置内核对象、对象指针等，并获取该位置的索引，作为进程创建对象的函数的返回值，即为句柄。
> 
**DC** ：是一个内核对象，全称device context，设备上下文对象
**HDC** ：DC对象的句柄。
**释放后重用**
：指一个内存空间被操作系统释放后，内存空间变为空闲状态，如果用户在这一刻申请内存，操作系统会优先分配刚释放的内存，则用户大概率可以申请到刚刚释放的内存并修改该内存空间的内容。如果在释放空间之前有指针指向该空间，在释放空间之后指针并未按照理想状态置为NULL，由于释放后可以重新申请该内存并修改内存内容，后续如果继续使用该指针，但内存内内容并不是预期的释放之前的内容，则会产生非预期行为。
eg：
    #include 
    #include 
    void method();
    void badMethod();
    // 定义函数指针
    typedef void (*function)();
    class test {
    public:
        function p;
        test() {
        }
    };
    int main() {
        // new test对象
        test *t = new test();
        test *p = t;
        t->p = method;
        p->p();
        // 释放t指向的test对象的空间
        delete t;
        test *pt;
        for (size_t i = 0; i p = badMethod;
        }
        // 这里原意想要调用method函数，但是实际调用了badMethod函数
        printf("第二次调用\n");
        p->p();
        return 0;
    }
    void method() {
        printf("method\n");
    }
    void badMethod() {
        printf("bad method\n");
    }
#### 漏洞形成分析
该漏洞产生于 **win32kfull!GreResetDCInternal**
函数中，该函数内会获取DC对象内的函数指针，并执行该函数指针指向的函数，但并未检查DC对象是否异常。所以如果可以在调用函数指针之前释放DC对象，并重新申请该对象的内存空间，通过构造内存布局，修改原DC对象的函数指针指向其他任意内核函数，就可以在win32kfull!GreResetDCInternal内实现
**任意内核函数调用** 。
根据代码，我们可以算出DCO对象和DC对象的函数指针的关系：function pointer= _(_ (DCO +0x30)+0xad0)，其中DCO
+0x30即指向DC对象的指针
> v10 = _(_QWORD_ )(v8 + 48);
>
> v15 _=_ (void (_fastcall __ )(QWORD, _QWORD))(*v10 + 2768);
    __int64 __usercall GreResetDCInternal@(HDC a1@, __int64 a2@, int *a3@)
    {
      __int64 v24; // [rsp+50h] [rbp-20h]
      __int64 v25; // [rsp+60h] [rbp-10h]
      DCOBJ::DCOBJ((DCOBJ *)&v25, a1);              // 利用构造函数从HDC创建DCOBJ对象
      v8 = v25;
            ··········
      v10 = *(_QWORD *)(v8 + 48);                   // 赋值
      *(_QWORD *)(v10 + 1736) = 0i64;
      v24 = v11;
            ·······
      v9 = *(_QWORD *)(v25 + 512) != 0i64;
      v12 = *(_DWORD *)(v25 + 120) > 0;
            ·······
          v13 = (HDC)hdcOpenDCW(&qword_1C0141EB0, v26, 0i64, 0i64, *(_QWORD *)(v10 + 2584));// 创建新的DC对象，返回对应的HDC句柄
          if ( v13 )
          {
            *(_QWORD *)(v10 + 2584) = 0i64;
            DCOBJ::DCOBJ((DCOBJ *)&v24, v13);
            v14 = (_QWORD *)v24;
            if ( v24 )
            {
              if ( v12 )
                *(_DWORD *)(v24 + 120) = *(_DWORD *)(v24 + 116);
              v14[308] = *(_QWORD *)(v25 + 2464);
              *(_QWORD *)(v25 + 2464) = 0i64;
              v14[309] = *(_QWORD *)(v25 + 2472);
              *(_QWORD *)(v25 + 2472) = 0i64;
              v15 = *(void (__fastcall **)(_QWORD, _QWORD))(v10 + 2768);
              if ( v15 )
                v15(*(_QWORD *)(v10 + 1824), *(_QWORD *)(v14[6] + 1824i64));// 调用函数指针指向的函数，传入参数为用户传入的HDC对应的DC对象内的值
                ·······
              HmgSwapLockedHandleContents(v3, 0i64, v6, 0i64, v23);// 交换旧的和新的HDC对象
              GreReleaseHmgrSemaphore();
                ······
        bDeleteDCInternal(v6, 1i64, 0i64); // 传入了hdcOpenDCW返回的HDC，但HmgSwapLockedHandleContents交换了新旧句柄对应的DC对象，此时v6句柄对应旧DC对象。
                ······
调用该函数指针的时候，所用的两个参数也是源于用户传入的HDC句柄对应的DC对象。
> v10 = _(_QWORD_ )(v8 + 48); _
>
> _v14[308] = _(_QWORD_ )(v25 + 2464);
>
> v14[309] = _(_QWORD_ )(v25 + 2472);
>
> v15( _(_QWORD_ )(v10 + 1824), _(_QWORD_ )(v14[6] + 1824i64));
在win32kfull!GreResetDCInternal函数的后半段会调用win32kbase!DeleteDCInternal函数释放传入该函数的HDC句柄所对应的DC对象，到这里就达成了use-after-free的 **free步骤** 。
    HDC v3; 
    v3=a1;     
          v13 = (HDC)hdcOpenDCW(&qword_1C0141EB0, v26, 0i64, 0i64, *(_QWORD *)(v10 + 2584));// 创建新的HDC
          v6 = v13;
          if ( v13 )
          {
            *(_QWORD *)(v10 + 2584) = 0i64;
            DCOBJ::DCOBJ((DCOBJ *)&v24, v13);
            v14 = (_QWORD *)v24;
            if ( v24 )
            {
              if ( v12 )
                *(_DWORD *)(v24 + 120) = *(_DWORD *)(v24 + 116);
              v14[308] = *(_QWORD *)(v25 + 2464);
              *(_QWORD *)(v25 + 2464) = 0i64;
              v14[309] = *(_QWORD *)(v25 + 2472);
              *(_QWORD *)(v25 + 2472) = 0i64;
              v15 = *(void (__fastcall **)(_QWORD, _QWORD))(v10 + 2768);
              if ( v15 )
                v15(*(_QWORD *)(v10 + 1824), *(_QWORD *)(v14[6] + 1824i64));
              GreAcquireHmgrSemaphore();
              LOBYTE(v23) = 1;
              HmgSwapLockedHandleContents(v3, 0i64, v6, 0i64, v23);// 交换旧的和新的HDC对象
              GreReleaseHmgrSemaphore();
                    ·······
        // 删除HDC句柄对应的DC对象。
        bDeleteDCInternal(v6, 1i64, 0i64);
如果在释放DC对象之后，重新申请DC对象空间，修改里面的函数指针内容，并通过某些步骤，让内核执行DC对象内的函数指针，即可达到 **use步骤**
让内核执行任意内核函数。
### 漏洞利用分析
POC:
POC代码分析：
要利用该漏洞，难点在于free
DC对象之后怎么使得内核再次调用DC对象的函数指针，在正常GreResetDCInternal函数流程中，是先调用DC对象的函数指针再删除这个对象，即按照正常流程即不会有use-after-free的条件。
在ring
3层调用ResetDC函数会通过系统调用进入内核调用函数NtGdiResetDC，在NtGdiResetDC会调用漏洞函数GreResetDCInternal，在GreResetDCInternal中会调用DC对象里面的函数指针。要利用该漏洞即要在调用函数指针之前完成三步动作：
**1、释放DC对象2、重新申请原DC对象的内存空间3、完成内存空间的布局** 。
在函数 **GreResetDCInternal** 调用DC对象的函数指针之前会调用 **win32kbase!hdcOpenDCW** 函数。
**win32kbase!hdcOpenDCW**
函数会执行打印机驱动的用户态回调函数表里面的函数，该表里面存放了函数指针，该函数指针原先指向的是预定义的回调函数。在POC中覆盖这个函数指针，使其执行POC定义的回调函数。
在自定义回调函数中再次执行ResetDC函数并传入同一HDC句柄，则会再次执行NtGdiResetDC和GreResetDCInternal函数，而在GreResetDCInternal的后半段，会释放传入的HDC对应的DC对象并创建新的DC对象。
**此时达到了free步骤** 。
在第二次ResetDC调用完成后，原DC对象已被释放，此时可以重新申请原DC对象的内存空间并完成内存布局，将原DC对象的函数指针和函数指针的参数的位置设置为想要执行的内核函数的地址及参数。在执行完第一次回调之后，GreResetDCInternal
将调用原DC对象内的函数指针，即完成了任意内核函数调用， **此时达到了use步骤** 。
完整调用链如下图：  
其中漏洞相关的类定义如下，参考
    class DCLEVEL
    {
    public:
        ...
        HDC hdcSave;
        ...
    }
    class DC : public OBJECT
    {
    public:
        DHPDEV dhpdev_;