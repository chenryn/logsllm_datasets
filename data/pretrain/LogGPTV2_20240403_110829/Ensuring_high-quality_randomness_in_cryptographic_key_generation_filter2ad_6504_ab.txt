corporates entropy from the authority.
As the device generates its cryptographic keypair, it fetches
some random values from the entropy authority and then
proves to the entropy authority that it has incorporated
these values into its keypair. The entropy veriﬁes this proof
and then signs the device’s public key. In practice, an en-
tropy authority is just a public Web service with which the
device interacts when the device ﬁrst generates its a keypair.
We assume that the entropy authority has a strong entropy
source, but that the entropy authority might be malicious.
We imagine a future in which there are a large number
of public entropy authorities on the Internet, run by corpo-
rate IT departments, certiﬁcate authorities, universities, and
other large organizations. A device would select its entropy
authority much as users select certiﬁcate authorities today:
based on reputation and reliability. To defend against the
failure (or maliciousness) of a single entropy authority, the
device could interact with a number of entropy authorities
to generate a single key, as we describe in Section 6.
Certiﬁcate authority (CA). The certiﬁcate authority
plays the role of a conventional CA: the certiﬁcate authority
conﬁrms that the real-world identity of the device matches
the identity listed in device’s certiﬁcate, after which the CA
signs the device’s certiﬁcate. In our model, CAs will only
sign certiﬁcates that have been signed ﬁrst by an entropy
authority.
In this way, CAs are guaranteed to sign only
public keys that are drawn from a distribution with high
min-entropy. Since many certiﬁcates (particularly in em-
bedded devices) are self-signed, the CA is an optional entity
in our protocol.
Client.
The client is anyone who connects to the de-
vice. In our model, the client can ensure that the device has
a suﬃciently random public key by verifying the entropy
authority’s signature on the key. Every client keeps a sig-
nature veriﬁcation key for each entropy authority it trusts,
just as today’s Web browsers maintain a list of public keys
for trusted root CAs.
2.2 Threat Model
Throughout the paper, we say that a device has a strong
entropy source if it can repeatedly sample from the uniform
distribution over some set (e.g., {0, 1}). We say that the
device has a weak entropy source otherwise. A strong key,
for our purposes, is a key independently sampled from a
distribution over the set of possible keys that has at least
687k − polylog(k) bits of min-entropy, where k is the security
parameter. In other words, a device generates strong keys
if the probability that the device will generate a particular
public key pk is at most 2−(k−polylog(k)) for all public keys
pk. A weak key is any key that is not strong. We say that
a participant is honest if it performs the protocol correctly
and is dishonest otherwise.
The goal of our protocol is to have the device interact
with the entropy authority in such a way that, after the in-
teraction, the device holds a strong cryptographic key. This
overall goal must be tempered a few realities. In particular,
if a device has a no entropy source (or a very weak entropy
source), then a global eavesdropper can always learn the de-
vice’s secret key.
To see why this is so, consider that a device with no en-
tropy source is just a deterministic process. Thus, the eaves-
dropper could always replay such a device’s interaction with
the entropy authority using the messages collected while
eavesdropping. Thus, there is no hope for a completely
deterministic device to generate keys that a global eaves-
dropper cannot guess.
To circumvent this fundamental problem, we consider in-
stead a two-phase threat model:
1. Set-up phase: In the set-up phase, the device interacts
with the entropy authority in a communication session
that the adversary cannot observe or modify.
In
our key-generation protocols, this set-up communication
session consists of two round-trip interactions between
the device and the entropy authority.
2. Long-term communication phase: After the set-up stage
ends, the adversary can observe and tamper with the
traﬃc on all network links.
This threat model mimics SSH’s implicit threat model: an
SSH client gets one “free” interaction with the SSH server,
in which the SSH server sends its public key to the client.
As long as the adversary cannot tamper with this initial
interaction, SSH protects against eavesdropping and man-
in-the-middle attacks.
Under the adversary model outlined above, our key gen-
eration protocol provides the following security properties:
Protects device from a malicious EA. If the device has
a strong entropy source, then the entropy authority learns
no useful information about the device’s secrets during a
run of the protocol. We prove this property for the RSA
protocol by demonstrating that the entropy authority can
simulate its interaction with the device given only O(log k)
bits of information about the RSA primes p and q. We prove
this property for the DSA protocol by demonstrating that
the entropy authority can perfectly simulate its interaction
with the device given no extra information.
Protects device from CA and client. An honest device
interacting with an honest entropy authority holds a strong
key at the end of a protocol run, even if the device has a
weak entropy source. When the device later interacts with
a certiﬁcate authority (to obtain a public-key certiﬁcate) or
with a client (to establish a TLS session), the device will
send these parties a strong public key, even if the device has
weak entropy source.
Protects EA from malicious device.
If the entropy
authority is honest, then the keys generated by this protocol
will be strong, even if the device is dishonest. Intuitively,
this property states that a faulty device cannot discard the
random values that the entropy authority contributes to the
key generation process.
A consequence of this security property is that a malicious
device can never “discredit” an entropy authority by tricking
the entropy authority into signing a key sampled from a low-
entropy distribution. If a device does try to have the entropy
authority sign a key sampled from a distribution with low
min-entropy (a weak key), the authority will detect that the
device misbehaved and will refuse to sign the key.
A nuance of this property is that the entropy authority will
accept public keys that are invalid, as long as the keys are
sampled independently from a distribution with high min-
entropy. In essence, a faulty device in our protocol can create
keys that are incorrect but random. For example, the device
could pick an composite number as one of its RSA “primes,”
or it could use any number of other methods to “shoot it-
self in the foot” during the key generation process. Since
the device can always compromise its own keypair (e.g., by
publishing its secret key), we do not attempt to protect a
completely malicious device from itself. Instead, we simply
guarantee that any key that the entropy authority accepts
will be drawn independently from a distribution with high
min-entropy.
2.3 Non-threats
Our protocol addresses the threat posed by devices that
use weak entropy sources to generate their cryptographic
keys. We explicitly do not address these other broad vulner-
ability classes:
• Adversarial devices.
If the device is completely ad-
versarial, then the device can easily compromise its own
security (e.g., by publishing its own secret key). Ensuring
that such an adversarial device has high-entropy crypto-
graphic keys is not useful, since no connection to such an
adversarial device is secure.
• Faulty cryptography library (or OS). Our protocol
does not attempt to protect against cryptographic soft-
ware that is arbitrarily incorrect. Incorrect software can
introduce any number of odd vulnerabilities (e.g., a tim-
ing channel that leaks the secret key), which we place out
of scope.
• Denial of service. We do not address denial-of-service
attacks by the entropy authority or certiﬁcate authority.
In a real-world deployment, we expect that a device facing
a denial-of-service attack by a CA or entropy authority
could simply switch to using a new CA or EA.
3. PROTOCOL
This section describes a number of standard cryptographic
primitives we require and then outlines our RSA and DSA
key generation protocols.
3.1 Preliminaries
Our key generation protocols use the following crypto-
graphic primitives.
Additively homomorphic commitments. We require
an additively homomorphic and perfectly hiding commit-
688ment scheme. Given a commitment to x and a commitment
to x′, anyone should be able to construct a commitment to
x+x′ (mod Q) without knowing the values x or x′. Our im-
plementation uses Pedersen commitments [37]. Given public
generators g, h of a group G with prime order Q, and a ran-
dom value r ∈ ZQ, a Pedersen commitment to the value x is
Commit(x; r) = gxhr.3 To ensure that the commitments are
binding, participants must select the generators g and h in
such a way that no one knows the discrete logarithm logg h.
The commitment scheme is additively homomorphic be-
cause the product of two commitments reveals a commit-
ment to x + x′ (mod Q) with randomness r + r′ (mod Q):
Commit(x + x′; r + r′) = Commit(x; r)Commit(x′; r)
We abbreviate Commit(x; r) as Commit(x) when the ran-
domness used in the commitment is not relevant to the ex-
position.
Of course, if the device has a weak entropy source the de-
vice will not be able to generate a strong random value r
for use in the commitments. We use randomized commit-
ments to hide a device’s secrets in case the device does have
a strong entropy source. Since a device does not necessar-
ily know whether its randomness source is strong or weak,
we must use the same constructions for devices with both
strong and weak entropy sources.
Public-key signature scheme.
We use a standard
public-key signature scheme that is existentially unforge-
able [27]. We denote the signing and veriﬁcation algorithms
by Sign and Verify.
Multiplication proof for committed values. We use
a zero-knowledge proof-of-knowledge protocol that proves
that the product of two committed values is equal to some
third value. For example, given commitments Cx and Cy
to values x, y ∈ ZQ, and a third product value z ∈ ZQ, the
proof demonstrates that z = xy (mod Q). We denote the
prover and veriﬁer algorithms by π ← MulProve(z, Cx, Cy)
and MulVer(π, z, Cx, Cy).
We implement this proof using the method of Cramer
and Damg˚ard [6]. Written in Camenisch and Stadler’s zero-
knowledge proof notation [4], the multiplication proof proves
the statement:
PoK{x, y, rx, ry, rz :
Cx = gxhrx ∧ Cy = gyhry ∧ gzhrz = (Cx)yhrz }
Application of the Fiat-Shamir heuristic [24] converts this in-
teractive zero-knowledge proof protocol into a non-interactive
proof in the random-oracle model [2]. When implemented
using a hash function that outputs length-l binary strings,
the non-interactive multiplication proof is l + 3⌈log2 Q⌉ bits
long.
Common Public Keys. We assume that all participants
hold a signature veriﬁcation public-key for the entropy and
certiﬁcate authorities.
3.2 RSA Key Generation
The RSA key generation protocol takes place between the
device and the entropy authority. At the end of a successful
3We denote the group order with capital “Q” to distinguish
it from the RSA prime q in n = pq that we use later on.
run of the protocol, the device holds an RSA public modulus
n that is independently sampled from a distribution over Z
that has high min-entropy and the device also holds the
entropy authority’s signature σ on this modulus.
In Section 4.1 we prove that the RSA protocol satisﬁes
the security properties deﬁned in Section 2.2. In Section 6,
we describe how a device could use this protocol to gener-
ate a self-signed X.509 certiﬁcate and how to integrate this
protocol with today’s certiﬁcate authority infrastructure.
Parameters. Before the protocol begins, the device and
entropy authority must agree on a set of common system pa-
rameters. These parameters include the security parameter
k, which determines the bit-length of the RSA primes p and
q. For a given value of k, the participants must also agree on
a prime-order group G used for the Pedersen commitments
and zero-knowledge proofs. The prime order Q of the group
G must be somewhat larger than the largest RSA modu-
lus n generated by the protocol, so the participants should
let Q ≈ 22k+100.
In addition, participants must agree on
two generators g and h of the group G, such that no one
knows the discrete logarithm logg h. In an implementation
of the protocol, participants could generate g and h using a
shared public hash function. Finally, they also agree on a
small number ∆ (e.g. ∆ = 216) discussed in Section 3.2.1
below.
Since the parameters contain only public values, all de-
vices and entropy authorities could share one set of param-
eters (per key size).
Protocol Description.
Figure 2 presents our RSA key
generation protocol. To generate an RSA key, the device
ﬁrst selects k-bit integers x and y and sends randomized
commitments to these values to the entropy authority. The
entropy authority then selects k-bit integers x′ and y′ at
random and returns these values to the device.
After conﬁrming that x′ and y′ are of the correct length,
the device searches for oﬀsets δx and δy such that the sums
p = x + x′ + δx and q = y + y′ + δy are suitable RSA
primes. That is, p and q must be distinct primes such that
gcd(p − 1, e) = 1 and gcd(q − 1, e) = 1, where e is the
RSA encryption exponent. The device then sets n ← pq,
generates commitments to p and q, and produces a non-
interactive zero-knowledge proof of knowledge π that the
product of the committed values is equal to n. The device
sends n, δx, δy, and the the proof π to the entropy authority.
The validity of the proof π and the fact that the δ val-
ues are less than ∆ convince the entropy authority that the
device’s RSA primes p and q incorporate the authority’s ran-
dom values x′ and y′. At this point, the authority signs the
modulus n and returns it to the device.
3.2.1 Finding Primes p and q
To maintain the security of the protocol, it is important
that the δ values chosen in Step 3 are relatively small—
if the device could pick an arbitrarily large δx value, for
example, the device could set δx ← −x′, which would make
p = x + x′ − x′ = x, thereby cancelling out the eﬀect of
the random value x′ contributed by the entropy authority.
To prevent the device from “throwing away” the entropy
authority’s entropy in this way, we require that the δ values
be less than some maximum value ∆, which depends on the
security parameter k.
689Device
Entropy Authority
Step 1
choose x, y R←− [2k, 2k+1)
Cx ← Commit(x)
Cy ← Commit(y)
send Cx, Cy
✲
Step 2
choose x′, y′ R←− [2k, 2k+1)
send x′, y′
✛
Step 3
abort if x′, y′ 6∈ [2k, 2k+1)
choose 0 ≤ δx, δy < ∆ s.t.
p ← x + x′ + δx