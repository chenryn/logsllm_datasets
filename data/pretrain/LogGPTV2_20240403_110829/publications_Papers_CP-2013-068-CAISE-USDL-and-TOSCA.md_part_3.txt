# Pricing for SugarCRM Ultimate

## 1.3. Input Message for the SugarCRM Build Plan

The following listing (Listing 1.3) shows the input message used by the build plan to initiate the process.

### Listing 1.3: SugarCRM Build Plan Input Message
```
<BuildPlanInputMessage>
    <PricingPlan>Ultimate</PricingPlan>
    <Options>
        <!-- Options will be populated dynamically based on the SPARQL query -->
    </Options>
</BuildPlanInputMessage>
```

## 1.4. SPARQL Query for Retrieving Pricing Plan Options

The SPARQL query (Listing 1.4) is used by the build plan to retrieve the options associated with the pricing plan specified by the customized USDL URI. These options are then automatically installed.

### Listing 1.4: SPARQL Query for Retrieving Pricing Plan Options
```sparql
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX usdl: <http://www.linked-usdl.org/ns/usdl-core#>
PREFIX price: <http://www.linked-usdl.org/ns/usdl-pricing#>

SELECT ?option
WHERE {
    ?pricePlan price:hasPriceComponent ?priceComponent .
    ?priceComponent price:isLinkedTo ?option .
}
```

## 2. Benefits of Using Linked USDL

The use of Linked USDL enables content-based routing to be both intelligent and adaptable. 

### 2.1. Intelligent Routing
Inference engines can derive additional information not explicitly contained in a service description. For example, the Similarity Ontology (SO) can determine if a service to be routed is similar or related to a target service. Transitive properties like `so:matches` can infer implicit routing rules.

### 2.2. Adaptable Routing
Adaptable content-based routing is achieved by extending service descriptions with domain-dependent information. For instance, the FInest project in logistics adds domain-specific information, while external sources like dbpedia, YAGO, or freebase can enhance service descriptions. This contrasts with existing approaches that rely on closed schemas like WSDL. The routing mechanism works with the extensibility of Linked USDL and can process extended service descriptions. Our SaaS SugarCRM model includes domain-specific vocabulary from the CRM field (see Section 3.2). However, evaluating the impact of additional domain-specific information on routing was out of scope for this paper.

## 3. Dynamic Binding of Deployment Descriptors

The binding of Linked USDL service offerings to TOSCA service deployments is done in a loosely coupled manner using TOSCA deployment descriptors. A TOSCA deployment descriptor consists of:
1. A TOSCA Service Archive identifier.
2. The endpoint of its build plan.
3. The respective input message for the build plan.

The provider's TOSCA Runtime Environment can automatically process TOSCA deployment descriptors stored in the routing table of the Local Routing Layer. The Local Routing Layer maps USDL URIs passed by the Global Routing Layer to the corresponding TOSCA deployment descriptors. Our approach uses the publish-subscribe pattern, enabling providers to dynamically offer their provisioning capabilities to marketplaces. This design achieves advantages in resource management, workload distribution, and maintenance operations. For example, if a service instance is slowed down by a high request rate, the provider can instantiate and subscribe a second instance to distribute the workload.

## 4. Evaluation

An evaluation was conducted to assess the feasibility, performance, separation of concerns, and limitations of the prototype developed.

### 4.1. Feasibility
The integration of USDL and TOSCA required a loosely coupled platform to handle the dynamic nature of service advertisements and provisioning. Three main challenges emerged during the construction of the SIOPP prototype:
1. Global service identification and remote description access.
2. Intelligent routing of service requests.
3. Dynamic binding of deployment descriptors.

We used USDL features (inherited from linked data principles) to achieve a unique service identification schema using Linked USDL URIs and uniform data access via HTTP URIs. This enabled a simpler integration of the marketplace and service providers' platforms. The use of SPARQL for content-based routing provided a more flexible querying mechanism compared to web APIs. The dynamic association of TOSCA deployment descriptors with USDL service offerings was achieved using a publish-subscribe pattern, allowing cloud providers to quickly adapt to peak demand by distributing service requests to different TOSCA Runtime Environments.

### 4.2. Performance
Regardless of using SIOPP, the application must be set up using a build plan. We measured the performance of each component separately to analyze the added runtime. For the GRL, we used a hash table with 500,000 entries and looked up 5,000 entries with a total lookup time of 3ms. For the LRL, we used a hash table with 10,000 entries and looked up 1,000 entries, resulting in a total lookup time of 2ms. The build plan was adapted to return immediately after executing the SPARQL query, with an average runtime of 289ms (σ = 76). The runtime for deploying SugarCRM varies between 4 and 7 minutes, depending on the provisioning time of VMs at Amazon EC2. Thus, the overhead caused by SIOPP, even for peak demands, is negligible in our scenario.

### 4.3. Separation of Concerns
The distributed multi-layer routing logic enables the separation of concerns:
- The GRL reflects high-level information, such as the country of the provider for legal aspects.
- The LRL handles lower-level aspects, such as load balancing information.
- The TRL enables implementing security aspects directly in management plans.

This separation allows providers to focus on configuration and subscription and to design their own strategies based on individual aspects such as pricing, without needing to understand the application's management.

### 4.4. Limitations
Our routing approach has only three fixed routing components, making it not scalable for global operation. One way to address this limitation is to adopt a peer-to-peer architecture using an overlay network organized with SKOS. The network can be partitioned according to service domains (e.g., healthcare, finance, and logistics). Requests can be routed from domain to domain/subdomains linked using SKOS properties. The customization string (see Section 4.2) works well with simple customization but is inadequate for condition-based customization. Associating USDL URIs with concrete input values for build plans is difficult if there is no description of how the values affect the deployment.

## 5. Related Work

Several researchers have studied different architectures for marketplaces, but no known studies have focused specifically on connecting cloud service offerings to their automated provisioning. Our efforts to integrate service specifications and standards were first reported by Cardoso et al. [20]. We concluded that model-driven approaches for transforming models were too complex for large-scale projects. Therefore, we based our approach on Linked USDL to achieve a more loosely coupled and simpler alternative.

Pedrinaci et al. [21] propose the iServe platform for publishing linked services, which is a subclass of Linked USDL services representing WSDL, RESTful, OWL-S, and WSMO services. Kirschnick et al. [22] reuse existing solutions to install and configure software in cloud environments. Neither work addressed how service offerings can trigger the remote deployment of a service.

Jayasena et al. [23] integrate different financial standards, such as IFX and SWIFT, with an ontology to resolve semantic heterogeneity. Cardoso et al. [24] follow a similar solution and add the notion of dynamic mappings to establish relations between different specifications. Both achieve limited results when overlap information is small, which is the case for USDL and TOSCA.

While these works use a bottom-up approach, other research took a top-down approach. For example, the Open Services for Lifecycle Collaboration (OSLC) [25] community created specifications to prescribe how tools should be implemented and integrated to exchange data. While successful, this approach cannot be applied to our problem since the specifications we integrate already exist and were developed by different organizations.

## 6. Conclusions

The emergence of cloud standards and specifications, such as USDL and TOSCA, necessitates evaluating their interoperability. In our approach, we developed a prototypical platform to integrate both specifications by modeling the description and deployment of a commercial SaaS application: SugarCRM. The prototyping process identified the challenges and limitations of making USDL and TOSCA interoperable. Key findings indicate that using a global service identification and description access enables a 'lightweight' integration without the need for proprietary web APIs. Multi-level and intelligent routing of service requests allows making routing decisions at different levels of granularity (e.g., legal, pricing, and security). Routing based on Linked USDL URIs achieves high performance, and advanced routing can be done by remotely accessing Linked USDL descriptions. Finally, the dynamic binding of deployment descriptors with services enables providers to react to changing demands and workloads flexibly.

## 7. Acknowledgment

This work was partially funded by the BMWi project CloudCycle (01MD11023). We would also like to thank Alistair Barros for the interesting discussions during our research study.

## References

1. Borenstein, N., Blake, J.: Cloud computing standards: Where’s the beef? IEEE Internet Computing 15(3), 74–78 (2011)
2. Machado, G.S., Hausheer, D., Stiller, B.: Considerations on the interoperability of and between cloud computing standards. In: 27th Open Grid Forum (OGF27), G2C-Net Workshop: From Grid to Cloud Networks, OGF (October 2009)
3. Cardoso, J., Barros, A., May, N., Kylau, U.: Towards a unified service description language for the internet of services: Requirements and first developments. In: IEEE International Conference on Services Computing, Florida, USA (2010)
4. Barros, A., Oberle, D.: Handbook of Service Description: USDL and Its Methods. Springer (2012)
5. OASIS: Topology and Orchestration Specification for Cloud Applications Version 1.0. Working Draft 14 (November 2012)
6. Cardoso, J., Pedrinaci, C., Leidig, T., Rupino, P., Leenheer, P.D.: Open semantic service networks. In: The International Symposium on Services Science (ISSS2012), Leipzig, Germany, pp. 1–15 (2012)
7. Cardoso, J., Winkler, M., Voigt, K.: A service description language for the internet of services. In: First International Symposium on Services Science (ISSS 2009), Leipzig, Germany (2009)
8. Bizer, C., Heath, T., Berners-Lee, T.: Linked data—the story so far. International Journal on Semantic Web and Information Systems 4(2), 1–22 (2009)
9. Binz, T., Breiter, G., Leymann, F., Spatzier, T.: Portable Cloud Services Using TOSCA. IEEE Internet Computing 16(03), 80–85 (2012)
10. Breitenbücher, U., Binz, T., Kopp, O., Leymann, F., Schumm, D.: Vino4TOSCA: A Visual Notation for Application Topologies based on TOSCA. In: Meersman, R., Panetto, H., Dillon, T., Rinderle-Ma, S., Dadam, P., Zhou, X., Pearson, S., Ferscha, A., Bergamaschi, S., Cruz, I.F. (eds.) OTM 2012, Part I. LNCS, vol. 7565, pp. 416–424. Springer, Heidelberg (2012)
11. Hors, A.L., Nally, M.: Using read/write Linked Data for Application Integration: Towards a Linked Data Basic Profile. In: Linked Data on the Web (2012)
12. Ziegler, P., Dittrich, K.: Three decades of data integration—All problems solved? In: Jacquart, R. (ed.) Building the Information Society. IFIP, vol. 156, pp. 3–12. Springer, Boston (2004)
13. Bizer, C., Cyganiak, R., Gauss, T.: The RDF book mashup: From web APIs to a web of data. In: Proceedings of the ESWC 2007 Workshop on Scripting for the Semantic Web, vol. 248 (2007)
14. Carzaniga, A., Rutherford, M.J., Wolf, A.L.: A routing scheme for content-based networking. In: Proceedings of IEEE INFOCOM 2004, Hong Kong, China (2004)
15. Hohpe, G., Woolf, B.: Enterprise Integration Patterns: Designing, Building, and Deploying Messaging Solutions. Addison-Wesley, Boston (2003)
16. Halpin, H., Hayes, P.J., McCusker, J.P., McGuinness, D.L., Thompson, H.S.: When owl:sameAs isn’t the same: An analysis of identity in linked data. In: Patel-Schneider, P.F., Pan, Y., Hitzler, P., Mika, P., Zhang, L., Pan, J.Z., Horrocks, I., Glimm, B. (eds.) ISWC 2010, Part I. LNCS, vol. 6496, pp. 305–320. Springer, Heidelberg (2010)
17. Menychtas, A., Gomez, S.G., Giessmann, A., Gatzioura, A., Stanoevska, K., Vogel, J., Moulos, V.: A marketplace framework for trading cloud-based services. In: Vanmechelen, K., Altmann, J., Rana, O.F. (eds.) GECON 2011. LNCS, vol. 7150, pp. 76–89. Springer, Heidelberg (2012)
18. Akolkar, R., Chefalas, T., Laredo, J., Peng, C.S., Sailer, A., Schaffa, F., Silva-Lepe, I., Tao, T.: The future of service marketplaces in the cloud. In: IEEE Eighth World Congress on Services, pp. 262–269 (2012)
19. BMWi: The standardisation environment for cloud computing. Technical report, Germany Federal Ministry of Economics and Technology (February 2012)
20. Cardoso, J., Voigt, K., Winkler, M.: Service engineering for the internet of services. In: Filipe, J., Cordeiro, J. (eds.) ICEIS 2008. LNBIP, vol. 19, pp. 15–27. Springer, Heidelberg (2009)
21. Pedrinaci, C., Liu, D., Maleshkova, M., Lambert, D., Kopecky, J., Domingue, J.: iServe: A linked services publishing platform. In: Ontology Repositories and Editors for the Semantic Web Workshop. CEUR Workshop Proceedings, vol. 596 (2010)
22. Kirschnick, J., Alcaraz Calero, J.: Toward an architecture for the automated provisioning of cloud services. IEEE Communications Magazine 48(12), 124–131 (2010)
23. Jayasena, S., Bressan, S., Madnick, S.: Financial information mediation: A case study of standards integration for electronic bill presentment and payment using the COIN mediation technology. In: Shan, M.-C., Dayal, U., Hsu, M. (eds.) TES 2004. LNCS, vol. 3324, pp. 152–169. Springer, Heidelberg (2005)
24. Cardoso, J., Bussler, C.: Mapping between heterogeneous XML and OWL transaction representations in B2B integration. Data & Knowledge Engineering 70(12), 1046–1069 (2011)
25. OSLC Core Specification Workgroup: OSLC core specification version 2.0. Technical report, Open Services for Lifecycle Collaboration (August 2010)