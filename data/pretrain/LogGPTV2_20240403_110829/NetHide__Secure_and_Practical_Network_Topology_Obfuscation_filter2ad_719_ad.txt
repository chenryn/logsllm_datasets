times, NetHide devices act autonomously.
We describe the packet processing software as well as
the controller in the following two sections.
700    27th USENIX Security Symposium
USENIX Association
Figure 6: NetHide topology deployment architecture overview. A con-
troller generates the conﬁguration entries which are later used by the
packet processing software running in NetHide devices.
Figure 7: NetHide devices encode state in-
formation into packets in order to avoid
maintaining state in the devices.
5.4 Packet processing software
The packet processing software is running in the data
plane of a network device and typically performs tasks
such as routing table lookups and forwarding packets to
an outgoing interface. For NetHide, we extend it with
functionality to modify packets such that the behavior
for a network user is consistent with V . In the following
paragraphs, we explain the processing shown in Fig. 6.
Identifying potential tracing packets Upon receiving a
new packet, a NetHide device ﬁrst checks whether it is a
response to a packet that was modiﬁed by NetHide (cf.
below). If not, it checks whether the packet’s virtual path
is different from the physical path and it thus needs to
be modiﬁed. Even though we often use traceroute
packets as examples, NetHide does not need to distin-
guish between traceroute (or other tracing trafﬁc)
and productive network trafﬁc. Instead, it purely relies
on the TTL value, the source and destination of a packet
and—if needed—it obfuscates trafﬁc of all applications.
Encoding the virtual topology If a packet needs to be
modiﬁed, NetHide queries the match+action table which
returns the required changes for the packet. Changes can
include modiﬁcations of the destination address and/or
the TTL value. If the packet’s TTL is high enough that
it can cross the egress router, NetHide does not need to
modify addresses. However, if the virtual path for this
packet has a different length than the physical path, the
TTL needs to be incremented or decremented by the dif-
ference of the virtual and the physical path length.
If the packet has a low TTL value which will expire be-
fore the packet reaches its destination, NetHide needs to
ensure that the packet expires at the correct node with re-
spect to V . For this, NetHide modiﬁes the destination ad-
dress of the packet such that it is sent to the node that has
to answer according to V . In addition, it sets the source
address to the address of the NetHide device that han-
dles the packet. Therefore, the modiﬁed packet is sent
to the responding router and the answer comes back to
the NetHide device. At this point, NetHide needs to re-
store the original source and destination addresses of the
packet and forward the reply to the sender.
Rewriting tracing packets at line rate The devices that
we use to deploy NetHide are able to modify network
trafﬁc at line rate without impacting latency and through-
put. As described above, NetHide sometimes needs to
modify the TTL value in production trafﬁc (which does
not impact latency or delay and is already done by routers
today) and it needs to send tracing packets to different
routers (which has an impact on the observed RTT; but
only for tracing packets whose TTL expires before reach-
ing the destination).
Rewriting tracing packets statelessly A naive way to
be able to reconstruct the original source and destina-
tion addresses of a packet is to cache them in the de-
vice (which bears similarities with the operating mode
of a NAT device—but the state would need to be main-
tained on a per-packet basis). Since this would quickly
exceed the limited memory that is typically available in
programmable network devices, NetHide follows a bet-
ter strategy: instead of maintaining the state information
in the device, it encodes it into the packets. More pre-
cisely, NetHide adds an additional header to the packet
which contains the original (layer 2 and 3) source and
destination addresses, the original TTL value as well as
a signature (a hash value containing the additional header
combined with a device-speciﬁc secret value) (cf. Fig. 7).
This meta header is placed on top of the layer 3 payload
and is thus contained in ICMP time exceeded replies.
Preventing packet injections Coming back to the ﬁrst
check when a packet arrives: if it contains a meta header
and the signature is valid (i.e., corresponds to the device),
NetHide restores the original source and destination ad-
dresses of the packet and removes the meta header before
sending it to the outgoing interface.
USENIX Association
27th USENIX Security Symposium    701
NetHidedeviceIncominginterfaceOutgoinginterfaceContainsmetaheader?Modificationrequired?Signaturecorrect?RestoreoriginalheadervaluesRemove metaheaderAdd metaheaderandmodifypacketConfigDrop packetyesyesyesnononoPacketPacketNetHidecontrollerNetHidedevicesrcIPdstIPTTLsrcportdstportpayloadIPUDPP4X1srcport9999payloadsrcIPdstIPTTLsrcportdstportsign.IPUDPmetaUDPP4X1srcport9999payloadsrcIPdstIPTTLsrcportdstportsign.IPUDPmetaUDPXP4TTLIPTTL exceededICMPsrcIPdstIPTTLsrcportdstportpayloadIPUDPXsrcIPTTLIPTTL exceededICMPRouter X5.5 NetHide controller
Below, we explain the key concepts of the NetHide
controller which generates the conﬁgurations mentioned
above.
Conﬁguring the topology Being based on P4 de-
vices, conﬁguration entries are represented as entries in
match+action tables which are queried by the packet pro-
cessing program. NetHide’s conﬁguration entries are of
the following form:
(destination,TTL) (cid:55)→
(virtual destination IP,hops to virtual destination)
to 1.2.3.4 (or any other
where the virtual destination IP can be unspeciﬁed if
only the length of a path needs to be modiﬁed. P4 ta-
bles can match on IP addresses with preﬁxes, meaning
that only one entry per preﬁx (e.g., 1.2.3.0/24) is
required. For example, the entry "(1.2.3.0/24, 1) (cid:55)→
if the device sees
(11.22.33.44, 5)" means that
IP address
a packet
in 1.2.3.0/24) with TTL=1,
to
11.22.33.44 and change the TTL-value to 5.
Modifying packets distributedly NetHide selects one
programmable device per ﬂow which then handles all of
the ﬂow’s packets. This device must be located before the
ﬁrst spoofed node, i.e., the ﬁrst node in the virtual path
that is different from the physical path.
it will send it
While there is always one distinct device in charge of
handling a certain ﬂow, the same device is assigned to
many different ﬂows. To balance the load across devices,
NetHide chooses one of the eligible devices at random
(this does not impact the obfuscation). For more redun-
dancy, multiple devices could be assigned to each ﬂow.
Changing the topology on-the-ﬂy Thanks to the sep-
aration between the packet processing software and the
conﬁguration table entries, V can be changed on-the-ﬂy
without interrupting the network.
5.6 Partial deployment
As deploying a system that needs to run on all devices is
difﬁcult, we design NetHide such that it can fully protect
a network while being deployed on only a few devices.
The key enabler for this is that NetHide only needs to
modify packets at most at one point for each ﬂow.
NetHide can obfuscate all trafﬁc as soon as it has
crossed at least one NetHide device. In the best case, in
which NetHide is deployed at the network edge, it can
protect the entire network. In the evaluation (§6), we
show that even for the average case in which the NetHide
devices are placed at random positions, a few devices are
enough to protect a large share of the ﬂows.
Abilene
Switch
US Carrier
Nodes
Links
Max. ﬂow density
Avg. ﬂow density
11
14
35
19
42
63
390
89
158
189
11301
1587
Table 1: We evaluate NetHide based on three realistic
topologies of different size.
5.7 Dealing with topology changes
NetHide sends tracing packets through P such that they
expire at the correct node according to V . Changes in P
can impact NetHide in two ways:
1. When links are added to P or the routing behavior
changes: some ﬂows may no longer traverse the de-
vice that was selected to obfuscate them. This can be
addressed by installing conﬁguration entries in multi-
ple devices (which results in a trade-off between re-
source requirements and redundancy). Since V is se-
cure in any case, there is no immediate need to react
to changes in P. However, to provide maximum accu-
racy and utility, NetHide can compute a new V(cid:48) based
on P(cid:48) and deploy it without interrupting the network.
2. When links are removed from P: this results in link
failures in V and has no impact on the security of V . If
the links are permanently removed, NetHide can com-
pute and deploy a new virtual topology.
6 Evaluation
In this section, we show that NetHide: (i) obfuscates
topologies while maintaining high accuracy and utility
(§6.2, §6.3); (ii) computes obfuscated topologies in less
than one hour, even when considering large networks
(§6.4). Recall that this computation is done ofﬂine, once,
and does not impact network performance at runtime;
(iii) is resilient against timing attacks (§6.5); (iv) is ef-
fective even when partially deployed (§6.6); (v) mitigates
realistic attacks (§6.7); and (vi) has little impact on de-
bugging tools (§6.8).
6.1 Metrics and methodology
Metrics To be able to compare the results of our evalu-
ation with different topologies, we use the average ﬂow
density reduction factor, which denotes the ratio between
the ﬂow density in the physical topology P = (N,L,T )
and in the virtual topology V = (N(cid:48),L(cid:48),T(cid:48)):
702    27th USENIX Security Symposium
USENIX Association
Figure 8: Accuracy and utility for different protection margins. NetHide achieves high accuracy (left plot) and utility
(middle) and does not change most of the paths at all (right plot) while reducing the ﬂow density by more than 75 %.
FR = 1− avgl∈L(cid:48) fd(V,l)
avgl∈L fd(P,l)
The ﬂow density denotes the number of ﬂows that are
carried at each link (cf. §2.3). For example, FR = 0.2
means that the links in V carry 80% less ﬂows than those
in P (on average). For the accuracy and utility of V , we
use Aavg and Uavg as deﬁned in §4.
Datasets We consider three publicly available network
topologies from [11]: a small (Abilene, the former US
research network), a medium (Switch, the network con-
necting Swiss universities) and a large one (US Carrier, a
commercial network in the US). Table 1 lists key metrics
for the three topologies. For the forwarding behavior, we
assume that trafﬁc in P is routed along the shortest path
or a randomly picked shortest path in case there are mul-
tiple shortest paths between two nodes.
Parameters We run all our experiments with the fol-
lowing parameters: All nodes in P can act as ingress and
egress for malicious trafﬁc (which is the worst case when
an attacker is everywhere). We also assume that all links
have the same capacity. Since tracing packets need to be
answered by the correct node, NetHide only adds virtual
links but no nodes (i.e., N = N(cid:48)). We consider 100 for-
warding trees per node. For the ILP solver, we specify a
maximum relative gap of 2 %, which means that the op-
timal results can be at most 2 % better than the reported
results (in terms of accuracy and utility, security is not
affected). We run NetHide at least 5 times with each con-
ﬁguration and plot the average results.
6.2 Protection vs. accuracy and utility
In this experiment, we analyze the impact of the obfus-
cation on the accuracy and utility of V . For this, we run
NetHide for link capacities c (the maximum ﬂow density)
varying between 10 % and 100 % of the maximum ﬂow
density listed in Table 1.
Fig. 8 depicts the accuracy (left) and utility (center)
achieved by NetHide according to the ﬂow density reduc-
tion factor. An ideal result is represented by a point in the
upper right corner translating to a topology that is both
highly obfuscated and provides high accuracy and utility.
As baseline, we include the results of a naive obfuscation
algorithm that computes V by adding links at random po-
sitions and routing trafﬁc along a shortest path.
NetHide scores close to the optimal point especially
for large topologies. We observe that the random algo-
rithm can achieve high accuracy and utility (when adding
few links) or high protection (when adding many links)
but not both at the same time. Though, in a small area
(very high ﬂow density reduction in a small topology),
the random algorithm can outperform NetHide. The rea-
son is that such a low ﬂow density is only achievable in
an (almost) complete graph. While adding enough links
randomly will eventually result in a complete graph, the
small number of forwarding trees considered by NetHide
does not always contain enough links to build a complete
graph.
In Fig. 8 (right), we show the percentage of ﬂows that
do not need to be modiﬁed (i.e., have 100% accuracy and
utility) depending on the ﬂow density reduction factor.
Fig. 8 (right) illustrates that NetHide can obfuscate a
network without modifying most of its paths therefore
preserving the usability of tracing tools. In the medium
size topology, NetHide computes a virtual topology that
lowers the average ﬂow density by more than 80 % while
keeping more than 80 % of the paths identical. This